○ The non-standard deserialization library that I’m using?
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Existing Gadget Chain Tools
● ysoserial1
○ Collection of known gadget chains and exploits
● joogle2
○ Programatically query about types/methods on the classpath
● Java Deserialization Scanner3
○ Burp Suite plugin; uses known payloads (ysoserial) to discover and exploit vulns.
● marshalsec4
○ Deserialization payload generator for numerous libraries and gadget chains
● NCC Group Burp Plugin5
○ “Mainly based on the work of Muñoz and Mirosh’s Friday the 13th: JSON Attacks”
1 https://github.com/frohoff/ysoserial
2 https://github.com/Contrast-Security-OSS/joogle
3 https://techblog.mediaservice.net/2017/05/reliable-discovery-and-exploitation-of-java-deserialization-vulnerabilities/
4 https://github.com/mbechler/marshalsec
5 https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2018/june/finding-deserialisation-issues-has-never-been-easier-freddy-the-serialisation-killer/
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Building a New Tool to Find Gadget Chains
What we really want is a tool to evaluate risk. 
How important is it to remediate this 
vulnerability?
● Is a given deserialization vulnerability exploitable?
● What exploits are possible? RCE, SSRF, DoS?
● It doesn’t need to be perfect; a reasonable overestimation 
of risk is useful in this context.
● Note: we don’t actually have to actually generate payloads.
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Requirements
● Not looking for vulnerabilities; assume we only use this 
tool if we find a vulnerability
● It needs to look at the entire classpath of the application
● It should err on the side of false positives rather than false 
negatives
● It should operate on bytecode; we usually have the entire 
classpath packaged as a war and may not have sources 
(especially if we’re including proprietary, third-party 
libraries)
○
Plus it may include libraries written in Groovy, Scala, Clojure, ...
Gadget Inspector
A Java bytecode analysis tool for finding gadget 
chains.
Automated Discovery of Deserialization Gadget Chains
Ian Haken
●
Operates on any given classpath, i.e. a particular library or an entire war
●
Reports discovered gadget chains as a sequence of method invocations
●
Performs some simplistic symbolic execution to understand possible 
dataflow from method arguments to subsequent method invocations
●
Makes a lot of simplifying assumptions that make code analysis easy
Gadget Inspector
Gadget Inspector
●
CertificateRevokedException.readObject()
●
Collections$CheckedMap.put()
●
TreeMap.put()
●
scala/math/Ordering$$anon$5.compare()
●
scala/PartialFunction$OrElse.apply()
●
...
app.war
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Step 1: Enumerate class/method hierarchy
app.war
●
clojure/FnEval
○
clojure/IFn
○
java/io/Serializable
○
java/lang/Object
●
clojure/FnConstant
○
clojure/IFn
○
java/io/Serializable
○
java/lang/Object
●
clojure/FnCompose
○
clojure/IFn
○
java/io/Serializable
○
java/lang/Object
●
AbstractTableModel$ff19274a
○
java/io/Serializable
○
java/lang/Object
WEB-INF/lib
WEB-INF/classes
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class FnConstant implements IFn {
   private Object value;
   public Object invoke(Object arg) {
       return value;
   }
}
Step 2: Discover “Passthrough” Dataﬂow
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class FnConstant implements IFn {
   private Object value;
   public Object invoke(Object arg) {
       return value;
   }
}
Step 2: Discover “Passthrough” Dataﬂow
Assumption #1: All members of a “tainted” object are also tainted (and 
recursively, etc)
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class FnConstant implements IFn {
   private Object value;
   public Object invoke(Object arg) {
       return value;
   }
}
Step 2: Discover “Passthrough” Dataﬂow
Assumption #1: All members of a “tainted” object are also tainted (and 
recursively, etc)
●
FnConstant.invoke() -> 0
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class FnConstant implements IFn {
   private Object value;
   public Object invoke(Object arg) {
       return value;
   }
}
Step 2: Discover “Passthrough” Dataﬂow
public class FnDefault {
  private FnConstant f;
  public Object invoke(Object arg) {
    return arg != null ? arg : f.invoke(arg);
  }
}
Assumption #1: All members of a “tainted” object are also tainted (and 
recursively, etc)
●
FnConstant.invoke() -> 0
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class FnConstant implements IFn {
   private Object value;
   public Object invoke(Object arg) {
       return value;
   }
}
Step 2: Discover “Passthrough” Dataﬂow
public class FnDefault {
  private FnConstant f;
  public Object invoke(Object arg) {
    return arg != null ? arg : f.invoke(arg);
  }
}
Assumption #1: All members of a “tainted” object are also tainted (and 
recursively, etc)
●
FnConstant.invoke() -> 0
Assumption #2: All branch conditions are satisfiable
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class FnConstant implements IFn {
   private Object value;
   public Object invoke(Object arg) {
       return value;
   }
}
Step 2: Discover “Passthrough” Dataﬂow
public class FnDefault {
  private FnConstant f;
  public Object invoke(Object arg) {
    return arg != null ? arg : f.invoke(arg);
  }
}
Assumption #1: All members of a “tainted” object are also tainted (and 
recursively, etc)
●
FnConstant.invoke() -> 0
Assumption #2: All branch conditions are satisfiable
●
FnDefault.invoke() -> 1
●
FnDefault.invoke() -> 0
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class FnConstant implements IFn {
   private Object value;
   public Object invoke(Object arg) {
       return value;
   }
}
Step 2: Discover “Passthrough” Dataﬂow
public class FnDefault {
  private FnConstant f;
  public Object invoke(Object arg) {
    return arg != null ? arg : f.invoke(arg);
  }
}
Assumption #1: All members of a “tainted” object are also tainted (and 
recursively, etc)
●
FnConstant.invoke() -> 0
Assumption #2: All branch conditions are satisfiable
●
FnDefault.invoke() -> 1
●
FnDefault.invoke() -> 0
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 3: Enumerate “Passthrough” Callgraph
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 3: Enumerate “Passthrough” Callgraph
AbstractTableModel$ff19274a.hashCode()
●
0 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 3: Enumerate “Passthrough” Callgraph
AbstractTableModel$ff19274a.hashCode()
●
0 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 3: Enumerate “Passthrough” Callgraph
AbstractTableModel$ff19274a.hashCode()
●
0 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 3: Enumerate “Passthrough” Callgraph
AbstractTableModel$ff19274a.hashCode()
●
0 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
FnCompose.invoke()
●
1 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
●
0 -> IFn.invoke() @ 1
public class FnCompose implements IFn {
   private IFn f1, f2;
   public Object invoke(Object arg) {
       return f2.invoke(f1.invoke(arg));
   }
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 3: Enumerate “Passthrough” Callgraph
AbstractTableModel$ff19274a.hashCode()
●
0 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
FnCompose.invoke()
●
1 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
●
0 -> IFn.invoke() @ 1
public class FnCompose implements IFn {
   private IFn f1, f2;
   public Object invoke(Object arg) {
       return f2.invoke(f1.invoke(arg));
   }
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 3: Enumerate “Passthrough” Callgraph
AbstractTableModel$ff19274a.hashCode()
●
0 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
FnCompose.invoke()
●
1 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
●
0 -> IFn.invoke() @ 1
public class FnCompose implements IFn {
   private IFn f1, f2;
   public Object invoke(Object arg) {
       return f2.invoke(f1.invoke(arg));
   }
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 3: Enumerate “Passthrough” Callgraph
AbstractTableModel$ff19274a.hashCode()
●
0 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
FnCompose.invoke()
●
1 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
●
0 -> IFn.invoke() @ 1
public class FnCompose implements IFn {
   private IFn f1, f2;
   public Object invoke(Object arg) {
       return f2.invoke(f1.invoke(arg));
   }
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 4: Enumerate Sources Using Known Tricks
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 4: Enumerate Sources Using Known Tricks
AbstractTableModel$ff19274a.hashCode() @ 0
Automated Discovery of Deserialization Gadget Chains
Ian Haken
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
Step 4: Enumerate Sources Using Known Tricks
AbstractTableModel$ff19274a.hashCode() @ 0
Limitation #1: Relies on known tricks. Some tricks (e.g. HashMap -> hashCode) 
we could derive anyway, but others (like DynamicProxy) we could not.
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Step 5: BFS on Call Graph for Chains
Sources
●
AbstractTableModel$ff19274a.hashCode() @ 0
Call Graph
AbstractTableModel$ff19274a.hashCode()
●
0 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0
FnCompose.invoke()
●
1 -> IFn.invoke() @ 1
●
0 -> IFn.invoke() @ 0