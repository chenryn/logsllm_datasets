O0(𝑠) :
E
E
First, we prove that
Proof of Lemma B.1. Fix an arbitrary 𝑠 ∈ {0, 1}∗ and a ppt al-
gorithm A that makes at most 𝑞F queries to the random oracle.
Without loss of generality, we assume A never queries the random
oracle on the same input. Let the events:
𝐸real(𝜅) (cid:66)
𝑟 ←Gen(1𝜅) : AF𝜅(·)(cid:0)Enc𝑟 (𝑠), F𝜅(𝑟)(cid:1) = 1
𝐸rand(𝜅) (cid:66) 𝑢 ←$ {0, 1}𝜅; 𝑟 ←Gen(1𝜅) : AF𝜅(·)(cid:0)Enc𝑟 (0|𝑠|), 𝑢(cid:1) = 1 .
| Pr [𝐸real(𝜅)] − Pr [𝐸rand(𝜅)] | ≤ 2(cid:0)𝑞FAdvkey-rec
(𝜅) + AdveavE (𝜅)(cid:1).
(6)
To do so, we define the event 𝐸call as “one of the calls by A to the
random oracle F𝜅 is on input 𝑟 (the random value sampled in 𝐸real)”.
We can rewrite Pr [𝐸real(𝜅)] as:
Pr [𝐸real(𝜅) | 𝐸call] Pr [𝐸call] + Pr [𝐸real(𝜅) | ¬𝐸call] Pr [¬𝐸call]
Also, observe that:
• Pr[𝐸call] ≤ 𝑞FAdvkey-rec
(7)
• | Pr [𝐸real(𝜅) | ¬𝐸call] − Pr [𝐸rand(𝜅)] | ≤ 2AdveavE (𝜅).
(8)
To see (7) note that we can build an adversary B against the
key-rec security game. On input 𝜅, B sends message 𝑠 to its chal-
lenger, receiving 𝑐 (cid:66) Enc𝑟 (𝑠) for some unknown and freshly gener-
ated key 𝑟. Now, B samples 𝑢 ←$ {0, 1}𝜅 and runs A on input (𝑐, 𝑢).
On every query by A to its random oracle, say on value 𝑣𝑖, B will
answer back with a uniformly sampled value from {0, 1}𝜅 and will
store 𝑣𝑖 in a record. When A interrupts or finishes its execution,
B will output one of the stored values 𝑣𝑖, selected uniformly at
9Which states that for any random variable 𝑋 and any convex function 𝜑, it holds
𝐸[𝜑(𝑋)] ≥ 𝜑(𝐸[𝑋 ]).
(𝜅).
E
.
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA654random. It is clear that Advkey-rec
E,B (𝜅) ≥ Pr[𝐸call]/𝑞F. To see (8) it is
enough to consider an adversary B against the eav security game
that on input 𝜅, sends two messages 𝑠 and 0|𝑠| to its challenger,
receiving 𝑐 which is either Enc𝑟 (𝑠) or Enc𝑟 (0|𝑠|) for some fresh
key 𝑟. Then, B samples 𝑢 ←$ {0, 1}𝜅 and runs A on input (𝑐, 𝑢),
simulating the random oracle by sampling values uniformly from
{0, 1}𝜅 and mimics A’s output. It is not hard to see that
1
2 |Pr [𝐸real(𝜅) | ¬𝐸call] − Pr [𝐸rand(𝜅)]|
AdveavE,B(𝜅) =
Now, to conclude the proof of (6), let us denote Pr [𝐸call] by 𝜀 for
compactness, we have:
| Pr [𝐸real(𝜅)] − Pr [𝐸rand(𝜅)] |
≤ 𝜀 +(cid:12)(cid:12) Pr [𝐸real(𝜅) | ¬𝐸call] (1−𝜀) − Pr [𝐸rand(𝜅)](cid:12)(cid:12)
≤ 2(cid:0)𝑞FAdvkey-rec
(𝜅) + AdveavE (𝜅)(cid:1)
≤ 𝜀 + 2AdveavE (𝜅) + 𝜀 Pr [𝐸real(𝜅) | ¬𝐸call] ≤ 2𝜀 + 2AdveavE (𝜅)
.
.
E
Finally, to conclude the proof of the lemma, consider an auxiliary
oracle O′
𝑖 , for every 𝑖 ∈ [0, 𝑞O], defined as O1 on the first 𝑖 invoca-
tions and as O0 on the rest. Clearly, O′
0 is equivalent to O0, whereas
O′
𝑞O is equivalent to O1. We conclude the proof by a standard hybrid
argument, where we just need to show that for every 𝑖 ∈ [𝑞O] and
every ppt adversary A making at most 𝑞F queries to its random
oracle, the difference
𝑖−1(·),F𝜅 (·)(𝜅) = 1(cid:105) − Pr(cid:104)AO′
(cid:12)(cid:12)(cid:12)Pr(cid:104)AO′
is upper-bounded by 2(cid:0)𝑞FAdvkey-rec
𝑖 (·),F𝜅 (·)(𝜅) = 1(cid:105)(cid:12)(cid:12)(cid:12)
(𝜅)+AdveavE (𝜅)(cid:1), but this follows
easily from (6), since it holds for every 𝑠 ∈ {0, 1}∗ and given the
independence of the sampling on every oracle call.
□
E
Proof of Theorem 3.3. Consider an auxiliary security game,
InfoCP′, which is identical to the one described in Figure 2 with
the exception that the adversary A is given access to a modified
oracle O′(𝑅, crs, 𝑏, 𝜏𝑘, ·) defined as:
O′(𝑅, crs, 𝑏, 𝜏𝑘, 𝑠) :
if 𝑓 (𝑠) = 0, return ⊥
𝑟 ← E.Gen(1𝜅); 𝑐 (cid:66) Enc𝑟 (𝑠); 𝑦 (cid:66) F𝜅(𝑟)
if 𝑏 = 1 : overwrite 𝑟 with H
𝜋 ← Π.Prove(𝑅, crs, (𝑐, 𝑦), 𝑟)
return (𝑐, 𝑦, 𝜋)
𝜅 (𝜏𝑘, 𝑦)
-1
Let A be an adversary against the InfoCP game that makes at
most 𝑞O queries to its oracle and at most 𝑞F queries to the ran-
dom oracle. For compactness, denote by 𝑊A and 𝑊 ′
A the events
InfoCPΠA(𝜅) and InfoCP′ΠA (𝜅) respectively. We have,
Adv
Π,A (𝜅) (cid:66)
InfoCP
Now, consider the following distinguisher D with access to ora-
cle O𝑏 of Lemma B.1 (for some 𝑏 ∈ {0, 1}) and the random oracle F𝜅:
DO𝑏 (·),F𝜅 (·)(1𝜅):
run RG(1𝜅) to get (𝑅, 𝜏𝑘)
call A on input 𝑅, getting (crs, 𝜎)
call A on input 𝜎
on every query (𝑠) from A to its oracle:
query (𝑠) to the O𝑏 oracle to get (𝑐, 𝑦)
compute 𝜋 ← Π.Prove(𝑅, crs, (𝑐, 𝑦), H-1
send 𝜋 to A
D forwards the query to its own random oracle and
copies the output to A
on every call by A to the random oracle:
𝜅 (𝜏𝑘, 𝑦))
when A outputs 𝑏′
A, return 𝑏′
A
-1
We therefore have,
It is clear that D performs at most 𝑞F queries to its random
oracle and at most 𝑞O queries its O𝑏 oracle. Moreover, if 𝑏 = 0,
the distinguisher D is perfectly simulating to A the InfoCP′ game,
where the internal challenge bit, 𝑏InfoCP′, is 1. Furthermore, if 𝑏 = 1,
D is simulating to A the InfoCP game, where the internal challenge
bit, 𝑏InfoCP, is 1. This is because the following distributions are
identical, given that H𝜅(𝑘, ·) is a permutation:
(cid:110)𝑤 ←$ {0, 1}𝜅; (cid:0)H𝜅(𝑘, 𝑤), 𝑤(cid:1)(cid:111) ≡(cid:110)𝑢 ←$ {0, 1}𝜅; (cid:0)𝑢, H
𝜅 (𝑘, 𝑢)(cid:1)(cid:111) .
Pr(cid:104)DO0(·),𝐹𝜅 (·)(𝜅) = 1(cid:105)
= Pr(cid:2)𝑊 ′
A | 𝑏InfoCP′ = 1(cid:3) and
Pr(cid:104)DO1(·),𝐹𝜅 (·)(𝜅) = 1(cid:105)
= Pr(cid:2)𝑊A | 𝑏InfoCP = 1(cid:3) .
Pr(cid:2)𝑊A | 𝑏InfoCP = 0(cid:3) = Pr(cid:2)𝑊 ′
A | 𝑏InfoCP′ = 0(cid:3) ,
(cid:12)(cid:12)Pr[𝑊A] − Pr[𝑊 ′
A](cid:12)(cid:12)
(cid:12)(cid:12)Pr(cid:2)𝑊A | 𝑏InfoCP = 1(cid:3) − Pr(cid:2)𝑊 ′
A | 𝑏InfoCP′ = 1(cid:3)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)Pr(cid:104)DO1(·),𝐹𝜅 (·)(𝜅) = 1(cid:105) − Pr(cid:104)DO0(·),𝐹𝜅 (·)(𝜅) = 1(cid:105)(cid:12)(cid:12)(cid:12)
(𝜅) + AdveavE (𝜅)(cid:1)
≤ 𝑞O(cid:0)𝑞FAdvkey-rec
since both experiments are identical when the challenge bit is 0.
Consequently, and in virtue of Lemma B.1,
Moreover, observe that
1
2
1
2
=
=
Combining this fact with equation (9), we can conclude the proof
E
.
of the theorem by showing that
InfoCP′
Π,A (𝜅) ≤ Adv
Π,B (𝜅)
tS-WI
Adv
for some adversary B against the tS-WI game. We provide such
a B in Figure 6. It is clear that the distribution of B’s answers to
A’s queries is the same as the one by the oracle in Game InfoCP′.
Therefore, if A outputs the correct result, so does B. We actually
have Adv
□
InfoCP′
Π,A (𝜅) = Adv
Π,B (𝜅).
tS-WI
(cid:12)(cid:12)(cid:12)(cid:12)Pr[𝑊A] − 1
(cid:12)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)Pr[𝑊 ′
≤(cid:12)(cid:12)Pr[𝑊A] − Pr[𝑊 ′
A](cid:12)(cid:12) +
A](cid:12)(cid:12) + Adv
=(cid:12)(cid:12)Pr[𝑊A] − Pr[𝑊 ′
2
A] − 1
2
InfoCP′
Π,A (𝜅)
(cid:12)(cid:12)(cid:12)(cid:12)
(9)
B.2 Proof of the sigma-protocol from Figure 5
Proof. It is not hard to see that the protocol from Figure 5 is
perfectly complete. Furthermore, it satisfies 2-special soundness.
Indeed, from two different accepting transcripts with the same
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA655𝑡 (cid:66) (𝑧𝑡−ˆ𝑧𝑡)/(𝑒−ˆ𝑒)
first message, but different challenges, say (𝐴1, 𝐴2, 𝑒, 𝑧𝑠, 𝑧𝑡 , 𝑧𝑡′) and
(𝐴1, 𝐴2, ˆ𝑒, ˆ𝑧𝑠, ˆ𝑧𝑡 , ˆ𝑧𝑡′), where 𝑒 ≠𝑝 ˆ𝑒, let:
𝑡′ (cid:66) (𝑧𝑡′−ˆ𝑧𝑡′)/(𝑒−ˆ𝑒) .
𝑠 (cid:66) (𝑧𝑠−ˆ𝑧𝑠)/(𝑒−ˆ𝑒)
It turns out that (𝑠, 𝑡, 𝑡′) is a valid witness. Finally, the protocol
is honest-verifier zero-knowledge by a simulator that outputs an
accepting transcript (𝐴1, 𝐴2, 𝑐, 𝑧𝑠, 𝑧𝑡), identically distributed to a
real one, as follows: on input 𝑒 ∈ Z𝑝, sample 𝑧𝑠, 𝑧𝑡 , 𝑧𝑡′ ←$ Z𝑝 and
compute 𝐴1 (cid:66) 𝑧𝑠 𝐴 + 𝑧𝑡 𝐵 − 𝑒 𝐶 and 𝐴2 (cid:66) 𝑧𝑠 𝐴′ + 𝑧𝑡′ 𝐵′ − 𝑒 𝐶′. □
B(𝑅, 𝜏𝑘) :
call A on input 𝑅, getting (crs, 𝜎) and let ˆ𝜎 (cid:66) (𝜎, 𝜏𝑘)
output (crs, ˆ𝜎) to the tS-WI challenger
BO(𝑅,crs,𝑏,·,·,·)( ˆ𝜎) :
parse ˆ𝜎 as (𝜎, 𝜏𝑘) and run A on input 𝜎
on every query (𝑠) by A to its oracle:
if 𝑓 (𝑠) = 0, return ⊥
sample 𝑟0 ←$ {0, 1}𝜅
set 𝑐 (cid:66) Enc𝑟0(𝑠); 𝑦 (cid:66) F𝜅(𝑟0); set 𝑟1 (cid:66) H-1
𝜅 (𝜏𝑘, 𝑦)
query ((𝑐, 𝑦), 𝑟0, 𝑟1) to the tS-WI oracle, to get 𝜋
send (𝑐, 𝑦, 𝜋) to A
when A outputs 𝑏′
A, return 𝑏′ (cid:66) 𝑏′
A
Figure 6: Adversary B against the tS-WI game, based on ad-
versary A against the InfoCP′ game.
Session 2E: Smart Contracts and Cryptocurrencies CCS '20, November 9–13, 2020, Virtual Event, USA656