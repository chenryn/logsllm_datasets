### Interaction and Security in AR Applications

In this work, we focus on the potential for undesirable interactions between applications, particularly as they pertain to the interaction of their AR output. We assume that Arya’s operating system employs traditional, standard security best practices, such as application isolation. Our primary concern is the threats that arise from the interaction of AR outputs from different applications. Additionally, we do not address the distribution of AR output policies. These policies may be pre-loaded by the device manufacturer, introduced by third-party sources, or set based on user preferences. We also consider the possibility that these policies may be buggy or malicious, and we do not require Arya to trust the sources of these policies. Therefore, our design must account for the potential of malicious or buggy policies.

We specifically focus on visual AR content, and issues related to non-visual output (e.g., haptic, audio) are considered out of scope. However, the insights gained from this work may be applicable to other output modalities as well.

### IV. Design: Arya

#### A. System Overview

AR applications fundamentally require the ability to continuously capture and process sensor inputs and superimpose virtual output on the user's view of the real world. For example, a collision warning application must detect when the user is too close to another car and display a warning. The user's view of the real world is constantly changing, and applications must dynamically generate and update visual content in response to these changes. Arya ensures that the generated content does not obscure important real-world elements, such as traffic signs or pedestrians.

The high-level challenge addressed in this work is how an AR platform should constrain the output behaviors of potentially buggy, malicious, or compromised applications and handle conflicts between outputs from multiple applications. This is crucial for supporting rich, untrusted applications that can be run simultaneously and safely used while the user interacts with the physical world (e.g., while walking or driving).

#### B. Threat Model

Our threat model considers one or more malicious, buggy, or compromised applications that create AR content, which may intentionally or accidentally:

- Obscure another application’s virtual content.
- Obscure important real-world content, such as traffic signs, cars, or people.
- Disrupt the user physiologically, such as by startling them (e.g., by suddenly creating or quickly repositioning virtual objects).

To combat these threats, we design Arya, an AR platform with a centralized, trusted output policy module that enforces policies on AR content. These policies aim to mitigate the above classes of threats, e.g., by preventing applications from obscuring important real-world elements.

#### C. Input and Output Management

Arya consists of the following core modules, shown in Figure 4, to support and constrain application behaviors in a dynamically changing environment:

- **System Sensors and Recognizers**: Gather and interpret sensor data from the real world.
- **Input Policy Module**: Filter and dispatch these data to applications that require access.
- **Output Policy Module**: Process new application requests to create or modify virtual content, and, if applicable, modify this virtual content based on the policies.
- **Display Drivers**: Display updated virtual state.

These modules support applications running on Arya that may call APIs to query information about the real world and create or modify virtual objects. Arya processes application requests and produces every output video frame displayed to the user.

#### D. AR Object Abstraction

Arya builds on the AR object abstraction for displaying output, proposed in prior work. AR objects are OS primitives that encapsulate virtual content that applications wish to overlay on the user's view of the real world. Each AR object has a visual representation and associated characteristics, such as size and opacity. AR applications can create and transform these objects (e.g., by moving, rotating, or resizing them), and Arya supports these common operations.

Additionally, Arya allows applications to create "world-locked" objects that are attached to real-world locations or objects, and Arya automatically updates where they are rendered in the user’s display. Applications can also create "head-locked" objects that appear at a fixed location in the user’s display.

#### E. Specifying AR Output Policies

Output policies serve to protect AR users from deceptive, discomforting, or harmful content. Our key design questions and decisions include:

- **Design Question**: How can we translate abstract guidelines into concrete policies that the output policy module can enforce in practice?
- **Design Decision**: Separate policy conditions and mechanisms. Policies consist of:
  - **Conditional Predicate**: A boolean expression that determines when a policy should be applied.
  - **Mechanisms**: Actions that the output policy module should take when the policy’s conditional predicate evaluates to true.

- **Design Question**: How should policy conditions and mechanisms be expressed?
- **Design Decision**: Restrict policies to combine options from a well-defined set of parameterized conditions and mechanisms supported by Arya.

**Policy Conditions**:
- Attributes of AR objects, such as visual properties (size, transparency, speed) and relationships with other virtual or real-world objects.
- Global contextual information, such as the user’s platform (e.g., if a user’s car is in motion) or time of day.

**Policy Mechanisms**:
- Possible actions include deleting AR objects, modifying them (e.g., changing transparency or size), or moving them (e.g., away from blocking another object).

### Summary of Policies

| Identifier | Description | Applies To |
|------------|-------------|------------|
| P1 | Avoid abrupt movement of AR objects. | Car, HMD |
| P2 | Place AR objects at a comfortable viewing distance from the user. | Car, HMD |
| P3 | Allow the user to see the real world in the background. | Car, HMD |
| P4 | Avoid content that is “head-locked” (at a fixed location in the display). | HMD |
| P5 | Don’t display text messages or social media while driving. | Car |
| P6 | Don’t obscure pedestrians or road signs. | Car, HMD |
| P7 | Don’t obscure exit signs. | Car, HMD |
| P8 | Disable user input on transparent AR objects. | Car, HMD |
| P9 | Only allow advertisements to be overlaid on real-world billboards. | Car, HMD |
| P10 | Don’t allow AR objects to occlude other AR objects. | Car, HMD |

This structured approach to AR output management ensures that Arya can effectively constrain and manage the output of AR applications, providing a safer and more controlled AR experience.