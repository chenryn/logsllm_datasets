print i
命令
64
awk -f seq 10
awk -f seq 1 10
awk -f seq 1 10 1
都是生成1到10这十个整数.
ARGV里面的参数可以修改或添加，ARGC可能会随之改变，每当有一个输入文件结束，awk把ARGV
的下一个非空元素（直到ARGC－1的当前值）看作是下一个输入文件名.于是，把ARGV的一个元素设
置为空，意味着awk不会把它看作是输入文件.名字“_”可以当作标准输入来用。
---
## Page 67
第二章AWK语言
69
2.6与其他程序的交互
这一节描述几种awk程序与其他命令合作的方式.主要针对Unix系统，在非Unix系统上，这里的
例子可能无法工作或表现出不同的行为。
system函数
内建函数system(expression）用于执行命令，会令由expression 给出，system的返回值就是命
令的退出状态
例如，我们可以重新实现2.5节提到的文件包含程序，就像这样
(print }
如果第一个字段是#include，那么双引号就会被移除，然后Unix命令cat打印以第2个字段命名的
文件，其他输入行被原样复制，
用AWK制作Shell命令
65
到目前为止的所有例子，awk程序都是写在一个文件中，然后利用-f选项读取，或者是出现在命令
行中，用一对单引号括起来，就像：
awk'( print $1)'...
Awk用到了许多Shell也同样会用到的字符，例如S与"，把awk程序包围在一对单引号中可以确保
Shell把程序原封不动地传递给awk.
上面提到的两种执行awk程序的方法都要求用户自己打一些宇，为了降低打字的工作量，我们
想要把命令与程序都写到一个可执行文件中，通过键入文件名来执行程序，假设我们想要写一个命令
field1，用于打印每个输入行的第一个字段，其实这非常容易，我们把
awk'{print $1}'$*
写到一个文件field1中，为了让它成为一个可执行文件，载们必须执行Unix命令：
chmod +x field1
现在，如果我们想要打印某些文件的每行的第1个字段，只要键入
fieldl filenames ...
现在我们考虑实现一个更加通用的field，程序可以从每个输入行中打印任意组合的字段，换句话
说，命令
field n; nz ---file file 2 -
按照特定的顺序打印特定的字段，但是我们如何获取n，的值，又如何区分n；与文件名参数？
对于采用Shell编程的人来说，解决上面提到的两个问题有多种方式，如果使用awk的话，最简单
的方式是扫描内建数组ARGV，获取n;的值之后，把数组中对应的位置清零，这样它们就不会被当成文件
名：
66
---
## Page 68
第二章AWK语言
09
# field - print named fields of each input line
usage: field n n n ... file file file ...
awk '
BEGIN {
）+++6[1=）
fld[++nf ]  =  ARGV[i]
ARGV[i] = ""
if (i >= ARGC)
# no file names so force stdin
ARGV[ARGC++] = "_"
for (i = 1; i  maxfld)
maxf1d = NF
END ( for (i = 1;i []unss）uxd
我们还修正了位于END的输出代码，这段代码显示了如何利用条件表达式，使得在列与列之间插入一个
制表符，在最后一列之后插入一个换行符.
现在，假设某些字段不是数值型，所以它们不能被计算在内.策略是新增一个数组numcol，用于跟
踪数值型字段，函数isnum用于检查某项是否是一个数值，由于用到了函数，所以测试只需要在一个地
方完成，这样做有助于将来对程序进行修改.如果程序足够相信它的输入，邢么只需要查看第1行就够
69
了，我们仍然需要nf1d，因为在END 中，NF 的值是零。
 sum3 - print sums of numeric columns
input:  rows of integers and strings
#
output: sums of numeric columns
assumes every line has same layout
NR==1 { nf1d = NF
for (i = 1; i T）uTxd
function isnum(n) { return n ~/^[+-]?[0-9]+$/ }
函数isnum把数值定义成一个或多个数字，可能有前导符号.关于数值更加一般的定义可以在2.1节的
正则表达式那里找到.
Exercise3.1修改程序sum3，使它忽略空行.
Exercise3.2为数值添加更加一般的正则表达式.它会如何影响运行时间？
Exercise 3.3如果把第2个for语句的numco1测试拿掉，会产生什么影响？
Exereise 3.4写一个程序，这个程序读取一个条目-数额对列表，对列表中的每一个条目，累加它的数
额；在结束时，打印条目以及它的总数额，条目按照字母顺序排列.
计算百分比与分位数
假设我们不想知道每列的总和，但是想知道每一列所占的百分比，要完成这个工作就必须对数据遍
历两遍，如果只有一列是数值，而且也没有太多的数据，最简单的办法是在第一次遍历时，把数值存储在
一个数组中，每二次遍历时计算百分比并把它打印出来：
# percent
input: a column of nonnegative numbers
output: each number and its percentage of the total
{ x[NR]= $1; sum += $1 }
END ( if (sum != 0)
---
## Page 72
第三章数据处理
64
for (i = 1; i  0)
t=ts
return t
需要注意的是后级逼增运算符--如何控制while循环.
我们可以用随机生成的成绩来测试histogram.管道线上的第一个程序随机生成200个0到100
的整数，并把这些整数输送给histogram
awk '
# generate random integers
BEGIN{ for(i = 1;i <= 200;i++)
print int(101*rand())
awk -f histogram
它的输出是
0－9：20********************
10-19：18******************
20－29：20********************
30-39:16****************
---
## Page 73
第三章数据处理
65
50-59:17*****************
60－69:22**********************
********************0
80-89:20********************
**********************2*6-06
100 :
2**
71
Exercise3.5根据比例决定星号的个数，使得当数据过多时，一行的长度不会超过屏基的宽度
Exercise3.6修改histogram,把输入分栋到指定数量的桶中，根据目前为止看到的数据调整每个桶
的范围.
带速号的数
设想我们有一张包含了许多数的表，每个数都有进号与小数点，就像12，345.67，因为第一个进号
会终止awk对数的解析，所以它们不能直接相加，必须首先把进号移除：
#sumcomma - add up numbers containing commas
{gsub(/,/,""); sum += $0}
END ( print sum )
gsub（/，/，""）把每一个退号都替换成空字符串，也就是删除追号
这个程序不检查进号是否处于正确的位置，也不在答案中打印追号，往数字中加入退号只需要很少
的工作量，下一个程序就展示了这点，它为数字加上追号，保留两位小数，这个程序的结构是非常值得效
仿的：一个函数只负责添加追号，剩下的部分只管读取与打印，一旦测试通过，新的函数就可以被包含到
最终的程序中
基本思路是在一个循环中，从小数点开始，从右至左，在适当的位置插入进号，每次选代都把一个退
号插到最左边的三个数字的前面，这三个数字后面跟者一个追号或小数点，而且每一个退号的前面至少
有一个数字，算法使用递归来处理负数：如果输入参数是负数，那么函数addcomma使用正数来调用它
自身，返回时再加上负号。
# addcomma - put commas in numbers
input: a number per line
output: the input number followed by
#
the number with commas and two decimal places
{printf("&-12s $20s\n", $0, addcomma($0)) )
function addcomma(x,num) {
if (x < 0)
return "_" addcomma(-x)
num = sprintf(*#.2f", x)
num is dddddd.dd
---
## Page 74
第三章数据处理
99
whi1e (num ~ /[0=9][0-9][09][09]/ )
(wnu*/[·][6-0][6-0][6-0]/)qns
return num
72
请注意&的用法，通过文本替换，sub在每三个数字的前面插入一个退号.
这是某些测试数据的输出：
0
0 .00
-1
1. 00
12 .34
12 .34
12345
12, 345.00
-1234567.89
1, 234, 567 .89
123 .
123.00