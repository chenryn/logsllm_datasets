.br keyctl (1),
.br add_key (2),
.br keyctl (2),
.br keyctl (3),
.br capabilities (7),
.br keyrings (7),
.br keyutils (7),
.br persistent\-keyring (7),
.br process\-keyring (7),
.br session\-keyring (7),
.br thread\-keyring (7),
.br user\-keyring (7),
.br user\-session\-keyring (7),
.br request\-key (8)
.pp
the kernel source files
.ir documentation/security/keys/core.rst
and
.ir documentation/keys/request\-key.rst
(or, before linux 4.13, in the files
.\" commit b68101a1e8f0263dbc7b8375d2a7c57c6216fb76
.ir documentation/security/keys.txt
and
.\" commit 3db38ed76890565772fcca3279cc8d454ea6176b
.ir documentation/security/keys\-request\-key.txt ).
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/gethostbyname.3
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification http://www.unix-systems.org/online.html
.\"   iso/iec 9899:1999
.\"
.th iswprint 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
iswprint \- test for printing wide character
.sh synopsis
.nf
.b #include 
.pp
.bi "int iswprint(wint_t " wc );
.fi
.sh description
the
.br iswprint ()
function is the wide-character equivalent of the
.br isprint (3)
function.
it tests whether
.i wc
is a wide character
belonging to the wide-character class "print".
.pp
the wide-character class "print" is disjoint from the wide-character class
"cntrl".
.pp
the wide-character class "print" contains the wide-character class "graph".
.sh return value
the
.br iswprint ()
function returns nonzero if
.i wc
is a
wide character belonging to the wide-character class "print".
otherwise, it returns zero.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br iswprint ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh notes
the behavior of
.br iswprint ()
depends on the
.b lc_ctype
category of the
current locale.
.sh see also
.br isprint (3),
.br iswctype (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/getgid.2
.so man2/rename.2
.\" copyright (c) 2006 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th sem_getvalue 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
sem_getvalue \- get the value of a semaphore
.sh synopsis
.nf
.b #include 
.pp
.bi "int sem_getvalue(sem_t *restrict " sem ", int *restrict " sval );
.fi
.pp
link with \fi\-pthread\fp.
.sh description
.br sem_getvalue ()
places the current value of the semaphore pointed to
.i sem
into the integer pointed to by
.ir sval .
.pp
if one or more processes or threads are blocked
waiting to lock the semaphore with
.br sem_wait (3),
posix.1 permits two possibilities for the value returned in
.ir sval :
either 0 is returned;
or a negative number whose absolute value is the count
of the number of processes and threads currently blocked in
.br sem_wait (3).
linux adopts the former behavior.
.sh return value
.br sem_getvalue ()
returns 0 on success;
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b einval
.i sem
is not a valid semaphore.
(the glibc implementation currently does not check whether
.i sem
is valid.)
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br sem_getvalue ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
the value of the semaphore may already have changed by the time
.br sem_getvalue ()
returns.
.sh see also
.br sem_post (3),
.br sem_wait (3),
.br sem_overview (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2006 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th mq_close 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
mq_close \- close a message queue descriptor
.sh synopsis
.nf
.b #include 
.pp
.bi "int mq_close(mqd_t " mqdes );
.fi
.pp
link with \fi\-lrt\fp.
.sh description
.br mq_close ()
closes the message queue descriptor
.ir mqdes .
.pp
if the calling process has attached a notification request (see
.rb ( mq_notify (3))
to this message queue via
.ir mqdes ,
then this request is removed,
and another process can now attach a notification request.
.sh return value
on success
.br mq_close ()
returns 0; on error, \-1 is returned, with
.i errno
set to indicate the error.
.sh errors
.tp
.b ebadf
the message queue descriptor specified in
.i mqdes
is invalid.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br mq_close ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
all open message queues are automatically closed on process termination,
or upon
.br execve (2).
.sh see also
.br mq_getattr (3),
.br mq_notify (3),
.br mq_open (3),
.br mq_receive (3),
.br mq_send (3),
.br mq_unlink (3),
.br mq_overview (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/des_crypt.3
.\" this man page is copyright (c) 1999 andi kleen ,
.\" copyright (c) 2008-2014, michael kerrisk ,
.\" and copyright (c) 2016, heinrich schuchardt 
.\"
.\" %%%license_start(verbatim_one_para)
.\" permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%license_end
.\"
.\" modified, 2003-12-02, michael kerrisk, 
.\" modified, 2003-09-23, adam langley
.\" modified, 2004-05-27, michael kerrisk, 
.\"	added sock_seqpacket
.\" 2008-05-27, mtk, provide a clear description of the three types of
.\"     address that can appear in the sockaddr_un structure: pathname,
.\"     unnamed, and abstract.
.\"
.th unix  7 2021-03-22 "linux" "linux programmer's manual"
.sh name
unix \- sockets for local interprocess communication
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.ib unix_socket " = socket(af_unix, type, 0);"
.ib error " = socketpair(af_unix, type, 0, int *" sv ");"
.fi
.sh description
the
.b af_unix
(also known as
.br af_local )
socket family is used to communicate between processes on the same machine
efficiently.
traditionally, unix domain sockets can be either unnamed,
or bound to a filesystem pathname (marked as being of type socket).
linux also supports an abstract namespace which is independent of the
filesystem.
.pp
valid socket types in the unix domain are:
.br sock_stream ,
for a stream-oriented socket;
.br sock_dgram ,
for a datagram-oriented socket that preserves message boundaries
(as on most unix implementations, unix domain datagram
sockets are always reliable and don't reorder datagrams);
and (since linux 2.6.4)
.br sock_seqpacket ,
for a sequenced-packet socket that is connection-oriented,
preserves message boundaries,
and delivers messages in the order that they were sent.
.pp
unix domain sockets support passing file descriptors or process credentials
to other processes using ancillary data.
.ss address format
a unix domain socket address is represented in the following structure:
.pp
.in +4n
.ex
.\" #define unix_path_max    108
.\"
struct sockaddr_un {
    sa_family_t sun_family;               /* af_unix */
    char        sun_path[108];            /* pathname */
};
.ee
.in
.pp
the
.i sun_family
field always contains
.br af_unix .
on linux,
.i sun_path
is 108 bytes in size; see also notes, below.
.pp
various systems calls (for example,
.br bind (2),
.br connect (2),
and
.br sendto (2))
take a
.i sockaddr_un
argument as input.
some other system calls (for example,
.br getsockname (2),
.br getpeername (2),
.br recvfrom (2),
and
.br accept (2))
return an argument of this type.
.pp
three types of address are distinguished in the
.i sockaddr_un
structure:
.ip * 3
.ir pathname :
a unix domain socket can be bound to a null-terminated
filesystem pathname using
.br bind (2).
when the address of a pathname socket is returned
(by one of the system calls noted above),
its length is
.ip
    offsetof(struct sockaddr_un, sun_path) + strlen(sun_path) + 1
.ip
and
.i sun_path
contains the null-terminated pathname.
(on linux, the above
.br offsetof ()
expression equates to the same value as
.ir sizeof(sa_family_t) ,
but some other implementations include other fields before
.ir sun_path ,
so the
.br offsetof ()
expression more portably describes the size of the address structure.)
.ip
for further details of pathname sockets, see below.
.ip *
.ir unnamed :
a stream socket that has not been bound to a pathname using
.br bind (2)
has no name.
likewise, the two sockets created by
.br socketpair (2)
are unnamed.
when the address of an unnamed socket is returned,
its length is
.ir "sizeof(sa_family_t)" ,
and
.i sun_path
should not be inspected.
.\" there is quite some variation across implementations: freebsd
.\" says the length is 16 bytes, hp-ux 11 says it's zero bytes.
.ip *
.ir abstract :
an abstract socket address is distinguished (from a pathname socket)
by the fact that
.ir sun_path[0]
is a null byte (\(aq\e0\(aq).
the socket's address in this namespace is given by the additional
bytes in
.ir sun_path
that are covered by the specified length of the address structure.
(null bytes in the name have no special significance.)
the name has no connection with filesystem pathnames.
when the address of an abstract socket is returned,
the returned
.i addrlen
is greater than
.ir "sizeof(sa_family_t)"
(i.e., greater than 2), and the name of the socket is contained in
the first
.ir "(addrlen \- sizeof(sa_family_t))"
bytes of
.ir sun_path .
.ss pathname sockets
when binding a socket to a pathname, a few rules should be observed
for maximum portability and ease of coding:
.ip * 3
the pathname in
.i sun_path
should be null-terminated.
.ip *
the length of the pathname, including the terminating null byte,
should not exceed the size of
.ir sun_path .
.ip *
the
.i addrlen
argument that describes the enclosing
.i sockaddr_un
structure should have a value of at least:
.ip
.nf
    offsetof(struct sockaddr_un, sun_path)+strlen(addr.sun_path)+1
.fi
.ip
or, more simply,
.i addrlen
can be specified as
.ir "sizeof(struct sockaddr_un)" .
.pp
there is some variation in how implementations handle unix domain
socket addresses that do not follow the above rules.
for example, some (but not all) implementations
.\" linux does this, including for the case where the supplied path
.\" is 108 bytes
append a null terminator if none is present in the supplied
.ir sun_path .
.pp
when coding portable applications,
keep in mind that some implementations
.\" hp-ux
have
.i sun_path
as short as 92 bytes.
.\" modern bsds generally have 104, tru64 and aix have 104,
.\" solaris and irix have 108
.pp
various system calls
.rb ( accept (2),
.br recvfrom (2),
.br getsockname (2),
.br getpeername (2))
return socket address structures.
when applied to unix domain sockets, the value-result
.i addrlen
argument supplied to the call should be initialized as above.
upon return, the argument is set to indicate the
.i actual
size of the address structure.
the caller should check the value returned in this argument:
if the output value exceeds the input value,
then there is no guarantee that a null terminator is present in
.ir sun_path .
(see bugs.)
.\"
.ss pathname socket ownership and permissions