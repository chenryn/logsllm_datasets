B. Protocol Deﬁnition
Sonar, like the Hancke-Kuhn protocol, has three phases:
“initialization,” “rapid audio exchange(RAE),” and “reconcili-
ation.” This protocol is visualized in Figure 3.
We follow the common practice in distance bounding of
referring to the participants as prover P and veriﬁer V . In
traditional distance bounding, the onus is on the prover to
participate honestly to prove their distance to the veriﬁer. Note
that in Sonar the prover and veriﬁer work collaboratively to
accurately measure the call RTT. It is important to have a
convention of which party is prover or veriﬁer to prevent an
ambiguity that could be exploited by the adversary, so we
arbitrarily assign the role of “prover” to the caller.
571
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:21 UTC from IEEE Xplore.  Restrictions apply. 
Traditional Distance Bounding
Attacker
Distance?
P
Prover
Distance?
Veriﬁer
Sonar Distance Bounding
PSTN
Distance?
Prover
Veriﬁer
Attacker
Fig. 4: Sonar vs traditional distance bounding. While in
traditional bounding the veriﬁer does not trust the prover, both
endpoints are trusted in Sonar.
The initialization phase exchanges information needed for
other parts of the protocol, especially for the RAE. The RAE
is a challenge-response step that exchanges data between the
prover and veriﬁer. Finally, in the reconciliation phase both
parties conﬁrm that they have measured a reasonable RTT and
commence to complete the call.
Initialization Phase In the initialization phase, P and V ﬁrst
establish a session key, ks, through in band signaling. This
key can be established in a multitude of ways,
including
Authloop [22] and Authenticall [23]. Second, V generates a
random challenge bitstream, C, and both V and P generate
two pseudorandom bitstreams, R0 and R1, based on the ses-
sion key. Both P and V have to ensure that the generated keys
and data are not used across multiple sessions. Finally, unique
to Sonar, P and V exchange GPS location information 4.
This allows both parties to verify that the measured RTT is
consistent with the call distance, which is depicted in Figure 4.
Rapid Audio Exchange This phase is marked by P and
V securely exchanging data in order to measure the RTTs.
In Hancke-Kuhn distance bounding, V sends P a series of
individual bits from C sequentially. For each challenge bit, P
responds as fast as possible with the next bit from R0 if the
bit is 0, and R1 otherwise. V accepts each response if it is
correct and arrives within some speciﬁed time. Because each
of P (cid:2)s responses depend on the challenge sent by V , P cannot
send responses earlier to create an impression of a lower RTT.
This design also allows V to validate responses as they are
received. This is termed as “rapid bit exchange.”
In contrast to the Hanke-Kuhn protocol, during execution
of the Sonar protocol, V sends a batch of l challenge bits as
4Though we use GPS location information in our proposed protocol, it is
not a requirement for Sonar. Other alternative methods of providing location
information may be used, which is necessary for devices that do not possess
a GPS receiver.
audio from C instead of a single bit. P responds as soon as
possible with l response bits, where each bit is drawn from R0
or R1 corresponding to the respective challenge bit. Because
we send many challenge bits at once, we term this a “rapid
audio exchange” (RAE) in recognition of the fact that we are
sending bursts of information in audio – not single bits. Total
protocol execution time is primarily caused by relatively long
RTT, so by batching bits we can maintain high security while
limiting execution time.
Reconciliation Phase After the RAE completes, the rec-
onciliation phase establishes whether the data was exchanged
without being tampered and decides whether the RTT is
consistent with the distance. This can be determined without
prior knowledge of a ground truth value, however, possessing
this information could improve detection rates. As described
in later sections, we do use ground truth RTT values in our
experiments. All messages in this phase are sent over a secure
channel. V and P ﬁrst evaluate their received responses to
determine that they were correct and unmodiﬁed by the adver-
sary. V conﬁrms that the sequence of response bits are correct.
If correct, V then sends the transmitted challenge bits C to P
so that they can verify that they received the correct challenge
and not challenges fabricated by an adversary. V also sends
the measured RTT to P , along with the veriﬁer’s decision as to
whether the RTT is consistent with their measurement. After
V conﬁrms C, they respond with an acknowledgment that C
was correct and they conﬁrm a desire to continue with the call.
If at any point in the reconciliation a check fails, the party with
the failing check messages the other and disconnects the call.
Attacks Prevented Drimer and Murdoch [16] identiﬁed
attacks against challenge-response distance bounding systems,
including the adversary guessing responses, re-playing pre-
viously used challenges, and using more capable hardware
than the prover or veriﬁer. Because all RAE messages are
pseudorandomly generated based on the output of a key
unknown to the adversary, the adversary can successfully guess
challenge or response bits with probability 2−n, where n is
the total number of bits.5 This prevents an adversary from
preemptively sending bits to provide a smaller RTT than would
otherwise be measured. Similarly, because session keys are
guaranteed to be unique for every call, replay attacks are not
possible. An adversary’s ability to create an advantage with
faster hardware can be limited by ensuring that the prover and
veriﬁer processing time is much less than the RTT. Finally,
because an attacker cannot predict a challenge or response and
must be located on the redirected call, an adversary cannot
cause a veriﬁer to receive a response to a challenge faster than
the RTT between the prover and veriﬁer.
C. Additional Considerations
Data Transmission Sonar can transmit audio using any one
of several techniques. The simplest technique involves sending
DTMF tones (commonly known as “touch tones” used to dial
5This attack success probability is lower than in Hancke-Kuhn because the
adversary cannot spoof challenge bits without being detected.
572
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:21 UTC from IEEE Xplore.  Restrictions apply. 
digits) to represent 1 of 16 possible values.6 These tones have
the advantage that they are simple to implement and work
with all phone systems, but have the disadvantage that only
a few tones per second (tens of bits per second) can be sent.
Voice modem technologies (as used for dial-up internet access)
could also be used, though standard voice modems cannot
transmit data over cellular or VoIP calls due to voice-speciﬁc
data compression techniques. Sonar could instead leverage new
techniques for secure data transmission over phone calls [22]
to transmit information at roughly 500 bits per second. Note
that we assume a low probability of bit error in this protocol;
this can be assured by using redundant data coding along with
cryptographic integrity checks of messages after transmission.
Finally, for non-RAE portions of the protocol we note that an
out of band communications channel (such as a secure data
connection) can also be used.
Secret Management The security of rapid bit exchange
relies on a shared secret being known to the distance bounding
participants but not the adversary. We assume that our protocol
participants have already established a long-term symmetric
secret, or have a means of establishing a secret in an au-
thenticated way in the presence of an adversary. Recent work
in call authentication [22], [23] has provided methods that
Sonar can use to establish these secrets. Both techniques rely
on public keys assigned to phone users to conduct secure
communications. Both techniques also derive a shared secret
that can be used by Sonar.
Changes in Carrier Due to variations in cellular providers,
telephony devices may experience variation in call RTT due
to differences in infrastructure provided by each carrier. For
our experiments, we use a single cellular provider to eliminate
any additional delay. However, we note that the time added
by switching between cellular providers is small. Even in this
situation, call quality still needs to meet the ITU E-Model
standard [15]. In the event of implementation, variations in
carrier can be accounted for in the protocol, which would
allow the detection rate to remain the same regardless of time
introduced by variations in cellular provider.
VI. EXPERIMENTAL DESIGN
Having designed a protocol that uses RTT to verify the
legitimacy of a call, we now design a series of experiments
to validate our initial hypothesis. First, we need to measure
RTTs to verify that call latency is directly correlated with the
physical distance between the communicating parties. Then,
we will need to establish if the audio in a rerouted call exhibits
higher RTTs in comparison to a legitimate call. This can be
accomplished by emulating an actual rerouting attack. We then
develop an emulated SS7 attack to launch redirection on our
own devices. This will allow us to redirect our own calls to
an arbitrary physical location. Finally, we execute real SS7
attacks in order to validate the accuracy of our emulation. The
real attacks are discussed in a later section.
6Most touch tone phones have 12 digits, but an additional 4 tones are deﬁned
for special functionality.
Fig. 5: Pictured are the components that make up the cellular
calling device. At the very top of the image is the Teensy 3.2
microcontroller. Directly below that, easily distinguished by its
antenna, is the Adafruit FONA GSM module. To the right of
that is an LCD display used for call information. The control
buttons at the bottom of the image are used to initiate and end
calls as well as initiate playing DTMF tones.
A. Network Measurement
We focus ﬁrst on the problem of measuring the RTT and
routing path for an arbitrary call. Since we cannot query or
inﬂuence the route a call takes through the PSTN, we construct
a system that will allow us to select and know the call route
in order to collect any meaningful measurement of RTT or
distance. We do this for 3 different telecommunication setups:
Cellular-to-Cellular, VoIP-to-VoIP, and VoIP-to-Cellular.
Cellular-to-Cellular. First, we need to characterize the RTT
for calls on a cellular network. Measuring RTT for cellular de-
vices is challenging, especially with modern smartphones that
restrict access to call audio and network features. To overcome
this barrier, we designed hardware that grants direct access
to the call audio stream. We chose to use the GSM network
for the reasoning that GSM modems are easily accessible and
well documented.We note that regardless of cellular network
or technology we chose to incorporate into our experiments,
the results will be analogous due to our system operating in the
voice channel. We built two devices: one device places calls
and transmits DTMF tones while the other that accepts the
call and echoes back any received audio. To collect RTT data
with these devices, we keep the calling device at our lab in
Gainesville, FL while the other is moved to multiple locations.
We then initiate calls between the two devices and measure
the RTT. As shown in Figure 5, we use a Teensy 3.2 [24]
microcontroller and an Adafruit Fona [25] GSM module.
To obtain precise measurements of the audio stream, we
attached a logic analyzer [26] to the audio output of the calling
device. The calling device notiﬁes the logic analyzer to start
recording immediately after it sends the DTMF tone to the
echoing device. We then measured the difference between the
573
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:21 UTC from IEEE Xplore.  Restrictions apply. 
Distant VPN 
PBX
GSM 
VoIP Client
Audio Loopback
Fig. 6: Our VoIP to Cellular testbed. A VoIP client registers
with the PBX server that routes the call to the GoIP. The call
then connects to the cellular network and to the echoing device.
GSM Gateway
PSTN
start of the recording to the beginning of the echoed DTMF
tone to obtain the RTT.
VoIP-to-VoIP. While we cannot control the path a PSTN call
takes through the network, we have some control over the
path VoIP trafﬁc takes over an IP network. We therefore seek
to also understand how latency and physical distance relate to
VoIP calls, and if this model is similar to PSTN calls, which
we describe in greater detail below. Acquiring RTT data for
VoIP-to-VoIP calls was conducted in a manner similar to the
Cellular-to-Cellular calls. We used two PCs running the VoIP
software PJSUA [27], where one is the caller and the other is
an audio loopback receiver. After the call is established, the
caller starts recording the call while simultaneously playing
an audio sequence into the stream. The RTT for the call audio
is obtained by measuring the time between the echoed audio
entering the audio stream and being recorded at the receiver.
This is representative of the ”worst case scenario” for time
introduced by rerouting attacks.
VoIP-to-Cellular. Finally, because of the difﬁculty of exe-
cuting actual SS7 rerouting attacks legally and ethically for
a variety of locations, and because no emulator exists, we
seek to emulate SS7 redirection attacks. In order to emulate
a redirection, we use a VPN to force the IP network trafﬁc
for a VoIP call to traverse an additional hop in the network.
After traversing the VPN, the call returns to a local Asterisk
PBX, connected to a Hybertone GoIP-1 GSM gateway7, which
places a cellular call to the cellular echoing device described
above. This ﬂow is shown in Figure 6. If RTT and distance
are truly correlated, this experiment will inﬂuence RTT by
augmenting the normal VoIP trafﬁc with an additional network
hop, faithfully emulating an SS7 redirection attack.
For this experiment, the VoIP client is identical to the VoIP-
to-VoIP experiment. In order for our client to place calls, we
set up a private branch exchange (PBX) server that allows
the two to communicate. The calls are tunneled through the
PBX server to the gateway where they are transfered onto the
PSTN. These three devices, outlined in Figure 7, are at a ﬁxed
location, giving us the ability to control the call route. Once
this infrastructure is in place, we can reroute and measure calls
to arbitrary locations.
It may initially seem that VoIP-to-PSTN providers (e.g.,
Vonage and MagicJack) could provide similar functionality
with less complexity. However these systems suffer from a
similar problem to the PSTN: they are opaque and call routing
is not visible. These systems must route a call to a switch that
physically connects to the PSTN, adding additional unknown
distance and routing to the call. By ﬁxing the location of
our PBX and gateway, we know the exact route the calls
7A VoIP GSM gateway connects VoIP calls to the PSTN through the cellular
network.
Fig. 7: The top waveform is the time domain representation of