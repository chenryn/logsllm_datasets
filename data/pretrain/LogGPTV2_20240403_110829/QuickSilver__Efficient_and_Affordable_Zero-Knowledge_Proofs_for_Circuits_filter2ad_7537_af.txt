to be proven with t ≈ 8nκ, the amortized communication cost for
each multiplication will be 3n + 8n2κ
Optimizing for circuits with weak uniformity. Inspired by the
above concrete examples, we summarize a blueprint to optimize
circuits with some level of weak uniformity (i.e., the polynomial
representations of sub-circuits are all bounded by some degree d).
Assume that the circuit to be proven is C, which contains t
multiplication gates. We let C1, . . . , Ck be k non-overlapping sub-
circuits of C, such that for sub-circuit Ci, it has ti multiplication
gates without counting the multiplication gates that include the
output wires of Ci. Each sub-circuit can be represented as a set
of polynomials with the degree at most d. In a nutshell, our ZK
protocol can be constructed as follows:
(1) Use sVOLE to commit to all the wire values in C \ {C1, . . . , Ck},
including the input wires go into the sub-circuits C1, . . . , Ck
and the output wires go out of these sub-circuits.
i =1 ti elements over Fp for communication.
(2) Prove that all multiplication gates in C \ {C1, . . . , Ck} are com-
puted correctly using our ZK protocol for circuit satisfiability
shown in Figure 4.
This step takes 2κ bits of communication.
(3) For each sub-circuit Ci, represent it as a set of polynomials,
one for each output of Ci. Prove that all the polynomials with
respect to all sub-circuits are computed correctly using our ZK
protocol for polynomial satisfiability shown in Figure 5.
This step takes dκ bits of communication, because all input and
output wire values have already been committed with sVOLE.
In summary, the communication of the above protocol is essentially
i∈[k] ti) log p +(d + 2)κ bits. Now the task is really about how
This step takes t −k
t ≈ 4n bits.
to “dig” as many “holes” as possible from C, while keeping all holes
relatively simple. In practice, this is fairly common, as the real-life
computations are written in succinct libraries, which means the
same subroutine is often called for many times. We leave it as a
future work to fully explore its potential and build an automated
optimizer to maximize the practical efficiency.
6 IMPLEMENTATION AND BENCHMARKING
We implemented our ZK protocols and report their performance.
Unless otherwise specified, our evaluation results are reported over
two Amazon EC2 machines of type m5.2xlarge with throttled
network bandwidth (with latency about 0.1 ms) and one thread.
Each machine has 8 virtual CPUs, which means 4 CPU cores. We
instantiate the COT protocol (i.e., sVOLE with p = 2 and r = κ)
and the VOLE protocol over a 61-bit field by using the recent pro-
tocols [48, 49], and use SHA-256 as the cryptographic hash func-
tion modeled as a random oracle. We take advantage of hardware
AES-NI and binary-field multiplication when applicable. All our im-
plementations achieve computational security parameter κ = 128
and statistical security parameter ρ ≈ 100 for Boolean circuits,
and κ = 128 and ρ ≥ 40 for arithmetic circuits over a 61-bit field
where Mersenne prime p = 261 − 1 is used as in prior work. The
implementation is openly available at EMP [47].
6.1 Benchmarking Our Circuit-based ZK Proof
We benchmarked the performance of our ZK protocol by proving
circuits with 3×108 AND/MULT gates. Similar to prior work [3, 48],
we observe that the performance does not depend on the shape
of the circuit and is linear to the circuit size; and thus we focus
on the speed in terms of “million gates per second”. In Table 2, we
benchmarked the performance of our circuit-based ZK protocol
under different network settings and number of threads. The perfor-
mance of our protocol ranges from 4.4 million to 15.8 million AND
gates per second (or from 1.2 million to 8.9 million multiplication
gates per second), depending on the network setting and number
of threads. When we increase the number of threads and/or the
network bandwidth, we could see an increase in the performance.
The computation becomes the efficiency bottleneck of our protocol
for Boolean circuits (resp., arithmetic circuits) when the network
bandwidth is increased to 50 Mbps (resp., 2 Gbps), and thus the
performance is not improved much beyond that.
Comparison with prior work. We compared the performance of
our ZK protocol QuickSilver and prior related work in Table 1. Since
Mac′n′Cheese [3] only reported the performance of their protocol
with one thread and local-host, we compare the performance of
all protocols using this setup. In the Boolean setting, we observe
6× improvement in computation and 7× improvement in commu-
nication compared to the state-of-the-art protocol Wolverine [48].
For arithmetic circuits, our protocol improves by at least 7× in
computation and 3×–4× in communication compared to Wolverine
and Mac′n′Cheese. Note that Wolverine studied the performance
of their ZK protocol when used for DECO [51] and Blind CA [46],
as well as other applications like Merkle trees, and proving bugs in
a set of code snippets [31]. Our performance improvement directly
translates to the improvements for all of these applications.
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2996Threads
1
2
3
4
Boolean Circuits
Arithmetic Circuits
10 Mbps
4.4 M
5.3 M
5.7 M
5.8 M
20 Mbps
6.2 M
8.1 M
9.1 M
9.9 M
30 Mbps
7.0 M
9.9 M
11.4 M
12.2 M
50 Mbps
7.5 M
11.8 M
13.9 M
14.9 M
Local-host
100 Mbps
500 Mbps
7.6 M
11.8 M
14.3 M
15.8 M
1.2 M
1.3 M
1.4 M
1.4 M
3.4 M
4.4 M
4.9 M
5.0 M
1 Gbps
2 Gbps
4.2 M 4.8 M
6.1 M 7.0 M
7.2 M 8.4 M
7.5 M 8.9 M
Local-host
4.8 M
7.1 M
8.4 M
8.9 M
Table 2: Benchmark the performance of our circuit-based ZK protocol. The benchmark results are the number of AND/MULT gates per second that
can be proven using our protocol. Benchmark was obtained with different network settings and number of threads.
Instance Information
Boolean
Protocol
Execution Time Communication
Arithmetic
Cost
Speed
gates/sec gates/cent gates/sec gates/cent
Type
Price
cents/hour
Cost
CPU Speed
ARM 5.3 M 10.0 B
Intel
5.9 M 4.5 B
AMD 7.3 M 6.3 B
c5.large
c6g.medium
1.9
4.7
4.2
2.2 M 4.1 B
2.9 M 2.2 B
3.0 M 2.6 B
c5a.large
Table 3: Performance of stress-testing our ZK protocol on different
Amazon EC2 instances. All instances have 2 vCPUs and 1 GB memory.
Large field F261−1
106
108
106
Length of vectors
39.2
0.39
Process witness (s)
0.24
Prove inner product (ms) 36.6
42.8
703.8
Table 4: Performance of our ZK protocol for inner product. We re-
port separately the cost to process the witness and the cost to prove the
inner product after the witness was processed.
Binary field F2
108
23.8
423.5
107
3.9
100.3
107
2.4
69.3
Stress-testing of our ZK protocol. We stress-test our circuit-
based ZK protocol on the cheapest instance of Amazon EC2 that
only costs 2 to 5 cents per hour, and summarize the experimen-
tal results in Table 3.5 For all protocol executions, we use only a
single thread. The Boolean circuits (resp., arithmetic circuits) are
tested under the network bandwidth of 20 Mbps (resp., 500 Mbps).
Although the computational power and memory are limited, our
protocol still achieves high throughput. The speed for computing
Boolean circuits ranges from 5.3 million to 7.3 million gates per
second and the speed for arithmetic circuits ranges from 2.2 million
to 3 million gates per second. Taking the low cost into considera-
tion, our ZK protocol is very affordable. The lowest cost to prove
Boolean circuits is about 10 billion gates per cent; and roughly
2.2–4.1 billion gates per cent for arithmetic circuits.
6.2 Benchmarking Our Polynomial-based ZK
While our ZK protocol for polynomial satisfiability is generic, here
we focus on some useful applications that use low-degree polyno-
mials to demonstrate how powerful it can be. We leave exploration
of compiler-based optimization and more complicated examples
as the future work. In all of the experiments below, we use the
network bandwidth of 20 Mbps for a binary field and 500 Mbps for
a 61-bit field, and always use a single thread.
5Price is based on AWS defined-duration spot instances. There are cheaper
t3.medium, t3a.medium burstable instances, but the cost is higher than the instances
in Table 3 unless the average CPU usage is kept below 20%.
Spartan [42]
Virgo [52]
Wolverine [48]
Mac′n′Cheese [3]
QuickSilver (Circuit)
≥ 5000 s
357 s
1627 s
2684 s
316 s
10 s
≤ 100 KB
221 KB
34 GB
25.8 GB
8.6 GB
25.2 MB
QuickSilver (Polynomial)
Table 5: Performance of proving matrix multiplication using var-
ious protocols. All numbers are based on proving knowledge of two
1024 × 1024 matrices over a 61-bit field, whose product is a public matrix.
The execution time for Wolverine and Mac′n′Cheese is based on local-host,
while our protocols and Virgo are based on a 500 Mbps network. Spartan
consumed 600 GB memory before crash, and thus we extrapolate the execu-
tion time based on a smaller proving instance. Our protocols use just 1 GB
of memory, but Virgo needs 148 GB of memory.
to prove that the inner product of two vectors ⟨x, y⟩ =
Inner product. In this benchmark, the witness consists of two
vectors of n field elements (namely x and y), and the prover wants
i∈[n] xi ·yi
equals to some public value. We report the cost of processing the
witness and the cost of proving the inner product separately in
Table 4. We found that processing the witness could be free in a
larger computation. This is because when using inner product as a
sub-circuit in a larger circuit, the input witness of this subcircuit
is the output of some prior computation and thus need not be
processed again. In this case, the cost of the ZK proof for inner
product is simply the second line. We can see that even for proving
inner product of two vectors of length 108, the cost is very small.
Matrix multiplication. We report the performance of our ZK pro-
tocol for proving matrix multiplication, and compare it with prior
work in Table 5. We observe that our polynomial-based ZK protocol
is 31× faster than our own circuit-based protocol, which is already
faster than prior protocols. It also uses 340× less communication
than our circuit-based protocol. Our proof size is still significantly
larger than Spartan and Virgo, but our ZK protocols (QuickSilver)
benefit in other aspects including execution time and memory us-
age. We note that the prover time of GKR-style protocols like Virgo
could be further improved based on the technique in interactive
proofs [44]. We did not find any ZK proof that implements this
technique, but anticipate that the prover time will be of the same
order of magnitude when incorporating this technique into Virgo.
Proving knowledge of solutions to lattice-based problems.
Here we focus on proving knowledge of a solution to a short in-
teger solution (SIS) problem. We assume that the prover knows a
vector s ∈ [−B, B]m, such that A · s = t, where both parties know
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2997Protocol
Communication
Execution time
ENS
[26]
53 KB
−
Wolverine QuickSilver
[48]
32.8 KB
220 ms
4.1 KB
2 ms
q