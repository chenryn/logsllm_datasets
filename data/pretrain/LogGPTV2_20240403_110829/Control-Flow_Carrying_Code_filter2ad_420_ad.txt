In the case of C3,(cid:12)(cid:12)Tj
j=1
1
n
(1 −
(cid:12)(cid:12)Tj
(cid:12)(cid:12)
(cid:12)(cid:12) is the possible number of targets that can
(AIR)
(3)
)
S
be interpreted as valid basic blocks for indirect branch j. Since
we substantially increase the size of the .text section, instead of
enumerating all possible addresses (which requires testing millions
of addresses), we randomly choose 16, 384 addresses for effective
testing when k ≤ 10 and 65, 536 addresses for other k values. We
consider all basic blocks ending with indirect transfer instructions
as valid, and those ending with direct transfer instructions valid if
their targets are in the .text section.
The results are shown in Table 2 with server applications. In-
terestingly, there are few addresses that can be interpreted as
valid basic blocks, and all of them end with indirect transfer in-
structions. This is because C3 extends the displacement in direct
branches to four bytes, which makes the probability that a random
sequence be interpreted as a valid direct branch small. On average,
C3 achieves an AIR value of 99.57%, comparable to existing CFI
approaches [33, 50].
JIT-ROP. JIT-ROP [41] is an attack against fine-grained ran-
6.1.3
domization. It assembles ROP gadgets “on-demand” without know-
ing the memory layout by exploiting the disclosure of a single code
pointer. Specifically, the adversary traverses the memory space that
the leaked pointer points to, searches for gadgets and cross-page
transfer instructions to find new code pages and other useful gad-
gets. However, under C3, a read performed from a code page yields
cipher-text, which the adversary cannot disassemble without know-
ing the decryption key. As such, an adversary cannot use JIT-ROP
to disclose new code pages to find gadgets.
To verify our intuition, we tried to use the ROP gadget finding
tool peda2 to identify gadgets in the protected binary nginx-1.4.0
after the loading phase, simulating the full disclosure of the code seg-
ment. Many gadgets ending with ret are found, which are chained
together to form an attack payload. However, the gadgets found
were based on encrypted basic blocks, which become invalid in-
structions and lead the execution into an illegal instruction fault.
1https://github.com/JonathanSalwan/ROPgadget
2https://github.com/longld/peda
Session 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand106.1.4 Blind ROP. Blind ROP [4] uses the response from the victim
process (crash vs. no crash) as a side channel to incrementally guess
the position of a gadget. It assumes that the adversary can disassem-
ble the code pages to find the required gadgets. Since the code pages
are encrypted with C3, Blind ROP will not succeed. We applied the
exploit script provided by Bittau et al.3 to nginx-1.4.0 protected
by C3, and found that it made all worker threads “stuck” as they
were all running into an infinite loop of locating gadgets. Blind ROP
uses a conservative implementation to incrementally populate the
stack to find a stack-based stop gadget to avoid hanging. However,
with C3, every attempt in transferring control to this stack-based
stop gadget results in a failure due to incorrect decryption of the
callee block.
6.1.5 Control-Flow Bending. Control-Flow Bending (CFB) [7] by-
passes conventional CFI that statically generates CFGs. CFB abuses
certain functions whose executions may change their own return
addresses to point to any call-preceded site which allows the at-
tacker to “bend” the control flow. C3 mitigates CFB attacks by
preventing the attacker from locating call-preceded basic blocks —
thanks to redistributing and encrypting of basic blocks.
Although C3 successfully defends against these existing ad-
vanced control-flow-hijacking attacks, we acknowledge that it is
not necessarily effective against an attack specifically crafted for
C3. We further discuss this possibility in Section 7.
6.2 Performance overhead
We evaluated C3 with three FTP servers (vsftpd, ProFTPD, and
Pure-FTPd), three web servers (Nginx, lighttpd, and Apache), a
distributed memory caching system (Memcached), and some com-
mon applications (image processing tools sam2p, GraphicsMagic,
and ImageMagics and bzip2). All programs are executed with their
default settings on a desktop computer with an Intel i7-4510u CPU
with 8GB of memory running x64 version of Ubuntu.
To benchmark web servers, we configured Apache Benchmark4
to issue 2,000 requests with 100 concurrent connections. For FTP
servers, we configured pyftpbench benchmark5 to open 20 con-
nections and request 100 files per connection with over 100MB of
files requested. To benchmark Memcached, we used memslap6. We
ran each experiment 10 times, ensuring that the CPUs were fully
loaded throughout the tests, and report the median.
Since C3 is implemented on top of the dynamic instrumentation
platform Pin, we measure the performance of C3 in terms of the ad-
ditional execution overhead compared to these programs executing
on an un-modified Pin v.3.5. To enable a better understanding of the
results, we also report the execution overhead of another system
that is built on top of Pin, namely Instruction-Set Randomization
implemented by Portokalidis et al. [34].
6.2.1 Execution Time. We report, in Figure 7, the execution time
of each program under four settings: native execution, ISR [34], C3
with encryption disabled, and C3 with encryption turned on. Results
are normalized to a baseline for its execution on un-modified Pin.
3http://www.scs.stanford.edu/brop/
4httpd.apache.org/docs/2.4/programs/ab.html
5http://code.google.com/p/pyftpdlib
6http://docs.libmemcached.org/bin/memslap.html
Figure 7: Overall overhead of C3. The result is normalized to the
baseline execution time on un-modified Pin.
k was chosen to be the minimum that successfully distributes the
basic block for secret sharing, whose values are shown in brackets.
Being consistent with results reported in the original paper [34],
ISR does not incur observable slow down compared with execution
on un-modified Pin since there is no additional instrumentation. C3
presents very similar results when encryption is disabled for the
same reason. With encryption turned on, C3 experiences less than
10% overhead for server applications while non-server applications
generally suffer from significantly higher overhead. Note that when
compared with their respective native executions, several server
applications on C3 have very small runtime performance, although
the average runtime overhead is about 70%.
To gain a better understanding of contributions to such overhead
and why non-server applications perform worse, we conduct the
next finer-grained analysis of C3 to see which components of C3
are the main contributors to the overhead. We first identify the
following three main tasks of C3 that potentially contribute to the
performance overhead:
• Key Reconstruction (KR). This is performed for every branch
in the program, be it a direct branch (whose key reconstruction is
denoted as dKR) or an indirect branch (whose key reconstruction
is denoted as iKR).
• Decryption. Since C3 uses XOR operation as in ISR [34], decryp-
tion incurs minimal overhead as confirmed in Figure 7 in which
ISR only results in a small overhead.
• Execution Redirection (ER). This happens when execution
transitions from unprotected code to protected code. Since it
requires saving and restoring the entire register state [30], it
could result in significant overhead.
Figure 8 shows the overhead of C3 with certain components dis-
abled to more accurately attribute the overhead to the correspond-
ing components. This time, the overhead is presented in seconds
without normalization (to visualize the small differences). We have
two important observations.
First, iKR (whose contribution can be seen by comparing the
bars for C3 and those for C3 with iKR disabled) contributes more
Session 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand11Table 3: Number of various branches executed. We report the
number of indirect branches executed in iKR #; dKR # is the num-
ber of direct branches executed; the number of transitions from
unprotected to protected code is reported in ER #.
Programs
vsftpd
Pure-FTPd
ProFTPD
httpd
Nginx
lighttpd
Memcached
sam2p
bzip2
convert
gm
iKR #
3.99 × 106
1.09 × 106
5.07 × 106
1.16 × 105
3.43 × 103
1.75 × 105
2.37 × 107
2.22 × 107
1.36 × 108
2.55 × 107
1.14 × 106
dKR #
2.43 × 107
6.29 × 106
5.67 × 107
4.82 × 105
2.51 × 105
2.28 × 106
1.54 × 108
1.33 × 108
7.64 × 109
6.81 × 107
4.25 × 107
ER #
1.38 × 106
2.49 × 105
1.68 × 106
9.97 × 104
4.70 × 103
6.31 × 104
7.64 × 106
1.22 × 105
5.83 × 104
4.36 × 105
1.21 × 105
with hard-disk space. That said, a larger k also results in slightly
bigger runtime overhead as more instructions are executed to ex-
tract the values of x and y from an address, and key reconstruction
could also require slightly more instructions executed.
7 DISCUSSION
7.1 Return-into-Pin
C3 provides CFI protection on the application but not the dynamic
instrumentation platform, i.e., Pin. An attacker, in theory, could per-
form an attack by returning into instructions in Pin so that control
is diverted directly into the gadgets found in Pin. We call such an at-
tack “return-into-Pin”. Such a control transfer would circumvent C3,
enabling the attacker to successfully execute control-flow hijacking
attacks. Our design of C3 is compatible with other isolation hard-
ening solutions, such as Software-based Fault Isolation (SFI) [46],
though, which can instrument memory writes to check whether
the application attempts to write to a page “owned” by Pin. Another
(probably better) defense is to implement the execution environ-
ment in a more isolated layer such as the OS layer, the hypervisor
layer, the hardware layer, or even inside SGX [13].
That said, once instructions are in Pin’s code cache, Pin will
not instrument them but jump there directly, which improves the
performance of C3. Meanwhile, such optimization does not hurt
security since Pin uses a local hash table for each individual indirect
branch transfer, which will contain only the correctly decrypted
targets. Any new targets will result in a hash table miss and basic
block decryption.
7.2 Return-into-libc
In general, CFI does not defend against all return-into-libc attacks.
Specifically, C3 does not encrypt instruction sequences in the .plt
section, and so any return instructions can transfer control to en-
tries in the .plt section. In order to protect these library function
calls, one could statically compile the libraries into the application.
Figure 8: Detailed overhead of C3.
Figure 9: File size with different secret sizes.
overhead than dKR (whose contribution can be seen by compar-
ing the bars for C3 with iKR disabled and those for C3 with KR
disabled). This is mainly due to optimizations C3 implements for
direct branches, where key reconstruction is done only once and
results are cached for subsequent decryption. Such optimization
does not apply to indirect branches since the control transfer target
changes in each indirect branch. Therefore, applications with more
indirect branches suffer higher overhead on C3.
Table 3 records the number of indirect branches, direct branches,
and transitions from unprotected to protected code. Note that bzip2
has a larger number of indirect branches executed, which explains
its higher overhead on C3.
Our second observation from Figure 8 is on execution redirection
ER. We found that ER contributes significantly to the performance
overhead for vsftpd, proftpd, memcached and the non-server ap-
plications except bzip2, which can be explained by the numbers in
the last column of Table 3.
Space. The redistribution of basic blocks in C3 makes use of
6.2.2
a potentially large address space with gaps among various basic
blocks; see Section 4.3. The resulting size of the binary executable
mainly depends on the length of the secret, i.e., k. For example
when k = 12, the address of an instruction can be as big as 224.
Figure 9 shows the resulting file sizes after C3 processing with
two settings — one using a smallest possible setting of k (which
varies among different programs) and the other with k = 14. We ar-
gue that although the size of the binary increases significantly with
bigger values of k, storage is cheap and it is usually not an issue
Session 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand127.3 Length of the Keys
Brute-force attacks have been introduced to reconstructing the
encryption keys in ISR [42], which is also applicable to C3. However,
since we use a different key for encrypting each basic block, such
brute-forcing will be ineffective because a successful attack typically
requires the reconstruction of keys for multiple basic blocks. To
this end, we believe that using XOR as the encryption algorithm for
improved performance is justifiable, although C3 can definitely use
a more secure encryption scheme. We currently use a 32-bit master
key since it is unique for the entire program. C3 could improve its