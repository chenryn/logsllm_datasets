title:Plug-N-Pwned: Comprehensive Vulnerability Analysis of OBD-II Dongles
as A New Over-the-Air Attack Surface in Automotive IoT
author:Haohuang Wen and
Qi Alfred Chen and
Zhiqiang Lin
Plug-N-Pwned: Comprehensive Vulnerability 
Analysis of OBD-II Dongles as A New Over-the-Air 
Attack Surface in Automotive IoT
Haohuang Wen, Ohio State University; Qi Alfred Chen, University of California, Irvine; 
Zhiqiang Lin, Ohio State University
https://www.usenix.org/conference/usenixsecurity20/presentation/wen
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Plug-N-Pwned: Comprehensive Vulnerability Analysis of OBD-II Dongles as A
New Over-the-Air Attack Surface in Automotive IoT
Haohuang Wen
Qi Alfred Chen
The Ohio State University
University of California, Irvine
PI:EMAIL
PI:EMAIL
Zhiqiang Lin
The Ohio State University
PI:EMAIL
Abstract
With the growing trend of the Internet of Things, a large
number of wireless OBD-II dongles are developed, which can
be simply plugged into vehicles to enable remote functions
such as sophisticated vehicle control and status monitoring.
However, since these dongles are directly connected with
in-vehicle networks, they may open a new over-the-air attack
surface for vehicles. In this paper, we conduct the ﬁrst com-
prehensive security analysis on all wireless OBD-II dongles
available on Amazon in the US in February 2019, which
were 77 in total. To systematically perform the analysis, we
design and implement an automated tool DONGLESCOPE
that dynamically tests these dongles from all possible attack
stages on a real automobile. With DONGLESCOPE, we have
identiﬁed 5 different types of vulnerabilities, with 4 being
newly discovered. Our results reveal that each of the 77
dongles exposes at least two types of these vulnerabilities,
which indicates a widespread vulnerability exposure among
wireless OBD-II dongles on the market today. To demonstrate
the severity, we further construct 4 classes of concrete attacks
with a variety of practical implications such as privacy
leakage, property theft, and even safety threat. We also
discuss the root causes and feasible countermeasures, and
have made corresponding responsible disclosure.
1 Introduction
On-Board Diagnostics (OBD) [1] is a standard widely adopted
for an automobile to self-diagnose and report its internal work-
ing status (such as voltage, fuel level, and speed). As the latest
and most popular OBD standard, OBD-II is universally de-
ployed in gasoline vehicles of US after 1996 for mandated
emission inspection [2]. With the growing trend of the Internet
of Things (IoT), a large number of wireless OBD-II dongles
are developed, enabling vehicle owners to conveniently per-
form remote vehicle functions from companion mobile apps,
like many other IoT devices, for simple status monitoring and
diagnosis to sophisticated vehicle control such as disabling
remote unlocking or seat-belt warnings.
While wireless OBD-II dongles do provide rich functions
and great convenience, their usage exposes a wireless entry to
the internal vehicle systems from the external world, which
thus inevitably brings security concerns. On one hand, OBD-
II dongles are connected with the in-vehicle Control Area Net-
work (CAN) buses to fetch diagnostic data through the OBD-
II port. On the other hand, they interact with external compan-
ion apps via wireless network to transfer data and commands.
If not properly designed with security principles and practices,
these dongles may enable a series of new over-the-air vehicle
attack vectors, compromising not only the user property and
privacy, but also the safety of drivers, passengers and pedestri-
ans. For example, in 2017 it was found that the vulnerabilities
on a Bosch Drivelog Connector OBD-II dongle enabled a
nearby attacker to remotely shut down the engine while the
vehicle was still in motion [3]. This dongle was soon removed
from the market. As of today, there are still a great number of
OBD-II dongles available on the market, which are popular
among drivers, repair technicians, and also auto insurance
companies. However, whether these dongles are vulnerable
to remote or nearby attacks remains unknown to the public.
To ﬁll this knowledge gap, in this paper we conduct the
ﬁrst comprehensive security analysis on all wireless OBD-II
dongles available on Amazon in the US in February 2019,
which were 77 in total. To systematically perform the analysis,
we ﬁrst deﬁne the attack surface based on the stages of how
a remote or nearby attack could use the CAN bus through
wireless OBD-II dongles: broadcast, connection and com-
munication. Next, we design and implement an automated
tool DONGLESCOPE that is capable of dynamically testing
potential vulnerabilities at all these stages with a dongle under
test plugged into the OBD-II port on a real automobile, with
the assistance of companion mobile app analysis to reverse
engineer the intended messages to these dongles, which are
used to design test messages in the communication stage.
Through intensive experiments on these 77 dongles, we
have identiﬁed 5 different types of vulnerabilities across the
three attack stages, in which 4 are newly discovered. Among
the 77 dongles, we ﬁnd each of them exposes at least two
USENIX Association
29th USENIX Security Symposium    949
types of these vulnerabilities across the three stages, which
indicates a widespread vulnerability exposure among wireless
OBD-II dongles on the market today. Speciﬁcally, we ﬁnd that
around 85% of these dongles have neither connection-layer
nor application-layer authentication, which essentially pro-
vides a nearby attacker arbitrary access to the CAN bus once
they are discovered in the broadcast stage. We further discover
that 29 (37.66%) dongles are vulnerable to such malicious
access even when the vehicle owner’s mobile device is con-
nected with them. In the communication stage, we ﬁnd that
52 (67.53%) dongles fail to ﬁlter out CAN bus messages with
functions unsupported in the dongles, meaning that attackers
can send safety-critical vehicle control commands, e.g., gear
shifting, even when the attacked dongle is originally designed
only for diagnostic purpose. Even worse, a few dongles are
vulnerable to over-the-air dongle ﬁrmware subverting or ex-
traction. Last but not least, the aforementioned vulnerability
can be ﬁngerprinted using broadcast information for nearly
half (42.86%) of the dongles, which allows nearby attackers
to conveniently pinpoint which dongles to attack and how to
attack them over the air.
To demonstrate the severity of these vulnerabilities, we
further construct 4 classes of concrete attacks building upon
these vulnerabilities and validated them on our testing auto-
mobile. These attacks can lead to a wide range of practical
implications, including privacy leakage, property theft, and
even safety threats to drivers, passengers, and pedestrians.
Among the 77 dongles we collected, 84% of them are vul-
nerable to at least one of these four attack classes, and nearly
60% are vulnerable to at least three.
The analysis results in this paper evidently point out a
general and systematic lack of security protection in wireless
OBD-II dongles today, which is known for IoT devices in
home setting [4–9], but for the ﬁrst time comprehensively
revealed and quantiﬁed for those in the vehicle setting. Since
the vehicle setting is safety-critical, one would expect that
its IoT devices have more scrutinized security practices.
However, based on our results, this is very unfortunately
not the case today. To proactively address this, we leverage
the insights in our analysis to discuss the root causes and
feasible countermeasures, and meanwhile we have also
already made responsible disclosure to the corresponding
dongle manufacturers. As IoT devices are increasingly used
in safety-critical domains such as automobiles, we expect
that our domain-speciﬁc ﬁndings and their security/safety
implications can send a strong and timely message to start
developing and deploying principled security designs in these
critical application domains for the IoT.
Contributions. In short, we make the following contributions
in this paper:
• Comprehensive vulnerability analysis. We conduct the
ﬁrst comprehensive security analysis on all wireless OBD-
II dongles available on Amazon in the US in February
Figure 1: Structure of a CAN Bus Message.
2019. Targeting the threat model of over-the-air vehicle
attacks, we systematically identify the attack surface as at-
tack vectors across three necessary attack stages: broadcast,
connection, and communication. We design and implement
an automated tool DONGLESCOPE that is capable of dy-
namically detecting potential vulnerabilities at these three
stages with a real automobile.
• Vulnerability discovery and quantiﬁcation. With DON-
GLESCOPE, we have systematically analyzed the 77 don-
gles we collected and identiﬁed 5 types of vulnerabilities
across the three attack stages, in which 4 are newly discov-
ered. Our results show that each of the 77 dongles has at
least two vulnerabilities exposed across the three stages,
which indicates a widespread vulnerability exposure among
wireless OBD-II dongles on the market today.
• Attack case-study construction. To demonstrate the
severity of the identiﬁed vulnerabilities, we further con-
struct 4 classes of concrete attacks building upon these
vulnerabilities and validate them on a testing automobile.
These attacks can lead to a wide range of practical im-
plications, including privacy leakage, property theft, and
even safety threats to drivers, passengers, and pedestrians.
We also discuss the root causes and feasible countermea-
sures, and have also made responsible disclosure to the
corresponding dongle manufacturers.
Roadmap. The rest of this paper is organized as follows.
Necessary background related to the Control Area Network
and OBD-II dongles is introduced in §2. Next, we describe the
attack model in §3. Then, we present the detailed design and
implementation of DONGLESCOPE in §4. In §5, we present
the vulnerability analysis results, followed by the attack case
studies in §6 and discussions in §7. We review the related
works in §8, and ﬁnally conclude in §9.
2 Background
2.1 Control Area Network
Automobiles are no longer isolated mechanical devices. In-
stead, they are sophisticated computer systems with a great
number of Electronic Control Units (ECUs) responsible for
different capabilities such as steering, braking, and accelerat-
ing. These ECUs form a complicated network with massive
number of messages transferring back and forth at any time.
To make sure that such a complicated system works properly,
950    29th USENIX Security Symposium
USENIX Association
IdentifierSOFRTRIDEDLCData FieldCRCACK11 or 29 bit0 -8 ByteEOFan in-vehicle network is necessary to coordinate the transfer
of the messages between these ECU components.
Control Area Network (CAN) bus is the most ubiquitous
message-based protocol deployed in the modern vehicles to-
day [10]. In this network, ECUs are mutually connected with
a bus system, constantly broadcasting and listening to CAN
bus messages. The structure of a CAN bus message is shown
in Figure 1 [11]. The identiﬁer and the data ﬁeld in a CAN bus
message determine the function of a CAN bus message. The
identiﬁer of a message consists of 11 or 29 bits, indicating the
sender ECU of this message (e.g., 0x191 represents the trans-
mission system ECU). The data ﬁeld of a message contains
up to 8 bytes, storing the state parameters of the sender ECU
(e.g., the third byte of data represents the engine speed).
2.2 OBD-II Dongles and Companion Apps
OBD-II dongles. OBD-II is a high-level communication pro-
tocol (a “language”) on top of the CAN bus, offering diagnos-
tic capability for vehicle owners, repair technicians, and also
auto insurance companies, such as monitoring the speed and
fuel of an automobile. Since 1996, it has been mandated on
each gasoline automobile by the US government [2]. Nowa-
days, most of the vehicles have a diagnostic port installed
under the steering wheel, which connects to the CAN bus and
delivers CAN bus messages. As a message-based protocol,
special OBD-II messages are deﬁned to convey diagnostic
information, which are known as the OBD-II Parameter IDs
(PIDs) [12]. Unlike the highly customized CAN bus messages
which are deﬁned by speciﬁc vehicle manufacturers [13],
these OBD-II PIDs are standardized. Moreover, as a kind of
CAN bus message, PID has the similar structure as shown in
Figure 1. Each PID for query uses 0x7DF as identiﬁer, and the
data ﬁeld contains a service number and a PID number [14].
In addition to these universal PIDs, manufacturers may also
deﬁne private PIDs. Based on the OBD-II standard, a great
number of OBD-II dongles are developed for car diagnosis
such as monitoring the speed, fuel and engine status. After
plugged into the OBD-II port, these dongles can constantly
send CAN bus messages to query diagnostic data from the
CAN bus.
Among all available OBD-II dongles on the market today,
wireless dongle is the most dominant type, since they provide
great convenience while offering a decent price to users [15].
When in use, they serve as end points for nearby mobile
devices to connect and communicate via wireless network
such as Wi-Fi, Bluetooth Classic, and BLE. As a result, there
are also companion mobile apps for these dongles. In this
paper, our vulnerability analysis focuses on wireless dongles,
since they allow wireless access to the OBD-II port and thus
are more realistic targets for attackers. Figure 2 shows the 77
wireless dongles we purchased in this research.
Figure 2: All 77 OBD-II Dongles in Our Study.
Companion mobile apps. Since wireless OBD-II dongles do
not have user interfaces such as screen and keyboard, they rely
on external devices to make them usable and user-friendly.
As a result, their manufacturers or third-party developers have
developed corresponding companion mobile apps. With such
a companion app at hand, it is easy and convenient to monitor
the status of an automobile. First, a user plugs the dongle into
the OBD-II port locating under the steering wheel, and starts
the engine. Second, she opens the companion mobile app and
establishes a connection via the wireless network hosted by
the dongle. Afterwards, the user is able to monitor the vehicle
status from the app UI, and the app automatically interacts
with the dongle which queries the vehicle status data from the
CAN bus and delivers vehicle control commands if there is
any to the CAN bus.
3 Attack Model and Attack Surface
3.1 Attack Model
In this paper, the attacker’s goal we consider is to exploit
the new vehicle attack surface exposed by emerging wire-
less OBD-II dongles and thus achieves wireless attacks onto
the CAN bus of a victim vehicle. As introduced in §2, the
wireless OBD-II dongles operate as wireless end points for
surrounding devices to connect and communicate. As a result,
the attacker must be within the range of the wireless network
so that she is able to establish a connection with the target
dongle, which is usually up to 100 meters. However, with
an ampliﬁer [16], an attacker can detect wireless signals at a
remote distance (e.g., up to 1,000 meters using the BLE An-
tenna as demonstrated in BleScope [17]), which thus enables
her to discover and approach the victim to perform attacks.
The general threat model is presented in Figure 3. Before the
attack, the ﬁrst but very important step is to identify a nearby
OBD-II dongle in the air. Afterwards, she tries to initiate a
connection with it through wireless network. If the connection
is successfully established, she then attempts to attack the ve-
USENIX Association
29th USENIX Security Symposium    951
vices to indicate its willingness. Therefore, nearby devices
can discover and recognize it, and try to establish a connec-
tion. As a nearby attacker, she is capable of collecting this
broadcast information, and her goal is to identify a victim
dongle and establish connection based on the information.
(II) Connection Stage. In this stage, the attacker’s task is to
successfully establish a network connection with the dongle in
order to send commands related to CAN bus message delivery
to the dongle. When the connection is establishing, she may
be required to provide sufﬁcient credential before legitimately
connecting to the dongle, such as a password or a PIN code.
If no credential is needed, the attacker is able to arbitrarily
connect to the dongle.
(III) Communication Stage. After the connection is estab-
lished, the attacker is able to send unauthorized CAN bus
messages to communicate with the dongle and perform at-
tacks. Prior to that, she may need to ﬁrst bypass the authenti-
cation step in the communication protocol between the app
and the dongle. After that, the attacker sends the attacker-
desired CAN bus messages to the dongle, requesting it to
relay the messages to the CAN bus to trigger corresponding
consequences. In this paper, we call the CAN bus messages
that perform the designed functions of a dongle predeﬁned
messages and the others undeﬁned messages. The former is
allowed by design, and thus should be directly relayed to the
CAN bus. However, the designed dongle functions can be
quite limited, e.g., only diagnostic functions. Therefore, for
certain attack goals, e.g., those that are safety related, it is
of interest to inject undeﬁned messages (e.g., those interfere
the vehicle control). However, since these messages are not
allowed by design, whether the attack can succeed depends
on the message ﬁltering process at the dongle side.
4 Analysis Methodology
Having identiﬁed the attack surface of OBD-II dongles, we
design and implement an automated tool, named DONGLE-
SCOPE1, to measure a few objectives that can lead to vulner-
abilities in wireless OBD-II dongles across broadcast, con-
nection and communication stages. In this section, we ﬁrst
introduce the design overview, as well as the measurement
objectives for each stage in §4.1. We then detail the design
and implementation of our tool in §4.2.
4.1 Overview
Figure 4 presents the workﬂow of DONGLESCOPE. At a high
level, it dynamically tests an OBD-II dongle on a real auto-
mobile, and also takes the corresponding companion mobile
app for static analysis. The analysis is broken down into four
main components associated with the three attack stages. For
1The source code of DONGLESCOPE is available at https://
github.com/OSUSecLab/DongleScope.
Figure 3: The General Threat Model.
hicle by injecting malicious messages to the CAN bus through
the OBD-II dongle, e.g., reading sensitive data or causing un-
safe vehicle driving behaviours. The attack is successful if the
messages are successfully delivered by the dongle to the CAN
bus and the corresponding attack consequences are triggered.
There is no speciﬁc constraint of when to conduct the attack.
For example, an attacker may compromise vehicles that are
still driving on the road with the driver and other passengers
on board. Moreover, since an OBD-II dongle can still receive
power supply from the OBD-II port even when the vehicle is
off [18], she can even target the vehicles parked in a parking
lot where she has a chance to sneak into the vehicle and
steals all belongings. Some CAN bus messages with more
direct safety consequences, e.g., stopping the engine, will be
disabled when the vehicle is moving at a high speed [19].
Thus, if these messages are required for achieving a certain