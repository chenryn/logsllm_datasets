大
自非最发益的笔其，中类个一
s_string("ACCT "）:
s_string_variab1e(bob"):
s_string（²\r\n）;
s_string("OD );
hgoprd_rnnrd_ssfe_loFd_e
B7c
ng9tc2")Jste_XooTd_:
s_string("SANT ");
("0E0s01o")e1snd_
s_string_variab1e(*.");
+{a_x Fzofd_
s_string(°\p\n"):
C435h 1g/ 0
).e_laofd_
: (*10 00")msn1u_
s_string(“PoRT ");
rnav,bncm,_n±7bnsp1d_(hisnrd_c
(ageeuass
(*73a.32")erdx fs$v_gnim7t_
s_string(",");
:(*sabsnn*yns_ofd_e
0"n_iofd_
s_string(","):
中年网个孩
s_string(°."):
小大个人个且
电
s_string_variableC"4°);
00前爆个一面包，能开火
s_string_variable(*s");
s_string（".");
8o- In6v_bow_ns1bneg1d_y6n1d_2报3
s_string_variable("6"):
s_string("."):
s_string（\r\n"):
SPIKE被部分文档化，并且它所发布的包都包含许多可能会导致混淆的构件。然而，目前
有许多可用的例子，这些例子对于熟悉这个功能强大的模糊测试框架来说是极好的参考。由于
缺乏完整的文档以及对所发布的包的破坏，因此使得一些研究者推断SPIKE是有意识地在一些
领城阻止其他人发现漏洞，而这些漏洞是由该工具的开发者私密地发现的。这种说法的真实性
仍然没有得到证实。
取决于你个人的需要，SPIKE框架的一个主要缺陷是缺乏对微软Winodws的支持，因为
SPIKE被设计为运行在UNIX环境中，尽管目前有一些混合的报道称可以通过使用Cygwin来
http://www.cygwin.com/
---
## Page 270
第21章模测试框架255
使SPIKE运行于Windows平台上。另外考虑到的一个不足因素是即使对该框架做一个非常小的
改变，例如增加新的模糊字符串，那么也需要重新进行编译。最后一个不足的方面是需要通过
手工的复制一粘贴操作来实现所开发的模期器之间的代码重用。新元素例如针对邮件地址的
一个模糊器不能被简单地定义，也不能稍后在框架内被全局引用。
总之，SPIKE已经被证明是有效的，并且已经被其作者和其他人所使用而发现了多种具有
鲜明特征的漏洞。SPIKE也包括一些诸如代理这样的工具，它允许一个研究者对Web浏览器和
Web应用程序之间的通信进行监视，井实施模糊测试。SPIKE诱发错误的功能经历了一个很长
的阶段才体现出了模糊测试的全部价值。自从SPIKE最初被公开发布以来，针对模糊测试的基
于块的方法就获得了流行，目前许多的模糊测试框架都已经采用了该技术。
21.2.4Peachθ
由IOACTIVE所发布的Peach是一个采用Python语言编写的跨平台的模糊测试框架，它最初
是于2004年发布的。Peach是一个开源框架，并且具有开放式的许可。同其他可用的模糊测试
框架相比，Peach是可证明的最为灵活的一个框架，并且最大程度地促进了代码的重用。另外，
以作者的观点来看，它具有一个最有趣的名字（桃子，模糊一一理解了吗？）。该框架提供了
一些基本的构件以创建新的模期器，包括生成器、转换器、协议、发行器以及群组。
生成器负责生成从简单的字符串到复杂的分层的二进制消息范围内的数据。可以将生成器
串接起来以简化复杂数据类型的生成。将数据生成抽象到其自己的对象中就可以很容易地在所
实现的模期器中进行代码重用，例如，考虚在一个SMTP服务器的审核过程中开发了一个邮件
地址生成器。该生成器可以明显地在其他需要生成邮件地址的模糊器中被重用。
转换器以一种特定方式来改变数据。示例转换器可能包括base64编码器、gzip以及HTML
编码器。转换器也可以被串接起来使用，也可以将其绑定到一个生成器。例如，一个所生成的
邮件地址可以通过一个URL编码器的转换器来进行传递，然后再通过一个gzip转换器传递。将
数据转换抽象到其自己的对象中就可以很容易地在所实现的模糊器中进行代码重用。一且一个
给定的转换被完成，那么它就可以明显地被所有以后所开发的模糊器来重用。
发行器通过一个协议实现了针对所生成数据的一种传输形式。示例发行器包括文件发行器
和TCP发行器。同样，将此概念抽象到其自己的对象中也促进了代码的重用，尽管在当前的
Peach版本中还是不可行的，但是发行器的最终目标是为任意的发行器提供透明的接口。例如，
考虑你创建了一个GIF图像生成器。该生成器应当能够通过简单地产生一个特定的发行器来发
布一个文件或者传递到一个Web表单。
群组包含一个或者多个生成器，它是对生成器可以产生的值进行遍历的一种机制。Peach
包含一些常用的群组实现。另一个额外的构件是脚本对象，它是一个简单的抽象以减少实现下
面这些循环所需要的多余代码的数量，即数据循环以及对group.next（）和protocolo.step（）
的调用的循环。
http://peachfuzz.sourceforge.net
---
## Page 271
256第三部分高级模糊测试技术
作为一个完整面又简单的例子，考虑下面的Peach模糊器，它被设计为从一个字典文件中
强力发掘一个FTP用户的密码：
from Peach
faport' *
from Peach.Transformers import *
from Peach.Generators
年期
from Peach.Protocols
import +
import *
from Peach,Publishers
1mport *
1oginGroup -group.GroupO
业：属有用W
1oginBlock=b1ock.B1ockO
1oginBlock.setGenerators（(
static.Static(“USER username\r\nPASS "),
dictionary.Dictionary(loginGroup, “dict.txt°),
static.Static("\r\nQuIT\r\n°)
U669AS.1S
职市
script.Script(1oginProt,1oginGroup.0.25).go)
在模糊器的开头，首先导人了Peach框架的多个不同的构件，接下来，实例化了一个新的
块和群组。该块被定义为传输用户名以及密码命令的动词。该块的下一个元素导入了潜在密码
的一个字典。我们将在模糊测试的过程中对这个块元素进行循环选代，该块的最后一个元素终
止了密码命令，并且发出了FTP退出命令以从服务器断开连接。然后，对已经可用的FTP协议进
行扩展来定义了一个新协议。最后，创建了一个脚本对象以有效地组织连接的循环，并且对字
典进行循环遍历，在对上述脚本进行研究之后，脑海中所浮现出的第一个想法就是与该框架进
行接口并不是非常直观。这是一个正确的批评，并且该问题可能是Peach框架所存在的一个最大
的缺陷。在Peach中开发你的第一个模糊器肯定要比在Autodafé或者Dfuz中花费更长的时间。
Peach框架允许研究者关注于一个给定协议的单独的子部分，然后再将它们结合在一起创
建一个完整的模糊器。这种开发模糊器的方法，尽管可以证明其开发速度不如基于块的方法那
样快，但是它肯定能够促进在其他任意模糊测试框架中的代码重用。例如，如果必须要开发一
个gzip转换器以测试一个反病毒解决方案，然后它在库中变为可用的，并且稍后可以被透明地
用于测试一个HTTP服务器处理压缩数据的能力。这是Peach所显示的很好的一面。你使用它越
多，那么它就会变得越智能。由于其完全是采用Python语言来实现的，Peach模糊器可以在正
确安装有Python的任何环境中运行。另外，通过利用现有的一些接口，如Peach的接口、微软
的COM或者微软的.NET包，Peach可以直接对ActiveX控件和可控制的代码实施模期测试。目
前也有使用Peach直接对微软的WindowsDLL进行模糊测试的例子，同时也可以将Peach嵌人到
C/C++代码中以生成被操纵的客户端和服务器。
Peach处于动态发展之中，到本书出版时其最新的可用版本是0.5（在2006年4月发布）。尽
 http://en.wikipedia.org/wiki/Component_Object_Model
---
## Page 272
第21章模糊测试枢案257
管Peach在理论上来说是非常先进的，但是不幸的是它没有被完整地文档化，井且没有被广泛
的应用。由于缺乏相关的参考资料就导致了一个比较困难的学习曲线，这可能会阻碍你对该框
架的应用。Peach的开发者介绍了一些新颖的思想，并且创建了一个坚实的基础以供扩展。最
后需要指出的一点是，尽管在本书写作时还没有更多的详细信息被提供，但是Peach框架的一
个Ruby端口已经被声明。
21.2.5通用模糊器
由Applied Security的JaredDeMott所发布的通用模糊器（GeneralPurposeFuzzer，GPF），
被命名为关于普遍公认的术语一通用保护错误的一个双关语。GPF被动态地进行维护，井且
在GPL许可下是可用的开源工具，被开发以运行在UNIX平台上。正如其名字所暗示的，GPF被
设计为一个通用的模糊器，同SPIKE不一样，它可以生成无限数量的变异。这并不是说生成式
的模器就优越于启发式的模糊器，因为这两种方法各具优点和局限性。本节中列出的GPF与
其他框架相比所具有的主要优点是，使用GPF来建立和运行一个模糊器的初始成本比较低。
GPF通过一些模式来提供相关功能，这些模式包括PureFuzz，Convert，GPF（主模式），
Pattern Fuzz及SuperGPF
PureFuzz是一个易于使用的纯随机模期器，类似于将/dev/urandom关联到一个socket，尽管
所生成的输入空间是非智能化的和无限的，但是该技术在过去已经发现了一些漏洞，甚至是在
公共的企业应用软件中也发现了漏洞。PureFuzz与netcat和/dev/erandom的组合相比，所具有的
主要优点是PureFuzz提供了一个种子选项Cl允许重放伪随机流.另外.如果PureFuzz检行成功
那么可以通过使用范围选项来查明导致异常的特定包。
随机方法也可以很有效
6.21
许多人认为诸如GPF的PureFuzz的模糊器生成纯粹的随机数，对于实际应用来说过于简单。
为了消除这个普遍的误解，考虑下面这个关于计算机协会的BrightStorARCserve文件备份的解
决方案的实际例子.2005年8月，在负责处理微软SQLServer文件各份的代理中发现了一个细
微的、可利用的基于栈的缓冲区溢出漏洞，融发该漏洞所需要进行的操作就是向受影响的、
正在TCP端口6070监听的daemon程序传输超过3168个字节的数据。
可以通过用最少的设置并且不用进行协议分析的随机模糊测试来很容易地发现该漏洞。将
该例子作为一个证明，即当用手工方法正在创建一个智能模糊器时，运行一个诸如PureFuzz的
模糊器是非常值得的。
Convert是一个可以将libpcap文件，比如那些被Ethereal和Wireshark所生成的文件，翻
译成一个GPF文件的GPF实用工具。该工具通过将二进制pcap（捕获的包）格式转换为一种人
hbtp:/labsidefense.com/inteligence/vulnerailities/display,pbhp?id=287
③http://www.ethereal.com
---
## Page 273
258
第三部分高级模糊测试技术
工可读的、准备修改的并且基于文本的格式，从面减少了在协议建模的初始阶段所进行的一些
单调的工作。
在GPF的主模式中，提供了一个GPF文件以及多种命令行选项以控制一些不同的基本协议
攻击。捕获的通信被重放，并且采用了不同的方法对其中的某些部分进行了变异。这些变异包
括插入逐渐增长的字符串序列以及格式化字符申标记、字节循环以及随机变异方法。这种模
测试模式需要进行大量的手工操作，因为其逻辑部分是构建在分析者的直觉之上的。
PattermnFuzz（PF）是最为著名的GPF模式，因为它能够自动化的对所检测到的协议的纯文
本部分进行标记和模糊测试。PF检查目标协议以发现公共的ASCII边界和字段终结符，然后根
据内部规则集自动化的对它们进行模糊测试。这些规则被定义为名为tokAids的C代码。ASCII
变异引擎被定义为一个tokAid（normal_ascii），这里还有其他一些引擎（如DNS）.为了准确地、
智能化地对一个定制的二进制协议进行建模和模糊测试，必须要编写井编译tokAid。
SuperGPF是一个用Perl脚本语言编写的GPF包装器，它被编写以解决这样的情形，即当一
个特定的socket端点被设为模糊测试的目标，但是研究者却不知道从何处人手，SuperGPF与一
个捕获了包含有效协议命令的一个文本文件的GPF相结合，并且生成子上千个新的捕获文件。
然后，该脚本采用不同的模期测试模式启动多个GPF的实例，以所生成的多种不同的数据对目
标进行攻击。SuperGPF被局限于只能对ASCII协议进行模糊测试。
同样，我们提供一个示例GPF脚本以同前面所讨论的FTP模期器进行比较和对比：东主
Source:S S1ze:20 Data:220 (vsFTPd 1.1.3)
多用体中
Source:CS1ze:1z Data:ustK Tuzzy
Source:S Size:34 Data:331 Please specify the password.