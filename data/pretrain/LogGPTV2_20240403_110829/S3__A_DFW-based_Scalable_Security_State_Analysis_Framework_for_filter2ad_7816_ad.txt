better than when not using segmentation and using a central-
ized ﬁrewall. This is due to the absence of east/west trafﬁc
among running services, which did not specify reachability in-
formation between running services. Hence, AG is computing
centrally and resulted in a magniﬁcent time.
Table 3: Mean and standard deviation for the AG generation
time for the displayed number of segments in Table 2.
#Segments
Mean time
standard deviation
5
3.66
1.96
10
6.75
3.17
15
9.91
4.46
20
13.03
5.04
Table 4: sub-AG scalability generation time by using DFW,
and both with and without Segmentation
# Services
# Segments
without Segmentation
using Segmentation
Generation Time
Generation time
(sec)
(sec)
750
1450
2490
3360
5
10
15
20
3.51
17.344
4980
6720
0.872
2.083
4.468
10.027
6.3 SDN Controller Overhead
Since S3 is based on an SDN-managed data-center network,
evaluating the overhead of computing AG using SDN con-
troller is necessary to ensure that the AG generation does
not overwhelm the SDN controller, since this may result in
service disruption for end users. Speciﬁcally, our proposed al-
gorithm 1 line 15 relies on the SDN controller to compute the
sub-AGs for all the obtained segments. Hence, we measure
the effect of this operation to the SDN controller bandwidth.
To do this, we used the ﬁrst case in Table 2, where the
system has 50-100 services (∼ 4000 vulnerabilities) running
and emulated the scenario. We utilized network throughput
measurement tool iperf to assess end-to-end bandwidth. Fig-
ure 8 shows a comparison of the SDN controller bandwidth
overhead before the AG computation takes place and during
computation. The evaluation results are an average of three
runs. The network throughput for a network with 5 segments
was around ∼11.3 Gbps without micro-segmentation. On in-
corporating micro-segmentation, the throughput decreases to
9.95 Gbps. Similarly, for the case with 10, 15 and 20 network
segments, the throughput drops slightly, as expected.
This drop can be explained as the overhead induced by
AG generation in each network segment, and the computation
required to merge individual segments into full AG. The worst-
case throughput impact on SDN controller was ∼10% (20
segment case). This experiment shows that on an average
the scalable AG generation process will not impact the SDN
controller’s performance in a large data-center network.
6.4 Optimal Number of Segment Experiments
We conducted a simulation experiment to identify an optimal
number of segments in a large network with 50 services and
50 vulnerabilities. We varied the number of segments from 5
to 25, with an increasing number of DFW rules (3 in case of 5
segments, 17 in case of 25 segments), induced by the increase
in the number of segments.
In section 5.2, we showed and discussed a heuristic ap-
proach to evaluate what is the optimal number of segmenta-
tion based on the derived equation for Segmentation Index
(SI) 1. The equation showed, depending on the system ad-
ministrator requirement, how to obtain the optimum number
482          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationFigure 8: Evaluation of SDN Controller overhead when before
computing segmented AG and during computation shows
limited overhead
of segments, i.e. whether connectivity is more important or
|DFW| rule. The Figure 9 shows our experiments, where the
blue line indicates the segments have high connectivity, i.e.
scon + scom > sd (α = 0.877,β = 0.105) between services in
one segment, the orange line indicates higher separation be-
tween the segments based on the number of |DFW| rules, i.e.,
scon + scom  10 for high connec-
tivity and SI also increases steadily for cases where ﬁrewall
rules weight is high. This can be explained by the fact that
dependencies between vulnerabilities in each segment are
reduced, using trafﬁc regulation provided by DFW. Finally,
increasing the number of segments more (25) turned out to
have a low SI value for all 3 lines, which indicates segments
are disconnected from each other.
7 Discussion
Cycle Detection: The dependencies between services in a net-
work can cause cycles in the directed AG. Homer et. al. [17]
discussed the problems of cycles that can limit the scalability
of AGs. The research work takes about 150 ms for cycle de-
tection over a network with 10 hosts and 46 vulnerabilities.
S3 utilizes the network connectivity and vulnerability depen-
dency information to detect any cycles present in the ﬁnal
directed AG. We use parallel nested Depth First Search [16]
Figure 9: Optimal Number of Segments Evaluation shows 20
segments to have high Segmentation Index (SI)
over each sub-AG in order to identify the cycles present within
each segment. The algorithm scales linearly with the number
of vulnerabilities present in each network segment. We omit
details on cycle detection in the paper for the sake of brevity.
Segment Validation and Segmentation Heuristics: We
utilized a Segmentation Index based sub-AG (segment), that
has a validation heuristic approach. The algorithm provides
information about the appropriate size of each segment, such
that not only the complexity concerns for AG generation are
addressed, but also each segment is highly cohesive (has the
same type of services and vulnerabilities). This will help in the
application of security patches to the entire segment. There are
other segmentation heuristics, classiﬁed under graph cluster-
ing algorithms, e.g., k-spanning tree, which creates k-groups
of non-overlapping vertices, shared nearest neighbor (SNN)
graph. We plan to compare the optimal segmentation heuris-
tic discussed in Section 5.2 with other state-of-the-art graph
segmentation heuristics in future work.
Policy Conﬂicts and SLA Impact: It is important taking
into account the Service Level Agreement (SLA) that states the
relationship between a service provider and client. This SLA
will have an impact on the |DFW| rule that the system admin-
istrator will enforce to create segments and isolate vulnerable
services from protected ones. After applying segmentation
and deriving a new |DFW| rules, a conﬂict might exist be-
tween the SLA and the |DFW| rules. In effect, the |DFW|
rule might cause a service disruption for users. Security policy
conﬂict [14,29] handling, however, is another area of research
that will be considered as a part of future work.
8 Conclusion
Attack graph scalability and granular security enforcement
are key problems in data-centric networks today. We provide
a SDN-based micro-segmentation approach using S3 frame-
work for addressing these issues. S3 enforces granular security
policies in the data-center network to deal with threats such
as lateral movement of the attack. S3 reduces the number
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 483of security states in the network by reducing attack graph
density and generation time as evident from section 6.2. The
micro-segmentation approach is capable of establishing and
generating a scalable AG for a large network - Section 6.1.
Moreover, the impact on the SDN controller because of miro-
segmentation is limited, as proved from the experimental
analysis in Section 6.3. We also identiﬁed optimal number of
segments using Segmentation Index (SI) method, which can
ensure high-quality (cohesive) segments with ﬁne-grained
access control policies across segments - Section 5.2. The
current research work doesn’t identify the security policy con-
ﬂicts that can be induced by co-dependency between micro-
segmentation policies. Additionally, we have not compared
our segmentation method with a diverse set of graph segmen-
tation/clustering heuristics. In the future, we plan to address
these limitations.
Acknowledgment
All authors are thankful for research grants from Naval Re-
search Lab N00173-15-G017, N0017319-1-G002 and Na-
tional Science Foundation US DGE-1723440, OAC-1642031,
SaTC-1528099. Special thank to Jim Kirby from NRL for the
valuable feedback on the paper. Also, Abdulhakim Sabur is a
scholarship recipient from Taibah University through Saudi
Arabian Cultural Mission (SACM).
References
[1] Paul Ammann, Duminda Wijesekera, and Saket Kaushik. Scalable,
graph-based network vulnerability analysis. In Proceedings of the 9th
ACM Conference on Computer and Communications Security, pages
217–224. ACM, 2002.
[2] Ningyuan Cao, Kun Lv, and Changzhen Hu. An attack graph generation
method based on parallel computing. In International Conference on
Science of Cyber Security, pages 34–48. Springer, 2018.
[3] Ramaswamy Chandramouli and Ramaswamy Chandramouli. Secure
virtual network conﬁguration for virtual machine (vm) protection. NIST
Special Publication, 800:125B, 2016.
[4] Ioannis Chochliouros, Anastasia S Spiliopoulou, and Stergios P
Chochliouros. Methods for dependability and security analysis of large
networks. In Encyclopedia of Multimedia Technology and Networking,
Second Edition, pages 921–929. IGI Global, 2009.
[5] Ankur Chowdhary, Sandeep Pisharody, and Dijiang Huang. Sdn based
scalable mtd solution in cloud network. In Proceedings of the 2016
ACM Workshop on Moving Target Defense, pages 27–36. ACM, 2016.
[6] Chun-Jen Chung, Pankaj Khatkar, Tianyi Xing, Jeongkeun Lee, and
Dijiang Huang. Nice: Network intrusion detection and countermeasure
selection in virtual network systems. IEEE transactions on dependable
and secure computing, 10(4):198–211, 2013.
[7] Cisco.
Trends
in Data Center Security.
url =
https://blogs.cisco.com/security/trends-in-data-center-security-
part-1-trafﬁc-trends, May 2014. Online; accessed 20 Dec 2018.
[8] Eric Cole. Detect, contain, and control cyberthreats. SANS Institute,
June, 2015.
[9] Thomas H Cormen, Charles E Leiserson, Ronald L Rivest, and Clifford
Stein. Introduction to algorithms mit press. Cambridge, MA, page 819,
2001.
[10] Reinhard Diestel. Graduate texts in mathematics. Springer-Verlag New
York, Incorporated, 2000.
[11] Joseph C Dunn. Well-separated clusters and optimal fuzzy partitions.
Journal of cybernetics, 4(1):95–104, 1974.
[12] Karel Durkota, Viliam Lis`y, Branislav Bosansk`y, and Christopher Kiek-
intveld. Optimal network security hardening using attack graph games.
In IJCAI, pages 526–532, 2015.
[13] Massimo Ferrari. Release: Vmware nsx 6.1. 2014.
[14] Hazem Hamed and Ehab Al-Shaer. Taxonomy of conﬂicts in network
security policies. IEEE Communications Magazine, 44(3):134–141,
2006.
[15] John A Hartigan and Manchek A Wong. Algorithm as 136: A k-means
clustering algorithm. Journal of the Royal Statistical Society. Series C
(Applied Statistics), 28(1):100–108, 1979.
[16] Gerard J Holzmann, Doron A Peled, and Mihalis Yannakakis. On
nested depth ﬁrst search. The Spin Veriﬁcation System, 32:81–89, 1996.
[17] John Homer, Xinming Ou, and David Schmidt. A sound and practical
approach to quantifying security risk in enterprise networks. Kansas
State University Technical Report, pages 1–15, 2009.
[18] Jin B Hong and Dong Seong Kim. Performance analysis of scalable at-
tack representation models. In IFIP International Information Security
Conference, pages 330–343. Springer, 2013.
[19] Jin B Hong, Dong Seong Kim, Chun-Jen Chung, and Dijiang Huang. A
survey on the usability and practical applications of graphical security
models. Computer Science Review, 26:1–16, 2017.
[20] Hongxin Hu, Wonkyu Han, Gail-Joon Ahn, and Ziming Zhao. Flow-
guard: building robust ﬁrewalls for software-deﬁned networks.
In
Proceedings of the third workshop on Hot topics in software deﬁned
networking, pages 97–102. ACM, 2014.
[21] Dijiang Huang, Ankur Chowdhary, and Sandeep Pisharody. Software-
Deﬁned Networking and Security: From Theory to Practice. CRC
Press, 2018.
[22] Pierr Johnson.
With The Public Clouds Of Amazon, Mi-
crosoft And Google, Big Data Is The Proverbial Big Deal.
url=https://www.forbes.com/sites/johnsonpierr/2017/06/15/with-
the-public-clouds-of-amazon-microsoft-and-google-big-data-is-the-
proverbial-big-deal/409452d02ac3, 2017. Online; accessed 3 Mar
2019.
[23] Kerem Kaynar and Fikret Sivrikaya. Distributed attack graph gen-
eration. IEEE Transactions on Dependable and Secure Computing,
13(5):519–532, 2016.
[24] Peter Mell and Richard Harang. Minimizing attack graph data struc-
tures.
[25] Oussama Mjihil, Dijiang Huang, and Abdelkrim Haqiq. Improving
attack graph scalability for the cloud through sdn-based decomposition
and parallel processing. In International Symposium on Ubiquitous
Networking, pages 193–205. Springer, 2017.
vs.
[26] Nilesh Mojidra.
Stateless
Stateful
Firewalls.
url=https://www.cybrary.it/0p3n/stateful-vs-stateless-ﬁrewalls/,
2016. Online; accessed 20 Sep 2018.
[27] Xinming Ou, Sudhakar Govindavajhala, and Andrew W Appel. Mul-
val: A logic-based network security analyzer. In USENIX Security
Symposium, pages 8–8. Baltimore, MD, 2005.
[28] Justin Gregory V Pena and William Emmanuel Yu. Development
of a distributed ﬁrewall using software deﬁned networking technol-
ogy. In Information Science and Technology (ICIST), 2014 4th IEEE
International Conference on, pages 449–452. IEEE, 2014.
[29] Sandeep Pisharody, Janakarajan Natarajan, Ankur Chowdhary, Abdul-
lah Alshalan, and Dijiang Huang. Brew: A security policy analysis
framework for distributed sdn-based cloud environments. IEEE Trans-
actions on Dependable and Secure Computing, 2017.
484          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association[30] Dhaval Satasiya, Rupal Raviya, and Hiresh Kumar. Enhanced sdn
security using ﬁrewall in a distributed scenario. In Advanced Com-
munication Control and Computing Technologies (ICACCCT), 2016
International Conference on, pages 588–592. IEEE, 2016.
[31] Omar Sefraoui, Mohammed Aissaoui, and Mohsine Eleuldj. Openstack:
toward an open-source solution for cloud computing. International
Journal of Computer Applications, 55(3):38–42, 2012.
[32] Oleg Sheyner, Joshua Haines, Somesh Jha, Richard Lippmann, and
Jeannette M Wing. Automated generation and analysis of attack graphs.
In null, page 273. IEEE, 2002.
[33] Horst D Simon. Partitioning of unstructured problems for parallel
processing. Computing systems in engineering, 2(2):135–148, 1991.
[34] Su Zhang, Xinming Ou, and John Homer. Effective network vulnerabil-
ity assessment through model abstraction. In International Conference
on Detection of Intrusions and Malware, and Vulnerability Assessment,
pages 17–34. Springer, 2011.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 485