cd logmein-hamachi-2.1.0.101-armel
./install.sh
4. Start the Hamachi service (daemon):
Click here to view code image
/etc/init.d/logmein-hamachi start
5. The next three commands perform the following actions:
Logging the Pi into the Hamachi network
Binding the Pi to your LogMeIn account
Specifying an ID for the Pi
Click here to view code image
hamachi login
hamachi attach 
hamachi set-nick raspi-proxy
6. From your desktop workstation, approve the network join request from the web console.
You can see the interface in Figure 17.5.
FIGURE 17.5 Approving a Hamachi join request
7. Navigate to the My Networks page and add your Raspberry Pi to the Hamachi VPN you
created earlier. Note that approving a connection request and joining a particular network
are two separate steps.
You now can communicate directly with your Raspberry Pi by connecting to the Pi’s
25.x.y.z IP address from another Hamachi network member anywhere in the world!
Hamachi’s ability to allow easy peer-to-peer networks is one reason why the service is so popular
among gamers. Many first-person-shooter and Minecraft players, for instance, leverage Hamachi to
allow for easy LAN gaming sessions.
Building Your Raspberry Pi Proxy Server
As I said earlier, a proxy server is a computer that stands in place of another computer in terms of
making web requests. Actually, that’s what the noun proxy means in the first place.
Besides providing confidentiality to hosts located behind the proxy server, the other benefit of the
proxy service is that of caching. In other words, proxy servers can boost your browsing speed by
serving up web pages cached locally instead of having to fetch the content from the source every time.
Nowadays you don’t need specialized hardware and software to set up a proxy server. In this chapter
we use the free and open source Privoxy (pronounced prih-VOX-ee from http://privoxy.org). Privoxy
is fast, easy to configure, and flexible. However, you should be aware that Privoxy is a non-caching
HTTP proxy, which is fine because the goal here is confidential, restriction-free web browsing, not
necessarily a performance boost.
Before you undertake the following procedure, make a note of the 25.x.y.z IP address that Hamachi
reserved for your Raspberry Pi. You use that IP address as the proxy server endpoint address.
Note: What Does 25.x.y.z Mean?
As it happens, LogMeIn owns at least a portion of the 25.0.0.0/8 IPv4 address space.
Thus, the Hamachi service can dish out globally unique IP addresses to its customers within
this range. You might recall that all hosts on the same IP subnet can communicate directly
with each other.
Task: Installing and Configuring Privoxy Raspberry Pi
In this procedure, you get Privoxy up and running on your Raspberry Pi. As you would
expect, you should perform the following steps from a Terminal session on your Pi.
1. Establish an SSH session to your Raspberry Pi and put your shell session in the root user
context.
sudo bash
2. Download and install Privoxy from your default software repositories:
apt-get install -y privoxy
3. You need to make a couple tweaks to the Privoxy configuration file.
nano /etc/privoxy/config
4. Use the nano keyboard shortcut Ctrl+W to search for the string listen-address. When you
find it (you’ll have to scroll past a few screens of documentation before you get to the
uncommented value), edit the line like so:
listen-address 25.x.y.z:8118
5. Substitute your Raspberry Pi’s actual Hamachi IP address for the example given here.
6. Save your work, close the file, and restart the Privoxy service.
service privoxy restart
Testing the Configuration
Alrighty then! You have your VPN and proxy all set up and ready to test. Sit down at your desktop
computer and turn on your Hamachi network. Verify that your Raspberry Pi also shows up in your
Hamachi Control Panel.
Open your web browser and navigate to the following website:
http://privoxy.org/config
The resulting configuration page should say Privoxy is not being used. This is an expected result
because you haven’t configured your desktop PC to route HTTP web traffic through your Raspberry
Pi proxy. You can see what this page looks like in Figure 17.6.
FIGURE 17.6 The Privoxy config page tells you instantly whether or not your browser session is
being proxied.
Now point your browser to the IP Info Database (http://is.gd/23sxDf) or an equivalent site and verify
your system’s public IP address and geolocation. Of course, you need to do this from an IP
address/location different from where your Raspberry Pi is located.
Fortunately, I have some computers located in different areas of the United States. To that point, I
show you the before proxy information for my Windows 7 workstation, located in Columbus, Ohio, in
Figure 17.7.
FIGURE 17.7 My “pre Proxy” IP address has my workstation located in Columbus, Ohio.
Now you need to configure your web browser to use a proxy server. For this example I’ve used
Internet Explorer, but here are some references to online tutorials to perform this action on other
popular browsers:
Chrome (Windows, OS X): http://is.gd/RB2WYa
Chrome (Android): http://is.gd/XRoYeS
Firefox: http://is.gd/oTyHmD
Safari (OS X): http://is.gd/9cZgje
Safari (iOS): http://is.gd/znmAwg
Opera: http://is.gd/XI3KJ9
Task: Pointing Your Workstation Computer at Your Pi Proxy
This task assumes that we are working from a Windows 7 or Windows 8 computer.
1. Open up the Internet Explorer web browser and open the gear menu in the upper right of
the window. Next, click Internet Options.
2. In the Internet Properties dialog box, open the Connections tab and then find and click the
LAN Settings button. I show you both dialog boxes in Figure 17.8.
FIGURE 17.8 The process of configuring a web browser to tunnel traffic through a proxy is
about the same regardless of the application or OS platform.
3. Under Proxy Server, select the option Use a proxy server for your LAN and enter your
Raspberry Pi’s Hamachi IP address. Make sure to use 8118 as the port number.
4. Click OK out of all dialog boxes and restart your browser.
Go back to the IP Info DB website and recheck your IP address and location. You
should find that the site reports your IP address and geolocation as that of your home
network (where your Raspberry Pi proxy server is located, in other words). I show you this
in Figure 17.9.
FIGURE 17.9 My workstation’s “post Proxy” address shows it as originating in Nashville,
Tennessee, where my Raspberry Pi resides.
For the duration of your web browsing session, you not only mask your workstation’s IP address
location, but you also provide for data confidentiality because all traffic flowing within the Hamachi
VPN is fully encrypted.
Just for grins, I figured that you would be interested in the “What’s My IP” type websites. To that end,
here are a few more for you to try out and experiment with (some expose an API that is scriptable!):
What is My IP?: http://is.gd/uIhmYK
IP Chicken: http://is.gd/WRPm0J
WTF is My IP?: http://is.gd/a6ARdP
IP2Location: http://is.gd/S1cd19
Speaking of Geolocation...
Do you remember in Chapter 4, “Installing and Configuring an Operating System,” when I briefly
mentioned the Rastrack website? Let’s spend just a couple minutes discussing it now, as its operation
relates somewhat to privacy and security issues.
Rastrack (http://is.gd/sGStJL) is a map that shows the general location of Raspberry Pis throughout
the world. Of course, only Pi owners who volunteer this information contribute to the map. Also Ryan
Walmsley (http://is.gd/lUb70X), a British high-school student who created the site, has no
verification scheme in place to prove that registrations come from actual Raspberry Pis. You can see
what the Rastrack map looks like as of this writing in Figure 17.10.
FIGURE 17.10 The Rastrack map, as of summer 2013
Given the context of this chapter, you might wonder if Rastrack uses IP address geolocation to
determine the physical location of your Pi. The answer is no and yes.
Ryan has not specifically coded any geolocation into Rastrack. Instead, he plots user-provided data
through the Google Maps API, which gives a general location based on a combination of your ISP’s
IP addressing metadata and the address information you provide to the site.
For instance, check out Figure 17.11. My Zip code 37221, and the map result places my Pi directly in
the middle of that Zip code zone, not necessarily anywhere near the Pi’s actual location on the globe.
FIGURE 17.11 The Rastrack map plots location based on user-specified information and Google
Maps metadata.
Why would you want to add your Raspberry Pi to Rastrack? Well, I’ve found that the Raspberry Pi
community is a passionate one and folks are eager to share information with each other. It’s pretty
cool to see all the Raspberry Pi devices registered in most countries in the world.
By contrast, any time you expose computer system details to the public, that opens the door for a
malicious user to think, “Aha! There are four Raspberry Pis in my neighborhood. Maybe I’ll try some
reconnaissance and see if I can penetrate their networks!” Sad to say, this kind of activity is much
more common than you might think.
Can I Haz Copey Editr?
I’m sure it is just the “author” in me, but I was appalled by the many egregious spelling
and grammatical errors present on the Rastrack site—and the Add Your Pi! pages in
particular. I had to remind myself that this web app was created by a high school student.
At any rate, perhaps Ryan will correct these mistakes by the time you access the site.
Task: Adding Your Raspberry Pi to the Rastrack Database
Should you decide to add your Raspberry Pi to the worldwide Rastrack database, I
offer you the following procedure to help you accomplish your goal.
1. From LXDE on your Pi, open up Midori or your favorite web browser and browse to the
Rastrack website:
http://rastrack.co.uk/
2. Click Click here to add your Pi and fill out the form by providing the following details:
Name or Nickname: Required.
Twitter Username: Optional.
Date of Arrival: Required. Use format YYYY-MM-DD.
Email: Required. This field is important because it serves as your ID if you ever want to
edit or remove your Pi location registration.
Location: Required. I had the best luck by providing a postal (Zip) code here.
Human Verification: Required. This field is meant to prevent spam bots from submitting
erroneous registrations. The technology used here and in many websites is called
Completely Automated Public Turing Test to tell Computers and Humans Apart
(CAPTCHA, and no, I’m not kidding). You can learn more about CAPTCHA by visiting
http://is.gd/zsKPcW.
If you need to change your registration details or remove your listing, visit the Rastrack
site and click the Click here to change your details link. You are asked to provide the email
address you used when you originally registered your Pi. You’ll be sent an email message
with a key and link to change your registration details.
Building a Raspberry Pi Tor Proxy
Have you heard of The Onion Router (Tor) network? Tor (http://is.gd/tQul4e) is free software as
well as an open network that provides users with excellent privacy by routing network traffic through
a series of distributed Tor routers, none of which has knowledge of the complete end-to-end path of
the communications.
Take a look at Figure 17.12, and I’ll walk you through the basic mechanics of Tor.
FIGURE 17.12 Schematic of the Tor anonymity network.
The client software running on your computer selects a random path through the Tor network for
every data packet that is transmitted. The intermediate Tor routers, which are formally called nodes,
have no knowledge of the full routing path; they basically forward each packet to a randomly selected
next hop address and forget about the transmission.
As I said earlier, the exit node is the vulnerable point in the Tor network because it is possible for a
malicious individual to configure his computer as a Tor exit node, sniff unencrypted traffic from the
Tor network, and glean potentially privacy-busting data about the data transmission originator.
The good news is that you have to take deliberate configuration steps to become a Tor exit node. For
the vast majority of Tor users, their data is safe so long as they practice good web browsing hygiene
such as enabling SSL and not leaking any personal information via web forms.
Routing select web traffic through the Tor network gives you the following advantages:
Your source IP address and geolocation are completely obfuscated to anybody who tries to
execute a man-in-the-middle attack on your computer.
All data transmitted within the Tor network is encrypted. However, unless you are using
HTTPS or another encryption technology, your unencrypted data that enters the Tor network
emerges from that network equally unencrypted.
The main disadvantage to Tor is the same as what we see with some corporate VPNs; namely,
tremendously slow speeds. You do not want to use Tor for ordinary web browsing, trust me. Network
traffic through the Tor network moves slower than I remember browsing with a 14.4Kbps analog
modem in the mid-1990s. Don’t even think of sending or receiving binary files over the Tor
connection. Doing so is disrespectful to the people who make up the Tor community. Instead, use the
Tor network only when privacy is your principal concern.
In this section I want to give you the high-level overview for configuring your Raspberry Pi as a Tor
proxy. Due to space constraints (the actual step-by-step is fairly involved), I’m going to turn you over
to Adafruit, which worked up a couple wonderful tutorials on how to enact this configuration:
Adafruit Raspberry Pi Wireless Access Point Tutorial: http://is.gd/MlMNEP
Onion Pi Tutorial: http://is.gd/7EHgqx
Note: What Does an Onion Have to Do with an Anonymous Network?
The onion is not only the logo icon for the Tor project, but also represents the network
itself and a non-public DNS top-level domain. As it happens, you can build your own web
server that exists entirely within the Tor (onion) network. These so-called hidden service
sites use special DNS addresses called onion URLs that end with the .onion domain.
You can view a schematic of the Raspberry Pi Tor proxy in Figure 17.13.
FIGURE 17.13 Schematic showing how you can set up your Raspberry Pi Tor proxy and
wireless access point
As you can see, you can install open source software to configure your Raspberry Pi as a wireless
access point. Because the Pi is multi-homed (that is to say, it has more than one network interface),
you can use the Wi-Fi connection as your entry point for Tor communications and the wired Ethernet
connection as your gateway to the Internet.
Therefore, the workflow for using this special Pi is as follows:
You bring your Onion Pi device to a hotel, conference, or other location and plug the Ethernet
interface into a live Internet connection.
You then use your laptop or mobile device to join your personal Onion Pi Wi-Fi network
whenever you need Tor-protected browsing.
Part IV: Hacking the Raspberry Pi
Chapter 18. Raspberry Pi Overclocking
If you’ve made it this far into the book, then you’ve probably given your Raspberry Pi quite a
workout. Accordingly, you are well aware of the hardware limitations of the diminutive Model A or
Model B board.
How can you squeeze more performance out of your Pi? Can you do so safely? How does
overclocking affect the limited warranty offered by Farnell and RS Components?
In this chapter I begin with a comprehensive tutorial on how to overclock your Raspberry Pi. Of
course, you first need to understand exactly what overclocking means. Next, I give you everything you
need to know to improve the performance of your Pi while staying within the bounds of warranty. Of
course, if you want to go outside the bounds, then that’s okay, too. Just don’t knock on my door when
something goes wrong!
I also address how to adjust the split between CPU and GPU memory allocation. For instance, if you
work from the shell prompt, there is no reason to allocate any more RAM than is absolutely necessary
to the GPU. On the other hand, if you have your Pi set up as a RaspBMC media center, then just the
opposite may be true.
Let’s get to work!
What Is Overclocking?
Overclocking refers to forcing a computer component, such as the central processing unit (CPU), to
operate faster than its default clock frequency.
The Pi’s ARM ARM1176JZF-S processor operates with the following default frequencies:
CPU: 700 million clock cycles/second (MHz)
GPU: 250MHz
SDRAM: 400Mhz
The Raspberry Pi is capable of processing one command per clock cycle, which means that the CPU
processes 700 million instructions per second, the GPU processes 250 million, and the RAM chip
400 million. Those are a lot of instructions!
If you can force the Raspberry Pi to increase the clock rate for the CPU, GPU, or RAM, then it
follows logically that the Pi will run faster by executing more commands per unit time. True enough.
The downside to the overclocking situation is heat. Hopefully it makes sense to you that an
overclocked SoC requires more power and therefore generates more heat than an SoC running at its
defaults.
You remember that the ordinary operating voltage of the Pi is 5V and that the typical current draw is
between 700 and 1400 mA.
Note: Power to the Pi
All this talk of overclocking and performance improvements assumes that you provide
the Pi with steady, reliable power. To do that you need to make sure you use a quality
power supply before attempting to overclock your board.
Although overclocking in itself is reasonably safe, overvolting on the other hand will likely reduce
the lifetime of your Pi by gradually degrading the SoC’s transistors and logic gates.
Some enthusiasts, myself included, aren’t overly worried about slightly reducing the lifetime of our
Pis because the cost of replacement is eminently reasonable, but it’s a factor you should consider
nonetheless.
Warranty Implications of Overclocking
The following is a relevant extract from Farnell’s Raspberry Pi Limited Warranty
(http://is.gd/jF9ELL):
What does this limited warranty NOT cover?
Newark element14 has no obligation to repair, replace, or provide refunds in the following
instances:
If the alleged defect arises because Customer has altered or repaired the Raspberry Pi
without the prior written consent or authorization of Newark element 14
As I get to shortly, the Raspberry Pi Foundation does offer overclocking modes that do not void the
warranty. Using these modes still qualifies you for a refund from the distributor.
The salient question on the mind of the enthusiast, is “How would Farnell or RS Components know if
I tried to overclock or overvolt my Pi?”
As it happens, the Foundation programmed the SoC such that a so-called sticky bit is turned on when
any of the following conditions is detected:
You set the temperature limit to a value above 85 degrees Celcius.
You force Turbo Mode or disable the current limit and set an overvoltage.
You can get a detailed description of exactly which overclocking options void the warranty on the
eLinux.org website: http://is.gd/1HcNWb.
More about the sticky bit: As I said, this is a flip flop circuit that, once tripped, remains in place and
is used by the distributors to detect whether you set your Pi to warranty-breaking settings.
You can tell if your Pi’s sticky bit is set by running the following command from a shell prompt and
reviewing the Revision value:
cat /proc/cpuinfo
The word on the street is that any Revision value above 1000 means that your sticky bit is set and you
do not qualify for a refund from the distributor.
Take a look at Figure 18.1. The first output shows my original Pi settings, which fall within the
bounds of the warranty spec. The second output shows that the sticky bit has been tripped as a result
of my setting an illegal overvoltage value.
FIGURE 18.1 This output shows my Raspberry Pi both pre and post-sticky bit.