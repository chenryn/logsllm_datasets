K-server without leaking the information to the V-server,
Charlie re-encrypts both Ks and C(cid:1)
with the K-server’s pub-
lic key pk as αs ← Epk(Ks) and e(cid:1)
c ← Epk(C(cid:1)), respec-
tively.
(hidden in the encryp-
tion e(cid:1)
c) is indeed the one returned by the V-server, Char-
lie constructs a noninteractive zero knowledge proof π that
H(Dpk(e(cid:1)
c, and π back
to the V-server:
c)) = hc. Charlie then submits αs, e(cid:1)
In addition, to prove that C(cid:1)
Charlie → V-server : αs, e(cid:1)
c, π
Step 4: The V-server ﬁrst veriﬁes that the proof π pre-
sented by Charlie is true based on the received e(cid:1)
c and the
stored hc. It then creates a rendezvous number Rs, and reg-
isters the entry (cid:1)Charlie, Rs(cid:2) for this query locally:
V-server : (cid:1)Charlie, Rs(cid:2)
The V-server then forwards αs and e(cid:1)
taching the rendezvous number Rs:
c to the K-server, at-
V-server → K-server : αs, e(cid:1)
c, Rs
Step 5: On reception of the query, the K-server decrypts
c to obtain both the queried key Ks ← Dpk(αs)
αs and e(cid:1)
and the corresponding client pseudonym C(cid:1) ← Dpk(e(cid:1)
c).
The K-server then performs both search and access permis-
sion check. Only those query results that are allowed to be
accessed by Charlie’s pseudonym C(cid:1)
, e.g., Ri, will be re-
turned as r ← (cid:1)Rs, Ri(cid:2) to the V-server:
K-server → V-server : r
Step 6: Finally, the V-server looks up the values based
on the K-server returned rendezvous numbers, and sends
the query results γ ← (cid:1)Alice, Vi(cid:2) back to Charlie:
V-server → Charlie : γ
Discussion
By verifying the noninteractive zero-knowledge proof π
that H(Dpk(ec)) = hc, the V-server is convinced that a
client is using the pseudonym sent to it by the V-server when
the client submits a query. The form of this proof depends
on the form of encryption and the one-way function H, but
certain such functions permit π to be constructed at a com-
putational expense roughly equal to the expense of a digi-
tal signature. In one example, the K-server selects a cyclic
group G in which both the Decisional Difﬁe-Hellman prob-
lem and computing square roots are intractable, and utilizes
Shoup-Gennaro encryption [29] in G and one-way function
H : G → G deﬁned by H(x) = x2; see, e.g., [25, Sec-
tion 5.2] for details.
Note access control checking is only performed on pri-
vate data. For public data that can be searched by anony-
mous clients, Alice simply tags them as “public” at both the
K-server and the V-server for better search performance.
To support groups, Alice can create a pseudonym G(cid:1)
for
each group G in ACL speciﬁcation. For each member Ci
in G, Alice encrypts the group pseudonym G(cid:1)
using Ci’s
public key pci, and obtains the encryption ei ← Epci
(G(cid:1)).
Finally, Alice computes the hash hi ← H(G(cid:1)), and sends
mi = (cid:1)Ci, ei, hi(cid:2) to the V-server during the data registra-
tion, so that Ci can use G(cid:1)
to perform search later:
Alice → V-server : mi
To revoke a client Ci’s access rights on a particular key-
value pair (cid:1)Kj, Vj(cid:2), Alice simply removes Ci’s pseudonym
C(cid:1)
i from the corresponding ACL(cid:1)
j at the K-server. Such
permission revocation can take effect immediately without
being noticed by the client at all.
Since each owner selects client pseudonyms indepen-
dently, a client may need to decrypt multiple different
pseudonyms from different owners during the query stage.
To reduce the query overhead, pseudonyms can be cached
at the client side in the ﬁrst query, and reused at subsequent
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006queries to avoid the ﬁrst two steps in the query stage. Alter-
natively, each client can select a unique pseudonym (e.g., a
user ID), and register it at different owners for permission
speciﬁcation.
data values. Therefore, in real deployment, the K-servers
should not have access to the network packets routed toward
the V-servers, for example, not be conﬁgured on transit net-
work backbones.
5.3 User Authentication
For inter-operability, the Peekaboo user authentication is
based on conventional digital signatures (e.g., [9]). To de-
fend against replay attacks, we use timestamps and assume
loosely synchronized clocks. When submitting a query
to the V-server in step 3, the client Charlie generates a
timestamp T , signs T and the rest of query, and submits the
following message including the signature to the V-server:
Charlie → V-server
: Q, σ
where Q = {T, αs, e(cid:1)
Epk(C(cid:1)). σ is the digital signature of Q.
c, π}. Here αs ← Epk(Ks) and ec ←
On reception of the message, the V-server veriﬁes the
signature σ using Charlie’s public key, which can be ob-
tained from a public key infrastructure. The V-server then
processes the query using the procedures described above.
In summary, the revised Peekaboo protocol with access
control and user authentication is illustrated in Figure 7.
Alice: Registration stage  
α
←Epk(Ki, C’)
i
←Epc(C’),  hc
ec
M←{(cid:1)Charlie, ec, hc
←H(C’)
(cid:2)}
α
i, Vi, M
V-Server
K-Server
Store (cid:1)Alice,Vi, Ri, M(cid:2)
(cid:2)}
M = {(cid:1)Charlie, ec, hc
α
, Ri
i
(cid:127)(cid:1)Ki, C’(cid:2) ← Dpk(α
i)
(cid:2)
(cid:127) Store (cid:1)Ki, C’, Ri
Charlie: Query stage
Ic = Charlie
1. Ic
2. ec, hc
(cid:127) C’ ← Dpc(ec)
(cid:127) ec’ ← Epk(C’), α
← Epk(Ks)
(cid:127) π ← zkp(H(Dpk(e’c)) = hc) 
(cid:127) Q ← {T, α
(cid:127) σ ← sig(Q)
s, ec’, π}
s
3. Q, σ
(cid:127) Charlie ← Ic
(cid:127) Look up “Charlie”
to return ec, hc
s, ec’, π} ← Q
(cid:127) {T, α
(cid:127) Verify σ, π
(cid:127) Store  (cid:1)Charlie, Rs
(cid:2)
4. α
s,ec’,Rs
(cid:1)Alice, Vi
(cid:2) ← γ
6. γ
(cid:127) (cid:1)Ri, Rs
(cid:2) ← r
(cid:127) γ ← (cid:1)Alice, Vi
(cid:2)
5. r
← Dpk(α
(cid:127)Ks
s)
(cid:127)C’ ← Dpk(e’c)
(cid:127)If Ki matches Ks
&& C’ is permitted
r ← (cid:1)R
, R
i
s
(cid:2)
Figure 7. The enhanced protocol with ac-
cess control and user authentication, where
”zkp” is an abbreviation for ”zero knowledge
proof”.
6 Deployment and Vulnerabilities
In this section, we discuss various issues in system de-
ployment, and outline potential malicious attacks that Peek-
aboo is vulnerable to with possible solutions. Completely
addressing these attacks is a topic of ongoing work.
A basic assumption of the Peekaboo search system is that
the K-servers have no information about user identities or
Both the K-servers and the V-servers could misbehave by
producing arbitrary or bogus search results. To detect mis-
behaving servers, we can use both owner-initiated auditing
and client-initiated auditing based on random sampling so
that the more the server misbehaves, the higher the proba-
bility that it will be caught. For server non-repudiation, both
servers can sign their responses in query results.
A more serious threat is server collusion, where the K-
servers and the V-servers cooperate to reconstruct the key-
value pairs registered or searched. One approach is to in-
troduce further layers of indirection by adding auxiliary
servers in the system. Speciﬁcally, we can deploy a chain of
auxiliary servers between a K-server and a V-server to per-
form the basic Peekaboo protocol. A registration request
(cid:1)α, V (cid:2) (α ← Epk(K)) is ﬁrst submitted to a V-server, who
creates a rendezvous number R0 and forwards (cid:1)α, R0(cid:2) to
the ﬁrst auxiliary server in the chain. Each auxiliary server
Ai, on reception of the message, randomly generates a new
rendezvous number Ri to replace the old one Ri−1 in the
message to forward to the next hop server, until the re-
quest ﬁnally reaches the K-server. Similarly, a user query
is also routed incrementally along the server chain from
the V-server to the K-server. Query results are then prop-
agated back in the reverse direction. To tolerate the brute
force collusion of up to t servers in this chain, we need at
least t − 1 auxiliary servers between the K-server and the
V-server. There is thus a balance between privacy and ef-
ﬁciency, and both the data owners and clients can jointly
decide the level of desired privacy.
However, such multi-server protocol is vulnerable to
timing attacks with the collusion between the K-server and
the V-server. For example, both servers could jointly mea-
sure the time needed between the V-server forwarding a
query and the K-server receiving it, or submit queries one
by one to learn who submitted what query. To mitigate
such attacks, we can use solutions from anonymous rout-
ing [4, 31]. For example, each auxiliary server can buffer
and reorder messages within a small time frame.
Finally, Peekaboo servers could perform trafﬁc pattern
analysis to infer popular keys or values by measuring the
frequency of the corresponding rendezvous numbers in
queries or query results. In particular, the V-servers could
tell whether two queries resulted in the same response even
though they have access to neither queries nor query results.
To mitigate this threat, owners can initiate the registration
process frequently in order to update both the rendezvous
numbers and the encodings of values held by the V-servers.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:33:41 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20067 Example Applications and Performance
In this section, we describe an example application of a
ﬁle sharing service to illustrate how Peekaboo can be used
to perform keyword search without loss of user privacy. We
then evaluate the protocol overhead using trace-based ex-
periments and compare its performance with regular cen-
tralized servers.
In a ﬁle sharing system, owners store ﬁles or ﬁle names
at directory servers. Each ﬁle has an owner-assigned lo-
cal ID. Clients submit queries as keywords to the servers.
If the content or the name of a ﬁle matches the query, the
servers return the local ﬁle ID and the corresponding owner
identity (e.g., IP address) as query results. Clients can then
download the ﬁle directly using the local ﬁle ID from the
corresponding ﬁle owner.
In the Peekaboo system registration stage, owners regis-
ter the ﬁle names (or ﬁle content) as the keys, and the local
ﬁle IDs as the values at the K-servers and the V-servers, re-
spectively. For each ﬁle, the V-servers randomly generate
unique 128-bit strings as the rendezvous numbers. To sup-
port efﬁcient query search, each V-server computes a hash
based inverted index of rendezvous numbers, whereas each
K-server computes an inverted index table of keywords.
In the query stage, clients submit keywords as the queried
keys, and get a list of matched values represented as the lo-
cal ﬁle IDs and the corresponding ﬁle owner IP addresses.
When advanced queries are supported where matched keys
should be returned in query results, the servers also return
the list of matched ﬁle names (or relevant ﬁle content) en-
crypted by the client-provided one-time encryption key.
We use a Gnutella [15] trace gathered at CMU to con-
duct trace based experiments, and evaluate the system per-
formance using the described ﬁle sharing application in the
following three aspects: (1) the storage costs at both types
of servers, (2) the search latency perceived by clients, and
(3) the overhead of access control and user authentication.
We implemented both types of servers, and evaluate the per-
formance using a single K-server and a single V-server that
communicate via the basic protocol, as described in Sec-
tion 3. Increasing the number of V-servers in the system
would not change either (1) or (3). Because clients commu-
nicate with V-servers in parallel, the search latency should
increase only slightly with multiple V-servers. For com-
parison, we also implemented a regular centralized server
that performs both data registration and query, and repeat
our experiments. All the servers are implemented in C++ in
Linux, running on PIII 550MHz machines with 128 RAM
on a 10BaseT Ethernet LAN. Each data point in the ﬁgures
below is the average of ten runs.
105
104
103
102
)
e
t
y
b
K
(
e
z
s
i
l
e
b
a
t
x
e
d
n
I
101
103
Regular server
V−server
K−server
104
Number of files indexed
105
106
Figure 8. Index table size vs. number of in-
dexed ﬁles
7.1 Storage Costs at Peekaboo Servers
To evaluate the storage costs, we extract ﬁle names and
their owner IP addresses from the search reply messages
in the Gnutella trace, and register them using a fake owner
program simulating different ﬁle owners. Figure 8 shows
the index table sizes of the Peekaboo servers and the regular
centralized server as the function of the number of indexed
ﬁles. We observe that the storage costs increase linearly
as the number of indexed ﬁles increases. The K-server in-
dex table sizes are slightly larger compared with a regular
server, while the V-server index sizes are only about a third
of those of a regular server. In general, the storage costs are
small at both types of Peekaboo servers.
7.2 Search Latency Perceived by Clients
)
s
m
(
y
c
n
e
t
a
l
h
c
r
a
e
s
e
g
a
r
e
v
A
40
35
30
25
20
15