-   `clevis-luks-bind(1)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#building-automatically-enrollable-vm-images-for-cloud-environments_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}使用 NBDE 为云环境构建可自动注册的虚拟机镜像 {.title}
:::
在云环境中部署可自动注册的加密镜像会带来一系列独特的挑战。与其他虚拟化环境一样，建议减少从一个镜像启动的实例数量，以避免共享
LUKS 主密钥。
因此，最佳实践是创建自定义映像，这些映像不在任何公共存储库中共享，为部署有限数量的实例提供了基础。要创建的实例的确切数量应当由部署的安全策略定义，并且基于与
LUKS 主密钥攻击向量相关联的风险容忍度。
要构建启用 LUKS 的自动化部署，应当使用 Lorax 或 virt-install
等系统以及一个 Kickstart 文件，来确保镜像构建过程中主密钥的唯一性。
云环境支持我们在这里考虑的两种 Tang 服务器部署选项。首先，Tang
服务器可以在云环境本身中部署。其次，Tang
服务器可以部署在云外的独立的基础架构上，并且这两个基础架构之间有 VPN
连接。
在云中原生部署 Tang
可以轻松部署。但是，考虑到它与其他系统的密文数据持久性层共享基础设施，因此
Tang 服务器的私钥和 Clevis
元数据可以存储在同一个物理磁盘上。对这个物理磁盘的访问允许密文数据的完全泄露。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
因此，红帽强烈建议在存储数据的位置和运行 Tang
的系统之间保持物理隔离。在云和 Tang 服务器之间的这种隔离可确保 Tang
服务器的私钥不会被意外与 Clevis
元数据组合。如果云基础设施面临风险，它还提供了对 Tang 服务器的本地控制。
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#proc_deploying-tang-as-a-container_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}将 Tang 部署为容器 {.title}
:::
`rhel8-tang`{.literal} 容器镜像为在 OpenShift Container Platform (OCP)
集群或单独的虚拟机中运行的 Clevis 客户端提供 Tang-server 解密功能。
::: itemizedlist
**先决条件**
-   `podman`{.literal} 软件包及其依赖项已安装在系统上。
-   你可以使用 `podman login registry.redhat.io`{.literal} 命令登录到
    `registry.redhat.io`{.literal} 容器目录。如需更多信息，请参阅
    [红帽容器注册表身份验证](https://access.redhat.com/RegistryAuthentication){.link}。
-   Clevis 客户端安装在包含 LUKS 加密卷的系统上，您希望使用 Tang
    服务器自动解锁这些卷。
:::
::: orderedlist
**流程**
1.  `registry.redhat.io`{.literal} 注册表中拉取 `rhel8-tang`{.literal}
    容器镜像：
    ``` screen
    # podman pull registry.redhat.io/rhel8/rhel8-tang
    ```
2.  运行容器，指定其端口，并指定到 Tang 密钥的路径。以上示例运行
    `rhel8-tang`{.literal} 容器，指定端口 [*7500*]{.emphasis}，并指明到
    `/var/db/tang`{.literal} 目录的 Tang 密钥的路径：
    ``` screen
    # podman run -d -p 7500:_7500_ -v tang-keys:/var/db/tang --name tang registry.redhat.io/rhel{ProductNumber}/rhel{ProductNumber}-tang
    ```
    请注意，Tang 默认使用端口 80，但这可能与其他服务冲突，如 Apache HTTP
    服务器。
3.  \[可选\] 为提高安全性，定期轮转 Tang 密钥。您可以使用
    `tangd-rotate-keys`{.literal} 脚本，例如：
    ``` screen
    # podman run --rm -v tang-keys:/var/db/tang registry.redhat.io/rhel{ProductNumber}/rhel{ProductNumber}-tang tangd-rotate-keys -v -d /var/db/tang
    Rotated key 'rZAMKAseaXBe0rcKXL1hCCIq-DY.jwk' -> .'rZAMKAseaXBe0rcKXL1hCCIq-DY.jwk'
    Rotated key 'x1AIpc6WmnCU-CabD8_4q18vDuw.jwk' -> .'x1AIpc6WmnCU-CabD8_4q18vDuw.jwk'
    Created new key GrMMX_WfdqomIU_4RyjpcdlXb0E.jwk
    Created new key _dTTfn17sZZqVAp80u3ygFDHtjk.jwk
    Keys rotated successfully.
    ```
:::
::: itemizedlist
**验证**
-   在包含 LUKS 加密卷的系统上，通过 Tang 服务器自动解锁，检查 Clevis
    客户端是否可以使用 Tang 加密和解密纯文本消息：
    ``` screen
    # echo test | clevis encrypt tang '{"url":"http://localhost:_7500_"}' | clevis decrypt
    The advertisement contains the following signing keys:
    x1AIpc6WmnCU-CabD8_4q18vDuw
    Do you wish to trust these keys? [ynYN] y
    test
    ```
    在 [*localhost*]{.emphasis} URL 上的 Tang 服务器可用并通过端口
    [*7500*]{.emphasis} 进行通信时，上一示例命令在其输出的末尾显示
    `test`{.literal} 字符串。
:::
::: itemizedlist
**其它资源**
-   `podman(1)`{.literal}、`clevis(1)`{.literal} 和
    `tang(8)`{.literal}手册页
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#introduction-to-the-clevis-and-tang-system-roles_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}Clevis 和 Tang 系统角色介绍 {.title}
:::
RHEL 系统角色是 Ansible 角色和模块的集合,可为远程管理多个 RHEL
系统提供一致的配置界面。
RHEL 8.3 引入了 Ansible 角色，用于使用 Clevis 和 Tang
自动部署基于策略的解密(PBD)解决方案。`rhel-system-roles`{.literal}
包中包含了这些系统角色、相关的例子以及参考文档。
`nbde_client`{.literal} 系统角色可让您以自动的方式部署多个 Clevis
客户端。请注意，`nbde_client`{.literal} 角色只支持 Tang
绑定，您目前无法将其用于 TPM2 绑定。
`nbde_client`{.literal} 角色需要已经使用 LUKS 加密的卷。此角色支持将
LUKS 加密卷绑定到一个或多个网络绑定(NBDE)服务器 - Tang
服务器。您可以使用密码短语保留现有的卷加密，或者将其删除。删除密码短语后，您只能使用
NBDE
解锁卷。当卷最初是使用临时密钥或密码进行加密时，这非常有用，您应该在调配系统后删除临时密钥或密码。
如果您同时提供密语和密钥文件，角色将使用您首先提供的那一个。如果找不到任何有效密语或密码，它将尝试从现有的绑定中检索密码短语。
PBD
将绑定定义为设备到插槽的映射。这意味着对同一个设备你可以有多个绑定。默认插槽是插槽
1。
`nbde_client`{.literal} 角色也提供了 `state`{.literal} 变量。使用
`present`{.literal} 值来创建新绑定或更新现有绑定。与
`clevis luks bind`{.literal} 命令不同，您可以使用
`state: present`{.literal}
来覆盖其设备插槽中的现有绑定。`absent`{.literal} 的值会删除指定的绑定。
使用 `nbde_server`{.literal}
系统角色，您可以作为自动磁盘加密解决方案的一部分来部署和管理 Tang
服务器。此角色支持以下功能：
::: itemizedlist
-   轮转 Tang 密钥
-   部署和备份 Tang 密钥
:::
::: itemizedlist
**其它资源**
-   有关网络绑定磁盘加密(NBDE)角色变量的详细参考，请安装
    `rhel-system-roles`{.literal} 软件包，并查看
    `/usr/share/doc/rhel-system-roles/nbde_client/`{.literal} 和
    `/usr/share/doc/rhel-system-roles/nbde_server/`{.literal} 目录中的
    `README.md`{.literal} 和`README.html`{.literal} 文件。
-   关于系统角色 playbook 示例，请安装 `rhel-system-roles`{.literal}
    软件包，并查看
    `/usr/share/ansible/roles/rhel-system-roles.nbde_server/examples/`{.literal}
    目录。
-   有关 RHEL 系统角色的更多信息，请参阅 [RHEL
    系统角色简介](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel#intro-to-rhel-system-roles_getting-started-with-rhel-system-roles){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#using-the-nbde_server-system-role-for-setting-up-multiple-tang-servers_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}使用 nbde_server 系统角色设置多个 Tang 服务器 {.title}
:::
按照以下步骤准备和应用包含您的 Tang 服务器设置的 Ansible playbook。
::: itemizedlist
**先决条件**
-   对一个或多个 [*受管节点*]{.emphasis}
    的访问和权限，这些节点是您要使用 `nbde_server`{.literal}
    系统角色配置的系统。
-   [*对控制节点的访问和权限*]{.emphasis}，这是 Red Hat Ansible Engine
    配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   Red Hat Ansible Engine 已安装。
    -   `rhel-system-roles`{.literal} 软件包已安装。
    -   列出受管节点的清单文件。
    :::
:::
::: orderedlist
**流程**
1.  准备包含 Tang 服务器设置的 playbook。您可以从头开始，或使用
    `/usr/share/ansible/roles/rhel-system-roles.nbde_server/examples/`{.literal}
    目录中的一个 playbook 示例。
    ``` screen
    # cp /usr/share/ansible/roles/rhel-system-roles.nbde_server/examples/simple_deploy.yml ./my-tang-playbook.yml
    ```
2.  在您选择的文本编辑器中编辑 playbook，例如：
    ``` screen
    # vi my-tang-playbook.yml
    ```
3.  添加所需参数。以下 playbook 示例确保部署 Tang 服务器和密钥轮转：
    ``` screen
    ---
    - hosts: all
      vars:
        nbde_server_rotate_keys: yes
      roles:
        - rhel-system-roles.nbde_server
    ```
4.  应用完成的 playbook:
    ``` screen
    # ansible-playbook -i host1,host2,host3 my-tang-playbook.yml
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
在安装了 Clevis 的系统上使用 `grubby`{.literal} 工具来确保 Tang pin
的网络可用：
``` screen
# grubby --update-kernel=ALL --args="rd.neednet=1"
```
:::
::: itemizedlist
**其它资源**
-   如需更多信息，请安装 `rhel-system-roles`{.literal} 软件包，并查看
    `/usr/share/doc/rhel-system-roles/nbde_server/`{.literal} 和
    `usr/share/ansible/roles/rhel-system-roles.nbde_server/`{.literal}
    目录。
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#using-the-nbde_client-system-role-for-setting-up-multiple-clevis-clients_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}使用 nbde_client 系统角色设置多个 Clevis 客户端 {.title}
:::
按照步骤准备和应用包含 Clevis 客户端设置的 Ansible playbook。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`nbde_client`{.literal} 系统角色只支持 Tang
绑定。这意味着您目前无法将其用于 TPM2 绑定。
:::
::: itemizedlist
**先决条件**
-   对一个或多个 [*受管节点*]{.emphasis}
    的访问和权限，这些节点是您要使用 `nbde_client`{.literal}
    系统角色配置的系统。
-   [*对控制节点的访问和权限*]{.emphasis}，这是 Red Hat Ansible Engine
    配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   Red Hat Ansible Engine 已安装。
    -   `rhel-system-roles`{.literal} 软件包已安装。
    -   列出受管节点的清单文件。
    -   您的卷已由 LUKS 加密。
    :::
:::
::: orderedlist
**流程**
1.  准备包含 Clevis 客户端设置的 playbook。您可以从头开始，或使用
    `/usr/share/ansible/roles/rhel-system-roles.nbde_client/examples/`{.literal}
    目录中的一个 playbook 示例。
    ``` screen
    # cp /usr/share/ansible/roles/rhel-system-roles.nbde_client/examples/high_availability.yml ./my-clevis-playbook.yml
    ```