title:Publius: A Robust, Tamper-Evident, Censorship-Resistant, and Source-Anonymous
Web Publishing System
author:Marc Waldman and
Aviel D. Rubin and
Lorrie Faith Cranor
USENIX Association
Proceedings of the
9th USENIX Security Symposium
Denver, Colorado, USA
August 14 –17, 2000
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
© 2000 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Publius: A robust, tamper-evident, censorship-resistant web
publishing system
Marc Waldman
Computer Science Dept.
New York University
PI:EMAIL
Aviel D. Rubin
AT&T Labs–Research
PI:EMAIL
Lorrie Faith Cranor
AT&T Labs–Research
PI:EMAIL
Abstract
We describe a system that we have designed and im-
plemented for publishing content on the web. Our pub-
lishing scheme has the property that it is very diﬃcult
for any adversary to censor or modify the content. In
addition, the identity of the publisher is protected once
the content is posted. Our system diﬀers from others
in that we provide tools for updating or deleting the
published content, and users can browse the content in
the normal point and click manner using a standard
web browser and a client-side proxy that we provide.
All of our code is freely available.
1
Introduction
The publication of written words has long been
a tool for spreading new (and sometimes controver-
sial) ideas, often with the goal of bringing about so-
cial change. Thus the printing press, and more re-
cently, the World Wide Web, are powerful revolution-
ary tools. But those who seek to suppress revolutions
possess powerful tools of their own. These tools give
them the ability to stop publication, destroy published
materials, or prevent the distribution of publications.
And even if they cannot successfully censor the pub-
lication, they may intimidate and physically or ﬁnan-
cially harm the author or publisher in order to send
a message to other would-be-revolutionaries that they
would be well advised to consider an alternative oc-
cupation. Even without a threat of personal harm,
authors may wish to publish their works anonymously
or pseudonymously because they believe they will be
more readily accepted if not associated with a per-
son of their gender, race, ethnic background, or other
characteristics.
Quotations about the Internet’s ability to re-
sist censorship and promote anonymity have become
nearly cliche. John Gillmore’s quote “The Net treats
censorship as damage and routes around it” has been
interpreted as a statement that the Internet cannot
be censored. And Peter Steiner’s famous New Yorker
cartoon captioned “On the Internet, nobody knows
you’re a dog” has been used to hype the Internet as
a haven of anonymity. But increasingly people have
come to learn that unless they take extraordinary pre-
cautions, their online writings can be censored and the
true identity behind their online psuedonyms can be
revealed.
Examples of the Internet’s limited ability to resist
censorship can be found in the Church of Scientol-
ogy’s attempts to stop the online publication of doc-
uments critical of the Church. Since 1994 the Church
has combed the Internet for documents that contain
what they describe as Church secrets. Individual au-
thors, Internet service providers, and major newspa-
pers such as The Washington Post, have had to defend
their publication of excerpts from Church documents
(some of them fewer than 50 words) in court. The
Church has used copyright and trademark law, intim-
idation, and illegal searches and seizures in an attempt
to suppress the publication of Church documents [13].
In 1995 the Church convinced the Finnish police to
force Julf Helsingius, the operator of anonymous re-
mailer anon.penet.ﬁ, to reveal the true name of a user
who had made anonymous postings about the Church.
When the Church tried to obtain the names of two
more users the following year, Helsingius decided to
shut the remailer down [16].
The U.S. Digital Millennium Copyright Act, estab-
lished to help copyright owners better protect their
intellectual property in an online environment, is also
proving to be yet another useful tool for censors. The
Act requires online service providers to take down con-
tent upon notiﬁcation from a copyright owner that
the content infringes their copyright. While there is a
process in place for the content owner to refute the in-
fringement claim, the DMCA requires the online ser-
vice provider to take down the content immediately
and only restore it later if the infringement claim is
not proven to be valid.
We developed Publius in an attempt to provide a
Web publishing system that would be highly resistant
to censorship and provide publishers with a high de-
gree of anonymity. Publius was the pen name used
by the authors of the Federalist Papers, Alexander
Hamilton, John Jay, and James Madison. This collec-
tion of 85 articles, published pseudonymously in New
York State newspapers from October 1787 through
May 1788, was inﬂuential in convincing New York
voters to ratify the proposed United States constitu-
tion [17].
1.1 Design Goals
Nine design goals were important in shaping the
design of Publius.
Censorship resistant Our system should make it
extremely diﬃcult for a third party to make
changes to or force the deletion of published ma-
terials.
Tamper evident Our system should be able to de-
tect unauthorized changes made to published
materials.
Source anonymous There should be no way to tell
who published the material once it is published
on the web. (This requires an anonymous trans-
port mechanism between publishers and web
servers.)
Updateble Our system should allow publishers to
make changes to their own materials or delete
their own materials should they so choose.
Deniable Since our system relies on parties in ad-
dition to the publisher (as do most publishing
systems, online and oﬄine), those third parties
should be able to deny knowledge of the content
of what is published.
Fault tolerant Our system should still work even if
some of the third parties involved are malicious
or faulty.
Persistent Publishers should be able to publish ma-
terials indeﬁnitely without setting an upfront
expiration date.
Extensible Our system should be able to support
the addition of new features as well as new par-
ticipants.
Freely available All software required for our sys-
tem should be freely available.
2 Related work
For the purposes of this paper, current Web
anonymizing tools are placed into one of two cate-
gories. The ﬁrst category consists of tools that at-
tempt to provide connection based anonymity – that
is the tool attempts to hide the identity of the indi-
vidual requesting a particular Web page. The second
category consists of tools that attempt to hide the
location or author of a particular Web document. Al-
though Publius falls into the latter category we brieﬂy
survey connection based anonymity tools as they can
be used in conjunction with Publius to further protect
an author’s anonymity.
2.1 Connection Based Anonymity Tools
The Anonymizer (http://www.anonymizer.com)
provides connection based anonymity by acting as
a proxy for HTTP requests. An individual wishing
to retrieve a Web page anonymously simply sends
a request for that page to the Anonymizer. The
Anonymizer then retrieves the page and sends it back
to the individual that requested it.
LPWA [9], now known as Proxymate,
is an
anonymizing proxy that also oﬀers a feature that can
automatically generate unique pseudonymous user
names (with corresponding passwords) and email ad-
dresses that users can send to Web sites. Every
time a user returns to a particular Web site, the
same pseudonyms are generated. The functionality
of the anonymizing proxy is very similar to that of
the Anonymizer.
Several anonymity tools have been developed
around the concept of mix networks [5]. A mix net-
work is a collection of routers, called mixes, that use
a layered encryption technique to encode the path
communications should take through the network. In
addition, mix networks use other techniques such as
buﬀering and message reordering to further obscure
the correlation between messages entering and exit-
ing the network.
Onion Routing [18] is a system for anonymous and
private Internet connections based on mix networks.
An Onion Routing user creates a layered data struc-
ture called an onion that speciﬁes the encryption al-
gorithms and keys to be used as data is transported
to the intended recipient. As the data passes through
each onion router along the way, one layer of encryp-
tion is removed according to the recipe contained in
the onion. The request arrives at the recipient in plain
text, with only the IP address of the last onion-router
on the path. An HTTP proxy has been developed
that allows an individual to use the Onion Router to
make anonymous HTTP requests.
Crowds [19] is an anonymity system based on the
idea that people can be anonymous when they blend
into a crowd. As with mix networks, Crowds users
need not trust a single third party in order to maintain
their anonymity. Crowds users submit their requests
through a crowd, a group of Web surfers running the
Crowds software. Crowds users forward HTTP re-
quests to a randomly-selected member of their Crowd.
Neither the end server nor any of the crowd members
can determine where the request originated. The main
diﬀerence between a mix network and Crowds is in the
way paths are determined and packets are encrypted.
In mix networks, packets are encrypted according to
a pre-determined path before they are submitted to
the network; in Crowds, a path is conﬁgured as a re-
quest traverses the network and each crowd member
encrypts the request for the next member on the path.
Crowds also utilizes eﬃcient symmetric ciphers and
was designed to perform much better than mix-based
solutions.
The
Freedom
anonymity
system
(http://www.freedom.net) provides an anonymous
Internet connection that is similar to Onion Rout-
ing; however, it is implemented at the IP layer rather
than the application level. Freedom supports several
protocols including HTTP, SMTP, POP3, USENET
and IRC. In addition Freedom allows the creation of
pseudonyms that can be used when interacting with
Web sites or other network users.
2.2 Author Based Anonymity Tools
Janus, currently known as Rewebber
(http://www.rewebber.de), is a combination author
and connection based anonymizing tool. With respect
to connection based anonymity, Janus functions al-
most exactly like the Anonymizer; it retrieves Web
pages on an individual’s behalf. Publisher anonymity
is provided by a URL rewriting service. An individual
submits a URL U to Janus and receives a Janus URL
in return. A Janus URL has the following form
http://www.rewebber.com/surf-encrypted/Ek(U )
Where Ek(U) represents URL U encrypted with
Janus’s public key. This new URL hides U’s true value
and therefore may be used as an anonymous address
for URL U. Upon receiving a request for a Janus URL,
Janus simply decrypts the encrypted part of the URL
with its private key. This reveals the Web page’s true
location to Janus. Janus now retrieves the page and
sends it back to the requesting client. Just before
Janus sends the page back to the client each URL,
contained in the page, is converted into a Janus URL.
Goldberg and Wagner [12] describe their implemen-
tation of an anonymous Web publishing system based
on a network of Rewebbers. The Rewebber network
consists of a collection of networked computers, each
of which runs an HTTP proxy server and possesses
a public/private key pair. Each HTTP proxy server
is addressable via a unique URL. An individual wish-
ing to hide the true location of WWW accessible ﬁle
f, ﬁrst decides on a set of Rewebber servers through
which a request for ﬁle f is to be routed. Using an
encryption technique similar to the one used in onion
routing, the URLs of these Rewebber servers are en-
crypted to form a URL U. Upon receiving an HTTP
GET request for URL U, the Rewebber proxy uses
its private key to peel away the outermost encryption
layer of U. This decryption reveals only the identity of
the next Rewebber server that the request should be
passed to. Therefore only the last Rewebber server in
the chain knows the true location of f. The problem
with this scheme is that if any of the Rewebber servers
along the route crashes, then ﬁle f cannot be found.
Only the crashed ﬁle server possesses the private key
that exposes the next server in the chain of Rewebber
servers that eventually leads to ﬁle f. The use of mul-
tiple Rewebber servers and encryption leads to long
URLs that cannot be easily memorized. In order to
associate a meaningful name with these long URLs
the TAZ server was invented. TAZ servers provide
a mapping of names (ending in .taz) to URLs in the
same way that a DNS server maps domain names to
IP addresses. This anonymous publishing system is
not currently operating as it was built as a “proof of
concept” for a class project.
Most of the previous work in anonymous Web pub-
lishing has been done in the context of building a sys-
tem to realize Anderson’s Eternity Service [2]. The
Eternity Service is a server based storage medium that
is resistant to denial of service attacks and destruction
of most participating ﬁle servers. An individual wish-
ing to anonymously publish a document simply sub-
mits it to the Eternity Service along with an appro-
priate fee. The Eternity Service then copies the doc-
ument onto a random subset of servers participating
in the Eternity Service. Once submitted, a document
cannot be removed from the Eternity Service. There-
fore an author cannot be forced, even under threat, to
delete a document published on the Eternity Service.
Below we review several projects whose goals closely
mirror or were inspired by the Eternity Service.
Usenet Eternity [3] is a Usenet news based im-
plementation of a scaled down version of Ander-
son’s Eternity Service. The system uses Usenet
to store anonymously published documents. Doc-
uments to be published anonymously must be for-
matted according to a speciﬁc set of rules that
call for the addition of headers and processing by
PGP and SHA1.
The correctly formatted mes-
sage is then sent to alt.anonymous.messages. A
piece of software called the eternity server is used
to read the anonymously posted articles from the
alt.anonymous.messages newsgroup. The eternity
server is capable of caching some newsgroup articles.
This helps prevent the loss of a document when it is
deleted from Usenet. The problem with using Usenet
news to store the anonymously published ﬁle is that an
article usually exists on a news server for only a short