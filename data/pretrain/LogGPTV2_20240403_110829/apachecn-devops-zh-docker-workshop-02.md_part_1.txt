# 二、Dockerfiles 入门
概观
在本章中，您将学习`Dockerfile`及其指令的形式和功能，包括`FROM`、`LABEL`和`CMD`，您将使用它们来记录应用。本章将为您提供 Docker 映像的分层文件系统的知识，以及在 Docker 构建过程中缓存的使用。本章结束时，您将能够使用通用指令编写一个`Dockerfile`，并使用`Dockerfile`构建定制的 Docker 映像。
# 简介
在前一章中，我们学习了如何通过从 Docker Hub 中提取预构建的 Docker 映像来运行我们的第一个 Docker 容器。虽然从 Docker Hub 获取预构建的 Docker 映像很有用，但我们必须知道如何创建自定义的 Docker 映像。这对于在 Docker 上运行我们的应用非常重要，因为它可以安装新的软件包并定制预构建 Docker 映像的设置。在本章中，我们将学习如何创建自定义 Docker 映像并基于它运行 Docker 容器。
这将使用名为`Dockerfile`的文本文件来完成。该文件由 Docker 可以执行的命令组成，以创建 Docker 映像。使用`docker build`(或`docker image build`)命令从`Dockerfile`创建 Docker 映像。
注意
从 Docker 1.13 开始， **Docker CLI** 语法已经被重组为 Docker **COMMAND SUBCOMMAND** 的形式。例如，`docker build`命令被`docker image build`命令代替。进行这种重组是为了清理 Docker CLI 语法并获得更一致的命令分组。目前，这两种语法都受支持，但旧语法预计将在未来被弃用。
Docker 映像由多层组成，每层代表`Dockerfile`中提供的命令。这些只读层堆叠在彼此之上，以创建最终的 Docker 映像。Docker 映像可以存储在 Docker **注册表**中，例如 **Docker Hub** ，这是一个可以存储和分发 Docker 映像的地方。
Docker **容器**是 Docker 映像的运行实例。使用`docker run`(或`docker container run`)命令，可以从单个 Docker 映像创建一个或多个 Docker 容器。一旦从 Docker 映像创建了 Docker 容器，新的可写层将被添加到 Docker 映像的只读层之上。然后可以使用 Docker ps(或 docker 容器列表)命令列出 docker 容器:
![Figure 2.1: Image layers and a container layer ](img/B15021_02_01.jpg)
图 2.1:映像层和容器层
如上图所示，可以有一个或多个只读层组成 Docker 映像。这些只读层是在 Docker 映像构建过程中为`Dockerfile`中的每个命令生成的。一旦从映像中创建了 Docker 容器，一个新的读写层(称为**容器层**)将被添加到映像层的顶部，并将承载在运行的容器上所做的所有更改。
在本章中，我们将编写我们的第一个`Dockerfile`，从`Dockerfile`构建 Docker 映像，并从我们的自定义 Docker 映像运行一个 Docker 容器。然而，在我们执行这些任务之前，我们必须先定义一个`Dockerfile`。
# 什么是 Dockerfile？
`Dockerfile`是一个文本文件，包含如何创建 Docker 映像的说明。这些命令被称为**指令**。一个`Dockerfile`是一个机制，我们使用它来根据我们的需求创建一个定制的 Docker 映像。
一`Dockerfile`的格式如下:
```
# This is a comment
DIRECTIVE argument
```
一个`Dockerfile`可以包含多行注释和指令。这些行将由**Docker 引擎**在构建 Docker 映像时按顺序执行。像编程语言一样，一个`Dockerfile`也可以包含注释。
所有以#符号开头的语句都将被视为注释。目前`Dockerfiles`只支持单行评论。如果您希望编写多行注释，则需要在每行的开头添加#符号。
然而，与大多数编程语言不同的是，`Dockerfile`中的指令不区分大小写。尽管`DIRECTIVE`不区分大小写，但最好将所有指令都写成大写，以区别于参数。
在下一节中，我们将讨论我们可以在`Dockerfiles`中用来创建自定义 Docker 映像的通用指令。
注意
如果你使用的是 18.04 以后的 ubuntu 版本，会有输入时区的提示。请用`ARG DEBIAN_FRONTEND=non_interactive`抑制提示
# Docker 文件中的通用指令
如前一节所述，指令是用于创建 Docker 映像的命令。在本节中，我们将讨论以下五个`Dockerfile`指令:
1.  `FROM`指令
2.  `LABEL`指令
3.  `RUN`指令
4.  `CMD`指令
5.  `ENTRYPOINT`指令
## 从指令
A `Dockerfile`通常以`FROM`指令开头。这用于指定自定义 Docker 映像的父映像。父映像是我们自定义 Docker 映像的起点。我们所做的所有定制都将应用于父映像之上。父映像可以是来自 Docker Hub 的映像，例如 Ubuntu、CentOS、Nginx 和 MySQL。`FROM`指令采用有效的映像名称和标签作为参数。如果没有指定标签，将使用`latest`标签。
FROM 指令具有以下格式:
```
FROM : 
```
在下面的`FROM`指令中，我们使用带有`20.04`标签的`ubuntu`父映像:
```
FROM ubuntu:20.04
```
此外，如果需要从头开始构建 Docker 映像，我们可以使用基础映像。基础映像(称为暂存映像)是一个空映像，主要用于构建其他父映像。
在下面的`FROM`指令中，我们使用`scratch`映像从头开始构建自定义 Docker 映像:
```
FROM scratch
```
现在，让我们在下一节了解什么是`LABEL`指令。
## 标签指令
`LABEL`是一个键值对，可用于向 Docker 映像添加元数据。这些标签可用于正确组织 Docker 映像。一个例子是添加`Dockerfile`或`Dockerfile`版本的作者姓名。
`LABEL`指令具有以下格式:
```
LABEL =
```
A `Dockerfile`可以有多个标签，遵循前面的键值格式:
```
LABEL maintainer=PI:EMAIL
LABEL version=1.0
LABEL environment=dev
```
或者这些标签可以包含在由空格分隔的一行中:
```
LABEL maintainer=PI:EMAIL version=1.0 environment=dev
```
可以使用`docker image inspect`命令查看现有 Docker 映像上的标签。
运行`docker image inspect :`命令时，输出应如下所示:
```
...
...
"Labels": {
    "environment": "dev",
    "maintainer": "PI:EMAIL",
    "version": "1.0"
}
...
...
```
如这里所示，docker image inspect 命令将使用`LABEL`指令输出在`Dockerfile`中配置的键值对。
在下一节中，我们将学习如何使用`RUN`指令在映像构建期间执行命令。
## 运行指令
`RUN`指令用于在映像构建期间执行命令。这将在现有图层上创建一个新图层，执行指定的命令，并将结果提交给新创建的图层。`RUN`指令可用于安装所需的包、更新包、创建用户和组等。
`RUN`指令采用以下格式:
```
RUN 
```
``指定要在映像构建过程中执行的 shell 命令。一个`Dockerfile`可以有多个符合前面格式的`RUN`指令。
在下面的例子中，我们在父映像之上运行两个命令。`apt-get update`用于更新包库，`apt-get install nginx -y`用于安装 Nginx 包:
```
RUN apt-get update
RUN apt-get install nginx -y
```
或者，您可以通过用`&&`符号分隔多个外壳命令来将它们添加到单个`RUN`指令中。在下面的例子中，我们使用了相同的两个命令，但这次是在一个单独的`RUN`指令中，由一个`&&`符号隔开:
```
RUN apt-get update && apt-get install nginx -y
```
现在，让我们进入下一部分，了解`CMD`指令。
## CMD 指令
Docker 容器通常需要运行一个进程。一个`CMD`指令用于提供这个默认的初始化命令，当从 Docker 映像创建一个容器时将执行该命令。一个`Dockerfile`只能执行一个`CMD`指令。如果`Dockerfile`中有多个`CMD`指令，Docker 将只执行最后一个指令。
`CMD`指令的格式如下:
```
CMD ["executable","param1","param2","param3", ...]
```
例如，使用以下命令回显“`Hello World`”作为 Docker 容器的输出:
```
CMD ["echo","Hello World"]
```
当我们使用`docker container run `命令运行 Docker 容器时，前面的`CMD`指令将产生以下输出(用 Docker 映像的名称替换``):
```
$ docker container run 
Hello World
```
但是，如果我们发送任何带有`docker container run `的命令行参数，这些参数将优先于我们定义的`CMD`命令。例如，如果我们执行以下命令(将``替换为 Docker 映像的名称)，则使用`CMD`指令定义的默认“`Hello World`”输出将被忽略。相反，容器将输出“`Hello Docker !!!`”:
```
$ docker container run  echo "Hello Docker !!!"
```
正如我们所讨论的，`RUN`和`CMD`指令都可以用来执行 shell 命令。这两个指令的主要区别在于，`RUN`指令提供的命令将在映像构建过程中执行，而`CMD`指令提供的命令将在从构建的映像启动容器后执行。
`RUN`和`CMD`指令的另一个显著区别是一个`Dockerfile`中可以有多个`RUN`指令，但只能有一个`CMD`指令(如果有多个`CMD`指令，除最后一个之外的所有其他指令都将被忽略)。
例如，我们可以在 Docker 映像构建过程中使用`RUN`指令安装软件包，一旦从构建的映像启动容器，就可以使用`CMD`指令启动软件包。
在下一节中，我们将了解`ENTRYPOINT`指令，除了重写之外，它提供了与`CMD`指令相同的功能。
## 入口点指令
与`CMD`指令类似，`ENTRYPOINT`指令也用于提供这个默认的初始化命令，当从 Docker 映像创建容器时将执行该命令。`CMD`指令和`ENTRYPOINT`指令的区别在于，与`CMD`指令不同，我们不能使用与`docker container run`命令一起发送的命令行参数来覆盖`ENTRYPOINT`命令。
注意
可以通过`docker container run`命令发送`--entrypoint`标志，以覆盖映像的默认`ENTRYPOINT`。
`ENTRYPOINT`指令的格式如下:
```
ENTRYPOINT ["executable","param1","param2","param3", ...]
```
类似于`CMD`指令，`ENTRYPOINT`指令也允许我们提供默认的可执行文件和参数。我们可以使用`CMD`指令和`ENTRYPOINT`指令来为可执行文件提供额外的参数。
在以下示例中，我们使用`ENTRYPOINT`指令将`"echo"`用作默认命令并将`"Hello"`用作默认参数。我们还使用`CMD`指令提供了`"World"`作为附加参数:
```
ENTRYPOINT ["echo","Hello"]
CMD ["World"]
```
根据我们如何执行`docker container run`命令，`echo`命令的输出会有所不同。
如果我们在没有任何命令行参数的情况下启动 Docker 映像，它将输出如下消息`Hello World`:
```
$ docker container run 
Hello World
```
但是如果我们用额外的命令行参数(例如`Docker`)启动 Docker 映像，输出消息将是`Hello Docker`:
```
$ docker container run  "Docker"
Hello Docker
```
在进一步讨论`Dockerfile`指令之前，让我们从在下一个练习中创建第一个`Dockerfile`开始。
## 练习 2.01:创建我们的第一个文档文件
在本练习中，您将创建一个 Docker 映像，该映像可以打印传递给 Docker 映像的参数，前面是文本`You are reading`。比如你通过`hello world`，它会输出`You are reading hello world`作为输出。如果未提供参数，将使用`The Docker Workshop`作为标准值:
1.  使用`mkdir`命令创建一个名为`custom-docker-image`的新目录。该目录将成为您的 Docker 映像的**上下文**。`Context`是包含成功构建映像所需的所有文件的目录:
    ```
    $ mkdir custom-docker-image
    ```
2.  使用`cd`命令导航到新创建的`custom-docker-image`目录，因为我们将在此目录内创建构建过程中所需的所有文件(包括`Dockerfile`:
    ```
    $ cd custom-docker-image
    ```
3.  在`custom-docker-image`目录中，使用`touch`命令创建一个名为`Dockerfile`的文件:
    ```
    $ touch Dockerfile
    ```
4.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    $ vim Dockerfile
    ```
5.  Add the following content to the `Dockerfile`, save it, and exit from the `Dockerfile`:
    ```