38%
28%
34%
已应用
未应用
不清楚
云服务商
不清楚
使用云服务
但没使用安全产品
没使用云服务
第三方安全厂商
0%
100%
10%
12%
16%
23%
39%
                                        26
受调者对软件应用中使用的开源组件的了解程度：69% 的受调者表示对所生产的软件应用中使用的开源组件有
一定的了解，其中 57% 的受调者表示仅是部分了解，完全了解的受调者占 12%，同时，还有 31% 的受调者表
示对所生产的软件应用中使用的开源组件并不了解。由此可见，虽然大部分人对所使用的的组件有相关了解，
但了解程度有待提高。
受调者组织对软件应用中所使用开源组件的管理情况：75% 的受调者表示所在组织对开发的软件应用中使用开
源组件有相关的管理，其中 58% 的组织只是有一些管理措施，仅有 17% 的组织对使用开源组件的管理措施很
严谨；同时还有 25% 受调者的组织对使用开源组件完全没有管理。由此可见，组织对于开发软件应用中使用
开源组件管理的重视程度相差很大，使用开源组件可以提升一定的效率，但同时也会存在许多风险，这时就需
要组织提升自身对于开源组件安全的重视。
您是否了解所生产的软件应用中使用了哪些开源组件？
您单位对开发的软件应用中使用开源组件的管理情况是？
完全了解
部分了解
不了解
12%
57%
31%
完全没有管理
有一些管理措施
管理措施很严谨
25%
58%
17%
容器、云、和开源管理，是现代软件开发和运行的重要基础设施。基础
设施是应用软件的根基，只关注自开发代码的安全性是不够的，软件
基础设施的安全同样是保障应用安全必不可少的一环。
小结
DevSecOps敏捷安全领导者 01
大家说：
WH    金融服务行业    北京西城区
自动化测试和手工测试都有存在的应用场
景，一步跨越到完全自动化测试也是不现实
的。
                                        29
1.6 维护软件应用存在的挑战
受调者在维护软件应用安全性上遇到的最大挑战：36% 的受调者表示最大的挑战是“不清楚应用安全的具体要
求”，29% 的受调者表示是“不清楚如何保障应用安全”，28% 的受调者选择了“发现应用安全问题不全面”。
可以看到，安全上面临的挑战比较多样，但不清楚要求和方法的占比最高，这再一次说明了安全培训的重要性。
您认为，在维护软件应用安全性上遇到的最大挑战是？
不清楚应用安全的具体要求
迭代速度优先于安全要求
应用安全要求执行不到位
已知安全问题但不会修复
其他
不清楚如何保障应用安全
发现应用安全问题不全面
在安全投入的资源不足
发现应用安全问题太晚
0%
100%
16%
18%
28%
29%
36%
14%
12%
9%
5%
安全永远在路上，安全研发体系建设的探索与实践是一个不断打磨
和演进的过程，其中的问题很多，包含了技术工具融合、方法论运用、
人才培养、跨团队协作等众多挑战。安全培训的加强以及安全工具的
使用，能在很大程度上缓解安全问题带给我们的困难。
小结
2
调查后记
                                        32
本次调查的目的是从 DevSecOps 实践者及潜在实践者的角度，了解 DevOps 及 DevSecOps 在组织中的实践现
状。本次调查结果在一定程度上展示了受调者在 DevSecOps 实践上的所想、所做和挑战。本次调查中 82% 的
受调研对象来自于金融服务和互联网 / 软件行业，样本行业的集中度较高。 从调查结果中我们看到，更快、更
安全的软件应用是许多组织所追求的，但仍有近七成的受调对象完全不了解 DevSecOps，实践者仅有一成。
在保障安全的方式上，有 73% 的技术人员的安全问题获悉渠道是来源于安全管理人员或者黑客攻击纰漏问题
及用户反馈，这使得企业的风险发现及问题处置工作变得非常被动。
这是本报告的联合编制组完成的首次 DevSecOps 调查，在样本分布控制和问卷设置方面，难免出现不成熟之处，
望读者谅解并指教。
希望在 2021 年的调查中，我们能看到 DevSecOps 实践的成熟和进步。有更多的实践者，通过 DevSecOps 帮
助他们实现敏捷安全的目标。
1
DevSecOps发展现状
洞见篇融合了行业安全专家及咨询师的思考和判
断，旨在阐述DevSecOps在当下的发展态势，以及
预测未来的发展趋势，帮助DevSecOps实践者梳
理出前瞻性的实践思路。
1
DevSecOps发展现状
                                        35
随着当下技术的不断发展，软件开发模式也在不断发生变化，从传统的瀑布模式到敏捷开发、再到 DevOps。
DevOps 主张在软件开发生命周期的所有步骤实现自动化和监控，缩短开发周期，增加部署频率。
进入互联网时代之后，企业向 DevOps 快速转型，产品交付质量和速度都在快速提升，而安全资源的缺乏以及
传统安全运营模式，却阻碍了 DevOps 的发展。
Gartner 在 2015 年数据中心和信息安全峰会的调研报告显示，安全已经成为 IT DevOps 发展的阻碍。安全，
作为业务合规避险的基石，必须要积极转型，适应DevOps全新的开发过程。在此趋势下，DevSecOps应运而生，
它是 DevOps 的衍生概念，即将安全嵌入到 DevOps 的流程中，强调安全需要贯穿从开发到运营整个软件生命
周期的每个环节。其核心是在不牺牲安全性的前提下，快速和规模地交付软件产品。
对于大部分开发团队而言，安全是比较孤立的，大部分开发和运维人员没有接受过安全编码和安全事件的培
训，使得安全与开发的过程是分割开的。DevOps 所涵盖的角色包括开发人员和运维人员，并不包括安全人
员。安全作为软件开发的保障性因素，却被排除在外。而 DevSecOps 的出现可以通过固化流程、加强不同
人员协作，通过工具、技术手段将可以自动化、重复性的安全工作融入到研发体系内，让安全及合规作为属
性嵌入到 DevOps 开发运营一体化中，在保证业务快速交付价值的同时实现安全内建，降低 IT 安全风险。在
DevSecOps 的理念下，企业的整个 IT 团队目标统一，即在保障敏捷开发的基础上，共同背负起安全的责任。
虽然国内的 DevSecOps 落地仍处于发展阶段，但很多国内企业已经意识到开发安全的重要性。随着 DevOps
的深度实践，工作流程越来越规范、工具和应用场景也越来越丰富。在此趋势下，国内陆续涌现出一批专注
DevSecOps 的创新安全厂商，新一代的技术方案被越来越多的行业头部用户所采纳。
                                        36
1.1 DevSecOps 现有体系
1.1.1 DevSecOps 概况
传统应用开发流程主要有瀑布模式（Waterfall）和敏捷模式（Agile）。在应用程序的迭代周期较长时，同样较
长的安全工作实施周期是可以被接受的，但随着 DevOps 的大行其道，传统的安全工作方式成为了应用开发速
度的瓶颈，DevSecOps 针对此问题应运而生。
在 DevOps 中，每个人都必须专注于用户，以持续集成和持续交付（CI/CD）的方式快速满足用户的需求。但
是传统上，安全团队专注于以安全为中心的目标，以使组织符合信息安全法规，并降低应用被网络攻击的风
险。如果安全性阻碍了 CI/CD 交付的速度，那么它将影响以业务为中心的软件生产模型的成功。这就是安全
性需要成为 DevOps 团队不可或缺一环的原因。无论是安全中融合 DevOps 的概念，还是在 DevOps 中包含安
全，目标都是以 DevOps 的速度交付安全的软件产品。DevSecOps 的实践方式没有统一的硬性规定。但是，
建立流程模型将主导下一步选择工具和技术以实施流程的步骤。随着安全成为 DevOps 周期的组成部分，有
一种说法将其称为连续安全保障管道。这一持续的安全管道，帮助我们构建了一个流程模型以指导组织实施
DevSecOps。
在建议的流程模型中，持续安全性方法为 DevOps 生态系统提供以下关键服务 :
敏捷软件
开发周期
Agile
计划
验证
发布
监控
安全
开发过程
应用迭代周期
数月到数年
数天到数周
数小时到数天
Waterfall
Agile
DevSecOps
计划
集成
评估
测试
开发
设计
生成
配置
                                        37
安全设计：安全设计可确保 DevOps 团队开发的产品和服务符合安全最佳实践、法规、标准和法律，并实现数
据隐私和保护。这部分工作重点在详细分析安全需求并进行适当设计。此外，威胁建模也是一项重要工作，其
目的在于在编码阶段实施控制。例如，实施控制以防止 Web 应用程序出现 SANS 25 和 OWASP Top 10 漏洞。
高级威胁建模对于关键业务系统预测可能面临的威胁来源，并提前考虑预防和应对措施至关重要。安全编码是
开发实践中重要的一环，通过遵循已建立的威胁模型来降低与安全相关的脆弱性、漏洞数量和集成错误。安全
编码涉及输入验证、会话管理、用户凭证验证、用户访问控制、数据保护和隐私、日志记录、API 安全性、检
测安全性错误配置等方面。 
安全测试：安全测试是 DevSecOps 实践的关键部分，软件程序经过各种方法的测试以保证质量。安全测试不
仅应涉及软件程序，还应关注端到端管道、实时生产系统、软件基础设施、数据库以及中间件，以降低任一环
节的安全攻击风险。在安全测试方面，它与传统的手动测试方法有所不同，尽可能采用自动化是其核心要求。
安全团队必须与开发和测试人员合作，测试软件程序的漏洞，例如 SANS 25 和 OWASP Top 10，以确保软件应
用遵循了安全要求和质量要求。通常情况下，需要依赖 CI/CD 管道自动执行这些测试过程，并且必须在代码部
署至实际生产环境之前通过所有必要的测试用例（涉及功能性和安全性）。静态应用安全测试（SAST）是分
析软件模块的源代码以检测常见的安全缺陷和配置错误所遵循的常见方法。开发人员和安全团队必须合作，将
源代码分析集成到集成开发环境（IDE）设置中，在该集成开发环境中进行编码以开发软件模块。同样，动态
应用安全测试（DAST）和交互式应用安全测试（IAST）主要致力于在发布给生产环境之前，从使用方的角度
检测软件应用程序。开发人员，测试人员和安全团队必须共同协作，以自动方式在 DevOps 管道中实施这些强
制性测试工作。至于剩余的两个方面：安全监控和风险管理，并不特定用于 DevSecOps，而是软件开发中通
常遵循的安全原则，这些原则可以帮助 DevSecOps 提升完整性。 
安全监控：安全监控的重点是对软件基础设施和应用程序中产生的日志进行实时和脱机分析，以了解已发生的
攻击事件从而发现漏洞，并向安全团队发出警报，以响应安全事件或漏洞。当需要调查关键安全事件时，可对
取证工作提供支持。
安全风险管理：风险管理通过采取安全控制措施来分析和缓解安全风险。在 DevSecOps 中，风险管理必须协
同其他工作，以 DevOps 的速度提供支撑，而避免阻碍流程。对 DevSecOps 来说，轻量级方法或快速风险评
估（RRA）通常比传统方法更可取。将组织风险管理流程调整为 DevOps，并尽可能在将应用软件发布到生产
环境之前解决所有适用的威胁。可采用一些广泛使用的威胁建模方法，例如 STRIDE（伪装，篡改，抵赖，信
息泄露，拒绝服务，提升权限）和 DREAD（潜在损失，可复现性，可利用性，受影响的用户，可发现性），
量化将易受攻击的软件发布到实际生产环境中给组织带来的风险。
持续集成
持续交付