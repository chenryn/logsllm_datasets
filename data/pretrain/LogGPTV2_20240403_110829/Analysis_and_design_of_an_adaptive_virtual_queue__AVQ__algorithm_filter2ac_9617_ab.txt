the average queue lengths and the standard deviation are
almost similar. Another important performance measure is
the number of packets dropped due to buﬀer overﬂow in the
system. Since ECN marking is used, we expect the num-
ber of packets lost due to buﬀer overﬂow to be small. In-
deed only 10 out of roughly 250, 000 packets are dropped.
These drops are primarily due to the sudden additional load
brought on by the short ﬂows. Another performance mea-
sure that is of interest is the utilization of the link. The
utilization was observed to be 0.9827, which is very close to
(cid:10)
the desired utilization of 0.98.
We will now compare the AVQ scheme with other AQM
schemes that have been proposed. Since there are many
AQM schemes in the literature, we will compare the AVQ
scheme with a representative few.
In particular, we will
compare the AVQ scheme with
1. Random Early Discard (RED) proposed in [4]. In our
experiments, we use the “gentle” version of RED. Un-
less otherwise stated, the parameters were chosen as
recommended in
http://www.aciri.org/ﬂoyd/REDparameters.txt.
2. Random Early Marking (REM) proposed in [1]. The
REM scheme tries to regulate the queue length to a de-
sired value (denoted by qref ) by adapting the marking
probability. The REM controller marks each packet
with a probability p which is updated periodically (say,
every T seconds) as
p[k + 1] = 1 − φ
−µ[k+1],
where φ is a arbitrary constant greater than one and
µ[k+1] = max(0, µ[k]+γ(q[k+1]−(1−α)q[k]−αqref )),
and α and γ are constants and q[k + 1] is the queue
length at the k+1 sampling instant. Since REM is very
sensitive to φ, we will use the values as recommended
in [1]
Queue length vs time for AVQ
Virtual capacity vs time for AVQ 
)
s
t
e
k
c
a
p
n
i
(
h
t
g
n
e
l
e
u
e
u
Q
90
80
70
60
50
40
30
20
10
0
0
20
40
60
80
100
120
140
160
180
200
Time (in seconds)
700
650
600
550
500
)
d
n
o
c
e
s
/
s
t
e
k
c
a
p
n
i
(
y
t
i
c
a
p
a
C
l
a
u
t
r
i
V
450
0
20
40
60
80
100
120
140
160
180
200
Time (in seconds)
Figure 1: Experiment 1. Queue length vs
time for the AVQ scheme
Figure 2: Experiment 1. Evolution of the
virtual capacity with time for the AVQ
scheme
3. The PI controller proposed in [6]. The PI controller
marks each packet with a probability p which is up-
dated periodically (say, every T seconds) as
p[k + 1] = p[k] + a(q[k + 1] − qref ) − b(q[k] − qref ),
where a > 0 and b > 0 are constants chosen according
to the design rules given in [6].
4. The virtual queue based AQM scheme (GKVQ) pro-
posed by [5].
In this scheme, the link maintains a
virtual queue with ﬁxed capacity ˜C = θC, and buﬀer
size ˜B = θB, where θ < 1, and B is the buﬀer capac-
ity of the original queue. Whenever the virtual queue
overﬂows, all packets in the real queue and all future
incoming packets are marked till the virtual queue be-
comes empty again. Note that this scheme cannot be
used in the case where the link drops the packets in-
stead of marking them because the throughput would
be very bad due to aggressive dropping. As in [5],
we will use θ = 0.90 in all our simulations using the
GKVQ.
Experiment 2:
In this experiment, we compare the performance of the var-
ious AQM schemes assuming that the link “marks” packets
and in the presence of long-lived FTP ﬂows only. The queue
size at the link is 100 packets and we let the desired average
queuing delay be between 30ms and 60ms. As a result, the
desired queue length for the REM scheme and the PI scheme
is set at 50 packets and the minthresh and the maxthresh
for the RED (with gentle turned on) scheme is set at 37 and
75 packets respectively. Recall that the desired utilization
of the link was set to be 0.98 for the AVQ scheme.
Since we use an average queue length of 50 packets for
REM and the PI controller, it is natural to attempt to regu-
late the queue length to 50 for the AVQ scheme also. How-
ever, the AVQ does not directly attempt to control queue
size. Thus, for the AVQ scheme, we drop every packet that
arrives when there are already 50 packets in the real queue.
Note that this is the worst-case scenario for the AVQ scheme,
since when ECN marking is used, the natural primary mea-
sure of performance is packet loss.
We summarize our simulation results below:
• Packet Losses and Link Utilization: The losses incurred
by all the schemes are shown in Figure 3 as a function
of the number of FTP ﬂows. The AVQ scheme has
fewer losses than any other scheme except the GKVQ
even at high loads. The loss rate for GKVQ and AVQ
are comparable; however, the GKVQ marks packets
more aggressively than any other scheme and thus has
lower utilization. Figure 4 shows the utilization of the
link for all the AQM schemes. Note that, the utiliza-
tion of GKVQ is as low as 75%. This can once again
be attributed to the aggressive marking strategy of
GKVQ. RED also results in a poor utilization of the
link. We could have got a higher utilization with RED
if we had increased the minthresh to a larger value, but
we would have increased the packet drops at the link.
REM and PI has an utilization of 1.0 as the queue is
always non-empty. For the AVQ scheme, we required
a desired utilization of 0.98 and we can see that the
AVQ scheme tracks the desired utilization quite well.
Thus, the main conclusion from this experiment is that
the AVQ achieves low loss with high utilization.
• Responsiveness to changing network conditions: We mea-
sure the response of each AQM scheme to diﬀerent
numbers of FTP ﬂows, by letting the number of ﬂows
be constant over a 100 second interval and then in-
creasing it. The average queue length (over each 100
second interval) of each scheme as the number of users
increase is shown in Figure 5. We see from the ﬁgure
that PI and REM have higher average queue lengths
than the desired queue length. On the other hand,
AVQ, GKVQ and RED has smaller queue sizes. This
is due to the fact that it takes REM and PI have
a long transient period before the queue length con-
verges. The average queue length over each 100 second
interval does not delete any transients since one of our
goals in this experiment is to study the responsiveness
of the AQM scheme to load changes.
Experiment 3:
In this section, we will compare the responsiveness of the
AQM schemes when ﬂows are dropped and then introduced
later on. Speciﬁcally, we only compare REM and the PI
controller (since these are only ones among those that we
have discussed that attempt to precisely regulate the queue
length to a desired value) with the AVQ controller. Unless
otherwise stated, all the system parameters are identical to
Experiment 2. The number of FTP connections is 140 at
time 0.0 At time 100, 105 FTP connections are dropped and
at time 150 another 105 FTP connections are established.
We will plot the evolution of the queue size for each of the
AQM scheme. Figure 6 shows the evolution of the queue size
for PI as the ﬂows depart and come. Note that the desired
queue length is 50 packets. We can see that the system takes
some time to respond to either the departure of the ﬂows
or to the new arrivals. On the other hand, the queue in the
AVQ scheme in Figure 7 responds quickly to the removal of
ﬂows at time t = 100, and to the addition of ﬂows at time
150. Figure 8 gives the evolution of the queue sizes for REM.
The desired queue level in the REM scheme is 50 packets
and REM is very slow to bring the queue level to 50 packets.
On removing ﬂows, the queue level drops, but on addition
of new ﬂows, there is a large overshoot in REM.
Experiment 4:
Till now we have been comparing AVQ and PI in the absence
of short ﬂows. However, a large part of the connections in
the Internet comprise of short ﬂows. As a result, it is im-
portant to study the performance of an AQM scheme in the
presence short ﬂows. In this experiment, we will start with
40 FTP connections that remain throughout the length of
the experiment. We also allow the AQM schemes to con-
verge to the optimal solution when there are only 40 FTP
connections in the network. We then introduce short ﬂows
and study the performance of the AQM scheme as the num-
ber of short ﬂows increases. We start with a short-ﬂow ar-
rival rate of 10 per second and gradually increase it to 50
short ﬂows per second. Each short ﬂow transfers 20 packets
using TCP/Reno. The round-trip times of the short ﬂows
are also distributed uniformly between 40ms and 130ms.
We again study the following performance measures:
• Packet losses and Utilization: The losses incurred by
both the schemes are shown in Figure 9. Note that
AVQ has lower drops than the RED, REM and the
PI schemes. GKVQ incurs no signiﬁcant packet drops
(and hence cannot be seen in the ﬁgure) among all
the schemes because of its aggressive marking scheme.
However, as in Experiment 2, the utilization of GKVQ
is poor as seen in Figure 10. We again see that REM
and PI have an utilization of one, while RED and
GKVQ have poor utilization. Once again, the utiliza-
tion of RED can be made higher, but this will come at
the expense of higher average queue lengths and more
packet losses. For the AVQ scheme, the utilization is
actually slightly higher than the desired utilization at
high loads, but this can be attributed to the short-
ﬂows.
• Queue length: The average queue length of each scheme
as the rate of the incoming short-ﬂows short connec-
tions are increased is shown in Figure 11. We see that
the the AVQ controller maintains the smallest queue
length.
Experiment 5:
Till now, we have been assumed that the router marks pack-
ets upon detecting congestion. Instead one can drop pack-
ets when congestion is detected. In this experiment, we use
dropping instead of marking when the links detects an in-
cipient congestion event.
Note that, in the case of marking, the main goal of the
adaptive algorithm was to match the total arrival rate to
the desired utilization of the link. However, in the case of
dropping, the link only serves those packets that are admit-
ted to the real queue. As a result, in the case of dropping,
one adapts the virtual capacity ( ˜C) only when a packet has
been admitted to the real queue, i.e., only the accepted ar-
rival rate is taken into consideration.
We compare RED, REM and PI controller to the AVQ
scheme. We do not use GKVQ as a dropping algorithm
as the number of packets dropped on detecting congestion
would be very high and it would result in negligible through-
put. The buﬀer limit at the link is set to 100 packets and
we require the average queueing delay to lie between 30ms
and 60 ms. The users employ TCP NewReno. All the other
parameters are as in Experiment 2. However, in this case we
simulate the AVQ scheme with both γ = 1.0 and γ = 0.98.
The reason for using γ = 0.98 earlier was to have small losses
to get the most beneﬁt from ECN marking. Since marking is
no longer used, we also study the AVQ under full utilization.
We assume that 40 FTP connections use the link for the
entire duration of the simulation. We allow the respective
AQM schemes to converge and then introduce short-ﬂows at
100s. Short-ﬂows introduced are TCP-RENO sources with
20 packets to transmit. The rate at which short ﬂows arrive
at the link is slowly increased. The average queue length,
and the utilization are shown in Figure 12 and Figure 13.
The total goodput is shown in Figure 14. By goodput, we
mean the number of packets successfully delivered by the
link to the TCP receivers. In general, this could be diﬀerent
from the throughput (which is the total number of packets
processed by the link) due to TCP’s retransmission mecha-
nism. Note that the average queue length, the goodput of
each ﬂow and fairness are the three performance objectives
that one would use to compare diﬀerent AQM schemes when
dropping is employed as a congestion notiﬁcation mecha-
nism.
In practice, we would like an AQM scheme that
maintains a small average queue length with high utiliza-
tion. However, the AQM scheme should not introduce any
additional bias in the rates towards smaller round-trip ﬂows
(TCP by itself introduces a bias towards smaller round-trip
ﬂows and we do not want to add it). In this experiment,
we compared the average queue length and the utilization
at the link of AVQ, RED, REM and PI.
x 104
2
k
n
i
l
e
h
t
t
a
s
p
o
r
d
t
e
k
c
a
p
f
o
r
e
b
m
u
N
1.8
1.6
1.4
1.2
1
0.8
0.6
0.4
0.2
0
20
Packet drops vs number of FTP connections for different AQM schemes
Utilization vs number of FTP connections for different AQM schemes
AVQ 
RED 
PI  
REM 
GKVQ
40
60
80
100
120
140
160
180
Number of FTP connections at the link
1
0.95
0.9
0.85
0.8
0.75
k
n
i
l
e
h
t
t
a
n
o
i
t
a
z
i
l
i
t
U
0.7
20
AVQ 
RED 
PI  
REM 
GKVQ
40
60
80
100
120
140
160
180
Number of FTP connections at the link
Figure 3: Experiment 2. Losses at the link
for varying number of FTP connections for
the diﬀerent AQM schemes
Figure 4: Experiment 2. Achieved Uti-
lization at the link for the diﬀerent AQM
schemes
Average queue length vs number of FTP connections for different AQM schemes
Queue length vs time for PI with 140 FTP connections
100
90
80
70
60
50
40
30
20
10
s
t
e
k
c
a
p
n
i
h
t
g
n
e
l
e
u
e
u
q
e
g
a
r
e
v
A
0
20
PI
AVQ 
RED 
PI  
REM 
GKVQ
100
90
80
70
60
50
40
30
20
10
s
t
e
k
c
a
p
n
i
h
t
g
n
e
l
e
u
e
u
Q
40
60
80
100
120
140
160
180