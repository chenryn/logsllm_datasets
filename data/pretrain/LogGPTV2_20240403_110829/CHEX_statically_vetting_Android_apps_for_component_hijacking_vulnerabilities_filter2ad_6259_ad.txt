graphs in the classic program slicing algorithm [25], we convert the
problem of checking interesting data-ﬂows into an equivalent graph
reachability test problem. We test the connectivity of source-sink
pairs on customized system dependence graphs that only have data-
dependence edges (referred as data-dependence graph, or DDG).
A source-sink pair that is connected on a DDG indicates the exis-
tence of a data-ﬂow from the source to the sink. Compared with the
conventional approaches, this abstraction offers us a better leverage
on the existing IR and avoids unnecessary analysis work, yet still
achieving the same goal.
DDG is constructed in a similar way as system dependence graph
is in [25], but without generating control-dependence edges. Each
node in DDG represents either a normal SSA statement or an ar-
tiﬁcial statement to model inter-procedure parameter passage. An
edge is drawn from node S1 to node S2 only when the variable de-
ﬁned by S1 is directly used by S2. Intra-procedural edges between
scalar variables are drawn with the help of local use-deﬁne chains
implied from the SSA IR. Identifying inter-procedural dependen-
cies among heap variables requires a call graph with a proper de-
gree of context sensitivity and an inter-procedural deﬁnition reach-
ability analysis. We chose a 0-1-CFA call graph builder with the
call-string context sensitivity (i.e. using the calling string to
identify a particular node in the call graph), for its sufﬁcient ac-
curacy and acceptable performance overhead. With the call graph,
regular parameter and return passing edges can be added between
the corresponding callers and callees. The deﬁnition reachability
analysis provides information about (transitive) heap variable ac-
cesses in a method, which is needed to create heap related nodes
and draw edges between them (inter-procedural heap variable ac-
cesses are modeled as artiﬁcial parameters or returns).
Before used for the interesting-ﬂow discovery, a DDG needs to
go through an edge inﬂation process, as a way to model data depen-
dencies that are still missing. Missing edges are resulted from out-
of-scope code (i.e. methods deﬁned outside of the analysis scope).
Thus we need to model the external data-ﬂow behavior of such
code. The modeling can be easily done by means of adding arti-
ﬁcial edges into the DDG, bases on two simple rules: (i) for meth-
ods with returns, the return value is dependent on all parameters
(i.e. drawing edges from each ParameterCaller node to the
ReturnCaller node); and (ii) for return-less methods, the ﬁrst
parameter (i.e. this* for non-static methods) is dependent on all
other parameters, if any (i.e. drawing edges to the deﬁne node of
the ﬁrst parameter from other ParameterCaller). Exceptions
to these rules do exist, but only very few happen frequently enough
that we need to specially handle, such as several methods of strings
and collection types.
With the DDG is generated, searching for interesting ﬂows be-
comes intuitive. CHEX ﬁrst picks two sets of nodes from the
graph, Sstart and Send, where Sstart contains pre-deﬁned sources
(i.e. start points of inter-split ﬂows), and Send contains pre-deﬁned
sinks (i.e. end points of inter-split ﬂows). CHEX then constructs the
SDS as it traverses the DDG – a ﬂow is added to the SDS if it starts
from a node in Sstart and ends with a node in Send. The result-
ing SDS serves as a gadget for the permuter to compute PDS (Step
3 in Figure 4). Although the SDS building process is the most
computation-intensive step during the entire analysis, the prob-
lem size is already greatly reduced, comparing with conducting
the similar analysis on the whole app without app splitting. Tasks
performed during the SDS construction, such as point-to analysis,
generally scale poorly as the app size increases. Therefore, divid-
ing the app into smaller but self-contained splits can help with the
performance, and alleviates the scalability issue for large apps. In
addition, due to their independence, SDS constructions for differ-
ent splits can be carried out in parallel in performance-critical and
computing-resource-rich scenarios, to further reduce the overhead.
The split permuter always starts a new sequence with a split
from an exported component, a constraint to reﬂect the causal re-
lationship between external requests and potential hijack-enabling
ﬂows. The permutation is implemented as a regular depth-ﬁrst-
search with pruning and conﬁgurable search space. For example,
the maximum DFS depth speciﬁes the maximum number of splits a
feasible hijack-enabling ﬂow can span through, a practical trade-off
between performance and completeness. As the permutation pro-
ceeds, interesting ﬂows in the current PDS are matched with poli-
cies P1-P3 for hijack-enabling ﬂows. Node tags and the ; relation
can be simply checked on individual interesting ﬂows. As for the 1
relationship, we test if two interesting ﬂows merge into a new vari-
able or join at a same method call site. Discovered hijack-enabling
ﬂows are recorded (Step 4 in Figure 4) with detailed information,
such as the corresponding paths in PDS, the split sequence, and the
policy they satisfy. Such information can assist app developers or
security researchers to verify and ﬁx vulnerabilities.
CHEX consists of 5,945 lines of Java code. When linked with the
dependencies in Dalysis, it can be built into a standalone program
and deployed to vet real-world apps, as we did when evaluating it.
5. EVALUATIONS AND EXPERIMENTS
We carried out an in-depth evaluation on CHEX in terms of its
performance and accuracy.
In addition, our large-scale empiri-
cal experiment revealed interesting facts about vulnerable Android
apps, which are expected to contribute to a community awareness
236(a) Instruction Count vs. Time
(b) Entry Point Count vs. Time
(c) SDS Count vs. Time
Figure 5: Execution Time Characteristics of CHEX
(d) SDS Node Count vs. Time
of real-world component hijacking vulnerabilities and caveats of
analyzing them.
5.1 System evaluation
We exercised CHEX with a large set of real-world apps, Spop,
containing about 5,486 free popular apps we collected in late 2011.
Spop consists of around 3,486 apps from the ofﬁcial Android mar-
ket and 2,000 from alternative markets. The experiments were con-
ducted on a cluster of three computers, each equipped with an Intel
Core i7-970 CPU and 12GB of RAM. During the experiments, we
launch concurrent CHEX instances on 64-bit JVM with a maximum
heap space of 4GB. To optimize the throughput, we limit the pro-
cessing time of each app within 5 minutes.
Performance: We instrumented CHEX to measure its execution
time while it examining apps in Spop. The median processing time
for an app is 37.02 seconds with the interquartile range (IQR) of
161.87 seconds, which suggests that CHEX can quickly vet a large
amount of apps for component hijacking vulnerabilities. 22% apps
needed more than 5 minutes to be analyzed thus timed out in our
experiments. In practice, with more computing resources available,
a more generous time-out value should be used.
We found that CHEX’s execution time varies signiﬁcantly across
different apps. As a result, we studied the impact of four app-
speciﬁc factors that may affect CHEX’s execution time the most
(see Figure 5). Although these factors are in a strong correlation
with the execution time, no single factor dominates it (i.e. none
poses major bottleneck to the performance). Furthermore, we de-
composed the execution time into three parts, corresponding to the
three analysis phases each app goes through, as shown in Figure 6).
In general, SDS construction (or split permutation) causes the ma-
jority of the time overhead, whereas entry point discovery and DFS
generation often ﬁnish fast.
Some ﬁndings acquired during the evaluation also prove that the
app analysis challenges we tackled in this work (C1− C4) are very
common to encounter when analyzing real apps. On average, we
found 50.37 entry points of 44 unique class types in an app. More-
over, the number of entry points is not directly related to the app
size. Apps implementing complex user interfaces or requiring fre-
quent user interactions (e.g. games) tend to have more entry points
than others. About 99.70% of apps contain inter-split data ﬂows,
Figure 6: Performance Decomposition
which strongly indicates the necessity of analyzing such ﬂows the
contexts created by different entry points.
Accuracy: Among the 5,486 apps in Spop, CHEX ﬂagged 254 as
potentially vulnerable to component hijacking attacks. Due to the
lack of a ground truth, we manually veriﬁed all the ﬂagged apps by
checking if the discovered hijack-enabling ﬂows are indeed feasi-
ble and exploitable by attackers. This veriﬁcation process largely
replied on human expert knowledge with the assistance of well-
known Android app disassemblers and decompilers.
In the end,
we identiﬁed 48 ﬂagged apps as false positives, which yields a true
positive rate above 81%. The main causes for the false positives
are infeasible split permutations and apps’ complicated input vali-
dations that CHEX cannot understand. Although the false positive
rate is acceptable in a vulnerability ﬁltering scenario, we argue that
the ﬁrst cause can be minimized by incorporating Android domain
knowledge into the permutation pruning logic, while the second
cause is a difﬁcult but orthogonal issue to this work (i.e. checking
the quality of program’s input validation).
5.2 Case studies
Our manual veriﬁcation process also helped us gain practical in-
sights into the component hijacking vulnerabilities. All 206 apps
that are conﬁrmed as vulnerable can be roughly categorized into
ﬁve classes, as shown in the ﬁrst column of Table 1. It clearly shows
that, in addition to vulnerabilities exploited by confused deputy at-
tacks on the Android permission system, other vulnerability classes
also fall into the scope of component hijacking and can be detected
by CHEX. The second column refers to Deﬁnition 1 and indicates
the hijacking type for each vulnerability class. To improve the com-
munity’s awareness and understanding of component hijacking, we
selected at least one app from each class and conducted the fol-
lowing case studies. We hide part of the app package names as a
precaution to not leak undisclosed vulnerability information.
Case A1 in the data theft class resembles the example app we
used in Figure 2. One of its components obtains the GPS location
and saves it to a global variable. Another component initializes
a URL parameter using a string provided by an arbitrary app via
Intent, and sends the GPS information to the URL. An attacker thus
can steal the sensitive location information by sending a crafted
Intent to the second component, causing the GPS location to be
sent to the attacker controlled server.
Apps can also leak their private, permission-protected capabili-
ties through public components, as previously reported. Case B1
has a public component that takes a string from another app’s In-
tent and uses it as a URL for Internet connection. Likewise, a
public component of case B2 uses a string from an Intent as the
host name for socket connections. These vulnerable apps essen-
tially give out the Internet permission to all other apps who may
050010001500050150250Instruction count (K)Time (secsntry Point CountTime (secs)0100200300400050150250SDS countTime (secs)0200040006000800010000050150250SDS Node countTime (secs)05001000150020002500050100150200250300App idTime (secs)SDS timeEntrypoint timeDFS time237Table 1: Detected vulnerability class and case-studied apps
not have it. For example, a malicious app can exploit these apps to
transmit information to an arbitrary Internet server, or even launch
network attacks against a victim server. We have observed Inter-
net capability leakages in both Activity and Service components of
vulnerable apps. In the cases of Activity components, the exploited
components can be forced to display speciﬁed remote content to
the user; Whereas exploits on vulnerable Service components can
be carried out more stealthily, because Service components exe-
cute in the background (in this case, communicating with attacker
controlled servers) without interacting with users.
Intent proxy is another class of vulnerabilities that can be ex-
ploited in a fashion similar to capability leak. Case C1 accepts an
input Intent (X) that embeds another Intent (Y ). It then starts a
new Activity per Y ’s request using its own identity. More speciﬁ-
cally, in the OnResume() function of C1, the Intent Y is retrieved
from the Bundle object through the key “intent”. Next, Intent Y is
directly passed to startActivity without checking any prop-
erties of Intent Y . With this proxy, an attacking app can hide its
identity and start activities, even those protected by permissions
that C1 has but the attacking app does not.
Android heavily relies on internal SQL database to organize sys-
tem and app data, such as contacts and app private information.
Apps can interact with its database using APIs that take SQL state-
ments as arguments. Case D1 passes an input string from an Intent
directly into a raw SQL query, which allows attackers to inject SQL
statements to manipulate the database or even cause system com-
prises. In addition, we have also uncovered more subtle SQL injec-
tion vulnerabilities in many apps, which use parameterized query
instead of raw query, but in a non-parametric form. In particular,
the vulnerable apps construct the selection clause of a query by di-
rectly inserting unescaped strings from Intent, instead of passing
them in a parameter array. Such practices allows the attackers to
inject an arbitrary condition into the selection clause, and derail the
execution of the query, causing unexpected behaviors of the victim
app. Besides SQL injections, a similar but more harmful vulner-
ability, as in Case D2, is the shell command injection, where app
issues Linux shell commands using unchecked input strings.
The last class, data tampering, leads to private or critical data be-
ing overwritten by attackers. Case E1 is a game that reports user’s
score to a remote server for ranking purposes. However, the report-
ing component is made public and reports arbitrary scores speciﬁed
by a requestor, which creates an easy way for cheating the game’s
online scoreboard. We also observed a more security-critical case
where the payment URL of an online shopping app can be modiﬁed
by attackers. The extent of damage by this type of vulnerability is
highly dependent on the function of individual apps, as well as the
robustness of client-server interactions of the apps.
6. DISCUSSIONS
As the evaluation shows, CHEX do have false positives. How-
ever, they can be reduced by addressing two limitations of our cur-
rent prototype. First, our prototype does not leverage on much do-
main knowledge about the partial orders in which Android com-
ponents and their entry points can run or interleave. This design
choice was made because PDS construction enforces the data-ﬂow
continuity between splits, which sorts out the majority of infeasi-
ble split permutations but not all. In addition, building such do-
main knowledge, possibly time-consuming and error-prune, is out
of this work’s scope. We argue that when adopted in practice,
CHEX can always incorporate new constraints into the split per-
meation, which not only reduce the false positive rate but also im-
prove the performance. Second, our current prototype is unable
to recognize false hijack-enabling ﬂows that are sanitized by com-
plicated logic (e.g. regular expression matching and etc.), because
it by itself is an open research problem. On the other hand, we
observe that the majority of apps rely on simple framework APIs
(e.g. checkCallingPermission) and constant string match-
ing to carry out effective input validation, which are already han-
dled by CHEX.
The fact that CHEX only checks data-ﬂows to detect vulnerabil-
ities may cause false negatives. Rare vulnerable components may
exist that enable hijacking attacks without explicit data-ﬂows. In
these cases, date dependencies are essentially encoded into control
dependencies and thus sources and sinks are no longer connected
via data-ﬂows. We could selectively track control dependence for