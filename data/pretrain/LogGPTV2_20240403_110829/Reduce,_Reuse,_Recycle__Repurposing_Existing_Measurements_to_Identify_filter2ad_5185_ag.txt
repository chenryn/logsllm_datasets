each traceroute at the granularity of a border router path.
Handling unresponsive traceroute hops. When comparing trace-
routes, we want to avoid identifying measurement errors as route
changes. For each unresponsive hop (⋆) with responsive hops on
both sides, we check whether we only ever observe a single respon-
sive hop matching that triple. If so, we patch the unresponsive hop.
We treat any remaining unresponsive hops as wildcards that cannot
indicate a change.
IP geolocation approach. We use three techniques to geolocate IP
addresses. First, we use IPMap [13], which combines the results of
multiple geolocation approaches. IPMap has been found to be 99.5%
accurate for country-level geolocation [39] and 80.3% accurate at
the city-level, better than commercial databases [23]. When IPMap
is not able to geolocate an IP interface, we run a custom shortest-
ping measurement, which we describe next. If that does not work,
we rely on a city-level implementation of the CFS algorithm [32].
If an IP address cannot be geolocated with one of these techniques,
we do not consider path segments starting or ending with that IP
address as part of PoP-level staleness inference signals (§4.2.2).
Our implementation of shortest-ping geolocation follows an ap-
proach similar to IPMap. To derive candidate locations for a target
IP ι, we first map ι to an AS, then look up the complete list of (facil-
ity, city) locations for that AS, if it exists in PeeringDB. If we can
decode a location hint from a reverse DNS lookup of ι, we filter
the list to only candidates that match the hint. We extract geoloca-
tion hints encoded in DNS names using CAIDA DDec [11], which
combines DNS decoding rules from undns [71] and DRoP [36]. For
each candidate (facility, city), we identify any available RIPE Atlas
vantage point or Looking Glass server that is within 40km of that
city and in an AS that either has a presence in that facility or is in
the customer cone [49] of an AS that is in the facility. ASes in the
same facility as ι’s AS may interconnect there with ι, yielding the
vantage point a short path to that AS. We then sort vantage points
Figure 12: Validation of our geolocation technique by com-
paring to three databases.
according to the following preferences. Vantage points in ASes with
presence in the facilities are preferred over ASes that are only in the
customer cones. Of those at the facilities, vantage points in ASes
with known relationships are preferred over those in ASes without
a known connection to ASι. The ones with known relationships are
ordered according to their inter-AS relationship with ASι, following
the same ordering as Local Preference values. Vantage points in
ASes Vantage point ASes that have ASι as a customer are the most
preferred, while vantage point ASes that use ASι as transit provider
are the least preferred. We use this preference order to increase
the chances of getting a direct path between the vantage point and
ι. If multiple vantage points are equally preferred, we pick one at
random. Starting from the most preferred vantage point, we issue
three pings to ι. If the measured round-trip latency is at most 1ms
(maximum distance of 100km based on the speed of light in fiber),
we declare ι to be in the vantage point’s city. Otherwise we repeat
the same process from the next most preferred vantage point.
IP geolocation validation. We validated our ping-based technique
in 2017, on a set of traceroutes issued daily in May 2016 from
30 Ark monitors to the x .1 address in 360K /24 prefixes.6 We
discarded traceroutes that either contained IP-level cycles or did
not reach the destination. For our analysis, we use the 72% of
⟨source, destination⟩ pairs for which we are left with a traceroute
for every day of our measurement period.
Our ping-based technique was able to locate 82% of the border
router IP addresses seen in these traceroutes, in each case finding a
vantage point with a ping time of 1ms or less to the IP address. We
could not locate 10% of IP addresses because they did not respond to
pings, and 8% were responsive but we were unable to find a vantage
point within 1ms. Our technique probed each IP address from an
average of 8.3 vantage points, using 3 ping packets per vantage
point, indicating that our PeeringDB-driven search enabled efficient
identification of probing vantage points to realize a reasonable
probing overhead.
To validate our ping-based technique, we compared its geoloca-
tion estimates of 14,720 IP addresses to three geolocation databases.
The first is a crowd-sourced router geolocation dataset containing
6We used this dataset when we were developing our staleness prediction signal tech-
niques but only use it as a source of IP addresses to validate our geolocation technique
in this paper. For the rest of the paper, we run the technique we validate here on IP
addresses from the new traceroute data described in the relevant sections.
Repurposing Existing Measurements to Identify Stale Traceroutes
IMC ’20, October 27–29, 2020, Virtual Event, USA
approximately 35K submissions from network operators and col-
lected by the RIPE OpenIP Map project [1]. We use a snapshot taken
on 2017-06-05 and restrict our analysis to the 1319 IP addresses
that contain latitude and longitude data and overlap with our data.
Because this data is submitted by operators about networks they
maintain, it should be highly accurate. To provide broader coverage,
we also use two commercial geolocation databases, one a router-
specific dataset from a well-known Internet performance firm and
the other a popular, general purpose, dataset from a different ven-
dor. Our data set had an overlap of 5,872 IP addresses with the
router-specific database and had all IP addresses covered by the
general purpose database.
Figure 12 depicts the difference in our geolocations and those of
the databases for the set of common IP addresses. Our geolocation
performs very well according to the crowd-sourced dataset, with
93% of our geolocations exactly matching, 96% < 100km and 98%
< 500km. Compared with the locations from the router-specific
database, our technique also performed well, with 75% of our geolo-
cations exactly matching and 90% < 500km. The general purpose
database shows the highest level of geolocation error, with only 60%
matching exactly and 82% < 500km. In cases where our technique
produces a different location than a database, it is hard to know
which is correct. By the speed of light, a responsive address must be
within 100km of a vantage point with a 1ms RTT, and so our tech-
nique can only have error greater than 100km if we have the wrong
geolocation for a vantage point or if a different device responds
to a ping on behalf of the border IP address (perhaps a middlebox
or if the address is reused in different locations). Given the high
similarity between our locations and those of the crowd-sourced
database, which we consider to be the most definitive, we do not
investigate the cause of this discrepancy further in this paper.
Use of active measurements. The services we use for IP alias iden-
tification and IP geolocation use active measurements. However,
the measurement cost is low relative to the benefit we get by iden-
tifying corpus traceroutes that are unlikely to have changed and
hence need not be reissued. First, geolocation and alias information
changes on a much slower timescale than routes, and so the mea-
surements do not need to be refreshed frequently. Second, we use
existing services that provide the data and may already have issued
the measurements. Third, the alias identification uses Ark, which is
much less resource-constrained than platforms such as RIPE Atlas.
Fourth, the measurements require only ping measurements, which
incur significantly less probing overhead than traceroutes.
B EVALUATION OF TUNING PRECISION OF
BGP COMMUNITY SIGNALS
While all our techniques are subject to calibration (§4.3.1), for most
techniques, the purpose of calibration is to discover which corpus
vantage points correlate with which public data sources. With com-
munities, there is an additional challenge of also needing to learn
which communities indicate where the route goes versus being un-
related to path changes entirely (not just unrelated to path changes
in the corpus). This section demonstrates that our calibration can
prune out unrelated communities, allowing a long-running system
employing our methodology to achieve higher precision as time
goes on. Figure 6a shows that precision of change identification
Figure 13: The number of BGP communities that generate
false-positive signals decreases over time as our techniques
identify and prune communities that are not related to path
changes.
starts at a reasonable 60%, but improves significantly over time as
each technique gets calibrated. Here we characterize the automated
learning of BGP communities related to path changes.
Figure 13 shows the number of communities that generate false-
positive signals each day, i.e., the number of BGP communities that
generated signals and had overlapping traceroutes that allowed
us to determine that the community change did not indicate a
path change. We see that over time the number of communities
that generate false-positive signals decreases, as our techniques
automatically prune communities that are not related to location
or routing changes. We note that this approach may also be used
to infer which BGP communities are used to signal geographical or
topological information about routes.
C EXPLAINING HIGH COVERAGE
Figure 6b shows the coverage of our techniques remain high through-
out the 60-day retrospective evaluation, with coverage being above
90% for paths public data can monitor. The high coverage is par-
tially explained by overlapping paths between data sources and
the traceroute corpus, as well as routing events impacting multiple
paths and being visible on multiple traceroutes.
We find that 266 BGP VPs are located in 164 ASes that also host
Atlas Probes, covering 720 (16%) of the Probes in Pcorpus (§5.1.1).
This large overlap follows from RIPE Atlas’s large footprint and pos-
sibly from research-friendly networks hosting RIPE Atlas Probes
and peering with BGP route collectors. This overlap provides good
alignment between BGP feeds and public traceroutes (in our evalu-
ation and in real systems/studies using RIPE Atlas). Moreover, due
to the large number and distribution of RIPE Atlas Probes, the sets
Ppublic and Pcorpus of VPs have extensive overlap in terms of ASes
and geographical locations. In particular, 2,931 (67%) of the Probes
in Ppublic and 2,976 (67%) of the Probes in Pcorpus are colocated in
658 ASes, while 1,925 Probes are located within 50km of another
Probe from the other set. This setting is appropriate for evalua-
tion because we intend our techniques to enable more efficient use
(and re-use) of RIPE Atlas traceroutes, so the overlap in practice
will be even higher (because we partition by source Probes and by
destinations).
IMC ’20, October 27–29, 2020, Virtual Event, USA
Vasileios Giotsas et al.
D INTEGRATION WITH IPLANE
We evaluate the impact of our techniques on iPlane [50], a service
that predicts unmeasured routes by splicing segments of already
measured traceroutes and that also serves as a prediction service
for Sibyl [18]. To briefly explain how iPlane works, suppose iPlane
needs to predict the path between a source s and a destination d.
iPlane will search its corpus of measured traceroutes to find two
traceroutes (s, d′) and (s′, d) that intersect at an intermediate PoP
p, and will assume that the path (s, p, d) approximates the actual
path between s and d. iPlane can benefit from accumulating a
large number of archived traceroutes, since it is more likely to find
traceroutes that can be spliced. On the other hand, staleness can
lead to incorrect predictions, as paths that intersect in the corpus
may no longer intersect in practice.
Traceroute corpus. To implement iPlane’s methodology, we first
construct the initial corpus by collecting one day (2019-03-01) of
traceroutes from RIPE Atlas’s anchoring measurements (as in §5.1)
which results in 497, 076 different paths. We use the anchoring mea-
surements because they are repeated every 900 seconds between
the same set of Atlas Probes and destinations (Atlas Anchors), al-
lowing us to compute the staleness of the traceroute corpus over
time.
For the initial corpus of traceroutes, we first group the IP ad-
dresses to PoPs, by mapping each address to an ⟨AS, city⟩ tuple
using RIPE’s IPMap for geolocation [23]. If we cannot geolocate
an IP address, we consider it as its own PoP. In total, we were
able to geolocate 31% of the 144, 220 public IPs in our dataset. We
then maintain the paths that go through each PoP, and identify
spliced paths of the form (s, p, d) where a traceroute from s to some
destination intersects at p with a traceroute from some source to d.
Tracking changes. To understand the impact of staleness in iPlane’s
ability to correctly splice traceroutes, we maintain two parallel ver-
sions of iPlane and its traceroute corpus. One retains the initial set
of anchoring measurements. For the other, we remove traceroutes
that our staleness signals suggest are out-of-date from iPlane’s
corpus, and we re-add them if our signals later suggest they are
valid again (i.e., changed back to the original route) (§4.3.2).
Results. For each day in the evaluation period, we apply iPlane’s
methodology to generate spliced paths from each RIPE Atlas Probe
to every Anchor that the Probe did not issue traceroutes to in the
anchoring measurements. For each day, Figure 16a depicts what
fraction of spliced paths are invalid because one or more of the
paths has changed, causing the paths to no longer intersect. If iPlane
simply relies on its initial corpus, over half of its spliced paths are
invalid by the end of the measurement period. With our techniques,
the fraction stale rarely rises above 20%, and it is below 10% at the
end of the two month period. Importantly, Figure 16b shows that
we are still able to retain the vast majority of valid spliced paths
when pruning traceroutes flagged by our signals.
This result has two implications. First, iPlane can rely on our
techniques to help prune out stale traceroutes. Second, our tech-
niques let iPlane rely even on resource constrained vantage points
such as RIPE Atlas, because our techniques lend confidence as to
which traceroutes can be kept around for long periods of time.
While our evaluation is over a small set of destinations, this ability
Figure 14: Distribution across border router IPs of the num-
ber of AS pairs that use the same border IP. This overlap
allows us to correlate changes observed in one public trace-
route to other traceroutes in the corpus.
Figure 15: Distribution of the number of paths in our public
traceroute feed for each border IP. Only 40% of all the border
IPs are visible in 10 or more paths, but over 80% of the border
IPs that are part of path changes are covered by at least 10
paths.
Finally, there is also significant overlap across public traceroutes
and the traceroute corpus. Figure 14 shows the distribution, across
all IP addresses at the border between two adjacent ASes in the
traceroute corpus (border IPs), of the number of adjacent AS pairs
that use that border IP. We observe border IPs are used by a large
number of AS pairs; about 60% of the border IPs are used by more
than 10 AS pairs, while 40% are used by more than 30 AS pairs.
This is likely the case for border IPs assigned to routers at IXPs and
colocation facilities. This diversity implies that our techniques can
correlate measurements from different sources to identify changes.
Figure 15 shows that border IPs involved in path changes tend to
appear in more paths than border IPs that are not involved in any
change. This property makes changes easier to observe, as routers
with changes are covered in more paths, and helps achieve high
coverage, as changes in these high-centrality routers impact (and
trigger signals of changes for) a higher number of paths.
This result bodes well for real use of our approaches, as RIPE
Atlas is both the largest set of public traceroutes to crawl for signals
and an ideal use case for our techniques, as studies using it are
severally constrained in their measurement budgets.
Repurposing Existing Measurements to Identify Stale Traceroutes
IMC ’20, October 27–29, 2020, Virtual Event, USA
(a) Out of iPlane’s initial spliced paths, fraction that are incorrect