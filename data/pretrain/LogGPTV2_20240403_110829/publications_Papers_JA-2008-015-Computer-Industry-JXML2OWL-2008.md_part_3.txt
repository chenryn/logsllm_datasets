and other two that relate France and Paris.
12
3.6 A Solution to the semantic heterogeneity problem:
conditional mapping
In Section 2 we explained how the structural and syntactic problems of data
integration are solved by JXML2OWL. We are now going to address the semantic
obstacle in this subsection. The semantic heterogeneity problem was not completely
solved by JXML2OWL application. Semantic incompatibility can arise in two different
ways. The most simple semantic incompatibility situation happens when the same
terminology is used with different but unique meanings by distinct data sources. For
instance, a data source can use customer terminology with the meaning of end-
customers while another source can use the same terminology but with a different
meaning such as dealers. Since each data source uses the terminology with a unique and
clearly defined meaning, it is just a matter of mapping the elements from each data
source to the appropriate concept of the ontology. This situation is currently fully
supported by the JXML2OWL mapping tool.
The second case, more complex than the first situation, happens when a terminology
is used for more than one meaning in a data source. For example, this situation happens
when a data source uses customer terminology to include both end-customers and
dealers. To overcome this semantic problem, we propose two distinct solutions: pre-
processing the data source and enabling conditional mappings within the JXML2OWL
project. Considering the current state of JXML2OWL, it is necessary to pre-process the
XML source using one of the available mapping tools supporting conditional mappings
(such as Stylus Studio XML-to-XML Mapper) between two XML schemas to normalize
the semantics. Then JXML2OWL can be used to map from the semantically normalized
schema to an OWL ontology. Since the majority of XML mapping tools supports
conditional mappings, we decided to concentrate our resources to define and implement
a solution to map from XML to OWL, discarding the not so important conditional
mapping feature.
Conditional mappings are an elegant solution to solve this problem. JXML2OWL
was designed in such a way that it can easily be extended to support this kind of
mapping. The following example explains how conditional mappings can be used to
solve the semantic heterogeneity. Let us consider a product ontology with two
concepts: product:electronicProduct and product:computerProduct.
Let us also consider the following XML document.
Philips Flat 32AB
true
SONY LCD 28TV
true
This XML document uses the same terminology, product, with different meanings:
electronic and computer product. The following class mappings solve this semantic
problem:
cm1 = (product:eletronicsProduct, /produtcs/product[electronics='true'])
13
cm2 = (product:computerProduct, /produtcs/product [computer='true'])
Predicates are used in the XPath expressions to elegantly solve the semantic
heterogeneity problem.
3.7 Transforming XML instances to OWL instances
Two main problems need to be solved in order to successfully complete the
JXML2OWL tool. The first problem deals with schema manipulations and it is related
to the strategy that needs to be implemented to reference XML nodes and OWL
resources, and the strategy to create mappings between classes and properties. The
second problem that needs to be addressed concerns OWL instances generation. OWL
instances are generated from the mappings created between the XML schema and the
OWL ontology. This section addresses important aspects of the individual generation
and creation of properties.
3.7.1 Generating class instances
Instances of OWL classes are characterized by having unique identifiers. When
creating the OWL instances document, it must be ensured that unique identifiers are
generated for each individual. Another important task is to detect duplicate instances on
the XML document. With the support of many-to-one mappings, several XML nodes
identified by the different or even by the same XPath expressions may refer to the same
individual. Based on their unique identifier, duplicate instances (instances with the same
ID) must be detected and filtered so that only one instance is created.
Bearing in mind what was said in the previous paragraph, an important decision
must be taken with respect to how unique identifiers are created. JXML2OWL supports
two approaches. By default, the ID is generated by sequentially concatenating the
underscore symbol ‘_’ with the prefix of the mapped class, with its local name and with
the string-value [25] of the mapped XML node. Considering the following XML
document, an ontology with the class org:product and these two class mappings:
(org:product, /org/products/product) and (org:product,
/org/warehouses/warehouse/products/product), only two individuals
are created, one for the product Philips Flat 32AB and the other for SONY LCD 28TV.
The IDs of the two generated instances are _orgproductPF32AB2 and
_orgproductSONY28TV3. This happened because the string-values of the XML
nodes representing each product are the same.
 Philips Flat 32AB
2500
SONY LCD 28TV
2400
SEED Fx
14
Philips Flat 32AB
2500
SONY LCD 28TV
2400
One can argue, and we agree, that XML documents with the previous structure are
rare since they are much too verbose and thus it could be quite impossible to detect
duplicate instances using this approach in a real scenario (such as a dump of a database
extracted in XML format). As such, we also propose an alternative solution where it is
possible to specify the XML node whose string-value is used to generate the ID. With
this alternative, the class mappings can also be specified with triplets:
(OWL class URI, XPath expression, ID XPath expression).
Considering now the following XML document, the same ontology with the class
org:product and these two class mappings:
cm1 = (org: product, /org/products/product, /org/products/product/name) and
cm2 = (org:product, /org/warehouses/warehouse/products/product,
/org/warehouses/warehouse/products/product/@name), only two
individual are created, one for the product Philips Flat 32AB and the other for SONY
LCD 28TV because the XML nodes selected as ID have the same string-value. Now the
IDs of the created instances are: _orgproductPF32AB and
_orgproductSONY28TV.
 Philips Flat 32AB
333444555
25
 SONY LCD 28TV
666777888
24
SEED Lx 
333444555
333444555FX
15
One should note that using the string-value of an XML node to generate the IDs of
OWL instances is not a perfect solution because the string-value can contain several
symbols, such as ‘%’ and ‘;’, which are not valid within a unique identifier. However,
since it is possible to specify the XML node used to generate the ID, one that does not
contain such symbols can be chosen. Possible solutions to solve this problem consist of
encoding such symbols into valid ones to generate a valid ID (such a valid string is
called NCName [29] or use some kind of hash function to generate a valid ID from the
string resulting of the several concatenations.
3.7.2 Generating properties
The OWL recommendation also places several restrictions on properties. The most
important one when generating the properties of individuals is that OWL does not allow
the assignment of duplicates to property values. Special care must be taken because of
the support of many-to-one mappings. In fact, with this kind of mapping, not only
several XML nodes can be mapped to the same OWL class but also several XML nodes
or class mappings can respectively be used as the range of OWL datatype or object
properties. In such a case, it is necessary to filter and eliminate duplicates when creating
both the OWL instances and the properties. But this is not enough since it is also
necessary to perform the union of all the distinct property values mapped.
With the intention of better understanding this situation, let us consider again the
previous XML document, as well as the previous ontology with the same class
mappings where the nodes used as IDs are directly specified, mapping different XML
nodes to the same OWL class. Let us also consider that the ontology defines the
datatype property org:serial as well as the followings triplets representing property
mappings:
• (org:serial, cm1, /org/products/product/serial)
• (org:serial, cm2, /org/warehouses/warehouse/products/products/serial)
For the product Philips Flat 32AB, only one instance is created since the generated
IDs are the same. However, two org:serial properties must be created, one for
333444555 and one for 333444555FX because they are distinct. One should note that
one of the 333444555 serials was discarded because it is a duplicate one. We can state
that for each generated individual, it is necessary to perform the union of all the
properties related to this individual, to remove the duplicates and finally to create the
remaining properties. This process must be done to both datatype and object properties.
OWL recommendation also supports the definition of several restrictions such as
maximal and minimal cardinality restrictions of properties over classes. The generation
of OWL instances must support those kinds of restrictions. Maximal cardinality
restrictions can easily be supported since it is just a matter of ensuring that the
maximum number of allowed properties is not exceeded, discarding the remaining ones.
A complete support of minimal cardinality restriction is impossible, that is, it is
impossible to guarantee that this kind of restriction is always satisfied. However, there
are two distinct cases that must be supported. For each case, appropriate warnings and
comments need to be generated. The two distinct cases are:
• Properties on which minimal cardinality restrictions exist are not mapped.
Warnings and comments are generated both on the transformation rules and on
the OWL instances document.
16
• The XML instances document does not contain enough instances to satisfy the
minimal cardinality restriction. Since this case can only be evaluated at run-time,
comments can only be generated in the OWL instances document.
3.8 Summary
This section presents a notation, displayed in Table 2, to map an XML schema to an
existing ontology defined in OWL and discussed important aspects regarding the
transformation of instances of the XML schema into instances of the ontology. It does
not constitute an exhaustive solution. Our purpose is to provide a solution that considers
the most important aspects narrowing the huge gap existing between XML and OWL
recommendations.
Mappings Notation
(OWL Class URI, XPath expression)
Class
(OWL Class URI, XPath expression, ID XPath expression)
(OWL Datatype Property URI, Domain Class Mapping, XPath
Datatype Property
Expression)
(OWL Object Property URI, Domain Class Mapping, Range
Object Property
Class Mapping)
Table 2. Mapping notation
4 How Organizations Can Use JXML2OWL?
Nowadays, an increasing number of organizations are operating in a global business
environment. This global environment requires an adequate B2B integration for them to
remain competitive. B2B integration is concerned essentially with the coordination of
data, information, and processes among businesses and their information systems.
Organizations need to avidly interact with suppliers, partners, and customers. However,
if this integration is done on a point-to-point basis, these companies end up spending up
to 35% to 40% of their software maintenance budgets simply on maintaining these
connections [30].
4.1 B2B integration
Integration in a B2B context is hard to achieve since organizations use different
vocabularies to describe their products, part numbers, invoices, and numbering purchase
orders. As depicted by Figure 3, in B2B settings, it is possible to find two types of
vocabularies: internal and external. Internal vocabularies are only visible inside
organizations. Typically, organizations use data dictionaries and taxonomies to make
their vocabulary explicit. Modern approaches would involve OWL, RDF, and RDFS in
addition to XML in order to describe internal vocabularies and taxonomies.
On the other hand, external vocabularies are defined to be used with partners to
exchange data and information. The most common way to describe an external
vocabulary is to use a standard, such as RosettaNet and ebXML. Various industries
have their own standards such as HL7 in the health care industry. In general, every
17
industry develops a standard or set of standards in order for companies in these
industries to communicate with each other.
Organizations are starting to look for architectural solutions that allows their
participation in B2B transactions using syntactic protocols (i.e. XML) while
representing their internal vocabularies and documents semantically (using OWL).
Partners and suppliers can freely exchange syntactic documents. Once an organization
receives a syntactic document it is allowed to create a mapping between the elements
from the document and concepts of an ontology that describes the domain of discourse
of the organization (i.e., internal vocabulary). The organization that receives the
documents can create any number of mappings.
4.2 Achieving B2B integration with JXML2OWL
As we can see, one of the main challenges of B2B integration is to find a solution to
integrate internal and external vocabulary. This requires some expertise since these two
types of vocabularies are specified using languages with different expressiveness.
Nowadays, external vocabularies are usually specified using XML, while internal
vocabularies recently started to be specified using RDF(S) and will possibly be
specified using OWL in the near future.
While XML allows data exchange between distributed and heterogeneous
applications, it does not guarantee the interoperability of systems. XML only provides
syntax to structure the data exchanged in a B2B setting, since tags have no predefined
meaning. This is only one level of interoperability that must be met in B2B transactions.
Developers are still faced with the problem of semantic interoperability, i.e., the
difficulty to integrate resources that were developed using different vocabularies and
different perspectives on the data. When data is only defined syntactically, it is not
possible to enable the automatic or semi-automatic integration of B2B information
systems. These objectives can only be reached when considering the semantics of the
data exchanged between organizations.
In these scenarios and contexts, the JXML2OWL tool can be effectively used to
map external vocabularies to internal reference vocabularies (terminologies), and