      V(kNeverOptimize, "Optimization is always disabled")
**（10）**
第36、37行代码`language_mode()、set_language_mode()`的作用是把JavaScript模式设置为strict或者sloppy；  
 **（11）** 第40~48行代码`DECL_BOOLEAN_ACCESSORS`的源码如下：
    #define DECL_PRIMITIVE_ACCESSORS(name, type) \
      inline type name() const;                  \
      inline void set_##name(type value);
    #define DECL_BOOLEAN_ACCESSORS(name) DECL_PRIMITIVE_ACCESSORS(name, bool)
**（12）** 第72行代码`DEFINE_FIELD_OFFSET_CONSTANTS`的作用是描述SharedFunction的内存布局，源码如下：
    #define DEFINE_FIELD_OFFSET_CONSTANTS(StartOffset, LIST_MACRO) \
      enum {                                                       \
        LIST_MACRO##_StartOffset = StartOffset - 1,                \
        LIST_MACRO(DEFINE_ONE_FIELD_OFFSET)                        \
      };
    //==================分隔线===========================
    #define TORQUE_GENERATED_SHARED_FUNCTION_INFO_FIELDS(V) \
    V(kStartOfWeakFieldsOffset, 0) \
    V(kFunctionDataOffset, kTaggedSize) \
    V(kEndOfWeakFieldsOffset, 0) \
    V(kStartOfStrongFieldsOffset, 0) \
    V(kNameOrScopeInfoOffset, kTaggedSize) \
    V(kOuterScopeInfoOrFeedbackMetadataOffset, kTaggedSize) \
    V(kScriptOrDebugInfoOffset, kTaggedSize) \
    V(kEndOfStrongFieldsOffset, 0) \
    V(kLengthOffset, kUInt16Size) \
    V(kFormalParameterCountOffset, kUInt16Size) \
    V(kExpectedNofPropertiesOffset, kUInt16Size) \
    V(kFunctionTokenOffsetOffset, kUInt16Size) \
    V(kFlagsOffset, kInt32Size) \
    V(kFunctionLiteralIdOffset, kInt32Size) \
    V(kUniqueIdOffset, kInt32Size) \
    V(kSize, 0) \
    //============== 分隔线======================
    #define FLAGS_BIT_FIELDS(V, _)//见上面第70行代码
SharedFunction实例的内存布局如图1所示。
实例包括Map头和HeapObject头，Map和HeapObject长度分别是80byte和4byte，SharedFunction的长度请读者自行计算（参考第十二篇文章的章节3），Map长度的计算方法见第十四篇文章的章节2。
## 3 SharedFunction初始化
下面讲述创建SharedFunction实例的过程。  
 **（1）** 初始化，源码如下：
    1.  void SharedFunctionInfo::InitFromFunctionLiteral(
    2.      Handle shared_info, FunctionLiteral* lit,
    3.      bool is_toplevel) {
    4.    Isolate* isolate = shared_info->GetIsolate();
    5.    bool needs_position_info = true;
    6.    shared_info->set_internal_formal_parameter_count(lit->parameter_count());
    7.    shared_info->SetFunctionTokenPosition(lit->function_token_position(),
    8.                                          lit->start_position());
    9.    if (shared_info->scope_info().HasPositionInfo()) {
    10.      shared_info->scope_info().SetPositionInfo(lit->start_position(),
    11.                                                lit->end_position());
    12.      needs_position_info = false;
    13.    }
    14.    shared_info->set_syntax_kind(lit->syntax_kind());
    15.    shared_info->set_allows_lazy_compilation(lit->AllowsLazyCompilation());
    16.    shared_info->set_language_mode(lit->language_mode());
    17.    shared_info->set_function_literal_id(lit->function_literal_id());
    18.    shared_info->set_needs_home_object(lit->scope()->NeedsHomeObject());
    19.    shared_info->set_requires_instance_members_initializer(
    20.        lit->requires_instance_members_initializer());
    21.    shared_info->set_is_toplevel(is_toplevel);
    22.    DCHECK(shared_info->outer_scope_info().IsTheHole());
    23.    if (!is_toplevel) {
    24.    }
    25.    shared_info->set_length(lit->function_length());
    26.    if (lit->ShouldEagerCompile()) {
    27.      shared_info->set_has_duplicate_parameters(lit->has_duplicate_parameters());
    28.      shared_info->UpdateAndFinalizeExpectedNofPropertiesFromEstimate(lit);
    29.      shared_info->set_is_safe_to_skip_arguments_adaptor(
    30.          lit->SafeToSkipArgumentsAdaptor());
    31.      DCHECK_NULL(lit->produced_preparse_data());
    32.      needs_position_info = false;
    33.    } else {
    34.    }
    35.    if (needs_position_info) {
    36.    }
    37.  }
第14~21行设置编译模式、语法树ID等信息，第25行代码设置函数长度。  
 **（2）** 安装BytecodeArray到SharedFunction中，源码如下：
    void InstallUnoptimizedCode(UnoptimizedCompilationInfo* compilation_info,
                                Handle shared_info,
                                ParseInfo* parse_info, Isolate* isolate) {
    //省略代码....................
        InstallBytecodeArray(compilation_info->bytecode_array(), shared_info,
                             parse_info, isolate);
    }
    //===================分隔线================
    void InstallBytecodeArray(Handle bytecode_array,
                              Handle shared_info,
                              ParseInfo* parse_info, Isolate* isolate) {
      if (!FLAG_interpreted_frames_native_stack) {
        shared_info->set_bytecode_array(*bytecode_array);
        return;
      }
    //===================分隔线================
    void SharedFunctionInfo::set_bytecode_array(BytecodeArray bytecode) {
      DCHECK(function_data() == Smi::FromEnum(Builtins::kCompileLazy) ||
             HasUncompiledData());
      set_function_data(bytecode);
    }
看上面的代码，安装BytecodeArray的入口是`InstallUnoptimizedCode()`，`InstallBytecodeArray()`负责安装BytecodeArray，安装的具体操作由`set_function_data()`方法实现。图2给出调用堆栈。
## 4 SharedFunction与JSFunction的差异
`NewFunctionFromSharedFunctionInfo()`方法的输入是SharedFunction，输出是JSFunction，源码如下：
    1.  Handle Factory::NewFunctionFromSharedFunctionInfo(
    2.      Handle info, Handle context,
    3.      AllocationType allocation) {
    4.    Handle initial_map(
    5.        Map::cast(context->native_context().get(info->function_map_index())),
    6.        isolate());
    7.    return NewFunctionFromSharedFunctionInfo(initial_map, info, context,
    8.                                             allocation);
    9.  }
    10.  //==============分隔线============
    11.  Handle Factory::NewFunction(Handle map,
    12.                                          Handle info,
    13.                                          Handle context,
    14.                                          AllocationType allocation) {
    15.    Handle function(JSFunction::cast(New(map, allocation)),
    16.                                isolate());
    17.    function->initialize_properties(isolate());
    18.    function->initialize_elements();
    19.    function->set_shared(*info);
    20.    function->set_code(info->GetCode());
    21.    function->set_context(*context);
    22.    function->set_raw_feedback_cell(*many_closures_cell());
    23.    int header_size;
    24.    if (map->has_prototype_slot()) {
    25.      header_size = JSFunction::kSizeWithPrototype;
    26.      function->set_prototype_or_initial_map(*the_hole_value());
    27.    } else {
    28.      header_size = JSFunction::kSizeWithoutPrototype;
    29.    }
    30.    InitializeJSObjectBody(function, map, header_size);
    31.    return function;
    32.  }
第4行代码获取JSFunction的初始Map。V8初始化时为每个类型都创建了初始Map，存放在root_table中，详见以前的文章。第7行代码`NewFunctionFromSharedFunctionInfo()`方法会调用第11行`NewFunction()`方法。通过对17~30行代码的分析可知SharedFunction与JSFunction的差异为：  
 **（1）** 第17，18行代码表明JSFunction中有属性和元素，SharedFunction中没有属性和元素；  
 **（2）** 第21行代码表明JSFuncion绑定current context，SharedFunction不绑定；  
 **（3）** 第19，20代码表明从SharedFunction中获取stub_entry信息并设置到JSFunction中；  
 **（4）** 第30行代码表明需要在JSFunction中安装JSObject。
好了，今天到这里，下次见。
**恳请读者批评指正、提出宝贵意见**  
 **微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**