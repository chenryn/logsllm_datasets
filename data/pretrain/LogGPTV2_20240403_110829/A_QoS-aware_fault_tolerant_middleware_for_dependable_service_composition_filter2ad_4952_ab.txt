### 服务计划与QoS感知的容错中间件

#### 1. 服务计划和服务社区
本文介绍了一种QoS感知的容错中间件，用于动态选择最优的Web服务组合策略。以下是关键概念：

- **服务计划 (Service Plan, SP)**: 定义了SOA系统中活动的抽象描述。一个服务计划SP是一个三元组(T, P, B)，其中T是无状态任务(SLT)和有状态任务(SFT)的集合，P是一组服务计划中的设置（如分支和循环结构的概率、并行结构的部分合并参数），B提供了服务计划的结构信息，可以用基于XML的语言（如BPEL）指定。

- **服务社区 (Service Community)**: 定义了所有参与者遵循的通用术语，使得不同组织开发的Web服务具有相同的接口，并且可以在运行时被其他功能等效的Web服务动态替换。

- **基本假设**: 对于服务计划中的每个任务，服务社区中存在多个功能等效的服务候选者可以被采用来完成该任务。

#### 2. 中间件工作流程
如图1所示，我们的中间件的工作流程如下：
1. 服务用户（通常是SOA系统的开发者）定义一个服务计划。
2. 中间件从不同的服务社区获取每个任务的候选列表及其整体非功能性QoS性能。
3. 算法FT-BABHEU确定服务计划中任务的最优容错策略。
4. 中间件的执行引擎通过调用选定的容错策略来执行服务计划。
5. QoS模块记录所调用服务的QoS信息，并与社区协调器交换这些信息以更新Web服务的整体QoS信息。

#### 3. QoS模型和容错策略
##### 3.1 用户协作的QoS模型
在存在多个具有相同功能的Web服务的情况下，QoS提供了非功能性特性，用于选择最优的Web服务。我们基于[1, 13, 27]的研究，识别出以下最具代表性的质量属性：

1. 可用性 (av) q1: Web服务在某个时间间隔内运行的时间百分比。
2. 价格 (pr) q2: 服务用户调用Web服务所需支付的费用。
3. 流行度 (po) q3: 在某个时间间隔内Web服务接收到的调用次数。
4. 数据大小 (ds) q4: Web服务调用响应的大小。
5. 成功率 (sr) q5: 请求在最大预期时间内正确响应的概率。
6. 响应时间 (rt) q6: 服务用户发送请求到接收响应的时间间隔。
7. 整体成功率 (osr) q7: 所有服务用户的调用成功率(q5)的平均值。
8. 整体响应时间 (ort) q8: 所有服务用户的响应时间(q6)的平均值。

在我们的QoS模型中，q1-q4对所有服务用户都是相同的，并由服务提供商提供。q5和q6受通信链路影响，由服务用户测量。q7和q8分别是q5和q6的平均值，由服务社区协调器提供。与其他QoS模型不同，我们引入了用户协作的概念来获取整体QoS信息(q7和q8)，这可以通过鼓励服务用户将其个人观察到的QoS信息贡献给社区协调器来实现。

##### 3.2 QoS组合
原子服务可以通过不同的组合结构进行聚合。图2展示了描述任务执行顺序的基本组合结构。表1列出了基本组合结构和容错策略的QoS属性计算公式。算法1展示了如何递归地计算服务计划的QoS值。

##### 3.3 容错策略
为了构建可靠的面向服务的系统，服务社区中的功能等效候选者可以作为替代副本以容忍故障。常见的容错策略包括重试、恢复块、N版本编程和主动策略。表1列出了这些策略的QoS值计算公式。

#### 4. 容错策略选择
##### 4.1 符号和效用函数
表2定义了本文中使用的符号。对于每个任务ti，有一组候选者Si。每个候选者sij有一个质量向量qij=(qkij)c表示非功能性特征，其中c是质量属性的数量。由于一些质量属性是正向的（值越大越好，如可用性和流行度），而另一些是负向的（值越小越好），我们首先将所有正向的质量属性转换为负向的。然后使用简单加权求和技术(SAW)来规范化质量属性。效用函数定义为:
\[ u_{ij} = \text{utility}(q_{ij}) = \sum_{k=1}^{c} w_k \times \tilde{q}_{kij} \]
其中wk是用户定义的权重，表示不同质量属性的优先级，较小的uij表示更好的性能。

##### 4.2 具有局部约束的FT选择
局部约束LC={lcki}ck=1指定了服务计划中单个任务的用户需求（例如，响应时间必须小于1秒）。服务计划中有n×c个局部约束，其中n是任务数量，c是质量属性的数量。通常，用户只设置一小部分约束。未触及的局部约束默认设置为+∞，以便所有候选者都满足约束。问题1给出了单个无状态任务ti的最优候选者选择问题的数学表述。

### 结论
本文提出了一种QoS感知的容错中间件，能够动态选择最优的Web服务组合策略。通过引入用户协作的QoS模型和多种容错策略，该中间件能够有效提升SOA系统的可靠性和性能。