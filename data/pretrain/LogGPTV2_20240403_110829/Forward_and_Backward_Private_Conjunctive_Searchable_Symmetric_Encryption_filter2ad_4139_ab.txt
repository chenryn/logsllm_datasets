and negl(λ) any generic (unspeciﬁed) polynomial function and
negligible function in λ, respectively. 1
Databases. Let ∆ = {w1, . . . , wK} be a dictionary of key-
words, and let F = {f1, . . . , fD} be a collection of ﬁles,
such that each fi is associated with a unique identiﬁer idi and
contains keywords from ∆. We denote by DB a database of
identiﬁer-keyword pairs, such that a given pair (id, w) ∈ DB
if and only if the ﬁle with identiﬁer id contains the keyword
w. We denote by W ⊆ ∆ the set of all keywords that appear
at least once in DB, and by DB(w) the set of all identiﬁers
corresponding to ﬁles containing w. We denote by |W| the
number of distinct keywords in DB, by |DB| the number
of distinct identiﬁer-keyword pairs in DB, by |DB(w)| the
number of ﬁles containing the keyword w, and by |Upd(w)|
the number of update operations involving the keyword w.
Conjunctive Queries. We represent a conjunctive query over
n distinct keywords w1, . . . , wn as q = (w1 ∧ w2 ∧ . . . ∧ wn)
1Note that a function f : N → N is said to be negligible in λ if for every
positive polynomial p, f (λ) < 1/p(λ) when λ is sufﬁciently large.
and deﬁne the set DB(q) as DB(q) = ∩n
i=1DB(wi). Depending
on the context, the keyword w1 is assumed to have either the
least frequency of occurrence or to have the least frequency
of updates among all keywords in the conjunction q.
Dynamic SSE. A dynamic searchable symmetric encryp-
tion (SSE) scheme consists of a polynomial-time algorithm
SETUP executed by the client, and protocols SEARCH and
UPDATE executed jointly by the client and the server:
•
•
•
SETUP(λ): A probabilistic algorithm that takes the se-
curity parameter λ. It outputs the tuple (sk, st, EDB),
where sk is the client’s secret-key, st is the client’s in-
ternal state, and EDB is an empty encrypted database.
UPDATE(sk, st, op, (id, w); EDB): A client-server pro-
tocol, where the client takes as input the secret-key
sk, its state st, an operation op ∈ {add, del} and an
identiﬁer-keyword pair (id, w), while the server takes
as input the encrypted database EDB. The protocol
outputs a modiﬁed client state st(cid:48) and a modiﬁed
encrypted database EDB(cid:48) so as to reﬂect the outcome
of the addition/deletion operation.
SEARCH(sk, st, q; EDB): A client-server protocol,
where the client takes as input the secret-key sk, its
state st and a query q, while the server takes as
input the encrypted database EDB. At the end of the
protocol, the client outputs DB(q).
In the above, we adopted the deﬁnition of dynamic SSE
used by Chamani et al. [10]. There exist other deﬁnitions of
dynamic SSE in the literature [28], [15] where the UPDATE
operation takes an entire ﬁle for addition/deletion, which is
functionally equivalent to executing multiple addition/deletion
operations on the relevant
identiﬁer/keyword pairs in our
framework. Finally, we make the implicit assumption that upon
obtaining the set of ﬁle identiﬁers corresponding to a query,
the client performs an additional interaction with the server to
actually retrieve the ﬁles with these identiﬁers.
Correctness. A dynamic SSE is said to be correct if for every
database DB and for every query q, the SEARCH protocol
outputs DB(q) with all but negligible probability.
Security. We refer the reader to the full version of the
paper [31] for the formal security deﬁnition of a dynamic SSE
scheme.
III. DYNAMIC CONJUNCTIVE SSE SCHEMES
A. A Na¨ıve Solution
To motivate our solutions, we begin with a straightforward
extension of the dynamic SSE scheme MITRA introduced by
Chamani et al. [10] from single keyword queries to conjunctive
queries.2 The idea is as follows: on input of a conjunctive
query q = (w1 ∧ . . . ∧ wn), the client and the server run the
original MITRA search protocol in parallel for each keyword
wi. At the end of the search protocol, the client receives a list
2We choose MITRA because it has the best update and search performances
in practice among existing forward and backward private SSE scheme.
However, conceptually, the extension works for all forward and backward
private SSE schemes supporting single keyword search.
4
Client
1)
2)
3)
4)
5)
Sample a uniformly random key KT for PRF F
Initialize UpdateCnt, TSet to empty maps
Set sk = KT and st = UpdateCnt
Set EDB = TSet
Send EDB to the server
Client
1)
2)
3)
4)
5)
6)
Server
Parse sk = KT and st = UpdateCnt
If UpdateCnt[w] is NULL then set UpdateCnt[w] = 0
Set UpdateCnt[w] = UpdateCnt[w] + 1
Set addr = F (KT , w||UpdateCnt[w]||0)
Set val = (id||op) ⊕ F (KT , w||UpdateCnt[w]||1)
Send (addr, val) to the server
Figure 1: MITRACONJ. SETUP (λ)
1)
2)
Parse EDB = TSet
Set TSet[addr] = val
of encrypted ﬁle identiﬁers corresponding to each keyword,
decrypts each such list, and retains only the ﬁle identiﬁers in
the intersection of all the lists.
We refer to this na¨ıve adaptation of MITRA for conjunctive
queries as MITRACONJ. The corresponding setup, update and
search algorithms are described in Figures 1, 2 and 3, respec-
tively. Below, we provide a brief technical overview of how
MITRACONJ handles conjunctive queries. For more details on
the original MITRA scheme, the reader may refer to [10].
Construction Overview. The construction of MITRACONJ is
based on a key-value dictionary called a TSet designed as
follows: for each keyword w, the TSet dictionary stores en-
crypted transcripts corresponding to each operation involving
w. The keys for TSet (which are addresses in the dictionary
storing encrypted values) are generated using a PRF.
During an update operation of the form [op(id, w)], the
client generates the appropriate key-value pair for the TSet
dictionary, and sends it over to the server. The server updates
the dictionaries accordingly. Under the assumption that ﬁle
identiﬁers are never repeated3, the use of PRFs ensures that
these key-value pairs reveal no information to the server about
the underlying operation op, the identiﬁer id or the keyword
w. Since updates are leakage-free, forward privacy follows
immediately.
Finally, let q = (w1 ∧ w2 ∧ . . . ∧ wn) be a conjunctive
query issued by the client. For each keyword wi (in parallel),
the client recovers DB(wi) via the following steps. The client
efﬁciently generates the appropriate keys for the TSet dictio-
nary corresponding to each operation involving the keyword
wi, and sends these across to the server. The server retrieves
the encrypted transcripts corresponding to each operation in-
volving wi and sends these back to the client. Upon receiving
the encrypted transcripts, the client decrypts them to recover
each update operation involving wi. Given this information,
constructing DB(wi) is straightforward. Eventually, the client
computes DB(q) = ∩n
i=1DB(wi).
protocol is proportional to(cid:80)n
as large as(cid:80)n
Search Performance. It is straightforward to observe that the
computational and communication complexity of this search
i=1 |Upd(wi)|, which is at least
i=1 |DB(wi)|. This may be reasonable in practice
if each keyword wi is low-frequency, but is deﬁnitely rather
poor if one or more keywords have very high-frequency of
occurrence.
Figure 2: MITRACONJ. UPDATE (sk, st, op, (id, w); EDB)
Client
1)
2)
3)
Parse sk = KT and st = UpdateCnt
Initialize tokenList1, . . . , tokenListn to empty lists
For i = 1 to n:
a)
b)
For j = 1 to UpdateCnt[wi]:
i)
ii)
End For
Set addri,j = F (KT , wi||j||0)
Set tokenListi = tokenListi ∪ {addri,j}
End For
Send tokenList1, . . . , tokenListn to the server
Parse EDB = TSet
Initialize EOpList1, . . . , EOpListn to empty lists
For i = 1 to n:
a)
b)
For j = 1 to tokenListi.size:
i)
ii)
End For
Set vali,j = TSet[tokenListi[j]]
Set EOpListi = EOpListi ∪ {vali,j}
End For
Send EOpList1, . . . , EOpListn to the client
4)
5)
Server
1)
2)
3)
4)
5)
Client: Final Output Computation
1)
2)
Initialize IdList1, . . . , IdListn to empty lists
For i = 1 to n:
a)
For j = 1 to UpdateCnt[wi]:
i)
Set:
(idi,j||opi,j ) = EOpListi[j]⊕F (KT , wi||j||1)
If opi,j is add then set IdListi = IdListi∪{idi,j}
Else set IdListi = IdListi \ {idi,j}
ii)
iii)
End For
End For
Output IdList = ∩n
b)
3)
4)
i=1IdListi
Figure 3: MITRACONJ. SEARCH (sk, st, q = (w1 ∧ . . . ∧ wn); EDB)
Leakage. Although this scheme inherits many of the for-
ward and backward privacy properties of the original MITRA
scheme, it incurs an additional undesirable leakage: a search
operation over keywords w1, . . . , wn allows the server to learn
|Upd(wi)| (i.e., the total number of update operations) for
each keyword wi,
including those involving ﬁles that are
not relevant to the query, and the corresponding timestamp
associated with each such update operation.
3 This assumption is made in several existing forward and backward private
SSE schemes for single keyword search, most notably in the constructions of
Bost et al. [6] and Chamani et al. [10], including the original MITRA scheme.
Our goal is to reduce both the computational overheads as
well as the leakages in the protocol by tying these to only the
less frequent keywords in the queried conjunction.
5
B. Basic Dynamic Cross-Tags
Client
To achieve the above goal, we introduce the idea of
“dynamic cross-tags”. For ease of understanding, we exemplify
the idea via a simpliﬁed protocol, called Basic Dynamic
Cross-Tags, or BDXT in short. The corresponding algorithms
for setup, updates and search are described in Figures 4, 5
and 6 , respectively. The main changes from MITRACONJ are
highlighted in red.
Assume that, given a conjunctive query q = (w1∧. . .∧wn),
the client can choose the keyword with the least frequency of
occurrence (at the cost of small additional storage). Assume
without loss of generality that this keyword is w1. We will refer
to w1 as the s-term (where s stands for “special”) and to each
of the remaining keywords w2, . . . , wn as a x-term (where x
stands for “cross”).
Handling the s-Term. In our simpliﬁed protocol presented
below, the client still runs an instance of the MITRA search
protocol, albeit only for the s-term w1, following which the
client is able to retrieve the set of all identiﬁers corresponding
to ﬁles currently containing w1. In the process,
the com-
putational overheads incurred by the client and the server
are both proportional to DB(w1), and the server only learns
|DB(w1)| (assuming no padding for now).
At this point, an obvious solution is as follows: the client
downloads all the ﬁles containing w1, parses them locally and
retains only those ﬁles that contain all the other keywords
w2, . . . , wn. This is extremely inefﬁcient from a performance
point of view, since it requires downloading and parsing many
more ﬁles than actually necessary. In order to handle this
more efﬁciently, we introduce the idea of “dynamic cross-tags”
below.
Dynamic Cross-Tags. Concretely, in addition to the TSet dic-
tionary in the previous scheme, we use an additional dictionary
called the XSet that has a pair of designated addresses for each
possible identiﬁer-keyword pair (id, w). At any given time, this
address pair is populated with one of the following value pairs:
•
•
•
(⊥,⊥) : (id, w) was neither inserted nor deleted
(1,⊥) : (id, w) was inserted but not yet deleted
(1, 1) : (id, w) was inserted and later deleted
where ⊥ denotes the corresponding address is empty. The
keys pointing to these addresses are referred to as “dynamic
cross-tags”, and represent a major technical contribution of
this work. Unlike the “cross-tags” in the scheme of Cash et
al. [9] which can only determine the presence/absence of any
identiﬁer-keyword pair in a static dataset, the keys for our
XSet dictionary can determine the presence/absence of any
identiﬁer-keyword pair in a dynamic dataset across any number
of update operations.
These dynamic cross-tags are generated using PRFs, so
that they may be efﬁciently reproduced by the client dur-
ing update/search queries. More concretely, for an identiﬁer-
keyword pair (idj, wi), the corresponding “insertion-cross-tag”
and “deletion-cross-tag” are generated as:
xtagi,j,add = F (KX , wi||idj||add) , xtagi,j,del = F (KX , wi||idj||del).
This is illustrated in Figure 5.
1)
2)
3)
4)
5)
Sample a uniformly random key KT , KX for PRF F
Initialize UpdateCnt, DBCnt, TSet, XSet to empty maps
Set sk = (KT , KX ) and st = (UpdateCnt, DBCnt)
Set EDB = (TSet, XSet)
Send EDB to the server
Figure 4: BDXT. SETUP (λ)
Client
1)
2)
Parse sk = (KT , KX ) and st = (UpdateCnt, DBCnt)
If UpdateCnt[w] is NULL then set:
UpdateCnt[w] = DBCnt[w] = 0
Set UpdateCnt[w] = UpdateCnt[w] + 1
If op is add then set DBCnt[w] = DBCnt[w] + 1
Else set DBCnt[w] = DBCnt[w] − 1
Set addr = F (KT , w||UpdateCnt[w]||0)
Set val = (id||op) ⊕ F (KT , w||UpdateCnt[w]||1)
Set xtag = F (KX , w||id||op)
Send (addr, val, xtag) to the server
3)
4)
5)
6)
7)
8)
9)
Server
1)
2)
3)
Parse EDB = (TSet, XSet)
Set TSet[addr] = val
Set XSet[xtag] = 1
Figure 5: BDXT. UPDATE (sk, st, op, (id, w); EDB)
Handling Updates. The update procedure for BDXT is de-
scribed in Figure 5. The TSet dictionary is updated as in the
previous scheme MITRACONJ, and hence incurs no leakages.
The XSet dictionary is updated as follows: when an identiﬁer-
keyword pair (id, w) is inserted, the entry at the “insertion
cross-tag” corresponding to (id, w) is updated to 1. At a later
time, when (id, w) is deleted, the entry at the “deletion-cross-
tag” corresponding to (id, w) is updated to 1.
Differences with Static Cross-Tags. A key difference in our
approach as compared to conjunctive SSE schemes for static
databases [9], [29] is that our cross-tags are computed on-the-
ﬂy with every update operation, and not at setup. In the works
of Cash et al. [9] and Lai et al. [9], the presence or absence of
a cross tag in the XSet simply indicated whether a given ﬁle
contains a certain keyword or not. By involving the operation
op ∈ {add, del} in the generation of the cross-tag, we have
extended its semantic meaning to now indicate whether a
certain operation (either addition or deletion) involving a given
keyword-ﬁle pair has occurred or not. As a result, the XSet
data structure, which was an inherently static data structure
in the previous works, is now transformed into a dynamic
data structure that can be updated without any additional pre-
computation at setup. We managed to do this while maintaining
forward privacy (because a cross-tag does not reveal any
information about the underlying operation, ﬁle identiﬁer or
keyword), which is crucial for achieving resistance against
leakage-abuse attacks [7] and ﬁle-injection attacks [38].
In addition, as we demonstrate subsequently, our dynamic
cross-tags are both forward and backward private,
in the
sense that they also incur minimal leakages during conjunctive
searches. In particular, our technique of treating additions and
6
Client: Round 1
1)
2)
3)
4)
5)
6)
Parse sk = (KT , KX ) and st = (UpdateCnt, DBCnt)
Use DBCnt to identify the least frequent keyword (assumed to be w1
w.l.o.g)
Initialize stokenList to an empty list
For j = 1 to |Upd(w1)|:
a)
b)