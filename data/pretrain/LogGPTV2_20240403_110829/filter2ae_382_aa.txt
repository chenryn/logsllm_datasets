**译者：知道创宇404实验室翻译组  
原文链接：**
## 摘要
  * 我们通过IE11/Edge Legacy和MS Teams在Windows 10上发现了一个驱动代码执行漏洞，该漏洞由Windows 10/11默认处理程序中`MS -officecmd:` URI的参数注入触发。
  * 通过其他浏览器进行攻击，受害者需要接受一个不显眼的确认对话框。或者，通过执行不安全URL处理的[桌面应用程序](https://positive.security/blog/url-open-rce)，恶意URI也可以传递。
  * 微软漏洞赏金计划 (MSRC) 响应不及时:起初，他们判断错误，并且完全忽略了这个问题。在我们反映后，该问题被归类为“关键，RCE”，但对其进行了分类的悬赏广告只获得了十分之一的奖励（5千美元与5万美元的差距）。他们在5个月后提交的补丁未能正确解决基本参数注入（目前在Windows 11上仍然存在）。 
  * 我们的研究过程很简单：我们决定两周内在默认的Windows10 URI处理程序中发现一个代码执行漏洞。考虑到Windows附带的URI处理程序的数量，很可能其他处理程序也可以找到漏洞。
* * *
## 开发/演示
代码执行是由一个恶意网站触发的，该网站执行Javascript重定向到一个定制的`ms-officecmd:`URI(微软Office
UWP应用程序用来启动其他Office桌面应用程序的方案)。我们利用URI处理程序中的一个参数注入漏洞，绕过Electron中的一个安全措施，通过Microsoft
Teams Electron应用程序的`——gpu-launcher`参数注入一个任意的操作系统命令。
通过MS Edge在Windows 10上驱动RCE
这是在上面的视频中使用的`ms-officecmd:`URI(为了可读性，使用JSON缩进):
    ms-officecmd:{
       "LocalProviders.LaunchOfficeAppForResult": {
           "details": {
               "appId": 5,
               "name": "irrelevant",
               "discovered": {
                   "command": "irrelevant"
               }
           },
           "filename": "a:/b/ --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\System32\\cmd /c ping 2016843009 && \""
       }
    }
除Internet Explorer和Microsoft Edge Legacy之外的浏览器在打开恶意URI之前会显示一个很不显眼的确认对话框:
不同的浏览器显示出的确认对话框
作为通过恶意网站进行攻击的替代方案，精心设计的`ms-officecmd:`URI也可以通过执行不安全URL处理的[桌面应用程序](https://positive.security/blog/url-open-rce)传递。
这种特殊方法的先决条件是安装Microsoft Teams但不运行。在下面环节中，我们还将展示在MS Teams的帮助下和没有MS
Teams的帮助下，scheme和参数注入如何以其他方式来使用。
注意:虽然Windows 11在研究的时候还没有发布，但它也(仍然)受到相同的参数注入漏洞`ms-officecmd:`URI处理程序的影响。
* * *
## ToC / 研究过程
### 动机:改进恶意URI攻击场景
在2021年1月，我们花了一些时间分析流行的桌面应用程序如何处理用户提供的URI，发现了其中大多数都存在代码执行漏洞。关于我们报告的详细文章可以在[我们2021年4月的文章](https://positive.security/blog/url-open-rce)中找到。
为了展示我们在Windows上的发现，我们主要利用了与内容相关的架构(`nfs`， `dav`，
`file`，…)，以及托管在互联网可访问的文件共享上的可执行文件/jar文件。关于这些有效负载，一定要注意，它们要么需要安装Java，要么需要一个对话框来运行待确认的可执行文件。
在此过程中，我们还发现了一个[WinSCP的URI处理中的代码执行漏洞](https://positive.security/blog/url-open-rce#bonus-vulnerability-winscp)。WinSCP实际上是在Windows上处理各种URI方案的标准，但它并没有预装在操作系统中。
第三方URI处理程序的漏洞并不新鲜，之前的例子也有很多:
  * [Code execution in the `steam:` URI handler (2012)](https://revuln.com/files/ReVuln_Steam_Browser_Protocol_Insecurity.pdf)
  * [Code execution affecting Electron apps which register custom protocols (CVE-2018-1000006)](https://www.electronjs.org/blog/protocol-handler-fix)
  * [Code execution in the `teamviewer10:` URI Handler (CVE-2020-13699)](https://jeffs.sh/CVEs/CVE-2020-13699.txt)
我们希望进一步改进基于恶意URI的攻击场景，但要先在Windows预装的URI处理程序中找到一个代码执行漏洞。
### 在Windows 10中枚举URI处理程序
Windows 10提供了大量与不同操作系统特性或其他微软软件相关的自定义URI处理程序。
对于我们的目的，找到注册的URI处理程序有个非常方便的方法，就是在注册表中重复搜索'URL Protocol':
在Windows注册表中查找URI处理程序
`Computer\HKEY_CLASSES_ROOT\*`中的任何命中都意味着包含文件夹的名称与已注册URI处理程序的方案对应。注册表还包含关于每一项的更多信息，比如用于调用相应处理程序的shell命令。有一个非常简单和更实际的方法可以更好地了解这个方案是与什么相关，那就是在浏览器地址栏中输入它，后跟一个`:`，然后按enter:
通过Edge中的`calculator:`方案打开calc.exe
### `ms-officecmd:`因其复杂度而有趣
`ms-officecmd:`scheme立即引起了我们的注意，因为它有一个很有意思的名字：ms-Office是一套非常复杂的应用程序，有许多旧功能和多年的开发经验。最重要的是，该方案以“command”的缩写结尾，这意味着更具复杂性且有可能用于注射。
当我们开始使用它时，我们注意到一个名为`LocalBridge.exe`的可执行文件，它将短暂运行，但没有明显的外部影响。为了更深入地了解发生的情况，我们检查了Windows事件日志，其中包含一些非常有用的信息：
.NET JsonReaderException 由打开URI `ms-officecmd:invalid`触发
当打开一个由空的、有效的JSON有效负载`ms-officecmd:{}`组成的URI时，同样的异常不会发生，这暗示我们关于有效URI的结构是什么样子的。
观察URI处理程序中的JSON解析之后，我们最终确认了`ms-officecmd:`URI有潜力完成非常复杂的事情。
### 反编译 LocalBridge.exe 和 AppBridge.dll
为了更好地了解，我们决定从反编译`LocalBridge.exe`开始:
`LocalBridge.exe`的反编译源:URI验证和`LaunchOfficeAppValidated`调用(dotPeek)
c#代码包含了关于有效JSON有效负载结构的更多信息。在它的帮助下，我们再次开始实验:
    ms-officecmd:{
       "LocalProviders.LaunchOfficeAppForResult": {
           "details": {
               "name": "Word"
           },
           "filename": "C:\\Windows\\System32\\calc.exe"
       }
    }
不幸的是，我们并没有在`LocalBridge.exe`身上有太多的发现。我们接着分析`AppBridge.dll`，它包含`LaunchOfficeAppValidated`方法，JSON有效负载最终传递给它:
`LocalBridge.exe`的反编译源:从`AppBridge.dll`导入(dotPeek)的`LaunchOfficeAppValidated`
我们通过分解原生的`AppBridge.dll`库，提取了更多潜在的JSON属性名，但如何使用它们还不是很清楚。
`AppBridge.dll`: 相关的unicode字符串(来自Ghidra)
### 调试Office UWP应用程序（Electron PWA）
当`LocalBridge.exe/AppBridge.dll`的分析没有迅速产生预期的结果时，我们采用了一种不同的并行方法：我们可以尝试检查生成此类URI的应用程序，而不是剖析处理`ms
officecmd:`URI的应用程序。
虽然我们不知道哪些应用程序可以生成此类URI，但之前我们偶然发现了Office UWP应用程序，由于以下原因，该应用程序很可能成为候选应用程序：
  * 该应用程序可以通过自定义方案`ms officeapp:`打开，该方案与我们的研究目标`ms officecmd:`非常相似
  * 这个应用程序的行为几乎与 office365在 https://www.office.com/上的网页界面相同，同时它还允许打开一些无法从网页上打开的桌面应用程序
Office UWP应用程序预装在Windows 10上
直觉表明，每当Office UWP应用程序触发要打开的Office桌面应用程序时，都会在内部使用`ms
officecmd:`scheme。这一怀疑后来得到证实。
使用微软自己的“Edge DevTools Preview”应用程序，我们能够连接到该进程并调试Office UWP应用程序。
Microsoft Edge DevTools Preview (右) 提供 Office UWP app (左) 作为调试目标
得到我们想要的信息是迅速而简单的:
  1. 执行全局源代码搜索(`ctrl`\+ `shift`+`f`)来查找 scheme 关键字`ms-officecmd`: 唯一找到的是`launchProtocol`常量的定义
  2. 执行另一个搜索来查找`launchProtocol`常量的用法: 第一个命中在`launchViaProtocol`方法中找到，这看起来很有用
  3. 在`launchViaProtocol`中添加一个断点并尝试触发它: 点击左边栏上的 Outlook 图标即可
  4. 从局部变量中提取 JSON 有效负载结构
Office UWP应用程序:`launchProtocol`常量定义(Edge DevTools 预览)
Office UWP应用程序:`ms-officecmd:` JSON有效负载提取本地变量`n` (Edge DevTools预览)
一个更快的恢复JSON有效负载的替代方案是使用 [Microsoft Sysinternals Process Monitor
tool](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)
来记录与`LocalBridge.exe`相关的`Process Create`事件:
`ms-officecmd:` 进程监视器显示的JSON负载
### ms-officecmd: 基本的JSON负载结构
有了提取的JSON有效负载，我们终于能够通过`ms-officecmd:`URI打开Office桌面应用程序。具体来说，从Office
UWP应用程序中提取的有效负载可以用来打开Outlook:
    ms-officecmd:{
       "id": 3,
       "LocalProviders.LaunchOfficeAppForResult": {
           "details": {
               "appId": 8,
               "name": "Outlook",
               "discovered": {
                   "command": "c:\\program files\\microsoft office\\root\\office16\\outlook.exe"
               }
           },
           "filename": ""
       }
    }
在随后的测试中，很明显有两个属性可以被操纵，而且效果立即可见: