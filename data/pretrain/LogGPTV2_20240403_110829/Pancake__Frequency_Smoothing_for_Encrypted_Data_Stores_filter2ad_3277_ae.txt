### Figure 6: Handling Dynamic Distributions

**(a, b)** PANCAKE is capable of detecting larger distribution changes with fewer queries compared to smaller changes.

**(c)** PANCAKE can adapt from a skewed to a uniform distribution. The size of the UpdateCache, which stores values for keys while propagating writes to their replicas, increases as the skew decreases. We evaluate this overhead by measuring the UpdateCache size for workloads with varying degrees of skew using YCSB Workload A (50% read, 50% write). As shown in Figure 7(c), decreasing the skewness from 0.99 to 0.8 increases the UpdateCache size from 5% to 9% of server storage. Despite this, the UpdateCache size remains a small fraction of the server storage even at low skew.

### Effect of Batch Size B (Figure 8(a)-8(b))

Recall from §4.4 that for a batch size of \( B \), PANCAKE incurs a bandwidth overhead of \( B \times \). Figure 8(a) demonstrates that when network bandwidth is the bottleneck, PANCAKE's throughput degrades proportionally with the value of \( B \). Conversely, larger \( B \) values lead to lower tail latency, as requests spend less time waiting in the query queue. Specifically, while \( B = 2 \) results in an unstable queuing system (as shown in Figure 8(b)), \( B > 2 \) experiences minimal or no queuing delays. Thus, \( B \) presents a tradeoff between tail latency and throughput, with \( B = 3 \) providing an optimal balance. We do not evaluate latency versus batch size since latency is dependent on query inter-arrival times. For fixed inter-arrival times, latency overheads can be extrapolated from Figure 8(b).

### 2462 29th USENIX Security Symposium
**USENIX Association**

### Figure 8: Impact of Batch Size on PANCAKE Throughput and Query Queue Size

**(a)** Effect of batch size on throughput.

**(b)** Effect of batch size on query queue.

See §6.3 for a detailed discussion.

### 7. Discussion

PANCAKE represents a significant step towards designing high-performance data stores that are secure against access pattern attacks by passive persistent adversaries. In this section, we discuss several avenues for future research.

#### Correlated Accesses

Our security analysis for PANCAKE assumes that queries are independent. However, in some application contexts, queries can be correlated. To our knowledge, frequency analysis for correlated queries has not been extensively explored. Preliminary results in the full version [25] show that security in a variant of ROR-CDA that allows arbitrary correlations is equivalent to ORAM security, and thus must suffer from the same lower bounds on ORAM efficiency. This result relies on the adversary being able to construct very specific and artificial query correlations. We believe new technical tools are needed to explore access pattern attacks under realistic query correlations.

#### Stronger Adversaries

PANCAKE targets a security model where the attacker does not tamper with data or perform rollback attacks. The use of authenticated encryption in PANCAKE makes tampering detectable, and preventing rollbacks is possible via authenticated operation counters. However, unlike ORAM, PANCAKE does not provide security against adversaries that can inject their own queries [12, 68]. We discuss how such chosen-query attacks could work on PANCAKE and how it mitigates these attacks to some extent in the full version [25]. Informally, we show that PANCAKE performs no worse than other efficient schemes against such attacks.

#### Dynamic Distributions

For dynamic distributions, PANCAKE’s security is proven under the assumption that changes in distribution happen instantaneously and can be detected instantly. While our evaluation suggests that PANCAKE can detect changes in distribution within a few seconds, it would be beneficial to generalize our analysis to capture more gradual changes in distribution.

#### Improved Proxy Implementation

The current PANCAKE implementation uses a stateful proxy that stores distributions (\(\hat{\pi}, \pi_f\)), key-to-replica counts, and pending writes in the UpdateCache. It would be interesting to explore implementations that allow the proxy to be more scalable (e.g., using a distributed proxy implementation) and fault-tolerant (e.g., using techniques similar to [18]).

#### Variable-Sized Values

Similar to existing ORAM designs, the current PANCAKE design assumes that values stored in the data store are fixed-size or have been padded to a fixed maximum length to avoid attacks based on length leakage. While this is useful for many applications (e.g., storing tweets, and storage systems like DynamoDB have upper bounds on value sizes), forcing values to be padded can cause prohibitive space overheads if there is a large difference between the largest and smallest values. Extending PANCAKE to avoid such storage overheads while protecting against length leakage attacks would be valuable.

#### Hiding Access Patterns in Cache-Based Systems

Many real-world systems execute queries on SSD-based storage with in-memory cache (e.g., MySQL server with memcached as a cache [44]). Hiding access patterns seems to conflict with achieving high performance in such settings. For workloads with skewed access patterns, serving popular keys from the faster cache [69] can improve performance but at the cost of leaking that keys in the cache are accessed more frequently. Hiding access patterns requires all keys to be accessed uniformly, invalidating the benefits of a cache without additional mechanisms. Our preliminary evaluation, presented in the full version [25], shows that depending on the distribution and available cache size, existing systems, including PANCAKE, can experience up to an order-of-magnitude throughput degradation compared to insecure baselines that effectively exploit the benefits of cache. Exploring techniques to avoid such performance degradation while providing security against access pattern attacks would be valuable.

### 8. Conclusion

In this paper, we explored a novel frequency-smoothing-based countermeasure against access pattern attacks on outsourced storage in a new formal security model. We instantiated this approach in a new system called PANCAKE, the first to resist access pattern attacks by persistent passive adversaries while maintaining low constant factor overheads in storage and bandwidth. As such, PANCAKE’s throughput is 229× higher than PathORAM and within 3–6× of insecure baselines.

### Acknowledgements

We thank the Usenix Security reviewers for their insightful feedback. We also thank our shepherd Amir Rahmati for his help with revisions to the paper. We thank Haris Mughees for his help in the early stages of the project. Grubbs was supported by NSF DGE-1650441. This work was in part supported by NSF grants 1704742, 1704296, 1514163, a Google Faculty Research Award, and a gift from Snowflake.

**USENIX Association**
**29th USENIX Security Symposium 2463**

### References

[1] Rachit Agarwal, Anurag Khandelwal, and Ion Stoica. Succinct: Enabling Queries on Compressed Data. In NSDI, 2015.

[2] Ganesh Ananthanarayanan, Sameer Agarwal, Srikanth Kandula, Albert Greenberg, Ion Stoica, Duke Harlan, and Ed Harris. Scarlett: Coping with Skewed Content Popularity in MapReduce Clusters. In EuroSys, 2011.

[3] Gilad Asharov, Ilan Komargodski, Wei-Kai Lin, Kartik Nayak, Enoch Peserico, and Elaine Shi. Optorama: Optimal Oblivious RAM. In EUROCRYPT, 2020.

[4] Berk Atikoglu, Yuehai Xu, Eitan Frachtenberg, Song Jiang, and Mike Paleczny. Workload Analysis of a Large-scale Key-value Store. In SIGMETRICS, 2012.

[5] Baffle. https://baffle.io.

[6] Mihir Bellare, Anand Desai, Eron Jokipii, and Phillip Rogaway. A Concrete Security Treatment of Symmetric Encryption. In FOCS, 1997.

[7] Gyora M. Benedek and Alon Itai. Learnability with Respect to Fixed Distributions. Theor. Comput. Sci., 1991.

[8] Vincent Bindschaedler, Paul Grubbs, David Cash, Thomas Ristenpart, and Vitaly Shmatikov. The Tao of Inference in Privacy-Protected Databases. IACR ePrint, 2017. http://eprint.iacr.org/2017/1078.

[9] Vincent Bindschaedler, Muhammad Naveed, Xiaorui Pan, XiaoFeng Wang, and Yan Huang. Practicing Oblivious Access on Cloud Storage: The Gap, the Fallacy, and the New Way Forward. In CCS, 2015.

[10] Elette Boyle and Moni Naor. Is There an Oblivious RAM Lower Bound? In ITCS, 2016.

[11] Nathan Bronson, Zach Amsden, George Cabrera, Prasad Chakka, Peter Dimov, Hui Ding, Jack Ferris, Anthony Giardullo, Sachin Kulkarni, Harry C Li, et al. TAO: Facebook’s Distributed Data Store for the Social Graph. In ATC, 2013.

[12] David Cash, Paul Grubbs, Jason Perry, and Thomas Ristenpart. Leakage-Abuse Attacks Against Searchable Encryption.