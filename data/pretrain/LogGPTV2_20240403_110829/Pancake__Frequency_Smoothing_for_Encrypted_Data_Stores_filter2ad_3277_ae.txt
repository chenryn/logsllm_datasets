Figure 6: Handling dynamic distributions. (a, b) PANCAKE detects larger distribution changes in fewer queries, relative to smaller changes.
(c) PANCAKE can adapt from a skewed to uniform distribution with UpdateCache size  1 replica in PANCAKE increases
with decrease in skew. This can lead to an increase in Update-
Cache size, since PANCAKE caches values for such keys while
propagating writes to their replicas. We evaluate this overhead
by measuring UpdateCache size for workloads with different
degrees of skew for the YCSB Workload A (50% read-50%
write). Figure 7(c) shows that decreasing skewness from 0.99
to 0.8 increases UpdateCache size from 5% to 9% of server
storage, i.e., UpdateCache size remains a small fraction of
server storage even at low skew.
Effect of batch-size B (Figure 8(a)-8(b)). Recall from §4.4
that, for a batch size of B, PANCAKE incurs bandwidth over-
head of B×; Figure 8(a) shows that when network bandwidth
is the bottleneck, PANCAKE throughput degrades proportion-
ally to the value of B. At the same time, larger B values leads
to lower tail latency, since requests wait in the query queue
for fewer batches — while B = 2 leads to an unstable queu-
ing system (Figure 8(b)), B > 2 observes little or no queuing
delays. B thus exposes a tradeoff between tail latency and
throughput, where B = 3 provides a sweet spot for both. We
do not evaluate latency vs. batch size since latency is tied to
query inter-arrival times. For ﬁxed inter-arrival times, latency
overheads can be extrapolated from Figure 8(b).
2462    29th USENIX Security Symposium
USENIX Association
ACYCSBWorkload050100150200WANProxyThroughput(KOps)Insecure-Baselinepancake02468#Queries(xmillion)051015UpdateCachesize(%ofserverstorage)20%writes40%writes60%writes80%writes100%writes02468#Queries(xmillion)05101520UpdateCachesize(%ofserverstorage)Skewness=.99Skewness=.95Skewness=.9Skewness=.85Skewness=.8(a) Effect of batch size on throughput
(b) Effect of batch size on query queue
Figure 8: (a, b) Impact of batch size on PANCAKE throughput and
query queue size. See §6.3 for discussion.
7 Discussion
PANCAKE is a ﬁrst step toward designing high-performance
data stores that are secure against access pattern attacks by
passive persistent adversaries. In this section, we discuss sev-
eral possible avenues for future research.
Correlated accesses. Our security analysis for PANCAKE re-
lies on the assumption that queries are independent; in some
application contexts, queries can be correlated. To the best
of our knowledge, frequency analysis for correlated queries
has not been explored. We present some preliminary results
in the full version [25]; speciﬁcally, we show that security
in a variant of ROR-CDA that allows arbitrary correlations
is equivalent to ORAM security, and must therefore suffer
from the same lower bounds on ORAM efﬁciency. However,
this result relies on the adversary being able to construct very
speciﬁc and artiﬁcial query correlations. We believe that we
need new technical tools to explore access patterns attacks
under realistic query correlations.
Stronger adversaries. PANCAKE targets a security model
where the attacker does not tamper with data or do rollback
attacks. PANCAKE’s use of authenticated encryption means
tampering is detectable, and preventing rollbacks is possible
via authenticated operation counters. However, unlike ORAM,
PANCAKE does not provide security against adversaries that
can inject their own queries [12, 68]. We discuss how such
chosen-query attacks could work on PANCAKE, and how it
mitigates such attacks to some extent in the full version [25].
Informally, we show that PANCAKE does no worse than other
efﬁcient schemes against such attacks.
Dynamic distributions. For the case of dynamic distribu-
tion, PANCAKE’s security is proven under the assumption that
changes in distribution happen instantaneously and can be
detected instantaneously. While our evaluation suggests that
PANCAKE can detect changes in distribution within a few
seconds, it would be nice to generalize our analysis to capture
more gradual changes in distribution.
Improved proxy implementation. The current PANCAKE
implementation uses a stateful proxy that stores distributions
(ˆπ, π f ), key→replica counts, and pending writes in the Up-
dateCache. It would be interesting to explore implementations
that allow the proxy to be more scalable (e.g., using a dis-
tributed proxy implementation) and fault tolerant (e.g., using
techniques similar to [18]).
Variable-sized values. Similar to existing ORAM designs, to
avoid attacks based on length leakage, current PANCAKE de-
sign assumes that values stored in the data store are ﬁxed-size
or have been padded to a ﬁxed maximum length. While this is
useful for many applications (e.g., values have ﬁxed size when
storing tweets, and storage systems like DynamoDB have up-
per bounds on value sizes), forcing values to be padded can
cause prohibitive space overheads if there is a large difference
between the largest and smallest values. It would be interest-
ing to extend PANCAKE design to avoid storage overheads
while protecting against attacks based on length leakage.
Hiding access patterns in cache-based systems. Many real-
world systems execute queries on SSD-based storage with
in-memory cache (e.g., MySQL server with memcached as
a cache [44]). The problem of hiding access pattern seems
to be at odds with achieving high performance in such de-
ployment settings — intuitively, for workloads with skewed
access patterns, it is possible to achieve performance gains
by serving popular keys from the faster cache [69] at the cost
of leaking that keys in cache are accessed more frequently
than those not in cache. Hiding access patterns requires all
keys to be accessed uniformly thus invalidating the beneﬁts
of a cache without any additional mechanism. Our prelim-
inary evaluation, presented in the full version [25], shows
that depending on the distribution and available cache size,
existing systems including PANCAKE can observe as much as
an order-of-magnitude throughput degradation compared to
the insecure baseline that can effectively exploit the beneﬁts
of cache. It would be interesting to explore techniques that
avoid such performance degradation while providing security
against access pattern attacks.
8 Conclusion
In this paper, we explored a novel frequency-smoothing based
countermeasure against access pattern attacks on outsourced
storage in a new formal security model. We instantiated this
approach in a new system called PANCAKE, the ﬁrst to resist
access pattern attacks by persistent passive adversaries while
maintaining low constant factor overheads in storage and
bandwidth. As such, PANCAKE’s throughput is 229× higher
than PathORAM, and within 3–6× of insecure baselines.
Acknowledgements
We thank the Usenix Security reviewers for their insightful
feedback. We also thank our shepherd Amir Rahmati for his
help with revisions to the paper. We thank Haris Mughees
for his help in the early stages of the project. Grubbs was
supported by NSF DGE-1650441. This work was in part sup-
ported by NSF grants 1704742, 1704296, 1514163, a Google
Faculty Research Award, and a gift from Snowﬂake.
USENIX Association
29th USENIX Security Symposium    2463
2345Batchsize020406080Throughput(KOps)025005000750010000#Queries050100QueryqueuesizeB=2B=3B=4B=5References
[1] Rachit Agarwal, Anurag Khandelwal, and Ion Stoica.
Succinct: Enabling Queries on Compressed Data. In
NSDI, 2015.
[2] Ganesh Ananthanarayanan, Sameer Agarwal, Srikanth
Kandula, Albert Greenberg, Ion Stoica, Duke Harlan,
and Ed Harris. Scarlett: Coping with Skewed Content
Popularity in Mapreduce Clusters. In EuroSys, 2011.
[3] Gilad Asharov, Ilan Komargodski, Wei-Kai Lin, Kar-
tik Nayak, Enoch Peserico, and Elaine Shi. Optorama:
Optimal oblivious ram. In EUROCRYPT, 2020.
[4] Berk Atikoglu, Yuehai Xu, Eitan Frachtenberg, Song
Jiang, and Mike Paleczny. Workload Analysis of a Large-
scale Key-value Store. In SIGMETRICS, 2012.
[5] Bafﬂe. https://baffle.io.
[6] Mihir Bellare, Anand Desai, Eron Jokipii, and Phillip
Rogaway. A concrete security treatment of symmetric
encryption. In FOCS, 1997.
[7] Gyora M. Benedek and Alon Itai. Learnability with
respect to ﬁxed distributions. Theor. Comput. Sci., 1991.
[8] Vincent Bindschaedler, Paul Grubbs, David Cash,
Thomas Ristenpart, and Vitaly Shmatikov. The tao of
inference in privacy-protected databases. IACR ePrint,
2017. http://eprint.iacr.org/2017/1078.
[9] Vincent Bindschaedler, Muhammad Naveed, Xiaorui
Pan, XiaoFeng Wang, and Yan Huang. Practicing obliv-
ious access on cloud storage: the gap, the fallacy, and
the new way forward. In CCS, 2015.
[10] Elette Boyle and Moni Naor. Is there an oblivious RAM
lower bound? In ITCS, 2016.
[11] Nathan Bronson, Zach Amsden, George Cabrera, Prasad
Chakka, Peter Dimov, Hui Ding, Jack Ferris, Anthony
Giardullo, Sachin Kulkarni, Harry C Li, et al. TAO:
Facebook’s Distributed Data Store for the Social Graph.
In ATC, 2013.
[12] David Cash, Paul Grubbs, Jason Perry, and Thomas Ris-
tenpart. Leakage-abuse attacks against searchable en-