UID Checks. System services mediate access to certain priv-
ileged resources based on the caller’s UID. To enforce this
check, the system services compare the caller’s UID with de-
ﬁned privileged UIDs ( e.g., ROOT_UID and SYSTEM_UID).
To evaluate the privilege requirement for these checks, we map
all UID checks smaller than FIRST_APPLICATION_UID
(the start of the range of UIDs reserved to apps) to the System
level:
evalAppP riv(U ID = c,
with c 
Secondary > Guest > ⊥. Where P rimary is the most
privileged user (i.e., owning / administrating the device); it
cannot be removed by other users and is always running in the
background even when other users are running. Secondary is
less privileged (e.g., cannot access sms and telephony functions
by default) while Guest is the least privileged.
We further deﬁne a function evalU srP riv that evaluates
a user privilege check to one of the privilege level.
7
int uid = Binder.getCallingUid();
if (UserHandle.getUserId(uid) != UserHandle.USER_OWNER ) {
Log.w(T, "proximity alerts are available only to primary
Fig. 5. Approach
2
3
4
5
evalU srP riv : U srP rivCheck (cid:55)→ U serP rivilege
As shown in Table I, Android relies on the UserID and as-
sociated ﬂags to enforce user privilege separation. For instance,
the following code (from the LocationManagerService)
shows how proximity alerts are only available to the owner of
the device.
1 public void requestGeofence(LocationRequest request,
Geofence geofence, ..) {
user");
return;}
Some normalization rules of user privilege checks are as
follows. Others are omitted due to space limit.
evalU srP riv(U serID = U SER OW N ER) = P rimary
evalU srP riv(U serF lag = F LAG ADM IN ) = P rimary
evalU srP riv(U serF lag = F LAG GU EST ) = Guest
2) User Ownership and Status Perspectives.: Android
leverages the user ID to ensure that a user cannot manipu-
late other user’s settings or perform sensitive operations on
behalf of others. Similar to checking the owner of an app
(Section III-B2), enforcing the user ownership is generally
performed by comparing a calling user ID with a user ID
supplied as a parameter to the public API.
Besides, through user-switches, a user can still be running
in the background when another user logs in. Thus, Android
further checks the status of a user (i.e., active or inactive) to
prevent inactive user from spying on active users or tamper
with settings affecting them (e.g., an inactive user starts a
camera recording session to spy on the active user). The check
is usually done by comparing the calling user ID with that of
the currently active user.
Since the modeling of these perspectives shares a lot of
similarity with the corresponding perspectives for app checks.
We omit the details.
3) Restrictions Perspective.: This perspective adds another
layer of security in the multi-user environment. Each user has
an associated user restriction list containing non-permissible
operations. This list is created when the user account was
created and can only be updated by the system process (or
the device admin). For example, by default, secondary users
cannot send, receive sms messages, or issue outgoing phone
calls. Guest users have additional restrictions (cannot conﬁgure
wiﬁ or install apps from unknown sources).
enforces
particular
upon
Android
the
performing
users
ConnectivityManagerService ensures
with DISALLOW_NET WORK_RESET restrictions cannot
perform a network reset as shown in the following:
the
user
operations.
that
restrictions
For
example,
restrictions are more ﬁne-grained so that different restrictions
have unique meanings. As such, the Restriction domain is
the universal set of all the deﬁned restrictions. The semantics
function evalU srRestriction evaluates a restriction check to
the corresponding restriction.
IV. SYSTEM DESIGN
Our tool, built on top of WALA [23], follows the high-
level work ﬂow depicted in Figure 5. First, for each input
Android ROM, we extract the framework class ﬁles and collect
candidate system services. For each system service, we locate
all publicly accessible entry points and build a call graph
starting from each entry. We then model and normalize all
security related checks appearing inside the call graph of a
particular entry point.
A. Preprocessing
Given an Android image, AceDroid extracts its framework
class ﬁles. As different versions or vendors might pack the
code in different formats, we employ several existing tools to
handle each format gracefully [2], [5], [18], [4].
System Services Collection. Identifying exposed system ser-
vices in a decompiled Android ROM is not straightfor-
ward. System services registration is scattered throughout
the framework code. The registration point might further
vary across AOSP and custom Android images. To iden-
tify the services, we follow the key observation that
the
registration APIs are quite stable across Android customiza-
tions and upgrades. Particularly, the APIs addService and
publishBinderService allow publishing a framework
system service through registering in the service manager.
AceDroid ﬁrst pinpoints the invocation of these two APIs in
the framework, then resolves the registered service class type.
Entry Point Identiﬁcation. To collect public entry points, we
ﬁrst identify the exposed interface class of each service and
then retrieve its declared public APIs. We do also mark the
onReceive APIs in the identiﬁed services as public entry
points. Please note that unlike Kratos which considers only
unprotected receivers as public entry points, AceDroid extracts
both protected and non-protected receivers. This design deci-
sion aims to detect the inconsistent cases where two receivers
lead to the same sink point such that one is protected while
the other is not. A protected broadcast action is evaluated to
the highest privilege in our modeling.
1 public void factoryReset() {
2
3
enforceConnectivityInternalPermission();
if (mUserManager.hasUserRestriction
(UserManager.DISALLOW_NETWORK_RESET) )
return; ...
4
Different from other domains such as U srP rivilege that
levels,
can be normalized to a small number of abstract
8
Entry Point :Security ChecksConvergenceAnalysisEntry Point: Call GraphInconsistenciesDetectionIn-Image AnalysisRom 1PreprocessingSystem Services & Entry PointsCollectionCall Graph ConstructionSecurity Checks ModelingEntry Points AnalysisInconsistencesRom 2Entry Points AnalysisEntry Point :Security ChecksInconsistenciesDetectionCross-Image AnalysisAlgorithm 1 Extracting Security Features.
Require: Inter-procedural Control Flow Graph icfg
Ensure: Security Features sFeatures of the corresponding public entry
if bb == icfg.exit then
for all succ ∈ icfg.feasiblecontrolDepSuccessors(bb) do
pathCheck’ = COPYOF(pathCheck)
instr = LASTINSTRUCTIONOF(bb)
if isConditional(instr) and isTrueBranch(bb, succ) then
sFeatures = sFeatures ∨ pathCheck
return
1: function NORMALIZE(icfg)
entryBB = icfg.entry
2:
3:
return DFSTRAVERSEICFG(icfg, entryBB, null)
4: function DFSTRAVERSEICFG(icfg, bb, pathCheck)
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16: function CLASSIFYSECURITYFEATURE(cond)
17:
18:
19:
20:
21:
X = DEPTRACK(cond.fstOperand)
Y = DEPTRACK(cond.sndOperand)
if isAccessControl(X) then
if isAppCheck(X) then
DFSTRAVERSEICFG(icfg, succ, pathCheck’)
check = CLASSIFYSECURITYFEATURE(instr)
if check (cid:54)= null then
pathCheck’ = pathCheck’ ∧ check
evalAppStatus(cond)]
else if isUserCheck(X) then
22:
23:
24:
25:
26:
27:
tus(cond), evalUsrRestriction(cond)]
else if isAccessControl(Y) then
/*symmetric and elided*/
else
return null
return
[evalAppPriv(cond),
evalAppOwner(cond),
return [evalUsrPriv(cond), evalUsrOwner(cond), evalUsrSta-
B. Modeling Explicit Security Checks.
Explicit permission enforcements are those conducted
by directly invoking security relevant APIs,
such as
checkPermission(). To model these checks, AceDroid
traces back from the checks to the permission name strings
passed as arguments. To get the security checks associated with
the entry points of broadcast receivers (i.e., onReceive),
AceDroid extracts the permissions and intent ﬁlter actions
supplied to the registration APIs (e.g., registerReceiver)
AceDroid then veriﬁes whether the action ﬁlters are protected
broadcasts within the analyzed images.
As discussed in Section III, we normalize android per-
missions based on their protection levels rather than their
names. Hence for the identiﬁed permissions, we extract the
corresponding protection levels from the framework conﬁgura-
tion ﬁles (framework-res/ AndroidManifest.xml),
custom ﬁles (e.g., lge-res/AndroidMani-fest.xml in
LG) and from preloaded apps manifests.
C. Modeling Implicit Security Checks.
Implicit security checks are those that serve the purpose
of access control but do not explicitly invoke security related
APIs. It is more challenging to identify, extract and normalize
these checks. The procedure is described in Algorithm 1. For
each entry point, the algorithm is fed with an inter-procedural
control ﬂow graph (icfg) of the entry point. It normalizes the
security related conditional statements to canonical values.
Starting from the entry basic block of the icfg, depth-ﬁrst
search along the control dependence edges is employed to
traverse all paths. In each path, when a conditional statement
is met, we normalize it if it is security related (lines 11-
12). Method classifySecurityFeature() is responsi-
ble for determining if a conditional statement is security related
and for normalization. Within the method (line 17 and line 19),
it checks if the ﬁrst operand of the predicate is related to access
control by tracking its dependencies backward, including both
data dependencies and some special control dependencies as
explained later, in order to decide if it originates from some
predeﬁned security feature(s) (e.g., PID, package signature,
and user ID as deﬁned in Section III). Similarly, we back
track the second operand to a concrete value like 0 and 1000,
or a parameter of the entry point (line 18). From lines 20
to 23, the algorithm further checks the type of security check.
Depending on the type (app-speciﬁc or user-speciﬁc), different
canonicalization methods are invoked. These methods are
deﬁned in Section III. Lines 24-25 handle the symmetric case,
e.g., a constant is used as the ﬁrst operand.
A canonicalized condition (i.e., vectors of canonical values)
returned by classifySecurityFeature() is conjoined
with the current canonical condition derived from all
the
preceding security checks along the path (line 14). We use
conjunction because all access control checks have to be
satisﬁed along this path. The canonical security condition for
the entire entry point is the disjunction of those for individual
paths (line 6). The semantics of conjunction and disjunction
(of canonical vector values) are deﬁned in Section III. Note
that instructions, including predicates, are preprocessed to SSA
form, in which a predicate contains only a simple comparison.
Compound predicates (e.g., a conjunction of two primitive
comparisons) are broken down to multiple predicates.
For example, in the following code snippet
1 int userId = UserHandle.getCallingUserId();
2 int uid = Binder.getCallingUid() ;
3 checkPermission(BLUETOOTH_ADMIN_PERM) ; // Normal Protection
4 if (uid == 1000 ||
userId == ActivityManager.getCurrentUser() ){...}
we get the canonical security condition for the ﬁrst path (the
true branch of the UID comparison) as follows.