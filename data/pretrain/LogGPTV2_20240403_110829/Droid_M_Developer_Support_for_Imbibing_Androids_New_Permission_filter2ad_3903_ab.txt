Figure 2: Any.do permissions during startup.
Figure 1: The permission workflow of Android M.
can use the ContextCompat.checkSelfPermission method from
the support library or directly invoke platform APIs to do so.
• Optional but as recommended by Google, to help the user under-
stand why the app needs a permission, the developer should write
code to display a justification before requesting a permission.
• If the app does not have the permission(s) required to com-
plete a restricted action, the developer should insert a call to
request the permission(s). Developers can do so by calling the
ActivityCompat.
requestPermissions method from the support library or directly
invoke platform APIs. If a requested permission has not been
permanently denied, the platform will display a dialog box to the
user showing which permission group is requested.
• Since permission requests are asynchronous, a callback method
(by overriding the onRequestPermissionsResult method) must
be provided to handle the results of such requests. Upon invoca-
tion, the system will provide a list of granted and denied permis-
sions.
• In the case of denied permissions, the developer must ensure that
the app either continues execution with limited functionality, or
disables the corresponding functionality and explain to the user
why the permission was critical.
Google’s Guidelines: Google’s guidelines for permission manage-
ment [17] suggest that permission requests be simple, transparent
and understandable. These attributes help the adoption of an app
[41, 47], i.e., users were more willing to grant permission(s) when
requested in-context and with proper justifications. Google recom-
mends that permissions critical to the core functionalities of an app
(e.g., location to a map app) be requested up-front, while secondary
permissions be requested in-context. If the context itself is not self-
evident (e.g., requesting the camera permission when taking a photo
makes sense but the reason for requesting location at the same time
lacks clarity), the app should educate the user about why the per-
mission is requested. The education recommendation also applies to
critical permission(s) asked up-front. When a permission is denied,
the app should provide feedback to the user and if possible provide
other available options. If critical permissions are denied, the app
should educate the user as to why the permission is critical for it to
function and offer a button so that the user can change the settings.
For secondary permissions, the app should disable the corresponding
features and continue providing the basic functionalities.
Session 18: AndroidASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea767educate the users when they request non-obvious permissions. To
check the compliance of an app, we manually process the analysis
results of Revocable Permission Analyzer. In particular, we consider
a permission to be critical if it is needed by functionalities indicated
in the app’s description, by its title, or by its category. For example,
a camera app is expected to request the Camera permission; simi-
larly a travel/navigation app can be expected to ask for the location
permission. For educational messages, we use natural language pro-
cessing (i.e., significant manual work is not needed). Specifically,
(a) we extract all the strings from the app’s resources, (b) we remove
any occurence of the default educational messages that Google pro-
vides, and (c) we extract semantics from the educational messages
by leveraging [34] and compute their similarities with the default
educational messages.
3.3 Results and Inferences
Android Applications Dataset: Our measurement study is based
on 4743 applications that are obtained by downloading the top free
apps from each available category (e.g. Social, Games, etc.) as per
Google’s Play Store [20] charts from June 2017.
Adoption of Android M Permission Model: A large number of
Android M apps do not support revocable permissions. From the
4743 apps, only 2973 are developed for Android M or above (with
the targetSdkVersion of 23 or higher). Note, that some of these
apps can be extremely popular with over 100 milions downloads
(e.g., ES File Explorer File Manager) [21]. Further, there are 302
apps out of the 2973 that do not require any so called dangerous
permissions and thus, in a normal way do not invoke any Android
M APIs. We want to point out that, surprisingly, there are apps like
Ringdroid, which is developed by Google itself and still does not
support revocable permissions even though they are developed with
the latest Android SDK (see § 5 for more details).
As reported in [4], in December 2017, the share of Android users
that use Android M and N, is 48%; one can expect this percentage
to keep growing. Unfortunately, the above result shows that many of
the apps still do not support revocable permissions. This implies that
a user who has a phone with a version of Android that supports the
latest fine-grained permission mechanism, will be forced to grant
all the permissions to most of the applications; otherwise these
applications will likely not function correctly [13].
Permissions Asked Upfront vs. In-Context: A significant fraction
of apps ask permissions upfront instead of in-context. We find that
14.07% of the apps (376 out of 2671) request permissions during
startup while most apps (2295 out of 2671) attempt to request per-
missions in-context. Some apps will request the same permissions
both upfront and in-context. Often, permissions requested upfront
are not really critical and the app can still function without them.
Fig. 3 shows the distribution of the number of the critical permis-
sions asked upfront by the 376 apps; 68.5% have only one critical
permission, 22.6% require 2 permissions, and 8.9% require 3. This
shows that in general very few permissions are considered critical
and should be asked upfront. Unfortunately, in most cases, apps
often ask more permissions. Fig. 4 shows the total number of over-
asked permissions that those apps are requesting upfront. Clearly,
with respect to more than 59% of the apps, one or more permissions
requested upfront are in fact not critical. Note, that permissions that
are being asked upfront by the apps in our dataset, are not usually
sought by third party libraries. The are two reasons for this: (a) only
an Activity or a Fragment can request dangerous permissions dur-
ing runtime (third party libraries do not contain those) and (b) no
permissions are sought during the initialization of the third party
libraries.
Some of the apps expect all permissions to be granted upfront or
will simply refuse to run. Interestingly, some apps that support the
Android M permission model and use the corresponding APIs expect
all the permissions asked upfront to be granted; otherwise they sim-
ply refuse to run. We leverage the Revocable Permission Analyzer
to check the statements invoked when a requested permission is re-
fused; if statements like “System.exit(0); or finish();” are
encountered, it is evident that the app is simply voluntarily ending
its run due to permission revocation.
This style of such an app defeats the purpose since it does not
really intend to support revocation of permissions (even when some
of them are not critical). Overall, using this approach, we identify
2.9% or 80 apps out of 2671 apps that ask at least one non-critical
permission, and yet refuse to run if such a permission is not granted.
The remaining 296 apps still ask for these permissions again in-
context, if they were denied when requested up front.
User Education: A significant fraction of apps does not provide
meaningful explanations for non-obvious permissions. We find that
from the apps that request permissions in-context, only 54.17%
(1447 in total out of 2671 apps) educate the users (i.e., a mean-
ingful message that tells the user why the requested permission is
needed for a given functionality, is provided). For example, when
the app SONGily [39] requests the storage permission, the following
message is provided: “Permission to write files is required”. We
deem this message does not educate the user. Similarly, AskMD [8]
provides the following message when requesting for accessing
the microphone: “AskMD would like to access your microphone.
Please grant the permission in Settings.” Contrary to those apps,
theScore [43] provides the following message when it requests ac-
cess to the user’s calendar: “In order to add events to your calendar,
we require the Android Contacts permission. We will not be reading
or accessing your information in any way, other than to add the
events.”. We deem this message as following Google’s guidelines by
properly educating the user why it needs that permission.
Permissions asked upfront are less likely to have meaningful ex-
planations. From the apps that ask permissions upfront, only 177
(47.07%) educate the user properly. This is a much lower rate com-
pared to permissions that are asked in-context. Permissions that are
asked upfront lack the context and it is generally even more impor-
tant to educate the users about what the permissions are used for.
Unfortunately, the results indicate that a majority of the considered
apps fail to adhere to the Google’s guidelines.
3.4 Developer Survey
To ascertain why developers may not have migrated their apps to the
new permission model, we conduct a survey. We recruited developers
with apps on GitHub and the Google Play store. The survey was
approved by our institution’s IRB and conducted in August 2017.
Session 18: AndroidASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea768Figure 3: Critical permis-
sions that can/should be
asked upfront.
Figure 4: Over-asked per-
missions during launch.
Recruitment: For recruitment via GitHub, we used the new GitHub
graphql API to get a list of repositories that contained the Android-
Manifest.xml file. Recruiting developers via GitHub has previously
been employed in [1]. Since there is no way to search for Android
repositories using the GitHub API, we reasoned that any repository
that contained the AndroidManifest.xml file was likely an An-
droid app. Next, we cloned all the repositories returned via the API
call and checked the manifest file for the target sdk to find apps
that had not updated to Android M yet. Lastly, we used the git log
command to extract developer email addresses. Github currently
only returns a thousand responses for any API query. This limits
our survey pool greatly. Therefore, we used a second recruitment
resource, viz., the Google Play Store.
For recruitment via the play store, we followed the same strategy
of crawling the top android apps as in our measurement study. We
extracted email addresses from the app’s respective play store pages.
Most apps on the play store list email addresses for technical support
to which we sent the survey.
We sent emails with links to the anonymous survey to 2500 email
addresses. We did not offer recruitees any incentive for filling out
the survey since we did not want our results to be biased. Specifi-
cally, while we can extract developer emails via GitHub, the play
store mostly lists support email addresses which may or may not
be answered by actual developers (could be support staff). We re-
quested potential developers to only fill out the survey if they were
developers who had not transitioned their apps to Android M.
Survey: We hosted the survey on SurveyMonkey and asked two key
questions: Is the reason why you have not migrated because it is
hard to do so (technically laborious)? and if so, would you consider
migrating if a tool was available to help you migrate your app to the
new model? We also included a question that invited survey takers
to explain in a few words: What, if anything, do you think can be
done to make the permission model easier to use for developers?
Results: Of the 2500 emails we sent, we have so far received a total
of 187 replies. The results of the survey are summarized in Fig. 5 and
Fig. 6. 99 developers(≈ 54% of those who responded) indicated that
the reason for not migrating their app was because it was laborious
to do so. Furthermore, 90 people out of those 99 developers (≈ 90%)
indicated that they would migrate if an automated helper tool was
available. The ones that did not say it was laborious to migrate, gave
no indication with regards to why they did not migrate their app.
Finally, the majority of survey takers did not respond to the de-
scriptive question. We suspect that this was because the descriptive
question required more effort on their part. About 10% of the survey
Figure 6: Fraction that
would update if tool avail-
able.
Figure 5: Fraction that
gave technical
laborious-
ness as primary reason.
takers responded and indicated that the permission model is a sub-
stantial change and as such, places an undue burden in making their
apps forward compatible. They would have liked Google to offer
some easier default knobs for transition.
In short, our survey results suggest that a large fraction of devel-
opers believe that the work associated with transitioning their apps
from prior Android versions, is involved. The same developers also
indicated their inclination to update if a tool was available.
3.5 Summary
Our measurement study demonstrates that only a significant percent-
age of applications that were built on the Android M platform, do not
properly adopt the new permission model. An even smaller fraction
of these applications, unfortunately, adhere to Google’s guidelines.
Our survey suggests that one the of main reasons for developers not
fully and properly adopting the new permission model, is the com-
plexity and the work associated with transitioning their apps from
the previous Android version for which the app was developed, to
the newer version. As users become more privacy conscious [31, 47],
following Google’s guidelines can be a key factor influencing their
choice of apps. Below is a list of our key observations:
• Approximately 60% of the top apps supporting Android M API
level 23 or above are not using its permission revocation APIs
properly (59.6 % ask for at least one non-critical permissions up
front).
• 45.83% and 52.93% of the permissions asked in-context versus
upfront do not have informative explanations for why the permis-
sions are sought as per the Google guidelines.
• Some of these apps (≈ 3 %) simply refuse to run if any of the
permissions asked upfront are not granted.
• 54% of the surveyed Android developers did not transition their
apps due to the perceived difficulty. They also indicated a willing-
ness to transition if an automated helper tool was made available.
4 DROID M+ TOOL SET
In this section, we describe the design of Droid M+ and its compo-
nent tools. Droid M+ consists of three major components(see Fig. 7).
The first component is a static analysis tool that helps developers
identify different functionalities (i.e., context) of their apps, what
permission(s) each functionality requires, and the right place to re-
quest the permission(s). The second part is an annotation system
that facilitates the easy integration of revocable permissions and
conformance to Google’s guidelines within existing Android app
Session 18: AndroidASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea769Figure 7: Droid M+ architecture.
code. Finally, Droid M+ contains a compiler extension that interprets
the annotations and inserts the corresponding code.
4.1 Static Analyzer
The static analyzer has three tasks: (1) identify functionalities within
an app, (2) identify permission(s) required by each functionality, and
(3) identify the right place to annotate. Its main function is to help
developers migrate apps developed against an old API level, to the
new API level (≥ 23). However, apps that are already developed
for the new API level can also utilize this tool to help refactor the
code, i.e., determine what permissions to request, where to place the
requests, and what education message to display with each request.
Identify Control Flow: Before we can do any useful analysis on an
app, the tool needs to first parse the source code and generate the
corresponding call graph and control flow graph. These are standard
techniques which we will not describe in detail. As discussed in the
literature (e.g., [37]), there are two challenges worth mentioning.
First, point-to analysis [37] needs to be employed in order to generate
an accurate call graph. Second, Java reflection needs to be handled
to generate the complete call graph. Currently, we do not support
the latter but there are ways to statically resolve the Java reflection
calls [38], and we plan to incorporate these in the future.
Identify Functionalities: Given a call graph, we define a functional-
ity as a collection of nodes in the control flow graph that are reachable