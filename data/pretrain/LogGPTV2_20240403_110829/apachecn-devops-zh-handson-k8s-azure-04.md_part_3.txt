    最终输出如图*图 4.28* 所示:
    ![Output displaying the old ReplicaSet with three pods and the new ReplicaSet scaled down to zero](img/B17338_04_28.jpg)
    图 4.28:旧的复制集现在有三个 PODS，新的 PODS 缩小到零
    如您所料，这表明旧的复制集缩减为三个实例，新的复制集缩减为零个实例。
10.  Finally, let's clean up again by running the **kubectl delete** command:
    kubectl delete -f 留言簿一体机. yaml
    恭喜你！您已经完成了应用的升级并回滚到以前的版本。
在本例中，您已经使用 **kubectl apply** 对应用进行了更改。同样，您也可以使用 **kubectl edit** 进行更改，这将在下一节中探讨。
### 使用 kubectl 编辑升级应用
您也可以使用 **kubectl edit** 对运行在 Kubernetes 之上的应用进行更改。您之前在本章的*手动缩放您的应用*部分使用过这个。当运行 **kubectl edit** 时， **vi** 编辑器将为您打开，这将允许您直接对 Kubernetes 中的对象进行更改。
让我们在没有公共负载平衡器的情况下重新部署留言簿应用，并使用 **kubectl** 创建负载平衡器:
1.  Undo the changes you made in the previous step. You can do this by using the following command:
    git 重设--硬
2.  You will then deploy the guestbook application:
    kubectl create -f 留言簿一体机. yaml
3.  To start the edit, execute the following command:
    忽必烈编辑服务前端
4.  This will open a **vi** environment. Navigate to the line that now says **type:** **ClusterIP** (line 27) and change that to **type: LoadBalancer**, as shown in *Figure 4.29*. To make that change, hit the *I* button, type your changes, hit the *Esc* button, type **:wq!**, and then hit *Enter* to save the changes:
    ![Displaying the rollout history of the deployment](img/B17338_04_29.jpg)
    图 4.29:将此行更改为类型:负载平衡器
5.  Once the changes are saved, you can watch the service object until the public IP becomes available. To do this, type the following:
    忽必烈得到 svc -w
6.  这将需要几分钟的时间向您展示更新后的 IP。一旦看到正确的公共 IP，点击 *Ctrl* + *C* 即可退出**手表**命令。
这是一个使用 **kubectl 编辑**对 Kubernetes 对象进行更改的例子。该命令将打开一个文本编辑器，以交互方式进行更改。这意味着您需要与文本编辑器交互来进行更改。这在自动化环境中不起作用。要进行自动更改，您可以使用 **kubectl patch** 命令。
### 使用 kubectl 补丁升级应用
在前面的示例中，您使用了一个文本编辑器对 Kubernetes 进行了更改。在本例中，您将使用 **kubectl patch** 命令来更改 Kubernetes 上的资源。当您无法访问部署在集群上的原始 YAML 文件时，**补丁**命令在自动化系统中特别有用。例如，它可以用于脚本或连续集成/连续部署系统。
使用 **kubectl 补丁**有两种主要方式:要么创建一个包含您的更改的文件(称为补丁文件)，要么内联提供更改。这里将解释这两种方法。首先，在本例中，您将使用补丁文件将前端的映像从 **v4** 更改为 **v3** :
1.  Start this example by creating a file called **frontend-image-patch.yaml**:
    前端影像修补程式码. yaml
2.  Use the following text as a patch in that file:
    规格:
    模板:
    规格:
    容器:
    -名称:php-redis
    图片:gcr.io/google-samples/gb-frontend:v3
    此修补程序文件使用与典型 YAML 文件相同的 YAML 布局。补丁文件的主要特点是它只需要包含更改，而不需要能够部署整个资源。
3.  To apply the patch, use the following command:
    kubectl 补丁部署前端\
    -补丁" $(cat 前端-image-patch.yaml)"
    这个命令做两件事:首先，它使用 **cat** 命令读取**前端-image-patch.yaml** 文件，然后将其传递给 **kubectl patch** 命令来执行更改。
4.  You can verify the changes by describing the front-end deployment and looking for the **Image** section:
    kubectl 描述部署前端
    这将显示如下输出:
    ![Running the kubectl describe deployment frontend command to confirm if we’re running the old image](img/B17338_04_30.jpg)
    图 4.30:补丁之后，我们运行旧的映像
    这是一个使用补丁文件使用**补丁**命令的例子。您也可以直接在命令行上应用修补程序，而无需创建 YAML 文件。在这种情况下，您将描述 JSON 的变化，而不是 YAML 的变化。
    让我们来看一个例子，在这个例子中，我们将把映像改变恢复到 **v4** :
5.  Run the following command to patch the image back to **v4**:
    kubectl 补丁部署前端\
    - patch= '
    {
    " spec ":{ 0
    "模板":{ 0
    " spec ":{ 0
    “容器”:[{ 0
    " name": "php-redis "，
    " image ":" gcr . io/Google-samples/GB-前端:v4 "
    }]
    }
    }
    }
    }'
6.  You can verify this change by describing the deployment and looking for the **Image** section:
    kubectl 描述部署前端
    这将显示如图 4.31 所示的输出:
![Running the kubectl describe deployment frontend command to confirm if we’re running the new image](img/B17338_04_31.jpg)
图 4.31:在另一个补丁之后，我们再次运行新版本
在进入下一个示例之前，让我们从集群中移除留言簿应用:
kubectl delete -f 留言簿一体机. yaml
到目前为止，您已经探索了三种升级 Kubernetes 应用的方法。首先，您对实际的 YAML 文件进行了更改，并使用 **kubectl apply** 应用了这些更改。之后，您使用 **kubectl edit** 和 **kubectl patch** 进行更多更改。在本章的最后一节，您将使用 Helm 来升级应用。
### 使用 Helm 升级应用
本节将解释如何使用 Helm 操作员执行升级:
1.  Run the following command:
    头盔安装 wp bitnami/wordpress
    您将强制更新 MariaDB 容器的映像。让我们首先检查当前映像的版本:
    忽必烈描述 state fulset WP-mariadb | grep image
    编写时映像版本为 **10.5.8-debian-10-r46** 如下:
    ![Output displaying the current image version of the StatefulSet](img/B17338_04_32.jpg)
    图 4.32:获取状态集的当前映像
    让我们看看来自[https://hub.docker.com/r/bitnami/mariadb/tags](https://hub.docker.com/r/bitnami/mariadb/tags)的标签，选择另一个标签。例如，您可以选择 **10.5.8-debian-10-r44** 标签来更新您的状态集。
    但是，为了更新 MariaDB 容器映像，您需要获取服务器的根密码和数据库的密码。这是因为 WordPress 应用被配置为使用这些密码来连接数据库。默认情况下，在 WordPress 部署中使用 Helm 的更新会生成新的密码。在这种情况下，您将提供现有的密码，以确保应用保持正常运行。
    密码存储在 Kubernetes Secret 对象中。机密将在*第 10 章【在 AKS* 中储存机密】中进行更深入的解释。您可以通过以下方式获取 MariaDB 密码:
    忽必烈得到机密 wp-mariadb -o yaml
    这将产生如图 4.33 所示的输出:
    ![Output displaying encrypted secrets, that is, the MariaDB passwords](img/B17338_04_33.jpg)
    图 4.33:马里亚数据库使用的加密机密
    要获得解码的密码，请使用以下命令:
    回音| base64-d 基
    这将向我们显示解码的根密码和解码的数据库密码，如图 4.34*所示:*
    ![Output displaying the unencrypted version of the MariaDB passwords](img/B17338_04_34.jpg)
    图 4.34:解码的根和数据库密码
    您还需要 WordPress 密码。你可以通过获取 **wp-wordpress** 的机密并使用相同的解码过程来获得它:
    忽必烈得到机密 wp-wordpress -o yaml
    回音| base64-d 基
2.  You can update the image tag with Helm and then watch the pods change using the following command:
    头盔升级 wp bitnami/wordpress \
    -set Maria db . image . tag = 10 . 5 . 8-debian-10-r44 \
    -设置 mariadb.auth.password=" " \
    -设置 mariadb . auth . root password = ""
    -设置 WordPress password = " T0 " \
    & & kubicl get pods -w(立方结构取得 pods-w)
    这将更新 MariaDB 的映像，并启动一个新的 pod。您应该会看到类似于*图 4.35* 的输出，您可以看到数据库 pod 的前一个版本被终止，一个新版本开始:
    ![Output displaying the previous MariaDB pod beingterminated and a new one starting](img/B17338_04_35.jpg)
    图 4.35:先前的马里亚数据库 Pod 被终止，一个新的开始
    在新的 Pod 上运行**描述**并为**映像**添加内容将向我们展示新的映像版本:
    kubectl 描述 pod wp-mariadb-0 | grep Image
    这将产生如图 4.36 所示的输出:
    ![Output displaying the new image version](img/B17338_04_36.jpg)
    图 4.36:显示新映像
3.  Finally, clean up by running the following command:
    头盔删除 wp
    kubectl 删除 pvc --所有
    kubectl delete pv --all
现在，您已经学习了如何使用 Helm 升级应用。正如你在这个例子中看到的，使用 Helm 升级可以通过使用 **- set** 操作符来完成。这使得使用 Helm 执行升级和多次部署变得高效。
## 总结
这一章涵盖了大量关于构建可伸缩应用的信息。目标是向您展示如何使用 Kubernetes 扩展部署，这是通过创建应用的多个实例来实现的。
我们从如何定义负载平衡器的使用以及如何利用 Kubernetes 中的部署规模特性来实现可伸缩性开始这一章。有了这种类型的可伸缩性，您还可以通过为无状态应用使用负载平衡器和软件的多个实例来实现故障转移。我们还研究了使用 HPA 根据负载自动扩展您的部署。
之后，我们研究了如何扩展集群本身。首先，我们手动缩放集群，然后使用集群自动缩放器根据应用需求缩放集群。
我们通过研究升级部署的应用的不同方法来完成这一章:首先，通过探索手动更新 YAML 文件，然后通过学习两个额外的 **kubectl** 命令( **edit** 和 **patch** )来进行更改。最后，我们学习了如何使用 Helm 来执行这些升级。
在下一章中，我们将了解在将应用部署到 AKS 时可能会遇到的几个常见故障，以及如何修复它们。