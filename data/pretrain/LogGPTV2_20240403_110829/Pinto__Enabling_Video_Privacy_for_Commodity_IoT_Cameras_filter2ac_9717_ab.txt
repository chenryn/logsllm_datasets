### 5.1 fps
**Processing Time per Frame:**
- **Detect Time:** 431.5 ms (89.7%)
- **Pixelate Time:** 0.05 ms (0.01%)
- **I/O Time:** 47.4 ms (10.2%)

**Table 1: Processing of Real-Time Video Stream on a Low-Cost Embedded Device (1.2 GHz CPU)**
- **Detect Time:** 146.2 ms (75.5%)
- **Pixelate Time:** 0.05 ms (0.02%)
- **I/O Time:** 47.1 ms (24.4%)

### Table 2: Time Taken in Each Step When Running Real-Time Blurring on a Raspberry Pi (1.2 GHz CPU)

### Fabrication of Video Evidence
We assume the presence of a trusted timestamping server [22], making it impossible to roll back time. Specifically, a hash of the video is sent from an IoT camera (via WiFi or LTE) to the server, which signs the hash with the current time.

### 3.3 Desired Properties

#### Visual Privacy Protection
Before sharing videos, they must be visually protected based on the situation. This includes blurring specific types of objects depending on the circumstances of requests, request type, and the seriousness of incidents. Such requirements are not known beforehand, necessitating a solution framework that allows post-processing for visual privacy protection.

#### Video Authenticity
Privacy-protected videos must be properly authenticated. Conventional post-blurring invalidates the original, real-time signatures, which is undesirable for video authentication.

#### Fine Video Quality
Privacy-protected videos should maintain high quality:
1. **High Frame Rates:** Videos with low frame rates (below 12 fps) are perceived as jerky [51].
2. **Minimal Blurring Intensity:** Overly blurred videos are perceptually jarring and significantly degrade human-perceived video quality [36, 39].

### 3.4 Limitations of Existing Approaches

Existing vision or image processing techniques fail to meet these requirements on low-end devices. We demonstrate this by experimenting with their performance on a Raspberry Pi with a 1.2 GHz CPU. The results are summarized in Table 1.

#### Conventional Blurring
Conventional post-blurring fails to provide video authenticity. Real-time blurring can produce a hash of a blurred video on the fly. We implemented real-time blurring on a Raspberry Pi using OpenCV [13] with dlib [10] and OpenALPR [1] libraries, achieving an average frame rate of 2.3 fps, lower than previous results [46]. Some frames are not properly blurred, invalidating the purpose of blurring.

#### Video Fingerprinting
Fingerprinting [47] recognizes slightly modified videos (e.g., blurring, rotation, cropping). It extracts characteristic features, called "fingerprints," and matches them against a reference database. While useful for video authentication, generating fingerprints in real-time is challenging for low-cost embedded devices. Our experiment using a lightweight SIFT-based feature algorithm [59] on a Raspberry Pi resulted in a frame rate of 1.1 fps.

#### Digital Watermarking
Digital watermarking embeds hidden information, called "watermarks," into a video to verify its integrity. Robust watermarking [57, 65] detects benign or malignant modifications. However, generating and embedding watermarks in real-time is very challenging, especially for low-power devices. Our experiment using a fast DCT-based algorithm [23] on a Raspberry Pi achieved a frame rate of 1.2 fps, resulting in poor-quality videos.

### 4. Design of Pinto

#### 4.1 Key Features

##### Decoupled Blurring Procedure
Pinto exploits the computational asymmetry of object blurring. The conventional procedure involves I/O, detection, pixelation, and writing. Table 2 shows the time taken in each step. The face/plate detection phase is the main bottleneck, taking orders of magnitude more CPU time than the pixelation phase. Pinto decouples CPU-intensive object detection and computationally-lightweight pixelation, performing fast pixelation in real-time while deferring object detection until necessary.

##### Block-Level Operation
To achieve fine-grained visual privacy, we use a grid-based approach. Each frame is divided into equal-sized subimage blocks, allowing independent pixelation within each block. Pinto performs block-level pixelation in real-time, post-processing, and verification.

##### Hash-Pixelation
Pinto leverages pixelation for both visual privacy and forgery prevention. The h_pixelation procedure is as follows:
1. **Hash the Subimage Block:** 
2. **Pixelate the Block:**
3. **Embed the Hash into the Pixelated Block:**

To avoid visual jarring, a 256-bit hash is distributed into the lower 16 bits of the first 16 pixels in the pixelated subimage block.

### 4.2 Framework

**Figure 4: Pinto Framework**

**Realtime Processing:**
- Pinto-enabled cameras perform block-level h_pixelation of every block in real-time frames while recording.
- The fully h_pixelated video (default 1 minute) is hashed, creating p_digest, which is sent to a trusted timestamping server.
- The original video and its timestamped p_digest are stored in the device.

**Post Processing:**
- When sharing a video, the device applies object detection algorithms to the stored original video.
- Critical blocks (overlapping with detected sensitive regions) are logged in a compact form, p_profile.
- Block-level h_pixelation of critical blocks produces a privacy-protected video, p_video.

**Verification:**
- The requester verifies the p_video's authenticity using its p_digest and p_profile.
- If no forgery has occurred, block-level h_pixelation of non-critical blocks will restore the fully h_pixelated version, authenticated by the signed p_digest.

### 4.3 Procedural Description

#### 4.3.1 Operating in Real Time
**Figure 6a: Realtime Processing in Camera Device (at the time of recording)**
- The main objective is to continuously record a real-time video stream at a fast rate and produce its p_digest on the fly.
- Each frame is processed in two parallel paths: writing to a video file and processing for p_digest generation.
- To minimize processing time, the components of Path 2 are kept lightweight.
- The frame is divided into predefined equal-sized blocks, and block-level h_pixelation is applied.
- The resulting h_pixelated frame is hashed and discarded.

**p_digest Generation:**
- Upon recording a 1-minute video, the device generates p_digest by collectively hashing all per-frame hashes and sends it to a trusted timestamping server.
- The server returns the time-stamped p_digest, which is stored with the video.

#### 4.3.2 Post Processing for Visual Privacy
**Figure 6b: Post Processing (prior to sharing of a video)**
- When a video needs to be shared, critical blocks in each frame are h_pixelated to produce p_video.
- A library function returns critical blocks when running any chosen object detection algorithm.
- Indices of critical blocks are logged in p_profile, a bit array indicating whether a block is critical.

#### 4.3.3 Verifying Video Authenticity
**Figure 6c: Verification of Video Authenticity (at the requester-side)**
- For each frame of p_video, the requester performs block-level h_pixelation of non-critical blocks using p_profile.
- The resulting all-block-h_pixelated frame is hashed.
- These per-frame hashes are collectively hashed along with the time of recording.
- The authenticity is verified if it matches the time-stamped p_digest.

### Conclusion
The existing approaches suffer from performance difficulties or functional deficiencies on simple embedded devices. Pinto provides a solution for low-end IoT cameras to achieve visual privacy protection, video authenticity, and fine video quality.