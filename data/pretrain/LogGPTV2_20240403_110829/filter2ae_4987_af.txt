       +0x00c pklPrev          : 0x41414141
       ...
在上面的清单中（展示在 3.2
节中描述的漏洞，作为键盘布局对象的字符串，CVE-2011-1241），键盘布局对象已被用户控制的字符串所替换，该字符串是在桌面堆中分配的。在这种特殊情况下，键盘布局对象已被释放，但
win32k 尝试将其链入键盘布局列表中。这允许攻击者通过控制被释放的键盘布局对象的 pklNext 指针来选择写入 esi 时的地址。
由于对象通常包含指向其他对象的指针，win32k 使用赋值锁定机制来确保对象依赖性得到满足。照此，在 win32k
尝试释放对象引用时，影响主体中包含赋值锁定指针的对象的释放后使用漏洞会允许攻击者递减任意地址。以下描述的攻击方法的变体可作为这种利用的一种可能的方式：从用户模式回调中返回一个已销毁的菜单句柄索引。在线程销毁时，这导致释放类型为
(0) 的销毁例程被调用。由于该释放类型未定义销毁例程，win32k 将调用零页，而零页在 Windows 中是允许用户映射的（见第 4.3 节）。
    eax=deadbeeb ebx=fe954990 ecx=ff910000 edx=fea11888 esi=fea11888 edi=deadbeeb
    eip=92cfc55e esp=965a1ca0 ebp=965a1ca0 iopl=0         nv up ei ng nz na pe nc
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010286
    win32k!HMUnlockObject+0x8:
    92cfc55e ff4804          dec     dword ptr [eax+4]    ds:0023:deadbeef=????????
    965a1ca0 92cfc9e0 deadbeeb 00000000 fe954978 win32k!HMUnlockObject+0x8
    965a1cb0 92c60cb1 92c60b8b 004cfa54 002dfec4 win32k!HMAssignmentLock+0x45
    965a1cc8 92c60bb3 965a1cfc 965a1cf8 965a1cf4 win32k!xxxCsDdeInitialize+0x67
    965a1d18 8284942a 004cfa54 004cfa64 004cfa5c win32k!NtUserDdeInitialize+0x28
    965a1d18 779864f4 004cfa54 004cfa64 004cfa5c nt!KiFastCallEntry+0x12a
由于攻击者会推测在内核内存中的用户句柄表的地址，他或她会递减窗口对象句柄表项 (1) 的类型（bType）值。在销毁窗口时，这会导致释放类型为 (0)
的销毁例程被调用并引发任意内核代码执行。在上面的清单中（作为 DDE
对象的字符串，CVE-2011-1242），攻击者控制赋值解锁定的指针，导致任意内核递减。
##### 4.3 空指针利用
不像其他类似 Linux
的平台那样，Windows（为保持向后兼容性）允许无特权的用户通过用户进程的上下文映射零页。由于内核和用户模式组件共享同样的虚拟地址空间，攻击者会潜在地能够通过映射零页并控制解引用数据来利用内核空指针解引用漏洞。为了在
Windows 中分配零页，应用程序只需简单地调用 NtAllocateVirtualMemory 并请求一个比 NULL
大但比比页尺寸小的基地址。应用程序也可以通过使用这样的基地址和 MEM_DOS_LIM 功能标志位启用页对齐的区段（仅 x86 有效）调用
NtMapViewOfSection 来内存映射零页。
    pwnd = (PWND) 0;
    pwnd->head.h = hWnd; // valid window handle
    pwnd->head.pti = NtCurrentTeb()->Win32ThreadInfo;
    pwnd->bServerSideWindowProc = TRUE;
    pwnd->lpfnWndProc = (PVOID) xxxMyProc;
在 win32k
中的空指针漏洞很多时候是由于对用户对象指针的检查不充分导致，因此，攻击者能够通过创建假的零页对象来利用这样的漏洞，并在随后引发任意内存写或控制函数指针的值。例如，由于在
win32k
中最近的很多空指针漏洞都与窗口对象指针有关，攻击者可以在零页安置假的窗口对象并定义一个自定义的服务端窗口过程（见上面的清单，在零页安置假的窗口对象）。如果有任何消息随后被传递给这个
NULL 对象，这会允许攻击者获得任意内核代码执行的能力。
#### 5\. 缓解措施
在这一节中，我们将评估在第 4 节中讨论的这类漏洞的缓解措施。
##### 5.1 释放后使用漏洞
如同在前面的章节中提到的，释放后使用漏洞依靠攻击者重新分配并控制先前释放内存的能力。不幸的是，由于 CPU
没有讲述内存是否属于特定对象或结构体的合法途径，由于只有操作系统生成的抽象，因此缓解释放后使用漏洞是非常苦难的。如果我们看得更仔细一些，这些问题本质上归结于那些攻击者，他们能够在处理回调期间释放对象或缓冲区，并随后在回调返回时
win32k
再次使用对象之前对内存进行重新分配。这样一来，通过还原内核内存池或堆的分配或通过隔离特定的分配以使像字符串这样的简单可控原型不被从相同资源分配，使得缓解释放后使用漏洞的可利用性成为可能。
由于操作系统总是知道回调何时处于激活状态（例如通过
KTHREAD.CallbackDepth），延迟释放的方法可以被用在处理用户模式回调时。这将阻止攻击者立即重新使用已释放的内存。然而，这样的机制无法抵消在这种情况中的利用：在释放后使用条件被触发前调用多个连续的回调。另外，由于用户模式回调机制不在
win32k 中执行，在回调返回时不得不执行附加逻辑来执行必要的延迟释放列表的处理。
与其通过关注分配的可预见性来尝试应对释放后使用利用，我们也可以着眼于利用通常是如何执行的。如同在第 4 节中讨论的，Unicode
字符串和大部分数据可控的分配（例如含 cbWndExtra
定义的窗口对象）对攻击者来说是十分有用的。因此隔离这样的分配可以用来阻止攻击者为简单地重新分配已释放对象的内存而使用可伸缩的原型（例如字符串）。
##### 5.2 空指针漏洞
为了应对 Windows
中的空指针漏洞我们需要进制用户模式应用程序映射或控制零页内容的能力。虽然有很多种方法处理这种问题，例如系统调用挂钩（系统调用挂钩不被微软建议使用，并由于
Kernel Patch Protection 强制进行的完整性检查而不能轻易在 64
位中使用）或页表项（PTE）修改，但是使用虚拟地址描述符（AVD）似乎是一种更加合适的解决方案 [5]。由于 AVD 描述进程内存空间并提供给
Windows 用来正确设置页表项的信息，所以可以用来以一种统一和通用的方式阻止零页映射。然而，由于 32 位版本 Windows 的 NTVDM
子系统依赖于这种能力来正确支持 16 位可执行程序，阻止零页映射也造成向后兼容成本的增加。
#### 6\. 备注
像我们在这篇文章中展示的，用户模式回调似乎导致很多问题并在 win32k 中引入了很多漏洞。这在一定程度上是因为
win32k，或具体地说是窗口管理器，被设计来使用一种全局锁机制（用户临界区段）来允许模块是线程安全的。虽然在个案分析的基础上应对这些漏洞足以作为一种短期的解决方案，但是
win32k
在某些点上需要大的改造，来更好地支持多核架构并在窗口管理方面提供更好的性能。在当前的设计中，同一会话中没有两个线程能够同时处理它们的消息队列，即使他们在两个单独的桌面上单独的应用程序中。理想情况下，win32k
应该遵循 NT 执行体的更加一直的设计，并在每个对象或每个结构的基础上执行互斥。
在缓解 win32k 中的利用以及 Windows
中的通用内核利用方面的重要的一步，是去除掉在用户和内核模式之间的共享内存区段。那些共享内存区段历来被视为对 win32k
不需要使用系统调用方面的优化，因此避免与它们相关的开销。自从这种设计被决定以来，系统调用不再使用更慢的基于中断的方式，因此性能的提升很可能是极小的。虽然在某些情况下，共享区段仍然是首选，但共享的信息应该被保持在最低限度。当前，win32k
子系统为对手提供了大量的内核地址空间信息，并且也在最近的 CSRSS 漏洞利用中开辟了所示的额外攻击向量
[4]。因为子系统中的内存是进程间共享的而无视它们的特权级，攻击者有能力从一个无特权进程中操作高特权进程的地址空间。
#### 7\. 结论
在这篇文章中，我们讨论了有关 win32k
中用户模式回调的很多挑战和问题。尤其是，我们展示了窗口管理器的全局锁设计不能很好地与用户模式回调的概念相结合。虽然涉及围绕用户模式回调的使用的不充分验证的大量漏洞已被应对，那些问题的一些复杂特性表明更多不易察觉的缺陷很可能仍旧存在于
win32k 中。这样一来，为了实现缓解一些更猖獗的这类 BUG，我们总结性地提出一些观点，作为对微软以及终端用户来说，能够做什么来降低将来在 win32k
中可能面临的攻击的风险。
#### 引用
[1] Edgar Barbosa: Windows Vista UIPI.
[http://www.coseinc.com/en/index.php?rt=download&act=publication&file=Vista_UIPI.ppt.pdf](http://www.coseinc.com/en/index.php?rt=download&act=publication&file=Vista_UIPI.ppt.pdf)
[2] Alex Ionescu: Inside Session 0 Isolation and the UI Detection Service.
[3] ivanlef0u: You Failed!
[4] Matthew 'j00ru' Jurczyk: CVE-2011-1281: A story of a Windows CSRSS
Privilege Escalation vulnerability.
[5] Tarjei Mandt: Locking Down the Windows Kernel: Mitigating Null Pointer
Exploitation.
[6] John McDonald, Chris Valasek: Practical Windows XP/2003 Heap Exploitation.
Black Hat Brieﬁng USA 2009.
[7] Microsoft Security Bulletin MS11-034. Vulnerabilities in Windows Kernel-Mode Drivers Could Allow Elevation of Privilege.
[8] Microsoft Security Bulletin MS11-054. Vulnerabilities in Windows Kernel-Mode Drivers Could Allow Elevation of Privilege.
[9] Brett Moore: Heaps About Heaps.
[10] MS Windows NT Kernel-mode User and GDI White Paper.
[11] mxatone: Analyzing Local Privilege Escalations in Win32k. Uninformed
Journal vol. 10.
[http://uninformed.org/?v=10&a=2](http://uninformed.org/?v=10&a=2)
[12] Chris Paget: Click Next to Continue: Exploits & Information about Shatter
Attacks.
[13] Chris Valasek: Understanding the Low Fragmentation Heap. Black Hat
Brieﬁngs USA 2010.
原文链接
* * *