The vulnerability window begins when the STEK is gen-
erated (potentially before the victim connection) and ends
when it is securely erased from all servers. As reported in
Section 4.3, 36% of the ticket-issuing domains we considered
reused the same STEK for at least a day, 22% for more than
a week, and 10% for more than a month.
In Figure 6, we visualize the interaction of session ticket
service groups and the median STEK reuse for each ser-
vice group. The two largest service groups (CloudFlare and
Google) account for 20% of Top Million HTTPS sites and
are shown in the far-left column, and both reused STEKs
for less than 24 hours. On the opposite end of the longevity
spectrum were TMall (a Chinese online retailer) and Fastly
(a CDN), which are represented by the largest red elements
in the second column of Figure 6. Together, they accounted
for 1,208 domains. Fastly, which controlled domains such
as foursquare.com, www.gov.uk, and aclu.org, always
issued session tickets with the same STEK throughout our
9-week study.
While not one of the largest service groups, we note a
concerning cluster of sites controlled by Jack Henry & Asso-
ciates. This service group contains 79 bank and credit union
domains which issued session tickets for 59 days using a
single STEK and then all rotated to a different—but still
shared—STEK for the ﬁnal 4 days of our study.
While we are pleased that many of the largest service
groups rotate their STEKs at least daily, the magnitude of
reliance on a small number of secret values is disconcerting.
Current versions of Chrome, Firefox, IE, and Microsoft Edge
all offer the session ticket extension by default and an attacker
who could collect the trafﬁc as well as obtain the STEK within
40Figure 6: STEK Sharing and Longevity Visualization—Each box in this illustration is sized proportionally to the number of
domains in that service group and colored according to the observed longevity of the key. Solid red boxes represent groups of
domains that shared a key that persisted for at least 30 days.
the vulnerability window would be able to decrypt and access
the millions of victims’ connection content with ease.
6.2 Exposure from Session Caches
When a server supports session ID resumption, an attacker
can potentially recover keys for past sessions as long as they
reside in the server’s session cache. As such, the vulnerability
window begins when the victim connection completes its
handshake and ends when the server implementation securely
discards the session state.
Our experiments in Section 4.1 show that at least 83% of
Top Million sites employ session caching and retain state for
some amount of time after a connection, and at least 18% do
so for more than 60 minutes. Section 5.1 shows that session
cache sharing is widespread, with 49% of Top Million do-
mains sharing a cache with at least one other popular domain.
Figure 7 shows the interaction of these measurements.
The combined effect of session caching and cache shar-
ing makes large interdomain session caches a particularly
attractive target for attackers. The ten largest shared caches
(Table 5) account for 15% of Top Million domains and exhib-
ited median vulnerability windows of 5 and 1,440 minutes
(24 hours). Of these, the ﬁve longest-lived all belonged to
9
Google Blogspot and exhibited median cache lifetimes rang-
ing from 4.5 hours to 24 hours (the maximum we tested). An
attacker who could access the contents of any one of these
caches would be able to decrypt hours’ worth of TLS trafﬁc
for hundreds of popular sites.
Compared with Figure 6, Figure 7 shows a similar dis-
tribution within the largest service groups. Although the
maximum vulnerability windows are orders of magnitude
different, the proportional distribution is similar.
6.3 Exposure from Difﬁe-Hellman Reuse
When a server reuses Difﬁe-Hellman ephemeral values
(contrary to the advice of RFC 5246 [14]), this also leads to
an extended vulnerability window. The window last from the
time the server generates its random Difﬁe-Hellman value (a
or dA) until that value is securely erased. Like session tickets,
an attacker who leaks the server’s Difﬁe-Hellman value can
also decrypt future TLS connections until the server ceases
using that value as well as any previous connections using
that value.
Figure 7 shows combined effect of longevity and inter-
domain sharing was signiﬁcantly smaller for Difﬁe-Hellman
reuse than for session resumption, but it still resulted in a few
41Figure 7: Visualizing Session Caches and Difﬁe-Hellman Reuse—For comparison with Fig. 6, we show similar illustrations
of the longevity and cross-domain sharing exhibited by session caches (left) and repeated Difﬁe-Hellman values (right).
notable high-value targets. Afﬁnity Internet shared a single
Difﬁe-Hellman value across 91 domains for 62 days, and
Jimdo shared one value for 19 days across 64 domains and
another value for 17 days across a different 60 domains (seen
as the red blocks in the far left column).
6.4 Combined Exposure
Since session tickets, session caches, and Difﬁe-Hellman
reuse all lead to an extended vulnerability window, an attacker
with some way of accessing the server’s internal state could
choose to exploit any of them to compromise forward secrecy.
A domain’s overall exposure is determined by the longest
vulnerability window it exhibits for any of these mechanisms.
Of the 291,643 domains that were in the Alexa Top Million
for the duration of our measurements and supported HTTPS
with a browser-trusted certiﬁcate, 288,252 (99%) issued a
session ticket, resumed a session, or conducted a DHE or
ECDHE key exchange. Figure 8 shows the distribution of the
maximum vulnerability window found for every domain.
About 90% of browser-trusted Top Million domains with
browser-trusted certiﬁcates are conﬁgured to support forward-
secrecy with modern browsers, which, as commonly thought
of, would result in a vulnerability window that lasts no longer
than the connection. Due to combined effects of the TLS
crypto shortcuts we have discussed, we ﬁnd that 110,788
domains (38%) have a maximum vulnerability window of
more than 24 hours, 65,028 (22%) of more than 7 days, and
28,880 (10%) of more than 30 days.
7. NATION-STATE PERSPECTIVE
As seen above, our results indicate that TLS crypto short-
cuts leave popular HTTPS sites signiﬁcantly less well pro-
tected than we thought in the face of server-side information
leaks such as Heartbleed. However, the risks of these mecha-
nisms appear even more severe if we consider threats from
nation-state attackers such as the NSA. In particular, the
“shape” of the vulnerability windows created by session tick-
ets is ideally suited for exploitation by intelligence agencies
for surveillance purposes. In this section, we consider how a
nation-state attacker might seek to exploit TLS crypto short-
cuts and we assess the potential impact on Internet security of
such a compromise against one particular high-value target,
Google. Due to the availability of information regarding the
NSA and other “Five Eyes” agencies, we focus on the modi
operandi of these groups.
Recent TLS vulnerabilities—such as FREAK [6], Log-
jam [1], and DROWN [4]—require active interference with
each connection, making them unsuitable for stealthy, retroac-
tive, or wide-scale surveillance. Some researchers believe
that NSA can currently defeat TLS encryption when used
with 1024-bit RSA [35] or DHE [1]. In either case, speciﬁc
non-standard conﬁgurations would be required in cipher se-
lection (preferring RSA client write and DHE ciphers with
speciﬁc DH constants respectively) to enable passive decryp-
tion. However, there is no credible evidence that they can
break the higher-strength cryptography now used by most
popular sites.
7.1 The STEK as an Enabling Vector
It is well known that the NSA and other intelligence agen-
cies have the ability to passively collect vast amounts of
Internet trafﬁc. Some collection is “targeted” at a speciﬁc
person, website, or IP address, but other collection involves
indiscriminately storing all network trafﬁc in large circular
buffers, such as XKEYSCORE [36] and TEMPORA [38],
for ex post facto analysis [55].
These capabilities are almost certainly challenged by the
growth of TLS, which has accelerated following increased
public awareness of surveillance [37] and the availability
of free browser-trusted certiﬁcates [30]. Faced with these
constraints, nation-state adversaries might ﬁnd that session
tickets provide an appealing mode of attack. Exﬁltrating
one 16-byte STEK from a server would allow the adversary
to decrypt every passively collected connection which uses
the TLS session ticket extension during the vulnerability
window, including connections within the window but before
the STEK was leaked. As seen in Figures 6, stealing a small
10
42SMTP+STARTTLS, SMTPS, IMAPS, and POP3S. We ex-
perimentally determined that Google’s STEK is rolled over
every 14 hours, but issued tickets are accepted for up to
28 hours, indicating that each key is maintained at least that
long. This implies that only two 16-byte keys must be stolen
every 28 hours in order for the attacker to be able to de-
crypt all Google TLS connections that use the session ticket
extension.
By requesting the MX records for the Alexa Top Million
domains, we ﬁnd that over 90,000 domains (9.1%) point to
Google’s SMTP servers. This is likely a reﬂection of the
Google for Work program in which more than 2 million
businesses (including 60% of Fortune 500 companies) use
Google’s service for their internal and external e-mail [24].
So in addition to the e-mail communications and web-app
data from @gmail.com addresses, the content of any com-
pany which relies on Google’s cloud service for intracompany
e-mail or web-apps would be decryptable.
The intelligence value from the resulting decryption ability
would extend far beyond Google’s own properties. Google
supplies analytics, ads, and APIs to many websites whose
requests would likely send the user’s Google cookies. We
have conﬁrmed that browser connections to these Google
dependencies use the same STEK as other Google sites. Ob-
taining the Google STEK would allow tracking users even
when they are not directly accessing Google sites.
As this analysis shows, Google’s STEK would be an im-
mensely valuable target, as it would enable the decryption of
a huge amount of encrypted trafﬁc and provide intelligence
on targeted and untargeted individuals. Even if the exploita-
tion required the use of sophisticated, persistent hardware
or software implants, the trade off between the possibility
of their discovery and the rich intelligence that would be
gained likely falls within the acceptable risks category for
many nation-state adversaries.
Google’s is the case of a well protected organization with
a highly talented security team. As shown in Section 4.3,
many other organizations—including large tech and cloud
service companies—appear to be far less cognizant of the
risks of TLS performance enhancements. As an example,
Yandex is a Russian Internet company that mirrors Google’s
offerings in search, e-mail, and cloud storage and enjoys a
57% domestic market share [32]. Like Google, Yandex ap-
pears to use a single STEK for almost all of its properties, but
unlike Google, this STEK has been in use continuously since
at least January 10, 2016— eight months prior to this writing.
A single operation to recover this STEK would immediately
allow decryption of months’ worth of connections.
8. DISCUSSION
While we’ve notiﬁed the domains and companies that we
explicitly point out above, there are other ways to address the
ecosystem-wide issues we found. In this section we step back
and view the problems found with (EC)DHE values, session
caches, and session tickets from a community level. We draw
lessons from our measurements and make recommendations
for server operators.
11
Figure 8: Overall Vulnerability Windows—This CDF de-
picts the combined effects of exposure from session tickets,
session caches, and Difﬁe-Hellman reuse.
number of STEKs would enable decryption of content from
a large number of domains.
Although obtaining a STEK may require attacking the
provider and not the end-target, intelligence agencies have
been known to conduct sophisticated intrusions in order to
facilitate later passive surveillance. GCHQ inﬁltrated SIM
card manufacturer Gemalto to steal the encryption keys used
by millions of cellphones [10, 45, 53]. They also attacked
engineers at Belgacom, the largest ISP in Belgium, in order to
gain access to trafﬁc from its core routers [21]. An unknown
adversary—thought to be a nation state—inﬁltrated Juniper
Networks’ code repository and inserted a cryptographic back-
door into the company’s VPN products [9]. Similar opera-
tions could be used to access STEKs from high-value targets.
It is likely that some domains synchronize STEKs across
servers in many network locations and jurisdictions. A nation-
state attacker could attempt to compromise the synchroniza-
tion mechanism, or they could convince a hosting facility to
grant them access to the equipment for physical attacks [3].
Within its national borders, such an attacker might use the
court system to compel an organization to turn over the
STEKs, as Lavabit was ordered to do with its TLS private
key [46]. However obtained, the STEK would provide global
decryption capabilities.
7.2 Target Analysis: Google
To provide a concrete example, we simulate a nation-state
attacker’s possible analysis of an attack against Google— a
large tech company with experience being attacked by [23,56]
and defending against [22] nation-state adversaries. As the
attacker, our goal is to leverage our existing passive collec-
tion systems—which currently only see TLS ciphertext—in
order to gain insight into a large swath of network communi-
cation.
As seen in Table 6, a single STEK is shared by nearly all
Google web services, including Search, GMail, Drive, Docs,
Hangouts, and many more. We ﬁnd that Google also uses
the same STEK for other TLS-based protocols, including
 0 0.2 0.4 0.6 0.8 15 minutes1 hour1 day1 week1 monthCDF Alexa1M (w/ HTTPS)Maximum Exposure Window SizeAlexa1M HostsAlexa10K HostsAlexa100 Hosts438.1 Security Community Lessons
The security community’s advocacy for the adoption of
TLS forward secrecy has shown clear gains, with over 90%
of Top Million HTTPS sites now using forward secret key ex-
changes for modern browsers. And the use of forward secret
key exchanges is undoubtedly a vast security improvement
from non-forward secret exchanges. However, our results are
a reminder that cipher selection is only one part of the story.
Forward secrecy comes with many critical caveats and nu-
ances of implementation [49]. The security community needs
to do a better job of monitoring implementation behavior—
through measurements like the ones we present here—in
order to have a realistic understanding of the threats we need
to guard against.
The security community also needs to more clearly com-
municate such caveats to TLS server operators and imple-
menters so that they can make informed choices about secu-
rity/performance tradeoffs. Absent such knowledge, there is
a risk that forward-secret TLS handshakes can create a false
sense of security. In the aftermath of the Heartbleed vulner-
ability, security experts urged administrators to enable PFS
ciphers in order to guard against retrospective decryption as a
result of future server-side memory leaks [19, 57]. However,
only a few experts ever noted that performance enhancements
like session resumption undermine that protection [49], and
the fact seems to have been largely overlooked. The next
time there there is such a vulnerability, administrators who
enabled PFS as a defense might mistakenly believe they are
safe.
One opportunity to begin such education is protocol stan-
dards. As described in Section 2.4, the TLS 1.3 draft proposes
changes that have direct consequences for the protocol’s vul-
nerability window. Draft 15 brieﬂy addresses the changes to
forward secrecy cased by PSK connections and 0-RTT, but
simply sets a 7 day maximum for PSK lifetimes without dis-
cussion. As shown above, PSKs honored for 7 days (whether
database lookups or encrypted state) require TLS secrets to
exist for the same amount of time and may be a signiﬁcant
risk for high-value domains.
8.2 Server Operators Recommendations
For maximum security, server operators should disable all
session resumption and Difﬁe-Hellman reuse. And while
we are aware that many operators will be understandably
unwilling to do so due to the bandwidth, computation, and
latency advantages, there is a middle-ground between the
two that limits vulnerability windows as well as allows the
performance enhancements.
Use HTTP/2 Using HTTP/2 [5] drastically reduces the
computation, bandwidth, and latency of loading a website
without requiring any crypto shortcuts. An entire domain’s
contents (base page and all dependencies) can be loaded over