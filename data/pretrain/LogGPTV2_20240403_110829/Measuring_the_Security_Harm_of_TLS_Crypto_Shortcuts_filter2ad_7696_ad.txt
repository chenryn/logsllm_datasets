### Vulnerability Window and STEK Reuse

The vulnerability window for a Session Ticket Encryption Key (STEK) begins when the key is generated, potentially before the victim's connection, and ends when it is securely erased from all servers. As reported in Section 4.3, 36% of the ticket-issuing domains we analyzed reused the same STEK for at least a day, 22% for more than a week, and 10% for more than a month.

In Figure 6, we visualize the interaction between session ticket service groups and the median STEK reuse duration for each group. The two largest service groups, CloudFlare and Google, account for 20% of the top million HTTPS sites and are shown in the far-left column. Both reused STEKs for less than 24 hours. At the other end of the spectrum, TMall (a Chinese online retailer) and Fastly (a Content Delivery Network, CDN) reused STEKs for much longer periods, as indicated by the largest red elements in the second column of Figure 6. Together, these services accounted for 1,208 domains. Fastly, which manages domains such as foursquare.com, www.gov.uk, and aclu.org, consistently issued session tickets with the same STEK throughout our 9-week study.

Although not one of the largest service groups, Jack Henry & Associates controlled a concerning cluster of 79 bank and credit union domains. These domains issued session tickets using a single STEK for 59 days and then rotated to a different, but still shared, STEK for the final 4 days of our study.

While we are pleased that many of the largest service groups rotate their STEKs at least daily, the reliance on a small number of secret values is troubling. Current versions of Chrome, Firefox, Internet Explorer, and Microsoft Edge all support the session ticket extension by default. An attacker who could collect the traffic and obtain the STEK within the vulnerability window would be able to decrypt and access the content of millions of victims' connections with ease.

### Exposure from Session Caches

When a server supports session ID resumption, an attacker can potentially recover keys for past sessions as long as they remain in the server’s session cache. Thus, the vulnerability window begins when the victim's connection completes its handshake and ends when the server implementation securely discards the session state.

Our experiments in Section 4.1 show that at least 83% of the top million sites use session caching and retain state for some time after a connection, with at least 18% doing so for more than 60 minutes. Section 5.1 indicates that session cache sharing is widespread, with 49% of the top million domains sharing a cache with at least one other popular domain. Figure 7 illustrates the interaction of these measurements.

The combined effect of session caching and cache sharing makes large interdomain session caches an attractive target for attackers. The ten largest shared caches (Table 5) account for 15% of the top million domains and exhibit median vulnerability windows of 5 and 1,440 minutes (24 hours). Of these, the five longest-lived all belonged to Google Blogspot and exhibited median cache lifetimes ranging from 4.5 hours to 24 hours (the maximum we tested). An attacker who could access the contents of any one of these caches would be able to decrypt hours’ worth of TLS traffic for hundreds of popular sites.

Compared to Figure 6, Figure 7 shows a similar distribution within the largest service groups. Although the maximum vulnerability windows differ significantly, the proportional distribution is similar.

### Exposure from Diffie-Hellman Reuse

When a server reuses Diffie-Hellman ephemeral values (contrary to RFC 5246 [14]), this also leads to an extended vulnerability window. The window lasts from the time the server generates its random Diffie-Hellman value (a or dA) until that value is securely erased. Like session tickets, an attacker who leaks the server’s Diffie-Hellman value can decrypt future TLS connections until the server ceases using that value, as well as any previous connections using that value.

Figure 7 shows that the combined effect of longevity and inter-domain sharing was significantly smaller for Diffie-Hellman reuse than for session resumption, but it still resulted in a few notable high-value targets. Affinity Internet shared a single Diffie-Hellman value across 91 domains for 62 days, and Jimdo shared one value for 19 days across 64 domains and another value for 17 days across a different 60 domains (seen as the red blocks in the far left column).

### Combined Exposure

Since session tickets, session caches, and Diffie-Hellman reuse all lead to an extended vulnerability window, an attacker with access to the server’s internal state could exploit any of them to compromise forward secrecy. A domain’s overall exposure is determined by the longest vulnerability window it exhibits for any of these mechanisms.

Of the 291,643 domains that were in the Alexa Top Million for the duration of our measurements and supported HTTPS with a browser-trusted certificate, 288,252 (99%) issued a session ticket, resumed a session, or conducted a DHE or ECDHE key exchange. Figure 8 shows the distribution of the maximum vulnerability window found for every domain.

Approximately 90% of browser-trusted top million domains with browser-trusted certificates are configured to support forward secrecy with modern browsers, which, as commonly thought, would result in a vulnerability window lasting no longer than the connection. However, due to the combined effects of the TLS crypto shortcuts discussed, we find that 110,788 domains (38%) have a maximum vulnerability window of more than 24 hours, 65,028 (22%) of more than 7 days, and 28,880 (10%) of more than 30 days.

### Nation-State Perspective

Our results indicate that TLS crypto shortcuts leave popular HTTPS sites significantly less protected than previously thought in the face of server-side information leaks such as Heartbleed. The risks of these mechanisms appear even more severe if we consider threats from nation-state attackers like the NSA. In particular, the "shape" of the vulnerability windows created by session tickets is ideally suited for exploitation by intelligence agencies for surveillance purposes.

In this section, we consider how a nation-state attacker might seek to exploit TLS crypto shortcuts and assess the potential impact on Internet security, focusing on one high-value target, Google. Due to the availability of information regarding the NSA and other "Five Eyes" agencies, we focus on their modus operandi.

Recent TLS vulnerabilities, such as FREAK [6], Logjam [1], and DROWN [4], require active interference with each connection, making them unsuitable for stealthy, retrospective, or wide-scale surveillance. Some researchers believe that the NSA can currently defeat TLS encryption when used with 1024-bit RSA [35] or DHE [1]. In either case, specific non-standard configurations would be required in cipher selection to enable passive decryption. However, there is no credible evidence that they can break the higher-strength cryptography now used by most popular sites.

### The STEK as an Enabling Vector

It is well known that the NSA and other intelligence agencies have the ability to passively collect vast amounts of Internet traffic. Some collection is "targeted" at a specific person, website, or IP address, but other collection involves indiscriminately storing all network traffic in large circular buffers, such as XKEYSCORE [36] and TEMPORA [38], for ex post facto analysis [55].

These capabilities are challenged by the growth of TLS, which has accelerated following increased public awareness of surveillance [37] and the availability of free browser-trusted certificates [30]. Faced with these constraints, nation-state adversaries might find that session tickets provide an appealing mode of attack. Exfiltrating one 16-byte STEK from a server would allow the adversary to decrypt every passively collected connection that uses the TLS session ticket extension during the vulnerability window, including connections within the window but before the STEK was leaked. As seen in Figures 6, stealing a small number of STEKs would enable decryption of content from a large number of domains.

Although obtaining a STEK may require attacking the provider and not the end-target, intelligence agencies have been known to conduct sophisticated intrusions to facilitate later passive surveillance. GCHQ infiltrated SIM card manufacturer Gemalto to steal the encryption keys used by millions of cellphones [10, 45, 53]. They also attacked engineers at Belgacom, the largest ISP in Belgium, to gain access to traffic from its core routers [21]. An unknown adversary—thought to be a nation state—infiltrated Juniper Networks’ code repository and inserted a cryptographic backdoor into the company’s VPN products [9]. Similar operations could be used to access STEKs from high-value targets.

It is likely that some domains synchronize STEKs across servers in many network locations and jurisdictions. A nation-state attacker could attempt to compromise the synchronization mechanism or convince a hosting facility to grant them access to the equipment for physical attacks [3]. Within its national borders, such an attacker might use the court system to compel an organization to turn over the STEKs, as Lavabit was ordered to do with its TLS private key [46]. However obtained, the STEK would provide global decryption capabilities.

### Target Analysis: Google

To provide a concrete example, we simulate a nation-state attacker’s possible analysis of an attack against Google—a large tech company with experience being attacked by [23,56] and defending against [22] nation-state adversaries. As the attacker, our goal is to leverage our existing passive collection systems, which currently only see TLS ciphertext, to gain insight into a large swath of network communication.

As seen in Table 6, a single STEK is shared by nearly all Google web services, including Search, Gmail, Drive, Docs, Hangouts, and many more. We find that Google also uses the same STEK for other TLS-based protocols, including SMTP+STARTTLS, SMTPS, IMAPS, and POP3S. We experimentally determined that Google’s STEK is rolled over every 14 hours, but issued tickets are accepted for up to 28 hours, indicating that each key is maintained for at least that long. This implies that only two 16-byte keys must be stolen every 28 hours for the attacker to decrypt all Google TLS connections that use the session ticket extension.

By requesting the MX records for the Alexa Top Million domains, we find that over 90,000 domains (9.1%) point to Google’s SMTP servers. This is likely a reflection of the Google for Work program, in which more than 2 million businesses (including 60% of Fortune 500 companies) use Google’s service for their internal and external email [24]. So, in addition to the email communications and web-app data from @gmail.com addresses, the content of any company relying on Google’s cloud service for intracompany email or web apps would be decryptable.

The intelligence value from the resulting decryption ability would extend far beyond Google’s own properties. Google supplies analytics, ads, and APIs to many websites whose requests would likely send the user’s Google cookies. We have confirmed that browser connections to these Google dependencies use the same STEK as other Google sites. Obtaining the Google STEK would allow tracking users even when they are not directly accessing Google sites.

As this analysis shows, Google’s STEK would be an immensely valuable target, enabling the decryption of a huge amount of encrypted traffic and providing intelligence on targeted and untargeted individuals. Even if the exploitation required the use of sophisticated, persistent hardware or software implants, the trade-off between the possibility of their discovery and the rich intelligence that would be gained likely falls within the acceptable risks category for many nation-state adversaries.

Google is a well-protected organization with a highly talented security team. As shown in Section 4.3, many other organizations, including large tech and cloud service companies, appear to be far less cognizant of the risks of TLS performance enhancements. For example, Yandex is a Russian Internet company that mirrors Google’s offerings in search, email, and cloud storage and enjoys a 57% domestic market share [32]. Like Google, Yandex appears to use a single STEK for almost all of its properties, but unlike Google, this STEK has been in use continuously since at least January 10, 2016—eight months prior to this writing. A single operation to recover this STEK would immediately allow decryption of months’ worth of connections.

### Discussion

While we have notified the domains and companies explicitly mentioned above, there are other ways to address the ecosystem-wide issues we found. In this section, we step back and view the problems with (EC)DHE values, session caches, and session tickets from a community level. We draw lessons from our measurements and make recommendations for server operators.

#### Security Community Lessons

The security community’s advocacy for the adoption of TLS forward secrecy has shown clear gains, with over 90% of the top million HTTPS sites now using forward-secret key exchanges for modern browsers. Forward secrecy is undoubtedly a vast security improvement over non-forward-secret exchanges. However, our results remind us that cipher selection is only one part of the story. Forward secrecy comes with many critical caveats and nuances of implementation [49]. The security community needs to do a better job of monitoring implementation behavior—through measurements like the ones we present here—to have a realistic understanding of the threats we need to guard against.

The security community also needs to more clearly communicate these caveats to TLS server operators and implementers so that they can make informed choices about security/performance trade-offs. Absent such knowledge, there is a risk that forward-secret TLS handshakes can create a false sense of security. In the aftermath of the Heartbleed vulnerability, security experts urged administrators to enable PFS ciphers to guard against retrospective decryption as a result of future server-side memory leaks [19, 57]. However, only a few experts noted that performance enhancements like session resumption undermine that protection [49], and the fact seems to have been largely overlooked. The next time there is such a vulnerability, administrators who enabled PFS as a defense might mistakenly believe they are safe.

One opportunity to begin such education is through protocol standards. As described in Section 2.4, the TLS 1.3 draft proposes changes that have direct consequences for the protocol’s vulnerability window. Draft 15 briefly addresses the changes to forward secrecy caused by PSK connections and 0-RTT, but simply sets a 7-day maximum for PSK lifetimes without discussion. As shown above, PSKs honored for 7 days (whether through database lookups or encrypted state) require TLS secrets to exist for the same amount of time and may be a significant risk for high-value domains.

#### Server Operators Recommendations

For maximum security, server operators should disable all session resumption and Diffie-Hellman reuse. While we understand that many operators will be unwilling to do so due to the bandwidth, computation, and latency advantages, there is a middle ground that limits vulnerability windows while allowing performance enhancements.

**Use HTTP/2**: Using HTTP/2 [5] drastically reduces the computation, bandwidth, and latency of loading a website without requiring any crypto shortcuts. An entire domain’s contents (base page and all dependencies) can be loaded over a single connection, reducing the need for session resumption and other performance optimizations.