### 4.16.5. The Benefits of EFI

EFI (Extensible Firmware Interface) is designed to be a powerful and modular firmware that can be easily extended, even by advanced users. Below is a summary of the key benefits of EFI:

- **Modularity and Extensibility**: EFI is written in C, which makes it portable and easy to extend.
- **Architecture Agnostic**: It is implementation-agnostic and compatible across different architectures, providing a consistent view of the underlying platform to the operating system.
- **Backward Compatibility**: EFI can complement existing interfaces and does not require the x86 real mode, running in a flat memory model where the entire address space is addressable.
- **No Size Restrictions**: There are no restrictions on the total size of option ROMs, and EFI drivers can be loaded anywhere in the EFI address space.
- **Graphics Primitives**: EFI aims to replace the legacy VGA with simple graphics primitives provided by the UGA (Unified Graphics Architecture).
- **Optional Shell**: An optional shell is included, offering users considerable freedom and flexibility.
- **Hierarchical Device Representation**: The system's hardware topology is represented as a hierarchical structure of device pathnames.
- **Network Support**: The preboot environment supports a network interface compatible with BSD sockets and includes a port of the FreeBSD TCP/IPv4 protocol stack.
- **Versatile Booting Options**: With the appropriate drivers, an EFI-based system can boot from various devices such as floppy disks, hard disks, optical discs, USB storage, and wired or wireless networks. Network booting is a fundamental capability in EFI, independent of the network card.
- **Improved Disk Partitioning**: EFI replaces the ancient MBR-based disk partitioning scheme with a more advanced and flexible one.

Despite its advanced features, EFI is not intended to replace a "real" operating system. It is a limited execution environment that is single-threaded and non-preemptive. However, EFI's preboot environment can facilitate robust solutions for secure network booting, secure network resetting, and remote system management. These capabilities are enabled by bootable EFI programs or agents that allow remote firmware management, provisioning, and setup.

### Chapter 5. Kernel and User-Level Startup

#### 5.1. Arranging for the Kernel to Execute

The Mac OS X kernel is a Mach-O executable located at `/mach_kernel` by default on a boot volume. During the final linking stage of the kernel, several aspects of the executable are arranged, including:

- **Entry Point**: The entry point is set to `_start` [osfmk/ppc/start.s]. The LC_UNIXTHREAD load command in the Mach-O header contains the entry point's value in the SRR0 register of the thread state.
- **Segment Addresses**:
  - The `__VECTORS` segment is set to 0x0.
  - The `__HIB` segment, used for hibernation, is set to 0x7000.
  - The `__TEXT` segment is set to 0xe000.
- **Section Alignments**:
  - The `__text` section in the `__TEXT` segment has its alignment set to 0x1000 (4096 bytes).
  - The `__common` section in the `__DATA` segment has its alignment set to 0x1000 (4096 bytes).
  - The `__bss` section in the `__DATA` segment has its alignment set to 0x1000 (4096 bytes).
- **Empty Sections**:
  - A `__text` section is created (with the contents of `/dev/null`) in the `__PRELINK` segment.
  - Similarly, sections `__symtab` and `__info` are created from `/dev/null` in the `__PRELINK` segment.

#### 5.1.1. Exceptions and Exception Vectors

The `__VECTORS` segment contains the kernel's exception vectors. BootX copies these vectors to their designated locations starting at address 0x0 before calling the kernel. These vectors are implemented in `osfmk/ppc/lowmem_vectors.s`. Table 51 provides an overview of PowerPC exceptions, most of which are subject to specific conditions. For example, exceptions caused by failed effective-to-virtual address translations occur only if address translation is enabled. Most exceptions can occur only when no higher-priority exception exists.

| Vector Offset | Exception Code | Cause/Comments |
|---------------|----------------|----------------|
| 0x0100        | T_RESET        | Hard or soft processor reset. Nonmaskable and asynchronous. |
| 0x0200        | T_MACHINE_CHECK | Various causes: parity error detection in the L1 cache, TLB, or SLB; uncorrectable ECC error in the L2 cache. May be recoverable or unrecoverable. |
| 0x0300        | T_DATA_ACCESS  | Page fault or erroneous data memory access, such as an operation with invalid memory rights. |
| 0x0380        | T_DATA_SEGMENT | Effective address of a storage location failed to be translated to a virtual address. |
| 0x0400        | T_INSTRUCTION_ACCESS | Similar to data access exception, but for instructions. |
| 0x0480        | T_INSTRUCTION_SEGMENT | Effective address of the next instruction to be executed failed to translate to a virtual address. |
| 0x0500        | T_INTERRUPT    | Asserted by an external interrupt input signal. |
| 0x0600        | T_ALIGNMENT    | Various alignment-related causes: e.g., certain load/store instructions encountered misaligned operands. |
| 0x0700        | T_PROGRAM      | Various causes: e.g., floating-point exception, or execution of an illegal or privileged instruction. |
| 0x0800        | T_FP_UNAVAILABLE | Floating-point unit unavailable or disabled. |
| 0x0900        | T_DECREMENTER  | The decrementer is negative. |
| 0x0a00        | T_IO_ERROR     | Unused on Mac OS X. |
| 0x0b00        | T_RESERVED     | Reserved. |
| 0x0c00        | T_SYSTEM_CALL  | The system call (sc) instruction is executed. |
| 0x0d00        | T_TRACE        | Single-step tracing or branch tracing is enabled and an instruction successfully completed. |
| 0x0e00        | T_FP_ASSIST    | A floating-point operation needs software assistance. |
| 0x0f00        | T_PERF_MON     | Various performance-monitoring exception conditions. |
| 0x0f20        | T_VMX          | VMX is unavailable or disabled. |
| 0x1000        | T_INVALID_EXCP0 | Unused on Mac OS X. |
| 0x1100        | T_INVALID_EXCP1 | Unused on Mac OS X. |
| 0x1200        | T_INVALID_EXCP2 | Unused on Mac OS X. |
| 0x1300        | T_INSTRUCTION_BKPT | The 970FX only supports this feature through a support-processor interface. |
| 0x1400        | T_SYSTEM_MANAGEMENT | Implementation-dependent. |
| 0x1500        | T_SOFT_PATCH   | Implementation-dependent softpatch facility emitted a special exception-causing internal operation. Used for working around defective instructions and for debugging. |
| 0x1600        | T_ALTIVEC_ASSIST | Implementation-dependent AltiVec Java Mode maintenance exception. Can be signaled by various internal events and by explicit commands. |
| 0x1700        | T_THERMAL      | An input operand or the result of an operation was denormalized while operating in AltiVec Java Mode. |
| 0x1800        | T_ARCHDEP0     | Signaled by assertion of a thermal interrupt input signal. |
| 0x2000        | T_INSTRUMENTATION | Unused on Mac OS X. |
| 0x2100        | T_VMM_ULTRAFAST_PATH | Filter ultra-fast path system calls for the virtual machine monitor (VMM). Not used in Mac OS X 10.4. |

Most hardware exceptions in the Mac OS X kernel are channeled through a common exception-handling routine: `exception_entry` [osfmk/ppc/lowmem_vectors.s]. The designated exception handler saves GPR13 and GPR11, sets a "rupt" code in GPR11, and jumps to `exception_entry`.

#### 5.1.2. Kernel Symbols

Two related files, `/mach.sym` and `/mach`, are usually present on the root volume. The `/mach.sym` file contains symbols from the currently running kernel and is used by programs that need to access kernel data structures. If the on-disk kernel executable does not correspond to the running kernel, the kernel can generate a dump of its own symbols and write it to a designated file. This file's pathname can be retrieved using the `KERN_SYMFILE` sysctl, which provides read access to the `kern.symfile` sysctl variable.

```sh
$ sysctl kern.symfile
kern.symfile = /mach.sym
```

The kernel implementation of the `KERNEL_SYMFILE` sysctl checks whether `/mach.sym` is open by looking at a global Boolean variable. If it is not open, the kernel outputs kernel symbols to `/mach.sym` and marks it as open. The kernel does not dump symbols to `/mach.sym` if the root device is being accessed over the network, if `/mach.sym` exists as a non-regular file, or if it exists as a file with a link count of more than one. This symbol-file creation is triggered during user-level system startup from `/etc/rc`, which uses the `sysctl` command to retrieve the value of the `kern.symfile` variable.

```sh
# /etc/rc
...
# Create mach symbol file
sysctl -n kern.symfile
if [ -f /mach.sym ]; then
  ln -sf /mach.sym /mach
else
  ln -sf /mach_kernel /mach
fi
```

If `/mach.sym` exists, `/mach` is created as a symbolic link to it; otherwise, `/mach` is a symbolic link to `/mach_kernel`. Since `/mach.sym` is useful only if it corresponds to the running kernel, it is deleted and recreated during every boot.

```sh
$ ls -l /mach*
lrwxr-xr-x 1 root admin 9 Mar 10 16:07 /mach -> /mach.sym
-r--r--r-- 1 root admin 598865 Mar 10 16:07 /mach.sym
-rw-r--r-- 1 root wheel 4330320 Feb 3 20:51 /mach_kernel
```

The kernel supports dumping symbols only once per boot. If you delete `/mach.sym`, running the `sysctl` command will not regenerate it unless you reboot.

The symbols in `/mach.sym` are the same as in the running kernel's executable, although section references in the symbol table are converted to absolute references. In fact, `/mach.sym` is a Mach-O executable containing a load command for the `__TEXT` segment, a load command for the `__DATA` segment, and an `LC_SYMTAB` load command for the symbol table. Only the `__const` section of the `__TEXT` segment is non-empty, containing the kernel vtables.

```sh
$ otool -hv /mach.sym
/mach.sym:
Mach header
magic cputype cpusubtype filetype ncmds sizeofcmds flags
MH_MAGIC PPC ALL EXECUTE 3 816 NOUNDEFS

$ otool -l /mach.sym
...
Load command 2
cmd LC_SYMTAB
cmdsize 24
symoff 184320
nsyms 11778
stroff 325656
strsize 273208

$ nm -j /mach_kernel > /tmp/mach_kernel.sym
$ nm -j /mach.sym > /tmp/mach.sym.sym
$ ls -l /tmp/mach_kernel.sym /tmp/mach.sym.sym
-rw-r--r-- 1 amit wheel 273204 Mar 10 19:22 /tmp/mach.sym.sym
-rw-r--r-- 1 amit wheel 273204 Mar 10 19:22 /tmp/mach_kernel.sym

$ diff /tmp/mach_kernel.sym /tmp/mach.sym.sym
# no output produced by diff

$ nm /mach_kernel | grep __start_cpu
00092380 T __start_cpu

$ nm /mach.sym | grep __start_cpu
00092380 A __start_cpu
```

#### 5.1.3. Run Kernel Run

Figure 51 shows a high-level overview of Mac OS X system startup. In the rest of this chapter, we will look at the details of the steps listed in the "Kernel" and "User" boxes.

![A high-level view of Mac OS X system startup](image_url)

The terms "low-level" and "high-level" are subjective and approximate. For example, the I/O Kit, specifically the platform driver like `AppleMacRISC4PE`, handles certain low-level aspects of processor initialization, but the I/O Kit is not active during very early kernel startup.

#### 5.2. Low-Level Processor Initialization

As shown in Figure 52, BootX launches the kernel by calling the `_start` symbol in the kernel. In a multiprocessor system, the kernel begins execution on one processor chosen by Open Firmware. For the purposes of kernel startup, this is considered the master processor, and the rest, if any, are slave processors.

![Low-level processor initialization](image_url)

We will use the terms CPU and processor interchangeably unless they have specific meanings in some context. In Mach parlance, a processor is typically a hardware-independent entity, whereas a CPU represents the underlying hardware entity.

#### 5.2.1. Per-Processor Data

The `_start()` function first initializes a pointer to the current per-processor data area. The kernel maintains a table of such per-processor data structures. The table, `PerProcTable`, is an array of `per_proc_entry` structures. Each `per_proc_entry` structure consists of a `per_proc_info` structure, which holds data for one processor. The `per_proc_info` structure for the master processor is specially labeled as `BootProcInfo`. These structures reside in aligned memory. Note that a thread's machine-specific context includes a pointer to the current `per_proc_info` structure. Figure 53 shows an excerpt from the declaration of the `per_proc_info` structure.

```c
// osfmk/ppc/exception.h
struct per_proc_info {
  // This processor's number
  unsigned short cpu_number;
  // Various low-level flags
  unsigned short cpu_flags;
  // Interrupt stack
  vm_offset_t istackptr;
  vm_offset_t intstack_top_ss;
  ...
  // Special thread flags
  unsigned int spcFlags;
  ...
  // Owner of the FPU on this processor
  struct facility_context *FPU_owner;
  // VRSave associated with live vector registers
  unsigned int liveVRSave;
  // Owner of the VMX on this processor
  struct facility_context *VMX_owner;
  ...
  // Interrupt related
  boolean_t interrupts_enabled;
  IOInterruptHandler interrupt_handler;
  void *interrupt_nub;
  unsigned interrupt_source;
  ...
  // Processor features
  procFeatures pf;
  ...
  // Copies of general-purpose registers used for temporary save area
  uint64_t tempr0;
  ...
  uint64_t tempr31;
  ...
  // Copies of floating-point registers used for floating-point emulation
  double emfp0;
  ...
};
```

This structure provides a comprehensive set of fields to manage the state and behavior of each processor in the system.