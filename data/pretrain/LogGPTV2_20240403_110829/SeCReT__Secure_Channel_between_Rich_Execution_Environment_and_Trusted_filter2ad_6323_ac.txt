147.78
160.32
SeCReT enabled
Overhead
1.06
8.83
1.23
1.57
174.66
189.03
3.9259x
1.6264x
3.7273x
3.7381x
1.1819x
1.1791x
that, even in the monitor mode, as long as the NS-bit for the
SCR is set, we are able to retrieve the value for the registers
based on the REE’s context.
In ARM Linux,
two page tables are maintained:
the
hardware page table, which supports the ARM-speciﬁc page
descriptor; and the Linux page table, which is speciﬁc to the
Linux OS. In ARM’s page-table descriptor, some properties,
such as the present bit and the dirty bit, are not supported.
Thus, Linux maintains the additional page tables in order to
emulate the missing properties. Figure 5 shows the difference
of the attributes provided by each page table descriptor. Se-
CReT utilizes both tables. The hardware page table is used to
set the NA permission bit that causes the data-abort exception
when a process accesses the session key. The Linux page is
traversed to discover the currently loaded code pages for the
process by checking the present bit. The integrity of the code
pages is checked before whitelisting the speciﬁc return address
of the signal handler and before assigning the session key to the
process. Both pages tables are protected by active monitoring
and updated only in the TEE.
VI. EVALUATION
In this section, we present a security analysis and a perfor-
mance evaluation for SeCReT. We evaluated the performance
of SeCReT on Arndale board that offers a Cortex-A15 at 1.7
GHz dual-core processor. For the security analysis, not only
Arndale board, but ARM Fast Models [4] that emulates ARM
Cortex-A15 single-core processor was also utilized.
A. Security Analysis
There are several attack surfaces that an attacker can
attempt to exploit for session-key exﬁltration. First, the attacker
can snapshot
the physical memory area that contains the
session key. To protect the key from the memory-snapshot
attack, the memory area that contains the key should be ﬂushed
with the occurrence of event that causes the switch to kernel
mode. We utilized a Model Debugger [8] to ﬁnd a proper
point of kernel code that SeCReT T can be inserted. Because
Fast Models are available for processors with various number
of cores, we performed our analysis based on a Cortex-A15
single-core processor which makes debugging easier than a
multi-core processor. After ﬁnishing the analysis, we inserted
SeCReT T to the REE kernels on Fast Models as well as
Arndale board.
On each environment, running a single- and dual-core
processor, respectively, we ran a rootkit
that continuously
copies the speciﬁc memory region reserved for the session-
key assignment. At the same time, we ran a legitimate process
10
——————————————————————
Input: An ascii payload of size: 128 to 8192 bytes
Output: Encrypted payload
*key = allocMemory()
if Key Protection then
assignKeyBySeCReT(key)
else
*key=tempValue()
end if
payload = encrypt(payload, *key)
printString(payload)
——————————————————————
Fig. 6. Measurement for key-access control overhead
that repeatedly accesses the session key. With this experiment
on Fast Models with a single-core processor, we could conﬁrm
that our prototype for SeCReT ﬂushes the session key clearly
with every possible exception that causes a switch to kernel
mode. However, on Arndale board with a dual-core processor,
the key was exposed to the rootkit when the legitimate process
and the rootkit are scheduled to run on different cores at the
same time. The mitigation of this problem is quite simple when
active monitoring cooperates with SeCReT. We discuss this in
more detail in Section VII.
An attacker could also attempt to manipulate the code or
the control ﬂow of the process. As explained in Section IV-D1
and IV-D2, verifying the hash check and shadow stack can
detect attacks to the code and the control ﬂow, respectively.
SeCReT T, which is trampoline code, can be reused to add
the malicious address to the shadow stack or whitelist sighand.
Moreover, SeCReT T, inserted to the switch to user code, can
be bypassed to skip the shadow-stack veriﬁcation and jump
to the address sought by the attacker. Such attacks are not
feasible because we maintain the mode switch ﬂag, which
can be updated only once for each legitimate mode switch.
SeCReT’s defense mechanisms against each attack surface are
summarized in Table II.
B. Performance
1) Microbenchmarks: We ran LMBench to evaluate the
performance degradation to the overall system from enabling
SeCReT. LMBench measures the performance of OS func-
tionalities such as system-call invocations, memory mapping,
and page-fault handling. For the evaluation, we created a
temporary process that requests a session-key assignment to
enable SeCReT. Once SeCReT is enabled, monitor mode
is entered with every switch in modes, regardless of what
processes are currently scheduled and running. Thus, any
process that runs when SeCReT is enabled experiences some
performance degradation.
Table III presents the results of the microbenchmark,
reporting the average latency after running ten times for each
system call and the performance degradation from enabling
SeCReT, comparing it to running Linux without SeCReT. It
should be noted that we evaluated the performance only on
Arndale board because Fast Models does not guarantee the
accuracy of cycle counts. The null system call caused the most
degradation, indicating the performance overhead for switching
between user and kernel mode. The read and write system
11
call also caused high overhead. However, as can be seen with
other system calls such as open and fork, the table reveals a
tendency for less overhead imposed by SeCReT as the latency
increases. When SeCReT is disabled, running the benchmark is
meaningless because SeCReT is not triggered during the mode
switch. Therefore, the overhead for SeCReT-disabled was not
measured in our performance evaluation.
2) Key Access-Control Overhead: The overhead imposed
by the access control to the session key was also measured.
As can be seen in Figure 6, we wrote a simple test program
that parses, encrypts, and prints an input payload. The input
payload was a simple string with lengths varying from 128 to
8192 byte. We ran the test in three different environments:
Linux, SeCReT-enabled Linux, and SeCReT-enabled Linux
with key protection. SeCReT-enabled Linux with key protec-
tion refers to the environment where the test process uses
the session key that is protected by SeCReT. For the other
two environments, we temporarily assigned an integer value
as a key to encrypt the payload. The key in both Linux and
SeCReT-enabled Linux were unprotected. This was adopted
merely to determine the performance overhead from SeCReT’s
key-protection mechanism.
The results of the experiment can be seen in Table IV,
indicating the average latency after running ten times for each
input payload. SeCReT Enabled shows that the performance
overhead imposed from enabling SeCReT is maximum 16.41%
with an input payload of 256 bytes. It is worth reiterating
that the control ﬂow is redirected to monitor mode with every
switch in modes when SeCReT is enabled, whether the session
key is protected or not. This additional mode switch is the main
factor that causes the overhead in SeCReT Enabled.
Finally, we measured the overhead of SeCReT with Key
Protection. As shown in Table IV, SeCReT with Key Protec-
tion indicates the overhead for protecting the session key in
addition to enabling SeCReT. Unfortunately, the worst case
in our experiment was the test run with an input payload of
128 bytes, outputting at 48.28% overhead, compared to Linux.
According to our analysis, the performance was deteriorated
since the key protection additionally required the hash-check
for code area, and repetitive assignments and ﬂushes of the
session key. However, similar to the results of LMBench, the
overhead was considerably reduced (almost down to 0.18% for
key protection) as the latency of the test increased.
VII. DISCUSSION
A. Extension of SeCReT
The current design of TrustZone’s architecture does not
provide an interface for user processes to communicate directly
with TrustZone. The only way to synchronously enter Trust-
Zone is invoking an SMC instruction, and such an instruction is
only available in kernel mode. On the other hand, the hypercall
of the hypervisor can be invoked directly from user mode.
Thus, previous works [16], [20] can utilize the hypercall to
protect the user process from the untrusted kernel. To build
a direct communication protocol such as the hypercall
in
TrustZone’s architecture, SeCReT’s key-protection mechanism
can be applied. For example, the user process can set up
parameters to the predeﬁned general-purpose registers and
cause an exception intentionally by accessing the pinned page
TABLE IV.
BENCHMARK OF SECRET OVERHEAD COMPARED TO LINUX
Payload
Size (Bytes)
128
256
512
1024
2048
4096
8192
Linux
Time (µs)
1334.6
1642.5
2279.4
3650.9
340225.7
679761.2
1693561.2
SeCReT Enabled
Time (µs)
1544.5
1912.1
2509.8
3822.6
340244.6
679818.7
1693683.6
Overhead
15.73%
16.41%
10.11%
4.70%
0.01%
0.01%
0.01%
SeCReT w/ Key Protection
Time (µs)
Overhead
48.28%
1979.0
47.69%
2425.8
34.61%
3068.2
23.71%
4516.7
0.38%
341531.4
681604.3
0.27%
0.18%
1696639.1
that has its access permission set to NA. Subsequently, the
trampoline code inserted to the starting point of the exception
handlers redirects the control ﬂow to TrustZone. Even though
the approach nevertheless requires the trampoline code from
the kernel code, it is reasonable because the protection of
the kernel code’s integrity is available already in TrustZone’s
architecture [14].
Therefore, as shown in the previous works [16], [20], we
can also leverage this approach to protect applications from
untrusted kernels and facilitate the generalization of SeCReT.
SeCReT can also be extended to protect the guest VMs
from vulnerable hypervisors [21], [38]. By inserting Se-
CReT T into the exception vectors in HYP mode (hypervisor
mode) and protecting the vectors from the malicious modi-
ﬁcation, SeCReT can work with virtualization extensions, as
well.
B. Attack against SeCReT
In Section VI-A, the memory snapshot attack that was
performed on a multi-core processor could exﬁltrate the key
even with SeCReT. Although the key is only transiently
accessible, the rootkit still has a chance to snapshot the key if
the running of rootkit is synchronized to the instance of access
to the key by the legitimate process in another core.
However, such an attack is not feasible because of the
following reasons. First, the attacker cannot directly manip-
ulate the page table to map the physical address that contains
the key because the page-table updates are available only on
TrustZone running active monitoring [14], [19]. Second, active
monitoring can refer to the APC and exclude the address that
contains the key during the memory allocation and page-table
update. A Direct Memory Access (DMA) is already controlled
by the active monitoring to enforce the kernel code’s integrity.
Thus, an attack utilizing the DMA from another core is also
prevented.
SeCReT is triggered by exceptions that occur asyn-
chronously as well as synchronously. With synchronous trig-
gers, the attacker may be able to predict when SeCReT will be
engaged and create a transient attack that can hide itself before
SeCReT is activated. However, the fact that SeCReT can also
be triggered asynchronously would prevent the attackers from
consistently predicting the exact instant that SeCReT runs.
Thus, in SeCReT, any attempt that transiently manipulates the
legitimate code in user mode or maps the malicious code in
the data region of a pre-authorized application will be difﬁcult,
although not
to conduct. SeCReT can further
limit the occurrence of this transient attack by increasing the
frequency of checking the code hash and/or by validating the
impossible,
return address to user mode to check if it falls within the range
of a legitimate code area.
Attackers may attempt to analyze all possible paths of
the control ﬂow to pinpoint a speciﬁc exception that occurs
consistently during the runtime of the process. Based on the
analysis, an attacker might succeed at inferring the offsets of
the saved return address from the current SP or manipulating
the message directly. To mitigate this attack, we can write-
protect the data area, such as user stack, and allow SeCReT
to emulate writing to it. To this end, we must scrutinize the
behavior of all system calls to learn how they update the
user-level memory. However, we expect that the emulation of
writing will cause additional performance degradation. Thus,
without the emulation, SeCReT can selectively protect some
critical data, such as the saved return address and message
buffers. The list of critical data can be deﬁned by analyzing
the binary in advance. It can then be deployed in TrustZone
and referred to as part of APC.
The registers that conﬁgure debug events can also be
exploited to hijack the control ﬂow arbitrarily. For instance,
an attacker can set a break point to the instruction that is
executed right before signing the message with the session
key. This message can be replaced with a maliciously crafted
one making the session key useless. As a simple mitigation for
this attack, we can disable every break point by conﬁguring
the control register, such as the Breakpoint Control Registers
(DBGBCR) in ARM, at every mode switch to user for the
process that accesses the resources in the TEE.
Applications in the REE that use the session key also
require careful development to protect against vulnerabilities
— both control and non-control data vulnerability — that an
attacker can exploit to exﬁltrate the key. Although this would
appear to be a task for application developers, we plan to
explore an efﬁcient way for TrustZone to aid in obfuscating
the application in order to prevent attackers from analyzing the
application in advance or during run-time.
C. Usability of SeCReT
In this section, we consider two aspects of SeCReT’s
usability: (1) protecting the session key, and (2) updating the