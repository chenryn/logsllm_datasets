# 【Blackhat】SSRF的新纪元：在编程语言中利用URL解析器

### 译文声明
本文是翻译文章，原文来源：blackhat.com  
原文地址：[链接]  
译文仅供参考，具体内容表达及含义以原文为准。  
作者：[Orange Tsai](http://blog.orange.tw/)  
译者：[math1as](http://bobao.360.cn/member/contribute?uid=1336370560)  
预估稿费：200RMB  
投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿  
译文中掺杂了一些个人见解。

## 什么是SSRF
服务器端请求伪造 (Server-Side Request Forgery, SSRF) 是一种攻击手段，通过它攻击者可以迫使服务器向内部网络或外部网络发起请求。这种攻击能够绕过防火墙，直接访问内网服务，使诸如Struts2、Redis和Elasticsearch等服务面临风险。

## SSRF中的协议“走私”
为了更有效地利用SSRF，攻击者可以使用特定的协议来夹带信息并攻击目标应用。这些协议必须适合于所使用的场景，例如：
- 基于HTTP的协议（如Elasticsearch、CouchDB、MongoDB、Docker）
- 基于文本的协议（如FTP、SMTP、Redis、Memcached）

### 一个有趣的例子
考虑以下协议，我们分析不同Python库分别请求的是哪个域名。结果表明，Python库之间的行为存在差异，这为攻击提供了机会。

### 另一个有趣的例子
#### HTTP协议中的CRLF注入
攻击者可以利用HTTP协议中的CRLF注入来攻击SMTP协议。虽然SMTP通常不支持HTTP协议，但通过构造CRLF注入，可以在某些情况下实现攻击。

### 利用HTTPS协议：SSL握手中未加密的信息
#### HTTPS协议中的CRLF注入
通过TLS SNI (Server Name Indication) 特性，客户端可以在SSL握手过程中发送目标域名。如果在Client Hello消息中包含CRLF注入，可以将信息“走私”到SMTP协议中，从而实施攻击。

### URL解析中的问题
几乎所有的问题都源于URL解析器与请求函数之间的不一致。验证URL合法性之所以困难，是因为RFC2396/RFC3986仅提供了规范说明，而不同的编程语言则根据自己的实现进行解析。

#### RFC 3986中定义的URL组成部分
- 协议部分（通常是http或https）
- 查询字符串和片段（#号后的部分）
- 权限部分（authority）和路径部分（path）

在这些部分中，是否可以进行CRLF注入取决于具体的编程语言及其库的支持情况。

### 关于URL解析器
#### PHP示例
考虑以下PHP代码，其中`readfile`函数用于实施SSRF攻击。然而，构造的URL需要经过`parse_url`函数的检查。如果这两个函数对URL的解析结果不一致，就可能产生安全漏洞。

#### cURL的利用
类似地，在cURL中也存在这样的问题。当cURL作为请求执行者时，可能会将恶意URL解析为目标地址，而其他URL解析器则得到不同的结果。这种不一致性可以被利用来进行攻击。

#### NodeJS的Unicode解析问题
NodeJS在处理Unicode字符时也可能存在问题。例如，使用特定的Unicode字符可以绕过目录遍历过滤，并且通过编码换行符可以实现CRLF注入。

### Glibc中的NSS特性
Glibc中的Name Service Switch (NSS) 特性也可能是潜在的攻击点之一。

通过这些示例和分析，我们可以看到在多种编程语言中利用URL解析器进行SSRF攻击的可能性。了解这些机制有助于更好地防范此类攻击。