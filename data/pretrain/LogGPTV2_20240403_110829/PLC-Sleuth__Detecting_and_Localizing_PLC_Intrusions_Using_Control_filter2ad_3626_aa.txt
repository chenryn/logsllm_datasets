title:PLC-Sleuth: Detecting and Localizing PLC Intrusions Using Control
Invariants
author:Zeyu Yang and
Liang He and
Peng Cheng and
Jiming Chen and
David K. Y. Yau and
Linkang Du
PLC-Sleuth: Detecting and Localizing PLC Intrusions Using Control Invariants
Zeyu Yang
Zhejiang University
Liang He
University of Colorado Denver
Peng Cheng
Zhejiang University
Jiming Chen
Zhejiang University
David K.Y. Yau
Singapore University of Technology and Design
Linkang Du
Zhejiang University
Abstract
Programmable Logic Controllers (PLCs) are the ground
of control systems, which are however, vulnerable to a va-
riety of cyber attacks, especially for networked control sys-
tems. To mitigate this issue, we design PLC-Sleuth, a novel
non-invasive intrusion detection/localization system for PLCs,
grounding on a set of control invariants — i.e., the correla-
tions between sensor readings and the concomitantly trig-
gered PLC commands — that exist pervasively in all con-
trol systems. Speciﬁcally, taking the system’s Supervisory
Control and Data Acquisition log as input, PLC-Sleuth ab-
stracts/identiﬁes the system’s control invariants as a control
graph using data-driven structure learning, and then monitors
the weights of graph edges to detect anomalies thereof, which
is in turn, a sign of intrusion. We have implemented and eval-
uated PLC-Sleuth using both a prototype of Secure Ethanol
Distillation System (SEDS) and a realistically simulated Ten-
nessee Eastman (TE) process.
1 Introduction
Background. Commodity Programmable Logic Controllers
(PLCs) are proved vulnerable to cyber attacks [1, 2]. Re-
searchers have identiﬁed >36.7K PLCs that can be accessed
by scanning the ports of common communication protocols,
such as Modbus and Siemens S7 [3, 4]. Symantec has also
conﬁrmed the feasibility of hijacking a number of mission-
critical PLCs [5], such as acquiring credentials of the target
PLC to administer destructive payloads. Keliris and Mani-
atakos have designed an autonomous process to compromise
PLCs [6], facilitating the executable program injection [7]
or ﬁrmware modiﬁcation [8]. After compromising the PLC,
adversaries can mount a variety of attacks, including but not
limited to:
• Command Injection Attacks. The malware TRITON was
launched remotely in Saudi Arabia in 2017 [9] to disturb
the operations of safety actuators in a petrochemical facility.
These actuators were originally designed to take remedial
actions in case of emergency, while TRITON instead sent
them adversarial commands to shut down the facilities.
• Cooperative Stealthy Attacks. To hide attacks from being
detected, adversaries can even mount advanced stealthy at-
tacks to PLCs, by not only tampering control commands,
but also cooperatively forging the Supervisory Control and
Data Acquisition (SCADA) logs with historical (and nor-
mal) data. An example of this stealthy attack is the worm
Stuxnet which damaged hundreds of centrifuges [10]. A
ﬁrmware vulnerability of Allen Bradley PLCs exposed in
2017 [11] allows modifying the PLCs’ control commands
and forging sensor readings.
Protecting PLCs Using Control Invariants. To mitigate the
above issues, we design a non-invasive data-driven intrusion
detection system (IDS) for PLCs, which we call PLC-Sleuth.
The foundation of PLC-Sleuth is a set of control invariants
that exist pervasively in all control systems: the control com-
mands issued by PLCs correlate strongly with the concomitant
sensor readings. PLC-Sleuth automatically identiﬁes these
control invariants using system’s SCADA logs, and abstracts
them as a control graph, in which the nodes represent system
variables, such as commands, sensor readings, and control
setpoints, and the weights of edges quantify the strength of
correlations between system variables. PLC-Sleuth then cap-
tures the normal behavior of the weights of graph edges using
data-driven approaches, and detects, at runtime, the anomalies
— edges with abnormal weights indicate the control channels
between corresponding system variables have been compro-
mised. PLC-Sleuth has the following salient properties.
• A Cyber-Physical IDS. PLC-Sleuth is built on a set of
physically-induced invariants of control systems, i.e., a
given actuation is always triggered by speciﬁc real-
time sensor measurements, which can be observed as
the correlations between the time series of issued con-
trol commands and the concomitant sensor readings.
This physically-induced correlation (i.e., control invariant)
makes PLC-Sleuth reliable as the correlation will not
change unless the control rules are updated, and perva-
sively deployable because such control invariants exist in
all control systems.
• A Non-Invasive IDS. Taking the SCADA logs of a con-
trol system as input, PLC-Sleuth automatically identi-
ﬁes the control invariants, and uses them to protect the
PLCs thereof, via data-driven approaches without prob-
ing/perturbing the system, i.e., PLC-Sleuth is non-invasive
and thus easy to deploy.
• An IDS Localizing Intrusions. PLC-Sleuth, besides detect-
ing intrusions at PLCs, also localizes the compromised con-
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    333
trol loops thereof, facilitating swift repair/forensics of the
PLCs; the control system otherwise remains unreliable no
matter how well the intrusions are detected.
We have implemented and evaluated PLC-Sleuth using
our Secure Ethanol Distillation System (SEDS) prototype
and a representative/realistic TE chemical process. We ﬁrst
evaluate PLC-Sleuth’s identiﬁcation of control invariants —
in the form of a control graph — using various volumes of
training data. We then evaluate PLC-Sleuth’s intrusion detec-
tion/localization using the constructed control graph against
command injection attacks and cooperative stealthy attacks,
with various deviations from the normal commands. The re-
sults show that for SEDS and TE respectively, PLC-Sleuth
identiﬁes system invariants with {100%, 98.11%} accuracy,
detects PLC attacks — even those change the normal com-
mands by only 0.12% — with {98.33%/0.85‰, 100%/0%}
true/false positives, and localizes compromised control loops
with {93.22%, 96.76%} accuracy.
2 Preliminaries and Basic Idea
Here we present the necessary background of control systems
and the basic idea of PLC-Sleuth, using our prototype of
an ethanol distillation control system, called SEDS (Secure
Ethanol Distillation System), as an example. Distillation is the
process of separating constituents in a liquid mixture based
on the differences in their volatility. SEDS is a scaled-down
but fully operational distillation plant, which puriﬁes alcohol
from water and is capable of producing alcohol with a purity
of 90%.
2.1 SEDS Prototype
A typical control system has four main components organized
as feedback control loops [12]:
• A physical process, e.g., an ethanol distillation process;
• A set of sensors that measure the physical states y of the
process, e.g., the temperature and liquid level of the relevant
distillation tower;
• A set of controllers that generate a set of control commands
u based on the control error x := s− y, i.e., the difference
between sensor reading y and the expected setpoint s;
• A set of actuators that operate as instructed by the con-
trollers’ commands u, e.g., the valves controlling the feed-
ing of materials.
Fig. 1(a) shows our prototype of SEDS, implemented us-
ing a control network consisting of sensors, actuators and
a SIMATIC S7-300 PLC, as shown in Fig. 1(b). The PLC
is equipped with a 315-2 PN/DP CPU, one 32bits DI mod-
ule, two 8 × 13 bits AI modules, one 32 bits DO module,
and one 8× 12 bits AO module. SEDS’s operation is moni-
tored/logged by a WinCC SCADA system, including 3 set-
points, 11 sensor readings, and 3 control commands. The
(a) testbed
(b) control network
(c) process ﬂow diagram
Figure 1: The Secure Ethanol Distillation System (SEDS)
prototype in our lab.
Figure 2: Sequence of CPU executions in PLC [13].
control rules of SEDS are programmed with ladder logic us-
ing the Siemens Step7 software. SEDS puriﬁes alcohol from
the water with two basic operations — i.e., tower boiling and
condenser cooling — realized using three feedback loops, as
shown in Fig. 1(c).
• Loop-1 regulates the tower temperature to a pre-deﬁned
level s1, at which SEDS achieves a high separation efﬁ-
ciency. The temperature controller (TC) generates a com-
mand u1 based on the difference between s1 and temper-
ature y1 collected using a temperature sensor (i.e., x1 =
s1 − y1), to control the opening/closing of valve V1 (and
hence the fuel ﬂow) to regulate the tower temperature to s1.
• Loop-2 maintains the ﬂow of the condenser’s cooling wa-
ter — monitored with a liquid level sensor y2 — around
a pre-deﬁned level s2 to condense ethanol from gas to liq-
uid, which is then reﬂuxed to the tower to improve the
distillation concentration further. Both excessive or deﬁ-
cient ethanol reﬂuxing impede the heat/mass transfer and
degrade the distillation quality. Also, an unstable ﬂow of
cooling water may damage the pump physically. The ﬂow
334    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
#2 #1 #3 PLCCommand signalsSensor signalss2y2u3s3TCLCFCV1Cooling waterTowerFuelProductMaterialV2CondenserBy-ProductHeaterTanky1s1u1y3u2Pump#2Pump#1Pump#3V3#1#2#3Cycle periodSystem service:SCADA reads PII and PIOPII table updateProgram exectionPIO table update(a) normal operation without attack
(b) with command injection attack
(c) with cooperative stealthy attack
Figure 3: Correlations between SEDS’s command u2 and ﬂow difference x2.
controller (FC) sends a command u2 to the valve V2 to
regulate the cooling water based on x2 = s2 − y2.
• Loop-3 controls the level of the tower’s liquid material (i.e.,
sensor reading y3) to an optimized setpoint s3, which is also
affected by the ethanol reﬂux in Loop-2. An unstable liquid
level induces premature ﬂood and thus degrades distilla-
tion efﬁciency [14]. Similar to the TC and FC, the level
controller (LC) of Loop-3 generates a command u3 based
on the difference x3 = s3 − y3 and sends it to valve V3 to
control the distillation tower’s liquid level, by regulating
the input ﬂow.
The speciﬁc rules of these control loops are implemented in
SEDS’s PLC, using the Bang-Bang and Proportional-Integral-
Derivative (PID) algorithms, which determine the control
signals u based on the current and historical control errors
x [15, 16]. In short, SEDS controls system states {y1, y2, y3}
based on setpoints {s1, s2, s3} using control commands {u1,
u2, u3}. These interactions among sensors, setpoints and con-
trol commands form the basis of all control systems. At the
same time, sensors {y4, . . . , y11} provide more information
for system monitoring.
2.2 Attack Model
We consider the following attack model targeting at the PLC
of a given control system:
a) The attacker can mount the command injection attack dur-
ing the program execution period (see Fig. 2) by down-
loading malicious code to PLC.
b) Atop the injection attack, the attacker can deliver cooper-
ative stealthy attacks by further replaying normal sensor
readings to the PLC’s process-image input (PII) table. Note
that SCADA reads sensor readings from PII table, which
happens after the execution of malicious code (see Fig. 2).
This way, the attacker can deceive the system monitor to
conclude a normal operation even if a successful attack
has been launched [10].
c) The attacker cannot modify the record of actual commands
issued during system operation, i.e., any forged commands
issued by the attacker will be logged as they are. This is be-
cause PIO table logs all commands and remains unchanged
after the execution of the program [17]. By reading from
the PIO table (see Fig. 2), SCADA obtains control com-
mands that are actually issued.
We next use a cooperative stealthy attack mounted at
SEDS to motivate PLC-Sleuth. The forged commands dis-
turb SEDS’s normal operation, while the faked system logs
deceive the system monitor to conclude a normal system op-
eration during/after the attack. Speciﬁcally, let us consider
the case that an attacker aims to degrade the distillation qual-
ity by hacking SEDS’s Loop-2 to trigger an unstable reﬂux.
The increment of command u2 under a normal operation is
proportional to x2, i.e., a x2 := (s2 − y2)L/min ﬂow difference
triggers the adjustment of the valve by
∆u2 = −0.01(∆x2 + 0.17× x2).
(1)
By exploiting the PLC’s vulnerabilities, e.g., modifying the
s7otbxdx.dll ﬁle of Step7 [10], the attacker downloads a pay-
load to the PLC and implement a malicious control rule of
∆ua
2, ya
2 = −0.1(∆x2 + 0.17× x2),
(2)
thus degrading the stability of the cooling process and causing
oscillations in ethanol reﬂux. Note that the tower level y3 will
also be affected by this hacked ∆ua
2 due to an unstable ethanol
reﬂux, degrading the distillation quality further. Also, to hide
the abnormal deviations of {y2, y3}, the attacker replaces the
sensor logs of {ya
3} with historical steady-state records, by
overwriting the PLC’s process-image table. This way, the sen-
sor logs (i.e., {y2, y3}) appear normal to the operator whereas
the SEDS is actually manipulated by the attacker.
2.3 Basic Idea of PLC-Sleuth
As stated above, the control command u is generated based
on the control error x = s− y, using the pre-deﬁned control
rules written in the PLC. This incurs strong/reliable correla-
tions between u and x, which we use as the system’s control
invariants. Fig. 3 visualizes such a control invariant between
∆u2 and x2: when SEDS is attacked as described above, the
control invariant in Fig. 3(a) changes noticeably due to the
malicious control rule in Eq. (2), for both the command in-
jection attack (Fig. 3(b)) and the cooperative stealthy attack
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    335
-3-11flow x2 (L/min)-226u2 (%)-3-11flow x2 (L/min)-226u2 (%)-3-11flow x2 (L/min)-226u2 (%)(a) log of setpoint s2
(b) log of sensor y2
(c) log of command u2
Figure 4: Different patterns of setpoint, sensor, command variables in SEDS’s Loop-2.
(Fig. 3(c)). PLC-Sleuth uses these control invariants to de-
tect PLC intrusions, by detecting deviations of these control
invariants from their normal behaviors. The challenge is, in
turn, to identify/abstract the system’s control invariants, which
PLC-Sleuth addresses using a control graph.
3 Abstracting Control Invariants
For a given control system, PLC-Sleuth identiﬁes and ab-
stracts its control invariants — deﬁned by the system vari-
ables and the interactions thereof — using a control graph.
Speciﬁcally, the control graph is deﬁned as a weighted and di-
rected acyclic graph G(V, E, W), where: (i) V is the set of nodes
representing system variables (i.e., setpoints, sensor readings,
and commands), (ii) E is the set of directed edges connecting
nodes in V, representing the correlations among system vari-
ables, and (iii) W is the set of edge weights, representing the
strength of the correlations described by E. Speciﬁcally,
• V = {S,Y,U} consists of a setpoint node set S, a sensor
node set Y, and a command node set U, which can be ob-
tained/identiﬁed automatically from the SCADA logs. Note
that in control systems, the number of nodes in U is no less
than that in S, i.e., |U| ≥ |S|.
• E = {Ey
y} consists of a control error edge set Ey
s con-
necting nodes in S to nodes in Y, and a control command
edge set Eu
y connecting nodes in Y to nodes in U. An edge
exists in E when its two nodes belong to the same control
loop. The commonly used decentralized control scheme —
one sensor is fed back for the generation of one targeted
control command, and vise versa [18] — makes both the
out-degree of nodes in Y and the in-degree of nodes in U
equal to 1.
• W = {Wy
s for con-
trol error edges in Ey
y for
control command edges in Eu
y. PLC-Sleuth exploits Wu
y
to detect and localize PLC intrusions, by monitoring Wu
y
in real time and detecting the anomalies thereof. Note that
the error weight set Wy
s could also be used to detect PLC
attacks/anomalies, i.e., the sensor readings Y should be
close to the corresponding setpoint S in a stable control
y} consists of an error weight set Wy
s and a command weight set Wu
s ,Wu