# PLC-Sleuth: Detecting and Localizing PLC Intrusions Using Control Invariants

**Authors:**
- Zeyu Yang, Zhejiang University
- Liang He, University of Colorado Denver
- Peng Cheng, Zhejiang University
- Jiming Chen, Zhejiang University
- David K.Y. Yau, Singapore University of Technology and Design
- Linkang Du, Zhejiang University

## Abstract
Programmable Logic Controllers (PLCs) form the backbone of control systems but are susceptible to a variety of cyber attacks, particularly in networked environments. To address this, we introduce PLC-Sleuth, a non-invasive intrusion detection and localization system for PLCs, based on control invariantsâ€”correlations between sensor readings and corresponding PLC commands that are ubiquitous in all control systems. Specifically, PLC-Sleuth processes Supervisory Control and Data Acquisition (SCADA) logs to identify these invariants as a control graph using data-driven structure learning. It then monitors the weights of the graph edges to detect anomalies, which indicate potential intrusions. We have implemented and evaluated PLC-Sleuth using both a Secure Ethanol Distillation System (SEDS) prototype and a realistically simulated Tennessee Eastman (TE) process.

## 1. Introduction

### Background
Commodity Programmable Logic Controllers (PLCs) are known to be vulnerable to cyber attacks [1, 2]. Over 36,700 PLCs can be accessed by scanning common communication ports such as Modbus and Siemens S7 [3, 4]. Symantec has confirmed the feasibility of hijacking mission-critical PLCs, including acquiring credentials to administer destructive payloads [5]. Keliris and Maniatakos designed an autonomous process to compromise PLCs, facilitating the injection of executable programs or firmware modifications [6, 7, 8]. After compromising a PLC, adversaries can launch various attacks, including:

- **Command Injection Attacks:** The TRITON malware, launched remotely in Saudi Arabia in 2017, disrupted the operations of safety actuators in a petrochemical facility [9].
- **Cooperative Stealthy Attacks:** Adversaries can mount advanced stealthy attacks by tampering with control commands and forging SCADA logs with historical normal data. An example is the Stuxnet worm, which damaged hundreds of centrifuges [10]. A firmware vulnerability in Allen Bradley PLCs, exposed in 2017, allowed modification of control commands and sensor readings [11].

### Protecting PLCs Using Control Invariants
To mitigate these issues, we designed PLC-Sleuth, a non-invasive, data-driven intrusion detection system (IDS) for PLCs. PLC-Sleuth leverages control invariants, which are strong correlations between PLC commands and sensor readings. These invariants are identified from SCADA logs and abstracted into a control graph, where nodes represent system variables (commands, sensor readings, and setpoints), and edge weights quantify the strength of their correlations. PLC-Sleuth captures the normal behavior of these weights and detects anomalies at runtime, indicating potential intrusions. Key features of PLC-Sleuth include:

- **Cyber-Physical IDS:** Built on physically-induced invariants, ensuring reliability and pervasiveness.
- **Non-Invasive IDS:** Uses SCADA logs to identify invariants without probing or perturbing the system.
- **Intrusion Localization:** Not only detects intrusions but also localizes compromised control loops, facilitating swift repair and forensics.

We evaluated PLC-Sleuth using our SEDS prototype and a realistic TE chemical process. Results show high accuracy in identifying invariants, detecting attacks, and localizing compromised control loops.

## 2. Preliminaries and Basic Idea

### 2.1. SEDS Prototype
A typical control system, like our SEDS (Secure Ethanol Distillation System), consists of:
- A physical process (e.g., ethanol distillation).
- Sensors measuring process states (e.g., temperature and liquid level).
- Controllers generating control commands based on control errors.
- Actuators executing the commands (e.g., valves).

SEDS is a scaled-down, fully operational distillation plant capable of producing 90% pure alcohol. It uses a SIMATIC S7-300 PLC with various modules and is monitored by a WinCC SCADA system. The control rules are programmed using ladder logic in Siemens Step7 software.

### 2.2. Attack Model
We consider the following attack scenarios targeting the PLC:
- **Command Injection Attack:** Malicious code is downloaded to the PLC during program execution.
- **Cooperative Stealthy Attack:** Normal sensor readings are replayed to the PLC's process-image input (PII) table, deceiving the system monitor.
- **Logging Integrity:** Actual commands issued during operation are logged, preventing the attacker from modifying the record.

### 2.3. Basic Idea of PLC-Sleuth
PLC-Sleuth exploits the strong correlation between control commands and control errors (setpoint minus sensor reading). This correlation, represented as a control invariant, is used to detect deviations from normal behavior. The challenge is to identify and abstract these invariants, which PLC-Sleuth addresses by constructing a control graph.

## 3. Abstracting Control Invariants

PLC-Sleuth identifies and abstracts control invariants using a control graph defined as a weighted, directed acyclic graph \( G(V, E, W) \):
- **Nodes (V):** Represent system variables (setpoints, sensor readings, and commands).
- **Edges (E):** Connect nodes, representing correlations among variables.
- **Weights (W):** Quantify the strength of these correlations.

The graph is constructed from SCADA logs, and PLC-Sleuth monitors the weights to detect and localize intrusions.