the criteria Amazon uses to auto-enable a skill, we used a semi-
automated approach to invoke skills with duplicate invocation
names. To isolate the impact of the different attributes of a
5
1255075100125150175No.ofskillsperinvocation100101102103104No.ofdistinctinvocationsUSUKAUCADEJPFRTABLE IV: Fisher’s exact test to determine attributes that are statistically correlated to skill activation.
Attribute 1
Attribute 2
# of skill pairs
Odds ratio
Favored attribute
Different number of ratings
Different avg. rating
Age of skill ‡
Content advisory (cid:5)
Same number of ratings
Same number of ratings
Same number of ratings
†
*=p < 0.05, **=p < 0.01, ***=p < 0.001, ****=p < 0.0001; ‡ approximated; (cid:5) Content may include ads, nudity, religious intolerance or sexual themes.
Different avg. rating
Age of skill
Content advisory
16
5.44
0.85
1.38
3.61
1.62
1.17
50
50
50
50
29
50
50
more ratings
higher avg. rating
higher avg. rating
p-value †
< 0.0001 ****
0.00012 ***
0.84162
0.54874
0.03476 *
0.31734
0.84161
skill, we only consider skill ‘pairs’, i.e., cases where only two
skills (developed by two different developers) exist with the
same invocation name, but has different other attributes. We
analyzed the following attributes: ‘number of ratings’, ‘average
rating’, ‘age of skill’ 4 and ‘content advisory’.5 We tested
with ‘number of ratings’ and ‘average rating’ as developers
have claimed skill ratings are used to auto-enable skills [23].
To determine if the publication date of a skill impacts the
decision process we consider the ‘age of skill’ attribute and
we also explore if the presence of ‘content advisory’ inﬂuences
the decision of selecting one skill over another, assuming that
Amazon may prefer a skill with more appropriate contents
by default. Furthermore, we wanted to include ‘number of
permissions’ attribute; however, we did not ﬁnd sufﬁcient
samples (only 8 skill pairs) that differed in this attribute, thus
a statistical analysis was not feasible.
We used Amazon’s Text-to-Speech (TTS) service, ‘Polly’,
to generate the samples and an Echo speaker (ﬁrst generation)
as receiver. We transmitted the invocation samples through a
mono speaker in close distance and retrieved the list of skills
activated from the Alexa app’s activity panel. We repeated the
experiment three times, each time with a newly created user
proﬁle with no interaction history. In our analysis a successful
activation means the same skill was activated successfully
across three different accounts. Next, for each attribute (or
pair of attributes) that we test for statistical correlation, we
randomly test skill pairs until we obtain 50 successful activa-
tions. Given that some skills were not functional at the time
we ran our test, on average we ended up testing more than 50
skill pairs per attribute (or pair of attributes). Only in the case
of testing skills with the same number of ratings, but different
average rating were we able to test 29 skill pairs as there were
no other skill pairs that fulﬁlled this requirement. Our analysis
covered a total of 464 unique skills (232 unique invocation
phrases) with successful activations across three user accounts.
We next conduct Fisher’s exact test [28] for skills with
different attributes to evaluate the impact of the respective
attribute. Table IV highlights our ﬁndings. We found that skills
with a higher number of ratings had an odds ratio of 16 with
a p − value < 0.0001, i.e., skills with a higher number of
ratings were 16 times more likely to be activated compared
to the other skill with the same innovation name. We also
found a higher average rating to be signiﬁcant (odds ratio =
5.44 with p − value < 0.001). However, both the number of
4We approximate the age of a skill using the metadata (last edit date) of
the icon used by the skill. While this might not reﬂect the actual publish date,
it can serve as an approximation as icons are not frequently changed.
5Content may include ads, nudity, religious intolerance or sexual themes.
ratings and average rating are strongly correlated (r = 0.65,
p − value < 0.0001), indicating skills with higher number of
ratings tend to have higher average ratings. For the other two
attributes: skill age and content advisory, we did not see any
statistical signiﬁcance. We then analyzed what other attributes
excluding the most inﬂuential attribute (i.e., the number of
ratings) might impact the prioritization process. We, therefore,
only considered skill pairs with the same number of ratings,
but different values for the other attributes. For cases where the
number of ratings is the same, the skill with a higher average
rating was more likely to be activated (odds ratio=3.61 and
p − value < 0.05). Thus we see that the number of ratings
and average rating are positively correlated with auto-enabling
a skill. Note that we did not test all possible combinations
of attributes as this would not scale in terms of obtaining
sufﬁcient samples to perform meaningful statistical tests.
To investigate if the auto-enable feature can cause users
to enable the wrong and at times risky skills, we created and
published two fact skills with the same exact invocation name
(B08FQY2KL8, B08G42WG9C). We made sure to register a
unique invocation name not yet used by any skill in the US
skill store. We ﬁrst published one skill and tested whether
the skill was activated across three accounts. Upon successful
activation, we published the second skill (around 10 days later).
In this skill (B08G42WG9C), users were ﬁrst asked in which
country they currently reside, so that the skill could provide
more meaningful facts; thus emulating a skill accessing more
sensitive data. We then reran the activation test with three new
user accounts, where Alexa had two options to choose from. It
turned out that the new skill (i.e., the one accessing more data)
was automatically activated across the three accounts. This
showcases how the auto-enable feature may lead to activating
the wrong skill. Next, we attempted to see if providing reviews
and ratings to the ﬁrst skill (i.e.,
the one not accessing
additional data) would inﬂuence the skill selection process.
We recruited 12 volunteers to submit ratings (2-4 out of 5) and
reviews for the skill which was not automatically enabled. The
median difference in the number of ratings between skills (i.e.,
ones we tested) with the same invocation name was around 3,
whereas the median number of ratings for a skill was 4. We
then again reran the test after reviews and ratings were publicly
available on Amazon.6 However, we did not see Alexa switch
between skills.
While our analysis on the public data shows correlation,
it does not necessarily imply causation. For example, it is
possible that the skill which is auto-enabled receives more
6It took several days for all the ratings to be posted. We waited for two
weeks before retesting.
6
(a) Native skill by Amazon
(b) Our skill with ‘Ring’ as the developer
(c) Amazon links to products by ‘Ring’
Fig. 4: Screenshots for (a) a native skill by Amazon, (b) our own skill published as “Ring”, and (c) developer name links to
products manufactured by the same vendor. Attackers can register skills under different company names to facilitate phishing
attacks through account linking.
reviews/ratings as the auto-enabled skill automatically appears
on users’ companion app and thereby makes it easy for users to
provide ratings. This tells us that there are more deterministic
factors other than ratings/reviews which Amazon internally
uses and without knowing such factors it is infeasible for an
attacker to manipulate the system.
Finding 1: Due to the lack of transparency on how Amazon
auto-enable skills with duplicate invocation names, users
can easily activate the wrong skill. While there is a positive
correlation between a skill being activated and the number
of ratings it receives, it does not imply causation as the auto-
enabled skill appears on users’ companion app and thereby
making it easier for users to provide ratings.
B. Registering using Well-known Developer Names
When a skill is published in the skill store, it also displays
the developer’s name. We found that developers can regis-
ter themselves with any company name when creating their
developer’s account with Amazon.7 This makes it easy for
an attacker to impersonate any well-known manufacturer or
service provider. As Amazon displays the developer’s name
on a skill page, users can be easily deceived to think that
the skill has been developed by an authentic source when
it has really been published by an attacker. This can help
an adversary launch phishing attacks especially for skills that
require account linking.
To test to what extent Amazon validates developer informa-
tion, we registered multiple skills using different well-known
company names. For this purpose we registered fresh new
Amazon developer accounts using well-known company names
and submitted a skill for certiﬁcation. We found that in most
cases our skills were published without triggering any ﬂags.
For example, we were able to successfully register skills using
“Microsoft”, “Samsung”, “Ring” and “Withings” as developer
names. Figure 4 shows screenshots for one of our published
skills. Interestingly, when viewing product reviews, Amazon
updates the developer name (which is normally shown as a
non-interactive text on the skill’s information page) with a
hyperlink for all products sold by the companies (shown on
7Providing developer name or company name is a one time process, and
one cannot change the company name after it has been saved.
Figure 4c). This can further mislead users into believing that
the skill was developed by an authentic company. However, our
attempt in registering a skill with the developer name “Philips”
was ﬂagged as a potential infringement of the use of third-
party trademark/brand. This tells us that there is no consistent
approach to detect the registration of skills under different
company names. Primarily, this is the outcome of manual
vetting of skills by different employees, where one employee
was able to detect our fraudulent registration attempt.
Finding 2: An attacker can getaways with publishing skills
using well-known company names. This primarily happens
because Amazon currently does not employ any automated
approach to detect infringements for the use of third-party
trademarks, and depends on manual vetting to catch such
malevolent attempts which are prone to human error. As
a result users might become exposed to phishing attacks
launched by an attacker.
C. Code Change after Approval
Amazon sets requirements for hosting code in a back-
end server that governs the logic of a skill. However, these
requirements involve ensuring the backend server responds
to only requests signed by Amazon. During the veriﬁcation
process, Amazon sends requests from multiple vantage points
to check whether the server is responding to unsigned requests.
However, no restriction is imposed on changing the backend
code, which can change anytime after the certiﬁcation process.
Currently, there is no check on whether the actual responses
(logic) from the server has changed over time. Alexa, blindly
converts the response into speech for the end-user. This can
enable an attacker to stealthily change the response within
the server without being detected. While this may sound
benign at ﬁrst, it can potentially be exploited by an adversary
who intentionally changes the responses to trigger dormant,
registered intents to collect sensitive data (e.g., phone number).
Figure 5 highlights the overall ﬂow diagram of how an attacker
can exploit this gap to trick a user into giving up sensitive
information. First, the attacker follows all the general steps
(steps 1-3) for registering a skill, but inserts an intent(s) that
will typically remain dormant under the benign case (i.e., the
backend logic will not direct the user to trigger such intents).
7
TABLE V: Permission to data type mapping
Permission
Device Address
Amazon Pay
Data Types
postal address, city, country, zip code, state
person name, postal address, city, country,
phone number, zip code, state
country, zip code, state
geographic location, speed, altitude, heading
email address
person name
person name
phone number
Postal Code
Location service
Email Address
First Name
Full Name
Mobile Number
D. Bypassing the Permission Model
information,
Alexa skills can be conﬁgured to request permissions
to access personal information, such as the user’s address
or contact
from the Alexa account. Similar
to permissions on smartphones, users enabling these skills
must grant permission upon activation. These permissions
can make interaction with a skill much more convenient,
e.g., a weather skill with access to device address
can report relevant weather forecasts based on the user’s
location. Permissions allow access to the following data
types: device address, customer name, customer
email address, customer phone number, lists
read/write, Amazon Pay, reminders, location
services and skills personalization. However,
we found instances where skills bypass these permission APIs
and directly request such information from end users. One
could argue that this is not an issue as users explicitly provide
their information, however, there may be a disconnect between
how developers and users perceive the permission model. A
user may not understand the difference between providing
sensitive data through the permission APIs versus entering
them verbally. Also, users may struggle to understand who
is collecting the data as there is no distinction between the
voice template used by native skills versus third-party skills
(falsely assuming Amazon is protecting their data).
Skill developers can avoid requesting permissions to access
personal data by simply requesting the personal data through
verbal interactions. For example, we found several skills that
included the name of speciﬁc locations as a part of the
invocation phrase: in the German skill store, a forecasting
service provides individual skills for 406 cities by appending
the city names to the invocation phrase. In the US store, a
local news provider named “Patch” has created 775 skills that
include a city name. Such skills can potentially be used to
track one’s whereabouts.
A more concerning practice is when skill developers ask
users for their personal data instead of requesting them through
the permission API. Amazon relies on the developer’s declara-
tion of using the permission API instead of verifying a intent’s
data type itself. This way developers can bypass Amazon’s
requirement for providing a privacy policy when personal data
is used (we study the efﬁcacy of such privacy policies in Sec-
tion VII-B). We tested this by building a skill that asks users
for their phone numbers (one of the permission-protected data
types) without
invoking the customer phone number
permission API. Even though we used the built-in data type
of Amazon.Phone for the intent, the skill was not ﬂagged
for requesting any sensitive attribute. Unlike current
loca-
8
Fig. 5: Workﬂow diagram for making backend code change
to trigger a dormant intent which will contain sensitive infor-
mation like phone number.
Once the skill is published, the attacker then changes the
backend logic to cause the user to invoke the dormant intent,
which may correspond to some form of sensitive information
such as phone number (steps 4-6).
We developed our own skill to test this approach where
we built a trip planner skill asking a user to create a trip
itinerary (B07N72MF9T). After the skill was published and
tested, we changed the backend code, hosted as a Lambda
service, to inquire the user for his/her phone number so that
the skill could directly text (SMS) the trip itinerary. Note that
during the initial certiﬁcation process we did not ask users
for their phone numbers, and hence when vetted by Amazon
we reduced our chance of being ﬂagged to request the phone