# Detecting (Absent) App-to-App Authentication on Cross-Device Short-Distance Channels

**Authors:**
- Stefano Cristalli, University of Milan, Milan, Italy
- Long Lu, Northeastern University, Boston, Massachusetts
- Danilo Bruschi, University of Milan, Milan, Italy
- Andrea Lanzi, University of Milan, Milan, Italy

## Abstract
Short-distance or near-field communication is increasingly used by mobile apps for cross-device interaction and data exchange. In this paper, we identify a security issue, termed **Cross-Device App-to-App Communication Hijacking (CATCH)**, which affects Android apps using short-distance channels such as Bluetooth and Wi-Fi Direct. This issue can lead to unauthenticated or malicious app-to-app interactions, even when the underlying communication channels are authenticated and secured. We design an algorithm based on data-flow analysis to detect the presence of CATCH in Android apps. Our algorithm checks if a given app contains an app-to-app authentication scheme, which is necessary to prevent CATCH. Experiments on a set of Android apps reveal that the CATCH problem is prevalent. We also discuss the real-world impact of this issue through two case studies and outline the limitations of our model along with potential future improvements.

## CCS Concepts
- Security and privacy → Authentication; Mobile and wireless security; Software and application security

## Keywords
- Android, data-flow analysis, authentication protocols, mobile security

## ACM Reference Format
Stefano Cristalli, Long Lu, Danilo Bruschi, and Andrea Lanzi. 2019. Detecting (Absent) App-to-App Authentication on Cross-Device Short-Distance Channels. In 2019 Annual Computer Security Applications Conference (ACSAC '19), December 9–13, 2019, San Juan, PR, USA. ACM, New York, NY, USA, 11 pages. https://doi.org/10.1145/3359789.3359814

## 1. Introduction
Cross-device communications enable nearby devices to directly communicate, bypassing cellular base stations or access points. This paradigm offers benefits such as improved spectral efficiency, energy savings, and reduced latency. It allows users to share information instantly, even in areas without cellular coverage or access points. Additionally, it supports mobile social networks and the establishment of mobile ad-hoc clouds, where nearby devices provide cloud services like data and computation offloading. This technology is also crucial in IoT environments, where devices communicate over short-distance channels.

Several solutions exist for securing cross-device communication in the Android environment, including device and channel-level authentication. However, these solutions do not protect the entire communication flow. Specifically, a malicious app installed on one device can interfere with the communication and inject data, even if the devices and channels are authenticated. This problem arises because app-to-app authentication is missing, which is essential in addition to device and channel-level authentication.

In this paper, we study the problem of mutual authentication between two apps running on different devices and communicating over a short-distance channel. Although such channels provide device pairing and authentication methods, these methods only operate at the device or channel level and are unaware of the apps running on the devices. We first define an authentication scheme for short-distance channels and then design a tool that can analyze Android apps to detect potential CATCH vulnerabilities. Our tool uses data-flow analysis techniques to recognize specific conditions related to the authentication scheme. We validate our system on a dataset of 662 Android apps that use Bluetooth technology, collected from the Androzoo repository.

### Contributions
- We identify the CATCH problem, which commonly exists in Android apps using short-distance channels.
- We design and develop an authentication scheme detector that analyzes Android apps to discover potential vulnerabilities.
- We validate our system's results with manual analysis and demonstrate its effectiveness in detecting the authentication scheme, achieving 0% false positives and false negatives. We also present two case studies on real Android apps.

## 2. Background
### 2.1. Authentication for Cross-Device App-to-App Communication
We study the problem of mutual authentication between two apps running on different devices and communicating over a short-distance channel. While such channels provide device pairing and authentication methods, these methods only operate at the channel level and are oblivious to the apps running on the devices. As a result, a malicious app on one device can interfere with the communication between two legitimate apps.

Currently, most cross-device, peer-to-peer communications channels are authenticated using an out-of-band scheme. A user initiates communication, and the other user is prompted to confirm the connection either with a secret PIN or a simple "accept" button. Once authentication is complete, communication can begin. However, this channel-level authentication is not sufficient to guarantee app-level authentication.

#### Figure 1: Authentication of App-to-App Communication is Not Guaranteed by Channel Authentication

To illustrate the danger, consider a chat app using Wi-Fi Direct. If there is no code performing app-level authentication, a malicious app on one device can send custom messages to the other device, which are displayed as if they were sent from the original app. This can lead to phishing, malware delivery, and exploitation.

#### Figure 2: Malicious App Sending Content to Chat App

## 3. Approach Overview
### 3.1. Authentication Definition
We define an authentication scheme for cross-device communication in the Android environment. The scheme involves two devices, D1 and D2, with apps A1 and A2 respectively. The devices establish an authenticated channel, and A1 and A2 initiate communication. The authentication process includes:

1. A2 obtains a secret that will be used to authenticate communication. This secret is generated on one device and communicated to the other app using an out-of-band channel.
2. A1 and A2 share the same secret and start sending data, using the secret as an authenticator. The data can be encrypted with a key derived from the secret or the secret can be sent as plaintext for authentication.
3. A2 performs authentication checks on the received data.

### 3.2. Challenges
- **C1:** Define a generic scheme that captures the essential logic of app-to-app authentication.
- **C2:** Differentiate between if-statements that operate on non-critical data and those that are part of the authentication scheme.
- **C3:** Handle various implementations of the authentication scheme according to developer experience.

Our approach aims to build an analysis tool that can tackle these challenges and provide accurate detection of app-to-app authentication.