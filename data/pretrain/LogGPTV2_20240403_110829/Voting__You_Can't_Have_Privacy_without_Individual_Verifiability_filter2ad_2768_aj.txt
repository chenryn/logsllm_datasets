1
vote
vote
B
22
1
A
(pk)
Expverif−careful
(λ)
(pk, sk) ← Setup(1λ)
U, CU ← []
state ← AOreg,Ocorr
Voted, Lid (for all id in U) ← []
BB, state2 ← AOv,c
(state, pk)
state3 ← AOhappyBB
(state2)
if ∀id . (id, ∗) ∈ Voted ⇒ id ∈ H then
r ← Tally(BB, sk, U)
if r (cid:44) ⊥ ∧ ∀Vc (finite) . r (cid:44) ρ({vi }1≤i≤k ⊎ Vc) then
return 1
vote
2
3
vote(id, v)
Ov,c
if (id, ∗) ∈ U\CU then
b ← Vote(id, credid, pk, v)
Voted ← Voted′∥(id, v)
Lid ← Lid ∥(b, v)
return b
where (id, credid) ∈ U
and Voted′ is obtained from
Voted by removing all instances of (id, ∗)
where Voted = {(id1, v1), . . . , (idk, vk)}
Figure 13: Individual verifiability against a dishonest board with careful voters.
Note that by construction, all ballots in BBb have credentials in U2. Consequently, unless BBa contains a ballot with a credential in U2, by
assumption 1, we have (regardless of β)
which means, by assumption 3, that
r = Tally(BB, sk, U) = Tally(BBa ⊎ BBb , sk, U) = Tally(BBa, sk, U) ∗ Tally(BBb , sk, U)
The remainder of the proof is the same as before, and establishes that
Thus if A breaks verifiability, i.e. if P(cid:104)
Exppriv,1
ExpverifA (λ) = 1(cid:105) is not negligible, then B breaks privacy, or D breaks ExpNM, which proves the claim.
Exppriv,0
B
B
.
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) + 4p(λ) P(cid:104)
ExpNMD = 1(cid:105)
P(cid:104)
ExpverifA (λ) = 1(cid:105) ≤(cid:12)(cid:12)(cid:12)P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
r = Tally(BBa, sk, U1) ∗ Tally(BBb , sk, U).
Note that, in these reductions, for each id in U1, B makes at most as many calls to Op
, and at most as many calls
to Ocast as A makes to Ocast. In addition, for each id in U2, B makes at most one call to Op
, and no call to Ocast. Thus, the exact same
proof proves that the result also holds if both the games Exppriv and Expverif are modified to prevent revote, by allowing only one call to
Op
□
vote
B.3 Privacy implies individual verifiability with a dishonest board and careful voters (proof of
as A makes to Ov
vote
and/or to Ocast/Ocast for each id.
/Ov
vote
vote
vote
Theorem 5.2)
We consider the case of protocols where the revote policy is to count only the last ballot (for each id or credential) or the first ballot. In the
case of the last ballot, the definitions of the privacy game with a dishonest board and careful voters can be found on Figure 9. We adapt the
verifiability game to the case of a dishonest board and careful voters as follows.
Definition B.2 (Individual verifiability against a dishonest board with careful voters). For an adversary A = A1, A2 and a parameter λ, we
(λ) defined on Figure 13. The voting system is verifiable against a dishonest board with careful voters if
consider the game Expverif−careful
A
∀A. P(cid:104)
Expverif−careful
A
(λ) = 1(cid:105) is negligible.
In the case of the first ballot, we adapt these definitions by replacing the oracles Ov,c
vote
, described on
, but keep only the first votes from each voter in the lists V0, V1, Voted, instead
with Ov,c,f
vote
and Op,c,f
vote
and Op,c
vote
Figure 14. These two oracles are analogous to Ov,c
vote
of the last.
and Op,c
vote
The following theorem corresponds to Theorem 5.2.
Theorem B.3. Under assumptions 1, 2, 3, 4, 5, 6, 7, 8:
• for id-based schemes, assuming that no polynomial adversary wins ExpValidTally with non-negligible probability,
• and for credential-based schemes, assuming that no polynomial adversary wins ExpNM with non-negligible probability,
23
vote (id, v)
Ov,c,f
if (id, ∗) ∈ U\CU ∧ (id, ∗) (cid:60) Voted then
b ← Vote(id, credid, pk, v)
Voted ← Voted∥(id, v)
Lid ← Lid ∥(b, v)
return b
where (id, credid) ∈ U
vote (id, v0, v1)
Op,c,f
if (id, ∗) ∈ U\CU ∧ (id, ∗) (cid:60) V0, V1 then
b ← Vote(id, credid, pk, vβ)
V0 ← V0∥(id, v0)
V1 ← V1∥(id, v1)
Lid ← Lid ∥(b, vβ)
return b
where (id, credid) ∈ U
Figure 14: Oracles for the verifiability and privacy games with dishonest boards and careful voters
(revote policy = first vote)
if
then
(cid:12)(cid:12)(cid:12)P(cid:104)
∀A.
(λ) = 1(cid:105) − P(cid:104)
Expverif−careful
A
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) is negligible,
Exppriv−careful,0
A
∀A. P(cid:104)
Exppriv−careful,1
A
(λ) = 1(cid:105)
is negligible.
1
vote
(pk) first simulates AOreg, Ocorr
vote(id, v), provided id ∈ U1, B calls Op,c
(state1, pk) maintains a list L, initially empty, which will be used to record the calls to Op,c
vote
Proof. We first consider the case of id-based protocols.
Let A = A1, A2, A3 be an adversary that breaks individual verifiability against a dishonest board with careful voters, i.e. wins
Expverif−careful. We consider an adversary B = B1, B2, B3, B4 that attacks privacy against a dishonest board with careful voters, i.e. plays
Exppriv−careful, β :
• BOreg, Ocorr
(pk), i.e. B registers and corrupts the same identities as A, while keeping a list U1 of the
1
identities it registers by calling Oreg. A returns some state. B1 then calls Oreg another |U1| times, on fresh identities that do not
appear in U1. It keeps a list U2 of these fresh identities.
• BOp,c
(state, pk).
2
For each call to Ov,c
vote(id, v, vneutral) and (potentially) obtains a ballot b. Depending on the
revote policy, B2
– either checks if id is already present in L, to add (id, v, b) to L only if it is not, if the revote policy is "first" (note that in this case,
Op,c
– or adds (id, v, b) to L and removes any previous entry (id, v′, b′) (for any v′, b′) from L, if the revote policy is "last" (note that in
vote
this case, Op,c
The simulated A2 returns a board BBa and a state state′
a be the list of ballots in BBa that A2 was allowed to cast, i.e.
vote
BB′
a = [b ∈ BBa|openid(b) ∈ U1].
Let then Voted be the list of the votes in L: Voted = [v for (id, v, b) ∈ L].
If at any point during the simulation A2 blocks or fails, B stops the simulation, and lets BBa be the list of ballots in L, i.e.[b for (id, v, b) ∈
L].
vote(idl , vneutral, vl), where v1, . . . , vl are the elements of Voted, and id1, . . . , idl are
In any case, B2 calls Op,c
pairwise distinct identities from U2. Note that since all identities in L are distinct and in U1, l is indeed smaller than |U1| = |U2|. B2
thus obtains l ballots b1, . . . , bl , for vneutral if β = 0 and v1, . . . , vl if β = 1. Let BBb be the list of these ballots. Let then BB = BB′
a ⊎BBb.
vote(id1, vneutral, v1), ..., Op,c
. B2 first simulates AOv,c
indeed returns a ballot);
indeed returns a ballot).
2. Let BB′
vote
2
B2 then returns a state2 indicating whether A2 has failed, and the board BB. Intuitively, A is accurately simulated only if β = 0, i.e. is
actually provided with ballots for the votes it wanted to cast. Hence whenever A wins Expverif−careful, the simulated A2 failing can
only mean that β = 1.
• BOhappyBB
3
occurring in BB′
a.
2), unless A2 has failed, in which case it simply calls Ohappy(openid(b)) for each b
(state2) first simulates AOhappyBB
(state′
3
24
(idi) for each i ∈ (cid:74)1, l(cid:75). Since BB′
(idi) adds idi to H.
B3 then calls OhappyBB
a only contains ballots b such that openid(b) ∈ U1 (by definition), only
BBb contains ballots for the idi ∈ U2. BBb, by construction, contain exactly one ballot for each idi, which is the ballot bi pro-
vote(idi ,∗,∗). Since the revote policy is to count the first (or last) ballot for each id, by assumption 7,
duced by the (only) call to Op
VerifVoter(idi , credidi , Lidi , BB) holds, and thus the call to OhappyBB
After that step, H thus necessarily contains at least id1, . . . , idl .
• Exppriv−careful will then check that all ids occurring in V0 or V1 are also in H, where V0 and V1 are the lists it keeps, which contain
the first (or last, depending on the revote policy) votes Op,c
has
vote
and Exppriv−careful, β
successfully been called on. If Ha and Hb denote the value of the list H at this point respectively in Expverif−careful
,
we have Hb = Ha ⊎ [id1, . . . , idl]. Indeed:
– we have established that Hb contains id1, . . . , idl ,
(id) has been called by B and VerifVoter(id, cred, Lid, BB) succeeds, i.e.
– and for all (id, cred) ∈ U1, id ∈ Hb if and only if OhappyBB
(id) was called by the simulated A and VerifVoter(id, cred, Lid, BB) succeeds. Since BB = BB′
a ⊎ BBb, and
if and only if OhappyBBa
given the definition of BBb, by assumption 8, VerifVoter(id, cred, Lid, BB) is equivalent to VerifVoter(id, cred, Lid, BB′
a), which is
itself equivalent to VerifVoter(id, cred, Lid, BBa). Thus id ∈ Hb if and only if id ∈ Ha.
Therefore, the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H succeeds in Expverif−careful
if and only if it succeeds in Exppriv−careful, β
.
• Exppriv−careful will then check that ρ(V0) = ρ(V1). Considering the definition of B2, if this point is reached, we always have
has been called on for each id, and H is the list of identities OhappyBB
A
A
B
B
ρ(V0) = ρ(V1) = ρ(v1, . . . , vl , vneutral, . . . , vneutral
)
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
l times
C
25
Hence this check necessarily succeeds, and Exppriv−careful computes Tally(BB, sk, U).
• B4 obtains a result r (or ⊥, if the previous tests by Exppriv failed or the tally returned ⊥). If
– A2 blocked previously;
– or r = ⊥, which means, as we have established that ρ(V0) = ρ(V1) always holds, that the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H fails,
or the tally returns ⊥;
B returns β′ = 1.
Otherwise, B computes D(r , Voted) and:
– if ∃Vc . r = ρ(Voted) ∗ ρ(Vc) then B returns β′ = 1
– otherwise, B returns β′ = 0.
vote
vote(id, vβ′′).
vote(id, v0, v1), again by calling Ovt
has been called on, and is also the number of additional calls to Op,c
We also construct an adversary C, who plays the game ExpValidTally.
• C1 is identical to B1.
• C2 first draws at random a bit β′′, and then simulates B2 up to the point where B2 has finished simulating A2. It simulates each call
to Op,c
vote(id, v0, v1) B does by calling Ovt
• Once C2 has finished simulating B2 up to the point B2 has simulated A2 and obtained a board BB′
a, it draws at random a number
k ∈(cid:74)1, l(cid:75) Recall that l is the number of different ids Op,c
vote B
will make. C then simulates the first k − 1 calls to Op,c
vote(id, vβ′′). It obtains k − 1 ballots, and stores
them in a board BBb = [(id1, b1), . . . ,(idk−1, bk−1)]. If the kth call is Op,c
a ⊎ BBb , id, vβ′′).
We will now prove that if A breaks Expverif−careful, then B breaks Exppriv−careful provided C does not break ExpValidTally.
The adversary C is polynomial, i.e. there exists a polynomial q(λ) bounding its number of operations.