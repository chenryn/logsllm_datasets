# NSD Operation DAY01
# Nginx扩展20190917：
Nginx 1.14.0版
Ngixn.org 开源版 nginx.com商业版 tengine阿里巴巴修改nginx而来
![](media/image1.png){width="7.2652777777777775in"
height="2.0590277777777777in"}
![](media/image2.png){width="7.2625in" height="2.828472222222222in"}
Auto 辅助编译文件 CHANGES 告诉了一些版本的功能和特性
configure脚本用来生成编译文件生成编译前必备 Src 源代码目录
man:帮助man命令
1：nginx自带vim编辑工具，使得编辑nginx配置文件时，nginx语法很清晰的展现，工具在contrib目录中
![](media/image3.png){width="6.5625in" height="0.3333333333333333in"}
![](media/image4.png){width="7.260416666666667in"
height="3.397222222222222in"}
![](media/image5.png){width="7.264583333333333in"
height="4.576388888888889in"}
2 nginx 编译前查看相关模块
![](media/image6.png){width="6.010416666666667in" height="0.3125in"}
![](media/image7.png){width="7.260416666666667in"
height="5.159027777777778in"}
![](media/image8.png){width="7.261805555555555in"
height="0.41388888888888886in"}
![](media/image9.png){width="7.2659722222222225in"
height="3.0944444444444446in"}
![](media/image10.png){width="7.259027777777778in"
height="1.6472222222222221in"}
![](media/image11.png){width="7.263888888888889in"
height="4.575694444444444in"}
Make 编译之后，如果是首次
[案例1：搭建Nginx服务器](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/OPERATION/DAY01/CASE/01/index.html#case1)
[案例2：用户认证](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/OPERATION/DAY01/CASE/01/index.html#case2)
[案例3：基于域名的虚拟主机](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/OPERATION/DAY01/CASE/01/index.html#case3)
[案例4：SSL虚拟主机](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/OPERATION/DAY01/CASE/01/index.html#case4)
# 1 案例1：搭建Nginx服务器
1.1 问题
在IP地址为192.168.4.5的主机上安装部署Nginx服务，并可以将Nginx服务器，要求编译时启用如下功能：
支持SSL加密功能
设置Nginx账户及组名称均为nginx
Nginx服务器升级到更高版本。
然后客户端访问页面验证Nginx Web服务器：
使用火狐浏览器访问、使用curl访问
1.2 方案
第一天课程需要使用2台RHEL7虚拟机，其中一台作为Nginx服务器（192.168.4.5）、另外一台作为测试用的Linux客户机（192.168.4.10），如图-1所示。
![table001](media/image12.png){width="5.459027777777778in"
height="2.120138888888889in"}
创建:clinet虚拟机 配置eth0 地址
创建:proxy 虚拟机 配置eth0 地址
,eth1网卡本身存在,添加连接如下:(添加后再配置IP)
\[root@proxy \~\]# nmcli connection add con-name eth1 ifname eth1 type
ethernet #添加eth1,type(类型)为ethernet
参考网卡聚合:nmcli connection add type temo ifname eth0 con-name eth0
![image001](media/image13.png){width="7.270138888888889in"
height="2.1416666666666666in"}
nginx 依赖关系是:gcc pcre-devel(支持正则表达式) openssl-devel
nginx的rewrite伪静态匹配规则用到正则，pcre就用来干这个。
用户权限.用户启动的程序,这个程序将有这个用户的相应权限.
linux先创建相应的普通用户,然后配置,指定这个程序的用户是这个普通用户,起到安全作用
Yum安装是有脚本创建用户,并指定软件用户为之前设定的用户.
例如:httpd ps aux \| grep httpd
源码安装是没有创建用户的脚本,
## 步骤一：构建Nginx服务器
### 1）使用源码包安装nginx软件包
\[root@proxy \~\]# yum -y install gcc pcre-devel openssl-devel #依赖包
\[root@proxy \~\]# useradd -s /sbin/nologin nginx
\[root@proxy \~\]# tar -xf /nginx-1.10.3.tar.gz #解压包到当前目录/root
\[root@proxy \~\]# cd nginx-1.10.3/ #进入解压后产生的目录,
\[root@proxy nginx-1.10.3\]# ./configure \\ #运行配置程序
\> \--prefix=/usr/local/nginx \\
#指定安装路径,默认就是安装在/usr/local/nginx
\> \--user=nginx \\ #指定用户
\> \--group=nginx \\ #指定组
\> \--with-http_ssl_module #开启SSL加密功能模块
\>\--with-stream #TCP/UDP代理(四层)用
\>\--with-http_stub_status_module #开启状态页面模块
\[root@proxy nginx-1.10.3\]# make && make install #编译并安装
### 2）nginx命令的用法
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx //启动服务
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s stop //关闭服务
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
//重新加载配置文件
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -V //查看软件信息
### 3）ln命令做软链接使用nginx命令
\[root@proxy \~\]# ln -s /usr/local/nginx/sbin/nginx /sbin/
//做链接方便后期使用
ln 做链接后
\[root@proxy \~\]# nginx -s stop //关闭服务
\[root@proxy \~\]# nginx //启动服务
\[root@proxy \~\]# nginx -s reload //重新加载配置文件
\[root@proxy \~\]# nginx -V //查看软件信息
\[root@proxy \~\]# nginx -V
nginx version: nginx/1.10.3
built by gcc 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC)
built with OpenSSL 1.0.2k-fips 26 Jan 2017
TLS SNI support enabled
configure arguments: \--prefix=/usr/local/nginx \--user=nginx
\--group=nginx \--with-http_ssl_module
#第一步给软件指定了"nginx"用户,如无此用户,服务启动不了,
netstat命令可以查看系统中启动的端口信息，该命令常用选项如下：
-a显示所有端口的信息
-n以数字格式显示端口号
-t显示TCP连接的端口
-u显示UDP连接的端口
-l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
-p显示监听端口的服务名称是什么（也就是程序名称）
nginx服务默认通过TCP 80端口监听客户端请求：
root@proxy \~\]# netstat -anptu \| grep nginx
### 设置防火墙与SELinux
（非必须的操作，如果有则关闭）
\[root@proxy \~\]# firewall-cmd \--set-default-zone=trusted
\[root@proxy \~\]# setenforce 0
## 步骤二 : nginx升级
升级大概思路:
1\--准备安装包,解压安装包
2\--.configure #根据你的选择将src中要用的包放入objs中
3\--make #用gcc编译.则多了nginx目录
4\--备份老版本的nginx (/usr/local/nginx/sbin/nginx)
5\--更换新产生的nginx:将nginx替换老版本的nginx
### 1) 解压新的安装包 #src目录中有源代码 
\[root@proxy \~\]# cd nginx-1.12.2/ #进入目录
\[root@proxy nginx-1.12.2\]# ls #刚解压的目录
auto CHANGES CHANGES.ru conf configure contrib html LICENSE man README
src
### 2) .configure选择需要的模块
\[root@proxy nginx-1.12.2\]# ./configure
\--prefix=/usr/local/nginx #指定安装路径
\--user=nginx
\--group=nginx
\--with-http_ssl_module #开启SSL加密功能模块 SSL虚拟主机用
\--with-stream #TCP/UDP代理(四层)用
\--with-http_stub_status_module #开启状态页面模块
\[root@proxy nginx-1.12.2\]# ls #.configure之后多了 "objs"目录
auto CHANGES CHANGES.ru conf configure contrib html LICENSE Makefile man
objs README src
### 3) make编译
**切勿make install安装**
\[root@proxy nginx-1.12.2\]# make
\[root@proxy nginx-1.12.2\]# cd objs
\[root@proxy objs\]# pwd
/root/nginx-1.12.2/objs
\[root@proxy objs\]# ls #在新版本1.12.2目录里面查看
autoconf.err nginx ngx_auto_config.h ngx_modules.c src
Makefile nginx.8 ngx_auto_headers.h ngx_modules.o
\[root@proxy objs\]# cd /root/nginx-1.10.3/objs/
\[root@proxy objs\]# pwd
/root/nginx-1.10.3/objs
\[root@proxy objs\]# ls #在旧版本1.10.3目录里面查看
autoconf.err nginx ngx_auto_config.h ngx_modules.c src
Makefile nginx.8 ngx_auto_headers.h ngx_modules.o
### 4) 备份旧的nginx,更换新的nginx
备份:将 /usr/local/nginx/sbin 中在用的旧的 nginx 备份
\[root@proxy objs\]# cd /usr/local/nginx/sbin/
\[root@proxy sbin\]# ls
nginx
\[root@proxy sbin\]# mv nginx nginx.bak
\[root@proxy sbin\]# ls
nginx.bak
将 /root/nginx-1.12.2/objs 目录里面的nginx
拷贝放到/usr/local/nginx/sbin/
\[root@proxy sbin\]# cd /root/nginx-1.12.2
\[root@proxy nginx-1.12.2\]# cp objs/nginx /usr/local/nginx/sbin/
\[root@proxy nginx-1.12.2\]# ls /usr/local/nginx/sbin/
nginx nginx.bak
\[root@proxy nginx-1.12.2\]# cd
\[root@proxy \~\]# nginx -s stop #关闭服务
或者 killall nginx
\[root@proxy \~\]# nginx #重启服务
\[root@proxy \~\]# firefox 192.168.4.5 #测试访问
\[root@client \~\]# curl http://192.168.4.5
\[root@proxy \~\]# nginx -V #查看版本,变成1.12.2
nginx version: nginx/1.12.2
built by gcc 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC)
built with OpenSSL 1.0.2k-fips 26 Jan 2017
TLS SNI support enabled
configure arguments: \--prefix=/usr/local/nginx \--user=nginx
\--group=nginx \--with-http_ssl_module
\[root@proxy \~\]# cd /usr/local/nginx #网页所在目录
\[root@proxy nginx\]# ls
client_body_temp conf fastcgi_temp html logs proxy_temp sbin scgi_temp
uwsgi_temp
\[root@proxy nginx\]# cd /usr/local/nginx/html/
\[root@proxy html\]# ls
50x.html index.html
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf 全局配置
.. ..
server {
listen 80;
server_name localhost;
auth_basic \"Input Password:\"; //认证提示符
auth_basic_user_file \"/usr/local/nginx/pass\"; //认证密码文件
location / {
root html;
index index.html index.htm; #设置默认首页,index.htm为备用
}
}
案例一完成
# 2 案例2：用户认证
沿用练习一，通过调整Nginx服务端配置，实现以下目标：
访问Web页面需要进行用户认证
用户名为：tom，密码为：123456
通过Nginx实现Web页面的认证，需要修改Nginx配置文件，在配置文件中添加auth语句实现用户认证。最后使用htpasswd命令创建用户及密码即可。
## 修改Nginx配置文件
### 1) 修改/usr/local/nginx/conf/nginx.conf
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
listen 80;
server_name localhost;
auth_basic \"hello:\";                         
//认证提示符,登录框会显示
auth_basic_user_file \"/usr/local/nginx/pass\";      //认证密码文件
location / {
root html;
ndex index.html index.htm;
}
}
### 2）生成密码文件，创建用户及密码
使用htpasswd命令创建账户文件，需要确保系统中已经安装了httpd-tools(httpd工具)。
\[root@proxy html\]# yum -y install httpd-tools #安装httpd-tools
\[root@proxy html\]# htpasswd -c /usr/local/nginx/pass jerry
#首次创建要-c
New password:
Re-type new password:
htpasswd: password verification error #未创建成功
\[root@proxy html\]# htpasswd /usr/local/nginx/pass tom
#再次创建用户不要-c
New password:
Re-type new password:
Adding password for user tom #创建
### 3) 重启以及测试
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
//重新加载配置文件
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
\[root@client \~\]# firefox http://192.168.4.5 #换客户端访问测试