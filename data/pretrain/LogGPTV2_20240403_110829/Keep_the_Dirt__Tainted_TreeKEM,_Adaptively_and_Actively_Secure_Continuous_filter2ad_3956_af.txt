key ∆∗ from a uniformly random and independent seed. We
ﬁrst consider the selective CGKA game, where the adversary
has to do all its queries at once. We call the two possible
executions of the game the real and random CGKA game
and aim to proof indistiguishability of these two games via a
sequence of indistinguishable hybrid games. Similar to several
other applications of the framework [12], we will deﬁne these
hybrid games via the so-called reversible black pebbling game,
introduced by Bennett [24], where, given a directed acyclic
graph with unique sink (here, the challenge graph), in each step
one can put or remove one pebble on a node following certain
rules, and the goal is to reach the pebbling conﬁguration
where there is only one pebble on the sink of the graph. Each
pebbling conﬁguration P(cid:96) then uniquely deﬁnes a hybrid game
H(cid:96): a node v in the tree being pebbled means that in this hybrid
game whenever ∆v would be used to answer a query, a freshly
chosen random seed (independent of ∆v) is used instead in
the simulation. This applies to all cases where ∆v would be
used as input for H1 or H2, or as the challenge output (if
i is the challenge node). All remaining nodes and edges are
simulated as in the real CGKA game. Thus, the real game
Hreal is represented as the empty pebbling conﬁguration P0
where there is no pebble at all, while the random game Hrandom
corresponds to the ﬁnal conﬁguration PL where only the sink
node is pebbled (L the length of the pebbling sequence).
Deﬁnition 5 (Reversible black pebbling). A reversible peb-
bling of a directed acyclic graph G = (V, E) with unique
sink sink is a sequence P = (P0, . . . ,PL) with P(cid:96) ⊂ V
((cid:96) ∈ [0, L]), such that P0 = ∅ and PL = {sink}, and for all
(cid:96) ∈ [L] there is a unique v ∈ V such that:
• P(cid:96) = P(cid:96)−1 ∪ {v} or P(cid:96) = P(cid:96)−1 \ {v},
• for all u ∈ parents(v): u ∈ P(cid:96)−1.
By Lemma 1, we know that none of the seeds or secret keys
in the challenge graph is leaked to the adversary throughout the
entire game. This will allow us to prove indistinguishability
of subsequent hybrid games from IND-CPA security of the
underlying encryption scheme and pseudorandomness of the
hash functions H1, H2. Recall, the functions H1, H2 were
deﬁned by a hash function H which takes some ∆i as
secret key and publicly known ﬁxed strings x1, x2 as inputs.
To guarantee security, H is assumed to be a pseudorandom
function, where we will use the following non-standard but
equivalent (to the standard) deﬁnition of pseudorandomness:
Deﬁnition 6 (Pseudorandom function, alternative deﬁnition).
Let H : {0, 1}n × {0, 1}n → {0, 1}n be a keyed function. We
deﬁne the following game PRF(n): First, a key k ← {0, 1}n is
chosen uniformly at random and the adversary is given access
to an oracle H(k,·). When the adversary outputs a string
x ← {0, 1}n, a uniformly random bit b ← {0, 1} is chosen and
the adversary receives either H(k, x) in the case b = 0, or y ∈
{0, 1}n uniformly at random if b = 1. Finally, the adversary
outputs a bit b(cid:48). If x was never queried to the oracle H(k,·)
and b(cid:48) = b, then the output of the game is 1, otherwise 0. We
call H (, t)-pseudorandom if for all adversaries A running
in time t we have
AdvPRF(A) := |Pr[1 ← PRF(n)|b = 0]
− Pr[1 ← PRF(n)|b = 1]| < .
It is an easy exercise to prove that the above deﬁnition is
equivalent to the standard textbook deﬁnition of pseudorandom
functions (i.e., only a polynomial loss in security is involved
by the respective reductions).
Lemma 2. Let P = (P0, . . . ,PL) be a valid pebbling
sequence on the challenge graph. If H is an (, t)-secure
pseudorandom function and Π = (Gen, Enc, Dec) is an (, t)-
IND-CPA secure encryption scheme, then any two subsequent
hybrid games H(cid:96), H(cid:96)+1 are (5 · , t)-indistinguishable12.
A proof of this lemma can be found in the full version of
this paper. Choosing a trivial pebbling sequence of the chal-
lenge graph, this already implies selective CGKA security of
TTKEM. Unfortunately, in the adaptive setting, the challenge
graph is not known to the reduction until the adversary does
its challenge query, but by this time it will be too late for the
reduction to embed a challenge, since seeds and public keys in
the challenge graph might have been used already before when
answering previous queries by the adversary. Thus, to simulate
a hybrid game H(cid:96), the reduction needs to guess (some of) the
adaptive choices the adversary will do. Na¨ıvely, this would
result in an exponential security loss. However, the framework
of Jafargholi et al. [12] allows to do signiﬁcantly better:
Theorem 3 (Framework for proving adaptive security, infor-
mal [12]). Let Greal, Grandom be two adaptive games, and
Hreal, Hrandom be their respective selective versions, where the
adversary has to do all its choices right in the beginning
of the game. Furthermore, let Hreal
:= H0, H1, . . . , HL :=
Hrandom be a sequence of hybrid games such that each pair
of subsequent games can be simulated and proven (, t)-
indistinguishable by only guessing M bits of information on
the adversary’s choices. Then Greal and Grandom are ( · L ·
2M , t)-indistinguishable.
The problem of proving CGKA security of TTKEM now
reduces to ﬁnding a sequence of indistinguishable hybrids
such that each hybrid can be simulated by only a small
amount of random guessing. Deﬁning hybrid games via peb-
bling conﬁgurations as above and using the space-optimal
pebbling sequence for binary trees, described e.g.
in [25,
Algorithm 1], which uses L = n2 steps and only 2 log(n) + 1
pebbles13, implies a security reduction for TTKEM with only
12Technically, the t in Lemma 2 changes slightly due to the reduction and
thus should not actually be the same t. For simplicity, in all our security
reductions we will ignore such miniscule running time overheads incurred by
simulating challengers of the security games or sampling (a small number of)
random bits.
13Although the original Lemma 3 in [25] states that 3 log(n) pebbles are
required to pebble a binary tree, the bound is loose since it is derived from
Lemma 2. It is not difﬁcult to see that a tighter analysis of Algorithm 1 for
the case of binary trees leads to a bound of 2 log n + 1.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
279
a quasipolynomial loss in security.
Theorem 4. If H is an (, t)-pseudorandom function and
Π = (Gen, Enc, Dec) is an (, t)-IND-CPA secure encryption
scheme, then TTKEM is (5· n2 · Qlog(n)+2 · , t)-GCKA secure.
Proof. Note that the challenge graph is a complete binary tree
of depth log(n) in the worst case and let P = (P0, . . . ,PL)
be the recursive pebbling strategy for binary trees from [25],
which uses L = n2 steps and at most 2 log(n) + 1 pebbles.
We will prove that each pebbling conﬁguration P(cid:96) can be
represented using M = (log(n) + 2) · log Q bits. The claim
then follows by Lemma 2 and Theorem 3.
We need the following property of the strategy P: For all
(cid:96) ∈ [0, L], there exists a leaf in the tree such that all pebbled
nodes lie either on the path from that leaf to the sink or on
the copath. Furthermore, the subgraph on this set of potentially
pebbled nodes contains 2 log(n)+1 nodes which are connected
by at most log(n) + 1 encryption and H1 edges, respectively.
Throughout the game, the reduction always knows in which
position in the binary tree a node ends up, but it does not
know which of the up to Q versions of the node will end up
in the challenge tree. However, nodes connected by an H1
edge are generated at the same time, so the reduction only
needs to guess for at most log(n) + 2 nodes which of the up
to Q versions of that node will be in the challenge graph. This
proves the claim.
Since the above proof mainly relies on the depth of the
challenge tree,
it can easily be adapted to prove CGKA
security of TreeKEM, the main difference being the different
challenge graph structure induced by blanking.
E. Security Proof for TTKEM in the ROM
The security of TTKEM is closely related to the notion of
generalized selective decryption (GSD), which we adapt to the
public key setting for our purposes:
Deﬁnition 7 (Generalized selective decryption (GSD), adapted
from [13]). Let (Gen, Enc, Dec) be a public key encryption
scheme with secret key space K and message space M such
that K ⊆ M. The GSD game (for public key encryption
schemes) is a two-party game between a challenger C and
an adversary A. On input an integer N, for each v ∈ [N ]
the challenger C picks a key pair (pkv, skv) ← Gen(r)
(where r is a random seed) and initializes the key graph
G = (V,E) := ([N ],∅) and the set of corrupt users C = ∅. A
can adaptively do the following queries:
• (encrypt, u, v): On input two nodes u and v, C returns
an encryption c = Encpku(skv) of skv under pku along
with pku and adds the directed edge (u, v) to E. Each
pair (u, v) can only be queried at most once.
• (corrupt, v): On input a node v, C returns skv and adds
v to C.
• (challenge, v), single access: On input a challenge node
v, C samples b ← {0, 1} uniformly at random and returns
skv if b = 0, otherwise it returns a new secret key
generated by Gen using a new independent uniformly
random seed. In the context of GSD we denote the
challenge graph as the graph induced by all nodes from
which the challenge node v is reachable. We require that
none of the nodes in the challenge graph are in C, that G
is acyclic and that the challenge node v is a sink. Note
that A does not receive the public key of the challenge
node, since it is a sink.
Finally, A outputs a bit b(cid:48) and it wins the game if b(cid:48) = b. We
call the encryption scheme (, t)-adaptive GSD-secure if for
any adversary A running in time t it holds
AdvGSD(A) := |Pr[1 ← A|b = 0] − Pr[1 ← A|b = 1]| < .
We will apply the following general result for our version
of GSD, which could be of independent interest; a proof can
be found in the full version of this paper.
Theorem 5. For any public key encryption scheme Π =
(Gen, Enc, Dec) and hash function H let
the encryption
scheme Π(cid:48) = (Gen(cid:48), Enc(cid:48), Dec(cid:48)) be deﬁned as follows: 1)
Gen(cid:48) simply picks a random seed s as secret key and runs
Gen(H(s)) to obtain the corresponding public key, 2) Enc(cid:48) is
identical to Enc and 3) Dec(cid:48), given the secret key s, extracts
the secret key from Gen(H(s)) and uses Dec to decrypt the
ciphertext.
If Π is (, t)-IND-CPA secure and H is modelled as a
random oracle, then Π(cid:48) is (˜, t)-adaptive GSD secure, where
˜ =  · 2N 2 + (mN )/(2l−1), with N the number of nodes, m
the number of oracle queries to H and l the seed length.
We now adapt the above proof to show a polynomial time
reduction for TTKEM in the random oracle model. Intuitively,
the CGKA graph corresponds to a GSD graph in the above
sense (i.e. for the transformed Π(cid:48), where H2 plays the role
of the RO), with the only difference that there are additional
edges corresponding to a second RO H1. The following
Theorem shows that this difference does not impact security;
a proof can be found in the full version of this paper.
Theorem 6. If the encryption scheme in TTKEM is (˜, t)-IND-
CPA secure and H1, H2 are modelled as random oracles, then
TTKEM is (Q, , t)-CGKA-secure, where  = ˜·8(nQ)2 +negl.
We remark that, similarly to the previous proof, one can
easily adapt it to the case of TreeKEM (with blanking).
IV. CONCLUSION
We formalized and analyzed a proposed modiﬁcation to
TreeKEM, the Continuous Group Key Agreement (CGKA)
algorithm that as of September 2020 is being considered
for standardization by the IETF ”Message Layer Security”
working group. First, we showed that the modiﬁcation, termed
TTKEM, has the potential to achieve better efﬁciency than
TreeKEM for large groups in natural settings; and is there-
fore worth of further work and consideration. Second, we
formulated a novel and intuitive security model against active
and adaptive outsiders for a CGKA with Forward Secrecy
and Post-Compromise Security. Third, we provided security
proofs for TTKEM in both the standard and RO model,
bounding the security loss (to the underlying PKE) by a
quasipolynomial factor Qlog(n) and a polynomial factor (Qn)2
respectively, where n is the group size and Q the total number
of (update/remove/invite) operations. Our proof techniques can
easily be extended to TreeKEM.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:47 UTC from IEEE Xplore.  Restrictions apply. 
280
REFERENCES
[1] “Message
Layer
Security
(mls)
WG,”
https://datatracker.ietf.org/wg/mls/about/.
[2] J. Alwen, S. Coretti, and Y. Dodis, “The double ratchet: Security
notions, proofs, and modularization for the Signal protocol,” in EU-
ROCRYPT 2019, Part I, ser. LNCS, Y. Ishai and V. Rijmen, Eds., vol.
11476. Springer, Heidelberg, May 2019, pp. 129–158.
[3] J. Alwen, S. Coretti, Y. Dodis, and Y. Tselekounis, “Security analysis
and improvements for the ietf mls standard for group messaging,” in Ad-
vances in Cryptology – CRYPTO 2020, D. Micciancio and T. Ristenpart,
Eds. Cham: Springer International Publishing, 2020, pp. 248–277.
[4] K. Cohn-Gordon, C. Cremers, L. Garratt, J. Millican, and K. Milner,
“On Ends-to-Ends Encryption: Asynchronous Group Messaging with
Strong Security Guarantees.”
[Online]. Available:
https://doi.org/10.1145/3243734.3243747
CCS, 2018.
[6] R. Barnes, B. Beurdouche,
[5] K. Bhargavan, R. Barnes, and E. Rescorla, “TreeKEM: Asynchronous
Decentralized Key Management for Large Dynamic Groups,” May 2018.
J. Millican, E. Omara, K. Cohn-
Gordon, and R. Robert, “The Messaging Layer Security (MLS)
Protocol,” Internet Engineering Task Force, Internet-Draft draft-ietf-
mls-protocol-09, Mar. 2020, work in Progress. [Online]. Available:
https://datatracker.ietf.org/doc/html/draft-ietf-mls-protocol-09
[7] K. Cohn-Gordon, C. Cremers, L. Garratt, J. Millican, and K. Milner, “On
ends-to-ends encryption: Asynchronous group messaging with strong
security guarantees,” in ACM CCS 2018, D. Lie, M. Mannan, M. Backes,
and X. Wang, Eds. ACM Press, Oct. 2018, pp. 1802–1819.
[8] C. Cremers, B. Hale, and K. Kohbrok, “Efﬁcient post-compromise se-
curity beyond one group,” Cryptology ePrint Archive, Report 2019/477,
2019, https://eprint.iacr.org/2019/477.
[9] D. Jost, U. Maurer, and M. Mularczyk, “Efﬁcient ratcheting: Almost-
optimal guarantees for secure messaging,” in EUROCRYPT 2019, Part I,
ser. LNCS, Y. Ishai and V. Rijmen, Eds., vol. 11476.
Springer,
Heidelberg, May 2019, pp. 159–188.
[10] F. B. Durak and S. Vaudenay, “Bidirectional asynchronous ratcheted
key agreement with linear complexity,” in IWSEC 19, ser. LNCS,
N. Attrapadung and T. Yagi, Eds., vol. 11689.
Springer, Heidelberg,
Aug. 2019, pp. 343–362.
[11] J. Alwen, S. Coretti, D. Jost, and M. Mularczyk, “Continuous group key
agreement with active security,” in TCC 2020, Theory of Cryptography
Conference, Durham, NC, USA, November, 2020. [Online]. Available:
https://eprint.iacr.org/2020/752
[12] Z. Jafargholi, C. Kamath, K. Klein, I. Komargodski, K. Pietrzak, and
D. Wichs, “Be adaptive, avoid overcommitting,” in CRYPTO 2017,
Part I, ser. LNCS, J. Katz and H. Shacham, Eds., vol. 10401. Springer,
Heidelberg, Aug. 2017, pp. 133–163.
[13] S. Panjwani, “Tackling adaptive corruptions in multicast encryption
protocols,” in TCC 2007, ser. LNCS, S. P. Vadhan, Ed., vol. 4392.
Springer, Heidelberg, Feb. 2007, pp. 21–40.
[14] D. M. Wallner, E. J. Harder, and R. C. Agee, “Key management for
multicast: Issues and architectures,” Internet Draft, Sep. 1998, http://
www.ietf.org/ID.html.
[15] C. K. Wong, M. G. Gouda, and S. S. Lam, “Secure group communica-
tions using key graphs,” in Proceedings of ACM SIGCOMM, Vancouver,
BC, Canada, Aug. 31 – Sep. 4, 1998, pp. 68–79.
[16] R. Canetti, J. A. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas,
“Multicast security: A taxonomy and some efﬁcient constructions,” in
IEEE INFOCOM’99, New York, NY, USA, Mar. 21–25, 1999, pp. 708–
716.