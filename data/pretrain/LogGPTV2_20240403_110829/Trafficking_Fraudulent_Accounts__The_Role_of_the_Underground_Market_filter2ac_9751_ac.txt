4We calculate uniqueness over the IP addresses in our dataset, not
over all IPs used to register accounts on Twitter.
200  22nd USENIX Security Symposium 
USENIX Association
6
We calculate the number of IP addresses under each
merchant’s control by treating IP reuse as a closed
capture-recapture problem. Closed capture-recapture
measurements – used to estimate an unknown population
size – require (1) the availability of independent sam-
ples and (2) that the population size under study remains
ﬁxed. To begin, we assume each purchase we make is
an independent sample of the IP addresses under a mer-
chant’s control, satisfying the ﬁrst requirement. The sec-
ond requirement is more restrictive. If we assume that
merchants use IP addresses tied to compromised hosts,
then there is an inherent instability in the population size
of IPs due to hosts becoming uninfected, new hosts be-
coming infected, and ISPs reallocating dynamic IPs. As
such, comparisons over long periods are not possible.
Nevertheless, if we restrict our analysis to batches of ac-
counts from a single seller that were all registered within
24 hours, we can minimize the imprecision introduced
by IP churn.
To this end, we select clusters of over 300 accounts
registered by merchants within a 24 hour window. We
split each cluster in half by time, with the ﬁrst half m
acting as the set of marked IPs and the second set c as
the captured IPs, where there are r overlapping, or re-
captured, IPs between both sets. We can then estimate
the entire population size ˆN (e.g. the number of unique
IPs available to a merchant) according to the Chapman-
Petersen method [24]:
ˆN =
(m + 1)(c + 1)
(r + 1)
− 1
And standard error according to:
SE = (cid:31) ˆN 2(c − r)
(c + 1)(r + 2)
For 95% conﬁdence intervals, we calculate the error
of ˆN as ±1.96 × SE. We detail our results in Table 4.
We ﬁnd that sellers like accs.biz and victoryservices have
tens of thousands of IPs at their disposal on any given
day, while even the smallest web storefront merchants
have thousands of IPs on hand to avoid network-based
blacklisting and throttling.
4.3 CAPTCHAs & Email Conﬁrmation
Web services frequently inhibit automated account cre-
ation by requiring new users to solve a CAPTCHA or con-
ﬁrm an email address. Unsurprisingly, we ﬁnd neither
of these barriers are insurmountable, but they do impact
the pricing and rate of generation of accounts, warranting
their continued use.
Merchant
accs.biz
victoryservices
dataentryassistant.com
alexissmalley
webmentors2009
buyaccs.com
buytwitteraccounts.info
buyaccountsnow.com
spamvilla.com
kamalkishover
ˆN Estimate ± Error
4,783
2,264
4,508
3,749
2,052
3,344
1,661
1,843
1,337
1,170
21,798
17,029
16,887
16,568
10,019
9,770
6,082
5,438
4,646
4,416
Table 4: Top 10 merchants with the largest estimated pool of
IP addresses under their control on a single day.
Email Conﬁrmation All but 5 of the merchants we pur-
chase from readily comply with requirements to conﬁrm
email addresses through the receipt of a secret token. In
total, merchants email conﬁrm 77% of accounts we ac-
quire, all of which they seeded with a unique email. The
failure of email conﬁrmation as a barrier directly stems
from pervasive account abuse tied to web mail providers.
Table 5 details a list of the email services frequently tied
to fraudulent Twitter accounts. Merchants abuse Hotmail
addresses to conﬁrm 60% of Twitter accounts, followed
in popularity by Yahoo and mail.ru. This highlights the
interconnected nature of account abuse, where creden-
tials from one service can serve as keys to abusing yet
another.
While the ability of merchants to verify email ad-
dresses may raise questions of the processes validity, we
ﬁnd that email conﬁrmation positively impacts the price
of accounts. Anecdotally, Hotmail and Yahoo accounts
are available on blackhatworld.com for $6 per thousand,
while Twitter accounts from the same forum are $40 per
thousand. This is also true of web storefront such as buy-
accs.com where mail.ru and Hotmail accounts are $5 per
thousand, compared to $20 per thousand for Twitter ac-
counts. Within our own dataset, we ﬁnd that Twitter ac-
counts purchased without email conﬁrmation cost on av-
erage $30 per thousand compared to $47 per thousand for
accounts with a conﬁrmed email address. This difference
likely includes the base cost of an email address and any
related overhead due to the complexity of responding to
a conﬁrmation email.
CAPTCHA Solving Twitter throttles multiple registra-
tions originating from a single IP address by requiring
a CAPTCHA solution. Merchants solved a CAPTCHA
for 35% of the accounts we purchase; the remaining ac-
counts were registered from fresh IPs that did not trigger
throttling. While there are a variety of CAPTCHA solving
USENIX Association  
22nd USENIX Security Symposium  201
7
Email Provider
hotmail.com
yahoo.com
mail.ru
gmail.com
nokiamail.com
Other
Accounts
64,050
12,339
12,189
2,013
996
2,157
Popularity
60.08%
11.57%
11.43%
1.89%
0.93%
0.14%
Table 5: Top 5 email providers used to conﬁrm fraudulent
Twitter accounts.
1.00
0.75
s
P
I
f
0.50
o
n
o
i
t
c
a
r
F
0.25
0.00
G
G
G
G
G
G
G
G
G
G
G
G
G
G
G
0.00
0.25
0.50
0.75
1.00
Captcha Solution Accuracy
G All merchants
buuman
buyaccs.com
smokinbluelady
victoryservices
webmentors2009
Figure 4: CAPTCHA solution rates per each IP address abused
by a variety of merchants as well as the rates for all merchants
combined.
services available in the underground market [19], none
are free and thus requiring a CAPTCHA slightly increases
the cost of creating fraudulent accounts.
A second aspect of CAPTCHAs is the success rate of
automated or human solvers. By virtue of only buy-
ing successfully registered accounts, we cannot exactly
measure CAPTCHA failure rates (unless account sellers
fail and re-try a CAPTCHA during the same registration
session, something we ﬁnd rare in practice). However,
we can examine registration attempts that occur from the
same IPs as the accounts we purchase to estimate the rate
of failure. To carry out this analysis, we examine all reg-
istrations within the previous year, calculating the frac-
tion of registrations that fail due to incorrect CAPTCHA
solutions per IP address.
We show a CDF of CAPTCHA solution rates for a sam-
ple of merchants in Figure 4. The median CAPTCHA so-
lution rate for all sellers is 7%, well below estimates for
automated CAPTCHA solving software of 18–30% [19],
a discrepancy we currently have no explanation for. For
two of the Fiverr sellers, buuman and smokinbluelady,
the median CAPTCHA solution rate per IP is 100% and
67% respectively, which would indicate a human solver.
In total, 92% of all throttled registration attempts from
merchants fail. Despite this fact, account sellers are still
able to register thousands accounts over the course of
time, simply playing a game of odds.
4.4 Stockpiling & Suspension
Without effective defenses against fraudulent account
registration, merchants are free to stockpile accounts and
sell them at a whim. For many solicitations, merchants
consider “pre-aged” accounts a selling point, not a de-
traction. To highlight this problem, we examine the fail-
ure of at-abuse time metrics for detecting dormant ac-
counts and the resulting account stockpiles that occur.
Account Suspension Twitter suspends (e.g. disables)
spam accounts due to at-abuse time metrics such as send-
ing spam URLs or generating too many relationships, as
outlined in Twitter’s rules [30]. In our case, we are inter-
ested in whether fraudulent accounts that do not perform
visible spam actions (e.g. are dormant) nevertheless be-
come suspended. While for miscreants this should ide-
ally be impossible, there are multiple avenues for guilt
by association, such as clustering accounts based on reg-
istration IP addresses or other features. As such, when
Twitter suspends a large volume of active fraudulent ac-
counts for spamming, it is possible for Twitter to catch
dormant accounts in the same net.
Of the dormant accounts we purchase, only 8% are
eventually detected and suspended. We exclude accounts
that were resold and used to send spam (outlined in Sec-
tion 3.5) from this metric in order to not skew our re-
sults. Of the merchants we track, Fiverr sellers take the
least caution in registering unlinkable accounts, result-
ing in 57% of our purchases becoming suspended by the
time of our analysis. In contrast, web storefronts lever-
age the vast resources at their disposal to create unlink-
able accounts, where only 5% of our purchased accounts
are eventually detected as fraudulent. These poor detec-
tion rates highlight the limitation of at-abuse time metrics
against automated account registration. Without more
sophisticated at-registration abuse signals, merchants are
free to create thousands of accounts with minimal risk of
Twitter suspending back stock.
Account Aging & Stockpiling We examine the age of
accounts, measured as the time between their registra-
tion and subsequent date of purchase, and ﬁnd that ac-
counts are commonly stockpiled for a median of 31 days.
While most merchants deal exclusively in back stock,
some merchants operate in an on-demand fashion. At
the far end of this spectrum is a merchant spamvilla.com
202  22nd USENIX Security Symposium 
USENIX Association
8
that sold us accounts registered a median of 323 days ago
– nearly a year in advance of our purchase. In contrast,
webstores such as buyaccs.com and Fiverr merchants in-
cluding smokinbluelady sell accounts less than a day old.
Even though these merchants operate purely on-demand,
they are still able to fulﬁll large requests in short order
(within a day in our experience). Both modes of opera-
tion illustrate the ease that merchants circumvent exist-
ing defenses and the need for at-registration time abuse
detection.
4.5 Recommendations
Web services that rely on automation barriers must strike
a tenuous balance between promoting user growth and
preventing the proliferation of fraudulent accounts and
spam behavior. We summarize our ﬁndings in this sec-
tion with a number of potential improvements to existing
barriers that should not impede legitimate users. While
we draw many of our observations from the Twitter ac-
count abuse problem, we believe our recommendations
should generalize across web services.
Email Conﬁrmation While account merchants have
cheap, disposable emails on hand to perform email con-
ﬁrmation, conﬁrmation helps to increase the cost of
fraudulent accounts. In the case of Twitter, email con-
ﬁrmation raises the cost of accounts by 56%. Further-
more, in the absence of clear abuse signals, services
can use email reconﬁrmation as a soft action against au-
tomation, similar to requiring a CAPTCHA before send-
ing an email or tweet. Of the Twitter accounts we pur-
chased, only 47% included the email address and pass-
word used to conﬁrm the account. Merchants will some-
times re-appropriate these email addresses and sell them
as “second-hand” at a discount of 20%. Without the orig-
inal credentials, miscreants will be unable to perform
email reconﬁrmation. Even if merchants adapt and be-
gin to provide email credentials as part of their sale, the
possibility of reselling email addresses disappears, cut-
ting into a merchant’s revenue.
CAPTCHAs CAPTCHAs serve to both increase the cost
of accounts due to the requirement of a CAPTCHA solv-
ing service as well as to throttle the rate of account cre-
ation. In our experience, when required, CAPTCHAs pre-
vent merchants from registering 92% of fraudulent ac-
counts. Services could also leverage this failure rate as a
signal for blacklisting an IP address in real-time, cutting
into the number of accounts merchants can register from
a single IP.
IP Blacklisting While miscreants have thousands of IP
addresses at their disposal that rapidly change, IP black-
listing is not without merit. Our results show that mer-
chants use a small fraction of IPs to register tens of
thousands of accounts, which services could curb with
real-time blacklisting. While public and commercial
IP blacklists exist such as CBL [5], previous work has
shown these generate too many false positives in the case
of social spam [28], requiring service providers to gener-
ate and maintain their own blacklists.
Phone Veriﬁcation While Twitter does not require
phone veriﬁcation, we observe the positive impact phone
veriﬁcation has on increasing the cost of fraudulent ac-
counts for other services. Facebook and GMail accounts
that are phone veriﬁed cost up to 150x more than their
Twitter, non-PVA counterpart. As with CAPTCHAs or
email reconﬁrmation, phone veriﬁcation can serve as a
soft action against spammers who do not clearly fall into
the set of accounts that should be automatically disabled.
5 Detecting Fraudulent Registrations
To understand the impact account merchants have on
Twitter spam, we develop a classiﬁer trained on pur-
chased accounts to retroactively identify abusive regis-
trations. Our technique relies on identifying patterns in
the naming conventions and registration process used by
merchants to automatically generate accounts. We ap-
ply our classiﬁer to all Twitter accounts registered in the
last year (overlapping with our investigation) and iden-
tify several million accounts which appear to be fraud-
ulent. We note this approach is not meant to sustain
accuracy in an adversarial setting; we only apply it to
historical registrations where adaptation to our signals is
impossible.
5.1 Automatic Pattern Recognition
Our detection framework begins by leveraging the lim-
ited variability in naming patterns used by account gener-
ation algorithms which enables us to automatically con-
struct regular expressions that ﬁngerprint fraudulent ac-
counts. Our approach for generating these expressions
is similar to previous techniques for identifying spam
emails based on URL patterns [32] or spam text tem-
plates [22, 23]. However, these previous approaches fail
on small text corpuses (e.g.
screennames), especially
when samples cannot be linked by repeating substrings.
For this reason, we develop a technique explicitly for ac-
count naming patterns. Algorithm 1 shows a sketch of
our approach which we use to guide our discussion.
USENIX Association  
22nd USENIX Security Symposium  203
9
Algorithm 1 Generate Merchant Pattern
Input: List of accounts for a single merchant
Parameters: τ (minimum cluster size)
clusters ← GROUP accounts BY
for all cluster ∈ clusters do
if cluster.size() > τ then
(Σ-Seq, repeatedNames, emailDomain)
patterns ← MINMAXΣ-SEQ (cluster)
OUTPUTREGEX(patterns, repeatedNames)
end if
end for
Common Character Classes To capture accounts that
all share the same naming structure, we begin by deﬁning
a set of character classes:
Σ = {p{Lu}, p{Ll}, p{Lo}, d, . . .}
composed of disjoint sets of characters including up-
percase Unicode letters, lowercase Unicode letters, non-
cased Unicode letters (e.g., Arabic). and digits.5 We treat
). We
all other characters as distinct classes (e.g., +, -,
chose these character classes based on the naming pat-
terns of accounts we purchase, a sample of which we
show in Table 6. We must support Unicode as registra-
tion algorithms draw account names from English, Cyril-
lic, and Arabic.
From these classes we deﬁne a function Σ-Seq that
captures transitions between character classes and pro-
duces an ordered set σ1σ2 . . . σn of arbitrary length,
where σi represents the i-th character class in a string.
For example, we interpret the account Wendy Hunt from