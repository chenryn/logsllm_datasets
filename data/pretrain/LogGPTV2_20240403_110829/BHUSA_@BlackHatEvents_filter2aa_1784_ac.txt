# Kernel Space Operations on File Descriptors and Related Concepts

## Table of Contents
1. **Operations on File Descriptors (fd)**
2. **Process ID (pid)**
3. **User Address Space**
4. **Task Structure (task_struct)**
5. **Virtual Memory Area (vma)**
6. **Conclusion & Future Work**
7. **Acknowledgments**
8. **Supplement: Exploit of CVE-2022-28350**
9. **Exploitation Techniques and Vulnerabilities**
10. **Thank You!**

---

### 1. Operations on File Descriptors (fd)
File descriptors (fd) are a fundamental concept in Unix-like operating systems, used to represent open files, sockets, and other I/O resources.

### 2. Process ID (pid)
A process ID (pid) is a unique identifier assigned to each running process in the system. It is used for process management and inter-process communication.

### 3. User Address Space
The user address space refers to the memory region accessible to user-space processes. It is distinct from the kernel address space, which is reserved for the operating system.

### 4. Task Structure (task_struct)
The `task_struct` is a data structure in the Linux kernel that represents a process. It contains information about the process, such as its state, scheduling, and resource usage.

### 5. Virtual Memory Area (vma)
A Virtual Memory Area (vma) is a contiguous range of virtual addresses in the process's address space. Each vma is associated with a specific memory mapping, such as a file or anonymous memory.

### 6. Conclusion & Future Work
In this document, we have explored various aspects of kernel space operations, including file descriptors, process IDs, user address spaces, task structures, and virtual memory areas. Future work will focus on further analyzing these concepts and their interactions in the context of security and performance.

### 7. Acknowledgments
We would like to thank the following individuals for their contributions and support:
- 某因幡
- Ye Zhang
- Chenfu Bao
- Shufan Yang
- Lin Wu
- Yakun Zhang
- Zheng Huang
- Tim Xia

### 8. Supplement: Exploit of CVE-2022-28350
#### Overview
CVE-2022-28350 is a vulnerability in the Linux kernel that can be exploited due to race conditions in file descriptor (fd) operations. This section details the exploitation techniques and vulnerabilities associated with this CVE.

#### Exploitation Techniques
##### UAF Caused by Race Condition in fd Export Operation
- **Vulnerability**: Use-After-Free (UAF) caused by a race condition in the fd export operation.
- **Impact**: The UAF can lead to memory corruption and potentially arbitrary code execution.

##### Fd Type Confusion Caused by Race Condition in fd Import Operation
- **Vulnerability**: File descriptor type confusion caused by a race condition in the fd import operation.
- **Impact**: The type confusion can lead to incorrect memory access and potential privilege escalation.

#### Small Race Windows Can Be Exploitable!
Even small race windows can be exploited if the correct techniques are used. The following sections detail the steps and methods to exploit these vulnerabilities.

### 9. Exploitation Techniques and Vulnerabilities
#### Example Code Snippet
```c
static int kbase_kcpu_fence_signal_prepare(...) {
    struct sync_file *sync_file;
    int ret = 0;
    int fd;
    sync_file = sync_file_create(fence_out);
    fd = get_unused_fd_flags(O_CLOEXEC);
    fd_install(fd, sync_file->file);
    if (copy_to_user(u64_to_user_ptr(fence_info->fence), &fence, sizeof(fence))) {
        ret = -EFAULT;
        goto fd_flags_fail;
    }
    return 0;
fd_flags_fail:
    fput(sync_file->file);
    return ret;
}
```

#### Exploitation Steps
1. **Construct the Scene with CVE-2022-28350**:
   - Create an unprivileged file, e.g., `/sdcard/data/test.txt`.
   - Trigger the UAF or fd type confusion in a race condition.

2. **Write to a Privileged File in a Race Condition**:
   - Use multiple threads to create a race condition.
   - Write to the privileged file using the reused file object.

3. **Widen the Race Window**:
   - Use techniques such as pinning threads to different CPUs and adjusting thread priorities to increase the likelihood of hitting the race window.

4. **Heap Spray and File Reuse**:
   - Open many files to try to reuse the released file object.
   - Perform heap spraying to increase the chances of successful exploitation.

#### Exploitation on Android
- On Android, the SELinux policy may prevent the unprivileged process from reading or writing to the "stolen" privileged file.
- However, if SELinux is disabled, the unprivileged process can bypass the Discretionary Access Control (DAC) checks in `read()` and `write()` to perform unauthorized operations.

#### Double-fput() Vulnerability
- A double-fput() vulnerability can be constructed by closing two file descriptors associated with the same file object.
- This can lead to a use-after-free condition, allowing an unprivileged process to write to a privileged file.

### 10. Thank You!
Thank you for your attention. If you have any questions or need further information, please feel free to contact us.

---