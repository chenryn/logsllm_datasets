Kernel space
Operations on fd
pid
user address
…
task_struct
vma
Conclusion & Future work
+
51
Acknowledge 
Thanks to 某因幡, Ye Zhang, Chenfu Bao, Shufan Yang, Lin Wu, 
Yakun Zhang, Zheng Huang, Tim Xia
52
Supplement 
 Exploit of CVE-2022-28350
• UAF caused by race condition in fd export operation
• Fd type confusion caused by race condition in fd import operation
 Small race windows can be exploitable!
53
Supplement 
 Exploit of CVE-2022-28350
• UAF caused by race condition in fd export operation
• Fd type confusion caused by race condition in fd import operation
 Small race windows can be exploitable!
54
static int kbase_kcpu_fence_signal_prepare(…)
{
…
struct sync_file *sync_file;
int ret = 0;
int fd;
…
sync_file = sync_file_create(fence_out);
…
fd = get_unused_fd_flags(O_CLOEXEC);
…
fd_install(fd, sync_file->file);
…
if (copy_to_user(u64_to_user_ptr(fence_info->fence), &fence,
sizeof(fence))) {
ret = -EFAULT;
goto fd_flags_fail;
}
return 0;
fd_flags_fail:
fput(sync_file->file);
…
return ret;
}
Exploit of CVE-2022-28350
What will CVE-2022-28350 lead to?
UAF in a race condition:
User Space
Kernel space
file
Thread A
Step1:get unused fd
Step2:fd_array[fd]=file
Step3:return to user space
Thread B
fput(sync_file->file)
close(fd);
UAF
mmap the “fence_info->fence” to 
read-only memory
55
Exploit of CVE-2022-28350
But the CVE-2022-28350 can do more:
static int kbase_kcpu_fence_signal_prepare(…)
{
…
struct sync_file *sync_file;
int ret = 0;
int fd;
…
sync_file = sync_file_create(fence_out);
…
fd = get_unused_fd_flags(O_CLOEXEC);
…
fd_install(fd, sync_file->file);
…
if (copy_to_user(u64_to_user_ptr(fence_info->fence), &fence,
sizeof(fence))) {
ret = -EFAULT;
goto fd_flags_fail;
}
return 0;
fd_flags_fail:
fput(sync_file->file);
…
return ret;
}
A valid fd associated with an released file object
Kernel space
file
Thread A
Step1:get an unused fd
Step2:fd_array[fd]=file
Step3:return to user space
fput(sync_file->file)
file ojbect1
fd_array
[0]
[1]
[fd]
file ojbect0
file object_x
…
…
56
Exploit of CVE-2022-28350
So what if the released file object get reused by some other privileged processes when opening a privileged file? 
Unprivileged Process A
Privileged Process B
file ojbect1
fd_array
[0]
[1]
[fd]
file ojbect0
file object_x
[0]
[1]
[fd2]
fd_array
int fd2=open(“/etc/crontab”, O_RDWR)
We succeed in “stealing” a 
privileged file from others!
…
…
…
…
57
Exploit of CVE-2022-28350
If the SELinux is disabled, the unprivileged process will have the ability to read/write the “stolen” privileged file: 
Unprivileged Process A
file ojbect1
fd_array
[0]
[1]
[fd]
file ojbect0
file object_x
read(fd, buf, buf_len);
write(fd, buf, buf_len);
/etc/crontab
-rw-r--r-- 1 root root 722 4月
6  2016 /etc/crontab
Is it strange that we can bypass the DAC of 
privileged file to perform the read/write operation?
The answer is:
The DAC is only checked in open(). There are no 
DAC checks in read() and write() 
…
…
58
Exploit of CVE-2022-28350
On Android, the unprivileged process cannot read/write the “stolen”privileged file because of SELinux 
int rw_verify_area(int read_write, struct file *file, const loff_t *ppos, 
size_t count)
{
…
return security_file_permission(file,
read_write == READ ? MAY_READ : MAY_WRITE);
}
read(fd, buf, buf_len);
write(fd, buf, buf_len);
The exploitation method of “stealing” privileged file from others has been mentioned by Mathias Krause here , 
but this won’t work on Android. 
59
Exploit of CVE-2022-28350
Let’s find some other way out!
What if the released file object gets 
reused in the same process?
Unprivileged Process A
file ojbect1
fd_array
[0]
[1]
[fd]
file ojbect0
file object_x
[fd2]
Two different fds are associated with a 
same file object! But the refcount of the 
file object is still 1
…
…
60
Exploit of CVE-2022-28350
What happens if we close both fd and fd2?
close(fd);
close(fd2);
int filp_close(struct file *filp, fl_owner_t id)
{
int retval = 0;
…
fput(filp);
return retval;
}
A double-fput() vulnerability 
has been constructed!!!
61
Exploit of CVE-2022-28350
What can we do with a double-fput() vulnerability?
Jann Horn from Google Project Zero has given an answer to this question here, he showed how to write a privileged file 
from a unprivileged process with a double-fput() vulnerability！
Maybe I can use the 
similar strategy to 
exploit the CVE-2022-
28350?
62
My exploit for CVE-2022-28350
Step1: Construct the scene with CVE-2022-28350
fd
file object
fd2
An unprivileged file, for 
example:/sdcard/data/test.txt
Untrusted 
app
63
Step2: try to write the privileged file in a race condition
Thread A
Thread B
write(fd, evil_content, len);
ssize_t vfs_write(struct file *file, const char __user *buf, size_t
count,…)
{
ssize_t ret;
if (!(file->f_mode & FMODE_WRITE))
return -EBADF;
…
ret = rw_verify_area(WRITE, file, pos, count);
…
if (file->f_op->write)
ret = file->f_op->write(file, buf, count, pos);
…
return ret;
}
close(fd);close(fd2);
open(privileged_file_path, O_RDONLY);
file object
The privileged file
write mode check
SELinux check
Succeed in writing the privileged file!
reuse the file object
release the file object
My exploit for CVE-2022-28350
64
Thread A
Thread B
write(fd, evil_content, len);
ssize_t vfs_write(struct file *file, const char __user *buf, size_t
count,…)
{
ssize_t ret;
if (!(file->f_mode & FMODE_WRITE))
return -EBADF;
…
ret = rw_verify_area(WRITE, file, pos, count);
…
if (file->f_op->write)
ret = file->f_op->write(file, buf, count, pos);
…
return ret;
}
close(fd);close(fd2);
open(privileged_file_path, O_RDONLY);
write mode check
SELinux check
reuse the file object
release the file object
The tiny race window is still a challenge:
race window
Succeed in writing the privileged file!
file object
The privileged file
My exploit for CVE-2022-28350
65
Try to widen the race window with the method given by Jann Horn:
Thread A
Thread B
Thread C
read()
if (!(file->f_mode & FMODE_WRITE))
return -EBADF;
…
ret = rw_verify_area(WRITE, file, pos, 
count);
ret = file->f_op->write(file, buf, count, pos);
write mode check
SELinux check
close(fd);close(fd2);
open(privileged_file_path, O_RDONLY);
write()
[pinned to CPU 1]
[idle priority]
[pinned to CPU 1]
[normal priority]
[pinned to CPU 2]
[normal priority]
Succeed in writing the privileged file!
My exploit for CVE-2022-28350
66
The exploit will succeed in a big chance  :
Tested on an affected Android 12 device
Attack from an untrusted app
My exploit for CVE-2022-28350
67
Supplement 
 Exploit of CVE-2022-28350
• UAF caused by race condition in fd export operation
• Fd type confusion caused by race condition in fd import operation
 Small race windows can be exploitable!
68
UAF caused by race condition in fd export operation
static long dev_ioctl(struct file *filp, unsigned int cmd, unsigned long 
arg) 
{
switch(cmd) {
case UAF_TEST:
{
int fd;
struct file *f;
void *cxt = kzalloc(128, GFP_KERNEL);
…
fd = get_unused_fd_flags(O_RDWR);
…
f = anon_inode_getfile("DEMO", &demo_fops, cxt, 
O_RDWR);
…
fd_install(fd, f);
*(unsigned long *)(f->private_data) = 0xdeadbeef;
return put_user(fd, (int __user *)arg);
}
…
static int demo_release(struct inode *nodp, struct file *filp)
{
kfree(filp->private_data);
return 0;
}
static const struct file_operations demo_fops = {
.owner          = THIS_MODULE,
.open           = demo_open,
.release        = demo_release
};
A typical issue with a tiny race window:
Very tiny race 
windows!!!
69
Try to trigger the UAF:
User Space
Kernel space
file
Thread A
fd_install(fd, f);
*(unsigned long *)(f->private_data) = 
0xdeadbeef;
Thread B
close(fd);
UAF
It is really hard to hit the race 
because of tiny race window 
tiny race window
UAF caused by race condition in fd export operation
70
If we want to exploit the issue:
User Space
Kernel space
file
Thread A
fd_install(fd, f);
*(unsigned long *)(f->private_data) = 
0xdeadbeef;
Thread B
close(fd);
evil write
We can barely hit the race 
because these operations are too 
slow for the tiny race window 
Open many files to try to reuse the 
released file object
Release file object
Heap spray
tiny race window
UAF caused by race condition in fd export operation
71
Try to widen the race window with the method given by Jann Horn:
Thread A
Thread B
Thread C
read()
fd_install(fd, f);
*(unsigned long *)(f->private_data) = 0xdeadbeef;
close(fd);
Open many files to try to reuse the 
released file object;
write()
[pinned to CPU 1]
[idle priority]
[pinned to CPU 1]
[normal priority]
[pinned to CPU 2]
[normal priority]
Evil write succeeds!
UAF caused by race condition in fd export operation
72
*(unsigned long *)(f->private_data) = 
0xdeadbeef;
binder file
void *private_data
binder_proc
0xdeadbeef
UAF caused by race condition in fd export operation
We have a big chance to hit the race and turn the issue to a memory corruption:
73
Supplement 
 Exploit of CVE-2022-28350
• UAF caused by race condition in fd export operation
• Fd type confusion caused by race condition in fd import operation
 Small race windows can be exploitable!
74
Fd type confusion caused by race condition in fd import operation
CVE-2022-21772
TEEC_Result TEEC_RegisterSharedMemory(struct TEEC_Context *ctx,
struct TEEC_SharedMemory *shm)
{
int fd;
size_t s;
struct dma_buf *dma_buf;
struct tee_shm *tee_shm;
…
fd = teec_shm_alloc(ctx->fd, s, &shm->id);
…
dma_buf = dma_buf_get(fd);
…
tee_shm = dma_buf->priv;
…
shm->shadow_buffer = tee_shm->kaddr;
…
return TEEC_SUCCESS;
}
import the dma-buf fd to get dma_buf
reference the “dma_buf->priv” as tee_shm
void *priv;
dma_buf
file
void *private_data;
tee_shm
create a specific dma-buf fd
75
create a specific dma-buf fd:
fd = teec_shm_alloc(ctx->fd, s, &shm->id);
User Space
Kernel space
Import the dma-buf fd to get dma_buf：
dma_buf = dma_buf_get(fd);
reference the “dma_buf->priv”：
tee_shm = dma_buf->priv;
close(fd);
fd = create_a_diff_dma_buf_fd();
fd type confusion happens!
Thread A
Thread B
recreate the fd
race window
We can hardly hit the 
race because the 
operations are too slow
for the race window
Fd type confusion caused by race condition in fd import operation
76
create a specific dma-buf fd:
fd = teec_shm_alloc(ctx->fd, s, &shm->id);
User Space
Kernel space
Import the dma-buf fd to get dma_buf：
dma_buf = dma_buf_get(fd);
reference the “dma_buf->priv”：
tee_shm = dma_buf->priv; fd type confusion happens!
Thread A
Thread B
recreate the fd
race window
We only want to finish the work:
fd_array[fd] = another dma_buf file
Are there any other 
syscalls which can 
finish this work 
faster?
Fd type confusion caused by race condition in fd import operation
77
Syscall:dup2(int oldfd, int newfd)
static int do_dup2(struct files_struct *files,
struct file *file, unsigned fd, unsigned flags)
__releases(&files->file_lock)
{
…
rcu_assign_pointer(fdt->fd[fd], file);
…
if (tofree)
filp_close(tofree, files);
return fd;
…
}
fd_array[fd] = file
release the old file
dup2() can finish the “fd_array[fd] = another dma_buf file” much faster !
Fd type confusion caused by race condition in fd import operation
78
create a specific dma-buf fd:
fd = teec_shm_alloc(ctx->fd, s, &shm->id);
User Space
Kernel space
Import the dma-buf fd to get dma_buf：
dma_buf = dma_buf_get(fd);
reference the “dma_buf->priv”：
tee_shm = dma_buf->priv; fd type confusion happens!
Thread A
Thread B
recreate the fd
race window
dup2(diff_dma_buf_fd, fd);
int diff_dma_buf_fd = 
create_a_diff_dma_buf_fd();
Fd type confusion caused by race condition in fd import operation
79
void ion_buffer_destroy(struct ion_buffer *buffer)
{
…
buffer->heap->ops->free(buffer);
vfree(buffer->pages);
kfree(buffer);
}
void *priv;
dma_buf
file
void *private_data;
ion_buffer
fd
struct ion_heap *heap;
memory corruption
We have a big chance to hit the race and turn the issue to a memory corruption:
Fd type confusion caused by race condition in fd import operation
80
Thank you!
81