一样工作， 其中一条线是 DMA 请求(DRQ)线， 另 一条则是 DMA 确认(DACK)线。 不需要 CPU 帮
助就可以直接交换实际存储器中数据的设备使用 DMA 来管理这样的访问 。 通过使用 DMA 的 DRQ
线 ， 某个设备通知 CPU 希望直接访问(可能是读、 写或读写组合)另一个设备(通常是实际的存储器)。
CPU 授权访问 ， 随后允许这个访问独立进行 ， 同时阻止对所涉及内 存位置的其他访问。 直接访问 完
成后， 设备使用 DACK 线通知 CPU 可 以再次允许先前被阻止的、 对相关内存位置的访问。 与要求
CPU 调停访问和允许 CPU 在 内 存访 问进行中处理其他任务相比， 直接访问 更为快速。 DMA 常用于
准许硬盘驱动器、 光驱、 显卡和多媒体卡管理与实际存储器之间的大量数据传输。 从配置的角度看，
管理 DMA 地址以保持设备地址的唯一性以及确认这样的地址只用于 DMA 信号发送， 是非常重要
的 。 从安全性的角度看， 只有操作系统才能够调停 DMA 的分配以及访 问 I10 设备的 DMA 的使用 。
如果理解了 通用 的IRQ分配， 并且理解了 存储映射I10和DMA的工作原理以及相关的安全问题，
那么就足以应对CISSP考试。 如果还没有达到这个程度， 那么还需要继续学习相关知识。 此时， PC
Guide网站上对系统存储器的完美概述(www.pcguide.com/ref7ram/)能够提供你需要掌握的所有内容。
9.1 .6 固件
" 固件 " (在某些范围 内也被称为做码)这个术语被用于描述在ROM芯片中存储的软件。 这种软
件很少被更改(只要软件被存储在与EPROMlEEPROM不 同的真正的ROM芯片上， 那么实际上从不更
改)， 并且经常被用于驱动计算设备的基本计算操作。 有两种类型的固件: 在主板上的BIOS以及通
233
CISSP 官方学 习指南(第 7 版)
用的内部或外部固件。
1 . 8108
基本输入输出系统(Basic InputJOutput System， BIOS)包含独立于操作系统的原始指令， 这些指
令被用于启动计算机和从磁盘加载操作系统。 BIOS 被包含在一个国件设备中 ， 在启动时能够由计
算机立即访问 。 在大多数计算机中 ， BIOS 被存储在 EEPROM 芯片上以帮助版本升级。 BIOS 的升
级过程被称为 " 闪存 BIOS "。
曾经有几个恶意代码被嵌入到 BIOS/固件中 的例子。 还有一类攻击被称为 phlas恤咚， 此攻击会
恶意更改官方 BIOS 或固件， 把恶意代码安装到设备中 ， 使其可被远程控制或具备其他的恶意功能。
自 20 1 1 年 以来， 大多数系统制造商己通过 四FI(Unified Extensible Firmware Interf町， 统一可
扩展固件接口)取代了传统系统主板的 BIOS。 四FI 是硬件和操作系统之间的一种更先进的接口 ， 但
保持了 对传统 BIOS 服务的支持。
2. 设备固件
为了完成任务， 许多硬件设备(如打印机和调制解调器)还需要一些有限的处理能力 ， 以便最小
化操作系统 自身的负担。 在许多情况下 ， 这些 " 迷你型" 操作系统完全被包含在相应设备上的固件
芯片内 。 与计算机的 BIOS 一样， 设备固件往往被存储在 EEPROM 设备上， 从而可以在需要时进行
更新。
9.2 基于客户端
基于客户端漏洞会使用户及其数据和系统面临遭受攻击和破坏的风险。 客户端攻击是能够损害
客户 的任何攻击类型。 一般情况下， 当讨论攻击时 ， 攻击的主要 目 标是服务器或服务器端组件。 客
户 端或客户端集中攻击的 目 标是客户机本身或客户机上的进程。 客户端攻击的一个常见例子是恶意
网站， 它们将恶意的移动代码(如 applet)通过脆弱的客户端浏览器传送到客户端。 客户端攻击可以发
生在任何通信协议上， 而不只是Hπ?。 另一类基于客户端的潜在漏洞， 是本地缓存中毒的风险。
9.2. 1 applet
上面己经介绍过， 代理是用户系统发送的、 能够对远程系统上存储的数据进行查询和处理的代
码对象。 applet 执行相反的功能， 这些代码对象被从服务器发送至客户端以便执行某些操作。 事实
上 ， applet 实 际上是一些 自 包含 的小 型程序 ， 这些程序的执行独立于发送它们 的服务器。
234
设想有一台 Web 服务器 ， 它为 W巳b 用户提供多种财务工具。 其中一个工具可能是抵押计算器，
这个工具能够处理用户 的财务信息， 并且基于贷款本金和期限以及贷款人的信用信息提供月 抵押付
款。 这些数据并非在服务器上进行处理， 然后向 客户端系统返回结果， 而是由远程 Web 服务器向本
地系统发送一个可以 自 己执行这些计算的 applet。 这为远程服务器和终端用户 提供 了很多优点 :
• 处理压力被转移至客户端 ， Web 服务器上的 资源得到了 释放， 从而能够处理更多用户 的
请求。
• 客户端可以使用本地资源处理后得到数据 ， 而不是等待远程服务器的响应。 在很多情况下，
这可 以 更快地响应对输入数据的修改。
第 9 章 安全脆弱性、 威胁和对施
• 在正确编程的 applet 中 ， Web 服务器并不接收作为输入信息提供给 applet 的数据， 因此可
以维护财务数据的 安全性和隐私性。
然而， 与代理一样， applet 也引入了许多安全问题。 applet 准许远程系统向本地系统发送执行代
码。 安全管理员必须采取措施， 确保这些代码是安全的， 并且正确地屏蔽恶意活动 。 此外， 如果没
有逐行地分析这些代码， 那么终端用户 就永远不能确定这个 applet 是否包含特洛伊木马组件。 例如，
抵押计算器可能确实在终端用户不知情或没有得到终端用户 准许的情况下向 Web 服务器传送回敏
感的财务信息。
下面将探讨两个常用 的 applet 类型: Java applet 和 ActiveX 控件。
Java applet Java.是由 Sun Microsystems公司 开发的独立于平台 的编程语言。 大多数编程语言使
用 的编译器能够定制生成在特定操作系统中运行的应用程序。 这需要使用多个编译器为所支持的每
个平台生成不同版本的、 单独的应用程序。 Java引 入了Java虚拟机(J\币句， 因此不存在上述限制 。 每
个运行Java代码的系统都会下载本操作系统所支持的NM版本。 只币4随后获得Java代码， 并且将其
转换为指定系统可 以执行的格式。 这种方案的最大优点在于代码可以在操作系统间共享 ， 而不需要
进行修改。 Java applet是在Internet上传输的简短的Java牙呈序， 以便在远程系统上执行各种操作。
在 Java 平台的设计过程中 ， 安全性是首要的考虑因素， 并且 Sun 公司 的开发团队创建了 " 沙箱 "
的概念， 从而对 Java 代码施加特权限制 。 沙箱将 Java 代码对象与操作系统的其他部分隔离开， 并
且强制实施关于对象可访问 资源的严格规则 。 例如， 为了防止 Java applet 窃取信息， I少箱会禁止 Java
applet 从内存区域(专门 为其分配的区域除夕阳中检索信息 。 遗憾的是， 虽然沙盒通过 Java 减少了 恶
意事件的种类， 但是还存在其他很多 己被广泛利用 的漏洞 。
ActiveX 控件 ActiveX 控件是 Microsoft 公司针对 Sun 公司 的 Java applet 的应对产品。 ActiveX
控件与 Java applet 的操作形式很相似， 但使用多种语言中 的一种， 包括 Visual Ba町、 c、 C++和 Java。
在 Java applet 和 ActiveX 控件之间存在两种主要的区别。 首先， ActiveX 控件使用 Microsoft 公司专
有的技术， 因此， 只 能在运行 Microsoft 浏览器的系统上执行。 其次， ActiveX 控件不受 Java applet
中沙箱的限制 ， 它对 Wmdows 操作系统环境具有全部的访问权限， 并且可以执行很多特权操作 。 因
此， 在决定下载执行哪种 ActiveX 控件时必须采取特殊的预防措施。 很多安全管理员 已经采取了 稍
微有些苛刻的态度 ， 也就是禁止从某些可信站点之外的所有站点下载任何 ActiveX 内 容。
Microsoft 已经宣布和发布新的浏览器代码 ， 称为斯巴达项 目 。 这种新的浏览器将不包括对
ActiveX 控件的支持， 而计划推出 的 Intemet Explorer 1 0 还包括 ActiveX， 这表明 Microso企 也可能要
淘汰 ActiveX。
9.2.2 本地缓存
本地缓存是暂时存储在客户端上的任意内容， 用于将来重新使用 。 一个典型的客户端上有许多
本地缓存， 包括 ARP 缓存、 DNS 缓存以及互联网文件缓存。 ARP 缓存投毒攻击由攻击者回应 ARP
广播查询并发送伪造的回复而引发。 如果客户端在有效的 回复之前收到错误的回复， 那么虚假的应
答将用来填充 ARP 缓存， 而真实的回复将被看成外面的开放查询而被丢弃。 ARP 缓存的动态内容，
不论是否中毒或合法， 都将一直缓存直到发生超时(通常是 1 0 分钟)0 ARP 为 了制作数据传输的 以太
网报头， 而将 E 地址解析为相应的 MAC 地址。 一旦一个 IP 到 MAC 地址的映射不在缓存内， 那么
攻击者在客户端执行 ARP 广播查询时就会得到另一个机会去毒害 ARP 缓存。
ARP 缓存投毒的第二种形式是创建静态ARP 实体， 这通过 ARP 命令执行而且必须是在本地执
235
236
CISSP 官方学习指南(第 7 版)
行 。 但这很容易通过木马、 缓冲区溢出或社会工程攻击在客户端完成。 静态ARP 实体是永久性的，
即便系统重新启动。 一旦发生ARP 投毒， 无论是针对永久实体还是动态条 目 ， 客户端传输的数据流
都将发送给非预期的其他系统。 这是由于 E 地址被映射到错误或不 同的硬件地址(即 MAC 地址)造
成的。 ARP 缓存投毒或 ARP 投毒是中 间人攻击的 手段之一 。
另一种比较流行的中间人攻击方式是通过 DNS 缓存投毒。类似于ARP 缓存 ， 一旦客户端从 DNS
服务器收到响应， 响应将被缓存并用于将来使用 。 如果虚假信息可以反馈到缓存中， 那么重定向通
信是很容易的。 有许多可以执行 DNS 缓存中毒的手段， 包括主机投毒、 授权 DNS 服务器攻击、 缓
存 DNS 服务器攻击、 DNS 查找地址改变以及 DNS 查询欺骗。
主机文件是静态文件并可在支持 TCPIlP 协 议的系统中找到， 其中包含域名和关联 E 地址的硬
编码索 引 。 虽然主机文件今天主要被用于动态 DNS 查询系统， 但仍可作为后备措施或强制性手段。
管理员或黑客可以在主机文件中添加内容， 在 FQDN(Fully Qualified Domain Name， 完全合格的域
名 )和 E 地址选择之间进行设置。 如果攻击者能够将虚假信息存储到主机文件中， 那么 当系统启动
时 ， 主机文件的内容将被读入内存， 它们将被优先考虑。 与动态查询不同， 动态查询最终将超时并
从缓存中失效， 而主机文件中 的条 目 是永久生效的 。
授权 DNS 服务器攻击的 目 的是改变原有主机系统的 FQDN 原始记录 。 授权 DNS 服务器拥有文
件区域或数据库域。 如果原始数据集被改变， 那么最终这些变化将在整个互联网上传播开来。 然而，
对授权 DNS 服务器的攻击通常会很快被发现， 所 以很少能导致漏洞蔓延 。 因此， 大多数攻击者将
目 光转 向缓存 DNS 服务器 。 缓存 DNS 服务器可以是任意 DNS 系统， 它们缓存从其他 DNS 服务器
获得的 DNS 信息。 大多数公司 和 ISP 向他们的用户提供缓存 DNS 服务器。 托管在缓存 DNS 服务
器上的 内容不会被世界范围 内 的安全团体所关注 ， 而是由当地 ISP 维护。 因此， 对缓存 DNS 服务器
的攻击可悄然发生直到一段时候后才被发现。 有关缓存 DNS 服务器攻击如何发生的详细信息 ， 可
参见 h即://unixwiz.net/techtips/i伊ide-kaminsky-出S呐均1.html 网址上的 " Kaminsky DNS 漏洞图解指
南 "。 虽然这些攻击都集中在 DNS 服务器， 但它们将最终影响客户端。 一旦客户端进行动态 DNS
解析， 从授权 DNS 服务器或缓存 DNS 服务器接收到的信息将被暂时存储在客户端的本地 DNS 缓
存中。 如果信息是虚假的 ， 那么客户端的 DNS 缓存就中毒 了 。
DNS 投毒四分之一的例子集中在发送另一个 E 地址给客户端作为 DNS 服务器， 为客户端提供
域名查询服务。 DNS 服务器地址通常是通过 DHCP 分配给客户端的， 但也可以静态分配。 即使所有
DHCP 指定的 IP 配置的其他元素 已经分配， 也仍然可以在本地修改静态分配的 DNS 服务器地址。
攻击改变客户端的 DNS 服务器查询地址可以通过脚本来执行(类似于前面提到的 ARP 攻击)或直接
攻击 DHCP 服务器。 一旦客户端使用错误的 DNS 服务器， 它们的查询将被发送到黑客控制的 DNS
服务器， 这将会得到 己 中毒的响应结果。
DNS 投毒五分之一的例子为 DNS 查询欺骗。 当这种攻击发生时 ， 黑客可以监听客户端向 DNS
服务器发送查询。 攻击者然后发送回虚假的信息响应。 如果客户端接受虚假的响应， 它们会对这些