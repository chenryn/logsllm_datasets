import os
import urllib
import urllib2
from PIL import Image
import io
def fix_colors(im):
    colors_distribution = im.getcolors(1000)
    ordered = sorted(colors_distribution, key=lambda x: x[0], reverse=True)
    best_colors = [color[1] for color in ordered]
    if (255, 255, 255) in best_colors:
        best_colors.remove((255, 255, 255))
    if (0, 0, 0) in best_colors:
        best_colors.remove((0, 0, 0))
    best_colors = best_colors[:2]
    pixels = im.load()
    for i in range(im.size[0]):
        for j in range(im.size[1]):
            color = pixels[i, j]
            if color not in best_colors:
                pixels[i, j] = best_colors[0]
    return best_colors[0]
def black_and_white(im, filling):
    black = (0, 0, 0)
    white = (255, 255, 255)
    pixels = im.load()
    for i in range(im.size[0]):
        for j in range(im.size[1]):
            color = pixels[i, j]
            if color == filling:
                pixels[i, j] = white
            else:
                pixels[i, j] = black
                # im.show()
def get_coords(im):
    pixels = im.load()
    black = (0, 0, 0)
    xs = []
    ys = []
    for i in range(im.size[0]):
        for j in range(im.size[1]):
            color = pixels[i, j]
            if color == black:
                xs.append(i)
                ys.append(j)
    return min(xs), max(xs), min(ys), max(ys)
def test_configuration(im_pixels, start_x, start_y, symbol_len, symbol_h, symbol_pixels, symbol_x_min, symbol_y_min):
    counter = 0
    black = (0, 0, 0)
    for i in range(symbol_len):
        for j in range(symbol_h):
            if im_pixels[start_x + i, start_y + j] == black:
                if im_pixels[start_x + i, start_y + j] == symbol_pixels[symbol_x_min + i, symbol_y_min + j]:
                    counter += 1
                else:
                    counter -= 1
            elif symbol_pixels[symbol_x_min + i, symbol_y_min + j] == black:
                counter -= 1
    return counter
def get_matching(im_pixels, im, x_min, x_max, y_min, y_max, symbol, symbol_pixels, symbol_x_min, symbol_len,
                 symbol_y_min,
                 symbol_h):
    results = []
    for start_x in range(x_min - 1, x_max - symbol_len + 1):
        for start_y in range(y_min - 1, y_max - symbol_h + 1):
            if (start_x + symbol_len  0 and im.size[1] > 0:
            # im.show()
            res = get_solution(im)
            if res is not None:
                print res
                params = {'captcha': res}
                encoded_params = urllib.urlencode(params)
                f = opener.open("http://10.13.37.10/", encoded_params)
                webpage = f.read()
                print(webpage)
                if "didn't" in webpage:
                    imtmp.show()
            else:
                print "skipping due to a low score"
    except:
        pass