came from a normal Google search.
7. DEFENSES
In Section 7.1 we discuss existing, known defenses that
can prevent the planting of evidence by web-services (as dis-
cussed in Section 3). We then brieﬂy summarize the risky
browser features that allow the attacker to hide the plant-
ing of evidence in Section 7.2.
In Section 7.3, we discuss
the main challenge of identifying framing ﬁles and present
countermeasures.
7.1 Web-Service Defenses
The framing attacks in Section 3 all exploited the fact that
websites allow cross-site requests for seemingly harmless op-
Figure 3: Covering traces. The victim sends a request to
the attacker’s website. The attacker replies with a web page
that sends cross-site requests to diﬀerent websites and loads
web pages in iframes. Then, the malicious page sends an ad-
ditional request to reload itself in a hidden iframe, returning
benign page and script. The browser overwrites the origi-
nal cached page and script with the newly received (benign)
versions.
to avoid these headers and then show that sometimes it is
possible to send the requests from other websites.
6.2.1 Manipulating HTTP Headers
In spite of the fact that the attacker controls the content
of the HTTP requests, the browser is the one that controls
their headers. Some of these headers contain indications of
the cross-site requests that the attacker may want to avoid.
Referer header. The Referer header is attached by de-
fault to requests and serves to indicate the URL where the
request was initiated. However, the Referer header is often
omitted. For example, many companies strip this header in
the gateway of their network to avoid the information leaked
by this header. An attacker can easily test whether the Ref-
erer header is stripped by sending a cross-site request to a
server she owns. Furthermore, the attacker can cause the
browser not to send a Referer, using standard techniques.
For example, if the third-party site is insecure (using http
rather than https), sending the request to the third-party
site from a protected (https) framing-site, would not include
the Referer header.
Origin header [7]. The fact that the Referer header is
often omitted, alongside its privacy problems, was a major
motivation for introducing the Origin header; this has simi-
lar functionality but only identiﬁes the domain.
Browsers that support the Origin header are expected
to identify the origin domain and attach it to HTTP re-
quests. However, we found that, at least currently, some
browsers such as FireFox (as of version 37.0.2) and IE (ver-
sion 11.0.18), do not attach the Origin header to POST
requests that are sent via forms and are targeted to hid-
den iframe. It is also possible to send GET requests from
the IMG tag, such that only the Accept header (see below)
might be seen as suspicious.
It is also possible to load the web-service’s URL into a
new window (and immediately close it) as described in Sec-
tion 4.3 without generating suspicious header values. See
examples in [15].
168
erations such as search, which do not change the state in
the server in a ‘meaningful way’. An obvious solution would
be to prevent all cross-site requests, using existing, well-
known cross-site request forgery (CSRF) countermeasures,
see [11, 21, 29].
One popular defense is to identify the ‘calling’ third-party
site, using the Referer or Origin HTTP request headers.
Another defense uses an (unpredictable) anti-CSRF tokens,
sent with the request from the webpage, which is then val-
idated by the server. All the websites we tested use such
tokens to protect against CSRF attacks for ‘sensitive opera-
tions’. Websites which intentionally allow some (‘harmless’)
cross-site requests, may, at least, maintain records of the
fact that a request was received from a speciﬁc third-party
domain.
7.2 Dealing with Risky Browser Features
In Section 4 we discussed several browser features that
allow hidden ﬁle download and browser history injection.
The results of the experiment described in Section 4.2.1
show that automatic download can be used for eﬀective
framing attacks because users generally do not bother to
delete downloaded ﬁles. Two countermeasures can improve
the current situation: (1) removing the automatic download
from being the default option, and (2) adding a deletion
option to the downloads bar so the users can easily (perma-
nently) delete ﬁles without having to open the downloads
folder.
To inject history into the browser, we suggested opening a
website and immediately closing it. While it seems reason-
able to allow opening a single window per click event, the
ability to close windows might not be that obvious. We have
no data about the extent of use for closing windows, so it is
diﬃcult to claim that it should be completely blocked. How-
ever, it seems reasonable to block one window from closing
a window that loads a page with a diﬀerent origin. Simi-
lar to the X-Frame-Options header, which limits loading of
web pages in an iframe, it is possible to set a new HTTP
response header that will block or restrict pages from closing
windows that arrive with a new header.
7.3 Blocking File Manipulations
In Section 4 we discussed framing using ﬁles saved by the
browser in the cache and in the ‘download’ folder, and fram-
ing via the browser history. Later, in Section 5, we showed
that other manipulations can be done to unlink the down-
loaded ﬁles from the browser. We believe that guarding
against these threats may require a new defense mechanism.
We propose such a mechanism below.
Protection against framing evidence on the computer
should meet two challenges: (1) Overcoming cache browser
poisoning that is done without leaving traces. (2) Prevent-
ing framing ﬁles from being left on the hard disk.
Preventing cross-site requests or the loading of web pages
in iframes seems impractical. Changing the cache mech-
anism to also save old requests and avoid covering traces
would change the cache to an advanced history feature. This
is also a bad idea and might not prevent false-evidence from
being placed on the disk.
The crux of the framing by ﬁles is the lack of records show-
ing details about the requests that initiated their creation.
It seems that a simple solution, with negligible overhead,
would be to save for each cache entry the details on how
the request was generated. Speciﬁcally, saving the values
of the Referer and Accept headers with each request, seems
suﬃcient to avoid such framing attacks, based on what we
observed. This idea can also be used to protect against fram-
ing via ﬁles stored by the browser. By adding an indication
of the relevant Referer and Accept headers, it is possible
to distinguish between ﬁles downloaded intentionally by the
user and ﬁles downloaded automatically by some site.
For cached ﬁles, this information should be kept together
with the ﬁle itself. This can be done by creating a new
special cache entry ﬁle format that will wrap the current
format together with the origin data. Attaching the origin
data to each cached ﬁle makes it highly unlikely that traces
of several cache entries in the disk would all have their origin
ﬁelds missing. If an incriminating ﬁle is found on the disk,
there would be a good chance that the information about
how it was requested appears there as well.
However, for the attack described in Section 5.2, saving
additional information about the way the ﬁle was created
might not be suﬃcient, because that data might be overwrit-
ten by the attacker. A solution that overcomes this attack
must ensure that the information about the source is linked
to the framing ﬁle or, alternatively, destroys the framing ﬁle
so it cannot be recovered by forensic investigators.
Solutions to the problem can be implemented either at
the ﬁle system level or in the browser. We concentrate on
browser-level solutions, as these are simpler and easier to
deploy. The solution we oﬀer uses wiping techniques.
Browser-level wiping. Wiping is a known technique for
cleaning information from memory. Wiping is usually done
by overwriting the data with zeros or random data. By
completely wiping every overwritten ﬁle, it is impossible to
plant ﬂoating ﬁles. To implement the wiping at the browser
level, one could proceed as follows. A browser about to
overwrite a ﬁle A with a smaller ﬁle B, ﬁrst overwrites A
with a temporary ﬁle of the same length that contains only
random data. Then, the temporary ﬁle is overwritten by
B. Upon deleting a ﬁle from the cache, the browser should
similarly wipe it from the memory.
The overhead caused by wiping does not appear to be sig-
niﬁcant. This is mainly because (1) most of the ﬁles are
small, (2) the wiping is done only on a relatively small frac-
tion of ﬁle creation operations, when a smaller ﬁle overwrites
a larger ﬁle.
8. CONCLUSIONS
We discussed and presented the threat of remote fram-
ing attacks. We showed that it is easy to plant false pieces
of evidence in the victim’s computer, as well as in ‘history’
records kept by third-party websites, including many popu-
lar reputable websites. We also presented defenses that can
be applied to browsers, websites, and forensic software.
We conﬁrmed that the attacks are eﬀective by testing
‘framed computers’ using popular forensic software and with
the cooperation of forensic experts from ILITA and the Is-
rael Police. In particular, the National Cyber Unit in the
Israel Police informed us that they updated their forensic
procedures following our ﬁndings and their experiments on
machines that were ‘framed’ by our attacks.
Although this amount of evaluation and feedback is in-
suﬃcient to draw conclusions, we consider this an indica-
tion that the cross-site-planted, fake evidence could mislead
forensic experts.
169
Framing is an interdisciplinary challenge, and it is our
hope that this paper will help stimulate discussion and co-
operation among experts in security, forensics, and legal, to
understand this challenge and how it can best be met.
9. ACKNOWLEDGMENTS
We would like to thank Yaniv Azani, Koby Furlaiter and
the National Cyber Unit of the National Crime Unit (Lahav
433) in the Israel Police, and Pini Cohen, Oren Butchmits
and the Computer Forensics Lab within the Department of
Investigations in the Israeli Law, Information and Technol-
ogy Authority (ILITA) for their huge help in the evaluation
of our ﬁndings. We also thank Hezi Moriel for his useful
feedback. This research was supported by grants from the
Ministry of Science and Technology, Israel, and from the
Israeli Science Foundation.
10. REFERENCES
[1] Tor2web: browse the anonymous internet.
http://tor2web.org.
[2] Gmail CSRF Security Flaw. http://ajaxian.com/
archives/gmail-csrf-security-flaw, 2007.
[3] M. Aguilar. If You Kill Someone, Don’t Google How
to Do It First. http://gizmodo.com/5916184/
if-you-kill-someone-dont-google-how-to-do-it-first,
June 2012.
[4] Alexa Web Information Company. Top Sites in United
States (April 2015).
http://www.alexa.com/topsites/countries/US.
[5] S. Antonatos, P. Akritidis, V. the Lam, and K. G.
Anagnostakis. Puppetnets: Misusing Web Browsers as
a Distributed Attack Infrastructure. ACM
Transactions on Information and System Security,
12(2), 2008.
[6] AP. Framed for child porn - by a pc virus. Online.
http://www.nbcnews.com/id/33778733#.U2Ana l tLV.
[7] A. Barth, C. Jackson, and J. C. Mitchell. Robust
defenses for cross-site request forgery. In Proceedings
of the 15th ACM conference on Computer and
communications security, pages 75–88. ACM, 2008.
[8] E. Casey. Digital evidence and computer crime:
forensic science, computers and the internet.
Academic press, 2011.
[9] F. Cohen. Challenges to digital forensic evidence. Fred
Cohen and Associates, 2008.
[10] D. . C. Court of Appeal, First District. The PEOPLE,
Plaintiﬀ and Respondent, v. Lee David HARBERT,
Defendant and Appellant. http://caselaw.findlaw.
com/ca-court-of-appeal/1089011.html, 2009.
[11] A. Czeskis, A. Moshchuk, T. Kohno, and H. J. Wang.
Lightweight server support for browser-based csrf
protection. In Proceedings of the 22nd international
conference on World Wide Web, pages 273–284.
International World Wide Web Conferences Steering
Committee, 2013.
[12] F. D. District Court of Appeal of Florida. Justin
Mertis BARBER, Appellant, v. STATE of Florida,
Appellee. http://caselaw.findlaw.com/
fl-district-court-of-appeal/1164299.html, 2006.
[13] A. J. Ferguson. Fostering e-mail security awareness:
The west point carronade. EDUCASE Quarterly, 2005.
[14] R. Fielding, J. Gettys, J. Mogul, H. Frystyk,
L. Masinter, P. Leach, and T. Berners-Lee. Hypertext
Transfer Protocol – HTTP/1.1. RFC 2616 (Draft
Standard), June 1999.
[15] N. Gelernter, Y. Grinstein, and A. Herzberg.
Cross-Site Framing Attacks. Demos site.
https://sites.google.com/site/framingattacks/.
[16] Y. Gilad, A. Herzberg, and H. Shulman. Oﬀ-path
hacking: The illusion of challenge-response
authentication. IEEE Security & Privacy, 12(5):68–77,
2014.
[17] Google. Incognito Mode (browse in private). https:
//support.google.com/chrome/answer/95464?hl=en.
[18] S. V. Hart, J. Ashcroft, and D. J. Daniels. Forensic
examination of digital evidence: a guide for law
enforcement. National Institute of Justice NIJ-US,
Washington DC, USA, Tech. Rep. NCJ, 199408, 2004.
[19] D. Irani, M. Balduzzi, D. Balzarotti, E. Kirda, and
C. Pu. Reverse social engineering attacks in online
social networks. In Detection of intrusions and
malware, and vulnerability assessment, pages 55–74.
Springer, 2011.
[20] T. N. Jagatic, N. A. Johnson, M. Jakobsson, and
F. Menczer. Social phishing. Communications of the
ACM, 50(10):94–100, 2007.
[21] N. Jovanovic, E. Kirda, and C. Kruegel. Preventing
cross site request forgery attacks. In Securecomm and
Workshops, 2006, pages 1–10. IEEE, 2006.
[22] S. Morris. Vincent Tabak ’researched killings and
sentences after Joanna Yeates’s death’.
http://www.theguardian.com/uk/2011/oct/19/
vincent-tabak-joanna-yeates-death, October 2011.
[23] U. S. C. of Appeals. UNITED STATES of America,
Plaintiﬀ-Appellee, v. Matthew R. SCHUSTER,
Defendant-Appellant. http://caselaw.findlaw.com/
us-7th-circuit/1203561.html, October 2006.
[24] RIAA. Piracy Online - The Law.
http://www.riaa.com/physicalpiracy.php?
content_selector=piracy_online_the_law.
[25] A. Rocha, W. J. Scheirer, T. E. Boult, and
S. Goldenstein. Vision of the unseen: Current trends
and challenges in digital image and video forensics.
ACM Comput. Surv, 43(4):26, 2011.
[26] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson.
Busting frame busting: a study of clickjacking
vulnerabilities at popular sites. IEEE Oakland Web,
2:6, 2010.
[27] M. Spencer. Sledgehammer and ergenekon: Case
studies in sophisticated digital forgery. In The United
States Cyber Crime Conference, 2014.
[28] X. Xing, W. Meng, D. Doozan, A. C. Snoeren,
N. Feamster, and W. Lee. Take this personally:
attacks on personalized services. In Proceedings of the
22nd USENIX conference on Security, pages 671–686.
USENIX Association, 2013.
[29] M. Zhou, P. Bisht, and V. Venkatakrishnan.
Strengthening xsrf defenses for legacy web
applications using whitebox analysis and
transformation. In Information Systems Security,
pages 96–110. Springer, 2011.
170