-x  执行程序
-i 交互式操作
\# ausearch -ts today -k passwd_change
\# ausearch -ts 3/12/07 -k passwd_change
-ts 指定时间后的log (start time)
-te 指定时间前的log (end time)
56 ausearch -k passwd_change
57 ausearch -k disk_on
59 ausearch -f /etc/passwd
60 ausearch -f /etc/passwd -x vim
## 审计日志分析
\[root@client50 \~\]# useradd audit
\[root@client50 \~\]# ausearch -k passwd_change
time-\>Fri Mar 8 10:16:08 2019
type=PROCTITLE msg=audit(1552011368.758:282):
proctitle=75736572616464006175646974
type=PATH msg=audit(1552011368.758:282): item=0 name=\"/etc/passwd\"
inode=17357461 dev=fd:00 mode=0100644 ouid=0 ogid=0 rdev=00:00
obj=system_u:object_r:passwd_file_t:s0 objtype=NORMAL
type=CWD msg=audit(1552011368.758:282): cwd=\"/root\"
type=SYSCALL msg=audit(1552011368.758:282): arch=c000003e syscall=2
success=yes exit=4 a0=7f27f80a1432 a1=80000 a2=1b6 a3=24 items=1
ppid=1631 pid=2556 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0
sgid=0 fsgid=0 tty=pts0 ses=2 comm=\"useradd\" exe=\"/usr/sbin/useradd\"
subj=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
key=\"passwd_change\"
![](media/image5.png){width="4.126388888888889in"
height="2.7368055555555557in"}
![](media/image6.png){width="4.104166666666667in"
height="2.0868055555555554in"}
# 网站服务安全
## nginx服务安全
安装时候去掉不需要的模块
./configure \--without(禁用模块) \--with(加载模块)
## nginx服务,自动索引模块
**未取消自动索引模块的**
\[root@client50 nginx-1.12.2\]# ./configure \--help #查看模块
\[root@client50 nginx-1.12.2\]# ./configure \--help \| grep -i autoindex
\--without-http_autoindex_module disable ngx_http_autoindex_module
68 tar -xf nginx-1.12.2.tar.gz
69 ls
70 cd nginx-1.12.2/
71 ls
72 yum -y install gcc pcre-devel openssl-devel
73 ./configure \--help
74 ./configure \--prefix=/usr/local/nginx
75 make && make install
76 ./configure \--help \| grep -i autoindex
77 vim /usr/local/nginx/conf/nginx.conf
> \.....
server {
autoindex on ;
listen 80;
server_name localhost;
> \...\...
78 /usr/local/nginx/sbin/nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is
ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is
successful
83 mkdir /usr/local/nginx/html/bbs
84 echo 123 \>/usr/local/nginx/html/bbs/a1.html
85 echo 456 \>/usr/local/nginx/html/bbs/a2.html
86 echo 789 \>/usr/local/nginx/html/bbs/a3.html
87 /usr/local/nginx/sbin/nginx
**未禁用自动索引模块访问bbs目录暴露所有的网页,**
![](media/image7.png){width="4.713888888888889in"
height="1.351388888888889in"}
114 /usr/local/nginx/sbin/nginx -stop
115 ./configure \--prefix=/usr/local/nginx
\--without-http_autoindex_module
116 make && make install
117 vim /usr/local/nginx/conf/nginx.conf
> \.....
server {
autoindex on ;
listen 80;
server_name localhost;
> \...\...
118 /usr/local/nginx/sbin/nginx
nginx: \[emerg\] unknown directive \"autoindex\" in
/usr/local/nginx/conf/nginx.conf:36
#因为去掉了without-http_autoindex_module 模块.不能在配置文件nginx.conf
中添加(索引开关)autoindex on ; 的配置,添加了则在启动时报错
重装nginx 并去自动掉索引模块 就报错
\[root@client50 nginx-1.12.2\]# /usr/local/nginx/sbin/nginx
nginx: \[emerg\] unknown directive \"autoindex\" in
/usr/local/nginx/conf/nginx.conf:36
\[root@client50 nginx-1.12.2\]# /usr/local/nginx/sbin/nginx -t
nginx: \[emerg\] unknown directive \"autoindex\" in
/usr/local/nginx/conf/nginx.conf:36
nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed
## nginx修改版本信息(修改源码)
修改版本信息(修改源码)
隐藏版本号信息(server_token off)
\[root@client50 src\]# curl -I http://192.168.4.50
HTTP/1.1 200 OK
Server: nginx/1.12.2 #nginx软件名版本
Date: Fri, 08 Mar 2019 03:28:16 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Fri, 08 Mar 2019 03:10:14 GMT
Connection: keep-alive
ETag: \"5c81dd16-264\"
Accept-Ranges: bytes
## nginx限制并发
\[root@client50 src\]# ./configure \--help \| grep -i limit
-bash: ./configure: 没有那个文件或目录
\[root@client50 src\]# cd ..
\[root@client50 nginx-1.12.2\]# ./configure \--help \| grep -i limit
\--without-http_limit_conn_module disable ngx_http_limit_conn_module
\--without-http_limit_req_module disable ngx_http_limit_req_module
\--without-stream_limit_conn_module disable ngx_stream_limit_conn_module
\--without-http_limit_req_module 默认启用模块,该模块可以降低DDos攻击风险
**修改配置文件,定义并发参数**
\[root@client50 nginx-1.12.2\]# vim /usr/local/nginx/conf/nginx.conf
\....
http {
limit_req_zone \$binary_remote_addr zone=one:10m rate=1r/s;
> \#
\...
server {
limit_req zone=one burst=5; \#
\....
\[root@client50 nginx-1.12.2\]# /usr/local/nginx/sbin/nginx -t
\[root@client50 nginx-1.12.2\]# /usr/local/nginx/sbin/nginx
660 ab -n 10 -c 10 http://192.168.4.50/ #压力测试
![](media/image8.png){width="5.764583333333333in"
height="4.159027777777778in"}
## nginx拒绝非法请求
网站使用的是HTTP协议，该协议中定义了很多方法，可以让用户连接服务器，获得需要的资源。但实际应用中一般仅需要get和post。
具体HTTP请求方法的含义如表-1所示。
![table001](media/image9.png){width="5.879166666666666in"
height="1.8368055555555556in"}
170 curl -i -X GET http://192.168.4.50
171 curl -i -X HEAD http://192.168.4.50
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
http{
server {
listen 80;
#这里，!符号表示对正则取反，\~符号是正则匹配符号
#如果用户使用非GET或POST方法访问网站，则retrun返回444的错误信息
if (\$request_method !\~ \^(GET\|POST)\$ ) {
return 444;
}
}
}
\[root@client50 nginx-1.12.2\]# /usr/local/nginx/sbin/nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is
ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is
successful
\[root@client50 nginx-1.12.2\]# /usr/local/nginx/sbin/nginx
\[root@client50 nginx-1.12.2\]# curl -i -X HEAD http://192.168.4.50
curl: (52) Empty reply from server #使用 HEAD访问则报:来自服务器的空答复
## nginx防止buffer(缓冲区)溢出
当客户端连接服务器时，服务器会启用各种缓存，用来存放连接的状态信息。
如果攻击者发送大量的连接请求，而服务器不对缓存做限制的话，内存数据就有可能溢出（空间不足）。
修改Nginx配置文件，调整各种buffer参数，可以有效降低溢出风险。
有效降低机器Dos攻击风险
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
http{
client_body_buffer_size 1K;
client_header_buffer_size 1k;
client_max_body_size 1k;
large_client_header_buffers 2 1k;
... ...
server {
\.....
}
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
# mariadb数据库服务安全
192 rpm -q mariadb
193 yum -y install mariadb mariadb-server.x86_64
194 systemctl start mariadb.service
195 netstat -unltp \| grep 3306
196 ps -C mysqd
197 ps -C mysqld
## 初始化安全脚本
mysql_secure_installation
\[root@client50 /\]# mysql #连续tab
mysqlbug mysqldumpslow mysql_secure_installation mysql_waitpid
mysqlcheck mysql_find_rows mysql_setpermission
\[root@client50 /\]# mysql_secure_installation
NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!
In order to log into MariaDB to secure it, we\'ll need the current
password for the root user. If you\'ve just installed MariaDB, and
you haven\'t set the root password yet, the password will be blank,
so you should just press enter here.
Enter current password for root (enter for none): \#
OK, successfully used password, moving on\...
Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.
Set root password? \[Y/n\] y \#
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
\... Success!
By default, a MariaDB installation has an anonymous user, allowing
anyone
to log into MariaDB without having to have a user account created for
them. This is intended only for testing, and to make the installation
go a bit smoother. You should remove them before moving into a
production environment.
Remove anonymous users? \[Y/n\] y \#
\... Success!
Normally, root should only be allowed to connect from \'localhost\'.
This
ensures that someone cannot guess at the root password from the network.
Disallow root login remotely? \[Y/n\] y \#
\... Success!
By default, MariaDB comes with a database named \'test\' that anyone can
access. This is also intended only for testing, and should be removed
before moving into a production environment.
Remove test database and access to it? \[Y/n\] y \#
\- Dropping test database\...
\... Success!
\- Removing privileges on test database\...
\... Success!
Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.
Reload privilege tables now? \[Y/n\] y \#
\... Success!
Cleaning up\...
All done! If you\'ve completed all of the above steps, your MariaDB
installation should now be secure.
Thanks for using MariaDB!
## 密码安全
**手动修改MariaDB或MySQL数据库密码的方法：**
\[root@proxy \~\]# mysqladmin -uroot -predhat password \'mysql\'
//修改密码，旧密码为redhat，新密码为mysql
\[root@proxy \~\]# mysql -uroot -pmysql