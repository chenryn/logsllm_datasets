deﬁnition of what it means for a protocol to “protect pri-
vacy” in the honest-but-curious adversary model (see also
e.g.
[10] for deﬁnitions of security against an honest-but-
curious adversary).
In order to construct a private two-party k-means clus-
tering protocol, we will utilize numerous subprotocols which
themselves preserve privacy against an honest-but-curious
adversary. We then use the fact that the composition of se-
cure protocols remains secure (as proven in [5]). The novel
contributions of this paper are the Random Value Protocol
and the description of a method to perform two-party se-
cure division, described in Sections 3.3 and 3.1, respectively.
All of the other subprotocols that we will use perform stan-
dard functionalities, and possible implementations of these
that are secure against an honest-but-curious adversary have
been described by (multiple) other authors. For such func-
tionalities, we will utilize results of other authors (and their
corresponding proofs of privacy and eﬃciency), citing possi-
ble references. A brief description of the subprotocols that
we will use can be found below in Section 2.2. Proving
privacy for our two-party k-means clustering protocol will
therefore be reduced to proving privacy for our two proto-
cols. In Section 2.3 below, we classify protocols that have
a speciﬁed generic form, and prove that such protocols will
be secure in the honest-but-curious adversary model. Pri-
vacy of our Division Protocol and Random Value Protocol
will then follow because they have this generic form. In Sec-
tion 2.1 below, we ﬁrst introduce the cryptographic tools
we will need to guarantee privacy. The casual reader may
wish to skip the description of the cryptographic tools in
Section 2.1 and read only the high-level arguments of secu-
rity in the ﬁrst paragraph of Section 2.3, omitting the formal
deﬁnitions and proofs of privacy in the rest of that section.
2.1 Cryptographic Tools
We will utilize standard cryptographic tools to maintain
privacy in our two-party k-means clustering protocol. It will
be convenient to name our two participating parties, and we
adopt the standard names of “Alice” and “Bob.” We will
ﬁrst utilize an additively homomorphic encryption scheme,
e.g. Paillier ([21]). Thus, for encryptions we assume a mes-
sage space ZN , where N = pq is the product of two K-bit
primes and K is the security parameter. In the protocols
that follow, one of the parties will be responsible for choos-
ing the modulus N (we use the convention that Alice plays
this role), and the opposite party (Bob) will be responsi-
ble for performing the requisite computations on encrypted
data. The encryption scheme is a map E : ZN × H → G,
where H represents some group from which we obtain ran-
domness, and G is some other group. For notational con-
venience, we will write E(m) ∈ G rather than E(m, r).
This encryption scheme is additively homomorphic, so that:
E(m1, r1) + E(m2, r2) = E(m1 + m2, r1 + r2), where each
addition refers to the appropriate group operation in G, ZN ,
or H. (For Paillier, G = Z×
N 2 and thus the group operation is
multiplication). Additionally, the encryption scheme allows
a user to (eﬃciently) multiply by a constant, i.e. for c ∈ ZN ,
anyone can compute: cE(m, r) = E(cm, r′). (For Paillier,
if (N, g) is the public key, then cE(m, r) := (gmrN )c =
gmcrcN = gmc(rc)N = E(cm, r′), where r′ = rc).
2.2 Privacy Protecting Protocols
We list here the generic subprotocols that will be used by
our two-party k-means clustering protocol. All of the below
protocols can be readily implemented using only the Scalar
Product Protocol, and we include possible implementations
in Appendix B. The Scalar Product Protocol is a standard
protocol that has been explored much by other authors; we
will not include an implementation of this protocol in this
paper, but refer the reader to many possible references.
x ∈ Zt
N and y ∈ Zt
determined degree two function f (x, y) =Pt
- Scalar Product Protocol (SPP). This protocol takes in
N , and returns (shares of) some pre-
i=1 cixiyi,
for public constants ci. (See e.g.
[9], where they de-
scribe a protocol that achieves O(tK) communication
complexity, K the security parameter. Other imple-
mentations can be found in [20], [25] and [27].)
- Bigger Than N Protocol (BTNP). Alice and Bob each
hold a value in ZN . This protocol determines if the
sum of their values (considered as a sum in Z, not ZN )
is bigger than N .
- To Binary Protocol (TBP). Alice and Bob have shares
of some value X ∈ ZN . If X = xK . . . x1 is the binary
expansion of X, then this protocol returns shares of xi
i + xB
for each 1 ≤ i ≤ K. In other words, xi = xA
(Mod N ).
i
- Find Minimum of 2 Numbers Protocol (FM2NP). Alice
and Bob share an ordered pair of two numbers. This
protocol returns shares of the location of the smaller
number (0 or 1).
- Find Minimum of k Numbers Protocol (FMkNP). An
extension of the above protocol, where this time as out-
put they receive shares of the vector (0, . . . , 1, . . . , 0),
where the ‘1’ appears in the mth coordinate if the mth
number is smallest.
- Distance Protocol (DistP). Computes the distance be-
tween two (shared) data points in Zd
N . An implemen-
tation of this protocol can be found in [13], which in-
volves running the SPP four times on vectors of length
d. Their protocol thus has communication complexity
O(dK).
- Division Protocol (DivP). Computes the quotient (as
deﬁned below in Section 3.1) of a shared dividend by
a shared divisor.
- Compute γ Protocol, Compute δ∗Protocol and Choose
µ1 Protocol. These will be discussed when they arise
in Sections 3.2, 3.3, and 4.3.1.
2.3 Deﬁnition of Privacy in the
Honest-But-Curious Model
We present ﬁrst the high-level argument for how our pro-
tocols will protect each party’s data. We have one of the
parties (Alice) choose the encryption key, and encrypt all
of her data using this key before sending it to the other
party (Bob). Thus, Alice’s privacy will be guaranteed by
the semantic security assumption of the encryption scheme.
Meanwhile, Bob will also encrypt his data using Alice’s key,
utilize the homomorphic properties of the encryption scheme
to perform the requisite computations, and then blind all of
the outputs he sends to Alice with randomness of his choos-
ing, ensuring that Alice can learn nothing about his data.
We now make these notions precise by ﬁrst providing a
formal deﬁnition of privacy protection in the honest-but-
curious adversary model, and a formal proof of privacy for
the class of protocols that attempt to protect privacy in the
above described manner (both the deﬁnition and technique
of providing privacy in this manner are standard tools used
in MPC literature, see e.g. [10]).
Deﬁnition 1. Suppose that protocol X has Alice com-
pute (and output) the function f A(x, y), and has Bob com-
pute (and output) f B(x, y), where (x, y) denotes the inputs
for Alice and Bob (respectively). Let VIEWA(x, y) (resp.
VIEWB(x, y)) represent Alice’s (resp. Bob’s) view of the
transcript. In other words, if (x, rA) (resp. (y, rB)) denotes
Alice’s (resp. Bob’s) input and randomness, then:
VIEWA(x, y) = (x, rA, m1, . . . , mt),
VIEWB(x, y) = (y, rB, m1, . . . , mt),
and
where the {mi} denote the messages passed between the par-
ties. Also let OA(x, y) and OB(x, y) denote Alice’s (resp.
Bob’s) output. Then we say that protocol X protects pri-
vacy (or is secure) against an honest-but-curious adversary
if there exist probabilistic polynomial time simulators S1 and
S2 such that:
{(S1(x, f A(x, y)), f B(x, y))}
c
≡ {(VIEWA(x, y), OB(x, y))}
(1)
{(f A(x, y), S2(y, f B(x, y)))}
c
≡ {(OA(x, y), VIEWB(x, y))},
(2)
where
c
≡ denotes computational indistinguishability.
With the above deﬁnition of privacy protection, we now
prove the basic lemma that will allow us to argue that our
two-party k-means clustering protocol is secure against an
honest-but-curious adversary.
Lemma 1. Suppose that Alice has run the key generation
algorithm for a semantically secure homomorphic public-key
encryption scheme, and has given her public-key to Bob.
Further suppose that Alice and Bob run Protocol X, for
which all messages passed from Alice to Bob are encrypted
using this scheme, and all messages passed from Bob to Al-
ice are uniformly distributed (in the range of the ciphertext)
and are independent of Bob’s inputs. Then Protocol X is
secure in the honest-but-curious adversary model.
Proof. We prove the privacy protecting nature of Proto-
col X in two separate cases, depending on which party the
adversary has corrupted. To prove privacy, we show that
for all PPT Adversaries, the view of the adversary based on
Alice and Bob’s interaction is indistinguishable to the ad-
versary’s view when the corrupted party interacts instead
with a simulator. In other words, we show that there exist
simulators S1 and S2 that satisfy conditions (1) and (2) from
above.
Case 1: Bob is Corrupted by Adversary. We simulate Al-
ice’s messages sent to Bob. For each encryption that Alice
is supposed to send to Bob, we let the simulator S2 pick
a random element from ZN , and send an encryption of
this. Any adversary who can distinguish between interac-
tion with Alice verses interaction with S2 can be used to
break the security assumptions of E. Thus, no such PPT
adversary exists, which means (2) holds.
Case 2: Alice is Corrupted by Adversary. We simulate
Bob’s messages sent to Alice. To do this, every time Bob
is to send an encryption to Alice, the simulator picks a
random element of ZN and returns an encryption of this.
Again, equation (1) holds due to the fact that Alice cannot
distinguish the simulator’s encryption of a random num-
ber from Bob’s encryption of the correct computation that
has been shifted by randomness of Bob’s choice.
Since every semantically secure homomorphic encryption
scheme available today has a ﬁnite message space (e.g. ZN ),
when our k-means protocol requires the data points (or at-
tributes of the data points) to be encrypted, we must re-
strict the possible data values to a ﬁnite range. Therefore,
instead of viewing the data points as living in Rd, we “dis-
cretize” Euclidean space and approximate it via the lattice
Zd
N , for some large N . All of the results of this paper are
consequently restricted to the model where the data points
live in Zd
N , (both in the “real” and “ideal” setting) and any
function performing k-means clustering in this model is re-
stricted to computations in ZN . Note that restricting to
this “discretized” model is completely natural; indeed due to
memory constraints, calculations performed on computers
are handled in this manner. As a consequence of working
in the discretized space model, we also avoid privacy issues
that arise from possible rounding errors (i.e. restricting in-
put to be in Zd
N avoids the necessity of approximating inputs
in R by rounding up or down).
3. PRIVATE DIVISION AND SAMPLING
PROTOCOLS
3.1 Two-Party Division
As mentioned in Section 1.2, performing two-party divi-
sion has been an obstacle to obtaining a secure two-party
k-means clustering protocol. In this section and the next,
we discuss our methods for overcoming this obstacle.
In
particular, we make precise what we mean by division in
the ring ZN , and show that this deﬁnition not only matches
our intuition as to what division should be, but also allows
us to perform division in a secure way. Then in the follow-
ing section, we discuss how two parties can choose a value
R ∈ ZQ uniformly at random, where Q ∈ ZN is not known
by either party, but is shared between them.
Let P, D ∈ ZN . Then viewing P and D as integers, we
may apply the Division Algorithm to ﬁnd unique integers
Q < N and 0 ≤ R < D such that P = QD + R. View-
ing Q ∈ ZN , we then deﬁne division (of P by D) to be the
quotient Q. Note that this deﬁnition is the natural restric-
tion of division in R to the integers, in that Q represents
the actual quotient in R that has been rounded down to the
nearest integer. Thus this deﬁnition coincides much more
closely to real division (e.g.
for purposes of ﬁnding aver-
ages) than other alternatives, such as deﬁning division to be
multiplication by the inverse.
In deﬁning what it means for a protocol to be secure (see
Section 2.3), one compares the information that could be
obtained in an ideal model (where a trusted third party ex-
ists) verses what could be obtained in the real world (where
no such third party exists, and the proposed protocol is em-
ployed). In terms of deﬁning the function that is to be eval-
uated (which performs the k-means clustering), we force the
deﬁnition of division to match the above deﬁnition. In other
words, when the functions f A(x, y) and f B(x, y) (see nota-
tion of Section 2.3) call for division to be performed, these
divisions are deﬁned to mean division in the ring ZN as de-
ﬁned here. This way, when our protocol is run and division
is performed in this way, it matches the computations that
the functions f A and f B are performing.
With these deﬁnitions in place, it remains to implement
a secure division subprotocol that computes Q and returns
shares to Alice and Bob. We describe below a possible im-
plementation, which has been reduced to the Scalar Product
Protocol combined with the Find Minimum of 2 Numbers
Protocol, and consequently its security follows from the se-
curity of those subprotocols.
3.2 Possible Implementation of the Division
Protocol
Input. Alice and Bob share P = P A+P B and D = DA+DB
·
Output. If P = QD + R for 0 ≤ R < D is the unique ex-
pression guaranteed by the Division Algorithm, then this
protocol outputs shares of Q.
Cost. The communication in this protocol is dictated by K
calls to the Find Minimum of 2 Numbers Protocol. Denoting
the communication cost of FM2NP by ξs, the implementa-
tion of this protocol therefore has communication O(Kξs).
1. By running the Compute γ Protocol, Alice and Bob
, where the ith coordi-
compute and share γ∈ ZK−1
nate of γ is a 1 iﬀ 2iD < N .
2
2. For each 1 ≤ i ≤ K, Alice and Bob run the FM2NP
on (Pi, Pi−γ K−i2K−iD), where Oi denotes the output
to the ith call to FM2NP, Pi := Pi−1 − Oi−12K−i−1D,
P1 := P , and γ 0 := 1.
3. Notice that Q = PK
i=1 Oi2K−i, which can be locally
computed by Alice and Bob from their shares of Oi
from the previous step.
3.3 The Random Value Protocol (RVP)
We describe here how two parties (Alice and Bob) can
choose a value R ∈ ZQ uniformly at random, where Q ∈ ZN
is not known by either party, but is shared between them.
Before we describe the protocol, we provide motivation for
why the problem is interesting. After all, with a division pro-
tocol in hand, one could simply have Alice and Bob choose
an arbitrary R′ ∈ ZN (which is trivial to accomplish), and
then use the division protocol to ﬁnd its modulus in ZQ, and
set this to be R. The problem with this approach is that if
the modulus ¯N ∈ [0..Q − 1] of N in ZQ is non-zero, then R
will NOT be distributed uniformly in [0..Q − 1], as R will
be slightly more likely to lie in [0.. ¯N − 1] than in [ ¯N ..Q − 1].
(To quantify this, if N = DQ + ¯N , then the probability that
R ∈ [0.. ¯N − 1] is ¯N (D + 1)/N , while the probability that
R ∈ [ ¯N ..Q−1] is (Q− ¯N)D/N . As an example, if Q = 2N/7,
then D = 3 and ¯N = N/7, then R is 4/3 as likely to lie in
[0..Q/2] as [Q/2..Q]). Since the functions f A and f B will be
drawing R uniformly from ZQ, having our protocol contruct
R from R′ as above (which as noted is not uniformly dis-
tributed if Q ∤ N ) will make it impossible to ﬁnd simulators
as in (1) and (2). We therefore need to ﬁnd a way to sample
uniformly from ZQ without revealing any information about
Q to either party.
We would like for Alice and Bob to not have any knowl-
edge about the random value R they pick, a notion made
more precise in the following deﬁnition:
Deﬁnition 2. Let VIEWA (respectively VIEWB) denote
Alice’s (resp. Bob’s) view of an execution of the RVP. We
say that Alice and Bob have chosen R obliviously if:
∀Q ∈ ZN , ∀α ∈ ZQ,
Pr[R = α|VIEWA] = Pr[R = α|VIEWB] =
1
Q
.
(3)
Additionally, we would like Q to remain unknown to both
parties throughout the execution of the protocol. That Q re-
mains unknown to both parties will follow from the fact that
the below protocol is secure (as in deﬁnition 1), and oblivi-