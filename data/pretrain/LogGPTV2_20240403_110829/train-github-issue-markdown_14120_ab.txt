        place(output, cond, self._ppf(*goodargs) * scale + loc)
            _a         = 0.0
            _b         = inf
            args       = (array([27, 27]), array([27, 27]), array([0.41578442, 0.41578442]))
            cond       = array([ True,  True])
            cond0      = array([ True,  True])
            cond1      = array([ True,  True])
            cond2      = array([False, False])
            cond3      = array([False, False])
            goodargs   = [array([0.1, 0.2]), array([27, 27]), array([27, 27]), array([0.41578442, 0.41578442])]
            kwds       = {'loc': [0, 0.1], 'scale': [1, 1.01]}
            loc        = array([0. , 0.1])
            lower_bound = array([0. , 0.1])
            output     = array([nan, nan])
            q          = array([0.1, 0.2])
            scale      = array([1.  , 1.01])
            self       = 
            upper_bound = array([inf, inf])
    scipy/stats/_continuous_distns.py:6604: in _ppf
        return _boost._ncf_ppf(q, dfn, dfd, nc)
    E   RuntimeWarning: overflow encountered in _ncf_ppf
            dfd        = array([27, 27])
            dfn        = array([27, 27])
            nc         = array([0.41578442, 0.41578442])
            q          = array([0.1, 0.2])
            self       = 
    ___________________ test_methods_with_lists[ncf-args75-isf] ____________________
    scipy/stats/tests/test_continuous_basic.py:714: in test_methods_with_lists
        result = f(x, *shape2, loc=loc, scale=scale)
            args       = (27, 27, 0.41578441799226107)
            dist       = 
            distname   = 'ncf'
            f          = >
            loc        = [0, 0.1]
            method     = 'isf'
            scale      = [1, 1.01]
            shape2     = [[27, 27], [27, 27], [0.41578441799226107, 0.41578441799226107]]
            x          = [0.1, 0.2]
    scipy/stats/_distn_infrastructure.py:2378: in isf
        place(output, cond, self._isf(*goodargs) * scale + loc)
            _a         = 0.0
            _b         = inf
            args       = (array([27, 27]), array([27, 27]), array([0.41578442, 0.41578442]))
            cond       = array([ True,  True])
            cond0      = array([ True,  True])
            cond1      = array([ True,  True])
            cond2      = array([False, False])
            cond3      = array([False, False])
            goodargs   = [array([0.1, 0.2]), array([27, 27]), array([27, 27]), array([0.41578442, 0.41578442])]
            kwds       = {'loc': [0, 0.1], 'scale': [1, 1.01]}
            loc        = array([0. , 0.1])
            lower_bound = array([0. , 0.1])
            output     = array([nan, nan])
            q          = array([0.1, 0.2])
            scale      = array([1.  , 1.01])
            self       = 
            upper_bound = array([inf, inf])
    scipy/stats/_continuous_distns.py:6610: in _isf
        return _boost._ncf_isf(x, dfn, dfd, nc)
    E   RuntimeWarning: overflow encountered in _ncf_isf
            dfd        = array([27, 27])
            dfn        = array([27, 27])
            nc         = array([0.41578442, 0.41578442])
            self       = 
            x          = array([0.1, 0.2])
    ___________________ test_discrete_basic[skellam-arg17-True] ____________________
    scipy/stats/tests/test_discrete_basic.py:47: in test_discrete_basic
        check_cdf_ppf(distfn, arg, supp, distname + ' cdf_ppf')
            arg        = (15, 8)
            distfn     = 
            distname   = 'skellam'
            first_case = True
            m          = 7.0
            rvs        = array([ 4,  6, 10, ...,  5, 14, 15])
            supp       = array([-10,  -7,  -6,  -5,  -4,  -3,  -2,  -1,   0,   1,   2,   3,   4,
             5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,
            18,  19,  20,  21,  22,  25])
            v          = 23.0
    scipy/stats/tests/test_discrete_basic.py:185: in check_cdf_ppf
        npt.assert_array_equal(distfn.ppf(distfn.cdf(supp, *arg), *arg),
            arg        = (15, 8)
            distfn     = 
            msg        = 'skellam cdf_ppf'
            supp       = array([-10,  -7,  -6,  -5,  -4,  -3,  -2,  -1,   0,   1,   2,   3,   4,
             5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,
            18,  19,  20,  21,  22,  25])
    scipy/stats/_distn_infrastructure.py:3433: in cdf
        place(output, cond, np.clip(self._cdf(*goodargs), 0, 1))
            _          = 1
            _a         = -inf
            _b         = inf
            args       = (array(15), array(8))
            cond       = array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
            True,  True,  True,  True,  True,  True,... True,
            True,  True,  True,  True,  True,  True,  True,  True,  True,
            True,  True,  True,  True,  True])
            cond0      = True
            cond1      = array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
            True,  True,  True,  True,  True,  True,... True,
            True,  True,  True,  True,  True,  True,  True,  True,  True,
            True,  True,  True,  True,  True])
            cond2      = array([False, False, False, False, False, False, False, False, False,
           False, False, False, False, False, False,...False,
           False, False, False, False, False, False, False, False, False,
           False, False, False, False, False])
            cond3      = array([False, False, False, False, False, False, False, False, False,
           False, False, False, False, False, False,...False,
           False, False, False, False, False, False, False, False, False,
           False, False, False, False, False])
            goodargs   = [array([-10,  -7,  -6,  -5,  -4,  -3,  -2,  -1,   0,   1,   2,   3,   4,
             5,   6,   7,   8,   9,  10,  11,  12..., 15]), array([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
           8, 8, 8, 8, 8, 8, 8, 8, 8, 8])]
            k          = array([-10,  -7,  -6,  -5,  -4,  -3,  -2,  -1,   0,   1,   2,   3,   4,
             5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,
            18,  19,  20,  21,  22,  25])
            kwds       = {}
            loc        = array(0)
            output     = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
            self       = 
    scipy/stats/_discrete_distns.py:1437: in _cdf
        _boost._ncx2_cdf(2*mu2, -2*x, 2*mu1),
    E   RuntimeWarning: overflow encountered in _ncx2_cdf
            mu1        = array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
           15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])
            mu2        = array([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
           8, 8, 8, 8, 8, 8, 8, 8, 8, 8])
            self       = 
            x          = array([-10.,  -7.,  -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,
             3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,
            14.,  15.,  16.,  17.,  18.,  19.,  20.,  21.,  22.,  25.])
    _________________________ test_moments[skellam-arg17] __________________________
    scipy/stats/tests/test_discrete_basic.py:89: in test_moments
        check_normalization(distfn, arg, distname)
            arg        = (15, 8)
            distfn     = 
            distname   = 'skellam'
            k          = 0.043478260869565216
            m          = 7.0
            s          = 0.06346090862606624
            v          = 23.0
    scipy/stats/tests/common_tests.py:32: in check_normalization
        normalization_expect = distfn.expect(lambda x: 1, args=args)
            args       = (15, 8)
            atol       = 1e-07
            distfn     = 
            distname   = 'skellam'
            norm_moment = 1.0
            rtol       = 1e-07
    scipy/stats/_distn_infrastructure.py:3739: in expect
        x0 = self.ppf(0.5, *args)
            _a         = -inf
            _b         = inf
            args       = (15, 8)
            chunksize  = 32
            conditional = False
            fun        = .fun at 0x2840aaa70>
            func       = . at 0x2840aa8c0>
            invfac     = 1.0
            lb         = -inf
            loc        = 0
            maxcount   = 1000
            self       = 
            tolerance  = 1e-10
            ub         = inf
    scipy/stats/_distn_infrastructure.py:3592: in ppf
        place(output, cond, self._ppf(*goodargs) + loc)
            _          = 1
            _a         = -inf
            _b         = inf
            args       = (array(15), array(8))
            cond       = True
            cond0      = True
            cond1      = True
            cond2      = False
            goodargs   = [array([0.5]), array([15]), array([8])]
            kwds       = {}
            loc        = array([0])
            output     = array(nan)
            q          = array(0.5)
            self       = 
    scipy/stats/_distn_infrastructure.py:989: in _ppf
        return self._ppfvec(q, *args)
            args       = (array([15]), array([8]))
            q          = array([0.5])
            self       = 
    /Users/admin/scipy-dev/lib/python3.10/site-packages/numpy/lib/function_base.py:2328: in __call__
        return self._vectorize_call(func=func, args=vargs)
            args       = (, array([0.5]), array([15]), array([8]))
            excluded   = set()
            func       = 