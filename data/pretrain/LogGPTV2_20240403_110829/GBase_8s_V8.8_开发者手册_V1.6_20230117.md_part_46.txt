GBase 8s V8.8开发者手册
INSERT 通过INSERT语句插入一行或多行数据，及从指定表插入数据。
COPY 通过COPYFROMSTDIN语句，直接向GBase8s写入数据。
通过JDBC驱动的CopyManager接口，从其他数据库向GBase8s数据
库写入数据。这种方式具有业务数据无需落地成文件的优势。
gsql 工具的元命令 与直接使用COPY语句不同，该命令读取/写入的文件只能是gsql客
\copy 户端所在机器上的本地文件。
说明
\COPY只适合小批量、格式良好的数据导入，不会对非法字符做预处
理，也无容错能力，无法适用于含有异常数据的场景。导入数据应优
先选择COPY方式。
9.1 通过 INSERT 语句直接写入数据
用户可以通过以下方式执行INSERT语句（参见《GBase8sV8.8_SQL手册》 INSERT
章节），直接向GBase8s数据库写入数据：
 使用客户端工具向GBase8s数据库写入数据。参见3.6.2 向表中插入数据。
 通过JDBC/ODBC驱动，连接数据库执行INSERT语句，向GBase8s数据库写入数据。
参见3.2 连接数据库。
GBase8s数据库支持完整的数据库事务级别的增删改操作。INSERT是最简单的一种数
据写入方式。这种方式适合数据写入量不大，并发度不高的场景。
9.2 使用 COPY FROM STDIN 导入数据
9.2.1 关于 COPY FROM STDIN 导入数据
用户可以通过一下方式执行COPYFROMSTDIN语句，直接向GBase8s数据库中写入
数据。
 通过键盘输入，向GBase8s数据库写入数据。参见《GBase8sV8.8_SQL手册》COPY。
 通过JDBC驱动的CopyManager接口，从文件或者数据库向GBase8s写入数据。此方
法支持COPY语法中copyoption的所有参数。
南大通用数据技术股份有限公司
303
GBase 8s V8.8开发者手册
9.2.2 CopyManager 类简介
CopyManager是GBase8s的JDBC驱动中一个API接口类，用于批量导入数据。
9.2.3 CopyManager 的继承关系
CopyManager类位于org.postgresql.copyPackage中，继承自java.lang.Object类，该类的
声明如下：
publicclassCopyManager
extendsObject
构造方法
publicCopyManager(BaseConnectionconnection)
throwsSQLException
常用方法
表 9-2CopyManager 常用方法
返回值 方法 描述 throws
CopyIn copyIn(Stringsql) —— SQLException
long copyIn(String sql, InputStream 使用 COPY FROM SQLException,IOE
from) STDIN 从 xception
InputStream 中快速
向数据库中的表导
入数据。
long copyIn(String sql, InputStream 使用 COPY FROM SQLException,IOE
from,intbufferSize) STDIN 从 xception
InputStream 中快速
向数据库中的表导
入数据。
long copyIn(Stringsql,Readerfrom) 使用 COPY FROM SQLException,IOE
STDIN从Reader中 xception
快速向数据库中的
表导入数据。
long copyIn(String sql, Reader from, 使用 COPY FROM SQLException,IOE
intbufferSize) STDIN从Reader中 xception
南大通用数据技术股份有限公司
304
GBase 8s V8.8开发者手册
快速向数据库中的
表导入数据。
CopyOut copyOut(Stringsql) —— SQLException
long copyOut(String sql, 将一个 COPY TO SQLException,IOE
OutputStreamto) STDOUT 的结果集 xception
从数据库发送到
OutputStream类中。
long copyOut(Stringsql,Writerto) 将一个 COPY TO SQLException,IOE
STDOUT 的结果集 xception
从数据库发送到
Writer类中。
9.2.4 处理错误表
操作场景
当数据导入发生错误时，请根据本文指引信息进行处理。
查询错误信息
数据导入过程中发生的错误，一般分为数据格式错误和非数据格式错误。
 数据格式错误
在创建外表时，通过设置参数LOGINTOerror_table_name，将数据导入过程中出现的
数据格式错误信息，写入指定的错误信息表error_table_name中。可以通过以下SQL命令，
查询详细错误信息。
gbase=#SELECT*FROM error_table_name;
错误信息表结构如表9-3所示。
表 9-3 错误信息表
列名称 类型 描述
nodeid integer 报错节点编号。
begintime timestamp with time 出现数据格式错误的时间。
zone
filename charactervarying 出现数据格式错误的数据源文件名。
南大通用数据技术股份有限公司
305
GBase 8s V8.8开发者手册
rownum numeric 在数据源文件中，出现数据格式错误的行号。
rawrecord text 在数据源文件中，出现数据格式错误的原始记
录。
detail text 详细错误信息。
 非数据格式错误
一旦发生非数据格式错误，将导致整个数据导入失败。用户可以根据执行数据导入过程
中界面提示的错误信息，用以定位问题并处理错误表。
处理数据导入错误
根据获取的错误信息，对照表9-4以处理数据导入错误。
表 9-4 处理数据导入错误
错误信息 原因 解决办法
missing data for 数据源文件中的列数比外表定义 1. 由于列数少导致的报错，选择
column 的列数少。 下列办法解决：
"r_reason_desc"
对于TEXT格式的数据源文件，由  在数据源文件中，增加列
于转义字符（\）导致delimiter（分 r_reason_desc的字段值。
隔符）错位或者quote（引号字符）
 在 创 建 外 表 时 ， 将 参 数
错位造成的错误。
fill_missing_fields设置为on。
示例：目标表存在3列字段，导入 即当导入过程中，若数据源文
的数据如下所示。由于存在转义字 件中一行数据的最后一个字
符“\”，分隔符“|”被转义为第 段缺失，则把最后一个字段的
二个字段的字段值， 导致第三个 值设置为NULL，不报错。
字段值缺失。
2. 对由于转义字符导致的错误，
BE|Belgium\|1 需检查报错的行中是否含有转义
字符（\）。若存在，建议在创建
外表时，将参数“noescaping”（是
否不对'\'和后面的字符进行转义）
设置为true。
extra data after last 数据源文件中的列数比外表定义  在数据源文件中，删除多余的
expectedcolumn 的列数多。 字段值。
 在 创 建 外 表 时 ， 将 参 数
ignore_extra_data设置为on。
即在导入过程中，若数据源文
南大通用数据技术股份有限公司
306
GBase 8s V8.8开发者手册
件比外表定义的列数多，则忽
略行尾多出来的列。
invalidinput 数据类型错误。 在数据源文件中，修改输入字段的
数据类型。根据此错误信息，需将
syntaxfortype
输入的数据类型修改为numeric。
numeric:"a"
nullvaluein 非空约束。 在数据源文件中，增加非空字段信
息。根据此错误信息，需增加
column
staff_id列的值。
"staff_id"
violatesnot-null
constraint
duplicate key value 唯一约束。 删除数据源文件中重复的行。通过
violates unique 设 置 关 键 字 DISTINCT ， 从
constraint SELECT 结果集中删除重复的行，
"reg_id_pk" 保证导入的每一行都是唯一 的。
gbase=#INSERTINTOreasons
SELECTDISTINCT*FROM
foreign_tpcds_reasons;
valuetoolong 字段值长度超过限制。 在数据源文件中，修改字段值长
度。根据此错误信息，需将字段值
fortype
长度限制为VARCHAR2(16)。
character
varying(16)
9.2.5 示例 1：通过本地文件导入导出数据
在基于，可以使用CopyManager接口，通过流方式，将数据库中的数据导出到本地文
件或者将本地文件导入数据库中，文件格式支持CSV、TEXT等格式。
样例程序如下，执行时需要加载GBase8s的JDBC驱动。
importjava.sql.Connection;importjava.sql.DriverManager;importjava.io.IOException;import
java.io.FileInputStream;importjava.io.FileOutputStream;importjava.sql.SQLException;
importorg.postgresql.copy.CopyManager;importorg.postgresql.core.BaseConnection;
publicclassCopy{
publicstaticvoidmain(String[]args)
{
南大通用数据技术股份有限公司
307
GBase 8s V8.8开发者手册
Stringurls=newString("jdbc:postgresql://localhost:15432/postgres");//数据库URL
Stringusername= newString("username");//用户名
Stringpassword= newString("passwd");//密码
Stringtablename=newString("migration_table");//定义表信息
Stringtablename1=newString("migration_table_1");//定义表信息
Stringdriver="org.postgresql.Driver";
Connectionconn=null;
try{
Class.forName(driver);
conn=DriverManager.getConnection(urls,username,password);
}catch(ClassNotFoundExceptione)
{e.printStackTrace(System.out);
}catch(SQLExceptione)
{e.printStackTrace(System.out);
}
// 将表migration_table中数据导出到本地文件d:/data.txt
try{
copyToFile(conn,"d:/data.txt","(SELECT*FROMmigration_table)");
}catch(SQLExceptione){
//TODOAuto-generatedcatchblock
e.printStackTrace();
}catch(IOExceptione){
//TODOAuto-generatedcatchblocke.printStackTrace();
}
//将d:/data.txt中的数据导入到migration_table_1中。
try{
copyFromFile(conn,"d:/data.txt",tablename1);
}catch(SQLExceptione){
//TODOAuto-generatedcatchblocke.printStackTrace();
}catch(IOExceptione){
//TODOAuto-generatedcatchblocke.printStackTrace();
}
// 将表migration_table_1中的数据导出到本地文件d:/data1.txt
try{
copyToFile(conn,"d:/data1.txt",tablename1);
}catch(SQLExceptione){
//TODOAuto-generatedcatchblocke.printStackTrace();
}catch(IOExceptione){
//TODOAuto-generatedcatchblocke.printStackTrace();
}
}
南大通用数据技术股份有限公司
308
GBase 8s V8.8开发者手册
publicstaticvoidcopyFromFile(Connectionconnection,StringfilePath,StringtableName)
throwsSQLException,IOException{
FileInputStreamfileInputStream=null;try{
CopyManagercopyManager=newCopyManager((BaseConnection)connection);
fileInputStream=newFileInputStream(filePath);
copyManager.copyIn("COPY"+tableName+"FROMSTDINwith("+
"DELIMITER"+"'"+delimiter+"'"+"ENCODING"+"'"+encoding+"')",
fileInputStream);
}finally{
if(fileInputStream!=null)
{try{
fileInputStream.close();
}catch(IOExceptione){e.printStackTrace();
}
}
}
}
publicstaticvoidcopyToFile(Connectionconnection,StringfilePath,StringtableOrQuery)
throwsSQLException,IOException{
FileOutputStreamfileOutputStream=null;
try{
CopyManagercopyManager=newCopyManager((BaseConnection)connection);
fileOutputStream=newFileOutputStream(filePath);
copyManager.copyOut("COPY"+tableOrQuery+"TOSTDOUT",fileOutputStream);
}finally{
if(fileOutputStream!=null){try{
fileOutputStream.close();
}catch(IOExceptione)
{e.printStackTrace();
}
}
}
}
}
9.2.6 示例 2：从 MY 迁移数据
下面示例演示如何通过CopyManager从MY向GBase8s进行数据迁移的过程。
importjava.io.StringReader;importjava.sql.Connection;
importjava.sql.DriverManager;importjava.sql.ResultSet;
importjava.sql.SQLException;importjava.sql.Statement;
南大通用数据技术股份有限公司
309
GBase 8s V8.8开发者手册
importorg.postgresql.copy.CopyManager;
importorg.postgresql.core.BaseConnection;
publicclass Migration{
publicstaticvoidmain(String[]args){
Stringurl=newString("jdbc:postgresql://localhost:15432/postgres");//数据库URL
Stringuser= new String("username"); //GBase8s数据库用户名
Stringpass= new String("passwd");//GBase8s数据库密码String
tablename=newString("migration_table_1");//定义表信息
Stringdelimiter=newString("|");//定义分隔符
Stringencoding=newString("UTF8");//定义字符集
Stringdriver="org.postgresql.Driver";
StringBufferbuffer=newStringBuffer();//定义存放格式化数据的缓存
try{
//获取源数据库查询结果集ResultSetrs=getDataSet();