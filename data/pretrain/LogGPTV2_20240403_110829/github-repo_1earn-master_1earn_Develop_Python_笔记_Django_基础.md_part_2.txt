**ifequal/ifnotequal 标签**
{% ifequal %} 标签比较两个值,当他们相等时,显示在 {% ifequal %} 和 {% endifequal %} 之中所有的值。
下面的例子比较两个模板变量 user 和 currentuser :
```py
{% ifequal user currentuser %}
    Welcome!
{% endifequal %}
```
和 {% if %} 类似, {% ifequal %} 支持可选的 {% else%} 标签：8
```py
{% ifequal section 'sitenews' %}
    Site News
{% else %}
    No News Here
{% endifequal %}
```
**注释标签**
Django 注释使用 {# #}。
```py
{# 这是一个注释 #}
```
**include 标签**
{% include %} 标签允许在模板中包含其它的模板的内容。
下面这个例子都包含了 nav.html 模板：
```py
{% include "nav.html" %}
```
#### csrf_token
csrf_token 用于 form 表单中,作用是跨站请求伪造保护。
如果不用｛% csrf_token %｝标签,在用 form 表单时,要再次跳转页面会报 403 权限错误。
用了｛% csrf_token %｝标签,在 form 表单提交数据时,才会成功。
首先,向服务器发送请求,获取登录页面,此时中间件 csrf 会自动生成一个隐藏 input 标签,该标签里的 value 属性的值是一个随机的字符串,用户获取到登录页面的同时也获取到了这个隐藏的 input 标签。
然后,等用户需要用到 form 表单提交数据的时候,会携带这个 input 标签一起提交给中间件 csrf,原因是 form 表单提交数据时,会包括所有的 input 标签,中间件 csrf 接收到数据时,会判断,这个随机字符串是不是第一次它发给用户的那个,如果是,则数据提交成功,如果不是,则返回 403 权限错误。
### 自定义标签和过滤器
在应用目录下创建 templatetags 目录(与 templates 目录同级,目录名只能是 templatetags)。
```
├── manage.py
├── templates
│   └── ffffffff0x.html
├── templatetags
└── testweb
    ├── asgi.py
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    ├── views.py
    └── wsgi.py
```
在 templatetags 目录下创建任意 py 文件,如：my_tags.py
```py
from django import template
register = template.Library()   #register的名字是固定的,不可改变
```
修改 settings.py 文件的 TEMPLATES 选项配置,添加 libraries 配置：
```py
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, "/templates",],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            "libraries":{                          # 添加这边三行配置
                'my_tags':'templatetags.my_tags'   # 添加这边三行配置
            }                                      # 添加这边三行配置
        },
    },
]
```
利用装饰器 @register.filter 自定义过滤器。
> 注意：装饰器的参数最多只能有 2 个。
```py
@register.filter
def my_filter(v1, v2):
    return v1 * v2
```
利用装饰器 @register.simple_tag 自定义标签。
```py
@register.simple_tag
def my_tag1(v1, v2, v3):
    return v1 * v2 * v3
```
在使用自定义标签和过滤器前,要在 html 文件 body 的最上方中导入该 py 文件。
```
{% load my_tags %}
```
在 HTML 中使用自定义过滤器。
```
{{ 11|my_filter:22 }}
```
在 HTML 中使用自定义标签。
```
{% my_tag1 11 22 33 %}
```
语义化标签
在该 py 文件中导入 mark_safe。
```py
from django.utils.safestring import mark_safe
```
定义标签时,用上 mark_safe 方法,令标签语义化,相当于 jQuery 中的 html() 方法。
和前端HTML文件中的过滤器 safe 效果一样。
```py
@register.simple_tag
def my_html(v1, v2):
    temp_html = "" %(v1, v2)
    return mark_safe(temp_html)
```
在HTML中使用该自定义标签,在页面中动态创建标签。
```
{% my_html "zzz" "xxx" %}
```
### 配置静态文件
在项目根目录下创建 statics 目录。
```
├── manage.py
├── statics
├── templates
│   └── ffffffff0x.html
├── templatetags
│   ├── my_tags.py
└── testweb
    ├── asgi.py
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    ├── views.py
    └── wsgi.py
```
在 settings 文件的最下方配置添加以下配置：
```py
STATIC_URL = '/static/' # 别名
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "statics"),
]
```
在 statics 目录下创建 css 目录,js 目录,images 目录,plugins 目录, 分别放 css文件,js文件,图片,插件。
把 bootstrap 框架放入插件目录 plugins。
在模板中使用需要加入 {% load static %} 代码,以下实例我们从静态目录中引入图片。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    name ="ffffffff0x"
    return render(request, "ffffffff0x.html", {"name": name})
```
修改 ffffffff0x.html
在 HTML 文件的 head 标签中引入 bootstrap。
> 注意：此时引用路径中的要用配置文件中的别名 static,而不是目录 statics。
```py
{% load static %}
{{name}}
```
### 模板继承
模板可以用继承的方式来实现复用,减少冗余内容。
网页的头部和尾部内容一般都是一致的,我们就可以通过模板继承来实现复用。
父模板用于放置可重复利用的内容,子模板继承父模板的内容,并放置自己的内容。
#### 父模板
标签 block...endblock: 父模板中的预留区域,该区域留给子模板填充差异性的内容,不同预留区域名字不能相同。
```py
{% block 名称 %}
预留给子模板的区域,可以设置设置默认内容
{% endblock 名称 %}
```
#### 子模板
子模板使用标签 extends 继承父模板：
```py
{% extends "父模板路径"%}
```
子模板如果没有设置父模板预留区域的内容,则使用在父模板设置的默认内容,当然也可以都不设置,就为空。
子模板设置父模板预留区域的内容：
```py
{ % block 名称 % }
内容
{% endblock 名称 %}
```
templates 目录中添加 base.html 文件
```html
ffffffff0x(ffffffff0x.com)
    Hello World!
    文字
    {% block mainbody %}
       original
    {% endblock %}
```
以上代码中,名为 mainbody 的 block 标签是可以被继承者们替换掉的部分。
所有的 `{% block %}` 标签告诉模板引擎,子模板可以重载这些部分。
ffffffff0x.html 中继承 base.html,并替换特定 block,ffffffff0x.html 修改后的代码如下：
```html
{%extends "base.html" %}
{% block mainbody %}
继承了 base.html 文件
{% endblock %}
```
第一行代码说明 ffffffff0x.html 继承了 base.html 文件。可以看到,这里相同名字的 block 标签用以替换 base.html 的相应 block。
---
## 模型
Django 对各种数据库提供了很好的支持,包括：PostgreSQL、MySQL、SQLite、Oracle。
Django 为这些数据库提供了统一的调用API。 我们可以根据自己业务需求选择不同的数据库。
安装 mysql 驱动
```bash
pip3 install pymysql
```
**Django ORM**
Django 模型使用自带的 ORM。
对象关系映射（Object Relational Mapping,简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。
ORM 在业务逻辑层和数据库层之间充当了桥梁的作用。
ORM 是通过使用描述对象和数据库之间的映射的元数据,将程序中的对象自动持久化到数据库中。
### 数据库配置
搭建一个 mariadb
```bash
bash f8x-dev -mariadb
mysql -u root -p
# 例如我们创建一个名为 f1x 数据库,编码指定为 utf8：
create database f1x default charset=utf8;
```
我们在项目的 settings.py 文件中找到 DATABASES 配置项,将其信息修改为：
```py
DATABASES = {
    'default':
    {
        'ENGINE': 'django.db.backends.mysql',    # 数据库引擎
        'NAME': 'f1x', # 数据库名称
        'HOST': '127.0.0.1', # 数据库地址,本机 ip 地址 127.0.0.1
        'PORT': 3306, # 端口
        'USER': 'root',  # 数据库用户名
        'PASSWORD': 'toor', # 数据库密码
    }
}
```
在与 settings.py 同级目录下的 `__init__.py` 中引入模块和进行配置
```py
import pymysql
pymysql.install_as_MySQLdb()
```
### 定义模型
#### 创建 APP
Django 规定,如果要使用模型,必须要创建一个 app。我们使用以下命令创建一个 TestModel 的 app:
```
python3 manage.py startapp TestModel
```
目录结构如下
```
testweb
├── manage.py
├── statics
├── templates
│   ├── base.html
│   └── ffffffff0x.html
├── templatetags
│   ├── my_tags.py
├── TestModel
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
└── testweb
    ├── asgi.py
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    ├── views.py
    └── wsgi.py
```
修改 TestModel/models.py 文件
```py
from django.db import models
class Test(models.Model):
    name = models.CharField(max_length=20)
```
以上的类名代表了数据库表名,且继承了 models.Model,类里面的字段代表数据表中的字段 (name),数据类型则由 CharField（相当于 varchar）、DateField（相当于 datetime）, max_length 参数限定长度。
接下来在 settings.py 中找到 INSTALLED_APPS 这一项,如下：
```py
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'TestModel',               # 添加此项
)
```
在命令行中运行：
```bash
python3 manage.py migrate   # 创建表结构
python3 manage.py makemigrations TestModel  # 让 Django 知道我们在我们的模型有一些变更
python3 manage.py migrate TestModel   # 创建表结构
```
看到几行 "Creating table…" 的字样,你的数据表就创建好了。
表名组成结构为：应用名_类名（如：TestModel_test）。
### 数据库操作
修改 urls.py：
```py
from django.urls import path
from . import views,testdb
urlpatterns = [
    path('ffffffff0x/', views.ffffffff0x),
    path('testdb/', testdb.testdb),
]
```
#### 添加数据
添加数据需要先创建对象, 然后再执行 save 函数, 相当于 SQL 中的 INSERT：
接下来我们在 testweb 目录中添加 testdb.py 文件
```py
# -*- coding: utf-8 -*-
from django.http import HttpResponse
from TestModel.models import Test
# 数据库操作
def testdb(request):
    test1 = Test(name='ffffffff0x')
    test1.save()
    return HttpResponse("数据添加成功！")
```
#### 获取数据
Django提供了多种方式来获取数据库的内容