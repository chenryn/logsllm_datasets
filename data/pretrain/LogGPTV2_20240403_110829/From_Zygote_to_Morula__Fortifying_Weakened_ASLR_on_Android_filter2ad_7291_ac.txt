(cid:2)
⎩
Prβ(y) − Prβ(x)
⎫⎬
⎭ .
y∈S
(cid:9)
Obviously, x ∈ S, thus Advcoordinated(A) ≥ 0, showing
that remote coordinated attacks always have a non-negative
y∈S Prβ(y) captures the fact that any app in S
advantage.
can be used as address information leak vector, and it grows
as more apps are included in S. The advantage can be quite
large on a user device where many popular and complex apps
are installed, due to the fact that such apps often contain
vulnerability-prone code and allow interactions with other apps
for better usabilities.
Local Trojan Attack Analysis: Having a local trojan app
installed on the victim’s devices obviates the need for ﬁnding
and exploiting an address information leakage vulnerability.
Therefore, the difﬁculty of launching a local trojan attack can
be represented by:
Prtrojan
exploit
(x) = Prα(x) ∗ Prγ(y),
429
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
where Prγ(y) is the probability of a user voluntarily installing
the trojan app y.
Accordingly, the advantage of the adversary B who chooses
local trojan attacks over the conventional ASLR exploits is:
Advtrojan(B) = Prtrojan
exploit
(x) − Prexploit(x)
= Prα(x) ∗ {Prγ(y) − Prβ(x)} .
The attacker’s odds in this case are determined by the
differences between Prγ(y) and Prβ(x), and we argue that
Prγ(y) would be bigger than Prβ(x), given that human users
are often considered as the weakest link in security and can be
easily fooled by skilled attackers—in this case, well-disguised
and attractive-looking trojan apps. Taking the well-known
DroidDream trojan for an example, 250,000 Android users
downloaded the app within three months [36].
IV. MORULA: EFFECTIVE AND PRACTICAL MITIGATION
Motivated by our identiﬁcation and analysis of the weak-
ened ASLR on Android, we propose Morula, a security-
enhanced process creation model with simple design and opti-
mized performance. Morula mitigates the negative side effects
on ASLR by the current Zygote model that (accidentally)
uniforms the layout of critical memory regions across all
running apps. We now discuss the design of Morula, starting
with an intuitive yet impractical idea, and then an effective and
performant solution to reinforce Android ASLR.
A. An Intuitive Idea and Limitations
The simplest approach to removing the uniform memory
layout from Android processes is to create each app process
independently from scratch without using the Zygote as a
template. This approach essentially reverts the process creation
model back to that of Linux and abandons the efﬁcient design
choice made in the early days of Android that employs a
pre-built and pre-initialized template process to speed up the
launching for every app. We implemented and evaluated this
intuitive approach in order to examine its feasibility, and
indirectly, the design rationales of the Zygote process creation
model on today’s much improved mobile hardware.
We found an OS debugging feature in Android, namely
process_wrap, that allows us to carry out this intuitive
idea easily. process_wrap provides a hook into the Zygote
process creation model, which is invoked immediately after
each process is forked from Zygote and before an app image
and any app-speciﬁc data are loaded into the forked process.
Using this hook, we implemented a so-called Wrap process
creation model, which forces every process forked from Zygote
to regenerate their memory layouts through a call to exec()
placed by the hook. Since exec() reloads the process image
and the shared libraries, ASLR is now able to arrange the
memory layout individually for each process as part of the
exec() invocation. Figure 4 illustrates the workﬂow of this
new model. At ﬁrst, Activity Manager sends an app creation
request
to the Zygote process (). Next, Zygote forks a
new process, which then invokes exec() to load the master
app process image (/system/bin/app_process), as a
result of our process_wrap hook (). A cold process
initialization follows (), which is not needed in the Zygote


+,




#!%
(!)


 !"
Fig. 4. The Wrap process management model when launching a browser app.
Since a new process is invoked on every request of launching new applications
in the Wrap scheme, all running processes locate shared libraries differently
in ASLR-enabled Android.
model (see Figure 1). Finally, the new process goes through
the specialization step, where the process attributes are set
and the control ﬂow jumps to the target application’s entry
point (). Now that Android follows the typical fork-then-
exec process creation model, each process has a uniquely
randomized memory layout, where shared libraries are no
longer identically located in memory, as shown in the shaded
area in Figure 4.
As expected, our experiment shows that, even on devices
with the recent generation of hardware, replacing the Zygote
process creation model with the Wrap model causes slowdown
in app launches. Since the Wrap model goes through a full
cycle of DVM creation and initialization, which is avoided in
the Zygote model, it results in an average app launch time of
4.34 seconds, adding a 3.52-second wait to the current app-
launching user experience, which we deem as unacceptable.
In addition, the device boot-time suffers a 190% increase and
amounts to 37.80 seconds.
Due to the prohibitive performance overhead, this intuitive
approach is of little potential to be used as a practical solution.
However, we gained useful insights into the OS while imple-
menting this approach. The insights, especially those into the
process_wrap hooks and app process creation, contributed
to an efﬁcient and easy-to-adopt design of Morula. More
importantly, exploring this approach helped us understand that,
despite its side effect in weakening ASLR, the Zygote process
creation model is a performance-critical design in Android
that cannot be simply removed. Security solutions that aim
to eliminate its negative side effects should be able to largely
conserve its performance beneﬁts.
B. Performant Process Creation without Damaging ASLR
The goal of Morula is to enable app processes to have
individually randomized memory layouts, as what the Wrap
process creation model produced, while maintaining the app
launch time at a similar level as that of the Zygote model. We
observed that the optimal app launch time of the Zygote model
is achieved by having the template process performing the
common and time-consuming initialization tasks beforehand.
We designed Morula to perform a similar task—speeding up
app launches by keeping the time-consuming task out of the
critical path—but in a different approach that does not reduce
the effectiveness of ASLR or other security mechanisms.
Speciﬁcally, our Morula process creation model revamps
the Zygote model by upshifting the role of the Zygote process
into an abstract process template, which no longer directly
430
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 


+,



!
!



 !
-!!

#!%
 !"
(a) A preparation phase






!

#!)
 !"


(b) A transition phase
Fig. 5. The Morula process creation model when launching a browser app.
Morula, surrounded above by a dashed line, represents a template for any
Android app. It is created when the device is in idle states (a), and then
transformed into the browser (b). Since Morula prepares a pool of template
instances having random memory layouts ahead of time, application launch
on request is not only fast but also takes full advantage of ASLR.
spawns app processes but forks intermediate process tem-
plates, called Morula processes. Created ahead of time, Morula
processes serve as initialized app execution hosts, which are
allocated to start and host individual apps. Upon receiving an
app launch request, a Morula process instantly loads the app
and starts it without repeating the time-consuming initialization
tasks. Therefore,
the app launch time remains optimized.
Moreover, each Morula process has to reload an independent
memory image during the ahead-of-time initialization phase,
which guarantees that no memory layout is shared among
different app processes.
Figure 5 demonstrates the two phases where a Morula
process is ﬁrst prepared in advance and later used to start an
app process, a browser in this case. The preparation phase,
shown in Figure 5-(a), is initiated by the Activity Manager via
a preparation request to the Zygote process, when the system is
idle or lightly occupied (x). In turn, the Zygote process forks a
child, which immediately makes a call to exec() to establish
a new memory image with a freshly randomized layout (y).
At the cold-init step (z), the new process constructs a DVM
instance and loads all shared libraries and common Android
classes, which would tremendously prolong the app launch
time if not done in advance, as indicated by the signiﬁcant
slowdown caused by the Wrap model. At the end of this step,
a Morula process is fully created, waiting for the request to
start an app. Note that multiple Morula processes may be
created when conditions permit, in order to accommodate an
uncommon demand for starting several apps in relatively short
time intervals. As shown in Figure 5-(a), each Morula process
has a distinct memory layout, unlike the processes created
under the Zygote model. Since Morula processes are created
asynchronously to upcoming app launch events, they will enter
sleep mode if not instantly needed and then move to the next
phase when wakened.
A Morula process enters the transition phase, as depicted
in Figure 5-(b), only when requested by the Activity Manager
to start a new app (x). The request is routed to the Zygote
process ﬁrst, where a decision is made regarding if the app
should be started in a Morula process or in a fork of the Zygote
process. Having this option allows the Morula model to be
backward compatible with the Zygote model, in order to carry
out an optimization strategy called “selective randomization”
(explained shortly). When a Morula process is chosen, the
Zygote process forwards the app launch request through a
pipe (y). With the concrete app information, the Morula
process then starts specializing itself, loading the app package
and setting the appropriate UID, GID, debugging ﬂags, thread
capabilities, etc. Finally, the Morula process hands over the
control-ﬂow to the app and transitions into a browser process
(z). Unlike the preparation phase, the transition phase stands
on the critical path of app launches, whose delay, if noticeable,
can hurt the responsiveness of the apps and the launch-time
performance in general. Thanks to the minimized workload
that has to be executed in the transition phase, which is almost
the same as what is required under the Zygote model when
launching apps, the Morula model does not incur additional
noticeable launch-time delays in most cases when compared
to the Zygote model, as shown in Section V.
it carries out
Morula’s design can be viewed as a hybrid that combines
the Zygote model and the Wrap model: similar to the Zygote
model,
in advance the time-consuming and
commonly required tasks involved in creating app processes;
learning from the Wrap model, it enforces a memory layout
refresh when pre-creating the template processes. As a result,
the Morula model achieves its goal of bringing individually
randomized memory layout to Android apps while maintaining
an optimal app launch time. However, if the design stays at
this stage, our Morula model would have to pay non-negligible
penalties on device boot time and memory usage efﬁciency.
We found that the only time when app launch requests
can brieﬂy outnumber the prepared Morula processes is during
device boot-time. This is because multiple apps may be started
simultaneously at boot-time, whereas a booted mobile device
does not experience such dense requests for launching apps.
This bottleneck results in a half-minute boot
time, which
can be unsatisfactory to some users. Additionally, with each
process explicitly reloading the shared libraries and creating
a private instance of the DVM, global sharing of common
memory pages is not possible and therefore physical memory
usage efﬁciency is reduced. However,
thanks to copy-on-
write memory pages enabled by the Linux kernel, the shared
libraries, though loaded individually by each process, only
have a single copy in physical memory, which does not
cause additional space overhead. In fact, Morula only poses
a moderate 13 MB overhead to the physical memory for each
running application, which we believe can be digested by many
modern mobile devices.
Nevertheless, we retroﬁtted our basic design of Morula
with two optimization strategies, which brings the boot time
and memory usages on par with the Zygote model. We now
explain both strategies.
431
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
)
s
e
t
y
b
(
e
z
s
n
o
i
i
t
a
c
o
l
l
A
106
105
104
103
102
101
libcore.icu.TimeZones
android.media.CameraProﬁle
android.webkit.WebView
used
not used
1
10
100
1000
Preloading time (miliseconds)
Fig. 6. An example of preloaded Dalvik classes and their run-time usages in
Android Browser. The blue circles (204 in total) represent the Dalvik classes
in-use while the red crosses (2,337 in total) represent the unused ones. The
x-axis (class loading time) and the y-axis (memory image size) are both on a
logarithmic scale.
C. Further Optimizations Exploiting System Characteristics
While Morula provides fast app launching time to the user,
the performance of Morula can be further optimized using two
optimization techniques: on-demand preloading and selective
randomization.
On-demand Loading: This optimization strategy was inspired
by our observation on the use-load ratio of Dalvik classes,
which we acquired during our study of the time-consuming
initialization tasks carried out when an app process is being
created. We found that the construction and initialization of
the DVM represent the single most resource-consuming task
involved in app process creation. This task requires, among
other things, preloading a list of 2,541 Dalvik classes, which
are deemed to be commonly used by regular Android apps
and thus worth preloading into all app processes. However, our
analysis of a set of 110,014 free apps from the Google Play
Market suggests otherwise: on average, each app only makes
use of a small fraction, around 5%, of the preloaded Dalvik
classes (i.e., 122 out of 2,541). Taking the Android Browser
app as an example (com.android.browser), despite its
heavy dependence on a broad range of classes, it only requires
204 out of the 2,541 preloaded classes, as shown in Figure 6,
resulting in a waste of load time and memory space.
This extremely low use-load ratio of the preloaded classes
introduces a large amount of unnecessary delay to the prepara-
tion phase in our Morula model, which happens at the creation
of each Morula process. This adverse effect on performance is
ampliﬁed when a rare shortage of prepared Morula processes
is encountered (due to the boot-time burst of app launch
requests), contributing to the previous discussed issue of the
prolonged boot time under the Morula model. It is worth
noting that under the Zygote model, boot-time is not affected
as much because the preloading of classes and the entire DVM
initialization only happens once per device boot.
Given that the overly broad class preloading is not suit-
able to Morula, our optimization strategy, on-demand loading,
simply removes the workload of loading the 2,541 classes
from the preparation phase, and instead relies on the DVM’s
dynamic class loading feature that dynamically loads a class