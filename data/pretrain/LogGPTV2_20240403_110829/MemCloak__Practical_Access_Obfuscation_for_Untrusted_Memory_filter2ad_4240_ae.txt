1751/1813
1409/1813
= 78%
88/318
= 28%
286/397
= 72%
401/528
= 76%
305/1133
= 27%
62/283
= 22%
on a MacBook Pro with a 4-core 2.9-GHz Intel Core i7 processor and
16 GB memory. Following [45], we use two 8-way associative 32 KB
caches (one for instructions and the other for data) to strengthen
the memory intensiveness of the selected benchmarks. We observe
that another reason to limit the cache size during emulation is that
the benchmarks may not have suciently large workload. If the
size of the cache(s) is relatively large, most data can be cached
after the rst read. The cases when the CPU accesses the same
location twice for reading certain data would be rare. This does not
necessarily require access obfuscation. In other words, it is hard
to comprehensively evaluate the performance of an obfuscation
solution when few repetitive memory accesses exist. Since the
benchmark workload is xed, we need to restrict the cache size
to indirectly yield more memory accesses. Other settings of the
emulated computer architecture include a 2 GHz processor, a 4 GB
memory, an 8 KB stash, 4 KB pages, and 64-byte blocks.
6.1 Memory Access Randomness
Following [45], we evaluate the obfuscation ecacy of MemCloak
by measuring the randomness of the access sequence. We test the
access randomness using the NIST Statistical Test Suite (version
2.1.2, updated in 2010) [30]. It is originally designed to validate ran-
dom number generators and pseudo-random number generators
[29]. Then it is widely used for randomness analysis as well. We
refer interested readers to [30] for the technical details. Toward
195
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Weixin Liang, Kai Bu, Ke Li, Jinhong Li, and Arya Tavakoli
Table 3: Comparison of memory access randomness of in-
secure (with only the original data, i.e., one copy per data
block) and secure (with MemCloak) execution with various
number of copies per data block.
benchmark
dijkstra
susan
jpeg encode
1
22%
28%
27%
number of copies per data block
2
70%
68%
75%
4
74%
70%
76%
6
76%
70%
76%
8
76%
71%
77%
10
77%
72%
77%
data blocks to mitigate the memory overhead, it is challenging
to quantify or evaluate the eect in a generalized way. It highly
depends on how many blocks to aggregate into one and how many
copies of a data block to select for aggregation. This is easy to
regulate upon initialization but tends to vary during execution.
Fortunately, our evaluation results show that MemCloak can
guarantee a satisfactory access randomness with only a limited
data redundancy. Furthermore, the increase of access randomness
does not signicantly increase with the number of copies per data
block. This simplies how to nd a tradeo between memory us-
age and obfuscation security. Table 3 reports the average access
randomness of MemCloak with dierent levels of data redundancy
in comparison with that of the traditional memory access with-
out obfuscation. Specically, the case of one copy corresponds to
the traditional memory access. The cases with two or more copies
correspond to MemCloak. MemCloak gains limited randomness
improvement as data redundancy increases. When MemCloak uses
only two copies per block, it can already improve the access ran-
domness from under 30% to over 65% for each benchmark. In this
case, using two copies per data block lead to up to 50% memory
overhead, which is comparative to that of ORAM [34].
7 DISCUSSION
Timing attack. As with ORAM, MemCloak does not protect mem-
ory access against timing attacks. A timing attack exploitsne-
grained timing measurements snooped on the address bus [6, 16].
For example, the access number and frequency, and the gaps be-
tween observed memory requests can leak information of program
characteristics [44]. A straightforward countermeasure is that the
memory controller enforces xed-rate memory accesses. Enforcing
a constant access rate, however, impairs scheduling exibility and
increases the diculty of tuning tradeo between security and
performance. A better way is to shape the rate of CPU-memory
communication into a pre-determined distribution [16, 44]. When
genuine trac solely cannot satisfy the distribution, additional fake
trac is injected. Trac shaping against timing attacks is com-
plementary to access obfuscation [44]. Both schemes need to be
deployed when necessary.
Statistics-based attack. Originally targeting searchable encryp-
tion, a statistics-based attack enables an honest-but-curious server
to infer encrypted keywords using search pattern and occurrence
frequency over its hosted encrypted data [20, 33]. For example,
“Thanksgiving” can be a hot keyword on the Thanksgiving Day.
The encrypted Thanksgiving-related information stored on the
server must be frequently hit as responses to queries. Then if a new
encrypted query arrives and the frequently-hit data is hit by the
query, it is reasonable for the server to conjecture that the said query
includes the keyword “Thanksgiving”. Mounting a statistics-based
196
attack on memory access, an attacker needs a xed data placement
in memory. This requirement is, however, exactly what ORAM
and MemCloak break to protect memory access patterns. There-
fore, MemCloak as well as existing access obfuscation solutions are
robust against statistics-based attacks.
Trace-driven attack. Such an attack exploits the traces of cache
hits and misses during AES encryption to infer the secret key [1].
That is, the attacker should be empowered with two types of in-
formation. One is that the program under execution is AES. The
other is the corresponding trace of cache of hits and misses. With-
out memory access obfuscation, both types of information can be
inferred via snooping on the address bus. First, access patterns can
be used to prole the program and therefore reveal its type [46].
Second, a memory request indicates a cache miss; this eases the
measurement of cache hits and misses. Fortunately, both types of
inference are throttled by MemCloak alike obfuscation solutions,
which disguise memory access patterns against proling. Further-
more, MemCloak introduces dummy reads and writes to protect the
type of memory access. A read operation thus does not always rep-
resent a real memory request. This way, MemCloak further impedes
the measurement of cache traces and therefore protects memory
access from trace-driven attacks.
8 CONCLUSION
We have designed, implemented, and evaluated MemCloak, a practi-
cally ecient solution for obfuscating accesses over untrusted mem-
ory. It achieves O(1) communication overhead by leveraging data
redundancy. Specically, MemCloak preloads multiple dierently-
encrypted copies of each block in memory. This enables the CPU
to fetch the same data by accessing dierent memory addresses
and therefore leaks no access pattern. Furthermore, it improves
memory utilization by introducing data aggregation. XORing two
blocks into one, we can access the XORed block for fetching one of
the two blocks when the other is fetched and cached/buered. This
not only saves memory space but also strengthens security. The
CPU can now access the same address for fetching dierent data.
With this, MemCloak leaves an attacker with no clue for correlat-
ing memory accesses. A common challenge for access obfuscation
design is limiting the size of the position map that tracks memory
layout. We propose a series of optimization techniques without
sacricing security. MemCloak can compress a giant traditional
position map of size up to 1 GB into a signicantly smaller one of
only several megabytes. Such a compression over hundreds of times
makes the position map practically t in an on-chip cache/buer.
We implement MemCloak on the gem5 simulator [7] and validate
its performance using memory-intensive MiBench benchmarks
[19]. For future work, we plan to extend MemCloak to obfuscate
data accesses over cloud, where memory is more aordable than
communication.
ACKNOWLEDGEMENT
This work is supported in part by the National Natural Science
Foundation of China under Grant No. 61402404. We would like
to thank ACSAC 2018 Chairs and Reviewers and our shepherd,
Evangelos Markatos, for their review eorts and helpful feedback.
We would also like to extend our gratitude to Tao Li and Baiqiang
Leng for their help with implementation of MemCloak.
REFERENCES
[1] Onur Acıiçmez and Çetin Kaya Koç. 2006. Trace-driven cache attacks on AES
(short paper). In ICICS. 112–121.
[2] Shaizeen Aga and Satish Narayanasamy. 2017. InvisiMem: Smart Memory De-
fenses for Memory Bus Side Channel. In ISCA. 94–106.
[3] Frances E Allen. 1970. Control ow analysis. In ACM Sigplan Notices, Vol. 5.
[4] Amro Awad, Pratyusa Manadhata, Stuart Haber, Yan Solihin, and William Horne.
2016. Silent shredder: Zero-cost shredding for secure non-volatile main memory
controllers. In ASPLOS. 263–276.
[5] Amro Awad, Yipeng Wang, Deborah Shands, and Yan Solihin. 2017. Obfusmem:
A low-overhead access obfuscation for trusted memories. In MICRO. 107–119.
[6] Chongxi Bao and Ankur Srivastava. 2017. Exploring timing side-channel attacks
on path-orams. In HOST. 68–73.
[7] Nathan Binkert, Bradford Beckmann, Gabriel Black, Steven K Reinhardt, Ali
Saidi, Arkaprava Basu, Joel Hestness, Derek R Hower, Tushar Krishna, Somayeh
Sardashti, et al. 2011. The gem5 simulator. ACM SIGARCH Computer Architecture
News 39, 2 (2011), 1–7.
[8] Zhao Chang, Dong Xie, and Feifei Li. 2016. Oblivious ram: a dissection and
experimental evaluation. VLDB, 1113–1124.
[9] Siddhartha Chhabra and Yan Solihin. 2011. i-NVMM: a secure non-volatile main
[10] Kai-Min Chung, Zhenming Liu, and Rafael Pass. 2014. Statistically-secure ORAM
memory system with incremental encryption. In ISCA. 177–188.
with ˜O(lo 2n) Overhead. In Asiacrypt. 62–81.
[11] Srinivas Devadas, Marten van Dijk, Christopher W Fletcher, Ling Ren, Elaine Shi,
and Daniel Wichs. 2016. Onion ORAM: A constant bandwidth blowup oblivious
RAM. In TCC. 145–174.
[12] Whiteld Die and Martin Hellman. 1976. New directions in cryptography. IEEE
Transactions on Information Theory 22, 6 (1976), 644–654.
[13] Jack Doerner and abhi shelat. 2017. Scaling ORAM for Secure Computation. In
CCS. 523–535.
[14] Z.-H. Du, Z. Ying, Z. Ma, Y. Mai, P. Wang, J. Liu, and J. Fang. 2017.
Se-
ArXiv e-prints (Dec. 2017).
cure Encrypted Virtualization is Unsecure.
arXiv:cs.CR/1712.05090
[15] Christopher W Fletcher, Ling Ren, Albert Kwon, Marten van Dijk, and Srinivas
Devadas. 2015. Freecursive oram:[nearly] free recursion and integrity verication
for position-based oblivious ram. In ASPLOS. 103–116.
[16] Christopher W Fletchery, Ling Ren, Xiangyao Yu, Marten Van Dijk, Omer Khan,
and Srinivas Devadas. 2014. Suppressing the oblivious ram timing channel
while making information leakage and program eciency trade-os. In HPCA.
213–224.
[17] Blaise Gassend, G Edward Suh, Dwaine Clarke, Marten Van Dijk, and Srinivas
Devadas. 2003. Caches and hash trees for ecient memory integrity verication.
In HPCA. 295–306.
[18] Oded Goldreich and Rafail Ostrovsky. 1996. Software protection and simulation
on oblivious RAMs. J. ACM 43, 3 (1996), 431–473.
[19] Matthew R Guthaus, Jerey S Ringenberg, Dan Ernst, Todd M Austin, Trevor
Mudge, and Richard B Brown. 2001. MiBench: A free, commercially represen-
tative embedded benchmark suite. In IEEE International Workshop on Workload
Characterization. 3–14.
[20] Mohammad Saiful Islam, Mehmet Kuzu, and Murat Kantarcioglu. 2012. Access
Pattern disclosure on Searchable Encryption: Ramication, Attack and Mitigation.
In NDSS, Vol. 20. 12.
[21] Benjamin Jun and Paul Kocher. 1999. The Intel random number generator.
Cryptography Research Inc. white paper (1999).
[22] David Lie, Chandramohan Thekkath, Mark Mitchell, Patrick Lincoln, Dan Boneh,
John Mitchell, and Mark Horowitz. 2000. Architectural support for copy and
tamper resistant software. In ASPLOS. 168–177.
[23] Kinga Marton and Alin Suciu. 2015. On the interpretation of results from the
NIST statistical test suite. SCIENCE AND TECHNOLOGY 18, 1 (2015), 18–32.
[24] Yuto Nakano, Carlos Cid, Shinsaku Kiyomoto, and Yutaka Miyake. 2012. Mem-
ory access pattern protection for resource-constrained devices. In International
MemCloak: Practical Access Obfuscation for Untrusted Memory
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
1–19.
502–519.
Conference on Smart Card Research and Advanced Applications. 188–202.
[25] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache attacks and coun-
termeasures: the case of AES. In Cryptographers’Track at the RSA Conference.
1–20.
[26] Benny Pinkas and Tzachy Reinman. 2010. Oblivious RAM revisited. In CRYPTO.
[27] Ling Ren, Christopher W Fletcher, Albert Kwon, Emil Stefanov, Elaine Shi, Marten
Van Dijk, and Srinivas Devadas. 2015. Constants Count: Practical Improvements
to Oblivious RAM.. In USENIX Security Symposium. 415–430.
[28] Ronald L Rivest, Adi Shamir, and Leonard Adleman. 1978. A method for obtaining
digital signatures and public-key cryptosystems. Commun. ACM 21, 2 (1978),
120–126.
[29] A Ruk et al. 2001. A statistical test suite for the validation of random number gen-
erators and pseudo-random number generators for cryptographic applications.
NIST Special Publication (2001).
[30] Andrew Rukhin, J Soto, J Nechvatal, M Smid, M Levenson, D Banks, M Vangel, S
Leigh, S Vo, and J Dray. 1999. A statistical test suite for the validation of crypto-
graphic random number generators. NIST Computer Security Division/Statistical
Engineering Division Internal Document (1999).
[31] Ali Shaee, Rajeev Balasubramonian, Mohit Tiwari, and Feifei Li. 2018. Secure
DIMM: Moving ORAM Primitives Closer to Memory. In HPCA. 428–440.
[32] Weidong Shi, Hsien-Hsin S Lee, Mrinmoy Ghosh, Chenghuai Lu, and Alexan-
dra Boldyreva. 2005. High eciency counter mode security architecture via
prediction and precomputation. In ISCA, Vol. 33. 14–24.
[33] Dawn Xiaoding Song, David Wagner, and Adrian Perrig. 2000. Practical tech-
niques for searches on encrypted data. In S&P. 44–55.
[34] Emil Stefanov, Marten Van Dijk, Elaine Shi, Christopher Fletcher, Ling Ren,
Xiangyao Yu, and Srinivas Devadas. 2013. Path ORAM: an extremely simple
oblivious RAM protocol. In CCS. 299–310.
[35] G Edward Suh, Dwaine Clarke, Blaise Gassend, Marten van Dijk, and Srinivas
Devadas. 2003. Ecient memory integrity verication and encryption for secure
processors. In MICRO.
[36] Rujia Wang, Youtao Zhang, and Jun Yang. 2017. Cooperative Path-ORAM for
Eective Memory Bandwidth Sharing in Server Settings. In HPCA. 325–336.
[37] Xiao Wang, Hubert Chan, and Elaine Shi. 2015. Circuit ORAM: On tightness of
the Goldreich-Ostrovsky lower bound. In CCS. 850–861.
[38] Xiao Shaun Wang, Yan Huang, TH Hubert Chan, Abhi Shelat, and Elaine Shi.
2014. SCORAM: oblivious RAM for secure computation. In CCS. 191–202.
[39] Chenyu Yan, Daniel Englender, Milos Prvulovic, Brian Rogers, and Yan Solihin.
2006. Improving cost, performance, and security of memory encryption and
authentication. In ISCA. 179–190.
[40] Jun Yang, Lan Gao, Youtao Zhang, Marek Chrobak, and Hsien-Hsin S Lee. 2010.
A low-cost memory remapping scheme for address bus protection. J. Parallel
and Distrib. Comput. 70, 5 (2010), 443–457.
[41] Vinson Young, Prashant J Nair, and Moinuddin K Qureshi. 2015. DEUCE: Write-
ecient encryption for non-volatile memories. ASPLOS (2015), 33–44.
[42] Samee Zahur, Xiao Wang, Mariana Raykova, Adrià Gascón, Jack Doerner, David
Evans, and Jonathan Katz. 2016. Revisiting square-root ORAM: ecient random
access in multi-party computation. In S&P. 218–234.
[43] Xian Zhang, Guangyu Sun, Chao Zhang, Weiqi Zhang, Yun Liang, Tao Wang,
Yiran Chen, and Jia Di. 2015. Fork path: improving eciency of oram by removing
redundant memory accesses. In MICRO. 102–114.
[44] Yanqi Zhou, Sameer Wagh, Prateek Mittal, and David Wentzla. 2017. Camou-
age: Memory trac shaping to mitigate timing attacks. In HPCA. 337–348.
[45] Xiaotong Zhuang, Tao Zhang, Hsien-Hsin S Lee, and Santosh Pande. 2004. Hard-
ware assisted control ow obfuscation for embedded processors. In CASES. 292–
302.
[46] Xiaotong Zhuang, Tao Zhang, and Santosh Pande. 2004. HIDE: an infrastructure
for eciently protecting information leakage on the address bus. In ASPLOS.
72–84.
197