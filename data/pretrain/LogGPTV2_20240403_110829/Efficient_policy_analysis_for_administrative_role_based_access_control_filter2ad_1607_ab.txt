constraints over arbitrary types to be used as (roughly speaking)
preconditions. Our algorithms can be adapted for instantiations of
UARBACP that use typical constraints such as checking whether a
user or object is a member of a given role, scope, or domain.
2.3 User-Role Reachability
The user-role reachability problem is: Given an initial miniR-
BAC policy γ0 = (cid:104)R, UA0(cid:105), a miniARBAC policy ψ, a set U0
1The restriction adopted in the AAR model in [20] is similar al-
though not identical.
of users, a user ut in U0 (called the “target user”), and a set goal
of roles, can the users in U0 together transform γ0 (under the re-
strictions imposed by ψ) to another miniRBAC policy γ in which
ut is a member of all roles in goal? A sequence of administrative
actions (i.e., UserAssign and UserRevoke actions) that performs
such a transformation is called a plan for (or solution to) the prob-
lem instance. We will often refer to user-role reachability simply as
“reachability”. A reachability problem instance can be represented
as a tuple (cid:104)γ0, ψ, U0, ut, goal(cid:105). We sometimes refer to miniRBAC
policies as “states”.
Reachability Under Separate Administration. The separate ad-
ministration restriction allows the speciﬁcation of a problem in-
stance to be simpliﬁed. When adopting this restriction, we also
assume, without loss of generality, that the target user ut is initially
a member of regular roles only (if the target user were initially a
member of administrative roles, we could give those roles to an-
other user in U0 instead, without affecting the answer to the reach-
ability problem). Note that the separate administration restriction
implies that the target user cannot be added later to an administra-
tive role.
We call the other users in U0 “administrators” (we could require
that they are members of administrative roles only, but allowing
them to be members of regular roles as well has no impact on
the analysis). With this restriction, it is sufﬁcient to consider only
administrative actions by the administrators that change the target
user’s role memberships. Let A be the set of administrative roles
of users in U0 in the initial state γ0. We can merge those roles into
a single administrative role with the union of the administrative
permissions of roles in A, and eliminate all other administrative
roles. We can then make this single administrative role implicit,
i.e., we can eliminate the ﬁrst component of the can_assign and
can_revoke relations. Similarly, because role memberships of dif-
ferent users are independent, we can eliminate all users other than
the target user. We can then make this user implicit, i.e., we can
eliminate the ﬁrst component of the user assignment UA. We can
also eliminate the ﬁrst two parameters of administrative actions.
With these simpliﬁcations, a reachability problem instance can
be represented as a tuple (cid:104)γ0, ψ, goal(cid:105) where γ0 = (cid:104)R, UA0(cid:105) is a
simpliﬁed miniRBAC policy, ψ = (cid:104)can_assign, can_revoke(cid:105) is
a simpliﬁed miniARBAC policy, and goal ⊆ R. Since the set of
roles is ﬁxed, we sometimes elide it, representing a state as UA,
instead of (cid:104)R, UA(cid:105).
2.4 Parameterized Complexity
Parameterized complexity [6] is an approach to deal with com-
putationally difﬁcult problems. The idea is to identify an aspect
of the input that makes the problem computationally difﬁcult, in-
troduce a parameter to measure that aspect of the input, and de-
velop a solution algorithm that may have high complexity in terms
of that parameter, but has polynomial complexity in terms of the
overall input size when the value of that parameter is ﬁxed. This
is called ﬁxed-parameter tractability. Formally, a problem is ﬁxed-
parameter tractable (FPT) with respect to parameter k if there ex-
ists an algorithm that solves it in O(f (k) × nc) time, where f is
an arbitrary function (depending only on its argument k), n is the
input size, and c is a constant.
We say that a problem is ﬁxed-parameter polynomial with re-
spect to parameter k if there is an algorithm that solves it in O(nck)
time, where n is the input size, and c is a constant. Note that, for
a ﬁxed value of k, the time complexity is polynomial in n. We say
that a problem is ﬁxed-parameter k1-tractable and k2-polynomial
if there exists an algorithm that solves it in O(f (k1) × nck2 ) time
for some function f and constant c.
3. FIXED-PARAMETER TRACTABILITY OF
REACHABILITY UNDER SEPARATE
ADMINISTRATION
This section presents parameterized complexity results for user-
role reachability under the separate administration restriction. Our
exposition is for policies without role hierarchy. Analysis of poli-
cies with role hierarchy can be reduced to analysis of policies with-
out role hierarchy, by transforming the policy and goal to make the
effects of inheritance explicit, as described in [27].
A role is negative (in a problem instance) if it appears negated
in some precondition in the policy; other roles are non-negative. A
role is positive if it appears positively (i.e., not negated) in some
precondition in the policy or appears in the goal; other roles are
called non-positive roles. A role that is both negative and posi-
tive is called mixed. This section shows that reachability analysis
is ﬁxed-parameter tractable with respect to the number of mixed
roles. We prove this constructively, by giving a ﬁxed-parameter
tractable algorithm based on a reduction theorem that shows that it
is safe to execute certain sequences of transitions atomically, i.e., as
a single larger (composite) transition. In some ways, our reduction
is a special case of Lipton’s reduction [21], but in another way, our
reduction differs from Lipton’s reduction and its numerous succes-
sors. Those reductions justify treating given sequences of transi-
tions (which appear in the control ﬂow graph of the program) as
atomic, i.e., as composite transitions. An ARBAC policy has no
control ﬂow, so our reduction itself deﬁnes composite transitions,
and justiﬁes using them instead of the original transitions.2 In ad-
dition, we prove ﬁxed-parameter tractability for our algorithm. We
are not aware of any similar complexity results in the literature for
reductions or partial-order reductions, whose performance is usu-
ally evaluated in a purely empirical way.
The heart of our method is the deﬁnition of a reduced transition
relation ; that takes larger steps than the original transition rela-
tion →; speciﬁcally, a single step of ; may correspond to multiple
steps of →. The reachability algorithm itself is a straightforward
exploration of the states reachable from the initial state via the re-
duced transition relation. Note that increasing the transition size by
a factor of k can reduce the number of explored states by a much
greater factor, because it can eliminate many intermediate states
produced by execution of different subsets of the original transi-
tions that are aggregated into the reduced transitions.
An invisible transition is a transition that adds a non-negative
role or revokes a non-positive role; other transitions are called vis-
ible transitions. The reduced transition relation differs from the
original transition relation in two ways. (1) Transitions that revoke
non-negative roles or add non-positive roles are prohibited; they
are useless because they do not add roles in the goal and do not
enable any transitions. (2) Invisible transitions get combined with
a preceding visible transition to form a single composite transition.
Invisible transitions can safely be executed immediately after the
preceding visible transition, because they never disable any transi-
tions.
More formally, for a state γ, let closure(γ) denote the largest
(with respect to ⊆) state γ(cid:48) reachable from γ by executing invis-
ible transitions. A straightforward proof, based on the deﬁnition
of invisible transition, shows that this closure is well-deﬁned, i.e.,
there is a unique largest such state. The reduced transition relation
2Our algorithm is not a special case of traditional partial-order re-
ductions [9, 4], because our algorithm exploits the fact that cer-
tain transitions are left-movers, while traditional partial-order al-
gorithms exploit only full commutativity (independence) of transi-
tions.
a; γ2 iff there exists a state γ such that γ1
a→ γ
is deﬁned by: γ1
and γ2 = closure(γ) and γ1 (cid:54)= γ2 and a is UserAssign(r) or
UserRevoke(r) for some negative role r (we don’t need to al-
low non-negative roles here, because they are added implicitly by
closure and never revoked).
The following theorem shows that user-role reachability can be
solved by exploring the reduced transition relation. For a problem
instance I, let PRI, NRI, and NRI denote the sets of positive,
negative, and non-negative roles, respectively, in I. For a relation
→, let →∗ denote its reﬂexive-transitive closure. A goal is reach-
able from a state γ0 iff (∃γ : γ0 →∗ γ ∧ goal ⊆ γ).
THEOREM 1. For all miniRBAC states γ0 and all goals goal,
goal is reachable from γ0 iff (∃γ : closure(γ0) ;∗ γ ∧ goal ⊆
γ).
The proof is straightforward. This theorem implies that reacha-
bility analysis can be solved by computing the states reachable from
closure(I) via ;, and checking whether the goal is a subset of any
of the resulting states. The graph constructed by this computation
is called the reduced state graph.
THEOREM 2. The reduced state graph can be constructed in
time O(f (|NRI ∩ PRI|)|I|c), for some function f and some con-
stant c. Thus, user-role reachability is ﬁxed-parameter tractable
with respect to the number of mixed roles.
PROOF: To reduce clutter, we omit the subscript I on NR and PR.
We introduce some terminology. An NR-state is a subset of NR.
The NR-state graph is the projection of the reduced state graph
onto NR-states; thus, an edge (s1, s2) in the state graph induces
an edge (s1 ∩ NR, s2 ∩ NR) in the NR-state graph. Let Gred
and GNR denote the reduced state graph and the NR-state graph,
respectively.
We show that the number of states in Gred is O(f (|NR ∩ PR|))
for some function f. Every state in Gred is reachable by a simple
path in Gred. Every simple path in Gred corresponds, by projec-
tion, to a distinct path in GNR, because every ; transition changes
the set of NR roles in the state. Furthermore, these paths in GNR
contain at most one occurrence of each cycle in GNR, because
going around a cycle in GNR a second time would not add any
more NR roles to the state, hence the corresponding fragment of
the path in Gred (note that a path in GNR uniquely determines a
corresponding path in Gred, because ; adds all allowed positive
roles at each step) would be a cycle, contradicting the assumption
that the path in Gred is simple. Therefore, the number of states in
Gred is bounded by the number of paths in GNR that go around
each cycle at most once. This number is clearly bounded by some
function of the number of nodes in GNR. The number of nodes in
GNR is clearly bounded by some function of |NR|. To see that it is
bounded by some function of |NR ∩ PR|, note that the set of non-
positive roles in the state is the same in every state in Gred except
the initial state, because the reduced transition relation never adds
non-positive roles to the state, and revocation has no preconditions,
and hence invisible transitions that revoke non-positive roles occur
only in composite transitions leaving the initial state. Thus, the set
of non-positive roles is the same in every state in GNR except the
initial state, so the number of nodes in GNR is bounded by some
function of the number of positive roles in NR.
The time complexity of standard state-graph construction algo-
rithms is polynomial in the size of the input and linear in the size
of the output (i.e., the reduced state graph). Therefore, the worst-
case time complexity of constructing the reduced state graph is
O(f (|NR ∩ PR|)|I|c), for some function f and some constant
c.
2
Slicing. Before applying the above algorithm, we apply a slic-
ing transformation that back-chains along the rules to identify roles
and rules relevant to the given goal, and then eliminates the irrele-
vant ones. The special twist here, compared to traditional cone-of-
inﬂuence reduction [4], is to take into account whether a role ap-
pears positively or negatively. Let ppre(t) be the set of roles used
as positive preconditions in a can_assign rule t. Let posPre =
{(cid:104)p, r(cid:105) | ∃t ∈ can_assign : p ∈ ppre(t) ∧ target(t) = r}.
Deﬁne Rel + (“relevant positive roles”) by Rel + = {p | (cid:104)p, r(cid:105) ∈
posPre∗ ∧ r ∈ goal}. Note that Rel + contains every role r such
that adding r to the state might be useful in reaching the goal. Roles
that appear negatively in the preconditions of can_assign rules
whose target is in Rel + are also relevant, so we deﬁne Rel− to
contain those roles.
The sliced problem instance is obtained by deleting roles not in
Rel + ∪ Rel−, deleting can_assign rules whose target is not in
Rel +, and deleting can_revoke rules whose target is not in Rel−.
Note that slicing can turn a negative role into a non-negative role,
increasing the beneﬁt of the reduction.
Example. Consider the ARBAC policy
can_assign = {(cid:104)r1, r2(cid:105),(cid:104)r2, r3(cid:105),(cid:104)r3 ∧ ¬r4, r5(cid:105),
(cid:104)r5, r6(cid:105),(cid:104)¬r2, r7(cid:105),(cid:104)r7, r8(cid:105)}
can_revoke = {r1, r2, r3, r5, r6, r7}
(1)
(2)
Consider the reachability problem for this policy with initial state
UA0 = {r1, r4, r7} and goal = {r6}. The goal is not reachable
from the initial state. Figure 3 describes the sets of reachable states
and transitions generated using four variants of forward search, ob-
tained by independently turning reduction and slicing on and off.
For this policy, NR = {r2, r4}.
Total Revocation and State Merging. Total Revocation holds
for a problem instance if every role that can be assigned by one
of the administrators can also be revoked by one of the admin-
istrators, i.e., (∀(cid:104)c, r(cid:105) ∈ can_assign : r ∈ can_revoke).3
In
most ARBAC policies, an administrator who can assign users to
a role can also revoke users from that role, and vice versa. Thus,
in practice, most problem instances satisfy total revocation. For
those problem instances, state merging can be used to optimize
the above algorithm. Speciﬁcally, two reachable states s1 and s2
can be merged during the search if (s1 ∩ NR) = (s2 ∩ NR) and
(s1∩NR) ⊇ (UA0∩NR), because a plan that reaches s1∪s2 from
γ0 can be constructed by concatenating (1) a plan that reaches s1
from γ0, (2) revocations of roles in ((s1 ∩ NRI ) \ UA0), and (3) a
plan that reaches s2 from γ0. A corollary of this result is: for prob-
lem instances I that satisfy total revocation and UA0 ∩ NRI, two
reachable states s1 and s2 can be merged if s1 ∩ NR = s2 ∩ NR.
This implies that, for such problem instances, the state graph has at
most 2|NR| nodes, i.e., the function f in Theorem 2 is f (x) = 2x
(in general, f could be larger than exponential).
4. FIXED-PARAMETER TRACTABILITY OF
REACHABILITY WITH ONE POSITIVE
PRECONDITION UNDER SEPARATE
ADMINISTRATION
The “one positive precondition” restriction, denoted |ppre| ≤ 1,
means that the precondition of each can_assign rule contains at
most one positive literal. This section considers policy analysis
under the |ppre| ≤ 1 and separate administration restrictions.
3This simple deﬁnition is suitable when the separate administration
restriction or hierarchical role assignment (cf. Section 5) holds.
Sasturkar et al. showed that reachability for policies satisfying
|ppre| ≤ 1, separate administration, CR (all roles can be uncon-
ditionally revoked), and EN (no explicit negation, i.e., negation
is used only in the form of SMER constraints) is ﬁxed-parameter
polynomial with respect to the goal size [27].
We generalize that result by eliminating the restrictions on revo-
cation and negation. This leads to the result that reachability for
policies satisfying |ppre| ≤ 1 is ﬁxed-parameter |Irrev|-tractable
and |goal|-polynomial, where Irrev is the set of irrevocable roles.
If we allow those parameters to vary, the worst-case running time is
exponential in the goal size, and doubly exponential in the number
of irrevocable roles. We believe that the algorithm is practical nev-
ertheless, primarily because both parameters are very small (two or
less) in all natural examples we have considered so far. Also, in ex-
periments with synthetic examples with more irrevocable roles (see
Section 8), the measured running time increases only modestly with
|Irrev|; we expect that the worst-case doubly-exponential behavior