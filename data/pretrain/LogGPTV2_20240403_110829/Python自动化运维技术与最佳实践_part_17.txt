:86400,
'0090:
: 60,
返目max-age 方法，通过不间时间单位秒·数量得到
def secs_from_days (_seconds,_nun) :
return _seconds * _sum
定又“cache_control”返因内容
Expirestype=*d*
L=umuexrdxg
CACHE_MAX_AGE=pubut11 secs_from_days (Expi resTypes [Expirestype] , 1nt (Expirenum) )
cache_contro1 = public; max-age=id* 4 (CACHE_MAX_AGE, )
以过期时间“7d”为例，计算公式为“86400*7=604800”，返回完整“Cache-Control”
内容为“Cache-Control: public;max-age=604800"，效果如图 8-3所示。
---
## Page 130
第8章从“零”开发一个轻量级WebServer109
·01.2
RN.
tta
x
图8-3返回 max-age字段信息
( 3) Last-Modified 机制
最后一种浏览缓存机制为Last-Modified，其原理是客户端通过If-Modified-Since 请求头
将先前接收到服务器端文件的Last-Modified时间截信息进行发送，目的是让服务器端进行
比对验证，通过这个时间截判断客户端的文件是否是最新，如不是最新的，则返回新的内容
（HTTP200），如果是最新的，则返回HTTP304告诉客户端其本地缓存的文件是最新的，无
需重启下载。于是客户端就可以直接从本地加载文件了。具体流程图如图8-4所示。
图 8-4Last-Modified 机制流程图
Yorserver实现Last-Modified缓存机制的原理，首先获取请求头是否包含Pragma、
Cache-Control字段，检查其值是否为no-cache，表示客户端要求不缓存，通常是用户主动强
制刷新页面，如“Ctrl+F5”组合键，将返回HTTP200状态，否则，将请求头部If-Modified-
Since字段与服务器端文件mtime（最后更新时间）进行比较，相匹配则说明文件没有更新，
将返回“HTTP/1.0 304NotModified”，不匹配则返回“HTTP200”，实现源码如下：
---
## Page 131
110第二部分高级篇
client_oache_cc = self,headers,getheader (*Cache-Contro1′)
获取请求头Cache-Contro1售
client_cache_p = self.headera.getheader (*Pragma*)
获取求头Pragma值
获取请求头If-Modifed-Since望，以便与服务幕境文件mtime进行比较
Modifled_Slnce= self,headezs.getheader(*If-Modified-Since′)
过滤用户强制新的场景，将返四TTP 200状态，否则获取If-Modified-Since值
if client_cache_cc*=′no-cache′ or cllent_cache_p==*no-cache′or \
(client_cache_ccw=None and client_cache_p=None and Modified_Since==None) :
c1lent_modified=None
try:
兼容不同测览器请求异常
cllent_modified = Modifled_since.split (**) [0]
except :
文件mtime 时间格式转为Last-Modifed格式，如“Mon，29 Dec 2008 16:51:22 GMT”
clLent_modifled=None
file_last_modified=self,date_time_string (fs,st_mtime)
if client_nodified==file_last_modified:
比较 If-Modified-Since 与文件 mtime 值
self.send_response (304)
匹配则适因304状态
self.end_headers ()
else:
self.send_response (200)
不匹配则返置200状态
格文件ntime 作为 Last-Modified
self.send_header (*Last-Modified′, file_last_modified)
self,send_header (*Cache-Contro1', cache_control)
self.send_header (*Expires′, expiration)
self.send_header (*Content =type*, content_cype)
客户端请求及响应效果如图8-5所示，当文件没有发生更新时返回“HTTP/1.0304Not
Modified”状态，当手工修改文件，使文件mtime发生改变时，将返回“HTTP200”状态。
Q e a l
图8-5返回304状态信息
---
## Page 132
第8章从“零”开发一个轻量级WebServer111
8.2.2HTTP压缩功能
启用HTTP内容压缩，可为我们节省不少带宽成本，并且也可以加快网页访问速度，提
升用户体验。目前主流的浏览器都支持客户端解压功能，Yorserver服务器端采用gzip压缩机
制，其原理是在文件传输之前，先使用gzip压缩后再传输给客户端，客户端接收之后再由浏
览器解压显示，这样虽然稍微占用了一些服务器和客户端的CPU资源，但是换来的是更高
的带宽利用率。对于纯文本（html、css、js等）来讲，效果非常显著。Yorserver压缩配置选
项如下，其中compresslevel为压缩比，其值为1~9，“1”压缩比最小处理速度最快，“9”压
缩比最大但处理速度最慢，损耗CPU资源。
 gzip: Enable (on) or Disable (off) gzip optlons
[gzip]
gzip=*on*
(6~1) teAet eeezduoo exniguoo +
关于实现HTTP内容压缩的方法，需要加载gzip、cStringlO两个模块，gzip实现内容的
压缩功能，cStringlO的作用是操作内存文件，读取磁盘文件内容写入内存文件，再做压缩处
理，最后输出压缩后的内容返回给客户端，详细源码如下：
HTTP 内容压缩方法。参数buf 为文件内容，_compressleve1为压缩比
def conpressBuf (buf,_compressleve1) :
inport gzip, eStringI0
zbuf = cStringIo.StringIO()
+创建一个内存流文件对案
zlile = gzip,GzipFile (node = *vb, fleobj - zbuf, compresslevel = _compzressleve1)
创建一个gzip文件对象
zfile,rite (buf)
+写入文件压增内容
zfile ,close ()
return zbuf .getvalue ()返园压增内塞
f = open (DocumentRoot + sep + self.path)
if gzip==*on": 
开启gzip选项则调用压继方法compre8sBuf（)。否则直接使取文件内容
conpressed_content =compressBuf (f,read() , compresslevel)
100Ta
compressed_content = f.read()
HTTP内容压缩效果如图 8-6所示，index2.html文件原始大小为 6104字节，gzip压缩后
为1158个字节，压缩了81%的内容，效果很理想。
8.2.3HTTPSSL功能
HTTPS ( Hyper Text Transfer Protocol over Secure Socket Layer） 是以安全为 目标的 HTTP
通道，可以理解成HTTP的安全版，即HTTP协议下加人SSL层，HTTPS的安全基础是
---
## Page 133
112第二部分高级篇
SSL，因此加密的详细内容就需要SSL（Secure SocketsLayer，安全套接层）。目前HTTPS广
泛用于互联网上安全敏感的通信，例如电商在线交易支付方面。
SERA
工民
aCaer
Y
illii
+0.a
90,168.1
CheO
图8-6HTTP压缩效果图
关于Yorserver配置SSL的选项，需要修改监听端口为443，在启用SSL同时需要指定
私钥privatekey及证书certificate 两个选项，具体配置如下：
 port: Allows you to bind yorserver's port, http default 80 and Https 443,
port=443
ssl: Enable (on) or Dlsable (off) HTrPS options,port options must configure *443*.
[ss1]
_u0=[88
 configure privatekey and certificate pen,
privatekey="/usr/loca1/yozserver/key/app. key*
certificate=*/usr/1oca1/yorserver/key/server.crt*
具体的功能实现使用了OpenSSL、SocketServer两个模块，其中OpenSSL负责SSL的
功能，SocketServer负责基础通信。详细源码如下：
class SecureHTTPServer (HTTPServer) :
def __init__(self, server_address, HandlerClass) 1
BaseServer.__init__(self, server_address, HandlerClass)
ctx = SSL.Context (SSL.SSLv23_METHOD)
定义一个SSL连接
---
## Page 134
ctx.use_privatekey_file (privatekey)
指定私钥文件
ctx,use_certificate_lle (certificate)
self,socket - SSL.Connection(ctx, socket,socket (self.address_family,\
指定证书文价
self,socket_type))
创建一个连接对意，参数使用给定的OpenSSL.SSL.Context 实例和 Socket
self.server_bind ()
限务哪定并活
selr,server_activate ()
生成密钥与证书可以参考以下步骤：
生成 RSA 害钥 server,key
 openssl genrsa -des3 -out server.key 1024
复制一个密朝文件app.key（无费入密码）
 openssl rsa -in server.key -out app.key
生成一个证书请求 server,csr
Aox°aeAzee Lex- neu- bo1 Tesuedo 
签发证书server.crt
283*z8nzas ut- S90 e5ep- ba2- 605x [ssuado 
-signkey server.key -out server.crt
下一步将生成的密钥文件app.key、证书文件 server.cn 复制到 yorserver.conf配置指定
路径即 可,如 /usr/local/yorserver/key/app.key 与 /usr/local/yorserver/key/server.crt,最后重启
Yorserver服务，效果如图8-7所示。
0.02600
OR
+ Fgun
2|0
国宝编：
RA2/1/ WmS/ 1/ 4]
图 8-7SSL 证书信息
---
## Page 135
114第二部分高级简
8.2.4目录列表功能
Web目录列表很直观地展示了站点目录的结构，普遍应用在文档及下载服务中，当然，
对安全级别要求较高的站点，建议还是关闭此功能。Yorserver支持目录列表功能，在配置中
开启/关闭的方法如下：
Indexes: directory list (on/off).
Indexes=*on"
实现的方法是通过os.listdirO方法获取站点目录（系统绝对路径）列表，通过前端
“"、“”HTML标签格式化输出，具体实现源码如下：
def 1ist_directory(self, path) :
try:
1ist = os.listdir (path)
联取务前目录系统绝对路径列表
except os.error:
self,send_error(404, *No permiss1on to 1ist directory*):
1ist.sort (1ambda a, b1 onp (a. 1ower () , b. 1ower (1))
return None
不区分大小写对目录列表嫩排序
f = StringIo()
创建内存文件对象
f,write (Directory 1isting for s\n  self,path) #self.path 为当首 uRL 路径
f, write (*\n\n")
输出上一级目录 URL 链接
f,mrite (*Parent Directory\n* $ (pubut.1.parent_dix (self ,path)))
for name in list:
通历输出日录文件列表
fullnane = os.path.join (path, name)
di.splayname = name = cgi .escape (name)
HTML字符转义
if. os.path.islink(fullname) 1
+oueu =oueufetdsp
elif os.path.1sdir (fullname) :
/_ + eueu = eueuferdsTp
f.write (*ta\n* (name, displayname))
nane = name + os.sep
f.xrite (=\n\n*)
f,seek (0)
return f
目录列表效果如图8-8所示。
8.2.5动态CGI功能
CGI（CommonGatewayInterface，通用网关接口）实现让一个客户端从网页浏览器向在
网络服务器上的程序请求数据。CGI描述了客户端和服务器程序之间传输数据的一种标准。
编写 CGI程序的语言有 Shell、Perl、Python、Ruby、PHP、TCL、C/C++等。Yorserver支持
这些CGI程序的调用，需要修改相关配置，cgi_path参数指定CGI程序的存放目录，默认为
---
## Page 136
yorserver/bin/cgi-bin目录，指定多个目录使用“.”号分隔；cgi_extensions参数指定CGI程
序扩展名支持，详细见下面的配置：
[cgim]
 cgi_moudle: Enable (on)or Disable (off)  cgi support,
cgi_moudle=*on*
u qaedt6o*pwtap .*,sn aed16o edrnu*sd 16ooxnuo:ued16o 
bin directory.
*,uq/,=Python 液排序别试 *
my_11st = [23, 45, 67, 3,56, 82, 24, 23, 5, 77, 19, 33, 51, 99]
def bubble (bad_list) :
length = len (bad_1ist) - 1
sorted = False
while not sorted:
enz = pe110s
for i in range(length) :
If bad_1ist [1] > bad_1ist[↓+1] :
sorted = False
bad_1ist [11, bad_11st[1+1] = bad_1ist[1+1], bad_1iat[1]
bubble (ny_list)
print **
print ny_list
执行结果如图8-9所示。
工具市
heut
in9ROs1 Cou
图8-9Python CGI运行结果图
---
## Page 138
第8章从“零”开发一个轻量级WebServer117
[ bin/cgi-bin/index.php ]
1/usr/bin/env php
FHP 冒宠排序试, *;
function bubble (azray Sarray) (
for ($1=0, $1en=count (Sarray) -1; $1$i; --$j)[