TCP stack validates an incoming packet that belongs to an
established TCP connection. Speciﬁcally, we use the source
code of the latest Linux kernel 3.2.6 (at the time of writing)
as reference to extract the steps taken and checks performed
on an incoming packet (the packet validation logic is sta-
ble since 2.6.28). Based on the source code, we summarize
“sequence-number-dependent” side-channels on Linux and
extend it to BSD/Mac OS.
Figure 2: Incoming packet validation logic
As we can see in Figure 2, there exist ﬁve main checks
performed by Linux TCP stack based on the corresponding
source code as well as our controlled experiments. These
checks are performed for any incoming TCP packet that is
deemed to belong to an established connection based on the
four tuples:
(1). Error check is for the purpose of dropping invalid
packets early on. There are a number of speciﬁc error checks:
1) MD5 option check, 2) timestamp option check, 3) packet
length and checksum check. Each has a corresponding error
packet counter. If a speciﬁc error is caught, the correspond-
ing host packet counter is incremented and the packet is not
inspected further. Otherwise, it goes to the next step.
(2). Sequence number check is the most relevant check.
It basically checks if a packet is in window by making sure
that the ending sequence number of the incoming packet is
larger than or equal to X, and the starting sequence number
Figure 1: Threat model
3.1 Threat Model
The threat model is illustrated in Figure 1. There are
four main entities: (1) The victim smartphone and a target
application, constituting the attack target. (2) The legiti-
mate server, which talks to the victim smartphone using an
unencrypted application-layer protocol (e.g., HTTP). The
server can also become the attack target (see §5). (3) The
on-device malware, which is unprivileged and cannot tam-
per with other apps directly. (4) The oﬀ-path attacker, who
is capable of spooﬁng the IP address of the legitimate server
and the victim smartphone. The oﬀ-path attacker and the
malware collaborate to infer the correct TCP sequence num-
ber of the connection established between the target app and
the legitimate server. Note that diﬀerent from the threat
model described in the recent study [26], this attack does
not require the network ﬁrewall middlebox, making our at-
tack model much more general.
At a high level, as shown in Figure 1, the oﬀ-path at-
tacker needs two pieces of information: (1) the four tuples
of a target connection, i.e., source/destination IP addresses
and source/destination port numbers and (2) the correct se-
quence number. The on-device malware can easily identify
the current active connections (e.g., through netstat), but
it does not know the sequence number in use. In this at-
tack model, the oﬀ-path attacker can send probe packets
using the target four tuples with diﬀerent guessed sequence
numbers. The unprivileged malware then uses certain side-
channels to provide feedback on whether the guessed se-
quence numbers are correct. Guided by the feedback, the
oﬀ-path attacker can then adjust the sequence numbers to
narrow down the correct sequence number.
3.2 Packet Counter Side Channels
In this study, we look at a particular type of side chan-
nel, packet counters, that can potentially provide indirect
feedback on whether a guessed sequence number is correct.
In Linux, the procfs [24] exposes aggregated statistics on
the number of incoming/outgoing TCP packets, with certain
properties (e.g., wrong checksums). Alternatively, “netstat
-s” exposes a similar set of information on all major OSes
including Microsoft Windows, Linux, BSD, Mac OS and
smartphone OSes like Android and iOS. Since such coun-
ters are aggregated over the entire system, they are gener-
ally considered safe and thus accessible to any user or pro-
gram without requiring special permissions. The IPID side-
channel [27] can be considered as a special form of packet
counter that records the total number of outgoing packets
since it is incremented for every outgoing packet. However,
such side-channel is nowadays only available on Microsoft
Windows and is typically very noisy.
Even though it is generally perceived safe, we show that
an attacker can correlate the packet counter update with
1(Y, Y + WIN)??Probing Packets2FeedbackError checkSequence number checkAck number check0-payload checkIn-windowValidPassFailOut-of-windowInvalid0-payloadPayload >= 1Error counter++tcp_send_dupack()DropIgnoreAcceptRetransmission checkNot retransmissionRetransmissionImmediate ACK595is smaller than or equal to X+rcv win, where X is the next
expected sequence number and rcv win is the current re-
ceive window size. If the sequence number is out of window,
it triggers an immediate duplicate acknowledgment packet
to be sent back, indicating the correct sequence number that
it is expecting. Otherwise, the next check is conducted.
(3). Acknowledge number check is an additional validity
check on the packet. A valid ACK number should theoreti-
cally be within [Y, Y+outstanding bytes] to be considered
valid. Here Y is the ﬁrst unacknowledged sequence num-
ber and outstanding bytes is total number of outstanding
bytes not yet acknowledged. Linux has a relaxed implemen-
tation which allows half of the ACK number space to be
considered valid (we discuss its impact later). If the ACK
number is considered invalid, then it is dropped without
further processing. Else, the packet goes through the later
non-validity-related checks.
(4). At this point the packet has the correct sequence
number and the ACK number. The stack needs to check if it
has any payload. If it does not have any payload, the packet
is silently ignored unless there happens to be pending data
that can be piggybacked. In particular, the host cannot send
another 0-payload acknowledgment packet for the 0-payload
incoming ACK packet, which will create endless TCP ACK
storm [23].
(5). If the packet has non-zero payload, the ﬁnal check is
to detect retransmission by checking if the ending sequence
number of the packet is smaller than or equal to the next
expected sequence number.
If so, it does not process the
packet further and immediately sends an ACK packet to in-
form the other end of the expected sequence number. Since
step 2 has already ensured that the ending sequence number
cannot be smaller than the next expected sequence number,
the only possible ending sequence number that can satisfy
the retransmission check is the one equal to the next ex-
pected sequence number.
From the above description on how a TCP packet is han-
dled, it is not hard to tell that depending on whether the
sequence number is in or out of window, the TCP stack may
behave diﬀerently, which can be observed by the on-device
malware. Speciﬁcally, if it is an out-of-window packet with
0-payload, it most likely will not trigger any outgoing packet.
However, if it is an in-window packet, it immediately trig-
gers an outgoing duplicate ACK packet. As a result, it is
possible to use the counter that records the total number of
outgoing packets to tell if a guessed sequence number is in
window.
A similar observation has been made by the previous
study in the Phrack magazine [1]. The problem with their
approach to infer sequence number is that such general
packet counters can be very noisy — there may be back-
ground traﬃc which can increment the system-wide outgo-
ing packet counters. It is especially problematic when the
receive window size is small — a large number of packets
need to be sent and the probing is very likely to have limited
success. In fact, we have implemented such sequence num-
ber inference attack on a smartphone at home connected
to the broadband ISP through WiFi with 10Mbps down-
link bandwidth. Through 20 repeated experiments, we ﬁnd
that the inference always failed because of the noise of the
background traﬃc
It is also worth noting that the error checks are performed
at the very beginning, preceding the sequence number check,
which means that the corresponding error counters used by
the recent study [26] alone cannot provide any feedback on
a guessed TCP sequence number.
3.4 Sequence-Number-Dependent Counter in
Linux
The reason why the Phrack attack [1] is diﬃcult to carry
out is two-fold: (1) The required number of packets is too
large; an attacker needs to send at least one packet per re-
ceive window in order to ﬁgure out the right sequence num-
ber range. (2) The counter that records the total number of
outgoing packets is too noisy. Subsequently, we show that
both problems can be addressed by using a newly discov-
ered set of sequence-number-dependent packet counters that
increment when the sequence number of an incoming packet
matches certain conditions.
Figure 3: tcp send dupack() source code snippet in Linux
Server-side sequence number inference. We closely
study the function tcp send dupack() which is called af-
ter the sequence number check (depicted in Figure 2).
Within the function, we discover an interesting piece of
code shown in Figure 3. The “if” condition says if the
packet’s starting sequence number is not equal to its end-
ing sequence number (i.e., the packet has nonzero pay-
load), and its starting sequence number is “before” the ex-
pected sequence number, then a packet counter named De-
layedACKLost is incremented (which is publicly accessible
from /proc/net/netstat). This particular logic is to detect
lost delayed ACK packets sent previously and switch from
the delayed ACK mode into the quick ACK mode [12]. The
presence of an old/retransmitted TCP packet is an indica-
tion that the delayed ACKs were lost.
The question is how “before()” is implemented. In Linux
(and Mac OS), it basically subtracts an unsigned 32-bit in-
teger from another unsigned 32-bit integer and converts the
result into a signed 32-bit integer. This means that half of
the sequence number space (i.e., 2G) is considered before
the expected sequence number. For instance, two unsigned
integers 1G minus 2G would lead to an unsigned integer 3G.
When converting to an signed value, we obtain -1G.
The net eﬀect of the tcp send dupack() is that it allows an
attacker to easily determine if a guessed sequence number
is before or after the expected sequence number. Since the
DelayedACKLost counter very rarely increments naturally
(See §3.8), an attacker can use this counter as a clean and
reliable side-channel.
Binary search. Using this special counter, it is straight-
forward to conduct a binary search on the expected sequence
number. Note that the process is signiﬁcantly diﬀerent than
the one proposed in the earlier work [26] in that the earlier
work still requires sending one packet per “window”, which
results in a total of thousands or tens of thousands of pack-
ets. Here, as illustrated in Figure 4, the attacker only needs
to send one packet each round and only a total of 32 packets,
resulting in hardly any bandwidth requirement.
if (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq    && before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt))   {NET_INC_STATS_BH(sock_net(sk),  LINUX_MIB_DELAYEDACKLOST);…} 596Speciﬁcally, as shown in the ﬁgure, in the ﬁrst iteration,
the attacker can try the middle of the sequence number space
(i.e., 2G). If the expected sequence number falls in the ﬁrst
half (i.e., bin 1), the DelayedACKLost counter increments
by 1. Otherwise, (i.e., if it falls in bin 2), the counter remains
the same. Suppose the attacker ﬁnds that the expected se-
quence number is in the ﬁrst half after the ﬁrst iteration, in
the second iteration, he can try 1G to further narrow down
the sequence number. After log2 4G = 32 rounds (also 32
packets), the exact sequence number can be pinpointed. The
total inference time can be roughly calculated as 32× RT T .
In reality, the number of RTTs can be further reduced by
stopping the inference at an earlier iteration. For instance, if
it is stopped at the 31st iterations, the attacker would know
that the sequence number is either X or X+1. Similarly,
if the number of iterations is 22, the attacker knows that
the sequence number is within [X, X+1024). In many cases,
this is suﬃcient because the attacker can still inject a single
packet with payload of 1460 bytes and pad the ﬁrst 1024
bytes with whitespace (which eﬀectively leaves 436 bytes of
eﬀective payload). For instance, if the application-layer pro-
tocol is HTTP, the whitespace is safely ignored even if they
happen to be accepted as part of the HTTP response.
Figure 4: Sequence number inference illustration using the
DelayedACKLost packet counter (binary search)
N-way search. To further improve the inference speed,
we devise a variation of the “N-way search” proposed in the
recent work [26]. The idea is similar — instead of eliminating
half of the sequence number space each iteration, we can
eliminate N−1
N of the search space by simultaneously probing
N-1 of N equally-partitioned bins. The diﬀerence is that
the inference requires one or two orders of magnitude fewer
packets compared to the previously proposed search.
Figure 5 illustrates the process of a 4-way search. In the
ﬁrst iteration, the search space is equally partitioned into
4 bins. The attacker sends one packet with sequence num-
ber 1G, three packets with sequence number 2G, and two
packets with sequence number 3G. If the expected sequence
number falls in the ﬁrst bin, the DelayedACKLost counter
increments by 2, as the two packets sent with sequence num-
ber 3G are considered before the expected sequence number.
Similarly, the counter increments by a diﬀerent number for
diﬀerent bins. In general, as long as the number of packets
sent for each bin follow the distance between two consecu-
tive marks on a circular/modular Golomb ruler [3], the De-
layedACKLost counter increment will be unique when the
expected sequence number falls in diﬀerent bins.
In the later iterations, however, a much simpler strategy
can be used. In Figure 5(b), an attacker can just send one
packet per bin instead of following the circular Golomb ruler.
The reason is that now that the search space is reduced to
smaller than 2G, it is no longer circular (unlike the ﬁrst
iteration where the counter increment in the ﬁrst bin can be
impacted by the fourth bin). Now, if the sequence number
falls in the ﬁrst bin, then the counter remains the same; if
it falls in the second bin, the counter will increment 1; and
so on. We discuss the realistic settings and performance of
diﬀerent “N” in §3.7.
Figure 5: Sequence number inference illustration using the