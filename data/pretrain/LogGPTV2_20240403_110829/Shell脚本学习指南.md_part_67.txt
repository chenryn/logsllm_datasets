追踪日志的后续处理
19798.ktrace
EL*netbsd
19798 ktrace
CALL
execve(0xbfbfc650,0xbfbfcb24,0xbfbfcb34)
19798 ktrace
NAMT
*/usr/1oca1/bin/test*
19798 test
19798 test
CALL.
access (0xbfbfcc80, 0x1)
19798 test
NAMI
RET
*/bin/eh*
access0
19798 test
CALL
(0）2x0
追踪日志还得作后续处理实在不是很理想，因为这会妨碍我们得知进程所作的系统调用
之动态情况。而且大型的系统调用可能更难以识别。
所有的系统调用追踪器都能以进程ID作为参数，而非命令名称，这使得它们可以追踪已
经在执行的进程。但只有进程拥有者与root可以作这件事。
我们这里说明的只是一小部分，其实能用的系统调用逾踪器比我们这里提到的多很多。
请参考你本地端机器的使用手册，了解更多细节。
13.5
进程账
UNIX系统支持进程账（processaccounting）功能，不过为减少管理性日志文件的负荷，
此功能通常停用。该功能启用时，每当一个进程完成，内核便会写人一个简洁的二进制
记录到系统相依的账目文件里，例如/var/adm/pacct或/var/account/pacct。账目
文件在转为文字数据流前，必须先作处理。例如，在SunSolaris上，root可能得这么
微才能产生我们看得懂的列表：
acctcom -a
列出账目记录
www.TopSage.com
---
## Page 395
进程
383
CONAND
NAE
USRR TTYNAME TINE
START
END
TIMB
(SECS).(S8CS) SIZB(K)
REAL
CPU
XBAN
cat
jones
721:33:3821:33:38
21:33:38 21:33:38
 0.07
0.04 1046.00
echo
jones
0.13
make
21:33:38 21:33:38
00*880*0
grep
jones
fones
7
21:33:38 21:33:38
0.14
0.53
0.05 1048.00
00.0980'0
bash
Jones
?21:33:38 21:33:38
0.55
0.02 1592.00
 + + s
由于各UNIX之间的输出格式与账目工具之实例都有所不同，因此我们无法为这种摘要
性账目数据提供可移植性的脚本。不过，样本输出显示文字格式相对简单许多，例如，
我们可以轻松地产生前十名的命令列表及使用量计数：
acetcom -a 1 cut -d · + -f 1 1 bort 1 undg -c 1 sort -k1nir -k2 1 bead -n 10
21129 bash
4669 rm
3538 sed
1713 acosp
1378 cc
1252 1ropt
1252 cg
1172 uname
808 gawk
这里，我们使用cut摘取出第一栏，再以sort排序此列表，以uniq减少重复的计数，
再重新由大至小排序计数，最后使用head在列表里显示前十笔数据。
使用apropos accounting命令，可找出你系统里的账目命令。常见的有acctcom，
lastcomm与sa：它们都有很多选项可用以简化大量日志数据，使其成为易于管理的报
告。
13.6延迟的进程调度
大部分时候，用户都是希望进程马上起始：快点结束。而Shell的执行，也是在前一个
命令后，马上接着执行下一个命令，命令完成的速度是与资的限制有关，且不在Shell
的权限下。
在交谈模式使用下，有时不必等到命令完成才能执行另一个。这是Shell提供的一个简
单方式：所有的命令只要在最后加上&字符，都可起始于后台执行，无须等待。只有在
少数情况下，必须等待后台进程完成，见13.2节里所提及的wait命令。
至少有4种情况需要延迟进程起始，直到未来的某个时间点才执行，我们将于以下子节
介绍。
www.TopSage.com
---
## Page 396
384
第13章
13.6.1sleep：延退片刻
当进程应于某个特定时间过后才能启动时，可使用sleep命令暂停执行一段指定的秒数
之后，再下达被延迟的命令。sleep使用的资源很少，且可在不会对括动中的进程有任
何干扰下被使用。事实上，调度器只是忽略休眼中的进程，直到其计时器届满才叫醒它们。
在例13-1与例13-3我们都使用短暂的Sleep建立一个无穷循环的程序，但这么做并不会
耗掉系统的太多资源。在9.10节中的短暂Sleep用以确保循环中为各个进程选择一个新
虚扣随机产生器种子。在13.3节里的长时间Sleep，等待一段时间，直到系统有更多时
间处理时，才重启消耗大量资源的工作。
大部分deamon在执行其工作时，都会短暂休眠之后再醒来检查更多的工作。在这种方
式下，它们只会耗用少数资源，执行时对其他进程的影响很小.它们通常是引用sleep（）
或usleep（）函数（注4），反而不会直接使用Sleep命令，除非它们本身就是Shell脚本。
13.6.2at：延迟至特定时间
at命令可以令程序在特定时间执行。该命令语法在系统间各异，不过下面的例子为普遍
形式：
at 21:00
<conmand-file在下午9点执行
at now + 10 ninutes < C
at now
< comsand-file
马上执行
<conand-file8小时后铁行
conmand-file
10分钟后执行
at now + 8 houre
at 0400 to8orroM
<command-file明天早上4点执行
at 14 July
<command-file在下-个国庆目（Bagti1le Day）执行
at’ noon + 15 ninutes < corinand-file
在今天的12：15执行
at teatime
<command-file在今天下午执行
上述每个例子，要执行的工作都定义在command-file里的命令。at指定时间的方式有
点哲学，像最后一个例子指的就是16:00。
atq列出at队列里的所有工作，而atrm则是删除它们。欲了解更进一步的细节，请
参考你系统里的at使用手册。
注意：部分系统上，用以执行at的 Shell为Bourne Shell（/bin/sh），而你登录的 Sbell可能文
是在其他系统上。你可以避开这些不稳定的情况，在at单行命令输人时，指定一个你觉得
好用的语言所写的可执行脚本，首行设置如下：
#1/path/to/seript/interpreter
注 4:
不同的系统会有所不则，有些是系统调用，有强是程序库函数，
www.TopSage.com
---
## Page 397
进程
at命令系列能否可用根据管理政策而定。at.allow与at.deny两个文件即用以控制其COIm1
访间：它们可能是储存在/etc、/usr/lib/cron/at、/var/adm/cron或/var/at中，
根据UNIX版本而定。假如找不到这两个文件，那就只有root可以使用at了。如果你
的系统不允许你使用at命令，你可以向你的系统管理员反映，大部分站台，没有理由
禁止这个功能。
13.6.3batch：为资源控制而延迟
在计算机提供互动模式给人们访问之前，操作系统执行所有的进程都是采取批处理模式
（batchmode）.工作数据流的执行是累积式的，而它们的执行顺序可能视工作在队列里
的位置、你的身份、你的重要性、你所需要的资源与你能拥有的资源、你要准备等待多
久，以及你愿意付出多少而定。许多大型主机以及大型计算服务器，仍以此方式来耗用
其CPU周期。
现行所有UNIX系统都支持batch命令，让你将进程加人至某个批处理队列中。batch
的语法在系统间各异，不过它们都支持读取来自标准输人的命令：
batch < command-file
批处理执行命令
某些系统下，它等同于：
at -q b -m now < command-file
立即执行在批处理队列下的命令
其中，-qb为指定批处理队列，-m则是要求在工作完成时寄送邮件予用户，面now意
即已准备好立即执行。
batch的问题便是它太简化了：对批处理处理的题序提供的控制很少，也没有一套批处
理政策。这个命令很少用在小型系统上：而在大型系统上，特别是那些分散式系统，
batch也已被许多更复杂的实例所取代，像我们在表13-2所列的那些.这些包都提供整
套完整的命令，用来委任与管理批处理工作。
表13-2：进阶的批处理队列与调度系统
名称网站
Generic Network Queueing System
http://www.gnqs.org/
IBM LoadLeveler
http:/www.ibm.com/servers/eserver/pseries/
library/sp_books/loadleveler.html
Maui Cluster Scheduler
http://supercluster.org/maui/
Platform LSF system
http://www.plarform.com/products/LSFfamily/
Portable Batch System
http://www.openpbs.org/
www.TopSage.com
---
## Page 398
386
第13章
表13-2：进阶的批处理队列与调度系统（续）
Silver Grid Scheduler
-+** a -+ * f 
http://supereluster.org/silver/
Sun GridEngine
http:/fgridengine.sunsource.net/
13.6.4crontab：在指定时间再执行
大部分计算机有许多管理工作需要重复执行，像是每晚的文件系统备份、每周的日志文
件与暂时性目录的清空、每月的账目报表等等。一般用户也会需要用到这样的功能，例
如将办公室计算机里的文件与家里计算机中的文件进行同步。
这个工具程序可在指定的时间执行工作，其包括了在系统启动时起始的crondaemon，
与crontab命令，此命令用来管理/记录工作应何时执行的简单文字文件：见eron（8）与
crontab（1）的使用手册。你可以通过crontab-1（小写字母L）列出你的目前工作调
度，以crontab-e启动编辑器更新调度。编辑器的选择根据EDITOR环境变量而定，
有些计算机会因为未设置此参数面拒绝执行crontab，但有些则会直接启动ed。
crontab文件（见crontab（5）使用手册）支持Shell式注释，所以在它的起始处具有说
明是很有用的，可提醒我们其语法：
$ orontab -1
列出目前的 crontab 调度
00-59 00-23 01-31 01-12 0-6(0=Sunday)
dd
monweekday:
command:
前5个栏位，除了使用单一数字外，还可以搭配连字符分隔，指出一段（含）区间（例
如，第二个栏位里的8-17，指的是08：00至17:00间每小时执行一次），或者使用逗点分
隔数字列表或区间（例如：第一个字段的0，20，40指的便是每20分钟执行一次）。你
还可以使用星号，指该字段所有可能的数字：见下面范例：
15****
cormand
每个小时的第15分钟执行
02
1.，
conmand
每个月一开始的02：00执行
0811.7*
cormand
一月一日与七月一日的08：00执行
0 8-17 * · 0,6 command
06
Command
每周一的06：00执行
每用末的08100至17：00间，一小时执行一次
警告：虽然POSIX宜称空白行会忽略不处理，但有些商用的crontab版本却无法容许这样的情
况，还会确实地删除含有空自行的crontab文件！所以我们建议你，不要在你的crontab
文件里置人空自行。
www.TopSage.com
---
## Page 399
进程
crontab文件里的命令执行于一些已经设置的环境变量下：SHELL为/bin/sh，但HOME
LOGNAME，有时还包括USER，则是根据pasSwed文件或数据库里的记录值而被设置。
PATH的设置极为严格，通常只设置/usr/bin，如果你习惯更自由的设置，则你要不就
得在crontab文件中指定命令的完整路径名称，要不就是明白地设置PATH：
0 4 ** */usr/1ocal/bin/updatedb
0 4 * + • PATH=/usr/loca1/bLn:$PATH updatedb