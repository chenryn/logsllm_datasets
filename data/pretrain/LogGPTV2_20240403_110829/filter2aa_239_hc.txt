    public async Task Create(
      [Bind("Id", "MenuCardId", "Text", "Price", "Active", "Order", "Type", "Day"
)]
      Menu menu)
    {
      if (ModelState.IsValid)
      {
        await _service.AddMenuAsync(menu);
        return RedirectToAction("Index");
      }
      IEnumerable cards = await _service.GetMenuCardsAsync();
      ViewBag.MenuCards = new SelectList(cards, "Id", "Name");
      return View(menu);
    }
为了编辑菜单卡，定义了两种动作方法Edit，一个用于GET请求，另一个用于POST
请求。第一个Edit方法返回一个菜单项；第二个Edit方法在模型绑定成功后调用服务的
UpdateMenuAsync方法：
    public async Task Edit(int? id)
    {
      if (id == null)
      {
        return HttpBadRequest();
      }
      Menu menu = await _service.GetMenuByIdAsync(id.Value);
      if (menu == null)
      {
        return HttpNotFound();
      }
      IEnumerable cards = await _service.GetMenuCardsAsync();
      ViewBag.MenuCards = new SelectList(cards, "Id", "Name", menu.MenuCardId);
      return View(menu);
    }
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task Edit(
        [Bind("Id", "MenuCardId", "Text", "Price", "Order", "Type", "Day")]
        Menu menu)
    {
      if (ModelState.IsValid)
      {
        await _service.UpdateMenuAsync(menu);
        return RedirectToAction("Index");
      }
      IEnumerable cards = await _service.GetMenuCardsAsync();
      ViewBag.MenuCards = new SelectList(cards, "Id", "Name", menu.MenuCardId);
      return View(menu);
    }
控制器的实现的最后一部分包括Delete方法。因为这两个方法有相同的参数（这在C#
中是不可能的），所以第二个方法的名称是DeleteConfirmed。第二个方法可以在第一个
Delete方法所在的URL链接中访问，但是它用HTTP POST访问，而不是用ActionName特性
的GET。该方法调用服务的DeleteMenuAsync方法：
      public async Task Delete(int? id)
      {
        if (id == null)
        {
          return HttpBadRequest();
        }
        Menu menu = await _service.GetMenuByIdAsync(id.Value);
        if (menu == null)
        {
          return HttpNotFound();
        }
        return View(menu);
      }
      [HttpPost, ActionName("Delete")]
      [ValidateAntiForgeryToken]
      public async Task DeleteConfirmed(int id)
      {
        Menu menu = await _service.GetMenuByIdAsync(id);
        await _service.DeleteMenuAsync(menu.Id);
        return RedirectToAction("Index");
      }
41.9.5 创建视图
现在该创建视图了。视图在文件夹Views/MenuAdmin中创建。要创建视图，可以在
Solution Explorer中选择MenuAdmin文件夹，并从上下文菜单中选择Add | View。这将打开
Add 
View对话框，如图41-14所示。使用此对话框可以选择List、Details、Create、Edit、
Delete模板，安排相应的HTML元素。在这个对话框中选择的Model类定义了视图基于的
模型。
图41-14
Index视图定义了一个HTML表，它把Menu集合作为模型。对于表头元素，使用带有
Tag Helper asp-for的HTML元素标签来访问用于显示的属性名称。为了显示项，菜单集合
使用@foreach迭代，每个属性值用输入元素的标记辅助程序来访问。锚元素的标记辅助程
序为Edit、Details和Delete页面创建链接（代码文件
MenuPlanner/Views/MenuAdmin/Index.cshtml）：
      @model IList
      @{
          ViewBag.Title = "Index";
      }
      @ViewBag.Title
          Create New
      @if (Model.Count() > 0)
      {
          @foreach (var item in Model)
          {
              Edit
              Details
              Delete
          }
      }
在MenuPlanner项目中，MenuAdmin控制器的第二个视图是Create视图。HTML表单使
用asp-action标记辅助程序来引用控制器的Create动作方法。用asp-controller辅助程序引用
控制器不是必要的，因为动作方法与视图位于相同的控制器中。表单内容使用标签和输入
元素的标记辅助程序建立。标签的asp-for辅助程序返回属性的名称；输入元素的asp-for辅
助程序返回其值（代码文件MenuPlanner/Views/MenuAdmin/Create.cshtml）：
        @model MenuPlanner.Models.Menu
        @{
          ViewBag.Title = "Create";
        }
        @ViewBag.Title
            Menu
            Some error occurred
              )ViewBag.MenuCards)"
                size="2" class="form-control">
                Select a menu card
              Price of the menu
              Date of the menu
        Back
其他视图的创建与前面所示的视图类似，因此这里不作介绍。只需要从可下载的代码
中获得视图即可。
现在可以使用应用程序在现有的菜单卡中添加和编辑菜单。
41.10 实现身份验证和授权
身份验证和授权是Web应用程序的重要方面。如果网站或其中一部分不应公开，那么
用户就必须获得授权。对于用户的身份验证，在创建ASP.NET 
Web应用程序时可以使用
不同的选项（参见图41-15）:No Authentication、Individual User Accounts、Work And
School Accounts。Windows Authentication选项不可用于ASP .NET Core 1。
图41-15
对于Work And School Accounts，可以从云中选择Active Directory，进行身份验证。
使用Individual User Accounts时，可以在一个SQL Server数据库中存储用户配置文
件。用户可以注册和登录，也可以使用Facebook、Twitter、Google和Microsoft中现有的账
户。
41.10.1 存储和检索用户信息
为了管理用户，需要把用户信息添加到库中。IdentityUser类型（名称空间
Microsoft.AspNet.Identity. 
EntityFramework）定义了一个名称，列出了角色、登录名和声
明。用来创建MenuPlanner应用程序的Visual 
Studio模板创建了一些明显的代码来保存用
户：类ApplicationUser是项目的一部分，派生自基类IdentityUser（名称空间
Microsoft.AspNet.Identity.EntityFramework）。ApplicationUser默认为空，但是可以添加需
要的用户信息，这些信息存储在数据库中（代码文件
MenuPlanner/Models/IdentityModels.cs）：
    public class ApplicationUser : IdentityUser
    {
    }
数据库连接通过IdentityDbContext类型建立。这是一个泛型类，派生于
DbContext，因此使用了Entity 
Framework。IdentityDbContext类型定义了
IDbSet类型的Roles和Users属性。IDbSet类型定义了到数据库表的映
射。为了方便起见，创建ApplicationDbContext，把ApplicationUser类型定义为
IdentityDbContext类的泛型类型：
    public class ApplicationDbContext : IdentityDbContext
    {
      protected override void OnModelCreating(ModelBuilder builder)
      {
        base.OnModelCreating(builder);
      }
    }
41.10.2 启动身份系统
数据库连接通过启动代码中的依赖注入服务集合来注册。类似于前面创建的
MenuCardsContext, ApplicationDbContext被配置为使用SQL Server和config文件中的连接字
符串。身份服务本身使用扩展方法AddIdentity注册。AddIdentity方法映射身份服务所使用
的用户和角色类的类型。类ApplicationUser是前面提到的源自IdentityUser的类；
IdentityRole是基于字符串的角色类，派生自IdentityRole。AddIdentity方法的重载
版本允许的配置身份系统的方式有双因素身份验证；电子邮件令牌提供程序；用户选项，
如需要唯一的电子邮件；或者正则表达式，要求用户名匹配。AddIdentity返回一个
IdentityBuilder，允许对身份系统进行额外的配置，如使用的实体框架上下文
（AddEntityFrameworkStores）和令牌提供程序（AddDefaultTokenProviders）。可以添加
的其他提供程序则用于错误、密码验证器、角色管理器、用户管理器和用户验证器（代码
文件MenuPlanner/Startup.cs）：
      public void ConfigureServices(IServiceCollection services)
      {
        services.AddEntityFramework()
          .AddSqlServer()
          .AddDbContext(options =>
          options.UseSqlServer(
            Configuration["Data:DefaultConnection:ConnectionString"]))
          .AddDbContext(options =>
          options.UseSqlServer(
            Configuration["Data:MenuCardConnection:ConnectionString"]));
        services.AddIdentity()
          .AddEntityFrameworkStores()
          .AddDefaultTokenProviders();
        services.Configure(options =>
        {
          options.AppId = Configuration["Authentication:Facebook:AppId"];
          options.AppSecret = Configuration["Authentication:Facebook:AppSecret"];
        });
        services.Configure(options =>
        {
          options.ClientId =
          Configuration["Authentication:MicrosoftAccount:ClientId"];
          options.ClientSecret =
          Configuration["Authentication:MicrosoftAccount:ClientSecret"];
        });
        // etc.
      }
41.10.3 执行用户注册
现在进入为注册用户而生成的代码。功能的核心在AccountController类中。控制器类
应用了Authorize特性，它将所有的动作方法限制为通过身份验证的用户。构造函数接收一
个用户管理器、登录管理器和通过依赖注入的数据库上下文。电子邮件和SMS发送方用于
双因素身份验证。如果没有实现生成代码中的空AuthMessageSender类，就可以删除
IEmailSender和ISmsSender的注入（代码文件
MenuPlanner/Controllers/AccountController.cs）：
    [Authorize]
    public class AccountController : Controller
    {
      private readonly UserManager _userManager;
      private readonly SignInManager _signInManager;
      private readonly IEmailSender _emailSender;
      private readonly ISmsSender _smsSender;
      private readonly ApplicationDbContext _applicationDbContext;
      private static bool _databaseChecked;
      public AccountController(
        UserManager userManager,
        SignInManager signInManager,