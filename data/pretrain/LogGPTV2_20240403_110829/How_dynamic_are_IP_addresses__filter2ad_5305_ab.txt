blocks by grouping addresses with high usage-entropies. Finally,
UDmap estimates IP volatility, and based on it, further ﬁlters out
proxy cluster IP addresses. The ﬁnal output is a list of adjusted
IP blocks and the associated address volatility. We present each of
these steps in detail next.
4.2 Multi-User IP Block Selection
The ﬁrst step of UDmap is to identify candidate dynamic IP ad-
dress blocks. Intuitively, if more than one Hotmail user is observed
to use the same IP address, it is likely that this IP has been assigned
to more than one host and hence is a candidate dynamic IP address.
However, counting the number of users for each individual IP in a
straightforward way is not robust due to two reasons: (1) it is likely
that not all the addresses in a block will appear in the input dataset;
(2) a small number of individual IPs in a dynamic IP block may
still appear static by having a single user (e.g., a dynamic IP as-
signed to a home router that rarely reboots). Hence UDmap looks
for multi-user IP blocks. In particular it selects a set of m contin-
uous IP addresses IP1 to IPm as a candidate block B(IP1, IPm) if
the block has the following properties:
1. IPs in a block must belong to the same AS and also map to
the same preﬁx entry in a BGP routing table.
2. Each block meets a minimum size requirement by having at
least k IP addresses, i.e., m ≥ k.
3. Both the beginning address (IP1) and the ending addresses
(IPm) must be present in the input trace. Further, the block
should not have signiﬁcant gaps, where we deﬁne a gap as
a region in the address space with g or more continuous IPs
that were either not observed in our data, or used by at most
a single Hotmail user.
By property (1), we ensure that IP addresses within a same block
are under a single domain and topologically close. Properties (2)
and (3) ensure that we observe a signiﬁcant fraction of the multi-
user IP addresses within the block. Notice that by returning IP
blocks, IP addresses that were not present in the input data can be
included in the output.
We used the BGP routing table collected on August 1, 2006 by
Routeviews [25] to extract IP preﬁx entries. The parameters k and
g have potential impact on both the coverage and the returned IP
block sizes. Intuitively, a small k is likely to have a large cover-
age by returning even small dynamic IP ranges, while a large k
is more restrictive in considering only large, actively used address
blocks. A small g tends to break a large address range into small
pieces, while a large g is more likely to return large blocks but may
potentially result in more false positives (i.e., static IP addresses
mistakenly identiﬁed as dynamic ones). For better coverage and
1000
800
600
400
200
D
I
r
e
s
U
1
0.8
0.6
0.4
0.2
y
p
o
r
t
n
E
0
1500
1600
1700
1800
IP ID (within the block)
1900
0
0
20
Normalized sample usage−entropy
Normalized usage−entropy
40
60
80
100
120
Number of IPs used by U(i)
y
p
o
r
t
n
e
e
g
a
s
u
P
I
1
0.8
0.6
0.4
0.2
0
5
10
15
20
25
IP ID (within the block)
y
p
o
r
t
n
e
e
g
a
s
u
d
e
h
t
o
o
m
S
1
0.8
0.6
0.4
0.2
0
30
35
5
10
15
20
25
30
35
IP ID (within the block)
Figure 3: (a) Section of a user-IP matrix, (b) Normalized usage-
entropy vs. normalized sample usage-entropy for the IPs in (a)
Figure 4: (a) Signal pulses for sample usage-entropy of IP ad-
dresses, (b) Smoothed signal after median ﬁlter
fewer false positives, we set both parameters to 8, which is often
the minimum unit for assigning IP address ranges. We discuss the
resulting coverage and block sizes further in Section 5.2 and 5.3.
4.3 IP Usage-Entropy Computation
After UDmap obtains a list of multi-user IP blocks as candidates,
it needs to further distinguish between a dynamic IP address that
had been assigned to multiple hosts (thus multiple users) and a sta-
tic IP address linked to a single host but shared by multiple users.
Users of dynamic IP addresses can be expected to log in using other
IP addresses in the same block. Hence, over a period of time, a dy-
namic IP will not only be used by multiple users, but these users
also “hop around” by using other IPs in the same block (we dis-
cuss other similar cases, such as proxies and NATs, in Section 4.5).
From a practical viewpoint, dynamic IPs are often assigned through
random selection from a pool of IP addresses [5], and when users
“hop around”, the probability of them using an IP in the pool can
be expected to be roughly uniform
The IP usage-entropy computation is performed on a block-by-
block basis. Let U denote the set of all users and |U| the to-
tal number of users in the trace. For every multi-user IP block
B(IP1, IPm) with m IPs, we can construct a binary user-IP matrix
A ∈ {0, 1}|U|×m, where we set A(i, j) to 1 if and only if user i
has logged into Hotmail from IP address IPj. Figure 3(a) shows a
section of a user-IP matrix pertaining to a multi-user IP block with
2432 IP addresses.
Given the set of all users U (j) who used a particular IPj, we
would like to know the probability that these users used other IP
addresses in B(IP1, IPm). To quantify the skewness of the afore-
mentioned probability distribution, we introduce a metric, called IP
|U (j)|×m
usage entropy H(j). If we form a sub-matrix A
of A that
j
contains only the rows corresponding to users in U (j) (illustrated
in Figure 3(a), where UDmap selects only the rows pertaining to
the highlighted IP), H(j) can be computed as:
H(j) = − m
(cid:0)
k=1
( ak
zj
log2( ak
zj
))
where ak is the k-th column sum of Aj and zj is the sum of all the
entries in Aj.
Since the block size m may vary across different multi-user blocks,
we deﬁne two normalized versions of the usage entropy, called
normalized usage-entropy HB(j) and normalized sample usage-
entropy HU (j), computed as follows:
formly distributed, while HU (j) quantiﬁes the probability skew-
ness only across the set of IP addresses (denoted as C(j)) that
were actually used by U (j). In the ideal case, where IP addresses
are selected randomly from the entire block, we can expect the
normalized usage-entropy HB(j) of most of the IP addresses in
the block to be close to 1 (over time). However, realistic traces
are only of limited duration. Hence the actual observed set of IP
addresses used by U (j), during the trace collection period, may
only be a fraction of all the IP addresses in the block, especially
when the block size is large. As illustrated by Figure 3(b), due
to the large block size (m = 2432), normalized usage-entropies
HB(j) tend to be relatively small, and in this case reduce to a
function of the total number of addresses |C(j)| used by U (j).
With limited data, the normalized sample usage-entropy HU (j) is
an approximation to the ideal HB(j) as HU (j) better estimates the
degree of uniformity in address selection among the set of users
U (j). For our one-month trace, UDmap adopts HU (j) in com-
puting IP usage-entropies. With enough observation from longer-
term data, we expect C(j) → m for dynamic IP blocks, and hence
HU (j) → HB(j).
4.4 Dynamic IP Block Identiﬁcation
After UDmap computes the IP usage-entropies, one might con-
clude that those IPs with usage-entropies close to 1 are dynamic
IP addresses. However, we emphasize that dynamic IP addresses
manifest as blocks. Therefore, for each multi-user IP block, we pro-
ceed to identify sub-blocks of IP addresses within each multi-user
IP block such that the usage-entropies of a majority of addresses in
a sub-block are above a pre-speciﬁed threshold He.
To achieve this ﬁne-grained segmentation, UDmap regards usage-
entropy as a discrete signal s(i) in the address space, where s(i)
can be either HB(i) or HU (i). Figure 4(a) illustrates this represen-
tation by plotting the normalized sample usage-entropies HU (i) as
signal pulses. Note the time axis of the discrete signal is the same as
that of the IP address space. UDmap then employs signal smooth-
ing techniques to ﬁlter the noise that appears as small “dips” along
the signal. This signal noise exists due to the fact that the corre-
sponding IP addresses were either not used by any user, or have
small usage-entropies due to insufﬁcient usage. We use the well
known median ﬁlter method for suppressing isolated out-of-range
noise [4]. This method replaces every signal value with the median
of its neighbors. Speciﬁcally, for each variable IPi, the smoothed
signal value s
(cid:2)(i) is computed as:
(cid:2)(i) = median({s((cid:2)i − w/2(cid:3), . . . , s((cid:2)i + w/2(cid:3))})
s
HB(j) = H(j)/log2m
HU (j) = H(j)/log2(|C(j)|)
(1)
(2)
Here, HB(j) quantiﬁes whether the probability of users U (j)
(the set of users that used IPj) using other IPs in the block is uni-
where w is a parameter of the median ﬁlter that determines the
neighborhood size. Since our goal of signal smoothing is to adjust
the signal “dips” due to insufﬁcient usage of a few individual IPs,
UDmap applies the median ﬁlter to only those IP addresses with
entropies lower than the predeﬁned threshold He. Additionally, we
do not apply median ﬁltering if a signal value does not have enough
neighbors (boundary conditions). In our current process, we set He
to 0.5. As illustrated in Figure 4(a), the normalized sample usage-
entropies are well separated in most cases, and thus not sensitive to
He. We set w to 5, so that the signal smoothing process can smooth
over up to 2 consecutive dips.
After applying the median ﬁlter, the identiﬁcation of dynamic
IP blocks is straightforward: UDmap sequentially segments the
multi-user blocks into smaller segments by discarding the remain-
ing “dips” after signal smoothing. As illustrated in Figure 4(b), the
signal smoothing process “paves over” the sporadic dips in the orig-
inal signal, but preserves large “valleys”. In this example, UDmap
will return two dynamic IP blocks.
4.5 Volatility Estimation and Proxy Removal
The ﬁnal step in classifying dynamic IP address blocks is to es-
timate IP volatility. This step is critical, as it estimates the fre-
quency at which host identity changes with respect to an IP address.
UDmap considers two metrics for every identiﬁed dynamic IP ad-
dress: (1) the number of distinct Hotmail users that have used this
address in input data, and (2) the average Hotmail inter-user dura-
tion, i.e., the time interval between two different users, consecutive
in time, using the same IP. Recall our input data contains timing
information pertaining to the ﬁrst and last time a user connected to
Hotmail on a per user-IP pair basis. UDmap leverages these two
features to estimate the inter-user duration.
Another important purpose of IP volatility estimation is to re-
move a class of potential false positive addresses. Using just the
previous three steps, we expect UDmap to generate the following
two classes of false positives. The ﬁrst class comprises groups of
proxies that employ load balancing to designate users to different
servers. The second case includes Internet ca´fes, teaching clusters,
and library machines, where a user physically logs in to any one of
a group of equivalent machines.
Both cases correspond to a cluster of machines that are conﬁg-
ured with a range of continuous static IP addresses, where a user
may use any one of the machines. The difference between these
two cases is that, for the ﬁrst case, multiple users can concurrently
access Hotmail through a single proxy, while in the second case,
requests from different users appear sequentially as users can not
simultaneously log on to the same machine.
The activity patterns of these two types of static server-clusters
are very similar to dynamic IP blocks: they both manifest as blocks,
with multiple users being associated with different IP addresses.
Therefore, without additional attention, UDmap could potentially
misclassify them as dynamic IPs. Note that NAT boxes with single
static IP addresses do not manifest as blocks and therefore will not
be misclassiﬁed.
Using IP volatility estimation, UDmap can easily ﬁlter the ﬁrst
class of false positives by removing IPs with a large number of
concurrent accesses. More speciﬁcally, UDmap discards consecu-
tive IP addresses that are each associated with a large number of
users (≥ 1000) and also exhibit very short inter-user duration (≤
5 minutes). We determine the parameters by examining the user
population of proxy IPs (identiﬁed through rDNS lookup with the
keyword proxy): they corresponds to 5% false negative rate of
known proxies. UDmap currently does not remove the second class
of false positives. We will further discuss this topic as future work
in Section 8.
5. UDMAP IPS AND VALIDATION
In this section, we present and validate the set of dynamic IP
addresses output by running UDmap over our trace. For brevity,
s
k
c
o
b
l
f
o
n
o
i
t
c
a
r
f
e
v
i
t
l
a
u
m
u
C
UDmap IPs
Proxy IPs
# IPs
102,941,051
2,522
# ASes
5,891
95
# Blocks
958,822
242
Table 1: IP blocks identiﬁed by UDmap
1
0.8
0.6
0.4
0.2
0
2
8
32
256
UDmap IP blocks
Dynablock IP blocks
8096 65536
Block size
2^20
l
s
k
c
o
b
f
o
n
o
i
t
c
a
r
f
e
v
i
t
a
u
m
u
C
l
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
2  
4
8  
16 
32 
Block size
64
128
256
(a) UDmap IP blocks
(b) Proxy IP blocks
Figure 5: Cumulative distribution of IP block sizes
we refer to these IPs as UDmap IPs. We acknowledge that, given
the limited duration of data collected from a single vantage point,
UDmap might not be able to identify those dynamic IP addresses
that were used infrequently in our data. With sufﬁcient input data,
we expect the UDmap coverage to increase over time.
5.1
Input Dataset
Our input dataset contains more than 250 million unique users
and over 155 million IP addresses, spanning across 20,167 Au-
tonomous Systems (ASes). Thus it covers a signiﬁcant, actively
used portion of the Internet. Furthermore, Hotmail is widely used
by home users, where network connections are typically conﬁgured
to use dynamic IP addresses. We assume, therefore, that our trace
contains a larger fraction of dynamic IP addresses than that would
be expected from either random sampling or information collected
within an enterprise-network environment. Thus we believe our
dataset is sufﬁcient for a study aimed at understanding the broad
scope and usage patterns of dynamic IP addresses.
5.2 UDmap IP Blocks
Out of the approximately 155 million IP addresses in input data,
around 117 million were used by multiple users, based on which
UDmap identiﬁed around 2 million multi-user IP blocks with a to-
tal of 169 million IPs. As shown in Table 1, using the 2 million
multi-user IP blocks as candidates, UDmap returned over 102 mil-
lion dynamic IP addresses and 2522 large-scale proxy IP addresses.
Out of these 102 million dynamic IPs, about 95 million were in our
input data. Thus more than half (61.4%) of the IP addresses ob-
served in the trace are dynamic. Around 6.7% of the 102 million
dynamic IP addresses did not appear in the trace, but were included
because they were located within the address blocks returned by
UDmap.
The high percentage of dynamic IP addresses in our input data
suggests that dynamic IPs are a signiﬁcant fraction of the address
space. This implies that applications cannot readily assume that IP
addresses are synonymous with host identities.