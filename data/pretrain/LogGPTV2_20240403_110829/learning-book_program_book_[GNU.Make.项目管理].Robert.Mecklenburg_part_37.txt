.INTERMEDIATE:S(BOOK_FO_OUT)
S(BOOK_FO_OUT):$（ALL_XML_OUT)S(OUTPUT_DIR)/validate Makefile
对FOP的支持
FOP:=org.apache.fop.apps.Fop
---
## Page 237
makefile实例
227
DEBUG_FOP-如果定义了，则可以看到fop处理器的输出
ifndef DEBUG_FOP
FOP_FLAGS:=-q
FOP_OUTPUT:=IS（SED)-e'/notimplemented/d
-e`/relative-align/d
-e'/xsl-footnote-separator/d
endif
CLASSPATH——为fop定义适当的CLASSPATH
export CLASSPATH
CLASSPATH =$(patsubst ;,,
$（subst；，,
S(addprefixc:/usr/xslt-process-2.2/java/,
$（addsuffix.jar:,
xalan
xercesImpl
batik
fop
jimi-1.0
avalon-framework-cvs-20020315))))
#.pdf-从fo输人产生pdf输出的模式规则
8.pdf:.fo
$(kill-acroread)
java -Xmx128M $（FOP)S（FOP_FLAGS)$1{printf"$>:0：&s\n",$S0}I\
S(EGREP)
S(TOUCH)$@
此项检查会搜索m4宏文件中重复的宏定义。由于m4处理器并不会把重复定义视为错
误，所以我才特别加人此项检查。整个处理流程是这样的：从每个宏取出已定义的符号、
排序、计算重复的数目、滤除重复数为1的每一行，最后使用egrep以作为它的结束状
态。同样地，注意到结束状态经过取反，所以只有在找到东西时才会产生make的错误。
ALL_EXAMPLES:= $(TMP)/a11_examp1es
$（OUTPUT_DIR)/chk_orphaned_examples:S(ALL_EXAMPLES)$(DEPENDENCY_FILES)
S（filter .d,s~)1
$(SORT)-U1
：
comm-13-S（filter-out 8.d,$~)
（HO）
INTERMEDIATE:$(ALL_EXAMPLES)
S(ALL_EXAMPLES):
查找未使用的范例
S(QUIET)1S-P S（EXAMPLES_DIR)1
$（AwK）/CVS/{next）
/\//（print substr（$s0,1，1ength-1））'>$@
最后一项检查将会搜索尚未被正文引用到的范例。此处的工作目标使用了一个有趣的技
巧，它需要两组输人文件：所有的范例目录以及所有的XML依存文件。它会使用fi1ter
和filter-out将必要条件列表分成这两组。范例目录列表的产生是通过ls-p（这会
为每个目录附加一个斜线符号）以及扫描斜线符号。整个处理流程是这样的：从必要条
件列表中取出XML依存文件，输出其中所找到的范例目录，移除任何重复的部分。这
些就是在正文中被实际引用到的范例。这份列表会被放入comm的标准输入，然而所有
已知的范例目录会被放人第二个文件中。-13选项用来告诉comm应该只输出第二个字
段所找到的每一行（即没有被依存文件引用到的目录）。
Linux内核的makefile
Linux内核的makefile是一个“在复杂的编译环境中使用make”的绝佳范例。尽管说明
Linux内核的结构和编译方式已经超出了本书的范围，不过我们可以看看内核编译系统
使用make时，一些值得注意的用法。http://archive.linuxsymposium.org/ols2003/
---
## Page 240
230
第十一章
Proceedings/All-Reprints/Reprint-Germaschewski-OLS2003.pdf上对2.5/2.6版内核的编
译过程以及从2.4版以来的变革有更完整的讨论。
因为makefile有如此多的方面的功能，我们只会探讨其中适合用在各种应用程序中的功
能。首先，我们将会看到如何使用单字母make变量来模拟单字母命令行选项，以及如
何分开源文件和二进制文件树来让用户能够从源文件树调用make。接着，我们将会查
看makefile控制输出细节的方法。然后，我们将会看到一些最值得注意的用户自定义函
数，以及这些函数如何降低代码的重复性、改进可读性以及提供封装性。最后，我们将
会看到makefile实现简易说明措施的方法。
Linux内核的编译过程就是大部分自由软件所依循的模式：设定配置、进行编译、进行
安装。尽管许多自由和开放源代码软件包还会用到一个独立的configure脚本（通常是由
autoconf所建立），不过Linux内核的makefile却是以make进行配置的设定，并且间
接调用其他脚本与辅助程序。
当配置设定阶段完成之后，只要使用make或makeal1就可以编译内核本身、所有的
模块以及经压缩的内核映像（依次是vmlinux、modules和bzImage等工作目标）。每
次编译内核的时候都会把version.o文件中所提供的具唯一性的版本编号链接进内核，此
编号（以及version.o文件）会被makefile本身所更新。
其中，你可能会想要在自已的makefile中采用的makefile功能包括：命令行选项的处理、
命令行意图的分析、在各编译过程之间存储编译状态以及管理make的输出。
命令行选项
此makefile的第一个部分包括了从命令行来设定编译选项的代码。下面摘录了用来控制
verbose标记的代码：
#To put more focus on warnings,be less verbose as default
#Use‘make V=1'tosee the full comnands
ifdefV
ifeq（*$（originv)·,*command 1ine*)
KBUILD_VERBOSE =S(V)
endif
endif
ifnGef KBUILD_VERBOSE
KBUILD_VERBOSE =0
Endif
嵌套的一对ifdef/ifeg用来确保，只有当v是在命令行上设定的，才会设定
KBUILD_VERBOSE变量。如果V是在环境或makefile中设定的，将不会有任何效果。如
---
## Page 241
makefile实例
237
果KBUILD_VERBOSE尚未设定，随后的ifndef条件语句将会关闭verbose选项。如果你
真的要从环境或makefile来设定verbose选项，你必须设定KBUILD_VERBOSE而不是V。
然而，请注意，直接在命令行上设定KBUILD_VERBOSE也会让你获得预期的结果。当你
要编写一些脚本（或别名）来调用makefile时，这个功能可能会很有用。这些脚本本身
就具备说明性，就如同使用GNU的长选项。
其他的命令行选项，sparse检查（c）和外部模块（M），也都需要仔细检查，以避免在
makefile中设定它们。
makefile的下一个区段用来处理输出目录选项（o）。这是一段相当复杂的代码，为了将
它的结构强调出来，我们会把摘录内容中某些部分替换成删节符号：
#To locate output files ina separate directory two syntax'es are
supported.
#In both cases the working directory must be the root of the kernel src.
#1）O=
#Use“make O=dir/to/store/output/files/"
#
#2)SetKBUILD_OUTPUT
#Set the environment variabie KBUILD_ouTPuT topoint to the directory
#wherethe outputfiles shall beplaced.
#export KBUILD_oUTPUT=dir/to/store/output/files/
#make
#The O= assigment takes precedence over the KBUILD_OUTPUT environment variable.
KBUILD_SRC is set on invocation of make in OBJ directory
#KBUILD_SRC is not intended to be used by the regular user （for now)
ifeq （S（KBUILD_SRC)，)
#OK,Make called in directory where kernel src resides
#Do we want to locate output files in a separate directory?
ifdef o
ifeq（"s（origin O)*,"command1ine")
KBUILD_OUTPUT:=$(O）
endif
endif
ifneq($(KBUILD_OUTPUT),)
.PHONY:S(MAKECMDGOALS)
$（filter-out _all,S(MAKECMDGOALS))_a1l:
$（if S(KBUILD_VERBOSE:1=),@)$(MAKE)-C S(KBUILD_OUTPUT)
KBUILD_SRC=S(CURDIR)
KBUILD_VERBOSE=S(KBUILD_VERBOSE)
KBUILD_CHECK-S(KBUILD_CHECK)KBUILD_EXTMOD=*$(KBUILD_EXTMOD)"
-f S(CURDIR)/Makefile $@
#Leave processing to above invocation of make
skip-makefile :=1
---
## Page 242
232
第十一章
endif # ifneq（S（KBUILD_OUTPUT),)
endif #ifeq (S（KBUILD_SRC),)
ifeq (S(skip-makefile).)
...此处是makefile的其余部分..
endif# skip-makefile
基本上，这段代码是说，如果KBUILD_OUTPUT设定了，就会在KBUILD_OUTPUT所定义
的输出目录中递归调用make。KBUILD_SRC会被设定为make原本被执行的自录，
makefile也是从该处取得的。make看不到makefile的其余部分，因为skip-makefile
将会被设定。递归式make将会重新读取makefile，不过只有这一次运行中KBUILD_SRC
才会被设定，所以skip-makefile将不会被定义，于是makefile的其余部分将会被make
所读取和处理。
命令行选项的处理过程到此结束。ifeq（$（skip-makefile），）区段中包含了makefile
的其余部分。
配置与编译
target）。配置工作目标具有menuconfig、defconfig等形式，维护工作自标（maintenance
target），比如clean，也会被视为配置工作目标。其他工作目标，像all、vmlinux
和modules，则属于编译工作目标。配置工作目标的调用结果主要是两个文件：.config
和.config.cmd。这两个文件会被makefile的编译工作目标引l人，而不会被配置工作目标
引入（因为它们就是配置工作目标设定的）。你还可以在调用make的命令行上同时指定
配置工作自标以及编译工作自标，例如：
$ make oldconfig all
就此例来说，makefile会递归调用它自己来个别处理每个工作目标，因此配置工作目标
与编译工作目标的处理是分开进行的。
用来控制配置工作目标、编译工作目标以及两者并用的代码的开头如下所示：
#To make sure we do not include.config for any of the *config targets