puted in the larger ring Z2𝑘+2𝑠 . Init, Random, Affine
Combination, Input and Open work exactly as in
Z2𝑘
Π
ComZK-a
CheckZero Let 𝐻 : {0, 1}∗ → {0, 1}𝑠 denote a random or-
acle. For (CheckZero, [𝑥1], . . . , [𝑥𝑛]), the parties proceed
as follows:
(1) If one of the 𝑥𝑖 is not equal to 0, then P aborts.
(2) They run [𝑟1], . . . , [𝑟𝑛] ← Random() and compute
vole2k
.
[𝑦𝑖] ← [𝑥𝑖] + 2𝑘 · [𝑟𝑖] for 𝑖 = 1, . . . , 𝑛.
(3) P sends 𝑝1, . . . , 𝑝𝑛 to V where 𝑝𝑖 := ( ˜𝑦𝑖 − 𝑦𝑖)/2𝑘 de-
notes the upper 2𝑠 bits of ˜𝑦𝑖.
(4) P computes ℎ ← 𝐻(𝑀[𝑦1], . . . , 𝑀[𝑦𝑛]) and sends ℎ ∈
{0, 1}2𝜆 to the verifier.
∈ Z2𝑘+2𝑠
for 𝑖 = 1, . . . , 𝑛, checks ℎ
(5) Finally, V computes 𝑀[𝑦𝑖]′ ← Δ · 2𝑘 · 𝑝𝑖 +
?
𝐾[𝑦𝑖]
=
𝐻(𝑀[𝑦1]′, . . . , 𝑀[𝑦𝑛]′) and outputs (success) if the
equality holds and aborts otherwise
CheckZero’ CheckZero′ denotes a variant of the above
which checks that ˜𝑥𝑖 = 0 (mod 2𝑘+𝑠), and is only used in
the multiplication check below. The difference is that only
the upper 𝑠 bits of the ˜𝑥𝑖 are hidden by the 𝑝𝑖 (now from
Z2𝑠 ) instead of the upper 2𝑠 bits. The macro Open′([𝑥], lst)
is similarly an adaption revealing the lower 𝑘 + 𝑠 bits and
using CheckZero′.
MultiplicationCheck The parties proceed on input
(CheckMult, ([𝑎𝑖], [𝑏𝑖], [𝑐𝑖])𝑛
(1) P aborts if 𝑎𝑖 · 𝑏𝑖 ≠ 𝑐𝑖 (mod 2𝑘) for some 𝑖 = 1, . . . , 𝑛.
(2) Let lst := ∅.
(3) Generate ([𝑥𝑖])𝑛
𝑖=1 ← Random() followed by [𝑧𝑖] ←
𝑖=1) as follows:
Input(𝑥𝑖 · 𝑏𝑖) for 𝑖 = 1, . . . , 𝑛.
(4) V sends a random value 𝜂 ∈𝑅 Z2𝑠 to P.
(5) Compute 𝜀𝑖 ← Open′(𝜂·[𝑎𝑖]−[𝑥𝑖], lst) for 𝑖 = 1, . . . , 𝑛.
(6) Run CheckZero′((𝜂 · [𝑐𝑖] − [𝑧𝑖] − 𝜀𝑖 · [𝑏𝑖])𝑛
𝑖=1, lst). If
successful, V returns (success), otherwise abort.
Figure 14: Protocol Π
Mac’n’Cheese-style [4] multiplication check.
ComZK-b instantiating F Z2𝑘
Z2𝑘
ComZK using a
Lemma 5.3. If P∗ and V run the CheckMult protocol of Π
Z2𝑘
com−a
with parameters 𝐵, 𝐶 ∈ N such that 𝐶 ≥ 𝐵 and inputs ([𝑎𝑖], [𝑏𝑖], [𝑐𝑖])𝑛
𝑖=1
and there exists an index 1 ≤ 𝑖 ≤ 𝑛 such that 𝑎𝑖 · 𝑏𝑖 (cid:46)𝑘 𝑐𝑖 then
V outputs (success) with probability at most 𝜀cm + 𝜀cz with 𝜀cm :=
, and 𝜀cz the soundness error of CheckZero given in Lemma 5.2.
(cid:0)𝑛𝐵+𝐶
(cid:1)−1
𝐵
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea202The CheckMult protocol is based on the corresponding check
from Wolverine [31], and the same analysis also applies to the Z2𝑘
case. The proof of Lemma 5.3 can be found in Appendix E.3.
5.3.2 Proof of Π
in the following theorem:
Z2𝑘
ComZK-b. The formal statement of security is given
Theorem 5.4. The protocol Π
Z2𝑘
ComZK-b (Figure 14) securely realizes
the functionality F Z2𝑘
ComZK: No environment can distinguish the real
execution from a simulated one except with probability (𝑞cz + 𝑞cm) ·
2−𝑠+1 + 𝑞cm · 2−𝑠, where 𝑞cz is the sum of calls to CheckZero and
Open, and 𝑞cm the number of calls to CheckMult.
The proof of Theorem 5.4 is given in Appendix E.4. Except for the
simulation of CheckMult, it is largely similar to the proof of Theo-
rem 5.1. Again, we first prove a lemma about the soundness error of
the CheckMult operation, that we use to show indistinguishability
of our simulation.
Lemma 5.5. If P∗ andV run the CheckMult protocol of Π
Z2𝑘
with inputs ([𝑎𝑖], [𝑏𝑖], [𝑐𝑖])𝑛
𝑖=1 such that there exists an index 1 ≤ 𝑖 ≤
ComZK-b
𝑛 such that 𝑎𝑖 · 𝑏𝑖 (cid:46)𝑘 𝑐𝑖, then V outputs (success) with probability
at most 𝜀′
cm := 2−𝑠, and 𝜀cz the soundness error of
CheckZero given in Lemma 5.2.
cm + 𝜀cz with 𝜀′
The proof of Lemma 5.5 is given in Appendix E.5.
5.4 Instantiating VOLE mod 2𝑘
Our ZK protocol over Z2𝑘 requires an actively secure protocol for
VOLE in Z2𝑘+𝑠 . Unfortunately, this means we cannot take advantage
of the most efficient LPN-based protocols [8, 31], which currently
only have an actively secure setup protocol over fields. We consider
two possible alternatives. First, as done in [12], we can use the pro-
tocol for correlated oblivious transfer over general rings from [29],
which gives an amortized communication cost of 𝑠(𝑘 + 𝑠) bits per
VOLE. This is quadratic in the bit length, which will be a bottleneck
for our ZK protocols in terms of communication.
Alternatively, we can obtain sublinear communication using LPN-
based VOLE, but using generic actively secure 2-PC for the setup.
Here, we can use either the primal variant of LPN over rings, as
done in [30], or dual-LPN based on quasi-cyclic codes, as used over
Z2 in [8] (these can also be defined over Z2𝑘 under an analogous
hardness assumption). Since dual-LPN has lower communication,
in the following we assume this variant. Now, for the setup pro-
cedure, if we produce a VOLE of length 𝑁 = 107 with parameters
(𝑐, 𝑡) = (4, 54) from [8], the bottleneck is around 2𝑡 log(𝑐𝑁/𝑡) AES
evaluations in 2-PC, which gives a total of ≈ 1 AND gate per VOLE
output. Using a TinyOT-like protocol [20] combined with LPN-
based OT [8, 34], each AND gate needs around 32 bits of communi-
cation, more than an order of magnitude less than the first approach
(note that TinyOT incurs a much larger round complexity).
For future work, an important problem is to adapt the current
techniques for actively secure VOLE over fields to the ring setting,
which would greatly reduce the preprocessing cost.
Table 1: Amortized communication cost in bits per instruc-
tion. 𝑘 is the size of the modulus, 𝑠 depends on the statistical
security parameter, 𝐵 is the bucket size of Π
Z2𝑘
ComZK-a.
Protocol
Π
Π
Z2𝑘
ComZK-a
Z2𝑘
ComZK-b
CheckZero
𝑠 & 1 VOLE
2𝑠 & 1 VOLE
Open
CheckMult
𝑘 + 𝑠 & 1 VOLE
𝑘 + 2𝑠 & 1 VOLE
3𝐵(𝑘 + 𝑠) & 4𝐵 VOLE
2𝑘 + 4𝑠 & 3 VOLE
Step 8a and Π
Z2𝑘
ComZK-b
Z2𝑘
ComZK-a
The amortized communication costs per checked commitment
6 EVALUATION
6.1 Communication Complexity
, V samples a
Z2𝑘
6.1.1 Proofs over Z2𝑘 . In the protocol Π
permutation 𝜋 in CheckMult and sends it to P. To reduce the
ComZK-a
communication costs, V can send a random seed instead, which
both parties expand with a PRG to derive the desired random values.
In this way, V needs to transfer only 𝜆 bits (for a computational
security parameter 𝜆) instead log2(𝑛 · 𝐵 + 𝑐)! bits for CheckMult.
As described in Section 5.1 and Section 5.2, we need to randomize
the upper 𝑠 or 2𝑠 bits when doing a CheckZero or Open operation.
We note that in Π
Step 5 the values
get already masked with uniformly random values directly before
the Open operation. Hence, the extra masking step during Open
can be omitted. A similar optimization can be applied in ΠConv.
and multiplication triple of both protocols are given in Table 1.
6.1.2 Verifying Conversions. The amortized costs for verifying the
correctness of a single conversion tuple ([𝑥0]2, . . . , [𝑥𝑚−1]2, [𝑥]𝑀)
are given in Table 2, in terms of the amount of communication
required, and preprocessed correlated OTs or VOLEs. Note that to
simplify the table, we assume that 𝑚 ≈ log 𝑀, and so count the
cost of sending one Z𝑀 element in the protocol as 𝑚 bits. Also,
in this analysis we ignore costs that are independent of the num-
ber of conversions being checked, such as the small number of
checks in the faulty daBit protocol. In Appendix D, we give a more
detailed breakdown of these costs, including complexities of the
sub-protocols bitADDcarry and convertBit2A.
The “naïve” way of verifying the a conversion would be to have
the prover provide both a set of bits 𝜒 = {[𝑥0]𝑝, . . . , [𝑥𝑚−1]𝑝} as
well as the value [𝑥]𝑝 and then verify that each element in 𝜒 is in
fact a bit, as well as that they sum to the value [𝑥]𝑝. This requires
sampling 𝑚 random VOLEs as well as fixing each of these to a value
chosen by the prover. Afterwards the prover proves that each is a
bit by computing CheckZero([𝑥𝑖]𝑝 · ([𝑥𝑖]𝑝 − 1)), [𝑥𝑖]𝑝 ∈ 𝜒 which
requires multiplication triples over F𝑝 as well as communication.
We list the cost of this “naïve” way of verifying the conversion
Table 2. To verify the multiplications we use the basic version
of Mac’n’Cheese [4]. The “basic” baseline comparison in Table 2
comes from a straightforward application of using edaBits for
ZK, similarly to [16]. Namely, this protocol would first generate
consistent edaBits using [16], and then verify the conversion using
a single binary addition circuit (similar to the bucket-check in
Figure 3, step 6). However, this requires doing the check with 𝑚
verified multiplication triples (over Z2) and a single daBit, which
in turn requires an additional verified multiplication (over Z𝑀). To
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea203Table 2: Costs of verifying conversions between Z2 and Z𝑀
in terms of COTs, VOLEs, and additional communication.
The “basic” protocol uses edaBits directly, while “Section 3”
uses our optimizations. “QS-Circuit” and “QS-Poly” refer to
variants that use [33] for circuits and sets of polynomials re-
spectively. 𝑚 ≈ log(𝑀), 𝑘 denotes the bitsize of the converted
value, and 𝐵 is the bucket size. For Z2𝑘 , the costs for Π
are given. The Π
of communication (see Section 5.2).
Z2𝑘
ComZK-a
Z2𝑘
ComZK-b variant requires 𝐵𝑠 additional bits
Protocol
naive, Z𝑝
basic, Z𝑝, log(𝑝) ≤ 𝑠
basic, Z𝑝, log(𝑝) > 𝑠
Section 3, Z𝑝
Section 3, Z2𝑘
QS-Circuit, Z𝑝
QS-Circuit, Z2𝑘
QS-Poly, Z𝑝
QS-Poly, Z2𝑘
Comm. in bits
2𝑚2
13𝐵𝑚 + 6𝑚 + 𝐵 − 1
10𝐵𝑚 + 6𝑚 + 𝐵 − 1
6𝐵𝑚 + 𝐵
5𝐵𝑚 + 𝐵𝑠 − 3𝐵
4𝐵𝑚 + 𝐵
3𝐵𝑚 + 𝐵𝑠 − 𝐵
3𝐵𝑚 + 2𝐵
2𝐵𝑚 + 𝐵𝑠
#COTs
0
4𝐵𝑚 + 3𝑚 + 𝐵 − 1
4𝐵𝑚 + 3𝑚 + 𝐵 − 1
4𝐵𝑚 + 𝐵
4𝐵𝑚 − 3𝐵
2𝐵𝑚 + 𝐵
2𝐵𝑚 − 𝐵
𝐵𝑚 + 2𝐵
𝐵𝑚
#VOLEs
2𝑚
11𝐵 − 4
8𝐵 − 4
2𝐵
𝐵
2𝐵
𝐵
2𝐵
𝐵
estimate these costs, we used [31] for verifying AND gates at a cost
of 7 bits per gate, and [4] for verifying triples in a larger field.
Since COTs and VOLEs can be obtained from pseudorandom
correlation generators with very little communication [31, 34], the
remaining online communication dominates. Hence, our optimized
protocol from Section 3 saves at least 50% communication. To give
a concrete number, e.g. for the Z𝑝 variant with 𝑚 = 32, when
verifying a batch of around a million triples and 40-bit statistical
security, we can use bucket size 𝐵 = 3, and the communication cost