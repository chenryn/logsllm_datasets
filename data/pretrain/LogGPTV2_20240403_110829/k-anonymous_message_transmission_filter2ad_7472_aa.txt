title:k-anonymous message transmission
author:Luis von Ahn and
Andrew Bortz and
Nicholas J. Hopper
k-Anonymous Message Transmission
Luis von Ahn
Andrew Bortz
Nicholas J. Hopper
Department of Computer Science
Carnegie Mellon University
Pittsburgh, PA 15213
{biglou,abortz,hopper}@cs.cmu.edu
ABSTRACT
Informally, a communication protocol is sender k - anony-
mous if it can guarantee that an adversary, trying to de-
termine the sender of a particular message, can only narrow
down its search to a set of k suspects. Receiver k-anonymity
places a similar guarantee on the receiver: an adversary, at
best, can only narrow down the possible receivers to a set of
size k. In this paper we introduce the notions of sender and
receiver k-anonymity and consider their applications. We
show that there exist simple and eﬃcient protocols which
are k-anonymous for both the sender and the receiver in a
model where a polynomial time adversary can see all traﬃc
in the network and can control up to a constant fraction of
the participants. Our protocol is provably secure, practical,
and does not require the existence of trusted third parties.
This paper also provides a conceptually simple augmentation
to Chaum’s DC-Nets that adds robustness against adver-
saries who attempt to disrupt the protocol through perpet-
ual transmission or selective non-participation.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Data communications; C.2.1 [Computer-Communication
Networks]: Network Architecture and Design—Network
communications; E.4 [Coding and Information Theory]:
Formal models of communication
General Terms
Design, Performance, Reliability, Security
Keywords
Anonymity, Anonymous Communication, Untraceable Com-
munication, Cryptographic Protocols, Privacy, Multiparty
Computation
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03,  October  27–31,  2003,  Was hington,  DC,  U SA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
1.
INTRODUCTION
Anonymous or untraceable communication protocols have
been studied extensively in the scientiﬁc literature (e.g. [4,
5, 16, 19]). These protocols address the problem of conceal-
ing who communicates with whom, as in the case of letters
from a secret admirer. The adversary, trying to determine
the sender or recipient of a message, is allowed to see all the
communications in the network, so a protocol for anony-
mous communication even allows Bob to send a secret love
letter to Eve, the network administrator. If used in prac-
tice, anonymous communication would have many impor-
tant applications such as guaranteeing anonymous crime tip
hotlines or allowing “whistle blowers” inside corrupt orga-
nizations to leak secrets to the press.
The goal is usually to guarantee full anonymity: an ad-
versary looking at the communication patterns should not
learn anything about the origin or destination of a particu-
lar message. To gain eﬃciency we concentrate on a weaker
goal, k-anonymity: the adversary is able to learn something
about the origin or destination of a particular message, but
cannot narrow down its search to a set of less than k par-
ticipants. In other words, k-anonymity guarantees that in
a network with n honest participants, the adversary is not
able to guess the sender or recipient of a particular message
with probability non-negligibly greater than 1/k, where k
is a constant smaller than, but otherwise not related to n.
We show that, in our adversarial model, there exists a k-
anonymous communication protocol that is far simpler and
more eﬃcient than any known fully anonymous communi-
cation protocol.
While k-anonymity is a weaker guarantee, it is still suf-
ﬁcient for a variety of applications. For example, in the
United States legal system, 2-anonymity would be enough to
cast “reasonable doubt,” thus invalidating a criminal charge,
while 3-anonymity would be enough to invalidate a civil
charge, in the absence of other evidence. This is especially
relevant after a federal judge in the United States ordered
Verizon Communications, a large ISP, to disclose the iden-
tity of an alleged peer-to-peer music pirate — a legal de-
cision that could make it easier for the music industry to
crack down on ﬁle swapping [3]. If the participants in the
peer-to-peer network were communicating k-anonymously,
the music industry could not prosecute individuals in this
manner. k-anonymity is also enough for the protection of
privacy in everyday transactions, as it eﬀectively breaks data
proﬁling techniques.1
1The concept of k-anonymity in fact comes from the privacy
literature [18].
122The protocol presented in this paper is extremely eﬃcient
and provably secure in a strong adversarial model: we as-
sume that the adversary can see all the communications be-
tween the participants and can control any constant frac-
tion (up to 1/2) of the participants. Participants owned by
the adversary can act arbitrarily and attempt to ruin the
communication protocol in any possible way — i.e., the ad-
versary not only tries to determine the sender or recipient
of particular messages, but also tries to render the anony-
mous communication protocol useless. We assume the ad-
versary is computationally bounded (polynomial time) and
non-adaptive (the adversary must choose which participants
to corrupt before the execution of the protocol). We also as-
sume that the network is not adversarially unreliable: mes-
sages between communicating parties are always delivered.2
This assumption is mostly for simplicity, as our protocol can
be used on top of schemes that guarantee reliable communi-
cation in an adversarially unreliable setting (e.g. [7]) at the
expense of eﬃciency.
For the most part, the study of anonymous communica-
tion has focused on eﬃciency rather than on provable secu-
rity, and many of the current systems fail when confronted
by suﬃciently powerful adversaries [20]. Our protocol is
provably secure in a strong adversarial model and achieves
part of its eﬃciency by allowing the anonymity guarantee to
vary: k can be any number between 1 and n (the number of
participants in the network). The eﬃciency of our protocol
is related to the size of k and for small values of k the proto-
col is eﬃcient enough to be used in practice. However, it is
important to mention that, while k-anonymity is suﬃcient
in many settings, there are cases where full anonymity is
required (e.g. ransom notes). If k equals n (i.e., in the case
of full anonymity) our protocol is simpler and as eﬃcient as
any known protocol that is provably secure in our adversar-
ial model. In this way, our protocol can also be viewed as a
conceptually simple and eﬃcient augmentation to Chaum’s
DC-Nets that adds robustness against adversaries who at-
tempt to disrupt the protocol through perpetual transmis-
sion or selective non-participation.
Related Work
Below we describe a few of the most inﬂuential solutions to
the anonymous communication problem and compare them
to our proposal.3
DC-Nets [4, 19]. DC-Nets is an anonymous broadcast
protocol that bases its anonymity on the strength of a se-
cure multiparty sum computation. In this fashion, it is one
of the few systems that provides provable security in the
absence of trusted parties. Although the original system by
Chaum [4] was susceptible to certain attacks, a later variant
by Waidner [19] provides an elaborate system of traps and
commitments that guarantees robustness and anonymity.
However, the poor scalability of DC-Nets makes it unsuit-
able for medium or large-scale use. In particular, in a net-
work of n users, DC-Nets incurs a cost of Ω(n3) protocol
messages per anonymous message in every case. Our pro-
2As long as the network is not adversarially unreliable, there
exist protocols (such as TCP) that provide reliable delivery.
3This section is only meant to provide a sample of the pre-
vious work so as to put our proposal in context; it is not
meant to provide a complete description of the literature.
See [9] for a more thorough listing.
tocol is similar to DC-Nets, but with a much simpler and
eﬃcient method of guaranteeing robustness, better scaling
properties, and the ability to amortize message complexity
over several anonymous messages. Our adversarial model is
similar to that assumed in the DC-Nets literature except
that we restrict the adversary to run in polynomial time.
Mix-Nets [5] and Onion Routing. Mix-Nets, intro-
duced by David Chaum in 1981, was one of the ﬁrst con-
cepts for anonymizing communication. The idea is that a
trusted “Mix” shuﬄes messages and routes them, thus con-
fusing traﬃc analysis. Chaining Mixes together to form a
path, combined with Mix-to-Mix (Onion Routing) and end-
to-end encryption, oﬀers a form of provable security against
a completely passive adversary [5]. Mix-Nets requires the
existence of semi-trusted nodes: security is guaranteed as
long as one Mix (out of a small constant number of them)
is honest.
In every Mix-Nets proposal, an active adversary who par-
ticipates in the system is able to degrade the anonymity of
selected messages and users with non-negligible probability
[14], and also degrade eﬃciency through excessive, anony-
mous usage of its capabilities [12] and selective, undetectable
non-participation [20].
Compared to Mix-Nets protocols, our solution incurs
fewer network latencies, requires no special trusted nodes,
and is provably secure against non-participating active ad-
versaries. However, our solution incurs higher communica-
tion and computational complexity.
Crowds [16]. Similar to Mix-Nets, Crowds provides
paths to disguise the originator of a message. Unlike Mix-
Nets, however, paths in Crowds are determined randomly
by the machines through which a message passes, rather
than by the originator of the message. Crowds provides
sender probable innocence against an adversary who controls
a certain fraction of the participants.4 However, Crowds
provides no protection against a global eavesdropper. k-
anonymity can be seen as a further reﬁnement of probable
innocence and in particular, our protocol for the case of 2-
anonymity is competitive with Crowds in terms of round
complexity, slightly worse in communication complexity and
incurs much heavier computational costs, while providing
provable security in a much stronger adversarial model.
CliqueNet [17]. CliqueNet combines small DC-Nets
with a routing layer to mitigate the scalability problems of
DC-Nets while also preserving some of its anonymity guar-
antees. CliqueNet has the undesirable feature, however,
that an adversary who controls (cid:1) network nodes can com-
pletely compromise the anonymity of (cid:1) − 1 other nodes of
its choice. Furthermore, CliqueNet’s routing layer induces
a high amount of unnecessary network latency and is not
secure against non-participation, allowing an adversary who
controls a few nodes to partition the network. Our protocol
is similar to CliqueNet in that we also divide the network
into small DC-Nets-like components, but diﬀerent in that
we provide provable security against strong adversaries.
4A protocol provides sender probable innocence if the re-
ceiver cannot identify the sender with probability greater
than 1/2.
Organization of the Paper
Section 2 presents the basic cryptographic notions and deﬁ-
nitions we will need for the paper. Section 3 introduces the
deﬁnitions for k-anonymous communication, Section 4 intro-
duces the novel protocol that achieves k-anonymity for both
the sender and the receiver, and Section 5 delineates how
to construct a communications network that can guarantee
k-anonymity. Finally, Section 6 concludes with a discussion
and some open questions.
2. PRELIMINARIES
2.1 Notation
A function µ :  → [0, 1] is said to be negligible if for
every c > 0, for all suﬃciently large n, µ(n) < 1/nc. Let
S be a set, then x ← S denotes the action of choosing x
uniformly from S. Uk denotes the set of k-bit strings. We
denote the set of integers {1, . . . , n} by [n]. We will use (cid:1)m
∗
to denote the additive group of integers modulo m, and (cid:1)
m
to denote the multiplicative group of integers modulo m.
When we say split x ∈ (cid:1)m into n random shares s1, . . . , sn
we mean choose s1, ...sn−1 uniformly at random from (cid:1)m
and set sn = x − (s1 + · ·· + sn−1) mod m. For parties P
and Q, the notation P −→ Q : M denotes party P sending
message M to party Q.
2.2 The Model
We assume a network of n parties {P1, . . . , Pn}, of which
a fraction β < 1/2 are controlled by a non-adaptive poly-
nomial time adversary, who may also monitor the commu-
nications between all parties. We assume the existence of
a trusted public-key infrastructure which allows secure au-
thenticated channels between all pairs of parties. Otherwise,
parties under the control of the adversary may behave ar-
bitrarily (the remaining honest parties are constrained by
the protocol). We also assume that the network is reliable:
messages between parties are always delivered.
2.3 Pedersen Commitments
Let p and q be primes such that q divides p − 1, and
let g, h ∈ (cid:1)
∗
p have order q. (It is easy to see that both g
∗
and h generate the unique subgroup of order q in (cid:1)
p.) The
following commitment scheme will be used throughout the
paper; it is due to Pedersen [13] and is based on the diﬃculty
∗
of ﬁnding logg(h) (all the multiplications are over (cid:1)
p):
• To commit to s ∈ (cid:1)q, choose r uniformly from (cid:1)q and
output Cr(s) = gshr.
• To open the commitment, simply reveal s and r.
For any s, the commitment Cr(s) = gshr is uniformly dis-
∗
tributed over the unique subgroup of order q in (cid:1)
p, so that
Cr(s) reveals no information about s. Furthermore, the
(cid:4)= s un-
(cid:2)
committer cannot open a commitment to s as s
less she can ﬁnd logg(h). Hence, this is a perfectly hiding,
computationally binding commitment scheme. In addition,
this commitment scheme is homomorphic: given commit-
ments Cr1 (s1) and Cr2 (s2), we have that Cr1 (s1)Cr2 (s2) =
Cr1+r2 (s1 + s2).
2.4 Zero-Knowledge Proofs
Informally, a zero-knowledge proof is a protocol which al-
lows a prover program P to convince a veriﬁer program V
of the veracity of a statement while giving the veriﬁer no
additional knowledge. For now we will only require security
in the case of an honest veriﬁer (i.e., the veriﬁer follows the
program V ). There exist standard techniques ([10], [2]) to
convert the particular type of honest-veriﬁer zero-knowledge
proof that we will use into a proof which is secure even
against a dishonest veriﬁer.
Deﬁnition 1. A protocol (P, V ) is honest veriﬁer zero-
knowledge if there is an eﬃcient program S (a simulator)
such that the output of S(x) and the view of V upon inter-