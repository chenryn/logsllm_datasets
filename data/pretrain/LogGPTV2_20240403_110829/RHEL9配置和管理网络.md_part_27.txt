:::
这个步骤描述了如何使用 `nmcli`{.literal}
命令配置网络设备以接受流量，而无论 MAC 地址是什么。
::: orderedlist
**步骤**
1.  可选：显示要识别要接收所有流量的网络接口：
    ``` literallayout
    # ip a
    1: enp1s0:  mtu 1500 qdisc fq_codel state DOWN group default qlen 1000
        link/ether 98:fa:9b:a4:34:09 brd ff:ff:ff:ff:ff:ff
    2: bond0:  mtu 1500 qdisc noqueue state DOWN group default qlen 1000
        link/ether 6a:fd:16:b0:83:5c brd ff:ff:ff:ff:ff:ff
    3: wlp61s0:  mtu 1500 qdisc noqueue state UP group default qlen 1000
    ...
    ```
    如果没有任何连接，可以创建新连接。
2.  修改网络设备以启用或禁用此属性。
    ::: itemizedlist
    -   为 `enp1s0`{.literal} 启用
        `ethernet.accept-all-mac-address`{.literal} 模式：
        ``` literallayout
        # nmcli connection modify enp1s0 ethernet.accept-all-mac-addresses yes
        ```
    -   为 `enp1s0`{.literal} 禁用 `accept-all-mac-address`{.literal}
        模式：
        ``` literallayout
        # nmcli connection modify enp1s0 ethernet.accept-all-mac-addresses no
        ```
    :::
3.  要应用这些更改，请重新激活连接：
    ``` literallayout
    # nmcli connection up enp1s0
    ```
:::
::: itemizedlist
**验证步骤**
-   验证 `ethernet.accept-all-mac-addresses`{.literal} 模式是否已启用：
    ``` literallayout
    # nmcli connection show enp1s0
    ...
    802-3-ethernet.accept-all-mac-addresses:1     (true)
    ```
:::
`802-3-ethernet.accept-all-mac-addresses: true`{.literal}
表示已启用该模式。
:::
::: section
::: titlepage
# []{#assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses_configuring-and-managing-networking.html#proc_permanently-configuring-a-network-network-device-to-accept-all-traffic-using-nmstatectl_assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses}使用 nmstatectl 永久配置网络网络设备以接受所有流量 {.title}
:::
这个步骤描述了如何配置网络设备以接受所有流量，而不管使用
`nmstatectl`{.literal} 工具的 MAC 地址。
::: itemizedlist
**先决条件**
-   已安装 `nmstate`{.literal} 软件包。
-   您用来配置该设备的
    []{#assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses_configuring-and-managing-networking.html#systemitem}`.yml`{.literal}
    文件可用。
:::
::: orderedlist
**步骤**
1.  编辑 [*enp1s0*]{.emphasis} 连接的现有 `enp1s0.yml`{.literal}
    文件，并添加以下内容：
    ``` literallayout
    ---
    interfaces:
      - name: enp1s0
        type: ethernet
        state: up
        accept -all-mac-address: true
    ```
2.  应用网络设置。
    ``` literallayout
    # nmstatectl apply ~/enp1s0.yml
    ```
:::
::: itemizedlist
**验证步骤**
-   验证是否启用了 `802-3-ethernet.accept-all-mac-addresses`{.literal}
    模式：
    ``` literallayout
    # nmstatectl show enp1s0
    interfaces:
      - name: enp1s0
        type: ethernet
        state: up
        accept-all-mac-addresses:     true
    ...
    ```
:::
`802-3-ethernet.accept-all-mac-addresses: true`{.literal}
表示已启用该模式。
::: itemizedlist
**其他资源**
-   有关 `nmstatectl`{.literal} 的详情，请查看 `nmstatectl(8)`{.literal}
    man page。
-   如需了解更多配置示例，请参阅
    `/usr/share/doc/nmstate/examples/`{.literal} 目录。
:::
:::
:::
[]{#assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend_configuring-and-managing-networking.html#assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend_configuring-and-managing-networking}第 18 章 使用带有 FreeRADIUS 后端的主机apd 为 LAN 客户端设置 802.1x 网络身份验证服务 {.title}
:::
IEEE 802.1X
标准定义了安全身份验证和授权方法，以保护网络不受未授权的客户端的影响。使用
`hostapd`{.literal} 服务和 FreeRADIUS，您可以在
网络中提供网络访问控制(NAC)。
在本文档中，RHEL
主机充当一个网桥，用于将不同客户端与现有网络连接。但是，RHEL
主机只授予验证客户端对网络的访问权限。
::: informalfigure
::: mediaobject
![RHEL authenticator 802 1x](images/rhel-authenticator-802-1x.png)
:::
:::
::: section
::: titlepage
# []{#assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend_configuring-and-managing-networking.html#_prerequisites}先决条件 {.title}
:::
::: itemizedlist
-   完全安装 FreeRADIUS.
    如果已安装 `freeradius`{.literal} 软件包，删除
    `/etc/raddb/`{.literal} 目录，卸载，然后再次安装该软件包。不要使用
    `dnf reinstall`{.literal} 命令重新安装软件包，因为
    `/etc/raddb/`{.literal} 目录中的权限和符号链接会不同。
:::
:::
::: section
::: titlepage
# []{#assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend_configuring-and-managing-networking.html#proc_setting-up-the-bridge-on-the-authenticator_assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend}在 authenticator 中设置桥接 {.title}
:::
网桥是一个链路层设备，它根据 MAC 地址表转发主机和网络之间的流量。如果将
RHEL 设置为 802.1X authenticator，请将要在其上执行身份验证和 LAN
接口的接口添加到网桥。
::: itemizedlist
**先决条件**
-   服务器有多个以太网接口。
:::
::: orderedlist
**步骤**
1.  创建网桥接口：
    ``` literallayout
    # nmcli connection add type bridge con-name br0 ifname br0
    ```
2.  为网桥分配以太网接口：
    ``` literallayout
    # nmcli connection add type ethernet slave-type bridge con-name br0-port1 ifname enp1s0 master br0
    # nmcli connection add type ethernet slave-type bridge con-name br0-port2 ifname enp7s0 master br0
    # nmcli connection add type ethernet slave-type bridge con-name br0-port3 ifname enp8s0 master br0
    # nmcli connection add type ethernet slave-type bridge con-name br0-port4 ifname enp9s0 master br0
    ```
3.  启用网桥通过 LAN(EAPOL)数据包转发可扩展验证协议：
    ``` literallayout
    # nmcli connection modify br0 group-forward-mask 8
    ```
4.  配置连接以自动激活端口：
    ``` literallayout
    # nmcli connection modify br0 connection.autoconnect-slaves 1
    ```
5.  激活连接：
    ``` literallayout
    # nmcli connection up br0
    ```
:::
::: orderedlist
**验证**
1.  显示作为特定网桥端口的以太网设备的链接状态：
    ``` literallayout
    # ip link show master br0
    3: enp1s0:  mtu 1500 qdisc fq_codel master br0 state UP mode DEFAULT group default qlen 1000
        link/ether 52:54:00:62:61:0e brd ff:ff:ff:ff:ff:ff
    ...
    ```
2.  验证 `br0`{.literal} 设备上是否启用了 EAPOL 数据包的转发：
    ``` literallayout
    # cat /sys/class/net/br0/bridge/group_fwd_mask
    0x8
    ```
    如果命令返回 `0x8`{.literal}，则启用转发。
:::
::: itemizedlist
**其他资源**
-   `nm-settings(5)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend_configuring-and-managing-networking.html#con_certificate-requirements-by-freeradius_assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend}FreeRADIUS 的证书要求 {.title}
:::
对于安全的 FreeRADIUS 服务，您需要 TLS 证书来满足不同的目的：
::: itemizedlist
-   用于加密到服务器的连接的 TLS
    服务器证书。使用可信证书颁发机构(CA)发布证书。
    服务器证书要求将扩展密钥使用(EKU)字段设为
    `TLS Web 服务器身份验证`{.literal}。
-   由同一 CA
    发布的客户端证书，用于扩展身份验证协议传输层安全(EAP-TLS)。EAP-TLS
    提供基于证书的身份验证，并默认启用。
    客户端证书需要其 EKU 字段设置为 `TLS Web 客户端身份验证`{.literal}。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
要安全连接，请使用您公司的 CA 或创建自己的 CA 为 FreeRADIUS
发布证书。如果使用公共 CA，您可以允许用户验证用户并为 EAP-TLS
发布客户端证书。
:::
:::
::: section
::: titlepage
# []{#assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend_configuring-and-managing-networking.html#proc_creating-a-set-of-certificates-on-a-freeradius-server-for-testing-purposes_assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend}在 FreeRADIUS 服务器上创建一组证书用于测试 {.title}
:::
出于测试目的，freerad `iu`{.literal} s 软件包会在
`/etc/raddb/certs/`{.literal}
目录中安装脚本和配置文件，以创建您自己的证书颁发机构(CA)和问题证书。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
如果您使用默认配置，这些脚本生成的证书会在 60
天后过期，密钥使用不安全的密码(\"whatever\")。但是，您可以自定义
CA、服务器和客户端配置。
:::
执行此步骤后，会创建本文档稍后需要的以下文件：
::: itemizedlist
-   `/etc/raddb/certs/ca.pem`{.literal}: CA 证书
-   `/etc/raddb/certs/server.key`{.literal}: 服务器证书的私钥
-   `/etc/raddb/certs/server.pem`{.literal}: Server certificate
-   `/etc/raddb/certs/client.key`{.literal}: 客户端证书的私钥
-   `/etc/raddb/certs/client.pem`{.literal}: client certificate
:::
::: itemizedlist
**先决条件**
-   已安装 `freeradius`{.literal} 软件包。
:::
::: orderedlist
**步骤**
1.  进入 `/etc/raddb/certs/`{.literal} 目录：
    ``` literallayout
    # cd /etc/raddb/certs/
    ```
2.  可选：自定义 CA 配置：
    ``` literallayout
    ...
    [ req ]
    default_bits            = 2048
    input_password          = ca_password
    output_password         = ca_password
    ...
    [certificate_authority]
    countryName             = US
    stateOrProvinceName     = North Carolina
    localityName            = Raleigh
    organizationName        = Example Inc.
    emailAddress            = PI:EMAIL
    commonName              = "Example Certificate Authority"
    ...
    ```
3.  可选：自定义服务器配置：
    ``` literallayout
    ...
    [ CA_default ]
    default_days            = 730
    ...
    [ req ]
    distinguished_name      = server
    default_bits            = 2048
    input_password          = key_password