layer functions call back into JavaScript, altering or removing
pointers on which C++ code still relies [39].
Blink is also protected by Chrome’s new out-of-process
iframes (OOPIFs). OOPIFs isolate iframes with different ori-
gins in separate processes [22], reducing the severity of some
attacks (e.g., by making it more difﬁcult to leak cross-origin
data)—even attacks that exploit binding bugs.
Unfortunately, neither OOPIFs nor the combination of code
generation and garbage collection protect all binding layer Blink
code. Some Blink bindings are still handwritten (since they need
to manipulate or allocate JavaScript objects directly); these
bindings are still vulnerable to programmer error. For example,
we identiﬁed a crashing bug in the Custom Elements DOM
APIs that we can trigger with crafted JavaScript.
OOPIFs are not a comprehensive defense either: Chrome only
deploys them for high-proﬁle websites [22], leaving the rest of
the web unprotected. Moreover, OOPIFs only defend at coarse
granularity, and many client-side, language-level mechanisms
rely on JavaScript memory- and type-safety for ﬁne-grained
security [50, 60, 63, 94, 109]. As a result, a JavaScript attacker
who can exploit binding bugs to break safety assumptions may
violate these systems’ language-level guarantees—even though
the attacker cannot break Chrome’s isolation guarantees.
4.2 Chrome Extension System
The Chrome extension system uses V8 to expose privileged
APIs to JavaScript extension code (e.g., to allow extensions
to create new tabs or read page contents on certain origins).
Chrome assumes that extensions are “benign-but-buggy” [4]—
that they may contain errors but are not intentionally malicious.
The pages that extensions interact with, however, may be mali-
cious; they may even try to exploit vulnerabilities in extension
code. To address attacks from malicious pages, the runtime iso-
lates the core part of the extension—the code that has access to
privileged APIs—from the content scripts that directly interact
with the page: Chrome runs the core extension in an isolated
process. Though, for performance reasons, multiple extensions
are placed in the same process [32].
Even with the extension system’s isolation and privilege
separation mechanisms in place, attackers have exploited ex-
tension system vulnerabilities and managed to abuse privileged
APIs [20, 21, 60]. Unfortunately, binding-layer bugs can fur-
ther amplify these exploit strategies. Type- and memory-safety
vulnerabilities are particularly serious, since these classes of
binding bugs may allow JavaScript code to use the privileged
APIs of co-located extensions, otherwise not requested by the
vulnerable extension nor approved by the user (for this exten-
sion). Crash-safety bugs, on the other hand, do not have security
implications—they can only be used to crash the isolated exten-
sion process.2
The Chrome extension system uses binding layer defenses
to reduce the risk of crash-, type-, and memory-safety bugs:
it relies on a trusted JavaScript layer to do crash-safe type
checking before calling into binding code (Figure 2b). Attackers
may bypass the trusted JavaScript layer, though [20, 21]; a bug
in the trusted JavaScript layer and a bug in the bindings combine
to form a security vulnerability. Moreover, Chrome extension
system does not use C++ garbage collection or code generation
to eliminate binding bugs by construction.
We believe that Chrome extension system should assume a
stronger attacker and treat extensions as potentially malicious
code. Numerous extensions—used by millions of people—have
turned out to be malicious [46, 48, 94, 103], while other pop-
ular extensions such as AdBlock Plus [51] have been sold to
untrustworthy parties. Chrome currently does not assume ma-
licious extensions in their threat model and, to make matters
worse, automatically downloads extension updates as long as
those updates do not request new privileges. Thus, if an attacker
maintains a least-privileged extension, they can update that ex-
2Since Chrome notiﬁes the user when an extension crashes, however, a mali-
cious page may exploit hard-crashing bugs to annoy the user into disabling or
uninstalling a targeted extension such as HTTPS Everywhere [33].
569
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
Web application code
t
p
i
r
c
S
a
v
a
J
Generated binding code
Blink runtime system
+
+
C
+
L
D
I
b
e
W
Extension-core code
t
p
i
r
c
S
a
v
a
J
+
+
C
Type-checking, wrapper code
Manual binding code
Extension runtime system
Sandboxed per-tab process
Sandboxed per-extension process
(a) Chrome’s Blink relies on
process isolation and automatic
binding code generation to ad-
dress binding-layer vulnerabili-
ties.
(b) The Chrome extension sys-
tem relies on a small, isolated,
and trusted JavaScript layer to
type check arguments before
calling into hand-written bind-
ing code.
PDF-embedded code
Manual FPDF binding code
FPDF implementation in V8
t
p
i
r
c
S
a
v
a
J
+
+
C
PDFium runtime system
Single sandboxed process
(d) PDFium wraps the V8 API
with a small, but less safe, C++
API that it then uses to expose
APIs to JavaScript.
Server application code
Type-checking code
Manual binding code
t
p
i
r
c
S
a
v
a
J
+
+
C
Node.js runtime system
(c) Node.js implements most of
its core libraries in JavaScript,
atop a small hand-written bind-
ing layer. However, the bind-
ing layer is accessible to user
JavaScript and the JavaScript
layer is not isolated from appli-
cation code.
Figure 2—The binding layers and their defenses across JavaScript runtime systems. The trustworthiness of code decreases with color—white is
the most trustworthy, while dark blue is the often untrusted JavaScript application code.
tension with code that leverages a binding layer bug to, perhaps,
escalate the malicious extension’s privileges. Chrome will au-
tomatically download this malicious update, and the extension
will operate with unauthorized access to user information.
4.3 Node.js
Node.js is a JavaScript runtime system for building servers
and desktop applications. The runtime uses V8 to ex-
pose APIs for ﬁlesystem, networking, and crypto utilities.
Node.js (Figure 2c) exposes low-level binding APIs (e.g.,
process.binding('fs')) which JavaScript code, in turn, uses
to implement the core standard libraries (e.g., fs). By imple-
menting most code in a high-level, memory- and type-safe
language instead of C++, Node.js makes it easier for developers
to safely create new features.
Despite only implementing minimal machinery in C++,
Node.js still struggles with binding layer bugs (§3). Node.js
does not consider binding bugs to be security risks; to the
best of our understanding, the Node.js attacker model assumes
that JavaScript application code is benign.3 However, discor-
dantly, Node.js recently added support for zero-ﬁlling buffers.
Zero-ﬁlled buffers make it more difﬁcult for remote attack-
ers to exploit benign but buggy application code that relies on
the buffer library to disclose memory (in the style of Heart-
bleed) [1]. Binding layer vulnerabilities reintroduce the problem
that zero-ﬁlling buffers are designed to ﬁx; attackers can use
binding bugs (e.g., in buffer) to read and write arbitrary parts
of Node.js processes (§3).
Furthermore, we believe that the buggy but benign model is
not generally appropriate: the node package manager (NPM)
and Node.js workﬂow make it easy to download and execute
untrusted code [76, 83]. Members of the Node.js team and
NPM recommend that developers “not execute any software
. . . [that they] do not trust [75].” Binding bugs make it hard to
follow this advice. Most binding bugs are reachable from core
Node.js libraries, so developers cannot easily audit and there-
fore trust NPM packages. Even if a program does not require
any module—a ﬁrst indication that it may be trying to do some-
thing sensitive—that code can nevertheless leverage a binding
bug to be extremely damaging. For example, a malicious NPM
package could exploit one of the out-of-bounds vulnerabili-
ties that we found in the core buffer library, which is always
loaded, to read and write arbitrary parts of the Node.js process
(e.g., users’ secret keys). Even our crashing bugs may be useful:
since Node.js is popular for implementing web-servers, attack-
ers could use hard crashing binding errors to take down a server
that otherwise handles crashes gracefully.
Finally, attackers may use binding bugs against language-
level security mechanisms for Node.js, including [8, 27, 50].
The security systems defend against language-level attacks but
assume JavaScript’s memory- and type-safety. Bugs in the bind-
ing layer can violate these assumptions (as we show in §bugs),
therefore violating the security guarantees of the language-level
mechanisms. Neither the language-level systems nor more gen-
eral JavaScript mechanisms (e.g., [26]) can safely expose sub-
sets of the Node.js API without giving up on their guarantees.
3Personal communication with the Node.js security list, unfortunately, did not
lead to a clear explanation of Node.js’s attacker model. For example, our
arbitrary memory write exploit was not considered a security bug, while our
less severe out-of-bounds write was ﬂagged as a security issue. In this paper,
we conservatively assume a relatively weak attacker. We, however, remark that
since our original reports, the Node.js team has established a security working
group to, among other things, address some of concerns raised by this work.
We are actively working within the scope of this group to reﬁne Node.js’s
attacker model [73].
4.4 PDFium
PDFium, Chrome’s PDF rendering engine, parses and renders
PDF documents. PDFs may contains JavaScript that customizes
the document at runtime (e.g., by drawing new widgets or ﬁlling
in a form); embedded JavaScript may even submit forms to
remote servers. PDFium exposes an API for customizing PDFs
as such using V8 bindings [96].
570
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
Chrome assumes that PDF documents may be malicious, and
treats type- and memory-safety violations as security concerns.
Chrome is especially concerned about binding layer attacks,
since, for example, “a PDFium UAF will usually lead to re-
mote code execution, particularly when it is triggered from
[JavaScript ] where the adversary has substantial control over
what happens between the free and the subsequent re-use” [85].
Despite their attacker model, PDFium does not use any se-
rious binding layer defenses: their bindings are hand-written
using a crash-unsafe library that minimally wraps V8’s APIs
(Figure 2d). Chrome still runs the PDFium renderer in an iso-
lated, sandboxed process, though, which limits the damage of
binding errors. This is because Chrome’s OS-sandbox restricts
PDFium to communicating with other Chrome processes by
using message passing. Unfortunately, PDF documents of dif-
ferent origins are rendered in the same process. As a result,
binding layer memory-read exploits may, say, violate the same-
origin policy by reading the contents of a different-origin PDF.
The Chrome team is working on a more robust architecture
that will isolate origins, making cross-origin attacks extremely
difﬁcult [85].
5 Preventing Errors By Construction
This section presents a new V8-based binding-layer API, one
that makes it easier for developers to preserve JavaScript’s
crash-, type-, and memory-safety. We describe the API’s design,
implementation, and evaluation: it is backwards compatible and
imposes little overhead and little porting burden. The API helps
developers avoid bindings bugs by automatically type-checking
JavaScript values and by forcing developers to more gracefully
handle errors.
5.1 Safe API Design
A safe binding-layer API should:
1. Force developers to handle failures (e.g., exception-
throwing upcalls) in a crash-safe way, by propagating
errors back to JavaScript instead of hard crashing.
2. Disallow developers from using JavaScript values before
checking their types.
3. Make the concurrent programming model explicit by mak-
ing clear which C++ functions can trigger JavaScript up-
calls that may change invariants (§3).
Our API achieves these goals by forcing functions that in-
teract with JavaScript to use a special type, JS, that encap-
sulates either a JavaScript value of type T (e.g., v8::String)
or a JavaScript exception of type v8::Error. Our API satisﬁes
the ﬁrst goal because a JS forces the developer to han-
dle a v8::Error explicitly instead of triggering a hard crash;
it satisﬁes the second goal by only providing functions that
automatically type-check values before casting them; and it
satisﬁes the third goal by forcing each potentially upcalling
function to return a JS, explicitly signalling that these func-
tions may throw errors or have other side effects. Table 5 out-
lines the interface that our API exposes to C++ binding code.
The API includes three kinds of functions that interact with
JS accessor methods
onVal: JS -> ((T0, ..., Tn) -> JS) -> JS
onFail: JS -> (Error -> JS|void) -> JS|void
Value-marshaling functions
marshal: Value v0 -> ... -> Value vN -> JS
implicitCast: Value v0 -> ... -> Value vN -> JS
toString: Value val -> JS
Object methods
getProp: Object obj -> Value key -> JS
getOwnPropDesc: Object obj -> String key -> JS
setProp: Object obj -> Value key -> Value newVal -> JS
defineOwnProp: Object obj -> Name key -> Value v -> JS
delProp: Object obj -> Value key -> JS
hasProp: Object obj -> Value key -> JS
hasOwnProp: Object obj -> Value key -> JS
getPropNames: Object obj -> JS
getOwnPropNames: Object obj -> JS
Table 5—The interface that our JavaScript engine API exposes. We
use ML-style types to describe the function types: T0 x ... x Tn
denotes a product type; T0|T1 denotes a sum type; T0 -> T1 denotes
a function type. Like V8, all calls take an Isolate* as a ﬁrst argument,
and Values and Objects are wrapped in Local<> handles; we have
omitted these for brevity.
JavaScript: JS accessor methods, Value-marshaling func-
tions, and Object methods.4
JS accessor methods. JS is the only type that describes
JavaScript values in our API. We force programmers to prop-
erly handle JavaScript values by only allowing them to access
JSs using two safe accessor methods, onVal and onFail
(see Table 5). The programmer interacts with JSs by regis-
tering callbacks using these methods; the API invokes the call-