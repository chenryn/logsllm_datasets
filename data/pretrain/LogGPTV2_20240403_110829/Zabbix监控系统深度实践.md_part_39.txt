这个逻辑在高并发的情形下，在Oracle 中会产生大量的TX 锁，非常影响性能。我们的解
（3）如果结果不为空，retl等于 event 表的 nextid。这时Zabbix会更新 nextid=nextid+1，然
zbx_uint64_t
（2）如果结果为空，而且 events 表为空，那么就将初始值插人ids表。如果由于并发造成
zbx_uint64_t
（1）从ids表中取出 event 表的 nextid。
在计算Event的 nextid时，步骤如下。
DBfree_result (result);
******",ret.);
return
//zabbix_log（LOG_LEVEL_INFORMATION,"********
ZBX_STR2UINT64（ret,row[0]）;
row = DBfetch（result）;
DB_ROW
DB_RESULT
0 l expressions
0ldrules
|functions
1dchecks
ret;
conditions
row;
result;
DBget_seq_maxid(const char *tablename)
ret;
functionid
expressionid
druleid
dcheckid
conditionid
GETTING SEQ MAX ID:%d
132351
6
10
5
---
## Page 336
使用占位符是形如 zabbix_log（LOG_LEVEL_DEBUG,“debug %d”，10）这种。
个参数是日志的内容，如果日志内容中有占位符，那么后面接着的参数就是占位符的内容。比
了，每次都要编译安装好Zabbix，然后看日志。所以尽可能详尽的日志能减少编译安装的次数。
是非常重要的方法。C语言不像Python，它需要编译，在修改Zabbix代码时最头痛的就是调试
22.4在Zabbix中打印日志
Zabbix打印日志非常简单，使用的方法是zabbix_log，它的第一个参数是 log的等级，第二
前几节是如何解决问题的方法和思路，这一节，
OLOG_LEVEL_INFORMATION
OLOG_LEVEL_DEBUG
OLOG_LEVEL_WARNING
OLOG_LEVEL_ERR
O LOG_LEVEL_CRIT
日志等级有下面几种：
主要介绍如何在Zabbix中打印日志，这
第22章Zabbix代码问题和解决
·321°
---
## Page 337
·322°
在 Zabbix 2.2也可以运行。
上了，地址为:https://github.com/baniuyao/ZabbixPythonApi。这个API是基于Zabbix1.8.8开发的
象封装了一层，让我们在使用API的时候是基于对象的。ZabbixPythonApi已经开源在Github
好，不是面向对象的建模，要记忆这么多方法也不容易。因此，笔者参照其他人开发的Zabbix
但都需要鼠标操作，没办法集成到命令行中。Zabbix 本身提供了API接口，但是封装的不是很
而且是一个“电池都包括”的语言（表示Python的各种库应有尽有）。Zabbix虽然用起来不算困难，
23.1 Python Zabbix API
开发，后半部分介绍Zabbix在整个监控体系中的角色和作用。
第23章
API，用Python写了一个模块一
PPTV的Zabbix监控体系
在PPTV 的运维开发团队，主要的开发语言是Python，因为Python人门简单，开发快速
zapi
from zapi import ZabbixAPI
前面介绍了很多Zabbix的应用场景，“养兵千日用兵一时”，本章主要向大家介绍PPTV的
接着是登录Zabbix：
使用起来很简单，首先需要引人我们的API模块：
ZabbixAPI(url='http://your.zabbix.address', user='admin',
—ZabbixPythonApi。它的作用是在ZabbixAPI上根据Zabbix对
---
## Page 338
password='zabbix')
'snmp_available': '0',
'proxy_hostid': '0',
maintenances':[],
maintenanceid':'o',
'maintenance_type': '0',
'maintenance_from':'o',
'lastaccess':'0',
'jmx_errors_from':'0'
'jmx_disable_until':'0',
'jmx_available': '0',
'ipmi_username': u'',
'ipmi_password': u''
'ipmi_errors_from':
'ipmi_error': u'',
'ipmi_disable_until': '0',
返回值如下。
zapi.Host.find （{
然后就是针对资源的操作，
zapi.login()
name':'HostABC',
'jmx_error':u'',
'ipmi_authtype':'-1',
'hostid':'10108',
'host':'HostABC'
flags':'o'，
'errors_from': '0',
error':u'',
'disable_until': '0',
[{'available': '1',
'hostname'
.0：
比如查找名字为“HostABC”的host：
HostABCr'
第23章PPTV的Zabbix监控体系
·323·
---
## Page 339
·324°
比如服务器下线这个动作，如果使用了自动侦测，它会一直侦测这个网段，那么这里就隐含了
哪些程序。而且，自动侦测使用IP范围去探测服务器，这个粒度太粗了，很有可能会造成误操作。
了什么应用，只能从 Zabbix Server 去侦测 Zabbix Agent上运行了哪些端口，从而去判断运行了
添加监控的问题。它的设计非常好，但有一些局限，比如它不支持从进程去判断服务器上存活
这一环，会变成整个自动化运维的瓶颈。
器上线时，一张“添加监控工单”会发送给对应的运维工程师，然后运维工程师去进行操作。
应该自动取消监控。很多公司应该使用的是类似“工单”的东西来进行流程上的控制，当服务
的其他系统集成。理想的状态是一台服务器上线后，应该能自动添加监控；一台服务器下线，
1000台呢？而且，只要是人进行的操作，就是可能会出错的地方。
Redis的监控，运行了Nginx需要添加对Nginx的监控。一台服务器还可以手动操作，如果100台
烦。需要根据服务器上面运行的应用程序，去添加对应的监控。比如运行了Reids则要增加对
23.2
name），可以参考Zabbix 的官方文档。
方法中加入一个参数，使得find方法只会得到一个指定的属性，如：
Zabbix监控系统深度实践
面对这种问题，Zabbix推出了auto discovery功能，它设计的初衷就是解决上面提到的自动
除了需要人力工作，容易出错外，手动添加服务器监控最大的问题就是无法和自动化运维
使用监控系统最大的问题，就是添加监控。在PPTV使用 Zabbix 的初期，添加监控非常麻
通过这个例子，大家应该能举一反三了吧。使用API时传递的参数（比如上面例子中的
这样返回的就仅仅是搜索到的Host的“hostid”这个属性的值了：
zapi.Host.find(('name':'HostABC'), attr_name='hostid' )
是不是返回的属性特别多？Zabbix API会返回这个搜索到的 Host 的所有属性。可以在find
'templates':[{'hostid':'o',
'status':'1',
'snmp_errors_from':'0',
'snmp_error': u'',
'snmp_disable_until': '0',
10108
Spider-
-服务器添加Zabbix监控
'templateid':'0'}])]
---
## Page 340
行的应用加人对应的监控，而需要的只是一个IP。
而实际上，这个根本不需要报警。
闭 Nginx进程到关机的这段时间，Zabbix会认为Nginx进程已经消失了，这是个问题，会报警。
流量切走以后，会关闭Nginx 进程，然后关机。而 Zabbix要在关机后才能删除监控，那么在关
移除监控），这样就会产生误报警。假设监控了一台Nginx服务器，现在要下线了，那么确定
一个限制：删除监控会发生在服务器关机之后（我们使用Action来控制超过多久的服务器自动
Spider界面如图23-1所示。
基于这些需求，笔者开发了Spider，它的作用简单来说就是根据服务器的 hostname，对运
squid 18000 SeNers
Egroopd:1130.(groupidw1319.(gropid.41).groupd
xy
442.07
图23-1
1109,
u1138].[groupid
第23章PPTV的Zabbix监控体系
1124
·325
---
## Page 341
326
可以在报警邮件中发送很多东西。我们先撇开Zabbix，想象一下，如果你收到一封报警，你最
收集出问题时刻的服务器数据等操作。.
织报警数据，进行发送邮件给对应负责人，将报警推送到EventConsole，自动执行一些命令，
23.4
EventConsole是使用 Django+extjs开发完成的，由微博名为@不装A不装C 的同事负责。
还可以直接创建ticket，方便事后问题的追踪。此外，还支持批量事件的处理，功能非常强大。
工程师可以很方便地看到目前发生了什么问题，以及紧急程度有多高。界面如图23-2所示。
或者自动恢复，比如重启PHP进程之类。
收到Zabbix报警的人，他们希望在接收到报警后，对于简单的问题可以直接远程执行命令，
而且，虽然Zabbix有ACK功能，但太过简陋，它只能知道某个人在什么时候ACK了这个请求。
某个报警，顶多加上一个报警的等级。另外展示报警的方式也不好，不能让人很好地发现问题。
23.3
Zabbix监控系统深度实践
为什么要开发Rule Engine？使用Action来发送邮件不是挺好的吗？Zabbix支持很多宏，
Rule Engine是PPTV 报警系统的核心部分。它的作用是根据Zabbix中Action的信息，组
我们同时添加了Snooze功能，可以将一个报警设置为一段时间不在EventConsole中显示，
基于这些需求，我们开发了EventConsole平台。它可以展示报警，处理报警。在上面运维
在PPTV时，除了上海的兄弟们，武汉还有24小时值班的工程师，他们一般是第一个接
在查看报警时，Zabbix做得不是很好。
 Rule Engine
Event Console
一是每一个报警的维度很少，只能看某个服务器的
图23-2
---
## Page 342
在Event Console的前端界面中。
后，Event Console 会从ActiveMQ 获取消息，显示
者短信。然后把这个报警消息发给ActiveMQ。之
不同的处理，组合不同的邮件内容，发送邮件或
这个报警是否需要处理，再根据报警的类型进行
ActiveMQ中抓取消息，从Snooze Console中查询
Agent 将消息转发到ActiveMQ。Rule Engine 会从
如 itemid，triggerid 等）发送给 Rule Agent，Rule
的消息从触发Action开始，将需要的信息（比
23.5
报警一段时间。
SnoozeConsole的系统，来确定这个报警是否需要发送。“Snooze”操作的作用就是停止某一类
送邮件给对应的运维和研发，二是将消息发送到EventConsole。
如果报警是磁盘 I/O高，那么就需要消耗IVO的排行。当组合好这个报警信息后，一是要发
合不同的报警信息。比如报警内容为Linux服务器内存不够了，那么就需要内存使用的排行：
这条消息发送到ActiveMQ，然后rule_engine从ActiveMQ拿到消息，根据报警的类型，去组
必要的信息，比如 itemid、triggerid 等传递到后端的 rule_engine_agent，rule_engine_agent 将
如果能根据报警内容的不同，事先做一些分析，那是更好的。
比如CPU负载、内存、哪些进程在跑等。我还想知道出问题的这个监控点的历史数据是怎样的。
希望里面有些什么内容。以我个人来说，我想看到出问题时这台服务器的一些基本系统数据
图23-3所示是整个报警系统的架构。报警
在这个处理过程中，在发送报警邮件和发送消息给EventConsole之前，会访问一个叫做
Rule Engine就是为了满足这些需求而设计的。Zabbix的Action不再发送邮件，而是将
报警系统架构
ZabbixServer
ActiveMQ
RuleEngine
ActiveMQ
第23章
Event Console
图23-3
PPTV的Zabbix监控体系
RuleAgent
327°
Mail&SMS
Snosze
---
## Page 343
·328?
baniuyao/10016098，其实就是把这些命令放到一起了。
PATH/api/classes/
YZABBIX_PATH/include/classes/graphdraw/
侧上方可以控制显示的Graph。关键字这里可以进行搜索，多个关键字可以使用逗号隔开。
Zatree
第24章
以类似Cacti的方式展现，如图 24-1。
如果大家懒得敲代码，可以到笔者Github上的gist 中找到安装脚本：https://list.github.com/
(4 ） cp -f zabbix.php zabbix_chart.php YZABBIX_PATH/ cp -f CItemValue.php YZABBIX
(6） cp -f main.js YZABBIX_PATH/js/cp -f API.php YZABBIX_PATH/include/classes/api/
( 5） cp -f menu.inc.php YZABBIX_PATH/include/
(3） cp -f CLineGraphDraw_Zabbix.php CGraphDraw_Zabbix.php CImageTextTable_Zabbix.php
Zatree 的Github地址在https://github.com/spide4k/zatree。
左侧根据 Host group 进行分组，可以选择其中的某台服务器显示它所有的Graph。屏幕右
(2）cd/var/www/html/zabbix/zatree/addfile
(1）cp-rf zatree/zabbix-2.2.x/var/www/html/zabbix
Zatree 的安装比较简单，首先把文件全部复制到Zabbix 前端目录下，包括：
Zatree是58同城的工程师开源的Zabbix前端插件，它的作用是将 Zabbix的Graph 组合起来，
---
## Page 344
CMacrosResolverHelper 模块的resolveltemNames方法。笔者grep后看了代码，发现2.2.1的代
书的时候，前端界面的版本为2.2.1，在安装Zatree的时候出了问题，具体报错就是找不到
查 Zabbix 的前端版本，因为这里需要resolveltemNames方法来获取 itemid。笔者在写这本
07+13%3A31%3A36&endtime=2014-04-07+14%3A31%3A36&changeType=1hour"。请大家检
107, referer: http://192.168.201.234/zabbix/zatree/big_graph.php?graphid=518&stime=2014-04-
solveItemNamesO in /var/www/html/zabbix/include/classes/api/CLineGraphDraw_Zabbix.php on line
错误，查看了PHP日志后，发现错误为“Callto undefined method CMacrosResolverHelper:re
如下。
密码写进去，因为Zatree 的一部分操作要和 Zabbix API交互，获取需要的信息，因此要先登录，
CMacrosResolverHelper.php
码中确实没有这个方法：
笔者在安装中碰到了下面这个问题：前端可以进入Zatree，但从console来看，报500
这时笔者去下载了Zabbix2.2.2版本，发现这个方法又有了，其中缘由无从而知，估计是
'passowrd'=>'xxx'
'user'=>'xxx',
vi/var/www/html/zabbix/zatree/zabbix_config.php
复制好以后，需要将/var/www/html/zabbix/zatree/zabbix_config.php中的Zabbix前端用户名和
public static function
public static
public static function
public static function
public static function
public static function
public static function
public
public static function
public static
public static function
public static function
public static function
static function
function
function
//web登录的密码
//web登录的用户名
resolveGraphName（$name,$items）(
1 resolveEventDescription(array $event）（
resolveTriggerReference（$expression,$text）[
 resolveTriggerNameByIds (array $triggerIds）{
 resolveTriggerNameById ($triggerId） (
 resolveTriggerDescriptions (array $triggers)
 resolveTriggerDescription (array $trigger)
1resolveTriggerNames（array $triggers）{
1 resolveTriggerName(array Strigger) (
resolveHostInterfaces（array $interfaces）{
n resolveHttpTestName (ShostId, $name）{
1resolve（array $options）{
resolveGraphNameByIds($data)
/var/www/html/zabbix/include/classes/macros/
第24章Zatree
·329·