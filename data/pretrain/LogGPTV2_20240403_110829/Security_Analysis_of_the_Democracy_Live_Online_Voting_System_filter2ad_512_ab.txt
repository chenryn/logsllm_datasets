like the conﬁrmations provided by E2E-V systems, this
mechanism could not protect the ballot selections from
modiﬁcation.
Alternatively, if voters choose to download a blank ballot
or to mark a ballot to send via mail, fax, or email, they follow
a different path through the site. There is no signature screen
after marking the ballot, and instead the voter is provided with
a downloadable PDF ﬁle of the ballot and return package.
3 System Architecture and Client Operations
From the client’s perspective, each OmniBallot site is a single-
page web app. The app is written using the AngularJS frame-
work and implemented as a combination of static HTML,
JavaScript, CSS, and JSON-based conﬁguration ﬁles. This
code runs in the voter’s browser and performs all steps of the
voting process via a series of API calls to services controlled
by Democracy Live. Below, we explain how we performed
our analysis, describe the overall architecture of the platform,
and provide details of the web app’s operation.
3.1 Reverse-Engineering Methodology
Researchers have conducted numerous independent analyses
of electronic voting systems by acquiring voting equipment,
reverse engineering it, and testing it in a controlled environ-
ment (see [30] and references therein). Safely testing an
online voting system is more challenging. Such systems nec-
essarily have server-side components that (unless source code
is available) cannot be replicated in the lab. Accessing non-
public server functionality might raise legal issues and would
be ethically problematic if it risked unintentionally disrupting
real elections [47].
To avoid these issues, we constrained our analysis to pub-
licly available portions of the OmniBallot system. Following
similar methodology to Halderman and Teague [31] and, more
recently, Specter et al. [51], we obtained the client-side Om-
niBallot software, which is available to any member of the
public, reverse-engineered it, and implemented our own com-
patible server in order to drive the client without interacting
with the real voting system. Of course, this approach limits
our ability to identify vulnerabilities in Democracy Live’s
server-side code and infrastructure—an important task for
future work—but we were able to learn many details about
the platform’s design and functionality.
(a) Voter Lookup
(b) Verify Voter
(c) Return Type
(d) Ballot Marking
(e) Selection Review
(f) Signature
(g) Preview
(h) Ballot Submitted
Figure 1: Online voting with Democracy Live, as used in
Delaware. The voter’s identity and ballot selections are transmitted
over the Internet to generate a PDF ballot. Election ofﬁcials later
retrieve the ballot ﬁles and tabulate the votes. All screenshots in this
paper were captured with a local stand-in server.
3080    30th USENIX Security Symposium
USENIX Association
Figure 2: OmniBallot architecture. The web app runs in the browser and uses HTTPS to load ﬁles and call REST-like APIs from several
domains. When voting online or marking a ballot, the app sends the voter’s identity and ballot selections to Democracy Live services running
in Amazon’s cloud. The app runs JavaScript loaded from Amazon, Google, and Cloudﬂare, making all three companies (as well as Democracy
Live itself) potential points of compromise for the election system.
For our analysis, we focused on the instance of Omni-
Ballot deployed in Delaware, which was available at https://
ballot.elections.delaware.gov/. As of June 7, 2020, the site
used OmniBallot version 9.2.11, which we believe was the
most recent version of the system at that time. We began by
visiting the site and saving copies of the ﬁles that comprise
the client. We beautiﬁed [35] the miniﬁed JavaScript ﬁles and
ensured that they would not communicate with any live elec-
tion services by replacing references to *.omniballot.us
domains with localhost and disabling Google’s services.
Next, we iteratively reverse-engineered the code to un-
derstand each server API call and the format of the expected
response, repeating this process until we could complete
the voting process using a local stand-in server we created.
Finally, we conﬁrmed and extended our reconstruction of the
system’s operation by inspecting HTTP traces captured by
a Delaware voter while using the live system.
Other than accessing resources that are available to the
general public, the authors had no interaction with the Omni-
Ballot servers. At no point did we attempt to log in as a real
voter or cast a ballot in a real election.
3.2 Service Architecture
The web app communicates with several servers to load static
ﬁles or make API calls, as illustrated in Figure 2. Four of
these services are controlled by Democracy Live and hosted
in Amazon Web Services: {sites, published, lambda,
api}.omniballot.us; all use Amazon CloudFront as a
CDN and have HTTPS certiﬁcates for *.omniballot.us.
The app also loads JavaScript libraries from Google (Google
Analytics and reCAPTCHA [64]) and Cloudﬂare (PDF.js).
The sites and published servers appear to be backed
by Amazon S3. The sites server hosts the static HTML,
JavaScript, and CSS of the web app, with different paths
containing different jurisdictions’ deployments or differ-
ent versions of the code. The published server hosts
static JSON ﬁles that specify the conﬁguration of each de-
ployment (site-config.json), provide an index of bal-
lot styles (lookups.json), and deﬁne each ballot. The
site-config.json ﬁle deﬁnes the appearance and work-
ﬂow of the web app, allowing individual app instances to be
heavily customized for each jurisdiction.
The api server handles voter lookup and authentication.
It provides a REST-like API that allows clients to query for
speciﬁc voter and ballot information as JSON-encoded HTTP
queries and responses. The service is hosted through AWS
API Gateway, and may be backed by an Amazon EC2 in-
stance. The lambda server uses a similar API format to pro-
cess ballot PDF generation requests and online ballot return
submissions, and it appears to be backed by code running on
the Amazon Lambda serverless computing platform. Calls
to both servers include an x-api-key HTTP header set to a
hard-coded value.
3.3 Client–Server Interactions
In Delaware, the client-server interactions proceeded along
the following lines:
1. The browser visits https://ballot.elections.delaware.gov/
and loads the base HTML page, which deﬁnes the site
conﬁguration ﬁle as https://published.omniballot.us/10/
site-conﬁg.json and loads the app’s base code from
USENIX Association
30th USENIX Security Symposium    3081
PDF ﬁle by making a POST request to https://lambda.
omniballot.us/packagebuilder/v2. The request includes
an HTTP Authorization: Bearer header that con-
tains the voter authentication token acquired above. The
request body, shown in Figure 3, speciﬁes the election,
the ballot style, and the voter’s name and other registra-
tion information. If the voter is marking the ballot, it
also includes the ballot selections, encoded as an array
of race and selection identiﬁers. The server returns a
URL to a PDF ﬁle containing the generated ballot. The
ﬁle is hosted in Amazon S3, and the URL is a pre-signed
object URL [5] with a ﬁve-minute expiration.
6. Online ballot return uses a similar API. The app makes a
POST request to https://lambda.omniballot.us/ebr/build
with the same authorization header. The request con-
tains the same kinds of data as ballot marking, includ-
ing the voter’s identity, registration information, and
ballot selections.
In addition, the request contains a
browser ﬁngerprint generated using FingerprintJS [62]
and a base64-encoded PNG image of the voter’s sig-
nature. The server returns a ballot ID and URLs from
which the client can retrieve PDF ﬁles of the marked
ballot and return package. These are rendered in the
browser using the PDF.js library, which is retrieved from
cdnjs.cloudflare.com.
7. Finally, to submit the ballot online, the client makes
a POST request to https://lambda.omniballot.us/ebr/
submit, again including the authorization header. The
request contains the voter_id and the ballot_id from the
previous step, but the ballot selections are not resent.
Based on Democracy Live’s statements about using Ama-
zon ObjectLock [4], we assume that this API call causes
the server to place the return package and ballot PDFs
into an ObjectLock-enabled S3 bucket for delivery to
election ofﬁcials. The server sends a response indicating
success, and the voting process is complete.
4 Security Analysis
We now assess the security and privacy risks of the Omni-
Ballot platform. We analyze risks created when OmniBallot
is used in each of three modes—blank ballot delivery, bal-
lot marking, and online ballot return—and we discuss how
(or whether) they can be mitigated. We consider three main
classes of adversaries:
Adversaries with access to the voter’s device. The client-
side adversaries with which we are most concerned are ones
with the ability to alter the behavior of the voter’s web browser,
such as by modifying HTTP requests or responses or inject-
ing JavaScript into the context of the site. Several kinds of
threat actors have these capabilities, including system admin-
istrators, other people with whom the voter shares the device
(e.g., an abusive partner), and remote attackers who control
Figure 3: In Delaware, marked ballot generation took place on
OmniBallot servers. The app sent a POST request (above) that in-
cluded the voter’s identity and ballot selections. The server returned
the marked ballot as a PDF ﬁle. Online voting used a similar request
format, with the addition of a browser ﬁngerprint. Marking ballots
server-side increases risks to election integrity and ballot secrecy.
https://sites.omniballot.us/v9_2_11/combined.js. The
app dynamically loads 24 other JavaScript modules from
under the same path. It also loads the Google Analytics
library from https://www.googletagmanager.com and the
reCAPTCHA library from https://www.gstatic.com.
2. The app looks up the voter’s registration information
by making a POST request to https://api.omniballot.
us/vr/db/voters/lookup. This request (and all later POST
requests) includes headers for the reCAPTCHA API as
an abuse protection mechanism. The request contains
the voter’s ﬁrst and last names and date of birth. The
server responds with the registration data, including a
unique id (voter_id), whether the user is a “standard” or
military (UOCAVA) voter (voter_type), and their party
(voter_party) and precinct.
3. The app veriﬁes the voter’s identity by making a POST
request to https://api.omniballot.us/vr/db/voter/voter_id/
verify. The request includes the election ID as well as the
ballot number and partial social security number entered
by the user. If veriﬁcation succeeds, the server returns a
signed JSON Web Token that authenticates the voter_id.
4. To ﬁnd available elections, the app sends a GET request
to https://api.omniballot.us/accounts/account_id/current
elections?voter_type=type&voter_party=party.
The
server returns a JSON object for each election with the
election name, ID, parent_id, and opening and closing
dates. The app then locates the appropriate ballot design
by loading https://published.omniballot.us/10/parent_
id/styles/lookups.json, which is a data structure that as-
sociates ballot styles with precincts, parties, and voter
types. The ballot itself is deﬁned in a static JSON
object retrieved from https://published.omniballot.us/
10/parent_id/styles/style_id.json.
5. If the voter chooses to return the ballot via postal
mail, fax, or email, the web app generates a ballot
3082    30th USENIX Security Symposium
USENIX Association
malware on the device, such as bots or malicious browser
extensions.
Client-side malware is especially concerning because many
devices are already infected by malicious software that could
be remotely updated to attack OmniBallot. For instance, Mi-
crosoft this year took down a botnet controlled by Russian
criminals that had infected more than nine million PCs [48].
Botnets are sometimes rented or sold to other parties to per-
petrate attacks [32]. Similarly, researchers recently uncov-
ered more than 500 malicious Chrome extensions in use by
millions of people [33], and a popular legitimate Chrome
extension was hijacked and modiﬁed to forward users’ cre-
dentials to a server in Ukraine [34]. Attackers could use these
strategies to target large numbers of OmniBallot voters.
Adversaries with access to OmniBallot server infrastruc-
ture. The platform’s architecture makes server-side adver-
saries extremely powerful. Depending on which services they
compromised, they could change the code delivered to clients,
steal sensitive private information, or modify election data,
including voted ballots. Potential attackers with such access
include: (1) software engineers and system administrators at
Democracy Live; (2) insiders at Amazon, which owns and
operates the physical servers; and (3) external attackers who
manage to breach the servers or Democracy Live’s develop-
ment systems.
Adversaries with control of third-party code. Beyond its
reliance on Amazon’s cloud, OmniBallot incorporates a wide
range of third-party software and services, including An-
gularJS, FingerprintJS, PDF.js, Google Analytics, and re-
CAPTCHA. Since all this code runs within the app’s browser
context, it has the ability to access sensitive data or intro-
duce malicious behavior. In recent years, attackers have hi-
jacked several popular JavaScript libraries to target users of
software that incorporates them (e.g., [56]). Moreover, Omni-
Ballot clients load some libraries directly from Google and
Cloudﬂare, putting these companies (as well as Amazon) in a
position to surreptitiously modify the web app’s behavior.
Even large, sophisticated companies are not beyond being
compromised by nation states—see, e.g., Operation Aurora,
in which China inﬁltrated Google and a number of other high-
tech companies [67]. While Amazon, Google, and Cloudﬂare
have signiﬁcant incentives to protect their infrastructure and
reputations, they also have large stakes in the outcome of ma-
jor elections, and individual employees or small teams within
the companies may feel strong partisan sympathies and have
sufﬁcient access to attack OmniBallot. Furthermore, even
if these companies’ services were perfectly secure against
insiders and exploitation, voters may still be distrustful of
their ability to handle votes impartially—just as some of the
public does not trust the Washington Post under Jeff Bezos’s
ownership—weakening the perceived legitimacy of elections.
The subsections that follow discuss attacks that these threat
actors could carry out against OmniBallot’s blank ballot de-
livery, online ballot marking, and electronic ballot return fea-
tures, and against voters’ privacy. We omit some important
categories of attacks, including denial-of-service attacks and
attacks against voter authentication, due to limits of what
we can learn without access to the servers or detailed local
election procedures. Table 1 summarizes our analysis.
4.1 Risks of Blank Ballot Delivery
OmniBallot’s safest mode of operation is online delivery of
blank ballots that will be printed, manually marked, and re-
turned physically through postal mail or drop off. (Returning
the ballots via email or fax leads to severe risks, which we
discuss separately.) Online blank-ballot delivery can provide
a valuable enhancement to vote-by-mail systems, but elec-
tion ofﬁcials must implement rigorous safeguards to protect
against several categories of attacks.
Ballot design manipulation. One mode of attack would
be to alter the ballot design. For instance, an attacker could
change or omit certain races or candidates or substitute a bal-
lot from a different locality. Such changes might be spotted by
well informed voters, but other, harder to detect modiﬁcations
could cause votes to be counted for the wrong candidate when
tabulated by a scanner. For instance, attackers could modify
bar codes or timing marks, or shift the positions of selection
targets. Conducting these attacks would be straightforward
for adversaries with control of the client device, server infras-
tructure, or third-party code.
To protect against ballot design manipulation, ofﬁcials ﬁrst
need to check that each returned ballot matches the voter’s
assigned ballot style, using careful procedures to preserve bal-
lot secrecy. Next, since visual inspection likely cannot detect
all modiﬁcations that would cause tabulators to miscount the
votes, ofﬁcials either need to count the ballots by hand or man-
ually “remake” the ballots (transfer the votes onto pre-printed