pointer is restored to its original value to account for frame deallo-
cation. If the compiler can statically compute the requested size, it
can perform the stack allocation using a relative SP-update instruc-
tion, otherwise it uses an absolute SP-update instruction.
For example, in Figure 7, in function foo1, the argument to
alloca is a variable. Therefore, the compiler allocates 0x20 bytes
(marking 1) required by the function, then adjusts stack pointer
(%rsp) using an absolute SP-update instruction, by subtracting a
value corresponding to the argument to alloca (marking 2). When
the function completes execution, the stack pointer is simply re-
stored to the value at function entry (marking 3). Because an abso-
lute SP-update instruction (marking 2) is used, PBlocker inserts
a call to CoarseCheck after mov %r8, %rsp.
3.5 Explicit SP-update Injection through JIT
Due the unavailability of code for static-analysis based defenses,
gadgets injected into Just-In Time (JIT) code by an attacker are par-
ticularly hard to protect against. However, code generator within a
JIT engine can be modiﬁed to instrument all explicit SP-update in-
structions to enforce P1. Also, during code generation, unintended
SP-update instructions can be avoided by using veriﬁed byte se-
quences for the generated code.
3.6
Interleaved Data and Code
It is possible that code and read-only data are interleaved in the
executable section of a binary. While such a binary violates the
fundamental tenets of DEP, unfortunately they do exist.
In fact,
several DLLs in Windows system directory contain read-only data
interleaved within the code sections. For example, such read-only
data in uxtheme.dll contain absolute SP-update instructions. Gad-
get elimination solutions can not eliminate gadgets in such read-
only data. As a source code level implementation, PBlocker
ensures that no data is contained within executable regions. Par-
ticularly, during the code generation phase, all data (read-only and
writable) are allocated in separate non-executable sections and only
executable code is allocated within the read-only executable sec-
tions.
4. SECURITY ANALYSIS
In this section we ﬁrst differentiate between PBlocker and
PBlocker+, and CFI. Further, as already mentioned in Section 3.1
and Figure 4, though lack of pivoting (Section 4.3) and non-stack
pivots (Section 4.4) are out of our scope, we include them here to
provide a deeper understanding of the problem.
4.1 PBlocker/PBlocker+ vs CFI
CFI and PBlocker/PBlocker+ are fundamentally different.
CFI relies on a complete (or approximately complete) control-ﬂow
graph, whereas PBlocker and PBlocker+ do not. This key
difference allows for PBlocker and PBlocker+ to be incre-
mentally deployable. That is, protected modules can seamlessly
inter-operate with unprotected modules. This allows for protection
to be applied to high-risk modules (that contain/require absolute
SP-update instructions) such as mshtml.dll, uxtheme.dll, etc.
4.2 Pivoting through Implicit SP-update In-
structions
In principle, implicit SP-update instructions can be used to per-
form stack pivoting, however they are not as powerful as the ex-
plicit SP-update instructions. Unlike explicit SP-update instruc-
tions, implicit SP-update instructions can only move the stack pointer
by small increments. Considering that an attacker has just one
attempt at stack pivoting after exploitation, unless the payload is
close to the existing value of stack pointer, pivoting through im-
plicit SP-updates is hard.
From the defense standpoint, there are multiple implicit SP-update
instructions like pop reg;, push reg;, ret; that are all fre-
quently used. Enforcing P1 after each implicit SP-update instruc-
tion is impractical. Therefore PBlocker+ collectively asserts P1
before each function returns.
4.3 Stack-Pointer-Aligned Payload
Figure 8: Stack-pointer-aligned payload.
PBlocker addresses the integrity of the stack pointer, which
is violated during stack pivoting. While stack pivoting is required
in accomplishing most real-world ROP exploits, some exceptions
exist. Speciﬁcally, if an attacker can inject the payload to a loca-
tion already pointed to by stack pointer, there is no need for stack
pivoting. This is specially the case when the attacker can over-
ﬂow the stack and control the return address (e.g., through a buffer
overﬂow). For example, in Figure 8, through a buffer overﬂow in
the callee function, an attacker can overwrite the return address to
point to the ﬁrst gadget in the ROP payload. When the callee func-
tion returns, the ROP payload is executed.
Our solution can not protect against attacks that do not mod-
ify the stack pointer. However, buffer overﬂow is a well studied
problem (e.g, [13, 23, 38]) with practical implementations. Stack-
Guard [13], a popular solution incorporated into modern compilers
(e.g., -fstack-protector in GCC and clang), introduces a
randomly generated canary between the return address and the lo-
cal variables of a function. When the function returns, if the canary
is altered, an overﬂow is inferred. Most modern compilers not only
include support for stack canaries, but some also incorporate them
as a default setting.
4.4 Non-Stack-Pointer Pivots
The key requirement for code execution is a reliable means to re-
peatedly move the program counter. Under normal execution, x86
hardware increments the instruction pointer after every instruction,
similarly, under traditional ROP ret; or pop reg; jmp reg;
instructions allow for movement of the stack pointer that assumes
the role of program counter. In principle, as long as an attacker has
access to repeated indirect branching, code-reuse attacks can not be
eliminated.
For example, an attacker can point a general purpose register
(say edx) to the payload, and ﬁnd an amicable gadget that repeat-
edly performs update-load-branch as discussed by Checkoway et
al. [9]. Such attacks can not be defeated by PBlocker. However,
the availability of pop, ret that automatically move the stack
pointer would be missing in such non-stack pivots, and their prac-
ticability is unclear.
Schuster et al. introduce COOP [34], code reuse attacks for C++
programs. They leverage loops that execute virtual functions as
program counter. By controlling the loop counter and the array
of virtual functions that are executed, they achieve arbitrary code
execution. In such code-reuse attacks, there is no need for stack
pivoting.
5. EVALUATION
We implemented a prototype for PBlocker and PBlocker+
as a compiler-level solution. The instrumentation phase (Figure 6)
was implemented by adding a code-generation pass to the LLVM-
3.5.0 compiler. As a proof-of-concept, we also implemented the
target-dependent runtime for 64 bit Linux (version 3.2.0). Our
LLVM pass comprises of 315 lines of C++ code for PBlocker
and 330 lines of C++ code for PBlocker+. The runtime for Linux
consists of 20 lines of assembly code.
5.1 Performance
We evaluate the performance of PBlocker and PBlocker+
on SPECINT 2006 benchmark, and performance of PBlocker on
GNU coreutils (ver 8.23.137) and GNU binutils (ver 2.25). The
results for SPEC benchmark for PBlocker+ and PBlocker are
presented in Figure 10 and 9 respectively, and results for coreutils
and binutils are presented in Figure 11. Overall, we found that
PBlocker and PBlocker+ impose very little overhead. Av-
erage overhead of PBlocker was found to be 1.04% for SPEC
benchmark, 1.99% for binutils and 0.7% for coreutils. This is due
to the infrequent use of absolute SP-update instructions in the bi-
nary. For example, 5 out of 9 programs that we tested in coreutils
contained no absolute SP-update instructions.
Furthermore, PBlocker+, which is a more conservative and
strict defense imposed 2.9% overhead for the SPECINT bench-
mark.
PBlocker#
Vanilla#(baseline)#
Average#
483.xalancbmk#
473.astar#
471.omnetpp#
464.h264ref#
462.libquantum#
458.sjeng#
456.hmmer#
445.gobmk#
429.mcf#
401.bzip2#
400.perlbench#
96#
98#
100#
102#
104#
106#
108#
Figure 9: Performance of PBlocker for SPEC INT 2006 bench-
mark normalized against vanilla LLVM-3.5.0. The x-axis is ad-
justed in order to clearly indicate the overhead.
Pblocker+#
Vanilla#(baseline)#
Average#
483.xalancbmk#
473.astar#
471.omnetpp#
464.h264ref#
462.libquantum#
458.sjeng#
456.hmmer#
445.gobmk#
429.mcf#
401.bzip2#
400.perlbench#
96#
98#
100# 102# 104# 106# 108# 110#
Figure 10: Performance of PBlocker+ for SPEC INT 2006
benchmark normalized against vanilla LLVM-3.5.0. Policy is en-
forced before each function returns. The x-axis is adjusted in order
to clearly indicate the overhead.
5.2 Pivoting in Practice
In Table 1, we present some modules in Windows OS and the
common absolute SP-update instructions within them. We found
xchg eax, esp; to be the most common pivoting instruction.
Also, in Table 3, we present a corpus of recent exploits on Metas-
ploits [1] and the instructions they utilize to accomplish pivoting.
Unsurprisingly, they use the xchg eax, esp; instruction.
It
must be noted that exploits on Metasploit are proof-of-vulnerability,
and pivoting is independent of the vulnerability. That is, depending
on the attack speciﬁcs, a feasible pivot can be utilized for multiple
exploits. However, in practice absolute SP-update instructions are
most popular to perform stack pivot.
Moreover, hxds.dll – the help library for MS Ofﬁce is not relocat-
able and always loads at the same address. An attacker can simply
load and utilize the pivot gadgets within the module. PBlocker
and PBlocker+ are particularly useful in protecting such non-
relocatable modules. PBlocker can defeat pivoting in all cases
listed in Table 1 except the gadget at uxtheme.dll:0x6ce8ab5e be-
cause uxtheme.dll contains readonly data interleaved with code in
the .text segment, and data item char s_keyPublic1[] is
at address 0x6ce8ab38.
5.3 SP-Update Instructions vs Gadgets
Program
Ofﬁce 2007
Ofﬁce 2010
Win XP SP3
Java Runtime
Apple QT
Adobe Flash
Win 7
Win 7
Suite
coreutils
binutils
rm
cp
factor
sha512
sort
cat
wc
md5sum
split
objdump
objcopy
ld
nm
ar
readelf
9470
17403
9907
9969
19471
6704
5400
5659
9888
265075
230226
48964
189299
192428
60170
0
14
4
0
0
4
0
0
4
49
16
1
16
16
31
Gadget Module Gadget Address
Relocatable PBlocker defeats pivot?
Table 1: Absolute gadgets in Windows OS.
hxds.dll
hxds.dll
msvcrt.dll
NPJPI.dll
QickTime.qts
ﬂashplayer.exe
v11.3.300.257
uxtheme.dll
uxtheme.dll
0x51c2213f
0x51c00e64
0x77C3868A
0x7c342643
0x20302020
0x1001d891
0x6ce7c905
0x6ce8ab5e
Pivot Instruction
xchg eax, esp
xchg eax, esp
xchg eax, esp
xchg eax, esp
pop esp
xchg eax, esp
mov esp, ebp
mov esp,
[edi + 0xffffffcd]
Program Total Instructions
# Absolute SP-update
# Relative SP-update Total # Gadgets
Table 2: Explicit SP-Update instructions vs Gadgets
NO
NO
Yes
Yes
Yes
Yes
Yes
Yes
117
170
118
77
158
133
77
71
108
1524
1366
705
1104
1118
207
X
X
X
X
X
X
X