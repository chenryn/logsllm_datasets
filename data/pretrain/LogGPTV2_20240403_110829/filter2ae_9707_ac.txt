                for (Constructor constructor : constructors) {
                    if ((types = constructor.getParameterTypes()).length == 1
                            && types[0].equals(clazz.getDeclaringClass())) {
                        defaultConstructor = constructor;
                        break;
                    }
                }
            }
        }
        return defaultConstructor;
    }
若不存在这样特性的构造方法，则
    boolean isInterfaceOrAbstract = clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers());
    if ((defaultConstructor == null && builderClass == null) || isInterfaceOrAbstract) {
        ...抽象类或接口类
    } else if ((factoryMethod = getFactoryMethod(clazz, methods, jacksonCompatible)) != null) {
        ...使用JSONCreator注解指定构造工厂方法
    } else if (!isInterfaceOrAbstract) {
       ...
        for (Constructor constructor : constructors) {
            Class[] parameterTypes = constructor.getParameterTypes();
            ...
            boolean is_public = (constructor.getModifiers() & Modifier.PUBLIC) != 0;
            if (!is_public) {
                continue;
            }
            String[] lookupParameterNames = ASMUtils.lookupParameterNames(constructor);
            if (lookupParameterNames == null || lookupParameterNames.length == 0) {
                continue;
            }
            if (creatorConstructor != null
                    && paramNames != null && lookupParameterNames.length ,
int)，它是在json数据反序列化时，通过@type指定class后，对class是否可被反序列化进行检查，其中检查包括黑名单、白名单、构造方法等
我们跟进com.alibaba.fastjson.parser.ParserConfig#checkAutoType(java.lang.String,
java.lang.Class, int)：
    if (typeName == null) {
        return null;
    }
    if (typeName.length() >= 192 || typeName.length()  clazz = null;
    final long BASIC = 0xcbf29ce484222325L;
    final long PRIME = 0x100000001b3L;
    final long h1 = (BASIC ^ className.charAt(0)) * PRIME;
    if (h1 == 0xaf64164c86024f1aL) { // [
        throw new JSONException("autoType is not support. " + typeName);
    }
    if ((h1 ^ className.charAt(className.length() - 1)) * PRIME == 0x9198507b5af98f0L) {
        throw new JSONException("autoType is not support. " + typeName);
    }
    final long h3 = (((((BASIC ^ className.charAt(0))
            * PRIME)
            ^ className.charAt(1))
            * PRIME)
            ^ className.charAt(2))
            * PRIME;
    boolean internalWhite = Arrays.binarySearch(INTERNAL_WHITELIST_HASHCODES,
            TypeUtils.fnv1a_64(className)
    ) >= 0;
    if ((!internalWhite) && (autoTypeSupport || expectClassFlag)) {
        long hash = h3;
        for (int i = 3; i = 0) {
                clazz = TypeUtils.loadClass(typeName, defaultClassLoader, true);
                if (clazz != null) {
                    return clazz;
                }
            }
            if (Arrays.binarySearch(denyHashCodes, hash) >= 0 && TypeUtils.getClassFromMapping(typeName) == null) {
                throw new JSONException("autoType is not support. " + typeName);
            }
        }
    }
再接着，会对className的前两位字符进行判断是否允许，然后会二分查找内部白名单INTERNAL_WHITELIST_HASHCODES，若不在内部白名单内，并且开启了autoTypeSupport或者是预期以外的class，则会对className后面的字符继续进行hash处理后与外部白名单、黑名单进行判断，决定其是否被支持反序列化。
    if (clazz == null) {
        clazz = TypeUtils.getClassFromMapping(typeName);
    }
    if (clazz == null) {
        clazz = deserializers.findClass(typeName);
    }
    if (clazz == null) {
        clazz = typeMapping.get(typeName);
    }
    if (internalWhite) {
        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, true);
    }
    if (clazz != null) {
        if (expectClass != null
                && clazz != java.util.HashMap.class
                && !expectClass.isAssignableFrom(clazz)) {
            throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
        }
        return clazz;
    }
从上面的代码中，我们可以看到有好几个if流程从jvm缓存中获取class，也即会对class进行一定的判断，决定是否从缓存map中加载，我们这一节重点关注的其实是TypeUtils.getClassFromMapping：
    if (clazz == null) {
        clazz = TypeUtils.getClassFromMapping(typeName);
    }
跟进TypeUtils.getClassFromMapping代码实现，可以看到，其具体是从mappings缓存中获取class
    public static Class getClassFromMapping(String className){
        return mappings.get(className);
    }
接着会判断class是否在内部白名单内，若在白名单内，会直接通过检查，返回class
    if (internalWhite) {
        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, true);
    }
跟进TypeUtils.loadClass，可以看到第三个参数true，决定了在其方法实现中是否会对查找出来的class进行缓存到mappings
    public static Class loadClass(String className, ClassLoader classLoader, boolean cache) {
        ...
        try{
            if(classLoader != null){
                clazz = classLoader.loadClass(className);
                if (cache) {
                    mappings.put(className, clazz);
                }
                return clazz;
            }
        } catch(Throwable e){
            e.printStackTrace();
            // skip
        }
        try{
            ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
            if(contextClassLoader != null && contextClassLoader != classLoader){
                clazz = contextClassLoader.loadClass(className);
                if (cache) {
                    mappings.put(className, clazz);
                }
                return clazz;
            }
        } catch(Throwable e){
            // skip
        }
        try{
            clazz = Class.forName(className);
            if (cache) {
                mappings.put(className, clazz);
            }
            return clazz;
        } catch(Throwable e){
            // skip
        }
        return clazz;
    }
下一步，可以看到，又是一段黑白名单的检查代码，不过这次是autoTypeSupport不启用的情况下
    if (!autoTypeSupport) {
        long hash = h3;
        for (int i = 3; i = 0) {
                throw new JSONException("autoType is not support. " + typeName);
            }
            // white list
            if (Arrays.binarySearch(acceptHashCodes, hash) >= 0) {
                if (clazz == null) {
                    clazz = TypeUtils.loadClass(typeName, defaultClassLoader, true);
                }
                if (expectClass != null && expectClass.isAssignableFrom(clazz)) {
                    throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                }
                return clazz;
            }
        }
    }
接着，在这段代码中通过asm对其class进行visit，取出JsonType注解信息
    boolean jsonType = false;
    InputStream is = null;
    try {
        String resource = typeName.replace('.', '/') + ".class";
        if (defaultClassLoader != null) {
            is = defaultClassLoader.getResourceAsStream(resource);
        } else {
            is = ParserConfig.class.getClassLoader().getResourceAsStream(resource);
        }
        if (is != null) {
            ClassReader classReader = new ClassReader(is, true);
            TypeCollector visitor = new TypeCollector("", new Class[0]);
            classReader.accept(visitor);
            jsonType = visitor.hasJsonType();
        }
    } catch (Exception e) {
        // skip
    } finally {
        IOUtils.close(is);
    }
而从后续代码中也可以了解到，若到这一步，class还是null的时候，就会对其是否注解了JsonType、是否期望class、是否开启autotype进行判断。若判断通过，然后会判断是否开启autotype或是否注解了JsonType，从而觉得是否会在加载class后，对其缓存到mappings这个集合中，那也就是说，我只要开启了autoType的话，在这段逻辑就会把class缓存道mappings中
    if (clazz == null && (autoTypeSupport || jsonType || expectClassFlag)) {
        boolean cacheClass = autoTypeSupport || jsonType;
        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);
    }
上面这一块是一个很关键的地方，也是我这一小节缓存绕过的主要核心
最后，也就是我们需要去绕过的地方了，像一般大部分情况下，我们基本不可能找到注解有JsonType的class的gadget
chains，所以，这一步中对jsonType判断，然后缓存class到mappings基本就没什么利用价值了。但这块逻辑中，我们需要注意的其实是JavaBeanInfo在build后，对其creatorConstructor的判断
    if (clazz != null) {
        if (jsonType) {
            TypeUtils.addMapping(typeName, clazz);
            return clazz;
        }
        if (ClassLoader.class.isAssignableFrom(clazz) // classloader is danger
                || javax.sql.DataSource.class.isAssignableFrom(clazz) // dataSource can load jdbc driver
                || javax.sql.RowSet.class.isAssignableFrom(clazz) //
                ) {
            throw new JSONException("autoType is not support. " + typeName);
        }
        if (expectClass != null) {
            if (expectClass.isAssignableFrom(clazz)) {
                TypeUtils.addMapping(typeName, clazz);
                return clazz;
            } else {
                throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
            }
        }
        JavaBeanInfo beanInfo = JavaBeanInfo.build(clazz, clazz, propertyNamingStrategy);
        if (beanInfo.creatorConstructor != null && autoTypeSupport) {
            throw new JSONException("autoType is not support. " + typeName);
        }
    }
    if (!autoTypeSupport) {
        throw new JSONException("autoType is not support. " + typeName);
    }
从creatorConstructor和autoTypeSupport的判断流程中，我们可以得知，只要autoTypeSupport为true，并且creatorConstructor（上一小节就是描述构造方法的选择，这里判断的构造方法是第二种选择）不为空，则会抛出异常，而后面的!autoTypeSupport判断，也表示了，就算上一步通过设置autoTypeSupport为true可以绕过，但是最终也避免不了它抛出异常的制裁：
    if (!autoTypeSupport) {
        throw new JSONException("autoType is not support. " + typeName);
    }
那怎么办呢？这时候就得看前面的代码了，我前面也说了，在对黑白名单进行一轮检查后的时候，会有这个判断：
    if (clazz == null) {
        clazz = TypeUtils.getClassFromMapping(typeName);
    }
    public static Class getClassFromMapping(String className){
        return mappings.get(className);
    }
从mappings中直接获取，接着在后面判断道class不为空时，直接就返回了，从而提前结束该方法执行，绕过构造方法creatorConstructor和autoTypeSupport的判断
    if (clazz != null) {
        if (expectClass != null