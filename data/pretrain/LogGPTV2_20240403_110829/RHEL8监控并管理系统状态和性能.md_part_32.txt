:::
::: itemizedlist
**流程**
-   将 `perf stat`{.literal} 附加到正在运行的进程：
    ``` screen
    $ perf stat -p ID1,ID2 sleep seconds
    ```
    前面的例子计算进程 `ID1`{.literal} 和 `ID2`{.literal}
    的事件，这些事件的时间单位是 `sleep`{.literal}
    命令使用的`秒`{.literal}数。
:::
::: itemizedlist
**其它资源**
-   `perf-stat(1)`{.literal} man page
:::
:::
:::
[]{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance}第 21 章 使用 perf 记录和分析性能配置集 {.title}
:::
`perf`{.literal} 工具允许您记录性能数据并稍后进行分析。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#the-purpose-of-perf-record_recording-and-analyzing-performance-profiles-with-perf}perf 记录的目的 {.title}
:::
`perf 记录`{.literal} 命令对性能数据进行抽样，并将其存储在文件
`perf.data`{.literal} 中，该文件可与其他 `perf`{.literal}
命令一起读取和视觉化。`perf.data`{.literal}
在当前目录中生成，并可在以后访问，可能在其他计算机上。
如果您没有为 `perf 记录`{.literal} 指定命令，它将记录，直到您通过按
`Ctrl+C`{.literal} 手动停止该进程。您可以通过传递 `-p`{.literal}
选项后跟一个或多个进程，将 `perf 记录`{.literal}
附加到特定进程。您可以在没有 root 访问权限的情况下运行
`perf 记录`{.literal}，但是，这样做将仅对用户空间中的性能数据进行示例。在默认模式中，`perf 记录`{.literal}
使用 CPU 周期作为抽样事件，并在启用了继承模式的每线程模式下运行。
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#recording-a-performance-profile-without-root-access_recording-and-analyzing-performance-profiles-with-perf}在没有 root 访问权限的情况下记录性能配置集 {.title}
:::
您可以在没有 root 访问权限的情况下使用
`perf 记录`{.literal}，以仅使用用户空间中的样本和记录性能数据。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: itemizedlist
**流程**
-   示例并记录性能数据：
    ``` screen
    $ perf record command
    ```
    使用您要 `在其中`{.literal} 的示例数据的命令替换
    command。如果您没有指定命令，则 `perf 记录`{.literal}
    会对数据进行抽样，直到您通过按 [**Ctrl**]{.keycap}+[**C**]{.keycap}
    手动停止它。
:::
::: itemizedlist
**其它资源**
-   `perf-record(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#recording-a-performance-profile-with-root-access_recording-and-analyzing-performance-profiles-with-perf}使用 root 访问权限记录性能配置集 {.title}
:::
您可以使用 root 访问权限 `的 perf 记录`{.literal}
来同时在用户空间和内核空间中对用户空间和内核空间的性能数据进行抽样和记录。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
-   具有 root 访问权限。
:::
::: itemizedlist
**流程**
-   示例并记录性能数据：
    ``` screen
    # perf record command
    ```
    使用您要 `在其中`{.literal} 的示例数据的命令替换
    command。如果您没有指定命令，则 `perf 记录`{.literal}
    会对数据进行抽样，直到您通过按 [**Ctrl**]{.keycap}+[**C**]{.keycap}
    手动停止它。
:::
::: itemizedlist
**其它资源**
-   `perf-record(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#recording-a-performance-profile-in-per-cpu-mode_recording-and-analyzing-performance-profiles-with-perf}以每个 CPU 模式记录性能配置集 {.title}
:::
您可以在每个 CPU 模式中使用 `perf 记录`{.literal} 来同时在受监控 CPU
上的所有线程中对用户空间和内核空间的性能数据进行抽样和记录。默认情况下，按
CPU 模式监控所有在线 CPU。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: itemizedlist
**流程**
-   示例并记录性能数据：
    ``` screen
    # perf record -a command
    ```
    使用您要 `在其中`{.literal} 的示例数据的命令替换
    command。如果您没有指定命令，则 `perf 记录`{.literal}
    会对数据进行抽样，直到您通过按 [**Ctrl**]{.keycap}+[**C**]{.keycap}
    手动停止它。
:::
::: itemizedlist
**其它资源**
-   `perf-record(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#capturing-call-graph-data-with-perf-record_recording-and-analyzing-performance-profiles-with-perf}使用 perf 记录捕获调用图形数据 {.title}
:::
您可以配置 `perf 记录`{.literal}
工具，以便它可以记录哪些功能正在调用性能配置集中的其他功能。这有助于识别多个进程调用同一功能时的瓶颈。
::: itemizedlist
**先决条件**
-   安装 `perf`{.literal} 用户空间工具。如需更多信息，请参阅 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}。
:::
::: itemizedlist
**流程**
-   使用 `--call-graph`{.literal} 选项的示例和记录性能数据：
    ``` screen
    $ perf record --call-graph method command
    ```
    ::: itemizedlist
    -   使用您要 `在其中`{.literal} 的示例数据的命令替换
        command。如果您没有指定命令，则 `perf 记录`{.literal}
        会对数据进行抽样，直到您通过按
        [**Ctrl**]{.keycap}+[**C**]{.keycap} 手动停止它。
    -   使用以下解压缩方法之一替换 [*方法*]{.emphasis} ：
        ::: variablelist
        [`fp`{.literal}]{.term}
        :   使用帧指针方法。根据编译器优化，例如使用 GCC
            选项构建的二进制文件
            `--fomit-frame-pointer`{.literal}，这可能无法解压堆栈。
        [`dwarf`{.literal}]{.term}
        :   使用 DWARF 调用信息来取消堆栈。
        [`lbr`{.literal}]{.term}
        :   在 Intel 处理器上使用最后一个分支记录硬件。
        :::
    :::
:::
::: itemizedlist
**其它资源**
-   `perf-record(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#analyzing-perf-data-with-perf-report_recording-and-analyzing-performance-profiles-with-perf}使用 perf 报告分析 perf.data {.title}
:::
您可以使用 `perf 报告`{.literal} 来显示和分析 `perf.data`{.literal}
文件。
::: itemizedlist
**先决条件**
-   安装 `perf`{.literal} 用户空间工具。如需更多信息，请参阅 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}。
-   当前目录中有一个 `perf.data`{.literal} 文件。
-   如果 `perf.data`{.literal} 文件是使用 root
    访问权限创建的，则您需要使用 root 访问权限运行
    `perf 报告`{.literal}。
:::
::: itemizedlist
**流程**
-   显示 `perf.data`{.literal} 文件的内容，以进一步分析：
    ``` screen
    # perf report
    ```
    这个命令会显示类似如下的输出：
    ``` screen
    Samples: 2K of event 'cycles', Event count (approx.): 235462960
    Overhead  Command          Shared Object                     Symbol
       2.36%  kswapd0          [kernel.kallsyms]                 [k] page_vma_mapped_walk
       2.13%  sssd_kcm         libc-2.28.so                      [.] memset_avx2_erms 2.13% perf [kernel.kallsyms] [k] smp_call_function_single 1.53% gnome-shell libc-2.28.so [.] strcmp_avx2
       1.17%  gnome-shell      libglib-2.0.so.0.5600.4           [.] g_hash_table_lookup
       0.93%  Xorg             libc-2.28.so                      [.] memmove_avx_unaligned_erms 0.89% gnome-shell libgobject-2.0.so.0.5600.4 [.] g_object_unref 0.87% kswapd0 [kernel.kallsyms] [k] page_referenced_one 0.86% gnome-shell libc-2.28.so [.] memmove_avx_unaligned_erms
       0.83%  Xorg             [kernel.kallsyms]                 [k] alloc_vmap_area
       0.63%  gnome-shell      libglib-2.0.so.0.5600.4           [.] g_slice_alloc
       0.53%  gnome-shell      libgirepository-1.0.so.1.0.0      [.] g_base_info_unref
       0.53%  gnome-shell      ld-2.28.so                        [.] _dl_find_dso_for_object
       0.49%  kswapd0          [kernel.kallsyms]                 [k] vma_interval_tree_iter_next
       0.48%  gnome-shell      libpthread-2.28.so                [.] pthread_getspecific 0.47% gnome-shell libgirepository-1.0.so.1.0.0 [.] 0x0000000000013b1d 0.45% gnome-shell libglib-2.0.so.0.5600.4 [.] g_slice_free1 0.45% gnome-shell libgobject-2.0.so.0.5600.4 [.] g_type_check_instance_is_fundamentally_a 0.44% gnome-shell libc-2.28.so [.] malloc 0.41% swapper [kernel.kallsyms] [k] apic_timer_interrupt 0.40% gnome-shell ld-2.28.so [.] _dl_lookup_symbol_x 0.39% kswapd0 [kernel.kallsyms] [k] raw_callee_save___pv_queued_spin_unlock
    ```
:::
::: itemizedlist
**其它资源**
-   `perf-report(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#recording-and-analyzing-performance-profiles-with-perf_monitoring-and-managing-system-status-and-performance.html#interpretation-of-perf-report-output_recording-and-analyzing-performance-profiles-with-perf}perf 报告输出的解读 {.title}
:::
运行 `perf 报告`{.literal} 命令显示的表将数据分为几个列：
::: variablelist
[\'Overhead\' 列]{.term}
:   指明在该特定功能中收集总样本的百分比。
[\'Command\' 列]{.term}
:   告诉您从哪个进程收集样本。
[\"共享对象\"列]{.term}
:   显示样本来自的 ELF 镜像的名称（样本来自内核时使用名称
    \[kernel.kallsyms\]）。