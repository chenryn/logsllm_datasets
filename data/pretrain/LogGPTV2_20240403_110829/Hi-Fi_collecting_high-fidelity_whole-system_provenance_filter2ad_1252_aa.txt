title:Hi-Fi: collecting high-fidelity whole-system provenance
author:Devin J. Pohly and
Stephen E. McLaughlin and
Patrick D. McDaniel and
Kevin R. B. Butler
Hi-Fi: Collecting High-Fidelity Whole-System Provenance
Devin J. Pohly, Stephen McLaughlin,
Patrick McDaniel
Pennsylvania State University
University Park, PA
{djpohly,smclaugh,mcdaniel}@cse.psu.edu
Kevin Butler
University of Oregon
Eugene, OR
PI:EMAIL
ABSTRACT
Data provenance—a record of the origin and evolution of data in
a system—is a useful tool for forensic analysis. However, existing
provenance collection mechanisms fail to achieve sufﬁcient breadth
or ﬁdelity to provide a holistic view of a system’s operation over
time. We present Hi-Fi, a kernel-level provenance system which
leverages the Linux Security Modules framework to collect high-
ﬁdelity whole-system provenance. We demonstrate that Hi-Fi is
able to record a variety of malicious behavior within a compro-
mised system.
In addition, our benchmarks show the collection
overhead from Hi-Fi to be less than 1% for most system calls and
3% in a representative workload, while simultaneously generating
a system measurement that fully reﬂects system evolution. In this
way, we show that we can collect broad, high-ﬁdelity provenance
data which is capable of supporting detailed forensic analysis.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Secu-
rity and protection; D.4.6 [Operating Systems]: Security and Pro-
tection—Invasive software
General Terms
Security, Design
Keywords
data provenance, forensics, malware, reference monitor
1.
INTRODUCTION
Data provenance, which is a detailed record of the origin and
evolution of data in a system, is a useful tool in systems secu-
rity.
In its raw form, provenance data is simply a series of sys-
tem events, such as a ﬁle being written or a process being created.
Taken together, these events form the provenance record for that
system, and examining this record can reveal detailed information
about the system’s secure or insecure operation. Previous works on
data provenance have pointed out many such possibilities, such as
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3–7, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
performing intrusion detection [19] or identifying data which may
have been exﬁltrated from the system [10].
Provenance records are well suited to system forensics. Current
forensic analysis techniques exploit the ﬂexibility of event-based
logs for a number of purposes. For example, audit logs can be
used to evaluate ongoing compliance with real-world policies [6]
or to create detailed reconstructions of several aspects of system
state [7]. A complete provenance record provides an even richer
set of information for this purpose (see Section 3.2).
However, for a data provenance system to provide the holistic
view of system operation required for such forensic applications,
it must be complete and faithful to actual events. This property,
which we call “ﬁdelity,” is necessary for drawing valid conclusions
about system security. A missing entry in the provenance record
could sever an important information ﬂow, while a spurious en-
try could falsely implicate an innocuous process. As we discuss
in Section 2.1, these requirements can be achieved by designing
the provenance collection mechanism around the reference monitor
concept [1]. In particular, this mechanism must provide complete
mediation for events which should appear in the record.
The following scenario illustrates this need: Alice runs a high-
proﬁle website. One day, her web server is infected by the (hypo-
thetical) PwnHP worm. PwnHP takes control of a website’s be-
havior by infecting the system’s PHP binary. It also starts a dae-
monized process which periodically connects to a command and
control server for instructions. These connections alert Alice to the
fact that something is amiss.
Fortunately, Alice is collecting provenance data for this system.
She retrieves the logs from her append-only storage server and be-
gins to investigate. First, she locates one of the outgoing connec-
tions in the provenance record and traces the process provenance
back to the original compromised thread in her web server. She
can then follow the provenance trail forward to see the modiﬁed
PHP binary, as well as all of the malicious behavior that it per-
forms when executed. Alice can then proceed with conﬁdence in
restoring her system to a good state.
One lesson we can learn from this story is that forensic investiga-
tion requires a deﬁnition of provenance which is broader than just
ﬁle metadata. What is needed is a record of whole-system prove-
nance which retains actions of processes, IPC mechanisms, and
even the kernel. These “transient” system objects can be meaning-
ful even without being an ancestor of any “persistent” object. The
command-and-control daemon on Alice’s server, for example, was
signiﬁcant because it was a descendant of the compromised pro-
cess. If the provenance system had deemed it unworthy of inclusion
in the record, she could not have traced the outgoing connections
to the compromise.
259In this paper, we present Hi-Fi, a provenance system designed
to collect high-ﬁdelity whole-system provenance. Hi-Fi is the ﬁrst
provenance system which can collect a complete provenance record
from early kernel initialization through system shutdown. Unlike
existing provenance systems, it accounts for all kernel actions as
well as application actions. Hi-Fi can also collect socket prove-
nance, creating a system-level provenance record that spans mul-
tiple hosts. Furthermore, it solves a number of design and imple-
mentation problems unique to this work.
We evaluate Hi-Fi in two ways. First, we demonstrate its ability
to capture behavior on a system running malicious software. We
create a tool which performs common malicious actions such as
creating a backdoor account, establishing persistence in the sys-
tem, and exﬁltrating sensitive data. In each case, inspection of the
system provenance record revealed the malicious actions. Second,
we evaluate Hi-Fi’s performance for individual system calls and for
a system-call heavy workload. We observe an overhead of less than
1% for most system calls, and a maximum of 6% for the read sys-
tem call. For an I/O-bound workload, the average overhead is less
than 3%.
2. BACKGROUND
Maintaining provenance records is a well-established practice in
ﬁelds which deal with physical artifacts, but provenance for dig-
ital artifacts is a comparatively new application. The earliest im-
plementations of digital provenance focused on highly structured,
special-purpose data. One such system is Trio [25], a database
management system that stores the provenance of its records. Many
other special-purpose systems exist, such as Panda [9], which fo-
cuses on speciﬁc workﬂows, and provenance aware Condor [18],
which collects provenance for jobs on a speciﬁc batch system.
To support forensic analysis, however, we need the ability to
trace arbitrary, unstructured data. This requires general-purpose,
system-level provenance collection. The ﬁrst such provenance sys-
tem, Lineage File System [19], accomplished this by intercepting
system calls in a modiﬁed Linux kernel. When an application ex-
ecuted one of these calls, a record describing the action would be
written to the printk buffer and stored in a MySQL database. The
same system-call approach is used by more recent systems, such as
PASSv2 [15], which handles ten different system calls, and Foren-
six [8], which intercepts around seventy-ﬁve. These systems an-
alyze the arguments to system calls and write provenance data to
log ﬁles on the disk. Unfortunately, system-call interception can-
not produce a complete provenance record, because the kernel it-
self does not use system calls. Kernel-initiated actions, such as
executing the interpreter for Alice’s PHP scripts, are therefore not
captured at the system-call layer.
Another option for collecting system-level provenance is to in-
strument the ﬁlesystem layer (e.g., the Linux VFS). This is the ap-
proach taken by the Story Book provenance system [21]. Story
Book is designed as a framework which allows multiple “prove-
nance sources” to collect data. One of the provided sources is a
ﬁlesystem implemented using the FUSE API [4]. This ﬁlesystem
acts as a layer between the kernel and an existing ﬁlesystem, cap-
turing ﬁle activity and writing the resultant provenance data to a
custom transactional storage system. Both the kernel and applica-
tions access ﬁles through the VFS, so this approach can generate a
complete record of ﬁle activity. However, this does not provide the
whole-system view of provenance needed for forensics.
2.1 Linux Security Modules
In order to create a system which does provide the needed prop-
erties, we draw on the three design goals of the reference monitor
userspace
sshd
vim
system calls
VFS
LSM
kernel
objects
kernelspace
Figure 1: Complete mediation with LSM
concept [1]. Tamperproofness, which states that a system cannot
be made to behave incorrectly, will ensure that our provenance col-
lector does not generate spurious or inaccurate records. Complete
mediation guarantees that every access is handled, whether initi-
ated by an application or by the kernel. For a provenance collector,
this ensures that every legitimate event will appear in the record.
Finally, if the collector is simple enough to be veriﬁed, then we can
be certain that the ﬁrst two properties hold. Taken together, these
three conditions guarantee ﬁdelity of the provenance record.
Current approaches to provenance systems do not provide sufﬁ-
cient ﬁdelity. Our system overcomes this by building on a frame-
work intended for complete mediation. Linux Security Modules, or
LSM, is a framework which was originally designed for integrat-
ing custom access control mechanisms into the Linux kernel [26].
It does this by mediating access, not to system calls, but to kernel
objects themselves, as Figure 1 illustrates. The LSM framework
comprises a set of hooks which are carefully placed throughout the
kernel. Security modules can provide an implementation for any
of these hooks, which are executed just before the corresponding
access takes place. The placement of these hooks has been repeat-
edly analyzed and reﬁned [3, 5, 28, 24] to ensure that every access
is mediated.
The designers of the LSM framework are deliberate in establish-
ing where this mediation takes place. In particular, they identify
several issues with system-call interception: that it “is not race-free,
may require code duplication, and may not adequately express the
full context needed to make security policy decisions” [26]. LSM
was created to avoid these problems and provide complete media-
tion, which is required for high-ﬁdelity provenance collection.
3. DESIGN
Hi-Fi consists of three components: the provenance collector, the
provenance log, and the provenance handler. Figure 2 depicts the
interaction between these components. The collector is an LSM; as
such, it resides in kernelspace and is notiﬁed whenever a kernel ob-
ject access is about to take place. When invoked, the collector con-
structs an entry describing the action and writes it to the provenance
log. The log is a buffer which presents these entries to userspace
as a ﬁle. The provenance handler can then access this ﬁle using the
standard ﬁle API, process it, and store the provenance record. The
handler used in our experiments simply copies the log data to a ﬁle
on disk, but it is possible to implement a custom handler for any
260kernelspace
userspace
Kernel object
LSM hook
collector
handler
log
Figure 2: Architecture of Hi-Fi
purpose, such as post-processing, graphical analysis, or storage on
a remote host.
3.1 Threat Model
We deﬁne a threat against our system as any way of compromis-
ing the ﬁdelity of the provenance record during collection. Hi-Fi
maintains the ﬁdelity of provenance collection under any userspace
compromise. This is a strictly stronger guarantee than those pro-
vided by current system-level provenance collection systems. In
the event of a kernel-level compromise, the adversary will be able
to tamper with the compenents of the provenance collector. How-
ever, the integrity of data up to and including the kernel com-
promise can be protected by an isolated disk-level versioning sys-
tem [22] or a strong write-once read-many storage system [20]. In
fact, since provenance data never changes after being written, a
storage system with strong WORM guarantees is particularly well-
suited to this task. For socket provenance, Hi-Fi guarantees that
incoming data will be recorded accurately; to prevent on-the-wire
tampering by an adversary, standard end-to-end protection such as
IPsec should be used.
3.2 Provenance Collector
The main component of Hi-Fi is the in-kernel provenance col-
lector, which is responsible for observing provenance-generating
events. The collector consists of a number of LSM hooks which
mediate operations on kernel objects. Table 1 lists all of the hooks
which generate provenance data; several other hooks are used for
internal memory management. For each hook, the collector gathers
the relevant context from the kernel and writes one or more entries
to the provenance log. By mediating the appropriate kernel objects,
we are able to capture a wide variety of events:
• Reads and writes to ﬁle descriptors, including regular ﬁles,
device ﬁles, and pipes.
• File operations: renaming, changing permissions, etc.
• Inter-process communication, such as shared memory, mes-
sage queues, and UNIX domain sockets.
• Network communication between provenanced hosts.
• Program execution with full arguments and environment.
• Creation and deletion of credential objects (creds), which
represent both process and kernel actions.
• User transitions, e.g., login changing to the authenticated
user and group, passwd escalating to root by setuid execu-
tion, or sshd dropping privileges.
Inode
Open ﬁle
Program
Credential
Socket
Message queue
Shared memory
inode_init_security
inode_free_security
inode_link
inode_unlink
inode_rename
inode_setattr
inode_readlink
inode_permission
file_mmap
file_permission
bprm_check_security
bprm_committing_creds
cred_prepare
cred_free
cred_transfer
task_fix_setuid
socket_sendmsg
socket_post_recvmsg
socket_sock_rcv_skb
socket_dgram_append
socket_dgram_post_recv
unix_may_send
msg_queue_msgsnd
msg_queue_msgrcv
shm_shmat
Table 1: LSM hooks used to collect provenance
These events provide a comprehensive view of a system’s history,
including the entire process execution tree, the complete ﬁlesystem