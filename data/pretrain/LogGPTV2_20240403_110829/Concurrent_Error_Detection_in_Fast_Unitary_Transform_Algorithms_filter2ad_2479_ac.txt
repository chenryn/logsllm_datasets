A straightforward design process is outlined in Figure 
4.  It  uses  all  the  techniques  discussed  earlier,  ending 
with  the check  for all  nonzero  reactions, equation  (35). 
Matlab'code  was  used  to  test  and  verify  this  design 
process.  Example fast algorithms were evaluated using 
this code.  A  decimation-in-time  FFT from  [Section  V, 
141 was selected for the N=64 case. All the parity weight 
choices for vector  b  as reported  in  earlier  papers  [2-81 
were  examined;  all  provided  successful  detection  for 
single computational errors, as expected. The real weight 
vectors  used  in  [6,7] lead  to  minimum  and  maximum 
gains from stages'  inputs to the parity value of 0.01 5625 
and  32.50  respectively  while  the  choice  employed  in 
[8]  produced  gains  of  0.866614  and  52.99299.  For 
comparison later with the DCT transform, a set of typical 
error patterns are presented  in Figure  5a.  The complete 
impact  of  errors  is  available  in  the  array  V, equation 
(34), from which  a few  selected cases are extracted for 
this figure. The stage and line of the input error injection 
point is indicated on each trace. The output error patterns 
are complex numbers, the products of Nth roots of unity, 
and  so their magnitudes as plotted in  the four panels of 
Figure 5a will be  I .   The locations  of the errors are the 
important  indications in  this  figure.  However,  useful 
parity  weights  that  detect  single  error  patterns  also 
must be sensitive to the phases of the patterns,  the parts 
of Figure 5a that are concealed under the magnitude plots. 
There are numerous 2-D fast discrete cosine transform 
algorithms presented in the literature with a sampling be- 
ing [ 18-23]. Their matrix factorization depends on the 2- 
D input array expressed  as a vector.  A particularly  effi- 
cient algorithm due to Feig  and Winograd  [21] was im- 
plemented for N  = 64 (8x8,2-D input data). It employed 
n=5 stages. Interestingly, none of the previously  success- 
ful parity  weight  vectors  b  for FFT  situations provided 
complete single-error coverage.  The typical  error pat- 
terns caused by single error inputs to four different stages 
are displayed in Figure 5b. The error patterns in this case 
have real values with varying magnitudes.  The variability 
of the error pattern values as contrasted with those of the 
FFT is striking. It is easy to see why the parity weighting 
values  based  upon  FFT protection  requirements should 
not be applicable.  It was determined  that complex roots 
of unity were needed to insure complete single error cov- 
erage. The weights are defined by the generic equation. 
b = ( ( e s p (  - j - k ) ) ) ;   k  = 0 , l  ,.......,(A' - 1) 
27i 
7 
(36) 
Parity weight vector for 2 - 0  DCT algorithm 
The  minimum  and  maximum  error  gains  from  any 
stage to the parity  output are 0.000269966 and 28.0408 
respecti vel y. 
42 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:19 UTC from IEEE Xplore.  Restrictions apply. 
6. Conclusions 
Error detection methods sensitive to single temporary 
failures  in  fast  unitary  transforms are  studied  by  com- 
puter algebra programs. Most fast transforms are already 
available  in these  computer packages.  Such programs 
operating  on  a  workstation  can  quickly  provide  code 
weighting  alternatives employing  simple  heuristics.  A 
number of design requirements can be balanced allowing 
several  criteria  to  be  assessed  simultaneously.  The 
computer explores the design  space under  the guidance 
of a fault tolerance designer. The impact of single errors 
on  the transform’s outputs are  immediately  visible and 
error  dynamic  ranges  can  be  measured.  Syndrome 
detection thresholds can be evaluated quickly from these 
measurements. 
References 
[I]  D. F.  Elliot and K. R. Rao, Fast Transforms Algo- 
rithms,  Analyses,  Applications. New  York:  Aca- 
demic Press, 1982. 
[2]  J. Y.  Jou  and J. A. Abraham,  ”Fault-Tolerant FFT 
Networks,” IEEE Transactions on  Computers, vol. 
37, pp. 548-561, May  1988. 
[3]  D.  L.  Tao,  C.  R.  P.  Hartmann  and  Y.  S .   Chen, 
”A  Novel  Concurrent Error Detection Scheme for 
FFr  Networks,”  Digest  of  Papers,  The  20th  In- 
ternational Symposium on Fault-Tolerant Comput- 
ing (FKS-20), Newcastle Upon Tyne, UK, pp. 1 14- 
121. June1990. 
[4]  D. L. Tao, C. R. P.  Hartmann  and  Y.  S .  Chen, ”A 
Novel Concurrent Error Detection Scheme for FFT 
Networks,” IEEE Transactions on Parallel and Dis- 
tributed  Systems,  vol.  4,  pp.  198-221,  February 
1993. 
[5]  F. Lombardiand J. C. Muzio, ”concurrent Error De- 
tection and Fault Location in an FFT Architecture,” 
IEEE Journal  of  Solid-state Circuits, vol. 27,  pp. 
728-736, May  1992. 
[6]  C. G. Oh and H. Y.  Youn, ”On Concurrent Error De- 
tection, Location and Correction of FFT Networks,” 
Digest  of  Papers,  The  Twenty-Third  International 
Symposium on  Fault-Tolerant Computing (FTCS- 
23), Toulouse, France, pp.596-605,  1993. 
[7]  C.  G.  Oh,  H.  Y.  Youn  and  V.  K.  Raj,  ”An  Effi- 
cient Algorithm-Based Concurrent Error Detection 
for FFT Networks,” IEEE Transactions on Comput- 
ers, vol. 44, pp. 11 57-1 162, September 1995. 
[8]  S .  J. Wang and N. K. Jha, ”Algorithm-Based Fault 
Tolerance for FFT Networks,”  IEEE Transactions 
on Computers, vol. 43, pp. 849-854, July  1994. 
[9]  J. L. Goldberg,  Matrix  Theory  with  Applications. 
New York: McGraw-Hill,  1991. 
[IO]  C.  Van  Loan,  Computational  Frameworks for  the 
Fast Fourier Transform. Philadelphia, Pennsylyva- 
nia:Society for Applied Mathematics,  1992. 
[Ill  R.  Tolimieri,  M.  An,  and  C.  Lu,  Algortihms  for 
Discrete Fourier Transform and Convolution. New 
York: Springer-Verlag, 1989. 
[I21  M.  C.  Pease,  ”An  Adaptation  of  the  Fast  Fourier 
Transform for Parallel Processing,” Journal  of  the 
Association for Computing Machinery, vol.  15 pp. 
252-264, April  1968. 
[ 131  M.  Drubin,  ”Kronecker  Product  Factorization  of 
the FFT Matrix,” IEEE Transactions on Computers, 
vol. C-20, pp. 590-593, May  1971. 
[I41  H. Sloate, ”Matrix Representations for Sorting and 
the Fast Fourier Transform,” IEEE Transactions on 
Circuits and  Systems,  vol. CAS-21,  pp.  109-116, 
January 1974. 
[ 151  G.  R.  Redinbo,  ”Generalized  Algorithm-Based 
Fault  Tolerance:  Error  Correction  via  Kalman 
Estimation,”  IEEE  Transactions  on  Computers, 
vol. 47, pp. 639-655, June 1998. 
[I61  B.  W.  Johnson,  Design  and  Analysis  of  Fault- 
Tolerant Digital Systems. Reading, Massachusetts: 
Addison-Wesley Publishing Company, 1989. 
[ 171 I. N. Herstein, Topics in Algebra. New York: Blais- 
dell Publishing Company, 1964. 
[ 181  K.  A.  Kamangar and  K.  R.  Rao,  ”Fast algorithms 
for  the  2-D  discrete  cosine  Transform,”  IEEE 
Transactions on Computers, vol. C-31, pp.899-906, 
September 1982. 
43 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:19 UTC from IEEE Xplore.  Restrictions apply. 
[19]  S. C .  Chan and K. L. Ho, ”A New Two-Dimensional 
Fast Cosine Transform Algorithm,” IEEE Transac- 
tions  on  Signal Processing,” vol.  39,  pp.481-485, 
February 1991. 
[20]  N. I. Cho and  S. U. Lee, ”Fast Algorithm and Im- 
plementation of  2-D Discrete Cosine Transform,” 
IEEE Transactions on Circuits and Systems, vol. 38, 
pp.297-305, March  1991. 
[21]  E. Feig and S. Winograd, ”Fast Algorithms for the 
Discrete Cosine Transform,” IEEE Transactions on 
Signal Processing, vol. 40, pp. 2174-2193, Septem- 
ber 1992. 
1221  J.  Kwak  and  J.  You, ”One- and Two-Dimensional 
Constant  Geometry Fast  Cosine Transform  Algo- 
rithms  and  Architectures,” IEEE  Transactions  on 
Signal Processing, vol. 47, pp.2023-907, July 1999. 
[23]  S. D.  Kim,  S. K.  Jang,  M.  J.  Kim  and  J.  B.  Ra, 
”Efficient Block-Based Coding of Noise Images by 
Combining Pre-Filtering and DCT,” Proceedings of 
the 1999 IEEE International Symposium on Circuits 
and Systems VLSI, pp.  37-40, Orlando, FL., May 
1999. 
[24]  N. K. Bose, Digital Filters Theory and Application. 
New York: North Holland, 1985. 
44 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:19 UTC from IEEE Xplore.  Restrictions apply. 
Figures 
T=AnA{".l) 
......... AZAl 
Figure 1 : Fast Transform via Matrix Factorization 
lnpvt Parity 
P. 
O"lp"1  Parity 
P 
T 
Fast 
Algorilhm 
Figure 2: Protection  of Fast Unitary Transform  Implementations 
Fault Effect 
Error 
Figure 3: Modeling Fault Produced Errors 
45 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:19 UTC from IEEE Xplore.  Restrictions apply. 
Start 
Transfrom 
Factorization 
lak)= 4 4  ... A, 
Form Error 
I  W.' 
Compute 
PseudoInverse 
Wighting 
y ' = b' A'' 
t 
I
.
I 
Pies 
'c'"' 
Reasonable 
Design 
Figure 4: Code Design Methodology 
1, 
. 
. 
- -11 
0 
20 
40 
60 
I 
110 
Output Index 
Fm  Output Error 
Patterns 
Figure Sa 
Output Index 
Fast DCT Output 
Error Patterns 
Figure 5b 
Output Error Patterns for FFT and Fast DCT Algorithms 
Figure 5 
Figure 5: Output Error Patterns for FFT and Fast DCT Algorithms 
46 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:19 UTC from IEEE Xplore.  Restrictions apply.