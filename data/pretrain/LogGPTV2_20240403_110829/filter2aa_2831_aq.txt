### Adding the UnAdvise Method

Let's examine the `UnAdvise()` method. This method is designed to close the connection that was established by a previous call to `Advise()`.

```cpp
// Remove the callback object
STDMETHODIMP CSimpleCallback::UnAdvise(long lCookie)
{
    // Verify the cookie to ensure it matches the correct client
    if (lCookie != m_lCookie) return E_NOINTERFACE;

    // Release the client's interface
    m_ICallBack->Release();
    m_ICallBack = NULL;

    return S_OK;
}
```

In this method, we first check the `lCookie` to ensure that the request is coming from the correct client. If the `lCookie` does not match, we return a generic COM error, `E_NOINTERFACE`. If the `lCookie` is valid, we release the interface pointer to the client's callback object and set it to `NULL`. This ensures that there are no outstanding references to the client, allowing it to shut down cleanly.

### Calling the Client from the Server

Now, let's delve into the core of our callback interface: the actual callback function. The `Now()` method on the server side calls a method on the client (sink) interface. Since we already have the pointer to the client's interface, this method behaves like any other COM interface method.

```cpp
// Callback the client immediately
STDMETHODIMP CSimpleCallback::Now(long lCode)
{
    HRESULT hr = E_FAIL;
    if (m_ICallBack != NULL)
    {
        // Call the method synchronously
        hr = m_ICallBack->Awake(lCode);
    }
    return hr;
}
```

This example demonstrates a simple use of the callback interface. Typically, the server (source) object would invoke the callback with an important notification for the client. The `Awake()` method is called synchronously, meaning the server will wait for the client to complete its processing before continuing. This can lead to a situation where the client is waiting for itself, which is not ideal for our original goal of avoiding blocking the server. We will address this with a more advanced threading solution using the `Later()` method later.

### Building the Server and Proxy/Stub DLL

Before proceeding, ensure you build the server and the Proxy/Stub DLL. You can use the `BuildMe.bat` file to automate this task. The MIDL code will not change, but the test client requires the MIDL-generated headers.

### The Client Application

For the client application, we will take a slightly different approach. Instead of using ATL wizards, we will manually write the ATL code. The client is a standard MFC dialog-based application, which we will modify to implement a COM object.

#### Steps to Create the Client Dialog Application

1. **Create an MFC Dialog-Based Application**: Name it `CallbackClient`.
2. **Modify the Main Program**: Support the `ICallBack` interface. Define the `ICallBack` object from the MIDL code of the `CallbackServer`.
3. **Add Buttons**: Add buttons with IDs `IDD_BUTTON1` and `IDD_BUTTON2` for "Now" and "Later" respectively.

#### Adding the Callback COM Object

Next, we need to modify the `CallbackClient` application to support the `ICallBack` interface. We will add a COM object to the application manually.

```cpp
#include <atlbase.h>  // Include ATL base

CComModule _Module;   // Define main COM module

// Callback interface to be implemented on the client
class CCallBack :
    public ICallBack,           // Use this interface (server.idl)
    public CComObjectRoot       // Use ATL
{
public:
    CCallBack() {}              // Default constructor

    // Define COM object map
    BEGIN_COM_MAP(CCallBack)
        COM_INTERFACE_ENTRY(ICallBack)
    END_COM_MAP()

    // Icallback
public:
    // The callback method
    STDMETHOD(Awake)(long lVal);
};

// Create object map for callback interfaces
BEGIN_OBJECT_MAP(ObjectMap)
END_OBJECT_MAP()
```

We include the necessary ATL headers and define the `CCallBack` class, which inherits from `ICallBack` and `CComObjectRoot`. The `COM_MAP` macro sets up the interface map, and the `ObjectMap` maintains an array of ATL objects.

#### Implementing the Callback Method

The `Awake` method in the `CCallBack` class is straightforward. It simply displays a message box.

```cpp
STDMETHODIMP CCallBack::Awake(long lVal)
{
    CString msg;
    msg.Format("Message %d Received", lVal);
    AfxMessageBox(msg);
    return S_OK;
}
```

In a real-world scenario, this method might perform more complex tasks, such as notifying the client of a server event.

#### Connecting to the Server

We initialize COM and connect to the server in the `InitInstance` method of the `CCallbackClientApp` class.

```cpp
BOOL CCallbackClientApp::InitInstance()
{
    AfxEnableControlContainer();
    InitCOM();
    // Other initialization code
}

BOOL CCallbackClientApp::InitCOM()
{
    HRESULT hr;
    CoInitialize(0); // Initialize COM

    // Initialize the main ATL object
    _Module.Init(ObjectMap, 0);

    // Create a server object
    m_pSimple = NULL;
    hr = CoCreateInstance(CLSID_SimpleCallback, 0, CLSCTX_SERVER, IID_ISimpleCallback, (void**)&m_pSimple);
    if (SUCCEEDED(hr))
    {
        // Create a callback object
        CComObject<CCallBack>* pCallBack = NULL;
        CComObject<CCallBack>::CreateInstance(&pCallBack);
        pCallBack->AddRef();

        // Set up the callback connection
        hr = m_pSimple->Advise(pCallBack, &m_lCookie);

        // Done with our ref count. Server did an AddRef
        pCallBack->Release();
    }
    return SUCCEEDED(hr);
}
```

We initialize COM, create the server object, and set up the callback connection. The `Advise` method registers the client's callback interface with the server.

#### Cleaning Up

When the user closes the application, we need to clean up the server connection and unadvise the callback. This is done in the `ExitInstance` method.

```cpp
int CCallbackClientApp::ExitInstance()
{
    if (m_pSimple != NULL)
    {
        // Remove serverâ€™s callback connection
        m_pSimple->UnAdvise(m_lCookie);

        // Release the server object
        m_pSimple->Release();
    }

    // Shut down the COM apartment
    CoUninitialize();
    return 0;
}
```

### Adding the OnButton Code

Finally, we add the button methods to the dialog class to test the callback.

```cpp
void CCallbackClientDlg::OnButton1()
{
    HRESULT hr;
    CCallbackClientApp* pApp = (CCallbackClientApp*)AfxGetApp();
    hr = pApp->m_pSimple->Now(1);
    if (!SUCCEEDED(hr)) AfxMessageBox("Call Failed");
}

void CCallbackClientDlg::OnButton2()
{
    HRESULT hr;
    CCallbackClientApp* pApp = (CCallbackClientApp*)AfxGetApp();
    hr = pApp->m_pSimple->Later(5);
    if (!SUCCEEDED(hr)) AfxMessageBox("Call Failed");
}
```

These methods call the `Now` and `Later` methods on the server, providing a simple test platform for the callback interface.

### Summary

This example covers the interaction between a client and server using a callback interface. By following the steps and implementing the methods, you can create a functional callback mechanism. Build the client and press the "Now" button to see the callback in action.