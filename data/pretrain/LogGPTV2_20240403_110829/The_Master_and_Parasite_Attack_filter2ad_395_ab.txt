(cid:8)
×
×
(cid:8)
(cid:8)
(cid:8)
(cid:8)
TABLE I
Size
320MiB†
320MiB†
330MB
256MB
320MiB†
Remarks
†from Chromium
*incognito mode
DOS on memory
performance impact
EVALUATION OF CACHE EVICTION ON POPULAR BROWSERS. ‘EV.’ IS EVICTION,
‘I.D.’ IS INTER-DOMAIN, AND ‘SIZE’ REPRESENTS DEFAULT CACHE SIZE.
based browsers and Firefox is performed easily and efﬁciently.
It has been observed,
that Firefox, while evicting cache,
may experience reduced responsiveness due to overloaded
memory and disk cache. Internet Explorer behaves differently:
it appears to allocate more and more space to the memory
until the operating system shuts down processes due to low
free memory.
V. INJECTION OF PARASITES INTO TCP CONNECTION
Injection of scripts can be done with an off-path attacker that
is not located on the same network as the victim, e.g., via DNS
cache poisoning or BGP preﬁx hijacking [5, 4], or via injection
of TCP segments by inferring the ACK number and sequence
number (SN) [9]. However, since the focus of our work is
on evaluating the attacks that such scripts can launch against
different applications when running on popular browsers, we
perform the injection of script in an eavesdropping attacker
mode into the browsers. We assume that our eavesdropping
attacker is located on the same wireless network as the victim,
e.g., on a public WiFi network.
OS
Win10
MacOS
Linux
Android
iOS
Chrome
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
IE
(cid:8)
Firefox
(cid:8)
n/a
(cid:8)
n/a
(cid:8)
n/a
(cid:8)
n/a
(cid:8)
TABLE II
Edge
(cid:8)
n/a
n/a
n/a
n/a
Safari
(cid:8)
(cid:8)
(cid:8)
n/a
n/a
Opera
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
TCP INJECTION EVALUATION. NO SUPPORT BY AN OS MARKED ’N/A’.
1https://www.w3schools.com/browsers/
Setup. The master monitors the communication on the
network, waiting for an HTTP request to one of the objects he
has prepared in advance, and injects a TCP segment containing
the malicious response once such HTTP request is detected.
To ensure that the TCP segment is accepted and correctly
reassembled, the master must set the correct TCP destination
port, TCP sequence number (SN) and offsets - these ﬁelds he
can adjust from the HTTP request packets that the victim client
sends. We implemented and evaluated injection of TCP seg-
ments in communication of popular browsers, and conﬁrmed
the attack to be effective, independent of the browser and
OS; the results are listed in Table II. The messages exchange
diagram for injecting a TCP segment is illustrated in Figure
2.
Victim
Attacker
GET somesite.com/my.js
Server
1
3
5
5
5
tcp injection
2
ignored benign response
GET somesite.com/my.js?t=500198
unmodified somesite.com/my.js
4
GET top1.com/persistent.js
GET top2.com/jquery.js
GET top3.com/important.js
...
...
Fig. 2. Cache infection attack. The blue packets indicate responses from the
genuine webserver, red packets are those injected by the attacker.
Attack. In step 1 the victim sends a request for my.js
ﬁle. The attacker sends a response containing a malicious
script (a parasite) in step 2 . The parasite contains the same
name as the original script that was requested by the client.
The functionality of the webpage may be modiﬁed since the
authentic script was not loaded - this may be detected by the
victim. To avoid detection, the parasite (i.e., the newly infected
script) issues a request to the website to load the original script
using a different URL (the with an ignored request parameter),
steps 3 and 4 . This request satisﬁes the Same Origin
Policy (SOP) limitation and is allowed by the browsers. The
parasite subsequently initiates propagation to other webpages
and issues requests to popular webpages, in steps 5 and
on, which in turn get infected by the attacker as in step 1 .
This results in multiple parasites, each corresponding to an
infected script from one popular webpage. This guarantees
availability of this puppet - namely, every time any of these
popular websites are accessed, the parasite (corresponding to
the requested website) is invoked.
Discussion. One of the main countermeasures against TCP
injection attacks is to employ encryption. Although this fact
has been known for a long period of time, our measurement
study found that 21% of the 100,000-top Alexa websites do not
use HTTPs and almost 7% of the websites use vulnerable SSL
versions (SSL2.0 and SSL3.0). Furthermore, even websites
supporting SSL/TLS for communication may be compromised.
Recent works demonstrated that off-path attackers can trick
Certiﬁcate Authorities (CAs) into issuing fraudulent certiﬁ-
cates, [4, 5]. If our attacker uses a fraudulent certiﬁcate
for some target domain it can similarly inject spoofed TCP
segments into communication with that domain.
Often even simpler attacks sufﬁce. We evaluated the 15K-
top Alexa domains and found that from the 13 419 HTTP(S)
responders 67.92% did not provide HSTS headers at all, and
only 545 were contained in Chrome’s HSTS preload list,
leaving up to 96.59% of the domains vulnerable to SSL
stripping attacks.
VI. THE PARASITE DESIGN AND IMPLEMENTATION
In this section we show how to select scripts that should be
infected with parasites, how to ensure they stay persistently
in victim browser cache, how to develop methodologies to
allow parasites to propagate between different devices and
domains and how to develop a Command and Control channel
to communicate between the parasites and the attacker.
A. Infecting Objects with Parasites
The attacker’s goal is to select a script from some legitimate
domain and to infect it with a parasite. The objects on websites
can be changed, renamed or even removed. In that case, the
control over the parasite-script instance is lost since it will
never be invoked and will eventually be removed from the
cache. The goal of the attacker is therefore to select such a
script that will ensure long term control over the parasite in
the browser of the victim client. We achieve this using two key
observations: we select objects which do not change often and
in those objects we set the headers so that the cache keeps the
injected script for the longest possible time duration.
Selecting persistent scripts. Which script should we infect
in order to guarantee persistency? Ideally the attacker would
search for scripts that do not change often and whose names
are stable over long time periods. To identify such scripts we
Fig. 3. Persistency measurement over 100 days.
develop a web crawler to collect statistics over 15K-top Alexa
pages. For all objects on these pages, we collect hashes over
the ﬁles and names, and store them. The web crawler ran daily
over a period of 100 days. At the completion, we perform
an analysis over the collected data, the results are plotted in
Figure 3. For instance, in Figure 3 for a window of ﬁve days
about 87.5% of the websites use at least one persistent object
(excluding inline scripts), namely, object that is not renamed
over a period of ﬁve days. After approximately 100 days,
75.3% websites are using at least one persistent JavaScript
ﬁle, which has not been renamed.
These scripts are perfect targets to be infected with parasites
for our persistent botnet, as they are accessed frequently due
to the popularity of the websites from which they are served.
Figure 3 also shows that JavaScript ﬁles might change in
content, while not necessarily in name. If the name was
changed within the website, it is not usable for our attack
anymore as browsers’ caches use names of ﬁles as keys
and hence, we focus on the name based persistency factor.
Using these statistics we are able to select ﬁles which remain
persistent over time. We use these ﬁles as the potential targets
for camouﬂaging our parasites.
Setting parasite caching headers. In the JavaScript of the
parasite the caching related headers are set to ensure that the
browser of the victim keeps the modiﬁed copy of the object
as long as possible in the cache; the cache duration is set by
HTTP headers like the Cache-Control header.
Infecting scripts with parasites. When identifying a re-
quest for a persistent object in one of the domains of interest
the attacker injects a TCP segment containing the original
objects attaching the parasite script to the end.
The attacker loads the original object
that would nor-
mally be included in the target page. Then the para-
site object
is created by expanding the original ﬁle. ”;
PARASITE CODE;” is appended to the end of the cor-
responding original JavaScript ﬁle. For HTML ﬁles, a
”” tag is inserted before
the closing ”” tag. However, inserting it in the HTML
ﬁle is optional so as not to violate any Content Security Policy.
The variables and function identiﬁers in the parasite code
have been chosen so that there is no conﬂict with the target
applications.
Afterwards, every time a client makes a request to the server
checking for “freshness” of the infected object, the request is
manipulated to ensure that infected object is refreshed.
is requested by the website our parasite script
Requesting the infected objects. Every time the infected
is
object
invoked instead of the original script. The client’s request is
manipulated. Headers are set which signal to the server that
the client has not cached any data. This prevents the server
from responding with a 304 status code. The manipulated
request is forwarded to the server. The server’s response is
also manipulated. If the response is an HTML or JavaScript
ﬁle, the malware is injected. The original function is preserved
by attaching it to the end. We also perform validity checks on
the server. The cache headers are adapted, so that the data gets
in the cache of the client and remains there for as long as pos-
sible. In addition, security headers are removed. This makes
it possible to cross-infect other domains. The client caches
the parasite and it is executed every time the corresponding
resource is loaded. Furthermore all HTTP caches between
attacker and victim will be poisoned with the manipulated
JavaScript ﬁles.
B. Propagation
We developed two methods of propagation for the parasites:
the parasites can propagate to other domains on the same
victim device and the parasites can propagate to other devices.
1) Propagation between domains: After infecting an object
from one domain,
the parasite can propagate to infecting
objects from other domains on the same victim browser. In
020406080100Measurements70.072.575.077.580.082.585.087.5PercentageAny.jsPersistent(hash)Persistent(name)this section we provide two methods of propagation between
domains that we evaluated.
Propagation on the same device via shared ﬁles. For
instance Google Analytics which our measurement found to
be used by 63% of the 1M-top Alexa domains [6]. Infecting
this JavaScript ﬁle in the browser cache therefore leads to the
parasite being executed on a large number of domains.
Propagation via iframes. For propagation via iframes, the
parasite loads the target domains via iframes into the DOM.
The browser then loads all the resources associated with these
domains.These objects are infected with parasites. This is
only possible because all corresponding security headers (more
about this in Section VIII) are disabled. This cross-infection
is demonstrated in the demo video2. In this video we show,
how the visit of a well known and popular site on an insecure
Network can lead to the infection of other sites like online
banking and web mail, that are not even accessed and used
during the active attack.
2) Propagation between devices: We experimentally mea-
sure how the parasites can propagate between caches of dif-
ferent popular devices. Propagation between devices is made
possible by shared network caches but can also be done due
to vulnerabilities in web services (e.g., via XSS attacks). The
principle is to attack victims behind shared caches: when a
victim receives an infected object from the server, all the
caching proxies on the way cache that manipulated object.
After that all other victims using these proxies receive the
malicious cached object.
Browser
Chrome
Firefox
Edge
Opera
IE
Ctrl+F5
×
×
×
×
n/a
clear cache
×
×
×
×
n/a
TABLE III
clear cookies