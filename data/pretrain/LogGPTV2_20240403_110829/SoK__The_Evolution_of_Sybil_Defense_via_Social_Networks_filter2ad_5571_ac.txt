al. prove [46] that as long as the number of attack edges
is bound by o( n
log n ), then this approach can effectively
distinguish between honest and sybil nodes.
386
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:41 UTC from IEEE Xplore.  Restrictions apply. 
Graph
DBLP
... preprocessed
Epinions
... preprocessed
Facebook
... preprocessed
Wiki−Talk
... preprocessed
Nodes
718115
191172
26588
5624
63392
40757
92117
13069
Edges
2786906
1438509
100120
57341
816886
632597
360767
133343
Diameter
90% Diameter
Clustering Coeff
Est. Conductance
20
15
16
7
12
7
9
5
7.43
5.97
5.98
3.89
5.15
4.43
4.63
3.78
Table III
0.73
0.60
0.23
0.18
0.25
0.23
0.13
0.06
0.016
0.020
0.020
0.040
0.020
0.023
0.047
0.333
STATISTICAL PROPERTIES OF THE GRAPHS BEFORE AND AFTER PREPROCESSING. PREPROCESSING DRASTICALLY REDUCES THE GRAPHS’ SIZE AND
SIGNIFICANTLY ALTERS THEIR STRUCTURAL PROPERTIES.
Original Graph
 Preprocessed Graph
  1
  0.8
  0.6
  0.4
  0.2
n
o
i
s
i
c
e
r
P
DBLP
Epinions
  0
Figure 2.
The precision of SybilLimit when recall is 95% on each of
the social networks we consider when p = 0.01. Other SybilLimit−like
protocols show qualitatively similar results.
Wiki−Talk
Facebook
B. Cracks in the foundations
There are then two fundamental assumptions that underly
this elegant approach towards decentralized universal sybil
defense. The ﬁrst is that the cut between the sybil and
honest region—the set of attack edges— is suitably sparse.
The second is that the mixing time of the honest region
is O(log(n)). The combination of these two assumptions
ensures that random walks of Θ(log n) steps will end in a
random edge in the honest region with high probability.
Recent literature has cast doubts on whether these assump−
tions hold in practice. Social graphs do not seem to be fast
mixing after all [17], [23], and the probability with which
fake identities are accepted as friends is much higher than
anticipated [6], [43], implying that the set of attack edges
is not as sparse as assumed. We then ask: to what degree
are SybilLimit−like protocols sensitive to their assumptions
about sparse cuts and mixing time?
To answer this question, using SybilLimit [46] as repre−
sentative (we ﬁnd that the behavior of other SybilLimit−like
protocols is similar), we produce, as in [39], a ranking of
nodes with respect to a given veriﬁer node u, in decreasing
order of trust: the ﬁrst node in the ranking is the node that
u trusts the most. We then measure the defensive efﬁcacy
of SybilLimit by using two metrics well known in the ﬁeld
of information retrieval: precision and recall. In particular,
we deﬁne the precision at position k as the fraction of
3The discussion in this section is informal for the sake of clarity.
387
 1.2
 1
 0.8
 0.6
 0.4
 0.2
0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09
i
i
n
o
s
c
e
r
P
 0
 0
 0.2
 0.4
 0.6
Recall
 0.8
 1
 1.2
Figure 3.
for p (ranging from 0.01 to 0.10). The number of attack edges is pm.
Precision vs Recall of SybilLimit and the Facebook network
honest nodes among the k nodes that the protocol ranks
the highest. Similarly, we deﬁne the recall at position k as
the ratio between the number of honest nodes among the top
k positions in the ranking and the total number of honest
nodes in the network.
SybilLimit−like protocols do not operate on raw social
networks: they are to be used only on networks that have
been preprocessed by iteratively removing all nodes with
degree lower than ﬁve [46]. Table III shows the statistical
properties of the graphs we use in our experiments.
Sensitivity to sparse cuts. Figure 3 plots SybilLimit’s pre−
cision versus recall for the preprocessed Facebook data set.
SybilLimit proves very effective when the number of attack
edges is within the theoretical bound (which corresponds
to p = 0.01). Once the bound is exceeded, however, the
performance of SybilLimit decays rather quickly.
Sensitivity to mixing time. Mohaisen et al. [23] are the ﬁrst
to observe that this step, while boosting the mixing time
of social graphs to the level required by SybilLimit to be
effective, can also reduce the size of the graph. Table III
conﬁrms this observation:
the
preprocessing step removes over 85% of the nodes. Removed
nodes are effectively considered sybils by the protocol, and
while those nodes may still be able in some circumstances to
enlist other nodes in the network as proxies [45], it is unclear
in the case of Wiki−Talk,
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:41 UTC from IEEE Xplore.  Restrictions apply. 
in general how removed nodes can safely take advantage of
honest nodes’ resources and vice versa [23].
C. Discussion
The goal of universal decentralized sybil defense with
strong theoretical guarantees, which has driven early re−
search on sybil defense via social networks, rests on assump−
tions (short mixing time and cut sparseness) whose validity
is at best dubious. What to do? In a recent survey [44], Yu
suggests a couple of ways forward: one could offer sybil
defense only to the nodes in the core of the social graph, in
effect institutionalizing the removal of nodes that are not as
well connected; or one could simply renounce the elegant
theoretical worst−case claims of the current framework and
rely instead on “weaker but less clean assumptions” [44].
In the next section, we explore a third alternative that offers
every honest node a useful degree of sybil protection without
compromising on elegance and rigor.
IV. COMMUNITIES
The theoretical guarantees offered by the protocols dis−
cussed so far hold only as long as honest nodes are closely
connected to one another everywhere in the social graph and
the cut between honest and sybil nodes is sparse. Empirical
evidence suggests a different reality: social graphs consist
of communities, each a tightly knit sub−network [17], [23].
Indeed, it is quite conceivable that the cut between two
tightly−knit communities of honest nodes A and B be as
sparse as the cut between A and the sybil region: to an
honest node in A using a protocol in the style of SybilLimit,
a sybil node would then be indistinguishable from an honest
node in B [38], [39].
While these considerations argue against universal sybil
defense, they suggest an alternative goal: to provide each
honest node u with the ability to white−list a trustworthy
set of nodes—namely those in the community to which u
belongs. This new goal can be more precisely stated as
follows:
Problem 1. Let u be an honest user and S a subset of the
honest region such that: (a) u ∈ S, (b) S has mixing time τ
Figure 4. Two edge attack.
388
(cid:7)
(cid:8)
|S|
τ
edges between S and the
and (c) there are at most o
rest of the social graph. We want an algorithm capable of
distinguishing almost perfectly between the nodes in S and
the nodes outside of S.
We make two observations. First, the problem of universal
sybil defense is a special case of Problem 1 in which τ =
O(log n) and S is the entire honest network. Second, sybil
defense appears, informally, to reduce to the task of detecting
the “community” S.
The fundamental afﬁnity between community detection
and sybil defense has been ﬁrst observed by Viswanath et
al [39]. After pointing out that, from the perspective on an
honest node, SybilLimit−like protocols separate the social
graph in two communities—honest nodes and sybils—they
go on to ask a natural follow−up question: can off−the−shelf
community detection algorithms be used to detect sybils?
Their answer is mixed: on the one hand, they show that
a generic community detection algorithm due to Mislove
[21] (also a co−author in [39]) achieves results comparable
to those of SybilLimit−like protocols on both a synthetic
topology and a real−life Facebook social graph; on the other,
they observe that attackers wise to the community substruc−
ture of the honest portion of the social graph can manage,
as we discussed above, to make the sybil region appear
indistinguishable from a sub−network of honest nodes.
We believe that a ﬁrst step towards a more conclusive
answer is to recognize that casting the problem simply in
terms of generic community detection leaves it underspeci−
ﬁed. While intuitively compelling, the notion of community
is ambiguous, as the many community detection algorithms
found in the literature, each aiming for a subtly different
notion of community, clearly indicate [12]. But what should
be the basis for the notion of community to be used in sybil
defense?
A. The minimum conductance cut
A somewhat obvious candidate to serve in this role is
conductance. Conductance is hard to tamper with (see Sec−
tion II) and it is intimately related to mixing time, a critical
property to leverage against sybil attacks (see Section III).
It is tempting to deﬁne the problem of sybil defense in
terms of the minimum conductance cut problem found in the
community detection literature:
Problem 2. Find a set S whose conductance ϕ(S) is as
close as possible to ϕ(G), the minimum conductance of the
graph.
If we believe that the honest region is fast mixing and
that it is connected to the sybil region via a sparse cut, the
set S should be very close to capturing the entire honest
region. This view is of course too simplistic and can lead to
community detection algorithms that can be circumvented
by an adversary using far fewer attack edges than needed
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:41 UTC from IEEE Xplore.  Restrictions apply. 
to dupe SybilLimit−like protocols. Mislove’s algorithm [21]
serves, in this sense, as a cautionary tale.
Mislove’s algorithm is a heuristic algorithm that ﬁnds
small conductance cuts—which is, in essence, analogous to
ﬁnding an approximate solution to Problem 2. The set S is
built greedily. Starting from a vertex u, the algorithm grows
S by incorporating the vertex v connected to S that results
in a set S ∪ {v} with minimal conductance.4
Although this simple heuristic appears to capture the
intuition behind Problem 2, it fails against the following
simple attack. Let v be an honest node, that has no neighbor
of degree at most 3. We create the sybil region with nodes
s0, s1, . . . , sn as follows:
• s0 and s1 are connected to v.
• For every i ≤ n − 2, si is connected with the next two
sybil nodes in the sequence si+1, si+2, and also with
the previous two, si−1, si−2.
Figure 4 illustrates the attack, involving only the two attack
edges connecting v to s0 and s1, that results in Mislove’s
algorithm deterministically admitting every node of the sybil
region5 (see [2] for a full proof).
B. Discussion
Reframing sybil defense to leverage the community sub−
structure that exists in social graphs requires a deep un−
derstanding of the relationship between sybil defense and
conductance—in essence, understanding when a solution to
Problem 2 is also a solution to Problem 1. The key to the
approach we explore in subsequent sections relies, at a local
scale, on a technique central to the efforts towards universal
sybil defense discussed in Section III: random walks.
V. FAST MIXING COMMUNITIES
Because of its tight connection with the theory of random
walks, the minimum conductance cut problem that we have
used to formalize the intuitive relationship between sybil
defense and community detection has been studied in depth.
Problem 2, as we have called it, is NP−hard, so the best
that can be hoped for is an approximate solution. Several
sophisticated algorithms offer non trivial guarantees on the
quality of their approximation to the problem [4], [14], [31],
but they have two serious drawbacks when it comes to large
social graphs: they are not obviously parallelizable and their
running time is polynomial in the size of the entire graph. We
then consider a different style of techniques that offer less
stringent guarantees on the approximations they produce but
whose time complexity depends only on the size of the set S
we are trying to identify, which we expect to be signiﬁcantly
smaller than the size of the entire social graph.
4The original proposal for Mislove’s algorithm [21] relies on a normal−
ized conductance metric, but in the context of sybil defense the protocol
is evaluated using just conductance [39]. For consistency, we follow the
approach of the second paper.
5Furthermore this attack can be modiﬁed to withstand also the prepro−
cessing deﬁned in section III−B