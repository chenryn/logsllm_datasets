    NPROC(CosObj, CosNewBoolean, (CosDoc dP, ASBool indirect, ASBool value))
    NPROC(CosObj, CosNewName, (CosDoc dP, ASBool indirect, ASAtom name))
    NPROC(CosObj, CosNewString, (CosDoc dP, ASBool indirect, const char *str, ASTArraySize nBytes))
    NPROC(CosObj, CosNewArray, (CosDoc dP, ASBool indirect, ASTArraySize nElements))
    ---------未 完
**1.3.2 PDSRead HFT**
这里之所以列出PDSRead HFT是因为它代表了一种情况——实际的实现中回调函数个数比Acrobat SDK中头文件里的回调函数个数多。
仍然根据之前打印出的所有HFT结果（上图没有显示完）可以发现获取PDSRead HFT的回调函数是0x64f3cf70,在IDA中查看如下所示。
    ------------------------------------    
    08899e18  00001060 64f3cf70
    0888c7d8  "PDSRead"
    ------------------------------------
跟进sub_64F3D0C2，如下所示。
    int sub_64F3D0C2()
    {
      int v0; // ebp@0
      _DWORD *v1; // esi@1
      int v2; // ST40_4@2
      int v4; // [sp+8h] [bp-10h]@2
      int v5; // [sp+Ch] [bp-Ch]@2
      int v6; // [sp+10h] [bp-8h]@2
      int v7; // [sp+14h] [bp-4h]@2
      v1 = TlsGetValue(dword_665BAF2C);
      if ( !v1[532] )
      {
        v4 = 16;
        v2 = v1[533];
        v5 = 53;
        v6 = 851968;
        v7 = 0;
        v1[532] = sub_64EC7CC0(v0);
      }
      sub_64F3D3FD(1, sub_64FC8F90, 0);
      sub_64F3D3FD(2, sub_64FC9120, 0);
      sub_64F3D3FD(3, sub_64FC9480, 0);
      sub_64F3D3FD(4, sub_64FE89D0, 0);
      sub_64F3D3FD(5, sub_654BD830, 0);
      sub_64F3D3FD(6, sub_654BD890, 0);
      --------------------------------    
      sub_64F3D3FD(52, sub_654BE790, 0);
      return sub_64F3D3FD(53, sub_654BF1F0, 0);
    }
可以发现PDSRead的HFT中应该有53个回调函数，但是查看Acrobat
SDK中的头文件PDSReadProcs.h，发现只有50个回调函数，如下所示。
    NPROC (ASBool,  PDDocGetStructTreeRoot,     (IN  PDDoc pdDoc,
    NPROC (ASInt32, PDSTreeRootGetNumKids,      (IN  PDSTreeRoot treeRoot))
    NPROC (void,    PDSTreeRootGetKid,          (IN  PDSTreeRoot treeRoot,
    NPROC (ASBool,  PDSTreeRootGetRoleMap,      (IN  PDSTreeRoot treeRoot,
    NPROC (ASBool,  PDSTreeRootGetClassMap,     (IN  PDSTreeRoot treeRoot,
    -------------------------------------
这种情况下按照顺序前面的50个回调函数是一一对应的。
**1.3.3 Forms HFT**
这里之所以列出Forms HFT是因为它也是另一种情况——它的HFT的回调函数不是一个个插入的，而是直接静态拷贝的。
根据之前打印的结果可以知道获取Forms HFT的回调函数是0x64f46f90，IDA中查看如下图所示。
    ------------------------------------    
    0889f408  006310aa 64f46f90
    088d0cb0  "Forms"
    ------------------------------------
可以发现这次的实现和之前获取core HFT、Cos HFT的实现不一样了，这种就是直接静态拷贝得到一个HFT的。
跟进off_665D8E78,发现是一个函数地址表。
    .data:665D8E78 off_665D8E78    dd offset sub_65785D30  ; DATA XREF: sub_64F46F90+8o
    .data:665D8E7C                 dd offset sub_6577D150
    .data:665D8E80                 dd offset sub_6577CF80
    .data:665D8E84                 dd offset sub_6577D090
    .data:665D8F44                 dd offset sub_6577D4A0
    -----------------------------------------------------    
    .data:665D8F48                 dd offset sub_6577C9D0
    .data:665D8F4C                 align 10h
    .data:665D8F50 off_665D8F50    dd offset sub_6577CB10  ; DATA XREF: sub_64F46FF0+8o
再计算一下0xd4/4，结果是53，也就是说这个表里总共有53个回调函数，占用的字节数是0xd4。
再在Acrobat
SDK的头文件FormsHFTProcs.h，去除注释后内容如下，刚好53个函数声明，正好和上面的函数地址表一一对应（懒，没有在IDA中实际重命名函数）。
    PIPROC(ASBool, IsPDDocAcroForm, (PDDoc doc), doc)
    PIPROC(void, AFPDDocLoadPDFields, (PDDoc doc), doc)
    PIPROC(void, AFPDDocEnumPDFields, (PDDoc doc, ASBool terminals, ASBool parameterIgnored, AFPDFieldEnumProc proc, void *clientData),doc, terminals, parameterIgnored, proc, clientData)
    -------------------------------------------------
**1.3.4 EScript HFT**
EScript HFT并没有包含在Acrobat SDK中，也就是无法重命名回调函数。
这里之所以介绍它是因为他代表了一类特殊的情况——某些HFT表可能既在AcroRd32.dll中存在，又在Plugin中存在，会发生冲突。
这里我在加载完EScript.api后再次打印所有的HFT表，部分结果如下所示。
    ------------------------------------    
    0889f890  000010b5 64edc6b0
    088d0f00  "ESHFT"
    ------------------------------------    
    0889f7a0  000010b6 64edcdc0
    088d0ed0  "WebLink"
    ------------------------------------    
    0889f9a8  000010b7 64f47240
    088ead10  "WebLinkPriv"
    ------------------------------------    
    0889fbd8  000010be 6515b270
    088cf710  "EFSInfo"
    0889fde0  000010c1 64f82950
    088cf920  "Updater"
    ------------------------------------    
    0889fd68  000010c2 64f51680
    088eaff8  "PrivPubSecHFT"
    ------------------------------------    
    08d7ae98  04f911e7 64b921a0
    0888beb8  "$ESHFT"
可以看到，在上面的结果中，第一个是ESHFT表，最后一个是$ESHFT表，这种情况的出现是因为ESHFT表是在Arcobat主程序（也就是AcroRd32.dll中的），而$ESHFT表则是在Plugin
EScript.api中的。
跟进获取ESHFT表的回调函数0x64edc6b0（属于AcroRd32.dll）和$ESHFT表的回调函数0x64b921a0（属于EScript.api），对比效果如下图所示。
**1.3.5 Search HFT**
这里之所以介绍Search HFT，是因为它代表了另一种情况——一个Plugin可能不会被加载。
如果一个Plugin没有被加载，它的HFT表怎么获取呢？
1) 首先在Plugin的导出函数PluginMain中得到PISetupSDK函数。
2) 然后再PISetupSDK函数中得到handShake函数。
3) 在handShake中，找到导出HFT的代码。
4）导出HFT的代码不同插件实现可能不同，关键就是在汇编层面找”push
函数地址”这样的形式，针对这样形式的push指令，每一个函数地址都跟进去看一下，经验足够的话是很容易判断出最终的HFT表的。
接下来用Search Plugin和EScript Plugin来实际演示一下过程。
先看EScript Plugin对应的HFT的静态查找过程。
再来看看Search Plugin对应的HFT表的静态查找过程（图在下一页）。
### 1.4 结束语
在Acrobat SDK的文档中，提到了Acrobat core API的概念。
Acrobat core API的架构如下。
可以看出，所谓的Acrobat core API就是上一节提到的HFT概念。上图架构中的各个组件在Acrobat SDK中对应的头文件如下表所示。
Acrobat Viewer —————— Acrobat SDK中以AV为前缀的文件，HFT在AVProcs.h中声明
Acrobat Support —————— Acrobat SDK中以AS为前缀的文件，HFT在ASProcs.h中声明
COS —————— Acrobat SDK中以Cos为前缀的文件，HFT在CosProcs.h中声明
PDSEdit —————— Acrobat SDK中以PDS为前缀的文件，HFT在PDSReadProcs.h和PDSWriteProcs.h中声明
Portable Document —————— Acrobat SDK中以PD为前缀的文件，HFT在PDProcs.h中声明
到这里，动态查找各个HFT和静态查找各个Plugin的HFT都已经介绍完毕，通过找到的HFT以及Acrobat
SDK中的头文件，是可以将大量关键的函数进行重命名的，从而帮助快速漏洞分析、漏洞可行性的判断以及漏洞利用方案的编写等等。
## 2\. Acrobat的Javascript机制
Acrobat SDK的文档中明确说明了最新的Acrobat Reader使用的Javascript引擎是基于SpiderMonkey 24.2。
SpiderMonkey
24.2是一个稳定发行版本，源码可以在http://ftp.mozilla.org/pub/spidermonkey/releases/下载。
首先介绍一下怎么找到Javascript层的api对应的Native层的实现，这点不是必需的，但是能有效地辅助调试。