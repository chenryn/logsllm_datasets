To validate the model developed in section 3.3, two types of tests were run.
One test used a pseudo-TCP stream consisting of a stream of UDP packets sent
back to back, with a small stream returning in the opposite direction; the other
involved actual TCP streams.
The ttcp test program was modiﬁed to perform these experiments. The
modiﬁcations involved having one host send a stream of 50 UDP packets to
another. Each packet contained a unique sequence number. The receiver was
modiﬁed to return a small UDP packet for every second packet received. This
simulates the typical mode of operation of the delayed ack algorithm found
in TCP implementations. This returned packet contained a unique sequence
number and a copy of the data packet sequence number that generated this
ack. As before, the mii-tool program was used to force one link into diﬀerent
normal and mismatch states. The raw data was captured using the tcpdump
command.
An analysis of the resulting traces showed that there were two diﬀerent mis-
match behaviors and two ﬂavors of each behavior. These behaviors match the
predicted models described in section 3.3.
One behavior is when S = H and R = F . In this situation, most of the return-
ing ack packets are lost. Even though the receiver is generating and transmitting
them, only the ﬁnal ack packet is recieved by the sender. The rest are lost due
to collisions with the arriving data packets. Depending on how late collisions are
handled, the data packets may be retransmitted or discarded. Thus, two ﬂavors
of this behavior are observed.
The second behavior is when S = F and R = H. In this situation, the arriving
data packets are discarded due to collisions. The ack packets are delayed due to
numerous retransmission attempts. When the receiver’s local link is mismatched,
∆ is small, so the ﬁrst ack is given back to the interface while data packet 3 is
being received. As predicted in section 3.3, data packets 4, 5, 6, 7 and 8 are lost
due to collisions as this frame is retransmitted over and over. Eventually, the
retransmit delay increases to a point where several data packets do get through,
causing more acks to be generated. These acks are queued behind the ﬁrst ack
and can only be transmitted after a successful transmission (or if the maximum
retransmission count is exceeded).
A slightly diﬀerent ﬂavor of this behavior occurs when the mismatch link is
not the last link in the path. In this case the ﬁrst collision will occur when the
ack has propagated back along the path to the point of the mismatch. In the
tests, the sender and receiver roles were exchanged but no changes were made to
the link with duplex mismatch. This resulted in data packets 6, 7, 8, 9, and 10
being lost. This shift exactly matches the extra time needed for the ack to
propagate back along the network path to the mismatched switch port.
For comparison purposes, the normal full-duplex and half-duplex operating
conditions were also tested. No exceptional loss or delay values were recorded.
While this simple test can demonstrate how the returning ack packets can
collide with data packets, it does not explain the complex dynamics of a real TCP
Detecting Duplex Mismatch on Ethernet
145
Fig. 3. TCP trace with duplex mismatch, S = F and R = H
ﬂow. We need to capture the retransmission and congestion control dynamics to
more completely describe the TCP behavior.
To examine the various normal and mismatch cases, a series of tests were run
using the existing NDT client/server program. The client’s link was conﬁgured
using the mii-tool program to simulate the expected conﬁguration: where the
NDT server is properly conﬁgured but the client may have a mismatch condition.
The results of these test are described below.
Figure 3 shows the mismatch case with S = F . We begin the trace after the
NDT server has successfully sent several packets and a timeout occurred. Fol-
lowing the retransmission, an ack is received causing the rwin value to increase
and allowing more data to be sent. Two data packets are transmitted, and, fol-
lowing an RTT, the acks are returned. Note that after two RTTs a hole appears
due to a lost packet. The sender continues to inject new packets as ack arrive.
After three duplicate acks have arrived, the sender retransmitts the missing
data packet. The receipt of this packet ﬁlls in the hole and causes a large jump
in rwin. This process repeats for the entire 10 second test time.
The result is that throughput is limited by cwnd and the RTT of the end-to-
end path. Slight variations in packet arrival times can cause multiple packets to
be lost at the client. This increases the probability of a TCP rto event, further
decreasing in throughput.
When the mismatch condition is reversed such that S = H, an even greater
impact is seen on TCP throughput. As noted above, this condition will result
in ack packets being discarded. A typical trace shows that the NDT server
sends several back-to-back packets to the receiver. These packets are received,
but the returning ack is lost. The lack of an ack prevents the sender from
sending more packets into the network, thus preventing any more acks from
146
S. Shalunov and R. Carlson
being generated. The connection stalls until the TCP rto event occurs. This
causes the sender to resend what it thought were lost packets. When the ﬁrst
retransmitted data packet is received, the receiver recognizes it as a duplicate
and immediately sends a duplicate ack. This ack causes two more packets to
be sent, another duplicate and a single new packet. When the receiver receives
the duplicate data packet, it sends another duplicate ack, which collides with
the third data packet. Thus, the ack is lost, but the data packet is successfully
received after a small delay. The loss of this ack causes another rto event to
occur, starting the entire process over again. TCP throughput in this situation
is limited by the numerous rto events.
5
Soft Failures Similar to Duplex Mismatch
Our goal is to develop a duplex mismatch detection algorithm that treats the
network as a black box. Both false positives and false negatives must be consid-
ered. A particularly harmful and insidious mode of false positive would be the
characterization of another soft failure condition as duplex mismatch: not only
would users waste their time not solving their real problem, but they might,
while responding to perceived duplex mismatch diagnostics, change settings to
introduce duplex mismatch in a network that previously did not have one. For
example, when a copper twisted-pair cable is subtly damaged, cross-talk can oc-
cur; i.e., a signal transmitted on one wire induces a spurious signal on another.
Bit corruption during bidirectional transmission that occurs thusly could be
confused with duplex mismatch. Chief diﬀerentiators of cross-talk from duplex
mismatch are:
1. Cross-talk can aﬀect unidirectional traﬃc; duplex mismatch cannot;
2. Duplex mismatch occurs deterministically; cross-talk corrupts bits randomly.
6 Detecting Duplex Mismatch in NDT
While other packet losses can cause the number of duplicate ack packets to
increase, the asymmetric throughput results are not observed. Thus we believe
that the combination of these two conditions is a reliable indicator of duplex
mismatch.
The Network Diagnostic Tool (NDT) [5] is an open-source software program
that uses a client/server approach to detect common network problems. The
server process communicates with a Java-based client program to generate a
series of TCP unidirectional data ﬂows. The server also captures Web100 data
allowing it to delve into the depths of the TCP connection. By analyzing this
data, it is possible to determine if a duplex mismatch condition existed over
some portion of the network path.
The original NDT duplex mismatch detection heuristic was created after run-
ning a series of experiments in a testbed network environment. This environment
was expanded to encompass a campus network. This heuristic used the amount
Detecting Duplex Mismatch on Ethernet
147
of time the connection spent in the congestion window limited case, the num-
ber of packets retransmitted per second, and the throughput predicted by the
MTU/RTT
p formula. A later modiﬁcation was made to ignore cases when the
client was located behind a tight link (cable modem or DSL circuit).
√
A new algorithm that takes advantage of the analytical model described in
this paper has now been incorporated into the NDT tool. Web100 [6] variables
can be used to perform duplex mismatch detection thusly: The NDT server
generates two test streams sequentially, one on each direction, to measure TCP
throughput. Each stream is monitored to determine the path capacity. Thus, we
have two TCP throughput measurements and an estimate of the tight link in
the end-to-end path.
Duplex mismatch causes major disruptions to a TCP ﬂow. The generation
and transmission of ack packets in direct response to received data packets
increases the probability of a collision. Once this happens, either the data or
the ack packet will be lost and the other delayed by the CSMA/CD algorithm.
However, TCP is a reliable transport protocol, so it will retransmit lost data
packets. These retransmission will cause the receiver to generate more duplicate
acks per data packet compared to one delayed ack for every other data packet.
The Web100 variables are captured on the NDT server only in the case where
the NDT server is sending data to the client. The two duplex mismatch cases
can now be examined.8
If the client is the receiver and the mismatch condition is such that R = H,
then numerous data packets will be lost. The original transmission and an subse-
quent retransmissions will cause the Web100 DataPktsOut counter to increment.
In addition, the loss of individual packets will cause the client to generate a large
number of duplicate acks. The Web100 AckPktsIn counter will be incremented
every time a new or duplicate ack is received. Thus, the ratio of data packets
transmitted vs ack packets received will skew away from 2:1 towards more acks.
As noted above, throughput will be a function of cwnd and RTT.
If the client is the receiver, R = F , and S = H, then numerous ack packets
will be lost. In addition, a large number of packets will be retransmitted and
a large number of timeouts will occur. This will skew the data packet vs ack
packet ratio in the opposite direction from that described above. Thus, a ratio
of more than 2:1 is expected. TCP throughput will be dramatically aﬀected due
to the large number of rto events.9
This means that we can create a reliable duplex mismatch detection algorithm
by combining the asymmetric throughput with the skewed ack:data packet ratio.
At present, we are collecting data to validate these predictions and results.
NDT servers at several locations are gathering data from production environ-
ments. We will analyze the log ﬁles produced and compare the results with the
observations from the NDT administrator. Our presentation will describe the
results of this eﬀort.
8 In each case, the TCP ﬂow in the opposite direction will exhibit the other mismatch
behavior.
9 The NDT tool will display both conditions as it runs two unidirectional tests.
148
S. Shalunov and R. Carlson
7 Conclusions
Duplex mismatch is an insidious condition, undetectable with such simple net-
work operation tools as ping. It can aﬀect a user’s performance for weeks or
months before it is detected. A model of duplex mismatch is described and a
detection algorithm is proposed. The algorithm is implemented in the NDT.
References
1. IEEE: Part 3: Carrier sense multiple access with collision detection (CSMA/CD)
access method and physical layer speciﬁcations. IEEE Standards, 802.3 (2002)
2. Apparent Networks: Duplex conﬂicts: How a duplex mismatch can cripple a network.
White Paper (2002)
3. Eggers, J., Hodnett, S.: Ethernet autonegotiation best practices. Sun BluePrints
OnLine (2004)
4. Hernandez, R.: Gigabit Ethernet auto-negotiation. Dell Power Solutions 1 (2001)
5. Carlson, R.A.: Developing the Web100 based network diagnostic tool (NDT). In:
Proc. Passive and Active Measurement Workshop (PAM), San Diego (2003)
6. Mathis, M., Heﬀner, J., Reedy, R.: Web100: Extended TCP instrumentation for
research, education, and diagnosis. ACM Computer Communications Review 33
(2003)