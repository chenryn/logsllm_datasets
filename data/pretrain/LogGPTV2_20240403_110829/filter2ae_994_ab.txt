        };
        public static void main(String[] args) {
            try {
                MyClassLoader loader = new MyClassLoader();
                Class helloClass = loader.loadClass(myClassName);
                Object obj = helloClass.newInstance();
                Method method = obj.getClass().getMethod("test");
                method.invoke(null);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        @Override
        protected Class findClass(String name) throws ClassNotFoundException {
            if (name == myClassName) {
                System.out.println("加载" + name + "类");
                return defineClass(myClassName, bs, 0, bs.length);
            }
            return super.findClass(name);
        }
    }
删掉classpath中的HelloWorld.class字节码，然后运行。
成功调用字节码定义的test()方法。
## RMI简介
RMI(Remote Method
Invocation)即Java远程方法调用，RMI用于构建分布式应用程序，RMI实现了Java程序之间跨JVM的远程通信。一个RMI过程有以下三个参与者：
  1. RMI Registry
  2. RMI Server
  3. RMI Client
来看一个例子  
RMIServer.java
    package com.test.rmi;
    import java.net.MalformedURLException;
    import java.rmi.Naming;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.server.UnicastRemoteObject;
    public class RMIServer {
        public interface IRemoteHelloWorld extends Remote {
            public String hello() throws RemoteException;
        }
        public class RemoteHelloWorld extends UnicastRemoteObject implements IRemoteHelloWorld {
            protected RemoteHelloWorld() throws RemoteException {
                super();
            }
            @Override
            public String hello() throws RemoteException {
                System.out.println("call hello()");
                return "helloworld";
            }
        }
        private void start() throws Exception {
            RemoteHelloWorld h = new RemoteHelloWorld();
            LocateRegistry.createRegistry(1099);
            Naming.rebind("rmi://127.0.0.1:1099/Hello", h);
        }
        public static void main(String[] args) throws Exception {
            new RMIServer().start();
        }
    }
RMIClient.java
    package com.test.Train;
    import com.test.rmi.RMIServer;
    import java.rmi.Naming;
    public class RMIClient {
        public static void main(String[] args) throws Exception {
            RMIServer.IRemoteHelloWorld hello = (RMIServer.IRemoteHelloWorld)
                Naming.lookup("rmi://127.0.0.1:1099/Hello");
            String res = hello.hello();
            System.out.println(res);
        }
    }
在RMIServer代码中的Server其实包含了Registry和Server两部分，分别运行Server和Client看下。
由此可见Client远程调用了Server的hello()方法，输出了helloworld。我们回过头来看下Server的结构
  1. 定义一个IRemoteHelloWorld接口继承Remote
  2. 在接口中定义一个hello()方法 方法必须抛出 java.rmi.RemoteException 异常
  3. 定义一个RemoteHelloWorld类实现IRemoteHelloWorld接口并继承UnicastRemoteObject类
  4. 重写hello()方法
  5. 新建RemoteHelloWorld对象绑定在`rmi://127.0.0.1:1099/Hello`开始监听
本文不深入探讨RMI的工作原理，我们只需要知道如果Server端有继承Remote的接口，并且实现了具体方法时，我们可以在Client去调用他的方法。
## RMI和Weblogic的结合
到目前为止，我们知道可以通过ClassLoader类和字节码来定义我们自己的类，也知道可以通过RMI来调用远程服务器的方法。那么在weblogic之中，RMI有什么妙用？
之前写的几篇关于Weblogic的反序列化RCE因为没有回显结果，都是通过curl或者dnslog来验证的，而看了上文之后，我们可以通过common-collection反序列化调用ClassLoader，通过字节码来自定义一个RMI接口类，在类实现的方法中返回命令执行的结果。
那么现在有几个问题：
  1. defineClass需要ClassLoader的子类才能拿到
  2. 具体应该实现哪个RMI接口类呢？