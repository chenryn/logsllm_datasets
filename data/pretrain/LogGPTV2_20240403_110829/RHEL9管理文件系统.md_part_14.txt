``` screen
/dev/disk/by-uuid/3e6be9de-8139-11d1-9106-a43f08d823a6
```
您可以使用以下语法，使用 UUID 指向 `/etc/fstab`{.literal} 文件中的设备：
``` screen
UUID=3e6be9de-8139-11d1-9106-a43f08d823a6
```
您可以在创建文件系统时配置 UUID 属性，您也可以稍后修改它。
### []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#_the_label_attribute_in_devdiskby_label}/dev/disk/by-label/ 中的 Label 属性
这个目录中的条目提供了一个符号链接名称，它们使用保存在该设备中的内容（即数据）的一个
[**label**]{.strong} 指向存储设备。
例如：
``` screen
/dev/disk/by-label/Boot
```
您可以使用以下语法，使用标签来指向 `/etc/fstab`{.literal} 文件中的设备：
``` screen
LABEL=Boot
```
您可以在创建文件系统时配置 Label 属性，您也可以稍后修改它。
:::
::: section
::: titlepage
## []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#device-identifiers_assembly_overview-of-persistent-naming-attributes}设备识别符 {.title}
:::
### []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#_the_wwid_attribute_in_devdiskby_id}/dev/disk/by-id/ 中的 WWID 属性
全球识别符（WWID）是一个持久的、[**系统独立的标识符**]{.strong}，SCSI
标准要求所有 SCSI 设备都使用它。保证 WWID
标识符对于每个存储设备都是唯一的，并且独立于用于访问该设备的路径。标识符是设备的属性，但不存储在设备上的内容（也就是数据）中。
可通过发出 SCSI 询问来检索设备识别重要产品数据（第 `0x83`{.literal}
页）或单元序列号（第 `0x80`{.literal} 页）来获取此标识符。
Red Hat Enterprise Linux 自动维护从基于 WWID 的设备名称到该系统上当前
`/dev/sd`{.literal} 名称的正确映射。应用程序可以使用
`/dev/disk/by-id/`{.literal}
名称来引用磁盘上的数据，即使设备的路径有变化，即使从不同的系统访问该设备也一样。
::: example
[]{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#idm139895488542800}
**例 13.1. WWID 映射**
::: example-contents
::: informaltable
  WWID 符号链接                                                                     非持久性设备            备注
  --------------------------------------------------------------------------------- ----------------------- ----------------------------------------
  `/dev/disk/by-id/scsi-3600508b400105e210000900000490000`{.literal}                `/dev/sda`{.literal}    具有页面 `0x83`{.literal} 标识符的设备
  `/dev/disk/by-id/scsi-SSEAGATE_ST373453LW_3HW1RHM6`{.literal}                     `/dev/sdb`{.literal}    具有页面 `0x80`{.literal} 标识符的设备
  `/dev/disk/by-id/ata-SAMSUNG_MZNLN256HMHQ-000L7_S2WDNX0J336519-part3`{.literal}   `/dev/sdc3`{.literal}   磁盘分区
:::
:::
:::
除了系统提供的这些持久名称外，您还可以使用 `udev`{.literal}
规则来实现映射到存储的 WWID 的持久名称。
### []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#_the_partition_uuid_attribute_in_devdiskby_partuuid}/dev/disk/by-partuuid 中的分区 UUID 属性
分区 UUID(PARTUUID)属性标识 GPT 分区表定义的分区。
::: example
[]{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#idm139895608782640}
**例 13.2. 分区 UUID 映射**
::: example-contents
::: informaltable
  PARTUUID 符号链接                               非持久性设备
  ----------------------------------------------- -----------------------
  `/dev/disk/by-partuuid/4cd1448a-01`{.literal}   `/dev/sda1`{.literal}
  `/dev/disk/by-partuuid/4cd1448a-02`{.literal}   `/dev/sda2`{.literal}
  `/dev/disk/by-partuuid/4cd1448a-03`{.literal}   `/dev/sda3`{.literal}
:::
:::
:::
### []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#_the_path_attribute_in_devdiskby_path}/dev/disk/by-path/ 中的 Path 属性
此属性通过用于访问该设备的 [**硬件路径**]{.strong}
来提供一个指向存储设备的符号链接。
如果硬件路径的任何部分（如 PCI ID、目标端口或 LUN 号）发生变化，Path
属性会失败。因此 Path 属性是不可靠的。但是 Path
属性在以下情况下可能有用：
::: itemizedlist
-   您需要识别您要替换的磁盘。
-   您计划在特定位置的磁盘中安装存储服务。
:::
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#con_the-world-wide-identifier-with-dm-multipath_assembly_overview-of-persistent-naming-attributes}使用 DM 多路径的通用识别符 {.title}
:::
这部分论述了全球识别符（WWID）与设备映射器多路径配置中非持久性设备名称之间的映射。
如果系统中有多路径到某个设备，DM 多路径会使用 WWID
探测到这个设备。然后，DM 多路径会在 `/dev/mapper/wwid`{.literal}
目录中显示一个\"pseudo-device\"，如
`/dev/mapper/3600508b400105df70000e00000ac0000`{.literal}。
`multipath -l`{.literal} 命令显示到非持久性标识符的映射：
::: itemizedlist
-   `Host:Channel:Target:LUN`{.literal}
-   `/dev/sd`{.literal} 名称
-   `major:minor`{.literal} 号
:::
::: example
[]{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#idm139895600839200}
**例 13.3. 多路径配置中的 WWID 映射**
::: example-contents
`multipath -l`{.literal} 命令的一个输出示例：
``` screen
3600508b400105df70000e00000ac0000 dm-2 vendor,product
[size=20G][features=1 queue_if_no_path][hwhandler=0][rw]
\_ round-robin 0 [prio=0][active]
 \_ 5:0:1:1 sdc 8:32  [active][undef]
 \_ 6:0:1:1 sdg 8:96  [active][undef]
\_ round-robin 0 [prio=0][enabled]
 \_ 5:0:0:1 sdb 8:16  [active][undef]
 \_ 6:0:0:1 sdf 8:80  [active][undef]
```
:::
:::
DM 多路径自动维护每个基于 WWID 的设备名称到系统上相应的
`/dev/sd`{.literal}
名称的正确映射。这些名称可在路径更改之间保留，在从不同系统访问该设备时会保持一致。
当使用 DM 多路径的 `user_friendly_names`{.literal} 功能时，WWID 被映射成
`/dev/mapper/mpathN`{.literal} 形式的名称。默认情况下，此映射在
`/etc/multipath/bindings`{.literal} 文件中维护。只要该文件被维护，这些
`mpathN`{.literal} 名称就会持久存在。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
如果使用
`user_friendly_names`{.literal}，则需要额外的步骤来获得集群中的一致名称。
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#con_limitations-of-the-udev-device-naming-convention_assembly_overview-of-persistent-naming-attributes}udev 设备命名规则的限制 {.title}
:::
以下是 `udev`{.literal} 命名规则的一些限制：
::: itemizedlist
-   执行查询时可能无法访问设备，因为当为 `udev`{.literal} 事件处理
    `udev`{.literal} 规则时，`udev`{.literal}
    机制可能依赖于查询存储设备的能力。当设备不在服务器机箱中时，这更可能会在光纤频道、iSCSI
    或者 FCoE 存储设备中发生。
-   内核可能会随时发送 `udev`{.literal}
    事件，从而导致规则被处理，并可能导致设备无法访问时，`/dev/disk/by-*/`{.literal}
    链接被删除。
-   在 `udev`{.literal} 事件产生和处理时，如检测到大量设备，用户空间
    `udevd`{.literal}
    服务花费一些时间来处理每个事件的规则时，可能会有延迟。这可能会在内核检测到该设备和在
    `/dev/disk/by-*/`{.literal} 名称可用之间出现延迟。
-   规则调用的 `blkid`{.literal}
    等外部程序可能会打开设备一小段时间，从而使设备无法被其他用途访问。
-   /dev/disk/ 中由 `udev`{.literal}
    机制管理的设备名称可能会在主版本之间有所变化，需要您更新链接。
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#proc_listing-persistent-naming-attributes_assembly_overview-of-persistent-naming-attributes}列出持久性命名属性 {.title}
:::
这个步骤描述了如何找到非持久性存储设备的持久命名属性。
::: itemizedlist
**流程**
-   要列出 UUID 和 Label 属性，请使用 `lsblk`{.literal} 工具：
    ``` screen
    $ lsblk --fs storage-device
    ```
    例如：
    ::: example
    []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#idm139895548638032}
    **例 13.4. 查看文件系统的 UUID 和标签**
    ::: example-contents
    ``` screen
    $ lsblk --fs /dev/sda1
    NAME FSTYPE LABEL UUID                                 MOUNTPOINT
    sda1 xfs    Boot  afa5d5e3-9050-48c3-acc1-bb30095f3dc4 /boot
    ```
    :::
    :::
-   要列出 PARTUUID 属性，请使用 `lsblk`{.literal} 工具以及
    `--output +PARTUUID`{.literal} 选项：
    ``` screen
    $ lsblk --output +PARTUUID
    ```
    例如：
    ::: example
    []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#idm139895476300624}
    **例 13.5. 查看分区的 PARTUUID 属性**
    ::: example-contents
    ``` screen
    $ lsblk --output +PARTUUID /dev/sda1
    NAME MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT PARTUUID
    sda1   8:1    0  512M  0 part /boot      4cd1448a-01
    ```
    :::
    :::
-   要列出 WWID 属性，请检查 `/dev/disk/by-id/`{.literal}
    目录中符号链接的目标。例如：
    ::: example
    []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#idm139895475964144}
    **例 13.6. 查看系统中所有存储设备的 WWID**
    ::: example-contents
    ``` screen
    $ file /dev/disk/by-id/*
    /dev/disk/by-id/ata-QEMU_HARDDISK_QM00001
    symbolic link to ../../sda
    /dev/disk/by-id/ata-QEMU_HARDDISK_QM00001-part1
    symbolic link to ../../sda1
    /dev/disk/by-id/ata-QEMU_HARDDISK_QM00001-part2
    symbolic link to ../../sda2
    /dev/disk/by-id/dm-name-rhel_rhel8-root
    symbolic link to ../../dm-0
    /dev/disk/by-id/dm-name-rhel_rhel8-swap
    symbolic link to ../../dm-1
    /dev/disk/by-id/dm-uuid-LVM-QIWtEHtXGobe5bewlIUDivKOz5ofkgFhP0RMFsNyySVihqEl2cWWbR7MjXJolD6g
    symbolic link to ../../dm-1
    /dev/disk/by-id/dm-uuid-LVM-QIWtEHtXGobe5bewlIUDivKOz5ofkgFhXqH2M45hD2H9nAf2qfWSrlRLhzfMyOKd
    symbolic link to ../../dm-0
    /dev/disk/by-id/lvm-pv-uuid-atlr2Y-vuMo-ueoH-CpMG-4JuH-AhEF-wu4QQm
    symbolic link to ../../sda2
    ```
    :::
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-persistent-naming-attributes_managing-file-systems.html#proc_modifying-persistent-naming-attributes_assembly_overview-of-persistent-naming-attributes}修改持久性命名属性 {.title}
:::
这个步骤描述了如何更改文件系统的 UUID 或 Label persistent naming 属性。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
更改 `udev`{.literal}
属性在后台进行，可能需要很长时间。`udevadm settle`{.literal}
命令一直等待直到更改完全注册，这样可确保您的下一个命令能够正确使用新属性。
:::
在以下命令中：
::: itemizedlist
-   将 [*[new-uuid]{.replaceable}*]{.emphasis} 替换为您要设置的
    UUID；例如，`1cdfbc07-1c90-4984-b5ec-f61943f5ea50`{.literal}。您可以使用
    `uuidgen`{.literal} 命令生成一个 UUID。
-   使用标签替换 [*[new-label]{.replaceable}*]{.emphasis}，如
    `backup_data`{.literal}。
:::
::: itemizedlist
**先决条件**
-   如果您要修改 XFS 文件系统的属性，首先卸载它。
:::
::: itemizedlist
**流程**
-   要更改 [**XFS**]{.strong} 文件系统的 UUID 或 Label 属性，请使用
    `xfs_admin`{.literal} 工具：
    ``` screen
    # xfs_admin -U new-uuid -L new-label storage-device
    # udevadm settle
    ```
-   要更改 [**ext4**]{.strong}、[**ext3**]{.strong} 或
    [**ext2**]{.strong} 文件系统的 UUID 或 Label 属性，请使用
    `tune2fs`{.literal} 工具：
    ``` screen
    # tune2fs -U new-uuid -L new-label storage-device
    # udevadm settle
    ```
-   要更改 swap 卷的 UUID 或 Label 属性，请使用 `swaplabel`{.literal}
    工具：
    ``` screen
    # swaplabel --uuid new-uuid --label new-label swap-device
    # udevadm settle
    ```
:::
:::
:::
[]{#assembly_viewing-the-partition-table_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_viewing-the-partition-table_managing-file-systems.html#assembly_viewing-the-partition-table_managing-file-systems}第 14 章 重新划分现存分区的大小 {.title}
:::
作为系统管理员，您可以显示块设备的分区表来查看分区布局和单个分区的详情。有关在块设备上使用分区的优缺点的概述，请参阅以下
KBase
文章：[https://access.redhat.com/solutions/163853](https://access.redhat.com/solutions/163853){.link}。
::: section
::: titlepage
# []{#assembly_viewing-the-partition-table_managing-file-systems.html#proc_viewing-the-partition-table-with-parted_assembly_viewing-the-partition-table}查看使用 parted 的分区表 {.title}
:::
这个流程描述了如何使用 `parted`{.literal} 工具来查看块设备上的分区表。
::: orderedlist
**流程**
1.  启动交互式 `parted`{.literal} shell：
    ``` screen
    # parted block-device