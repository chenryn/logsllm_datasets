### Critical Subtleties in Defending Against DNS Rebinding Attacks

#### Common Pin Database
To effectively defend against multi-pin attacks, pinning-based defenses require that all browser technologies and network-accessing components share a common pin database. Many plugins, such as Flash and Silverlight, already use the browser's pins for HTTP requests because they issue these requests through the browser. For other types of network access, either the browser can expose an interface to its pin database or the operating system can implement pinning in its DNS resolver. However, browser vendors are generally reluctant to expose such an interface [12, 33]. Implementing pinning in the operating system can either change the semantics of DNS for other applications or necessitate different treatment of browsers and their plugins compared to other applications.

#### Cache Modifications
The browser's cache and all plugin caches must be modified to prevent rebinding attacks. Currently, cached objects are retrieved by URL, regardless of the originating IP address, which creates a vulnerability: a cached script from the attacker might run later when `attacker.com` is bound to the target. To mitigate this, objects in the cache should be retrieved using both the URL and the originating IP address. This modification can degrade performance when the browser pins to a new IP address, which may occur if the host at the first IP address fails, the user starts a new browsing session, or the user’s network connectivity changes. These events, however, are relatively uncommon and unlikely to significantly impact performance.

#### Document Domain
Even with strict pinning, a server remains vulnerable to rebinding attacks if it hosts a web page that executes the following JavaScript:
```javascript
document.domain = document.domain;
```
After setting the domain property, the browser allows cross-origin interactions with other pages that have set their domain property to the same value [42, 17]. This idiom, used by several JavaScript libraries, sets the domain property to a value controlled by the attacker: the current host name.

### Fixing Browsers (Default-Allow Sockets)
Instead of preventing a host name from rebinding from one IP address to another, a different approach to defending against rebinding is to prevent the attacker from naming the target server, essentially generalizing `dnswall` to the Internet. Without the ability to name the target server, the attacker cannot mount a DNS rebinding attack. This approach defends against rebinding, allows socket access by default, and preserves the robustness of dynamic DNS.

#### Host Name Authorization
On the Internet, clients need additional information to determine the set of valid host names for a given IP address. We propose that servers advertise the set of host names they consider valid for themselves, and clients check these advertisements before binding a host name to an IP address. This makes explicit which host names can map to which IP addresses. Host name authorization prevents rebinding attacks because honest machines will not advertise host names controlled by attackers.

Reverse DNS already provides a mapping from IP addresses to host names. The owner of an IP address `ip` is delegated naming authority for `ip.in-addr.arpa` and typically stores a PTR record containing the host name associated with that IP address. However, these records are insufficient for host name authorization because a single IP address can have many valid host names, and existing PTR records do not indicate that other host names are invalid.

#### Extending Reverse DNS for Host Name Authorization
The reverse DNS system can be extended to authorize host names without sacrificing backward compatibility. To authorize `www.example.com` for `171.64.78.146`, the owner of the IP address inserts the following DNS records:
```
auth.146.78.64.171.in-addr.arpa. IN A 171.64.78.146
www.example.com.auth.146.78.64.171.in-addr.arpa. IN A 171.64.78.146
```
To perform a policy-enabled resolution for `www.example.com`, follow these steps:
1. Resolve the host name `auth.ip.in-addr.arpa`.
2. If the host name exists, `ip` is policy-enabled and accepts only authorized host names. Otherwise, `ip` is not policy-enabled and accepts any host name.
3. If `ip` is policy-enabled, resolve the host name `www.example.com.auth.ip.in-addr.arpa` to determine if the host name is authorized.

An IP address `ip` implicitly authorizes every host name of the form `*.auth.ip.in-addr.arpa`, preventing incorrect recursive policy checks. For host names with multiple IP addresses, only authorized IP addresses should be included in the result. If no IP addresses are authorized, the result should be "not found." If an IP address is not policy-enabled, DNS rebinding attacks can be mitigated using the techniques in Section 5.3.

#### Implementation and Caching
The policy check can be implemented in DNS resolvers, such as those run by organizations and ISPs, transparently protecting large groups of machines from having their IP addresses hijacked. User agents, such as browsers and plugins, can easily query the policy records because they are stored in A records and can issue policy checks in parallel with HTTP requests. Standard DNS caching reduces much of the overhead of redundant policy checks issued by DNS resolvers, browsers, and plugins. Policy-enabled resolvers can include policy records in the "additional" section of the DNS response, allowing downstream resolvers to cache complete policies and user-agents to get policy records without a separate request. We have implemented host name authorization as a 72-line patch to Firefox 2.

#### Disadvantages
One disadvantage of this mechanism is that the owner of an IP address, the ISP, might not be the owner of the machine at that IP address. The machine can advertise the correct set of authorized host names only if the ISP is willing to delegate the `auth` subdomain to the owner or insert appropriate DNS records. Alternatively, machines could advertise authorized host names over HTTP in a well-known location, similar to Flash's `crossdomain.xml`. However, this has several disadvantages: it requires policy-enabled DNS resolvers to implement HTTP clients, it requires all machines, such as SMTP gateways, to run an HTTP server, and policy queries are not cached, resulting in extra network traffic comparable to `favicon.ico`.

#### Trusted Policy Providers
Clients and DNS resolvers can also check policy by querying a trusted policy provider. Similar to spam blacklists [39] and phishing filters [6, 31, 16], different policy providers can use different heuristics to determine whether a host name is valid for an IP address, but every provider should respect host names authorized in reverse DNS. When correctly configured, host name authorization in reverse DNS has no false negatives (no valid host name is rejected) but many false positives (lack of policy is implicit authorization). Trusted policy providers can greatly reduce the false positive rate, possibly at the cost of increasing the false negative rate. Clients are free to select as aggressive a policy provider as they desire.

### Related Work
- **Using Browsers as Bots**: The technique of luring web users to an attacker’s site and then distracting them while their browsers participate in a coordinated attack is described in [24]. These "puppetnets" can be used for distributed denial of service but cannot be used to mount the attacks described in Section 4 because puppetnets cannot read back responses from different origins or connect to forbidden ports such as 25.
- **JavaScript Misuse**: JavaScript can also be misused to scan behind firewalls [18] and reconfigure home routers [40]. These techniques often rely on exploiting default passwords and underlying cross-site scripting or cross-site request forgery vulnerabilities. DNS rebinding attacks can exploit default passwords without the need for a cross-site scripting or cross-site request forgery hole.
- **Sender Policy Framework**: To fight spam email, the Sender Policy Framework (SPF) [46] stores policy information in DNS. SPF policies are stored as TXT records in forward DNS, where host names can advertise the set of IP addresses authorized to send email on their behalf.

### Conclusions
An attacker can exploit DNS rebinding vulnerabilities to circumvent firewalls and hijack IP addresses. Basic DNS rebinding attacks have been known for over a decade, but the classic defense, pinning, reduces robustness and fails to protect current browsers that use plugins. Modern multi-pin attacks defeat pinning in hundreds of milliseconds, granting the attacker direct socket access from the client’s machine. These attacks are a highly cost-effective technique for hijacking hundreds of thousands of IP addresses for sending spam email and committing click fraud.

For network administrators, we provide a tool to prevent DNS rebinding from being used for firewall circumvention by blocking external DNS names from resolving to internal IP addresses. For the vendors of Flash, Java, and LiveConnect, we suggest simple patches that mitigate large-scale exploitation by vastly reducing the cost-effectiveness of the attacks for sending spam email and committing click fraud. Finally, we propose two defense options that prevent both firewall circumvention and IP hijacking: policy-based pinning and host name authorization. We hope that vendors and network administrators will deploy these defenses quickly before attackers exploit DNS rebinding on a large scale.

### Acknowledgments
We thank Drew Dean, Darin Fisher, Jeremiah Grossman, Martin Johns, Dan Kaminsky, Chris Karlof, Jim Roskind, and Dan Wallach for their helpful suggestions and feedback. This work is supported by grants from the National Science Foundation and the US Department of Homeland Security.

### References
[1] Adobe. Flash Player Penetration. http://www.adobe.com/products/player_census/flashplayer/.
[2] Adobe. Adobe flash player 9 security. http://www.adobe.com/devnet/flashplayer/articles/flash_player_9_securit%y.pdf, July 2006.
[3] Alexa. Top sites. http://www.alexa.com/site/ds/top_sites?ts_mode=global.
[4] K. Anvil. Anti-DNS pinning + socket in flash. http://www.jumperz.net/, 2007.
[5] W. Cheswick and S. Bellovin. A DNS filter and switch for packet-filtering gateways. In Proc. Usenix, 1996.
[6] N. Chou, R. Ledesma, Y. Teraguchi, and J. Mitchell. Client-side defense against web-based identity theft. In Proc. NDSS, 2004.
[7] N. Daswani, M. Stoppelman, et al. The anatomy of Clickbot.A. In Proc. HotBots, 2007.
[8] D. Dean, E. W. Felten, and D. S. Wallach. Java security: from HotJava to Netscape and beyond. In IEEE Symposium on Security and Privacy: Oakland, California, May 1996.
[9] D. Edwards. Your MOMA knows best, December 2005. http://xooglers.blogspot.com/2005/12/your-moma-knows-best.html.
[10] K. Fenzi and D. Wreski. Linux security HOWTO, January 2004.
[11] R. Fielding et al. Hypertext Transfer Protocol—HTTP/1.1. RFC 2616, June 1999.
[12] D. Fisher, 2007. Personal communication.
[13] D. Fisher et al. Problems with new DNS cache ("pinning" forever). https://bugzilla.mozilla.org/show_bug.cgi?id=162871.
[14] D. Goodin. Calif. man pleads guilty to felony hacking. Associated Press, January 2005.
[15] Google. dnswall. http://code.google.com/p/google-dnswall/.
[16] Google. Google Safe Browsing for Firefox, 2005. http://www.google.com/tools/firefox/safebrowsing/.
[17] S. Grimm et al. Setting document.domain doesn’t match an implicit parent domain. https://bugzilla.mozilla.org/show_bug.cgi?id=183143.
[18] J. Grossman and T. Niedzialkowski. Hacking intranet websites from the outside: JavaScript malware just got a lot more dangerous. In Blackhat USA, August 2006. Invited talk.
[19] I. Hickson et al. HTML 5 Working Draft. http://www.whatwg.org/specs/web-apps/current-work/.
[20] C. Jackson, A. Bortz, D. Boneh, and J. Mitchell. Protecting browser state from web privacy attacks. In Proc. WWW, 2006.
[21] M. Johns. (somewhat) breaking the same-origin policy by undermining DNS pinning, August 2006. http://shampoo.antville.org/stories/1451301/.
[22] M. Johns and J. Winter. Protecting the Intranet against “JavaScript Malware” and related attacks. In Proc. DIMVA, July 2007.
[23] C. K. Karlof, U. Shankar, D. Tygar, and D. Wagner. Dynamic pharming attacks and the locked same-origin policies for web browsers. In Proc. CCS, October 2007.
[24] V. T. Lam, S. Antonatos, P. Akritidis, and K. G. Anagnostakis. Puppetnets: Misusing web browsers as a distributed attack infrastructure. In Proc. CCS, 2006.
[25] G. Maone. DNS Spoofing/Pinning. http://sla.ckers.org/forum/read.php?6,4511,14500.
[26] G. Maone. NoScript. http://noscript.net/.
[27] C. Masone, K. Baek, and S. Smith. WSKE: web server key enabled cookies. In Proc. USEC, 2007.
[28] A. Megacz. XWT Foundation Security Advisory. http://xwt.org/research/papers/sop.txt.
[29] A. Megacz and D. Meketa. X-RequestOrigin. http://www.xwt.org/x-requestorigin.txt.
[30] Microsoft. Microsoft Web Enterprise Portal, January 2004. http://www.microsoft.com/technet/itshowcase/content/MSWebTWP.mspx.
[31] Microsoft. Microsoft phishing filter: A new approach to building trust in e-commerce content, 2005.
[32] P. Mockapetris. Domain Names—Implementation and Specification. IETF RFC 1035, November 1987.
[33] C. Nuuja (Adobe), 2007. Personal communication.
[34] G. Ollmann. The pharming guide. http://www.ngssoftware.com/papers/ThePharmingGuide.pdf, August 2005.
[35] Y. Rekhter, B. Moskowitz, D. Karrenberg, G. J. de Groot, and E. Lear. Address Allocation for Private Internets. IETF RFC 1918, February 1996.
[36] J. Roskind. Attacks against the Netscape browser. In RSA Conference, April 2001. Invited talk.
[37] D. Ross. Notes on DNS pinning. http://blogs.msdn.com/dross/archive/2007/07/09/notes-on-dns-pinning.asp%x, 2007.
[38] J. Ruderman. JavaScript Security: Same Origin. http://www.mozilla.org/projects/security/components/same-origin.html.
[39] Spamhaus. The spamhaus block list, 2007. http://www.spamhaus.org/sbl/.
[40] S. Stamm, Z. Ramzan, and M. Jakobsson. Drive-by pharming. Technical Report 641, Computer Science, Indiana University, December 2006.
[41] J. Topf. HTML Form Protocol Attack, August 2001. http://www.remote.org/jochen/sec/hfpa/hfpa.pdf.
[42] D. Veditz et al. document.domain abused to access hosts behind firewall. https://bugzilla.mozilla.org/show_bug.cgi?id=154930.
[43] W3C. The XMLHttpRequest Object, February 2007. http://www.w3.org/TR/XMLHttpRequest/.
[44] B. Warner. Home PCs rented out in sabotage-for-hire racket. Reuters, July 2004.
[45] J. Winter and M. Johns. LocalRodeo: Client-side protection against JavaScript Malware. http://databasement.net/labs/localrodeo/, 2007.
[46] M. Wong and W. Schlitt. Sender Policy Framework (SPF) for Authorizing Use of Domains in E-Mail. IETF RFC 4408, April 2006.