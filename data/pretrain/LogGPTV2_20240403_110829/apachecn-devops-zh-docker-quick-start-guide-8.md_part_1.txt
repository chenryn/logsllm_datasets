# 八、Docker 和 Jenkins
在本章中，我们将学习如何利用 Jenkins 来构建我们的 Docker 映像和部署我们的 Docker 容器。接下来，我们将学习如何将我们的 Jenkins 服务器部署为 Docker 容器。接下来，我们将学习如何在 Dockerized Jenkins 服务器中构建 Docker 映像。这就是 Docker 中通常所说的 Docker。最后，我们将看到如何利用 Docker 容器作为 Jenkins 构建代理，允许每个构建在一个原始的、短暂的 Docker 容器中运行。当然，我们将展示如何构建 Docker 映像，测试应用，并将测试过的映像推送到 Docker 注册表，所有这些都在我们的 Dockerized Jenkins 构建代理中。这将为您提供设置配置项/光盘系统所需的所有工具。
If all the containers in the world were laid end to end, they would go around the earth more than twice. – [https://www.bigboxcontainers.co.za/](https://www.bigboxcontainers.co.za/)
在本章中，我们将涵盖以下主题:
*   使用 Jenkins 构建 Docker 映像
*   设置文档化的 Jenkins 服务器
*   在 Dockerized Jenkins 服务器中构建 Docker 映像
*   为 Jenkins 构建节点使用 Docker 容器
*   在文档化的构建节点中构建、测试和推送 Docker 映像
# 技术要求
您将从 Docker 的公共报告中获取 Docker 映像，并安装 Jenkins 服务器软件，因此需要基本的互联网访问来执行本章中的示例。还要注意的是，这些示例比前面章节中介绍的示例具有更高的系统要求。本章示例中使用的服务器有 8 GB ram、2 个 CPU 和 20 GB 硬盘。
本章的代码文件可以在 GitHub 上找到:
[https://github . com/PacktPublishing/Docker-快速启动-指南/树/主/章节 08](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter08)
查看以下视频，查看正在运行的代码:
[http://bit.ly/2AyRz7k](http://bit.ly/2AyRz7k)
# 使用 Jenkins 构建 Docker 映像
您可能已经知道 Jenkins 是持续集成/持续交付(CI/CD)系统中广泛使用的工具。几乎每家公司，无论大小，都在以某种方式使用它。它非常有效，并且高度可配置，特别是有多种插件可以使用它。因此，扩展它的用途来创建 Docker 映像是非常自然的。在 Docker 中使用 Jenkins 的第一步非常容易完成。如果您现在使用的是一个现有的 Jenkins 服务器，那么您只需要在 Jenkins 服务器上安装 Docker 就可以使用它来构建 Docker 映像。您使用了与我们在第 1 章*中看到和使用的完全相同的安装技术来设置 Docker 开发环境*。基于运行您的 Jenkins 服务器的系统的操作系统，您可以按照您在[第 1 章](1.html)、S *中学习的安装步骤设置 Docker 开发环境*；完成后，可以使用 Jenkins 构建 Docker 映像。
如果您尚未启动并运行 Jenkins 服务器，您可以遵循以下*参考资料*部分中*安装 Jenkins* 网页链接中的指南，并在您正在使用的任何操作系统上安装 Jenkins。例如，我们将使用该页面中的信息在 Ubuntu 系统上设置一个 Jenkins 服务器。首先打开一个终端窗口。现在去拿 Jenkins 包裹的钥匙。接下来，您将把 Debian Jenkins 源代码添加到 apt 源代码列表中。接下来，您将更新系统上的包，最后，您将使用 apt-get 安装 Jenkins。这些命令如下所示:
```
# If Java has not yet been installed, install it now
sudo apt install openjdk-8-jre-headless
# Install Jenkins on an Ubuntu system
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins
```
在我的系统上运行这些命令如下所示:
![](img/9ffd1d7c-3383-4e84-acf8-771ca376e97c.png)
安装完成后，您需要打开浏览器，浏览到系统上的端口`8080`，完成 Jenkins 系统的设置和配置。这将包括输入管理员密码，然后决定安装哪些插件，作为 Jenkins 服务器初始部署的一部分。我建议使用 Jenkins 推荐的设置，因为这是一个很好的起点:
![](img/95c474c0-2d10-402b-af99-71ad922f7dd7.png)
现在您已经有了一个 Jenkins 服务器，您可以开始为它创建作业来执行，以确认它正在按预期工作。让我们从一个微不足道的 Hello 世界开始吧！确认 Jenkins 在工作的工作。登录到您的 Jenkins 服务器，点击新项目链接。在“新项目”页面中，输入我们工作的名称。我在用`hello-test`。选择我们要创建为管道的作业类型。接下来，单击页面左下角的确定按钮。这将带您进入我们新工作的配置屏幕。这个会非常简单。我们将创建一个管道脚本，因此向下滚动，直到您看到管道脚本输入框，然后输入以下脚本(请注意，管道脚本是用 groovy 编写的，它使用 Java(和 C)形式的注释):
```
// Our hello world pipeline script, named "hello-test"
node {
  stage('Say Hello') {
      echo 'Hello Docker Quick Start Guide Readers!'
   }
}
```
现在就这些，所以点击保存按钮保存我们的 Jenkins 作业的更新配置。保存配置后，让我们通过单击立即构建链接来测试该作业。如果一切都按预期运行，我们应该会看到工作成功完成。它看起来如下所示:
![](img/076b8ce5-1c78-4a28-9822-c898bf0ef082.png)
现在让我们创造另一个工作。单击链接返回仪表板，然后再次单击新项目链接。这一次，让我们来命名工作`hello-docker-test`。同样，为要创建的作业类型选择管道，然后单击“确定”按钮。再次向下滚动到管道脚本输入，并输入以下内容:
```
// Our Docker hello world pipeline script, named "hello-docker-test"
node {
   stage('Hello via Alpine') {
      docker.image('alpine:latest').inside {
         sh 'echo Hello DQS Readers - from inside an alpine container!'
      }
   }
}
```
单击保存按钮保存新作业的配置，然后单击立即构建链接启动 Jenkins 作业。以下是这次的情况:
![](img/140e4cd5-a668-4c00-928e-d2f9dd279357.png)
这次发生了什么？这个没有成功完成。显然它失败了，因为我们还没有在 Jenkins 服务器上安装 Docker。因此，让我们继续按照第 1 章“设置 Docker 开发环境”中的说明安装 Docker，并将其安装在我们的 Jenkins 服务器上。一旦您安装了它，还有一个额外的步骤是您想要做的，那就是将 Jenkins 用户添加到 Docker 组。以下是命令:
```
# Add the jenkins user to the docker group
sudo usermod -aG docker jenkins
# Then restart the jenkins service
sudo service jenkins restart
```
它非常像我们用来将我们的 docker 服务器的当前用户添加到 Docker 组的命令，因此没有必要对 Docker 命令使用`sudo`。好了，现在让我们回到我们的 Jenkins 服务器用户界面和我们的`hello-docker-test`作业，并再次单击立即构建按钮。
![](img/6ab728c9-55d5-4d7f-a12e-43f03623c137.png)
恭喜你！您有一台闪亮的新 Jenkins 服务器，经过适当配置，可以构建(测试、推送和部署)Docker 映像。干得好。尽管这是一项伟大的成就，但也有很多工作要做。你不希望有一个更简单的方法来设置一个新的 Jenkins 服务器吗？那么，你知道你已经有一套运行 Docker 的服务器了吗？您认为您可以使用该环境以更简单的方式支持您的 Jenkins 服务器吗？没错。让我们来看看。
# 参考
以下是安装 Jenkins 的网页:[https://jenkins.io/doc/book/installing/](https://jenkins.io/doc/book/installing/)。
# 设置文档化的 Jenkins 服务器
您刚刚看到了设置一个新的 Jenkins 服务器需要做多少工作。虽然这不是一项艰巨的工作，但在选择插件并登录开始工作之前，您至少需要完成五个步骤。并且本着游戏节目 *Name That Tune* 的精神，我可以分三步部署一个 Jenkins 服务器，前两步只是为了让我们的 Jenkins 数据能够在承载 Jenkins 服务器的 Docker 容器的生命周期之后持续存在。假设您已经按照第 1 章*中的说明设置并运行了一个 Docker 主机，设置了一个 Docker 开发环境*，我们希望为 Jenkins 服务器创建一个位置来存储它的数据。我们将创建一个文件夹并为其分配所有权。它将如下所示:
```
# Setup volume location to store Jenkins configuration
mkdir $HOME/jenkins_home
chown 1000 $HOME/jenkins_home
```
所有者`1000`是将用于 Docker 容器内的 jenkins 用户的用户 ID。
第三步是部署我们的容器。在向您展示该命令之前，让我先简单介绍一下要使用哪个容器映像。我包括一个链接，用于在 Docker 中心搜索 Jenkins 映像。如果你使用那个链接或者自己搜索，你会发现有很多选择。最初，你可能会考虑使用正式的 Jenkins 形象。然而，如果你浏览那个回购，你会发现我觉得有点奇怪，那就是官方形象被否决了。在 LTS 2.60.x 版之前，它已停止更新:
![](img/69a04bfa-7556-4017-9b3a-dad4edb474a7.png)
它建议使用在 jenkins/jenkins:lts Jenkins repo 中找到的映像，在撰写本文时，该映像是 2.149.x 版。这是我们将在以下示例中使用的映像。下面是我们将要用来部署 Jenkins 服务器容器的命令:
```
# Deploy a Jenkins server that is configured to build Docker images
docker container run -d -p 8080:8080 -p 50000:50000 \
-v $HOME/jenkins_home:/var/jenkins_home \
--name jenkins --rm jenkins/jenkins:lts
```
仔细查看这个命令，我们看到我们将容器作为守护进程启动(非交互)。我们看到我们正在打开主机上的两个端口，它们映射到容器上相同的端口号，具体为`8080`和`50000`。接下来，我们看到我们正在使用一个卷，它映射到我们之前创建的文件夹。这是 Jenkins 将存储其数据的地方，例如我们创建的作业及其执行状态。然后你会注意到我们正在给容器命名`jenkins`。之后，我们告诉 Docker 在容器退出时使用`--rm`标志将其移除。最后，我们告诉 Docker 我们想要运行什么映像。
当您运行这个容器时，给它一两分钟的时间启动并浏览到 Docker 主机上的端口`8080`，您将看到与将 Jenkins 部署为独立应用时相同的密码提示。接下来是创建第一个用户屏幕和默认插件配置屏幕。去试试吧。
由于我们已经为 Jenkins 数据创建了一个卷(写入`/var/jenkins_home`)，我们的 Jenkins 配置数据将保存到主机中，并将在容器本身的寿命结束后继续存在。当然，您可以使用存储驱动程序，将这些数据保存在比 Docker 主机更永久的地方，但是您已经有了这个想法，对吗？
唯一的问题是，无论是官方的 Jenkins 形象还是`jenkins/jenkins`形象都不支持创造将建立 Docker 形象的工作。由于这本书完全是关于 Docker 的，我们需要做的不仅仅是使用前面提到的映像运行我们的 Jenkins 服务器。别担心，我有个计划……继续读。
# 参考
*   dock hub search for Jenkins images:[https://hub . docker . com/search/？isaautomatic = 0&等值= 0&page = 1&pullcount = 0&q = Jenkins&star count = 0](https://hub.docker.com/search/?isAutomated=0&isOfficial=0&page=1&pullCount=0&q=jenkins&starCount=0)
*   官方 Jenkins 映像报告:[https://hub.docker.com/_/jenkins/](https://hub.docker.com/_/jenkins/)
*   Jenkins/Jenkins repo:[https://hub . docker . com/r/Jenkins/Jenkins/](https://hub.docker.com/r/jenkins/jenkins/)
# 在 Dockerized Jenkins 服务器内部构建 Docker 映像
好吧。现在您知道了如何将 Jenkins 部署为 Docker 容器，但是我们真的希望能够使用 Jenkins 来构建 Docker 映像，就像我们在 Jenkins 的独立部署中所做的那样。为此，我们可以部署相同的 Jenkins 映像，并在其中执行，安装 Docker，并可能使其工作，但我们不需要那么麻烦。我们不是第一批走这条路的先驱者。有几个 Docker 映像已经被创建来做我们正在寻找的事情。一个这样的形象就是`h1kkan/jenkins-docker:lts`。你可以通过以下*参考*部分的链接来了解它，但是现在只知道它是一个已经被设置为 Jenkins 服务器的映像，并且已经安装了 Docker。事实上，它还预装了 Ansible 和 AWSCLI，因此您可以使用它做更多的事情，而不仅仅是构建 Docker 映像。
首先，我们将在 Docker 主机上创建一个位置来装载 Docker 卷，以存储和保留 Jenkins 配置。如果您使用的 Docker 主机与上一节中使用的相同，您应该已经创建了文件夹，并将其所有权分配给 ID `1000`。如果没有，您可以使用以下命令:
```
# Setup volume location to store Jenkins configuration
mkdir $HOME/jenkins_home
chown 1000 $HOME/jenkins_home
```
此外，如果您还没有这样做，您可以使用`docker container stop jenkins`命令来停止(并删除)我们在上一节中创建的 Jenkins 容器，为我们新的和改进的 Jenkins 服务器扫清道路。当您准备好创建新容器时，可以使用以下命令:
```