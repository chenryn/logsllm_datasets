computing discrete logarithms. More precisely, in contrast
to idealizing both the group (explicitly) and the conversion
function (implicitly, see discussion above), we require generic
behaviour exclusively for an inner building block of the con-
version function.
Recall that the conversion functions of DSA and ECDSA
map group elements in G to ﬁeld elements in Zq without
preserving a visible algebraic structure (the only direct con-
6Switching from Brown’s model to handle-based generic
groups is challenging: the crucial part is ﬁnding a suitable
model for the conversion function.
nection between domain and range seems to be the fact
|G| = |Zq|, but as practical instantiations of f are not bijec-
tive, |f (G)| < |Zq|). Our intuition is that this transforma-
tion is at the heart of the schemes’ security. Our approach
is to model the algebraically disruptive behaviour of f simi-
larly as one models the disordered behavior of cryptographic
hash functions with random oracles, but conscientiously tak-
ing care that the relevant real-world properties of practical
conversion functions are accounted for (e.g., if applicable,
their invertibility). More concretely, we decompose conver-
sion function f into three independent functions as per
f = ψ ◦ Π ◦ ϕ
(conversion function) ,
(2)
where we require Π to be a bijection. The idea is to reﬂect
in ϕ the structure of f that involves only its domain and to
reﬂect in ψ the structure that involves only its range; the
component that is responsible for disrupting any algebraic
link between the domain and the range is modeled by Π. In
security proofs we will replace Π by a bijective random oracle
(an idealized public bijection that is accessible, in both di-
rections, via oracles; cryptographic constructions that build
on such objects include the Even-Mansour cipher and the
SHA3 hash function) while assuming standard model prop-
erties for G, H, ϕ, and ψ. We show that DSA and ECDSA
can naturally be obtained, together with the speciﬁc pe-
culiarities of their conversion functions, by correspondingly
instantiating ϕ and ψ. For instance, in the case of ECDSA,
function ϕ is such that any two elliptic curve points with the
same x-component will be mapped to the same element, and
function ψ is the “modulo q function” that implements the
characteristic bias of the range of f . Note that our choices
of ϕ and ψ are invertible, so that also the composed f is.
The assumption that the concrete functions Π found in
(EC)DSA behave like a bijective random oracle may seem
quite strong. Indeed, at a bit-level it certainly does not hold:
For the Π functions of DSA and ECDSA it is feasible to ﬁnd
inputs x such that x and Π(x) are related in some mean-
ingful way. Recall however that the algebraic semantics of
the domain and range of Π are crucially diﬀerent (Π per-
forms the context switch from group G to ﬁeld Zq). That
is, even if speciﬁc bit patterns travel through Π in unmodi-
ﬁed form, what changes is what these patterns mean. Thus,
when assessing the applicability of the bijective random or-
acle paradigm for Π this should be done in conjunction with
a close study of its environment, i.e., functions ϕ and ψ
and their respective domains and co-domains. In particu-
lar for the settings of DSA and ECDSA we believe that our
positive results obtained by idealizing Π serve as a strong
indication for the practical security of the schemes. An al-
ternative, more conservative interpretation of our ﬁndings
would be that they give cryptanalysis a clear direction of
persue: If, despite our theorems, DSA and ECDSA turn out
to be insecure, then the problem is deﬁnitely the interplay of
the binary representations of elements of G and Zq. Let us
ﬁnally point out that a bijective random oracle component
implicitly also appears in Brown’s analyses (see Appendix A
for details).
Proving the security of GenDSA.
Consider GenDSA with conversion function f = ψ ◦ Π ◦ ϕ
from (2) and assume Π is a bijective random oracle. We
prove the existential unforgeability of GenDSA in a mod-
ular way. First, in Section 4.1, we show that the notions
1653of existential unforgeability and key-only unforgeability (no
signing oracle available) are equivalent for GenDSA, assum-
ing H is collision resistant and ϕ is semi-injective.7 Next, in
Section 4.2, using the forking lemma for Π we show that the
hardness of DLP implies key-only unforgeability of GenDSA,
assuming again semi-injectiveness for ϕ, and ψ-relative di-
vision resistance for H (a non-standard yet standard model
security property related to ψ, cf. Deﬁnition 5). The latter
property in particular holds if H is modeled as a random or-
acle; further, for the speciﬁc functions ψ used to instantiate
DSA and ECDSA it is implied by plausible standard-model
assumptions on H. As a corollary, the named results im-
ply the existential unforgeability of DSA and ECDSA. We
note that our reductions are not tight but lose a factor of
about Q (the number of bijective random oracle queries)
and square the success probabilities. This is standard for
forking lemma based analyses and correspondingly holds for
most other DLP-based signatures, e.g., Schnorr.
Extension of our results in the full version.
Recall that the results of Brown [5, 3] can be stretched to
imply the strong unforgeability of ECDSA, a property that
does not hold in practice. We highlight that our arguments
immediately fail when trying to stretch them in a similar
way (we understand this as supporting our approach). In
fact, by pin-pointing where exactly the corresponding proof
attempt fails, as a side result we are able to characterize the
strong unforgeability conditions of ECDSA and can conﬁrm,
for the ﬁrst time on formal grounds, the common conjecture
that the malleability mentioned in Footnote 4 is the only
one of ECDSA. In contrast to ECDSA, for DSA we establish
strong unforgeability.
In the full version we further propose a more general
scheme called GenericElGamal that also covers the standard-
ized signature schemes SM2 [10], GOST [8], and ECGOST [8].
We show that our proof techniques apply also there and es-
tablish corresponding unforgeability results. To the best of
our knowledge there is no previous security proof for the
GOST digital signature standard. For SM2, the only known
security evaluation is in the generic group model [27].
2. PRELIMINARIES
We denote random sampling from a ﬁnite set A according
to the uniform distribution with a ←$ A. We use symbol
←$ also for assignments from randomized algorithms, while
we denote assignments from deterministic algorithms and
calculations with ←. If q is a prime number, we write Zq for
the ﬁeld Z/qZ and assume the canonic representation of its
elements as a natural number in the interval [0 .. q − 1]. That
is, an element a ∈ Zq is invertible iﬀ a (cid:54)= 0. All algorithms
are randomized unless explicitly noted.
Most of our security deﬁnitions and proofs use code-based
games. Such a game G consists of an Init procedure, one
or more procedures to respond to adversary oracle queries,
and a Fin procedure. G is executed with an adversary A
as follows: Init is always run ﬁrst and its outputs are the
inputs to A. Next, the oracle queries of A are answered by
the corresponding procedures of G. Finally, A calls Fin and
terminates. Whenever the Stop command is invoked in a
7A function ϕ is semi-injective if it is 1-to-1 or 2-to-1, and for
any two group elements X, Y that collide under ϕ it holds
that Y ∈ {X, X−1}.
game procedure, its argument is considered the output of
the game (and the execution of the adversary is halted). By
GA ⇒ out we denote the event that G executed with A
invokes Stop with argument out. At the beginning of the
game, integer variables are initialized to 0 and set variables
to ∅. When using symbols like ⊥ we mean special symbols
that do not appear as elements of sets.
In games and reductions, when realizing a bijective ran-
dom oracle Π with domain A and range B via lazy sampling,
we consider Π interchangeably a partial function Π : A →
B, a partial function Π−1 : B → A, and a relation Π ⊆
A × B.
In particular, for (α, β) ∈ A × B we denote with
Π ← Π ∪ {(α, β)} the operation that ‘programs’ Π such
that Π(α) = β and Π−1(β) = α. We write Dom(Π) and
Rng(Π) for the domain and range of Π, i.e., for the sets
{α ∈ A | ∃β : (α, β) ∈ Π} and {β ∈ B | ∃α : (α, β) ∈ Π},
respectively. We write (α,·) ∈ Π and (·, β) ∈ Π shorthand
for the conditions α ∈ Dom(Π) and β ∈ Rng(Π).
2.1 Cyclic groups
Definition 1
(Discrete logarithm). Let (G, g, q) be
a prime-order group, i.e., G = (cid:104)g(cid:105) is a cyclic group of prime-
order q = |G|. We often write just G instead of (G, g, q). We
write 1 for the neutral element and let G∗ = G \ {1}. An
inverter algorithm I is said to (τ, ε)-break the discrete loga-
rithm problem (DLP) in G if it runs in time at most τ and
achieves inversion advantage ε = Pr[x ←$ Z∗
q ; x(cid:48) ←$ I(gx) :
x(cid:48) = x].
Definition 2
(Semi-Injective Function). Let G be
a prime-order group and A a set. A function ϕ : G∗ → A is
called semi-injective if (a) its range ϕ(G∗) ⊆ A is eﬃciently
decidable and (b) it is either injective or 2-to-1 with ϕ(X) =
ϕ(Y ) always implying Y ∈ {X, X−1}.
2.2 Signature schemes
Definition 3
(Signature scheme).
A signature
scheme consists of algorithms KGen,Sign,Verify such that: al-
gorithm KGen generates a signing key sk and a veriﬁcation
key pk; on input a signing key sk and a message m algorithm
Sign generates a signature σ or the failure indicator ⊥; on
input a veriﬁcation key pk, a message m, and a candidate
signature σ, deterministic algorithm Verify outputs 0 or 1 to
indicate rejection and acceptance, respectively.
A signature scheme is correct if for all sk, pk, and m, if
Sign(sk, m) outputs a signature then Verify accepts it.
Definition 4
(Unforgeability).
For a signature
scheme, an algorithm F that interacts in the CMA game (cf.
Figure 1), runs in at most time τ , poses at most Qs queries
to the Sign oracle, and has a forging advantage of ε =
Pr[CMAF ⇒ 1], is said to (τ, Qs, ε)-break the scheme’s exis-
tential unforgeability under chosen-message attack (euf-cma).
Forgers F that do not query the signing oracle, i.e., have
Qs = 0, are referred to as key-only forgers. We denote the
corresponding variant of the CMA game as KO.
If the signature scheme is speciﬁed in relation to some
idealized primitive that is accessed via oracles, we also an-
notate the maximum number of corresponding queries; for
instance, in the random oracle model for a hash function H
we use the expression (τ, Qs, QH , ε). We always assume that
forgers that output a forgery attempt (m∗, σ∗) pose a priori
all (public) queries that the veriﬁcation of σ∗ will require.
1654Procedure Init
00 (sk, pk) ←$ KGen
01 Return pk
Procedure Sign(m)
02 σ ←$ Sign(sk, m)
03 L ← L ∪ {(m, σ)}
04 Return σ
Procedure Fin(m∗, σ∗)
05 If (m∗,·) ∈ L: Stop with 0
06 If Verify(pk, m∗, σ∗) = 0:
07
08 Stop with 1
Stop with 0
Figure 1: Game CMA for modeling the existential
unforgeability of signatures. We refer to the key-
only variant of CMA (where no Sign queries can be
posed) as KO.
2.3 Hash functions
For a domain D and a prime q we consider implicitly keyed
hash functions H : D → Zq. Recall that practical hash func-
tions like MD5 and SHA1 are not explicitly keyed, but in-
stead have an implicit key k ∈ K (the initialization vector)
chosen and ﬁxed by their designer. The experiments of the
up-coming security deﬁnitions should be understood as im-
plicitly ﬁrst picking a random key k and giving it to the
adversary.
The following deﬁnition captures a security property of H
relative to a function ψ; it will be our main security require-
ment on H in the security analysis of GenDSA.
Definition 5
(ψ-DR). Let H : D → Zq be a hash func-
tion, B a set, and ψ : B → Zq a function. Let B∗ = ψ−1(Z∗
q ).
We say A = (A1,A2) (τψdr, εψdr)-breaks the ψ-relative divi-
sion resistance (ψ-DR) of H if it runs in at most time τψdr
and has an advantage of εψdr = Pr[β, β(cid:48) ←$ B∗; (m, Γ) ←$
A1(β); m(cid:48) ←$ A2(Γ, β(cid:48)) : H(m)/ψ(β) = H(m(cid:48))/ψ(β(cid:48))] .
Here, Γ is some arbitrary state information passed from A1
to A2.
We stress that in this deﬁnition A is not required to output
m (cid:54)= m(cid:48). We show in the full version of this paper that
in the case of DSA this notion is implied by preimage and
zero resistance (cf. [3]) of H. In the case of ECDSA it is
implied by a notion called high entropy division resistance,
meaning for any t, t(cid:48) sampled according to a distribution
with high entropy, the adversary cannot ﬁnd m, m(cid:48) such
that H(m)/t = H(m(cid:48))/t(cid:48).
2.4 The forking lemma
We reproduce details of the General Forking Lemma [1],
but adapt notation to the discrete logarithm setting.
Lemma 1
(General Forking Lemma). Fix a group
(G, g, q). Let Q ≥ 1 be an integer and B a non-empty ﬁ-
nite set. Consider a randomized algorithm A that takes as
input an element X ∈ G∗ and a sequence β1, . . . , βQ ∈ B,
and either outputs a pair (j, Σ), where j ∈ [1 .. Q] and Σ
is an arbitrary value, or aborts outputting a special sym-
bol ⊥. Associate to A the forking algorithm ForkA as spec-
iﬁed in Figure 2 that takes an element X ∈ G∗ and either
outputs a pair (Σ, Σ(cid:48)) or aborts with ⊥. Deﬁne the accept-
ing probability of A as acc := Pr[X ←$ G∗; β1, . . . , βQ ←$
B; A(X, β1, . . . , βQ) (cid:59) ⊥] and the probability of successful
forking as frk := Pr[X ←$ G∗; ForkA(X) (cid:59) ⊥]. Then we
have frk ≥ acc (acc/Q − 1/|B|).
// If A aborts outputting ⊥ then also ForkA aborts
ForkA(X)
00 Pick random coins ρ for A
01 Pick β1, . . . , βQ ←$ B
02 (j, Σ) ← A(X, β1, . . . , βQ; ρ)
03
04 Pick β(cid:48)
05 Abort if β(cid:48)
06 (j(cid:48), Σ(cid:48)) ← A(X, β1, . . . , βj−1, β(cid:48)
07
08 Abort if j (cid:54)= j(cid:48)
09 Output (Σ, Σ(cid:48))
j, . . . , β(cid:48)
j = βj
Q ←$ B
// If A aborts outputting ⊥ then also ForkA aborts
j, . . . , β(cid:48)