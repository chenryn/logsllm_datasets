                recordXtime = recordRestorePointData->rp_time;  
                strncpy(recordRPName, recordRestorePointData->rp_name, MAXFNAMELEN);  
        }  
```  
6\. 同一个时间点可能有多个COMMIT, ABORT, 或者pg_create_restore_point()创建的还原点;  
7\. 因此, 结合以上描述 :   
当设置了recovery_target_inclusive=true时, 将APPLY这个时间点上所有的COMMIT, ABORT或还原点的XlogRecord.  
当设置了recovery_target_inclusive=false时, 将不会APPLY这个时间点上的任何COMMIT, ABORT或还原点的XlogRecord.  
换句话说, 只有当recovery_target_time设置的时间点上有COMMIT,ABORT或者还原点时, recovery_target_inclusive才有实际意义.  
否则肯定是一直APPLY到下一次出现COMMIT,ABORT或者还原点, 并且该XlogRecord不APPLY.  
8\. 时间的格式为TimestampTz, 例如 : '2013-02-04 23:25:54.922891+08'  
## 测试1   
recovery.conf  
```  
restore_command = 'cp /data05/ocz/pgbak/arch/%f %p'  
recovery_target_time = '2013-02-04 15:30:44.091741'  
recovery_target_inclusive = false  
recovery_target_timeline = 'latest'  
pause_at_recovery_target = false  
```  
分析 :   
2013-02-04 15:30:44.091741这个时间点如果有ABORT, COMMIT, 或者还原点的XlogRecord信息. 那么因为设置了recovery_target_inclusive = false. 所以立刻停止.  
这个时间点如果没有ABORT, COMMIT, 或者还原点的XlogRecord信息. 那么在APPLY到下一个ABORT, COMMIT, 或者还原点的XlogRecord信息时停止。  
本例应该是停止在第一个还原点的XlogRecord位置. 并且不APPLY该XlogRecord数据块.  
启动后,  
```  
postgres=# create extension pageinspect;  
CREATE EXTENSION  
postgres=# select * from heap_page_items(get_raw_page('a',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1694 |      0 |        0 | (0,1)  |           2 |       2048 |     24 |        |        
  2 |   8112 |        1 |     40 |   1694 |      0 |        0 | (0,2)  |           2 |       2048 |     24 |        |        
(2 rows)  
postgres=# select * from heap_page_items(get_raw_page('b',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1695 |      0 |        0 | (0,1)  |           2 |       2048 |     24 |        |        
(1 row)  
postgres=# select * from heap_page_items(get_raw_page('c',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1696 |      0 |        0 | (0,1)  |           2 |       2048 |     24 |        |        
(1 row)  
postgres=# select * from a;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from b;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from c;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from heap_page_items(get_raw_page('a',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1694 |      0 |        0 | (0,1)  |           2 |       2560 |     24 |        |        
  2 |   8112 |        1 |     40 |   1694 |      0 |        0 | (0,2)  |           2 |       2560 |     24 |        |        
(2 rows)  
postgres=# select * from heap_page_items(get_raw_page('b',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1695 |      0 |        0 | (0,1)  |           2 |       2560 |     24 |        |        
(1 row)  
postgres=# select * from heap_page_items(get_raw_page('c',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1696 |      0 |        0 | (0,1)  |           2 |       2560 |     24 |        |        
(1 row)  
```  
## 测试2  
recovery.conf  
```  
restore_command = 'cp /data05/ocz/pgbak/arch/%f %p'  
recovery_target_time = '2013-02-04 15:32:00.226317'  
recovery_target_inclusive = false  
recovery_target_timeline = 'latest'  
pause_at_recovery_target = false  
```  
分析 :   
本例应该是停止在第2个还原点的XlogRecord位置. 并且不APPLY该XlogRecord数据块.  
启动后,  
```  
postgres=# create extension pageinspect;  
CREATE EXTENSION  
postgres=# select * from heap_page_items(get_raw_page('a',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1694 |      0 |        0 | (0,1)  |           2 |       2048 |     24 |        |        
  2 |   8112 |        1 |     40 |   1694 |      0 |        0 | (0,2)  |           2 |       2048 |     24 |        |        
  3 |   8072 |        1 |     40 |   1694 |      0 |        0 | (0,3)  |           2 |       2048 |     24 |        |        
(3 rows)  
postgres=# select * from heap_page_items(get_raw_page('b',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1695 |      0 |        0 | (0,1)  |           2 |       2048 |     24 |        |        
(1 row)  
postgres=# select * from heap_page_items(get_raw_page('c',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1696 |      0 |        0 | (0,1)  |           2 |       2048 |     24 |        |        
  2 |   8112 |        1 |     40 |   1696 |      0 |        1 | (0,2)  |           2 |       2048 |     24 |        |        
(2 rows)  
postgres=# select * from a;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from b;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from c;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from heap_page_items(get_raw_page('a',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1694 |      0 |        0 | (0,1)  |           2 |       2560 |     24 |        |        
  2 |   8112 |        1 |     40 |   1694 |      0 |        0 | (0,2)  |           2 |       2560 |     24 |        |        
  3 |   8072 |        1 |     40 |   1694 |      0 |        0 | (0,3)  |           2 |       2560 |     24 |        |        
(3 rows)  
postgres=# select * from heap_page_items(get_raw_page('b',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1695 |      0 |        0 | (0,1)  |           2 |       2560 |     24 |        |        
(1 row)  
postgres=# select * from heap_page_items(get_raw_page('c',0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     40 |   1696 |      0 |        0 | (0,1)  |           2 |       2560 |     24 |        |        
  2 |   8112 |        1 |     40 |   1696 |      0 |        1 | (0,2)  |           2 |       2560 |     24 |        |        
(2 rows)  
```  
## pause_at_recovery_target的使用场景  
上一篇提到了使用pause_at_recovery_target后recovery_target_inclusive将不起作用.  
原因是先判断是否设置了pause, 如下 :   
src/backend/access/transam/xlog.c  
```  
				/*  
                                 * Have we reached our recovery target?  
                                 */  
                                if (recoveryStopsHere(record, &recoveryApply))  
                                {  
                                        if (recoveryPauseAtTarget)  
                                        {  
                                                SetRecoveryPause(true);  
                                                recoveryPausesHere();  
                                        }  
                                        reachedStopPoint = true;        /* see below */  
                                        recoveryContinue = false;  
                                        /* Exit loop if we reached non-inclusive recovery target */  
                                        if (!recoveryApply)  
                                                break;  
                                }  
```  
验证测试   
选择上一篇的第二个还原点, recovery_target_inclusive = true, pause_at_recovery_target = true .  
recovery.conf  
```  
restore_command = 'cp /data05/ocz/pgbak/arch/%f %p'  
recovery_target_xid = '1696'  
recovery_target_inclusive = true  
recovery_target_timeline = 'latest'  
pause_at_recovery_target = true  
```  
启动后,   
```  
digoal@db-172-16-3-150-> psql  
psql (9.2.1)  
Type "help" for help.  
postgres=# create extension pageinspect;  
ERROR:  cannot execute CREATE EXTENSION in a read-only transaction  
postgres=# select * from a;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from b;  
 id | crt_time   