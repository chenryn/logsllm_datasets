    次数需要一边观察服务器负荷情况一边进行调整，最后选择一个合适的值。
[9]{.注释编号下} 
[10]{.注释编号下} 这个数字是 2010 年象棋电脑程序"阿迦罗
2010"战胜日本女棋王时的 CPU 的核数。
[11]{.注释编号下} 
[12]{.注释编号下} 
[13]{.注释编号下} 根据 RainbowCrack Project
的测试数据，破解一个密码最长也只需要 202 秒。
[14]{.注释编号下} 关于 stretching 方法的更多内容请参考 *Cryptography
Engineering* \[1\]。
> **专栏：密码泄露途径**
>
> 密码数据泄漏途径很多，除了前面我们已经介绍的 SQL
> 注入攻击、密码尝试、社会化攻击、钓鱼攻击等，这里我们再介绍一下其他可能造成密码泄露的行为。
>
> -   **备份数据被盗、丢失**
>
>     备份数据里可能会包含密码等机密信息，如果这些媒体（硬盘、磁带）丢失或者流出到外部的话，就会造成密码泄露。
>
> -   **硬盘等被盗、丢失**
>
>     如果服务器、硬盘等从数据中心被偷走的话，也会造成信息泄漏。虽然机器从机房被偷走有点令人难以置信，但是硬盘被盗的先例在现实世界中确实是发生过的。针对硬盘被盗的情况，之前介绍过的
>     TDE 型数据库是一种很好的解决对策。
>
> -   **内部操作人员将数据带出**
>
>     在数据中心机房或者办公室里的内部操作人员，可以通过数据库管理工具等把数据抽出，再用
>     USB
>     或者光盘之类的媒体带到公司外部，导致信息泄露。此类事件频有发生，媒体中也经常报道。
### **5.1.4 自动登录** {#text00000.html#nav_point_64 line-num="553 554"}
现在很多 Web
应用都会在登录页面提供"自动登录"或者"保持登录状态"这样的复选框（如图
5-9），如果用户选中自动登录，那么即使重启浏览器，系统也会自动进行登录，而不必再次输入用户名和密码。
![{%}](Image00195.jpg)
**图 5-9 自动登录复选框示例**
从系统安全的角度考虑，一直以来大家都认为自动登录是对安全不利的。比如会话持续时间变长的话，就会增加受到类似
XSS 等被动攻击的概率。
但是笔者认为，根据目前网站的现状及自身的特点，是可以选择提供自动登录功能的。其原因有以下几点。
-   随着 Web 应用的深入普及，需要保持登录状态的服务增加了（比如 Google
    等）
-   频繁的登录、退出操作，容易迫使用户选择更加简单的密码，反而使得系统的危险系数增加
下面我们说一下怎么才能安全地实现自动登录功能。但是在这之前，作为反例，我们先看看自动登录中一些比较危险的实现方式。
#### **危险的实现方式示例** {line-num="570 571"}
下面是一个实现方式不正确的网站的例子，它把用户名和自动登录标识都保存到
Cookie 里（例子中 Expires 的实际日期是在 30 天之后）了。
    Set-Cookie: user=yamada
    ; expires=Wed, 27-Oct-2010 06:20:55 GMT
    Set-Cookie: autologin=true
    ; expires=Wed, 27-Oct-2010 06:20:55 GMT
在这个例子中用户名和自动登录标识都用明文保存在 Cookie
中，但是因为用户本人可以修改 Cookie，加入把 user=yamada 篡改为
user=tanaka 的话，就可以冒充别人登录到系统里面了。
虽然这个例子看起来很极端，但是现实中确实是存在着具有类似安全隐患的 Web
网站或者软件的。
下面的方法虽然针对上面的问题作了改良，但是仍然算不上一个好的方案。
    Set-Cookie: user=yamada
    ; expires=Wed, 27-Oct-2010 06:20:55 GMT
    Set-Cookie: passwd=5x23AwpL
    ; expires=Wed, 27-Oct-2010 06:20:55 GMT
    Set-Cookie: autologin=true
    ; expires=Wed, 27-Oct-2010 06:20:55 GMT
这里虽然增加了对密码的验证，使得攻击者不能很轻易地通过上面的方法来冒充别人。但是如果攻击者知道了被攻击用户的密码的话，完全可以堂堂正正地从登录页面登录系统了，就没有必要攻击自动登录功能了。
而且一旦在 Cookie 里存放了敏感信息的话，那么一旦网站出现 XSS
漏洞的时候，就存在密码被盗取的可能性，从而可能带来更大的损失。因此这种方法仍然算不上是理想的实现方式。
下面开始我们介绍如何来实现一个安全的自动登录功能。
#### **安全的自动登录实现方式** {line-num="597 598"}
要实现保持用户登录状态的功能，可以采用下面的三种方式之一。
-   延长会话有效期
-   使用令牌（Token）
-   使用认证票（Ticket）
下面按顺序介绍一下这三种方法。
-   **延长会话有效期**
    如果所用的编程语言或者框架支持设置 Cookie 的
    Expires（过期时间）属性的话，这种方法则最简单。
    如果使用的是 PHP 的话，可以使用以下方法实现延长会话有效期。
    -   通过使用 `session_set_cookie_params` 方法设置 Cookie 的 Expires
        属性值
    -   在文件 php.ini 中将 session.gc_maxlifetime
        设置为一周左右（默认为 24 分钟）
    但是这样做的话不想保持登录状态的用户的会话过期时间也会被延长到一周，会增加这些不想使用自动登录功能的用户受到
    XSS 等被动攻击的概率。
    解决这个问题，可以在应用程序里限制会话过期时间。如以下的脚本解说。
    首先是 php.ini
    文件中进行一些设置的例子，下面这个设置是保持会话的有效期至少为一星期。[15]{.注释编号}
        session.gc_probability = 1
        session.gc_divisor = 1000        604800 ＝ 7*24*60*60
        session.gc_maxlifetime = 604800──┘
    之后，是在验证用户密码成功后设置登录信息的地方，加入如下逻辑。这里假设用户选择了自动登录的话，浏览器会将参数
    `autologin` 赋值为 `on` 后传给服务端。
    > **代码清单 /51/51-002.php**
    ``` 代码无行号
        login successfulnext
    ```
    在这个例子里自动登录后会依次进行下面的处理。
    -   会话超时时间设为 1 星期（默认为 30 分钟）
    -   将含有会话 ID 的 Cookie 的 Expires 属性设置为 1 星期后
    不管是否是自动登录，都会执行下面这两步
    -   将会话超时时长保存到 `$_SESSION['timeout']` 中
    -   将会话超时时刻保存到 `$_SESSION['expires']` 中
    下面是判断用户是否处于登录状态的代码。下面这部也会确认之前设置的会话超时相关的属性值。
    > **代码清单 /51/51-003.php**
    ``` 代码无行号
         **代码清单 自动登录令牌创建过程（伪代码）**
        ``` 代码无行号
        function set_auth_token($id, $expires) {
          do {
            $token = 随机数 ;
            准备查询 ('insert into autologin values(?, ?, ?)');
            执行查询 ($token, $id, $expires);
            if ( 查询成功 )
              return $token;
          } while( 数据重复错误 );
          die(' 访问数据库错误 ');
        }
        $timeout = 7 * 24 * 60 * 60;  // 认证的有效期（1 周）
        $expires = time() + $timeout;  // 认证的有效期
        $token = set_auth_token($id, $expires);  // 设置令牌
        setcookie('token', $token, $expires);  // 将令牌的值保存到 Cookie
        ```
        `set_auth_token` 方法用来生成令牌，输入参数为用户 ID
        和令牌的有效期间，生成令牌的值后将这些信息保存到数据库中，并返回生成的令牌值给调用函数。如果生成令牌值的过程中发生了值重复问题，则需要继续尝试直到生成不重复的令牌值为止。
        在上面的示例代码里最后，也展示了如何调用生成令牌函数。这里将表示自动登录的有效期参数设为一周后调用
        `set_auth_token` ，并将返回的令牌保存到了 Cookie。
    -   **判断用户的登录状态和执行自动登录**
        接着我们再看看如何实现判断用户是否处在登录中状态，以及如何实现自动登录。处理逻辑见下面的伪代码。
        > **代码清单 判断用户是否已登录以及如何实现自动登录（伪代码）**
        ``` 代码无行号
        function check_auth_token($token) {
          准备查询 ('select * from autologin where token = ?');
          执行查询 ($token);
          取得 $id 和有效期 ;
          if ( 不存在相应记录 )
            return false;
          if ( 有效期 < 现在时刻 ) {
            放弃旧认证令牌 ;
            return false;
          }
          return $id;