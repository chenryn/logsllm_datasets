# RacketStore: Measuring ASO Deception in Google Play via Mobile and App Usage

**Authors:**
- Nestor Hernandez, FIU, Miami, USA (Email: [PI:EMAIL])
- Bogdan Carbunar, FIU, Miami, USA (Email: [PI:EMAIL])
- Ruben Recabarren, FIU, Miami, USA (Email: [PI:EMAIL])
- Syed Ishtiaque Ahmed, University of Toronto, Toronto, Canada (Email: [PI:EMAIL])

## Abstract
Online app search optimization (ASO) platforms that provide bulk installs and fake reviews for paying app developers to fraudulently boost their search rank in app stores have been shown to employ diverse and complex strategies that successfully evade state-of-the-art detection methods. In this paper, we introduce RacketStore, a platform to collect data from Android devices of participating ASO providers and regular users on their interactions with apps installed from the Google Play Store. We present measurements from a study involving 943 installs of RacketStore on 803 unique devices controlled by ASO providers and regular users, consisting of 58,362,249 data snapshots collected from these devices, 12,341 installed apps, and 110,511,637 Google Play reviews. Our analysis reveals significant differences between ASO providers and regular users in terms of the number and types of user accounts registered on their devices, the number of apps they review, and the intervals between the installation times of apps and their review times. Leveraging these insights, we introduce features that model the usage of apps and devices, and show that they can train supervised learning algorithms to detect paid app installs and fake reviews with an F1-measure of 99.72% (AUC above 0.99), and detect devices controlled by ASO providers with an F1-measure of 95.29% (AUC = 0.95). We also discuss the costs associated with evading detection by our classifiers and the potential for app stores to use our approach to detect ASO work while preserving privacy.

## CCS Concepts
- Security and Privacy → Social Network Security and Privacy; Social Aspects of Security and Privacy

## Keywords
App Store Optimization, Crowdturfing, Fake Review, Opinion Spam

## 1. Introduction
The global mobile application market is worth hundreds of billions of USD and is expected to grow by more than 10% per year until 2027 [22]. To stand out among millions of apps hosted in app stores [8, 24] and capture a share of this market, many app developers resort to app search optimization (ASO) to increase the rank of their apps during searches. ASO platforms use various techniques to achieve this, including providing retention installs [12] and posting fake reviews [3, 7]. Such activities are illegal in countries like the US [1], Canada [14], Australia [77], and are banned in the EU [16]. They also violate the terms of service of app stores [2, 11] and can influence users to install and purchase low-quality apps or even malware [46, 68, 80].

Identifying ASO-promoted apps and the accounts from which they are promoted allows app stores to filter fake reviews and ratings, generate more accurate install counts and aggregate rating values, and compute more accurate search ranks for apps. This, in turn, enables users to make better-informed app-installation decisions. A key to achieving this is to build an accurate understanding of the behaviors and strategies employed by fraudulent ASO workers.

In previous work, Farooqi et al. [38] showed that incentivized app install platforms (IIP) can provide thousands of installs that successfully evade Google's defenses. Rahman et al. [67] reported a variety of detection-avoidance techniques employed by organizations specializing in retention installs and fake reviews. These techniques include crowdsourcing ASO work to organic workers who use their personal devices to conceal ASO work among everyday activities.

Identifying organic ASO activities is challenging due to the ability of such workers to evade existing detection solutions, e.g., those leveraging lockstep behaviors [32, 43, 51, 72, 73, 78, 85, 86, 89, 92, 93] or review bursts [27, 28, 35, 39, 40, 42, 44, 45, 50–53, 53, 57–59, 65, 66, 84, 87, 88, 92].

To address this, we developed RacketStore, a platform to collect and analyze app and device-use data from consenting ASO workers and regular users. The RacketStore mobile app periodically collects data from the devices where it is installed, such as the foreground app and the list of installed apps with 5s granularity, and the types and number of registered accounts with 2 min granularity. The RacketStore server aggregates this information with data collected from the Play Store and VirusTotal [15]. RacketStore first discloses the types of data it collects and only collects data after receiving participant consent (§ 4.1 and Appendix D).

We present measurements from a study of ASO workers and regular users recruited to keep the RacketStore app installed on their devices for at least two days. In total, RacketStore was installed 943 times on 803 unique devices: 580 devices controlled by ASO workers recruited from Facebook groups specializing in ASO work, and 223 devices of regular Android users recruited through ads purchased on Instagram. We collected 58,362,249 snapshots from the participating devices, including 12,341 installed and in-use apps and 110,511,637 reviews from the Play Store.

Our findings reveal that ASO work continues to be successful and evades app store detection. The worker-controlled devices of participants in our studies had 10,310 Gmail accounts registered on them, and at the time of writing, Google Play was still displaying 217,041 reviews posted from them.

Measurements indicate that many ASO worker devices exhibit organic-indicative behaviors, similar to those of regular devices, in terms of app churn (daily installed and uninstalled apps), permissions granted, the total number of installed apps, stopped apps, or daily used apps. However, significant differences were found between regular user and worker-controlled devices in terms of the number and types of registered accounts, the number of apps reviewed, and the intervals between the installation times of apps and their review times. This suggests that the constraints associated with ASO work provide opportunities to detect even organic workers.

## 2. System Model
We consider the ecosystem depicted in Figure 2. The main components are:

### The App Store and Consumers
Our work focuses on the Google Play app store [6]. Consumers use the pre-installed Play Store app to search and install other apps on their Android devices. A consumer can register multiple accounts on an Android device, including Gmail and other services, and post reviews for an app from all the Gmail accounts registered on the device where the app was installed.

### App Developers
Developers upload their apps to the Play Store [6]. To monetize these apps while facing intense competition, they need to achieve top-5 rank in keyword searches [25]. Key factors influencing search rank include the number of installs and reviews, and the aggregate rating of the app. For example, 80% of consumers check reviews and ratings before installing an app [34], and a 1-star increase in aggregate rating can increase app store conversion by up to 280% [83].

### ASO Organizations
Many developers hire specialized app search optimization (ASO) organizations to improve the search rank of their apps. While some ASO organizations are white hat [25], promoting apps through legitimate means, others engage in fraudulent practices such as providing bulk installs and fake reviews.

### RacketStore Platform
RacketStore consists of a mobile app to be installed by study participants on their Android devices, a web app to collect and validate data from the installed app, and database servers to store the data (see Figure 3).

#### RacketStore Mobile App
The RacketStore app is developed for Android to help investigate fraudulent and honest behaviors of Google services users. Upon first start-up, the app displays a consent form (see Appendix C for excerpts) which the participant needs to approve. To comply with Google's anti-abuse policy [23], the app asks for explicit consent to our privacy policy (Figure 18(a) in Appendix C) and shows an in-app disclosure of the data being collected (Figure 18(b)).

The sign-in interface asks the participant to enter a unique participant ID, a 6-digit code sent upon recruitment (§ 4) through a different channel, such as email or Facebook Messenger. This code prevents non-recruited users from using RacketStore and allows us to match data and send payments to the correct participants. The passcode is given only after the user has agreed to participate in the study and the data collection process. RacketStore does not collect any information if the user has not entered the 6-digit passcode.

Upon sign-in, the app generates an install ID, a 10-digit random identifier.

#### Initial Data Collector Module
This module operates once the app is installed and the user has signed in. It retrieves the list of other apps installed on the device and device information, including Android API version, device model, manufacturer, and Android ID [21].

#### Snapshot Collector Modules
Following the installation of the RacketStore app, the snapshot collector modules periodically collect information with two levels of granularity: slow and fast.

- **Slow Snapshot Collector**: Triggered every 2 minutes, it collects:
  - Identifiers: Install ID, participant ID, and Android ID.
  - Registered accounts: Accounts registered on the device across different services.
  - Device status: Save mode status (on/off).
  - Stopped apps: List of stopped apps.

- **Fast Snapshot Collector**: Activated every 5 seconds, it collects:
  - Identifiers: Install ID and participant ID.
  - Foreground app: Currently running app on the device.
  - Device status: Screen status (on/off) and battery level.
  - App install/uninstall events: Deltas between the current and previously reported sets of installed apps. For each installed app, it collects the install time, last update time, required permissions, and MD5 hash of the app APK file.

RacketStore requires participants to explicitly grant two permissions: PACKAGE_USAGE_STATS and GET_ACCOUNTS [9]. Participants can accept any subset of the requested permissions. If they do not grant a permission, the corresponding data is not collected. RacketStore also uses install-time permissions (GET_TASKS, RECEIVE_BOOT_COMPLETED, INTERNET, ACCESS_NETWORK_STATE, and others) to function properly.

## 3. Contributions
- **RacketStore**: We developed a platform to collect information about the interaction of users with their Android devices and the apps installed therein, with user consent. RacketStore was compatible with 298 device models from 28 Android manufacturers [§ 3]. The RacketStore code is available at [10].
- **App and Device Use Measurements**: We present measurements from a study of the device and app use of regular users and ground truth ASO workers, through a deployment of RacketStore on 803 unique devices [§ 4]. We built datasets of app and device usage, integrated with Google Play reviews and VirusTotal analysis. We present findings from this data in the context of feedback obtained from participants during a follow-up discussion [§ 6].
- **Fraud Detector and Classifier**: We introduce novel features that model the user interaction with devices and installed apps and use them to train classifiers to detect ASO activities [§ 7] and worker-controlled devices [§ 8]. We report differences in app and device engagement for workers and regular users that explain the accuracy of the classifiers.

## 4. Conclusion
In this paper, we introduced RacketStore, a platform to measure and compare the device and app usage of ASO workers and regular users. Our findings revealed significant differences in the behavior of ASO workers and regular users, which we leveraged to develop features and train classifiers to detect paid app installs and fake reviews with high accuracy. We also discussed the potential for app stores to use our approach to detect ASO work while preserving user privacy.