operating systems.
■    VBS-based enclaves A security enclave is an isolated region of
memory within the address space of a user mode process. The enclave
memory region is not accessible even to higher privilege levels. The
original implementation of this technology was using hardware
facilities to properly encrypt memory belonging to a process. A VBS-
based enclave is a secure enclave whose isolation guarantees are
provided using VSM.
■    Kernel Control Flow Guard VSM, when HVCI is enabled, provides
Control Flow Guard (CFG) to each kernel module loaded in the
normal world (and to the NT kernel itself). Kernel mode software
running in normal world has read-only access to the bitmap, so an
exploit can’t potentially modify it. Thanks to this reason, kernel CFG
in Windows is also known as Secure Kernel CFG (SKCFG).
 Note
CFG is the Microsoft implementation of Control Flow Integrity, a
technique that prevents a wide variety of malicious attacks from
redirecting the flow of the execution of a program. Both user mode and
Kernel mode CFG have been discussed extensively in Chapter 7 of Part 1.
■    Secure devices Secure devices are a new kind of devices that are
mapped and managed entirely by the Secure Kernel in VTL 1. Drivers
for these kinds of devices work entirely in VTL 1 user mode and use
services provided by the Secure Kernel to map the device I/O space.
To be properly enabled and work correctly, the VSM has some hardware
requirements. The host system must support virtualization extensions (Intel
VT-x, AMD SVM, or ARM TrustZone) and the SLAT. VSM won’t work if
one of the previous hardware features is not present in the system processor.
Some other hardware features are not strictly necessary, but in case they are
not present, some security premises of VSM may not be guaranteed:
■    An IOMMU is needed to protect against physical device DMA
attacks. If the system processors don’t have an IOMMU, VSM can
still work but is vulnerable to these physical device attacks.
■    A UEFI BIOS with Secure Boot enabled is needed for protecting the
boot chain that leads to the startup of the hypervisor and the Secure
Kernel. If Secure Boot is not enabled, the system is vulnerable to boot
attacks, which can modify the integrity of the hypervisor and Secure
Kernel before they have the chances to get executed.
Some other components are optional, but when they’re present they
increase the overall security and responsiveness of the system. The TPM
presence is a good example. It is used by the Secure Kernel to store the
Master Encryption key and to perform Secure Launch (also known as
DRTM; see Chapter 12 for more details). Another hardware component that
can improve VSM responsiveness is the processor’s Mode-Based Execute
Control (MBEC) hardware support: MBEC is used when HVCI is enabled to
protect the execution state of user mode pages in kernel mode. With
Hardware MBEC, the hypervisor can set the executable state of a physical
memory page based on the CPL (kernel or user) domain of the specific VTL.
In this way, memory that belongs to user mode application can be physically
marked executable only by user mode code (kernel exploits can no longer
execute their own code located in the memory of a user mode application). In
case hardware MBEC is not present, the hypervisor needs to emulate it, by
using two different SLAT tables for VTL 0 and switching them when the
code execution changes the CPL security domain (going from user mode to
kernel mode and vice versa produces a VMEXIT in this case). More details
on HVCI have been already discussed in Chapter 7 of Part 1.
EXPERIMENT: Detecting VBS and its provided
services
In Chapter 12, we discuss the VSM startup policy and provide the
instructions to manually enable or disable Virtualization-Based
Security. In this experiment, we determine the state of the different
features provided by the hypervisor and the Secure Kernel. VBS is
a technology that is not directly visible to the user. The System
Information tool distributed with the base Windows installation is
able to show the details about the Secure Kernel and its related
technologies. You can start it by typing msinfo32 in the Cortana
search box. Be sure to run it as Administrator; certain details
require a full-privileged user account.
In the following figure, VBS is enabled and includes HVCI
(specified as Hypervisor Enforced Code Integrity), UEFI runtime
virtualization (specified as UEFI Readonly), MBEC (specified as
Mode Based Execution Control). However, the system described in
the example does not include an enabled Secure Boot and does not
have a working IOMMU (specified as DMA Protection in the
Virtualization-Based Security Available Security Properties line).
More details about how to enable, disable, and lock the VBS
configuration are available in the “Understanding the VSM policy”
experiment of Chapter 12.
The Secure Kernel
The Secure Kernel is implemented mainly in the securekernel.exe file and is
launched by the Windows Loader after the hypervisor has already been
successfully started. As shown in Figure 9-31, the Secure Kernel is a minimal
OS that works strictly with the normal kernel, which resides in VTL 0. As for
any normal OS, the Secure Kernel runs in CPL 0 (also known as ring 0 or
kernel mode) of VTL 1 and provides services (the majority of them through
system calls) to the Isolated User Mode (IUM), which lives in CPL 3 (also
known as ring 3 or user mode) of VTL 1. The Secure Kernel has been
designed to be as small as possible with the goal to reduce the external attack
surface. It’s not extensible with external device drivers like the normal
kernel. The only kernel modules that extend their functionality are loaded by
the Windows Loader before VSM is launched and are imported from
securekernel.exe:
■    Skci.dll Implements the Hypervisor Enforced Code Integrity part of
the Secure Kernel
■    Cng.sys Provides the cryptographic engine to the Secure Kernel
■    Vmsvcext.dll Provides support for the attestation of the Secure
Kernel components in Intel TXT (Trusted Boot) environments (more
information about Trusted Boot is available in Chapter 12)
Figure 9-31 Virtual Secure Mode Architecture scheme, built on top of the
hypervisor.
While the Secure Kernel is not extensible, the Isolated User Mode includes
specialized processes called Trustlets. Trustlets are isolated among each other
and have specialized digital signature requirements. They can communicate
with the Secure Kernel through syscalls and with the normal world through
Mailslots and ALPC. Isolated User Mode is discussed later in this chapter.
Virtual interrupts
When the hypervisor configures the underlying virtual partitions, it requires
that the physical processors produce a VMEXIT every time an external
interrupt is raised by the CPU physical APIC (Advanced Programmable
Interrupt Controller). The hardware’s virtual machine extensions allow the
hypervisor to inject virtual interrupts to the guest partitions (more details are
in the Intel, AMD, and ARM user manuals). Thanks to these two facts, the
hypervisor implements the concept of a Synthetic Interrupt Controller
(SynIC). A SynIC can manage two kind of interrupts. Virtual interrupts are
interrupts delivered to a guest partition’s virtual APIC. A virtual interrupt can
represent and be associated with a physical hardware interrupt, which is
generated by the real hardware. Otherwise, a virtual interrupt can represent a
synthetic interrupt, which is generated by the hypervisor itself in response to
certain kinds of events. The SynIC can map physical interrupts to virtual
ones. A VTL has a SynIC associated with each virtual processor in which the
VTL runs. At the time of this writing, the hypervisor has been designed to
support 16 different synthetic interrupt vectors (only 2 are actually in use,
though).
When the system starts (phase 1 of the NT kernel’s initialization) the ACPI
driver maps each interrupt to the correct vector using services provided by
the HAL. The NT HAL is enlightened and knows whether it’s running under
VSM. In that case, it calls into the hypervisor for mapping each physical
interrupt to its own VTL. Even the Secure Kernel could do the same. At the
time of this writing, though, no physical interrupts are associated with the
Secure Kernel (this can change in the future; the hypervisor already supports
this feature). The Secure Kernel instead asks the hypervisor to receive only
the following virtual interrupts: Secure Timers, Virtual Interrupt Notification
Assist (VINA), and Secure Intercepts.
 Note
It’s important to understand that the hypervisor requires the underlying
hardware to produce a VMEXIT while managing interrupts that are only
of external types. Exceptions are still managed in the same VTL the
processor is executing at (no VMEXIT is generated). If an instruction
causes an exception, the latter is still managed by the structured exception
handling (SEH) code located in the current VTL.
To understand the three kinds of virtual interrupts, we must first introduce
how interrupts are managed by the hypervisor.
In the hypervisor, each VTL has been designed to securely receive
interrupts from devices associated with its own VTL, to have a secure timer
facility which can’t be interfered with by less secure VTLs, and to be able to
prevent interrupts directed to lower VTLs while executing code at a higher
VTL. Furthermore, a VTL should be able to send IPI interrupts to other
processors. This design produces the following scenarios:
■    When running at a particular VTL, reception of interrupts targeted at
the current VTL results in standard interrupt handling (as determined
by the virtual APIC controller of the VP).
■    When an interrupt is received that is targeted at a higher VTL, receipt
of the interrupt results in a switch to the higher VTL to which the
interrupt is targeted if the IRQL value for the higher VTL would
allow the interrupt to be presented. If the IRQL value of the higher
VTL does not allow the interrupt to be delivered, the interrupt is
queued without switching the current VTL. This behavior allows a
higher VTL to selectively mask interrupts when returning to a lower
VTL. This could be useful if the higher VTL is running an interrupt
service routine and needs to return to a lower VTL for assistance in
processing the interrupt.
■    When an interrupt is received that is targeted at a lower VTL than the
current executing VTL of a virtual processor, the interrupt is queued
for future delivery to the lower VTL. An interrupt targeted at a lower
VTL will never preempt execution of the current VTL. Instead, the
interrupt is presented when the virtual processor next transitions to the
targeted VTL.
Preventing interrupts directed to lower VTLs is not always a great
solution. In many cases, it could lead to the slowing down of the normal OS
execution (especially in mission-critical or game environments). To better
manage these conditions, the VINA has been introduced. As part of its
normal event dispatch loop, the hypervisor checks whether there are pending
interrupts queued to a lower VTL. If so, the hypervisor injects a VINA
interrupt to the current executing VTL. The Secure Kernel has a handler
registered for the VINA vector in its virtual IDT. The handler
(ShvlVinaHandler function) executes a normal call
(NORMALKERNEL_VINA) to VTL 0 (Normal and Secure Calls are
discussed later in this chapter). This call forces the hypervisor to switch to
the normal kernel (VTL 0). As long as the VTL is switched, all the queued
interrupts will be correctly dispatched. The normal kernel will reenter VTL 1
by emitting a SECUREKERNEL_RESUMETHREAD Secure Call.
Secure IRQLs
The VINA handler will not always be executed in VTL 1. Similar to the NT
kernel, this depends on the actual IRQL the code is executing into. The
current executing code’s IRQL masks all the interrupts that are associated
with an IRQL that’s less than or equal to it. The mapping between an
interrupt vector and the IRQL is maintained by the Task Priority Register
(TPR) of the virtual APIC, like in case of real physical APICs (consult the
Intel Architecture Manual for more information). As shown in Figure 9-32,
the Secure Kernel supports different levels of IRQL compared to the normal
kernel. Those IRQL are called Secure IRQL.
Figure 9-32 Secure Kernel interrupts request levels (IRQL).
The first three secure IRQL are managed by the Secure Kernel in a way
similar to the normal world. Normal APCs and DPCs (targeting VTL 0) still
can’t preempt code executing in VTL 1 through the hypervisor, but the
VINA interrupt is still delivered to the Secure Kernel (the operating system
manages the three software interrupts by writing in the target processor’s
APIC Task-Priority Register, an operation that causes a VMEXIT to the
hypervisor. For more information about the APIC TPR, see the Intel, AMD,
or ARM manuals). This means that if a normal-mode DPC is targeted at a
processor while it is executing VTL 1 code (at a compatible secure IRQL,
which should be less than Dispatch), the VINA interrupt will be delivered
and will switch the execution context to VTL 0. As a matter of fact, this
executes the DPC in the normal world and raises for a while the normal
kernel’s IRQL to dispatch level. When the DPC queue is drained, the normal
kernel’s IRQL drops. Execution flow returns to the Secure Kernel thanks to
the VSM communication loop code that is located in the
VslpEnterIumSecureMode routine. The loop processes each normal call
originated from the Secure Kernel.
The Secure Kernel maps the first three secure IRQLs to the same IRQL of
the normal world. When a Secure call is made from code executing at a
particular IRQL (still less or equal to dispatch) in the normal world, the
Secure Kernel switches its own secure IRQL to the same level. Vice versa,
when the Secure Kernel executes a normal call to enter the NT kernel, it
switches the normal kernel’s IRQL to the same level as its own. This works
only for the first three levels.
The normal raised level is used when the NT kernel enters the secure
world at an IRQL higher than the DPC level. In those cases, the Secure
Kernel maps all of the normal-world IRQLs, which are above DPC, to its
normal raised secure level. Secure Kernel code executing at this level can’t
receive any VINA for any kind of software IRQLs in the normal kernel (but
it can still receive a VINA for hardware interrupts). Every time the NT kernel
enters the secure world at a normal IRQL above DPC, the Secure Kernel
raises its secure IRQL to normal raised.
Secure IRQLs equal to or higher than VINA can never be preempted by
any code in the normal world. This explains why the Secure Kernel supports
the concept of secure, nonpreemptable timers and Secure Intercepts. Secure
timers are generated from the hypervisor’s clock interrupt service routine
(ISR). This ISR, before injecting a synthetic clock interrupt to the NT kernel,
checks whether there are one or more secure timers that are expired. If so, it
injects a synthetic secure timer interrupt to VTL 1. Then it proceeds to
forward the clock tick interrupt to the normal VTL.
Secure intercepts
There are cases where the Secure Kernel may need to prevent the NT kernel,
which executes at a lower VTL, from accessing certain critical system
resources. For example, writes to some processor’s MSRs could potentially
be used to mount an attack that would disable the hypervisor or subvert some
of its protections. VSM provides a mechanism to allow a higher VTL to lock
down critical system resources and prevent access to them by lower VTLs.
The mechanism is called secure intercepts.
Secure intercepts are implemented in the Secure Kernel by registering a
synthetic interrupt, which is provided by the hypervisor (remapped in the
Secure Kernel to vector 0xF0). The hypervisor, when certain events cause a
VMEXIT, injects a synthetic interrupt to the higher VTL on the virtual
processor that triggered the intercept. At the time of this writing, the Secure
Kernel registers with the hypervisor for the following types of intercepted
events:
■    Write to some vital processor’s MSRs (Star, Lstar, Cstar, Efer,
Sysenter, Ia32Misc, and APIC base on AMD64 architectures) and
special registers (GDT, IDT, LDT)
■    Write to certain control registers (CR0, CR4, and XCR0)
■    Write to some I/O ports (ports 0xCF8 and 0xCFC are good examples;
the intercept manages the reconfiguration of PCI devices)
■    Invalid access to protected guest physical memory
When VTL 0 software causes an intercept that will be raised in VTL 1, the
Secure Kernel needs to recognize the intercept type from its interrupt service
routine. For this purpose, the Secure Kernel uses the message queue allocated
by the SynIC for the “Intercept” synthetic interrupt source (see the “Inter-
partition communication” section previously in this section for more details
about the SynIC and SINT). The Secure Kernel is able to discover and map
the physical memory page by checking the SIMP synthetic MSR, which is
virtualized by the hypervisor. The mapping of the physical page is executed
at the Secure Kernel initialization time in VTL 1. The Secure Kernel’s
startup is described later in this chapter.
Intercepts are used extensively by HyperGuard with the goal to protect
sensitive parts of the normal NT kernel. If a malicious rootkit installed in the
NT kernel tries to modify the system by writing a particular value to a
protected register (for example to the syscall handlers, CSTAR and LSTAR,
or model-specific registers), the Secure Kernel intercept handler
(ShvlpInterceptHandler) filters the new register’s value, and, if it discovers
that the value is not acceptable, it injects a General Protection Fault (GPF)
nonmaskable exception to the NT kernel in VLT 0. This causes an immediate
bugcheck resulting in the system being stopped. If the value is acceptable, the
Secure Kernel writes the new value of the register using the hypervisor
through the HvSetVpRegisters hypercall (in this case, the Secure Kernel is
proxying the access to the register).
Control over hypercalls
The last intercept type that the Secure Kernel registers with the hypervisor is
the hypercall intercept. The hypercall intercept’s handler checks that the
hypercall emitted by the VTL 0 code to the hypervisor is legit and is
originated from the operating system itself, and not through some external
modules. Every time in any VTL a hypercall is emitted, it causes a VMEXIT
in the hypervisor (by design). Hypercalls are the base service used by kernel
components of each VTL to request services between each other (and to the
hypervisor itself). The hypervisor injects a synthetic intercept interrupt to the
higher VTL only for hypercalls used to request services directly to the
hypervisor, skipping all the hypercalls used for secure and normal calls to and
from the Secure Kernel.
If the hypercall is not recognized as valid, it won’t be executed: the Secure
Kernel in this case updates the lower VTL’s registers with the goal to signal
the hypercall error. The system is not crashed (although this behavior can
change in the future); the calling code can decide how to manage the error.
VSM system calls
As we have introduced in the previous sections, VSM uses hypercalls to
request services to and from the Secure Kernel. Hypercalls were originally
designed as a way to request services to the hypervisor, but in VSM the
model has been extended to support new types of system calls:
■    Secure calls are emitted by the normal NT kernel in VTL 0 to require
services to the Secure Kernel.
■    Normal calls are requested by the Secure Kernel in VTL 1 when it
needs services provided by the NT kernel, which runs in VTL 0.
Furthermore, some of them are used by secure processes (trustlets)
running in Isolated User Mode (IUM) to request services from the
Secure Kernel or the normal NT kernel.
These kinds of system calls are implemented in the hypervisor, the Secure
Kernel, and the normal NT kernel. The hypervisor defines two hypercalls for
switching between different VTLs: HvVtlCall and HvVtlReturn. The Secure
Kernel and NT kernel define the dispatch loop used for dispatching Secure
and Normal Calls.
Furthermore, the Secure Kernel implements another type of system call:
secure system calls. They provide services only to secure processes
(trustlets), which run in IUM. These system calls are not exposed to the
normal NT kernel. The hypervisor is not involved at all while processing
secure system calls.
Virtual processor state
Before delving into the Secure and Normal calls architecture, it is necessary
to analyze how the virtual processor manages the VTL transition. Secure
VTLs always operate in long mode (which is the execution model of AMD64
processors where the CPU accesses 64-bit-only instructions and registers),
with paging enabled. Any other execution model is not supported. This
simplifies launch and management of secure VTLs and also provides an extra
level of protection for code running in secure mode. (Some other important
implications are discussed later in the chapter.)
For efficiency, a virtual processor has some registers that are shared
between VTLs and some other registers that are private to each VTL. The
state of the shared registers does not change when switching between VTLs.
This allows a quick passing of a small amount of information between VTLs,
and it also reduces the context switch overhead when switching between
VTLs. Each VTL has its own instance of private registers, which could only
be accessed by that VTL. The hypervisor handles saving and restoring the
contents of private registers when switching between VTLs. Thus, when
entering a VTL on a virtual processor, the state of the private registers
contains the same values as when the virtual processor last ran that VTL.
Most of a virtual processor’s register state is shared between VTLs.
Specifically, general purpose registers, vector registers, and floating-point
registers are shared between all VTLs with a few exceptions, such as the RIP
and the RSP registers. Private registers include some control registers, some
architectural registers, and hypervisor virtual MSRs. The secure intercept
mechanism (see the previous section for details) is used to allow the Secure
environment to control which MSR can be accessed by the normal mode
environment. Table 9-3 summarizes which registers are shared between
VTLs and which are private to each VTL.
Table 9-3 Virtual processor per-VTL register states
T
y
p
e
General 
Registers
MSRs
S
h
a
r
e
d
Rax, Rbx, 
Rcx, Rdx, 
Rsi, Rdi, 
Rbp
CR2
R8 – R15
DR0 – DR5