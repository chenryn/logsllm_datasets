Use the Parallel.For and Parallel.ForEach methods to
perform loop iterations by using tasks:
Click here to view code image
Parallel.For(0, 100, performLoopProcessing);
...
private void performLoopProcessing(int x)
{
    // Perform loop processing
}
Use the Parallel.Invoke method to perform concurrent method
calls by using separate tasks:
Click here to view code image
Parallel.Invoke(
    doWork,
    doMoreWork,
    doYetMoreWork
);
Handle
exceptions
raised by
one or more
tasks
Catch the AggregateException exception. Use the Handle
method to specify a method that can handle each exception in
the AggregateException object. If the exception-handling
method handles the exception, return true; otherwise, return
false:
Click here to view code image
try
{
    Task task = Task.Run(...);
    task.Wait();
    ...
}
catch (AggregateException ae)
{
    ae.Handle(handleException);
Download from finelybook PI:EMAIL
820
}
...
private bool handleException(Exception e)
{
    if (e is TaskCanceledException)
    {
        ...
        return true;
    }
    else
    {
        return false;
    }
}
Enable
cancellation
in a task
Implement cooperative cancellation by creating a
CancellationTokenSource object and using a
CancellationToken parameter in the method run by the task. In
the task method, call the ThrowIfCancellationRequested
method of the CancellationToken parameter to throw an
OperationCanceledException exception and terminate the
task:
Click here to view code image
private void generateGraphData(..., CancellationToken
token)
{
    ...
    token.ThrowIfCancellationRequested();
    ...
}
Download from finelybook PI:EMAIL
821
CHAPTER 24
Improving response time by
performing asynchronous
operations
After completing this chapter, you will be able to:
Define and use asynchronous methods to improve the interactive
response time of applications that perform long-running and I/O-bound
operations.
Explain how to reduce the time taken to perform complex LINQ
queries by using parallelization.
Use the concurrent collection classes to share data between parallel
tasks safely.
Chapter 23, “Improving throughput by using tasks,” demonstrates how to
use the Task class to perform operations in parallel and improve throughput
in compute-bound applications. However, while maximizing the processing
power available to an application can make it run more quickly,
responsiveness is also important. Remember that the Windows user interface
operates by using a single thread of execution, but users expect an application
to respond when they click a button on a form, even if the application is
currently performing a large and complex calculation. Additionally, some
tasks might take a considerable time to run even if they are not compute-
bound (an I/O-bound task waiting to receive information across the network
Download from finelybook PI:EMAIL
822
from a remote website, for example), and blocking user interaction while
waiting for an event that might take an indeterminate time to happen is
clearly not good design practice. The solution to both of these problems is the
same: perform the task asynchronously and leave the user interface thread
free to handle user interactions.
Issues with response time are not limited to user interfaces. For example,
Chapter 21, “Querying in-memory data by using query expressions,” shows
how you can access data held in memory in a declarative manner by using
Language-Integrated Query (LINQ). A typical LINQ query generates an
enumerable result set, and you can iterate serially through this set to retrieve
the data. If the data source used to generate the result set is large, running a
LINQ query can take a long time. Many database management systems faced
with the issue of optimizing queries address this issue by using algorithms
that break down the process of identifying the data for a query into a series of
tasks, and they then run these tasks in parallel, combining the results when
the tasks have completed to generate the complete result set. The designers of
the Microsoft .NET Framework decided to provide LINQ with a similar
facility, and the result is Parallel LINQ or PLINQ. You will study PLINQ in
the second part of this chapter.
Asynchronicity and scalability
Asynchronicity is a powerful concept that you need to understand if you
are building large-scale solutions such as enterprise web applications
and services. A web server typically has limited resources with which to
handle requests from a potentially very large audience, each member of
which expects his or her requests to be handled quickly. In many cases,
a user request can invoke a series of operations that individually can
take significant time (perhaps as much as a second or two). Consider an
e-commerce system in which a user is querying the product catalog or
placing an order, for example. Both of these operations typically
involve reading and writing data held in a database that might be
managed by a database server remote from the web server. Many web
servers can support only a limited number of concurrent connections,
and if the thread associated with a connection is waiting for an I/O
operation to complete, that connection is effectively blocked. If the
Download from finelybook PI:EMAIL
823
thread creates a separate task to handle the I/O asynchronously, then the
thread can be released and the connection recycled for another user.
This approach is far more scalable than implementing such operations
synchronously.
For an example and a detailed explanation of why performing
synchronous I/O is bad in this situation, read about the Synchronous I/O
anti-pattern in the public Microsoft Patterns & Practices Git repository,
at https://github.com/mspnp/performance-
optimization/tree/master/SynchronousIO.
Implementing asynchronous methods
An asynchronous method is one that does not block the current thread on
which it starts to run. When an application invokes an asynchronous method,
an implied contract expects the method to return control to the calling
environment quite quickly and to perform its work on a separate thread. The
definition of quite is not a mathematically defined quantity, but the
expectation is that if an asynchronous method performs an operation that
might cause a noticeable delay to the caller, it should do so by using a
background thread, enabling the caller to continue running on the current
thread. This process sounds complicated, and indeed in earlier versions of the
.NET Framework, it was. However, C# now provides the async method
modifier and the await operator, which abstract much of this complexity to
the compiler, meaning that (most of the time) you no longer have to concern
yourself with the intricacies of multithreading.
Defining asynchronous methods: The problem
You have already seen how you can implement concurrent operations by
using Task objects. To quickly recap, when you initiate a task by using the
Start or Run method of the Task type, the common language runtime (CLR)
uses its own scheduling algorithm to allocate the task to a thread and set this
thread running at a time convenient to the operating system when sufficient
resources are available.
Download from finelybook PI:EMAIL
824
This approach frees your code from the requirement to recognize and
manage the workload of your computer. If you need to perform another
operation when a specific task completes, you have the following choices:
You can manually wait for the task to finish by using one of the Wait
methods exposed by the Task type. You can then initiate the new
operation, possibly by defining another task.
You can define a continuation. A continuation simply specifies an
operation to be performed when a given task completes. The .NET
Framework automatically executes the continuation operation as a task
that it schedules when the original task finishes. The continuation
reuses the same thread as the original task.
However, even though the Task type provides a convenient generalization
of an operation, you still often have to write potentially awkward code to
solve some of the common problems that developers encounter when using a
background thread. For example, suppose that you define the following
method, which performs a series of long-running operations that must run in
a serial manner and then displays a message in a TextBox control on the
screen:
Click here to view code image
private void slowMethod()
{
    doFirstLongRunningOperation();
    doSecondLongRunningOperation();
    doThirdLongRunningOperation();
    message.Text = "Processing Completed";
}
private void doFirstLongRunningOperation()
{
    ...
}
private void doSecondLongRunningOperation()
{
    ...
}
private void doThirdLongRunningOperation()
{
    ...
}
Download from finelybook PI:EMAIL
825
If you invoke slowMethod from a piece of user interface code (such as the
Click event handler for a button control), the user interface will become
unresponsive until this method completes. You can make the slowMethod
method more responsive by using a Task object to run the
doFirstLongRunningOperation method and define continuations for the same
Task that run the doSecondLongRunningOperation and
doThirdLongRunningOperation methods in turn, like this:
Click here to view code image
private void slowMethod()
{
    Task task = new Task(doFirstLongRunningOperation);
    task.ContinueWith(doSecondLongRunningOperation);
    task.ContinueWith(doThirdLongRunningOperation);
    task.Start();
    message.Text = "Processing Completed"; // When does this message
appear?
}
private void doFirstLongRunningOperation()
{
    ...
}
private void doSecondLongRunningOperation(Task t)
{
      ...
}
private void doThirdLongRunningOperation(Task t)
{
      ...
}
Although this refactoring seems fairly simple, there are points that you
should note. Specifically, the signatures of the
doSecondLongRunningOperation and doThirdLongRunningOperation
methods have changed to accommodate the requirements of continuations
(the Task object that instigated the continuation is passed as a parameter to a
continuation method). More important, you need to ask yourself, “When is
the message displayed in the TextBox control?” The issue with this second
point is that although the Start method initiates a Task, it does not wait for it
to complete, so the message appears while the processing is being performed
rather than when it has finished.
Download from finelybook PI:EMAIL
826
This is a somewhat trivial example, but the general principle is important,
and there are at least two solutions. The first is to wait for the Task to
complete before displaying the message, like this:
Click here to view code image
private void slowMethod()
{
    Task task = new Task(doFirstLongRunningOperation);
    task.ContinueWith(doSecondLongRunningOperation);
    task.ContinueWith(doThirdLongRunningOperation);
    task.Start();
    task.Wait();
    message.Text = "Processing Completed";
}
However, the call to the Wait method now blocks the thread executing the
slowMethod method and obviates the purpose of using a Task in the first
place.
Important Generally speaking, you should never call the Wait method
directly in the user interface thread.
A better solution is to define a continuation that displays the message and
arrange for it to run only when the doThirdLongRunningOperation method
finishes, in which case you can remove the call to the Wait method. You
might be tempted to implement this continuation as a delegate as shown in
bold in the following code (remember that a continuation is passed a Task
object as an argument; that is the purpose of the t parameter to the delegate):
Click here to view code image
private void slowMethod()
{
    Task task = new Task(doFirstLongRunningOperation);
    task.ContinueWith(doSecondLongRunningOperation);
    task.ContinueWith(doThirdLongRunningOperation);
    task.ContinueWith((t) => message.Text = "Processing Complete");
    task.Start();
}
Download from finelybook PI:EMAIL
827
Unfortunately, this approach exposes another problem. If you try to run
this code in debug mode, you will find that the final continuation generates a
System.Exception exception with the rather obscure message, “The
application called an interface that was marshaled for a different thread.” The
issue here is that only the user interface thread can manipulate user interface
controls, and now you are attempting to write to a TextBox control from a
different thread—the thread being used to run the Task. You can resolve this
problem by using the Dispatcher object. The Dispatcher object is a
component of the user interface infrastructure, and you can send it requests to
perform work on the user interface thread by calling its RunAsync method.
This method takes an Action delegate that specifies the code to run. The
details of the Dispatcher object and the RunAsync method are beyond the
scope of this book, but the following example shows how you might use
them to display the message required by the slowMethod method from a
continuation:
Click here to view code image
private void slowMethod()
{
    Task task = new Task(doFirstLongRunningOperation);
    task.ContinueWith(doSecondLongRunningOperation);
    task.ContinueWith(doThirdLongRunningOperation);
    task.ContinueWith((t) => this.Dispatcher.RunAsync(
        CoreDispatcherPriority.Normal,
        () => message.Text = "Processing Complete"));
    task.Start();
}
This works, but it is messy and difficult to maintain. You now have a
delegate (the continuation) specifying another delegate (the code to be run by
RunAsync).
More info You can find more information about the Dispatcher object
and the RunAsync method on the Microsoft website at
https://msdn.microsoft.com/library/windows.ui.core.coredispatcher.runasync
Download from finelybook PI:EMAIL
828
Defining asynchronous methods: The solution
The purpose of the async and await keywords in C# is to enable you to define
and call methods that can run asynchronously. This means that you don’t
have to concern yourself with specifying continuations or scheduling code to
run on Dispatcher objects to ensure that data is manipulated on the correct
thread. Very simply:
The async modifier indicates that a method contains functionality that
can be run asynchronously.
The await operator specifies the points at which this asynchronous
functionality should be performed.
The following code example shows the slowMethod method implemented
as an asynchronous method with the async modifier and await operators:
Click here to view code image
private async void slowMethod()
{
    await doFirstLongRunningOperation();
    await doSecondLongRunningOperation();
    await doThirdLongRunningOperation();
    message.Text = "Processing Complete";
}
This method now looks remarkably similar to the original version, and
that is the power of async and await. In fact, this magic is nothing more than
an exercise in reworking your code by the C# compiler. When the C#
compiler encounters the await operator in an async method, it effectively
reformats the operand that follows this operator as a task that runs on the
same thread as the async method. The remainder of the code is converted into
a continuation that runs when the task completes, again running on the same
thread. Now, because the thread that was running the async method was the
thread running the user interface, it has direct access to the controls in the
window, which means it can update them directly without routing them
through the Dispatcher object.
Although this approach looks quite simple at first glance, be sure to keep
in mind the following points and avoid some possible misconceptions:
The async modifier does not signify that a method runs asynchronously
on a separate thread. All it does is specify that the code in the method
Download from finelybook PI:EMAIL
829
can be divided into one or more continuations. When these
continuations run, they execute on the same thread as the original
method call.
The await operator specifies a point at which the C# compiler can split
the code into a continuation. The await operator itself expects its
operand to be an awaitable object. An awaitable object is a type that
provides the GetAwaiter method, which returns an object that in turn
provides methods for running code and waiting for it to complete. The
C# compiler converts your code into statements that use these methods
to create an appropriate continuation.
Important You can use the await operator only in a method marked
with async. Outside an async method, the await keyword is treated as an
ordinary identifier (you can even create a variable called await,
although this is not recommended).
Asynchronous operations and the Main method
C# 7.0 and earlier does not permit you to mark the Main method as
async; if you try, you will receive the compiler error “Program does not
contain a static ‘Main’ method suitable for an entry point”. This means
that you cannot use the await operator directly from Main; instead, you
must wrap the await call inside an async method that you invoke from
Main, as follows:
Click here to view code image
public static void Main(string[] args)
{
    DoAsyncWork(...).Wait();
}
static async Task DoAsyncWork(...)
{
    await ...
}
Download from finelybook PI:EMAIL
830
An annoying quirk of this approach is that Visual Studio highlights
the call to DoAsyncWork in the Main method with the warning
“Because this call is not awaited, execution of the current method
continues before the call is completed, Consider applying the ‘await’
operator to the result of the call.” If you follow this advice, you will
generate an error with the message “The ‘await’ operator can only be
used within an async method.”
C# 7.1 (currently in preview) relaxes the restriction and enables you
to mark the Main method as async. You can then use the await operator
directly within the Main method:
Click here to view code image
public static async Task Main(string[] args)
{
    await DoAsyncWork(...);
}
To use C# 7.1 preview features with Visual Studio, perform the
following steps:
1. In the Solution Explorer window, right-click your project, and then
click Properties
2. In the Properties window, click the Build tab.
3. On the Build page, click Advanced.
4. In the Advanced Build Settings window, in the Language version
drop-down list box,  click C# 7.1
5. Save the project.
In the current implementation of the await operator, the awaitable object it
expects you to specify as the operand is a Task. This means that you must
make some modifications to the doFirstLongRunningOperation,
doSecondLongRunningOperation, and doThirdLongRunningOperation
methods. Specifically, each method must now create and run a Task to
perform its work and return a reference to this Task. The following example
shows an amended version of the doFirstLongRunningOperation method:
Download from finelybook PI:EMAIL
831
Click here to view code image
private Task doFirstLongRunningOperation()
{
    Task t = Task.Run(() => { /* original code for this method goes
here */ });
    return t;
}
It is also worth considering whether there are opportunities to break the
work done by the doFirstLongRunningOperation method into a series of
parallel operations. If so, you can divide the work into a set of Tasks, as