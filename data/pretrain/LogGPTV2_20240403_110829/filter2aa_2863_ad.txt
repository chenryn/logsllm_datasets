under my yard.)
Modern computing equipment actually includes many CPUs or microcontrollers, in some cases running mul-
tiple operating systems. Desktops and Laptops have dedicated microcontrollers in UEFI/BIOS, disk drives
and many peripherals. Many phones have a separate secured mode (TrustZone) running concurrently with the
main operating system. A System-on-a-Chip (SOC) used in a phone might have multiple discrete CPUs. A
phone might also have one or more baseband processors used to handle network communications. Often
the interconnections between these various operating systems and components are arcane, if not completely
opaque to the user, and none of them are likely to be open source in the near future.
Because of all of these interconnected pieces, all of which are closed-source, and at least some of which are
connected/updatable from a network interface (often without user knowledge/interaction), even a fully open
and audited "main" operating system doesn't provide a significant security hurdle in the face of some types
of dedicated attackers.
Even if we handwave away all of the above and assume that all of the operating systems and firmware on
a device are open and secure, various types of hardware design backdoors or flaws are available to highly
motivated attackers. Some progress is being made in providing fully open hardware designs, which is a great
step forward. However, revelations in the past couple years show that even if we assume hardware and software
that were designed and built securely, some attackers can add or modify hardware in a system to provide
access.
After taking all of the above into account, it should become clear why open source is not a security panacea.
3Some subset of this would be possible for jailbroken users.
18 | Secure Messaging for Normal People
NCC Group
8 Metadata
Metadata is information about communications that isn't the actual content of the messages themselves. This
could include the times and dates, lengths, and parties involved in a communication. Often metadata can
reveal as much information, if not more, than the message content. As one pretty important man once said:
"We kill people based on metadata."4
8.1 Direct collection of metadata
In almost all cases, assume that the vendor of the chat application can collect metadata directly. End-to-end
encryption can protect message content but cannot prevent a provider from collecting metadata. A highly
motivated attacker might attempt to gain access to a messaging provider's networks to collect metadata
(either about specific individuals, or in bulk). A provider serious about protecting privacy will keep as few
communications logs as possible and might consider obfuscating the information. A provider with commercial
interests such as analytics or targeted advertising is likely to retain metadata information, which might make it
more accessible to other attackers.
Even if the server runs open-source software, there is still no real way to verify that the server is not collecting
metadata.
8.2 Inferring metadata as a global passive adversary
Attackers with access to a significant portion of the network infrastructure between two users and/or the
messaging server might be able to infer metadata by watching for patterns in timing or message size.
Figure 9: Even when encrypted, timing and size can
match senders and receivers
This becomes more difficult if the messaging
server and/or client attempt to obfuscate com-
munications by delaying messages or sending
dummy messages, but these techniques might be
defeatable by statistical techniques.
8.3 Identiﬁers as metadata
The chat server will be able to identify your public
IP address under most circumstances. This means
that even if your provider doesn't have your real
name, they might be able to link your messages
to a particular address in the real world.
If an
attacker has access to IP logs from the chat server
and your Internet provider, the attacker might be
able to match these to lead to your identity.
Some chat systems require you to register and communicate using a valid phone number. These would require
you to take extra steps to mask your identity as compared to a system that allows arbitrary usernames. A
collection of phone numbers is likely to be more useful to attackers than a list of arbitrary usernames.
8.4 Address book harvesting
Many chat systems will attempt to upload your address book from your phone to the server. This allows the
collection of metadata that doesn't include call information, but instead provides the ability to create a graph
of "who knows who".
Some chat programs will attempt to obfuscate this in various ways before sending to the server (hashes and
4Retired General Michael Hayden - https://youtu.be/UdQiz0Vavmc?t=27s
19 | Secure Messaging for Normal People
NCC Group
bloom filters come to mind), but these techniques are not effective at scale. At the end of the day, you must
assume that if the chat service provides any sort of matchmaking by contact list (phone numbers, email address,
etc.), the chat server can read your social graph.
8.5 Is there any cure for metadata?
All of these explanations may make it seem hopeless, and that one cannot protect oneself from giving away
metadata to anyone. That's not the case – tools like Tor (and to a lesser extent VPNs) do effectively hide a lot
of metadata. Integrating something like this into an application can go a long way to disguise who's talking
to who. But like group messaging any claims should be viewed very suspiciously.
In particular, Tor does not claim to address a "Global Passive Adversary". This is generally understood to mean
an eavesdropper who can effectively watch the whole internet at once. Adversaries who can watch both ends
of a Tor connection might also be able to infer metadata without a "global" reach.
20 | Secure Messaging for Normal People
NCC Group
9 Physical device access/seizure
For some threat models, it makes sense to consider a case where your adversary is able to access your device
physically. The security of your device (especially full disk/hardware backed encryption and a strong passcode)
plays a big role here, but is mostly out of scope for this discussion. For the rest of this section, we assume that
your adversary was able to bypass any existing OS or hardware encryption so we can focus on the features of
the applications. 5
9.1 Logs & transcripts
It should go without saying, but a system that saves logs or transcripts of old messages risks exposure of either
metadata or message content if an adversary is able to access that data. The chat transcripts are easy to see
by just scrolling up (or the equivalent) - the logs would be hidden from view.
To be secure, messaging systems should offer the ability to erase message content, metadata, and/or internal
contact lists. 6
Some systems will provide options to not log at all, or to automatically remove records after a certain period of
time (but see "Auto-deleting messages" below for some limitations of this strategy). This is helpful in limiting
the amount of data available if your device is seized before it can be wiped.
9.2 Forward secrecy
Imagine an adversary who doesn't have the ability to decrypt your traffic, but records it all anyway in the hope
that later decryption will be possible. Some time later, your device (or the other encryption endpoint) gets
taken by this attacker.
For some types of encryption, the attacker now has control of the keys used to encrypt all of the recorded
traffic, so the attacker can now read all of it. However, a combination of a few cryptographic techniques can
make it such that the recorded network data will still be unreadable even if the attacker steals your device.
This property is called Forward Secrecy (FS)7
5Much of the discussion below will also apply if an attacker uses some sort of exploit to gain logical access to your device as a
privileged user.
6This can be challenging on flash storage systems, as their controllers often write data in unpredictable or opaque ways - but the
application can at least attempt to delete the data.
7And may also go by the name `Perfect Forward Secrecy'.
21 | Secure Messaging for Normal People
NCC Group
10 Things that don't work
like you think they do
Not everything in the secure messaging space works like it says on the tin. Some of these are negligently
misleading at best, whereas others simply have some subtle details that aren't immediately obvious.
10.1 Auto-deleting messages
Many chat programs have a setting that deletes a message for both parties after some automatic or user-
selected countdown value. This can be useful to help keep message history to a minimum, but it relies on
the cooperation of your communication partners. If the person receiving the message chooses to save the
message beyond the purported lifetime of the message, there are a variety of techniques available, and there
is nothing that the sender can do to prevent this (or even to reliably detect it). For an obvious example,
just imagine that the receiver has a second camera and takes a photo of the screen whenever one of these
messages comes in.
10.2 One time pads
One time pad cryptography (also called the Vernam Cipher) is provably secure from cryptanalysis when used
correctly.
Unfortunately, it's nearly impossible to be used correctly in a meaningful way. These types of ciphers require
large amounts of truly random input and a secure way to synchronize this random data between the commu-
nication partners.
If you see a modern secure messaging application that claims security by virtue of its one time pad implemen-
tation, it's likely that the system is either not really secure (for example, it uses pseudorandom data generated
from a shared key, or it transmits the pad material over some other less-secure medium), or not practical for
normal use.
10.3 Special crypto hardware
A few devices are available that treat the phone (or other device) as an untrusted network device and provide
their own encryption via some attached hardware. Leaving aside any security vulnerabilities that might allow
a hostile device to attack the crypto hardware directly, a hostile phone might simply elect to turn on its own
microphone to listen to the conversation before it is encrypted.
10.4 Geofencing
Some messaging applications claim to only send messages to devices within a certain geographic area. In
almost all cases (see mesh networks below for a counterexample), this all happens on the server based on a
receiver's reported location. It is relatively easy to purposely misreport a location to allow one to read or send
data that one would not normally be allowed to.
10.5 Mesh networks
Mesh networks have a variety of technical advantages and constraints, but in terms of security they are no
different than any other messaging system. There is no special magic that makes them more secure other than
the fact that you must actually have a receiver able to receive/transmit to a member of the mesh.
These deserve special mention because they have been used during protests where traditional methods (SMS,
Voice, and mobile data) were unavailable (or perhaps intentionally deactivated by the authorities). There is
nothing intrinsic to mesh networks that would make them safe. The authorities (or other adversaries) could
connect to them and log message data (if unencrypted) or metadata (usernames or device identifiers).
22 | Secure Messaging for Normal People
NCC Group
10.6 Military-grade
This essentially means that a particular set of encryption algorithms were used, but doesn't address any of the
topics in this paper. Claiming "military grade encryption" in marketing materials is something like claiming
your car is safe because it has a bulletproof windshield.
10.7 Bespoke cryptography
The details are beyond the scope of this paper, but it's generally safe to assume that something using custom
cryptographic algorithms or protocols is less secure than something using well-known ones. A special subset
of this is that cryptography algorithms that are kept secret are usually very poorly tested and not likely to be
secure.
10.8 Multiple synchronized devices
There are a variety of technical reasons why having multiple devices all synchronized to the same account can
be difficult if the messages use end-to-end cryptography. Either one key is shared amongst multiple devices
(which means that one stolen device can masquerade as all of the rest) or more complex cross-signing schemes
are needed. Cross-signed schemes end up with more complex problems, like "If there are two devices, and
one is stolen, which one can invalidate the other?". Alternatively, a server could manage the multiple identities,
but this endangers the end-to-end and key verification properties of a system.
23 | Secure Messaging for Normal People
NCC Group
11 Conclusion
Hopefully we've illustrated what the different secure messaging clients can offer to help preserve privacy and
also shown their limitations. No software application alone will be likely to provide effective protection against
a government that is specifically targeting you, but the correct choice of application, used correctly, can have
a major impact in keeping your data safe from prying eyes in all other cases.
24 | Secure Messaging for Normal People
NCC Group