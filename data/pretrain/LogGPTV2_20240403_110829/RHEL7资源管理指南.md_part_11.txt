-   ::: para
    如要让一个 cgroup 完全使用一个 CPU，请使用以下指令：
    :::
    ``` screen
    ~]# echo 10000 > /cgroup/cpu/red/cpu.cfs_quota_us
    ~]# echo 10000 > /cgroup/cpu/red/cpu.cfs_period_us
    ```
-   ::: para
    如要让一个 cgroup 使用 CPU 的 10%，请使用以下指令：
    :::
    ``` screen
    ~]# echo 10000 > /cgroup/cpu/red/cpu.cfs_quota_us
    ~]# echo 100000 > /cgroup/cpu/red/cpu.cfs_period_us
    ```
-   ::: para
    在多核系统中，如要让一个 cgroup 完全使用两个 CPU
    核，请使用以下指令：
    :::
    ``` screen
    ~]# echo 200000 > /cgroup/cpu/red/cpu.cfs_quota_us
    ~]# echo 100000 > /cgroup/cpu/red/cpu.cfs_period_us
    ```
:::
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sec-cpuacct}A.3. cpuacct {.title}
:::
::: para
CPU 统计（CPU
accounting）（`cpuacct`{.systemitem}）子系统会自动生成报告来显示 cgroup
任务所使用的 CPU 资源，其中包括子群组任务。报告有三种：
:::
::: variablelist
[cpuacct.usage]{.term}
:   ::: para
    报告此 cgroup 中所有任务（包括层级中的低端任务）使用 CPU
    的总时间（纳秒）。
    :::
    ::: {.note xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **重新设定 cpuacct.usage**
    :::
    ::: admonition
    ::: para
    如要重新设定 `cpuacct.usage`{.systemitem} 的值，请执行以下指令：
    :::
    ``` screen
    ~]# echo 0 > /cgroup/cpuacct/cpuacct.usage
    ```
    ::: para
    上述指令也将重置 `cpuacct.usage_percpu`{.systemitem} 中的值。
    :::
    :::
    :::
[cpuacct.stat]{.term}
:   ::: para
    报告此 cgroup 的所有任务（包括层级中的低端任务）使用的用户和系统 CPU
    时间，方式如下：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `user`{.systemitem} --- 用户模式中任务使用的 CPU 时间。
        :::
    -   ::: para
        `system`{.systemitem} --- 系统（kernel）模式中任务使用的 CPU
        时间。
        :::
    :::
    ::: para
    CPU 时间将报告于 `USER_HZ`{.systemitem} 变量定义的单位中。
    :::
[cpuacct.usage_percpu]{.term}
:   ::: para
    报告 cgroup 中所有任务（包括层级中的低端任务）在每个 CPU 中使用的
    CPU 时间（纳秒）。
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sec-cpuset}A.4. cpuset {.title}
:::
::: para
`cpuset`{.systemitem} 子系统可以为 cgroup 分配独立 CPU
和内存节点。可根据以下参数来设定 cpuset，每个参数都在 cgroup
虚拟文件系统的一个单独 *"伪文件"* 里：
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**强制参数**
:::
::: admonition
::: para
一些子系统有强制参数，在您将任务移至使用这些子系统的 cgroup
中之前，这些参数必须被设定。 例如，一个使用 `cpuset`{.systemitem}
子系统的 cgroup, 在您将任务移至此 cgroup 前，`cpuset.cpus`{.filename} 和
`cpuset.mems`{.filename} 参数必须被设定。
:::
:::
:::
::: variablelist
[cpuset.cpus（强制）]{.term}
:   ::: para
    设定该 cgroup 任务可以访问的 CPU。这是一个逗号分隔列表，格式为
    ASCII，小横线（\"`-`{.literal}\"）代表范围。例如：
    :::
    ``` programlisting
    0-2,16
    ```
    ::: para
    表示 CPU 0、1、2 和 16。
    :::
[cpuset.mems（强制）]{.term}
:   ::: para
    设定该 cgroup 中任务可以访问的内存节点。这是一个逗号分隔列表，格式为
    ASCII，小横线（\"`-`{.literal}\"）代表范围。例如：
    :::
    ``` programlisting
    0-2,16
    ```
    ::: para
    表示内存节点 0、1、2 和 16。
    :::
[cpuset.memory_migrate]{.term}
:   ::: para
    包含一个标签（`0`{.literal} 或者 `1`{.literal}），用来指定当
    `cpuset.mems`{.filename}
    的值更改时，是否应该将内存中的页迁移到新节点。默认情况下禁止内存迁移（`0`{.literal}）且页就保留在原来分配的节点中，即使此节点不再是
    `cpuset.mems`{.filename}
    指定的节点。如果启用（`1`{.literal}），系统会将页迁移到
    `cpuset.mems`{.filename}
    指定的新参数的内存节点中，如果可能的话会保留其相对位置。例如：如果页位于
    `cpuset.mems`{.filename}
    指定列表的第二个节点中，现在页将会重新分配到
    `cpuset.mems`{.filename}
    指定列表的第二个节点中，如果这个位置是可用的。
    :::
[cpuset.cpu_exclusive]{.term}
:   ::: para
    包含标签（`0`{.literal} 或者 `1`{.literal}），它可以指定：其它
    cpuset 及其父、子 cpuset 是否可共享该 cpuset 的特定
    CPU。默认情况下（`0`{.literal}），CPU 不会专门分配给某个 cpuset 。
    :::
[cpuset.mem_exclusive]{.term}
:   ::: para
    包含标签（`0`{.literal} 或者 `1`{.literal}），它可以指定：其它
    cpuset 是否可共享该 cpuset
    的特定内存节点。默认情况下（`0`{.literal}），内存节点不会专门分配给某个
    cpuset 。为某个 cpuset 保留其专用内存节点（`1`{.literal}）与使用
    `cpuset.mem_hardwall`{.filename} 参数启用内存 hardwall
    功能是一样的。
    :::
[cpuset.mem_hardwall]{.term}
:   ::: para
    包含标签（`0`{.literal} 或者
    `1`{.literal}），它可以指定：内存页和缓冲数据的 kernel 分配是否受到
    cpuset 特定内存节点的限制。默认情况下
    `0`{.literal}，页面和缓冲数据在多用户进程间共享。启用 hardwall
    时（`1`{.literal}）每个任务的用户分配可以保持独立。
    :::
[cpuset.memory_pressure]{.term}
:   ::: para
    一份只读文件，包含该 cpuset 进程生成的*"内存压力"*运行平均。启用
    `cpuset.memory_pressure_enabled`{.filename}
    时，该伪文件中的值会自动更新，除非伪文件包含 `0`{.literal} 值。
    :::
[cpuset.memory_pressure_enabled]{.term}
:   ::: para
    包含标签（`0`{.literal} 或者
    `1`{.literal}），它可以设定系统是否计算该 cgroup
    进程生成的*"内存压力"*。计算出的值会输出到
    `cpuset.memory_pressure`{.filename}，代表进程试图释放被占用内存的速率，报告值为：每秒尝试回收内存的整数值再乘以
    1000。
    :::
[cpuset.memory_spread_page]{.term}
:   ::: para
    包含标签（`0`{.literal} 或者
    `1`{.literal}），它可以设定文件系统缓冲是否应在该 cpuset
    的内存节点中均匀分布。默认情况下
    `0`{.literal}，系统不会为这些缓冲平均分配内存页面，缓冲被置于生成缓冲的进程所运行的同一节点中。
    :::
[cpuset.memory_spread_slab]{.term}
:   ::: para
    包含标签（`0`{.literal} 或者 `1`{.literal}），它可以设定是否在
    cpuset 间平均分配用于文件输入 / 输出操作的 kernel
    高速缓存板。默认情况下 `0`{.literal}，kernel
    高速缓存板不被平均分配，高速缓存板被置于生成它们的进程所运行的同一节点中。
    :::
[cpuset.sched_load_balance]{.term}
:   ::: para
    包含标签（`0`{.literal} 或者 `1`{.literal}），它可以设定 kernel
    是否在该 cpuset 的 CPU 中平衡负载。默认情况下 `1`{.literal}，kernel
    将超载 CPU 中的进程移动到负载较低的 CPU 中以便平衡负载。
    :::
    ::: para
    请注意：如果任意一个父 cgroup 启用负载平衡，那么在 cgroup
    中设定这个标签将没有任何效果，因为负载平衡已在更高层级中运行。因此，要禁用
    cgroup 中的负载平衡，则层级中的每一个父 cgroup
    负载平衡都要禁用。这里您还应该考虑是否在所有平级 cgroup
    中启用负载平衡。
    :::
[cpuset.sched_relax_domain_level]{.term}
:   ::: para
    包含 `-1`{.literal} 到一个小正数间的整数，它代表 kernel
    应尝试平衡负载的 CPU 宽度范围。如果禁用
    `cpuset.sched_load_balance`{.filename}，则该值无意义。
    :::
    ::: para
    根据不同系统构架，这个值的具体效果不同，但以下值是常用的：
    :::
    ::: segmentedlist
    ::: title
    **[cpuset.sched_relax_domain_level 值]{.title}**
    :::
      值               效果
      ---------------- ---------------------------------------------------------------
      `-1`{.literal}   平衡负载的系统默认值
      `0`{.literal}    不执行直接负载平衡；负载平衡只是阶段性的
      `1`{.literal}    对同一核中的线程进行直接负载平衡
      `2`{.literal}    对同一软件包中的线程进行直接负载平衡
      `3`{.literal}    对同一节点或者扇叶中的线程进行直接负载平衡
      `4`{.literal}    对不使用统一内存访问（NUMA）构架中的多个 CPU 进行直接负载平衡
      `5`{.literal}    对使用统一内存访问（NUMA）构架中的多个 CPU 进行直接负载平衡
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sec-devices}A.5. devices {.title}
:::
::: para
`devices`{.systemitem} 子系统允许或者拒绝 cgroup 任务存取设备。
:::
::: {#ch-Subsystems_and_Tunable_Parameters.html#important-The_devices_subsystem_is_a_Tech_Preview .important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**技术预览**
:::
::: admonition
::: para
设备白名单（Device Whitelist）（`devices`{.systemitem}）子系统被视为 Red
Hat Enterprise Linux 7 的"技术预览"。
:::
::: para
Red Hat Enterprise Linux 7 订阅服务暂不支持 *"技术预览"*
功能，可能是由于功能还不完备，所以通常不适合生产使用。但 Red Hat
在操作系统中包含这些功能，为了方便用户并提供更多功能。您会发现这些功能可能在非生产环境中很有用，也请您提供反馈意见和功能建议，以便今后全面支持"技术预览"。
:::
:::
:::
::: variablelist
[devices.allow]{.term}
:   ::: para
    指定 cgroup
    任务可访问的设备。每个条目有四个字段：*type*、*major*、*minor* 和
    *access*。*type*、*major* 和 *minor* 字段使用的值对应 〈*Linux
    分配的设备*〉（也称为〈*Linux
    设备列表*〉）指定的设备类型和节点数，如需此介绍，请访问
    。
    :::
    ::: variablelist
    [type]{.term}
    :   ::: para
        *type* 的值有三种：
        :::
        ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
        -   ::: para
            `a`{.literal} ------
            可用于所有设备，*"字符设备"*和*"块设备"* 均可
            :::
        -   ::: para
            `b`{.literal} ------ 指定一个块设备
            :::
        -   ::: para
            `c`{.literal} ------ 指定一个字符设备
            :::
        :::
    [major, ]{.term}[minor]{.term}
    :   ::: para
        *major* 和 *minor* 是〈*Linux
        分配的设备*〉指定的设备节点数。major 数和 minor
        数用冒号隔开。例如：`8`{.literal} 是指定 SCSI 磁盘驱动器的 major
        数；`1`{.literal} 是指定第一个 SCSI 磁盘驱动器中第一个分区的
        minor 数；因此 `8:1`{.literal} 完整地指定该分区，与
        `/dev/sda1`{.filename} 的一个文件系统位置对应。
        :::
        ::: para
        `*`{.literal}
        可代表所有主要或所有次要的设备节点，例如：`9:*`{.literal}（所有
        RAID 设备）或者 `*:*`{.literal}（所有设备）。