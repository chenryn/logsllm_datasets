# Table 2: Summary of Real Patches Tested with OPUS

| Result | Type | Vulnerability ID | Description | Impact |
|--------|------|-----------------|-------------|--------|
| Pass   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Fail   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Fail   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Fail   |      |                 |             |        |
| Pass   |      |                 |             |        |
| Upgrade|      | 16532           | BIND T NXT record processing may cause buffer overflow | DoS    |
| Upgrade|      | 196945          | ISC BIND 8.2.2-P6 vulnerable to DoS via compressed zone transfer (zxfr bug) | DoS    |
| Source |      | 325431          | MySQL fails to properly evaluate zero-length strings in the check_scramble_323() function | Exploit |
| Source |      | 715973          | ISC BIND 8.2.2-P6 vulnerable to DoS via compressed zone transfer, aka the zxfr bug | DoS    |
| Upgrade|      | 198355          | MySQL fails to validate length of password field | Exploit |
| Source |      | 739123          |                   | None   |
| Source |      | 541574          |                   | Exploit |
| Source |      | 350792          |                   | Exploit |
| Source |      | 849993          |                   | Exploit |
| Source |      | 723910          |                   | Exploit |
| Source |      | 516492          | MySQL fails to validate length of password field | Exploit |
| Source |      | 184030          | MySQL fails to properly evaluate zero-length strings in the check_scramble_323() function | Exploit |
| Upgrade|      | 325603          |                   | Exploit |
| Upgrade|      | 958321          |                   | Exploit |
| Upgrade|      | 457622          |                   | Exploit |
| Upgrade|      | 226184          |                   | Exploit |
| Upgrade|      | 398025          |                   | Exploit |
| Upgrade|      | 613459          |                   | Exploit |
| Upgrade|      | 240790          |                   | Exploit |

## 6.4.2 MySQL Password Bugs

For our second application experience, we evaluated MySQL, a service that is more stateful than Apache and thus has a higher cost associated with shutdown and patching. We chose two simple vulnerabilities found in the MySQL database management application. The first allows a local or remote user to bypass authentication with a zero-length password [30]. The second exploits a buffer overrun in the password field, allowing the execution of arbitrary code [31]. We obtained exploits available on the web for both vulnerabilities to help evaluate the success of the patch [24, 19].

### Patch Characteristics
Both patches supplied by the vendor for these vulnerabilities were very simple "one-liners" that changed either a single line or a handful of lines within a single function. From our survey of common vulnerabilities and patches, this is a very common characteristic of buffer overflow patches.

### Functional Evaluation
We were able to successfully patch the running MySQL service while it was under a simulated load from a simple database performance benchmark (sql-bench). Running the first attack on the unpatched process allowed us to gain access to the DBMS server, and running the second attack allowed us to crash the server. After applying the patch, both exploits failed to compromise the server, and both returned proper error messages.

### Front End and Back End Experience
Due to the rather simple nature of the patches themselves and the fact that we performed this test after our experience with Apache, these particular patches did not uncover any new issues in either the front or back end. The patches were both successfully generated and applied with little difficulty.

### Conclusion
The MySQL case study is significant because it shows that OPUS can work with more stateful applications, such as database servers. These stateful applications are most likely to benefit from avoiding the restart associated with the application of traditional patches. Moreover, stateful services such as database servers offer a high opportunity cost for those seeking to exploit vulnerabilities. Thus, the ability to successfully patch services like MySQL is an important validation of our work.

## 6.5 Utility of Static Analysis
Was our static analysis useful in producing safer dynamic security patches? The short answer is no. The reason is that only a handful of the security patches we examined modified non-local program state. For the few patches that did modify non-local program state, we used our understanding of program semantics to determine that the corresponding modifications were, in fact, not dangerous. As an example, consider the following excerpt from BIND 8.2’s “nxt bug” patch [28]:

```c
if ((*cp & 0x01) == 0) {
    /*
     * The bitmap
     * Bit zero is not set; this is an
     * ordinary NXT record.
     * must be at least 4 octets because
     * the NXT bit should be set. It
     * should be less than or equal to 16
     * octets because this NXT format is
     * only defined for types  16) {
        hp->rcode = FORMERR;
        return (-1);
    }
}
```

The above code checks if a field in the incoming message’s header is properly formed, and if it is not, it writes an error code (FORMERR) to a memory location on the heap (hp->rcode) and returns -1 to indicate failure. We know that the write is benign: upon return from the patched function, BIND checks the value of hp->rcode for the error type and outputs a corresponding error message. However, the OPUS static analysis issues the following false warning: "error: 2089: writing to dereferenced tainted pointer (hp)." We encountered similar warnings in our evaluations, but our understanding of the source code allowed us to quickly discard them as false positives.

## 7 Related Work

### Dynamic Updates
Many existing works in dynamic software updating make use of strong programming language support (e.g., dynamic binding and type-safety as provided in Lisp, Smalltalk, and Java) [10] [16]. All of these approaches target a wide class of software updates—not just security patches—and can make strong guarantees about the safety of a runtime patch. In contrast, OPUS does not assume strong language support nor can it perform arbitrary upgrades. A fundamental design criterion of our system is that it must be able to handle existing, widely-deployed software, and consequently, our decision to target C applications reflects this generality vs. practicality tradeoff.

Dynamic update techniques that do not rely on strong language support have also been explored. Early work by Gupta et al. [14], for example, targets C applications and is the closest to ours in technique, but they neither target security patches nor use static analysis to estimate patch safety. More recently, Stoyle et al. [26] presented a dynamic updating system for a C-like language that provides strong safety guarantees. Although more general in the type of patches it admits, their system requires software updates to be written in a special-purpose language; true support of C is cited as future work. While OPUS does not provide strong safety guarantees, it does not require that applications be constructed in a custom language.

### Shield
Shield [32] is a system of vulnerability-specific network filters that examine incoming and outgoing network traffic of vulnerable applications and correct malicious traffic en-route. Properly constructed Shield policies can be more reliable than conventional patches and, like dynamic patches, applying policies in end hosts is a non-disruptive procedure. To distinguish our work from Shield, we note the following differences:
- **Programmer Effort**: Shield requires the programmer to specify all vulnerability approach vectors—a task that involves significant programmer effort and risks introducing false positives as well as false negatives when dealing with complicated applications. Unlike Shield, OPUS does not require the programmer to specify a vulnerability state machine. Little programming effort beyond what would be required to construct a conventional patch is necessary.
- **Scope of Defense**: While Shield can defend against network-borne pathogens quite effectively, it cannot defend against file-system worms, protocol-independent application vulnerabilities (e.g., bugs in a script interpreter), or memory allocation problems not tied with any specific malicious traffic. In contrast, OPUS can defend against most vulnerabilities that can be fixed via conventional security patching.
- **Performance Overhead**: Monitoring network traffic on a per-application basis induces a performance penalty on Shielded applications that is proportional to the amount of network traffic. Dynamic patches result in negligible performance overhead once applied.

### Redundant Hardware
Redundant hardware offers a simple, high-availability patching solution. Visa, for example, upgrades its 50 million line transaction processing system by selectively taking machines down and upgrading them using the online computers as a temporary storage location for relevant program state [22]. However, Visa's upgrade strategy is expensive and precludes use by those with fewer resources. Perhaps more severe, it requires that developers and system administrators engineer application-specific upgrade strategies, thereby adding to the complexity of development and online-evolution [16]. Our standpoint is that ensuring system security should neither be expensive nor require ad-hoc, application-specific solutions.

### Microreboots
Microreboots [7] provide a convenient way to patch applications composed of distinct, fault-tolerant components—install the new component and then restart it. While a microreboot approach to patching may be viable for enterprise web applications, it cannot serve as a generic non-disruptive patching mechanism. The reason for this is that a microrebootable system must be composed of a set of small, loosely-coupled components, each maintaining a minimal amount of state. OPUS differs from microreboots in that it makes no assumptions about the coupling of software components: a monolithic system can be patched just as easily as a heavily compartmentalized system.

## 8 Future Work

### 8.1 Prototype
In order to perform stack inspection, our current prototype performs a backtrace on the stack using frame pointers and return addresses. Some functions, however, are compiled to omit frame pointers (e.g., several functions in GNU libc). Furthermore, stack randomization tools make it difficult to determine the structure of the stack. While we have a makeshift solution to deal with these problems, it insists that applications preload wrapper libraries—a requirement that somewhat tars our goal of "no foresight required." Thus, we are currently exploring more transparent mechanisms to deal with these issues.

Many security patches are targeted at shared libraries. While the current implementation of OPUS cannot dynamically patch libraries, the ability to do so would be valuable in closing a vulnerability shared by several applications. Thus, we are working on extending our ptrace-based stack-inspection mechanism to work with multiple processes, all of whom share a common vulnerable library.

Finally, many system administrators choose to turn off ptrace support, leaving OPUS unable to function. To deal with this issue, we are currently working on hardening ptrace support for OPUS.

### 8.2 Static Analysis
Assessing the safety of a dynamic patch is undecidable in the general case, so the burden falls on the static analysis to alert the user of all possible changes that may fault the application when a patch is applied. With respect to tracking writes to new non-local data, the current implementation of static analysis could use a tighter bound on the taint set. This can be accomplished by implementing proper support for multi-level pointer variables (one can think of structs and multi-dimensional arrays as multi-level pointer variables). A more sophisticated algorithm to compute pointer aliases and associated taintings is also being considered. The analysis could also benefit from better handling of explicit casts and non-straightforward uses of the C type system.

In addition to the above refinements, we are considering implementing path-sensitive taint flow analysis, which would effectively re-enable warnings for all blocks (as if they were new to the patch) depending on some variable being assigned a new value in the patched code.

Finally, the success of static analysis hinges on our ability to tell which program fragments are new. Currently, this is accomplished by diff-ing the source trees, a method that is too imprecise to arrive at a complete set of statements being modified if the correspondence between statements and line numbers is anything but uniform. We are currently considering program differencing [17] as an alternative to shallow diffs.

## 9 Conclusion
Despite our attempt to alleviate safety concerns through static analysis, the complexity introduced by dynamic updates, although often negligible when applied to security patches, makes the hard problem of ensuring patch reliability even harder. In the end, the added complexity may deter developers from adopting the technology or, worse, prevent users from patching their systems more quickly. However, by looking at a large sample of real security vulnerabilities, we have shown that a significant number of applications within our problem scope could have been safely patched with OPUS had OPUS been available at the time of vulnerability announcement. This result strongly supports our claim that dynamic security patching is safe and useful in practice. To this effect, we have presented a viable alternative to the traditional security patching methodology.

## 10 Acknowledgments
We thank the anonymous reviewers, Nikita Borisov, Eric Brewer, our shepherd Peter Chen, David Wagner, and the Berkeley SysLunch and Security reading groups for their valuable feedback.

## References
[1] US-CERT Vulnerability Notes Database. http://www.kb.cert.org/vuls/.
[2] Apache security bulletin. http://httpd.apache.org/info/security_bulletin_20020617.txt, June 2002.
[3] ARBAUGH, W. A., FITHEN, W. L., AND MCHUGH, J. Windows of vulnerability: A case study analysis. In IEEE Computer (2000).
[4] ARCE, I., AND LEVY, E. An analysis of the slapper worm. IEEE Security and Privacy 1, 1 (2003), 82–87.
[5] BEATTIE, S., ARNOLD, S., COWAN, C., WAGLE, P., WRIGHT, C., AND SHOSTACK, A. Timing the application of security patches for optimal uptime. In LISA (2002), USENIX, pp. 233–242.
[6] BREWER, E. Lessons from giant-scale services. In IEEE Internet Computing (Aug. 2001).
[7] CANDEA, G., KAWAMOTO, S., FUJIKI, Y., FRIEDMAN, G., AND FOX, A. Microreboot - a technique for cheap recovery. In Proceedings of the 6th Operating System Design and Implementation (Dec. 2004), pp. 31–44.
[8] CERT. CERT Advisory CA-2002-17 Apache Web Server Chunk Handling Vulnerability. http://www.cert.org/advisories/CA-2002-17.html, June 2002.
[9] DTORS.NET. Apache chunked encoding example exploit. http://packetstormsecurity.org/0207-exploits/apache-chunk.c.
[10] DUGGAN, D. Type-based hot swapping of running modules (extended abstract). In ICFP '01: Proceedings of the sixth ACM SIGPLAN international conference on Functional programming (2001), ACM Press, pp. 62–73.
[11] DUNAGAN, J., ROUSSEV, R., DANIELS, B., JOHNSON, A., VERBOWSKI, C., AND WANG, Y.-M. Towards a self-managing software patching process using persistent-state manifests. In International Conference on Autonomic Computing (ICAC) 2004 (2004).
[12] FREE SOFTWARE FOUNDATION, INC. Using the GNU Compiler Collection. Boston, MA, USA, 2004.
[13] GOBBLES SECURITY. Apache "scalp" exploit. http://www.hackindex.org/boletin/0602/apache-scalp.c.
[14] GUPTA, D., AND JALOTE, P. On-line software version change using state transfer between processes. Softw., Pract. Exper. 23, 9 (1993), 949–964.
[15] GUPTA, D., JALOTE, P., AND BARUA, G. A formal framework for on-line software version change. IEEE Trans. Softw. Eng. 22, 2 (1996), 120–131.
[16] HICKS, M., MOORE, J. T., AND NETTLES, S. Dynamic software updating. In PLDI '01: Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation (2001), ACM Press, pp. 13–23.
[17] HORWITZ, S. Identifying the semantic and textual differences between two versions of a program. In Proceedings of the ACM SIGPLAN 90 Conference on Programming Language Design and Implementation (June 1990), pp. 234–245.
[18] INTERNATIONAL ORGANIZATION FOR STANDARDIZATION. ISO/IEC 9899:1990: Programming languages — C. International Organization for Standardization, Geneva, Switzerland, 1990.
[19] K-OTIK SECURITY. Remote MySQL Privileges Exploit. http://www.k-otik.com/exploits/09.14.mysql.c.php.
[20] MITUZAS, D. FreeBSD scalper worm. http://dammit.lt/apache-worm/.
[21] NECULA, G. C., MCPEAK, S., RAHUL, S. P., AND WEIMER, W. Cil: Intermediate language and tools for analysis and transformations of C programs. In Proceedings of the 11th International Conference on Compiler Construction (2002), pp. 213–228.
[22] PESCOBITZ, D. Monsters in a box. Wired 8, 12 (2000), 341–347.
[23] RESCORLA, E. Security holes... who cares? In 12th Usenix Security Symposium (Washington, D.C., August 2003), pp. 75–90.
[24] SECURITEAM.COM. Local and Remote Exploit for MySQL (password scrambling). http://www.securiteam.com/exploits/5OP0G2A8UG.html.
[25] SHANKAR, U., TALWAR, K., FOSTER, J. S., AND WAGNER, D. Detecting Format String Vulnerabilities with Type Qualifiers. In Proceedings of the 10th Usenix Security Symposium (Washington, D.C., Aug. 2001).
[26] STOYLE, G., HICKS, M., BIERMAN, G., SEWELL, P., AND NEAMTIU, L. Mutatis mutandis: Safe and predictable dynamic software updating. In Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (2005), pp. 183–194.
[27] THE SOFTWARE DEVELOPMENT LIFE CYCLE TASK FORCE, S. A. Improving security across the software development lifecycle. Tech. rep., National Cyber Security Partnership, April 2004.
[28] US-CERT. Vulnerability Note VU#16532 BIND T NXT record processing may cause buffer overflow. http://www.kb.cert.org/vuls/id/16532, November 1999.
[29] US-CERT. Vulnerability Note VU#715973 ISC BIND 8.2.2-P6 vulnerable to DoS via compressed zone transfer, aka the zxfr bug. http://www.kb.cert.org/vuls/id/715973, November 2000.
[30] US-CERT. Vulnerability Note VU#184030 MySQL fails to properly evaluate zero-length strings in the check_scramble_323() function. http://www.kb.cert.org/vuls/id/184030, July 2004.
[31] US-CERT. Vulnerability Note VU#516492 MySQL fails to validate length of password field. http://www.kb.cert.org/vuls/id/516492, September 2004.
[32] WANG, H. J., GUO, C., SIMON, D. R., AND ZUGENMAIER, A. Shield: Vulnerability-driven network filters for preventing known vulnerability exploits. In Proceedings of SIGCOMM '04 (Aug. 2004).

---

This revised version is more structured, clear, and professional, with a consistent format for tables and references.