}
}
return nil
}
var numParams = map[string]int{"pow": 2, "sin": 1, "sqrt": 1}
我们在两个组中有选择地列出有问题的输入和它们得出的错误。Parse函数（这里没有出现）
会报出一个语法错误和Check函数会报出语义错误。
示例: 表达式求值 267
gopl
x % 2 unexpected '%'
math.Pi unexpected '.'
!true unexpected '!'
"hello" unexpected '"'
log(10) unknown function "log"
sqrt(1, 2) call to sqrt has 2 args, want 1
Check方法的参数是一个Var类型的集合，这个集合聚集从表达式中找到的变量名。为了保证
成功的计算，这些变量中的每一个都必须出现在环境变量中。从逻辑上讲，这个集合就是调
用Check方法返回的结果，但是因为这个方法是递归调用的，所以对于Check方法填充结果到
一个作为参数传入的集合中会更加的方便。调用方在初始调用时必须提供一个空的集合。
在第3.2节中，我们绘制了一个在编译器才确定的函数f(x,y)。现在我们可以解析，检查和计算
在字符串中的表达式，我们可以构建一个在运行时从客户端接收表达式的web应用并且它会绘
制这个函数的表示的曲面。我们可以使用集合vars来检查表达式是否是一个只有两个变量,x和
y的函数——实际上是3个，因为我们为了方便会提供半径大小r。并且我们会在计算前使用
Check方法拒绝有格式问题的表达式，这样我们就不会在下面函数的40000个计算过程
（100x100个栅格，每一个有4个角）重复这些检查。
这个ParseAndCheck函数混合了解析和检查步骤的过程：
gopl.io/ch7/surface
import "gopl.io/ch7/eval"
func parseAndCheck(s string) (eval.Expr, error) {
if s == "" {
return nil, fmt.Errorf("empty expression")
}
expr, err := eval.Parse(s)
if err != nil {
return nil, err
}
vars := make(map[eval.Var]bool)
if err := expr.Check(vars); err != nil {
return nil, err
}
for v := range vars {
if v != "x" && v != "y" && v != "r" {
return nil, fmt.Errorf("undefined variable: %s", v)
}
}
return expr, nil
}
示例: 表达式求值 268
gopl
为了编写这个web应用，所有我们需要做的就是下面这个plot函数，这个函数有和
http.HandlerFunc相似的签名：
func plot(w http.ResponseWriter, r *http.Request) {
r.ParseForm()
expr, err := parseAndCheck(r.Form.Get("expr"))
if err != nil {
http.Error(w, "bad expr: "+err.Error(), http.StatusBadRequest)
return
}
w.Header().Set("Content-Type", "image/svg+xml")
surface(w, func(x, y float64) float64 {
r := math.Hypot(x, y) // distance from (0,0)
return expr.Eval(eval.Env{"x": x, "y": y, "r": r})
})
}
示例: 表达式求值 269
gopl
这个plot函数解析和检查在HTTP请求中指定的表达式并且用它来创建一个两个变量的匿名函
数。这个匿名函数和来自原来surface-plotting程序中的固定函数f有相同的签名，但是它计算
一个用户提供的表达式。环境变量中定义了x，y和半径r。最后plot调用surface函数，它就是
gopl.io/ch3/surface中的主要函数，修改后它可以接受plot中的函数和输出io.Writer作为参数，
而不是使用固定的函数f和os.Stdout。图7.7中显示了通过程序产生的3个曲面。
示例: 表达式求值 270
gopl
练习 7.13： 为Expr增加一个String方法来打印美观的语法树。当再一次解析的时候，检查它
的结果是否生成相同的语法树。
练习 7.14： 定义一个新的满足Expr接口的具体类型并且提供一个新的操作例如对它运算单元
中的最小值的计算。因为Parse函数不会创建这个新类型的实例，为了使用它你可能需要直接
构造一个语法树（或者继承parser接口）。
练习 7.15： 编写一个从标准输入中读取一个单一表达式的程序，用户及时地提供对于任意变
量的值，然后在结果环境变量中计算表达式的值。优雅的处理所有遇到的错误。
练习 7.16： 编写一个基于web的计算器程序。
示例: 表达式求值 271
gopl
7.10. 类型断言
类型断言是一个使用在接口值上的操作。语法上它看起来像x.(T)被称为断言类型，这里x表示
一个接口的类型和T表示一个类型。一个类型断言检查它操作对象的动态类型是否和断言的类
型匹配。
这里有两种可能。第一种，如果断言的类型T是一个具体类型，然后类型断言检查x的动态类
型是否和T相同。如果这个检查成功了，类型断言的结果是x的动态值，当然它的类型是T。换
句话说，具体类型的类型断言从它的操作对象中获得具体的值。如果检查失败，接下来这个
操作会抛出panic。例如：
var w io.Writer
w = os.Stdout
f := w.(*os.File) // success: f == os.Stdout
c := w.(*bytes.Buffer) // panic: interface holds *os.File, not *bytes.Buffer
第二种，如果相反断言的类型T是一个接口类型，然后类型断言检查是否x的动态类型满足T。
如果这个检查成功了，动态值没有获取到；这个结果仍然是一个有相同类型和值部分的接口
值，但是结果有类型T。换句话说，对一个接口类型的类型断言改变了类型的表述方式，改变
了可以获取的方法集合（通常更大），但是它保护了接口值内部的动态类型和值的部分。
在下面的第一个类型断言后，w和rw都持有os.Stdout因此它们每个有一个动态类
型 ，但是变量w是一个io.Writer类型只对外公开出文件的Write方法，然而rw变量也
*os.File
只公开它的Read方法。
var w io.Writer
w = os.Stdout
rw := w.(io.ReadWriter) // success: *os.File has both Read and Write
w = new(ByteCounter)
rw = w.(io.ReadWriter) // panic: *ByteCounter has no Read method
如果断言操作的对象是一个nil接口值，那么不论被断言的类型是什么这个类型断言都会失
败。我们几乎不需要对一个更少限制性的接口类型（更少的方法集合）做断言，因为它表现
的就像赋值操作一样，除了对于nil接口值的情况。
w = rw // io.ReadWriter is assignable to io.Writer
w = rw.(io.Writer) // fails only if rw == nil
经常地我们对一个接口值的动态类型是不确定的，并且我们更愿意去检验它是否是一些特定
的类型。如果类型断言出现在一个预期有两个结果的赋值操作中，例如如下的定义，这个操
作不会在失败的时候发生panic但是代替地返回一个额外的第二个结果，这个结果是一个标识
类型断言 272
gopl
成功的布尔值：
var w io.Writer = os.Stdout
f, ok := w.(*os.File) // success: ok, f == os.Stdout
b, ok := w.(*bytes.Buffer) // failure: !ok, b == nil
第二个结果常规地赋值给一个命名为ok的变量。如果这个操作失败了，那么ok就是false值，
第一个结果等于被断言类型的零值，在这个例子中就是一个nil的 类型。
*bytes.Buffer
这个ok结果经常立即用于决定程序下面做什么。if语句的扩展格式让这个变的很简洁：
if f, ok := w.(*os.File); ok {
// ...use f...
}
当类型断言的操作对象是一个变量，你有时会看见原来的变量名重用而不是声明一个新的本
地变量，这个重用的变量会覆盖原来的值，如下面这样：
if w, ok := w.(*os.File); ok {
// ...use w...
}
类型断言 273
gopl
7.11. 基于类型断言区别错误类型
思考在os包中文件操作返回的错误集合。I/O可以因为任何数量的原因失败，但是有三种经常
的错误必须进行不同的处理：文件已经存在（对于创建操作），找不到文件（对于读取操
作），和权限拒绝。os包中提供了这三个帮助函数来对给定的错误值表示的失败进行分类：
package os
func IsExist(err error) bool
func IsNotExist(err error) bool
func IsPermission(err error) bool
对这些判断的一个缺乏经验的实现可能会去检查错误消息是否包含了特定的子字符串，
func IsNotExist(err error) bool {
// NOTE: not robust!
return strings.Contains(err.Error(), "file does not exist")
}
但是处理I/O错误的逻辑可能一个和另一个平台非常的不同，所以这种方案并不健壮并且对相
同的失败可能会报出各种不同的错误消息。在测试的过程中，通过检查错误消息的子字符串
来保证特定的函数以期望的方式失败是非常有用的，但对于线上的代码是不够的。
一个更可靠的方式是使用一个专门的类型来描述结构化的错误。os包中定义了一个PathError
类型来描述在文件路径操作中涉及到的失败，像Open或者Delete操作,并且定义了一个叫
LinkError的变体来描述涉及到两个文件路径的操作，像Symlink和Rename。这下面是
os.PathError：
package os
// PathError records an error and the operation and file path that caused it.
type PathError struct {
Op string
Path string
Err error
}
func (e *PathError) Error() string {
return e.Op + " " + e.Path + ": " + e.Err.Error()
}
基于类型断言识别错误类型 274
gopl
大多数调用方都不知道PathError并且通过调用错误本身的Error方法来统一处理所有的错误。
尽管PathError的Error方法简单地把这些字段连接起来生成错误消息，PathError的结构保护了
内部的错误组件。调用方需要使用类型断言来检测错误的具体类型以便将一种失败和另一种
区分开；具体的类型比字符串可以提供更多的细节。
_, err := os.Open("/no/such/file")
fmt.Println(err) // "open /no/such/file: No such file or directory"
fmt.Printf("%#v\n", err)
// Output:
// &os.PathError{Op:"open", Path:"/no/such/file", Err:0x2}
这就是三个帮助函数是怎么工作的。例如下面展示的IsNotExist，它会报出是否一个错误和
syscall.ENOENT(§7.8)或者和有名的错误os.ErrNotExist相等(可以在§5.4.2中找到io.EOF）；
或者是一个 ，它内部的错误是syscall.ENOENT和os.ErrNotExist其中之一。
*PathError
import (
"errors"
"syscall"
)
var ErrNotExist = errors.New("file does not exist")
// IsNotExist returns a boolean indicating whether the error is known to
// report that a file or directory does not exist. It is satisfied by
// ErrNotExist as well as some syscall errors.
func IsNotExist(err error) bool {
if pe, ok := err.(*PathError); ok {
err = pe.Err
}
return err == syscall.ENOENT || err == ErrNotExist
}
下面这里是它的实际使用：
_, err := os.Open("/no/such/file")
fmt.Println(os.IsNotExist(err)) // "true"
如果错误消息结合成一个更大的字符串，当然PathError的结构就不再为人所知，例如通过一
个对fmt.Errorf函数的调用。区别错误通常必须在失败操作后，错误传回调用者前进行。
基于类型断言识别错误类型 275
gopl
7.12. 通过类型断言询问行为
下面这段逻辑和net/http包中web服务器负责写入HTTP头字段（例如："Content-
type:text/html）的部分相似。io.Writer接口类型的变量w代表HTTP响应；写入它的字节最终
被发送到某个人的web浏览器上。
func writeHeader(w io.Writer, contentType string) error {
if _, err := w.Write([]byte("Content-Type: ")); err != nil {
return err
}
if _, err := w.Write([]byte(contentType)); err != nil {
return err
}
// ...
}
因为Write方法需要传入一个byte切片而我们希望写入的值是一个字符串，所以我们需要使用
[]byte(...)进行转换。这个转换分配内存并且做一个拷贝，但是这个拷贝在转换后几乎立马就
被丢弃掉。让我们假装这是一个web服务器的核心部分并且我们的性能分析表示这个内存分配
使服务器的速度变慢。这里我们可以避免掉内存分配么？
这个io.Writer接口告诉我们关于w持有的具体类型的唯一东西：就是可以向它写入字节切片。
如果我们回顾net/http包中的内幕，我们知道在这个程序中的w变量持有的动态类型也有一个
允许字符串高效写入的WriteString方法；这个方法会避免去分配一个临时的拷贝。（这可能像
在黑夜中射击一样，但是许多满足io.Writer接口的重要类型同时也有WriteString方法，包
括 ， 和 。）
*bytes.Buffer *os.File *bufio.Writer
我们不能对任意io.Writer类型的变量w，假设它也拥有WriteString方法。但是我们可以定义一
个只有这个方法的新接口并且使用类型断言来检测是否w的动态类型满足这个新接口。
通过类型断言查询接口 276
gopl
// writeString writes s to w.
// If w has a WriteString method, it is invoked instead of w.Write.
func writeString(w io.Writer, s string) (n int, err error) {
type stringWriter interface {
WriteString(string) (n int, err error)