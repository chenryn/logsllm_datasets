第16章构建桌面版C/S自动化运维平台275
、主控端、传输密钥等信息，
#排除指定的行
4bX
宗
---
## Page 304
配置文件。读配置源码如下：
276第三部分案例篇
下面是更新数据库IP 参数的代码，其中 self.DB_ip.GetValueO 为输人框的内容。
更新配置也非常简单，将 get)方法更换成 set()，再指定ini的节、键、值三个元素即
self._db_name= self.cf.get("db","db_name")
self._db_user= self.cf.get("db","db_user")
self._db_ip= self.cf.get("db","db_ip")
#读取“db”节中所有键值到指定的变量
self.upgrade_url= self.cf.get("system","upgrade_url")
self._sysUpversion= self.cf.get("system","Upversion")
self._ip=self.cf.get("system","Ip")
self._timeout=self.cf.get("system","Timeout")
self._sysheight= self.cf.get("system","Height")
self._syswidth= self.cf.get("system","Width")
self.cf.read(sys.path[0]+'/data/config.ini')
self.cf = ConfigParser.ConfigParser()
self.cf= ConfigParser.ConfigParser()
使用ConfigParser模块操作ini配置文件非常方便，通过 getO、setO方法来读取与更新
db_ip = 192.168.1.10
upgrade_url = http://update.domain.com/upgrade
secret_key =ctmj#&amp;8hrgow_^sj$ejt@9fzsmh_o)-=(byt5jmg=e3#foya6u
timeout = 10
port=11511
ip= 192.168.1.20
upversion = 10026
version=
width=1024
height=765
【 data/config.ini 】
self._db_pass=
[db]
[system]
手工修改ini文件与界面操作达到的效果是一样的，平台ini文件格式如下：
读取“system”
=servmanageruser
OManager
123456#abc
v2014
Linux公社 www.linuxidc.com
self.cf.get("db","db_pass")
节中所有键值到指定的变量
"Version")
"secret_key")
,"max_servers")
#创建ConfigParser对象
#读取配置文件
---
## Page 305
图16-10为服务器类别的XML数据文件，用来描述服务器类别信息。
见图16-9。
规范好的格式生成XML文件，结合Tree与ListBox控件实现功能分类与服务器联动，效果
16.5.3
【 data/ServerOptioninfo.xml】
服务器分类的组织形式与OMserver保持一致，即功能分类→业务分类→服务器。
为了让OManager更具通用性，平台的服务器信息依赖企业现有资产库数据，通过平台
self.cf.set("db","db_ip", self.DB_ip.GetValue())
服务器分类模块
Linux公社
应用服务器
图16-10
+
十
游戏服务器
me>测试服务器
第16章
构建桌面版C/S自动化运维平台277
---
## Page 306
见。账号“demo”的权限配置，以及在平台中展示的效果见图16-12。
段定义服务器分类ID，其中“root”为特殊权限，代表超级管理员，所有服务器资源都可
OManager可为这种权限要求提供支持，实现的思路是在users 表的privileges（权限角色）字
描述服务器的详细属性，详细内容见图16-11，属性与子元素说明见表16-2。
278
每个管理员所负责的服务器资源通常都不一样，一般以服务器功能分类的维度划分。
【data/Serverinfo.xml】（部分内容）
其中，“”标签id属性值为功能分类ID号，
属性与子元素
第三部分案例篇
option
locate
app
wip
serverserial
ip
Linux公社www.linuxidc.com
功能分类ID，与服务器功能分类的XMIL文件中AppClass标签的id属性关联
IP地址（唯一标识），内外网IP均可
服务器所处机架位置
应用名称，一般为应用域名
操作系统类别
内网IP地址
外网IP地址
主机名
图16-11服务器信息的XML文件
1
05-02-10
SN2013-08-020
表16-2属性与子元素说明
wip>218.31.20.21
app>www.domain.com
192.16
58.1.21
含
义
“应用服务器
---
## Page 307
元素与服务器类别ID 进行匹配，实现源码如下：
遍历以上提到的两个XML数据，将当前账号的权限ID列表与服务器类别ID进行关联，获
UserPrivileges[0]=="root":
class ServerClassList():
class_doc = class_tree.getroot()
class_tree = ET.parse(sys.path[0]+'/data/Serverinfo.xml')
当窗体（wx.Frame）初始化时，“服务器类别”控件会自动加载数据，实现的方法是通过
root_doc=root_tree.getroot()
import
import
import xml.etree.ElementTreeasET
def Resurn_list(self,UserPrivileges) :
lemo
adnin
sys
OS
日志服务器
中
负载均衡服务器
静态服务器
bs.domain.com
for root_child in root_doc:
serverclass=[]
ServerList_KEY=[]
管理员帐号passd管理员密码
用服务器
Linux公社
for class_child in class_doc:
serverapp=[]
serverclass.append(root_child[0].text.encode('gbk'））#追加服务器类
if not root_child.get('id')in UserPrivileges and not
continue
e10adc3949ba59abbe56e057f20f883e8115082536da7863426017e0248bf3a8root
图16-12用户权限配置及展示效果
 www.linuxidc.com
#没有权限的服务器类别将被忽略
#定义业务应用列表对象
#定义返回的服务器类别、应用信息列表对象
定义服务器类别列表对象
#获得服务器信息XML文档root节点
#获得服务器类别xML文档root节点
Privatekey私钥MD5
第16章
#遍历服务器类别节点
构建桌面版C/S自动化运维平台279
#遍历服务器信息节点
#返回服务器类别、
privileges 权限角色
应用方法
#打开服务器信息XML文档
#别名称
---
## Page 308
示例：
下载所有升级包到指定的位置，完成整个升级过程。下面是升级描述文件updateMS.xml的
并进行分析，获取所有需要升级的程序包，包括远程URL及下载本地存储地址，最后遍历
服务器，由管理员触发升级操作，再通过urlib模块实现HTTP方式下载updateMS.xml文件
后即可完成升级。OManager系统升级流程图见图16-13。
级包放在远端，由管理员触发升级操作，同时不影响当前的其他操作，重启OManager程序
重启计算机等操作。为了解决此问题，OManager在系统升级方面结合了B/S 的模式，将升
16.5.4
280
相比B/S 结构程序，C/S 结构的另一缺点是不方便升级，部分软件甚至要求重新安装、
【 tmp/updateMS.xml 】
OManager系统升级的原理：首先将升级描述文件（updateMS.xml）、升级包上传至版本
c.com']]...]
#返回结果串格式：[L'应用服务器'，["www.a.com'，"www.b.com']],[数据库服务器',["www.
第三部分案例篇
系统升级功能
return ServerList_KEY
Linux公社www.linuxidc.com
serverclass=[]
ServerList_KEY.append(serverclass)
serverclass.append(serverapp)
OManager
OManager
if class_child[6].text==root_child.get('id'）:
#通过index（）方法产生的异常判断当前是否已经存在于 serverapp 中
except:
try:
serverapp.index(class_child[4].text.encode('gbk'))
图16-13系统升级流程图
（2）请求更新清单
(1)下载更新描述文件
updateMS.xml
（3）下载更新包
版本服务器（HTTP)
---
## Page 309
统已成功升级。
主机，见图16-17。再查看data/config.ini中的upversion 键值，已经改为“10026"，说明系
图16-16。
版本号时将触发升级。
“10026"；用户会根据data/confg.ini中的upversion 键值与最新版本号进行匹配，当小于最新
三个，变更项包括了添加主机信息、主程序优化等，下面介绍升级步骤。
URL文件与本地路径建议保持一致，可以提高系统的可维护性，如本地的“data/Serverinfo.
运行“OManager.10026.exe”，在主程序左侧的服务器列表框中多了一台“218.31.20.11”
升级结束后，平台根目录下多了一个“OManager.10026.exe”最新版本的程序包，见
3）点击“系统升级”工具栏图标进行升级，升级成功后如图16-15所示。
1）上传升级相关文件到版本服务器指定位置，具体见图16-14。
在此配置中，需要升级的程序包为OManager.exe、Serverinfo.xml、ServerOptioninfo.xml
在此XML文件中，localsrc与remotesrc分别表示本地存储地址及远程URL路径，远程
/oManager.exe
0Manager.10026.exe
/data/ServerOptioninfo.xml
data/ServerOptioninfo.xml
/data/Serverinfo.xml
data/Serverinfo.xml
Linux公社www.linuxidc.com
pgrade/
图16-14远程升级包存储路径
-updateMs.xml
-OManager.exe
lato
-ServerOptioninfo.xml
Serverinfo.xml
第16章
构建桌面版C/S自动化运维平台
281
---
## Page 310
282
第三部分案例篇
Linux公社 www.linuxidc.com
：刘天斯
LO
wxbase30u_vc90.dll
wxbase30u_net_vc90.dll
python27.dll
msvcp90.dll
OManager.exe
MD5sum.exe
操作员：root
图16-16升级后的文件列表
图16-15系统升级成功
OManager服务器管理平台2014
2013/12/282:21
2013/12/28 2:21
2012/4/1023:31
2013/8/415:37
2013/8/415:37
2013/8/415:37
2014/7/1212:20
2014/7/1212:26
2013/7/2121:07
2014-07-1212:25:46
---
## Page 311
XML文件的分析。
urllib.urlopen(url).readO方法实现HTTP协议文件下载，使用xml.etree.ElementTree 模块实现
OK|WX.ICON_ERROR)
介绍完系统升级的操作过程，下面介绍OManager实现升级功能的源码分析，
def load_data(self,event):
except Exception,e:
try:
except Exception,e:
try:
Linux公社www.linuxidc.com
return
self.Destroy()
up_doc=update_tree.getroot()
import xml.etree.ElementTree as ET
url=self.updateURL+"/updateMS.xm1"
if self.button.GetLabel()==u"关闭":
for cur_child in up_doc:
return
self.Destroy()
update_tree = ET.parse(sys.path[0]+'/tmp/updateMs.xml')
if not self.download（url,localfile):
upgrade_count+=1
#打开升级描述文件，
return
self.Destroy()
url=self.updateURL+cur_child[l].text
#download（）方法实现下载
#遍历描述文件，获取升级描述文件中所有程序包的远程及本地路径，调用
218.31.20.11
服务恭列表
企业托管
务母类制
图16-17
退役服务器
测试服务器
负载均衡服务器
静态服务器
功能服务器
为下面的分析做好准备
更新后的主机列表
#系统升级方法
第16章
口
欢迎口
构建桌面版C/S自动化运维平台
#指定升级描述文件远程及本地路径
#下载升级描述文件
使用模块
·
283
---
## Page 312
也非常简单，前提是需要了解各控件的属性及方法，其中控件值会被当成模块参数通过rpyc
器）、wxListBox（列表控件）、wxTextCtrl（文本输人控件）等，当然，扩展更多的控件类型
块采用XRC设计，在主程序中按功能分类导人，效果见图16-18和图16-19。
册见http://wiki.wxwidgets.org/Using_XML_Resources_with_XRC。OManager平台将功能模
大大提高。具体做法是通过XML格式定义系统界面，当程序运行时再载入。XRC的使用手
统的角色，
wx Widgets,
基于HTML表单来定义，而OManager基于XRC。XRC（XMLResource）的设计来源于
16.5.5
284第三部分案例篇
：OManager平台提供了最多2个控件参数的定义，控件类别支持wxSpinCtrl（微调控制
OManager提供客户端模块开发支持，
库服务
服务器
客户端模块编写
服务器管理
目的是将业务逻辑与界面进行分离，好处是代码的结构会更加清晰，可读性也会
原理是将界面设计的工作从程序中独立出来，类似于Django开发框架中模板系
功电能
event.Skip()
finally:
except Exception,e:
v201
本功能