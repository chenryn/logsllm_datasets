(2 rows)
StartatransactionthatwillreduceBob’sbalance:
=> BEGIN;
=> UPDATE accounts SET amount = amount - 100 WHERE id = 3;
Atthesametime,theothertransactionwillbecalculatingtheinterestforallcus-
tomeraccountswiththetotalbalanceof$,ormore:
56
2.3 IsolationLevelsinPostgreSQL
=> UPDATE accounts SET amount = amount * 1.01
WHERE client IN (
SELECT client
FROM accounts
GROUP BY client
HAVING sum(amount) >= 1000
);
Theoperatorexecutionvirtuallyconsistsoftwostages.First,therowstobe
updatedareselectedbasedontheprovidedcondition. Sincethefirsttransaction
isnotcommittedyet,thesecondtransactioncannotseeitsresult,sotheselection
ofrowspickedforinterestaccrualisnotaffected.Thus,Bob’saccountssatisfythe
condition, and his balance must be increased by $ once the  operation
completes.
Atthesecondstage,theselectedrowsareupdatedonebyone. Thesecondtrans-
actionhastowaitbecausetherowwithid=3islocked: itisbeingupdatedbythe
firsttransaction.
Meanwhile,thefirsttransactioncommitsitschanges:
=> COMMIT;
=> SELECT * FROM accounts WHERE client = 'bob';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−−
2 | bob | 202.0000
3 | bob | 707.0000
(2 rows)
Ontheonehand,thecommandmustnotseeanychangesmadebythefirst
transaction.Butontheotherhand,itmustnotloseanycommittedchanges.
Oncethelockisreleased,theoperatorre-readstherowtobeupdated(but p.
onlythisrow!).Asaresult,Bobgets$ofinterest,basedonthetotalof$.But
ifhehad$,hisaccountsshouldnothavebeenincludedintothequeryresults
inthefirstplace.
Thus,ourtransactionhasreturnedincorrectdata: differentrowshavebeenread
from different snapshots. Instead of a lost update, we observe the read skew
anomalyagain.
57
Chapter2 Isolation
Lostupdates. However,thetrickofre-readingthelockedrowwillnothelpagainst
lostupdatesifthedataismodifiedbydifferentoperators.
p. Hereisanexamplethatwehavealreadyseen. Theapplicationreadsandregisters
(outsideofthedatabase)thecurrentbalanceofAlice’saccount:
=> BEGIN;
=> SELECT amount FROM accounts WHERE id = 1;
amount
−−−−−−−−
800.00
(1 row)
Meanwhile,theothertransactiondoesthesame:
=> BEGIN;
=> SELECT amount FROM accounts WHERE id = 1;
amount
−−−−−−−−
800.00
(1 row)
Thefirsttransactionincreasesthepreviouslyregisteredvalueby$andcommits
thischange:
=> UPDATE accounts SET amount = 800.00 + 100 WHERE id = 1
RETURNING amount;
amount
−−−−−−−−
900.00
(1 row)
UPDATE 1
=> COMMIT;
Thesecondtransactiondoesthesame:
=> UPDATE accounts SET amount = 800.00 + 100 WHERE id = 1
RETURNING amount;
amount
−−−−−−−−
900.00
(1 row)
UPDATE 1
58
2.3 IsolationLevelsinPostgreSQL
=> COMMIT;
Unfortunately,Alice has lost $. The database system does not know that the
registeredvalueof$issomehowrelatedtoaccounts.amount,soitcannotpre-
ventthelostupdateanomaly. AttheRead Committedisolationlevel,thiscodeis
incorrect.
Repeatable Read
Nonon-repeatableandphantomreads. Asitsnamesuggests,theRepeatableRead1
isolation level must guarantee repeatable reading. Let’s check it and make sure
thatphantomreadscannotoccureither. Forthispurpose,wearegoingtostarta
transactionthatwillrevertBob’saccountstotheirpreviousstateandcreateanew
accountforCharlie:
=> BEGIN;
=> UPDATE accounts SET amount = 200.00 WHERE id = 2;
=> UPDATE accounts SET amount = 800.00 WHERE id = 3;
=> INSERT INTO accounts VALUES
(4, 'charlie', 100.00);
=> SELECT * FROM accounts ORDER BY id;
id | client | amount
−−−−+−−−−−−−−−+−−−−−−−−
1 | alice | 900.00
2 | bob | 200.00
3 | bob | 800.00
4 | charlie | 100.00
(4 rows)
Inthesecondsession,let’sstartanothertransaction,withtheRepeatableReadlevel
explicitlyspecifiedinthecommand(thelevelofthefirsttransactionisnot
important):
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SELECT * FROM accounts ORDER BY id;
1 postgresql.org/docs/14/transaction-iso.html#XACT-REPEATABLE-READ
59
Chapter2 Isolation
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−−
1 | alice | 900.00
2 | bob | 202.0000
3 | bob | 707.0000
(3 rows)
Nowthefirsttransactioncommitsitschanges,andthesecondtransactionrepeats
thesamequery:
=> COMMIT;
=> SELECT * FROM accounts ORDER BY id;
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−−
1 | alice | 900.00
2 | bob | 202.0000
3 | bob | 707.0000
(3 rows)
=> COMMIT;
Thesecondtransactionstillseesthesamedataasbefore:neithernewrowsnorrow
updatesarevisible.Atthisisolationlevel,youdonothavetoworrythatsomething
willchangebetweenoperators.
p. Serializationfailuresinsteadoflostupdates. Aswehavealreadyseen,iftwotrans-
actionsupdateoneandthesamerowattheReadCommittedlevel,itcancausethe
read skew anomaly: the waiting transaction has to re-read the locked row, so it
seesthestateofthisrowatadifferentpointintimeascomparedtootherrows.
SuchananomalyisnotallowedattheRepeatableReadisolationlevel,andifitdoes
happen,thetransactioncanonlybeabortedwithaserializationfailure.Let’scheck
itoutbyrepeatingthescenariowithinterestaccrual:
=> SELECT * FROM accounts WHERE client = 'bob';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
2 | bob | 200.00
3 | bob | 800.00
(2 rows)
=> BEGIN;
60
2.3 IsolationLevelsinPostgreSQL
=> UPDATE accounts SET amount = amount - 100.00 WHERE id = 3;
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> UPDATE accounts SET amount = amount * 1.01
WHERE client IN (
SELECT client
FROM accounts
GROUP BY client
HAVING sum(amount) >= 1000
);
=> COMMIT;
ERROR: could not serialize access due to concurrent update
=> ROLLBACK;
Thedataremainsconsistent:
=> SELECT * FROM accounts WHERE client = 'bob';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
2 | bob | 200.00
3 | bob | 700.00
(2 rows)
The same error will be raised by any concurrent row updates,even if they affect
differentcolumns.
Wewillalsogetthiserrorifwetrytoupdatethebalancebasedonthepreviously
storedvalue:
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SELECT amount FROM accounts WHERE id = 1;
amount
−−−−−−−−
900.00
(1 row)
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
61
Chapter2 Isolation
=> SELECT amount FROM accounts WHERE id = 1;
amount
−−−−−−−−
900.00
(1 row)
=> UPDATE accounts SET amount = 900.00 + 100.00 WHERE id = 1
RETURNING amount;
amount
−−−−−−−−−
1000.00
(1 row)
UPDATE 1
=> COMMIT;
=> UPDATE accounts SET amount = 900.00 + 100.00 WHERE id = 1
RETURNING amount;
ERROR: could not serialize access due to concurrent update
=> ROLLBACK;
Apracticalinsight: ifyourapplicationisusingtheRepeatableReadisolationlevel
forwritetransactions,itmustbereadytoretrytransactionsthathavebeencom-
pletedwithaserializationfailure. Forread-onlytransactions,suchanoutcomeis
impossible.
Write skew. As we have seen,the Postgre implementation of the Repeatable
Readisolationlevelpreventsalltheanomaliesdescribedinthestandard. Butnot
allpossibleones: nooneknowshowmanyofthemexist.However,oneimportant
factisprovedforsure: snapshotisolationdoesnotpreventonlytwoanomalies,no
matterhowmanyotheranomaliesareoutthere.
Thefirstoneiswriteskew.
Let’sdefinethefollowingconsistencyrule: itisallowedtohaveanegativebalance
insomeofthecustomer’saccountsaslongasthetotalbalanceisnon-negative.
ThefirsttransactiongetsthetotalbalanceofBob’saccounts:
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
62
2.3 IsolationLevelsinPostgreSQL
=> SELECT sum(amount) FROM accounts WHERE client = 'bob';
sum
−−−−−−−−
900.00
(1 row)
Thesecondtransactiongetsthesamesum:
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SELECT sum(amount) FROM accounts WHERE client = 'bob';
sum
−−−−−−−−
900.00
(1 row)
Thefirsttransactionfairlyassumesthatitcandebitoneoftheaccountsby$:
=> UPDATE accounts SET amount = amount - 600.00 WHERE id = 2;
The second transaction comes to the same conclusion, but debits the other ac-
count:
=> UPDATE accounts SET amount = amount - 600.00 WHERE id = 3;
=> COMMIT;
=> COMMIT;
=> SELECT * FROM accounts WHERE client = 'bob';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−
2 | bob | −400.00
3 | bob | 100.00
(2 rows)
Bob’stotalbalanceisnownegative,althoughbothtransactionswouldhavebeen
correctifrunseparately.
Read-onlytransaction anomaly. The read-onlytransaction anomalyisthesecond
and the last one allowed at the Repeatable Read isolation level. To observe this
anomaly,wehavetorunthreetransactions: twoofthemaregoingtoupdatethe
data,whilethethirdonewillberead-only.
63
Chapter2 Isolation
Butfirstlet’srestoreBob’sbalance:
=> UPDATE accounts SET amount = 900.00 WHERE id = 2;
=> SELECT * FROM accounts WHERE client = 'bob';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
3 | bob | 100.00
2 | bob | 900.00
(2 rows)
The first transaction calculates the interest to be accrued on Bob’s total balance
andaddsthissumtooneofhisaccounts:
=> BEGIN ISOLATION LEVEL REPEATABLE READ; -- 1
=> UPDATE accounts SET amount = amount + (
SELECT sum(amount) FROM accounts WHERE client = 'bob'
) * 0.01
WHERE id = 2;
ThenthesecondtransactionwithdrawssomemoneyfromBob’sotheraccountand
commitsthischange:
=> BEGIN ISOLATION LEVEL REPEATABLE READ; -- 2
=> UPDATE accounts SET amount = amount - 100.00 WHERE id = 3;
=> COMMIT;
Ifthefirsttransactiongetscommittedatthispoint,therewillbenoanomalies: we
couldassumethatthefirsttransactioniscommittedbeforethesecondone(butnot
viceversa—thefirsttransactionhadseenthestateofaccountwithid=3beforeany
updatesweremadebythesecondtransaction).
But let’s imagine that at this very moment we start a ready-only transaction to
queryanaccountthatisnotaffectedbythefirsttwotransactions:
=> BEGIN ISOLATION LEVEL REPEATABLE READ; -- 3
=> SELECT * FROM accounts WHERE client = 'alice';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−
1 | alice | 1000.00
(1 row)
Andonlynowwillthefirsttransactiongetcommitted:
64
2.3 IsolationLevelsinPostgreSQL
=> COMMIT;
Whichstateshouldthethirdtransactionseeatthispoint? Havingstarted,itcould
seethechangesmadebythesecondtransaction(whichhadalreadybeencommit-
ted),butnotbythefirstone(whichhadnotbeencommittedyet). Butaswehave
alreadyestablished,thesecondtransactionshouldbetreatedasifitwerestarted
afterthefirstone.Anystateseenbythethirdtransactionwillbeinconsistent—this
isexactlywhatismeantbytheread-onlytransactionanomaly:
=> SELECT * FROM accounts WHERE client = 'bob';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
2 | bob | 900.00
3 | bob | 0.00
(2 rows)
=> COMMIT;
Serializable
The Serializable1 isolation level prevents all possible anomalies. This level is vir-
tuallybuiltontopofsnapshotisolation. Thoseanomaliesthatdonotoccuratthe
Repeatable Readisolationlevel(suchasdirty,non-repeatable,orphantomreads)
cannotoccurattheSerializableleveleither.Andthosetwoanomaliesthatdooccur