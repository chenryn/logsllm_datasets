can be launched anytime, anywhere. It can work with the spam-
ming attack (§3.2) or any other ongoing data services, thus forming
a stealthy accounting attack. Moreover, since the IP packet delivery
is connectionless, it is thus hard, if not impossible, for the gateway
alone to differentiate whether the zero-valued TTL is malicious (in-
curred by improper initial value set by attackers) or not (caused by
delivery over too many hops).
3.3.3 Experimental Validation
We conﬁrm that this hit-and-no-touch attack is feasible. This
also veriﬁes the accounting loophole that is based on the local view
at the core gateway. We vary the TTL values of the spam pack-
ets sent by the adversary, and observe the volume gap between the
gateway and the phone. The spamming volume is 5MB. We run
experiments for both carriers at ten locations. Figure 11 shows the
 6
 5
 4
 3
 2
 1
 0
)
B
M
(
e
m
u
l
o
V
VSpamming
VCGW-VUE
 6
 5
 4
 3
 2
 1
 0
)
B
M
(
e
m
u
l
o
V
VSpamming
VCGW-VUE
 0
 5  10  15  20  25  30  35
TTL (OP-I)
 0
 5
 10
 15
TTL (OP-II)
 20
Figure 11: Accounting volume gaps under varying TTL values
in OP-I (left), OP-II (right).
result at one location; the results at other locations are similar. It
validates its feasibility for both operators. There are three feasi-
ble TTL choices for OP-I: 26, 27, and 28, and only one feasible
TTL value for OP-II: 18. Once the right TTL parameter is used,
the phone suffers from unexpected, even unknown overcharging.
Since same results are observed at all locations for each carrier, the
feasible TTL value can be reused by other conspirators.
3.4 Root Causes
We now reexamine the root causes to MDC vulerabilities in order
to learn the fundamental limits and gain the solution insights. It
turns out that, both the cellular networks and the Internet design
fundamentals may have to share the blame.
On the cellular side, two design guidelines for MDC systems
may accidentally make possible the insecurity loopholes. First,
MDC performs accounting operations based on the local view at
the core gateway. This effectively produces an open-loop charg-
ing solution. Without feedback from mobile users, it is difﬁcult
to conduct proper authorization for the billed trafﬁc.
It is also
challenging to enforce accurate control for the recorded trafﬁc vol-
ume. Second, while cellular networks adopt multi-layer solutions
to security fences, they do not stipulate cross-layer security bind-
ing. There is no mandate on runtime binding for security functions.
This practice opens loopholes in authentication and authorization.
When digging even deeper, we ﬁnd out that, current MDC design
is largely taken from the legacy 2G cellular network. Note that
2G uses circuit switching for voice calls. In contrast, 3G/4G has
migrated to offer data service using packet switching. The open-
loop charging design works well for circuit-switched 2G networks,
since the user has to establish virtual circuits (VCs) before calls.
VCs inherently offer the closed-loop feedback between users and
the network. However, closed-loop feedback no longer exists in
IP-based connectionless data delivery over 3G/4G networks.
On the Internet side, two features of network-layer IP data de-
livery contribute to the vulnerability. One is that IP uses the push
delivery model at the network layer. Using IP, any device on the
Internet can initiate packet delivery and push the data to a cho-
sen target without prior consent. This helps in authorization and
spamming threats. The other is that intermediate IP routers are not
required or unable to verify the authenticity of the source IP ad-
dress. IP address spooﬁng is possible during data communications
between a mobile device and an Internet host.
In a nutshell, the MDC security problems are rooted in the inap-
propriate charging architecture (which is good for CS voice trans-
mission) is used for PS data transmission.
4. DEFENSE SOLUTIONS
In this section, we propose defense measures to protect the MDC
system. Our solution also seeks to be 3GPP standard compatible,
thus facilitating fast deployment. Figure 12 shows the overall solu-
tion framework, which has three main components:
733Authenticated,(cid:1)
Veriﬁed ID(cid:1)
Runtime(cid:1)
Access Control(cid:1)
Accounting (cid:1)
Correction(cid:1)
P-GW(cid:1)
Secure Binding(cid:1)
Fraud Detector(cid:1)
Event Alerter(cid:1)
Always implcit (de) author.(cid:1)
Explicit Deauthorization(cid:1)
Event Alerter & (cid:1)
Volume Corrector(cid:1)
Mischarging(cid:1)
Handler(cid:1)
Figure 12: Secure charging solution framework.
• Authenticated and Veriﬁed ID.
Secure binding is enforced at
the core gateway. The charging ID for each UE is authenticated and
veriﬁed cross-layer for each packet.
• Coordinated Runtime Access Control.
It allows for the UE
to collaborate on access control. Implicit authorization is always
applied on the data plane, while explicit de-authorization is trig-
gered on demand over the control plane.
It thus strikes balance
between minimizing control overhead and shielding from attacks.
• Accounting Alerts and Error Correction.
It seeks to min-
imize charge errors (mainly overcharging) based on the feedback
from both end-device and network components. It is both proac-
tive when preventing over-billing through the alerting function and
reactive when offsetting extra charges via the correction function.
We apply three guidelines in our solution. The ﬁrst is coordi-
nated design between data and control planes. In authentication,
the control plane authenticates the charging ID, whereas the data
plane veriﬁes it for each packet delivery. In authorization, the data
plane offers implicit authorization for data ﬂows, while the con-
trol plane activates explicit de-authorization for spam whenever de-
tected. This way, concerted actions are taken on both planes. The
second is to introduce infrastructure-assisted feedback. The feed-
back facilitates users and the infrastructure to share consistent view
on charging. It also empowers users to detect and defend against
malicious attacks. The third is to enforce cross-layer security bind-
ing. The data delivery spans layers across multiple components. To
harness existing security mechanisms for MDC, we enforce secure
cross-layer bindings at runtime.
Note that other alternatives are also possible. For example, the
operator may apply deterrence by detecting and punishing them.
Compared with them, ours takes the collaborative approach be-
tween the infrastructure carrier and the cellular user. It leverages
the increasing capability of smart end devices. Moreover, the user
knows best regarding whether a message is spam or not. The infras-
tructure alone may not be able to handle all threats. Furthermore,
punishing attackers a posteriori is ﬁne with users with monthly data
plans, but may not work well with the pay-per-use model.
4.1 ID Authentication and Veriﬁcation
In MDC, two IDs, i.e., the Tunnel ID and the IP address, oper-
ating at the GTP-U layer and the network layer, respectively, may
serve as the charging ID. The Tunnel ID is both authenticated on the
control plane and veriﬁed for each packet on the data plane. This
is because it is bound to the physical link by the infrastructure. In
contrast, the IP address may not be veriﬁed for every packet.
Our solution is to apply cross-layer binding by tying the network-
layer IP with the lower-layer bearer information (i.e., Tunnel ID).
The secure binding is kept at the gateway. Consequently, secure
binding between the packet’s IP address and the UE’s authenticated
IP is assured. With this binding in place, upon each packet arrival,
the gateway checks whether its carried source IP is identical to the
IP stored in the UE’s EPS bearer. If different, the UE is considered
unauthentic and charged while the packet is discarded.
An alternative approach is to perform MDC directly based on
the trustworthy Tunnel ID. However, this solution undermines the
ﬂexibility offered by the current scheme. For example, it restricts
the charging function only at cellular domain gateways, not any IP-
enabled components (e.g., border gateways). Moreover, it cannot
well support existing IP-based or ﬂow-based charging.
Implementation using 3G/4G mechanisms.
The above design
can be implemented using the rules offered by the PCC (Policy
Control and Charging) mechanism [6]. The PCC rules deﬁne a
set of data ﬂow ﬁlters and taken actions. Originally, they serve
as packet ﬁlters and impose diversiﬁed charging policies. They are
deﬁned during the initial bearer establishment and kept in the bearer
at the gateway. We leverage these rules to impose minimal change
to the gateway.
To ensure secure binding, we deﬁne PCC rules with two action
types: pass and drop. Each pass-type rule must have the authenti-
cated IP, not a wildcard (∗), speciﬁed in the source IP ﬁeld. A drop-
type rule is deﬁned to ﬁlter out all the trafﬁc not from the authenti-
cated source. This is done via adding a PCC rule with (srcIP= ∗)
into the EPS bearer, as the lowest-priority rule. For example, the
simplest case has the following two rules: Rule 1 (srcIP, *,*,*,* :
PASS); Rule 2 (*,*,*,*,* : DROP). As a result, the spoofed pack-
ets will be mapped to the drop-type rule without matching all pre-
ceding, high-priority pass-type rules. The spoofed packets will be
discarded. To prevent network resource from being wasted, their
authentic senders can be penalized by being billed of those dis-
carded packets. We note that Cisco provides a source IP address
veriﬁer in [15]. It uses an additional module, but not the standard-
compliant mechanism.
We implement ID authentication and veriﬁcation at the gate-
ways, instead of base stations, because the essential information is
only available at gateways but not at base stations. The legitimate
IP address for each device is maintained in its EPS bearer, which is
only stored at gateways. Moreover, we leverage existing charging
operations to lower the processing overhead. Note that the mapping
from the source IP address to the user is performed in the current
charging procedures. On top of this mapping, our solution merely
adds a comparison on whether the source IP address is identical to
that in the EPS bearer. The operation of comparison is of low cost
compared with that of creating another mapping. Our evaluation
also conﬁrms that our scheme incurs little overhead (§5).
4.2 Coordinated Runtime Access Control
The current practice suffers from authorization frauds when
wrong access is initially granted or the access becomes malicious
afterwards. Without sufﬁcient information, the network infrastruc-
ture is often unable to react to these frauds correctly or timely, thus
incurring improper charges. To ﬁx it, we utilize user feedback to
help the infrastructure to determine whether the access should be
granted or denied in time. It not only assures the users to pay for
what they want, but also respect and protect their rights to not pay
for what they do not want. A ﬂow is the basic granularity for access
control. We need to address two issues: (1) how to to (de)authorize
a ﬂow? (2) how to detect a malicious ﬂow and interact with the
infrastructure? The solution should also be efﬁcient and scalable.
Coordinated (De)Authorization. Access control is coordinated
between data and control planes. The data plane uses implicit au-
thorization at runtime, thus incurring low overhead and being more
scalable. Explicit de-authorization is invoked on demand on the
control plane, in order to block certain unwanted ﬂow.
734Our data-plane access control still uses the current practice. A
ﬂow is authorized once any packet from it is sent uplink by the
UE. It is considered terminated and thus de-authorized upon time-
out, when no packets are seen before the timer expires. This soft-
state based de-authorization incurs no signaling overhead. Note
that, however, adversaries may still inject spam messages before
timeout, and thus this soft-state de-authorization is not bullet proof
against attacks.
We further propose an on-demand triggered, explicit de-
authorization scheme on the control plane. It relies on the signaling
packets of de-authorization requests sent by the UE. They can be
activated on demand when the UE wants to terminate a ﬂow. This
explicit de-authorization scheme allows for the user to conduct ac-
cess control at will. It is deemed most effective when the UE de-
tects spam and immediately de-authorizes the attacker. However,
this explicit approach does incur extra signaling overhead. It should
not be taken in common usage scenarios without attacks.
Note that attackers cannot purposely drop the de-authorization
signaling messages in cellular networks, since all data transmis-
sions are regulated by the base station and smartphones cannot con-
trol the radio channel. Moreover, our explicit de-authorization does
require a supporting component of fraud detector at the UE. It de-
tects two types of malicious trafﬁc. One is an unauthorized ﬂow,
which matches no corresponding transport-layer ﬂow at the UE.
When a spam packet arrives at the UE, a speciﬁc ICMP message
of “PORT UNREACHABLE” is generated. The detection is thus
simple by monitoring whether any such message is generated. The
other is the spam that abuses an “authorized” ﬂow. In this case,
only transport or application protocols can tell whether the arrived
packets are indeed spam or not. For example, the transport layer
discards invalid TCP packets (e.g., in the usage-inﬂation attack [22]
or our proposed MMS-based threat). The detection can be based on
packet drops. For instance, the ﬂow is identiﬁed as a spam when
its discarded trafﬁc volume exceeds certain threshold over a chosen
time window. In case of small threshold, false positive may occur
though it is rare. We thus introduce another mechanism by call-
ing for user awareness. Upon detecting suspicious spam, an alert
message pops up and waits for user response. Automatic blocking
is activated when the threshold is larger than a certain value. Note
that spamming is fundamentally determined by the IP push delivery
model, and no approach can completely eliminate the spamming.
The threshold greatly limits the spamming scale.
If the attacker
changes its IP address or port number, it is blocked by NAT. A new
attack has to be re-launched.
This detection works together with alarms and user feedback to
prevent false positive conditions; It reports suspicious trafﬁc and
calls for user decision (block, by default). Afterwards, the UE com-
municates the control-plane access control module to de-authorize
the corresponding ﬂow. For ﬂexibility, the detection can be done
via third-party detectors with appropriate permission control.
Implementation using 3G/4G mechanism. The above solu-
tion can also be implemented by leveraging the PCC mechanism.
We use the dynamic PCC rules and add three event triggers for
implicit authorization, implicit de-authorization, and explicit de-
authorization, respectively. Upon the arrival of an unauthorized
uplink packet at the gateway, one pass-type rule is added to au-
tomatically authorize the ﬂow. The second event is triggered by
the inactivity timeout of a ﬂow ﬁlter. When triggered, the ﬁlter is
deleted. For explicit de-authorization, we reuse an existing event
trigger, Resource Modification Request, to let the UE
communicate with the PCC module. The UE speciﬁes which ﬂow
to be de-authorized in the request, and then this ﬂow ﬁlter is deleted
by PCC. The number of PCC rules is limited by 255 in the standard,