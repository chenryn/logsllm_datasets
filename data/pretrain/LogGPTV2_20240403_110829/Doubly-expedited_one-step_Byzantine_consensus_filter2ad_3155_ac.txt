#1st(J)(J(cid:48)) ≥ #1st(J)(I(cid:48)) − t and #v(J(cid:48)) ≤ #v(I(cid:48)). It follows that #1st(J)(J(cid:48)) − #v(J(cid:48)) > 0, and thus we
get 1st(J) = 1st(J(cid:48)).
t . It suﬃces to show that if P 2f req(J)∧∃I : J ≤ I∧J(cid:48) ≤ I, then 1st(J) = 1st(J(cid:48)).
LA4: Consider J, J(cid:48) ∈ V n
Since P 2f req(J) holds, #1st(J)(J) − #v(J) > 2t also holds for any v (cid:54)= 1st(J). As J ≤ I and J ∈ V n
t ,
at most t entries of I, which are occupied by ⊥ in J, can contain the value v. Hence, #v(I) ≤ #v(J) + t.
This implies that #1st(J)(I) − #v(I) > t holds. Therefore, 1st(J) = 1st(I). Similarly, since J(cid:48) ≤ I and
J(cid:48) ∈ V n
t , at most t entries of J(cid:48), which are occupied by the value 1st(J) in I, can contain ⊥. It follows
that #1st(J)(J(cid:48)) ≥ #1st(J)(I) − t and #v(J(cid:48)) ≤ #v(I). Thus, we get #1st(J)(J(cid:48)) − #v(J(cid:48)) > 0. This
implies that 1st(J) = 1st(J(cid:48)).
LU5: This property is trivially satisﬁed since 1st(J) is the most frequent non ⊥ value in J.
2
3.4 Example 2: Privileged-Value-Based Condition-Sequence Pair
In this subsection, we present another legal condition-sequence pair (P prv) constructed from a privileged-
value-based condition, and prove its legality.
In some practical agreement problems such as atomic
commitment, a single value (e.g., Commit) is often proposed by most of the processes. The previous
results [2, 6] have shown that, if this value is assigned some privilege, it is possible to expedite the
decision. Let us assume that there is a value (say m) that is privileged among the set of all proposal
values. Each process knows the value m a priori. Then, the privileged-value-based condition Cprv(m)
can
be deﬁned as follows:
d
Cprv(m)
d
= {I ∈ V n|#m(I) > d}
Note that Cprv(m)
consensus in failure prone asynchronous systems where at most d processes can crash.
also belongs to d-legal conditions [10], which are necessary and suﬃcient to solve the
d
Using this condition, we can construct the privileged-value-based condition-sequence pair P prv as
follows:
where
P prv = (S1, S2) = ((C1
0 , C1
1 , C1
2 , ...C1
k , ...C1
t ), (C2
0 , C2
1 , C2
2 , ...C2
k , ...C2
t ))
k = Cprv(m)
C1
3t+k
and C2
k = Cprv(m)
2t+k
Also, we deﬁne the related parameters P 1prv, P 2prv and F prv as follows:
• P 1prv(J) ≡ #m(J) > 3t.
• P 2prv(J) ≡ #m(J) > 2t.
7
•
 m
the most freq.
non default val.in J
F prv(J) ≡
if #m(J) > t
otherwise
Notice that, since there are at most t Byzantine processes, the assumption n > 5t is required to make
P prv meaningful.
Theorem 2 The condition-sequence pair P prv is legal.
Proof LT1: We have to show that if #m(I) > 3t + k ∧ dist(J, I) ≤ k, then #m(J) > 3t holds.
Let I satisﬁes #m(I) > 3t + k. Since dist(J, I) ≤ k, #m(J) ≥ #m(I)− k. Hence, #m(J) > 3t + k− k.
Thus we obtain #m(J) > 3t.
LT2: We have to show that if #m(I) > 2t + k ∧ dist(J, I) ≤ k, then #m(J) > 2t holds.
This proof is almost the same as the proof of LT1 (with only replacing C1
k and 3t with C2
k and 2t
respectively).
t . We have to show that if P 1prv(J) ∧ ∃I, I(cid:48) : J ≤ I ∧ J(cid:48) ≤ I(cid:48) ∧ dist(I, I(cid:48)) ≤ t,
LA3: Consider J, J(cid:48) ∈ V n
then F prv(J) = F prv(J(cid:48)).
Since P 1prv(J) holds, #m(J) > 3t and F prv(J) = m also hold. From I ≥ J, it follows that
#m(I) > 3t. Then, since dist(I, I(cid:48)) ≤ t, I(cid:48) can diﬀer from I in at most t entries and those diﬀer-
ent entries may contain m in I. Hence, #m(I(cid:48)) ≥ #m(I) − t. Thus we obtain #m(I(cid:48)) > 2t. From
J(cid:48) ∈ V n
t and I(cid:48) ≥ J(cid:48), it follows that at most t entries of J(cid:48), which are occupied by value m in I(cid:48), can
contain the default value. Therefore, #m(J(cid:48)) ≥ #m(I(cid:48)) − t.
It implies that #m(J(cid:48)) > t, and hence
F prv(J(cid:48)) = m = F prv(J).
LA4: Consider J, J(cid:48) ∈ V n
t . We have to show that if P 2prv(J) ∧ ∃I : J ≤ I ∧ J(cid:48) ≤ I, then F prv(J) =
F prv(J(cid:48)).
Since P 2prv(J), it follows that #m(J) > 2t and F prv(J) = m holds. From I ≥ J, it is implied that
#m(I) > 2t. Then, as J(cid:48) ≤ I and J(cid:48) ∈ V n
t , at most t entries of J(cid:48), which are occupied by m in I, can
contain the ⊥ value. Therefore, #m(J(cid:48)) ≥ #m(I) − t. and we thus obtain #m(J(cid:48)) > t. It follows that
F prv(J(cid:48)) = m = F prv(J).
LU5: This property is trivially satisﬁed because F prv(J) is either m (when #m(J) > t) or the most
frequent non default value in J.
2
4 Algorithm DEX
In this section, we present a generic doubly-expedited algorithm DEX for one-step Byzantine consensus
that can be instantiated with any legal condition-sequence pair.
Figure 1 provides the pseudocode of the algorithm. It uses an extra communication mechanism, called
Identical Broadcast, that corresponds to the primitives Id-Send() and Id-Receive(). In contrast, P-Send()
and P-Receive() correspond to the standard send/receive primitives. The underlying consensus is served
by two primitives UC propose(v) and UC decide(v) which correspond to proposal of a value v and decision
by v respectively.
Informally, the identical broadcast guarantees the delivery of the same message to all processes, even
if the message is sent by a faulty process. Figure 2 shows how the Identical broadcast works. Its formal
speciﬁcation is described as follows:
8
Function Consensus(vi)
init: J1i, J2i ←⊥n , decidedi ← False , proposedi ← False
begin
1 : Upon Propose(vi) do:
2 :
3 :
4 :
J1i[i] ← vi ; J2i[i] ← vi
P-Send(vi) to all processes;
Id-Send(vi) to all processes;
J1i[j] ← vj;
if |J1i| ≥ n − t and P1(J1i) and decidedi = False then
5 : Upon P-Receive(vj) from any process pj do:
6 :
7 :
8 :
9 :
Decidei(F (J1i)); decidedi = True
end if
J2i[j] ← vj;
if
|J2i| ≥ n − t and proposedi = False then
UC propose (F (J2i));
proposedi = True;
10 : Upon Id-Receive(vj) from any process pj do:
11 :
12 :
13 :
14 :
15 :
16 :
17 :
18 :
Decidei(F (J2i)); decidedi = True
end if
if |J2i| ≥ n − t and P2(J2i) and decidedi = False then
end if
19 : Upon UC decide(v) do:
20 :
21 :
22 :
if decidedi = False then
Decidei(v) ; decidedi = True
end if
end
Figure 1: Algorithm DEX: Doubly-Expedited Adaptive algorithm for Byzantine Consensus
Termination If a correct process invokes Id-Send(m), Id-Receive(m) occurs on all correct processes.
Agreement If two correct processes invoke Id-Receive(m1) and Id-Receive(m2) for the same sender,
m1 = m2 holds.
Validity For any sender pj, a correct process pi invokes Id-Receive(m) exactly once and only if pj invokes
Id-Send(m).
Notice that the use of the identical broadcast does not introduce any additional assumptions to
the system. This identical broadcast can be implemented just by using only the standard send/receive
primitives. The implementation is easily obtained as a weaker form of simulating identical Byzantine
failure model on the top of general Byzantine failure models[1]. The implementation of identical broadcast
is given in the appendix. It should be noted that, in that implementation, a single communication step of
the identical broadcast is realized by two communications steps of standard send/receive primitives. In
our algorithm, the identical broadcast is used to develop the two-step decision scheme. In that sense, our
two-step decision scheme can be regarded as a one-step decision scheme in identical Broadcast system.
In our algorithm, the part made up of lines 5-9 corresponds to one-step decision, and the another one
made up of lines 10-18 corresponds to two-step decision. The algorithm works as follows: Each process
9
Figure 2: How Identical broadcast works: Let P 1, P 2, P 4 are correct and P 3 is faulty; Even if P 3 sends
diﬀerent messages to P 1 and P 4, they receive the same message.
pi starts a consensus execution with the invocation of Consensus(vi) where vi is its initial proposal value.
The process pi sends vi to other processes by using both P-send() and Id-send() concurrently, and waits
for receiving messages from other processes. By receiving messages, each pi constructs two views J1i and
J2i, which correspond to one- and two-step decisions respectively. The views J1i and J2i are maintained
incrementally. That is, they are updated at the reception of each message. When at least n− t messages
are received at J1i, pi tries to make a decision by evaluating P 1(J1i). If P 1(J1i) is true, pi immediately
decides F (J1i), that is, it decides in one-step. Otherwise, pi continues to update J1i. Similarly, when pi
receives at least n− t messages at J2i, it activates the underlying consensus with F (J2i). In addition, pi
evaluates P 2(J2i) to check whether J2i is suﬃcient for taking decision. If P 2(J2i) is true, pi immediately
decides F (J2i), that is, it decides in two steps. Otherwise, pi repeats the check with each update at J2i.
Also, when the underlying consensus decides, each pi simply borrows the decision of the underlying
consensus unless it has decided already.
Notice that, unlike the existing Byzantine algorithms, DEX allows the processes to collect messages
from all correct processes. This is the real secret of its ability to provide fast termination for more number
of inputs.
4.0.1 Correctness.
We prove the correctness of our algorithm by showing that it provides one-step or two-step decision when
it is instantiated with any legal condition-sequence pair (S1, S2). In the following proofs, let I be the
actual input vector and I 1
i be vectors obtained respectively from the views J1i, J2i by replacing the
default values with corresponding values in I.
i , I 2
Lemma 1 (Termination) Each correct process pi eventually decides.
Proof Since there are at most t Byzantine processes, each correct process pi receives messages from