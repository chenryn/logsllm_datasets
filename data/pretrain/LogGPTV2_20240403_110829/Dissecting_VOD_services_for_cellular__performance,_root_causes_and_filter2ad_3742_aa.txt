title:Dissecting VOD services for cellular: performance, root causes and
best practices
author:Shichang Xu and
Subhabrata Sen and
Zhuoqing Morley Mao and
Yunhan Jia
Dissecting VOD Services for Cellular: Performance, Root Causes
and Best Practices
Shichang Xu
University of Michigan
Subhabrata Sen
AT&T Labs – Research
Z. Morley Mao
University of Michigan
Yunhan Jia
University of Michigan
changing network conditions. To build an HAS service, app develop-
ers have to determine a wide range of critical components spanning
from the server to the client such as encoding scheme, adaptation
logic, buffer management and network delivery scheme. The design
involves (i) considering various service-specific business and tech-
nical factors, e.g. nature of content, device type, service type and
customers’ network performance, and (ii) making complex deci-
sions and tradeoffs along multiple dimensions including efficiency,
quality, and cost, and across layers (application, network) and dif-
ferent entities. It is thus challenging to achieve designs with good
QoE properties, especially given the variable network conditions
in cellular networks.
ABSTRACT
HTTP Adaptive Streaming (HAS) has emerged as the predominant
technique for transmitting video over cellular for most content
providers today. While mobile video streaming is extremely popu-
lar, delivering good streaming experience over cellular networks
is technically very challenging, and involves complex interacting
factors. We conduct a detailed measurement study of a wide cross-
section of popular streaming video-on-demand (VOD) services to
develop a holistic understanding of these services’ design and per-
formance. We identify performance issues and develop effective
practical best practice solutions to mitigate these challenges. By ex-
tending the understanding of how different, potentially interacting
components of service design impact performance, our findings can
help developers build streaming services with better performance.
CCS CONCEPTS
• Networks → Mobile networks; Network measurement;
KEYWORDS
Cellular, Adaptive Streaming, VOD, Video Streaming
ACM Reference Format:
Shichang Xu, Z. Morley Mao, Subhabrata Sen, and Yunhan Jia. 2017. Dis-
secting VOD Services for Cellular: Performance, Root Causes and Best
Practices. In Proceedings of IMC ’17. ACM, New York, NY, USA, 15 pages.
https://doi.org/10.1145/3131365.3131386
1 INTRODUCTION
Mobile video streaming has become increasingly popular in recent
years. It now dominates cellular traffic, accounting for 60% of all
mobile data traffic and is predicted to grow to 78% by 2021 [10].
However, delivering good QoE over cellular networks is technically
challenging. A recent Internet-scale study indicates that 26% of
smartphone users face video streaming QoE problems daily [12].
HTTP Adaptive Streaming (HAS) (see § 2.1) has been adopted for
streaming video over cellular by most services including Amazon,
Hulu and Netflix. It enables apps to adapt the streaming quality to
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’17, November 1–3, 2017, London, UK
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5118-8/17/11...$15.00
https://doi.org/10.1145/3131365.3131386
It is important to develop support for developers to navigate this
complex design space. Understanding the performance and QoE
implications of their design decisions helps developers make more
informed and improved designs. Towards this goal, in this work,
we conduct a detailed measurement study of 12 popular streaming
video-on-demand (VOD) services to develop a holistic understand-
ing of their respective designs and associated performances.
1.1 Contributions
Methodology. The closed, proprietary nature of commercial ser-
vices makes it very challenging to gain deep visibility into their
designs. Approaches like code disassembly suffer from limitations
such as code obfuscation. Other approaches that either leverage
app-specific features such as URL patterns [19, 28] or rely on deep
modifications to the apps [18, 27] cannot be generally applied.
To address these challenges, we develop a general methodology
that leverages common properties of commodity VOD apps to de-
rive valuable insights into the proprietary VOD services without
access to the source code (§ 2.2). Based on the observation that
most popular VOD services adopt well-known HAS protocols, i.e.,
HTTP Live Streaming (HLS), SmoothStreaming (SS) and Dynamic
Adaptive Streaming over HTTP (DASH) [1, 15, 45], we analyze the
network traffic and extract useful information regarding the con-
tent download process, including timing, quality and size of video
chunks downloaded. In addition, detailed analysis of the displayed
User Interface (UI) elements for these apps reveals that they use
common methods to inform users about the playback, including
playback progress and stall events. We therefore develop techniques
to extract this information. Correlating the network and UI, our
approach is able to effectively extract critical video QoE metrics
such as video quality, stall duration, initial delay and number of
track switches. In addition, we can infer the apps’ internal buffer
state which is critical to gain insights into their behavior.
To derive insights into critical aspects of service design such as
the adaptation logic, we craft targeted black-box experiments to
IMC ’17, November 1–3, 2017, London, UK
Shichang Xu, Z. Morley Mao, Subhabrata Sen, and Yunhan Jia
stress-test the apps by emulating various network conditions and
manipulating the communication between the client and server
(e.g., by altering the manifest file). By analyzing the reaction of the
apps, we are able to glean critical properties of their design.
In this paper, we focus primarily on VOD services on the Android
platform. However, the measurement methodologies we outline
are generally applicable to other platforms (e.g., iOS) and services
such as live streaming as they use the same standards (e.g., iOS AV
Foundation uses HLS) and substantially similar approaches.
QoE issues and best practices. This paper shows i) the differ-
ent points in the design space adopted by popular services, ii) the
different performance tradeoffs they entail. By examining the abso-
lute and relative performances across different points in the design
space, developers are able to get more insights into the implications
of design decisions they make, and hopefully make more informed
design decisions.
Our measurements cover both individual components across
the end-to-end delivery path of HAS and their interactions. This is
key to developing insights for better designs across components to
realize an overall enhanced QoE. In contrast, different entities in-
volved in the streaming system such as the content provider, ISP and
app developers have traditionally possessed only partial views and
optimized specific factors somewhat independently, based mainly
on their limited views. This can sometimes lead to suboptimal
performance as end-to-end QoE is ultimately determined by the
interplay across all the different factors. Towards filling this gap,
this cross-sectional study across different services develops unique
insights by revealing QoE implications of different points in the de-
sign space, shedding light on industry best practices by comparing
across different services and identifying outlier behaviors.
In this study, we observe interesting behaviors that span a wide
range of design decisions and further identify a number of QoE-
impacting issues and derive best practices for improvement. We
summarize some of the most interesting findings as follows.
• To improve quality, some apps perform Segment Replacement
(SR)- replacing a downloaded segment1 with a fresh download for
the same position in the video at a potentially different quality.
We uncover inefficiencies with existing SR schemes that result in
substantial additional data usage, identify root causes, and pro-
pose practical SR schemes that achieve better tradeoffs between
QoE and data usage (§ 4.1).
• Some services use Variable Bitrate (VBR) encoding1. However,
when determining the next segment to download, they do not
account for the substantial size differences across different seg-
ments in a track1, which can be a factor of 2 or more. This can
lead to suboptimal video QoE. We propose that apps should ex-
pose such segment information to the adaptation logic and adopt
an actual bitrate aware track selection algorithm (§ 4.2).
• Players typically wait until a minimum number of seconds (i.e.,
startup buffer duration) of video is fetched before initiating play-
back. We observe that some apps constantly stall at the beginning
of playback when network bandwidth is relatively low, even with
observed startup buffer values as other apps which don’t exhibit
1These terminologies are defined in §2.1
Figure 1: Relevant design factors in HAS service.
this issue. Our evaluation suggests the need for an additional con-
straint on when playback should begin – a minimum threshold
on the number of segments downloaded (§ 4.3).
• Inadequate synchronization between multiple TCP connections
and audio/video downloads can lead to QoE impairments (stalls)
for some apps. This highlights the need for better coordination
between the parallel download processes for better QoE (§ 3.2).
• A suboptimal buffer-based download strategy waits until the
buffer is close to empty, before it restarts downloading. The
corresponding app suffered more frequent stalls compared to the
others with higher resuming thresholds. Increasing this resuming
threshold would keep the buffer more occupied and be a practical
way to reduce the chances of stalls and provide the client extra
headroom to adapt to transient network variability (§ 3.3.2).
2 BACKGROUND AND METHODOLOGY
We provide some background on HTTP Adaptive Streaming and
describe our methodology to extract QoE information from the
popular VOD services.
2.1 HTTP Adaptive Streaming Overview
Video streaming over the best-effort Internet is challenging, due
to variability in available network bandwidth. To address such
problems and provide satisfactory QoE, HTTP Adaptive Stream-
ing (HAS) has been proposed to adapt the video bitrate based on
network conditions.
In HAS, videos are encoded into multiple tracks. Each track
describes the same media content, but with a different quality level.
The tracks are broken down into multiple shorter segments and the
client can switch between tracks on a per-segment basis. Media
meta-information including the available tracks, segment durations
and URIs is described in a metafile called manifest or playlist.
The manifest specifies a bitrate for each track (referred to as de-
clared bitrate) as an estimation of the network bandwidth required
to stream the track. Note that this value can be different from the
actual bandwidth needed for downloading individual segments es-
pecially in the case of Variable Bitrate (VBR) encoding. How to set
this declared bitrate is left to the specific service, and a common
practice is to use a value in the neighborhood of the peak bitrate of
the track. In addition to the declared bitrate, some HAS implemen-
tations also provide more fine-grained information about segment
sizes, such as average actual segment bitrate. For services with VBR
encoding, as the actual bitrate of segments in the same track can
Dissecting Cellular VOD Services
IMC ’17, November 1–3, 2017, London, UK
have significant differences, such fine-grained bitrate information
can potentially help players better estimate the required network
bandwidth to download each track and make more informed deci-
sion on track selection. We shall further look into this in § 4.2.
At the beginning of a session, the player downloads the manifest
from the server, and uses the HTTP/HTTPS protocol to fetch media
segments from the server. Each segment needs to be downloaded
completely before being played. To absorb network variance and
minimize stall events, the player usually maintains a buffer and
tries to fetch segments ahead of playback time. During streaming,
the client-side adaptation logic (often proprietary) determines what
track to fetch next based on a variety of factors, such as the esti-
mated available network bandwidth and playback buffer occupancy.
There exist a number of different implementations of the above
high-level HAS design, involving different file format and protocols.
HTTP Live Streaming (HLS) [45], Dynamic Adaptive Streaming
over HTTP (DASH) [1] and Smooth Streaming [15] are the most
well known of these.
Regardless of implementation details, a wide range of factors
spanning the server, the network and the client and across the trans-
port and application layers can be customized based on the system
designers’ considerations around different tradeoffs to optimize
streaming performance. For instance, the client can adopt different
track selection algorithms to balance video quality and stalls. We
summarize the relevant factors in Figure 1.
We explore a wide range of popular mobile VOD services, in-
cluding Amazon Video, DIRECTV, FOX NOW, Hulu, HBO GO,
HBO NOW, MAX GO, Netflix, NBC Sports, Showtime Anytime
and XFINITY TV. In this paper, we focus on 12 of these2 covering
a wide diversity of points in the design space, and study them in
depth. These services individually have millions of app store down-
loads, and collectively span a wide range of content types including
movies, TV shows and sports videos.
2.2 Methodology overview
Understanding the design choices and characterizing the QoE of
these proprietary video streaming services are challenging, as they
do not readily expose such information. To address the challenge,
we develop a general methodology to extract information from the
traffic and app UI events. To capture important properties of the
adaptation logic designs, we further enhance our methodology with
carefully crafted black-box testing to stress test the players.
Figure 2 shows an overview of the methodology. The proxy
between the server and the user device emulates various network
conditions (§ 2.6) and extracts video segment information from
the traffic flow (§ 2.3). The on-device UI monitor monitors critical
UI components (§ 2.4), such as the seekbar in the VOD apps that
advances with the playback to inform users the playback progress
and allow users to move to a new position in the video.
We combine information from the traffic analyzer and UI monitor
to characterize QoE. While developing objective measures of overall
user QoE for video streaming is still an active research area, it is
commonly acknowledged that QoE is highly correlated to a few
metrics listed below.
2One of the services adopts both DASH and SmoothStreaming. As they have very
different design on both server and client side, we treat them as two different services.
Figure 2: Methodology overview.
• Video quality. One commonly used metric to character-
ize video quality is average video bitrate, i.e. the average
declared bitrate of segments shown on the screen. A low
video bitrate indicates poor video quality, leading to poor
user experience. However, the average bitrate by itself is
not sufficient to accurately reflect user experience. As we
discuss in more detail in § 4.1.3, user experience is more im-
pacted by the playback of low quality, low bitrate tracks. It is
therefore important to reduce the duration of streaming such
tracks. To account for this, another metric is the percentage
of playtime when low quality tracks are streamed.
• Video track switches. Frequent track switches impair user
experience. One metric to characterize this is the frequency
of switches. In addition, users are more sensitive to switches
between non-consecutive tracks.
• Stall duration. This is the total duration of stall events
during a session. A longer stall duration means higher inter-
ruptions for users and leads to poorer user experience.
• Startup delay. The startup delay measures the duration
from the time when the users click the “play" button to the
time when the first frame of video is rendered on the screen
and the video starts to play. A low startup delay is preferred.
Each metric by itself provides only a limited viewpoint and all
of them need to be considered together to characterize overall QoE.
In our methodology, the Traffic Analyzer obtains detailed segment
information, such as bitrate and duration etc, and therefore can be
used to characterize video quality and track switches. The UI Moni-
tor on the device tracks the playback progress from the player’s UI,
and is able to characterize the stall duration and initial delay. Fur-
thermore, combining the information from both the traffic analyzer
and the UI monitor, we can infer the player buffer occupancy across
time (§ 2.5), which critically allows us to reason about, identify and
unveil underlying causes of many QoE issues.
To understand complex designs such as the adaptation logic, the
proxy uses the Network Emulator and Manifest Modifier to conduct
black-box testing. The network emulator performs traffic shaping
to emulate various network conditions. By carefully designing the
bandwidth profile, we are able to force players to react and under-
stand their design. In some cases, we use the manifest modifier
to modify the manifest from the server and observe players’ be-
havior to understand how client side players utilize information
from servers. For example, in § 4.2 with the manifest modification,
IMC ’17, November 1–3, 2017, London, UK
Shichang Xu, Z. Morley Mao, Subhabrata Sen, and Yunhan Jia
we are able to explore whether players take actual track bitrate
information into consideration when performing track selection.
In the following, we provide details of components used in the
measurement methodology.
2.3 Traffic analyzer
We develop the network traffic analyzer to perform man-in-the-
middle analysis on the proxy and extract manifest and segment
information from flows between the server and client.
We observe that all the studied apps adopted one or more among
the three popular HAS techniques, i.e. HLS, DASH, and Smooth-
Streaming. We denote the four services that use DASH as D1 to
D4, another six that use HLS as H1 to H6, the two services that use
SmoothStreaming as S1 and S2.
We specifically developed the traffic analyzer to be generally
applied for all VOD services that adopt the three popular standard
HAS techniques. The traffic analyzer parses the manifest based
on the specification of the HAS protocols, and builds the mapping
between HTTP requests and segments. Since the three streaming
protocol implementations have some different properties, the traffic
analyzer extracts QoE information with different methodologies
based on the protocol each service adopts. We shall mainly describe
how the traffic analyzer works with the two most popular protocol