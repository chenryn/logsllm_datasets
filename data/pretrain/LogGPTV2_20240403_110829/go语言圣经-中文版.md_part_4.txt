dup uniq
该程序使用的结构和包是个参考范例，可以方便地修改。
的第一个版本打印标准输入中多次出现的行，以重复次数开头。该程序将引入 语
dup if
句， 数据类型以及 包。
map bufio
gopl.io/ch1/dup1
// Dup1 prints the text of each line that appears more than
// once in the standard input, preceded by its count.
package main
import (
"bufio"
"fmt"
"os"
)
func main() {
counts := make(map[string]int)
input := bufio.NewScanner(os.Stdin)
for input.Scan() {
counts[input.Text()]++
}
// NOTE: ignoring potential errors from input.Err()
for line, n := range counts {
if n > 1 {
fmt.Printf("%d\t%s\n", n, line)
}
}
}
正如 循环一样， 语句条件两边也不加括号，但是主体部分需要加。 语句
for if if
的 部分是可选的，在 的条件为 时执行。
else if false
map存储了键/值（key/value）的集合，对集合元素，提供常数时间的存、取或测试操作。键
可以是任意类型，只要其值能用 运算符比较，最常见的例子是字符串；值则可以是任意类
==
型。这个例子中的键是字符串，值是整数。内置函数 创建空 ，此外，它还有别的
make map
作用。4.3节讨论 。
map
（译注：从功能和实现上说， 的 类似于 语言中的 ，Python语言中
Go map Java HashMap
的 ， 语言中的 ，通常使用 实现。遗憾的是，对于该词的翻译并不统
dict Lua table hash
查找重复的行 27
gopl
一，数学界术语为 映射 ，而计算机界众说纷纭莫衷一是。为了防止对读者造成误解，保留不
译。）
每次 读取一行输入，该行被当做 ，其对应的值递增。 语句
dup map counts[input.Text()]++
等价下面两句：
line := input.Text()
counts[line] = counts[line] + 1
中不含某个键时不用担心，首次读到新行时，等号右边的表达式 的值将被
map counts[line]
计算为其类型的零值，对于int`即0。
为了打印结果，我们使用了基于 的循环，并在 这个 上迭代。跟之前类
range counts map
似，每次迭代得到两个结果，键和其在 中对应的值。 的迭代顺序并不确定，从实践
map map
来看，该顺序随机，每次运行都会变化。这种设计是有意为之的，因为能防止程序依赖特定
遍历顺序，而这是无法保证的。(译注：具体可以参见这里
http://stackoverflow.com/questions/11853396/google-go-lang-assignment-order)
继续来看 包，它使处理输入和输出方便又高效。 类型是该包最有用的特性之
bufio Scanner
一，它读取输入并将其拆成行或单词；通常是处理行形式的输入最简单的方法。
程序使用短变量声明创建 类型的变量 。
bufio.Scanner input
input := bufio.NewScanner(os.Stdin)
该变量从程序的标准输入中读取内容。每次调用 ，即读入下一行，并移除行末
input.Scan()
的换行符；读取的内容可以调用 得到。 函数在读到一行时返回 ，不
input.Text() Scan true
再有输入时返回 。
false
类似于C或其它语言里的 函数， 函数对一些表达式产生格式化输出。该函
printf fmt.Printf
数的首个参数是个格式字符串，指定后续参数被如何格式化。各个参数的格式取决于“转换字
符”（conversion character），形式为百分号后跟一个字母。举个例子， 表示以十进制形
%d
式打印一个整型操作数，而 则表示把字符串型操作数的值展开。
%s
有一大堆这种转换，Go程序员称之为动词（verb）。下面的表格虽然远不是完整的规
Printf
范，但展示了可用的很多特性：
查找重复的行 28
gopl
%d 十进制整数
%x, %o, %b 十六进制，八进制，二进制整数。
%f, %g, %e 浮点数： 3.141593 3.141592653589793 3.141593e+00
%t 布尔：true或false
%c 字符（rune） (Unicode码点)
%s 字符串
%q 带双引号的字符串"abc"或带单引号的字符'c'
%v 变量的自然形式（natural format）
%T 变量的类型
%% 字面上的百分号标志（无操作数）
的格式字符串中还含有制表符 和换行符 。字符串字面上可能含有这些代表不可
dup1 \t \n
见字符的转义字符（escap sequences）。默认情况下， 不会换行。按照惯例，以字
Printf
母 结尾的格式化函数，如 和 ，都采用 的格式化准则。
f log.Printf fmt.Errorf fmt.Printf
而以 结尾的格式化函数，则遵循 的方式，以跟 差不多的方式格式化参数，并
ln Println %v
在最后添加一个换行符。（译注：后缀 指 ， 指 。）
f fomart ln line
很多程序要么从标准输入中读取数据，如上面的例子所示，要么从一系列具名文件中读取数
据。 程序的下个版本读取标准输入或是使用 打开各个具名文件，并操作它们。
dup os.Open
gopl.io/ch1/dup2
查找重复的行 29
gopl
// Dup2 prints the count and text of lines that appear more than once
// in the input. It reads from stdin or from a list of named files.
package main
import (
"bufio"
"fmt"
"os"
)
func main() {
counts := make(map[string]int)
files := os.Args[1:]
if len(files) == 0 {
countLines(os.Stdin, counts)
} else {
for _, arg := range files {
f, err := os.Open(arg)
if err != nil {
fmt.Fprintf(os.Stderr, "dup2: %v\n", err)
continue
}
countLines(f, counts)
f.Close()
}
}
for line, n := range counts {
if n > 1 {
fmt.Printf("%d\t%s\n", n, line)
}
}
}
func countLines(f *os.File, counts map[string]int) {
input := bufio.NewScanner(f)
for input.Scan() {
counts[input.Text()]++
}
// NOTE: ignoring potential errors from input.Err()
}
函数返回两个值。第一个值是被打开的文件( ），其后被 读取。
os.Open *os.File Scanner
返回的第二个值是内置 类型的值。如果 等于内置值 （译注：相当于
os.Open error err nil
其它语言里的NULL），那么文件被成功打开。读取文件，直到文件结束，然后调用 关
Close
闭该文件，并释放占用的所有资源。相反的话，如果 的值不是 ，说明打开文件时出
err nil
错了。这种情况下，错误值描述了所遇到的问题。我们的错误处理非常简单，只是使
用 与表示任意类型默认格式值的动词 ，向标准错误流打印一条信息，然
Fprintf %v
后 继续处理下一个文件； 语句直接跳到 循环的下个迭代开始执行。
dup continue for
查找重复的行 30
gopl
为了使示例代码保持合理的大小，本书开始的一些示例有意简化了错误处理，显而易见的
是，应该检查 返回的错误值，然而，使用 读取文件过程中，不大可能出
os.Open input.Scan
现错误，因此我们忽略了错误处理。我们会在跳过错误检查的地方做说明。5.4节中深入介绍
错误处理。
注意 函数在其声明前被调用。函数和包级别的变量（package-level entities）可
countLines
以任意顺序声明，并不影响其被调用。（译注：最好还是遵循一定的规范）
是一个由 函数创建的数据结构的引用。 作为为参数传递给某函数时，该函数
map make map
接收这个引用的一份拷贝（copy，或译为副本），被调用函数对 底层数据结构的任何修
map
改，调用者函数都可以通过持有的 引用看到。在我们的例子中， 函数
map countLines
向 插入的值，也会被 函数看到。（译注：类似于C++里的引用传递，实际上指
counts main
针是另一个指针了，但内部存的值指向同一块内存）
的前两个版本以"流”模式读取输入，并根据需要拆分成多个行。理论上，这些程序可以处
dup
理任意数量的输入数据。还有另一个方法，就是一口气把全部输入数据读到内存中，一次分
割为多行，然后处理它们。下面这个版本， ，就是这么操作的。这个例子引入
dup3
了 函数（来自于 包），其读取指定文件的全部内容， 函
ReadFile io/ioutil strings.Split
数把字符串分割成子串的切片。（ 的作用与前文提到的 相反。）
Split strings.Join
我们略微简化了 。首先，由于 函数需要文件名作为参数，因此只读指定文
dup3 ReadFile
件，不读标准输入。其次，由于行计数代码只在一处用到，故将其移回 函数。
main
gopl.io/ch1/dup3
查找重复的行 31
gopl
package main
import (
"fmt"
"io/ioutil"
"os"
"strings"
)
func main() {
counts := make(map[string]int)
for _, filename := range os.Args[1:] {
data, err := ioutil.ReadFile(filename)
if err != nil {
fmt.Fprintf(os.Stderr, "dup3: %v\n", err)
continue
}
for _, line := range strings.Split(string(data), "\n") {
counts[line]++
}
}
for line, n := range counts {
if n > 1 {
fmt.Printf("%d\t%s\n", n, line)
}
}
}
函数返回一个字节切片（byte slice），必须把它转换为 ，才能
ReadFile string
用 分割。我们会在3.5.4节详细讲解字符串和字节切片。
strings.Split
实现上， 、 和 都使
bufio.Scanner ioutil.ReadFile ioutil.WriteFile
用 的 和 方法，但是，大多数程序员很少需要直接调用那些低级
*os.File Read Write
（lower-level）函数。高级（higher-level）函数，像 和 包中所提供的那
bufio io/ioutil
些，用起来要容易点。
练习 1.4： 修改 ，出现重复的行时打印文件名称。
dup2
查找重复的行 32
gopl
1.4. GIF动画