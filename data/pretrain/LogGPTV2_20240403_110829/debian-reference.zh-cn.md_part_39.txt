现代高速CD-ROM光驱，你可以使用”setcd -x 2”降低速度，来读取不当压缩的CDROM光盘。
9.6.10 固态硬盘优化
固态硬盘（Solidstatedrive，SSD）目前可以被自动检测。
在/etc/fstab里面，将易失性数据路径挂载为”tmpfs”，可以减少不必要的磁盘访问来阻止磁盘损耗。
9.6.11 使用 SMART 预测硬盘故障
你可以使用兼容SMART的smartd(8)后台守护进程（daemon）来监控和记录你的硬盘。
1. 在BIOS中启用SMART功能。
2. 安装smartmontools软件包。
3. 通过df(1)列出硬盘驱动并识别它们。
• 让我们假设要监控的硬盘为“/dev/hda”。
4. 检查“smartctl -a /dev/hda”的输出，看SMART功能是否已启用。
• 如果没有，通过“smartctl -s on -a /dev/hda”启用它。
5. 通过下列方式运行smartd(8)后台守护进程（daemon）。
• 消除/etc/default/smartmontools”文件中“start_smartd=yes”的注释。
• 通过“sudo systemctl restart smartmontools”重新启动smartd(8)后台守护进程（daemon）。
提示
smartd(8)后台守护进程（daemon）可以使用/etc/smartd.conf文件进行自定义，文件中包含了相关的警告。
9.6.12 通过 $TMPDIR 指定临时存储目录
应用程序一般在临时存储目录“/tmp”下建立临时文件。如果“/tmp”没有足够的空间，你可以通过$TMPDIR变量
来为程序指定临时存储目录。
Debian参考手册 159/233
9.6.13 通过 LVM 扩展可用存储空间
在安装时创建在LogicalVolumeManager逻辑卷管理(LVM)(Linux特性)上的分区，它们可以容易的通过合并扩展或
删除扩展的方式改变大小，而不需要在多个存储设备上进行大量的重新配置。
9.6.14 通过挂载另一个分区来扩展可用存储空间
如果你有一个空的分区（例如“/dev/sdx”），你可以使用mkfs.ext4(1)将它格式化，并使用mount(8)将它挂载到
你需要更多空间的目录。（你需要复制原始数据内容。）
$ sudo mv work-dir old-dir
$ sudo mkfs.ext4 /dev/sdx
$ sudo mount -t ext4 /dev/sdx work-dir
$ sudo cp -a old-dir/* work-dir
$ sudo rm -rf old-dir
提示
你也可以选择挂载一个空硬盘映像文件（参见第 9.7.5 节）作为一个循环设备（参见第 9.7.3 节）。实际的硬盘使
用量会随着实际存储数据的增加而增加。
9.6.15 通过“mount --bind”挂载另一个目录来扩展可用存储空间
如果你在另一个分区里有一个带有可用空间的空目录（例如“/path/to/emp-dir”），你可以通过带有“--bind”
选项的mount(8)，将它挂载到一个你需要更多空间的目录（例如“work-dir”）。
$ sudo mount --bind /path/to/emp-dir work-dir
9.6.16 通过 overlay 挂载（overlay-mounting）另一个目录来扩展可用存储空间
如果你在另一个分区表中有可用的空间（例如，“/path/to/empty”和“/path/to/work”），你可以在其中建立
一个目录并堆栈到你需要空间的那个旧的目录（例如，“/path/to/old”），要这样做，你需要用于Linux3.18版内
核或更新版本（对应DebianStetch9.0或更新版本）的OverlayFS。
$ sudo mount -t overlay overlay \
-olowerdir=/path/to/old-dir,upperdir=/path/to/empty,workdir=/path/to/work
“/path/to/empty”和“/path/to/work”应该位于可读写的分区，从而能够写入“/path/to/old”。
9.6.17 使用符号链接扩展可用存储空间
小心
这是一个已弃用的做法。某些软件在遇到“软链接目录”时可能不会正常工作。请优先使用上文所述的“挂
载”的途径。
如果你在另一个分区里有一个带有可用空间的空目录（例如“/path/to/emp-dir”），你可以使用ln(8)建立目录
的一个符号链接。
Debian参考手册 160/233
$ sudo mv work-dir old-dir
$ sudo mkdir -p /path/to/emp-dir
$ sudo ln -sf /path/to/emp-dir work-dir
$ sudo cp -a old-dir/* work-dir
$ sudo rm -rf old-dir
警告
别对由系统管理的目录（例如“/opt”）使用“链接到目录”，这样的链接在系统升级时可能会被覆盖。
9.7 磁盘映像
我们在这里讨论磁盘影响的操作。
9.7.1 制作磁盘映像文件
一个未挂载设备（例如，第二个SCSI或串行ATA设备“/dev/sdb”）的磁盘映像文件“disk.img”可以使用cp(1)
或dd(1)通过下列方式建立。
# cp /dev/sdb disk.img
# dd if=/dev/sdb of=disk.img
传统PC中位于主IDE硬盘第一扇区的主引导记录（MBR）（参见第 9.6.2 节）的磁盘映像可以使用dd(1)通过下列
方式建立。
# dd if=/dev/hda of=mbr.img bs=512 count=1
# dd if=/dev/hda of=mbr-nopart.img bs=446 count=1
# dd if=/dev/hda of=mbr-part.img skip=446 bs=1 count=66
•“mbr.img”：带有分区表的MBR
•“mbr-nopart.img”：不带分区表的MBR
•“mbr-part.img”：仅MBR的分区表
如果你使用SCSI或串行ATA设备作为启动硬盘，你需要使用“/dev/sda”替代“/dev/hda”。
如果你要建立原始硬盘的一个硬盘分区的映像，你需要使用“/dev/hda1”等替代“/dev/hda”。
9.7.2 直接写入硬盘
磁盘映像文件“disk.img”可以通过下列方式写入到一个匹配大小的未挂载设备（例如，第二个 SCSI 设备
“/dev/sdb”。
# dd if=disk.img of=/dev/sdb
相似地，硬盘分区映像文件“partition.img”可以通过下列方式写入到匹配大小的未挂载分区（例如，第二个
SCSI设备的第一个分区“/dev/sdb1”）。
# dd if=partition.img of=/dev/sdb1
Debian参考手册 161/233
9.7.3 挂载磁盘映像文件
可以使用循环设备通过下列方式挂载和卸载包含单个分区映像的磁盘映像“partition.img”。
# losetup -v -f partition.img
Loop device is /dev/loop0
# mkdir -p /mnt/loop0
# mount -t auto /dev/loop0 /mnt/loop0
...hack...hack...hack
# umount /dev/loop0
# losetup -d /dev/loop0
可以简化为如下步骤。
# mkdir -p /mnt/loop0
# mount -t auto -o loop partition.img /mnt/loop0
...hack...hack...hack
# umount partition.img
可以使用循环设备挂载包含多个分区的磁盘映像“disk.img”的每个分区。因为循环设备默认不管理分区，因此我
们需要通过下列方式重新设置它。
# modinfo -p loop # verify kernel capability
max_part:Maximum number of partitions per loop device
max_loop:Maximum number of loop devices
# losetup -a # verify nothing using the loop device
# rmmod loop
# modprobe loop max_part=16
现在循环设备可以管理多达16个分区。
# losetup -v -f disk.img
Loop device is /dev/loop0
# fdisk -l /dev/loop0
Disk /dev/loop0: 5368 MB, 5368709120 bytes
255 heads, 63 sectors/track, 652 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x452b6464
Device Boot Start End Blocks Id System
/dev/loop0p1 1 600 4819468+ 83 Linux
/dev/loop0p2 601 652 417690 83 Linux
# mkdir -p /mnt/loop0p1
# mount -t ext4 /dev/loop0p1 /mnt/loop0p1
# mkdir -p /mnt/loop0p2
# mount -t ext4 /dev/loop0p2 /mnt/loop0p2
...hack...hack...hack
# umount /dev/loop0p1
# umount /dev/loop0p2
# losetup -d /dev/loop0
或者，你也可以使用kpartx软件包中的kpartx(8)建立设备映射设备来达到相同的效果。
# kpartx -a -v disk.img
...
# mkdir -p /mnt/loop0p2
# mount -t ext4 /dev/mapper/loop0p2 /mnt/loop0p2
...
...hack...hack...hack
# umount /dev/mapper/loop0p2
...
# kpartx -d /mnt/loop0
Debian参考手册 162/233
注意
你也可以使用循环设备利用偏移量来跳过MBR等，来挂载此类磁盘映像的单个分区。但这更加容易出错。
9.7.4 清理磁盘映像文件
使用下面的方式，一个磁盘映像文件”disk.img” 能够清理掉所有已经删除的文件，成为一个干净的稀疏映
像”new.img”。
# mkdir old; mkdir new
# mount -t auto -o loop disk.img old
# dd bs=1 count=0 if=/dev/zero of=new.img seek=5G
# mount -t auto -o loop new.img new
# cd old
# cp -a --sparse=always ./ ../new/
# cd ..
# umount new.img
# umount disk.img
如果“disk.img”位于ext2、ext3或ext4，你也可以像下面那样使用zerofree软件包中的zerofree(8)。
# losetup -f -v disk.img
Loop device is /dev/loop3
# zerofree /dev/loop3
# cp --sparse=always disk.img new.img
9.7.5 制作空的磁盘映像文件
按下面的方式使用dd(1)，可以制作一个大小为5GiB的空磁盘映像文件。
$ dd bs=1 count=0 if=/dev/zero of=disk.img seek=5G
专业的fallocate(8)可以在这里被使用，用来替代使用dd(1)。
按下面的方式使用环回设备，你能够在这个磁盘映像”disk.img”上创建ext4文件系统。
# losetup -f -v disk.img
Loop device is /dev/loop1
# mkfs.ext4 /dev/loop1
...hack...hack...hack
# losetup -d /dev/loop1
$ du --apparent-size -h disk.img
5.0G disk.img
$ du -h disk.img
83M disk.img
对于”disk.img”,它的文件大小是5.0GiB，而它实际磁盘使用仅仅是83MiB.这个差距可能是由于ext4里面有稀疏文
件.
提示
稀疏文件的实际磁盘使用会随着数据的写入而增加。