tool is capable of detecting integer overows and underows simi-
lar to O, with the dierence of O working at the bytecode
level and Z at the source code level. However, source code is not
always available. Moreover, Z requires users to write policies
to assert the security of smart contracts, which is sometimes not
that trivial. Mueller et al. present M [23], a security analysis
tool for Ethereum smart contracts. It uses concolic analysis, taint
analysis and control ow checking to detect a variety of security
vulnerabilities. M comes very close to the approach behind
O, with one of the dierences being that O uses a more
precise and complete taint propagation logic while allowing users
to dene their own sources and sinks. Another dierence is that
M treats every integer as a 256-bit integer and therefore
does not detect an overow if for example two 32-bit integers are
being added, O on the other hand tries to infer the width of
every integer in order to precisely tell if an arithmetic operation
can overow or not. Finally, at the time of writing, M seems
to have issues in distinguishing between benign and malignant
overows and underows [22]. O eectively distinguishes be-
tween benign and malignant integer bugs. Ultimately, both Z
and M, fail to check for truncation bugs and signedness bugs,
whereas O does check for these two types of integer bugs.
8 CONCLUSION AND FUTURE WORK
Integer bugs are currently listed as one of the top 3 vulnerabilities
in smart contracts [13]. We present the design and implementation
of O – a framework for detecting integer bugs in Ethereum
smart contracts. O leverages on symbolic execution and taint
analysis. We compare O with Z and show that Z is
not sound. O nds 5 contracts to be unsafe whereas as Z
reports them to be safe. Moreover, in our evaluation O reports
less false positives than Z. Our evaluation on over 1.2 million
Ethereum smart contracts indicates that about 4% of them might
be vulnerable to at least one of the three integer bugs presented
in this paper. Finally, using O we discovered a yet unknown
vulnerability in a couple of Ethereum tokens.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
C. Ferreira Torres et al.
In future work, we plan to extend O’s taint analysis to also
track taint across multiple contracts (inter-contract analysis) and
across dierent method invocations (trace analysis). Moreover, we
aim to switch to concolic execution using concrete values from
the blockchain in order to validate and generate direct exploits.
This may help us make O’s detection mechanism even more
precise. Finally, we want to augment our evaluation on the security
of Ethereum tokens. Etherscan lists over 90,000 ERC-20 based to-
ken smart contracts on the Ethereum blockchain. Hence, we only
scratched the tip of the iceberg, by analysing only 495 of them.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their valuable
comments. The experiments presented in this paper were carried
out using the HPC facilities of the University of Luxembourg [34] –
see https://hpc.uni.lu.
REFERENCES
[1] Sidney Amani, Myriam Bégel, Maksym Bortin, and Mark Staples. 2018. Towards
Verifying Ethereum Smart Contract Bytecode in Isabelle/HOL. CPP. ACM. To
appear (2018).
[2] Karthikeyan Bhargavan, Nikhil Swamy, Santiago Zanella-Béguelin, Antoine
Delignat-Lavaud, Cédric Fournet, Anitha Gollamudi, Georges Gonthier, Nadim
Kobeissi, Natalia Kulatova, Aseem Rastogi, and Thomas Sibut-Pinote. 2016. For-
mal Verication of Smart Contracts. In Proceedings of the 2016 ACM Workshop on
Programming Languages and Analysis for Security - PLAS’16. ACM Press, New
York, New York, USA, 91–96. https://doi.org/10.1145/2993600.2993611
[3] Ping Chen, Hao Han, Yi Wang, Xiaobin Shen, Xinchun Yin, Bing Mao, and Li Xie.
2009. IntFinder: Automatically detecting integer bugs in x86 binary program. In
International Conference on Information and Communications Security. Springer,
336–345.
[4] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An ecient SMT solver. In
International conference on Tools and Algorithms for the Construction and Analysis
of Systems. Springer, 337–340.
[5] Etherscan.io. 2018. BeautyChainToken.
Retrieved June 7, 2018 from https:
//etherscan.io/address/0xc5d105e63711398af9bb092d4b6769c82f793d#code
[6] Etherscan.io. 2018. Ethereum Contracts with Veried Source Codes. Retrieved
June 8, 2018 from https://etherscan.io/contractsVeried
[7] Etherscan.io. 2018. Etherscan Token Tracker Page. Retrieved June 5, 2018 from
https://etherscan.io/tokens
[8] Etherscan.io. 2018. HexagonToken. Retrieved June 7, 2018 from https://etherscan.
io/address/0xb5335e24d0ab29c190ab8c2b459238da1153ceba#code
[9] Etherscan.io. 2018. SmartMeshICO. Retrieved June 7, 2018 from https://etherscan.
io/address/0x55f93985431fc9304077687a35a1ba103dc1e081#code
[10] Etherscan.io. 2018. Social Chain. Retrieved June 7, 2018 from https://etherscan.
io/address/0xb75a5e36cc668bc8fe468e8f272cd4a0fd0fd773#code
[11] Etherscan.io. 2018. UselessEthereumToken. Retrieved June 7, 2018 from https:
//etherscan.io/address/0x27f706edde3ad952ef647dd67e24e38cd0803dd6#code
[12] Ilya Grishchenko, Matteo Maei, and Clara Schneidewind. 2018. A Semantic
Framework for the Security Analysis of Ethereum smart contracts. In International
Conference on Principles of Security and Trust. Springer, 243–269.
[13] NCC Group. 2018. DASP - TOP 10. Retrieved June 15, 2018 from https://dasp.
[14] Yoichi Hirai. 2016. Exception on overow - Issue #796 - ethereum/solidity.
Retrieved June 10, 2018 from https://github.com/ethereum/solidity/issues/796#
issuecomment-253578925
[15] Yoichi Hirai. 2017. Dening the ethereum virtual machine for interactive theorem
provers. In International Conference on Financial Cryptography and Data Security.
Springer, 520–535.
[16] Yoichi Hirai. 2017.
Retrieved
ethereum-virtual-machine-for-coq-v0-0-2-d2568e068b18
June
12,
Ethereum Virtual Machine for Coq (v0.0.2).
2018
https://medium.com/@pirapira/
from
[17] PeckShield Inc. 2018. PeckShield Inc. - Advisories. Retrieved June 13, 2018 from
https://peckshield.com/advisories.html
[18] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma. 2018. Zeus:
Analyzing safety of smart contracts. NDSS.
[19] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma. 2018. Zeus
Evaluation. Retrieved June 12, 2018 from https://docs.google.com/spreadsheets/
d/12_g-pKsCtp3lUmT2AXngsqkBGSEoE6xNH51e-of_Za8/preview?usp=
embed_googleplus#gid=1568997501
co/#item-3
[20] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor.
2016. Making Smart Contracts Smarter. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security - CCS’16. ACM Press, New
York, New York, USA, 254–269. https://doi.org/10.1145/2976749.2978309
[21] David Molnar, Xue Cong Li, and David Wagner. 2009. Dynamic Test Generation to
Find Integer Bugs in x86 Binary Linux Programs.. In USENIX Security Symposium,
Vol. 9. 67–82.
[22] Bernhard Mueller. 2018. Detecting Integer Overows in Ethereum Smart Con-
tracts. Retrieved June 12, 2018 from https://bit.ly/2JIp9ea
[23] Bernhard Mueller. 2018. Smashing Ethereum Smart Contracts for Fun and Real
Prot. (2018).
[24] Paul Muntean, Jens Grosklags, and Claudia Eckert. 2018. Practical Integer Over-
ow Prevention. In IEEE TSE journal (under review) (2018). https://arxiv.org/abs/
1710.03720
[25] Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and Aquinas Hobor.
2018. Finding the greedy, prodigal, and suicidal contracts at scale. arXiv preprint
arXiv:1802.06038 (2018).
[26] Trail of Bits. 2018. Manticore - Symbolic execution tool. Retrieved June 12, 2018
from https://github.com/trailofbits/manticore
[27] OpenZeppelin. 2018. OpenZeppelin/openzeppelin-solidity. Retrieved June 12,
2018 from https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/
contracts/math/SafeMath.sol
[28] Sergey Petrov.
Retrieved
another-parity-wallet-hack-explained-847ca46a2e1c
from
2018
June
2017.
13,
Another Parity Wallet hack
explained.
https://medium.com/@Pr0Ger/
[29] Marios Pomonis, Theolos Petsios, Kangkook Jee, Michalis Polychronakis, and
Angelos D Keromytis. 2014. IntFlow: improving the accuracy of arithmetic error
detection using information ow tracking. In Proceedings of the 30th Annual
Computer Security Applications Conference. ACM, 416–425.
[30] Christian Reitwiessner. 2018.
Formal Verication for Solidity Contracts.
Retrieved June 12, 2018 from https://forum.ethereum.org/discussion/3779/
formal-verication-for-solidity-contracts
[31] David Siegel. 2016. Understanding The DAO Attack. Retrieved June 13, 2018
from https://www.coindesk.com/understanding-dao-hack-journalists/
[32] Solidity. 2018. Solidity 0.4.24 documentation.
http://solidity.readthedocs.io/en/v0.4.24/
Retrieved June 9, 2018 from
[33] Petar Tsankov, Andrei Dan, Dana Drachsler Cohen, Arthur Gervais, Florian
Buenzli, and Martin Vechev. 2018. Securify: Practical Security Analysis of Smart
Contracts. arXiv preprint arXiv:1806.01143 (2018).
[34] S. Varrette, P. Bouvry, H. Cartiaux, and F. Georgatos. 2014. Management of an
Academic HPC Cluster: The UL Experience. In Proc. of the 2014 Intl. Conf. on High
Performance Computing & Simulation (HPCS 2014). IEEE, Bologna, Italy, 959–967.
[35] Fabian Vogelsteller and Vitalik Buterin. 2015. ERC-20 Token Standard. Retrieved
June 7, 2018 from https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
[36] Tielei Wang, Tao Wei, Zhiqiang Lin, and Wei Zou. 2009. IntScope: Automatically
Detecting Integer Overow Vulnerability in X86 Binary Using Symbolic Execu-
tion. In Proceedings of the Network and Distributed System Security Symposium,
NDSS 2009, San Diego, California, USA, 8th February - 11th February 2009. The
Internet Society. http://www.isoc.org/isoc/conferences/ndss/09/pdf/17.pdf
[37] Xi Wang, Haogang Chen, Zhihao Jia, Nickolai Zeldovich, and M Frans Kaashoek.
Improving Integer Security for Systems with KINT.. In OSDI, Vol. 12.
[38] Gavin Wood. 2014. Ethereum: A secure decentralised generalised transaction
ledger. Ethereum Project Yellow Paper 151 (2014), 1–32.
2012.
163–177.
A CONTROL FLOW GRAPH EXAMPLE
1 pragma solidity ^0.4.21;
2
3 contract Test {
4
5
function overflow ( uint value ) public pure returns (
uint ) {
return value + 1;
6
7
8 }
}
Listing 8: An example of a smart contract possibly
producing an integer overow at line 6.
675
O: Hunting for Integer Bugs in Ethereum Smart Contracts
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
return credit [ to ];
mapping ( address => uint ) public credit ;
function donate ( address to ){ credit [ to ] += msg . value ;}
function queryCredit ( address to ) returns ( uint ){
B THE DAO HACK
1 contract SimpleDAO {
2
3
4
5
6
7
8
9
10
11 }}}
Listing 9: A simplied version of the DAO smart contract.
if ( credit [ msg . sender ] >= amount ) {
msg . sender . call . value ( amount ) () ;
credit [ msg . sender ] -= amount ;
}
function withdraw ( uint amount ) {
}
function () {
if ( performAttack ) {
dao . donate . value (1) ( this );
dao . withdraw (1) ;
SimpleDAO public dao = SimpleDAO (0 x818EA ...) ;
address owner ; bool performAttack = true ;
function Mallory2 () { owner = msg . sender ; }
function attack () {
1 contract Mallory2 {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17 }}
Listing 10: A more ecient attack than the original DAO
attack.
dao . withdraw ( dao . balance );
owner . send ( this . balance );
performAttack = false ;
dao . withdraw (1) ;
}}
function getJackpot () {
Figure 6: A representation of the control ow graph that
O produces for Listing 8. The basic block highlighted
in red indicates the location where an overow may occur.
676