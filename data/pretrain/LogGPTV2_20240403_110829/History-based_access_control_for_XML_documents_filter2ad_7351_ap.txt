### 7.2.1 User Interface

The user interface of this prototype is not optimized for specific types of data and is primarily designed to illustrate the concepts presented in this thesis. Consequently, the current user interface only provides a textual representation of the XML documents, and the corresponding editing commands are independent of the semantics of the processed XML documents.

**Figure 7.3: Screenshot of the User Interface**

The user interface displays an opened XML document in its textual form in the central area of the window. Multiple documents can be opened simultaneously, but only one document is displayed at any given time. To switch between documents, the user can click on the document name in the top area of the window. In the screenshot (Figure 7.3), only one document named `Report.xml` is open.

On the upper left side of the user interface, there are buttons for editing the document, with each button corresponding to one operation defined in the model. Below these buttons, three checkboxes allow the user to activate different view options. These checkboxes can be used to illustrate the internal operations of the user interface:
- The first checkbox allows the user to view the histories stored within the document.
- The second checkbox enables the viewing of deleted elements.
- The third checkbox hides all tags and shows only the text content of the opened document.

The "XPath Evaluator" button, located below the document area on the left side, allows the user to manually enter an XPath expression that utilizes the extended functions defined in this thesis. The entered XPath expression is evaluated for the currently active document, and the resulting list of nodes is displayed. This function is also designed for demonstration purposes.

On the right side of the XPath Evaluator, there are four buttons for creating a new document, loading an existing document, saving a changed document, and closing an opened document. The loading of a document triggers the check-out process, as described in Section 5.2.1 of Chapter 5. Similarly, the storing of a document triggers the check-in mechanism. Both mechanisms are used to efficiently reduce the number of required view recalculations.

### 7.2.2 Copy DB

In this implementation, the rules are stored in an XML document, which is loaded when the server components of the system are started. We use `Is-Copy-Of` elements to represent individual copy relations. Each `Is-Copy-Of` element contains a `Source` element and a `Destination` element. These elements denote a source or destination by a sequence of document ID, element ID, and block ID. For elements, the block ID is set to "-1".

**Figure 7.4: Example of the XML Representation of the Copy Database**

Figure 7.4 shows an example of such an XML representation, featuring two `Is-Copy-Of` relations. The first relation reflects the transfer of an element within a document with the document ID 0, while the second relation describes the transfer of a text block from the document with ID 1 to the document with ID 4.

### 7.2.3 Rule DB

The Rule DB stores the rules in an XML document, which is loaded when the server components are started. A policy file must specify a default policy that is applied when no other rule matches. It supports two types of rules: unary rules and transfer rules.

**Figure 7.5: Example of a Policy Document**

Figure 7.5 shows an example of a policy document. In this example, the default policy is "deny." Additionally, it includes a unary rule and a transfer rule.

### 7.2.4 Policy Enforcement Point

The Policy Enforcement Point intercepts each performed operation and sends a request to the Policy Decision Point to determine whether the operation is allowed. For this purpose, the Policy Enforcement Point offers a method for every operation defined by the model. It can be configured to communicate with different PDPs, but one specific PDP must be chosen. This configuration is made using the Server Configurator, described in Section 7.3.

### 7.2.5 Policy Decision Point

The Policy Decision Point loads the access control rules when the component is initialized. A path must be specified where the XML file containing the access control rules can be found. After initialization, the Policy Decision Point can create a view of a document for a specified user and evaluate the access control rules to check whether a specific operation is allowed.

### 7.3 Configuration

The server components can be configured using a dedicated Server Configurator program. This program allows the definition of which classes are used for specific functions, such as switching between a local or remote Copy DB. It also allows the replacement of specific components, like the Copy DB, with a different implementation that supports the defined interface. This makes it easy to exchange components without modifying the existing source code. Additionally, the Server Configurator allows the definition of the storage locations for the Copy DB, documents, and the policy document.

**Figure 7.6: Screenshot of the Server Configurator**

Figure 7.6 shows a screenshot of the Server Configurator. In this example, the prototype is executed locally, and the paths to all required files are set to a HiBac directory within the home directory of the user `proeder`. The server uses a directory to store all XML documents, referred to as the "document folder" in the Server Configurator. It also uses a text file, `docNames.txt`, to store the names of all XML documents along with their document IDs.

### 7.4 Performance Evaluation

This section summarizes the results of the performance evaluation, detailed in [Mel07]. Since the performance of XPath queries has already been discussed in various studies, we focus on evaluating the performance of the functions we have added to XPath. We also measure the time to calculate a view to determine the impact of our extension functions on the overall execution time of an XPath query.

**Figure 7.6: Screenshot of the Server Configurator**

To determine the runtime behavior of an XPath function, we tested several factors to see if the runtime depends on one or more of these factors. Our tests showed that the runtime of each function depends on only one specific factor, such as the number of nodes in the current document. We identified groups of functions with identical runtime behavior, which do not exactly match the categories defined in Section 4.7. After identifying the factor, we made a series of measurements, increasing the factor from measurement to measurement. Each test was repeated five times to reduce random errors. This method helped us determine how the runtime depends on the factor. Some functions have a constant runtime, while others have a runtime that increases linearly with a specific factor.

**Table 7.2: Specification of the Test System**

| **Component** | **Specification** |
|---------------|-------------------|
| Processor     | AMD Sempron 3100+ |
| Memory        | 480 MB            |
| OS            | Microsoft Windows XP Home Edition SP2 |
| Java Version  | JRE 1.5.0         |
| XPath 2.0 Implementation | Saxon-B 8.8 (http://saxon.sourceforge.net) |
| Development Environment | Eclipse SDK 3.2.2 (http://www.eclipse.org) |

### 7.4.1 Performance of Individual Functions

The first group of functions with similar runtime behavior returns a specific node or atomic value, such as a string. These functions, including `selfAt`, `parentAt`, `rootAt`, `getCreationContext`, `currentNode`, `srcNode`, `destNode`, `currentSubject`, `currentRole`, and `isDeleted`, show a constant runtime independent of the document size. On the test system, each function's runtime is around 5 milliseconds, indicating acceptable performance for practical use.

The next group of functions, including `copies`, `predecessors`, and `successors`, have a runtime that depends linearly on the number of copies of the tested node. For example, with 25 copies, a function takes 100 milliseconds, and with 100 copies, it takes about one second. This performance is still acceptable for practical usage, especially for documents where single elements are copied less than 100 times.

The runtime of the next group of functions, such as `childrenAt`, `followingAt`, `precedingAt`, `descendantAt`, `precedingSiblingAt`, and `followingSiblingAt`, depends linearly on the number of nodes in a specific relation to the tested node. For instance, a call returning 25 nodes takes about 100 milliseconds, while a call returning 100 nodes takes about 500 milliseconds. The performance of these functions can be slow for some documents and rule expressions, requiring further optimization.

The functions `getAttrChangeContexts`, `getDeletionContexts`, and `getViewContexts` retrieve the context of specific actions, such as changing attribute values. Their runtime depends linearly on the number of contexts retrieved. Retrieving 100 contexts takes about 10 milliseconds, while retrieving 400 contexts takes about 30 milliseconds, indicating highly usable performance.

The last group of functions, including `created`, `viewed`, `changedAttribute`, `deleted`, `accessed`, and `modified`, retrieve accessed nodes. Their runtime increases linearly with the number of accessed nodes. For example, a function call retrieving 100 nodes takes about 500 milliseconds, while a call retrieving 650 nodes takes about 5 seconds. These functions need further improvement for real-life scenarios. As the current prototype is not optimized for performance, there is significant potential for enhancement.

**Table 7.3: Summary of the Performance of Different Groups**

| **Group of Functions** | **Runtime Behavior** | **Usability** |
|------------------------|----------------------|---------------|
| `parentAt`, `rootAt`, `selfAt`, `getCreationContext`, `currentNode`, `srcNode`, `destNode`, `currentSubject`, `currentRole`, `isDeleted` | Constant | Highly Usable |
| `copies`, `predecessors`, `successors` | Linear | Acceptable |
| `childrenAt`, `precedingAt`, `descendantAt`, `followingSiblingAt` | Linear | Limited |
| `getAttrChangeContexts`, `getDeletionContexts`, `getViewContexts` | Linear | Highly Usable |
| `created`, `viewed`, `changedAttribute`, `deleted`, `accessed`, `modified` | Linear | Needs Improvement |

### 7.4.2 Performance of the Creation of Views

Finally, we present the results of the performance evaluation for creating a view. Using a set of five rules, where three rules use extension functions that access history information, the time to create a view increases linearly with the number of nodes in the document. In our test case, it took 2 seconds to create a view of a document with 4000 nodes and about 7 seconds for a document with 12000 nodes. This performance is still acceptable for practical use, though further optimizations could improve it. Additionally, faster machines are available compared to the one used in our tests.

### Chapter 8: Related Work

In this chapter, we describe work related to this thesis, divided into three areas:

#### 8.1 Server-Side Access Control

Server-side access control manages access only when information is released to the client. Consequently, there is no access control after the release of information.

#### 8.2 Client-Side Access Control

Client-side access control, also known as Digital Rights Management (DRM) or Rights Management, performs access control only on the client. The client can be easily manipulated since it is under the user's control.