                            give += 1;
                            gonna = never[give];
                            gonna += 120;
                            never[give] = gonna;
                            give += 1;
                            gonna = never[give];
                            gonna += 85;
                            never[give] = gonna;
                            give += 1;
                            gonna = never[give];
                            gonna += 57;
                            never[give] = gonna;
                            give += 1;
                            gonna = never[give];
                            gonna += 98;
                            never[give] = gonna;
                            give += 1;
                            gonna = never[give];
                            gonna += 11;
                            never[give] = gonna;
                            give += 1;
                            let you = [148u8, 59, 143, 112, 121, 186, 106, 133, 55, 90, 164, 166, 167, 121, 174, 147, 148, 167, 99, 86, 81, 161, 151, 149, 132, 56, 88, 188, 141, 127, 151, 63];
                            return never == you;
                    }
                    check()
            }};
    }
    fn main() {
        let result = check!(@s n1ctf{0123456789abcdef});
        if result {
            println!("Yes");
        }
    }
只是简单的加，减一下就得到flag：  
`n1ctf{A6C33EA2571A2AE26BFAE7BEA2CD8F54}`
###  hello
Go逆向，用ida7.6可以恢复部分符号信息，转到main_main，结合动调可得前面的简单逻辑，输入32字节16进制数，每两个16进制数得到一个新的字节，总共16字节，再传入main__Cfunc_func1，通过C函数func1做变换，得到新的字节数组，最后用一个方程组判断值。
最后的方程组求解，前面的式子都比较复杂，最后一个判断是一个算式模293，而看汇编，这个结构和前面的式子结构是相同的，ida识别出问题了吧，所以前面也应该是模293。
线性方程组直接扔给z3求解，但是早上9点多开始跑，晚上6点多还没出结果，那就只好自己写脚本求解：
    #!/usr/bin/python2
    from gmpy2 import *
    def add(x, y):
        assert(len(x) == len(y))
        return [(i + j) % 293 for i, j in zip(x, y)]
    def sub(x, y):
        assert(len(x) == len(y))
        return [(i - j) % 293 for i, j in zip(x, y)]
    def mul(x, n):
        return [i * n % 293 for i in x]
    def div(x, n):
        rev = int(invert(n, 293))
        return mul(x, rev)
    conds = '''68  == (11448910 * v60[15] + 40743553 * v60[14] + 15249722 * v60[13] + 51420184 * v60[12] + 1272949 * v60[11] + 17564837 * v60[10] + 52185491 * v60[9] + 8881295 * v60[8] + 27627194 * v60[7] + 20133359 * v60[6] + 12649121 * v60[5] + 16687834 * v60[4] + 35629177 * v60[3] + 65149487 * v60[2] + 44718284 * v60[1] + 5377102 * v60[0]) % 293
    73  == (48411728 * v60[15] + 46007731 * v60[14] + 35099188 * v60[13] + 58592730 * v60[12] + 31668013 * v60[11] + 37493724 * v60[10] + 34235932 * v60[9] + 3705469 * v60[8] + 46765687 * v60[7] + 11650930 * v60[6] + 40946083 * v60[5] + 14512921 * v60[4] + 410852 * v60[3] + 8677693 * v60[2] + 48100308 * v60[1] + 15513275 * v60[0]) % 293
    105 == (11388094 * v60[15] + 22952329 * v60[14] + 28320092 * v60[13] + 61937243 * v60[12] + 9778043 * v60[11] + 3328881 * v60[10] + 34002181 * v60[9] + 20900966 * v60[8] + 15752138 * v60[7] + 52093804 * v60[6] + 12201596 * v60[5] + 41219106 * v60[4] + 44419237 * v60[3] + 46626798 * v60[2] + 17611295 * v60[1] + 51342117 * v60[0]) % 293
    26  == (34715169 * v60[15] +  2137413 * v60[14] + 38457326 * v60[13] + 23972020 * v60[12] + 59151919 * v60[11] + 45673314 * v60[10] + 63801756 * v60[9] + 36167240 * v60[8] + 16650010 * v60[7] + 36591851 * v60[6] + 9676221 * v60[5] + 28388843 * v60[4] + 43159917 * v60[3] + 45916134 * v60[2] + 46862881 * v60[1] + 57970260 * v60[0]) % 293
    278 == (65951721 * v60[15] + 49899769 * v60[14] + 20365833 * v60[13] + 50854754 * v60[12] + 66315899 * v60[11] + 24023407 * v60[10] + 10941397 * v60[9] + 56539279 * v60[8] + 21483823 * v60[7] + 23526593 * v60[6] + 56977904 * v60[5] + 40100057 * v60[4] + 40013998 * v60[3] + 28326782 * v60[2] + 11375397 * v60[1] + 32808901 * v60[0]) % 293
    236 == (13044253 * v60[15] +  8291395 * v60[14] + 53262276 * v60[13] + 39192608 * v60[12] + 11857558 * v60[11] + 11073096 * v60[10] + 25927713 * v60[9] + 34514986 * v60[8] + 63871055 * v60[7] + 52604124 * v60[6] + 36309373 * v60[5] + 282427 * v60[4] + 32746957 * v60[3] + 47833723 * v60[2] + 40551307 * v60[1] + 52471216 * v60[0]) % 293
    261 == (37348869 * v60[15] + 48980070 * v60[14] + 1682385 * v60[13] + 30745745 * v60[12] + 6761227 * v60[11] + 52918290 * v60[10] + 17699555 * v60[9] + 28922206 * v60[8] + 32578112 * v60[7] + 38269989 * v60[6] + 62585890 * v60[5] + 61739612 * v60[4] + 66810519 * v60[3] + 47531426 * v60[2] + 37064630 * v60[1] + 24199242 * v60[0]) % 293
    90  == (62202924 * v60[15] + 30396598 * v60[14] + 60438120 * v60[13] + 65789447 * v60[12] + 58876674 * v60[11] + 9672908 * v60[10] + 45032298 * v60[9] + 41831746 * v60[8] + 9801829 * v60[7] + 50757695 * v60[6] + 34021426 * v60[5] + 1903443 * v60[4] + 32345456 * v60[3] + 54221555 * v60[2] + 34693296 * v60[1] + 12966608 * v60[0]) % 293
    173 == (29937890 * v60[15] + 31874820 * v60[14] + 34796144 * v60[13] + 8593554 * v60[12] + 59077744 * v60[11] + 2668953 * v60[10] + 17349024 * v60[9] + 18966262 * v60[8] + 41122881 * v60[7] + 50679759 * v60[6] + 63670216 * v60[5] + 49780363 * v60[4] + 7969099 * v60[3] + 63071621 * v60[2] + 55027617 * v60[1] + 25298698 * v60[0]) % 293
    55  == (17388834 * v60[15] + 57153581 * v60[14] + 16103318 * v60[13] + 39797887 * v60[12] + 62966701 * v60[11] + 37180051 * v60[10] + 54575969 * v60[9] + 1201444 * v60[8] + 53660494 * v60[7] + 18424162 * v60[6] + 26060497 * v60[5] + 61745538 * v60[4] + 32524194 * v60[3] + 34874075 * v60[2] + 11891252 * v60[1] + 599957 * v60[0]) % 293
    229 == (28288668 * v60[15] + 18660303 * v60[14] + 42011531 * v60[13] + 31750158 * v60[12] + 67056908 * v60[11] + 7550306 * v60[10] + 18108987 * v60[9] + 35129803 * v60[8] + 59291588 * v60[7] + 8246048 * v60[6] + 61723044 * v60[5] + 61462529 * v60[4] + 27114985 * v60[3] + 9330086 * v60[2] + 49623029 * v60[1] + 52820893 * v60[0]) % 293
    292 == (21003028 * v60[15] + 43880816 * v60[14] + 51093211 * v60[13] + 58809916 * v60[12] + 41009760 * v60[11] + 37370364 * v60[10] + 1598982 * v60[9] + 36725663 * v60[8] + 32731509 * v60[7] + 32491361 * v60[6] + 8400987 * v60[5] + 32271858 * v60[4] + 20940616 * v60[3] + 64477078 * v60[2] + 63976576 * v60[1] + 3226343 * v60[0]) % 293
    43  == ( 7196185 * v60[15] + 51302172 * v60[14] + 63640408 * v60[13] + 21200580 * v60[12] + 24738818 * v60[11] + 20336759 * v60[10] + 23703928 * v60[9] + 19179549 * v60[8] + 53260842 * v60[7] + 6702116 * v60[6] + 5235806 * v60[5] + 59525552 * v60[4] + 52408555 * v60[3] + 31148317 * v60[2] + 18322594 * v60[1] + 11484407 * v60[0]) % 293
    5   == (34266111 * v60[15] + 32686335 * v60[14] + 8717460 * v60[13] + 12159655 * v60[12] + 57509360 * v60[11] + 34665752 * v60[10] + 11016018 * v60[9] + 50811576 * v60[8] + 28977207 * v60[7] + 54404660 * v60[6] + 49813519 * v60[5] + 42212815 * v60[4] + 44514143 * v60[3] + 11571592 * v60[2] + 14524437 * v60[1] + 28563837 * v60[0]) % 293
    276 == (39608187 * v60[15] + 24282261 * v60[14] + 18997872 * v60[13] + 16783819 * v60[12] + 27865128 * v60[11] + 58513213 * v60[10] + 18911756 * v60[9] + 44480266 * v60[8] + 5700458 * v60[7] + 8630338 * v60[6] + 52860393 * v60[5] + 22833691 * v60[4] + 35672785 * v60[3] + 61382021 * v60[2] + 7979743 * v60[1] + 33392211 * v60[0]) % 293
    165 == (23299004 * v60[15] + 31034972 * v60[14] + 55982584 * v60[13] + 886406 * v60[12] + 4029227 * v60[11] + 15741379 * v60[10] + 50326885 * v60[9] + 13077670 * v60[8] + 9249973 * v60[7] + 17218640 * v60[6] + 31294575 * v60[5] + 40628674 * v60[4] + 11554134 * v60[3] + 23103319 * v60[2] + 61959315 * v60[1] + 28529793 * v60[0]) % 293
    217 == (32579505 * v60[15] +  4371300 * v60[14] + 61149522 * v60[13] + 39840129 * v60[12] + 50452614 * v60[11] + 28645103 * v60[10] + 26341415 * v60[9] + 43235505 * v60[8] + 41390328 * v60[7] + 38289933 * v60[6] + 9418491 * v60[5] + 30588692 * v60[4] + 24338954 * v60[3] + 49647471 * v60[2] + 58384561 * v60[1] + 2075035 * v60[0]) % 293
    207 == (29828862 * v60[15] +  8163681 * v60[14] + 52610483 * v60[13] + 24081438 * v60[12] + 14841955 * v60[11] + 52095831 * v60[10] + 48298737 * v60[9] + 1866553 * v60[8] + 34823251 * v60[7] + 25602134 * v60[6] + 26835402 * v60[5] + 35248885 * v60[4] + 30084536 * v60[3] + 31133287 * v60[2] + 19156834 * v60[1] + 39948186 * v60[0]) % 293
    1   == (60508155 * v60[15] + 36682310 * v60[14] + 33373239 * v60[13] + 16795502 * v60[12] + 20246162 * v60[11] + 53199974 * v60[10] + 31387649 * v60[9] + 31002578 * v60[8] + 9965987 * v60[7] + 39349501 * v60[6] + 52819211 * v60[5] + 44652087 * v60[4] + 26104149 * v60[3] + 41109851 * v60[2] + 1371418 * v60[1] + 620322 * v60[0]) % 293
    21  == (30297807 * v60[15] +  5280747 * v60[14] + 49427355 * v60[13] + 18487297 * v60[12] + 39564284 * v60[11] + 45990969 * v60[10] + 37674240 * v60[9] + 29438609 * v60[8] + 23766078 * v60[7] + 37794867 * v60[6] + 931273 * v60[5] + 63971060 * v60[4] + 31909354 * v60[3] + 27118998 * v60[2] + 66362659 * v60[1] + 30803764 * v60[0]) % 293'''
    matrix = []
    for i in conds.splitlines():
        rvalue, lvalue = i.split('==')
        rvalue = int(rvalue)
        lvalues = lvalue.replace('(', '').replace(')', '').split(' + ')[::-1]
        assert(len(lvalues) == 16)
        matrix.append([])
        for j in lvalues:
            j = j.strip(' ')
            matrix[-1].append(int(j[: j.index(' ')]) % 293)
        matrix[-1].append(rvalue % 293)
    j = 0
    while j > 28) +
                        (v21 >> 28)
                    ] + table5[
                        16 * (v6 >> 28) +
                        (v7 >> 28)
                    ]
                ]);
                *x_ptr = v8;
                v9 = table5[
                    16 * table5[
                        16 * (HIWORD(v5) & 0xF) +
                        (HIWORD(v21) & 0xF)
                    ] + table5[
                        16 * (HIWORD(v6) & 0xF) +
                        (BYTE2(v7) & 0xF)
                    ]
                ] | (16 * table5[
                    16 * table5[
                        16 * ((v5 >> 20) & 0xF) +
                        ((v21 >> 20) & 0xF)
                    ] + table5[
                        16 * ((v6 >> 20) & 0xF) +
                        ((v7 >> 20) & 0xF)
                    ]
                ]);
                x_ptr[1] = v9;
                v10 = table5[
                    16 * table5[
                        16 * ((v5 >> 8) & 0xF) +
                        ((v21 >> 8) & 0xF)
                    ] + table5[
                        16 * (BYTE1(v6) & 0xF) +
                        (BYTE1(v7) & 0xF)
                    ]
                ] | (16 * table5[
                    16 * table5[
                        16 * ((unsigned __int16)v5 >> 12) +
                        ((unsigned __int16)v21 >> 12)
                    ] + table5[
                        16 * ((unsigned __int16)v6 >> 12) +
                        ((unsigned __int16)v7 >> 12)
                    ]
                ]);
                x_ptr[2] = v10;
                v13 = table5[
                    16 * table5[