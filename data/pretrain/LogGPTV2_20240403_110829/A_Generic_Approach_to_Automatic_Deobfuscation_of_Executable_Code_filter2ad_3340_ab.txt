level of individual bits. Second, instead of simply indicating
taintedness via a single bit, indicating whether or not a location
is tainted or not, we keep track of the source of each distinct
taint value [17]. Keeping track of taint sources turns out to
be very helpful for reasoning about the taint of the result
of an operation where both inputs originate from the same
value; it turns out that such operations are often used in
obfuscated code to construct opaque predicates or constants
[23]. The propagation of taint values is conceptually analogous
to traditional taint analysis, though arithmetic operations have
to be handled carefully, e.g., a single tainted bit in a source
operand for an add instruction can cause several bits to
become tainted in the result due to carry propagation. This
enhanced taint analysis Indeed, ROPs frequently use the carry
ﬂag for conditional statements.
As mentioned earlier, the precision of the forward taint
analysis algorithm is particularly important for our approach to
deobfuscation. Figure 2 illustrates the impact of different taint
propagation algorithms on the quality of deobfuscation. The
input program is a simple binary search routine whose control
ﬂow graph is shown in Figure 2(a). The control ﬂow graph
of the program resulting from obfuscating this code using a
commercial obfuscation tool named ExeCryptor [2] is shown
in Figure 2(b). Figure 2(c) shows the effect of deobfuscation
using traditional byte-level taint analysis: this can be seen to be
only marginally better that Figure 2(b), indicating that the taint
propagation is of limited utility. When a bit-level taint analysis
is used, the quality of deobfuscation improves considerably,
as shown by the control ﬂow graph in Figure 2(d); however,
although this control ﬂow graph is much simpler than that
of Figure 2(c), it can be seen to still be signiﬁcantly more
convoluted than the original control ﬂow graph of Figure 2(a).
However, using our enhanced bit-level taint analysis, which
tracks taintedess together with taint source information at the
level of individual bits, the deobfuscation process yields much
better results, as shown by the control ﬂow graph of Figure
2(e).
2) Control Dependency Analysis: Given two instructions
(statements) I and J in a program, J is said to be control-
dependent on I if the outcome of I determines whether or
not J is executed. More formally, J is control dependent
on I if and only if there is a non-empty path π from
I to J such that J post-dominates each instruction in π
except I [24]. The identiﬁcation of control dependencies has
been well-studied in the compiler literature [24]. However,
the situation is a little different in our case since, because
when dealing with emulation-obfuscated code, some of the
control transfers encountered correspond to the logic of the
program being emulated while others are simply an artifact
of the emulation process and therefore not interesting from
the perspective of identifying dependencies. We want to ﬁnd
control dependencies of the original program, but we cannot
do this simply by examining the control ﬂow graph of the
emulator, so we need to untangle the emulator’s control ﬂow
structure apart from that of the original program.
677677
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
(a)
Key:
(a)
(b)
(c)
(d)
(e)
(b)
(c)
(d)
(e)
Original program
Obfuscated program
Deobfuscation result: traditional byte-level taint analysis
Deobfuscation result: bit-level analysis (taintedness information only)
Deobfuscation result: enhanced bit-level analysis (taintedness + taint source information)
(our algorithm)
Fig. 2.
Impact of different taint analysis algorithms on quality of debofuscation (Input program: binary search; obfuscated using: ExeCryptor)
Algorithm 1: Finding Control Dependencies
Input: An initial input/output tainted trace T
Result: The trace T with control dependencies between
instructions identiﬁed
1 Construct an initial control ﬂow graph G
2 Compute post-dominator relations in G [24]
3 Use post-dominator relationships to compute explicit
control dependencies [24]:
4 (a) C = the set of input-tainted conditional control
transfers; and
5 (b) DepVars ={x | ∃C ∈ C: x control dependent on C}
6 while ∃ an indirect control transfer Ins dependent on
some x ∈ DepVars do
BBl ← basic block of Ins in G
Mark BBl as dependent on the direct control transfer
in C that x is dependent on
7
8
9 end
dencies is straightforward using post-dominators [24]. Implicit
control ﬂows are those indirect control transfers of the form
‘jmp [(cid:3)]’ where the location (cid:3) is data-dependent on the set
DepVars of dependent variables identiﬁed in Algorithm 1.
Intuitively, implicit control dependencies account for the fact
that a control dependence between two instructions I and J
may arise indirectly through an assignment D of the value
of a variable x if D is control dependent on I and where x
determines the target of an indirect control transfer to J (this
happens in, but is not restricted to, the dispatch jump of an
emulator).
Figure 3 shows an example of explicit and implicit control
ﬂows. The value of register eax on line 6 is dependent on the
conditional jump on line 2, so the target of the jmp instruction
of line 6 also depends on which path is taken on line 2. This
way the basic block following the jmp on line 6 is also control
dependent on the conditional transfer on line 2. It is fair to say
that the data dependency from line 6 to lines 3 and 5, through
the value of eax, is really a control dependency in disguise.
The approach we take is shown in Algorithm 1. We consider
two types of control ﬂows: explicit and implicit. Explicit
control ﬂows are those control transfers where the predicate
is explicitly reﬂected in the transfer of control, e.g., as in
conditional jump instructions. Finding explicit control depen-
C. Trace Simpliﬁcation
Once we have identiﬁed the instructions in the trace that
participate in computing output values from input values, the
next step is to map these instructions to an equivalent but
simpler instruction sequence. Since we want to make as few
678678
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
test ecx, eax
jnz L1
mov eax, 0
jmp L2
L1: mov eax, 1
L2: jmp [edx+4*eax]
Fig. 3. An example of implicit control ﬂow
assumptions as possible about the obfuscations we may be
dealing with, we use a set of simple and general semantics-
preserving transformations for this.
An important concept in this context is the notion of a quasi-
invariant location. We deﬁne a location (cid:3) to be quasi-invariant
for an execution if (cid:3) contains the same value (cid:3)c at every use
of (cid:3) in that execution. For constant propagation purposes, we
consider a value to be a constant during an execution if either
it is an immediate operand of an instruction or if it comes from
a memory location that is quasi-invariant for that execution.
Quasi-invariant locations allow us to handle transient mod-
iﬁcations to the contents of memory locations, e.g., due to
unpacking, as long as we see the same value each time a
location is used. Quasi-invariants can be identiﬁed in a single
forward pass over a trace keeping track of memory locations
that are modiﬁed and, for each such modiﬁcation, the value
that is written. The notion of quasi-invariance can be extended
in various ways, e.g., we may consider whether a memory
word contains the same value every time it is used for an
indirect branch (this is useful, for example, for dealing with
jump tables whose elements are kept in encrypted or encoded
form, decrypted prior to use, and then re-encrypted).
The transformations we use include the following (this is a
non-exhaustive list):
1) Arithmetic simpliﬁcations. In essence this is a straight-
forward adaptation of the classic compiler optimization
of constant folding to work with dynamic traces and
quasi-invariant locations. However, as described below,
it has to be controlled to avoid over-simpliﬁcation.
For example, in the code sequence shown above, the
constant value 0xa4 loaded into the register bh can
be propagated through the bit-manipulation instructions
following it, and the entire sequence of instructions
manipulating bh can be replaced by a single instruction
‘mov bh, 0x8b’.
2) Indirect memory reference simpliﬁcation. An indirect
memory reference through a quasi-invariant location (cid:3)
that holds a value A is simpliﬁed to refer directly to A.
This transformation is applied to both control transfers
and data references.
3) Data movement simpliﬁcation. We use pattern-driven
rules to identify and simplify data movement. For ex-
ample, one of our rules states that the following simpli-
ﬁcation can be performed provided that the sequence of
instructions Instr does not access the stack and does not
change the value of A:
push A
Instrs
pop B
−→ Instrs
mov B, A /* B := A */
4) Dead code elimination. Instructions whose destinations
are dead, i.e., not used subsequently in the computation,
are deleted. This transformation must consider all desti-
nations of an instructions, including destination operands
that are implicit and which may not be mentioned in the
instruction (such implicit destinations includes condition
ﬂags).
5) Control transfer simpliﬁcation Control transfer instruc-
tions whose targets are constant are replaced by direct
jumps. Candidates for this transformation include return
instructions to constant targets in ROP code as well
as indirect jumps to ﬁxed targets in emulation-based
obfuscation. Using control ﬂags implicitly to control
the transfer ﬂow of the program is common among
interpreters and is also used in ROPs. For example one
can implement loops in ROPs as follows:
mov eax,0
sub counter,1
adc eax,eax
push [L+eax*4]
ret
/* eax := 1 if counter=0 */
where L is the address of the memory location which
points to the beginning of the loop and subsequent
location points to where loop should exit to. In this
example, the target of the return instruction is affected
by the outcome of carry ﬂag so the ret instruction can
be replaced by a conditional jump which directly uses
the carry ﬂag.
Example 3.1: Figure 4 gives an example of indirect memory
reference simpliﬁcation. Figure 4(a) shows a small program
that sits in a loop making indirect jumps through successive
elements of a read-only array T. Figure 4(b) shows the unsim-
pliﬁed trace for this code. Since T is read-only, its elements are
constant, making indirect calls through this table amenable to
indirect memory reference simpliﬁcation; the resulting trace
is shown in Figure 4(c). Since T is no longer being used
for indirect jumps, instructions that load from T then become
dead and are removed via dead code elimination. Similarly,
constant propagation converts the add instructions into mov
instructions that load constants into register ebx. This then
determines the outcome of each of the cmp instructions, and
allows the cmp and jne instructions to be simpliﬁed away;
once this happens the instructions that load into ebx also
become dead and are removed.
The ﬁnal simpliﬁed trace is shown in Figure 4(d). What is
left is pretty much just the code executed at the addresses that,
in the original program, had been reached via a sequence of
indirect jumps through the jump table T. In the simpliﬁed trace,
almost everything other than the code eventually executed has
been simpliﬁed away.
The indirect jump behavior illustrated in this example is
very similar to the dispatch code of an emulator. Indirect
memory reference simpliﬁcation allows us to replace the
dispatch jumps of an emulator with direct jumps that can
679679
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
(read-only)
T:
0x500000
0x520000
0x550000
L:
mov ebx, 0
mov eax, T[ebx]
jmp [eax]
add ebx, 4
cmp ebx, 12
jne L
mov ebx, 0
mov eax, T[ebx]
jmp [eax]
Trace of code at 0x500000
add ebx, 4
cmp ebx, 12
jne L
mov eax, T[ebx]
jmp [eax]
Trace of code at 0x520000
add ebx, 4
cmp ebx, 12
jne L
mov eax, T[ebx]
jmp [eax]
Trace of code at 0x550000
add ebx, 4
cmp ebx, 12
jne L
(a) Static code
(b) Unsimpliﬁed trace
mov ebx, 0
mov eax, 0x500000
jmp 0x500000
Trace of code at 0x500000
mov ebx, 4
cmp ebx, 12
jne L
mov eax, 0x520000
jmp 0x520000
Trace of code at 0x520000
mov ebx, 8
cmp ebx, 12
jne L
mov eax, 0x550000
jmp 0x550000
Trace of code at 0x550000
mov ebx, 12
cmp ebx, 12
jne L
(c) Trace after constant
propagation and indirect
memory reference simpli-
ﬁcation
mov ebx, 0
mov eax, 0x500000
jmp 0x500000
Trace of code at 0x500000
mov ebx, 4
cmp ebx, 12
jne L
mov eax, 0x520000
jmp 0x520000
Trace of code at 0x520000
mov ebx, 8
cmp ebx, 12
jne L
mov eax, 0x550000
jmp 0x550000
Trace of code at 0x550000
mov ebx, 12
cmp ebx, 12
jne L
(d) Trace after dead code
elimination
Fig. 4. An example of indirect memory reference simpliﬁcation
then be candidates for further optimization. Importantly, this is
being done via a completely general transformation that makes
no assumptions about whether or how an emulator might be
dispatching code.
While the trace simpliﬁcation process described above is
crucial for removing obfuscation code, it has to be carefully
controlled so that it does not remove too much of the logic
of the computation. The problem is illustrated by Figure
5. Figure 5(a) shows the static code for a simple iterative
factorial computation, written in a C-like notation for ease
of understanding. Figure 5(b) shows the execution trace for
this program for an input value of 3, with input-tainted
instructions shown underlined. Figure 5(c) shows the result of
trace simpliﬁcation: it can be seen that constant propagation
has been applied to all of the updates to the variables fact
and i, and as a result the output operation at the end has been
reduced to ‘write(6)’. This is not helpful for understanding
the logic of the computation, i.e., the mapping from input
values to output values.
To understand the problem, consider the instruction I5 ≡
‘fact := fact * i’. The variables i and fact have
both been initialized to the value 1 at
this point, so the
value of the expression ‘fact * i’ is inferred to be a
constant. Constant propagation then simpliﬁes this instruction
to the assignment ‘fact := 1’. Arguably, this simpliﬁcation
does not preserve the logic of this computation because it
suggests that this assignment computes a ﬁxed constant value
when, in reality, the value that is computed by this instruction
depends on the number of iterations of the loop, which in turn
depends on the input value. The same observation applies to
the other arithmetic simpliﬁcations carried out on this trace.
The problem arises because the simpliﬁcation fails to take into
account the fact that the instruction being simpliﬁed is control-
dependent on the input-tainted instruction I4 ≡ ‘if (i >
n) goto Bot’, which induces an implicit information ﬂow
from the input to I5.
We address this problem by restricting the propagation of
constants across input-tainted conditional jumps. This is done
as follows. We ﬁrst identify control dependencies as described
in Algorithm 1. Given an instruction X, let ControlDeps(X)
denote the set of input-tainted instructions in the execution
trace that X is control-dependent on. Then, a backward-
tainted arithmetic operation I is simpliﬁable only if every
source operand of I is either an immediate operand, or else
is deﬁned by an instruction J such that ControlDeps(J) =
ControlDeps(I). Applying this condition to the trace of Fig-
ure 5(b), we ﬁnd that instruction I5 is control-dependent on the
input-tainted instruction I4 ≡ ‘if (i > n) goto Bot’,
but its operands fact and i, which are deﬁned by instructions
I3 and I2 respectively, which are not control dependent on
any instruction and therefore in particular are not control
dependent on I4. Thus, ControlDeps(I5) (cid:6)= ControlDeps(I3)
and so I5 is not simpliﬁable. The constant value of fact
deﬁned by I3 is therefore not propagated to I5, which is what
we want.
D. Control Flow Graph Construction
The ﬁnal step in our deobfuscation process is to construct a
CFG [24] from the simpliﬁed trace obtained from the trace
simpliﬁcation step. For deobfuscation purposes, one issue
that arises in this context
is that of reuse of code in a
way that complicates the program’s control ﬂow structure. In
obfuscated code, we very often ﬁnd that a given functionality
I—e.g., an emulator operation such as addition or subtrac-
680680
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:09:00 UTC from IEEE Xplore.  Restrictions apply. 
n := read()