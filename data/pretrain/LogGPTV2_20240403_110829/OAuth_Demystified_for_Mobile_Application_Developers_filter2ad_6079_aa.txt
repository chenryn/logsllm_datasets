title:OAuth Demystified for Mobile Application Developers
author:Eric Y. Chen and
Yutong Pei and
Shuo Chen and
Yuan Tian and
Robert Kotcher and
Patrick Tague
OAuth Demystiﬁed for Mobile Application Developers
Eric Chen
Carnegie Mellon University
PI:EMAIL
Yuan Tian
Carnegie Mellon University
PI:EMAIL
Yutong Pei
Carnegie Mellon University
PI:EMAIL
Shuo Chen
Microsoft Research
PI:EMAIL
Robert Kotcher
Carnegie Mellon University
PI:EMAIL
Patrick Tague
Carnegie Mellon University
PI:EMAIL
ABSTRACT
OAuth is undoubtedly a highly inﬂuential protocol today,
because of its swift and wide adoption in the industry. The
initial objective of the protocol was speciﬁc:
it serves the
authorization needs for websites. What motivates our work
is the realization that the protocol has been signiﬁcantly re-
purposed and re-targeted over the years: (1) all major iden-
tity providers, e.g., Facebook, Google, Microsoft and Twit-
ter, have re-purposed OAuth for user authentication; (2)
developers have re-targeted OAuth to the mobile platforms,
in addition to the traditional web platform. Therefore, we
believe that it is very necessary and timely to conduct an
in-depth study to demystify OAuth for mobile application
developers.
Our work consists of two pillars: (1) an in-house study
of the OAuth protocol documentation that aims to identify
what might be ambiguous or unspeciﬁed for mobile develop-
ers; (2) a ﬁeld-study of over 600 popular mobile applications
that highlights how well developers fulﬁll the authentication
and authorization goals in practice. The result is really wor-
risome: among the 149 applications that use OAuth, 89 of
them (59.7%) were incorrectly implemented and thus vul-
nerable. In the paper, we pinpoint the key portions in each
OAuth protocol ﬂow that are security critical, but are con-
fusing or unspeciﬁed for mobile application developers. We
then show several representative cases to concretely explain
how real implementations fell into these pitfalls. Our ﬁnd-
ings have been communicated to vendors of the vulnerable
applications. Most vendors positively conﬁrmed the issues,
and some have applied ﬁxes. We summarize lessons learned
from the study, hoping to provoke further thoughts about
clear guidelines for OAuth usage in mobile applications.
1.
INTRODUCTION
The essence of Software-as-a-Service (SaaS) is that diﬀer-
ent components of a web or mobile application are developed
by diﬀerent providers. The need for secure authentication
and authorization across companies has never been so im-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660323.
portant. Today, the most widely adopted protocol in this
space is OAuth. It is currently deployed by numerous ma-
jor companies including Facebook, Google, Microsoft and
Twitter.
Originally, OAuth was designed to provide a secure au-
thorization mechanism for websites.
It deﬁnes a process
for end-users to grant a third-party website the access to
their private resources stored on a service provider. The
third-party website is often referred to as the consumer [26],
client [27], or relying party [41] (we will use the term “relying
party” exclusively in this paper). There are two versions of
OAuth protocols, OAuth 1.0 and OAuth 2.0 [26, 27]. They
are both actively use by real-world websites.
Ever since OAuth was successfully adopted by the indus-
try, major companies have re-purposed OAuth for authen-
tication as well. That is, the protocol enables a user to
prove his or her identity to a relying party, utilizing his or
her existing session with the service provider. The web in-
dustry’s trend to obsolete other protocols and move toward
OAuth is very decisive – the new authentication mechanisms
provided by the aforementioned companies are all OAuth-
based. Therefore, despite the fact that neither OAuth 1.0
or OAuth 2.0 documentation explicitly purposes itself for
authentication, OAuth is now a de-facto authentication and
authorization protocol.
OAuth for mobile applications. The years of OAuth’s
evolution, since 2007, happen to be the same period of the
boom of mobile applications. Authentication and authoriza-
tion are as needed by mobile applications as by traditional
websites. Almost inevitably, OAuth became the protocol for
implementing authentication and authorization functional-
ity in mobile applications. According to our study, more
than 24% of the 600 top Android applications taken from
several Google Play categories use OAuth. We studied the
OAuth 1.0 and OAuth 2.0 protocol documentation carefully,
and realized that secure usage of OAuth for mobile appli-
cations could be mysterious since the protocol is primarily
designed in the mindset of traditional web technology rather
than mobile platforms. Motivated by earlier work to demys-
tify the setuid system calls on UNIX systems [8], we believe
that it is very necessary and timely to conduct a study to
demystify OAuth for mobile application developers.
We observe that, despite its wide deployment, the OAuth
protocol is very complicated for average developers to com-
prehend. For example: (1) the use-case for authentication is
left unspeciﬁed for both OAuth speciﬁcations, which causes
developers to assemble a set of OAuth concepts and crypto
primitives more or less through their own intuition. (2) Both
OAuth 1.0 and 2.0 use browser redirection extensively for
delivering OAuth tokens. However, it is unclear how this
operation can be performed in mobile applications without
browser’s involvement. (3) The two versions of OAuth pro-
tocols target diﬀerent scenarios and contain diﬀerent sets
of concepts. One version does not subsume or obsolete an-
other. They simply coexist with many unconsolidated dis-
crepancies.
(4) The OAuth 2.0 speciﬁcation is extremely
extensible, and in a way, underspeciﬁed by design. For all
these reasons, we wondered how likely mobile application
developers were to misinterpret the OAuth protocol, or fall
into pitfalls that the protocol leaves unspeciﬁed.
Our work. Our work consists of two pillars: (1) an in-
house study of the OAuth protocol documentation in the
mindset of mobile application development that aims to un-
derstand what might be ambiguous or unspeciﬁed in the
protocol; (2) a ﬁeld-study of popular mobile applications to
see how well developers fulﬁll the authentication and au-
thorization goals. First, we study three canonical OAuth
ﬂows described in the OAuth speciﬁcations [26, 27] – the
OAuth 1.0 ﬂow, the OAuth 2.0 authorization code grant
and the OAuth 2.0 implicit grant. We then analyze the two
use-cases of OAuth: authorization and authentication, and
factor out properties of the protocol that must be satisﬁed in
order to achieve security. We proceed to show how the three
aforementioned protocol ﬂows realize these security proper-
ties. Finally, we investigate how OAuth is being interpreted
by real-world mobile application developers, and point out
several common misconceptions that ultimately undermine
the security properties of OAuth.
Our study was conducted on 149 popular OAuth-capable
mobile applications. The focus was to dissect the rationales
behind diﬀerent OAuth implementations, and to understand
why some of these applications are secure while others are
seriously vulnerable. Our analysis reveals that real-world
OAuth implementations are extremely diverse; rarely do two
service providers (or even relying parties of the same service
provider) share the same protocol ﬂow (e.g., Hulu, Spotify
and Instagram all use Facebook for authentication but each
have their own protocol ﬂows). We believe that this diver-
sity of mobile implementations reﬂects the real issues with
OAuth. Not only is the protocol deﬁned over multiple spec-
iﬁcations with two diﬀerent use-cases, but also its mobile
usage is poorly deﬁned and underspeciﬁed. This forces de-
velopers to resort to their own interpretations when imple-
menting the protocol. Our study shows that 59.7% of these
implementations were faulty and vulnerable to attacks.
A real example. The result of our study highlights not
only the complexity of the OAuth protocol, but also the
misunderstandings amongst many OAuth developers. For
instance, the security property of the OAuth access token
diﬀers across OAuth 1.0 and OAuth 2.0. In OAuth 1.0, each
access token is bound to and can only be used by the rely-
ing party the access token was issued to. However, an access
token in OAuth 2.0 (which is also referred to as a “bearer
token”) can be used by any party in possession of this to-
ken. “Any party in possession of a bearer token can use it
to get access to the associated resources” [28].
In reality,
the confusion between these two types of access tokens is re-
ﬂected through several erroneous OAuth implementations.
We found that a known vulnerability (described in refer-
ences [7, 43]) still existed in the Friendcaster Android appli-
cation’s Facebook authentication service, which allowed an
attacker to sign into an honest Facebook user’s Friendcaster
account. This error was caused by Friendcaster blindly ac-
cepting an access token received from a user’s device then
using this token to exchange for the user’s Facebook ID.
A malicious application could easily obtain a legitimate ac-
cess token from a user, then use this access token to log
into Friendcaster as the user. When we reported this is-
sue to Friendcaster, the developers were confused because
they thought Facebook’s access tokens were bound to relying
parties and checked with every API call: “From Facebook’s
perspective, the API calls wouldn’t appear to be originat-
ing from Friendcaster, but the attacker’s own app.” In other
words, the developers of Friendcaster thought Facebook uses
the OAuth 1.0 interpretation of the access token, while in
reality Facebook uses the OAuth 2.0 interpretation. We ﬁnd
similar misinterpretations of the OAuth protocol to be com-
mon amongst mobile developers. We will explain these cases
in more detail in Section 5 and summarize the lessons learned
from them.
The rest of the paper is organized as follows: Section 2
provides the background for OAuth 1.0 and 2.0. We give an
overview about our study in Section 3. The details of the
study are presented in Section 4 and Section 5. We describe
related work in Section 6 and conclude in Section 7.
2. OAUTH BACKGROUND
The OAuth discussion group began in 2007 as a commu-
nity eﬀort to allow third-party access to users’ protected
resources without the need to reveal their credentials. The
ﬁrst version of the OAuth protocol (OAuth 1.0) was drafted
in October 2007 and published as an RFC in April 2010 [26].
Since then, the protocol has gone through numerous revi-
sions. The most notable changes to the protocol were re-
leased in October 2012 as the OAuth 2.0 framework [27].
2.1 OAuth 1.0 and OAuth 1.0a
When the ﬁrst version of OAuth was drafted, there existed
another popular protocol called OpenID for third-party user
authentication [13]. Hence, OAuth was mainly designed to
address an issue that was not covered by OpenID – secure
API access delegation (i.e., authorization). While the term
“API authentication” was occasionally used to describe the
functionality of OAuth [29], the protocol speciﬁcation itself
was never meant for user authentication.
The OAuth 1.0 protocol ﬂow is illustrated in Figure 1. All
dashed lines in our ﬁgures represent browser redirection and
solid lines represent direct server-to-server API calls (e.g., a
SOAP or REST API call). In addition, parameters inside
square brackets are signed using shared secrets, which we
describe in detail in Section 4.1. For now, we present a
summary of the protocol ﬂow.
• Unauthorized request token (Step 1,2) – First, the
relying party obtains a request token from the service
provider using a direct server-to-server call.
• Authorized request token (Step 3-5) – Then, the
relying party redirects the user to the service provider
(possibly via a browser redirection) with the request
token as a URI parameter. Then, the user grants the
relying party access to his/her protected resource and
is redirected back to the relying party.
• Access token (Step 6,7) – At this point, the relying
party can exchange the request token for an access
token using another direct server-to-server call with
the service provider.
• Protected resource (Step 8,9) – Finally, this access
token is used to obtain the user’s protected resource.
Two years after the release of the OAuth 1.0 draft, a ses-
sion ﬁxation attack was discovered against the request token
approval step of the protocol [23]. To ﬁx the vulnerability, a
revision to the original protocol was released (called OAuth
1.0a), which included a veriﬁcation code to the ﬁnal request
token response (Step 5 of Figure 1). This code is used during
the access token exchange to prove that the user complet-
ing the access token exchange is the same user who granted
access. For simplicity, we will use the term “OAuth 1.0” to
refer to OAuth 1.0a for the rest of this paper.
2.2 OAuth 2.0
OAuth 1.0 (and OAuth 1.0a) had several notable limita-