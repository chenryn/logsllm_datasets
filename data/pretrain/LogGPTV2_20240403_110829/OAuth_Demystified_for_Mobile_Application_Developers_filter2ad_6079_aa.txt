# OAuth Demystified for Mobile Application Developers

## Authors
- Eric Y. Chen, Carnegie Mellon University (PI: EMAIL)
- Yutong Pei, Carnegie Mellon University (PI: EMAIL)
- Shuo Chen, Microsoft Research (PI: EMAIL)
- Yuan Tian, Carnegie Mellon University (PI: EMAIL)
- Robert Kotcher, Carnegie Mellon University (PI: EMAIL)
- Patrick Tague, Carnegie Mellon University (PI: EMAIL)

## Abstract
OAuth has become a highly influential protocol due to its widespread adoption in the industry. Initially designed to serve authorization needs for websites, OAuth has been repurposed and retargeted over the years. Major identity providers, such as Facebook, Google, Microsoft, and Twitter, have repurposed OAuth for user authentication. Additionally, developers have adapted OAuth for mobile platforms, beyond its traditional web use. This paper aims to demystify OAuth for mobile application developers through an in-depth study.

Our work comprises two main components:
1. An in-house study of the OAuth protocol documentation to identify ambiguities and unspecified areas for mobile developers.
2. A field study of over 600 popular mobile applications to assess how well developers fulfill authentication and authorization goals in practice.

The results are concerning: out of 149 applications using OAuth, 89 (59.7%) were incorrectly implemented, making them vulnerable to attacks. We highlight the critical security aspects of each OAuth protocol flow that are often confusing or unspecified for mobile developers. We also provide concrete examples of common pitfalls and their real-world implications. Our findings have been communicated to the vendors of the affected applications, with many confirming the issues and some implementing fixes. We summarize the lessons learned and propose clear guidelines for OAuth usage in mobile applications.

## 1. Introduction
Software-as-a-Service (SaaS) involves different components of web or mobile applications being developed by various providers. The need for secure authentication and authorization across these entities has never been more important. OAuth is the most widely adopted protocol in this space, used by major companies like Facebook, Google, Microsoft, and Twitter.

Originally, OAuth was designed to provide a secure authorization mechanism for websites, allowing end-users to grant third-party websites access to their private resources on a service provider. These third-party websites are often referred to as relying parties. There are two versions of the OAuth protocol: OAuth 1.0 and OAuth 2.0, both actively used in the industry.

Over time, major companies have repurposed OAuth for user authentication, enabling users to prove their identity to a relying party using their existing session with the service provider. Despite neither version explicitly stating it, OAuth has become the de facto standard for both authentication and authorization.

### OAuth for Mobile Applications
The evolution of OAuth since 2007 coincides with the boom in mobile applications. Authentication and authorization are equally important for mobile apps as they are for traditional websites. Consequently, OAuth has become the primary protocol for implementing these functionalities in mobile applications. According to our study, over 24% of the top 600 Android applications on Google Play use OAuth.

However, the secure usage of OAuth for mobile applications can be challenging because the protocol was primarily designed for traditional web technology. Motivated by previous work to demystify setuid system calls on UNIX systems, we believe it is essential and timely to conduct a study to demystify OAuth for mobile application developers.

Despite its wide deployment, the OAuth protocol is complex for average developers to understand. For example:
1. The use case for authentication is left unspecified in both OAuth specifications, leading developers to rely on intuition.
2. Both OAuth 1.0 and 2.0 use browser redirection for delivering OAuth tokens, but it is unclear how this can be done in mobile applications without a browser.
3. The two versions target different scenarios and contain different sets of concepts, with no one version subsuming the other.
4. The OAuth 2.0 specification is highly extensible and underspecified by design.

These factors led us to question how likely mobile application developers are to misinterpret the OAuth protocol or fall into unspecified pitfalls.

### Our Work
Our work consists of two main components:
1. An in-house study of the OAuth protocol documentation from the perspective of mobile application development to identify ambiguities and unspecified areas.
2. A field study of popular mobile applications to assess how well developers fulfill authentication and authorization goals.

We analyzed three canonical OAuth flows: the OAuth 1.0 flow, the OAuth 2.0 authorization code grant, and the OAuth 2.0 implicit grant. We then examined the two use cases of OAuth—authorization and authentication—and identified the security properties that must be satisfied. We showed how these flows realize these security properties and investigated how real-world mobile application developers interpret OAuth, highlighting common misconceptions that undermine security.

Our study focused on 149 popular OAuth-capable mobile applications, dissecting the rationales behind different implementations and understanding why some are secure while others are vulnerable. We found that real-world OAuth implementations are highly diverse, with few service providers sharing the same protocol flow. This diversity reflects the real issues with OAuth, as the protocol is defined over multiple specifications with two different use cases, and its mobile usage is poorly defined and underspecified. Our analysis revealed that 59.7% of these implementations were faulty and vulnerable to attacks.

### Real Example
One example of a common misunderstanding is the difference in security properties of the OAuth access token between OAuth 1.0 and OAuth 2.0. In OAuth 1.0, each access token is bound to the relying party it was issued to, whereas in OAuth 2.0, a bearer token can be used by any party in possession of it.

In the Friendcaster Android application, a known vulnerability allowed an attacker to sign into a user's account using a legitimate access token. The developers were confused because they thought Facebook’s access tokens were bound to relying parties and checked with every API call, reflecting a misunderstanding of the OAuth 2.0 interpretation. We find similar misinterpretations to be common among mobile developers.

### Paper Organization
The rest of the paper is organized as follows:
- Section 2 provides the background for OAuth 1.0 and 2.0.
- Section 3 gives an overview of our study.
- Sections 4 and 5 present the details of the study.
- Section 6 describes related work.
- Section 7 concludes the paper.

## 2. OAuth Background
The OAuth discussion group began in 2007 as a community effort to allow third-party access to users’ protected resources without revealing their credentials. The first version, OAuth 1.0, was drafted in October 2007 and published as an RFC in April 2010. Since then, the protocol has undergone numerous revisions, with the most notable changes released in October 2012 as the OAuth 2.0 framework.

### 2.1 OAuth 1.0 and OAuth 1.0a
When OAuth 1.0 was drafted, another popular protocol, OpenID, existed for third-party user authentication. OAuth was primarily designed to address secure API access delegation (authorization). While "API authentication" was occasionally used to describe OAuth, the protocol itself was not intended for user authentication.

The OAuth 1.0 protocol flow is illustrated in Figure 1. Dashed lines represent browser redirections, and solid lines represent direct server-to-server API calls. Parameters inside square brackets are signed using shared secrets, which we detail in Section 4.1.

- **Unauthorized request token (Steps 1-2)**: The relying party obtains a request token from the service provider using a direct server-to-server call.
- **Authorized request token (Steps 3-5)**: The relying party redirects the user to the service provider with the request token as a URI parameter. The user grants the relying party access to their protected resource and is redirected back.
- **Access token (Steps 6-7)**: The relying party exchanges the request token for an access token using another direct server-to-server call.
- **Protected resource (Steps 8-9)**: The access token is used to obtain the user’s protected resource.

Two years after the release of OAuth 1.0, a session fixation attack was discovered. To fix this, OAuth 1.0a was released, adding a verification code to the final request token response. For simplicity, we will refer to OAuth 1.0a as OAuth 1.0 in this paper.

### 2.2 OAuth 2.0
OAuth 1.0 had several limitations, leading to the development of OAuth 2.0. OAuth 2.0 introduces new flows and simplifies the protocol, but it also introduces new challenges and complexities, particularly for mobile applications.