在一个print语句中可以将多个条目打印到同一个输出行中.打印每一个输入行的第1与第3个
宇段的程序是
{print $1,$3 }
当emp.data作为输入时，它会输出
Beth 0
Dan 0
Kathy 10
Mark 20
Mary 22
Susie 18
在print语句中由逗号分隔的表达式，在输出时默认用一个空格符分隔，由print打印的每一行都由
一个换行符终止，这些跌认行为都可以修改，我们将在第二章讨论如何修改，
NF，字段的数量
有时候，必须总是通过$1，S2这样的形式引用字段，但是任何表达式都可以出现在S的后面，用来
指明一个字段的编号：表达式被求值，求出的值被当作字段的编号.Awk计算当前输入行的字段数量，并
将它存储在一个内建的变量中，这个变量叫作NF.因此程序
{print NF，$1，$NF }
将会打印每一个输入行的字段数量，第一个字段，以及最后一个字段，
计算和打印
也可以用字段的值进行计算，并将计算得到的结果放在输出语句中，程序
{print $1,$2*$3}
是一个很典型的例子，它会打印雇员的名字与报酬（每小时工资乘以工作时长）：
---
## Page 14
第一章快速入门
6
Beth 0
Dan 0
Kathy 40
Mark 100
Mary 121
Susie 76.5
我们待会儿就会展示如何将输出做得更好看。
打印行号
Awk提供了另一个内建变量NR，这个变量计算到目前为止，读取到的行的数量，我们可以使用NR
和$0为emp.data的每一行加上行号：
{print NR, $0 }
输出就像这样：
1 Beth
4.00
2 Dan
3.75
0
3 Kathy
4.00
10
4 Mark
5.00
20
5 Mary
5 .50
22
6 Susie
4 .25
18
将文本放入输出中
也可以把单词放在字段与算术表达式之间：
{print"totalpay for",$1,"is",$2*$3)
输出
total pay for Beth is 0
total pay for Dan is 0
total pay for Kathy is 40
total pay for Mark is 100
total pay for Mary is 121
total pay for Susie is 76.5
在print语句中，被双引号包围的文本会和字段，以及运算结果一起输出.
1.3更精美的输出
print用于简单快速的输出，如果读者想要格式化输出，那么就需要使用printf语旬.正如我们
将要在2.4节看到的那样，printf几乎可以产生任何种类的输出，但在这一节，我们仅仅展现它的一小
部分能力.
---
## Page 15
第一章快速入门
字段排列
printf语句具有形式
printf (format, value, value,..., value,)
format是一个字符串，它包含按字面打印的文本，中阔数布着格式说明符，格式说明符用于说明如何打
印值，一个格式说明符是一个&，后面跟着几个字符，这些字符控制一个ualue的输出格式.第一个格式
说明符说明ualue的输出格式，第二个格式说明符说明ualue2的输出格式，依次类推，于是，格式说明
符的数量应该和被打印的value一样多。
这个程序使用printf打印每位雇员的报酬：
{printf("total pay for &s is $&.2f\n", $1, $2 * $3) }
这个printf语句的格式字符串包含两个格式说明符.第一个格式说明符&s，是说将第一个值S1，以字8
符串的形式打印；第二个格式说明符$，2f，是说将第二个值$2*$3，按照数值格式打印，且带有两位小
数.格式字符串的其他内容（包括美元符）按照字面值打印；字符串末尾的\n表示换行符，该符号使后面
的输出从下一行开始，当emp.data作为输入时，这个程序输出：
total pay for Beth is $0.00
total pay for Dan is $0.00
total pay for Kathy is $40.00
total pay for Mark is $100.00
total pay for Mary is $121.00
total pay for Susie is $76.50
使用printf不会自动产生空格符或换行符；用户必须自己创建它们，不要忘了\n.
另外一个程序打印每位雇员的名字与报酬：
{printf("-8s S&6.2f\n",$1,$2 * $3)}
第一个格式说明符毛-8s，将名字左对齐输出，占用8个字符的宽度，第二个格式说明符86.2f，将报酬
以带有两位小数的数值格式打印出来，数字至少占用6个字符的宽度：
Beth$0.00
$0.00
Kathy$ 40.00
Mark
$100.00
Mary
$121.00
Susie
$76.50
更多的关于printf的例子会慢慢加以介绍，而完整描述在2.4节.
输出排序
设想一下你想要为每一位雇员打印所有的数据，包括他的报酬，报酬按照升序排列.最简单的办法是
使用awk在每一位雇员的记录前加上报酬，然后再通过一个排序程序进行排序，在Unix中，命令行
原文中Bort 命令没有带上选项-n.—译者注
---
## Page 16
第一章快速入门
awk'{ printf("&6.2f &s\n", $2 * $3, $0) }′emp.data|sort -n
将awk的输出通过管道传递给sort命令，最后输出：
回
0.00 Beth
4.00
0
0.00 Dan
3.75
0
40.00 Kathy
4.00
10
76.50 Susie
4 .25
18
100.00 Mark
5.00
20
121.00 Mary
5 .50
22
1.4选择
Awk的模式非常擅长从输入中选择感兴趣的行，以便进行进一步的处理，因为一个没有动作的模式
会将所有匹配的行打印出来，所以许多awk程序仅含有一条单独的模式，这一节给出的的例子，其模式
具有很高的实用价值，
通过比较进行选择
这个程序使用一个比较模式来选择某些雇员的记录，条件是他的每小时工资大于等于$5.00，也就
是第二个字段大于等于5：
$2 >= 5
它从emp.data中选择这些行：
Mark
5.00
20
Axe
5.50
22
通过计算进行选择
程序
$2* $3 >50{ printf("$.2f for &s\n",$2 *$3,$1) )
打印那些报酬超过$50的雇员：
$100.00 for Mark
$121.00 for Mary
$76.50 for Susie
通过文本内容选择
除了数值选择，用户也可以选择那些包含特定单词或短语的输入行，这个程序打印所有第一个字段
是Susie 的行：
$1 == "Susie"
---
## Page 17
第一章快速入门
6
操作符==测试相等性，用户也可以搜索含有任意字母，单词或短语的文本，通过一个叫做正则表达式
(regular expressions）的模式来完成，这个程序打印所有包含 Susie 的行：
10
/Susie/
输出是
Susie4.25
18
正则表达式可以用来指定非常精细的模式，2.1节包含了一个完整的讨论。
模式的组合
模式可以使用括号和逻辑运算符进行组合，逻辑运算符包括&&，11，和1，分别表示AND,OR,和
NOT.程序
$2 >= 4 11 $3 >= 20
打印那些S2至少为4,或者$3至少为20的行：
Beth
4.00
0
Kathy
4.00
10
Mark
5.00
20
Mary
5.50
22
Susie
4.25
18
两个条件都满足的行只输出一次，将这个程序与下面这个程序作对比，它包含两个模式：
$2 >= 4
$3 >= 20
如果某行对这两个条件都满足，它会被打印两次
Beth
4 .00
0
Kathy
4 .00
10
5 .00
20
Mark
5.00
20
Mary
5 .50
22
Mary
5 .50
22
Susie
4 .25
18
注意程序
1 ($2 10{print S0,"rate exceeds $10 per hour"}
$3 60{ print $0,"too many hours worked"}
如果数据没有错误，就不会有输出。
BEGIN 与 END
特殊的模式BEGIN在第一个输入文件的第一行之前被匹配，END在最后一个输入文件的最后一行
被处理之后区配，这个程序使用BEGIN打印一个标题：
BEGIN { print"NAME
RATE
HOURS"; print "")
{print}
输出是
NAME
RATE
HOURS
Beth
4.00
0
Dan
3 .75
0
Kathy
4 .00
10
Mark
5.00
20
Mary
5 .50
22
Susie
4.25
18
可以在同一行放置多个语句，语句之间用分号分开，注意print""打印一个空行，它与一个单独的
print并不相网，后者打印当前行.
1.5用AWK计算
一个动作就是一个语句序列，语句之间用分号或换行符分开，读者已经见过只有一条单独的print
语句的动作，这一小节提供的例子所包含的语句可以用来进行简单的数学或字符串计算，在这些语句
里，不仅可以使用内建变量，比如NF，还可以自已定义变量，这些变量可以用来计算，存储数据，等等，在
awk中，用户创建的变量不需要事先声明就可以使用。
---
## Page 19
第一章快速入门
11
计数
这个程序用一个变量emp计算工作时长超过15个小时的美工人数：
12
$3 > 15{ emp = emp + 1 }
对每一个第三个字段超过15的行，变量emp的值就加1.用emp.data作输入数据，这个程序输出：
3 employees worked more than 15 hours
当awk的变量作为数值使用时，跌认初始值为0,所以我们没必要物始化emp.
计算总和与平均数
为了计算雇员的人数，我们可以使用内建变量NR，它的值是到目前为止读取到的行数；当所有输入
都处理完毕时，它的值就是读取到的行数，
END (print NR, "employees"}
输出是：
6 employees
这里有个程序利用NR来计算平均报酬：