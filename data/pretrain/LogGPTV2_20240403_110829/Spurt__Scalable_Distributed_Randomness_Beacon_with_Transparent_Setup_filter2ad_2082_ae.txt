in the following game played against a challenger C.
1) The challenger C generates public parameters of SPURT
2) A selects a set of at most t nodes and corrupts them. A
3) C creates secret and public keys for all honest nodes and
4) A sends the public keys of the corrupt nodes to the
challenger. Note that these public keys of corrupt nodes
do not have to be legimate public keys (they do not need
to have correponding private keys) and they can be chosen
after seeing the public keys of honest nodes.
- C chooses PVSS inputs of honest nodes and sends
corresponding commitment phase messages to A.
- A aggregates the PVSS messages and runs agreement
phase with C during which A can observe and reorder
messages sent between every pair of nodes during the
agreement phase.
5) C and A start executing an epoch of SPURT as follows:
on a digest.
- The challenger waits till at least one honest node decides
6) C samples a bit b ∈ {0, 1} and depending on b, sends either
the beacon output corresponding to digest or a uniformly
random element from the target group GT .
7) A makes a guess b(cid:48).
The advantage of A is deﬁned as | Pr[b = b(cid:48)] − 1/2|.
Next, we prove the Indistinguishability theorem. Our proof
assumes a static adversary. As of now, we are unable to prove
SPURT secure against an adaptive adversary. But we do not
know of any concrete attack either.
Theorem 1 (Indistinguishability). Assuming hardness of De-
cisional Bilinear Difﬁe–Hellman, SPURT guarantees Indistin-
guishability in the programmable random oracle model.
Proof. We show that, if there exists a PPT adversary A that
distinguishes between a beacon output and a random element,
then there exists an adversary ADBDH that can use A to break
the DBDH with a similar (polynomially related) advantage.
Let g0 ∈ G0 and g1 ∈ G1 be the generators of the groups.
1 , z) be an instance of the DBDH problem.
Let (gα
If α = 0 or β = 0 or γ = 0, then the problem is trivial, so we
assume these values are non-zero. Now ADBDH, upon given
the DBDH instance, interacts with A to simulate SPURT for
a epoch as follows. Without loss of generality A corrupts the
ﬁrst t nodes. Let T = {t + 1, t + 2, . . . , n}.
1 and sends them to A. For
1) ADBDH sets h0 = gβ
t < i ≤ n, ADBDH selects uniformly random values ui ←
Zp (these can be thought to implicitly deﬁne ski = ui/β)
and sends pki = gui
2) For 1 ≤ i ≤ t, A sends the public keys pki to the ADBDH.
0
3) ADBDH samples an index a ← T and uses the DBDH
challenge as the PVSS input of node a for that epoch. Let
0 , h1 = gγ
to A.
1 , gβ
0 , gγ
0 , gα
1
1 , gα
0 , gsi
1 , and gsi
T−a denote the set T\{a}. For nodes T−a, ADBDH samples
random secrets (i.e., xj ← Zq for node j) and uses them
as their PVSS inputs.
4) For nodes in T−a, ADBDH computes the PVSS messages
as per the honest protocol. For node a, ADBDH computes
the PVSS message as follows:
- For 1 ≤ i ≤ t, ADBDH chooses uniformly random values
si ∈ Zq and set vi = gsi
0 and ci = pksi
i .
- For t < i ≤ n, it generates values vi = gp(i)
and wi =
gp(i)
0 where p(x) is the unique polynomial of degree at
most t determined by p(0) = α and p(i) = si for i =
1, ..., t. Note that ADBDH does not know α, but it does
0 for 1 ≤ i ≤ t, so it can use
know gα
the Lagrange interpolation in the exponent to compute
the adequate vi and wi.
- For t < i ≤ n, it creates the values ci = wui
then ci = gui·p(i)
1 , wi = gsi
5) ADBDH sends all these information to A.
6) Let I be the set of indices A chooses to aggregate such
that the aggregation veriﬁcation for every node in I is
successful at t + 1 honest nodes. If a (cid:54)∈ I, ADBDH outputs
1 and aborts. Otherwise, ADBDH extracts the aggregated
secrets of adversarial nodes as follows:
- Extract t + 1 points of the polynomials chosen by
the nodes in I \ T−a. Without loss of generality, let
{1, 2, . . . , t + 1} be the evaluation points.
- Let yi(·) be the polynomial chosen by node i ∈ I \ T−a.
ADBDH extracts yi(j) for j = 1, 2, . . . , t + 1 using the
extractor of the Chaum-Pedersen protocol in parallel.
- Let y(·) be the polynomial
such that y(j) =
yi(j). Interpolate y(·) using the t + 1 values
. Note that
= pkp(i)
(cid:80)
0
.
i
i
i∈I\T−a
of y(j) at j = 1, 2, . . . , t + 1.
to compute s. Send z · e(h0, h1)s to A.
7) Let s be the sum of secrets of all nodes in I−a. Use y(0)
8) Output whatever A outputs.
Note that the information A receives in step 5) is distributed
exactly like a epoch in SPURT. Also, y(·) is a polynomial
of degree t because the aggregated polynomial and the poly-
nomial chosen by the honest nodes are of degree t. Hence,
t + 1 evaluation points are sufﬁcient to recover y(·) and hence
y(0). Due to parallel composition property of Σ-protocols [30,
Lemma 1], ADBDH can extract y(0) while maintaining that
the view of ADBDH is indistinguishable from the view in
the real execution. Furthermore, since I contains at least one
honest node,
least 1/n.
When a ∈ I, the beacon output is e(h0, h1)β+s which is
equal to z · e(h0, h1)s if z = e(h0, h1)β. Otherwise, if z is
random, then z·e(h0, h1)s is also random. Thus, if A wins the
Indistinguishability game with probability p, than ADBDH will
break the DBDH assumption with probability at least p/n.
the probability that a ∈ I is at
Next, we prove that SPURT guarantees nearly simultaneous
output. To do so, we will ﬁrst prove that our modiﬁed SMR
protocol guarantees nearly simultaneous decisions.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
92510
Lemma 3 (Nearly Simultaneous SMR). When an honest node
decides on a digest, every honest node decides on digest
decide within two message delays.
Proof. Recall an honest node decides on digest upon receiv-
ing 2t + 1 FINALIZE message on digest. At least t + 1 of
these are sent by honest nodes. Hence, every honest node will
receive at least t+1 FINALIZE message during the same round.
As a result, all honest nodes will send FINALIZE message for
digest in the next round (if they have not already). Thus, all
honest nodes will receive at least 2t + 1 FINALIZE messages
and decide digest by the end of the next round.
Lemma 4 (Nearly Simultaneous Beacon Output). For any
given height ht, every honest node learns the beacon output
oht at most four message delays later from when the adversary
learns the output.
Proof. Using Theorem 1 we know that till an honest node
starts reconstruction, the beacon output remains indistinguish-
able from a uniformly random element in the target group
GT . Since honest nodes start reconstruction only upon SMR
decision and all honest nodes decide within two message
delays, every honest node will start reconstruction within two
message delays. Thus, a subset of at least t + 1 honest nodes
will recover the beacon output at most three message delays
later than A, and all honest nodes will recover the beacon
output at most four message delays later than A.
Theorem 2 (Bias-resistance and Unpredictability). Assuming
hardness of DBDH, SPURT is unpredictable and bias-resistant.
Proof. Follows from Lemma 2, Theorem 1, and Lemma 4.
B. Availability and Public Veriﬁability
Theorem 3. (Availability) During periods of synchrony, if the
leader Lr of an epoch r is honest, every honest node will
produce a beacon output.
Proof. When Lr is honest, all the checks described in §V-C
would be successful at every honest node. During periods of
synchrony, due to the liveness property of SMR honest nodes
will decide on the value proposed by Lr. Furthermore, as the
leader is honest, every honest node will have the data needed
to validate the decrypted shares sent during the reconstruction
phase. Thus, each honest node will successfully output a
beacon value during that epoch.
Public veriﬁability for beacon protocols producing true
random numbers differs from beacon protocols producing
pseudorandom numbers [2], [21], [23], [69]. In pseudorandom
beacons, each beacon output is some deterministic function
of the secret key generated during the initial setup phase.
Hence, the output can be efﬁciently veriﬁed given only the
veriﬁcation/public key corresponding to the secret key used
for beacon generation. Contrary to this, truly random beacons
such as Scrape [25], Hydrand [65], and SPURT have to be
veriﬁed using the transcript of the interaction between nodes.
To verify the validity of a beacon output, a client (not one
of the nodes) simply needs to obtain t + 1 BEACON messages
Table III: Summary of communication and computation cost of each
epoch of SPURT. — indicate the no cost for the corresponding phase.
In the latency column, the (+k) denotes that in the worst case k
additional rounds might be required for that phase to end.
Protocol Phase
Communication
Computation
Leader Non-leader Leader Non-leader
Latency
(# rounds)
Commitment O(λn2) O(λn)
Aggregation
Agreement
Reconstruction —
O(λn2) O(λn)
O(λn2)
—
—
—
O(n2)
—
—
O(n)
—
O(n)
O(n)
1
0
5(+1)
1(+1)
signed by distinct nodes, which we call a beacon certiﬁcate.
The client can query a single node for the beacon certiﬁcate.
Note that in SPURT, every honest node has a beacon certiﬁcate
as it receives at least t + 1 identical BEACON messages. We
remark that there are other ways to achieve public-veriﬁability.
For example, the SMR decision certiﬁcate on digest along
with aggregated messages is an alternative way.
C. Performance
In this section, we analyze the communication and com-
putation cost of generating every beacon output. We measure
communication cost in the number bits sent and computation
cost in the number of exponentiations and pairings each node
needs to perform. We assume each signature is O(λ)-bit
long. Also, we assume that a node needs to perform O(1)
exponentiations to compute and validate a single signature.
We summarize our performance analysis in Table III.
Communication cost. During the commitment phase of an
epoch r, each node sends O(n) group elements to Lr. Next,
during the agreement phase, Lr sends back O(n) group
elements to every node, and every node multi-casts the hash
of the aggregated message. Finally, during the reconstruction
phase, each node multi-casts O(1) group elements to all other
nodes. Hence, each of the three phases incurs a communication
cost of O(λn2) (across all nodes).
Also observe that during periods of synchrony, for every n
epochs, there will be at least (cid:100)2n/3(cid:101) honest leaders, and hence
(cid:100)2n/3(cid:101) beacon outputs from Theorem 3. Thus, the amortized
communication cost of each beacon output is O(λn2).
Computation cost. During the commitment phase of an
epoch r, each node performs O(n) exponentiations to evaluate
PVSS.Share for their chosen secret, and to sign the PVSS
shares. In the aggregation phase, only Lr veriﬁes the PVSS
shares from all nodes. Since veriﬁcation of PVSS shares from
each node requires O(n) exponentiations, Lr performs O(n2)
exponentiations to verify all the PVSS shares. Computing the
aggregated commitment and aggregated encryption requires
O(n2) multiplications of group elements. Lastly, Lr hashes
O(n) group elements to compute the digest. Overall, during
the aggregation phase, Lr performs O(n2) exponentiations
while the remaining nodes do not perform any computation.
During the agreement phase, each node performs O(n) ex-
ponentiations to validate the commitments and the aggregated
polynomial. Furthermore, as a part of the SMR step, each
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
102511
In summary,
in every epoch,
node performs O(n) exponentiations to validate signatures of
messages sent by other nodes. Finally, in the reconstruction
phase, every node veriﬁes decrypted shares using O(n) pair-
ings. Hence, the computation cost per node in both agreement
and reconstruction phase is O(n) exponentiations and pairings.
the leader of the epoch
performs O(n2) exponentiations whereas every other node
performs O(n) exponentiations and O(n) pairings. But a node
becomes the leader only once every n epochs. Thus, during
periods of synchrony, the amortized computation cost of each
beacon output is O(n) exponentiations and pairings per node.
Public veriﬁcation. Recall from §VI-B, to validate a beacon
output, an external client needs to download a beacon certiﬁ-
cate consisting of O(n) signed BEACON messages. Hence, the
cost of public veriﬁcation is O(λn) bits of communication and
O(n) signature veriﬁcations.
Latency. During periods of synchrony, when an honest node
is chosen as the leader of an epoch, SPURT produces a beacon
output. Thus, in the fault-free case, SPURT would only require
seven message delays. However, there might be a sequence of
t malicious leaders in the worst case, and all of them may
decide to abort their epochs. In such cases, SPURT will take
O(t) message delays to produce the next output. Nevertheless,
in a sequence of n epochs, SPURT will produce at
least
2n/3 beacon outputs, so the amortized latency is at most 1.5
epochs. Furthermore, SPURT is responsive [60], i.e., it can
produce beacon outputs at the actual speed of the network, as
opposed to any pre-determined conservative parameters. This
is another advantage of a partially synchronous protocol over
a synchronous one, besides the main advantage of being more
robust to long network delays.
VII. IMPLEMENTATION & EVALUATION
We have implemented a prototype of SPURT using the go
programming language version 1.13.0. Our implementation
builds atop the open-source Quorum client version 2.4.0.
Quorum is a fork of Ethereum go client, which we modify
to implement the HotStuff SMR protocol. We disable the
artiﬁcial delay between consecutive proposals and modify the
underlying implementation such that the next leader proposes
as soon as the previous beacon output is ﬁnalized.
Throughout our
implementation, we have used the
bls12-381 elliptic curve as our pairing curve. In partic-
ular, we have used the implementation of bls12-381 by
gnark-crypto [1] for primitive elliptic curve operations.
When transmitting elliptic curve group elements we use
the standard point compression technique [49]. After point
compression, an element of G0 and G1 is 48 bytes and 96
bytes, respectively. For multi-exponentiations, we have used
the native implementation of [1] which implements the multi-
exponentiation algorithm from [11, §4].
A. Experimental Setup
We evaluate our implementation of SPURT with varying
nodes, i.e., 16, 32, 64, and 128. We run all nodes on Amazon
Web Services (AWS) t3a.medium virtual machine (VM) with
one node per VM. All VMs have two vCPUs and 4GB RAM.
The operating system for each VM is Ubuntu 20.04.
Network. To simulate an execution over the internet, we
pick eight different AWS regions, namely, Canada, Ireland, N.
California, N. Virginia, Oregon, Ohio, Singapore, and Tokyo.
For any choice of total number of nodes, we distribute the
nodes evenly across all eight regions. We create an overlay
network among nodes where all nodes are pair-wise connected,
i.e., they form a complete graph.
Baselines. We compare our implementation with two state of
the art publicly available implementations: Hydrand [3] and
Drand [2]. Note that Hydrand has imperfect unpredictability an
Drand requires a DKG setup. Nevertheless, we chose Hydrand
as it is most closely related to SPURT in terms of cryptographic
and setup assumptions and Drand as it has been deployed.
B. Evaluation Results
All our evaluation results are averaged over three runs for
each value of number of nodes.
Bandwidth usage. We report the bandwidth usage measured
as the number of bytes sent and received per node per beacon
output in Figure 5. Recall from §VI that at every epoch, each
node sends and receives a total of O(λn) bits of information to
and from other nodes. Hence, with an increase in the number
of nodes, we observe an approximately linear increase in the
bandwidth usage per node per beacon output. For example,
from 32 to 64 nodes, the average bandwidth usage per node
per beacon output increases from 34 to 65 Kilobytes. This
is about 55% of the bandwidth cost of Hydrand. For Drand,
we expected a bandwidth cost of 96n Bytes as each node
multi-casts one and receives n partial signatures that are 48
Bytes each. But in the Drand implementation, each node also
multi-casts the previous beacon output, which doubles the
bandwidth usage. Hence, for 32 and 64 nodes, Drand has a
communication cost of 6.2 and 12.3 Kilobytes, respectively.
Although SPURT has 5× higher bandwidth usage than Drand,
we believe this is a reasonable trade-off for removing DKG.
Throughput. We report the throughput of SPURT in Figure 6.
Our evaluation results illustrate that with 16, 32, 64, and 128