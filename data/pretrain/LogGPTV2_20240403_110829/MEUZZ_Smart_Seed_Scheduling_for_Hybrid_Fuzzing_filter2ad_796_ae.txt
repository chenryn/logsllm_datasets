[12] Oss-fuzz - continuous fuzzing for open source software.
https://github.com/google/oss-fuzz.
[13] Qsym:
A practical
concolic
execution
gine
tailored for hybrid fuzzing.
//github.com/sslab-gatech/qsym.
en-
https:
[14] Tcpdump test cases.
https://github.com/
the-tcpdump-group/tcpdump/tree/master/
tests.
[23] Cristian Cadar, Daniel Dunbar, and Dawson Engler. Klee:
Unassisted and automatic generation of high-coverage
tests for complex systems programs.
In Proceedings
of the 8th USENIX Conference on Operating Systems
Design and Implementation, pages 209–224. USENIX
Association, 2008.
[24] Peng Chen and Hao Chen. Angora: Efﬁcient fuzzing by
principled search. In 2018 IEEE Symposium on Security
and Privacy (SP), pages 711–725. IEEE, 2018.
[25] Y. Chen, P. Li, J. Xu, S. Guo, R. Zhou, Y. Zhang, T. Wei,
and L. Lu. Savior: Towards bug-driven hybrid testing.
In 2020 IEEE Symposium on Security and Privacy (SP),
pages 2–2, Los Alamitos, CA, USA, may 2020. IEEE
Computer Society.
[26] Y. Dang, R. Wu, H. Zhang, D. Zhang, and P. Nobel.
Rebucket: A method for clustering duplicate crash
reports based on call stack similarity.
In 2012 34th
International Conference on Software Engineering
(ICSE), pages 1084–1093, June 2012.
88    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
[27] Brendan Dolan-Gavitt, Patrick Hulin, Engin Kirda, Tim
Leek, Andrea Mambretti, Wil Robertson, Frederick
Ulrich, and Ryan Whelan. Lava: Large-scale automated
vulnerability addition.
In Proceedings of the 2016
IEEE Symposium on Security and Privacy (SP), pages
110–121. IEEE, 2016.
[28] Manuel Fernández-Delgado, Eva Cernadas, Senén Barro,
and Dinani Amorim. Do we need hundreds of classiﬁers
to solve real world classiﬁcation problems? J. Mach.
Learn. Res., 15(1):3133–3181, January 2014.
[29] Patrice Godefroid, Michael Y Levin, David A Molnar,
In NDSS,
et al. Automated whitebox fuzz testing.
volume 8, pages 151–166, 2008.
[30] Patrice Godefroid, Hila Peleg, and Rishabh Singh.
Learn&#38;fuzz: Machine learning for input fuzzing. In
Proceedings of the 32Nd IEEE/ACM International Con-
ference on Automated Software Engineering, ASE 2017,
pages 50–59, Piscataway, NJ, USA, 2017. IEEE Press.
[31] Alon Halevy, Peter Norvig, and Fernando Pereira. The
IEEE Intelligent
unreasonable effectiveness of data.
Systems, 24(2):8–12, March 2009.
[32] George Klees, Andrew Ruef, Benji Cooper, Shiyi
Wei, and Michael Hicks. Evaluating fuzz testing. In
Proceedings of the 2018 ACM SIGSAC Conference
on Computer and Communications Security, pages
2123–2138. ACM, 2018.
[33] lcamtuf.
american fuzzy lop.
http://lcamtuf.
coredump.cx/afl/, 2015.
[34] Caroline Lemieux and Koushik Sen. Fairfuzz: Targeting
rare branches to rapidly increase greybox fuzz testing
coverage. CoRR, abs/1709.07101, 2017.
[35] Zhen Li, Deqing Zou, Shouhuai Xu, Xinyu Ou, Hai
Jin, Sujuan Wang, Zhijun Deng, and Yuyi Zhong.
Vuldeepecker: A deep learning-based system for
vulnerability detection.
In Network and Distributed
System Security Symposium (NDSS), 2018.
[36] Mehryar Mohri, Afshin Rostamizadeh, and Ameet
Talwalkar. Foundations of Machine Learning. The MIT
Press, 2012.
[37] M. Nayrolles and A. Hamou-Lhadj. Clever: Combining
code metrics with clone detection for just-in-time fault
prevention and resolution in large industrial projects.
In 2018 IEEE/ACM 15th International Conference on
Mining Software Repositories (MSR), pages 153–164,
May 2018.
[38] S. J. Pan and Q. Yang. A survey on transfer learning.
IEEE Transactions on Knowledge and Data Engineering,
22(10):1345–1359, Oct 2010.
[39] Hui Peng, Yan Shoshitaishvili, and Mathias Payer.
T-fuzz: fuzzing by program transformation.
In 2018
IEEE Symposium on Security and Privacy (SP), pages
697–710. IEEE, 2018.
[40] Mohit Rajpal, William Blum, and Rishabh Singh. Not
all bytes are equal: Neural byte sieve for fuzzing. CoRR,
abs/1711.04596, 2017.
[41] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian
Cojocar, Cristiano Giuffrida, and Herbert Bos. Vuzzer:
Application-aware evolutionary fuzzing.
In Proceed-
ings of the Network and Distributed System Security
Symposium (NDSS), 2017.
[42] Gary J Saavedra, Kathryn N Rodhouse, Daniel M
Dunlavy, and Philip W Kegelmeyer. A review of
machine learning applications in fuzzing. arXiv preprint
arXiv:1906.11133, 2019.
[43] Adam Santoro, David Raposo, David G. T. Barrett, Ma-
teusz Malinowski, Razvan Pascanu, Peter W. Battaglia,
and Timothy P. Lillicrap. A simple neural network
module for relational reasoning. CoRR, abs/1706.01427,
2017.
[44] Edward J Schwartz, Thanassis Avgerinos, and David
Brumley. All you ever wanted to know about dynamic
taint analysis and forward symbolic execution (but might
have been afraid to ask). In 2010 IEEE symposium on
Security and privacy, pages 317–331. IEEE, 2010.
[45] Konstantin Serebryany, Derek Bruening, Alexander
Potapenko, and Dmitry Vyukov. Addresssanitizer: A
fast address sanity checker. In Proceedings of the 2012
USENIX Conference on Annual Technical Conference,
pages 28–28. USENIX Association, 2012.
[46] Shai Shalev-Shwartz and Shai Ben-David. Under-
standing machine learning: From theory to algorithms.
Cambridge university press, 2014.
[47] Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang,
Baishakhi Ray, and Suman Jana. Neuzz: Efﬁcient fuzzing
with neural program smoothing. In NEUZZ: Efﬁcient
Fuzzing with Neural Program Smoothing. IEEE, 2018.
[48] Evgeniy Stepanov and Konstantin Serebryany. Mem-
orysanitizer: fast detector of uninitialized memory use
in c++. In Proceedings of the 13th Annual IEEE/ACM
International Symposium on Code Generation and
Optimization, pages 46–55. IEEE, 2015.
[49] Nick Stephens, John Grosen, Christopher Salls, An-
drew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan
Shoshitaishvili, Christopher Kruegel, and Giovanni
Vigna. Driller: Augmenting fuzzing through selective
symbolic execution. In Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2016.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    89
[50] Yulei Sui and Jingling Xue. Svf: interprocedural static
value-ﬂow analysis in llvm. In Proceedings of the 25th
international conference on compiler construction,
pages 265–266. ACM, 2016.
[51] Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and
Scheduling black-box mutational
David Brumley.
fuzzing.
In Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security,
pages 511–522. ACM, 2013.
[52] G. Yan, J. Lu, Z. Shu, and Y. Kucuk. Exploitmeter:
Combining fuzzing with machine learning for automated
evaluation of software exploitability.
In 2017 IEEE
Symposium on Privacy-Aware Computing (PAC), pages
164–175, Aug 2017.
[53] Wei You, Xueqiang Wang, Shiqing Ma, Jianjun Huang,
Xiangyu Zhang, XiaoFeng Wang, and Bin Liang. Pro-
fuzzer: On-the-ﬂy input type probing for better zero-day
vulnerability discovery.
In ProFuzzer: On-the-ﬂy
Input Type Probing for Better Zero-Day Vulnerability
Discovery. IEEE.
[54] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and
Taesoo Kim. QSYM : A practical concolic execution
engine tailored for hybrid fuzzing. In Proceedings of
the 27th USENIX Conference on Security Symposium,
pages 745–761. USENIX Association, 2018.
[55] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan.
Send hardest problems my way: Probabilistic path
prioritization for hybrid fuzzing. In Proceedings of the
Network and Distributed System Security Symposium
(NDSS), 2019.
Appendix A Why use UBSAN
Note that although the design of MEUZZ is generically
compatible with mainstream sanitizers [15, 45, 48], our
implementation uses UBSan for the following reasons: (i)
UBSan instruments programs with pure static checks that can
be easily converted to solvable SMT constraints. In contrast,
other sanitizers, such as ASAN and MSAN, employ red-zones
and status bitmap, which are less amenable to constraint
solving. (ii) Our concolic engine is based on SAVIOR’s KLEE,
which uses UBSan as the primary sanitizer. Using UBSan
makes concolic execution more effective as shown in [25].
Appendix B Bugs found by MEUZZ
We provide a more detailed triage information of the bugs
found by MEUZZ. In total, MEUZZ found 30 undeﬁned
behaviors, among which 21 have been conﬁrmed/ﬁxed so far
by the developers and the rest are pending. For the reported
bugs, we found the potential UBs with UBSAN [15] and
manual analysis; we found the memory errors and DoS with
ASAN [45] and memory leaks with LeakSAN [7].
Table 4: The table shows the discovered bugs by MEUZZ. UB, ME,
DoS, and ML refers to Undeﬁned Behavior, Memory Error, Denial
of Service, and Memory Leak, respectively.
Program Potential UB ME DoS ML Conﬁrmed
tcpdump
objdump
readelf
tiff2pdf
tiff2ps
jasper
djpeg
Total
14
4
2
1
9
30
1
4
5
2
1
4
7
2
1
2
5
4
1
2
4
4
6
21
1
2
3
4
5
6
7
8
9
for (; cc < tf_bytesperrow; cc += samplesperpixel)
,→
{
adjust = 255 - cp[nc];
switch (nc) {
case 4: c = *cp++ + adjust; PUTHEX(c,fd);
case 3: c = *cp++ + adjust; PUTHEX(c,fd);
case 2: c = *cp++ + adjust; PUTHEX(c,fd);
case 1: c = *cp++ + adjust; PUTHEX(c,fd);
}
Figure 9: Off-by-one heap read overﬂow in tiff2ps.
One of the heap overﬂow vulnerabilities in tiff2ps is
discovered only by MEUZZ. Figure 9 shows the vulnerable
code snippet. This bug has been conﬁrmed and ﬁxed by the
developers. It is an out-of-bound read vulnerability that can
lead to information disclosure. The vulnerability takes place at
PSDataColorContig function where cp buffer with the size
of 4 bytes is allocated in heap and the 5th element of the buffer
is accessed by cp[4] which leads to out-of-bound read. To
trigger this bug, the loop needs to be executed without early
breaks. Moreover, to control the buffer size, the input needs to
satisfy many constraints in the TIFFScanlineSize function
so that it will return value 4. Based on the feature importance
of tiff2ps (Appendix D), Size, Cmp and External Call play
more important roles in its model, we believe this is why
MEUZZ is able to guide the fuzzer to explore and trigger this
bug. On the contrary, by replaying the fuzzing corpora, we
found that other fuzzers miss this bug because they either exit
the loop early or fail the checks in TIFFScanlineSize.
Appendix C Discussion on Extra Experiments
We attempted to compare MEUZZ with many state-of-the-art
fuzzing systems but cannot conduct an apple-to-apple
comparison with some of them due to various reasons.
Driller uses [3] as its concolic engine, which has limited
support for system calls, causing the engine’s failure to
generate new test cases. Similar issue was also reported by
Insu at el. [54]. Vuzzer and T-Fuzz do not have support for
concurrent fuzzing. After discussing with the developers we
assigned only one core to them and run them for 72 hours
90    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
(3×24) instead of 24 hours. We report the branch coverage
results of Vuzzer and T-Fuzz in Table 5.
Table 5: The table shows the number of branches covered by Vuzzer
and T-Fuzz. ✗ means fuzzer crashed on the program.
Appendix D Detailed Feature Importance
Study
Program Vuzzer
T-Fuzz
tcpdump
objdump
readelf
libxml2
tiff2pdf
tiff2ps
jasper
djpeg
1103
711
1025
715
✗
✗
✗
1317
11566
4216
842
✗
4892
3534
6084
763
Figure 10 demonstrates how the randomly initialized model
evolved with more and more training data available during
fuzzing. MEUZZ automatically identifed which features are
more important for each speciﬁc programs, showing it is more
scalable than manually-written heuristics.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    91
(a) Feature importance in tcpdump
(b) Feature importance in objdump
(c) Feature importance in libxml
(d) Feature importance in tiff2pdf
(e) Feature importance in tiff2ps
(f) Feature importance in jasper
(g) Feature importance in readelf
(h) Feature importance in djpeg
Figure 10: Feature importance extracted from models learned in the effectiveness test (§ 6.2). The initial importances are randomly generated.
Sz: Size, RdL: Reached Label, EC: External Call, IC: Indirect Call, NC: New Coverage, PL: Path Length, UN: Undiscovered Neighbors, RbL:
Reachable Labels, Cmp: Comparisons.
92    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
RbLUNPLNCICECRdLSzCmp0.000.050.100.150.200.250.300.35Initial ImportanceFinal ImportanceRbLUNPLNCICECRdLSzCmp0.000.050.100.150.200.250.300.350.40Initial ImportanceFinal ImportanceRbLUNPLNCICECRdLSzCmp0.000.050.100.150.200.25Initial ImportanceFinal ImportanceRbLUNPLNCICECRdLSzCmp0.0000.0250.0500.0750.1000.1250.1500.175Initial ImportanceFinal ImportanceRbLUNPLNCICECRdLSzCmp0.000.050.100.150.200.25Initial ImportanceFinal ImportanceRbLUNPLNCICECRdLSzCmp0.00.10.20.30.40.5Initial ImportanceFinal ImportanceRbLUNPLNCICECRdLSzCmp0.000.050.100.150.200.25Initial ImportanceFinal ImportanceRbLUNPLNCICECRdLSzCmp0.000.050.100.150.200.25Initial ImportanceFinal Importance