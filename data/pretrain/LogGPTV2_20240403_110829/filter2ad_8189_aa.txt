**本文翻译自：**
# Hack the Virtual Memory: malloc, the heap & the program break
## 堆
在本章中，我们将查看堆和 **malloc** ，以回答我们在上一章末尾遗留的一些问题：
  * 为什么我们分配的内存不在堆的最开始处（0x2050010 vs 02050000）？前16个字节被用来干什么？
  * 堆真的在向上增长吗？
## 前提
为了完全理解本文，你需要知道：
  * C语言的基础知识（特别是指针）
  * Linux文件系统和shell的基础知识
  * 我们将用到/proc/[pid]/maps文件（查阅 **man proc** 或阅读本系列的第一篇文章： [第0章：C字符串和/proc](https://xz.aliyun.com/t/2478 "第0章：C字符串和/proc")）
## 环境
所有脚本和程序都已经在以下系统上进行过测试：
  * Ubuntu
    * Linux ubuntu 4.4.0-31-generic＃50~14.04.1-Ubuntu SMP Wed Jul 13 01:07:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
使用的工具：
  * gcc
    * gcc（Ubuntu 4.8.4-2ubuntu1~14.04.3）4.8.4
  * glibc 2.19（如果你需要检查你的glibc版本，请参见[version.c](https://github.com/holbertonschool/Hack-The-Virtual-Memory/blob/master/03.%20malloc%2C%20the%20heap%20and%20the%20program%20break/version.c "version.c")）
  * strace的
    * strace —— version 4.8
**下文描述均基于此系统/环境，在其他系统上可能会不一样**  
我们还将查看Linux源代码。如果你使用的是Ubuntu，则可以通过以下命令下载当前内核的源代码：
    apt-get source linux-image-$(uname -r)
## **malloc**
**malloc** 是用于动态分配内存的常用函数。该内存分配在“堆”上。  
注意：malloc不是系统调用。
来自 **man malloc** ：
    [...] allocate dynamic memory[...]
    void *malloc(size_t size);
    [...]
    The malloc() function allocates size bytes and returns a pointer to the allocated memory.
### No malloc, no [heap]
让我们看一下并没有调用malloc函数的进程的内存区域（0-main.c）。
    #include 
    #include 
    /**
     * main - do nothing
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        getchar();
        return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm3$ gcc -Wall -Wextra -pedantic -Werror 0-main.c -o 0
    julien@holberton:~/holberton/w/hackthevm3$ ./0
*小提示（1/3）：/proc/[pid]/maps文件中会列出进程的内存区域。因此，我们首先需要知道进程的PID。可使用ps命令查看PID； **ps aux** 打印的第二列是进程的PID。请阅读第0章以了解更多信息。
    julien@holberton:/tmp$ ps aux | grep \ \./0$
    julien     3638  0.0  0.0   4200   648 pts/9    S+   12:01   0:00 ./0
*小提示（2/3）：从上面的输出中，可以看到我们要查看的进程的PID是3638.因此，maps文件可以在目录/proc/3638中找到。
    julien@holberton:/tmp$ cd /proc/3638
*小提示（3/3）：maps文件包含进程的内存区域。此文件中每行的格式为：  
地址 权限 偏移 dev inode 路径名 （dev：文件的主设备号和次设备号；inode：设备的节点号，0表示没有节点与内存相对应）
    julien@holberton:/proc/3638$ cat maps
    00400000-00401000 r-xp 00000000 08:01 174583                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/0
    00600000-00601000 r--p 00000000 08:01 174583                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/0
    00601000-00602000 rw-p 00001000 08:01 174583                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/0
    7f38f87d7000-7f38f8991000 r-xp 00000000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f38f8991000-7f38f8b91000 ---p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f38f8b91000-7f38f8b95000 r--p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f38f8b95000-7f38f8b97000 rw-p 001be000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f38f8b97000-7f38f8b9c000 rw-p 00000000 00:00 0 
    7f38f8b9c000-7f38f8bbf000 r-xp 00000000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f38f8da3000-7f38f8da6000 rw-p 00000000 00:00 0 
    7f38f8dbb000-7f38f8dbe000 rw-p 00000000 00:00 0 
    7f38f8dbe000-7f38f8dbf000 r--p 00022000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f38f8dbf000-7f38f8dc0000 rw-p 00023000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f38f8dc0000-7f38f8dc1000 rw-p 00000000 00:00 0 
    7ffdd85c5000-7ffdd85e6000 rw-p 00000000 00:00 0                          [stack]
    7ffdd85f2000-7ffdd85f4000 r--p 00000000 00:00 0                          [vvar]
    7ffdd85f4000-7ffdd85f6000 r-xp 00000000 00:00 0                          [vdso]
    ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
    julien@holberton:/proc/3638$
*注意： **hackthevm3** 是 **hack_the_virtual_memory/03. The Heap/** 的符号链接。
->正如我们从上面的maps文件中看到的那样，没有[heap]区域。
### **malloc(x)**
运行一个调用malloc函数的程序并重复上面的操作（1-main.c）：
    #include 
    #include 
    /**
     * main - 1 call to malloc
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        malloc(1);
        getchar();
        return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm3$ gcc -Wall -Wextra -pedantic -Werror 1-main.c -o 1
    julien@holberton:~/holberton/w/hackthevm3$ ./1
    julien@holberton:/proc/3638$ ps aux | grep \ \./1$
    julien     3718  0.0  0.0   4332   660 pts/9    S+   12:09   0:00 ./1
    julien@holberton:/proc/3638$ cd /proc/3718
    julien@holberton:/proc/3718$ cat maps 
    00400000-00401000 r-xp 00000000 08:01 176964                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/1
    00600000-00601000 r--p 00000000 08:01 176964                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/1
    00601000-00602000 rw-p 00001000 08:01 176964                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/1
    01195000-011b6000 rw-p 00000000 00:00 0                                  [heap]
    ...
    julien@holberton:/proc/3718$
-> 存在[heap]  
检查malloc的返回值，以确保返回的地址在堆区域中（2-main.c）：
    #include 
    #include 
    /**
     * main - prints the malloc returned address
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        void *p;
        p = malloc(1);
        printf("%p\n", p);
        getchar();
        return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm3$ gcc -Wall -Wextra -pedantic -Werror 2-main.c -o 2
    julien@holberton:~/holberton/w/hackthevm3$ ./2 
    0x24d6010
    julien@holberton:/proc/3718$ ps aux | grep \ \./2$
    julien     3834  0.0  0.0   4336   676 pts/9    S+   12:48   0:00 ./2
    julien@holberton:/proc/3718$ cd /proc/3834
    julien@holberton:/proc/3834$ cat maps
    00400000-00401000 r-xp 00000000 08:01 176966                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/2
    00600000-00601000 r--p 00000000 08:01 176966                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/2
    00601000-00602000 rw-p 00001000 08:01 176966                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/2
    024d6000-024f7000 rw-p 00000000 00:00 0                                  [heap]
    ...
    julien@holberton:/proc/3834$
-> 024d6000 
    #include 
    #include 
    /**
     * main - let's find out which syscall malloc is using
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        void *p;
        write(1, "BEFORE MALLOC\n", 14);
        p = malloc(1);
        write(1, "AFTER MALLOC\n", 13);
        printf("%p\n", p);
        getchar();
        return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm3$ gcc -Wall -Wextra -pedantic -Werror 3-main.c -o 3
    julien@holberton:~/holberton/w/hackthevm3$ strace ./3 
    execve("./3", ["./3"], [/* 61 vars */]) = 0
    ...
    write(1, "BEFORE MALLOC\n", 14BEFORE MALLOC
    )         = 14
    brk(0)                                  = 0xe70000
    brk(0xe91000)                           = 0xe91000
    write(1, "AFTER MALLOC\n", 13AFTER MALLOC
    )          = 13
    ...
    read(0,
在上面的列表中我们关注这个：
    brk(0)                                  = 0xe70000
    brk(0xe91000)                           = 0xe91000
-> malloc使用brk系统调用来操纵堆。从brk手册上（man brk），我们可以看到这个系统调用做了什么：
    ...
           int brk(void *addr);
           void *sbrk(intptr_t increment);
    ...
    DESCRIPTION
           brk() and sbrk() change the location of the program  break,  which  defines the end of the process's data segment (i.e., the program break is the first location after the end of the uninitialized data segment).  Increasing  the program  break has the effect of allocating memory to the process; decreasing the break deallocates memory.
           brk() sets the end of the data segment to the value specified by addr, when that  value  is  reasonable,  the system has enough memory, and the process does not exceed its maximum data size (see setrlimit(2)).
           sbrk() increments the program's data space  by  increment  bytes.   Calling sbrk()  with  an increment of 0 can be used to find the current location of the program break.
程序间断点是程序的数据段结束后的第一个位置的虚拟内存地址。  
通过brk或sbrk，增加程序间断点的值，malloc函数预留新的内存空间之后动态分配给进程使用（使用malloc）。  
所以堆实际上是程序数据段的扩展。
第一次调用brk（brk（0））会将程序间断点的当前地址返回给malloc。第二次调用brk才真正通过增加程序间断点的值来创建新内存（因为0xe91000>
0xe70000）。在上面的示例中，堆开始于0xe70000并结束于0xe91000。让我们仔细查看一下/proc/[PID]/maps文件：
    julien@holberton:/proc/3855$ ps aux | grep \ \./3$
    julien     4011  0.0  0.0   4748   708 pts/9    S+   13:04   0:00 strace ./3
    julien     4014  0.0  0.0   4336   644 pts/9    S+   13:04   0:00 ./3
    julien@holberton:/proc/3855$ cd /proc/4014
    julien@holberton:/proc/4014$ cat maps 
    00400000-00401000 r-xp 00000000 08:01 176967                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/3
    00600000-00601000 r--p 00000000 08:01 176967                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/3
    00601000-00602000 rw-p 00001000 08:01 176967                             /home/julien/holberton/w/hack_the_virtual_memory/03. The Heap/3
    00e70000-00e91000 rw-p 00000000 00:00 0                                  [heap]
    ...
    julien@holberton:/proc/4014$
-> **00e70000-00e91000 rw -p 00000000 00:00 0 [heap]** 符合brk返回给malloc的指针值。
为什么当我们只要求1个字节时，malloc将堆增大了 **0x00e91000 - 0x00e70000 = 0x21000（135168）** 个字节？
## 多次调用malloc
当我们多次调用malloc时，会发生什么？（4-main.c）
    #include 
    #include 
    #include 
    /**
     * main - many calls to malloc
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        void *p;
        write(1, "BEFORE MALLOC #0\n", 17);
        p = malloc(1024);
        write(1, "AFTER MALLOC #0\n", 16);
        printf("%p\n", p);
        write(1, "BEFORE MALLOC #1\n", 17);
        p = malloc(1024);
        write(1, "AFTER MALLOC #1\n", 16);
        printf("%p\n", p);
        write(1, "BEFORE MALLOC #2\n", 17);
        p = malloc(1024);
        write(1, "AFTER MALLOC #2\n", 16);