# Provenance-based Integrity Protection for Windows

## Authors
Wai-Kit Sze and R. Sekar  
Stony Brook University  
Stony Brook, NY, USA  
{wsze, sekar}@cs.stonybrook.edu

## Abstract
Current malware defenses are predominantly reactive, effective only against known threats. However, the emergence of sophisticated, highly targeted exploits and malware poses a significant challenge to these traditional defenses. To combat such advanced threats, new proactive defenses are required that can secure systems against unknown malware. This paper introduces Spif, a novel approach for Windows that tracks the origin of code and data, ensuring that any process influenced by untrusted sources is prevented from modifying critical system resources or interacting with benign processes. Spif is designed for compatibility with all recent versions of Windows (from XP to 10) and supports a wide range of unmodified applications, including popular browsers, office software, and media players. It imposes minimal performance overhead while effectively mitigating various malware attacks, including Stuxnet and Sandworm. An open-source implementation of Spif is available.

## 1. Introduction
The scale and sophistication of malware continue to grow exponentially, rendering traditional reactive approaches, such as malware scanners and security patches, increasingly ineffective against today's stealthy and targeted attacks. Recognizing this, researchers and software vendors have been developing proactive techniques to protect against previously unseen exploits and malware. These techniques can be categorized into three main types: sandboxing, privilege separation, and information flow control.

### 1.1 Challenges
Applying these three approaches to malware defense presents several technical and practical challenges:

- **Policy Development:** Policies must balance usability and functionality. Restrictive policies can block more attacks but may also break applications. Developing effective policies requires a deep understanding of both the applications and the operating system (OS) semantics.
- **Application and OS Compatibility:** Applications often need to be re-architected or modified to work within a confined environment. Most information flow control (IFC) approaches require substantial changes to applications and the OS, which can be labor-intensive.
- **Sandbox Escape Attacks:** Attackers can exploit the narrow focus of confinement techniques by depositing malicious files in areas not covered by the sandbox, leading to unconfined execution of malicious code.

### 1.2 Approach Overview and Key Features
We present Spif (Secure Provenance-based Integrity Fortification), a new approach for achieving OS-wide integrity protection on Microsoft Windows. Spif addresses the challenges of existing defenses by:

- **Automated Policy Development:** No manual effort is required for policy development.
- **No Application or OS Modifications:** Spif supports all major versions of Windows since XP and works with unmodified, feature-rich applications such as MS Office, Internet Explorer, Chrome, Firefox, Skype, Photoshop, and VLC.
- **Comprehensive Confinement:** All applications are confined, eliminating the motivation for sandbox escape attacks.

Spif uses information flow tracking to track the provenance of code and data, classifying origins into benign and untrusted categories. This allows Spif to defend against unknown malware attacks, including stealthy threats like Stuxnet and Sandworm.

#### 1.2.1 Reliable Provenance Tracking System
Existing provenance tracking systems either require developing new OSes or instrumenting existing ones, which can be error-prone and challenging, especially for closed-source OSes like Windows. Spif leverages multi-user protection and discretionary access control (DAC) to track provenance. Files from untrusted sources are owned by a "low-integrity" user, and their usage is restricted to prevent them from compromising system integrity.

#### 1.2.2 Robust Policy Enforcement
Spif relies on simple policies and time-tested security mechanisms for enforcing confinement. By using the multi-user protection mechanism, which has been part of Windows since its inception, Spif avoids the pitfalls of building new containment mechanisms. This ensures that benign processes are also protected from reading untrusted data, preventing potential exploitation.

#### 1.2.3 Application and OS Transparency
Spif treats applications as black boxes, requiring no modifications. This allows it to support a wide range of unmodified applications, ensuring compatibility and ease of use.

#### 1.2.4 Usable Policy
Spif is designed to preserve the normal desktop user experience. While some restrictions are necessary to prevent malware, Spif comes pre-configured with policies that minimize impact on user experience.

#### 1.2.5 Implementation on Windows
Spif has been implemented on Windows, supporting versions XP, 7, 8.1, and 10. Implementing such a system on a closed-source OS is challenging, and we share our experiences and lessons learned in this paper.

## 2. Threat Model
Spif assumes that users and their invoked applications are benign. Files from unknown or untrusted sources are labeled as low-integrity, while trusted sources are labeled as high-integrity. Administrators or privileged processes can upgrade or downgrade these labels as needed. Spif focuses on defending against attacks that compromise system integrity, such as unauthorized modifications or subversion of other applications or the OS. We assume that benign programs use system libraries to invoke system APIs, and Spif intercepts these calls to prevent high-integrity processes from consuming low-integrity objects.

## 3. Provenance-Based Sandboxing
Spif uses DAC for secure provenance tracking and sandboxes all processes based on their provenance. High-integrity subjects can choose to run in a low-integrity sandbox to process low-integrity files. The following sections detail the specific mechanisms and policy choices used in Spif.

### 3.1 Secure Provenance Tracking
Spif repurposes multi-user support to track the provenance of processes and objects. For each real user, Spif creates a low-integrity user to represent untrusted entities, ensuring that untrusted files and processes are isolated from the rest of the system.

### 3.2 Low-Integrity Sandbox
Processes and files from untrusted sources are confined to a low-integrity sandbox, preventing them from modifying critical system resources or interacting with benign processes.

### 3.3 High-Integrity Sandbox
High-integrity processes are also sandboxed, but with a different set of restrictions. This ensures that even if a high-integrity process is compromised, it cannot perform unauthorized actions.

### 3.4 Dual-Mode Execution
A high-integrity subject can choose to run in a low-integrity sandbox to process untrusted files, allowing for flexible and secure handling of data from different sources.

### 3.5 Policy Choices for User Experience
Spif is pre-configured with policies that balance security and usability, ensuring that the user experience is minimally impacted while maintaining robust protection against malware.

By addressing the key challenges of existing defenses and leveraging proven security mechanisms, Spif provides a comprehensive and effective solution for protecting Windows systems against advanced malware threats.