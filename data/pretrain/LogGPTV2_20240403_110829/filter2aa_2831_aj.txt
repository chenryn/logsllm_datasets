99
Additonal Information and Updates: http://www.iftech.com/dcom
face with an "import" statement. IPersistFIle is defined in
"OBJIDL.IDL". The statement looks like this: 
import "oaidl.idl"; 
If you implement IPersistFile in your COM object, you'll
need to include it in a COM class and implement all its methods.
Remember that MIDL just provides definitions. This isn't "real"
object inheritance, where you inherit all the behaviors of an
interface. You're just inheriting the definitions. 
Let's take a look at some of the more common interface
attributes. 
Attribute
Usage
Dual
Supports both dispatch (IDispatch) and custom (IUn-
known) interface. Custom interfaces are sometimes called 
VTABLE interfaces.
Oleautomation 
The interface is compatible with OLE Automation. The 
parameters and return types in the interface must be auto-
mation types. 
Uuid 
Associates a unique identifier (IID) with the interface. This 
id distinguishes the interface from all other interfaces. 
Version
Associates a version with the interface. It looks useful but 
this attribute is not implemented for COM interfaces. It is 
valid for RPC interfaces.
Pointer_default()
Specifies the default pointer attributes applied to pointers 
in the interface. Pointer attributes can be ref, unique, and 
ptr. 
Table 7.1
Interface Attributes
100    Chapter 7 •
An Introduction to MIDL 
Interfaces are just containers for a group of methods. An
interface can have any number of methods. Here's a very simple
MIDL method definition: 
HRESULT Beep([in] long lDuration); 
MIDL generates a header that defines this method in the
C++ code. Here's what the C++ equivalent of this statement
looks like: 
virtual HRESULT _stdcall Beep(/*[in]*/ long lDura-
tion); 
As you can see, attributes have no equivalent in C++. The
attributes are retained in C++ headers as comments. While it may
not be used in the C++ headers, the attributes are very important
for other aspects of the code generation. In this case MIDL used
the "[in]" attribute to produce marshaling code which transfers a
variable of type "long" to the server. 
The return code of a COM method is almost always an
HRESULT. The two well-known exceptions to this rule are the
methods of IUnknown - AddRef() and Release(). The return val-
ues for AddRef and Release are used only for debugging refer-
ence counting problems. See chapter 4, chapter 16 and the error
appendix for more information on HRESULTs. 
There are only a few method attributes you are likely to see.
These attributes are all associated with Dispatch interfaces. The
most common is the “ID” attribute, used to specify the dispatch
ID.
The Component Class in IDL
A COM class definition is called a coclass, for "component class".
A coclass is a top-level object in a COM object hierarchy. Here's
a typical coclass definition: 
[
uuid(543FB20E-6281-11D1-BD74-204C4F4F5020)
The IDL Language
101
Additonal Information and Updates: http://www.iftech.com/dcom
]
coclass BasicTypes
{
[default] interface IBasicTypes;
interface IMoreStuff;
};
Syntactically, there's not much to a coclass definition. Each
coclass has a GUID and a list of interfaces. The attribute [default]
looks important, but it is intended for use by macro languages
such as WordBasic. Strangely enough, a coclass can have two
default interfaces - one for an outgoing interface (source),
another for the incoming (sink) interface. See chapter 13 on call-
backs for more information about sources and sinks. For the
most part, we can ignore the default attribute. 
When we write source code, the coclass usually maps
directly into a C++ object. There's no rule that says a coclass cor-
responds to a C++ class. Actually, you can write COM definitions
in "C" without any class definitions at all. However, since we're
using ATL, there will be a one-to-one correspondence between
the two. The C++ object will be the coclass name with a preced-
ing "C". In this case it's "CBasicTypes". Here's the code generated
by the ATL wizard: 
class ATL_NO_VTABLE CBasicTypes : 
public CComObjectRootEx,
public CComCoClass "$(OutDir)\regsvr32.trg"  
echo Server registration done!
Outputs: 
\$(OutDir)\regsvr32.trg
For a DLL based in-process server, the registration is han-
dled exclusively by REGSVR32. The build command would be as
follows: 
regsvr32 /s /c "$(TargetPath)"
The TRG file is a dummy file that’s necessary for the proper
execution of the NMAKE and REGSVR32 command. This dummy
file is created when the custom build step executes, and gets the
104    Chapter 7 •
An Introduction to MIDL 
current timestamp. One of the rules of makefiles is that there is
an output file for each action. The build process can then use the
timestamp of this file to determine if it needs to execute the cus-
tom build command. If you look in the TRG file you’ll find there
isn’t anything useful there. 
THE POST BUILD STEP
The custom build step is somewhat obsolete for registering a
server. The ATL wizard still generates a custom build step, so it is
the default for most projects. A better way to do this would be to
add a command to the Settings/Post Build Step tab. You can
remove the three commands and the dummy target (TRG) file
from the custom build. Add the following to the post-build set-
tings tab instead. 
$(TargetPath) /RegServer  
echo "Registration Complete"
You can also automatically include the proxy/stub DLL build
in this step. The following commands will build the proxy/stub,
and register it using the REGSVR32 command. Once again, the
post build step doesnít require a target. We’re using the ‘$(Wksp-
Name)’ variable, and appending ‘PS’ to the end. You may also
want to add an ‘echo’ statement to inform the user whatís hap-
pening. 
nmake $(wkspName)PS.mk
regsvr32 -s $(WkspName)PS.dll
Actually, you only need to build the proxy/stub DLL when
the MIDL code changes. This is true because the Proxy/Stub is
only concerned with marshaling data between the client and
server, and doesn’t deal with the implementation of either. This
post-build processing will cause some unnecessary processing,
although NMAKE is pretty good about rebuilding only what it
needs. 
Summary
105
Additonal Information and Updates: http://www.iftech.com/dcom
THE PLG FILE
The PLG file is a build log. It contains the output of your build
command, and can be useful when trying to diagnose build
problems. The PLG file will show you the commands executed,
with all their copious switches and results. 
Summary
Thus far we've looked at the origins and capabilities of the MIDL
compiler. This tool offers a very powerful way to define COM
classes, interfaces, and methods. MIDL also generates a great
deal of the code required to quickly build servers. MIDL is also a
code generator. It automatically produces headers, proxy/stub
DLL, and type libraries. 
In the next chapter, we'll look in detail at some of the syntax
of IDL. We'll also give examples of using the most common IDL
data types.
106    Chapter 7 •
An Introduction to MIDL 
E
I
G
H
T
8
Defining and 
Using Interfaces 
There are lots of decisions to make when you're setting up COM
interfaces. Not only do you have to set up the usual function
parameters, but you also have to decide how COM will transfer
the data. 
Transferring data is what COM is all about. When you're
working with standard C++ programs and DLL's, you take data
transfer for granted. The only real decision for a C++ program-
mer is whether to pass parameters by value or to use pointers.
When you're working with remote servers, the efficiency of data
transfer can be of critical importance to an application. You've
got to make a lot of decisions about data types, transfer methods,
and interface design. MIDL gives you the tools to work with
these issues. 
MIDL gives you a number of data types. These include the
basic data types, OLE Automation types, structures, arrays and
enums. Most of these map easily to the C++ types your applica-
tion uses. The unfamiliar part of this process is the definition of
parameter attributes. The are two basic attributes, [in] and [out],
which define how COM will marshal the data. 
108    Chapter 8 •
Defining and Using Interfaces 
Base Types
MIDL's base types, such as long and byte, should be immediately
familiar to a C++ programmer. Base types are the fundamental
data types for IDL; most other types are based on them. 
Most integer and char types can have a signed or unsigned
attribute. The signed keyword indicates that the most significant
bit of an integer variable holds the sign rather than data. If this
bit is set, the number represents a negative number. The signed
and unsigned attribute can apply to char, wchar_t, long,
short, and small. 
Type
Bits
Description
boolean
8 
Can have a value of TRUE or FALSE. These states 
are represented by 1 and 0 respectively. Note that 
the C++ type BOOL is 32 bits. MIDL handles it as 
an unsigned char.
byte
8 
May have unsigned values of 0-255. Bytes are con-
sidered "opaque" which means MIDL doesn't 
make any assumptions about content.
char
8 
An unsigned 8 bit character. Range 0-255.
int
32 or 16 
An integer value. The size depends on the plat-
form. On a 32 bit platform such as windows 95, 
int's are 32 bit long words. On 16 bit platforms 
they are 16 bit words.
long
32 
A long word. Can be signed or unsigned. The 
default is signed.
short
16 
A signed or unsigned number. 
hyper
64 
A special 64 bit integer.
float
32 
A low precision floating point number. A float in 
C++. A 32 bit IEEE floating-point number.
double
64 
Equivalent to C++ double. A 64 bit IEEE floating-
point number.
wchar_t
16
Wide characters (Unicode). This type maps to an 
unsigned short.
Table 8.1
MIDL’s base types
Attributes
109
Additonal Information and Updates: http://www.iftech.com/dcom
Attributes
A basic IDL method definition looks something like this: 
HRESULT InCount( [in] long lCount ); 
All COM methods must be qualified with "in" or "out", or
both. These are called "Directional" attributes, and they tell MIDL
how it should marshal the data. 
The "[in]" attribute directs MIDL to generate code which will
make a copy of the parameter and send it to the server. This is
similar to "call by value" in C++, except the data is not copied to
the stack. Instead, the marshaling code will pass the parameter
to the proxy/stub DLL, which will package it to be copied to a
server. If the server modifies the data, COM will not make any
attempt to copy it back to the client. 
Out parameters are also "one-way" data. Here is an IDL
method with an '[out]" parameter: 
HRESULT OutCount( [out] long *plCount ); 
Out parameters always have to be pointers. In this case, the
server will fill in the pointer with the value of the count. This
function isn't as simple as it seems - there are several important
ambiguities here. Where is the pointer allocated? Can it be NULL? 
Attribute
Usage
in
The parameter is only passed to the server. It is not returned. 
All parameters default to [in] if no directional attribute is 
specified.
out
The parameter is only returned from the client. It must be a 
pointer type.
in,out
The parameter is passed to and returned from the server. It 
must be a pointer.
Table 8.2
COM Directional Attributes
110    Chapter 8 •
Defining and Using Interfaces 
When working locally in C++, pointers are a very efficient
way to pass data. By using pointers, C++ avoids passing large
amounts of data. If you're using an in-proc server, this is still true
- because an in-proc server is a DLL. If you're working with a
local or remote server, the picture is entirely different. 
For remote objects, the use of pointers doesn't save very
much. Both in and out parameters must be marshaled across the
network. Passing pointers has just as high a cost in overhead.
The client and server don't share the same address space, so all
the data referenced by the pointer is copied. 
To allow more efficiency in transferring data, COM gives
you several pointer attributes. There are three different types of
COM pointer: ref, unique, and ptr.
Attribute
Usage
ref
• The parameter is a reference pointer. 
• A reference pointer can always be dereferenced. 
• The pointer (address) will never be changed during the
call. 
• The pointer must always point to a valid location, and
can never be NULL. 
• You cannot make a copy of this pointer (no aliasing). 
• The most efficient type of pointer.
unique
• The parameter is a unique pointer. 
• It can be NULL or changed to NULL. 
• The server can allocate or change the pointer (address). 
• Pointed-to object cannot change size. 
• You cannot make a copy of this pointer (no aliasing).
ptr
• The parameter is a full pointer. 
• It can be NULL or changed to NULL. 
• The server can allocate or change the pointer (address). 
• Aliasing is allowed. 
• Similar to a C++ pointer. 
• The least efficient type of pointer.
retval
• The parameter receives the return value of the method. 
• The parameter must have the [out] attribute and be a
pointer. 
• Used in oleautomation interfaces.
Table 8.3
COM Pointer Values
Attributes
111
Additonal Information and Updates: http://www.iftech.com/dcom
In the previous examples we didn't specify which type of
pointer to use. The default pointer type for in parameters is "ref".
This means the pointer references memory allocated on the cli-
ent. This is the most restrictive type of pointer. The ref pointer is
allocated on the client, and its address is passed to the server.
Here's the full-blown version of the LongTest() method: 
STDMETHODIMP LongTest(long lIn, long * plOut)
{
if (plOut == NULL) return E_POINTER;
*plOut = lIn + 10;
return S_OK;
}
This method does not allocate any memory, which is consis-
tent with a ref pointer. In this case the server method will add 10
to the in parameter and assign it to the out parameter. 
Since we're conscientious programmers, we added in some