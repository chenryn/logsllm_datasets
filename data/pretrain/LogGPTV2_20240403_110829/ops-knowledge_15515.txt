User: Write me a sm2 encryption and decryption tool class, using java language
Assistant: The following is an example of a Java tool class that uses BouncyCastle to implement SM2 encryption and decryption: ```java import org.bouncycastle.crypto.AsymmetricCipherKeyPair; import org.bouncycastle.crypto.CipherParameters; import org.bouncycastle.crypto.engines.SM2Engine; import org .bouncycastle.crypto.generators.ECKeyPairGenerator; import org.bouncycastle.crypto.params.ECDomainParameters; import org.bouncycastle.crypto.params.ECKeyGenerationParameters; import org.bouncycastle.crypto.params.ECPrivateKeyParameters; import org.bouncycastle.crypto.params .ECPublicKeyParameters; import org.bouncycastle.crypto.params.ParametersWithRandom; import org.bouncycastle.crypto.util.PrivateKeyFactory; import org.bouncycastle.crypto.util.PublicKeyFactory; import org.bouncycastle.jce.provider .BouncyCastleProvider; import org. bouncycastle.util.encoders.Hex; import java.security.Security; public class SM2Util { static { Security.addProvider(new BouncyCastleProvider()); } private static final ECDomainParameters DOMAIN_PARAMS = new ECDomainParameters( SM2P256V 1Curve.getInstance(), SM2P256V1Curve.getInstance ().getG(), SM2P256V1Curve.getInstance().getN()); /** * Generate SM2 public-private key pair* * @return SM2 public-private key pair*/ public static SM2KeyPair generateKeyPair() { ECKeyPairGenerator keyPairGenerator = new ECKeyPairGenerator( ); ECKeyGenerationParameters keyGenerationParams = new ECKeyGenerationParameters(DOMAIN_PARAMS, null); keyPairGenerator.init(keyGenerationParams); AsymmetricCipherKeyPair keyPair = keyPairGenerator.generateKeyPair(); ECPrivateKeyParameters privateKey = (ECPrivateKeyParameters ters) keyPair.getPrivate(); ECPublicKeyParameters publicKey = (ECPublicKeyParameters) keyPair.getPublic (); return new SM2KeyPair(privateKey.getD(), publicKey.getQ().getEncoded(false)); } /** * SM2 encryption* * @param publicKey SM2 public key* @param data data to be encrypted* @return Encrypted data*/ public static byte[] encrypt(byte[] publicKey, byte[] data) throws Exception { ECPublicKeyParameters publicKeyParameters = (ECPublicKeyParameters) PublicKeyFactory.createKey(publicKey); SM2Engine engine = new SM2Engine(); engine.in it (true, new ParametersWithRandom(publicKeyParameters)); return engine.processBlock(data, 0, data.length); } /** * SM2 decryption* * @param privateKey SM2 private key* @param data data to be decrypted* @return decryption */ public static byte[] decrypt(byte[] privateKey, byte[] data) throws Exception { ECPrivateKeyParameters privateKeyParameters = (ECPrivateKeyParameters) PrivateKeyFactory.createKey(privateKey); SM2Engine engine = new SM2Engine(); engine .init( false, privateKeyParameters); return engine.processBlock(data, 0, data.length); } public static void main(String[] args) throws Exception { // Generate SM2 public-private key pair SM2KeyPair keyPair = generateKeyPair(); System.out .println("SM2 private key: " + Hex.toHexString(keyPair.getPrivateKey())); System.out.println("SM2 public key: " + Hex.toHexString(keyPair.getPublicKey())); // pending Encrypted data byte[] data = "Hello, SM2!".getBytes(); // SM2 encrypted byte[] encryptedData = encrypted(keyPair.getPublicKey(), data); System.out.println("Encrypted data: " + Hex.toHexString(encryptedData)); // SM2 decryption byte[] decryptedData = decrypt(keyPair.getPrivateKey(), encryptedData); System.out.println("Decrypted data: " + new String(decryptedData)) ; } } /** * SM2 public-private key pair*/ class SM2KeyPair { private final byte[] privateKey; private final byte[] publicKey; public SM2KeyPair(byte[] privateKey, byte[] publicKey) { this.privateKey = privateKey; this.publicKey = publicKey; } public byte[] getPrivateKey() { return privateKey; } public byte[] getPublicKey() { return publicKey; } } ``` In the above example, we use the SM2Engine provided by BouncyCastle to implement SM2 Encryption and decryption, while using the SM2P256V1Curve curve parameters. Before using SM2 encryption and decryption, we need to generate SM2 public-private key pair first, then use the public key to encrypt, and use the private key to decrypt.