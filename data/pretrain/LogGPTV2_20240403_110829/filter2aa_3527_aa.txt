HP Security Research 
Zero Day Initiative 
Java Every-Days 
Exploiting Software Running 
on 3 Billion Devices 
Brian Gorenc 
Manager, Vulnerability Research 
Jasiel Spelman 
Security Researcher
HP’s Zero Day Initiative  
would like to thank the following researchers  
for their submissions over the last three years: 
Alin Rad Pop 
Chris Ries 
PI:EMAIL 
James Forshaw 
Anonymous 
Joshua J. Drake 
Anonymous 
Michael Schierl 
Anonymous 
Peter Vreugdenhil 
axtaxt 
Sami Koivu 
Ben Murphy 
Vitaliy Toropov 
VUPEN Security 
Also, we would like to thank the following people 
 for providing additional information in support of this paper. 
Mario Vuksan of Reversing Labs 
Adam Gowdiak of Security Explorations 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Introduction 
HP’s Zero Day Initiative (ZDI), the world’s largest vendor agnostic bug bounty program, experienced a surge in 
submissions for Oracle’s Java platform in late 2012 and early 2013. It became a fairly regular occurrence for several 
new 0-day Java vulnerabilities to show up in the queue over a seven-day span. One of the more interesting trends 
revealed that ZDI researchers were not going after a single vulnerability class. At the time, the industry focused on 
sandbox bypasses and cases were arriving into the ZDI that took advantage of that weakness, but submissions 
identifying memory corruption vulnerabilities were still just as common. This prompted the following questions: 
• What is truly the most common vulnerability type in Java? 
• What part of the architecture has had the most vulnerabilities reported against it? 
• What part of the architecture produces the most severe vulnerabilities? 
• How the vulnerabilities being used in the threat landscape map to the ZDI submissions? 
• How is Oracle responding to this increased pressure? 
These questions continued to be discussed internally when exploit kit authors began including several new Java 
vulnerabilities during the first months of 2013. The targeted attacks against large software vendors and multiple 0-
day vulnerabilities demonstrated at Pwn2Own were the final straw. We narrowed the focus for this paper to modern 
day vulnerabilities and limited the scope to the issues patched between 2011-2013. In total, we performed a root 
cause analysis on over 120 unique java vulnerabilities including the entire ZDI dataset; major penetration testing 
tools; and exploit kits on the market today. Also included were six 0-day vulnerabilities that have not yet been 
patched by Oracle but are part of the ZDI dataset. We reviewed and derived metrics about the threat landscape from 
a dataset that included 52,000 unique Java malware samples. 
The ultimate goal of this analysis was to expose the actual attack surface that Oracle’s Java brings to the table by 
taking an in-depth look at the most common vulnerability types, and examining the specific parts of the attack 
surface being taken advantage of by attackers. 
Oracle Java’s Footprint and Software Architecture 
Oracle, quite famously, highlights the install base of Java via a splash screen during the installation of the product. 
For the software development community, a 3 billion device install base is a huge milestone. Alternatively for the 
security community, this is a big red bull’s eye.  
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Pair this with the statistics released from WebSense1 that 93% of the Java install base is not running the latest 
patch a month after its release, or sometimes even a year later, these numbers become downright scary. With such 
a broad install base and users running outdated software, the potential return on investment for attackers 
weaponizing Java vulnerabilities is astronomical. Based on the numbers from Contagio2, exploit kit authors are 
required to include an average of 2+ Java exploits just to stay competitive with the other kits available on the 
market. 
From the development perspective, the Java framework is quite powerful. It includes a large set of built in 
capabilities to aid in the more complicated development tasks. As you can see in the conceptual diagram3 below, the 
framework is made up of over fifty sub-components that bring different functionality to the table for developers. 
This includes capabilities to render a user interface, process complex fonts and graphics, and consume the most 
common web service protocols. Each sub-component provides a unique set of application programming interfaces 
(APIs) that a developer can use to quickly extend their application.  
Figure 1 - Java 7 Conceptual Diagram 
1 http://community.websense.com/blogs/securitylabs/archive/2013/06/04/majority-of-users-still-vulnerable-to-
java-exploits.aspx 
2 http://contagiodump.blogspot.ca/2010/06/overview-of-exploit-packs-update.html 
3 http://docs.oracle.com/javase/7/docs/ 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Applications can be written once and run on a multitude of platforms. Due to these factors, it is no surprise that Java 
has a wide spread adoption in the development community. Java is quite popular in the financial marketplace and 
recently made major inroads in the mobile device space. For all of these reasons, the security community has 
started to focus their efforts on analyzing and auditing this popular application. 
Vulnerability Trending and Attack Surface 
Since early 2011, Oracle has patched over 250 remotely exploitable vulnerabilities in Java. These issues range from 
the classic stack-based buffer overflow to the more complicated sandbox bypass vulnerabilities that require the 
attacker to chain a series of weaknesses to disable the SecurityManager. Every year the number of vulnerabilities 
being fixed has increased with just over 50 issues patched in all of 2011 to over 130 in the first half of 2013. 
Researchers continue to discover new ways to find holes in the various sub-components of Java and bypass the 
security architecture.  
Vulnerability Statistics 2011-2013 
Oracle Java Patch Statistics  
Oracle maintains a consistent patch schedule with major security updates released approximately once every 3-4 
months. Along with the software update, they release a good amount of metadata for the vulnerabilities being fixed. 
This includes the CVE tracking identifier, a CVSS score, whether it is remotely exploitable, and the location of the 
vulnerability in the Java architecture. In the example below, CVE-2013-23834 seems to be a particularly nasty 
vulnerability in Java’s 2D sub-component.   
Figure 2 - Oracle Risk Metric 
This information is useful to application developers when trying to quickly determine whether a particular 
vulnerability affects a component that their application relies on. It is also extremely useful to security researchers 
that are looking for the components in the architecture that contain a high number of security-related issues. 
Researchers can focus their attention on these areas, as they know their work will likely uncover similar issues.  
4 http://www.oracle.com/technetwork/topics/security/javacpuapr2013-1928497.html 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Oracle’s patch information over the last three years provides insights into the vulnerabilities being discovered. We 
observed that only twice in the last three years had a sub-component amassed a double-digit CVE count in a single 
patch. This anomaly occurred in the Deployment and JavaFX sub-components which had a CVE count of 10 and 12 
respectively. Interestingly enough, both of these large fixes occurred in the February 20135 patch release. Oracle 
has also corrected security vulnerabilities in the 2D and Deployment sub-components in each of the patch releases 
since the beginning of 2011 (not including the security alert releases). 
Looking at the last three years of patch information, the following sub-components account for half of the remotely 
exploitable vulnerabilities in Java: 
Rank 
Sub-component 
Average CVSS 
1 
Deployment 
7.39 
2 
2D 
9.43 
3 
Libraries 
7.24 
4 
JavaFX 
8.83 
5 
AWT 
7.73 
Figure 3 - Most Vulnerable Sub-components 
Ranking these sub-components by the number of unique CVEs, we discover that the Deployment sub-component is 
the most patched part of the architecture with almost 50 issues. That being said, the 2D sub-component contains 
the most severe vulnerabilities on average. It could be argued that the 2D sub-component is the worst component 
in the architecture due to the combination of its ranking and average vulnerability severity. 
The average CVSS score for a remotely exploitable Java vulnerability is 7.67, which classifies them as High in 
severity. Almost 50% of the issues fixed by the patches are CVSS 9.0 or higher with over 60 of those occurring in the 
first half of 2013. If we look at what is being targeted year over year, we see that the security research community 
was focusing on the following sub-components: 
Year 
Most Targeted Sub-components 
2011 
1. Deployment 
2. Sound 
3. 2D 
2012 
1. Deployment 
2. 2D and Libraries 
3. Beans and JMX 
5 http://www.oracle.com/technetwork/topics/security/javacpufeb2013-1841061.html 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
2013 
1. Deployment 
2. 2D 
3. Libraries 
Figure 4 - Most Targeted Java Sub-components 
Zero Day Initiative (ZDI) Submission Trends  
Many of the researchers working with ZDI take advantage of these statistics and watch for vulnerabilities being 
patched in specific sub-components. Our researchers typically focus on auditing one or two sub-components and 
become proficient, yielding new discoveries using a combination of techniques – some mine the patches to 
understand the weakness pattern and then hunt the attack surface for that pattern. Some simply look for near-by 
neighbors where Oracle engineers failed to find the same type of issue in the sub-components. Others look for 
deficiencies in the patch and re-submit those.  
ZDI’s submission rate for Java vulnerabilities maintained a consistent rate of approximately 5 new vulnerabilities a 
quarter for the last three years. It is not surprising that the submission rate increased dramatically over the last 
three quarters with a high of 33 new vulnerabilities in one quarter alone. There are good explanations for this 
increased activity: 
• 
High profile 0-day vulnerabilities drove researchers to look for related issues.  
• 
Security Exploration’s research6 highlighting sandbox bypasses due to unsafe reflection 
Increased submission rates resulted in the largest patches released by Oracle for Java, with over 50 vulnerabilities 
fixed in the February 2013 patch cycle.  
Figure 5 - ZDI Submission Rate 
6 http://www.security-explorations.com/en/SE-2012-01.html 
0	
5	
10	
15	
20	
25	
30	
35	
Q1	
2011	
Q2	
2011	
Q3	
2011	
Q4	
2011	
Q1	
2012	
Q2	
2012	
Q3	
2013	
Q4	
2012	
Q1	
2013	
Q2	
2013	
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Analyzing the submission trends we observed that the sub-components our researchers were targeting mapped to 
some of the buggiest parts of the Java architecture. Specifically, our researchers focused on the following sub-
components most frequently: 
1. 2D 
2. Libraries 
3. JavaFX 
4. Sound 
5. Deployment 
Of particular note, they focus on the sub-components that produce the highest CVSS scores including 2D and 
JavaFX. Over the last three years, the average CVSS score for a ZDI submission was 9.28 and the researchers 
working through the program had accounted for 36% of Java’s vulnerabilities with CVSS score of 9.0 or higher. 
Vulnerability Classes  
Insights into Vulnerability Classes (CWE) 
By intersecting publically available vulnerability data with cases submitted to ZDI, we can shed light on what the 
most popular vulnerability classes are in the Java architecture. Luckily for researchers, the architecture is 
susceptible to every common software weakness from the classic buffer overflow to command injection. 
Figure 6 - Common Weaknesses 
Looking specifically at the CWE-265 class of vulnerabilities researchers discovered several unique ways to gain 
remote code execution outside of the sandbox. To allow for further detailed analysis, we applied a set of sub-
categories (CWE-470 Unsafe Reflection, CWE-272 Least Privilege Violation, and CWE-843 Type Confusion) to these 
vulnerabilities. CWE-470 sub-category was assigned to vulnerabilities that passed attacker-supplied data to the 
reflection APIs in order to gain access and execute functionality that was normally restricted. This sub-category is by 
far the most common of the sandbox-related issues. CWE-272 sub-category was assigned to vulnerabilities that 
CWE-265: 
Privilege / Sandbox 
Issues	
CWE-470: 
Unsafe 
Reﬂection	
CWE-272: 
Least Privilege 
Violation	
CWE-843: Type 
Confusion	
CWE-120: Buﬀer 
Overﬂow	
CWE-122: 
Heap-based 
Buﬀer Overﬂow	
CWE-121: 
Stack-based 
Buﬀer Overﬂow	
CWE-119: Improper 
Restrictions on 
Buﬀer Operations	
CWE-787: Out-
of-bounds 
Write	
CWE-125: Out-
of-bounds 
Read	
CWE-822: 
Untrusted Pointer 
Dereference	
CWE-190: Integer 
Overﬂow	
Other Less  
Common CWEs	
CWE-114: 
Process Control	
CWE-78: OS 
Command 
Injection	
CWE-416: Use-
After-Free	
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
abused Java’s doPrivileged blocks in order to execute code at higher privilege than what was intended by the 
application. Finally, the CWE-843 sub-category was assigned to the vulnerabilities that confuse Java’s type system 
or bypass built-in security checks using various techniques including the deserialization of attacker-supplied data. 
Different flavors of CWE-122 Heap-based Buffer Overflows and CWE-787 Out-of-bounds Writes were also detected 
which allowed for the creation of further sub-categories. In the case of CWE-122, the root cause of the access 
violation could be traced to two unique categories: 
• 
An integer overflow (CWE-190) causing the allocation of a smaller than intended buffer 
• 
Incorrect arithmetic operation resulting in writing past a statically sized buffer 
Similar issues exist for CWE-787. Researchers were also able to leverage either a CWE-190 Integer Overflow or an 
incorrect arithmetic operation to gain remote code execution via an out-of-bounds write. One of the notable trends 
was the use of integer overflow, which accounted for over one-quarter of the vulnerabilities identified as CWE-122 
and CWE-787. 
Figure 7 - Vulnerabilities Existing From Integer Overflow 
CWE-265 Breakdown and Historical Timeline 
The most prevalent issue in the framework is the ability to bypass the sandbox and execute arbitrary code on the 
host machine. About half of the vulnerabilities in the sample set had this designation. Not only was it popular with 
the ZDI researchers, but attackers also seemed to pick up on this weakness with nine CVEs related to the various 
styles of sandbox bypasses under active exploitation across the last three years. In early 2012, Security 
Explorations highlighted the sandbox bypass issue with the release of their research paper focused on this 
weakness. 
CWE-190	
Integer Overﬂow	
Static Buﬀer 
Overrun	
CWE-787 
CWE-122 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Figure 8 - Timeline of ZDI Submission vs. Actively Exploited CVEs for CWE-265 
ZDI researchers discovered these vulnerability types as early as April 2011 or simply stated - Oracle has known 
about these weaknesses for some time. As previously discussed, the unsafe reflection style of sandbox bypass is 
the most common technique being utilized with about 60% of the CWE-265 market share. CWE-470 Unsafe 
Reflection is also becoming the vector of choice for exploit kit authors with three of the most recent active targeted 
CVEs falling into this category (CVE-2012-5076, CVE-2013-0422, and CVE-2013-0431).  
Figure 9 - CWE-265 Sub-category Breakdown 
There is a good reason for the focus on these vulnerability types in exploit kits and targeted attacks. They do not 
require the attacker to exploit memory corruption style vulnerabilities or bypass modern operating system 
mitigation techniques like Data Execution Prevention (DEP) and Address Space Layout Randomization (ASLR). They 
do not need to write the exploit to a specific patch level of the operating system. This, arguably, takes away some of 
the challenges in place with other vulnerability classes and provides the attacker a “write once, own everywhere” 
!"#$%&'%$&(&)*
!"#$%&''$+(,,*
!"#$%&'%$')%+*
!"#$%&'%$,-.'*
!"#$%&'%$(&)-*
!"#$%&'+$&,%%*
!"#$%&'+$&,+'*
%&''*
%&'%*
%&'+*
,*
.*
CWE-470	
Unsafe Reﬂection	
CWE-272	
Least Privilege Violation	
CWE-843	
Type Confusion	
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
exploit. In the end, focusing on discovering and productizing these types of issues nets the attacker a high return-
on-investment. 
Extrapolating Sub-component Weaknesses 
Vulnerability Class to Sub-component Mapping 
An individual needs to understand which packages make up the most vulnerable sub-components to fully grasp 
Java’s attack surface. A sub-component’s packages and classes can also be extremely useful when trying to 
analyze a security update from Oracle as a researcher can greatly reduce the scope of the code that needs to be 
audited to find the patched vulnerability.  
Oracle’s Java SE documentation provides some clarity on the mapping of packages to sub-components. For 
example, the documentation states that the 2D sub-component7 is made up of the following packages along with 
several classes from java.awt:  
• 