# HP Security Research: Zero Day Initiative

## Java Every-Days: Exploiting Software Running on 3 Billion Devices

### Authors
- **Brian Gorenc**  
  Manager, Vulnerability Research
- **Jasiel Spelman**  
  Security Researcher

### Acknowledgments
HP’s Zero Day Initiative (ZDI) would like to thank the following researchers for their submissions over the last three years:
- Alin Rad Pop
- Chris Ries
- James Forshaw
- Joshua J. Drake
- Michael Schierl
- Peter Vreugdenhil
- Sami Koivu
- Ben Murphy
- Vitaliy Toropov
- VUPEN Security
- Anonymous (multiple)

We also extend our gratitude to the following individuals for providing additional information in support of this paper:
- Mario Vuksan, Reversing Labs
- Adam Gowdiak, Security Explorations

---

## Introduction

HP’s Zero Day Initiative (ZDI), the world’s largest vendor-agnostic bug bounty program, experienced a surge in submissions for Oracle’s Java platform in late 2012 and early 2013. It became a regular occurrence for several new zero-day Java vulnerabilities to appear in the queue over a seven-day span. Interestingly, ZDI researchers were not targeting a single vulnerability class. While the industry focused on sandbox bypasses, memory corruption vulnerabilities were equally common. This prompted several questions:
- What is the most common vulnerability type in Java?
- Which part of the architecture has the most reported vulnerabilities?
- Which part of the architecture produces the most severe vulnerabilities?
- How do the vulnerabilities used in the threat landscape map to ZDI submissions?
- How is Oracle responding to this increased pressure?

These questions gained more urgency when exploit kit authors began including several new Java vulnerabilities in early 2013. Targeted attacks against large software vendors and multiple zero-day vulnerabilities demonstrated at Pwn2Own further highlighted the issue. We narrowed the focus of this paper to modern-day vulnerabilities, specifically those patched between 2011 and 2013. We performed a root cause analysis on over 120 unique Java vulnerabilities, including the entire ZDI dataset, major penetration testing tools, and current exploit kits. Additionally, we included six unpatched zero-day vulnerabilities from the ZDI dataset. Our analysis also covered 52,000 unique Java malware samples.

The primary goal of this analysis was to expose the actual attack surface that Oracle’s Java brings to the table by examining the most common vulnerability types and the specific parts of the attack surface being exploited by attackers.

---

## Oracle Java’s Footprint and Software Architecture

Oracle proudly highlights the install base of Java via a splash screen during the installation process. A 3 billion device install base is a significant milestone for the software development community. However, for the security community, it represents a significant target.

According to WebSense, 93% of the Java install base is not running the latest patch a month after its release, and sometimes even a year later. With such a broad install base and users running outdated software, the potential return on investment for attackers weaponizing Java vulnerabilities is substantial. Based on data from Contagio, exploit kit authors are required to include an average of 2+ Java exploits to remain competitive in the market.

From a development perspective, the Java framework is powerful, offering a wide range of built-in capabilities to assist with complex development tasks. The framework consists of over fifty sub-components, each providing unique application programming interfaces (APIs) for developers. These sub-components enable functionalities such as rendering user interfaces, processing complex fonts and graphics, and consuming common web service protocols. Applications can be written once and run on multiple platforms, making Java popular in the financial marketplace and mobile device space. Consequently, the security community has started to focus on analyzing and auditing this widely adopted application.

---

## Vulnerability Trending and Attack Surface

Since early 2011, Oracle has patched over 250 remotely exploitable vulnerabilities in Java. These issues range from classic stack-based buffer overflows to more complex sandbox bypass vulnerabilities. The number of vulnerabilities being fixed has increased annually, from around 50 in 2011 to over 130 in the first half of 2013. Researchers continue to discover new ways to find holes in the various sub-components of Java and bypass the security architecture.

### Vulnerability Statistics 2011-2013

Oracle maintains a consistent patch schedule, releasing major security updates approximately every 3-4 months. Each update includes metadata for the vulnerabilities being fixed, such as the CVE tracking identifier, CVSS score, whether it is remotely exploitable, and the location of the vulnerability in the Java architecture. For example, CVE-2013-2383 is a particularly severe vulnerability in Java’s 2D sub-component.

This information is valuable for application developers and security researchers. Developers can quickly determine if a particular vulnerability affects a component their application relies on, while researchers can focus on components with a high number of security-related issues.

Over the last three years, only twice has a sub-component had a double-digit CVE count in a single patch. This occurred in the Deployment and JavaFX sub-components, which had 10 and 12 CVEs, respectively, in the February 2013 patch release. Oracle has also corrected security vulnerabilities in the 2D and Deployment sub-components in each patch release since the beginning of 2011.

Looking at the last three years of patch information, the following sub-components account for half of the remotely exploitable vulnerabilities in Java:

| Rank | Sub-component | Average CVSS |
|------|---------------|--------------|
| 1    | Deployment    | 7.39         |
| 2    | 2D            | 9.43         |
| 3    | Libraries     | 7.24         |
| 4    | JavaFX        | 8.83         |
| 5    | AWT           | 7.73         |

The Deployment sub-component is the most frequently patched part of the architecture, with almost 50 issues. However, the 2D sub-component contains the most severe vulnerabilities on average. The average CVSS score for a remotely exploitable Java vulnerability is 7.67, classified as High severity. Almost 50% of the issues fixed by the patches have a CVSS score of 9.0 or higher, with over 60 of these occurring in the first half of 2013.

### Zero Day Initiative (ZDI) Submission Trends

Many ZDI researchers take advantage of these statistics and watch for vulnerabilities being patched in specific sub-components. They typically focus on auditing one or two sub-components, becoming proficient and discovering new vulnerabilities using a combination of techniques. Some mine the patches to understand the weakness pattern and then hunt the attack surface for that pattern. Others look for deficiencies in the patch and re-submit them.

ZDI’s submission rate for Java vulnerabilities maintained a consistent rate of approximately 5 new vulnerabilities per quarter for the last three years. The submission rate increased dramatically over the last three quarters, with a high of 33 new vulnerabilities in one quarter alone. This increased activity can be attributed to:
- High-profile zero-day vulnerabilities driving researchers to look for related issues.
- Security Explorations' research highlighting sandbox bypasses due to unsafe reflection.

Increased submission rates resulted in the largest patches released by Oracle for Java, with over 50 vulnerabilities fixed in the February 2013 patch cycle.

Analyzing the submission trends, we observed that the sub-components targeted by our researchers mapped to some of the buggiest parts of the Java architecture. Specifically, our researchers focused on the following sub-components most frequently:
1. 2D
2. Libraries
3. JavaFX
4. Sound
5. Deployment

Of particular note, they focused on sub-components that produce the highest CVSS scores, including 2D and JavaFX. Over the last three years, the average CVSS score for a ZDI submission was 9.28, and the researchers working through the program accounted for 36% of Java’s vulnerabilities with a CVSS score of 9.0 or higher.

---

## Vulnerability Classes

### Insights into Vulnerability Classes (CWE)

By intersecting publicly available vulnerability data with cases submitted to ZDI, we can shed light on the most popular vulnerability classes in the Java architecture. The architecture is susceptible to every common software weakness, from classic buffer overflows to command injection.

Looking specifically at the CWE-265 class of vulnerabilities, researchers discovered several unique ways to gain remote code execution outside of the sandbox. To allow for further detailed analysis, we applied a set of sub-categories (CWE-470 Unsafe Reflection, CWE-272 Least Privilege Violation, and CWE-843 Type Confusion) to these vulnerabilities.

- **CWE-470 Unsafe Reflection**: Assigned to vulnerabilities that pass attacker-supplied data to the reflection APIs to gain access and execute restricted functionality. This is the most common sandbox-related issue.
- **CWE-272 Least Privilege Violation**: Assigned to vulnerabilities that abuse Java’s doPrivileged blocks to execute code at higher privilege than intended.
- **CWE-843 Type Confusion**: Assigned to vulnerabilities that confuse Java’s type system or bypass built-in security checks using various techniques, including deserialization of attacker-supplied data.

Different flavors of CWE-122 Heap-based Buffer Overflows and CWE-787 Out-of-bounds Writes were also detected, allowing for the creation of further sub-categories. In the case of CWE-122, the root cause of the access violation could be traced to two unique categories:
- An integer overflow (CWE-190) causing the allocation of a smaller than intended buffer.
- Incorrect arithmetic operation resulting in writing past a statically sized buffer.

Similar issues exist for CWE-787. Researchers were able to leverage either a CWE-190 Integer Overflow or an incorrect arithmetic operation to gain remote code execution via an out-of-bounds write. One notable trend was the use of integer overflow, which accounted for over one-quarter of the vulnerabilities identified as CWE-122 and CWE-787.

### CWE-265 Breakdown and Historical Timeline

The most prevalent issue in the framework is the ability to bypass the sandbox and execute arbitrary code on the host machine. About half of the vulnerabilities in the sample set had this designation. Not only was it popular with ZDI researchers, but attackers also picked up on this weakness, with nine CVEs related to various styles of sandbox bypasses under active exploitation over the last three years.

In early 2012, Security Explorations highlighted the sandbox bypass issue with the release of their research paper focused on this weakness. ZDI researchers discovered these vulnerability types as early as April 2011, indicating that Oracle has known about these weaknesses for some time.

There is a good reason for the focus on these vulnerability types in exploit kits and targeted attacks. They do not require the attacker to exploit memory corruption style vulnerabilities or bypass modern operating system mitigation techniques like Data Execution Prevention (DEP) and Address Space Layout Randomization (ASLR). This provides the attacker a “write once, own everywhere” exploit, yielding a high return on investment.

### Extrapolating Sub-component Weaknesses

To fully grasp Java’s attack surface, one needs to understand which packages make up the most vulnerable sub-components. A sub-component’s packages and classes can be extremely useful when trying to analyze a security update from Oracle, as a researcher can greatly reduce the scope of the code that needs to be audited to find the patched vulnerability.

Oracle’s Java SE documentation provides some clarity on the mapping of packages to sub-components. For example, the 2D sub-component is made up of the following packages along with several classes from `java.awt`:
- `java.awt.image`
- `java.awt.geom`
- `javax.imageio`

Understanding these mappings helps in identifying and addressing vulnerabilities more effectively.