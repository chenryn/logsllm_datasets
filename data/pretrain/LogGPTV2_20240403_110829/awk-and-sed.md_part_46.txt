#
#
Generating a For matted Index 313 
 # end of NR ==
printf (".XC\n")
printf (
else
printf (". so %s/indexmacs\n", MACDIR)
if (MACDIR)
NR == 1 && FMT == 1 {
lower = "abcdefghi jklmnopqrstuvwxyz"
#--
+
 convert octal colon to "literal" colon 
（!SECONDARY)
determine which fields to output
$3
2)
Se
QQ群：
11 1I
 I"\" I"Indexl"\n")
":",
L:"
”：”
 apply to all lines
 $1)
50192241
357
第十二章 
综合应用
---
## Page 340
printf ("%s\", pageChg (PAGE))
if (! SECONDARY && ！ TERTIARY)
# added to omit comma after bold entry
if (FMT == 1) 
# for multi-volume page lists.
printf ("%s", PRIMARY)
printf ("%s, %s", PRIMARY, SECONDARY)
if (SECONDARY)
printf (".XF 1 \"%s\"\"", PRIMARY)
printf (". XF 1 \"%s\" \"%s", PRIMARY, SECONDARY)
# now output primary and secondary entry
printf("\n\t\t%s\n", substr (upper, char, 1))
printf(".XF A \"%s\"\n", substr (upper, char, 1))
# if new char, then start group for new letter of alphabet 
if (PAGE）{
else
if (SECONDARY)
char = prevChar
if (char == 0) { 
# char is an index to lower or upper letter
char = index(lower, firstChar)
# see if it is in lower string.
#
else
if (char == 0) 
#
else { # if primary entry exists 
else
if (FMT == 1)
orevChar = char
else
printf (" %s", SECONDARY)
else
printf (".XF 2 \"%s", SECONDARY)
if (FMT == 1)
 extract first char of primary entry
QQ群：
，firstChar)
50192241
358
第十二章 
综合应用
---
## Page 341
标识字母表中的字母。
prevChar 相同时，
char 变量包含字母在字符中的位置。如果这个数字大于或等于1，那么我们也
如果主关键字被定义，那么我们提取它的第一个字符并观察它是否是在字符串
义，则检测关键字是否被定义。如果是，
下一步我们将字段赋给变量，
且字段的当前顺序将被打乱。
数来处理每个字段而不是处理整个行，因为后者将会引起当前行再次求值，而
lower 中。
二个参数来设置。
名
BEGIN 过程定义字段分隔符和字符串upper 与lower。下一个过程输出了文件
，这个文件中包含troff 索引宏的定义。宏目录的名字可以作为命令行的第
firstChar = substr ($1, 1, 1)
]# End of pageChg function 
gsub (/\*/，
gsub(/ [1-9]+\*/,
function pageChg (pagelist)
#
#
printf ("\n")
printf("\"")
else if (FMT == 1)
printf (", %s", pageChg(PAGE))
else 
printf (", %s\"", pageChg(PAGE))
return pagelist 
if (FMT == 1) 
共
else
Supporting function 
 # End of main routine
Arg: pagelist -- list of numbers
QQ群：
"："，
，字母表中的当前字母保持不变。如果不同，
，pagelist)
"\\fB&\P", pagelist)
50192241
，然后测试字段是否为空。如果主关键字没有
359.
 我们比较每个签上并且当 char 与 
，则将它输出。否则输出第三关键字。
第十二章
我们应用 gsub()函
我们首先检查
综合应用
定
---
## Page 342
由format.idx产生的，输出到troff 的样本如下所示：
由format.idx产生的，输出到屏幕上的样本如下所示：
函数用冒号代替在卷一页引用中的“~，
然
后我们观察输出的主要关键字和次关键字条目。最后，
Generic 0bject, 18, 24 
generic functions, 21
example of programming interface, 44 
data types; table of, 20
as object-oriented system, 
about，3，7,
Xv_Font type,
Xlib.h header file, 89, 294
Xlib, 6 
XFontStruct structure, 
xlib, 6 
toolkits,
server and client relationship,
role of window manager,
overview,
extensibility, 9 
X Window System,
￥
XF A "X"
frames and subframes, 26 
compiling programs, 41 
repainting canvas, 88 
software hierarchy, 6
orotocol,
interclient communications, 
.Protocol，6 
X
￥
￥
2 "protocol,
2 "overview, 3"
1
T
"extensibility, 9" 
7
3
QQ群：
10
 310
6"
 events, 84
50192241
317
9
360 -
17
6
”后，输出页码的列表。
第十二章
在调用函数 pageChg ()
综合应用
---
## Page 343
号，因为由 masterindex调用的程序模块的剩余部分读取了用冒号分隔的3个
本节的目的是提取几个有趣的程序段，并显示它们是如何解决特殊问题的。
本节介绍 masterindex 程序的几个有趣的细节，这些或许不能引起你的注意。
masterindex程序的其他细节
表示用文件volume1和volume2创建了一个主索引，并且输出送往屏幕。
令行的相应选项来调用它们。例如，用户输入：
masterindex的 shelI脚本用于将所有这些脚本组合在一起，并基于用户的命
masterindex 的 shelI脚本
指定两个连续的冒号。然而，我们不能简单地将这个序列转换为一个字面冒
序传递一个字面上的冒号。要实现这一功能，
因为这个程序将冒号作为一个特殊字符，
准化。这个程序认为它的输入记录是由两个用制表符分隔的字段组成：索引条
如何隐藏特殊字符
利用 masterindex程序来处理的。
目和它的页码。冒号被作为这个语法的一部分来标识一个索引条目的各部分。
第一段程序取自input.idx 程序，
这些输出必须用troff 格式化，来产生索引的打印版本。这本书的索引最初是
masterindex的 shell脚本和文档一起出现在附录三中。
$ masterindex -s m volume1 volume2
￥
￥
2"about, 3, 7，10"
2 "toolkits, 
2 "server and client relationship, 5"
 2 "role of window manager,
2
2
"XView" "18"
"Xlib" "6"
7
T
"XFontStruct structure" "317"
"Xv_Font type"
"repainting canvas, 88"
"Xl ib, 6"
QQ群：
7"
50192241
"310"
361
它的工作就是在对索引条目排序前将它们标
，所以我们必须提供一个方法来通过程
9″
，我们允许编索引的人员在输入中
87"
第十二章
综合应用
---
## Page 344
下面是互换条目的代码：
产生两个条目：
上面我们曾讨论过用冒号分隔主关键字和次关键字的语法。对一些类型的条
互换两部分
条
“sed command",
产
目
段进行替换，避免了将行又分解成字段。
的一个，
再次将行分解成字段。因而，
要
八进制值转换回冒号。下面来自format.idx的代码：
八进制对照表来找到这个值），
“\72”是冒号的八进制值（你可以浏览/uer/pub/ascii文件中的十六进制和
第二部分可以互换来自动创建第二个条目（注5）。因而，编写下面的索引
使用了一种编码规则，利用字符（～）来标记这种条目的两部分，使得第·
命令，例如“sed command”
，利用次关键字进行分类是有意义的。例如，我们可能有一组程序语句或用
为字段。如果你在脚本中的任何位置修改$O 的内容，awk 将重新对$O 求值并
-对$O 操作。原因是输入字段是用冒号分隔的。当 awk 浏览一行时，
注意的第一方面是我们为这3个字段分别做了替换，
. XX "sed~command"
command: sed 43
 sed command 43
gsub(/\\72/,
gsub (/\\72/,
gsub(/\\72/,
#< from format.idx
gsub(/::/, 
# substitute octal value for "::"
# from input. idx
 convert octal colon to "literal" colon 
#
：在SO 中添加了一个冒号，那么 awk 将辨认出4个字段。通过将每个字
"\172"，
QQ群：
，另一个是“command:sed”
":"
":",
$3)
$2)
$1)
$1）
50192241
如果有3个字段要做转换，
。在最后的程序模块中，我们使用 gsub ()函数将
。编索引的人员可能会创建两条目：一个是
362
。为了对这种条目编码更容易，
第十二章
而不是利用一个替换命
，并且替换改变了其中
，它将行分
综合应用
1
我
---
## Page 345
模块执行完后将没有意义，因此我们可以简单地输出一个字面上的代字符。
和冒号不同，
注5：
 # Match entries that contain two tildes 
#< from input. idx 
面上的代字符。在对一个条目的两部分进行互换后
因为代字符被作为特殊字符，
printf 语句。
代字符的后面。输出原始的条目，然后将互换后的条目也输出，两个都用
为两个“子字段”。
后者表示一个字面上的代字符。这个过程利用函数 split()将第一个字段分割
这
里的模式匹配规则与任何包含一个代字符而不是两个连续字符的条目匹配，
gsub(/~~/,
# replace
printf("%s:%s:%s\n", subfield[2], subfield[1], $2)
printf("%s %s::%s\n", subfield[1], subfield[2],
if (n == 2) {
n = split($1,
$1 ~ /~ / && $1 !~ /~~/ {
# from input. idx 
next
#
～~
里的代字符表示互换发生的地方。
互换。这里不是用默认的操作来互换，我们利用不同的编码习惯，
空格的地方，
这个转换索引条目的观点来自于《The AWK Programming
在整个 masterindex程序中冒号具有特殊意义，而代字符在这个
QQ群：
with
。这将为我们提供两个子串，
 subfield,
，条目可以自动互换；用代字符来防止“加入”空格来
50192241
，我们在输入中利用两个连续的代字符表示一个字
363
一个在代字符的前面，一个在
是下面的代码。
第十二章
$2)
综合应用
在有
这
做
---
## Page 346
通
这个函数使得用标准方式报错误更简单。它将 message 作为参数看待，message 
来产生错误报告，如下面所示：
另一方面是如果程序 input.idx不能接受条目，
致）。通过将这些变化减少为一种基本形式，可以更容易地编写其他程序。
报告错误的函数
程
的上下文来间接地完成替换。
我们完成了第一个替换，那么我们将做第二个。第二个替换用“；”
意，如果远的成功这个函数返回1，
号来做替换。这个替换发生在一个计算函数 sub ()返回值的条件表达式中。注
第一个替换匹配两个冒号中间的全部内容。它用所匹配的内容（&）后跟一个分