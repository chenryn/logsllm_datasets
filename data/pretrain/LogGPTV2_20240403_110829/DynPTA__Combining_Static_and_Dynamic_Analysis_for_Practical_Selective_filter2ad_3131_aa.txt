title:DynPTA: Combining Static and Dynamic Analysis for Practical Selective
Data Protection
author:Tapti Palit and
Jarin Firose Moon and
Fabian Monrose and
Michalis Polychronakis
2021 IEEE Symposium on Security and Privacy (SP)
DynPTA: Combining Static and Dynamic Analysis
for Practical Selective Data Protection
Tapti Palit
Stony Brook University
PI:EMAIL
Jarin Firose Moon
Stony Brook University
PI:EMAIL
Fabian Monrose
UNC Chapel Hill
PI:EMAIL
Michalis Polychronakis
Stony Brook University
PI:EMAIL
2
8
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract—As control ﬂow hijacking attacks become more
challenging due to the deployment of various exploit mitigation
technologies, the leakage of sensitive process data through the
exploitation of memory disclosure vulnerabilities is becoming an
increasingly important threat. To make matters worse, recently
introduced transient execution attacks provide a new avenue
for leaking conﬁdential process data. As a response, various
approaches for selectively protecting subsets of critical in-memory
data have been proposed, which though either require a signiﬁ-
cant code refactoring effort, or do not scale for large applications.
In this paper we present DynPTA, a selective data protection
approach that combines static analysis with scoped dynamic data
ﬂow tracking (DFT) to keep a subset of manually annotated
sensitive data always encrypted in memory. DynPTA ameliorates
the inherent overapproximation of pointer analysis—a signiﬁcant
challenge that has prevented previous approaches from support-
ing large applications—by relying on lightweight label lookups to
determine if potentially sensitive data is actually sensitive. Labeled
objects are tracked only within the subset of value ﬂows that may
carry potentially sensitive data, requiring only a fraction of the
program’s code to be instrumented for DFT. We experimentally
evaluated DynPTA with real-world applications and demonstrate
that it can prevent memory disclosure (Heartbleed) and transient
execution (Spectre) attacks from leaking the protected data, while
incurring a modest runtime overhead of up to 19.2% when
protecting the private TLS key of Nginx with OpenSSL.
I. INTRODUCTION
As defenses against control ﬂow hijacking attacks become
more widely deployed, attackers have started turning their
attention into data-only attacks [1] for the exploitation of
memory corruption or disclosure vulnerabilities. Under certain
conditions, the corruption of non-control data can lead to
arbitrary code execution, e.g., by re-enabling the execution
of untrusted plugins [2, 3, 4]. As technologies such as Flash
and ActiveX are being phased out, mere data leakage is still
possible and can pose a signiﬁcant threat, e.g., the exﬁltration
of secret server keys [5] or private user information [6]. As if
the abundance of memory disclosure bugs was not enough, the
threat of data leakage attacks has recently been exacerbated by
a ﬂurry of transient execution attacks [7], which can leak secrets
through residual microarchitectural side effects. Examples of
the severe outcomes of these attacks include accessing security-
critical ﬁles, such as /etc/shadow [8, 9], and leaking
memory from Chrome’s renderer process [10].
Various defenses can be used against data leakage attacks,
involving different performance, usability, and completeness
tradeoffs. Holistic approaches against memory corruption
bugs, such as memory safety [11, 12, 13, 14, 15], and data
ﬂow integrity [16], can mitigate data leakage attacks by
eradicating their main exploitation primitive, i.e., arbitrary
memory read access. In practice, however, their deployment has
been limited due to their prohibitively high runtime overhead
and incompatibility with C/C++ intricacies that are widely
used in real-world applications [17]. At the same time, they
inherently cannot protect against transient execution attacks,
many of which focus on precisely bypassing such software-
enforced bounds checking and similar policies [18, 19].
Instead of protecting all data, an alternative approach is to
selectively protect only the subset of data that is really critical
for a given program. This can be achieved in several ways,
including privilege separation [20, 21], secure execution envi-
ronments [22, 23], sandboxing [24, 25, 26, 27], and ﬁne-grained
memory isolation [27, 28, 29, 30]. Although these approaches
differ across various aspects, their common characteristic is
that they all require a signiﬁcant code refactoring effort, which
is particularly challenging for large applications.
Seeking to increase the practical applicability of selective
data protection, some recent approaches have opted for requir-
ing the programmer to just annotate security-critical memory
objects in the source code as “sensitive,” and then automatically
harden the program to keep this data protected [31, 32,
33]. This is achieved by a compiler pass that identiﬁes and
instruments the memory load and store instructions that operate
on sensitive objects. DataShield [31] inserts ﬁne-grained bounds
checks for pointers to sensitive data, and lightweight coarse-
grained bounds checks for other pointers. Glamdring [32]
inserts transitions to and from an Intel SGX [34] enclave that
holds the sensitive data. Selective in-memory encryption [33]
inserts cryptographic transformations to keep the in-memory
representation of sensitive data always encrypted.
A key component of these approaches is the automated iden-
tiﬁcation of all instructions that may access sensitive memory
locations. Due to the widespread use of pointers in C/C++,
pointer (or points-to) analysis must be used to resolve which
pointers can point to sensitive memory locations. There has
been extensive research in the area of points-to analysis, with
various algorithms falling at different points in the spectrum of
precision vs. speed. Andersen’s algorithm [35] offers increased
precision, but with a computational complexity of O(n3) that
makes it inapplicable to large programs. Indicatively, based on
our experience with SVF’s [36] Andersen’s implementation, it
© 2021, Tapti Palit. Under license to IEEE.
DOI 10.1109/SP40001.2021.00082
1919
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
takes about 11 hours to complete for Nginx with OpenSSL,
while for the Chromium browser, our machine (with 32 GB
of RAM) ran out of memory after running for four days. On
the other hand, Steensgaard’s algorithm [37] has an almost
linear time complexity of O(n), making it scalable for large
programs, but comes with a much higher level of imprecision.
The issues of scalability and precision in points-to analysis
are well-known (we refer to Hind et al. [38, 39] for a more
detailed discussion). For selective data protection defenses, the
more imprecise the points-to analysis, the higher the number of
memory operations identiﬁed as potentially sensitive—due to
the overapproximation in computing the points-to graph, more
memory locations than those that will actually hold sensitive
data must be protected. This in turn requires more memory
instructions to be instrumented, which leads to higher overhead.
This challenge limits the applicability of prior works [31, 32,
33] to only moderately complex programs, such as MbedTLS
(a TLS library tailored for embedded systems). To the best of
our knowledge, no prior work on selective data protection is
applicable to larger code bases, such as OpenSSL, which has
actually suffered from in-the-wild data leakage attacks [5].
The competing requirements of high precision (to reduce
instrumentation and its overhead) and reasonable computational
complexity (to scale the analysis for large programs) motivated
us to rethink our approach towards pointer analysis. Starting
with the goal of making selective data protection practical
for large applications, in this paper we present DynPTA, a
defense against data leakage attacks that combines static
analysis with dynamic data ﬂow tracking (DFT) to keep a
subset of manually annotated sensitive data always encrypted
in memory. To protect sensitive data from leakage, we opted
for in-memory encryption [33] because i) it makes the overall
approach applicable on a wide range of systems (in contrast to
relying on more specialized hardware features [30, 32]), and
ii) it protects against transient execution attacks, as any leaked
data will still be encrypted (in contrast to memory safety [31]).
DynPTA uses the linear-time Steensgaard’s points-to analysis
to support large programs, but ameliorates the overapproxima-
tion of the computed points-to graph by relying on lightweight
label lookups to determine if potentially sensitive data is
actually sensitive. We introduce a scoped form of dynamic
DFT to track labeled objects that is applied only on the
potentially sensitive value ﬂows that were identiﬁed during
static analysis—requiring only a fraction of the program’s code
to be instrumented for DFT. For a given sensitive pointer
dereference, DynPTA selectively encrypts or decrypts the
accessed data depending on the presence or absence of the
sensitive label. To reduce the imprecision of the points-to
analysis even further, we also introduce a summarization-based
context-sensitive analysis of heap allocations that results in
improved runtime performance.
We implemented a prototype of DynPTA on top of LLVM,
and successfully applied it on eight popular applications,
including Nginx with OpenSSL, Apache Httpd, and OpenVPN—
applications with an order of magnitude more lines of code com-
pared to programs such as MbedTLS that were used in previous
works [31, 33]. DynPTA incurs a modest runtime overhead of
up to 19.2% when protecting the private TLS key of Nginx
with OpenSSL, while for MbedTLS the overhead is just 4.1%
(in contrast to a reported 13% for in-memory encryption [33]
and 35% for DataShield [31]). We also evaluated DynPTA with
real-world memory disclosure (Heartbleed [5]) and transient
execution (Spectre-PHT [40] and Spectre-BTB [41]) attacks,
and demonstrate that the protected data always remains safe.
In summary, we make the following main contributions:
• We propose a hybrid approach that combines static
analysis with scoped dynamic data ﬂow tracking to
improve the scalability and accuracy of points-to analysis.
• We propose a summarization-based context-sensitive heap
modeling approach that reduces the overapproximation of
points-to analysis for heap allocations.
• We implemented the above approaches in DynPTA, a
compiler-level selective data protection defense that keeps
programmer-annotated data always encrypted in memory.
• We experimentally evaluated DynPTA with real-world
applications and demonstrate that it can protect against
memory disclosure and transient execution attacks while
incurring a modest runtime overhead.
Our implementation of DynPTA is publicly available as an
open-source project at https://github.com/taptipalit/dynpta.
II. BACKGROUND AND MOTIVATION
A. Pointer Analysis
Static pointer analysis computes the potential targets of
pointers in a program. Pointer analysis is sound, but as a
static analysis technique, it lacks access to critical runtime
information, and therefore suffers from overapproximation, i.e.,
the resulting “points-to” set of a pointer may include objects
that the pointer will never point to at runtime.
Pointer analysis assumes that a pointer may only point
within the valid bounds of the target object. Memory disclosure
vulnerabilities can still dereference a pointer to access memory
beyond these bounds and leak other objects. Pointer analysis
can correctly identify and model other classes of pointer
transformations that are considered undeﬁned by the ANSI C
standard, such as casting an integer value to a pointer. These
undeﬁned transformations, however, result in major loss of
precision in the resulting points-to graph.
1) Set Inclusion vs. Set Uniﬁcation: Andersen’s [35]
inclusion-based and Steensgaard’s [37] uniﬁcation-based algo-
rithms are the two most common pointer analysis approaches.