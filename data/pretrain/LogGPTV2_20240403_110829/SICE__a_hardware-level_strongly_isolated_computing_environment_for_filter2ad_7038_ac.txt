ment triggers an SMI. The SMI handler then: (1) Clears all
general purpose registers, (2) ﬂushes all cache levels, (3) uses
the SMM password to change the SMRAM range so that it
covers both the security manager and the isolated workload,
and (4) restores all changes done to the legacy host page
tables before the isolated environment was initialized.
The ﬁrst two steps ensures that no sensitive data is leaked
to the legacy host. The third step ensures the protection
of the isolated environment’s memory. Finally, the last step
ensures that the legacy host resumes its operations correctly.
4.1.5 Terminating the Isolated Workload
When the isolated workload ﬁnishes execution, it needs to
be securely terminated so that no conﬁdential information
are leaked to the legacy host. Thus, isolated workload ter-
mination requests must be forwarded to the SMI handler,
which securely erases the memory belonging to the isolated
workload and then removes it from the protected SMRAM.
4.2 Multi-core Mode
The SICE multi-core mode enables the legacy host and
the isolated environments to run in parallel on diﬀerent pro-
cessor cores to better utilize the hardware resources.
Before presenting our solution, we ﬁrst give some back-
ground information on multi-core processors. As shown in
Figure 3, multi-core processors are equipped with one or
more processing nodes. Each node has its own memory con-
trol hub (north bridge) and one or more processor cores.
North bridge conﬁguration registers can be accessed by any
core on any node. On the other hand, each processor core
has its own general-purpose registers, MSRs, APIC, and two
380Core n
-Regis
Core 1
-MSRs
-Regis
Core 0:
-APIC
-MSRs
-Registers
-L1 and 
-APIC
-MSRs
-L1 and
-APIC
-L1 and L2 Caches
Core n
-Regis
Core 1
-MSRs
-Regis
Core 0:
-APIC
-MSRs
-Registers
-L1 and 
-APIC
-MSRs
-L1 and
-APIC
-L1 and L2 Caches
Memory Control Hub 
(North Bridge) 0
----------------------
-Configuration 
registers
-I/O space register
-L3 cache
Memory Control Hub 
(North Bridge) 1
----------------------
-Configuration 
registers
-I/O space register
-L3 cache
Figure 3: General multi-core processors architecture
levels of cache. These components can only be accessed by
their designated core. Among these core-dependent com-
ponents are the SMM_Addr and SMM_Mask MSRs that deﬁne
the SMRAM memory range. Thus, each processor core can
have its own protected SMRAM memory range that is inde-
pendent from the SMRAM memory range deﬁned on other
processor cores that share the same node. SICE utilizes this
architecture to provide the necessary protection for the iso-
lated environment in the multi-core mode.
For simplicity, we assume a platform with two cores in our
discussion: the host core that runs the legacy host, and the
isolated core that runs the isolated environment. However,
the same techniques can be used to assign more than one
core to either the legacy host or the isolated environment.
In general, two processor cores that belong to diﬀerent ex-
ecution environments can be either co-located on the same
processing node or located among diﬀerent nodes.
In the multi-core mode, SICE initializes the isolated envi-
ronment in the same way as the time-sharing mode (i.e., by
triggering an SMI in the legacy host). The SMI switches the
execution environment of all processor cores that exist on the
target platform to the SMM. The SMI handler performs a
diﬀerent task on each processor core. On the isolated core,
the SMI handler prepares the isolated environment and re-
turns to the security manager using the techniques described
in Section 4.1.2. Meanwhile, on the host core, the SMI han-
dler returns directly to the legacy host so that it can resume
its operations at the same time.
Since both the legacy host and the isolated environment
run in parallel on diﬀerent processor cores, no context switch-
ing between these environments is needed.
To ensure the isolation between the legacy host and the
isolated environments, SICE prevents the legacy host from
aﬀecting the execution of the isolated environment, and the
isolated workload (excluding the security manager, which
needs to be trusted by the legacy host) from aﬀecting the ex-
ecution of the legacy host. In particular, we need to prevent
the interference through explicit inter-core communication
as well as those through modifying each other’s memory.
4.2.1 Handling Inter-core Communication
Communication between processor cores, which is done
through Inter-Processor Interrupts (IPIs), can modify the
execution environment on the recipient code by changing
the execution path. This can pose a risk on the integrity of
the isolated environment. Therefore, all IPIs should either
be blocked or securely handled by the recipient core.
There are two types of IPIs: (1) Maskable IPIs that can be
blocked by the recipient core’s Advanced Programmable In-
terrupt Controller (APIC), and (2) non-maskable IPIs (e.g.,
NMI, SMI, startup, and INIT) that cannot be blocked.
Upon initializing the isolated environment, the SMI han-
dler disables all maskable interrupts on the isolated core so
that the host core cannot interfere with the isolated core.
The security manager, which runs as a thin hypervisor on
the isolated core, keeps these interrupts disabled.
On the other hand, non-maskable interrupts cannot be
blocked. Moreover, a speciﬁc non-maskable interrupt, the
startup interrupt, resets the processor core to start execu-
tion at a low physical memory address. Intuitively, this ad-
dress can be modiﬁed by the host core to alter the course of
execution on the isolated core.
To overcome this problem, SICE relies on the Global Inter-
rupt Flag (GIF) introduced by AMD. When the GIF is clear,
all interrupts, including non-maskable ones, are ignored or
held pending. The security manager thus clears the GIF of
the isolated core when the isolated environment is entered,
and sets it only after the isolated environment completes its
execution and all memory protection measures are taken.
The security manager then runs the isolated workload in
the guest VM mode. Upon entering the VM mode, both
global interrupts and maskable interrupts are re-enabled.
Hence, the isolated workload can receive all interrupts in-
cluding both IPIs and local processor interrupts. However,
the received interrupts will cause a VM exit and jump to
the security manager rather than modifying the execution
environment.
Global interrupts are automatically disabled again before
exiting the VM mode and jumping to the security manager.
The security manager identiﬁes the reason that causes the
VM exit. If it is an interrupt that aims to modify the execu-
tion environment (e.g., INIT interrupt), then it indicates a
malicious activity from the host core and all memory protec-
tion measures are taken. However, if the VM exit is caused
by a local interrupt or an IPI, the interrupt is forwarded
back to the isolated workload. This architecture allows the
isolated workload to use IPIs as method of signaling, which
is required to build a communication channel with the legacy
host. This channel can be used to provide hardware services
oﬀered by the legacy host to the isolated workload.
On the other hand, SICE relies on hardware virtualiza-
tion to prevent the isolated workload from perturbing the
legacy host. The isolated workload, which runs in a guest
VM, is not allowed to directly access the APIC to send any
interrupts that can perturb the execution of the host core.
4.2.2 Memory Isolation
To prevent the legacy host from accessing the isolated en-
vironment’s memory, SICE relies on a novel protection called
the memory double-view technique, shown in Figure 4. This
technique relies on the fact that AMD processor’s SMRAM
is deﬁned based on the core-dependent MSRs. Thus, diﬀer-
ent cores can view the SMRAM diﬀerently depending on the
values of their own SMM_Addr and SMM_Mask registers.
As shown in Figure 4, each processor core has its own view
of the physical memory. From the host core’s perspective,
the isolated environment uses a physical memory that lies in
the SMRAM memory range. Hence, the legacy host cannot
381Registers:
CR3
MSRs:
SMMMask
SMMAddr
Host  Core
Isolated 
Workload
SMI Handler
Physical 
Memory
Registers:
Nested CR3
MSRs:
SMMMask
SMMAddr
Isolated Core
Figure 4: Double view of memory from diﬀerent pro-
cessor cores. From the host core’s view, the isolated
environment is part of the SMRAM. From the iso-
lated workload’s view, the SMI handler is protected
by the SMRAM and the legacy host is protected by
the security manager via hardware assisted paging.
access such memory due to the SMRAM protection. From
the isolated core’s perspective, the isolated environment lies
within a normal memory region that is not part of the SM-
RAM. Hence, the isolated environment can run normally on
the isolated core.
SICE also prevents the isolated workload from accessing
the legacy host memory. The security manager, which plays
the role of a hypervisor, restricts the isolated workload to its
assigned physical memory. Nevertheless, a shared memory,
which does not fall in the host core’s SMRAM, is mapped
to allow communication between the two environments.
4.3 Attestation and Secure Communication
Cloud computing users are required to trust the environ-
ment that runs their workloads. In SICE, attesting the in-
tegrity of the isolated environment is complicated by the fact
that the legacy host has full access to all hardware peripher-
als and communication channels. In this section we provide
a three-step solution to address this challenge.
Attesting to Integrity of SICE: SICE requires the plat-
form to use standard trusted boot [28]. After a typical
trusted boot, the TPM securely stores the measurement of
the boot process, which includes the SMI handler, the code
image of the security manager and the code that loads them
and locks the SMRAM. The measurement is stored in TPM
special registers that cannot be erased by malicious software.
The TPM can further use its private Attestation Identity
Key (AIK) to attest to the integrity of this measurement to
remote users. Unlike other system software that is continu-
ously interacting with potential attackers, the SMI handler
cannot be modiﬁed by any code running on the system and
the trust in it can be maintained.
Attesting to Integrity of Isolated Workload: In turn,
the SMI handler attests to the integrity of the isolated work-
load.
It measures the isolated workload before it is ﬁrst
invoked and stores the measurement in the secure SMRAM.
To enable the attestation, we adopt an approach we previ-
ously used is HyperSentry [2]. Speciﬁcally, SICE generates
a public/private key pair during system boot. The private
key is securely stored in the SMRAM, and the public key is
securely stored inside the TPM.
To attest to the integrity of the isolated workload, the SMI
handler signs the measurement of the initial workload image
using its private key. The remote user accepts the measure-
ment output only if the private key matches the public key
stored in, and attested to by, the TPM.
Secure Communication with the Isolated Environ-
ment: SICE allows the establishment of a secure commu-
nication channel between the isolated workload and its re-
mote owner using standard cryptographic techniques. To
enable the remote owner to authenticate the isolated work-
load, SICE provides a public/private key pair for the isolated
workload. The public key is sent to the user as a part of
the workload attestation evidence signed by the SMI han-
dler. The private key is directly provided to the isolated
workload. Thus, it is never exposed to potentially malicious
code running inside the legacy host. On the other hand, the
isolated workload should include the public key of its remote
owner as a part of its initial image.
With both the security manager and the remote owner
being able to validate each other’s public keys, we can easily
modify, for example, SSL for secure communication without
leaking information to the (untrusted) legacy host.
4.4 Security Analysis
Now we discuss the security of the isolated environment,
including its conﬁdentiality, integrity, availability, and TCB.
We also discuss the security implication of using the SMM.
4.4.1 The Security of the Isolated Environment
Conﬁdentiality: To protect the conﬁdentiality of the iso-
lated environment, SICE prevents potential attackers from
accessing its memory. SICE uses the SMRAM to achieve
this objective. The hardware protects the SMRAM from
access requests made by both the CPU and direct memory
access (DMA) capable devices.
In the time-sharing mode, SICE modiﬁes the SMRAM
memory range according to the running environment. When-
ever the legacy host is running, SICE extends the SMRAM
to include the memory of the isolated environment. Thus,
this memory is protected from all memory requests.
When the isolated environment is triggered, SICE takes
two security measures to guarantee its conﬁdentiality. First,
SICE assures that the isolated environment fully controls
physical platform. Hence, the legacy host is not active to
threaten the isolated environment, given that modern pro-
cessors do not use cached memory upon entering the SMM
to avoid cache poisoning attacks [1, 13]. Second, SICE uses
hardware DMA exclusion (e.g., AMD’s DMA exclusion vec-
tor (DEV) [1] and Intel’s VT-d [12]) to prevent DMA capa-
ble devices, which could be maliciously programmed, from
accessing the protected memory.
In the multi-core mode, SICE’s memory double-view tech-
nique provides the needed protection. According to architec-
ture manuals, memory access requests made from a proces-
sor core are checked against its own SMRAM before being
routed. Hence, the host core will not be able to access the
protected memory that falls within its own SMRAM range.
The same is true for requests to update or retrieve cache
entries. Hence, cache poisoning is not possible.
In the multi-core mode, SICE cannot rely on hardware
DMA exclusion because its control registers exist in the
memory control hub, which is accessible by all processor
cores. Thus, SICE relies on the SMRAM protection to pre-
vent DMA access to the isolated environment’s memory.
Typically, the memory control hub does not allow DMA
access to the SMRAM. However, the AMD hardware ar-
382chitecture manual does not precisely deﬁne which processor
core’s SMRAM range is used to prevent DMA access, partic-
ularly when diﬀerent SMRAM ranges are deﬁned on diﬀer-
ent cores. Thus, implementing SICE on a speciﬁc platform
requires verifying which SMRAM range is protected from
DMA. The speciﬁc processor core(s) that deﬁnes this range
is the same one that should be used as the untrusted host
core. As shown in ﬁgure 4, the host core’s SMRAM memory
range includes the whole memory range used by the running,
one or more, isolated environments.
A ﬁnal threat to the conﬁdentiality of the isolated envi-
ronment is brute force attacks against the SMM password.
For each processor core, SICE generates a 64-bit random
value to be used as the SMM password. Thus, it is com-
putationally infeasible to break this password. The random
password generation can be done using the TPM.
Integrity: In the time-sharing mode, the legacy host can-
not threaten the integrity of the isolated environment be-
cause they do not run concurrently. In the multi-core mode,
the host core cannot access the registers, MSRs and APIC
of the isolated core. However, the host core can still mod-
ify system-wide conﬁgurations that rely on shared resources
(e.g., the memory control hub and the IO control hub).
Next, we prove that such conﬁgurations can only perturb the
isolated environment, for example, by rebooting the system,
without threatening its conﬁdentiality or integrity.
According to the Advanced Conﬁguration and Power In-
terface (ACPI) speciﬁcation [10], processor cores keep their
state as long as the processor runs in the S0 or S1 power
modes. Thus, the isolated core will keep running the iso-
lated environment as long as either S0 or S1 state is main-
tained. On the other hand, all other ACPI states will cause
the processor core to lose its state and resume execution
from the non-volatile memory (i.e., the BIOS). Since the
BIOS belongs to the trusted computing base, changing the
ACPI state will be detected by SICE. In all cases, the ACPI
implementation of the target platform needs to be carefully
reviewed to securely implement SICE.
As presented in Section 4.2, attacks that use IPI between
processor cores are thwarted using APIC setting and the
GIF of the processor core that runs the isolated environment.