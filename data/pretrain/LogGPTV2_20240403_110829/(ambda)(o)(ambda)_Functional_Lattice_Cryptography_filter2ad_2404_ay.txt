function, given polynomially many pairs of the form (𝑥𝑖, 𝐹𝑠(𝑥𝑖)), where the 𝑥𝑖 ∈ {0, 1}𝑘
are uniformly random and independent (not chosen by the adversary). It is well known that
weak PRFs can be used in a generic manner to implement symmetric-key encryption, in the
following way:
Enc𝑠(𝑚; 𝑟) = (𝑟, 𝐹𝑠(𝑟) ⊕ 𝑚),
Dec𝑠(𝑟, 𝑐) = 𝐹𝑠(𝑟) ⊕ 𝑐,
175
where 𝑚 ∈ {0, 1}𝑛 and 𝑟 ∈ {0, 1}𝑘. The scheme is IND-CPA secure provided that 𝐹𝑠 is a
weak PRF for sufﬁciently large input length 𝑘, and 𝑟 is chosen uniformly at random in each
invocation.
Notice that homomorphically computing a PRF 𝐹𝑠, i.e., computing HE(𝐹𝑠(𝑟)) from
HE(𝑠) and 𝑟, followed by a single homomorphic exclusive-or operation, corresponds to ho-
momorphically computing HE(Dec𝑠(𝑐)) = HE(𝐹𝑠(𝑟)⊕ 𝑐) from HE(𝑠) and 𝑐 = Enc𝑠(𝑚; 𝑟).
Thus, efﬁcient homomorphic evaluation of the PRF directly translates to efﬁcient homomor-
phic symmetric decryption. So for all applications described above (including homomorphic
key management, which is attained just by evaluating the PRF itself), it is sufﬁcient to focus
on fast homomorphic evaluation of pseudorandom functions.
6.1.3 Our Results
Our primary technical contribution is the design and implementation for the efﬁcient homo-
morphic evaluation of the non-trivial ring rounding operation, including a novel arithme-
tization of an operation for rounding integer coefﬁcients of a ring element. As a concrete
application, we use ring rounding to implement homomorphic evaluation of the weak pse-
duorandom function of Banerjee, Peikert, and Rosen (BPR) [BPR12]. Our experimental
results show that the homomorphic evaluation of the BPR PRF is dramatically more efﬁcient
than the homomorphic evaluation of AES. For instance, on a standard laptop computer we
can homomorphically evaluate one useful and apparently secure instantiation of the BPR
weak PRF on a single input in less than 90 seconds, and requiring less than 150 megabytes
of memory. This is more than 1,400 times faster (on weaker hardware) than the best reported
total runtime for AES evaluation, and uses less memory by a factor of more than 1,500.
Figure 6.1 gives a high-level performance comparison between our implementation and
prior ones that homomorphically evaluate the AES function.
The key idea behind our design is to exploit the simple (yet still seemingly secure)
algebraic structure of the BPR pseudorandom function, and its tight “algebraic ﬁt” with
176
lattice-based HE constructions. Most importantly, this relationship allows us to use an HE
plaintext space that perfectly coincides with the domain of the PRF key elements, and the
operations that the PRF performs on them. From the perspective of homomorphic evaluation,
this correspondence translates into two main advantages:
1. It yields relatively compact encryptions of the PRF key element under the HE scheme,
and allows for signiﬁcant savings in the amount of auxiliary data (i.e., key-switching
“hints”) needed for homomorphic evaluation.
2. It leads to very simple, small, and low-depth arithmetic circuits (and hence fast
homomorphic evaluation) for the main operation in the PRF computation, namely,
“rounding” a public multiple of the secret to a smaller modulus.
Table 6.1: Performance comparison with prior homomorphic evaluations of AES [GHS12c;
Che+13].
total runtime (sec)
time/block (sec) memory
AES-128, 54-block batch
AES-128, 720-block batch
BPR weak PRF
130,000
216,000
90
2,400
300
90
256 GB
256 GB
160 MB
To date, a large roadblock for implementing homomorphic computations like pseudoran-
dom functions has been the complexity of using existing HE implementations. We give a
concise implementation using ALCHEMY (chapter 5), which automatically handles complex-
ities such as parameter generation, key/hint management, and noise management operations.
We compare our ALCHEMY implementation with a reference implementation using the
interface from section 4.3, and ﬁnd that ALCHEMY greatly reduces the implementation
burden with no loss in performance.
Organization. The rest of the chapter is organized as follows.
177
Section 6.2 deﬁnes the important ring-rounding operation and our method for evaluating it
homomorphically.
Section 6.3 gives our novel arithmetization (in terms of operations natively supported
by our target SHE scheme) of the integer rounding operation that is central to the
homomoprhic evaluation of ring-rounding. This arithmetization is more suitable for
rounding small moduli like those used in our PRF instantiation.
Section 6.4 introduces the BPR weak PRF, our concrete instantiation, and the homomorphic
evaluation fo the PRF.
Section 6.5 analyzes the concrete security of our BPR instantiation against known classes
of attacks.
Section 6.6 describes the implementation of homomorphic ring-rounding and PRF evalua-
tion using ALCHEMY.
Section 6.7 quantitatively measures the savings of using ALCHEMY compared to the current
method of hand-writing homomorphic computations. Note that the PRF application is
primarily a tool for evaluating ALCHEMY; for evaluating the BPR PRF implementa-
tion, see the discussion above this paragraph which compares it to prior homomorphic
evaluation of symmetric-key primitives.
6.2 Homomorphic Computation of Ring Rounding
We start by describing the ring rounding function and the technical ideas underlying its
homomorphic evaluation. Let 𝑅 be a cyclotomic ring of arbitrary index 𝑚, and let 𝑛 = 𝜙(𝑚).
The ring rounding function is ⌊·⌉𝑞 : 𝑅𝑝 → 𝑅𝑞. This operation is highly non-linear (which
leads to its usefulness in lattice primitives), so it is not obvious how to efﬁciently evaluate in
homomorphically.
178
We call upon the literature on bootstrapping, which is Gentry’s technique [Gen09b;
Gen09a] for transforming an SHE into an FHE by homomorphically evaluating the SHE’s
decryption function. Since the rounding function ⌊·⌉𝑞 : 𝑅𝑝 → 𝑅𝑞 is essentially the same
nonlinear step performed in the decryption algorithm of lattice-based cryptosystems (but
for a much smaller modulus 𝑝), bootstrapping techniques from several prior works provide
exactly what we need here. In more detail, the rounding step proceeds in two phases:
• Ring-switch: First, we homomorphically move the Z𝑝-coefﬁcients of the input into
separate plaintext “slots” of a different plaintext ring 𝑆𝑝, using the ring-tunneling
technique from section 4.2.
• Batch-round: Then, we apply the integer rounding function ⌊·⌉𝑞 : Z𝑝 → Z𝑞 in batch
to all the slots at once, at the cost of just one homomorphic evaluation of the integer
rounding function.
Starting with the latter step, Smart and Vercauteren [SV11] ﬁrst proposed the idea of
batched (or SIMD) homomorphic operations. There are several known arithmetizations
of the integer rounding step in the special case where 𝑝 = 2𝑘 is a power of two and
𝑞 = 2. Gentry, Halevi and Smart [GHS12a] described a simple arithmetic circuit for these
parameters (slightly improved in [AP13]) which has depth exactly log(𝑝/2) and performs
about log2(𝑝)/2 multiplications and additions. In section 6.3 we give a quite different
circuit for the same specialized parameters, having the same log(𝑝/2) depth, which can be
evaluated using exactly 𝑝/4 multiplications (and no additions). This is asymptotically worse
but concretely better than log2(𝑝)/2 when 𝑝 ≤ 32, which is the case in our implementation.
We emphasize that all of these parameters are restricted to the case where 𝑝 = 2𝑘 and 𝑞 = 2;
an arithmetization for somewhat more general parameters is given in [HS15].
Moving coefﬁcients into separate slots is more involved. Gentry et al. [GHS12a]
gave a procedure for doing this, but it requires working in more complex cyclotomic
rings than are convenient for our PRF, and it appears very difﬁcult to implement and
inefﬁcient. In particular, it relies on a general-purpose circuit compiler for HE [GHS12b],
179
and seems primarily of theoretical interest. Instead we rely on the ring-tunneling technique
given in chapter 4, which improves upon the work of Alperin-Sheriff and Peikert [AP13].
Tunneling gives a simple linear procedure for transferring the coefﬁcients of an 𝑅𝑝-element
into the plaintext slots of a different ring 𝑆𝑝, in which we can batch-round and ﬁnally decrypt
the resulting bits. To our knowledge, our weak PRF provides the ﬁrst implementation of a
batched rounding circuit.
Altogether, for the full evaluation of ring rounding, we obtain a very simple and regular
arithmetic circuit, consisting of: (1) a sequence of (at most) log 𝑛 ring-tunnels (which,
despite being a linear operation, performs operations and induces noise growth roughly
matching those of a homomorphic multiplication for each tunnel), and (2) a complete binary
tree of multiplications for the (batched) integer rounding. The total effective multiplicative
depth is therefore bounded by log 𝑛 + log(𝑝/2).
6.3 Rounding Circuit for Small Moduli
In this section we describe a simple arithmetic circuit that for any 𝑝 = 2ℓ computes the
rounding function ⌊·⌉2 : Z𝑝 → Z2, i.e., it returns the bit indicating whether the input is
closer (modulo 𝑝) to 0, or to 𝑝/2.1 This operation is useful in a variety of contexts: it is an
important part of the bootstrapping step for FHE and is also the central component needed
for the RLWR problem and the strong and weak PRFs given in [BPR12], as well as for the
strong PRF in [BP14]. While this operation is easy to implement in-the-clear, it is not a
“native” operation for our SHE scheme.
Gentry, Halevi, and Smart [GHS12a] described an algebraic procedure (slightly im-
proved in [AP13, Appendix B]) that can be used to (homomorphically) compute the rounding
2(𝑝)/2 (homomorphic)
function in log2(𝑝/2) multiplicative depth, using a total of about log2
multiplications and additions each. Here we describe a very different procedure that com-
putes the function in log2(𝑝/2) multiplicative depth, exactly 𝑝/4 homomorphic multiplica-
1We thank Jacob Alperin-Sheriff (personal communication) for important observations that contributed to
the results of this section.
180
tions, and no homomorphic additions.2 While our procedure is clearly worse asymptotically,
it actually performs fewer operations in the same depth when 𝑝 ≤ 32, which is the case for
our PRF instantiation. The procedure is also very simple to implement, especially with the
help of ALCHEMY (see chapter 5).
For 𝑖 ∈ [ℓ], deﬁne functions 𝑓𝑖 : Z𝑝 → Z𝑝/2𝑖 recursively as follows: let 𝑓0(𝑥) = 𝑥 be the
identity function, and for 1 ≤ 𝑖 ≤ ℓ − 1 deﬁne
𝑓𝑖+1(𝑥) =
𝑓𝑖(𝑥) · 𝑓𝑖(𝑥 − 2𝑖)
2
mod 𝑝/2𝑖+1.
(6.3.1)
Note that due to the division by two in Equation (6.3.1), in order for 𝑓𝑖+1 to be well deﬁned,
at least one of 𝑓𝑖(𝑥), 𝑓𝑖(𝑥 − 2𝑖) must be even for all 𝑥 ∈ Z𝑝. The following lemma (for the
special case 𝑘 = 1) proves this fact in a more general form, which we will need for our ﬁnal
claim.
Lemma 6.3.1. Let 0 ≤ 𝑖 ≤ ℓ and 0 ≤ 𝑘 ≤ ℓ − 𝑖, and let 𝑥 ∈ Z𝑝 be arbitrary. Then over all
𝑗 ∈ [2𝑘], exactly one of 𝑓𝑖(𝑥 − 𝑗 · 2𝑖) ∈ Z𝑝/2𝑖 is divisible by 2𝑘, namely, the one for which
𝑗 = ⌊𝑥/2𝑖⌋ (mod 2𝑘).
Proof. We proceed by induction on 𝑖. First consider the base case 𝑖 = 0, where 𝑓0(𝑥) = 𝑥 is
the identity function. Since 2𝑘 ≤ 2ℓ ≤ 𝑝, the 2𝑘 consecutive residue classes 𝑥, 𝑥−1, . . . , 𝑥−
(2𝑘 − 1) ∈ Z𝑝 are all distinct, and clearly, 𝑥− 𝑗 for 𝑗 = 𝑥 (mod 2𝑘) is the only one divisible
by 2𝑘.
To prove the lemma for positive 𝑖 ≤ ℓ and any 𝑘 ≤ ℓ − 𝑖, assume that it holds for 𝑖 − 1
and any 𝑘 ≤ ℓ − 𝑖 + 1. By deﬁnition of 𝑓𝑖, for any 𝑗 ∈ Z we have
(︀𝑥 − 𝑗 · 2𝑖)︀ =
𝑓𝑖
𝑓𝑖−1(𝑥 − (2𝑗) · 2𝑖−1) · 𝑓𝑖−1(𝑥 − (2𝑗 + 1) · 2𝑖−1)
2
mod 𝑝/2𝑖.
2Our procedure also adds several ﬁxed constants to a ciphertext, but these steps take essentially no time,
and incur no growth in the ciphertext noise.
181
By the inductive hypothesis applied with 𝑥 − (2𝑗) · 2𝑖−1 and 𝑘 = 1, exactly one of the two
terms in the numerator is even, and so the largest power of two that divides 𝑓𝑖(𝑥 − 𝑗 · 2𝑖)
is exactly half that of the even term. In addition, over all 𝑗 ∈ [2𝑘], each 𝑓𝑖−1(𝑥 − 𝑗′ · 2𝑖−1)
for 𝑗′ ∈ [2𝑘+1] appears in the numerator exactly once. By the inductive hypothesis, exactly
one of those terms is divisible by 2𝑘+1, so exactly one of 𝑓𝑖(𝑥 − 𝑗 · 2𝑖) is divisible by 2𝑘.
Speciﬁcally, it is the one for which 𝑗 = ⌊𝑗′/2⌋, where 𝑗′ = ⌊𝑥/2𝑖−1⌋ (mod 2𝑘+1) by the
inductive hypothesis. Therefore, 𝑗 = ⌊𝑥/2𝑖⌋ (mod 2𝑘), as claimed.
Corollary 6.3.2. The function 𝑓ℓ−1 : Z𝑝 → Z2 is 𝑓ℓ−1(𝑥) = msb𝑝(𝑥) = ⌊𝑥/2ℓ−1⌋.
Proof. Letting 𝑖 = ℓ − 1 and 𝑘 = 1 in Lemma 6.3.1, we have that 𝑓ℓ−1(𝑥) ∈ Z2 is even (i.e.,
equals 0) exactly when ⌊𝑥/2ℓ−1⌋ = 0 (mod 2), i.e., when 𝑥 ∈ {0, . . . , 𝑝/2− 1} (mod 𝑝).
By fully expanding 𝑓ℓ−1(𝑥 + 𝑝/4) in terms of 𝑓0 using Equation (6.3.1), we see that
the rounding function ⌊𝑥⌉2 can be expressed as a complete binary tree with 𝑝/2 leaf
nodes and depth log2(𝑝/2) = ℓ − 1, where the leaf nodes hold the terms 𝑥 − 𝑗 for 𝑗 ∈
{−𝑝/4, . . . , 𝑝/4−1}, and the internal nodes are all “multiply-and-divide-by-two” arithmetic
gates. Given an encryption 𝑐 = (𝑐0, 𝑐1) of 𝑥, we can trivially get an encryption of each 𝑥− 𝑗
by just subtracting 𝑗 from the constant term 𝑐0. We can then homomorphically compute ⌊𝑥⌉2
by evaluating the gates of the tree, which takes exactly 𝑝/2− 1 homomorphic multiplications
(and no additions).
Finally, the above method can be improved to require only 𝑝/4 multiplications, thus
halving the total work. The idea is to restructure the tree so that leaves (𝑥−𝑗), (𝑥−(−𝑗−1))
for 𝑗 ∈ {−𝑝/4, . . . ,−1} are paired as siblings, and more generally, every internal node
at level 𝑖 = 1, 2, . . . , ℓ (where level 0 is the leaf level) has one descendant leaf from each
residue class modulo 2𝑖. It is straightforward to generalize the proof of Lemma 6.3.1 to
show that any such tree correctly computes the rounding function. With these pairings, the
nodes at level 1 are encryptions of (𝑥− 𝑗)(𝑥− (−𝑗 − 1))/2 = (𝑥2 + 𝑥− (𝑗2 + 𝑗))/2, which
just differ by known constants. Therefore, all the encryptions at level 1 can be computed
182
using just one homomorphic multiplication, then adjusting its constant term. It is tempting
to think that this trick could be generalized to reduce the number of multiplications further
(perhaps to only log2(𝑝)), by efﬁciently deriving many of the level-2 ciphertexts from just a
few others, but so far we have not found a way to do this. In any case, the rounding function
is not the main bottleneck in our implementations.
6.4 Homomorphic Computation of the BPR Weak PRF
In this section, we use the homomorphic evaluation of ring rounding as a building block for
the homomorphic evaluation of the BPR weak pseudorandom function [BPR12]. We give
concrete parameters for our instantiation and a security analysis against known attacks on
the PRFs.
6.4.1 BPR Weak PRF
Let 𝑅 be a cyclotomic ring of arbitrary index 𝑚, and 𝑛 = 𝜙(𝑚)) be the dimension of the
ring over the integers. For 𝑝 = 2𝑘 a power of two, the BPR family of weak pseudorandom
functions is the set of functions 𝑓𝑠 : 𝑅𝑝 → {0, 1}𝑛, indexed by a ring element 𝑠 ∈ 𝑅𝑝, and
deﬁned as the “rounded product”
𝑓𝑠(𝑎) := ⌊𝑎 · 𝑠⌉2.
Here ⌊·⌉2 : 𝑅𝑝 → 𝑅2 denotes the “rounding function” that maps each of its input polyno-
mial’s 𝑛 coefﬁcients to Z2 = {0, 1} depending on whether the coefﬁcient is closer (modulo
𝑝 · 𝑎⌉ ∈ Z2.) The
𝑝) to 0 or to 𝑝/2. (Formally, the integer rounding function maps 𝑎 ∈ Z𝑝 to ⌊ 2
resulting polynomial is interpreted as an 𝑛-bit string simply by reading off its coefﬁcients in
order.
It is proved in [BPR12] that when 𝑠 ∈ 𝑅𝑝 is drawn from an appropriate distribution,
and 𝑝 is sufﬁciently large, the above function family is a weak PRF family—or equivalently,
183
that the ring-Learning With Rounding (ring-LWR) problem is hard—assuming that the ring-
LWE problem [LPR13b] is hard in 𝑅𝑝. This proof provides strong evidence that the family
has a sound design and is indeed a secure weak PRF, at least in an asymptotic sense. The
intuition behind the proof is that the rounding function destroys all but the most-signiﬁcant
bits of the product 𝑎 · 𝑠, and that the round-off term can be seen as a kind of “small” error,
though one that is generated deterministically from 𝑎 · 𝑠 rather than as an independent
random variable (as in the LWE problem).
We note that the known proofs of security (under ring-LWE) require 𝑝 to be super-
polynomial in 𝑛. (More precisely, 𝑝 has to be lower bounded by the total number of samples