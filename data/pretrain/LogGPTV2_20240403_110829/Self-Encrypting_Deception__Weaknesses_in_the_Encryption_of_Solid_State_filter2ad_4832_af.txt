Certainly! Here is a revised and optimized version of the provided text, focusing on clarity, coherence, and professionalism:

---

### Enhancing Cryptography to Avoid Future Problems

To prevent future issues, it is essential to conduct thorough and independent assessments of cryptographic implementations. 

In general, it is worth examining the problems that Self-Encrypting Drives (SEDs) aim to address. SEDs do not provide meaningful mitigations in scenarios where software encryption falls short (as discussed in Section III). However, as demonstrated, in situations where software encryption offers full data confidentiality, hardware encryption often does not. Therefore, at best, the data confidentiality guarantees of SEDs are similar to those of software encryption, and often much less.

Traditionally, SEDs had a performance advantage, but this is no longer the case with the widespread adoption of the AES-NI extension on x86 CPUs. Consequently, the industry should reevaluate any preference for hardware encryption. Software encryption has the benefit of being easier to verify and audit, especially for open-source solutions. Even proprietary software solutions can be more easily reverse-engineered compared to the complex inner workings of SEDs. A start to this reevaluation has already been made: following our public release, Microsoft has introduced a new preview version (build 18317) of the next Windows 10 version (19H1). In this version, the default behavior of BitLocker is to avoid delegating (and trusting) the encryption of data to the drives.

### References

1. **Statista.** (2018) Global market share of solid-state drive suppliers. [Online]. Available: https://www.statista.com/statistics/412158/global-market-share-solid-state-drive-suppliers
2. **Domburg, J.** (2013) Hard disk hacking. [Online]. Available: http://spritesmods.com/?art=hddhack
3. **Zaddach, J., Kurmus, A., Balzarotti, D., Blass, E.-O., Francillon, A., Goodspeed, T., Gupta, M., and Koltsidas, I.** (2013) Implementation and implications of a stealth hard-drive backdoor. In Proceedings of the 29th Annual Computer Security Applications Conference. ACM, pp. 279–288.
4. **Goodspeed, T.** (2014) Active disk antiforensics and hard disk backdoors. Talk at 0x07 Sec-T Conference. [Video]. Available: https://www.youtube.com/watch?v=8Zpb34Qf0NY
5. **Cojocar, L., Razavi, K., and Bos, H.** (2017) Off-the-shelf embedded devices as platforms for security research. In Proceedings of the 10th European Workshop on Systems Security, ser. EuroSec’17. New York, NY, USA: ACM, pp. 1:1–1:6. [Online]. Available: http://doi.acm.org/10.1145/3065913.3065919
6. **Horchert, J., Appelbaum, J., and Stöcker, C.** (2013) Shopping for spy gear: catalog advertises NSA toolbox. Der Spiegel.
7. **Verdult, R.** (2015) The (in)security of proprietary cryptography. Ph.D. dissertation, Radboud University, Nijmegen.
8. **Domburg, J. and Tweakers.net.** (2007) Secustick gives false sense of security. [Online]. Available: https://tweakers.net/reviews/683/secustick-gives-false-sense-of-security.html
9. **Alendal, G., Kison, C., and modg.** (2015) Got HW crypto? On the (in)security of a Self-Encrypting Drive series. IACR Cryptology ePrint Archive, vol. 2015, p. 1002.
10. **Boteanu, D. and Fowler, K.** (2015) Bypassing self-encrypting drives (SED) in enterprise environments. In BlackHat Europe.
11. **Stevens, C.** (2016) AT Attachment 8-ATA/ATAPI Command Set – 4 (ACS-4), Working Draft, American National Standard, Revision 14. [Online]. Available: http://www.t13.org/documents/UploadedDocuments/docs2016/di529r14-ATAATAPI_Command_Set_-_4.pdf
12. **Trusted Computing Group.** (2015) TCG storage security subsystem class: Opal specification version 2.01.
13. **Müller, T., Freiling, F. C., and Dewald, A.** (2011) TRESOR runs encryption securely outside RAM. In USENIX Security Symposium, vol. 17.
14. **Müller, T., Taubmann, B., and Freiling, F. C.** (2012) Trevisor. In International Conference on Applied Cryptography and Network Security. Springer, pp. 66–83.
15. **Müller, T., Latzo, T., and Freiling, F. C.** (2012) Self-encrypting disks pose self-decrypting risks. In the 29th Chaos Communication Congress, pp. 1–10.
16. **Mowery, K., Wei, M., Kohlbrenner, D., Shacham, H., and Swanson, S.** (2013) Welcome to the entropics: boot-time entropy in embedded devices. In Security and Privacy (SP), 2013 IEEE Symposium on. IEEE, pp. 589–603.
17. **Wetzels, J. and Abbasi, A.** (2016) Wheel of fortune: Analyzing embedded OS random number generators.
18. **IEEE.** (2008) IEEE standard for cryptographic protection of data on block-oriented storage devices. IEEE Std 1619-2007, pp. c1–32.
19. **Rogaway, P.** (2004) Efficient instantiations of tweakable blockciphers and refinements to modes OCB and PMAC. In International Conference on the Theory and Application of Cryptology and Information Security. Springer, pp. 16–31.
20. **Ptacek, T. and Ptacek, E.** (2014) You don’t want XTS. [Online]. Available: https://sockpuppet.org/blog/2014/04/30/you-dont-want-xts/
21. **Clunie, D., Shroeppel, R., Rogaway, P., Bharadwaj, V., and Ferguson, N.** (2008) Public comments on the XTS-AES mode. Collected email comments released by NIST, available from their web page.
22. **Ferguson, N.** (2006) AES-CBC+ Elephant diffuser: A disk encryption algorithm for Windows Vista. Tech. Rep.
23. **Grand, J.** (2013) JTAGulator: assisted discovery of on-chip debug interfaces. In 21st DefCon Conference, Las Vegas.
24. **Chen, D.** (2015) Firmware deobfuscation utilities. [Online]. Available: https://github.com/ddcc/drive_firmware
25. **Gühring, P.** (2016-2018) The missing Samsung EVO 840 - 250 GB SSD repair manual. [Online]. Available: http://www2.futureware.at/~philipp/ssd/TheMissingManual.pdf
26. **Microsoft.** (2018) Guidance for configuring BitLocker to enforce software encryption. [Online]. Available: https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/ADV180028
27. **Samsung.** (2018) Consumer notice regarding Samsung SSDs. [Online]. Available: https://www.samsung.com/semiconductor/minisite/ssd/support/consumer-notice/
28. **Trusted Computing Group.** (2015) TCG storage security subsystem class: Opalite specification version 1.00.

### Algorithm 1: ProtectPasswd

**Requirements:** abRdsKey, abDeviceKey, aabCredentialTable  
**Ensures:** Credential `szPasswd` is stored in `aabCredentialTable` at `dwSlotNo`

```plaintext
procedure PROTECTPASSWD(szPasswd, bStoreRdsKey, dwSlotNo)
    if bStoreRdsKey then
        abPlaintext ← abRdsKey
    else
        abPlaintext ← [0x00 × 32]
    abSalt ← RANDOM(32 bytes)
    abKey ← PBKDF2(szPasswd, abSalt)
    abCiphertext ← ENCRYPT(abKey, abPlaintext)
    stProtectedPasswd ← (abSalt, abCiphertext)
    abOutput ← ENCRYPT(abDeviceKey, stProtectedPasswd)
    aabCredentialTable[dwSlotNo] ← abOutput
```

### Security Evaluation

We identified several implementation mistakes, two of which, depending on the circumstances, can be leveraged into full recovery of the data.

### Algorithm 2: VerifyPasswd

**Requirements:** abRdsKey, abDeviceKey, aabCredentialTable  
**Ensures:** Verify `szPasswd` and set global RDS key if `bExtractRdsKey = true`

```plaintext
function VERIFYPASSWD(szPasswd, bExtractRdsKey, dwSlotNo)
    abInput ← aabCredentialTable[dwSlotNo]
    stProtectedPasswd ← DECRYPT(abDeviceKey, abInput)
    if decrypt failed then
        return ERROR
    (abSalt, abCiphertext) ← stProtectedPasswd
    abKey ← PBKDF2(szPasswd, abSalt)
    abPlaintext ← DECRYPT(abKey, abCiphertext)
    if decrypt failed then
        return ERROR
    if bExtractRdsKey then
        abRdsKey ← abPlaintext
    return SUCCESS
```

### Algorithm 3: UnwrapDek

**Requirements:** abRdsKey, abDeviceKey, aabRangeKeyTable, aabUnwrappedRangeKeyTable  
**Ensures:** Range key `dwRangeNo` is unwrapped

```plaintext
function UNWRAPDEK(dwRangeNo, bIsProtectedRange)
    if bIsProtectedRange then
        abKey ← abRdsKey
    else
        abKey ← abDeviceKey
    abCiphertext ← aabRangeKeyTable[dwRangeNo]
    abPlaintext ← DECRYPT(abKey, abCiphertext)
    if decrypt failed then
        return ERROR
    aabUnwrappedRangeKeyTable[dwRangeNo] ← abPlaintext
    return SUCCESS
```

### Execution Trace Captured on a Crucial MX300 Drive During the BitLocker Setup Phase

- `VerifyPasswd(szPasswd="AEGIS_ACADIA_MSID_12456789012345", bExtractRdsKey=true, dwSlotNo=2)`
- `VerifyPasswd(szPasswd="AEGIS_ACADIA_MSID_12456789012345", bExtractRdsKey=true, dwSlotNo=2)`
- `CopyCredential(dwSourceSlot=2, dwDestinationSlot=10)`
- `ProtectPasswd(szPasswd=[0x00 × 32], bStoreRdsKey=true, dwSlotNo=11)`
- `CopyCredential(dwSourceSlot=11, dwDestinationSlot=12)`
- ... (repeated CopyCredential calls)
- `StoreCryptoContextInSpiFlash()`
- `VerifyPasswd(szPasswd="AEGIS_ACADIA_MSID_12456789012345", bExtractRdsKey=true, dwSlotNo=2)`
- `VerifyPasswd(szPasswd="AEGIS_ACADIA_MSID_12456789012345", bExtractRdsKey=true, dwSlotNo=10)`
- `VerifyPasswd(szPasswd="AEGIS_ACADIA_MSID_12456789012345", bExtractRdsKey=true, dwSlotNo=2)`
- `ProtectPasswd(szPasswd=«BitLocker SID password», bStoreRdsKey=true, dwSlotNo=2)`
- `StoreCryptoContextInSpiFlash()`
- `VerifyPasswd(szPasswd="AEGIS_ACADIA_MSID_12456789012345", bExtractRdsKey=true, dwSlotNo=10)`
- `ProtectPasswd(szPasswd=«BitLocker SID password», bStoreRdsKey=true, dwSlotNo=10)`
- `StoreCryptoContextInSpiFlash()`
- `VerifyPasswd(szPasswd=[0x00 × 32], bExtractRdsKey=true, dwSlotNo=15)`
- `GenerateRandomDekAndWrap(dwRangeNo=1, bIsProtectedRange=false)`
- `VerifyPasswd(szPasswd=[0x00 × 32], bExtractRdsKey=true, dwSlotNo=15)`
- `StoreCryptoContextInSpiFlash()`
- `UnwrapDek(dwRangeNo=1, bIsProtectedRange=false)`
- `VerifyPasswd(szPasswd=[0x00 × 32], bExtractRdsKey=true, dwSlotNo=15)`
- ... (repeated VerifyPasswd calls)
- `UnwrapDek(dwRangeNo=1, bIsProtectedRange=false)`
- `WrapDek(dwRangeNo=1, bIsProtectedRange=true)`
- `VerifyPasswd(szPasswd=[0x00 × 32], bExtractRdsKey=true, dwSlotNo=15)`
- `ProtectPasswd(szPasswd=«BitLocker user password», bStoreRdsKey=true, dwSlotNo=15)`
- `StoreCryptoContextInSpiFlash()`
- `VerifyPasswd(szPasswd=«BitLocker user password», bExtractRdsKey=true, dwSlotNo=15)`
- `VerifyPasswd(szPasswd=«BitLocker user password», bExtractRdsKey=true, dwSlotNo=15)`

---

This revision aims to make the text more coherent, clear, and professional, while maintaining the original content and intent.