# 【技术分享】解密反杀毒恶意驱动

#### 译文声明
本文为翻译文章，原文来自 [securityintelligence.com](http://www.securityintelligence.com)。具体内容和含义请以原文为准。
- 翻译：[胖胖秦](http://bobao.360.cn/member/contribute?uid=353915284)
- 预估稿费：200 RMB
- 投稿方式：发送邮件至 [linwei#360.cn](mailto:linwei#360.cn)，或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

## 前言
IBM X-Force 安全研究团队在调查一起针对巴西银行的远程恶意软件攻击事件时，发现了一个作为恶意金融软件一部分的反杀毒驱动程序。该恶意软件旨在盗取受害者的银行账户信息。

## 解码反杀毒驱动
在分析未知软件的行为时，通常有两种方法：动态调试（通过执行代码并使用工具如 Sysinternals 和调试器来观察其行为）和静态分析（通过反汇编或反编译来检查代码）。由于时间紧迫，且此驱动程序代码量不大，因此选择了静态分析方法。

### 反汇编
我使用 IDA Pro 打开这个驱动程序进行分析。首先注意到的是函数数量较少，仅有 12 个。虽然字符串查看没有提供太多信息，但导入表显示了一些有用的线索，包括字符串创建、转换及注册表设置功能。这些可能被恶意软件作者隐藏了部分细节，因此需要进一步深入分析。

从入口点 `DriverEntry` 开始，第一个函数与安全 cookie 相关，可忽略。随后多次调用 `sub_4011EA` 函数，每次调用都带有不同参数（范围 1 至 5）。

### 函数调用图
`sub_4011EA` 调用了注册表设置函数。为了更好地理解其操作，将其重命名为 `Write_To_Registry`。利用 Hex-Rays 插件将汇编代码转换为 C 语言代码后，可以更清晰地看到其意图：尝试访问由参数指定的注册表键，并向其中写入值“4”。尽管如此，IDA 对某些变量类型的识别可能存在误差，例如 `ZwOpenKey` 的第一个参数应是指向 HANDLE 的指针而非 Unicode 字符串指针。

### 进一步探索
现在有两个关键问题：
1. `ObjectName` 来自何处？
2. `ValueName` 来自何处？

通过回溯调用链发现，这两个参数均由 `sub_4010EA` 提供。该函数接收两个参数 `a1` 和 `a2`，后者实际上是一个输出参数。`sub_4010EA` 包含一个简单的异或解密循环，确保不会重复解密已处理的数据。

### 二进制 Blob
提取并解密后的二进制数据似乎分为两部分：蓝色部分看起来像二进制数据，而红色部分则可能是加密内容。解密后的缓冲区传递给 `sub_401000` 函数，同时传入 `a1` 参数。返回值最终成为我们感兴趣的 `a2` 输出。

此时，尽管可以通过动态调试获取更多信息，但我决定继续静态分析。`sub_401000` 更加复杂，涉及对输入缓冲区的解析。根据 RC4 加密算法推测，初始化了一个长度为 256 的数组，每个元素等于其索引值，强烈暗示这是 RC4 加密。

### 合理推测
经过修改变量名以匹配 RC4 标准，确定密钥长度为 8 字节。通过遍历 XORed 缓冲区前 8 个字节并与 0x8 异或生成密钥。解密整个缓冲区后，发现了五个指向不同杀毒软件路径的字符串。

### 拼图
结合所有发现，现在可以清楚地看到驱动程序的工作流程：
- `overwrite_AV_reg_service` 函数被调用 5 次，参数范围 1-5。
- 每次调用中，`get_string` 函数从加密缓冲区解密相应参数对应的杀毒软件路径。
- 然后 `set_registry_value` 函数覆写这些路径，阻止杀毒软件加载。

### 结论
系统重启后，由于恶意驱动的存在，相关杀毒软件无法正常启动，从而使得恶意软件得以自由运行。这种高权限下的操作难以防范，展示了静态分析在理解此类威胁中的重要性。希望这篇文章对你有所帮助！