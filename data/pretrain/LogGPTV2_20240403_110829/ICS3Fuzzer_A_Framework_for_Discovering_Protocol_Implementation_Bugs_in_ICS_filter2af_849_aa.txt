# 《ICS3Fuzzer: A Framework for Discovering Protocol Implementation Bugs in ICS
Supervisory Software by Fuzzing》论文笔记
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## abstract+introduction
###  背景
工控网打破了工业物联网中假定的每个系统相互分离的限制，引入的威胁。工控网中的目标主要分为两类：一类是控制控制生产过程的设备，另一类是控制这些设备的监控软件supervisory
software。
###  问题
专注于分析针对PLC设备的supervisory software，特别是寻找其中有关协议实现的漏洞。（攻击面）
###  目前工作及其缺点
目前针对ICS内部的supervisory
software的fuzzing工作较少，并且受限，主要是三个方面：通常是运行在windows上的闭源程序，并且体量较大，严重依赖GUI；通常作为客户端，这对于fuzzer来说不易测试；通常使用专有协议进行通信，并且协议状态是和GUI紧耦合的。
现有fuzzing工作与ICS3fuzzer特性对比图
###  挑战
  1. 闭源、体量大
  2. 与GUI操作紧耦合
  3. 私有协议
###  论文工作
提出了ICS3Fuzzer，ICS Supervisory Software Fuzzer，一个可移植的、模块化的，能够自动化测试supervisory
software的fuzzing框架。
**没有直接分析提取协议实现（因为十分困难），而是直接在同步控制GUI操作以及网络通信的情况下，直接运行和fuzz对应的supervisory
software。**
ICS3Fuzzer是黑盒的，通过自动化地输入专门生成地有效地输入并到达不同的协议状态，来持续地驱动整个过程。并且提出了新的fuzzy策略，倾向于更有可能发生漏洞的状态。测试目标时是结合模拟测试与实际测试的优缺点。
贡献：
  1. 设计实现了ICS3Fuzzer
  2. 提出了新的fuzzing策略
  3. 结果好，并开源
## BACKGROUND AND MOTIVATION
###  ICS Architecture
典型的ICS系统由三层,分别是（1） **Field Instrument Control Layer**
，由传感器（senior）和执行器（actuator）构成，用来进行系统的输入和输出（2） **Process Control Layer**
，由专用嵌入式设备组成，比如PLC/RTU，用来控制实时进程（3） **Supervisory Control Layer**
，由几个工作站组成，用来提供实时监控以及控制系统的设备。
ICS系统的几个显著的特点：
  1. ICS直接与物理世界进行交互，因此其中的安全问题往往会造成更大的危害。
  2. ICS必须可靠并且满足实时约束，必须使用实时操作系统，并且特定领域协议（domain-specific protocols）被用来在上述三层之间进行通信，并且协议往往未被加密。
  3. ICS的网络是air-gaped，即与外部网络隔离，因此其中往往缺少很多安全性措施。但是随着IIOT的发展，这种隔离逐渐被削弱，因此会带来很多问题。
ICS系统中supervisory
software的共同特点为，都提供了用于读可操作变量、开启/停止PLC、下载固件等接口，这些功能在一个指定的信道进行通信，通信数据包含如下内容：
  1. 实时设备状态：sensor reading、feedback of control command exectuion、heartbeat messages
  2. 设备信息：device name、version、model、manufacturer
  3. structured data block: program blocks、memory blocks、 diagnostic files
###  Security Risks Exposed by Supervisory Software
生产系统种涉及OT和IT网络，supervisory
software运行在OT网络种，并且OT网络与IT网络之间存在强大的隔离，但是APT攻击往往能够穿透这层隔离。
####  Assumption
假设攻击者已经控制了ICS北部一台主机，并且能够监控、拦截、修改ICS内部主机之间的通信，即MITM attack。
####  Attack Approaches and Consequences
主要通过两种方式，一种是修改报文，使得Supervisory software 崩溃，另一种是利用Supervisory
software已有逻辑执行恶意命令。
## DESIGN OVERVIEW
###  Movitating Example
下图表示的是supervisory software GX Words2和PLC之间的TCP session，在这个过程中，为了获取网络数据公开了许多
**input states** ，并且在每一个特殊的input state下，supervisory software都在等待一种特定的来自PLC
设备的报文。
我们定义一种session type作为一种 **functionality** ，双向交换报文。functionality是一种supervisory
semantic，例如向PLC中下载程序、开启PLC等等。
####  Key observartion
  1. TCP session的开始往往是一种按钮操作（可理解为人工操作），有人类通过GUI界面完成。
  2. 在session期间，在许多情况还需要额外的按钮操作来完成交互。
  3. session通过周期性的交换heartbeat报文或者停止报文交换来结束此session。
####  New Insight
Supervisory software在不同的interaction states时往往有着不同的行为（code
execution），Supervisory
software的交互状态本质上是与PLC设备进行交互的特定的程序上下文；交互状态取决于几个因素，包括之前的按钮操作、之前的input
states等。Supervisory software的实现与GUI接口是高度耦合的。
###  Challenges
  1. **C1：Guiding the supervisory software to enter a specific input state.**
每个session都涉及了许多input states，为了能够达到针对input states较好的覆盖需要克服三个困难：
**首先** TCP session初始化是由作为client的supervisory software发起的，因此fuzzing
tool需要等待接收supervisory software发起的请求； **其次**
为了fuzz一个特定的输入状态，我们需要使得supervisory多次到达正确的交互状态，这需要同步三种事件，GUI操作、supervisory
software中的代码执行情况、设备的响应。没有设计专门的机制来自动且同步地操控GUI操作以及网络流量，很难做到这一点； **还有**
由于状态之间复杂的依赖关系，很多情况下都需要supervisory
software先到达某个特定状态，然后才能到达目标状态，然而仅仅是识别出相对完整的状态集合已经十分困难。
  1. **C2：Fuzzing proprietary protocols with unknown message frame format and state-space.**
不知道状态空间就无法探索深度的程序路径以及深度的协议状态；不知道报文格式，就无法推断出报文字段值的约束关系，无法高效地生成有意义输入。
  1. **C3：Simulating the session of proprietary protocol.**
对于每个supervisory