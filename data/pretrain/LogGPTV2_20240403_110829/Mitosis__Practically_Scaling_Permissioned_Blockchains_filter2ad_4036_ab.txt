UTXO
account-based
account-based
account-based
✗
✗
✗
✗
✗
✗
✓
✗
✗
✗
✗
✗
✗
✓
✗
✗
✗
✗
✗
✗
✓
to enable a consistent execution of these transactions in a dis-
tributed system. Blockchains are therefore instantiations of total-
order broadcast (a.k.a. consensus) protocols. Their main proper-
ties are expressed in terms of consistency, meaning that the vari-
ous participants agree on the ledger state, and liveness, ensuring
that transactions are included to the local ledgers of participants
relatively quickly. Distributed consensus protocols are designed
to be resilient to a limited number of failures, thereby tolerating
crashes and Byzantine faults respectively.1 Namely, crash-fault and
Byzantine-fault tolerance (CFT, resp. BFT) require consistency and
liveness to hold despite some of the participants being faulty.
Depending on the participation model, blockchains can be cate-
gorized into permissionless, run among anonymous and mutually
untrusted participants, and permissioned, where users have explicit
identities known to everybody at the protocol outset. Permission-
less blockchains provide a relatively weak consistency property: a
transaction is more likely to be stable the deeper it is the ledger. Such
probabilistic guarantee implies a slow confirmation time—about 10
minutes for Bitcoin and 5 minutes for Ethereum—which severely
limits throughput to at most tens of transactions per second (tps) for
Bitcoin and Ethereum. In contrast, permissioned blockchains can
use classical consensus protocols, which offer finality and therefore
provide a much lower latency—popular consensus implementa-
tions can confirm thousands of transactions per second [12]. On the
downside, consensus protocols require a few rounds of interaction
among all participants, requiring high communication complexity
to reach agreement on each block entry (typically O(n2) where n
is the number of participants), which severely hinders scalability.
For instance, increasing the number of consensus nodes from 50
to 100 reduces the throughput from around 1000 to 100 tps.
2.2 Challenges in Scaling Permissioned
Blockchains
Scalability remains the major challenge for the adoption of per-
missioned blockchains in real-world applications. Most existing
solutions, e.g., FastBFT [12] and Hotstuff [24], aim at reducing the
communication complexity. Despite improving performance, all
these solutions still rely on a classical consensus algorithm at their
core, and the effective scalability gain is limited to one order of
magnitude at best (from a few tens to hundreds of nodes). Other
scalability proposals fall in the domain of permissionless systems.
1A Byzantine participant may deviate from the prescribed protocol in arbitrary ways,
and even be controlled by an attacker.
Broadly, these proposals provide “on-chain” (or “layer 1”) solutions
such as sharding and DAG-based protocols [17, 21, 22], that directly
operate on the consensus layer, and “off-chain” (or “layer 2”) solu-
tions, e.g., payment channels [16, 18] and side-chains [4, 11], which
handle the smart-contract layer only. In this work, we focus on
Layer 1 solutions.
Sharding appears as the most promising on-chain method to
improve scalability and performance of blockchain protocols, with
prominent instantiations such as RapidChain [25] and Monox-
ide [23]. These solutions are designed for the permissionless model,
particularly, they assume a UTXO model which does not generalize
beyond cryptocurrency applications. In the context of permissioned
blockchains, Androulaki et al. [2] propose horizontal channels envi-
sioned for Hyperledger Fabric. This proposal however also relies on
the UTXO model, for enabling fast cross-shard transactions, hence
its applicability to Fabric and other permissioned systems is unclear.
Besides, it implements sharding at the smart-contract layer and not
on the consensus layer.
to n−1
2
A sharding proposal built on Fabric is Attested HyperLedger
(AHL) [7]. In AHL, each shard runs an optimized consensus proto-
col based on PBFT [5], requiring consensus nodes to run trusted
hardware to prevent Byzantine nodes from equivocating, thereby
reducing the tolerated faults from n−1
(this is similar to
3
FastBFT [12]). In the same vein, SharPer [1] aims at improving
scalability of sharded permissioned blockchains, however, it dra-
matically limits the number of tolerated faults (e.g., f ≪ n
3 for
Byzantine faults) and leverages this assumption to deterministi-
n
3f +1 shards that provably meet the consensus bound
cally create
(this is analogous to the deterministic assignment scheme we dis-
cuss in Section 3.4). The only solution we are aware of that proposes
a dynamic sharding approach is GearBox, a concurrent and inde-
pendent work by David et al. [8] that leverages the safety-liveness
dichotomy to decrease the shard size while preserving security.
GearBox uses a control chain (which is assumed to be always live)
to monitor the progress of the other shards, and it triggers shard
reconfigurations dynamically whenever a deadlock is detected.
All the aforementioned solutions follow a common theme: they
assume a large, fixed set of nodes and make it scale via sharding.
This entails partitioning the set of nodes into m subsets—where
m is the number of shards—at the protocol onset, and parallelize
transaction processing among the m shards, with the effect of boost-
ing throughput roughly by a factor m. These solutions make the
implicit assumption that all participating nodes are fixed upfront
and keep participating in the consensus throughout the lifetime
775ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Giorgia Azzurra Marson, Sebastien Andreina, Lorenzo Alluminio, Konstantin Munichev, and Ghassan Karame
of the system. Moreover, existing sharding solutions are rigid in
enforcing all shards to be homogeneous, i.e., they run the same
consensus protocol and ensure security under the same conditions.
Some applications may however benefit from a more flexible shard-
ing scheme that allows different shards to run different consensus
protocols, so that each shard can choose the best option given local
conditions. This is particularly true under a dynamic-participation
model, where new participants may join and existing participants
may leave the system. Various works in the permissionless model
recognise that dynamic participation is desirable in practice. How-
ever, to the best of our knowledge, existing sharding solutions do
not offer support for dynamic participation. Under a dynamic par-
ticipation model, it is not clear a priori how to shard, and when,
in order to ensure optimal throughput. Existing sharding systems
instead assume that these optimal conditions are known at ini-
tialization time. We believe these limitations may challenge the
adoption of sharding in practice.
Ideally, a truly scalable system should be able to dynamically
adapt to external conditions, triggering sharding under high partic-
ipation, and being able to merge shards in case of low participation.
To the best of our knowledge, currently there is no solution for
permissioned blockchains that can reactively self-organize to meet
optimal performance.
3 MITOSIS: OVERVIEW AND DESIGN
In this section we present Mitosis, our proposal to realize a se-
cure, scalable, and flexible system of autonomous and interoperable
blockchains. Our goal is to design an effective approach to miti-
gate the scalability challenges in permissioned blockchains (cf. Sec-
tion 2). Mitosis can be instantiated within existing permissioned
blockchain frameworks with minimal modifications, as we discuss
in Section 5 and show empirically in Section 4.
3.1 System Model and Assumptions
We assume the standard blockchain communication model where
users communicate with each other over a partially synchronous
network. We consider a permission-based model, where explicit
registration is required for becoming a member of the system. Con-
forming with most existing permissioned blockchains, users can
have the following roles: Clients, or regular users, utilize the service
provided by the blockchain. They submit requests in the form of
transactions (e.g., a trading request in financial applications). Val-
idators, or blockchain nodes, verify the clients’ transactions and
commit them to the blockchain, so that the corresponding requests
are processed. For the sake of abstraction, we assume a membership
service maintaining members’ information in a dedicated registry,
so that members can retrieve information on-demand. The registry
provides a means to identify members among each others, and
acts as a discovery mechanism for new members. Upon registering,
a user u obtains an account Au linking the user’s identity u, the
corresponding public key pku, and possibly additional information
about the user, depending on the application.
3.2 Overview of Mitosis
In Mitosis, we envision a blockchain ecosystem with multiple
blockchains running autonomously. Each chain C comprises a set
of users UC sharing a given business logic. The clients of a chain C
issue transactions, which are included to the transaction ledger LC—
distributed across blockchain nodes. The ledger is an ordered se-
quence of transactions, agreed upon by the validators running a
dedicated consensus protocol. We denote by VC ⊆ UC the valida-
tor set of chain C. In the rest of the paper, we refer to the size of
the validators set, denoted by |VC|, as the size of chain C. Every
validator v ∈ VC is expected to store its own local copy LC,v of the
ledger, and to participate in the consensus protocol for extending
the ledger with new transactions.
Each chain in Mitosis can adopt its own consensus protocol re-
gardless of the choice of other chains, operating as an autonomous
system. Different blockchains can however interact with each other,
e.g., to transfer assets across different chains. Interoperability among
the various chains is enabled through dedicated functionalities that
let a chain read from, or (conditionally) write to, the state of an-
other chain. Our system allows blockchains to form and evolve
dynamically as new members join the system.
At the core of Mitosis is a mechanism that lets the various
blockchains to self-organize and dynamically create new sibling
chains, as the need comes. Essentially, an existing blockchain may
trigger the division of itself in order to increase throughput by par-
allelising the processing of transactions. In contrast to blockchain
sharding, where “parallel processing” translates to the various
shards splitting the load of transaction processing under the same
consensus, our solution can be seen as a way to realize fully au-
tonomous shards which operate independently of each other and
possibly under different consensus protocols. Moreover, our sys-
tem triggers chain division dynamically and only for those chains
experiencing a performance congestion, therefore offering higher
flexibility. In Figure 1 we provide a high-level illustration of how
(the set of validators of) the blockchains in our system evolve, as
new participants join, compared to blockchain sharding. Mitosis
enables parallelising the processing of transactions, as in sharding,
while also keeping the size of each shard small (in our case, a “shard”
consists of an autonomous permissioned blockchain).
Here, the main obstacle to keeping the shard size small when
splitting is to prevent faulty nodes from concentrating in one shard,
as this may lead to a violation of the consensus bounds. This is
the main challenge that all sharding systems need to overcome. To
do so, existing sharding techniques refresh all shards periodically,
running dedicated reconfiguration protocols. In contrast, Mitosis
triggers chain division recursively, creating two sibling chains at a
time, and a new division is triggered only once a given chain has
become sufficiently large (cf. Figure 1). Crucially, a chain becomes
“sufficiently large” by extending its set of nodes, roughly doubling in
size, and the newly added nodes have the effect of re-balancing the
faulty ratio, thereby ensuring that division does not compromise
robustness. More specifically, the new nodes who join the system
are faulty according to a given ratio f
n —strictly below the threshold
tolerated by the consensus protocols adopted in the chains. There-
fore, even if one chain-splitting operation led to the creation of a
“more faulty” chain, i.e., with a faulty ratio slightly above f
n (which
can happen with a small probability), doubling the size of such
chain by adding new nodes pushes the ratio “back” to f
n .
776Mitosis: Practically Scaling Permissioned Blockchains
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 1: Evolution of the validator sets in the case of Mitosis (left) and standard sharding solutions (right). Solid bullets
indicate existing nodes while and empty bullets denote newly joining nodes.
We proceed with describing the various routines to create and
evolve chains in our system in Section 3.3. In Section 3.5, we also dis-
cuss how to enable cross-chain communications among the various
chains in the system.
3.3 Chain Management
Chain creation. This process enables the creation of a blockchain
“from scratch” (in contrast to creating it via chain division, which
we describe later). It requires setup among a set of users to es-
tablish the configuration of a new blockchain, which include: a
unique identifier C for the chain, a set of validators VC, the spec-
ification of a consensus protocol ΠC, a set CC of clients (where
UC = CC ∪ VC provides all users in S), and the initial distribution
of assets A[u]u∈US among users in C. As Mitosis is application-
agnostic, we abstract away this phase and declare a chain C to be
created upon request of the relevant (registered) validators in VC.