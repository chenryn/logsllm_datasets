```
#### 正则过滤拦截器
这个拦截器会把Event的body当做字符串来处理，并用配置的正则表达式来匹配。可以配置指定被匹配到的Event丢弃还是没被匹配到的Event丢弃。
  属性            默认值    解释
  --------------- --------- -------------------------------------------------------------------------------------
  **type**        \--       组件类型，这个是： `regex_filter`
  regex           \".\*\"   用于匹配Event内容的正则表达式
  excludeEvents   false     如果为true，被正则匹配到的Event会被丢弃；如果为false，不被正则匹配到的Event会被丢弃
#### 正则提取拦截器
这个拦截器会使用正则表达式从Event内容体中获取一组值并与配置的key组成n个键值对，然后放入Event的header中，Event的body不会有任何更改。它还支持插件化的方式配置序列化器来格式化从Event
body中提取到的值。
  属性                          默认值    解释
  ----------------------------- --------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **type**                      \--       组件类型，这个是： `regex_extractor`
  **regex**                     \--       用于匹配Event内容的正则表达式
  **serializers**               \--       被正则匹配到的一组值被逐个添加到header中所使用的key的名字列表，多个用空格分隔 Flume提供了两个内置的序列化器，分别是： *org.apache.flume.interceptor.RegexExtractorInterceptorPassThroughSerializer* *org.apache.flume.interceptor.RegexExtractorInterceptorMillisSerializer*
  serializers.\.type       default   可选值： 1：`default` (default其实就是这个：\*org.apache.flume.interceptor.RegexExtractorInterceptorPassThroughSerializer\*)； 2：`org.apache.flume.interceptor.RegexExtractorInterceptorMillisSerializer`； 3：自定义序列化器的全限定类名（自定义序列化器需要实现 *org.apache.flume.interceptor.RegexExtractorInterceptorSerializer* 接口）
  serializers.\.**name**   \--       指定即将放入header的key，也就是最终写入到header中键值对的key
  serializers.\*                \--       序列化器的一些属性
序列化器是用来格式化匹配到的那些字符串后再与配置的key组装成键值对放入header，默认情况下你只需要制定这些key就行了，Flume默认会使用
`org.apache.flume.interceptor.RegexExtractorInterceptorPassThroughSerializer`
这个序列化器，这个序列化器只是简单地将提取到的字符串与配置的key映射组装起来。当然也可以配置一个自定义的序列化器，以任意你需要的格式来格式化这些值。
#### 例子 1：
假设Event body中包含这个字符串"1:2:3.4foobar5"
``` properties
a1.sources.r1.interceptors.i1.regex = (\\d):(\\d):(\\d)
a1.sources.r1.interceptors.i1.serializers = s1 s2 s3
a1.sources.r1.interceptors.i1.serializers.s1.name = one
a1.sources.r1.interceptors.i1.serializers.s2.name = two
a1.sources.r1.interceptors.i1.serializers.s3.name = three
```
经过这个拦截器后，此时Event：
``` properties
body: 不变 header增加3个属性: one=>1, two=>2, three=3
```
将上面的例子变动一下
``` properties
a1.sources.r1.interceptors.i1.regex = (\\d):(\\d):(\\d)
a1.sources.r1.interceptors.i1.serializers = s1 s2
a1.sources.r1.interceptors.i1.serializers.s1.name = one
a1.sources.r1.interceptors.i1.serializers.s2.name = two
```
执行这个拦截器后，此时Event：
``` properties
body: 不变 header增加3个属性: one=>1, two=>2
```
#### 例子 2：
假设Event body中的某些行包含2012-10-18
18:47:57,614格式的时间戳，运行下面的拦截器
``` properties
a1.sources.r1.interceptors.i1.regex = ^(?:\\n)?(\\d\\d\\d\\d-\\d\\d-\\d\\d\\s\\d\\d:\\d\\d)
a1.sources.r1.interceptors.i1.serializers = s1
a1.sources.r1.interceptors.i1.serializers.s1.type = org.apache.flume.interceptor.RegexExtractorInterceptorMillisSerializer
a1.sources.r1.interceptors.i1.serializers.s1.name = timestamp
a1.sources.r1.interceptors.i1.serializers.s1.pattern = yyyy-MM-dd HH:mm
```
运行拦截器后，此时Event：
``` properties
body不变，header中增加一个新属性：timestamp=>1350611220000
```
### 自动重载配置
  属性                        默认值   解释
  --------------------------- -------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  flume.called.from.service   \--      如果设定了这个参数，Agent启动时会轮询地寻找配置文件，即使在预期的位置没有找到配置文件。 如果没有设定这个参数，如果flume Agent在预期的位置没有找到配置文件的话会立即停止。设定这个参数使用的时候无需设定具体的值， 像这样：`-Dflume.called.from.service` 就可以了。
#### Property: flume.called.from.service
Flume每隔30秒轮询扫描一次指定配置文件的变动。如果首次扫描现有文件或者上次轮询时的文件“修改时间”发生了变动，Flume
Agent就会重新加载新的配置内容。重命名或者移动文件不会更改配置文件的“修改时间”。
当Flume轮询一个不存在的配置文件时，有以下两种情况：
1.  当第一次轮询就不存在配置文件时，会根据flume.called.from.service的属性执行操作。如果设定了这个属性，则继续轮询（固定的时间间隔，30秒轮询一次）；如果未设置这个属性，则Agent会立即终止。
2.  当轮询到一个不存在的配置文件并且不是第一次轮询（也就是说之前轮询的时候有配置文件，但是现在中途没有了），Agent会继续轮询不会停止运行。
## 配置文件过滤器
::: hint
::: title
Hint
:::
本小节是flume1.9新增，英文名称叫Configuration
Filters，感觉翻译成【配置过滤器】不太直观，其实它就是个动态替换配置文件中的占位符，类似于Maven的profile，Spring等各种java框架里面到处都是这种用法。
可以认为这个新特性就是之前
[在配置文件里面自定义环境变量](#在配置文件里面自定义环境变量)
的加强版，下面这个配置模板看起来很绕，直接看后面例子就容易理解多了。总共有三种用法，第一种是把要替换的内容放在环境变量中（这与之前完全一样），
第二种是通过执行外部脚本或者命令来动态取值，第三种是将敏感内容存储在Hadoop
CredentialProvider。
:::
Flume提供了一个动态加载配置的功能，用来把那些敏感的数据（比如密码）、或者需要动态获取的信息加载到配置文件中，编写配置文件的时候用类似于EL表达式的\${key}占位即可。
### 用法
具体使用的格式跟EL表达式很像，但是它现在仅仅是像，并不是一个完整的EL表达式解析器。
``` properties
.configfilters = 
.configfilters..type = 
.sources..parameter = ${['']}
.sinks..parameter = ${['']}
...parameter = ${['']}
#or
...parameter = ${[""]}
#or
...parameter = ${[]}
#or
...parameter = some_constant_data${[]}
```
### 配到环境变量
  属性 默认值         解释
  ------------- ----- ----------------------------
  **type**      \--   组件类型，这里只能填 `env`
#### 例子1
这是一个在配置文件中隐藏密码的例子，密码配置在了环境变量中。
``` properties
a1.sources = r1
a1.channels = c1
a1.configfilters = f1            # 这里给配置加载器命名为f1
a1.configfilters.f1.type = env   # 将配置加载器f1的类型设置为env，表示从环境变量读取参数
a1.sources.r1.channels =  c1
a1.sources.r1.type = http
a1.sources.r1.keystorePassword = ${f1['my_keystore_password']} # 启动Flume时如果配置了my_keystore_password=Secret123，这里就能读取到密码了
```
这里 `a1.sources.r1.keystorePassword`
的值就会从环境变量里面获取了，在环境变量里面配置这个my_keystore_password的一种方法就是配置在启动命令前，像下面这样：
`$ my_keystore_password=Secret123 bin/flume-ng agent --conf conf --conf-file example.conf ...`
### 从外部命令获取
  属性          默认值   解释
  ------------- -------- -----------------------------------------------------------------------------------------------------------------------------------------
  **type**      \--      组件类型，这里只能填 `external`
  **command**   \--      将要执行的用于获取键值的命令或脚本。这个命令会以这种命令格式调用 ` ` ，它期望的返回结果是个单行数值并且该脚本最后exit 0。
  charset       UTF-8    返回字符串的编码
#### 例子2
这又是一个在配置文件中隐藏密码的例子，这次密码放在了外部脚本中。
``` properties
a1.sources = r1
a1.channels = c1
a1.configfilters = f1
a1.configfilters.f1.type = external
a1.configfilters.f1.command = /usr/bin/passwordResolver.sh   # 外部脚本的绝对路径
a1.configfilters.f1.charset = UTF-8
a1.sources.r1.channels =  c1
a1.sources.r1.type = http
a1.sources.r1.keystorePassword = ${f1['my_keystore_password']} # 用这种类似于EL表达式取值
```
在这个例子里面，flume实际执行的是下面这个命令来取值
`$ /usr/bin/passwordResolver.sh my_keystore_password`
这个脚本 `passwordResolver.sh` return了一个密码，假设是 `Secret123`
并且exit code 是0。
#### 例子3
这个例子是通过外部脚本动态生成本地存储event的文件夹路径。
::: hint
::: title
Hint
:::
与上一个例子的使用的配置方式完全相同，其实就是一个配置方式的两种实际应用。这个例子用到了前面的
[File Roll Sink](#file-roll-sink)
，这个sink会把event全部存储在本地文件系统中，而本地存储的目录生成规则使用了这个新特性。
:::
``` properties
a1.sources = r1
a1.channels = c1
a1.configfilters = f1
a1.configfilters.f1.type = external
a1.configfilters.f1.command = /usr/bin/generateUniqId.sh
a1.configfilters.f1.charset = UTF-8
a1.sinks = k1
a1.sinks.k1.type = file_roll
a1.sinks.k1.channel = c1
a1.sinks.k1.sink.directory = /var/log/flume/agent_${f1['agent_name']} # will be /var/log/flume/agent_1234
```
同上一个例子一样，flume实际执行的是下面这个命令来取值
`$ /usr/bin/generateUniqId.sh agent_name`
这个脚本 `generateUniqId.sh` return了一个值，假设是 `1234` 并且exit code
是0。
### 使用Hadoop CredentialProvider存储配置信息
使用这种配置方法需要将2.6版本以上的hadoop-common库放到classpath中，如果已经安装了hadoop就不必了，agent会自动把它加到classpath。
  属性 默认值                                            解释
  ------------------------------------------------ ----- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **type**                                         \--   组件类型，这里只能填 `hadoop`
  **credential.provider.path**                     \--   provider的路径，参考hadoop的文档： 
  credstore.java-keystore-provider.password-file   \--   存储CredentialProvider密码的文件名。这个文件必须在classpath下，CredentialProvider的密码可以通过HADOOP_CREDSTORE_PASSWORD环境变量来指定。
#### 例子
通过Hadoop CredentialProvider来实现flume配置文件中隐藏密码
``` properties
a1.sources = r1
a1.channels = c1
a1.configfilters = f1
a1.configfilters.f1.type = hadoop
a1.configfilters.f1.credential.provider.path = jceks://file/
a1.sources.r1.channels =  c1
a1.sources.r1.type = http
a1.sources.r1.keystorePassword = ${f1['my_keystore_password']} #从hadoop credential获取密码的内容
```