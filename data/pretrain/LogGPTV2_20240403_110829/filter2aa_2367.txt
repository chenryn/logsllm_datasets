# Patience and Learning
```
i'm learning a lesson called patience.
can't wait 'til i have it all learned.
- “walk on water”
```

# Fun with Symbolics
## Symbolic Analysis in Pure Python

### 0x0001 – Who Am I?
- Jesus dude
- Husband
- Father
- Hobby farmer
- Biker
- Atlas of Doom
- RE (Reverse Engineering)
- VR (Virtual Reality)
- HW (Hardware)
- FW (Firmware)
- Radio
- Cars/Medical Devices/Smart Meters/Embedded Systems
- Vivisect/envi/symboliks
- PI:EMAIL

### 0x0100 – Symbolics - What's the Deal?
- Part of Vivisect, invisigoth's binary analysis framework
- **Symbolic Analysis**: Based on threads of execution
- **Symbolic Emulation**: Granular control of symbolic analysis
- Written in pure Python

### 0x0200 – Introduction to Vivisect
- Binary analysis framework
- Written in pure Python
- VDB debugger
- Emulators
- GUI (Gooey)
- Symbolic analysis
- Extensible
- Scalpals
- Interactive Python
- Scripting
- Client/Server model collaboration
- Peer-to-peer model collaboration

### 0x0210 – Introduction to Vivisect (Part 2)
- Analyzing and viewing workspace
```bash
$ vivbin -B stage3
Failed to find file for 0x0804a1a4 (__bss_start) (and filelocal == True!)
Failed to find file for 0x0804a1a4 (_edata) (and filelocal == True!)
Loaded (0.0296 sec) stage3
ANALYSIS TIME: 0.277778863907
stats: {'functions': 67, 'relocations': 0}
Saving workspace: stage3.viv
$ vivbin stage3.viv
```

### 0x0220 – Viv/stage3
- Do you see the vulnerability?

### 0x0230 – Viv/stage3 Vulnerability
- Look again...

### 0x0210 – Introduction to Vivisect (Part 2)
- Written in pure Python
```python
$ ipython
In [1]: import vivisect.cli as vivcli
In [2]: vw = vivcli.VivCli()
In [3]: vw.loadFromFile('stage3')
Failed to find file for 0x0804a1a4 (__bss_start) (and filelocal == True!)
Failed to find file for 0x0804a1a4 (_edata) (and filelocal == True!)
Out[3]: 'stage3'
In [4]: vw.analyze()
In [5]: vw.saveWorkspace()
```

### 0x0300 – Introduction to Symbolics
- ENVI disassembler, emulator, symbolics
- Drag 'symbolic info' through emulation of each opcode
- At each point, 'symbolic state' in terms of start of trace
- Example:
  ```assembly
  push ebp
  mov ebp, esp
  ```
  Becomes:
  ```python
  esp = 0xbfbfeffc
  [ 0xbfbfeffc : 4 ] = ebp
  ebp = 0xbfbfeffc
  ```

### 0x0400 – Introduction to Graph Theory
- "Your graph just shit on my theory!"
- Imagine code blocks as nodes in a directed graph
  - Connected by directed edges
- Using traditional graph theory, paths (threads) of execution can be generated
  - Using symbolics, provably impossible paths are culled
- Please hold for gratuitous visual ugliness

### 0x0410 – Graph Theory Primer
- This is a simple function
- Look familiar?
- Pathing starts at some point in the graph, and follows edges in the proper direction
- Much to this, but simple for now
  - Looping and the halting problem

### 0x0420 – Graph Theory
- What you can't see is the `childrqst()` handler from `stage3`
- In most cases, Viv's and IDA's graph view represent a code graph... but not always
  - Calls aren't followed
  - Conditional instructions
- ARM
  - `cmpxchg`
  - `cmov*`

### 0x0500 – Basics of Symbolics
- Symbolic state tracking and expressions
  - `edi + 5`
  - `Mem((esp-4)+0x1500, 4)`
- Simple symbolic effects
  - `ReadMemory( (esp-4)+0x1500, 4 )`
  - `WriteMemory( (esp-4)+0x1500, 4, Var(ebx, 4) )`
  - `SetVariable( eax, Const(4, 4) )`
- Symbolic constraints
  - `ConstrainPath( va, nextva, ne( Var('eax'), Const(4, 4), 4))`

### 0x0510 – Basics of Symbolics (Pretty)
- Verbose (repr):
  ```python
  ConstrainPath( 0x08049867, Const(0x08049869,4), 
  ne(Call(Const(0x08048d08,4),4, argsyms=[]),Const(0x00000000,4)) )
  ConstrainPath( 0x08049888, Const(0x0804988a,4), 
  ne(Call(Const(0x08048d08,4),4, argsyms=[]),Const(0x00000000,4)) )
  ```
- Pretty (str):
  ```python
  if (0x08048d08() != 0)
  if (0x08048d08() != 0)
  ```

### 0x0520 – Basics of Symbolics (Pretty)
- Verbose (repr):
  ```python
  SetVariable(0x080498b3, 'eax', Const(0x00000001,4))
  SetVariable(0x080498b8, 'esp', o_sub(Const(0xbfbff000,4),Const(0x00000004,4),4))
  SetVariable(0x080498b8, 'ebp', Var("ebp", width=4))
  SetVariable(0x080498b8, 'esp', 
  o_add(o_sub(Const(0xbfbff000,4),Const(0x00000004,4),4),Const(0x00000004,4),4))
  SetVariable(0x080498b9, 'eip', 
  Mem(o_add(o_sub(Const(0xbfbff000,4),Const(0x00000004,4),4),Const(0x00000004,4),4)
  , Const(0x00000004,4)))
  SetVariable(0x080498b9, 'esp', 
  o_add(o_add(o_sub(Const(0xbfbff000,4),Const(0x00000004,4),4),Const(0x00000004,4),
  4),Const(0x00000004,4),4))
  ```
- Pretty (str):
  ```python
  eax = 1
  esp = (0xbfbff000 - 4)
  ebp = ebp
  esp = ((0xbfbff000 - 4) + 4)
  eip = mem[((0xbfbff000 - 4) + 4):4]
  esp = (((0xbfbff000 - 4) + 4) + 4)
  ```

### 0x0530 – Symbolic Effects (Simple/Applied)
- Simple effects:
  ```python
  esp = (esp - 4)
  [ esp : 4 ] = ebp'
  ebp = esp'
  esp = (esp - 1064)'
  edx = (ebp - 1048)'
  eax = 1024'
  ```
- Applied effects (run through SymbolikEmulator):
  ```python
  esp = (esp - 4)
  [ (esp - 4) : 4 ] = ebp
  ebp = (esp - 4)
  esp = ((esp - 4) - 1064)
  edx = ((esp - 4) - 1048)
  eax = 1024
  ```

### 0x0540 – Symbolics Explained
- Disassemble an opcode
  ```python
  op = vw.parseOpcode(va)
  ```
- Translate opcode into "Simple Effects"
  ```python
  xlater.translateOpcode(op)
  ```
- Run simple effects through emulator
  ```python
  apleffs = emu.applyEffects(xlater.getEffects())
  ```
- `apleffs` now is a list of "Applied Effects"
- Emulator now has updated state for memory and symbolic variables that have been affected
- Emulator and `apleffs` are now both full of data to be analyzed
- Basically architecture independent (except symbolic variable names)

### 0x0548 – Symbolics Explained
- Python classes
  - With children
- Think RPN: `o_add(Var('ebx', 4), Const(15, 4), 4)`
- Random 4's are "width" data
- Primitives (subclasses of SymbolikBase)
  - `Const`
  - `Var`
  - `Mem`
  - `Call`
  - `Arg`
  - `cnot`
  - `Operator`

### 0x0550 – Symbolics Explained
- Operator (added to symbolic state through Python magic)
  - `o_add` applied using `SymbolikBase.__add__()` and `. __iadd__()`
  - `o_sub` ...
  - `o_xor`
  - `o_and`
  - `o_or`
  - `o_mul`
  - `o_div`
  - `o_mod`
  - `o_lshift`
  - `o_rshift`
  - `o_pow`
  - `o_sextend`

### 0x0560 – Symbolics Explained
- Effects (subclasses of SymbolikEffect)
  - `SetVariable`
  - `ReadMemory`
  - `WriteMemory`
  - `CallFunction`
  - `ConstrainPath`
- Constraints (subclasses of Constraint)
  - `eq`
  - `ne`
  - `gt`
  - `lt`
  - `ge`
  - `le`
  - `UNK`
  - `NOTUNK`

### 0x0600 – Deeper into Symbolics
- Reduce
- Solve
- Update
- Substitution
- Reducers

### 0x0610 – Deeper Symbolics (Reduced)
- Applied effects (run through SymbolikEmulator)
  ```python
  esp = (esp - 4)
  [ (esp - 4) : 4 ] = ebp
  ebp = (esp - 4)
  esp = ((esp - 4) - 1064)
  edx = ((esp - 4) - 1048)
  eax = 1024
  ```
- Reduced applied effects (`symstate.reduce()`)
  ```python
  esp = (esp - 4)
  [ (esp - 4) : 4 ] = ebp
  ebp = (esp - 4)
  esp = (esp - 1068)
  edx = (esp - 1052)
  eax = 1024
  ```

### 0x0620 – Reduced Deshmooshed. So What!
- Applied effects (run through SymbolikEmulator)
  ```python
  [ (((((((((((((((((((((((((((((esp - 4) - 1064) - 4) - 1064) - 4) - 4) - 4) - 4) + 16) - 12) - 4) + 16) - 4) - 4) - 4) - 4) + 16) - 4) - 4) - 4) - 4) + 16) - 4) - 4) - 4) - 4) + 16) - 12) - 4) : 4 ] = ((((esp - 4) - 1064) - 4) - 1048)
  ```
- Simple, right?
- Reduced applied effects (`symstate.reduce()`)
  ```python
  [ (esp - 2152) : 4 ] = (esp - 2120)
  ```

### 0x0630 – Solve
- Symbolic expressions are either discrete or not
  - `symobj.isDiscrete()`
- If discrete, symbolic expressions can be solved completely
  ```python
  In [50]: o_add(Const(8,4), Const(15,4), 4).solve()
  Out[50]: 23
  ```
- If not discrete, symbolic expressions can be compared...
  - `solve()` walks through the expression tree and replaces each "unknown" object with some hash of its `repr()`

### 0x0640 – Solve
- Example: `Var._solve()`

### 0x0650 – Update
- Using certain emulator state and variable values
  - Get new updated symbolic state
  - Which can often reduce a lot easier to more actionable stuff

### 0x0660 – Substitution
- Many might consider this the "solve" function, where you can provide ranges and sets of inputs to a symbolic state
- `vivisect.symboliks.substitution`
  - `sset()`
  - `srange()`

### 0x0660 – Substitution
- Example: (from switch case analysis)

### 0x0670 – Reducers

### 0x0680 – Easter Egg: Archind
- Library to make symbolic state more architecture independent
  - Useful for comparing functions
  - Comparing architecture-independent symbolic state
    - Inputs
    - Outputs
    - More at some later date...

### 0x0700 – Why Do We Care About This? Nerd
- RE / VR ~= pattern matching
- But
- RE / VR != pattern matching...
- RE == Identifying Behavior
- VR == Behavior Hunting
- So, we're hunting fat juicy behaviors?
  - EXACTLY

### 0x0710 – Case Study: ROP Gadgets
- ROP gadgets are specialized behaviors ending in a transfer of execution
- ROP gadgets often have unintended side effects
- Symbolics can be used to trace effects in order to identify behaviors
  - E.g., Register Traversal

### 0x0720 – Register Traversal ROP

### 0x0730 – More to Think About

### 0x0740 – Case Study: Switch Case Analysis
- How do we tell the computer to do what we do in our magical portable computer^H^H^H^H^H^H^H^Hbrain
  - Start at JMP REG
  - Backup just enough to figure out the index register and any base register (which points to the start of the module)
  - Now, backup to the start of the function
  - Trace through to the JMP REG
  - Look through effects for constraints/o_sub to index register
    - Bounding the valid indexes for this switch case component
  - Identify the symbolic state of REG (from JMP REG)
  - Use substitution to ratchet through valid indexes to see where each index jumps to
  - Wrack and stack

### 0x0750 – Case Study: 0-day
- Wide wide wide wide array of options
  - Much opportunity for the enterprising young soul
- Two primary approaches to symbolic bug hunting:
  - Targeted
    - More efficient
    - More coding for more edge cases
  - Directed bruting
    - Less efficient
    - Easier to code the checks
- How might we identify the vulnerability from `stage3`?

### 0x0760 – Case Study: Viv/stage3 Vulnerability
- Look again...
- Call to `read(arg0, input_buffer, 2047)`
  - Limits our input to 2047
  - `input_buffer` is big enough
- Call to `sscanf(input_buffer, "bacon:%s\x00", 0xbfbfebcc)`
- `0xbfbfebe4` is 1052 bytes from the top of the stack (RET)
- 1052 – 2047 = -995

### 0x0760 – Case Study: 0-day
- To take this approach, the following information is important:
  - Buffer tracking
  - Buffer and input/control limitations
  - Functions which help bound these intelligently
- At the end of the day, we're trying to teach the computer to do what we do intuitively
- Other approaches use more brutish efforts
- Both are good, combined is better

### 0x-001 – For Your Playtime...
```python
import vivisect.cli as vivcli
vw = vivcli.VivCli()
vw.loadFromFile("some_poor_bin.exe")
vw.verbose = 1
vw.analyze()

or...

vw.loadWorkspace("some_poor_bin.exe.viv")
import vivisect.symboliks.analysis as vs_anal
sctx = vs_anal.getSymbolikAnalysisContext(vw)
graph = sctx.getSymbolikGraph(func_va)
spaths = sctx.getSymbolikPaths(func_va)
symemu, symeffs = spaths.next()
symeffs
# play around with this. inspect! learn! play! WIN!
```

### Resources
- [Vivisect GitHub](https://github.com/vivisect/vivisect)
- [Atlas' Fork of Vivisect](https://github.com/atlas0fd00m/vivisect) (often includes extras not yet merged)