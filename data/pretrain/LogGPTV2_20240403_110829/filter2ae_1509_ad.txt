        extract($_GET);
        if(isset($sign)){
            $file = trim(file_get_contents($filename));
            if($sign === $file){
                echo 'Congratulation!';
                echo file_get_contents($$falg);
            }
            else{
                echo 'don`t give up';
            }
        }
    ?>
简单的变量覆盖，尝试构造获取flag
## Babyt2
首先在登陆页面，发现提示，访问得到数据库结构：
Sql injection
既然给出了数据库，应该与sql注入有关，首先尝试正常功能，发现功能有 注册，登陆，上传文件，读取你上传的文件，然后开始尝试注入，在文件名出发现存在注入。  
猜测sql语句为：update users set filepath = '' where id = 1；  
于是构造利用，发现可以篡改其他用户，或者自己的filepath实现任意文件读取  
构造如下：  
Update users set filepath = ‘123’,filepath=’456’ where id =2 --1 ‘where id =1  
这样就可以修改掉我们自己的filepath的值，然后尝试读一下文件。  
任意文件读取  
首先尝试读取 /etc/passwd:
然后点击导航栏show  
抓包，发现读取成功。
读取源码  
没有办法直接getshell，因此尝试读一下源码，但是发现不是默认路径，因此先读一下apache2的默认主机配置。  
fuzz了一下，找到了配置文件为：`/etc/apache2/sites-available/000-default.conf`  
读取如下：
然后读源码  
file_get_contents 反序列化  
在逻辑代码中，发现使用了file_get_contents ：
但是现在并没有一个可用的类，于是想到整个框架是使用了yii2 ，所以尝试读取composer.json 文件，查看是否有有漏洞的组件：
构造反序列化文件  
在composer.json，里面发现了低版本的组件 guzzle，于是在phpggc中尝试查找有关反序列化漏洞利用,发现可以任意文件写入。
采用phpggc生成payload，但是这里没有什么可用的文件夹，去找了一下，发现了一个yii框架默认存储静态文件的文件夹，assets。  
写脚本生成文件：
然后通过composer本地搭建虚拟环境，在vender文件夹中运行php，生成exploit.phar  
getshell  
将后缀改成txt，上传到uploads目录，然后通过注入，修改filepath为phar:///var/www/html/You_Cant_Gu3ss/uploads/1.txt
，点击show触发payload  
采用老套路bypass：  
compress.zlib://phar:///var/www/html/You_Cant_Gu3ss/uploads/1.txt/shell.php
执行生成的shell为：/var/www/html/You_Cant_Gu3ss/web/assets/a.php?a=ls  
获取flag 通过shell查找到根目录flag 为fffffffffffffffff1sHere
# Misc
## Quotes
统计空格间的字符个数
    import string
    l1="My+mission+in+life+is+not+mer ely+to+survive+but to+thrive+and+to+do+so+w ith+s  ome+pass i on+some+compass ion+so me+humor+and+some+style".split(' ')
    l2 = [len(i) - i.count('+') for i in l1]
    cs = [string.ascii_lowercase[i-1] if i > 0 else ' ' for i in l2]
    print(''.join(cs)) # flag
## Traffic Light
题目是一个Gif文件，明显看到红绿交替闪烁，8次之后会有一次黄灯闪烁，于是想到01编码，黄灯是分割。  
先把gif每一帧都提取出来，用python的PIL库可以方便提取
    from PIL import Image
    import os
    gifFile = 'Traffic_Light.gif'
    im = Image.open(gifFile)
    pngDir = gifFile[:-4]
    os.mkdir(pngDir)
    try:
        while True:
            current = im.tell()
            im.save(pngDir + '/' + str(current) + '.png')
            im.seek(current + 1)
    except EOFError:
    pass
为了之后更好的识别颜色，顺便做一个剪切
    def cut(idx):
        fileName = './Traffic_Light/' + str(idx) + '.png'
        im = Image.open(fileName)
        x = 90
        y = 30
        w = 45
        h = 140
        region = im.crop((x, y, x+w, y+h))
        newFileName ='./Traffic_Light/' + str(idx) + '_modify.png'
        region.save(newFileName)
可以得到这样的图像
由于颜色比较简单，可以直接用识别图片主色调来进行颜色的区分，识别颜色，分别对应01分隔符。
    def get_dominant_color(idx):
        fileName = './Traffic_Light/' + str(idx) + '_modify.png'
        image = Image.open(fileName)
        image = image.convert('RGBA')
        image.thumbnail((200, 200))
        max_score = 0
        dominant_color = 0
        for count, (r, g, b, a) in image.getcolors(image.size[0] * image.size[1]):
            # 跳过纯黑色
            if a == 0:
                continue
            saturation = colorsys.rgb_to_hsv(r / 255.0, g / 255.0, b / 255.0)[1]
            y = min(abs(r * 2104 + g * 4130 + b * 802 + 4096 + 131072) >> 13, 235)
            y = (y - 16.0) / (235 - 16)
            # 忽略高亮色
            if y > 0.9:
                continue
            score = (saturation + 0.1) * count
            if score > max_score:
                max_score = score
                dominant_color = (r, g, b)
        #print r, g, b
        if r == 61 :
            #print 'green'
            return 'green'
        elif r == 103:
            #print "red"
            return 'red'
        elif r == 255:
            #print "===================== split ========================"
            return 'yellow'
最后把01串转为可见字符
## GreatWall
用stegsolve打开图片，发现rgb的lsb里都有点东西，顺序改成bgr发现了jpg的头，于是提取出来，删掉前几个没用的byte，打开图片，发现一堆长短杠和+。猜测+是分隔符，长短杠分别是二进制的1和0，转换一下果然得到flag：
    l=['1010011','1110100','110011','1100111','110100','1101110','110000','1100111','1110010','110100','1110000','1101000','1111001','1011111','110001','1110011','1011111','110001','1101110','1110100','110011','1110010','110011','1110011','1110100','110001','1101110','1100111']
    s=''
    for i in l:
        s+=chr((int(i,2)))
    #St3g4n0gr4phy_1s_1nt3r3st1ng
# Re
## Bad Block
首先patch掉两个反调函数，然后后面一堆block、god
block什么的逻辑逆了会发现都没有用，直接从cin开始看，首先对输入做了4轮异或，然后送进一个vm。分析vm代码，就是对输入的每一位异或了(36+i) *
2，然后与一个值比较。直接实现逆过程即可还原flag。
    s=[
    0x002E, 0x0026, 0x002D, 0x0029, 0x004D, 0x0067, 0x0005, 0x0044,
    0x001A, 0x000E, 0x007F, 0x007F, 0x007D, 0x0065, 0x0077, 0x0024,
    0x001A, 0x005D, 0x0033, 0x0051]
    s2=[]
    for i in range(20):
        s2.append(s[i] ^ ((36+i)*2) )
    for i in range(4):
        for j in range(19,0,-1):
            s2[j] ^= s2[j-1]
    print ''.join(map(chr, s2) )
## Happy
放到IDA里看一看，发现解不出来，判断是加了壳。考虑动态跑一下dump内存来脱壳。  
Dump出来之后用IDA重新打开，手动c一下把数据转换成代码
一边看反编译结果一边动态调试，程序在输入追加了“hh”。有一个base64，解不出来，先不管，继续往下动态调，发现有一个写死的key，然后进行了一些加密操作，和指定Byte对比check，稍微看了一下，根据一些常数，猜是不是DES加密，写代码尝试一下，果然解出flag
    >>> s=[0x27,0x42,0xAC,0xA6,0x4B,0x90,0xA4,0x7D,0x47,0x40,0xCC,0x45, 0x7F,0xA1,0x2C,0xBC,0x83,0x52,0x5E,0x51,0x60,0xF9,0xEE,0x4F,0x3D,0x68,0xDD,
    0xDE,0xE8,0x74,0xFA,0x1A,0x53,0x22,0x5B,0x13,0xC7,0xE5,0x7A,0x5E,0x58,0x80, 0xB0,0x65,0x99,0xF1,0x5B,0x4F]
    >>> key='hAppysad'
    >>> from Crypto.Cipher import DES
    >>> des=DES.new(key,DES.MODE_ECB)
    >>> s=map(chr,s)
    >>> s
    ["'", 'B', '\xac', '\xa6', 'K', '\x90', '\xa4', '}', 'G', '@', '\xcc', 'E', '\x7f', '\xa1', ',', '\xbc', '\x83', 'R', '^', 'Q', '`', '\xf9', '\xee', 'O', '=', 'h', '\xdd', '\xde', '\xe8', 't', '\xfa', '\x1a', 'S', '"', '[', '\x13', '\xc7', '\xe5', 'z', '^', 'X', '\x80', '\xb0', 'e', '\x99', '\xf1', '[', 'O']
    >>> s="".join(s)
    >>> s
    '\'B\xac\xa6K\x90\xa4}G@\xccE\x7f\xa1,\xbc\x83R^Q`\xf9\xeeO=h\xdd\xde\xe8t\xfa\x1aS"[\x13\xc7\xe5z^X\x80\xb0e\x99\xf1[O'
    >>> des.decrypt(s)
    'flag{If_u_kn0w_bas364_aNd_d3S_u_Wil1_be_happY}hh'
## Ctopia
一个游戏题，主函数中可以明显看到0%,25%,50%,75%等字符串，猜测要打通几关才能拿flag。玩了一会发现有的怪打不动，于是patch程序，把enemy::die的条件从血=0，然后运行游戏发现怪物都不见了23333，只有掉落的战利品。然后一路向上走就可以通关，每过一关会向secret里写4个byte的密钥，最终应该是16个byte的aes密钥。通关后要去什么爱琴海，但一直触发不了，看了下secret已经完整解出来了。重新看了下函数，发现最后打印flag需要一个end变量为1，于是patch掉再重启游戏，直接start即可得到flag：