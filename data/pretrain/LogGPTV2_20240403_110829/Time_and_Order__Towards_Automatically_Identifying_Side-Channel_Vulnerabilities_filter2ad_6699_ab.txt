We notice in Figure 1(d) that this program takes three types
of inputs: character ‘1’, ‘2’, or an illegal input. The program
outputs two types of barcode, or an error message, accordingly.
More speciﬁcally, function main() calls function DrawBar()
if the input character is ‘1’ or ‘2’, otherwise returns an error
(and exit). Function DrawBar() is used to draw a barcode
on the canvas, and the weight of the canvas is decided by the
length of the barcode. Then for each column of the barcode, it
calls function DrawLine(), which calls the function Paint()
in a loop if the given position is to draw a line.
Trace Construction. By providing input I1 with ‘1’, I2 with
‘2’, and an invalid input Iinvalid, we get the corresponding
execution traces E(p,I1), E(p,I2), and E(p,Iinvalid),
from which to build G 1, G 2, and G invalid. As shown
in Figure 1(a)(b)(c), each node represents the executed basic
block, and each edge represents the CFT between the basic
blocks. We also assigned an index for each node for easier
locating them in the graph (e.g., n1 and n2). Two ordered
lists, Order and Time, associated with each node record
the successor nodes (in execution order) and the execution
time (in nanosecond ns) to reach them during execution.
For instance, in Figure 1(a), the Order list of node n6 is
[n4,n4,··· ,n7,··· ,n7,··· ], which suggests that the execution
of the program will ﬁrst follow the edge from n6 → n4
multiple times, then follow the edge from n6 → n7. The ﬁrst
element of the Time list suggests the mean execution time
to reach node n4 for the ﬁrst time is 0.8ns.
p, G 2
The corresponding page-level ED-CFGs (G 1
p
p, and
G invalid
) are illustrated in Figure 1(e)(f)(g). For instance,
the ED-CFG in Figure 1(a) can be converted to the page-level
ED-CFG in Figure 1(e) in the following steps: First, node
n1 and n7 of the original ED-CFG are both placed on page
0x804a , they are merged to a single node n1 in the page-
level ED-CFG. Similarly, node n2, n4, n5, and n6 are merged
into node n2 in page-level ED-CFG. Edges between nodes
of the same page are removed in the page-level ED-CFG;
those crossing page boundaries are preserved or merged. For
instance, the edge n2 → n3 becomes the new edge n2 → n3
p, and the edges n3 → n6 and n3 → n4 merges into the
in G 1
new edge n3 → n2 in G 1
p. We point out that it is not always
straightforward to convert ED-CFG to page-level ED-CFG.
Some basic blocks in ED-CFG may cross the page boundary.
Dealing with these pages require additional efforts, which we
will discuss in more details in §4.
Vulnerability Identiﬁcation. By comparing the Gps (Gs or
Gcs), one can easily identify the side-channel vulnerabilities.
For instance, by comparing Figure 1(e) and Figure 1(f), it
can be seen that the two input values, ‘1’ and ‘2’, leads
to different page-level execution orders: the sequence of
n1 → n2 → n3 → n2 → n1 is repeated one more time when
the input is ‘1’. Figure 1(g) is very different from the other
446          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association1
2
3
4
5
6
7
9
10
11
12
13
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
(a)
void DrawLine ( i n t x ,
canvas ) {
i n t content , charΛΛ
i f ( ShouldDrawLine ( content ) ) {
(b)
(c)
f o r ( i =0;
i  300 ns)
than n2.Time[4] and n2.Time[10] (}
end
end
Ntmp ← {G i.Entry()}
repeat
n ← head(Ntmp)
pgnum ← n.StartAddr() / 4096