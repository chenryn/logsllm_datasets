vmware.vm.fs.dev.discovery
vmware.vm.net.if.discovery
vmware.vm.discovery
agent
Queue 相关的数据是反应 Zabbix Server性能情况的重要指标，可以从“Administration”→“Queue.
Zabbix 的性能，
Zabbix监控性能
Key
可以在“Administration”
VMware虚拟机文件系统discovery
VMware虚拟机磁盘设备discovery
VMware虚拟机的网卡discovery
VMware 虚拟机的discovery
Key说明
图5-25
→“Quene”查看，这里所说的Queue，指的是等
(#FSNAME)
(#DISKNAME)
(#IFNAME)
[#CLUSTER.NAME)
(#HV.NAME)
(#VM.NAME)
(#VM.ID}
(#VM.UUID)
宏
文件系统的名字
磁盘设备的名字
网卡的名字
集群的名字，可能为空
Hypervisor的名字
虚拟机的名字
虚拟机的ID
虚拟机的UUID
宏说明
续表
---
## Page 100
会返回和之间有多少数据延迟了。
此外，两个节点的本地时间的不同也可能会有影响。
Child节点的Queue信息还和ChildNode性能有关，Child和Master的网络连通性也和它有关，
节点）的Queue信息是不准确的，因为Master节点获取Child节点数据是有一定时间延迟的。
Server或者ZabbixAgent是否需要检查。需要注意的是，Child Node（Zabbix分布式架构中的子
Items延迟了。
Item延迟了10秒，还有一个Item延迟了5分钟，从Details进人后，可以找到到底是哪些
对于监控Queue信息，有一个特殊的 intermalitem可以使用：zabbix[queue,,]，它
有少数几个延迟是正常的，不需要去在意，只有当大量Item延迟时，才应该去看看Zabbix
实际界面上绿色背景的指标表示这个数据是在正常范围之内，从图5-25 中看到有一个
第5章增加监控
?85?
---
## Page 101
86
态从“OK"变到“Unknown”是不会报警的，这是一个好大的bug。当然现在2.X时代已经修复了。
Zabbix 的时候，Zabbix都要去重新判断这个 Trigger的状态。
磁盘空余空间小于10%"。一个Trigger可能对应了多个 Item，那么在每一个 Item的数据到达
不正常。Trigger的逻辑判断条件可以是非常多的条件的组合，比如“CPU负载大于10，并且
的就是这个作用。简单地说，它告诉Zabbix，一个Trigger的状态是好还是不好，是正常还是
6.1
报警配置
第6章
6.1.1配置Triggers
Trigger一定要挂靠在一个 Host 上，从“Configuration”→“Hosts”找到一台 Host，然后在
 Name:Trigger 的名字，可以使用 (HOST.HOST)、(HOST.NAME)、{HOST.CONN)、{HOST.
标签“Trigger”就是关于Trigger的设置了，它包括以下属性。
在 Zabbix 中，Trigger 的状态一共有两个：一个是“OK"，一个是“Problem"，也就是很早
作为一个监控系统，光是收集监控数据是不够的，还需要针对数据进行报警，Triggers 起
DNS)、(HOST.IP)、{ITEM.VALUE}、{ITEM.LASTVALUE)、{YMACRO}。同时还支持 Y1,Y2
Triggers
---
## Page 102
如表6-1所示。
种各样复杂的逻辑，基本形式如下。
6.1.2
Expression 是Trigger的核心，它定义了 Trigger的判断逻辑。它非常灵活，可以组合出各
对于大多数function来说，它接受的数字的单位是“秒”，如果数字前有“#”，则表示的是次数。
以前面的“New host:system.cpu.load[percpu,avgl].last（0）>5",把它和上面的公式对照起来,
Dependencies标签页会在下面几个小节介绍。
 Severity：重要性，可以设置不同的等级。
 Description:关于这个 Trigger 的一些描述。可以在里面写对于这个Trigger 的处理方法等。
[:.())
Expression：Tigger的判断逻辑，是Trigger 的核心。
URL，这里可以使用{TRIGGER.ID}宏。
时都会生成一个event。如果不勾选，只有当Trigger 状态变化时才会生成 event。
从 Zabbix2.2开始，Description中可以使用和Name一样的宏。
（0）”里的“0"，而是 5 呢？大家可以在下一节对 expression的介绍中找到答案。
Name就会变成“Precessor load above5on New host”。读者可能有疑问，为什么Y1不是"last
等占位符，它表示的是在Expression 里的常量。当Name 设置为“Processor load above Y1
Trigger expression
0
last
system.cpu.load[percpu,avg1]
Newhost
表6-1
大于
last的参数，表示最近的一次数据
最近的数据
Item
Host 的hostname
第6章报警配置
·87
---
## Page 103
·88。
生了变化（vfs.file.cksum 获取文件md5sum 的命令），同样可以监控 Linux比较重要的文件是否
值大于2。
min（10m）}>2：HOSTNAME1的CPU负载最近一次获取的值大于5或者最近10分钟的最小
（system.cpu.load[allavgl]）最近一次的值大于5。
是12月19号的19点到20点的数据的平均值。
的前1个小时的数据的平均值”。如果现在是12月20号的20点，那么avg（1h,1d）计算的就
time_shift，它表示这个函数计算的数据需要往前推一段时间。比如 avg（lh,1d）表示“1天前
如有数据3,7,2,6,5，那么last（#2）表示的是7，last（#5）表示的是5。
注意，last 这个function的“#”的含义有些特殊，它后面的数字表示的是“第几个”数据，比
比如 sum（600）表示的是过去600秒的数据的和，而sum（#5）表示的是最近5次的数据的和。
Zabbix监控系统深度实践
9
(3） (HOSTNAME1:vfs.file.cksum[/etc/passwd].dif(O)}>0 : HOSTNAME1 的 /etc/passwd 文件发
( 2 ) (HOSTNAME1:system.cpu.load[all,avg1].last(O)>5I(HOSTNAME1:system.cpu.load[all,avgl].
(1）(HOSTNAME1:system.cpu.load[all,avg1].last(O)}>5 :HOSTNAME1 这台机器的 CPU 负载
avg、count、last、min 和 max 这5个 function 除了支持一个 parameter，还支持一个参数—
下面看几个具体的例子。
优先级
Operators很容易理解，是符号类型，表6-2是Expression中支持的operator(优先级依次递减）。
对于不需要parameter的 function，也要加上，不能省略。
#
A
符号
逻辑或，即OR
逻辑与，即AND
等于，A=B的充分必要条件是（A>B-0.000001）&（A=B+0.000001）
大于，A=B+0.000001
小于，这里不是严格意义的小于，A20，那么当温度达到
机房温度的Triger，当温度超过20°℃的时候Trigger要变成Problem，直到温度低于15℃时，
（0））=O：HOSTNAME1和HOSTNAME2的SMTP服务都出了问题。
个宏，它在Triger是OK时值为0，Problem时值为1，具体的Expression 如下。
OK。但是这样IDC机房是不是恢复正常了呢？当然不是。我们需要的是{TRIGGER.VALUE}这
量在过去5分钟内的最小值大于100KB。
被更改。
6.1.3
使用“flatlintstrtextlolabschange”这种格式来定义一个function，说明 abschange可以在 float、
更进一步，在磁盘空间连续5分钟小于10GB 的情况下，Trigger变为Problem，当磁盘空
这个Expression 表示 Trigger 变成 Problem状态的条件是：当 Trigger是OK时温度大于
(5） (HOSTNAME1:net.tep.service[smtp].last(O)}=0&(HOSTNAME2:net.tcp.service[smtp].last
(4） (HOSTNAME1:net.if.in[eth0,bytes].min(5m)}>100K : HOSTNAME1 的 eht0 网卡的入口流
[loatlintlstrltexllog]labschangeO:表示前两次的值的绝对值是否相同。0表示相同,1表示不同。
({TRIGGER.VALUE)=l&{server:vfs.fs.size[/,free].min(10m)}15)
((TRIGGER.VALUE}=0&{server:temp.last(0)}>20)
有一些 Trigger 的 OK、Problem 状态是跟 Trigger 的值有关的，比如，想定义一个监控 IDC
（6）(HOSTNAME1:agent.version.str("beta8")=1 : HOSTNAMEI 的 agent 版本是 “beta8"。
Function详解
它会根据输人返回一些值。本节会
第6章报警配置
89
---
## Page 105
90
operators 支持的有 like（默认）、eq 和 ne。
Zabbix监控系统深度实践
count(600,12)：过去600秒内，监控值为12的个数。
count(600)：过去600秒数据的个数。
下面看几个例子。
对于integer items，operators 支持的有eq（默认）、ne、gt、ge、lt、le、band；对于float
[loatlintlstrltextllog].count(secl#num, paterm,operator,time_shift)：在一段时间内或者几次收
①[floatlintlsrltextllog]l.changeO：最近一次和上上次获取的值是否不同，0表示相同；1表示
int.band(secl#num,mask,time_shift)：和 mask 中定义的数字做二进制与操作。
 [floatlint].avg(secl#num,time_shift)：一段时间内,或者几次取值的平均值。参数可以是秒数，
不同。
·band－bitwise AND。从 Zabbix 2.2.0开始支持。如果使用了band，那么 pattern 可以使
·like－如果监控值包含 pattern：则计数+1，主要用于文本类的Item。
·le-less or equal：小于等于。
·lt-less than :小于。
·ge-greater or equal：大于等于。
·gt-great than :大于。
·ne-notequal：不相等。
·eq-equal:相等。
差在0.000001就认为是相等。
集到的数据中符合条件的个数。
以看上一节的说明。
可以是次数，#5表示最近5次的数据。第二个参数可选，表示的是time_shift，详情可
需要写一个mask就行了。
with 相等，那么这次会使得计数+1。如果number_to_compare_with和mask 相等，只
其中对于 patterm，“integer items”表示数据要完全吻合，“float items”表示只需要误
operator支持的有：
---
## Page 106
的监控值的个数。
的监控值的个数。
[log].logsource(string):log的来源和 string是否匹配，返回0表示不匹配，返回1表示匹配。
[log].logseverityO：返回最近一次日志的等级，返回0表示默认，其他数字表示对应的等级。
[log].logeventid(string)：最近一次的日志的Event ID是否正则匹配 string。不匹配返回0,
[floatlintlstrltextllog].last(#num,time_shift)：最近第#num次数据。这里的#num和其他
count(600.6/7”band”）：在过去600秒内，监控值二进制后的最后三位是110（十进制6）
[loatlint].fuzzytime(sec)：返回返回值和 Zabbix Server 的时间相差有没有超过 sec秒，如果
[floatlintlsrtextllog].diffO：判断上一次和上上次获取的数据是不是相同，1表示不同，0
@ [loatlint].delta(secl#num,time_shift)：在 sec 秒内或者#num 次内获取数据最大值和最小值
any.dayofweek0：返回星期几，返回值的范围是1～7。
①any.dayofmonthO：返回日期，返回值的范围是1～31。
any.dataO：返回当前的日期，格式为YYYYMMDD，如“20131025"。
count(600,.86400)：在一天前（86400秒）的这个时间点的过去600秒内的监控值的个数。
count(600,12,”g”，86400)：在一天前（86400秒）的这个时间点的过去600秒内，大于12
大小写。i表示 ignore，类似 grep-i。
count(#10,12”gt”）：过去 10次数据中大于12的个数。
count(600,12”g"”）：过去600秒内，监控值大于12的个数。
对WindowsAgent比较常用。
中抓取日志的等级。
这个是Windows event log所独有的，它可以从Windows event log的“Information”字段
匹配返回1。
function中的#num不同，别的function中的#num表示“几次”，这里的#num表示的是“第
来判断Agent的Linux时间和Zabbix Server的时间是否相同。
超过返回1，没有超过返回0。一般对于 system.localtime 这个key，加上这个function,
表示相同。
的差
几次”，比如last(#3)表示的是离现在第三近的监控值。
第6章报警配置
●91
---
## Page 107
·92
HOST-B,然后在 HOST-A 和 HOST-B的Trigger 上设置依赖于 SWITCH-A 的 trigger 即可。这样，
Trigger可以有多个Trigger依赖于它。
题在哪里。
运维工程师很难找到 root cause；使用“Trigger 依赖”，只会收到一个报警，一下子就能找到问
接着50台服务器，当交换机出问题时，要是没有使用“Trigger依赖”，将会收到51个报警，这时，
以后，只会收到源头出问题的报警，而不是整个报警链路上的所有报警。如果一个交换机下连
都配置了Trigger，那么当交换机出问题的时候，运维工程师会发现有两个host都出问题了，但
当这台交换机出问题的时候，这台服务器自然而然的也是不可用的状态。如果对这两个Host
Zabbix监控系统深度实践
真实情况是，交换机是问题的源头。
在 Zabbix 中，Host 之间是不能直接有依赖关系的，只能在 Trigger 之间有依赖关系。一个
6.1.4Trigger依赖
把交换机的 Hostname定义为 SWITCH-A，后面的两台服务器的 Hostname定义为 HOST-A，
因为这种依赖性的存在，Zabbix在Trigger上设计了“Trigger依赖”。使用了“Trigger 依赖”
有时候，一个Host的状态是依赖于其他Host的。比如一个交换机和它后面的一台服务器，
any.timeO，返回现在的时间，格式为HHMMSS，形如“123055"。
 [floatlint].sum(secl#num,time_shift)，sec 秒或者 #num 次获取监控值的和。
[strlogltext].strlen(secl#num,time_shift)，最近一次获取到的监控值的长度。
 [strlogltext].strstring,secl#num)，在最近一次监控值中检查是否包含 string。如果第二个参
[strllogltext].regexp(string,secl#num)：检查最近一次的返回值是不是正则匹配 string。第二
[floatlitlstrltextllog].prevO：返回上一次获得的监控值，等同于last(#2)。
@any.nowO：返回 UNIXTIMESTAMP。
 any.nodata(sec)：当在 sec 秒内 Zabbix Server 没有收到监控值时，返回1，否则返回0。
 [floatlint].min(secl#num,time_shift)：最近 sec 秒或者#num次监控值的最小值。
[flatlint].max(secl#num,time_shif)：最近 sec 秒或者 #num 次监控值的最大值。
数不为空，那么会处理多个数据。返回值1表示包含，0表示不包含。
否则，返回0。
这个 function 对大小写敏感，对应的 iregexp则对大小写不敏感。如果匹配成功返回1,
个参数定义的时间或者次数中的所有数据都会进行检查，只要一个符合就会认为成功。
需要注意的是sec需要超过30，否则会出现大量误报。
---
## Page 108
交换机B 和服务器A都会出问题。这样的话我们需要两个 Trigger 依赖。
加一个交换机，即网络拓扑为“交换机A一交换机B一服务器A"，如果交换机A出问题的话，
择需要依赖的Trigger就可以了。
性Trigger。
一批服务器加入Template后，相当于这些服务器的每一个可用性Trigger 都依赖于交换机可用
可以添加一个Template，里面有服务器可用性Trigger依赖于交换机的可用性Trigger，那么把
上的TRIGGER-A也会依赖于HOST-A上的TRIGGER-B。结合前面的“交换机一服务器”例子
依赖于HOST-A上的TRIGGER-B，这样，当一个HOST-B连接到TEMPLATE-A时，HOST-B
ger 依赖可以从一个Template Trigger到一个Host Trigger。比如 TEMPLATE-A上的 TRIGGER-A
单独关联到一个Host上。A依赖于B，所以A是不能脱离B而存在的。简单来说，就是Trig-
TEMPLATE-B同时关联一个Host，不允许TEMPLATE-A单独关联，而TEMPLATE-B则可以
TEMPLATE-A的一个 Trigger 依赖于 TEMPLATE-B的一个Trigger时，TEMPLATE-A 必须和
回路的依赖，会报错，如图6-1所示。
依赖于TRIGGER-B，然后TRIGGER-B又依赖于TRIGGER-A。在前端如果试图这样配置一个
的actiono
变为PROBLEM，并且HOST-A和HOST-B不会触发任何action。
只有在 SWITCH-A的 Trigger变为 PROBLEM 状态时，HOST-A 和 HOST-B 的相应 Trigger 才会
（2）交换机B 可用性Trigger依赖于交换机B可用性 Trigger。
（1）服务器A可用性Trigger依赖于交换机B可用性Trigger。
现在，来看一下链式依赖，还是“交换机一服务器”的例子，这次我们在交换机前面再
Trigger依赖的配置十分简单，在Trigger 的配置窗口中，先选择“New dependency”，再选
Trigger依赖可以在任意的两个Trigger 之间产生，只要不形成回路即可，即TRIGGER-A
如果SWITCH-A、HOST-A和HOST-B同时出问题，Zabbix不会触发HOST-A和HOST-B
CZBXAPI:exception()in/var/www/html/zabbix/api/classes)
图6-1
第6章报警配置
?
93
?
---
## Page 109