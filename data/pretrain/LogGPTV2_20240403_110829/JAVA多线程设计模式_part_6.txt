山
void iSyncA()
void cB() {l
void cA() Il
void iSyncB(}
void csyncB()
void cSyncAl
(12) x.cSyncAO;
(9):
(6) xiSyncAO;
(3) xiAO;
Something.cSyncAO:
x.iSyncAO;
y.iSyncAO;
x.iSyncA();
y.cSyncB();
LT
T
与 
---
## Page 58
量标准
多线程程序的评
Introduction 2
---
## Page 59
护“安全性”的条件。但是一个不能动的程序根本没有用，虽然有还是等于没有啊。
有变化：而对象状态没有变化，当然也不会异常，在逻辑上，这个情况也满足了维
生存性一
补充说明：thread-safe 和 thread-compatible
记载在API参考数据内。
java.util.ArrayList 类就不是 thread-safe 的类。-般来说，该类是否为 thread-safe 均
到类函数库时要特别注意。例如，java.util.Vector 类是thread-safe 的类，但
类函数库里有 thread-safe 的类，也有非 thread-safe 的类，因此当多线程程序在利用
一-个程序执行到·半突然停止。此时，既然程序没有进行任何处理，对象状态就没
负数的银行账广余额变成负数时，就是表示银行账户的对象已损坏。
所取得的值并非预期值。
“也许不是现在但－·定会进行必要的处理”，这就是生存性。
的问题。对象损坏则是指对象的状态不符合设计师的设计原意，通常是对象的字段
安全性一
内容可参考附录 E[Lea]。
应该要有一个“好在哪里，不好在哪里”的评量标准。
太差”的程度，这样很难看出你是否确实分析了程序的构造。不要只是“好不好”
B
详细内容可参见［Bloch〕的第52项说明。
放心使用。附录E的【Bloch】把这种情况称为 thread-compatible（线程兼容）。
多线程程序的评量标准
不见得满足了不损坏对象的条件，就一定是好程序。讲得夸张点，假设现在有
生存性（liveness）是指也许不是现在但一定会进行必要的处理。这也是可正常
java.util.ArrayList 类不是thread-safe，但只要有做适当的共享互斥，还是可以
可容1个以上线程使用而不危及安全性的类称为thread-safe（线程安全）的类。
以前面i Introductionl介绍过的银行账户处理为例，若设计师本来没有想过会有
对象损坏是一种比喻手法，因为对象是内存上的虚拟实体，
本章是根据 Doug Lea 的分类方式，探讨多线程程序的评量标准。进一步的详细
有时候，安全性跟生存性刚好互相抵触，例如，越想提高安全性就会相对
一进行必要的处理
一不损坏对象
不可能有实际损坏
---
## Page 60
慢半拍。这个响应慢半拍等于是响应性变低的意思。另外，提高安全性的措施
工作性能而目不转晴、专心打字时，要是有人开口打招呼，打字员的响应就会
说，如果想要较高的数据吞叶量，通常会相对降低响应性。有点像是为了提高
都可作为性能的评量标准。
量或文件数量等。
才能处理完，“立即能收到响应”才会让用户比较放心。这个响应性义称为等待时间
的消息”两者相比较之后，后者的响应性显然比较高。无论一个处理要花多少时间
的反应返回到用户那端所花费的时间。简单来说，“点选按键后都没反应，等到10
越多，则表示数据吞吐量越高。
部分：
是欲提高程序质量时应考虑的重点部分。
性能一一能快速、大量进行处理
就是…-个具有高度复用性的程序。
出来当作零件，这个A类就具有高度的复用性。
质量的重点条件。
复用性一
1章）。
降低生存性。最典型的例子就是死锁（deadlock），这是一种1个以上的线程在
(latency)。
秒！
容量（capacity）是指可同时处理的数量。例如，服务器可同时处理的客户端数
响应性（responsiveness）是指从发出要求到收到反应的时间。所费时间越短，
数据吞吐量（throughput）是指在--定时间内所能完成的处理量。能处理的数量
影响性能优劣的因素又分好几种，下面是根据Lea的性能分类摘录出来的主要
在写多线程程序时，若能巧妙地将线程的共享瓦斥结构和方针隐藏在类里，这
性能（performance）是指能快速、大量进行处理。这也不是必备的条件，但仍
如果A类原来是--个已确认可正常使用的软件程序的一部分，而且A类又叮切
复用性（reusability）是指可再利用类。这并不是必备的条件，但却是提高程序
有时候，这些因素可能会瓦相抵触（也可说是有得必有失的关系）。举例来
一可再利用类
多线程程序的评量标准
Introduction 2
---
## Page 61
请参考本章的评量标准，评估以下的叙述内容是否得当。
习问题测验自已是否已经确实理解。
有失，很难鱼与熊掌兼得。
安全性、生存性、复用性和性能都应该算是相当重要的约束力吧！
约束力是指设计师所面对的“规定”或“压力”。尤其是跟同时发生有关的 patterm;
持程序的安全性（safety）和生存性（liveness）。
评量标准的总结
降低。
意减少·次同时处理的1.作量，此时，在一定时间内能处理的工作量自然就会
可能会降低程序的性能（如数据吞吐量变少）。这有点像是为了不想搞迷糊：故
练习问题
重点回顾
( performancc ).
“下章开始将正式开始介绍各个 patern，喔！在这之前可别忘了利用下面的练
满足这两个必要条件之后，再来考虑如何提高复用性（reusability）和性能
各位在本章学习了多线程程序的评量标准，而且这些评量标准往往都是有得必
程序既不能损害对象，也-定要进行必要的处理。设计多线程程序时，必须维
问题12-1（评量标准）
解答请见附录A
请注意：·件事，在pattem中特别把程序设计上的评量标准称为约束力（force）。
（1）在方法中一概都加上 synchronized，是不是就厅无一失了呢？
根据下列评量标准分析各个patterm：
（5）这个查找程序够烂。一旦启动就得要等到全部查找完毕为止才能取消
（4）此服务器一次只能连接一个客户端，请将此服务器调整得更好--点。
（2）synchronized方法中不是变成了无穷循环了吗？这样的程序是不是不好？
（3）1-于程序的错误而陷入无穷循环的线程即使启动100个，也由于线程只是
复用性与性能一一-提高程序质量。
安全性与生存性一
不断执行而已，所以应该没有仆么关系。
(Cancel）。
必要条件：
---
## Page 62
若线程数量变成2倍，throughput 会不会也变成 2 倍呢？
问题I2-2（throughput）
（6）这样的话，类A与类B双方必须注意线程互斥控制的影响，这样是不是
不太好？
多线程程序的评量标准
Introduction 2
---
## Page 64
Execution-
Single
只有一个人
通过这座桥的
第1章
Threaded
---
## Page 65
海师家线程设洲技式
还会记录通过的人的“姓名与出生地”
么现象
的程序范例，这个程序的用意是要实际体验多线程无法正确执行的程序，会发生什
范围（桥身）上所取的名称
桥的人）上所取的名称，而Crical Section或CriticalRegion购是把视点放在执行的
或CriticalRegion（同管）SingleThreadedExecution是把视点放在运行的线程（过
学好它
充许一个人通行一样，这个Paterm用来限制同时只让一个线程运行。
变成碎片而掉落河里了
还没有走到桥的另一头，
（见图1-1），当人通过门的时候，这个程序会在计数器中，通增通过的人数，另外。
SingleThreadedExecutionPattern
不使用SingleThreadedExecutionPattem的范例
在这里要写的程序，是要模拟3个人频警地经过一个只能容许一个人经过的门
范例程序1：
SingleThreadedExecution有时候也称为Critical Scction（临界区：危险区域）
这个SingleThrendedExecutionPattem将会是多线程程序设计的基础，请务必
这里有一条独木桥。因为桥身非常的细，一次只能容许一个人经过、当一个人
首先，我们先来看一个应该要使用SingleThreadedExecutonPartem而没使用
这一章要学习的是Single Thrended Execution Paterm
程序使用到的类如表1-1所示
SingleThrendedExecution是指“以1个线程执行的意思就像细独木桥只能
下一个人不可以过桥。如果桥上同时有两个人，桥身就会
图1-
一次只通过一个人的门
---
## Page 66
，，
并非线程安全(thread-safe)的Gate 类
字母。
告诉人这个对象“请通过这个门”。
通过。创建Gate 类的实例，并将这个实例丢到UserThread 类的构造器作为参数，
Main 类
UserThread
Main
pass 是穿越这道门时使用的方法。在这个方法中，会将表示通过人数的 counter
counter字段表示目前己经通过这道的“人数”。name字段表示通过门的行人
Gate类（List 1-2）表示人所要通过的门。
在主线程中，先创建3个UserThread 类的实例，并以 start 方法启动这些线程
Main类（List 1-1）目来创建一个门（Gate），并让3个人（UserThread）不断
public class Main ↑
为了便丁对应两者之间的关系，笔者在此故意将姓名与出生地设成相同的开头
● Chris-
● Bobby-
● Alice
有下面3个人会通过这个门：
List 1-1
public static void main(string[] args) {
名
System.out.printin("Testing Gate, hit CTRL+c to exit.");
new UserThreadigate,
new UserThread (gate,
new UserThread(gate, "Alice", "Alaska").start(!;
Gate gate = new Gate();
 Single Threaded Execution-
一Canada（加拿大）出生地
一Alaska（阿拉斯加）出生地
一Brazil（巴西）出生地
Main 类(Main.java)
称
表小人的类，只负责处理不断地在门间穿梭通过
表示门的类，当人经过时会记录姓名与出生地
创建·个门，并操作3个人不断地穿越门的类
表1-1类一览表
"Chris", "Canada"),start();
"Bobby",
"Brazil").start();
解
能通过这座桥的，只有一个人
说
1草
---
## Page 67
1-2的Gate类是缺乏安全性的类，并不是线程安全（thread-safe）的类。
题的。当发现记录有问题时，就显示出下的字符串：
当人的姓名（name）与出生地（address）第一个字符不相同时，就断定记录是有问
address 各字段的值，创建字符串。例如下面这样的一行字符串：
则是方法的参数。
address字段中。
toString 方法，会以字符中的形式返回现在门的状态。使用现在的 counter、name、
public class Gate {
这个Gate类；在单线程时可以正常运行，但在多线程下就无法正常执行。List
check 方法，用来检查现在门的状态（最后通过的行人的记录数据）是否正确。
这行赋值（assignment）语句中，左方的 name 是这个实例的字段，而右方的 name
并紧接着调用 toString方法显示出现在门的状态。broken 是“损坏”的意
*****BROKEN*****
this.name = name;
"No. 123:Alice, Alaska"
List 1-2
private void check() {
public String tostring() {
public void pass(String name;
private int counter = O; 
private String name = "Nobody";
if (name.charAt(O) != address.charAt(0))
this.name = rame;
this.counter++;
check(};
this.address = address;
非线程安全的 Gate类（Gate.java）
－mame字段的值
--address字段的值
counter字段的值
 String address) [
ssappe +  
---
## Page 68
执行看看…·……果然出错了
循环，在循环里面反复地调用 pass 方法。也就是说，这个人只会在门里不断穿梭通
里称为 blank final（空的 final)。
会被检查出来。这种声明字段时不设置初始值：而在构造器中初始化的形式，在Java
设置成fnal，就算不小心在程序里写了重复赋值的程序代码，在编译程序的时候也
将不想被重复赋值的字段设置成final，是撰写程序的好习惯。因为如果将字段预先
生地。因为各字段通过构造器进行初始化以后，就不会再次赋值了，所以设置为final。
UserThread 类
run 方法一开始会显示白己的姓名与 BEGIN 字样。接着马上以 while 进入无穷
gate 字段表示所要通过的门，myname 字段表示姓名，而 myaddress 字段表示出
public class UserThread extends Thread {
UserThread类（List 1-3）表示不断穿越门的行人。这个类声明成 Thread类的子
执行这个程序时，会因为时间点不同，而产生不同的结果，图1-2是一种可能
List 1-3
public void run()
public UserThread(Gate gate, String myname, String myaddress)
private final String myaddressr
private final String myname;
private final Gate gate;
 System,out.println(myname + " BEGIN");
while (true) {
this.myaddress = myaddress:
this.myname = myname;
this.gate = gater
 Single Threaded Execution-
gate.pass (myname;
UserThread 类 ( UserThread.java)
: myaddress!:
一一能通过这座桥的，只有一个人
1章
---
## Page 69
当测试次数不够、时间点不对，就可能检查不到问题。
与好的程序并不安全。但是，就算测试没有找到借误，也不表示程序定是安全的。
但如果只是简单的儿次测试，不，就算是测试几万次，可能也不会找到错误。
示BROKEN 的时候，counter 的值是1010560。也就是，发生第一个错误，已经有
测试并无法证明安全性
待的状态并不相同。List 1-2 的Gatc 类这时并不安全，我们称它为非线程安全
还是会显示这段消息，关于这点就先留到后面的部分再解释。
息。如果仔细观察的话，您会发现即使姓名与出生地的第--个字母都相同的时候，
串，当最后通过的人留下的姓名与出生地第个字母不同的时候就会显示出这个消
现*** BROKEN*****的消息了。这是Gate 类的检查用方法 check 所输H的字符
Gate 类并非线程安全
100万人以上经过了。
（thread-safe）的类，
的结果。
在这里，因为UserThread 类的 nun 方法内跑的是无穷循环，所以才检查到错误
多线程程序设计中，这就是一-个较为困难的地方。如果测试时找到错误，表示
至少我们知道List I-2的Gate类实例，在多线程的环境下使用时，与我们所期
我们在图1-2 的结果，还能发现什么问题呢？请仔细看 counter 的值。一开始显
首先，Alice、Bobby、Chris 创建时的 BEGIN 各自显示出来后，就开始不断出
现在就仔细研究图1-2，来思考多线程程序需要面对的问题。
(以下省略。以Ctr1+C结束程序)
*****BROKEN*****Na.7969382:
*****BROKEN
★★★★*
★★★★*
Chris
Bobby BEGIN
Alice BEGIN
Testing Gate, hit. CTRL+C to exit.
**★**
★★★*
★★***
BROKEN
BROKEN
BROKEN
BROKEN
BROKEN
BROKEN
BEGIN
 ***** No.6289207: Chris,
★★★★☆
★★
No.5948274:E
No.3864350:0
No.3440418:F
No.2179746:1
No.1753974: Alice,
No.1010560:
图1-2执行范例
Alice;
Bobbyr
Chris,
Robby.
Bobby,
Bobby,
，Alaska
Canada
Brazil
Brazil
Canada
Alaska
Canada
Brazii