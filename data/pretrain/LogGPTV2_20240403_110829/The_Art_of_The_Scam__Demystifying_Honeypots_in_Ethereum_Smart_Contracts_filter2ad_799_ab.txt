the is keyword. When a contract inherits from multiple con-
tracts, only a single contract is created on the blockchain,
and the code from all the base contracts is copied into the
created contract. Figure 3 shows an example of a honeypot
that makes use of a technique that we denote as inheritance
disorder. At ﬁrst glance, there seems to be nothing special
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
c o n t r a c t Ownable {
address owner = msg . sender ;
m o d i f i e r o n l y O w n e r {
require ( msg . sender == owner ) ;
_ ;
}
}
c o n t r a c t K i n g O f T h e H i l l is Ownable {
address public owner ;
...
f u n c t i o n () public payable {
if ( msg . value > jackpot ) owner = msg . sender ;
jackpot += msg . value ;
}
f u n c t i o n takeAll () public o n l y O w n e r {
msg . sender . t r a n s f e r ( this . balance ) ;
jackpot = 0;
}
}
Figure 3: An example of an inheritance disorder honeypot.
about this code, we have a contract KingOfTheHill that
inherits from the contract Ownable. We notice two things
though: 1) the function takeAll solely allows the address
stored in variable owner to withdraw the contract’s balance;
2) the owner variable can be modiﬁed by calling the fallback
function with a message value that is greater than the current
jackpot (line 12). Now, if a user tries to call the function
in order to set themself as the owner, the transaction suc-
ceeds. However, if he or she afterwards tries to withdraw
the balance, the transaction fails. The reason for this is that
the variable owner, declared at line 9, is not the same as the
variable that is declared at line 2. We would assume that the
owner at line 9 would be overwritten by the one at line 2,
but this is not the case. The Solidity compiler will treat the
two variables as distinct variables and thus writing to owner
at line 9 will not result in modifying the owner deﬁned in the
contract Ownable.
Skip Empty String Literal. The contract illustrated in
Figure 4 allows a user to place an investment by sending a
minimum amount of ether to the contract’s function invest.
Investors may withdraw their investment by calling the func-
tion divest. Now, if we have a closer look at the code,
we realise that there is nothing that prohibits the investor
from divesting an amount that is greater than the originally
invested amount. Thus a naive user is led to believe that
the function divest can be exploited. However, this con-
tract contains a bug known as skip empty string literal2. The
empty string literal that is given as an argument to the func-
tion loggedTransfer (line 14), is skipped by the encoder
of the Solidity compiler. This has the effect that the en-
coding of all arguments following this argument are shifted
to the left by 32 bytes and thus the function call argument
2https://github.com/ethereum/solidity/blob/develop/docs/bugs.json
1594    28th USENIX Security Symposium
USENIX Association
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
c o n t r a c t D i v i d e n d D i s t r i b u t o r v 3 {
...
f u n c t i o n l o g g e d T r a n s f e r ( uint amount , bytes32
msg , address target , address c u r r e n t O w n e r ) {
if (! target . call . value ( amount ) () ) throw ;
T r a n s f e r ( amount , msg , target , c u r r e n t O w n e r ) ;
}
f u n c t i o n invest () public payable {
if ( msg . value >= m i n I n v e s t m e n t )
i n v e s t o r s [ msg . sender ]. i n v e s t m e n t += msg .
value ;
}
f u n c t i o n divest ( uint amount ) public {
if ( i n v e s t o r s [ msg . sender ]. i n v e s t m e n t == 0
|| amount == 0) throw ;
i n v e s t o r s [ msg . sender ]. investment -= amount ;
this . l o g g e d T r a n s f e r ( amount , " " , msg . sender ,
owner ) ;
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
Figure 4: An example of a skip empty string literal honeypot.
c o n t r a c t F o r _ T e s t {
...
f u n c t i o n Test () payable public {
if ( msg . value > 0.1 ether ) {
uint256 multi = 0;
uint256 a m o u n t T o T r a n s f e r = 0;
for ( var i = 0; i = minBet && _number =1 ether ) )
h a s h P a s s = hash ;
}
f u n c t i o n GetGift ( bytes pass ) returns ( bytes32 ) {
if ( h a s h P a s s == sha3 ( pass ) )
msg . sender . t r a n s f e r ( this . balance ) ;
return sha3 ( pass ) ;
}
f u n c t i o n P a s s H a s B e e n S e t ( bytes32 hash ) {
if ( hash == h a s h P a s s ) p a s s H a s B e e n S e t = true ;
1
2
3
4
5
6
7
}
}
Figure 7: An example of a hidden state update honeypot.
is not properly initialised via the new keyword. As a re-
sult, the Solidity compiler maps the storage location of the
ﬁrst variable contained in the struct (player) to the stor-
age location of the ﬁrst variable contained in the contract
(randomNumber), thereby overwriting the random number
with the address of the caller and thus making the condition
at line 14 fail. It is worth noting that the honeypot creator
is aware that a user might try to guess the overwritten value.
The creator therefore limits the number to be between 1 and
10 (line 10), which drastically reduces the chances of the
user generating an address that fulﬁls this condition.
3.2.3 Etherscan Blockchain Explorer
Hidden State Update.
In addition to normal transactions,
Etherscan also displays so-called internal messages, which
are transactions that originate from other contracts and not
from user accounts. However, for usability purposes, Ether-
scan does not display internal messages that include an
empty transaction value. The contract in Figure 7 is an exam-
ple of a honeypot technique that we denote as hidden state
update. In this example, the balance is transferred to whoever
can guess the correct value that has been used to compute the
stored hash. A naive user will assume that passHasBeenSet
is set to false and will try to call the unprotected SetPass
function, which allows to rewrite the hash with a known
value, given that least 1 ether is transferred to the contract.
When analysing the internal messages on Etherscan, the user
will not ﬁnd any evidence of a call to the PassHasBeenSet
function and therefore assume that passHasBeenSet is set
to false. However, the ﬁltering performed by Etherscan can
be misused by the honeypot creator in order to silently up-
date the state of the variable passHasBeenSet, by calling
the function PassHasBeenSet from another contract and
using an empty transaction value. Thus, by just looking at
the internal messages displayed on Etherscan, unaware users
will believe that the variable is set to false and conﬁdently
c o n t r a c t T e s t T o k e n {
...
f u n c t i o n w i t h d r a w A l l () payable {
require (0.5 ether  5040270 ) { if (
_owner == msg . sender ) { _owner . t r a n s f e r (
this . balance ) ;} else { throw ;}}
msg . sender . t r a n s f e r ( this . balance ) ;
}
}
Figure 8: An example of a hidden transfer honeypot.
transfer ether to the SetPass function.
Hidden Transfer. Etherscan provides a web interface that
displays the source code of a validated smart contract. Val-
idated means that the provided source code has success-
fully been compiled to the associated bytecode. For quite a
while, Etherscan presented the source code within an HTML
textarea element, where larger lines of code would only
be displayed up to a certain width. Thus, the rest of the line
of code would be hidden and solely visible by scrolling hor-
izontally. The contract in Figure 8 takes advantage of this