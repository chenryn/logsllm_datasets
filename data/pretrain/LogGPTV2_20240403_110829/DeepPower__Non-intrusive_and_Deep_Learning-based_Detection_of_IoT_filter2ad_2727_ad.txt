1.39
ps
0.79
0.
0.16
0.
82.5
14.30
0.90
0.
2.56
0.34
0.40
grep
3.17
0.
2.45
3.06
9.90
67.30
4.30
2.06
3.20
1.37
0.20
login
2.38
0.
6.36
1.75
2.00
4.90
83.90
1.65
4.47
6.71
3.37
kill
0.79
2.73
2.28
9.17
0.10
0.40
0.30
66.67
1.19
1.02
0.20
wget
5.15
0.45
0.98
0.44
1.60
4.00
2.30
3.29
74.98
2.28
1.79
M
5.94
0.
5.22
0.87
1.20
1.20
2.70
2.06
6.39
72.92
2.78
U
1.58
0.45
1.47
0.44
1.10
1.00
3.20
0.41
2.37
2.28
87.90
cat
cd
exe
echo
ps
grep
login
kill
wget
M
U
Table 5: The cross-device prediction results of several true
multiple activities on three IP Cameras (L: login, P: ps, U:
UNKNOWN, M: METADATA, C: cat, D: cd, W: wget).
True seq
L
PU
CU
DMMU
CMMU
WUU
Prediction (%)
L (92.2), P (7.3), WM (0.5), WMU (0.1)
P (63.5), PU (15.4), WU (23.1)
CU (82.5), MU (17.5)
DMMU (50.8), MMU (12.6), MM (36.6)
CMM (80.1), MM (19.9)
WUU (66.4), WMU (33.6)
20% dropout rate and the early-stopping method are used to avoid
overfitting. We also clip gradients by the global norm to prevent
exploding gradient, and the max value is set to 5.0. To address the
issue of lack of time-aligned labeled dataset, we concatenate the
power signal of individual activity to synthesize consecutive power
signals of multiple activities. Then, we utilize the power signals of
real multiple activities to fine-tune the pretained model from the
synthesized data set. The training dataset has 21,601 samples and
the validation dataset has 1,731 samples. To verify the feasibility of
the synthesized dataset, we execute multiple activities on the device
and collect their corresponding signals as testing data, which is
composed of 1,800 samples.
Table 5 shows the cross-device prediction results of the Seq2Seq
model from the power signals of true multiple activities on three
IP Cameras. During this cross-device prediction, we normalize the
signals from different devices and mix them together to train a
single model for different devices. For the short sequence (L, PU
and CU), our model is able to predict multiple activities with a high
accuracy. The reason is that short sequences have a greater chance
of being transferred between the signal patterns with the same
activity. And it is relatively easy for the model to capture context
dependency of their relationships when there are less activities.
For the long sequence (DWWU, CMMU and WUU), our model can
correctly predict the vast majority of activities. It indicates that
the model tends to focus on the unique features of signals while
ignoring irrelevant parts introduced by data synthesis.
We further demonstrate the alignment results between the power
signals and the executed activities using Mirai malware. Figure 8
shows the prediction results of DeepPower. DeepPower can exactly
locate and recognize each command of the corresponding power
signal. During the prediction of Figure 8(a), we find that the first 30
ms power signal is mapped to the wget command, and the remaining
part can be identified as two METADATA operations. In addition,
the model estimates a high probability that the power signal could
be mapped to the login operation in Figure 8(b). The experimental
results show that it is feasible to utilize power analysis to detect
the infection activities of Mirai malware. Our approach is able to
identify each activity and decide its location from the corresponding
power signal. To further confirm the effectiveness of our solution,
we evaluate this method on more real-world IoT malware.
5.5 Infection Detection of Real-world Malware
After inferring the activities from the power signals, we map the
activity sequence to the state sequence. The correlation analysis
of the state sequence enables us to understand the semantics of
the entire sequence and reach a reasonable conclusion about the
malware infection. We employ a weighted threshold scoring method
that aggregates the total scores S of each detected state (Figure 3).
DeepPower observes a sufficient number of states and calculates a
minimum threshold ϵ to determine whethe an IoT device is infected.
S represents how likely these states belong to the malware infection
process, and can be expressed as:
5
i =1
S =
wi · Si ,
(6)
where wi indicates whether a state Si is detected (1 and 0 represent
presence and absence, respectively), and Si represents the score of
the state i.
Table 6: The scores of individual states.
State
Score
S1
0.1067
S2
0.2845
S3
0.1421
S4
0.3197
S5
0.1470
To make our scoring system reasonable, we collect 887 Linux
malware Bash scripts from VirusShare [56] and 974 Linux Bash
scripts for normal usage from GitHub, and map the commands in
these scripts to the corresponding states according to Table 2. Then,
the desired weight of each state is estimated from the regression
model as shown in Table 6. This table doesn’t include the state
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan42Figure 9: The scoring plot of 887 malware Bash scripts (yel-
low color) and 974 normal Bash scripts (blue color).
the firmware checksum and the reboot command for restarting
during upgrading. Because the reboot command will free up RAM,
this command is unlikely to appear in the malware infection pro-
cess. This unique upgrading pattern can be used by our system to
eliminate false positives caused by firmware upgrades.
Based on the score of each state (Table 6) and the threshold, we
evaluate DeepPower on 5 representative real-world IoT malware [56]
that represent 5 different malware types. Especially, Mirai and
Lizkebab are two typical open-source malware, which infects IoT
devices in order to launch DDoS. BASHLITE is another open-source
malware, which affects IoT devices using security bugs in Unix
Bash Shell [30]. Tsunami is a reported IoT bot malware that can
launch web-based attacks [57]. Bourne-Again shell (BASH) Script is
a general Malware DownLoader with size of 1KB and can be used to
download and execute any real-world malware. Table 7 illustrates
our detection results. The detection experiments are repeated for
160 times for each malware. The results show an average accuracy
of 90.4% for all 3 devices on 5 representative real-world malware,
suggesting that our approach is promising for the detection of
real-world malware.
Table 7: The detection accuracy of real-world IoT malware’s
infection activities of DeepPower on three devices.
IoT Malware D-934L E-G02 X-1S
Mirai
Tsunami
Lizkebab
BASHLITE
BASH Script
92.9%
92.6%
90.6%
88.9%
92.3%
94.6%
91.8%
89.7%
88.2%
89.1%
Average
90.6% 92.7%
88.5% 91.0%
88.1% 89.5%
87.5% 88.2%
89.7% 90.4%
To demonstrate the benefit of our fine-grained detection ap-
proach, we compare DeepPower with other side-channel based de-
tection solutions in detecting infection activities of real-world IoT
malware. Many existing side-channel analysis approaches mainly
Figure 8: The alignment between power signals and exe-
cuted activities of IoT Mirai malware (L: login, W: wget, M:
METADATA), (a) and (b) are for different activities.
S0, because the Bash scripts don’t contain information for intru-
sion processes. Thus, our correlation analysis only considers five
states (S1-S5) contained in the infection process. In fact, DeepPower
can accurately identify the state S0. In section 5.3, we still consider
this state during inferring activities from signals, but ignore its
contribution to the detection results when performing correlation
analysis.
We apply these weights to estimate the threshold between the
malware Bash scripts and normal Bash scripts. As illustrated in Fig-
ure 9, we observe that all but 8 malware scripts score are below 0.6,
and all but 38 normal scripts score are above 0.6. Thus, it is reason-
able to set the threshold to 0.6 in our system, which only introduces
1.3% false positives and 0.3% false negatives. In order to further
reduce the false positive rate, we perform a more comprehensive
analysis of these false positive scripts. We find that these scripts can
be divided into two categories: installation scrips and upgrading
scripts according to their purposes of usage. For the former one, it
is reasonable to mark the installation process as known normal ac-
tivities and exclude it from the detection results. For the latter one,
taking the open-source OpenWrt system as an example [45], the
most obvious difference between a normal upgrading process and
a malware infection process is that the upgrading process typically
utilize two more commands: the sha256sum command for checking
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan43focus on the anomaly detection for Programmable Logic Con-
trollers (PLC) [60] and microcontroller unit (MCU) [33]. WattsUp-
Doc [9] is the most closest work to DeepPower, which uses power
side channels for anomaly detection to identify malware in Windows-
based embedded systems. WattsUpDoc simply categorizes anoma-
lous activities as a malware without considering internal details
of those anomalous activities. In contrast, DeepPower could con-
duct a fine-grained analysis of suspicious signals to output specific
executed activities. We reproduce WattsUpDoc and evaluate its
effectiveness of detecting IoT Malware, Mirai, on three IoT devices.
Table 8 shows our comparison results, which indicate that our Deep-
Power system could achieve a significant improvement in both of
true positive rate (TPR) and false positive rate (FPR), which are
92.7% and 2.9%, respectively, comparing with WattsUpDoc that can
only achieve 84.2% TPR and 15.3% FPR in detecting Mirai’s infection
activities.
Table 8: The detection accuracy of Mirai’s infection activities
from two different side-channel methods.
Method
WattsUpDoc
DeepPower
TPR
FPR
84.2% 15.3%
92.7% 2.9%
5.6 Evasion Analysis
DeepPower focuses on the detection of infection activities based
on power signals. Benefiting from the fine-grained analysis, our
method could be resistant to potential attacks. To ensure the robust-
ness of our solution, we examine several possible evasion attacks.
First, the attackers may attempt to evade the detection system
by injecting several random or invalid commands. To maintain
the effectiveness of their attacks, the random commands injected
by the attackers will not change the patterns of the original infec-
tion. Because our fine-grained analysis is based on the sequence to
sequence translation, which is from power signals to commands
sequence, both of injected random commands and original com-
mands can be identified by the order, in which they are executed.
By conducting a correlation analysis of these identified commands,
DeepPower can still focus on the original infection patterns and
identify these activities as malicious. Considering the case of in-
valid commands injection, all of these invalid commands can be
identified as unknown commands by the corresponding signals.
Therefore, our method is still able to filter out these unknown com-
mands and obtain the original infection patterns. We perform some
preliminary experiments to test the robustness of our approach
with respect to the detection of IoT malware Mirai. We randomly
inject 1 and 3 valid/invalid commands and repeat each experiment
50 times. As shown in Figure 10, there is no significant change in
the detection accuracy of our approach in each case after injecting
random/invalid commands.
Second, it may be subject to an evasion attack that leverages
customized binaries instead of system commands to reach the same
purpose. For example, by analyzing the infection process of Mirai
and Hajime, we find that echo command can also be used to transfer
malware to a victim’s device, in addition to wget and tftp. Especially,
the Hajime malware [1] first uses echo command to drop a hex
Figure 10: The comparison between original detection and
detection after injecting 1 and 3 random/invalid commands.
string to a very small file as an ELF binary. Then this ELF binary
is executed to connect a pre-defined server to download the real
malware. In other words, to achieve such an evasion attack, attack-
ers still need to drop and execute their own tools on the victims’
devices. Our previous experiments show that these dropping and
execution activities are still detectable even when the attackers rely
only on minimal operations.
6 RELATED WORK
The increasing threats of IoT malware have attracted significant
attention in security research community. Despite network-based