    @staticmethod
    def go0():
        print('static go')
```
- 私有属性
```py
class Person:
    # 定义一个类私有属性
    __people = '70'
    @classmethod
    def f(klass):
        print(Person.__people)
    def f1(self):
        # 私有成员变量
        self.__age=15
        return self.__age
Person.f()
p = Person()
print(p.f1())
# 会抛异常
p.__age
# 会抛出异常
print(Person._people)
```
- 特殊方法
头尾有双下划线的方法都是特殊方法
`__init__()`用于对象的初始化。在实例化类的过程中，被自动调用,就是构造器
`__next__()` 对迭代器调用 next() 函数，便能生成下一个值。这个过程的背后，next() 调用了迭代器的 `__next__()` 方法
`__len__()` 实现了 `__len__()` 方法，调用 len() 函数时将自动调用容器的` __len__() `方法
`__str__() ` 在使用 print() 函数时将自动调用类的 `__str__()` 方法,toString()
`__getitem__()` 'abc'[2] 即等同于 'abc'.`__getitem__(2)`
- 类继承
```py
class Animal:
    def run(self):
        print('animal run')
class Dog(Animal):
    def __init__(self):
        # 调用父类的构造器
        super().__init__()
    # 覆写父类的方法
    def run(self):
        print('dog run')
    def bark(self):
        print('wolf wolf')
dog = Dog()
dog.run()
dog.bark()
```
- 多继承
```py
class MachineDog:
    def kill(self):
        print('machine dog kill you')
class Dog(Animal):
   ...
class KillingMachineDog(Dog,MachineDog):
    pass
superDog = KillingMachineDog()
superDog.bark()
superDog.kill()
```
## 模块和包
### 模块的导入
```python
# 导入模块
import random
# 使用模块
print(random.randint(1,9))
```
### 包
```
包/
├── __init__.py
├── 模块1.py
├── 模块2.py
├── 子包1/
    ├── __init__.py
    ├── 模块3.py
    └── 模块4.py
└── 子包2/
    ├── __init__.py
    ├── 模块5.py
    └── 孙子包1/
        ├── __init__.py
        └── 模块6.py
```
包的导入
```python
import package.subpackage.module
```
## 迭代器
迭代指的是通过重复执行某个操作，不断获取被迭代对象中的数据。这样的每一次操作就是就是一次 **迭代**
迭代器可以提供迭代功能，当我们需要逐一获取数据集合中的数据时，使用迭代器可以达成这个目的
迭代器可以不保存数据，它的数据可以在需要时被计算出来（这一特性也叫做惰性计算）
```py
# 将容器包装成一个迭代器
iterator = iter([1,2,3,4])
# 不断迭代，直至迭代完抛出异常
while True:
    print(next(iterator))
```
python的for循环迭代就是通过使用迭代器完成的
- 对一个容器调用 iter() 函数，获取到该容器的迭代器
- 每次循环时对迭代器调用 next() 函数，以获取一个值
- 若捕获到 StopIteration 异常则结束循环
### 可迭代
定义了 `__iter__()` 方法的类对象就是可迭代的。当这个类对象被 iter() 函数使用时，将返回一个迭代器对象
### 自定义迭代器
```py
class MyIterator:
    # 定义了这个方法就代表是可迭代的
    def __iter__(self):
        self.count=0
        return self
    # 实现可迭代对象的接口
    def __next__(self):
        self.count = self.count+1
        return self.count
# 使用
i = MyIterator()
for i in i:
    print(i)
```
## 生成器
yield 语句的作用和 return 语句有几分相似，都可以将结果返回。不同在于，生成器函数执行至 yield 语句，返回结果的同时记录下函数内的状态，下次执行这个生成器函数，将从上次退出的位置（yield 的下一句代码）继续执行
```py
# 另外一种定义迭代器的方式
def f():
    for i in range(10):
        yield i
# 使用
i = f()
for j in i:
    print(j)
```
### 生成器表达式
```py
生成器 = (针对项的操作 for 项 in 可迭代对象)
```
```py
# 输出0-9每个数的平方
for i in (j**2 for j in range(10)):
    print(i)
```
也可以加上if语句
```py
# 输出0-100中偶数的平方
for i in (j**2 for j in range(100) if j%2==0):
    print(i)
```
### 字典生成式
```py
{键: 值 for 项 in 可迭代对象}
```
```py
# 生成0-10的键为i，值为i的平方的map
map = {i:i**2 for i in range(10)}
```
### 集合生成式
```py
# 生成0-10的集合
set = {i for i in range(10)}
```
## 函数式编程
```py
def say():
    print('say')
# 函数可赋值给变量并调用
f = say
f()
```
### 函数作为参数
```py
def f(callback):
    callback('date')
def f1(x):
    print(x)
f(f1)
```
### lambda表达式
```py
# 上面的函数调用也可以缩写成
f(lambda x: print(x))
```
### 函数作为返回值
```py
def f():
    return lambda x,y: x+y
print(f()(1,2))
```
### map与filter
```py
# filter函数可对一个可迭代对象做过滤，符合过滤lambda的元素会被返回
l = filter(lambda x: x%2==0,[1,2,3,4,5])
print(list(l))
```
```py
l = [1,2,3,4,5]
# map函数则是对可迭代对象中的每个元素做处理，然后返回
ret = map(lambda x: x**2,l)
print(list(ret))
```
## 装饰器
### 自定义装饰器
```py
def aop(fun):
    # 对fun进行包装，在其外层拦截参数
    def wrapper(*args,**kw):
        print("aop拦截参数:",args,kw)
        fun(*args,**kw)
    return wrapper
class A:
    # 加上这一行等于 m = aop(m)
    @aop
    def m(self):
        print('method invoke')
a = A()
a.m()
```
## 一些语言特性
### 切片
```py
l = [1,2,3,4,5]
# 负数代表倒数第几个
print(l[-2])
# 起始索引跟结束索引默认不写就代表是第一个/最后一个
print(l[:])
# 代表从0到最后一个，步长为2取一个元素
print(l[0:-1:2])
```
### 赋值
```py
# 连续赋值
a = b = c = 1
# 拆包
x, y = 1, 2
# 拆包一次接收多个元素
x, *y = 1, 2, 3, 4
# 交换两个元素
x, y = y, x
# or的使用
print('' or '1') # 结果为'1' 类似于js
```
### 控制语句
```py
# 三元表达式
# 如果1=1,ret=1 否则ret=2
ret = 1 if 1==1 else 2
# for...else
# 如果可迭代对象全部都被迭代了，就会执行else语句，否则不执行else语句，while...else同理
for i in range(5):
    print(i)
else:
    print('all used')
# try except else,没有发生异常时，else语句会被调用
try:
    pass
except:
    print('发生异常')
else:
    print('没有发生异常')
```
### 类
```py
# 自定义异常
class BussinessException(Exception):
    pass
```
### 函数
```py
#     参数类型标注   返回值类型标注
def f(name:str) -> str:
    return 'hello'
```
## IO
### 打开文件
```py
f = open('test.py','r')
# 指定编码
f = open('test.py','r',encoding='gbk')
```
**读写模式**
'r'：只读，若文件不存在则抛出 FileNotFoundError 异常
'rb': 以二进制的形式
'w'：只写，将覆盖所有原有内容，若文件不存在则创建文件
'a'：只写，以追加的形式写入内容，若文件不存在则创建文件
'r+'：可读可写，若文件不存在则抛出 FileNotFoundError 异常
'w+'：可读可写，若文件不存在则创建文件
'a+'：可读可写，写入时使用追加模式，若文件不存在则创建文件
### 文件写入
```py
f = open('a.txt','w')
f.write('a dog')
```
### 文件读取
```py
f = open('test.py','r',encoding='utf8')
# 读出全部内容
print(f.read())
# 读出文件行的列表
print(f.readlines())
```
### 文件关闭
```py
f.close()
```
### 文件系统操作
```py
import os
# 创建目录
os.mkdir('./test')
# 枚举目录下的文件
for i in os.listdir('./'):
    print(i)
# 删除目录
os.rmdir('./test')
# 删除文件
os.remove('a.txt')
# 重命名文件
os.rename('test.py','test1.py')
```
## 序列化
- pickle(python独有)
```py
import pickle
# 序列化成二进制
ret = pickle.dumps([1,2,3])
print(ret)
# 反序列化
print(pickle.loads(ret))
```
- json
```py
import json
# 序列化成json
str = json.dumps({'a':1,'b':2})
print(str)
# 反序列化
print(json.loads(str))
```
## 进程与线程
### 进程
```py
import multiprocessing
import os
def f():
    print('子进程')
    print('pid',os.getpid())
    print('ppid',os.getppid())
# 只有主进程才创建子进程
if __name__ == '__main__':
    # 创建一个子进程
    p = multiprocessing.Process(target=f)
    p.start()
    # 等待子线程运行完毕才会继续往下走
    p.join()
```
### 线程
```py
import threading
def f():
    print('sub thread')
# 创建线程并启动
t = threading.Thread(target=f)
t.start()
# 等待子线程执行完毕才继续往下执行
t.join()
print('main thread')
```
- 锁
```py
import threading
count = 0
# 创建一个锁
lock = threading.Lock()
def add():
    for i in range(2000000):
        global count
        # 获取锁
        lock.acquire()
        count = count+1
        # 释放锁
        lock.release()
    print('执行完成：当前结果:',count)
for i in range(10):
    threading.Thread(target=add).start()
```
## 安装第三方包
```js
pip install requests --user
```
## python编码风格
### 变量和函数
“全小写+下划线”
```py
max_capacity = 10
```
### 类名
“驼峰写法”
```py
class CodeGenerator:
    pass
```
### 异常名
“驼峰写法”
```py
ValueError
```
### 常量
“全大写+下划线”
```py
MAX_VALUE=100
```
### 模块名和包名
模块可使用“小写 + 下划线”
```py
open_api
```
包名仅使用小写字母命名
```py
requests
```
### 缩进
每级缩进应使用 4 个空格
### 换行
每行代码的最大字符数为 79。若某一行代码过长，可以将其换行书写
定义函数和类时，多个函数或类之间使用两个空行进行分隔
### 导入
import 按下列类型和顺序使用：
- 标准库导入
- 第三方库导入
- 本地库导入
### 注释
注释以 # 及一个空格开始
行内注释和代码间至少要有两个空格分隔