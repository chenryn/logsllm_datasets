prise backup/archive storage system that utilizes variable-
chunk hashing [21], [22]. We generated a model of the
deduplication reference and stored instance relationships
in the manner described by [4]. The data consisted of
roughly 200,000,000 deduplicated ﬁles, which were sorted
into twelve categories using the algorithms presented in [4].
B. Fault Models
When modeling faults, we utilize models of traditional
disk failures, LSEs and undetected disk errors (UDEs).
Traditional disk failures are assumed to be non-transient and
unrepairable without drive replacement. LSEs can be either
transient or permanent [11]. It is important to note that even
in the case of a transient LSE, a previous study of LSEs
has indicated that data stored in the sector is irrevocably
lost, even when the sector can later be read or written to
properly [11]. In our system model, we consider LSEs to
be correctable either when the disk is subsequently rebuilt
due to a traditional disk failure, or upon performance of a
scrub of the appropriate disk. UDEs represent silent data
corruption on the disk, which is undetectable by normal
means [23], [13], [14]. UDEs which manifest during writes
are persistent errors that are only detectable during a read
operation subsequent to the faulty write. We consider UDEs
to be correctable when the disk is rebuilt because of a
traditional disk failure, upon performance of a scrub of the
appropriate disk, or when the error is overwritten before
being read, although this type of mitigation produces parity
pollution [14]. We draw our models for total disk failure,
LSEs, and UDEs from those presented in [4].
In general, for a fault to manifest as a data loss error,
we must experience a series of faults within a single RAID
unit. How these faults manifest as errors depends on the
ordering of faults and repair actions in a time line of system
events. UDEs cause a different kind of error, which is largely
orthogonal to RAID, by silently corrupting data which can
then be served to the user.
C. Disk Model
In order to understand the effect of faults in an example
system, we utilize a formal model of disks in our underlying
storage system. Each disk in our system is modeled as a set
of blocks. The state of a block is modeled using the variable
block_state. This variable indicates whether the block
is in a non-faulty state, or is faulty due to an LSE, UDE,
or total disk failure; those possibilities are represented as
0, 1, 2, or 3, respectively. Each block model contains events
which represent faults, fault propagation, fault mitigation,
and repair. A full representation for a given block is shown
in Figure 1. A disk is modeled as the collection of all
block models that share a common disk failure event, and
all intersecting secondary LSE events.
D. Reliability Group Model
In order to characterize the interactions of faults in our
model, we maintain a state-based model of portions of
the physical disk. Given a set of disks that are grouped
into an interdependent array (such as the set of disks in a
RAID5 conﬁguration, or a pair of disks that are mirrored),
each stripe in the array maintains its state using a state
(a) Example model repre-
senting deduplication re-
lationships.
(b) Example model representing
deduplication relationships with
2-copy deduplication.
Figure 3: Representing deduplication in our modeling for-
malism
ntolerated faults that the array can tolerate without data loss,
as deﬁned by the array’s RAID level [24].
1) Deduplication Model: We use empirical data to gener-
ate an estimate of the probability density function (pdf) for
a random variable representing the number of references for
a chunk in the given category c. Using this pdf, fc(x) we
can generate realizations of the random variable described
by fc(x), allowing us to synthetically create a deduplication
system with the same statistical properties as our example
system.
We encode those relationships when generating the model
as dependence relationships and correlated failures that oc-
cur when an underlying block has failed, as shown in the ex-
ample in Figure 3a. In the ﬁgure, when the block_state
state variable shown at the bottom of the diagram has failed,
and the Failure state variable indicates the failure of
the stripe. An additional failure of deduplicated references
occurs because of the loss of a required instance. Multi-
copy deduplication modiﬁes the underlying model as shown
in Figure 3b.
IV. DEPENDENCE
In order to improve the efﬁciency of our solution, we
attempt to exploit dependence relationships present in our
model. Our hypothesis is that failures create important
dependence relationships within the model, causing us to
evaluate otherwise independent submodels as a larger model.
We hypothesize that repair actions break these dependencies,
until the next failure occurs.
A. RAID-Induced Dependence
Under normal operating conditions, the components of a
storage system can be considered largely independent. Given
the assumption of uniform ﬁle placement on the system (as
is typical for large-scale general purpose machines), ﬁles are
read and written to drives in an independent fashion. In such
cases the system might be modeled more tractably as a set of
independent systems, with each system solved individually.
Once a failure has occurred, the entire RAID group must be
Figure 1: Block model diagram
Figure 2: Stripe model diagram
machine appropriate to the number of tolerated faults the
conﬁguration can sustain without data loss.
In order to characterize the interactions of faults in our
model, we maintain a state-based model of portions of the
physical disk. Each stripe-based state machine is imple-
mented by storing the stripe state in a state variable called
Stripe_DFA (as shown in Figure 2), which takes on values
{0, 1, 2, 3, 4, 5, 6} to represent the states for our DFA. Events
in this stripe model represent state transition events and have
enabling conditions based on the faults present in blocks
in the given stripe on the system. Another state variable,
Failure, is set to 1 when Stripe_DFA has a value in
{5, 6}. The DFAs maintained by stripes within our modeled
system are generated automatically using knowledge of
potential fault interactions and parameters that deﬁne the
size of the disk array sarray and the number of disk faults
LSE_count∆block_state∆Total Disk Failure∆∆∆ΦSecondary_LSESecondary_LSE∆Φparity_state∆write_blockΦΦ∆∆scrub_processadvance_scrubadvance_scrubΦ∆Φ∆Φ∆ΦscrubrebuildInitial_LSEUDEUDELSETFScrubOverwriteRepairReadStripe_DFA∆∆∆∆∆∆∆∆∆∆∆ΦΦΦΦΦΦΦ.....................FailureΦΦΦΦΦΦFailureblock_stateblock_stateblock_stateblock_state∆∆∆dedup_failblock_stateblock_stateblock_state∆∆∆dedup_failFailureFailureblock_stateblock_stateΦΦΦΦconsidered dependent as further failures directly impact the
integrity of ﬁles in the RAID group. This dependence can
be removed once successfully recover actions have repaired
all failures within the RAID group, allowing the disks in the
group to once again be considered independent.
B. Deduplication Induced Dependence
An additional form of dependence in storage systems are
those caused by deduplication. When a failure occurs for a
chunk which stores an instance of a deduplicated resource in
the storage system, a dependence is created for all references
to that chunk, and the other disks in the failed instances
RAID group. Should the RAID suffer additional failures
which make the instance unrecoverable, all references to the
instance will also be unrecoverable. As before, recovery of
the failed instance and repair eliminates this dependence.
C. Important Events
For both of the major sources of dependence, an important
point is that the events that cause and remove dependence
are rare events. Faults of interest occur rarely in the system,
because of the rates used by the models that represent
them. Repair actions, while having rates that are relatively
fast compared to that of failures, can only occur when a
fault has changed system state. Thus, they are rare due
to their enabling conditions, which are rarely met. In later
sections, we will analyze rare events along with dependence
relationships to form a strategy for solving our systems.
V. UNDERSTANDING DEPENDENCE RELATIONSHIPS
We concern ourselves with four types of dependence
relationships:
• Rate dependence: The two submodels can be said to
have rate dependence if the transition rate function Λ
of an event in one submodel is deﬁned in terms of the
state variables of the other submodels.
• External dependence: When an event in one submodel
has an event-enabling function, Φ, deﬁned in terms of
the state or state variables of another submodel, we say
the submodels feature external dependence.
• ∆-dependence: When the ﬁring of an event changes
the values of state variables in two or more otherwise
independent submodels, we say that they feature ∆-
dependence.
• Reward dependence: When a reward variable θi ∈ ΘM
exists such that its reward structure is deﬁned in terms
of the state variables of two submodels, or in terms
of the events of two submodels, we say they feature
reward dependence.
Dependencies between submodels result from direct de-
pendencies between events and states, or from indirect de-
pendencies resulting from a sequence of direct dependencies.
A. Model Dependency Graph
We deﬁne a way to codify these relationships by con-
structing a model dependency graph (MDG). We will use
an MDG in conjunction with rare events found in the model
via the methods discussed in Section VI as inputs to an
algorithm we introduce in Section VII, to provide a proposed
decomposition of M.
Deﬁnition 4. The MDG of a model M is deﬁned as an
undirected labeled graph, GM = (V, A, L), where V is a
set of vertices composed of three subsets V = VS ∪VE ∪VΘ,
A is a set of arcs connecting two vertices such that one
vertex is always an element of the subset VS and one vertex
is always an element of the subset VE, or one vertex is
of the subset VΘ while the other is of the set {VE ∪ VS},
and L is a set of labels applied to elements of A from
the set {Φ, Λ, ∆, R}. Let VS denote the subset of vertices
representing the state variables S ∈ M; VE denote the
subset of vertices representing the events E ∈ M, and VΘ
denote the subset of vertices representing reward variables
from ΘM .
We construct GM using the model speciﬁcation from
Deﬁnition 1 of a model M, from Section II. GM has a
node for every state variable in S and event in E, and
reward variable in ΘM , with arcs connecting an arbitrary
state variable si to an arbitrary event ej, iff
• The enabling condition of ej depends on the value of
si. This indicates an external dependence and is marked
with the label Φ.
• The rate of the event ej depends on the value of si.
This represents a rate dependence and is marked with
the label Λ.
• The ﬁring of ej changes the value of si. This represents
a ∆ dependence and is marked with the label ∆.
An arc labeled R connects a node representing an element
θi ∈ ΘM to a node representing an element aj ∈ {S ∪ E}
iff
• aj ∈ S and θi is a rate reward deﬁned in terms of aj.
• aj ∈ E and θi is an impulse reward deﬁned in terms
of aj.
We represent an MDG graphically as shown in Figure
4. State variables are represented by circles, events by
squares, and reward variables by diamonds. Arcs in an
MDG represent dependencies. As shown in Figure 4 rate
dependencies are labeled Λ (a); external dependencies are
labeled with Φ (b); ∆-dependencies are labeled with ∆ (c);
and rate dependencies, whether impulse or rate rewards, are
labeled with R (d,e).
VI. FAILURE, RECOVERY, AND MITIGATION EVENTS
In order to ﬁnd a way to decompose a storage model,
we could require the user to specify the failure and repair
actions in the model, as with the decomposition methods
Figure 4: Two examples of near-independent submodels.
presented by [25]. Ideally, however, we wish to be able to
identify these events without user input. The characteristics
that set these events apart from others in the model is that
they are rare.
A. Identifying Rare Events
For our deduplication system,
In order to ﬁnd the events which represent whole disk
faults, LSEs and UDEs, we need to identify events which are
“locally rare.” An event ei, Λ(ei, q) may be deﬁned such that
it’s rate is much less than that of other events in the model,
i.e. Λ(ei, q) < µmax∀q. In these cases we can classify the
local rate of ei to be rare. In the case of an event with a
state-dependent rate (i.e., where Λ(ei, q) varies for different
q), it may be useful to create two virtual events, ei,1 and
ei,2, with the ﬁrst virtual event replacing ei for values of
Λ(ei, q) that constitute non-rare events, and ei,2 replacing
ei for values that qualify as representing rare events.
these locally rare rates
which have Λ(ei, q) < µmax∀q, play a part in identifying
rare events in the case of total disk failures, initial latent-
sector errors, and undetected disk errors. These events have
rates which are rare compared to others within the model,
based simply on the evaluation of their rate function Λ(ei, q).
The ﬁnal, and potentially most difﬁcult to identify, fash-
ion in which events may be rare is when their enabling
conditions deﬁned by Φ are rare. Despite the difﬁculty in
ﬁnding such events, they are important as they represent
recovery/repair actions, among other things. It is important
to identify events representing recovery, mitigation, and