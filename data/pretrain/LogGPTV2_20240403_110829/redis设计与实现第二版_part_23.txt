功能和其他常见数据库的持久化功能之间的异同，非常值得一读：http://oldblog.
History.textile.
料 : https://github.com/sripathikrishnan/redis-rdbtools/blob/master/docs/RDB_Version_
历史感兴趣，或者要处理不同版本的RDB 文件的话，那么这篇文档会是很好的资
文件，而没有对其他版本的 RDB 文件进行介绍，所以如果读者对 RDB 文件的演进
版本中的变化，因为本章只介绍了 Redis 2.6 或以上版本目前正在使用的第六版 RDB
rdb-tools/wiki/Redis-RDB-Dump-File-Format.
程序，那么这篇文档会是很好的参考资料：https://github.com/sripathikrishnan/redis-
RDB 文件的格式，如果想深人理解 RDB 文件，或者为 RDB 文件编写分析／载人
重点回顾
第10章RDB持久化·137
---
## Page 142
命令请求协议是纯文本格式，所以我们可以直接打开一个AOF文件，观察里面的内容。
RPUSH三个命令保存到AOF文件中。
存到 RDB文件中，而AOF 持久化保存数据库状态的方法则是将服务器执行的 SET、SADD、
值对：
Redis 服务器所执行的写命令来记录数据库状态的，如图11-1所示。
RDB持久化通过保存数据库中的键值对来记录数据库状态不同，AOF持久化是通过保存
被写人AOF 文件的所有命令都是以 Redis 的命令请求协议格式保存的，因为 Redis 的
例如，对于之前执行的三个写命令来说，服务器将产生包含以下内容的AOF文件：
RDB 持久化保存数据库状态的方法是将 msg、fruits、numbers 三个键的键值对保
举个例子，如果我们对空白的数据库执行以下写命令，那么数据库中将包含三个键
redis> SET msg "hello"
除了 RDB 持久化功能之外，Redis 还提供了AOF（Append Only File）持久化功能。与
*5\r\n$S\r\nRPUSH\r\n$7\r\nnumbers\r\n$3\r\n128\r\n$3\r\n256\r(n$3\r\n512\r\n
*3\r\n$3\r\nSET\r\n$3\r\nmsg\r\n$5\rinhel1o\r\n
*2\r\n$6\r\nSELEcT\r\n$1\r\n0\r\n
(integer) 3
redis> RPUsH numbers 128 256 512
(integer) 3
"Airauo. "eueuea. uaidde, satnay aavs  RPUSH NUMBERS ONE TWO THREE
举个例子，如果客户端向服务器发送以下命令：
struct redisServer {
在这个AOF文件里面，除了用于指定数据库的SELECT命令是服务器自动添加的之外，
OK
[8321]
!!..
sds
//AOF缓冲区
/!
6379
KTuO
0.000 seconds
第11章AOF持久化·139
---
## Page 144
140·第二部分单机数据库的实现
文件 redis.conf。
为 everysec，关于 appendf sync 选项的更多信息，请参考 Redis 项目附带的示例配置
定，各个不同值产生的行为如表11-1所示。
以用以下伪代码表示：
数，考虑是否需要将 aof_buf 缓冲区中的内容写人和保存到 AOF 文件里面，这个过程可
区里面，所以在服务器每次结束一个事件循环之前，它都会调用flushAppendOnlyFile 函
样需要定时运行的函数。
的命令请求，以及向客户端发送命令回复，而时间事件则负责执行像 serverCron 函数这
11.1.2AOF文件的写入与同步
appendfsync 选项的值
no
 everysec
always
因为服务器在处理文件事件时可能会执行写命令，使得一些内容被追加到 aof_buf 缓冲
Redis 的服务器进程就是一个事件循环（loop），这个循环中的文件事件负责接收客户端
如果用户没有主动为 appendfsync 选项设置值，那么 appendfsync 选项的默认值
def eventLoop{):
以上就是AOF 持久化的命令追加步骤的实现原理。
*5\r\n$5\r\nRPUSH\r\n$7\\nNUMBERS\r\n$3\r\nONE\r\n$3\r\nTWO\r\n$5\r\nTHREE\r\n
while True:
flushAppendOnlyFile ()
#考虑是否要将 aoF_buf 中的内容写入和保存到 AOF 文件里面
processTimeEvents()
#处理时间事件
processFileEvents()
#处理命令请求时可能会有新内容被追加到 aof_ buF 缓冲区中
#处理文件事件，接收命令请求以及发送命令回复
何时同步由操作系统来决定
程专门负责执行的
距离现在超过一秒钟，那么再次对AOF文件进行同步，并且这个同步操作是由一个线
将aof_buf 缓冲区中的所有内容写人到AOF 文件，但并不对AOF文件进行同步，
将aof_buf 缓冲区中的所有内容写人到 AOF文件，如果上次同步AOF文件的时间
将 aof_buf 缓冲区中的所有内容写人并同步到 AOF 文件
表 11-1 不同 append fsync 值产生不同的持久化行为
flushAppendOnlyFile 函数的行为
---
## Page 145
aof_buf 中的内容写人到AOF 文件中，然后再对AOF 文件进行同步。
项的值为 everysec，并且距离上次同步 AOF 文件已经超过一秒钟，那么服务器会先将
口
0
立即将缓冲区中的数据写入到硬盘里面，从而确保写入数据的安全性。
停机，那么保存在内存缓冲区里面的写入数据将会丢失。
入到磁盘里面。
等到缓冲区的空间被填满、或者超过了指定的时限之后，才真正地将缓冲区中的数据写
数据写入到文件的时候，操作系统通常会将写入数据暂时保存在一个内存缓冲区里面，
以上就是对AOF持久化功能的文件写人和文件同步这两个步骤的介绍。
如果这时 flushAppendOnlyFile 函数被调用，假设服务器当前 appendfsync 选
*3\r\n$3\r\nSET\r\n$4\r\ndate↓\n$8\r\n2013-9-5\r\n
*5\r\n$4\r\nSADD\rln$9\r\ndatabaseslr\n$5\rlnRedis\r\n$7\rlnMongoDB\r\n$7\r!
那么aof_buf缓冲区将包含这三个命令的协议内容：
举个例子，假设服务器在处理文件事件期间，执行了以下三个写人命令：
为此，系统提供了 fsync 和 fdatasync 两个同步函数，它们可以强制让操作系统
这种做法虽然提高了效率，但也为写入数据带来了安全问题，因为如果计算机发生
nMariaDB\rn
亿
中的所有内容写入到 AOF 文件，至于何时对AOF 文件进行同步，则由操作系统控
当 appendfsync 的值为 no 时，服务器在每个事件循环都要将 aof_buf 缓冲区
数据库也只丢失一秒钟的命令数据。
进行一次同步。从效率上来讲，everysec 模式足够快，并且就算出现故障停机,
缓冲区中的所有内容写入到 AOF 文件，并且每隔一秒就要在子线程中对AOF 文件
当 appendf sync 的值为 everysec 时，服务器在每个事件循环都要将 aof _buf 
令数据。
全的，因为即使出现故障停机，AOF持久化也只会丢失一个事件循环中所产生的命
appendfsync 选项三个值当中最慢的一个，但从安全性来说，always 也是最安
冲区中的所有内容写入到 AOF 文件，并且同步 AOF 文件，所以 always 的效率是
当 appendfsync 的值为 always 时，服务器在每个事件循环都要将 aof_buf 缓
服务器配置 appendf sync 选项的值直接决定 AOF 持久化功能的效率和安全性。
 INCR click_counter 10086
为了提高文件的写入效率，在现代操作系统中，当用户调用 write 函数，将一些
SET date "2013-9-5"
 AOF 持久化的效率和安全性 
文件的写入和同步
第11章AOF 持久化·141
---
## Page 146
142·第二部分单机数据库的实现
512 命令，当这些命令都执行完毕之后，服务器的数据库就被还原到之前的状态了。
个过程如图 11-2 所示。
存的数据库状态就会被完整地还原出来，整
文件中的所有写命令都被处理完毕为止。
命令。
命令的效果完全一样。
执行命令的效果和带网络连接的客户端执行
端来执行AOF文件保存的写命令，伪客户端
以服务器使用了一个没有网络连接的伪客户
上下文中执行，而载人AOF文件时所使用的命令直接来源于AOF文件而不是网络连接，所
重新执行一遍AOF文件里面保存的写命令，就可以还原服务器关闭之前的数据库状态。
11.2AOF文件的载入与数据还原
2）从AOF文件中分析并读取出一条写
当完成以上步骤之后，AOF文件所保
因为 AOF 文件里面包含了重建数据库状态所需的所有写命令，所以服务器只要读人并
服务器首先读人并执行 SELECTO命令，之后是SETmsg hello命令，再之后
例如，对于以下AOF文件来说：
4）一直执行步骤2和步骤3，直到AOF
3）使用伪客户端执行被读出的写命令。
以上就是服务器读人AOF文件，并根据文件内容来还原数据库状态的原理。
1）创建一个不带网络连接的伪客户端（fake client）：因为Redis 的命令只能在客户端
Redis 读取 AOF 文件并还原数据库状态的详细步骤如下：
*5\r\n$5\r\nRPUsH\r\n$7\r\nnumbers\r\n$3\r\n128\r\n$3\r\n256\rn$3\r\n512\r\n
*5\r\n$4\r(nsADD\rln$6\rlnfruits/r\n$5\r\napple/r\n$6\r\nbanana\r\n$6\r\ncherry)
*3\r\n$3\r\nSET\r\n$3\r\nmsg\r\n$5\r\nhello\r\n
*2\r\n$6\r\nSELEcr\r\n$1\rn0\r\n
时，使用 no 模式的服务器将丢失上次同步 AOF 文件之后的所有写命令数据。
从平摊操作的角度来看，no 模式和 everysec 模式的效率类似，当出现故障停机
一段时间的写入数据，所以该模式的单次同步时长通常是三种模式中时间最长的。
该模式下的 AOF 文件写入速度总是最快的，不过因为这种模式会在系统缓存中积累
制。因为处于 no模式下的 flushAppendOnlyFile 调用无须执行同步操作，所以
5
使用伪客户端执行写命令
从AOF文件中分析并读取出一条写命令
图11-2AOF文件载人过程
服务器启动载人程序
创建伪客户端
载人完毕
是
★
毕
命
否
---
## Page 147
功能是通过读取服务器当前的数据库状态来实现的。
际上，AOF文件重写并不需要对现有的AOF文件进行任何读取、分析或者写人操作，这个
11.3.1AOF 文件重写的实现
令的实现原理。
以新AOF文件的体积通常会比旧AOF文件的体积要小得多。
AOF文件所保存的数据库状态相同，但新AOF文件不会包含任何浪费空间的余命令，所
过该功能，Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件，新旧两个
以造成的问题也会严重得多。
且 AOF文件的体积越大，使用AOF文件来进行数据还原所需的时间就越多。
制的话，体积过大的AOF 文件很可能对Redis 服务器、甚至整个宿主计算机造成影响，并
行时间的流逝，AOF文件中的内容会越来越多，文件的体积也会越来越大，如果不加以控
11.3
虽然 Redis 将生成新 AOF文件替换旧 AOF 文件的功能命名为“AOF 文件重写”，但实
在接下来的内容中，我们将介绍AOF文件重写的实现原理，以及BGREWEITEAOF命
为了解决AOF 文件体积膨胀的问题，Redis 提供了AOF 文件重写（rewrite）功能。通
考虑这样一个情况，如果服务器对list键执行了以下命令：
举个例子，如果客户端执行了以下命令：
因为AOF持久化是通过保存被执行的写命令来记录数据库状态的，所以随着服务器运
(integer) 2
redis> RPUSH list "A" "B"
对于实际的应用程度来说，写命令执行的次数和频率会比上面的简单示例要高得多，所
那么光是为了记录这个1ist键的状态，AOF 文件就需要保存六条命令。
redis> RPUSH list "r" "G"
"A"
redis> LPOP list
redis> RPUSH list "D" "E"
(integer)3
redis> RPUsH list "C"
(integer) 2
redis> RPUSH list "A" "B"
AOF 重写
// ["A", "B"]
I!["C", "D", "E", "F", "G"]
!!["C", "D","E"]
!/ ["B", "C", "D", "E"}
I/ ["A", “B", "C", "D", "E"}
// ["A",“B", "C"]
// ["A", "B"]
第11章AOF持久化·143
---
## Page 148
144·第二部分单机数据库的实现
代替之前记录这个键值对的多条命令，这就是AOF重写功能的实现原理。
AOF文件中的命令数量。首先从数据库中读取键现在的值，然后用一条命令去记录键值对，
来代替上面的四条命令，这样就将保存animals 键所需的命令从四条减少为一条了。
就可以将保存list键所需的命令从六条减少为一条了。
去读取和分析现有 AOF 文件的内容，而是直接从数据库中读取键1ist 的值，然后用一条
除了上面列举的列表键和集合键之外，其他所有类型的键都可以用同样的方法去减少
整个重写过程可以用以下伪代码表示：
如果服务器想减少保存 animals 键所需命令的数量，那么服务器可以通过读取 animals
再考虑这样一个例子，如果服务器对animals 键执行了以下命令：
如果服务器想要用尽量少的命令来记录list键的状态，那么最简单高效的办法不是
def aof_rewrite(new_aof_file_name):
那么为了记录animals 键的状态，AOF文件必须保存上面列出的四条命令。
(integer)2
",eS. "uorr. Sieutue aavs  SREM animals "Cat"
(integer) 3
(integer) 1
redis> SADD animals "Cat"
那么服务器为了保存当前list键的状态，必须在 AOF 文件中写人六条命令。
(integer)5
redis> RPUSH list "F" "G"
"B"
redis> LPOP list
redis> RPUsH list "D" "g" 
(integer) 3
redis> RPUSH list "c"
(integer)l
#创建新 AOF文件
: create_file(new_aof_file_name)
//{"C", "D","E","F","G"]
I/ ["c", "D"."E"}
// ["B", "C", "D", "E"]
I/ {"A",“B"."C","D","E"}
// ["A", "B","C"]
// {"Dog", "Panda", "Tiger"
// ("Dog", "Panda", "Tiger")
// {"cat"}
"Lion","Cat"}
---
## Page 149
def rewrite_hash (key) :
def rewrite_list(key):
def rewrite_string(key):
使用 HMSET 命令重写哈希键
fieldl, valuel, field2, value2, ..., fieldN, valueN = HGETALL(key)
#使用 HGETALL 命令获取哈希键包含的所有键值对
使用LRANGE命令获取列表键包含的所有元素
f.write_command (SET, key, value)
#使用 SET命令重写字符串键
value = GET(key)
#使用 GET 命令获取字符串键的值
f.close()
写入完毕，关闭文件
for db in redisServer.db:
遍历数据库
：使用RPUSH命令重写列表键
for key in db:
#忽略空数据库
遍历数据库中的所有键
写入SELECT 命令，
如果键带有过期时间，那么过期时间也要被重写