the store could have corrupted the value.
3.1 Ideal Store Behavior
We informally describe the ideal behavior of an untrusted store
from the perspective of a Clio program.4 The ideal store semantics
provides a specification of the behavior that a real implementation
should strive for, and allows the programmer to focus on function-
ality and security properties of the store rather than the details of
cryptographic enforcement of labeled values. In Section 4 we de-
scribe how we use cryptography to achieve this ideal specification.
We use a small-step relation ⟨c, σ⟩ ⇝ ⟨c′, σ ′⟩ where ⟨c, σ⟩ and
⟨c′, σ ′⟩ are pairs of a Clio configuration c and an ideal store σ. An
ideal store σ maps ground values vk to labeled ground values ‹v :l›.
If a store doesn’t contain a mapping for an index vk, we represent
that as mapping it to the distinguished value ⊥.
Store events are used to communicate with the store. When a
put ‹v :l› at vk event is emitted, the store is updated appropri-
ately. When the Clio computation issues a fetch command, the
store provides the appropriate event (i.e., either provides event
nothing-at vk or event got τ ‹v :l› at vk for an appropriate labeled
value ‹v :l›). For Clio computation steps that do not interact with
the store, store event skip is emitted, and the store is not updated.
4Complete formal definitions in the technical report [59].
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1897Low-to-High-to-Low-Step
⟨c, I (σ )⟩ ⇝ ⟨c0, σ0⟩
⟨c0, σ0⟩ ⇝ ... ⇝ ⟨cj , σj⟩
(⟨c, σ⟩, I ) ↷ ⟨cj , σj⟩
∀0≤i <j . PC(ci ) ̸⊑ ℓ
PC(cj ) ⊑ ℓ
Low-Step
PC(c) ⊑ ℓ
⟨c, I (σ )⟩ ⇝ ⟨c
′⟩
′
, σ
′
) ⊑ ℓ
PC(c
′⟩
′
(⟨c, σ⟩, I ) ↷ ⟨c
, σ
· I | I
I (cid:70) I
I (cid:70) skip = λσ .σ
′ = λσ . σ[v
′ (cid:55)→ ‹v :l1›] s.t. I(ℓ) ⊑I I(l1)
| put ‹v :l1› at v
| corrupt v1, ...vn = λσ .σ[v1 (cid:55)→ ⊥; ... vn (cid:55)→ ⊥]
Figure 5: Adversary Interactions and Low Steps
3.2 Non-Clio Interaction: Threat Model
We assume that programs other than Clio computations may inter-
act with the store and may try to actively or passively subvert the
security of Clio programs. Our threat model for these adversarial
programs is as follows (and uses store level ℓ to characterize some
of the adversaries’ abilities).
• All indices of the key-value store are public information, and an
adversary can probe any index of the store and thus notice any
and all updates to the store.
• An adversary can read labeled values ‹v :l1› in the store where
the confidentiality level of label l1 is at least as confidential as
the store level ℓ (i.e., C(l1) ⊑C C(ℓ)).
• An adversary can put labeled values ‹v : l1› in the store (with
arbitrary ground value index vk) provided the integrity level of
store level ℓ is at least as trustworthy as the integrity of label l1
(i.e., I(ℓ) ⊑I I(l1)).
We make the following restrictions on adversaries.
An adversary can adaptively interact with the store. That is, the
behavior of the adversary may depend upon (possibly probabilisti-
cally) changes the adversary detects or values in the store.
• The adversary does not have access to timing information. That
is, it cannot observe the time between updates to the store. We
defer to orthogonal techniques to mitigate the impact of timing
channels [8]. For example, Clio could generate store events on a
fixed schedule.
• The adversary cannot observe termination of a Clio program,
including abnormal termination due to a failed label check. This
assumption can be satisfied by requiring that all Clio programs
do not diverge and are checked to ensure normal termination,
e.g., by requiring getLabel checks on the label of a labeled value
before unlabeling it. Static program analysis can ensure these
conditions, and in the rest of the paper we consider only Clio
programs that terminate normally.
Note that even though the adversary might have compromised
the Clio program, it can only interact with it at runtime through
the store. The adversary does not automatically learn everything
that the program learns, because data in the Clio runtime is still
subject to Clio semantics and the IFC enforcement, which might
prevent exfiltration to the store. The Clio semantics thus gives a
more precise characterization of the power of the adversary. Rather
than proving the security in the presence of a decryption oracle (e.g.,
CCA or CCA-2 [43]), the Clio runtime prevents system interactions
from being used as a decryption oracle, by construction.
We formally model the non-Clio interactions with the store
using sequences of adversary interactions I, given in Figure 5. Ad-
versary interactions are skip, put ‹v :l1› at v′ and corrupt v1, ...vn,
which, respectively: do nothing; put a labeled value in the store;
and delete the mappings for entries at indices v1 to vn. For storing
labeled values, we restrict the integrity of the labeled value stored
by non-Clio interactions to be at most at the store level. Sequences
of interactions I1 · ... · In are notated as I.
To model the adversary actively updating the store, we define a
step semantics ↷ that includes adversary interactions I. We restrict
interactions to occur only at low steps, i.e., when the current label
of the Clio computation is less than or equal to the store level ℓ.
(By contrast, a high step is when the current label can not flow
to ℓ.) This captures the threat model assumption that the attacker
cannot observe timing. Rules Low-Step and Low-To-High-To-Low-Step
in Figure 5 express adversary interactions occurring only at low
steps.
4 Realizing Clio
In this section we describe how Clio uses cryptography to enforce
the policies on the labeled values through a formal model, called
the real Clio store semantics. This model serves as the basis for
establishing strong, formally proven, computational guarantees of
the Clio system. We first describe how DC labels are enforced with
cryptographic mechanisms (Section 4.1), and then describe the real
Clio store semantics (Section 4.2).
4.1 Cryptographic DC Labeled Values
Clio, like many systems, identifies security principals with the
public key of a cryptographic key pair, and associates the authority
to act as a given principal with possession of the corresponding
private key. At a high level, Clio ensures that only those with access
to a principal’s private key can access information confidential to
that principal and vouch for information on behalf of that principal.
Clio tracks key pairs in a keystore. Formally, a keystore is a
mapping P : p (cid:55)→ ({0, 1}∗, {0, 1}∗⊥), where p is the principal’s well-
known name, and the pair of bit strings contains the public and
private keys for the principal. In general, the private key for a prin-
cipal may not be known—represented by ⊥—which corresponds to
knowing the identity of a principal, but not possessing its authority.
Keystores are the basis of authority and identity for Clio computa-
tions. We use meta-functions on keystores to describe the authority
of a keystore in terms of DC labels.5 Conceptually, a keystore can
access and vouch for any information for a principal for which it
has the principal’s private key. Meta-function authorityOf(P) re-
turns a label where each component (confidentiality, integrity, and
availability) is the conjunction of all principals for which keystore
P has the private key. We also use the keystore to determine the
starting label of a Clio program Start(P) and the least restrictive
clearance Clr(P), which are, respectively, the most public, trusted,
and available label possible and the most confidential, least trusted,
5Complete definitions for these functions are in the technical report [59].
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1898and least available data that the computation can compute on, given
the keystore’s authority.
Using the principal keystore as a basis for authority and identity
for principals, Clio derives a cryptographic protocol that enforces
the security policies of safe information flows defined by DC labels.
In the DC label model, labels are made up of triples of formulas.
Formulas are conjunctions of categories C1 ∧ ... ∧ Cn. Categories
are disjunctions of principals p1 ∨ ... ∨ pn. Any principal in a cat-
egory can read (for confidentiality) and vouch for (for integrity)
information bounded above by the level of the category. We enforce
that ability cryptographically by ensuring that only principals in
the category have access to the private key for that category. Clio
achieves this through the use of category keys.
A category key serves as the cryptographic basis of authority
and identity for a category. Category keys are made up of the
following components: a category public key that is readable by all
principals, a category private key that is only readable by members
of the category, and a category key signature that is a signature
on the category public key and category private key to prove the
category key’s authenticity. Category keys are created lazily by
Clio as needed and placed in the store. A category key is created
using a randomized meta-function6 parameterized by the keystore.
The generated category private key is encrypted for each member
of the category separately using each member principal’s public
key. To prevent illegitimate creation of category keys, the encrypted
category private key and category public key are together signed
using the private key of one of the category members.7 When a
category key is created and placed in the store, it can be fetched
by anyone but decrypted only by the members of the category.
When a Clio computation fetches a category key, it verifies the
signature of the category key to ensure that a category member
actually vouches for it.8 (Failing to verify the signature would allow
an adversary to trick a Clio computation into using a category key
that is readable by the adversary.)
A Clio computation encrypts data confidential to a formula
C1 ∧ ... ∧ Cn by chaining the encryptions of the value. It first
encrypts using C1’s category public key and then encrypts the
resulting ciphertext for formula C2 ∧ ... ∧ Cn. This form of layered
encryption relies on a canonical ordering of categories; we use a
lexicographic ordering of principals to ensure a canonical ordering
of encryptions and decryptions.
A Clio computation signs data for a formula by signing the
data with each category’s private key and then concatenating the
signatures together. Verification succeeds only if every category
signature can be verified.
Equipped with a mechanism to encrypt and sign data for DC
labels that conceptually respects safe information flows in Clio,
we use this mechanism to serialize and deserialize labeled values
to the store. Given a labeled ground value ‹⟨lc , li , la⟩:v›, the value
v is signed according to formula li. The value and signature are
6Defined formally in the technical report [59].
7The Clio runtime ensures that the first time a category key for a given category is
required, it will be because data confidential to the category or vouched for by the
category is being written to the store, and thus the computation has access to at least
one category member’s private key. Note that any computation with the authority of
a category member has the authority of the category.
8“Encrypt-then-sign”issues (e.g., [1]) do not apply here as the threat model (i.e., signed
encrypted messages implying authorship) is different.
encrypted according to formula lc, and the resulting bitstring is the
serialization of the labeled value. Deserialization performs decryp-
tion and then verification. If deserialization fails, then Clio treats
it like a missing entry, and the fetch command that triggered the
deserialization would evaluate to the default labeled value.
Replay Attacks. Unfortunately, using just encryption and signa-
tures does not faithfully implement the ideal store semantics: the
adversary is able to swap entries in the store, or re-use a previous
valid serialization, and thus in a limited way modify high-integrity
labeled values in the store. We prevent these attacks by requiring
that the encryption of the ground value and signature also includes
the index value (i.e., the key used to store the labeled value) and
a version number. The real Clio semantics keeps track of the last
seen version of a labeled value for each index of the store. When a
value is serialized, the version of that index is incremented before
being put in the store. When the value is deserialized the version is
checked to ensure that the version is not before a previously used
version for that index. In a distributed setting, this version counter
could be implemented as a vector clock between Clio computa-
tions to account for concurrent access to the store. However, for
simplicity, we use natural numbers for versions in the real Clio
store semantics.
4.2 Clio Store Semantics
In this section we describe the real Clio store semantics in terms of
a small-step probabilistic relation ⇝p. The relation models a step
taken from a real Clio configuration to a real Clio configuration
with probability p. A real Clio configuration is a triple ⟨c, (cid:146), V⟩
of a Clio configuration c, a distribution of sequences of real inter-
actions with the store (cid:146), and a version map V. The version map
tracks version numbers for the store to prevent replay attacks, as
described above. For technical reasons, instead of the configuration
representing the key-value store as a map, we use the history of
store interactions (which includes interactions made both by the
Clio computation and the adversary). The sequence of interac-
tions applied to the initial store gives the current store. Because
the real Clio store semantics are probabilistic (due to the use of
a probabilistic cryptosystem and cryptographic-style probabilistic
polynomial-time adversaries), configurations contain distributions
over sequences of store interactions.
Real interactions R (and their sequences R) are defined in Fig-
ure 7 and are similar to interactions with the ideal store. However,
instead of labeled values containing ground values, they contain
bitstrings b (expressing the low-level details of the cryptosystem
and the ability of the adversary to perform bit-level operations).
Additionally, the interaction put ck at C represents storing of a cat-
egory key. These interactions arise from the serialize metafunction,
which may create new category keys. Note that the interaction
put ‹b :l› at vk does not need an integrity side condition (as it
did in the ideal semantics) in the real semantics since there is no
distinction between corruptions and valid store interactions.
We use notation
{| f (X1, ..., Xn ) | X1 ← D1; ... Xn ← Dn |}
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1899Internal-Step
Store
′
′
c −→ c