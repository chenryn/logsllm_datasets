# Life Management
## Task Management
### [Task Management Workflows](life_planning.md)
* Correction: Update the task workflow of the month, and week plannings.
# [Coding](vuejs.md)
* New: Sum up the VueJS tutorial.
## Generic Coding Practices
### [Use warnings to evolve your code](use_warnings.md)
* New: Using warnings to evolve your package.
    Regardless of the [versioning system](versioning.md) you're using, once you
    reach your first stable version, the commitment to your end users must be that
    you give them time to adapt to the changes in your program. So whenever you want
    to introduce a breaking change release it under a new interface, and in
    parallel, start emitting `DeprecationWarning` or `UserWarning` messages whenever
    someone invokes the old one. Maintain this state for a defined period (for
    example six months), and communicate explicitly in the warning message the timeline for when users have
    to migrate.
    This gives everyone time to move to the new interface without breaking their
    system, and then the library may remove the change and get rid of the old design
    chains forever. As an added benefit, only people using the old interface will
    ever see the warning, as opposed to affecting everyone (as seen with the
    semantic versioning major version bump).
## [Python](python.md)
* New: Add humanize library.
    [humanize](https://github.com/python-humanize/humanize): This modest package contains various common humanization utilities, like turning a number into a fuzzy human-readable duration ("3 minutes ago") or into a human-readable size or throughput.
### [Boto3](boto3.md)
* New: [List the files of a bucket.](boto3.md#list-the-files-of-a-bucket)
### [Type Hints](docker.md)
* New: Suggest to use `Sequence` over `List`.
    Because using `List` could lead to some unexpected errors when combined with type inference. For example:
    ```python
    class A: ...
    class B(A): ...
    lst = [A(), A()]  # Inferred type is List[A]
    new_lst = [B(), B()]  # inferred type is List[B]
    lst = new_lst  # mypy will complain about this, because List is invariant
    ```
    Possible strategies in such situations are:
    * Use an explicit type annotation:
        ```python
        new_lst: List[A] = [B(), B()]
        lst = new_lst  # OK
        ```
    * Make a copy of the right hand side:
        ```python
        lst = list(new_lst) # Also OK
        ```
    * Use immutable collections as annotations whenever possible:
        ```python
        def f_bad(x: List[A]) -> A:
            return x[0]
        f_bad(new_lst) # Fails
        def f_good(x: Sequence[A]) -> A:
            return x[0]
        f_good(new_lst) # OK
        ```
* New: [Overloading the methods.](type_hints.md#overloading-the-methods)
    Sometimes the types of several variables are related, such as “if x is type A,
    y is type B, else y is type C”. Basic type hints cannot describe such
    relationships, making type checking cumbersome or inaccurate. We can instead use
    `@typing.overload` to represent type relationships properly.
    ```python
    from __future__ import annotations
    from collections.abc import Sequence
    from typing import overload
    @overload
    def double(input_: int) -> int:
        ...
    @overload
    def double(input_: Sequence[int]) -> list[int]:
        ...
    def double(input_: int | Sequence[int]) -> int | list[int]:
        if isinstance(input_, Sequence):
            return [i * 2 for i in input_]
        return input_ * 2
    ```
    This looks a bit weird at first glance—we are defining double three times! Let’s
    take it apart.
    The first two `@overload` definitions exist only for their type hints. Each
    definition represents an allowed combination of types. These definitions never
    run, so their bodies could contain anything, but it’s idiomatic to use Python’s
    `...` (ellipsis) literal.
    The third definition is the actual implementation. In this case, we need to
    provide type hints that union all the possible types for each variable. Without
    such hints, Mypy will skip type checking the function body.
    When Mypy checks the file, it collects the `@overload` definitions as type
    hints. It then uses the first non-`@overload` definition as the implementation.
    All `@overload` definitions must come before the implementation, and multiple
    implementations are not allowed.
    When Python imports the file, the `@overload` definitions create temporary
    double functions, but each is overridden by the next definition. After
    importing, only the implementation exists. As a protection against accidentally
    missing implementations, attempting to call an `@overload` definition will raise
    a `NotImplementedError`.
    `@overload` can represent arbitrarily complex scenarios. For a couple more examples, see the function overloading section of the [Mypy docs](https://mypy.readthedocs.io/en/stable/more_types.html#function-overloading).
* Correction: [Debug the Start request repeated too quickly error.](docker.md#start-request-repeated-too-quickly)
    Use `journalctl -eu docker` to debug
* Correction: Update TypeVars nomenclature.
    Using `UserT` is [not supported by pylint](https://github.com/PyCQA/pylint/issues/6003), use `UserT` instead.
### [Code Styling](pydantic_factories.md)
* New: [Creating your custom factories.](pydantic_factories.md#creating-your-custom-factories)
    If your model has an attribute that is not supported by `pydantic-factories` and
    it depends on third party libraries, you can create your custom extension
    subclassing the `ModelFactory`, and overriding the `get_mock_value` method to
    add your logic.
    ```
    from pydantic_factories import ModelFactory
    class CustomFactory(ModelFactory[Any]):
        """Tweak the ModelFactory to add our custom mocks."""
        @classmethod
        def get_mock_value(cls, field_type: Any) -> Any:
            """Add our custom mock value."""
            if str(field_type) == "my_super_rare_datetime_field":
                return cls._get_faker().date_time_between()
            return super().get_mock_value(field_type)
    ```
    Where `cls._get_faker()` is a `faker` instance that you can use to build your
    returned value.
* New: [Solve W1514 pylint error.](python_code_styling.md#w1514-set-encoding-on-open)
    ```python
    with open('file.txt', 'r', encoding='utf-8'):
    ```
### [FastAPI](fastapi.md)
* New: [Resolve the 422 error.](fastapi.md#resolve-the-422-error)
    You're probably passing the wrong arguments to the POST request, to solve it see
    the `text` attribute of the result. For example:
    ```python
    result = client.post(
        "/source/add",
        json={"body": body},
    )
    result.text
    ```
    The error is telling us that the required `url` parameter is missing.
* New: [Resolve the 409 error.](fastapi.md#resolve-the-409-error)
    Probably an exception was raised in the backend, use `pdb` to follow the trace
    and catch where it happened.
### [Pytest](pytest.md)
* New: [Run tests in a random order.](pytest.md#run-tests-in-a-random-order)
    `pytest-random-order` is a pytest plugin that randomises the order of tests.
    This can be useful to detect a test that passes just because it happens to run
    after an unrelated test that leaves the system in a favourable state.
    To use it add the `--random-order` to your pytest run.
    It [can't yet be used](https://github.com/jbasko/pytest-random-order/issues/46)
    with `pytest-xdist` though :(.
### [Python Snippets](python_snippets.md)
* New: [Add the Warning categories.](python_snippets.md#warning-categories)
    | Class                     | Description                                                                     |
    | ---                       | ---                                                                             |
    | Warning                   | This is the base class of all warning category classes.                         |
    | UserWarning               | The default category for warn().                                                |
    | DeprecationWarning        | Warn other developers about deprecated features.                                |
    | FutureWarning             | Warn other end users of applications about deprecated features.                 |
    | SyntaxWarning             | Warn about dubious syntactic features.                                          |
    | RuntimeWarning            | Warn about dubious runtime features.                                            |
    | PendingDeprecationWarning | Warn about features that will be deprecated in the future (ignored by default). |
    | ImportWarning             | Warn triggered during the process of importing a module (ignored by default).   |
    | UnicodeWarning            | Warn related to Unicode.                                                        |
    | BytesWarning              | Warn related to bytes and bytearray.                                            |
    | ResourceWarning           | Warn related to resource usage (ignored by default).                            |
* New: [How to Find Duplicates in a List in Python.](python_snippets.md#how-to-find-duplicates-in-a-list-in-python)
    ```python
    numbers = [1, 2, 3, 2, 5, 3, 3, 5, 6, 3, 4, 5, 7]
    duplicates = [number for number in numbers if numbers.count(number) > 1]
    unique_duplicates = list(set(duplicates))
    ```
    If you want to count the number of occurrences of each duplicate, you can use:
    ```python
    from collections import Counter
    numbers = [1, 2, 3, 2, 5, 3, 3, 5, 6, 3, 4, 5, 7]
    counts = dict(Counter(numbers))
    duplicates = {key:value for key, value in counts.items() if value > 1}
    ```
    To remove the duplicates use a combination of `list` and `set`:
    ```python
    unique = list(set(numbers))
    ```
* New: [How to decompress a gz file.](python_snippets.md#how-to-decompress-a-gz-file)
    ```python
    import gzip
    import shutil
    with gzip.open('file.txt.gz', 'rb') as f_in:
        with open('file.txt', 'wb') as f_out:
            shutil.copyfileobj(f_in, f_out)
    ```
* New: [How to compress/decompress a tar file.](python_snippets.md#how-to-compress/decompress-a-tar-file)
    ```python
    def compress(tar_file, members):
        """
        Adds files (`members`) to a tar_file and compress it
        """
        tar = tarfile.open(tar_file, mode="w:gz")
        for member in members:
            tar.add(member)
        tar.close()
    def decompress(tar_file, path, members=None):
        """
        Extracts `tar_file` and puts the `members` to `path`.
        If members is None, all members on `tar_file` will be extracted.
        """
        tar = tarfile.open(tar_file, mode="r:gz")
        if members is None:
            members = tar.getmembers()
        for member in members:
            tar.extract(member, path=path)
        tar.close()
    ```
### [Pydantic](pydantic.md)
* New: Use mypy pydantic's plugin.
    If you use [mypy](mypy.md) I highly recommend you to [activate the pydantic plugin](https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin) by adding to your `pyproject.toml`:
    ```toml
    [tool.mypy]
    plugins = [
      "pydantic.mypy"
    ]
    [tool.pydantic-mypy]
    init_forbid_extra = true
    init_typed = true
    warn_required_dynamic_aliases = true
    warn_untyped_fields = true
    ```
### [questionary](questionary.md)
* New: [Exit when using control + c.](questionary.md#exit-when-using-control-+-c)