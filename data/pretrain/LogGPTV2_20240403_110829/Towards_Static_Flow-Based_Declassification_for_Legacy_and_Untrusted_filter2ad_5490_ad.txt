(α, nx
) ∈ uni(g)
if each path w from nα to nx has a unique control context iw
w−→
(i.e., for each such path w there exists iw such that nα
iw
nx).
∗
We now deﬁne function exp : Vertex × G → P(Exp(cid:6)In ×
N(cid:7)) which makes precise the set of expressions represented
(n) to denote the set of
by each graph node. We write expg
expressions represented by node n in graph g, and we omit g
when it is clear from context. So that the following deﬁnition
can be applied to policy graphs (see Deﬁnition 10 below) as
well as to program graphs, it is deﬁned over nodes labeled
with wildcard (n∗), as well as over nodes labeled as they are
in program graphs.
) = {N }
exp(nN
exp(n∗) = Const
) = {αi
exp(nα
(cid:3)
exp(n∗) = In × N
exp(nγ
) =
| i ∈ N}
n(cid:2)→nγ
if type(n∗) = const
if type(n∗) = in
exp(n(cid:2))
100
⎛
exp(nx
⎜⎜⎝
Ψ
nx
(cid:3)
) =
n(cid:2)
τ−→nx
∪
exp(n(cid:2))
{f (e1, . . . , ek) |
∃ni fi−→ nx, ei ∈ exp(ni), i = 1..k}
Ψ
n
(E) = {e ∈ E | ∀α ∈ In :
(α, n) ∈ uni(g) ⇒ e is α-unique}
⎞
⎟⎟⎠
where Const denotes the set of (syntactical) constants and
Ψ
n is a ﬁlter used to deal with input uniqueness, removing
expressions which don’t satisfy α-uniqueness if the node n
holds that property. Note that in the above deﬁnition exactly
) will be non-empty as each node
one of the subsets of exp(nx
either has a single plain edge, two φ edges or k incoming
function edges. A node of type const with a wildcard ∗
label holds any constant as its expressions and a node of type
in with wildcard label matches any indexed input αi.
We also deﬁne the function cexp : Vertex × G →
P(Exp(cid:6)In × N(cid:7)) that computes all conditional expressions the
value held by a node can depend upon.
cexp(n) = {cexp(n(cid:2)) | n(cid:2)
t−→ n} ∪ {exp(n(cid:2)(cid:2)) | n(cid:2)(cid:2) control
−−−−−→ n}
We can ﬁnally state our ﬁrst result, which is about the
soundness of the graph translation. The proof is omitted and
is available in the technical report [18].
Theorem 9 (Soundness of the graph translation). Given a
program C0, environment π0, let t be a run in Run(C0, π0),
and g = G(C0). For any conﬁguration (cid:6)C, σ, π(cid:7) ∈ t we have
that σ satisﬁes:
(PE )
(PI )
(PO )
∀x ∈ Var : E (x) is deﬁned ⇒
(x, var) ∈ nodes(g) ∧ E (x) ∈ exp(nx
)
∀α ∈ In : I (α) > 0 ⇒
(α, in) ∈ nodes(g)
∀γ ∈ Out : O(γ) is deﬁned ⇒
(γ, out) ∈ nodes(g) ∧ O(γ) ⊆ exp(nγ
)
(PPC ) ∀ρ ∈ Var + IO : PC (ρ) is deﬁned ⇒
(ρ, type(ρ)) ∈ nodes(g) ∧ PC (ρ) ⊆ cexp(nρ
)
(PE
) states that each variable has a corresponding node,
and that the expression of the variable is contained in the set
) states that
of possible expressions held by that node; (PI
for each input channel accessed in the process there exists a
) states that for each
corresponding node in the graph; (PO
output channel there exists a corresponding node, and that the
set of expressions sent to that output in the process is a subset
of the set of possible expressions held by that node; ﬁnally,
) states that for each variable (and I/O channel), the set
(PP C
of conditional expressions that the variable depends on is equal
to that set for the corresponding node.
Policy Expression Graph: Policy graphs work in the same
way as program graphs, with a few key differences: (1) one or
more nodes are marked as “ﬁnal nodes”; (2) nodes can have
“wildcards” as label, in the form of ∗
i, meaning that they can
match any other node, regardless of the label; (3) edges don’t
have control context labels; and (4) input uniqueness relations
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
are provided with the policy, working as constraints over the
recognized expressions. These differences are justiﬁed by the
fact that the program graph is calculated, in order to represent
all possible expressions that can be held by variables in the
program, whereas policy graphs are supplied, recognizing the
set of expressions that can be declassiﬁed. For clarity, we write
∗t to denote the wildcard on a node of type t, and just ∗
when t = var. The matching process between the policy and
program graph is deﬁned in Section IV.
Deﬁnition 10 (Declassiﬁcation Policy). A declassiﬁcation
policy is a graph d ∈ D, with possibly disjoint components,
in the form d = (V, E, Vf , U ), where V ⊆ Vertex is a set
⊆ V is a set of
of vertices, E ⊆ Edge is a set of edges, Vf
ﬁnal vertices and U ⊆ In × V is a set of input uniqueness
relations.
The ﬁnal vertices hold the expressions allowed to be de-
classiﬁed. Thus, the set of expressions allowed by a policy
). Also, we use uni(d)
graph is determined by
(cid:3)
expd
(nf
nf ∈Vf
), add(add(0, αi
to return the set of input uniqueness relations from a policy d.
Thus, for our working example of the average salary, we have
that the policy of Figure 5 recognizes the set of expressions
), . . .}, with all indices on α
{0, add(0, αi
being distinct, as (α, ∗3) ∈ uni(d). It is important to point that
this work addresses the problem of enforcing declassiﬁcation
policies, rather than specifying them. However, it is fairly
straightforward to derive a rule that translates the policy graph
to/from some form of regular expressions (e.g. regular tree
expressions).
), αj
We now present another example, showing the use of
wildcards in the policy. It is another of the classical examples
of declassiﬁcation, this time in presence of encryption: we
have data that is sensitive if unencrypted, but its encrypted
version can be declassiﬁed. The code below is already pre-
processed:
the input channel α provides a sensitive plain
text ﬁle, β represents a cryptographic key. Output channel γ
represents a low output.
Example 11. Encryption program:
text x1 := α;
int k1 := β;
x2 := enc(x1, k1);
γ := x2;
For our example, we consider a policy that allows any input
to be declassiﬁed, as long as it is encrypted with a speciﬁc
key, using a speciﬁc function. Figure 8 shows the graphs for
both the policy and the program. In this case, node ∗in
in
2
the policy matches node α in the graph, and it is clear that
the content of variable x2 can be made public, matching ﬁnal
node ∗1.
As mentioned in our ﬁrst example, we don’t consider a
declassiﬁcation to be invertible. For this example, one may
think that, after x2 has been marked as safe, a decryption
function could be used to retrieve the original α value to
101
Fig. 8. Encryption program and its matching policy
a new x3 variable. However, since the decryption function
would need the decryption key, the inheritance from x2 by
itself would not be sufﬁcient for x3 to be marked as safe. The
edge from input β to the decryption function would also need
to be validated and this validation would not happen, as there
is no policy that allows it, therefore making x3 insecure.
IV. POLICY MATCHING
Having deﬁned the expression graphs of program and policy
in the previous section we now introduce the mechanism
that matches them. This will allow us to deﬁne which nodes
are safe according to the policy. If all output nodes are
safe, then the program represented by the graph is safe too.
Note that multiple disjoint components of a declassiﬁcation
graph may be needed to show the safety of a program. To
simplify this process we ﬁrst extract the sub-graphs from the
program’s expression graph that could be validated separately
(called information paths). Next we carry out the matching
between an information path and a (single) component on
a policy graph. It is important to point that in this section
we present the deﬁnition of the matching mechanism, rather
than an algorithm. Even though an algorithm can be directly
derived from our deﬁnitions, due to space constraints we leave
speciﬁcation and analysis of such algorithm as future work.
An information path captures one way that expressions can
ﬂow into a node starting from input channels and constants.
Multiple function edges to a same node represent the same
expression held by that node, and all edges need to be included
in the path. On the other hand, φ-edges represent points where
control ﬂow may branch, and therefore each φ-edge represents
a distinct information path. Note that an information path may
still have multiple incoming τ -edges because loops may cause
us to reach the same node multiple times. We represent an
information path by the set of edges it contains (the set of
vertices for the graph can be obtained by collecting the source
or destination of the edges). For a set S of information paths
we use the notation:
S ⊕ e = {g ∪ {e} | g ∈ S}
S ⊗ S (cid:2) = {g ∪ g(cid:2) | g ∈ S, g(cid:2) ∈ S (cid:2)}
The function ip calculates all the information paths that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
reach node n, which is the set of sub-graphs satisfying:
(cid:3)
ip(n) = {∅}
ip(n) =
(cid:10)
n(cid:2)
τ−→n
if (cid:16)→ n. Otherwise:
ip(n(cid:2)) ⊕ (n(cid:2), n, t) ∪
ip(n(cid:2)) ⊕ (n(cid:2), n, t)
fi−→n
n(cid:2)
If one information path is a sub-graph of another then
validating the larger graph also validates the smaller so we
only need to consider maximal information paths, i.e. maximal
elements of ip.
mip(n) = {g | g ∈ ip(n), ∀g(cid:2) ∈ ip(n) : g (cid:16)⊂ g(cid:2)}
i=1..k
The next step is to relate the maximal information paths to
the policies. This is done by the notion of policy simulation
f⇒
which is a “bundled” weak simulation. We write (ni)
n(cid:2) if ∃n : ∀i ∈ {1..k} : ni ( τ−→)∗ fi−→ ( τ−→)∗ n(cid:2). Also we
call two nodes similar n (cid:22) n(cid:2) if they have the same type and
either the labels are the same or one of them is a wildcard ∗.
Deﬁnition 12 (Policy Simulation). A relation R between
information path nodes and policy graph nodes is called a
policy simulation if for all (n, nd
n (cid:22) nd
(n(cid:2) τ−→ n ⇒ ∃n(cid:2)
( τ−→)∗ nd
d
(∀i ∈ {1..k} : ni fi−→ n ⇒ ∃n1
) ∈ R we have:
∧ (n(cid:2), n(cid:2)
d
: (ni
d
) ∈ R) ∧
: n(cid:2)
d
∧
d
d..nk
)
i=1..k
∀i ∈ {1..k} : (ni, ni
d
w−→∗
w−→
i
n ⇒ ∃i : nα
∗
f⇒ nd
∧
) ∈ R) ∧
is analyzed, instead of only individual paths. Relation cds
captures the notion.
cds(n, g, d) ≡ ∀n(cid:2) ∈ nodes(g) : ∃n(cid:2)(cid:2) ∈ nodes(g) :
n(cid:2) control
−−−−−→ n(cid:2)(cid:2) w−→∗
n ⇒ dds(n(cid:2), g, d)