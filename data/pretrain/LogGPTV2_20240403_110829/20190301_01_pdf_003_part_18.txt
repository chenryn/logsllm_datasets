### Disabling a Policy
To disable a policy, such as the `secure_update` policy on the `public.vpemp` table, you can use the following PL/SQL block:

```plsql
DECLARE
    v_object_schema VARCHAR2(30) := 'public';
    v_object_name VARCHAR2(30) := 'vpemp';
    v_policy_name VARCHAR2(30) := 'secure_update';
    v_enable BOOLEAN := FALSE;
BEGIN
    DBMS_RLS.ENABLE_POLICY(
        object_schema => v_object_schema,
        object_name => v_object_name,
        policy_name => v_policy_name,
        enable => v_enable
    );
END;
```

### DBMS_SCHEDULER Package
The `DBMS_SCHEDULER` package provides functionality to create and manage Oracle-styled jobs, programs, and job schedules. Below are the key functions and procedures implemented in this package:

#### Functions and Procedures

| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `CREATE_JOB(job_name, job_type, job_action, number_of_arguments, start_date, repeat_interval, end_date, job_class, enabled, auto_drop, comments)` | n/a | Creates a job with detailed program and schedule information. |
| `CREATE_JOB(job_name, program_name, schedule_name, job_class, enabled, auto_drop, comments)` | n/a | Creates a job using a named program and schedule. |
| `CREATE_PROGRAM(program_name, program_type, program_action, number_of_arguments, enabled, comments)` | n/a | Creates a program. |
| `CREATE_SCHEDULE(schedule_name, start_date, repeat_interval, end_date, comments)` | n/a | Creates a schedule. |
| `DEFINE_PROGRAM_ARGUMENT(program_name, argument_position, argument_name, argument_type, default_value, out_argument)` | n/a | Defines a program argument with a default value. |
| `DEFINE_PROGRAM_ARGUMENT(program_name, argument_position, argument_name, argument_type, out_argument)` | n/a | Defines a program argument without a default value. |
| `DISABLE(name, force, commit_semantics)` | n/a | Disables a job or program. |
| `DROP_JOB(job_name, force, defer, commit_semantics)` | n/a | Drops a job. |
| `DROP_PROGRAM(program_name, force)` | n/a | Drops a program. |
| `DROP_PROGRAM_ARGUMENT(program_name, argument_position)` | n/a | Drops a program argument by position. |
| `DROP_PROGRAM_ARGUMENT(program_name, argument_name)` | n/a | Drops a program argument by name. |
| `DROP_SCHEDULE(schedule_name, force)` | n/a | Drops a schedule. |
| `ENABLE(name, commit_semantics)` | n/a | Enables a job or program. |
| `EVALUATE_CALENDAR_STRING(calendar_string, start_date, return_date_after, next_run_date)` | n/a | Evaluates a user-defined calendar schedule. |
| `RUN_JOB(job_name, use_current_session, manually)` | n/a | Executes a job immediately. |
| `SET_JOB_ARGUMENT_VALUE(job_name, argument_position, argument_value)` | n/a | Sets the value of a job argument by position. |
| `SET_JOB_ARGUMENT_VALUE(job_name, argument_name, argument_value)` | n/a | Sets the value of a job argument by name. |

### Advanced Server Implementation
Advanced Server's implementation of `DBMS_SCHEDULER` is partial compared to Oracle's version. Only the functions and procedures listed above are supported.

### Dependencies
The `DBMS_SCHEDULER` package depends on the `pgAgent` service. Ensure that `pgAgent` is installed and running on your server before using `DBMS_SCHEDULER`.

### Setting Up DBMS_SCHEDULER
Before using `DBMS_SCHEDULER`, a database superuser must create the necessary catalog tables. Use the `psql` client to connect to the database and execute the following command:

```sql
CREATE EXTENSION dbms_scheduler;
```

By default, the `dbms_scheduler` extension is located in the `contrib/dbms_scheduler_ext` subdirectory under the Advanced Server installation. After creating the `DBMS_SCHEDULER` tables, only a superuser will be able to perform a dump or reload of the database.

### Using Calendar Syntax for Repeating Intervals
The `CREATE_JOB` and `CREATE_SCHEDULE` procedures use Oracle-styled calendar syntax to define repeating intervals. The `repeat_interval` parameter specifies the interval between job executions. Multiple token values must be separated by a semicolon (`;`).

For example, the following `repeat_interval` value:
```plaintext
FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=17;BYMINUTE=45
```
defines a schedule that runs each weeknight at 5:45 PM.

#### Supported Token Types and Syntax

| Token Type | Syntax | Valid Values |
|------------|--------|--------------|
| `FREQ` | `FREQ=predefined_interval` | `YEARLY`, `MONTHLY`, `WEEKLY`, `DAILY`, `HOURLY`, `MINUTELY` (not `SECONDLY`) |
| `BYMONTH` | `BYMONTH=month(, month)...` | Three-letter month abbreviations (e.g., `JAN`, `FEB`, `MAR`) or numeric values (1-12) |
| `BYMONTHDAY` | `BYMONTHDAY=day_of_month` | 1-31 |
| `BYDAY` | `BYDAY=weekday` | Three-letter weekday abbreviations (e.g., `MON`, `TUE`, `WED`) or single-digit values (1-7) |
| `BYDATE` | `BYDATE=date(, date)...` | `YYYYMMDD` or `MMDD` |
| `BYHOUR` | `BYHOUR=hour` | 0-23 |
| `BYMINUTE` | `BYMINUTE=minute` | 0-59 |

### CREATE_JOB Procedure
The `CREATE_JOB` procedure creates a job and comes in two forms:

1. **With Schedule and Job Action:**
   ```plsql
   CREATE_JOB(
       job_name IN VARCHAR2,
       job_type IN VARCHAR2,
       job_action IN VARCHAR2,
       number_of_arguments IN PLS_INTEGER DEFAULT 0,
       start_date IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
       repeat_interval IN VARCHAR2 DEFAULT NULL,
       end_date IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
       job_class IN VARCHAR2 DEFAULT 'DEFAULT_JOB_CLASS',
       enabled IN BOOLEAN DEFAULT FALSE,
       auto_drop IN BOOLEAN DEFAULT TRUE,
       comments IN VARCHAR2 DEFAULT NULL)
   ```

2. **With Named Program and Schedule:**
   ```plsql
   CREATE_JOB(
       job_name IN VARCHAR2,
       program_name IN VARCHAR2,
       schedule_name IN VARCHAR2,
       job_class IN VARCHAR2 DEFAULT 'DEFAULT_JOB_CLASS',
       enabled IN BOOLEAN DEFAULT FALSE,
       auto_drop IN BOOLEAN DEFAULT TRUE,
       comments IN VARCHAR2 DEFAULT NULL)
   ```

#### Parameters
- `job_name`: The optionally schema-qualified name of the job.
- `job_type`: The type of job (`PLSQL_BLOCK` or `STORED_PROCEDURE`).
- `job_action`: The content of the PL/SQL block or the name of the stored procedure.
- `number_of_arguments`: The number of arguments expected by the job (default is 0).
- `start_date`: The first time the job is scheduled to execute (default is `NULL`).
- `repeat_interval`: How often the job will repeat (default is `NULL`).
- `end_date`: The time after which the job will no longer execute (default is `NULL`).
- `program_name`: The name of the program to be executed.
- `schedule_name`: The name of the associated schedule.
- `job_class`: Ignored for compatibility.
- `enabled`: Whether the job is enabled when created (default is `FALSE`).
- `auto_drop`: Ignored for compatibility.
- `comments`: A comment about the job.

#### Example
```plsql
EXEC
DBMS_SCHEDULER.CREATE_JOB (
    job_name => 'update_log',
    job_type => 'PLSQL_BLOCK',
    job_action => 'BEGIN INSERT INTO my_log VALUES(current_timestamp); END;',
    start_date => '01-JUN-15 09:00:00.000000',
    repeat_interval => 'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=17;',
    end_date => NULL,
    enabled => TRUE,
    comments => 'This job adds a row to the my_log table.');
```

### CREATE_PROGRAM Procedure
The `CREATE_PROGRAM` procedure creates a program:

```plsql
CREATE_PROGRAM(
    program_name IN VARCHAR2,
    program_type IN VARCHAR2,
    program_action IN VARCHAR2,
    number_of_arguments IN PLS_INTEGER DEFAULT 0,
    enabled IN BOOLEAN DEFAULT FALSE,
    comments IN VARCHAR2 DEFAULT NULL)
```

#### Parameters
- `program_name`: The name of the program.
- `program_type`: The type of program (`PLSQL_BLOCK` or `PROCEDURE`).
- `program_action`: The PL/SQL block or the name of the stored procedure.
- `number_of_arguments`: The number of arguments required by the procedure (default is 0).
- `enabled`: Whether the program is enabled when created (default is `FALSE`).
- `comments`: A comment about the program.

#### Example
```plsql
EXEC
DBMS_SCHEDULER.CREATE_PROGRAM (
    program_name => 'update_log',
    program_type => 'PLSQL_BLOCK',
    program_action => 'BEGIN INSERT INTO my_log VALUES(current_timestamp); END;',
    enabled => TRUE,
    comments => 'This program adds a row to the my_log table.');
```

### CREATE_SCHEDULE Procedure
The `CREATE_SCHEDULE` procedure creates a job schedule:

```plsql
CREATE_SCHEDULE(
    schedule_name IN VARCHAR2,
    start_date IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    repeat_interval IN VARCHAR2,
    end_date IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    comments IN VARCHAR2 DEFAULT NULL)
```

#### Parameters
- `schedule_name`: The name of the schedule.
- `start_date`: The date and time the schedule is eligible to execute (default is `NULL`).
- `repeat_interval`: How often the job will repeat (default is `NULL`).
- `end_date`: The time after which the schedule will no longer execute (default is `NULL`).
- `comments`: A comment about the schedule.

#### Example
```plsql
EXEC
DBMS_SCHEDULER.CREATE_SCHEDULE (
    schedule_name => 'weeknights_at_5',
    start_date => '01-JUN-13 09:00:00.000000',
    repeat_interval => 'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=17;',
    comments => 'This schedule executes each weeknight at 5:00');
```

### DEFINE_PROGRAM_ARGUMENT Procedure
The `DEFINE_PROGRAM_ARGUMENT` procedure defines a program argument and comes in two forms:

1. **With Default Value:**
   ```plsql
   DEFINE_PROGRAM_ARGUMENT(
       program_name IN VARCHAR2,
       argument_position IN PLS_INTEGER,
       argument_name IN VARCHAR2 DEFAULT NULL,
       argument_type IN VARCHAR2,
       default_value IN VARCHAR2,
       out_argument IN BOOLEAN DEFAULT FALSE)
   ```

2. **Without Default Value:**
   ```plsql
   DEFINE_PROGRAM_ARGUMENT(
       program_name IN VARCHAR2,
       argument_position IN PLS_INTEGER,
       argument_name IN VARCHAR2 DEFAULT NULL,
       argument_type IN VARCHAR2,
       out_argument IN BOOLEAN DEFAULT FALSE)
   ```

#### Parameters
- `program_name`: The name of the program.
- `argument_position`: The position of the argument.
- `argument_name`: The name of the argument (default is `NULL`).
- `argument_type`: The data type of the argument.
- `default_value`: The default value of the argument (for the first form).
- `out_argument`: Whether the argument is an output argument (default is `FALSE`).

Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.