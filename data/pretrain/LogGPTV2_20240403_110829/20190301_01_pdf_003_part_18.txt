disabled.
Examples
The following example disables policy secure_update on table public.vpemp:
DECLARE
v_object_schema VARCHAR2(30) := 'public';
v_object_name VARCHAR2(30) := 'vpemp';
v_policy_name VARCHAR2(30) := 'secure_update';
v_enable BOOLEAN := FALSE;
BEGIN
DBMS_RLS.ENABLE_POLICY(
v_object_schema,
v_object_name,
v_policy_name,
v_enable
);
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 182
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15 DBMS_SCHEDULER
The DBMS_SCHEDULER package provides a way to create and manage Oracle-styled jobs,
programs and job schedules. The DBMS_SCHEDULER package implements the following
functions and procedures:
Function/Procedure Return Type Description
CREATE_JOB(job_name, n/a Use the first form of the CREATE_JOB procedure to
job_type, job_action,
create a job, specifying program and schedule details
number_of_arguments,
by means of parameters.
start_date, repeat_interval,
end_date, job_class, enabled,
auto_drop, comments)
CREATE_JOB(job_name, n/a Use the second form of CREATE_JOB to create a job
program_name, schedule_name,
that uses a named program and named schedule.
job_class, enabled,
auto_drop, comments)
CREATE_PROGRAM(program_name, n/a Use CREATE_PROGRAM to create a program.
program_type, program_action,
number_of_arguments, enabled,
comments)
CREATE_SCHEDULE( n/a Use the CREATE_SCHEDULE procedure to create a
schedule_name, start_date,
schedule.
repeat_interval, end_date,
comments)
DEFINE_PROGRAM_ARGUMENT( n/a Use the first form of the
program_name,
DEFINE_PROGRAM_ARGUMENT procedure to define a
argument_position,
program argument that has a default value.
argument_name, argument_type,
default_value, out_argument)
DEFINE_PROGRAM_ARGUMENT( n/a Use the first form of the
program_name,
DEFINE_PROGRAM_ARGUMENT procedure to define a
argument_position,
program argument that does not have a default value.
argument_name, argument_type,
out_argument)
DISABLE(name, force, n/a Use the DISABLE procedure to disable a job or
commit_semantics)
program.
DROP_JOB(job_name, force, n/a Use the DROP_JOB procedure to drop a job.
defer, commit_semantics)
DROP_PROGRAM(program_name, n/a Use the DROP_PROGRAM procedure to drop a
force)
program.
DROP_PROGRAM_ARGUMENT( n/a Use the first form of DROP_PROGRAM_ARGUMENT to
program_name,
drop a program argument by specifying the argument
argument_position)
position.
DROP_PROGRAM_ARGUMENT( n/a Use the second form of DROP_PROGRAM_ARGUMENT
program_name, argument_name)
to drop a program argument by specifying the
argument name.
DROP_SCHEDULE(schedule_name, n/a Use the DROP SCHEDULE procedure to drop a
force)
schedule.
ENABLE(name, n/a Use the ENABLE command to enable a program or
commit_semantics)
job.
EVALUATE_CALENDAR_STRING( n/a Use EVALUATE_CALENDAR_STRING to review the
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 183
Database Compatibility for Oracle® Developers
Built-in Package Guide
Function/Procedure Return Type Description
calendar_string, start_date, execution date described by a user-defined calendar
return_date_after,
schedule.
next_run_date)
RUN_JOB(job_name, n/a Use the RUN_JOB procedure to execute a job
use_current_session,
immediately.
manually)
SET_JOB_ARGUMENT_VALUE( n/a Use the first form of SET_JOB_ARGUMENT value to
job_name, argument_position,
set the value of a job argument described by the
argument_value)
argument's position.
SET_JOB_ARGUMENT_VALUE( n/a Use the second form of SET_JOB_ARGUMENT value
job_name, argument_name,
to set the value of a job argument described by the
argument_value)
argument's name.
Advanced Server's implementation of DBMS_SCHEDULER is a partial implementation
when compared to Oracle's version. Only those functions and procedures listed in the
table above are supported.
The DBMS_SCHEDULER package is dependent on the pgAgent service; you must have a
pgAgent service installed and running on your server before using DBMS_SCHEDULER.
Before using DBMS_SCHEDULER, a database superuser must create the catalog tables in
which the DBMS_SCHEDULER programs, schedules and jobs are stored. Use the psql
client to connect to the database, and invoke the command:
CREATE EXTENSION dbms_scheduler;
By default, the dbms_scheduler extension resides in the
contrib/dbms_scheduler_ext subdirectory (under the Advanced Server
installation).
Note that after creating the DBMS_SCHEDULER tables, only a superuser will be able to
perform a dump or reload of the database.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 184
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.1 Using Calendar Syntax to Specify a Repeating Interval
The CREATE_JOB and CREATE_SCHEDULE procedures use Oracle-styled calendar syntax
to define the interval with which a job or schedule is repeated. You should provide the
scheduling information in the repeat_interval parameter of each procedure.
repeat_interval is a value (or series of values) that define the interval between the
executions of the scheduled job. Each value is composed of a token, followed by an
equal sign, followed by the unit (or units) on which the schedule will execute. Multiple
token values must be separated by a semi-colon (;).
For example, the following value:
FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=17;BYMINUTE=45
Defines a schedule that is executed each weeknight at 5:45.
The token types and syntax described in the table below are supported by Advanced
Server:
Token type Syntax Valid Values
FREQ FREQ=predefined_interval Where predefined_interval is
one of the following: YEARLY,
MONTHLY, WEEKLY, DAILY,
HOURLY, MINUTELY. The SECONDLY
keyword is not supported.
BYMONTH BYMONTH=month(, month)... Where month is the three-letter
abbreviation of the month name: JAN
| FEB | MAR | APR | MAY |
JUN | JUL | AUG | SEP | OCT
| NOV | DEC
BYMONTH BYMONTH=month(, month)... Where month is the numeric value
representing the month: 1 | 2 | 3
| 4 | 5 | 6 | 7 | 8 | 9 | 10
| 11 | 12
BYMONTHDAY BYMONTHDAY=day_of_month Where day_of_month is a value
from 1 through 31
BYDAY BYDAY=weekday Where weekday is a three-letter
abbreviation or single-digit value
representing the day of the week.
Monday MON 1
Tuesday TUE 2
Wednesday WED 3
Thursday THU 4
Friday FRI 5
Saturday SAT 6
Sunday SUN 7
BYDATE BYDATE=date(, date)... Where date is YYYYMMDD.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 185
Database Compatibility for Oracle® Developers
Built-in Package Guide
YYYY is a four-digit year
representation of the year,
MM is a two-digit representation of the
month,
and DD is a two-digit day
representation of the day.
BYDATE BYDATE=date(, date)... Where date is MMDD.
MM is a two-digit representation of the
month,
and DD is a two-digit day
representation of the day
BYHOUR BYHOUR=hour Where hour is a value from 0
through 23.
BYMINUTE BYMINUTE=minute Where minute is a value from 0
through 59.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 186
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.2 CREATE_JOB
Use the CREATE_JOB procedure to create a job. The procedure comes in two forms; the
first form of the procedure specifies a schedule within the job definition, as well as a job
action that will be invoked when the job executes:
CREATE_JOB(
job_name IN VARCHAR2,
job_type IN VARCHAR2,
job_action IN VARCHAR2,
number_of_arguments IN PLS_INTEGER DEFAULT 0,
start_date IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
repeat_interval IN VARCHAR2 DEFAULT NULL,
end_date IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
job_class IN VARCHAR2 DEFAULT 'DEFAULT_JOB_CLASS',
enabled IN BOOLEAN DEFAULT FALSE,
auto_drop IN BOOLEAN DEFAULT TRUE,
comments IN VARCHAR2 DEFAULT NULL)
The second form uses a job schedule to specify the schedule on which the job will
execute, and specifies the name of a program that will execute when the job runs:
CREATE_JOB(
job_name IN VARCHAR2,
program_name IN VARCHAR2,
schedule_name IN VARCHAR2,
job_class IN VARCHAR2 DEFAULT 'DEFAULT_JOB_CLASS',
enabled IN BOOLEAN DEFAULT FALSE,
auto_drop IN BOOLEAN DEFAULT TRUE,
comments IN VARCHAR2 DEFAULT NULL)
Parameters
job_name
job_name specifies the optionally schema-qualified name of the job being
created.
job_type
job_type specifies the type of job. The current implementation of CREATE_JOB
supports a job type of PLSQL_BLOCK or STORED_PROCEDURE.
job_action
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 187
Database Compatibility for Oracle® Developers
Built-in Package Guide
If job_type is PLSQL_BLOCK, job_action specifies the content of the
PL/SQL block that will be invoked when the job executes. The block must be
terminated with a semi-colon (;).
If job_type is STORED_PROCEDURE, job_action specifies the optionally
schema-qualified name of the procedure.
number_of_arguments
number_of_arguments is an INTEGER value that specifies the number of
arguments expected by the job. The default is 0.
start_date
start_date is a TIMESTAMP WITH TIME ZONE value that specifies the first
time that the job is scheduled to execute. The default value is NULL, indicating
that the job should be scheduled to execute when the job is enabled.
repeat_interval
repeat_interval is a VARCHAR2 value that specifies how often the job will
repeat. If a repeat_interval is not specified, the job will execute only once.
The default value is NULL.
end_date
end_date is a TIMESTAMP WITH TIME ZONE value that specifies a time after
which the job will no longer execute. If a date is specified, the end_date must
be after start_date. The default value is NULL.
Please note that if an end_date is not specified and a repeat_interval is
specified, the job will repeat indefinitely until it is disabled.
program_name
program_name is the name of a program that will be executed by the job.
schedule_name
schedule_name is the name of the schedule associated with the job.
job_class
job_class is accepted for compatibility and ignored.
enabled
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 188
Database Compatibility for Oracle® Developers
Built-in Package Guide
enabled is a BOOLEAN value that specifies if the job is enabled when created.
By default, a job is created in a disabled state, with enabled set to FALSE. To
enable a job, specify a value of TRUE when creating the job, or enable the job with
the DBMS_SCHEDULER.ENABLE procedure.
auto_drop
The auto_drop parameter is accepted for compatibility and is ignored. By
default, a job's status will be changed to DISABLED after the time specified in
end_date.
comments
Use the comments parameter to specify a comment about the job.
Example
The following example demonstrates a call to the CREATE_JOB procedure:
EXEC
DBMS_SCHEDULER.CREATE_JOB (
job_name => 'update_log',
job_type => 'PLSQL_BLOCK',
job_action => 'BEGIN INSERT INTO my_log VALUES(current_timestamp);
END;',
start_date => '01-JUN-15 09:00:00.000000',
repeat_interval => 'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=17;',
end_date => NULL,
enabled => TRUE,
comments => 'This job adds a row to the my_log table.');
The code fragment creates a job named update_log that executes each weeknight at
5:00. The job executes a PL/SQL block that inserts the current timestamp into a logfile
(my_log). Since no end_date is specified, the job will execute until it is disabled by
the DBMS_SCHEDULER.DISABLE procedure.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 189
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.3 CREATE_PROGRAM
Use the CREATE_PROGRAM procedure to create a DBMS_SCHEDULER program. The
signature is:
CREATE_PROGRAM(
program_name IN VARCHAR2,
program_type IN VARCHAR2,
program_action IN VARCHAR2,
number_of_arguments IN PLS_INTEGER DEFAULT 0,
enabled IN BOOLEAN DEFAULT FALSE,
comments IN VARCHAR2 DEFAULT NULL)
Parameters
program_name
program_name specifies the name of the program that is being created.
program_type
program_type specifies the type of program. The current implementation of
CREATE_PROGRAM supports a program_type of PLSQL_BLOCK or PROCEDURE.
program_action
If program_type is PLSQL_BLOCK, program_action contains the PL/SQL
block that will execute when the program is invoked. The PL/SQL block must be
terminated with a semi-colon (;).
If program_type is PROCEDURE, program_action contains the name of the
stored procedure.
number_of_arguments
If program_type is PLSQL_BLOCK, this argument is ignored.
If program_type is PROCEDURE, number_of_arguments specifies the
number of arguments required by the procedure. The default value is 0.
enabled
enabled specifies if the program is created enabled or disabled:
 If enabled is TRUE, the program is created enabled.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 190
Database Compatibility for Oracle® Developers
Built-in Package Guide
 If enabled is FALSE, the program is created disabled; use the
DBMS_SCHEDULER.ENABLE program to enable a disabled program.
The default value is FALSE.
comments
Use the comments parameter to specify a comment about the program; by
default, this parameter is NULL.
Example
The following call to the CREATE_PROGRAM procedure creates a program named
update_log:
EXEC
DBMS_SCHEDULER.CREATE_PROGRAM (
program_name => 'update_log',
program_type => 'PLSQL_BLOCK',
program_action => 'BEGIN INSERT INTO my_log VALUES(current_timestamp);
END;',
enabled => TRUE,
comment => 'This program adds a row to the my_log table.');
update_log is a PL/SQL block that adds a row containing the current date and time to
the my_log table. The program will be enabled when the CREATE_PROGRAM procedure
executes.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 191
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.4 CREATE_SCHEDULE
Use the CREATE_SCHEDULE procedure to create a job schedule. The signature of the
CREATE_SCHEDULE procedure is:
CREATE_SCHEDULE(
schedule_name IN VARCHAR2,
start_date IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
repeat_interval IN VARCHAR2,
end_date IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
comments IN VARCHAR2 DEFAULT NULL)
Parameters
schedule_name
schedule_name specifies the name of the schedule.
start_date
start_date is a TIMESTAMP WITH TIME ZONE value that specifies the date
and time that the schedule is eligible to execute. If a start_date is not
specified, the date that the job is enabled is used as the start_date. By default,
start_date is NULL.
repeat_interval
repeat_interval is a VARCHAR2 value that specifies how often the job will
repeat. If a repeat_interval is not specified, the job will execute only once,
on the date specified by start_date.
For information about defining a repeating schedule for a job, see Section 0.
Please note: you must provide a value for either start_date or
repeat_interval; if both start_date and repeat_interval are NULL,
the server will return an error.
end_date IN TIMESTAMP WITH TIME ZONE DEFAULT NULL
end_date is a TIMESTAMP WITH TIME ZONE value that specifies a time after
which the schedule will no longer execute. If a date is specified, the end_date
must be after the start_date. The default value is NULL.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 192
Database Compatibility for Oracle® Developers
Built-in Package Guide
Please note that if a repeat_interval is specified and an end_date is not
specified, the schedule will repeat indefinitely until it is disabled.
comments IN VARCHAR2 DEFAULT NULL)
Use the comments parameter to specify a comment about the schedule; by
default, this parameter is NULL.
Example
The following code fragment calls CREATE_SCHEDULE to create a schedule named
weeknights_at_5:
EXEC
DBMS_SCHEDULER.CREATE_SCHEDULE (
schedule_name => 'weeknights_at_5',
start_date => '01-JUN-13 09:00:00.000000'
repeat_interval => 'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI;BYHOUR=17;',
comments => 'This schedule executes each weeknight at 5:00');
The schedule executes each weeknight, at 5:00 pm, effective after June 1, 2013. Since no
end_date is specified, the schedule will execute indefinitely until it is disabled with
DBMS_SCHEDULER.DISABLE.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 193
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.15.5 DEFINE_PROGRAM_ARGUMENT
Use the DEFINE_PROGRAM_ARGUMENT procedure to define a program argument. The
DEFINE_PROGRAM_ARGUMENT procedure comes in two forms; the first form defines an
argument with a default value:
DEFINE_PROGRAM_ARGUMENT(
program_name IN VARCHAR2,
argument_position IN PLS_INTEGER,
argument_name IN VARCHAR2 DEFAULT NULL,
argument_type IN VARCHAR2,
default_value IN VARCHAR2,
out_argument IN BOOLEAN DEFAULT FALSE)