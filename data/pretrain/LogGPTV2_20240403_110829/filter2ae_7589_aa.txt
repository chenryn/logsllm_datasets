### 一、前言
前段时间分析了一个开源waf项目学习了[lua-waf工作原理](https://xz.aliyun.com/t/10803)，作者调用nginx三方模块（
`lua_nginx_module`
）提供的api在access阶段插入lua代码对请求包过滤，学习过程中发现这些api还可以做些有意思的事，于是产生了一个想法，写一个反向代理安全网关，本篇文章则是对实现过程的一个记录，初期规划功能和已完成项如下：
  * 防御shiro反序列化攻击
  * 防御自动化工具请求
  * 保护网站前端代码
  * 防御多源代理请求
  * 防止敏感信息泄漏
### 二、过程记录
#### 2.0 环境搭建
##### 01 openresty
使用集成了lua和nginx的openresty组件
  * 配置yum源
    # add the yum repo:
    wget https://openresty.org/package/centos/openresty.repo
    sudo mv openresty.repo /etc/yum.repos.d/
    # update the yum index:
    sudo yum check-update
  * 安装openresty
    # 安装openresty
    sudo yum install -y openresty
    # 安装命令行工具
    sudo yum install -y openresty-resty
    # 安装成功
    openresty -V 2>&1 | sed "s/\s\+--/\n --/g"
    nginx version: openresty/1.19.9.1
    built by gcc 8.4.1 20200928 (Red Hat 8.4.1-1) (GCC)
    built with OpenSSL 1.1.1k  25 Mar 2021 (running with OpenSSL 1.1.1l  24 Aug 2021)
    TLS SNI support enabled
    configure arguments:
     --prefix=/usr/local/openresty/nginx
     --with-cc-opt='-O2 -DNGX_LUA_ABORT_AT_PANIC -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl111/include'
     --add-module=../ngx_devel_kit-0.3.1
     --add-module=../echo-nginx-module-0.62
     --add-module=../xss-nginx-module-0.06
     --add-module=../ngx_coolkit-0.2
     --add-module=../set-misc-nginx-module-0.32
     --add-module=../form-input-nginx-module-0.12
     --add-module=../encrypted-session-nginx-module-0.08
     --add-module=../srcache-nginx-module-0.32
     --add-module=../ngx_lua-0.10.20
     --add-module=../ngx_lua_upstream-0.07
     --add-module=../headers-more-nginx-module-0.33
     --add-module=../array-var-nginx-module-0.05
     --add-module=../memc-nginx-module-0.19
     --add-module=../redis2-nginx-module-0.15
     --add-module=../redis-nginx-module-0.3.7
     --add-module=../ngx_stream_lua-0.0.10
     --with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl111/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl111/lib'
     --with-cc='ccache gcc -fdiagnostics-color=always'
     --with-pcre-jit
     --with-stream
     --with-stream_ssl_module
     --with-stream_ssl_preread_module
     --with-http_v2_module
     --without-mail_pop3_module
     --without-mail_imap_module
     --without-mail_smtp_module
     --with-http_stub_status_module
     --with-http_realip_module
     --with-http_addition_module
     --with-http_auth_request_module
     --with-http_secure_link_module
     --with-http_random_index_module
     --with-http_gzip_static_module
     --with-http_sub_module
     --with-http_dav_module
     --with-http_flv_module
     --with-http_mp4_module
     --with-http_gunzip_module
     --with-threads
     --with-compat
     --with-stream
     --with-http_ssl_module
  * 文件结构
    # 查找命令路径
    which openresty
    /usr/bin/openresty
    # 查看原始文件
    ll /usr/bin/openresty
    lrwxrwxrwx 1 root root 37 8月   7 05:31 /usr/bin/openresty -> /usr/local/openresty/nginx/sbin/nginx
    # 查看跟路径结构
    tree /usr/local/openresty/ -L 1
    /usr/local/openresty/
    ├── bin
    ├── COPYRIGHT
    ├── luajit
    ├── lualib
    ├── nginx
    ├── openssl111
    ├── pcre
    ├── site
    └── zlib
  * 常用命令
    openresty -t # 检查配置文件是否正确 nginx.conf
    openresty -s -reload  # 不停止nginx服务，重新加载配置，生成新worker
    openresty -s -reopen  # 不停止nginx服务，重新打开日志文件，用于分割日志
    openresty -s -stop  # 快速停止nginx
    openresty -s -quit  # 等待正在处理的请求完成后再进行停止nginx
##### 02 node
    # yum安装node
    curl -fsSL https://rpm.nodesource.com/setup_17.x | bash -    sudo yum install -y nodejs
    # 安装成功
    node -v
    v17.4.0
    npm -v
    8.3.1
    # 安装babel
    npm -g install @babel/generator@7.16.8
    npm -g install @babel/parser@7.16.8
    npm -g install @babel/traverse@7.16.8
    npm -g install @babel/types@7.16.8
    npm -g list
    /usr/lib
    ├── @babel/generator@7.16.8
    ├── @babel/parser@7.16.8
    ├── @babel/traverse@7.16.8
    ├── @babel/types@7.16.8
    ├── corepack@0.10.0
    └── npm@8.3.1
    # 添加环境变量
    npm -g root
    /usr/lib/node_modules
    vi ~/.bashrc
    export NODE_PATH=/usr/lib/node_modules
#### 2.1 防御shiro反序列化攻击
##### 01 特征分析
shiro反序列化漏洞由硬编码泄漏而产生，通常攻击者会在本地生成不同利用链的恶意序列化语句，然后放于cookie中批量对服务器发起爆破，此时payload为序列化后再aes加密的base64数据没有明显攻击特征
##### 02 方案确定
传统waf设备基于特征匹配对于这类攻击较难发力，但如果是介入在客户端与服务器之间的反向代理网关则可以修改http数据包内容
  * 对服务器下发的cookie加密
  * 对客户端传来的cookie解密
  * 对不认识的cookie直接丢弃
##### 03 功能实现
处理用户发来的请求：验证客户http请求的cookie，没有特定cookie返回403，存在但解密失败返回403，解密成功后放行
    function reqCookieParse()
        if ShiroProtect then  -- 检查是否启用该功能
            local userCookie = ngx.var.cookie_x9i7RDYX23  -- 获取请求头key为x9i7RDYX23的cookie值
            if not userCookie then  -- 没有cookie时
                log('0-cookie 无cookie', '') -- 放行
            elseif #userCookie < 32 then  -- cookie长度不符合要求时
                log('1-cookie 不符合要求', userCookie)
                say_html() -- 拦截，返回403
            else  --有cookie时
                local userCookieX9 = ngx.var.cookie_x9i7RDYX23
                if not userCookieX9 then  -- 检查是否存在x9i7RDYX23
                    log('2-cookie 没有cookiex9', userCookie)
                    say_html()
                else
                    local result = xpcall(dencrypT, errPrint, userCookieX9)  -- 检查是否可以解密
                    if not result then -- 解密失败时
                        log('3-cookie 无法解密', userCookie)
                        say_html()  -- 拦截，返回403
                    else  -- 解密成功时
                        local originCookie = StrToTable(dencrypT(userCookieX9))  -- 当存在多个cookie时，将table转化为string
                        ngx.req.set_header('Cookie', transTable(originCookie))  -- 按照xxx=111;yyy=222的格式拼接cookie
                        log('4-cookie 解密成功', userCookie)
                    end
                end
            end
        end
    end
处理服务器返回的响应：当上游返回的头包含`Set-Cookie`字段时候触发规则，对cookie进行加密
    function respCookieEncrypt()
        if ShiroProtect then  -- 检查是否启用该功能
            local value = ngx.resp.get_headers()["Set-Cookie"]  -- 检查服务器是否下发cookie
            if value then  -- 服务器下发cookie时
                local encryptedCookie = cookieKey.."="..encrypT(TableToStr(value))  -- 将cookie从table转化为string，然后对全部cookie加密，并存放在新的字段中
                ngx.header["Set-Cookie"] = encryptedCookie  -- 添加响应头
                log('5-cookie 加密成功',encryptedCookie)
            end
        end
    end
记录日志，格式为：
  * `ip`+`时间`+`请求方法`+`服务器名`+`请求地址`+`规则标识`+`ua`+`其他数据`
    function getClientIp()  -- 调用nginx变量，返回真实ip
        IP  = ngx.var.remote_addr  -- 从tcp连接中取客户端ip
        if IP == nil then
            IP  = "unknown"
        end
        return IP
    end
    function write(logfile,msg)  -- 写文件操作
        local fd = io.open(logfile,"ab")
        if fd == nil then return end
        fd:write(msg)
        fd:flush()
        fd:close()
    end
    function log(data, ruletag)
        if Attacklog then  -- 检查是否启用该功能
            local realIp = getClientIp()  -- 获取客户端ip
            local method = ngx.var.request_method  -- 获取请求方法
            local ua = ngx.var.http_user_agent  -- 获取ua
            local servername=ngx.var.server_name  -- 获取nginx配置文件的servr_name
            local url = ngx.var.request_uri  -- 获取path+args
            local time=ngx.localtime()  -- 获取nginx当前时间
            if ua  then
                line = realIp.." ["..time.."] \""..method.." "..servername..url.."\" \""..ruletag.."\"  \""..ua.."\" \""..data.."\"\n"
            else
                line = realIp.." ["..time.."] \""..method.." "..servername..url.."\" \""..ruletag.."\" - \""..data.."\"\n"
            end
            local filename = logpath..'/'..servername.."_"..ngx.today().."_sec.log"  -- 以天为文件名保存日志