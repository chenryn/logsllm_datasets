### 2708-2714: Code and Comments
```c
// "1−"
sid->str.len += 2;

// tsk
fprintf(stderr, "Revision: %i\n", sid->revision);

// This check helps prevent processing of invalid data, which was noticed while testing a failing hard drive.
if (sid->revision == 1) {
    // This variable is computed with an arbitrary 32-bit offset (line 2704) from an existing buffer (line 2706) without any bounds checking.
}
```

### 5.6.1 Reproduction
```sh
$ patch.py NtfsPart.dsk Bad.dsk 10667177 \x9b
$ fstat Bad.dsk
```

### 5.7 NTFS Image Causes fsstat to Crash
`fstat` crashes while processing a corrupted filesystem image. The crash occurs while copying data from the `sds` variable (line 2831) in `ntfs.c`. Although checks are in place at line 2817 to prevent out-of-bounds reads, these checks are based on the offset computed in terms of 32-bit values (line 2809), not in terms of bytes. The check assumes that the current offset is a byte count, which would be four times larger.

#### Relevant Code
```c
while (total_bytes_processed < size) {
    current_offset = (uint_ptr_t*) sds - (uint_ptr_t*) sds_buffer->buffer;
    offset = getu32(fs->endian, sds->entsize);
    if (offset % 16) {
        offset = ((offset / 16) + 1) * 16;
    }
    if ((offset != 0) && (offset <= size - current_offset) && (getu64(fs->endian, sds->file_off) <= size)) {
        NTFS_SDS_ENTRY* sds_entry;
        if ((sds_entry = (NTFS_SDS_ENTRY*) mymalloc(sizeof(NTFS_SDS_ENTRY))) == NULL) {
            return 1;
        }
        if ((sds_entry->data = (uint8_t*) mymalloc(offset)) == NULL) {
            free(sds_entry);
            return 1;
        }
        memcpy(sds_entry->data, sds, offset);
    }
}
```

### 5.7.1 Reproduction
```sh
$ patch.py NtfsPart.dsk Bad.dsk 10666450 \x01
$ fsstat Bad.dsk
```

### 6. Defects Found in Guidance EnCase
EnCase from Guidance Software is a Windows-only tool with a complex GUI, featuring browsing, searching, and displaying capabilities for devices, filesystems, and data files. It also includes its own programming language, Enscript, which resembles C++ and Java. Like TSK, EnCase showed numerous defects with relatively simple fuzzing techniques, and we also created targeted, domain-specific faults in test data, such as carefully crafted partition tables and NTFS directory structures. We tested EnCase versions 6.2 and 6.5.

### 6.1 Note
Due to the deadline for submitting presentation materials to Black Hat and the ongoing nature of our conversation with Guidance Software, we are unable to present all the details of the defects in EnCase that we found in this revision of the paper. By the time you read this, the canonical version may have the defect details. Please see [https://www.isecpartners.com/blackhat/](https://www.isecpartners.com/blackhat/) for the most recent version of this paper. We apologize for the inconvenience.

### 6.2 Disk Image With Corrupted MBR Partition Table Cannot Be Acquired
EnCase cannot properly acquire disks with certain corrupted MBR partition tables. When running `linen` on a system with a disk that has a carefully crafted partition table (including many partition table entries), `linen` won't start up properly. If `linen` is started before corrupting the image, it will start up, but EnCase will hang indefinitely while acquiring the image. (It is possible to cancel out of the `linen` import.)

If a disk image is made and transferred to the EnCase workstation and acquired as a raw disk image, EnCase will hang indefinitely while attempting to acquire the image. There is no way to cancel this process, and the GUI becomes unresponsive. The root cause appears to be due to the overly large values in the 29th partition table entry. We were unable to reproduce this issue in similar situations with a small number of partitions.

### 6.3 Corrupted NTFS Filesystem Crashes EnCase During Acquisition
EnCase crashes while acquiring certain corrupted NTFS partitions. The crash occurs when EnCase processes FILE records that contain a larger-than-expected offset to the update sequence value, causing it to read past the end of a buffer, resulting in a read access violation. Here is an example FILE record that causes the crash.

### 6.4 Corrupted Microsoft Exchange Database Crashes EnCase During Search and Analysis
EnCase crashes while searching/analyzing a filesystem containing a corrupted Microsoft Exchange database. The crash occurs during the searching phase of an acquisition where all Search, Hash, and Signature Analysis options are enabled. The crash appears to be a read access violation with a bad value in `eax` that is dereferenced, but the exact value in `eax` changes frequently. We have not determined the full implications of this problem.

### 6.5 Corrupted NTFS Filesystem Causes Memory Allocation Error
EnCase reports memory allocation errors when acquiring corrupted NTFS images. The size of memory being allocated is under the control of the attacker. iSEC has not found any ill effects caused by this error condition other than an error being displayed and corrupted records not being displayed.

### 6.6 EnCase and Linux Interpret NTFS Filesystems Differently
EnCase and Linux appear to use different NTFS metadata when parsing directory structures. We created an NTFS image with a directory loop by modifying an NTFS filesystem and replacing a directory entry for a file with a reference to the directory's parent directory. When mounting this directory in Linux, the modification was as expected, and a directory loop was present. However, when importing this image into EnCase, the loop was not present, and the original file was still visible in the directory, but other files in the directory were not displayed.

This difference in behavior can be used by an attacker to hide data on a disk. An NTFS image can be constructed that has one interpretation on Linux and another in EnCase. We manually edited an NTFS image to create a directory loop, which was visible in Linux (using the NTFS-3g driver) but not in EnCase. This indicates that EnCase and Linux give different interpretations to NTFS images, likely by using different parts of the redundant information stored in the filesystem. An attacker could abuse this inconsistency to hide data that could only be viewed in Linux and not in EnCase.

### 6.7 EnCase Crashes When Viewing Certain Deeply Nested Directories
We created NTFS images with very deeply nested directories and observed that EnCase would crash in different ways after the image was acquired when performing the "Expand All" action or when manually expanding the subdirectory views in the file browsing GUI. Some of these crashes were caused by the program using a return address on the stack that had been overwritten. The values being written to the stack were small integers. While we were able to manipulate the value of these integers to some degree, we were unable to exploit this flaw for arbitrary code execution.

### 7. Conclusion
We performed focused, shallow, and narrow testing of EnCase and The Sleuth Kit, yet immediately found security flaws with simple attack techniques. We believe these vulnerabilities exist for several reasons:

1. **Forensic software vendors are not paranoid enough.** Vendors must operate under the assumption that their software is under concerted attack. After all, the software is often used to examine evidence seized from suspected computer criminals and from computers suspected to have been compromised by an attacker — that is, the evidence has been under the control of someone capable and motivated to frustrate an investigation against them or to attack again.

2. **Vendors do not take advantage of the protections for native code that platforms provide.** Such protections include stack overflow protection, memory page protection (e.g., ensuring that the write bit is unset whenever the execute bit is set on a page), and safe exception handling (specific to Microsoft C). EnCase, in particular, is not designed to be run by a low-privilege user, ensuring that any successful code-execution attack runs with maximum privilege on the forensic workstation. The use of managed code eliminates many types of attacks altogether.

3. **Forensic software customers use insufficient acceptance criteria when evaluating software packages.** Criteria typically address only functional correctness during evidence acquisition (not analysis) when no attacker is present. However, forensic investigations are adversarial. Therefore, customers should pressure vendors to observe the practices mentioned above and to perform negative testing against the product.

4. **The software and methods for testing the quality of forensic software should be public.** Carrier notes that sufficient public testing tools, results, and methodologies either don’t exist or are not public. Making these public will help customers know what they are getting and where they may be vulnerable, and may even raise the standard of testing and improve the quality of the software.

### 7.1 Future Work
We have only scratched the surface of the broad attack surface of the products we investigated. We fuzzed and manipulated only some of the most common data types and only in simple ways. Other data formats and more sophisticated attacks are likely to bring more defects to the surface.

### 7.2 Acknowledgements
We thank the vendors, Guidance Software and Brian Carrier, for their fast and helpful responses to our issue reports. Thanks also go to Jesse Burns for his help in debugging software on Windows and for the original authorship of the mutation functions we used in fuzzing.

### References
1. [http://www.cftt.nist.gov/DA-ATP-pc-01.pdf](http://www.cftt.nist.gov/DA-ATP-pc-01.pdf)
2. [http://dftt.sourceforge.net/](http://dftt.sourceforge.net/)
3. [http://www.seccuris.com/documents/papers/Seccuris-Antiforensics.pdf](http://www.seccuris.com/documents/papers/Seccuris-Antiforensics.pdf)
4. [http://www.blackhat.com/presentations/bh-usa-05/bh-us-05-foster-liu-update.pdf](http://www.blackhat.com/presentations/bh-usa-05/bh-us-05-foster-liu-update.pdf)
5. [http://metasploit.com/projects/antiforensics/](http://metasploit.com/projects/antiforensics/)
6. [http://www.simson.net/clips/academic/2007.ICIW.AntiForensics.pdf](http://www.simson.net/clips/academic/2007.ICIW.AntiForensics.pdf)
7. B. Carrier. File System Forensic Analysis. Addison Wesley, 2005.

[http://www.isecpartners.com](http://www.isecpartners.com)