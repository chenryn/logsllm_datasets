    import java.io.InputStream;
    import java.io.InputStreamReader;
    public class Attachthings {
        public static void main(String[] args) throws Exception {
    //        1、find vm
            String pid = getpid().trim();
            VirtualMachine vm = VirtualMachine.attach(pid);
    //        2、find agentfile
            String path = Attachthings.class.getProtectionDomain().getCodeSource().getLocation().getPath();
            String currentPath = Attachthings.class.getProtectionDomain().getCodeSource().getLocation().getPath();
            currentPath = currentPath.substring(0, currentPath.lastIndexOf("/") + 1);
    //        System.out.println("path:"+currentPath);
            String agentfile = currentPath.substring(1,currentPath.length())+"Scanner_agent-1.0-SNAPSHOT-jar-with-dependencies.jar".replace("/","\\");
    //        3、load
            vm.loadAgent(agentfile);
    //        vm.detach();
        }
        private static String getpid() throws Exception{
            Process ps = Runtime.getRuntime().exec("jps");
            InputStream is = ps.getInputStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader bis = new BufferedReader(isr);
            String line;
            StringBuilder sb = new StringBuilder();
            String result = null;
            while((line=bis.readLine())!=null){
                sb.append(line+";");
            }
            String  [] xx= sb.toString().split(";");
            for (String x : xx){
                if (x.contains("Bootstrap")) //find tomcat
                {
                    result=x.substring(0,x.length()-9);
                }
            }
            return result;
        }
    }
**简单测试：**
开启tomcat服务器：
注入agent内存马：
测试内存马：anyurl?passwod=ga0weI&cmd=xxxx
注入成功！
测试查杀：
Tomcat日志：
再次访问内存马：
可以看到注入的内存马已经被干掉了：
我们来简单看下干掉过程中输出的两个文件：
getApplicationFilterChain.class是我们利用读出来的原始类：
其中getclassfileBuffer.class是被内存马修改之后的文件：
#### 2）、第一类和第二类内存马的检测和查杀
其实第一类通过动态注册Servlet组件实现的内存马和第二类动态注册框架组件实现的内存马的原理 **都是通过动态注册组件** 来实现的。
在动态注册组件的时候不管是注册的是Servlet还是Filter、Listener、Controller，其都要创建新的类并继承相应组件的父类，新创建的类加载到jvm内存中之后，我们就可以通过java
tools中的Instrumentation.getAllLoadedClasses()获取到，所以这两类内存马也可以通过javaagent技术来实现查杀；只是通过Instrumentation.getAllLoadedClasses()获取到对应类名之后的过滤条件不同了，查杀agent型内存马的时候，我们是通过检查常见通用类的字节码实现是否发生了改变来实现内存马的排查；针对第一类和第二类的话就存在一些差异：
  * 1、首先先判断加载到内存中的类，从类继承的角度去判断是否继承了如javax.servlet.Servlet、javax.servlet.Filter、javax.servlet.ServletRequestListener接口
  * 2、对于1中匹配到的类肯定也不能一棒子打死，因为正常实现的组件都会匹配到，所以我们还要进一步的检测内存马的特征：
    * 类名关键词检测，检测类名是否存在如：shell、memshell、noshell、cmd等敏感词
    * 对关键方法字节码实现关使用键词检测，检测类关键方法字节码实现中是否存在一些敏感词：如cmd、shell、exec；如：在Filter类里面的doFilter方法，Servlet里面的services方法。
    * 命令执行类检测，检测器字节码实现中是否存在调用Runtime、ProcessBuilder类可以用来执行命令的类
**这种情况下当我们检测到内存马的时候，怎么查杀呢？**
在哥斯拉中卸载此类内存马使用的方式是利用上下文对象来删除对应映射关系，最后做到无痕卸载。但是在这里我们没办法通过javaagent技术实现，我们能做到的是修改其实现内存马的字节码，修改为一个无害的代码，但是注册的url以及对应的映射逻辑不会发生改变；也就是如果之前
在 **xxx:8080/memshell** 路径下存在内存马，我们通过javaagent实现的查杀之后的效果是，
**xxx:8080/memshell** 这个路径仍存在，但其传入相关参数从而实现命令执行的逻辑没有了。
**虽然存在一个小小的缺陷，但是针对第一类和第二类的内存马的检测和查杀也可以使用javaagent技术来实现** 。
#### agent型内存马通过Instrumetation.redefineClasses方法实现的该怎么检测到呢？
之前 **potats0**
师傅提到过一种检测此类内存马的方法，其实就是如何拿到被Instrumentation.redefineClasses方法重载之后的字节码的方法：
一般我们想要实现dump内存中的class的方法有两种：
  * 第一种就是上文提到的用agent attatch 到进程，然后利用 Instrumentation和 ClassFileTransformer就可以获取 到类的字节码了，但是由于该内存马使用redefineClasses实现的一个特殊性，该方法不能获取到类的字节码。
  * 第二种就是使用 sd-jdi.jar里的工具
这里potats0师傅就是提到使用sd-jdi.jar这个工具能实现获取此内存马的字节码：
使用命令`java -cp .\sa-jdi.jar sun.jvm.hotspot.HSDB`开启相关组件
找到Tomcat对应pid，attach进去：
找到对应类ApplicationFilterChaind的dointernalFilter方法的实现：
所以通过对该工具的调用可以实现对利用Instrumentation.redefineClasses实现的agent内存马的检测。
清除的话和上文提到利用Instrumentation.retransformerClasses实现的agent型内存马的方式一样，通过javassist获取该类原始字节码，在tranformer方法里面return即可。
测试最刚开始上文中提到的javaagent注入demo中使用redefineClasses实现的java_agent注入，成功获取替换之后的字节码文件：
#### 总结
所以javaagent技术和javassist技术结合再加上sd-jdi.jar便可以完成全部类型的内存马的检测和清除，这里指没有实现反查杀手段的内存马。
> 其实除了上面提到的检测技术之外还存在其他的一些检测技术如：使用Visval VM 检测
> Mbean对象的情况可以检测第一种和第二种通过动态注册组件的实现的内存马，检测原理：动态注册如Filter的时候会触发registerJMX的操作来注册mbean，org.apache.catalina.core.ApplicationFilterConfig的#initFilter实现如下：
>
> 并且该种检测方式被绕过：因为Mbean注册之后是可以卸载的。
>
> 参考长亭科技之前发的文章实现如下：
>  
>  
>     import javax.management.MBeanServer;
>     import javax.management.ObjectName;
>     import java.util.Set;
>     public class UnRegister {
>         static  {
>             try{
>             Class registryClass =
> Class.forName("org.apache.tomcat.util.modeler.Registry");
>             MBeanServer mBeanServer = (MBeanServer)
> registryClass.getMethod("getMBeanServer").invoke(
> registryClass.getMethod("getRegistry", Object.class,
> Object.class).invoke(null,null,null));
>             Set objectNameSet = null;
>                 objectNameSet = mBeanServer.queryNames(null, null);
>                 for (ObjectName objectName : objectNameSet) {
>                     if
> ("Filter".equals(objectName.getKeyProperty("j2eeType"))) {
>                         Object filterName =
> mBeanServer.getAttribute(objectName, "filterName");
>                         if ("litchi".equals((String) filterName)) {
>                             mBeanServer.unregisterMBean(objectName);
>                         }
>                     }
>                 }
>             }catch (Exception e) {
>                 e.printStackTrace();
>             }
>         }
>     }
>  
## 4、内存马反查杀技术：
#### 1）、上文有提到冰蝎在使用内存马的时候有一个防检测功能：
其客户端源码实现如下：在其 **net.rebeyond.behinder.ui.controller.MainController**
中对防检测的处理如下：
跟进injectMemShell方法：防检测标志位作为布尔值(isAntiAgent)传入
在上文分析冰蝎内存马实现的时候，我们选取了windows的agent样本反编译分析，在其实现的equal方法中提到了对antiAgrnt的处理：
跟进doAgentShell方法：对防检测标志位为true的处理操作：删除了一个路径为：/tmp/.java_pid+{pid}的文件。
那冰蝎为什么要这么做呢？并且根据冰蝎对该操作的描述（防检测可避免目标JVM进程被注入，可避免内存查杀插件注入，同时容器重启前内存马也无法再次注入），这个操作可以杜绝内存马的查杀并且保证之后agent型内存马注入不进来了。（突发奇想，那这个是不是也可以用在内存马的预防手段上呢？）
我们先来看看冰蝎为什么要做：
上文中讲到 **redefineClass实现的agent型的内存马的查杀** 的时候提到从内存中dump出来class字节码的方法有两种：
  * 1、javaagent Instrumentation配合java.tools vm实现的attach
  * 2、 sd-jdi.jar工具
**其实这就是Java里面的两种Attach机制** ：第一种是 **VirtualMachine.attach（Attach到Attach
Listener线程后执行有限命令）** ；第二种是 **SA工具的attach**
**那这和冰蝎防检测干掉/tmp/.java_pid+{pid}的文件有说明关系呢?**
我们深入了解下agent型内存马中实现使用的attach模式也就是上面的第一种：
> **VirtualMachine.attach方法的实现：**
>
> **（1）信号机制**
>
> JVM启动的时候并不会马上创建Attach Listener线程，而是通过另外一个线程Signal
> Dispatcher在接收到信号处理请求（如jstack，jmap等）时创建临时socket文件/tmp/.java_pid并创建Attach
> Listener线程（external process会先发送一个 **SIGQUIT** 信号给target VM process，target
> VM会创建一个 **Attach Listener** 线程）；
>
> **（2）Unix domain socket**
>
> Attach Listener线程会通过Unix domain socket与external
> process建立连接，之后就可以基于这个socket进行通信了。
>
> 创建好的Attach
> Listener线程会负责执行这些命令（从队列里不断取AttachOperation，然后找到请求命令对应的方法进行执行，比如jstack命令，找到 {
> “threaddump”, thread_dump }的映射关系，然后执行thread_dump方法）并且把结果通过 **.java_pid**
> 文件返回给发送者。
>
> 整个过程中，会有两个文件被创建：
>
> **.attach_pid****  **，external process会创建这个文件，为的是触发Attach
> Listener线程的创建，因为SIGQUIT信号不是只有external process才会发的，通过这个文件来告诉target
> VM，有attach请求过来了（如果**.attach_pid**创建好了，说明Attach
> Listener线程已经创建成功）。相关代码在[LinuxVirtualMachine.java](https://link.jianshu.com?t=http%3A%2F%2Fhg.openjdk.java.net%2Fjdk7u%2Fjdk7u%2Fjdk%2Ffile%2F70e3553d9d6e%2Fsrc%2Fsolaris%2Fclasses%2Fsun%2Ftools%2Fattach%2FLinuxVirtualMachine.java%23l280)中；
>
> **.java_pid**** **，target VM会创建这个文件，这个是因为Unix domain
> socket本身的实现机制需要去创建一个文件，通过这个文件来进行IPC。相关代码在[attachListener_linux.cpp](https://link.jianshu.com?t=http%3A%2F%2Fhg.openjdk.java.net%2Fjdk7u%2Fjdk7u%2Fhotspot%2Ffile%2F2cd3690f644c%2Fsrc%2Fos%2Flinux%2Fvm%2FattachListener_linux.cpp%23l172)中。
>
> 其中的都是target VM的pid。
上面是参考简书对VirtualMachine.attach的一些分析；
说直白点说就是使用VirtualMachine.attach时，jvm线程之间的通信管道的建立要用到 **.java_pid****
**这个文件，如果这个文件被干掉了，就阻止和JVM进程通信，从而禁止了Agent的加载。Agent无法注入，上文提到利用改技术实现的检测内存马也就无法实现了，从而实现了反查杀。
#### 2）、究极大佬三梦师傅写过一个叫”ZhouYu“的内存马项目
这个名字起的还是比较有寓意的，我是这么理解的：提到周瑜，自然就想到赤壁之战中的”火“烧连环船，还有就是当下比较火的王者荣耀这款游戏，里面有一个英雄叫周瑜，其技能都是围绕”火”展开的，这两点都让我自然而然的象到“火”这个字，正所谓
**野火吹不尽，春风吹又生** 是吧，说明比较顽强，能够死灰复燃，哈哈哈！以上纯属我的遐想：
该项目中实现的内存马做了一些反查杀的技术实现：通过对加载类的限制，pass掉实现ClassFileTransformer接口的类，从而禁止javaagent的加载，从而阻拦利用javaagent技术实现的内存马检测手段：
但是其实是存在一个时间差问题，potats0师傅在他的文章里面提到了这一点，原文：
>
> 该类内存马的特征在于阻止后续javaagent加载的方式，防止webshell被查杀。我们来看一下代码,在这里其实不影响随后javaagent加载的。原因在于，javaagent修改类的字节码的关键在于用户需要编写继承自`java.lang.instrument.ClassFileTransformer`，去完成修改字节码的工作。而周瑜内存马的方法在于，如果发现某个类继承自`ClassFileTransformer`，则将其字节码修改为空。但是在这里并不会影响JVM加载一个新的javaagent。周瑜内存马该功能只会破坏
> rasp的正常工作。周瑜内存马正常通过javaagent加载并查杀即可，不会受到任何影响的。或者，我们也可以通过redefineClass的方法去修改类的字节码。
之前我也太理解potats0师傅想表达的意思，后来我仔细的推敲了下：
查阅了下Instrumentation这个类的官方文档：其中getAllLoadedClasses（）方法的描述如下:
这个方法是获取所有已经被JVM加载的类的字节码，那么这里面就存在一个时间差问题，新加载的继承了ClassFileTransformer的类，当他首次使用的时候其实他是可以完成其javaagent的加载的，因为此时他并不存在于“
**已经被JVM的加载的类**
”这个范畴里面，所以可以成功加载，但是之后可能会被干掉；所以potats0师傅也提到了，周瑜马这种防查杀的实现会干扰之前存在的rasp的正常工作，因为rasp里面通过javaagent加载进去的类肯定已经属于前面那个范畴了。
这里后续还要实践一波。
## 5、内存马复活技术
上文曾提到：内存马的最大的弱点因为其存在于内存中，所以重启之后就没了；虽然一般来说服务器不会重启，尤其是在业务中的服务器，但是兔子急了也会咬人呀，重启下可以彻底清除，那也比发现了一个后门处理不了好；
接下来学习下内存马的“持久化技术”，也就是复活技术：
> “死肯定是死了，死没死彻底谁知道呢”
>
> ”置之死地而后生“
rebeyond师傅在memshell项目中其实就已经提到了内存马的复活技术：
通过设置Java虚拟机的关闭钩子ShutdownHook来达到内存马复活：ShutdownHook是JDK提供的一个用来在JVM关掉时清理现场的机制，JVM会在以下场景调用这个钩子：
  * 1.程序正常退出
  * 2.使用System.exit()退出
  * 3.用户使用Ctrl+C触发的中断导致的退出
  * 4.用户注销或者系统关机
  * 5.OutofMemory导致的退出
  * 6.Kill pid命令导致的退出所以ShutdownHook可以很好的保证在tomcat关闭时
其源码实现如下：
在agent类里面最后调用了persist方法
在persist方法中为ShutdownHook添加触发的线程：该线程将内存中的agent.jar
、inject.jar还原到文件中去（冰蝎agent内存马注入之后，其inject.jar和agent.jar为了隐蔽都会被干掉，但是其实读到内存里面了）；
并且在其startInject（）方法中调用Runtime.getRuntime.exec来运行 重加载javaagent，从而达到持久化和复活的目的
其他复活技术Studying中.......
# 四、思考和提升
​
通过体系化的学习java内存马技术，首先感受就是java内存马技术还是比较值得学习和研究一波的，里面涉及到的javaagent技术javassist技术，以及相关javaweb的知识技术都是非常经典的。
>
> 就java内存马实现来说，里面涵盖的知识太多了，光是一个Tomcat下的StandardContext对象的获取就可以展开大量的源码研究，以及针对不同框架Weblogic下的动态注册组件的实现等等，都可以展开很多深层面的研究。配合当前主流的weblogic、shrio、fastjson等存在的反序列化导致的任意代码执行的漏洞，可以实现一系化的自动内存马注入工具，用于实战中，本文的开头也有提到，我为什么会展开对内存马的研究，其实就是因为在做数据分析的时候发现了SummerSec师傅写的shrio反序列化集成一键注入内存马的工具；
>
> ​
> 同样目前虽然内存马的查杀技术也较为成熟了，但是我这边没有在网上找到“很全”的内存马查杀工具的实现，大多测试demo，用于做技术研究的，只能检测到部分内存马。后期的话想尝试写一个能用于实际化场景的通用内存马检测和查杀工具，这个工具可以用来应急处置场景。
​
上面提到的都是中招之后的检测和查杀，另一方面，其实预防同样很重要，能够切断内存马注入的途径，先发制敌才是最牛p的；其实在冰蝎内存马的防检测技术那块有提到，后续准备研究研究。
​ 总的来说收获颇丰！！！！！！
​ 文中有错误之处还请各位师傅斧正。