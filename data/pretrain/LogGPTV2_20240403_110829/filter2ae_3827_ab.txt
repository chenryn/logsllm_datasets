搜索上述代码的 StructuralRule 的代码如下
    Field field: field.name == "f" and field.enclosingClass is [Class class: class.name == "C"]
其中 `Field field:` 类似于声明变量， `:` 后面试前面变量需要满足的条件，比如
    field.name == "f"
这个就表示 `field` 的 `name` 为 `f` ，规则后续使用 `and` 表示 **与** 条件，然后通过
`field.enclosingClass` 获取到这个字段位于的`class`，`[...]` 类似于定义一个变量，其返回值为满足条件的对象
    [Class class: class.name == "C"]
上面的语句表示 [] 会返回 类名为 C 的 Class 对象
    field.enclosingClass is [Class class: class.name == "C"]
这条语句的作用就是限制 `field` 所在的类的类名为 `C` ，其实 `StructuralRule`
的作用和使用方式和`Codeql`非常相似，主要就是利用逻辑表达式（and, or...）来匹配代码的特定元素。
下面介绍CharacterizationRule的使用，首先定义 `source` 点
        EE5D-4B1D-A798-4D1B5E081112
其中 `StructuralMatch` 使用 `StructuralRule` 的语法来匹配代码，然后在 `Definition`
里面可以使用一些API（比如TaintSource）和匹配到的代码元素来标记污点跟踪相关的熟悉，比如污点源、`Sink`点等，这里要注意一点：`Definition`
中可以访问到 `StructuralMatch` 中声明的所有变量，不论是通过 `:` 还是通过 `[]` 声明。
上述规则的作用就是
  1. 首先通过 StructuralMatch 匹配到 get_user_input_str 的函数调用对象 fc.
  2. 然后在 Definition ，使用 TaintSource 设置 fc 为污点源，污点标记为 PRIVATE.
`sink` 点的设置
        EE905D4B-A03D-49B2-83E4-4EE043411223
        Input Validation and Representation
        System RCE
        4.0
规则解释如下：
  1. 首先使用 `StructuralMatch` 匹配 `fc` 为 `system` 的函数调用， `e` 为 `fc` 的第0个参数
  2. 然后在 `Definition` 使用 `TaintSink` 设置 `e` 为`sink`点，污点标记为 `PRIVATE`.
这样就表示如果 `system` 函数调用的第 `0` 个参数为污点数据且污点数据中包含 `PRIVATE` 标记，就会把这段代码爆出来。
其他的规则（函数建模，`clean_data`函数）也是类似这里不再介绍，最终扫描结果如下图：
在开发 `Structural`相关规则时可以在分析时使用 `-Ddebug.dump-structural-tree` 把代码的 `structural
tree` 打印出来，然后我们根据树的结构就可以比较方便的开发规则，完整命令行如下
    /home/hac425/sca/fortify/bin/sourceanalyzer -no-default-rules -rules hello_array.xml -b fortify-example -scan -f fortify-example.fpr -D com.fortify.sca.MultithreadedAnalysis=false  -Ddebug.dump-structural-tree 2> tree.tree
打印出来的示例如下
根据树状结构就可以写出匹配 `global_array[user]` 的代码如下：
    ArrayAccess aa: aa.index  is [VariableAccess va:va.name == "user"]
# 引用计数漏洞
本节相关代码
    https://github.com/hac425xxx/sca-workshop/blob/master/fortify-example/ref_rules/
漏洞代码
    int ref_leak(int *ref, int a, int b)
    {
        ref_get(ref);
        if (a == 2)
        {
            puts("error 2");
            return -1;
        }
        ref_put(ref);
        return 0;
    }
    int ref_dec_error(int *ref, int a, int b)
    {
        ref_get(ref);
        if (a == 2)
        {
            puts("ref_dec_error 2");
            ref_put(ref);
        }
        ref_put(ref);
        return 0;
    }
`ref_leak` 的 漏洞是当 `a=2` 时会直接返回没有调用 `ref_put` 对引用计数减一，漏洞模型：在某些存在
`return`的条件分支中没有调用 `ref_put` 释放引用计数。
`ref_dec_error` 的漏洞是在特定条件下会对引用计数减多次。
这种类型漏洞适合使用 `ControlflowRule` 来查询对应的漏洞，对于规则如下
        1650899A-908F-4301-B67A-D08E8E331122
        API Abuse
        Ref Leak
        3.0
                ref_put
                ref_get
        ref_add
             ref_add { $ref_get(p) }
                ref_add -> ref_dec { $ref_put(p) }
                ref_dec -> double_dec { $ref_put(p) }
                ref_dec -> checked { #return() }
                ref_add -> leak { #return() }
            ]]>
首先 FunctionIdentifier 匹配 `ref_put` 和 `ref_get` 两个函数，然后通过 Definition 定义规则
    state start (start);
    state ref_add;
    state ref_dec;
    state no_leak;
    state checked;
    state leak (error) : "ref.leak";
    state double_dec (error): "ref dec 2";
    var p;
    start -> ref_add { $ref_get(p) }
    ref_add -> ref_dec { $ref_put(p) }
    ref_dec -> double_dec { $ref_put(p) }
    ref_dec -> checked { #return() }
    ref_add -> leak { #return() }
规则的解释如下：
  1. 首先通过 `state xxx` 定义一些状态，其中 `(start)` 表示状态时初始状态，`(error)` 表示对应状态为错误状态，只要代码进入了错误状态就会在扫描结果中呈现， `var` 用于定义一个临时变量。
  2. 在规则中使用 `$func_id` 来引用之前使用 `FunctionIdentifier` 匹配到的函数。
  3. `start -> ref_add { $ref_get(p) }` 表示从 start 状态 进入 ref_add 状态的条件是调用了 ref_get 函数，入参为 p
  4. `ref_add -> leak { #return() }` 表示从 `ref_add` 状态 进入 `leak` 状态的条件是函数直接 `return` 返回了。
  5. `ref_add -> ref_dec { $ref_put(p) }` 表示代码在 `ref_add` 状态情况下对 `p` 调用了 `ref_put` 后就会进入 `ref_dec`，即对引用计数减`1`.
  6. 如果在 `ref_dec` 状态从函数返回，就表示函数没有问题。
  7. 如果在 `ref_dec` 状态下再次调用 `ref_put(p)` 则会进入 `double_dec`，会在扫描结果中呈现。
# 其他的tips
Fortify自带的规则是加密过的的，我们可以根据已有的一些研究对其解密，然后参考官方的规则来开发新的规则
    https://www.52pojie.cn/thread-783946-1-1.html
可以查看 `fortify-sca-20.1.1.0007.jar` 里面的 `com.fortify.sca.nst.nodes`
包里面的类，这些类表示的是`fortify`语法树的各个节点，可以通过对应类的方法知道在结构化规则中可以访问的方法和函数。
# 总结
Fortify相比codeql的优势在于：
  1. 商用工具，拥有许多预设规则，比较成熟。
  2. 规则开发模式比较局限，但是对于某些特定场景的规则开发相对简单。
  3. 适合大规模规则的扫描。
`codeql`
的语法非常灵活，可以灵活运用匹配出各种代码片段，支持对大部分语法元素应用污点分析，比如支持设置数组索引位置为`Sink`点，经过各种尝试，发现`fortify`不支持。
# 参考