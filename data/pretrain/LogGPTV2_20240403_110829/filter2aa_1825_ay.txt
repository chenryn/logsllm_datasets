UNINITIALIZED
Yes
Contents of allocated memory is not touched. Without this
flag, the memory is zeroed out
CACHE_ALIGNED
Yes
Address should be CPU-cache aligned. This is “best effort”
RAISE_ON_FAILURE
Yes
Raises an exception (STATUS_INSUFFICIENT_RESOURCES)
instead of returning NULL if allocation fails
NON_PAGED
Yes
Allocate from non-paged pool. The memory is executable on
x86, and non-executable on all other platforms
PAGED
Yes
Allocate from paged pool. The memory is executable on x86,
and non-executable on all other platforms
NON_PAGED_EXECUTABLE
Yes
Non paged pool with execute permissions
SPECIAL_POOL
No
Allocates from “special” pool (separate from the normal pool
so it’s easier to find memory corruptions)
The Must recognize? column indicates whether failure to recognize or satisfy the flag causes the function
to fail.
The second allocation function, ExAllocatePool3, is extensible, so new functions of this sort are
unlikely to pop up in the future:
PVOID ExAllocatePool3 (
_In_ POOL_FLAGS Flags,
_In_ SIZE_T NumberOfBytes,
_In_ ULONG Tag,
_In_reads_opt_(ExtendedParametersCount)
PCPOOL_EXTENDED_PARAMETER ExtendedParameters,
_In_ ULONG ExtendedParametersCount);
This function allows customization with an array of “parameters”, where the supported parameter types
may be extended in future kernel versions. The currently available parameters are defined with the POOL_-
EXTENDED_PARAMETER_TYPE enumeration:
Chapter 8: Advanced Programming Techniques (Part 1)
228
typedef enum POOL_EXTENDED_PARAMETER_TYPE {
PoolExtendedParameterInvalidType = 0,
PoolExtendedParameterPriority,
PoolExtendedParameterSecurePool,
PoolExtendedParameterNumaNode,
PoolExtendedParameterMax
} POOL_EXTENDED_PARAMETER_TYPE, *PPOOL_EXTENDED_PARAMETER_TYPE;
The array provided to ExAllocatePool3 consists of structures of type POOL_EXTENDED_PARAMETER,
each one specifying one parameter:
typedef struct _POOL_EXTENDED_PARAMETER {
struct {
ULONG64 Type : 8;
ULONG64 Optional : 1;
ULONG64 Reserved : 64 - 9;
};
union {
ULONG64 Reserved2;
PVOID Reserved3;
EX_POOL_PRIORITY Priority;
POOL_EXTENDED_PARAMS_SECURE_POOL* SecurePoolParams;
POOL_NODE_REQUIREMENT PreferredNode;
// ULONG
};
} POOL_EXTENDED_PARAMETER, *PPOOL_EXTENDED_PARAMETER;
The Type member indicates which of the union members is valid for this parameter (POOL_EXTENDED_-
PARAMETER_TYPE). Optional indicates if the parameter set is optional or required. An optional
parameter that fails to be satisfied does not cause the ExAllocatePool3 to fail. Based on Type, the
correct member in the union must be set. Currently, these parameters are available:
• Priority of the allocation (Priority member)
• Preferred NUMA node (PreferredNode member)
• Use secure pool (discussed later, SecurePoolParams member)
The following example shows using ExAllocatePool3 to achieve the same effect as ExAllocatePool-
WithTagPriority for non-paged memory:
Chapter 8: Advanced Programming Techniques (Part 1)
229
PVOID AllocNonPagedPriority(ULONG size, ULONG tag, EX_POOL_PRIORITY priority) {
POOL_EXTENDED_PARAMETER param;
param.Optional = FALSE;
param.Type = PoolExtendedParameterPriority;
param.Priority = priority;
return ExAllocatePool3(POOL_FLAG_NON_PAGED, size, tag, &param, 1);
}
Secure Pools
Secure pools introduced in Windows 10 version 1909 allow kernel callers to have a memory pool that
cannot be accessed by other kernel components. This kind of protection is internally achieved by the
Hyper-V hypervisor, leveraging its power to protect memory access even from the kernel, as the memory
is part of Virtual Trust Level (VTL) 1 (the secure world). Currently, secure pools are not fully documented,
but here are the basic steps to use a secure pool.
Secure pools are only available if Virtualization Based Security (VBS) is active (meaning Hyper-
V exists and creates the two worlds - normal and secure). Discussion of VBS is beyond the scope
of this book. Consult information online (or the Windows Internals books) for more on VBS.
A secure pool can be created with ExCreatePool, returning a handle to the pool:
#define POOL_CREATE_FLG_SECURE_POOL
0x1
#define POOL_CREATE_FLG_USE_GLOBAL_POOL 0x2
#define POOL_CREATE_FLG_VALID_FLAGS (POOL_CREATE_FLG_SECURE_POOL | \
POOL_CREATE_FLG_USE_GLOBAL_POOL)
NTSTATUS ExCreatePool (
_In_ ULONG Flags,
_In_ ULONG_PTR Tag,
_In_opt_ POOL_CREATE_EXTENDED_PARAMS* Params,
_Out_ HANDLE* PoolHandle);
Currently, flags should be POOL_CREATE_FLG_VALID_FLAGS (both supported flags), and Params
should be NULL. PoolHandle contains the pool handle if the call succeeds.
Allocating from a secure pool must be done with ExAllocatePool3, described in the previous section
with a POOL_EXTENDED_PARAMS_SECURE_POOL structure as a parameter:
Chapter 8: Advanced Programming Techniques (Part 1)
230
#define SECURE_POOL_FLAGS_NONE
0x0
#define SECURE_POOL_FLAGS_FREEABLE
0x1
#define SECURE_POOL_FLAGS_MODIFIABLE 0x2
typedef struct _POOL_EXTENDED_PARAMS_SECURE_POOL {
HANDLE SecurePoolHandle;
// pool handle
PVOID Buffer;
// initial data
ULONG_PTR Cookie;
// for validation
ULONG SecurePoolFlags;
// flags above
} POOL_EXTENDED_PARAMS_SECURE_POOL;
Buffer points to existing data to be initially stored in the new allocation. Cookie is used for validation,
by calling ExSecurePoolValidate. Freeing memory from a secure pool must be done with a new
function, ExFreePool2:
VOID ExFreePool2 (
_Pre_notnull_ PVOID P,
_In_ ULONG Tag,
_In_reads_opt_(ExtendedParametersCount)
PCPOOL_EXTENDED_PARAMETER ExtendedParameters,
_In_ ULONG ExtendedParametersCount);
If ExtendedParameters is NULL (and ExtendedParametersCount is zero), the call is diverted to
the normal ExFreePool, which will fail for a secure pool. For a secure pool, a single POOL_EXTENDED_-
PARAMETER is required that has the pool parameters with the pool handle onlt. Buffer should be NULL.
Finally, a secure pool must be destroyed with ExDestroyPool:
VOID ExDestroyPool (_In_ HANDLE PoolHandle);
Overloading the new and delete Operators
We know there is no C++ runtime in the kernel, which means some C++ features that work as expected in
user mode don’t work in kernel mode. One of these features are the new and delete C++ operators.
Although we can use the dynamic memory allocation functions, new and delete have a couple of
advantages over calling the raw functions:
• new causes a constructor to be invoked, and delete causes the destructor to be invoked.
• new accepts a type for which memory must be allocated, rather than specifying a number of bytes.
Fortunately, C++ allows overloading the new and delete operators, either globally or for secific types.
new can be overloaded with extra parameters that are needed for kernel allocations - at least the pool type
must be specified. The first argument to any overloaded new is the number of bytes to allocate, and any
extra parameters can be added after that. These are specified with paranthesis when actually used. The
compiler inserts a call to the appropriate constructor, if exists.
Here is a basic implementation of an overloaded new operator that calls ExAllocatePoolWithTag:
Chapter 8: Advanced Programming Techniques (Part 1)
231
void* __cdecl operator new(size_t size, POOL_TYPE pool, ULONG tag) {
return ExAllocatePoolWithTag(pool, size, tag);
}
The __cdecl modifier indicates this should be using the C calling convention (rather than the __stdcall
convention). It only matters in x86 builds, but still should be specified as shown.
Here is an example usage, assuming an object of type MyData needs to be allocated from paged pool:
MyData* data = new (PagedPool, DRIVER_TAG) MyData;
if(data == nullptr)
return STATUS_INSUFFICIENT_RESOURCES;
// do work with data
The size parameter is never specified explicitly as the compiler inserts the correct size (which is essentially
sizeof(MyData) in the above example). All other parameters must be specified. We can make the
overload simpler to use if we default the tag to a macro such as DRIVER_TAG, expected to exist:
void* __cdecl operator new(size_t size, POOL_TYPE pool,
ULONG tag = DRIVER_TAG) {
return ExAllocatePoolWithTag(pool, size, tag);
}
And the corresponding usage is simpler:
MyData* data = new (PagedPool) MyData;
In the above examples, the default constructor is invoked, but it’s perfectly valid to invoke any other
constructor that exists for the type. For example:
struct MyData {
MyData(ULONG someValue);
// details not shown
};
auto data = new (PagedPool) MyData(200);
We can easily extend the overloading idea to other overloads, such as one that wraps ExAllocatePool-
WithTagPriority:
Chapter 8: Advanced Programming Techniques (Part 1)
232
void* __cdecl operator new(size_t size, POOL_TYPE pool,
EX_POOL_PRIORITY priority, ULONG tag = DRIVER_TAG) {
return ExAllocatePoolWithTagPriority(pool, size, tag, priority);
}
Using the above operator is just a matter of adding a priority in parenthesis:
auto data = new (PagedPool, LowPoolPriority) MyData(200);
Another common case is where you already have an allocated block of memory to store some object
(perhaps allocated by a function out of your control), but you still want to initialize the object by invoking
a constructor. Another new overload can be used for this purpose, known as placement new, since it does
not allocate anything, but the compiler still adds a call to a constructor. Here is how to define a placement
new operator overload:
void* __cdecl operator new(size_t size, void* p) {
return p;
}
And an example usage:
void* SomeFunctionAllocatingObject();
MyData* data = (MyData*)SomeFunctionAllocatingObject();
new (data) MyData;
Finally, an overload for delete is required so the memory can be freed at some point, calling the destructor
if it exists. Here is how to overload the delete operator:
void __cdecl operator delete(void* p, size_t) {
ExFreePool(p);
}
The extra size parameter is not used in practice (zero is always the value provided), but the compiler
requires it.
Chapter 8: Advanced Programming Techniques (Part 1)
233
Remember that you cannot have global objects that have default constructors that do some-
thing, since there is no runtime to invoke them. The compiler will report a warning if you
try. A way around it (of sorts) is to declare the global variable as a pointer, and then use an
overloaded new to allocate and invoke a constructor in DriverEntry. of course, you must
remember to call delete in the driver’s unload routine.
Another variant of the delete operator the compiler might insist on if you set the compiler
conformance to C++17 or newer is the following:
void __cdecl operator delete(void* p, size_t, std::align_val_t) {
ExFreePool(p);
}
You can look up the meaning of std::align_val_t in a C++ reference, but it does not matter
for our purposes.
Lookaside Lists
The dynamic memory allocation functions discussed so far (the ExAllocatePool* family of APIs) are
generic in nature, and can accommodate allocations of any size. Internally, managing the pool is non-trivial:
various lists are needed to manage allocations and deallocations of different sizes. This management aspect
of the pools is not free.
One fairly common case that leaves room for optimizations is when fixed-sized allocations are needed.
When such allocation is freed, it’s possible to not really free it, but just mark it as available. The next
allocation request can be satisfied by the existing block, which is much faster to do than allocating a fresh
block. This is exactly the purpose of lookaside lists.
There are two APIs to use for working with lookaside lists. The original one, available from Windows 2000,
and a newer available from Vista. I’ll describe both, as they are quite similar.
The “Classic” Lookaside API
The first thing to do is to initialize the data structure manageing a lookaside list. Two functions are vailable,
which are essentailly the same, selcting the paged pool or non-paged pool where the allocations should be
coming from. Here is the paged pool version:
VOID ExInitializePagedLookasideList (
_Out_ PPAGED_LOOKASIDE_LIST Lookaside,
_In_opt_ PALLOCATE_FUNCTION Allocate,
_In_opt_ PFREE_FUNCTION Free,
_In_ ULONG Flags,
_In_ SIZE_T Size,
_In_ ULONG Tag,
_In_ USHORT Depth);
Chapter 8: Advanced Programming Techniques (Part 1)
234
The non-paged variant is practically the same, with the function name being ExInitializeNPaged-
LookasideList.
The first parameter is the resulting initialized structure. Although, the structure layout is described in
wdm.h (with a macro named GENERAL_LOOKASIDE_LAYOUT to accommodate multiple uses that can’t
be shared in other ways using the C language), you should treat this structure as opaque.
The Allocate parameter is an optional allocation function that is called by the lookaside implementation
when a new allocation is required. If specified, the allocation function must have the following prototype:
PVOID AllocationFunction (
_In_ POOL_TYPE PoolType,
_In_ SIZE_T NumberOfBytes,
_In_ ULONG Tag);
The allocation function receives the same parameters as ExAllocatePoolWithTag. In fact, if the
allocation function is not specified, this is the call made by the lookaside list manager. If you don’t
require any other code, just specify NULL. A custom allocation function could be useful for debugging
purposes, for example. Another possibility is to call ExAllocatePoolWithTagPriority instead of
ExAllocatePoolWithTag, if that makes sense for your driver.
If you do provide an allocation function, you might need to provide a de-allocation function in the Free
parameter. If not specified, the lookaside list manager calls ExFreePool. Here is the expected prototype
for this function:
VOID FreeFunction (
_In_ __drv_freesMem(Mem) PVOID Buffer);
The next parameter, Flags can be zero or POOL_RAISE_IF_ALLOCATION_FAILURE (Windows 8 and
later) that indicates an exception should be raised (STATUS_INSUFFICIENT_RESOURCE) if an allocation
fails, instead of returning NULL to the caller.
The Size parameter is the size of chunks managed by the lookaside list. Usually, you would specify it as
sizeof some structure you want to manage. Tag is the tag to use for allocations. Finally, the last parameter,
Depth, indicates the number of allocations to keep in a cache. The documentation indicates this parameter
is “reserved” and should be zero, which makes the lookaside list manager to choose something appropriate.
Regardless of the number, the “depth” is adjusted based on the allocation patterns used with the lookaside
list.
Once a lookaside list is initialized, you can request a memory block (of the size specified in the initialization
function, of course) by calling ExAllocateFromPagedLookasideList:
PVOID ExAllocateFromPagedLookasideList (
_Inout_ PPAGED_LOOKASIDE_LIST Lookaside)
Nothing could be simpler - no special parameters are required, since everything else is already known. The
corresponding function for a non-paged pool lookaside list is ExAllocateFromNPagedLookasideList.
The opposite function used to free an allocation (or return it to the cache) is ExFreeToPaged-
LookasideList:
Chapter 8: Advanced Programming Techniques (Part 1)
235
VOID ExFreeToPagedLookasideList (
_Inout_ PPAGED_LOOKASIDE_LIST Lookaside,
_In_ __drv_freesMem(Mem) PVOID Entry)
The only value required is the pointer to free (or return to the cache). As you probably guess, the non-paged
pool variant is ExFreeToNPagedLookasideList.
Finally, when the lookaside list is no longer needed, it must be freed by calling ExDeletePaged-
LookasideList:
VOID ExDeletePagedLookasideList (
_Inout_ PPAGED_LOOKASIDE_LIST Lookaside);
One nice benefit of lookaside lists is that you don’t have to return all allocations to the list by repeatedly
calling ExFreeToPagedLookasideList before calling ExDeletePagedLookasideList; the latter
is enough, and will free all allocated blocks automatically. ExDeleteNPagedLookasideList is the
corresponding non-paged variant.
Write a C++ class wrapper for lookaside lists using the above APIs.
The Newer Lookaside API
The newer API provides two main benefits over the classic API:
• Uniform API for paged and non-paged blocks.
• The lookaside list structure itself is passed to the custom allocate and free functions (if provided),
that allows accessing driver data (example shown later).
Initializing a lookaside list is accomplished with ExInitializeLookasideListEx:
NTSTATUS ExInitializeLookasideListEx (
_Out_ PLOOKASIDE_LIST_EX Lookaside,
_In_opt_ PALLOCATE_FUNCTION_EX Allocate,
_In_opt_ PFREE_FUNCTION_EX Free,
_In_ POOL_TYPE PoolType,
_In_ ULONG Flags,
_In_ SIZE_T Size,
_In_ ULONG Tag,
_In_ USHORT Depth);