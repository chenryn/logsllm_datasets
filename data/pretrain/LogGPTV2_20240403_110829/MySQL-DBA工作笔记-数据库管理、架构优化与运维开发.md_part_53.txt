## Page 342
320|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
MySQL Router做了转接，连接到了里面的读写节点3310。
我们就看里面的.conf文件，里面的一部分内容如下：
连接的端口为64460和64470。
mysql-js> dba.configureLocalInstance('root@127.0.0.1:3310')
如果切换为脚本模式查看实例的状态，
Switching
mysql-js>
切换到 sql 模式，查看端口就知道是哪个节点了。
Enter password:
Creating a Session to
# mysqlsh --uri root@localhost:6446
我们尝试使用6446端口来连接登录，这个时候就通过MySQL Shell开启了连接入口，
protocol=classic
bind
[routing:testCluster_default_rw]
如果对 MySQL Router 还有些疑问，
启动 MySQL Router。
可以从上面的日志看出来，
Classic MySQL protocol connections to cluster
MySQL Router
Please enter MySQL password for root:
Welcome
Classic
neinstance
lidating instance..
row in set
@@port
Read/Only Connections:
protocol
Read/Only
Read/Wr
3310
to MySQL Shell
 to SQL mode.
Sessi
sql
select @@port;
connections to
Connections:
(0.00 sec)
ion successfully established.
Connections:
 has now been configured for
1.0.9
root@1oca1host:6446'
分配的读写端口是6446，
Commands end with ;
loca1host:64470
loca1host:6447
cluster
nformation
，可以看看安装目录下，会生成下面的配置文件，
可以使用里面定义的API来做，输出都是JSON 串。
'ro0t@127.0.0.1:3310':
can
be
theInnoDBcluster'testCluster'
No default schema selected.
usedto
：只读端口是6447，还有x协议
'testCluster':
---
## Page 343
mysql-js> cluster.describe();
也可以使用 describe 得到一些基本的信息，如下：
mysql-js> cluster.status()
得到 Cluster 的信息，如下：
var cluster = dba.getcluster()
mysql-js> dba.getCluster()
如果查看 Cluster 的信息，可以看到下面的读写节点和只读节点的状态信息。
You can now use it in an InnoDB Cluster.
"clusterName":"testCluster",
"defaultReplicaSet":(
"clusterName":
"status":"ok"
"instances":[
"label":
"host": "localhost:3310",
"status":
"role":"
"mode":"R/O"
"status":
"address":
"status":"ONLINE"
role":
'role":
"mode": "R/W",
address"
"default"
"OK"
"testCluster"
"HA"
"HA"，
localhost:3310"
"ONLINE"
"ONLINE"
"localhost:3330",
"localhost:3320",
"localhost:3310",
第8章MySQL集群和高可用设计丨321
---
## Page 344
322丨MySQL DBA 工作笔记：数据库管理、架构优化与运维开发
mysql-js> dba.getCluster()
这个时候再次查看 Cluster的状态，3320就是主了，3310就是只读节点了。
# mysqlsh --uri root@localhost:6446
mysql-sql>
Creating a Session to 'root@localhost:6446'
我们还是使用6446端口来统一连接，这个时候就切换到了端口3320的MySQL服务。
节点被清理了，没有任何进程存在。
Instance iocalhost:3310 successfully killed.
mysql-js> dba.killSandboxInstance (3310)
Instance
所以切换的部分没有问题，
En
# ps -eflgrep mysqllgrep 3310
模拟一个节点出现问题，可以使用killSandboxInstance 方法。
当然只看不练还是假把式，我们切换一下，看看好使不？
@@port
row in set (0.00 sec)
3320
localhost:3310 successfully started.
dba.startSandboxInstance(3310)
select @@port;
\sql
"role":
"label":
"host": "localhost:3320",
我们再次把“迷失”的节点启动起来。
Commandsend with;
will be killed
will
be
started
host
in
---
## Page 345
8.3.4InnoDb Cluster 核心组件：MGR
作为 InnoDB Cluster 的核心组件，我们需要投入较多的精力来了解 MGR，首先它是
mysql-js> cluster.status()
最后来一个切换后的 Cluster 状态。
可以想象如果是一个生产系统，这么多的日志，这个过程真是让人纠结。
The instance
problem.
mysql-js> cluster.rejoinInstance('root@localhost:3310')
mysql-js>
把节点2纳入到Cluster中。
"defaultReplicaSet"
"clusterName": "testCluster"
"statusText":
"status":
"primary":
instance
root@localhost:3310'
"role":"
"mode":
"address":
"mode":
"status":
"mode":
cannot
role"
the password for 'root@localhost:3310':
"OK"
the
"localhost:3320",
to
"HA"
ceioin
instance
"R/O"
"R/W"
"HA"
"R/O"
"HA"
"localhost:3330",
"ONLINE"
"localhost:3320",
"localhost:3310",
。
was successfully rejoined on the cluster.
第8章MySQL集群和高可用设计丨323
to fix the underlying
---
## Page 346
324丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
初始化，搭建出多主的环境来，整个过程也就分分钟即可搞定。
式就是在一台服务器上搭建多实例。
都是3个节点的环境，实际中要找这样的环境也不是很容易。我们怎么快速模拟呢。一种方
发现有些方面的表现确实不赖。当然要模拟这么一套环境还是需要花不少功夫的，一般来说
8.3.5
的架构设计充满了一些神秘色彩。
一个 MySQL 插件，架构如下图8-23所示。
一些实践经验。
运行这个脚本只需要 sh init.sh 即可，这个过程会自动读取文件 init.lst 的配置，然后
具体脚本可以参考 https://github.com/jeanron100/mysql_mgr_test。
最近看了下MySQL5.7版中的闪亮特性Group Replication,也花了不少时间做了些测试，
在此我们不着重介绍 MGR 的基础原理，而是先从上手使用开始，逐步分析 MGR 的
方法1：分分钟搭建MGR单主/多主测试环境
整体来看，MGR 是一个标准的分布式架构设计，基于 Paxos 协议的组件也让 MGR
·集群通信层：基于Paxos 协议的集群通信引擎以及和上层组件的交互接口。
·复制层：负责冲突验证，接收和应用集群事务。
·组件层：主要有3个特定组件，Capture 负责收集事务执行相关信息；Applier 负责
·API层：负责完成和 MySQL Server 的交互，得到 server 的状态，完成事务的管理。
我们来取上图中几个重要的组件说明一下：
部署MGR的几种姿势
应用集群事务到本地；Recovery负责节点的数据恢复。
Group Communication System APl
CaptureApplierRecovery
Group Communication Engine
APls:Capture/Apply/ Lifecycle
Replication Protocol Logics
（Paxos variant）
Group
SOL
图8-23
MysQL GroupReplication
Plugin
---
## Page 347
--defaults-file=/data/mysql_4308/my.cnf &
安装有些太死板，有些参数顺序不一样都会出错。
参考。
单主改变为多主。
会初始化，搭建传统的单主 MGR 环境，而 reset_node 是在单主模式的基础上的设置，把
（8）然后修改参数，开启 group replication 参数后重新启动
mysqladmin shutdown
INSTALL PLUGIN group_replication SONAME 'group_replication.so';
（4）启动MySQL
/usr/local/mysql-5.7.25-linux-glibc2.12-x86_64/bin/mysqld
（7）停止数据库
show plugins;
（6）安装插件
（5）创建复制账户
两个节点都做如下的配置。
这个过程和之前最大的不同就是指定了文件的目录，比较奇怪的是，MySQL的这个
（2）修改参数my.cnf，把MGR相关的参数都屏蔽一下，安装后再开启。
mkdir -p /data/mysql_4308/(data,log,innodblog,tmp}
具体步骤如下：
usr/local/mysql-5.7.25-1inux-glibc2.12-x86_64
安装软件的目录为：
/data/mysql_4308
假设数据目录如下：
如果要完整的复现一下整个过程，除了参数部分，整个过程我整理出来了，供大家
MGR 配置中还是存在一些潜在的坑，还有一些相关的高可用实践，我们简单总结一下。
方法2：线上环境规范部署
搭建多主模式可以在单主模式的基础上进行切换，也可以直接搭建完成。
（3）数据字典初始化
sudochown-R mysql.mysql
（1）创建如下的目录结构
-socket=/data/mysql_4308/tmp/mysql.sock --port=4308
/data/mysql_4308
cnf
第8章MySQL集群和高可用设计丨325
---
## Page 348
326丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
模式下的好处了。
'Primary server with address mysqlt-9-208:4308 left the group. Electing new
reported:
为主节点，如下。
当然这也牵扯出一个问题，
'A new primary with address mysqlt-119-221:4308 was elected, enabling conflict
有问题了。
90%的问题都卡在了这里。
 2019-01-26T06:01:13.675968z 0 [Note] Plugin group_replication reported: 'Group
2019-01-26T06:01:13.675603Z
Primary: shutdown
平均下来，我做的配置节点2生效大概是6秒，不会太长，如果几十秒基本就说明
change
如果稍后把节点1启动，可以做一个类似Failback的操作，这点就充分显示出GTID
2019-
Secondary 只能看到一个 online 的节点，已有的 Primary 节点会退出，节点2会切换
如果节点1出现了宕机操作或者服务不可用，节点2会自动接管吗，答案是显然的。
Query OK, 0 rows affected (5.79 sec)
>>START GROUP_REPLICATION;
set global slave_preserve_commit_order=on;
对于节点2，可以参考如下的操作：
对于MGR 搭建来说，节点2的 START GROUP_REPLICATION 是关键，我搭建失败
SELECT
查看成员状态，这个时候 MGR 里面应该显示有一个 online 的成员。
SET GLOBAL group_replication_bootstrap_group = ON;
但对于节点1来说，操作有些不同：
（9）开启一个通道
01-26T06:01:13.
 master to master_user='rpl_user',master_password='rpl_pass' for channel
Me
 FROM performance_schema.replication_group_members;
slave
oers removed
，对于主库的重启还是要谨慎。
675670Z
from the
[Warning]
P1
celay
group_replication reported:
ogs
 group_replication
---
## Page 349
是读写分离，当然支持 multi_primary 理论上也是可行的，但是还是会有些小问题，为稳
机环境中搭建是不是也一样呢，答案是肯定的，我自己都一一试过了。
多说了，前面已经可以看到一个基本的方式，在测试环境很容易模拟，如果在多台物理
8.3.6常见的MGR问题