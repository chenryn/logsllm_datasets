## Page 342
### MySQL DBA工作笔记：数据库管理、架构优化与运维开发
MySQL Router配置了读写分离，连接到内部的读写节点3310。我们查看其`.conf`文件，部分内容如下：

- 连接端口为64460和64470。
- 使用命令`dba.configureLocalInstance('root@127.0.0.1:3310')`来配置本地实例。

如果切换至脚本模式检查实例状态，输入：
```sql
mysql-js> dba.configureLocalInstance('root@127.0.0.1:3310')
Switching
mysql-js>
```
接着切换至SQL模式，通过查询端口号确认具体节点：
```sql
Enter password:
Creating a Session to
# mysqlsh --uri root@localhost:6446
protocol=classic
bind
[routing:testCluster_default_rw]
```
使用6446端口尝试登录：
```bash
# mysqlsh --uri root@localhost:6446
Please enter MySQL password for root:
Welcome
Classic
neinstance
lidating instance..
row in set
@@port
Read/Only Connections:
protocol
Read/Only
Read/Wr
3310
to MySQL Shell
 to SQL mode.
Sessi
sql
select @@port;
connections to
Connections:
(0.00 sec)
ion successfully established.
Connections:
 has now been configured for
1.0.9
root@1oca1host:6446'
分配的读写端口是6446，
Commands end with ;
loca1host:64470
loca1host:6447
cluster
nformation
，可以看看安装目录下，会生成下面的配置文件，
可以使用里面定义的API来做，输出都是JSON 串。
'ro0t@127.0.0.1:3310':
can
be
theInnoDBcluster'testCluster'
No default schema selected.
usedto
：只读端口是6447，还有x协议
'testCluster':
---
## Page 343
mysql-js> cluster.describe();
也可以使用 `describe` 获取一些基本信息，如下：
```sql
mysql-js> cluster.status()
```
获取集群信息：
```sql
var cluster = dba.getcluster()
mysql-js> dba.getCluster()
```
查看集群信息时，可以看到读写节点和只读节点的状态信息：
```json
"clusterName":"testCluster",
"defaultReplicaSet":(
"clusterName":
"status":"ok"
"instances":[
"label":
"host": "localhost:3310",
"status":
"role":"
"mode":"R/O"
"status":
"address":
"status":"ONLINE"
role":
'role":
"mode": "R/W",
address"
"default"
"OK"
"testCluster"
"HA"
"HA"，
localhost:3310"
"ONLINE"
"ONLINE"
"localhost:3330",
"localhost:3320",
"localhost:3310",
```

---

## Page 344
### MySQL DBA工作笔记：数据库管理、架构优化与运维开发
再次查看集群状态：
```sql
mysql-js> dba.getCluster()
```
此时，3320为主节点，3310为只读节点。继续使用6446端口进行连接：
```bash
# mysqlsh --uri root@localhost:6446
mysql-sql>
Creating a Session to 'root@localhost:6446'
```
模拟一个节点出现问题，并使用`killSandboxInstance`方法清理该节点：
```sql
mysql-js> dba.killSandboxInstance (3310)
Instance iocalhost:3310 successfully killed.
# ps -ef | grep mysqld | grep 3310
```
重启“迷失”的节点：
```sql
dba.startSandboxInstance(3310)
localhost:3310 successfully started.
select @@port;
\sql
"role":
"label":
"host": "localhost:3320",
```

---

## Page 345
### InnoDB Cluster 核心组件：MGR
作为InnoDB Cluster的核心组件，我们需要深入了解MGR。首先，它是基于Paxos协议的分布式架构设计。查看集群状态：
```sql
mysql-js> cluster.status()
```
将节点重新加入集群：
```sql
mysql-js> cluster.rejoinInstance('root@localhost:3310')
```
最终的集群状态如下：
```json
"defaultReplicaSet"
"clusterName": "testCluster"
"statusText":
"status":
"primary":
instance
root@localhost:3310'
"role":"
"mode":
"address":
"mode":
"status":
"mode":
cannot
role"
the password for 'root@localhost:3310':
"OK"
the
"localhost:3320",
to
"HA"
ceioin
instance
"R/O"
"R/W"
"HA"
"R/O"
"HA"
"localhost:3330",
"ONLINE"
"localhost:3320",
"localhost:3310",
```

---

## Page 346
### MySQL DBA工作笔记：数据库管理、架构优化与运维开发
初始化并搭建多主环境，整个过程只需几分钟即可完成。一种方式是在一台服务器上搭建多个实例。虽然实际中找到这样的环境不容易，但我们可以快速模拟。

8.3.5 MGR 的架构设计

MGR 是一个标准的分布式架构设计，基于 Paxos 协议的组件让 MGR 充满神秘色彩。以下是 MGR 的架构图（图8-23）：

- **集群通信层**：基于 Paxos 协议的集群通信引擎及与上层组件的交互接口。
- **复制层**：负责冲突验证、接收和应用集群事务。
- **组件层**：包括 Capture（收集事务执行相关信息）、Applier（应用集群事务到本地）和 Recovery（节点数据恢复）。
- **API 层**：与 MySQL Server 交互，获取状态并管理事务。

### 部署 MGR 的几种方法

#### 方法1：快速搭建 MGR 单主/多主测试环境
运行脚本 `sh init.sh` 自动读取配置文件 `init.lst` 并完成初始化。参考 [https://github.com/jeanron100/mysql_mgr_test](https://github.com/jeanron100/mysql_mgr_test)。

#### 方法2：线上环境规范部署
步骤如下：
1. 创建目录结构：
   ```bash
   mkdir -p /data/mysql_4308/{data,log,innodblog,tmp}
   ```
2. 修改 `my.cnf` 参数，屏蔽 MGR 相关参数，安装后再开启。
3. 初始化数据字典。
4. 设置权限：
   ```bash
   sudo chown -R mysql:mysql /data/mysql_4308
   ```
5. 启动 MySQL：
   ```bash
   /usr/local/mysql-5.7.25-linux-glibc2.12-x86_64/bin/mysqld --defaults-file=/data/mysql_4308/my.cnf &
   ```
6. 安装插件：
   ```sql
   INSTALL PLUGIN group_replication SONAME 'group_replication.so';
   ```
7. 停止数据库：
   ```bash
   mysqladmin shutdown
   ```
8. 修改参数并重新启动：
   ```sql
   SET GLOBAL group_replication_bootstrap_group = ON;
   START GROUP_REPLICATION;
   ```

---

## Page 347
### 常见的 MGR 问题

在生产环境中，读写分离支持 multi_primary 理论上可行，但仍存在一些小问题。对于多台物理机上的测试环境，同样适用这些步骤。常见的 MGR 问题包括：

- 节点故障转移：如果主节点宕机，次节点会自动接管。
- 多主模式切换：可以在单主模式基础上进行切换，或直接搭建多主模式。
- 日志处理：大量的日志记录可能会导致复杂性增加。

希望这些内容能帮助您更好地理解和使用 MGR。