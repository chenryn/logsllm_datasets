::: itemizedlist
-   `重启`{.literal} ：在转储失败后重启系统。
-   `dump_to_rootfs`{.literal} ：配置了非 root
    转储目标时，将转储文件保存在 root 文件系统中。
-   `Halt`{.literal} ：停止系统。
-   `poweroff`{.literal} ：停止系统中的运行操作。
-   `Shell`{.literal} ：在 `initramfs`{.literal} 中启动 shell
    会话，从中可以手动执行其他恢复操作。
:::
::: orderedlist
**流程：**
1.  要将操作配置为在转储失败时执行的操作，请编辑
    `/etc/kdump.conf`{.literal} 文件并指定其中一个
    `failure_action`{.literal} 选项：
    ``` literallayout
    failure_action 
    ```
2.  重启 `kdump`{.literal} 服务以使更改生效：
    ``` literallayout
    kdumpctl restart
    ```
:::
:::
:::
[]{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel}第 13 章 固件支持的转储机制 {.title}
:::
固件支持的转储 (fadump) 是一个转储捕获机制，作为 IBM POWER 系统中
`kdump`{.literal} 机制的替代选择。`kexec`{.literal} 和 `kdump`{.literal}
机制可用于在 AMD64 和 Intel 64
系统中捕获内核转储。但是，一些硬件（如小型系统和大型机计算机）利用板载固件隔离内存区域，并防止意外覆盖对崩溃分析很重要的数据。本节论述了
`fadump`{.literal} 机制以及如何与 RHEL 集成。`fadump`{.literal}
实用程序针对 IBM POWER 系统上的扩展转储功能进行了优化。
::: section
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#firmware-assisted-dump-on-ibm-powerpc-hardware_firmware-assisted-dump-mechanisms}IBM PowerPC 硬件支持转储固件 {.title}
:::
`fadump`{.literal} 实用程序从带有 PCI 和 I/O 设备的完全重设系统中捕获
`vmcore`{.literal}
文件。这种机制使用固件在崩溃期间保留内存区域，然后重复使用
`kdump`{.literal} 用户空间脚本保存 `vmcore`{.literal}
文件。内存区域由所有系统内存内容组成，但引导内存、系统注册和硬件页面表条目
(PTE) 除外。
`fadump`{.literal}
机制通过重新引导分区并使用新内核转储之前内核崩溃中的数据，提供比传统转储类型的更高可靠性。`fadump`{.literal}
需要一个基于 IBM POWER6 处理器或更高版本的硬件平台。
有关 `fadump`{.literal} 机制的详情，包括针对 PowerPC
重置硬件的方法，请查看
`/usr/share/doc/kexec-tools/fadump-howto.txt`{.literal} 文件。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
未保留的内存区域（称为引导内存）是在崩溃事件后成功引导内核所需的 RAM
量。默认情况下，引导内存大小为 256MB 或系统 RAM 总量的
5%，以较大者为准。
:::
与 `kexec-initiated`{.literal} 事件不同，`fadump`{.literal} 机制使用
production 内核恢复崩溃转储。崩溃后引导时，PowerPC 硬件使设备节点
`/proc/device-tree/rtas/ibm.kernel-dump`{.literal} 可供 `proc`{.literal}
文件系统 (`procfs`{.literal}) 使用。`fadump-aware kdump`{.literal}
脚本，检查存储的 `vmcore`{.literal}，然后完全完成系统重启。
:::
::: section
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#enabling-firmware-assisted-dump-mechanism_firmware-assisted-dump-mechanisms}启用固件支持的转储机制 {.title}
:::
您可以通过启用固件辅助转储(fadump)机制来增强 IBM POWER
系统的崩溃转储功能
::: itemizedlist
**先决条件**
-   根访问权限
:::
::: orderedlist
**步骤**
1.  安装 `kexec-tools`{.literal} 软件包。
2.  配置 `crashkernel`{.literal} 的默认值。
    ``` screen
    # kdumpctl reset-crashkernel –fadump=on –kernel=ALL
    ```
3.  （可选） Reserve 引导内存，而不是默认值。
    ``` screen
    # grubby --update-kernel ALL --args=”fadump=on crashkernel=xxM"
    ```
    其中，`xx`{.literal} 是所需的内存大小，以 MB 为单位。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    当指定引导选项时，请通过启用 `kdump`{.literal}
    重启内核来测试配置。如果 `kdump`{.literal} 内核无法引导，请逐渐增加
    `crashkernel`{.literal} 值来设置适当的值。
    :::
4.  重启以使更改生效。
    ``` screen
    # reboot
    ```
:::
:::
::: section
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#firmware-assisted-dump-mechanisms-on-ibm-z-hardware_firmware-assisted-dump-mechanisms}IBM Z 硬件支持的固件转储机制 {.title}
:::
IBM Z 系统支持两个固件支持的转储机制：独立转储(`sadump`{.literal})和
`VMDUMP`{.literal} 转储文件。
IBM Z 系统支持并使用 `kdump`{.literal} 基础架构。但是，IBM Z
使用固件辅助转储之一(`fadump`{.literal})方法可以提供各种优点：
::: itemizedlist
-   `sadump`{.literal} 机制是从系统控制台启动和控制的，并存储在
    `IPL`{.literal} 可引导设备中。
-   `VMDUMP`{.literal} 机制与 `sadump`{.literal}
    类似。此工具从系统控制台启动，但从硬件检索生成的转储，并将其复制到系统以便分析。
-   这些方法与其他基于硬件的转储机制类似，可以在 `kdump`{.literal}
    服务启动前捕获机器的状态。
-   尽管 `VMDUMP`{.literal} 包含将转储文件接收到 Red Hat Enterprise
    Linux 系统中的机制，但 `VMDUMP`{.literal} 的配置和控制是从 IBM Z
    硬件控制台管理的。
:::
::: itemizedlist
**其他资源**
-   [在 Red Hat Enterprise Linux 8.5 中使用 Dump
    工具](https://www.ibm.com/docs/en/linux-on-systems?topic=tools-red-hat-enterprise-linux-85){.link}
-   [独立转储](https://www.ibm.com/docs/en/zos/2.3.0?topic=aids-stand-alone-dump){.link}
-   [使用 VMDUMP 在 z/VM
    中创建转储](https://www.ibm.com/docs/en/linux-on-systems?topic=tools-zvm-dump-vmdump){.link}
:::
:::
::: section
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#using-sadump-on-fujitsu-primequest-systems_firmware-assisted-dump-mechanisms}在 Fujitsu PRIMEQUEST 系统中使用 sadump {.title}
:::
Fujitsu `sadump`{.literal} 机制旨在在 `kdump`{.literal}
无法成功完成时提供 `fallback`{.literal} 转储捕获。`sadump`{.literal}
机制是从系统管理板 (MMB) 接口手动调用的。使用 MMB，为 Intel 64 或 AMD 64
服务器配置 `kdump`{.literal}，然后执行以下步骤启用 `sadump`{.literal}。
::: orderedlist
**步骤**
1.  在 `/etc/sysctl.conf`{.literal} 文件中添加或编辑以下行，以确保
    `sadump`{.literal} 的 `kdump`{.literal} 按预期启动：
    ``` screen
    kernel.panic=0
    kernel.unknown_nmi_panic=1
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    特别是，请确保在 `kdump`{.literal} 后系统不会重启。如果系统在
    `kdump`{.literal} 无法保存 `vmcore`{.literal} 文件后重启，则无法调用
    `sadump`{.literal}。
    :::
2.  适当地将 `/etc/kdump.conf`{.literal} 中的 `failure_action`{.literal}
    参数设置为 `halt`{.literal} 或 `shell`{.literal}。
    ``` screen
    failure_action shell
    ```
:::
::: itemizedlist
**其他资源**
-   FUJITSU Server PRIMEQUEST 2000 系列安装手册
:::
:::
:::
[]{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel}第 14 章 分析内核转储 {.title}
:::
要确定系统崩溃的原因，您可以使用 [**[crash]{.application}**]{.strong}
实用程序，它提供了一个与 GNU Debugger (GDB)
类似的交互式提示符。这个工具允许您交互式地分析由
`kdump`{.literal}、`netdump`{.literal}、`diskdump`{.literal} 或
`xendump`{.literal} 创建的内核转储以及正在运行的 Linux
系统。另外，您还可以使用 Kernel Oops Analyzer 或者 Kdump Helper 工具。
::: section
::: titlepage
# []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#installing-the-crash-utility_analyzing-a-core-dump}安装 crash 工具 {.title}
:::
以下流程描述了如何安装 [**[crash]{.application}**]{.strong} 分析工具。
::: orderedlist
**步骤**
1.  启用相关的软件仓库：
    ``` screen
    # subscription-manager repos --enable baseos repository
    ```
    ``` screen
    # subscription-manager repos --enable appstream repository
    ```
    ``` screen
    # subscription-manager repos --enable rhel-9-for-x86_64-baseos-debug-rpms
    ```
2.  安装 `crash`{.literal} 软件包：
    ``` screen
    # dnf install crash
    ```
3.  安装 `kernel-debuginfo`{.literal} 软件包：
    ``` screen
    # dnf install kernel-debuginfo
    ```
    软件包与您正在运行的内核对应，提供转储分析所需的数据。
:::
::: itemizedlist
**其他资源**
-   [配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_basic_system_settings/index#sec-Installation-Basic-Tasks){.link}
:::
:::
::: section
::: titlepage
# []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#running-and-exiting-the-crash-utility_analyzing-a-core-dump}运行和退出 crash 工具 {.title}
:::
以下流程描述了如何启动崩溃程序来分析系统崩溃原因。
::: itemizedlist
**先决条件**
-   确定当前运行的内核（如 `4.18.0-5.el9.x86_64`{.literal}）。
:::
::: orderedlist
**步骤**
1.  要启动 `crash`{.literal}
    工具程序，需要将两个必要的参数传递给该命令：
    ::: itemizedlist
    -   debug-info（解压缩的 vmlinuz 镜像），如
        `/usr/lib/debug/lib/modules/4.18.0-5.el9.x86_64/vmlinux`{.literal}，通过特定的
        `kernel-debuginfo`{.literal} 软件包提供。