anti-malware  tools  identify  a  suspicious  behavior  only  based  on 
the  behavior  itself  while  Tracer  further  considers  the  suspicious 
label of the process requesting the behavior. On the other hand, the 
FN  rates  of  Kaspersky,  VIPRE  and  Tracer  are  almost  all  zero. 
However, MIC is observed to have a high FN rate of 42%. One 
possible reason is that MIC does not implement the no-read-down 
rule of BIBA model [16] in order to avoid a significant impact on 
the usability and compatibility of Windows which is a commodity 
OS.  As  a  result,  some  sophisticated  malware  programs  can 
manage  to  bypass  it.  Nevertheless,  with  MIC,  Vista  can  still 
achieve a significant security improvement compared with XP that 
can not defeat any malware samples by itself. 
Compatibility.  The  requirement  for  compatibility  is  that 
existing Commercial Off-The-Shelf (COTS) software can run on 
the  MAC  prototype  without  causing  significant  incompatibility 
problems. On the two hosts with Windows XP  installed, we run 
many  commonly  used  network-dependent  applications  and  local 
applications e.g. Internet Explorer, MS Outlook Express, MS word, 
MS  excel,  MS  Power  Point,  MS  Messenger,  mIRC  and  Visual 
C++.  We  set  the  protocols  HTTP,  POP3,  IRC,  SMTP,  FTP, 
FastTrack,  eDonkey  and  ICMP  as  dangerous.  We  define  trusted 
communications 
for  downloading  useful  applications  and 
Windows update as follows: {“C:\Windows\system32\wuauclt.ex- 
e”, “SSL”, “update.microsoft.com”}, {“C:\Windows\system32\sv- 
chost.exe”, “SSL”, “update.microsoft.com”}, {“C:\Windows\syst- 
em32\wbem\wmiprvse.exe”, “SSL”, “update.microsoft.com”}. On 
the  system  tested,  we  send  emails,  browse  websites  through 
Internet,  edit  word  documents,  develop  VC++  programs,  share 
files remotely, update Windows and move files through USB disks, 
etc.  The  system  works  well  for  the  past  a  few  months,  without 
need of modifications of existing software or running into failures. 
14
27
MIC (FPR=34%)
21
33
20
34
3
51
without FP
having FP
Kaspersky (FPR=39%)
VIPRE (FPR=37%)
Tracer (FPR=5.6%)
Figure 3. Comparing false positives with commercial anti-malware techniques on Windows 
Table 3. Overhead of Tracer (CPU Cycles), The columns Tracer-m, Tracer-bf and Tracer-b show the CPU cycles taken by the malware 
programs, the benign programs with and without suspicious flags running on Tracer, respectively. 
Functions 
NtCreateFile 
NtOpenFile 
NtWriteFile 
NtCreateNamedPipeFile 
NtCreatePort 
Functions
Native  Tracer-m 
Tracer-bf
334492  348471(4.2%)  348197(4.1%)
167620  175263(4.6%)  173235(3.3%)
245179  324623(32.4%)  278214(13.5%) 249832(1.9%) NtSetValueKey 
204711  214743(4.9%)  214751(4.9%) 204789(<0.1%) NtCreateKey 
37241 
40180(7.9%)
40221(8%) 
Performance  overhead.  The  performance  overhead  of 
Tracer  comes  from 
the  overhead  of  executing  additional 
instructions  associated  with  every  intercepted  system  call  and 
Win32 API function. In the following experiment, we evaluate the 
additional overhead imposed by Tracer enforcement. The test-bed 
is  a  Pentium-4  2.8GHz  machine  with  1GB  memory  running 
Windows XP SP2. We first disable Tracer, run a group of benign 
and malware programs, and count the average CPU cycles spent in 
each  system  call  and  API  function  through  rtdsc  instruction. 
Second, we enable Tracer, run the malware programs, the benign 
programs  with  suspicious  flags  and  without  suspicious  flags  to 
perform  the  test  again.  In  all  tests,  the  average  CPU  cycles  of 
every system call or API function is calculated from 100 invokes. 
Results are shown in Table 3. With Tracer enabled, the malware 
programs  have  1.7%~32.4%  more  performance  penalty  than 
native,  while  the  benign  programs  have  only  0~13.5%.  The 
highest  performance  penalty  comes  from  the  interception  of 
NtWriteFile() as a result of capturing file-copying behaviors. The 
overhead  incurred  on  benign  programs  is  lower  than  2%. 
Therefore,  the  general  performance  impact  from  the  system  call 
and Win32 API function interception is acceptable. 
5.  RELATED WORK 
The  concepts  of  Tracer  model  are  partially  inspired  by  the 
MAC  models  such  as  DTE  [9],  LOMAC  [3],  UMIP  [2]  and 
PRECIP [5]. DTE proposed by Lee Badger et al. [9] is a classical 
MAC  model 
to  confine  process  execution,  which  groups 
processes  and  files  into  domains  and  types  respectively,  and 
controls  accesses  between  domains  and  types.  Tracer  can  be 
regarded as a simplified DTE that has two domains (i.e., benign 
and  suspicious)  and  four  types  (i.e.,  benign,  read-protected, 
write-protected 
can 
automatically configure the DTE attributes (i.e., domain and type) 
of processes and files under the support of intrusion detection and 
tracing so as to improve usability. 
suspicious).  Moreover,  Tracer 
Both  LOMAC  and  UMIP  evolve  from  BIBA  model,  which 
aims to add usable and compatible mandatory integrity protections 
into mainstream operating systems. The LOMAC model deals with 
the pathological cases in the Low-Water Mark model’s behaviors to 
decrease its partial compatibility cost. The UMIP model is designed 
to preserve system integrity in the face of network-based attacks in 
a  highly  usable  manner.  The  PRECIP  model  addresses  several 
practical issues that are critical to contain spyware that intends to 
leak  sensitive  information.  Tracer,  however,  differs  from  these 
and 
Tracer-b
Tracer-b
Tracer-bf
Tracer-m 
225093(6.9%)
296008(5.1%)
215426(4.3%)
225120(6.9%) 
296371(5.2%) 
215435(4.3%) 
338506(1.2%) CreateService 
169713(1.2%) OpenService 
Native
6568120 6679778(1.7%)  6679625(1.7%) 6568323(<0.1%)
5490443 5609379(2.2%)  5609352(2.2%) 5490560(<0.1%)
210491
210493(<0.1%)
281784(<0.1%)
281722
37275(<0.1%) NtCreateProcessEx 206458
208849(1.2%) 
MAC models in that, it traces suspected intruders and restricts their 
behaviors  rather  than  restricts  information  flow.  With  this  novel 
concept,  it  is  able  to  considerably  reduce  FPs  and  automatically 
deploy  security  labels,  which  result  in  good  compatibility  and 
usability. Meanwhile, the philosophy of Tracer is roughly similar to 
the  risk-adaptive  access  control  [10]  that  targets  to  make  access 
control more dynamic and flexible so as to achieve a better tradeoff 
between risk and benefit. Tracer dynamically changes the security 
labels of the processes that derive from dangerous sources to reduce 
the risk of executing malware behaviors, while not restricting other 
behaviors  and  processes  at  all  to  preserve  the  benefits  of 
compatibility and usability. 
Most  existing  anti-malware  technologies  are  based  on 
detection  [22][23][24].  Tracer  tries  to  combine  detection  and 
access  control  so  that  it  not  only  can  detect  but  also  can  block 
malware  behaviors  before their harming  security.  Tracer  can  be 
used as a complementary technique to malware detection, to act 
as  an  automatic  intrusion  response  mechanism  of  a  malware 
detection  system,  since  it  is  able  to  further  trace  intruders  and 
restrict 
their  behaviors  after  malware  detection.  Another 
anti-malware  technology  that  resembles  Tracer  is  behavior 
blocking [29], which can confine the behaviors of certain adverse 
programs that are profiled in advance. However, Tracer does not 
need  to  profile  program  behaviors  beforehand,  and  can  confine 
the adverse programs that execute malware behaviors. 
Many  commercial  anti-malware  tools  [27][28]  also  have  a 
behavior-based  module  to  defend  against  unknown  malware 
programs.  The  major  difference  between  Tracer  and 
the 
commercial tools is that Tracer determines a malicious behavior 
based  not  only on  the  behavior  itself  but  also  the  source  of  the 
process  requesting  the  behavior.  In  other  words,  Tracer  further 
checks the suspicious label of the process requesting the behavior 
rather  than  merely  the  behavior  as  anti-malware  tools  do.  As  a 
consequence, Tracer produces much less false positives than that 
of the commercial-tools as shown in Section 4.2. 
6.  CONCLUSIONS 
In this paper, we propose a novel MAC model that integrates 
intrusion  detection  and  tracing  to  defend  against  malware  in  a 
commercial OS. We have extracted 30 critical malware behaviors 
and  three  common  malware  characteristics  from  the  study  of 
2,600 real-world malware samples and analyzed the root reasons 
for  the  incompatibility  and  low  usability  problems  in  MAC, 
which will benefit other researchers in this area. Based on these 
studies, we propose a novel MAC model, called Tracer, to disable 
malware  timely  without  need  of  malware  signatures  or  other 
knowledge in advance. It detects and traces suspected intruders so 
as to restrict malware behaviors. The novelty of Tracer design is 
two-fold.  One  is  to  use  intrusion  detection  and  tracing  to 
automatically configure security labels. The other is to trace and 
restrict suspected intruders instead of information flows as done 
by traditional MAC schemes. Tracer doesn't restrict the suspected 
intruders  right  away  but  allows  them  to  run as  long  as  possible 
except  blocking  their  critical  malware  behaviors.  This  design 
produces  a  MAC  system  with  good  compatibility  and  usability. 
We have implemented Tracer in Windows OS and the evaluation 
results  show  that  it  can  successfully  defend  against  a  set  of 
real-world  malware  programs,  including  unknown  malware 
programs,  with  much  lower  FP  rate  than  that  of  commercial 
anti-malware techniques. 
7.  ACKNOLEDGMENT 
We  would  like  to  thank  all  the  anonymous  reviewers  for  their 
insightful comments and feedback. This work is supported by Natural 
Science  Foundation  of  China  under  grants  No.  60703103,  No. 
60833005 and No. 60873213, US National Science Foundation under 
grants CNS-0751121, CNS-0751121 and CNS-0628093. 
8.  REFERENCES 
[1].  Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, 
and Engin Kirda. 2007. Panorama: capturing system-wide 
information flow for malware detection and analysis. In 
Proceedings of the 14th ACM conference on Computer and 
communications security. ACM, New York, NY, USA, 116-127. 
[2].  Ninghui Li, Ziqing Mao, and Hong Chen. Usable Mandatory 
Integrity Protection for Operating Systems. In Proceedings of the 
2007 IEEE Symposium on Security and Privacy. IEEE Computer 
Society, Washington, DC, USA, 164-178. 
[3].  Timothy Fraser. 2000. LOMAC: Low Water-Mark Integrity 
Protection for COTS Environments. In Proceedings of the 2000 
IEEE Symposium on Security and Privacy (SP '00). IEEE 
Computer Society, Washington, DC, USA, 230-245. 
[4].  Microsoft, Mandatory Integrity Control, http://msdn.micro- 
soft.com/en-us/library/bb648648(VS.85).aspx. 
[5].  XiaoFeng Wang, Zhuowei Li, Jong Youl Choi, Ninghui Li. 
PRECIP: Towards Practical and Retrofittable Confidential 
Information Protection. In Proceedings of 15th Network and 
Distributed System Security Symposium, 2008. 
[6].  Symantec, Inc, http://www.symantec.com/business/securit- 
y_response/threatexplorer/threats.jsp. 
[7].  D.E. Bell and L. J. LaPadula. Secure computer system: 
Unified exposition and Multics interpretation. Technical Report 
ESD-TR-75-306, MITRE Corp. MTR-2997, Bedford, MA, 1975. 
Available as NTIS AD-A023 588.   
[8].  K. J. Biba. Integrity considerations for secure computer 
systems. Technical Report MTR-3153, MITRE, April 1977. 
[9].  L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and 
S. A. Haghighat. 1995. Practical Domain and Type Enforcement 
for UNIX. In Proceedings of the 1995 IEEE Symposium on 
Security and Privacy (SP '95). IEEE Computer Society, 
Washington, DC, USA, 66-77. 
[10].  Pau-Chen Cheng, Pankaj Rohatgi, Claudia Keser, Paul A. 
Karger, Grant M. Wagner, and Angela Schuett Reninger. 2007. 
Fuzzy Multi-Level Security: An Experiment on Quantified 
Risk-Adaptive Access Control. In Proceedings of the 2007 IEEE 
Symposium on Security and Privacy (SP '07). IEEE Computer 
Society, Washington, DC, USA, 222-230. 
[11].  Michael Howard, Fending Off Future Attacks by Reducing Attack 
Surface, http://msdn.microsoft.com/en-us/library/ms972812.aspx, 2003. 
[12].  Marius van Oers, OSX Malware not taking off yet, http://w- 
ww.avertlabs.com/research/blog/ index.php/2007/03/20/osx- 
malware-not-taking-off-yet/, March, 2007. 
[13].  Jerome Saltzer and Michael Schroeder. The protection of information 
in computer systems. Communications of the ACM, 17(7), 1974. 
[14].  Peter Loscocco and Stephen Smalley. 2001. Integrating 
Flexible Support for Security Policies into the Linux Operating 
System. In Proceedings of the FREENIX Track: 2001 USENIX 
Annual Technical Conference, Clem Cole (Ed.). USENIX 
Association, Berkeley, CA, USA, 29-42. 
[15].  Marek Jawurek, RWTH Aachen. RSBAC - a framework for enhanced 
Linux system security, http://www.rsbac.org/documentation, 2006. 
[16].  Microsoft, Windows Vista Integrity Mechanism, 
http://msdn.microsoft.com/en-us/library/bb625964(v=MSDN.10).aspx. 
[17].  Virgil D. Gligor, C. S. Chandersekaran, Robert S. Chapman, Leslie 
J. Dotterer, Matthew S. Hecht, Wen-Der Jiang, Abhai Johri, Gary L. 
Luckenbaugh, and N. Vasudevan. 1987. Design and Implementation of 
Secure Xenix. IEEE Trans. Softw. Eng. 13, 2, 208-221. 
[18].  Samuel T. King and Peter M. Chen. 2003. Backtracking 
intrusions. In Proceedings of the nineteenth ACM symposium on 
Operating systems principles. ACM, New York, NY, USA, 223-236. 
[19].  Microsoft Security Bulletins, 
http://www.microsoft.com/technet/security/current.aspx. 
[20].  Offensive Computing, http://www.offensivecomputing.net/. 
[21].  Francis Hsu, Hao Chen, Thomas Ristenpart, Jason Li, and 
Zhendong Su. 2006. Back to the Future: A Framework for 
Automatic Malware Removal and System Repair. In Proceedings 
of the 22nd Annual Computer Security Applications Conference. 
IEEE Computer Society, Washington, DC, USA, 257-268. 
[22].  Engin Kirda, Christopher Kruegel, Greg Banks, Giovanni 
Vigna, and Richard A. Kemmerer. 2006. Behavior-based spyware 
detection. In Proceedings of the 15th conference on USENIX 
Security Symposium - Volume 15 (USENIX-SS'06), Vol. 15. 
USENIX Association, Berkeley, CA, USA. 
[23].  Lorenzo Martignoni, Elizabeth Stinson, Matt Fredrikson, 
Somesh Jha, and John C. Mitchell. A Layered Architecture for 
Detecting Malicious Behaviors. In Proceedings of the 11th 
international symposium on Recent Advances in Intrusion 
Detection, Springer-Verlag, Berlin, Heidelberg, 78-97. 
[24].  Andrea Lanzi, Monirul Sharif, and Wenke Lee. K-Tracer: A 
System for Extracting Kernel Malware Behavior. In Proceedings of 
Network and Distributed System Security Symposium, February 2009. 
[25].  Zhihong Zhang, Jianfeng Zhan, Yong Li, Lei Wang, Dan 
Meng, Bo Sang. "Precise request tracing and performance 
debugging for multi-tier services of black boxes". IEEE/IFIP 
International Conference on Dependable Systems & Networks, 
pp.337-346, June 2009. 
[26].  Ashvin Goel, Kenneth Po, Kamran Farhadi, Zheng Li, and 
Eyal de Lara. The taser intrusion recovery system. In Proceedings 
of the twentieth ACM symposium on Operating systems principles 
(SOSP '05). ACM, New York, NY, USA, 163-176. 
[27].  Kaspersky Lab. http://www.kaspersky.com/. 
[28].  Vipre, Inc, http://www.vipre.com/vipre/. 
[29].  Carey Nachenberg. Behavior Blocking: The Next Step in Anti-Virus 
Protection. http://www.securityfocus.com/infocus/1557, March 2002.