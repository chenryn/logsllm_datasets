### Anti-Malware Tools and Tracer

Anti-malware tools typically identify suspicious behavior based solely on the behavior itself. In contrast, Tracer also considers the suspicious label of the process requesting the behavior. The false negative (FN) rates for Kaspersky, VIPRE, and Tracer are nearly zero. However, MIC (Mandatory Integrity Control) has a high FN rate of 42%. This is likely because MIC does not implement the no-read-down rule of the BIBA model to avoid significant impacts on the usability and compatibility of Windows, which is a widely used operating system. Consequently, some sophisticated malware can bypass MIC. Despite this, MIC still provides a significant security improvement over Windows XP, which cannot defend against any malware samples by itself.

### Compatibility

The requirement for compatibility is that existing Commercial Off-The-Shelf (COTS) software can run on the MAC (Mandatory Access Control) prototype without causing significant incompatibility issues. On two hosts with Windows XP installed, we tested many commonly used network-dependent and local applications, such as Internet Explorer, MS Outlook Express, MS Word, MS Excel, MS PowerPoint, MS Messenger, mIRC, and Visual C++. We set protocols like HTTP, POP3, IRC, SMTP, FTP, FastTrack, eDonkey, and ICMP as dangerous. Trusted communications for downloading useful applications and Windows updates were defined as follows: {“C:\Windows\system32\wuauclt.exe”, “SSL”, “update.microsoft.com”}, {“C:\Windows\system32\svchost.exe”, “SSL”, “update.microsoft.com”}, {“C:\Windows\system32\wbem\wmiprvse.exe”, “SSL”, “update.microsoft.com”}. During testing, we performed various tasks, including sending emails, browsing websites, editing documents, developing VC++ programs, sharing files remotely, updating Windows, and moving files via USB disks. The system functioned well over several months without requiring modifications to existing software or encountering failures.

### False Positives Comparison

| Tool                | FPR (%) |
|---------------------|---------|
| MIC                 | 34      |
| Kaspersky           | 39      |
| VIPRE               | 37      |
| Tracer              | 5.6     |

**Figure 3.** Comparing false positives with commercial anti-malware techniques on Windows.

### Performance Overhead

Tracer's performance overhead comes from the additional instructions executed with every intercepted system call and Win32 API function. To evaluate this, we conducted an experiment on a Pentium-4 2.8GHz machine with 1GB memory running Windows XP SP2. First, we disabled Tracer and measured the average CPU cycles spent in each system call and API function using the `rtdsc` instruction. Then, we enabled Tracer and repeated the tests with malware programs, benign programs with suspicious flags, and benign programs without suspicious flags. The results, shown in Table 3, indicate that malware programs experience a 1.7% to 32.4% performance penalty compared to native execution, while benign programs have only a 0% to 13.5% penalty. The highest performance penalty is from intercepting `NtWriteFile()`, due to capturing file-copying behaviors. The overhead on benign programs is less than 2%, making the general performance impact acceptable.

**Table 3.** Overhead of Tracer (CPU Cycles)

| Functions            | Native   | Tracer-m  | Tracer-bf  | Tracer-b  |
|----------------------|----------|-----------|------------|-----------|
| NtCreateFile         | 334492   | 348471    | 348197     | 348197    |
| NtOpenFile           | 167620   | 175263    | 173235     | 173235    |
| NtWriteFile          | 245179   | 324623    | 278214     | 249832    |
| NtSetValueKey        | 204711   | 214743    | 214751     | 204789    |
| NtCreateKey          | 37241    | 40180     | 40221      | 40221     |
| CreateService        | 6568120  | 6679778   | 6679625    | 6568323   |
| OpenService          | 5490443  | 5609379   | 5609352    | 5490560   |
| NtCreateProcessEx    | 206458   | 208849    | 208849     | 208849    |

### Related Work

Tracer's design is inspired by MAC models such as DTE [9], LOMAC [3], UMIP [2], and PRECIP [5]. DTE, proposed by Lee Badger et al., groups processes and files into domains and types, controlling accesses between them. Tracer can be seen as a simplified DTE with two domains (benign and suspicious) and four types (benign, read-protected, write-protected, and suspicious). Tracer automatically configures DTE attributes using intrusion detection and tracing, enhancing usability.

LOMAC and UMIP evolve from the BIBA model, aiming to add usable and compatible mandatory integrity protections to mainstream operating systems. LOMAC addresses partial compatibility costs, while UMIP preserves system integrity against network-based attacks. PRECIP targets practical issues in containing spyware. Unlike these models, Tracer traces suspected intruders and restricts their behaviors rather than information flows, reducing false positives and improving compatibility and usability.

Most existing anti-malware technologies focus on detection [22][23][24]. Tracer combines detection and access control to both detect and block malware behaviors before they compromise security. It can complement malware detection by acting as an automatic intrusion response mechanism, further tracing and restricting intruders after detection. Another similar technology is behavior blocking [29], which confines adverse program behaviors. However, Tracer does not require pre-profiling and can confine programs executing malware behaviors.

Commercial anti-malware tools [27][28] often include behavior-based modules to defend against unknown malware. The key difference is that Tracer considers both the behavior and the source of the process, checking the suspicious label of the process. This results in fewer false positives, as shown in Section 4.2.

### Conclusions

In this paper, we propose a novel MAC model, Tracer, which integrates intrusion detection and tracing to defend against malware in a commercial OS. We extracted 30 critical malware behaviors and three common malware characteristics from 2,600 real-world malware samples and analyzed the root causes of incompatibility and low usability in MAC. Based on these studies, Tracer detects and traces suspected intruders to restrict malware behaviors. The novelty of Tracer lies in its use of intrusion detection and tracing to automatically configure security labels and in its approach of tracing and restricting suspected intruders rather than information flows. Tracer allows suspected intruders to run as long as possible, except for blocking critical malware behaviors, resulting in a system with good compatibility and usability. Our evaluation shows that Tracer can successfully defend against real-world malware, including unknown malware, with a much lower false positive rate than commercial anti-malware techniques.

### Acknowledgment

We thank the anonymous reviewers for their insightful comments and feedback. This work is supported by the Natural Science Foundation of China under grants No. 60703103, No. 60833005, and No. 60873213, and the US National Science Foundation under grants CNS-0751121 and CNS-0628093.

### References

[1] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin Kirda. 2007. Panorama: capturing system-wide information flow for malware detection and analysis. In Proceedings of the 14th ACM conference on Computer and communications security. ACM, New York, NY, USA, 116-127.

[2] Ninghui Li, Ziqing Mao, and Hong Chen. Usable Mandatory Integrity Protection for Operating Systems. In Proceedings of the 2007 IEEE Symposium on Security and Privacy. IEEE Computer Society, Washington, DC, USA, 164-178.

[3] Timothy Fraser. 2000. LOMAC: Low Water-Mark Integrity Protection for COTS Environments. In Proceedings of the 2000 IEEE Symposium on Security and Privacy (SP '00). IEEE Computer Society, Washington, DC, USA, 230-245.

[4] Microsoft, Mandatory Integrity Control, http://msdn.microsoft.com/en-us/library/bb648648(VS.85).aspx.

[5] XiaoFeng Wang, Zhuowei Li, Jong Youl Choi, Ninghui Li. PRECIP: Towards Practical and Retrofittable Confidential Information Protection. In Proceedings of 15th Network and Distributed System Security Symposium, 2008.

[6] Symantec, Inc, http://www.symantec.com/business/security_response/threatexplorer/threats.jsp.

[7] D.E. Bell and L. J. LaPadula. Secure computer system: Unified exposition and Multics interpretation. Technical Report ESD-TR-75-306, MITRE Corp. MTR-2997, Bedford, MA, 1975. Available as NTIS AD-A023 588.

[8] K. J. Biba. Integrity considerations for secure computer systems. Technical Report MTR-3153, MITRE, April 1977.

[9] L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghighat. 1995. Practical Domain and Type Enforcement for UNIX. In Proceedings of the 1995 IEEE Symposium on Security and Privacy (SP '95). IEEE Computer Society, Washington, DC, USA, 66-77.

[10] Pau-Chen Cheng, Pankaj Rohatgi, Claudia Keser, Paul A. Karger, Grant M. Wagner, and Angela Schuett Reninger. 2007. Fuzzy Multi-Level Security: An Experiment on Quantified Risk-Adaptive Access Control. In Proceedings of the 2007 IEEE Symposium on Security and Privacy (SP '07). IEEE Computer Society, Washington, DC, USA, 222-230.

[11] Michael Howard, Fending Off Future Attacks by Reducing Attack Surface, http://msdn.microsoft.com/en-us/library/ms972812.aspx, 2003.

[12] Marius van Oers, OSX Malware not taking off yet, http://www.avertlabs.com/research/blog/index.php/2007/03/20/osx-malware-not-taking-off-yet/, March, 2007.

[13] Jerome Saltzer and Michael Schroeder. The protection of information in computer systems. Communications of the ACM, 17(7), 1974.

[14] Peter Loscocco and Stephen Smalley. 2001. Integrating Flexible Support for Security Policies into the Linux Operating System. In Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference, Clem Cole (Ed.). USENIX Association, Berkeley, CA, USA, 29-42.

[15] Marek Jawurek, RWTH Aachen. RSBAC - a framework for enhanced Linux system security, http://www.rsbac.org/documentation, 2006.

[16] Microsoft, Windows Vista Integrity Mechanism, http://msdn.microsoft.com/en-us/library/bb625964(v=MSDN.10).aspx.

[17] Virgil D. Gligor, C. S. Chandersekaran, Robert S. Chapman, Leslie J. Dotterer, Matthew S. Hecht, Wen-Der Jiang, Abhai Johri, Gary L. Luckenbaugh, and N. Vasudevan. 1987. Design and Implementation of Secure Xenix. IEEE Trans. Softw. Eng. 13, 2, 208-221.

[18] Samuel T. King and Peter M. Chen. 2003. Backtracking intrusions. In Proceedings of the nineteenth ACM symposium on Operating systems principles. ACM, New York, NY, USA, 223-236.

[19] Microsoft Security Bulletins, http://www.microsoft.com/technet/security/current.aspx.

[20] Offensive Computing, http://www.offensivecomputing.net/.

[21] Francis Hsu, Hao Chen, Thomas Ristenpart, Jason Li, and Zhendong Su. 2006. Back to the Future: A Framework for Automatic Malware Removal and System Repair. In Proceedings of the 22nd Annual Computer Security Applications Conference. IEEE Computer Society, Washington, DC, USA, 257-268.

[22] Engin Kirda, Christopher Kruegel, Greg Banks, Giovanni Vigna, and Richard A. Kemmerer. 2006. Behavior-based spyware detection. In Proceedings of the 15th conference on USENIX Security Symposium - Volume 15 (USENIX-SS'06), Vol. 15. USENIX Association, Berkeley, CA, USA.

[23] Lorenzo Martignoni, Elizabeth Stinson, Matt Fredrikson, Somesh Jha, and John C. Mitchell. A Layered Architecture for Detecting Malicious Behaviors. In Proceedings of the 11th international symposium on Recent Advances in Intrusion Detection, Springer-Verlag, Berlin, Heidelberg, 78-97.

[24] Andrea Lanzi, Monirul Sharif, and Wenke Lee. K-Tracer: A System for Extracting Kernel Malware Behavior. In Proceedings of Network and Distributed System Security Symposium, February 2009.

[25] Zhihong Zhang, Jianfeng Zhan, Yong Li, Lei Wang, Dan Meng, Bo Sang. "Precise request tracing and performance debugging for multi-tier services of black boxes". IEEE/IFIP International Conference on Dependable Systems & Networks, pp.337-346, June 2009.

[26] Ashvin Goel, Kenneth Po, Kamran Farhadi, Zheng Li, and Eyal de Lara. The taser intrusion recovery system. In Proceedings of the twentieth ACM symposium on Operating systems principles (SOSP '05). ACM, New York, NY, USA, 163-176.

[27] Kaspersky Lab. http://www.kaspersky.com/.

[28] Vipre, Inc, http://www.vipre.com/vipre/.

[29] Carey Nachenberg. Behavior Blocking: The Next Step in Anti-Virus Protection. http://www.securityfocus.com/infocus/1557, March 2002.