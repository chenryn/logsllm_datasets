title:Gadge me if you can: secure and efficient ad-hoc instruction-level
randomization for x86 and ARM
author:Lucas Vincenzo Davi and
Alexandra Dmitrienko and
Stefan N&quot;urnberger and
Ahmad-Reza Sadeghi
Gadge Me If You Can
Secure and Efﬁcient Ad-hoc Instruction-Level Randomization
for x86 and ARM
Lucas Davi1,2, Alexandra Dmitrienko3, Stefan Nürnberger2, Ahmad-Reza Sadeghi1,2,3
1Intel Collaborative Research
Institute for Secure Computing (ICRI-SC)
at TU-Darmstadt, Germany
2CASED/System Security Lab
Technische Universität Darmstadt
Darmstadt, Germany
3Fraunhofer Institute for
Secure Information Technology
Darmstadt, Germany
ABSTRACT
Code reuse attacks such as return-oriented programming are
one of the most powerful threats to contemporary software.
ASLR was introduced to impede these attacks by dispersing
shared libraries and the executable in memory. However, in
practice its entropy is rather low and, more importantly, the
leakage of a single address reveals the position of a whole li-
brary in memory. The recent mitigation literature followed
the route of randomization, applied it at diﬀerent stages such
as source code or the executable binary. However, the code
segments still stay in one block.
In contrast to previous
work, our randomization solution, called XIFER, (1) dis-
perses all code (executable and libraries) across the whole
address space, (2) re-randomizes the address space for each
run, (3) is compatible to code signing, and (4) does neither
require oﬄine static analysis nor source-code. Our proto-
type implementation supports the Linux ELF ﬁle format
and covers both mainstream processor architectures x86 and
ARM. Our evaluation demonstrates that XIFER performs
eﬃciently at load- and during run-time (1.2% overhead).
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Security
Keywords
software diversity; randomization; ASLR; return-oriented
programming, return-into-libc
INTRODUCTION
1.
Security-critical operations such as online banking are in-
creasingly performed by widespread everyday-software. This
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
makes them an appealing target for various attacks, in par-
ticular runtime attacks which subject a process to an ad-
versary’s control. Albeit control-ﬂow attacks on software
are known for about two decades, they are still one of the
major threats to software on desktop PCs and mobile de-
vices. The NIST vulnerability database reported 663 buﬀer
errors in 2011, and 724 for 2012 [26]. The broad introduc-
tion of non-executable memory, write-xor-execute (W ⊕ X)
for short, successfully mitigates code injection attacks but
gave rise to a form of attacks that re-use existing code by
intelligently stitching small code fractions, so-called gadgets,
together in order to execute arbitrary code. These gadgets
are well selected so that they end in an instruction that
transfers control to the next gadget, e.g. a ret (return) in-
struction which pops its target oﬀ the stack. Hence, the
name return-oriented programming (ROP [31]).
Since these attacks rely on exact addresses of the instruc-
tions they want to abuse, Address Space Layout Random-
ization (ASLR, e.g. [29]) debuted as the next move in that
cat-and-mouse game. By randomizing the base address of
loaded code and data in memory, ASLR in theory makes it
infeasible for an attacker to predict the location of gadgets
in memory. However, low entropy [32] and the fact that
a single leaked pointer makes it possible to calculate rela-
tive addresses called for yet another step of defense. Such a
means of defense has come to light in the form of ﬁner and
ﬁner code randomization that, in contrast to ASLR, also
shuﬄes the code itself, not just its base address. Despite
the fact that such randomization is a simple idea, its imple-
mentation is highly involved and several approaches exist in
the literature, ranging from compiler-based solutions [6, 11,
18] to run-time solutions [16] that randomize the program
either once or even constantly during its lifetime [13].
As we elaborate in Section 3, most of the existing works
have at least one of the following drawbacks: they (i) need
access to source code, (ii) do not cover the whole address
space, e.g. no loaded libraries and the code segment stays in
one block, (iii) do not re-randomize at each process start, or
(iv) touch the executable ﬁle rendering them incompatible
to code signing which is prevalent for commercial software
and mandatory in modern app stores.
In order to compare and measure existing software diver-
sity methods, we establish a set of properties that make a
randomization solution ideal, i.e., featuring the best trade-
oﬀ among these properties. These properties are: (1) mit-
igation of code reuse attacks (ROP and return-into-libc),
299(2) high diversiﬁcation entropy, (3) eﬃcient re-randomization,
(4) required input information (e.g., source code or other side
information), (5) code coverage (code parts that cannot be
diversiﬁed), (6) compliance to code signing, (7) performance,
(8) space consumption (memory and disk) (9) shared library
support, and (10) generality vs. speciﬁcity, i.e. applicability
or limit to certain hardware architectures.
To our surprise, recent software diversity and randomiza-
tion approaches do not fulﬁl these criteria (as shown in the
comparison in Table 1). In particular, they randomize the
code only within its segment so that it stays as one block,
which means a leaked pointer is always surrounded by the
remainder of the code. Moreover, most of the existing work
avoids re-randomization for each run, probably due to eﬃ-
ciency concerns. Hence, all binaries of a system remain un-
changed leading to an increasing advantage for an adversary
over time. Further, many existing solutions touch the main
executable ﬁle which courrupts a potential digital signature
that could be in place.
Our Contribution. In this paper, we present a novel tool,
called XIFER that adequately addresses the aforementioned
requirements for an ideal randomization tool:
• It achieves an instruction granularity randomization.
• It randomizes all sections of an executable and library
(not just .text) and disperses fractions of the executable
segments so that they do not stay in one block, chang-
ing all relative relations of code and data so that leaked
pointers cannot be used to calculate relative addresses.
• The randomization takes place on-the-ﬂy – not requir-
ing an oﬄine static analysis – leading to a diﬀerent
address space layout for each process.
• The high randomization performance needed for an on-
the-ﬂy solution stems from a technique we call partial
dis- and reassembly. This technique leverages the fact
that most of the instructions do not reference code or
data and hence do not need to be dis- or re-assembled.
We evaluated our prototype for x86 and ARM by using
the benchmark suite SPEC CPU2006. Our evaluation re-
sults (see Section 6) demonstrate that XIFER eﬃciently
performs randomization so that the resulting runtime over-
head is only 1.2%, and the linear load-time overhead achieves
5500 kBit/s.
2. BACKGROUND
A simpliﬁed view of a code reuse attack is shown in Figure 1.
It shows an abstract memory layout of a vulnerable appli-
cation, where an adversary hijacks the intended execution
ﬂow of the application by exploiting a memory-related vul-
nerability on the stack (e.g., a buﬀer overﬂow). In step 1,
the adversary exploits the vulnerability to inject a number
of pointers (Return Address 1 to 3) on the stack (step 1).
Each of these addresses point to a certain code sequence re-
siding in the linked libraries or the executable itself. The
executable/library code segment contains a number of func-
tions, where each function consists of several so-called basic
blocks (BBLs). A BBL is a sequence of machine instructions
with a single entry and exit instruction, where the latter one
can be any branch instruction the processor supports (e.g.,
return, indirect/direct jump or call).
After the adversary has subverted the execution ﬂow by,
e.g. overwriting the program’s return address, the execution
(cid:2)(cid:14)(cid:28)(cid:15)(cid:22)(cid:23)(cid:11)(cid:22)(cid:30)(cid:1)
(cid:35)(cid:1)
(cid:37)(cid:1)
(cid:9)(cid:24)(cid:11)(cid:13)(cid:18)(cid:1)(cid:7)(cid:21)(cid:17)(cid:20)(cid:24)(cid:15)(cid:22)(cid:1)(cid:33)(cid:9)(cid:7)(cid:34)(cid:1)
(cid:9)(cid:24)(cid:11)(cid:13)(cid:18)(cid:1)
(cid:8)(cid:15)(cid:24)(cid:27)(cid:22)(cid:20)(cid:1)(cid:2)(cid:14)(cid:14)(cid:22)(cid:15)(cid:23)(cid:23)(cid:1)(cid:37)(cid:1)
(cid:8)(cid:15)(cid:24)(cid:27)(cid:22)(cid:20)(cid:1)(cid:2)(cid:14)(cid:14)(cid:22)(cid:15)(cid:23)(cid:23)(cid:1)(cid:36)(cid:1)
(cid:8)(cid:15)(cid:24)(cid:27)(cid:22)(cid:20)(cid:1)(cid:2)(cid:14)(cid:14)(cid:22)(cid:15)(cid:23)(cid:23)(cid:1)(cid:35)(cid:1)
(cid:4)(cid:29)(cid:15)(cid:13)(cid:27)(cid:24)(cid:11)(cid:12)(cid:19)(cid:15)(cid:32)(cid:1)
(cid:9)(cid:16)(cid:11)(cid:22)(cid:15)(cid:14)(cid:1)(cid:6)(cid:17)(cid:12)(cid:22)(cid:11)(cid:22)(cid:17)(cid:15)(cid:23)(cid:1)
(cid:36)(cid:1)
(cid:5)(cid:27)(cid:20)(cid:13)(cid:25)(cid:21)(cid:20)(cid:1)(cid:2)(cid:1)
(cid:3)(cid:3)(cid:6)(cid:1)(cid:35)(cid:1)
(cid:3)(cid:3)(cid:6)(cid:1)(cid:36)(cid:1)
(cid:3)(cid:3)(cid:6)(cid:1)(cid:37)(cid:1)
(cid:8)(cid:4)(cid:10)(cid:1)
(cid:8)(cid:4)(cid:10)(cid:1)
(cid:8)(cid:4)(cid:10)(cid:1)
Figure 1: Memory view of a stack-based code reuse attack.
is redirected to BBL 1 (step 2). After BBL 1 has executed,
the terminating return instruction (RET) pops the next re-
turn address oﬀ the stack (Return Address 2), thereby in-
creasing the stack pointer by one memory word, and redi-
rects the execution to BBL 3 and so forth.
In practice, an application includes a large number of
BBLs. While return-into-libc attacks would target execu-
tion of known functions, return-oriented programming en-
ables the combination of arbitrary code sequences. Both
attack techniques form a Turing-complete basis for building
arbitrary (malicious) programs [31, 34]. Since code-reuse
attacks have become the standard runtime attack vector
against desktop and mobile computing platforms [35, 14, 30,
17, 25, 20, 7, 19], our goal in this paper is to present an
eﬃcient mitigation technique that entirely prevents these
attacks.
3. RELATED WORK
To mitigate the threat of code reuse attacks, recent propos-
als apply various randomization techniques. We deﬁne a
set of properties that we think are vital for secure, eﬀec-
tive and eﬃcient randomization and use them to motivate
the design and implementation of our approach. In Table 1,
these properties are also compared to existing randomiza-
tion proposals realized as compiler extensions [6, 11, 18, 4],
system-wide base address randomization (ASLR) [29], and
binary rewriting tools [21, 28, 16, 36].
P1 – Eﬀectiveness Against Code Reuse Attacks. The
solution shall mitigate return-into-libc and ROP, since both
have been shown to be Turing-complete [31, 34].
P2 – Entropy. A strong randomization scheme must pro-
vide enough entropy to render brute-force attacks infeasible
and should change relative distances between code and data
as well in order to render a leaked pointer futile.
P3 – Randomization Frequency. A randomization tool
should be able to re-diversify a program for each execution.
Otherwise, an adversary could acquire knowledge about the
memory layout of the diversiﬁed program by running the
program various times and launching brute-force attacks.
P4 – Input Information. The fact that a randomization
solutions requires access to source code or to additional in-
formation like debug symbols or relocation information.
P5 – Code Coverage. The recent past has shown that
only a piece of un-randomized code is in many cases suﬃcient
to launch a code-reuse attack [12]. Hence, randomizing the
whole address space is a necessity.
300P6 – Compliance to Code Signing. Code signing is a
mandatory feature in nearly all modern app stores [24, 15,
9]. A randomization tool should not touch the executable
ﬁle in order to keep the signature intact.
P7 – Performance. Performance is inﬂuenced by the fact
that (1) randomized code pieces must be connected to retain
their original order and (2) the reduced locality of code is
more prone to cache misses.
P8 – Memory and Disk Space. The randomization so-
lution might need a static analysis or caches to be built and
maintained in an oﬄine phase or at run-time. A large size
of either of these is undesirable.
P9 – Library Support. Libraries exist to ease application
development and to save space on disk. As code-reuse at-
tacks typically leverage code residing in libraries, it is crucial
that a randomization tool can also be applied to libraries.
P10 – Target Hardware Architectures. A randomiza-
tion tool should be general enough to be easily ported to
another processor architecture.
Compiler-Based Randomization.
The original randomization approach targets and proposes
a compiler-based solution [6]. Recently, Franz et al. [11, 18]
have explored the feasibility of a compiler-based approach
for large-scale software diversity in the mobile market. The
authors suggest that app store providers integrate a multi-
compiler (diversiﬁer) in the code production process. How-
ever, this approach has two shortcomings: App store providers
have no access to the app source code. This requires the mul-
ticompiler to be deployed on the developer side, who has to
deliver thousands of diﬀerent app instances to the app store.
Secondly, an app instance gets only randomized once. A for-
mer randomization work by Bhatkar et al. [4] does not suf-
fer from this shortcoming, because it deploys a source code
transformer that enables re-randomization for each run.
In general, compiler based solutions have the potential to
provide among all randomization approaches the highest de-
gree of entropy due to the access to source code. However,
as argued above, source code is rarely available in practice
and current app store models are not compatible to a mul-
ticompiler approach.
Binary Instrumentation Based Randomization.
These techniques directly operate on the application binary
to perform code randomization. In particular, Kil et al. [21]
introduce address space layout permutation (ASLP). The
proposed scheme statically rewrites ELF executables to per-
mute all functions and data objects of an executable. More-
over, the Linux kernel has been modiﬁed to increase the en-
tropy for the base address randomization of shared libraries.
Although, the presented scheme is eﬃcient and supports re-
randomization, it is not directly compatible to code signing,
provides a lower randomization entropy compared to instruc-
tion or basic block (BBL) randomization, and does not apply
code randomization to shared libraries.
Recently, Pappas et al. [28] introduced ORP, a static rewrit-
ing tool which randomizes instructions and registers within
a BBL to mitigate ROP attacks. However, ORP cannot
prevent return-into-libc attacks (which have shown to be
Turing-complete [34]), since all functions remain at their
original position. In contrast, ILR (instruction location ran-
domization) [16] translates each address to a randomized
version while executing in a process virtual machine. For
this, a program needs to be analyzed and re-assembled dur-
ing a static analysis phase which induces signiﬁcant run-time
performance and space overhead (the rewriting rules reserve
on average 104 MB for only one benchmark of SPEC CPU).
ILR also suﬀers from code coverage deﬁciencies due to im-
precision of the static analysis phase. This concerns in par-
ticular the destination addresses of indirect jumps, indirect
calls, and function returns. Speciﬁcally, ILR does not at-
tempt to resolve destination addresses of indirect calls [16,
6] allowing an adversary to launch return-into-libc like at-
tacks. Both ORP and ILR cannot re-randomize a binary for
each program.
In contrast, STIR [36] randomizes and permutes BBLs for
each execution and hence provides a higher randomization
entropy compared to ORP and ILR. However, STIR still
requires a static analysis and rewriting phase which is not
compatible to code signing. Moreover, it suﬀers from a high
space overhead, because the ﬁle size of a stirred program
increases by 73 % on average.
Finally, Guiﬀrida et al. [13] propose a ﬁne-grained random-
ization proposal for operating system kernels. Besides stack,
heap and code randomization, it allows re-randomization of
a module at runtime but is limited to microkernels.
4. DESIGN
In this section, we ﬁrst present the design of our randomiza-
tion tool XIFER, after which we elaborate on several tech-
nical challenges and present our solutions thereof.
4.1 High-Level Design of XIFER
As already alluded to, the goal of our tool is to fulﬁll all of
the aforementioned properties and criteria by randomizing
the complete address space for every start of a process. This
randomization deliberately tears code apart subjecting rel-
ative distances within code to change. This is achieved by
randomizing the position of each executable and library seg-
ment (such as .text, .init, .ctors, .data, .bss) in memory
and additionally twirling the code so that leaked pointers
do not reveal anything about the remainder of the code or
data.
a) 
b) 
Executable 
Executable 
CODE 
A B C D 