### Vulnerabilities in Autonomous Vehicle Systems

Autonomous vehicles share vulnerabilities similar to traditional computers and can be compromised by remote exploits. Additionally, the cost-sensitive nature of most vehicles exerts pressure to reduce hardware costs by sharing resources among multiple software components. According to an industry report [10], the cost of automotive electronics is projected to increase from 35% to 50% of the total car cost between 2020 and 2030. Some companies, such as Visteon, are already implementing shared hardware solutions. For instance, Visteon’s SmartCore [17] runs both non-safety-critical infotainment systems and safety-critical advanced driving-assistance systems on the same processor.

To mitigate these risks, future autonomous vehicle platforms may adopt separate hardware for safety-critical control tasks and network-connected infotainment functions. This approach would break one of the key assumptions that underpin the proposed attack.

### Difficult-to-Predict Routes

Our method relies on the number of particles in Adaptive Monte Carlo Localization (AMCL) for route and location prediction. However, certain real-world scenarios can reduce the distinguishability of particle traces, thereby decreasing prediction accuracy. 

- **Highways:** Highways are designed for smooth traffic, and the number of particles typically remains at a minimum between entry and exit points.
- **Grid Road Networks (e.g., downtown areas):** Our model does not explicitly distinguish between left and right turns, which can lead to mirrored route predictions.

Despite these challenges, many routes through a combination of suburban, downtown, and highway roads exhibit distinctive traces that can be distinguished from other routes.

### Related Work

#### Side-Channel Attacks for Physical Properties

In this paper, we use cache side-channel attacks to infer physical properties such as a vehicle’s route or location. Other side channels, such as cellular signal strength and accelerometer data, have also been used to track locations. For example, Michalevsky et al. [49] and Han et al. [39] demonstrate how cellular signal strength and accelerometer data can be used to infer the location of a smartphone. Enev et al. [30] show that driver identification can be achieved by analyzing brake pedal usage and CAN bus data.

These attacks assume that an attacker has direct access to physical world information or behaviors. To prevent such attacks, operating systems can block access to this information. In contrast, our attack exploits microarchitecture-level side channels, demonstrating that memory access patterns can leak information about the physical world.

#### Non-Crypto Cache Side-Channel Attacks

Our side-channel attack is a non-cryptographic attack. Previous studies have used cache side channels for various non-cryptographic purposes. For instance, Yan et al. [70] extracted neural network hyperparameters, and Shusterman et al. [63] identified websites using the cache occupancy channel. Gruss et al. [38] and Brasser et al. [24] showed that keystrokes and DNA sequences can be inferred in real-time using cache side-channel attacks. Our work extends the scope of non-crypto cache side-channel attacks by showing that a vehicle’s route and location can be learned from memory access patterns, considering a history of cache profiles using machine learning models.

#### Side-Channel Attack Protection

We leverage cache side channels to extract physical information about the vehicle. Various proposals for defending against cache side-channel attacks fall into two categories: isolation and randomization.

- **Isolation:** Techniques include spatial isolation (partitioning) and temporal isolation (scheduling). DAWG [42] uses way-partitioning, NoMo [29] provides dynamic cache reservation, and STEALTHMEM [41] partitions the Last-Level Cache (LLC) into secure and non-secure regions. Temporal isolation leverages the need for coordinated timing between attack and victim programs, with schedulers enforcing policies to prevent leakage [33, 65, 68].
- **Randomization:** Approaches like RPcache [69] and encrypted-address remapping [56, 57] randomize memory addresses, while randomized clocks [47, 66] prevent precise timing measurements.

Despite these protection mechanisms, microarchitectural side-channel protection is not widely adopted in current computing systems, often due to the need for hardware changes. Our study highlights a new threat for autonomous vehicles, motivating stronger side-channel protection in future processor designs.

### Conclusion

This paper demonstrates that cache side-channel attacks can stealthily infer the routes and locations of autonomous vehicles. Our results indicate that the location privacy of an autonomous vehicle can be compromised when its perception and control software shares hardware resources with less trusted software. Without a new processor design that includes time channel isolation, our findings suggest that separate hardware should be used for trusted autonomous driving software and the rest of the system.

### Acknowledgments

We thank our shepherd Yossi Oren and the anonymous reviewers for their valuable feedback. We also thank Jacopo Banfi, Mark Campbell, Mohamed Ismail, Alex Ivanov, and Yizhou Zhang for insightful discussions. This work was partially funded by NSF grants CNS-1513797 and ECCS-1932501, NASA grant NNX16AB09G, and the Jacobs Fellowship of Cornell University.

### References

[References listed here as provided in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and understandable.