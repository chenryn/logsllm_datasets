vulnerabilities similar to traditional computers and may be
compromised by remote exploits.
Third, most vehicles are cost-sensitive, and there will be
pressure to lower hardware costs by having multiple soft-
ware components share hardware resources. According to
an industry report [10], the automobile electronic cost will
increase from 35% to 50% of the total car cost from 2020 to
2030. In fact, some companies are already adopting shared
hardware in their products. For example, Visteon’s Smart-
Core [17] runs both non-safety-critical infotainment system
and safety-critical advanced driving-assistance systems on the
same processor.
On the other hand, the proposed attack can be prevented
by breaking one of the three key assumptions. For example,
for safety, future autonomous vehicle platforms may use two
different hardware platforms for safety-critical control tasks
and network-connected infotainment functions.
6.4 Difﬁcult-to-Predict Routes
We rely on the number of particles in AMCL for route/location
prediction. Several real-world scenarios may exhibit less dis-
tinguishable characteristics in the traces of the number of
particles, reducing the prediction accuracy.
• Identifying different routes on long highways: highways
are designed for smooth trafﬁc and generally the number
of particles remain at minimum between entry and exit.
• Identifying different routes in a grid road network (e.g.,
downtown area): since our model does not explicitly
distinguish left and right turns, the prediction might be
pointing to a mirrored route/location.
However, in many scenarios, a vehicle will go through
suburban, downtown roads and highways, and a route through
a combinations of these roads exhibits a distinctive trace that
can be distinguished from other routes.
USENIX Association
29th USENIX Security Symposium    871
7 Related Work
Side-Channel Attacks for Physical Properties
In this pa-
per, we use the cache side-channel attack to infer physical
properties such as a vehicle’s route or location. In addi-
tion to the cache side channel, there are other side channels
that can be used to learn physical properties. For example,
Michalevsky et al. observe that cellular signal strength, which
is directly viewable in the smartphone software without privi-
lege, is location-dependent [49]. By recording the time series
of the signal strength, they are able to track the location of
the smartphone. Similarly, Han et al. use the accelerometers
on smartphones as a data source for location inference [39].
In addition to inferring physical location information, side
channels can also be used to identify vehicle drivers. For
example, Enev et al. [30] show that the driver of an automobile
can be inferred by looking at the brake pedal and other types
of information on the CAN bus while the vehicle is moving.
These attacks assume that an attacker has direct access
to information on the physical world or behaviors such as
the signal strength/accelerometer. To prevent such attacks,
the accesses can be blocked by the OS. On the other hand,
the attack on this paper exploits microarchitecture-level side
channels and show that a program’s memory access patterns
can also leak information on the physical world.
Non-Crypto Cache Side Channel Our side channel attack
is a non-cryptographic attack. Previous studies have also used
the cache side channel for other types of non-cryptographic
attacks. For example, Yan et al. use the cache side-channel
attack to extract the hyperparameters of a neural network [70].
Shusterman et al. propose the cache occupancy channel,
which records the number of evictions for each memory ad-
dress during a ﬁxed time period, to identify the website on a
browser [63]. These attacks target relatively static information
that does not change during the attack. There are also attacks
on more dynamic assets. For example, Gruss et al. show that
keystrokes can be inferred in real time using a cache side-
channel attack [38]. Brasser et al. use cache access patterns
to reveal a DNA sequence streamed into an SGX enclave for
analysis at run time [24]. In this attack, the information can
be inferred from a transient cache proﬁle without considering
the history. In this paper, we expand the scope of the non-
crypto cache side-channel attacks by showing that a vehicle’s
route/location can also be learned from memory access pat-
terns. In order to infer the route/location from memory access
patterns that change quickly, our attack considers a history of
cache proﬁles using machine-learning models.
Side-Channel Attack Protection We leverage cache side
channels to extract the physical information of the vehicle.
There are many proposals for defending against cache side-
channel attacks. They can be classiﬁed into two categories,
namely isolation and randomization. We discuss some of the
representative papers here.
Isolation includes spatial isolation (partition) or temporal
isolation (scheduling). For partition, DAWG [42] adopts way-
partitioning to prevent side channel leakage. NoMo [29] pro-
vides dynamic cache reservation to active threads to prevent
cache side-channel attacks. STEALTHMEM [41] partitions
the LLC into a non-secure region and a secure region using
page coloring. Temporal isolation leverages the observation
that the cache side-channel attacks need coordinated timing
between attack and victim programs in order to observe the
cache state. The scheduler can enforce a certain scheduling
policy to prevent side channel leakage [33, 65, 68].
For randomization, Wang et al. proposed the random per-
mutation cache (RPcache) to prevent cache side-channel leak-
age [69]. More recently, Qureshi et al. proposed encrypted-
address and remapping to prevent cache attack [56,57]. These
approaches randomize the memory address. Additionally, we
can also randomize the clock that an attacker needs to use to
obtain cache timing measurements. A randomized clock can
prevent an attack program from getting precise timing and
inferring correct state of the cache [47, 66].
Many protection mechanisms have been developed, but mi-
croarchitectural side-channel protection is not widely adopted
in today’s computing systems. For strong protection, many of
these techniques also require hardware changes, preventing
adoption by existing systems. Our study shows a new threat
for autonomous vehicles, motivating stronger side-channel
protection in future processor designs.
8 Conclusion
In this paper, we show that the cache side-channel attack can
be used to stealthily infer routes and locations of autonomous
vehicles. Our results show that the location privacy of an
autonomous vehicle can be compromised when its percep-
tion and control software share hardware resources with less
trusted software. Without a new processor design whose iso-
lation guarantee includes time channels, our ﬁndings suggest
that separate hardware should be used for trusted autonomous
driving software and the rest of the system.
Acknowledgments
We thank our shepherd Yossi Oren and the anonymous re-
viewers for their helpful feedbacks on this paper. We thank
Jacopo Banﬁ, Mark Campbell, Mohamed Ismail, Alex Ivanov,
and Yizhou Zhang for the insightful discussions. This work
was funded in part by NSF grant CNS-1513797 and ECCS-
1932501, NASA grant NNX16AB09G and the Jacobs Fellow-
ship of Cornell University.
872    29th USENIX Security Symposium
USENIX Association
References
[1] amcl - ROS Wiki. https:/wiki.ros.org/amcl.
[2] Apollo. http://apollo.auto.
[3] Gazebo. http://gazebosim.org.
[4] Inside a Self-driving Uber. https://www.infoq.com/
presentations/uber-self-driving-software.
[5] Jackal UGV.
https://www.clearpathrobotics.
com/jackal-small-unmanned-ground-vehicle.
[6] Mastik: A Micro-Architectural Side-Channel Toolkit.
https://cs.adelaide.edu.au/~yval/Mastik.
[7] Maze Generator for Gazebo. https://github.com/
PeterMitrano/gzmaze.
[8] Melodic - ROS. http://wiki.ros.org/melodic.
[21] Zipline. https://www.flyzipline.com.
[22] A. Bacha, C. Bauman, R. Faruque, M. Fleming, C. Ter-
welp, C. Reinholtz, D. Hong, A. Wicks, T. Alberi, D. An-
derson, et al. Odin: Team victortango’s entry in the
DARPA urban challenge. Journal of Field Robotics,
25(8):467–492, 2008.
[23] J. Bohren, T. Foote, J. Keller, A. Kushleyev, D. Lee,
A. Stewart, P. Vernaza, J. Derenick, J. Spletzer, and
B. Satterﬁeld. Little ben: The ben franklin racing team’s
entry in the 2007 DARPA urban challenge. Journal of
Field Robotics, 25(9):598–614, 2008.
[24] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen,
S. Capkun, and A.-R. Sadeghi. Software Grand Ex-
In 11th
posure: SGX Cache Attacks Are Practical.
USENIX Workshop on Offensive Technologies (WOOT),
2017.
[9] Nuvo-6108GC series. https://www.neousys-tech.
com/en/product/application/edge-ai-gpu-
computing/nuvo-6108gc-gpu-computing.
[25] M. Buehler, K. Iagnemma, and S. Singh. The DARPA
Urban Challenge: Autonomous Vehicles in City Trafﬁc,
volume 56. Springer, 2009.
[10] PwC Semiconductor Report. https://www.pwc.de/
de/automobilindustrie/assets/semiconductor_
survey_interactive.pdf.
[11] rosbag - ROS Wiki. http://wiki.ros.org/rosbag.
[12] SICK USA. https://www.sick.com.
[13] SPAN-CPT Single Enclosure GNSS/INS Receiver.
https://www.novatel.com/products/span-gnss-
inertial-systems/span-combined-systems/
span-cpt.
[14] Tesla Autopilot.
autopilot.
https://www.tesla.com/
[15] Uber Advanced Technologies Group. https://www.
uber.com/info/atg.
[16] Ubuntu 18.04.01 LTS (Bionic Beaver).
releases.ubuntu.com/18.04.
http://
[17] Visteon SmartCore.
https://www.visteon.com/
products/domain-controller.
[18] Waymo. https://www.waymo.com.
[19] Waymo and Intel Collaborate on Self-Driving
https://newsroom.intel.
Car Technology.
com/editorials/waymo-intel-announce-
collaboration-driverless-car-technology.
[26] L. B. Cremean, T. B. Foote, J. H. Gillula, G. H. Hines,
D. Kogan, K. L. Kriechbaum, J. C. Lamb, J. Leibs,
L. Lindzey, C. E. Rasmussen, et al.
Alice: An
information-rich autonomous vehicle for high-speed
desert navigation. Journal of Field Robotics, 23(9):777–
810, 2006.
[27] L. de Paula Veronese, E. de Aguiar, R. C. Nascimento,
J. Guivant, F. A. A. Cheein, A. F. De Souza, and
T. Oliveira-Santos. Re-emission and satellite aerial maps
applied to vehicle localization on urban environments.
In IEEE/RSJ International Conference on Intelligent
Robots and Systems (IROS), pages 4285–4290, 2015.
[28] C. Disselkoen, D. Kohlbrenner, L. Porter, and D. Tullsen.
Prime+ abort: A timer-free high-precision L3 cache at-
tack using Intel TSX. In 26th USENIX Security Sympo-
sium, pages 51–67, 2017.
[29] L. Domnitser, A. Jaleel, J. Loew, N. Abu-Ghazaleh,
and D. Ponomarev. Non-monopolizable caches: Low-
complexity mitigation of cache side channel attacks.
ACM Transactions on Architecture and Code Optimiza-
tion (TACO), 8(4):35, 2012.
[30] M. Enev, A. Takakuwa, K. Koscher, and T. Kohno. Au-
tomobile driver ﬁngerprinting. Proceedings on Privacy
Enhancing Technologies, 2016(1):34–50, 2016.
[20] Waymo’s Autonomous Fleet Has Intel Inside. https:
//www.electronicdesign.com/automotive/
waymo-s-autonomous-fleet-has-intel-inside.
[31] M. Farsi, K. Ratcliff, and M. Barbosa. An overview of
controller area network. Computing & Control Engi-
neering Journal, 10(3):113–120, 1999.
USENIX Association
29th USENIX Security Symposium    873
[32] L. C. Fernandes, J. R. Souza, G. Pessin, P. Y. Shinzato,
D. Sales, C. Mendes, M. Prado, R. Klaser, A. C. Ma-
galhaes, A. Hata, et al. Carina intelligent robotic car:
architectural design and applications. Journal of Systems
Architecture, 60(4):372–392, 2014.
[33] A. Ferraiuolo, Y. Wang, D. Zhang, A. C. Myers, and G. E.
Suh. Lattice priority scheduling: Low-overhead timing-
channel protection for a shared memory controller. In
22nd IEEE International Symposium on High Perfor-
mance Computer Architecture (HPCA), pages 382–393,
2016.
[34] D. Fox. KLD-sampling: Adaptive particle ﬁlters. In
Advances in Neural Information Processing Systems
(NIPS), pages 713–720, 2002.
[35] D. Fox. Adapting the sample size in particle ﬁlters
through KLD-sampling. The International Journal of
Robotics Research, 22(12):985–1003, 2003.
[36] J. Friedman, T. Hastie, and R. Tibshirani. The Elements
of Statistical Learning, volume 1. Springer Series in
Statistics New York, NY, USA, 2001.
[37] D. Gruss, C. Maurice, K. Wagner, and S. Mangard.
Flush+ Flush: a fast and stealthy cache attack. In In-
ternational Conference on Detection of Intrusions and
Malware, and Vulnerability Assessment, pages 279–299.
Springer, 2016.
[38] D. Gruss, R. Spreitzer, and S. Mangard. Cache tem-
plate attacks: Automating attacks on inclusive last-level
caches. In 24th USENIX Security Symposium, pages
897–912, 2015.
[39] J. Han, E. Owusu, L. T. Nguyen, A. Perrig, and J. Zhang.
Accomplice: Location inference using accelerometers
on smartphones. In Fourth International Conference on
Communication Systems and Networks (COMSNETS),
pages 1–9, 2012.
[40] A. Y. Hata and D. F. Wolf. Feature detection for vehicle
localization in urban environments using a multilayer
lidar. IEEE Transactions on Intelligent Transportation
Systems, 17(2):420–429, 2015.
[41] T. Kim, M. Peinado, and G. Mainar-Ruiz. STEALTH-
MEM: System-level protection against cache-based side
channel attacks in the cloud. In 21st USENIX Security
symposium, pages 189–204, 2012.
[42] V. Kiriansky, I. Lebedev, S. Amarasinghe, S. Devadas,
and J. Emer. DAWG: A defense against cache timing
attacks in speculative execution processors. In 51st An-
nual IEEE/ACM International Symposium on Microar-
chitecture (MICRO), pages 974–987, 2018.
[43] J. Leonard, J. How, S. Teller, M. Berger, S. Campbell,
G. Fiore, L. Fletcher, E. Frazzoli, A. Huang, S. Karaman,
et al. A perception-driven autonomous urban vehicle.
Journal of Field Robotics, 25(10):727–774, 2008.
[44] M. Lipp, D. Gruss, R. Spreitzer, C. Maurice, and S. Man-
gard. ARMageddon: Cache attacks on mobile devices.
In 25th USENIX Security Symposium, pages 549–564,
2016.
[45] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee. Last-
level cache side-channel attacks are practical. In IEEE
Symposium on Security and Privacy (SP), pages 605–