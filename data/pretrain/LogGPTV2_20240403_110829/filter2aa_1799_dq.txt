dump, but it omits the usually irrelevant user-mode data and code, and therefore can be significantly 
smaller. As an example, on a system running a 64-bit version of Windows with 4 GB of RAM, a kernel 
memory dump was 294 MB in size.
When you configure kernel memory dumps, the system checks whether the paging file is large 
enough, as described earlier. There isn’t a reliable way to predict the size of a kernel memory dump. 
The reason you can’t predict the size of a kernel memory dump is that its size depends on the amount 
of kernel-mode memory in use by the operating system and drivers present on the machine at the time 
of the crash. Therefore, it is possible that at the time of the crash, the paging file is too small to hold a 
546 
CHAPTER 10 Management, diagnostics, and tracing
kernel dump, in which case the system will switch to generating a minidump. If you want to see the size 
of a kernel dump on your system, force a manual crash either by configuring the registry option to al-
low you to initiate a manual system crash from the console (documented at https://docs.microsoft.com/
en-us/windows-hardware/drivers/debugger/forcing-a-system-crash-from-the-keyboard) or by using 
the Notmyfault tool (https://docs.microsoft.com/en-us/sysinternals/downloads/notmyfault).
The automatic memory dump overcomes this limitation, though. The system will be indeed able 
to create a paging file large enough to ensure that a kernel memory dump can be captured most of 
the time. If the computer crashes and the paging file is not large enough to capture a kernel memory 
dump, Windows increases the size of the paging file to at least the size of the physical RAM installed.
To limit the amount of disk space that is taken up by crash dumps, Windows needs to determine 
whether it should maintain a copy of the last kernel or complete dump. After reporting the kernel 
fault (described later), Windows uses the following algorithm to decide whether it should keep the 
Memory.dmp file. If the system is a server, Windows always stores the dump file. On a Windows client 
system, only domain-joined machines will always store a crash dump by default. For a non-domain-
joined machine, Windows maintains a copy of the crash dump only if there is more than 25 GB of 
free disk space on the destination volume (4 GB on ARM64, configurable via the HKLM\SYSTEM\
CurrentControlSet\Control\CrashControl\PersistDumpDiskSpaceLimit registry value)—that is, the 
volume where the system is configured to write the Memory.dmp file. If the system, due to disk space 
constraints, is unable to keep a copy of the crash dump file, an event is written to the System event 
log indicating that the dump file was deleted, as shown in Figure 10-41. This behavior can be overrid-
den by creating the DWORD registry value HKLM\SYSTEM\CurrentControlSet\Control\CrashControl\
AlwaysKeepMemoryDump and setting it to 1, in which case Windows always keeps a crash dump, 
regardless of the amount of free disk space.
FIGURE 10-41 Dump file deletion event log entry.
CHAPTER 10 Management, diagnostics, and tracing
547
EXPERIMENT: Viewing dump file information
Each crash dump file contains a dump header that describes the stop code and its parameters, 
the type of system the crash occurred on (including version information), and a list of pointers 
to important kernel-mode structures required during analysis. The dump header also contains 
the type of crash dump that was written and any information specific to that type of dump. The 
.dumpdebug debugger command can be used to display the dump header of a crash dump file. 
For example, the following output is from a crash of a system that was configured for an auto-
matic dump:
0: kd> .dumpdebug 
----- 64 bit Kernel Bitmap Dump Analysis - Kernel address space is available, 
User address space may not be available. 
DUMP_HEADER64: 
MajorVersion        0000000f 
MinorVersion        000047ba 
KdSecondaryVersion  00000002 
DirectoryTableBase  00000000`006d4000 
PfnDataBase         ffffe980`00000000 
PsLoadedModuleList  fffff800`5df00170 
PsActiveProcessHead fffff800`5def0b60 
MachineImageType    00008664 
NumberProcessors    00000003 
BugCheckCode
000000e2 
BugCheckParameter1  00000000`00000000 
BugCheckParameter2  00000000`00000000 
BugCheckParameter3  00000000`00000000 
BugCheckParameter4  00000000`00000000 
KdDebuggerDataBlock fffff800`5dede5e0 
SecondaryDataState  00000000 
ProductType
00000001 
SuiteMask
00000110 
Attributes
00000000 
BITMAP_DUMP: 
DumpOptions
00000000 
HeaderSize
16000 
BitmapSize
9ba00 
Pages
25dee 
KiProcessorBlock at fffff800`5e02dac0 
  3 KiProcessorBlock entries: 
  fffff800`5c32f180 ffff8701`9f703180 ffff8701`9f3a0180
The .enumtag command displays all secondary dump data stored within a crash dump (as 
shown below). For each callback of secondary data, the tag, the length of the data, and the data 
itself (in byte and ASCII format) are displayed. Developers can use Debugger Extension APIs to 
create custom debugger extensions to also read secondary dump data. (See the “Debugging 
Tools for Windows” help file for more information.)
EXPERIMENT: Viewing dump file information
Each crash dump file contains a dump header that describes the stop code and its parameters, 
the type of system the crash occurred on (including version information), and a list of pointers 
to important kernel-mode structures required during analysis. The dump header also contains 
the type of crash dump that was written and any information specific to that type of dump. The 
.dumpdebug debugger command can be used to display the dump header of a crash dump file. 
For example, the following output is from a crash of a system that was configured for an auto-
matic dump:
0: kd> .dumpdebug
----- 64 bit Kernel Bitmap Dump Analysis - Kernel address space is available,
User address space may not be available.
DUMP_HEADER64:
MajorVersion        0000000f
MinorVersion        000047ba
KdSecondaryVersion  00000002
DirectoryTableBase  00000000`006d4000
PfnDataBase         ffffe980`00000000
PsLoadedModuleList  fffff800`5df00170
PsActiveProcessHead fffff800`5def0b60
MachineImageType    00008664
NumberProcessors    00000003
BugCheckCode
000000e2
BugCheckParameter1  00000000`00000000
BugCheckParameter2  00000000`00000000
BugCheckParameter3  00000000`00000000
BugCheckParameter4  00000000`00000000
KdDebuggerDataBlock fffff800`5dede5e0
SecondaryDataState  00000000
ProductType
00000001
SuiteMask
00000110
Attributes
00000000
BITMAP_DUMP:
DumpOptions
00000000
HeaderSize
16000
BitmapSize
9ba00
Pages
25dee
KiProcessorBlock at fffff800`5e02dac0
  3 KiProcessorBlock entries:
  fffff800`5c32f180 ffff8701`9f703180 ffff8701`9f3a0180
The .enumtag command displays all secondary dump data stored within a crash dump (as 
shown below). For each callback of secondary data, the tag, the length of the data, and the data 
itself (in byte and ASCII format) are displayed. Developers can use Debugger Extension APIs to 
create custom debugger extensions to also read secondary dump data. (See the “Debugging 
Tools for Windows” help file for more information.)
548 
CHAPTER 10 Management, diagnostics, and tracing
{E83B40D2-B0A0-4842-ABEA71C9E3463DD1} - 0x100 bytes 
  46 41 43 50 14 01 00 00 06 98 56 52 54 55 41 4C  FACP......VRTUAL 
  4D 49 43 52 4F 53 46 54 01 00 00 00 4D 53 46 54  MICROSFT....MSFT 
  53 52 41 54 A0 01 00 00 02 C6 56 52 54 55 41 4C  SRAT......VRTUAL 
  4D 49 43 52 4F 53 46 54 01 00 00 00 4D 53 46 54  MICROSFT....MSFT 
  57 41 45 54 28 00 00 00 01 22 56 52 54 55 41 4C  WAET(...."VRTUAL 
  4D 49 43 52 4F 53 46 54 01 00 00 00 4D 53 46 54  MICROSFT....MSFT 
  41 50 49 43 60 00 00 00 04 F7 56 52 54 55 41 4C  APIC`.....VRTUAL 
...
Crash dump generation
Phase 1 of the system boot process allows the I/O manager to check the configured crash dump op-
tions by reading the HKLM\SYSTEM\CurrentControlSet\Control\CrashControl registry key. If a dump 
is configured, the I/O manager loads the crash dump driver (Crashdmp.sys) and calls its entry point. 
The entry point transfers back to the I/O manager a table of control functions, which are used by the 
I/O manager for interacting with the crash dump driver. The I/O manager also initializes the secure 
encryption needed by the Secure Kernel to store the encrypted pages in the dump. One of the control 
functions in the table initializes the global crash dump system. It gets the physical sectors (file extent) 
where the page file is stored and the volume device object associated with it. 
The global crash dump initialization function obtains the miniport driver that manages the physical 
disk in which the page file is stored. It then uses the MmLoadSystemImageEx routine to make a copy 
of the crash dump driver and the disk miniport driver, giving them their original names prefixed by the 
dump_ string. Note that this implies also creating a copy of all the drivers imported by the miniport 
driver, as shown in the Figure 10-42. 
FIGURE 10-42 Kernel modules copied for use to generate and write a crash dump file.
{E83B40D2-B0A0-4842-ABEA71C9E3463DD1} - 0x100 bytes
  46 41 43 50 14 01 00 00 06 98 56 52 54 55 41 4C  FACP......VRTUAL
  4D 49 43 52 4F 53 46 54 01 00 00 00 4D 53 46 54  MICROSFT....MSFT
  53 52 41 54 A0 01 00 00 02 C6 56 52 54 55 41 4C  SRAT......VRTUAL
  4D 49 43 52 4F 53 46 54 01 00 00 00 4D 53 46 54  MICROSFT....MSFT
  57 41 45 54 28 00 00 00 01 22 56 52 54 55 41 4C  WAET(...."VRTUAL
  4D 49 43 52 4F 53 46 54 01 00 00 00 4D 53 46 54  MICROSFT....MSFT
  41 50 49 43 60 00 00 00 04 F7 56 52 54 55 41 4C  APIC`.....VRTUAL
...
CHAPTER 10 Management, diagnostics, and tracing
549
The system also queries the DumpFilters value for any filter drivers that are required for writing to 
the volume, an example being Dumpfve.sys, the BitLocker Drive Encryption Crashdump Filter driver. It 
also collects information related to the components involved with writing a crash dump—including the 
name of the disk miniport driver, the I/O manager structures that are necessary to write the dump, and 
the map of where the paging file is on disk—and saves two copies of the data in dump-context struc-
tures. The system is ready to generate and write a dump using a safe, noncorrupted path.
Indeed, when the system crashes, the crash dump driver (%SystemRoot%\System32\Drivers\
Crashdmp.sys) verifies the integrity of the two dump-context structures obtained at boot by perform-
ing a memory comparison. If there’s not a match, it does not write a crash dump because doing so 
would likely fail or corrupt the disk. Upon a successful verification match, Crashdmp.sys, with sup-
port from the copied disk miniport driver and any required filter drivers, writes the dump information 
directly to the sectors on disk occupied by the paging file, bypassing the file system driver and storage 
driver stack (which might be corrupted or even have caused the crash).
Note Because the page file is opened early during system startup for crash dump use, 
most crashes that are caused by bugs in system-start driver initialization result in a dump 
file. Crashes in early Windows boot components such as the HAL or the initialization of boot 
drivers occur too early for the system to have a page file, so using another computer to 
debug the startup process is the only way to perform crash analysis in those cases.
During the boot process, the Session Manager (Smss.exe) checks the registry value HKLM\SYSTEM\
CurrentControlSet\Control\Session Manager\Memory Management\ExistingPageFiles for a list of ex-
isting page files from the previous boot. (See Chapter 5 of Part 1 for more information on page files.) It 
then cycles through the list, calling the function SmpCheckForCrashDump on each file present, looking 
to see whether it contains crash dump data. It checks by searching the header at the top of each paging 
file for the signature PAGEDUMP or PAGEDU64 on 32-bit or 64-bit systems, respectively. (A match indi-
cates that the paging file contains crash dump information.) If crash dump data is present, the Session 
Manager then reads a set of crash parameters from the HKLM\SYSTEM\CurrentControlSet\Control\
CrashControl registry key, including the DumpFile value that contains the name of the target dump file 
(typically %SystemRoot%\Memory.dmp, unless configured otherwise). 
Smss.exe then checks whether the target dump file is on a different volume than the paging file. 
If so, it checks whether the target volume has enough free disk space (the size required for the crash 
dump is stored in the dump header of the page file) before truncating the paging file to the size of the 
crash data and renaming it to a temporary dump file name. (A new page file will be created later when 
the Session Manager calls the NtCreatePagingFile function.) The temporary dump file name takes the 
format DUMPxxxx.tmp, where xxxx is the current low-word value of the system’s tick count (The system 
attempts 100 times to find a nonconflicting value.) After renaming the page file, the system removes 
both the hidden and system attributes from the file and sets the appropriate security descriptors to 
secure the crash dump.
Next, the Session Manager creates the volatile registry key HKLM\SYSTEM\CurrentControlSet\
Control\CrashControl\MachineCrash and stores the temporary dump file name in the value DumpFile. 
550 
CHAPTER 10 Management, diagnostics, and tracing
It then writes a DWORD to the TempDestination value indicating whether the dump file location is only 
a temporary destination. If the paging file is on the same volume as the destination dump file, a tempo-
rary dump file isn’t used because the paging file is truncated and directly renamed to the target dump 
file name. In this case, the DumpFile value will be that of the target dump file, and TempDestination 
will be 0.
Later in the boot, Wininit checks for the presence of the MachineCrash key, and if it exists, launches 
the Windows Fault Reporting process (Werfault.exe) with the -k -c command-line switches (the k 
flag indicates kernel error reporting, and the c flag indicates that the full or kernel dump should 
be converted to a minidump). WerFault reads the TempDestination and DumpFile values. If the 
TempDestination value is set to 1, which indicates a temporary file was used, WerFault moves the 
temporary file to its target location and secures the target file by allowing only the System account 
and the local Administrators group access. WerFault then writes the final dump file name to the 
FinalDumpFileLocation value in the MachineCrash key. These steps are shown in Figure 10-43.
Session
Manager
Wininit
WerFault
4
1
2
5
6
7
“MachineCrash”
Memory.dmp
WerFault
3
SMSS
SmpCheckForCrashDump
Dumpxxxx.tmp
Paging file
FIGURE 10-43 Crash dump file generation.
To provide more control over where the dump file data is written to—for example, on systems 
that boot from a SAN or systems with insufficient disk space on the volume where the paging file 
is configured—Windows also supports the use of a dedicated dump file that is configured in the 
DedicatedDumpFile and DumpFileSize values under the HKLM\SYSTEM\CurrentControlSet\Control\
CrashControl registry key. When a dedicated dump file is specified, the crash dump driver creates 
the dump file of the specified size and writes the crash data there instead of to the paging file. If no 
DumpFileSize value is given, Windows creates a dedicated dump file using the largest file size that 
would be required to store a complete dump. Windows calculates the required size as the size of the 
total number of physical pages of memory present in the system plus the size required for the dump 
header (one page on 32-bit systems, and two pages on 64-bit systems), plus the maximum value for 
secondary crash dump data, which is 256 MB. If a full or kernel dump is configured but there is not 
enough space on the target volume to create the dedicated dump file of the required size, the system 
falls back to writing a minidump.
CHAPTER 10 Management, diagnostics, and tracing
551
Kernel reports
After the WerFault process is started by Wininit and has correctly generated the final dump file, 
WerFault generates the report to send to the Microsoft Online Crash Analysis site (or, if configured, 
an internal error reporting server). Generating a report for a kernel crash is a procedure that involves 
the following:
1. 
If the type of dump generated was not a minidump, it extracts a minidump from the dump file and 
stores it in the default location of %SystemRoot%\Minidump, unless otherwise configured through 
the MinidumpDir value in the HKLM\SYSTEM\CurrentControlSet\Control\CrashControl key.
2.
It writes the name of the minidump files to HKLM\SOFTWARE\Microsoft\Windows\Windows
Error Reporting\KernelFaults\Queue.
3.
It adds a command to execute WerFault.exe (%SystemRoot%\System32\WerFault.exe) with the
–k –rq flags (the rq flag specifies to use queued reporting mode and that WerFault should be
restarted) to HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce so that WerFault
is executed during the first user’s logon to the system for purposes of actually sending the
error report.
When the WerFault utility executes during logon, as a result of having configured itself to start, it 
launches itself again using the –k –q flags (the q flag on its own specifies queued reporting mode) and 
terminates the previous instance. It does this to prevent the Windows shell from waiting on WerFault 
by returning control to RunOnce as quickly as possible. The newly launched WerFault.exe checks the 
HKLM\SOFTWARE\Microsoft\Windows\Windows Error Reporting\KernelFaults\Queue key to look 
for queued reports that may have been added in the previous dump conversion phase. It also checks 
whether there are previously unsent crash reports from previous sessions. If there are, WerFault.exe 
generates two XML-formatted files:
I 
The first contains a basic description of the system, including the operating system version,
a list of drivers installed on the machine, and the list of devices present in the system.
I 
The second contains metadata used by the OCA service, including the event type that triggered
WER and additional configuration information, such as the system manufacturer.