# 九、AWS 上的 Kubernetes
在公共云上使用 Kubernetes 对于您的应用来说是灵活且可扩展的。AWS 是公有云行业的热门服务之一。在本章中，您将了解什么是 AWS，如何在 AWS 上设置 Kubernetes，以及以下主题:
*   了解公共云
*   使用和理解 AWS 组件
*   kops 的 Kubernetes 设置和管理
*   云提供商
# AWS 简介
当您在公共网络上运行应用时，您需要网络、虚拟机和存储等基础架构。显然，公司借用或构建自己的数据中心来准备这些基础架构，然后雇佣数据中心工程师和操作员来监控和管理这些资源。
然而，购买和维护这些资产需要大量的资本支出；您还需要数据中心工程师/操作员的运营费用。您还需要一段阅读时间来完全设置这些基础架构，例如购买服务器、安装到数据中心机架、布线网络，然后是操作系统的初始配置/安装，等等。
因此，快速分配具有适当资源容量的基础架构是决定企业成功的重要因素之一。
为了使基础设施管理更容易、更快，有许多技术可以帮助数据中心。比如，对于虚拟化来说，**软件定义网络** ( **SDN** )、**存储区域网络** ( **SAN** )等等。但是结合这种技术存在一些敏感的兼容性问题，难以稳定；因此需要聘请这个行业的专家，最终使得运营成本更高。
# 公共云
有一些公司已经提供了在线基础设施服务。AWS 是一种众所周知的提供在线基础设施的服务，称为云或公共云。早在 2006 年，AWS 就正式推出了虚拟机服务，名为**弹性计算云** ( **EC2** )、在线对象商店服务，名为**简单存储服务** ( **S3** )和在线消息队列服务，名为**简单队列服务** ( **SQS** )。
这些服务足够简单，但从数据中心管理的角度来看，由于现收现付定价模式(每小时或每年向 AWS 支付使用费)，它们减轻了基础架构预分配并减少了读取时间。因此，AWS 变得如此受欢迎，以至于许多公司已经从自己的数据中心转向公共云。
An antonym of the public cloud, your own data center is called **on- premises**.
# 应用编程接口和基础设施作为代码
使用公共云而不是内部数据中心的独特优势之一是公共云提供了一个控制基础架构的应用编程接口。AWS 提供命令行工具( **AWS CLI** )来控制 AWS 基础设施。比如注册 AWS([https://aws.amazon.com/free/](https://aws.amazon.com/free/))后，再安装 AWS CLI([http://docs . AWS . Amazon . com/CLI/latest/user guide/installing . html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html))，那么如果你想启动一个虚拟机(EC2 实例)，使用 AWS CLI 如下:
![](img/00118.jpeg)
如您所见，注册 AWS 后，只需几分钟即可访问您的虚拟机。另一方面，如果您从头开始建立自己的内部数据中心会怎么样？下图是使用内部数据中心还是使用公共云的高级比较:
![](img/00119.jpeg)
可以看到，公有云太简单快捷；这就是为什么公共云不仅对于新兴的，而且对于永久的使用都是灵活和方便的。
# AWS 组件
AWS 有一些配置网络和存储的组件。这些对于理解公共云如何工作很重要，对于了解如何配置 Kubernetes 也很重要。
# VPC 和子网
在 AWS 上，首先需要创建自己的网络；它被称为**虚拟私有云** ( **VPC** )并使用 SDN 技术。AWS 允许您在 AWS 上创建一个或多个 VPC。每个 VPC 可以根据需要相互连接。创建 VPC 时，只需定义一个网络 CIDR 区块和 AWS 区域。比如`us-east-1`上的 CIDR `10.0.0.0/16`。无论您是否可以访问公共网络，您都可以定义任何网络地址范围(在/16 到/28 网络掩码范围之间)。VPC 的创建非常快，一旦创建了 VPC，然后你需要在 VPC 内创建一个或多个子网。
在以下示例中，通过 AWS 命令行创建了一个 VPC:
```
//specify CIDR block as 10.0.0.0/16
//the result, it returns VPC ID as "vpc-66eda61f"
$ aws ec2 create-vpc --cidr-block 10.0.0.0/16
{
 "Vpc": {
 "VpcId": "vpc-66eda61f", 
   "InstanceTenancy": "default", 
   "Tags": [], 
   "State": "pending", 
   "DhcpOptionsId": "dopt-3d901958", 
   "CidrBlock": "10.0.0.0/16"
  }
}
```
子网是一个逻辑网络块。它必须属于一个 VPC，此外，还必须属于一个可用性区域。比如 VPC`vpc-66eda61f``us-east-1b`。那么 CIDR 网络一定在 VPC 的 CIDR 境内。例如，如果 VPC CIDR 是`10.0.0.0/16` ( `10.0.0.0` - `10.0.255.255`)那么一个子网 CIDR 可能是`10.0.1.0/24` ( `10.0.1.0` - `10.0.1.255`)。
在以下示例中，在`vpc-66eda61f`上创建了两个子网(`us-east-1a`和`us-east-1b`):
```
//1st subnet 10.0."1".0/24 on us-east-1"a" availability zone
$ aws ec2 create-subnet --vpc-id vpc-66eda61f --cidr-block 10.0.1.0/24 --availability-zone us-east-1a
{
 "Subnet": {
    "VpcId": "vpc-66eda61f", 
    "CidrBlock": "10.0.1.0/24", 
    "State": "pending", 
    "AvailabilityZone": "us-east-1a", 
    "SubnetId": "subnet-d83a4b82", 
    "AvailableIpAddressCount": 251
  }
} 
//2nd subnet 10.0."2".0/24 on us-east-1"b"
$ aws ec2 create-subnet --vpc-id vpc-66eda61f --cidr-block 10.0.2.0/24 --availability-zone us-east-1b
{
   "Subnet": {
    "VpcId": "vpc-66eda61f", 
    "CidrBlock": "10.0.2.0/24", 
    "State": "pending", 
    "AvailabilityZone": "us-east-1b", 
    "SubnetId": "subnet-62758c06", 
    "AvailableIpAddressCount": 251
   }
}
```
让我们将第一个子网设为面向公共的子网，将第二个子网设为私有子网。这意味着面向公众的子网可以从互联网访问，这允许它有一个公共的 IP 地址。另一方面，私有子网不能有公共 IP 地址。为此，您需要设置网关和路由表。
In order to make high availability for public networks and private networks, it is recommended to create at least four subnets (two public and two private on different availability zones).
But to simplify examples that are easy to understand, these examples create one public and one private subnet.
# 互联网网关和网络地址转换网关
在大多数情况下，您的 VPC 需要与公共互联网连接。在这种情况下，您需要创建一个 **IGW** ( **互联网网关**)来连接到您的 VPC。
在以下示例中，创建了一个 IGW 并将其附加到`vpc-66eda61f`:
```
//create IGW, it returns IGW id as igw-c3a695a5
$ aws ec2 create-internet-gateway 
{
   "InternetGateway": {
      "Tags": [], 
      "InternetGatewayId": "igw-c3a695a5", 
      "Attachments": []
   }
}
//attach igw-c3a695a5 to vpc-66eda61f
$ aws ec2 attach-internet-gateway --vpc-id vpc-66eda61f --internet-gateway-id igw-c3a695a5  
```
连接 IGW 后，为指向 IGW 的子网设置路由表(默认网关)。如果默认网关指向 IGW，则该子网能够拥有公共 IP 地址并访问互联网。因此，如果默认网关没有指向 IGW，它将被确定为私有子网，这意味着没有公共访问。
在以下示例中，创建了指向 IGW 的路由表，并将其设置为第一个子网:
```
//create route table within vpc-66eda61f
//it returns route table id as rtb-fb41a280
$ aws ec2 create-route-table --vpc-id vpc-66eda61f
{
 "RouteTable": {
 "Associations": [], 
 "RouteTableId": "rtb-fb41a280", 
 "VpcId": "vpc-66eda61f", 
 "PropagatingVgws": [], 
 "Tags": [], 
 "Routes": [
 {
 "GatewayId": "local", 
 "DestinationCidrBlock": "10.0.0.0/16", 
 "State": "active", 
 "Origin": "CreateRouteTable"
 }
 ]
 }
}
//then set default route (0.0.0.0/0) as igw-c3a695a5
$ aws ec2 create-route --route-table-id rtb-fb41a280 --gateway-id igw-c3a695a5 --destination-cidr-block 0.0.0.0/0
{
 "Return": true
}
//finally, update 1st subnet (subnet-d83a4b82) to use this route table
$ aws ec2 associate-route-table --route-table-id rtb-fb41a280 --subnet-id subnet-d83a4b82
{
 "AssociationId": "rtbassoc-bf832dc5"
}
//because 1st subnet is public, assign public IP when launch EC2
$ aws ec2 modify-subnet-attribute --subnet-id subnet-d83a4b82 --map-public-ip-on-launch  
```
另一方面，第二个子网虽然是私有子网，但不需要公共 IP 地址，然而，私有子网有时需要接入互联网。例如，下载一些包并访问 AWS 服务访问。在这种情况下，我们仍然可以选择连接到互联网。叫做**网络地址转换网关** ( **NAT-GW** )。
NAT-GW 允许私有子网通过 NAT-GW 访问公共互联网。因此，NAT-GW 必须位于公共子网，私有子网路由表指向 NAT-GW 作为默认网关。请注意，为了在公共网络上访问 NAT-GW，需要将**弹性 IP** ( **EIP** )附在 NAT-GW 上。
在以下示例中，创建了一个网络地址转换网关:
```
//allocate EIP, it returns allocation id as eipalloc-56683465
$ aws ec2 allocate-address 
{
 "PublicIp": "34.233.6.60", 
 "Domain": "vpc", 
 "AllocationId": "eipalloc-56683465"
}
//create NAT-GW on 1st public subnet (subnet-d83a4b82
//also assign EIP eipalloc-56683465
$ aws ec2 create-nat-gateway --subnet-id subnet-d83a4b82 --allocation-id eipalloc-56683465
{
 "NatGateway": {
 "NatGatewayAddresses": [
 {
 "AllocationId": "eipalloc-56683465"
 }
 ], 
 "VpcId": "vpc-66eda61f", 
 "State": "pending", 
 "NatGatewayId": "nat-084ff8ba1edd54bf4", 
 "SubnetId": "subnet-d83a4b82", 
 "CreateTime": "2017-08-13T21:07:34.000Z"
 }
}  
```
Unlike an IGW, AWS charges you an additional hourly cost for Elastic IP and NAT-GW. Therefore, if you wish to save costs, launch an NAT-GW only while accessing the internet.
创建 NAT-GW 需要几分钟的时间，然后一旦创建了 NAT-GW，就更新一个指向 NAT-GW 的专用子网路由表，然后任何 EC2 实例都能够访问互联网，但是同样，由于专用子网上没有公共 IP 地址，因此没有机会从公共互联网访问专用子网 EC2 实例。
在以下示例中，第二个子网的更新路由表指向 NAT-GW 作为默认网关:
```
//as same as public route, need to create a route table first
$ aws ec2 create-route-table --vpc-id vpc-66eda61f
{
 "RouteTable": {
 "Associations": [], 
 "RouteTableId": "rtb-cc4cafb7", 
 "VpcId": "vpc-66eda61f", 
 "PropagatingVgws": [], 
 "Tags": [], 
 "Routes": [
 {
 "GatewayId": "local", 
 "DestinationCidrBlock": "10.0.0.0/16", 
 "State": "active", 
 "Origin": "CreateRouteTable"
 }
 ]
 }
}
//then assign default gateway as NAT-GW
$ aws ec2 create-route --route-table-id rtb-cc4cafb7 --nat-gateway-id nat-084ff8ba1edd54bf4 --destination-cidr-block 0.0.0.0/0
{
 "Return": true
}
//finally update 2nd subnet that use this routing table
$ aws ec2 associate-route-table --route-table-id rtb-cc4cafb7 --subnet-id subnet-62758c06
{
 "AssociationId": "rtbassoc-2760ce5d"
}
```
总体而言，有两个子网被配置为公共子网和专用子网。每个子网都有使用 IGW 和 NAT-GW 的默认路由，如下所示。请注意，标识会因 AWS 分配的唯一标识符而异:
| **子网类型** | **CIDR 街区** | **子网 ID** | **路由表 ID** | **默认网关** | **在 EC2 启动时分配公共 IP** |
| 公众 | 10.0.1.0/24 | `subnet-d83a4b82` | `rtb-fb41a280` | `igw-c3a695a5` (IGW) | 是 |