---
## Page 328
保持简明
红灯
你的任务是实施一项测试，该测试能检验你的软件能处理一
>
张简单的订单。
答案
你可以在这里练
public void testSimple0rder() (
Test
进礼券号础。
/ / Fiset ceste the ondes processot
OtlenfPtocessot osdestocessos  new OudetPtocesoO,
/ / Then you need to desctibe the ondet that shoald be placed
Oudetndoumation otdesJndo = xew Oudet3ndotmationO,
ondet3nfo setCstomenName(*Osx*).
这重最尚掌的事情是
ondet?nlo setDtinkDesesiption(“Bold wich toom" ),
不用担心礼幕上的余
ouetJndo seGifeCedNmde( (2345),
…·.只是测试
oudetJdo setPreleme&StonefNumer( (23),
衍掌处理的最剂羊的
版本。
// Mend the otiet ofs to the oniet poceesot and check the teceipt
Receipt seceipt  oneflocesn mocessOdet(ondetnto).
aeseNotN(seceipt getPickapTime()):
assest Tte(seceipt getConfitmutioaNamder() > 0),
assestTtse(teceipt . getGCBalance().eguais(O))
没有愚囊的问题
在测试中有一堆不是常数的值，我应该在意吗？
个假设？不会不好吗？
简短，我们并未将这些值设置为常数，但是，你应该像处
测试通过。因此，我们假设礼券上的余额是足够的，但是，
理产品代码那样，始理测试代码，并且应用相同的风格和
由于我们准备实施后台的代码，我们可以确定以后一定会
规则。请记住，这可不是用完就县的代码：它与你系统的
处理，我们给自已安排的是重构，一旦我们让该项测试通
其他部分保存在存储目录中，而且，你会依赖它，让你如
过，我们显然增加对礼券的测议，该礼券上没有足够的余
道是否有些事情工作不正常，千万不可小视。
额，当我们那样做时，我们必然要回头看看通过测试的代
码，重新修改以支持不同礼券和不同余额的较况，但是，
这还需要一些思考。读下去吧
292
第8章
---
## Page 329
测试驱动开发
简明化代表避免关联
由于我们最后的测试要通过的是让我们把processOrder（）方法
增加到orderProcessor。该方法应该返国Receipt对象，像
这样：
OdePocessos
标题：用礼券预江咖啡
+ pocessOuden(ouens3ndo : Oudetndonmation):
Receipt
描述：从培项中换选保喜次的咖唯，输入价
的礼靠号，名宰和喜爱的士多店，单当版文
获得确认号，礼券余额，以及预计准备时间。
然而，这是变得有点奇怪的地方：processOrder(）需要连接
Starbuzz的数据库。这里的任务涉及到这个系统的功能片段：
优先级：
40
任务4
估计值：
5
为礼券、饮科信
乌、客户信乌和
收据信乌实施后
台数据房。
等一下…….最简单的代码可能会累生什么？当我们
开给最后的任务时，我们不能只是加数揭序得保
春编写的实际的数摇厚代码响？
关联使代码变得更复杂，但TDD的要点是使事情
尽可能的简单
你必须让processOrder（）与数据库保持沟通，但
是，数据库的访问代码是另外一项你还没有处理
的任务的一部分。
最重要的是，要通过测试的最简单的代码真的是
实际编写数据库的访间代码吗？
在这种情形下，你会做什么？
目前位置
293
---
## Page 330
简明的代码是可测试的代码
总是编写可测试的代码
当你第一次开始实践TDD时，你会常常发现自己处在这样的情形之中，你准备要测
试的代码看起来与你项目中的其他事情有关联。这往往会在以后出现维护上的问题，
但是，当读到TDD时，现在就是一个巨大的问题。还记得我们的规则吗？我们真的
职的DBA”
规则#2：
实施最简明的代
码使其通过测试
我们的网题是：员责慎项任务的代
码为其依任务的代码推绑在一起，还涉
及到数猫库代码，对响1
所有现实情况中的代码都是有关联的
当你在系统中只有几个基本的类时、要将事情分开
来并不困难。所以，你可以每次测试一件事情。但
渐渐地，代码终究会与系统外部的事情相关联，如
数据库系统。
然面，这种现象还会以多种方式出现：你的系统可
能依赖于网络连接来传送数据，或者你可能需要从
文件中读取数据，该文件又是由另外一个应用创建
的，又或者你可能需要利用声音的API程序产生不同
的声音。在这些情况下，代码之间的关联性使测试
….…支持etox
一件事情变得很困难。
基于的聊天客户端。
但是，那并不表示你不必做测试，而是表示你必须
想个办法独立于这些美联性来进行测试。
294
第8章
---
## Page 331
测试驱动开发
当难于测试时，
检查一下你的设计
要排除代码之间的关联性，首先要看看是否能排除它。检查一下你的系统设
计，看看是否真地需要把每件事情紧耦合（Tightycoupled）在一起——或所
请的相互依存，正如你当前设计的要求那样。在Starbuzz案例中，下面是我们
目前做的假设：
Otdrt
80
Ptoceseot
Utilities
我们有什么
订单处理器必须是在数
据库中取得礼券，检查订
tocessOnder(
获取礼券
单、保存它，并且更新礼
7
serGc(
券（在数据库中），所以，
这个方法更接务
processOrder必须连接
数据磨济间代码
check belance
etc.
到数据库这正是让测
aveOdet(...)
insett into
试很棘手的地方。
saweGC(...)
epdate
数据休阅代码必须身
Statx数揭库决通
Ordet
Test DB
Ptocessot
Utitities
我们能量模拟数排库的
我们需要什么
实用程序
我们l如何使processOrder()
有相同的沟通，但又能避免数
mocessOndet(.. .)
据库访问代码？我们需要某种
获得数据的途径，但又不需用
setGc(.
到数据库一
几乎就像我们需
我们不想爱变
npcessOtder(
.)
达是卖
要一个假的数据访问层。
piocessOnien(）)
但数播基
实的对象
weOrden(.
）
] do kothing.
sweGC(...)
涉及到数
并国没有
但我们需羞能从监媒库仿问居切
换到“假数据”济问展。
目前位置
295
---
## Page 332
以策略设计模式切换到测试代码
策略模式提供单一界面的多种实施方式
我们想要隐藏系统获得礼券的方式，并且根据是否我们要测试代码或让系
统上线，来进行切换，参阅《HeadFirst设计模式》中的第一章，你会发
现已经有一种模式能有助于处理这样的问题：策略模式。
>
DBAccersos
通过策略横式，你为想要交
化的累洁提供了一个提口能
getGC(gc3d：int)GisCand
格说明。
saseGC(cand. GifeCau)woid
saweOtder(ondet3ndo : OtdetJndonmu
我们可以提供两个不同的实施实
一个
际上金涉及数播属。方象：
，不实际涉及数博席
是的了别试
一另一个0为数播库任务的一
都分，这个类可以继后端写。
7
TestDBAccessot
MySqlDBAccesot
setGC(ge,int),GiltCand
serGC(scd：int).GiseCetd
seGC(catd: GistCetd),uoid
+sGC(cad:GifeCad)soid
+
saveOnder(ondet7nde:Otdet7nfot
aneOrden（ondet3ndo，Ordet3ndonmation)
*如基你的客户不能确定正式上
现在我们有两种不同的方式进行数据库数据存取，而
线时金使用什么数据序，
相同
OrderProcessor不需要知道它使用的是哪一个。相反，它只
的方式科便换出数描库厂商和
需要与DBAccessor接口沟通，这会隐藏实施被使用的细节。
富施定得客易
我们现在所需要做的是增加某种方式以提供OrderProcessor连
接到DBAccessor的实现，根据是要测试代码，还是要让系统
上线。
策略模式封装了～
Otdetfsocessot
dbAccesses ,DBAccessot
组算法，让它们成
setDBAccessos(DBAccessen)
为可以相互交换的。
ptocesOtdes(ondet3ndo .OtdenJnsoumstiox):Receipt
eid
296
第8章
---
## Page 333
测试驱动开发
再一次绿灯行
现在，你有了一种把OrderProcessor与数据库隔离开的方式。使用正
确的数据库策略，实施processOrderO方法，
// existing code
private DBAccessor mDBAccessor;
设定通当的数排库
public void setDBAccessor(DBAccessor accessor) (
存肤器.
你常要从数据库
dbAccessor = accessorj
中取出礼券。
publie Receipt processOrder (OrderInformation orderInfo) (
…保存行
....
新的私基保存
OuletJndo
Stnieg
Receipt
CifeCend
1 AE
onfitmei
mNomfet
: Dete
, int
gcBelance : BigDecimel
rxpisetiosDete : Dete
Seting,
salancr ,BigDecimal
serGiitCandNen
retPickepTime(date
(erg
retGCBala
e(bsl：BigDecimal)
+sesActtionuattDat
gerBelance) : BigOecimal
setxpitationDateO) , Dace
StniRg
gelfickapTime
setCord
aNanberO)
Date
+seBalance(BigDecimal). aoif
+
gerGCB4
egaals(object ,Object).boolear
目前位置
297
---
## Page 334
存放测试代码的地方
再一次绿灯行
现在你有了一种把OrderProcessor与数据库隔离开的方式。使用
正确的数据库策略，实施processOrderO方法。
答案
// existing code
private DBAccessor dbAccessor;
public void setDBAccessor (DBAccessor accessor) (
记值：只需你在
mDBAccessor = accessor;
使用DBAcc到
试，这就是一个
public Receipt processOrder(OrderInformation orderInfo) (
占位器。
 QiltCend gc = abAcceson gerGC(ondet7nfo serGittCendNcmber()):
dbAceseot saueOnden(ondetJnfo),
此测试想业在测
试逐过最后得到
/ / This ie whet oet teet is expecting
零金额的礼券。
所以发们模拟这
sc.setBatance(new BigDecimal(O)):
记值，这只恶证靠要的代码，为下一
种状况。
dbAcceot saveGC(gc):
个测试，我们进须够改这段代码。
唱，不是原码，这
Receipt teceipt = new Receipe(),
是测试所想要的
teceipt setConfitmatioxNamben( (2345):
但我们要然准务修
teceipt setPicksyTime(new Date(),
收进经代码，我们
teceipt .seeGCBelance(sc getBalaxce()),
常星另外的到试。
setetn teceipt,
没有愚囊的问题
只是像我们把使用情节分解为若干任务一样、我们
正在把系统的功能分解为小段的代码，不用花太长时间端
误的代码，那对我们有什么帮助？
写这些代码让测试通过、也不用花太长时间去重构让第二。
第三个测试通过，完成这些时，你就会拥有一组测试，这
一我们需要该
测试款件去执行。我们编写的代码能让测试工作递作起表，
组测试能确定系统做它应该微的事情，而且你不会拥有做
因此，我们可以前进到下一个测试。这是在TDD后面的原
超过它需要做的事情的代码。
298
第8章
---
## Page 335