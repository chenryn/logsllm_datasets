exit(0);
}
Figure 966 shows the source for a client of the CFMessagePort server. The client uses the remote port's
name (shared between the client and the server) to create a connection and sends a few bytes of data to the
server.
Figure 966. A CFMessagePort client
// CFMessagePortClient.c
#include 
#define REMOTE_NAME "com.osxbook.CFMessagePort.server"
int
main(void)
{
SInt32 status;
CFMessagePortRef remotePort;
CFDataRef sendData;
const UInt8 bytes[] = { 1, 2, 3, 4 };
sendData = CFDataCreate(kCFAllocatorDefault, bytes,
sizeof(bytes)/sizeof(UInt8));
if (sendData == NULL) {
fprintf(stderr, "*** CFDataCreate\n");
exit(1);
}
remotePort = CFMessagePortCreateRemote(kCFAllocatorDefault,
CFSTR(REMOTE_NAME));
if (remotePort == NULL) {
CFRelease(sendData);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 134 of 153
fprintf(stderr, "*** CFMessagePortCreateRemote\n");
exit(1);
}
status = CFMessagePortSendRequest(
remotePort, // message port to which data should be sent
(SInt32)0x1234, // msgid, an arbitrary integer value
sendData, // data
5.0, // send timeout
5.0, // receive timeout
NULL, // reply mode (no reply expected or desired)
NULL); // reply data
if (status != kCFMessagePortSuccess)
fprintf(stderr, "*** CFMessagePortSendRequest: error %ld.\n", status);
else
printf("message sent\n");
CFRelease(sendData);
CFRelease(remotePort);
exit(0);
}
Let us now test the CFMessagePort server and client programs.
$ gcc -Wall -o client CFMessagePortClient.c -framework CoreFoundation
$ gcc -Wall -o server CFMessagePortServer.c -framework CoreFoundation
$ ./server
# another shell prompt
$ ./client
message sent
message received
{length = 4, capacity = 4, bytes = 0x01020304}
CFSocket
A CFSocket is conceptually similar to a CFMessagePort with the key difference being that BSD sockets
are used as the underlying communication channel. A CFSocket can be created in several ways: from
scratch, from an existing native socket, or even from a native socket that is already connected.
A CFSocket supports callbacks for several types of socket activity, for example, when there is data to read
(kCFSocketReadCallBack), when the socket is writable (kCFSocketWriteCallBack), when an explicitly
backgrounded connection attempt finishes (kCFSocketConnectCallBack), and so on.
Figure 967 shows a client program that uses a CFSocket to connect to a well-known time server and
retrieves the current time.
Figure 967. A CFSocket client
// CFSocketTimeClient.c
#include 
#include 
#define REMOTE_HOST "time.nist.gov"
void
dataCallBack(CFSocketRef s, CFSocketCallBackType callBackType,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 135 of 153
CFDataRef address, const void *data, void *info)
{
if (data) {
CFShow((CFDataRef)data);
printf("%s", CFDataGetBytePtr((CFDataRef)data));
}
}
int
main(int argc, char **argv)
{
CFSocketRef timeSocket;
CFSocketSignature timeSignature;
struct sockaddr_in remote_addr;
struct hostent *host;
CFDataRef address;
CFOptionFlags callBackTypes;
CFRunLoopSourceRef source;
CFRunLoopRef loop;
struct servent *service;
if (!(host = gethostbyname(REMOTE_HOST))) {
perror("gethostbyname");
exit(1);
}
if (!(service = getservbyname("daytime", "tcp"))) {
perror("getservbyname");
exit(1);
}
remote_addr.sin_family = AF_INET;
remote_addr.sin_port = htons(service->s_port);
bcopy(host->h_addr, &(remote_addr.sin_addr.s_addr), host->h_length);
// a CFSocketSignature structure fully specifies a CFSocket's
// communication protocol and connection address
timeSignature.protocolFamily = PF_INET;
timeSignature.socketType = SOCK_STREAM;
timeSignature.protocol = IPPROTO_TCP;
address = CFDataCreate(kCFAllocatorDefault, (UInt8 *)&remote_addr,
sizeof(remote_addr));
timeSignature.address = address;
// this is a variant of the read callback (kCFSocketReadCallBack): it
// reads incoming data in the background and gives it to us packaged
// as a CFData by invoking our callback
callBackTypes = kCFSocketDataCallBack;
timeSocket = CFSocketCreateConnectedToSocketSignature(
kCFAllocatorDefault, // allocator to use
&timeSignature, // address and protocol
callBackTypes, // activity type we are interested in
dataCallBack, // call this function
NULL, // context
10.0); // timeout (in seconds)
source = CFSocketCreateRunLoopSource(kCFAllocatorDefault, timeSocket, 0);
loop = CFRunLoopGetCurrent();
CFRunLoopAddSource(loop, source, kCFRunLoopDefaultMode);
CFRunLoopRun();
CFRelease(source);
CFRelease(timeSocket);
CFRelease(address);
exit(0);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 136 of 153
}
$ gcc -Wall -o timeclient CFSocketTimeClient.c -framework CoreFoundation
$ ./timeclient
{length = 51, capacity = 51, bytes =
0x0a35333633322030352d30392d313920 ... 49535429202a200a}
53632 05-09-19 04:21:43 50 0 0 510.7 UTC(NIST) *
{length = 0, capacity = 16, bytes = 0x}
CFRunLoopTimer
A CFRunLoopTimer is a special case of a run-loop source that can be set to fire at some time in the future,
either periodically or one time only. In the latter case, the timer is automatically invalidated. A
CFRunLoopTimer is created using CFRunLoopTimerCreate(), which takes a callback function as an
argument. The timer can then be added to a run loop.
A run loop must be running to be able to process a timer. A timer can only be added to one run loop at a
time, although it can be in multiple modes in that run loop.
Figure 968 shows a program that creates a periodic timer, adds it to the main run loop, and sets the run
loop running for a given time. While the run loop is running, the timer gets processed and the associated
callback is invoked.
Figure 968. Using a CFRunLoopTimer
// CFRunLoopTimerDemo.c
#include 
#include 
void timerCallBack(CFRunLoopTimerRef timer, void *info);
void
timerCallBack(CFRunLoopTimerRef timer, void *info)
{
CFShow(timer);
}
int
main(int argc, char **argv)
{
CFRunLoopTimerRef runLoopTimer = CFRunLoopTimerCreate(
kCFAllocatorDefault, // allocator
CFAbsoluteTimeGetCurrent() + 2.0, // fire date (now + 2 seconds)
1.0, // fire interval (0 or -ve means a one-shot timer)
0, // flags (ignored)
0, // order (ignored)
timerCallBack, // called when the timer fires
NULL); // context
CFRunLoopAddTimer(CFRunLoopGetCurrent(), // the run loop to use
runLoopTimer, // the run-loop timer to add
kCFRunLoopDefaultMode); // add timer to this mode
CFRunLoopRunInMode(kCFRunLoopDefaultMode, // run it in this mode
4.0, // run it for this long
false); // exit after processing one source?
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 137 of 153
printf("Run Loop stopped\n");
// sleep for a bit to show that the timer is not processed any more
sleep(4);
CFRunLoopTimerInvalidate(runLoopTimer);
CFRelease(runLoopTimer);
exit(0);
}
$ gcc -Wall -o timerdemo CFRunLoopTimerDemo.c -framework CoreFoundation
$ ./timerdemo
{locked = No, valid = Yes, interval = 1, next fire date =
148797186, order = 0, callout = 0x28ec, context = }
{locked = No, valid = Yes, interval = 1, next fire date =
148797187, order = 0, callout = 0x28ec, context = }
{locked = No, valid = Yes, interval = 1, next fire date =
148797188, order = 0, callout = 0x28ec, context = }
Run Loop stopped
$
9.18. Synchronization
Mac OS X provides several synchronization mechanisms, two of which we have already come across in
this chapter, namely, POSIX and System V semaphores. Figure 969 shows the important kernel-level and
user-level synchronization mechanisms. Frameworks such as Core Foundation and Foundation provide
their own wrappers around some of the mechanisms shown in Figure 969.
Figure 969. An overview of Mac OS X synchronization mechanisms
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 138 of 153
In general, a synchronization mechanism is based on a hardware implementation of a multiprocessor lock.
Depending on a specific locking mechanism's semantics, along with the lock's associated storage, there
may be additional data structures, such as a queue of threads waiting for the lock.
Typical operations required to implement some form of synchronization include atomic compare-and-
store (also called test-and-set) and compare-and-swap. For example, given a hardware implementation of
the test-and-set operation, we can treat a word of storage as a simple lock. We initialize the word to 0
(unlocked) and define the lock operation as a successful test-and-set operation that sets the word's value to
1. Conversely, the unlock operation sets the word's value to 0. A test-and-set operation also returns the old
value, so the thread attempting to acquire a lock will know if it succeeded. If the lock acquisition attempt
failed, what the thread does depends on the nature of the locking mechanism. Two obvious options are
that the thread keeps trying actively and that the thread sleeps.
Atomic memory access is required to maintain a consistent and ordered storage state. An atomic access is
always performed in its entirety, with no externally visible suboperations. Thus, two or more atomic
memory accesses will never overlapthey will always be serialized. Moreover, the order in which memory
operations are completed and the order in which they are seen by other processors (in a multiprocessor
system) do matter. Therefore, besides atomicity of memory access, we also need to be able to control the
order of memory operations. The PowerPC architecture provides special hardware instructions for these
purposes.
We discussed the implementation of an atomic compare-and-store function in Section 3.5.2. That function
used the lwarx/stwcx. pair of instructions, which can be used to atomically write a memory word. The
64-bit PowerPC 970FX also provides ldarx/stdcx. to atomically write a double-word of memory. The
lowest-level synchronization mechanisms in Mac OS X use these instructions as building blocks. Other
relevant PowerPC instructions are the following:
 sync This instruction is used to synchronize memory with respect to other processors and memory
access mechanisms. Executing this instruction ensures that all instructions that appear before it are
(effectively) completed before the sync instruction completes. Moreover, no instructions that appear
after the sync are executed until the sync completes. It can be used to ensure that the results of all
stores into a shared storage locationsay, one that corresponds to a mutexare seen by other processors
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 139 of 153
before performing a store to unlock that mutex. The sync instruction is rather heavy-duty in that it
may take a substantial (and variable) amount of time to execute. The eieio instruction is often a
better alternative.
 eieio The eieio (enforce-in-order-execution-of-I/O) instruction is similar to sync but enforces a
weaker orderingit may itself complete before memory accesses caused by instructions that appear
before it have completed with respect to main memory. However, it does ensure that the accesses
have completed before any instructions that appear after the eieio instruction can access main
memory. Thus, eieio can be used to enforce memory ordering without stalling dispatch of further
instructions.
 lwsync This is a lightweight version of sync available on the 970FX, on which it is faster than
eieio. It cannot, however, be used in place of eieio under all circumstances.
 isync This instruction ensures that all instructions before it have completed before it itself
completes. Until isync completes, the processor does not initiate any instructions that appear after
the isync. Moreover, when isync completes, any prefetched instructions are discarded. Note that
isync waits only for the preceding instructions to completenot for the completion of any memory
accesses caused by the preceding instructions. isync does not affect any other processor or another
processor's caches.
With the understanding that the atomic access and memory-ordering instructions are directly or indirectly
used as primitives in all Mac OS X synchronization mechanisms, let us look at some of the individual
mechanisms shown in Figure 969.
9.18.1. Interfaces for Atomic Operations
The system library provides functions for performing a variety of atomic operations, ordering memory
accesses through a memory barrier, and using spinlocks. These functions are actually implemented in the
kernel but made available to user space through the commpage mechanism. The implementations reside in
osfmk/ppc/commpage/atomic.s and osfmk/ppc/commpage/spinlock.s.
9.18.2. Low-Level Locking
The Mach portion of the kernel provides the following primary types of low-level locks (or lock
protocols) that can be held by threads[18]:
[18] A lock holder in Mach is always a thread.
Spinlocks (or simple locks)
Mutexes
Read/write locks
9.18.2.1. Spinlocks
A spinlock is a simple locking primitive: It protects a shared resource by making the lock-holder thread
busy-wait, or "spin" (in a tight loop). Since a thread holding a spinlock causes a processor to be tied up, it
is important not to hold such locks for too long. In general, if a resource is accessed only briefly, it is a
likely candidate for protection through a spinlock. Moreover, the use of a spinlock is different on a
multiprocessor system compared with a uniprocessor system. On the former, a thread could busy-wait on
one processor while the holder of a spinlock uses the protected resource on another processor. On a
uniprocessor, a tight loopif not preemptedwill spin forever, since the holder of the lock will never get a
chance to run and free the lock!
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 140 of 153
Mach uses simple locks to protect most of the kernel data structures. It provides three flavors of spinlocks:
hw_lock (hw_lock_t), usimple (usimple_lock_t), and simple (lck_spin_t). Only the latter is exported
to loadable kernel extensions.
An hw_lock is the lowest-level locking abstraction provided by the kernel. The following primary
functions are exported by this lock package:
void hw_lock_init(hw_lock_t); [osfmk/ppc/hw_lock.s]
void hw_lock_lock(hw_lock_t); [osfmk/ppc/hw_lock.s]
void hw_lock_unlock(hw_lock_t); [osfmk/ppc/hw_lock.s]
unsigned int hw_lock_to(hw_lock_t, unsigned int); [osfmk/ppc/hw_lock.s]
unsigned int hw_lock_try(hw_lock_t); [osfmk/ppc/hw_lock.s]
unsigned int hw_lock_held(hw_lock_t); [osfmk/ppc/hw_lock.s]
The hw_lock_t data type is declared in osfmk/ppc/hw_lock_types.h.
// osfmk/ppc/hw_lock_types.h
struct hslock {
int lock_data;
};
typedef struct hslock hw_lock_data_t, *hw_lock_t;
A lock attempt for an hw_lock lock can be madethrough hw_lock_to()with a timeout value specified as a
number of ticks of the Timebase Register. The lock spins for up to the duration of the timeout. The
locking function even disables interruptions for up to 128 ticks of the Timebase Register.