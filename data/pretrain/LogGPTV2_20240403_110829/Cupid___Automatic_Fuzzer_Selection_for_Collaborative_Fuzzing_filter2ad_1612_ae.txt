### Achieving Higher Coverage

To achieve higher coverage, our evaluation focuses on mutation-oriented, coverage-guided fuzzers. We have not yet explored the integration of grammar-based fuzzers into our design. Additionally, we limited our selection to commercial off-the-shelf (COTS) fuzzers, with the explicit goal of avoiding significant modifications to the fuzzers. This constraint restricts us to the interfaces provided by the selected fuzzers.

In our current implementation, the set of selected fuzzers remains static throughout the entire fuzzing campaign. However, dynamically adjusting the fuzzer set during the campaign might yield better results, although we have not yet identified practical cases where this is beneficial. In this paper, we focus on the selection of fuzzers and leave the scheduling of different fuzzers as a future research topic.

Another area for future research is testcase scheduling and distribution. Specifically, deciding which testcases to assign to which fuzzers during runtime could be more efficient. A smarter approach might involve determining which fuzzer would benefit most from a particular testcase and avoiding the assignment of less beneficial testcases.

### Target-Independent Predictions

Cupid aims to make target-independent predictions. While it is possible to collect data and train on the same fuzzing target for which the prediction is made, this target-specific approach may offer fewer benefits than expected. The training data gathered from parts of the fuzzing process that have already been seen may not accurately reflect the remaining unseen parts of the same binary. Therefore, any prediction based on this data might be misleading. To address this, Cupid is trained on a wide variety of branches sampled from the entire program space of different binaries, not just the initial stages of one specific binary.

### Coverage Metrics

Our predictions are based on branch-based coverage metrics. Recent research has shown significant differences in how coverage is measured [26]. Different measurement methods could potentially improve our complementarity metric by incorporating additional information, such as memory access or context-sensitive data.

### Evaluation Time Limit

For our evaluation, we set a time limit of 10 hours for each run to manage the required experimental time. Two of the larger programs did not fully saturate within this timeout. If they had, the end results might differ. However, since these programs represent a small part of the overall dataset and we use geometric means for average improvement calculation, the overall impact is marginal. For a comprehensive guide on best practices when evaluating fuzzers, we refer the reader to the work by Klees et al. [14].

### Conclusion

In this paper, we present Cupid, a collaborative fuzzing framework that uses single, isolated fuzzer runs to automatically predict and select, in linear evaluation time, a high-performing combination of fuzzers for a collaborative fuzzing scenario. We demonstrate how different combinations of fuzzers influence the overall result and how Cupid can automatically select a good, complementary set of fuzzers, eliminating the need for manual selection or an exhaustive (exponentially costly) evaluation of all possible fuzzer combinations. In summary, we show that selecting complementary fuzzers can significantly improve both final coverage and the latency of finding coverage. To foster further research, we will open-source Cupid at https://github.com/RUB-SysSec/cupid.

### Acknowledgments

We would like to thank our shepherd Hayawardh Vijayakumar and the anonymous reviewers for their constructive feedback. This work was supported by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany’s Excellence Strategy – EXC-2092 CaSa – 390781972. Additionally, this project received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement No. 786669 (ReAct). This paper reflects only the authors’ view. The Research Executive Agency is not responsible for any use that may be made of the information it contains.

### References

[1] C. Aschermann, S. Schumilo, T. Blazytko, R. Gawlik, and T. Holz. Redqueen: Fuzzing with input-to-state correspondence. In Symposium on Network and Distributed System Security (NDSS), 2019.
[2] M. Böhme and B. Falk. Fuzzing: On the exponential cost of vulnerability discovery. In ESEC/FSE, 2020.
[3] M. Böhme, V.-T. Pham, and A. Roychoudhury. Coverage-based greybox fuzzing as Markov chain. In IEEE Transactions on Software Engineering, 2017.
[4] P. Chen and H. Chen. Angora: Efficient fuzzing by principled search. In IEEE Symposium on Security and Privacy (S&P), 2018.
[5] Y. Chen, Y. Jiang, F. Ma, J. Liang, M. Wang, C. Zhou, X. Jiao, and Z. Su. EnFuzz: Ensemble fuzzing with seed synchronization among diverse fuzzers. In USENIX Security Symposium, 2019.
[6] The Chromium (Google Chrome) open source project on Open Hub: Languages page. https://www.openhub.net/p/chrome/analyses/latest/languages_summary. Accessed: September 26, 2020.
[7] J. D. Evans. Straightforward Statistics for the Behavioral Sciences. Thomson Brooks/Cole Publishing Co, 1996.
[8] A. Fioraldi, D. Maier, H. Eißfeldt, and M. Heuse. AFL++: Combining incremental steps of fuzzing research. In USENIX Workshop on Offensive Technologies (WOOT), 2020.
[9] S. Geng, Y. Li, Y. Du, J. Xu, Y. Liu, and B. Mao. An empirical study on benchmarks of artificial software vulnerabilities. CoRR, abs/2003.09561, 2020.
[10] E. Güler, C. Aschermann, A. Abbasi, and T. Holz. AntiFuzz: Impeding fuzzing audits of binary executables. In USENIX Security Symposium, 2019.
[11] A. Helin. A general-purpose fuzzer. https://gitlab.com/akihe/radamsa. Accessed: September 26, 2020.
[12] Security-oriented fuzzer with powerful analysis options. https://github.com/google/honggfuzz. Accessed: September 26, 2020.
[13] J. Jung, H. Hu, D. Solodukhin, D. Pagan, K. H. Lee, and T. Kim. Fuzzification: Anti-fuzzing techniques. In USENIX Security Symposium, 2019.
[14] G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks. Evaluating fuzz testing. In ACM Conference on Computer and Communications Security (CCS), 2018.
[15] Circumventing fuzzing roadblocks with compiler transformations. https://lafintel.wordpress.com/. Accessed: September 26, 2020.
[16] C. Lemieux and K. Sen. FairFuzz: Targeting rare branches to rapidly increase greybox fuzz testing coverage. In ACM International Conference on Automated Software Engineering (ASE), 2018.
[17] Y. Li, C. Feng, and C. Tang. A large-scale parallel fuzzing system. In International Conference on Advances in Image Processing, 2018.
[18] J. Liang, Y. Jiang, Y. Chen, M. Wang, C. Zhou, and J. Sun. PAFL: Extending fuzzing optimizations of single mode to industrial parallel mode. In ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE), 2018.
[19] LibFuzzer. https://www.llvm.org/docs/LibFuzzer.html. Accessed: September 26, 2020.
[20] D. Merkel. Docker: Lightweight Linux containers for consistent development and deployment. Linux Journal, 2014.
[21] B. P. Miller, L. Fredriksen, and B. So. An Empirical Study of the Reliability of UNIX Utilities. Commun. ACM, 33(12), Dec. 1990.
[22] T. Oliphant. NumPy: A Guide to NumPy. USA: Trelgol Publishing, 2006–. Accessed: September 26, 2020.
[23] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos. VUzzer: Application-aware Evolutionary Fuzzing. In Symposium on Network and Distributed System Security (NDSS), 2017.
[24] K. Serebryany. OSS-Fuzz: Google’s continuous fuzzing service for open source software. In USENIX Security Symposium, 2017.
[25] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna. Driller: Augmenting fuzzing through selective symbolic execution. In Symposium on Network and Distributed System Security (NDSS), 2016.
[26] J. Wang, Y. Duan, W. Song, H. Yin, and C. Song. Be sensitive and collaborative: Analyzing the impact of coverage metrics in greybox fuzzing. In Symposium on Recent Advances in Intrusion Detection (RAID), 2019.
[27] W. Xu, S. Kashyap, C. Min, and T. Kim. Designing new operating primitives to improve fuzzing performance. In ACM Special Interest Group on Security, Audit and Control (SIGSAC), 2017.
[28] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim. QSYM: A practical concolic execution engine tailored for hybrid fuzzing. In USENIX Security Symposium, 2018.
[29] M. Zalewski. American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/. Accessed: September 26, 2020.
[30] L. Zhao, Y. Duan, H. Yin, and J. Xuan. Send hardest problems my way: Probabilistic path prioritization for hybrid fuzzing. In Symposium on Network and Distributed System Security (NDSS), 2019.

### Table 5: Configuration Parameters of All Fuzzers

| Fuzzer          | Version                  | Environment Variables                | Configuration                                                                                      |
|-----------------|--------------------------|--------------------------------------|----------------------------------------------------------------------------------------------------|
| AFL             | v2.52b                   | AFL_NO_AFFINITY=1                    | afl-fuzz -M/-S -i input_dir -o output_dir -m none -- binary_command                                |
| AFLFast         | Commit e672d6e92         | AFL_NO_AFFINITY=1                    | afl-fuzz -M/-S -i input_dir -o output_dir -m none -- binary_command                                |
| FairFuzz        | Commit 9c1f1b366         | AFL_NO_AFFINITY=1                    | afl-fuzz -M/-S -i input_dir -o output_dir -m none -- binary_command                                |
| radamsa         | AFL++, commit 2ff174e58  | AFL_NO_AFFINITY=1                    | afl-fuzz -M/-S -i input_dir -o output_dir -m none -R -- binary_command                             |
| libFuzzer       | Commit dce08fd05         |                                      | binary_path -fork=1 -ignore_crashes=1 -artifact_prefix=crash_dir/ cov_dir input_dir libfuzzer_simulated_sync |
| QSYM            | AFL: v2.52b, QSYM: commit aabec86ea77 | AFL_NO_AFFINITY=1 | afl-fuzz -M/-S -i input_dir -o output_dir -m none -- binary_command && python /workdir/qsym/bin/run_qsym_afl.py -a docker_name -o output_dir -n qsym_name -- uninstrumented_binary_command |
| Honggfuzz       | v2.0 with custom patch   |                                      | /home/coll/honggfuzz/honggfuzz --input input_dir --workspace workspace_dir --crashdir crash_dir --covdir_all cov_dir -n 1 -y honggfuzz_simulated_sync -Y 60 -- binary_command |
| lafIntel        | AFL++, commit 2ff174e58  | AFL_NO_AFFINITY=1, AFL_PRELOAD=libcompcov.so, AFL_COMPCOV_LEVEL=2 | afl-fuzz -M/-S -i input_dir -o output_dir -m none -t 1000000 -Q -- binary_command |

### Table 6: Median Branch Coverage on Test Binaries from Fuzzer-Test-Suite (10 Runs with a Run Time of 10h) When Honggfuzz and lafIntel Are Included in the Training Phase

| Binary           | EnFuzz | CupidExt | p-value   |
|------------------|--------|----------|-----------|
| c-ares           | 58     | 58       | -         |
| guetzli          | 2612   | 2657     | < 0.01    |
| json             | 710    | 711      | 0.02      |
| libarchive       | 2984   | 3576     | < 0.01    |
| libpng           | 651    | 659      | < 0.01    |
| libssh           | 800    | 846      | < 0.01    |
| libxml2          | 2110   | 3265     | < 0.01    |
| openssl-1.0.2d   | 787    | 786      | 0.10      |
| openssl-1.1.0c   | 778    | 768      | < 0.01    |
| openthread       | 859    | 866      | < 0.01    |
| proj4            | 2800   | 2896     | < 0.01    |
| sqlite           | 913    | 907      | < 0.01    |
| woff2            | 1065   | 1157     | < 0.01    |
| Improvement (sum) | 2612 | 2657 | +11.82%  |
| Improvement (geomean) | 710 | 711 | +6.4%  |

### Table 7: The Result of the Framework Prediction for n=4

| Combination                                  | Complementarity | Position |
|----------------------------------------------|-----------------|----------|
| FairFuzz, libFuzzer, libFuzzer, libFuzzer    | 99691.98        | 1.       |
| AFL, libFuzzer, libFuzzer, libFuzzer         | 99404.65        | 2.       |
| ...                                          | ...             | ...      |
| FairFuzz, FairFuzz, libFuzzer, radamsa       | 96236.07        | 26.      |
| FairFuzz, libFuzzer, QSYM, AFL               | 96176.07        | 27.      |
| FairFuzz, libFuzzer, AFL, AFL                | 96064.53        | 28.      |
| AFLFast, QSYM, QSYM, QSYM                   | 72796.42        | 124.     |
| QSYM, QSYM, QSYM, radamsa                    | 71395.88        | 125.     |
| QSYM, QSYM, QSYM, QSYM                      | 66091.62        | 126.     |

The combination in bold is the selection by Cupid due to complementarity and diversity.