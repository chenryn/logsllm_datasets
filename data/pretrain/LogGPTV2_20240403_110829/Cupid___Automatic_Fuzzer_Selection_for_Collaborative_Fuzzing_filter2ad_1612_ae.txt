achieve a higher coverage. As such, in our evaluation, all the fuzzers
we have showcased are mutation-oriented, coverage-guided fuzzers.
We have not yet evaluated how, for instance, grammar-based fuzzers
would fit into our design. Moreover, we have limited ourselves
to COTS fuzzers with the explicit goal of not making significant
modifications to the fuzzers. We are thus limited to the interface
that the selected fuzzers provide.
In our current implementation, the set of selected fuzzers is static
over the whole run. In some cases, dynamically changing the set
of fuzzers over the fuzzing campaign, might yield a better result
(although we have not yet found practical cases of interest). In this
paper, we focus on the selection of fuzzers, and leave the question
of scheduling different fuzzers as a future research topic.
Similarly, a future area for research could be testcase scheduling
and distribution, i.e., deciding which testcase to assign to which
fuzzers during runtime. A smarter approach to distributing all test-
cases to all fuzzers might be to determine which fuzzer would
benefit the most from a particular testcase and avoid assigning
sharing less beneficial ones.
As Cupid tries to make a target-independent prediction, it may
be possible to make target-specific predictions as well. However,
although it would be possible to collect data and train on the same
fuzzing target for which the prediction is for, this target-specific
approach may offer less benefit than expected. The training data
gathered from the parts of the fuzzing process that were already
seen may not necessarily reflect the remaining unseen parts of the
same binary. Therefore, any prediction based on this data might
actually be misleading. This is why Cupid is trained on a vast
variety of different branches, sampled from the whole program
space of different binaries and not only on the initial stages of one
specific binary.
The data we collect to make our predictions are based on branch-
based coverage metrics. However, recent research has shown that
there are significant differences in how coverage is measured [26].
Different measurement could potentially improve our complemen-
tarity metric by taking other information into account, such as
memory-access or context-sensitive information.
For our evaluation, to bound the (lengthy) required time to run
the experiments, we set a time limit of 10 hours for each run. Two
of the larger programs are not fully saturated within this timeout.
If saturated, these programs might show a different end result.
However, since these programs are a small part of the overall dataset,
and we use geometric means for average improvement calculation,
the overall impact is marginal. We refer the reader to the work by
Klees et al. [14] for a comprehensive work on best practices when
evaluating fuzzers.
9 CONCLUSION
In this paper we present Cupid, a collaborative fuzzing framework
that uses single, isolated fuzzer runs to automatically predict and
select, in linear evaluation time, a high-performing combination of
11
fuzzers to use in a collaborative fuzzing scenario. We show how
different combinations of fuzzers influence the overall result and
how Cupid is capable of automatically selecting a good, comple-
mentary set of fuzzers, eliminating the need for manual selection
or an exhaustive (exponentially costly) evaluation of all possible
fuzzer combinations. In summary, we have shown how selecting
complementary fuzzers can improve the both the final coverage,
as well as the latency of finding coverage significantly. To fos-
ter further research in the area, we will open source Cupid at
https://github.com/RUB-SysSec/cupid.
ACKNOWLEDGMENTS
We would like to thank our shepherd Hayawardh Vijayakumar and
the anonynous reviewers for their constructive feedback. This work
was supported by the Deutsche Forschungsgemeinschaft (DFG, Ger-
man Research Foundation) under Germany’s Excellence Strategy –
EXC-2092 CaSa – 390781972. In addition, this project has received
funding from the European Union’s Horizon 2020 research and
innovation programme under grant agreement No. 786669 (ReAct).
This paper reflects only the authors’ view. The Research Executive
Agency is not responsible for any use that may be made of the
information it contains.
REFERENCES
[1] C. Aschermann, S. Schumilo, T. Blazytko, R. Gawlik, and T. Holz. Redqueen:
In Symposium on Network and
Fuzzing with input-to-state correspondence.
Distributed System Security (NDSS), 2019.
[2] M. Böhme and B. Falk. Fuzzing: On the exponential cost of vulnerability discovery.
In ESEC/FSE, 2020.
[3] M. Böhme, V.-T. Pham, and A. Roychoudhury. Coverage-based greybox fuzzing
as markov chain. In IEEE Transactions on Software Engineering, 2017.
[4] P. Chen and H. Chen. Angora: Efficient fuzzing by principled search. In IEEE
Symposium on Security and Privacy (S&P), 2018.
[5] Y. Chen, Y. Jiang, F. Ma, J. Liang, M. Wang, C. Zhou, X. Jiao, and Z. Su. Enfuzz:
Ensemble fuzzing with seed synchronization among diverse fuzzers. In USENIX
Security Symposium, 2019.
[6] The chromium (google chrome) open source project on open hub: Languages
page. https://www.openhub.net/p/chrome/analyses/latest/languages_summary.
Accessed: September 26, 2020.
[7] J. D. Evans. Straightforward statistics for the behavioral sciences. Thomson
Brooks/Cole Publishing Co, 1996.
[8] A. Fioraldi, D. Maier, H. Eißfeldt, and M. Heuse. Afl++ : Combining incremental
steps of fuzzing research. In USENIX Workshop on Offensive Technologies (WOOT),
2020.
[9] S. Geng, Y. Li, Y. Du, J. Xu, Y. Liu, and B. Mao. An empirical study on benchmarks
of artificial software vulnerabilities. CoRR, abs/2003.09561, 2020.
[10] E. Güler, C. Aschermann, A. Abbasi, and T. Holz. Antifuzz: Impeding fuzzing
audits of binary executables. In USENIX Security Symposium, 2019.
[11] A. Helin. A general-purpose fuzzer. https://gitlab.com/akihe/radamsa. Accessed:
September 26, 2020.
[12] Security oriented fuzzer with powerful analysis options. https://github.com/
google/honggfuzz. Accessed: September 26, 2020.
[13] J. Jung, H. Hu, D. Solodukhin, D. Pagan, K. H. Lee, and T. Kim. Fuzzification:
anti-fuzzing techniques. In USENIX Security Symposium, 2019.
[14] G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks. Evaluating fuzz testing. In
ACM Conference on Computer and Communications Security (CCS), 2018.
[15] Circumventing fuzzing roadblocks with compiler transformations. https://
lafintel.wordpress.com/. Accessed: September 26, 2020.
[16] C. Lemieux and K. Sen. Fairfuzz: Targeting rare branches to rapidly increase
greybox fuzz testing coverage. In ACM International Conference on Automated
Software Engineering (ASE), 2018.
[17] Y. Li, C. Feng, and C. Tang. A large-scale parallel fuzzing system. In International
Conference on Advances in Image Processing, 2018.
[18] J. Liang, Y. Jiang, Y. Chen, M. Wang, C. Zhou, and J. Sun. Pafl: extend fuzzing
In ACM SIGSOFT
optimizations of single mode to industrial parallel mode.
Symposium on the Foundations of Software Engineering (FSE), 2018.
[19] Libfuzzer. https://www.llvm.org/docs/LibFuzzer.html. Accessed: September 26,
2020.
[20] D. Merkel. Docker: lightweight linux containers for consistent development and
deployment. Linux journal, 2014.
[21] B. P. Miller, L. Fredriksen, and B. So. An Empirical Study of the Reliability of
UNIX Utilities. Commun. ACM, 33(12), Dec. 1990.
[22] T. Oliphant. NumPy: A guide to NumPy. USA: Trelgol Publishing, 2006–. Ac-
cessed: September 26, 2020.
[23] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos. VUzzer:
Application-aware Evolutionary Fuzzing. In Symposium on Network and Dis-
tributed System Security (NDSS), 2017.
[24] K. Serebryany. Oss-fuzz-google’s continuous fuzzing service for open source
software. In USENIX Security Symposium, 2017.
[25] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili,
C. Kruegel, and G. Vigna. Driller: Augmenting fuzzing through selective symbolic
execution. In Symposium on Network and Distributed System Security (NDSS),
2016.
[26] J. Wang, Y. Duan, W. Song, H. Yin, and C. Song. Be sensitive and collaborative:
In Symposium on
Analyzing impact of coverage metrics in greybox fuzzing.
Recent Advances in Intrusion Detection (RAID), 2019.
[27] W. Xu, S. Kashyap, C. Min, and T. Kim. Designing new operating primitives to
improve fuzzing performance. In ACM Special Interest Group on Security, Audit
and Control (SIGSAC), 2017.
[28] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim. QSYM: A practical concolic execution
engine tailored for hybrid fuzzing. In USENIX Security Symposium, 2018.
[29] M. Zalewski. american fuzzy lop. http://lcamtuf.coredump.cx/afl/. Accessed:
September 26, 2020.
[30] L. Zhao, Y. Duan, H. Yin, and J. Xuan. Send hardest problems my way: Probabilistic
path prioritization for hybrid fuzzing. In Symposium on Network and Distributed
System Security (NDSS), 2019.
12
Table 5: Configuration parameters of all fuzzers.
Fuzzer
AFL
AFLFast
FairFuzz
radamsa
libFuzzer
Version
v2.52b
Commit e672d6e92
Commit 9c1f1b366
AFL++, commit 2ff174e58
Commit dce08fd05 with custom patch
Environment Variables
AFL_NO_AFFINITY=1
AFL_NO_AFFINITY=1
AFL_NO_AFFINITY=1
AFL_NO_AFFINITY=1
QSYM
AFL: v2.52b, QSYM: commit aabec86ea77
AFL_NO_AFFINITY=1
Honggfuzz
v2.0 with custom patch
lafIntel
AFL++, commit 2ff174e58
AFL_NO_AFFINITY=1
AFL_PRELOAD=libcompcov.so
AFL_COMPCOV_LEVEL=2
Configuration
afl-fuzz -M/-S -i input_dir -o output_dir -m none -- binary_command
afl-fuzz -M/-S -i input_dir -o output_dir -m none -- binary_command
afl-fuzz -M/-S -i input_dir -o output_dir -m none -- binary_command
afl-fuzz -M/-S -i input_dir -o output_dir -m none -R -- binary_command
binary_path -fork=1 -ignore_crashes=1 -artifact_prefix=crash_dir/ cov_dir in-
put_dir libfuzzer_simulated_sync
afl-fuzz -M/-S -i input_dir -o output_dir -m none -- binary_command &&
python /workdir/qsym/bin/run_qsym_afl.py -a docker_name -o output_dir -n
qsym_name -- uninstrumented_binary_command
/home/coll/honggfuzz/honggfuzz --input input_dir --workspace workspace_dir
--crashdir crash_dir --covdir_all cov_dir -n 1 -y honggfuzz_simulated_sync -Y 60
-- binary_command
afl-fuzz -M/-S -i input_dir -o output_dir -m none -t 1000000 -Q -- binary_command
Table 6: Median branch coverage on the test binaries from
fuzzer-test-suite (10 runs with a run time of 10h) when
Honggfuzz and lafIntel are included in the training
phase. Cupid selected the combination consisting of QSYM,
libFuzzer, Honggfuzz, Honggfuzz (denoted as CupidExt).
Bold values highlight the best result. The last column repre-
sents the 𝑝-value according to the Mann-Whitney U test be-
tween EnFuzz and Cupid. Bold values highlight statistical
significance (𝑝 < 0.05).
Binary
c-ares
guetzli
json
libarchive
libpng
libssh
libxml2
openssl-1.0.2d
openssl-1.1.0c
openthread
proj4
sqlite
woff2
Improvement (sum)
Improvement (geomean)
EnFuzz
CupidExt
𝑝-value
-
< 0.01
0.02
< 0.01
< 0.01
< 0.01
< 0.01
0.10
< 0.01
< 0.01
< 0.01
< 0.01
< 0.01
58
2612
710
2984
651
800
2110
787
778
859
2800
913
1065
-
-
58
2657
711
3576
659
846
3265
786
768
866
2896
907
1157
+11.82%
+6.4%
Table 7: The result of the framework prediction for n=4.
"Complementarity" represents the predicted total probabil-
ity for this fuzzer combination, i.e. the predicted average
number of branches visited on all of the training data by this
fuzzer combination. Combination in bold is the selection by
Cupid due to complementarity and diversity.
Combination
Complementarity
FairFuzz,libFuzzer,libFuzzer,libFuzzer
AFL,libFuzzer,libFuzzer,libFuzzer
99691.98
99404.65
96236.07
96176.07
96064.53
72796.42
71395.88
66091.62
...
...
FairFuzz, FairFuzz, libFuzzer, radamsa
FairFuzz, libFuzzer, QSYM, AFL
FairFuzz, libFuzzer, AFL, AFL
AFLFast, QSYM, QSYM, QSYM
QSYM, QSYM, QSYM, radamsa
QSYM, QSYM, QSYM, QSYM
Position
1.
2.
26.
27.
28.
124.
125.
126.
13