Then we could optimistically include the ﬁrst cell worth of
application data in the original begin cell. This trick would allow us to cut out an entire network round-trip
every time we establish a new connection through Tor. The result would be quicker page loads for users.
Alas, this trick would involve extending the SOCKS protocol, which isn’t usually a polite strategy when
it comes to interoperating with other applications. On the other hand, it should be possible to extend it in
a backwards-compatible way: applications that don’t know about the trick would still behave the same and
still work ﬁne (albeit in a degraded mode where they waste a network round-trip).
Impact: Medium.
Eﬀort: Medium.
Risk: Low.
Plan: Overall, it seems like a delicate move, but with potentially quite a good payoﬀ. I’m not convinced
yet either way.
6
The network overhead may still be high for modem users
Even if we resolve all the other pieces of the performance question, there still remain some challenges posed
uniquely by users with extremely low bandwidth – for example, users on modems or cell phones. We need
to optimize the Tor protocols so they are eﬃcient enough that Tor can be practical in this situation too.
6.1
We’ve made progress already at directory overhead
We’ve already made great progress at reducing directory overhead, both for bootstrapping and maintenance.
Our blog post on the topic provides background and details9.
Proposal 158 further reduces the directory overhead, and is scheduled to be deployed in Tor 0.2.2.x.10
Impact: Low for normal users, high for low-bandwidth users.
Eﬀort: Medium, but we’re already a lot of the way through it.
Risk: Low.
Plan: We should roll out proposal 158. Then we’ll be in good shape for a while. The next directory
overhead challenge will be in advertising many more relays; but ﬁrst we need to get the relays.
6.2
Our TLS overhead can also be improved
OpenSSL will, by default, insert an empty TLS application record before any one which contains data. This
is to prevent an attack, by which someone who has partial control over the plaintext of a TLS stream, can
also conﬁrm guesses as to the plaintext which he does not control. By including an empty application record,
which incorporates a MAC, the attacker is made unable to control the CBC initialization vector, and hence
does not have control of the input to the encryption function [7].
This application record does introduce an appreciable overhead. Most Tor cells are sent in application
records of their own, giving application records of 512 bytes (cell) + 20 bytes (MAC) + 12 bytes (TLS
padding) + 5 bytes (TLS application record header) = 549 bytes. The empty application records contain
9https://blog.torproject.org/blog/overhead-directory-info%3A-past%2C-present%2C-future
10https://svn.torproject.org/svn/tor/trunk/doc/spec/proposals/158-microdescriptors.txt
22
Performance Improvements on Tor
only 20 bytes (MAC) + 12 bytes (TLS padding) + 5 bytes (TLS application record header) = 37 bytes.
There is also a 20 byte IP header and 32 byte TCP header.
Thus the overhead saved by removing the empty TLS application record itself is 37/(549+37+20+32) =
5.8%. This calculation is assuming that the same number of IP packets will be sent, because currently Tor
sends packets, with only one cell, far smaller than the path MTU. If Tor were to pack cells optimally eﬃciently
into packets, then removing the empty application records would also reduce the number of packets, and
hence TCP/IP headers, that needed to be sent.
The reduction in TCP/IP header overhead would be
37/(549 + 37) = 6.3%.
Of course, the empty application record was inserted for a reason – to prevent an attack on the CBC
mode of operation used by TLS, so before removing it we must be conﬁdent the attack does not apply to
Tor. Ben Laurie (one of the OpenSSL developers) concluded that in his opinion Tor could safely remove
the insertion of empty TLS application records [5]. Steven was able to come up with only certiﬁcational
weaknesses (discussed in the above analysis), which are expensive to exploit and give little information to
the attacker.
Impact: Low.
Eﬀort: Low.
Risk: Medium, since our initial analysis might be wrong.
Plan: Do it in the Tor 0.2.2.x or 0.2.3.x timeframe. Not critical.
7
Last thoughts
7.1
Lessons from economics
Imagine we implement all the solutions above, and it doubles the eﬀective capacity of the Tor network. The
na¨ıve hypothesis is that users would then experience twice the throughput. Unfortunately this is not true,
because it assumes that the number of users does not vary with bandwidth available. In fact, as the supply of
the Tor network’s bandwidth increases, there will be a corresponding increase in the demand for bandwidth
from Tor users.
Simple economics shows that performance of Tor and other anonymization networks is
controlled by how the number of users scales with available bandwidth; this relationship can be represented
by a demand curve.11
Figure 6 is the typical supply and demand graph from economics textbooks, except with long-term
throughput per user substituted for price, and number of users substituted for quantity of goods sold. As
the number of users increases, the bandwidth supplied by the network falls.
In drawing the supply curve, we have assumed the network’s bandwidth is constant and shared equally
over as many users as needed. The shape of the demand curve is much harder to even approximate, but for
the sake of discussion, we have drawn three alternatives. The number of Tor users and the throughput they
each get is the intersection between the supply and demand curves – the equilibrium. If the number of users
is below this point, more users will join and the throughput per user will fall to the lowest tolerable level.
Similarly, if the number of users is too high, some will be getting lower throughput than their minimum, so
will give up, improving the network for the rest of the users.
Now assume Tor’s bandwidth grows by 50% – the supply curve shifts, as shown in the ﬁgure.
By
comparing how the equilibrium moves, we can see how the shape of the demand curve aﬀects the performance
improvement that Tor users see. If the number of users is independent of performance, shown in curve A,
then everyone gets a 50% improvement, which matches the na¨ıve hypothesis. More realistically, the number
of users increases, so the performance gain is less. The shallower the curve gets, the smaller the performance
increase will be. For demand curve B, there is a 18% increase in the number of Tor users and a 27% increase
11The economics discussion is based on a blog post published in Light Blue Touchpaper [9]. The property discussed was also
observed by Andreas Pﬁtzmann in response to a presentation at the PET Symposium [16].
23
Performance Improvements on Tor
Number of users
Throughput per user
G A
G
B
G
C
Supply
Demand
Figure 6: Hypothetical supply and demand curves for Tor network resources. As supply goes up, point A
corresponds to no increase in users, whereas points B and C represent more users arriving to use up some of
the new capacity.
24
Performance Improvements on Tor
in throughput. On the other hand, with curve C there are 33% more users and so only a 13% increase in
throughput for each user.
The above analysis glosses over many topics. One interesting analysis is reaching equilibrium – in fact it
could take some time between the network bandwidth changing and the user population reaching stability. If
this period is suﬃciently long and network bandwidth is suﬃciently volatile it might never reach equilibrium.
We might also consider eﬀects which shift the demand curve. In normal economics, marketing makes people
buy a product even though they considered it too expensive. Similarly, a Slashdot article or news of a
privacy scandal could make Tor users more tolerant of the poor performance. Finally, the user perception of
performance is an interesting and complex topic. In this analyis we assumed that performance is equivalent
to throughput; but actually latency, packet loss, predictability, and their interaction with TCP/IP congestion
control are important components too.
So what does all this tell us?
The above discussion has argued that the speed of an anonymity network will converge on the slowest level
that the most tolerant users will consider usable. This is problematic because there is signiﬁcant variation
in levels of tolerance between diﬀerent users and diﬀerent protocols. Most notably, ﬁle sharing users are
subject to high proﬁle legal threats, and do not require interactive traﬃc, so they will continue to use a
network even if the performance is considerably lower than the usable level for web browsing.
In conventional markets, this type of problem is solved by diﬀerential pricing, for example diﬀerent classes
of seat on airline ﬂights. In this model, several equilibrium points are allowed to form, and the one chosen
will depend on the cost/beneﬁt tradeoﬀs of the customers. A similar strategy could be used for Tor, allowing
interactive web browsing users to get higher performance, while forcing bulk data transfer users to have lower
performance (but still tolerable for them). Alternatively, the network could be conﬁgured to share resources
in a manner such that the utility to each user is more equal. In this case, it will be acceptable to all users
that a single equilibrium point is formed, because its level will no longer be characterized in terms of simple
bandwidth.
Section 2 is an example of the former strategy. Web browsing users will be oﬀered better performance, so
we should attract more of them, but hopefully not so many that the performance returns to current levels.
In constrast, bulk-traﬃc users will be given poorer performance, but since they are less sensitive to latency,
it could be that they do not mind. Section 1 could be used to implement the latter strategy. If web-browsing
users are more sensitive to latency than bandwidth, then we could optimize the network for latency rather
than throughput.
7.2
The plan moving forward
Our next steps should be to work with funders and developers to turn this set of explanations and potential
ﬁxes into a roadmap: we need to lay out all the solutions, sort out the dependencies, assign developers to
tasks, and get everything started.
At the same time, we need to continue to work on ways to measure changes in the network: without
‘before’ and ‘after’ snapshots, we’ll have a much tougher time telling whether a given idea is actually working.
Many of the plans here have a delay between when we roll out the change and when the clients and relays have
upgraded enough for the change to be noticeable. Since our timeframe requires rolling out several solutions
at the same time, an increased focus on metrics and measurements will be critical to keeping everything
straight.
Lastly, we need to be aware that ramping up development on performance may need to push out or
downgrade other items on our roadmap.
So far, Tor has been focusing our development energy on the
problems that funders are experiencing most severely at the time. This approach is good to make sure that
we’re always working on something that’s actually important. But it also means that next year’s critical
items don’t get as much attention as they should, and last year’s critical items don’t get as much maintenance
as they should. Ultimately we need to work toward having consistent funding for core Tor development and
maintenance as well as feature-oriented funding.
25
Performance Improvements on Tor
References
[1] Kent, S., and Seo, K. Security architecture for the internet protocol. RFC 4301, IETF, December
2005.
[2] Kiraly, C. Eﬀect of Tor window size on performance. Email to PI:EMAIL, February 2009.
http://archives.seul.org/or/dev/Feb-2009/msg00000.html.
[3] Kiraly, C., G., B., and Lo Cigno, R.
Solving performance issues in anonymization overlays
with a L3 approach.
Tech. Rep. DISI-08-041, University of Trento, September 2008.
version 1.1,
http://disi.unitn.it/locigno/preprints/TR-DISI-08-041.pdf.
[4] Kohno, T., Broido, A., and claffy, k. Remote physical device ﬁngerprinting. In IEEE Symposium
on Security and Privacy (Oakland, CA, US, May 2005), IEEE Computer Society, pp. 211–225.
[5] Laurie, B. On TLS empty record insertion. Email to PI:EMAIL, in thread “Re: Empty
TLS application records being injected in Tor streams”, December 2008. http://archives.seul.org/
or/dev/Dec-2008/msg00005.html.
[6] McCoy, D., Bauer, K., Grunwald, D., Kohno, T., and Sicker, D. Shining light in dark places:
Understanding the Tor network.
In Proceedings of the Eighth International Symposium on Privacy
Enhancing Technologies (PETS 2008) (Leuven, Belgium, July 2008), N. Borisov and I. Goldberg, Eds.,
Springer, pp. 63–76.
[7] M¨oller, B. Security of CBC ciphersuites in SSL/TLS: Problems and countermeasures, May 2004.
http://www.openssl.org/∼bodo/tls-cbc.txt.
[8] Murdoch, S. J. Hot or not: Revealing hidden services by their clock skew. In CCS ’06: Proceedings
of the 9th ACM Conference on Computer and Communications Security (Alexandria, VA, US, October
2006), ACM Press, pp. 27–36.
[9] Murdoch, S. J.
Economics of Tor performance.
Light Blue Touchpaper, 18 July 2007.
http:
//www.lightbluetouchpaper.org/2007/07/18/economics-of-tor-performance/.
[10] Murdoch, S. J., and Watson, R. N. M.
Metrics for security and performance in low-latency
anonymity networks.
In Proceedings of the Eighth International Symposium on Privacy Enhancing
Technologies (PETS 2008) (Leuven, Belgium, July 2008), N. Borisov and I. Goldberg, Eds., Springer,
pp. 115–132.
[11] Øverlier, L., and Syverson, P. Locating hidden servers. In Proceedings of the 2006 IEEE Sympo-
sium on Security and Privacy (May 2006), IEEE CS.
[12] Pradhan, P., Kandula, S., Xu, W., Shaikh, A., and Nahum, E. Daytona: A user-level TCP
stack, 2002. http://nms.lcs.mit.edu/∼kandula/data/daytona.pdf.
[13] Reardon, J. Improving Tor using a TCP-over-DTLS tunnel. Master’s thesis, University of Waterloo,
September 2008. http://hdl.handle.net/10012/4011.
[14] Rescorla, E., and Modadugu, N. Datagram transport layer security. RFC 4347, IETF, April 2006.
[15] Snader, R., and Borisov, N. A tune-up for Tor: Improving security and performance in the Tor
network. In Network & Distributed System Security Symposium (February 2008), Internet Society.
26
Performance Improvements on Tor
[16] Wendolsky, R., Herrmann, D., and Federrath, H.
Performance comparison of low-latency
anonymisation services from a user perspective. In Proceedings of the Seventh Workshop on Privacy
Enhancing Technologies (PET 2007) (Ottawa, Canada, June 2007), N. Borisov and P. Golle, Eds.,
Springer.
27