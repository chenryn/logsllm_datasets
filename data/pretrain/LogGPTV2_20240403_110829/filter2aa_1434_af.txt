### Optimizing Tor for Faster Page Loads

One potential optimization involves including the first cell of application data in the original begin cell. This approach would eliminate an entire network round-trip each time a new connection is established through Tor, resulting in faster page loads for users.

However, this technique requires extending the SOCKS protocol, which is not typically a polite strategy when interoperating with other applications. Nonetheless, it should be possible to extend the protocol in a backward-compatible manner. Applications that are unaware of this trick would still function correctly, albeit in a slightly less efficient mode where they waste a network round-trip.

**Impact:** Medium  
**Effort:** Medium  
**Risk:** Low  
**Plan:** While this move seems delicate, it has the potential for a good payoff. Further consideration is needed before making a final decision.

### Addressing Network Overhead for Low-Bandwidth Users

Even if we resolve other performance issues, challenges remain for users with extremely low bandwidth, such as those on modems or cell phones. We need to optimize the Tor protocols to make them efficient enough for these users.

#### 6.1 Directory Overhead Reduction

We have already made significant progress in reducing directory overhead for both bootstrapping and maintenance. Our blog post provides detailed background and information on this topic [9]. Proposal 158 further reduces directory overhead and is scheduled to be deployed in Tor 0.2.2.x [10].

**Impact:** Low for normal users, high for low-bandwidth users  
**Effort:** Medium, but we are well on our way  
**Risk:** Low  
**Plan:** Roll out Proposal 158. This will improve our situation for the near future. The next challenge will be advertising many more relays, but we need to acquire these relays first.

#### 6.2 Improving TLS Overhead

OpenSSL, by default, inserts an empty TLS application record before any record containing data. This is a security measure to prevent attacks where an attacker with partial control over the plaintext can confirm guesses about the plaintext. By including an empty application record, the attacker cannot control the CBC initialization vector, thus preventing control over the input to the encryption function [7].

This empty application record introduces a noticeable overhead. Most Tor cells are sent in application records of 512 bytes (cell) + 20 bytes (MAC) + 12 bytes (TLS padding) + 5 bytes (TLS application record header) = 549 bytes. The empty application records contain only 20 bytes (MAC) + 12 bytes (TLS padding) + 5 bytes (TLS application record header) = 37 bytes. There is also a 20-byte IP header and a 32-byte TCP header.

The overhead saved by removing the empty TLS application record is 37/(549+37+20+32) = 5.8%. If Tor optimally packs cells into packets, removing the empty application records would also reduce the number of packets and TCP/IP headers, further reducing overhead by 37/(549 + 37) = 6.3%.

Before removing the empty application record, we must ensure that the attack it prevents does not apply to Tor. Ben Laurie, one of the OpenSSL developers, concluded that Tor could safely remove the insertion of empty TLS application records [5]. Steven's analysis identified only certificational weaknesses, which are expensive to exploit and provide little information to the attacker.

**Impact:** Low  
**Effort:** Low  
**Risk:** Medium, as our initial analysis might be incorrect  
**Plan:** Implement this change in the Tor 0.2.2.x or 0.2.3.x timeframe. Not critical.

### Economic Considerations

Imagine we implement all the above solutions, doubling the effective capacity of the Tor network. The naive hypothesis is that users would experience twice the throughput. However, this assumes that the number of users does not vary with available bandwidth. In reality, as the supply of Tor network bandwidth increases, there will be a corresponding increase in demand from Tor users.

Economics shows that the performance of Tor and other anonymization networks is controlled by how the number of users scales with available bandwidth. This relationship can be represented by a demand curve [11].

Figure 6 illustrates the typical supply and demand graph, with long-term throughput per user substituted for price and the number of users for the quantity of goods sold. As the number of users increases, the bandwidth supplied by the network falls.

If Tor's bandwidth grows by 50%, the supply curve shifts. By comparing how the equilibrium moves, we can see how the shape of the demand curve affects the performance improvement. If the number of users is independent of performance (curve A), everyone gets a 50% improvement. More realistically, the number of users increases, so the performance gain is less. For demand curve B, there is an 18% increase in the number of Tor users and a 27% increase in throughput. With curve C, there are 33% more users and only a 13% increase in throughput for each user.

### Moving Forward

Our next steps should involve working with funders and developers to turn these explanations and potential fixes into a roadmap. We need to lay out all the solutions, sort out dependencies, assign developers to tasks, and get everything started.

Simultaneously, we need to continue working on ways to measure changes in the network. Without 'before' and 'after' snapshots, it will be challenging to determine whether a given idea is working. Many of the plans here have a delay between rollout and noticeable effects, so an increased focus on metrics and measurements will be critical.

Lastly, we need to be aware that ramping up development on performance may require pushing out or downgrading other items on our roadmap. Tor has been focusing on problems that funders are experiencing most severely at the time, which ensures we work on important issues. However, this approach means that next year's critical items don't get as much attention, and last year's critical items don't get as much maintenance. Ultimately, we need consistent funding for core Tor development and maintenance, as well as feature-oriented funding.

### References

[1] Kent, S., and Seo, K. Security architecture for the internet protocol. RFC 4301, IETF, December 2005.  
[2] Kiraly, C. Effect of Tor window size on performance. Email to PI:EMAIL, February 2009. http://archives.seul.org/or/dev/Feb-2009/msg00000.html.  
[3] Kiraly, C., G., B., and Lo Cigno, R. Solving performance issues in anonymization overlays with a L3 approach. Tech. Rep. DISI-08-041, University of Trento, September 2008. version 1.1, http://disi.unitn.it/locigno/preprints/TR-DISI-08-041.pdf.  
[4] Kohno, T., Broido, A., and claffy, k. Remote physical device fingerprinting. In IEEE Symposium on Security and Privacy (Oakland, CA, US, May 2005), IEEE Computer Society, pp. 211–225.  
[5] Laurie, B. On TLS empty record insertion. Email to PI:EMAIL, in thread “Re: Empty TLS application records being injected in Tor streams”, December 2008. http://archives.seul.org/or/dev/Dec-2008/msg00005.html.  
[6] McCoy, D., Bauer, K., Grunwald, D., Kohno, T., and Sicker, D. Shining light in dark places: Understanding the Tor network. In Proceedings of the Eighth International Symposium on Privacy Enhancing Technologies (PETS 2008) (Leuven, Belgium, July 2008), N. Borisov and I. Goldberg, Eds., Springer, pp. 63–76.  
[7] Moller, B. Security of CBC ciphersuites in SSL/TLS: Problems and countermeasures, May 2004. http://www.openssl.org/~bodo/tls-cbc.txt.  
[8] Murdoch, S. J. Hot or not: Revealing hidden services by their clock skew. In CCS ’06: Proceedings of the 9th ACM Conference on Computer and Communications Security (Alexandria, VA, US, October 2006), ACM Press, pp. 27–36.  
[9] Murdoch, S. J. Economics of Tor performance. Light Blue Touchpaper, 18 July 2007. http://www.lightbluetouchpaper.org/2007/07/18/economics-of-tor-performance/.  
[10] Murdoch, S. J., and Watson, R. N. M. Metrics for security and performance in low-latency anonymity networks. In Proceedings of the Eighth International Symposium on Privacy Enhancing Technologies (PETS 2008) (Leuven, Belgium, July 2008), N. Borisov and I. Goldberg, Eds., Springer, pp. 115–132.  
[11] Overlier, L., and Syverson, P. Locating hidden servers. In Proceedings of the 2006 IEEE Symposium on Security and Privacy (May 2006), IEEE CS.  
[12] Pradhan, P., Kandula, S., Xu, W., Shaikh, A., and Nahum, E. Daytona: A user-level TCP stack, 2002. http://nms.lcs.mit.edu/~kandula/data/daytona.pdf.  
[13] Reardon, J. Improving Tor using a TCP-over-DTLS tunnel. Master’s thesis, University of Waterloo, September 2008. http://hdl.handle.net/10012/4011.  
[14] Rescorla, E., and Modadugu, N. Datagram transport layer security. RFC 4347, IETF, April 2006.  
[15] Snader, R., and Borisov, N. A tune-up for Tor: Improving security and performance in the Tor network. In Network & Distributed System Security Symposium (February 2008), Internet Society.  
[16] Wendolsky, R., Herrmann, D., and Federrath, H. Performance comparison of low-latency anonymisation services from a user perspective. In Proceedings of the Seventh Workshop on Privacy Enhancing Technologies (PET 2007) (Ottawa, Canada, June 2007), N. Borisov and P. Golle, Eds., Springer.