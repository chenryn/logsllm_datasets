20
118.4s
2.2s
30
266.4s
3.4s
40
50
473.6s
4.7s
740.3s
6.0s
(cid:12)(cid:13)(cid:11)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)
(cid:1)(cid:5)(cid:10)(cid:11)(cid:2)(cid:7)(cid:3)(cid:4)(cid:13)(cid:3)(cid:8)(cid:6)(cid:9)(cid:12)(cid:11)(cid:2)(cid:11)(cid:5)(cid:8)(cid:7)(cid:13)
(cid:5)(cid:3)(cid:4)(cid:1)(cid:2)(cid:6)(cid:3)(cid:8)(cid:6)(cid:9)(cid:12)(cid:11)(cid:2)(cid:11)(cid:5)(cid:8)(cid:7)(cid:13)
(cid:1)(cid:3)
(cid:2)(cid:3)
(cid:9)(cid:11) (cid:7)(cid:3)(cid:11)
(cid:1)(cid:2)
(cid:1)(cid:2)(cid:6)(cid:3)
(cid:2)(cid:3)(cid:1)(cid:2)(cid:1)(cid:10)(cid:11) (cid:5)(cid:3)(cid:1)(cid:3)
(cid:1)(cid:2) (cid:4)(cid:3)(cid:11)
(cid:2)
(cid:2)(cid:1)(cid:1)(cid:21) (cid:3)(cid:1)(cid:1)(cid:21)
(cid:4)(cid:1)(cid:1)(cid:21) (cid:5)(cid:1)(cid:1)(cid:21)
(cid:6)(cid:1)(cid:1)(cid:21)
(cid:7)(cid:20)(cid:13)(cid:8)(cid:10)(cid:17)(cid:21)(cid:15)(cid:11)(cid:21)(cid:19)(cid:12)(cid:10)(cid:21)(cid:18)(cid:10)(cid:16)(cid:20)(cid:10)(cid:14)(cid:9)(cid:10)(cid:18)(cid:21) (cid:1)(cid:3)(cid:2)(cid:4)
(a) n = 500, k = 10 (query)
(cid:3)(cid:2)
(cid:4)(cid:3)(cid:11)
(cid:4)(cid:8)(cid:11)
(cid:8)(cid:11)
(cid:5)(cid:8)(cid:11)
(cid:1)(cid:12)(cid:7)(cid:2)(cid:3)(cid:9)(cid:13)(cid:8)(cid:4)(cid:13)(cid:11)(cid:5)(cid:3)(cid:13)(cid:9)(cid:3)(cid:10)(cid:12)(cid:6)(cid:11)(cid:10)(cid:13) (cid:1)(cid:3)(cid:2)(cid:4)
(b) n = 500, m = 100 (query)
(cid:5)(cid:3)(cid:11)
(c) n = 500, k = 10 (comm.)
(d) n = 500, m = 100 (comm.)
Figure 4: The performance of SSQ-II protocol.
owner is the same. We test SSQ-II over this dataset with different
scales (m from 100 to 500) while fixing the number of blocks in
each sequence t = 20. Figure 4(a) shows the query time for SSQ-II
as m increases (while fixing k = 10 and k is the number of the
results). The query time grows linearly with m, which coincides
with the theoretical analysis in Section 6.2. We can also conclude
that the time for computing edit distance makes up a greater share
of the total time compared with the time for top-k results retrieve.
For example, it takes 124 minutes for distance computation and
12.5 minutes for top-k computation when m = 500. Figure 4(b)
shows the time cost in SSQ-II increases as k increases (while fixing
m = 100), since there is a positive correlation between the time for
top-k computation and the value of k, although k has no effect on
the time for distance computation. We also collect communication
cost between the two servers during the above tests, similar varying
tendencies are shown in Figure 4(c) and 4(d). The underlying reason
is that the increase of sequence length (m) and the result number
(k) will undoubtedly raise the cost of communication. However, the
communication cost between the client and the servers is negligible,
which is one round including only one query request and k result
indices.
During the query stage, data owners and users needn’t partici-
pate in any computation. During the outsourcing stage, data owners
perform all of the operations in plaintext forms. The data owner
only takes about 3 minutes to create a database in which m = 500,
n = 500 and t = 20. For arbitrary query users, the task is just
partitioning queries and recovering the secret sharing results by
modular addition operations. This means the overhead to users is
lightweight, which further makes our schemes scalable.
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
Table 4: Accuracy of SSQ-II for various choice of k and t
when m = 500 and n = 500
Number of blocks Number of results
Accuracy
(i.e., Stage 3 in SSQ-II) are independent of others. We consider the
multi-source genomic data fusion and the parallelization of the
query program as a future work.
t = 10
t = 15
t = 20
t = 25
t = 30
k = 1/5/10
k = 1/5/10
k = 1/5/10
k = 1/5/10
k = 1/5/10
80%/76%/76%
90%/84%/87%
100%/94%/92%
100%/98%/95%
100%/100%/96%
Recall from Section 5.2 that SSQ-II yields approximate results,
computing edit distance through partitioning method and SAGSC
protocol could introduce error. To assess the effects of SAGSC
protocol, we run this protocol multiple times and count the number
of false-positive results. As the SAGSC protocol is used to compare
the sequences in the same location from the sequence values set
Ti with the query block Qi , we collect all sequence values in Ti
from above experiments and then launch pairwise comparison for
these sequences in the same location by SAGSC protocol. We made
a total of 486 comparisons and the number of false-positive results
is 4, the error rate is only about 0.82%. As for the error caused by
partitioning method, we refer the reader to [3] for details.
The accuracy results of SSQ-II are summarized in Table 4. Note
that we do the tests over the above real-world dataset (m = 500, n =
500) and repeat the experiment 10 times for random choice of the
queries. From the table, we find that when the number of blocks is
no fewer than 20, the accuracies of all cases (k = 1, 5, 10) are over
90%. Consider the query performance and accuracy together, so we
set t = 20 when m = 500, n = 500 in the above experiments.
8 DISCUSSION
8.1 Reducing Error Rate
Here we theoretically analyze how to further reduce the error rate
of SAGSC protocol by a well-designed encoding scheme. Consider
two genomic sequences in which at least one nucleotide’s amount
is different, and for each nucleotide, when the number of its po-
sitions at which the corresponding symbols are different is below
a (a is a integer), we can deterministically detect if the two se-
quences are different by an encoding scheme in a base. For example,
”ATAGCG“ and ”CTACCG“ are represented as x = [0, 3, 0, 2, 1, 2] and

y = [1, 3, 0, 1, 1, 2] under existing encoding scheme, the equation
yi holds, it makes a false-positive result when us-
ing SAGSC protocol. If we use a decimal encoding scheme (i.e., a=10,
we use 0, 10, 100, 1000 to represent four nucleotides A,C,G,T), the
same sequences can be denoted as x = [0, 1000, 0, 100, 10, 100] and
y = [10, 1000, 0, 10, 10, 100], and the equation
yi
does not hold, i.e., we can detect the two sequences are different.
xi ==
xi ==
6
i =1
6
i =1

6
i =1

6
i =1

8.2 Improving Query Efficiency
In the process of query, we compute edit distances in multiple
datasets uploaded by different data owners. In fact, these datasets
may contain duplicate records, we can decrease the size of genomic
data by deduplication, so the query algorithm is in high efficiency.
In addition, the online query cost can be greatly reduced by parallel
and (cid:4)di (cid:5)
computing, the reason is that the computations of
χl, j
(cid:3)
(cid:4)
9 RELATED WORK
Privacy-preserving query and analysis over genetic data have re-
ceived much attention recently. Existing works [7, 11, 16, 33, 34, 37]
deal with genome variant query, pattern matching, range query,
count query and statistic information computation over genomic
data in a privacy-preserving manner. Secure similar sequence query
on genomic data, which is the focus of our research, is a special case
of secure query processing on genomic data. Secure SSQ on genetic
data is usually considered under two different system models. The
first model is secure multi-party computation setting. The second
model is the secure outsourcing of computation model. We review
the related works under each system model respectively.
9.1 SSQ in Multi-party Computation Model
Jha et al. proposed a privacy-preserving protocol to compute the edit
distance between two genomic sequences based on dynamic pro-
gramming [22]. For performance reasons, the authors showed three
methods to replicate the original edit distance algorithm over Gar-
bled Circuits. Further, Zhu et al. [38] customized a secure garbling
scheme to compute edit distance by leveraging publicly exploitable
traits of target computations, which is significantly more efficient
than traditional garbled circuits. Yet, the computation and the com-
munication overhead of the above schemes are considerable, since
these protocols are all iterative and the number of iterations is the
product of the lengths of two input sequences. To exploit the high
similarity between human genomic sequences, Wang et al. [36] re-
sorted to the approximate edit distance computing. Their scheme is
efficient as the edit distance computation problem is transformed to
the relatively simple set-intersection-size-approximation problem.
Inspired by this approach, a series of query protocols [2, 3] based on
approximate edit distance are proposed. In the most advanced solu-
tion [3], the authors partitioned the sequences into smaller blocks
and then pre-computed the edit distance within the blocks. In this
way, a lot of computational overhead is transferred to a preprocess-
ing stage. These works, however, are all in the SMC model (data is
distributed between two parties who collaboratively compute the
results without revealing to each other their private data), which
are not suitable to our problem since we aim at reducing user-side
overhead to the minimum.
9.2 SSQ in Outsourcing Computation Model
So far there has been no full implementation for secure SSQ on
outsourced genomic data. The following related works focused on
edit distance computation. Atallah and Li [5] initially studied the
secure outsourced protocol for edit-distance sequence comparisons.
Emiliano et al. [10] and Cheon et al. [9] discussed how to calculate
edit distance based on homomorphic encryption (HE). However,
in the above schemes, the exact edit distance is computed in a re-
cursive way, so computational overhead and communication costs
are too large. For example, the scheme in [9] takes 27 seconds to
compute an 8 × 8 block by dynamic programming. A further work
in [23] presented a secure approximate edit distance protocol based
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
on the comparison binary circuit in [9]. However, the query user
has a massive overhead. A recent work [27] took a step back to
study secure similar genomic sequence query based on Hamming
distance instead of edit distance. But this simple indicator of simi-
larity is not suitable for genomic data as single-gene insertion or
deletion would have much impact on the similarity. Another simi-
lar work [26] focuses on the similarity computation on encrypted
trajectories data. Compared with it, our mixed protocols achieve
higher performance and support a richer retrieve function. More
importantly, all above works are not scalable in supporting multiple
users and data owners, which is a big gap that our work aims to fill.
10 CONCLUSION
We have presented two novel schemes SSQ-I and SSQ-II towards
secure similar-sequence-query on outsourced genomic data. At
the core of our schemes, we have designed a set of mixed secure
protocols based on secret sharing, garbled circuit, and partial homo-
morphic encryptions to achieve security, efficiency, and scalability
simultaneously. Formal security analysis demonstrated all proto-
cols are secure under the semi-honest adversary model. Finally,
we show the efficacy and efficiency of our solutions through ex-
tensive experiments conducted over a real genomic dataset on a
commercial cloud platform. For the future work, we will continue
to improve SSQ performance over a larger dataset.
ACKNOWLEDGMENTS
We thank the shepherd and reviewers for the valuable suggestions.
This work is funded in part by National Science Foundation of
China under number U1736216.
REFERENCES
[1] 2017.
Illumina wants to sequence your whole genome for 100.
(2017).
https://techcrunch.com/2017/01/10/illumina-wants-to-sequence-your-whole-
genome-for-100.
[2] Md Momin Al Aziz, Dima Alhadidi, and Noman Mohammed. 2017. Secure
approximation of edit distance on genomic data. BMC medical genomics 10, 2
(2017), 41.
[3] Gilad Asharov, Shai Halevi, Yehuda Lindell, and Tal Rabin. 2017. Privacy-
Preserving Search of Similar Patients in Genomic Data. IACR Cryptology ePrint
Archive 2017 (2017), 144.
[4] Mikhail Atallah, Marina Bykova, Jiangtao Li, Keith Frikken, and Mercan Topkara.
2004. Private collaborative forecasting and benchmarking. In Proceedings of the
2004 ACM workshop on Privacy in the electronic society. ACM, 103–114.
[5] Mikhail J Atallah and Jiangtao Li. 2005. Secure outsourcing of sequence compar-
isons. International Journal of Information Security 4, 4 (2005), 277–287.
[6] Tiziano Bianchi, Alessandro Piva, and Mauro Barni. 2010. Composite signal
representation for fast and storage-efficient processing of encrypted signals. IEEE
Transactions on Information Forensics and Security 5, 1 (2010), 180–187.
[7] Feng Chen, Chenghong Wang, Wenrui Dai, Xiaoqian Jiang, Noman Mohammed,
Md Momin Al Aziz, Md Nazmus Sadat, Cenk Sahinalp, Kristin Lauter, and Shuang
Wang. 2017. PRESAGE: PRivacy-preserving gEnetic testing via SoftwAre Guard
Extension. BMC medical genomics 10, 2 (2017), 48.
[8] Ke Cheng, Yantian Hou, and Liangmin Wang. 2018. Secure Similar Sequence
Query on Outsourced Genomic Data. (2018). http://cs.boisestate.edu/~yhou/
gene_search_tech_report.pdf
[9] Jung Hee Cheon, Miran Kim, and Kristin Lauter. 2015. Homomorphic computa-
tion of edit distance. In International Conference on Financial Cryptography and
Data Security. Springer, 194–212.
[10] Emiliano De Cristofaro, Kaitai Liang, and Yuruo Zhang. 2016. Privacy-Preserving
Genetic Relatedness Test. arXiv preprint arXiv:1611.03006 (2016).
[11] Daniel Demmler, Kay Hamacher, Thomas Schneider, and Sebastian Stammler.
2017. Privacy-Preserving Whole-Genome Variant Queries. In 16. International
Conference on Cryptology And Network Security (CANS’17) (LNCS). Springer.
http://thomaschneider.de/papers/DHSS17.pdf To appear.
[12] Daniel Demmler, Thomas Schneider, and Michael Zohner. 2015. ABY-A Frame-
work for Efficient Mixed-Protocol Secure Two-Party Computation. In NDSS.
[13] Yousef Elmehdwi, Bharath K Samanthula, and Wei Jiang. 2014. Secure k-nearest
neighbor query over encrypted data in outsourced environments. In Data Engi-
neering (ICDE), 2014 IEEE 30th International Conference on. IEEE, 664–675.
[14] De Cristofaro Emiliano, Liang Kaitai, and Zhang Yuruo. 2016. Privacy-Preserving
Genetic Relatedness Test. In GenoPri’16: 3rd International Workshop on Genome
Privacy and Security. Chicago, IL, USA.
[15] Oded Goldreich. 2009. Foundations of cryptography: volume 2, basic applications.
Cambridge university press.
[16] Mohammad Zahidul Hasan, Md Safiur Rahman Mahdi, and Noman Mohammed.
arXiv preprint
Secure Count Query on Encrypted Genomic Data.
2017.
arXiv:1703.01534 (2017).
[17] Carmit Hazay, Gert Læssøe Mikkelsen, Tal Rabin, and Tomas Toft. 2012. Efficient
RSA Key Generation and Threshold Paillier in the Two-Party Setting. In CT-RSA.