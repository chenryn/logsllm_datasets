7
8
9
10
Listing 3: LLVM IR with -O0, local variable lives at stack
address at line 2
}
define i32 @main() {
%1 = call malloc(i64 8)
call @free(i8* %1)
%2 = call @puts(i8* %1)
1
2
3
4
5
Listing 4: LLVM IR with -O2, local variable lives in %1 as
LLVM register
}
calloc, free, realloc, memalign, aligned_alloc, valloc, pvalloc
and posix_memalign to keep track of heap memory layout. The
run-time code also provides functions to track pointer propagation
so that instrumented calls can update the data structure.
2.4.1 Heap Data Structure. The heap is represented as a directed
graph. Allocated memory blocks are nodes and pointers are directed
edges that link memory blocks. Pointers to heap memory can exist
in heap memory, the data section of the executable, stack memory,
and registers. In DangSan’s design, each dynamic memory block
has associated metadata which tracks the sets of all inward pointers.
DangSan chose not to record outward edges in the metadata for
performance reasons.
The metadata of the heap objects is kept in a three-level shadow
memory map. Querying the metadata of dynamic objects takes
constant time with three memory reads.
The metadata consists of sets of pointers, and is implemented
in the manner of a file system. When the direct log is filled up,
an alternative hash map is used instead. The hash map is used
to eliminate duplicates to prevent the log from growing without
constraints.
3
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
void init_heapobj(void* ptr, size_t size) {
metadata *m = new_metadata(ptr, size);
insert_metadata_range(ptr, size, m);
}
void freeptr(void* ptr, size_t size) {
metadata *m = get_metadata(ptr);
for (uintptr_t loc : m->record) {
uintptr_t val = *(uintptr_t*)loc
if (val >= ptr &&
val < ptr + size ) {
invalidate_ptr(loc);
}
}
delete_metadata(m);
}
Listing 5: Alloc and Dealloc function hook
DangSan modifies gperftools’ tcmalloc and adds hook func-
tions to memory allocation and deallocation. All allocator func-
tions are mapped to basic malloc() and free() functions. Because
memcpy() is not tracked by DangSan, a realloc() is treated as a
malloc() followed by a free(). As shown in Listing 5, allocation
and deallocation hooks have the job of managing the three-level
shadow memory. The allocation hook marks the region of the mem-
ory object with the metadata, while the deallocation hook clears
the metadata. The deallocation hook has the additional task of man-
aging dangling pointers. For all inward pointers in the metadata
record, a value check is performed. If the pointer still refers to the
freed object, the pointer is invalidated by setting its most significant
bit to 1.
The pointer records are created with regptr calls that are in-
strumented by the LLVM pass. The regptr function checks if the
pointer points to a recorded object and, if so, records the pointer in
the metadata of the object. The pseudo-code is shown in Listing 6.
DangSan also includes another LLVM pass that checks the data
section of the program and inserts a global constructor function
that registers global variables in data sections.
2.4.2 Tracking pointers in memory. The compile-time instrumen-
tation is designed as an LLVM pass that processes LLVM IR. Prop-
agating pointers to data and heap sections guarantees a memory
write instruction. LLVM IR uses the store instruction for memory
writes, and it also indicates the type of stored values. Therefore,
one only needs to instrument store instructions with pointer type:
store PtrTy* ptr_loc, PtrTy ptr_val
1
2
3
4
5
6
7
void regptr(uintptr_t loc, uintptr_t val){}
metadata* obj = meta_get(val);
if (obj) {
if (!in_lookback(obj, loc))
register(obj, loc);
}
}
Listing 6: Functions that provide pointer tracking
Our pointer invalidation system follows the global model by
maintaining a synchronous data structure. We ensure the correct-
ness of the heap representation under multiple threads. A free()
invalidates pointers stored on the stack for every thread.
However, to enable further optimizations for local variable track-
ing, we rely on the thread-local model. This model allows further
static analysis and covers most common situations. We note that
this assumption is shared by prior work; DangSan and FreeSentry
both rely on it for their loop optimization pass.
3 DESIGN AND IMPLEMENTATION
As shown in Figure 1, we designed HeapExpo on top of DangSan,
keeping its instrumentation and runtime libraries. DangSan’s trans-
formation passes run at link time, when stack variables have already
been promoted to registers. We therefore add another step before
the mem2reg pass to preserve relevant stack variables. When Dan-
gSan’s optimizations take place, these variables are still tracked as
on stack.
Figure 1: Overall Design of HeapExpo
2.5 Threading Model
In this section, we discuss two essential threading models that affect
our implementation: the global and thread-local assumptions. In
the most general case, the global model assumes that a registered
pointer may be invalidated by a free() in any thread. By contrast,
thread-local model assumes that a registered pointer may only
be invalidated by a free() in the same thread.
3.1 Tracking Local Variable and Function
Argument
As previously discussed, dangling pointers can be stored in the
data section, on the heap, on the stack, and in registers. We have
discussed how prior work achieved tracking of pointers in memory.
In this section, we discuss how we track pointers promoted to
registers.
4
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
void f(char *ptr) {
strcpy(ptr, "string1");
free(ptr);
}
void g(char *ptr) {
*ptr = 's';
}
int main() {
char *s1, *s2, *s3;
char c1, c2;
s1 = malloc(10);
regptr(&s1, s1); //reg s1
s2 = malloc(10);
f(s1);
s3 = malloc(10);
c1 = *s1;
g(s3);
c2 = *s3;
}
Listing 7: Local variable instrumentation example
Burden of register tracking. Computers have limited number
of registers. Therefore, the LLVM back-end maps the unbounded set
of LLVM registers to machine registers according to their liveness.
Because LLVM passes operate at the IR level, our pass is not aware
of machine registers and thus cannot easily track them. To ensure
complete coverage, invalidating pointers in registers is required.
To solve this problem, we propose a method that tracks local vari-
ables and function arguments without checking machine registers;
instead, we identify pointer variables that need to be tracked and
prevent them from being promoted to registers in the first place.
We run our LLVM pass before the mem2reg pass; at this point,
local variables and function arguments are all stored on the stack.
To track a local variable or function argument, we mark it as volatile,
ensuring that further optimization will keep the variable on the
stack. We do this by simply marking the relevant store and load
instructions as volatile in our LLVM pass. We do not modify other
variables and arguments and let the mem2reg pass promote them
to registers.
When a memory block is released, we check all associated point-
ers, including volatilized pointers. If they still point to the region,
we invalidate the pointers by making them point to invalid memory
space. Dereference of the pointers thus causes a segmentation fault.
One downside of this strategy is that it results extra memory
reads and writes, adding to the overhead to our system. To make
HeapExpo practical, we must therefore develop optimization tech-
niques that only track pointers that can potentially cause use-after-
free. Overall, the optimizations can reduce number of instrumented
instructions by half, leading to a significant speedup. We describe
these optimizations next.
3.2 Liveness Analysis
Tracking local variables by keeping them on the stack has a per-
formance impact because the compiler cannot optimize them into
5
registers. To reduce number of tracked variables, we apply liveness
analysis to local pointers and pointer arguments to functions based
on control flow within each function.
We say that a local pointer becomes a live dangling pointer when
(1) a function call invalidates it, and (2) it may be dereferenced later
in the function execution. There is no need to instrument local
pointers that are not live. In this way, we reduce the number of
instrumentation added and the number of stack variables tracked.
First, we find all definitions and uses of local pointer variables
and function parameters. Our LLVM pass takes place before the
mem2reg pass, so every store instruction is a definition, and every
load instruction is a use. At each function call, we make every live
stack variables volatile. Specifically, we mark as volatile the last
store before the call instruction and the first load after it.
In Listing 7, suppose we perform a check for main at line 14.
We want to examine the liveness of local pointers s1, s2, and s3 at
call to f(). s1 is defined at line 11 and used at line 16. It is possible
that the value of s1 is invalidated inside f(). Hence we make s1
volatile by making the store and load volatile. Also, we register the
stack location of s1 for tracking. s2 is defined at line 13 but never
used after f(). Thus, we do not need to track s2, as it cannot cause a
use-after-free. Although s3 is used at line 18, it is always guarded
by the definition at line 15. s3 may be invalidated in f(), but the
definition will always overwrite the old address before use. We thus
do not need to track s3 either.
In the example above, we should repeat the above check with
every function call in main, but we will show next that the check
at g() is not necessary.
With the control flow graph of the function, we can easily assess
the liveness of a variable. If there is a path from the function entry
point to some definition of a local pointer, and then to the call
instruction, it means that the pointer is potentially defined at the
call instruction. Similarly, if there is a path from the call instruction
to a usage, without encountering any definitions, it means the local
pointer is potentially dereferenceable after the call instruction. If
the local pointer is both potentially defined before the function
call, and potentially dereferenceable after the function call, we say
the pointer variable is live. We repeat the process with every call
instruction in the function to obtain a set of live local pointers to
track. Any local variables and function parameters that are not live
can be safely promoted to LLVM registers and optimized.
3.3 Call Graph Analysis
In the previous subsection, we examined the liveness of every local
pointer variable at each function call, assuming that the variable
may be freed inside the called function. Here, we introduce a call
graph analysis that can reduce the number of liveness checks.
Under the thread-local assumption, a stack pointer can only be
invalidated inside its thread, which means the function the pointer
is in must call free() to release memory. A call to a function that
does not release any memory cannot invalidate any stack variables.
Therefore, we can avoid adding checks at those calls.
We conservatively gather this information about functions with
the following algorithm. We conservatively regard external func-
tions and indirect jumps as possibly calling free. In order to make
library function calls precise, we can provide C/C++ library calls
that never call free in our model. This way, we can eliminate some
call instructions to instrument. In our running example, we do not
need to add a check at the call to g() in Listing 7 because g() does
not release any memory.
3.4 Volatile Dropping Optimization
Combined liveness and call graph analysis can help us identify
stack variables that may introduce UAF. We then mark these stack
variables as volatile for later instrumentation. The volatilization
must occur before other passes like mem2reg optimize the code dur-
ing compilation. However, because the each source file is compiled
independently, library functions from other files are not available
until link time. Therefore, we perform a second pass of call graph
analysis at link time and drop unnecessary volatile instructions.
This pass is implemented as a link time optimization pass. We ex-
plicitly invoke mem2reg after volatile instruction dropping to ensure
newly optimized stack locations are lifted to registers.
4 EVALUATION
In this section, we evaluate the effectiveness of HeapExpo by ana-
lyzing OSS-Fuzz bugs [9, 23], and its performance by benchmarking
its time and space overheads compared to previous work.
4.1 Survey of UAF Bugs Discovered by OSS-Fuzz
To estimate how many bugs may be missed by prior work that
cannot track pointers through registers, we study use-after-free
bugs found in the OSS-Fuzz database [23], and manually categorize
the sources of dangling pointers. Our process is similar to debugging
where we identify the source of each dangling pointer as a heap
pointer, global pointer, local variable pointer, etc.
Reproducing older bugs from OSS-Fuzz is not completely straight-
forward, as individual projects in OSS-Fuzz are continually updated
to their latest versions, and it is nontrivial to identify the correct
revision for both the project and its dependencies that will allow
the bug to manifest. Once the correct version is found, we can
then build the fuzzer component and use the provided test case to
reproduce the crash. To identify the correct versions and analyze
the bug, we:
of their source code
reported by OSS-Fuzz
• Find a commit of project source that references the bug
• Find corresponding commits of upstream dependencies
• Find the commit of OSS-Fuzz at the time
• Build the executable and libraries with the correct versions
• Use the OSS-Fuzz test case to reproduce the crash
• Rebuild with debugging flags “-O0 -g”
• Perform dynamic analysis with a debugger
We selected projects with reports of use-after-free bugs from
OSS-Fuzz database. We chose projects with an eye toward ease
of bug reproduction, based on the number of dependencies and
the complexity involved in compiling the fuzzer. Large projects
usually have complicated build scripts, making it difficult to turn
off optimizations. Without disabling optimization, the source of
dangling pointers can be ambiguous. In the end, we were able to
reproduce 19 bugs from 11 projects as shown in Table 4.
Source of Dangling Pointer Occurrence
Local Variable Pointer
Function Argument Pointer
Global Pointer
Heap Pointer
Reference of Pointer
Transformed Pointer
1
6
5
5
1
1
Table 3: Occurrence of UAF Bugs by Sources
1