title:Evaluating the Impact of Limited Resource on the Performance of Flooding
in Wireless Sensor Networks
author:Patrick Downey and
Rachel Cardell-Oliver
Evaluating the Impact of Limited Resource on the
Performance of Flooding in Wireless Sensor Networks
Patrick Downey and Rachel Cardell-Oliver
School of Computer Science & Software Engineering
The University of Western Australia
Crawley WA 6009 Australia
PI:EMAIL
PI:EMAIL
Abstract— Wireless sensor networks (WSNs) are large col-
lections of resource limited nodes, densely deployed over a
landscape. They gather and disseminate local data using multi-
hop broadcasting. WSN design and deployment is hampered by
currently limited knowledge of the performance characteristics
of network nodes and protocols. Their systematic development,
thus, requires a ﬂexible simulation environment in which new
models of speciﬁc node or network behaviours can be integrated
easily. This paper introduces a loosely coupled, object oriented
simulation environment for this task. The simulator is used
to investigate the efﬁciency of ﬂooding protocols in WSNs. For
dense networks with noisy transmission, we show that using low
transmission power maximises time and resource efﬁciency and
that the scalability of ﬂooding for large networks is excellent.
We demonstrate ways of improving ﬂooding performance given
speciﬁc deployment constraints.
Keywords— Wireless sensor networks, Flooding protocols,
Simulation, Model validation.
I. INTRODUCTION
Sensor networks are a new class of multi-hop broadcasting
networks comprising thousands of low cost sensor nodes
which sample real-time information across a landscape. In-
formation is communicated from one sensor node to the next
using short range radio broadcasting. The new technology of
wireless sensor networks enables novel experimental meth-
ods for environmental monitoring applications because the
relatively low cost of sensor nodes, and their wireless con-
nection, means that properties such as temperature, moisture,
or light can be monitored at a ﬁner grain (both in space and
time) than has previously been possible.
Traditionally, network designers utilise computer simula-
tions to predict and analyse behaviour. Several widely used
network simulators have been extended to model wireless
communication by radio broadcast [1], [2] and special pur-
pose simulators have been developed for wireless sensor
networks [3], [4], [5], [6]. However, the performance pre-
dictions of well known simulators have been shown to differ
widely [7], and there are few studies comparing simulation
predictions with the observed performance of real networks.
In this paper we present a new simulator, designed specif-
ically for wireless sensor networks. Our main goals are
transparency and ease of change. Transparency means that
the assumptions made in modelling each aspect of network
behaviour from physical radio transmission, to network pro-
tocol behaviour, should be visible to the user. Ease of change
allows users to substitute their own models in order to obtain
greater accuracy, to simplify models where appropriate, or
to introduce models based on new experimental results. We
show that the object oriented design of the simulator supports
these goals. In particular, an event driven interface, the use
of reﬂection, and the ability to dynamically load classes at
runtime, make the simulator highly extensible.
Another approach to performance analysis is to implement
a sensor network and experiment with different algorithms
on the physical system [8], [9], [10]. However, it is time
consuming and expensive to build applications and it
is
difﬁcult to isolate individual properties of an implementation
in order to compare different approaches. In particular, the
use of the nodes’ scarce resources of energy and storage for
collecting performance data may create a probe effect, giving
distorted data.
The main contributions of this paper are,
• the introduction of an extensible simulation framework
and tool for wireless sensor networks;
• an analysis of the effects of limited resources on ﬂood-
ing performance: time and resource efﬁciency, robust-
ness and energy efﬁciency.
Section II outlines the Boris simulation framework, and
Section III an instantiation of this framework for wireless
sensor networks. In Section IV the effects of different
parameters on the performance efﬁciency of ﬂooding is
analysed. Section V discusses the validation of the simulator
model against empirical data. Related work is discussed in
Section VI and conclusions and future work in Section VII.
II. THE BORIS SIMULATION FRAMEWORK
A. Object Model
The object model provided by the Boris simulation frame-
work is a shallow one which allows for maximum ﬂexibility
and gives the developer a small hierarchy to learn. The
framework itself provides one main class (Simulator)
that is responsible for the management of high level con-
trols of a simulation: starting, pausing and stopping, and
speed. The simulator also provides an event and notiﬁ-
cation model through the SimulationEvent class and
ﬁle on the command line. Using Java system properties
makes conﬁguration information available for simulator-wide
use through the System property methods. This allows
conﬁguration information to be distributed with ease between
sub and peer classes. The use of system properties also
allows for simulator extensions to deﬁne and use their own
conﬁguration keys and values.
D. Simulator Output
The Boris framework and WSN simulator generate output
ﬁles using the extensible markup language (XML). XML is
used because of its descriptive properties which allows for
all values to be given an immediately visible context, such
as whether an event happened whilst in the send or receive
phase. XML is also chosen for the ability to generically parse
and/or transform the output. The output can be parsed and
transformed by any valid XML parser or extensible stylesheet
language (XSL) transformer; all that is needed is the XML
schema. The parsing and transformation capabilities of XML
allow many different views of the data to be generated
relatively easily. The major disadvantage of using XML is the
size of an output ﬁle. For example the output ﬁles generated
in the experiments reported in this paper were in excess of
four gigabytes.
E. Post Processing Tools
To assist with the analysis of the output data the following
tools were developed.
1) Output Summariser: To cope with the large amount of
data that is generated from multiple simulation runs, a small
tool was created to summarise the data from the large output
ﬁle into a smaller, more manageable XML ﬁle. The summary
consists of the minimum, maximum, average and standard
deviation for each of the following variables: packets sent,
packets received, packets processed, and packets dropped.
2) XSL transformer: The Boris tools collection also in-
cludes a command line XSL transformer which uses the XSL
transformer that is built into the Java 2 SDK. This tool was
developed to transform the summarised data generated from
output from the WSN simulator into ﬁles such as a comma
separated list of values (for use in a spreadsheet program) or
a format ready for plotting graphs.
III. SIMULATING WIRELESS SENSOR NETWORKS IN THE
BORIS FRAMEWORK
Our wireless sensor network (WSN) simulator is a ﬁnite
state machine model that has been implemented on top of
the Boris framework. Each cycle in the WSN model consists
of three distinct phases:
1) Clear: Clears the signal state of the landscape,
2) Send: Processes all nodes waiting to send and
3) Receive: Processes all nodes waiting to receive a
packet.
Fig. 1. Boris screenshot showing a ﬂood in progress
SimulationListener interface. This model allows for
extensions to be developed that can simply plug in to the
simulator and react according to any simulation events that
occur, such as the completion of a simulation cycle.
One of the beneﬁts of Java, that the framework takes
advantage of, is reﬂection and the ability to dynamically load
classes at runtime. This means that classes can be developed
and then plugged in to the simulator simply by editing the
simulator’s conﬁguration ﬁle, reducing development time be-
cause the developer does not have to register newly developed
classes anywhere or recompile any of the simulator’s code
base. If the new class inherits from the correct parent and
compiles, then it can be used.
B. Visualisation
Visualising a simulation is achieved by taking advantage
of event notiﬁcations provided by the Boris framework. The
framework provides a default graphical user interface (GUI)
that controls the simulation being visualised, as well as an
abstract class that developers should inherit from in order
to enable their simulator visualisation class to be embedded
in the Boris GUI [11]. The screenshot of Figure 1 shows
the encapsulating generic frame consisting of a control panel
at the bottom and a menu at the top. The landscape and
information bar is provided by a WSN simulator visualisation
plug-in.
C. Conﬁguring Simulation Runs
The simulator uses standard Java System properties to
manage its conﬁguration. The major beneﬁt of using the
Java properties API is its native support, which allows
conﬁguration to be speciﬁed both in a default ﬁle and on
the command line (through use of the -D argument to java),
Boris also supports the arbitrary inclusion of a properties
Fig. 2. Events captured by a simulation cycle.
Fig. 3. The WSN object model.
The WSN simulator uses a coarse time scale of one packet
transmission interval. Figure 2 shows the events that are
incorporated into one cycle of the WSN simulator.
The WSN simulator extends many of the classes provided
in the net package of the Boris framework. An overview of
the object model and how everything ﬁts together is shown in
Figure 3 and further described in the following subsections.
A. Wireless Nodes
Each node in the network is a separate instance of the
WirelessNode class. This class encapsulates all of a
node’s operation, such as its routing capabilities and send
queue. The node only interacts with the landscape (see
Section III-B) through either its send or receive methods.
This partitioning reﬂects the real life interaction between a
node and its landscape.
In our model each node is identiﬁed by an integer address
and a location, and is comprised of a router, which interfaces
with the routing protocol (described in Section III-G), a
random number generator, which is used to calculate the
back-off, and a number of state variables that keep track of
how many packets have been received, sent and dropped.
B. Landscape Model
Network nodes of a WSN reside in a physical landscape.
The landscape in the WSN simulator is represented by a
conﬁgurable two-dimensional grid of landscape cells and
is responsible for holding all network nodes as well as
processing all transmissions and receptions. Each landscape
cell is deﬁned by the following data:
• its location,
• a reference to a network node if one is present,
• a reference to a sent packet if one has been received,
• the current radio signal state for the location; one of:
1) NO SIGNAL: if no signal is present.
2) GOOD SIGNAL: if the cell has a good signal.
3) BAD SIGNAL: if the cell has a garbled signal.
The WSN model allows the size and dimension of the
landscape to be conﬁgured according to how wide and long
(in landscape cells) the landscape should be and what the
distance between cells should be. This allows ﬂexibility in
the resolution of a landscape.
The simulator has been designed to allow for the possibil-
ity of extensions, including environmental phenomena such
as temperature or humidity (to be recorded by nodes) and
other phenomena that may interact with the radio transmis-
sion model.
C. Radio Footprint Model
Many algorithms have been proposed for calculating the
effect of a radio transmission in a landscape [12], [13], [10].
Some use advanced techniques such as ray-tracing [13] (an
extended application from graphics rendering) while others
use weighted link states [14], where each node is connected
through a virtual wire, and that wire is weighted with a value
reﬂecting the probability of reception. The disadvantages of
ray-tracing techniques are their complexity because intimate
knowledge of the environment is needed, and their execution
speed. Link state techniques on the other hand are fast,
but mobile nodes cause complications because of the effort
required to keep each node’s link weights up to date and
interaction with the nodes’ landscape is also complicated for
the same reasons. In our radio model a radio transmission
is represented by a radio footprint. When a node transmits
a packet, its radio signal propagates in all directions until
the signal fades away and disappears. A radio footprint
is the entire area covered by such a transmission, and is
generally thought to be roughly circular in shape, although
current studies [8], [10] show that this is not the case for
the low power radio transceivers used in sensor network
nodes. The area covered by a radio transmission changes,
mostly proportionally, with the amount of power used for
the transmission.
The WSN simulator uses an abstract class to represent the
footprint of a radio transmission. The class encapsulates a
two-dimensional array of the same scale, though not neces-
sarily size, as the parent landscape and is centered around the
transmitting node. Each cell in the footprint contains one of
three values, NOISE, NO SIGNAL, GOOD SIGNAL indi-
cating the type of radio signal present at that cell position.
A table of reception probabilities is used to generate a
transmission footprint when a node wishes to send. For a
given distance from the sender, the table deﬁnes the average
percentage of packets which are received at this distance.
Table I shows the percentages used in this paper, which
are derived from experiments using 110 Rene motes [15],
[16]. The table covers reception at distances 1 to 12 cell
1 simulation cycle =~ 50 millisecondsListeningSenderReceiverSendingReceptionCarrier SenseProcessingPropagation DelayPERCENTAGE OF PACKETS RECEIVED VS DISTANCE FOR DIFFERENT
RADIO FOOTPRINTS IN A LANDSCAPE.
TABLE I
TABLE II
TRANSMISSION POWERS
Distance
(2 ft unit)
1
2
3
4
5
6
7
8
9
10
11
12
Very
Low
70
63
50
22
5
0
0
0
0
0
0
0
Low Medium High
76
71
67
54