# Profiling the End Host

**Authors:**
- Thomas Karagiannis<sup>1</sup>
- Konstantina Papagiannaki<sup>2</sup>
- Nina Taft<sup>2</sup>
- Michalis Faloutsos<sup>3</sup>

**Affiliations:**
- 1. Microsoft Research
- 2. Intel Research
- 3. UC Riverside

## Abstract
Profiling has emerged as a valuable tool for various diagnostic and security applications. However, existing profiles often focus narrowly on specific data or applications. In this paper, we aim to design general end-host profiles that can capture and represent a wide range of user activities and behaviors. We introduce a novel methodology that uses a graph-based structure to represent and distill flow-level information at the transport layer. Additionally, we develop mechanisms to summarize the information and adaptively evolve it over time. Our initial study using real user data demonstrates that our method generates a compact, robust, and intuitive description of user behavior.

## 1. Introduction
Profiling a behavior involves observing measured data and extracting information that is representative of the behavior or usage patterns. Profiling is useful for developing models of behavior and deriving guidelines for what is normal and abnormal in a given context. Examples of successful profiling include traffic pattern analysis on server links to detect DoS and flash crowd events, web-server profiling, power usage profiles for efficient power management, and profiling end-to-end paths to detect performance problems.

While there has been significant research on profiling web server traffic and highly aggregated gateway and backbone links, end-host profiling has received less attention. One notable work in this area focuses on building end-host profiles to defend against worm attacks. We believe that observing host behavior at the transport layer can reveal valuable information, such as the hosts an end-system interacts with, the mix of applications used, the dispersion of destinations contacted, and the evolving mix of protocol usage. Many security applications have identified specific features from packet header fields as useful for detecting attacks. For example, some Intrusion Detection Systems (IDS) declare a machine compromised if the number of simultaneous TCP connections exceeds a predefined threshold.

In this work, we aim to formalize the concept of profiling transport-layer information and identify desirable properties. A profiling mechanism focused on end-hosts should meet the following goals:
- **Goal 1:** Identify dominant and persistent behaviors of the end-system, capturing repeatable behaviors over time.
- **Goal 2:** Provide a compact representation, avoiding excess detail that may correspond to ephemeral behavior.
- **Goal 3:** Be stable over short-time scales, avoiding transient variability in host behavior.
- **Goal 4:** Evolve by adding new behaviors and removing stale ones.
- **Goal 5:** Capture historical information to illustrate typical ranges of values for features.

Our main contribution is a novel approach to profile end-host systems based on their transport-layer behavior. We propose the use of a graph-based structure called a "graphlet" to capture interactions among transport-layer protocols, destination IP addresses, and port numbers. Graphlets are extensible and provide intuitive and interpretable information. We extend the original idea of graphlets introduced in [5] for application classification. Our two-step method involves building and continuously updating activity graphlets to capture all current flow activity, and then compressing these graphlets to retain essential information while evolving them over time. The output of this process is called a "profile graphlet."

Using enterprise network traces, we find that our profiles successfully capture approximately 70-90% of all user activity while being 80-90% smaller in size compared to uncompressed activity graphlets. This result demonstrates that our profiles are efficient and compact while remaining highly descriptive. Our initial findings indicate that profiles can vary significantly across users, motivating the use of end-host profiles for security, diagnosis, and classification applications. Over short time scales (e.g., 15 minutes), profiles evolve slowly, experiencing small changes, but over longer periods (e.g., a month), the majority of the profile content may change, underscoring the need for adaptivity.

## 2. Data Description
We collected packet header traces within a secure enterprise network environment using the CoMo monitoring tool. Two traces were collected: one spanning the entire month of October 2005 and the other a two-week period in November 2005. We monitored the traffic of approximately 200 distinct internal IP addresses, representing user laptops, desktops, and network infrastructure equipment (e.g., NFS or DNS servers).

## 3. Methodology

### 3.1 Capturing Host Activity via Graphs
A fundamental element of our profiling methodology is the special-purpose graph called a "graphlet." The concept of graphlets was first introduced by the BLINC methodology to capture the distinct transport-layer footprint of different applications, termed "application graphlets." Our use of graphlets is significantly different from the original BLINC work. We extend the definition of a graphlet, introduce graphlet annotations, and manipulate the graphlet in various ways (learning, updating, compacting, etc.).

A graphlet is a graph arranged in six columns corresponding to: (srcIP, protocol, dstIP, srcport, dstport, dstIP). Each graphlet node represents a distinct entity (e.g., port number 80) from the set of possible entities in the corresponding column. The lines connecting nodes imply that there exists at least one flow whose packets contain the specific nodes. Each flow creates a directed graphlet path starting from the host IP address on the left and traversing the appropriate entities in each column. The destination IP appears twice in the graphlet, allowing us to observe all pairwise interactions between the most information-heavy fields: destination IP address, source port, and destination port.

If many flows traverse a node, the node will likely have a high degree. By construction, all edges in a graphlet are between nodes of adjacent columns. Traversing a graphlet from left to right defines a direction, allowing us to define the in-degree (out-degree) of a node as the number of edges on the left (right) side of the node. The in- and out-degree of a dstIP, srcport, or dstport node abstracts its interaction with the other two types of nodes. For example, the out-degree of a node representing port 80 captures the dispersion of addresses visited using web applications.

Since we are building profiles for a single host, there is only one source IP address, and this field is not included in the "heavy information fields" of the 5-tuple. A graphlet is a directed graph. When the host is the source, the directed edges flow from left to right. If the directed edges flow from right to left, the host is the recipient of incoming flows. Although conceptually each profile consists of two directed graphs, a single data structure can be designed to capture all the needed information.

Figure 1 presents an "activity" graphlet resulting from observing all incoming and outgoing flows of a host during a specific time window. The "profile" graphlet is our distilled and compact version of the activity graphlet.

### 3.2 Advantages of Graphlet Profiling
Graphlets offer several advantages for end-host profiling:
- **Compact Representation:** Instead of keeping per-host flow records, which can be an enormous amount of information, our graphlet achieves a compact representation of important information, limiting redundancy.
- **Interpretable Information:** While flow records require further processing to be interpretable, the paths, nodes, and node properties in graphlets are easy to interpret.
- **Temporal Annotations:** We can expand graphlets to annotate nodes with temporal information, creating time series data for each node (e.g., the time series of the out-degree). This is equivalent to tracking the evolution of the weights. Similarly, we can attach weights to links in the graph to track features like the number of packets or bytes for all flows transiting that path.

We illustrate the power of this profiling mechanism with three examples:
- **Out-degree of the TCP Node:** Reveals the typical number of TCP destination IPs per client. Observing how the out-degree of the TCP node evolves over time helps us learn about the typical range for the number of simultaneous destinations contacted through TCP within a window of time. Figure 2 (left) presents a histogram of the average out-degree of the TCP node for all our client graphlets every 15 minutes, showing a wide range of behavior.
- **Out-degree of the "Port 80" Node:** For applications with well-known port numbers, graphlets can reveal the typical number of destination IPs contacted for each application. Examining the out-degree of the graphlet node for destination "port 80" reveals the number of destinations typically contacted by an HTTP application. Figure 2 (right) presents a histogram of the average out-degree of the "port-80" node for all our client graphlets computed every 15 minutes.

### 3.3 Constructing the Profile
Our method for constructing the profile involves the following steps:
1. **Update Activity Graphlet:** Upon the arrival of each packet, update the activity graphlet if the flow information is not already included.
2. **Every t Minutes:**
   - **Identify New Significant Activity:** According to the summarization policy, identify new significant activity as a candidate to join the profile graphlet.
   - **Add New Significant Activity:** Add new significant activity into the profile, if approved by the delayed-accept policy, using Algorithm 1.
   - **Remove Stale Parts:** Remove stale parts of the profile according to the aging policy.

**Algorithm 1: Populate Profile Graphlet with Significant Nodes**
1. **Rank All Nodes:** Rank all nodes in the activity graphlet according to their maximum in-degree or out-degree: `max{indegree, outdegree}`.
2. **Remove and Insert:** Remove the highest degree node and all its edges. Insert it into the profile graphlet.
3. **Repeat:** Repeat until all significant nodes are processed.

This method ensures that the profile graphlet remains compact, robust, and up-to-date, providing a comprehensive and intuitive representation of end-host behavior.