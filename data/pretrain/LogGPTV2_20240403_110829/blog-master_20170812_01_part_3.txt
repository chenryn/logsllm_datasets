```  
checkpoint;  
select pg_switch_wal();  
checkpoint;  
select pg_switch_wal();  
```  
8、检查归档已正常  
确保打快照过程中产生的WAL全部归档成功。  
9、生成每个测试表的CHECKSUM  
```  
do language plpgsql $$  
declare  
  n name;  
  res int8;  
begin  
  for n in select tablename from pg_tables where schemaname='public'    
  loop  
    execute 'select sum(hashtext(t.*::text)) from '||n||' t' into res;  
    raise notice 'checksum %: %', n, res;  
  end loop;  
end;  
$$;  
NOTICE:  checksum pgbench_history: -422046586146  
NOTICE:  checksum pgbench_tellers: 215006661683  
NOTICE:  checksum pgbench_branches: 158568443210  
......  
```  
## 基于云盘镜像的恢复  
实际上PostgreSQL本身已支持增量备份、块级增量备份的功能，但是既然有云盘快照，可以只备归档和云盘镜像，数据少走一次网络开销。  
基于PG本身的备份也简单介绍一下，见本文参考部分。  
### 恢复过程  
1、创建新ECS（可以根据镜像创建）  
2、如果根据数据库ECS镜像创建，则不需要这一步。  
部署postgresql软件，注意需要与主库软件、插件等一致。  
3、根据云盘快照创建云盘  
4、复原逻辑卷  
```  
pvscan  
vgscan  
lvscan  
```  
5、检查文件系统  
```  
fsck.ext4 -y /dev/mapper/vgdata01-lv01  
```  
6、加载文件系统  
```  
mount -o defaults,noatime,nodiratime,nodelalloc,barrier=1,data=ordered LABEL=lv01 /data01  
```  
7、清理WAL文件，（因为是多盘快照，快照不可能在同一时间点，因此WAL文件可能出现partial write。wal文件是恢复数据文件的关键，因此必须完整。所以我们从归档来获取WAL。）。  
```  
rm -f $PGDATA/pg_wal/*  
```  
注意，如果是单盘，可以只删除最后一个WAL。  
8、配置恢复  
```  
cp $PGHOME/share/recovery.conf.sample $PGDATA/recovery.conf  
vi $PGDATA/recovery.conf     # (auto copy archive to $PGDATA/pg_wal)  
restore_command = 'cp /archivedir/%f %p'           # e.g. 'cp /mnt/server/archivedir/%f %p'  
standby_mode = on  
```  
9、启动数据库  
```  
pg_ctl start  
```  
10、等待恢复完成，恢复完成即恢复到最后一个已归档的WAL文件。  
11、激活数据库  
```  
pg_ctl promote  
```  
12、检查CHECKSUM  
```  
do language plpgsql $$  
declare  
  n name;  
  res int8;  
begin  
  for n in select tablename from pg_tables where schemaname='public'    
  loop  
    execute 'select sum(hashtext(t.*::text)) from '||n||' t' into res;  
    raise notice 'checksum %: %', n, res;  
  end loop;  
end;  
$$;  
```  
13、检查所有数据块是否正常。  
```  
set vacuum_freeze_min_age =0;  
vacuum freeze;  
```  
## 小结
1、PostgreSQL 具备WAL和FULL PAGE WRITE，可以实现数据文件的不一致恢复，也就是说备份时的数据文件partial write可以被检查点后的wal full page write PAGE修复。最终实现一致性。   
2、多块云盘并行备份，提高了数据备份的速度。   
3、多块云盘，提升了整体的读写IOPS和读写带宽。  
4、PostgreSQL 通过组提交、异步提交、数据文件异步写，解决了云盘单次IO延迟较本地延迟更高一点的性能问题。也就是说对IO延迟不敏感。   
5、PostgreSQL 利用多核并行，可以在单条SQL中，充分利用多块云盘带来的高IOPS和高读写带宽的能力。  
6、通过逻辑卷、软RADI、ZFS等手段，可以充分利用多云盘的能力。   
## 参考  
1、[《PostgreSQL on Linux 最佳部署手册》](../201611/20161121_01.md)    
2、zfs  
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)验证 - recovery test script for zfs snapshot clone + postgresql stream replication + archive》](../201608/20160823_09.md)    
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)双机HA与块级备份部署》](../201608/20160823_08.md)    
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)单个数据库采用多个zfs卷(如表空间)时如何一致性备份》](../201608/20160823_07.md)    
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)备份集自动校验》](../201608/20160823_06.md)    
[《PostgreSQL 最佳实践 - 块级增量备份(ZFS篇)方案与实战》](../201608/20160823_05.md)   
3、man lvm  
4、man mdadm  
5、备份原理  
[《PostgreSQL 最佳实践 - 块级别增量备份(pg_rman baseon LSN)源码浅析与使用》](../201608/20160826_01.md)    
6、时间点恢复原理与最佳实践  
[《PostgreSQL 最佳实践 - 任意时间点恢复源码分析》](../201608/20160823_04.md)    
[《PostgreSQL 最佳实践 - 在线增量备份与任意时间点恢复》](../201608/20160823_03.md)    
7、https://github.com/pgbackrest/pgbackrest  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")