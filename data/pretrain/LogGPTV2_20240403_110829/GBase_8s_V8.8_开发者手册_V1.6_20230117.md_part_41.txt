SQL_DESC_CONCISE_TYPE 字段的类型标识符。若为
SQL_C_DEFAULT，驱动根据源的SQL 数据类型选择缺省的
数据类型。
TargetValuePtr 输出参数：指向返回数据所在缓冲区的指针。
BufferLength TargetValuePtr所指向缓冲区的长度。
南大通用数据技术股份有限公司
260
GBase 8s V8.8开发者手册
StrLen_or_IndPtr 输出参数：指向缓冲区的指针，在此缓冲区中返回长度或标识
符的值。
返回值
 SQL_SUCCESS：表示调用正确。
 SQL_SUCCESS_WITH_INFO：表示会有一些警告信息。
 SQL_ERROR：表示比较严重的错误，如：内存分配失败、建立连接失败等。
 SQL_NO_DATA：表示SQL语句不返回结果集。
 SQL_INVALID_HANDLE：表示调用无效句柄。其他API的返回值同理。
 SQL_STILL_EXECUTING：表示语句正在执行。
注意事项
当调用SQLGetData 函数返回SQL_ERROR 或 SQL_SUCCESS_WITH_INFO 时，通过
调 用 SQLGetDiagRec 函 数 ， 并 将 HandleType 和 Handle 参 数 分 别 设 置 为
SQL_HANDLE_STMT 和 StatementHandle，可得到一个相关的 SQLSTATE 值，通过
SQLSTATE值可以查出调用此函数的具体信息。
示例
参见8.2.23 示例。
8.2.19 SQLGetDiagRec
功能描述
返回诊断记录的多个字段的当前值，其中诊断记录包含错误、警告及状态信息。
原型
SQLRETURNSQLGetDiagRec(SQLSMALLINTHandleType,
SQLHANDLE Handle,
SQLSMALLINTRecNumber,
SQLCHAR *SQLState,
SQLINTEGER *NativeErrorPtr,
SQLCHAR *MessageText,
SQLSMALLINT BufferLength,
SQLSMALLINT*TextLengthPtr);
参数
南大通用数据技术股份有限公司
261
GBase 8s V8.8开发者手册
表 8-28SQLGetDiagRec 参数
关键字 参数说明
HandleType 句柄类型标识符，它说明诊断所要求的句柄类型。必须为下列
值之一：
 SQL_HANDLE_ENV
 SQL_HANDLE_DBC
 SQL_HANDLE_STMT
 SQL_HANDLE_DESC
Handle 诊断数据结构的句柄，其类型由 HandleType 来指出。如果
HandleType是SQL_HANDLE_ENV，Handle可以是共享的或
非共享 的环境句柄。
RecNumber 指出应用从查找信息的状态记录。状态记录从1开始编号。
NativeErrorPtr 输出参数：指向缓冲区的指针，该缓冲区存储着本地的错误码。
MessageText 指向缓冲区的指针，该缓冲区存储着诊断信息文本串。
BufferLength MessageText的长度。
TextLengthPtr 输出参数：指向缓冲区的指针，返回MessageText中的字节总
数。如果返回字节数大于BufferLength，则MessageText中的
诊断信息文本被截断成BufferLength减去NULL结尾字符的长
度。
返回值
 SQL_SUCCESS：表示调用正确。
 SQL_SUCCESS_WITH_INFO：表示会有一些警告信息。
 SQL_ERROR：表示比较严重的错误，如：内存分配失败、建立连接失败等。
 SQL_INVALID_HANDLE：表示调用无效句柄。其他API的返回值同理。
注意事项
SQLGetDiagRec不返回诊断记录，而是通过以上返回值，来报告执行结果。
当调用ODBC函数返回值为SQL_ERROR或SQL_SUCCESS_WITH_INFO时，可以通
过调用SQLGetDiagRec返回的诊断信息值SQLSTATE，查看失败或警告原因。SQLSTATE
南大通用数据技术股份有限公司
262
GBase 8s V8.8开发者手册
值如下表所示。
表 8-29SQLSTATE值
SQLSATATE 错误 描述
HY000 一般错误 未定义特定的SQLSTATE所产生的一个错误。
HY001 内存分配错误 驱动程序不能分配所需要的内存来支持函数的
执行或完成。
HY008 取消操作 调用 SQLCancel 取消执行语句后，依然在
StatementHandle上调用函数。
HY010 函数系列错误 在为执行中的所有数据参数或列发送数据前就
调用了执行函数。
HY013 内存管理错误 不能处理函数调用，可能由当前内存条件差引
起。
HYT01 连接超时 数据源响应请求之前，连接超时。
IM001 驱动程序不支持此函 调用了 StatementHandle 相关的驱动程序不支持
数 的函数
示例
参见8.2.23 示例。
8.2.20 SQLSetConnectAttr
功能描述
设置控制连接各方面的属性。
原型
SQLRETURNSQLSetConnectAttr(SQLHDBCConnectionHandle,
SQLINTEGERAttribute,
SQLPOINTERValuePtr,SQLINTEGERStringLength);
参数
表 8-30SQLSetConnectAttr 参数
关键字 参数说明
南大通用数据技术股份有限公司
263
GBase 8s V8.8开发者手册
EnvironmentHandle 环境句柄。
Attribute 需设置的环境属性，可为如下值：
 SQL_ATTR_ODBC_VERSION：指定ODBC版本。
 SQL_CONNECTION_POOLING：连接池属性。
 SQL_OUTPUT_NTS：指明驱动器返回字符串的形式。
ValuePtr 指向对应Attribute的值。依赖于Attribute的值，ValuePtr可能
是32位整型值，或为以空结束的字符串。
StringLength 如果 ValuePtr 指向字符串或二进制缓冲区，这个参数是
*ValuePtr长度，如果ValuePtr指向整型，忽略StringLength。
返回值
 SQL_SUCCESS：表示调用正确。
 SQL_SUCCESS_WITH_INFO：表示会有一些警告信息。
 SQL_ERROR：表示比较严重的错误，如：内存分配失败、建立连接失败等。
 SQL_INVALID_HANDLE：表示调用无效句柄。其他API的返回值同理。
注意事项
当SQLSetEnvAttr 的返回值为SQL_ERROR 或SQL_SUCCESS_WITH_INFO 时，通过
借 助 SQL_HANDLE_ENV 的 HandleType 和 EnvironmentHandle 的 Handle ， 调 用
SQLGetDiagRec可得到相关的SQLSTATE值，通过SQLSTATE值可以查出调用此函数的具
体信息。
示例
参见8.2.23 示例。
8.2.21 SQLSetEnvAttr
功能描述
设置控制环境各方面的属性。
原型
SQLRETURNSQLSetEnvAttr(SQLHENV EnvironmentHandle,
SQLINTEGERAttribute,
SQLPOINTERValuePtr,SQLINTEGERStringLength);
南大通用数据技术股份有限公司
264
GBase 8s V8.8开发者手册
参数
表 8-31SQLSetEnvAttr 参数
关键字 参数说明
EnvironmentHandle 环境句柄。
Attribute 需设置的环境属性，可为如下值：
 SQL_ATTR_ODBC_VERSION：指定ODBC版本。
 SQL_CONNECTION_POOLING：连接池属性。
 SQL_OUTPUT_NTS：指明驱动器返回字符串的形式。
ValuePtr 指向对应Attribute的值。依赖于Attribute的值，ValuePtr可能
是32位整型值，或为以空结束的字符串。
StringLength 如果ValuePtr指向字符串或二进制缓冲区，这个参数是
*ValuePtr长度，如果ValuePtr指向整型，忽略StringLength。
返回值
 SQL_SUCCESS：表示调用正确。
 SQL_SUCCESS_WITH_INFO：表示会有一些警告信息。
 SQL_ERROR：表示比较严重的错误，如：内存分配失败、建立连接失败等。
 SQL_INVALID_HANDLE：表示调用无效句柄。其他API的返回值同理。
注意事项
当SQLSetEnvAttr 的返回值为SQL_ERROR 或SQL_SUCCESS_WITH_INFO 时，通过
借 助 SQL_HANDLE_ENV 的 HandleType 和 EnvironmentHandle 的 Handle ， 调 用
SQLGetDiagRec可得到相关的SQLSTATE值，通过SQLSTATE值可以查出调用此函数的具
体信息。
示例
参见8.2.23 示例。
8.2.22 SQLSetStmtAttr
功能描述
设置相关语句的属性。
南大通用数据技术股份有限公司
265
GBase 8s V8.8开发者手册
原型
SQLRETURNSQLSetStmtAttr(SQLHSTMT StatementHandle,
SQLINTEGERAttribute,
SQLPOINTERValuePtr,SQLINTEGERStringLength);
参数
表 8-32SQLSetStmtAttr 参数
关键字 参数说明
StatementHandle 语句句柄。
Attribute 需设置的属性。
ValuePtr 指向对应Attribute的值。依赖于Attribute的值，ValuePtr可能
是
32位无符号整型值，或指向以空结束的字符串，二进制缓冲
区，或者驱动定义值。注意，如果ValuePtr参数是驱动程序指
定值。ValuePtr可能是有符号的整数。
StringLength 如果ValuePtr指向字符串或二进制缓冲区，这个参数是
*ValuePtr长度，如果ValuePtr指向整型，忽略StringLength。
返回值
 SQL_SUCCESS：表示调用正确。
 SQL_SUCCESS_WITH_INFO：表示会有一些警告信息。
 SQL_ERROR：表示比较严重的错误，如：内存分配失败、建立连接失败等。
 SQL_INVALID_HANDLE：表示调用无效句柄。其他API的返回值同理。
注意事项
当SQLSetStmtAttr的返回值为SQL_ERROR或SQL_SUCCESS_WITH_INFO时，通过
借 助 SQL_HANDLE_STMT 的 HandleType 和 StatementHandle 的 Handle ， 调 用
SQLGetDiagRec可得到相关的SQLSTATE值，通过SQLSTATE值可以查出调用此函数的具
体信息。
示例
参见8.2.23 示例。
南大通用数据技术股份有限公司
266
GBase 8s V8.8开发者手册
8.2.23 示例
常用功能示例代码
// 此示例演示如何通过ODBC方式获取GBase8s数据库中的数据。
//DBtest.c(compilewith:libodbc.so)#include
#include#include#ifdefWIN32#include#endif
SQLHENV V_OD_Env; //HandleODBCenvironmentSQLHSTMT V_OD_hstmt;
//HandlestatementSQLHDBC V_OD_hdbc; //Handleconnection
char typename[100];SQLINTEGERvalue=100;
SQLINTEGERV_OD_erg,V_OD_buffer,V_OD_err,V_OD_id;intmain(intargc,char*argv[])
{
//1. 申请环境句柄
V_OD_erg=SQLAllocHandle(SQL_HANDLE_ENV,SQL_NULL_HANDLE,&V_OD_Env);
if((V_OD_erg!=SQL_SUCCESS)&&(V_OD_erg!=SQL_SUCCESS_WITH_INFO))
{
printf("ErrorAllocHandle\n");exit(0);
}
//2. 设置环境属性（版本信息）
SQLSetEnvAttr(V_OD_Env,SQL_ATTR_ODBC_VERSION,(void*)SQL_OV_ODBC3,0);
//3. 申请连接句柄
V_OD_erg=SQLAllocHandle(SQL_HANDLE_DBC,V_OD_Env,&V_OD_hdbc);
if((V_OD_erg!=SQL_SUCCESS)&&(V_OD_erg!=SQL_SUCCESS_WITH_INFO))
{
SQLFreeHandle(SQL_HANDLE_ENV,V_OD_Env);exit(0);
}
//4. 设置连接属性
SQLSetConnectAttr(V_OD_hdbc,SQL_ATTR_AUTOCOMMIT,SQL_AUTOCOMMIT_ON,
0);
//5. 连接数据源，这里的“userName”与“password”分别表示连接数据库的用户名和用
户密码，请根据实际情况修改。
// 如果odbc.ini文件中已经配置了用户名密码，那么这里可以留空（""）；但是不建议这
么做，因为一旦
odbc.ini权限管理不善，将导致数据库用户密码泄露。
V_OD_erg=SQLConnect(V_OD_hdbc,(SQLCHAR*)"gaussdb",SQL_NTS,
(SQLCHAR*)"userName",SQL_NTS,(SQLCHAR*)"password",SQL_NTS);if
((V_OD_erg!=SQL_SUCCESS)&&(V_OD_erg!=SQL_SUCCESS_WITH_INFO))
{
printf("ErrorSQLConnect%d\n",V_OD_erg);SQLFreeHandle(SQL_HANDLE_ENV,
V_OD_Env);exit(0);
}
南大通用数据技术股份有限公司
267
GBase 8s V8.8开发者手册
printf("Connected!\n");
//6. 设置语句属性
SQLSetStmtAttr(V_OD_hstmt,SQL_ATTR_QUERY_TIMEOUT,(SQLPOINTER*)3,0);
//7. 申请语句句柄
SQLAllocHandle(SQL_HANDLE_STMT,V_OD_hdbc,&V_OD_hstmt);
//8. 直接执行SQL语句。
SQLExecDirect(V_OD_hstmt,"droptableIFEXISTScustomer_t1",SQL_NTS);
SQLExecDirect(V_OD_hstmt,"CREATETABLEcustomer_t1(c_customer_skINTEGER,
c_customer_name
VARCHAR(32));",SQL_NTS);
SQLExecDirect(V_OD_hstmt,"insertintocustomer_t1values(25,li)",SQL_NTS);
//9. 准备执行
SQLPrepare(V_OD_hstmt,"insertintocustomer_t1values(?)",SQL_NTS);
//10. 绑定参数
SQLBindParameter(V_OD_hstmt,1,SQL_PARAM_INPUT,SQL_C_SLONG,SQL_INTEGER,
0,0,&value,0,NULL);
//11. 执行准备好的语句
SQLExecute(V_OD_hstmt);
SQLExecDirect(V_OD_hstmt,"selectidfromtesttable",SQL_NTS);
//12. 获取结果集某一列的属性
SQLColAttribute(V_OD_hstmt,1,SQL_DESC_TYPE,typename,100,NULL,NULL);
printf("SQLColAtrribute%s\n",typename);
//13. 绑定结果集
SQLBindCol(V_OD_hstmt,1,SQL_C_SLONG,(SQLPOINTER)&V_OD_buffer,150,
(SQLLEN*)&V_OD_err);
//14. 通过SQLFetch取结果集中数据
V_OD_erg=SQLFetch(V_OD_hstmt);
//15. 通过SQLGetData获取并返回数据。
while(V_OD_erg!=SQL_NO_DATA)
{
SQLGetData(V_OD_hstmt,1,SQL_C_SLONG,(SQLPOINTER)&V_OD_id,0,NULL);
printf("SQLGetData ID=%d\n",V_OD_id);
V_OD_erg=SQLFetch(V_OD_hstmt);
};
printf("Done!\n");
//16. 断开数据源连接并释放句柄资源