### IOTBENCH Test Suite Apps and SAINT Results

#### Table 3: Description of IOTBENCH Test Suite Apps and SAINT’s Results

| **App Category** | **Lifecycle** | **ID/App Name** | **Description** | **Results** |
|------------------|---------------|-----------------|-----------------|-------------|
| Multiple Entry Points | 1 | 1- Multiple Entry Points 1 | The app stores different sensitive data under the same variable name in different functions, and only one piece of data is leaked. | " |
| Multiple Entry Points | 2 | 2- Multiple Entry Points 2 | The app stores different sensitive data under the same variable name in different functions, and more than one piece of data is leaked. | " |
| Field Sensitivity | 3 | 3- State Variable 1 | A state variable in the state object's field stores sensitive data. It is used in different functions and leaked through various sinks. | " |
| Closure | 4 | 4- Leaking via Closure | A variable is tainted with the use of closures. The sensitive data is then leaked via different sinks. | " |
| Reflection | 5 | 5- Call by Reflection 1 | A string is requested via HTTP GET interface, and the string is used to invoke a method. One of the app methods leaks device information. | X |
| Reflection | 6 | 6- Call by Reflection 2 | A string is used to invoke a method via call by reflection. A method leaks the state of a door. | X |
| Reflection | 7 | 7- Call by Reflection 3 | A string is used to invoke a method via call by reflection. A method leaks the mode of a user. | X |
| Device Objects | 8 | 8- Multiple Devices 1 | Various sensitive data is obtained from different devices and leaked via different sinks. | " |
| Device Objects | 9 | 9- Multiple Devices 2 | Sensitive data from various devices is tainted and leaked via different sinks. | " |
| Device Objects | 10 | 10- Multiple Devices 3 | A taint source is obtained from device state and device information and they are leaked via messaging services. | " |
| Permissions | 11 | 11- Implicit 1 | A malicious URL is hard-coded, and device states (implicit permission) are leaked to the hard-coded URL. | O |
| Permissions | 12 | 12- Implicit 2 | A hard-coded phone number leaks the user inputs (implicit permission). | O |
| Permissions | 13 | 13- Explicit | The hub ID (explicit permission) and state variables are leaked to a hard-coded phone number. | O |
| Permissions | 14 | 14- Explicit-Implicit | A phone number is hard-coded to leak device information (implicit permission) and hub ID (explicit permission). | O |
| Multiple Leaks | 15 | 15- Multiple Leaks 1 | Various sensitive data obtained from the state of the devices and user inputs are leaked via the same sink interface. | " |
| Multiple Leaks | 16 | 16- Multiple Leaks 2 | Various sensitive data is obtained from device states and user inputs, and they are leaked via the Internet and messaging sinks. | " |
| Multiple Leaks | 17 | 17- Multiple Leaks 3 | Various sensitive data is obtained from state variables and devices, and they are leaked via more than one hard-coded contact information. | " |
| Side Channel | 18 | 18- Side Channel 1 | A device is misused to leak information (e.g., turning on/turning off a light to signal an adversary). | ! |
| Side Channel | 19 | 19- Side Channel 2 | A device operating in a specific pattern causes other connected devices to trigger malicious activities. | ! |

**Notes:**
- **‡ 19 apps leak 27 pieces of sensitive data.** We provide a comment block in the source code of each app that gives a detailed description of the leaks, including the line number of the leaks and the ground truths.
- **† Results Key:**
  - "= True Positive
  - X = False Positive
  - O = Dynamic analysis required
  - ! = Not considered in attacker model

---

**USENIX Association**
27th USENIX Security Symposium
Page 1703-1704