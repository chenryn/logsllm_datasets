### Using `switch` with Pattern Matching

```csharp
switch (o)
{
    case Square mySquare:
        // o is a Square, and a reference is available in mySquare
        break;
    case Triangle myTriangle:
        // o is a Triangle, and a reference is available in myTriangle
        break;
    default:
        throw new ArgumentException("Variable is not a recognized shape");
}
```

Note that, in both examples (using the `is` operator and the `switch` statement), the scope of the variables created (`myCircle`, `mySquare`, and `myTriangle`) is limited to the code inside the corresponding `if` block or `case` block.

### Case Selectors with `when` Expressions

Case selectors in `switch` statements also support `when` expressions, which you can use to further qualify the conditions under which a `case` is selected. For example, the following `switch` statement shows case selectors that match different sizes of geometric shapes:

```csharp
switch (o)
{
    case Circle myCircle when myCircle.Radius > 10:
        ...
        break;
    case Square mySquare when mySquare.SideLength == 100:
        ...
        break;
    ...
}
```

### Pointers and Unsafe Code

This section is purely for your information and is aimed at developers familiar with C or C++. If you are new to programming, feel free to skip this section.

If you have already written programs in languages such as C or C++, much of the discussion in this chapter concerning object references might be familiar, as both languages have a construct that provides similar functionality: a pointer.

A pointer is a variable that holds the address of, or a reference to, an item in memory (on the heap or the stack). A special syntax is used to identify a variable as a pointer. For example, the following statement declares the variable `pi` as a pointer to an integer:

```csharp
int* pi;
```

Although the variable `pi` is declared as a pointer, it does not actually point anywhere until you initialize it. For example, to use `pi` to point to the integer variable `i`, you can use the following statements and the address-of operator (`&`), which returns the address of a variable:

```csharp
int* pi;
int i = 99;
pi = &i;
```

You can access and modify the value held in the variable `i` through the pointer variable `pi` like this:

```csharp
*pi = 100;
```

This code updates the value of the variable `i` to 100 because `pi` points to the same memory location as the variable `i`.

One of the main problems that developers learning C and C++ encounter is understanding the syntax used by pointers. The `*` operator has at least two meanings (in addition to being the arithmetic multiplication operator), and there is often great confusion about when to use `&` rather than `*`. The other issue with pointers is that it is easy to point somewhere invalid or to forget to point somewhere at all, and then try to reference the data pointed to. The result will be either garbage or a program that fails with an error because the operating system detects an attempt to access an illegal address in memory. There is also a whole range of security flaws in many existing systems resulting from the mismanagement of pointers; some environments (not Windows) fail to enforce checks that a pointer does not refer to memory that belongs to another process, opening up the possibility that confidential data could be compromised.

Reference variables were added to C# to avoid all these problems. If you really want to, you can continue to use pointers in C#, but you must mark the code as `unsafe`. The `unsafe` keyword can be used to mark a block of code or an entire method, as shown here:

```csharp
public static void Main(string[] args)
{
    int x = 99, y = 100;
    unsafe
    {
        swap(&x, &y);
    }
    Console.WriteLine($"x is now {x}, y is now {y}");
}

public static unsafe void swap(int* a, int* b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}
```

When you compile programs containing `unsafe` code, you must specify the "Allow Unsafe Code" option when building the project. To do this, right-click the project in Solution Explorer, click Properties, go to the Build tab, select "Allow Unsafe Code," and then save all changes.

Unsafe code also has implications for how memory is managed. Objects created in `unsafe` code are said to be unmanaged. Although situations that require you to access memory in this way are not common, you might encounter some, especially if you are writing code that needs to perform low-level Windows operations.

You will learn more about the implications of using code that accesses unmanaged memory in Chapter 14.

### Summary

In this chapter, you learned about the important differences between value types, which hold their values directly on the stack, and reference types, which refer indirectly to their objects on the heap. You also learned how to use the `ref` and `out` keywords on method parameters to gain access to the arguments. You saw how assigning a value (such as the `int` 42) to a variable of the `System.Object` class creates a boxed copy of the value on the heap and then causes the `System.Object` variable to refer to this boxed copy. You also saw how assigning a variable of a value type (such as an `int`) from a variable of the `System.Object` class copies (or unboxes) the value in the `System.Object` class to the memory used by the `int`.

### Quick Reference

- **Copy a value type variable**: Simply make the copy. Because the variable is a value type, you will have two copies of the same value. For example:

  ```csharp
  int i = 42;
  int copyi = i;
  ```

- **Copy a reference type variable**: Simply make the copy. Because the variable is a reference type, you will have two references to the same object. For example:

  ```csharp
  Circle c = new Circle(42);
  Circle refc = c;
  ```

- **Declare a variable that can hold a value type or the null value**: Declare the variable by using the `?` modifier with the type. For example:

  ```csharp
  int? i = null;
  ```

- **Pass an argument to a `ref` parameter**: Prefix the argument with the `ref` keyword. This makes the parameter an alias for the actual argument rather than a copy of the argument. The method may change the value of the parameter, and this change is made to the actual argument rather than to a local copy. For example:

  ```csharp
  static void Main()
  {
      int arg = 42;
      doWork(ref arg);
      Console.WriteLine(arg);
  }
  ```

- **Pass an argument to an `out` parameter**: Prefix the argument with the `out` keyword. This makes the parameter an alias for the actual argument rather than a copy of the argument. The method must assign a value to the parameter, and this value is made to the actual argument. For example:

  ```csharp
  static void Main()
  {
      int arg;
      doWork(out arg);
      Console.WriteLine(arg);
  }
  ```

- **Box a value**: Initialize or assign a variable of type `object` with the value. For example:

  ```csharp
  object o = 42;
  ```

- **Unbox a value**: Cast the `object` reference that refers to the boxed value to the type of the value variable. For example:

  ```csharp
  int i = (int)o;
  ```

- **Cast an object safely**: Use the `is` operator to test whether the cast is valid. For example:

  ```csharp
  WrappedInt wi = new WrappedInt();
  object o = wi;
  if (o is WrappedInt temp)
  {
      ...
  }
  ```

  Alternatively, use the `as` operator to perform the cast, and test whether the result is `null`. For example:

  ```csharp
  WrappedInt wi = new WrappedInt();
  object o = wi;
  WrappedInt temp = o as WrappedInt;
  if (temp != null)
  {
      ...
  }
  ```

### Chapter 9: Creating Value Types with Enumerations and Structures

After completing this chapter, you will be able to:

- Declare an enumeration type.
- Create and use an enumeration type.
- Declare a structure type.
- Create and use a structure type.
- Explain the differences in behavior between a structure and a class.

Chapter 8, "Understanding Values and References," covers the two fundamental types that exist in Microsoft Visual C#: value types and reference types. Recall that a value type variable holds its value directly on the stack, whereas a reference type variable holds a reference to an object on the heap. Chapter 7, "Creating and Managing Classes and Objects," demonstrates how to create your own reference types by defining classes. In this chapter, you’ll learn how to create your own value types.

C# supports two kinds of value types: enumerations and structures. We’ll look at each of them in turn.

#### Working with Enumerations

Suppose that you want to represent the seasons of the year in a program. You could use the integers 0, 1, 2, and 3 to represent spring, summer, fall, and winter, respectively. This system would work, but it’s not very intuitive. If you used the integer value 0 in code, it wouldn’t be obvious that a particular 0 represented spring. It also wouldn’t be a very robust solution. For example, if you declare an `int` variable named `season`, there is nothing to stop you from assigning it any legal integer value outside the set 0, 1, 2, or 3. C# offers a better solution. You can create an enumeration (sometimes called an `enum` type) whose values are limited to a set of symbolic names.

##### Declaring an Enumeration

You define an enumeration by using the `enum` keyword, followed by a set of symbols identifying the legal values that the type can have, enclosing them between braces. Here’s how to declare an enumeration named `Season` whose literal values are limited to the symbolic names `Spring`, `Summer`, `Fall`, and `Winter`:

```csharp
enum Season { Spring, Summer, Fall, Winter }
```

##### Using an Enumeration

After you have declared an enumeration, you can use it in the same way you do any other type. If the name of your enumeration is `Season`, you can create variables of type `Season`, fields of type `Season`, and parameters of type `Season`, as shown in this example:

```csharp
enum Season { Spring, Summer, Fall, Winter }

class Example
{
    public void Method(Season parameter) // method parameter example
    {
        Season localVariable; // local variable example
        ...
    }

    private Season currentSeason; // field example
}
```

Before you can read the value of an enumeration variable, it must be assigned a value. You can assign a value that is defined by the enumeration only to an enumeration variable, as is illustrated here:

```csharp
Season colorful = Season.Fall;
Console.WriteLine(colorful); // writes out 'Fall'
```

**Note**: As you can with all value types, you can create a nullable version of an enumeration variable by using the `?` modifier. You can then assign the `null` value, as well as the values defined by the enumeration, to the variable:

```csharp
Season? colorful = null;
```

Notice that you have to write `Season.Fall` rather than just `Fall`. All enumeration literal names are scoped by their enumeration type, which makes it possible for different enumerations to contain literals with the same name. Also, notice that when you display an enumeration variable by using `Console.WriteLine`, the compiler generates code that writes out the name of the literal whose value matches the value of the variable. If needed, you can explicitly convert an enumeration variable to a string that represents its current value by using the built-in `ToString` method that all enumerations automatically contain, as demonstrated in the following example:

```csharp
string name = colorful.ToString();
Console.WriteLine(name); // also writes out 'Fall'
```

Many of the standard operators that you can use on integer variables you can also use on enumeration variables (except the bitwise and shift operators, which are covered in Chapter 16, "Handling Binary Data and Using Indexers"). For example, you can compare two enumeration variables of the same type for equality by using the equality operator (`==`), and you can even perform arithmetic on an enumeration variable—although the result might not always be meaningful!

##### Choosing Enumeration Literal Values

Internally, an enumeration type associates an integer value with each element of the enumeration. By default, the numbering starts at 0 for the first element and goes up in steps of 1. It’s possible to retrieve the underlying integer value of an enumeration variable. To do this, you must cast it to its underlying type. The discussion in Chapter 8 on unboxing instructs that casting a type converts the data from one type to another as long as the conversion is valid and meaningful. The following code example writes out the value 2 and not the word `Fall` (remember, in the `Season` enumeration, `Spring` is 0, `Summer` is 1, `Fall` is 2, and `Winter` is 3):

```csharp
enum Season { Spring, Summer, Fall, Winter }

...

Season colorful = Season.Fall;
Console.WriteLine((int)colorful); // writes out '2'
```

If you prefer, you can associate a specific integer constant (such as 1) with an enumeration literal (such as `Spring`), as in the following example:

```csharp
enum Season { Spring = 1, Summer, Fall, Winter }
```

**Important**: The integer value with which you initialize an enumeration literal must be a compile-time constant value (such as 1).

If you don’t explicitly give an enumeration literal a constant integer value, the compiler gives it a value that is one greater than the value of the previous enumeration literal, except for the very first enumeration literal, to which the compiler gives the default value 0. In the preceding example, the underlying values of `Spring`, `Summer`, `Fall`, and `Winter` are now 1, 2, 3, and 4.

You are allowed to give more than one enumeration literal the same underlying value. For example, in the United Kingdom, fall is referred to as autumn. You can cater to both cultures as follows:

```csharp
enum Season { Spring, Summer, Fall, Autumn = Fall, Winter }
```

##### Choosing an Enumeration’s Underlying Type

When you declare an enumeration, the enumeration literals are given values of type `int`. You can also choose to base your enumeration on a different underlying integer type. For example, to declare that the underlying type for `Season` is a `short` rather than an `int`, you can write this:

```csharp
enum Season : short { Spring, Summer, Fall, Winter }
```

The main reason for using `short` is to save memory; an `int` occupies more memory than a `short`, and if you do not need the entire range of values available to an `int`, using a smaller data type can make sense.

You can base an enumeration on any of the eight integer types: `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, or `ulong`. The values of all the enumeration literals must fit within the range of the chosen base type. For example, if you base an enumeration on the `byte` data type, you can have a maximum of 256 literals (starting at 0).

Now that you know how to declare an enumeration, the next step is to use it. In the following exercise, you will work with a console application to declare and use an enumeration that represents the months of the year.

#### Create and Use an Enumeration

1. Start Microsoft Visual Studio 2017 if it is not already running.
2. Open the `StructsAndEnums` solution, which is located in the `\Microsoft Press\VCSBS\Chapter 9\StructsAndEnums` folder in your Documents folder.
3. In the Code and Text Editor window, display the `Month.cs` file.
   - The source file is empty apart from the declaration of a namespace called `StructsAndEnums` and a `// TODO:` comment.
4. Replace the `// TODO:` comment with the enumeration named `Month` within the `StructsAndEnums` namespace, as shown in bold in the code that follows. This enumeration models the months of the year. The 12 enumeration literals for `Month` are `January` through `December`.

   ```csharp
   namespace StructsAndEnums
   {
       enum Month
       {
           January, February, March, April,
           May, June, July, August,
           September, October, November, December
       }
   }
   ```

5. Display the `Program.cs` file in the Code and Text Editor window.
   - As in the exercises in previous chapters, the `Main` method calls the `doWork` method and traps any exceptions that occur.
6. In the Code and Text Editor window, add a statement to the `doWork` method to declare a variable named `first` of type `Month` and initialize it to `Month.January`. Add another statement to write the value of the `first` variable to the console.

   The `doWork` method should look like this:

   ```csharp
   static void doWork()
   {
       Month first = Month.January;
       Console.WriteLine(first);
   }
   ```

   **Note**: When you type the period following `Month`, Microsoft IntelliSense automatically displays all the values in the `Month` enumeration.
7. On the Debug menu, click Start Without Debugging.
   - Visual Studio 2017 builds and runs the program. Confirm that the word `January` is written to the console.
8. Press Enter to close the program and return to the Visual Studio 2017 programming environment.
9. Add two more statements to the `doWork` method to increment the `first` variable and display its new value to the console, as shown in bold here:

   ```csharp
   static void doWork()
   {
       Month first = Month.January;
       Console.WriteLine(first);
       first++;
       Console.WriteLine(first);
   }
   ```

10. On the Debug menu, click Start Without Debugging.
    - Visual Studio 2017 builds and runs the program. Confirm that the words `January` and `February` are written to the console.