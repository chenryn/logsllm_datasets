## 在PostgreSQL中用线性回归分析linear regression做预测 - 例子2, 预测未来数日某股收盘价   
### 作者        
digoal          
### 日期          
2015-03-05               
### 标签         
PostgreSQL , 线性回归 , 数据预测 , 股价预测                    
----           
## 背景      
请先参考如下文章，了解线性回归的原理，以及PostgreSQL有哪些函数可以支撑线性回归分析。  
[《PostgreSQL aggregate function 2 : Aggregate Functions for Statistics》](../201503/20150303_03.md)  
[《用PostgreSQL了解一些统计学术语以及计算方法和表示方法 - 1》](../201503/20150303_02.md)  
[《在PostgreSQL中用线性回归分析(linear regression) - 实现数据预测》](../201503/20150303_01.md)  
[《PostgreSQL 线性回归 - 股价预测 1》](../201503/20150304_01.md)  
## 正文  
以贵州茅台的历史数据为例, 校验预测误差如下 :   
未来1天的最准  
未来第二天的预测开始误差开始放大, 但是放大还不明显..  
未来第三天,第四天的就有比较大的误差率.  
![pic](20150305_01_pic_001.png)  
将数据导入源表  
插入顺序从旧到新排列. 不要搞反了, 例如  
```  
06/02/2010	13.49	13.49	12.52	13.03	38670320	1571709568.000  
06/03/2010	13.09	13.26	12.69	12.75	27873689	1135419264.000  
06/04/2010	12.63	12.99	12.56	12.77	19305447	775373248.000  
06/07/2010	12.52	13.13	12.43	13.03	24762597	997748928.000  
06/08/2010	12.99	13.02	12.56	12.82	18987054	762023168.000  
06/09/2010	12.87	13.90	12.87	13.36	38510441	1623107328.000  
06/10/2010	13.37	13.51	13.26	13.39	19669987	823111744.000  
06/11/2010	13.46	13.58	13.27	13.37	18622806	783614336.000  
06/17/2010	13.48	13.99	13.29	13.31	25604558	1095663744.000  
06/18/2010	13.13	13.23	12.37	12.57	24897719	996842496.000  
....  
create table orig (id int, x numeric);  
```  
数据转换为  
```  
1, 13.49  
2, 13.09  
,......  
```  
创建样本表  
```  
create table tmp (  
id int,   
x numeric, -- 自变量  
y numeric  -- 因变量  
);  
```  
自变量和因变量的选择很有讲究.  
例如你可以选择昨天的收盘价和今天的开盘价作为自变量和因变量.  
当然也可以做多元的分析, 例如昨天的收盘价, 交易量作为自变量, 今天的开盘价作为因变量.  
等等......  
昨天预测今天的样本数据  
```  
truncate tmp;  
insert into tmp   
  select id,   
  lag(x,1) over(order by id),   
  x from orig;  
```  
生成最近2天预测未来1天的样本数据  
```  
create table tmp1 (like tmp);  
insert into tmp1   
select id,  
x+  
lag(x,1) over(order by id),  
lead(x,1) over(order by id)  
from orig;  
```  
生成最近3天预测未来2天的样本数据  
```  
create table tmp2 (like tmp);  
insert into tmp2   
select id,  
x+  
lag(x,1) over(order by id)+  
lag(x,2) over(order by id),  
lead(x,1) over(order by id)+  
lead(x,2) over(order by id)  
from orig;  
```  
生成最近4天预测未来3天的样本数据  
```  
create table tmp3 (like tmp);  
insert into tmp3   
select id,  
x+  
lag(x,1) over(order by id)+  
lag(x,2) over(order by id)+  
lag(x,3) over(order by id),  
lead(x,1) over(order by id)+  
lead(x,2) over(order by id)+  
lead(x,3) over(order by id)  
from orig;  
```  
生成最近5天预测未来4天的样本数据  
```  
create table tmp4 (like tmp);  
insert into tmp4   
select id,  
x+  
lag(x,1) over(order by id)+  
lag(x,2) over(order by id)+  
lag(x,3) over(order by id)+  
lag(x,4) over(order by id),  
lead(x,1) over(order by id)+  
lead(x,2) over(order by id)+  
lead(x,3) over(order by id)+  
lead(x,4) over(order by id)  
from orig;  
```  
生成预测数据的函数如下  
```  
CREATE OR REPLACE FUNCTION public.check_predict(  
IN v_tbl name,       --  样本表名  
IN OUT ov integer,   --  校验哪条记录, 倒数第?个值的预测值, 不停迭代, 最后计算所有的实际值和预测值的corr, 选择最佳相关?  
OUT v_id int,        --  真实值唯一标识  
OUT r_chkv numeric,  --  真实值, 用于校验  
OUT p_yv numeric,    --  预测值,因变量  
OUT r_xv numeric,    --  自变量,用于预测因变量  
OUT dev numeric,     --  误差  
OUT v_slope numeric, --  斜率  
OUT v_inter numeric, --  截距  
OUT v_r2  numeric,   --  相关性  
OUT sampcnt int      --  获得最大相关度的样本数  
)  