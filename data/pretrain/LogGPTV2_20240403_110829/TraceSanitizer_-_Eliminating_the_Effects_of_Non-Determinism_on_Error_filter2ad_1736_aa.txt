title:TraceSanitizer - Eliminating the Effects of Non-Determinism on Error
Propagation Analysis
author:Habib Saissi and
Stefan Winter and
Oliver Schwahn and
Karthik Pattabiraman and
Neeraj Suri
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
TraceSanitizer – Eliminating the Effects of
Non-determinism on Error Propagation Analysis
Habib Saissi, Stefan Winter, Oliver Schwahn
Karthik Pattabiraman
Neeraj Suri
Technische Universit¨at Darmstadt
{saissi, sw, os}@cs.tu-darmstadt.de
Darmstadt, Germany
The University of British Columbia
Lancaster University
Vancouver, Canada
PI:EMAIL
Lancaster, UK
PI:EMAIL
Abstract—Modern computing systems typically relax execution
determinism, for instance by allowing the CPU scheduler to inter-
leave the execution of several threads. While beneﬁcial for perfor-
mance, execution non-determinism affects programs’ execution
traces and hampers the comparability of repeated executions. We
present TraceSanitizer, a novel approach for execution trace com-
parison in Error Propagation Analyses (EPA) of multi-threaded
programs. TraceSanitizer can identify and compensate for non-
determinisms caused either by dynamic memory allocation or by
non-deterministic scheduling. We formulate a condition under
which TraceSanitizer is guaranteed to achieve a 0% false posi-
tive rate and automate its veriﬁcation using Satisﬁability Modulo
Theory (SMT) solving techniques. TraceSanitizer is comprehen-
sively evaluated using execution traces from the PARSEC and
Phoenix benchmarks. In contrast with other approaches, Trace-
Sanitizer eliminates false positives without increasing the false
negative rate (for a speciﬁc class of programs), with reasonable
performance overheads.
I. INTRODUCTION
To maximize resource utilization and system throughput,
computing systems often relax the determinism of program ex-
ecutions provided it does not affect the program’s functionality.
A prominent example are preemptive CPU schedulers that dy-
namically assign CPUs to executable programs and revoke such
assignments at any point of the programs’ executions. Simi-
larly, dynamic memory allocators, which assign memory to a
program upon request, have the freedom to decide at which
memory address the requested memory region is located.
EPA analyzes how software faults affect program control
and data ﬂow at run time. It has many uses such as error
detector placement [1], [2] and robustness testing [3]. EPA is
typically performed by injecting faults into the program, and
comparing the fault-affected (faulty run) against the fault-free
(golden run) execution traces, i.e., records of which program
instructions have been executed in which order.
Unfortunately, EPA is adversely affected by relaxing execu-
tion determinism [4], [5] as instructions from different threads
can appear in different orders, and referenced memory ad-
dresses may differ. Such deviations between fault-free and
fault-containing traces, which are caused by relaxed execu-
tion determinism, constitute false positives in EPA since they
do not indicate the effects of actual faults, but only occur to
benign execution non-determinism.
Deterministic replay techniques [6] can eliminate the de-
viations due to non-determinism across program executions.
However, they potentially render EPA results invalid, as the
comparison of executions in EPA is not across identical copies
of a program, but across an original and a mutated version.
For example, if CPU schedules are affected by time-intensive
operations introduced by the mutation, enforcing the original
schedule can lead to false conclusions in EPA.
In this paper, we propose an automated technique to per-
form execution trace comparisons for EPA in the presence of
execution non-determinism, without resorting to deterministic
replay-like techniques. We address both memory and schedul-
ing non-determinism and ﬁnd the latter to be signiﬁcantly more
difﬁcult to handle because of possible inter-thread data depen-
dencies, i.e., concurrent accesses to a shared memory object
with at least one write. Furthermore, non-deterministic schedul-
ing decisions directly impact the data values and the instructions
seen by each thread, in the presence of data-dependent instruc-
tions between threads. Therefore, the order in which these
instructions are observed allows deviations of the values and
instructions in the trace, and the number of correct golden runs
for a program grows exponentially with the number of threads
executing data-dependent instructions.
The main insight in our work is that EPA in the presence
of non-determinism, while being very challenging in the gen-
eral case, becomes solvable for a speciﬁc but important class
of programs that satisfy two conditions: (1) exhibit identical
externally observable behavior across repeated executions, and
(2) are not affected by non-deterministic external functions.
The ﬁrst condition excludes both programs with data races
and intentionally non-deterministic programs. For the latter,
reference executions generally cannot serve as an oracle, and
hence no differential testing technique (including EPA) is suited
for these types of programs. Races are more problematic, as
they can result in non-deterministic behavior of intentionally
deterministic programs, i.e., it is difﬁcult to know apriori if a
program meets our postulated condition. To determine whether
a program meets this condition, we introduce an automated test
for data races and order violations based on maximal causality
models [7] derived from a reference execution (Section IV-C3).
The second condition excludes programs that deliberately
make use of non-deterministic external libraries (e.g., random
number generators) because these pose a similar problem as
intentionally non-deterministic programs. Hence, this condition
only imposes an additional constraint on externally determin-
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00025
52
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:30:10 UTC from IEEE Xplore.  Restrictions apply. 
istic programs, i.e., the second condition excludes programs
that process non-deterministic data, but for which this non-
deterministic data has no effect on the program’s externally
observable behavior. A corresponding check could be imple-
mented via a black-listing mechanism for such external calls.
We term programs that satisfy the above conditions to be
pseudo-deterministic, e.g., programs following the MapReduce
paradigm, where a master thread distributes partitioned data
chunks to worker threads that process these chunks identically
and report the results back to the master thread. The worker
threads’ operations are independent since they operate on dis-
joint chunks of data. While the master thread does interact with
the worker threads, this interaction always follows the same pat-
tern leading to the same behavior of each thread. Consequently,
programs that follow this pattern, which is often referred to as
data parallelism (as opposed to task parallelism) or SPMD (sin-
gle program, multiple data), are pseudo-deterministic. SPMD
is considered the dominant style of parallel programming in
NIST’s Dictionary of Algorithms and Data Structures [8], and
has been identiﬁed as the most common pattern in the usage
of parallel libraries [9]. Therefore, we expect many parallel
programs to satisfy the pseudo-deterministic condition.
Prior work on performing EPA for non-deterministic traces
either skips the non-deterministic parts of the trace [10], or
uses statistical properties and likely invariants to capture the
non-determinism [11], [12]. The former techniques may miss
error propagation in important parts of the execution. The latter
techniques are unsound, as they may classify deviations from
the invariants or statistical measures as errors, although they
are legitimate behaviors. To the best of our knowledge, ours
is the ﬁrst technique to perform EPA for (a class of) non-
deterministic programs that is (1) is sound, (2) covers error
propagation in non-deterministic parts of the execution, and
(3) requires neither programmer support nor annotations.
Contributions. We make the following contributions:
• Develop a novel reversibility check based on SMT solv-
ing techniques to reliably identify pseudo-deterministic
programs for which EPA is sound despite relaxed execu-
tion determinism.
• Introduce a trace sanitizing approach for pseudo-
deterministic multi-threaded programs that abstracts away
the non-determinism due to both dynamic memory allo-
cation and non-deterministic scheduling.
• Implement our trace sanitizing algorithm in TraceSani-
tizer, a trace comparison tool for EPA of multi-threaded
programs, and evaluate its effectiveness on a set of ﬁve
widely used benchmarks. We show that TraceSanitizer re-
duces the rate of false positives to 0 % and achieves a high
fault coverage, at a reasonable performance overhead.
that the OS scheduler interposes on the program or the set of
possible programming language constructs that the developer
is allowed to use. The former imposes performance overheads
as the scheduler has less ﬂexibility in ordering the program’s
threads to optimize for performance, while the latter imposes a
burden on the programmer as they need to ensure their program
is free of the “problematic” constructs.
Error Propagation Analysis (EPA). EPA has traditionally
been performed by comparing the faulty execution trace to a
golden run (i.e., fault-free execution) of the program [15], [1].
Most papers in this area assume that a fault-free golden run
trace is deterministic and hence perform a simple line-by-line
comparison of a fault-injected run with the golden run [11].
Unfortunately, this is not the case for multi-threaded programs.
To our knowledge, there have been only three approaches that
have attempted to address the issue of non-deterministic golden
traces for EPA. First, DeLemos et al. [10] used biological se-
quence alignment algorithms to compare non-deterministic
golden traces with faulty executions, effectively skipping the
non-deterministic sections of the trace. The underlying implicit
assumption is that most parts of the trace are deterministic, and
hence skipping the non-deterministic portions is acceptable.
Unfortunately, this need not be the case for multi-threaded pro-
grams as the OS scheduler has considerable freedom to vary the
thread interleaving and memory ordering from one execution
to another. Second, Leeke et al. [11] attempted to characterize
a golden run using statistical techniques such as clustering, and
perform a coarse-grained comparison of the faulty run with
reference to these statistical characteristics. Only if there is a
signiﬁcant deviation in the characteristics do they consider it
as an erroneous execution. However, their approach requires
signiﬁcant manual intervention to annotate the clusters, and
also requires that the system’s outputs conform to well-known
statistical distributions. Further, they may not detect subtle er-
rors that violate the event orderings of the program unless the
errors result in signiﬁcant deviations from the characteristics.
Finally, Chan et al. [12] used dynamic invariants to character-
ize a non-deterministic golden run, and consider any execution
that violates the invariants as an erroneous execution. This ap-
proach is, however, unsound as the invariants are only likely
invariants extracted using Daikon [16].
Unlike such state of the art approaches, our goal is to develop
a sound EPA approach in the presence of non-determinism
arising from multi-threading in programs. We do not attempt
to constrain the set of execution orderings imposed by the
OS scheduler nor do we constrain the language features used
by the programmer. Furthermore, our approach incurs low
performance overheads and requires no programmer effort.
II. RELATED WORK
III. MOTIVATING EXAMPLE
Deterministic Execution. The effects of non-determinism due
to multi-threading can be mitigated through the use of determin-
istic execution. Examples of this approach are Dthreads [13]
and Deterministic Parallel Java (DPJ) [14]. These approaches
work by constraining either the set of possible interleavings
While the performance-driven relaxation of execution deter-
minism does not affect the correctness of a program execution,
it may affect the execution trace recorded from that execution.
In that case, a direct comparison of such non-deterministic
traces for EPA leads to false positives. To illustrate this problem
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:30:10 UTC from IEEE Xplore.  Restrictions apply. 
53
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include 
#include 
int arr[2];
void *inc(void* arg) {
arr[0]++;
pthread_exit(NULL);
}
void *dec(void* arg) {
arr[1]--;
pthread_exit(NULL);
}
void main(int argc, char **argv) {
pthread_t id1, id2;
arr[0] = 3;
arr[1] = 6;
pthread_create(&id1, NULL, inc, NULL);
pthread_create(&id2, NULL, dec, NULL);
pthread_join(id1, 0);
pthread_join(id2, 0);
printf("Result: %d\n", arr[0]+arr[1]);
}
Fig. 1. Example multi-threaded program.
in multi-threaded programs, Figures 1 and 2 show the effects
of memory allocation and thread scheduling non-determinism.
Figure 1 is a typical MapReduce-like program, an important
class of programs that fulﬁlls our ﬁrst deﬁnition criterion of
pseudo-determinism. It deﬁnes a global array arr (line 3) to
store the data to be processed, initializes its contents (lines 14
and 15) and then spawns two threads (lines 17 and 18) that
independently operate on different partitions of the data. The
initial thread waits for the two worker threads to return (lines 19
and 20) before it aggregates the results from their operations
by printing the sum of the array elements (line 21).
Figure 2 depicts two shortened execution traces recorded
from repeated executions of that program. The traces were
recorded using the EPA framework LLFI [17], [18] and con-
tain one line for each executed instruction of the program’s
LLVM intermediate representation (IR). The line starts with
the index of the instruction in the trace. The second number
is a (simpliﬁed) ID of the executing thread, followed by the
instruction’s name, and its return and operand values.
Despite being functionally identical, an EPA on the two
traces would identify them as deviating because of differing
memory addresses, i.e., any number with more than one digit
in Figure 2. Moreover, the different interleaving of instructions
from different threads causes EPA to falsely identify deviations