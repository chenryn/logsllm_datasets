中的一个Java 类的类名，new方法使用Java 的反射机制，实例化了一个Build 类，
其中存放了我们想要输出到屏募上的信息。
剩下的代码看上去都是这种格式的。
self,stdout ,write (*(*] BOARD : ls\n* (bu11d.BOARD))
上面这些代码的作用就只是把设备相关的信息打印出来。
拓展阅读
·Android 开发者网站中“Build”主体的网页位于：http://developer.android.com
reference/android/os/Build.html.
●编写Drozer模块的教程网页位于：https:/github.com/mwrlabs/drozer/wiki/
Writing-a-Module.
3.13编写一个app证书枚举器
在这个实验中，我将告诉你如何编写一个app证书枚举器—它只是以十六进制
数的形式提取app的证书，并把它打印在屏幕上。我拿这做例子的原因是：首先，它
6
---
## Page 113
第3章Android安全评估工具
上展示了你该怎样使用包管理器并提取到这一节中的其他模块没有提取的信息。其
次，当你在所有的app中寻找那些由同一个公钥签名的app时一这种情况很常见，
搞到app的签名可能是很有用的。它也让你能找出那些共享资源并自动分享彼此权限
的app。这一切都是怎么发生的将在下一章里详细讨论。
怎么做.….
1.打开你常用的文本编辑器，输入以下代码。
from drozer,modules Lmport Module, common
from drozer import android
import M2Crypto
import subprocess
from OpenSSL import crypto
class Info (Module, common.Filters, common, PackageManagez) :
name = *Print the Signer certificate for an application*
description - *this module allows you to print the signer x509
rasnoxa*proxpue*uoo d- ogug*qxeo*xe unx = serduex
author = "Keith Makan*
02T = 9ep
1icenSe = "GNU GPL"
path = ["ex", “cert"]
def add_arguments (self, parse) :
oL=droq *auon=[negap *obeoed_*_d_) queumb.xeppe *asxed
Package Name*)
def execute (self, argument.s) :
Lf argument.s ,package == None:
pm = self packageManager ()
for info in pn.getPackage8
(common PackageManager , GET_SIGNATURES) :
self.stdout.write (*[*] certificate info for (%s)\n* 
(Info ,packageName))
self._print_certs (info)
elif arguments.package I= None:
self.stdout,write ("[*) certlficate info for (is)\n" 1
(a.rgument.s -package) )
0bexoed*euoum5.xe) oguobxoego6 *ad = ogut 
common PackageManager ,GET_SIGNATURES)
self._print_certs (info)
eloe 1
8elf.stdout,write (*[1] cannot process
(repz (arguments) ))
95
---
## Page 114
Android安全攻防实战
def _print_certs (self, info) :
sigs - info,signatures[0] .toCharsString()
sigs = sigs + *\n*
temp_oert = open (*/tmp/cert crt*,*w")
end = 2
#converting to DER file
for start in range (0, len (sigs) -2,2) :
temp_cert ,write (chr (int (slgs [start:end) , 16)))
Z=+ puθ
temp_cert , flush ()
( *_wed xao/dus/_) cado  wad“duoq
temp_pem, flush ()
temp_pem,close ()
-α*60sx '±tesuado1) andanoxoeqo *seeooxdqns = qxeqxeo
Inform", *peR*,*In", =/tmp/cert.crt*, *-
outform", *Pex", "
out", */tmp/cert -pem*, *text*])
(*μwad*xao/dwn/) uado = wed duen
pem_cert_string = temp_pem,read ()
temp_pem, c1ose ()
x509cert = crypto.load_certificate
(crypto FILETYPB_PEM, pem_cert_string)
m2crypto_crt - M2Crypto.x509.1oad_cert_string
(pem_oert_string, 1)
self.stdout,vrite("[*] Version : fs\n" §
(x509cert .get_version ()))
self.stdout,vrite(*[*] Issuer : ls\n* $
(se1f ._print_x509Name (x509cert-get_issuer ())))
self.stdout,vrite("[*] Subject : es\n" 
(se1f ._print_x509Name (x509cert.get_subject ())))
self,stdout,vrite(*(*) Algorithm : %s\n" §
(x509cert . get_signature_algorithm () ))
self,stdout,vrite ("[*] NotBefore : &s\n" $
(x509cert , get_notBefore ()))
self.stdout,write (*[*) NotAfter : ba\n" 
(x509cert,get_notAfter()))
self.stdout,write (*[*] Key Length : §s\n" $
(x509cert.get_pubkey() -bits ()))
self.stdout,write (*[*] Public Key : \ngs\n* 8
(self -_print_key (m2crypto_crt)))
self.stdout,write ("\n")
#self.stdout,write (*\nls\n* 4 (certtext))
def _pr.nt_x509tame (self, xname) :
return **,join([*%s=s = 8 (i[0],i[1]) for i in
xname -get_components ()])
96
---
## Page 115
第3章Android安全评估工具
def _print_key(self,m2cert) :
return m2cert-get_pubkey() -get_rsa () .as_pem()
2.把它保存到你保存自建模块的目录中?。如果还没有把它存成一个文件，只
要把文件存到在你的机器上保存自建模块的目录中去就是了。你可以在你的
drozerconsole中执行下面这条命令来安装这个模块。
dz>module instal1[你的模块代码的所在路径]
一切就绪之后，你可以用下面这条命令运行这个模块：
run external.cert.info -p com.google.android.gsf2
你可以在你的屏幕上看到与图3.32这张截图类似的东西。
END PUELIC KET
图 3.32
①详见见上一个实验。—译者注
译者注
97
---
## Page 116
第4章利用app中的漏洞
在这一章里，我们进行以下实验：
。收集logcat 泄露的信息：
·检查网络流量：
。通过activity manager 被动噢探intent；
·攻击service；
。攻击broadcast receiver：
。枚举有漏洞的content provider：
。从有漏洞的content provider中提取数据：
·向content provider中插入数据：
·枚举有 SQL-注入漏洞的 content provider：
。利用可调试的app；
·对app做中间人攻击。
4.1简介
迄今为止，我们已经讨论了一些基本的开发和安全评估工具，甚至还介绍了一
些扩展和定制这些工具的例子。这一章将着重介绍使用这些工具分析androidapp，
以发现漏洞和开发漏洞利用代码的方法。尽管，我们知道app的功能可以是任意的面
Android 开发者的创造力也是近乎无限的，我们也不难发现评估Android app的安全
性肯定会被认为是一门艺术。对你一一个安全审计员、分析师、顾问或业余爱好者，
这就意味着：分析Androidapp的安全性时基本不可能有一种能适用于所有情况的方
法。几乎每一次，你都不得不根据你的创造力和分析力，完成对某个Android app安
全性的具体评估工作。
---
## Page 117
第4章利用app中的漏润
在我们开始正式分析一些app之前，先勾勒出Android app安全问题的梗概，定
义一些目标以及枚举app的受攻击面是很重要的。在下面几节里，我们将讨论app
安全中的一些常见目标，以及有助于达成这些目标的控制手段。讨论app安全的目标
如此重要的原因在于：它让你在分析app安全性的过程中始终保持正确的理念和原
则。同时，它也把审计app安全性，简化为验证这些控制手段存在与否，并想出利用
这些控制手段缺失或使用不当而造成的问题的方法。
那么，说了半天，app安全的目标到底是什么呢？
保护用户的数据
对用户来说非常敏感的数据经常会交给app，比如下面这些例子：
。口令：
·认证令牌；
·联系人：
通信记录：
·敏感服务器的IP地址或域名。
只要愿意，每个app都能把数据缓存下来，而且通常会以数据库、XML文件或
其他文件格式将用户的数据保存下来。它们可以在需要时随意使用任何文件格式或
存储机制。评估这些数据存储的安全等级是不是与正评估和审计的在线或云数据库
及其中数据存储机制的安全等级处于同一个级别是很重要的，特别是当一个app中存
储的信息可能会影响网站或者其他云服务时尤为如此。例如，如果攻击者把从一个
app中拿到的口令去尝试登录云服务，那么他/她马上就能访问真实的云服务。我们再
来看看那些网上银行的app，它们会存储双因子认证证书。它们是怎么存储的？—短
信收件箱吗？完全正确！
app需要强制实行许多控制措施，使得在线数据库中的数据只有app本身可以访
问，其他app，即便是提供这些数据库的 Android 操作系统本身也无法使用。即，这
些控制措施要确保下列属性：
●机密性（Confidentiality）：
·完整性（Integrity）：
。可用性（Availability）;
。不可否认性（Nonrepudiation）：
。可认证性（Authentication）。
我们将在本章稍后部分中讨论如何确保这些控制措施，就现在而言，你需要关
99
---
## Page 118
Android安全攻防实战
注学习的是理解当这些控制措施失效时，将会导致用户面临什么样的风险。
app间的保护（隔离和权限分离）
app是由Android沙箱（sandbox）保护的，这只不过是换一种说法表述“给每个
app都分配一个用户ID，并且使它们只能访问自己的资源”这一做法而已。app隔离
这个故事是和Android的Linux 部分有关的。Android引入了一些它自己的保护机制
来保护app不被其他组件和数据滥用（abuse）。其中最值得注意的是Android 的权限
框架一它运行在应用层，由应用中间件来执行。其运行目的是把Linux的访间控制
机制转换到应用层级，或把应用层的权限映射到Linux访问控制机制上去。说的更实
际些，这意味着：每当app被赋予一个权限，可能就意味着：与之相关联的UID被
分配到一个相应的 GID。例如，与 android.permission.INTERNET这个权限相对应的
是inet 组，则任何被赋予这一权限的 app（的UID）都会被放到inet 组里去。
app 通常都是由许多 app 组件（service，content provider，activity 和 broadcast
rcceiver）的类实例组成的。为了保护这些组件免受任何设计时没考虑的问题的有害
影响，改进方法是：app的开发者在传递和降低他们的 app 的安全风险时，引入把用
户和他们要访问的服务和数据关联起来的做法。app的开发者也需要关心这些资源的
完整性。权限框架强制执行了这两个安全编程原则，以确保app只会请求必要的权限，
同时也不会过度申请权限。其关键在于确保开发者实施最低权限原则。把恶意app
可能造成的破坏局限在尽可能小的范围内的方法是：确保访问给定app的组件和数据
必须拥有正确的权限，而且只有必要的服务和组件才能完全访问系统中的其他资源，
也就是说，不到方不得已，不要导出组件。
在分析一个app的数据和组件的隔离程度时，很重要的一点是：考虑访问它们所
需的权限。获得这些权限方便吗？访问一个给定的组件所需的权限是否被赋予了正
确的保护级别？一个坏例子是：赋予某个能够搜索和提取用户银行对账单的app
android.permission.SEARCH 权限。
保护敏感信息的通信
例如，假设一个app安全地存储了某位用户的数据，可是却允许它和未经授权的部分
通信。要是通信是不安全的，那么数据存储安全也只不过是建在流沙上的宫殿！
通信可以以下列几种方式进行。
·组件间通信：app 经常会需要在其各个组件间，例如在一个broadcast receiver
100
---
## Page 119
第4章利用app中的漏洞
和一个activity之间，发送信息。我们知道，这种通信可以通过intent和 intent
flter来完成，而且intent flter的属性是非排他的。这使得一个未经授权的app
或许能通过多种方式截获这一通信。
·app间通信：app之间的数据传输必须以一种能够防止未被授权的app能对其
进行慕改，拦截或访间的方式进行。
·与其他设备进行通信：app很可能要使用NFC，蓝牙，GMS 或者Wifi 等通信
介质传输敏感数据。app的开发者必须采取适当的防范措施，确保以这种方式
传输的数据的机密性、完整性和不可否认性。
所以在分析一个app是否有通信上的问题时，验证是否使用了下面这几条控制措
施是很重要的：
·在接收和源app之间是不是进行了验证。
·是否采用了访问控制，以防止未经授权的组件/app访问传输的数据或控制通
信流。
所以，希望你能认真地读一下这段引言，深刻领会保证app安全所需的这些控制
手段。因为下面，我将逐个讨论如何验证这些控制手段是否被正确使用了，以及怎
么利用这些控制手段的缺失而导致的问题。
4.2收集logcat泄露的信息
Android app可能由于自身固有的问题，或由于受到有害的影响而泄露敏感的信
息。如果发生了这种情况，它就被称为一个“信息泄露”漏洞。这个实验里，我们
将讨论：如何通过检查Android的logcat（它是被app开发人员用作调试工具的）来
检查一个app是否有泄露敏感信息的潜在可能。我们也会讨论如何利用一个Android
自带的基准测试工具，使logcat的检查工作更有效些。
准备工作
在开始之前，你需要准备下列实验材料。
·安装一个模拟器或一台实体Android设备，并通过Android调试桥（ADB）连上
*Android 调试桥(ADB)
在开始这个实验之前，你应该已经下载和更新了你的Android SDK，并且已经正
确地更新了你的PATH环境变量，或者你应该切换到存放正确的工具/二进制可执行
101
---
## Page 120