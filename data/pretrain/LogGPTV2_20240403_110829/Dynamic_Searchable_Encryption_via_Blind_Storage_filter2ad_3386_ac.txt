using the version number (initialized to 0) and the index number of the block as IV. More precisely, for the ith block D[i], we split it
as vi||B[i] (vi being the version number), and then update B[i] to B[i] ⊕ ΦKΦ (vi||i).
(If the block-size of the PRF is less than the size of the block B[i], then a few lower-order bits of the IV are reserved for use as a
counter, to obtain multiple blocks from the PRF for a single block in D.)
Fig. 3: SCATTERSTORE: A Blind-Storage Scheme (continued on next page)
In our construction, each ﬁle in the blind storage system
is kept in a large array D of encrypted blocks, at positions
indexed by a pseudorandom set. This set is deﬁned by a
short seed and the size of the set: the seed can be used to
generate a (virtually inﬁnite) pseudorandom sequence, and the
size speciﬁes the length of the preﬁx of this sequence that
deﬁnes Sf. In our simpliﬁed construction, the client stores this
information in a data-structure that maps the ﬁle-names to the
descriptor of the pseudorandom set.4
The main security property that we need to ensure is that
the location of the blocks of one ﬁle does not reveal any
information about the blocks of the other ﬁles, or even the
proportion of occupied and free blocks in D.5 However, clearly,
we cannot choose the positions to store blocks of one ﬁle
independent of the blocks of the other ﬁles, since two ﬁles
must not occupy the same block. A naïve solution would be to
4Only the size of the pseudorandom set needs to be stored. The seed for
the set can be derived by applying a (full-domain) pseudorandom function to
the ﬁle-name. See next section.
5This property manifests itself in the simulation based proof of security,
since the simulator will pick the locations of blocks of a ﬁle being accessed
independent of the number and size of ﬁles that are not yet accessed.
use a large D, to reduce the probability that the blocks chosen
for one ﬁle do not overlap with that for any other ﬁle. But
this is problematic, because to reduce the probability of such
a collision to a small quantity (say, negligible in the security
parameter), size of D needs to be enormously larger (i.e., a
super-polynomial factor larger) than the actual amount of data
stored.
We overcome this inherent tension between collision proba-
bility and wasted space as follows. To store a ﬁle f of n blocks,
we choose a pseudorandom subset Sf of not n blocks, but say
(for a typical setting of parameters), 2n blocks. This subset of
2n blocks will be chosen independent of the other ﬁles in the
system (and it is this subset that the server sees when the client
accesses this ﬁle). Within this set we choose a subset (cid:98)Sf ⊆ Sf
of n blocks, where the actual data is stored. The set (cid:98)Sf is of
about (cid:98)Sf (except its size).
course, selected depending on the other blocks used by other
ﬁles, to avoid collisions. However, since the contents of the
blocks are kept encrypted, the server does not learn anything
This, it turns out, allows D to be only a small constant
factor larger than the total data to be stored in the system.
643
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:59:56 UTC from IEEE Xplore.  Restrictions apply. 
as well.
8) Accept as input new contents data(cid:48) encoded as size(cid:48)
empty, combine these blocks together (in increasing order of their indices) to recover the entire contents of the ﬁle, and output it.
6) Some of the blocks indexed by Sf would have already been decrypted in Step 2 above. Decrypt the remaining blocks indexed by Sf,
7) Identify (cid:98)Sf as the set of indices of blocks belonging to the ﬁle being accessed (by checking if their headers match idf). If (cid:98)Sf is not
9) Identify a subset (cid:98)S(cid:48)
are either marked as belonging to idf (i.e., in (cid:98)Sf) or are free.
f ⊆ Sf.
If no such preﬁx exists, or if the ﬁrst of the size(cid:48)
abort; again, by the choice of our parameters, this will happen only with negligible probability.
Note that if size(cid:48)
f as follows. Find the shortest preﬁx of the sequence Λ[σf , (cid:96)] which contains size(cid:48)
f ⊆ Sf of size size(cid:48)
f  κ the client performs
this second access, even if the entire ﬁle happened to ﬁt within
the blocks in S0
f .
The update functionality as we have deﬁned, ﬁts well into
this two-level access. To update a ﬁle idf, ﬁrst the client is
allowed to learn the current size of the ﬁle before providing any
information about the update; this size information is retrieved
after the ﬁrst level of access and returned to the client. (Note
that we could have in fact provided the client with the ﬁrst few
blocks of the current ﬁle too, but for simplicity we omit this
from the speciﬁcation of the functionality.) Next, before the
second level of access, the larger of the current ﬁle size and
updated ﬁle size needs to be known. So at this point, we require
the client to submit the size of the updated ﬁle. Then the size
of the set Sf to be retrieved is deﬁned by the larger of the
current and updated sizes. If this set has more than κ blocks,
the second level of access retrieves the remaining blocks; then,
as in the simpler construction, all the retrieved blocks will be
reencrypted (with a subset of them having updated contents)
and uploaded back on the server.
3) Variations and Enhancements: There are several opti-
mizations and variations to this construction that would be of
interest. We mention a few.
• The time taken for the read operation can be signiﬁcantly
improved as follows. As presented above, in reading ﬁle, the
client retrieves a pseudorandom subset of blocks from the
server, and decrypts all of them. Of these, the blocks that
actually contain data from this ﬁle are identiﬁed from each
block’s header. Since decryption is the most computationally
intensive operation, if we can avoid decrypting the blocks
not belonging to the ﬁle being read, we can speed up
the operation by a constant factor (namely, α, a parameter
discussed later). This is indeed possible by storing the
relevant information in the ﬁrst block of the ﬁle. Note that
we still need to sequentially decrypt a few blocks (for our
choice of parameters, up to four blocks, in expectation)
before the ﬁrst block of the ﬁle is encountered.
• Almost all our operations — especially the computationally
intensive parts involving encryption and decryption — are
“embarrassingly parallel.” For instance, a set of blocks
received from the server can be decrypted in parallel and
assembled together using an array pre-allocated to hold all
the blocks in the ﬁle.
• Our construction can be easily extended to meet a stronger
security requirement, that the server does not learn the kind
of operation (read, write or update) performed by the client
(beyond what it can infer from the access pattern). For
this, we shall use the update operation in place of every