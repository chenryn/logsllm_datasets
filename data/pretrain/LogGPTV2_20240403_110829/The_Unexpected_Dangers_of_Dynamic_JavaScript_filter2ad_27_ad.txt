(cid:3)(cid:15)(cid:13)(cid:10)(cid:17)(cid:22)(cid:1)
(cid:2)(cid:20)(cid:18)(cid:28)(cid:21)(cid:10)(cid:20)(cid:1)
(cid:12)(cid:25)(cid:19)(cid:33)(cid:37)(cid:37)(cid:10)(cid:29)(cid:7)(cid:16)(cid:19)(cid:15)(cid:10)(cid:34)(cid:18)(cid:20)(cid:11)(cid:1)
(cid:10)(cid:34)(cid:18)(cid:20)(cid:11)
(cid:6)(cid:22)(cid:7)(cid:23)(cid:8)(cid:1)(cid:5)(cid:7)(cid:27)(cid:7)(cid:6)(cid:8)(cid:20)(cid:13)(cid:19)(cid:22)(cid:1)
Figure 2: Protection scheme
to the response of an XMLHttpRequest is governed by
the Same-Origin Policy. Hence, third-party sites cannot
request the ﬁle within the user’s authentication context.
As a consequence, attackers cannot access the data con-
tained within this ﬁle. By using Cross-Origin Resource
Sharing (CORS) [28], Web developers are able to selec-
tively grant access to the ﬁle to any third party service
that requires access.
While the attacker is able to include and execute the
static JavaScript ﬁle within his page, the corresponding
code will be executed in the origin of the attacker’s Web
site. Hence, when the script code requests the data ﬁle,
which resides in the origin of the legitimate Web site, the
two origins do not match and hence the Same-Origin Pol-
icy protects the ﬁle’s content from being accessed by the
attacker. If, however, the legitimate site requests the data
ﬁles, the two origins match and thus access is granted.
As the data ﬁle does not contain valid JavaScript code,
it cannot be included and executed by the attacker via the
HTML script tag. To completely avoid this risk, Web
developers can either include a so-called unparseable
cruft to the beginning of ﬁle which causes a compile time
failure or add valid JavaScript that effectively stops exe-
cution during run time, such as an uncatchable exception
(cp. Figure 2) [31].
6 Related Work
Conceptually closest to the attacks presented in Sec-
tion 4.5 is JSON Hijacking, an exploitation technique
initially presented by Grossman in 2006 [9]. In his at-
tack he utilized a cross-domain script include pointing
to a JSON-array resource, which originally was intended
as an end-point for an XMLHttpRequest. Via using a
non-standard redeﬁnition of JavaScript’s object construc-
tor, he was able obtain the content of the user’s GMail
address book. Grossman reported the issue to Google,
where the term Cross-Site Script Inclusion (XSSI) was
coined by Christoph Kern. Kern later mentioned the term
publicly for the ﬁrst time in his book from 2007 [18].
Several other authors later on picked up this term to refer
to slight variations of the attack [27, 31].
At the same time Chess et al. [3] picked up Gross-
man’s technique, slightly generalized it and coined the
term JavaScript Hijacking. Unlike the vulnerabilities in
this paper, these attacks do not target dynamic JavaScript
resources. Instead they use script-tags in combination
with a non-standard JavaScript quirk (that has been re-
moved from all major browsers in the meantime) to leak
data that is encoded in the JSON-array format.
Furthermore, in 2013, Grossman [11] discussed the
idea of utilizing resources which are only accessible by
users that are logged in to determine the logon status of
a user. He also proposed to employ click-jacking attacks
on the user to force him to like the attacker’s Facebook
or Google+ site. In doing so and in comparing the latest
addition to his followers, an attacker could thereby de-
duce the identity of the user currently visiting his web-
site. The idea of determining a user logon status was
picked up by Evans [8], who demonstrated a login or-
acle on myspace.com by including a Cascading Style
Sheet ﬁle from the service which changed certain prop-
erties based on whether the user was logged in or not.
In 2015, Takeshi Terada presented another variation of
the attack that he called Identiﬁer-based XSSI [27]. Ter-
ada used script tags to reference CSV ﬁles from third-
party domains. A CSV ﬁle usually consists of a comma
separated list of alphanumeric words. Under certain cir-
cumstances this list also represents a syntactically correct
list of JavaScript variable declarations. Hence, by refer-
encing such a ﬁle the JavaScript engine will create a set
of global variables named like the values in the CSV ﬁle.
By enumerating all globally accessible variables, Terada
was able leak the contents of the ﬁle.
Other related work has focused on CSS-based history
leakage [13, 10, 14]. Analogously to login state leakage,
retrieval of a user’s history allows an attacker to deduce
that a victim has an account on a given site, hence en-
abling him to start target phishing attacks similar to the
ones we outlined in Section 4.5.3.
Another means of utilizing history leakage was dis-
cussed in 2010 by Wondracek et al. [30], who proposed
a scheme capable of de-anonymizing users based on their
group membership in OSNs. To do so, they utilized the
stolen history of a user to determine the group sites the
user had previously visited. Comparing these to a list
of the members of the corresponding groups allowed the
authors to determine the user’s identity. Recently, for
a poster, Jia et al. [16] discussed the notion of utilizing
USENIX Association  
24th USENIX Security Symposium  733
timing side-channels on the browser cache to ascertain a
user’s geo location.
In 2012, Nikiforakis et al [24] conducted a large-scale
analysis of remote JavaScript, focusing mainly on the po-
tential security issues from including third-party code.
For W2SP 2011, two groups [20, 15] conducted an anal-
ysis of cross-domain policies for Flash, aiming speciﬁ-
cally at determining those domains which allow access
from any domain. Since Flash attaches the cookies for
the target domain to said requests, they discussed attack
scenarios in which a malicious Flash applet is used to
retrieve proprietary information.
In addition to these attacks, Paul Stone demonstrated
another means of stealing sensitive information across
origin boundaries. To do so, he leveraged a timing side
channel, allowing him to leak a framed document pixel
by pixel [26].
7 Outlook
The goal of this paper was to conduct an initial study
into the usage and potential pitfalls of dynamic scripts
in real world applications. Our data set of 150 highly
ranked domains gives a good glimpse into the problems
caused by such scripts. Nevertheless, we believe that a
large-scale study could provide additional key insights
into the severity of the issue. To enable such a study,
an important problem to solve is the automation of the
analysis—starting from fully automated account regis-
tration and ranging to meaningful interaction with the
application. Therefore, implementing such a generic, yet
intelligent crawler and investigating how well it can im-
itate user interaction is a challenging task we leave for
future work. Along with such a broader study, enhance-
ments have to be made to cope with the increased amount
of data. As an example, our Chrome extension could use
advanced comparisons based on syntactical and seman-
tical differences of the JavaScript code rather than based
on content. Since our data set was limited by the fact that
our analysis required manual interaction with the inves-
tigated applications, the need to automate the secondary
analysis steps, i.e., examination of the differences and
veriﬁcation of a vulnerability, did not arise.
Recently, the W3C has proposed a new security mech-
anism called Content Security Policy (CSP), which is a
“declarative policy that lets authors of a web application
inform the client from where the application expects to
load resources” [25]. In its default setting, CSP forbids
the usage of inline scripts and hence, programmers are
compelled to put the code into external scripts. During
our study we noticed that many of these inline scripts
are also generated dynamically and incorporate sensitive
user data. If all these current inline scripts are naively
transformed into dynamic, external script resources, it is
highly likely that the attack surface of this paper’s attacks
will grow considerably.
For instance, Doup´e et al. [4] developed a tool called
deDacota which automatically rewrites applications to
adhere to the CSP paradigms by moving all inline script
code to external scripts. As our work has shown, these
external scripts – if not protected properly – may be in-
cluded by any third-party application and hence might
leak secret data. Therefore, we believe that it is imper-
ative that measures are taken to ensure the secure, yet
ﬂexible client-side access to sensitive data and that the
changing application landscape caused by CSP adoption
is closely monitored. As discussed by Weissbacher et al.,
however, CSP is not yet widely deployed and signiﬁ-
cantly lags behind other security measures [29].
Furthermore, in this paper, we exclusively focused on
dynamic JavaScript that is pulled into the browser via
script-tags. This is not necessarily the only method,
how server generated script content is communicated.
An alternative to script tags is to transport the code
via XMLHttpRequests bodies, which are subsequently
passed to the eval() API. In future work, we plan to
investigate such XMLHttpRequests endpoints in respect
to their susceptibility to attack variants related to this pa-
per’s topic.
Finally, as related work has indicated, internal appli-
cation information, such as the login state of a user, may
also be leaked via images or style sheets. In this case,
the observed effects of a cross-domain element inclusion
manifest themselves through side effects on the DOM
level, as opposed to a footprint in the global script object.
Hence, a systematical further analysis on other classes of
server-side content generation that might enable related
attacks would be a coherent extension of our work.
8 Summary & Conclusion
In this paper, we conducted a study into the prevalence
of a class of vulnerabilities dubbed Cross-Site Script In-
clusion. Whenever a script is generated on the ﬂy and
incorporates user-speciﬁc data in the process, an attacker
is able to include the script to observe its execution be-
havior. By doing so, the attacker can potentially extract
the user-speciﬁc data to learn information which he oth-
erwise wouldn’t be able to know.
To investigate this class of security vulnerabilities, we
developed a browser extension capable of detecting such
scripts. Utilizing this extension, we conducted an empir-
ical study of 150 domains in the Alexa Top 500, aimed
at gaining insights into prevalence and purpose of these
scripts as well as security issues related to the contained
sensitive information.
Our analysis showed that out of these 150 domains, 49
domains utilize server-side JavaScript generation. On 40
734  24th USENIX Security Symposium 
USENIX Association
domains we were able to leak user-speciﬁc data leading
to attacks such as deanonymizing up to full account hi-
jacking. Our practical experiments show that even high-
proﬁle sites are vulnerable to this kind of attacks.
After having demonstrated the severe impact these
ﬂaws can incur, we proposed a secure alternative using
well-known security concepts, namely the Same-Origin
Policy and Cross-Origin Resource Sharing, to thwart the
identiﬁed security issues.
Acknowledgements
The authors would like to thank the anonymous review-
ers for their valued feedback. More over, we want to
thank our shepherd Joseph Bonneau for the support in
getting our paper ready for publication. This work was
in parts supported by the EU Project STREWS (FP7-
318097). The support is gratefully acknowledged.
References
[1] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust
defenses for cross-site request forgery.
In Proceedings of the
15th ACM conference on Computer and communications secu-
rity (2008), ACM, pp. 75–88.
[2] CERT. Advisory ca-2000-02 malicious html tags embedded in
client web requests, February 2000.
[3] CHESS, B., O’NEIL, Y. T., AND WEST,
Java-
[whitepaper], Fortify Software, http:
J.
Script Hijacking.
//www.fortifysoftware.com/servlet/downloads/
public/JavaScript_Hijacking.pdf, March 2007.
[4] DOUP ´E, A., CUI, W., JAKUBOWSKI, M. H., PEINADO, M.,
KRUEGEL, C., AND VIGNA, G. dedacota: toward preventing
server-side xss via automatic code and data separation. In Pro-
ceedings of the 2013 ACM SIGSAC conference on Computer &
communications security (2013), ACM, pp. 1205–1216.
[5] DOWNS, J. S., HOLBROOK, M. B., AND CRANOR, L. F. De-
cision strategies and susceptibility to phishing.
In Proceedings
of the second symposium on Usable privacy and security (2006),
ACM, pp. 79–90.
[6] ECMASCRIPT, E., ASSOCIATION, E. C. M., ET AL. Ec-
mascript language speciﬁcation, 2011.
[7] ELECTRONIC FRONTIER FOUNDATION. Panopticlick – how
unique – and trackable – is your browser?
online,
https://panopticlick.eff.org/about.php, last accessed
2014/05/10.
[8] EVANS, C. Cross-domain leaks of site logins. online, http:
//bit.ly/1lz1HPl, last accessed 2014/05/10.
[9] GROSSMAN, J. Advanced Web Attack Techniques using GMail.
[online], http://jeremiahgrossman.blogspot.de/2006/
01/advanced-web-attack-techniques-using.html, Jan-
uary 2006.
[10] GROSSMAN,
J.
I know where you’ve been.
[online],
http://jeremiahgrossman.blogspot.com/2006/08/
i-know-where-youve-been.html, August 2006.
[11] GROSSMAN, J. The web won’t be safe or secure until we break
it. Communications of the ACM 56, 1 (January 2013), 68–72.
[12] HANSEN, R., AND GROSSMAN, J. Clickjacking. Sec Theory,
Internet Security (2008).
[13] JACKSON, C., BORTZ, A., BONEH, D., AND MITCHELL, J. C.
Protecting Browser State from Web Privacy Attacks. In Proceed-
ings of the 15th ACM World Wide Web Conference (WWW 2006)
(2006).
[14] JAKOBSSON, M., AND STAMM, S.
Invasive Browser Snifﬁng
and Countermeasures. In Proceedings of The 15th annual World
Wide Web Conference (WWW2006) (2006).
[15] JANG, D., VENKATARAMAN, A., SAWKA, G. M., AND
SHACHAM, H. Analyzing the cross-domain policies of ﬂash ap-
plications. In Proceedings of the 5th Workshop on Web (2011),
vol. 2.
[16] JIA, Y., DONGY, X., LIANG, Z., AND SAXENA, P.
I
know where you’ve been: Geo-inference attacks via the
browser cache.
IEEE Security&Privacy 2014, http://www.
ieee-security.org/TC/SP2014/posters/JIAYA.pdf, last
accessed 2014/05/17.
[17] JOHNS, M., AND WINTER, J. Requestrodeo: Client side protec-
tion against session riding. Proceedings of the OWASP Europe
2006 Conference (2006).
[19] KOTOWICZ, K.
[18] KERN, C., KESAVAN, A., AND DASWANI, N. Foundations of
security: what every programmer needs to know. Apress, 2007.
fun and
proﬁt.
online, http://blog.kotowicz.net/2011/10/
stripping-referrer-for-fun-and-profit.html, last ac-
cessed 2014/05/10.
Stripping the
referrer
for
[20] LEKIES, S., JOHNS, M., AND TIGHZERT, W. The state of the
cross-domain nation. In Proceedings of the 5th Workshop on Web
(2011), vol. 2.
[21] MOZILLA.
Inheritance and the prototype chain.
online,
https://developer.mozilla.org/en-US/docs/Web/
JavaScript/Guide/Inheritance_and_the_prototype_
chain, last accessed 2014/05/10.
[22] MOZILLA. Mutationobserver. online, https://developer.
mozilla.org/en-US/docs/Web/API/MutationObserver,
last accessed 2014/05/10.
[23] MOZILLA DEVELOPER NETWORK, AND RUDERMAN, J. Same-
online, https://developer.mozilla.org/
origin policy.
en-US/docs/Web/Security/Same-origin_policy.
[24] NIKIFORAKIS, N.,
INVERNIZZI, L., KAPRAVELOS, A.,
ACKER, S. V., JOOSEN, W., KRUEGEL, C., PIESSENS, F., AND
VIGNA, G. You Are What You Include: Large-scale Evaluation
of Remote JavaScript Inclusions.
In 19th ACM Conference on
Computer and Communications Security (CCS 2012) (2012).
[25] STERNE, B., AND BARTH, A. Content security policy 1.0.
online, http://www.w3.org/TR/2012/CR-CSP-20121115/.
last accessed 2014/05/10.
[26] STONE, P. Pixel perfect timing attacks with html5.
[27] TERADA, T. Identiﬁer based xssi attacks, 2015.
[28] VAN KESTEREN, A., ET AL. Cross-origin resource sharing.
W3C Working Draft WD-cors-20100727 (2010).
[29] WEISSBACHER, M., LAUINGER, T., AND ROBERTSON, W.
Why is csp failing? trends and challenges in csp adoption.
In
Research in Attacks, Intrusions and Defenses. Springer, 2014,
pp. 212–233.
[30] WONDRACEK, G., HOLZ, T., KIRDA, E., AND KRUEGEL, C.
A practical attack to de-anonymize social network users. In Secu-
rity and Privacy (SP), 2010 IEEE Symposium on (2010), IEEE,
pp. 223–238.
[31] ZALEWSKI, M. The Tangled Web: A Guide to Securing Modern
Web Applications. No Starch Press, 2012.
USENIX Association  
24th USENIX Security Symposium  735