title:Protecting Cloud Virtual Machines from Hypervisor and Host Operating
System Exploits
author:Shih-Wei Li and
John S. Koh and
Jason Nieh
Protecting Cloud Virtual Machines from 
Hypervisor and Host Operating System Exploits
Shih-Wei Li, John S. Koh, and Jason Nieh, Columbia University
https://www.usenix.org/conference/usenixsecurity19/presentation/li-shih-wei
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Protecting Cloud Virtual Machines
from Commodity Hypervisor and Host Operating System Exploits
Shih-Wei Li
John S. Koh
Jason Nieh
Department of Computer Science
Columbia University
{shihwei,koh,nieh}@cs.columbia.edu
Abstract
Hypervisors are widely deployed by cloud computing
providers to support virtual machines, but their growing com-
plexity poses a security risk as large codebases contain many
vulnerabilities. We have created HypSec, a new hypervisor
design for retroﬁtting an existing commodity hypervisor using
microkernel principles to reduce its trusted computing base
while protecting the conﬁdentiality and integrity of virtual ma-
chines. HypSec partitions the hypervisor into an untrusted host
that performs most complex hypervisor functionality without
access to virtual machine data, and a trusted core that provides
access control to virtual machine data and performs basic CPU
and memory virtualization. Hardware virtualization support
is used to isolate and protect the trusted core and execute it
at a higher privilege level so it can mediate virtual machine
exceptions and protect VM data in CPU and memory. HypSec
takes an end-to-end approach to securing I/O to simplify its
design, with applications increasingly using secure network
connections in the cloud. We have used HypSec to retroﬁt
KVM, showing how our approach can support a widely-used
full-featured hypervisor integrated with a commodity oper-
ating system. The implementation has a trusted computing
base of only a few thousand lines of code, many orders of
magnitude less than KVM. We show that HypSec protects
the conﬁdentiality and integrity of virtual machines running
unmodiﬁed guest operating systems while only incurring
modest performance overhead for real application workloads.
1 Introduction
The availability of cost-effective, commodity cloud providers
has pushed increasing numbers of companies and users to
move their data and computation off site into virtual machines
(VMs) running on hosts in the cloud. The hypervisor provides
the VM abstraction and has full control of the hardware
resources. Modern hypervisors are often integrated with
a host operating system (OS) kernel to leverage existing
kernel functionality to simplify their implementation and
maintenance effort. For example, KVM [44] is integrated with
Linux and Hyper-V [56] is integrated with Windows. The
result is a huge potential attack surface with access to VM
data in CPU registers, memory, I/O data, and boot images.
The surge in outsourcing of computational resources to the
cloud and away from privately-owned data centers further
exacerbates this security risk of relying on the trustworthiness
of complex and potentially vulnerable hypervisor and host OS
infrastructure. Attackers that successfully exploit hypervisor
vulnerabilities can gain unfettered access to VM data, and
compromise the privacy and integrity of all VMs—an
undesirable outcome for both cloud providers and users.
Recent trends in application design and hardware virtual-
ization support provide an opportunity to revisit hypervisor
design requirements to address this crucial security problem.
First, modern hardware includes virtualization support to
protect and run the hypervisor at a higher privilege level
than VMs, potentially providing new opportunities to
redesign the hypervisor to improve security. Second, due
to greater security awareness because of the Snowden leaks
revealing secret surveillance of large portions of the network
infrastructure [49], applications are increasingly designed to
use end-to-end encryption for I/O channels, including secure
network connections [29, 50] and disk encryption [14]. This is
decreasing the need for hypervisors to themselves secure I/O
channels since applications can do a better job of providing
an end-to-end I/O security solution [68].
Based on these trends, we have created HypSec, a new
hypervisor design for retroﬁtting commodity hypervisors to
signiﬁcantly reduce the code size of their trusted computing
base (TCB) while maintaining their full functionality. The
design employs microkernel principles, but instead of
requiring a clean-slate rewrite from scratch—a difﬁcult task
that limits both functionality and deployment—applies them to
restructure an existing hypervisor with modest modiﬁcations.
HypSec partitions a monolithic hypervisor into a small trusted
core, the corevisor, and a large untrusted host, the hostvisor.
HypSec leverages hardware virtualization support to isolate
and protect the corevisor and execute it at a higher privilege
USENIX Association
28th USENIX Security Symposium    1357
level than the hostvisor. The corevisor enforces access control
to protect data in CPU and memory, but relies on VMs or
applications to use end-to-end encrypted I/O to protect I/O
data, simplifying the corevisor design.
The corevisor has full access to hardware resources, pro-
vides basic CPU and memory virtualization, and mediates all
exceptions and interrupts, ensuring that only a VM and the core-
visor can access the VM’s data in CPU and memory. More com-
plex operations including I/O and interrupt virtualization, and
resource management such as CPU scheduling, memory man-
agement, and device management are delegated to the hostvi-
sor, which can also leverage a host OS. The hostvisor may im-
port or export encrypted VM data from the system to boot VM
images or support hypervisor features such as snapshots and
migration, but otherwise has no access to VM data. HypSec re-
designs the hypervisor to improve security but does not strip it
of functionality. We expect that HypSec can be used to restruc-
ture existing hypervisors by encapsulating much of their code-
base in a hostvisor and augmenting security with a corevisor.
We have implemented a HypSec prototype by retroﬁtting
KVM. Our approach works with existing ARM hardware
virtualization extensions to provide VM conﬁdentiality and
integrity in a full-featured commodity hypervisor with its own
integrated host OS kernel. Our implementation requires only
modest modiﬁcations to Linux and has a TCB of only a few
thousand lines of code (LOC), many orders of magnitude less
than KVM and other commodity hypervisors. HypSec signif-
icantly reduces the TCB of an existing widely-used hypervisor
and improves its security while retaining the same hypervisor
functionality, including multiprocessor, full device I/O, multi-
VM, VM management, and broad ARM hardware support. We
also show that HypSec provides strong security for VMs run-
ning unmodiﬁed guest operating systems while only incurring
modest performance overhead for real application workloads.
2 Assumptions and Threat Model
Assumptions. We assume VMs use end-to-end encrypted
channels to protect their I/O data. We assume hardware
virtualization support and an IOMMU similar to what is
available on x86 and ARM servers in the cloud. We assume
a Trusted Execution Environment (TEE) provided by secure
mode architectures such as ARM TrustZone [7] or a Trusted
Platform Module (TPM) [38] is available for trusted persistent
storage. We assume the hardware, including a hardware
security module if applicable, is bug-free and trustworthy. We
assume the HypSec TCB, the corevisor, does not have any
vulnerabilities and can thus be trusted. Given the corevisor’s
modest size as shown in Section 6.3, it may be possible to
formally verify the codebase. We assume it is computationally
infeasible to perform brute-force attacks on any encrypted VM
data, and any encrypted communication protocols are assumed
to be designed to defend against replay attacks. We assume
the system is initially benign, allowing signatures and keys
to be sealed in the TEE before a compromise of the system.
Threat Model. We consider an attacker with remote access
to a hypervisor and its VMs, including administrators without
physical access to the machine. The attacker’s goal is to com-
promise the conﬁdentiality and integrity of VM data, which
includes: the VM boot image containing the guest kernel bi-
nary, data residing in memory addresses belonging to guests,
guest memory copied to hardware buffers, data on VM disks
or ﬁle systems, and data stored in VM CPU registers. VM
data does not include generic virtual hardware conﬁguration
information, such as the CPU power management status or the
interrupt level being raised. An attacker could exploit bugs in
the hostvisor or control the VM management interface to access
VM data. For example, an attacker could exploit bugs in the
hostvisor to execute arbitrary code or access VM memory from
the VM or hypervisor host. Attackers may also control periph-
erals to perform malicious memory access via direct memory
access (DMA). We consider it out of scope if the entire cloud
provider, who provides the VM infrastructure, is malicious.
A remote attacker does not have physical access to the hard-
ware, so the following attacks are out of scope: physical tam-
pering with the hardware platform, cold boot attacks [31],
memory bus snooping, and physical memory access. These
threats are better handled with on-site security and tamper-
resistant hardware; cloud providers such as Google go to great
lengths to ensure the physical security of their data centers
and restrict physical access even for administrators [28]. We
also do not defend against side-channel attacks in virtualized
environments [39,53,65,93,94], or based on network I/O [10].
This is not unique to HypSec and it is the kernel’s responsibility
to obfuscate such patterns with defenses orthogonal to HypSec.
We assume a VM does not voluntarily reveal its own
sensitive data whether on purpose or by accident. A VM
can be compromised by a remote attacker that exploits
vulnerabilities in the VM. We do not provide security features
to prevent or detect VM vulnerabilities, so a compromised
VM that involuntarily reveals its own data is out of scope.
However, attackers may try to attack other hosted VMs from
a compromised VM for which we provide protection.
3 Design
HypSec introduces a new hypervisor design that reduces the
TCB necessary to protect VM conﬁdentiality and integrity
while retaining full-ﬂedged hypervisor functionality. We
observe that many hypervisor functions can be supported
without any access to VM data. For example, VM CPU
register data is unnecessary for CPU scheduling. Based on this
observation, HypSec leverages microkernel design principles
to split a monolithic hypervisor into two parts, as depicted in
Figure 1: a trusted and privileged corevisor with full access
to VM data, and an untrusted and deprivileged hostvisor
delegated with most hypervisor functionality. Unlike previous
microkernel approaches [1, 13, 51], HypSec is designed
1358    28th USENIX Security Symposium
USENIX Association
exposes a simple API to the hostvisor and interposes on all
hostvisor and VM interactions to ensure secure VM execution
throughout the lifecycle of a VM. The life of a VM begins when
the hostvisor calls the corevisor’s VM CREATE and VM BOOT
calls to safely bootstrap it with a veriﬁed VM image. The
hostvisor is deprivileged and cannot execute VMs. It must call
VM ENTER to request the corevisor to execute a VM. When the
VM exits execution because an interrupt or exception occurs, it
traps to the corevisor, which examines the cause of the exit and
if needed, will return to the hostvisor. The corevisor provides
the IOMMU OPS API to device drivers in the hostvisor for
managing the IOMMU, as discussed in Section 3.3. While
the hostvisor has no access to VM data in CPU or memory,
it may request the corevisor to provide an encrypted copy of
VM data via the GET VM STATE hypercall API. The hostvisor
can use the API to support virtualization features that require
exporting VM data to disk or across the network, such as
swapping VM memory to disk or VM management functions
like VM snapshot and migration. The corevisor only uses
encryption to export VM data. It never uses encryption, only
access control, to protect VM data in CPU or memory.
3.1 Boot and Initialization
Corevisor Boot. HypSec ensures that the trusted corevisor
binary is booted and the bootstrapping code itself is secure.
To ensure only the trusted corevisor binary is booted, HypSec
relies on Uniﬁed Extensible Firmware Interface (UEFI)
ﬁrmware and its signing infrastructure with a hardware root
of trust. The hostvisor and corevisor are linked as a single
HypSec binary which is cryptographically (“digitally”) signed
by the cloud provider, similar to how OS binaries are signed
by vendors like Red Hat or Microsoft. The HypSec binary
is veriﬁed using keys in secure storage provided by the TEE,
guaranteeing that only the signed binary can be loaded.
To ensure the bootstrapping code is secure, HypSec could
implement it in the trusted corevisor, but does not. Bare-metal
hypervisors implement bootstrapping, but this imposes a signif-
icant implementation and maintenance burden. The code must
be manually ported to each different device, making it more
difﬁcult to support a wide range of systems. Instead, HypSec
relies on the hostvisor bootstrapping code to install the corevi-
sor securely at boot time since the hostvisor is initially benign.
At boot time, the hostvisor initially has full control of the sys-
tem to initialize hardware. The hostvisor installs the corevisor
before entering user space; network and serial input services
are not yet available, so remote attackers cannot compromise
the corevisor’s installation. After its installation, the corevisor
gains full control of the hardware and subsequently deprivi-
leges the hostvisor, ensuring the hostvisor can never control the
hardware or access the corevisor’s memory to disable HypSec.
Using information provided at boot time, the corevisor is self-
contained and can operate without any external data structures.
VM Boot. HypSec also guarantees the conﬁdentiality and in-
Figure 1: HypSec Architecture
speciﬁcally to restructure existing hypervisors with modest
modiﬁcations as opposed to requiring a clean-slate redesign.
Splitting the hypervisor this way results in a signiﬁcantly
smaller TCB that is still ﬂexible enough to implement modern
hypervisor features, as discussed in Section 4.
The corevisor is kept small by only performing VM data
access control and hypervisor functions that require full access
to VM data: secure VM boot, CPU virtualization, and page ta-
ble management. With applications increasingly using secure
communication channels to protect I/O data, HypSec takes an
end-to-end approach to simplify its TCB and allows the hostvi-
sor to provide I/O and interrupt virtualization. The hostvisor
also handles other complex functions which do not need ac-
cess to VM data, including resource management such as CPU
scheduling and memory allocation. The hostvisor may even
incorporate a full existing OS kernel to support its features.
HypSec leverages modern hardware virtualization support
in a new way to enforce the hypervisor partitioning. HypSec
runs the corevisor in a higher privileged CPU mode designed
for running hypervisors, giving it full control of hardware, in-
cluding virtualization hardware mechanisms such as nested
page tables (NPTs).1 The corevisor deprivileges the hostvisor
and VM kernel by running them in a less privileged CPU mode.
For example, in HypSec’s implementation using ARM Virtual-
ization Extensions (VE) shown in Figure 3, the corevisor runs
in hypervisor (EL2) mode while the hostvisor and VM kernel
run in a less privileged kernel (EL1) mode. The corevisor inter-
poses on all exceptions and interrupts, enabling it to provide ac-
cess control mechanisms that prevent the hostvisor from access-
ing VM CPU and memory data. For example, the corevisor has
its own memory and uses NPTs to enforce memory isolation be-
tween the hostvisor, VMs, and itself. A compromised hostvisor
or VM can neither control hardware virtualization mechanisms
nor access corevisor memory and thus cannot disable HypSec.
HypSec Interface. As shown in Figure 1, the corevisor
1Intel’s Extended Page Tables or ARM’s stage 2 page tables.
USENIX Association
28th USENIX Security Symposium    1359
HardwareTEESecure Persistent StorageException Vectors1.VM CREATE   4. IOMMU OPS2.VM BOOT      5. GET VM STATE3.VM ENTER     HostvisorCorevisorHost OS KernelVM Exits/InterruptsHypSecAPIIntermediate StateVCPU StateVMFile StorageCloud ServicesKey ManagementVM ProtectionMemoryCPUBootHost StateVM GPR Parameterstegrity of VM data during VM boot and initialization. HypSec
keeps its TCB small by delegating complicated boot processes
to the untrusted hostvisor, and verifying any loaded VM images
in the corevsor before they are run. As shown in Figure 1, when
a new VM is created, the hostvisor participates with the corevi-
sor in a veriﬁed boot process. The hostvisor calls VM CREATE
to request the corevisor to allocate VM state in corevisor
memory, including an NPT and VCPU state, a per virtual CPU
(VCPU) data structure. It then calls VM BOOT to request the
corevisor to authenticate the loaded VM images. If successful,