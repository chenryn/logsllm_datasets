in §3.1 and §3.2. Second, for making use of existing signature sets,
it is easier to write a converter in some high-level scripting language
than to implement it within Bro itself.
Snort’s signatures are comprehensive, free and frequently up-
dated. Therefore, we are particularly interested in converting them
into our signature language. We have written a corresponding Py-
thon script that takes an arbitrary Snort conﬁguration and outputs
signatures in Bro’s syntax. Figure 2 shows an example of such a
conversion.
Figure 2: Example of signature conversion
alert tcp any any -> [a.b.0.0/16,c.d.e.0/24] 80
( msg:"WEB-ATTACKS conf/httpd.conf attempt";
nocase; sid:1373; flow:to_server,established;
content:"conf/httpd.conf"; [...] )
signature sid-1373 {
(a) Snort
ip-proto == tcp
dst-ip == a.b.0.0/16,c.d.e.0/24
dst-port == 80
# The payload below is actually generated in a
# case-insensitive format, which we omit here
# for clarity.
payload /.*conf\/httpd\.conf/
tcp-state established,originator
event "WEB-ATTACKS conf/httpd.conf attempt"
}%
(b) Bro
It turns out to be rather difﬁcult to implement a complete parser
for Snort’s language. As far as we have been able to determine, its
syntax and semantics are not fully documented, and in fact often
only deﬁned by the source code. In addition, due to different inter-
nals of Bro and Snort, it is sometimes not possible to keep the exact
semantics of the signatures. We return to this point in §4.2.
As the example in Figure 2 shows, our signatures are deﬁned by
means of an identiﬁer and a set of attributes. There are two main
types of attributes: (i) conditions and (ii) actions. The conditions
deﬁne when the signature matches, while the actions declare what
to do in the case of a match. Conditions can be further divided into
four types: header, content, dependency, and context.
Header conditions limit the applicability of the signature to a sub-
set of trafﬁc that contains matching packet headers. For TCP, this
match is performed only for the ﬁrst packet of a connection. For
other protocols, it is done on each individual packet.
In general,
header conditions are deﬁned by using a tcpdump-like [33] syntax
(for example, tcp[2:2] == 80 matches TCP trafﬁc with desti-
nation port 80). While this is very ﬂexible, for convenience there
are also some short-cuts (e.g., dst-port == 80).
Content conditions are deﬁned by regular expressions. Again,
we differentiate two kinds of conditions here: ﬁrst, the expression
may be declared with the payload statement, in which case it is
matched against the raw packet payload (reassembled where appli-
cable). Alternatively, it may be preﬁxed with an analyzer-speciﬁc
label, in which case the expression is matched against the data as
extracted by the corresponding analyzer. For example, the HTTP
analyzer decodes requested URIs. So, http /(etc\/(passwd
|shadow)/ matches any request containing either etc/passwd
or etc/shadow.
Signature conditions deﬁne dependencies between signatures.
We have implemented requires-signature, which speciﬁes
another signature that has to match on the same connection ﬁrst,
and requires-reverse-signature, which additionally re-
quires the match to happen for the other direction of the connection.
Both conditions can be negated to match only if another signature
does not match.
Finally, context conditions allow us to pass the match decision
on to various components of Bro. They are only evaluated if all
other conditions have already matched. For example, we have im-
plemented a tcp-state condition that poses restrictions on the
current state of the TCP connection, and eval, which calls an ar-
bitrary script policy function.
If all conditions are met, the actions associated with a signature
are executed: event inserts a signature match event into the
event stream, with the value of the event including the signature
identiﬁer, corresponding connection, and other context. The policy
layer can then analyze the signature match.
3.4 Snort’s Signature Set
Snort comes with a large set of signatures, with 1,273 enabled
by default [2]. Unfortunately, the default conﬁguration turns out to
generate a lot of false positives. In addition, many alerts belong to
failed exploit attempts executed by attackers who scan networks for
vulnerable hosts. As noted above, these are general problems of
signature-based systems.
The process of selectively disabling signatures that are not appli-
cable to the local environment, or “tuning,” takes time, knowledge
and experience. With respect to Snort, a particular problem is that
many of its signatures are too general. For example, Snort’s signa-
ture #1560:
alert tcp $EXTERNAL_NET any
-> $HTTP_SERVERS $HTTP_PORTS
(msg:"WEB-MISC /doc/ access";
uricontent:"/doc/"; flow:to_server,established;
nocase; sid:1560; [...])
searches for the string /doc/ within URIs of HTTP requests.
While this signature is indeed associated with a particular vulner-
ability (CVE-1999-0678 [9]), it only makes sense to use it if you
have detailed knowledge about your site (for example, that there is
no valid document whose path contains the string /doc/). Other-
wise, the probability of a signature match reﬂecting a false alarm
is much higher than that it indicates an attacker exploiting an old
vulnerability.
Another problem with Snort’s default set is the presence of over-
lapping signatures for the same exploit. For example, signatures
#1536, #1537, #1455, and #1456 (the latter is disabled by default)
all search for CVE-2000-0432, but their patterns differ in the
amount of detail. In addition, the vulnerability IDs given in Snort’s
signatures are not always correct. For example, signature #884 ref-
erences CVE-1999-0172 and Buqtraq [6] ID #1187. But the lat-
ter corresponds to CVE-2000-0411.
As already noted, we cannot expect to avoid these limitations
of Snort’s signatures by just using them semantically unmodiﬁed in
Bro. For example, although we convert the Snort’s ﬁxed strings into
Bro’s regular expressions, naturally they still represent ﬁxed sets of
characters. Only manual editing would give us the additional power
of regular expressions. We give an example for such an improve-
ment in §3.5.1.
3.5 The Power of Bro Signatures
In this section, we show several examples to convey the power
provided by our signatures. First, we demonstrate how to deﬁne
more “tight” signatures by using regular expressions. Then, we
show how to identify failed attack attempts by considering the set of
software a particular server is runnning (we call this its vulnerabil-
ity proﬁle and incorporate some ideas from [22] here) as well as the
response of the server. We next demonstrate modelling an attack in
multiple steps to avoid false positives, and ﬁnally show how to use
alert-counting for identifying exploit scans. We note that none of
the presented examples are supported by Snort without extending
its core signiﬁcantly (e.g. by writing new plug-ins).
3.5.1 Using Regular Expressions
Regular expressions allow far more ﬂexibility than ﬁxed strings.
Figure 3 (a) shows a Snort signature for CVE-1999-0172 that
generates a large number of false positives at Saarland University’s
border router. (See §4.1 for a description of the university.) Fig-
ure 3 (b) shows a corresponding Bro signature that uses a regular
expression to identify the exploit more reliably. CVE-1999-0172
describes a vulnerability of the formmail CGI script. If an at-
tacker constructs a string of the form “...; ”
(a | instead of the ; works as well), and passes it on as argument
of the recipient CGI parameter, vulnerable formmails will ex-
ecute the included shell commands. Because CGI parameters can
be given in arbitrary order, the Snort signature has to rely on iden-
tifying the formmail access by its own. But by using a regular
expression, we can explicitly deﬁne that the recipient parame-
ter has to contain a particular character.
Figure 3: Two signatures for CVE-1999-0172
alert tcp any any -> a.b.0.0/16 80
(msg:"WEB-CGI formmail access";
uricontent:"/formmail";
flow:to_server,established;
nocase; sid:884; [...])
(a) Snort using a ﬁxed string
signature formmail-cve-1999-0172 {
ip-proto == tcp
dst-ip == a.b.0.0/16
dst-port = 80
# Again, actually expressed in a
# case-insensitive manner.
http /.*formmail.*\?.*recipient=[ˆ&]*[;|]/
event "formmail shell command"
}
(b) Bro using a regular expression
3.5.2 Vulnerability Proﬁles
Most exploits are aimed at particular software, and usually only
some versions of the software are actually vulnerable. Given
the overwhelming number of alerts a signature-matching NIDS can
generate, we may well take the view that the only attacks of interest
are those that actually have a chance of succeeding. If, for example,
an IIS exploit is tried on a Web server running Apache, one may
not even care. [23] proposes to prioritize alerts based on this kind of
vulnerability information. We call the set of software versions that
a host is running its vulnerability proﬁle. We have implemented this
concept in Bro. By protocol analysis, it collects the proﬁles of hosts
on the network, using version/implementation information that the
analyzer observes. Signatures can then be restricted to certain ver-
sions of particular software.
As a proof of principle, we have implemented vulnerability pro-
ﬁles for HTTP servers (which usually characterize themselves via
the Server header), and for SSH clients and servers (which iden-
tify their speciﬁc versions in the clear during the initial protocol
handshake). We intend to extend the software identiﬁcation to other
protocols.
We aim in future work to extend the notion of developing a pro-
ﬁle beyond just using protocol analysis. We can passively ﬁnger-
print hosts to determine their operating system version information
by observing speciﬁc idiosyncrasies of the header ﬁelds in the trafﬁc
they generate, similar to the probing techniques described in [13], or
we can separately or in addition employ active techniques to explic-
itly map the properties of the site’s hosts and servers [31]. Finally,
in addition to automated techniques, we can implement a conﬁgu-
ration mechanism for manually entering vulnerability proﬁles.
3.5.3 Request/Reply Signatures
Further pursuing the idea to avoid alerts for failed attack attempts,
we can deﬁne signatures that take into account both directions of a
connection. Figure 4 shows an example.
In operational use, we
see a lot of attempts to exploit CVE-2001-0333 to execute the
Windows command interpreter cmd.exe. For a failed attempt, the
server typically answers with a 4xx HTTP reply code, indicating an
error.2 To ignore these failed attempts, we ﬁrst deﬁne one signature,
http-error, that recognizes such replies. Then we deﬁne a sec-
ond signature, cmdexe-success, that matches only if cmd.exe
is contained in the requested URI (case-insensitive) and the server
does not reply with an error. It’s not possible to deﬁne this kind of
signature in Snort, as it lacks the notion of associating both direc-
tions of a connection.
Figure 4: Request/reply signature
signature cmdexe-success {
ip-proto == tcp
dst-port == 80
http /.*[cC][mM][dD]\.[eE][xX][eE]/
event "WEB-IIS cmd.exe success"
requires-signature-opposite ! http-error
tcp-state established
}
signature http-error {
ip-proto == tcp
src-port == 80
payload /.*HTTP\/1\.. *4[0-9][0-9]/
event "HTTP error reply"
tcp-state established
}
2There are other reply codes that reﬂect additional types of errors,
too, which we omit for clarity.
3.5.4 Attacks with Multiple Steps
An example of an attack executed in two steps is the infection
by the Apache/mod ssl worm [7] (also known as Slapper),
released in September 2002. The worm ﬁrst probes a target for
its potential vulnerability by sending a simple HTTP request and
inspecting the response. It turns out that the request it sends is in
fact in violation of the HTTP 1.1 standard [11] (because it does not
include a Host header), and this idiosyncracy provides a somewhat
“tight” signature for detecting a Slapper probe.
If the server identiﬁes itself as Apache, the worm then tries
to exploit an OpenSSL vulnerability on TCP port 443. Figure 5
shows two signatures that only report an alert if these steps are
performed for a destination that runs a vulnerable OpenSSL ver-
sion. The ﬁrst signature, slapper-probe, checks the payload
for the illegal request. If found, the script function is vulnera-
ble to slapper (omitted here due to limited space, see [2]) is
called. Using the vulnerability proﬁle described above, the func-
tion evaluates to true if the destination is known to run Apache
as well as a vulnerable OpenSSL version.3
If so, the signature
matches (depending on the conﬁguration this may or may not gen-
erate an alert by itself). The header conditions of the second sig-
nature, slapper-exploit, match for any SSL connection into
the speciﬁed network. For each, the signature calls the script func-
tion has slapper probed. This function generates a signa-
ture match if slapper-probe has already matched for the same
source/destination pair. Thus, Bro alerts if the combination of prob-
ing for a vulnerable server, plus a potential follow-on exploit of the
vulnerability, has been seen.
Figure 5: Signature for Apache/mod sslworm
signature slapper-probe {
ip-proto == tcp
dst-ip == x.y.0.0/16 # sent to local net
dst-port == 80
payload /.*GET \/ HTTP\/1\.1\x0d\x0a\x0d\x0a/
eval is_vulnerable_to_slapper # call policy fct.
event "Vulner. host possibly probed by Slapper"
}
signature slapper-exploit {