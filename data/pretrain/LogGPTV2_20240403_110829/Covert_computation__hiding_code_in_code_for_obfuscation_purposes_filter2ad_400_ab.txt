the hidden functionality as it is not contained in the basic
semantics of a sequence of instructions, but in some deeper
abstraction layer that is not included in the model.
3.1 Side Effects
In computer science, side eﬀects in general describe any
persistent modiﬁcation of a program’s state or its environ-
ment after executing a basic block, which is a straight block
of instructions with one entry and one exit point. This in-
cludes setting a global variable, writing to the ﬁle system
or accessing auxiliary equipment. Side eﬀects are a funda-
mental prerequisite for a program’s ability to interact with
530the user, the underlying computing system or other pro-
grams. Depending on the programming paradigm, side ef-
fects are more or less frequently used in programming lan-
guages. While in functional programming languages, such as
Haskell, side eﬀects do not exist or are restricted to a min-
imum, imperative programming (e.g., C, Java, and many
others) makes use of side eﬀects more frequently.
While most side eﬀects are intended by the developer and
are an integral part of the functionality (e.g., writing data
to the ﬁle system or interacting with the outside world over
a network connection), some side eﬀects modify states of
the program or the outside world without the developer’s
direct knowledge. The developer has a mental model of in-
structions and its eﬀects, which might not cover the entire
functionality of the instruction. The same applies to a code
analyst and even, in a similar form, to machine-based mal-
ware detection systems. Code is analyzed based on expecta-
tions of what functionality a speciﬁc instruction implements.
This can be the mental model of the human code analyst or
the hardware model that is implemented in the automatic
malware analysis system. Consider the x86 instruction ADD
EAX, EBX. The core functionality, which is expected by the
analyst, is the calculation of the sum of the two operands
EAX and EBX. Thus, the new state of the machine after the
execution of the instruction includes a modiﬁed register EAX
that now holds the sum of the registers EAX and EBX. How-
ever, there is another register that was inﬂuenced by the
ADD instruction. Within the ﬂags register, several bits could
have been modiﬁed by the instruction, depending on the re-
sult of the operation. For example, the Zero ﬂag is set to 1
if the result of the operation is 0.
3.2 Using side effects to hide functionality
Usually, side eﬀects are avoided at an early stage of soft-
ware development (e.g., developers are discouraged from us-
ing global variables heavily), as they could inﬂuence the
program’s state in a way that was not considered by the
developer and cause an unpredictable malfunction of the
program.
In a security context, we have identiﬁed side eﬀects as ex-
cellent vehicles for hiding malicious functionality inside ar-
bitrary program code. The idea of injecting malicious func-
tionality by making program code look harmless is not new.
Winning examples of the Underhanded C Contest 1, an an-
nual contest for writing innocent-looking C code implement-
ing covert malicious behavior, use very subtle techniques for
hosting hidden functionality.
In contrast to that contest,
which is based on the high-level language C, we describe
covert functionality that is tied very closely to the under-
lying hardware, based on side eﬀects in the microprocessor
and implemented at assembly level.
3.3 Flags
Flags in microprocessors are status bits that are used for
indicating states and conditions of diﬀerent operations per-
formed by the microprocessor. For example, most of today’s
architectures such as x86 implement a Zero ﬂag, which is set
when the result of an arithmetic or logical operation is equal
to zero. The value of a ﬂag bit is then used for conditional
jumps and is therefore responsible for modifying the control
ﬂow of a program’s execution.
1http://underhanded.xcott.com (Last accessed February
12th 2013)
In the context of side eﬀects within programs, ﬂags are the
target of side eﬀects. In x86 as well as in many other micro-
processor architectures, most arithmetic and logical opera-
tions inﬂuence at least one bit in the ﬂags register. Flags can
therefore be seen as global variables that are permanently
modiﬁed by instructions. The concept of covert computa-
tion uses ﬂags for basic operations in such a way that the
ﬂags are directly used for performing the calculation and
storing intermediate results by using conditional jumps. In
the following, we show how ﬂags can be used as interme-
diate storage for the calculation of logical operations. This
concept can easily be adopted for arithmetic operations.
In a bitwise logical operation the calculation of the four
diﬀerent possible combinations (00/01/10/11) can be repre-
sented by two conditional jumps. The two input operands
are stored in two arbitrary ﬂags. In a ﬁrst step, the value
of the ﬁrst ﬂag is determined by implementing a conditional
jump, which evaluates this speciﬁc ﬂag. In x86, for example,
the Zero ﬂag can be evaluated with a JZ (jump if zero) or a
JNZ (jump if not zero) instruction. For each case (jump was
performed or not performed), the second phase again im-
plements a conditional jump, thus resulting in four possible
outgoing control ﬂows, each representing one possible result
of the bitwise operation of the values stored in the two ﬂags.
Figure 1 illustrates the approach. The two source values 1
and 0 are stored in the Zero and the Carry ﬂag. Two condi-
tional jumps are implemented to calculate the logical XOR.
The ﬁrst one (JZ) evaluates the value stored in the Zero
ﬂag. For both cases – the jump is either performed or not –
a second conditional jump (JC), which evaluates the carry
ﬂag, is implemented. The control ﬂow of the software now
follows the calculation of a logical XOR, and at each of the
four possible end points of the control ﬂow graph, code can
be implemented that stores the result of the calculation to
some output register.
Figure 1: Calculation of XOR using the Zero and
the Carry ﬂag.
This concept can be extended to the full length of 32-bit
operands very easily by repeating the two jumps for each bit-
wise operation. Other logical operations can be represented
as side eﬀects analogous to the XOR replacement pattern.
3.4 Other side effects in the x86 architecture
Many instructions of the x86 architecture modify the state
of the processor in a way that is not the primary function-
ality of the instruction.
In the following, we exemplarily
describe side eﬀects of the LOOP as well as string instruc-
tions and explain how side eﬀects can be used to emulate
other instructions.
JZJCJCresult0result1zero ﬂag1carry ﬂag0result1result0531LOOP instruction. The LOOP instruction in x86 be-
haves as follows: The value of the counter register (CX/ECX)
is decremented by one. If it contains 0 after this operation,
the loop terminates and execution continues past the LOOP
instruction. Otherwise, a short jump to the relative oﬀset
speciﬁed as the operand to LOOP is taken. While the obvious
behavior of the LOOP instruction is the repeated execution
of one or more instructions, it also can be perform other,
not so obvious functionality. One of the most trivial ways
to repurpose this instruction’s behavior is by using it as a
short JMP or conditional jump. This can be achieved by
ensuring that ECX does not contain 0 (or writing a value
unequal to 0 to ECX if the given condition is met) and in-
stead of using a JMP instruction, writing LOOP .
However, there are far more sophisticated ways to emulate
other given instructions using LOOP. In Listing 1, the stan-
dard SUB instruction is represented using a combination of
LOOP and XCHG.
SUB EAX,200
⇓
MOV ECX,200
XCHG EAX,ECX
LOOP -1
Listing 1: SUB with LOOP instruction
At ﬁrst glance, this loop may seem entirely pointless, sim-
ply exchanging the values of EAX and ECX at every iteration
and decreasing the value of ECX. However, because ECX con-
stantly witches between containing the actual loop counter
and the value of EAX, the latter is actually decremented by
the former until either of them reaches the value 0. Note
that this sequence of commands will not work as intended
if EAX contains a value between 0 and 0x200. A variety of
other instructions can be emulated using LOOP, e.g., MOV
between registers (by moving the target value into ECX and
incrementing the target register’s value at every loop itera-
tion).
String instructions. Another source of side eﬀects in
the x86 architecture are the string instructions. MOVS, SCAS,
CMPS, STOS, and LODS instructions are intended to operate
on continuous blocks of memory instead of single bytes. Be-
cause of the fact that these instructions modify the registers
ESI, EDI, and ECX it is possible to emulate ADD, SUB, INC,
and DEC instruction. An example of a replacement pattern
for the INC instruction is given in Listing 2. The replace-
ment pattern will clobber the value of ESI and is only ap-
plicable if the value of EAX points to a memory location that
is accessible to the program.
INC EAX
⇓
XCHG EAX, ESI
LODS
XCHG EAX, ESI
Listing 2: Arithmetic operations with string
instructions.
4. EVALUATION
In this section we discuss the eﬀectiveness of the concept of
covert computation for obfuscation purposes. We ﬁrst con-
sidered assessing its resilience against commercial malware
detectors by using real malware samples that were modi-
ﬁed to implement some of their functionality in side eﬀects.
However, as pointed out in [12], this type of evaluation would
be of doubtful value. The detection engines of today’s virus
scanners are mainly signature-based, which means that mod-
ifying the binary code would most likely destroy the signa-
ture. It would then come as no surprise to have a detection
rate that was lower than the one for the original binaries. As
this eﬀect can be simply tracked down to the modiﬁcation of
the signature and not to the concept of covert functionality
in the code, it would heavily restrict the signiﬁcance of the
evaluation. Therefore, we decided to focus our evaluation
on the concept of semantic-aware malware detection. We
performed a theoretical analysis to evaluate the resilience of
our approach against Christodorescu et al.’s [3] approach.
For semantic-aware malware detection, the binary program
is disassembled and brought to an architecture-independent
intermediate representation, which is matched against tem-
plates describing malicious behavior.
In order to be able
to detect basic obfuscation methods like register reassign-
ment or instruction reordering (e.g., by inserting jumps in
the control ﬂow graph), so-called def-use chains are utilized.
Furthermore, a value-preservation oracle is implemented for
detecting NOP instructions as well as NOP fragments.
Normalization of intermediate representation. The
approach introduced by Christodorescu et al. [3] is based on
IDAPro for decompilation of the program to be analyzed.
By generating an intermediate representation (IR), seman-
tically equivalent instruction replacement patterns such as
INC EAX, ADD EAX, 1, and SUB EAX, -1 are normal-
ized with semantically disjoint operations and can then be
matched against the generic template, which describes ma-
licious behavior.