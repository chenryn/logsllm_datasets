# Hacking All The Cars - CAN总线逆向
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
大家好，我是来自银基Tiger Team的BaCde。本文主要是通过ICSim(Instrument Cluster
Simulator)模拟CAN协议通信，通过实践对CAN总线协议进行逆向分析。在实践过程中踩过一些坑，这里跟大家分享交流。
## 简介
CAN(Controller Area
Network)总线是制造业和汽车产业中使用的一种简单协议，为ISO国际标准化的串行通信协议。在现代汽车中的小型嵌入式系统和ECU能够使用CAN协议进行通信，其通信是采用的广播机制，与TCP协议中的UDP差不多。各个系统或ECU（电子控制单元）都可以收发控制消息。1996年起该协议成了美国轿车和轻型卡车的标准协议之一，但是直到2008年才成为强制标准（2001年成为欧洲汽车标准）。当然1996年之前的也有可能使用CAN总线。现在，汽车的电子组件均通过CAN总线连接，针对汽车的攻击最终也都会通过CAN总线来实现。对于研究汽车安全，CAN总线协议是必须要掌握的。
## 环境与准备
  * CAN总线模拟—ICSim
  * 分析工具— can-utils、Kayak、Wireshark
  * 系统—Kali Linux 2020 语言为中文（非root权限）
###  ICSim编译
ICSim(Instrument Cluster Simulator)，是由Open
Garages推出的工具。它可以产生多个CAN信号，同时会产生许多背景噪声，让我们可以在没有汽车或不改造汽车的情况下即可练习CAN总线的逆向技术。
GITHUB地址：
ICSim目前仅可运行在linux系统下，在Kali linux上按照github提供的安装方法，会出现“libsdl2-dev
未满足的依赖关系”的错误，错误如下图。
可以通过aptitude安装来解决，具体安装步骤如下：
    sudo apt-get update 
    sudo apt-get install aptitude
    sudo aptitude install libibus-1.0-dev
    sudo apt-get install gcc
    git clone https://github.com/zombieCraig/ICSim
    cd ICSim
    make
至此ICSim安装完成，目录内容如下：
切换到ICSim目录，执行如下命令。
    ./setup_vcan.sh         #初始化，每次重启后都要重新运行
    ./icsim vcan0           #模拟器
    ./controls vcan0        #控制面
运行后可以看到如下界面，像游戏手柄的界面是控制面板（这里可以插入USB游戏手柄进行控制，笔者这里没有，有USB手柄的大家可自行测试）。另外有仪表盘的窗口是模拟器，速度表停在略高于0mph的位置，如果指针有摆动就说明ICSim工作正常。
其控制器的按键说明如下：
功能 | 按键  
---|---  
加速 | 上方向键  
左转向 | 左方向键  
右转向 | 右方向键  
开/关左车门（前）锁 | 右/左shift+A  
开/关右车门（前）锁 | 右/左shift+B  
开/关左车门（后）锁 | 右/左shift+X  
开/关右车门（后）锁 | 右/左shift+Y  
开启所有车门锁 | 右shift+左shift  
关闭所有车门锁 | 左shift+右shift  
上面的`setup_vcan.sh` 主要功能是加载CAN和vCAN（virtual controller area
network）网络模块。并创建名为vcan0的网络设备并打开连接。  
`setup_vcan.sh`文件内容如下：
    sudo modprobe can
    sudo modprobe vcan
    sudo ip link add dev vcan0 type vcan
    sudo ip link set up vcan0
运行后，我们可以使用ifconfig来查看网络接口，发现会多出来一个vcan0的网络接口。
###  can-utils安装
can-utils是CAN实用的工具套件，包含了许多实用程序。
GITHUB地址：
经常用到的几个程序如下，更多命令可以看github地址：
  * candump : 显示、过滤和记录CAN数据到文件。candump并不会解码数据。
  * canplayer : 对记录的CAN数据进行重放。
  * cansend : 发送CAN数据。
  * cansniffer : 显示CAN数据并高亮显示变化的字节。
当前环境使用的Kali Linux 2020直接使用如下命令安装即可。如果你的系统不支持，则可以直接下载github上的源码，使用make命令进行编译安装。
    sudo apt-get install can-utils
###  Kayak
Kayak可以直接通过github下载release版本的。但是，该工具的使用需要配合socketcand。
  * socketcand安装 
        sudo apt install automake
    git clone https://github.com/linux-can/socketcand.git
    cd socketcand
    ./autogen.sh
    ./configure
    make
    sudo make install
  * Kayak下载  
GITHUB下载：
解压缩后，bin文件夹下有windows版本和linux的运行程序。Kali下直接在terminal下运行./kayak
即可。当然这里也可以下载源代码，并使用maven编译。
## 前置知识
上面已经准备好了环境，在真正开始分析之前，先简单说一些前置知识。
###  CAN总线
  1. CAN运行在两条线路上：CAN高电平（CANHI）和CAN低电平（CANLO）。
  2. CAN bus 有四种帧类型
帧类型 | 用途  
---|---  
数据帧（Data Frame） | 包含要传输的节点数据的帧  
远程帧（Remote Frame） | 请求传输特定标识符的帧  
错误帧（Remote Frame） | 任何检测到错误的节点发送的帧  
重载帧（Overload Frame） | 在数据或远程帧之间插入延迟的帧  
  1. CAN有两种类型的消息(帧)格式：标准（基础）帧格式和扩展帧格式。标准（基础）帧有11位标识符，扩展帧格式有29位标识符。CAN标准帧格式和CAN扩展帧格式之间的区别是通过使用IDE位进行的，IDE位在11位帧的情况下以显性方式传输，而在29位帧的情况下以隐性方式进行传输。支持扩展帧格式消息的CAN控制器也能够以CAN基本帧格式发送和接收消息。
  * 标准帧格式  
说一下主要的4个元素，其他的大家感兴趣可自行去了解：
    * 仲裁ID（Arbitration ID）：仲裁ID是一种广播消息，用来识别正视图通信的设备的ID，其实也代表发送消息的地址。任何的设备都可以发送多个仲裁ID。在总线中同时发送的消息，低仲裁ID的消息拥有优先权。
    * 标识符扩展（IDE）：标准帧格式该位始终是0。
    * 数据长度码（DLC）：表示数据的大小，番位是0字节到8字节。
    * 数据（Data）：总线传输数据本身。一个标准的数据帧可携带最大尺寸为8字节。有些系统中会强制要求8字节，不满8字节则填充为8字节。
  * 扩展帧格式  
扩展帧格式与标准帧格式类似，扩展帧格式可以连接在一起，形成更长的ID。拓展帧格式可包含标准帧格式。拓展帧格式的标识符扩展IDE被设置为1。扩展帧有一个18位的标识符，是标准的11位标识符的第二部分。