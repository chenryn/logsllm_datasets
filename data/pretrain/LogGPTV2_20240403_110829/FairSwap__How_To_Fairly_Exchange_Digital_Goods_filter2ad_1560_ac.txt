receiving back his locked funds. On the other hand a malicious receiver R∗ may not complain during the payout
phase, even though he received a witness x with φ(x) (cid:54)= 1. In this case the funds must go to S because from the
contract’s point of view the case when a malicious receiver did not complain even though φ(X) (cid:54)= 1 is indistinguishable
from the case when φ(X) = 1.
4Note, the ideal functionality does not provide any fairness or termination guarantees for two corrupted parties.
12
S
(1a) sell
R
initialized
(2) accept
revealed
(4) ok/complain
Smart Contract
Judge
GL,H
jc
(1b) initialize
accepted
(3) reveal
sold
if R aborts
(5) ﬁnalize
sold
Figure 3: Outline of fair exchange with judge contract
In the ideal world the parties do not interact with each other but only forward their inputs to an
ideal functionality F L
cfe. In this setting we will call the adversary a simulator Sim and denote the
above output as
IDEAL
Fcfe,L,H
Sim,Z (κ, x).
Given these two random variables, we can now deﬁne the security of our protocol Π as follows.
Deﬁnition 1 (GUC security of Π). Let κ ∈ N be a security parameter, Π be a protocol in the
(Gjc,L,H)-hybrid world. Π is said to GUC realize F L
cfe in the (Gjc,L,H)-hybrid world if for every
ppt adversary A attacking Π there exists a ppt algorithm Sim, such that the following holds for all
ppt environments Z and for all x ∈ {0, 1}∗:
Fcfe,L,H
Sim,Z (κ, x) ≈c REAL
Gjc,L,H
Π,A,Z (κ, x)
IDEAL
4 Our main construction
As highlighted in the introduction, we will solve the disagreement where the sender S claims that
he sent a witness x such that φ(x) = 1 to the receiver R, while R claims the contrary. To resolve
this conﬂict, we will use a smart contract to act as a judge and can decide, which of both cases
occurred. In order to minimize costs for the execution of this contract we do not want the judge
contract to learn φ, x nor require it to run φ(x). Instead, we outsource the heavy work of evaluating
the circuit to S and R, respectively. The judge contract will only need to verify a concise proof
of misbehavior, which R generates if he wants to complain about the fact that φ(x) (cid:54)= 1. We
will show in this section how to generate such a proof, whose size is logarithmic in the circuit size
representing φ. This is an important property, since we allow the witness x and therefore also φ
to be large, i.e., x may consist of n elements, x = (x1 . . . , xn), with xi ∈ {0, 1}λ. The circuit φ
takes as input x and has m > n gates, which are evaluated according to the topology of the circuit
where gate gm is the output gate of the overall circuit. If the operation of gate gm outputs 1, the
circuit φ accepts the witness x, otherwise the witness is rejected.
13
We propose a new scheme that at a high-level works as follows (cf. also Figure 3). In the ﬁrst
round the sender S encrypts x and auxiliary information about the computation of φ(x) and sends
these ciphertexts to the receiver R (Step 1a). In the same round it sends a commitment of the
key k used for the encryption to the judge contact (Step 1b). The receiver does some preliminary
consistency checks in the next round and (if he accepts) sends p coins to the judge contract (Step
2). In the third round, the sender is supposed to reveal the secret key k to the judge contract (Step
3). This enables R to decrypt x and verify the computation of φ(x). If x was not correct, i.e.,
φ(x) (cid:54)= 1, then R has the chance to complain about the invalid x in the fourth round via a concise
proof of misbehavior (Step 4). In this case the p coins locked by R in the contract get refunded.
Finally, in case R was malicious and did no react in round 4, S can ﬁnalize the smart contract in
round 5 (Step 5).
4.1 Concise proofs of misbehavior
Before we describe our main protocol in detail, we start by taking a closer look on how R can
generate the complaint for the judge smart contract. The key idea is that checking if some part of
the claimed computation was carried out incorrectly is much easier than verifying the correctness
of the entire computation. In our construction we let the judge validate only the operation and the
result of a single incorrectly computed gate of φ. This is done via a concise proof of misbehavior.
Such a proof includes the inputs and output of the gate to allow veriﬁcation of this particular gate.
In addition, in order to prevent R from sending wrong inputs and outputs, the judge contract has
to be ensured that the values used for the proof of misbehavior were originally sent by S. This is
guaranteed in an eﬃcient way using Merkle proofs.
We present our protocol in a modular way using the subroutines Encode, Extract and Judge
In our protocol S uses the algorithm Extract to encrypt x and the
shown in Algorithms 1-3.
intermediate values that are produced during the evaluation of φ(x) (c.f., Algorithm 1). The
output z of this encoding procedure is sent to the receiver R. Moreover, as described above S
sends a commitment of the key k to the smart contract.
Algorithm 4 Encode(φ, x, k)
for each i ∈ [n] do
out i = xi
zi = Enc(k, out i)
for each i ∈ {n + 1, . . . , m} do
parse φi = (i, opi, Ii)
out i = opi(out Ii[1], . . . , out Ii[(cid:96)])
zi = Enc(k, out i)
Output: z = (z1, . . . , zm)
(cid:46) Assign witness to input wires
(cid:46) Encrypt input values
(cid:46) Compute the i-th operation
(cid:46) Encode output values
Once S reveals the encryption key k, R can run the extraction subroutine Extract (cf. Algo-
rithm 2) and recover x. The algorithm gets as input the encryption z, the circuit φ, the key k and
outputs a tuple, where the ﬁrst element is the decoding of the witness x and the second is either
⊥ (if φ(x) = 1) or a concise proof of misbehavior π (if φ(x) (cid:54)= 1). The proof π is used later to
convince the judge/contract that some step of the computation of φ(x) is incorrect.
On input the decoding key k, the root elements rz and rφ, and the proof π the algorithm Judge
outputs 1 if the complaint succeeds or 0 otherwise (cf. Algorithm 3). In order to verify the i−th
14
Algorithm 5 Extract(φ, z, k)
parse φ = φ1, . . . , φm
for each i ∈ [n] do
out i = Dec(k, zi)
xi = out i
Mz = Mtree(z)
Mφ = Mtree(φ)
for each i ∈ {n + 1, . . . , m} do
parse φi = (i, opi, Ii)
out i = opi(out Ii[1], . . . , out Ii[(cid:96)])
if Dec(k, zi) (cid:54)= out i or (i = m and out i (cid:54)= 1) then
πφ = Mproof (i, Mφ)
πout = Mproof (i, Mz)
for each k ∈ [(cid:96)] do
set j = Ii[k]
πk
in = Mproof (j, Mz)
(cid:46) Decrypt ﬁrst n outputs
(cid:46) Extract witness
(cid:46) Compute Merkle tree over z
(cid:46) Compute Merkle tree over φ
(cid:46) Compute output of i-th gate
(cid:46) Proof that φi ∈ φ
(cid:46) Proof that zi ∈ z
(cid:46) j is the k-th index in set Ii
(cid:46) Proof that zj ∈ z
set π = (πφ, πout , π1
Output: ((x1, . . . , xn), π)
Output: ((x1, . . . , xn),⊥)
in , . . . , π(cid:96)
in )
step of φ(x), the judge needs to know the label φi = (opi, i, Ii), all values out Ii[1], . . . , out Ii[(cid:96)] on its
input wires and the value of its output wire out i. Using this information the algorithm computes
the output of the i-th gate and compares it with the value out i.
If both values are the same,
then the computation was carried out correctly, and the algorithm outputs 0 (i.e., it rejects the
complain). Otherwise, it outputs 1 and we say that the judge algorithm accepts the complain.
To guarantee that R can only complain about values that he has indeed received from S and
that violate the predicate function φ on which both S and R have agreed on, we require that
the Merkle roots rz = root(Mtree(z)) and rφ = root(Mtree(φ)) are stored in the judge contract.
Concretely, S sends rz and rφ to the contract in the ﬁrst round, and R will only deposit p coins
into the contract if these values are consistent with z. When later Judge receives a concise proof
of misbehavior Judge checks if the containing Merkle proofs are consistent with rz and rφ. Only if
this is the case a complaint is accepted by the contract.
This concise proof of misbehavior π consists in total of (cid:96) + 2 Merkle proofs, and hence the
complexity of the Judge is O((cid:96) log(m)). The ﬁrst element πφ ∈ π includes the Merkle proof that
shows that label φi is indeed the label corresponding to the i-th gate in φ. The second element
πout includes a Merkle proof ρout , which is required to verify that zi is indeed the i-th element in
z. Finally, π contains Merkle proof π1
in for the (cid:96) encrypted input values of the gate with
label φi. Given these Merkle proofs the judge algorithm veriﬁes their correctness, decrypts zi of
the i-th operation φi into the output value out i. Then, it checks whether opi evaluated on the (cid:96)
inputs yields into out i. If all these checks pass it outputs 1; otherwise it outputs 0.
in , . . . , π(cid:96)
4.2 The witness selling protocol
Now we can formally construct our protocol Π by using the three algorithms Encode, Extract and
Judge. The protocol consists of the judge contract and the speciﬁcation of the behavior of the two
honest parties S and R. In order to formally deﬁne the functions provided by the judge smart
15
Algorithm 6 Judge(k, rz, rφ, π)
in )
in , . . . , π(cid:96)
parse π = (πφ, πout , π1
parse πφ = (φi, ρφ)
parse φi = (i, opi, Ii)
if Mvrfy(φi, ρφ, rφ) (cid:54)= 1 output: 0
parse πout = (zi, ρout )
if Mvrfy(zi, ρout , rz) (cid:54)= 1 output: 0
out i = Dec(k, zi)
if i = m and out i (cid:54)= 1 output: 1
for each j ∈ [(cid:96)] do
in = (zj, ρj)
parse πj
if Mvrfy(zj, ρj, rz) (cid:54)= 1 output: 0
out Ii[j] = Dec(k, zj)
if opi(out Ii[1], . . . , out Ii[(cid:96)]) (cid:54)= out i output: 1
Else Output: 0
(cid:46) Reject if φi not i-th step of φ(x)
(cid:46) Reject if zi not i-th element of z
(cid:46) Accept if φ(x) (cid:54)= 1
(cid:46) j is the k-th index in set I
(cid:46) Reject if zj not z[j]
(cid:46) Accept
(cid:46) Reject complaint if evaluation correct
jc
jc
jc
jc
jc
can be found
. The full description of GL,H
, we model it as an ideal functionality GL,H
. In the ﬁrst round in the initialization phase, GL,H
contract GL,H
in Figure 4 and the speciﬁcation of the protocol is given in Figure 5.
Our protocol proceeds in three phases thereby closely following the structure of the smart
contract GL,H
takes as input from S the root
elements rz and rφ as well as the commitment c. R receives z directly from S, and rz, rφ from
. If these roots are computed correctly, then R accepts the contract. Additionally, if both
GL,H
parties agree and R has suﬃcient funds, p coins are blocked for this execution of the fair exchange
protocol. Only after this phase is successfully executed, the judge contract is considered active. If
during this phase, some party decides to abort the execution, this is not considered malicious.
In the reveal key phase, the contract expects S to reveal the key k, which allows to verify
the commitment c. If S fails to send the reveal message, he is considered malicious and R can
get his money back. Otherwise, if S revealed the key, R can decode the witness x by running
(x, π) = Extract(z, φ, k).
In the next phase the payout of the coins can be triggered. If the witness is valid (i.e, π = 0)
R sends message (ﬁnalize, id ) to GL,H
, which will trigger the smart contract to unfreeze the coins
in S’s favor. If instead Extract output a valid complaint, R sends a message (complain, id , π) to
GL,H
. If the extracted φ(x) (cid:54)= 1, the veriﬁcation algorithm Judge(k, rz, rφ, π) will output 1 and
thus accept the complaint and all coins are payed to R. If R sends neither message, S can call the
judge contract in round 5, to trigger the payout of coins.
jc
jc
jc
4.3 Security
It remains to analyze the security of our protocol and provide an intuition why either party cannot
break the fairness property for the other party as deﬁned in Section 3.2.
Termination The protocol terminates either after four rounds, in the payout phase, after R
sends the ﬁnalize; or complain message or in the ﬁfth round after S sent ﬁnalize. We distinguish
the following termination cases for the protocol with an active judge contract and at least one
honest party:
16
The ideal functionality GL,H
acts as a judge smart contract for session id id and interacts
with the global L functionality and the parties S and R. It locally stores addresses
pkS and pkR, price p, commitment c, decryption key k, Merkle tree root hashes rz, rφ
and state s.
jc
Initialize
(Round 1) Upon receiving (init, id , p, c, rφ, rz) from S with p ∈ N, store rφ, rz, p, c, output
(initialized , id , p, rφ, rz, c), set s = initialized and proceed to the reveal phase.
(Round 2) Upon receiving (accept, id ) from R when s = initialized , send (freeze, id ,R, p)
to L. If it responds with (frozen, id , R, p), set s = active and output (accepted, id ).
Reveal
(Round 3) Upon receiving (reveal , id , d, k) from sender S when s = active and
Open(c, d, k) = 1, send (revealed , id , d, k) to all parties and set s = revealed . Then
proceed to the payout phase.
Otherwise if no such message from S was received, send message (unfreeze, id , p,R) to L
and abort.
(Round 4) Upon receiving a message m from the receiver R when s = revealed set s =
ﬁnalized and do the following:
Payout
• If m = (complain, id , π) s.t. Judge(k, rz, rφ, π) = 1 send (unfreeze, id , p,R) to L,
(not sold , id ) to S and terminate.
• Otherwise, send (unfreeze, id , p,S) to L, (sold , id ) to S and terminate.
(Round 5) Upon receiving message (ﬁnalize, id ) from the sender S, when s = revealed ,
send message (unfreeze, id , p, S) to L. Then output (sold , id ) to S and terminate.
Figure 4: Ideal functionality GL,H
jc
for the judge contract
No abort: This case occurs when both parties act honestly. In this case, the protocol terminates
in the payout phase, after R sends the ﬁnalize or complain message to GL,H
.
jc
S aborts: In case S does not reveal the key k, GL,H
sure that L assigns all coins to R.
jc will terminate in the reveal phase and make
R aborts: This case occurs when R does not react anymore after the key was revealed. In the
ﬁfth round S will then send (ﬁnalize, id ) to GL,H