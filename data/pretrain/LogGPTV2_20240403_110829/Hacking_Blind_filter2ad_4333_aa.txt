title:Hacking Blind
author:Andrea Bittau and
Adam Belay and
Ali Jos&apos;e Mashtizadeh and
David Mazières and
Dan Boneh
2014 IEEE Symposium on Security and Privacy
Hacking Blind
Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazi`eres, Dan Boneh
Stanford University
Abstract—We show that it is possible to write remote stack
buffer overﬂow exploits without possessing a copy of the target
binary or source code, against services that restart after a crash.
This makes it possible to hack proprietary closed-binary services,
or open-source servers manually compiled and installed from
source where the binary remains unknown to the attacker. Tra-
ditional techniques are usually paired against a particular binary
and distribution where the hacker knows the location of useful
gadgets for Return Oriented Programming (ROP). Our Blind
ROP (BROP) attack instead remotely ﬁnds enough ROP gadgets
to perform a write system call and transfers the vulnerable
binary over the network, after which an exploit can be completed
using known techniques. This is accomplished by leaking a
single bit of information based on whether a process crashed
or not when given a particular input string. BROP requires a
stack vulnerability and a service that restarts after a crash. We
implemented Braille, a fully automated exploit that yielded a shell
in under 4,000 requests (20 minutes) against a contemporary
nginx vulnerability, yaSSL + MySQL, and a toy proprietary
server written by a colleague. The attack works against modern
64-bit Linux with address space layout randomization (ASLR),
no-execute page protection (NX) and stack canaries.
I.
INTRODUCTION
Attackers have been highly successful in building exploits
with varying degrees of information on the target. Open-source
software is most within reach since attackers can audit the code
to ﬁnd vulnerabilities. Hacking closed-source software is also
possible for more motivated attackers through the use of fuzz
testing and reverse engineering. In an effort to understand an
attacker’s limits, we pose the following question: is it possible
for attackers to extend their reach and create exploits for
proprietary services when neither the source nor binary code
is available? At ﬁrst sight this goal may seem unattainable
because today’s exploits rely on having a copy of the target
binary for use in Return Oriented Programming (ROP) [1].
ROP is necessary because, on modern systems, non-executable
(NX) memory protection has largely prevented code injection
attacks.
To answer this question we start with the simplest possible
vulnerability: stack buffer overﬂows. Unfortunately these are
still present today in popular software (e.g., nginx CVE-2013-
2028 [2]). One can only speculate that bugs such as these
go unnoticed in proprietary software, where the source (and
binary) has not been under the heavy scrutiny of the public
and security specialists. However, it is certainly possible for
an attacker to use fuzz testing to ﬁnd potential bugs through
known or reverse engineered service interfaces. Alternatively,
attackers can target known vulnerabilities in popular open-
source libraries (e.g., SSL or a PNG parser) that may be used
by proprietary services. The challenge is developing a method-
ology for exploiting these vulnerabilities when information
about the target binary is limited.
One advantage attackers often have is that many servers
restart their worker processes after a crash for robustness. No-
table examples include Apache, nginx, Samba and OpenSSH.
Wrapper scripts like mysqld_safe.sh or daemons like
systemd provide this functionality even if it is not baked into
the application. Load balancers are also increasingly common
and often distribute connections to large numbers of identically
conﬁgured hosts executing identical program binaries. Thus,
there are many situations where an attacker has potentially
inﬁnite tries (until detected) to build an exploit.
We present a new attack, Blind Return Oriented Program-
ming (BROP), that takes advantage of these situations to build
exploits for proprietary services for which both the binary
and source are unknown. The BROP attack assumes a server
application with a stack vulnerability and one that is restarted
after a crash. The attack works against modern 64-bit Linux
with ASLR (Address Space Layout Randomization), non-
executable (NX) memory, and stack canaries enabled. While
this covers a large number of servers, we can not currently
target Windows systems because we have yet to adapt the
attack to the Windows ABI. The attack is enabled by two new
techniques:
1)
2)
Generalized stack reading: this generalizes a known
technique, used to leak canaries, to also leak saved
return addresses in order to defeat ASLR on 64-bit
even when Position Independent Executables (PIE)
are used.
Blind ROP:
gadgets.
this technique remotely locates ROP
Both techniques share the idea of using a single stack
vulnerability to leak information based on whether a server
process crashes or not. The stack reading technique overwrites
the stack byte-by-byte with possible guess values, until the
correct one is found and the server does not crash, effectively
reading (by overwriting) the stack. The Blind ROP attack
remotely ﬁnds enough gadgets to perform the write system
call, after which the server’s binary can be transferred from
memory to the attacker’s socket. At this point, canaries, ASLR
and NX have been defeated and the exploit can proceed using
known techniques.
The BROP attack enables robust, general-purpose exploits
for three new scenarios:
1)
2)
Hacking proprietary closed-binary services. One may
notice a crash when using a remote service or dis-
cover one through remote fuzz testing.
Hacking a vulnerability in an open-source library
thought to be used in a proprietary closed-binary
service. A popular SSL library for example may have
© 2014, Andrea Bittau. Under license to IEEE.
DOI 10.1109/SP.2014.22
227
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
3)
a stack vulnerability and one may speculate that it is
being used by a proprietary service.
Hacking an open-source server for which the binary is
unknown. This applies to manually compiled instal-
lations or source-based distributions such as Gentoo.
We evaluate all three scenarios. Ideally, for the ﬁrst sce-
nario we would test our techniques against production services
for which we hold no information about the software, but we
are constrained for obvious legal reasons. To simulate such a
scenario, we tested against a toy proprietary service a colleague
of ours wrote for which we had no information about source,
binary, or functionality. For the second scenario, we target a
real vulnerability in the yaSSL library [3]. This library was
used by MySQL in past and we use that as the host application.
For the third scenario, we target a recent (2013) vulnerability
in nginx [2] and write a generic exploit that does not depend
on a particular binary. This is particularly useful as the exploit
will work on any distribution and vulnerable nginx version
without requiring an attacker to write a speciﬁc exploit for
each distribution and version combination (as is done today).
We implemented a new security tool, Braille, that makes
BROP attacks highly automated. Braille can yield a shell on
a vulnerable server in approximately 4,000 requests, a process
that completes in under 20 minutes and, in some situations, in
just a few minutes. An attacker need only provide a function
that constructs a request of a minimum length to crash the
server and append a string provided by Braille. The function
must also return a single bit based on whether the server
crashes or not.
Our contributions are:
1)
2)
3)
4)
5)
A technique to defeat ASLR on servers (generalized
stack reading).
A technique to remotely ﬁnd ROP gadgets (BROP)
so that software can be attacked when the binary is
unknown.
Braille: a tool that automatically constructs an exploit
given input on how to trigger a stack overﬂow on a
server.
The ﬁrst (to our knowledge) public exploit for ng-
inx’s recent vulnerability, that is generic, 64-bit, and
defeats (full/PIE) ASLR, canaries and NX.
Suggestions for defending against BROP attacks. In
summary, ASLR must be applied to all executable
segments (PIE) and re-randomization must occur after
each crash (at odds with fork-only servers). Holding
the binary from the attacker or purposefully altering
it may not be an effective security countermeasure.
II. BRIEF HISTORY OF BUFFER OVERFLOWS
Buffer overﬂows are a classic vulnerability with a long
history of exploits [4]. Conceptually, they are relatively easy
to attack. For instance, a vulnerable program might read data
from the network into a buffer. Then, assuming the program
lacks sufﬁcient bounds checks to limit the size of the incoming
data, an attacker could overwrite memory beyond the end of
the buffer. As a result, critical control-ﬂow state, such as return
addresses or function pointers, could be manipulated. Stack
buffer overﬂows tend to be especially dangerous because return
addresses are implicitly nearby in memory due to function
calling conventions. However, attacks that target buffers on
the heap are also viable [5].
In the early days of stack buffer overﬂows, it was common
for an attacker to include malicious code as part of the payload
used to overﬂow the buffer. As a result, the attacker could
simply set the return address to a known location on the
stack and execute the instructions that were provided in the
buffer. Such “code injection” attacks are no longer possible
on contemporary machines because modern processors and
operating systems now have the ability to mark data memory
pages as non-executable (e.g., NX on x86). As a result, if an
attacker tries to run code on the stack, it would only cause an
exception.
An innovative technique, known as return-oriented pro-
gramming (ROP) [1], was developed to defeat defenses based
on non-executable memory. It works by linking together short
code snippets already present in the program’s address space.
Such code snippets, called gadgets, can be combined to form
arbitrary computation. As a result, attackers can use ROP to
gain control of programs without any dependence on code
injection. Simpler variations of ROP are sometimes possible.
For example, with return-to-libc attacks, a high-level library
function can be used as the return address. In particular, the
system() function is useful for attackers because it can
run arbitrary shell code with only a single argument [6].
These attacks were very effective on 32-bit systems where
arguments were passed on the stack, already under control
of the attacker. On 64-bit systems, arguments are passed in
registers, so additional gadgets are needed to populate registers.
Address space layout randomization (ASLR) [7], [8] was
introduced as an additional defense against buffer overﬂow
attacks. It works by randomizing the location of code and data
memory segments in the process address space. In many im-
plementations code segment randomization is only applied to
libraries, but full address space randomization is also possible.
ASLR creates a major challenge for attackers because it makes
the address locations of code (or even the stack) impossible to
predict in advance. Unfortunately, on 32-bit platforms, ASLR
is constrained by the number of available bits (usually 16) for
randomization. As a result, brute-force attacks can be quite
effective [9]. However, on 64-bit platforms there are typically
too many random bits for brute-forcing to be feasible. In
such cases, ASLR can still be circumvented, but only when
combined with a vulnerability that leaks information about the
address space layout, such as a format string [10].
In addition to the larger address space for ASLR and the
need to locate additional gadgets to ﬁll argument registers, 64-
bit systems present a third complication for attackers. Because
the architecture limits virtual addresses to 48-bits, user-level
memory pointers are required to contain zero-valued bytes.
These zeros cause early termination of overﬂows relying on
string operations such as strcpy().
Canaries [11] are another common defense against buffer
overﬂow attacks. Canaries cannot prevent buffer overﬂows, but
they can detect them retroactively and terminate the program
before an attacker can inﬂuence control ﬂow. For example,
with stack canaries, a secret value that was determined in
advance is placed just before each saved frame pointer and
return address. Then, when a function returns,
the secret
228
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
dup2(s, 0);
dup2(s, 1);
dup2(s, 2);
execve("/bin/sh", 0, 0);
Gadgets
pop rdi
ret
pop rsi
ret
pop rax
ret
syscall
ret
Figure 1. Socket reuse shellcode. It redirects stdin, stdout and stderr to the
socket, and executes a shell.
return address
0x400100
(rdi)
s
0x400200
(rsi)
0
0x400300
(rax)
33
0x400400
Stack
Gadgets
dup2(s, 0);
return;
dup2(s, 1);
return;
dup2(s, 2);
return;
execve(“/bin/sh”, 0, 0);
return;
Buffer
AAAAA
return address
0x400100
0x400200 0x400300 0x400400
Stack
Figure 2. ROP version of the socket reuse shellcode. Gadgets are chained
by placing their addresses on the stack.
value is checked to make sure it has not changed. This can
prevent stack buffer overﬂows from being exploited because
an attacker must correctly overwrite the secret value in order
for the program to actually use an overwritten return address.
However, just as with ASLR, canaries can be defeated through
an additional vulnerability that leaks information about the
secret value. The layout of stack memory can be an impor-
tant consideration for canary implementations. One common
approach is to place all buffers at the top of the frame so
that if they overﬂow it will not be possible to overwrite other
variables before corrupting the canary [12]. The motivation
is to protect pointers because sometimes they can be used to
overwrite arbitrary memory [13]. Unfortunately, canaries are
not a perfect solution, as even with layout precautions, the
structure of a buffer overﬂow can sometimes permit an attacker
to bypass canary words and access critical state directly, as
happened with unsafe pointer arithmetic in yaSSL [3].
III. ROP TUTORIAL
Before discussing the Blind ROP technique, we ﬁrst famil-
iarize the reader with ROP. Modern exploits rely heavily on
ROP. The goal of ROP is to build an instruction sequence that
typically spawns a shell (shellcode) based on existing code
fragments (gadgets). Once a shell is executed, the attacker can
execute more commands to continue the attack. Traditionally,
exploits would inject off-the-shelf shellcode into the process
and execute it. Figure 1 shows typical shellcode that pipes
the attacker’s socket to standard input, output and error and
executes a shell.
Of course injecting shellcode is no longer possible because
these days writable memory (e.g., the stack) is non-executable,
and so ROP must be used instead. Figure 2 shows how ROP
can in principle be used to create the shellcode previously
shown in Figure 1. The stack is overﬂowed so that
the
addresses of all the gadgets are present in sequence. Each
gadget ends with a return so that the next gadget can execute.
In practice, each ROP gadget will be a short sequence
of machine instructions terminated by a return. Executing a
Figure 3. ROP chain for dup2(s, 0). The system call number needs to be in
rax and dup2 is system call #33. Arguments are passed in rdi and rsi.
Because the attacker already controls the stack, pop gadgets are used to load
registers from values on the stack.
simple system call like dup2 will require multiple gadgets be-
cause arguments are passed in registers so gadgets to populate
these will be needed. Figure 3 shows the required gadgets for
dup2. Registers rdi and rsi control the ﬁrst two arguments
to system calls, and rax controls the system call number.
Registers can be controlled by using pop gadgets and placing
the value to load on the stack. By chaining enough gadgets,
complete shellcode can eventually be built.
IV. BUFFER OVERFLOWS TODAY
On most contemporary operating systems, where NX and
ASLR are common, an attacker must fulﬁll at
two
requirements in order to gain full control of a remote program’s
execution:
least
1)
2)
To defeat NX, the attacker must know where gadgets
reside inside the program executable.
To defeat ASLR, the attacker must derandomize the
location at which the executable’s text segment is