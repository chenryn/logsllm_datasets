### 智能硬件的信息泄露风险
——浅谈办公及教育场景中的硬件供应链安全

#### 议程
1. IoT产品供应链的安全现状
2. 常见的保护机制及其实现缺陷
3. 如何避免缺陷，保护供应链安全

#### IoT产品供应链的安全现状
- **案例：金立手机木马事件**
  - 金立公司生产的2000多部手机被植入了木马。
  - 软件供应链攻击通常受到更多关注，而硬件供应链在流通环节的攻击往往容易被忽视。

- **国内外相关规范**
  - 国内外已有相关规范来保障IoT产品的供应链安全，但实际执行情况参差不齐。

- **业界的做法**
  - 主流桌面处理器、服务器、笔记本电脑和操作系统厂商早已实现了安全启动和可信计算等机制。
  - 移动处理器厂商如高通和联发科也提供了完整的SecureBoot和TEE（可信执行环境）支持，以提供可靠的保护机制。

- **实际落实情况**
  - 我们的研究发现，5个头部厂商的9款IoT产品（芯片方案有完整安全启动支持），存在设计缺陷，导致产品在供应链流通环节可能被植入恶意代码。
  - 攻击需要物理接触，但厂商对此并不重视，认为这只是缺陷而非漏洞。
  - 复杂的供应链网络使得产品在到达客户之前的流通环节存在大量被供应链植入的时间窗口，后果严重。

- **潜在风险**
  - **商业机密窃取**：智能盒子、智能电视和会议终端等设备可能被用来窃取商业机密。
  - **教育硬件篡改**：缺乏安全保护的教育硬件可能被破解，改变其原有设计用途，例如变成游戏机或浏览不良信息的媒介。
  - **家庭监控**：智能音箱、智能教育屏和智能学习灯等设备可能被用于监控家庭敏感地带。

- **案例演示**
  - 某教育产品供应链植入风险演示

#### 常见的保护机制及其实现缺陷
- **Android ROM**
  - 安全机制包括Secure Boot、信任根和DM-Verity等。

- **Secure Boot**
  - 核心思想是当前阶段的启动代码加载下一级代码之前，对所加载的代码基于PKI进行完整性校验。

- **信任根**
  - 所有支持Secure Boot的CPU都有一块很小的OTP存储（也称为FUSE或eFUSE），它的工作原理类似于保险丝，在芯片出厂前写入信息后无法更改。

- **DM-Verity**
  - 对于小分区，使用信任根进行直接或间接签名；对于较大的分区（如system分区），与预置的root hash进行比对验证。

- **绕过Secure Boot**
  - 90%以上的产品未烧写eFuse，可以直接绕过安全启动。
  - 即使安全启动未开启，从BootLoader向下的保护机制可能是开启的，需要分析固件的保护逻辑。
  - 利用芯片厂商工具读写整个磁盘固件（如MTK和高通）可以绕过Secure Boot。
  - 通过固件分析绕过Boot Verify和DM-Verity。
  - 使能ADB、禁用SE-Linux、获取adb root shell等手段可以获取完全访问权限。

- **某会议盒子供应链植入风险演示**

#### 如何避免缺陷，保护供应链安全
- **部分厂商的现状**
  - 安全意识不足，认为接触式攻击不属于漏洞。
  - 芯片成本增加，支持安全启动的芯片会增加成本。
  - 研发成本，不愿意在保护机制上投入人力物力。
  - 维修成本，开启安全启动会增加维修难度。

- **提高安全意识**
  - 将安全特性支持考虑到产品基础成本中。

- **部分厂商的保护方案**
  - 采用巧妙的后门，隐藏调试开关。
  - 对控制调试的程序进行混淆加密，增加分析成本。
  - 在底层Framework上定制程序的安装逻辑，对抗植入。

- **完美的保护机制**
  - 安全应该尽早介入到硬件产品的设计研发流程中。

- **IoT产品SDLC流程**
  - 在立项阶段就进行安全介入，解决上线后不可召回的漏洞，避免产品遭受供应链植入攻击。
  - 通过建立IoT产品SDLC流程，在立项、Souring、EVT、DVT、PVT等各个阶段进行安全审查。

感谢观看！