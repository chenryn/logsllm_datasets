051
1200 1600 1900 2300 2700 3000 1200 1600 1900 2300 2700 3000 1200 1600 1900 2300 2700 3000
Frequency [MHz] (3000=turbo mode) Frequency [MHz] (3000=turbo mode) Frequency [MHz] (3000=turbo mode)
(a) TimebyFrequency (b) PowerbyFrequency (c) EnergybyFrequency
Fig.5. Thesweetspotofcountingsorttosort50mioelements.
b) Power×Freq: Fig. 6(b) shows the power consumed can be achieved by redesigning software code, by making
based on the CPU clock frequency selected. The results could better use of memory and, by using more efficient hardware
beconsideredforeseeable,sincethepowerconsumptionofthe components (see [16]), it is not well known that the energy-
CPU increases by its frequency. Nonetheless, up to 2GHz the efficiency of software is also affected by the frequency of
powerconsumptionismoremodestandhasvisibleincrements the CPU at very precise frequencies other than the maximum
at 1.5GHz, 2.2GHz, 2.7GHz and for the turbo mode. frequency. Namely, our findings provide an answer (A) to our
c) Energy×Freq: Fig. 6(c) provides the results of our two research questions:
findings that are most striking: the number of joules required • A2a (Effectiveness). Software energy-efficiency can be
toexecutethetaskofsortinghasasweetspotat1.8GHz.The improved by choosing the most adequate CPU clock
energy consumption declines by approximately 25% (708J) frequency. CPU clock frequency leads to a considerable
when the CPU frequency is changed from turbo mode to variability of the energy needed to complete a software
1.8GHz. task.
For the other algorithms, the results are also interesting. • A2b (Determinability). The CPU clock frequency which
std::sortismoreenergy-efficientat2.4GHz.Thiscorresponds makessoftwaremoreenergy-efficientcanbedetermined.
to energy savings of approximately 12% (or 176J) compared Inthecaseofcountingsortfor50mioelements,reducing
to the turbo mode, which leads to the shortest response time. the clock frequency by ≈60% of its maximal speed can
Running the CPU at a low frequency, i.e., 1.2GHz, increases lead to an energy reduction of 25%.
the energy consumed by 25% (427J) compared to the sweet These results entail not only that for a given software
spot frequency. application the sweet spot of CPU frequency can, and should
Radix sort is more energy-efficient at 2.2GHz, which cor- be determined, but it also shows that software with the same
responds to energy savings of approximately 15% (or 96 J) algorithmic complexity can have a different energy-efficiency.
comparedtotheturbomodeand18%(119J)comparedtothe Therefore, it seems natural to consider developing energy-
lowest frequency. efficiency benchmarks for software applications. While ISO
Fig. 6 clearly shows the different sweet spot frequencies software quality parameters include over 50 metrics [17],
(vertical dotted line), in ascending order, for counting, radix SPEC CPU2006 provides comparative studies on hardware
and std::sort. The lines in the diagram correspond to list sizes performanceandSPECpowerforhardwareenergy-efficiency2,
of 10..50 million elements. the same does not happen to software energy-efficiency.
Table III provides an overview of the results and identifies Since we have only studied CPU/memory intensive appli-
the sweet spots for each algorithm (sweet spots are marked
2https://www.spec.org
with a star ’*’), and the energy savings that can be achieved
when the most energy-efficient CPU clock frequency is se-
lected compared to using the maximum frequency (i.e., turbo
TABLEIII
mode). THEENERGY-EFFICIENTSWEETSPOTOFSORTINGALGORITHMS.
In order to gain more insights, we calculate the energy
Algorithm E (J) Freq. (MHz) t (s) P (W)
savings from running the algorithms at the sweet spot fre-
radix 530.8 *2200 2.6 204.2
quency compared to the maximum frequency (AC-Save) and
radix 626.9 turbo 1.9 330.4
the associated loss of performance (AC-Penalty). The penalty
std::sort 1282.3 *2400 5.9 216.9
is always higher than the savings. Fig. 7 compares AC-Save std::sort 1464.1 turbo 4.2 346.3
and AC-Penalty for all three algorithms and all list sizes. count. 2093.8 *1800 11.3 184.9
Whileresearchershavealreadyfoundthatenergy-efficiency count. 2801.5 turbo 8.5 330.3
50mio 50mio 0052 006 0051
50mio
]J[ ]J[ ]J[
40mio 40mio 005
noiptmusnoc 0002 noiptmusnoc noiptmusnoc
40mio 30mio 004 0001
30mio 0051
30mio ygrene ygrene 003 ygrene
20mio 20mio 0001
CA CA CA
20mio 002 005
10mio 10mio 005
10mio 001
1500 2000 2500 3000 1500 2000 2500 3000 1500 2000 2500 3000
Frequency [MHz] (3000=turbo mode) Frequency [MHz] (3000=turbo mode) Frequency [MHz] (3000=turbo mode)
(a) countingsort(sweetspotat1.8GHz) (b) radixsort(sweetspotat2.2GHz) (c) std::sort(sweetspotat2.4GHz)
Fig.6. ACenergyconsumptionandthecorrespondingsweetspotfrequencies.
05 05 05
Saving Saving Saving
Penalty Penalty Penalty
04 04 04
]%[ ]%[ ]%[
ytlaneP/sgnivaS 03 ytlaneP/sgnivaS 03 ytlaneP/sgnivaS 03
02 02 02
01 01 01
0 0 0
10 20 30 40 50 10 20 30 40 50 10 20 30 40 50
List size [mio] List size [mio] List size [mio]
(a) countingsort (b) radixsort (c) std::sort
Fig.7. ACenergysavingcomparedwithtimepenalty.
cationswhichdonotaccessharddisksandothercomponents, sorting. A client can make a request for sorting, having as
further insights can be obtained by experimenting with other constraints the performance or the energy-efficiency of the
types of software applications which require input/output execution, or a combination of both. When a self-adaptive
accesstodatastoragesystems.However,duetotheinterestin software system receives a request, it uses optimization tech-
overallsystemenergy-efficiency,werelatetheCPUefficiency niques to determine at which frequency the CPU should be
with the alternating current power supply (AC). clocked to fulfill the constraints of the request. Optimization
We conducted this paper as an “executable paper”. Hence, usestheapproximatedfunctionsfromTableIVandthenumber
all raw measurement results, executable source code used for of elements requested to be sorted. The information is stored
the experiments, logs and traces can be found online in a in so-called QoS contracts. The result of the optimization is
dataset hosted at the experimental results platform Areca3. the CPU frequency at which the sorting algorithm should be
executed. Thus, we propose a three-phase approach:
VI. DYNAMICSOFTWAREADAPTATION
1) Approximate functions of sweet spot frequencies based
The results presented in the last section show empirical
on micro-benchmarks to determine a server’s individual
support for the existence of sweet spot frequencies for sort
sweet spot frequency,
algorithms.Ourideatoimplementanewkindofself-adaptive
2) QoS contracts to capture the assessed non-functional
software system is to enable applications to select the fre-
behavior,
quency of the CPU, based on the type of requests made for
3) Optimization to compute the optimal frequency and
execution. We will demonstrate how such a system could run
algorithm for a given user request at runtime.
using the same computing task evaluated through this paper:
The general approach has been published in [18]. We extend
3http://areca.co/26/The-Cost-of-Sorting previous work by incorporating hardware reconfiguration by
means of explicit frequency scaling. In the following, each contract Radixsort implements Sort.sort {
1
step will be examined in more detail. 2 mode efficient {
requires resource CPU {
3
A. Approximate functions frequency = 2.400 [MHz]
4
max time = f1 [ms]
Fig. 6 depicts the energy consumption across all possible 5
max energy = f2 [J] }
6
frequencies for sort invocations of the three investigated sort provides max response_time = time + x1
7
algorithms. As can be seen, for each algorithm a sweet spot }
8
frequency can be determined independently from the list size. 9 mode fastest {
requires resource CPU {
Itispossibletopredictthesweetspotfrequencybyapprox- 10
frequency = 3.000 [MHz]
imating a function of the energy consumption depending on 11
max time = f3 [ms]
12
the frequency using multiple linear regression and searching max energy = f4 [J] }
13
the minimum value of this function for a given list size. This provides max response_time = time + x2
14
task can be automated using R statistics tool. 15 }
}
Forthemeasurementsofradixsort,fourthgradepolynomial 16
functions approximate the measured values very precisely as Listing1. ExampleofaQCLcontractforradixsort.
shown in Table IV. The first five rows show functions for
10..50 millions elements, whereas the last row represents the
generic function E(freq,size)=a×freq+b×freq2+c×
C. Optimization
freq3 +d×freq4 +e+f ×listsize with an adjusted R2
of more then 99%. The minimum of this general function is One approach to compute the decision of which algorithm
at 2.4GHz for all list sizes, which is not the measured mean to use on which server is the application of an integer linear
sweet spot at 2.2GHz, but is less than 1% distant from it. program (ILP) as shown in Listing 2. For clarity, we only
The cause of this difference is the (small) deviation of the show an ILP example for the decision whether radix sort
approximated function and the closeness of the frequencies shall be executed on one of two servers in either the most
around the sweet spot frequency. energy-efficient or the fastest way. In the example, all values
Thus, to automatically determine a sweet spot frequency referring to server N1 correspond to the measurement values
on a target platform (unknown at design time), a developer shown in the last section for a sort request of 30 million
has to provide a (micro) benchmark for different algorithmic elements. The values referring to server N2 are not based on
implementations. Using the approach described above, the measurements,butintroducedtoshowthegeneralapplicability
system can compute the sweet spot frequency automatically. of the approach to multiple servers.
TheILPexamplecomprises4decisionvariablesand3usage
B. QoS Contracts
variables per server.The decision variables of the optimiza-
The Quality Contract Language – QCL [18] – allows to
capture the non-functional behavior of an implementation. A
contract in QCL specifies for an implementation of a task
min: energy#N1 + energy#N2;
1
(e.g.,radixsortforsort)pairsofnon-functionalprovisionsand //decide for one server and variant
2
requirements. If the requirements are fulfilled, the provisions b#rdx#eff#N1 + b#rdx#fast#N1 + b#rdx#eff#N2
3
areguaranteedtohold.Listing1depictsanexampleofaQCL 4 + b#rdx#fast#N2 = 1;
//approximated runtime per decision
contractfortheradixsortimplementationusedinthispaper.It 5
time#N1 = 1620b#rdx#eff#N1
specifies 2 modes, which are alternative pairs of requirements 6
+ 1164b#rdx#fast#N1;
7
and provisions. The two modes represent the most energy- //base load + decision-induced consumption
8
efficient and the fastest way to execute the algorithm. Thus, energy#N1 = 97 + 324b#rdx#eff#N1
9
for the first mode, the sweet spot frequency determined in 10 + 376b#rdx#fast#N1;