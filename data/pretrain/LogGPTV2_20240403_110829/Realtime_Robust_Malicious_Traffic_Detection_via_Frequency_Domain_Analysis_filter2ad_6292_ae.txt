0.9999
0.9999
0.9999
0.9999
0.9999
0.7964
0.9999
Whisper
FPR
0.0329
0.0046
0.0106
0.0796
0.0117
0.0083
0.2324
0.0001
0.0121
0.0109
0.0101
0.0115
0.1601
0.0091
AUC
0.9870
0.9962
0.9951
0.9391
0.9902
0.9922
0.9322
0.9999
0.9885
0.9915
0.9916
0.9910
0.9579
0.9905
AUC
0.9603
0.6028
0.8885
0.9732
0.9986
0.9826
0.7702
0.6909
EER
0.0396
0.3964
0.1114
0.0519
0.0014
0.0173
0.2716
0.3090
TPR
0.9813
0.0000
0.9999
0.0000
0.0003
0.9999
0.8913
AUC
0.9840
0.6134
0.9907
0.8774
0.8770
0.9942
0.9739
EER
0.0186
0.3954
0.0075
0.1271
0.1233
0.0071
0.1001
FPR
0.0033
0.4111
0.0069
0.1271
0.1233
0.0068
0.1001
-
-
0.9999
0.9999
0.9999
0.9999
-
-
0.9740
0.9448
0.9059
0.9255
-
-
0.0254
0.0551
0.0940
0.0801
-
-
0.0254
0.0551
0.0940
0.0801
0.9973
0.6397
0.0208
0.0015
0.0335
0.1270
0.1882
0.1774
0.9722
0.9202
0.8480
0.8373
0.0392
0.1239
0.1835
0.1758
-
-
0.0254
0.0078
0.0074
0.0155
0.4014
-
-
0.9999
0.9999
0.9999
0.9999
0.0000
-
-
0.0088
0.0081
0.0074
0.0179
0.3973
/
/
-
-
/
/
-
-
/
/
-
-
/
/
-
-
-
-
EER
0.0512
0.0047
0.0111
0.0798
0.0172
0.0093
0.2014
0.0001
0.0124
0.0123
0.0114
0.0122
0.1259
0.0095
(a) SSL DoS
(b) TLS Padding Oracle
Figure 3: Frequency domain features clustering results of
Whisper.
(a) SYN Flooding DoS (23.04 Mbps)
(b) IPID Side-Channel (0.138 Mbps)
Figure 4: ROC of high-rate attack: SYN DoS and low-rate at-
tack: IPID side-channel attack.
into the malicious traffic and disguise it as benign traffic for eva-
sion. The reason why we use TLS and UDP video traffic is that
it contributes to a high proportion of the benign traffic datasets,
i.e., around 35% and 13%, respectively. Injecting the traffic can sig-
nificantly interfere with traditional detection (see Figure 6). We
select and replay 7 malicious traffic patterns and mix them into
different ratio of benign traffic, i.e., the ratio of malicious traffic to
the benign traffic ranging between 1:1 and 1:8. We do not inject the
benign traffic with more ratio because the effectiveness of attacks
is already low at the ratio of 1:8. We average the detection results
with different ratio. Figure 6 shows the averaged detection accuracy
on different attacks. The detailed detection accuracy results can be
found in Appendix E (see Figure 9). We observe that the evasion
attacks with high benign traffic mix ratio are prone to evade the
detection. According to figure 6, we conclude that attackers cannot
evade Whisper by injecting benign traffic into the malicious traffic.
However, the attackers evade other detection systems.
For instance, Whisper has at most 10.46% AUC decrease and 1.87
times EER increase under the evasion attacks. However, Kitsune
has at most 35.4% AUC decrease and 7.98 times EER increase. Simi-
larly, attackers can effectively evade the detection of the traditional
flow-level detection system, especially injecting more benign traffic
with higher ratio. The evasion attacks, e.g, evasion OS scan and
evasion TLS vulnerabilities scan, lead to at most 11.59 times EER
increase under the flow-level methods (AUC ≤ 0.5). Thus, we can
conclude that the existing flow-level and packet-level detection
systems are not robust to the evasion attacks. Whisper has sta-
ble detection accuracy at different ratio, e.g., the averaged AUC
decrease is bounded by 3.0%, which is robust for evasion attacks.
Moreover, We use other evading strategies to validate the robust-
ness of Whisper (see Appendix E), e.g., injecting benign DNS, ICMP
traffic and manipulating packet size and rate.
In summary, Whisper can achieve robust detection because the
used frequency domain features represent robust fine-grained se-
quential information of traffic. Malicious traffic disguised as benign
traffic do not incur significant changes in the flow-level statistics.
Thus, the features of the malicious traffic in the flow-level methods
are the same to the benign flows. As a result, due to the invariant
features, packet-level and traditional flow-level detection is unable
to capture such attacks. For example, the packet-level methods (e.g.,
Kitsune) use the statistics as the context information. However, the
sequential information of the malicious traffic extracted by Whisper
are significantly different from the benign traffic. Thus, to our best
knowledge, Whisper is the first machine learning based method
that achieves robust detection under evasion attacks.
6.5 Detection Latency and Throughput
Detection Latency. To measure the latency, we replay the back-
bone network traffic datasets with different traffic rates (see Ta-
ble 4). For simplicity, we use the low-rate TCP DoS attack with
a 0.5s burst interval as a typical attack and measure the overall
0102030400102030NormalAbnormalCenters101520253035102030NormalAbnormalCenters0.00.10.20.30.40.5FalsePositiveRate0.50.60.70.80.91.0TruePositiveRateFSCFAEWhisperKitsune0.00.20.40.60.81.0FalsePositiveRate0.00.20.40.60.81.0TruePositiveRateFSCFAEWhisperSession 12C: Traffic Analysis and Side ChannelsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3440(a) AUC comparison (higher is better)
(a) Averaged AUC on different mix ratio (higher is better)
(b) EER comparison (lower is better)
(b) Averaged EER on different mix ratio (lower is better)
Figure 5: Performance of the automatic parameter selection
in comparison with manually selected parameters.
detection latency, i.e., the time interval between sending the first
malicious packet and detecting the traffic. The overall detection
latency includes the transmitting latency, the queuing latency, and
the processing latency. The cumulative distribution function (CDF)
of the overall detection latency is shown in Figure 7(a). With four
datasets, we find that the detection latency of Whisper is between
0.047 and 0.133 second, which shows that Whisper achieves real-
time detection in high throughput networks. In order to accurately
measure the processing latency incurred by Whisper, we replay the
low-rate TCP DoS dataset with a 0.5s burst interval to construct
a light load network scenario and measure the execution time of
the four modules in Whisper. The CDF of the processing latency
is shown in Figure 7(b). We observe that the processing latency of
Whisper exhibits uniform distribution because most of the latency
is incurred by polling per-packet features from the packet parser
module in the light load situation. Thus, we can conclude that the
averaged processing latency incurred by Whisper is only 0.0361
second, and the queuing latency raised by Whisper is the majority.
We also analyze the latency raised by each step of Whisper in
Figure 7(c). We see that the measured latency in each step is consis-
tent with the computational complexity analysis in Section 5.2. The
DFT, Modulus Calculation, and Log Transformation have similar
computational complexity and incur similar processing latency. The
most latency is raised from the packet encoding (i.e., 5.20 × 10−3
second on average). The statistical clustering module has averaged
processing latency of 1.30 × 10−4 second, which is significantly
lower than the packet encoding. We find that most of the latency is
incurred by the packet parsing module and the memory copy for
parsing per-packet features incurs the most latency.
Throughput. We replay four MAWI [69] backbone network traffic
datasets with the physical limit bandwidth of laser ports (20 Gbps)
to measure the throughput. We measure the throughput of Whisper
and FAE and validate that detection accuracy does not decrease
when reaching the maximum throughput. We run Kitsune with
the same hardware as Whisper and measure the offline processing
Figure 6: Detection accuracy under attacks with various
evading strategies.
speed, i.e., we ignore the packet parsing overhead in the online
processing of Kitsune, because it cannot handle high speed traffic.
The CDF of the throughput is shown in Figure 8. We find that Whis-
per achieves 11.35 Gbps to 13.22 Gbps average throughput, while
Kitsune achieves 112.52 Mbps. Whisper achieves high throughput
because it significantly reduces the processing overhead of the
machine learning. FAE achieves the averaged throughput ranging
between 11.28 Gbps and 13.18 Gbps, which is similar to Whisper.
Note that, FAE uses a similar auto-encoder model in Kitsune and
achieves 100 times higher throughput (though it has limited detec-
tion ability). We conclude that the frequency domain features used
in Whisper enable higher throughput than the packet-level meth-
ods. In summary, Whisper and FAE achieve the most throughput,
around 1.27 ×106 PPS, compared with other detection systems.
7 RELATED WORK
Machine Learning based NIDS. Machine learning based Network
Intrusion Detection Systems (NIDSes) can achieve higher detection
accuracy than the traditional signature based NIDSes [6, 35, 62, 64].
In particular, compared with the signature based NIDSes, they can
detect zero-day attacks that have not been uncovered [12, 22]. For
example, Antonakakis et al. [2], Nelms et al. [49], and Invernizzi et
al. [28] detect malware traffic by using statistical machine learning
approaches. Moreover, the specialized features of botnets have been
used in botnet traffic detection [16, 20, 27, 30]. Different from these
methods, Whisper detects various attack traffic including botnet
traffic online. Bartos et al. [4] developed an invariant of statisti-
cal features based detection via matrix transformations, which is
not scalable in large scale detection. Mirsky et al. [42] proposed
Kitsune that leveraged lightweight deep neural networks, i.e., auto-
encoders, to reduce the processing overhead. Whisper uses packet
encoding and DFT to compress the original per-packet features for
reducing feature redundancy. The compressed frequency domain