# 【技术分享】Android恶意软件分析
|
##### 译文声明
本文是翻译文章，文章来源：resources.infosecinstitute.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**翻译：**[ **开个小号** ****](http://bobao.360.cn/member/contribute?uid=167004554)
**预估稿费：200RMB（不服你也来投稿啊！）**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**目的**
这个练习涵盖了技术分析Android恶意软件通过使用一个定制的恶意软件样本在Android设备上运行时,将会reverse
shell给一个攻击者。我们将通过使用静态和动态分析技术分析完整功能应用程序。
**虚拟机使用：** Santoku Linux VM
**工具：** AVD Manager, ADB, Wireshark, dex2jar, apktool
**在这个实验中使用的分析工具：** bake_the_cake.apk, apktool, tcpdump,，
我们将通过创建一个模拟器，选择“Santoku->Development Tool”，然后点击“Android SDK Manager”。如下所示：
上述步骤将打开下面的窗口：
默认情况下，Santoku只有几个Android版本的图像。我们应该根据不同的要求来创建模拟器。如果您发现上面的图中，我们已经安装了“Android
4.4.2 ARM EABI V7ASystem ”。一切设置完毕，点击““Tools”菜单栏在顶部的窗口，然后单击“Manage AVDs”，如下图
所示。
这将如下图所示：
“Android Virtual Device(AVD) Manager”窗口。
正如你可以在上面的图中看到，我们已经配置了一个模拟器。现在，让我们创建我们选择的新的模拟器。点击“创建”，如图所示：
现在，让我们来选择适当的选项，如下图所示：
正如你可以在上面的图中看到，我们命名我们的模拟器为:“analysis_device。”于是，我们选择了具有“3.2寸HVGA”的设备能与更小的尺寸的模拟器。于是，我们选择了“Android
4.4.2-API Level19”作为我们的目标。CPU被选为ARM。内部存储容量为500 MB。最后，我们为SD卡提供了100 MB。
检查完毕后，然后单击“确定”按钮完成设置。
如果您正在使用并按照上面的步骤完成后，你会看到一个额外的虚拟设备，如下图所示
选择新创建的模拟器，然后单击“开始”按钮，你应该看到下面的对话框：
点击“启动”，并开始显示下面的进度条。
要有耐心等待一段时间，因为第一次启动模拟器可能需要较长的时间来启动，如下图所示
**静态分析**
静态分析涉及反编译应用程序并查看源代码，并对其进行分析，了解哪些恶意软件正在做什么。
让我们从分析AndroidManifest.xml文件开始。我们可以通过多种方式获得AndroidManifest.xml文件。让我们用apktool并使用下面所示的命令得到它。
    apktoolÐbake_the_cake.apk
但是，我们这样做之前，我们应该确保我们使用的是最新版本的apktool，然后删除1.apk
如果现有apktool已经过时，它可能无法分解我们的目标APK文件。
下面是步骤：
删除 “1.apk” 在文件夹 “/home/infosec/apktool/framework/” 使用如下命令
/home/infosec/apktool/framework/1.apk
现在，运行以下命令来分解apk文件：
    java -jar apktool_2.1.1.jar d bake_the_cake.apk
这个命令会创建一个apk文件名称的新文件夹。在我们的例子中，它是“ bake_the_cake ”。到该文件夹，如下面图中列出里面的文件和文件夹。
从运行以下命令，分析文件夹导航到新创建的bake_the_cake文件夹中。
    $ CD bake_the_cake
然后，运行LS命令列出当前文件夹内的文件和文件夹。
正如你可以在上面的图中看到，得到了它AndroidManifest.xml文件。让我们用下面的命令来查看它的内容，并查看是否有很有趣。
    vim AndroidManifest.xml
看着上面的内容，没有任何可疑。即使这个程序是不要求任何危险的权限。联网是这个应用程序所需的唯一权限，但是这并不能证明它是恶意的，因为大多数的应用程序，需要的大部分它们的功能是Internet权限。
如果您正在使用vim编辑器，按打开文件进行CTRL + C，然后输入！Q：关闭。
因此，我们需要做进一步的分析，以确认应用程序有任何恶意行为。
让我们深入挖掘通过反编译使用dex2jar＆JD-GUI应用程序。让我们先解压缩程序，如下面的图。
    $unzip bake_the_cake.apk
上述命令应在当前目录中创建附加的文件和文件夹。您可以使用“检查它的ls -l”命令，如图：
正如我们在上面的图中看到，我们从“
classes.dex”文件中提取。classes.dex文件是从开发人员编写Java代码。本来.java文件是使用传统的Java编译器javac的编译。此步骤生成.class文件。这些类文件进一步给予DX工具，它产生一个Dalvik虚拟机（DVM）中运行classes.dex文件。Classes.dex文件是编译的二进制，因此，我们不能以明文阅读。我们可以用dex2jar命令行工具来对DEX文件转换成一个jar文件。这些JAR文件可以用任何传统的Java反编译器，如JD-GUI被反编译。这是为了理解应用程序的源代码的一个重要步骤。dex2jar工具预装在Santoku.
我们可以运行以下命令来使用dex2jar：
    $ dex2jar classes.dex
正如我们在上面的图中看到，classes.dex文件已输出为classe_dex2jar.jar文件。
现在，我们可以使用任何传统的Java反编译器，从上面的jar文件得到的Java文件。让我们用JD-GUI，Santoku->Reverse
Engineering：
点击JD的GUI，它就会打开工具，如下面的图。
正如前面提到的，我们将使用这个工具从jar文件中获得的Java文件。因此，定位到““File->open”，然后选择classes_dex2jar.jar文件。这看起来如下所示。
点击open：
不错，我们可以看到包名com.infosecinstitute.analyze_me。我们还可以看到三个不同的类，其中包括MainActivity。我们点击MainActivity并浏览它。
浏览MainActivity显示了很多有趣的信息。首先，让我们来看看下面的一段代码。
有趣的是，有三种方法在上述的一段代码。getReverseShell()，因为它可能会作出与给出了一个 reverse
shell给攻击者一个方法的调用会出现危险。探究在此之前，让我们来看看其他两种方法copyFile()和changefilepermissions()。
下面的代码段是定义copyFile()方法。
这种方法实质上是复制一个文件名为NC的应用程序的资产目录/data/data/com.infosecinstitute.analyze_me/app_files/目录。目标目录本质上是应用程序的设备上的沙箱。
让我们明白下这是怎么搞的：
首先，我们看到的方法调用copyFile("NC");
在前面的代码片段。参数已经传递给localAssetManager.open()，它正在被打开。然后，该目标文件路径已建成.getPackageName();
给出当前包名。接下来的几行用于将文件复制到目标。
由于文件名是“NC”，也可能是APK内包装netcat的二进制文件。让我们切换到分析在终端上的文件夹，并检查从解压APK资产文件夹，查看属性。
下图显示了与这个名字的文件“NC”位于assets文件夹中。
我们还使用文件命令来查看的文件类型。运行“文件NC ”在assetss的文件夹中。输出应该如下图所示。