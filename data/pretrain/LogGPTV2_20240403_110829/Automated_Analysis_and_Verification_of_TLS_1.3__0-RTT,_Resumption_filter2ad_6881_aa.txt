title:Automated Analysis and Verification of TLS 1.3: 0-RTT, Resumption
and Delayed Authentication
author:Cas Cremers and
Marko Horvat and
Sam Scott and
Thyla van der Merwe
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Automated Analysis and Veriﬁcation of TLS 1.3:
0-RTT, Resumption and Delayed Authentication
Cas Cremers, Marko Horvat
Department of Computer Science
University of Oxford, UK
Sam Scott, Thyla van der Merwe
Information Security Group
Royal Holloway, University of London, UK
Abstract—After a development process of many months, the
TLS 1.3 speciﬁcation is nearly complete. To prevent past
mistakes, this crucial security protocol must be thoroughly
scrutinised prior to deployment.
In this work we model and analyse revision 10 of the
TLS 1.3 speciﬁcation using the Tamarin prover, a tool for
the automated analysis of security protocols. We specify and
analyse the interaction of various handshake modes for an
unbounded number of concurrent TLS sessions. We show that
revision 10 meets the goals of authenticated key exchange in
both the unilateral and mutual authentication cases.
We extend our model to incorporate the desired delayed
client authentication mechanism, a feature that is likely to be
included in the next revision of the speciﬁcation, and uncover
a potential attack in which an adversary is able to successfully
impersonate a client during a PSK-resumption handshake.
This observation was reported to, and conﬁrmed by, the IETF
TLS Working Group.
Our work not only provides the ﬁrst supporting evidence
for the security of several complex protocol mode interactions
in TLS 1.3, but also shows the strict necessity of recent sugges-
tions to include more information in the protocol’s signature
contents.
1. Introduction
The TLS protocol is used globally by millions of users on
a daily basis, serving as the core building block for Internet
security. However, TLS is also a very complex protocol with
many possible variants and use cases, which has complicated
thorough cryptographic analysis for decades. Although TLS
has received much attention since its deployment by Netscape
as SSL in 1995, it was not until the double menace of BEAST
[19] in 2011 and CRIME [20] in 2012 that the protocol
became the subject of intense analysis and academic study;
prior to the release of these attacks, we see a number of
relevant works spanning almost two decades [6], [7], [15],
[16], [28], [29], [31], [43], [44], [45], [54], [55]. Post-2011,
we see a comparable number of works in less than 5 years [2],
[3], [4], [5], [10], [11], [12], [13], [14], [18], [23], [26], [27],
[30], [34], [35], [37], [40], many representing great advances
This work was supported by the Engineering and Physical Sciences Research
Council [grant numbers OUCL/2013/MH, EP/K035584/1].
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Cas Cremers. Under license to IEEE.
DOI 10.1109/SP.2016.35
DOI 10.1109/SP.2016.35
470
470
on both the manual and automated fronts and resulting in
the discovery of many weaknesses.
The various ﬂaws identiﬁed in TLS 1.2 [17] and be-
low, be they implementation- or speciﬁcation-based, have
prompted the TLS Working Group to adopt an ‘analysis-
before-deployment’ design paradigm in drafting the next
version of the protocol, TLS 1.3 [48]. Most notably, the
cryptographic core of the new TLS handshake protocol is
largely inﬂuenced by the OPTLS protocol of Krawczyk and
Wee [35], a protocol that has been expressly designed to offer
zero Round-Trip Time (0-RTT) exchanges and ensure perfect
forward secrecy. Its simple structure lends itself to analysis
via manual and automated means, a beneﬁt that was deemed
desirable for TLS 1.3. Although the logic of the protocol has
been simpliﬁed, the addition of 0-RTT functionality as well
as the new resumption and client authentication mechanisms
has introduced new complexity.
The overall complexity of TLS 1.3 implies that to perform
a truly complete cryptographic analysis (either manual or
tool-supported) of the entire protocol would be a substantial
undertaking, and unlikely to be completed in time for the
release of TLS 1.3.
However, given the critical importance of TLS, it is
paramount that the TLS 1.3 protocol design is critically
analysed before the protocol is ﬁnalised and deployed, to
minimise the number of potential ﬂaws. Our work based on
tool-supported, symbolic veriﬁcation of the TLS 1.3 security
guarantees contributes towards this goal.
1.1. Contributions
Our main contribution is a more comprehensive treatment
of the TLS 1.3 speciﬁcation than previous works [18], [30],
[35]. Additionally, our formal model of TLS 1.3 serves as a
tool that can be extended and modiﬁed for future releases, and
therefore results in a longer-lasting beneﬁt to the designers
of the TLS protocol. We detail our contributions below.
Comprehensive analysis. One of the most relevant and
up-to-date analyses pertaining to TLS 1.3 is arguably the
analysis of OPTLS by its designers [35]. The authors note
that their analysis is not intended to cover the full TLS 1.3
speciﬁcation. In particular, they only consider the different
handshake modes in isolation. Also, they include neither
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:43 UTC from IEEE Xplore.  Restrictions apply. 
client authentication nor resumption. It is precisely this gap
that we aim to ﬁll with our work.
We formally model and analyse TLS 1.3 revision 10
(henceforth referred to as draft-101). Since the main
decisions on the TLS 1.3 design have been made by now, we
expect to be able to incorporate any future changes directly
into our analysis.
Our analysis complements the work from [35] and
previous works [18], [30] by covering the following aspects:
• The security of, and secure interaction of, the fol-
lowing handshake modes: regular (EC)DHE mode,
(Pre-Shared Key) PSK mode, PSK-DHE mode and
0-RTT mode.
• The PSK-resumption handshake when composed
with any acceptable initial handshake, namely, an
(EC)DHE handshake, a PSK handshake, a PSK-DHE
handshake and a 0-RTT handshake.
• The security of the proposed delayed authentication
mechanism in the context of all previous modes.
• A near-complete coverage of the state transitions in
the standard. Previous works have abstracted away
message components or subprotocols, or were devel-
oped before the newer mechanisms have crystallised.
For our analysis, we use the Tamarin prover [51], a state-of-
the-art tool for the symbolic analysis of security protocols.
The Tamarin framework enables us to precisely specify and
analyse the secrecy and complex authentication properties
of the various handshake modes. Furthermore, Tamarin’s
multiset-rewriting semantics is well-suited for modelling
the complex transition system implied by the TLS 1.3
speciﬁcation; the tool allows for analysing the interaction
of the assorted handshake modes as well as an unbounded
number of concurrent TLS sessions.
We consider a Dolev-Yao adversary model in which
the adversary can also reveal long-term private keys of
honest parties. Our Tamarin model includes both the client
authentication mechanism and session resumption, so our
property speciﬁcations go well beyond the basic session key
secrecy considered in [35].
We ﬁnd that draft-10 achieves the standard goals of
authenticated key exchange. In particular, we show that a
client has assurances regarding the secrecy of the established
session key, as well as assurances regarding the identity
of the server with whom it has established this key. The
server obtains equivalent assurances when authenticating
the client in both the standard way, and when using the
newly introduced 0-RTT mechanism. Our analysis conﬁrms
perfect forward secrecy of session keys and also covers the
properties of handshake integrity and secrecy of early data
keys. We verify these desirable properties in the presence
of composable handshake modes and an unbounded number
of concurrrent TLS sessions, something which has not been
done in previous TLS 1.3 analyses.
The discussion arising from the TLS Working Group
suggested a new delayed authentication mode was likely
1. We borrow this naming convention from [18].
471471
to appear in the next revision. Our exploration of the
initial proposal for this option [46] has resulted in the
discovery of a potential attack. Speciﬁcally, an adversary is
able to impersonate a client when communicating with a
server owing to a vulnerability in the client authentication
mechanism of the PSK-resumption handshake. Our attack
highlights the strict necessity of creating a binding between
TLS 1.3 handshakes.
.
Future prospects. The scope of our model and analysis
goes well beyond draft-10. As the ﬁnal modiﬁcations
are made to the TLS 1.3 speciﬁcations, the model will be
updated further and the analysis re-run. This will ensure
that no new errors are introduced with respect to current
properties, and will substantially simplify the analysis of
any new properties that may arise. Thus, we expect that our
analysis will help to inform and guide the ﬁnal stages of the
TLS 1.3 design.
Acknowledgements. We would like to thank Eric Rescorla
and Martin Thomson of Mozilla and the TLS Working Group
for their invaluable inputs to this work by way of numerous
clarifying conversations.
1.2. Related work on TLS 1.3
The 0-RTT mechanism of OPTLS, and hence of TLS 1.3,
is similar to that of Google’s Quick UDP Internet Connec-
tions (QUIC) protocol [36]. Lychev et al. introduce a security
model for what they term Quick Connections (QC) protocols
and analyse QUIC within this framework [39]. Although
they do not focus on TLS 1.3, they do point out that the
0-RTT mode of TLS ﬁts the deﬁnition of a QC protocol.
Fischlin and G¨unther also provide an analysis of QUIC [22]
by developing a Bellare-Rogaway style model for multi-stage
key exchange protocols.
Both QUIC and the TLS 1.3 handshake protocol can be
viewed as multi-stage key exchange protocols because the
communicating parties establish multiple session keys during
an exchange, potentially using one key to derive another.
Fischlin and G¨unther show QUIC to be secure within this
model and in work by Dowling et al. [18], two TLS 1.3
drafts, speciﬁcally draft-05 and draft-dh are analysed
using this framework. Although the authors showed that keys
output by the handshake protocol could be securely used by
the record protocol, at the time of writing, the TLS drafts did
not include a 0-RTT mode and resumption had not yet been
merged with the PSK mode. Kohlweiss et al. also produced
an analysis of draft-05 using a constructive-cryptography
approach [30].
Although there were changes including a reduction in
handshake latency, removal of renegotiation and a switch to
AEAD ciphers in the earlier drafts of TLS 1.3, it is not until
draft-07 that we see a radical shift in the design of the
protocol away from TLS 1.2. Hence, we argue that the results
described above may not easily transfer to later drafts. From
draft-07 onwards, we see the adoption of the OPTLS
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:43 UTC from IEEE Xplore.  Restrictions apply. 
protocol of Krawczyk and Wee [35] as the foundation for
TLS 1.3. Not only is there the inclusion of 0-RTT support and
a switch to a semi-ephemeral Difﬁe-Hellman exchange as is
the case in OPTLS, but also the new resumption mechanism
that makes use of PSKs.
1.3. Paper organisation
In Section 2 we introduce the main new features of the
TLS 1.3 protocol and its stated security goals. We describe
how we formally model the protocol and its complex set of
behaviours in Section 3. We proceed in Section 4 by formally
specifying a range of secrecy and authentication properties
that apply to different use cases, and analyse the protocol
with respect to these properties. We consider the addition of
client authentication in PSK mode in Section 5. We conclude
in Section 6, where we also discuss future work.
2. TLS 1.3: New mechanisms, stated goals, and
security properties
We introduce the new mechanisms of TLS 1.3 in com-
parison to TLS 1.2. We then present the protocol’s intended
security properties as described by the speciﬁcation.
2.1. Design
The main design goals for TLS 1.3 include [53]:
•
encrypt as much of the handshake as possible,
•
re-evaluate the handshake contents,
•
reduce handshake latency—one Round-Trip Time
(1-RTT) for full handshakes, zero Round-Trip Time
(0-RTT) for repeated handshakes, and
update the record protection mechanisms.
•
We now discuss how TLS 1.3 implements these four
requirements, as well as its key derivation procedures.
Handshake encryption. The motivation behind handshake
encryption is to reduce the amount of observable data to both
passive and active adversaries [53]. In contrast to TLS 1.2,
which only provides communicating entities with session
keys to protect application data, TLS 1.3 provides for the
establishment of additional session keys to be used for
resumption and handshake encryption purposes. Handshake
encryption begins immediately after the handshake keys have
been negotiated via a Difﬁe-Hellman (DH) exchange.
Handshake contents. As will be discussed in the following
section, the handshake structure has been reworked for
efﬁciency purposes. An additional server message has been
included to accommodate the event of a parameter mismatch,
and compression has been removed. Static DH and RSA
have been removed in favour of the PFS-supporting ﬁnite-
ﬁeld ephemeral Difﬁe-Hellman (DHE) and elliptic-curve
ephemeral Difﬁe-Hellman (ECDHE) key exchange modes.
RSA certiﬁcates are still being used for the transcript-signing
keys in both the DHE and ECDHE modes (alongside ECDSA
certiﬁcates). Server-side signatures have been mandated in
all handshake modes.
Handshake latency. The TLS 1.2 handshake required a two
Round-Trip Time exchange prior to communicating entities
being able to transmit application data. The handshake has
been reworked in TLS 1.3 to require just 1-RTT if no
parameter mismatches occur.
TLS 1.3 also includes a 0-RTT option in which the
client is able to send application data as part of its ﬁrst
ﬂight of messages, offering a clear efﬁciency advantage over
TLS 1.2. This functionality is enabled by a server providing
a long-term (EC)DH share. On future connections to the
same server, a client is able to use this share to encrypt early
data.
Additionally, the pre-existing mechanism for Pre-Shared
Keys (PSKs) has been extended to cover session resumption.
This mode also requires a single round trip, and less
computation than a full handshake. We describe its details
when discussing PSKs and session resumption.
Record protection mechanisms. The earlier versions of
TLS used the MAC-then-Encrypt general composition
scheme as a record protection mechanism. Despite not being
secure in general [9], the particular use of this scheme in
SSL was shown to be safe in practice by Krawczyk [31].
While it is still used today in TLS 1.2, there was a proposal
to replace it by the Encrypt-Then-MAC paradigm (cf. RFC
7366 [24]). Similarly, when Krawczyk [33] announced the
OPTLS protocol on the TLS mailing list, he stated it would
use Encrypt-then-MAC for record protection. Ultimately,
the TLS working group decided that TLS 1.3 would avoid
general composition schemes by only using block ciphers
that can operate in so-called AEAD modes (Authenticated
Encryption with Additional Data, cf. [41]). All non-AEAD
ciphers have thus been removed in TLS 1.3.
Key derivation. In contrast to TLS 1.2, TLS 1.3 employs
the use of handshake trafﬁc keys as well as application
trafﬁc keys. This keying material is derived from two secrets,
namely the ephemeral secret (es) and the static secret (ss).
In the 1-RTT (EC)DHE handshake, the es and the ss are
identical with the secret being derived from the ephemeral
client and server key shares. In a PSK handshake, these two
values are again identical and take on the value of the PSK.
In PSK-DHE mode, the es is derived from the ephemeral
client and server key shares and the ss is the PSK. In a 0-
RTT handshake, the es is again derived from the ephemeral
client and server key shares and the ss is computed using
the server’s semi-static key share and the client’s ephemeral
key share.
The secrets described above are also used as inputs to
the HMAC-based construction, HKDF [21], [32] in order
to derive a master secret ms, a resumption secret rs and a
ﬁnished secret fs. These secrets are derived according to
the schematic presented in Figure 1.
472472
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:43 UTC from IEEE Xplore.  Restrictions apply. 
C
S
ClientHello, ClientKeyShare
HelloRetryRequest
ClientHello, ClientKeyShare
ServerHello, ServerKeyShare, {EncryptedExtensions},
{ServerConﬁguration†}, {Certiﬁcate}, {CertiﬁcateRequest*},
{CertiﬁcateVerify}, {Finished}
{Certiﬁcate*}, {CertiﬁcateVerify*}, {Finished}
[Application data]
Figure 2. Full (EC)DHE handshake
is desired (CertificateRequest), and a signature on
all messages exchanged thus far (CertificateVerify).