# Table 10.1: Breakdown of Server (S) and Client (P) Computation Times

| Operation | S (ms) | P (ms) | Optimized S (ms) | Optimized P (ms) |
|-----------|--------|--------|------------------|------------------|
| Unlink    | -      | 78     | -                | 78               |
| Vrfy      | -      | -      | -                | -                |
| Enc       | -      | -      | -                | -                |
| Dec       | 28     | -      | 28               | -                |
| Ev        | -      | 3      | -                | 3                |
| Commit    | -      | -      | <1               | <1               |
| Enc       | 42     | -      | 42               | -                |
| Ve        | -      | 8      | -                | 8                |
| Cointoss  | <1     | <1     | <1               | <1               |
| Total     | 944    | 241    | 159              | 81               |

**Note:** The total cost is slightly less than that reported elsewhere due to rounding errors and not accounting for initialize/cleanup steps.

## Analysis of Computation Times

The computation times are fairly consistent for a fixed number of gates, but they increase as the number of gates (m) grows. This validates our claim that the pairings and exponentiations account for most of the overhead, rather than the garbling and evaluating of the policy. For example, with a 1,000 gate policy and 10 attributes, the server's computation time is 67 ms and the client's is 11 ms. In contrast, for a 100,000 gate policy with 200 attributes, the server's computation time is 957 ms and the client's is 176 ms.

### Detailed Breakdown for 100,000 Gate Policy with 200 Attributes

- **Server (S):**
  - The most significant overhead is from verifying the public key sent by the client, which takes 857 ms due to the 2m pairings required.
  - The next largest operation is encryption, which accounts for 82 ms.
  - Garbling the policy takes only 5 ms.

- **Client (P):**
  - The costliest operation is checking the correctness of the encryption sent by the server, which requires re-encrypting the m unopened wire-labels and takes 42 ms.
  - Randomizing the public key takes 78 ms.
  - Decryption is relatively cheap, requiring 28 ms.
  - Evaluating the garbled circuit takes 3 ms, demonstrating that the garbled circuit is not the bottleneck in terms of computation.

### Communication Time

As both the number of attributes and the number of gates grow, so does the running time. However, this growth impacts previous ABE formula-based solutions to a much greater degree. For all but extremely large policies (millions of gates), communication will typically not be a bottleneck in our system. Most of the server's communication time is spent sending the garbled circuit, while most of the client's time is spent receiving the garbled circuit and the ciphertext. We note that our network bandwidth of 200 Mbps is pessimistic; running our protocol on Amazon EC2 or other networks with 1 Gbps bandwidth will significantly reduce the communication overhead.

### Batching and Offline Computation

Most of the expensive operations, such as randomizing and verifying the public key, can be done offline or batched. We calculated an optimized computation time, as shown in Figure 10.3. In these experiments, we ignore the cost of the client randomizing its public key and the server garbling its policy, as both can be done in an offline stage. We implemented and benchmarked the batching techniques of Ferrara et al. [24], resulting in a roughly 5.4× improvement when batch verifying ten messages. Thus, in our experiments, we model a server operating over ten clients at a time by dividing the public key verification time by 5.4. This results in a 4.4× and 2× improvement in running time for the server and client, respectively.

### Example: Geolocation Policy

A realistic policy might involve a client succeeding if its geolocation (xU, yU) is within a certain distance d of the server’s location (xS, yS). The client’s geolocation credential may be issued with a certified timestamp, which can be checked by the policy. Such a policy would require a circuit computing \((xU - xS)^2 + (yU - yS)^2 < d^2\) and a smaller circuit verifying the timestamp. Using a 64-bit input and the CBMC circuit compiler [33], this function can be compiled into a circuit containing approximately 20,000 gates. As demonstrated by our performance results, the cost of the corresponding garbled circuit is negligible compared to the public key operations required by the server and client. In contrast, an ABE-based solution would require converting the policy circuit into a very large formula, which is impractical in most settings.

## Acknowledgments

This work was supported by the Office of Naval Research (ONR) contract number N00014-14-C-0113. Part of this work was conducted while the authors were visiting the Simons Institute for the Theory of Computing, supported by the Simons Foundation and by the DIMACS/Simons Collaboration in Cryptography through NSF grant #CNS-1523467. Alex J. Malozemoﬀ's work was partially supported by the National Defense Science and Engineering Graduate (NDSEG) Fellowship, 32 CFG 168a, awarded by DoD, Air Force Office of Scientific Research.

## References

[References listed as provided]

---

This version of the text is more structured, clear, and professional, with a detailed breakdown and analysis of the computation and communication times.