[40] J. Shao and Z. Cao. Cca-secure proxy re-encryption without pairings. In Interna-
tional Workshop on Public Key Cryptography, pages 357–376. Springer, 2009.
[41] J. Shao and Z. Cao. Multi-use unidirectional identity-based proxy re-encryption
from hierarchical identity-based encryption. Information Sciences, 206:83–95,
2012.
[42] R. Steinfeld, S. Ling, J. Pieprzyk, C. Tartary, and H. Wang. Ntrucca: How to
strengthen ntruencrypt to chosen-ciphertext security in the standard model. In
Public Key Cryptography–PKC 2012, pages 353–371. Springer, 2012.
Inter-domain identity-based proxy re-
encryption. In International Conference on Information Security and Cryptology,
pages 332–347. Springer, 2008.
[44] H. Wang, Z. Cao, and L. Wang. Multi-use and unidirectional identity-based proxy
[43] Q. Tang, P. Hartel, and W. Jonker.
[48] B. Waters.
re-encryption schemes. Information Sciences, 180(20):4042–4059, 2010.
[45] L. Wang, L. Wang, M. Mambo, and E. Okamoto. New identity-based proxy re-
encryption schemes to prevent collusion attacks. In International Conference on
Pairing-Based Cryptography, pages 327–346. Springer, 2010.
[46] B. Waters. Efficient identity-based encryption without random oracles.
In
Advances in Cryptology–EUROCRYPT 2005, pages 114–127. Springer, 2005.
[47] B. Waters. Dual system encryption: Realizing fully secure ibe and hibe under
simple assumptions. In Advances in Cryptology-CRYPTO 2009, pages 619–636.
Springer, 2009.
In Advances in
Cryptology–CRYPTO 2012, pages 218–235. Springer, 2012.
[49] H. Wee. Dual system encryption via predicate encodings. In Theory of Cryptog-
raphy, pages 616–637. Springer, 2014.
[50] S. Yu, C. Wang, K. Ren, and W. Lou. Attribute based data sharing with attribute
revocation. In Proceedings of the 5th ACM Symposium on Information, Computer
and Communications Security, pages 261–270. ACM, 2010.
[51] Z. Yu, M. H. Au, Q. Xu, R. Yang, and J. Han. Leakage-resilient functional encryp-
tion via pair encodings. In Australasian Conference on Information Security and
Privacy, pages 443–460. Springer, 2016.
Functional encryption for regular languages.
A PARTIAL PROOF OF THEOREM 4.1
Lemma A.1.
|Gk−1AdvA (1λ ) - Gk AdvA (1λ ) | ≤ 2AdvCPAB1
(1λ )
+ 4AdvSD2
B2
(1λ ) + AdvCMHB3
(1λ ) , 1 ≤ k ≤ q1 .
Proof. In order to prove Lemma A.1, we consider the following
two conditions.
• Condition 1: The k-th key query to O0
in Phase 1 is a re-
encryption query about rkΠ0 .X→Πi . Y such that R(Π0.X , Π0.Y∗)
K
= 1, where Π0.Y∗ is the ciphertext attribute in the challenge
ciphertext.
• Condition 2: Otherwise.
The proof structure is shown in Fig. 5. We will use two Corollaries
(Corollary A.1 and Corollary A.6) to show that in both Condi-
tions, the difference between the advantage of adversary A in
Gamek−1 and Gamek is negligible.
In Condition 1:
Corollary A.1.
|Gk−1AdvA (1λ ) - Gk AdvA (1λ )| ≤ 2qAdvCPAB1 (1λ )+
2AdvSD2
B2
(1λ ), 2 ≤ k ≤ q1.
Gk−1
C1
C2
1
k,1
G
2
k,1
G
1
k,2
G
1
k,3
G
2
k,2
G
Gk
Figure 5: C1 and C2 are the abbreviations of Condition 1 and Con-
dition 2 respectively.
Proof. In order to prove Corollary A.1, we define a sequence
of games between Gamek−1 and Gamek. Notably, in this phase of
proof, we assume that the challenge ciphertext has been changed
to be semi-functional. Here we only focus on how to change all
queried keys to be semi-functional type-3.
Game1
k,1 : C answers the k-th key query rkΠ0 .X→Πi .Y to O0
Phase 1 as follows.
⃗k (0,⃗r′, ⃗h)
( ⃗rk, Πi . ⃗C) = ((Π0.SKX · д
1
$← MΠi
.
where δ, U
k,2 : C answers the k-th key query rkΠ0 .X→Πi .Y as follows.
)H (δ ), Πi .Enc(Πi .PK, Πi .Y , U ))
)H (δ ), Πi .Enc(Πi .PK, Πi .Y , U ))
( ⃗rk, Πi . ⃗C) = ((Π0.SK
Game1
in
K
Game1
where δ, U
k,3 : C answers the k-th key query rkΠ0 .X→Πi .Y as follows.
)H (δ ), Πi .Enc(Πi .PK, Πi .Y , U ))
( ⃗rk, Πi . ⃗C) = ((Π0.SK
type2
X
$← MΠi
⃗k (0,⃗r′, ⃗h)
·д
1
.
type3
X
$← MΠi
⃗k (0,⃗r′, ⃗h)
·д
1
.
where δ, U
Claim A.2.
1 ≤ k ≤ q1.
|Gk−1AdvA (1λ ) - G1
k,1AdvA (1λ )| ≤ qAdvCPAB1 (1λ ),
N
$← Z n
, computes e (д1, д1)α and д
Proof. If there is an adversary A whose advantage is not neg-
ligible in these two games, then we can construct an algorithm
B who will break the IND-CPA security of one of the underlying
target ABE scheme used for encrypting the hiding factor δ in ⃗rk.
B is given PK∗ at the beginning of game and B randomly guesses
d ∈ [q], and returns PK∗ to A’s at its d-th setup queries to OSetup.
Then B runs (G, GT , N , p1, p2, p3) ← G(1λ ), n ← Param(k), picks
$← ZN , ⃗h
⃗h1 , gives the public
α
key Π0.PK of Π0 to A, where Π0.PK = (pk, д1, д3, e (д1, д1)α , д
⃗h1 ).
Phase 1: For all queries to OSetup (Πi )(i (cid:44) d), B runs algorithm
(Πi .PK, Πi .MSK) ← Πi .Setup (1λ) (i ∈ [q]) to setup this
scheme. Observe that B can also answer those queries for
oracles OK and Ocor for scheme Πi(i (cid:44) d). For those secret
key queries to OK (Πd , Πd .X ), B forward these queries to
its own challenger and returns the output for A. If A makes
query about Ocor (Πd ), B aborts this simulation. When A
makes the j-th key query to O0
, which is either a secret key
K
query about Π0.Xj or a re-encryption key query from Π0.Xj
to Πi .Y, B does as follows:
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea669Π0.SKXk
$← ZN , computes
Π0.SKXj
• Case 1: j  k. For all j-th (j > k) queries made by A, B
generates normal type secret keys or the corresponding
normal re-encryption keys.
⃗k (0,⃗r′, ⃗h)
⃗rk = (Π0.SKXk · д
1
$← MΠi
$← Z n
N , δ0, δ1
· д
R3
3 ,
)H (δ0) .
Challenge Phase: A outputs M0, M1, Π0.Y∗, B computes
ˆ
⃗s, ⃗h)
⃗C1 = д⃗c (⃗s, ⃗h)
1
· д⃗c (
2
,
C0 = Mb × e (д1, д1)αs
where b
$← Z
sw2), ˆ
⃗s
.
$← {0, 1},(⃗c; w2) ← Enc2(Π0.Y∗, N ), ⃗s = (s,s1, . . .,
w2+1
N
Phase 2: B does the same as in Phase 1, except that for any query
to O0
, B generates the corresponding normal secret keys.
If the key query is a re-encryption key query, B then runs
K
the algorithm RE-KeyGen, and returns the result to A.
= b.
k,1 for A.
′, and A wins if b
′
Guess phase: A outputs a guess b
Then we analyze that B simulates Gamek−1 or Game1
• If Πi . ⃗C ← Πi .Enc(Πi .PK∗, δ0, Πi .Y ), then B simulates Gamek−1
for A.
• If Πi . ⃗C ← Πi .Enc(Πi .PK∗, δ1, Πi .Y ), as δ0 and δ1 are inde-
pendent and uniformly distributed in MΠi
. Hence, given
⃗rk j, Πi . ⃗C can be viewed as the encryption of a randomness.
In this case, B simulates Game1
k,1 for A.
□
(1λ ),
Claim A.3.
1 ≤ k ≤ q1.
|G1
k,1AdvA (1λ ) - G1
k,2AdvA (1λ )| ≤ AdvSD2
B2
Proof. If there is an adversary A can distinguish Game1
k,1 and
k,2, we will build an algorithm B who can break Assumption
Game1
SD2. On input a problem instance (G, GT , N , e, д1, Z1Z2, д3, W2W3,
T ), B works as follows:
Setup Phase: B runs n ← Param(k), computes Π0.PK to A, where
Π0.PK = (д1, д3, e (д1, д1)α , д
⃗h1 ).
Phase 1: For all OSetup(Πi ) made by A in this phase, B generates
the corresponding target scheme Πi via (Πi .PK, Πi .MSK) ←
Πi .Setup(1λ ) (i ∈ [q]). Obviously, B can also answer those
queries for oracles OK , and Ocor for scheme Πi. When A
makes the j-th key query to O0
• Case 1: j  k. In this case, B generates normal secret key
or normal re-encryption key to A.
Challenge phase: A outputs M0, M1 ∈ GT and Π0.Y∗. B runs
(⃗c; w2) ← Enc2(Π0.Y∗, N ), picks ⃗s = (s, s1, . . . , sω2) $← Z
ω2+1
,
N
$← ZN , computes challenge ciphertext Π0.CT = (C0, C1)
b
as follows:
C0 = e (Z1Z2, д1)αs · Mb
Phase 2: B does the same as in Phase 1, except that for any key
query to O0
or
the corresponding re-encryption key rkΠ0 .Xj→Πi .Y ← RE-
K
KeyGen(Π0.PK, Π0.SKXj
, B generates a normal secret key Π0.SKXj
C1 = (Z1Z2)c(s,h)
, Πi .Y, Πi .PK).
′, and A wins if b
Guess phase: A outputs a guess b
$← Gp1p3 or Gp1p2p3, we denote it as T = д
As T
t1
1 д
3 . Observe that
t3
t2
t1
2 д
д
1 д
• If T ∈ Gp1p3, then
′
= b.
3 or T =
t3
t1⃗k (α, ⃗h,⃗r )
⃗rk = д