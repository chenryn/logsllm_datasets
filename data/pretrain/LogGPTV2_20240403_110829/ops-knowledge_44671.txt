Building Python packages (such as NumPy, SciPy, Matplotlib, h5py, etc.) on one Linux distribution (e.g., Ubuntu) and then running them on another (e.g., CentOS) can indeed present some challenges. This is because different distributions may have different versions of system libraries and dependencies, which can lead to incompatibilities.

In your case, where your personal computer is running Ubuntu and the computing cluster is running CentOS, you should consider the following:

1. **Compatibility**: Ensure that the compiled binaries are compatible with the target system. This means checking for differences in the versions of shared libraries, such as `glibc`, and ensuring that the binary formats (e.g., `.so` files) are compatible.

2. **Packaging Format**: Use a packaging format that is suitable for both distributions. For example, you can use `wheel` files (`.whl`), which are platform-independent and can be installed using `pip`.

3. **Environment Management**: Consider using tools like `virtualenv` or `conda` to create isolated environments. These tools can help manage dependencies and ensure that the environment is consistent across different systems.

4. **Static Compilation**: If possible, compile the packages statically. This reduces dependency on the specific versions of shared libraries, but it can increase the size of the binaries and may not always be feasible.

5. **Containerization**: Another approach is to use containerization tools like Docker. You can build a Docker image on your Ubuntu machine and run it on the CentOS cluster. This ensures that the environment is identical and eliminates compatibility issues.

Hereâ€™s a more detailed step-by-step approach:

1. **Build the Packages**:
   - On your Ubuntu machine, install the necessary development tools and libraries.
   - Build the Python packages using `pip` or `setuptools`.

2. **Create a Wheel File**:
   - Use `pip wheel` to create a wheel file for each package. For example:
     ```sh
     pip wheel numpy scipy matplotlib h5py
     ```

3. **Transfer the Wheel Files**:
   - Copy the generated `.whl` files to the CentOS machines.

4. **Install the Packages**:
   - On the CentOS machines, install the wheel files using `pip`:
     ```sh
     pip install /path/to/numpy-*.whl /path/to/scipy-*.whl /path/to/matplotlib-*.whl /path/to/h5py-*.whl
     ```

By following these steps, you can minimize the risk of compatibility issues and ensure that the packages work correctly on the CentOS machines in your computing cluster.