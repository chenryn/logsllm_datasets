    ]
); 
分离加载
在模块较多的情况下，webpack会将模块打包成⼀整个JS模块⽂件；并使⽤ Window 对象的 we
bpackJsonp 属性存储起来。然后通过 push() ⽅法传⼊模块。
如下：
格式为：
  (window["webpackJsonp"] = 
   window["webpackJsonp"] || [] ).push([ 
       ["xx"], { 
                              "module":function(){} 
  }  
  ]);
运⾏结果：可以理解为appen追加内容，向webpackJsonp属性追加了[xx],和mod数组
总结
通过两个加载器的两个例⼦可以看出，加载器的重要性；webpack站点能否成功解析，是
围绕着loader加载器和模块资源进⾏的，加载器好⽐是⼀⼝锅，⽽模块好似⻝材；将不⼀
样的⻝材放⼊锅中，烹饪的结果都是不⼀样的。
WebPack实战
分析加密
Webpack站点分析的思路主要以下两点：
1. ⾸先找到⻝材，也就是定位到加密模块
2. 其次找到锅，loader加载器
3. 使⽤加载器去加载模块
在这⾥的的难点就是定位加密模块，因为调⽤加密的地⽅肯定是只有固定的⼀两个点，如：登
录提交。⽽加载器则什么地⽅都在调⽤（⽹站图⽚、css、js等资源  都是通过加载器加载出来
的）
在上⼀⽂《JS逆向｜40分钟视频通杀⼤⼚登陆加密》视频中已经讲解了常规加密的快速定位办
法，在webpack站点中使⽤这种定位办法也有概率可能会有效，其实加密点也是有规律的，
如：
//1. 
xxxxx{ 
    a:e.name, 
    data:e.data, 
    b:e.url, 
    c:n 
} 
这种键值对格式的跟ajax请求⻓得很相似，有可能是请求赋值的地⽅，也不绝对，只是⼤家注
意就好。
访问站点右键源码就能发现这是⼀个webpack⽹站，数据并不存在于源码之中，是通过XHR获
取的JSON数据。
发现是这么⼀个URL请求的：
https://spa2.scrape.center/api/movie/?limit=10&offset=0&token=ODkxMjNjZGJhYjExNjRkYTJiMmQ
翻⻚观察发现， limit 固定不变， offset 每次增加 10 。两个参数分别是展示的数量与展
示的开始位置， token 是什么信息暂时未知，但是是必须要解开是。
通过XHR⽹络断点对所有XHR请求URL进⾏匹配，只要URL内包含 api/movie 关键词就进⾏
下断。
成功断下会展示具体在哪个uRL断的
观察堆栈挨个找
具体找法视频内会详细讲，⽂字太麻烦了 :sleepy:，⼀系列操作之后，定位到了加密位置 onFe
tchData :
Object(i["a"])(this.$store.state.url.index, a) 
this.$store.state.url.index 和 e 分别是 /api/movie ， 0 （ url 中的 offset 翻⻚
值）
加密算法也就是： Object(i["a"])  ⽅法
现在把i()的内容扣下来就搞定了，但是 i ⽅法⾥有 n 的调⽤
 var o = n.SHA1(r.join(",")).toString(n.enc.Hex), 
 c = n.enc.Base64.stringify(n.enc.Utf8.parse([o, t].join(","))); 
主要就是这两句， n 也是我们需要的，查找⼀下 n 得值来源，把 n 也扣取下来
 var n = r("3452"); 
r ⼜是啥？下个断点重新运⾏看看。
r 如果跟过去发现是⼀个加载器⽅法：
    function c(t) { 
        if (r[t]) 
            return r[t].exports; 
        var n = r[t] = { 
            i: t, 
            l: !1, 
            exports: {} 
        };
        return e[t].call(n.exports, n, n.exports, c), 
        n.l = !0, 
        n.exports 
    }
⽽ r("3452")  跟过去，发现很多调⽤的 r(xxx) 的
这种情况下很多依赖类调⽤，如果扣不全很可能缺少某个类从⽽导致报错⽆法运⾏；在依赖少
的情况下可以选择缺啥补啥的原则，缺少什么⽅法就去找什么⽅法。依赖多的情况下也可以选
择把js代码全都摘下来，这样不管有没有⽤到的⽅法我代码⾥都有。但是⼗⼏万⾏代码运⾏肯
定会影响性能，具体优化办法后续会说明的。
扣取代码
由于案例站点依赖⽐较多，所以只能演示全扣的办法，⾸先我们把⼿上的信息整理⼀下：
加密⽅法为 ：e = Object(i["a"])(this.$store.state.url.index, a); 
// 
⽽ Object(i["a"]) 在“7d29”模块⾥，为： 
     function i() { 
            for (var t = Math.round((new Date).getTime() / 1e3).toString(), e = arguments
                r[i] = arguments[i]; 
            r.push(t); 
            var o = n.SHA1(r.join(",")).toString(n.enc.Hex) 
              , c = n.enc.Base64.stringify(n.enc.Utf8.parse([o, t].join(","))); 
            return c
        } 
// 
⾥⾯⼜⼜n的依赖调⽤， 为：r("3452"); 
// 
r 为：加载器 
   function c(t) { 
        if (r[t]) 
            return r[t].exports; 
        var n = r[t] = { 
            i: t, 
            l: !1, 
            exports: {} 
        };
        return e[t].call(n.exports, n, n.exports, c), 
        n.l = !0, 
        n.exports 
    }
// 
“3452"为模块⽅法： 
       3452: function(t, e, r) { 
        (function(e, n, i) { 
            t.exports = n(r("21bf"), r("3252"), r("17e1"), r("a8ce"), r("1132"), r("72fe"
        } 
        )(0, (function(t) { 
            return t 
        } 
        ))
    }
3452 模块调⽤的其他依赖模块太多，直接选择把 chunk-4136500c.f3e9bb54.js ⽂件的所
有的模块拷⻉下来命名为： demo-model1.js , window 对象并不存在编译器中，记得 var w
indow=global 声明⼀下
把加载器扣出来，然后使⽤ require() 导⼊模块⽂件，然后设置⼀个全局变量 _c  ，将加载
器 c 赋值 _c 导出运⾏可以发现报错：
第⼆个报错提示： at Object.3846 (d:\⽂稿\Js逆向\demo-model1.js:727:9)  模块⽂件的
727 ⾏报错
跟过来 727 ⾏发现⼜有其他模块调⽤，应该是缺少了  r("9e1e") 或者 r("86cc") 导致的
报错，
果然搜索也只有⼀个调⽤，没有声明的地⽅。那么⼜得取扣其他⻚⾯代码了。
全局搜索⽹⻚发现， 86cc 模块的在 chunk-vendors.77daf991.js  ⽂件中被声明了，我们也
选择将这⽂件的所有模块拷⻉下来并命名为： demo-module2.js 。这两个扣完在编译器中基
本也不差模块了，两个js⽂件全都扣下来了。
⾃吐算法
上⾯完整分析了模块与加载器，可谓是你中有我我中有你；由于所有模块都需要经过加载
器后调⽤，所以根据这点特征；可以在调⽤某个加载模块时，设置⼀个全局变量，hook
所有接下来要调⽤的模块存储到变量后导出；
hook有⼀定的局限性，只能到加密⽅法调⽤附近进⾏hook。
window._load = c; 
window._model =  t.toString()+":"+(e[t]+"")+ ","; 
c = function(t){ 
    window._load = window._load + t.toString()+":"+(e[t]+"")+ ","; 
     return window._load(t); 
} 
⾃动化 | Playwright
[Playwright ofﬁcial doc ](Fast and reliable end-to-end testing for modern web apps |
Playwright)
站点源码： Burpy｜⼀款流量解密插件 ，在不扣去加密算法时直接就进⾏爆破：
简单修改⼀下，将账户和密码都为123的密⽂放在后台固定写死，如果前端账户和密码都为
123就返回密⽂，不然返回error
安装好 Playwright 后cmd输⼊ python -m playwright codegen  ，会弹出⼀个浏览器，访
问要爆破的URL。⾛⼀遍登录流程后， Playwright 会⾃动⽣成流程代码。
from playwright.sync_api import Playwright, sync_playwright, expect 
def run(playwright: Playwright) -> None: 
    browser = playwright.chromium.launch(headless=False) 
    context = browser.new_context() 
    # Open new page 
    page = context.new_page() 
    # Click body 
    page.locator("body").click() 
    # Go to http://localhost:9988/ 
    page.goto("http://localhost:9988/") 
    # Click input[name="userName"] 
    page.locator("input[name=\"userName\"]").click() 
    # Fill input[name="userName"] 
    page.locator("input[name=\"userName\"]").fill("123") 
    # Click input[name="passWord"] 
    page.locator("input[name=\"passWord\"]").click() 
    # Fill input[name="passWord"] 
    page.locator("input[name=\"passWord\"]").fill("345") 
    # Click input[type="submit"] 
    page.locator("input[type=\"submit\"]").click() 
    # --------------------- 
    context.close() 
    browser.close() 
with sync_playwright() as playwright: 
    run(playwright) 
上⾯代码实现很简单，主要的数据部分就是 fill() ⽅法，简单修改⼀下代码将账户密码变量
传⼊过去，然后做个循环即可。⾄于判断回显使⽤ page.on() 对 response 进⾏监听，根据
响应⻓度，密码错误回显为error五个字符⻓度，⼤于5则认为成功
运⾏结果：账户密码为123，123，加密密⽂为： PomtfmGnIAN54uvLYlgbH+CN/3mhNQdaAR/7
+vFOAuU=
关于接⼊验证码就不演示了，第三⽅像超级鹰这类的平台都已经将识别模块打包好，导⼊简单
修改就能⽤了，⽹上⽂章也相当多。
⻓按⼆维码识别关注我吧
往期回顾
JS逆向｜40分钟视频通杀⼤⼚登陆加密
Burpy｜⼀款流量解密插件
使⽤易语⾔开发⼀款远控软件
收录于合集 #JS逆向 4
喜欢此内容的⼈还喜欢
下⼀篇 · Burpy｜⼀款流量解密插件
web⽇志⾃动化分析 ⽂末附福利优惠
轩公⼦谈技术
Python包管理⼯具之 PDM
运维开发故事
22个ES6知识点汇总，爆肝了
前端有道