# Sleak: Automating Address Space Layout Derandomization

## Authors
- Christophe Hauser¹
- Jayakrishna Menon¹,²
- Yan Shoshitaishvili²
- Ruoyu Wang²
- Giovanni Vigna³
- Christopher Kruegel³

¹ Information Sciences Institute, University of Southern California  
² Arizona State University  
³ University of California, Santa Barbara

## Sleak in a Nutshell

### What
Sleak automates the process of discovering address leaks in binary programs. It can detect both partial and indirect leaks, such as leaking some bits of an address.

### How
Sleak performs static analysis and symbolic execution to generate precise expressions of what is being leaked.

### Why
Sleak helps attackers bypass ASLR (Address Space Layout Randomization) by recovering bits of leaked addresses.

## Background: Exploiting Memory Corruption Bugs on Modern OS Platforms

### The C Programming Language
- Almost 50 years old.
- One of the top 10 programming languages used in 2019.
- A significant portion of our software stacks are still written in C (and C++).
- Compiles to binary and runs efficiently.

### Memory Safety
- Despite its age and efficiency, C remains prone to memory corruption bugs.
- These bugs, such as buffer overflows and arbitrary writes, remain very common and are the most exploited class of bugs.

## Mitigations

### Non-Executable Data Pages
- **W^X (Write xor Execute)**: Ensures that a page cannot be both writable and executable.
- **DEP (Data Execution Prevention)**: Prevents code from being executed in non-executable regions.

### Compiler-Level and OS-Level Mitigations
- **2003**: OpenBSD’s W^X
- **2004**: DEP in Microsoft Windows
- **2005**: ASLR in Linux
- **2007**: ASLR in MacOS and Windows
- **Return-Oriented Programming (ROP)**: A technique used to execute code in the presence of non-executable data pages.

### Address Space Layout Randomization (ASLR)
- **ASLR** randomizes the base address of `.text`, `.data`, heap, stack, and memory mappings.
- Attackers need pointer leaks to bypass ASLR effectively.

### Pointer Leak Example
Consider the following code:
```c
char *buf;
int x;
while (i < size) {
    b = buf[i];
    ...
}
```
If `i` is controlled by the attacker, an out-of-bounds (OOB) read can leak the address of `buf`.

### ASLR Weaknesses
- Leaking a single address is often enough to recover the layout of an entire module.
- The entropy provided by ASLR is limited by practical constraints, such as user/kernel separation and memory region placement.

### Entropy in Memory Regions
- **32-bit Architecture**:
  - Stack: 19 bits
  - Heap: 13 bits
  - Mmap: 8 bits
- **64-bit Architecture**:
  - Stack: 30 bits
  - Heap: 28 bits
  - Mmap: 28 bits

## Sleak in Detail

### Assumptions
- Stripped (Linux) binaries.
- Standard input/output implementations.
- Standard compiler and calling conventions.

### Attacker Model
- The attacker has access to the binary and can observe program outputs.

### Challenges
- **Source Code vs. Binary**:
  - Source code contains types, variable names, functions, etc.
  - Binary contains registers, memory locations, basic blocks, etc.

### Analysis Techniques
- **Static Analysis**: Scalable but imprecise.
- **Symbolic Execution**: Precise but unscalable.
- **Dynamic Analysis**: Precise but with low coverage.

### Workflow
1. **Path Selection**
2. **Address Identification**
3. **Leak Identification**
4. **De-randomization**

### Static Analysis: Path Selection and Address Identification

#### 1. Output Function Identification
- **Control-Flow Recovery**: Identify statements corresponding to output function calls and mark them as sinks.

#### 2. Address Identification
- **Static Backward Slicing**: Locate program statements defining addresses and consider them as sources.
- **Address Inference Rules**:
  - Use known information (GOT, relocations, external function prototypes).
  - Leverage instruction semantics (load and store operations).
  - Check if the value falls within specific memory regions (`.text`, `.data`, heap, stack, or memory mappings).

#### 3. Leak Identification
- **Symbolic Execution**: Analyze paths between sources and sinks.
- **Expression Analysis**: Flag expressions that depend on an address.

#### 4. De-randomization
- **Remote Attacker Observation**: The attacker observes the output `ok` of the program.
- **Constraint Solver**: Using a constraint solver, the attacker guesses possible values for the leaked address.

### Evaluation

#### Experimental Setup
- **Test Cases**:
  - 80 CTF binaries (Deconf quals 2012-2018)
  - OverlayFS (Linux Kernel)
  - libXSLT (large library used by Firefox and Chrome)
- **Tools**:
  - angr (built-in analyses + custom module)
  - Lightly modified Qemu
  - Xeon E5-1650 v4 @ 3.60GHz CPUs and 64GB RAM

#### Ground Truth Data
- Collected from CTF writeups, manual analysis, and the Common Vulnerabilities and Exposures (CVE) database.
- For complex code bases like libXSLT and OverlayFS, dynamic execution was used to initialize the program state.

#### Results Summary
| Binary | CFG Nodes | Functions | Sinks | Leak Detected | Ground Truth |
|--------|-----------|-----------|-------|---------------|--------------|
| 0x00ctf_17_left | 72 | 496 | 1 | ✓ | ✓ |
| a5afefd29d5dc067ed6507d78853c691 | 200 | 318 | 6 | ✓ | ✓ |
| defcon_16_heapfun4u | 327 | 76842 | 505 | ✓ | ✓ |
| ez_pz | 1981 | 191 | 3 | ✓ | ✓ |
| pwn1 | 3 | 11 | 1 | ✓ | ✓ |
| int3rrupted | 1 | 3 | 1 | ✓ | ✓ |
| libXSLT | 4 | 27 | 27 | ✓ | ✓ |
| Overlayfs | 27 | 27 | 27 | ✓ | ✓ |

### Limitations
- **Complex Data Structures**: Tracking data dependencies on long code paths is challenging.
- **Static vs. Dynamic Aspects**: Handling runtime binding and other dynamic aspects of code.
- **State Explosion**: Managing paths with complex loops and symbolic strings.
- **Environment Models**: Accurately modeling system calls and other environmental factors.

### Stumbling Blocks
- **Data Structure Recovery**
- **Pointer Aliasing**

### Conclusion
Sleak enables attackers to recover information about the memory layout of applications even in the presence of address space randomization. It is the first model to reason about indirect address leaks at the binary level. We evaluated it on small user-space programs, a complex library, and a kernel file system.