SELECT 2572288  
-- 直接扫描分区表429毫秒  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from tbl2;  
                                                        QUERY PLAN                                                          
--------------------------------------------------------------------------------------------------------------------------  
 Seq Scan on public.tbl2  (cost=0.00..218291.97 rows=18256497 width=36) (actual time=0.010..309.304 rows=2572288 loops=1)  
   Output: id, info  
   Buffers: shared hit=35727  
 Planning time: 0.038 ms  
 Execution time: 428.955 ms  
(5 rows)  
```  
采样HASH过滤，扫描全表，耗时9800毫秒。差异非常大。  
```  
-- 采用hash取模的方式，扫描全表，并使用CPU过滤当前并发WORKER工作线程不需要的数据，需要10秒左右。差了20倍。  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from tbl1 where mod(id,32)=1;  
                                                        QUERY PLAN                                                           
---------------------------------------------------------------------------------------------------------------------------  
 Seq Scan on public.tbl1  (cost=0.00..1952916.52 rows=271713 width=416) (actual time=0.014..9665.796 rows=2572288 loops=1)  
   Output: id, info  
   Filter: (mod(tbl1.id, 32) = 1)  
   Rows Removed by Filter: 79347712  
   Buffers: shared hit=1137778  
 Planning time: 0.050 ms  
 Execution time: 9801.723 ms  
(7 rows)  
```  
## 其他例子
```
postgres=# create table t(id int, var varbit);
CREATE TABLE
postgres=# insert into t select generate_series(1,10000000), bit '1111111111';
INSERT 0 10000000
create or replace function dis_conn(name) returns void as $$  
declare  
begin  
  perform dblink_disconnect($1);  
  return;  
exception when others then  
  return;  
end;  
$$ language plpgsql strict;  
do language plpgsql $$  
declare  
begin  
  for i in 1..32 loop
    perform dis_conn('link'||i);
  end loop;
  create table if not exists tmp1 (id int, state int, s_time timestamp, end_time timestamp);
  delete from tmp1;
  for i in 1..32 loop
    perform dblink_connect('link'||i, 'hostaddr=127.0.0.1'::text);    
  end loop;
  for i in 1..32 loop
    perform dblink_send_query('link'||i, format('
      begin; 
      insert into tmp1 values (%s, 0, clock_timestamp()); 
      update t set var=repeat(''1'',8192)::varbit where mod(id,32)=%s-1; 
      update tmp1 set state=1,end_time=clock_timestamp() where id=%s;
      end;
      ', i, i, i) 
      );    
  end loop;
  for i in 1..32 loop
    perform dblink_disconnect('link'||i);  
  end loop;
end;  
$$;  
postgres=# select * from tmp1;
 id | state |           s_time           |          end_time          
----+-------+----------------------------+----------------------------
  2 |     1 | 2017-11-24 22:22:20.905842 | 2017-11-24 22:22:43.407478
  1 |     1 | 2017-11-24 22:22:20.905842 | 2017-11-24 22:22:43.002223
  4 |     1 | 2017-11-24 22:22:20.906027 | 2017-11-24 22:22:43.068313
  5 |     1 | 2017-11-24 22:22:20.906058 | 2017-11-24 22:22:43.335777
  3 |     1 | 2017-11-24 22:22:20.906069 | 2017-11-24 22:22:43.225404
  6 |     1 | 2017-11-24 22:22:20.906035 | 2017-11-24 22:22:43.149979
  9 |     1 | 2017-11-24 22:22:20.906171 | 2017-11-24 22:22:43.142008
 14 |     1 | 2017-11-24 22:22:20.906291 | 2017-11-24 22:22:43.055062
 10 |     1 | 2017-11-24 22:22:20.906285 | 2017-11-24 22:22:42.921642
 11 |     1 | 2017-11-24 22:22:20.906288 | 2017-11-24 22:22:43.177545
 15 |     1 | 2017-11-24 22:22:20.90638  | 2017-11-24 22:22:43.213801
 13 |     1 | 2017-11-24 22:22:20.906417 | 2017-11-24 22:22:43.230308
  7 |     1 | 2017-11-24 22:22:20.906379 | 2017-11-24 22:22:43.335494
  8 |     1 | 2017-11-24 22:22:20.90646  | 2017-11-24 22:22:43.258312
 12 |     1 | 2017-11-24 22:22:20.906483 | 2017-11-24 22:22:42.616339
 16 |     1 | 2017-11-24 22:22:20.90677  | 2017-11-24 22:22:43.092587
(16 rows)
vacuum verbose t;
```
## 云端相关产品    
[阿里云 RDS PostgreSQL](https://www.aliyun.com/product/rds/postgresql)                      
[阿里云 HybridDB for PostgreSQL](https://www.aliyun.com/product/gpdb)         
## 相关案例    
[《打造云端流计算、在线业务、数据分析的业务数据闭环 - 阿里云RDS、HybridDB for PostgreSQL最佳实践》](../201707/20170728_01.md)      
## 小结    
目前阿里云RDS PostgreSQL、HybridDB PostgreSQL oss外部表支持文本\GZIP等格式。将来还会支持流行的列存格式（ORC，parquet等），扫描下推，并行读写OSS文件等，提升体验。    
由于目前RDS PG的版本是9.4，9.4的版本目前不支持并行框架，单个写进程是15MB/s左右。采用gzip压缩格式，可能能提升到20MB/s。    
采用并行框架的PostgreSQL 10，可以在写出到OSS时开启并行写，每个WORKER进程 20MB/s，单表导到OSS的速度将得到大幅度的提升（读取也一样支持并行）。    
如果RDS PG 9.4的用户需要将大表快速的写出到OSS的话，通过PG DBLINK来实现异步并行。    
开启40个并行，26GB的数据，140秒，达到190MB/s的写出速度。    
如果前端或PG内部采用分区表，而不是取模的方式，那么输出速度还可以再提高。（因为扫描更快了）。      
将这个功能封装成UDF，便于用户调用：    
https://www.atatech.org/articles/98990       
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")