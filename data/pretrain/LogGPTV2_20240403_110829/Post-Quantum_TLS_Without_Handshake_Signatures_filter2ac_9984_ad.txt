### Interaction with the Adversary

In the presence of an adversary, all interactions, even those between honest parties, are facilitated by this malicious entity. The adversary engages with honest parties through a series of queries, which can be categorized into several types:

1. **Protocol Functionality Queries:**
   - **NewSession:** Initiates a new session for a party, specifying the intended partner and role.
   - **Send:** Delivers a message to a session, causing the protocol to execute based on its current state. The session updates its state and returns any outgoing protocol messages.

2. **Secret Information Compromise Queries:**
   - **Reveal:** Provides the adversary with the key established in a particular stage. Both the key and its partner (if it exists) are marked as revealed.
   - **Corrupt:** Grants the adversary access to a party’s long-term secret key, marking that party as corrupted.

The **Reveal** and **Corrupt** queries can render a stage "unfresh," meaning the adversary has gained enough information to compromise the security of the key.

3. **Key Challenge Query:**
   - **Test:** For a session and stage chosen by the adversary, returns either the real key for that stage or a uniformly random key, depending on a hidden bit \( b \) fixed throughout the experiment.

### Additional Query Handling Conditions

- For keys marked for internal use, the **Send** query pauses when the key is accepted, allowing the adversary to either **Test** the key or continue without testing. This is necessary because internal keys may be used immediately for handshake encryption, and testing after use would allow the adversary to trivially win.
- For keys not considered authenticated at the time of the **Test** query, the query is only permitted if the session has an honest contributive partner. Otherwise, the adversary could trivially win by active impersonation.

### Security Properties

#### AKE Security Split

A sequence of works [25, 26, 41] divides AKE security into two distinct properties:
1. **Session-Key Indistinguishability:** Ensures that the session key is indistinguishable from a random key, as defined by Bellare and Rogaway [6].
2. **Match-Security:** Ensures the soundness of the session identifier, ensuring that the session identifier \( \pi .sid \) matches the partnered \( \pi' .sid \) and that both sessions compute the same session key. For well-chosen session identifiers, proving Match-Security typically does not depend on cryptographic assumptions but follows syntactically.

#### Multi-Stage Security

The Multi-Stage model captures both key indistinguishability and authentication properties. The details of the experiment are provided in Appendix B.5.

- **Key Indistinguishability:** Secrecy of the key established in each stage is ensured through indistinguishability from random, as per Bellare–Rogaway [6]. The adversary's goal is to guess the hidden, uniformly random bit \( b \) used in **Test** queries. Constraints on **Reveal** queries prevent the adversary from revealing and testing the same key in a session or its partner. Depending on the forward secrecy goals, some **Corrupt** queries may also be prohibited.
- **Forward Secrecy and Implicit Authentication:**
  - **Weak Forward Secrecy Level 1 (wfs1):** The stage key is indistinguishable against passive adversaries, even if the peer’s long-term secret key is compromised.
  - **Weak Forward Secrecy Level 2 (wfs2):** The stage key is indistinguishable against passive adversaries or if the peer’s long-term key is never corrupted.
  - **Forward Secrecy (fs):** The stage key is indistinguishable against passive adversaries or if the peer’s long-term key is not corrupted before the stage key is accepted.

- **Explicit Authentication:** An additional notion where the adversary wins if it causes an explicitly authenticated stage to accept without a partner session (malicious acceptance).

#### KEMTLS Properties

For KEMTLS, the properties of each stage key in a client instance are:
- **Stages 1 and 2:** wfs1 from acceptance, retroactive fs once stage 6 accepts. No authentication at acceptance, retroactive explicit authentication once stage 6 accepts. For internal use.
- **Stages 3, 4, and 5:** wfs2 from acceptance, retroactive fs once stage 6 accepts. Implicit authentication at acceptance, retroactive explicit authentication once stage 6 accepts. Stages 3 and 4 for internal use; stage 5 for external use.
- **Stage 6:** fs and explicit authentication from acceptance; for external use.

All stage keys in a server instance of KEMTLS have wfs1 security and are unauthenticated, with the same internal/external key use as the client.

### Theorem 4.1

**Theorem 4.1:** Let \( A \) be an algorithm, and let \( n_s \) be the number of sessions and \( n_u \) be the number of parties. The advantage of \( A \) in breaking the multi-stage security of KEMTLS is upper-bounded by:
\[
\frac{n_s^2}{2|nonce|} + \epsilon_{COLL}^H + 6n_s \cdot \left( \epsilon_{IND-1CCA}^{KEMe} + 2 \epsilon_{dual-PRF-sec}^{HKDF.Ext} + 3 \epsilon_{PRF-sec}^{HKDF.Exp} + \epsilon_{EUF-CMA}^{HMAC} \right)
\]
where \( \epsilon_X^Y \) denotes the advantage of reduction \( Y \) in the proof. The proof of Theorem 4.1 is detailed in Appendix B.5 and proceeds via a sequence of games, splitting into several cases.

### Proof Sketch

1. **Initial Game Hops:** Assume no nonce reuse among honest sessions and no hash function collisions.
2. **Single Test Query Restriction:** Restrict the adversary to make a single **Test** query using a hybrid argument, incurring a tightness loss of \( 6n_s \).
3. **Case Analysis:**
   - **Case A:** The tested session has an honest contributive partner in the first stage.
   - **Case B:** The tested session lacks an honest contributive partner in the first stage, and the peer’s long-term key is never corrupted.
   - **Case C:** The tested session lacks an honest contributive partner in the first stage, and the peer’s long-term key is not corrupted before the tested stage accepts.

### Discussion of Security Properties

- **Strength of Ephemeral KEM:** The proof requires the ephemeral KEM to be secure against a single decapsulation query (IND-1CCA), rather than just IND-CPA. This is due to the nature of the AKE security model.
- **Tightness:** Theorem 4.1 is non-tight due to hybrid and guessing arguments. While tight results are desirable, most previous TLS 1.3 results are similarly non-tight.
- **Quantum Adversaries:** The proof proceeds in the standard model and does not rely on techniques like the forking lemma or rewinding, making it potentially secure against quantum adversaries if the primitives are also secure.
- **Negotiation and Downgrade Resilience:** Consideration of adversarial downgrades among various negotiated choices, including protocol, key exchange, authenticated encryption, and public key authentication, is important for deployment. Three levels of downgrade resilience are considered.

This structured and detailed approach ensures clarity and coherence in the presentation of the security properties and proofs related to KEMTLS.