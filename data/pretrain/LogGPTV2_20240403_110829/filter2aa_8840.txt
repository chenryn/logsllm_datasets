# Odin Part 1
## Problem Statement

I recently installed a smart lock device on the entrance door of my home. The smart lock can be controlled via a smartphone app over Bluetooth Low Energy (BLE). Since the installation, I have noticed some traces in my home that suggest someone has trespassed. I suspect there is a hidden backdoor in the smart lock. Could you help me find the backdoor command to unlock the door?

### Known Information
- The genuine smartphone app unlocks the door with a 1-byte command "91" (in hexadecimal) after authorization.
- Your task is to build another command to unlock the door.

### Provided Files
- **Firmware Dump**: Memory dump from the BLE SoC (nRF52832) on the smart lock board.
  - `memdump_00000000_00080000.bin`
- **Captured BLE Packets**: BLE packets captured during the genuine app's unlocking operation.
  - `genuine_app_unlock_operation.pcap`

### Communication Protocol
#### Structure
- Every request from the app to the smart lock is written to Characteristic `38451401-282b-58d1-d5fe-9e95bb5abded` as a byte array.
- Every response from the smart lock to the app is sent as a byte array using Notification.
- The smart lock does not have any other Services/Characteristics.

#### Request and Response Format
- **Request Format**: (1-byte command number) + (variable length payload)
- **Response Format**: (1-byte error number) + (variable length payload)

#### Known Commands
- **CMD_GET_CHALLENGE**
  - Number: `0x00`
  - Request/Response Payload Length: `0/16`
  - Description: Retrieve random challenge bytes for `CMD_AUTHORIZE`.
- **CMD_AUTHORIZE**
  - Number: `0x01`
  - Request/Response Payload Length: `16/0`
  - Description: Authorize the sender for operating the smart lock.
  - Payload: `aes_ecb_encrypt(key = (Secret bytes set with CMD_INITIALIZE), cleartext = (Challenge bytes retrieved with CMD_GET_CHALLENGE))`
- **CMD_GET_INFO**
  - Number: `0x10`
  - Request/Response Payload Length: `1/variable`
  - Description: Retrieve information from the smart lock.
  - Request Payload Format: (1-byte information type)
  - Response Payload Format: (variable length information)
  - Known Information Types:
    - `0x00`: INFO_AUTH_STATE (1 byte, `0x00` for not authorized, `0x01` for authorized)
    - `0x01`: INFO_TIME (7 bytes, time encoding sample code: [link](https://github.com/SWITCHSCIENCE/samplecodes/blob/bd1b04fc657d58787cbad00297146812ac8d95d2/PCF2129AT_breakout/mbed/Test_PCF2129AT/main.cpp))
- **CMD_INITIALIZE**
  - Number: `0x80`
  - Request/Response Payload Length: `16/0`
  - Description: Set secret bytes for the authorization with `CMD_AUTHORIZE`.
  - This command is only sent during device installation.
- **CMD_SET_TIME**
  - Number: `0x81`
  - Request/Response Payload Length: `7/0`
  - Description: Set current time.
  - Time encoding is the same as `CMD_GET_INFO + INFO_TIME`.
- **CMD_LOCK**
  - Number: `0x90`
  - Request/Response Payload Length: `0/0`
  - Description: Lock the door.
- **CMD_UNLOCK**
  - Number: `0x91`
  - Request/Response Payload Length: `0/0`
  - Description: Unlock the door.

#### Known Error Numbers
- `ERR_SUCCESS = 0x00`
- `ERR_INVALID_LENGTH = 0x01`
- `ERR_INVALID_DATA = 0x02`
- `ERR_INVALID_CMD = 0x03`
- `ERR_NOT_AUTHORIZED = 0x10`

### Flag Format
The backdoor command for unlocking the door is the flag. If the command is `12 34 ab cd` in hexadecimal, the flag will be `CBCTF{1234abcd}`.

### Solution
We were provided with two files: an ARM firmware memory dump and a Bluetooth packet dump. From the task description, we knew the apparent protocol and that there was a backdoor hidden in the firmware allowing unauthorized access.

By searching the firmware for protocol constants like `0x91`, we found the function responsible for packet dispatch. It was mostly straightforward and in line with the description, but we discovered an additional undocumented command `0x20`. This command checks the following 8 bytes, where four must match part of the device's MAC address, and the other four are a random-looking constant. If they match, the tenth byte determines whether the door is locked or unlocked.

The only missing piece was the MAC address, which we found in the captured packet dump. With all the information gathered, we crafted the backdoor packet.

# Odin Part 2
## Problem Statement

This smart lock has a logging function that records every operation. The log is readable only by a special management device, but I have obtained an EEPROM dump from the smart lock board that appears to contain the log. Can you analyze it and determine when the backdoor was first exploited?

### Provided File
- **EEPROM Dump**: `eeprom.bin`

### Flag Format
The flag format is `CBCTF{YYYYMMDDhhmmss}`. If the date is 2018/07/01 12:34:56, the flag will be `CBCTF{20180701123456}`.

### Solution
The firmware writes data to the EEPROM just before dispatching Bluetooth packets. Each packet is logged in 16-byte chunks, with the first 7 bytes being a packed timestamp and the remaining bytes being the packet payload. The entire block is AES encrypted with a constant key.

After decrypting the EEPROM blocks and decoding the timestamps, we looked for packets starting with the `0x20` byte, which indicates the backdoor command. There were only two such packets, and the first one corresponded to the time of the first exploitation.

Here is the Python code used to decrypt and decode the logs:

```python
from Crypto.Cipher import AES

# Define the AES key
key = "88AD3D8347B8CE82082064B4618D7637".decode("hex")
cipher = AES.new(key, AES.MODE_ECB)

# Read the EEPROM data
data = open("eeprom", "rb").read()

# Process each 16-byte chunk
for i in range(0, len(data), 16):
    line = data[i:i+16]
    if line == "\xff" * 16:
        break
    decrypted_line = cipher.decrypt(line)
    timestamp = decrypted_line[:7]
    payload = decrypted_line[7:]
    
    if payload[0] == '\x20':
        print(timestamp.encode("hex"), payload.encode("hex"))
        
        # Decode the timestamp
        cmd = [ord(x) for x in timestamp]
        dts = ((cmd[0] >> 4) * 10) + (cmd[0] & 0x0F)
        dtm = ((cmd[1] >> 4) * 10) + (cmd[1] & 0x0F)
        dth = ((cmd[2] >> 4) * 10) + (cmd[2] & 0x0F)
        dtd = ((cmd[3] >> 4) * 10) + (cmd[3] & 0x0F)
        dtwd = ((cmd[4] >> 4) * 10) + (cmd[4] & 0x0F)
        dtmm = ((cmd[5] >> 4) * 10) + (cmd[5] & 0x0F)
        dty = ((cmd[6] >> 4) * 10) + (cmd[6] & 0x0F)
        
        print(f"{dty:04d}{dtmm:02d}{dtd:02d}{dth:02d}{dtm:02d}{dts:02d}")
```

This script decrypts the EEPROM data, decodes the timestamps, and identifies the first occurrence of the backdoor command.