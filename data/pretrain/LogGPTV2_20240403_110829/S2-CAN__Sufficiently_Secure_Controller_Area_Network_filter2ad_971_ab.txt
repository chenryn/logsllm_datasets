these remote attacks are targeting key fobs, OEM servers and mobile
companion apps. Remote attacks to compromise an ECU usually
exploit the In-Vehicle Infotainment (IVI) and require significant
effort (usually multiple months) as shown in the Jeep Cherokee
hack [32] to achieve CAN bus access and cannot be thwarted even
by a properly secured CAN bus (S-CAN). In contrast, OBD-II attacks
are the fourth most common attack vector and account up to over
10% of all attacks. Nevertheless, recent research [43] has shown
that remote attacks can also be launched by an external adversary
by exploiting vulnerabilities in wireless OBD-II dongles. Many
commercial OBD-II dongles feature Wi-Fi or Bluetooth capabilities
which open a new over-the-air attack surface. The researchers’
1bit11bits1bit4bits0-64bits16bits2bits7bitsSOFStart of FrameCAN IDMessage IdentifierRTRRemote Trans-mission RequestReserved2bitsDLCData Length CodeDataCRC-15CylicRedundancy CheckEOFEnd of FrameACKAcknow-ledge-ment427ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mert D. Pesé, Jay W. Schauer, Junhui Li, and Kang G. Shin
findings show that CAN injection can also be performed by remote,
external attackers. As a result, external attackers in scenario (a)
form the most crucial threat. In what follows, we will focus on
protection from this type of adversaries and describe their attack
capabilities.
Once CAN bus access has been achieved, the attacker will con-
tinue a CAN injection attack. The authors of [12] introduce three
possible CAN injection attacks as discussed next. Fabrication at-
tacks allow the adversary to fabricate and inject messages with
a forged CAN header and payload at a higher frequency to over-
ride cyclic CAN messages sent by legitimate ECUs that can render
safety-critical receiver ECUs inoperable [27]. Suspension attacks
on the compromised ECU prevent its broadcast of legitimate, po-
tentially safety-critical CAN messages to the intended recipient(s).
Finally, Masquerade attacks combine both of the above attacks by
suspending the CAN broadcast of one ECU and deploying another
ECU to fabricate malicious CAN messages. Only fabrication attacks
can be mounted by our adversary from scenario (a), since the others
require an internally compromised ECU. We would like to empha-
size that fabrication attacks can not only be mounted by attackers
having physical access to the car, but also by remote attackers [43]
which makes external attacks from scenario (a) an highy likely and
scalable threat.
As a result, we assume the (external) adversary to only be able
to perform fabrication attacks in our threat model. Even then, the
attacker can cause havoc for both vehicle and driver, as shown in
the Toyota Prius hack [29]. To prevent fabrication attacks, a solution
for secure CAN must have the following two security properties:
Authenticity. As outlined before, any CAN node can join the IVN.
There is no provision of verifying the authenticity of an added
malicious device to the CAN bus by default. So, device authentica-
tion is important, i.e., only pre-authorized ECUs will be allowed to
communicate. Furthermore, an attacker should not be able to spoof
legitimate CAN messages during a fabrication attack. This can be
prevented by adding a MAC to each message to ensure integrity. The
latter also includes protection against replay attacks by adding a
counter to each message. The major drawback of protecting against
fabrication or replay attacks is the required additional space for
MACs and freshness values. This is challenging because CAN only
has an 8-byte payload field, with most of the space already occupied
by control data (see Sec. 5.2).
Confidentiality. CAN message data is not encrypted, and there-
fore, messages between ECUs can be eavesdropped and analyzed
by anyone accessing the IVN. To prevent this type of attack, mech-
anisms to guarantee confidentiality are required. As mentioned be-
fore, plaintext data can be recorded and used for reverse-engineering
the proprietary CAN message format (i.e., signal location, scale and
offset) which can be ultimately used to craft well-formed CAN
messages in a fabrication attack to cause visible damage. Encryp-
tion with symmetric session keys between participating ECUs is a
solution, although it will incur additional latency overhead.
In this paper, we want to protect against fabrication attacks
by leveraging a combination of confidentiality and authenticity
protection. Since we focus on the tension between security and
performance as previously discussed, S2-CAN uses a non-traditional
approach instead of cryptographic encryption and authentication
in order to optimize performance.
4 RELATED WORK
4.1 Authenticity and Integrity
Most existing work on Secure CAN (see Table 1) focuses on the au-
thentication of sender ECUs, protecting the integrity of the payload,
as well as against replay attacks.
vatiCAN [33] offers backward-compatible sender and message
authentication, as well as protection against replay attacks for
safety-critical CAN messages via HMACs computed from prein-
stalled keys. The HMAC is sent in a separate message with a differ-
ent CAN ID. vatiCAN adds 3.3ms latency per CAN message, a 16.2%
increase in bus utilization and 400 bytes of memory overhead.
IA-CAN [21] provides sender authentication via randomization
of CAN IDs on a per frame basis and payload data authentication us-
ing two different session keys. The receiver only accepts a message
if the MAC is correct and the CAN frame has the expected CAN ID
that changes with each frame using a function. The receiver’s filter
is updated accordingly when the next frame is accepted.
CaCAN [28] uses a hardware-modified central monitoring node
to perform the entire authentication on the CAN bus. As with
the general case of centralized authorities, if the monitor node
is compromised or removed, the entire network is compromised.
Furthermore, no encryption is used and the bus load is doubled.
TESLA [34] protocol is a lightweight authentication protocol,
relying on delayed key disclosure to guarantee message authen-
ticity. It provides authenticated broadcast capabilities, albeit with
additional latency during authentication.
CANAuth [41] uses out-of-band transmission of integrity and
freshness values to avoid bus load overhead. Its major drawback is
the lack of backward compatibility with regular CAN controllers.
LeiA [37] is a counter-based authentication protocol that uses
extended (29-bit) CAN IDs to include freshness values and a generic
MAC algorithm for authentication. The MAC is 8 bytes long and
transmitted in a separate CAN message, doubling the bus load. No
latency numbers are reported.
4.2 Confidentiality
The space-limited payload field of 8 bytes in CAN messages is a
major problem for encryption algorithms such as AES-128 that
depend on a 16-byte block size. As a result, multiple messages have
to be sent, increasing the bus load. Latency is another issue due to
the limited computational power on ECUs if implemented in soft-
ware to guarantee backward compatibility. [9] surveyed different
encryption methods for the CAN bus in terms of bus load, latency
and security. Existing approaches use AES-128 [17], AES-256 [38],
XOR [20, 23], Tiny Encryption Algorithm (TEA) [25] and Triple
DES (3DES) [22].
4.3 Key Management
Secret keys are necessary to generate and verify MACs, and to
encrypt and decrypt data. Instead of using a single long-term key
for the entire lifespan of a car — which is 12 years on average [10]
— session keys can be generated periodically that are only valid for
a certain period to limit their exposure.
In Secure CAN (S-CAN) solutions, there are two general ap-
proaches to in-vehicle key management. The first approach is to
428S2-CAN: Sufficiently Secure Controller Area Network
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
deploy an OEM backend and request new keys periodically via
Over-the-Air (OTA) using the authenticated key exchange protocol
2 (AKEP2) [44]. Keys can be stored in the central gateway (acting
as the in-vehicle key master) in a Trusted Platform Module (TPM)
or Hardware Security Module (HSM). The second approach tries
to do the key management completely on-board without the need
for an OEM-provided backend which can reduce complexity, band-
width and cost [39]. The key distribution inside the vehicle can be
done in two ways. First, the key master generates and distributes
new session keys based on the Secure Hardware Extensions (SHE)
Key Update Protocol. Second, the key master triggers the ECUs to
derive session keys from a nonce and long-term keys installed at
manufacturing time. The first approach is superior if security is
the most important and waiting on startup time is acceptable. The
second approach can be used when speed is the most important
and no wait time for key distribution is acceptable.
5 SYSTEM DESIGN
We now present the system design of S2-CAN, which consists of
three phases: Key Management, Handshake, and Operation.
Although no cryptography will be used in the operation phase
(Sec. 5.3), establishing a session Si during the handshake (Sec. 5.2)
needs the distribution of keys which will be briefly discussed in
Sec. 5.1. In our prototype, we use N = 2 slave ECUs and one master
ECU which is the central gateway. The master ECU will be responsi-
ble for establishing new sessions during the handshake phase. There
is no real value of expanding the testbed to more than 2 slave ECUs
since the benchmark in Sec. 7 shows that S2-CAN does not add any
communication overhead and is thus independent of traffic/bus load
during the operation phase, i.e., when operation-related CAN mes-
sages are exchanged between ECUs. S2-CAN is applied to each CAN
sub-bus independently. As a result, the OEM can choose which CAN
buses to protect. We will use the syntax m = (CAN _ID, Payload)
for a CAN message m exchanged on the bus. Furthermore, we re-
quire a logical ordering of the slave ECUs for error handling and
timeout purposes during the handshake (Sec. 5.2), i.e., that ECUA
transmits before ECUB. The ordering can be assigned randomly
(as in our case) or according to criticality/relevance of the ECU,
with the more safety-critical slave ECU being assigned as ECUA.
This knowledge of ordering can be stored as an additional one-byte
unsigned integer in each ECU’s non-volatile memory.
5.1 Phase 0: Key Management
S2-CAN refrains from using Message Authentication Codes (MACs)
and encryption based on cryptographic keys during the vehicle’s
operation mode (Sec. 5.3). During the handshake phase (Sec. 5.2),
we will distribute S2-CAN-specific session parameters from the mas-
ter ECU (gateway ECUGW ) to the two slaves ECUA and ECUB on
a safety-critical CAN domain named CAN1. These session param-
eters establish a new S2-CAN session Si that is valid for a Session
Cycle T . To distribute these parameters securely in each session, we
CANNOT avoid cryptography in the handshake phase and need to
ensure that the CAN payload is both authenticated and encrypted
to defend against spoofing and eavesdropping attacks on the hand-
shake. This requires the existence of pre-shared secret keys that
are provided by the key management system in a vehicle. Since
a detailed discussion of key management is not in the scope of
this paper, we use pre-installed symmetric keys on each ECU and
refer to the aforementioned best practices of in-vehicle key man-
agement (see Sec. 4.3). Note that it is transparent to the design of
S2-CAN of how these symmetric keys are obtained, i.e., if a backend
periodically provides them via OTA or they are derived from a
long-term key installed at manufacturing time. Nevertheless, the
use of short-lived session keys is recommended to limit exposure
of the long-term key which would allow eavesdropping attacks on
the handshake and thus fully compromise S2-CAN.
5.2 Phase 1: Handshake
Overview: Upon initialization, ECUGW , ECUA and ECUB on CAN1
will perform a 3-way handshake in order to exchange the infor-
mation about the aforementioned session parameters and agree
on "talking" in S2-CAN syntax. The session parameters consist of a
global (a) encoding parameter f , (b) a slave ECU-specific integrity
parameter int_IDj, (c) a slave ECU-specific integrity parameter
posint, j, and (d) a slave ECU-specific counter value cntj, with j de-
noting the respective slave ECU. Parameter (a) will be distributed
in Stage 1, whereas the other three parameters (b)-(d) will be ex-
changed between ECUs in Stage 2. The handshake comprises three
stages and repeats for each new session Si in periodic fixed-intervals
T which represents the session cycle. In what follows, we will de-
scribe the handshake process for an arbitrary session Si. The com-
munication diagram for Phase 1 is depicted in Fig. 2 and separated
into the three stages. The CAN IDs used for messages during the
handshake are merely examples, but should have a low ID or high
priority.
Stage 1 (Initialization): The master ECU (ECUGW ) indicates
that it wants to start a new session Si. It randomly generates an 8-
byte encoding parameter f0 = (r0, r1, r2, r3, r4, r5, r6, r7), rl ∈ [0, 7].
rl corresponds to the bit rotation number for the lth byte in the
8-byte CAN payload. Each rl can be expressed with 3 bits for a total
of 3 bytes to include in the payload p of the gateway initialization
message mGW ,init = (0x010, p). As discussed before, due to the
sensitivity of handshake messages, each CAN message during the
handshake has to be both authenticated and encrypted to prevent
spoofing and eavesdropping, but also replay attacks. To achieve the
latter, we first add a 2-byte counter cnt0 (not to be confused with
the ECU-specific session parameter cntX ) to defend against replay
attacks. In order to prevent spoofing attacks on this message, we
calculate the SHA256-HMAC of the previous 5 bytes (i.e., fi and
cnti) to obtain a 32-byte output with the symmetric key k from
Phase 0. Since the payload of mGW ,init,i only has another 3 bytes
of free space to fit the MAC which would be too small to defend
against brute-force attacks, we have to truncate the HMAC (taking
the MSBs per definition). The truncation can be done safely since
the increased advantage of the attacker would be offset by the
limited availability of a CAN message due to the cyclic message
nature of CAN and the invalidation through the counter value cnti.
Nevertheless, we believe that 3 bytes for a truncated HMAC is too
small. As a result, we split mGW ,init,i into two consecutive CAN
messages mGW ,init,i,0 and mGW ,init,i,1 with respective payloads
p1 and p2 to (a) utilize another 8 bytes for the truncated HMAC,
resulting to a total of 11 bytes, and (b) allow encryption with a
429ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mert D. Pesé, Jay W. Schauer, Junhui Li, and Kang G. Shin
Figure 2: Handshake communication diagram
secure block cipher such as AES-128 which has a block size of 16
bytes.
In summary, two CAN messages with the following syntax are
broadcast sequentially on CAN1:
mGW ,init,i,0 = (0x010, encAES128(k, p1||p2)[MSB0 − 63])
mGW ,init,i,1 = (0x010, encAES128(k, p1||p2)[MSB64 − 127])
Stage 2 (Acknowledgment): Upon receiving both initialization
messages from ECUGW , ECUA and ECUB first decrypt the cipher-
texts p⋆1 and p⋆2 using the symmetric key k and extract the encoding
parameter fi into local memory. Eeach slave ECU will then broad-
cast an acknowledgment (ACK) message mj,ACK,i (which will be
split into two messages again due to AES-128 encryption), where
j ∈ [0, . . . , N − 1], consisting of a 1-byte positive acknowledgment
code (PACK) and the three slave ECU-specific parameters (b)-(d)
in the CAN payload. Parameter (b) is a randomly generated unique
internal ID int_IDj ∈ [0, N −1] representing ECUj on CAN1 during
the current session Si. This parameter can be encoded with 1 byte
since a CAN domain (or even vehicle in general) never has more
than 256 ECUs.
Next, parameter (c) specifies the random position posint, j of
where the internal ID (parameter (a)) will be located within the
CAN payload. Since space within the payload is limited and specific
positions are occupied by CAN signal data that cannot be over-
written, the internal ID has to be included in available free space.
The set of available free spaces for a CAN ID in a given vehicle is
defined as Yj. Sec. 6 discusses the distribution of free spaces among
CAN IDs by analyzing the DBCs of 4 different vehicles. For instance,
Yj = 12, 13, 14, 25, 26, 54, 55, 63 states that the CAN ID belonging
to ECUj possesses only 8 bits of free space over 4 non-consecutive
"regions". This set of bits is then used by the Free Space (FS) function
to randomly determine the first bit posint, j where int_IDj will be
placed:
(2)
In our example, if posint, j = 54, the MSB of the one-byte internal
ID will be stored at bit position 54 and the LSB at bit position 26.
posint, j = FS(Yj)
The last parameter (d) is the initial value of an ECU-specific
counter cntj for replay protection and is also randomly generated.
This parameter consists of 2 bytes and is also included in available
free space together with int_IDj by Eq. 2.
Besides including these functional handshake parameters, the
ACK messages will also include a 2-byte handshake counter cnti
and truncated HMAC for integrity and freshness protection, just
like in Stage 1. We obtain 2 consecutive CAN messages broadcast by
ECUj that are both authenticated and encrypted with the following
syntax:
mA,ACK,i,0 = (IDj , encAES128(k, p1||p2)[MSB0 − 63])
mA,ACK,i,1 = (IDj , encAES128(k, p1||p2)[MSB64 − 127])
Due to the aforementioned pre-determined order for all slave ECUs,
ECUA will first transmit with CAN ID 0x011 and ECUB needs to
wait until it has received both mA,ACK,i,0 and mA,ACK,i,1 from
ECUA before it can broadcast mB,ACK,i,0 and mB,ACK,i,1. For the
latter two messages, the CAN ID can simply be incremented by
one as depicted in Fig. 2, as each ECU will use a distinct CAN
ID. Once ECUB receives the aforementioned ACK message, it first
extracts the received integrity parameters into its memory and then
repeats the ACK process for itself. To avoid collisions in internal
ID assignment, it needs to exclude int_IDA during the random ID
generation.
Stage 3 (Finalization): ECUGW finalizes the handshake after
receiving ACKs from all slave ECUs. It sends mGW ,f in,i with a
random non-zero payload to signal that it has received well-formed
ACK messages from all slave ECUs and monitored a successful
handshake. The finalization message is again split into two CAN
messages and broadcast with CAN ID 0x020.
Security and Reliability Analysis: Due to authentication, an
adversary cannot spoof the contents of a handshake message. An
attacker cannot replay handshake messages due to the freshness
counter, and eavesdropping attacks can be mitigated by encryption.
If any ACK message takes too long due to bus or ECU errors,
the handshake times out and ECUGW restarts the handshake with
ECUGWECUAmGW,init,i,0=(0x010, encAES-128(k, p1||p2)[MSB0-63])ECUBECUAECUGWECUBmA,ACK,i,0=(0x011, encAES-128(k, p1||p2)[MSB0-63])ECUBECUGWECUAmB,ACK,i,0=(0x012, encAES-128(k, p1||p2)[MSB0-63])int_IDB=Rand(0,N-1)/int_IDAposint,B=FS(𝕐𝕐B)ECUGWECUAmGW,fin,i,0=(0x020, encAES-128(k, p1||p2)[MSB0-63])ECUBficntiHMACSHA-256(k, fi||cnti)[MSB0-23]p1HMACSHA-256(k, fi||cnti)[MSB24-87]p2ECUGWECUAECUBmGW,init,i,1=(0x010, encAES-128(k, p1||p2)[MSB64-127])int_IDAcntiHMACSHA-256(k, PACK ||int_IDA||posint,A||cntA||cnti)[MSB0-7]p1p2cntAPACKposint,AHMACSHA-256(k, PACK ||int_IDA||posint,A||cntA||cnti)[MSB8-71]Sym. Key kECUAECUGWECUBmA,ACK,i,1=(0x011, encAES-128(k, p1||p2)[MSB64-127])int_IDA=Rand(0,N-1) posint,A=FS(𝕐𝕐A)int_IDBcntiHMACSHA-256(k, PACK ||int_IDB||posint,B||cntB||cnti)[MSB0-7]p1p2cntBPACKposint,BHMACSHA-256(k, PACK ||int_IDB||posint,B||cntB||cnti)[MSB8-71]ECUBECUGWECUAmB,ACK,i,1=(0x012, encAES-128(k, p1||p2)[MSB64-127])ECUGWECUAmGW,fin,i,1=(0x020, encAES-128(k, p1||p2)[MSB64-127])ECUBp1, p2∈{0,1}64 ^ p1, p2∉064Sym. Key kSym. Key k123430S2-CAN: Sufficiently Secure Controller Area Network
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Stage 1. If the handshake is still unsuccessful even after repeating
it r times, all ECUs on CAN1 can revert to regular CAN commu-
nication until the next start of the vehicle. Although this counter-
measure has been designed for non-adversarial reliability issues,
an adversary still cannot exploit it. An attacker could launch a
Denial-of-Service (DoS) attack through the OBD-II device by inject-
ing high-priority CAN IDs (e.g., 0x0) with the goal to circumvent
successful handshakes and downgrade to regular CAN communi-
cation. Since vehicles have a holistic security concept in place (as
discussed in Sec. 1), the gateway (which is directly connected to
the OBD-II port) can defend against this availability attack by dis-
carding injected CAN messages under a certain CAN ID threshold,
i.e., the lowest handshake CAN ID.
5.3 Phase 2: Operation
After the handshake for a session Si has been completed, slave ECUs
can start the Operation Mode exchanging regular data on CAN1.
To save space in the CAN payload field, we perform the following
operation on the 1-byte int_IDj and 2-byte cntj that ECUj stored
during the handshake to calculate the 2-byte parameter qj:
qj = LEFTZEROPAD(int_IDj , 8) ⊕ cntj .
(3)
First, the payload of a CAN message is being logically ORed with
qj which includes the integrity parameters into the free space of a
CAN message. Second, a Circular Shift (CS) operation is performed
on the new payload using the stored encoding parameter fi which
does a byte-wise bit rotation to the lth byte according to the value
of the lth element of fi. Finally, the message is broadcast on CAN1.
For the next CAN message sent by ECUj, its local counter will be
incremented.
On the receiver side, the respective slave ECU(s) need(s) to ex-
ecute the above process reversely, i.e., rotate each byte of the en-
crypted payload in the opposite direction according to rl , extract
the position information from posint, j, determine the internal ID
and finally the counter/freshness value by XORing it with int_IDj
of the sender.
Based on these extracted values, the receiver can then perform