title:Privacy of outsourced k-means clustering
author:Dongxi Liu and
Elisa Bertino and
Xun Yi
Privacy of Outsourced k-Means Clustering(cid:3)
Dongxi Liu
CSIRO Computational
Informatics, Australia
PI:EMAIL
Elisa Bertino
CS Department, Purdue
University
PI:EMAIL
Xun Yi
College of Eng. and Sci.,
Victoria University, Australia
PI:EMAIL
ABSTRACT
It is attractive for an organization to outsource its data analytics to
a service provider who has powerful platforms and advanced an-
alytics skills. However, the organization (data owner) may have
concerns about the privacy of its data. In this paper, we present a
method that allows the data owner to encrypt its data with a homo-
morphic encryption scheme and the service provider to perform k-
means clustering directly over the encrypted data. However, since
the ciphertexts resulting from homomorphic encryption do not pre-
serve the order of distances between data objects and cluster cen-
ters, we propose an approach that enables the service provider to
compare encrypted distances with the trapdoor information pro-
vided by the data owner. The efﬁciency of our method is validated
by extensive experimental evaluation.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption; C.2.4 [Distributed Systems]: Dis-
tributed applications
General Terms
Security;Algorithms
Keywords
k-Means Clustering; Outsourcing; Data Privacy; Homomorphic En-
cryption
1.
INTRODUCTION
Organizations are collecting increasingly amounts data as knowl-
edge mined from these data is a key enabler for improving deci-
sions and productivity. However, an organization may not have
expertise and resource in-house to correctly and efﬁciently analyze
big data. To address this problem, an attractive business model is
(cid:3)
The work reported in this paper has been partially supported by
the US National Science Foundation under grants CNS-1111512
and CNS-1016722.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan.
Copyright 2014 ACM 978-1-4503-2800-5/14/06 ...$15.00.
http://dx.doi.org/10.1145/2590296.2590332 .
represented by data analytics service providers who have power-
ful platforms and advanced analytic skills. Organizations can then
outsource their analytics tasks to such service providers.
However, when outsourcing data analytics, organizations (re-
ferred to as data owners) often have concerns on the privacy of their
data. Such concerns might hamper the acceptance of advanced data
analytics services, as in other data management services [1]. To
protect the data privacy, the data owners might choose to perturb
their data before sending data to the service provider, as often done
in privacy-preserving data mining [4]. However, data perturbation
may not protect privacy completely [15], and the analytics based
on the purturbed data might not be accurate enough.
In this paper, we present a method for protecting the privacy of
outsourced k-means clustering, which is a data mining algorithm
that partitions a set of data objects into clusters. A data object is
closest (e.g., it has the shortest Euclidean distance) to the center of
cluster it is allocated into, compared with the centers of other clus-
ters. In our method, the data owner encrypts its data with a homo-
morphic encryption scheme before sending the data to the service
provider. Then, over the encrypted data, the service provider per-
forms k-means clustering and reports clustering results back to the
data owner. Under this approach, the privacy of data is protected
from the service provider.
The homomorphic encryption scheme we use supports both ad-
dition and multiplication over ciphertexts. From the ciphertexts of
a data object and a cluster center, this scheme allows the service
provider to calculate the ciphertext of squared Euclidean distance
between them. To allocate a data object into a cluster, the service
provider needs to determine which cluster is closest by comparing
the encrypted distances of the data object to all cluster centers.
However, the encrypted distances cannot be compared, since the
homomorphic encryption scheme we use, like other modern en-
cryption schemes, is probabilistic and even the same distances are
usually encrypted into different ciphertexts. To address this prob-
lem, a straightforward approach is to send back to the data owner
the encrypted distances for decryption and comparison. However,
this approach may incur a huge computational cost at the data owner
if there is a large number of data objects, thus negating the beneﬁts
of data analytics outsourcing.
In this work, we propose an approach that enables the service
provider to compare encrypted distances with the trapdoor infor-
mation that can be efﬁciently calculated by the data owner. In par-
ticular, the dynamic trapdoor information calculated during each it-
eration of k-means clustering is dependent only on updated cluster
centers, not on any data objects. That is, regardless of the number
of data objects, the data owner has only a small amount of constant
computation load in each iteration of k-means clustering.
123There are order-preserving encryption schemes, such as [6, 2,
18]. However, we cannot use these schemes to encrypt data objects
for outsourced k-means clustering, since they are not homomor-
phic and cannot support the computation of comparable distances
and new cluster centers from ciphertexts. Actually, in our method,
we use the idea of order-preserving encryption to make ciphertexts
from homomorphic encryption comparable with the assistance of
trapdoor information.
Privacy-preserving distributed (or two-party) k-means clustering
has been proposed [20, 13, 22]. However, distributed k-means clus-
tering has a different goal from outsourced k-means clustering. In
distributed k-means clustering, each party contributes part of data
to cluster and carries out the computation tasks symmetrically over
its own data. For outsourced k-means clustering, the data owner
contributes all data and is expected to take as less computational
load as possible, while the service provider is supposed to take
computational load as much as possible.
The rest of this paper is organized as follows. In Section 2 and
Section 3, we introduce the k-means clustering algorithm and the
homomorphic encryption scheme we use. Then, in Section 4, we
discuss why homomorphic encryption along is unable to support
outsourced k-means clustering. Our method for comparing en-
crypted distances is described in Section 5 and its application to
outsourced k-means clustering is given in Section 6. We evaluate
our method in Section 7 and discuss the related works in Section 8.
The paper is concluded in Section 9.
2. OVERVIEW OF K-MEANS CLUSTERING
In this section, we give a brief overview of the k-means cluster-
ing algorithm, which will be modiﬁed into a distributed algorithm
to cluster homomorphically encrypted data in Section 6. The de-
tailed description and analysis of the k-means clustering algorithm
can be found in textbooks, such as [14].
Given a set of data objects, the k-means clustering algorithm par-
titions these objects into k disjoint subsets, each of which is called
a cluster. Each cluster has a center, and each data object in a cluster
has the shortest distance (or squared distance) to the center, com-
pared with the distances (or squared distances) to other cluster cen-
ters. In our work, each data object is supposed to have multiple
attributes (or dimensions), which have real numbers as values. The
distances between data objects and cluster centers are deﬁned as
their Euclidean distances.
At the initial step, the clustering algorithm selects k initial cluster
centers. There are different ways of selecting initial centers [20].
Our work is not related to how initial centers are selected. After
determining the initial centers, the clustering algorithm is executed
iteratively. In each clustering iteration, the squared distances be-
tween each data object and all cluster centers are calculated, and
the data object is allocated into a cluster to which the squared dis-
tance is the shortest.
After all data objects are allocated, the center of each cluster
needs to be updated. The new centers are calculated by averaging
each attribute over all the objects allocated into the same clusters.
With the new centers, the clustering algorithm starts a new itera-
tion. The clustering algorithm terminates when the allocation of
data objects does not change any more, or the speciﬁed number
of iterations has reached. No allocation change is the termination
condition used in our distributed clustering algorithm.
3. HOMOMORPHIC ENCRYPTION
In our approach, the outsourced data is encrypted homomorphi-
cally. The encryption scheme we use is deﬁned in a patent spec-
iﬁcation [17]. To make this paper self-contained, this scheme is
introduced below with examples and brief security analysis. Our
contribution in this work is an efﬁcient method of applying this
scheme to protect the data privacy in outsourced k-means cluster-
ing, not the encryption scheme itself. Actually, this method can
also be applied with other homomorphic encryption schemes, as
discussed in Section 8.
3.1 Key, Encryption and Decryption
A key K(m) is a list [(k1; s1; t1); :::; (km; sm; tm)], where ki,
si and ti are real numbers (i = 1; :::; m). This scheme requires
m (cid:21) 3, ki ̸= 0 (1 (cid:20) i (cid:20) m (cid:0) 1), km + sm + tm ̸= 0, and
only one i (1 (cid:20) i (cid:20) m (cid:0) 1) such that ti ̸= 0. Given the key
K(m), the algorithm Enc encrypts a real number v into the cipher-
text (e1; :::; em), denoted by Enc(K(m); v) = (e1; :::; em), where
ei is called a subciphertext. The algorithm Enc is deﬁned by the
following steps1.
can be arbitrarily large.
(cid:15) Uniformly sample m random real numbers r1,..., rm, which
(cid:15) Compute e1 = k1 (cid:3) t1 (cid:3) v + s1 (cid:3) rm + k1 (cid:3) (r1 (cid:0) rm(cid:0)1).
(cid:15) Compute ei = ki (cid:3) ti (cid:3) v + si (cid:3) rm + ki (cid:3) (ri (cid:0) ri(cid:0)1) for
2 (cid:20) i (cid:20) m (cid:0) 1.
m(cid:0)1
i=1 ti.
(cid:15) Compute em = (km + sm + tm) (cid:3) rm.
Given a ciphertext (e1; :::; em) and the key K(m), the decryp-
tion algorithm Dec returns the plaintext v by the following steps.
The decryption operation is denoted as Dec(K(m); (e1; :::; em)) =
v.
∑
∑
i=1 (ei (cid:0) S (cid:3) si)=ki)=T .
m(cid:0)1
(cid:15) T =
(cid:15) S = em=(km + sm + tm).
(cid:15) v = (
Here is an example for this scheme. Suppose a key K(4) is
the list [(3:2; 2:7; 0); (9:1; 3:1; 1:5); (3:6; 7:9; 0); (2:1; 8:8; 7:9)],
and the value to be encrypted is 34:7. Suppose that the following
four random numbers are generated for the encryption: 5689:23,
375623145:2, (cid:0)8523:87 and 24231:47. Then, the four subcipher-
texts are generated as follows.
(cid:15) e1 = 3:2 (cid:3) 0 (cid:3) 34:7 + 2:7 (cid:3) 24231:47 + 3:2 (cid:3) (5689:23 (cid:0)
(cid:15) e2 = 9:1(cid:3)1:5(cid:3)34:7+3:1(cid:3)24231:47+9:1(cid:3)(375623145:2(cid:0)
((cid:0)8523:87)) = 110906:889.
5689:23) = 3418194440:539.
(cid:15) e3 = 3:6 (cid:3) 0 (cid:3) 34:7 + 7:9 (cid:3) 24231:47 + 3:6 (cid:3) ((cid:0)8523:87 (cid:0)
375623145:2) = (cid:0)1352082580:039.
(cid:15) e4 = (2:1 + 8:8 + 7:9) (cid:3) 24231:47 = 455551:636.
For decryption, we ﬁrst calculate T = 0+1:5+0 = 1:5 and S =
455551:636=(2:1 + 8:8 + 7:9) = 24231:47. Then, we evaluate the
expression ((e1 (cid:0) 2:7(cid:3) S)=3:2 + (e2 (cid:0) 3:1(cid:3) S)=9:1 + (e3 (cid:0) 7:9(cid:3)
S)=3:6)=T , obtaining the correct plaintext 34:7.
This scheme is semantically secure when the size of plaintexts
is bounded (i.e., not allowing arbitrarily large plaintexts). Here we
brieﬂy discuss its security. Let e be a ciphertext which encrypts v or
1In [17], this scheme is more secure by allowing a more ﬂexible
key structure, which may have multiple s components in a key el-
ement (i.e., a key element can be (ki; si1; si2; :::; ti) in[17]) and
accordingly a subciphertext may include multiple such terms as sij
multiplying by a random.
124′
′
2 [16].
. The semantic security requires that the adversary cannot distin-
v
guish whether e encrypts v or v
with a probability non-negligibly
Intuitively, since the plaintexts are bounded
higher than 1
and the random numbers in this scheme can be arbitrarily large, the
value of cipherext e is dominated by the value of random numbers.
′
Hence, the advantage of distinguishing whether e encrypts v or v
is asymptotically equal to distinguishing the value of random num-
bers used in e. Suppose each random number has p decimal digits.
Then, the probability of distinguishing a particular value of random
10p ) due to uniformly sampling. The function 1
numbers is O( 1
10p
is negligible with respect to the variable p, because it is the inverse
of the exponential function 10p.
3.2 Homomorphism
′
′
′
.
′
1; :::; e
) = (e
′
This encryption scheme supports both addition and multiplica-
are
tion over ciphertexts. Suppose two plaintext values v and v
encrypted with the key K(m): Enc(K(m); v) = (e1; :::; em), and
′
m). Then, this scheme is additively
Enc(K(m); v
′
homomorphic and thus ensures that Dec(K(m); (e1 + e
1; :::; em +
′
m)) = v + v
e
For the multiplicative homomorphism, there are two cases for
this scheme. The ﬁrst one is that given a real number b we have
Dec(K(m); (b(cid:3)e1; :::; b(cid:3)em)) = b(cid:3)v. Combined with the additive
homomorphism, we have Dec(K(m); (e1 + b (cid:3) e
1; :::; em + b (cid:3)
′
m)) = v + b (cid:3) v
. When b = (cid:0)1, we can calculate v (cid:0) v
′
′
e
from the two ciphertexts. The calculation of v (cid:0) v
′
is needed when
calculating the Euclidean distance in k-means clustering.
The second case of multiplicative homomorphism is about cal-
culating v (cid:3) v
from their ciphertexts. In this case, the two cipher-
texts need to be multiplied as their outer product (e1 (cid:3) e
1; :::; e1 (cid:3)
′
m). Then, v(cid:3)v
1; :::; em(cid:3)e
m; :::; em(cid:3)e
′
′
′
is obtained by decrypting
e
this ciphertext in two steps: 1) for 1 (cid:20) i (cid:20) m, by performing the
1; :::; ei(cid:3)e
operation Dec(K(m); (ei(cid:3)e
m) = ei(cid:3)v
′
′
, and then 2) by
performing the operation Dec(K(m); (e1(cid:3)v
) = v(cid:3)v
′
.
Based on the additive and multiplicative homomorphism, this
encryption scheme supports the calculation of multivariate polyno-
mials over encrypted data, as explained by the following example.
Suppose six real numbers vi (1 (cid:20) i (cid:20) 6) are encrypted as the ci-
phertexts Enc(K(m); vi), and from these ciphertexts, we want to
calculate v1 + v2 (cid:3) v3 + v4 (cid:3) v5 (cid:3) v6. Then, this can be done by
using the expression:
; :::; em(cid:3)v
′
′