title:Measuring path MTU discovery behaviour
author:Matthew J. Luckie and
Ben Stasiewicz
Measuring Path MTU Discovery Behaviour
Matthew Luckie
Department of Computer Science
University of Waikato
Hamilton, New Zealand
PI:EMAIL
Ben Stasiewicz
Department of Computer Science
University of Waikato
Hamilton, New Zealand
PI:EMAIL
ABSTRACT
Path MTU Discovery (PMTUD) is widely believed to be un-
reliable because of ﬁrewalls that discard ICMP “Packet Too
Big” messages. This paper measures PMTUD behaviour for
50,000 popular websites and ﬁnds the failure rate in IPv4
is much less than previous studies. We measure the overall
failure rate between 5% and 18%, depending on the MTU of
the constraining link. We explore methods webserver oper-
ators are using to reduce their dependence on PMTUD, and
ﬁnd 11% limit themselves to sending packets no larger than
1380 bytes. We identify a number of common behaviours
that seem to be software bugs rather than ﬁltering by ﬁre-
walls. If these are corrected PMTUD failures could be re-
duced by 63%. We further ﬁnd the IPv6 failure rate is less
than the IPv4 rate even with more scope for failure in IPv6.
Categories and Subject Descriptors
C.4 [Performance of Systems]: Measurement techniques
General Terms
Measurement
Keywords
TCP, Path MTU Discovery, IPv6, IPv4, middleboxes
1.
INTRODUCTION
Path MTU Discovery (PMTUD) is widely believed to be
unreliable because of ﬁrewalls that discard ICMP “Packet
Too Big” (PTB) messages. Previous work by Medina, et al.
in 2004 [1] reported 17% of the IPv4 webservers they tested
failed PMTUD by not reducing their packet size when re-
quested. They reason this is likely due to ﬁrewalls discarding
PTB messages. IPv4 hosts may choose whether or not they
use PMTUD, but IPv6 hosts do not have a choice and are
required to act on PTB messages. This paper investigates
PMTUD behaviour for IPv4 and IPv6 webservers.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’10, November 1–3, 2010, Melbourne, Australia.
Copyright 2010 ACM 978-1-4503-0057-5/10/11 ...$10.00.
The PMTUD mechanism is similar for both IPv4 [2] and
IPv6 [3]. When a router receives a packet that is too big for
it to forward, it discards the packet and sends a PTB mes-
sage telling the host the maximum transmission unit (MTU)
it can forward. The host should then reduce its packet size
to the size advised. Using the largest packet size that can
be forwarded intact through a network is optimal, as “much
of the cost of packetized communication is per-packet rather
than per-byte” [4].
Unfortunately, there are many causes of PMTUD fail-
ure [5]. When PMTUD does not work, it causes Internet
communications to fail in a way that is diﬃcult to diag-
nose [6]. The most well-known cause is the ﬁrewall that
discards all ICMP messages, including the PTB. Similarly,
some routers are conﬁgured to not send ICMP destination
unreachable messages; in IPv4, this also suppresses the PTB
message.
IPv6 separates PTB messages from the destina-
tion unreachable message so disabling destination unreach-
able messages should not also cause PTB messages to be
suppressed. Finally, a router will not send a PTB message
if it believes the network is capable of forwarding a larger
packet than it actually can; this failure mode is known as
an MTU mismatch.
Based on experiences with IPv4 and the IPv6 requirement
for PTB messages to be delivered and acted on, there is con-
cern PMTUD will fail more often when IPv6 is used, ham-
pering end-user experience and thus IPv6 adoption. Some
have recommended operators conﬁgure the MTU of inter-
faces on end-hosts to 1280 bytes [7, 8, 9]. The rationale
behind this advice is the IPv6 minimum MTU is 1280 bytes
so a host will never have to send a smaller packet or rely on
a server accepting PTB messages.
If this advice is taken,
the host no longer has to use PMTUD as it will never send
a packet larger than 1280 bytes, and it will also advertise a
TCP Maximum Segment Size (MSS) that should cause the
remote host to never send a packet larger than 1280 bytes
over the TCP connection. This advice has the downside of
not using the capabilities of paths which are able to forward
larger packets. In addition, RFC 2460 requires a host to act
on a PTB message with an MTU smaller than 1280 bytes
by sending all packets with an IPv6 fragmentation header
regardless of size [10].
This paper investigates PMTUD behaviour for IPv4 and
IPv6 webservers. The method we use is similar to that used
by Medina, et al. [1]. Our contributions are: (1) measure-
ments of IPv4 webserver response to PTB messages contain-
ing diﬀerent MTU values, (2) longitudinal measurement of
IPv4 PMTUD behaviour from a packet trace, (3) a method
102to measure IPv6 webserver PMTUD behaviour and com-
parison with IPv4 behaviour for those webservers, and (4)
identiﬁcation of apparent software ﬂaws responsible for more
than half of the failures. The rest of this paper begins with a
survey of related work. Section 3 describes the methodology,
the hosts surveyed, and the vantage points we use. Section 4
presents the data collected for a set of 50,000 popular web-
sites reachable with IPv4, analysis of the eﬀect of popularity
on ICMP ﬁltering behaviour, and comparison with the re-
sults of Medina, et al. Section 5 presents the data collected
for all webservers with globally routable IPv6 addresses in
the Alexa top 1 million list [11]. Finally, section 6 concludes.
2. RELATED WORK
Medina, et al. [1] characterised the TCP behaviour of web-
servers in 2004 using TBIT [12]. Overall, 17% of 81,776
targets they tested and 35% of the top 500 webservers as
reported by Alexa at the time did not send smaller pack-
ets when requested to reduce their packet size to 256 bytes.
They hypothesise this behaviour is caused by ﬁrewalls that
discard PTB messages. We derive our methodology from
theirs; we measure the response to PTB messages containing
diﬀerent MTU values, separately classify hosts that respond
to a PTB message by clearing the DF bit, add reassembly
support for fragmented packets, and add IPv6 support.
Luckie, et al. [13] characterised PMTUD failures for hosts
that are able to send 9000 byte packets towards hosts that
can only receive 1500 byte packets. In this situation, routers
in the path are required to send PTB messages for PMTUD
to work.
In total, 30% of the paths tested to 136 hosts
failed PMTUD. Many are caused by operators conﬁguring
their routers to not send ICMP destination unreachable mes-
sages, but some are also caused by MTU mismatches where
a router believed it could forward larger packets than the
network could carry. The tests in this work measure the
ability of hosts to receive and act on PTB messages, rather
than the ability of routers to send PTB messages.
The IETF PMTUD working group released an alterna-
tive PMTUD method known as Packetization Layer Path
MTU Discovery (PLPMTUD) [14]. PLPMTUD does not
rely on the delivery of PTB messages, but requires the use
of a reliable transport protocol. For TCP, the PLPMTUD
technique causes a large segment designed to test the net-
work’s ability to carry that packet-size to be inserted before
a sequence of smaller segments that are known to be able to
be forwarded. If the large segment is discarded because it is
too big, the smaller segments that follow will cause duplicate
acknowledgements to be returned by the remote TCP; the
sender will then break the data into smaller segments and
retransmit, avoiding a delay waiting for the TCP retrans-
mission timer to be activated, and in future try a smaller
maximum segment size. Implementation of PLPMTUD is
complicated as it is diﬃcult to determine if a large segment
is lost due to congestion or MTU issues. The only deployed
implementation is found in the Linux kernel from version
2.6.17, and it is oﬀ by default [15].
Microsoft Windows implements PMTUD blackhole detec-
tion for TCP, which is disabled by default [16]. If a system
does not receive an acknowledgement after two retransmis-
sions, it will either clear the DF bit, or lower its MSS value
for the connection to 536 bytes, depending on the version
of Windows. If acknowledgements are then forthcoming, it
will send 536 byte packets for the lifetime of the connection.
3. METHOD
3.1 Measuring PMTUD Behaviour
We use an approach derived from the TCP Behaviour In-
ference Tool (TBIT) work in [1] to measure PMTUD be-
haviour. Brieﬂy, PMTUD behaviour is inferred by the be-
haviour of a remote TCP after a PTB is sent asking it to
send smaller packets.
If the host reduces the packet size
as requested, we infer the PTB message was received and
acted on. If the host does not reduce the segment size and
retransmits the data, another PTB is sent requesting it do
so. We infer failure if the host retransmits the data in ques-
tion three times and does not reduce the segment size or
clear the DF bit.
3.1.1 An IPv4 PMTUD test
We test the PMTUD behaviour of webservers with four
diﬀerent MTU values; 1480, 1280, 576, and 256 bytes. A
1480 byte MTU corresponds to an IP tunnel over Ethernet,
1280 is a popular choice for tunnel software, 576 is the min-
imum size packet a host is required to reassemble, and 256
bytes is the MTU value tested in [1]. We send PTB mes-
sages if the DF bit is set in a packet larger than the MTU
we are testing. We advertise an MSS of 1460 bytes to each
webserver for all IPv4 tests.
If we do not receive any packet larger than the MTU value
we are testing, we classify the test as such. If we receive data
packets larger than the MTU value we are testing but the
DF bit is not set, we classify these hosts as not attempting
PMTUD. A host that supports PMTUD might react to a
PTB message by clearing the DF bit in subsequent pack-
ets; we classify these hosts as clearing the DF bit. This
behaviour is a defence against an adversary sending a PTB
message with a small MTU which could then lead to the
host sending many small data packets [17].
3.1.2 An IPv6 PMTUD test
An IPv6 host must accept and process PTB messages, but
does not have to reduce its packet size below 1280 bytes [10].
Tunnelled connectivity is common in IPv6, so our ability
to directly test PMTUD is limited if a tunnel with a 1280
byte MTU is in the path. Similarly, if the webserver sends
segments that are too big for the network to carry to the
vantage point and the webserver does not receive a PTB
message, the vantage point will not see any data packets that
can be used to test for PMTUD behaviour. Therefore we
begin by advertising an MSS of 1440 bytes to the webserver,
sending a PTB with an MTU of 1480 bytes if a data packet
larger than this is received. Then, we test a connection with
an MSS of 1380 bytes and an MTU of 1280 bytes. Finally,
we test a connection with an MSS of 1220 bytes and an
MTU of 576 bytes. For the last test, we expect subsequent
packets to arrive with an IPv6 fragmentation header, even
if the packet is smaller than 1280 bytes. The last test also
allows us to infer PMTUD failure for earlier tests where no
data packets are received as an MSS of 1220 bytes should
be small enough in practice that packets could be carried.
3.2 Vantage Points
For our IPv4 tests we use two vantage points: a host lo-
cated in San Diego, USA, and another in Hamilton, New
Zealand. We use two hosts to reduce the chance that some
aspect of the network they are hosted on or their service
103MTU tested
No TCP connection
Early TCP reset
No data packets
Data packets too small
DF not set on data packets
Cleared DF after PTB
PMTUD success
PMTUD failure
Hamilton, NZ, 2010
San Diego, USA, 2010
576
256
0.6%
0.7%
0.2%
0.2%
0.2%
0.2%
0.1%
3.2%
3.3%
2.2%
4.6% 72.1%
5.3%
9.5% 18.3%
2004 [1]
256
2.5%
0.6%
–
–
29.6%
–
40.8%
17.3%
1480
1.7%
0.4%
0.2%
18.0%
1.5%
1.6%
1280
2.4%
0.3%
0.2%
6.1%
2.0%
2.7%
576
256
1480
0.7%
1.5%
1.6%
0.4%
0.3%
0.3%
0.3%
0.2%
0.2%
0.3% 17.2%
3.9%
3.3%
1.5%
2.2%
1.6%
4.5% 70.8%
1280
1.5%
0.2%
0.2%
5.2%
2.0%
2.7%
71.1% 77.4% 78.0%
5.2% 72.6% 79.1% 79.5%
5.7%
8.9%
9.4% 18.3%
6.0%
9.1%
Table 1: Results of our experiments and the earlier work of Medina, et al. [1]. The portion of webservers
that failed at PMTUD increases from 6% for an MTU of 1480 to 18% for an MTU of 256. Few webservers
will reduce their packet size to 256 bytes; instead, most reduce their packet size to 552 bytes, and most send
these packets with the DF bit cleared.
providers inﬂuencing the result; for example, by setting or
clearing the DF bit on received packets, or by re-writing
the MSS option contained in our SYN packets. For our
IPv6 tests we use ﬁve vantage points in geographically and
topologically diverse locations. We use the same San Diego
vantage point, as well as hosts in Amsterdam, Tokyo, New
York, and Christchurch, New Zealand. More vantage points
are required for the IPv6 tests owing to the belief that tun-
nelled paths are widespread; because PMTUD relies on a
tunnel sending a PTB message if it reduces the Path MTU,