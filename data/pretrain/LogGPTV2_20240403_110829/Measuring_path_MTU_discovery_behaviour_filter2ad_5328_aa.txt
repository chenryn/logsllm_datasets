# Measuring Path MTU Discovery Behaviour

**Authors:**
- Matthew J. Luckie
- Ben Stasiewicz

**Affiliation:**
- Department of Computer Science
- University of Waikato
- Hamilton, New Zealand
- Email: [PI:EMAIL]

## Abstract
Path MTU Discovery (PMTUD) is often considered unreliable due to firewalls that discard ICMP "Packet Too Big" messages. This paper examines PMTUD behavior for 50,000 popular websites and finds that the failure rate in IPv4 is significantly lower than previously reported. The overall failure rate ranges from 5% to 18%, depending on the MTU of the constraining link. We investigate methods used by webserver operators to reduce their dependence on PMTUD and find that 11% limit their packet sizes to no more than 1380 bytes. We identify several common behaviors that appear to be software bugs rather than firewall filtering. Correcting these bugs could reduce PMTUD failures by 63%. Additionally, we find that the IPv6 failure rate is lower than the IPv4 rate, even though IPv6 has more potential points of failure.

### Categories and Subject Descriptors
C.4 [Performance of Systems]: Measurement techniques

### General Terms
Measurement

### Keywords
TCP, Path MTU Discovery, IPv6, IPv4, middleboxes

## 1. Introduction
Path MTU Discovery (PMTUD) is widely believed to be unreliable because firewalls often discard ICMP "Packet Too Big" (PTB) messages. In 2004, Medina et al. [1] reported that 17% of tested IPv4 webservers failed PMTUD by not reducing their packet size when requested. They attributed this to firewalls discarding PTB messages. While IPv4 hosts can choose whether to use PMTUD, IPv6 hosts are required to act on PTB messages. This paper investigates PMTUD behavior for both IPv4 and IPv6 webservers.

**Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.**

IMC'10, November 1â€“3, 2010, Melbourne, Australia.
Copyright 2010 ACM 978-1-4503-0057-5/10/11 ...$10.00.

The PMTUD mechanism is similar for both IPv4 [2] and IPv6 [3]. When a router receives a packet that is too large to forward, it discards the packet and sends a PTB message to the host, indicating the maximum transmission unit (MTU) it can handle. The host should then reduce its packet size accordingly. Using the largest possible packet size that can be forwarded intact through a network is optimal, as "much of the cost of packetized communication is per-packet rather than per-byte" [4].

However, there are many causes of PMTUD failure [5]. When PMTUD fails, it can cause Internet communications to fail in ways that are difficult to diagnose [6]. A well-known cause is firewalls that discard all ICMP messages, including PTB messages. Similarly, some routers are configured to not send ICMP destination unreachable messages, which in IPv4 also suppresses PTB messages.

IPv6 separates PTB messages from destination unreachable messages, so disabling destination unreachable messages should not affect PTB messages. However, a router will not send a PTB message if it believes the network can forward a larger packet than it actually can, leading to an MTU mismatch.

Given the experiences with IPv4 and the IPv6 requirement for PTB messages, there is concern that PMTUD will fail more frequently with IPv6, potentially hampering user experience and adoption. Some have recommended configuring the MTU of interfaces on end-hosts to 1280 bytes [7, 8, 9]. The rationale is that the IPv6 minimum MTU is 1280 bytes, so a host will never need to send smaller packets or rely on PTB messages. If this advice is followed, the host no longer needs to use PMTUD, as it will never send packets larger than 1280 bytes and will advertise a TCP Maximum Segment Size (MSS) that ensures the remote host also sends packets no larger than 1280 bytes. However, this approach does not utilize the capabilities of paths that can forward larger packets. Additionally, RFC 2460 requires a host to act on a PTB message with an MTU smaller than 1280 bytes by sending all packets with an IPv6 fragmentation header, regardless of size [10].

This paper investigates PMTUD behavior for IPv4 and IPv6 webservers. Our methodology is similar to that used by Medina et al. [1]. Our contributions include:
1. Measurements of IPv4 webserver response to PTB messages with different MTU values.
2. Longitudinal measurement of IPv4 PMTUD behavior from a packet trace.
3. A method to measure IPv6 webserver PMTUD behavior and compare it with IPv4 behavior.
4. Identification of apparent software flaws responsible for more than half of the failures.

The rest of the paper begins with a survey of related work. Section 3 describes the methodology, the hosts surveyed, and the vantage points used. Section 4 presents data collected for 50,000 popular websites reachable via IPv4, analyzes the effect of popularity on ICMP filtering behavior, and compares results with those of Medina et al. Section 5 presents data collected for all webservers with globally routable IPv6 addresses in the Alexa top 1 million list [11]. Finally, Section 6 concludes.

## 2. Related Work
Medina et al. [1] characterized the TCP behavior of webservers in 2004 using TBIT [12]. Overall, 17% of 81,776 targets tested and 35% of the top 500 webservers did not send smaller packets when requested to reduce their packet size to 256 bytes. They hypothesized that this behavior was caused by firewalls discarding PTB messages. Our methodology is derived from theirs, with enhancements such as measuring responses to PTB messages with different MTU values, classifying hosts that respond by clearing the DF bit, adding reassembly support for fragmented packets, and including IPv6 support.

Luckie et al. [13] characterized PMTUD failures for hosts that could send 9000-byte packets to hosts that could only receive 1500-byte packets. In this scenario, routers must send PTB messages for PMTUD to work. They found that 30% of the paths tested to 136 hosts failed PMTUD, often due to operators configuring routers to not send ICMP destination unreachable messages or due to MTU mismatches. Our tests measure the ability of hosts to receive and act on PTB messages, rather than the ability of routers to send them.

The IETF PMTUD working group released an alternative method called Packetization Layer Path MTU Discovery (PLPMTUD) [14]. PLPMTUD does not rely on PTB messages but requires a reliable transport protocol. For TCP, PLPMTUD inserts a large segment to test the network's ability to carry that packet size before a sequence of smaller segments. If the large segment is discarded, the smaller segments will cause duplicate acknowledgments, prompting the sender to break the data into smaller segments and retransmit. Implementation of PLPMTUD is complex, and the only deployed implementation is in the Linux kernel from version 2.6.17, but it is off by default [15].

Microsoft Windows implements PMTUD blackhole detection for TCP, which is disabled by default [16]. If a system does not receive an acknowledgment after two retransmissions, it either clears the DF bit or lowers its MSS value for the connection to 536 bytes, depending on the Windows version. If acknowledgments are then received, it sends 536-byte packets for the lifetime of the connection.

## 3. Method

### 3.1 Measuring PMTUD Behavior
We use an approach derived from the TCP Behavior Inference Tool (TBIT) work in [1] to measure PMTUD behavior. Briefly, PMTUD behavior is inferred by the behavior of a remote TCP after a PTB message is sent asking it to send smaller packets. If the host reduces the packet size as requested, we infer the PTB message was received and acted on. If the host does not reduce the segment size and retransmits the data, another PTB is sent requesting it to do so. We infer failure if the host retransmits the data three times without reducing the segment size or clearing the DF bit.

#### 3.1.1 An IPv4 PMTUD Test
We test the PMTUD behavior of webservers with four different MTU values: 1480, 1280, 576, and 256 bytes. A 1480-byte MTU corresponds to an IP tunnel over Ethernet, 1280 is a popular choice for tunnel software, 576 is the minimum size packet a host is required to reassemble, and 256 bytes is the MTU value tested in [1]. We send PTB messages if the DF bit is set in a packet larger than the MTU we are testing. We advertise an MSS of 1460 bytes to each webserver for all IPv4 tests.

If we do not receive any packet larger than the MTU value we are testing, we classify the test as such. If we receive data packets larger than the MTU value we are testing but the DF bit is not set, we classify these hosts as not attempting PMTUD. A host that supports PMTUD might react to a PTB message by clearing the DF bit in subsequent packets; we classify these hosts as clearing the DF bit. This behavior is a defense against an adversary sending a PTB message with a small MTU, which could lead to the host sending many small data packets [17].

#### 3.1.2 An IPv6 PMTUD Test
An IPv6 host must accept and process PTB messages but does not have to reduce its packet size below 1280 bytes [10]. Tunnelled connectivity is common in IPv6, so our ability to directly test PMTUD is limited if a tunnel with a 1280-byte MTU is in the path. If the webserver sends segments that are too large for the network to carry to the vantage point and the webserver does not receive a PTB message, the vantage point will not see any data packets that can be used to test for PMTUD behavior. Therefore, we begin by advertising an MSS of 1440 bytes to the webserver, sending a PTB with an MTU of 1480 bytes if a data packet larger than this is received. Then, we test a connection with an MSS of 1380 bytes and an MTU of 1280 bytes. Finally, we test a connection with an MSS of 1220 bytes and an MTU of 576 bytes. For the last test, we expect subsequent packets to arrive with an IPv6 fragmentation header, even if the packet is smaller than 1280 bytes. The last test also allows us to infer PMTUD failure for earlier tests where no data packets are received, as an MSS of 1220 bytes should be small enough in practice that packets could be carried.

### 3.2 Vantage Points
For our IPv4 tests, we use two vantage points: one in San Diego, USA, and another in Hamilton, New Zealand. Using two hosts reduces the chance that some aspect of the network they are hosted on or their service providers influences the result, such as setting or clearing the DF bit on received packets or rewriting the MSS option in our SYN packets. For our IPv6 tests, we use five vantage points in geographically and topologically diverse locations: San Diego, Amsterdam, Tokyo, New York, and Christchurch, New Zealand. More vantage points are required for the IPv6 tests due to the belief that tunnelled paths are widespread. PMTUD relies on a tunnel sending a PTB message if it reduces the Path MTU, making multiple vantage points necessary.

| MTU Tested | No TCP Connection | Early TCP Reset | No Data Packets | Data Packets Too Small | DF Not Set on Data Packets | Cleared DF After PTB | PMTUD Success | PMTUD Failure |
|------------|-------------------|-----------------|-----------------|------------------------|---------------------------|---------------------|---------------|---------------|
| 1480       | 1.7%              | 0.4%            | 0.2%            | 18.0%                  | 1.5%                      | 1.6%                | 72.1%         | 5.3%          |
| 1280       | 2.4%              | 0.3%            | 0.2%            | 6.1%                   | 2.0%                      | 2.7%                | 77.4%         | 8.9%          |
| 576        | 0.6%              | 0.7%            | 0.2%            | 0.2%                   | 0.2%                      | 0.1%                | 70.8%         | 9.4%          |
| 256        | 0.6%              | 0.7%            | 0.2%            | 0.2%                   | 0.2%                      | 0.1%                | 72.6%         | 18.3%         |

**Table 1: Results of our experiments and the earlier work of Medina et al. [1]. The portion of webservers that failed at PMTUD increases from 6% for an MTU of 1480 to 18% for an MTU of 256. Few webservers will reduce their packet size to 256 bytes; instead, most reduce their packet size to 552 bytes, and most send these packets with the DF bit cleared.**

This table summarizes the results of our experiments and the earlier work of Medina et al. [1]. The failure rate of PMTUD increases from 6% for an MTU of 1480 bytes to 18% for an MTU of 256 bytes. Few webservers will reduce their packet size to 256 bytes; instead, most reduce their packet size to 552 bytes, and most send these packets with the DF bit cleared.