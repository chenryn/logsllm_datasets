differentfromthetargetdomain,representsthemajorapplicationobstacletosomeauthors.Nam
etal.[103]studytheproblemoftransferlearningforsoftwaredefectsbyapplyinganextendedver-
sionof TransferComponentAnalysis(TCA)tolearncommonlatentfactorsbetweensource
andtargetprojects.Theextension(TCA+)improvescross-projectpredictionbyselectinganappro-
priatenormalizationoptionforsourceandtarget.TCA+featuresarethenusedasinputofalogistic
regressionclassifiertopredictfaultymodulefiles.Theapproachisvalidatedontwodatasets(Re-
link [147] and the already mentioned AEEEM [35]): documents are represented by the different
ACMTransactionsonIntelligentSystemsandTechnology,Vol.12,No.6,Article81.Publicationdate:November2021.
ASurveyofAIOpsMethodsforFailureManagement 81:13
Table5. SummaryofDescribedMethodsforSDP,CategorizedbyDataSources,SDPTask,
andTargetCodeUnit
DataSources SDPTypology TargetCodeUnit
Paper(s) CodeMetrics
atadTSA tcejorp-emaS tcejorp-ssorC noitcnuF ssalC eliF eludoM
citatS -egnahC
detaler
[102] • • • •
[38] • • • •
[94] • • •
[115] • • •
[42] • • •
[117] • • •
[50] • • • •
[35,98] • • • •
[153] • • • •
[52] • • •
[76] • • • • •
[103] • • • • •
[141] • • • •
softwaremetricsavailableforeachdataset,andresultsarecomparedtootherpredictionmethods
usingtheF-measure(forcross-projectprediction,0.61onRelinkand0.41onAEEEM).
Acritiqueoftraditionalcodemetricsisthattheyaretoohandcraftedandsimplistic.Analter-
nativeistodirectlyparsethesourcecodeusingAbstractSyntaxTrees(AST).Wangetal.[141]
debatetheabilityofcodemetricstomodelsemanticsandthusdiscriminatebetweencoderegions
with the same structure and different semantics, arguing in favor of latent semantic representa-
tions.Intheirwork,afterparsingthecodewithASTs,aDeepBeliefNetwork(DBN)istrained
tolearnsemanticfeaturesinanunsupervisedfashionviastochasticfirst-orderoptimization.Then,
NaïveBayes,DecisionTrees,andLogisticRegressionmodelsareusedtopredictfaultsfromthe
latentrepresentationsinbothwithin-andcross-projectsettings.ResultsobtainedonJavaprojects
ofthePROMISErepositorydatasetarecomparedwithTCA+[103]andshowasignificantimprove-
mentintermsofF-scoreinthecross-projectsetting(0.568,+9.1%over[103]).
Li et al. [76] explore Convolutional Neural Networks (CNN) for SDP. During the parsing
step,asubsetofASTnodescorrespondingtodifferenttypesofsemanticoperationsisextracted.
Thesetokensaremappedtonumericalfeaturesusingembeddingsandfedintoa1Dconvolutional
architecture,whichisusedtolearnintermediaterepresentationsoftheinputcode,andlaterinte-
gratedwithhandcraftedfeaturesforthefinalprediction.Resultsobtainedonasmallersubsetof
projectsofthesamePROMISEdatasetarecomparedwithatraditionallogisticregressionmodel
and the DBN approach of Reference [141], exhibiting again a substantial F-score improvement
(0.608,+0.084overtraditionalmethodsand+0.065overReference[141]forwithin-projectSDP).
4.1.2 FaultInjection. Faultinjectionisthedeliberateintroductionoffaultsintoatargetwork-
ing system [5] to evaluate the level of fault tolerance reached. In traditional computer systems,
thisevaluationrepresentsavalidationofthereactivecapabilitiesofasystemoff-the-shelf.Inthe
specificcaseofAIOpsandfailuremanagement,faultinjectionalsoallowsonetoevaluatetheeffi-
cacyofexternallydeployedreactivemechanisms.Severalworkspresentedinlatersectionshave
ACMTransactionsonIntelligentSystemsandTechnology,Vol.12,No.6,Article81.Publicationdate:November2021.
81:14 P.Notaroetal.
appliedfaultinjectiontechniquesforthispurpose[25,87,110,119,124,127].Importantdefinitions
infaultinjectionarethesetofinjectedfaultsorfaultload(F);thesetofactivationsoffaultsinthe
system(A);theset(R)ofreadoutsfromthesystemandtheset(M)ofmeasuredvalues.FandA
modeltheinjectionprocedurefromtheinput,RandMfromtheoutput[5].
Astheconceptoffaultinjectionisdisconnectedfromthespecifictypeofsystemundertest,its
useisnotrestrictedtoasingleapplicabilityscenario.Faultinjectioncanbeappliedatthehardware
level,toemulatetheappearanceoffaultsinphysicalcomponents,suchasharddrivesandCPUs,as
itisinfeasibleandcostlytoinducerealfaultsinthisdomain.Atthesoftwarelevel,faultinjections
are used to understand the effect of bugs in the behavior of computer software or to model the
causaldynamicsofoneormoresoftwarecomponentsinashared-resourceenvironment,suchas
anoperatingsystemandtheexecutingprocesses.SoftwareFaultInjection(SFI)istheautomated
andplannedinsertionofsoftwarefaults(whichinthiscaseconstitutethefaultload)[105].Software
faults can be inserted directly or can be simulated to model the consequences of their injection.
For instance, the injection of erroneous data in a program introduces a failure, representing an
undesired behavior, but not a root-cause problem (i.e., a fault), therefore modeling the problem
indirectly.Anothercommontargetfordatacorruptionisfunctioninterfaces,suchasAPIs.
AconceptconnectedtoSFIisMutationTesting(MT),i.e.,theintroductionofsmallmodifica-
tionsinthesourcecodetoevaluatethequalityofcodecoverageachievedbytestcases.MTcomes
closer to mimicking faults compared to error injection, because it introduces software faults di-
rectly rather than their consequences (the errors). However, introducing random code changes,
targeting variable assignments and function calls, can become inefficient if the procedureis not
guided,duetotheexpensivecostofrunningthetestcasesuiteforeachoftheexponentiallynu-
merous mutated versions of the program. It is therefore fundamental to reduce the number of
mutations to the minimum essential, without losing the discernment ability of mutation opera-
tions.Nowadays,manyavailabletoolstrytoidentifycodechangesthatcanberepresentativeof
realsoftwarefaults.While,ontheonehand,MToperatestoimprovethequalityandcoverageof
testcases,SFI,ontheotherhand,attemptstoidentifyandemulatefaultsthatcannotbediscovered
bytestsuites,becausetestingisperformedinsandboxedscenarios,divergingconsiderablyfrom
realoperationworkloads.SFIcoversthisgapbystressingtheoperatingconditionsofaproduction
environmentwhileexaminingtheconsequences.
In a distributed computing environment, fault injection can also be applied at the cluster or
datacenterscale,forexample, torandomly terminateoperationsattheinstancelevel and stress-
test the resiliency of the distributed service under investigation. This is the case with software
toolssuchasChaosMonkeyandKongbyNetflix[13]orFacebook’sProjectStorm[69].Finally,
faultinjectiontechniquescanbeappliedatthenetworklevelbasedonprinciplesthataresimilar
tothehardwareandsoftwarelevelpreviouslycited.
Nowadays,approachesperformingfaultinjectionaremostlyoutoftherealmofAI,asfaultinjec-
tion predominantly consists of switching off mechanisms and fault insertion procedures, where
the problem is purely algorithmic and the necessity of intelligent agents is unjustified. The few
available contributions of AI to the field are concentrated around the implementation selection
policiesforthefaultload,wherethenumberofappliedfaultsneedstobereducedforcomputation
reasons.
In the context of MT, Siami Namin et al. [128] use a regression-based model to estimate the
efficacy of a subset of mutation operators in predicting the mutation adequacy ratio (AM), a
measureoftestcoverageinMT.Inparticular,foreachmutationoperator,theycomputetheindi-
vidualAManduseitasaregressionfeaturetoestimatetheoverallAMofthetestsuite.Theyargue
thataminimalsubsetofmutatorsabletopredicttheAMmeasurewillalsorepresenttheideal,re-
ducedsubsetofoperatorstoapplyformutationtesting.Theyalsoapplyotherstatisticalanalysis
ACMTransactionsonIntelligentSystemsandTechnology,Vol.12,No.6,Article81.Publicationdate:November2021.
ASurveyofAIOpsMethodsforFailureManagement 81:15
techniques,suchasclusteringandcorrelation,toidentifygroupsofsimilarvariablesandeliminate
theone with thehighestcomputationcostfrom theselectiondomain. Using thistechnique,the
setofcodemutantsisreducedto8%oftheinitialsize,drasticallyreducingtheestimationtimefor
theAMmeasure,whichisinturnnecessarytoestimatecodefailurecoverage.
Motivated by the strong presence of unrepresentative faults that are obtained with state-of-
the-artSFIapproaches,Natellaetal.[105]usetwoMachineLearningapproachestoimprovethe
faultloadset.Theyapplydecisiontreesforclassifyingcomponentsintohigherandlowerfaultrisk
(MRandLR,MostandLeastRepresentative,respectively)forconsequentfaultselection.Moreover,
startingfromtheobservationthatlowfan-inandfan-outcomponentshavefaultsthataremore
difficulttodetect,theauthorsapplyanunsupervisedlearningapproachusingthecodemetricsof
softwarecomponents(seealsoSection4.1.1).Specifically,k-meansclusteringisusedtoseparate
targetcomponentsintotwoclustersbasedontheirinteraction.Faultsareinjectedintocomponents
of the cluster with the lowest fan-in and fan-out. The approach is tested on different software
components(MySQL,RTEMS,PostgreSQL)atdifferentgranularitiesandcanreducefaultloadsize
(−22%to−69%)whileincreasingfaultrepresentativeness(+4%to+26%).
4.1.3 SoftwareAgingandRejuvenation. Softwareagingdescribestheprocessofaccumulationof
errorsduringtheexecutionofaprogramthateventuallyresultsinterminalfailures,suchashangs,
crashes,orheavyperformancedegradations[49].Knowncausesofsoftwareagingincludememory
leaksandbloats,unreleasedfilelocks,datafragmentation,andnumericalerroraccumulation[21].
SeveralMachineLearningtechniqueshavebeenappliedtopredicttheexhaustionofresources
preemptively.Gargetal.[49]estimatetime-to-exhaustionofsystemresources,suchasfreemem-
ory,fileandprocesstablesizes,andusedswapspace,usinginstrumentationtoolsavailableunder
theUNIXoperatingsystem.Resourcemeasurementsarecollectedonseveraloperatingworksta-
tionstoconstructtimeseries,whichareannotatedwiththefailurecauseincaseofoutage.Trends
aredetectedandexhaustiontimeisquantifiedusingregressiontechniquesandseasonaltesting.
Inadditiontothetime-basedmeasurementofresources,Vaidyanathanetal.[136]investigate
theeffectofsoftwareagingduetothecurrentsystemworkload.Asemi-Markovrewardmodelis
fittedfromtheavailableworkloadandresourcedataunderUNIX,wherethemodelstatesrepre-
sent different workload scenarios, and the association to a specific state is identified employing
Hartigan’sk-meansclustering.Time-to-exhaustionofmemoryandswapspaceisestimatedwith
a non-parametricregression techniquefor each workload state separately. Alonso et al. [4] con-
siderthecaseofnon-linearandpiecewiselinearresourceconsumptionadoptinganensembleof
linearregressionmodels,selectedusingadecisiontreeonthesameinputfeaturesoftheregres-
sion model (a combined set of hardware and software host metrics). Decision trees are chosen
becausetheyofferatrade-offbetweenaccuracyandinterpretability.Theauthorsproposetouse
theirinterpretabilityforroot-causediagnosisaswell(Section4.4.2).
Softwareagingcanbecontrastedwithsoftwarerejuvenation[57],acorrectivemeasurewhere
theexecutionofapieceofsoftwareistemporarilysuspendedtocleanitsinternalstate.Software
rejuvenationcanbeperformedatthesoftwareandOSlevel.Commoncleaningoperationsinclude
garbagecollection,flushingkerneltables,re-initializinginternaldatastructures[136].According
to Castelli et al. [21], software rejuvenation fits naturally inside a cluster environment (but sim-
ilar considerations are true for any distributed computation system, e.g., cloud), because of the
already present node failover mechanisms and the possibility to schedule rejuvenation and ag-
ing prediction routines. To this end, authors distinguish between periodic (or synchronous) and
prediction-based (or asynchronous) rejuvenation policies, where the latter requires a prediction
modelforfuturesoftwarefailures.Thefailurepredictionmodelcanbelongto(butisnotlimited
to)thecategoryofresourceexhaustionpredictorsdescribedabove.
ACMTransactionsonIntelligentSystemsandTechnology,Vol.12,No.6,Article81.Publicationdate:November2021.
81:16 P.Notaroetal.
AI has been used in the past to suggest efficient rejuvenation scheduling policies. The same
Castellietal.[21]applystochasticrewardnetstomodelservicedowntimesanddrawconclusions
ontheefficiencyofrejuvenationpolicies.Theiranalysisconsidersbothtime-basedandprediction-
basedpolicies.Forthelatter,theyresorttoresourceexhaustionpredictionalgorithmstoestimate
futurefailureperiods,idealforrefreshingtheinternalstateandexaminetheexpecteddowntimeas
afunctionofthepredictionmodelaccuracy(orpredictioncoverage).Bothperiodicandprediction-
basedpoliciesareshowntobeabletoreducedowntimesignificantly,withprediction-basedmeth-
odshavingalargerimprovementoverall(−60%downtimeat90%coverageversus−25%withopti-
maltime-based),whilehigh-frequencyperiodicpoliciescanbettertoleratesimultaneousfailures
(−95%versus−85%ofprediction-basedmethods).
InReference[137],Vaidyanathanetal.buildupontheirworkload-inclusiveMarkovprediction
approach[136]toderiveoptimalperiodicrejuvenationpolicies.Tocapturethemanifestationof
rejuvenationandfailurebehavior,theydevelopacomprehensivetransition-basedmodelbetween
three states (working, failure, and rejuvenation). The model parameters (such as the period of
rejuvenation)areoptimizedtoreachdifferentobjectives(e.g.,maximumsteady-stateavailability
orminimumdowntimecost).Asimilarstrategyallowsonetoimprovethepreventivestrategies
ofadistributedsystemduringitsdesignstage.
4.1.4 Checkpointing. A concept linked to software rejuvenation is checkpointing, i.e., the
continuousandpreemptiveprocessofsavingthesystemstatebeforetheoccurrenceofafailure.
Similar to software rejuvenation, checkpointing tolerates failures by occasionally interrupting
the execution of a program to take precautionary actions. Different from software rejuvenation,
during checkpointing the interruption period is used to save the internal state of the system
to persistent storage. In case a fatal failure occurs, the created checkpoint file can be used to
resume the program and reduce failure overhead. Checkpointing techniques are common in
distributed computing, Checkpointing is also frequently used in large-scale computing systems,
although with the increase of scale the higher error rates make it less practical [62, 95]. To this
end,theconceptofmulti-levelcheckpointingwasintroduced:checkpointsarecreatedatdifferent
component levels, and based on the component resiliency and the permissible time overhead, a
differentcheckpointingstrategyisselectedforeachlevel.
Asinthecaseofsoftwarerejuvenation,AIisusedtomodelafaultyexecutionworkloadunder
differentcheckpointingstrategiesandselectthemostsuitablestrategyaccordingtodifferentobjec-
tives.Again,checkpointingcanbestaticordynamicdependingontheschedulingofcheckpoints.
AllthepapersinvestigatedoperatewithintheframeworkofMarkovprocesses[62,95,114].Oka-
muraetal.[114]developadynamiccheckpointingschemeforsingle-processapplicationsbased