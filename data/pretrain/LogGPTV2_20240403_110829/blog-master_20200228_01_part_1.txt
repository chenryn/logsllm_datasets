## 累加链条件过滤 - 递归、窗口、UDF、游标、模拟递归、scan 剪切  
### 作者                                                                        
digoal                                                                                                                 
### 日期                                                                                                                 
2020-02-28                                                                                                             
### 标签                                                                                                                 
PostgreSQL , 资金链累加 , 递归 , 窗口 , UDF , 游标 , 模拟递归 , scan剪切    
----               
## 背景    
在一些业务场景中会涉及在滑动窗口内的: 资金链的累加、平均值、方差等作为动态过滤条件的需求.  
例如有一个score一段, 按时间或序列字段返回, 并且要求当返回的记录(score总和)大于某个值时停止输出, 或者在限制条数内(score总和)没有达到某个值也停止输出.  
总和可以替换成平均值、方差等其他聚合条件.  
实际上可以理解为where条件是: 在一个顺序上的记录的动态计算.   
这个需求曾经有过类似的:  
[《PostgreSQL 递归查询一例 - 资金累加链》](../201604/20160405_01.md)    
实际上达成这个需求的方法比较多:  
- 递归查询  
- 窗口查询  
- 自定义UDF  
## 例子1  
1、创建测试表  
```  
create table t (  
id int8 primary key,   
uid int,   
score int,   
info text,   
crt_time timestamp  
);  
```  
2、写入100万随机记录  
```  
insert into t (id,uid,score,info,crt_time)  
select generate_series(1,1000000), random()*100, random()*10000, md5(random()::text), clock_timestamp();  
```  
3、使用窗口查询, 当累加值达到100000时, 终止返回, 或10条时终止返回.  
```  
select * from (  
select sum(score) over w as s_score, *   
from t   
window w as (order by id ROWS between UNBOUNDED PRECEDING and CURRENT ROW)   
) t  
where s_score  i_limit or o_s_score > i_s_score then   
      close curs1;  
      return;  
    end if;  
    return next;  
  end loop;  
  close curs1;  
  return;  
end;  
$$ language plpgsql strict;  
```  
来看一下, 性能飙升  
```  
db1=# select * from get_res(10000,3);  
 o_s_score | o_id | o_uid | o_score |              o_info              |         o_crt_time           
-----------+------+-------+---------+----------------------------------+----------------------------  
      3278 |    1 |    49 |    3278 | f4b1f6a84f283ee24b79e060f40b4ee8 | 2020-02-28 09:43:51.50375  
      3514 |    2 |    37 |     236 | 7895a9af2113b5aa8768494c96455d92 | 2020-02-28 09:43:51.503861  
(2 rows)  
Time: 0.562 ms  
db1=# select * from get_res(10000,30);  
 o_s_score | o_id | o_uid | o_score |              o_info              |         o_crt_time           
-----------+------+-------+---------+----------------------------------+----------------------------  
      3278 |    1 |    49 |    3278 | f4b1f6a84f283ee24b79e060f40b4ee8 | 2020-02-28 09:43:51.50375  
      3514 |    2 |    37 |     236 | 7895a9af2113b5aa8768494c96455d92 | 2020-02-28 09:43:51.503861  
(2 rows)  
Time: 0.238 ms  
db1=# select * from get_res(10000,2);  
 o_s_score | o_id | o_uid | o_score |              o_info              |         o_crt_time           
-----------+------+-------+---------+----------------------------------+----------------------------  
      3278 |    1 |    49 |    3278 | f4b1f6a84f283ee24b79e060f40b4ee8 | 2020-02-28 09:43:51.50375  
      3514 |    2 |    37 |     236 | 7895a9af2113b5aa8768494c96455d92 | 2020-02-28 09:43:51.503861  
(2 rows)  
Time: 0.294 ms  
db1=# select * from get_res(10000,1);  
 o_s_score | o_id | o_uid | o_score |              o_info              |        o_crt_time           
-----------+------+-------+---------+----------------------------------+---------------------------  
      3278 |    1 |    49 |    3278 | f4b1f6a84f283ee24b79e060f40b4ee8 | 2020-02-28 09:43:51.50375  
(1 row)  
Time: 0.193 ms  
db1=# select * from get_res(10000,0);  
 o_s_score | o_id | o_uid | o_score | o_info | o_crt_time   
-----------+------+-------+---------+--------+------------  
(0 rows)  
Time: 0.376 ms  
```  
432毫秒降到0.238毫秒  
### 窗口查询性能优化2 - 递归查询  
[《PostgrSQL 递归SQL的几个应用 - 极客与正常人的思维》](../201705/20170519_01.md)    
使用递归可以达到同样的效果,如下  
```  
with recursive a as (  
(  
select score as s_score,* from t where score  a.id)   
and  
s_score < 10000  -- 总分 , 不满足时直接跳出循环, 所以不需要额外扫描, 优化思路和udf一样    
limit 1   
)  
)  
select * from a   
where s_score<10000 -- 总分  
limit 10;  -- 限制返回条数   
```  
性能飙升  
```  
 s_score | id | uid | score |               info               |          crt_time            
---------+----+-----+-------+----------------------------------+----------------------------  
    3278 |  1 |  49 |  3278 | f4b1f6a84f283ee24b79e060f40b4ee8 | 2020-02-28 09:43:51.50375  
    3514 |  2 |  37 |   236 | 7895a9af2113b5aa8768494c96455d92 | 2020-02-28 09:43:51.503861  
(2 rows)  
Time: 0.369 ms  
```  
432毫秒降到0.369毫秒  
## 例子2  
数据和例子1一样, 只不过这次我们增加一个分组, 按UID分组, ID顺序返回, 当累加score达到指定值或者limit达到后返回.  
更加复杂一点, 但是使用窗口查询还是可以很方便的输出  
```  
select * from (  
select row_number() over w as rn, sum(score) over w as s_score, *   
from t   
window w as (partition by uid order by id ROWS between UNBOUNDED PRECEDING and CURRENT ROW)   
) t  
where s_score <10000 and rn <=5 ;   
 rn | s_score |  id  | uid | score |               info               |          crt_time            
----+---------+------+-----+-------+----------------------------------+----------------------------  
  1 |    4421 |  249 |   0 |  4421 | d1e50163bb6eb72196344ca1ecfcf976 | 2020-02-28 09:43:51.504471  
  2 |    4869 |  494 |   0 |   448 | 930e8598ee04fd02fa0902ff01444e55 | 2020-02-28 09:43:51.505138  
  3 |    6687 |  875 |   0 |  1818 | da86a0ce594baffaea20bd4874839106 | 2020-02-28 09:43:51.506114  
  4 |    9119 | 1067 |   0 |  2432 | 7e17f5028c8b856a353985e3cee07cb8 | 2020-02-28 09:43:51.506607  
  1 |    5213 |   29 |   1 |  5213 | 4291d618e5e295f42406e4d324196509 | 2020-02-28 09:43:51.503923  
  2 |    8015 |   49 |   1 |  2802 | bc03c9c6654ce3d7e50a9f1c8644123b | 2020-02-28 09:43:51.503961  