### 431
#### Value Settings

| **Value Name** | **Value Setting** | **Description** |
| --- | --- | --- |
| **DeleteFlag** | 0 or 1 (TRUE or FALSE) | A temporary flag set by the Service Control Manager (SCM) when a service is marked for deletion. |
| **Description** | Up to 32,767-byte description of the service. | A detailed description of the service. |
| **FailureActions** | Description of actions the SCM should take when the service process exits unexpectedly. | Specifies the actions the SCM should perform if the service fails, such as restarting the service, rebooting the system, or running a specified program. This setting does not apply to drivers. |
| **FailureCommand** | Program command line | The command line for the program to be executed if the `FailureActions` specify that a program should run upon service failure. This setting does not apply to drivers. |
| **DelayedAutoStart** | 0 or 1 (TRUE or FALSE) | Instructs the SCM to start this service after a certain delay following the SCM's startup, reducing the number of services starting simultaneously during system boot. |
| **PreshutdownTimeout** | Timeout in milliseconds | Allows services to override the default pre-shutdown notification timeout of 180 seconds. If the service does not respond within this timeout, the SCM will perform shutdown actions on it. |
| **ServiceSidType** | SERVICE_SID_TYPE_NONE (0x0), SERVICE_SID_TYPE_UNRESTRICTED (0x1), SERVICE_SID_TYPE_RESTRICTED (0x3) | Defines the type of service SID added to the service process token. Options include no SID, unrestricted SID, and restricted SID. |
| **Alias** | String | The name of the serviceâ€™s alias. |
| **RequiredPrivileges** | List of privileges | Contains the list of privileges required for the service to function. The SCM computes their union when creating the token for the shared process related to this service. |
| **Security** | Security descriptor | An optional security descriptor that defines who has what access to the service object created internally by the SCM. If omitted, the SCM applies a default security descriptor. |
| **LaunchProtected** | SERVICE_LAUNCH_PROTECTED_NONE (0x0), SERVICE_LAUNCH_PROTECTED_WINDOWS (0x1), SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT (0x2), SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT (0x3), SERVICE_LAUNCH_PROTECTED_APP_LIGHT (0x4) | Determines the level of protection applied when launching the service. Options range from no protection to various levels of protected processes. |
| **UserServiceFlags** | USER_SERVICE_FLAG_DSMA_ALLOW (0x1), USER_SERVICE_FLAG_NONDSMA_ALLOW (0x2) | Controls whether the default user can start the user service. |
| **SvcHostSplitDisable** | 0 or 1 (TRUE or FALSE) | When set to 1, prevents the SCM from enabling Svchost splitting. This setting applies only to shared services. |
| **PackageFullName** | String | The full name of the package for a packaged service. |
| **AppUserModelId** | String | The Application User Model ID (AUMID) of a packaged service. |
| **PackageOrigin** | PACKAGE_ORIGIN_UNSIGNED (0x1), PACKAGE_ORIGIN_INBOX (0x2), PACKAGE_ORIGIN_STORE (0x3), PACKAGE_ORIGIN_DEVELOPER_UNSIGNED (0x4), PACKAGE_ORIGIN_DEVELOPER_SIGNED (0x5) | Identifies the origin of the AppX package, indicating the entity that created it. |

### 432
#### Chapter 10: Management, Diagnostics, and Tracing

**Note:** The `Type` values include three that apply to device drivers: `device driver`, `file system driver`, and `file system recognizer`. These are used by Windows device drivers, which also store their parameters as registry data in the Services registry key. The SCM is responsible for starting non-PNP drivers with a `Start` value of `SERVICE_AUTO_START` or `SERVICE_DEMAND_START`, making it natural for the SCM database to include drivers.

Services use the other types, `SERVICE_WIN32_OWN_PROCESS` and `SERVICE_WIN32_SHARE_PROCESS`, which are mutually exclusive:
- An executable that hosts just one service uses the `SERVICE_WIN32_OWN_PROCESS` type.
- An executable that hosts multiple services specifies the `SERVICE_WIN32_SHARE_PROCESS` type. Hosting multiple services in a single process saves system resources but comes with the risk that if one service causes an error, all services in the process may terminate. Additionally, all services must run under the same account, although service security hardening mechanisms can limit some exposure to malicious attacks.

The `SERVICE_USER_SERVICE` flag denotes a user service, which runs with the identity of the currently logged-on user.

Trigger information is typically stored by the SCM under another subkey named `TriggerInfo`. Each trigger event is stored in a child key named as the event index, starting from 0 (e.g., the third trigger event is stored in the "TriggerInfo2" subkey).

### 433
#### Table 10-8: Triggered Services Registry Parameters

| **Value Name** | **Value Setting** | **Description** |
| --- | --- | --- |
| **Action** | SERVICE_TRIGGER_ACTION_SERVICE_START (0x1), SERVICE_TRIGGER_ACTION_SERVICE_STOP (0x2) | Specifies whether the service should start or stop when the trigger event occurs. |
| **Type** | SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL (0x1), SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY (0x2), SERVICE_TRIGGER_TYPE_DOMAIN_JOIN (0x3), SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT (0x4), SERVICE_TRIGGER_TYPE_GROUP_POLICY (0x5), SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT (0x6), SERVICE_TRIGGER_TYPE_CUSTOM (0x14) | Defines the type of trigger event, such as device interface arrival, IP address availability, domain join, firewall port event, group policy change, network endpoint activity, or a custom event. |
| **Guid** | Trigger subtype GUID | A GUID that identifies the trigger event subtype, depending on the trigger type. |
| **DataIndex** | Trigger-specific data | Data specific to the service trigger event, depending on the trigger event type. |
| **DataTypeIndex** | SERVICE_TRIGGER_DATA_TYPE_BINARY (0x1), SERVICE_TRIGGER_DATA_TYPE_STRING (0x2), SERVICE_TRIGGER_DATA_TYPE_LEVEL (0x3), SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY (0x4), SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL (0x5) | Specifies the format of the trigger-specific data, such as binary, string, byte value, or 64-bit unsigned integer. |

### 434
#### Service Accounts

The security context of a service is crucial for both developers and administrators, as it determines the resources the process can access. Most built-in services run in the security context of an appropriate service account, which has limited access rights. When a service is created, it usually specifies the local system account (displayed as SYSTEM or LocalSystem), which is very powerful. Other built-in accounts include the network service and local service accounts, which have fewer capabilities than the local system account.

### 435
#### The Local System Account

The local system account is the same account in which core Windows user-mode operating system components run, including:
- Session Manager (`%SystemRoot%\System32\Smss.exe`)
- Windows subsystem process (`Csrss.exe`)
- Local Security Authority process (`%SystemRoot%\System32\Lsass.exe`)
- Logon process (`%SystemRoot%\System32\Winlogon.exe`)

From a security perspective, the local system account is extremely powerful, with the following characteristics:
- It is a member of the local Administrators group.
- It has the right to enable all privileges, even those not normally granted to the local administrator account, such as creating security tokens.
- Most files and registry keys grant full access to the local system account. If not, the process can exercise the take-ownership privilege to gain access.
- Processes running under the local system account use the default user profile (`HKU\.DEFAULT`), so they cannot directly access configuration information in other user profiles unless they explicitly use the `LoadUserProfile` API.
- When a system is part of a Windows domain, the local system account includes the machine security identifier (SID) for the computer. This allows the service to be automatically authenticated on other machines in the same forest using its computer account.
- Unless the machine account is specifically granted access to resources, a process can access network resources that allow null sessions, such as network shares and named pipes. You can configure these settings in the `NullSessionPipes` and `NullSessionShares` registry values under `HKLM\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters`.

### 435
#### Table 10-9: Service Account Group Membership and Integrity Level

| **Service Account** | **Group Membership** | **Integrity Level** |
| --- | --- | --- |
| **Local System** | Administrators, Everyone, Authenticated Users, System integrity level | High integrity level |
| **Network Service** | Everyone, Users, Authenticated Users, Local, Network service, Console logon, System integrity level | Medium integrity level |
| **Local Service** | Everyone, Users, Authenticated Users, Local, Local service, Console logon, UWP capabilities groups, System integrity level | Medium integrity level |

### 435
#### Table 10-10: Service Account Privileges

| **Service Account** | **Privileges** |
| --- | --- |
| **Local System** | SeAssignPrimaryTokenPrivilege, SeAuditPrivilege, SeBackupPrivilege, SeChangeNotifyPrivilege, SeCreateGlobalPrivilege, SeCreatePagefilePrivilege, SeCreatePermanentPrivilege, SeCreateSymbolicLinkPrivilege, SeCreateTokenPrivilege |
| **Local Service / Network Service** | Limited set of privileges, typically fewer than the local system account. |

This structured and organized format should make the information clearer, more coherent, and easier to understand.