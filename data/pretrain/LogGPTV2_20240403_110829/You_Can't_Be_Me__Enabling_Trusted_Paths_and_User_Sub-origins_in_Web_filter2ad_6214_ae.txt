loading. We can see that USERPATH introduces the negligible performance overhead to
these applications. This conﬁrms our speculation that the minimal performance over-
head that might incur from USERPATH would be largely masked by the timing variances
in network requests.
Enabling Trusted Paths and User Sub-origins in Web Browsers
167
Table 5. Time Taken for Login without & with USERPATH (in seconds)
Category
Application Name
Time without
USERPATH
Time with
USERPATH
Overhead
Social Networking
Social Networking
Social Networking
Email Application
Health Information System
Conference Management System
Conference Management System
E-commerce Application
E-commerce Application
E-commerce Application
E-commerce Application
E-commerce Application
E-commerce Application
E-commerce Application
Content Management System
Content Management System
Content Management System
File Sharing System
File Sharing System
Customer Management System
Elgg
Friendica
AstroSpaces
Roundcube
OpenEMR
HotCRP
OpenConf
OpenCart
PrestaShop
Magento
Zencart
osCommerce
StoreSprite
CubeCart
WordPress
Joomla
Drupal
Piwigo
ownCloud
X2CRM
3.38
4.88
0.397
7.28
3.238
1.037
0.173
4.26
3.52
3.02
1.16
7.38
5.03
3.05
3.708
2.74
1.56
1.55
5.2
9.105
3.45
5.02
0.406
7.49
3.338
1.065
0.176
4.40
3.56
3.07
1.2
7.46
5.13
3.09
3.777
2.81
1.62
1.57
5.36
9.364
2.07%
2.87%
2.27%
2.88%
3.09%
2.70%
1.73%
3.29%
1.14%
1.66%
2.83%
1.08%
1.99%
1.31%
1.86%
2.55%
3.44%
1.09%
3.08%
2.84%
6 Related Work
In this section, we discuss recent research works that are related to our solution.
Privilege Separation. Privilege separation reduces the potential damages of compro-
mised software components by partitioning software into different compartments. It
has been widely adopted in traditional applications [45,46], web browsers [47–49], and
web applications [18, 34]. View isolation implemented by PathCutter [24] separates
code running in different iframes (views) as well as requests coming out of different
views. Thus, it prevents unwanted access to data between views, either directly or in-
directly via sending requests to the server. Our solution in this paper applies privilege
separation using a user-centric approach. We bring in user sub-origins to the present
web, and conﬁne user data only to code delegated by the user sub-origin.
Data Conﬁnement. Conﬁning data in web applications has recently received attention
in the research community. For instance, Roesner et al. propose ACG, which allows
users to directly grant access to user-owned resources by UI interaction with such gad-
gets [15]. Our solution shares the similar insight as to conﬁne user data back to user-
sanctioned operations, although we face different challenges in protecting user data
on the web. Unlike resources on OS, the distributed nature of the web and decoupled
server-client architecture requires additional secure channels to conﬁne user data on the
web. We address such challenges by integrating TLS-SRP into web authentication to
build an end-to-end trusted path from the client-side application code to the web server.
Several other works have been proposed to conﬁne sensitive data on the web [8] or
cloud platform [50]. Compared to these proposals, our solution does not conﬁne user
data according to any application-speciﬁc conﬁguration or data propagation policies;
instead, it ensures that user data only ﬂows within user sub-origin, both at the client and
the server side.
168
E. Budianto et al.
Trusted Paths. Building trusted paths across untrusted components has practical
signiﬁcance today. Prior works examine potential solutions for trusted paths between
user-interaction elements and software applications [41,51,52]. Similarly, Web Wallet re-
designs browser’s user interfaces to protect user credentials against phishing attacks [29].
The usability of trusted path proposals has been evaluated in real-world usage [42, 51].
Zhou et al. propose a hypervisor-based general-purpose trusted path design on commod-
ity x86 computers, and present a case study on user-oriented trusted path [53].
Our solution builds an end-to-end trusted path by utilizing the existing functionality
of the web browser and server. This trusted path connects the user at the client side to
the server, ensuring that only user-delegated sub-origins can access protected data. Such
a trusted path differs from a recent proposal on a trusted path between user keyboard in-
puts and the web server, where no explicit notion of users is established [9]. Moreover,
compared to it, our solution requires much smaller changes to web browsers; by piggy-
backing on passwords for authentication, we avoid the usability challenges in requiring
users to generate and upload SSL keys as in [9]. Dong et al. propose a solution to iden-
tify requests crafted by injected scripts from those triggered by user interactions [13].
We apply a similar mechanism in our solution as part of input channel protection. How-
ever, their work focuses on monitoring and diagnosing web application behavior, and
does not yield a solution for protecting data in web applications.
Injection Attack Prevention. As we discuss in this paper, injected scripts pose major
threats to web applications. Previous endeavors of security researchers have devised nu-
merous solutions to prevent or mitigate script injection, such as CSP [1], blueprint [54],
DSI [55], and Noncespaces [56]. Nevertheless, in practice, it is difﬁcult to eliminate all
script injection vectors [2]. Our solution complement these solutions on script injection
prevention as a second line of defense.
7 Conclusion and Acknowledgments
In this paper, we propose new abstractions to bring in the explicit notion of user sub-
origins into the present web and establish an end-to-end trusted path between the user
and the web server. We show that our solution eliminates a large amount of PISE at-
tacks in real-world applications, and can be integrated with today’s web browsers and
applications with minimal adoption cost.
Acknowledgments. We thank the anonymous reviewers and our shepherd William
Robertson for their feedback and suggested improvements for this work. We thank
Kailas Patil, Atul Sadhu, Loi Luu, and Shweta Shinde for their comments on an early
presentation of this work. This work is supported by the Ministry of Education, Singa-
pore under Grant No. R-252-000-495-133. Xinshu Dong is supported by the research
grant for the Human Sixth Sense Programme at the Advanced Digital Sciences Center
from Singapore’s Agency for Science, Technology and Research (A*STAR).
References
1. W3C: Content security policy 1.0, http://www.w3.org/TR/CSP/
2. Johns, M.: Preparedjs: Secure script-templates for javascript. In: Detection of Intrusions and
Malware & Vulnerability Assessment (2013)
Enabling Trusted Paths and User Sub-origins in Web Browsers
169
3. Chen, P., Nikiforakis, N., Huygens, C., Desmet, L.: A dangerous mix: Large-scale analysis
of mixed-content websites. In: Information Security Conference (2013)
4. Trend Micro: New york times pushes fake av malvertisement, http://goo.gl/BtjgPc
5. Verizon: 2013 Data breach investigation report, http://www.verizonenterprise.
com/DBIR/2013/
6. Enigma Group: Facebook proﬁles can be hijacked by chrome extensions malware, http://
underurhat.com/hacking
7. Liu, L., Zhang, X., Yan, G., Chen, S.: Chrome extensions: Threat analysis and countermea-
sures. In: Network and Distributed System Security Symposium (2012)
8. Akhawe, D., Li, F., He, W., Saxena, P., Song, D.: Data-conﬁned html5 applications. In: Eu-
ropean Symposium on Research in Computer Security (2013)
9. Dong, X., Chen, Z., Siadati, H., Tople, S., Saxena, P., Liang, Z.: Protecting sensitive web
content from client-side vulnerabilities with cryptons. In: Proceedings of the 20th ACM Con-
ference on Computer and Communications Security (2013)
10. Parno, B., McCune, J.M., Wendlandt, D., Andersen, D.G., Perrig, A.: Clamp: Practical pre-
vention of large-scale data leaks. In: IEEE Symposium on Security and Privacy (2009)
11. Felt, A.P., Finifter, M., Weinberger, J., Wagner, D.: Diesel: Applying privilege separation
to database access. In: ACM Symposium on Information, Computer and Communications
Security (2011)
12. Chen, E.Y., Gorbaty, S., Singhal, A., Jackson, C.: Self-exﬁltration: The dangers of browser-
enforced information ﬂow control. In: Web 2.0 Security and Privacy (2012)
13. Dong, X., Patil, K., Mao, J., Liang, Z.: A comprehensive client-side behavior model for
diagnosing attacks in ajax applications. In: ICECCS (2013)
14. Projects, T.C.: Per-page suborigins, http://goo.gl/PoH5pY
15. Roesner, F., Kohno, T., Moshchuk, A., Parno, B., Wang, H.J., Cowan, C.: User-driven access
control: Rethinking permission granting in modern operating systems. In: Proceedings of the
2012 IEEE Symposium on Security and Privacy (2012)
16. Roesner, F., Fogarty, J., Kohno, T.: User interface toolkit mechanisms for securing interface
elements. In: User Interface Software and Technology (2012)
17. Dong, X., Hu, H., Saxena, P., Liang, Z.: A quantitative evaluation of privilege separation in
web browser designs. In: Crampton, J., Jajodia, S., Mayes, K. (eds.) ESORICS 2013. LNCS,
vol. 8134, pp. 75–93. Springer, Heidelberg (2013)
18. Akhawe, D., Saxena, P., Song, D.: Privilege separation in html5 applications. In: USENIX
Security (2012)
19. mOiwa, Y., Takagi, H., Watanabe, H., Suzuki, H.: Pake-based mutual http authentication for
preventing phishing attacks. In: World Wide Web Conference (2009)
20. Budianto, E., Jia, Y.: Summary of source code modiﬁcation, chromium patches, and userpath
technical report, https://github.com/ebudianto/UserPath
21. Budianto, E., Jia, Y.: Url for demo video, https://github.com/ebudianto/
UserPath/wiki/DEMO-Video-URLs
22. Dietz, M., Czeskis, A., Balfanz, D., Wallach, D.S.: Origin-bound certiﬁcates: A fresh ap-
proach to strong client authentication for the web. In: USENIX Security (2012)
23. Jackson, C., Simon, D.R., Tan, D.S., Barth, A.: An evaluation of extended validation and
picture-in-picture phishing attacks. In: Proceedings of 1st USEC (2007)
24. Cao, Y., Yegneswaran, V., Porras, P., Chen, Y.: Pathcutter: Severing the self-propagation path
of xss javascript worms in social web networks. In: Network and Distributed System Security
Symposium (2012)
25. Hansen, R., Grossman, J.: Clickjacking, http://goo.gl/p7dxIC
26. YGN Ethical Hacker Group: Elgg 1.7.9 xss vulnerability, http://goo.gl/XUeqis
27. Cve-2012-6561, C.V.E.: xss vulnerability in elgg, http://goo.gl/mmW8bM
170
E. Budianto et al.
28. Barth, A., Jackson, C., Mitchell, J.C.: Robust defenses for cross-site request forgery. In:
Conference on Computer and Communications Security (2008)
29. Wu, M., Miller, R.C., Little, G.: Web wallet: Preventing phishing attacks by revealing user
intentions. In: Symposium on Usable Privacy and Security (2006)
30. Bhargavan, K., Delignat-Lavaud, A., Maffeis, S.: Language-based defenses against untrusted
browser origins. In: USENIX Security (2013)
31. Maffeis, S., Mitchell, J.C., Taly, A.: Object capabilities and isolation of untrusted web appli-
cation. In: IEEE Symposium on Security and Privacy (2010)
32. Huang, L.S., Moshchuk, A., Wang, H.J., Schechter, S., Jackson, C.: Clickjacking: attacks
and defenses. In: USENIX Security (2012)
33. Zhou, Y., Evans, D.: Protecting private web content from embedded scripts. In: European
Symposium on Research in Computer Security (2011)
34. Dong, X., Tran, M., Liang, Z., Jiang, X.: Adsentry: comprehensive and ﬂexible conﬁnement
of javascript-based advertisements. In: ACSAC (2011)
35. Akhawe, D., Barth, A., Lam, P.E., Mitchell, J., Song, D.: Towards a formal foundation of
web security. In: Computer Security Foundations (2010)
36. Barth, A., Felt, A.P., Saxena, P., Boodman, A.: Protecting browsers from extension vulnera-
bilities. In: Network and Distributed System Security Symposium (2010)
37. Bisht, P., Hinrichs, T., Skrupsky, N., Bobrowicz, R., Venkatakrishnan, V.N.: Notamper: au-
tomatic blackbox detection of parameter tampering opportunities in web applications. In:
Conference on Computer and Communications Security (2010)
38. Wu, T.: The secure remote password protocol. In: Network and Distributed System Security
Symposium (1998)
39. The Spanner: Dom clobbering, http://goo.gl/ZOLmal
40. pAdida, B., Barth, A., Jackson, C.: Rootkits for javascript environments. In: WOOT (2009)
41. Ye, Z.E., Smith, S.: Trusted paths for browsers. In: USENIX Security (2002)
42. Libonati, A., McCune, J.M., Reiter, M.K.: Usability testing a malware-resistant input mech-
anism. In: Network and Distributed System Security Symposium (2011)
43. Engler, J., Karlof, C., Shi, E., Song, D.: Is it too late for pake? In: Proceedings of Web 2.0
Security and Privacy (2009)
44. Slack, Q.: Tls-srp in apache mod ssl, http://goo.gl/cHMoau
45. Provos, N., Friedl, M., Honeyman, P.: Preventing privilege escalation. In: USENIX Security
(2003)
46. Brumley, D., Song, D.: Privtrans: automatically partitioning programs for privilege separa-
tion. In: USENIX Security (2004)
47. Grier, C., Tang, S., King, S.: Designing and implementing the op and op2 web browsers.
ACM Transactions on the Web (2011)
48. Wang, H.J., Grier, C., Moshchuk, A., King, S.T., Choudhury, P., Venter, H.: The multi-
principal os construction of the gazelle web browser. In: USENIX Security (2009)
49. Barth, A., Jackson, C., Reis, C., Team, T.G.C.: The security architecture of the chromium
browser, http://goo.gl/BGjJqC
50. Papagiannis, I., Pietzuch, P.: Cloudﬁlter: practical control of sensitive data propagation to the
cloud. In: Cloud Computing Security Workshop (2012)
51. Tong, T., Evans, D.: Guardroid: A trusted path for password entry. In: MoST (2013)
52. McCune, J.M., Perrig, A., Reiter, M.K.: Safe passage for passwords and other sensitive data.
In: Network and Distributed System Security Symposium (2009)
53. Zhou, Z., Gligor, V.D., Newsome, J., McCune, J.M.: Building veriﬁable trusted path on com-
modity x86 computers. In: IEEE Symposium on Security and Privacy (2012)
Enabling Trusted Paths and User Sub-origins in Web Browsers
171
54. Ter Louw, M., Venkatakrishnan, V.N.: Blueprint: Robust prevention of cross-site scripting
attacks for existing browsers. In: IEEE Symposium on Security and Privacy (2009)
55. Nadji, Y., Saxena, P., Song, D.: Document structure integrity: A robust basis for cross-site
scripting defense. In: Network and Distributed System Security Symposium (2009)
56. Gundy, M.V., Chen, H.: Noncespaces: Using randomization to enforce information ﬂow
tracking and thwart cross-site scripting attacks. In: Network and Distributed System Security
Symposium (2009)