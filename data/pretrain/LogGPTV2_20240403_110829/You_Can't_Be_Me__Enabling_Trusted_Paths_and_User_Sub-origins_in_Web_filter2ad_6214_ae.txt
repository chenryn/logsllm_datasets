### Performance Overhead of USERPATH

Our analysis indicates that the introduction of USERPATH results in a negligible performance overhead for the applications tested. This confirms our hypothesis that any minimal performance impact from USERPATH would be largely overshadowed by the inherent timing variances in network requests.

### Enabling Trusted Paths and User Sub-origins in Web Browsers

#### Table 5: Time Taken for Login with and without USERPATH (in seconds)

| Category                   | Application Name        | Time without USERPATH | Time with USERPATH | Overhead (%) |
|----------------------------|-------------------------|-----------------------|--------------------|--------------|
| Social Networking          | Social Networking       | 3.38                  | 3.45               | 2.07%        |
|                            | Friendica               | 4.88                  | 5.02               | 2.87%        |
|                            | AstroSpaces             | 0.397                 | 0.406              | 2.27%        |
| Email Application          | Roundcube               | 7.28                  | 7.49               | 2.88%        |
| Health Information System  | OpenEMR                 | 3.238                 | 3.338              | 3.09%        |
| Conference Management System | HotCRP                | 1.037                 | 1.065              | 2.70%        |
|                            | OpenConf                | 0.173                 | 0.176              | 1.73%        |
| E-commerce Application     | OpenCart                | 4.26                  | 4.40               | 3.29%        |
|                            | PrestaShop              | 3.52                  | 3.56               | 1.14%        |
|                            | Magento                 | 3.02                  | 3.07               | 1.66%        |
|                            | Zencart                 | 1.16                  | 1.20               | 2.83%        |
|                            | osCommerce              | 7.38                  | 7.46               | 1.08%        |
|                            | StoreSprite             | 5.03                  | 5.13               | 1.99%        |
|                            | CubeCart                | 3.05                  | 3.09               | 1.31%        |
| Content Management System  | WordPress               | 3.708                 | 3.777              | 1.86%        |
|                            | Joomla                  | 2.74                  | 2.81               | 2.55%        |
|                            | Drupal                  | 1.56                  | 1.62               | 3.44%        |
| File Sharing System         | Piwigo                  | 1.55                  | 1.57               | 1.09%        |
|                            | ownCloud                | 5.2                   | 5.36               | 3.08%        |
| Customer Management System | X2CRM                   | 9.105                 | 9.364              | 2.84%        |

### Related Work

In this section, we discuss recent research works that are related to our solution.

#### Privilege Separation

Privilege separation reduces the potential damage from compromised software components by partitioning software into different compartments. This approach has been widely adopted in traditional applications [45, 46], web browsers [47–49], and web applications [18, 34]. For example, PathCutter [24] implements view isolation, separating code running in different iframes and preventing unwanted access to data between views. Our solution leverages privilege separation with a user-centric approach, introducing user sub-origins to confine user data only to code delegated by the user sub-origin.

#### Data Confinement

Confining data in web applications has recently gained attention in the research community. Roesner et al. propose ACG, which allows users to directly grant access to user-owned resources through UI interactions [15]. Our solution shares a similar goal of confining user data to user-sanctioned operations but faces unique challenges due to the distributed nature of the web and the decoupled server-client architecture. We address these challenges by integrating TLS-SRP into web authentication to establish an end-to-end trusted path from the client-side application code to the web server. Unlike other proposals, our solution does not rely on application-specific configurations or data propagation policies; instead, it ensures that user data flows only within the user sub-origin at both the client and server sides.

#### Trusted Paths

Building trusted paths across untrusted components is of practical significance today. Previous works have explored solutions for trusted paths between user-interaction elements and software applications [41, 51, 52]. For instance, Web Wallet redesigns browser interfaces to protect user credentials against phishing attacks [29]. The usability of trusted path proposals has been evaluated in real-world usage [42, 51]. Zhou et al. propose a hypervisor-based general-purpose trusted path design for commodity x86 computers, with a case study on user-oriented trusted paths [53].

Our solution builds an end-to-end trusted path using existing web browser and server functionalities. This trusted path connects the user at the client side to the server, ensuring that only user-delegated sub-origins can access protected data. This differs from a recent proposal on a trusted path between user keyboard inputs and the web server, where no explicit notion of users is established [9]. Our solution requires smaller changes to web browsers by leveraging password-based authentication, avoiding the usability challenges associated with requiring users to generate and upload SSL keys [9]. Dong et al. propose a mechanism to identify requests crafted by injected scripts from those triggered by user interactions [13]. We apply a similar mechanism as part of our input channel protection, but their work focuses on monitoring and diagnosing web application behavior rather than protecting data.

#### Injection Attack Prevention

Injected scripts pose significant threats to web applications. Security researchers have developed various solutions to prevent or mitigate script injection, such as CSP [1], Blueprint [54], DSI [55], and Noncespaces [56]. However, eliminating all script injection vectors is challenging in practice [2]. Our solution complements these existing approaches by providing a second line of defense.

### Conclusion and Acknowledgments

In this paper, we propose new abstractions to introduce the explicit notion of user sub-origins into the web and establish an end-to-end trusted path between the user and the web server. Our solution effectively eliminates a large number of PISE attacks in real-world applications and can be integrated with current web browsers and applications with minimal adoption cost.

**Acknowledgments:**

We thank the anonymous reviewers and our shepherd William Robertson for their valuable feedback and suggested improvements. We also thank Kailas Patil, Atul Sadhu, Loi Luu, and Shweta Shinde for their comments on an early presentation of this work. This research is supported by the Ministry of Education, Singapore under Grant No. R-252-000-495-133. Xinshu Dong is supported by the research grant for the Human Sixth Sense Programme at the Advanced Digital Sciences Center from Singapore’s Agency for Science, Technology and Research (A*STAR).

### References

1. W3C: Content security policy 1.0, http://www.w3.org/TR/CSP/
2. Johns, M.: Preparedjs: Secure script-templates for JavaScript. In: Detection of Intrusions and Malware & Vulnerability Assessment (2013)
3. Chen, P., Nikiforakis, N., Huygens, C., Desmet, L.: A dangerous mix: Large-scale analysis of mixed-content websites. In: Information Security Conference (2013)
4. Trend Micro: New York Times pushes fake AV malvertisement, http://goo.gl/BtjgPc
5. Verizon: 2013 Data breach investigation report, http://www.verizonenterprise.com/DBIR/2013/
6. Enigma Group: Facebook profiles can be hijacked by Chrome extensions malware, http://underurhat.com/hacking
7. Liu, L., Zhang, X., Yan, G., Chen, S.: Chrome extensions: Threat analysis and countermeasures. In: Network and Distributed System Security Symposium (2012)
8. Akhawe, D., Li, F., He, W., Saxena, P., Song, D.: Data-confined HTML5 applications. In: European Symposium on Research in Computer Security (2013)
9. Dong, X., Chen, Z., Siadati, H., Tople, S., Saxena, P., Liang, Z.: Protecting sensitive web content from client-side vulnerabilities with cryptons. In: Proceedings of the 20th ACM Conference on Computer and Communications Security (2013)
10. Parno, B., McCune, J.M., Wendlandt, D., Andersen, D.G., Perrig, A.: Clamp: Practical prevention of large-scale data leaks. In: IEEE Symposium on Security and Privacy (2009)
11. Felt, A.P., Finifter, M., Weinberger, J., Wagner, D.: Diesel: Applying privilege separation to database access. In: ACM Symposium on Information, Computer and Communications Security (2011)
12. Chen, E.Y., Gorbaty, S., Singhal, A., Jackson, C.: Self-exfiltration: The dangers of browser-enforced information flow control. In: Web 2.0 Security and Privacy (2012)
13. Dong, X., Patil, K., Mao, J., Liang, Z.: A comprehensive client-side behavior model for diagnosing attacks in AJAX applications. In: ICECCS (2013)
14. Projects, T.C.: Per-page suborigins, http://goo.gl/PoH5pY
15. Roesner, F., Kohno, T., Moshchuk, A., Parno, B., Wang, H.J., Cowan, C.: User-driven access control: Rethinking permission granting in modern operating systems. In: Proceedings of the 2012 IEEE Symposium on Security and Privacy (2012)
16. Roesner, F., Fogarty, J., Kohno, T.: User interface toolkit mechanisms for securing interface elements. In: User Interface Software and Technology (2012)
17. Dong, X., Hu, H., Saxena, P., Liang, Z.: A quantitative evaluation of privilege separation in web browser designs. In: Crampton, J., Jajodia, S., Mayes, K. (eds.) ESORICS 2013. LNCS, vol. 8134, pp. 75–93. Springer, Heidelberg (2013)
18. Akhawe, D., Saxena, P., Song, D.: Privilege separation in HTML5 applications. In: USENIX Security (2012)
19. Moiwa, Y., Takagi, H., Watanabe, H., Suzuki, H.: PAKE-based mutual HTTP authentication for preventing phishing attacks. In: World Wide Web Conference (2009)
20. Budianto, E., Jia, Y.: Summary of source code modification, Chromium patches, and USERPATH technical report, https://github.com/ebudianto/UserPath
21. Budianto, E., Jia, Y.: URL for demo video, https://github.com/ebudianto/UserPath/wiki/DEMO-Video-URLs
22. Dietz, M., Czeskis, A., Balfanz, D., Wallach, D.S.: Origin-bound certificates: A fresh approach to strong client authentication for the web. In: USENIX Security (2012)
23. Jackson, C., Simon, D.R., Tan, D.S., Barth, A.: An evaluation of extended validation and picture-in-picture phishing attacks. In: Proceedings of 1st USEC (2007)
24. Cao, Y., Yegneswaran, V., Porras, P., Chen, Y.: PathCutter: Severing the self-propagation path of XSS JavaScript worms in social web networks. In: Network and Distributed System Security Symposium (2012)
25. Hansen, R., Grossman, J.: Clickjacking, http://goo.gl/p7dxIC
26. YGN Ethical Hacker Group: Elgg 1.7.9 XSS vulnerability, http://goo.gl/XUeqis
27. CVE-2012-6561, C.V.E.: XSS vulnerability in Elgg, http://goo.gl/mmW8bM
28. Barth, A., Jackson, C., Mitchell, J.C.: Robust defenses for cross-site request forgery. In: Conference on Computer and Communications Security (2008)
29. Wu, M., Miller, R.C., Little, G.: Web Wallet: Preventing phishing attacks by revealing user intentions. In: Symposium on Usable Privacy and Security (2006)
30. Bhargavan, K., Delignat-Lavaud, A., Maffeis, S.: Language-based defenses against untrusted browser origins. In: USENIX Security (2013)
31. Maffeis, S., Mitchell, J.C., Taly, A.: Object capabilities and isolation of untrusted web applications. In: IEEE Symposium on Security and Privacy (2010)
32. Huang, L.S., Moshchuk, A., Wang, H.J., Schechter, S., Jackson, C.: Clickjacking: Attacks and defenses. In: USENIX Security (2012)
33. Zhou, Y., Evans, D.: Protecting private web content from embedded scripts. In: European Symposium on Research in Computer Security (2011)
34. Dong, X., Tran, M., Liang, Z., Jiang, X.: AdSentry: Comprehensive and flexible confinement of JavaScript-based advertisements. In: ACSAC (2011)
35. Akhawe, D., Barth, A., Lam, P.E., Mitchell, J., Song, D.: Towards a formal foundation of web security. In: Computer Security Foundations (2010)
36. Barth, A., Felt, A.P., Saxena, P., Boodman, A.: Protecting browsers from extension vulnerabilities. In: Network and Distributed System Security Symposium (2010)
37. Bisht, P., Hinrichs, T., Skrupsky, N., Bobrowicz, R., Venkatakrishnan, V.N.: Notamper: Automatic blackbox detection of parameter tampering opportunities in web applications. In: Conference on Computer and Communications Security (2010)
38. Wu, T.: The secure remote password protocol. In: Network and Distributed System Security Symposium (1998)
39. The Spanner: DOM clobbering, http://goo.gl/ZOLmal
40. Padida, B., Barth, A., Jackson, C.: Rootkits for JavaScript environments. In: WOOT (2009)
41. Ye, Z.E., Smith, S.: Trusted paths for browsers. In: USENIX Security (2002)
42. Libonati, A., McCune, J.M., Reiter, M.K.: Usability testing a malware-resistant input mechanism. In: Network and Distributed System Security Symposium (2011)
43. Engler, J., Karlof, C., Shi, E., Song, D.: Is it too late for PAKE? In: Proceedings of Web 2.0 Security and Privacy (2009)
44. Slack, Q.: TLS-SRP in Apache mod_ssl, http://goo.gl/cHMoau
45. Provos, N., Friedl, M., Honeyman, P.: Preventing privilege escalation. In: USENIX Security (2003)
46. Brumley, D., Song, D.: Privtrans: Automatically partitioning programs for privilege separation. In: USENIX Security (2004)
47. Grier, C., Tang, S., King, S.: Designing and implementing the OP and OP2 web browsers. ACM Transactions on the Web (2011)
48. Wang, H.J., Grier, C., Moshchuk, A., King, S.T., Choudhury, P., Venter, H.: The multi-principal OS construction of the Gazelle web browser. In: USENIX Security (2009)
49. Barth, A., Jackson, C., Reis, C., Team, T.G.C.: The security architecture of the Chromium browser, http://goo.gl/BGjJqC
50. Papagiannis, I., Pietzuch, P.: CloudFilter: Practical control of sensitive data propagation to the cloud. In: Cloud Computing Security Workshop (2012)
51. Tong, T., Evans, D.: Guardroid: A trusted path for password entry. In: MoST (2013)
52. McCune, J.M., Perrig, A., Reiter, M.K.: Safe passage for passwords and other sensitive data. In: Network and Distributed System Security Symposium (2009)
53. Zhou, Z., Gligor, V.D., Newsome, J., McCune, J.M.: Building verifiable trusted path on commodity x86 computers. In: IEEE Symposium on Security and Privacy (2012)
54. Ter Louw, M., Venkatakrishnan, V.N.: Blueprint: Robust prevention of cross-site scripting attacks for existing browsers. In: IEEE Symposium on Security and Privacy (2009)
55. Nadji, Y., Saxena, P., Song, D.: Document structure integrity: A robust basis for cross-site scripting defense. In: Network and Distributed System Security Symposium (2009)
56. Gundy, M.V., Chen, H.: Noncespaces: Using randomization to enforce information flow tracking and thwart cross-site scripting attacks. In: Network and Distributed System Security Symposium (2009)