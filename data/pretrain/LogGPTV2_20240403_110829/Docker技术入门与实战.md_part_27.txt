#
standalone:
debug:
#
默认记录info和以上级别的日志
#
搜索后端支持
默认不使用特权
默认不启用存储转向
是否启用debug模式
db:
port:
password: _env:CACHE_REDIS_PASSWORD
db:_env:CACHE_REDIS_DB:0
host:_env:CACHE_REDIS_HOST
port:_env:CACHE_REDIS_PORT
source_index:
source:
_env:CACHE_LRU_REDIS_DB:0
_env:DEBUG:false
enV:CACHE_LRU_REDIS_PORT
_env:LOGLEVEL:info
env:MIRROR SOURCE #https://registry-1.docker.io
_env:PRIVILEGED_KEY
_env:INDEx_ENDPOINT:https://index.docker.io
env:SEARCH_BACKEND
_env:MIRROR_SOURCE_INDEX # https://index.docker.io
env:STORAGE_REDIRECT
，来介绍如何使用仓库配置文件来管理私有仓库。
_env:SQLALCHEMY_INDEX_DATABASE:sqlite:////tmp/
第14章使用私有仓库189
---
## Page 204
190
#Ceph对象网关配置
第二部分实战案例
s3:
local:&local
boto_calling_format:_env:AWS_CALLING_FORMAT
boto_port:_env:AwS_PORT
boto_host:
s3_secret_key:
s3 access_key:
>
swift_region_name:
swift_password:
swift_user:
swift_authurl:_env:OS_AUTH_URL
#keystone authorization
storage_path:
storage: swift
>
boto_debug:
boto_port:_env:AWS_PORT
boto_host:_env:Aws_HOsT
boto_bucket:_env:AWS_BUCKET
s3_secret_key:
s3_access_key:
s3 secure:
s3_encrypt:
s3_region:
storage: s3
:>>
_secret_
&glance
*common
key:
env:GCS_SECURE:true
_env:AWS_DEBUG:0
env:AWS_SECURE:false
env:AWS_BUCKET
_env:GCS_BUCKET
env:AWS_ENCRYPT:false
_env:STORAGE_PATH:/registry
_env:STORAGE_PATH:/registry
_env:STORAGE_PATH:/registry
env:GCS_SECRET
_env:AWS_SECRET
_env:AWS_KEY
_env:OS_PASSWORD
_env:OS_CONTAINER
env:GLANCE_STORAGE _ALTERNATE:file
_env:OS_REGION_NAME
第14章使用私有仓库191
---
## Page 206
模板
192第二部分实战案例
口s3：存储数据到AWS S3中。
在config_sample.yml文件中，可以看到一些现成的模板段：
口local：存储数据到本地文件系统。
口common：基础配置。
:poxd
#在环境变量SETTINGS_FLAVOR中指定启用哪个配置，例如$ export SETTINGS_FLAVOR=prod
test:
#用于测试
dev:&dev
#默认启用的配置选项
elliptics:
openstack-swift:
glance-swift:&glance-swift
#存储镜像文件到Glance，标签信息到Swift
storage_path:_env:STORAGE_PATH:/prod
<<：*s3
storage_path:_env:STORAGE_PATH:./tmp/test
search_backend: _env:SEARCH_BACKEND:sqlalchemy
<<：*local
elliptics_groups:
<<：*common
<<:*glance-swift
standalone:true
index_endpoint:https://registry-stage.hub.docker.com
<<:*dev
debug:
loglevel:
elliptics_logfile:
elliptics_nonblocking_io_thread_num:
elliptics_net_thread_num:
elliptics_io_thread_num:
elliptics_check_timeout:
elliptics_wait_timeout:_env:ELLIPTICS_WAIT_TIMEOUT:60
elliptics nodes:
storage: elliptics
storage_alternate:swift
storage:glance
<<：*swift
_env:DEBUG:true
env:LOGLEVEL:debug
_env:ELLIPTICS_NODES
_enV:ELLIPTICS_IO_THREAD_NUM:2
_env:ELLIPTICS_NET_THREAD_NUM:2
env:ELLIPTICS_CHECK_TIMEOUT:60
_enV:ELLIPTICS_NONBLOCKING_IO_THREAD_NUM:2
---
## Page 207
search 时使用。
选项
FLAVOR到环境变量中，例如：
口search_backend：选择搜索后端类型，
Docker注册服务器可以将仓库的索引信息放到数据库中，供通过GET方法访问/v1/
口disable_token_auth：布尔类型，禁止通过token进行验证，此时用户需要提供
口index_endpoint；字符串，配置index服务位置，用来验证用户，默认是https:/
口boto_host/boto_port：使用 s3模板时，标准boto配置文件的位置。
 storage_redirect:
debug:
另外，配置文件中支持从环境变量中加载值，语法格式为：
默认情况下使用的模板是dev，要使用某个模板作为默认值，可以添加SETTINGS
搜索选项如下：
口standalone：布尔类型，
认证选项如下：
口loglevel：字符串类型，
基本选项如下：
env:VARIABLENAME[:DEFAULT]
export SETTINGS_FLAVOR=dev
用户也可以添加自定义的模板段。
口elliptics：存储数据到Elliptics key/value存储。
口glance-swift：存储数据到OpenStackGlance服务，Swift为后备。
口glance：存储数据到OpenStackGlance服务，本地文件系统为后备。
口swift：存储数据到OpenStackSwift服务。
 gcs：存储数据到Google的云存储。
口prod：生产环境配置（基本上跟 s3配置类似）。
disable_token_auth。
test：单元测试使用。
dev：使用local模板的基本配置。
自己的验证机制。
index.docker.io
信息等。
critical
布尔类型，
重定向存储请求。
，开启后会在访问／ping时候输出更多的信息，包括库版本和主机
、标注输出调试信息的级别，包括 debug、info、warn、error 和
运行在独立模式下，不进行用户验证等，同时会配置
目前仅支持sqlalchemy。用户也可以将它指定
第14章使用私有仓库193
---
## Page 208
Email。例如
本地，加速仓库的查询性能。
194第二部分实战案例
Email选项为email_exceptions字段，通过配置该选项，当仓库发生异常时可自动发送
email_exceptions:
通过配置缓存（事先本地要启动一个LRU模式下的redis服务器），可以将小文件缓存在
cache:
缓存选项包括cache字段和cache_Iru字段，例如：
默认并未启用。
镜像选项都放在mirroring字段下面，例如：
sqlalchemy_index_database: sqlite:////tmp/docker-registry.db
 sqlalchemy_index_database：当使用 sqlalchemy作为索引后端引擎时，可以通过
cache_lru:
#when using a remote storage backend (like s3).
# Enabling LRU cache for small files
common:
search backend:sqlalchemy
common:
search_backend: foo.registry.index.xapian
sqlalchemy_index_database来指定创建数据库的位置。例如
common:
mirroring:
为自定义的模块。例如：
smtp_secure: _env:SMTP_sEcURE:false
smtp_password:
smtp_login:
smtp_port:
smtp_host:_env:SMTP_HOST
db:
port:
host:_env:CACHE_LRU_REDIS_HOST
db:_env:CACHE_REDIS_DB:0
port:_env:CACHE_REDIS_PORT
host:
source_index:https://index.docker.io
source:https://registry-1.docker.io
enV:CACHE_LRU REDIS DB:0
_env:CACHE_REDIS_HOST
_enV:CACHE_LRU REDIS PORT
_env:SMTP_PORT:25
env:SMTP_LOGIN
_env:SMTP_PASSWORD
TO
口
---
## Page 209
据到本地，即
存储的具体位置，以local模板为例，默认为/tmp/registry。
file和s3。用户如果需要其他引擎支持，可以通过下面的命令来进行搜索可用引擎并安装。
口boto_calling_format：字符串类型，boto调用所使用格式的类名。
口boto_debug：对s3不兼容对象存储的调试输出。
口boto_host：字符串类型，对 s3不兼容对象存储的主机。
口boto_bucket：字符串类型，对s3不兼容对象存储的桶名。
口s3_secret_key：字符串类型，s3密钥。
口s3_access_key：字符串类型，s3的访问口令。
s3引擎意味着存储到亚马逊的云服务。亚马逊s3引擎支持的选项包括：
s3引擎
因此，
file 引擎意味着存储到本地文件。当使用 file 引擎的时候，
存储选项为 storage，该选项将选择事先存储的引擎，仓库默认自带两种类型的引擎：
口s3_secure：布尔类型，进行访问时是否启用HTTPS。
口
口s3_bucket：字符串类型，s3桶名称。
local:&local
file引擎
glance（OpenStack的子项目，提供文件存储服务）
gcs（Goolge 的子存储）
口 swift（OpenStack的子项目，提供对象存储服务）
口elliptics（一种分布式键值数据存储）
安装后，可能需要对引擎进行配置。目前支持的引擎包括：
$pip search docker-registry-driver
Is3_encrypt：布尔类型，是否加密存储。
Is3_region：s3桶所在的存放域。
pip install docker-registry-driver-NAME
storage_path: _env:STORAGE_PATH:/tmp/registry
storage:local
<<：*common
，我们在运行registry镜像时，可以挂载本地目录到这个位置，来保存仓库中的数
from addr:_env:SMTP FROM ADDR:PI:EMAIL
第14章使用私有仓库195
可以通过 storage_path来指定
---
## Page 210
来确保通信的安全。
方式对仓库服务进行容错。同时，为了安全考虑，可以为仓库访问启用HTTPS等加密协议
私有仓库服务是集中存储镜像的场所，它的稳定性将影响整个Docker使用环节。
各个选项的含义和使用。
下来编写了批量上传镜像到仓库的脚本实现。最后还详细介绍了docker-registry配置文件中
装运行并注册为系统服务，以及添加Nginx反向代理和添加基于HTTP的用户认证功能。接
14.5本章小结
196第二部分实战案例
在生产环境中，笔者推荐使用负载均衡来提高仓库服务的性能；还可以利用HAProxy等
通过本章的学习，读者将能轻松搭建一套私有的仓库服务环境，并对其进行管理操作。
本章详细介绍了使用docker-registry的两种主要方式：通过容器方式运行和通过本地安
prod:
例如：
口storage_path：字符串类型，镜像文件存储的子路径。
s3_secret_key:xdDoww1K7TJajV1Y7Eo0ZrmuPEJ1HYcNP2k4j49T