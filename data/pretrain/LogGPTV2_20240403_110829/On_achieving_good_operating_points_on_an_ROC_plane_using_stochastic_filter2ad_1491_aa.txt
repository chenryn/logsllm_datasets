title:On achieving good operating points on an ROC plane using stochastic
anomaly score prediction
author:Muhammad Qasim Ali and
Hassan Khan and
Ali Sajjad and
Syed Ali Khayam
On Achieving Good Operating Points on an ROC Plane
using Stochastic Anomaly Score Prediction∗
Muhammad Qasim Ali, Hassan Khan, Ali Sajjad and Syed Ali Khayam
School of Electrical Engineering & Computer Science (SEECS)
National University of Science & Technology (NUST), Islamabad 44000, Pakistan
{mqasim.ali, hassan.khan, ali.sajjad, ali.khayam}@seecs.edu.pk
ABSTRACT
ROC curves have historically been used to evaluate the ac-
curacy of Intrusion Detection Systems (IDSs). In this pa-
per, we argue that a real-time IDS’ input changes consid-
erably over time and ROC curves generated using ﬁxed,
time-invariant classiﬁcation thresholds do not characterize
the best accuracy that an IDS can achieve. To address
this problem, we propose a simple, generic and adaptive
technique to achieve good ROC operating points for any
given IDS. The proposed technique stochastically predicts
the next anomaly score of an IDS and the anomaly classi-
ﬁcation threshold is then set as a function of the predicted
score. We ﬁrst perform statistical and information-theoretic
analyses of network- and host-based IDSs’ anomaly scores
to reveal a consistent time correlation structure during be-
nign activity periods. We model the observed correlation
structure using Markov chains and then use this model to
predict and adapt an IDS’ classiﬁcation threshold. The pro-
posed adaptive thresholding module is incorporated into six
prominent network- and host-based Anomaly Detection Sys-
tems (ADSs). These adaptive ADSs are evaluated on public
and labeled attack datasets. We show that, while reducing
the need for manual threshold conﬁguration and having very
low-complexity, adaptive thresholding enables the ADSs to
achieve considerably higher accuracies on the ROC plane.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and Protection; D.4.6 [Security and Protection]:
Invasive Software; K.6.5 [Security and Protection]: Unau-
thorized access
∗This work is supported in part by the Pakistan National
ICT R&D Fund and the US National Science Foundation
(NSF) Award CNS-0430436 while Syed Ali Khayam was a
PhD candidate at Michigan State University.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
General Terms
Algorithms, Security
Keywords
Adaptive Thresholding, Anomaly Detection, Intrusion De-
tection
1.
INTRODUCTION
Since the seminal DARPA evaluations of 1998/1999, Re-
ceiver Operating Characteristics (ROC) curves have been
used as the de facto method to evaluate the accuracy of IDSs
[2, 11, 16, 19, 20, 31]. ROC curves are generated by apply-
ing a range of classiﬁcation thresholds to an IDS’ anomaly
scores and then plotting the detection rate versus the false
alarm rate for each threshold value. For real-time opera-
tion, the best ROC operating point is chosen to threshold
anomaly scores.
In this paper, we challenge the conventional wisdom that
ROC curves generated using ﬁxed thresholds can identify
the best achievable accuracy for an IDS. We, on the other
hand, argue that the input characteristics of a real-time IDS
change continuously with time and setting a rigid (time and
behavior invariant) classiﬁcation threshold limits the accu-
racy that the IDS can potentially achieve. Moreover, thresh-
old determination using ROC curves also introduces undesir-
able human intervention in an IDS’ operation. To substan-
tiate this argument, we propose a technique to adaptively
tune the detection threshold of a real-time IDS in accordance
with varying host and network behavior.
The basic premise of the proposed threshold adaptation
technique is the following: If we can accurately predict the
expected values of future anomaly scores under benign con-
ditions, the classiﬁcation threshold can be adapted as a func-
tion of the predicted score. Thus threshold adaptation re-
quires a tracking algorithm that can accurately predict fu-
ture anomaly scores. Additional constraints on a practical
threshold adaptation technique are: 1) it should be able
to automatically learn the temporal behavior of anomaly
scores under benign conditions; 2) it should enable an IDS
to achieve good accuracy points on the ROC plane; 3) it
should be generic so that it can be readily incorporated
into any IDS, irrespective of the detection principles and
the host/traﬃc features used by the IDS; and 4) it should
have low run-time complexity.
In view of these constraints, we ﬁrst reveal some generic
statistical properties of an IDS’ anomaly scores. Speciﬁ-
cally, we use autocorrelation and conditional entropy anal-
314Table 1: Background Traﬃc Information for the
LBNL Dataset
Table 3: Endpoint Attack Traﬃc for Two High- and
Two Low-rate Worms
Avg. Attack
Malware
Avg. Scan Rate(/sec)
Pkt Rate(/sec)
0.41
0.061
72
Dloader-NY
Forbot-FU
MyDoom-A
Rbot-AQJ
46.84
32.53
0.14
0.68
Date
10/4/04
12/15/04
12/16/04
LBNL Remote Avg. Background
Hosts
4,767
5,761
5,210
Hosts
4,342
10,478
7,138
Pkt Rate(/sec)
8.47
3.5
243.83
Port(s) Used
TCP 135,139
TCP 445
TCP 3127 − 3198
TCP 139,769
Table 2: Background Traﬃc Information for the
Highest and Lowest Rate Endpoints
Endpoint
Type
Home
University
Duration
(months)
2
9
Total
Sessions
444, 345
60, 979
Avg. Session
Rate(/sec)
5.28
0.19
yses to show that real-time anomaly scores under benign
conditions exhibit a decaying temporal dependence struc-
ture. Future scores can hence be accurately predicted us-
ing a few previous scores. Since a random process with de-
caying temporal dependence can be accurately modeled us-
ing Markov chains, we show that a low-complexity Markov-
based target tracking algorithm can accurately predict fu-
ture anomaly scores. We show that the proposed Markovian
algorithm provides signiﬁcantly better prediction accuracy
than the conventional Kalman ﬁlter and Holt-Winters pre-
dictors. The anomaly scores predicted using the proposed
algorithm are used to deﬁne the classiﬁcation thresholds for
subsequent real-time measurements.
We demonstrate accuracy (detection and false alarm rate)
improvements that can be achieved using the proposed tech-
nique by incorporating the adaptive thresholding module
into the following prominent and diverse network- and host-
based Anomaly Detection Systems (ADSs): Maximum En-
tropy (MaxEnt) detector [7], Threshold Random Walk (TRW)
detector [12], Packet Header Anomaly Detector (PHAD)
[21], Sequence Time Delay Embedding (STIDE) [6], Support
Vector Machines (SVM) [13], and Kullback-Leibler (KL)
Divergence detector [18]. The ﬁrst three anomaly detec-
tors operate on network traﬃc, while the remaining detec-
tors operate on system call sequences. Adaptive ADSs are
evaluated on public,
labeled and independently collected
attack datasets. We show that signiﬁcant and consistent
improvements over the best ROC operating points can be
achieved by adaptive ADSs. Finally, we show that adap-
tive thresholding has negligible complexity relative to the
original anomaly detection algorithms’ complexity.
The rest of the paper is organized as follows. Section
2 describes related work in this area. Section 3 describes
the datasets and anomaly detectors used in this work. Sec-
tion 4 performs statistical analysis on IDS scores. Based
on the statistical analysis, Section 5 proposes the adaptive
thresholding algorithm. Section 6 evaluates the accuracies
of adaptive ADSs on an ROC plane. This section also eval-
uates the complexity of the proposed algorithm. Section 7
discusses the limitations of the proposed technique and pro-
poses countermeasures to overcome the limitations. Section
8 summarizes key conclusions of this work.
2. RELATED WORK
Some recent network anomaly detectors provide methods
to calculate thresholds for their speciﬁc algorithms [10, 12,
15]. However, most of these studies do not cater for the
Table 4: UNM Intrusion Instances
sscp
decode
forwarding loops
3
2
5
Table 5: MIT-LL Intrusion Instances
httptunnel
land
2
2
ps
2
eject
ftp-write
secret
mailbomb
2
2
1
2
time varying behavior of the input and consequently fail to
provide acceptable performance under varying traﬃc condi-
tions [2]. Some commercial IDS products also adjust their
thresholds in accordance with the input traﬃc characteris-
tics [4, 25]. As these products use proprietary algorithms,
we cannot comment on the accuracy improvements that can
be achieved by these algorithms. The most pertinent prior
work in this area is by Agosta et al.
[1] who proposed an
anomaly detector which adjusts its threshold according to
the variations observed in the input. Since intrusion detec-
tion algorithms are regularly updated in response to evolving
attack characteristics, we argue that a practical threshold
adaptation technique, instead of being devised for a spe-
ciﬁc anomaly detection algorithm, should seamlessly oper-
ate with and provide accuracy improvements for any given
algorithm. Such a generic threshold adaptation technique is
largely unexplored in research literature.
3. DATASETS AND ANOMALY DETECTORS
In this section, we describe the network traﬃc and system
call datasets used in this work. We also brieﬂy describe the
anomaly detection algorithms used for accuracy evaluation.
3.1 Network Trafﬁc Datasets
We use two traﬃc datasets that have been independently-
collected at diﬀerent deployment points. Both datasets are
labeled and publicly available at [17] and [30].
3.1.1 LBNL Dataset
This dataset was collected at two international network lo-
cations at the Lawrence Berkeley National Laboratory (LBNL),
USA. The main applications in internal and external traﬃc
were Web (HTTP), Email and Name Services. Some other
applications like Windows Services, Network File Services
and Backup were also being used by internal hosts. Ma-
licious traﬃc mostly comprises failed incoming TCP SYN
requests targeted towards LBNL hosts; see [24] for details.
Some pertinent statistics of the LBNL dataset are given in
Table 1. Note that the attack rate is signiﬁcantly lower than
the background traﬃc rate. Thus these attacks can be con-
sidered low rate relative to the background traﬃc rate. We
ﬁltered local traﬃc from the dataset.
3.1.2 Endpoint Dataset
This dataset comprises session-level traﬃc collected at 13
network endpoints. The users of these endpoints included
315home users, research students, and technical/administrative
staﬀ. The endpoints were running diﬀerent types of appli-
cations, including peer-to-peer ﬁle sharing software, online
multimedia applications, network games, SQL/SAS clients,
etc. Statistics of the highest and lowest benign traﬃc rate
endpoints are shown in Table 2. Attack traﬃc in this dataset
mostly comprises outgoing portscans; see [2] for details. At-
tack traﬃc was generated using the following malware: Zo-
tob.G, Forbot-FU, Sdbot-AFR, Dloader-NY, SoBig.E@mm, My-
Doom.A@mm, Blaster, Rbot-AQJ, and RBOT.CCC [28]. Ta-
ble 3 shows statistics of the highest and lowest scan rate
worms. For completeness, we also simulated three additional
worms, namely Witty (worm with ﬁxed source port 4000),
CodeRedv2 (worm with ﬁxed destination port 80) and a low-
rate TCP worm (with a ﬁxed and unusual source port 2200).
Witty and CodeRedv2 were simulated using the scan rates,
pseudocode and parameters given in [27, 28].
3.2 Host-based Datasets
For host-based experiments, we choose the widely-used
and publicly-available datasets from UNM [5] and MIT Lin-
coln Lab (LL) [23].
3.2.1 UNM System Calls Sequences
The University of New Mexico (UNM) dataset provides
system call traces for various processes. Forrest et al.
[6]
argue that monitoring the behavior of a process might not
cover the full spectrum of normal behavior as some pro-
cesses behave in quite a varied manner. Therefore, they
artiﬁcially generate system call sequences. We used the syn-
thetic sendmail traces for our experiments. These traces
were generated by enumerating potential sources of varia-
tion for normal sendmail operations. Trace ﬁles contained
process IDs and their respective system calls. Table 4 shows
the intrusions and their instances used; see [5] for details.
3.2.2 MIT Lincoln Lab System Call Sequences
From the MIT Lincoln Lab dataset [23], we used Solaris
BSM audit data which provides system calls of a Solaris host
as BSM logs. The BSM ﬁle contains information of process
IDs, system calls, user IDs, machine name, description, and
date/time. A separate network traﬃc analysis data ﬁle is
also provided which indicates inbound network connections
to the system. Table 5 lists the attack instances in this
dataset; see [23] for details. We cross-indexed the system call
trace ﬁle with network traﬃc data ﬁle using the arguments
to the exec system call. Furthermore, a tolerance of one
second was chosen as suggested by [13] in order to match
the majority of connection attempts. We used benign data
from the ﬁrst week (03/01/1999) and labeled attacks from
second week (03/08/1999).
3.3 Anomaly Detection Systems
Before describing the real-time ADSs used in this work,
we reiterate that a practical threshold adaptation algorithm
should not be speciﬁc to a particular ADS. Therefore, while
we have selected some ADSs for proof-of-concept and perfor-
mance benchmarking, all the analyses and characterizations
that will be provided in subsequent sections are generic and
should hold across diﬀerent real-time IDSs. We also empha-
size that the ADSs used in this work are quite diverse in their
underlying detection features and principles. For instance,
the network ADSs used in this work include simple rule mod-
elling systems like PHAD [21], complex self-learning sys-
tems like Maximum-Entropy [7], and the pre-programmed
Sequential Hypothesis Testing [12] anomaly detector. Sim-
ilarly, on the host side, we include a simple anomalous se-
quence detector [6], a machine learning based detector [13],
and an information-theoretic detector [18]. This diversity
is introduced to demonstrate that irrespective of the under-
lying functionality of a real-time ADS, improved accuracy
(i.e., higher detection rates and reduced false alarm rates)
and automation beneﬁts (i.e., reduction in the need of man-
ual conﬁguration) can be achieved when the ADS is adapted
in accordance with input variations.
All the ADSs used in this work were trained using 1% of
the total data; the remaining 99% is used for testing. For
performance benchmarking, we change the anomaly classi-
ﬁcation thresholds of all detectors to generate ROC curves.
All other parameters of the ADSs are the same as reported
in [6, 7, 12, 13, 18, 21]. We now brieﬂy discuss the ADSs
used in this work; readers are referred to the original papers
for details of these algorithms.
3.3.1 Network ADSs
Maximum Entropy Anomaly Detector [7]: This detector di-
vides traﬃc into 2, 348 packet classes and maximum entropy
estimation is then used to develop a baseline benign distri-
bution for each packet class. ADS scores of packet class
distributions observed in real-time windows are computed
by comparing them with their baseline distributions using
the Kullback-Leibler (KL) divergence measure. An alarm
is raised if a packet class’s ADS score repeatedly exceeds a
ﬁxed threshold.
Threshold Random Walk (TRW) Algorithm [12]: The TRW
algorithm detects incoming portscans by noting that the
probability of a connection attempt being a success should
be much higher for a benign host than for a scanner. To