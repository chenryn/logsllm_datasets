# Achieving Good Operating Points on an ROC Plane Using Stochastic Anomaly Score Prediction

**Authors:**
- Muhammad Qasim Ali
- Hassan Khan
- Ali Sajjad
- Syed Ali Khayam

**Affiliation:**
School of Electrical Engineering & Computer Science (SEECS)  
National University of Sciences and Technology (NUST), Islamabad 44000, Pakistan  
Emails: {mqasim.ali, hassan.khan, ali.sajjad, ali.khayam}@seecs.edu.pk

## Abstract
Receiver Operating Characteristic (ROC) curves have historically been used to evaluate the accuracy of Intrusion Detection Systems (IDSs). However, we argue that a real-time IDS' input characteristics change significantly over time, and fixed, time-invariant classification thresholds do not capture the best achievable accuracy. To address this, we propose a simple, generic, and adaptive technique to achieve good ROC operating points for any given IDS. The proposed technique stochastically predicts the next anomaly score and sets the classification threshold as a function of the predicted score. We perform statistical and information-theoretic analyses of network- and host-based IDSs' anomaly scores, revealing a consistent time correlation structure during benign activity periods. This correlation is modeled using Markov chains to predict and adapt the IDS' classification threshold. The adaptive thresholding module is incorporated into six prominent network- and host-based Anomaly Detection Systems (ADSs) and evaluated on public, labeled attack datasets. We show that adaptive thresholding reduces the need for manual configuration, has low complexity, and enables ADSs to achieve significantly higher accuracies on the ROC plane.

## Categories and Subject Descriptors
- C.2.0 [Computer-Communication Networks]: General—Security and Protection
- D.4.6 [Security and Protection]: Invasive Software
- K.6.5 [Security and Protection]: Unauthorized Access

**Acknowledgment:**
This work is supported in part by the Pakistan National ICT R&D Fund and the US National Science Foundation (NSF) Award CNS-0430436 while Syed Ali Khayam was a PhD candidate at Michigan State University.

**Copyright:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
CCS'09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.

**General Terms:**
Algorithms, Security

**Keywords:**
Adaptive Thresholding, Anomaly Detection, Intrusion Detection

## 1. Introduction
Since the seminal DARPA evaluations of 1998/1999, Receiver Operating Characteristics (ROC) curves have been the de facto method to evaluate the accuracy of IDSs [2, 11, 16, 19, 20, 31]. ROC curves are generated by applying a range of classification thresholds to an IDS' anomaly scores and plotting the detection rate versus the false alarm rate for each threshold value. For real-time operation, the best ROC operating point is chosen to threshold anomaly scores.

In this paper, we challenge the conventional wisdom that ROC curves generated using fixed thresholds can identify the best achievable accuracy for an IDS. We argue that the input characteristics of a real-time IDS change continuously with time, and setting a rigid (time and behavior invariant) classification threshold limits the accuracy that the IDS can potentially achieve. Moreover, threshold determination using ROC curves introduces undesirable human intervention in an IDS' operation. To address this, we propose a technique to adaptively tune the detection threshold of a real-time IDS in accordance with varying host and network behavior.

The basic premise of the proposed threshold adaptation technique is that if we can accurately predict the expected values of future anomaly scores under benign conditions, the classification threshold can be adapted as a function of the predicted score. Thus, threshold adaptation requires a tracking algorithm that can accurately predict future anomaly scores. Additional constraints on a practical threshold adaptation technique are:
1. It should automatically learn the temporal behavior of anomaly scores under benign conditions.
2. It should enable an IDS to achieve good accuracy points on the ROC plane.
3. It should be generic and readily incorporated into any IDS, irrespective of the detection principles and the host/traffic features used.
4. It should have low run-time complexity.

To meet these constraints, we first reveal some generic statistical properties of an IDS' anomaly scores. Specifically, we use autocorrelation and conditional entropy analyses to show that real-time anomaly scores under benign conditions exhibit a decaying temporal dependence structure. Future scores can thus be accurately predicted using a few previous scores. Since a random process with decaying temporal dependence can be accurately modeled using Markov chains, we show that a low-complexity Markov-based target tracking algorithm can accurately predict future anomaly scores. We demonstrate that the proposed Markovian algorithm provides significantly better prediction accuracy than conventional Kalman filters and Holt-Winters predictors. The anomaly scores predicted using the proposed algorithm are used to define the classification thresholds for subsequent real-time measurements.

We incorporate the adaptive thresholding module into six prominent and diverse network- and host-based Anomaly Detection Systems (ADSs): Maximum Entropy (MaxEnt) detector [7], Threshold Random Walk (TRW) detector [12], Packet Header Anomaly Detector (PHAD) [21], Sequence Time Delay Embedding (STIDE) [6], Support Vector Machines (SVM) [13], and Kullback-Leibler (KL) Divergence detector [18]. The first three anomaly detectors operate on network traffic, while the remaining detectors operate on system call sequences. Adaptive ADSs are evaluated on public, labeled, and independently collected attack datasets. We show that significant and consistent improvements over the best ROC operating points can be achieved by adaptive ADSs. Finally, we show that adaptive thresholding has negligible complexity relative to the original anomaly detection algorithms' complexity.

The rest of the paper is organized as follows. Section 2 describes related work in this area. Section 3 describes the datasets and anomaly detectors used in this work. Section 4 performs statistical analysis on IDS scores. Based on the statistical analysis, Section 5 proposes the adaptive thresholding algorithm. Section 6 evaluates the accuracies of adaptive ADSs on an ROC plane and assesses the complexity of the proposed algorithm. Section 7 discusses the limitations of the proposed technique and proposes countermeasures to overcome them. Section 8 summarizes the key conclusions of this work.

## 2. Related Work
Some recent network anomaly detectors provide methods to calculate thresholds for their specific algorithms [10, 12, 15]. However, most of these studies do not account for the time-varying behavior of the input and consequently fail to provide acceptable performance under varying traffic conditions [2]. Some commercial IDS products also adjust their thresholds according to the input traffic characteristics [4, 25]. As these products use proprietary algorithms, we cannot comment on the accuracy improvements that can be achieved by these algorithms. The most relevant prior work in this area is by Agosta et al. [1], who proposed an anomaly detector that adjusts its threshold according to the variations observed in the input. Since intrusion detection algorithms are regularly updated in response to evolving attack characteristics, we argue that a practical threshold adaptation technique should seamlessly operate with and provide accuracy improvements for any given algorithm. Such a generic threshold adaptation technique is largely unexplored in research literature.

## 3. Datasets and Anomaly Detectors
In this section, we describe the network traffic and system call datasets used in this work. We also briefly describe the anomaly detection algorithms used for accuracy evaluation.

### 3.1 Network Traffic Datasets
We use two traffic datasets that have been independently collected at different deployment points. Both datasets are labeled and publicly available at [17] and [30].

#### 3.1.1 LBNL Dataset
This dataset was collected at two international network locations at the Lawrence Berkeley National Laboratory (LBNL), USA. The main applications in internal and external traffic were Web (HTTP), Email, and Name Services. Some other applications like Windows Services, Network File Services, and Backup were also being used by internal hosts. Malicious traffic mostly comprises failed incoming TCP SYN requests targeted towards LBNL hosts; see [24] for details. Some pertinent statistics of the LBNL dataset are given in Table 1. Note that the attack rate is significantly lower than the background traffic rate, making these attacks low-rate relative to the background traffic rate. We filtered local traffic from the dataset.

#### 3.1.2 Endpoint Dataset
This dataset comprises session-level traffic collected at 13 network endpoints. The users of these endpoints included home users, research students, and technical/administrative staff. The endpoints were running different types of applications, including peer-to-peer file sharing software, online multimedia applications, network games, SQL/SAS clients, etc. Statistics of the highest and lowest benign traffic rate endpoints are shown in Table 2. Attack traffic in this dataset mostly comprises outgoing portscans; see [2] for details. Attack traffic was generated using the following malware: Zotob.G, Forbot-FU, Sdbot-AFR, Dloader-NY, SoBig.E@mm, MyDoom.A@mm, Blaster, Rbot-AQJ, and RBOT.CCC [28]. Table 3 shows statistics of the highest and lowest scan rate worms. For completeness, we also simulated three additional worms: Witty (worm with fixed source port 4000), CodeRedv2 (worm with fixed destination port 80), and a low-rate TCP worm (with a fixed and unusual source port 2200). Witty and CodeRedv2 were simulated using the scan rates, pseudocode, and parameters given in [27, 28].

### 3.2 Host-based Datasets
For host-based experiments, we choose the widely-used and publicly-available datasets from UNM [5] and MIT Lincoln Lab (LL) [23].

#### 3.2.1 UNM System Calls Sequences
The University of New Mexico (UNM) dataset provides system call traces for various processes. Forrest et al. [6] argue that monitoring the behavior of a process might not cover the full spectrum of normal behavior, as some processes behave in quite a varied manner. Therefore, they artificially generate system call sequences. We used the synthetic sendmail traces for our experiments. These traces were generated by enumerating potential sources of variation for normal sendmail operations. Trace files contained process IDs and their respective system calls. Table 4 shows the intrusions and their instances used; see [5] for details.

#### 3.2.2 MIT Lincoln Lab System Call Sequences
From the MIT Lincoln Lab dataset [23], we used Solaris BSM audit data, which provides system calls of a Solaris host as BSM logs. The BSM file contains information about process IDs, system calls, user IDs, machine name, description, and date/time. A separate network traffic analysis data file is also provided, indicating inbound network connections to the system. Table 5 lists the attack instances in this dataset; see [23] for details. We cross-indexed the system call trace file with the network traffic data file using the arguments to the exec system call. Furthermore, a tolerance of one second was chosen as suggested by [13] to match the majority of connection attempts. We used benign data from the first week (03/01/1999) and labeled attacks from the second week (03/08/1999).

### 3.3 Anomaly Detection Systems
Before describing the real-time ADSs used in this work, we reiterate that a practical threshold adaptation algorithm should not be specific to a particular ADS. Therefore, while we have selected some ADSs for proof-of-concept and performance benchmarking, all the analyses and characterizations provided in subsequent sections are generic and should hold across different real-time IDSs. We also emphasize that the ADSs used in this work are quite diverse in their underlying detection features and principles. For instance, the network ADSs used in this work include simple rule modeling systems like PHAD [21], complex self-learning systems like Maximum-Entropy [7], and the pre-programmed Sequential Hypothesis Testing [12] anomaly detector. Similarly, on the host side, we include a simple anomalous sequence detector [6], a machine learning-based detector [13], and an information-theoretic detector [18]. This diversity is introduced to demonstrate that, irrespective of the underlying functionality of a real-time ADS, improved accuracy (i.e., higher detection rates and reduced false alarm rates) and automation benefits (i.e., reduction in the need for manual configuration) can be achieved when the ADS is adapted in accordance with input variations.

All the ADSs used in this work were trained using 1% of the total data; the remaining 99% is used for testing. For performance benchmarking, we change the anomaly classification thresholds of all detectors to generate ROC curves. All other parameters of the ADSs are the same as reported in [6, 7, 12, 13, 18, 21]. We now briefly discuss the ADSs used in this work; readers are referred to the original papers for details of these algorithms.

#### 3.3.1 Network ADSs
- **Maximum Entropy Anomaly Detector [7]**: This detector divides traffic into 2,348 packet classes and uses maximum entropy estimation to develop a baseline benign distribution for each packet class. ADS scores of packet class distributions observed in real-time windows are computed by comparing them with their baseline distributions using the Kullback-Leibler (KL) divergence measure. An alarm is raised if a packet class's ADS score repeatedly exceeds a fixed threshold.
- **Threshold Random Walk (TRW) Algorithm [12]**: The TRW algorithm detects incoming portscans by noting that the probability of a connection attempt being a success should be much higher for a benign host than for a scanner.