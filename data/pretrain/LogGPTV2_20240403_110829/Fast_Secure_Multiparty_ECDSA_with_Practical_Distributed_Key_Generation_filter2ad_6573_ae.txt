that costs 3 exponentiations for the sender and 2 for the receiver (and sending 4 group elements),
and use the OT extension of [26] that requires κ base OTs for security parameter κ (this is the
same as used in [13]). We therefore count 2.5 × 128 = 320 exponentiations between each pair of
parties (averaging that each party is sender half the time and receiver the other half).
The protocol for computing Fecdsa is comprised of KeyGen and Sign. The KeyGen phase
consists of one call of each of init, input and element-out of Fmult. The overall cost appears in
Table 1 (obtained by summing the costs from Fmult); note that these must be called sequentially,
and thus the round complexity is also summed. The Sign phase consists of two parallel calls to
input of Fmult, followed by a parallel call to element-out and mult, and an additional call to mult.
Note that the second call to mult can begin as soon as the result of element-out is received, thereby
reducing the round complexity. Note also that when using πpriv
mult based on Paillier, the second
multiplication requires only 2 Pailler exponentiations and sending a single Paillier ciphertext; this
is explained in Section 6.2.
Table 1 clearly shows the communication/computation tradeoﬀ between the OT-based and
Paillier-based variants.
In particular, the OT-based protocol has much higher bandwidth, but
lower computation. This is due to the fact that once the base OTs have been computed in the
18
key generation phase, the OT extensions used in the actual signing have almost zero cost and are
not noticeable relative to the rest of the protocol. In contrast, the Paillier-based protocol requires
7(n− 1) additional large-integer exponentiations (which are much more expensive than the Elliptic
curve operations). In Section 5.2.2, we show the actual running-time of the variant of our protocol
that uses Paillier-based private multiplication.
Protocol
FcheckDH
init of πpriv
mult (OT)
mult of πpriv
mult (OT)
init of πpriv
mult (Paillier)
mult of πpriv
mult (Paillier)
init of Fmult (OT)
init of Fmult (Paillier)
input of Fmult
element-out of Fmult
mult of Fmult (OT)
mult of Fmult (Paillier)
Totals – OT
KeyGen of Fecdsa
Sign of Fecdsa (OT)
Totals – Paillier
KeyGen of Fecdsa
Sign of Fecdsa
EC Mult. Paillier Exp.
0
0
0
11 + 11n
14n
0
11 + 11n
0
0
0
14n
11 + 10n
320n
0
0
0
2 + 322n
2 + 2n
6 + 5n
3 + 4n
34 + 32n
34 + 32n
Communic. Rounds
3
2
2
1
2
2
2
1
1
6
6
8EC
40KiB
97KiB
11N
16N
3EC + 40KiB
3EC + 11N
5EC
3EC
23EC + 97KiB
23EC + 16N
11 + 331n
83 + 78n
0
11EC + 40KiB
0 59EC + 194KiB
11 + 11n
83 + 78n
11 + 11n
21n
11EC + 11N
59EC + 24N
5
8
5
8
Table 1: Theoretical counts of all costs in our protocols; the communication cost given is in group elements
(denoted EC) and elements of ZN (denoted N) that each party sends to each other party. The cost of πpriv
mult
for OT is taken from [13, Sec. VI-D]; these concrete numbers are based on computational security parameter
κ = 128 and statistical security parameter 80. The key generation for the Paillier variant includes additional
costs not counted here (like local Paillier key generation, and veriﬁcation of the zero-knowledge proof of
correctness of the Paillier key).
Variant
Key generation 256-bit curve (OT)
Key generation 521-bit curve (OT)
Sign 256-bit curve (OT)
Sign 521-bit curve (OT)
Key generation 256-bit curve (Paillier)
Key generation 521-bit curve (Paillier)
Sign 256-bit curve (Paillier)
Sign 521-bit curve (Paillier)
Our Protocol
[18]
40.3KiB theoretical
40.6KiB theoretical
6KiB
196KiB
198KiB
13KiB
3.1KiB theoretical
6.4KiB theoretical
6KiB
7.8KiB
9.8KiB
13KiB
Table 2: Concrete bandwidth for our protocol and [18], for diﬀerent curve sizes, in kilobytes. The communi-
cation is how much each party sends to each other party. In all cases, we use a 2048-bit modulus for Paillier.
We compare the concrete communication costs to that of [18] in Table 2. When using the
OT-based private multiplication, the communication is signiﬁcantly greater than [18], whereas our
Paillier-based protocol almost twice the communication of [18] for a 256-bit curve, and approxi-
19
mately the same communication of [18] for a 521-bit curve.
5.2.2 Experimental Results
We implemented our protocol in C++, and ran it on AWS with all machines of type Intel(R)
Xeon(R) CPU E5-2676 v3 @ 2.40GHz with 1 GB RAM (RedHat 7.2) and a 1Gb per second network
card. We ran experiments from 2 to 20 parties (all in the same region); each execution was run 16
times and we took the average. The results can be seen in the graph in Figure 1, and in Table 3.
We implemented the version with the Paillier-based private multiplication of Section 6.2 (although
the OT version has much faster computation, its signiﬁcantly higher communication makes it less
attractive for most real-world scenarios). As is clearly seen, the signing time is practical (especially
for cryptocurrency applications): from 304ms for 2 parties to about 3sec for 10 parties and about
5sec for 20 parties. We stress that the implementation is single threaded, and the running time can
be signiﬁcantly reduced by using multiple threads on multicore machines.
Figure 1: The running times in milliseconds for key generation (top line in blue) and signing (bottom line
in red) for 2-20 parties, for the Pailler variant of the protocol.
As we have stressed, the primary contribution of this paper is to achieve practical signing and
key generation. Indeed, as shown in Figure 1, key generation takes 11sec for 2 parties, 17sec for 10
parties and 28 seconds for 20 parties. This is not very fast, but is clearly practical, especially since
key generation need only be run once.
We provide a comparison of our signing phase with [18]; we stress that we cannot compare key
generation, since this has not been implemented for [18] due to the fact that key generation requires
multiparty Paillier key generation (although two-party Paillier key generation can be feasible [15],
there is currently no practical multiparty variant). The comparison appears in Table 3. The
protocol of [18] was run on a Ubuntu desktop with an Intel quad-core i7-6700 CPU @ 3.40GHz
and 64GB of RAM (although only a single core was used). The times for [18] are taken from [22],
which refers to a reimplementation of [18] that is much faster than the times reported in [18] itself.
We stress that the times from [18, 22] include local computation only, and no communication. In
20
050001000015000200002500030000234567891011121314151617181920comparison, our signing phase including communication is 2–5 times slower than [18] (depending
on the number of parties). Since our goal is multiparty ECDSA with practical key generation and
signing, this demonstrates that our goal is achieved.
Number of
GGN16 [18]
Our protocol – Sign
Parties
(local comp. only)
(including communication)
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
205
256
312
369
418
453