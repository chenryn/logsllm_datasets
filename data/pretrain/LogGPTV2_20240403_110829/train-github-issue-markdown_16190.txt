From https://stackoverflow.com/questions/68927829/how-to-use-use-numpy-random-
choice-to-get-progressively-longer-sequences-with-th
When generating random numbers with `np.random.Generator.choice` and having
probabilities, the chosen elements in the first positions will depend on the
number of elements to generate, leading to inconsistent results if one tries
to replicate results but with varying input lengths:
    import numpy as np
    n = 100
    prob = np.random.choice(100, n)
    prob = prob / np.sum(prob)
    for i in np.arange(10, 40, 10):
        rng = np.random.default_rng(seed=123)     
        selected = rng.choice(n, size=i, replace=False, p=prob)
        print(str(i) + ': ' + str(selected))
    10: [71  5 20 16 81 92 26 82 88 52]
    20: [71  5 20 16 81 92 26 82 88 52 24 19 75 65 22 80 53 25 13 48]
    30: [71  5 20 16 81 92 26 82 88 52 24 19 75 65 22 80 53 15 50 60  1 48 74 91 94 87 18 73 31 79]
Which is quite unexpected and does not happen in e.g. R's `sample`.
I would assume the optimal algorithm for drawing these random numbers amounts
to having some binary tree saving weights of its left and right subtrees, and
then drawing random numbers in the tree's range and passing down the tree
until reaching the bottom and removing that weight, which should not make any
choice at position `n` depend on what's going to happen at position `n+1`.