Inner 1oop: 2 + 1 = 2
Inner loop:
Outer loop: 1
Inner 1oopi 1 + 1 = 1
Inner loop:
Outer loop: 0
1 + 2 = 2
Inner 1oopi 0 * 2 = 0
同样，shell能够区分开内部for循环和外部wrhi1e循环各自的ao和done命令。
如果真的想挑战脑力，可以混用unti1和while循环。
$ cat test16
#1/bin/bash
#using unti1 and while loopa
var1=3
unti1 [ $var1 -eq 0 ]
do
echo *Outer loop: $var1*
var2=1
while [ $var2 -1t 5 ]
do
var3=$ (echo *scale=4; $var1 / Svar2*1 bc)
echo *
Inner 1oop: Svar1 / Svar2 = $var3*
done
[ 1 + gxes 1s=zxe△
var1=s[ $var1 - 1 1
$./test16
done
E :d0o 1aqn0
Inner 1oop: 3 / 1 = 3.0000
13
Innex 1oop: 3 / 2 = 1.5000
Innex 1oop: 3 / 3 = 1.0000
Innex 1oop: 3 / 4 = .7500
 :d00t 190
---
## Page 291
276
第13章更多的结构化命令
Inner 1oop: 2 / 1 = 2.0000
Inner 10op: 2 / 2 = 1.0000
Inner 1oop:
Inner 1oop: 2 / 4 = .5000
: 2 / 3 = .6666
Outer Loop: 1
Inner 1oop: 1 / 1 = 1.0000
Inner 1oop: 1 / 2 = .5000
Inner 1oop: 1 / 4 = .2500
EEEE* = E / T =dooT xouu
外部的unti1循环以值3开始，并继续执行到值等于0。内部wrhile循环以值1开始并一直执
行，只要值小于5。每个循环都必须改变在测试条件中用到的值，否则循环就会无止尽进行下去。
13.6循环处理文件数据
通常必须遍历存储在文件中的数据。这要求结合已经讲过的两种技术：
口使用嵌套循环
口修改IFS环境变量
通过修改IPs环境变量，就能强制for命令将文件中的每行都当成单独的一个条目来处理，
即便数据中有空格也是如此。一旦从文件中提取出了单独的行，可能需要再次利用循环来提取行
中的数据。
典型的例子是处理/etc/passwd文件中的数据。这要求你逐行遍历/etc/passwd文件，并将IFS
变量的值改成冒号，这样就能分隔开每行中的各个数据段了。
1/bin/bash
changing the IFS value
IPS,OLD=$IFS
fox ent.zy 1n $ Icat /et.c/pasawd)
IFS=S*\n'
dlo
echo *values in $entry -*
for value in fentry
IFS=:
do
echo * $value*
done
Gone
这个脚本使用了两个不同的IFs值来解析数据。第一个IFs值解析出/etc/passwd文件中的单独
的行。内部for循环接着将IFs的值修改为冒号，允许你从/etc/passwd的行中解析出单独的值。
在运行这个脚本时，你会得到如下输出。
Values 1n r1ch:x:501: 501:R1ch B1um:/bome/r1ch:/bin/bash
rich
X
---
## Page 292
13.7控制微环
277
501
501
Rich Blun
/hone/xich
Values 1n katie:x:502:502:Kat:ie B1un: /hone/kat1e: /bln/bagh-
/bin/bash
kat1e
506
5 09
KatLe Blum
/hone/katLe
/bin/bash
内部循环会解析出/etc/passwd每行中的各个值。这种方法在处理外部导人电子表格所采用的
逗号分隔的数据时也很方便。
13.7控制循环
你可能会想，一旦启动了循环，就必须苦等到循环完成所有的选代。并不是这样的。有两个
命令能帮我们控制循环内部的情况：
break命令
continue命令
每个命令在如何控制循环的执行方面有不同的用法。下面几节将介绍如何使用这些命令来控
制循环。
13.7.1break命令
break命令是退出循环的一个简单方法。可以用break命令来退出任意类型的循环，包括
whi le和unti1循环。
有几种情况可以使用break命令，本节将介绍这些方法。
1.跳出单个循环
在shell执行break命令时，它会尝试跳出当前正在执行的循环。
$ cat test17
breaking out of a for loop
#1/bin/bash
Eor  var1  in 1  2  3  4  5  6 7  8 9  10
do
1f [ Svar1 -eq 5 ]
hen
break
13
f1
done
echo *Iteration nunber : Svar]*
echo*The fox loop 1a completed*
---
## Page 293
278
第13章更多的结构化命令
$./test17
Iterat Lon nunber: 1
Iteratlon number: 2
Iteratlon number : 3
The for loop ia completed
IteratLon number: 4
for循环通常都会遍历列表中指定的所有值。但当满足if-then的条件时，shell会执行break
命令，停止for循环。
这种方法同样适用于while和unti1循环。
$ cat test18
#1/bin/bash
breaking out of a vhlle loop
var1=1
[0t - [xe△$ ]q
do
if [ $varl -eq 5 1
then
breakc
echo *Iteratlon: $var1*
f1
[  + [xeAs 1s=xeA
echo *The vhile Loop la conpleted*
done
$./test18
Iteratlon: 1
Iteratlon: 2
Iteratlon: 3
The while 1oop 1α conpleted
Iteratlon: 4
while循环会在if-then的条件满足时执行break命令，终止。
2.跳出内部循环
在处理多个循环时，break命令会自动终止你所在的最内层的循环。
$ cat test19
#1/bin/bash
 breakcing out of an Lnner loop
foz I ( a = 1 ; a < 4 ;a++ 1 1
dlo
echo *0uter 1oop: $a*
for (( b = 1; b < 100; b++ 11
do
Lf I $b -eq 5 1
chen
break
f 1
---
## Page 294
13.7控制循环
279
echo *
Inner loop: $b*
Gone
$-/test19
done
Outer loop: 1
Inner loop: 1
Inner 1oop: 2
Inner loop: 4
Inner 1oop: 3
 :doo 1an0
Inner loop: 1
Inner loop:
Inner 1oop: 3
Inner 1oop: 4
E :d0o 19n0
Inner 1oop: 2
Inner loop: 1
Inner loop: 3
Inner loop: 4
内部循环里的for语句指明当变量b等于100时停止送代。但内部循环的if-then语句指明当
变量b的值等于5时执行break命令。注意，即使内部循环通过break命令终止了，外部循环依然
继续执行。
3.跳出外部循环
有时你在内部循环，但需要停止外部循环。break命令接受单个命令行参数值：
break n
其中n指定了要跳出的循环层级。默认情况下，n为1，表明跳出的是当前的循环。如果你将
n设为2，break命令就会停止下一级的外部循环。
$ cat test20
 breaking out of an outer loop
#1 /bin/ba.sh.
for (( a = l; a < 4) a++ ))
d0
echo *Outer loop1 $a*
for (( b = 1 b < 100;μ b++ )
do
if [ $b -gt 4 ]
then
break 2
echo *
fi
done
Inner loop1 $b*
$. /test.20
done
13
Outer loop1 1
Inner loop: 1
Inner loop: 2
Inner loop1 3
---
## Page 295
087
第13章更多的结构化命令
Inner 1oop: 4
注意，当shell执行了break命令后，外部循环就停止了。
13.7.2continue命令
continue命令可以提前中止某次循环中的命令，但并不会完全终止整个循环。可以在循环
内部设置shell不执行命令的条件。这里有个在for循环中使用continue命令的简单例子。
$ cat test21
1 /bin/bash
 using the continue cormand
for (< var1 = 1; var1 < 15: var1++ 11
do
if [ $var1 -gt 5 ] s& [ $var1 -1t 10 ]
then
continue
echo *Iteration nunber: $var1*
fi
done
$./test21
Iteration number: 1
Iteration number: 3
Iteration number: 2
Iteration number1 4
Iteration number: 5
Iteration number: 10
Iteration number: 12
Iteration number: 11
Iteration number: 14
Iteration number: 13
$
当if-then语句的条件被满足时（值大于5且小于10），shell会执行continue命令，跳过此
次循环中剩余的命令，但整个循环还会继续。当if-then的条件不再被满足时，一切又回到正轨。
也可以在while和unti1循环中使用continue命令，但要特别小心。记住，当shell执行
continue命令时，它会跳过剩余的命令。如果你在其中某个条件里对测试条件变量进行增值，
问题就会出现。
$ cat badtest3
+1/bin/bssh
+ improperly using the continue command in a while loop
var1=0
vhile echo *while iteration: $var1*
[$var1 -1t 15 ]
if [ $var1 -gt 5 ] s& [ $var1 -1t 10 ]
t:hen
---
## Page 296
13.7控制循环
281
cont inue
f1
echo ·
Inside iteration nunber: $varl*
[ + [xe△s 1s=xe
$./badtest3 1 more
done
while iteratlon: 0
while iteratlon: 1
In.sideitexation nunber :0
Inside iteration number: 1