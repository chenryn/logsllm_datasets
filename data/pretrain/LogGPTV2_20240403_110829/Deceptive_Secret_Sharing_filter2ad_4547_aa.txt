title:Deceptive Secret Sharing
author:Lei Zhang and
Douglas M. Blough
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Deceptive Secret Sharing
Lei Zhang and Douglas M. Blough
School of Computer Science
School of Electrical and Computer Engineering
Georgia Institute of Technology
PI:EMAIL, PI:EMAIL
Abstract‚ÄîConÔ¨Ådentiality is a fundamental goal in many secu-
rity contexts. Deception is another goal in which the intention is
to mislead adversaries, for example by planting false information
in a system. In this paper, we consider an approach that combines
conÔ¨Ådentiality and deception using secret sharing, which has
traditionally been used strictly for conÔ¨Ådentiality purposes. The
motivation for this is to protect conÔ¨Ådentiality as far as possible
while acknowledging that no conÔ¨Ådentiality scheme provides
perfect protection. If conÔ¨Ådentiality is breached and information
is accessed by unauthorized individuals, our techniques will re-
veal, with high probability, only false information. This provides
deception on top of the conÔ¨Ådentiality provided by ordinary
secret sharing. We refer to our approach as ‚Äúdeceptive secret
sharing‚Äù and we present techniques that work with both XOR
secret sharing and Shamir‚Äôs polynomial-based threshold secret
sharing. We provide extensive evaluations of both overhead and
security of our techniques and we also show how they provide
tunable security that can trade off security and overhead by
varying a single parameter of the schemes.
I. INTRODUCTION
ConÔ¨Ådentiality has long been one of the most important
system security goals. Access control, encryption, secret shar-
ing, and data obfuscation are common techniques that attempt
to prevent individuals from unauthorized access and/or use
of information. Unfortunately, none of these techniques is
perfect and so, despite designers‚Äô best efforts, conÔ¨Ådentiality is
often compromised in today‚Äôs systems. ConÔ¨Ådentiality can be
breached even when encryption is deployed, because of errors
in integrating crypto protocols with broader security protocols,
when encryption keys are protected with weak techniques such
as passwords, or a variety of other design weaknesses.
Deception is a less common goal, in which the intention is to
mislead adversaries. This can help to detect or monitor attacks
and interfere with unauthorized access/use of information.
In this paper, we use deception to mean the planting of
false information in a system to mislead adversaries. False
information might primarily be intended to mislead but it
can also serve to detect or track adversaries based on their
attempts to use the false information after it has been ac-
cessed. A prominent example of the use of false information
involved the recent email hack of the policital campaign
staff of Emmanuel Macron, now the president of France.
Macron‚Äôs campaign reported that, in their email accounts, they
planted ‚Äúnumerous false documents intended to sow doubt and
disinformation‚Äù [7]. Pointing to deÔ¨Ånitively false information
among leaked emails casts doubt upon the veracity of any
potentially damaging emails in the collection.
In this paper, we consider ways in which secret sharing,
which has traditionally been used strictly for conÔ¨Ådentiality
purposes can be used to efÔ¨Åciently provide conÔ¨Ådentiality and
deception. The motivation is to protect conÔ¨Ådentiality as far
as possible while acknowledging that conÔ¨Ådentiality protection
cannot be guaranteed. With high probability, if conÔ¨Ådentiality
is breached, only false information will be revealed with our
techniques, thus providing a layer of deception on top of the
conÔ¨Ådentiality. EfÔ¨Åciency of such an approach is a critical
issue since secret sharing and deception, by themselves, can
incur high overheads so that naive combinations of the tech-
niques can cause overheads to explode.
Our main contributions are:
‚Ä¢ novel and efÔ¨Åcient schemes for deception within both
XOR-based and polynomial-based secret sharing,
‚Ä¢ quantitative security analyses for these schemes and other
baseline approaches,
‚Ä¢ demonstration that our schemes provide tunable security,
which allows overhead vs. security trade-offs, and
‚Ä¢ evaluation and comparison of the performance and avail-
ability of the proposed schemes through a prototype
implementation on CloudLab [4].
II. BACKGROUND
We use XOR-based secret sharing to illustrate some fun-
damental ideas underlying our techniques. XOR-based secret
sharing is an (n, n) secret sharing scheme, which encodes a
secret of length b bits as follows. First, generate n‚àí1 random
b-bit sequences to form the Ô¨Årst n‚àí 1 shares. Then, make the
nth share the XOR of the Ô¨Årst n ‚àí 1 shares and the secret.
The secret can be reconstructed simply by taking the XOR of
all shares. Possession of even n ‚àí 1 shares does not reveal
any information about the secret, because any secret value is
still possible since any b-bit value can be produced from the
known shares with an appropriate choice of the Ô¨Ånal share.
Suppose we want to plant m ‚àí 1 fake secrets in a system
with one real secret using (n, n) XOR-based secret sharing.
One approach, which we call NAIVE, would be to simply
encode each secret separately, which would result in mn total
shares. Since, with XOR-based secret sharing, each share is
the same size as the secret, this results in a storage blowup
of mn, which is most likely unacceptably large if we want to
deceptively share a large number of secrets. If m = 50 and
n = 10, then the storage requirements for NAIVE are 500
times what is needed without secret sharing and deception.
2158-3927/18/$31.00 √Ç¬©2018 IEEE
DOI 10.1109/DSN.2018.00053
442
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply. 


	






Fig. 1. Different Images XOR Secret Shared with Shares in Common
XOR-based secret sharing allows for a more efÔ¨Åcient way
to plant fake secrets. If the real secret is encoded with n ‚àí 1
random shares and the nth share to allow it to be reconstructed
from all n shares, different nth shares can be generated to
produce different (fake) secrets. Figure 1 shows an example
with B/W images. This Ô¨Ågure shows two images, three random
shares R1, R2, R3, and two 4th shares S4a and S4b, such that
the XOR of R1, R2, R3, and S4a yields the Ô¨Årst image and
the XOR of R1, R2, R3, and S4b yields the second image.
With this approach, which we call SIMPLE, m secrets are
encoded using n + m‚àí 1 shares. Thus, the storage blowup of
SIMPLE is reduced to approximately m + n (a factor of 60
for m = 50, n = 10 instead of 500 with NAIVE).
SIMPLE reduces the storage blowup by a large factor but
we will show later that it is vulnerable to an attack that
reduces signiÔ¨Åcantly the computational burden on an adversary
to break conÔ¨Ådentiality. This discussion illuminates the goals
of a deceptive secret sharing scheme:
1) Overhead: use as few shares as possible to construct a
given number of secrets (one real and the rest fake)
2) Security: enforce a very high computational bound on
adversaries attempting to recover a secret after compro-
mising some or all of the secret shares
These are competing goals, i.e. reducing overhead by reusing
shares can reveal information that reduces the adversary‚Äôs
computational burden. In Sections IV and V, we present two
deceptive secret sharing schemes, one using XOR-based secret
sharing and the other using Shamir‚Äôs threshold scheme [18],
which allow trade-offs between these competing objectives. It
would also be interesting to explore deception within other
more efÔ¨Åcient secret sharing schemes, e.g. Krawczyk‚Äôs [13].
In this paper, we lay the foundations for combining secret
sharing and deception by exploring the two most commonly
used secret sharing schemes and we leave extensions to other
schemes for future work.
443



	












	
		


		
	
	
	
Fig. 2. ‚ÄúSea of Shares‚Äù Approach
III. SYSTEM AND THREAT MODELS
A. System Model
We primarily target distributed storage systems such as the
cloud, where a large number of storage servers are distributed
across one or more data centers. Prior works have suggested
using secret sharing to scatter information about a data object
across multiple storage servers, e.g. [20], [21]. With (k, n)
secret sharing, it is assumed that fewer than k storage servers
among the n storing one data object leak data at any time. This
might be difÔ¨Åcult to achieve, in practice, for several reasons:
‚Ä¢ a vulnerability that is common to most or all of the
storage servers could lead to a high percentage of the
servers being compromised simultaneously,
‚Ä¢ given enough time, an adversary could compromise more
than the threshold number of servers, or
‚Ä¢ a cloud administrator could bypass access control mech-
anisms and read data from all storage servers.
To address these problems, other work has suggested distribut-
ing shares across multiple cloud providers [2]. While this
can partially deal with these issues, the user must manage
relationships with multiple providers and do cross-domain
accesses on each operation. It also does not deter a powerful
adversary, such as a nation state, that has the ability to gain
access to the systems of multiple providers.
Our approach is equally effective within one cloud
provider‚Äôs domain or across multiple providers. For any object,
many shares are written to different servers and only a small
number of those shares represent the actual object, whereas the
remaining ones serve to confuse even an adversary that can
access all shares. The high-level approach, which we refer to
as the ‚Äúsea of shares‚Äù approach, is depicted in Figure 2. Here,
many shares are generated when an object is written. Those
shares are spread across a large number of storage servers. A
legitimate user must then be able to identify the correct shares
out of the ‚Äúsea of shares‚Äù when accessing the object.
Our approach has a deceptive feature, which is not shown
in the Ô¨Ågure. The shares are generated such that putting some
combinations of shares together yields fake but correct-looking
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply. 
that
it reveals the correct
information. This serves to mislead the adversary, because
they cannot be sure even if they are able to assemble a valid
secret,
information. We assume
correct-looking secrets are easily recognizable, either by a
human or an algorithm. This assumption holds for images,
natural language text, and many other types of data. This
approach provides an extra layer of protection in case the
threshold assumption of secret sharing is violated. Even if the
adversary compromises enough servers to reconstruct a secret,
the probability that the secret is real data is small.
An important question with our approach is how legitimate
users can identify the correct shares for an object. While there
are different ways to address this, for brevity, we describe
just one method here. This method uses shared knowledge by
legitimate users in combination with a deterministic mapping
method, similar to the approach of [5] for a different problem:
users have a shared key, there is a set of random salts for each
object, and the hash of the key concatenated with the ith salt
gives the location of the ith correct share. The salts are stored
as metadata within a separate metadata service. This forms
a tripartite security approach, wherein information from three
separate entities is required to access (and decode) data: 1)
shares from the data storage service, 2) salts from the metadata
service, and 3) the shared key from the local device. The
need to compromise all of these entities signiÔ¨Åcantly raises
the bar for an attacker. In this paper, we focus primarily on
data server compromises. Although space limitations prevent
a full discussion, this tripartite approach also defeats phishing
attacks and limits damage from user device compromises,
which are difÔ¨Åcult to deal with in secure storage systems.
B. Threat Model and Security Goals
We assume that the adversary can potentially access data
from all servers in a distributed storage system and that it has
a way to match shares on different servers to detect that they
belong to the same object.1 We will show that our approach
is effective even against this extremely powerful adversary. If
it is difÔ¨Åcult for the adversary to match shares across servers,
then our approach will be even more effective.
Assuming that an adversary has access to all shares of an
object, both real and fake, our security goals are several:
1) to maximize the computation time required by the ad-
versary to reconstruct one secret,
2) to maximize the computation time required by the ad-
versary to reconstruct all secrets given that they have
already reconstructed one secret, and
3) to minimize the probability that any given secret recon-
structed by an adversary is the correct secret.
We do not assume perfect security and thus, we allow for the
possibility that a determined and resource-powerful adversary
might be able to reconstruct a secret or a few secrets. The goal
of 1) is to make the reconstruction of any secrets as hard as
1This can occur if the adversary is able to eavesdrop network trafÔ¨Åc to
capture shares as they are written or is present on the servers and performs
timing analysis to determine which shares belong together.
444



	





	

