et al. [54]. Similarly, for Mac OS-, Windows OS-, and linux-
based laptops, the wireless hints from the channel can be
obtained using the airport utility (for Mac), iwconﬁg utility
(for linux) and other free surveying tools [17].
Algorithm 1: MNTP clock synchronization algorithm
input :warmupPeriod = time to estimate clock offsets
input :warmupWaitTime = interval between requests in
input :regularWaitTime = interval between requests in
input :resetPeriod = duration of warm-up plus regular
warmupPeriod
regularPeriod
periods
1 inWarmup = True
2 recordedO f f sets = {}
3 dri f tEst = None
4 if inWarmup then
// Acquire offset only when channel is
stable
wait(favorableSNRCondition())
o f f set = getOffsetUsingMultipleSources()
if accept(o f f set) then
measureSystemClock(o f f set)
recordedOffsets.add(o f f set)
wait(warmupWaitTime)
if exitingWarmup then
dri f tEst = estimateDrift(recordedO f f sets)
inWarmup = False
5
6
7
8
9
10
11
12
13
goto Step 4
14
15 else
16
correctSystemClockDrift(dri f tEst)
// Acquire offset only when channel is
stable
wait(favorableSNRCondition())
o f f set = getOffsetUsingSingleSource()
if accept(o f f set) then
correctSystemClock(o f f set)
recordedOffsets.add(o f f set)
wait(regularWaitTime)
if elapsed(resetPeriod) then
goto Step 1
else
goto Step 4
17
18
19
20
21
22
23
24
25
26
27 Function estimateDrift(recordedO f f sets)
28
29
30
trendLine = leastSquaresFit(recordedO f f sets)
dri f tEst = getSlope(trendLine)
return dri f tEst
4.2 MNTP Overview and Algorithm
Overview. In this section, we describe a new clock syn-
chronization protocol called MNTP. MNTP is sensitive to
varying channel conditions and reuses/sends SNTP requests
in a channel-aware fashion based on wireless hints from the
channel. Using the wireless hints that are captured from
the device (as described above), we monitor the channel for
stable and less-dynamic portions and pace the clock synchro-
nization such that we send the SNTP requests only during
those identiﬁed stable channel conditions—the twin goals of
MNTP.
Algorithm. The key steps of MNTP are shown in Algo-
rithm 1. The algorithm starts with identiﬁcation and estab-
lishment of ideal channel conditions and needs the following:
(1) baseline thresholds for the wireless hints to ﬁlter bad off-
sets and (2) time period over which the channel should be
observed so that SNTP requests can be emitted.
To create a baseline threshold for the wireless hints, we
set the values of RSSI, noise and SNR margin to be -75 dB,
-70 dB and 20 dB respectively. That is, RSSI value should be
greater than -75 dB, noise level should be lesser than -70 dB
and the SNR margin should be greater than or equal to 20 dB.
These values are not arbitrary, rather they emerged through an
iterative process of reﬁning our experiments and information
given in online forums [2,12,14]. In our experiments, we ﬁnd
that the baseline thresholds work effectively, but we expect
that these parameters would likely need ﬁne tuning for other
external or outdoor settings.
Speciﬁcally,
In this test period,
We follow a two-part approach in MNTP’s design to
determine the time period over which the channel should
be monitored and requests can be sent to reference clocks.
The ﬁrst part of the algorithm is the warm-up phase (steps
4 to 14), where the wireless host is put on a test pe-
riod for warmupPeriod time at the start of the device
and/or the algorithm.
the channel
condition is determined based on the measured wireless
hints (step 5) and SNTP requests are emitted to three
reference clocks.
the SNTP requests are
emitted to 0.pool.ntp.org, 1.pool.ntp.org and
3.pool.ntp.org, on every warmupWaitTime interval, in
parallel, till the warmupPeriod (step 6). These requests are
emitted only when the measured wireless hints satisfy the
established baseline thresholds. Otherwise the synchroniza-
tion requests are deferred. For the offset responses received
from time sources, we follow the philosophy of NTP’s clock
selection heuristic [8]. We calculate the mean and standard
deviation of the offsets and classify the time sources whose
offsets exceed the mean plus one standard deviation as false
tickers. We reject the false tickers to ensure very tight clock
synchronization.
Since a network could be completely lossy at the start of
clock synchronization, we may not be able to emit any SNTP
requests. To address this issue, we wait until the network
conditions are favorable and record 10 offset values reported
by SNTP to create a trend line for the clock skew or clock
drift (steps 7 to 9). The waiting time is determined by the
warmupPeriod and warmupWaitTime variables, which are
user-tunable parameters and which depend on the level of
accuracy needed by users of the apps installed on hosts. It
is possible that our algorithm never perceives the network
conditions to be favorable, or at least not over a very long
period of time. In this work, we do not consider such perpet-
ually unstable network conditions and plan to address such
scenarios in future work.
Once the initial trend is created, the direction of the sub-
sequent reported offsets is determined based on the estab-
lished trend line and an accept or reject decision is made.
Speciﬁcally, we ﬁnd the squared error of each of the reported
offset with respect to the ﬁtted trend line and then extend the
trend line to get an estimate of where the next sample should
be. Next, we calculate the error of the reported offsets with
respect to this estimate. If the square of that error is one stan-
dard deviation above or below the mean, then we reject the
reported offset. Otherwise the offset is accepted and the trend
line is extended (steps 11 to 14). MNTP’s ﬁltering capability
ensures accurate clock synchronization by rejecting large off-
sets as we show in §5. Since the clock skews are not always
linear and the constant skew factor of the clock dominates
its variable counterpart [42], we ﬁt a trend line using least
squares polynomial ﬁt with a ﬁrst degree polynomial. We
note that our algorithm does not make any assumptions about
linearity in clock skew.
Finally, once the trend lines are determined and when
the warm-up phase is complete, MNTP starts the regular
phase for clock synchronization. Note that the actual clock
update happens only during the second part of the algorithm
(steps 16 to 26). This step is similar to the warm-up phase
with the exception of two things: (i) the interval at which
the requests are emitted to references, which is based on
the regularWaitTime variable; and (ii) SNTP requests are
emitted to a single reference clock only. The actual clock
update and drift correction mechanisms vary, depending on
vendor-speciﬁc system calls available to MNTP.
Advantages. MNTP has the following advantages over
standard SNTP for clock synchronization. First, MNTP is
efﬁcient in terms of how the synchronization requests are
paced and emitted based on the wireless channel conditions.
In addition, simple examination of MNTP’s CPU utilization
during tests indicate loads less than 0.5%. Our initial focus
on efﬁciency has been from a network load perspective and
even though MNTP’s CPU impact is low, we intend to con-
sider the efﬁciency of our implementation from a system load
perspective in future work. Next, MNTP algorithm (Algo-
rithm 1) is implemented in about 274 lines of python code8,
which conveys the fact that MNTP is simple. Next, MNTP
is also easily deployable with minimal support from the end
hosts. Speciﬁcally, the only support needed form the wireless
hosts is that the wireless host should allow MNTP to measure
wireless hints. Finally, MNTP can also offer accurate clock
synchronization to wireless/mobile devices as explained in
§5.
5. MNTP EVALUATION
In this section, we evaluate the clock synchronization
accuracy of MNTP compared with an unmodiﬁed SNTP
8We have open-sourced our MNTP implementation and it is available for
download at https://github.com/satkum/mntp
implementation. We begin by conducting a set of base-
line laboratory-based experiments with SNTP and MNTP
in which synchronization requests are emitted every 5 sec-
onds for one hour during varying channel conditions using
the same experimental setup (including noise generation) as
in §3. In these experiments, we do not consider warmup
and regular periods, and we switched off the drift correction
feature in MNTP to create a head-to-head comparison with
SNTP. For the similar reason, in all our experiments, we only
compare MNTP against SNTP and not NTP, because of the
NTP’s exhaustive ﬁltering overhead. Our focus for these one-
hour experiments is to highlight the reduction in the reported
clock offsets by MNTP versus SNTP, and to experiment in
a wide variety of operating conditions including tests on (1)
wireline and wireless networks and (2) with and without NTP
for system clock correction.
Next, we conduct experiments for 4 hours to demonstrate
the efﬁcacy of MNTP. All the experiments were run on a Mac-
book Pro laptop (with Intel core i5 processor and 4GB RAM)
and the wireless hints are measured using the airport utility.
Finally, we analyze the effect of MNTP’s parameters on its
synchronization accuracy through a trace-driven analysis on
the logs collected in the longer experiments.
5.1 Baseline experiments
We begin by considering a simple wireless network sce-
nario with variable channel conditions and compare the clock
offsets reported by MNTP and SNTP. Throughout this ex-
periment, we use NTP to correct the laptop’s system clock
from which the clock synchronization requests are emitted.
Using NTP to establish a baseline is simply a design choice
and can be easily replaced with a GPS receiver, which we
plan to investigate in future work. Figure 6 shows the clock
offsets reported by both SNTP and MNTP when the laptop
is connected on a wireless network along with the large off-
sets that are rejected by MNTP’s ﬁlter. We can see that the
offsets reported by SNTP are susceptible to the varying chan-
nel conditions and are as much as 292ms from the system
clock. However, the offsets reported by MNTP are very close
to the system clock with a maximum offset value of 23ms,
which is a 12-fold improvement over standard SNTP on a
wireless network with lossy conditions. From this ﬁgure, it
is also evident that all the outlier offsets are effectively dis-
carded by our MNTP ﬁlter, thus enabling much tighter clock
synchronization.
To explain the gains achieved using MNTP versus SNTP,
we plot the measured wireless hints in Figure 7. Both the re-
ported and rejected offsets by the MNTP ﬁlter are also shown.
We note that the advantages of MNTP are due to the follow-
ing two properties of MNTP’s ﬁltering and channel-aware
request pacing heuristics. First, many of the synchronization
requests are deferred due to either RSSI, or noise, or SNR
margin not meeting the established baseline thresholds. Sec-
ond, many of the large reported offsets are effectively rejected
by the MNTP ﬁlter allowing only those offsets that are close
to the clock drift trend line.
Figure 6: Reported SNTP vs. MNTP offsets on wireless
network with NTP clock correction.
Figure 8: Reported SNTP vs. MNTP offsets on wireless
network without NTP clock correction.
less network, where reported offsets are about 20ms. The
gains we see with MNTP are, again, due to emitting requests
only during favorable network conditions, whereas SNTP
emits requests blindly, and rejection of outliers, whereas
SNTP does no such rejection.
Figure 7: Signals and selection plot.
Next, we repeat the above experiment without allowing
NTP to correct the system clock. Figure 8 depicts the offsets
reported by SNTP and MNTP on wireless network without
NTP-based clock correction. The ﬁgure highlights the disad-
vantages of using SNTP on a wireless network, with reported
clock offsets as high as 450ms. On the other hand, the clock
offsets reported by MNTP were always close to the ﬁtted
trend line for the clock skew, which we believe will easily
be corrected using our estimated drift available as part of
the MNTP ﬁlter. The maximum offset reported by MNTP
is 24ms, which is, on average, within 4.5ms of the reference
clock and 17 times more accurate than standard SNTP.
Third, we test the clock synchronization accuracy of
MNTP when the host is connected to a wireless network
compared with SNTP when the same host is connected to
a wired network. In this experiment, NTP is turned on and
the clocks are synchronized with the OS-speciﬁc NTP time
source before starting the experiments. Figure 9 depicts the
clock offsets reported by SNTP and MNTP on a wired and
wireless network respectively. The ﬁgure shows that even
when the SNTP offsets were obtained from a wired network,
SNTP can be as high as 50ms compared to MNTP on a wire-
Figure 9: Reported SNTP offsets on wired network vs.
MNTP offsets on wireless network with NTP clock cor-
rection.
Similarly, we compare the offsets reported by MNTP on
a wireless network against offsets reported by SNTP when
connected on a wired network without NTP clock correc-
tion. Figure 10 plots the clock offsets reported by SNTP and
MNTP on a wired and wireless network respectively without
NTP clock correction. Similar to the third experiment, we
observe that the SNTP offsets reported were as high as 50ms
despite the host being connected to a wired network.
5.2 Longer experiment
Next, we demonstrate the efﬁcacy of MNTP by extending
the baseline clock synchronization experiment for a longer
duration. In this experiment, we follow the setting described
in §5.1 and we emit synchronization requests every 5 sec-
onds for a duration of 4 hours. Speciﬁcally, we record the
To run the emulator, the four input parameters required by
MNTP need to initialized, which is satisﬁed by the search
component. When provided with a range of values for the
input parameters, e.g. the duration of the warm-up or regular
waiting times, the search component generates all possible
values of the parameters and invokes the emulator for each
generated combination. The search component then calcu-
lates the accuracy of MNTP for the given combination of
input parameters using the offsets reported by the emulator.
Speciﬁcally, the search component measures the Root Mean
Square Error (RMSE) of the MNTP offsets with respect to a
perfectly synchronized clock (i.e., offset value of 0 ms) and
outputs the various conﬁgurations. A sample list of conﬁgura-
tions, along with the values for MNTP parameter and RMSE
of clock offsets, are shown in Table 2. The corresponding
achievable clock offset values for the six sample conﬁgura-
tions are depicted in Figure 11. The values indicate that while
the RMSE can indeed be reduced as the number of tuning
requests grows, relatively speaking, MNTP performs well
with only modest tuning.
Apart from tuning the input parameters, the tool can also
be used to gain useful insights about the factor that inﬂuences
the accuracy of MNTP for a given network condition. For ex-
ample, using the analysis tool, we discovered that sometimes
the MNTP ﬁlter did not accept any offsets during the regular
period for some values of warmupWaitTime. Investigating
this further, we discovered that the number of samples were
too low causing the MNTP to underestimate the clock drift
value. And because of this underestimation of the clock drift,
the MNTP ﬁlter was too conservative in accepting the offsets
resulting in all the offsets being rejected in the regular phase.
This insight led us to change our MNTP ﬁlter to reestimate
the clock drift value with every new offset sample.
6. RELATED WORK
Accurate clock synchronization of networked systems has
been a subject of interest in the research community for
over three decades. The pioneering work by Lamport [30],
Marzullo [33], and Mills [35, 36] paved the way for the de-
velopment of synchronization protocols such as the near-
ubiquitous Network Time Protocol [34, 37, 40]. While NTP
and the related SNTP have been deployed widely in ordi-
nary wireline and wireless networks, time synchronization