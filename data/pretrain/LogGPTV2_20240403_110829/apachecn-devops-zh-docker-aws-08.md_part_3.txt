 LoadBalancerArn: !Ref ApplicationLoadBalancer
 Protocol: HTTP
 Port: 80
 DefaultActions:
 - TargetGroupArn: !Ref ApplicationServiceTargetGroup
 Type: forward
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref ApplicationSubnets
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value : 30
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb
...
...
```
Creating an Application Load Balancer listener
在前面的示例中，侦听器通过`LoadBalancerArn`属性绑定到`ApplicationLoadBalancer`资源，其中`Protocol`和`Port`属性配置侦听器以预期端口`80`上的传入 HTTP 连接。请注意，您必须定义`DefaultActions`属性，该属性定义传入连接将被转发到的默认目标组。
# 创建目标组
与配置应用负载平衡器相关的最后一项配置任务是配置目标组，该目标组将用于将侦听器资源收到的传入请求转发到您的应用实例。
以下示例演示了如何配置目标组资源:
```
...
...
Resources:
  ApplicationServiceTargetGroup:
 Type: AWS::ElasticLoadBalancingV2::TargetGroup
 Properties:
 Protocol: HTTP
 Port: 8000
 VpcId: !Ref VpcId
 TargetGroupAttributes:
 - Key: deregistration_delay.timeout_seconds
 Value: 30
  ApplicationLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationServiceTargetGroup
          Type: forward
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
...
...
```
Creating a target group
在前面的示例中，为目标组定义了以下配置:
*   `Protocol`:定义将转发到目标组的连接协议。
*   `Port`:指定应用将在其上运行的容器端口。默认情况下，todobackend 示例应用在端口`8000`上运行，因此您可以为端口配置该值。请注意，配置动态端口映射时，ECS 将动态重新配置此端口。
*   `VpcId`:配置目标所在的 VPC 标识。
*   `TargetGroupAttributes`:定义目标组的配置属性([https://docs . AWS . Amazon . com/elastic cloadbalancing/latest/application-load-balancer-target-groups . html # target-group-attributes](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes))。在前面的示例中，`deregistration_delay.timeout_seconds`属性配置了在注销目标之前等待的时间，这发生在应用滚动部署期间清空连接时。
# 使用云信息部署应用负载平衡器
现在，您的所有应用负载平衡器组件都已经在您的云信息模板中定义，您可以使用`aws cloudformation deploy`命令将这些组件部署到 AWS。
一旦您的栈部署完成，如果您打开 AWS 控制台并导航到 EC2 仪表板，在**负载平衡**部分下，您应该能够看到您的新应用负载平衡器资源。
下面的屏幕截图演示了如何查看作为部署的一部分而创建的应用负载平衡器资源:
![](img/b91dab42-c34b-47da-a94f-69a7c62d23e7.png)
Viewing an Application Load Balancer
在前面的截图中，您可以看到应用负载平衡器资源有一个域名，这是终端用户和设备在访问负载平衡器后面的应用时需要连接到的端点的名称。一旦您完全部署了栈中的所有资源，您将在以后使用这个名称，但是现在因为您的目标组是空的，这个 URL 将返回一个 503 错误，如下例所示。请注意，您可以通过单击上一张截图中的**监听器**选项卡来查看您的监听器资源，而您关联的目标组资源可以通过单击左侧菜单中的**目标组**链接来查看。
You will notice that the DNS name of the Application Load Balancer is not a particularly friendly name that your end users will be able to recognize or remember. In a real-world application, you would typically create a CNAME or ALIAS DNS record, which configures a friendly canonical name, such as example.com, that points to your load balancer DNS name. See [https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-elb-load-balancer.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-elb-load-balancer.html) for more details on how to do this, and note that you can and should create CNAME and ALIAS records using CloudFormation ([https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-route53.html#scenario-recordsetgroup-zoneapex](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-route53.html#scenario-recordsetgroup-zoneapex)).
```
> aws cloudformation describe-stacks --stack-name todobackend --query Stacks[].Outputs[]
[
    {
        "OutputKey": "PublicURL",
        "OutputValue": "todob-Appli-5SV5J3NC6AAI-2078461159.us-east-1.elb.amazonaws.com",
        "Description": "Public DNS name of Application Load Balancer"
    }
]
> curl todob-Appli-5SV5J3NC6AAI-2078461159.us-east-1.elb.amazonaws.com
503 Service Temporarily Unavailable
503 Service Temporarily Unavailable
```
Testing an Application Load Balancer endpoint
请注意，在前面的示例中，您可以使用 AWS 命令行界面查询云信息栈的输出，并获取应用负载平衡器的公共域名。在云信息仪表板中选择栈后，您也可以通过单击输出选项卡来查看栈的输出。
# 创建 ECS 任务定义
现在，您已经使用 CloudFormation 定义了一个 ECS 集群，并创建了许多支持资源，包括应用数据库的 RDS 实例和服务于应用连接的应用负载平衡器。
在这个阶段，您已经准备好创建代表您的应用的 ECS 资源，其中包括 ECS 任务定义和 ECS 服务。
我们将从在您的云信息模板中定义 ECS 任务定义开始，如以下示例所示:
```
Parameters:
  ...
  ...
  ApplicationImageId:
    Type: String
    Description: ECS Amazon Machine Image (AMI) ID
 ApplicationImageTag:
 Type: String
 Description: Application Docker Image Tag
 Default: latest  ApplicationSubnets:
    Type: List
    Description: Target subnets for EC2 instances
 ...
  ... 
Resources:
  ApplicationTaskDefinition:
 Type: AWS::ECS::TaskDefinition
 Properties:
 Family: todobackend      Volumes:
 - Name: public          Host:
 SourcePath: /data/public
 ContainerDefinitions:        - Name: todobackend
 Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}
 MemoryReservation: 395
 Cpu: 245
 MountPoints:
 - SourceVolume: public
 ContainerPath: /public
 Environment:
            - Name: DJANGO_SETTINGS_MODULE
 Value: todobackend.settings_release
 - Name: MYSQL_HOST
 Value: !Sub ${ApplicationDatabase.Endpoint.Address}
 - Name: MYSQL_USER
 Value: todobackend
 - Name: MYSQL_PASSWORD
 Value: !Ref DatabasePassword
 - Name: MYSQL_DATABASE
 Value: todobackend            - Name: SECRET_KEY
 Value: some-random-secret-should-be-here
 Command: 
 - uwsgi
 - --http=0.0.0.0:8000
 - --module=todobackend.wsgi
 - --master
 - --die-on-term
 - --processes=4
 - --threads=2
 - --check-static=/public
 PortMappings:
 - ContainerPort: 8000
              HostPort: 0
 LogConfiguration:
 LogDriver: awslogs
 Options:
 awslogs-group: !Sub /${AWS::StackName}/ecs/todobackend
 awslogs-region: !Ref AWS::Region
 awslogs-stream-prefix: docker
 - Name: collectstatic
          Essential: false
 Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}
 MemoryReservation: 5
 Cpu: 5          MountPoints:
 - SourceVolume: public
              ContainerPath: /public
 Environment:
 - Name: DJANGO_SETTINGS_MODULE
              Value: todobackend.settings_release
 Command:
 - python3
            - manage.py
            - collectstatic
            - --no-input
 LogConfiguration:
 LogDriver: awslogs
 Options:
 awslogs-group: !Sub /${AWS::StackName}/ecs/todobackend
 awslogs-region: !Ref AWS::Region
 awslogs-stream-prefix: docker  ApplicationLogGroup:
 Type: AWS::Logs::LogGroup
 Properties:
 LogGroupName: !Sub /${AWS::StackName}/ecs/todobackend
 RetentionInDays: 7
  ApplicationServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
...
...
```
Defining an ECS task definition using CloudFormation
正如您在前面的示例中看到的，配置任务定义需要合理的配置量，并且需要详细了解任务定义所代表的容器应用的运行时配置。
回到第 1 章，当您创建示例应用并在本地运行它时，您必须使用 Docker Compose 执行类似的练习。下面的示例显示了 todobackend 存储库中 Docker 编写文件的相关片段:
```