byte-level taint tracking, this method adds the taint label of the
predicate to each of the above variables. For example, consider the
predicate on Line 3 in Figure 4. Since the variables k and n are as-
signed new values in a branch of this conditional statement, this
method adds the taint label of the predicate (i.e., the taint label of
the variable y) to the variable k and n. However, this method often
results in over taint or taint explosion, because it may add taint
labels that will be useless to the analysis. For example, in the ex-
ample above, while the taint label added to the variable k captures
the implicit taint flow dependency from Line 3 to Line 6, the taint
label added to the variable n is useless because it does not help
identify new taint flow dependencies between conditional state-
ments. Even worse, these useless taint labels will propagate further
to other parts of the program, resulting in taint explosion.
We propose a novel approach to identify implicit control flow
and taint flow dependencies between conditional statements with-
out incurring either huge analysis overhead or taint explosion. The
insight is that rather than identifying all the implicit flows, we need
to identify only those that cause the target conditional statement
to become unreachable during input mutation. Let s be the target
conditional statement that was reachable on the original input but
became unreachable on the mutated input. We run the program
twice. First, we run the program on the original input and record
the branch choices of all the conditional statements on the path
before s. Then, we run the program on the mutated input with a
special handling: when we encounter a conditional statement, we
record its branch choice but force it to take the branch choice as in
the previous run (on the original input). Therefore, the paths of the
two runs have the same sequence of conditional statements. We ex-
amine all the conditional statements on the path from the start of
the program to s in the reverse chronological order. For each such
statement t, if it is not already an explicit effective prior statement
identified by the algorithms in Section 3.4 and if its branch choices
in the first run (on the original input) and the second run (on the
mutated input) differ, it has a potential control flow or taint flow
dependency with s. To test whether this dependency truly exists,
we run the program on the mutated input with a special handling:
we force all the following conditional statements to take the branch
choice as in the first run:
(1) all the conditional statements before t on the path
(2) all the explicit effective prior conditional statements
(3) all the implicit effective prior conditional statements
If the program no longer reaches s, then t truly has implicit con-
trol flow or taint flow dependency with s, and we mark it as an
implicit effective prior conditional statement of s.
The complexity of this algorithm is linear in the number of con-
ditional statements before s that are affected by the mutated bytes
but are not control-flow-wise dependent on s. However, since Ma-
tryoshka mutates inputs by gradient descent on a small proportion
of the input, the number of statements we should test is likely to
be few.
4 IMPLEMENTATION
We implemented Matryoshka in 8672 lines of Rust, and 1262 lines
of C++ for LLVM pass. We borrowed from Angora the code for
byte-level taint tracking and for mutating the input by gradient de-
scent [3]. When computing intraprocedural post dominator trees,
Matryoshka uses LLVM’s function pass PostDominatorTreeWrapper
Pass [24].
5 EVALUATION
We evaluated Matryoshka in three parts. In the first part, we com-
pared Matryoshka with nine other fuzzers on the LAVA-M data
set [14]. Next, we compared Matryoshka with three other most rep-
resentative fuzzers on 13 open source programs. Finally, we eval-
uated how Matryoshka’s ability to solve nested constraints con-
tributes to its impressive performance.
We ran our experiments on a server with two Intel Xeon Gold
5118 processors and 256 GB memory running 64-bit Debian 10.5
Even though Matryoshka can fuzz a program using multiple cores
simultaneously, we configured it to fuzz the programs using only
one core during evaluation. We ran each experiment five times and
reported the average performance.
5.1 Comparison on LAVA-M
LAVA-M consists of four programs with a large number of injected
but realistic looking bugs [14]. It has been widely used for evaluat-
ing fuzzers. However, it is approaching the end of its shelf life as
the state of the art fuzzers (Angora and REDQUEEN) were able to
find almost all the injected bugs in LAVA-M. While LAVA-M can-
not show that Matryoshka advances the state of the art, it can show
whether Matryoshka is at the state of the art.
Table 3 compares the number of bugs found by 10 fuzzers. Ma-
tryoshka and REDQUEEN are the best: they both found almost all
the listed bugs in LAVA-M.6
5.2 Comparison on 13 open source programs
We compared Matryoshka with AFL, QSYM and Angora by line
and branch coverage. We ran them on 13 open source programs
shown in Table 4. We chose these programs because eight of them
were used for evaluating Angora, and the rest were used frequently
for evaluating other fuzzers.
5.2.1 Program coverage and efficiency. We compared line and branch
coverage of AFL (1 Master + 1 Slave), Angora (+1 AFL Slave), QSYM
(+ 1 AFL Slave) with and without optimistic solving, and Matryoshka
(+1 AFL Slave). Table 5 shows the coverage after running AFL,
Angora, QSYM, QSYM with optimistic solving disabled, and Ma-
tryoshka on two CPU cores for 24 hours (one core for AFL slave).
Matryoshka outperformed AFL, QSYM, and Angora on all the pro-
grams, except on xmlwf , mutool, and tiff2ps where Matryoshka
had similar performance with Angora. Matryoshka’s advantage
shines the most on xmllint, where Matryoshka increased line and
branch coverage by 16.8% and 21.8%, respectively, over Angora, the
fuzzer with the next highest coverage.
Figure 5 compares the cumulative line and branch coverage by
AFL, Angora, and Matryoshka on the program readpng over time.
5Matryoshka does not need that much amount of memory. We also successfully fuzzed
all the programs on our laptop with only 8 GB memory.
6Matryoshka and REDQUEEN also found several unlisted bugs, which the LAVA-M
authors injected but were unable to trigger. Table 10 shows the IDs of unlisted bugs.
Matryoshka covered more lines and branches than QSYM and An-
gora at all time, thanks to its ability to solve nested conditional
statements.
The goal of coverage-based fuzzers is to increase coverage, as
measured by cumulative line and branch coverage. By contrast, the
number of tests generated and executed by the fuzzer per second
has no correlation with either line or branch coverage across dif-
ferent fuzzers, because smart fuzzers may generate fewer tests but
the tests are much more effective in triggering new branches.
5.2.2 Bug analysis, verification, and classification. Besides all the
inputs that crashed the program during fuzzing, we also ran Ad-
dressSanitizer(ASAN) [31] on all the seeds found by Matryoshka
and saved the inputs where ASAN reported errors. Then, we dedu-
plicated the crashes by AFL’s afl-cmin -C command.
We manually verified all the crashes and classified them into
unique bugs shown in Table 6. Matryoshka found a total of 41
unique bugs in seven programs (it found no bugs in the rest six
programs). We have reported all the bugs to the developers and 12
of them have been assigned CVE IDs.
5.3 Novel features of Matryoshka
We evaluated the key novel feature of Matryoshka: its ability to
solve constraints involving nested conditional statements.
Solved constraints. On each program and given the same
5.3.1
seeds, the constraints that Matryoshka can solve is a superset of
the constraints that Angora can solve. This is because for each con-
straint, Matryoshka will first try to solve it using Angora’s method.
If it fails, then Matryoshka will start to use the methods in Sec-
tion 3. We evaluated which constraints unsolved by Angora could
be solved by Matryoshka. To eliminate the impact of randomness
on the fuzzers, we collected the inputs generated by AFL and fed
them as the only seeds to both Angora and Matryoshka. In other
words, we discarded the new seeds generated by Angora and Ma-
tryoshka during fuzzing, respectively. We ran Matryoshka using
three different mutation strategies described in Section 3.5 for five
hours: prioritize reachability (Section 3.5.1), prioritize satisfiability
(Section 3.5.2), and joint optimization (Section 3.5.3).
Table 7 shows the number of constraints that Matryoshka could
solve but Angora could not. The table shows that Matryoshka could
solve as few as 172 and as many as 1794 new constraints (that
were unsolvable by Angora) per program. This demonstrates the
effectiveness of the algorithms in Section 3. Table 8 compares Ma-
tryoshka’s three strategies for solving constraints described in Sec-
tion 3.5. The strategy prioritizing satisfiabily was the most effec-
tive, but there were constraints that this strategy could not solve
but others could. The strategy prioritizing reachability was effec-
tive on jhead and size, and the joint optimization strategy was ef-
fective on readpng.
Figure 6 compares the cumulative constraints solved by each in-
dividual strategy over five hours on the program size. We can see
that the strategies prioritize reachability (PR) and prioritize satis-
fiability (PS) contribute greatly to the the number of constraints
solved early on in fuzzing, while joint optimization (JO) solves con-
straints slowly but continues to grow later on when the other two
strategies have reached their respective plateaus.
Table 3: Bugs found on the LAVA-M data set by different fuzzers
Bugs found by each fuzzer
AFL FUZZER SES VUzzer Steelix
9
0
0
1
27
17
Fail
50
7
43
28
194
7
7
2
0
0
9
0
18
QSYM
28
44
57
1238
NEUZZ REDQUEEN Angora Matryoshka
29
48
60
1582
29
48
57
2462
29
48
57
1541
29
48
57
2432
Program Listed
bugs
28
44
57
2136
uniq
base64
md5sum
who
(a) Line coverage
(b) Branch coverage
Figure 5: Cumulative line and branch coverage on readpng by AFL, QSYM, Angora, and Matryoshka in 24 hours
Table 4: Programs used in evaluation in Section 5.2
Program
djpeg(ijg)
file
jhead
mutool(mupdf)
nm(binutils)
objdump(binutils)
readelf(binutils)
readpng(libpng)
size(binutils)
tcpdump(libpacp)
tiff2ps(libtiff)
xmllint(libxml2)
xmlwf(expat)
Version
v9c
commit-6367a7c9b4
3.03
commit-08657851b6
commit-388a192d73
commit-388a192d73
commit-388a192d73
commit-0a882b5787
commit-388a192d73
commit-e9439e9b71
commit-a0e273fdca
commit-d3de757825
commit-9f5bfc8d0a
Argument
draw
-C
-x
-a
-nr
Size (kB)
859
781
205
39 682
6659
9357
2119
1033
6597
6022
1517
6862
785
Figure 1 shows an example where Angora could not reach the
false branch of Line 6 but Matryoshka could. This is because when
Angora mutated buffer[0] to satisfy the false branch of Line 6,
it caused the CRC check on Line 4 to fail, so the function never
reached Line 6. Using the strategy for prioritizing satisfiability, Ma-
tryoshka first found an assignment to buffer[0], either 1 or 2, to
reach the false branch of Line 6. Then, it backtracked to the prior
conditional statement on Line 4. Through byte-level taint analysis,
Matryoshka learned that all the input bytes flowed into Line 4, but
Figure 6: Cumulative constraints solved by Matryoshka’s
three strategies, respectively, in five hours on the program
size. All strategies means trying prioritizing reachability,
prioritizing satisfiability, and joint optimization, in that or-
der until the constraint is solved.
since buffer[0] also flowed into Line 6, this strategy directed Ma-
tryoshka to keep buffer[0] fixed but to freely mutate all the bytes.
Using gradient descent, Matryoshka found an input that satisfied
the false branch of Line 4.7
7The reason why gradient descent helped Matryoshka to find a solution on Line 4
is that the CRC value itself was in the input. Therefore, gradient descent found that
the objective function had a constant partial derivative with regard to the input bytes
 1300 1400 1500 1600 1700 1800 1900 2000 2100 220000:0004:0008:0012:0016:0020:00Cumulative line coverageTime (HH:MM)AFLQSYM opt onQSYM opt oﬀAngoraMatryoshka!"#$$ 600 700 800 900 1000 1100 1200 130000:0004:0008:0012:0016:0020:00Cumulative branch coverageTime (HH:MM)AFLQSYM opt onQSYM opt oﬀAngoraMatryoshka!"#$$ 0 100 200 300 400 500 60000:3001:0001:3002:0002:3003:0003:3004:0004:3005:00Constraints solved by strategyTime (HH:MM)Prioritize reachabilityPrioritize satisﬁabilityJoint optimizationAll strategiesTable 5: Comparison of coverage between AFL, QSYM, Angora and Matryoshka
Line coverage
Branch coverage
AFL
5951
2637
399
5247
4766
3904
7792
1643
3299
13000
5193
5804
4850
QSYM
opt on
5994
3098
761
5557
6002
6380
8357
2047
4960
12485
4892
6221
4732
opt off
5967
2799
756
5493
5390
5678
7906
1723
3845
13362
5054
6058
4684
Angora Matryoshka
AFL
5900
3179
903
5631
6261
7906
10203
2027
5332
13691
5303
6516
5011
6144
3277
948
5694
6964
8076
11245
2187
5445
13992
5291
7611
5019
1915
1746
218
2177
2765
2291
5810
903
1937
7455
3217
4877
1965
QSYM
opt on
1899
2073