title:Proxy Cryptography Revisited
author:Anca-Andreea Ivan and
Yevgeniy Dodis
Proxy Cryptography Revisited
Anca Ivan, Yevgeniy Dodis
Department of Computer Science
Courant Institute of Mathematical Sciences
New York University, New York, NY 10012
fivan,PI:EMAIL
Abstract
In this work we revisit and formally study the notion
of proxy cryptography.
Intuitively, various proxy func-
tions allow two cooperating parties F (the “FBI”) and P
(the “proxy”) to duplicate the functionality available to the
third party U (the “user”), without being able to perform
this functionality on their own (without cooperation). The
concept is closely related to the notion of threshold cryp-
tography, except we deal with only two parties P and F ,
and place very strict restrictions on the way the operations
are performed (which is done for the sake of efﬁciency, us-
ability and scalability). For example, for decryption (resp.
signature) P (F ) sends a single message to F (P ), after
which the latter can decrypt (sign) the message. Our for-
mal modeling of proxy cryptography signiﬁcantly general-
izes, simpliﬁes and simultaneously clariﬁes the model of
“atomic proxy” suggested by Blaze and Strauss [4].
In
particular, we deﬁne bidirectional and unidirectional vari-
ants of our model1, and show extremely simple generic so-
lutions for proxy signature and encryption in these models.
We also give more efﬁcient solutions for several speciﬁc
schemes. We conclude that proxy cryptography is a rela-
tively simple concept to satisfy when looked from the cor-
rect and formal standpoint.
1 Introduction
The Blaze and Strauss [4] paper introduced the notion of
(atomic) proxy cryptography. The authors deﬁne “atomic
proxy functions” as functions that transform ciphertext cor-
responding to one key into ciphertext for another key with-
out revealing any information about the secret decryption
keys or the clear text. In the case of signatures, the proxy
functions convert a valid signature for one key into a valid
1We will also mention yet another off-line variant implicitly studied
by [9, 10].
signature for another key without disclosing the secret sig-
nature keys. We extend and generalize this notion as fol-
lows.
Intuitively, proxy functions allow one user to cor-
rectly decrypt ciphertexts or generate valid signatures on
behalf of another user without holding any information
about the secret keys of the latter user.
We consider that the proxy functions can be divided into
two categories: bidirectional and unidirectional . The uni-
directional proxy functions allow one user (U1) to decrypt
ciphertexts or generate signatures corresponding to the se-
cret key of another user (U2) even if the ﬁrst user does
not hold that secret key. However, the owner of the secret
key (U2) needs a completely different unidirectional func-
tion if he desires to decrypt ciphertexts or generate signa-
tures on behalf of the ﬁrst user (U1). Unlike the unidirec-
tional proxy functions, the bidirectional ones can be used
by both users to decrypt ciphertexts or generate signatures,
by transforming the ciphertext/signature for one key into
ciphertext/signature for another key. In other words, both
users U1 and U2 can use the same bidirectional proxy func-
tion to transform ciphertexts from one key to another key.
The original paper [4] informally deﬁnes the notion of
bidirectional proxy functions and describes two examples
of proxy functions: one for encryption, based on El Gamal
encryption, and one for signatures. However, both exam-
ples are proved to have low security guarantees. Our paper
formally deﬁnes both the bidirectional and unidirectional
proxy functions for encryption and signature, and their se-
indistinguishability/unforgeability
curity guarantees (e.g.
under various attacks).
In addition, this paper presents
generic schemes for bidirectional and unidirectional proxy
functions for both public-key and private-key encryption
and signature schemes. All generic schemes can be used
to transform any standard cryptographic primitive into a
proxy function, with a factor of two slowdown. This
slowdown is eliminated by the proxy functions speciﬁ-
cally designed for a few cryptographic primitives (e.g. El
Gamal [12], RSA [25], RSA Hash-and-Sign [2, 1]).
The notion of proxy cryptography can be very useful
in cases when one user needs to perform sensitive oper-
ations (e.g. ciphertext decryption, signature generation)
without holding the necessary secret keys. For example,
the president of a company can delegate his signature rights
by giving a proxy key to his assistent. The proxy key
transforms a signature created by the vice-president into
the president’s signature, thus allowing the assistent to co-
sign only if the document was ﬁrst signed by the vice-
president. Another example is that of a key escrow sys-
tem [13, 23, 18, 17, 14, 27], where a trusted party can
mediate the conﬂicts between users and the law enforce-
ment agencies. The problem is to allow the law enforce-
ment agency to read messages encrypted for a set of users,
for a limited period of time, without knowing the users’
secrets. The solution is to locate a key escrow agent be-
tween the users and the law enforcement agency, such that
it controls which messages are read by the law enforce-
ment agencies. In classic schemes, the users have to give
their secret keys to the key escrow agent. Whenever the law
enforcement agency wants to reads a message belonging to
a user, the key escrow agent decrypts the message and re-
encrypts it with the key of the law enforcement agency. In
order to prevent the key escrow agent from knowing the se-
cret keys and cleartext messages, we propose that the key
escrow agent holds proxy keys that uses proxy functions
to transform ciphertext corresponding to user keys into ci-
phertext corresponding to the law enforcement agency.
The rest of the paper is structured as follows. The next
chapter presents other projects that studied the notion of
proxy functions. Chapter 3 uses the key escrow scenario to
describe the computational model used to deﬁne the proxy
functions. The next four chapters present the actual unidi-
rectional and bidirectional functions. The paper ends with
some ﬁnal thoughts about learned lessons and ideas for the
future.
2 Related Work
The idea of delegating decryption/signature rights was
previously researched and presented in several papers [16,
15, 3, 22, 21, 4]. The goal of the [16, 15] paper is similar to
ours. In the context of mobile computing, agents should be
able to carry signature functions such that untrusted entities
sign on behalf of a user without knowing his key. However,
the result of signing a message m is a brand new signa-
ture that combines the identities of the original user and
the actual signer. Our schemes differ from theirs in that
that the new signature is identical to the one that would
have been produced by the original delegator. In fact, this
indistinguishability is one of the most important feature of
our schemes. In [3], the RSA-based unidirectional signa-
ture scheme splits the secret key between a client and a
server such that neither is able to create a valid key without
working together. The security proofs rely on the fact that
the server is always trusted, thus obtaining lower levels of
security then the ones we propose here. MacKenzie and
Reiter [22, 21, 20] consider a similar question of two-party
signature generation to the one we consider here. However,
their solutions, especially [22] are highly complex and in-
teractive as compared to the notion of unidirectional proxy
signatures we propose here (they also have a slightly more
sophisticated scenario, where the user has a personal pass-
word in addition to the split secret key).
As mentioned, the most closely related work is that of
Blaze and Strauss [4] who introduce the notions of bidi-
rectional decryption and bidirectional signature. However,
lack of proper deﬁnitions makes them consider only the
question of changing the existing encryption or signature
schemes (like ElGamal encryption or Fiat-Shamir signa-
ture [11]) into a corresponding proxy primitive, instead of
looking at the abstract problem itself. As the result, they
provide very limited schemes satisfying very weak (semi-
formally stated) security properties. We contribute to this
work by clarifying and precisely deﬁning the problems at
hand (i.e., presenting formal deﬁnitions for all bidirectional
and unidirectional proxy functions and their security guar-
antees), and describe generic as well as speciﬁc schemes
for both encryption and signature proxy functions.
We brieﬂy consider extensions to the multi-user set-
ting, and use recent results from identity based cryptogra-
phy [26, 5] to improve the efﬁciency in this setting. In addi-
tion, we adapt the key-insulated model presented in [9, 10]
to create ofﬂine bidirectional schemes that do not require
the proxy agent P to continuously assist the law enforce-
ment agency F.
The unidirectional and bidirectional primitives can be
considered as special cases of general threshold cryptog-
raphy [6, 8]. However, most threshold systems assume a
honest majority and work only for n (cid:21) 3. Thus, many
threshold techniques cannot be applied to a two-party set-
ting. Recently, people have considered two-party primi-
tives in a multi-round setting: GQ, Schnorr [24] and DSA
signatures [22], while [19] talks about encryption.
3 Model
For a better understanding and consistency throughout
the rest of the paper, we will explain and use the key escrow
scenario as a model for our deﬁnitions.
The key escrow scenario has four classes of actors: (i)
the general users U who delegate their decryption rights,
(ii) the law enforcement agency F that tries to decrypt ci-
phertexts belonging to the general users, (iii) the proxy
agent P responsible for helping the latter user to decrypt
ciphertexts, and (iv) the legal court that is trusted by ev-
eryone. All users register with the key escrow system by
providing some kind of secret information to the proxy P.
After registration, they are free to send encrypted messages
to each other. Whenever the law enforcement agency wants
to eavesdrop on the communication between two users, it
asks the legal court for a warrant. The legal court creates
a time-bounded warrant and gives it to the proxy agent.
Then, the proxy agent helps the law enforcement agency
to decrypt the ciphertexts belonging to the speciﬁed users
and period of time. In our model, we will disregard the last
actor, because the legal court is not directly involved in the
cryptographic part of the protocol.
The next paragraphs informally deﬁne the bidirectional
and unidirectional proxy functions for encryption and sig-
nature generation and explain how they can be easily used
to construct key escrow systems.
Unidirectional encryption proxy function. A unidirec-
tional encryption proxy function is deﬁned as a tuple E =
(UniGen, UniEnc, UniDec, PDec, FDec). The key gener-
ation algorithm UniGen generates keys for every general
user U. Then, for each user U, it generates two more keys
for the proxy P and the user F. The general users encrypt
cleartext messages using the UniEnc algorithm and decrypt
them using the UniDec algorithm. Whenever the user F
wants to decrypt a ciphertext e, it asks the proxy P for help.
The proxy P uses PDec to transform the ciphertext e into a
different ciphertext e0 and sends it to the user F. The user F
applies the FDec function to the received ciphertext e0 and
gets the original cleartext m.
Unidirectional signature proxy function. An unidirec-
tional signature proxy function is deﬁned as a tuple S =
(UniGen, UniSig, UniVer, PSig, FSig). As in the unidirec-
tional encryption case, the key generation algorithm gen-
erates keys for every general user U. Then, for each user
U, it generates two more keys for the proxy P and the user
F. The general users sign messages using the UniSig algo-
rithm and verify them using the UniVer algorithm. When-
ever the user F wants to sign a message m on behalf of a
certain user U, it asks the proxy P for help. First, the user F
uses FSig to generate a partial signature of the message m.
The proxy P transforms the partial signature into a valid
signature by applying the PSig on the partial signature.
Bidirectional encryption proxy function. A bidirec-
tional encryption function is deﬁned as a tuple E = (BiGen,
BiEnc, BiDec, (cid:5)). The key generation algorithm BiGen
creates keys for all users in the system, including the user
F. For each pair of keys (kU; kF), the BiGen algorithm gen-
erates a bidirectional key (cid:25). The general users U encrypt
messages using BiEnc and decrypt them using BiDec. In
order to decrypt a ciphertext belonging to a general user U,
the user F asks the proxy P for help. The proxy P uses
the bidirectional function (cid:5) and the bidirectional key (cid:25) to