1 ]), ⊥, sA, sB
On the other hand Bob cannot redeem Compute 1, as the
condition f (sA, sB) = B evaluates to false. Symmetrically:
if f (sA, sB) = B then only Bob can redeem Compute 1 by an
analogous transaction ClaimMoney B
1 .
This protocol is obviously correct. It may also look secure,
as it is essentially identical to Blum’s protocol described at
the beginning of this section (with the hash functions used
as the commitment schemes). Unfortunately, it suffers from
the following problem:
there is no way to guarantee that
the parties always send sA and sB. In particular: one party,
say, Bob, can refuse to send sB after he learned that he lost
(i.e. that f (sA, sB) = A). As his money is already “gone”
(his transaction PutMoney B
1 has already been redeemed in
transaction Compute 1) he would do it just because of sheer
nastiness. Unfortunately in a purely peer-to-peer environment,
with no concept of a “reputation”, such behavior can happen,
and there is no way to punish it.
This is exactly why we need to use the Bitcoin-based
commitment scheme from Section III. Later, in Section V we
also present another technique for dealing with this problem,
which avoids using the deposits. Unfortunately, it suffers from
certain shortcomings. First of all, it works only for two parties.
Secondly, and more importantly, to achieve full security it
needs an assumption that an adversary cannot see transactions
until they appear on the Ledger.
2) The secure version of the scheme: The general idea
behind the secure MultiPlayersLottery protocol is that each
party ﬁrst commits to her inputs using the CS(C, d, t, s) com-
mitment scheme, instead of the standard commitment scheme
(the parameters d and t will be determined later). Recall that
the CS commitment scheme can be opened by sending a value
s, and this opening is veriﬁed by checking that s hashes to
a value h sent by the committer in the commitment phase.
So, Alice executes the CS protocol acting as the committer
and Bob as a recipient (note that there is only one recipient
and hence n = 1). Let sA and hA be the variables s and h
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
PutMoney 1(in: T 1)
([PutMoney 1])
in-script: sigP1
out-script(body, σ):
ver (cid:2)P1
val: 1 B
(body, σ)
. . .
PutMoney i(in: T i)
([PutMoney i])
in-script: sigPi
out-script(body, σ):
ver (cid:2)Pi
val: 1 B
(body, σ)
. . .
1 B
PutMoney N (in: T N )
([PutMoney N ])
in-script: sigPN
out-script(body, σ):
ver (cid:2)PN
val: 1 B
(body, σ)
1 B
. . .
Compute N (in: . . . , PutMoney i, . . .)
in-script:
sig (cid:2)Pi
([Compute N ])
1 B
. . .
out-script(body, σ, ˆs1, ˆs2, . . . , ˆsN ):
ˆs1, ˆs2, . . . , ˆsN ∈ SN
k ∧
H(ˆs1) = h1 ∧ . . . ∧ H(ˆsN ) = hN ∧ verf (ˆs1,...,ˆsN )(body, σ)
val: N B
N B
N B
N B
ClaimMoney
1(in: Compute N )
([ClaimMoney
in-script:
sig (cid:2)P1
out-script(body, σ): verP1
val: N B
1]), s1, . . . sN
(body, σ)
. . .
ClaimMoney
i(in: Compute N )
([ClaimMoney
in-script:
sig (cid:2)Pi
out-script(body, σ): verPi
val: N B
i]), s1, . . . sN
(body, σ)
. . .
ClaimMoney
N (in: Compute N )
([ClaimMoney
in-script:
sig (cid:2)PN
out-script(body, σ): verPN
val: N B
N ]), s1, . . . sN
(body, σ)
Pre-condition:
Initialization phase:
1) For each i, player Pi holds a pair of keys (Pi.sk , Pi.pk ).
2) For each i, the Ledger contains a standard transaction T i that has value 1 B and whose recipient is Pi. The Ledger contains also the transactions
j}, for i, j ∈ {1, . . . , N} and i (cid:9)= j, such that each U i
j can be redeemed by P i and has value d = N B.
{U i
inputs.
Deposits phase:
k (with uniformly random length).
3) For each i, player Pi generates a pair of keys ( (cid:2)Pi.sk , (cid:2)Pi.pk ) and sends his public key (cid:2)Pi.pk to all other players.
4) For each i, player Pi chooses his secret si from SN
5) Let t be the current time. For each i, the commitment phase CS.Commit(Pi, d, t + 4 · maxLedger, si) is executed using the transactions {U i
6) If any two commitments of different players are equal (i.e. hi = hj for i (cid:9)= j) then the players abort the protocol18.
7) For each i, player Pi puts the transaction PutMoney i to the Ledger. The players halt if any of those transactions did not appear on the Ledger before
8) For each i ≥ 2, player Pi computes his signature on the transaction Compute N and sends it to the player P1.
9) Player P1 puts all received signatures (and his own) into inputs of transaction Compute N and puts it to the Ledger. If Compute N did not appear
on the Ledger in time t + 3 · maxLedger, then the players halt.
10) For each i, the player Pi puts his Open transactions on the Ledger what reveals his secret and sends back to him the deposits he made during the
executions of CS protocol from Step. 5. If some player did not reveal his secret in time t + 4 · maxLedger, then other players send the appropriate
PayDeposit transactions from that player CS protocols to the Ledger to get N B.
time t + 2 · maxLedger.
Execution phase:
j} as
11) The player, that is the winner (i.e. Pf (s1,...,sN )), gets the pot by sending the transaction ClaimMoney
f (s1,...,sN ) to the Ledger.
Fig. 2. The MultiPlayersLottery protocol.
that
created this way. Symmetrically: Bob executes the CS protocol
acting as the committer, and Alice being the recipient, and the
corresponding variables are sB and hB. Once both commitment
phases are executed successfully (recall
this includes
receiving by each party the signed PayDeposit transaction),
the parties proceed to the next steps, which are exactly as
before: ﬁrst, each of them posts his transaction PutMoney on
the Ledger. Once all these transactions appear on the Ledger
they create the Compute 2 transaction (in the same way as
before), and once it appears on the Ledger they open the
commitments. The only difference is obviously that, since they
used the CS commitment scheme, they can now “punish” the
other party if she did not open her commitment by executing
PayDeposit after the time t passes, and claim her deposit. On
the other hand: each honest party is always guaranteed to get
her deposit back, hence she does not risk anything investing
this money at the beginning of the protocol.
It is straightforward how to extend this protocol for any
number of players. The more detailed description is presented
on Figure 2 (page 11).
We also need to comment about the choice of the param-
eters t and d. First, it easy to see that the maximum time in
which the honest parties will complete the protocol is at most
4·maxLedger after time t(cid:3) — the time when the protocol started.
Hence we can safely set t := t(cid:3) + 4 · maxLedger.
The parameter d should be chosen in such a way that
it will fully compensate to each party the fact that a player
18We would like to thank Iddo Bentov and Ranjit Kumaresan for pointing
out this step. It protects from the copy attack: e.g. in case of two players
lottery P1 waits until P2 commits with his hash h2 and then commits with
the same hash. During the opening phase P1 again waits until P2 reveals his
secret s2 and reveals the same secret. By doing this he always wins since
f (s2, s2) = P1.
453
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
aborted. Let us now calculate the payoff of some ﬁxed player
P1, say, assuming the worst-case scenario, which is as that
(a) the protocol is always aborted when P1 is about to win,
is paid
and (b) there is only one “aborting party” (so Pi
only one deposit). Hence his expected payoff is − N−1
N B
(this corresponds to the case when he lost) plus d−1
N B (the
case when the protocol was aborted). Therefore to make the
expected value equal to 0 we need to set d = N B. This implies
that the total amount of money invested in deposit by each
player has to be equal to N (N − 1) B. In real-life this would
be ok probably for small groups N = 2, 3, but not for the
larger ones.
We now have the following lemma, whose proof will
appear in the extended version of this paper.
Lemma 2: The MultiPlayersLottery protocol from Figure
2 is a fair lottery protocol for d = N B and t = t(cid:3) + 4 ·
maxLedger, where t(cid:3) is the starting time of the protocol.
V. TWO-PARTY LOTTERY SECURE IN A STRONGER MODEL
In this section we show a construction of a two-party lottery
which avoids using the deposits, and hence may be useful
for applications where the parties are not willing to invest
extra money in the execution of the protocol. The drawback
of the protocol presented in this section is that it works only
for two parties. Moreover, to achieve full security it needs
an assumption that the channel between the parties and the
Ledger is private, what means that the adversary cannot see
the transactions sent by the honest user, before they appear
on the Ledger. In reality Bitcoin transactions are broadcast via
a peer-to-peer network, so it is relatively easy to eavesdrop
the transactions waiting to be posted on the Ledger. Another
problem related to eavesdropping is malleability of transaction
(already described in Section II-B). Recall, that the problem
is that an adversary can modify (“maul”) the transaction T
eavesdropped in the network in such a way that the modiﬁed
transaction is semantically equivalent to the original one, but it
has a different hash. Then, the adversary can send the modiﬁed
version of T to the Ledger and if he is lucky it will be posted
on the Ledger and invalidate the original transaction T (its
input will be already redeemed). Hence, e.g., the transactions
that were created to redeem T will not be able to do it (as the
hash of the transaction is different). In order to be secure for
the protocol presented in this section, we need to assume that
such attacks are impossible. Technically, we do it by assuming
that the channel from each party to the Ledger is private. The
protocols secure in this model will be called secure under
private channel assumption.
To explain our protocol let us go to the point in Section
IV where it turned out that we need the Bitcoin commitment
schemes. Recall
the protocol from
Section IV-A2 is not secure against a “nasty behavior” of
the party that, after realizing that she lost, simply quits the
protocol.
that we observed that
3) An alternative (and slightly ﬂawed) idea for a ﬁx:
Suppose for a moment we are only interested in security
against the “nasty Bob”. Our method is to force him to reveal
sB simultaneously with Compute 1 being posted on the Ledger,
by requiring that sB is a part of Compute 1. More concretely
this is done as follows. Recall that in our initial protocol
we said that Compute 1 is created and posted on the Ledger
by “one of the parties”. This was ok since the protocol was
completely symmetric for A and B. In our new solution we
break this symmetry by modifying the Compute 1 transaction
(this new version will be denoted Compute 2) and designing
the protocol in such a way that Compute 2 will be always
posted on the Ledger by B. First of all, however, we redeﬁne
the PutMoney B
1 transaction that B posts on the Ledger at the
beginning of the protocol. The modiﬁed transaction is denoted
PutMoney B
2 .
PutMoney B
2 (in: T B)
in-script: sigB
([PutMoney B
out-script(body, σ, ˆs): ver (cid:2)B
val: 1 B
2 ])
(body, σ) ∧ ˆs ∈ S2
k ∧ H(ˆs) = hB
The only difference compared to PutMoney B
1 is the addition
k ∧ (H(ˆs) = hB)” part. This trick forces Bob
of the “∧ ˆs ∈ S 2
to reveal the pre-image of hB (which has to be equal to sB)
whenever he redeems PutMoney B
2 .
The transaction PutMoney A
1
i.e.:
PutMoney A
1 . Clearly players can still redeem
their transactions later in case they discover that the other
player is cheating. Transaction Compute 2 is the same as
Compute 1, except that sB is added to the input script for the
second input transaction:
remains unchanged,
2 := PutMoney A
Compute 2(in: PutMoney A
2 , PutMoney B
2 )
in-script2: sig (cid:2)B
([Compute 2]), sB
in-script1: sig (cid:2)A
([Compute 2])
out-script(body, σ1, σ2, ˆsA, ˆsB):
(ˆsA, ˆsB ∈ S2
∧ f (ˆsA, ˆsB) = A ∧ ver (cid:2)A
(ˆsA, ˆsB ∈ S2
∧ f (ˆsA, ˆsB) = B ∧ ver (cid:2)B
val: 2 B
k ∧ H(ˆsA) = hA ∧ H(ˆsB) = hB
(body, σ1)) ∨
k ∧ H(ˆsA) = hA ∧ H(ˆsB) = hB
(body, σ2))
2 and PutMoney B
The parties post their PutMoney 2 transactions on the Ledger
and construct transaction Compute 2 in the following way.
First, observe that both parties can easily construct the body
of Compute 2 themselves, as all the information needed for
this is: the transactions PutMoney A
2 and the
hashes of sA and sB, which are all publicly available. Hence the