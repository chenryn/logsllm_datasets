title:POSTER: A Password-based Authentication by Splitting Roles of
User Interface
author:JungSeung Lee and
Han Park and
GyeongYong Bang and
JooSeok Song
CHAPTER 4
Password-Based 
Authentication
Among today’s factors and methods of authentication, the something-you-know factor, 
more specifically password, is the most commonly used. It remains the main method 
for proving user’s identity for email accounts, Internet banking accounts, and other 
online services. This is understandable given the fact that every user is only required 
to remember their password, instead of having to carry an authentication token or an 
additional smart card.
Apart from its convenience, another reason that the something-you-know factor is 
favored by many systems and services is because of its simplicity. The most basic setup is 
where a supplicant would like to authenticate themselves to the authenticator. Assuming 
that they both share the knowledge of the password (normally, the supplicant sends it to 
the authenticator during the registration process), the exchanges of messages in a basic 
password-based authentication mechanism are as follows:
Supplicant
®
Authenticator
®
Authenticator Supplican sID PasswordSupplicant
’
:
,
Supplicant Authentication Succeeded or Faile
:
dd  
This is, as mentioned, the most basic setting of the password-based authentication 
protocol. Other more secure variations have been proposed and will be explained in this 
chapter. Having said that, because of its simplicity, it has become a mechanism of choice 
of many systems, services, and protocols.
Due to its popularity in being the main authentication method, it is important to 
understand how to securely choose and store passwords in such a way that it can prevent 
attackers from cracking the users’ passwords. This chapter discusses many aspects of 
password security, starting from a way to generate a secure password to ways to securely 
© Sirapat Boonkrong 2021 
S. Boonkrong, Authentication and Access Control, https://doi.org/10.1007/978-1-4842-6570-3_4
71
Chapter 4 
 password-Based authentiCation
store a password. Moreover, other existing variations of passwords will be illustrated. It 
will be explained that the most commonly used method for storing passwords today, that 
is, MD5 or SHA-1 hashing, may not be the best solution. Thus, better solutions in salting 
passwords and dynamic salting and placement are introduced.
 Passwords
Password, as already suggested, is the most popular authentication method in 
computing today. That is why we feel that there is a need to discuss passwords in detail.
Before going any further, let us briefly establish here what an ideal password should 
be. On the whole, it has been suggested that an ideal password should be something that 
a user can remember, something that a computer can verify, and something that nobody 
else can guess. This sounds easy, but is difficult to achieve. The problem with passwords 
nowadays is that people tend to choose “bad” passwords. These are the passwords 
that are easy to “crack.” What is the solution to this? One solution is to use randomly 
generated cryptographic keys. This would make the work of cracking a password 
equivalent to the work of a brute force or exhaustive key search. Does using randomly 
generated cryptographic keys for passwords sound plausible? Let us compare keys and 
passwords.
 Keys vs. Passwords
Suppose an attacker Trudy is confronted with a 64-bit cryptographic key. That means 
there are possible 264 keys in total; thus, on average, Trudy must try 263 keys before 
finding the correct one.
This time, suppose Trudy is confronted with an eight-character password. Each 
character is 8 bits long, which means there are 256 possible choices for each character. 
Therefore, the total number of possible passwords is 2568 = 264 passwords. The number 
appears to be equivalent to the exhaustive key search problem. But, is it really?
One issue with passwords is that users do not select passwords at random. The 
reason is because they have to remember it. For example, users are more likely to 
choose an eight-character password as password, rather than something random like 
s9@KOpwA. The implication of this is that clever attackers would make far fewer than 
263 guesses before getting the correct password. In other words, the actual number 
of passwords is far fewer than the number of keys of the same size. The majority of 
72
Chapter 4 
 password-Based authentiCation
randomly generated passwords is not taken into account since they are not used anyway. 
It could, therefore, be claimed that the nonrandomness of passwords reduces the 
amount of work carried out by attackers to crack a password and is also at the root of 
many of the most serious problems with passwords.
 Choosing a Password
It has been mentioned that weak or bad passwords create problems with security. 
Examples of bad passwords include “Alice”, “Doraemon”, “09111979”, and “JohnSmith”. 
The first password sample, “Alice”, is just a name of a user. This would be a very easy 
guess. The second password, “Doraemon”, would also be easy to guess if anyone knows 
that the user is a fan of Doraemon, a popular Japanese cat robot. The third is just the 
user’s date of birth, and the fourth contains a first name and a surname of the user. It is 
clear that all of these examples are weak passwords, because they are not difficult for 
attackers or anyone to guess.
Authentication can be thought of as the first line of defense of a network or a system. 
That means security can be said to rest on passwords as a main authentication method. 
Therefore, passwords should be difficult to crack and easy for users to remember. 
Examples of a better password include “sHJiLJM50Emim”, “876261400154”, “D0raem0n”, 
and “IaratTKb”. Let us analyze each one in turn to see whether it fits our criteria for good 
passwords: easy to remember and difficult to guess.
The first password, “sHJiLJM50Emim”, appears to be random, which makes it 
very difficult to guess. However, it is not easy to remember. The second password, 
“876261400154”, consists of 13 digits. This seems difficult to guess, but also difficult to 
remember. It has been documented that well-trained military personnel are only able to 
memorize up to 12 digits. That means for regular users, it is near impossible to memorize 
that many random digits. The third password, “D0raem0n”, looks a good password due 
to the mixture of letters and numbers. However, this may not be the case, because if 
anyone knows that the user is a fan of Doraemon, they could try to make a guess. The 
fourth example, “IaratTKb”, is difficult to guess. It is also very easy to remember, even 
though the password appears to be random. This fourth example of password is made by 
a password creation method known as a passphrase.
A passphrase is a series of characters derived from a set of words or a sentence. 
One way to generate a passphrase is that a user thinks of their favorite sentence, then 
takes the first letter of each word, and puts them together. For example, a user’s favorite 
73
Chapter 4 
 password-Based authentiCation
sentence might be “I adore reading all the Three Kingdoms books.” Taking the first letter 
of each word, the passphrase formed from this sentence would be “IaratTKb”. Users do 
not actually have to take the first letter of each word. Any letter can be used, but taking 
the first letters would be the easiest to remember.
Passphrases are said to be the source of the better passwords that should be used. 
The following widely published and well-known password experiment confirms this 
claim. The experiment divides people into three groups. Group A selects passwords 
consisting of at least six characters, with at least one non-letter. Group B selects 
passwords based on passphrases. Group C selects passwords consisting of eight 
randomly selected characters. The aim of the experiment is for the experimenters to 
crack those chosen passwords, and the results are as follows: In Group A, about 30% 
of passwords are easy to crack, and users find their passwords easy to remember. In 
Group B, about 10% of the passwords are cracked, and users find their passwords easy 
to remember. In Group C, about 10% of the passwords are cracked, but users find their 
passwords difficult to remember. From the password experiment, it is clear to see that 
passphrases provide the best option for passwords. This is because they are difficult to 
crack, yet easy to remember.
 Quality of a Password
In theory, however, it is possible to measure the quality of a password using what is 
known as password quality indicator or PQI. Before going into the detail of PQI, it is 
necessary to reemphasize that when an adversary attacks a password, they simply try 
different combinations until a match to the correct password is found. The strategy that 
can be applied by an attacker is to try commonly used passwords before trying to brute 
force all combinations of password candidates. In other words, a likely path followed by 
a password attacker could be in the order of
•  Trying regular dictionary words
•  Trying passwords in password dictionary
•  Trying one or two variations of characters in the regular dictionary 
words
•  Trying all possible combinations of lower case letters, upper case 
letters, and digits based on words in the regular dictionary
•  Brute forcing all possible combinations of password candidates
74
Chapter 4 
 password-Based authentiCation
On the whole, the quality of a password depends on how long it takes to find the 
correct match of that particular password. The longer it takes, the better the quality of 
the password is. Therefore, it is claimed that the quality of a password can be measured 
by how different it is from a dictionary word, how long it is, and how big the password 
character set is.
One method for measuring the difference between two strings is to use Levenshtein’s 
editing distance. This method practically counts the number of single character 
manipulations – insertion, deletion, or modification – needed to make the two strings 
the same. For example, the distance between “bat” and “cat” is 1, and the distance 
between “net” and “bat” is 2. This means that how different a password is from words 
from the dictionary can be measured by checking Levenshtein’s editing distance.
The second factor of the quality of a password is how long it is. The length of a 
password is basically the number of characters contained in the password. It is believed 
that the length of a password is the key in deciding how long it takes to crack it.
Thirdly, it is necessary to understand that a password is made of different characters 
from different character groups or character sets. It is well documented that printable 
characters can be divided into four groups, which are
•  Group 1 contains 26 lower case letters:
abcdefghijklmnopqrstuvwxyz
•  Group 2 contains 26 upper case letters:
ABCDEFGHIJKLMNOPQRSTUVWXYZ
•  Group 3 contains 10-digit characters:
0123456789
•  Group 4 contains 31 special characters:
∼!@ $ # %ˆ& ∗ ( ) _ - + = { } | [ ] \ : “  ? ; ’ , . /
Therefore, in order to measure the character sets used in a password, the password 
complexity index or PCI has been proposed. In detail, the values of 26 is assigned to 
Group 1, 26 is assigned to Group 2, 10 is assigned to Group 3, and 31 is assigned to  
Group 4. This means that if a password contains a character from Group 1, the value of 26 
is added to this password’s PCI. If a password also contains a character from Group 4, 31 
will be added to its PCI, and so on. However, the value of each Group is only added once. 
In other words, if the characters of a password are only drawn from Group 3, such as 
75
Chapter 4 
 password-Based authentiCation
“12345”, its PCI value will only be 10. In addition, if a password contains only characters 
from the same group, it is said that the password has the Standard Password Format. A 
password is said to be in the standard format if it has the PCI value of 10. For example, 
“12345”, “987654”, and “234982734” are in the standard format. However, “ab12345”, 
987654xy”, and “12+34aB” are not.
Using the preceding information, the effective length of a password can be calculated 
as follows: Suppose a password has the PCI value c and length m. The number of all 
possible password combinations of the same format is cm. This implies, for example, 
that it is possible to find the length (L) of all possible passwords in the standard format, 
which has the PCI value of 10. That is, the equation cm = 10L is obtained. L can, therefore, 
be calculated by the equation L = m ∗ log10c. Here, L is known as an effective length of a 
password. For example, the effective lengths of the passwords “abcdefghi” and “A$b8” 
are 12.34 and 7.88, respectively.
What this tells us is that the password quality indicator or PQI can be defined as 
a pair of (D, L), where D is the Levenshtein editing distance of the password to the 
dictionary words and L is the effective password length. It has been found that when 
D ≥ 3 and L ≥ 14, a password is considered a good password. As we know, D ≥ 3 means 
the password is at least three characters different from the dictionary words, and L ≥ 14 
means that there are at least 1014 possible combinations of passwords to be tried to crack.
Apart from the preceding method, which can be used to measure the quality of a 
password, the probability of a password being cracked can also be analyzed as follows: 
Let L be the length of time a password is valid, G be the number of password guesses 
possible in one second, A be the number of possible characters in each password 
position, M be the password length, and P be the password space, which is calculated 
by P = MA. The probability or the likelihood N that a password can be cracked is, thus, 
calculated by N = (L ∗ G)/P.
For example, let us assume that a password is valid (L) for the length of 30 days 
or 2,592,000 seconds and the number of password guesses (G) that can be made in 1 
second is 100,000,000 guesses, using an ordinary computer. Thirdly, the number of 
possible characters in each password position (A) is 93, which comes from the 4 possible 
character groups stated previously. Fourthly, the password length is 8. This means that 
P = 893. Therefore, the probability of the likelihood (N) that the password will be cracked 
is N = (2,592, 000 ∗ 100,000, 000)/893 = 2.67 ∗ 10−70.
This section explains issues with the way users choose their passwords and 
recommends a simple method for selecting a better password. Once a password is 
76
Chapter 4 
 password-Based authentiCation
chosen, the quality of the password can also be examined using a couple of methods, as 
explained. After a password has been selected, the next step is to securely store it. Next 
section provides explanation and analyses of different password storing methods.
 Storing Passwords
In the past few years, a number of high-profile companies have seen their passwords 
leaked to the online public even though a lot of efforts have been put into protecting 
them. Unfortunately, disclosure of password databases is one of the main aims of 
hackers’ community. Therefore, it is important to understand how passwords can be 
stored and what each storing method means for the security of passwords. Let us go 
through and analyze each method in turn.
 Plaintext Passwords
The most basic way that a password can be stored is in plaintext. This means that in a 
password file or a password database, usernames and passwords are stored in a  
human- readable form. That is, if a password is testpassword, it is also stored in a 
database as testpassword. When a user enters their username and password, the system 
checks them against the database to see if they match.
This is the worst possible method for storing passwords, in security context. Most 
reputable systems and websites do not store passwords in their plaintext form. This is 
because if the password database is obtained or accessed by an attacker, everybody’s 
passwords are immediately known and compromised.
 Encrypted Passwords
In order to reduce the risk of passwords being exposed as plaintext, some systems and 
websites have adopted encryption as their solution. Encryption, as a reminder, uses a 
secret key to transform a plaintext password into a random string of text or ciphertext. 
This means that if an adversary were to get hold of a password database, they would not 
be able to see what the real passwords are. Only passwords in ciphertext format would 
be seen. The adversary would need to have the secret key to decrypt them. This does not 
sound so bad, does it? An example of how passwords are stored in encrypted format is 
illustrated in Table 4-1.
77
Chapter 4 
 password-Based authentiCation
Table 4-1.  Examples of Encrypted Passwords
Password
Encrypted Password
admin
password
superman
d0raem0n
MtFbwY
C18a9e9aa6aBa7C3d188F944FC78e99e
e00460Fd7eB0917d9Ba8C9F35a65FFBC
0BBCd954C56B60CC494925Bee1d3C758
BeF5edC17F05de6B3C9e9FCBCBB2Fa21
Fa624063C11e1e2dB37646aF727eB066
There are several issues with this method. The first is the type of cryptography to be 
used. Would symmetric cryptography or asymmetric cryptography be more suitable? 
If symmetric cryptography were to be used, how many keys would be required? Would 
one key be used for all entries, or would a different key be used for each entry? If one 
key were used to encrypt all passwords and an attacker were able to get hold of the key, 
all records would be compromised. If one key were used for each entry and there were 
thousands of records, key storage would create another problem. This is, therefore, a key 
management problem. On the other hand, if asymmetric cryptography were to be used, 
efficiency of computation would be something to consider.
Another problem with this method is that the secret key, both symmetric and private 
key, is often overlooked and stored on the same machine or server that stores passwords. 
What happens if the server gets hacked? The hacker would not have to do much work to 