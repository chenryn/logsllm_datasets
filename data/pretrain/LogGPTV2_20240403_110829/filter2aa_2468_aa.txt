针对智能设备漏洞挖掘的
一些新方法
小灰灰
百度安全实验室 高级安全研究员
30-May2019
2
关于我
百度安全实验室 高级安全研究员
研究领域：IoT安全/AI安全/无人车安全
多次破解硬件设备
之前负责：
• BSRC、应急处置、0day分析
• 百度产品 安全评估
• 百度安全监控体系建设
传统IOT设备的破解
路由器？
固件下载
Binwalk解包
找到有问题的bin（why？）
IDA分析、WEB 脚本文件分析
漏洞验证（真机or QEMU测试）
大多数 好像都是漏洞分析
现在？
IOT设备越来越多种多样，
not only 路由器
大厂也不会让你轻易破解
•
固件不提供下载
•
telnet、串口、ADB都关闭
•
甚至都无从下手
怎么办？？？
似乎有着相似的结构
操作系
统及
硬件
完整的Android、Linux
发行版，
ARMv5/6/7/x86处理器
EMMC/EMCP/NAND存
储存储
Openwrt、精简内核的
Linux，ARM、Mips处
理器，NAND/SPI Flash
存储
RTOS实时、精简内核的
Linux，ESP乐鑫、
Arduion片上系统、AVR、
STM32系列，SPI Flash存
储
应用场
景
智能音箱、智能手表、
自动售货机、电视盒子、
智能电视、智能广告牌、
车机
路由器、mini版智能音
箱、智能摄像头
智能门锁、智能电饭煲、
智能插座、智能灯、智能
手环
特点
较多功能、较大的存储、
易于开发APP的载体、
大多有大屏幕
单一但高级功能、无需
屏幕展示内容or小尺寸
屏幕
功能单一简单但大多有通
过网络进行简单控制，模
拟电路无法实现
第0步：拆！
做到心中有数，减少弯路
• 有没有搞头，用了哪些芯片解决方案
• 没有思路时 哪些地方还可以搞
搜索芯片型号信息、datasheet
重点关注：
• 存储类型及规格
• SPI Flash 8/16/宽窄
• EMMC/EMCP 100/153/162/169/186/221/254
• NandFlash TSOP32/40/48
• TTL及JTAG接口（如何寻找）
• 通信模块（以太、蓝牙、wifi、234G）
图片来自：https://www.crowdsupply.com/teardown/portland-2018
云拆解--寻找攻击目标的好方法
Google xxx teardown
论坛（拆客论坛）
Ifixit.com
• 包含著名厂商硬件设备
• 图片清晰、标注
Fccid.io
• 所有带有无线功能、在国外发行的设备
• 种类繁多
• 技巧：搜索 site:fccid.io internal photos xxx
特斯拉钥匙使用的主控-在fccid.io网站上搜索到
Kindle Fire 的存储结构-在ifixit网站上搜索到
第一步 准备工作：随心所欲的控制、获取
控制&获取
• 获取文件系统
• Getshell （更方便的分析，查看网络、文件、进程）
• 获取、控制网络数据
最终根据这些已有内容，进行综合分析，寻找有效漏洞
Tips：并没有完全的先后顺序，同步穿插进行
• 例如getshell后直接就可以获取固件了，或者dump获取固件进行修改后便getshell了
• 例如获取交互数据，可以拿到升级连接，直接获取固件下载地址
准备工作-获取固件
目的：
• 了解OS 及文件系统结构，关注关键目录（/etc /home /usr/bin …,如果是Android, /system/priv-
app）
• 分析启动脚本（/etc/inittab /etc/init.d)，加载的二进制文件以及配置文件
• 分析web目录文件（CGI、PHP、Lua…..）
• 方便恢复到老版本系统（例如开启了telnet），分析更方便
• 固件也可能是新版本APK，逆向分析之
• Chroot到对应处理器的QEMU，方便分析二进制&web
准备工作-获取固件
方法：
• 官网下载
• 自升级，监听数据包（如果查询版本，需要截取修改低版本。特殊信道）
• 升级app逆向分析，升级流程逆向分析（访问ftp）
• 求助论坛、好心网友（行业维修论坛）
• 万能的客服（帮忙救砖）
• 获取shell（telnet、ssh、adb…），dump 固件（dd、tar，nc转出）
• 进入BootLoader 读取存储器
• 特殊主控读取方式（例如MTK、NXP系列，可以通过数据线口获取/刷写文件系统）
But，有时这些都不奏效
物理Dump
当常规方法无法轻易获取固件
• 大厂设备固件都是加密的，binwalk等无法解开
• 没有固件升级流程，固件写死不变
• 固件通过GPRS升级，无法干预（实际我们可以干预☺）
• TTL关闭、telnet关闭、BootLoader无法停止进入
那么就开拆，物理dump
• 针对不同型号，采取不同读取方式
• 步骤：
• 选择读取设备、方式（在线 or 离线）
• 对固件进行处理
物理Dump-SPI Flash
针对SPI Flash（对应简单设备、路由设备）
• 串行读写设备，常见容量4/8/16MB，8针脚 SPI接口
• 结构：
• 完整操作系统：Bootloader+内核+文件系统，大多采用压缩
• 仅仅存储数据、配置文件等
• 读写方法：
• Arduino+EEPROM 库
• Raspberry SPI接口+ flashrom
• 编程器读取更快捷（RT809H）
• 免拆焊（勾针、夹子），但有时不奏效（CPU被加电），建议拆下来
• 可直接修改固件、getshell，注意文件结构
• 文件系统、偏移：启动信息获取、binwalk获取
• 焊接下来->解包->修改->重打包->dd偏移、合并->刷写回去->焊接回去
物理Dump-SPI Flash-获取文件系统结构
Subtitle (if needed)
通过console信息输出获取
通过shell命令获取
通过binwalk获取
物理Dump-NandFlash
针对NandFlash（对应较复杂设备例如高级路由、
智能音箱）
• 16MB-2GB容量，TSOP48/BGA封装，按块读写
• 拖焊新手经常出问题，推荐使用热风枪拆焊（注意保护周围元件）
• 结构：完整Linux/Android系统，大多不需要压缩解压
• 读写方法：
• 有效针脚17+ ，需使用编程器读取，例如RT809H
• 有坏块管理，但是管理较低级，写入比较繁琐
坑：获取的bin固件 通常binwalk无法解开，需对binwalk进行修改，
或者去除ECC校验位数据
此类设备处理比SPI Flash和EMMC麻烦，且文件系统格式各家不统
物理Dump-EMMC/EMCP
EMMC与Nand Flash的关系
EMMC=NAND闪存+闪存控制
芯片+标准接口封装
Nand Flash
EMMC
物理Dump-EMMC/EMCP
针对EMMC/EMCP（对应复杂设备例如智能电视、手
机）
可近似理解成SD卡
全部为BGA封装，规格100/153/162/169/186/221（实际这4种占95%）
离线读写：
• 采用热风枪吹焊（注意保护周围元件），专用读取座+编程器or 直接在芯
片上飞线读取
• 焊接采用植锡法，对焊接技术要求高，需要多练习
在线读写（不需要焊接下来）：
• 需要寻找or已知关键焊点，非常细小，焊接要求高（寻找方法？）
• 直接飞线最少DAT0、CMD、CLK、GND、（VCC、VCCQ）到SD读卡器，
不需拆焊，注意需要短接晶振
物理Dump-植锡过程视频
离线读写