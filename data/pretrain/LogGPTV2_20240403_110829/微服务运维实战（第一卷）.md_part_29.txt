版本这里，如图13-3所示。
这样就能在不影响用户的情况下测试新版本，
不可变微服务部署在容器上，如图13-2所示。
不序上
所通路
一旦新版本如我们所期望的一样正常工作之后，就可以更改代理服务配置，
有过由
当准备部署新版本（比如绿色结点）时，我们应与当前版本并行运行新版本。
当前版本（比如蓝色结点）正运行在服务器上。流量通过代理服务到达此处。
变署
的代
应在
用容
程器
都务
图13-3
图13-2不可变微服务部署在容器上
不可变微服务的新版本和旧版本一起部署
微服务
微服务
操作系统
操作系统
数
代理
数据
节点
节
代理
库
库
因为所有的流量仍然被送到了当前
微服务
O
O
部本微与例
署的服第一
13.1
了第务一起
新二实个运
蓝绿部署的流程
版个例实行
221
---
## Page 235
222
第13章蓝绿部署
要做的无非是将旧版本再启动而已。
是先停止运行的选项，一旦新版本出现问题，
了，如图13-5所示，更好的做法是不移除，先停止运行。如果采用不直接移除而
务处理，这样请求就不会被打断，如图13-4所示。
将流量发送到新版本上。大多数代理服务的规则是让现有请求仍然由旧的代理服
当所有发送到旧版本的请求都收到了回应后，
图13-4重新配置代理服务使之指向新版本
微服
微服务
图13-5移除旧版本
务
操作系统
操作系统
数据库
数据
代理
节点
节
代理
点
库
，就可以立即进行回滚，因为我们所
微服务
微服务
服务的当前版本就可以移除
O
O
重理指
新服向
配务新
置使版
代之本
---
## Page 236
13.2
wget https://raw.githubusercontent.com/vfarcic\
wget https://raw.githubusercontent.com/vfarcic\
们接下来描述的工具优势在哪里。
难点、重点。只有在真正理解如何亲手实践它之后，你才能有足够的信息判断我
骤来帮助理解整个过程。接着，我们会采用已经熟悉了的工具来将所有步骤自动
试。我们会考虑这一点，而且不仅限于此。此外，我们会给出可供手动执行的步
蓝绿部署过程更加复杂。大多数实现都没有考虑在更改代理服务之前要先做测
版本，还要保证在不同的阶段都测试完全。与假设一切正常相比，这样会让整个
ansible-playbook/vagrant/ansible/prod2.yml\
vagrant ssh cd
动执行命令行开始，一旦熟悉了它是如何实践的，再尝试将这个流程自动化。
/books-ms/master/nginx-includes.conf
wgethttps://raw.githubusercontent.com/vfarcic\
/books-ms/master/docker-compose.yml
cdbooks-ms
mkdirbooks-ms
化。之所以选择这种方式，是为了保证你能完全掌握持续部署和蓝绿部署结合的
vagrant up cd prod
下面从下载 Docker Compose 和前文用到的 nginx 配置开始。
请注意，我们会在前文的基础上进行蓝绿部署的搭建。不仅要并行运行两个
通常来说，我们需要有两个结点在运行，所以先创建虚拟机。
明白了蓝绿部署背后的基本原理后，现在可以试着自己搭建了。我们先从手
Manually running the blue-green deployment
手动执行蓝绿部署
13.2手动执行蓝绿部署223
---
## Page 237
224
第13章蓝绿部署
Deploying the blue release
部署蓝色版本
docker-compose.yml文件里定义的目标（下面只显示了相关目标）。
本有冲突。由于要用 Docker Compose 运行容器，所以这里先快速过一下刚下载的
现在只需要确定我们要运行的容器名称包含blue 这个词，这样就不会跟下一个版
载Nginx。
注册容器，使用 Nginx 作为代理服务，使用Consul Template 来生成配置文件和重
工具可以派上用场了。我们使用Consul来注册服务，使用Registrator来注册和撤销
/books-ms/master/nginx-upstreams-green.ctmpl
wget https://raw.githubusercontent.com/vfarcic\
extends:
app-green:
app-blue:
links:
environment:
links:
extends:
ports:
image:10.100.198.200:5000/b00ks-ms
- SERVICE_NAME=books-ms-green
environment:
environment:
service:base
-SERVICE_NAME=books-ms-blue
service:base
-SERVICE_NAME=bookS-ms
base:
-db:db
由于此时我们还没有启动books-ms 服务，所以把第一个版本称为蓝色版本。
现在所有的配置文件已经就绪，下面开始配置第一个版本。前文我们提到的
不能直接把app用作目标名，因为我们要为两个颜色部署不同的目标以免彼此
-db:db
8080
---
## Page 238
booksms_db_1
booksms_app-blue_1
Name
curlprod:8500/v1/catalog/service/books-ms-blue\
docker-compose ps
注册在Consul里。
本，如图13-6 所示。为了安全起见，我们快速确认一下服务是否已经运行起来并
docker-composeup-d app-blue
docker-compose pull app-blue
export DoCKER_HOST=tcp://prod:2375
境变量 SERVICE_NAME 设置的不同。
的扩展方式与前文相同。两个目标 app-blue 和 app-green 之间的唯一区别就是环
二的。要达到这个效果，可以将两个目标分别命名为 app-blue 和 app-green。名字
覆盖。我们还想在 Consul 里区分它们，因此环境变量 SERVICE_NAME 应该是独一无
第一个命令的结果显示了 app-blue 和 db 容器都在运行中。第二个命令的结果
"ServiceEnableTagOverride": false
"ServicePort":32768,
"ServiceAddress":"10.100.198.201",
"ServiceTags": [],
"ServiceName":"books-ms-blue",
"ServiceID":"prod:booksms_app-blue_1:8080",
"CreateIndex": 38,
"ModifyIndex": 38,
I jq'.'
"Address":"10.100.198.201",
"Node":"prod",
上述两个命令的输出如下：
我们把最新的版本从镜像库中拉下来，把它部署起来，作为服务的蓝色版
定义了这两个目标之后，就可以开始部署蓝色版本了。
/entrypoint.sh mongod
/run.sh
Command
号
---------
State
27017/tcp
0.0.0.0:32768->8080/tcp
Ports
13.2手动执行蓝绿部署225
---
## Page 239
226
第13章蓝绿部署
Integrating the blue release
集成蓝色版本
upstream books-ms{
Consul里的。
13-6所示。
Connection:keep-alive
Content-Type:text/html
Date:Sun,03 Jan201620:47:59 GMT
Server:nginx/1.9.9
HTTP/1.1404Not Found
curl -I prod/api/v1/books
向服务发送一个请求来确认。
的服务运行起来了，但是还没有与nginx集成，所以，还不能访问到8o端口。可以
Content-Length:168
展示了Consul中注册的books-ms-blue的详细信息。现在，我们已经让第一个版本
{{end}}
server{{.Address}}:{{.Port}};
下面从之前下载过的 nginx Consul 模板 nginx-upstreams-blue.ctmp1开始。
个行将口
可以使用与之前类似的方法来集成服务。唯一的区别是，目标服务是注册在
请求响应是404 Not Found的错误信息，这证明了我们还没有配置代理，如图
结果如下。
容时其发
，地送
器
开注址给
始册和
容器（app-blue）
注册器
图13-6 
容器（数据库）
Consul
部署蓝色容器
节点
代理
配置文件
---
## Page 240
Access-Control-Allow-origin:
Content-Type:application/json;charset=UTF-8
Date:Sun,03 Jan 201620:51:12 GMT
Server: nginx/1.9.9
HTTP/1.12000K
curl -I prod/api/v1/books
docker kill -s HUP nginx
scpnginx-upstreams.conf\
scpnginx-includes.conf\
入密码的问句出现时，设置vagrant 作为密码。
upstream books-ms{
cat nginx-upstreams.conf
consul-template\
upstreams配置。
Content-Length:2
prod:/data/nginx/upstreams/books-ms.conf
prod:/data/nginx/includes/books-ms.conf
server 10.100.198.201:32769;
输出如下。
将两个配置文件复制到服务器上，然后发送 HUP 信号来重启 nginx。
最后要做的就是把配置文件复制到 prod 服务器上，然后重新加载 nginx。当输
输入如下。
这个命令可以用来生成nginx upstrams 配置文件，然后重启服务。
-once
-consul prod:8500\
下面检查服务是否已经和代理集成了。
下面检查配置文件是否正确生成。
服务名字是 books-ms-blue，可以使用 Consul Template 来生成最终的 nginx
13.2手动执行蓝绿部署227
---
## Page 241
228
第13章蓝绿部署
Deploying the green release
部署绿色版本
booksms_db_1
booksms_app-green_1
booksms_app-blue_1
docker-compose ps
docker-compose up -d app-green
docker-composepullapp-green
区别在于，部署的目标是 books-ms-green 而不是 books-ms-blue。
行。
第二个（绿色）版本的方法也差不多。
Consul
每运器端
称
结果如下。
新版本被拉取并运行。可以通过执行 docker-compose ps 命令来确认。
跟之前的部署不太一样，这次，新（绿色）版本会和当前（蓝色）版本一起运
可以使用部署第一个（蓝色）版本的步骤来部署第二个（绿色）版本。唯一的
我们在最简化的场景下完成了第一个（蓝色）版本的部署。下面将会看到部署
基本流程如图13-7所示。
我们看到响应码是 208 0K，这意味着服务确实已经对请求发出了回应。
器
开注