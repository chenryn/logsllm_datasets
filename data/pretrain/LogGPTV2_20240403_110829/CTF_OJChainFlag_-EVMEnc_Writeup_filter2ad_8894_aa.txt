# 区块链CTF OJ平台ChainFlag -EVMEnc Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
[ChainFlag](https://chainflag.org/)是一个区块链主题的CTF
OJ平台，个人感觉现有题目质量很高，值得一做，这里分享下自己做题的过程。
## EVMEnc
###  题目简介
题目提示简单的EVM加密,给了两个附件，info.txt与source.sol,附件如下图所示:
info.txt
    transaction
    1.
    0x81200224..................
    2.
    0xffdd8131000000000000000000000000000000000000000000003100e35e552c1273c959
    sload(0) = 208645382789328542577309
    3.
    0xffdd8131000000000000000000000000000000000000000000001ac3243c9e81ba850045
    sload(0) = 29341064342757093333104
    4.
    0xffdd8131000000000000000000000000000000000000000000005ce6a91010e307946b87
    sload(0) = 227103917449451505785192
    5.
    0xe6dc28ae..................
    sload(3) = 1970527074032043059410457910532573615730510348629701619382
source.sol
    pragma solidity ^0.5.10;
    contract EVMEnc {
        uint public result;
        string public key;
        uint private delta;
        uint public output;
        uint32 public sum;
        uint224 private tmp_sum=0;
        uint32 private key0;
        uint224 private t0=0;
        uint32 private key1;
        uint224  private t1=0;
        uint32 private key2;
        uint224 private  t2=0;
        uint32  private key3;
        uint224 private  t3=0;
        constructor() public {
            delta = 0xb3c6ef3720;
        }
        function Convert(string memory source) public pure returns (uint result) {
            bytes32 tmp;
            assembly {
                tmp := mload(add(source, 32))
            }
            result = uint(tmp) / 0x10000000000000000;
        }
        function set_key(string memory tmp) public {
            key = tmp;
        }
        function cal_(uint x) public {
            uint tmp = Convert(key) / 0x10000000000000000;
            result = tmp % x;
        }
        function Encrypt(string memory flag) public {
            uint tmp = Convert(flag);
            uint key_tmp = Convert(key) / 0x10000000000000000;
            assembly {
                let first,second
                sstore(5, and(shr(96, key_tmp), 0xffffffff))
                sstore(6, and(shr(64, key_tmp), 0xffffffff))
                sstore(7, and(shr(32, key_tmp), 0xffffffff))
                sstore(8, and(key_tmp, 0xffffffff))
                let step := 1
                for { let i := 1 } lt(i, 4) { i := add(i, 1) } {
                    first := and(shr(mul(add(sub(24, mul(i, 8)), 4), 8), tmp), 0xffffffff)
                    second := and(shr(mul(sub(24, mul(i, 8)), 8), tmp), 0xffffffff)
                    sstore(4, 0)
                    for {let j := 0 } lt(j, 32) { j := add(j, 1) } {
                        sstore(4, and(add(and(sload(4), 0xffffffff), shr(5, sload(2))), 0xffffffff))
                        let tmp11 := and(add(and(mul(second, 16), 0xffffffff), and(sload(5), 0xffffffff)), 0xffffffff)
                        let tmp12 := and(add(second, and(sload(4),0xffffffff)), 0xffffffff)
                        let tmp13 := and(add(div(second, 32), and(sload(6),0xffffffff)), 0xffffffff)
                        first := and(add(first, xor(xor(tmp11, tmp12), tmp13)), 0xffffffff)
                        let tmp21 := and(add(and(mul(first, 16), 0xffffffff), and(sload(7),0xffffffff)), 0xffffffff)
                        let tmp22 := and(add(first, and(sload(4),0xffffffff)), 0xffffffff)
                        let tmp23 := and(add(div(first, 32), and(sload(8),0xffffffff)), 0xffffffff)
                        second := and(add(second, xor(xor(tmp21, tmp22), tmp23)), 0xffffffff)
                    }
                    sstore(3, add(sload(3), add(shl(sub(192, mul(step, 32)), first), shl(sub(192, mul(i, 64)), second))))
                    step := add(step, 2)
                }
            }
        }
    }
###  题目分析
题目提供的两个附件source.sol为智能合约源码，info.txt为具体的交易序列，包含了交易的输入数据以及执行后部分存储storage的状态。利用remix编译智能合约，在Compilation
Details中查看Functionhashes如下图所示：
分析info.txt文件，文件给出了5条交易的部分输入信息以及部分执行后的状态。以第一条为例：
    1.
    0x81200224..................
给出了交易发生的输入的前4个字节为0x81200224，交易输入的前4个字节一般对应了调用方法的哈希，后面的输入为调用方法使用的参数，这里调用了方法set_key(string),但是隐去了string参数的的具体内容。
分析第二条交易信息：
    2.
    0xffdd8131000000000000000000000000000000000000000000003100e35e552c1273c959
    sload(0) = 208645382789328542577309
对应交易的方法为cal_(unit256),参数为0x3100e35e552c1273c959。sload(0)返回的是storage[0]的信息，根据合约对应的是全局变量result,意思是执行完交易后，result=208645382789328542577309
对info.txt中的信息继续处理，结果如下所示：
    transaction
    1.set_key(string memory tmp)
    2.cal_(uint 0x3100e35e552c1273c959)
      result = 0x2c2eb0597447608b329d
    3.cal_(uint 0x1ac3243c9e81ba850045)
      result = 0x6369510a41dbcbed870
    4.cal_(uint 0x5ce6a91010e307946b87)
      result = 0x301753fa0827117d1968
    5.Encrypt(string memory flag)
    output =0x505d433947f27742f60b06f350f2583450a1f7221380eeb6
到这里题目的基本要求和大题思路算是比较清楚了，题目算是一个利用solidity语言构造的一个加解密题目，题目设置未知的key值，然后告知调用三次cal_函数的结果，之后要求通过flag加密后的输出求出flag。
下面的重点在于分析cal和encrypt函数，这两个函数的编写加入了内联汇编，汇编指令的理解可以参考[文档](https://solidity-cn.readthedocs.io/zh/develop/assembly.html)，总体而言都是对sotrage、memory以及stack的操作。本人作为一个菜狗子主要通过以下这样的方式来帮助理解，一是通过本地动态调试，题目给出了源码，可以利用remix本地部署并对相关函数进行调试，二是将用python重写函数，这样也方便了后续的解密程序编写。
通过调试可知cal函数可以理解为取余，已知：
     0x2c2eb0597447608b329d = tmp % 0x3100e35e552c1273c959
     0x6369510a41dbcbed870 = tmp % 0x1ac3243c9e81ba850045
     0x301753fa0827117d1968 = tmp % 0x5ce6a91010e307946b87
求解取余方程可以利用中国剩余定理，具体实现附在最后。
求出了tmp后，分析Encrypt函数，先看循环前的部分：
          uint tmp = Convert(flag);
            uint key_tmp = Convert(key) / 0x10000000000000000;
            assembly {
                let first,second
                sstore(5, and(shr(96, key_tmp), 0xffffffff))
                sstore(6, and(shr(64, key_tmp), 0xffffffff))
                sstore(7, and(shr(32, key_tmp), 0xffffffff))