**结尾** 部分如下所示：
在结尾处，使用`write-output`替换`.((gV
'*mDR*').nAme[3,11,2]-joIn'')`语句，生成的结果仍然经过混淆处理。再次使用`write-output`替换结尾处的`.(
$pShoME[4]+$PsHoMe[30]+'X')`，再次执行。
这样的操作仍然要重复多次，比如我们还需使用`write-output`替换开头附近的`&(
([sTrINg]$verbosePREFerencE)[1,3]+'x'-JOIN'')`，然后再使用`write-output`替换`. (
$Env:comsPec[4,15,25]-JOiN'')`。
###  第3部分
第3部分的开头处如下所示：
使用`write-output`替换开头处的`.( $PsHome[4]+$PShoME[34]+'X')`，然后再次执行。
这部分代码可读性较强，如果我们替换函数名称则更加易读。
使用这种方法我们最多能达到这个程度。我们必须通过手动分析来找到函数名，然后再以手动方式或编写脚本找到并规范变量名。
大家可以从[这里](https://gist.githubusercontent.com/lkw657/becdb839139901fcc907fc39605a890d/raw/70e685f6ec0917aad7a6662132f967577bd72e3e/final1.ps1.b64)获取经过处理后的代码。
我对代码还做了些改动，去掉了乱七八糟的变量，修改了某些函数的名称，大家可从[这里](https://gist.githubusercontent.com/lkw657/4244014b5c091325feb3b40e0a3c786f/raw/3476aa131dcbb7fc244691dd5ed90a4af724b854/final2.ps1.b64)获得改动后的代码。
Virustotal并没有将这个[powershell脚本](https://www.virustotal.com/#/file/6f38fe65cad067a73888552cdb9817a37329863d8732b4e930938f619ca504fe/detection)当成病毒程序，如下所示：
然而，某些[启发式检测引擎](https://www.virustotal.com/#/file/1bf764e77a543def4c623e6e207b1b72999f6550cf49651b88d53f80ae10e4d7/detection)能够正确识别释放器（dropper）：
第1部分代码中只包含变量，然而变量名及值非常复杂。
分析相关函数后，我们发现`$dragon_middle`变量包含RAT需要连接的一些域名（恶意软件会遍历这个列表，直到找到可以连接上的域名）。`$private`以及`$public`变量包含RAT
传输数据所需的加密及解密密钥。@Leeky循环处理这些数组，成功打印出了这些内容，大家可以参考[此处](https://gist.githubusercontent.com/lkw657/61905786d99565ba8df087f208b4310a/raw/3c3250bd30e68e286d0a06f371719f49583a1b92/variables.txt)了解相关信息。
@Cry0l1t3遍历了这些域名，从中挑出了一个不同的[域名](https://gist.githubusercontent.com/lkw657/db14c27dd42f83ad62ec64de6862249a/raw/3ff41837eeeeda4acf909f64910e4f5ae33a222a/domain)，该域名与其他所有域名相比会解析到一个不同的主机上。
@dtm通过[Github](https://gist.githubusercontent.com/lkw657/9d81fac2ca10126eceb5119eae92b30e/raw/6791d90b9c4929a9029c8070c04632696ce33d15/variables.txt)提供了更加完整的一份变量列表。我不太了解他如何生成这些结果，但根据结果的格式，我猜测他使用了一条命令来打印出相关信息（如果猜测不对请及时纠正我）。
虽然这份列表中并没有包含`$dragon_middle`中的所有元素，但包含了更为有趣一些变量，如用来查找受害者IP的变量（`https://api.ipify.org/`）以及受害者国别的变量（`http://apinotes.com/ipaddress/ip.php?ip=`）。
他还捕捉了恶意软件连接服务器过程中生成的一些[数据包](https://gist.githubusercontent.com/lkw657/e9c13ddb9cf3955384f3b39f22f97d6d/raw/ae674ac8401597c759e15ee7f79ea78ee520557d/packets.pcap.b64)。
第2部分包含加密及解密代码，第3部分为剩下的所有代码。
RAT使用RSA加密算法来与服务器通信。奇怪的是，我认为代码中公钥以及私钥的命名方式被作者弄错了。
代码所使用的公钥以及私钥具有不同的模式，这表明它们很有可能来自于不同的密钥对。
发往服务器的消息经使用服务器公钥（代码中的`$secret`变量）进行加密，然后使用服务器的私钥进行解密（私钥存储在服务器上）。
发往RAT的消息使用RAT的公钥（存放在服务器上）进行加密，然后使用RAT的私钥（代码中的`$public`变量）进行解密。
从理论上讲，如果加解密过程没有破绽，那么我们无法解开发往服务器的消息（当然我们可以修改RAT，打印出这些消息）。然而，攻击者的密钥使用了小素数，因此存在弱点。
当RAT启动时，做的第一件事就是完成本地持久化。
RAT将vbs文件的路径添加到注册表中的`HKCU:SOFTWAREMicrosoftWindowsCurrentVersionRunDifenderUpdate`，然后使用计划任务，在登录时运行该脚本。
我不大确定本地持久化函数中第一部分代码的功能。我觉得这段代码的功能是禁用Word的受保护视图功能，但我不确定为什么恶意软件需要这个功能。
接下来RAT检查正在运行的进程，查看是否存在某些调试器或者其他工具。如果找到这类工具，则会关闭主机。
接下来，RAT尝试连接到`$dragon_middle`中保存的服务器，一旦出现错误，则会重复该过程（大概是因为RAT认为这些服务器可能会停止服务或者被列入黑名单中）。
RAT在接受并处理服务器的命令之前，会先尝试与向服务器进行注册。
RAT接受如下几类命令：
1、reboot：重启主机。
2、shutdown：关闭主机。
3、clean：在重启前尽可能清掉C:、D:、E:以及F:的数据。
4、screenshot：截屏并将结果发往服务器。
5、upload：把服务器上的某个文件传输到受害者主机中。
如果收到的命令不属于如上几类，则会尝试在powershell中执行。
我使用默认的执行策略来运行这个keygen（记得前面我们已经改过运行策略），检查`c:ProgramDataWindowsNT`目录，观察RAT能否正常运行。我发现该目录没有创建成功，因此Windows可能会阻止RAT的运行。
## 三、补充说明
前面我提到过，RAT使用的加密算法比较脆弱，这里我想补充下我们如何破解这个算法。
我不想在这里介绍RSA的基本工作原理，0x00sec上有相关[教程](https://0x00sec.org/t/encryption-101-rsa-001-the-maths-behind-it/1921)，并且[维基百科](https://en.wikipedia.org/wiki/RSA_\(cryptosystem))上也有许多有价值的参考资料。
RSA算法中用到了两个素数：`p`以及`q`，用来计算`n = p*q`，这两个素数比较关键，需要妥善保管。这两个素数也用来计算`λ(n) = λ(p*q)
= lcm(p-1, q-1)`。RSA中公钥`e`以及私钥`e`满足一定关系：`d == e^(-1) (mod λ(n))`。
对于这个RAT，用到的`n`非常小（因为使用的是小素数），因此我们很容易就可以将其分解为正确的`p`以及`q`。接下来我们可以使用这两个数来计算`λ(n)`，然后用前面的公式，根据`e`来计算`d`。
我们可以使用SageMath来计算，代码如下：
    # from $private variable in rat
    e = 959
    n = 713
    # factor n
    # list(factor(n)) returns prime factors as a list of tuples of (factor, amount)
    # we just want the factors
    p, q = [a[0] for a in list(factor(n))]
    # calculate λ(n) 
    l = lcm(p-1, q-1)
    # calculate d
    print('d = {}'.format(inverse_mod(e, l)))
算出`d = 149`。
利用服务器的私钥，我们可以写段脚本来解密发往服务器的消息。如果我们将这个过程应用到RAT的公钥上，那么我们可以作为中间人角色，通过MiTM方式攻击RAT与服务器之间的通信流量。
使用python语言编写的解密脚本如下所示：
    def decrypt(ciphertext):
        key = 149
        n = 713
        decrypted = []
        for i in range(0, len(ciphertext)):
            num = int(ciphertext[i])
            t = pow(num, key, n)
            decrypted.append(chr(t))
        return ''.join(decrypted)
    nums = input().split()
    print(decrypt([int(i) for i in nums]))
在@dtm截获的pcap包中，RAT将如下数据发往服务器：
    340 362 396 383 105 598 219 362 581 362 518 73 35 73 504 220 515 665 504 515 515 35 515 518 133 335 316 665 515 665 220 665 316 181 665 335 515 38 335 335 335 316 362 663 362 145 180 396 637 383 219 362 581 362 180 383 432 432 145 219 367 362 590
利用上述脚本，我们可以解密出原始的消息，如下所示：
    {"TOKEN":"70e0a413a11e17db9313439c3b1fbbb9","ACTION":"COMMAND"}
[原文链接：https://www.0x00sec.org/t/malware-reversing-burpsuite-keygen/5167](https://www.0x00sec.org/t/malware-reversing-burpsuite-keygen/5167)