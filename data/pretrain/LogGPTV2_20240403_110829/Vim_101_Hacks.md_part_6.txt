### Vim 101 Hacks

**Hack 45: Access Unix Man Pages for Functions from Vim**

- **Accessing Man Pages:**
  - To access the man page for a word in Vim, press `K` while the cursor is on the word.
  - To access a specific section of the man page, use `{n}K`. For example, to access the second section, press `2K`.

- **Example:**
  - The `sleep` command is both a shell command and a library routine. If you are in a C program and want to view the man page for `sleep`, you would press `3K`.

- **Customizing Man Page Lookup:**
  - To look up information other than Unix man pages, you can set a different `keywordprg`.
  - For example, if you are a Perl programmer and frequently use `perldoc`, you can set:
    ```vim
    :set keywordprg=perldoc\ -f
    ```
  - After setting this, pressing `K` on a function name will open the `perldoc` instead of the Unix man page.

---

**Hack 46: Jump to Variable Declaration**

- **Local Declaration:**
  - Use `gd` to jump to the local declaration of a variable.
  
- **Global Declaration:**
  - Use `gD` to jump to the global declaration of a variable.

---

**Hack 47: Align Variable Assignments**

- **Example Code:**
  ```vim
  $a = 1;
  $a_very_long_variable_name_value = 1;
  $b = 1;
  $my_short_variable_value = 1;
  ```

- **Install Align.vim Plugin:**
  - Download and install the `Align.vim` plugin:
    ```sh
    $ vim Align.vba.gz
    :so %
    :q
    ```

- **Aligning Text:**
  - Visually select the text you want to align and use:
    ```vim
    :'<,'>Align =
    ```
  - Alternatively, you can specify line numbers or a range:
    ```vim
    :Align Separator1 Separator2
    ```

- **Result:**
  ```vim
  $a = 1;
  $a_very_long_variable_name_value = 1;
  $b = 1;
  $my_short_variable_value = 1;
  ```

---

**Hack 48: Increment and Decrement Numbers Using CTRL Keys**

- **Increment Number:**
  - Place the cursor over a number and press `CTRL-A` to increase it by 1.
  
- **Decrement Number:**
  - Place the cursor over a number and press `CTRL-X` to decrease it by 1.

---

**Hack 49: Execute One Vim Command in Insert Mode**

- **Using CTRL-O:**
  - While in insert mode, press `CTRL-O` to temporarily switch to command mode and execute a single Vim command.
  - Example sequence:
    1. You are in insert mode typing characters.
    2. Press `CTRL-O` to switch to command mode.
    3. Press a Vim command (e.g., `5j` to jump 5 lines).
    4. You are automatically back in insert mode after the command is executed.

---

**Hack 50: View Current File Details**

- **Basic File Details:**
  - Press `CTRL-G` to view basic file details:
    ```vim
    "test.txt" [Modified] line 3 of 6 --50%-- col 1
    ```

- **Advanced File Details:**
  - Press `g CTRL-G` to view advanced file details:
    ```vim
    Col 1 of 5; Line 3 of 6; Word 3 of 6; Byte 10 of 29
    ```

---

**Hack 51: Take Control of the Vim Status Bar**

- **Enabling the Status Bar:**
  - By default, the status bar is disabled in Vim. Enable it with:
    ```vim
    :set laststatus=2
    ```

- **Setting the Status Line:**
  - Set a custom status line with:
    ```vim
    :set statusline=Filename:%t\ Line:\ %l\ Col:\ %c
    ```

- **Additional Examples:**
  - Refer to `:help statusline` for more examples and options.

---

**Chapter 9: Vim Command Line Hacks**

**Hack 58: Open File in Read-Only Mode**

- **Read-Only Mode:**
  - Open files in read-only mode using:
    ```sh
    $ vim -R filename.txt
    ```
  - Or use the `view` command:
    ```sh
    $ view filename.txt
    ```

- **Best Practice:**
  - Use one of these methods when you do not intend to edit the file to avoid unintentional modifications.

**Hack 59: Recover Swap File Explicitly**

- **Listing Swap Files:**
  - Use the `-r` option to list swap files from the current directory, `~/tmp`, `/var/tmp`, and `/tmp`:
    ```sh
    $ vim -r
    ```

- **Example Output:**
  ```sh
  Swap files found:
  In current directory:
  1. .file1.c.swp
  2. .file2.txt.swp
  3. .change-password.sql.swp
  In directory ~/tmp:
  -- none --
  In directory /var/tmp:
  -- none --
  In directory /tmp:
  -- none --
  ```

- **Handling Swap File Conflicts:**
  - When a swap file exists and you try to open the original file, you may see a message like:
    ```sh
    E325: ATTENTION
    Found a swap file by the name ".file1.c.swp"
    (1) Another program may be editing the same file.
    (2) An edit session for this file crashed.
    [O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort:
    ```

- **Options:**
  - **Open Read-Only:** View the content of the file.
  - **Edit Anyway:** Edit the content of the file.
  - **Recover:** Replace the content of the file with the content of the swap file.
  - **Quit or Abort:** Exit without making changes.

**Hack 60: Execute Any Vim Command When Opening a File**

- **Executing Commands:**
  - Use the `-c` option to execute any Vim command when opening a file:
    ```sh
    $ vim -c ':50' filename.txt
    ```
  - You can also execute multiple commands:
    ```sh
    $ vim -c 'command1' -c 'command2' filename.txt
    ```

**Hack 61: Execute Commands Stored in a File**

- **Executing Commands from a File:**
  - If you frequently execute the same sequence of Vim commands, store them in a file and execute them using:
    ```sh
    $ vim -S commands.vim
    ```

---

**Buyer Information:**
- **Name:** xiujuan lu
- **Email:** (PI:EMAIL)
- **Transaction ID:** 85W16630AD8515549
- **Source:** Vim 101 Hacks, www.thegeekstuff.com

This optimized version provides a clear, concise, and professional presentation of the Vim hacks, making it easier to follow and understand.