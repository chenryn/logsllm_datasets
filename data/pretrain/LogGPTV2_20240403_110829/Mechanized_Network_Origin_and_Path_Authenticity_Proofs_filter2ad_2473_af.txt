### Setting Up Keys in ICING Routers

To establish secure communication, only two keys are required: one for the source and another for the destination. In contrast, ICING routers must set up keys between each pair of routers along the path. The proof techniques presented here can be directly applied to analyze ICING's origin and path authenticity properties.

#### Example of Key Setup
1. **(S1, D, path1, hash(pkS1), hash(pkD), pvfS0, pvfD0, opvs, pkt)**
2. **(S1, D, path1, hash(pkS1), hash(pkS2), pvfSi-1, X, opvs, pkt)**
3. **(S1, D, path1, hash(pkS1), hash(pkS2), pvfSi, Y, opvs, pkt)**
4. **(S2, D, path2, hash(pkS2), hash(pkD), X, pvfDi-1, opvs’, pkt)**
5. **Y OPVi in opvs’ equals to Y**

Where:
- **Y = mac(prf(SVi, hash(pkS2)), (X, Ri-1, hash(pkt)))**

### Automated Protocol Verification Tools

Numerous model checking tools [24, 12, 8, 32, 2, 13, 34, 33, 7, 45, 15, 19, 5, 35, 21, 42, 14, 26, 44] have been successfully applied to analyzing security protocols. However, these tools are rarely used for network protocols due to their complexity. Network protocols often compute local state, are recursive, and require security properties to hold for arbitrary topologies. Given the infinite number of possible topologies, model-checking-based tools generally cannot directly prove the security properties of networking protocols.

### Proof-Based Techniques for Protocol Analysis

Our verification technique builds on prior work on reasoning about trace properties of systems [22, 23, 25]. The secrecy property of keys follows a similar strategy to Kerberos [41, 25], while the proofs of origin and path authenticity use a variant of the rely-guarantee reasoning principles [25]. The challenging part is identifying invariant properties associated with each MAC in the protocol. Identifying and verifying these invariants is a key technical contribution.

Various techniques have been applied to the verification of recursive cryptographic protocols [40, 6, 30], all requiring an abstract representation of the protocol behavior. In contrast, we directly verify local properties in the same framework using LS2. Paulson's work, which verifies recursive security protocols by encoding them and the Dolev-Yao adversary model in Isabelle/HOL [40], is closest to ours. While Paulson’s encoding summarizes the protocol as trace extensions, it does not verify the correctness of such assertions. We can verify these assertions using LS2 inference rules. Since we encode the full protocol in Coq, we do not need to specify valid trace extensions but instead focus on relevant trace properties, verified using a state monad. Our proofs also use rely-guarantee principles, which were not needed in Paulson’s case studies.

### Type Systems for Protocol Verification

Another approach involves using type systems based on the work of Abadi [1] and Gordon and Jeffrey [27]. Recent systems like RCF [10] and its extensions [11, 43] are based on refinement types. RCF has been implemented in F# with the refinement typechecker F7, backed by the SMT solver Z3. It has been used to automatically verify security properties of thousands of lines of code, including weak secrecy and correspondence assertions [48]. Our proofs of authenticity properties require induction over the length of the trace, which would necessitate incorporating inductive principles into F7.

### Verification of Network Protocols

Recent papers have investigated the verification of route authenticity properties in specific wireless routing protocols for mobile networks [3, 4, 20]. These works show that identifying attacks on route authenticity can be reduced to constraint solving, and the security analysis of specific properties can be reduced to checking them on several four-node topologies. However, their techniques are tightly tied to the protocols they verify and cannot be directly applied to other networking protocols, including ours.

Chen et al. [17] verified route authenticity properties of secure BGP extensions using a combination of manual proofs and Proverif [13]. Their subsequent work proposes a general framework leveraging a declarative programming language for the verification and empirical evaluation of routing protocols [18]. While their program logic could replace LS2, constructing the full proof would still require domain-specific definitions, similar to our approach.

### Conclusion

We have mechanized proofs of recursive secrecy and authenticity properties for the OPT source authentication and path validation protocols, which hold for all network topologies. Using LS2, a program logic for reasoning about programs in adversarial environments, we make minimal assumptions about the protocol code and directly verify the invariant properties in Coq. We believe our Coq encoding is general enough to be used for verifying other protocols.

### Acknowledgments

We thank the anonymous reviewers for their valuable feedback. This research was supported in part by CyLab at Carnegie Mellon, NSF grants CNS-1040801, CNS-1115706, CNS-1018061, the European Research Council under the European Union’s Seventh Framework Programme (FP7/2007-2013) / ERC grant agreement 617605, and a gift from KDDI.

### References

[1] M. Abadi. Secrecy by typing in security protocols. Journal of the ACM, 46(5):749–786, 1999.
[2] A. Armando and L. Compagna. SATMC: A SAT-Based Model Checker for Security Protocols. In JELIA, 2004.
...
[50] X. Zhang, H.-C. Hsiao, G. Hasker, H. Chan, A. Perrig, and D. G. Andersen. SCION: Scalability, Control, and Isolation On Next-Generation Networks. In Proc. IEEE S&P, 2011.