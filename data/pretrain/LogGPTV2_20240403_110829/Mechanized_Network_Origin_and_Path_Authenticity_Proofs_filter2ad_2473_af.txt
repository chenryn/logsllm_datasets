to set up just two keys, one with the source and one with the des-
tination, whereas ICING routers need to set up keys between each
pair of routers on the path. The proof techniques presented here
can be straightforwardly applied to analyzing ICING’s origin and
path authenticity properties.
 S2  1: (S1, D, path1,       hash(pkS1), hash(pkD),       pvfS0, pvfD0, opvs, pkt) 2: (S1, D, path1,       hash(pkS1), hash(pkS2),       pvfSi-1, X, opvs, pkt) 3: (S1, D, path1,       hash(pkS1), hash(pkS2),       pvfSi, Y, opvs, pkt) 5: (S2, D, path2,        hash(pkS2), hash(pkD),        X, pvfDi-1, opvs’, pkt) 4: Y OPVi in opvs’ equals to Y  S1  Ri-1  Ri+1   Ri   D  Y = mac(prf(SVi, hash(pkS2)),                (X, Ri-1, hash(pkt))) Automated protocol veriﬁcation tools. Numerous model check-
ing tools [24, 12, 8, 32, 2, 13, 34, 33, 7, 45, 15, 19, 5, 35, 21,
42, 14, 26, 44] have been successfully applied to analyzing secu-
rity protocols. However, these tools are rarely used in analyzing
network protocols because such protocols are considerably more
complicated than cryptographic protocols: they often compute lo-
cal state, they are recursive, and their security properties need to be
shown to hold for arbitrary network topologies. As the number of
possible topologies is inﬁnite, the number of models is also inﬁnite,
model-checking-based tools, in general, cannot be directly used to
prove the security properties of networking protocols.
Proof-based techniques for reasoning about protocols. Our ver-
iﬁcation technique is built on prior work on reasoning about trace
properties of systems [22, 23, 25]. The proof of the secrecy prop-
erty of keys follows the same strategy as the secrecy proofs of Ker-
beros [41, 25]. The proofs of origin and path authenticity properties
use a variant of the rely-guarantee reasoning principles [25]. The
challenging part of the proofs is to identify the invariant properties
associated with each MAC in the protocol. Identifying and verify-
ing these invariants is one of main our technical contributions.
Various techniques have been applied to the veriﬁcation of re-
cursive cryptographic protocols [40, 6, 30]. All of them require
abstract representation of the protocol behavior. In contrast, we di-
rectly verify local properties about the protocol in the same frame-
work using LS2. Closest to our work is work by Paulson, where
recursive security protocols are veriﬁed by encoding the protocol
and the Dolev-Yao adversary model in Isabelle/HOL [40]. The
encoding of messages and the attacker in Paulson’s work is sim-
ilar to ours. In Paulson’s encoding, a protocol is summarized as
trace extensions allowed by the protocols. The correctness of such
assertions is not veriﬁed in Paulson’s work. We can verify such
assertions using LS2 inference rules. Because we encode the full
protocol in Coq, we do not need to specify valid trace extensions.
Instead, we specify trace properties that are relevant to the proofs
and verify them using a state monad. Finally, our proofs use rely-
guarantee principles which were not needed in the case studies that
Paulson examined.
Another direction in verifying protocols is to use type systems
built directly or indirectly on the work of Abadi [1] and Gordon
and Jeffrey [27]. The most recent such systems are RCF [10] and
its extensions [11, 43]. RCF is based on reﬁnement types. RCF’s
theory has been implemented for the language F# in the reﬁnement
typechecker F7, backed by the SMT solver Z3 for discharging log-
ical assertions. It has been used to automatically verify security
properties of thousands of lines of code. Veriﬁed properties include
weak secrecy properties and correspondence assertions [48]. Our
proofs of authenticity properties require induction over the length
of the trace. F7 would need to incorporate inductive principles to
verify such properties.
Veriﬁcation of network protocols. Recently, several papers inves-
tigated the veriﬁcation of route authenticity properties of speciﬁc
wireless routing protocols for mobile networks [3, 4, 20]. They
have shown that identifying attacks on route authenticity can be
reduced to constraint solving, and that the security analysis of a
speciﬁc route authenticity property that depends on the topologies
of network instances can be reduced to checking these properties
on several four-node topologies. Their techniques are tightly tied
to the protocol that they verify, and therefore, cannot be directly
applied to other networking protocols, including ours. Chen et
al. investigated verifying security properties of secure extensions of
BGP [17]. They veriﬁed route authenticity properties on variants
of S-BGP using a combination of manual proofs and Proverif [13].
This technique is speciﬁc to S-BGP and cannot be applied to our
setting. Their subsequent work proposes a general framework that
leverages a declarative programming language for veriﬁcation and
empirical evaluation of routing protocols [18]. Their program logic
for the declarative language could be used in place of LS2. How-
ever, constructing the full proof would still require augmenting
their framework to include domain-speciﬁc deﬁnitions such as mes-
sages and the attacker’s knowledge, in a similar approach to ours.
8. CONCLUSION
We have mechanized proofs of recursive secrecy and authentic-
ity properties of the OPT source authentication and path validation
protocols. These properties hold for all network topologies. By
using LS2, a program logic for reasoning about programs that run
in adversarial environments, we are able to make minimal assump-
tions about the protocol code and directly verify the invariant prop-
erties of the pseudo code in Coq. We believe our Coq encoding is
general enough to be used in verifying other protocols.
9. ACKNOWLEDGMENTS
We thank the anonymous reviewers for their valuable feedback.
This research was supported in part by CyLab at Carnegie Mel-
lon, NSF grants CNS-1040801, CNS-1115706, CNS-1018061, the
European Research Council under the European Union’s Seventh
Framework Programme (FP7/2007-2013) / ERC grant agreement
617605, and a gift from KDDI.
10. REFERENCES
[1] M. Abadi. Secrecy by typing in security protocols. Journal of
the ACM, 46(5):749–786, 1999.
[2] A. Armando and L. Compagna. SATMC: A SAT-Based
Model Checker for Security Protocols. In JELIA, 2004.
[3] M. Arnaud, V. Cortier, and S. Delaune. Modeling and
Verifying Ad Hoc Routing Protocols. In Proc. CSF, 2010.
[4] M. Arnaud, V. Cortier, and S. Delaune. Deciding security for
protocols with recursive tests. In Proc. CADE, 2011.
[5] D. A. Basin. Lazy Inﬁnite-State Analysis of Security
Protocols. In CQRE, 1999.
[6] D. A. Basin, S. Capkun, P. Schaller, and B. Schmidt. Formal
Reasoning about Physical Properties of Security Protocols.
ACM Trans. Inf. Syst. Secur. 14(2):16, 2011.
[7] D. A. Basin, S. MÃ˝udersheim, and L. ViganÃš. Ofmc: A
symbolic model checker for security protocols. Int. J. Inf.
Sec., 4(3):181–208, 2005.
[8] J. Bau and J. Mitchell. A Security Evaluation of DNSSEC
with NSEC3. In Proc. NDSS, 2010.
[9] A. Bender, N. Spring, D. Levin, and B. Bhattacharjee.
Accountability as a Service. In Proc. USENIX SRUTI, 2007.
[10] J. Bengtson, K. Bhargavan, C. Fournet, A. D. Gordon, and
S. Maffeis. Reﬁnement types for secure implementations.
TOPLAS, 33(2):8:1–8:45, 2011.
[11] K. Bhargavan, C. Fournet, and A. D. Gordon. Modular
Veriﬁcation of Security Protocol Code by Typing. In Proc.
POPL, 2010.
[12] B. Blanchet. Automatic veriﬁcation of correspondences for
security protocols. J. Comput. Secur., 17(4), Dec. 2009.
[13] B. Blanchet and B. Smyth. ProVerif 1.86: Automatic
Cryptographic Protocol Veriﬁer, User Manual and Tutorial.
http://www.proverif.ens.fr/manual.pdf.
[14] Y. Boichut, P.-C. Heam, O. Kouchnarenko, and F. Oehl.
Improvements on the Genet and Klay Technique to
IEEE S&P, 1997.
[36] A. Nanevski, G. Morrisett, A. Shinnar, P. Govereau, and
L. Birkedal. Ynot: Reasoning with the awkward squad. In
Proc. ICFP, 2008.
[37] J. Naous, M. Walﬁsh, A. Nicolosi, D. Mazieres, M. Miller,
and A. Seehra. Verifying and enforcing network paths with
ICING. In Proc. CoNEXT, 2011.
[38] O. Nordström and C. Dovrolis. Beware of BGP attacks.
SIGCOMM Computer Communication Review, 34:1–8,
2004.
[39] B. Parno, A. Perrig, and D. Andersen. SNAPP: Stateless
Network-Authenticated Path Pinning. In Proc. ACM
Symposium on Information, Computer and Communications
Security (ASIACCS), 2008.
[40] L. C. Paulson. The Inductive Approach to Verifying
Cryptographic Protocols. J. Comput. Secur., 6(1-2):85–128,
Jan. 1998.
[41] A. Roy, A. Datta, A. Derek, J. C. Mitchell, and J.-P. Seifert.
Secrecy Analysis in Protocol Composition Logic. In Proc.
ASIAN, 2006.
[42] D. X. Song, S. Berezin, and A. Perrig. Athena: A Novel
Approach to Efﬁcient Automatic Security Protocol Analysis.
J. Comput. Secur., 9:47–74, 2001.
[43] N. Swamy, J. Chen, C. Fournet, P.-Y. Strub, K. Bhargavan,
and J. Yang. Secure Distributed Programming with
Value-Dependent Types. In Proc. ICFP, 2011.
[44] M. Turuani. The CL-Atse Protocol Analyser. In Proc. RTA,
2006.
[45] L. Viganò. Automated Security Protocol Analysis With the
AVISPA Tool. Electron. Notes Theor. Comput. Sci.,
155:61–86, 2006.
[46] T. Wan, E. Kranakis, and P. C. Oorschot. Pretty secure BGP
(psBGP). In Proc. NDSS, 2005.
[47] R. White. Securing BGP Through Secure Origin BGP
(soBGP). The Internet Protocol Journal, 6(3):15–22, 2003.
[48] T. Y. C. Woo and S. S. Lam. A Semantic Model for
Authentication Protocols. In Proc. IEEE S&P, 1993.
[49] F. Zhang, L. Jia, T. H.-J. Kim, C. Basescu, Y.-C. Hu, and
A. Perrig. Mechanized network origin and path authenticity
proofs. Technical Report CMU-CyLab-14-007, Carnegie
Mellon University, 2014.
[50] X. Zhang, H.-C. Hsiao, G. Hasker, H. Chan, A. Perrig, and
D. G. Andersen. SCION: Scalability, Control, and Isolation
On Next-Generation Networks. In Proc. IEEE S&P, 2011.
Automatically Verify Security Protocols. In Proc. AVIS,
2004.
[15] L. Bozga, Y. Lakhnech, and M. PÃl’rin. HERMES: An
Automatic Tool for Veriﬁcation of Secrecy in Security
Protocols. In CAV, 2003.
[16] K. Butler, T. R. Farley, P. McDaniel, and J. Rexford. A
Survey of BGP Security Issues and Solutions. Proc. the
IEEE, 98:100–122, January 2010.
[17] C. Chen, L. Jia, B. T. Loo, and W. Zhou. Reduction-based
Security Analysis of Internet Routing Protocols. In WRiPE,
2012.
[18] C. Chen, L. Jia, H. Xu, C. Luo, W. Zhou, and B. T. Loo. A
Program Logic for Verifying Secure Routing Protocols. In
Proc. FORTE, 2014.
[19] E. M. Clarke, S. Jha, and W. Marrero. Verifying Security
Protocols with Brutus. ACM Trans. Softw. Eng. Methodol.,
9:443–487, 2000.
[20] V. Cortier, J. Degrieck, and S. Delaune. Analysing routing
protocols: four nodes topologies are sufﬁcient. In Proc.
POST, 2012.
[21] C. J. Cremers. The Scyther Tool: Veriﬁcation, Falsiﬁcation,
and Analysis of Security Protocols. In Proc. CAV, 2008.
[22] A. Datta, A. Derek, J. C. Mitchell, and A. Roy. Protocol
Composition Logic (PCL). Electronic Notes in Theoretical
Computer Science, 172:311–358, 2007.
[23] A. Datta, J. Franklin, D. Garg, and D. Kaynar. A Logic of
Secure Systems and its Application to Trusted Computing. In
Proc. IEEE S&P, 2009.
[24] S. Escobar, C. Meadows, and J. Meseguer. A rewriting-based
inference system for the NRL protocol analyzer: grammar
generation. In Proc. FMSE, 2005.
[25] D. Garg, J. Franklin, A. Datta, and D. Kaynar. Compositional
System Security in the Presence of Interface-Conﬁned
Adversaries. Electronic Notes in Theoretical Computer
Science, 265:49–71, 2010.
[26] T. Genet and F. Klay. Rewriting for Cryptographic Protocol
Veriﬁcation. In Proc. CADE, 2000.
[27] A. D. Gordon and A. Jeffrey. Authenticity by typing for
security protocols. Journal of Computer Security,
11(4):451–519, July 2003.
[28] S. Kent, C. Lynn, J. Mikkelson, and K. Seo. Secure Border
Gateway Protocol (S-BGP). IEEE Journal on Selected Areas
in Communications, 18:103–116, 2000.
[29] T. H.-J. Kim, C. Basescu, L. Jia, S. B. Lee, Y.-C. Hu, and
A. Perrig. Lightweight Source Authentication and Path
Validation. In Proc. of ACM SIGCOMM, 2014.
[30] R. Küsters and T. Wilke. Automata-Based Analysis of
Recursive Cryptographic Protocols. In Proc. STACS, 2004.
[31] X. Liu, A. Li, X. Yang, and D. Wetherall. Passport: Secure
and Adoptable Source Authentication. In Proc. of NSDI,
2008.
[32] G. Lowe. An Attack on the Needham-Schroeder Public-key
Authentication Protocol. Inf. Process. Lett., 56(3):131–133,
1995.
[33] C. Meadows. The NRL Protocol Analyzer: An Overview. J.
Log. Program., 26:113–131, 1996.
[34] J. K. Millen, S. C. Clark, and S. B. Freedman. The
Interrogator: Protocol Security Analysis. IEEE Trans.
Software Eng., 13:274–288, 1987.
[35] J. C. Mitchell, M. Mitchell, and U. Stern. Automated
analysis of cryptographic protocols using mur-phi. In Proc.