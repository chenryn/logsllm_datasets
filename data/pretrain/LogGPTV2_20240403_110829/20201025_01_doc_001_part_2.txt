在频繁更新和删除的系统中，如何比较好
地避免表和索引膨胀从而引起的sql效率降
低？
• 为什么要问这个问题?
• 掉坑里过?
• https://github.com/digoal/blog/blob/master/201906/20190621_01.md
• 答案
• 开启自动垃圾回收, autovacuum
• 配置足够多工人, autovacuum_max_workers
• 配置足够频繁的监测周期, autovacuum_naptime
• 配置足够小的触发阈值, autovacuum_vacuum_scale_factor,
autovacuum_vacuum_threshold
• 避免工人频繁休息, autovacuum_vacuum_cost_delay, autovacuum_vacuum_cost_limit
• 避免工人做无用功, oldest xid snapshot. standby feedback, vacuum defer,
old_snapshot_threshold, long query, long xact, long 2pc.
• 避免超大单分区, 因为单个分区单个vacuum工人为之服务, 无法并行
• 避免重复扫描索引, autovacuum_work_mem, 单个表分区的垃圾记录数*17字节不要超出
autovacuum_work_mem
pg 大表加字段及默认值会锁表吗？哪些版
本能很好地解决这种情况？
• 为什么要问这个问题?
• 一定是业务经常要半夜加字段? 被DBA吐槽过?
• 答案
• PG 11及以后的版本, 加自动和默认值不需要rewrite table.
• 其他版本加字段不含默认值不需要rewrite table, 包含默认值需要rewrite table.
• 锁不锁关系不大, 关键是:
• 多大的锁, 排他, 与任何其他锁都会发生冲突
• 锁影响多长时间
• 取决于整个过程要多久
• 未持有锁, 等待中, 会不会与其他会话发生冲突
• 会, 大多数人栽在这里.
• 如何避免雪崩
• 执行DDL前, 设置锁请求超时, 然后再执行DDL
pg 大表更改字段类型会锁表吗？
• 为什么要问这个问题?
• 是业务设计有问题? 该用数值错用字符串? 被DBA吐槽过?
• 答案
• 一切DDL都会锁表
• 影响有多大, 取决于锁时长
• 数据内部存储未变化, 不需要rewrite table, 仅修改元数据
• 数据内部存储发生变化, 需要rewrite table
pg 想一次性对表（包括将来新建的表）赋
权该如何操作？
• 为什么要问这个问题?
• mysql用户的问题? https://www.postgresql.org/docs/12/sql-alterdefaultprivileges.html
• https://www.postgresql.org/docs/12/sql-grant.html
• 答案
• GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
• [, ...] | ALL [ PRIVILEGES ] }
• ON { [ TABLE ] table_name [, ...]
• | ALL TABLES IN SCHEMA schema_name [, ...] }
• TO role_specification [, ...] [ WITH GRANT OPTION ]
• ALTER DEFAULT PRIVILEGES
• [ FOR { ROLE | USER } target_role [, ...] ]
• [ IN SCHEMA schema_name [, ...] ]
• abbreviated_grant_or_revoke
• where abbreviated_grant_or_revoke is one of:
• GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
• [, ...] | ALL [ PRIVILEGES ] }
• ON TABLES
• TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ]
ERROR: index row requires 8600 bytes,
maximum size is 8191，怎么办？
• 为什么要问这个问题?
• 设计问题? 未限制字段长度. 然后报错让DBA去解决?
• 答案
• hash index
• hash value长度固定
• function index
• func(col), 查询时也使用func(col)
• partial index
• index on tbl (col) where col_length = 8192
• select x on tbl where ... and col_length = 8192
current transaction is aborted, commands
ignored until end of transaction block，这
是啥，怎么办？
• 为什么要问这个问题?
• 开启事务后, 哪种处理方法更适合你?
• 1、数据库出错了不告诉你, 还让你继续执行
• 2、数据库出错了, 告诉你, 并且需要你handle
• 答案
• begin;...错误; end; 结束事务后再发起新事务
• 使用自动事务提交
• 或者看看你用的驱动有没有相关参数、相关模块可以自动结束事务.
mysql不支持位图存储、PG支持位图存储
吗？
• 为什么要问这个问题?
• 什么情况适合用位图索引?
• 数据量大, 唯一值集合小, 数据变更少, 按单值、组合值查询count?
• 答案
• 8.2支持过, 后来从代码中去掉了, 取而代之的:
• GIN
• Bloom
• 更通用.
mysql不支持位图存储、PG支持位图存储
吗？
极大丰富索引接口
• btree: 等值、范围、排序、唯一约束 连学霸都竖起大拇指
• hash: 等值
• gin, 数组包含、相交; 全文检索; 模糊查询; 正则匹配; JSON搜索; 相似查询; 任意字段组合等
值搜索;
• gist: R tree, RD tree通用自定义平衡树; 地理信息搜索、距离排序; 全文检索; 多维向量距离排
序; 排他约束
• spgist: 通用自定义非平衡树; quad tree, k-d tree, radix tree; 空间搜索; 排他约束;
• brin: 时序区间搜索; 线性相关存储数据搜索;
• bloom: 任意字段组合等值、不等过滤;
• rum: 全文检索; 文本相似; 数组相似;
• zombodb: ElasticSearch扩展引擎索引; (数据存PG, 索引在ES)
• pase: 阿里云PG专供: 多维向量距离排序; 图像识别; 相似圈选;
学霸配方在此!!!
• 提前收藏:
• https://github.com/digoal/blog
总结一下
• PG学习门槛高?
• 90%的人: 不高
• 大多数业务根本用不到极大丰富的高级功能
• PG有内涵吗?
• 如果你把它当成简单增删改查的数据存储, 和其他DB没什么两样.
• 如果你把它当成数据工厂, 想让数据发挥价值, 它会给你无限惊喜.
• 在应用中实现的逻辑都可以在PG中实现
• PG极大丰富的功能到底有啥好处?
• 万众创新
我们正在经历的第四次数据库大战(2020s)
• 云 VS 开源 VS 商业
第四次大战(万众创新):
数据即服务时代用户:
三足鼎立
业务驱动(技术优势被抹平, 业务驱动)
第三次大战(互联网崛起):
开源数据库时代用户:
技术驱动(互联网颠覆传统行业)
某短视频、直播、电商网站:
全站基于阿里云, 50个研发, 6个月用户
突破1亿, 日UV达3500万.
第一、二次大战(PC,Server崛起):
MyBase PG!
商业数据库时代用户: 数据库:
渠道驱动(传统行业) 核心推荐算法基于PG!!!
?
MyBase
憋废话了, 到底哪里有
咨询砖家
• 入钉钉群,
•免费
活动进行中!!!
•周周
有直播和红包雨!!!