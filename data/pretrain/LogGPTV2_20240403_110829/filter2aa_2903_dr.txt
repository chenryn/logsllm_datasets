从调试和维护软件所付出的代价来看，人们对软件可调试性的重视
还很不够。如果像每个建筑中都必须配备消防设施那样在每个软件中都
配备必要的调试设施，那么花在软件调试上的时间和投入都会大幅下
降。
本章比较详细地讨论了软件可调试性的内涵、基本原则和重视可调
试性的意义，并分析了Windows操作系统中体现可调试性的设计。最后
一节探讨了可调试性与安全、商业秘密和性能的关系。第16章将进一步
讨论如何在软件工程中实现可调试性。
参考资料
[1] H P E Vranken, M P J Stevens, M T M Segers. Design-For-Debug
in Hardware/Software Co-Design.
[2] G Pascal Zachary. Showstopper: The Breakneck Race to Create
Windows NT and the Next Generation at Microsoft[M]. The Free Press,
1994.
[3] Larry Osterman. Where do“checked”and“free”come from?
第16章 可调试性的实现
第15章讨论了增强软件可调试性的意义、目标和基本原则。本章将
在上一章的基础上讨论实现可调试性的基本方法。本章首先介绍软件团
队中的各种角色在提高可调试性方面应该承担的职责（见16.1节），然
后介绍如何在架构设计阶段就为提高可调试性做好各种规划和准备（见
16.2节），接下来分别讨论实现可追溯性（见16.3～16.4节）、可观察
性（见16.5节）和自动诊断与报告（见16.6节）的典型方法。
16.1 角色和职责 
因为调试的效率直接影响项目的进度，无法解决的调试问题可能导
致整个项目陷入停滞，所以实现可调试性应该是软件团队中所有人的共
同目标。读者都应该对提高可调试性给予足够的重视和支持，就像重视
安全、质量和可靠性等一样。
16.1.1 架构师
软件架构师是规划和缔造软件系统的核心角色，他们负责规划软件
系统的整体框架、模块布局、基础设施和基本的工作方式，参与制订开
发策略、方针和计划，并指导开发过程。软件架构师在软件团队中的地
位好比是建筑团队中的总设计师。作为一个好的架构师，应该充分意识
到提高可调试性的重要意义，承担起如下职责。
在架构设计中规划统一的支持可调试性的策略、机制和设施，包括
检查、记录和报告错误的方法，输出调试信息和记录日志的方式，
专门用来辅助调试的模块（如模拟器等），简化调试的设施等。
设计必要的技术手段，提醒或强制程序员在编码时实现可调试性。
制订提高可调试性的指导意见和纪律，并写入软件项目的开发方针
中，以纪律强制这些策略的执行，并检查和监督执行情况。
通过培训或其他沟通方式让团队成员理解可调试性的意义和实现方
法。
参与调试重大的软件问题，验证调试机制的有效性，并向团队证明
这些机制所带来的好处。
下一节将更详细地讨论如何在架构设计中规划和设计支持调试的基
础设施。
16.1.2 程序员
程序员是建造软件大厦的主力军。他们在搭建这个大厦的同时还负
责调试这个大厦中存在的问题。在产品发布之前，程序员要负责调试与
自己所编写代码有关的问题。在产品发布后，支持和维护工程师会承担
大部分调试工作，但如果支持工程师无法解决，那么通常还是需要程序
员来解决。根据粗略的统计，大多数程序员花一半以上的时间在调试
上，当项目进入Beta阶段和邻近产品发布时这个比例通常会更高。某些
团队的测试工程师会承担一部分调试职能（稍后会详细讨论），但是他
们通常只负责初步的分析，将错误定位到模块一级，然后通常还会分派
给开发人员（程序员）。概而言之，程序员同时是编写代码和调试代码
的主要力量。因此，对于提高可调试性，程序员是主要的执行者，也是
主要的受益者。他们应该承担的职责如下。
重视错误处理，认真编写错误检查和错误处理代码。不要因为出现
错误是小概率事件就草草编写一些代码，要知道很多造成重大损失
的大问题都是由于编写代码时的小疏忽所造成的。
认真执行架构师所制订的提高可调试性的各项策略和方针。当编写
代码时，合理应用各种提高可调试性的原则，努力提高代码的可调
试性。如果发现有不合理的地方，应该及时提出，而不是消极放
弃。
熟练使用各种调试工具，善于使用调试方法来充分理解程序的执行
流程，发现并纠正其中潜在的错误。
正确对待分配给自己的软件问题（Bug），不推诿，不敷衍，积极
使用调试工具和提高可调试性的机制来定位问题根源，及时更新关
于问题的记录。
检查日志文件和其他调试机制所生成的信息，检查是否存在不正常
情况，并根据日志信息审查代码中可能存在的问题。
Robert Charles Metzger在其《Debugging by Thinking: A
Multidisciplinary Approach》一书中指出，导致现在的软件有如此多缺陷
的原因有很多，其中之一是很多程序员并不擅长调试。提高软件的可调
试性有利于降低程序员调试软件的难度，培养程序员的调试兴趣。
16.1.3 测试人员
在软件团队中，测试人员与开发人员之间经常发生争吵或相互埋
怨。测试人员会抱怨软件中存在的问题太多，并念叨一个以前修复了的
问题为什么又再次出现。开发人员会抱怨测试人员的问题报告含糊不
清，难以理解，或者报告的问题根本无法再现。提高软件的可调试性尽
管不能彻底解决这些矛盾，但是至少会从如下几个方面有所帮助。
高可调试性有利于程序员深刻理解代码的执行过程，提高对代码的
控制力，从根本上提高代码的质量，降低代码的问题率（每千行源
代码的Bug数）。另外，利用日志等调试机制，程序员可以在开发
阶段或单元测试阶段发现和解决更多问题，这样发布给测试人员的
软件质量就会明显提高。因此高可调试性有利于减少测试人员所发
现的问题（Bug）数，使他们集中测试程序员难以测试的情况。
测试人员可以利用调试机制来辅助测试并发现和描述问题。这样发
现的问题通常更容易被开发人员所理解和解决。
调试机制可以帮助测试人员理解软件的工作机理和内部状态，指导
测试方法，尽早发现问题，特别是深层次的问题。
从事白盒测试的测试人员可以利用调试机制审核代码和算法，当编
写测试脚本时，也可以使用调试机制所提供的设施来检测测试案例
的执行结果。
综上，提高软件的可调试性会给测试工作和测试人员带来直接的好
处。测试人员应该积极支持为提高可调试性所做的各种工作，并承担起
如下职责。
理解提高软件可调试性的重要意义，支持开发人员实现可调试性，
为他们提供测试支持。
充分利用可调试机制帮助测试工作，提高测试效率。这有利于进一
步发挥可调试机制的价值，进一步推动并提高软件的可调试性。
从根本上来说，测试的目的是发现软件问题，保证软件质量，按期
完成开发计划。如果有很多顶级问题（showstopper）难以解决，那么测
试人员与开发人员都会承受着很大的压力，从这个意义上来说，他们应
该共同为提高可调试性努力。
16.1.4 产品维护和技术支持工程师
在软件产品发布后，产品维护和技术支持工程师（以下简称支持工
程师）成为调试各种产品期问题的主要力量。在客户报告一个问题后，
支持工程师需要理解客户的描述，思考是用户使用的问题还是产品本身
的问题。如果可能是产品本身的问题，那么需要在自己的系统中重现这
个问题，然后利用各种调试手段定位问题的根源。这种情况下可能遇到
的一个棘手问题就是无法重现客户报告的问题。要解决这个问题，可能
不得不跑到客户那里去。但另一种更有效的办法就是通过软件的调试支
持，让软件自动收集各种环境信息和错误信息，并生成报告。然后，支
持人员可以利用这些报告来定位问题的根源。除了错误报告之外，日志
文件是支持工程师经常使用的另一主要途径，很多支持工程师使用日志
来寻找导致错误的原因和线索。总之，提高软件的可调试性对于产品期
调试和技术支持有着重要意义。技术支持工程师应该积极支持并推动软
件产品的可调试性，利用支持调试的设施解决问题，并将改善调试设施
的意见反馈给架构师和开发人员。
16.1.5 管理者
像David Cutler这样的代码勇士（Code Warrior）和软件天才是不喜
欢管理者干涉软件项目的。1975年，他在DEC带领一个十几个人的团队
开始开发VMS（Virtual Memory System，后来改名为OpenVMS）操作
系统。1977年VMS操作系统随着VAX计算机的发布而同时发布，这是
第一台商业化的32位计算机系统，也是计算机历史上硬件与操作系统一
起从头开发并一起发布的少量组合之一。VMS非常成功，这个成功使
DEC公司开始重视Cutler所带领的这个操作系统项目，很多管理者开始
频繁介入到项目中，这使David Cutler发怒了：“无论你要做什么，所有
的Tom、Dick和Harry都会跑过来挑三拣四，挡住项目的去路。”不久，
David Cutler离开了VMS团队，并声称要离开DEC，这让他的老板
Gordon Bell说出了那句经典的话：“带上你想要的任何人，去任何你想
去的地方，做任何你想做的事。DEC都会为你付钱，告诉我你需要多少
钱，我们会为你拨款。”这样好的老板感动了David Cutler，在新创建的
西雅图实验室，他开始了新的开发。1983年Gordon Bell离开DEC，1988
年David Cutler的Prism项目被取消，他因此离开了DEC[1]。
在开发NT的长达5年的时间里，尽管有多次延期，还有难以避免的
意见分歧，但是David Cutler始终得到了管理者强有力的支持。NT项目
给了他成就理想的机遇，他可以按照自己的想法设定目标，并有充分的
自由使其成为现实，没有管理层来管闲事。但这样和谐的氛围在今天的
软件开发中越来越少了。很多管理者脱离技术和项目的实际状况，武断
地干预开发计划，压缩项目时间。
实现可调试性会需要一定的开发资源，但是正如前面所讨论的，它
会带来很多好处：提高程序员的调试和开发效率；加快解决软件问题的
速度；使整个项目的可控性提高；通过辅助技术的支持降低产品维护成
本，等等。从这个意义上来说，提高可调试性有利于保证项目如期完成
并节约成本。所以，管理者应该充分支持为提高软件可调试性所做的努
力，为其分配足够的资源。
本节讨论了软件团队中的几个关键角色在提高实现软件可调试性方
面应该承担的职责。这些内容完全是作者根据个人经验进行的归纳，希
望读者能从中得到启发。对于具体的软件项目，应该根据实际情况为每
个角色定义更明确的职责。
16.2 可调试架构
架构是构建软件的蓝图，它决定了软件的基本结构和工作方式，包
括其中包含哪些模块，各模块间如何通信等。因为调试支持涉及软件的
总体结构，对整个软件的质量有着直接的影响，所以架构师在设计软件
结构时应该重视软件的可调试性，规划好支持调试的各种设施。
16.2.1 日志
日志对提高软件的可观察性和可追溯性都大有好处。好的日志反映
了软件的内部状态，特别是软件运行时遇到的异常情况，是调试软件问
题的宝贵资源。
日志大多是以文本文件方式记录的，但也可以记录在数据库中，或
者以二进制文件方式记录。记录日志并不复杂，但是方法很多，灵活性
很大。对于一个软件产品，应该使用一套统一的日志机制。
首先，日志信息应该集中存储在一个地方，这样不但有利于节约存
储空间，而且便于检索和维护。试想，如果一个软件的日志存储在很多
地方，需要到很多地方去寻找，那么当调试与很多软件有关的系统问题
时，调试人员可能根本找不到需要的日志文件。
其次，选择并定义一种方法来记录日志，可以使用操作系统的
API（如Windows的Event Log或CLFS），也可以自己写文件。但无论使
用哪种方法，都最好将其封装为简单的类或函数，将存储日志的细节隐
含起来，使程序员只要通过一个简单的函数调用就可以添加日志记录，
比如以下代码。
void Log(LPCTSTR lpszModule,    UINT nLogType,     LPCTSTR lpszMessage);
封装好的类或函数应该以公共模块的方式发布给所有开发人员。使
用统一的方法来添加日志记录，既有利于实现日志的集中存储，又简化
了程序员写日志所需的工作量，防止他们对写日志产生厌烦甚至抵触情
绪。
16.2.2 输出调试信息
输出调试信息是另一种常用的调试手段，与写日志相比，它具有更
加简单快捷的优点，通常需要的时间和空间开销也更小。输出调试信息
的常见方式有如下几种。
使用类似print这样的函数直接显示到某个输出设备。比如在DOS和
Windows的控制台程序中使用print语句，可以将信息直接显示到屏
幕或控制台窗口。这种方法也使用在某些嵌入式和移动设备（手
机）的开发中。
使用操作系统的API将调试信息输出到调试器或者专门的工具。典
型的例子是Windows的OutputDebugString函数。因为
OutputDebugString通过RaiseException API产生的一个特殊的异常来
发布调试信息，所以过于频繁地调用这个函数会对软件的性能产生
影响。
使用编译器提供的宏来显示调试信息，比如MFC类库提供的
TRACEn宏，n可以为0、1、2、3，并且代表格式字符串中包含的
参数个数，这几个宏实际上都调用AfxTrace函数。AfxTrace函数将
待输出的信息格式化为一个大的字符串并发送给一个名为afxDump
的全局变量。afxDump是CDumpContext类的一个全局实例。最终，
afxDump通过OutputDebugString将调试信息输出给调试器。类似
地，ATL类库提供了ATLTRACE2宏。TRACE宏最重要的特征就是
只在调试版本中有效，当编译发布版本时，它们会被自动替换为空