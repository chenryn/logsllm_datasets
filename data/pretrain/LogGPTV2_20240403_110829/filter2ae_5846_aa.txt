原文：
在这篇文章中，我将为读者详细介绍一种在Windows 10 x64系统上从用户空间向内核堆栈提供ROP链的方法，在本文中，我们称之为Shadow
ROP。在我看来，这种方法对Ring 0级别的漏洞利用非常有用，可以借此控制执行流程。
几个星期前，我开始了解Ring 0级别的漏洞利用技术。据我所知，还有很多人像我一样，在这方面还很陌生，所以，我们将从Ring
0级别的漏洞利用方法的一些基础知识开始讲起；不过，我想大家对于ROP的概念可能都已经耳熟能详了。
**漏洞的类型**
* * *
对于Ring 0级别的漏洞而言，我们主要关注下列两种可利用的类型：允许攻击者在内核空间（Write-What-Where）中读取/写入任意数据的漏洞类型，以及允许攻击者控制内核空间中线程的执行流程(指令指针)的类型。我们的重点关注对象是后者，其中涉及堆栈缓冲区溢出、UAF漏洞等。当然，除此之外，肯定还存在其他类型的漏洞，但它们不在本文的讨论范围之内。
**缓解措施**
* * *
我们至少应该考虑三种漏洞利用缓解措施：内核地址空间布局随机化（KASLR）、管理员模式执行保护（SMEP）和内核数据执行保护（DEP），所有这些保护措施在Windows
10上都是默认启用的。实践证明，KASLR并没有多大作用，因为对于中等完整性级别的进程来说，可以通过多种方式来泄漏内核和驱动程序的基址。而SMEP则是一个更强大的安全防护技术。它可以防止攻击者直接跳转到完全处于攻击者控制之下的用户空间地址。此外，由于内核DEP保护措施的存在，内核空间中使用的大多数数据都是不可执行的。
我们绕过SMEP的一般策略是，在跳转到用户空间中的shellcode之前，设法禁用该缓解措施。
**ROP应运而生**
* * *
面向返回编程( ROP
)是一种流行的技术，它是ret2libc的继承者，是专门用来绕过DEP保护措施的。由于内核映像足够大，所以，我们总能找到合适的gadget，并且，如果我们知道内核的基址的话，则可以翻转CR4寄存器的第21位来禁用SMEP，这样就可以轻松地构建ROP链了。其实，这种ROP链一点也不复杂，具体见下面的Python代码。
    chain += struct.pack('<Q', kernel_base + 0x597b)    # pop rcx; ret;
    chain += struct.pack('<Q', 0x506f8)                 # rcx
    chain += struct.pack('<Q', kernel_base + 0x108552)  # mov cr4, rcx; ret;
    chain += struct.pack('<Q', shellcode_addr)
这里的问题是，如何将ROP链传递给内核空间，以及如何使堆栈指针RSP指向ROP链，以使其能够正常使用。当然，这些问题都不是什么难题，例如，在简单的堆栈缓冲区溢出漏洞情形中，由于我们的数据将被复制到堆栈缓冲区中，所以，我们可以轻松搞定这些事情；但在其他情况下，如UAF漏洞情形中，事情就没有这么简单了。
**影子空间**