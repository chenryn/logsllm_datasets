# Title: Automated Formal Analysis of a Protocol for Secure File Sharing on Untrusted Storage

## Authors
Bruno Blanchet  
CNRS, École Normale Supérieure, INRIA  
Email: [bruno.blanchet@inria.fr](mailto:bruno.blanchet@inria.fr)

Avik Chaudhuri  
University of California at Santa Cruz  
Email: [avik.chaudhuri@ucsc.edu](mailto:avik.chaudhuri@ucsc.edu)

## Abstract
We conduct a formal security analysis of a state-of-the-art protocol for secure file sharing on untrusted storage using the automatic protocol verifier ProVerif. To our knowledge, this is the first automated formal analysis of a secure storage protocol. The protocol, which forms the basis of the Plutus file system, incorporates several innovative schemes such as lazy revocation and key rotation. These schemes enhance the protocol's performance but also complicate its security properties. Our analysis clarifies ambiguities in the design and uncovers previously unknown attacks on the protocol. We propose corrections and provide formal proofs of the security guarantees for the corrected protocol.

## 1. Introduction
Recent years have seen significant research focused on the security analysis of communication protocols. In some cases, previously undiscovered vulnerabilities have been found, leading to the correction of these protocols [23, 33, 40]. In other instances, the security guarantees of certain protocols have been misunderstood, necessitating clarification and, in some cases, formalization and proof [4, 33, 37]. This body of work underscores the difficulty of designing secure communication protocols and the importance of verifying their precise security properties.

While secure communication protocols have been extensively studied, secure storage protocols have received considerably less attention. Some secure storage protocols rely on secure communication, and it is expected that the techniques used for secure communication can be applied to these protocols. However, the unique characteristics of storage, particularly dynamic access control, pose security challenges that go beyond those typically addressed in communication protocols.

In this paper, we demonstrate the value of analyzing secure storage protocols and study an interesting example. Specifically, we analyze a state-of-the-art file-sharing protocol that uses cryptographic techniques to ensure secure storage on an untrusted server. This protocol underpins the Plutus file system [32]. The setting is noteworthy for several reasons:
- Compromised storage servers are a common threat, making it prudent not to trust them for security [34].
- The protocol follows a typical design for secure file sharing on untrusted storage, where data is stored encrypted and signed, and keys are managed by users. Several file systems, including SNAD [35], SiRiUS [28], and others since the 1990s [15], follow this basic design.
- The protocol includes new schemes like lazy revocation and key rotation, which improve performance in the presence of dynamic access control but complicate security properties.

Our analysis reveals that lazy revocation allows for more precise integrity guarantees than the naive scheme in [28]. With lazy revocation, if an untrusted writer is revoked, readers can distinguish between content written after the revocation and previous content, thereby trusting the former even if they do not trust the latter. Additionally, the computational security of key rotation schemes has recently generated significant interest [6, 7, 26]. Our analysis uncovers new integrity vulnerabilities in the protocol, even when the key rotation scheme is secure.

Formal techniques play a crucial role in our analysis. We model the protocol and verify its security properties using the automatic protocol verifier ProVerif, which is based on solid formal foundations, including the applied pi calculus and first-order logic. The formal language forces us to specify the protocol precisely and prove or disprove its security properties. This level of rigor offers several benefits:
- We identify a new integrity attack on the protocol with serious practical consequences, which had gone undetected for over four years.
- We propose a fix and formally prove its correctness. Both the attack and the correction are relative to a formal specification of integrity that is not immediately apparent from the informal specification in [32].
- We prove a weaker secrecy guarantee than the one claimed in [32] and show that their claim cannot be true.
- The formal exercise helps us notice and clarify ambiguities in [32] and find simpler attacks where more complex ones were known, improving our understanding of the protocol's subtleties.
- The use of an automatic verifier provides a higher level of confidence in our proofs compared to manual techniques, which are prone to errors.

Our results reaffirm that informal justifications (such as showing resistance to specific attacks) are insufficient for protocols. As far as we know, this is the first automated formal analysis of a secure storage protocol, and we expect our approach to be fruitful for other protocols in this area.

### Related Work
There is a substantial body of work on formal methods for the verification of security protocols, e.g., [1, 4, 8, 16, 29, 33, 37]. For more information, see [14]. Here, we focus on closely related work on the design and verification of secure file systems.

In file systems based on network-attached (object) storage protocols (NASD, OSD) [27, 30], distributed access control is implemented on trusted storage via cryptographic capabilities. A semi-formal security analysis of this protocol appears in [30], while [19–21] present formal models and manual security proofs in the applied pi calculus.

Among other protocols for secure file sharing on untrusted storage, the closest to the one we study are those behind the Cepheus [25], SiRiUS [28], and SNAD [35] file systems. Lazy revocation first appeared in Cepheus; see [31] for a summary of its origins and limitations. Keys for reading and writing files in SiRiUS are similar to those in Plutus, but they are stored and distributed securely by the server ("in-band") instead of being directly distributed by users ("out-of-band"). Revocation in SiRiUS is immediate, unlike the lazy revocation in Plutus. In SNAD, keys for reading files are distributed in-band, but there are no keys for writing files—any user can write content by signing it with their private key, and the storage server is trusted to control access to writes.

The protocol we study partially trusts the storage server to prevent rollback attacks, where content received from the file system is not the most recent content sent. The SUNDR file system [34] specifically provides a guarantee called fork consistency, allowing users to detect rollback attacks without trusting the storage server. The correctness of that protocol is formally proved in [34]. SUNDR does not focus on other secrecy and integrity guarantees.

Recently, several key rotation schemes have been proposed and manually proved in the computational model of security [6, 7, 26]. Various alternative schemes for key distribution and signatures have been designed to eliminate public-key cryptography in this context [36]. Mechanically verifying these schemes is an interesting direction for future work.

To ensure stronger information-flow properties, access control must be complemented by precise code analysis. Several type systems have been designed for this purpose [18, 22, 38, 42]. The type system in [18] is particularly suitable for proving such properties in the presence of dynamic access control and untrusted storage.

### Organization
The rest of the paper is organized as follows:
- Section 2 outlines the protocol behind Plutus.
- Section 3 provides an overview of ProVerif and presents our model of Plutus in ProVerif.
- Section 4 specifies and analyzes the secrecy and integrity properties of Plutus in ProVerif, presenting our results and observations.
- Section 5 discusses our contributions and concludes the paper.

## 2. Plutus
The Plutus file system [32] is based on a storage design that does not rely on storage servers to provide strong secrecy and integrity guarantees. Instead, file contents are cryptographically secured, and keys for writing and reading are managed by the owners of those files. Special schemes are introduced to optimize key distribution and cryptography in the presence of dynamic access control, complicating the protocol and its security properties.

In Plutus, principals are classified as owners, writers, and readers. Every file belongs to a group, and all files in a group share the same writers and readers. The owner of a group generates and distributes keys for writing and reading content for that group. Specifically, a write key is used to encrypt and sign content, while a read key is used to verify and decrypt such content. These keys can be revoked by the owner to dynamically control access to the files, and new keys are then generated and distributed appropriately. However, the new write key is used only for subsequent writes, unlike in SiRiUS [28], where files are immediately secured with the new write key. This scheme, called lazy revocation, avoids redundant cryptography and is justified by the following observations:
- Encrypting existing content with the new write key does not guarantee secrecy from previous readers, as the content may have been cached.
- Signing existing content with the new write key would incorrectly indicate that the content comes from the new writers.

Additionally, a key rotation scheme allows new readers to derive the previous read key from the new read key, avoiding redundant key distribution. New readers do not need to maintain the previous read key for reading existing content. In contrast, the new read key cannot be derived from the previous read key, so content written with the new write key can only be read by the new readers.

Concretely, a write key is of the form (sk, lk), where sk is part of an asymmetric key pair (sk, vk), and lk is a symmetric encryption key. The complementary read key is (vk, lk). Here, sk, vk, and lk are a sign key, a verify key, and a lockbox key, respectively. Content is encrypted with lk and signed with sk; it is verified with vk and decrypted with lk. Plutus uses the RSA cryptosystem [39], where sk = (d, n) and vk = (e, n). The modulus n is the product of two large primes p and q, and the exponents d and e are inverses modulo (p − 1)(q − 1), i.e., ed ≡ 1 mod (p − 1)(q − 1). Given a hash function hash, a message M is signed with sk by computing S = hash(M)d mod n, and S is verified with vk by checking that Se mod n = hash(M). We call (p, q) the RSA seed.

In general, e may be chosen randomly, relatively prime to (p − 1)(q − 1), and d may be computed from e, p, and q. In Plutus, e is uniquely determined by n and lk as follows: given a pseudo-random sequence hri generated with seed lk, e is the first prime number in the sequence hri + ni. We denote this algorithm by genExp(n, lk). To summarize, a sign/verify key pair (sk, vk) is generated from a random RSA seed (p, q) and a lockbox key lk by computing n = pq, e = genExp(n, lk), vk = (e, n), and sk = (d, n), where d is the inverse of e modulo (p − 1)(q − 1).

The owner of a group distributes (sk, lk) to writers and lk to readers. Users can further derive vk from n and lk using genExp. Note that n is already available to writers from sk. The owner also distributes a signed n to writers, which they attach whenever they write content to the file system. Thus, any user can obtain n from the file system and verify its authenticity. Writers can act for readers in Plutus, although [32] incorrectly claims that writers cannot derive vk, implying that read access is disjoint from writer access. It is known that writers can act for readers in SiRiUS in a similar way [28, 36].

Let (D, N) and (E, N) be the private and public keys of the owner of a group. The initial and subsequent versions of keys for writers and readers of that group are generated as follows:
- **Version 0**: The initial lockbox key lk0 is random, and the initial sign/verify key pair (sk0, vk0) is generated from a random RSA seed (with modulus n0) and lk0.
- **Version v to version v + 1**: When keys for version v are revoked, a new lockbox key lk(v+1) is generated by "winding" the previous lockbox key lk(v) with the owner’s private key: lk(v+1) = lk(v)^D mod N. The previous lockbox key can be retrieved by "unwinding" the new lockbox key with the owner’s public key: lk(v) = lk(v+1)^E mod N. A reader with a lockbox key lk(v0) for any v0 ≥ v can generate the verify key vk(v) by obtaining the modulus nv from the file system, recursively unwinding lk(v0) to lk(v), and deriving vk(v) from nv and lk(v) using genExp. The new sign/verify key pair (sk(v+1), vk(v+1)) is generated from a random RSA seed (with modulus n(v+1)) and lk(v+1).

While storage servers are not trusted to provide strong secrecy and integrity guarantees, they are still trusted to prevent unauthorized modifications through a scheme called server-verified writes. Specifically, the owner of a group generates a fresh write token for each version and distributes it to the writers of that version and to the storage server. The server allows a writer to modify the store only if the correct write token is presented, preventing revoked writers from reverting the store to a previous state or corrupting the current state.

## 3. ProVerif and a Formal Model of Plutus
To formally study Plutus, we use the automatic cryptographic protocol verifier ProVerif. We briefly introduce ProVerif and describe our model of Plutus below.

### 3.1. Overview of ProVerif
ProVerif is an automatic cryptographic protocol verifier based on the applied pi calculus and first-order logic. It allows for the formal modeling and verification of security properties, ensuring that the protocol is specified precisely and that security properties are proven or disproven with a high degree of rigor.

### 3.2. A Model of Plutus in ProVerif
We model the Plutus protocol in ProVerif, capturing the key generation, distribution, and usage processes. This model enables us to formally verify the secrecy and integrity properties of the protocol, as well as to identify and address potential vulnerabilities.