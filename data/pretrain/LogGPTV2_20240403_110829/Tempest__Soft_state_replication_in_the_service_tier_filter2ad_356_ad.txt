# Pet-Store Latency and Replication Analysis

## Overview
Figure 8 illustrates the latency of the Pet-Store service with varying numbers of replicas. Specifically, it highlights the CPU and I/O-bound service variance for 42 and 56 replicas, respectively. The service instances become overloaded if the number of replicas drops below three, leading to meaningless response times.

## Experimental Setup
We evaluated the Pet-Store as a "cloud" of seven services, including six services with characteristics from previous experiments and an additional baseline "null" service to measure the overhead caused by Tempest. Four clients performed multi-service requests (half queries, half updates) against the Pet-Store in a closed loop, each at a rate of once every 50 milliseconds. This rate was chosen to avoid overloading the platform and to observe queueing effects.

A multi-service request consists of n parallel requests sent to n distinct PetStore services, which is how the Pet-Store's front-end web page aggregates content.

## Response Time Distributions
Figure 7 shows the response time distributions for multi-service requests sent to all services. Each request issued by the front-end is sent in parallel to each of the seven services, and the front-end returns when all replies are received. Requests have a redundant querying parameter k=2. Each histogram represents the number of requests per bin, with each bin being 10 milliseconds wide. Two scenarios are presented: one without any replication and another with 8 replicas for each service, resulting in 7 distinct multicast groups of 8 servers each.

## Multi-Service Request Performance
Figure 8 presents the response times for multi-service requests, with standard error denoted by error bars. Each multi-request issued by the front-end randomly selects n distinct services, where n is the number of services per query, as shown on the x-axis. We used the adaptive query algorithm with the k parameter set to 1, 2, and 5. For the baseline, we used a simple query discovery algorithm where the first query for a service is multicast, and subsequent queries are sent to the replica that responded fastest to the multicast. Our findings indicate that adaptive redundant querying improves performance when replicas are not overloaded, with the most significant improvement observed for k = 2.

## Related Work
### Amazon's Dynamo
Amazon's Dynamo [10] provides a highly available key-value persistent storage system. It sacrifices consistency for availability and uses object versioning and application-assisted techniques for conflict resolution. Unlike Tempest, which fully replicates data structures, Dynamo works like a zero-hop distributed hash table (DHT) with data replicated over N predecessor nodes.

### Sinfonia
Sinfonia [1] introduces abstractions for building scalable distributed systems, replacing the message-passing model with a distributed shared memory abstraction. Developers design and manipulate data structures on a flat, unstructured, fine-grained shared address space. Sinfonia uses a lightweight minitransaction primitive for atomic access and conditional modification of data across distributed memory nodes.

### Soft State Mechanisms
Soft state mechanisms have been extensively used in network protocols [38, 15] and large cluster-based services like Porcupine [32] and others [17, 7, 34]. Proposals exist for extending the standard web-service model to include soft state, such as the Grid Computing standard [16]. Recovery-oriented computing [8] provides fast failover and availability but does not replace replication for load balancing.

### Distributed Data Structures
Distributed data structures have been proposed as building blocks for clustered services [21, 25], following a strictly defined consistency model where operations are atomic. The work in [39] is similar to Tempest, examining customizable durability levels through a single storage abstraction, including soft state that needs replication for high availability.

### Clustered Application Servers
Clustered application servers like BEA WebLogic [3], IBM WebSphere [22], and JBoss [23] store state in special containers, often within persistent databases. These solutions typically use distributed cache infrastructures, sometimes relying on third-party products like Oracle Coherence [29] or GemFire Enterprise [18].

### Fault-Tolerant Middleware
There has been extensive work in fault-tolerant middleware, particularly around CORBA [2, 28, 14], though much of this work does not consider interaction with a database third tier. DBFarm [31] scales multiple clustered databases using less reliable replicas.

### Google's Bigtable
Google's Bigtable [9] is a distributed storage system for managing petabytes of structured data across thousands of commodity nodes in a datacenter. It relies on the Google File System [19] for log and data files and the Chubby lock service [4] for metadata. These systems address problems orthogonal to Tempest, such as enabling high-volume computations over massive amounts of data.

## Conclusion
Modern three-tier architectures achieve scalability and responsiveness through the extensive use of soft state techniques in the service tier. Availability and rapid fail-over require data replication, and Tempest provides programmers with data structure abstractions for storing and managing replicated soft state. Tempest scales well in both the number of front-ends contacting a service and the number of services contacted by a front-end, outperforming in-memory databases in realistic settings. As a result, Tempest simplifies the construction of highly responsive systems that seamlessly mask load fluctuations and faults from end-users.

## Acknowledgements
We would like to thank our shepherd Jay Wylie for his insightful dialog, which significantly shaped the final version of the paper. We also thank our reviewers for their extensive comments and Danny Dolev for his support and guidance.

## References
[1] M. K. Aguilera, A. Merchant, M. Shah, A. C. Veitch, and C. T. Karamanolis. Sinfonia: a new paradigm for building scalable distributed systems. In SOSP, 2007.
...
[Additional references follow in the same format.]

---

This revised text aims to be more clear, coherent, and professional, with a structured and logical flow.