# CS的RCE利用研究
## 1.初步探索
**如何在Swing使用html**
官方文档中已经写出在Swing中使用的方式，只需要将`标记放在开头即可`
**接下来我们来测试利用一下**
如下所示，我创建了一个标签，将其内容通过`html`设置成了一个图片，这里也就是说，假设这个`JLabel`的标签内容我们可控，那么我们即可调用html代码，所以接下来去研究一下这个html在底层如何被执行成功的
打开`rt`的jar包`rt-javax-swing-text-html`
> rt.jar：代表runtime，包含所有核心Java 运行环境的已编译calss文件。
>
> javax：java里是核心包，javax是扩展包
这些就是跟我们HTML有关的类了，首先我们先来看一下`HTML`这个类，API文档中解释如下
**1\. 我们看一下HTML这个类有哪些东西**
它存在一个内部类`Tag`，它存在三个构造器（一个无参，两个有参）
​
调用有参构造，将大量平时我们看到过得html的标签名作为id，实例化了一堆Tag对象，并且最后将这些对象放入`allTags`数组
同样的还有一个`Attribute`内部类，存在一个有参构造，实例化了一堆Attribute，这里的参数名都是我们在html常见的标签属性，最后将这些内部类全部都存放在`allAttributes`数组里
**2\. 来看一下HTMLDocument类**
这里最显眼的肯定是这一堆Action，如下图所示，几乎将每个之前实例化的Tag都对应指定了一个`Action`类，比如下图的LinkAction，像ba，sa，ca，它们归根结底其实也是Action
这些Action在哪里被声明的呢？我们翻找一下，看到它们在`HTMLReader`类里，这个类是什么呢？说白了就是按照JAVA的格式来解析之前的不同HTML标签
而它继承于`HTMLEditorKit.ParserCallback`
**3\. 那我们再转到HTMLEditorKit，然后在ParserCallback倒是没发现什么，但是发现了一个HTMLFactory类**
顾名思义它是个工厂类，所以盲猜有点东西，发现它会根据不同的标签创建不同的VIEW
这里要注意到这个ObjectView，其实Object相关的东西不是在这里第一次出现了，例如HTML的OBJECT标签和ObjectAction
我们点进这个ObjectView，发现存在反射调用空餐构造器来实例化对象，并且这个类必须继承`Component`，然后调用`setParameters`函数
然后点进`setParameters`看一看，这里为了方便讲解，我直接把代码粘贴出来了，并以注释的形式来说明其功能，这里看着内容不少，但是实际上如果看进去我写的讲解其实很简单
    private void setParameters(Component comp, AttributeSet attr) {
            Class k = comp.getClass();
            BeanInfo bi;  //声明一个BeanInfo类型的对象（多态范畴，这个BeanInfo是个接口），这个BeanInfo属于javabean的内容范畴，那么什么是javabean呢，可以简单理解成一种特殊的类，遵从特定的规范，可以将1个或多个对象封装到一个对象（Bean）中
            try {
                    bi = Introspector.getBeanInfo(k);  //Introspector是一个工具类，用来操作javabean的属性，事件和方法，其中它的getBeanInfo函数，它的作用是对Java bean进行内省，并了解其所有属性，公开方法和事件，并遵守一些控制标志，最后返回的类型是GenericBeanInfo，所以这个bi对象其实是GenericBeanInfo
            } catch (IntrospectionException ex) {
                System.err.println("introspector failed, ex: "+ex);
                return;             
            }
            PropertyDescriptor props[] = bi.getPropertyDescriptors();
            for (int i=0; i  ​ JLabel extends-> JComponent extends-> Container extends-> Component
存在无参构造器
存在`text`属性，并且存在setText函数
然后代码改成如下所示
执行一下，发现调用成功
* * *
## 2\. 链路寻找
首先因为利用的类需要继承于Component，所以找到所有Component的子类
然后右键导出文本，并且将文本中cobaltstrike之前的内容全删掉
然后写个脚本整理一下格式（用python习惯了发现还是python香，但是想捡一捡java了就用java写了一个），这里要注意判断是否为内部类，正常我们使用forName函数，里面的参数如果是内部类必须要用这种格式--->`Class.forName("com.mxgraph.swing.mxGraphComponent$mxGraphControl");`，这是因为在java中编译之后内部类的class文件是独立存在的，跟外部类放在一个目录下名称为`外部类$内部类.class`
然后再根据是否存在无参构造器，是否有对应属性存在setXXX方法的条件进行筛选，这里初步筛选了126个方法，有点太多了，这里有大量的重复方法，我们需要将其排除，所以我这里先暂时将方法同名超过两次的排除
ok这回筛选出来只有28个了
然后就可以通过手动研判一下这些链路是否会有可以利用的，其实最终的利用链就是`JSVGCanvas-->setURI`这一条，我这时去寻找官方的文档，找到一个demo
demo如下：
    import org.apache.batik.swing.JSVGCanvas;
    import org.apache.batik.swing.gvt.GVTTreeRendererAdapter;
    import org.apache.batik.swing.gvt.GVTTreeRendererEvent;
    import org.apache.batik.swing.svg.GVTTreeBuilderAdapter;
    import org.apache.batik.swing.svg.GVTTreeBuilderEvent;
    import org.apache.batik.swing.svg.SVGDocumentLoaderAdapter;
    import org.apache.batik.swing.svg.SVGDocumentLoaderEvent;
    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;
    import java.awt.event.WindowAdapter;
    import java.awt.event.WindowEvent;
    import java.io.File;
    import java.io.IOException;
    public class SVGApplication {
        public static void main(String[] args) {
            JFrame f = new JFrame("Batik");
            SVGApplication app = new SVGApplication(f);
            f.getContentPane().add(app.createComponents());
            f.addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent e) {
                    System.exit(0);
                }
            });
            f.setSize(400, 400);
            f.setVisible(true);
        }
        JFrame frame;
        JButton button = new JButton("Load...");
        JLabel label = new JLabel();
        JSVGCanvas svgCanvas = new JSVGCanvas();
        public SVGApplication(JFrame f) {
            frame = f;
        }
        public JComponent createComponents() {
            final JPanel panel = new JPanel(new BorderLayout());
            JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));
            p.add(button);
            p.add(label);
            panel.add("North", p);
            panel.add("Center", svgCanvas);
            // 设置按钮的监听事件
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent ae) {
                    //这里是弹出文件选择框，然后判断是否为正常选择文件
                    JFileChooser fc = new JFileChooser(".");
                    int choice = fc.showOpenDialog(panel);
                    if (choice == JFileChooser.APPROVE_OPTION) {
                        //获取文件
                        File f = fc.getSelectedFile();
                        try {
                            //将文件转化成url，形如：file:/C:/Users/97339/Pictures/睡觉.svg
                            //然后利用setURI函数将svg图标展示到svgCanvas画布上
                            svgCanvas.setURI(f.toURL().toString());
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            });
            return panel;
        }
    }
注意这里我将下面的代码删除了，因为程序没用到它们
程序结果如下
既然如此，利用它加载本地svg文件太过于鸡肋，回到现实，我们还是想让它读取远程的svg文件，当然也可以
* * *
## 3\. 链路详解
这样我们就体会到了这个setURI的用法，它会通过URI加载一个svg，而svg中是可以调用js代码的，如下图所示，我这里存在一个`JS.svg`
但是这里报错，这里看报错信息就知道它是没有找到图中的相关类，
但是在报错的内容中还发现了如下所示的两个重要的函数
我们可以先点进`loadScript`中look look，我们发现`loadScripts`代码相对少很多，来啃一下
    public void loadScripts() {
            //这里利用getElementsByTagNameNS来获取命名空间为http://www.w3.org/2000/svg并且名称为script的元素，如果这里不理解的话往下看附录里面的getElementsByTagNameNS详解
            NodeList scripts = this.document.getElementsByTagNameNS("http://www.w3.org/2000/svg", "script");
            //svg对象为上方所示的JS.svg的话，这里的len即为1
            int len = scripts.getLength();
            for(int i = 0; i  ""
                        String href = XLinkSupport.getXLinkHref(script);
                        //这里的getBaseURI()用来获取svg数据源的url，然后作为参数创建了ParsedURL对象，ParsedURL继承于URL，我们这里先把它当成普通URL对象理解
                        ParsedURL purl = new ParsedURL(script.getBaseURI(), href);
                        this.checkCompatibleScriptURL(type, purl);
                        URL docURL = null;
                        try {
                            docURL = new URL(this.docPURL.toString());
                        } catch (MalformedURLException var14) {
                        }
                        //这里docURL先不用管，DocumentJarClassLoader是URLClassLoader的封装，URLClassLoader的作用是加载远程jar包，这里最重要的参数是第一个参数，它指定了远程jar包的地址，而第一个参数又是又purl对象生成的，而purl对象创建时同样存在两个url地址，上方new ParsedURL(script.getBaseURI(), href);代码中，真正指定的url地址其实为第二个参数，这里具体可以看附录里的《URL详解》
                        DocumentJarClassLoader cll = new DocumentJarClassLoader(new URL(purl.toString()), docURL);
                        //这里代表看看这个jar包里面有无META-INF/MANIFEST.MF文件，相当于一个判断，如果没有直接返回
                        URL url = cll.findResource("META-INF/MANIFEST.MF");
                        if (url == null) {
                            return;
                        }
                        //返回文件字节流并创建Manifest对象，Manifest类用于维护清单条目名称及其相关属性
                        Manifest man = new Manifest(url.openStream());
                        this.executedScripts.put(script, (Object)null);