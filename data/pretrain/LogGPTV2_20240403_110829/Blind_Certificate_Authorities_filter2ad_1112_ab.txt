### Secure Channel Injection for Anonymous Proof of Ownership and Blind Certificate Authorities

#### Introduction
All communication between the prover and the domain is conducted via a proxy, which acts as the verifier. Using secure computation techniques, we demonstrate how to allow the verifier to inject a secret challenge at a designated point into this encrypted connection. We refer to this subprotocol as **secure channel injection (SCI)**. Our methods ensure that the prover has no information about the secret challenge, and the only way to recover it is by accessing the recipient's email account. To prove ownership, the prover accesses their other email account, extracts the challenge, and presents it to the verifier. A diagram of the secure-channel injection is shown in Figure 2.

#### Secure Channel Injection (SCI)
To build an anonymous Proof of Ownership (PAO) and blind Certificate Authority (CA), we develop an underlying primitive called **secure channel injection (SCI)**. The concept allows a party to inject a small amount of information into a secure connection between a client and a server. In the context of ownership proof, the client is the prover, the server is the authenticated service, and the verifier is the party injecting the data. In our implementation, the verifier will be a specialized proxy that relays traffic between the prover and the service. While we explore the use of SCI protocols in the context of anonymous PAOs, future work may uncover other applications.

#### General Tools for Secure Computation
General tools for secure computation enable computing SCI for any ciphersuite of TLS but can be computationally expensive. We demonstrate efficient realizations of secure channel injections for TLS with two ciphersuites:
1. **TLS with cipher block chaining mode of operation (AES-CBC) with HMAC-SHA256 authentication**.
2. **AES with Galois counter mode (AES-GCM)**.

In the first case, we construct a protocol whose most expensive step is a two-party secure computation protocol on a circuit consisting of a small number of AES computations (plus exclusive-or operations). This approach leverages recent advancements in two-party secure protocol construction for computing AES. In the second case, the only expensive operation is an oblivious polynomial evaluation needed for computing the authentication data, and no secure computation of AES is necessary. We prove the security of our protocols in the random oracle model.

#### Role of the Proxy
In both cases, the role of the proxy is constrained. Our protocols ensure that even an actively malicious proxy cannot mount an arbitrary man-in-the-middle attack but can only insert a limited amount of data.

#### Detailed Approach
In the following sections, we provide the details of our approach:
- **Secure-Channel Injection Protocols (§III)**: We present the protocols and how to realize them for TLS.
- **Realization for TLS (§IV)**: We show how to use SCI to build anonymous PAOs for email and, ultimately, our blind CA for email (§V).

#### Use Cases
For clarity, we provide example use cases for which blind CAs may be useful:
1. **Whistleblower Scenario**: Consider a bank as the organization and a whistleblower as the prover who must prove to a reporter their status as an insider without revealing their identity. The bank is unlikely to set up an anonymous credential system, but using a blind CA, the bank remains unaware that it is being used as an identity provider.
2. **Cinderella Voting System**: An anonymous credential system that can perform X.509 certificate verification via zero-knowledge proofs can be used with anonymous voting services to hide voters' identities. However, if each voter already has a unique X.509-compatible personal certificate, and the CA cooperates with the voting services, it’s easy to recover the true identity of a voter under a given pseudonym. Using a blind CA instead ensures that identities are never learned or collected by the CA (assuming no collusion with the email service).

### III. Secure Channel Injection

A **secure channel injection (SCI) protocol** is a three-party protocol involving a client, a proxy, and a server. It is parameterized by a message template \( M_t = (|M_p^t|, |M_s^t|, |M^*|) \), where \( M_p^t \) and \( M_s^t \) are the message prefix and suffix, respectively, and \( M^* \) is the injected message. The client holds \( M_p^t \in \{0, 1\}^{|M_p^t|} \) and \( M_s^t \in \{0, 1\}^{|M_s^t|} \) as input, and the proxy injects a random message/challenge \( M^* \in \{0, 1\}^{|M^*|} \) into the interaction. We follow the standard definition for secure computation in the malicious adversarial model.

#### Functionality 1: Message Injection
- **Input**: The client holds some input prefix message \( M_p^t \in \{0, 1\}^{|M_p^t|} \). The proxy holds some message \( M^* \in \{0, 1\}^{|M^*|} \) chosen from a high-entropy source. The server has no input.
- **Output**: The server outputs \( (M_p^t, M^*, M_s^t) \). The proxy and client have no output.

The following simple protocol computes the aforementioned functionality: The proxy chooses a message \( M^* \) uniformly at random, and both the client and proxy transmit their messages to the server. However, we are interested in protocols that compute this functionality and satisfy the following properties:
1. **Fixed Server Code**: The code of the server in the secure channel injected protocol is fixed, and the messages sent by the client and proxy must match a specific syntax.
2. **No Direct Communication**: There is no direct communication channel between the client and the server. All messages are delivered through the proxy.

#### Security Properties
- **Injection Secrecy**: The client cannot learn \( M^* \) during the protocol interaction.
- **Transcript Privacy**: The proxy does not learn anything about messages other than \( M^* \).
- **Transcript Integrity**: The proxy should not be able to modify parts of the message transcript besides \( M^* \).
- **Server Obliviousness**: The server cannot distinguish an SCI execution from a standard execution of the underlying SC protocol with the client.

#### Network Assumptions
- **Indirect Communication**: The client and the server cannot communicate directly, and their communication is delivered through the proxy.
- **Local Network Traffic**: Each party can only observe their local network traffic. The server cannot access the network transcripts between the client and the proxy, and the client cannot access the network transcripts between the proxy and the server.
- **No Network Manipulation**: We do not consider attackers capable of manipulating network routing or injecting spoofed packets.

#### Relaxations of Functionality 1
For conceptual simplicity, we presented Functionality 1 for the most simplified settings. To design more efficient protocols, a more complex functionality is necessary. The modifications allow the proxy to learn some leakage on \( M_p^t \) (such as known headers or part of the messages the client does not have to hide). For the AES-GCM SCI protocol, the ideal functionality additionally allows the client to "shift" the injected message \( M^* \) by sending the trusted party some message \( \Delta \) (and letting the output of the server be \( (M_p^t, M^* + \Delta, M_s^t) \)).

### IV. SCI for TLS
We focus on TLS as the secure channel. Using common MPC techniques, such as Yao's protocol or fully homomorphic encryption, every secure channel protocol can be converted into an SCI. However, these general techniques would be expensive due to the complexity of the TLS record construction. We can do better by taking advantage of the way TLS encryption works. We focus on the commonly used options:
1. **AES using CBC with HMAC-SHA-256**: This mode is widely used in TLS 1.1 and 1.2. We show how to build an SCI for it in Section IV-A. Our protocol requires general-purpose MPC on just a few invocations of AES, making it fast.
2. **AES with Galois / Counter mode (AES-GCM)**: We provide the SCI protocol in Appendix B. Our protocol relies on oblivious polynomial evaluation.

In the sequel, we focus on AES using CBC with HMAC-SHA-256 (Section IV-A).

#### A. TLS with AES-CBC and HMAC-SHA256
[Detailed technical content for TLS with AES-CBC and HMAC-SHA256 follows here.]