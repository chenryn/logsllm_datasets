all communication between the prover and the domain
would be performed via a proxy, which would be the
veriﬁer. Using secure computation techniques, we show
how to allow the veriﬁer to inject a secret challenge at
some designated point into this encrypted connection.
We call this subprotocol secure channel injection. Our
techniques guarantee that the prover has no information
about the secret challenge, and the only way to recover
it is by accessing the recipient email account. To prove
ownership, the prover accesses her other email account,
extracts the challenge and presents it to the veriﬁer. A
diagram of secure-channel injection appears in Figure 2.
Secure channel injection. To build an anonymous PAO
and blind CA, we will develop an underlying primitive
that we refer to as secure channel injection (SCI). The idea
is to allow a party to inject a (relatively) small amount of
information into a secure connection between a client and
server. In the ownership proof context, the client will be
the prover, the server will be the authenticated service, and
the veriﬁer will be the party injecting data. In our realiza-
tions the latter will end up being a specialized proxy that
(cid:18)(cid:17)(cid:18)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:08 UTC from IEEE Xplore.  Restrictions apply. 
relays trafﬁc between the prover and the service. While we
explore use of SCI protocols in the context of anonymous
PAOs, future work might surface other applications.
General tools for secure computation enable computing
SCI for any ciphersuite of TLS, but could be expensive.
We demonstrate efﬁcient realization of secure channel
injections for TLS with two ciphersuites: (1) TLS with
cipher block chaining mode of operation (AES-CBC) with
HMAC-SHA256 authentication, and (2) AES with Galois
counter mode (AES-GCM). In the ﬁrst case, we construct
a protocol whose most expensive step is a two-party
secure computation protocol [60] on a circuit consisting
of a small number of AES computations (plus exclusive-
or operations). Our approach is demonstrably feasible and
leverages all of the recent advancements in two-party
secure protocol construction for computing AES. In the
second case we construct a protocol which the only expen-
sive operation is an oblivious polynomial evaluation [26,
29, 30, 43] needed for computing the authentication data,
and no secure computation of AES is necessary. We prove
security of our protocols in the random oracle model.
In both cases the role of the proxy is constrained —
our protocols ensure that even an actively malicious proxy
cannot mount an arbitrary man-in-the-middle attack, but
only are able to insert a constrained amount of data.
In the next couple of sections we go through the details
of our approach. We ﬁrst present secure-channel injection
protocols (§III) and how to realize them for TLS (§IV).
We then show how to use SCI to build anonymous PAOs
for email and, ultimately, our blind CA for email (§V).
Use cases. For concreteness, we provide example use
cases for which blind CAs may be useful:
(1) Consider when the organization is a bank and the
prover is a whistleblower that must prove to a reporter
her status as an insider without revealing her identity.
The bank is unlikely to aid the user by setting up an
anonymous credential system. Using blind CA, the bank
is unaware that it is being used as an identity provider.
(2) Cinderella, an anonymous credential system that
can perform X.509 certiﬁcate veriﬁcation via zero-
knowledge proofs, can be used with anonymous voting
services to hide voters’ identities (i.e., subject
id in
the X.509 certiﬁcate) [18]. However, it assumes each
voter already has a unique X.509-compatible, personal
certiﬁcate, and uses a voter’s public key and other
public information to generate a pseudonym for the
voter. Once CAs cooperate with the voting services,
it’s easy to recover the true identity of a voter under
a given pseudonym. If one used a blind CA instead,
then identities are never learned, let alone collected, by
the CA (assuming no collusion with the email service).
III. SECURE CHANNEL INJECTION
by
server,
a message
A secure channel
injection (SCI) protocol
parameterized
t |,|M∗|,|M s
is a
three-party protocol between a client, a proxy, and
a
template
Mt = (|M p
t |), which can be thought of
as a “placeholder” for actual messages. The client holds
t ∈ {0, 1}|M p
t |
as input a message preﬁx M p
and a
t ∈ {0, 1}|M s
t |
message sufﬁx M s
, communicates with
the server, where the proxy is interested in “injecting”
a random message/challenge M∗ ∈ {0, 1}|M∗|
into that
interaction. We follow the standard deﬁnition for secure
computation in the malicious adversarial model (e.g.,
[13,28]). The secure channel injection protocol computes
Functionality 1.
t |))
t |,|M∗|,|M s
Functionality 1: Message Injection (parameterized with
a message template: Mt = (|M p
t ∈
• Input: The client holds some input preﬁx message M p
{0, 1}|M p
t |
. The proxy holds
some message M∗ ∈ {0, 1}|M∗|
that was chosen from
some high-entropy source. The server has no input.
• Output: The server outputs (M p
and the client have no output.
t ∈ {0, 1}|M s
t |
t , M∗, M s
and sufﬁx M s
t ). The proxy
The following simple protocol computes the afore-
mentioned functionality: The proxy chooses a message
M∗
uniformly at random, and both client and proxy just
transmit their messages to the server. However, we are
interested in protocols that compute this functionality but
also satisfy the following two properties:
• First, we are interested in protocols where the code of
the server is already “ﬁxed”, and the messages that the
client and the proxy send to the server must match some
speciﬁc syntax. Speciﬁcally, the protocol is additionally
parameterized by a secure channel protocol SC =
(SCCl,SCS). The code of the server in the secure
channel injected protocol is ﬁxed to SCS,1 modeling
the fact that the proxy has to “inject” a message into
an existing secure channel communication SC between
the client and the server.
• Second, the network setting is such that there is no di-
rect communication channel between the client and the
server. All messages between these parties are delivered
through the proxy. In particular, this already requires
the client to encrypt its messages as the proxy should
not learn any information about M p
t (besides the
already known message template, i.e., known sizes).
For the purposes of description it sufﬁces to give a sim-
pliﬁed view of secure channel (SC) protocols. Let SC =
(SCCl,SCS) consist of a key exchange phase followed
t , M s
1The only exception is that, in order to have a meaningful deﬁnition
of the problem, we change the code of the server, letting it output
the decrypted transmitted messages M1, . . . , Mm in case of successful
authentication. If the authentication fails, it outputs ⊥.
(cid:18)(cid:17)(cid:18)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:08 UTC from IEEE Xplore.  Restrictions apply. 
by transmitting r ciphertexts E(K, M1), . . . , E(K, Mr)
from the client to the server encrypted under a symmetric
encryption algorithm E and session key K, regardless
of whether it is stateful or not. Recall that we follow
the standard deﬁnition for secure computation in the ma-
licious adversarial model (e.g., [13, 28]), for analyzing
whether a protocol securely realizes a given functionality.
This leads us to the following deﬁnition of a secure
channel injection:
Deﬁnition 2 (Secure Channel Injection). Let SC =
(SCCl,SCS) be a secure channel protocol between a
client and a server. We say that a three party protocol
SCI = (ΠCl, ΠP r, ΠS) is a secure channel injection
protocol for SC, if the following conditions hold: (1) SCI
securely realizes Functionality 1, and (2) ΠS = SCS.
Security properties. As for condition (1) in Deﬁnition 2,
we require that security holds when either the client or
the proxy is malicious (meaning, it can deviate arbitrarily
from the protocol speciﬁcation), or the server is an honest-
but-curious adversary, meaning it might try to violate
security by inspecting the sequence of packets sent to
and from it and the sequence of plaintext messages, but
it won’t maliciously deviate from the protocol speci-
ﬁcation. Our deﬁnition guarantees the following basic
security goals:
(1) Injection secrecy: The client cannot learn M∗
during
.
.
(2) Transcript privacy: The proxy does not learn anything
the protocol interaction.2
about messages other than M∗
(3) Transcript integrity: The proxy should not be able to
modify parts of the message transcript besides M∗
(4) Server obliviousness: Condition (2) in Deﬁnition 2
guarantees that the server cannot distinguish an SCI
execution from a standard execution of the underlying
SC protocol with the client.
We assume that the IP address of the proxy does not, by
itself, sufﬁce to violate server obliviousness. We empha-
size that as opposed to the server (which is oblivious to
the fact that it is not participating in a standard execution
of the underlying SC protocol with the client), the client is
well-aware that this is not a standard execution. In fact, the
client intentionally collaborates with the proxy in order
to enable it to inject the secret message M∗
, and the two
parties together compute a valid record that contains the
injected message. The client and the proxy together can
therefore be viewed as a single uniﬁed client interacting
with the server in a standard secure channel protocol.
Network assumptions. As mentioned before, we assume
that the client and the server cannot communicate directly,
2In our applications of SCI, the client will eventually learn M∗ by
retrieving it later from the server. But it should not be learned before.
and their communication is delivered through the proxy.
We also assume each party can only observe their local
network trafﬁc. That is, the server cannot access the
network transcripts between the client and the proxy
(otherwise, we can never achieve server obliviousness),
and the client cannot access the network transcripts be-
tween the proxy and the server (otherwise, we cannot
simultaneously achieve transcript injection secrecy with
server obliviousness).
We will not consider attackers who are capable of ma-
nipulating network routing and injecting spoofed packets.
This rules that the situation that the client bypasses the
proxy and spoofs and session between the proxy and the
server. Other types of attacks that are not directly related
to the goals of adversaries as mentioned above, such as
denial-of-service attacks, are not taken into account. We
also don’t yet consider implementation-speciﬁc attacks
such as vulnerabilities in the proxy software.
Relaxations of Functionality 1. For conceptual sim-
plicity, we presented Functionality 1 for the most simpli-
ﬁed settings. In order to design more efﬁcient protocols,
however, a somewhat more complicated functionality is
necessary. In a nutshell, the modiﬁcations allow the proxy
to learn some leakage on M p
t (such as known headers
or part of the messages the client does not have to hide).
For the AES-GCM SCI protocol (see Appendix B) the
ideal functionality additional allows the client to “shift”
the injected message M∗
by sending the trusted party
some message Δ (and letting the output of the server be
(M p
t )). This sufﬁces for our application as
this functionality satisﬁes injection secrecy.
t , M∗ + Δ, M s
t , M s
We now turn to design cryptographic protocols for
which we can prove that they realize the SCI ideal func-
tionality (without relying on any trusted third party).
IV. SCI FOR TLS
We focus in this paper on TLS as the secure chan-
nel. Using common MPC techniques, such as Yao’s pro-
tocol [60] or fully homomorphic encryption [25], ev-
ery secure channel protocol can be converted into an
SCI. However, these general techniques would be expen-
sive due to the complexity of the TLS record construc-
tion, which involves computations for HMAC, AES, and
record padding. We can do better by taking advantage of
the way TLS encryption works. While there are several
options supported in the wild, we focus on the currently
commonly used ones:
(1) AES using CBC with HMAC-SHA-256. This mode
is widely used in TLS 1.1 and 1.2, and we show
how to build for it an SCI in Section IV-A. Our
protocol requires general-purpose MPC on just a few
invocations of AES, making it fast.
(cid:18)(cid:17)(cid:18)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:08 UTC from IEEE Xplore.  Restrictions apply. 

	



	
	



	

Fig. 3: The MAC-then-encrypt construction in TLS (version (cid:2) 1.1).
HDR is a 40-bit TLS record header and SQN is a 64-bit sequence
number. IV has a ﬁxed size of 128-bits. The size of the HMAC tag
depends on the hash functions being used in HMAC. Before AES
encryption, the record will be padded to a multiple of 128 bits [21, 22].
(2) AES with Galois / Counter mode (AES-GCM). We
provide the SCI protocol in Appendix B. Our protocol
relies on oblivious polynomial evaluation.
In the sequel, we focus on AES using CBC with HMAC-
SHA-256 (Section IV-A).
A. TLS with AES-CBC and HMAC-SHA256