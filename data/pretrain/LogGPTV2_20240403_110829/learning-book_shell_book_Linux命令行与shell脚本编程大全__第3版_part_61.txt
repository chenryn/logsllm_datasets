arg1=$(echo S(nyazray [*1)1
([+]ansex)s 1sT Aexxe mou ea. ouos
$./test12
The orlginal array ig: 1 2 3 4 5
The nev array ie: 2 4 6 8 10
---
## Page 384
17.5函数退归
369
该脚本用sarg1变量将数组值传给arraydblr函数。arraydblr函数将该数组重组到新的数
组变量中，生成该输出数组变量的一个副本。然后对数据元素进行遍历，将每个元素值翻倍，并
将结果存人函数中该数组变量的副本。
arraydblr函数使用echo语句来输出每个数组元素的值。脚本用arraydblr函数的输出来
重新生成一个新的数组变量。
17.5函数递归
17
局部函数变量的一个特性是自成体系。除了从脚本命令行处获得的变量，自成体系的函数不
需要使用任何外部资源。
这个特性使得函数可以递归地调用，也就是说，函数可以调用自已来得到结果。通常递归函
数都有一个最终可以选代到的基准值。许多高级数学算法用递归对复杂的方程进行逐级规约，直
到基准值定义的那级。
递归算法的经典例子是计算阶乘。一个数的阶乘是该数之前的所有数乘以该数的值。因此，
要计算5的阶乘，可以执行如下方程：
51 = 1 * 2 * 3 * 4 * 5 = 120
使用递归，方程可以简化成以下形式：
x1 = x  [x-1] 
也就是说，x的阶乘等于x乘以x-1的阶乘。这可以用简单的递归脚本表达为：
function factorial[
1f 1 $1  -eq 1 1
then
echo 1
e1se
[ - S 1s=du teo
local result='factorial$temp
[1$ + 1nsexs 1soqo8
f1
阶乘函数用它自己来计算阶乘的值：
$ cat test13
 using recuraion
#1/bin/ba.sh
function factorial{
if 1 $1 -eq 1 1
then
echo 1
e1se
loca1 temp=$[ $1 - 1 1
local result=S (factorlal $temp)
f 1
---
## Page 385
370
第17章创建函数
9nTes , :ontes xsqug。 d- peo.
echo *The factoxlal of Svalue ls: $result *
result=§ (factorlal Svalue)
$./test13
The factorlal of 5 is : 120
Enter value: 5
使用阶乘函数很容易。创建了这样的函数后，你可能想把它用在其他脚本中。接下来，我们
来看看如何有效地利用函数。
17.6创建库
使用函数可以在脚本中省去一些输人工作，这一点是显而易见的。但如果你碰巧要在多个脚
本中使用同一段代码呢？显然，为了使用一次而在每个脚本中都定义同样的函数太过麻烦。
有个方法能解决这个问题！bash shell允许创建函数库文件，然后在多个脚本中引用该库文件。
这个过程的第一步是创建一个包含脚本中所需函数的公用库文件。这里有个叫作myfuncs的
库文件，它定义了3个简单的函数。
my scxipt functlong
$ cat myfunca
functlon addem (
[ 2$ + 1s 1s oqoe
functlon multen(
[ 2$ ▪ 1s 1s oqoe
functlon divem (
if [ $2 -ne 0 ]
then
[zs / s 1s ouoe
else
echo -1
f1
~ )
下一步是在用到这些函数的脚本文件中包含myfuncs库文件。从这里开始，事情就变复杂了。
问题出在shell函数的作用域上。和环境变量一样，shell函数仅在定义它的shell会话内有效。
如果你在shell命令行界面的提示符下运行myfuncs shell脚本，shell会创建一个新的shell并在其中
运行这个脚本。它会为那个新shell定义这三个函数，但当你运行另外一个要用到这些函数的脚本
时，它们是无法使用的。
这同样适用于脚本。如果你尝试像普通脚本文件那样运行库文件，函数并不会出现在脚本中。
---
## Page 386
17.7在命令行上使用函数
371
$ cat badtest4
#1/bin/bash
 using a library file the wrong way
/myfunca
result=$ (addem 10 15)
echo *The result la $result*
$./badtest4
./badtest4: asden: conmand not found
17
The result i8
使用函数库的关键在于source命令。source命令会在当前shell上下文中执行命令，而不是
创建一个新shell。可以用source命令来在shell脚本中运行库文件脚本。这样脚本就可以使用库
中的函数了。
source命令有个快捷的别名，称作点操作符（dot operator）。要在shell脚本中运行myfuncs
库文件，只需添加下面这行：
- /myEunca
这个例子假定myfuncs库文件和shell脚本位于同一目录。如果不是，你需要使用相应路径访
问该文件。这里有个用myfuncs库文件创建脚本的例子。
$ cat teat14
#1/bin/bash
using functlons Gefined in a llbrary file
.- /myfunca
value1=10
result1=S (addem $valuel $value2)
value2=5
regult2=S (multem $valuel $value2)
regult3=S(divem $valuel $value2)
echo *The result of adding them ls: $result1*
echo *The result of multiplying them ls: $result2*
echo *The result of dividing then ia: $result3*
S-/test14
The result of adding them is: 15
The result of multiplylng them is: 50
The result of dividing then la: 2
该脚本成功地使用了myfuncs库文件中定义的函数。
17.7在命令行上使用函数
可以用脚本函数来执行一些十分复杂的操作。有时也很有必要在命令行界面的提示符下直接
使用这些函数。
和在shel脚本中将脚本函数当命令使用一样，在命令行界面中你也可以这样做。这个功能很
---
## Page 387
372
第17章创建函数
不错，因为一旦在shell中定义了函数，你就可以在整个系统中使用它了，无需担心脚本是不是在
PATH环境变量里。重点在于让shel能够识别这些函数。有几种方法可以实现。
17.7.1在命令行上创建函数
因为shell会解释用户输人的命令，所以可以在命令行上直接定义一个函数。有两种方法。
一种方法是采用单行方式定义函数。
$ function diven ( eeho S[ $1 / $2 1: )
$ diven 100 5
$
当在命令行上定义函数时，你必须记得在每个命令后面加个分号，这样sheIl就能知道在哪里
是命令的起止了。
$ function doubleit ( read -p *Enter valuei * value; echo $[
$value * 2 ] }
$ doubleit
Enter value: 20
$
4.0
另一种方法是采用多行方式来定义函数。在定义时，bash shell会使用次提示符来提示输入更
多命令。用这种方法，你不用在每条命令的末尾放一个分号，只要按下回车键就行。
$ function multen
[$  ￥T$ 1s oua <
$ multem 2 5
{<
1. 0
在函数的尾部使用花括号，shell就会知道你已经完成了函数的定义。
警告在命令行上创建函数时要特别小心。如果你给函数起了个跟内建命令或另一个命令相同
的名宇，函数将会覆盖原来的命令。
17.7.2在.bashrc文件中定义函数
在命令行上直接定义shell函数的明显缺点是退出shell时，函数就消失了。对于复杂的函数来
说，这可是个麻烦事。
一个非常简单的方法是将函数定义在一个特定的位置，这个位置在每次启动一个新shell的时
候，都会由shell重新载入。
最佳地点就是.bashrc文件。bashshell在每次启动时都会在主目录下查找这个文件，不管是交
---
## Page 388
17.7在命令行上使用函数
373
互式shell还是从现有shell中启动的新shell。
1.直接定义函数
可以直接在主目录下的.bashrc文件中定义函数。许多Linux发行版已经在.bashrc文件中定义了
一些东西，所以注意不要误删了。把你写的函数故在文件末尾就行了。这里有个例子。
$ cat .bashrc
Source global definitions
17
if [ -r /etc/bashrc ]; then
fi
./ete/bashrc
function addem {
echo $[ $1 + $2 ]
S
2.读取函数文件
只要是在shell脚本中，都可以用source命令（或者它的别名点操作符）将库文件中的函数
添加到你的.bashrc脚本中。
$ cat .bashrc
orqseq*a
Source global definitions
if [ -r /etc/bashre ] then
fi
./ete/bashre
/home/trich/1ibraries/my funcs
要确保库文件的路径名正确，以便bash shell能够找到该文件。下次启动shell时，库中的所有
函数都可在命令行界面下使用了。
$ adden. 10 5
$ multen 10 5
1.5
$ diven. 10 5
50
更好的是，shell还会将定义好的函数传给子shell进程，这样一来，这些函数就自动能够用
于该shell会话中的任何shell脚本了。你可以写个脚本，试试在不定义或使用source的情况下，
直接使用这些函数。
$ cat test15
1/bin/bash
---
## Page 389
374
第17章创建函数
using a functlon defined in the _bashrc file
value1=10
value2=5
result1=$ (adden Svaluel $value2]
regult3=S Iáiven $valuel Svalue2]
regult2=$ (nulten $valuel $value2)
echo *The result of ading then la: Sreeult1*
echo *The result of dividing them is: $result3*
echo *The result of multiplying then ls: $result2*
The result of adding then la: 15
$./test15
The result of dividing then ia: 2
The result of multiplying then la: 50
甚至都不用对库文件使用source，这些函数就可以完美地运行在shell脚本中。
17.8实例
函数的应用绝不仅限于创建自己的函数自娱自乐。在开源世界中，共享代码才是关键，面这
一点同样适用于脚本函数。你可以下载大量各式各样的函数，并将其用于自已的应用程序中。
本节介绍了如何下载、安装、使用GNU shtool shell脚本函数库。shtool库提供了一些简单的
shell脚本函数，可以用来完成日常的shell功能，例如处理临时文件和目录或者格式化输出显示。
17.8.1下载及安装
首先是将GNUshtool库下载并安装到你的系统中，这样你才能在自己的shell脚本中使用这些
库函数。要完成这项工作，可以使用FTP客户端或者图像化桌面中的浏览器。shtool软件包的下载
地址是：
ftp://ftp- gnu,oxg/gnu/ahtool /shtoo12 ,0 .8 . tar - gz
将文件shtool-2.0.8.tar.gz下载到下载目录中。然后你可以使用命令行工具cp或是Linux发行版
中的图形化文件管理器（如Ubuntu中的Nautius）将文件复制到主目录中。
完成复制操作后，使用tar命令提取文件。
tax -zxvf shtool-2.0.8,tar-gz
该命令会将打包文件中的内容提取到shtool-2.0.8目录中。接下来就可以构建shell脚本库文件
了。
17.8.2构建库
shtool文件必须针对特定的Linux环境进行配置。配置工作必须使用标准的configure和
make命令，这两个命令常用于C编程环境。要构建库文件，只要输人：
---
## Page 390
17.8实例
375
$ -/confifgure
S nake
configure命令会检查构建shtool库文件所必需的软件。一旦发现了所需的工具，它会使用
工具路径修改配置文件。
make命令负责构建shtool库文件。最终的结果（shtoo1）是一个完整的库软件包。你也可
以使用make命令测试这个库文件。
S nake test
17
Running teat suite:
echo..........,ok
mdate......... ,ok
table..........ok
mkdir....
mkshadow......, ok
nkLn,
rotate..
, Ok
tarball....
, Ok
, ok
platforn......
gubat. -
 Ok
, Ok
81o.
, Ok
version.... 
CPP. ·
, Ok
, Ok
 Ok
OK: passed: 19/19
测试模式会测试shtool库中所有的函数。如果全部通过测试，就可以将库安装到Linux系统中
的公用位置，这样所有的脚本就都能够使用这个库了。要完成安装，需要使用make命令的
instal1选项。不过你得以root用户的身份运行该命令。
Ssu
Password: