q
e
R
300
200
100
100
101
102
103
104
105
Number of requests
Fig. 9: Throughput of the TS.
ECFChecker. In both cases, TS to verify incoming requests
requires local Ethereum testnets (no code changes at
the
deployed contracts or Ethereum software used by network
nodes are required, however). To improve throughput of the
tools we conﬁgure the testnets (i.e., geth [37]) to minimize
the latency between submitting and executing transactions.
For Hydra, we implement a simple contract in three different
programming languages and deploy it on a Hydra-supported
testnet. For ECFChecker, we deploy the vulnerable contract
presented in § V. We send 100 transactions each and measure
the average time needed by a tool to process a transaction.
In our setting, SMACS with Hydra needs 120ms to process
a request, while ECFChecker-supported SMACS can process
a request in only 10ms. Thus, with these tools SMACS can
handle around 8 and 100 token requests per second.
VII. DISCUSSION
A. Security
Our ﬁrst claim is that an adversary cannot bypass the access
control in SMACS. All contract’s public interfaces require the
token veriﬁcation process (see § IV-B). This process ensures
that a token is authentic (i.e., signed by the TS), non-expired,
and matches the calling transaction. The only way of obtaining
such a token is to request the TS which would verify the
request against its access rules. All valid tokens are signed
by the TS, therefore an adversary without passing the TS
validation or without the TS’ private key cannot get a valid
token for its transactions. Moreover, one-time tokens could
be issued only the clients satisﬁed the rules predeﬁned in
whitelist, guaranteeing one-time access even if an adversary
controls multiple addresses.
a) Substitution Attack: An attacker can intercept a trans-
action from a legitimate client, extract the token from it, and
then construct a transaction with the intercepted token. This
transaction will be rejected by the contract-side veriﬁcation,
since the signature of the TS creates a cryptographic binding
of the token and the context in which the token can be applied.
Any tiny change of the context (e.g., address, argument, etc.)
will be caught by the signature veriﬁcation process.
b) Replay Attack: An attacker can capture the transac-
tion originated from a legitimate client, and replay it in the
Ethereum network. This attack is against Ethereum itself and
cannot succeed since the built-in countermeasure of Ethereum
against replay attack will reject the replayed transaction. The
nonce value included in the transaction ensures that every
single transaction is unique. If a transaction has been accepted
by Ethereum, it will not be processed again. Moreover, the
client’s address is protected by a token’s signature, thus, the
attacker cannot extract and reuse others’ tokens. SMACS
implements in-contract replay protection for one-time tokens
by assigning each such a token with a unique index (set by
the TS) and recording every use of a one-time token in the
stored bitmap. A client can try to replay a one-time token by
creating a new transaction with the used token embedded. Such
a transaction will not trigger an actual execution of the targeted
method, as the token veriﬁcation procedure (see § IV-C) will
check whether the token index was already used, and in that
case deny access.
c) 51% Attack: In the 51%-attack an adversary possesses
more than 50% of the total voting power of the blockchain
network, what allows her to rewrite the blockchain history.
This kind of attacks is devastating as they allow to double-
spend, however, in our context even such a strong adversary
cannot bypass the SMACS access control. The adversary can
disorder or even remove transactions at will, compromising the
availability of smart contracts, but she cannot obtain a valid
token for a non-compliant transaction.
d) Privacy: SMACS moves access rules to TSes which
are off-chain services. Therefore deployed rules, veriﬁcation
tools, and their conﬁgurations are kept private and are not re-
vealed even to clients. As blockchain transactions are publicly
visible, an adversary can learn successful access control cases
and try to predict the applied rules, however it is still a black-
box analysis (in contrast to any in-contract access control).
B. Deployment
a) Availability: Requiring a TS to keep verifying and
signing tokens introduces a single point of failure, as with
the failed TS clients would not be able to interact with
the contract. Fortunately, TSes in SMACS are easy to scale
and replicate. For issuing tokens (without the one-time prop-
erty) providing availability is as easy as providing redundant
TSes that do not require any coordination (except a load-
balancer/failover system). If a TS service is offering one-time
tokens, then its replicas have to coordinate on the current
counter value (see § IV-C). That can be efﬁciently realized
via a replicated counter primitive usually implement upon a
standard consensus algorithm [38], [39].
b) Service Discovery: We implicitly assumed that clients
know how to reach the TS corresponding to a SMACS-enabled
smart contract. In practice, clients have to learn an URL
address of the service. We propose to implement this discovery
process by adding the service address as a smart contract
instance metadata (similarly as contract’s name or the compiler
version it was created with).
VIII. RELATED WORK
In practice, the community has developed some design pat-
terns and even third-party libraries to facilitate the application
of access control over smart contracts [25]. However, this
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:34:17 UTC from IEEE Xplore.  Restrictions apply. 
230
paradigm puts the burden of all access control logic and its
management on the smart contract itself. Due to the high cost
of on-chain resources, only simple and inﬂexible ACRs can
be developed using this approach (e.g., a blacklist or whitelist
with small size, a role-based ACRs supporting a very limited
number of roles, etc.). In summary, although smart contracts
access control is an obvious need and an important aspect of
smart contract security which has been extensively investigated
over the last years, we are not aware of any framework
similar to SMACS, which could implement complex ACRs
supporting runtime security veriﬁcation at a very low cost.
The most relevant research to SMACS is the investigation
and development of methodologies and tools for detecting
vulnerabilities of smart contracts, which can be divided into
two general categories: static and runtime security analysis.
a) Static Security Analysis: These methods or tools
mainly based on formal veriﬁcation and symbolic execution.
Oyente [8] and Manticore [9] are symbolic execution tools
for ﬁnding potential security bugs. Mythril [10] uses concolic
analysis, taint analysis, and control ﬂow checking to detect
multiple smart contract security vulnerabilities. Securify [11]
extracts semantic facts by performing advanced static anal-
ysis to prove the presence or absence of certain security
vulnerabilities. Zeus [40] employs model checking to verify
the correctness of smart contracts. MAIAN [41], processes
the bytecode of smart contracts and tries to build a trace of
transactions to ﬁnd and conﬁrm bugs based on inter-procedural
symbolic analysis. The list of tools are difﬁcult to enumerate
and new relevant tools are constantly emerging [20], [42], [43],
[44]. Most of these tools are meant to provide pre-deployment
security veriﬁcation. Thus they can only identify bugs (rather
than protect from them) for already deployed smart contracts.
Another drawback is that it cannot fully cover all runtime
behaviors and therefore is susceptible to missing novel runtime
attack patterns. In fact, this has been demonstrated in [13],
where new re-entrancy attack vectors are crafted which bypass
the security check of existing static analysis tools [40], [8].
We see this class of tools as orthogonal to SMACS, however,
we believe that in some cases they could be used in com-
bination providing security beneﬁts. For example, the owner
of a SMACS-enabled smart contract can scan the deployed
contract regularly with such tools (e.g., perform a vulnerability
scan whenever the security analysis tools get updated). Once
a vulnerability is detected, she can blacklist transactions with
speciﬁc patterns that can potentially trigger the vulnerability.
b) Runtime Security Analysis: In contrast to static secu-
rity analysis, tools [12], [14], [13] performing runtime moni-
toring has the potential to prevent deployed smart contracts
from being exploited. Hydra [14] enables post-deployment
security through N-of-N-version programming, a variant of
classical N-version programming that runs multiple inde-
pendent program instances to detect runtime security issues.
ECFChecker [12] is a runtime detection tool dedicated to
ﬁnding effectively callback free objects. This tool can be
used for ﬁnding Ethereum re-entrancy attacks. More detailed
overview of Hydra and ECFChecker can be found in § V.
Another interesting example is the Sereum [13] architecture,
a hardened EVM which is able to protect deployed contracts
against re-entrancy attacks in a backward compatible way by
leveraging taint tracking to monitor runtime behaviors of smart
contracts. Sereum can also be integrated into the SMACS
framework easily by using dedicated ACRs.
The main drawback of these tools is their requirement
of changing and upgrading the runtime environment. We
emphasize that in the replicate state machine model followed
by blockchain platforms, this implies that a majority of nodes
would need to update their EVMs to support such a tool.
SMACS enables contract owners to beneﬁt from these tools
without this requirement. Moreover, as we presented, these
tools can be easily and seamlessly integrated with SMACS.
Another preferable feature offered by combining runtime
security analysis tools with SMACS is that a vulnerable
smart contract may still operate normally, since only innocent
transactions pass through and suspicious transactions identiﬁed
by the tools are rejected at runtime.
IX. CONCLUSIONS
We presented SMACS, to the best of our knowledge, the
ﬁrst framework that achieves efﬁcient, ﬂexible, and ﬁne-
grained access control of smart contracts with low cost by
combining lightweight on-chain veriﬁcations and off-chain
access control management infrastructures. Apart from en-
abling malicious addresses prevention and abnormal runtime
behaviors resistance for smart contracts, SMACS offers sev-
eral preferable features. Firstly, when combined with runtime
veriﬁcation tools, a SMACS-enabled smart contract can deny
suspicious access attempts on the ﬂy while keeping operat-
ing for innocent transactions. Secondly, the architecture of
SMACS allows rules for enhancing post-deployment security
to be designed based on which it is possible to prevent vul-
nerabilities discovered after deployment from being exploited.
Therefore, it is meaningful to test SMACS-enabled contracts
with new veriﬁcation tools regularly and adjust
the rules
accordingly. Finally, due to the extensibility of the framework,
we could expect more security-related tools that can be applied
in SMACS to emerge in the future.
An interesting research direction is to investigate trusted
execution environments (TEEs, e.g., Intel SGX) in the context
of SMACS to fully decentralize it. For instance, a TS im-
plemented within a TEE enclave could decentralize the entire
system: an owner would just publish its ACRs which would
be validated by the enclave code running locally on a client
(without contacting any central service). We leave a detailed
design of such a system as future work.
ACKNOWLEDGMENT
We thank the anonymous reviewers and our shepherd Yinzhi
Cao for their valuable comments and suggestions. This re-
search is supported by the Ministry of Education, Singapore,
under its MOE AcRF Tier 2 grant (MOE2018-T2-1-111) and
by the SUTD SRG ISTD 2017 128 grant.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:34:17 UTC from IEEE Xplore.  Restrictions apply. 
231
REFERENCES
[1] V. Buterin, “Ethereum: A next-generation smart contract and decentral-
ized application platform,” 2013.
[2] N. Szabo, “Smart contracts: building blocks for digital markets,” EX-
TROPY: The Journal of Transhumanist Thought, 1996.
[3] “Rubixi bug,” https://bit.ly/2VifC3z, 2016.
[4] “Hackergold token bug,” https://bit.ly/2U9JQt1, 2017.
[5] “Dao exploit example,” https://bit.ly/2S3Y5cE, 2016.
[6] N. Atzei, M. Bartoletti, and T. Cimoli, “A survey of attacks on ethereum
smart contracts (sok),” 2017.
[7] L. Brent, A. Jurisevic, M. Kong, E. Liu, F. Gauthier, V. Gramoli, R. Holz,
and B. Scholz, “Vandal: A scalable security analysis framework for smart
contracts,” arXiv preprint arXiv:1809.03981, 2018.
[8] L. Luu, D.-H. Chu, H. Olickel, P. Saxena, and A. Hobor, “Making smart
contracts smarter,” in Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security, 2016.
[9] “Manticore symbolic execution tool.” https://github.com/trailofbits/
manticore, 2018.
[10] “Mythril tool.” https://github.com/ConsenSys/mythril, 2018.
[11] P. Tsankov, A. Dan, D. D. Cohen, A. Gervais, F. Buenzli, and M. Vechev,
“Securify: Practical security analysis of smart contracts,” in The 25th
ACM Conference on Computer and Communications Security, 2018.
[12] S. Grossman, I. Abraham, G. Golan-Gueta, Y. Michalevsky, N. Rinetzky,
M. Sagiv, and Y. Zohar, “Online detection of effectively callback free
objects with applications to smart contracts,” in 44th Proceedings of the
ACM on Programming Languages, 2017.
[13] M. Rodler, W. Li, G. O. Karame, and L. Davi, “Sereum: Protecting
existing smart contracts against re-entrancy attacks,” in 26th Network
and Distributed System Security Symposium, 2019.
[14] L. Breidenbach, I. Cornell Tech, P. Daian, F. Tramer, and A. Juels, “Enter
the hydra: Towards principled bug bounties and exploit-resistant smart
contracts,” in 27th USENIX Security Symposium, 2018.
[15] S. Underwood, “Blockchain beyond bitcoin,” Communications of the
[16] K. Korpela, J. Hallikas, and T. Dahlberg, “Digital supply chain trans-
formation toward blockchain integration,” in Proceedings of the 50th
Hawaii international conference on system sciences, 2017.
[17] Y. Hirai, “Formal veriﬁcation of deed contract
in ethereum name
ACM, 2016.
service,” 2016.
[18] S. Amani, M. Bégel, M. Bortin, and M. Staples, “Towards verifying
ethereum smart contract bytecode in isabelle/hol,” in Proceedings of the
7th ACM SIGPLAN International Conference on Certiﬁed Programs and
Proofs. ACM, 2018.
[19] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Gollamudi,
G. Gonthier, N. Kobeissi, N. Kulatova, A. Rastogi, T. Sibut-Pinote,
[35] “Blockspur,” https://bit.ly/2TOvOZu, 2018.
N. Swamy et al., “Formal veriﬁcation of smart contracts: Short paper,”
in Proceedings of the 2016 ACM Workshop on Programming Languages
and Analysis for Security. ACM, 2016.
[20] I. Grishchenko, M. Maffei, and C. Schneidewind, “Foundations and tools
for the static analysis of ethereum smart contracts,” in International
Conference on Computer Aided Veriﬁcation. Springer, 2018.
[21] D. Mohanty, “Basic solidity programming,” in Ethereum for Architects
and Developers. Springer, 2018.
[22] F. Zhang, E. Cecchetti, K. Croman, A. Juels, and E. Shi, “Town crier:
An authenticated data feed for smart contracts,” in The 23rd ACM
Conference on Computer and Communications Security, 2016.
[23] “Globally available variables in solidity,” https://solidity.readthedocs.io/
en/v0.4.24/units-and-global-variables.html, 2018.
[24] “The whitelist cost in bluzelle,” https://bit.ly/30AYloI, 2018.
[25] “Openzeppelin,” https://openzeppelin.com/, 2019.
[26] I. Weber, V. Gramoli, A. Ponomarev, M. Staples, R. Holz, A. B. Tran,
and P. Rimba, “On availability for blockchain-based systems,” in IEEE
36th Reliable Distributed Systems Symposium, 2017.
[27] “Hydra tool,” https://github.com/IC3Hydra/Hydra, 2018.
[28] “Dao exploit discovery,” https://bit.ly/2X4y0y7, 2016.
[29] “Ecfchecker tool,” https://github.com/shellygr/ECFChecker, 2018.
[30] “web3.js,” https://web3js.readthedocs.io/en/1.0/.
[31] “Eth gas station,” https://ethgasstation.info/, 2018.
[32] “Top contracts by number of transactions by 2019,” https://blockspur.
com/ethereum_contracts/transactions, 2019.
[33] “Ethereum maximum throughput,” https://bit.ly/2H7wrY1, 2018.
[34] “Address of cryptokitties smart contract,” https://bit.ly/33SQeFH.
[36] “Etherscan,” https://etherscan.io/, 2018.
[37] “Geth: Ofﬁcial golang implementation of the ethereum protocol.” https:
//github.com/ethereum/go-ethereum.
[38] M. Burrows, “The chubby lock service for loosely-coupled distributed
systems,” in Proceedings of the 7th symposium on Operating systems
design and implementation, 2006.
[39] D. Ongaro and J. K. Ousterhout, “In search of an understandable
consensus algorithm.” in USENIX Annual Technical Conference, 2014.
[40] S. Kalra, S. Goel, M. Dhawan, and S. Sharma, “Zeus: Analyzing safety
of smart contracts,” in 25th Network and Distributed System Security
Symposium, 2018.
[41] “Maian: a tool for automatic detection of buggy ethereum smart con-
tracts,” https://github.com/MAIAN-tool/MAIAN, 2018.
[42] S. Ducasse, H. Rocha, S. Bragagnolo, M. Denker, and C. Francomme,
“Smartanvil: Open-source tool suite for smart contract analysis,” 2019.
[43] “Solgraph tool.” https://github.com/raineorshine/solgraph, 2018.
[44] A. Permenev, D. Dimitrov, P. Tsankov, D. Drachsler-Cohen, and
M. Vechev, “Verx: Safety veriﬁcation of smart contracts,” in the 41st
IEEE Symposium on Security and Privacy, 2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:34:17 UTC from IEEE Xplore.  Restrictions apply. 
232