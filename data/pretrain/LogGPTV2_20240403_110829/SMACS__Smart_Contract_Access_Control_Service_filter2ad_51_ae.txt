### 优化后的文本

---

#### 九、吞吐量测试
图9展示了TS的吞吐量。在两种情况下，TS验证传入请求均需要本地以太坊测试网络（无需对已部署的合约或节点使用的以太坊软件进行任何代码更改）。为了提高工具的吞吐量，我们配置了测试网络（例如geth [37]），以最小化提交和执行交易之间的延迟。

对于Hydra，我们在三种不同的编程语言中实现了一个简单的合约，并将其部署在支持Hydra的测试网络上。对于ECFChecker，我们部署了在§V中介绍的易受攻击的合约。我们分别发送100笔交易，并测量每种工具处理一笔交易所需的平均时间。

在我们的设置中，使用Hydra的SMACS处理一个请求需要120毫秒，而使用ECFChecker支持的SMACS可以在10毫秒内处理一个请求。因此，借助这些工具，SMACS可以分别处理约8个和100个代币请求/秒。

---

#### 七、讨论
##### A. 安全性
我们的第一个主张是，对手无法绕过SMACS中的访问控制。所有合约的公共接口都需要进行代币验证过程（见§IV-B）。该过程确保代币是真实的（即由TS签名）、未过期且与调用交易匹配。获取此类代币的唯一方法是向TS请求，TS会根据其访问规则验证请求。所有有效的代币都由TS签名，因此，未经TS验证或没有TS私钥的对手无法获得有效代币。此外，只有满足白名单中预定义规则的客户端才能获得一次性代币，从而即使对手控制多个地址，也保证了一次性访问。

- **替换攻击**：攻击者可以拦截合法客户端的交易，从中提取代币，然后构造一个带有截获代币的新交易。该交易将被合约端的验证拒绝，因为TS的签名创建了代币及其应用上下文之间的加密绑定。任何微小的上下文更改（例如地址、参数等）都会被签名验证过程捕获。
  
- **重放攻击**：攻击者可以捕获来自合法客户端的交易，并在以太坊网络中重放它。这种攻击针对的是以太坊本身，由于以太坊内置的防重放攻击措施，这种攻击不会成功。交易中包含的nonce值确保每个交易都是唯一的。如果交易已被以太坊接受，则不会再被处理。此外，客户端的地址受到代币签名的保护，因此攻击者无法提取并重用他人的代币。SMACS通过为每个一次性代币分配一个唯一的索引（由TS设置）并在存储位图中记录每次一次性代币的使用情况来实现合约内的重放保护。客户端可以尝试通过创建一个新的带有已使用代币的交易来重放一次性代币。这样的交易不会触发目标方法的实际执行，因为在代币验证过程中（见§IV-C）会检查代币索引是否已被使用，如果是，则拒绝访问。

- **51%攻击**：在51%攻击中，对手拥有超过50%的区块链网络总投票权，这使得她能够重写区块链历史。尽管这种攻击非常具有破坏性，但在我们的场景中，即使如此强大的对手也无法绕过SMACS的访问控制。对手可以随意扰乱甚至删除交易，损害智能合约的可用性，但她无法为不符合规定的交易获得有效代币。

- **隐私**：SMACS将访问规则转移到链下服务（TS）。因此，部署的规则、验证工具及其配置保持私密，不向客户端透露。虽然区块链交易是公开可见的，但对手只能了解成功的访问控制案例，并尝试预测应用的规则，但这仍然是黑盒分析（与任何合约内访问控制相比）。

##### B. 部署
- **可用性**：要求TS持续验证和签署代币引入了单点故障，因为如果TS失败，客户端将无法与合约交互。幸运的是，SMACS中的TS易于扩展和复制。对于发行代币（不具一次性属性），提供可用性就像提供冗余的TS一样简单，这些TS不需要任何协调（除了负载均衡器/故障切换系统）。如果TS服务提供一次性代币，则其副本必须协调当前计数器值（见§IV-C）。这可以通过基于标准共识算法[38]、[39]实现的复制计数器原语高效实现。

- **服务发现**：我们假设客户端知道如何找到对应于SMACS启用的智能合约的TS。实际上，客户端必须学习服务的URL地址。我们建议通过将服务地址作为智能合约实例的元数据（类似于合约名称或编译器版本）来实现这一发现过程。

---

#### 八、相关工作
在实践中，社区已经开发了一些设计模式和第三方库，以简化智能合约中的访问控制应用[25]。然而，这种范式将所有的访问控制逻辑及其管理负担放在智能合约本身上。由于链上资源的成本高昂，仅能使用这种方法开发简单且不灵活的访问控制规则（例如，小型黑白名单、支持非常有限角色的角色基础访问控制等）。总之，尽管智能合约访问控制是一个明显的需求并且在过去几年中得到了广泛研究，但我们尚未意识到有任何框架像SMACS一样，能够在极低的成本下实现复杂的访问控制规则并支持运行时安全验证。

最接近SMACS的研究是对检测智能合约漏洞的方法和工具的调查和开发，这些方法和工具可以分为两大类：静态安全分析和运行时安全分析。

- **静态安全分析**：这些方法或工具主要基于形式验证和符号执行。Oyente [8] 和 Manticore [9] 是用于查找潜在安全漏洞的符号执行工具。Mythril [10] 使用混合分析、污点分析和控制流检查来检测多种智能合约安全漏洞。Securify [11] 通过执行高级静态分析提取语义事实，以证明某些安全漏洞的存在或不存在。Zeus [40] 使用模型检查来验证智能合约的正确性。MAIAN [41] 处理智能合约的字节码，并尝试构建交易跟踪以基于过程间符号分析查找并确认漏洞。这些工具列表难以列举，新的相关工具不断涌现[20]、[42]、[43]、[44]。大多数这些工具旨在提供预部署安全验证。因此，它们只能识别已部署智能合约中的漏洞（而不是防止它们）。另一个缺点是它们不能完全覆盖所有运行时行为，因此容易错过新的运行时攻击模式。事实上，在[13]中已经证明了这一点，其中新的重入攻击向量绕过了现有静态分析工具的安全检查[40]、[8]。我们认为这类工具与SMACS是正交的，但在某些情况下，它们可以结合使用以提供安全收益。例如，SMACS启用的智能合约的所有者可以定期使用这些工具扫描已部署的合约（例如，在安全分析工具更新时进行漏洞扫描）。一旦检测到漏洞，她可以将具有特定模式的交易列入黑名单，这些交易可能触发漏洞。

- **运行时安全分析**：与静态安全分析相反，进行运行时监控的工具[12]、[14]、[13] 有潜力防止已部署的智能合约被利用。Hydra [14] 通过N-of-N版本编程（一种经典的N版本编程变体，运行多个独立程序实例以检测运行时安全问题）实现了后部署安全。ECFChecker [12] 是一种专门用于查找有效回调自由对象的运行时检测工具。此工具可用于检测以太坊重入攻击。关于Hydra和ECFChecker的更详细概述请参见§V。另一个有趣的例子是Sereum [13] 架构，这是一种强化的EVM，能够通过利用污点跟踪监控智能合约的运行时行为，以向后兼容的方式保护已部署合约免受重入攻击。Sereum也可以通过专用的访问控制规则轻松集成到SMACS框架中。

这些工具的主要缺点是需要更改和升级运行时环境。我们强调，在区块链平台遵循的状态机复制模型中，这意味着大多数节点需要更新其EVM以支持此类工具。SMACS使合约所有者能够在不需要此要求的情况下受益于这些工具。此外，正如我们所展示的，这些工具可以轻松无缝地与SMACS集成。结合运行时安全分析工具和SMACS的另一个优点是，即使智能合约存在漏洞，仍然可以正常运行，因为只有无害的交易才会通过，而由工具识别出的可疑交易将在运行时被拒绝。

---

#### 九、结论
我们提出了SMACS，据我们所知，这是第一个通过结合轻量级链上验证和链下访问控制管理基础设施，以低成本实现高效的、灵活的和细粒度的智能合约访问控制的框架。除了使智能合约能够防止恶意地址和抵抗异常运行时行为外，SMACS还提供了几个优选功能。首先，当与运行时验证工具结合使用时，SMACS启用的智能合约可以在阻止可疑访问尝试的同时继续为无辜交易提供服务。其次，SMACS的架构允许基于其设计增强后部署安全性，从而防止在部署后发现的漏洞被利用。因此，定期使用新验证工具测试SMACS启用的合约并相应调整规则是有意义的。最后，由于框架的可扩展性，我们可以期待未来出现更多可以应用于SMACS的安全相关工具。

一个有趣的研究方向是在SMACS的背景下研究可信执行环境（如Intel SGX），以完全去中心化系统。例如，在TEE enclave中实现的TS可以去中心化整个系统：所有者只需发布其访问控制规则，这些规则将由在客户端本地运行的enclave代码验证（无需联系任何中央服务）。我们将此类系统的详细设计留作未来的工作。

---

#### 致谢
感谢匿名审稿人和我们的指导者Yinzhi Cao提供的宝贵意见和建议。这项研究得到了新加坡教育部的支持，资助项目为MOE AcRF Tier 2 Grant (MOE2018-T2-1-111) 和 SUTD SRG ISTD 2017 128 Grant。

---

#### 参考文献
[略]

---

希望这个优化后的文本更加清晰、连贯和专业。如果有进一步的修改需求，请随时告诉我！