    ➜  datastructures.rs git:(master) ✗ RUST_LOG="rustc=1;::rt::backtrace" rustc stack.rs &&./stack
    rust: task failed at 'assertion failed: rp.is_none()', /private/tmp/rust-5o4g/rust-0.7/src/librustc/middle/typeck/collect.rs:1040
    error: internal compiler error: unexpected failure
    note: the compiler hit an unexpected failure path. this is a bug
    note: try running with RUST_LOG=rustc=1,::rt::backtrace to get further details and report the results to github.com/mozilla/rust/issues
    rust: task failed at 'explicit failure', /private/tmp/rust-5o4g/rust-0.7/src/librustc/rustc.rs:354
    rust: domain main @0x7f9afc008410 root task failed
The code that caused it is:
    trait ImmStack {
        fn push(self, item : T) -> Self;
        fn pop(self) -> (Option, Option);
        fn new() -> Self;
    }
    #[deriving(Eq, ToStr)]
    enum Chain {
        Link(T, ~Chain),
        Break
    }
    //impl ImmStack for Chain {
    //    fn push(self, item : T) -> Chain {
    //        Link(item, ~self)
    //    }
    //    fn pop(self) -> (Option, Option>) {
    //        match self {
    //            Link(item, ~new_self) => return (Some(item), Some(new_self)),
    //            Break => return (None, None)
    //        }
    //    }
    //    fn new() -> Chain {
    //        Break
    //    }
    //}
    fn push(stack : &'self mut Chain, item : T) -> &'self mut Chain {
        &mut Link(item, ~*stack)
    }
    fn pop(stack : &mut Chain) -> Option {
        match *stack {
            Link(item, ~new_stack) => {
                stack = &mut new_stack;
                return Some(item);
            },
            Break => return None
        }
    }
    fn new() -> &mut Chain {
        &mut Break
    }
    fn main() {
        let mut b : &Chain = ~Break;
        push(push(push(b, 1), 2), 3);
        println(b.to_str());
    }