在操作HTTP响应报头（即Head部分）时，所有写入该区域的值必须去除\r和\n字符。
创建一份安全字符白名单，只接受白名单限制内的输入数据出现在HTTP响应头中，例如只允许字
母和数字。
第十八条 禁止高风险的服务及协议
禁止使用不加保护或已被证明存在安全漏洞的服务和通信
协议传输数据及文件。
编码类要求：
DefaultHttpClient与TLS 1.2不兼容
HostnameVerifier 由于许多主机上都重复使用了证书，因此经常使用接受任何主机的请求。这很容
易受到中间人攻击，因为客户端将信任任何证书。
应升级jdk版本到1.8最新版，并使用-Dhttps.protocols=TLSv1.2启动java进程，使用HTTPS时采用
TLS1.2是等级保护三级的要求
脆弱代码：
// 默认的DefaultHttpClient兼容不兼容tls1.2 
HttpClient client = new DefaultHttpClient(); 
// 更不能使用存在缺陷的ssl 
SSLContext.getInstance("SSL"); 
解决方案：
通过指定HttpClient的协议版本为tls1.2，以禁止使用ssl、tls1.1及以下的版本。
CloseableHttpClient client = HttpClientBuilder.create() 
.setSSLSocketFactory(new SSLConnectionSocketFactory(SSLContext.getDefault(),  
new String[] { "TLSv1.2" }, null, SSLConnectionSocketFactory.getDefaultHostnameVerifier())) 
.build(); 
不安全的HTTP动词
RequestMapping默认情况下映射到所有HTTP动词，电力行业强制要求只能使用GET和POST，应使用
GetMapping和PostMapping进行限制。
脆弱代码：
@Controller 
public class UnsafeController { 
// RequestMapping 默认情况下映射到所有HTTP动词 
@RequestMapping("/path") 
public void writeData() { 
[...] 
} 
} 
解决方案：
@Controller 
public class SafeController { 
// 只接受GET动词，不执行数据修改操作 
@GetMapping("/path") 
public String readData() { 
return ""; 
} 
// 只接受POST动词，执行数据修改操作 
@PostMapping("/path") 
public void writeData() { 
[...] 
} 
} 
以上代码基于Spring Framework 4.3及更高版本
第十九条 避免异常信息泄漏
去除与程序无关的调试语句；对返回客户端的提示信息进
行统一格式化，禁止用户ID、网络、应用程序以及服务器
环境的细节等重要敏感信息的泄漏。
编码类要求：
意外的属性泄露
系统应限制返回用户侧的字段数据，保证敏感字段内容不泄露。
脆弱代码：
@javax.persistence.Entity 
class UserEntity { 
@Id 
@GeneratedValue(strategy = GenerationType.IDENTITY) 
private Long id; 
private String username; 
private String password; 
} 
@Controller 
class UserController { 
@PostMapping("/user/{id}") 
public UserEntity getUser(@PathVariable("id") String id) { 
//返回用户所有字段内容，可能包括敏感字段 
return userService.findById(id).get();  
} 
} 
解决方案1：
@Controller 
class UserController { 
//禁止在url中使用业务变量，以防止篡改导致的越权 
@PostMapping("/user") 
public UserEntity getUser(@RequestParam("id") String id) { 
//返回用户所有字段内容，可能包括敏感字段 
return userService.findById(id).get();  
} 
} 
@Controller 
class UserController { 
@InitBinder 
public void initBinder(WebDataBinder binder, WebRequest request){ 
//限制返回给用户的字段 
binder.setAllowedFields(["username","firstname","lastname"]); 
} 
} 
解决方案2：
@Controller 
class UserController { 
//禁止在url中使用业务变量，以防止篡改导致的越权 
@PostMapping("/user") 
public UserEntity getUser(@RequestParam("id") String id) { 
//返回用户所有字段内容，可能包括敏感字段 
return userService.findById(id).get();  
} 
} 
class UserEntity { 
@Id 
private Long id; 
private String username; 
// 如果使用jackson，可以使用@JsonIgnore禁止某字段参加格式化 
// 在某字段的get方法上使用@JsonIgnore对应禁止序列化，在set方法方法上使用@JsonIgnore对应禁止反序列化 
// 或者使用@JsonIgnoreProperties(value = "{password}")禁止某字段参与格式化 
@JsonIgnore 
private String password; 
} 
不安全的 SpringBoot Actuator 暴露
SpringBoot Actuator 如果不进行任何安全限制直接对外暴露访问接口，可导致敏感信息泄露甚至恶意命
令执行。
解决方案：
// 参考版本 springboot 2.3.2  
// pom.xml 配置参考  
org.springframework.boot 
spring-boot-starter-actuator 
org.springframework.boot 
spring-boot-starter-security 
// application.properties 配置参考 
#路径映射 
management.endpoints.web.base-path=/lhdmon 
#允许访问的ip列表 
management.access.iplist = 127.0.0.1,192.168.1.100,192.168.2.3/24,192.168.1.6 
#指定端口 
#management.server.port=8081 
#关闭默认打开的endpoint 
management.endpoints.enabled-by-default=false 
#需要访问的endpoint在这里打开 
management.endpoint.info.enabled=true 
management.endpoint.health.enabled=true 
management.endpoint.env.enabled=true 
management.endpoint.metrics.enabled=true 
management.endpoint.mappings.enabled=true 
#sessions需要spring-session包的支持 
#management.endpoint.sessions.enabled=true 
#允许查询所有列出的endpoint 
management.endpoints.web.exposure.include=info,health,env,metrics,mappings 
#显示所有健康状态 
management.endpoint.health.show-details=always 
不安全的 Swagger 暴露
Swagger 如果不进行任何安全限制直接对外暴露端访问路径，可导致敏感接口以及接口的参数泄露。
解决方案：
// 测试环境配置文件 application.properties 中 
swagger.enable=true 
// 生产环境配置文件 application.properties 中 
swagger.enable=false 
// java代码中变量 swaggerEnable 通过读取配置文件设置swagger开关 
@Configuration 
public class Swagger { 
@Value("${swagger.enable}") 
private boolean swaggerEnable; 
@Bean 
public Docket createRestApi() { 
return new Docket(DocumentationType.SWAGGER_2) 
//  变量 swaggerEnable 控制是否开启 swagger 
.enable(swaggerEnable) 
.apiInfo(apiInfo()) 
.select() 
.apis(RequestHandlerSelectors.basePackage("com.tao.springboot.action")) 
//controller路径 
.paths(PathSelectors.any()) 
.build(); 
    } 
第二十条 严格会话管理
应用程序中应通过限制会话的最大空闲时间及最大持续时
间来增加应用程序的安全性和稳定性，并保证会话的序列
号长度不低于64位。
编码类要求：
缺少HttpOnly标志的Cookie
电力系统强制要求cookie开启HttpOnly以保护用户鉴权。
脆弱代码：
Cookie cookie = new Cookie("email",userName); 
response.addCookie(cookie); 
解决方案：
Cookie cookie = new Cookie("email",userName); 
cookie.setSecure(true); 
cookie.setHttpOnly(true); //开启HttpOnly 
缺少Spring CSRF保护
禁用Spring Security的CSRF保护对于标准Web应用程序是不安全的。
脆弱代码：
@EnableWebSecurity 
public class WebSecurityConfig extends WebSecurityConfigurerAdapter { 
@Override 
protected void configure(HttpSecurity http) throws Exception { 
http.csrf().disable(); 
} 
} 
不安全的CORS策略
所有对外的url请求原则上需要使用白名单限制。
脆弱代码：
response.addHeader("Access-Control-Allow-Origin", "*"); 
解决方案：
Access-Control-Allow-Origin 字段的值应依照部署情况进行白名单限制。
不安全的永久性Cookie
脆弱代码：
Cookie cookie = new Cookie("email", email); 
cookie.setMaxAge(60*60*24*365); // 设置一年的cookie有效期 
解决方案：
电力系统禁止使用永久性Cookie，并限制其最长使用期限为30分钟。
电力系统要求登录前、登录后、退出后三个状态下的cookie不能一致。
不安全的广播（Android）
在未指定广播者权限的情况下注册的接收者将接收来自任何广播者的消息。如果这些消息包含恶意数据
或来自恶意广播者，可能会对应用程序造成危害。电力系统禁止app应用无条件接受广播。
脆弱代码：
Intent i = new Intent(); 
i.setAction("com.insecure.action.UserConnected"); 
i.putExtra("username", user); 
i.putExtra("email", email); 
i.putExtra("session", newSessionId); 
this.sendBroadcast(v1); 
解决方案：
配置（接收器）
配置（发送方）
或者禁止响应一切外部广播