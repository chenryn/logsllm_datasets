Chinese Wall [2, 4] is a similar problem to SoD in that they
share a “diﬀerent from” constraint. The Chinese Wall con-
straint, however, is on objects while the SoD constraint is
on people.
Vimercati, Paraboschi, and Samarati [8] describe the gen-
eral mechanisms necessary to support SoD in their survey
of access controls.
3. APPROVABILITY
In an approvability graph each action speciﬁer —which spec-
iﬁes the type of an action such as receipt of item by end
user—is modeled as a directed edge and labeled with a role,
or group. Paths starting from initial nodes in the approv-
ability graph specify allowable sequences of actions and the
role that a user must assume, or be a member of, to per-
form an action. Each traversal of an action speciﬁer edge in
the path corresponds to a unique action. The nodes of the
approvability graph summarize the state of the approval.
In addition,
The approvability graph directly represents DSoD through
constraints on action speciﬁers.
if the sets
of mutually exclusive roles—in which a user can never be
a member of multiple roles in a set—are known, the ap-
provability graph can also represent SSoD. Hence, SSoD is
represented by diﬀerent roles associated with diﬀerent ac-
tion speciﬁers; DSoD is represented by “diﬀerent user” con-
straints between two edges and the roles associated with
these edges need not be the same.
Formally, an approvability graph system is a 6-tuple
V, E, Cd, Cs, L, R where V, E is a directed graph called
the approvability graph and Cd and Cs are sets of pairs
of edges, L is a set of edges, and R : E → Role where Role is
a set of roles. We shall be informal and not distinguish be-
tween the approvability graph system and the approvability
graph it contains, calling them both approvability graphs.
The approvability graph contains the following types of nodes:
initial A starting point in the approval process.
ﬁnal A completion of a task. Final nodes have no outgoing
edges.
intermediate Nodes which are neither initial nor ﬁnal nodes.
Intermediate nodes have both incoming and outgoing
edges.

There can be multiple nodes of each type.
The edges E of the approvability graph correspond to action
speciﬁers. Each edge e is labeled with a role R(e) whose
members can perform the speciﬁed action. Without loss
of generality, we will assume that every edge and node is
reachable from some initial node.
Finally, constraints between action speciﬁers are used to rep-
resent SoD constraints. The constraints between two dis-
tinct edges (action speciﬁers) e0, e1 are of two forms, Cd
and Cs respectively:
diﬀerent user meaning that the users who perform an ac-
tion speciﬁed by e0 must be disjoint from those who
perform an action speciﬁed by e1 (thus representing
DSoD) 4.
same user All of the actions speciﬁed must be performed
by the same user. Same user constraints must be be-
tween edges labeled with the same role.
In addition, there is a constraint for a single edge (L):
self-same user the actions corresponding to the action spec-
iﬁer are all performed by the same user.
Note that the same user and self-same user constraints in-
herently requires a particular user to perform some future
action. As this may aﬀect the urgency with which such
tasks can be completed if the speciﬁed user is (temporar-
ily) unavailable, the same user constraint should be used
sparingly.
The following notation is used for approvability graphs: The
successors of a node v, Succ(v) are a set of nodes such that
if v ∈ Succ(v) there is an edge from v to v. Succ∗(v) is
the transitive closure of Succ on v. Finally, I is the set of
initial nodes and F is the set of ﬁnal nodes.
An approval sequence captures a traversal of the approval
graph starting with an initial node and ending with a ﬁnal
node.
are indicated by a solid (red) undirected arc between two
edges while same user and self-same user are indicated by
a dashed (blue) undirected arc between two edges. Note
that in the examples that follow, the only constraints are
diﬀerent user.
The approvability graphs are next illustrated through a se-
ries of examples.
Figure 2: Purchase order DSoD
3.1 Simple DSoD
In Figure 2 an example of a 4-action sequence is shown in
which the same role performs every action, and no user can
perform more than one action. Hence, there is a DSoD
diﬀerent user constraint between every pair of actions. This
graph corresponds to the 4 stage purchase sequence in the
introduction of this paper: Each edge is labeled with the
role clerk, and hence constraints are needed between each
pair of actions (edges).
Note that if instead we had separate, pairwise disjoint roles
for purchase order clerk, shipping clerk, end user, and payables
clerk, then no constraints would be needed.
3.2 Medical consultation
We next describe a medical example, summarized in Fig-
ure 3. In a medical consultation the primary physician de-
cides that consultations are needed with one or more con-
sulting physicians. She creates a role containing the physi-
cians she wishes to consult. The cardinality of the created
role determines the initial node in the approvability graph.
Each consultant performs tests and then inserts a report,
thus performing their part in the approval sequence (The
consultants count down in the order they ﬁnish, there is no
predetermined order).
initial
ﬁnal
intermediate
action
different
same
Figure 1: Approvability key
The key for the approvability graph ﬁgures is summarized
in Figure 1.
Initial nodes are drawn as a dashed circle;
ﬁnal nodes are indicated as circles with a wide boundary;
intermediate nodes have normal solid boundary; and edges
are drawn as solid arrowed lines. Diﬀerent user constraints
4This is worded to take into account edges being traversed
0, 1, or multiple times.

Figure 3: Consulting physicians
The approvability graph ensures that each physician inserts
their report exactly once, since there is a SoD request in the
“count down” portion of the approvability graph. Note that
this approvability graph is capable of supporting consulta-
tions with between 1-4 physicians; an approvability graph
supporting up to N consultations could be constructed with
N + 1 states.
3.3 Weighted approval
We now show how alternative paths can be used to pro-
vide Sandhu’s weighted approval (see Section 2). Figure 4
executive
manager
manager
Figure 4: Weighted approval
shows a simple approval graph in which either two diﬀerent
managers or a single executive can approve.
3.4 Document revision
We next describe an undoubtedly familiar problem to the
reader; preparing and revising documents in which multi-
ple people take part in the authorship, editing, and release.
There are many interesting concurrency issues associated
with this problem, which we ignore here.
Instead we fo-
cus on tracking who did what, and ensuring drafts are not
shared until they are proofed and approved.
We next describe the document states for authors to edit a
document and then have it approved by the manager.
4. ANALYSIS
In this section we consider approvability sequences—which
describe actions and the users who perform them. While
the approvability graph speciﬁes both the sequencing of ac-
tions and the roles that can perform the actions, it does
not describe which users are associated with which roles.
Hence, to generate approvability sequences, both the user-
role assignment—that is, determining the membership of
each role—and an approvability graph must be given.
We describe user-action assignment—how users can be as-
signed to perform actions while ensuring that approvability
sequences can be completed along any path from the node
after that action to a ﬁnal node in the approvability graph.
In general, the user-action assignment requires that a user
can perform an action only if (1) she is a member of the cor-
responding role, (2) no constraints are violated with earlier
actions in the action sequence, and (3) assignment of the
user to the action does not prevent the completion of any
task which contains the action sequence as a preﬁx. The
ﬁrst two points concern past actions while the third point
considers future actions. Two methods of determining the
user-action assignment are considered here:
Draft Document is undergoing revision.
Edited The author has ﬁnished editing the document, and
scheduled approvability depends on both past and fu-
ture actions
is ready to move onto the next stage.
unscheduled approvability depends only on past actions.
Proof Someone other than the author of the last edit checks
that the document is sound. This can be generalized
to multiple proofreaders.
Released The manager has accepted the document.
Reject The manager rejects the document and work ceases
on it.
We note also, that one of the possible actions is that the
document is referred back to the author with comments.
manager
reject
worker
worker
draft
edited
proof
manager
manager
released
Figure 5: Document revision approval graph
In Figure 5, the approvability graph is shown. The DSoD
speciﬁcation is quite small, since the proof reading should
be done by someone other than the author.
There are two interesting issues in this approvability graph.
The ﬁrst is multiple ﬁnal states, released and rejected. This
results in diﬀerent possible approval sequences when trac-
ing the approval graph. The second is that there is a loop
consisting of three action speciﬁers (and three nodes); if the
loop is traversed x times, then the 3 action speciﬁers corre-
spond to 3x actions.
In scheduled approvability, the user that will perform a given
action is selected when the task begins thus locking in speciﬁc
users to future actions5. In unscheduled approvability, the
user who performs an action is determined when the action
is performed. While unscheduled approvability may require
more users per role, it avoids delaying a task because the
selected user is unavailable at the time the action is to be
performed. Thus, as long as some user is available which
does not violate past constraints, unscheduled approvability
does not delay the task, and hence the urgency with which
the task can be completed is not aﬀected. BFA considered
only scheduled approvability.
We will show modest restrictions on the approvability graph
which ensure that both scheduled and unscheduled approv-
ability are possible given suﬃcient number of users per role.
Given such approvability graphs we will
1. show how to determine the exact bound on the number
of users for unscheduled approvability when all diﬀer-
ent user constraints are between edges labeled with
the same role;
2. give upper bounds on the cardinality of the user-role
assignment so that approvability graphs can be un-
scheduled approvable; and
3. show that the problem of DSoD is NP-Complete.
5One can try to reschedule the task later, but an alternate
schedule may not be possible and in addition we shall show
that scheduling is NP-Hard.

4.1 Scheduled and unscheduled approvability
We begin by deﬁning the nodes which are reachable from a
given node, if there are enough eligible users to approve.
Definition 1. An action sequence for approvability graph
system S and user-role assignment A is an alternating se-
quence of nodes and users beginning and terminating with
a node and denoted [v0, u0, v1, u1, . . . , vn] where v0 ∈ I and
for 0 ≤ i < n
• vi+1 ∈ Succ(vi),
• for all j = i, if the edge [vj, vj+1] has a diﬀerent user
constraint with [vi, vi+1], then ui = uj.
• for all j = i, if the edge [vj, vj+1] has a same user or a
self-same user constraint with [vi, vi+1], then ui = uj.
• ui is a member of the role for action [vi, vi+1].
An action sequence is an approval sequence if vn ∈ F .
An action sequence corresponds to the current state of agree-
ment. An approval sequence corresponds to a completed ac-
tion sequence, meaning that no more agreement is needed
(or possible). Of course, there can be many possible ﬁnal
nodes, for diﬀerent sorts of agreement that can be reached.
The goal is to be able to extend every action sequence into
an approval sequence, and thus complete the task. The next
deﬁnition describes what it means to do that for scheduled
approvability (called s-approvable) and for unscheduled ap-
provability (called u-approvable).
Definition 2. An action sequence
seq = [v0, u0, v1, u1, . . . ui−1, vi]
for approvability graph system S and user-role as-
signment A is u-approvable (resp. s-approvable) to
vn ∈ F , written U (seq, vn) (resp. S(seq, vn)), if either
• vi = vn or
• for any v ∈ Succ(vi) such that vn ∈ Succ∗(v) and
for all u (resp. exists a u) such that seq = seq|[u, v]
(where ‘|’ is the sequence concatenation operator) is an