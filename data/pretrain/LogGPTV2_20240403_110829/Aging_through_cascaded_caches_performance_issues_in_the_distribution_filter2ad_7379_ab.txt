the estimated response time of top-cache is less than 2/3
of that of www.s.com).
We now demonstrate how diminished synchronization can
exacerbate the age penalty eﬀect. Assume now that low-cache
forwards requests to diﬀerent independent parent caches each
equivalent to top-cache. As with a single parent also in this
case a hit at low-cache is always followed by a miss. How-
ever a miss is not necessarily followed by a hit. The age
and therefore also the TTL of obj1 which is fetched as a
result of a miss is distributed uniformly between 0 and T .
Therefore a miss is followed by a hit only with probability
1/2. Let X be a random variable that counts the number
of consecutive misses prior to a hit. It is easy to see that
X − 1 is distributed geometrically with p = q = 1/2, so the
expectation of X is 1. We obtain that on average there are
two misses prior to a hit so the miss rate is 2/3. Thus, in
this example, lack of synchronization amount to a 1/3 in-
crease in the miss rate compared to the case of using just
one top-cache. (from 1/2 to 2/3), and the age penalty is
1 (increase from 1/3 to 2/3 compared to an authoritative
source).
3.2 Source types
To further explore these issues, we formally deﬁne the
three types of sources illustrated in the example above (see
Figure 3). The TTL value obtained through each source as
Origin server
Cache 1
Cache 2
Cache 3
Cache 4
Client cache A
Client cache B
Client cache C
Figure 3: Diﬀerent types of sources: Cache A uses
cache 1 as an exc source. Cache B uses caches 1,2,. . .
as an ind source. Cache C uses an auth source.
a function of time is illustrated in Figure 4.
1. Authoritative (auth): Always provides a copy with
zero age (TTL that equals the freshness lifetime T ).
2. Exclusive replicating server (exc): The client-cache
consistently sends requests to the same replicating
server. We assume that the replicating server always
has a fresh cached copy which is refreshed each time
that it expires. The replicating server refreshes the
copy by contacting an auth source. Therefore, when
a client cache sends a request at time t the TTL of
the copy it obtains is T − (t + α) mod T 2, where T
is the freshness lifetime of the object. The parameter
α represents the displacement between the request se-
quence at the client cache and the “refresh cycle” of the
particular replicating server. Since we are interested
in modeling the situation where the request sequence
at the client cache is independent of the “refresh cy-
cle” of the particular replicating server we assume that
α ∈ U [0, T ] (selected once for the whole sequence from
the uniform distribution on [0, T ]). Thus, when ana-
lyzing performance through an exc source we consider
the expected miss-rate over this random choice of α.
2“mod” is a generalized modulo operation to arbitrary non-
negative numbers a mod b = a − b ∗ (cid:6)a/b(cid:7). If b = 0 then we
deﬁne a mod b ≡ 0.
3. Independent replicating servers (ind): Upon each miss,
the client cache forwards the request to a randomly-
selected replicating server that always keeps a fresh
copy as described above. The replicating servers for
diﬀerent requests are chosen independently so the dis-
placement α in this case is chosen uniformly at random
per request (rather than once per the whole sequence).
Equivalent we can say that the age (and TTL) which
the client cache obtains upon a miss through an ind
source is independently drawn from U [0, T ].
Authoritative
Exclusive
Independent
T
L
T
T
α
T+α
time
2T+α
3T+α
Figure 4: TTL obtained through diﬀerent types of
sources. auth source always provides zero age and
TTL of T . exc source (shown with displacement α)
provides age that cycles from 0 to T and thus TTL
which cycles from T to 0. ind source provides at each
point in time age drawn independently from U [0, T ]
and thus TTL drawn from U [0, T ].
The exc and ind sources are basic models which ab-
stract diﬀerent performance factors of actual caches. The
Exclusive model captures a prototypical scenario of Web
caches directing requests to the same source cache (e.g., a
transparent proxy, a conﬁgured proxy, or a reverse proxy).
Actual Web caches, however, perform sporadic pre-term re-
freshes as a result of requests with no-cache request headers
(see Section 2). Pre-term refreshes are not captured by the
pure Exclusive model and break synchronization between
source and client caches. The eﬀect of pre-term refreshes
is studied in Section 6 which extends the pure Exclusive
model. The Independent model captures the use of several
diﬀerent caches for load balancing purposes. Real sources
seem to be hybrids of ind and exc. Which of our models
is better for a particular real source depends on the num-
ber of higher-level caches that are used for the same object,
and the way one of these caches is selected when the client
cache incurs a miss. Last, we remark that high-level Web
caches suﬀer cache misses, which are propagated to an ori-
gin server. These well-explored misses are a central perfor-
mance metric for the eﬀectiveness of top-level caches, and
occur in the “channel” between high-level caches and origin
servers. Our focus here is performance in the “channel” be-
tween high- and low-level caches, and thus, our models factor
out propagated misses by assuming constant availability of
fresh copies at high-level caches.
4. DATA AND METHODOLOGY
We discuss some qualitative phenomena which apply to
all or large families of request sequences. We then charac-
terize the extent and presence of these patterns for speciﬁc
distributions and using trace-based simulations.
4.1 Speci£c distributions
We analyze sequences generated by a random process where
inter-request times are independent and drawn from some
distribution. We consider Poisson, Pareto, and ﬁxed-frequency
arrivals. Poisson and Pareto sequences have reference local-
ity, which means that the next request is more likely to
occur sooner. More formally, locality means that the prob-
ability density function of the inter-request duration is non-
increasing.
Poisson arrivals. Poisson arrivals constitute a natural
model for independent arrivals. The request sequence is
deﬁned such that the density function of inter-request dura-
tions is f (x) = λ exp(−λx) and the respective CDF (likeli-
hood for an inter-request duration not to exceed x) is F (x) =
1 − exp(−λx). The parameter λ is the rate that is, the av-
erage number of requests in a time duration of length 1 (the
inverse of the average inter-request duration). For our pur-
poses, it is convenient to ﬁx the lifetime duration to T = 1
and vary λ (it is symmetric to ﬁx λ and vary T ). That way,
λ is also the request-rate. The request-rate is deﬁned to be
the expected number of requests in a lifetime duration, and
it equals the lifetime duration divided by expected inter-
request duration. The Poisson distribution was amenable
for analysis and we obtained closed-form expressions for the
miss-rate as a function of the sources and λ.
Pareto-distributed inter-arrival times. Since the Web’s
infancy, the Pareto family of distributions had been a widely-
used model for inter-arrival times [19, 20]. For a power α > 0
and scale parameter k > 0, inter-request time durations have
−α−1(x ≥ 0), and the re-
density function f (x) = αkα(x + k)
spective CDF is F (x) = 1 − (k/(x + k))α. The distribution
is heavy-tailed and has unbounded variance when α  1. For α ≤ 1 the expectation of an inter-
request duration is unbounded, and thus the rate is 0.3 We
consider Pareto distributions with diﬀerent values of α. For
any given α, we vary “request-rates” by ﬁxing T = 1 and
sweeping k (it is symmetric to ﬁx k = 1 and vary 1/T ).
Fixed-frequency arrivals. In practice, some objects are
accessed mostly by robots or have access-likelihood which
highly depends on time-of-day. For such objects,
inter-
request durations do not exhibit reference locality and in-
stead, the histogram “peak” in various “round” values (such
as one hour or a day) [6]. The actual inter-request time his-
togram is then a mix of ﬁxed-frequency arrivals with another
distribution which posses reference-locality. Thus, it is in-
teresting to consider ﬁxed-frequency arrivals, and indeed,
analysis and simulations reveal diﬀerent patterns than seen
for Poisson and Pareto arrivals.
3In quantile sense, the parameter 1/k for Pareto serves as an
analogous metric to the λ parameter of the Poisson distribu-
tion. Even though the expectation is unbounded for α ≤ 1,
for any ﬁxed p and α, the pth quantile duration is bounded,
and is proportional to k. (Note that quantiles are propor-
tional to 1/λ with Poisson.) This explains why behavior
patterns we observed with Pareto α ≤ 1 arrivals by varying
1/k resemble those obtained when varying request-rate for
Poisson arrivals.
4.2 Trace-based simulations
The request sequence received by our simulated client-
cache was obtained from traces of busy proxy caches. We
then simulated performance under diﬀerent types of sources.
Our simulations required header values of HTTP responses
to calculate freshness-lifetime information for the requested
URLs. This information is usually not collected by large
scale caches over extended periods because of its volume. To
get this information we separately performed GET requests
to URLs after downloading the trace.
We calculated freshness-lifetime values from the HTTP-
response headers by the Squid object freshness model (HTTP/1.1
compliant), using a CONF PERCENT value of 10%, a CONF MAX
value of a day, and a CONF MIN value of 0 for all URLs.
As indicated in Section 2 freshness-lifetime values are fairly
static so the values we obtained should be a fairly good
approximation of actual values at the time requests were
logged.
In various simulations, we changed the age of re-
turned copies (and TTL values) to emulate access through
diﬀerent types of sources.
Since we could not GET all URLs in a reasonable time
frame without adversely aﬀecting our environment, we used
random sampling, weighted by number of requests, and fac-
tored it out for the ﬁnal results. In total we fetched about
224K distinct URLs.
4.3 Data
We used two 6 days logs from NLANR caches [16] collected
January 20th until January 25th, 2000. We used both the
complete original traces and sub-traces obtained by consid-
ering only requests issued by a randomly-sampled fraction of
the clients (IP addresses). (We actually sampled a diﬀerent
set of clients per day of the trace since the anonymization
process of the NLANR logs scrambles client IP addresses
diﬀerently each day.)
Table 1 lists the number of requests in each log, and the
fractions of requests on which our separate GET request is-
sued to the URL obtained (i) an HTTP response code other
than 200 (OK), (ii) 200 code with a non-cachable response,
and (iii) a 200 code with a cachable response.
As we shall see, the analysis suggests that performance
and its dependence on source type and parameters could
highly vary with the request-rate of the object at the client-
cache. In the context of traces, we deﬁne the request rate
as the number of requests issued for the object in the du-
ration of the trace divided by (tf − t0)/T (the number of
freshness-lifetime durations contained in the duration of the
trace). To facilitate performance measurements as a func-
tion of request-rate we partitioned objects in the trace ac-
cordingly. The partition included only objects for which
request-rate is deﬁned, namely, cachable objects. The sepa-
rate consideration of each range of request-rates also allows
for extrapolating results to caches with diﬀerent distribu-
tions of request-rates.
We use the notation UCx[a–b] and SDx[a–b] for all re-
quests made to objects with rate in [a, b) in the respective
trace (UC or SD) and an x fraction of the clients. Figure 5
shows that only 2% of hits and 45% of requests were on
URLs with rate less than 0.2. The 0.2–2 range includes 66%–
74% of hits and 40% of requests. We observed that most
no-cache requests occurred on the 5–∞ range. Whereas our
analysis covers all rates, these statistics indicate which rate
ranges are more signiﬁcant for the performance of these two
CDFs on Requests per Lifetime (SD)
n
o
i
t
c
a
r
f
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
URLs
requests
hits
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
5
Requests per Lifetime
Figure 5: Cumulative fraction of URLs, requests,
and hits on requests made to objects with request
rate at most x.
NLANR caches. Even though higher request rates corre-
spond to higher hit rates, since fewer requests involve very
high rates, most hits are obtained in the range 0.2–2.
4.4 Performance metric
We use the miss rate as our performance metric. The
miss rate is the ratio of misses (request on which the cache
did not have a fresh cached copy) to “total” requests.
In
“total requests” we excluded some requests that would be
cache misses under all source types. In particular, we did
not include requests made to explicit noncachable objects.
We also did not count cold-start misses (ﬁrst logged request
for each URL). Coupled with the miss-rate, we also consider
the age-penalty.
We simulated a cache with inﬁnite storage capacity. Thereby
separating aging-issues from the well-studied performance
eﬀects of the choice of replacement policy and available stor-
age. Our assumption of inﬁnite storage is justiﬁed by the
common scenario for high-volume well-tuned caches [16] where
the freshness lifetime duration (typically 24 hours) of most
objects is smaller than the duration for which an object re-
mains cached after its most recent request (typically few
days). In such caches a copy would typically become stale
before it is evicted by the replacement policy.
4.5 Simulated sources
We simulated the three basic sources deﬁned in Section
3.2. For sources other than auth we consider two versions
according to the action on client requests that are labeled
in the log as issued with a no-cache request header. For a
source type x, the version x−
assumes that these requests
get forwarded to an authoritative source and thus a copy
with zero age is obtained. The source version x+ provides
the same eﬀective TTL value for no-cache requests as for
“regular” cache misses. Our motivation for considering x+
is that it mimics a source that seems authoritative but is not
the true origin as occur for example with CDNs. Another
reason for studying these two versions is to asses the eﬀect
of no-cache requests.
5. RELATIONS BETWEEN SOURCES
Analysis reveals [4, 5] that for any sequence of requests
the miss-rate of a client cache when it uses an auth source
is never larger than the miss-rate through an exc source.
log
UC1 [0–∞]
SD1 [0–∞]
# requests HTTP RC (cid:1)= 200 Not cachable
0.21M (3.7%)
0.4M (5.3%)
0.93M (16.6%)
0.97M (12.8%)
5.6M
7.5M
Cachable
4.5M (79.7%)
6.1M (80.6%)
Table 1: Classiﬁcation of the requests in the NLANR logs.
In turn, the miss-rate through an exc source is never larger
than through an ind source. It follows that in terms of age
penalty, authoritative servers are the most eﬀective source.
For replicating sources, it is more eﬀective to use the same
cache (per client-object pair) rather than alternate between
several caches. So when conﬁguring top-level Web content
caches one would like to partition the workload such that
each client-object pair is consistently mapped to the same
cache.
It is now interesting to ask what are the performance gaps
between the diﬀerent sources. Worst-case analysis shows [4,
5] that the age-penalty of an exc source can be 1 (dou-
ble the miss-rate incurred with an auth source) whereas an
ind source can have age-penalty of e − 1 = 1.718 . . . [4, 5].
Here we explore the performance gaps for request sequences
drawn from speciﬁc distributions and actual proxy logs.
5.1 Fixed-frequency arrivals
We extend the example of Section 3.1 to arbitrary ﬁxed
frequency arrivals and compute the miss-rate of diﬀerent
sources as a function of the request-rate.
Consider a client-cache that get requests for an object in
regular intervals of f ∗ T (0 < f ) where T is the freshness
lifetime of the object (the request-rate is λ = 1/f ). If the
client-cache uses an auth source then the TTL of the copy
obtained after a miss would be T and thus the (cid:6)1/f(cid:7) sub-
sequent requests must be hits so the miss rate of the client-
cache is 1/((cid:6)1/f(cid:7) + 1). Through an exc source, the miss
rate is min{f, 1}, since each request is a miss in a fraction
of min{f, 1} of the possible source displacements α ∈ [0, T ]
(this is the likelihood that a T -interval started between the
previous and current requests). Therefore, the age penalty
of exc is min{f, 1} ∗ ((cid:6)1/f(cid:7) + 1) − 1. Hence, for ﬁxed fre-
quency arrivals auth is more eﬀective than exc if f ≤ 1.
We next consider an ind source. Let X be a random
variable that counts the number of hits at the client-cache
that follow a miss. The variable X takes the value i if the
TTL drawn was between i ∗ f ∗ T and (i + 1) ∗ f ∗ T for
every 1 ≤ i ≤ (cid:6)1/f(cid:7) − 1. Variable X can also take the value
(cid:6)1/f(cid:7) with probability (1 mod f ). So we obtain that the
expectation of X is
E(X) = ((cid:6)1/f(cid:7)) (((cid:6)1/f(cid:7) − 1)f /2 + (1 mod f )) .
Hence, the miss rate is 1 if f ≥ 1 and otherwise it is
1/(1 + ((cid:6)1/f(cid:7)) (((cid:6)1/f(cid:7) − 1)f /2 + (1 mod f ))) ,
which can be simpliﬁed to 2/(1/f + 1) for integral values
of 1/f . The behavior is more easily viewed through Fig-
ure 6, which shows the miss-rate and age-penalty as a func-
tion of f . The miss-rate decreases with request-rate. The
age-penalty, however, exhibits non-monotonic dependence
on request-rate, where integral values of λ = 1/f incur con-
siderably lower penalty than slightly lower values. For high
request-rates, the age-penalty through ind approaches 1 and
through exc approaches 0. For request-rates lower than 1
(f ≥ 1) the age-penalty is 0.
(cid:1)
trace
UC1 [0–∞]
UC1 [5–∞]
UC1 [2–5]
UC1 [0.2–2]
(cid:2)
0+–0.2
UC1
UC0.1 [0–∞]
UC0.1 [2–∞]
SD1 [0–∞]
SD1 [5–∞]
exc
auth
ind
42% 50% 52%