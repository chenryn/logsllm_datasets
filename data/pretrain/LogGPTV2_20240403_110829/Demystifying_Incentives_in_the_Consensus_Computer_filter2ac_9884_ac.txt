The attack is applicable to most cryptocurrency once they
become widely adopted, regardless of the applications run-
ning on top of the cryptocurrency. One can imagine the
same problem will ocur in Bitcoin if block sizes were to in-
crease dramatically, say to 1 GB per block. An attacker
has incentive to create such a huge block to waste other
miners’ resources so as to gain advantage in the race for
the next block. Such attacks have been reported in Bitcoin
recently [25, 26]. It is shown in [26] that one can create a
block-size transaction which requires miners to hash 19.1 GB
of data and takes an average of CPU 3 minutes to verify. Bit-
coin patched this vulnerability by allowing only pre-deﬁned
standard transactions, and thus limiting the potential ap-
plications of Bitcoin. Ethereum, on the other hand, has
no such restrictions and permits users to deﬁne arbitrarily
contracts.
Claim 2 (Nakamoto consensus permits unveriﬁed blocks).
Assuming all miners are rational, Nakamoto consensus may
elect blockchains with unveriﬁed transactions.
Rationale. Miners in Nakamoto consensus-based cryptocur-
renices are vulnerable to a resource exhaustion attack (At-
tack 1). The time and computational resource required to
verify all transactions in a block expands signiﬁcantly with
number of transactions. By skiping veriﬁcations, a miner
starts the race to ﬁnd the next block earlier than honest min-
ers. As a result, rational miners yield a longer blockchain
by not verifying transactions in all blocks that they receive.
By Nakamoto consensus, the longer chain will be considered
the main chain 2 and contain unveriﬁed transactions.
Incentive incompatibility in existing cryptocurren-
cies. Since users can place arbitrary computation in a script,
miners in Ethereum have high incentive to skip verifying a
block. For example in Figure 4, one can set n arbitrar-
ily large to create a contract that requires, say, 30% of the
computational power used in mining a block to verify its
execution. That demand slows down the mining process of
miners and incentivizes rational miners to skip veriﬁcation
in order to maintain their search speed in ﬁnding new blocks.
Even though the remaining honest miners still account for
the majority of the computational power in the network,
their eﬀective power is reduced by 30%. Thus, with high
probability the rational miners will ﬁnd more blocks and
get a longer blockchain by skipping the veriﬁcation of these
transactions.
As we mentioned earlier, Ethereum introduced constraints
on the rate of gasLimit variation. Unfortunately, however,
we discuss in Appendix A why the gasLimit constraints are
not a fool-proof mitigation against our attacks.
In Bitcoin, although the amount of work required to verify
all the transactions is smaller, miners have non-zero incen-
tive to skip veriﬁcation as well. Indeed, on July 4 2015, a se-
rious incident on the Bitcoin network was reported, wherein
large pools extended blocks containing invalid transactions
[27]. These pools mined on blocks without ﬁrst verifying
the block’s transactions and caused a fork in the blockchain.
As the veriﬁer’s dilemma describes, rational miners lack im-
mediate economic incentives to verify transactions in newly
mined blocks. The computational eﬀort exhausted in verify-
ing transactions detracts from the race to mine subsequent
blocks, and it is possible that these pools skipped veriﬁca-
tion in order to gain computational advantage in the mining
race.
2In Bitcoin, the protocol picks the blockchain which has
more amount of work (the sum of the diﬃculties in blocks).
However, it will be almost the same as comparing the lengths
of both the blockchains.
4.
INCENTIVIZING CORRECTNESS
In this section, we study and address the design drawbacks
of the consensus protocol to prevent the aforementioned At-
tack 1 and Attack 2. Our goal is to incentivize miners to
verify all transactions in each new block broadcast to them.
Miners who deviate from the protocol should gain negligi-
ble advantage, and honest miners who verify all transactions
should suﬀer negligible disadvantage from dishonest or ma-
licious miners. Our consensus-based computation protocol
below is not tied to any particular cryptocurrency, however
we show how one might realize it in Ethereum in a way so
as to achieve correct computations.
4.1 Consensus-based computation model
We deﬁne the consensus computation model, which for-
malizes the veriﬁcation process of transactions/contracts in
any consensus protocol, as follows.
Deﬁnition 1. A consensus-based computation protocol em-
ployed by a consensus computer involves three parties.
• Problem giver (G): who needs a solution for his partic-
ular problem and provides a function f which veriﬁes
the correctness of a solution.
• Prover (P): who submits a solution s to claim the re-
ward from G.
• Veriﬁers (V): miners in the network execute f (s) to
decide whether s is a correct solution. In addition V
always try to mine a new block, which requires Wblk
work on average, in order to gain a reward.
In Bitcoin, the veriﬁcation function f is rather simple. For
the transaction in Figure 1, the problem that a sender (G)
asks is to determine whether a receiver is the intended payee.
The solution s that the receiver (P) needs to provide is his
public key signed by his private key. The miners (V) will
execute a function f deﬁned in scriptPubKey to determine
if s is correct and P can spend the received amount in that
transaction. Miners all try to ﬁnd new blocks to get reward
as newly minted coins.
Let us denote by Wf the amount of work required to ex-
ecute a veriﬁcation function f . We deﬁne the advantage of
rational miner as follows.
Deﬁnition 2. The advantage for a rational miner by skip-
ping the veriﬁcation of a transaction with veriﬁcation func-
tion f is:
Adv(f ) = Wf − Wdf
where Wdf is the work required by deviating from the honest
protocol.
Generally Wdf = O(1), which is the cost of picking a ran-
dom result in {0, 1} or even Wdf = 0 if the miners just an-
swer a constant value. Based on Deﬁnition 2, the advantage
that a dishonest miner can get by skipping the veriﬁcation
process in one block is:
N(cid:88)
N(cid:88)
Wfi − O(1)
Adv(Blk) =
Adv(fi) =
i+1
i=1
where N is the total number of transactions in a block Blk,
and fi is the veriﬁcation function for the i-th transaction
in Blk. Our threat model assumes an ε-rational miner as
deﬁned in Deﬁnition 3.
Deﬁnition 3. An ε-rational miner is one who honestly ver-
iﬁes the transactions in a block iﬀ
Adv(Blk) ≤ εWblk,
and deviates from it otherwise.
A ε-rational miner is incentivized to deviate from the hon-
est protocol if the the work required to verify all transactions
in a block is higher than a threshold εWblk. Being dishonest
helps him have a higher chance of ﬁnding the next blocks
since others have to do a signiﬁcant amount of work verify-
ing transactions. On the other hand, if the work required
is less, skipping the veriﬁcation does not gain him much ad-
vantage (e.g., lesser than other practical factors like network
latency) to make his blockchain the longest one. Doing that
may even risk his new block value if other miners detect that
the previous block includes invalid transactions.
Incentivizing correct consensus computation. We
incentivize miners to correctly execute f by limiting the
amount of work required to verify all transactions in a block.
Our goal is to provide an upper bound in the advantage
that miners get by deviating from the honest protocol. This
means honest miners are also guaranteed not to run long
and expensive scripts while verifying the transactions. More
speciﬁcally, we propose a new model deﬁned as follows.
Deﬁnition 4. An ε-consensus-based computation protocol
is a protocol in which the total amount of work that all
veriﬁcation functions require miners to do is at most εWblk
per block.
A ε-consensus computer is a consensus computer that fol-
lows an ε-consensus-based computation. From Deﬁnition 3,
our ε-consensus computer is incentive-compatible w.r.t. ε-
rational. More speciﬁcally, it incentivizes miners to behave
correctly, i.e., honestly verify all transactions in a block.
4.2 Building an ε-consensus computer in
Ethereum
One can estimate the value of ε to be the largest amount
of “common good” work that the majority of miners ﬁnd
acceptable. This value, however, depends on several fac-
tors including the real net-worth of applications on the cur-
rency, the network properties, the incentive mechanism in
the cryptocurrency, and individual miner’s beliefs about the
currency’s value. Estimating ε is a separate and interesting
research problem. Our next goal is to design a cryptocur-
rency network which supports ε-consensus computing for a
speciﬁc pre-chosen value ε.
We next describe how to support ε-consensus computer
based on Ethereum without requiring any major changes in
its design. We further discuss which classes of computa-
tions can be run correctly on the existing cryptocurrency.
While in general it is non-trivial to estimate the compu-
tation required by programs written in a Turing-complete
language [28], the gas charged for a transaction is a reliable
indicator of the amount of work required in that transac-
tion script. To make our approach clearer, we deﬁne a gas
function G(x) as in Deﬁnition 5.
Deﬁnition 5. The gas function G(x) determines the maxi-
mum gas amount that a program can require to do x amount
of work.
Since Ethereum already speciﬁes the gas value for each
opcode in their design [23], computing G(x) is relatively
easy. Moreover, G(x) can be computed once and used for
all transactions. It only requires to update G(x) again if the
gas value is changed, or more opcodes are enabled.
We need only introduce a critical constraint on the trans-
action to make Ethereum an ε-consensus computer. That is,
miners should only accept to verify the transaction that has
gasLimit bounded by G(εWblk/N0), where N0 is the max-
imum number of transactions can be included in a block.
Generally N0 is ﬁxed and represents the upper bound on
the computational capacity of the network in one block time.
We formally state our solution in Lemma 1.
Lemma 1 (Achieving ε-consensus computer in Ethereum).
Given a speciﬁc ε value, one can construct an ε-consensus
computer from Ethereum by limiting the gasLimit in every
transaction by
(cid:18) εWblk
(cid:19)
G
.
N0
1 init :
2
3
4 code :
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
...
c o n t r a c t . storage [7] == 0 # no . of rounds
...
if msg . d a t a s i z e ==1:
c o n t r a c t . storage [8]= msg . data [0] # store C
c o n t r a c t . storage [9]= msg . sender # store prover
return ( " S u b m i t t e d C " )
# verify the result
elif msg . d a t a s i z e == 0:
C = c o n t r a c t . storage [8]
i = c o n t r a c t . storage [7]/ n
j = c o n t r a c t . storage [7]% n
c o n t r a c t . storage [7] += 1
cell = sum ([ A [ i ][ k ] * B [ k ][ j ]
for k in range ( n )])
if cell != C [ i ][ j ]:
return ( " Invalid result " )
# after n ^2 checks have passed
# send the reward to the prover
if c o n t r a c t . storage [7] == n * n :
s e n d _ r e w a r d ()
....
Proof. Let us denote Wtx as:
Wtx =
εWblk
N0
.
Since the gasLimit is at most G(Wtx), Wtx is the upper
bound on the amount of work required to verify a transac-
tion. Thus, the work required in verifying all transactions
in a block is no greater than εWblk. By Deﬁnition 3, this an
incentive-compatible strategy for ε-rational miners.
There are certainly classes of computations that require
more than Wtx and even εWblk work to execute. While one
can code such scripts in Ethereum, these puzzles fall outside
the class of computations that our ε-consensus computer
model can guarantee to execute and verify correctly.
4.3 Supporting more applications on an
ε-consensus computer
We discuss two techniques for supporting puzzles which
require greater than Wtx veriﬁcation in Ethereum. One
technique achieves correctness but sacriﬁces performance la-
tency since it distributes the computation across multiple
transactions and blocks that ﬁt in the ε-consensus com-
puter model. This technique eﬀectively amortizes the veri-
ﬁcation cost across multiple transactions and blocks in the
blockchain. The second technique, on the other hand, sac-
riﬁces only exactness and achieves probabilistic correctness.
4.3.1 Exact consensus computation
We introduce our ﬁrst technique in the context of exact
solutions. Here we simply split the execution of the script
into smaller steps such that verifying each step requires at
most Wtx work. Once all the steps have been run and veriﬁed
as separate scripts, the outcome is the same as the result one
would obtain from correctly executing the original script.