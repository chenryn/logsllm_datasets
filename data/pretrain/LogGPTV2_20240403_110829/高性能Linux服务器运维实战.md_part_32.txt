## Page 169
换所需的时间。
使并没有什么事情需要内存，Linux 也会交换出暂时不用的内存页面。这可以避免等待交
经常使用的信息保留到物理内存。
核会在适当的时候将物理内存中不经常使用的数据块自动交换到 Swap 交换空间中，而将
158
页内存（HugePages）来解决。具体实现方法将在后面详细介绍。
系统的岩机，如果这些进程占用资源非常高，就要考虑优化系统，或添加硬件资源。·
kswapdi。如果这些进程占用系统资源很多，尤其是在负载很大的业务系统中，可能引起
和 pages_low），当空闲内存页的数量低于pages_low的时候，kswapd进程就会扫描内存并
内存是否紧张，如果不紧张，则进入睡眠状态。在kswapd 中，有2个阈值（pages_hige
于最近最少使用原则（LeastRecentlyUsed，LRU）在活动页中寻找可回收的页面，看看
存页给新的请求使用。这个过程叫作内存回收。其中，kswapd内核线程负责页面回收。
程用。内核知道有多少页可用，也知道它们的位置。
把这些页面分配给这个进程，否则，内核会从其他进程或者页缓存中拿来一部分给这个进
页的大小通常是4KB。当一个进程请求一定量的页面时，如果有可用的页面，内核会直接
效管理内存空间。
掌握Linux内存调优的办法，就必须先理解Linux 内存架构、地址布局以及Linux 如何高
的内存。
申请到的虚拟内存不一定全部是物理内存的映射，还可能包含由磁盘上的交换空间映射来
就需要向Linux内核请求一个特定大小的内存映射，并且收到一个虚拟内存的映射。这个
所有内存（包含物理内存和逻辑内存）都映射成虚拟内存，这样，应用程序在使用内存时，
内存，要使用这些内存，需要通过一个映射机制来实现。也就是说，Linux操作系统会把
在Linux操作系统中，无论是系统内核，还是应用程序，
出的一块逻辑内存区域，用作逻辑内存的磁盘空间被称为交换空间（Swap Space）。但是，
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
如果在进程请求指定数量的内存页时没有可用的内存页，内核就会尝试释放特定的内
Linux的这种虚拟内存管理机制对用户和应用程序通常都是不可见的。所以，如果要
其次，Linux 进行页面交换是有条件的，不是所有页面在不用时都交换到 Swap。Linux
在某些情况下，kswapd进程如果频繁被唤醒会过度消耗CPU，此时可以通过设置大
Linux在负载比较大（内存很紧张）的时候一般会看到这样的两个进程：kswapdO和
Linux 的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内
页是物理内存或虚拟内存中一组连续的线性地址，Linux 内核以页为单位处理内存，
2.页高速缓存和页写回机制
首先，Linux系统会不时地进行页面交换操作，以保持尽可能多的空闲物理内存，即
要深入了解Linux内存运行机制，需要知道下述几个方面。
3
：Swap交换空间
，都不能直接使用物理内存和逻辑
基
---
## Page 170
inode（日志文件），即日志记录功能，用于记录文件系统元数据或者各种写操作的变化。
EXT3文件系统。
程就越长。很显然，这种机制无法应用到对实时性要求很高的业务系统上，此时就会产生
元数据信息，这种扫描是对整个文件系统进行扫描，要扫描的文件系统分区越大，检测过
失的情况。在系统重新启动时，EXT2文件系统会调用文件扫描工具fsck试图恢复损坏的
的时间段内将修改操作批量写入磁盘。通过这种机制优化了文件系统的写入性能。
中，对这个文件的修改并不会马上写入磁盘，但是系统会通过一个守护进程，在一个合理
是读和写操作不是同步进行的，例如，修改了某个文件后，这个修改操作仅仅存在于内存
组ID、块数等。
要属性信息，如文件大小、访问时间、修改时间、创建时间、访问权限、文件属主 ID、
记录文件信息，一个inode对应一个文件。索引节点是一种数据结构，它存放着文件的重
其设计思想没有太大变化，都是早期UNIX家族基于超级块和inode的设计理念。
是Linux上标准的文件系统，EXT3是在EXT2基础上增加日志形成的。从VFS到EXT3，
文件系统。
个文件系统的功能特性，有助于读者在优化性能的时候，根据使用需求来选择适合自已的
4.1.3
在一段时间内自行恢复，但是恢复后的系统已经基本不可用了。
来存储这些交换页面，最终会导致Linux出现假死机、服务异常等问题。Linux虽然可以
存来容纳这些页面，它们又会被马上交换出去，如此一来，虚拟内存中可能没有足够空间
所说的现象了。
个必要。那么此刻系统物理内存就会空闲很多，同时交换空间也在被使用，就出现了刚才
释放了很多内存时，刚才被交换出去的页面文件并不会自动地交换进物理内存，除非有这
会有一些不常用页面文件被交换到 Swap 中。但后来这个占用很多内存资源的进程结束并
这并不奇怪，例如，一个占用很大内存的进程在运行时，需要耗费很多内存资源，此时就
时会看到这么一个现象：Linux 物理内存还有很多，但是Swap 却仍使用了很多。其实，
EXT2文件系统一般由超级块、块组描述符、块组组成，它使用索引节点（inode）来
EXT3是一种日志式文件系统，其实就是在EXT2文件系统基础上增加了一个特殊的
EXT2文件系统保存有余的关键元数据信息的备份，一般来说不会出现数据完全丢
为了避免磁盘大量访问出现的性能问题，一般的文件系统都采用异步方式工作，也就
最后，Swap 的页面在使用时会首先被交换到物理内存，如果此时没有足够的物理内
Linux标准文件系统是从VFS开始的，然后是EXT，接着就是EXT2。应该说EXT2
1.EXT3/EXT4/XFS文件系统特性
Linux作为开源操作系统，最大的优势是它可以支持各类文件系统。了解Linux下各
由此可知，合理规划Swap非常重要。
文件系统指标
性能调优必备工具与技能第4章
159
---
## Page 171
分区就可以采用EXT2文件系统。
因为EXT2 没有日志记录功能，这样就节省了很多磁盘性能。例如，Linux系统下的/tmp
差不多，但在效率上（CPU利用率）最好的是XFS，接下来依次是EXT4和EXT3。
统是最佳选择。根据实际应用经验，对XFS、EXT4、EXT3块写入性能对比，整体上性能
文件系统都是不错的选择。
法都是不合理和不科学的。
和环境与文件系统特性结合起来综合考虑，任何脱离应用环境而单独谈文件系统优劣的方
件系统。
系统中，后来被移植到Linux系统，它通过分布处理磁盘请求、定位数据、保持Cache的
新系统将XFS设为了默认的文件系统。XFS也是一个高级日志文件系统，最初用于UNIX
大的文件系统和更大的文件、日志校验、快速fsck、在线碎片整理等。、
功能更加先进，可以大大提高Linux系统的性能。例如，EXT4支持更多子目录数量、更
据日志内容很快恢复被破坏的数据或者文件系统。
志文件系统的内容完整记录着进行了哪些操作，因此当系统重启时，日志文件系统就能根
新的更新内容。如果崩溃发生在真正的写操作时（此时日志文件记录已经更新），由于日
系统崩溃在日志内容被写入之前发生，那么原始数据仍然保留在磁盘上，丢失的仅仅是最
能顺序记录了文件系统的各种写操作和元数据的变化。因此，在EXT3文件系统下，如果
这样一来，在磁盘操作事务被真正写入到磁盘最终位置以前，首先通过日志文件的记录功
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
160
一致性来提供对文件系统数据的低延迟、高带宽的访问。因而，XFS 极具伸缩性。
EXT3文件系统流行了10多年，最终又被EXT4文件系统取代，取代的原因是EXT4
RHEL6.x/CentOS6.x系统将EXT4作为了默认的文件系统，而RHEL7.x/CentOS7.x最
目前主流的文件系统是EXT4和XFS，可根据具体的应用环境，选择最合适的一个文
》如果程序访问磁盘的方式是顺序访问，那么就换一个更好的磁盘控制器；如果是
如果要对文件系统进行调优，需要重点关注哪些方面呢？这里做个简单的总结。
3.消除文件系统瓶颈的方法
对性能要求不高、数据安全要求不高的业务，
（3）普通应用类场景
对于MySQL、Oracle、邮件系统等写操作频繁的结构化数据库类应用，XFS 文件系
（2）数据库类应用
网站系统、APP、博客等应用的特点是读操作频繁，写操作一般，那么EXT4或XFS
（1）Web类的应用
下面针对不同的应用环境介绍一下如何选择合理的文件系统。
面对这么多的文件系统，用户应该如何选择？一个合理的选择标准是：将应用的特点
2.文件系统的选择和优化
磁盘存储一定要使用RAID技术。根据不同的使用需求，选择不同的RAID 级别。
随机访问，那么就增加更多的磁盘控制器。
，EXT3/EXT2文件系统是比较好的选择，
---
## Page 172
有的I/O组件中都使用了这项技术，例如，硬盘缓存、磁盘控制器缓存以及文件系统缓存
内存中，通过缓存机制解决了处理器和磁盘之间速度的不平衡。现代计算机系统在几乎所
这导致了系统整体性能并没有因为处理器速度的提升而提升。那么如何解决CPU处理速
通过内核参数elevator来指定。
Queueing，CFQ），一个是期限，还有一个是Noop，具体使用哪种算法可以在启动的时候
而相应的算法也就被称为电梯算法。
向移动。这恰恰就是现实生活中的电梯模型，所以I/O调度器也被叫作电梯（elevator)，
机制以及影响磁盘I/O的性能指标。
4.1.4磁盘IO指标
度快，而磁盘存取速度慢的问题呢？这就用到了缓存技术。把常用数据放入到更快速度的
Linux中I/O调度的电梯算法有几种，
硬件发展到现在，处理器的性能得到了飞速提升，但是RAM和磁盘并没有质的飞跃
2.磁盘与缓存机制
》完全公平排队（Complete Fair Queuing，CFQ）。CFQ为每个进程单独创建一个队
I/O调度器的总体目标是希望让磁头能够总是往一个方向移动，移动到底了再往反方
1.磁盘I/O调度策略
磁盘数据的读、写一直是影响系统性能的重要部分。下面重点介绍一下磁盘的读、写
中，然后逐个执行这些IO 请求，当然对于一些在磁盘上连续的IO 请求，Noop
求顺序的应用。例如，对于 SSD 磁盘，采用Noop 调度算法效果会更好一些。
算法会适当做一些合并。这个调度算法特别适合那些不希望调度器重新组织I/O请
调度算法。Noop调度算法也叫电梯调度算法，它将I/O请求放入到一个FIFO队列
Noop。Noop表示没有操作（No Operation），Noop调度算法是内核中最简单的I/O
器能够获得更好的性能。
要被服务到，以此来避免某个请求饥饿。在Linux3.x以后的内核上，默认采用的
期限（Deadine）。Deadine算法的核心在于保证每个I/O请求在一定的时间内一定
上，默认采用的就是CFQ的I/O 调度器。
间片来调度，以此来保证每个进程都能被很好地分配到I/O带宽。在Linux2.6内核
列来管理该进程所产生的请求，也就是说每个进程一个队列，各队列之间使用时
非常有必要的。
选择合适的文件系统。根据上面介绍，结合业务特点选择一个适合的文件系统是
磁盘中，这样可以最大限度地提高写入性能。
给磁盘合理分区也有助于提高文件系统性能。例如，将写频繁的应用放到不同的
可采用RAID1或RAID10。RAID有软、硬之分，优先使用基于硬件实现的RAID
例如，写频繁、数据安全性要求一般，可采用RAIDO；对数据安全性要求很高，
是 Deadline的IO调度器。根据经验，在服务器环境下推荐使用Deadline调度
一个是完全公平排队（CompleteFairness
性能调优必备工具与技能
第4章
16
---
## Page 173
盘的，而是每个flusher 线程对应一个磁盘，这就避免了 pdflush 线程的问题。
的数目不是唯一的，这就避免了bdflush 线程的问题。同时，flusher线程不是面向所有磁
是面向所有磁盘的，所以有可能出现多个pdlush 线程全部阻塞在某个拥塞的磁盘上的问
磁盘的全局任务。但是pdlush 线程也存在下面的问题。
pdlush 线程，pdflush 数目是动态的，数量取决于系统的 I/O 负载。它是面向系统中所有
程被唤醒，kupdated 周期性地运行，写回脏页面。但是bdflush 也存在问题：整个系统只
flusher线程是通过一个bdflush线程来实现的，当内存消耗到特定阈值以下时，bdflush 线
缓冲同步到磁盘文件系统上，触发脏缓冲被写回磁盘有3种情况，如下所述。
同步到磁盘上，否则，如果突然崩溃，内存中的数据就会丢失。
盘和内存中的数据就不一致了，内存中的数据就叫脏缓冲（dirty buffer）。脏缓冲应该尽快
中读取同样的数据副本。当进程尝试改变数据时，会首先修改内存中的数据，这时候，磁
它的机制如下。
Cache、L2Cache、RAM等多级缓存来消除CPU和磁盘之间存储速度的差异。
162
上，导致其他磁盘的I/O回写操作不能及时执行。基于此问题，在Linux2.6版本中引入了
数据，这导致CPU的高性能无用武之地，所以要通过缓存机制来解决。缓存技术通过LI
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
题
有
一个bdflush线程，当系统回写任务较重时，bdflush线程可能会阻塞在某个磁盘的IO
同步脏缓冲是由内核中的一个线程（flusher 线程）来完成的，此线程用于将内存中脏
pdlush 的数目是动态的，这在一定程度上缓解了bdlush 的问题。但是由于pdflush
进程从磁盘中读数据时，数据被复制到内存中。该进程和其他进程都可以在内存缓存
》当空闲内存低于一个特定的阈值时，表示空闲内存不足，需要释放一部分缓存
Linux通过独立的磁盘缓存机制一
》dirty_background_bytes：当脏页面所占的内存数量超过dirty_background_bytes 时，
》dirty_background_ratio：表示当脏页面所占的百分比（相对于所有可用内存，即空
页回写中涉及的一些阈值可以在/proc/sys/vm中找到，需要关注的几个指标如下。
基于上面的问题，Linux2.6.32版本后又引入了全新的 flusher 线程概念。flusher 线程
同样导致其他磁盘的I/O回写不能及时执行。
flusher线程的实现方法随着内核的发展也在不断地变化着。在Linux2.6版本前，
由于CPU寄存器和磁盘之间的访问速度差异很大，CPU会花很多时间等待磁盘中的
内核的flusher 线程开始回写脏页面。
flusher线程开始回写脏页面数据，直到脏页面比例低于此值。
闲内存页+可回收内存页）达到dirty_background_ratio时，write调用会唤醒内核的
法，以应对回写要求严格的场景。
当用户进程调用syncO和fsyncC系统调用时，这是给用户提供的一种强制回写的方
驻留在内存中，从而减少了数据丢失的风险。
当脏页面在内存中驻留时间超过特定值时，
页面。
由于只有非脏页面才能被释放，所以要把脏页面都回写到磁盘，使其变成干净的
一页高速缓存，来解决CPU和磁盘的这种读取差异，
，这种机制确保了脏页面不会无限期
---
## Page 174
方面进行性能评估的专业工具。
这些工具，有助于读者迅速了解Linux的运行状态，最终给出合理、稳妥的系统调优方案
优工具，接下来重点给大家介绍对Linux系统进行调优时需要用到的一些工具。熟练掌握
分内容在后面会进行详细介绍。
置传输窗口、设置网络等待时间等参数，以确保网络在操作系统下以最优性能运行，这部
万兆光纤接口，并通过多网卡绑定实现冗余功能，可最大程度保障网络稳定性和可靠性。
数是否合理，是否能发挥最大的网络性能。
网络设备出故障的时候可以不影响网络运行。同时，还要考虑网络配置是否正确，配置参
实际的网络调优中，需要重点关注如下性能指标。
系统的整体性能有很大影响。因此，调优过程必须要和维护网络系统的人员紧密联系。在
换机、路由器、网关、防火墙等。尽管这些组件不受到Linux系统的控制，但是，它们对
4.1.5
4.2
这里从Linux系统的CPU、内存、磁盘、网络4个方面展开介绍，分别说明对这4个
工欲善其事，必先利其器。要对系统进行调优，除知道思路和方法外，还需要知道调
Linux系统中关于网络的内核参数有很多，例如，设置接收和发送缓冲区的大小、
3.调整操作系统内核网络参数
使用速度更快、更稳定的网卡可以最大限度保障网络性能。例如，可采用千兆光纤
2.服务器硬件要根据应用需求使用更快的网卡
网络中的接入交换机、核心交换机背板带宽是否足够，网络结构是否有余，以确保
1.网络拓扑结构是否合理
网络调优也是Linux调优必须要考虑的一个因素，网络调优涉及很多组件，例如，交
网络指标
dirty_expire_centisecs：脏数据的过期时间超过该时间后，内核的 flusher 线程被唤
dirty_expire_interval：该数值以（1/100)s为单位，它描述超时多久的数据将被周
醒时，会将脏数据回写到磁盘上，单位是（1/100）s。
回写到磁盘，单位是（1/100）s。
dirty_writeback_centisecs：设置flusher内核线程唤醒的间隔，此线程用于将脏页面
存页）达到dirty_ratio时，write调用会唤醒内核的flusher线程开始回写脏页面数
dirty_ratio：脏页面所占的百分比（相对于所有可用内存，即空闲内存页+可回收内
据，直到脏页面比例低于此值。注意write调用此时会阻塞。
期性执行的 pdflush 线程写出。
性能调优必备工具
性能调优必备工具与技能
第4章
163
---
## Page 175
状态进行监视，不足之处是无法对某个进程进行深入分析。
默认安装了此命令工具，利用vmstat 命令可以对操作系统的CPU 活动、内存信息、进程
4.2.1CPU性能调优工具
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
164
所示。
vmstat使用语法如下：
vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写，很多Linux发行版本都
CPU性能评估常用的工具有 vmstat、uptime、mpstat等，下面分别进行介绍。
》memory：显示物理内存状态。
》procs：显示队列和等待状态。
对上面每项的输出解释如下。
下面看一个具体的输出案例，这里重点看CPU的输出状态信息，输出结果如图4-1
表示每3s更新一次输出信息，
表示每3s 更新一次输出信息，循环输出，按（Ctl+C）组合键停止输出。
例如：
》-V：表示打印出版本信息。是可选参数。
各个选项及参数含义如下所述。
1.vmstat命令
V
 swpd 列表示切换到内存交换区的内存数量（以KB为单位）。如果 swpd 的值不
b列表示在等待资源的进程数，
☆r列表示运行和等待CPU时间片的进程数，这个值如果长期大于系统CPU的个
delay：表示两次输出之间的间隔时间。
-n：表示在周期性循环输出时，输出的头部信息仅显示一次。
00
vmstat35
vmstat
vmstat [-V][-n][delay
为0，或者比较大，只要 si、so 的值长期为0，这种情况下一般不用担心，不会
数，说明CPU不足，需要增加CPU。
表示按照delay指定的时间间隔统计的次数。默认为1。
3
out
35
图4-1vmstat输出结果分析