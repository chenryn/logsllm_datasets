which transaction occurred first. In Bitcoin, transactions are simul-
taneously confirmed and ordered; however, in Prism, transactions
can be confirmed before being ordered. The procedure IsTxCon-
firmed() in Algorithm 2 defines the transaction confirmation rule
–¥ and the procedure GetOrderedConfirmedTxs() defines the rule
for ordering the confirmed transactions. Both these procedures use
BuildLedger() which is described next.
BuildLedger(): Given a proposer block sequence from levels 1
to ‚Ñì, {p1, ¬∑ ¬∑ ¬∑ , p‚Ñì}, represented by blue blocks in Fig. 5(a). Let Lpi
,
represented by green blocks in the grey shaded area in Fig. 5(a), be
an ordered list of all the transaction blocks directly or indirectly
referred by block pi. Note that a transaction block t is indirectly re-
ferred by proposer block pi if pi includes a reference link to another
proposer block p‚Ä≤ that directly refers t. Since honest proposer blocks
link to any unreferenced transaction blocks and proposer blocks,
this ensures that the transaction blocks not referred by the proposer
leader sequence are also included in the ledger. Let {Lp1 , ¬∑ ¬∑ ¬∑ , Lp‚Ñì}
be the transaction block list of sequence {p1, ¬∑ ¬∑ ¬∑ , p‚Ñì} as shown in
Fig. 5(b). The procedure then expands this transaction-block list and
remove all the duplicate and double-spent transactions to output
ordered-transaction list as shown in Fig. 5(c).
IsTxConfirmed(): While confirming a leader block can take
some time6, we quickly narrow down a set of proposer blocks,
defined as proposer-set, which is guaranteed to contain the leader
block for that level. The proposer-set is realized using Def. (4.5).
This procedure first gets all the votes from the voter trees and then
gets the proposer-set for each level from the genesis to the last level
for which the proposer-set can be realized (lines:5-9). It then takes
the outer product of these proposer-sets and enumerates many
proposer block sequences (line:11). Note that by design, one of
these sequences will be the leader block sequence in the future. It
then builds a ledger for each proposer block sequence and confirms
the transaction if it is present in all of the ledgers (lines:12-14).
GetOrderedConfirmedTxs(): First obtain a leader block for
each level on proposer blocktree from genesis up until the level
which has a confirmed leader block (line:42). Then return the ledger
built from these leader blocks.
6In absence of an active attack, it will be fast, as described in Section 4.
7
(b) Transaction block ordered list(a)Leader Blocks +Transaction blocks(c) OrderedtransactionsStep 1Step 2Propose blockReference LinkTransaction blocksEpochsHonest Transaction: A naive approach for confirming TB would
be to wait until we can definitively confirm H1 or A1. However, this
may be slow because of adversarial attacks that try to balance votes.
A key insight is that for honest (non-double-spent) transactions, we
do not need to know which of H1 and A1 is confirmed‚Äîonly that
one of them will be confirmed. This weaker form of list confirma-
tion works because if A1 eventually gets confirmed, a later honest
proposer block can still refer to H1 and include TB (Section 3.2). To
confirm an honest transaction at level i, we need two events: (1) list
confirmation of all levels up to i; (2) an isolated honest proposer
at level i. Once we have list-confirmed a set of proposer blocks
at level i referring TB (e.g., either H1 or A1 will be the leader), we
know that no other block can be the leader at that level. However,
list confirmation alone is not enough for honest transaction confir-
mation if the transaction is not present in all ledgers. In that case,
we also need to wait for an isolated honest proposer level, where
the proposer block will implicitly or explicitly include TB in the
ledger. Once this isolated honest proposer level is confirmed and
all the preceding levels are list-confirmed, we can be sure that TB
will appear in the final ledger. The confirmation latency is thus the
maximum of two parts:
Double-Spent Transaction: To confirm double-spent transac-
tions, we need stronger conditions than those listed above: namely,
instead of list confirmation, we need unique block confirmation,
confirming which block at a proposer level will be the ultimate
leader. This is achieved once list confirmation occurs and one of
the list-confirmed blocks can be reliably declared the winner. If one
of the public proposer blocks H1 or A1 gathers many more votes
than the other block, then we can fast confirm a unique leader, even
for double-spent transactions; this happens both in the absence of
active attacks and under some classes of attacks (Section 5). How-
ever, other adversarial attacks (such as balancing the votes on H1
and A1) can cause the number of votes to be evenly split between
H1 and A1, so we cannot fast confirm a leader block. In this case,
we must wait until every vote on H1 and A1 stabilizes, in which
case either H1 or A1 is confirmed and only one of the double-spent
transactions is accepted. A content-dependent tie breaking rule can
be used to break ties after votes are stabilized.
(1) List confirmation. We fast confirm that the adversary cannot
produce a private block A with more votes than the votes of public
blocks H1 and A1. The logic is similar to the case of isolated honest
proposer block discussed above, viewing the situation as a race
between honest nodes voting for the public blocks H1 or A1 and
adversary voting for A. Adversarial actions (e.g., presenting first
H1 to half the honest nodes and A1 to the other half) can cause the
number of votes to be evenly split between H1 and A1, which can
slow down list confirmation, albeit not significantly.
(2) Isolated honest proposer level. In Figure 6(a), if we wait until
level 2, we see an isolated public proposer block H2 which can be
fast confirmed (Section 4.1.1). At this point, we know that the final
leader sequence at levels 1, 2 is either H1, H2 or A1, H2, both of
which contain our honest transaction since H2 refers to all previous
unreferred proposer blocks. Since isolated honest proposer blocks
happen frequently (Section 4.1.3), this step is fast.
Figure 6: (a) Transaction block is referred to by an isolated
honest proposer block. (b) Transaction block is referred to
by a non-isolated proposer block but on the next level there
is an isolated proposer block. Note that the link from H2
to TB is implicit; since H2 is honest, it refers to all unrefer-
enced transaction and proposer blocks, i.e., H1 and A1. Since
H1 refers TB, H2 implicitly does too (Section 3.2)
.
single chain is 0.45 when a block is 2-deep [16]. With m = 1000 voter
chains and each vote being 2-deep, the expected number of chains
that can be reversed by the adversary is 450. The probability that
the adversary got lucky and can reverse more than half the votes,
i.e. 500, is about 10‚àí3. Hence to achieve Œµ = 10‚àí3, we only need to
wait for 1000 votes each 2-deep. This incurs much shorter latency
than the 24 block depth needed for each vote to be reversed with
probability 10‚àí3. This reduction in latency is conceptually similar
to averaging many unreliable classifiers to form a strong aggregate
classifier: the more voter chains there are, the less certainty of
permanence each individual vote needs to be, thereby reducing
confirmation time. This gain comes without sacrificing security:
each voter chain is operating slowly enough to tolerate Œ≤ adversarial
hash power.
Just like Nakamoto‚Äôs private attack, the attack considered here
is a particular attack. Our formal security analysis, sketched in
Section 4.1.3, consider all possible attacks in the model. In particular,
the attacker can correlate its actions on the different voter chains.
However, the confirmation latency behaves similarly to the latency
under this attack.
4.1.2 Case 2: Non-isolated Proposer Block
Consider now the case when the the transaction block TB is referred
to by a honest proposal block H1 which is not isolated at its level,
i.e. H1 is matched by an adversarial public proposer block A1 (the
competing proposer block could also be honest). This matching
could persist for L levels until reaching a level when there is an
isolated honest proposal block. See Figure 6(b) for the special case
of L = 1. Let us separately consider the life cycle of an honest
transaction vs. a double-spent one.
8
Public blocksPrivate blocksList of confirmed proposer blocksùêªùê¥Honest prop blockAdversarial prop blockùêªLevel 1ùê¥TB(a)ùê¥#ùêª$ùêª#Level 1(matched)Level 2ùê¥ùê¥TB(b)4.1.3 Sketch of Security and Latency Proofs
Figure 7: Common-prefix and chain-quality properties of
voter chains imply common-prefix and chain-quality prop-
erties of the proposer leader sequence.
To translate the above intuitive arguments into formal security
and latency proofs, we borrow key ideas from [9], but also require
several new insights. [9] proves the consistency and liveness of
the Bitcoin backbone protocol by first proving two key properties:
common-prefix and chain-quality. Similarly, to show that Prism
achieves consistency and liveness, we need to show that the pro-
poser leader sequence satisfies these properties. The results of [9]
do not directly apply because the proposer leader sequence is not
determined by a single longest-chain protocol; rather, it is deter-
mined by a combination of the proposer tree and the aggregate
voter tree votes. As shown in Figure 7, we prove the two proper-
ties for the proposer and the voter trees and use them to prove
corresponding properties for the leader sequence. Specifically:
(1) Each voter tree is constructed according to the backbone
protocol, and hence satisfies the chain-quality and common-prefix
property. Chain-quality of the voter trees implies that honest nodes
will continually be able to vote for proposer blocks from every voter
tree and at every proposer level . Common-prefix implies that all
these votes will eventually stabilize. This further implies that the
leader sequence satisfies the common-prefix property (Theorem
4.1), since the leader block at each level will eventually stabilize.
Hence, the resulting ledger is consistent. The leader-sequence also
can be shown to have a certain chain quality (Lemma D.6) and this
ensures liveness of the ledger (Theorem 4.2).
(2) To show fast confirmation of all honest transactions, we fol-
low the intuitive arguments above. We first show that an isolated
proposer block, or an honest proposer block that does not have a
competing adversarial proposer block for a certain duration of time,
appears in constant expected time (independent of Œµ). Specifically,
the honest users are mining proposer blocks at the rate (1 ‚àí Œ≤) ¬Øfp
whereas the adversary is mining at rate Œ≤ ¬Øfp. Since Œ≤ < 0.5, the ad-
versary is mining slower than the honest users, and within the next
1
levels in expectation, there is a level on which the adversary
1‚àí2Œ≤
cannot immediately create a competing block with the honest block
7. Similarly, an isolated level on which the adversary cannot match
the honest block for next R rounds after the honest block is mined
happens within 1+2R ¬Øfv
1‚àí2Œ≤
(3) We next show that we can fast confirm an isolated public
honest proposer block. The argument has two parts: i) the isolated
honest block wins enough votes; 2) the leader block persists, i.e.,
wins the vote race against a private adversarial proposer block for
levels in expectation.
7Random walk analysis
9
all time. The first part follows from the chain-quality of the voter
chains, which ensures that there is a steady stream of honest votes
for the public proposer block until it gathers a sufficiently large
fraction of total votes (Lemma E.7). The second part follows from
common-prefix of the voter trees, which ensures that a large frac-
tion of the votes cannot be reversed by the adversary (Lemma E.9).
(4) Fast list confirmation of proposer blocks at all previous levels can
be proved similarly (see Lemma E.10 and Theorem 4.6). Now, Prism
ensures that at each proposer level, one of the list-confirmed blocks
will remain in the ledger. This, combined with the assurance that
every transaction will be either directly or indirectly referred by
the isolated proposal block, ensures that all honest transactions are
entered into the ledger. This lets Prism confirm honest transactions
within a short time (see Theorem 4.7).
Note that [9] proves the k-common-prefix property is satisfied
with high probability only for large k. Similarly, chain-quality is
shown to be satisfied with high probability only over a large number
of blocks. While this is sufficient to prove (1) and (2) above for the
consistency and liveness of the eventual ledger, it is not sufficient to
prove (4) and (5) for fast confirmation latency, since we need these
two properties over short latencies, i.e. windows of few blocks. In
these small time windows, these properties do not hold with high
probability microscopically, for every individual voter tree. However,
since the proposer leader block depends only on the macroscopic
vote counts, we only need to show that these properties hold with
high probability macroscopically, for a good fraction of voter trees.
4.2 Parameter Selection
We first specify the parameters of Prism in terms of the parameters
of the physical network. First, recall that the network delay of a
block containing B transactions is given by ‚àÜ = B
+ D. Let Bt ,
C
Bv, and Bp be the size of transaction, voter, and proposer blocks
respectively, in units of number of transactions. The network delays
‚àÜt , ‚àÜv, and ‚àÜp for each type of block are thus given by:
Bp
C
+ D.
+ D, ‚àÜp =
‚àÜt = Bt
C
+ D, ‚àÜv = Bv
C
(9)
Given that different block types have different sizes and network
delays, what is a reasonable choice for ‚àÜ, the duration of a round?
Since the synchronous model is used for security analysis, and
the security of Prism depends only on the network delay of the
proposer and voter blocks but not of the transaction blocks, we
choose: ‚àÜ = max{‚àÜp , ‚àÜv}. Moreover, the voter blocks and the
proposer blocks contain only reference links and no transactions,
so their sizes are expected to be small. Assuming the bandwidth-
delay product CD/max{Bv , Bp} ‚â´ 1, we have that the network
delay ‚àÜ = max{ Bv
C ,
To provide security, we set the mining rate ¬Øfv := fv D on each
voter tree such that each voter tree is secure under the longest
chain rule. According to [9] it should satisfy
log 1 ‚àí Œ≤
C } + D ‚âà D, the smallest possible.
(10)