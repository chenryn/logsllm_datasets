semicolons.
```javascript
  renderSquare(i) {
    return (
       this.handleClick(i)}
      />
    );
  }
```
## [Coalescent operator](https://www.joshwcomeau.com/operator-lookup?match=nullish-coalescing)
Is similar to the Logical `OR` operator (`||`), except instead of relying on
truthy/falsy values, it relies on "nullish" values (there are only 2 nullish
values, `null` and `undefined`).
This means it's safer to use when you treat falsy values like `0` as valid.
Similar to Logical `OR`, it functions as a control-flow operator; it evaluates to the first not-nullish value.
It was introduced in Chrome 80 / Firefox 72 / Safari 13.1. It has no IE support.
```js
console.log(4 ?? 5);
// 4, since neither value is nullish
console.log(null ?? 10);
// 10, since 'null' is nullish
console.log(undefined ?? 0);
// 0, since 'undefined' is nullish
// Here's a case where it differs from
// Logical OR (||):
console.log(0 ?? 5); // 0
console.log(0 || 5); // 5
```
# [Interacting with HTML](https://www.w3schools.com/js/default.asp)
You can find HTML elements with the next `document` properties:
| Property                       | Description                                                        |
| ---                            | ---                                                                |
| `document.anchors`             | Returns all `` elements that have a name attribute              |
| `document.baseURI`             | Returns the absolute base URI of the document                      |
| `document.body`                | Returns the `` element                                       |
| `document.cookie`              | Returns the document's cookie                                      |
| `document.doctype`             | Returns the document's doctype                                     |
| `document.documentElement`     | Returns the `` element                                       |
| `document.documentMode`        | Returns the mode used by the browser                               |
| `document.documentURI`         | Returns the URI of the document                                    |
| `document.domain`              | Returns the domain name of the document server                     |
| `document.embeds`              | Returns all `` elements                                     |
| `document.forms`               | Returns all `` elements                                      |
| `document.head`                | Returns the `` element                                       |
| `document.images`              | Returns all `` elements                                       |
| `document.implementation`      | Returns the DOM implementation                                     |
| `document.inputEncoding`       | Returns the document's encoding (character set)                    |
| `document.lastModified`        | Returns the date and time the document was updated                 |
| `document.links`               | Returns all `` and `` elements that have a href attribute |
| `document.readyState`          | Returns the (loading) status of the document                       |
| `document.referrer`            | Returns the URI of the referrer (the linking document)             |
| `document.scripts`             | Returns all `` elements                                    |
| `document.strictErrorChecking` | Returns if error checking is enforced                              |
| `document.title`               | Returns the `` element                                      |
| `document.URL`                 | Returns the complete URL of the document                           |
## [How to add JavaScript to HTML](https://www.w3schools.com/js/js_whereto.asp)
In HTML, JavaScript code is inserted between `` tags.
```html
```
That will be run as the page is loaded.
Scripts can be placed in the ``, or in the `` section of an HTML
page, or in both.
!!! note
        "Placing scripts at the bottom of the `` element improves the display speed, because script interpretation slows down the display."
A JavaScript `function` is a block of JavaScript code, that can be executed when "called" for.
For example, a function can be called when an event occurs, like when the user clicks a button.
### External JavaScript
Scripts can also be placed in external files:
!!! note "File: myScript.js"
    ```javascript
    function myFunction() {
      document.getElementById("demo").innerHTML = "Paragraph changed.";
    }
    ```
External scripts are practical when the same code is used in many different web pages.
To use an external script, put the name of the script file in the `src` (source)
attribute of a `` tag:
```html
```
Placing scripts in external files has some advantages:
* It separates HTML and code.
* It makes HTML and JavaScript easier to read and maintain.
* Cached JavaScript files can speed up page loads.
## HTML content
One of many JavaScript HTML methods is `getElementById()`.
The example below "finds" an HTML element (with `id="demo"`), and changes the
element content (`innerHTML`) to `"Hello JavaScript"`:
```js
document.getElementById("demo").innerHTML = "Hello JavaScript";
```
It will transform:
```html
JavaScript can change HTML content.
```
Into:
```html
Hello JavaScript
```
You can also use `getElementsByTagName` or `getElementsByClassName`. Or if
you want to find all HTML elements that match a specified CSS selector (id,
class names, types, attributes, values of attributes, etc), use the
`querySelectorAll()` method.
This example returns a list of all `` elements with `class="intro"`.
```javascript
const x = document.querySelectorAll("p.intro");
```
## HTML attributes
JavaScript can also change HTML attribute values. In this example JavaScript
changes the value of the `src` (source) attribute of an `` tag:
```html
Turn on the light
Turn off the light
```
Other attribute methods are:
| Method                            | Description                       |
| ---                               | ---                               |
| `document.createElement(element)` | Create an HTML element            |
| `document.removeChild(element)`   | Remove an HTML element            |
| `document.appendChild(element)`   | Add an HTML element               |
| `document.replaceChild(new, old)` | Replace an HTML element           |
## CSS
Changing the style of an HTML element, is a variant of changing an HTML attribute:
```js
document.getElementById("demo").style.fontSize = "35px";
```
## Hiding or showing HTML elements
Hiding HTML elements can be done by changing the display style:
```js
document.getElementById("demo").style.display = "none";
```
Showing hidden HTML elements can also be done by changing the display style:
```js
document.getElementById("demo").style.display = "block";
```
## [Displaying data](https://www.w3schools.com/js/js_output.asp)
JavaScript can "display" data in different ways:
* Writing into an HTML element, using `innerHTML`.
* Writing into the HTML output using `document.write()`.
    ```html
    My First Web Page
    My first paragraph.
    ```
    Using `document.write()` after an HTML document is loaded, will delete all existing HTML.
* Writing into an alert box, using `window.alert()`.
* Writing into the browser console, using `console.log()`. Useful for debugging.
## [Events](https://www.w3schools.com/js/js_events.asp)
An HTML event can be something the browser does, or something a user does.
Here are some examples of HTML events:
* An HTML web page has finished loading
* An HTML input field was changed
* An HTML button was clicked
Often, when events happen, you may want to do something.
JavaScript lets you execute code when events are detected.
HTML allows event handler attributes, with JavaScript code, to be added to HTML
elements.
```html
```
In the following example, an `onclick` attribute (with code), is added to
a `` element:
```html
The time is?
```
In the example above, the JavaScript code changes the content of the element
with `id="demo"`.
In the next example, the code changes the content of its own element (using
`this.innerHTML`):
```html
The time is?
```
JavaScript code is often several lines long. It is more common to see event attributes calling functions:
```html
The time is?
```
### Common HTML Events
Here is a list of some common HTML events:
| Event       | Description                                        |
| ---         | ---                                                |
| onchange    | An HTML element has been changed                   |
| onclick     | The user clicks an HTML element                    |
| onmouseover | The user moves the mouse over an HTML element      |
| onmouseout  | The user moves the mouse away from an HTML element |
| onmousedown | The user is pressing the click button              |
| onmouseup | The user is releasing the click button              |
| onkeydown   | The user pushes a keyboard key                     |
| onload      | The browser has finished loading the page          |
## Event handlers
Event handlers can be used to handle and verify user input, user actions, and
browser actions:
* Things that should be done every time a page loads
* Things that should be done when the page is closed
* Action that should be performed when a user clicks a button
* Content that should be verified when a user inputs data
Many different methods can be used to let JavaScript work with events:
* HTML event attributes can execute JavaScript code directly
* HTML event attributes can call JavaScript functions
* You can assign your own event handler functions to HTML elements
* You can prevent events from being sent or being handled
# [JSON support](https://www.w3schools.com/js/js_json.asp)
JSON is a format for storing and transporting data.
A common use of JSON is to read data from a web server, and display the data in
a web page.
For simplicity, this can be demonstrated using a string as input.
First, create a JavaScript string containing JSON syntax:
```javascript
let text = '{ "employees" : [' +
'{ "firstName":"John" , "lastName":"Doe" },' +
'{ "firstName":"Anna" , "lastName":"Smith" },' +
'{ "firstName":"Peter" , "lastName":"Jones" } ]}';
```
Then, use the JavaScript built-in function `JSON.parse()` to convert the string
into a JavaScript object:
```javascript
const obj = JSON.parse(text);
```
Finally, use the new JavaScript object in your page:
```html
```
# Async JavaScript
## [Timing events](https://www.w3schools.com/js/js_timing.asp)
The `window` object allows execution of code at specified time intervals.
These time intervals are called timing events.
The two key methods to use with JavaScript are:
* `setTimeout(function, milliseconds)`: Executes a function, after waiting
    a specified number of `milliseconds`.
* `setInterval(function, milliseconds)`: Same as `setTimeout()`, but repeats the
    execution of the function continuously.
For example to click a button. Wait 3 seconds, and the page will alert "Hello":
```html
 Try it
```
The `window.clearTimeout(timeoutVariable)` method stops the execution of the function specified in
`setTimeout()`.
```javascript
myVar = setTimeout(function, milliseconds);
clearTimeout(myVar);
```
To stop a `setInterval` use the `clearInterval` method.
## [Promises](https://www.w3schools.com/js/js_promise.asp)
A JavaScript Promise object contains both the producing code and calls to the
consuming code, where:
* "Producing code" is code that can take some time
* "Consuming code" is code that must wait for the result
The syntax of a Promise is kind of difficult to understand, but bear with me:
```javascript
let myPromise = new Promise(function(myResolve, myReject) {
// "Producing Code" (May take some time)
  myResolve(); // when successful
  myReject();  // when error
});
// "Consuming Code" (Must wait for a fulfilled Promise)
myPromise.then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);
```
When the producing code obtains the result, it should call one of the two callbacks:
* *Success* then calls `myResolve(result value)`
* *Error* then calls `myReject(error object)`
For example:
```javascript
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}
let myPromise = new Promise(function(myResolve, myReject) {
  let x = 0;
// The producing code (this may take some time)
  if (x == 0) {
    myResolve("OK");
  } else {
    myReject("Error");
  }
});
myPromise.then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);
```
### Promise object properties
A JavaScript Promise object can be:
* Pending
* Fulfilled
* Rejected
The `Promise` object supports two properties: `state` and `result`, which can't
be accessed directly.
* While a `Promise` object is `pending` (working), the result is `undefined`.
* When a `Promise` object is `fulfilled`, the result is a `value`.
* When a `Promise` object is `rejected`, the result is an `error` object.
## Waiting for a timeout example
Example Using Callback:
```javascript
setTimeout(function() { myFunction("I love You !!!"); }, 3000);
function myFunction(value) {
  document.getElementById("demo").innerHTML = value;
}
```
Example Using Promise
```javascript
let myPromise = new Promise(function(myResolve, myReject) {
  setTimeout(function() { myResolve("I love You !!"); }, 3000);
});
myPromise.then(function(value) {
  document.getElementById("demo").innerHTML = value;
});
```
## [Async/Await](https://www.w3schools.com/js/js_async.asp)
`async` and `await` make promises easier to write.
`async` makes a function return a `Promise`, while `await` makes a function wait
for a `Promise`.
### Async syntax
For example
```javascript
async function myFunction() {
  return "Hello";
}
```
Is the same as:
```javascript
function myFunction() {
  return Promise.resolve("Hello");
}
```
Here is how to use the Promise:
```javascript
myFunction().then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);
```
If you only expect a normal value, skip the `function(error)...` line.
### Await syntax
The keyword `await` before a function makes the function wait for a promise:
```javascript
let value = await promise;
```
The `await` keyword can only be used inside an async function.
For example the next code will update the content of `demo`  with `I love you
!!` instantly:
```javascript
async function myDisplay() {
  let myPromise = new Promise(function(resolve, reject) {
    resolve("I love You !!");
  });
  document.getElementById("demo").innerHTML = await myPromise;
}
myDisplay();
```
But it could have a timeout
```javascript
async function myDisplay() {
  let myPromise = new Promise(function(resolve) {
    setTimeout(function() {resolve("I love You !!");}, 3000);
  });
  document.getElementById("demo").innerHTML = await myPromise;
}
myDisplay();
```
# [Cookies](https://www.w3schools.com/js/js_cookies.asp)
Cookies are data, stored in small text files, on your computer. They hold a very
small amount of data at a maximum capacity of 4KB.
When a web server has sent a web page to a browser, the connection is shut down,
and the server forgets everything about the user.
Cookies were invented to solve the problem "how to remember information about the user":
* When a user visits a web page, his/her name can be stored in a cookie.
* Next time the user visits the page, the cookie "remembers" his/her name.
There are two types of cookies: persistent cookies and session cookies. Session
cookies do not contain an expiration date. Instead, they are stored only as long
as the browser or tab is open. As soon as the browser is closed, they are
permanently lost. Persistent cookies *do* have an expiration date. These cookies
are stored on the user’s disk until the expiration date and then permanently
deleted.
!!! note
        "Think if for your case ithe's better to use [Web storage](#web-storage) instead"
## Setting a cookie
Cookies are saved in name-value pairs like:
```javascript
username = John Doe
```
When a browser requests a web page from a server, cookies belonging to the page
are added to the request. This way the server gets the necessary data to
"remember" information about users.
JavaScript can create, read, and delete cookies with the `document.cookie` property.
With JavaScript, a cookie can be created like this:
```javascript
document.cookie = "username=John Doe";
```
You can also add an expiry date (in UTC time). By default, the cookie is deleted
when the browser is closed:
```javascript
document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC";
```
With a path parameter, you can tell the browser what path the cookie belongs to.
By default, the cookie belongs to the current page.
```javascript
document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/";
```
## Reading a Cookie
With JavaScript, cookies can be read like this:
```javascript
let x = document.cookie;
```
`document.cookie` will return all cookies in one string much like:
`cookie1=value; cookie2=value; cookie3=value;`. It looks like a normal text
string. But it is not.
If you want to find the value of one specified cookie, you must write