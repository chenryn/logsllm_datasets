I  PRF&?)(K3). 
Consider the example in Figure 3.  Member M 3  leaves the 
group.  In  step 1, the key  server deletes the nodes that cor- 
respond  to the keys  K4  and Kg.  The server promotes the 
node  of  K 5 .   In  step 2,  the  server updates the  keys on  the 
key path of the leaving member K3  and K1. 
The server computes the new key KA  as follows: 
KA  = PRF&z,"'(K3),  with 
C L R ~  = PRFg;""(K3) 
To update key K1 the key server computes 
K:  = PRFgL:Y'(K1) 
I  PRFEG""(K1). 
CLR~ = PRFK; ("+"I) (KI) 
In  step 3 the server broadcasts the key  update, which  con- 
tains the following: 
{PRF&?')(K3)}Kf, 
{ PRF("+"I) K," 
Finally, subsequent data packets contain  the following hint 
(step 4): 
PRF("+"3)  (O),  { LSB("Z-nI) (PRF(n+n2) 
{PRF$;"2)(K3)}Kf 
{PRF("+"~)  (K1)}K[ 
for KA, and 
for K:' 
and 
K;7 
PRF(",-'"3) 
K X 7  
,zio 
(K1))}KiP' 
(O), { LSB("2-"1)  (pRF("'"2) KF 
(K3))>Kt 
Example 1: Member leave protocol 
M3 leaves 
M4 leaves 
M5 joins 
M6 joins 
M4 
MZ 
M3 
MZ 
M5 
Figure 4. Member leave event 
contrast, the size of the OFT key update message is ( U -   1). 
bits. 
We  illustrate  multiple member leave events with  an ex- 
ample.  Assume the  setting  of Figure 4.  For this  example 
we assume that the leaving member nodes are not collapsed, 
because  the key server replaces  the leaving member nodes 
with new members. If members M3 and M4 both leave, and 
new members M 5  and MG take their spot, the keys K 4 ,  K 3 ,  
and K1  need to be updated.  If the member leave events are 
processed sequentially,  the update message for M 3  leaving 
is 3(nl +na) bits long, and the message for M4 is 2(nl fnz) 
bits  long.  If  the  server aggregates leaves,  the  message  is 
only 3(nl + n2) bits long. 
6.3  Security Analysis 
A sketch of the security analysis appears in Appendix B. 
There we show the following observations hold: 
0  With  overwhelming  probability,  a  passive  adversary 
needs to perform R(2n) operations to brute-force  an 
ELK group key. 
0  With  overwhelming  probability,  an  active  adversary 
needs to perform R(2n) operations to brute-force  any 
ELK group key preceeding the time it joins the group. 
0  After the active adversary leaves the group, with over- 
whelming  probability  it needs to perform R(2n1+nz) 
operations to derive the new ELK group key. 
We also show that pre-computation does not reduce the 
effort to brute-force a later ELK group key. 
6.4  Advantages 
ELK  provides  advantages  over  previous  solutions  for 
multicast  group key  distribution  protocols.  The join  pro- 
tocol  uses key server computation to achieve member joins 
that  do not  require any  broadcast  message,  hence greatly 
improving the scalability. Other advantages are the reduced 
size of group key updates, as well as the further reduced hint 
messages  that  allow  legitimate members to  recover  from 
lost key  updates.  The hint messages can drastically  reduce 
the number of members that need to contact the key server 
to recover from lost key update messages. 
Because of the small footprint of the hint message, each 
data packet may  carry  a hint with  it.  Hence, if  the receiver 
missed  a  key  update,  but  receives  the corresponding data 
packet, it will be able to recover the group key from the hint 
with high probability  and decrypt the message. 
Since the encrypted data without the  decryption key  is 
useless, as well as a key without corresponding data is use- 
less, combining the two seems natural.  This linking of the 
hint with  the message, however,  is  a powerful  mechanism 
that ELK makes possible, due to the small footprint  of the 
hint. 
Another  innovation  of  ELK  is  to distribute  partial  key 
tree  update  information.  Key update information  provides 
diminishing returns.  Hence  the  idea  is  to  disseminate a 
small  amount of  information that  enables the  majority  of 
the  members to recover from  a lost  update  message.  The 
remaining members (a small fraction) can be dealt with on 
an individual basis. 
255 
7  Applications and Practical Issues 
In this section  we discuss the choice for the parameters 
for ELK and arguments for its security.  The parameters  we 
discuss are:  n, n1. 722,  and  713,  (the number of bits  of the 
key, the left contribution, the right contribution, and the size 
of the key verification, respectively), and the number of lev- 
els of keys that are added to the hint. The choice of these pa- 
rameters is driven by the tradeoff between efficiency  (com- 
munication  and computation) and security. 
7.1  Security Model 
Our attacker model assumes a “reasonable” attacker who 
breaks  a  system  by  breaking the  weakest  link.  The main 
application  of this  work  is a broadcast environment where 
the receivers do not have tamper-resistant security devices. 
This implies  that  a user  has access to the decryption keys, 
because they are stored in memory. Hence, an attacker can 
always obtain  the current group key  by  subscribing to the 
service. From another perspective, how secret can a group 
key  be if  it  is shared by  lo5 members?  We judge our key 
distribution  protocol as secure if it is considerably more dif- 
ficult and expensive to get the key by breaking the key dis- 
tribution protocol than by other means. 
7.2  System Requirements 
Besides the security  requirements, we also have system 
requirements.  We  want  to  have  have  a  key  update  pro- 
tocol  that  has  low  computation  and communication  over- 
head.  For  the  hint  messages we require that  at  least  98% 
of all receivers  can recover the key from the hint message. 
This implies  that  the  hint  message includes the  keys  from 
at  least  6 levels.  The hint  to a key  of  level  i may  help a 
fraction of  2-i  members,  in  the  case of  a  single member 
leave event (assuming that the key tree is balanced).  Since 
E,“=, 2Ti  = 0.984, 6 levels are sufficient to reach  98% of 
the members. 
Furthermore  we  require  that  the  key  reconstruction  be 
faster than requesting a key update by unicast from the key 
server.  We  assume that  such a request message may  take 
around 200 ms.  Hence the requirement is  that  a fast  (e.g. 
800 MHz Pentium) workstation  could reconstruct 6 keys in 
less than 200 ms. 
As  we  discuss  in  the  implementation  section, our  test 
workstation computes 5,000,000 PRF functions per second. 
7.3  Parameters 
The first  parameter we  choose is the  group key  size n. 
In this instance we assume that ELK is used for a medium- 
security environment, and we choose the key size of 64 bits. 
Next,  we  want  to  achieve  that  the  key  reconstruction 
from a hint takes at most 200 ms, which allows us to corn.- 
pute nl. In the worst case, a member needs to reconstruct 6 
keys.  Considering that it can compute 5,000,000 PRFs per 
second, this leaves  166,666 PRF computations per key. For 
each key  guess, two PRF computations are necessary, one 
to compute the key, and the other to verify the key with the 
hint.  Therefore, we chose to use 16 bits for 721, which trans- 
lates into 2 . 216 = 13 1,072 computations for each key.  As 
we discussed previously, if  the hint message is also 16 bits 
long, the member expects to get one additional false positive 
key per level.  This implies that the member who computes 
6 keys will end up with 7 candidate keys for the group key, 
which  requires 6 times more  work  to  compute  the  group 
key.  For this  reason, we make the key  hint 723  = 17 bit; 
long, which reduces the false positives.  (Table 2 shows the 
number of  candidates for different levels.  For our recom- 
mended parameters, the number of false positives averages 
around 0.5.) 
We  now  compute the number of bits for 722 based  on a 
sample scenario. 
Protecting Perishable Information Goods 
Perishable information goods loose their value  with  time. 
An  example is  a  live “pay-per-view’’ media transmissions 
such as a sports event video feed.  Consider an example of 
perishable data that we want to protect for 10 minutes. The 
security requirements dictate that an attacker needs at least 
1000 computers to break the key in less than 10 minutes. 
We assume that the attacker has fast machines that com- 
pute lo7 PRFs per second. The 1000 computers can hence 
compute 3.6. 1013 PRFs in 10 minutes. Since we know that 
the attacker needs at least 2 .  2n1+n2 operations to break the 
key, we can derive nl  + nz  FZ  44, and 722 = 28 bits.  The 
key update per key is n1  + n 2  = 44 bits long, and the total 
size per key of a hint is n 2  - n1 + n3 = 29 bits. Hence the 
savings of the hint message are 34%. For each key hint we 
also encode the position  of the hint in the key tree with an 
additional bit (left or right).  Hence the cost for 6 key hints 
is 6 * 30 = 180 bits, which translates into 23 bytes. 
7.4  Advantages 
As  computers get  faster,  the  savings of  ELK  improve. 
We  achieve  the  largest  savings  for  the  hint  messages  if 
n1  = 722, in which case the hint is only half the size of the 
key update. In this case the legitimate members perform 2n1 
operations, but the attacker cannot perform 2n1+n2 = 22n1 
operations.  Merkle used  a similar argument to construct a 
publidprivate key encryption algorithm [20]. In his Merkle 
Puzzle  system,  he  assumes  that  legitimate users  can  per- 
form 2n  operations, but an attacker would  need to perform 
256 
2n+m  operations to  break  the -encrypted message.  Brute- 
force search  for a parameter was  also used  by  Dwork and 
Naor to fight spam mail  [lo].  Similarly, Manber [18], and 
Abadi, Lomas, and Needham [ I ]  used brute-force search to 
improve the security of the UNIX one-way password  func- 
tion. 
The above examples demonstrate that ELK can trade off 
security and efficiency.  It allows the content distributor  to 
choose the desired  level of  security on a fine-grained scale 
and lower  security  directly  translates  into smaller key  up- 
date messages.  Note  that  previous protocols do not  offer 
this  feature.  If  one  desires a  lower  security  margin  it  is 
not safe to shorten the key length, because new attacks that 
exploit short key  lengths become possible.  For  instance, 
an attacker may  perform  pre-computation  and use memory 
lookup tables  to break  the  short group key.  ELK does not 
suffer from these attacks, as we show in the security analy- 
sis in appendix B. 
8  Comparison and Related Work 
Harney and Muckenhirn introduced  GKMP [ 151, a cen- 
tralized server approach that distributes group keys through 
unicast.  We  refer  to  this  approach as  Secure Key  Distri- 
bution  Center (SKDC). Mittra’s Iolus aims for scalability 
through distributed hierarchical key servers [2 11. Molva and 
Pannetrat  involve routers  on the multicast  distribution  path 
into the security [22]. 
The logical key tree hierarchy was independently discov- 
ered  by  Wallner et al.  [34, 351, and  by  Wong,  Gouda, and 
Lam  [36, 371.  We call  this algorithm the Logical Key  Hi- 
erarchy (LKH). An optimization  that halves the size of  the 
key update message is described  by Canetti et al. [6].  This 
optimization  to LKH  is called  LKH+,  which  Harney  and 
Harder described in more detail in their Internet Draft  [ 141. 
To reduce the overhead of join, the current approach is 
to simply compute a one-way function on each key that the 
new  member  obtains, which  is  proposed  by  the  Versakey 
framework [ 81 and the LKH+ protocol  [ 141. 
Another  method  to  halve  the  size  of  the  key  update 
message is the  One-way  Function Tree protocol  (OFT) by 
Balenson, McGrew and Sherman [2, 191. In OFT, the key of 
the node is derived from the two sibling keys. The protocol 
we present in this paper resembles the OFT approach. 
Even though  the LKH+ protocol  greatly  diminishes the 
overhead  of  a group key  change to  O(log(N)) (where N 
is the number of group members), the constant key change 
with the resulting key update messages can still result in an 
unscalable  protocol  in  large  dynamic groups.  If  members 
join  and  leave  frequently,  the  resulting  key  update  traffic 
can overwhelm  the group.  Setia, Koussih, and Jajodia [30] 
attempted to solve this problem. They proposed periodic re- 
keying, which  results  in  an aggregating members that join 
or leave during a short time  interval.  They do not  address 
the  issue of reliability .of key  updates, however.  Their ap- 
proach to scalability.uses a hierarchy of key servers (similar 
to Iolus) that aggregate join and leave events.  (Within  one 
subgroup the Kronos protocol would minimize the commu- 
nication overhead by using our ELK protocol.) 
Briscoe designed the-.MARKS protocol  [4].  MARKS is 
scalable and does nottrequire any key update messages, but 
the protocol  only  works if  the  leaving  time  of the member 
is fixed when the member joins the group and so members 