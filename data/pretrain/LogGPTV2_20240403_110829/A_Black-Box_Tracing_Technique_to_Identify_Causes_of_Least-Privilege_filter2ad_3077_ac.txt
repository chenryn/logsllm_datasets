### Tracing and Analysis of Razzle

Tracing the execution of `razzle` from start to finish generated 7 log entries (see Table 3) out of a total of 8,660 security checks. The trace revealed that `razzle` initiates a series of other processes. Initially, we hypothesized that the Access Control List (ACL) on `c:\sysman` (our source code directory) was responsible for the least-privilege incompatibility. We manually modified the ACL, but upon running `razzle` a second time, the ACLs reverted to requiring administrative privileges.

Our second hypothesis was that the child process `razacl.exe` was altering the ACLs. This was confirmed by manually changing the ACL and then removing the `razacl.exe` executable, which allowed a user without administrative privileges to use `razzle`.

Consultation with the `razzle` developers revealed that `razacl` removes user accounts from ACLs in the build tree to ensure a consistent build environment across different user accounts. Modifying `razzle` to achieve a consistent build environment without requiring administrative privileges is straightforward, and the next version of `razzle` is already scheduled to incorporate this change. A system administrator can easily mitigate this least-privilege incompatibility by modifying the shell script to exclude `razacl`. If `razzle` were compiled code that required `razacl`, a system administrator could still write a separate script to reset the ACLs after running `razacl`.

#### Table 3: Log Entries for RAZZLE
| Security Function | Process       | Object Name or Security Action                             |
|-------------------|---------------|------------------------------------------------------------|
| Access-Check      | explorer.exe  | \WINDOWS\system32\cmd.exe                                  |
| Adjust-Privilege  | razacl.exe    | Enable Security privilege                                   |
| Privilege-Check   | razacl.exe    | Check if Security privilege enabled                         |
| Access-Check      | cmd.exe       | \sysman                                                    |
| Access-Check      | findstr.exe   | \sysman                                                    |
| Access-Check      | perl.exe      | \sysman                                                    |
| SID-Compare       | tfindcer.exe  | Determine if user has Admin privileges                      |

### Microsoft Greetings 2001

Microsoft Greetings 2001 is a document processing application. Our trace of its startup recorded 37 potential causes of least-privilege incompatibilities (summarized in Table 4) out of 12,618 total security checks.

Upon validating the logs, we found that the first three classes of logged security checks must succeed for the application to be usable without administrative privileges. All the security checks in the remaining two classes appear to be false positives. The failed checks seem to be easily fixable, as they reflect the common mistake of storing settings in a machine-wide scope. The next version, renamed Microsoft Picture It! 2002, does not have any least-privilege incompatibilities. From a system administrator's perspective, the second and third classes of security checks are mitigatable using standard tools, but the first class requires our validation technique. The large number of least-privilege incompatibilities in this example highlights the benefits of requiring only one trace to identify all incompatibilities.

#### Table 4: Summary of Log Entries for Microsoft Greetings 2001
| Security Function | Object Name or Security Action                                           |
|-------------------|--------------------------------------------------------------------------|
| SID-Compare       | Determine if user has Admin privileges                                    |
| Access-Check      | \Program Files\Microsoft Picture It! PhotoPub\pidocob.dll                |
| 3 Access-Check    | \REGISTRY\HKLM\SOFTWARE\Microsoft\Picture It! (and subkeys)              |
| 22 Access-Check   | \REGISTRY\HKLM\SOFTWARE\Classes (and subkeys)                            |
| 11 additional entries | ...                                       |

### Insufficient Privilege Granularity in Application Design

The following applications have functionalities appropriate for all users and some that require administrative privileges. However, they fail to accommodate both modes of operation in their design, making them unusable without administrative privileges.

#### Remote Access Service (RAS)

RAS is a program for corporate employees to remotely connect to the corporate network. Running RAS without administrative privileges leads to an error message approximately one minute after the program starts. Reproducing this problem was challenging, so we traced a small script that replicated the core RAS behavior and validated the results using the real RAS program from a remote location.

Tracing the small script generated 7 log entries out of 2,566 security checks. Six of the seven checks were related to files, registry keys, and TCP/IP devices, which we eliminated as causes of least-privilege incompatibilities using our validation technique. Causing just the last check to succeed allowed both the script and the real RAS program to run without administrative privileges.

Analyzing this one security check, we saw the Windows script interpreter attempting to enumerate all network connections by calling the function `getEnumEveryConnection` in class `CNetSharingManager` defined in `HNETCFG.dll`. This function checks for administrative privileges using `CheckTokenMembership` exported by `ADVAPI32.dll`, which internally calls the kernel function `Access-Check`.

From discussions with the RAS developers, we learned that RAS enumerates all network connections and switches them to run over the newly created Virtual Private Network (VPN). The API for enumerating network connections is designed to be usable only with administrative privileges. The RAS developers have two possible solutions: a Windows service could perform work on behalf of RAS, or an alternative API could allow enumerating only the network connections for a particular user. A system administrator could address this problem by using our validation technology to cause this one check for administrative privileges to succeed, which would be roughly equivalent to the first developer solution.

### Windows Power Configuration

Windows power options are configured per user and stored in the user's profile. However, administrative privileges are required to change power options, and the application only allows users with administrative privileges to change the power options for their own account. When a user attempts to change their power options without administrative privileges, they receive an "access denied" error message. Tracing this action led to 5 logged checks out of 1,364 total. Two of these logged checks were for `\REGISTRY\HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Controls Folder\PowerCfg`, and we validated that this one ACL was the cause of the least-privilege incompatibility.

From discussions with internal Microsoft developers, we surmised that power configuration presents difficult policy issues. Certain scenarios call for per-user settings, but those settings have machine-wide impact. One user's power option, such as the time to turn off hard disks, may interfere with applications running for other logged-in users. In a shared laptop scenario, it might be reasonable to want the power options to change depending on the person using the machine. We speculate that it might be possible to better handle this issue by adding a privileged group whose members can change the power configuration. In a shared laptop scenario, one could then add each new laptop user to the group and make a userâ€™s configuration dominant when that user is logged in to the console. However, even with this modification, power configuration would still be unavailable to an unprivileged user.

### Windows Clock/Calendar

Double-clicking the numeric clock on the right-bottom corner of the Windows desktop presents a pictorial clock and a calendar. Users find this a handy tool for answering questions like "What is the date of the last Monday of May?" Unfortunately, attempting to launch the clock without administrative privileges leads to an "insufficient privilege to change system time" error message. Even if one wanted to launch this application from a script granting it administrative privileges, this might be difficult because the command line is not readily available. Tracing this action led to 3 logged checks (see Table 5) out of 455 total.

We validated that the `SystemTime` privilege check is the cause of the least-privilege incompatibility. From discussing this case with internal Microsoft developers, we surmised that the original clock was not designed to be used in a read-only manner, but that this privilege check would provide a good place to branch, displaying a read-only UI if the privilege was missing. This least-privilege incompatibility does not fit our model for mitigation by a system administrator.

#### Table 5: Log Entries for Windows Clock/Calendar
| Security Function | Process       | Object Name or Security Action                             |
|-------------------|---------------|------------------------------------------------------------|
| Access-Check      | explorer.exe  | \WINDOWS\system32\rundll32.exe                             |
| Access-Check      | rundll32.exe  | \BaseNamedObjects\shell.{A48F1A32-A340-11D1-BC6B-00A0C90312E1} |
| Adjust-Privilege  | rundll32.exe  | Enable SystemTime privilege                                |

### Programmatic Enforcement of Unnecessary Privilege Requirements

The following applications programmatically enforce that the user possesses administrative privileges, but they function perfectly well if this check is bypassed.

#### Diablo II Game

Diablo II is an action game that ships on three CDs: an install disc, a cinematics disc, and a play disc that must be in the drive for the game to work. When a user without administrative privileges attempts to play the game, a misleading error message (Figure 3) pops up claiming the CD drive is empty. Tracing this action generated 3 log entries out of 1,573 total checks, 440 of which fail for a user without administrative privileges. The 3 log entries are shown in Table 6. Because the error message mentions the CD-ROM drive, we hypothesized that the third log entry was responsible for the least-privilege incompatibility. We verified that passing this check alone allows the game to be played without administrative privileges.

This example illustrates how least-privilege incompatibilities can be presented to the user with a misleading error message. We have not received any response from the Diablo II developers, but the misleading error message suggests that the failure mode was not anticipated by the developers. We speculate that this may be a simple programming oversight where the program attempts to acquire certain unnecessary CD-ROM accesses, and that it could easily be fixed. This least-privilege incompatibility also could easily be mitigated by a system administrator using our validation technique.

#### TurboTax 2003

TurboTax is tax calculation software released by Intuit. Running TurboTax without administrative privileges generates an error message stating that administrative privileges are necessary to use the application. Tracing the application startup generated 11 log entries out of 12,503 total security checks. The 11 logged entries break down to one entry for `SID-Compare`, three for `Access-Check` on semaphores, four for `Access-Check` on `HKLM` registry keys, and three others. Surprisingly, using our validation technique, we discovered that just causing the `SID-Compare` call to succeed is sufficient to allow using the application extensively without administrative privileges; we succeeded in running TurboTax, completing a 1040A tax form, and printing it to a PDF file. We have not yet received a response from the TurboTax developers, but we believe there are two possible reasons for this check: a quick fix for data privacy concerns and a programming oversight.