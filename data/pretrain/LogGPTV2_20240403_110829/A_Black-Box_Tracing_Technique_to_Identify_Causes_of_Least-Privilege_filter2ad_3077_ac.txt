message.
Tracing razzle from start to ﬁnish yielded 7 log entries
(shown in Table 3) out of 8660 security checks. One no-
tices immediately from the trace that razzle launches a se-
ries of other processes. Our ﬁrst hypothesis was that the
ACL on c:\sysman (our source code directory) was respon-
sible for the least-privilege incompatibility, and we changed
the ACL manually. However, when we ran razzle a sec-
ond time, the ACLs reverted to requiring Admin privileges.
Our second hypothesis was that the child process razacl.exe
was changing the ACLs. We conﬁrmed this by changing
the ACL manually and then removing the razacl executable;
this allowed a user without Admin privileges to use razzle.
We learned from consulting razzle developers that razacl
removes user accounts from ACLs in the build tree to pro-
duce a consistent build environment across user accounts.
Changing razzle to produce a consistent build environment
without requiring Admin privileges is trivial, and indeed,
the next version of razzle is already slated to have this
change incorporated. This least-privilege incompatibility is
easily mitigated by a system administrator because razzle is
a shell script, and so a system administrator can easily mod-
ify it to not use razacl. If razzle had been compiled code that
Security Function
Reference-Object
Process
Automenu.exe
Access-Check
Access-Check
Access-Check
Access-Check
explorer.exe
explorer.exe
explorer.exe
explorer.exe
Object Name
\REGISTRY\HKLM\SOFTWARE\BBC
Builder\1.0.0
\Program Files\THQ\Bob the Builder\StartBTB.exe
\WINDOWS\explorer.exe
\WINDOWS\system32\mydocs.dll
\WINDOWS\system32\shell32.dll
Multimedia\Bob
the
Table 2. Unique Log Entries for Bob The Builder
required razacl in order to complete, a system administrator
still could have written a separate script to reset the ACLs
after running razacl.
4.1.3 Microsoft Greetings 2001
Microsoft Greetings 2001 is a document processing appli-
cation. Our trace of Microsoft Greetings’ startup recorded
37 potential causes of least-privilege incompatibilities,
(summarized in Table 4), out of the 12,618 total security
checks.
In validating the logs, we found that the ﬁrst three classes
of logged security checks must succeed for the application
to be usable without Admin privileges. All the security
checks in the remaining two classes appear to be false pos-
itives. All the failed checks appear to be easily ﬁxable, as
they seem to reﬂect the standard mistake of storing settings
in a machine-wide scope. Indeed, the next (and renamed)
version of this software, Microsoft Picture It! 2002, does
not have any least-privilege incompatibilities. From the sys-
tem administrator perspective, the second and third classes
of security checks are mitigatable using only standard tools,
but the ﬁrst class requires the use of our validation tech-
nique. Finally, the large number of least-privilege incom-
patibilities in this example illustrates the beneﬁts of requir-
ing only one trace to identify all the incompatibilities.
4.2
Insufﬁcient Privilege Granularity in Applica-
tion Design
The three applications in this section all have some func-
tionality that is appropriate for all users, and some func-
tionality that should only be usable with Admin privileges.
However, they all fail to accommodate both modes of oper-
ation in their design, and consequently are not usable at all
without Admin privileges. We thank [4] for bringing many
of these examples to our attention.
4.2.1 Remote Access Service (RAS)
RAS is a program for corporate employees to remotely con-
nect to the corporate network. Running RAS without Ad-
min privileges leads to an error message roughly one minute
after the program starts. Reproducing this problem was
technically challenging because our lab did not allow us to
easily fake the remote environment that RAS assumes. Our
workaround was to trace a small script [22] that replicated
the core RAS behavior, and then to validate the results using
the real RAS program from a remote location.
Tracing the small script generated 7 log entries out of
2566 security checks. Six of the seven checks were related
to ﬁles, registry keys and TCP/IP devices that we eliminated
as causes of least-privilege incompatibilities using our val-
idation technique. Causing just the last check to succeed
allowed both the script and the real RAS program to be run
without Admin privileges.
Analyzing this one security check in more detail, we
saw the Windows script
interpreter attempting to enu-
merate all network connections by calling the function
get EnumEveryConnection in class CNetSharingManager
deﬁned in HNETCFG.dll (Home Networking Conﬁguration
Manager). This function checks that the user has Admin
privileges using the function CheckTokenMembership ex-
ported by ADVAPI32.dll, which internally calls into the ker-
nel function Access-Check.
From discussions with the developers of this tool we
learned that RAS enumerates all network connections, and
switches all of them to run over the newly created Virtual
Private Network (VPN). The only API for enumerating net-
work connections enumerates them for all connections (not
just the current user), and this API was designed to be us-
able only with Admin privileges. The RAS developers seem
to be faced with two possible solutions to this least-privilege
incompatibility: a Windows service could perform work on
behalf of RAS, thus allowing any user to switch other users’
connections to run over the VPN; alternatively, if an al-
ternative API were present that allowed enumerating only
the network connections for a particular user, one might be
satisﬁed with switching only that user’s connections to run
over the VPN. A system administrator would be restricted
to addressing this problem by using our validation technol-
ogy to cause this one check for Admin privileges to succeed
— this would be roughly equivalent to the ﬁrst of the possi-
ble developer solutions.
This example illustrates that least-privilege incompatibil-
ities may result from non-intuitive security checks where
a library indirectly checks access in its lower level imple-
Security Function
Access-Check
Adjust-Privilege
Privilege-Check
Access-Check
Access-Check
Access-Check
SID-Compare
Process
explorer.exe
razacl.exe
razacl.exe
cmd.exe
ﬁndstr.exe
perl.exe
tﬁndcer.exe
Object Name or Security Action
\WINDOWS\system32\cmd.exe
Enable Security privilege
Check if Security privilege enabled
\sysman
\sysman
\sysman
Determine if user has Admin privileges
Table 3. Log Entries for RAZZLE
Security Function
SID-Compare
Access-Check
3 Access-Check
22 Access-Check
11 additional entries
Object Name or Security Action
Determine if user has Admin privileges
\Program Files\Microsoft Picture It! PhotoPub\pidocob.dll
\REGISTRY\HKLM\SOFTWARE\Microsoft\Picture It! (and subkeys)
\REGISTRY\HKLM\SOFTWARE\Classes (and subkeys)
. . .
Table 4. Summary of Log Entries for Microsoft Greetings 2001
mentation. In cases like these, even developers beneﬁt from
tracing not requiring source code. However, because we ac-
tually did have access to the application source code, we
were able to construct the entire sequence of calls respon-
sible for the least-privilege incompatibility, not just within
the RAS application.
group whose members can change the power conﬁgura-
tion. In a shared laptop scenario, one could then add each
new laptop user to the group and make a user’s conﬁgura-
tion dominant when that user is logged in to the console.
However, even with this modiﬁcation, power conﬁguration
would still be unavailable to an unprivileged user.
4.2.2 Windows Power Conﬁguration
Windows power options are conﬁgured per user and stored
in the user’s proﬁle. However, Admin privileges are
required to change power options, and the application
only allows users with Admin privileges to change the
power options for their own account. When a user at-
tempts to change their power options without Admin
privileges,
they receive an “access denied” error mes-
sage. Tracing this action led to 5 logged checks out
of 1364 total.
Two of these logged checks were for
\REGISTRY\HKLM\SOFTWARE\Microsoft\Windows
\CurrentVersion\Controls Folder\PowerCfg, and we vali-
dated that this one ACL was the cause of the least-privilege
incompatibility.
From discussing this with internal Microsoft developers
we have surmised that power conﬁguration presents difﬁ-
cult policy issues, where certain scenarios call for per-user
settings, and yet those settings have machine-wide impact.
One user’s power option, such as time to turn off hard disks,
may interfere with applications running for other logged in
users. At the same time, in a shared laptop scenario one
could reasonably want the power options to change depend-
ing on the person using the machine (e.g., the long-trip user
versus the short-trip user). We speculate that it might be
possible to better handle this issue by adding a privileged
4.2.3 Windows Clock/Calendar
Double clicking the numeric clock on the right-bottom cor-
ner of the Windows desktop presents a pictorial clock and a
calendar. Users ﬁnd this a handy tool to use when they want
to answer questions like “what is the date of the last Mon-
day of May?” Unfortunately, attempting to launch the clock
without Admin privileges leads to an “insufﬁcient privilege
to chanhe system time” error message. Even if one wanted
to launch this application from a script granting it Admin
privileges, this might be difﬁcult because the command line
is not readily available. Tracing this action led to 3 logged
checks (shown in Table 5) out of 455 total.
We validated that the SystemTime privilege check is
the cause of the least-privilege incompatibility. From dis-
cussing this case with internal Microsoft developers, we
surmised that the original clock was not designed to be used
in a read-only manner, but that this privilege check would
provide a good place to branch, displaying a read-only UI
if the privilege was missing. This least-privilege incompat-
ibility does not appear to ﬁt our model for mitigation by a
system administrator.
Security Function
Access-Check
Access-Check
Process
explorer.exe
rundll32.exe
Adjust-Privilege
rundll32.exe
Object Name or Security Action
\WINDOWS\system32\rundll32.exe
\BaseNamedObjects\shell.{A48F1A32-A340-11D1-BC6B-
00A0C90312E1}
Enable SystemTime privilege
Table 5. Log Entries for Windows Clock/Calendar
Figure 3. Error Message When Starting Diablo II
Game without Admin privileges
4.3 Programmatic Enforcement of Unnecessary
Privilege Requirements
The two applications in this section programmatically en-
force that the user possess Admin privileges, but they ap-
pear to function perfectly well if this check is bypassed. We
discuss the reasons for these requirements in more detail in
the context of each application.
4.3.1 Diablo II Game
Diablo II is an action game that ships on three CDs: an
install disc, a cinematics disc, and a play disc that must be
in the drive for the game to work. When a user without
Admin privileges attempts to play the game, a misleading
error message (Figure 3) pops up claiming the CD drive
is empty. Tracing this action generated 3 log entries out
of 1573 total checks, 440 of which fail for a user without
Admin privileges. The 3 log entries are shown in Table 6.
Because the error message mentions the CD-ROM drive,
we hypothesized that the third log entry was responsible for
the least-privilege incompatibility. We veriﬁed that passing
this check alone allows the game to be played without Ad-
min privileges.
This example illustrates how least-privilege incompatibil-
ities can be presented to the user with a misleading error
message. We have not received any response from the Di-
ablo II developers, but the misleading error message leads
us to believe that the failure mode was not anticipated by
the developers. We speculate that this may be a simple pro-
gramming oversight where the program attempts to acquire
certain unnecessary CD-ROM accesses, and that it could
easily be ﬁxed. This least-privilege incompatibility also
could easily be mitigated by a system administrator using
our validation technique.
4.3.2 TurboTax 2003
TurboTax is tax calculation software released by Intuit.
Running TurboTax without Admin privileges generates an
error message stating that Admin privileges are necessary
to use the application. Tracing the application startup gen-
erated 11 log entries out of 12503 total security checks.
The 11 logged entries break down to one entry for SID-
Compare, three for Access-Check on semaphores, four for
Access-Check on HKLM registry keys, and three others.
Surprisingly, using our validation technique we discovered
that just causing the SID-Compare call to succeed is sufﬁ-
cient to allow using the application extensively without Ad-
min privileges; we succeeded in running TurboTax, com-
pleting a 1040A tax form and printing it to a PDF ﬁle. We
have not yet received a response from the developers of Tur-
boTax, but we have two different reasons that we believe
might have caused the TurboTax developers to insert this
check. First, a publicly available transcript of a discussion
with an Intuit customer service representative suggests that
requiring Admin privileges was a quick ﬁx solution to data
privacy concerns [31]. Because Admin privileges convey
complete control of the system, leaking information about
other users through the application does not represent an
increased exposure of private data if the user viewing the