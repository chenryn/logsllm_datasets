x. The per-transaction type survival probabilities are obtained
analyzing the fingerprint survival rate in transparent transactions
that have the same number of inputs/outputs as the considered
shielded and revealing ones;
• P(x) for any path x ∈ ZPaths(n + 1): the probability that x
occurs, i.e. the product of probabilities to have each transaction-
type occurring in x. The distribution of the different types of
transactions in the three categories t-to-z, z-to-z and t-to-z is
directly obtained from the blockchain.
More details on the underlying assumptions and how all these
values can be estimated are reported in Appendix A.
Within this model we estimated that the average number of hops
a path goes through inside the shielded pool is only Zlen = 1.42
and the survival probability of good fingerprints is P(F P) ≈ 16.6%.
5 DANAAN-GIFT ATTACK (MALICIOUS
VALUE FINGERPRINTING)
Fingerprints (Section 3.3) can be used as a tool for linking the hidden
and revealed values of shielded transactions. In this section we show
that in some scenarios they can be exploited for transaction tagging
by an active attacker.
Suppose the attacker is trying to identify the spending of a public
address, which converts all its ZECs to hidden addresses regularly.
The attacker can transfer a very small but carefully chosen amount
of Zatoshis to this specific address, hoping that it leaves the trail
of a fingerprint when they are converted from a hidden to a public
address. As the attacker sees the current public value on the address,
he sends a chosen value such that the resulting sum has a detectable
and possibly long-living (Section 3.3.1) fingerprint. Of course differ-
ent fingerprints could be used for different addresses. Afterwards
the attacker only has to monitor the revealing transactions for his
set of fingerprints. He may also enhance it using the subset sum
approach and reason in terms of anonymity sets rather than unique
matches.
Such attack can be performed against entities which accept pub-
lic donations (e.g. WikiLeaks) since for them receiving money from
an unknown source would look less suspicious. Moreover the at-
tacker may monitor the address and resend the fingerprint in case
another donation erases his old tag.
Our statistical model can be applied to provide a chance for
success against an average user. As we show in Sections 4, A.2
the probability for a fingerprint to survive if it is revealed in some
way is around 16%. This means that the attack succeeds with a 16%
chance if the target behaves as an average user. Compared to the
low cost5 of the attack, we consider it as a real danger for Zcash
users. As a countermeasure one should avoid de-shielding unique
or rare values and should zero the digits below the transaction fee
threshold. In the long run depreciation of the public t-address pool
should solve the problem.
6 DUST ATTACK
Sapling shielded transactions reveal their in/out degree, i.e. the
exact number of spent and output notes. The output notes would be
the unspent transaction outputs (UTXOs) in Bitcoin terminology.
This also means that if a user converts all of his/her shielded funds
to a public address from a previous output note, it will show in the
transaction that there are no new output notes, i.e. all the value
from the spent notes are public. Shielded transactions that spend
more than 10 outputs are very rare (35 out of 22,249 in the three
months of the study period).
Using this information, we discovered an attack that would be
able to track one extra hop of shielded spending. If that spending
does not have public outputs, we can only verify when did the
object of the attack use its funds. The attack is the following.
First, the attacker learns the shielded address of the target user
either by buying services from a user who has a shielded address
or donating to an entity who accepts shielded Zcash. Then the
attacker transfers funds in many small valued output notes. This
can be done in two ways. The first way is by issuing many separate
transactions to a target address either from separate addresses, or
from the same address by slicing small values one after another. The
second way is by transferring the funds in a single transaction with
lots of spend notes. This is not supported directly by the official
wallet (it returns an error as it does not allow the same address to
appear more than once as an output even in a shielded transaction).
However a custom wallet where this check is removed can easily
do so. We have tested it on the Zcash testnet and the transaction
was accepted.
Later, if the target user wants to spend its shielded coins, it has to
create a shielded transaction where the number of spend notes will
4It is important to think of transactions as hops, since it is inside the transaction that
a fingerprint may be spoiled.
5Considering that 10,000 Zatoshis are worth 0.7 US Cents, if the exchange rate is 70
USD.
Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom1818be unusually high which can be monitored on the chain. At present,
in the official wallets the user can not choose which outputs it wants
to spend when creating a transaction. The wallet, instead, orders
all available unspent shielded outputs connected to the address in a
decreasing manner and picks them one-by-one until it has enough
value to cover the desired total output value.
This means that even if the user notices this unusual behaviour
in his/her wallet, there is currently no way to avoid these dust-
spending outputs. As a countermeasure, the user should always
do an extra hop inside the shielded pool if his z-address received
transactions from external sources. This would consolidate all the
outputs into a single spend note, removing the dust-tag. Such trans-
action itself would be noticed by the attacker, but no further track-
ing is possible if there were no public outputs in that transaction.
This countermeasure does not require any customization from the
wallet as it is a simple shielded transfer, but it is dependent on
whether the user notices the attack. We have executed the attack
on our own addresses on the Zcash testnet6.
Heuristic 4. An attacker tags a target address with more than
n > 10 dust outputs. If later he observes that the input-degree of a
shielded transaction is at least n, then he links the transaction to
the target address.
Let us now investigate how the attack is presented (based on
our experiment) to the target in the different Sapling-supporting
wallets.
6.1 Official Linux Command-line Zcash Wallet
As the official Linux RPC wallet is command line based, the user will
only notice this behaviour by specifically checking for it. There are
separate commands for getting the total balance for all addresses
or a specific one and, similarly, a command for listing the received
outputs per address (which includes the already spent ones as well)
and another one to get all currently controlled unspent outputs
under all addresses. Thus, it depends on the users whether they
check the correct attributes of their wallet and if they will notice the
strange dust values. If a user checks for the received transactions,
all outputs will show as separate transactions, even though having
the same ID.
On the other hand, by listing the received transactions or unspent
outputs, one can see the IDs of the transactions and, if the attacker
sent all the outputs in the same transaction, this might alert the
user.
6.2 GUI-based Sapling-supporting Wallets
All the currently existing GUI wallets show the recent transactions
on the home page of the wallet. This means that all the dust outputs
are shown as separate transactions, even when they were sent in
the same shielded transaction. On the other hand, these programs
only show the time of the transactions. The user does not see
the transaction details (not even the id) in the software, instead it
has to copy the transaction to receive the id or go through a link
to an online explorer to discover that they are exactly the same
transaction. On the other hand from the time of the transactions it
6txid: 48b364e082f90ae5860ad52a876eae37c84ed0cbb7cf4279dea2fd2a243bacb5
is visible that all of them were made at the same time, which could
also be an indicator of malicious behaviour.
6.3 Combining Danaan and Dust Attacks
An attacker might combine these two attacks, where some of the
dust values also contain a fingerprint, and their sums are finger-
printed as well. This way, even if the dust attack follows only one
hop of shielded values, the fingerprint later might still reveal the
values when and if the coins are revealed.
7 SUBLIMINAL CHANNELS
The Zcash Sapling protocol introduced many new features. Among
these, it implements the "Decoupled Spend Authority" that, quoting
from the official pre-release note7, enables "enterprises [to] perform
an inexpensive signature step in a trusted environment while allowing
another computer, not trusted with the spending key, to construct
the proof. Additionally, hardware wallets can support shielded ad-
dresses by allowing the connected computer to construct the proof
without exposing the spending key to that machine". To motivate why
this could be a security and privacy issue, consider the following
two scenarios. In the first one the zk-SNARK proof generation is
delegated to a computation server (or hardware) that is able to
surreptitiously embed extra tagging information in the generated
proofs. Whenever it happens, we have a subliminal channel, that
we will refer to as Inner Subliminal Channel. In the second scenario,
lightweight closed source wallets are able to embed subliminal in-
formation into already generated valid zk-SNARK proofs exploiting
their malleability. We will refer to such channels as Outer Subliminal
Channel.
In the Zcash Sapling protocol we found subliminal channels that
exist in both the zk-SNARK proof generation mechanism and the
adopted commitment scheme. More precisely, we found an Inner
Subliminal Channel and an Outer Subliminal Channel, described
in the following Sections, which are related to the currently im-
plemented zk-SNARK scheme. We further found another channel,
that we called Pedersen Subliminal Channel, which refers to the
Pedersen Commitment scheme used.
For each type of subliminal channels found, the techniques to
embed a subliminal message are similar: for this reason we chose
to describe in detail the embedding of a subliminal message and its
retrieval only for the subliminal channels found during and after
the zk-SNARK proof generation.
After describing the computational complexity of the proposed
embedding procedures, a concrete attack scenario is discussed and
some countermeasures are proposed to prevent the use of such
subliminal channels. A brief discussion on the effectiveness and
efficiency of these channels to tag real Zcash transactions then
follows.
To clarify the context in which the subliminal channels found
in this paper work and how they can be exploited to exchange
subliminal messages, we’ll briefly describe how transactions are
created and stored on the Zcash blockchain.
The input of a Zcash Sapling transaction consists of a sequence of
Spend Descriptions and Transparent Inputs, while its output consists
of a sequence of Output Descriptions and Transparent Outputs. It
7https://z.cash/blog/whats-new-in-sapling/
Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom1819Spend Description
Output Description
Committed Input Note Value
Committed Output Note Value
Spend DATA
zk-SNARK Proof
Output DATA
zk-SNARK Proof
Transparent Input
Transparent Output
Binding Signature
Fee
Figure 3: Sapling Transaction Layout
is up to the user to create fully shielded transactions consisting
of only Spend and Output Descriptions, fully transparent ones or
transactions that result a combination of them (see again Figure 1).
An example of a Sapling transaction is shown in Figure 3, where
one Spend Description, one Transparent Input, one Output De-
scription and one Transparent Output are included. This simplified
layout will guide our description through the main elements of a
transaction. While a Spend Description refers to a previous trans-
action note, which is spendable only if the corresponding spending
key is known, an Output Description corresponds to a new one.
Each note contains a note value which accounts for the total
amount of ZEC involved: while in Transparent Input/Outputs the
note value is publicly readable, in the case of Spend and Output
Descriptions, it is hidden in a form of a Pedersen Commitment [19].
Note value commitments are included, along with some other DATA,
in the respective descriptions they refer to and allow - thanks to a
Binding Signature - to publicly verify the total transaction balancing
value.
Each description is finalized by appending a zk-SNARK proof
that assures value commitment integrity, spend authority (as in
the case for Spend Descriptions), double-spending prevention and
other protocol coherence requisites.
8 THE ZK-SNARK SUBLIMINAL CHANNELS
We now show how Provers compliant with the Sapling zk-SNARK
proof generation protocol can exchange extra b-bits of information
with protocol-compliant Verifiers. Since these bits are exchanged by
using parameters employed during the proof generation that were
not intentionally designed for communications, we will refer to
these communication channels as subliminal channels [26, 27, 30]
and to the exchanged messages as subliminal messages.
We will describe in details two separate constructions: the Inner
Subliminal Channel and the Outer Subliminal Channel. In the Inner
one, the message is embedded in the zk-SNARK proof during its
generation, while with the Outer Subliminal Channel a subliminal
message is embedded in an already generated valid proof before it
is signed.
When these subliminal channels are used, the resulting proofs
will be valid and indistinguishable from any other valid proof for the
same statements if some auxiliary information remains unknown
to the Verifier.
8.1 Groth’s NIZK argument
In order to set out the definitions and notations employed in the
construction of the proposed subliminal channels, we briefly re-
call Groth’s NIZK argument [8] for arithmetic circuit satisfiability
currently adopted by Zcash Sapling. The setting is as follows:
• Consider a relation generator R that returns relations of the form
R = (p, G1, G2, GT , e, д, h, l, {ui(X), vi(X), wi(X)}m
where (p, G1, G2, GT , e) is a bilinear group of order p and д, h are
generators, respectively, of G1 and G2.
The relation defines a language of statements (a1, ..., al) ∈ Zl
and witnesses (al +1, ..., am) ∈ Zm−1
such that with a0 = 1
i =0, t(X))
p
m
i =0
aiui(X) · m
i =0
p
m
i =0
aivi(X) =
aiwi(X) + h(X)t(X)
for some degree n − 2 polynomial h(x).
A Prover that generates a proof π for statement (a1, ..., al) should
be able to convince any Verifier that he knows the corresponding
witness (al +1, ..., am) without revealing any information related to
the witness.
In Groth’s scheme, both proof generation and verification are
done in the Common Reference String model. The Setup, Prover
and Verifier procedures are as follows:
• σ = (σ1, σ2) ← Setup(R):
• Pick α, β, γ , δ ← Z∗
p and compute
(cid:110)
σ1 =(cid:169)(cid:173)(cid:173)(cid:171) дα , дβ , дδ ,(cid:8)дx i(cid:9)n−1
(cid:110)
(cid:111)l
(cid:16)
hβ , hγ , hδ ,(cid:8)hx i(cid:9)n−1
д
βui (x)+α vi (x)+wi (x)
i =0 ,
σ2 =
д
δ
γ
i =0
i =0
(cid:17)
xi t(x)
(cid:111)n−2
i =0
,
(cid:170)(cid:174)(cid:174)(cid:172)
• π ← Prover(R, σ ,(a1, ..., am)):
σ = (σ1, σ2) is referred to as Common Reference String.
• Pick r , s ← Zp and compute π = (A, B, C) where
A = дα +m
ˆB = дβ +m
ˆC = д