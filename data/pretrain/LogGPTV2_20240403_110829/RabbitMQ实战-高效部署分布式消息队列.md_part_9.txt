38
第2章理解消息通信
生产者
信道1
信道2
下一条消息ID
信道1：3
信道2：2
Q1
RabbitMQ
节点
消费者
图2.8发布者确认消息ID
之前我们说过，当信道设置成confirm模式时，发布的每一条消息都会获得唯
一的ID。这可能会让你猜测basic_publish会返回消息ID，不过事实上消息ID
不是这样工作的。由于一条信道只能被单个线程使用，因而可以确保信道上发布的
消息都是连续的。因此，RabbitMQ做了个简单的假设：任一信道上发布的第一条
消息将获得ID1，并且信道上接下来的每一条消息的ID都将步进1。也就是说，信
道上发布的第二条消息将会拥有ID2，第三条消息将会拥有ID3，等等。对信道来说，
消息ID是唯一的。所以一旦信道关闭后，你将无法追踪发布在该信道上任何未完
成的发送方确认消息状态。这意味着RabbitMQ不必告诉你刚发布的消息的ID；你
在应用程序内部通过一个计数器自己来跟踪。每次应用程序信道发布消息时，你需
要把计数器加1。同时，由于每条信道的消息ID 都是从1计数的，因此如果你同时
拥有众多运行的信道的话，就需要为每条信道分别维护一个内部消息ID计数器。
---
## Page 61
2.7使用发送方确认模式来确认投递
39
清单2.3带有确认功能的HelloWorld生产者
import pika, sys
from pika import spec
conn_params =pika.ConnectionParameters("localhost",
credentials = credentials)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()
1发送方确认
def confirm_handler(frame):
<模式处理器
if type(frame.method) == spec.Confirm.Selectok:
print "Channel in'confirm'mode."
elif type(frame.method) == spec.Basic.Nack:
if frame.method.delivery_tag in msg_ids:
print "Message lost!"
elif type(frame.method) == spec.Basic.Ack:
if frame.method.delivery_tag in msg_ids:
print"Confirm received!"
msg_ids.remove(frame.method.delivery_tag)
2将信道设置为
<confirm模式
channel.confirm_delivery(callback=confirm_handler)
msg = sys.argv[1]
msg_props = pika.BasicProperties()
msg_props.content_type = "text/plain"
③重设消息
msg_ids = []
<ID追踪器
channel.basic_publish(body=msg,
exchange="hello-exchange",
4发布信息
properties=msg_props,
routing_key="hola")
将ID添加到
msg_ids.append(len(msg_ids) + 1)
<追踪列表中
channel.close()
这段代码和最初的HelloWorld生产者很像，不过现在你增加了一个回调函数1
confirm_handler。该函数会在应用程序接收到发送方确认消息时调用。之后你
告诉Pika将信道设置成confirm模式②，并用confirm_handler作为回调函数接
收到达的发送方确认消息。一旦信道设置成处理发送方确认消息之后，你需要设置
内部列表（msgids）来追踪信道上的消息ID③，并发布消息4。最后，消息发布
一完成，你就要将代表消息ID的msg_id_no增加1。有关confirm的有趣魔法
都包含在confirm_handler里了。
当confirm_handler接收到一条发送方确认消息时，它首先检查确认类型是
否是Confirm.SelectOk：
if type(frame.method) == spec.Confirm.Selectok:
print "Channel in 'confirm' mode."
---
## Page 62
40
第2章理解消息通信
当第一次将信道设置为confirm模式时，RabbitMQ会发送一条Confirm，
SelectOk类型的确认消息。这并不是对消息的确认，而是通知你信道已经准备
就绪来接收发送方确认消息了。如果确认消息不是Confirm.SelectOk，那么
confirm_handler检查是否为Basic.Nack确认消息：
elif type(frame.method) == spec.Basic.Nack:
if frame.method.delivery_tag in msg_ids:
print "Message lost!"
你也许记得我们解释发送方确认模式时说过，Basic.Nack指明了消息由于
RabbitMQ内部错误而丢失了。但在你将消息处理为丢失之前，先检查一下frame.
method.deliverY_tag以确保消息确实是丢失了。如果消息ID和发布的ID一致，
那么你得告诉用户这条消息丢失了。在更复杂的应用中，这里还是放置重发丢失消
息代码的地方。最终，如果确认消息既不是Confirm.SelectOk，也不是Basic.
Nack，那么需要检查它是否是Basic.Ack。
elif type(frame.method) == spec.Basic.Ack:
假设该消息为发送方确认模式的确认消息（Basic.Ack），则你需要确保消息
ID在已发布的消息ID列表中：
if frame.method.delivery_tag in msg_ids:
print "Confirm received!"
msg_ids.remove (frame.method.delivery_tag)
如果这个确认消息的消息ID是所追踪的msg_ids中的一个，那么你向用户确
认该消息已经成功到人队，然后将这条消息的ID从等待投递确认的ID列表中删除。
息发布增加了追踪投递的能力。更令人印象深刻的是，这段简单的代码可以追踪每
分钟数以百万计的消息投递。这显示了发送方确认模式比AMQP事务的表现要好得
多。
2.8总结
本章我们讲解了很多内容。你不仅拥有了消息通信基础来构建任何你能想象得
到的应用程序，同时也拥有了真实存在的生产者和消费者，特别是生产者还能追踪
消息投递！在接下来的几章，我们会讲述构建消息通信应用程序的具体模式，它能
---
## Page 63
2.8总结
41
让你的应用程序优雅、高效和强大。但就目前你已经学到的知识，你可以立即为那
个令你生不如死的分布式Twitter克隆开始编码了。在深入编码细节之前，让我们先
来看看如何更专业地管理RabbitMQ服务器。举例来说，让任何人都能连接到你的
虚拟主机上，然后发布消息给任一交换器，这可不是什么好主意。这就是下一步我
们将要向你展示的，如何通过设置权限控制去避免这种类型的问题。因此，让我们
看看如何启动、停止，以及管理RabbitMQ吧！
---
## Page 64
运行和管理Rabbit
本章要点
■服务器管理——启动和停止节点
■权限配置
■使用统计
RabbitMQ和Erlang问题疑难解答
我们花了大把的时间在AMQP消息通信概念以及如何运行基本安装的RabbitMQ
上。现在我们准备对RabbitMQ日常基础管理一探究竟。了解如何让RabbitMQ在
工作站上运行起来是一回事儿，但你知道如何干净利落地停止它吗？你知道如何限
制RabbitMQ的内存消耗以致不会让同一台服务器上的其他应用程序“饿死”吗？
当RabbitMQ从开发环境转入生产环境时，你就会面对这些问题。在本章中我们会
向你展示如何运行管理一流的RabbitMQ产品环境，以免你陷入困境。
其中我们会涉及不同的东西：
·Erlang如何运作的一些背景，包括那些神秘的Erlangcookie
■通过RabbitMQ的权限系统来控制用户访问
---
## Page 65
3.1服务器管理
43
■使用命令行工具查看虚拟机、队列、交换器和绑定的状态
■当遇到可怕的Erlang错误消息，例如"badrpc,nodedown"时，该怎么办
■如何解读各种RabbitMQ日志文件
在我们结束的那一刻，你将成为一流的RabbitMQ管理员，并准备去解决
Rabbit生产环境问题。让我们从基础知识开始，一步步深入学习如何管理RabbitMQ
服务器。
3.1服务器管理
你以前在其他产品上的使用经验可能无法作用于如何高效地运行RabbitMQ服
务器之上。主要原因在于RabbitMQ是用Erlang编写的，而Erlang有自己的一套方
式。大多数情况下，这是件好事。Erlang天生就能让应用程序无须知道对方是否在
同一台机器上即可相互通信。对RabbitMQ来说，这让集群和可靠的消息路由变得
简单。但是为了达到“简单分布式”，需要两个你可能不太熟悉的概念：Erlang节点
和Erlang应用程序。不用担心；这些概念并没有听起来这么难以理解。如果你熟悉
Java虚拟机（JVM）的话，两者是很相似的。本节会教你如何启动和停止RabbitMQ
节点以及如何使用RabbitMQ配置文件。事不宜迟，我们先来看看什么是节点以及
如何启动它。
3.1.1启动节点
到自前为止，我们经常使用术语节点来指代RabbitMQ服务器实例。事实上，
节点描述的是一个Erlang节点运行看一个Erlang应用程序。提到Erlang.的时候别
紧张一你不用成为一个Erlang爱好者并明白它的工作原理。这和JVM的原理是
非常相似的。
当你运行Java程序时，JVM的一个实例就启动了，并且开始执行指定的Java
程序。与之相似，Erlang也有虚拟机，而虚拟机的每个实例我们称之为节点（node）。
这里的节点非常特殊。不同于JVM，多个Erlang应用程序可以运行在同一个节点之
上。更重要的是，节点之间可以进行本地通信（不管它们是否真的在同一台服务器
以调用 artichoke 节点上的应用程序方法，就好像这些函数是本地方法一样。同
---
## Page 66
44
第3章运行和管理Rabbit
时，如果应用程序由于某些原因（例如RabbitMQ崩溃了）崩溃了，Erlang节点会
自动尝试重启应用程序（前提是Erlang本身没有崩溃）。当我们开始讨论插件和集
群的时候，事情就会变得有趣起来。现在重要的是记住当我们谈到RabbitMQ节点时，
我们指的是RabbitMQ应用程序和其所在的Erlang节点（见图3.1）。
其中一个应用崩溃了，但
是节点仍然处于运行状态。
Rabbit
Rabbit
RabbitMQ
Mnesia
admin
Rat
MQ
Mnesia
admin
插件
插件
app1
app2
e.dde
app1
app2
app3
Erlang节点
集群通信
Erlang节点
图3.1理解Erlang节点和应用
值得庆幸的是，RabbitMQ使得启动Erlang节点和Rabbit应用程序很简单，只需
一个步骤即可。在你的RabbitMQ安装目录下找到./sbin目录，运行·/rabbitmq-
server'。当查看控制台时，你会发现不同的RabbitMQ子系统运行起来了，并准
备好处理消息。如果在启动过程中遇到了任何错误，那么就检查一下RabbitMQ
日志。通常情况下，可以在/var/log/rabbitmq/目录下找到名为rabbit@
[hostname].log的日志文件（文件名中的“rabbit”部分是运行RabbitMQ的默认
Erlang节点名称）。你也可以通过增加-detached参数的方式启动Rabbit节点，以
守护程序的方式在后台运行：./rabbitmq-server-detached。这就是启动单
1如果你是通过特定于操作系统的包来安装RabbitMQ的话（譬如，RPM），我们建议你使用包安装的
start/stopinit.d脚本。
---
## Page 67
3.1服务器管理
45
一RabbitMQ节点的所有内容了。现在节点已经启动了，我们怎么停止它呢？
3.1.2停止节点
当谈及停止RabbitMQ时，有两种方式：干净的方式和航脏的方式。当运行
RabbitMQ连接到控制台时，在你按下CTRL-C组合键时看到以下内容，也许会感
到迷惑：
BREAK:(a)bort (c)ontinue (p)roc info (i)nfo (l)oaded
(v)ersion (k)ill (D)b-tables (d)istribution
我的天哪，这都是些什么？你想要的只是停止RabbitMQ而已。你在控制台上
看到的是Erlang节点正询问你是想要关闭应用程序还是整个节点；或者这只是一个
失误，因为你想要继续运行。通常来讲，你想要关闭整个节点，所以abort就是你
要找的答案。但是有更好的方法来停止RabbitMQ一这个方法会通知RabbitMQ干
净地关闭，并保护好那些持久化队列。
rabbitmqctl是几乎所有RabbitMQ管理需要的一站式解决方案。你已经见过
了如何使用它来创建vhost和列出所有vhost。它也能帮助你停止RabbitMQ。当在
RabbitMQ安装目录下运行./sbin/rabbitmqctlstop时，rabbitmqctl会和
本地节点通信并指示其干净地关闭。你也可以指定关闭不同的节点，包括远程节点。
只需传人-nrabbit@[hostname]选项即可。在RabbitMQ日志中会看到以下内容：
=INFOREPORT====
application: rabbit
exited: stopped
type: permanent
=INFOREPORT====
application: mnesia
exited:stopped
type: permanent
=INFO REPORT====
application:os_mon
exited: stopped
type: permanent
当看到rabbit、mnesia和os_mon停止了，Rabbit节点也就完全关闭了。如
果你是通过包管理系统例如Ubuntu上的APT进行RabbitMQ安装的话，你同样可
以通过安装在/etc/init.d/下的RabbitMQstartup/shutdown脚本来进行操作。可