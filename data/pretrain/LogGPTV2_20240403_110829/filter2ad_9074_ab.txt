其中，`HandlerData` 指针正好指向 `language-specific handler data` （这里同样参考微软文档[Language-specific handler](https://docs.microsoft.com/en-us/cpp/build/exception-handling-x64?view=msvc-170#language-specific-handler)）。
在 `llvm-project` （LLVM 与 GNUC 实现的是同一套 Runtime）中，`__gxx_personality_seh0` 的实现在
[libcxxabi\src\cxa_personality.cpp](https://github.com/llvm/llvm-project/blob/4cd6ca102a94e1b64ba3f940cc26b4d7b2b82964/libcxxabi/src/cxa_personality.cpp#L951)
文件里。如下：
    extern "C" _LIBCXXABI_FUNC_VIS EXCEPTION_DISPOSITION
    __gxx_personality_seh0(PEXCEPTION_RECORD ms_exc, void *this_frame,
                           PCONTEXT ms_orig_context, PDISPATCHER_CONTEXT ms_disp)
    {
      return _GCC_specific_handler(ms_exc, this_frame, ms_orig_context, ms_disp,
                                   __gxx_personality_imp);
    }
其中，_GCC_specific_handler 的实现在 [libunwind\src\Unwind-seh.cpp
](https://github.com/llvm/llvm-project/blob/fc5e68fab965bdc8fdf6db9ae2603f9dd02dec5b/libunwind/src/Unwind-seh.cpp#L59) 中。它对 `__gxx_personality_imp` 做了一层封装，处理一些外部逻辑。接着进入
[libcxxabi\src\cxa_personality.cpp:__gxx_personality_imp](https://github.com/llvm/llvm-project/blob/4cd6ca102a94e1b64ba3f940cc26b4d7b2b82964/libcxxabi/src/cxa_personality.cpp#L881)，它又是对
[libcxxabi\src\cxa_personality.cpp:scan_eh_tab](https://github.com/llvm/llvm-project/blob/4cd6ca102a94e1b64ba3f940cc26b4d7b2b82964/libcxxabi/src/cxa_personality.cpp#L563)
函数的一层封装。
`scan_eh_tab` 负责真正解析异常处理数据结构，是关键函数（下文给出一个解析`lsda`的例子，建议打开上面的链接对着源代码看）。在 605
行，`scan_eh_tab` 首先通过 [`_Unwind_GetLanguageSpecificData`
](https://github.com/llvm/llvm-project/blob/fc5e68fab965bdc8fdf6db9ae2603f9dd02dec5b/libunwind/src/Unwind-seh.cpp#L417)取出了指向 `Language-specific handler data` 的指针，并赋值给`lsda`变量，本例中 `lsda
= (uint8_t*)0x4070CC`。
首先，执行 `uint8_t lpStartEncoding = *lsda++;` 与 `const uint8_t* lpStart = (const
uint8_t*)readEncodedPointer(&lsda, lpStartEncoding);` 获取 `lpStartEncoding` 和
`lpStart`，前者的值为 0xFF，对应 `DW_EH_PE_omit`。故而`readEncodedPointer` （实现如下）直接返回 0。
    static
    uintptr_t
    readEncodedPointer(const uint8_t** data, uint8_t encoding)
    {
        uintptr_t result = 0;
        if (encoding == DW_EH_PE_omit)
            return result;
        const uint8_t* p = *data;
        // first get value
        switch (encoding & 0x0F)
        {
        case DW_EH_PE_absptr:
            result = readPointerHelper(p);
            break;
        case DW_EH_PE_uleb128:
            result = readULEB128(&p);
            break;
        case DW_EH_PE_sleb128:
            result = static_cast(readSLEB128(&p));
            break;
        case DW_EH_PE_udata2:
            result = readPointerHelper(p);
            break;
        case DW_EH_PE_udata4:
            result = readPointerHelper(p);
            break;
        case DW_EH_PE_udata8:
            result = readPointerHelper(p);
            break;
        case DW_EH_PE_sdata2:
            result = readPointerHelper(p);
            break;
        case DW_EH_PE_sdata4:
            result = readPointerHelper(p);
            break;
        case DW_EH_PE_sdata8:
            result = readPointerHelper(p);
            break;
        default:
            // not supported
            abort();
            break;
        }
        // then add relative offset
        switch (encoding & 0x70)
        {
        case DW_EH_PE_absptr:
            // do nothing
            break;
        case DW_EH_PE_pcrel:
            if (result)
                result += (uintptr_t)(*data);
            break;
        case DW_EH_PE_textrel:
        case DW_EH_PE_datarel:
        case DW_EH_PE_funcrel:
        case DW_EH_PE_aligned:
        default:
            // not supported
            abort();
            break;
        }
        // then apply indirection
        if (result && (encoding & DW_EH_PE_indirect))
            result = *((uintptr_t*)result);
        *data = p;
        return result;
    }
紧接着读取 `ttypeEncoding`： `uint8_t ttypeEncoding = *lsda++;` 与
`classInfoOffset`，其中 `readULEB128` 定义如下：
    static
    uintptr_t
    readULEB128(const uint8_t** data)
    {
        uintptr_t result = 0;
        uintptr_t shift = 0;
        unsigned char byte;
        const uint8_t *p = *data;
        do
        {
            byte = *p++;
            result |= static_cast(byte & 0x7F)  0x40710D -> 0x40710B -> 0x407109。每个大于 0 的
ttypeIndex 则通过 classInfo 表对应到一个类的 typeinfo 对象。
在最简单的情况下，判断当前 `try` 块对应的 `catch`块群 是否有能力处理某个特定类型的异常时，程序会遍历 actionEntry 链表，对每个
ttypeIndex ，找到对应的 typeinfo 类（记为 `catchType`），并判断 `catchType`能否捕捉到抛出的异常，即
`catchType->can_catch(excpType, adjustedPtr)`，若能，则保存 ttypeIndex 到 results
结构体，并设置 `results.reason = _URC_HANDLER_FOUND` 指示找到了异常处理函数。
    static
    intptr_t
    readSLEB128(const uint8_t** data)
    {
        uintptr_t result = 0;
        uintptr_t shift = 0;
        unsigned char byte;
        const uint8_t *p = *data;
        do
        {
            byte = *p++;
            result |= static_cast(byte & 0x7F) (~0) (result);
    }
通过 ttypeIndex 查到对应 typeinfo 的逻辑在 `get_shim_type_info` 函数中。 在本例中， ttypeIndex
简单对应 `classInfo` 表的下标，表中的每项编码方式为 `ttypeEncoding = 0x9B` 。`classInfo`
是倒序存储的，表的第一项在最高地址处，第二项在第一项 -4 的地址处，以此类推。表格解析如下：
例如，ttypeIndex = 4 对应表格第四项，即 0x407114 地址处的四字节编码地址。解码后地址值为 0x404028，存储着
`std::Exception` 的`typeInfo`地址。
至此，我们已经可以通过解析 LSDA 获得每个函数的每个 `try` 块区域的
地址、对应catch块群地址、catch块群能解析的异常类型、以及每个`catch`块能处理的异常类型对应的 ttypeIndex。
最后，通过逆向与调试可以知道，在从`throw`返回到 `catch` 块群起始地址时， Runtime 至少要准备好 rax、rdx
两个寄存器的值，分别设置为：被抛出的异常对象的`unwind_exception`成员的内存地址、捕获异常的`catch`块的编号（即上文中所说的类编号）。而
这个类编号，其实就是对应的 ttypeIndex 的值（见下文解释）。
在 `__gxx_personality_imp` 函数中，如果 `scan_eh_tab` 的返回值指示返回原因为
`_URC_HANDLER_FOUND`，且当前在第二阶段，则设置`context`对象中 _函数返回值寄存器组_ 中 编号为0的寄存器（x86 架构下是
rax）的值为`unwind_exception`异常对象地址；编号为1的寄存器（x86架构下为 rdx）的值为 ttypeIndex 值。
    static _Unwind_Reason_Code 
    __gxx_personality_imp{
        ......
        // In other cases we need to scan LSDA.
        scan_eh_tab(results, actions, native_exception, unwind_exception, context);
        if (results.reason == _URC_CONTINUE_UNWIND ||
            results.reason == _URC_FATAL_PHASE1_ERROR)
            return results.reason;
        if (actions & _UA_SEARCH_PHASE)
        {
            ......
        }
        assert(actions & _UA_CLEANUP_PHASE);
        assert(results.reason == _URC_HANDLER_FOUND);
        set_registers(unwind_exception, context, results);
        return _URC_INSTALL_CONTEXT;
    }
    static
    void
    set_registers(_Unwind_Exception* unwind_exception, _Unwind_Context* context,
                  const scan_results& results)
    {
    #if defined(__USING_SJLJ_EXCEPTIONS__)
    #define __builtin_eh_return_data_regno(regno) regno
    #endif
      _Unwind_SetGR(context, __builtin_eh_return_data_regno(0),
                    reinterpret_cast(unwind_exception));
      _Unwind_SetGR(context, __builtin_eh_return_data_regno(1),
                    static_cast(results.ttypeIndex));
      _Unwind_SetIP(context, results.landingPad);
    }
这里 `context` 对象中的虚拟寄存器值会在 `cxa_throw` 最终返回到 `catch` 块等用户代码时恢复到机器寄存器上。