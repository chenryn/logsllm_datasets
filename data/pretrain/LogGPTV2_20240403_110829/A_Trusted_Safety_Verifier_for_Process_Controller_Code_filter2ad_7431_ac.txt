their predicates. Figure 4 shows a more illustrative example
2Note that sub-indices and super-indices represent different variables and
scan cycle numbers, respectively.
6
PLC$IL$(pseudo-code):$
if#(10#12)#
10<input<=12#
12<input#
input<=6#
6<input<=10#
a=0$
a=1$
a=0$
a=1$
#
n
o
<
c
a
r
t
s
b
A
Reﬁned$TEG$Graph$
10<input#
input<=12#
Input<=6#
output!input/2+6;##
a=0$
output!input/2+6;##
a=1$
output!input+6;##
a=0$
output!input+6;#
#a=1$
Fig. 4. Example TEG generation for checking of an LTL property.
where the original IL code assigns the output variable value
depending on the input variable value. After the IL-to-ILIL
conversion, TSV employs the generated TEG graph (for a
single scan cycle) along with the given safety requirement
to determine concrete atomic proposition values. In particular,
each node in the TEG becomes two nodes in the Reﬁned Graph
to model both valuations of proposition a. Consequently, TSV
further abstracts the reﬁned TEG graph to only include the
information that is sufﬁcient for the formal veriﬁcation phase
(Section V-E).
D. TEG Generation Algorithm
This section describes in details the procedure for TEG
generation (Algorithm 1)3. The main inputs to the algorithm
are i) symbolic scan cycle set ssc, i.e., symbolic execution
outputs that are mappings from path predicates to symbolic
PLC variable values; ii) the safety speciﬁcation of the under-
lying physical system j, and iii) the termination deadline g
for the TEG generation algorithm. TSV parses the given LTL
safety formula to get the corresponding atomic propositions4
(Line 1). The TEG generation algorithm starts with initializing
the TEG state space W by creating an initial state s where all
of the PLC variables/predicates are reset to zero/true (Lines
2-7) that happens when the PLC loads the controller code for
the ﬁrst time.
the initial state s;
Regarding the TEG state notion, each state includes three
types of information: i) spredicate denotes the logical predicate
as the result of symbolic execution of branch/jump instructions
that has been accumulated in the current state through the
state transition sequence starting at
ii)
svar values indicates the symbolic variable values that have been
initiated in the current state; and iii) sprop values represents the
concrete Boolean value vector for the atomic propositions in
the current state. For the initial state5, given the reset concrete
variable/predicate values,
the concrete values for the LTL
atomic propositions A are calculated and stored in sprop values
(Line 6); however, for other states storing symbolic values,
TSV takes a different approach to assign concrete atomic
proposition values as discussed below. The TEG state space
3A concrete example for the symbolic execution and formal veriﬁcation of
a given controller program is described in Appendix A.
4Note that “ ” denotes an assignment.
5It
the function GenTEG takes a Boolean argument
initial GenTEG call that denotes whether this is the ﬁrst call in the recur-
sion chain. Due to presentation simplicity, the variable is not listed in the
algorithm’s input list explicitly.
is assumed that
Algorithm 1: GenTEG
9 foreach Path predicate p 2 ssc do
: The Symbolic scan cycle ssc
: The LTL safety speciﬁcation j
: The TEG generation deadline g
Input
Input
Input
Output: The generated temporal execution graph TEG
1 A   get atomic propositions(j)
2 s   create initial state()
3 if initial GenTEG call then
4
5
6
spredicate   inilialize predicate(True)
svar values   inilialize PLC variables(False)
sprop values  
concretize atomic propositions(svars values, A)
Ws   s
We   /0
symbolic values   ssc [p]
foreach a 2 2A do
t   spredicate V predicate(a, A) V p
if ¬satisﬁable(t) then
s0   create state()
[s0predicate,s0prop values]   [t,a]
s0var values  
update(svar values,symbolic values)
s00   ﬁnd equivalent state(W,s0)
if s00 6= NULL then
else
delete(s0)
continue
s00   s0
Ws   Ws [ {s00}
We   We [ {(s ! s00)}
if g < elapsed time then
return
GenTEG(ssc,j,s00)
7
8
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
Ws and set of transitions We are also initialized to the initial
state s and empty set, respectively, during the initial function
call (Line 7-8).
Following the algorithm, a transition is then added for each
(path predicate, symbolic output values) mapping in the sym-
bolic scan cycle ssc (Line 9) that is satisﬁable given the vari-
able values in the initial state s. The algorithm goes through
7
a nested loop (Line 11) to be able to assign concrete Boolean
values for each atomic proposition on every generated TEG
state (Section V-C). TSV produces the conjunctive predicate t
using i) the accumulated state predicate; ii) the path predicate
p from ssc; and iii) the concrete atomic proposition vector a
(Line 12). The satisﬁability check is performed in Line 13 that,
if satisﬁable, allows TSV to create the corresponding state s0
(Lines 15-17) and transition, and update TEG (Lines 23-24).
The update function (Line 17) creates the symbolic variable
values for the new state s0. It takes the symbolic variable
values in the source state svar values, that captures the PLC’s
current memory state, as well as the symbolic values from
the corresponding program control path in ssc (Line 10).
Consequently, the update function performs the intermediate
variable elimination step (Section V-B) to get rid of interme-
diate variables in the ssc symbolic values, and stores the result
in the new state’s symbolic variable values s0var values.
There is a case in which the state will not be added even
when the path predicate is satisﬁed. If the TEG already con-
tains a state with PLC variables equivalent to the destination
state (Line 18), then a transition is added back to the existing
state, and the new destination is discarded (Line 20). Two states
are considered equivalent if their PLC variables have equal
symbolic values. This step enables TSV to avoid unnecessary
state space size increase, and hence improves the formal
veriﬁcation efﬁciency. It is noteworthy that to decrease the
false negative rates of the state equivalence checking function,
TSV checks for equality after simplifying the symbolic values.
For instance, TSV will mark the X1   I0
k and
X2   4 · I0
k + 2 as equal after the simpliﬁcation of those
expressions’ abstract syntax trees.
k + 2 + 3 · I0
Finally, TSV calls the TEG generation function GenTEG
recursively to explore next possible states starting the recently
explored state s00. The recursive graph generation procedure
returns under two conditions. First, the procedure returns if
all of the states are created and the graph is completely
generated. This is the ideal return condition as the complete
graph will result in accurate model checking results with a
counterexample. Second, the procedure returns of the explored
depth, i.e., the number PLC input-output scans, exceeds a
predeﬁned bound value (Line 25). This results in a partially
generated temporal execution graph that is later used for formal
model checking. The bounded graph generation is a suitable
solution when the size of the program is large and complete
graph generation is too costly.
To summarize, TSV strives for minimality of model state
space through three approaches. (i.) Symbolic execution lumps
as many concrete input values (and hence, scan cycles) to-
gether as possible. (ii.) In the reﬁnement step, a truth value for
a proposition is only added if it is feasible transitioning from
the previous state. (iii.) As a measure of last resort, TSV will
perform bounded model generation when the TEG’s diameter
becomes too large.
E. Malicious Code Discovery
TSV uses the abstract TEG to perform LTL-based model
checking [8] that either allows the code to run on the PLC
after passing all checks, or returns a counterexample to sys-
tem operators in the event that a violation is found. More
speciﬁcally, the model checker veriﬁes whether the reﬁned
temporal execution graph contains any paths in which a
temporal property fails to hold. Given a temporal predicate f ,
TSV negates f 6 and generates a tableau T(¬ f ). The tableau
is a state-based automaton that satisﬁes every sequence of
words that satisfy ¬ f . Here, a word is an truth assignment to
all atomic propositions in f . TSV then computes the product
automaton P of T and the TEG. If an accepting path is found
in P, then the values of atomic propositions along that path
form a counterexample for the temporal property f .
The counterexample can be used to locate the offending
lines of code or control ﬂows in the original PLC program. In
the event of malicious code injection, this could shed light on
the attackers motives, and if a safety violation occurred due to
an error, operators can take corrective actions. We demonstrate
this functionality in Section VI-C.
VI. EVALUATION
We now wish to investigate TSV’s efﬁcacy in checking
typical safety properties against a representative set of PLC
programs. In particular, we designed a set of experiments
to verify whether TSV can be useful in real-world practical
scenarios by answering the following questions empirically:
How accurately do the employed model checking techniques
in TSV verify whether a given PLC code is compliant with the
requirements? How efﬁciently does TSV complete the formal
veriﬁcation steps for an uploaded PLC code? How well can
TSV scale up for complex security requirements? We start
by describing the experimentation control system case studies,
and then proceed to examine these questions.
A. Implementation
We implemented TSV on a Raspberry Pi embedded com-
puter running Linux kernel 3.2.27. The IL7 lifting is imple-
mented in 2,933 lines of C++ code, the symbolic execution in
11,724 lines of C++ code, and the TEG generation in 3,194
lines of C++ code. In addition, TSV uses the Z3 theorem
prover [9] both for checking path feasibility during symbolic
execution, and for simplifying symbolic variable values during
TEG construction. NuSMV is used for model checking of the
reﬁned TEG [12]. In the case of a safety violation, Z3 is used
to ﬁnd a concrete input for the path predicate corresponding
to the offending output.
B. Control System Case Studies
To make sure that TSV can be used for practical safety
veriﬁcation of real-world infrastructures, we deployed TSV
on several real-world Siemens PLC programs for different
6In our implementations, before the logic negation, the given LTL formula
is ﬁrst reduced to the corresponding computation tree logic formula [3]. We
ﬁnd the details outside the scope of this paper and the interested reader is
referred to [8].
7To support other programming languages, a new source code lifter needs
to be developed to generate the ILIL code. However, due to the syntactical
similarities between most of existing PLC programming languages, the lifter
may not be needed to be developed from scratch.
8
Desktop$Computer$
Raspberry$Pi$
industrial control system settings. Our examples are runnable
on several of the most popular PLC architectures8.
0.1$
0.01$
%
)
s
d
n
o
c
e
s
(
%
e
m
T
i
0.001$
!
s
d
n
a
s
u
o
h
T
!
)
s
d
n
o
c
e
s
(
!
e
m
T
i
!
10000$
1000$
100$
10$
1$
0.1$
0.01$
0.001$
%
%
e
z
i
S
e
c
a
p
S