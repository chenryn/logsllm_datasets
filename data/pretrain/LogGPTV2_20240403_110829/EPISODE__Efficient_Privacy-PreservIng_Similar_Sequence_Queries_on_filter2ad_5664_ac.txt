Our protocol consists of the following steps (see Figure 2):
A Initialization
(1) Each data provider Pi locally secret-shares its genomic
(2) Ii sends the shares to the Semi-Trusted Third Parties T0
data and Look-Up Table.
and T1, respectively.
B Querying
(3) Client C locally secret-shares its query Q.
(4) C sends its secret-shared query to T0 and T1.
(5) T0 and T1 obliviously compute the SSQ protocol on the
secret-shared database and the client’s secret-shared query
using STPC.
(6) T0 and T1 send the resulting output shares containing
secret-shared indices of the most similar sequences in the
database to C.
(7) C locally reconstructs the result from the output shares.
T1T0CP3P2P1(1)(1)(1)(2)(2)(2)(2)(3,7)(4)(4)(5)(6)(6)one-timeexpenseper-queryexpenseSession 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand320Algorithm 1: Privacy-preserving Edit Distance (ED) algo-
rithm between a sequence seq containing a Look-Up Table
with genomic variants and the corresponding distances, and
a client’s query containing genomic variants. OTM denotes
Oblivious Transfer-Based Multiplication.
In contrast to querying the database (querying phase), aggre-
gating the database from different sources (initialization phase)
is a one-time expense. Data providers contribute their data only
once, and any changes in the outsourced database are required for
updates only. Since data providers can send their secret-shared se-
quences in any order and from different preprocessing sets (though
using the same global parameters), the database can be updated
without any further preprocessing steps on the STTPs’ and data
providers’ side. Additional data providers in the protocol do not
add any significant overhead because of the following: (i) the ini-
tialization phase is a one-time expense, (ii) the initialization phase
is computed in parallel for all data providers, (iii) the STTPs do not
apply any further preprocessing steps but only store the received
shares, which has a very small overhead.
Client’s Communication and Computation. Our model signifi-
cantly reduces the amount of communication and computation per-
formed by the client compared to the direct application of SMPC.
More detailed, the client sends only 2× the amount of information
compared to the non-private cleartext protocol. Moreover, the client
does not require cryptographic operations in the protocol but only
very efficient XOR and addition mod 2ℓ operations. This makes our
protocol even applicable for weak clients using mobile devices.
4.2 Privacy-Preserving Approximated Edit
Distance
Our protocol for securely computing the Edit Distance (ED) be-
tween a genome sequence stored in the outsourced database and a
client’s query utilizes the idea of Asharov et al. [3] for improving
the efficiency of computation by approximating ED using Look-Up
Tables (LUTs) (see Section 3.2).
Algorithm 2: Privacy-preserving Similar Sequence Query
(SSQ) algorithm between a query and sequences of genomic
data in the outsourced database. k-NN denotes the k-Nearest
Neighbors algorithm.
We extend the two-party protocol of [3] to the outsourcing sce-
nario and carefully optimize the implementation using a mix of dif-
ferent sharings and minimize costly operations, such as conversions
between sharings and the operations that require interaction/heavy
computations. Our detailed algorithm is given in Algorithm 1 and
its data representation is given in Figure 3. The Similar Sequence
Query (SSQ) algorithm is given in Algorithm 2.
More detailed, we improve the protocol of [3] by using more
lightweight GMW [22] instead of GCs [46] for comparisons, Corre-
lated Oblivious Transfers (C-OTs) [4] instead of general OTs, and
a more efficient k-NN algorithm in Yao sharing. Although we use
a more efficient C-OTs, we require two C-OTs instead of one OT,
which is due to the fact that the Semi-Trusted Third Parties (STTPs)
do not possess the LUTs in cleartext. However, the cost for OTs
remain approximately the same as in the protocol of [3] for large
databases (less than 1 % overhead for a database with 10 000 se-
quences). In contrast to [13], we compute most of the functionalities
using generic protocols which enables arbitrary extensions of our
protocol. A possible and cheap extension of our protocol would be a
thresholding protocol that reveals only those sequence indices that
have distances smaller than some threshold T . This protocol has
the advantage that it dispenses with the need of finding the k most
similar sequences, which improves the complexity from O(cid:0)kN(cid:1) to
O(cid:0)N(cid:1).
We optimize the SSQ algorithm by mixing different SMPC pro-
tocols. First, the blocks of the query and LUT are secret-shared in
Boolean sharing. Boolean shares are then used to compare the block
values of the query with the block values of the LUT, namely, the
block value i of the query with each of the ω block values of the LUT
in the row i. Afterwards in Arithmetic sharing, shared distances
or zeros are chosen depending on the comparison results between
the query and LUT. For this, we use two C-OTs for multiplying
the comparison result r ∈ {0, 1} with the distances in Arithmetic
sharing. Since all distances are valid for the sequence (each block
yields either a valid block distance or zero) and only need to be
summed up for resulting in the total distance between the query
and sequence, we perform — free in Arithmetic sharing — addition
operations for all distances in the sequence.
hdistanceiA←ED(seq,query)1:row_dist←∅2:fori=1toseq.lengthdo3:hrow_sumiA←h0iA4:forj=1toseq.LUT.widthdo5://FormultipleEDcomputations,eqvaluesarecomputedonlyonce6://Next2linesareequaltoeiω+j==qi?diω+j:07:heqiB←hseq[i].LUT[j].valueiB==hquery[i]iB8:hdistiA←OTM(heqiB,hseq[i].LUT[j].distiA)9:hrow_sumiA←hrow_sumiA+hdistiA10:row_dist.insert(hrow_sumiA)11:fori=2toseq.lengthdo12:hrow_dist[1]iA←hrow_dist[1]iA+hrow_dist[j]iA13:returnhrow_dist[1]iAids←SSQ(sequences,query,k)1:dists←∅2:ids←h1iY,...,hsequences.sizeiY3:fori=1tosequences.sizedo4:hdistiA←ED(sequences[i],query))5:dists.append(A2Y(hdistiA))6:ids←k-NN(dists,ids,k)7:returnidsSession 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand321Figure 3: Data representation of the Similar Sequence Query algorithm. For computing the Edit Distance to three sequences,
the values of the blocks in the client’s query {q1, q2, q3} are compared with the precomputed values in the secret-shared
Look-Up Tables (LUTs) {e1, . . . , e9}. Based on the comparison, we process the precomputed distances {d1, . . . , d9}, {d10, . . . , d18},
{d19, . . . , d27} to the Sequences 1, 2, and 3, respectively. For example, for Sequence 1 in the first block e1 is compared with q1;
if they are equal, the precomputed distance d1 is returned, and 0 otherwise. The computation of the LUT is parallelized using
Single Instruction Multiple Data gates.
4.3 Privacy-Preserving Similar Sequence
Queries
In this work, we consider a system model where the client wants to
find k genome sequences that are most similar to its query among
the sequences stored in the outsourced database. Here, we proceed
as follows: the distances to single sequences are first calculated
using the Similar Sequence Query (SSQ) algorithm, and afterwards,
the distances are used along with the corresponding IDs for finding
the k closest distances using the k-NN algorithm (see Algorithm 2).
Choice of the Algorithm for Finding k Most Similar Sequences.
Generally, we can think of two possible methods for efficiently find-
ing the k most similar sequences: the k-Nearest Neighbors (k-NN)
algorithm and sorting networks. The first has a small AND-size
for small k, but a large AND-depth of O(cid:0)n(cid:1), because the algorithm
AND-depth and AND-size of O(cid:0)n log2 n(cid:1), which is independent
is difficult to parallelize, whereas the second have a logarithmic
of k. Since the resulting circuit size of a sorting network is by an
order of magnitude larger for small k, it is practically less efficient
even in Boolean sharing than k-NN in Yao sharing, so we use the
efficient algorithm for finding indices of the closest distances (k-NN
with precomputed distances) in Yao sharing that is already imple-
mented in ABY [25]. In EPISODE, we utilize the highly efficient
k-NN implementation in ABY with Nk(2ℓ + ⌈log2 N⌉) AND gates,
where N is the number of sequences, k is the number of most sim-
ilar sequences, and ℓ is the bit-length of the distances. Since the
distances are shared in Arithmetic sharing, we first convert them
to Yao sharing.
Communication. Our SSQ algorithm consists of three parts: com-
parison, OTs, and k-NN. The first part requires 6tψ ωκb′ bits to be
transferred (see Table 1 on p. 3 for the explanation of all parame-
ters). For our C-OT-based protocol, 2tω(N · NPoT(⌈log2(tb′)⌉ +κ))
bits of communication are required. NPoT(x) (Next Power of Two)
denotes a function that takes a rational number as input and out-
puts the smallest number that is a power of two and is equal or
greater than x. For the last part (the k-NN algorithm), we require
2Nkκ(2⌈log2(tb′)⌉ + ⌈log2 N⌉) bits of communication. The total
communication is approximately 2tω(3ψκb′+N·NPoT(⌈log2(tb′)⌉))+
2Nkκ(2⌈log2(tb′)⌉ + ⌈log2 N⌉) bits.
4.4 Security Analysis
Our protocol is based on the outsourcing protocol described in [28],
which gives a generic construction and a security proof for turning
an N -party SMPC protocol into a secure outsourcing scheme where
data is oursourced to N non-colluding Semi-Trusted Third Parties
(STTPs).
We instantiate SMPC with the N = 2-party ABY framework [18].
Our protocols implement the algorithm for SSQs of [3]. Our proto-
cols are even secure against malicious data providers and clients
(who all send a single message in the protocol), and secure against
semi-honest STTPs. Since data providers do not receive any out-
puts, their malicious input cannot affect the privacy of the protocol.
Moreover, any changes to the client’s single input message corre-
spond to a different input to the ideal functionality, which yields
security against malicious clients.
q1q2q3Querye1d1e2d2e3d3e4d4e5d5e6d6e7d7e8d8e9d9LUTwithdistancestoSequence1e1?=q1d1e2?=q1d2e3?=q1d3e4?=q2d4e5?=q2d5e6?=q2d6e7?=q3d7e8?=q3d8e9?=q3d9e3?=q1d3e3?=q1d12e3?=q1d21e6?=q2d6e6?=q2d15e6?=q2d24e9?=q3d9e9?=q3d18e9?=q3d27e1?=q1d1e2?=q1d2e3?=q1d3e1?=q1d10e2?=q1d11e3?=q1d12e1?=q1d19e2?=q1d20e3?=q1d21sequencelengthnnumberofsequencesNLUTwidthωSession 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand322Table 2: Run-time and communication comparison of our algorithm with that of Asharov et al. [3] with sequence length
n=3 470, number of nearest sequences k=5, block length b=4, padded block length b′=16, and number of data providers ψ=1
for different parameters N (number of sequences) and ω (Look-Up Table width). The preprocessing stage is not included in
the total run-time. A plot is given in Figure 4 in Appendix A.
N
ω
1 000 25
2 000 30
4 000 35
Ours
Run-time (localhost / LAN) in s
[3]
6.03 / - 1.07 / 1.89
14.11 / - 2.20 / 4.07
31.60 / - 4.83 / 9.02
Improvement
5.6× / -
6.4× / -
6.5× / -
[3]
Communication in MB
Ours
180
340
660
130
268
571
Improvement
1.3×
1.2×
1.1×
Table 3: Run-time comparison of our Edit Distance algo-
rithm with that of Cheng et al. [13] with sequence length n,
Look-Up Table width ω=20, and block size b=2.
n
10
20
30
40
50
[13]
1.2 s
2.2 s
3.4 s
4.7 s
6.0 s
Run-time (LAN)
Ours
Improvement
571×
733×
1 096×
1 516×
1 875×
2.1 ms
3.0 ms
3.1 ms
3.1 ms
3.2 ms
Theorem 4.1. Assume that the protocols implemented in ABY [18]
are secure against semi-honest adversaries and the two STTPs are
semi-honest and non-colluding. Then our protocols securely implement
the algorithm of Asharov et al. [3].
i and ⟨x⟩t
Proof (sketch). The proof follows immediately from the proof
in [28] and the fact that the protocols run between the two STTPs
are secure against semi-honest adversaries and operate on secret-
shared data. More detailed, consider shares ⟨x⟩t
1−i of an
input value x shared by Party Pi in sharing type t ∈ {A, B, Y} cor-
responding to Arithmetic, Boolean, and Yao sharing, respectively.
Party P1−i gets ⟨x⟩t
1−i from Pi. Party P1−i cannot derive any infor-
1−i without knowing ⟨x⟩t
mation from ⟨x⟩t
i . Similarly, the security
of the STPC protocols and STPC protocol conversions that ABY is
based on guarantees that no information can be derived from the
intermediate shares (i.e., secret-shared result of any operation on
shares). The C-OT-based multiplication (which is a straightforward
extension of [3]) is performed on secret-shared values and thus does
not reveal any information about the cleartext values. The STTPs do
not learn any new information from the secret-shared outputs. By
aggregating the joint database, the data providers have no outputs
and thus cannot infer any information from the protocol. In view of
the above arguments: (i) no semi-honest STTP can obtain any new
information on the genome data from the shares, (ii) no actively
corrupted server can obtain any information on the genome data
contained in the client’s query or other server’s database, and (iii)
no actively corrupted client can obtain new information on the
genome data contained in the database of any of the servers.
4.5 Data Aggregation from Multiple Data
Providers
We see three possible approaches of aggregating data in the out-
sourced database:
(1) The most intuitive approach is to attach a Look-Up Table
(LUT) to each genome sequence, which was used in [13].
This approach dispenses with the need of LUT management
for the Similar Sequence Query (SSQ) protocol and when
updates occur. Since each genome sequence has its own LUT
and is thus independent of other sequences, the data provider
only has to upload the secret-shared new sequence and the
corresponding secret-shared LUT to the Semi-Trusted Third
Parties (STTPs). This approach is in particular effective if
there is a very large number of participating data providers
in the protocol. The best-case scenario for this setting is
when ψ =N , i.e., each institution uploads a single genome.
(2) A more realistic approach is to keep one LUT for each data-
base. This approach has the advantage that the number of
data providers is commonly not very large, e.g., ten big in-
stitutions is a realistic scenario. Since the STTPs know how
many and which sequences came from which data provider,
this approach does not violate privacy of the protocol by us-
ing predefined LUTs for particular genome sequences. Using
this approach, only ψ comparisons with LUTs have to be
performed, which is a small overhead if the number of se-
quences N is large. Due to the performance advantages over
other options, we choose this approach in our SSQ protocol.
(3) The least realistic approach is to aggregate LUTs of multiple
data providers. For this, the institutions count the frequencies
of all possible alleles for a block in their database (the most
commonly used block size in [3] is 16). For example, a fre-
quency table for a 16-allele block would yield 416=4.3 billion
values. These values first have to be aggregated from multi-
ple databases. Afterwards, the w (width of the LUT) maxima
have to be found from the dataset, e.g., using the k-Nearest
Neighbors (k-NN) algorithm. This approach is performed for
each block (there are 15 million blocks in a whole-genome
sequence). Therefore, this approach is impractical and we
do not discuss it further.
5 EVALUATION
We implemented all our protocols using the ABY framework [18].
We run our two Semi-Trusted Third Parties (STTPs) each on a stan-
dard PC equipped with an Intel Core i7-4770K 3.5 GHz processor
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand323Table 4: Run-time and communication comparison of our Similar Sequence Query algorithm with that of Cheng et al. [13]