关利⽤的影响。
随着 JEP 290 的更新，RMI ⾸先在 RegistryImpl 类中引⼊了⼀个 registryFilter ⽅法，⽤来过滤在 RMI 调⽤产⽣的
反序列化过程中允许的序列化类，判断代码如下，可以看到，除了基础类型之外，RegistryImpl 采⽤了⽩名单的⽅
式限制了允许序列化的类型。
    UnicastRef  ref = new UnicastRef(new LiveRef(id, te, false));
    RMIServerImpl_Stub stub = new RMIServerImpl_Stub(ref);
    //  ysoserial 中使⽤ RemoteObjectInvocationHandler
//    RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);
//    Registry proxy = (Registry) 
Proxy.newProxyInstance(RemoteObject1.class.getClassLoader(), new Class[]
{Registry.class}, obj);
    SerializeUtil.writeObjectToFile(stub);
    SerializeUtil.readFileObject();
  }
}
DGC 层对应的 DGCImpl 也引⼊了 checkInput ⽅法：
在这种情况下，直接使⽤ CC ⼀类的 gadget 就完全失效了，但是在第五章反序列化 Gadgets ⾥提到的
UnicastRef/RemoteObject 利⽤链配合 ysoserial.exploit.JRMPListener 依旧是可以使⽤的。
这个利⽤链的⼤致流程就是：攻击者发送 payload 让⽬标服务器发起⼀个 JRMP 请求去链接我们的 JRMP 服务器，
然后接受并反序列化我们 JRMP 服务器返回的报错信息，反序列化的时候通过 RMI 注册端内部的利⽤链（⽐如
CC）完成命令执⾏。
除此之外 An Trinh 师傅还公布了他对 JEP 290 的绕过⽅式，被收录在这篇⽂章中。
我没细看，但感觉是个套娃⾏为，最终触发点还是 UnicastRef。有兴趣的师傅可以跟⼀下。啦啦师傅的⽂章⾥也有
分析。
七、扩展
七、扩展
以上关于 RMI 攻击的分析，⼤多数都是⽩盒的，理想式的分析，那在实际情况中，如果遇到了⼀个 RMI 服务，究
竟该如何攻击呢？
在学习 RMI 攻击的相关过程中，发现两个攻击 RMI 的开源项⽬，先来学习⼀下这些项⽬。
BaRMIe
BaRMIe 由 Nicky Bloor (@NickstaDB) 编写，主要提供了两种功能： enum 和 attack。程序⾥的注释写的很详
细，重点关注⼀下核⼼实现。
⾸先来看下 enum 功能，此功能由 nb.barmie.modes.enumeration.EnumerationTask#run  ⽅法实现，核⼼⽅
法在 nb.barmie.modes.enumeration.RMIEnumerator#enumerateEndpoint  中：
⾸先还是利⽤ LocateRegistry.getRegistry()  ⽅法创建本地的 Registry 代理。
获取⼀个随机名称，然后调⽤ unbind ⽅法去解绑，如果抛出 NotBoundException 异常，则证明我们存在远程对
registry 进⾏操作的可能。
创建⼀个 TCP 代理，⽤来获取在 RMI 通信过程中产⽣的数据包，并重新通过代理与 Registry 端进⾏通信，
BaRMIe 从代理中读取流数据并⾃⾏实现解析逻辑，从⽽避免攻击者端在反序列化时由于没有具体接⼝⽽导致
"Class.forName" 报错。
调⽤ list  ⽅法获取 Registry 端绑定的服务名，并且循环使⽤ lookup  ⽅法去获取对应的服务对象动态代理，这
中间产⽣的流量会被 RMIReturnDataCapturingProxy 这个代理类捕获到，然后通过 RMIReplyDataParser 的
extractObjectDetails  ⽅法解析远程服务对象的相关信息。
解析后 EnumerationTask#run  会整理及打印远程服务对象的相关信息，以及是否能够对此 Registry 进⾏远程操
作（bind/unbind/rebind）。
接下来会尝试匹配 BaRMIe 内置的⼀些攻击⼿段，如果匹配到了将会打印信息：
主要是包括 Axiom ⽂件操作、SpringFramework ⾥的反序列化、JMX 反序列化、⾮法 bind 等，循环调⽤这些内
置 payload 中的 canAttackEndpoint  ⽅法进⾏测试，在这⼀步不会直接实施攻击，在这⼀步均是测试
payload。
如果判断可能存在反序列化攻击，则继续尝试查找可⽤的反序列化 gadget：
BaRMIe ⽀持的反序列化 payload ⽀持如下：
最后是整合信息及打印，效果如下：
接下来看下 attack 功能，此功能由 nb.barmie.modes.attack.AttackMode#run  ⽅法实现，⾸先依旧是调⽤
RMIEnumerator#enumerateEndpoint  ⽅法来枚举并尝试攻击，获取可⽤的攻击⼿段。
接下来就是根据选择不同的攻击⽅式，进⼊不同的菜单，输⼊不同的参数，发起不同的攻击，最后都是调⽤
nb.barmie.modes.attack.RMIAttack  各个实现类的 executeAttack ⽅法。
使⽤流程如下，⾸先选择攻击⽬标：
选择可⽤的攻击⽅式，例如我这⾥是反序列化：
选择反序列化 gadget ：
输⼊命令，拼接 payload 并执⾏，弹出计算器。
可以看到，BaRMIe 针对我们在本⽂讨论的 RMI 攻击主要是提供了使⽤ bind ⽅式攻击 Registry 的攻击，除此之外
BaRMIe 提供了利⽤⼀些框架和组件注册的服务进⾏攻击。
RmiTaste
RmiTaste 是 @_mzer0 在参考了 BaRMIe 之后编写的攻击⼯具，并且结合 ysoserial ⽣成利⽤ gadget。其实
BaRMIe 也是⽤的 ysoserial 的 payload，但是 RmiTaste 是直接调⽤。
RmiTaste 提供了 4 种模式：conn，enum，attack，call：
conn：测试与⽬标 Registry 的连接 
enum：枚举 Registry 中注册的服务 
attack： 指定反序列化 payload 攻击 Server 端 
call：调⽤服务中的⽅法，需要在本地有跟服务端⼀样的接⼝ 
RmiTaste 的代码清晰可读，并且有部分实现思路与 BaRMIe 相同，这⾥我就不⼀⼀解读，感兴趣的读者⾃⾏阅读
和测试。
最关键的 attack 逻辑在 m0.rmitaste.rmi.exploit.Attack#invokeMethodPayload  ⽅法中：
这跟我们在攻击 Server 端时下断点修改的思路是⼀样的，所以 RmiTaste 是攻击 Server 端的实现逻辑。
以上两个⼯具都提供了攻击 RMI 的⼀部分能⼒，但是很显然没有覆盖完全本章的涉及到的全部内容，也并不⽀持
JEP 290 的 bypass，在测试过程中也发现了若⼲ BUG，不过依旧都是⾮常优秀的⼯具。
⼋、总结
本篇⽂章介绍了 RMI ，测试了 RMI 的使⽤，分析了 RMI 实现的部分流程和源码，针对 RMI 中不同⻆⾊的端攻击进
⾏了攻击测试及漏洞成因分析，然后分析了 RMI 包下⼀些类的实现机制导致的反序列化 gadget，然后简单深⼊了
⼀下 JEP 290 的影响和绕过，最后学习了两个攻击 RMI 的项⽬的实现⽅式。
作为⼊⻔及了解⽬前学到这部分感觉就差不多了，但是这⾥还有⼏个点的分析没有做：
1. JEP 290 详解。
2. 为什么 UnicastRef 的 payload 能绕 JEP 290 ？
3. ⽬前能绕 JEP 290 的 POC 貌似都需要反连，服务器不出⽹，能不能绕？
4. JRMP 协议解析及实现。
5. DGC 层。
6. 攻击 Client 端实战 —— 反制红队 or 蜜罐。
⽇后有时间慢慢细说吧。
九、使⽤ RASP 防御
我是⼀条⼩⻘⻰，⼩⻘⻰，⼩⻘⻰，我有许多⼩秘密，⼩秘密，⼩秘密，我有许多的秘密，就不告诉你，就不告诉
你，就~不~告~诉~你~~
⼗、引⽤
https://paper.seebug.org/1091/
https://www.cnblogs.com/binarylei/p/12115986.html
https://xz.aliyun.com/t/7079
https://www.oreilly.com/library/view/learning-java/1565927184/ch11s04.html
http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD
%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/
https://lalajun.github.io/2020/06/22/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-
%E6%B7%B1%E5%85%A5-%E4%B8%8A/
https://lalajun.github.io/2020/06/22/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-
%E6%B7%B1%E5%85%A5-%E4%B8%8B/
https://github.com/lalajun/RMIDeserialize
https://github.com/NickstaDB/BaRMIe
https://javasec.org
https://mogwailabs.de/en/blog/2019/03/attacking-java-rmi-services-after-jep-290/
https://mogwailabs.de/blog/2020/02/an-trinhs-rmi-registry-bypass/
https://github.com/mogwailabs/rmi-deserialization
https://www.anquanke.com/post/id/200860
https://mp.weixin.qq.com/s/TbaRFaAQlT25ASmdTK_UOg
http://www.code2sec.com/cve-2017-3241-java-rmi-registrybindfan-xu-lie-hua-lou-dong.html
https://mp.weixin.qq.com/s/5xHPCklm3IyBn7vc5_OiUA
https://github.com/threedr3am/ysoserial
https://y4er.com/post/bypass-jep290/
https://openjdk.java.net/jeps/290
https://paper.seebug.org/1689/
https://forum.butian.net/share/709