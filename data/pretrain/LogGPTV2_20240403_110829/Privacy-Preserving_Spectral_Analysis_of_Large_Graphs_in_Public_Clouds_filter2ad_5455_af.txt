### Data Owner’s Costs

For the Lanczos method, the sparse representation does not impact the data owner's costs. This is because, regardless of whether the matrix is sparse or dense, dense vectors must be used in the data owner's computations. Therefore, our comparison will focus on the Nyström method.

#### Communication and Computation Costs

**AHE-based Nyström Method:**
- **Communication Costs:** The data owner must download \(E(W)\), \(E(C \bar{V})\), and \(E(C\Delta)\), and upload \(\bar{V}\) and \(\Delta\) (in 128 bits per value) in plaintext.
- **Computation Costs:** These are primarily driven by decrypting \(E(W)\), \(E(C \bar{V})\), and \(E(C\Delta)\).

**RLWE-based Nyström Method:**
- **Communication Costs:** The data owner downloads \(E(W)\) and \(E(CV)\), and uploads \(E(V)\). Note that \(E(W)\) is encoded without packing due to its sparse nature, while \(E(V)\) and \(E(CV)\) can use packing.
- **Computation Costs:** These are dominated by encrypting \(V\) (packed) and decrypting \(E(W)\) (non-packed) and \(E(CV)\) (packed).

### Comparison Summary

Figure 6 summarizes the comparison. Due to the randomness in sparse submission results, the numbers provided are averages based on the statistics in Table 7. Interestingly, it shows a similar pattern to Figure 4 for the Lanczos method, where the Paillier-based method has lower communication costs but higher computational costs for the data owner.

Table 10 provides a detailed comparison of the data owner's costs for Lanczos and Nyström methods on the largest matrix, Gplus. The computational costs of the Nyström method are approximately 1/4 to 1/5 of those of the Lanczos method, while the savings in communication are even more significant: reduced to about 1/6 for the Paillier-based method and 1/11 for the RLWE-based method. This aligns with the earlier complexity analysis (Table 1).

For example, with \(t = 30\) and \(k = 10\), the cost of Lan-SHE is about 5-6 times that of Ny-SHE. Between the Nyström algorithms, the Paillier-based method has lower communication costs (501MB vs. 840MB), while the RLWE-based method has much less computational time (about 1/18 of the Paillier-based method), making it more appealing for the data owner. However, the RLWE-based method still requires significantly more cloud storage, as shown in Table 9, which could potentially be improved with a better RLWE storage encoding scheme.

### Related Work

Recent studies have explored the application of garbled circuits (GC) and RLWE for data mining algorithms. GC and AHE have been used by Nikolaenko et al. for matrix factorization, but they come with high communication overhead and execution time. ML Confidential uses FHE to learn Linear Means Classifier and Fisher’s Linear Discriminant Classifier from encrypted data, but FHE is very expensive even for small training datasets.

Several matrix computation approaches have been proposed using methods other than encryption to ensure security. Atallah et al. present secure outsourcing solutions for large-scale systems of linear equations and matrix multiplication applications, but their solutions leak private information, depend on multiple non-colluding servers, or require large communication overhead. Wang et al. use an iterative approach for solving linear equations via client-cloud collaboration and matrix perturbation, but this approach is impractical for big matrices and does not fully utilize cloud infrastructures.

Bost et al. consider applying learned classifiers in an encrypted form to encrypted data, but this is more about evaluating a function, which is a small-scale problem. Privacy-preserving graph data publishing is related but has a different problem setting. Our method is equivalent to adding fake edges to satisfy differential privacy, but these added entries are encrypted 0s, which do not affect matrix computation.

### Conclusions

We present a cloud-centric framework for privacy-preserving spectral analysis of large matrices, providing strong privacy guarantees against honest-but-curious cloud providers. This framework allows data contributors to submit encrypted graph data to the cloud, and the analysis is conducted via secure protocols between the data owner and the cloud. It successfully outsources expensive \(O(N^2)\) computations to the cloud while limiting in-house computations to \(O(N)\) for resource-restricted data owners and contributors.

We designed two privacy-preserving algorithms for spectral analysis: privacy-preserving Lanczos and Nyström algorithms, and studied their constructions with somewhat homomorphic encryption (SHE) methods (e.g., RLWE) and additive homomorphic encryption (AHE) methods (e.g., Paillier). The AHE methods need to protect plaintext operands from adversaries, for which we designed masking methods that provide the desired privacy guarantee and allow the data owner to recover in \(O(N)\) complexity. The privacy-preserving Nyström method benefits from sparse big matrices, for which we designed a privacy-preserving sparse data submission algorithm to balance data sparsity and privacy. The Nyström method on sparse data significantly reduces costs for the data owner. Among different construction methods, the RLWE-based methods have lower computational costs due to ciphertext packing, while the Paillier-based methods save significantly in cloud storage and data owners' communication costs.

### Future Work

Future work will focus on improving the RLWE-based method and investigating technical challenges with evolving graphs. We will optimize the algorithms in HELib to reduce storage and communication costs and study incremental updating methods for evolving graphs to minimize overall costs while preserving the same level of privacy guarantee.

### Acknowledgment

This work is supported by the National Science Foundation under Grant 1245847. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF.

### References

[References are listed as in the original text, with minor formatting adjustments for clarity.]

---

**Authors:**
- Sagar Sharma (PhD student, Department of Computer Science and Engineering, Wright State University)
- James Powers (PhD student, Department of Computer Science and Engineering, Wright State University)
- Keke Chen (Associate Professor, Department of Computer Science and Engineering, Wright State University)

**Contact Information:**
- For further details, please refer to the provided contact information and references.

**Copyright Notice:**
- 1041-4347 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.