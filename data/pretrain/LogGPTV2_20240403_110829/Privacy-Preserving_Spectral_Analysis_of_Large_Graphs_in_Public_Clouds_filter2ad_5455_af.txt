3.2GB
6.3TB
Data Owner’s Costs. Note that for the Lanczos method,
sparse representation does not affect the data owner’s costs,
as in both sparse and dense matrix representations dense
vectors have to be used in data owner’s computation. Thus,
our comparison will be on the Nystr¨om method.
According to the protocol, the data owner’s communi-
cation costs in the AHE-based Nystr¨om method include
downloading E(W ), E(C ¯V ), and E(C∆), and uploading
¯V and ∆ (in 128 bits per value) in plaintext. The com-
putation cost is dominated by decrypting E(W ), E(C ¯V ),
and E(C∆). In contrast, the communication costs in the
RLWE-based method consist of downloading E(W ) and
E(CV ) and uploading E(V ), where E(W ) are encoded
without packing due to the sparse nature, but E(V ) and
(CV ) can use packing. Similarly, the computation cost is
dominated by encrypting V (packed) and decrypting E(W )
(non-packed) and E(CV ) (packed).
Figure 6 summarizes the comparison. Due to the ran-
domness of the sparse submission results, the numbers
are the averages based on the statistics given by Table 7.
Interestingly, it shows a similar pattern to Figure 4 for the
Lanczos method, i.e., the Paillier-based method has lower
communication costs but higher computational costs for the
data owner. Table 10 shows the detailed comparison on the
data owner’s costs for Lanczos and Nystr¨om on the largest
matrix Gplus. The computational costs of the Nystr¨om
method is about 1/4 to 1/5 of the Lanczos method’s, while
the savings on communication are even larger: reduced
1041-4347 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TKDE.2018.2847662, IEEE
Transactions on Knowledge and Data Engineering
Paillier
RLWE
)
s
d
n
o
c
e
s
(
0
1
g
o
l
3
2
1
Paillier
RLWE
3
2
)
B
M
(
0
1
g
o
l
Facebook
Twitter
Gplus
Facebook
Twitter
GPlus
(a) Enc. and Dec. costs.
(b) Communication costs.
Fig. 6: Data owner’s costs for the privacy-preserving
Nystr¨om methods.
to about 1/6 for the Paillier-based method and 1/11 for
the RLW-based method. This is consistent with the earlier
complexity analysis (Table 1). For example, in terms of Lan-
SHE and Ny-SHE, with t = 30 and k = 10, Lan-SHE’s
cost is about 5-6 times of Ny-SHE’s. Between the Nystr¨om
algorithms, the Paillier-based method has a lower cost in
communication (501MB vs. 840MB), while the RLWE-based
one has much less computational time (about 1/18 of the
Paillier-based), which seems more appealing for the data
owner. However, the RLWE-based method still needs much
larger cloud storage as shown in Table 9, which might be
improved by a better RLWE storage encoding scheme.
TABLE 10: Data owner’s costs by using Nystr¨om on sparse
data and Lanczos on dense/sparse Gplus data, encrypted
by Paillier and RLWE, respectively. h: hours
Method
Ny-Sparse
Paillier
RLWE
Comm.
501MB
841MB
Compute
0.9h
0.05h
Lanczos-Sparse/Dense
Comm.
2.8GB
10GB
Compute
5h
0.2h
5 RELATED WORK
There are a few recent studies on the application of garbled
circuits (GC) [18], [35] and RLWE [7] for data mining algo-
rithms. GC and AHE have been used by Nikolaenko et al.
[26] for matrix factorization. However, it comes with high
communication overhead and execution time. As noted in
the paper, the execution time for one iteration of the solu-
tion on 4096x4096 matrix is almost 5000 seconds, and the
communication cost is about 40GB per iteration, making it
almost impractical for datasets of larger sizes as considered
in our work. ML Conﬁdential [17] uses FHE to learn Linear
Means Classiﬁer and Fisher’s Linear Discriminant Classier
from the encrypted data. However, the result shows that
FHE is very expensive for the tasks even for very small
training datasets.
Several matrix computation approaches have been pro-
posed with methods other than encryption to ensure secu-
rity. Atallah et al. [3] present secure outsourcing solutions
that are speciﬁc to large-scale systems of linear equations
and matrix multiplication applications with random noise
masking. Their solutions fall short as they leak private
information, depend on multiple non-colluding servers, or
require a large communication overhead. Wang et al. [33]
use an iterative approach for solving linear equations via
client-cloud collaboration and matrix perturbation. How-
ever, there are several problems making it difﬁcult to apply
13
in practice. First, it requires that the entire unencrypted ma-
trix be present at the client side in the initial setup. Secondly,
the client side must perform a problem transformation step
with a computation cost of O(N 2). These weaknesses render
this approach as impractical for big matrices and do not
fully utilize the cloud infrastructures.
Bost et al. [6] consider applying already learned classi-
ﬁers in an encrypted form (i.e., encrypted classiﬁer parame-
ters) to encrypted data to get classiﬁcation results. However,
applying classiﬁers is more about evaluating a function,
which is a small-scale problem. Thus, many expensive op-
erations can be possibly applied, which are impractical for
mining large datasets.
Privacy-preserving graph data publishing [36] is slightly
related to our work. However, it has a totally different
problem setting. Graph data publishing wants to share the
graph data but needs to address the privacy attacks from the
curious data miners. However, the attacks with background
knowledge cannot be thoroughly discovered and under-
stood. Thus, differential privacy for graph analysis becomes
popular in recent years [20], [34]. We do not aim to publish
graph structures. However, since most graph matrices have
special structures (i.e., non-zero entries represent the edges),
simple sparse encoding exposes too much information. Our
method is equivalent to adding fake edges to satisfy differ-
ential privacy [36]. However, this edge addition does not
change data integrity: the added entries are encrypted 0s,
which do not affect the matrix computation.
6 CONCLUSIONS
We present a cloud-centric
framework for privacy-
preserving spectral analysis of large matrices, which pro-
vides strong privacy guarantee protecting from honest-
but-curious cloud providers. It allows data contributors to
submit encrypted graph data to the cloud, and the anal-
ysis is done via secure protocols between the data owner
and the cloud. The framework succeeds in outsourcing the
expensive O(N 2) computations to the cloud in a secure
manner, and limiting in-house computations to O(N ) for
the resource-restricted data owner and data contributors.
We design two privacy-preserving algorithms for spec-
tral analysis: privacy-preserving Lanczos and Nystr¨om al-
gorithms, and study their constructions with somewhat
homomorphic encryption (SHE) methods (e.g., the RLWE
encryption method) and additive homomorphic encryption
(AHE) methods (e.g., the Paillier encryption). The AHE
methods need to protect the plaintext operands from ad-
versaries, for which we designed masking methods that
provide desired privacy guarantee and allow the data owner
to recover in O(N ) complexity. The privacy-preserving
Nystr¨om method beneﬁts from sparse big matrices, for
which we have designed the privacy-preserving sparse data
submission algorithm for data contributors to achieve the
balance between data sparsity and privacy. The Nystr¨om
method on sparse data brings signiﬁcantly cost reductions
to data owner. Among different construction methods, the
RLWE-based methods have less computational costs due to
the ciphertext packing technique, while the Paillier-based
methods save signiﬁcantly in cloud storage and data own-
ers’ communication costs.
1041-4347 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TKDE.2018.2847662, IEEE
Transactions on Knowledge and Data Engineering
As a part of the future work, we will focus on improv-
ing the RLWE-based method and investigate the technical
challenges with evolving graphs. We will try to optimize
the algorithms in HELib to reduce the storage and com-
munication costs. We will also study incremental updating
methods for evolving graphs to minimize the overall costs
while preserving the same level of privacy guarantee.
7 ACKNOWLEDGMENT
This work is supported by the National Science Foundation
under Grant 1245847. Any opinions, ﬁndings, and conclusions
or recommendations expressed in this material are those of the
authors and do not necessarily reﬂect the views of the NSF.
REFERENCES
[1] C. C. Aggarwal and H. Wang. Managing and Mining Graph Data.
Springer, 2010.
[2] M. Aliasgari, M. Blanton, Y. Zhang, and A. Steele. Secure computa-
tion on ﬂoating point numbers. In Annual Network and Distributed
System Security Symposium, 2013.
[3] M. J. Atallah and K. B. Frikken. Securely outsourcing linear al-
gebra computations. In ACM Symposium on Information, Computer
and Communications Security, pages 48–59, 2010.
[4] P. Berkhin. A survey on pagerank computing. Internet Mathematics,
2:73–120, 2005.
[5] D. Boneh, E.-J. Goh, and K. Nissim. Evaluating 2-dnf formulas on
In International Conference on Theory of Cryptography
ciphertexts.
(TCC), pages 325–341. Springer-Verlag, 2005.
[6] R. Bost, R. A. Popa, S. Tu, and S. Goldwasser. Machine learning
In Annual Network and Dis-
classiﬁcation over encrypted data.
tributed System Security Symposium (NDSS), 2015.
[7] Z. Brakerski, C. Gentry, and V. Vaikuntanathan.
(leveled) fully
homomorphic encryption without bootstrapping. In Innovations in
Theoretical Computer Science Conference (ITSC), pages 309–325, 2012.
[8] D. Catalano and D. Fiore. Using linearly-homomorphic encryption
to evaluate degree-2 functions on encrypted data. In ACM SIGSAC
Conference on Computer and Communications Security, pages 1518–
1529, 2015.
[9] A. Chen. Gcreep: Google engineer stalked teens, spied on chats.
Gawker, http://gawker.com/5637234/, 2010.
[10] J. K. Cullum and R. A. Willoughby. Lanczos Algorithms for Large
Symmetric Eigenvalue Computations. Cambridge University Press,
1985.
[11] M. L. Curtis. Matrix Groups. Universitext, 1984.
[12] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky. Searchable
symmetric encryption: improved deﬁnitions and efﬁcient con-
structions. In ACM CCS, pages 79–88, 2006.
[13] J. Dean and S. Ghemawat. Mapreduce: Simpliﬁed data processing
on large clusters. In OSDI, pages 137–150, 2004.
[14] C. Dwork. Differential privacy.
In International Colloquium on
Automata, Languages andProgramming, pages 1–12. Springer, 2006.
[15] C. Fowlkes, S. Belongie, F. Chung, and J. Malik. Spectral grouping
using the nystr¨om method. IEEE Transactions on Pattern Analysis
and Machine Intelligence, 26(2), 2004.
[16] C. Gentry. Fully homomorphic encryption using ideal lattices. In
Annual ACM Symposium on Theory of Computing, pages 169–178,
New York, NY, USA, 2009. ACM.
[17] T. Graepel, K. Lauter, and M. Naehrig. Ml conﬁdential: Machine
learning on encrypted data. In International Conference on Informa-
tion Security and Cryptology, pages 1–21, 2013.
[18] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-
party computation using garbled circuits. In USENIX Conference
on Security, pages 35–35, 2011.
[19] I. T. Jolliffe. Principal Component Analysis. Springer, 1986.
[20] S. P. Kasiviswanathan, K. Nissim, S. Raskhodnikova, and A. Smith.
Analyzing graphs with node differential privacy. Theory of Cryp-
tography, 2013.
[21] J. Katz and Y. Lindell. Introduction to Modern Cryptography. Chap-
man and Hall/CRC, 2007.
[22] S. Kumar, M. Mohri, and A. Talwalkar. Sampling methods for the
nystr¨om method. J. Mach. Learn. Res., 13(1):981–1006, 2012.
[23] X. Meng, S. Kamara, K. Nissim, and G. Kollios. Grecs: Graph
In ACM
encryption for approximate shortest distance queries.
CCS, pages 504–517, New York, NY, USA, 2015. ACM.
14
[24] M. Naehrig, K. Lauter, and V. Vaikuntanathan. Can homomorphic
encryption be practical? In Proceedings of cloud computing security
workshop, pages 113–124, New York, NY, USA, 2011. ACM.
[25] M. E. J. Newman. Spectral methods for community detection and
graph partitioning. Phys. Rev. E, 88:042822, Oct 2013.
[26] V. Nikolaenko, S. Ioannidis, U. Weinsberg, M. Joye, N. Taft, and
In ACM
D. Boneh. Privacy-preserving matrix factorization.
SIGSAC conference on Computer and communications security, pages
801–812. ACM, 2013.
[27] P. Paillier. Public-key cryptosystems based on composite degree
In EUROCRYPT, pages 223–238. Springer-
residuosity classes.
Verlag, 1999.
[28] O. Regev. On lattices, learning with errors, random linear codes,
and cryptography. In Annual ACM symposium on Theory of comput-
ing, pages 84–93, 2005.
[29] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey, you,
get off of my cloud: exploring information leakage in third-party
In Proceedings of the 16th ACM conference on
compute clouds.
Computer and communications security, pages 199–212, New York,
NY, USA, 2009.
[30] B. Scholkopf and A. Smola. Learning with Kernels. MIT Press, 2002.
[31] N. Smart and F. Vercauteren. Fully homomorphic simd operations.
Cryptology ePrint Archive, Report 2011/133, 2011.
[32] U. von Luxburg. A tutorial on spectral clustering. Statistics and
Computing, 17(4):395–416, 2007.
[33] C. Wang, K. Ren, J. Wang, and K. M. R. Urs. Harnessing the cloud
for securely solving large-scale systems of linear equations.
In
Proceedings of ICDCS, pages 549–558, Washington, DC, USA, 2011.
[34] Y. Wang, X. Wu, and L. Wu. Differential privacy preserving
In Advances in Knowledge Discovery and
spectral graph analysis.
Data Mining. Springer Berlin Heidelberg, 2013.
[35] A. C. Yao. How to generate and exhange secrets.
In IEEE
Symposium on Foundations of Computer Science, pages 162–167, 1986.
[36] B. Zhou, J. Pei, and W. Luk. A brief survey on anonymization
techniques for privacy preserving publishing of social network
data. SIGKDD Explor. Newsl., 10(2):12–22, Dec. 2008.
Sagar Sharma is currently a PhD student in the
Department of Computer Science and Engineer-
ing at Wright State University. His research inter-
ests include privacy-preserving outsourced data
mining, big data, cloud computing, and Internet
of Things.
James Powers is currently a PhD student in
the Department of Computer Science and Engi-
neering at Wright State University. His research
interests include big data and privacy&security.
Keke Chen is an associate professor in the De-
partment of Computer Science and Engineer-
ing and directs the Data Intensive Analysis and
Computing (DIAC) Lab of the Ohio Center of Ex-
cellence in Knowledge-Enabled Computing (the
Kno.e.sis Center) at Wright State University. He
earned his Ph.D. degree in Computer Science
from Georgia Institute of Technology in 2006.
His current research areas include secure data
services and mining of outsourced data, privacy
issues of social computing, cloud computing, In-
ternet of things, healthcare informatics, and big data. During 2006-2008,
he was a senior research scientist at Yahoo! Labs, working on web
search ranking, cross-domain ranking, and web-scale data mining. He
owns three patents for his work in Yahoo! Labs.
1041-4347 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.