The first time you create a JAX array of a given size from a Python data
structure like a list or tuple, the time taken is super-linear in the size of
the array. I profiled array creation and found that compilation of a
concatenate op is the main bottleneck. See image. I've also measured execution
time with and without compilation for various sizes below.
It looks like compilation is super-linear, whereas execution without
compilation is linear as expected.
I haven't tried this on GPU yet so don't know if the issue also exists there.
Plot of timings:  
![Figure_1](https://user-
images.githubusercontent.com/15261883/60090266-1e137600-973a-11e9-9fc5-a82c6d04ec37.png)  
Profile of 10,000 element array creation:  
![Screenshot 2019-04-04 at 09 40 22](https://user-
images.githubusercontent.com/15261883/60089466-70539780-9738-11e9-9815-8eb731a5cfbe.png)  
Code to reproduce the timing plot:
    import jax.numpy as np
    import matplotlib.pyplot as plt
    import time
    sizes = [32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]
    ts = []
    # Including compilation
    for s in sizes:
        t0 = time.time()
        np.array(list(range(s)))
        ts.append(time.time() - t0)
    ts_ = []
    # Excluding compilation
    for s in sizes:
        t0 = time.time()
        np.array(list(range(s)))
        ts_.append(time.time() - t0)
    plt.plot(sizes, ts, label='Incl. compilation')
    plt.plot(sizes, ts_, label='Excl. compilation')
    plt.xlabel('Array size')
    plt.ylable('Time (s)')
    plt.legend()
    plt.show()