# Title: Call Me Back! Attacks on System Server and System Apps in Android through Synchronous Callback

# Authors:
- Kai Wang
- Yuqing Zhang
- Peng Liu

## Abstract
Android, the most widely used mobile operating system, relies heavily on its System Server (SS), a multi-threaded process providing essential system services. This paper identifies a new class of security vulnerabilities stemming from the improper use of synchronous callbacks in these services. We have developed a vulnerability detection tool based on static taint analysis, which we applied to all 80 system services in Android 5.1.0. Our tool discovered six previously unknown vulnerabilities, confirmed across Android versions 2.3.7 to 6.0.1. These vulnerabilities affect approximately 97.3% of the 1.4 billion real-world Android devices, enabling a malicious app to freeze critical system functionalities or soft-reboot the system. We demonstrate that such attacks can be executed at mission-critical moments, such as to counteract antivirus software, prevent process-killing, or hinder app updates and system patching. Google has acknowledged our findings, and we provide recommendations for safer callback usage.

## Keywords
- Mobile Security
- Denial of Service
- Vulnerability Detection
- Synchronous Callback
- Taint Analysis

## 1. Introduction
Android, an operating system for mobile devices based on the Linux kernel, holds a significant market share and is used in various mission-critical applications, including vehicle-mounted systems, point-of-sale (POS) devices, medical devices, and aircraft navigation. To enhance functionality and security, new Android versions are frequently released, increasing the number of system services from around 50 in version 2.3.7 to over 100 in version 6.0.0.

System services are crucial components in Android, packaging low-level functionalities and providing higher-level functions to apps via the Inter-Process Communication (IPC) mechanism, known as Binder. However, these services are vulnerable due to their accessible interfaces, which can be exploited by malicious apps. On Nexus 6 with Android 5.1.0, the SS provides 80 Java-based services and exposes 1,572 interfaces. A single failure in handling a service request can affect the entire SS, potentially crashing the system.

This paper uncovers a general design flaw in the SS caused by improper use of synchronous callbacks. Malicious apps can inject a forged callback handle into the SS, leading to a "call me back" vulnerability. When invoked under specific conditions, these callbacks can cause the system to freeze or soft-reboot. Our study shows that exploiting these vulnerabilities requires only a single IPC call, making them difficult to detect and prevent. We have developed a static taint analysis-based tool to identify these vulnerabilities and confirmed their presence in multiple Android versions. Our contributions include:

- **New Understanding and Discovery**: Identification of a general design flaw in the SS, leading to denial-of-service attacks.
- **Vulnerability Detection Tool**: Development of a tool to detect "call me back" vulnerabilities.
- **Identifying New Vulnerabilities**: Discovery of six previously unknown vulnerabilities affecting 97.3% of 1.4 billion Android devices.
- **Attack Scenarios**: Demonstration of attack scenarios, including anti-antivirus, anti-process-killer, and hindering app updates.
- **Defenses**: Recommendations for detecting and patching vulnerabilities, and suggestions for safer callback usage.

## 2. Background and Vulnerability Overview

### 2.1 Android System Server

#### 2.1.1 Binder Mechanism and Service Interfaces
Android uses the Binder mechanism for IPC between app processes and the SS. The SS provides system services, each exposing several interfaces for client apps. A service interface is typically a Java method inside the SS. Apps invoke these interfaces through wrapper code, which conducts IPC with the target service. Each system service has a unique name and interface descriptor, which are used to query the Service Manager and get a proxy class instance for the service.

#### 2.1.2 Threads in the System Server
When a service request arrives, the Binder driver starts a new "primary" thread in the SS context to handle it. Some service interfaces also use "assistant" threads for time-consuming, return-value-unrelated operations. Primary threads package uncaught exceptions into IPC reply data, while assistant threads cannot, leading to potential system crashes if an exception occurs.

#### 2.1.3 Callback Mechanism in the System Server
Some system service interfaces receive a callback handle as a parameter, allowing more flexible transmission of handling results. The callback handle is an object of the service's proxy class, transformed into a concrete class when received by the SS. For example, `android.app.IInstrumentationWatcher` is a callback handle used in the SS.

By understanding and addressing these vulnerabilities, we aim to improve the security and reliability of the Android system.