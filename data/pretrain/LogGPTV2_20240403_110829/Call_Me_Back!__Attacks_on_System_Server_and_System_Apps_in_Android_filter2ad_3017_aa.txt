title:Call Me Back!: Attacks on System Server and System Apps in Android
through Synchronous Callback
author:Kai Wang and
Yuqing Zhang and
Peng Liu
Call Me Back! Attacks on System Server and System Apps
in Android through Synchronous Callback
Kai Wang, Yuqing Zhang(cid:3)
National Computer Network Intrusion
Protection Center
University of Chinese Academy of Sciences
{wangk, zhangyq}@nipc.org.cn
Peng Liu
College of Information Sciences and Technology
The Pennsylvania State University
PI:EMAIL
ABSTRACT
Android is the most commonly used mobile device opera-
tion system. The core of Android, the System Server (SS),
is a multi-threaded process that provides most of the system
services. Based on a new understanding of the security risks
introduced by the callback mechanism in system services,
we have discovered a general type of design ﬂaw. A vulner-
ability detection tool has been designed and implemented
based on static taint analysis.We applied the tool on all the
80 system services in the SS of Android 5.1.0. With its help,
we have discovered six previously unknown vulnerabilities,
which are further conﬁrmed on Android 2.3.7-6.0.1. Accord-
ing to our analysis, about 97.3% of the entire 1.4 billion real-
world Android devices are vulnerable. Our proof-of-concept
attack proves that the vulnerabilities can enable a malicious
app to freeze critical system functionalities or soft-reboot the
system immediately. It is a neat type of denial-of-service at-
tack. We also proved that the attacks can be conducted at
mission critical moments to achieve meaningful goals, such
as anti anti-virus, anti process-killer, hindering app updates
or system patching. After being informed, Google conﬁrmed
our ﬁndings promptly. Several suggestions on how to use
callbacks safely are also proposed to Google.
Keywords
Mobile Security; Denial of Service; Vulnerability Detection;
Synchronous Callback; Taint Analysis
1.
INTRODUCTION
Android is an operating system for mobile devices, which
is based on the Linux kernel.
It occupies a large market
share [7, 24] and is used in various mission critical tasks, such
as vehicle-mounted systems [3], POS devices [5, 6], medical
devices [1, 2, 4] and aircraft navigation [22, 28]. In order
to make systems more powerful and secure, new versions of
Android are released at a fast pace. One important but often
(cid:3)
Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c⃝ 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978342
unnoticed result of the system updates is that the number
of system services has increased in every new version from
about 50 in v2.3.7 to more than 100 in v6.0.01.
The number of system services is continually increased
because Android needs to: 1) support emerging hardware,
such as Near Field Communication (NFC) and ﬁngerprint
scanning; and 2) support new functions, such as dynamic
permission authorization.
It is clear that system services
are critical function components in Android. They package
the low level functionalities and provide essential higher lev-
el functions to apps through the Inter-Process Communica-
tion (IPC) mechanism in Android, named Binder. However,
system services are very fragile since they provide easily ac-
cessible interfaces to third-party apps, including malicious
apps. On Nexus 6 with Android 5.1.0, the System Server
(SS) provides 80 Java-based services and exposes as many
as 1572 interfaces. In this sense, if one failure situation oc-
curs during the handling of one service request, the whole
process may be aﬀected. Since the SS is in fact the Android
Application Framework, such failure situations can disable
some core functionalities or even crash the entire system,
which is clearly a single point of failure for Android system.
This paper uncovers a general type of design ﬂaw in the
SS which is caused by improper use of synchronous callback.
The callback handle is received from a client process (i.e.,
an app). It is used to ﬂexibly inform the client app about
the handling result of a service request. A malicious ap-
p can forge a callback handle and inject it to the SS. We
found that, if a synchronous callback is invoked under spe-
ciﬁc conditions inside the SS or inside a cooperator system
app, vulnerability would occur. This new family of vulner-
ability is named as the “call me back” vulnerabilities.
Using a synchronous callback to “communicate” with un-
trusted apps without anticipating the worst-case situations
is indeed a design ﬂaw from the security viewpoint. In this
work, we have uncovered most if not all of these worst-case
situations. According to our study, in order to exploit a
“call me back” vulnerability, a malicious app only needs to
issue a single IPC call to the SS. The IPC sends a set of
parameters to a particular service interface in the SS. For a
vulnerable service interface, one of the parameters is a syn-
chronous callback method handle. The hazard situations of
the vulnerabilities are varied because the callbacks could be
invoked in diﬀerent contexts of the SS, or could alternative-
ly be invoked in the context of system apps, which are the
cooperators of the SS. When invoked, the malicious callback
1Summarized based on the Genymotion emulator, whose
source code is identical to Android Open Source Project.
92method can leverage two measures to conduct an attack: 1)
prevent the callback method from returning, or 2) throw an
exception. The attacks will result in the “freeze” of system
functionalities or even the soft-reboot of the system.
According to our analysis, the attacks on the “call me
back” vulnerabilities are diﬃcult to detect and prevent. We
believe the best defense method is to identify and patch the
vulnerabilities as quickly as possible. However, there are
several unique challenges: 1) callback handles can be inject-
ed not only as an IPC call parameter, but also as an inner
ﬁeld of a parameter object; 2) a callback handle can stay
dormant inside the SS context for a long period of time be-
fore its invocation is triggered by some “not suspicious at
all” SS operations; 3) a malicious app could try any partic-
ular combination of the IPC call parameter values; 4) any
system service and any system app could be vulnerable.
We have designed and implemented a vulnerability de-
tection tool which is based on static taint analysis. Our
tool can successfully address these challenges. We applied
it on all the 80 system service in the SS of Android 5.1.0
and successfully identiﬁed 6 vulnerabilities. The vulnerabil-
ities are further conﬁrmed on Android 2.3.7-6.0.1. It means
that about 97.3% [8] of the entire 1.4 billion real-world An-
droid devices [9] are vulnerable. The attacks prove that the
vulnerabilities can enable a malicious app to freeze critical
system functionalities or soft-reboot the system immediate-
ly. We also proved that our attacks can be conducted at
mission critical moments to achieve very meaningful goals.
Our contributions are summarized as follows:
(cid:15) New Understanding and Discovery. Based on new un-
derstanding of the security risks introduced by the callback
mechanism in system services, we have discovered a general
type of design ﬂaw which makes the Android system vulner-
able to denial-of-service attacks.
(cid:15) Designing a New Vulnerability Detection Tool. We have
designed and implemented a vulnerability detection tool based
on static taint analysis, which is the ﬁrst work on detecting
the “call me back” vulnerabilities in the SS.
(cid:15) Identifying New Vulnerabilities. Our tool successfully an-
alyzed 1,591 service interfaces of all the 80 system services in
Android 5.1.0. We have discovered six previously unknown
vulnerabilities which can aﬀect about 97.3% of the entire 1.4
billion real-world Android devices.
(cid:15) Attack. We have implemented several attack scenarios
to show that attacks can be conducted at mission critical
moments to achieve meaningful goals, such as anti anti-virus,
anti process-killer, hinder app updates or system patching.
(cid:15) Defenses. We proved it is hard to distinguish the attack
from benign service requests. The best way is to detect and
patch the vulnerabilities promptly. We also proposed several
suggestions about how to use callbacks more safely.
2. BACKGROUND AND VULNERABILITY
OVERVIEW
2.1 Android System Server
At runtime, the SS is a process. Every app is also a pro-
cess. If an app wants to request a service from the SS, it
will need to conduct IPC with the SS.
2.1.1 Binder Mechanism and Service Interfaces
Android introduces a new mechanism of IPC, namely Binder,
into the kernel. Binder supports communication between an
app process and the SS process following the Client-Server
model. The SS leverages Binder to provide system services,
which exposes several interfaces for the client apps.A service
interface is typically a Java method inside the SS. In most
cases, when an app invokes an Android API, it is actually
invoking some wrapper code to conduct IPC with the target
system service interface. For example, when an app invokes
the LocationManager.requestLocationUpdates() API to
register a listener for location updates, it is calling the wrap-
per code to send a service request to the interface request-
LocationUpdates() in the system service named location.
Every system service has its own service name and inter-
face descriptor. Using the service name, an app can query
the Service Manager to get an instance of the system ser-
vice’s proxy class, which will work as the handle of the sys-
tem service. The interface descriptor is an identiﬁcation of
service interfaces. When the app sends a request to a target
service interface, it will specially declare the interface de-
scriptor of the service in the transmitted data of IPC. And
when the service receives the request, it will ﬁrstly compare
the transmitted interface descriptor with its own interface
descriptor. Only if the descriptors match will the request be
handled by the SS.
Usually, the interface descriptor of a service is also the
name of the interface-deﬁnition class for Java-based system
services. This class contains an inner class named Stub and
Stub also contains an inner class named Proxy. The ser-
vice should extend Stub and implement the deﬁned service
interfaces. When a request arrives at the service, the im-
plemented service interfaces will be invoked. For a client
app, the handle of a service is just an object of respective
Stub.Proxy class. Stub.Proxy implements the service inter-
faces by packaging the IPC call parameters in the transmit-
ted data, sending the service request to the corresponding
server, parsing the reply from the server and returning it to
the client app.
2.1.2 Threads in the System Server
When a service request arrives at the SS, the Binder driver
will start a new thread in the context of the SS to handle it.
We call this kind of thread a “primary” thread. A number
of system service interfaces will handle the requests with
the help of an “assistant” thread to complete some time-
consuming and return-value-unrelated operations. Hence,
there are two kinds of thread in the server process, namely
the primary threads and the assistant threads. One impor-
tant diﬀerence between them is the way in which uncaught
exceptions are handled.
In a primary thread, uncaught exceptions will be packaged
into the reply data of the IPC. It can eﬀectively protect the
server because all the uncaught exceptions will be caught
and handled. By default, when a client app receives the
reply, it will automatically invoke reply.readException()
to cause the remote exception, if exists, to be re-thrown in
the context of the client app.
An assistant thread cannot re-throw the uncaught excep-
tion to the client app because it has no ability or opportu-
nity to package the exceptions into the reply data of IPC.
Actually, the uncaught exception will ﬁnally arrive at the
handling code in ART/Dalvik, which maintains the VM in-
stance for the SS. In order to recover from the bad inﬂuence
of the uncaught exception, ART/Dalvik will kill the SS and
soft-reboot the system.
932.1.3 Callback Mechanism in the System Server
Some system service interfaces receive a callback handle
as one parameter. Using a callback handle, the handling
result can be transmitted to the client app more ﬂexibly. In
this situation, the handling result could not only be returned
by the normal reply of IPC, but also be transmitted using
the received callback handle.
It is a more ﬂexible way to
produce the result notiﬁcation.
A callback handle is actually an object of a service’s proxy
class. It is a handle of a service component in an app that is
waiting for the notiﬁcation of the handling result from the
SS. It will work as a callback method handle in the context
of the SS. When it arrives at the SS through IPC, it is an
object of android.os.IBinder class, which is the mutual an-
cestor class of any service’s proxy class. When the callback
handle is received, the SS needs to transform it into concrete
class. Taking the android.app.IInstrumentationWatcher