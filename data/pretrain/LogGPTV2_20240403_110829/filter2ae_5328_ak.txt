    verifySignature:142, BaseSignatureTrustEngine (org.opensaml.xml.signature.impl)
    validate:100, BaseSignatureTrustEngine (org.opensaml.xml.signature.impl)
    validate:100, ExplicitKeySignatureTrustEngine (org.opensaml.xml.signature.impl)
    validate:49, ExplicitKeySignatureTrustEngine (org.opensaml.xml.signature.impl)
    evaluate:104, BaseTrustEngineRule (org.opensaml.ws.security.provider)
    evaluate:91, BaseTrustEngineRule (org.opensaml.ws.security.provider)
    doEvaluate:128, SAMLProtocolMessageXMLSignatureSecurityPolicyRule (org.opensaml.common.binding.security)
    evaluate:107, SAMLProtocolMessageXMLSignatureSecurityPolicyRule (org.opensaml.common.binding.security)
    evaluate:51, BasicSecurityPolicy (org.opensaml.ws.security.provider)
    processSecurityPolicy:132, BaseMessageDecoder (org.opensaml.ws.message.decoder)
    decode:83, BaseMessageDecoder (org.opensaml.ws.message.decoder)
    decode:70, BaseSAML2MessageDecoder (org.opensaml.saml2.binding.decoding)
    retrieveMessage:105, SAMLProcessorImpl (org.springframework.security.saml.processor)
    retrieveMessage:172, SAMLProcessorImpl (org.springframework.security.saml.processor)
    attemptAuthentication:85, SAMLProcessingFilter (org.springframework.security.saml)
    doFilter:223, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
    doFilter:213, AbstractAuthenticationProcessingFilter
从证书中提取public key，用public
key对SignatureValue解密，解密值是Signedinfo的摘要，对Signedinfo重新摘要，和解密的摘要值进行对比。接着还会对比DigestValue摘要值，这个值是Response中除了Response子标签Signature的摘要，这里的处理是重新计算这部分的摘要，然后和DigestValue进行对比:
当然过程中还存在其他校验，例如status的校验等。
后面还会对Assertion进行校验:
    processAuthenticationResponse:301, WebSSOProfileConsumerImpl (org.springframework.security.saml.websso)
    authenticate:88, SAMLAuthenticationProvider (org.springframework.security.saml)
    authenticate:182, ProviderManager (org.springframework.security.authentication)
    attemptAuthentication:92, SAMLProcessingFilter (org.springframework.security.saml)
    doFilter:223, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
    doFilter:213, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
校验方式和Response中的校验一致，证书用的本地配置的而不是从Assertion中提取，校验了Assertion中的Sianature、摘要信息，还校验了Conditions是否过期，Subject中的接收者是否是预期的接收端点等校验，这一系列校验之后，就成功返回一个Credential，里面包含了用户的一些信息。
### SAML校验过程中存在的安全隐患
对于签名问题，在[Bypassing SAML 2.0 SSO with XML Signature
Attacks](https://research.aurainfosec.io/bypassing-saml20-SSO/)这篇文章中提到的几个问题感觉很好的说明了SAML可能存在的安全隐患:
  * 签名是否是必须的？可能一些SAML的实现从请求中判断是否携带了Signature，携带了就校验，没携带就不校验；或者设置一个签名校验开关让开发者进行处理，而开发者可能并不熟悉没有打开强制验证等情况
  * 签名是否经过验证？虽然生成AuthnRequest和Response都进行了签名，但是各自收到SAML消息时没有进行签名验证的情况
  * 签名是否来自正确的签名者？X509Certificate包含签名者信息，如果没有校验是否是信任的证书，那么可以伪造证书，然后对SAML消息进行篡改，重新签名
  * 是否对响应中正确的部分进行签名？SAML标准允许的签名存在的位置仅有两处:Response、Assertion，没有人仅仅为了使用SAML，就完整地实现复杂的XML签名机制。这一标准是通用的，标准的实现及其软件库也是如此。所以如果某些库如果验证签名没有验证到正确的位置，就可以将签名引用到文档的不同位置，并且让接受者认为签名是有效的，造成XSW攻击
Burp中有一个SAML Raider插件，可以很方便的进行修改和伪造SAML攻击，不过有时候也需要手动构造，所以理解SAML的处理流程也是有必要的。
在《Hacking the Cloud With SAML》中提到一个新的攻击面，就是SignedInfo的校验和摘要校验的先后顺序问题，从上面
**SP收到AuthnResponse的处理**
一节可以看到，摘要校验是会先经过transform处理的，而摘要的计算不包括Signature标签内容，所以如果先进行了摘要校验，那么transforms下的操作空间就不受限制，可以任意设置transform，这个ppt中也提到了两个CVE(CVE-2022-34716、CVE-2022-34169)，是transform进行攻击很好的例子。
#### Demo项目中存在的问题
Demo中使用的OpenSAML是比较新，经过测试，SP收到AuthnResponse的处理是没有上面的问题的，他的校验顺序如下:
  * 使用本地信任的证书
  * 校验SignedInfo
  * 校验摘要
所以Response的校验没有问题。
但是IDP收到AuthnRequest的处理只校验了Instant是否过期，不过因为没有处理签名和摘要的流程，所以不存在其他攻击的可能。不过IDP是从AuthnRequest拿的AssertionConsumerServiceURL，没有校验是否是预期的，所以后面将Reponse发送回去时，会导致一个SSRF问题，这一块的处理应该是开发人员来做的，不是库的问题。
## 最后
由于用的是比较新版的OpenSAML进行调试，在调试过程中可以发现一些修复痕迹，例如对XSW、ds:Object元素攻击的修复等。之前看到SAML或者SAML的漏洞报告就头大，因为里面涉及到了签名和摘要，而且还是对XML签名和摘要，是像字符串那样摘要和签名吗，不是的话又是如何签名XML，如何摘要XML，如何校验XML，我要攻击怎么篡改伪造，需要改哪些数据，怎么重新计算签名和摘要等，现在调试了一遍算是很清晰了。
## 参考
* * *