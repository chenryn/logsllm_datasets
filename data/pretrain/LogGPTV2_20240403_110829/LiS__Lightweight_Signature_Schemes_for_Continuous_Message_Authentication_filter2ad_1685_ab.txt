CHF(m, r) = CHF(m′, r′)
OUTPUT 1
ELSE OUTPUT 0
Figure 1: Procedures used to define security for CH.
Definition 2.2. We denote with AdvCHA,CHF(κ) := Pr[GCHA,CHF(κ) =
1] the advantage of a PPT adversary A in breaking the security of
the chameleon hash function CHF under the security parameter
κ. We say CHF is secure if no PPT adversary has non-negligible
advantage AdvCHA,CHF(κ).
The security of chameleon hash functions can be based on stan-
dard computational hardness assumptions like the discrete loga-
rithm assumption or the factoring assumption.
2.3 Digital Signature Schemes
We define a digital signature scheme SIG with three probabilistic
polynomial time (PPT) algorithms (KGen, Sign, Verify). We assume
that a signature scheme is associated with public and secret key
spaces {PKSIG,SKSIG}, message space MSIG, and signature space
SSIG in the security parameter κ. We denote the bit-length of the
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan721space Rs by ℓs which is determined by κ. The algorithms of SIG
are defined as follows:
• KGen(1κ , ℓ, aux): This algorithm takes as input the security
parameter 1κ, the maximum number ℓ of signature that SIG
can generate, and an auxiliary input aux, and generates the
secret key sk and the verification key vk.
• Sign(sk, m): This is the signing algorithm that generates a
signature σ ∈ SSIG for a message m ∈ MSIG with the signing
key sk.
• Verify(vk, m, σ): This is the verification algorithm that takes
as input a verification key vk, a message m and a signature
σ, outputs 1 if σ is a valid signature for m under vk, and 0
otherwise.
Here we consider both weak and adaptive chosen message at-
tacks against SIG. The resilience of weak chosen message attacks is
enough for specific applications that the signer may have reliable
message sources (for most of running time), e.g., sensors deployed
in an isolated environment, or the satellites that send GPS signals.
Besides, the weaker security notion allows us to achieve high perfor-
mance which is crucial for the resource-constrained devices in CPS.
Whereas, the adaptive security is needed in a more complicated
environment with sophisticated adversaries.
We define a security game GSIGA,S(κ, ℓ) that is played between
an adversary A and a challenger based on a signature scheme
S, the security parameter κ, and the number ℓ that bounds the
signatures that the adversary can obtain. In the security game,
A may ask the procedures defined in Figure 2. Concretely, the
adversary A proceeds with the game by sequentially calling the
procedures Proc.Init, Proc.SQuery and Proc.Finalize. We stress that
we can obtain the adaptive security game by removing those boxed
steps or elements. Namely, the security notions that we defined are
also known as strongly existential unforgeable against weak chosen
message attacks (SEUF-wCMA) and strongly existential unforgeable
against adaptive chosen message attacks (SEUF-CMA), respectively.
Proc.Init( M ) :
(sk, vk) $← S.KGen(1κ, ℓ, M ):
cnt := 0
OUTPUT vk
Proc.SQuery(m) :
IF m (cid:60) M
Proc.Finalize(m∗, σ ∗) :
If S.Verify(vk, m∗, σ ∗) = 1
∧ (m∗, σ ∗) (cid:60) QD
ELSE OUTPUT 0
OUTPUT 1
$← MSIG
m′
m:=m’
IF cnt ≥ ℓ OUTPUT⊥
σ := S.Sign(skidC, m)
cnt := cnt + 1
APPEND (m, σ) → QD
OUTPUT(m, σ)
Figure 2: Procedures used to define security for SIG.
(cid:12)(cid:12)(cid:12)Pr[GSIGA,S(κ, ℓ) = 1] − 1
2
(cid:12)(cid:12)(cid:12) be
Definition 2.3. Let AdvSIGA,S(κ, ℓ) :=
the advantage of a PPT adversary A in breaking the security of a sig-
nature scheme S under the security parameter κ. We say S is secure
if no PPT adversary has non-negligible advantage AdvSIGA,S(κ, ℓ).
2.4 Bloom filter
Bloom filter [16] is a probabilistic data structure that provides space-
efficient storage of a set and that can efficiently test whether an
element is a member of the set. The probabilistic property of BF may
lead to false positive matches, but not false negatives. The more
elements are in the BF, the higher chance to get a false positive
match insertion. To reduce its false positive rate, we follow the
approach of [18], i.e., a BF with 1.44ϵN bits for a set with size N
has a false positive rate (FPR) of 2−ϵ .
initiates the Bloom filter of bit length 1.44ϵN .
We review the algorithms of a Bloom filter as follows:
• Init(N , ϵ): On input, a set size N , the initialization algorithm
• Insert(m): Element insertion algorithm takes an element m
• Check(m): Element check algorithm returns 1 if an element
m is in BF, and 0 otherwise.
• Pos(m): Position update algorithm computes positions to be
as input, and inserts m into BF.
changed for element m in BF.
3 LIS: LIGHTWEIGHT SIGNATURE SCHEMES
FROM CHAMELEON HASH
In this section, we propose a family of lightweight signature schemes
called as LiS = (LiS1, LiS2) from chameleon hash functions, Bloom
filters, and universal hash functions.
Figure 3: Overview of LiS. KGC stands for key generation center.
Design Rational. The system overview of LiS is shown in Figure
3. Our primary design goal is to enable the resource-constrained
signer device to authenticate its message in an extremely cheap
way, and the scheme should be resilient to verifier breaches. To
this end, we leverage on a chameleon hash function CHF and a pre-
computation strategy. In a naïve solution, one can simply compute
a verify point t = CHF(m′, r′) based on a dummy message m′ and
a randomness r′, and send the t to the verifier for verification. To
authenticate a message m online, the signer can compute a collision
x := CHColl(r′, m′, m) as the signature for m. The signer can repeat
the above procedure polynomial times to sign multiple messages.
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan722However, the above naïve solution is insecure since an adversary
can recover the secret key skCH of the chameleon hash function
given a pair of collided information (two signature/message pairs in
the above example). To fix the problem of the above naïve solution,
we should only use each pre-computed verify point t once. There-
fore, in our solution, we pre-compute verify points of a polynomial
number ℓ based on a set of dummy random values {r′
i }i∈[ℓ] and
a single dummy message M, such that ti := CHF(M, r′
i). To avoid
store these randomnesses at the signer, we generate them using a
universal hash function UHF, such that r′
:= UHF(k, r′
i−1), where
i
k is the hash key of UHF. So that the signer only needs to store
the keys skCH, M, r′
0, and k. For online message authentication, the
signer only needs to recover the corresponding dummy random
values and compute the collisions, which is very efficient, i.e., only
two multiplication and three additions are required, according to
our instantiation and optimization in Section 5. The verification
key comprising {ti} might be costly. To reduce the storage cost of
the verifier, one could use a Bloom filter to compress these verify
points ti. This would save over 100x of storage costs. Notice that
the verification key stored at the verifier can be public so it can
resist a verifier breach.
Based on the above idea, we designed two signature schemes
LiS1 and LiS2, respectively. LiS1 is weakly secure and suitable for
small messages with a few hundred bits (determined by MCH) but
is the most efficient one. The second protocol LiS2 can provide
adaptive security, but one more cryptographic hash function is
required.
3.1 Weakly Secure Signature Scheme LiS1
Description of LiS1. This scheme relies on a universal hash func-
tion UHF, a chameleon hash function CHF, and a Bloom filter BF,
which are defined in Section 2. The algorithms of the proposed
scheme LiS1 are shown in Figure 4. Basically, LiS1 consists of three
functions which are briefly illustrated as follows:
• Initialization: A signer idC first runs the key generation al-
gorithm of the chameleon hash function (skCH, pkCH)
$←
CHKGen(1κ) to generate a pair of secret/public key, and sam-
$← KUH for the universal hash function
ples a random key k
$← MCH, and an initial random
UHF, a random message M
value r′
0. Through the parameter aux, idC should be able to
parse the ‘false positive parameter’ ϵ of the Bloom filter from
it. A Bloom filter instance BF is initialized by BF.Init(ℓ, ϵ).
For i ∈ [ℓ], idC generates ℓ dummy random values such that
r′
i) for
i
future use. Meanwhile, idC inserts those verify points into
the Bloom filter BF.Insert(ti).1 A random variable r′ := r′
1
which is used for generating the next signature. Note that
if any r′
= r′
for i (cid:44) j then idC re-run the key generation
i
j
algorithm. Eventually, the secret key and the verification key
:= (skCH, k, r′, M) and vkidC
:= (BF, pkCH).
of idC are skidC
:= (BF, pkCH) will be sent to po-
The verification key vkidC
tential verifier(s), and the secret key skidC
will be stored pri-
vately by the signer idC. To authenticate the first verification
1Notice that, even if false positives happen in the initialization phase, they would not
affect the correctness and security of our signature schemes.
i−1), and the verify points ti := CHF(M, r′
:= UHF(k, r′
key, the signer can either transmit it to the designated veri-
fier via a secure channel (that is isolated from adversaries)
or ask a trustworthy third party to sign it digitally.
• Signing: Upon obtaining a message m that requires authen-
:=
tication, idC first retrieves the stored secret key skidC
(skCH, k, r′, M). Thanks to the trapdoor collisions property
of CHF, idC can compute the signature x for m as x :=
CHColl(skCH, r′, M, m). Then, idC can send m together with
the signature x to the verifier. After this , idC updates the
dummy randomness r′ to the next one as r′ := UHF(k, r′).
In fact, the update of the dummy randomness can be done at
any time before the next message authentication is carried
out, so its performance overhead can possibly be hidden in
the background.
• Verification: Upon receiving a message m and its signature x
from the signer idC, the verifier idS verifies it by checking
that whether the resultant hash value t = CHF(m, x) is in
the Bloom filter, i.e., BF.Check(t).
Correctness. Since the Bloom filter does not have any false nega-
tive, for every x := LiS1.Sign(skidC , m), it must have that
BF.Check(CHF(m, x)) = 1 since CHF(m, x) = CHF(m′
i , ti) which
is inserted into BF during initialization.
Remark 1. To obtain better online efficiency, the signer could com-
pute the universal hash operations offline (or during its idle time). Of
course, the signer can also pre-compute and cache many such uni-
versal hash values as online/offline signature schemes [11, 12]. Then
the signer only needs to run CHColl in the online signing phase, and
therefore the signing algorithm could be approximately 2x faster.
3.2 Adaptively Secure Signature Scheme LiS2
In this subsection, we introduce a signature scheme LiS2 that can
resist adaptively chosen message attacks. LiS2 is basically derived
from LiS1 by using an additional cryptographic hash function h1 :
{0, 1}∗ → MCH which will be modeled as a random oracle. Hence
LiS2 can be used to authenticate a message with an arbitrary size,
unlike LiS1, which is constrained by the size of MCH. We let RCH =
{0, 1}ℓr be the randomness used in this construction. Besides, the
universal hash function is replaced with another hash function
h2 : {0, 1}∗ → RCH.2
Here we prefer to use an OAEP alike approach [19] for achiev-
ing adaptive security (i.e., binding a randomness to each message
using h) so that it can have an optimal signing efficiency. Although
there might be an alternative generic transformation from a weakly
secure signature to an adaptively secure signature such as [20], it
is less computationally efficient than ours.
Description of LiS2. The algorithms of the proposed scheme LiS2
are shown in Figure 5. LiS2 consists of three functions which are
briefly illustrated as follows:
• Initialization: The signer idC first runs the key generation
algorithm of the chameleon hash function (skCH, pkCH) $←
CHKGen(1κ) to generate a pair of secret/public key, and
$←
samples a random key k
2One of the reasons for using h2 is that it could help a party (e.g., verifier shown in
Figure 7) to quickly compute the non-sequentially generated randomness.
$← RCH , a random message M
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan723LiS1.Sign(skidC , m):
x := CHColl(skCH, r′, M, m)
r′ := UHF(k, r′)
Return x
LiS1.Verify(vkidC , m, x):
vr := 0
t := CHF(m, x)
vr := BF.Check(t)
Return vr
LiS1.KGen(1κ , ℓ, aux):
(skCH, pkCH) $← CHKGen(1κ)
$← KUH; ϵ ← aux
k
BF.Init(ℓ, ϵ)
$← MCH; r′
$← RUH
M
0
For i ∈ [ℓ]:
:= UHF(k, r′
r′
i−1)
ti := CHF(M, r′
i
i)
BF.Insert(ti)
r′ := r′
1; skidC
:= (BF, pkCH)
vkidC
Return (skidC , vkidC)
:= (skCH, k, r′, M)
Figure 4: Algorithms of LiS1.
:= CHF(M, r′
:= h2(k||i), and the verify points ti
MCH. idC would additionally initializes two cryptographic
hash functions h1 : {0, 1}∗ → MCH and h2 : {0, 1}∗ → RCH.
A Bloom filter instance BF is initialized by BF.Init(ℓ, ϵ). For
i ∈ [ℓ], idC generates ℓ dummy random values such that
r′
i) for
i
the future use. Meanwhile, idC inserts those verify points
into the Bloom filter BF.Insert(ti). idC initializes a counter
cnt = 0 to count the number of generated signatures. As
a final outcome of the procedure, the secret key and the
:= (skCH, k, M, cnt)
public verification key of idC are skidC
and vkidC
• Signing: To authenticate a message m, idC first samples a
$← R2, and computes y := h(m||N) and
random value N
r′
:= h(k||cnt). After this, it updates the counter cnt =
cnt
cnt + 1. Then the signer idC generates the signature x for y
as x := CHColl(skCH, r′
i , M, y), and sends the tuple (m, N , x)
to the verifier.
• Verification: Upon receiving (m, N , x), the verifier idS verifies
it by checking that whether the resultant hash value t =
CHF(h1(m||N), x) is in the Bloom filter.
:= (BF, pkCH).
Correctness. The correctness of LiS2 is implied by LiS1. The newly
added random value N and the hash operations do not change the
authentication property.
4 SECURITY ANALYSIS
In this section, we present the security results of our proposed
schemes with formal proofs in the standard model.
4.1 Security Analysis of LiS1
Theorem 4.1. We assume the chameleon hash function CHF and
the universal hash function UHF are secure as defined in Section 2.
Then LiS1 with given parameters κ and ℓ is secure against selective
chosen message attacks with advantage
AdvSIGA,LiS1(κ, ℓ) ≤ AdvCHA,CHF(κ) + 2−ϵ
.
The full proof of Theorem 4.1 is presented in Appendix B. In