#### 修改
**复制**
```bash
cp  			# 复制
	cp -r  	# 带目录复制
```
**移动**
```bash
mv  			# 对文件或目录重命名,或移动
```
**编辑**
```bash
vi 									# 编辑器
nano								# 编辑器
gedit								# 图形化的编辑器
```
**Vim**
- **常用操作**
	```bash
	Normal 模式下 i 进入 insert 模式
	:wq 					# 存盘+退出
	dd  					# 删除当前行,并存入剪切板
	p   					# 粘贴
	:q! 					# 强制退出
	:wq!					# 强制保存退出
	:w !sudo tee %  		# 无 root 权限,保存编辑的文件
	:saveas   # 另存为
	按下 / 即可进入查找模式,输入要查找的字符串并按下回车. Vim 会跳转到第一个匹配.按下 n 查找下一个,按下 N 查找上一个.
	:%s/foo/bar 			# 代表替换 foo 为 bar
	insert 模式按 ESC 键,返回 Normal 模式
	vim -r xxx.swp			# 恢复上次异常退出的文件
	```
- **更多操作**
	- [Vim](./Power-Linux.md#Vim)
**objcopy**
objcopy 用于将 object 的部分或全部内容拷贝到另一个 object，从而可以实现格式的变换。
objcopy 可用用于将文件转换成 S-record 格式或者 raw 二进制格式。
```bash
objcopy -O srec main main.srec								# 将文件转换成 S-record 格式
objcopy -O binary main main.bin    							# 将文件转换成 rawbinary 格式
objcopy -I binary -O binary --reverse-bytes=4 1.out 2.out	# 转换为小端序
```
**tr**
tr 命令将文件转换为全大写
```bash
cat employee.txt
100 Jason Smith
200 John Doe
300 Sanjay Gupta
400 Ashok Sharma
tr a-z A-Z  
		e.g. : diff -w name_list.txt name_list_new.txt
	# 对比两个文件夹
	diff -r  
	```
- vimdiff
	```bash
	vimdiff  
	```
- comm
	```bash
	comm [options] ... FILE1 FILE2
	# e.g.
	comm -12 1.txt 2.txt	# 查看两个文件共有的部分
	comm -23 1.txt 2.txt	# 仅查看 file1 中有,file2 中没有的行
	comm -13 1.txt 2.txt	# 仅查看 file2 中有,file1 中没有的行
	```
#### 链接
**inode**
inode 是指在许多“类 Unix 文件系统”中的一种数据结构。每个 inode 保存了文件系统中的一个文件系统对象（包括文件、目录、设备文件、socket、管道, 等等）的元信息数据，但不包括数据内容或者文件名。
文件系统中每个“文件系统对象”对应一个“inode”数据，并用一个整数值来辨识。这个整数常被称为 inode 号码（“i-number”或“inode number”）。由于文件系统的 inode 表的存储位置、总条目数量都是固定的，因此可以用 inode 号码去索引查找 inode 表。
简而言之
- inode 存储的是文件的元数据
- inode 是文件在磁盘上的索引编号
- inode 是文件的唯一标示符(主键), 而非文件名
Linux 系统中，显示文件的 inode 使用 `ls -i`，使用 `df -i` 可以显示当前挂载列表中 inode 使用情况
**软链接**
符号链接文件保存着源文件所在的绝对路径，在读取时会定位到源文件上，可以理解为 Windows 的快捷方式。
软连接是一类特殊的文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用。 符号链接最早在 4.2BSD 版本中出现（1983年）。今天 POSIX 操作系统标准、大多数类 Unix 系统、Windows Vista、Windows 7 都支持符号链接。Windows 2000 与 Windows XP 在某种程度上也支持符号链接。
符号链接的操作是透明的：对符号链接文件进行读写的程序会表现得直接对目标文件进行操作。某些需要特别处理符号链接的程序（如备份程序）可能会识别并直接对其进行操作。
一个符号链接文件仅包含有一个文本字符串，其被操作系统解释为一条指向另一个文件或者目录的路径。它是一个独立文件，其存在并不依赖于目标文件。如果删除一个符号链接，它指向的目标文件不受影响。如果目标文件被移动、重命名或者删除，任何指向它的符号链接仍然存在，但是它们将会指向一个不复存在的文件。这种情况被有时被称为被遗弃。
在 Linux 中，创建软连接的方法是使用 `ln -s`
```bash
ln -s /etc/bashrc /tmp/bashrc
```
查看软连接的指向可以用 `ls -l`
删除软连接就如同删除普通文件一样，使用 `rm symlink` 即可。
- 报错 : Too many levels of symbolic links
	- 在使用 ln -s 命令时，使用绝对路径取代相对路径
**硬链接**
它和普通文件类似，实体链接文件的 inode 都指向源文件所在的 block 上，也就是说读取文件直接从源文件的 block 上读取。
指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。
删除任意一个条目，文件还是存在，只要引用数量不为 0。
在 Linux 中，创建硬链接的方法是 ln:
```bash
ln file1 file2
```
创建硬链接之后，源文件和目标文件将拥有完全相同的 inode 编号，权限，内容等。
硬链接的几个限制:
- 硬链接创建时要求源文件必须存在
- 不允许给目录创建硬链接(注意是不能通过 ln 的方式)
- 只有在同一文件系统才能创建硬链接
#### 压缩备份
- .tar
	```bash
	# 注:tar 是打包,不是压缩!
	tar -xvf FileName.tar						# 解包
	tar -cvf FileName.tar DirName				# 打包
	tar -tvf FileName.tar.gz					# 不解压查看内容
	tar -xvf FileName.tar.gz a.txt  			# 解压指定内容
	tar -uvf test.tar.bz2 test					# 更新一个内容
	tar -rvf test.tar.bz2 test2 				# 追加一个内容
	```
- .tar.gz 和 .tgz
	```bash
	tar -zxvf FileName.tar.gz					# 解压
	tar -zcvf FileName.tar.gz DirName			# 压缩
	```
- .tar.xz
	```bash
	tar -xvJf FileName.tar.xz					# 解压
	```
- .tar.Z
	```bash
	tar -Zxvf FileName.tar.Z					# 解压
	tar -Zcvf FileName.tar.Z DirName			# 压缩
	```
- .tar.bz
	```bash
	tar -jxvf FileName.tar.bz					# 解压
	tar -jcvf FileName.tar.bz DirName			# 压缩
	```
- .tar.bz2
	```bash
	tar -jxvf test.tar.bz2						# 解压
	```
- .tbz
	```bash
	tar -xjvf test.tbz							# 解压
	```
- .gz
	```bash
	gunzip FileName.gz							# 解压1
	gzip -dv FileName.gz						# 解压2
	gzip FileName								# 压缩
	gzip -l FileName.gz 						# 不解压查看内容
	zcat FileName.gz 							# 不解压查看内容
	```
- .bz2
	```bash
	bzip2 -dv FileName.bz2						# 解压1
	bunzip2 FileName.bz2						# 解压2
	bzip2 -zv FileName							# 压缩
	bzcat FileName.bz2							# 不解压查看内容
	```
- .Z
	```bash
	uncompress FileName.Z						# 解压
	compress FileName							# 压缩
	compress -rvf /home/abc/					# 强制压缩文件夹
	```
- .zip
	```bash
	unzip FileName.zip							# 解压
	zip FileName.zip DirName					# 压缩
	zip -s 4m myzip.zip --out zip				# 分卷压缩
	cat zip.z* > myzip.zip && unzip myzip.zip	# zip 分卷解压缩
	```
- .rar
	```bash
	rar x FileName.rar							# 解压
	rar a FileName.rar DirName					# 压缩
	```
- .lha
	```bash
	lha -e FileName.lha							# 解压
	lha -a FileName.lha FileName				# 压缩
	```
- .rpm
	```bash
	rpm2cpio FileName.rpm | cpio -div			# 解包
	```
- .deb
	```bash
	ar -p FileName.deb data.tar.gz | tar zxf -	# 解包
	```
- asar
	```bash
	npm install --engine-strict asar
	asar e xxx.asar xxx							# 解包
	```
**7z**
```bash
apt install -y p7zip
7z a -t7z -r manager.7z /home/manager/*		# 压缩文件
	# a 代表添加文件／文件夹到压缩包
	# -t 是指定压缩类型 一般我们定为7z
	# -r 表示递归所有的子文件夹，manager.7z 是压缩好后的压缩包名，/home/manager/* 是要压缩的目录，＊是表示该目录下所有的文件。
7z x manager.7z -r -o /home/xx				# 解压文件
	# x 代表解压缩文件，并且是按原始目录解压（还有个参数 e 也是解压缩文件，但其会将所有文件都解压到根下，而不是自己原有的文件夹下）manager.7z 是压缩文件，这里大家要换成自己的。如果不在当前目录下要带上完整的目录
	# -r 表示递归所有的子文件夹
	# -o 是指定解压到的目录，这里大家要注意-o后是没有空格的直接接目录
```
**pigz**
pigz 命令可以用来解压缩文件，最重要的是支持多线程并行处理
```bash
tar -cvf - dir1 dir2 dir3 | pigz -p 8 > xxx.tgz		# 结合 tar 使用, 压缩命令
pigz -p 8 -d xxx.tgz		# 解压命令
tar -xzvf xxx.tgz			# 如果是 gzip 格式，也支持用 tar 解压
```
---
## 网络管理
### 查看网络信息
**主机名**
```bash
hostname				# 查看本机的主机名
hostname test			# 设置主机名为 test (临时,重启失效)
hostnamectl				# 查看本机的主机名
hostnamectl set-hostname test	# 设置主机名为 test (长期生效)
```
**IP 地址**
```bash
ifconfig				# ifconfig 命令已经被弃用，不应该使用
ip a					# 显示网络设备的运行状态
hostname -I
netstat -a
cat /proc/net/fib_trie
cat /etc/sysconfig/network
sudo -v
```
**测试连通性**
- ping
	```bash
	ping [options] 
		e.g. : ping 127.0.0.1
	# -d 使用 Socket 的 SO_DEBUG 功能。
	# -f 极限检测。大量且快速地送网络封包给一台机器，看它的回应。
	# -n 只输出数值。
	# -q 不显示任何传送封包的信息，只显示最后的结果。
	# -r 忽略普通的 Routing Table，直接将数据包送到远端主机上。通常是查看本机的网络接口是否有问题。
	# -R 记录路由过程。
	# -v 详细显示指令的执行过程。
	# -c 数目：在发送指定数目的包后停止。
	# -i 秒数：设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次。
	# -I 网络界面：使用指定的网络界面送出数据包。
	# -l 前置载入：设置在送出要求信息之前，先行发出的数据包。
	# -p 范本样式：设置填满数据包的范本样式。
	# -s 字节数：指定发送的数据字节数，预设值是 56，加上 8 字节的 ICMP 头，一共是 64ICMP 数据字节。
	# -t 存活数值：设置存活数值 TTL 的大小。
	```
- traceroute
	```bash
	traceroute [options] 
		e.g. : traceroute www.baidu.com
	# -d 使用 Socket 层级的排错功能
	# -f 设置第一个检测数据包的存活数值 TTL 的大小。
	# -F 设置勿离断位。
	# -g 设置来源路由网关，最多可设置 8 个。
	# -i 使用指定的网络界面送出数据包。
	# -I 使用 ICMP 回应取代 UDP 资料信息。
	# -m 设置检测数据包的最大存活数值 TTL 的大小。
	# -n 直接使用 IP 地址而非主机名称。
	# -p 设置 UDP 传输协议的通信端口。
	# -r 忽略普通的 Routing Table，直接将数据包送到远端主机上。
	# -s 设置本地主机送出数据包的 IP 地址。
	# -t 设置检测数据包的 TOS 数值。
	# -v 详细显示指令的执行过程。
	# -w 设置等待远端主机回报的时间。
	# -x 开启或关闭数据包的正确性检验。
	```
**端口**
```bash