title:Appenzeller to Brie: Efficient Zero-Knowledge Proofs for Mixed-Mode
Arithmetic and Z2k
author:Carsten Baum and
Lennart Braun and
Alexander Munch-Hansen and
Benoît Razet and
Peter Scholl
Appenzeller to Brie: Efficient Zero-Knowledge Proofs
for Mixed-Mode Arithmetic and Z2𝑘
Carsten Baum
Aarhus University
Aarhus, Denmark
PI:EMAIL
Lennart Braun
Aarhus University
Aarhus, Denmark
PI:EMAIL
Alexander Munch-Hansen
Aarhus University
Aarhus, Denmark
PI:EMAIL
Benoit Razet
Galois, Inc.
Portland, Oregon, United States
PI:EMAIL
Peter Scholl
Aarhus University
Aarhus, Denmark
PI:EMAIL
ABSTRACT
Zero-knowledge proofs are highly flexible cryptographic protocols
that are an important building block for many secure systems.
Typically, these are defined with respect to statements that are
formulated as arithmetic operations over a fixed finite field. This
inflexibility is a disadvantage when it comes to complex programs,
as some fields are more amenable to express certain operations than
others. At the same time, there do not seem to be many proofs with
a programming model similar to those found in modern computer
architectures that perform arithmetic with 32 or 64 bit integers.
In this work, we present solutions to both of these problems.
First, we show how to efficiently check consistency of secret values
between different instances of zero-knowledge protocols based on
the commit-and-prove paradigm. This allows a protocol user to
easily switch to the most efficient representation for a given task.
To achieve this, we modify the extended doubly-authenticated bits
(edaBits) approach by Escudero et al. (Crypto 2020), originally
developed for MPC, and optimize it for the zero-knowledge set-
ting. As an application of our consistency check, we also introduce
protocols for efficiently verifying truncations and comparisons of
shared values both modulo a large prime 𝑝 and modulo 2𝑘.
Finally, we complement our conversion protocols with new
protocols for verifying arithmetic statements in Z2𝑘 . Here, we
build upon recent interactive proof systems based on information-
theoretic MACs and vector oblivious linear evaluation (VOLE), and
show how this paradigm can be adapted to the ring setting. In par-
ticular, we show that supporting such modular operations natively
in a proof system can be almost as efficient as proofs over large
fields or bits, and this also easily plugs into our framework for
zero-knowledge conversions.
CCS CONCEPTS
• Security and privacy → Cryptography; • Theory of computa-
tion → Cryptographic protocols.
Publication rights licensed to ACM. ACM acknowledges that this contribution was
authored or co-authored by an employee, contractor or affiliate of the United States
government. As such, the Government retains a nonexclusive, royalty-free right to
publish or reproduce this article, or to allow others to do so, for Government purposes
only.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484812
KEYWORDS
Zero-Knowledge Protocols; Commit and Prove; Rings; Conversion
ACM Reference Format:
Carsten Baum, Lennart Braun, Alexander Munch-Hansen, Benoit Razet,
and Peter Scholl. 2021. Appenzeller to Brie: Efficient Zero-Knowledge Proofs
for Mixed-Mode Arithmetic and Z2𝑘 . In Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’21), November
15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA,
20 pages. https://doi.org/10.1145/3460120.3484812
1 INTRODUCTION
Zero-knowledge proofs are a cryptographic primitive where a
prover convinces a verifier that a statement is true. The verifier
should be convinced only of true statements even if the prover is
malicious, and moreover, the verifier should not learn anything
beyond the fact that the statement holds. Current state-of-the-art
zero-knowledge (ZK) protocols for arbitrary functions work over
either Z𝑝 for a large 𝑝 or Z2. The computation is typically modeled
as a circuit of operations that equal the operations of the underlying
field, and the efficiency of a proof depends on the number of gates
that the circuit has.
A recent line of work has been investigating the scalability of
ZK protocols for very large statements, represented as, for instance,
circuits with billions of gates. This can be seen in work such as
zero-knowledge from garbled circuits [18, 21, 25, 35] and vector
oblivious linear evaluation (VOLE) [4, 15, 31, 33]. To handle complex
statements, protocols in this setting often have the drawback of
requiring more interaction compared with other approaches such
as MPC-in-the-head, SNARKs or PCPs, thus sacrificing on proof
sizes and public verifiability. However, the advantage is that these
protocols typically have lower overhead for the prover, in terms of
computational and memory resources, thus scaling better as the
statement size increases.
Certain functions are known to be “more efficient” to express
as circuits over a specific domain. For example, comparisons or
other bit operations are most efficient when expressed over Z2,
while integer arithmetic best fits into Z𝑝. At the same time, neither
of these captures arithmetic modulo 2𝑘 efficiently, which is the
standard model of current computer architectures. Most state-of-
the-art ZK compilers only operate over a single domain, so for
example, if this is Z𝑝 for a large prime 𝑝, then any comparison
operation will first require a costly bit-decomposition, followed by
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea192emulation of the binary circuit logic in Z𝑝. If there was instead a
way to efficiently switch representations, a more suitable protocol
over Z2 could be used instead, for certain parts of the computation.
1.1 Our Contributions
In this work, we address the above shortcomings, by introducing ef-
ficient conversion protocols for “commit-and-prove”-type ZK, such
as recent VOLE-based protocols. We then build on these conver-
sions by presenting new, high-level gadgets for common operations
like truncation and comparison. Finally, we supplement this with
efficient ZK protocols for arithmetic circuits over Z2𝑘 , which are
also compatible with our previous protocols.
Below, we give a more detailed, technical summary of these
contributions.
Commit-and-prove setting. Our protocols work in the commit-
and-prove paradigm, where the prover first commits to the secret
witness, before proving various properties about it. Assume we
have two different commitment schemes, working over Z2 and
Z𝑀, and denote by [𝑥]2 or [𝑥]𝑀 that the value 𝑥 ∈ Z𝑀 has been
committed to in one of the two respective schemes.
Note that our protocols are completely agnostic as to the com-
mitment scheme that is used, provided it is linearly homomor-
phic. However, in practice a fast instantiation can be obtained
using information-theoretic MACs based on recent advances in
VOLE [7, 8, 30, 34] from the LPN assumption. This has been the
approach taken in recent VOLE-based ZK protocols [4, 31], which
exploit the high computational efficiency and low communication
overhead of LPN-based VOLE.
committed arithmetic value [𝑥]𝑀, where 𝑥 =𝑚−1
Conversions. The goal of our conversion protocol is to verify that
a sequence of committed bits [𝑥0]2, . . . , [𝑥𝑚−1]2 correspond to the
𝑖=0 2𝑖𝑥𝑖 mod 𝑀.
In the MPC setting, Escudero et al. [16] showed how to use ex-
tended doubly-authenticated bits, or edaBits, for this task. edaBits
are random tuples of commitments (([𝑟𝑖]2)𝑚−1
𝑖=0 , [𝑟]𝑀) that are guar-
anteed to be consistent. By preprocessing random edaBits, [16]
showed how conversions between secret values can then be done ef-
ficiently in MPC in an online phase. Note that in MPC, the edaBits
are actually secret-shared and known to nobody; however, the
protocol of [16] starts by first creating private edaBits known to
one party, and then summing these up across the parties to obtain
secret-shared edaBits. In the ZK setting, the prover knows the
values of the edaBits, so the second phase can clearly be omitted.
With this observation, a straightforward application of edaBits
leads to the following basic conversion protocol between prover P
and verifier V:
(1) P commits to [𝑥0]2, . . . , [𝑥𝑚−1]2.
(2) P and V run the edaBits protocol to generate a valid commit-
ted edaBit ([𝑟0]2, . . . , [𝑟𝑚−1], [𝑟]𝑀).
(3) P uses ([𝑟0]2, . . . , [𝑟𝑚−1]2, [𝑟]𝑀) to convert [𝑥0]2, . . . , [𝑥𝑚−1]2
into [𝑥]𝑀 correctly.
In the last step, P will first commit to [𝑥]𝑀, then open [𝑥 + 𝑟]𝑀
to V, and finally prove that 𝑥 + 𝑟 equals the sum of the committed
bits [𝑥𝑖]2 and [𝑟𝑖]2. The latter check requires the verification of a
binary circuit for addition modulo 𝑀 over Z2.
In our protocol, we introduce several optimizations of this ap-
proach, tailored to the ZK setting. Firstly, we observe that in the
ZK setting, it is not necessary to create random verified edaBits,
if we can instead just apply the edaBit verification protocol to the
actual conversion tuples ([𝑥0]2, . . . , [𝑥𝑚−1]2, [𝑥]𝑀), from the wit-
ness. This change would remove the need for the binary addition
circuits in the last step. Unfortunately, the protocol of [16] cannot
be used for this setting, as it uses a cut-and-choose procedure where
a small fraction of edaBits are opened and then discarded, which
may leak information on our conversion tuples. Instead, we present
a new edaBit consistency check where the cut-and-choose step
does not leak on the secret conversion tuples used as input, essen-
tially by replacing the uniformly random permutation of edaBits
with a permutation sampled from a more restricted set. This re-
quires a careful analysis to show that the modified check still has a
low enough cheating probability.
In addition, we present a simplification of the protocol which
further reduces communication, by using “faulty daBits”. daBits
(doubly-authenticated bits) are edaBits ([𝑥]2, [𝑥]𝑀) of length
𝑚 = 1. They are used in the consistency check of [16] when 𝑀
is not a power of 2. However, producing a correct daBit requires
proving that [𝑥]𝑀 is a bit, introducing an extra check. We show
that our protocol with a slight modification remains secure even
when the daBits may be inconsistent. Essentially, this boils down
to showing that any errors in faulty daBits can be translated into
equivalent errors in the binary addition circuit used to check the
edaBits. Since our basic protocol is already resilient to faulty addi-
tion circuits, the same security analysis applies.
Comparison & Truncation. Using our efficient conversion check,
we give new protocols for verifying integer truncation and integer
comparison on committed values. A natural starting point would
be to adapt the MPC protocols in [16], which also used edaBits for
these operations. However, a drawback of these protocols is that in
addition to edaBits, they use auxiliary binary comparison circuits,
which add further costs. We show that in the ZK setting, these can
be avoided, and obtain protocols which only rely on our efficient
conversion check.
As a building block of our protocols, we make use of the fact
that our edaBit consistency check can easily be used to prove
that a committed value 𝑥 ∈ Z𝑀 is at most 𝑚 bits in length, for
some public 𝑚. We then show that integer truncation in Z𝑀 can
be decomposed into just two length checks, by exploiting the fact
that the prover can commit to arbitrary values dependent on the
witness. Then, given truncation, we can easily obtain a comparison
?
check, which shows that a committed bit [𝑏]2 encodes 𝑏 = (𝑥
< 𝑦),
where [𝑥]𝑀, [𝑦]𝑀 are committed.
ZK for Arithmetic Circuits over Z2𝑘 . Our conversion, truncation
and comparison protocols can all be made to work with either a
field Z𝑝, or a ring Z2𝑘 , giving flexibility in high-level applications.
While ZK protocols for Z𝑝 and Z2 have been well-studied, there
is less work on protocols for circuits over Z2𝑘 , especially in the
commit-and-prove setting. We take the first step towards this, by
showing how to use VOLE-based information-theoretic MACs for
ZK over Z2𝑘 , by adapting the techniques from SPDZ2𝑘 [12]. Given
the MACs, which serve as homomorphic commitments in Z2𝑘 , we
show how to efficiently verify multiplications on committed values.
We present two possible approaches: the first is based on a simple
cut-and-choose procedure, adapted from [31] for binary circuits;
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea193in the second approach, we adapt the field-based multiplication
check from [4] to work over rings, which requires some non-trivial
modifications.
Since these protocols use VOLE-based information-theoretic
MACs, we obtain ZK protocols in the preprocessing model, assum-
ing a trusted setup to distribute VOLE (or short seeds which expand
to VOLE [7]). Removing the trusted setup can be done with an ac-
tively secure VOLE protocol over Z2𝑘 . We note that the LPN-based
construction of [7] also works over Z2𝑘 (as implemented in [30]),
although currently only with passive security. It is an interesting
future direction to extend efficient actively secure protocols [8, 31]
to the Z2𝑘 setting.
Concrete Efficiency. We analyze the efficiency of our protocols,
in terms of the bandwidth requirements and the amount of VOLE
or OT preprocessing that is needed. We moreover present bench-
marks based on an implementation of our conversion protocol and
estimate the cost of Z2𝑘 -VOLEs that are necessary for our Z2𝑘 -
protocols.
Compared to a “baseline” protocol consisting of a straightforward
application of edaBits [16] to ZK, our optimized conversion proto-
col reduces communication by more than 2×, while also reducing
the number of used VOLEs by around 4×. When comparing to a
“naive” solution that decomposes the input as bits modulo 𝑝, we
reduce both the overall communication and the required number
of VOLEs by a factor 𝑚 where 𝑚 is the bit-length of the value.
In our implementation, we show the concrete efficiency of our con-
version protocols. For example, to convert 210 32-bit values our
system requires 9.6 s using [31] (9.3 ms amortized per conversion)
and 7.5 s using [33] (7.3 ms amortized). For 220 32-bit elements, this