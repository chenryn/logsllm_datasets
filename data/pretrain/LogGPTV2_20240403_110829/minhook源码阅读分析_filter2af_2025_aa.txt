## minhook源码阅读分析
minhook是一个inline
Hook的库，同时支持x32和x64系统，并且是开源的，地址在这里。下面就简单的分析一下它的工作过程。
### 0x1 调用实例
首先看一下官网上给出的c的调用的例子：
    #include 
    #include "./include/MinHook.h"
    typedef int (WINAPI *MESSAGEBOXW)(HWND, LPCWSTR, LPCWSTR, UINT);
    // Pointer for calling original MessageBoxW.
    MESSAGEBOXW fpMessageBoxW = NULL;
    // Detour function which overrides MessageBoxW.
    int WINAPI DetourMessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
    {
        return fpMessageBoxW(hWnd, L"Hooked!", lpCaption, uType);
    }
    int main()
    {
        // Initialize MinHook.
        if (MH_Initialize() != MH_OK)
        {
            return 1;
        }
        // Create a hook for MessageBoxW, in disabled state.
        if (MH_CreateHook(&MessageBoxW, &DetourMessageBoxW,
            reinterpret_cast(&fpMessageBoxW)) != MH_OK)
        {
            return 1;
        }
        // or you can use the new helper function like this.
        //if (MH_CreateHookApiEx(
        //    L"user32", "MessageBoxW", &DetourMessageBoxW, &fpMessageBoxW) != MH_OK)
        //{
        //    return 1;
        //}
        // Enable the hook for MessageBoxW.
        if (MH_EnableHook(&MessageBoxW) != MH_OK)
        {
            return 1;
        }
        // Expected to tell "Hooked!".
        MessageBoxW(NULL, L"Not hooked...", L"MinHook Sample", MB_OK);
        // Disable the hook for MessageBoxW.
        if (MH_DisableHook(&MessageBoxW) != MH_OK)
        {
            return 1;
        }
        // Expected to tell "Not hooked...".
        MessageBoxW(NULL, L"Not hooked...", L"MinHook Sample", MB_OK);
        // Uninitialize MinHook.
        if (MH_Uninitialize() != MH_OK)
        {
            return 1;
        }
        return 0;
    }
### 0x2 初始化钩子的过程
根据这个调用流程跟踪一下源代码，首先看`MH_Initialize`函数，此函数就干了一件事情，初始化了一个大小自增长的堆，并将堆的句柄存储在全局变量`g_hHeap`中。
    g_hHeap = HeapCreate(0, 0, 0);
接下来就是创建hook的过程了，这里需要注意几个结构体：
    struct
    {
        PHOOK_ENTRY pItems;     // Data heap
        UINT        capacity;   // Size of allocated data heap, items
        UINT        size;       // Actual number of data items
    } g_hooks;
g_hooks是一个全局变量，此结构体存储了当前创建的所有钩子，每个钩子的信息都存在了`pItems`这个指针里。`PHOOK_ENTRY`结构体的定义如下：
    typedef struct _HOOK_ENTRY
    {
        LPVOID pTarget;             // Address of the target function.
        LPVOID pDetour;             // Address of the detour or relay function.
        LPVOID pTrampoline;         // Address of the trampoline function.
        UINT8  backup[8];           // Original prologue of the target function.
        UINT8  patchAbove  : 1;     // Uses the hot patch area.
        UINT8  isEnabled   : 1;     // Enabled.
        UINT8  queueEnable : 1;     // Queued for enabling/disabling when != isEnabled.
        UINT   nIP : 4;             // Count of the instruction boundaries.
        UINT8  oldIPs[8];           // Instruction boundaries of the target function.
        UINT8  newIPs[8];           // Instruction boundaries of the trampoline function.
    } HOOK_ENTRY, *PHOOK_ENTRY;
`pTarget`存储了被hook的函数的地址，`pDetour`是你写的假的函数的地址，`pTrampoline`是一个中间的跳转函数，一会再细说。`backup[8]`是对被`Hook`函数的前五字节的备份，`nIp`表示被Hook函数的前五个字节可以是几条指令，`oldIPs`,`newIPs`分别存储了被Hook函数前五字节每条指令的偏移和中间跳转函数对应的每条指令的偏移，关于这个一会再细说。
接下来调用`MH_CreateHook`函数，在这个函数里面，首先调用`FindHookEntry`查找`g_hooks`中是否已经存放了被hook的目标，如果不存在，就进入创建一个`_HOOK_ENTRY`的过程。
    static UINT FindHookEntry(LPVOID pTarget)
    {
        UINT i;
        for (i = 0; i = minAddr)
            {
                pAlloc = FindPrevFreeRegion(pAlloc, (LPVOID)minAddr, si.dwAllocationGranularity); // 按照虚拟内存分配粒度找一块free的内存空间
                if (pAlloc == NULL)
                    break;
                pBlock = (PMEMORY_BLOCK)VirtualAlloc(
                    pAlloc, MEMORY_BLOCK_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
                if (pBlock != NULL)
                    break;
            }
        }
        // Alloc a new block below if not found.
        if (pBlock == NULL)
        {
            LPVOID pAlloc = pOrigin;
            while ((ULONG_PTR)pAlloc pTarget     + oldPos;
            ULONG_PTR pNewInst = (ULONG_PTR)ct->pTrampoline + newPos;
            copySize = HDE_DISASM((LPVOID)pOldInst, &hs); //对目标代码进行反汇编
            if (hs.flags & F_ERROR)
                return FALSE;
            pCopySrc = (LPVOID)pOldInst;
            if (oldPos >= sizeof(JMP_REL))
            {
                // The trampoline function is long enough.
                // Complete the function with the jump to the target function.
    #if defined(_M_X64) || defined(__x86_64__)
                jmp.address = pOldInst; // x64模式写， 0xFF25 disp64进行jmp
    #else
                jmp.operand = (UINT32)(pOldInst - (pNewInst + sizeof(jmp)));
    #endif
                pCopySrc = &jmp;
                copySize = sizeof(jmp);
                finished = TRUE;
            }
    #if defined(_M_X64) || defined(__x86_64__)
            else if ((hs.modrm & 0xC7) == 0x05) // 在x64模式下添加的 [rip+disp32] 的间接寻址模式
            {
                // Instructions using RIP relative addressing. (ModR/M = 00???101B)
                // 使用RIP相对指令跳转
                // Modify the RIP relative address.
                PUINT32 pRelAddr;
                // Avoid using memcpy to reduce the footprint.
    #ifndef _MSC_VER
                memcpy(instBuf, (LPBYTE)pOldInst, copySize);
    #else
                __movsb(instBuf, (LPBYTE)pOldInst, copySize);
    #endif
                pCopySrc = instBuf;
                // Relative address is stored at (instruction length - immediate value length - 4).
                pRelAddr = (PUINT32)(instBuf + hs.len - ((hs.flags & 0x3C) >> 2) - 4);
                *pRelAddr
                    = (UINT32)((pOldInst + hs.len + (INT32)hs.disp.disp32) - (pNewInst + hs.len)); 
                // 写入相对跳转地址
                // Complete the function if JMP (FF /4).
                if (hs.opcode == 0xFF && hs.modrm_reg == 4)
                    finished = TRUE;
            }
    #endif
            else if (hs.opcode == 0xE8) // 如果是call指令
            {
                // Direct relative CALL
                ULONG_PTR dest = pOldInst + hs.len + (INT32)hs.imm.imm32; //call 指令的目的跳转地址
    #if defined(_M_X64) || defined(__x86_64__)
                call.address = dest;
    #else
                call.operand = (UINT32)(dest - (pNewInst + sizeof(call))); // 修改call指令的目的跳转地址
    #endif
                pCopySrc = &call;
                copySize = sizeof(call);
            }
            else if ((hs.opcode & 0xFD) == 0xE9) // 如果是jmp
            {
                // Direct relative JMP (EB or E9)
                ULONG_PTR dest = pOldInst + hs.len;
                if (hs.opcode == 0xEB) // isShort jmp
                    dest += (INT8)hs.imm.imm8;
                else
                    dest += (INT32)hs.imm.imm32;
                // Simply copy an internal jump.
                if ((ULONG_PTR)ct->pTarget pTarget + sizeof(JMP_REL)))
                {
                    if (jmpDest = jmpDest);
                }
            }
            else if ((hs.opcode & 0xF0) == 0x70
                || (hs.opcode & 0xFC) == 0xE0
                || (hs.opcode2 & 0xF0) == 0x80)
            {
                // Direct relative Jcc
                ULONG_PTR dest = pOldInst + hs.len;