connection on behalf of the user to the intended destination.
Threat Model. Anonymity is maintained for Tor’s users because
only the entry OR receives a direct connection from a user, and only
the exit OR forms a direct connection to the destination. There-
fore, no single entity can link users to their destinations. The threat
model in Tor assumes a local active adversary that can watch part of
the network. The anonymity of a Tor circuit is compromised if the
adversary can watch the two ends, the entry and exit, of the circuit.
Cross-Circuit Interference Problem. Tor’s OPs and ORs com-
municate with each other using TCP connections. Every OR-to-
OR TCP connection multiplexes circuits from several users. Rear-
don [31] pointed out that this design can potentially hinder the
performance of interactive circuits. This problem is illustrated in
Figure 1. The connection between OR1 and OR2 in the ﬁgure de-
picts a scenario where a noisy circuit, carrying BitTorrent trafﬁc
for example, is multiplexed with a circuit carrying interactive web
browsing trafﬁc.
In this case, TCP congestion control would be
unfairly applied on both circuits whenever the noisy circuit trig-
gers congestion, due to lost or dropped packets, on the shared TCP
connection. Since the amount of data transmitted by ﬁle sharing
applications is signiﬁcantly larger than that by interactive applica-
tions, it is expected that bulk application circuits trigger congestion
control more often than interactive circuits. However, TCP conges-
tion control would apply on all circuits equally and would result in
extended queueing times for data cells in TCP output buffers and
thereby, longer delays observed by clients.
Tor’s Queuing Architecture Tor uses a tiered buffer architecture
to manage cells traveling through circuits, as also shown in Fig-
ure 1. When an OR receives a cell from an external server or from
another OR or OP, the cell is passed from the kernel TCP receive
buffer to a corresponding 32 KiB connection-level input buffer in
Tor. After the cell is encrypted or decrypted, it is placed on the ap-
propriate FIFO circuit queue. Since several circuits share the same
connection output buffer, a scheduler is used to retrieve cells from
the circuit queues to be placed on a 32 KiB output buffer. Finally,
the cells are sent to the kernel TCP send buffer which ﬂushes them
to the next OR or OP.
2.2
IPsec
IP security (IPsec) [22] is a collection of standards that provides
security at the network (IP) layer. It deﬁnes several protocols that
enable authenticating and/or encrypting IP data packets. It consists
of mainly two sub-protocols: Authentication Header (AH) and En-
capsulating Security Payload (ESP). We next brieﬂy describe each
sub-protocol and their modes of operation.
The AH protocol allows two communicating points to authenti-
cate, and protect the integrity of the data they exchange. Although
the AH protocol guards against spooﬁng and replay attacks, it does
not encrypt the data traveling between the two ends, so an eaves-
dropper can view the contents of the data packets.
The ESP protocol, on the other hand, enables both authentication
and encryption, which provides conﬁdentiality of the transferred
data. The two communicating ends need to have secret keys to
decrypt the packets. IPsec provides a variety of key-exchange and
authentication algorithms.
For both protocols, there are two modes of IPsec operation: ei-
ther the transport or the tunnel mode. Transport mode is used to
secure the connection, consisting of the trafﬁc from different appli-
cations, between two hosts. The payload of the IP packet, which
typically contains TCP or UDP data, is encrypted or authenticated
and an ESP or an AH header is added to the packet. The original
IP header also remains in the packet.
Tunnel mode, on the other hand, secures not only host-to-host
communication, but it also can be used to protect communication
between subnets to subnets or hosts to subnets. In this mode, the
whole IP packet is encrypted or authenticated and a new IP header
is added to the encrypted packet in addition to the AH or ESP
header. Using ESP in tunnel mode provides the strongest security
for communication at the expense of a few extra bytes per packet
as an overhead. However, when only host-to-host communication
is required, ESP protocol in transport mode sufﬁces.
In the next section, we present previous work on anonymous
communication transport design for Tor. After that, we introduce
OR1Input buffersCircuit queuesOutput buffersOR2Input buffersCircuit queuesOutput buffersInput buffersCircuit queuesOutput buffersInput buffersCircuit queuesOutput buffersOR3OR4Browsing trafficFile sharingtrafficTCPTCPTCPour proposed anonymous communication transport for Tor and how
we use IPsec to secure communication between Tor ORs.
3. RELATED WORK
Since Tor was introduced around a decade ago, it has received a
great amount of attention. Several aspects of Tor’s design have been
intensively investigated including Tor’s routing [4,33,35], scalabil-
ity [25, 26] and enhancing its awareness and handling of conges-
tion [6, 17, 21, 37, 43]. There are also several proposals that aim to
increase the total number of ORs using incentive schemes [20, 27,
29].
New transport designs for Tor have also been investigated and
considered by several previous proposals [31,40,42]; Murdoch [28]
provides a summary and compares all these previous possible trans-
port designs. He categorizes the available designs into three differ-
ent architectures: hop-by-hop reliability, initiator-to-exit reliability
or initiator-to-server reliability. Although Murdoch does not ex-
perimentally evaluate these design choices, he expects that a hop-
by-hop reliability approach will be the most promising approach.
Next, we summarize the ﬁrst two design categories and contrast
them with our design. For more details on the initiator-to-server
design architecture, we refer the reader to Freedom [9] and Mur-
doch’s summary [28].
TCP-over-DTLS is an example of the hop-by-hop reliability de-
sign, which is also the same design approach we adopt in PCTCP.
The TCP-over-DTLS proposal advocates for using a user-level TCP
connection to manage every user circuit over DTLS—the datagram
alternative to TLS—to provide conﬁdentiality and authenticity of
Tor’s trafﬁc. Since every circuit is managed by its own TCP con-
nection, every circuit is guaranteed reliability and in-order deliv-
ery of cells. Furthermore, congestion control is performed at the
circuit level, which solves the cross-circuit interference problem.
Several differences separate PCTCP from TCP-over-DTLS. First,
PCTCP uses mature IPsec protocols to hide TCP/IP header infor-
mation, whereas TCP-over-DTLS uses the relatively rare DTLS for
the same purpose. Also, TCP-over-DTLS introduces deployment
and performance issues that hinder its adoption (as highlighted in
Section 1). PCTCP avoids these problems by using the kernel-level
TCP stack, and by having an easier path to deployment. Second,
while initial experiments performed on a localhost private Tor net-
work showed slightly less degraded latency results, as compared to
Tor, when packet drop rates increased, there is still a need for fur-
ther realistic large-scale experiments in order to obtain conclusive
results of the potential beneﬁts.2
UDP-OR [42] is an example of an initiator-to-exit reliability de-
sign. In this design, an OP and the exit OR of the circuit maintain a
TCP connection, while intermediate ORs communicate using UDP,
an unreliable transport protocol. While this design signiﬁcantly
simpliﬁes the operations of the intermediate routers, it still suffers
from several problems. The ﬁrst problem is that since hop-by-hop
communication is unreliable, there will be a need to change the
cryptographic protocols that are implemented in Tor as the current
circuit encryption scheme depends on in-order delivery of cells.
Another problem is that this design uses the OP’s host TCP stack,
rather than a user-level one, which opens the door for OS ﬁnger-
printing attacks [23] in which the exit node can learn information
about the client. Second, since a circuit’s round trip time is large, it
would take the TCP endpoints a signiﬁcant amount of time before
2One difﬁculty is that TCP-over-DTLS is implemented in a 5-year-old version of Tor
(0.2.0.25). Since Tor’s data structures, queuing and networking have changed over
time, a direct comparison between PCTCP and TCP-over-DTLS is meaningless. Also,
Reardon et al. reported that they found many bugs in both Daytona and OpenSSL’s
DTLS implementation, which affected their results.
congestion is triggered. Also, with the high variability of circuit
performance in Tor, a non-trivial amount of tuning for TCP param-
eters, including congestion timers, thresholds and windows, may
be required for the TCP endpoints; see section 4 for more details.
Torchestra [17] was recently proposed to enhance the perfor-
mance of interactive application users of Tor. In that proposal, two
TCP connections are used for OR-to-OR communication. One TCP
connection is dedicated for light circuits and another is dedicated
for heavy circuits. An Exponentially Weighted Moving Average
(EWMA) algorithm of the number of cells sent on a circuit, origi-
nally proposed by Tang and Goldberg [37], is used to classify cir-
cuits into light and heavy categories. Previous work [5] suggested
that this metric alone is not enough to distinguish circuits.3 Also,
Torchestra has not been examined using large-scale experimenta-
tions to understand the system-level effects of utilizing it. Finally,
to beneﬁt from Torchestra, all ORs on the circuits need to upgrade,
as two TCP connections, as well as a new command cell type, are
needed between every pair of ORs in a circuit.
Tschorsch et al. [40] consider the impact of several proposed
transport designs for Tor on throughput, packet loss, delay and fair-
ness. For their analysis, the authors use a TCP performance model
proposed by Padhye et al. [30]. They examine the performance
of several proposed transport designs for Tor using a discrete-event
simulator, and conclude that they expect that a joint congestion con-
trol that detects loss rates and congestion for all circuits traversing
an overlay node would be a good direction. The authors ruled out
the use of parallel TCP connections, such as in PCTCP, as a de-
sign option, as more connections traversing a bottleneck may result
in higher packet losses, which reduces throughput. We argue that
packet losses mainly occur for the connections carrying bulk traf-
ﬁc, as they send signiﬁcantly more data than connections carrying
interactive applications. We also demonstrate through comprehen-
sive emulation and live-network experiments that our approach is
effective.
4. PROPOSED TRANSPORT
Before embarking on the description of PCTCP, we ﬁrst ask our-
selves, why not adopt and implement an end-to-end TCP approach,
which has been proposed as a possible transport design for Tor. We
start by explaining why we avoided such an approach, and then we
elaborate on our design.
4.1 Why not end-to-end TCP?
One transport design that has received some positive specula-
tion in the Tor research community is the end-to-end TCP design.
This design is inspired by many previous proposals [9,11,42]. The
basic idea of this design is that a TCP connection is maintained
by the two ends of the circuit. In the context of Tor, one end is
the client and the other end can be the exit OR or the destination
server. Communication between intermediate ORs is carried out
using a datagram protocol, such as UDP. We next point out some
weaknesses in this design choice.
Tuning Parameters TCP is a reliable transport. If a packet gets
dropped or lost due to congestion or routing problems in the under-
lying IP network, TCP’s congestion control algorithm is triggered
and the sender retransmits the lost packet. Also, TCP ensures that
the Tor process, residing at the application layer, receives data in
the order they were sent. This functionality signiﬁcantly simpliﬁes
the task of data processing for Tor. By contrast, a datagram pro-
tocol like UDP, or its secure DTLS alternative, do not implement
reliability or in-order delivery.
3Unfortunately, the classiﬁcation accuracy was not discussed in Torchestra [17].
In the end-to-end TCP design for Tor, it is assumed that reliable
in-order delivery is maintained only by the end points. There are
several shortcomings with this design that might worsen the expe-
rience of Tor users. The biggest challenge is how to best tune the
TCP parameters to yield a reasonable performance for Tor. TCP
relies on duplicate acknowledgement packets sent by the receiver
to detect congestion which signals that several out of order packets
have been received at the destination. Moreover, TCP also relies on
retransmission timers at the sender to detect loss of packets.
Typically, retransmission timers should be equal to the round-
trip-time (RTT) between a source and a destination. In a network
like Tor, where the RTT of circuits can be several seconds long, it
can be easily seen that a client would detect congestion very late.
Of course, the client can set a smaller retransmission timer to de-
tect congestion faster; however, one should be careful not to send
redundant packets too quickly, as this might cause even further con-
gestion. Striking a good balance between how fast we want to de-
tect congestion and how careful we should be before we decide
we are experiencing congestion is a very difﬁcult problem. Also,
considering the timing characteristics of Tor circuits, which are no-
torious for their highly variable performance, one soon realizes that
an end-to-end TCP solution for Tor is unwise.
Interoperability and Anonymity. An important aspect of any
new transport design for Tor is to ensure that it can be smoothly in-
tegrated to work with the existing Tor network infrastructure with-
out disrupting the operation of the network and its users. Recall
that Tor today currently has thousands of ORs and hundreds of
thousands of users. The network has not experienced signiﬁcant
downtime since its deployment in 2003. Using a drastically dif-
ferent transport design such as end-to-end TCP would require the
network to pause its operation while ORs and users update. As
a workaround, it might be possible for ORs upgraded with end-to-
end TCP to coexist with unmodiﬁed ORs; however, this might open
the door for ﬁngerprinting or partitioning attacks. For example, an
upgraded malicious exit can reduce the anonymity set of the entry
guard used on a circuit from the set of all entry guards in the net-
work to the smaller set of upgraded entry guards. Therefore, one
shortcoming of upgrading to an end-to-end TCP design is possibly
hindering the anonymity provided by the network.
Cryptographic Protocols. An inherent consequence of allowing
an unreliable transport is for the Tor process to expect lost packets.
Since Tor uses the Advanced Encryption Standard (AES) in counter
mode for encrypting and decrypting cells at ORs, lost or dropped
cells will cause subsequent cells to be unrecognized. Therefore,
adopting an end-to-end TCP approach requires changing the cryp-