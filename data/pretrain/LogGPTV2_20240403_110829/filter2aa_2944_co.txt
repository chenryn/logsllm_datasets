### Network Services and Offline Authentication

When network services are unavailable, it's crucial not to assume that they will be accessible. To address this, user credentials should be made available to the device for local authentication. However, this does not mean transmitting the user's password hash to the device, as this would pose a significant security risk. An attacker who intercepts the hash could perform an offline dictionary attack to recover the password. Additionally, if the device is compromised, the attacker could directly intercept the password as the user types it.

Instead, the credential should be short-lived and limited to the specific operations required to access the device. For example, a one-time code can be sent to the user, which they can display on their smartphone as a QR code. The smart locker can then scan this QR code, compare it with the stored hash, and, if they match, unlock the locker (Figure 13.9).

#### Figure 13.9: One-Time Codes for Secure Lockers
1. When the user orders goods for collection, they receive a one-time code.
2. A secure hash of the code and delivery details are transmitted to the locker.
3. The user’s phone displays the code as a QR code, which is scanned by the locker.
4. If the code matches the hash, the locker unlocks, and the code is deleted.

For this approach to work, the device must periodically connect to the network to download new credentials. A signed, self-contained token format, such as OAuth2 access tokens or OpenID Connect ID tokens, can overcome this problem. Before leaving to service a device, a technician can authenticate to a central authorization server and receive a token. This token can include a public key or a temporary credential for local authentication. For example, the token can be bound to a TLS client certificate or a CWT PoP token. When the technician arrives, they present the access token to access the device's APIs over a local connection, such as Bluetooth Low Energy (BLE). The device API verifies the token's signature and checks its scope, issuer, audience, expiry time, and other details. If valid, the embedded credentials are used to authenticate the user locally, allowing access according to the conditions attached to the token.

### Offline Authorization

Offline authentication solves the problem of identifying users without a direct connection to a central authentication service. In many cases, device access control decisions can be hard-coded based on pre-existing trust relationships. For example, a device may allow full access to any user with a credential issued by a trusted source and deny access to others. However, not all access control policies are simple, and access may depend on various dynamic factors and changing conditions. Updating complex policies for individual devices becomes difficult as the number of devices grows. Centralizing access control policies using a policy engine, as discussed in Chapter 8, simplifies management but can lead to issues if the device is offline.

The solutions for offline authorization are similar to those for offline authentication. The most basic solution is for the device to periodically download the latest policies in a standard format, such as XACML. The device can then make local access control decisions according to these policies. For more lightweight policy languages, consider formats encoded in CBOR, although no standards currently exist for such languages.

Self-contained access token formats can also be used for offline authorization. For example, the scope included in an access token allows an offline device to determine which API operations a client should be allowed to call. More complex conditions can be encoded using macaroon token formats, as discussed in Chapter 9. Macaroons are particularly useful because caveats can be added at any time without coordination and can be locally verified by devices without needing to contact a central service. Third-party caveats can also work well in IoT applications, as they require the client to obtain proof of authorization from a third-party API, which can be verified by the device without direct contact.

### Summary

- **Device Identification**: Devices can be identified using credentials associated with a device profile, such as encrypted pre-shared keys or certificates containing a public key.
- **Device Authentication**: Can be done at the transport layer using TLS, DTLS, or other secure protocols. End-to-end device authentication must ensure freshness to prevent replay attacks.
- **OAuth2 Device Grant**: Can be used by devices with no input capability to obtain access tokens authorized by a user.
- **Offline Authentication and Access Control**: Allow devices to continue operating securely when disconnected. Self-contained token formats and proof-of-possession (PoP) constraints can be used to ensure security.

### Appendix A: Setting Up Java and Maven

#### Prerequisites
- **Java 11**
- **Maven 3**

#### Installation Instructions

**macOS**
- Install Homebrew: 
  ```sh
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  ```
- Install Java 11:
  ```sh
  brew cask install adoptopenjdk11
  ```
- Set `JAVA_HOME`:
  ```sh
  export JAVA_HOME=$(/usr/libexec/java_home -v11)
  ```
- Verify Java installation:
  ```sh
  java -version
  ```
- Install Maven:
  ```sh
  brew install maven
  ```
- Verify Maven installation:
  ```sh
  mvn -version
  ```

**Windows**
- Use Windows Subsystem for Linux (WSL) to install Homebrew and follow the Linux instructions.

**Linux**
- Install dependencies using your distribution’s package manager or Homebrew.

#### Installing Docker
- Download and install Docker Desktop from the official website.

#### Installing an Authorization Server
- **ForgeRock Access Management**: A commercial AS that implements a wide variety of OAuth2 features.
- Add a host alias in `/etc/hosts`:
  ```sh
  127.0.0.1  as.example.com
  ```
- Run the evaluation version:
  ```sh
  docker run -i -p 8080:8080 -p 50389:50389 -t gcr.io/forgerock-io/openam:6.5.2
  ```
- Complete the installation via the web interface and configure OAuth2 support.

This setup ensures that you have the necessary tools and configurations to work with the examples in the book.