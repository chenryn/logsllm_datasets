---
## Page 309
第7章图
3=24，如图7-9-7所示。
邻接表
adjvex weight next
93A
V
ltv[9]=27
Vv>长度为3
Jtv[8]min(27,27-3）=24
L6°L B]
6.再次循环，当getop=7、5、6时，同理可算出ltv相对应的值为19、25、
13，此时ltv值为：{27，27，27，27，27，13，25，19，24，27}
7.当gettop=4时，由邻接表可得到v4有两条弧、，通过第13~
18行的循环，可以得到Itv[4]=min（ltv[7]-4,ltv[6]-9}=min（19-4,25-
9)=15，如图7-9-8所示。
邻接表
4
2
V4
714
V69
Itv[4]=min(19-4,25-9)=15
-tv[7]=19
图 7-9-8
此时你应该发现，我们在计算ltv时，其实是把拓扑序列倒过来进行的。因此我们
可以得出计算顶点v即求Itvk]的最晚发生时间的公式是：
[etv[k]
lrv[k]
当k=n-1时
]S=T[->(u+[}u]
其中S[K]表示所有从顶点v出发的弧的集合。比如图7-9-8的S[4]就是和
两条弧，en是弧上的权值。
就这样，当程序执行到第20行时，相关变量的值如图7-9-9所示，比如etv[1]=3
285
---
## Page 310
大语数据结构
而tv[1]=7，表示的意思就是如果时间单位是天的话，哪怕v这个事件在第7天才开
始，也可以保证整个工程的按期完成，你可以提前v事件开始时间，但你最早也只能
在第3天开始。跟我们前面举的例子，是先完成作业再玩还是先玩最后完成作业一个
道理。
下标0123456789
etv03412151124192427
Iv07412151325192427
图7-9-9
8.第20~31行是来求另两个变量活动最早开始时间ete和活动最晚开始时间
te，并对相同下标的它们做比较。两重循环嵌套是对邻接表的顶点和每个顶点
的弧表遍历。
9.当j=0时，从vo点开始，有和两条弧。当k=2时，
ete=etv[j]=etv[0]=0。lte=ltv[k]-e->weight=ltv[2]-len=4-4=0，此时
ete=lte，表示弧是关键活动，因此打印。当k=1时，
ete=etv[j]=etv[0]=0。Ite=ltv[k]-e->weight=tv[1]-len=7-3=4,此时 ete
lte，因此并不是关键活动，如图7-9-10所示。
邻接表
adjvexweightnext
0
V
2413
V1
源点
ete=etv[0]=0
Ite=ltv[1]-3=7-3=4
eteetv[0]=0
Ite=ltv[2]-4=4-4=0
V2
图7-9-10
这里需要解释一下，ete本来是表示活动的最早开工时间，是针对弧来说
的。但只有此弧的弧尾顶点v的事件发生了，它才可以开始，因此ete=etv[k]。
而lte表示的是活动的最晚开工时间，但此活动再晚也不能等v事件发生才
开始，而必须要在v事件之前发生，所以Ite=ltv[]-len。就像你晚上23点睡
觉，你不能说到23点才开始做作业，面必须要提前2小时，在21点开始，才有可能
按时完成作业。
286
---
## Page 311
第7章图
所以最终，其实就是判断ete与Ite是否相等，相等意味着活动没有任何空闲，是
关键活动，否则就不是。
10.j=1一直到j=9为止，做法是完全相同的，关键路径打印结果为“4，
8,3,4,5,3,”，最终关键路径如图7-9-11
所示。
-0
V2
V8
图 7-9-11
分析整个求关键路径的算法，第6行是拓扑排序，时间复杂度为0[n+e），第8~9
行时间复杂度为0（n），第10~19行时间复杂度为0（n+e），第20~31行时间复杂也
为0（n+e)，根据我们对时间复杂度的定义，所有的常数系数可以忽略，所以最终求关
键路径算法的时间复杂度依然是O(n+e)。
实践证明，通过这样的算法对于工程的前期工期估算和中期的计划调整都有很大
的帮助。不过注意，本例是唯一一条关键路径，这并不等于不存在多条关键路径的有
向无环图。如果是多条关键路径，则单是提高一条关键路径上的关键活动的速度并不
能导致整个工程缩短工期，而必须提高同时在几条关键路径上的活动的速度。这就像
仅仅是有事业的成功，而没有健康的身体以及快乐的生活，是根本谈不上幸福的人生
一样，三者缺一不可。
7.10总结回顾
图是计算机科学中非常常用的一类数据结构，有许许多多的计算问题都是用图来
定义的。由于图也是最复杂的数据结构，对它讲解时，涉及到数组、链表、栈、队
列、树等之前学的几乎所有数据结构。因此从某种角度来说，学好了图，基本就等于
理解了数据结构这门课的精神。
我们在图的定义这一节，介绍了一大堆定义和术语，一开始可能会有些迷茫，不
287
---
## Page 312
大语新据结构
过一回生二回熟，多读几遍，基本都可以理解并记住它们的特征，在图的定义这一节
的末尾，我们已经有所总结，这里就不再赞述了。
图的存储结构我们一共讲了五种，如图7-10-1所示，其中比较重要的是邻接矩阵
和邻接表，它们分别代表着边集是用数组还是链表的方式存储。十字链表是邻接矩阵
的一种升级，而邻接多重表则是邻接表的升级。边集数组更多考虑的是对边的关注。
用什么存储结构需要具体问题具体分析，通常稠密图，或读存数据较多，结构修改较
少的图，用邻接矩阵要更合适，反之则应该考虑邻接表。
图的存储结构
邻接矩阵
邻接表
边集数组
十字链表
邻接多重表
图 7-10-1
图的遍历分为深度和广度两种，各有优缺点，就像人在追求卓越时，是着重深度
还是看重广度，总是很难说得清楚。
图的应用是我们这一章浓墨重彩的一部分，一共谈了三种应用：最小生成树、最
短路径和有向无环图的应用
最小生成树，我们讲了两种算法：普里姆（Prim）算法和克鲁斯卡尔（Kruskal）
算法。普里姆算法像是走一步看一步的思维方式，逐步生成最小生成树。面克鲁斯卡
尔算法则更有全局意识，直接从图中最短权值的边入手，找寻最后的答案。
最短路径的现实应用非常多，我们也介绍了两种算法。迪杰斯特拉（Dijkstra）算
法更强调单源顶点查找路径的方式，比较符合我们正常的思路，容易理解原理，但算
法代码相对复杂。而弗洛伊德（Fkyd）算法则完全抛开了单点的局限思维方式，巧妙
地应用矩阵的变换，用最清爽的代码实现了多顶点间最短路径求解的方案，原理理解
有难度，但算法编写很简洁。
有向无环图时常应用于工程规划中，对于整个工程或系统来说，我们一方面关心
的是工程能否顺利进行的问题，通过拓扑排序的方式，我们可以有效地分析出一个有
向图是否存在环，如果不存在，那它的拓扑序列是什么？另一方面关心的是整个工程
完成所必须的最短时间问题，利用求关键路径的算法，可以得到最短完成工程的工期
以及关键的活动有哪些。
288
---
## Page 313
第7章图
事实上，图的应用算法还有不少，本章节只是抛砖引玉，有兴趣的同学可以去查
阅相关的书籍获得更多的知识。
7.11结尾语
还记得我们章节开头谈的问题吗？如果现在对应该如何去做还答不上来，那就非
常不应该了。全国所有省市的最佳旅游路线，只要你可以得到每个相邻城市间的交通
距离，其实就是最小生成树算法要解决的问题。当然现实中，可能会比较复杂，考虑
的因素较多，但再复杂的问题也是从基本的算法开始入手的，你都已经拥有了金手
指，还担心不能点石成金吗？
最后，我用网络上非常有名的“世界上最遥远的距离”造句，赠送给大家，
来结束我们这一章的课程。
世界上最遥远的距离，
不是从南极到北极，
而是我在讲解算法为何如此精妙，
你却能够安详在课堂上休息。
世界上最遥远的距离，
不是珠峰与马里亚纳海沟的距离，
而是我欲把古人的智慧全盘给你，
你却不屑一顾毫不怜惜。
世界上最遥远的距离，
不是牛A与牛C之间狭小空隙，
家
而是你们当中，
有人在通往牛逼的路上一路狂奔”，
而有人步入大学校园就学会放弃。
注：“通往牛通的路上一路红奔”一旬引自现代诗人沈浩波的诗作名句。
289
---
## Page 314
书笔记
---
## Page 315
第8章查找
查找：
启示
查找（Searching）就是根据给定的某个值，在查找表中确定一个其关键字等
于给定值的数据元素（或记录）。
---
## Page 316
大话
数据结构
8.1开场白
相信在座的所有同学都用过搜索引肇。那么，你知道它的大概工作原理吗？
当你精心制作了一个网页、或写了一篇博客、或者上传一组照片到互联网上，来
自世界各地的无数“蜘蛛”便会蜂拥而至。所谓蜘蛛就是搜索引肇公司服务器上的软
件，它如同蜘蛛一样把互联网当成了蜘蛛网，没日没夜的访问互联网上的各种信息。
它抓取并复制你的网页，且通过你网页上的链接爬上更多的页面，将所有信息纳
入到搜索引擎网站的索引数据库。服务器拆解你网页上的文字内容、标记关键词的位
置、字体、颜色，以及相关图片、音频、视频的位置等信息，并生成庞大的索引记
录，如图8-1-1所示。
网站主机
网站主机
网站主机
蛛排取网页
存人数退库
定期会
地址
网络
网页分析，提取链接
链接数据库
页排名
网页数据库
全文检索，提取
有效信息
互联网
素引数据库
图8-1-1
292
---
## Page 317
第8章查找
间，带着单词奔向索引数据库的每个“神经末梢”，检索到所有包含搜索词的网页，依
据它们的浏览次数与关联性等一系列算法确定网页级别，排列出顺序，最终按你期望
的格式呈现在网页上。
这就是一个“关键词”的云端之旅。在过去的10多年里，成就了本世纪最早期的
创新明星Google，还有Yandex、Navar和百度等来自全球各地的搜索引擎，搜索引擎
已经成为人们最依赖的互联网工具。
作为学习编程的人，面对查找或者叫做搜索（Search）这种最为频繁的操作，理
吧。
8.2查找概论
只要你打开电脑，就会涉及到查找技术。如炒股软件中查股票信息、硬盘文件中
找照片、在光盘中搜DVD，甚至玩游戏时在内存中查找攻击力、魅力值等数据修改用
来作彝等，都要涉及到查找。当然，在互联网上查找信息就更加是家常便饭。所有这
些需要被查的数据所在的集合，我们给它一个统称叫查找表。
查找表（SearchTable）是由同一类型的数据元素（或记录）构成的集合。例如
图8-2-1就是一个查找表。
关键字（Key）是数据元素中某个数据项的值，又称为键值，用它可以标识一个数
据元素。也可以标识一个记录的某个数据项（字段），我们称为关键码，如图8-2-1中
①和②所示
若此关键字可以唯一地标识一个记录，则称此关键字为主关键字（PrimaryKey）。
注意这也就意味着，对不同的记录，其主关键字均不相同。主关键字所在的数据项称
为主关键码，如图8-2-1中③和④所示。
那么对于那些可以识别多个数据元素（或记录）的关键字，我们称为次关键字
（SecondaryKey），如图8-2-1中5所示。次关键字也可以理解为是不以唯一标识一个
数据元素（或记录）的关键字，它对应的数据项就是次关键码。
293
---
## Page 318
大语数据结构
④主关键码
主关健字
③次关键字
②数据项（字段）
名称