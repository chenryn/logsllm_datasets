identifier clustername-restore
--db-instance-identifier
newinstance-nodeA --db-
instance-class db.r4.large
Incremental BACKUP INCREMENTAL LEVEL 0 N/A
differential DATABASE;
BACKUP INCREMENTAL LEVEL 1
DATABASE;
Incremental BACKUP INCREMENTAL LEVEL 0 N/A
cumulative CUMULATIVE DATABASE;
BACKUP INCREMENTAL LEVEL 1
CUMULATIVE DATABASE;
Restore database to a RUN { Create new cluster from a cluster snapshot by
specific point-in-time SHUTDOWN IMMEDIATE; given custom time to restore:
STARTUP MOUNT;
SET UNTIL TIME aws rds restore-db-cluster-to-
"TO_DATE('19-SEP-2017 point-in-time --db-cluster-
23:45:00','DD-MON-YYYY identifier clustername-restore
HH24:MI:SS')"; --source-db-cluster-identifier
RESTORE DATABASE; clustername --restore-to-time
RECOVER DATABASE; 2017-09-19T23:45:00.000Z
ALTER DATABASE OPEN
RESETLOGS; Add a new instance to the new/restored
} cluster:
230
Description Oracle Amazon Aurora
aws rds create-db-instance --
region us-east-1 --db-subnet-
group default --engine aurora-
postgresql --db-cluster-
identifier clustername-restore
--db-instance-identifier
newinstance-nodeA --db-
instance-class db.r4.large
Backup database BACKUP ARCHIVELOG ALL; N/A
Archive logs
Delete old database CROSSCHECK BACKUP; N/A
Archive logs DELETE EXPIRED BACKUP;
Restore a single RUN { Create new cluster from a cluster snapshot:
Pluggable database ALTER PLUGGABLE DATABASE
(12c) pdb1, pdb2 CLOSE; aws rds restore-db-cluster-
RESTORE PLUGGABLE from-snapshot --db-cluster-
DATABASE pdb1, pdb2; identifier NewCluster --
RECOVER PLUGGABLE snapshot-identifier
DATABASE pdb1, pdb2; SnapshotToRestore --engine
ALTER PLUGGABLE DATABASE aurora-postgresql
pdb1, pdb2 OPEN;
} Add a new instance to the new/restored
cluster:
aws rds create-db-instance --
region us-east-1 --db-subnet-
group default --engine aurora-
postgresql --db-cluster-
identifier clustername-restore
--db-instance-identifier
newinstance-nodeA --db-
instance-class db.r4.large
Use and to copy the
pg_dump pg_restore
database to the original instance:
pgdump -F c -h
hostname.rds.amazonaws.com -U
username -d hr -p 5432 >
c:\Export\hr.dmp
pg_restore -h
restoredhostname.rds.amazonaws.
com -U hr -d hr_restore -p 5432
c:\Export\hr.dmp
Optionally, replace with the old database using
ALTER DATABASE RENAME
For additional details:
http://docs.aws.amazon.com/cli/latest/reference/rds/index.html#cli-aws-rds
http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html
http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RestoreFromSnapshot.html
231
Migrating from: Oracle 12c PDBs & CDB
[Back to TOC]
Overview
Oracle 12c introduces a new multitenant architecture which provides the ability to create additional
independent “pluggable” databases under a single Oracle instance. Prior to Oracle 12c, a single Oracle
database instance only supported running single Oracle database, as shown in the picture below.
The Pre-12c Oracle Database Architecture
Oracle 12c introduces a new multi-container database, or CDB, that supports one or more “Pluggable
Databases”, or PDBs. The CDB can be thought of as a single “superset” database with multiple pluggable
database. The relationship between The Oracle instance and databases is now 1:N.
The Multitenant Oracle 12c Database Architecture
232
Advantages of the Oracle 12c multitenant architecture
• PDBs can be used to isolate applications from one another.
• PDBs can be used as portable collection of schemas.
• PDBs can cloned and transported to different CDBs/Oracle instances.
• Management of many databases (individual PDBs) as a whole.
• Separate security, users, permissions, and resource management per PDB provides greater
application isolation.
• Enables a consolidated database model of many individual applications sharing a single Oracle
server.
• Provide an easier way to patch and upgrade individual clients and/or applications, using PDBs.
• Backups are supported at both a multitenant container-level as well as at an individual PDB-
level (both for physical and logical backups).
The Oracle multitenant architecture
- A multitenant Container Database (CDB) can support one or more “pluggable databases” (PDBs).
- Each pluggable database contains its own copy of and application tablespaces.
SYSTEM
- The PDBs will share the Oracle Instance memory and background processes. The use of PDBs
enables consolidation of many databases and applications into individual containers under the
same Oracle instance.
- A single “Root Container” (or ) exists in a CDB and contains the Oracle Instance Redo
CDB$ROOT
Logs, undo tablespace (unless Oracle 12.2 local undo mode is enabled) and control files.
- A single Seed PDB exists in a CDB and used as a template for creating new PDBs.
The Oracle Multitenant Oracle 12c Database Architecture
233
CDB & PDB Semantics
• CDB (Container Database)
- A “Super” database that contains the Root Container – (one per instance) and
cdb$root
one or more Pluggable Databases (with user-provided naming).
- Created as part of the Oracle 12c software installation.
- Contains the Oracle control files, its own set of system tablespaces, the instance undo
tablespaces (unless Oracle 12.2 local undo mode is enabled), and the instance redo logs.
- Holds the data dictionary for the root container and for all of the PDBs.
• PDB (Pluggable Database)
- Independent database that exists under a CDB. Also known as a “container”.
- Used to store application-specific data.
- Can be created from a the pdb$seed (template database) or as a clone of an existing PDB
- Stores metadata information specific to its own objects (data-dictionary)
- Has its own set of application and system data files and tablespaces along with temporary
files to manage objects.
Examples
1. List existing PDBs created in an Oracle CDB instance:
SQL> SHOW PDBS;
CON_ID CON_NAME OPEN MODE RESTRICTED
---------- ------------------------------ ---------- ----------
2 PDB$SEED READ ONLY NO
3 PDB1 READ WRITE NO
2. Provisioning of a new PDB from the template :
seed$pdb
SQL> CREATE PLUGGABLE DATABASE PDB2 admin USER ora_admin IDENTIFIED BY
ora_admin FILE_NAME_CONVERT=('/pdbseed/','/pdb2/');
3. Alter a specific PDB to READ/WRITE and verify:
SQL> ALTER PLUGGABLE DATABASE PDB2 OPEN READ WRITE;
SQL> show PDBS;
CON_ID CON_NAME OPEN MODE RESTRICTED
---------- ------------------------------ ---------- ----------
2 PDB$SEED READ ONLY NO
3 PDB1 READ WRITE NO
4 PDB2 READ WRITE NO
234
4. Clone a PDB from an existing PDB:
SQL> CREATE PLUGGABLE DATABASE PDB3 FROM PDB2 FILE_NAME_CONVERT=
('/pdb2/','/pdb3/');
SQL> SHOW PDBS;
CON_ID CON_NAME OPEN MODE RESTRICTED
---------- ------------------------------ ---------- ----------
2 PDB$SEED READ ONLY NO
3 PDB1 READ WRITE NO
4 PDB2 READ WRITE NO
5 PDB3 MOUNTED
For additional details:
http://docs.oracle.com/database/122/CNCPT/overview-of-the-multitenant-architecture.htm#CNCPT89250
http://docs.oracle.com/database/122/ADMIN/managing-a-multitenant-environment.htm#ADMIN13506
235
Migration to: PostgreSQL Databases
[Back to TOC]
Overview
Amazon Aurora PostgreSQL offers a different and simplified architecture to manage and create a
multitenant database environment. Using Aurora PostgreSQL, it is possible to provide levels of
functionality similar (but not identical) to those offered by Oracle PDBs by creating multiple databases
under the same Aurora PostgreSQL cluster and/or using separate Aurora clusters, when total isolation
of workloads is required.
- Multiple PostgreSQL databases can be created under a single Amazon Aurora PostgreSQL
Cluster.
- Each Amazon Aurora cluster contains a primary instance that can accept both reads and
writes for all cluster databases.
- Up to 15 read-only nodes can be created which provide both scale-out functionality for
application reads as well as for high availability proposes.
Amazon Aurora Database Cluster with Primary (Master) an Read replicas.
In theory, an Oracle CDB/Instance can be considered as the high-level equivalent to an Amazon Aurora
cluster, and an Oracle Pluggable Database (PDB) would be equivalent to PostgreSQL database created
inside the Amazon Aurora cluster. Not all features are comparable between Oracle 12c PDBs and
Amazon Aurora.
236
Examples
1. Create a new database in PostgreSQL using the statement:
CREATE DATABASE
psql=> CREATE DATABASE pg_db1;
CREATE DATABASE
psql=> CREATE DATABASE pg_db2;
CREATE DATABASE
psql=> CREATE DATABASE pg_db3;
CREATE DATABASE
2. List all databases created under an Amazon Aurora PostgreSQL cluster:
psql=> \l
Name | Owner | Encoding | Collate | Ctype |
-------------+--------------+----------+-------------+-------------+-----
--------------------------
admindb | rds_pg_admin | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
pg_db1 | rds_pg_admin | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
pg_db2 | rds_pg_admin | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
pg_db3 | rds_pg_admin | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
postgres | rds_pg_admin | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
rdsadmin | rdsadmin | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
template0 | rdsadmin | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
template1 | rds_pg_admin | UTF8 | en_US.UTF-8 | en_US.UTF-8 |
Independent database backups in Amazon Aurora PostgreSQL
Oracle 12c provides the ability to perform both logical backups (via DataPump) and physical backups
(via RMAN) at both CDB and PDB levels. Similarly, Amazon Aurora PostgreSQL provides the ability to
perform logical backups on all or a specific database(s) using . However, for physical backups
pg_dump
when using snapshots, the entire cluster and all databases are included in the snapshot, backing up a
specific database with in the cluster is not supported.
This is usually not a concern as volume snapshots are extremely fast operations that occur at the
storage-infrastructure layer and thus incur minimal overhead and operate at extremely fast speeds.
However, you the process of restoring a single PostgreSQL database from an Aurora snapshot requires
additional steps, such as exporting the specific database after a snapshot restore and importing it back
to the original Aurora cluster.
237
Examples
Physical backup: take an Amazon Aurora PostgreSQL snapshot.
1. On the AWS Management Console, navigate to RDS > Instances > Instance Actions and choose
“Take Snapshot”.
Logical backup: Use PostgreSQL (installed on your client machine) to create a logical backup
pg_dump
for a specific PostgreSQL database:
$ pg_dump -h hostname.rds.amazonaws.com -U username -d db_name
-f dump_file_name.sql
For additional information on PostgreSQL databases:
https://www.postgresql.org/docs/current/static/sql-createdatabase.html
238
Migrating from: Oracle Tablespaces & Data Files
Overview
The storage structure of an Oracle database contains both physical and logical elements.
Type Description
Tablespaces Each Oracle database contains one or more tablespaces, which are logical
storage groups, that are used as “containers” when creating new tables and
indexes.
Data files Each tablespace is made up of one or more data files, which are the physical
elements that make up an Oracle database tablespace. Datafiles can be located
on the local file system, raw partitions, managed by Oracle ASM or files located
on network file system.
Storage Hierarchy
• Database: each Oracle database is composed from one or more tablespaces.
• Tablespace: each Oracle tablespace is composed from one or more datafiles.
Tablespaces are logical entities that have no physical manifestation on the file system.
• Data files: physical files, located on a file-system. Each Oracle tablespace is made from
one or more data files.
Segments: each represents a single database object that consumes storage, such as
tables, indexes, undo segments etc.
• Extent: each segment is made from one or more extents. Oracle uses extents as a form
of allocating contiguous sets of database blocks on disk.
• Block: the smallest unit of I/O that can be used by a database for reads and writes. In
case of blocks that store table data, each block can store one or more table rows.
Types of Oracle Database Tablespace
• Permanent Tablespaces: designated to store persistent schema objects for your
applications.
• Undo Tablespace : a special type of system permanent tablespace that is used by Oracle
to manage UNDO data when running the database in automatic undo management
mode.
• Temporary Tablespace: contains schema objects that are valid for the duration of a
session. It is also used for spilling sorts that cannot fit into memory.
Tablespace Privileges
In order to create a tablespace:
• The database user must have the system privilege.
CREATE TABLESAPCE
• Create a database and the database must be in open mode.
239
Examples
1. Create the tablespace comprised of a single data file.
USERS
SQL> CREATE TABLESPACE USERS
DATAFILE '/u01/app/oracle/oradata/orcl/users01.dbf' SIZE 5242880
AUTOEXTEND ON NEXT 1310720 MAXSIZE 32767M
LOGGING ONLINE PERMANENT BLOCKSIZE 8192
EXTENT MANAGEMENT LOCAL AUTOALLOCATE DEFAULT
NOCOMPRESS SEGMENT SPACE MANAGEMENT AUTO;
Drop a tablespace:
SQL> DROP TABLESPACE USERS;
OR
SQL> DROP TABLESPACE USERS INCLUDING CONTENTS AND DATAFILES;
For additional details:
https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_7003.htm#SQLRF01403
https://docs.oracle.com/database/121/SQLRF/statements_7003.htm#SQLRF01403
https://docs.oracle.com/cd/E11882_01/server.112/e41084/clauses004.htm#SQLRF01602
https://docs.oracle.com/database/121/SQLRF/clauses004.htm#SQLRF01602
https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_9004.htm#SQLRF01807
https://docs.oracle.com/database/121/SQLRF/statements_9004.htm#SQLRF01807
Migration to: PostgreSQL Tablespaces & Data Files
[Back to TOC]
Overview
The logical storage structure in PostgreSQL shares similar concepts as Oracle, utilizing tablespaces for storing
database objects. Tablespaces in PostgreSQL are made from datafiles and are used to store different
databases and database object.
• Tablespace - the directory where datafiles are stored.
• Data files - file-system files that are placed inside a tablespace (directory) and are used to store
database objects such as tables or indexes. Created automatically by PostgreSQL. Similar to
how Oracle-Managed-Files (OMF) behave.
Notes:
• Unlike Oracle, a PostgreSQL tablespace does not have user-configured segmentation into
multiple and separate data files. When you create the tablespace, PostgreSQL automatically
creates the necessary files to store the data.
• Each table and index are stored in a separate O/S file, named after the table or
index's filenode number.
240
Tablespaces in Amazon Aurora PostgreSQL
After an Amazon Aurora PostgreSQL cluster is created, two system tablespaces are automatically provisioned
and cannot be modified or dropped:
• tablespace
pg_global
- Used for the shared system catalogs.
- Stores objects that are visible to all Cluster databases.
• tablespace
pg_default
- The default tablespace of the and databases.
template1 template0
- Serves as the default tablespace for other databases, by default, unless a different
tablespace was explicitly specified during database creation.
One of the main advantages when using Amazon Aurora PostgreSQL is the absence of complexity for
storage management. Therefore, creating tablespaces in Aurora PostgreSQL is simplified and has several
advantages over a “vanilla” PostgreSQL database deployment:
• When creating tablespaces, the superuser can specify an OS path (location) that does not
currently exist. The directory will be implicitly created.
• A user-specified tablespace directory will be created under an embedded Amazon RDS/Aurora
path. For example, every path specified in the clause when creating a new
LOCATION
tablespace will be created under the Amazon RDS path of: /rdsdbdata/tablespaces/
• Amazon Aurora PostgreSQL leverages a unique self-managed shared storage architecture. The
DBA does not need to micro-manage most storage aspects of the database.
Examples
1. Creating a Tablespace via Amazon Aurora PostgreSQL and view its associated directory:
demo=> CREATE TABLESPACE TBS_01 LOCATION '/app_data/tbs_01';
CREATE TABLESPACE
demo=> \du
Name | Owner | Location
------------+----------+----------------------------------------------
pg_default | rdsadmin |
pg_global | rdsadmin |
tbs_01 | rdsadmin | /rdsdbdata/tablespaces/app_data/tbs_01
* Notice that the newly specified path was created under the embedded base path for Amazon
Aurora: /rdsdbdata/tablespaces/
241
2. View current tablespaces and associated directories:
select spcname, pg_tablespace_location(oid) from pg_tablespace;
3. Drop the PostgreSQL tablespace:
TBS_01
demo=> DROP TABLESPACE TBS_01;
DROP TABLESPACE
4. Alter a tablespace:
demo=> ALTER TABLESPACE TBS_01 RENAME TO IDX_TBS_01;
ALTER TABLESPACE
demo=> ALTER TABLESPACE TO IDX_TBS_01 OWNER TO USER1;
ALTER TABLESPACE
5. Assign a database with a specific tablespace:
demo=> CREATE DATABASE DB1 TABLESPACE TBS_01;
CREATE DATABASE
demo=> SELECT DATNAME, PG_TABLESPACE_LOCATION(DATTABLESPACE) FROM PG_DATABASE
WHERE DATNAME='db1';
datname | pg_tablespace_location
---------+----------------------------------------
db1 | /rdsdbdata/tablespaces/app_data/tbs_01
6. Assign a table with a specific tablespace:
demo=> CREATE TABLE TBL(
COL1 NUMERIC, COL2 VARCHAR(10))
TABLESPACE TBS_01;
CREATE TABLE
demo=> SELECT SCHEMANAME, TABLENAME, TABLESPACE FROM PG_TABLES
WHERE TABLENAME='tbl';
schemaname | tablename | tablespace
------------+-----------+------------
public | tbl | tbs_01
242
7. Assign an index with a specific tablespace:
demo=> CREATE INDEX IDX_TBL ON TBL(COL1)
TABLESPACE TBS_01;
CREATE INDEX
demo=> SELECT SCHEMANAME, TABLENAME, INDEXNAME, TABLESPACE FROM PG_INDEXES
WHERE INDEXNAME='idx_tbl';
schemaname | tablename | indexname | tablespace
------------+-----------+-----------+------------
public | tbl | idx_tbl | tbs_01
8. Alter a table to use a different tablespace:
demo=> ALTER TABLE TBL SET TABLESPACE TBS_02;
ALTER TABLE
Tablespace Exceptions
• cannot be executed inside a transaction block.
CREATE TABLESPACE
• A tablespace cannot be dropped until all objects in all databases using the tablespace have
been removed/moved.
Privileges
• The creation of a tablespace in the PostgreSQL database must be performed by a database
superuser.
• Once a tablespace has been created, it can be used from any database, provided that the
requesting user has sufficient privileges.
Tablespace Parameters
The parameter controls the system default location for newly created
default_tablespace
database objects. By default, this parameter is set to an empty value and any newly created database
object will be stored in the default tablespace ( ).
pg_default
The parameter can be altered by using the cluster parameter group.
default_tablespace
243
To verify and to set the default_tablespace variable:
demo=> SHOW DEFAULT_TABLESPACE; -- No value
default_tablespace
--------------------
demo=> SET DEFAULT_TABLESPACE=TBS_01;
demo=> SHOW DEFAULT_TABLESPACE;
default_tablespace
--------------------
tbs_01
Oracle vs. PostgreSQL tablespaces
Feature Oracle Aurora PostgreSQL
Tablespace Exists as a logical object and made from one Logical object that is tied to a specific directory