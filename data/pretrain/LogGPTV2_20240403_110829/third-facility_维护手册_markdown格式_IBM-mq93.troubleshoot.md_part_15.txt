Checking for end-to-end connectivity
If you cannot make a connection, check the connection log to see if the routes are set up correctly.
Create the connection log: In the mqipt.conf configuration file, set the ConnectionLog property to
true. Start or refresh MQIPT, and attempt a connection. See Connection logs for details.
1.If the connection log is not created in the logs directory below the home directory, MQIPT has not been
installed correctly.
2.If no connection attempts are recorded, the sender has not been set up correctly.
3.If attempts are recorded, check that MQIPT is forwarding the messages to the correct address.
Automatically starting MQIPT
If you install MQIPT as a Windows service, or as an AIX or Linux System V init service, it starts when the
system is started. If the service does not start correctly, follow the steps in this topic.
Always try starting MQIPT manually before installing it as a service, to confirm correct installation.
For information about using the mqiptService to start MQIPT automatically, see Starting and stopping
MQIPT.
If the MQIPT service does not start correctly, complete the following steps for your platform.
On Windows systems
If the MQIPT service does not start correctly, complete the following steps:
1.Open the Windows Registry Editor and navigate to the
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\MQInternetPassThru key.
Check that the ConfigFilePath setting contains the correct path to the mqipt.conf configuration
file. Also, check that the ImagePath setting contains the correct path to mqiptService.exe.
2.Run the mqiptService -debugevents command from an Administrator Command Prompt to
write service startup information in the Windows application event log. Additional information is also
displayed in the Command Prompt console window. Examine the diagnostic information to determine
the cause of the failure.
3.If the cause of the failure is still not clear, use Windows file explorer to navigate to the directory
specified in ConfigFilePath where mqipt.conf is located. Examine the contents of the errors
subdirectory to look for FDC files containing FFST records.
4.If the cause of the failure is still not clear, enable trace by setting the Trace property to 5 in the
[global] section of mqipt.conf. Restart the MQIPT service. A trace file is be written in the MQIPT
errors directory. If necessary, contact IBM Software Support and supply the trace file along with any
FDC files and the diagnostic output from the mqiptService -debugevents command.
On AIX and Linux systems
On Linux, the MQIPT service is supported only on operating systems which support System
V init. On systems which do not support System V init, use another method, such as systemd, to manage
MQIPT as a service.
If the MQIPT service does not start correctly, complete the following steps as the root user:
IBM MQ troubleshooting and support 91
1.Check that the MQIPT service is installed. You might need to uninstall and reinstall the service. To
check that the service is installed:
• On AIX, run the command lsitab mqipt and check that the output shows the correct installation
directory. Here is an example of the output for an MQIPT service running from the /usr/opt/mqipt
installation:
mqipt:2:once:/usr/opt/mqipt/bin/mqipt /usr/opt/mqipt > /dev/console 2>&1
Check that the MQIPT executable named exists and is executable by the root user.
• On Linux, check for the existence of the MQIPT init.d script named /etc/init.d/mqipt. The
script must exist and must be executable by the root user.
2.Ensure that the installation directory contains the mqipt.conf file, which must be readable by the
root user.
3.Check the output from the MQIPT startup.
• On AIX, the MQIPT output is sent to /dev/console.
• On Linux, the output is sent to a file named console.log in the logs directory of the MQIPT
installation.
Look for any MQIPT errors and address the cause. If no console output is present then MQIPT was not
started by the operating system. Consult your operating system documentation for details of how to
diagnose service startup failures.
4.If the cause of the failure is still not clear, navigate to the MQIPT installation directory where
mqipt.conf is located. Examine the contents of the errors subdirectory to look for FDC files
containing FFST records.
5.If the cause of the failure is still not clear, enable trace by setting the Trace property to 5 in the
[global] section of mqipt.conf. Restart the MQIPT service. A trace file is written in the MQIPT
errors directory. If necessary, contact IBM Software Support and supply the trace file along with any
FDC files and the diagnostic output from /dev/console (on AIX) or console.log (on Linux).
Using JRE diagnostic options
In some cases you might need to use diagnostic functions that are built into the Java runtime
environment (JRE). You should usually only do this under the direction of your IBM Software Support
representative, as some diagnostic settings might impair normal MQIPT operation.
The MQIPT_JVM_OPTIONS environment variable can be used to pass diagnostic options to the underlying
MQIPT JRE via the command line. All command parameters that are valid for the IBM JRE supplied with
MQIPT can be used.
There are two common diagnostic options that can be used are:
-Djavax.net.debug=all
This option enables diagnostics for SSL/TLS and network throughput. Setting this option causes a
detailed log of internal network operations to be written to the console where MQIPT was started.
This is particularly useful for debugging SSL/TLS handshake errors on routes with SSLClient or
SSLServer set to true.
-Djava.security.debug=access,failure
This option enables diagnostics for the Java Security Manager policy, for MQIPT instances with
SecurityManager set to true. Setting this option causes a detailed log of security activities and
their required permissions to be written to the console where MQIPT was started. It can be used to
identify missing permissions in the policy file.
Here is an example of enabling both of these settings on AIX and Linux platforms:
MQIPT_JVM_OPTIONS="-Djavax.net.debug=all -Djava.security.debug=access,failure"
export MQIPT_JVM_OPTIONS
92 Troubleshooting and Support for IBM MQ
Here is an example of enabling both of these settings on Windows platforms:
set MQIPT_JVM_OPTIONS=-Djavax.net.debug=all -Djava.security.debug=access,failure
For these settings to take effect, you must restart MQIPT from the command prompt where the
environment variable is set.
For another use of MQIPT_JVM_OPTIONS when diagnosing problems, see “Tracing errors in
mqiptKeyman and mqiptKeycmd” on page 420.
Troubleshooting IBM MQ MQI client application problems
This collection of topics contains information about techniques for solving problems in IBM MQ MQI client
applications.
An application running in the IBM MQ MQI client environment receives MQRC_* reason codes in the
same way as IBM MQ server applications. However, there are additional reason codes for error conditions
associated with IBM MQ MQI clients. For example:
• Remote machine not responding
• Communications line error
• Invalid machine address
The most common time for errors to occur is when an application issues an MQCONN or MQCONNX
and receives the response MQRC_Q_MQR_NOT_AVAILABLE. Look in the client error log for a message
explaining the failure. There might also be errors logged at the server, depending on the nature of the
failure. Also, check that the application on the IBM MQ MQI client is linked with the correct library file.
IBM MQ MQI client fails to make a connection
An MQCONN or MQCONNX might fail because there is no listener program running on the server, or during
protocol checking.
When the IBM MQ MQI client issues an MQCONN or MQCONNX call to a server, socket and port
information is exchanged between the IBM MQ MQI client and the server. For any exchange of information
to take place, there must be a program on the server with the role to 'listen' on the communications line
for any activity. If there is no program doing this, or there is one but it is not configured correctly, the
MQCONN or MQCONNX call fails, and the relevant reason code is returned to the IBM MQ MQI client
application.
If the connection is successful, IBM MQ protocol messages are exchanged and further checking takes
place. During the IBM MQ protocol checking phase, some aspects are negotiated while others cause the
connection to fail. It is not until all these checks are successful that the MQCONN or MQCONNX call
succeeds.
For information about the MQRC_* reason codes, see API completion and reason codes.
Stopping IBM MQ MQI clients
Even though an IBM MQ MQI client has stopped, it is still possible for the associated process at the server
to be holding its queues open. The queues are not closed until the communications layer detects that the
partner has gone.
If sharing conversations is enabled, the server channel is always in the correct state for the
communications layer to detect that the partner has gone.
Error messages with IBM MQ MQI clients
When an error occurs with an IBM MQ MQI client system, error messages are put into the IBM MQ system
error files.
IBM MQ troubleshooting and support 93
• On AIX and Linux systems, these files are found in the /var/mqm/errors
directory
• On Windows, these files are found in the errors subdirectory of the IBM MQ MQI client
installation. Usually this directory is C:\Program Files\IBM\MQ\errors.
• On IBM i, these files are found in the /QIBM/UserData/mqm/errors directory
Certain client errors can also be recorded in the IBM MQ error files associated with the server to which the
client was connected.
Troubleshooting IBM MQ .NET problems
Troubleshooting information to help you solve a problem with running IBM MQ .NET applications.
Related tasks
“Tracing IBM MQ .NET applications” on page 421
There are several different ways to enable trace for IBM MQ .NET applications. You normally need to use
the trace facility only at the request of IBM Support.
“Contacting IBM Support” on page 301
If you need help with a problem that you are having with IBM MQ, you can contact IBM Support through
the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and
other news.
“Troubleshooting XMS .NET problems” on page 244
Troubleshooting information to help you solve a problem with running XMS .NET applications.
Developing .NET applications
Troubleshooting with .NET sample applications and error messages
You can use the .NET sample applications and error messages to help with troubleshooting problems.
Procedure
• If an IBM MQ .NET application does not complete successfully, run one of the .NET sample
applications, and follow the advice given in the diagnostic messages.
These sample applications are described in Sample applications for .NET.
If the problems continue and you need to contact the IBM Support team, you might be asked to turn
on the trace facility. For information on using the trace facility, see “Tracing IBM MQ .NET applications”
on page 421.
• If the An unhandled exception of type System.IO.FileNotFoundException occurred
in unknown module error occurs for either amqmdnet.dll or amqmdxcs.dll, take one of the
following actions:
– Ensure that both are registered in the global assembly cache.
– Create a configuration file that points to the amqmdnet.dll and amqmdxcs.dll assemblies.
You can examine and change the contents of the assembly cache using mscorcfg.msc, which is
supplied as part of .NET Framework.
If .NET Framework was unavailable when IBM MQ was installed, the classes might not be registered in
the global assembly cache. You can manually rerun the registration process using the command
amqidnet -c MQ_INSTALLATION_PATH\bin\amqidotn.txt -l logfile.txt
MQ_INSTALLATION_PATH represents the high-level directory in which IBM MQ is installed.
Information about this installation is written to the specified log file, which is logfile.txt in this
example.
94 Troubleshooting and Support for IBM MQ
Related tasks
Installing IBM MQ classes for .NET
Resolving FileLoadException errors for
amqmdnetstd.dll
From IBM MQ 9.3.1, if you try to run a .NET Framework application using the .NET 6-based
amqmdnetstd.dll client library and the application was compiled using the amqmdnetstd.dll client
library from a version lower than IBM MQ 9.3.1, this causes .NET to throw a FileLoadException error.
About this task
From IBM MQ 9.3.1, the amqmdnetstd.dll client library installed in the default location is based
on .NET 6. The amqmdnetstd.dll client library based on .NET Standard has been moved to a new
location in the IBM MQ client installation package and is now available in the following locations:
• On Windows: MQ_INSTALLATION_PATH\bin\netstandard2.0
• On Linux: MQ_INSTALLATION_PATH\lib64\netstandard2.0
From IBM MQ 9.3.1, a new warning CS0618 is thrown to an application during compile time
when IBM MQ .NET Standard libraries are referenced to the application. The IBM MQ .NET Standard
libraries are deprecated, and IBM intends to remove them in a future IBM MQ release.
If a .NET Framework application is compiled using amqmdnetstd.dll from a version lower than IBM MQ
9.3.1 and the same application is run using the .NET 6 based IBM MQ client library, then the following
FileLoadException type of exception is thrown by .NET:
Exception caught: System.IO.FileLoadException: Could not load file or assembly
'amqmdnetstd, Version=x.x.x.x, Culture=neutral, PublicKeyToken=23d6cb914eeaac0e' or
one of its dependencies. The located assembly's manifest definition does not match the
assembly reference. (Exception from HRESULT: 0x80131040)
File name: 'amqmdnetstd, Version=x.x.x.x, Culture=neutral,
PublicKeyToken=23d6cb914eeaac0e'
Procedure
• To resolve the FileLoadException error, copy the amqmdnetstd.dll library present in
MQ_INSTALLATION_PATH/bin/netstandard2.0 to the directory from where the .NET Framework
application is running.
Related tasks
Installing IBM MQ classes for .NET
Common SSL error codes thrown by IBM MQ .NET client libraries
From IBM MQ 9.3.3, improvements to the IBM MQ .NET client (amqmdnetstd.dll) diagnostic messages
provide a more specific exception mechanism for SSL-related issues.
From IBM MQ 9.3.3, the IBM MQ .NET client libraries provide meaningful and specific errors for SSL-
related errors. The MQRC reason codes are in line with the other .NET client libraries, such as C.
The following table shows some of the many scenarios where, from IBM MQ 9.3.3, IBM MQ .NET client
libraries throw errors that are aligned with other client .NET libraries:
IBM MQ troubleshooting and support 95
Table 2. Comparison of error messages
Scenario Error message before IBM MQ Error message from IBM MQ
9.3.3 9.3.3
When the parameter provided for 2059 – 2381 –
the SSL key repository, MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
MQC.MQCA_SSL_KEY_REPOSITO R
RY or
MQEnvironment.SSLKeyReposito
ry, is given incorrectly.
When an invalid cipher suite is 2538 – 2393 –
set on the client while connecting MQRC_HOST_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
to the IBM MQ server using SSL. R
When an invalid peer name is set 2059 – 2399 –
on the client while connecting to MQRC_Q_MGR_NOT_AVAILABLE MQRC_SSL_PEER_NAME_ERROR
the IBM MQ server using SSL.
When peer names do not match 2059 – 2398 –
while connecting to the IBM MQ MQRC_Q_MGR_NOT_AVAILABLE MQRC_SSL_PEER_NAME_ERROR
server using SSL.
When an invalid certificate is set 2059 – 2393 –
on either the client or server MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
during the SSL handshake. R
When the channel that is used 2059 – 2393 –
to provide an SSL connectivity MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
between the client and server R
does not provide a cipher suite.
When there is a mismatch 2059 – 2393 –
between the cipher suite MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
algorithms set from the client R
and the IBM MQ server.
When there is no permission to 2059 – 2393 –
the folder where IBM MQ key MQRC_Q_MGR_NOT_AVAILABLE MQRC_KEY_REPOSITORY_ERRO
repository is created. R
For a more detailed explanation of the errors, refer to the queue manager logs found in
MQ_DATA_DIRECTORY/qmgrs/errors/AMQERR*.log.
Related concepts
Installing IBM MQ classes for .NET
Troubleshooting Java and JMS problems
Use the advice that is given here to help you to resolve common problems that can arise when you are
using Java or JMS applications.
Related concepts
Using IBM MQ classes for JMS
Using the IBM MQ resource adapter
Using IBM MQ classes for Java
Related tasks
“Tracing JMS/Jakarta Messaging and Java applications” on page 425
96 Troubleshooting and Support for IBM MQ
The trace facilities for JMS/Jakarta Messaging and Java applications are provided to help IBM Support
diagnose your problems and issues. You can trace various different resources.
“Contacting IBM Support” on page 301
If you need help with a problem that you are having with IBM MQ, you can contact IBM Support through
the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and
other news.
Troubleshooting IBM MQ classes for JMS problems
You can investigate problems by running the installation verification programs, and by using the trace and
log facilities.
Procedure
• If an application does not complete successfully, run one of the installation verification programs and
follow the advice given in the diagnostic messages.
For more information, see The point-to-point IVT for IBM MQ classes for JMS and The publish/
subscribe IVT for IBM MQ classes for JMS.
Related tasks
“Tracing IBM MQ classes for JMS applications” on page 426
The trace facility in IBM MQ classes for JMS is provided to help IBM Support to diagnose customer issues.
Various properties control the behavior of this facility.
Logging errors for IBM MQ classes for JMS
By default, log output is sent to the mqjms.log file. You can redirect it to a specific file or directory.
About this task
The IBM MQ classes for JMS log facility is provided to report serious problems, particularly problems that
might indicate configuration errors rather than programming errors. By default, log output is sent to the
mqjms.log file in the JVM working directory.
You can redirect log output to another file by setting the property
com.ibm.msg.client.commonservices.log.outputName. The value for this property can be:
• A single path name.
• A comma-separated list of path names (all data is logged to all files).
Each path name can be:
• Absolute or relative.
• stderr or System.err to represent the standard error stream.
• sttdout or System.out to represent the standard output stream.
If the value of the property identifies a directory, log output is written to mqjms.log in that directory. If
the value of the property identifies a specific file, log output is written to that file.
Procedure