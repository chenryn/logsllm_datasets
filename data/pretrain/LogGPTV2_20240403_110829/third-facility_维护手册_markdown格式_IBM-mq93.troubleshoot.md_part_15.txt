### Checking for End-to-End Connectivity

If you are unable to establish a connection, review the connection log to ensure that the routes are configured correctly. Follow these steps to create and analyze the connection log:

1. **Create the Connection Log:**
   - In the `mqipt.conf` configuration file, set the `ConnectionLog` property to `true`.
   - Restart or refresh MQIPT and attempt to establish a connection. For more details, refer to the "Connection Logs" section.

2. **Analyze the Connection Log:**
   - **If the connection log is not created in the logs directory under the home directory:** This indicates that MQIPT has not been installed correctly.
   - **If no connection attempts are recorded:** The sender is not set up correctly.
   - **If connection attempts are recorded:** Verify that MQIPT is forwarding messages to the correct address.

### Automatically Starting MQIPT

MQIPT can be set to start automatically when the system boots if installed as a Windows service, AIX, or Linux System V init service. If the service does not start correctly, follow the troubleshooting steps below.

**General Recommendation:**
- Always manually start MQIPT before installing it as a service to confirm that the installation is correct.
- For detailed instructions on using `mqiptService` to start MQIPT automatically, see the "Starting and Stopping MQIPT" section.

#### On Windows Systems

If the MQIPT service does not start correctly, complete the following steps:

1. **Check Configuration Settings:**
   - Open the Windows Registry Editor and navigate to `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\MQInternetPassThru`.
   - Ensure that the `ConfigFilePath` setting contains the correct path to the `mqipt.conf` configuration file.
   - Verify that the `ImagePath` setting contains the correct path to `mqiptService.exe`.

2. **Run Debug Command:**
   - Run the `mqiptService -debugevents` command from an Administrator Command Prompt to write service startup information in the Windows application event log.
   - Examine the diagnostic information in the Command Prompt console window to determine the cause of the failure.

3. **Examine Error Files:**
   - If the cause of the failure is still unclear, use Windows File Explorer to navigate to the directory specified in `ConfigFilePath` where `mqipt.conf` is located.
   - Check the contents of the `errors` subdirectory for FDC files containing FFST records.

4. **Enable Trace:**
   - If the cause of the failure remains unclear, enable trace by setting the `Trace` property to `5` in the `[global]` section of `mqipt.conf`.
   - Restart the MQIPT service. A trace file will be written in the MQIPT errors directory.
   - If necessary, contact IBM Software Support and provide the trace file, any FDC files, and the diagnostic output from the `mqiptService -debugevents` command.

#### On AIX and Linux Systems

On Linux, the MQIPT service is supported only on operating systems that support System V init. For systems that do not support System V init, use another method, such as systemd, to manage MQIPT as a service.

If the MQIPT service does not start correctly, complete the following steps as the root user:

1. **Check Service Installation:**
   - On AIX, run the command `lsitab mqipt` and verify that the output shows the correct installation directory. For example:
     ```
     mqipt:2:once:/usr/opt/mqipt/bin/mqipt /usr/opt/mqipt > /dev/console 2>&1
     ```
     Ensure that the MQIPT executable exists and is executable by the root user.
   - On Linux, check for the existence of the MQIPT init.d script at `/etc/init.d/mqipt`. The script must exist and be executable by the root user.

2. **Verify Configuration File:**
   - Ensure that the installation directory contains the `mqipt.conf` file, which must be readable by the root user.

3. **Check Startup Output:**
   - On AIX, the MQIPT output is sent to `/dev/console`.
   - On Linux, the output is sent to a file named `console.log` in the `logs` directory of the MQIPT installation.
   - Look for any MQIPT errors and address the cause. If no console output is present, MQIPT was not started by the operating system. Consult your operating system documentation for details on diagnosing service startup failures.

4. **Examine Error Files:**
   - Navigate to the MQIPT installation directory where `mqipt.conf` is located.
   - Check the contents of the `errors` subdirectory for FDC files containing FFST records.

5. **Enable Trace:**
   - If the cause of the failure is still unclear, enable trace by setting the `Trace` property to `5` in the `[global]` section of `mqipt.conf`.
   - Restart the MQIPT service. A trace file will be written in the MQIPT errors directory.
   - If necessary, contact IBM Software Support and provide the trace file, any FDC files, and the diagnostic output from `/dev/console` (on AIX) or `console.log` (on Linux).

### Using JRE Diagnostic Options

In some cases, you may need to use diagnostic functions built into the Java Runtime Environment (JRE). These should typically be used under the direction of your IBM Software Support representative, as some settings might impair normal MQIPT operation.

The `MQIPT_JVM_OPTIONS` environment variable can be used to pass diagnostic options to the underlying MQIPT JRE via the command line. All valid command parameters for the IBM JRE supplied with MQIPT can be used.

**Common Diagnostic Options:**

- **-Djavax.net.debug=all:**
  - Enables diagnostics for SSL/TLS and network throughput.
  - Writes a detailed log of internal network operations to the console where MQIPT was started.
  - Useful for debugging SSL/TLS handshake errors on routes with `SSLClient` or `SSLServer` set to `true`.

- **-Djava.security.debug=access,failure:**
  - Enables diagnostics for the Java Security Manager policy, for MQIPT instances with `SecurityManager` set to `true`.
  - Writes a detailed log of security activities and their required permissions to the console where MQIPT was started.
  - Can be used to identify missing permissions in the policy file.

**Example Usage:**

- **AIX and Linux:**
  ```sh
  export MQIPT_JVM_OPTIONS="-Djavax.net.debug=all -Djava.security.debug=access,failure"
  ```

- **Windows:**
  ```cmd
  set MQIPT_JVM_OPTIONS=-Djavax.net.debug=all -Djava.security.debug=access,failure
  ```

For these settings to take effect, you must restart MQIPT from the command prompt where the environment variable is set.

For additional uses of `MQIPT_JVM_OPTIONS` when diagnosing problems, see “Tracing errors in `mqiptKeyman` and `mqiptKeycmd`” on page 420.

### Troubleshooting IBM MQ MQI Client Application Problems

This section provides techniques for solving problems in IBM MQ MQI client applications.

**Error Handling:**
- An application running in the IBM MQ MQI client environment receives `MQRC_*` reason codes in the same way as IBM MQ server applications. However, there are additional reason codes for error conditions associated with IBM MQ MQI clients, such as:
  - Remote machine not responding
  - Communications line error
  - Invalid machine address

**Common Error Scenarios:**
- **MQCONN or MQCONNX Failure:**
  - An `MQCONN` or `MQCONNX` call might fail if there is no listener program running on the server or during protocol checking.
  - When the IBM MQ MQI client issues an `MQCONN` or `MQCONNX` call to a server, socket and port information is exchanged between the client and the server.
  - For any exchange of information to take place, there must be a program on the server with the role to 'listen' on the communications line for any activity. If there is no program doing this, or if it is not configured correctly, the `MQCONN` or `MQCONNX` call fails, and the relevant reason code is returned to the IBM MQ MQI client application.
  - If the connection is successful, IBM MQ protocol messages are exchanged, and further checking takes place. During the IBM MQ protocol checking phase, some aspects are negotiated while others cause the connection to fail. It is not until all these checks are successful that the `MQCONN` or `MQCONNX` call succeeds.

For more information about `MQRC_*` reason codes, see the "API Completion and Reason Codes" section.

### Stopping IBM MQ MQI Clients

Even after an IBM MQ MQI client has stopped, the associated process at the server might still hold its queues open. The queues are not closed until the communications layer detects that the partner has gone.

**Sharing Conversations:**
- If sharing conversations is enabled, the server channel is always in the correct state for the communications layer to detect that the partner has gone.

### Error Messages with IBM MQ MQI Clients

When an error occurs with an IBM MQ MQI client system, error messages are placed into the IBM MQ system error files.

**Location of Error Files:**
- **AIX and Linux:**
  - `/var/mqm/errors` directory
- **Windows:**
  - `C:\Program Files\IBM\MQ\errors` (or the `errors` subdirectory of the IBM MQ MQI client installation)
- **IBM i:**
  - `/QIBM/UserData/mqm/errors` directory

Certain client errors can also be recorded in the IBM MQ error files associated with the server to which the client was connected.

### Troubleshooting IBM MQ .NET Problems

This section provides troubleshooting information to help you solve problems with running IBM MQ .NET applications.

**Related Tasks:**
- **Tracing IBM MQ .NET Applications:**
  - There are several ways to enable trace for IBM MQ .NET applications. You normally need to use the trace facility only at the request of IBM Support.
- **Contacting IBM Support:**
  - If you need help with a problem, you can contact IBM Support through the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and other news.
- **Troubleshooting XMS .NET Problems:**
  - Troubleshooting information to help you solve problems with running XMS .NET applications.

### Developing .NET Applications

You can use .NET sample applications and error messages to help with troubleshooting problems.

**Procedure:**
- **Running Sample Applications:**
  - If an IBM MQ .NET application does not complete successfully, run one of the .NET sample applications and follow the advice given in the diagnostic messages.
  - These sample applications are described in "Sample Applications for .NET."
  - If the problems continue and you need to contact the IBM Support team, you might be asked to turn on the trace facility. For information on using the trace facility, see “Tracing IBM MQ .NET applications” on page 421.

**Handling Specific Errors:**
- **System.IO.FileNotFoundException:**
  - If the error `An unhandled exception of type System.IO.FileNotFoundException occurred in unknown module` occurs for either `amqmdnet.dll` or `amqmdxcs.dll`, take one of the following actions:
    - Ensure that both are registered in the global assembly cache.
    - Create a configuration file that points to the `amqmdnet.dll` and `amqmdxcs.dll` assemblies.
  - You can examine and change the contents of the assembly cache using `mscorcfg.msc`, which is supplied as part of the .NET Framework.
  - If the .NET Framework was unavailable when IBM MQ was installed, the classes might not be registered in the global assembly cache. You can manually rerun the registration process using the command:
    ```sh
    amqidnet -c MQ_INSTALLATION_PATH\bin\amqidotn.txt -l logfile.txt
    ```
    - `MQ_INSTALLATION_PATH` represents the high-level directory in which IBM MQ is installed.
    - Information about this installation is written to the specified log file, which is `logfile.txt` in this example.

### Resolving FileLoadException Errors for `amqmdnetstd.dll`

From IBM MQ 9.3.1, if you try to run a .NET Framework application using the .NET 6-based `amqmdnetstd.dll` client library and the application was compiled using the `amqmdnetstd.dll` client library from a version lower than IBM MQ 9.3.1, this causes .NET to throw a `FileLoadException` error.

**About This Task:**
- From IBM MQ 9.3.1, the `amqmdnetstd.dll` client library installed in the default location is based on .NET 6. The .NET Standard-based `amqmdnetstd.dll` client library has been moved to a new location in the IBM MQ client installation package and is now available in the following locations:
  - **Windows:**
    - `MQ_INSTALLATION_PATH\bin\netstandard2.0`
  - **Linux:**
    - `MQ_INSTALLATION_PATH\lib64\netstandard2.0`

- From IBM MQ 9.3.1, a new warning `CS0618` is thrown to an application during compile time when IBM MQ .NET Standard libraries are referenced to the application. The IBM MQ .NET Standard libraries are deprecated, and IBM intends to remove them in a future IBM MQ release.

**Error Example:**
- If a .NET Framework application is compiled using `amqmdnetstd.dll` from a version lower than IBM MQ 9.3.1 and the same application is run using the .NET 6-based IBM MQ client library, the following `FileLoadException` type of exception is thrown by .NET:
  ```plaintext
  Exception caught: System.IO.FileLoadException: Could not load file or assembly
  'amqmdnetstd, Version=x.x.x.x, Culture=neutral, PublicKeyToken=23d6cb914eeaac0e' or
  one of its dependencies. The located assembly's manifest definition does not match the
  assembly reference. (Exception from HRESULT: 0x80131040)
  File name: 'amqmdnetstd, Version=x.x.x.x, Culture=neutral,
  PublicKeyToken=23d6cb914eeaac0e'
  ```

**Resolution:**
- To resolve the `FileLoadException` error, copy the `amqmdnetstd.dll` library present in `MQ_INSTALLATION_PATH/bin/netstandard2.0` to the directory from where the .NET Framework application is running.

### Common SSL Error Codes Thrown by IBM MQ .NET Client Libraries

From IBM MQ 9.3.3, improvements to the IBM MQ .NET client (`amqmdnetstd.dll`) diagnostic messages provide a more specific exception mechanism for SSL-related issues.

**Comparison of Error Messages:**

| Scenario | Error Message Before IBM MQ 9.3.3 | Error Message From IBM MQ 9.3.3 |
|----------|----------------------------------|---------------------------------|
| Incorrect SSL key repository parameter | 2059 – MQRC_Q_MGR_NOT_AVAILABLE | 2381 – MQRC_KEY_REPOSITORY_ERROR |
| Invalid cipher suite | 2538 – MQRC_HOST_NOT_AVAILABLE | 2393 – MQRC_KEY_REPOSITORY_ERROR |
| Invalid peer name | 2059 – MQRC_Q_MGR_NOT_AVAILABLE | 2399 – MQRC_SSL_PEER_NAME_ERROR |
| Peer names do not match | 2059 – MQRC_Q_MGR_NOT_AVAILABLE | 2398 – MQRC_SSL_PEER_NAME_ERROR |
| Invalid certificate | 2059 – MQRC_Q_MGR_NOT_AVAILABLE | 2393 – MQRC_KEY_REPOSITORY_ERROR |
| No cipher suite provided by channel | 2059 – MQRC_Q_MGR_NOT_AVAILABLE | 2393 – MQRC_KEY_REPOSITORY_ERROR |
| Mismatched cipher suite algorithms | 2059 – MQRC_Q_MGR_NOT_AVAILABLE | 2393 – MQRC_KEY_REPOSITORY_ERROR |
| No permission to key repository folder | 2059 – MQRC_Q_MGR_NOT_AVAILABLE | 2393 – MQRC_KEY_REPOSITORY_ERROR |

For a more detailed explanation of the errors, refer to the queue manager logs found in `MQ_DATA_DIRECTORY/qmgrs/errors/AMQERR*.log`.

### Troubleshooting Java and JMS Problems

Use the advice provided here to help you resolve common problems that can arise when using Java or JMS applications.

**Related Concepts:**
- **Using IBM MQ Classes for JMS:**
  - Refer to the "Using IBM MQ Classes for JMS" section.
- **Using the IBM MQ Resource Adapter:**
  - Refer to the "Using the IBM MQ Resource Adapter" section.
- **Using IBM MQ Classes for Java:**
  - Refer to the "Using IBM MQ Classes for Java" section.

**Related Tasks:**
- **Tracing JMS/Jakarta Messaging and Java Applications:**
  - The trace facilities for JMS/Jakarta Messaging and Java applications are provided to help IBM Support diagnose your problems and issues. You can trace various different resources.
- **Contacting IBM Support:**
  - If you need help with a problem, you can contact IBM Support through the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and other news.

### Troubleshooting IBM MQ Classes for JMS Problems

You can investigate problems by running the installation verification programs and using the trace and log facilities.

**Procedure:**
- **Running Installation Verification Programs:**
  - If an application does not complete successfully, run one of the installation verification programs and follow the advice given in the diagnostic messages.
  - For more information, see "The Point-to-Point IVT for IBM MQ Classes for JMS" and "The Publish/Subscribe IVT for IBM MQ Classes for JMS."

**Related Tasks:**
- **Tracing IBM MQ Classes for JMS Applications:**
  - The trace facility in IBM MQ Classes for JMS is provided to help IBM Support diagnose customer issues. Various properties control the behavior of this facility.
- **Logging Errors for IBM MQ Classes for JMS:**
  - By default, log output is sent to the `mqjms.log` file. You can redirect it to a specific file or directory.
  - **About This Task:**
    - The IBM MQ Classes for JMS log facility is provided to report serious problems, particularly those that might indicate configuration errors rather than programming errors.
    - By default, log output is sent to the `mqjms.log` file in the JVM working directory.
  - **Redirecting Log Output:**
    - You can redirect log output to another file by setting the property `com.ibm.msg.client.commonservices.log.outputName`.
    - The value for this property can be:
      - A single path name.
      - A comma-separated list of path names (all data is logged to all files).
    - Each path name can be:
      - Absolute or relative.
      - `stderr` or `System.err` to represent the standard error stream.
      - `stdout` or `System.out` to represent the standard output stream.
    - If the value of the property identifies a directory, log output is written to `mqjms.log` in that directory. If the value of the property identifies a specific file, log output is written to that file.