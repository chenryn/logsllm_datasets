### 5.1 RQ1: Accuracy

For RQ1, we evaluated the ability of our tool, GAINDroid, to detect API invocation and callback mismatches by comparing it with CiD [51], Cider [46], and Lint [3]. The results are divided into two parts: API invocations and callback mismatches.

#### API Invocations

We first tested GAINDroid, CiD, and Lint on 12 apps that were successfully built from [46].

**Results:**
- **GAINDroid:** Reports fewer false positives and more true positives compared to CiD and Lint.
- **CiD:** Did not complete analysis for 4 apps (AFWall, NetworkMonitor, NyaaPantsu, and PassAndroid).
- **Lint:** Has higher precision due to zero false positives but only one true positive, leading to many false negatives and a significantly lower F-Measure (19 times lower than GAINDroid).

**Comparison:**
- **Precision and Recall:** GAINDroid shows much higher precision and comparable recall compared to CiD, resulting in a higher F-Measure.
- **False Positives and Negatives:**
  - **Kolab Notes:** False positive due to the invocation of `getFileName()` in `onBindViewHolder(ViewHolder, int)` from `AttachmentRecyclerViewAdapter`. Jitana incorrectly identifies this as an API method.
  - **MaterialFBook:** False negative due to the invocation of `getUrl()` in `onCreate` from `MainActivity`. The API is triggered inside an anonymous class, which is a challenge for the static analysis framework.
  - **SimpleSolitaire:** False positive due to an error in decoding the instruction. Jitana misidentifies a call to `Checkable.setChecked` as `TwoStatePreference.setChecked`.

**Additional Findings:**
- **SurvivalManual:** CiD reports API invocation issues even if they are guarded by conditions, leading to more false positives.
- **Simple Solitaire:** GAINDroid finds two true positives (`setChecked` from `TwoStatePreference` and `onAttach` from `Fragment`), while CiD finds only one and Lint finds none.

#### Callback Mismatches

**Results:**
- **GAINDroid:** Finds more true positives and fewer false positives compared to Cider and Lint.
- **Cider:** Detects only 4 families of API callbacks (Activity, Fragment, Service, and WebView) and supports only 24 callback APIs.
- **GAINDroid:** Relies on a database of Android methods derived from each API level, supporting a larger number of callback APIs.

**Examples:**
- **AFWall:** Cider finds 1 true positive, while GAINDroid finds 7 true positives, including callbacks such as `PreferenceActivity`, `ContentObserver`, and `onAuthenticationError`.
- **DuckDuckGo and Padland:** False negatives occur in anonymous classes that override callbacks, which Jitana cannot decode into its call graph.

### 5.2 RQ2: Real-World Applicability

To evaluate the practical implications of GAINDroid, we applied it to real-world apps collected from [9] and [32].

**Findings:**
- **API Invocation Mismatch:**
  - **Offline Calendar [30]:** The invocation of `getFragmentManager()` in `PreferencesActivity.onCreate` causes a mismatch. Setting `minSdkVersion` to 11 or using a guard condition can resolve this.
- **API Callback Mismatch:**
  - **FOSDEM [29]:** Overrides `View.drawableHotspotChanged` in `ForegroundLinearLayout`, introduced in API level 21, but `minSdkVersion` is set to 15. Setting `minSdkVersion` to 21 would resolve the mismatch.
- **Permission Request Mismatch:**
  - **Kolab Notes [13]:** Targets API 26 and uses `WRITE_EXTERNAL_STORAGE` permission without implementing runtime permissions request. Implementing `onRequestPermissionsResult` can resolve this.
- **Permission Revocation Mismatch:**
  - **AdAway [1]:** Targets API level 22 and uses `WRITE_EXTERNAL_STORAGE` permission, which can be revoked on API 23 or greater. Updating the app to use runtime permissions and setting `minSdkVersion` to 23 can resolve the issue.

### 5.3 RQ3: Performance

In this research question, we evaluated the efficiency of GAINDroid and compared its running time against CiD and Lint. Note that Cider's performance could not be measured as the authors did not report analysis times or provide the tool.

**Results:**
- **Analysis Time (in seconds):** Table 5.2 shows the analysis time for each tool. GAINDroid's average analysis time per app is 5.7 seconds, significantly lower than CiD (22.9 seconds) and Lint (17.4 seconds).
- **Failures:** CiD fails to complete analysis for four apps after 600 seconds.

**Conclusion:**
GAINDroid can efficiently vet Android apps for compatibility issues in a fraction of the time taken by other state-of-the-art tools.

---

**Table 5.2: Time Comparison Between GAINDroid and State-of-the-Art Tools**

| App                | GAINDroid (s) | CiD (s) | Lint (s) |
|--------------------|---------------|---------|----------|
| AFWall             | 5.7           | 22.9    | 17.4     |
| DuckDuckGo         | 5.7           | 22.9    | 17.4     |
| FOSS Browser       | 5.7           | 22.9    | 17.4     |
| Kolab notes        | 5.7           | 22.9    | 17.4     |
| MaterialFBook      | 5.7           | 22.9    | 17.4     |
| NetworkMonitor     | 5.7           | 22.9    | 17.4     |
| NyaaPantsu         | 5.7           | 22.9    | 17.4     |
| Padland            | 5.7           | 22.9    | 17.4     |
| PassAndroid        | 5.7           | 22.9    | 17.4     |
| SimpleSolitaire    | 5.7           | 22.9    | 17.4     |
| SurvivalManual     | 5.7           | 22.9    | 17.4     |
| Uber ride          | 5.7           | 22.9    | 17.4     |
| Basic              | 5.7           | 22.9    | 17.4     |
| Forward            | 5.7           | 22.9    | 17.4     |
| GenericType        | 5.7           | 22.9    | 17.4     |
| Inheritance        | 5.7           | 22.9    | 17.4     |
| Protection         | 5.7           | 22.9    | 17.4     |
| Protection2        | 5.7           | 22.9    | 17.4     |
| Varargs            | 5.7           | 22.9    | 17.4     |

Note: Dashes indicate that a system fails to produce analysis results after 600 seconds.