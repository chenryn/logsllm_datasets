    u_int8_t seq;
    if (caplen > 10) & 0x3) {
    case 0x00:
    ND_PRINT((ndo,"none "));
    break;
    case 0x01:
    ND_PRINT((ndo,"reserved destination addressing mode"));
    return 0;
    case 0x02:
    panid = EXTRACT_LE_16BITS(p);
    p += 2;
    ND_PRINT((ndo,"%04x:%04x ", panid, EXTRACT_LE_16BITS(p)));
    p += 2;
    break;
    case 0x03:
    panid = EXTRACT_LE_16BITS(p);
    p += 2;
    ND_PRINT((ndo,"%04x:%s ", panid, le64addr_string(p)));
    p += 8;
    break;
    }
    ND_PRINT((ndo,"> 14) & 0x3) {
    case 0x00:
    ND_PRINT((ndo,"none "));
    break;
    case 0x01:
    ND_PRINT((ndo,"reserved source addressing mode"));
    return 0;
    case 0x02:
    if (!(fc & (1     test   esi, esi
       0x40aa65     jne    ieee802_15_4_if_print+137 
       0x40aa6b     mov    dword ptr [rsp + 0xc], eax
       0x40aa6f     mov    rsi, qword ptr [rsp]
       0x40aa73     mov    rdi, r15
     ► 0x40aa76     call   qword ptr [r15 + 0xf0] 
            rdi: 0x820140 (Gndo) ◂— 0x0
            rsi: 0x822585 ◂— 0x0
            rdx: 0xfffffff3
            rcx: 0x7fffffeb
       0x40aa7d     mov    eax, dword ptr [rsp + 0xc]
       0x40aa81     add    rsp, 0x18
       0x40aa85     pop    rbx
       0x40aa86     pop    rbp
       0x40aa87     pop    r12
再次调用另一个函数地址为，此时传入的第三个参数即caplen已经变成一个很大的值0xfffffff3
    pwndbg> x/2i 0x45b270
       0x45b270 :    mov    edi,0x47fe57
       0x45b275 :    jmp    0x40ca80 
可知该函数会继续跳转执行函数，继续跟进去
    ► 0x45b275                    jmp    hex_and_ascii_print 
        ↓
       0x40ca80                    xor    ecx, ecx
       0x40ca82                  jmp    hex_and_ascii_print_with_offset 
最终来到了hex_and_ascii_print_with_offset 函数，也是我们回溯调用的时候的最后一个函数
    ────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────────────────────
     RAX  0x7ffffff9
     RBX  0xfffffff3
     RCX  0x0
     RDX  0xfffffff3
     RDI  0x47fe57 ◂— or     cl, byte ptr [rcx] /* '\n\t' */
     RSI  0x822585 ◂— 0x0
     R8   0x0
     R9   0x1c
     R10  0x6
     R11  0x470fc9 ◂— 0x41006e6f63616542 /* 'Beacon' */
     R12  0x12
     R13  0x822570 ◂— 0x7f72a00600ff40
     R14  0x3
     R15  0x820140 (Gndo) ◂— 0x0
     RBP  0xff40
     RSP  0x7fffffffca08 ◂— 0x12
     RIP  0x40c85c (hex_and_ascii_print_with_offset+12) ◂— push   rbp
    ───────────────────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────────────────
       0x40c852      mov    eax, edx
       0x40c854      push   r14
       0x40c856      push   r13
       0x40c858      push   r12
       0x40c85a     shr    eax, 1
     ► 0x40c85c     push   rbp
       0x40c85d     push   rbx
       0x40c85e     lea    rax, [rsi + rax*2]
       0x40c862     mov    r12, rsi
       0x40c865     xor    r14d, r14d
       0x40c868     sub    rsp, 0x198
对应的的c如下
    nshorts = length / sizeof(u_short);
    i = 0;
    hsp = hexstuff; asp = asciistuff;
    while (--nshorts >= 0) {
    s1 = *cp++;
    s2 = *cp++;
除法以后，nshorts的值仍然很大，导致进行了过多的循环，使指针访问到了不可访问内存
思考  
那么caplen这个值需要多大才可以呢？
    In file: /home/kaka/DEBUG/tcpdump-4.5.1/print-802_15_4.c
       109 
       110 seq = EXTRACT_LE_8BITS(p + 2);
       111 
       112 p += 3;
       113 caplen -= 3;
     ► 114 
       115 ND_PRINT((ndo,"IEEE 802.15.4 %s packet ", ftypes[fc & 0x7]));
       116 if (vflag)
       117 ND_PRINT((ndo,"seq %02x ", seq));
       118 if (hdrlen == -1) {
       119 ND_PRINT((ndo,"malformed! "));
    ───────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────
    00:0000│ rsp  0x7fffffffca30 —▸ 0x822573 ◂— 0xb8fb78007f72a006
    01:0008│      0x7fffffffca38 —▸ 0x822570 ◂— 0x7f72a00600ff40
    02:0010│      0x7fffffffca40 —▸ 0x7fffffffcbd0 —▸ 0x820140 (Gndo) ◂— 0x0
    03:0018│      0x7fffffffca48 —▸ 0x7fffffffcac0 ◂— 0x8000
    04:0020│      0x7fffffffca50 —▸ 0x822570 ◂— 0x7f72a00600ff40
    05:0028│      0x7fffffffca58 —▸ 0x7fffffffcbd0 —▸ 0x820140 (Gndo) ◂— 0x0
    06:0030│      0x7fffffffca60 —▸ 0x7fffffffcab8 —▸ 0x822570 ◂— 0x7f72a00600ff40
    07:0038│      0x7fffffffca68 ◂— 0xffffffff
    ─────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────
     ► f 0           40aa2a ieee802_15_4_if_print+362
       f 1           45bb9f print_packet+79
       f 2     7ffff7bb3ac4
       f 3     7ffff7ba41cf pcap_loop+47
       f 4           403f27 main+3655
       f 5     7ffff77eb830 __libc_start_main+240
    pwndbg> p caplen 
    $4 = 5
此时的caplen为5
    124 if (!vflag) {
     ► 125 p+= hdrlen;
       126 caplen -= hdrlen;
       127 } else {
       128 u_int16_t panid = 0;
    //经调试，没有进入这个条件，所以caplen没变
       177 caplen -= hdrlen;
       178                 printf("caplen : %d\n",caplen);
     ► 179 }
       180     printf("after : %p\n",p);
       181 if (!suppress_default_print)
       182 (ndo->ndo_default_print)(ndo, p, caplen);
       183 
       184 return 0;
    ───────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────
    00:0000│ rsp  0x7fffffffca30 —▸ 0x822585 ◂— 0x0
    01:0008│      0x7fffffffca38 —▸ 0x822570 ◂— 0x7f72a00600ff40
    02:0010│      0x7fffffffca40 —▸ 0x7fffffffcbd0 —▸ 0x820140 (Gndo) ◂— 0x0
    03:0018│      0x7fffffffca48 —▸ 0x7fffffffcac0 ◂— 0x8000
    04:0020│      0x7fffffffca50 —▸ 0x822570 ◂— 0x7f72a00600ff40
    05:0028│      0x7fffffffca58 —▸ 0x7fffffffcbd0 —▸ 0x820140 (Gndo) ◂— 0x0
    06:0030│      0x7fffffffca60 —▸ 0x7fffffffcab8 —▸ 0x822570 ◂— 0x7f72a00600ff40
    07:0038│      0x7fffffffca68 ◂— 0xffffffff
    ─────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────
     ► f 0           40aa5b ieee802_15_4_if_print+411
       f 1           45bb9f print_packet+79
       f 2     7ffff7bb3ac4
       f 3     7ffff7ba41cf pcap_loop+47
       f 4           403f27 main+3655
       f 5     7ffff77eb830 __libc_start_main+240
    pwndbg> p caplen 
    $13 = 4294967283
最后 caplen这个值为-13，所以，caplen值最小为13+5+3=21 = 0x15
将数据包内的caplen字段修改成0x21以后没有再发生指针越界，此时的caplen为0，与len字段无关，甚至修改为0都可以。
    pwndbg> run -r crash
    Starting program: /usr/local/sbin/tcpdump -r crash
    reading from file crash, link-type IEEE802_15_4_NOFCS (IEEE 802.15.4 without FCS)
    17:06:08.000000 IEEE 802.15.4 Beacon packet 
    0x0000:  2b2b 2b2b 2b2b 2b85 c903 0000            +++++++.....
    tcpdump: pcap_loop: bogus savefile header
    [Inferior 1 (process 122683) exited with code 01]