困难得多。
5. 你决定停止这个项目去做其他工作。
38
推荐文章专 题| A |r Ttiocpleic
在本文开头，我们说设计文档的目的是确保正确地完成工作。在上述
的示例中，因为有了设计文档，你只花了 8 天时间而不是浪费了几个月才
决定要中止项目。在我看来，这似乎也是一个非常成功的结果。
39
InfoQ 架构师 2018 年 9 月
我用 Vue 和 React 构建了相同的应用程序，
这是他们的差异
作者 Sunil Sandhu 译者 无明
在工作中使用了 Vue 之后，我已经对它有了相当深入的了解。同时，
我也对 React 感到好奇。我阅读了 React 的文档，也看了一些教程视频，
虽然它们很棒，但我真正想知道的是 React 与 Vue 有哪些区别。这里所说
的区别，并不是指它们是否都具有虚拟 DOM 或者它们如何渲染页面。我
真正想要做的是对它们的代码进行并排比较，并搞清楚在使用这两个框架
开发应用时究竟有哪些差别。
我决定构建一个标准的待办事项应用程序，用户可以添加和删除待
办事项。我分别使用它们默认的 CLI（React 的 create-react-app 和 Vue 的
vue-cli）来创建这个应用。先让我们看一下这两个应用的外观。
两个应用程序的CSS代码几乎完全相同，但代码存放的位置存在差别。
40
理论派 | Theory
它们的结构也几乎完全相同，唯一的区别是 React 有三个 CSS 文件，
而 Vue 则没有。这是因为 React 组件需要一个附带的文件来保存样式，而
Vue 采用包含的方式，将样式声明在组件文件中。
从理论上讲，你可以使用老式的style.css文件来保存整个页面的样式，
这完全取决于你自己。不管怎样，还是展示一下 .vue 文件中的 CSS 代码
长什么样。
看完样式方面的问题，现在让我们深入了解其他细节！
41
InfoQ 架构师 2018 年 9 月
我们如何改变数据？
我们说“改变数据”，实际上就是指修改已经保存好的数据。比如，如
果我们想将一个人的名字从 John 改成 Mark，我们就要“改变数据”。这就
是 React 和 Vue 的关键区别之一。Vue 创建了一个数据对象，我们可以自
由地更新数据对象，而 React 创建了一个状态对象，要更新状态对象，需
要做更多琐碎的工作。下面是 React 的状态对象和 Vue 的数据对象之间的
对比。
从图中可以看到，我们传入的是相同的数据，它们只是标记的方式不
一样。但它们在如何改变这些数据方面却有很大的区别。
假设我们有一个数据元素 name:'Sunil'。
在 Vue 中，我们通过 this.name 来引用它。我们也可以通过 this.
42
理论派 | Theory
name='John' 来更新它，这样
会把名字改成 John。
在 React 中， 我 们 通
过 this.state.name 来 引 用
它。关键的区别在于，我们
不 能 简 单 地 通 过 this.state.
name='John' 来 更 新 它， 因
为 React 对此做出了限制。在
React 中，我们需要使用 this.
setState({name:'John'}) 的 方 式
来更新数据。
在了解了如何修改数据之
后，接下来让我们通过研究如
何在待办事项应用中添加新项
目来深入了解其他细节。
我们如何创建新待办事项？
React
：
createNewToDoItem = () => {
this.setState( ({ list, todo }) => ({
list: [
...list,
{
todo
}
],
todo: ''
})
);
};
43
InfoQ 架构师 2018 年 9 月
Vue
：
createNewToDoItem() {
this.list.push(
{
'todo': this.todo
}
);
this.todo = '';
}
React是怎么做到的？
在 React 中，input 有一个叫作 value 的属性。我们通过几个与创建双
向绑定相关的函数来自动更新 value。React 通过为 input 附加 onChange
函数来处理双向绑定。
只要 input 的值发生变化，就会执行 handleInput 函数。这个函数会
将状态对象中 todo 字段的值改为 input 中的值。这个函数看起来像这样：
handleInput = e => {
this.setState({
todo: e.target.value
});
};
现在，只要用户按下页面上的 + 按钮，createNewToDoItem 就会调用
this.setState，并传入一个函数。这个函数有两个参数，第一个是状态对象
的 list 数组，第二个是 todo（由 handleInput 函数更新）。然后函数会返
回一个新对象，这个对象包含之前的整个 list，然后将 todo 添加到 list 的
末尾。
最后，我们将 todo 设置为空字符串，它也会自动更新 input 中的值。
Vue是怎么做到的？
在 Vue 中，input 有一个叫作 v-model 的属性。我们可以用它来实现
44
理论派 | Theory
双向绑定。
v-model 将 input 绑定到数据对象 toDoItem 的一个 key 上。在加载页
面时，我们将 toDoItem 设置为空字符串，比如 todo:’’。如果 todo 不为空，
例如 todo:’add some text here'，那么 input 就会显示这个字符串。我们在
input 中输入的任何文本都会绑定到 todo。这实际上就是双向绑定（input
可以更新数据对象，数据对象也可以更新 input）。
因此，回看之前的 createNewToDoItem() 代码块，我们将 todo 的内容
放到 list 数组中，然后将 todo 更新为空字符串。
我们如何删除待办事项？
React
：
deleteItem = indexToDelete => {
this.setState(({ list }) => ({
list: list.filter((toDo, index) => index !== indexToDelete)
}));
};
React是怎么做到的？
虽然 deleteItem 函数位于 ToDo.js 中，我仍然可以在 ToDoItem.js 中
引用它，就是将 deleteItem() 函数作为  的 prop 传入：
这样可以让子组件访问传入的函数。我们还绑定了 this 和参数 key，
传入的函数需要通过 key 来判断要删除哪个 ToDoItem。在 ToDoItem 组
件内部，我们执行以下操作：
-
我使用 this.props.deleteItem 来引用父组件中的函数。
Vue
：
this.$on(‘delete’, (event) => {
this.list = this.list.filter(item => item.todo !== event)
})
45
InfoQ 架构师 2018 年 9 月
Vue是怎么做到的？
Vue 的方式稍微有点不同，我们基本上要做三件事。
首先，我们需要在元素上调用函数：
-
然后我们必须创建一个 emit 函数作为子组件内部的一个方法（在本
例中为 ToDoItem.vue），如下所示：
deleteItem(todo) {
this.$parent.$emit(‘delete’, todo)
}
然后我们的父函数，也就是 this.$on(’delete’) 事件监听器会在它被调
用时触发过滤器函数。
简单地说，React 中的子组件可以通过 this.props 访问父函数，而在
Vue 中，必须从子组件中向父组件发送事件，然后父组件需要监听这些事
件，并在它被调用时执行函数。
这里值得注意的是，在 Vue 示例中，我也可以直接将 $emit 部分的内
容写在 @click 监听器中，如下所示：
-
这样可以减少一些代码，不过也取决于个人偏好。
我们如何传递事件监听器？
React：
简单事件（如点击事件）的事件监听器很简单。以下是我们为添加新
待办事项的按钮创建 click 事件的示例：