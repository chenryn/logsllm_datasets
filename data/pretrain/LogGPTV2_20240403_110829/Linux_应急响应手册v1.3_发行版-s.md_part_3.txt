awk =F **" (print $2)*|sort| unig | while read line;do echo $line;cat
". d- xne |pzonssed bursn, daxs |,xosn xo paruap sosov, daxb | bot'xozxa/tbsAu/6ot/zeA/
'(print $4)'|sort |unig =c |sort =nr; done
Fkak
[ies $2) sart] se64 | skise
62 10.368:43.43
62 190.168,43.41
2190.168.41.41
111 190.168,43.51
tfeole:/hose/beser
62 192.168,43,43
OxO3FTP暴力破解
ftp服务端以 vsftpd为例，其他服务端思路类似，日志记录可能不同
vsftpd配置过程
·网络连接
root@helper:/var/log#netstat-pantu
Active Intern
het cc
s(servers
and established)
0127.0.0.53:53
Foreign Address
0.0.0.0:*
LISTEN
State
0
00.0.0.0:22
0.0.0.0:*
232 192.168.197.129:22
192.168.197.101:52331
ESTABLISHED 16646/sshd:helper
21
:..*
LISTEN
21715/proftpd:（acc
0:::22
LISTEN
1069/sshd
d
G
0192.168.197.129:21
192.168.197.101:56806
0127.0.0.53:53
0.0.0.0:*
752/systemd-network
781/systemd-resolve
oot@helper:/var/log#
0192.168.197.129:68
0.0.0.0:*
可以看到，现在存在一条已经建立的连接，从192.168.197.101的56806端口连接到192.168.197.129的21端口
如果存在暴力破解，网络连接情况如下：
---
## Page 25
oot@helper:/var/log# netstat -pantu
Active Internet
mections(servers
and established)
Foreign Address
LSTEN
State
PID/Program name
0127.0.0.53:53
0.0.0.0:*
781/systend-resolve
00.0.0.0:22
192.168.197.101:52331
0.0.0.0:*
ESTABLISHED
16646/sshd:helper
1069/sshd
232 192.168.197.129:22
LISTEN
21715/proftpd:(acc
tCG
*
1069/sshd
0192.168.197.129:21
0192.168.197.129:21
192.168.197.101:57979
TIME_WAIT
192.168.197.101:59306
(acc
tcp6
0192.168.197.129:21
192.168.197.101:59314
ESTABLISHED 22070/proftpd:
tcp6
0192.168.197.129:21
192.168.197.101:57971
TIME_WAIT
(acc
tcp6
0192.168.197.129:21
192.168.197.101:57982
0192.168.197.129:21
192.168.197.101:57965
TIME_WAIT
TINE_WAIT
tcp6
tcp6
0192.168.197.129:21
0192.168.197.129:21
192.168.197.101:59325
ESTABLISHED 22081/proftpd:(acc
0192.168.197.129:21
192.168.197.101:59356
192.168.197.101:57956
ESTABLISHED
TINE_WATT
tcp6
0192.168.197.129:21
192.168.197.101:57970
TIME_WAIT
tcp6
0192.168.197.129:21
192.168.197.101:57962
TINE_WAIT
cp6
0192.168.197.129:21
192.168.197.101:57973
0192.168.197.129:21
192.168.197.101:57968
TIME_WAIT
tcp6
0192.168.197.129:21
192.168.197.101:59308
ESTABLISHED 22064/proftpd:(acc
TIME_WAIT
tcp6
tcp6
0192.168.197.129:21
192.168.197.101:57964
ESTABLISHED 22078/proftpd:(acc
TINE_WAIT
tcp6
0192.168.197.129:21
192.168.197.101:59322
tcp6
0192.168.197.129:21
192.168.197.101:59361
tcp6
ESTABLISHED
ESTABLISHED
0192.168.197.129:21
192.168.197.101:59352
tcp6
0192.168.197.129:21
192.168.197.101:59305
ESTABLISHED22061/proftpd:(acC
tcp6
0192.168.197.129:21
192.168.197.101:57961
ESTABLISHED 22038/proftpd:(acc
tcp6
0192.168.197.129:21
192.168.197.101:59370
0192.168.197.129:21
192.168.197.101:59366
ESTABLISHED
0192.168.197.129:21
192.168.197.101:57960
ESTABLISHED
TIME_WAIT
0192.168.197.129:21
192.168.197.101:59351
ESTARLTSHED
有大量的ESTABLISHED状态和TIME_WAIT状态的网络连接
·当前的ftp会话
ftp和ssh不一样，ftp的会话一般很难捕捉到，除非此时此刻正在使用
o last -w -X
ftpd21996
192.168.197.101
Fri Apr1608:48-08:49（00:01）
192.168.197.101
192.168.197.101
1608:44
1608:43
(00:01)
no log
ftpd21969
192.168.197.101
Fri Apr
16 08:42
08:44
(00:02)
ftpd21942
192.168.197.101
Fri Apr
1608:31
08:32
stitl
(00:01)
helper
pts/0
TAT/6T89T76T
pts/1
192.168.197.100
Fri Apr
16 02:48
07:30
(04:42)
helper
pts/0
4.15.0-141-generic FriApr 1600:50
192.168.197.1
Fri Apr 1600:50
04:55
still running
(04:05)
（to1v15）
systen
bot
4.15.0-141-ge
eric
Fri Apr
4.15.0-140-ger
eric Thu Apr 15 11:45
1600:50
-00:50（13:05)
still running
helper
shutdown
systen
192.168.197.1
1501:55
11:45
192.168.197.1
dy 
11:45
(09:25)
bel
192.168.197.1
Thu Apr1501:02
(09:49)
helper
4.15.0-140-generic
01:55
(00:53)
（to1v15）
bot
Thu Apr 1501:02
1501:02
11:45（10:42)
shutdown
systen
system
4.15.0-140-ge
-01:02（1+13:33)
11:45
(10:42)
helper
pts/e
192.168.197.1
1311:29
runlevel（to 1v15）
Tue Apr 13 11:13-
11:29(00:15)
reboot
shutdown
4.15.0-117-ge
1311:13
11:29
(00:16)
system
doun
eric
1309:47
11:13
(01:25)
从返回结果可以看到，有大概5次ftp连接，有一个会话依旧在线，依旧在线的连接pid为21990
offtpwho
也可以使用ftpwho来进行查看，这个工具默认没有安装在ubuntu中，需要aptinstal1ftpwho
---
## Page 26
root@helper:/var/log#ftpwho
standaloneFTP daemon[21715],
upfor0min
21942 helper
0m0s]（35%)RETR1.txt
Service class
1user
接下来我们看看日志
在ubuntu上，vsftpdi的日志位于/var/log/vsftpd.1og
正常登录的日志
root@helper
#cat/var/log/vsftpd.Iog
Fri Apr 16 10:22:12 2021 [pid 23435]C0NNECT:C1ient "::ffff:192.168.197.109"
FriApr 1610:22:12 2021
[pid 23433][helper]OKL0GIN:C1ient "::ffff:192.168.197.109′
ootghelper
#
·下载文件
8.197.189*
FFF:192.168.197,189*
4444-192
158.197.109*
192.158.197.189*
6:192.168.197.18°
·错误登录的日志（不分账号是否存在）
root@helper
#cat/van/log/vsftpd.log
Fri Apr 16 10:33:31 2021[pid 25061] C0NNECT:C1ient "::ffff:192.168.197.109"
Fri Apr 1610:33:33 2021 [pid 25060] [test] FAIL L0GIN:C1ient ::ffff:192.168.197.109"
/helper%
#
暴力破解的日志
thl
看来拒绝服务这事，服务器也是拒绝的
·登录失败的账号地址
cat /var/log/vsftpd.log grep FAIL |cut =d "[" =f 3 |cut =d "]* =f 1 sort |unig =c |
sort =nr
---
## Page 27
12312
·查看登录失败的用户的登录IP
cat /vaz/log/vsftpd.log | grep FAIL | cut =d "[" =f 3 | cut -d "}* -f 1 | sort | unig | while
read line;do echo $line;cat /var/log/vsftpd.log | grep $line | cut =d *:" =f 7 | cut =d '*" -
f 1 sort | unig -c | sort -nr; done
1 152.166.197.19
12 150.168.17.301
●FTP服务加固
o禁用anonymous和ftp两个账号
使用 SSL 加密 FTP
。安装fail2ban来进行防御
0x04Redis未授权访问&暴力破解
未授权访问漏洞，洞如其名，因为不需要授权，所以可能会导致一顿恶意操作
没啥说的，直接连接就好
helper@helper:~/redis-2.8.17/src$./redis-cli-h127.0.0.1
127.0.0.1:6379>info
#Server
redis_version:2.8.17
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:d55a7d4fd707a458
redis_mode:standalone
0s:Linux 4.15.0-142-genericx86_64
arch_bits:64
multiplexing_api:epoll
gcc_version:7.5.0
process_id:4746
run_id:0346ab827aefe73350b2a165b03fb954c7d80e95
tcp_port:6379
uptime_in_seconds:94
uptime_in_days:0
hz:10
lru_clock:8196905
config file:/etc/redis.conf
加固方案
·设置密码，并且密码足够复杂
。将redis.conf 中的requirepass 前的注释打开，并且设置一个复杂密码
---
## Page 28
Thisshould stay commented out for backward compatibility and because most
people do not need auth （e.g.they run their own servers).
Warning:since Redsis pretty fast an outside user can try up to
#
useavery
rong password otherwiseitwill bevery easy to break.
requirepassfoobared
#Command renaming
It is possible to change the name of dangerous commands in a shared
#environment. For instance the CoNFIG command may be renamed into something
·按照需求进行收口，如果仅仅是本机使用，可以绑定IP为127.0.0.1
#By default Redis listens for connections from all the network interfaces
available on the server.Itis possible to listen to just one or multiple
#interfaces using the “bind configuration directive, followed by one or
more IP addresses.
Examples:
#bind192.168.1.100100.0.1
bind 127.0.0.1
Specify the path for the Unix socket that will be used to listen for
#incoming connections.There is no default,so Redis will not listen
#on a unix socket when not specified.
#unixsocket/tmp/redis.sock
#unixsocketperm 700
#Close the connection after a client is idle for N seconds (e to disable)
timeout 0
修改配置文件后需要重启redis生效
redis 默认是不记录日志的，可以通过配置logfile 来进行设置日志记录，默认的loglevel为notice
---
## Page 29
#A reasonable value for this option is 60 seconds.
tcp-keepalive0
#Specify the.server verbosity level.
#This can be one of:
#debug（a lot of information,useful for development/testing)
#verbose（many rarely usefulinfo,butnot a mess like the debug level)
#notice (moderately verbose,what you want in production probably)
#warning （only very important/ critical messages are logged)
loglevel notice
#Specify the log file name.Also the emptyring can be used to force
#Redisto log on thestandard output.Nothat if you usestandard
#output for logging but daemonize,lowill be sent to/dev/null
logfile"/var/log/redis-test.log"
#and optionally update the other syslog parameters to suit your needs.
#syslog-enabled no
INSERT-
helper@helper:/var/log$ 1s -al /var/log/redis-test.log
-rw-r--r-- 1 root root 1763 Apr 19 06:36 /var/log/redis-test.log
helper@helper:/var/log$
redis3.2版本后新增protected-mode配置，默认是yes，即开启。设置外部网络连接redis服务，设置方式如下：
1、关闭protected-mode模式，此时外部网络可以直接访问
2、开启protected-mode保护模式，需配置bind ip或者设置访问密码
Redis 日志分析
·未授权登录日志
loglevel = notice
主机未授权登录 ->执行info -->执行set hello wrold --> exit退出
#Specify the server verbosity level.
#This can be one of:
debug （a lot of infornation, useful for development/testing)
verbose (many rarely useful info,but not a mess like the debug level)
#notice (moderately verbose,what you want in production probably)
loglevelnotic
#Specify the log file name.Also the empty string can be used to force
#output for logging but daemonize,logs will be sent to /dev/nul1
logfile"/var/log/redis-test.log"
Toenable loggingto the system logg
and optionally
---
## Page 30
of open files to 1ee32 (Iit sas originally set to 1824).
tedis 2.8.17 (008
000/8) 64 bit
5866
http1//redis.19
2.8.17
hand *sysct1 vm.6
ry condition, To fix this issue
apue
server Iis nou ready to accept conr
nect:ions on poet 6379
loglevel = verbose
主机未授权登录->执行info -->执行set hello wrold --> exit退出
Specify the server verbosity level.
This can be one of:
#debug （a lotof information,usefulfor development/testing)
#verbose （many rarely useful info,but not a mess like the debug level)
#notice （moderately verbose,what you want in production probably)
#warning（only veryurtant/critical messages are logged)
loglevelverbose
#Specify the log file name.Also the empty string can be used to force
#Redis to log on the standard output.Note that if you use standard
#output for logging but daemonize,logs will be sent to./dev/null
logfile"/var/log/redis-test.log"
636
Redis 2..17 (0/0) 64 bit
stard alore sode
5942
 foe thce 
4
ots on pert 637s
ytes In ust
e) is 4
slots 
tes In use
bytes in sse
ts in ust
 loglevel = debug
---
## Page 31
主机未授权登录 -->执行info -->执行set hello wrold --> exit退出
#2) Take the connection alive from the point of view of network
equipment in the middle.
#OnLinux,the specified value（in seconds)is the period used to send ACKs.
#Note that to close the connection the double of the time is needed.
#On other kernels the period depends on the kernel configuration.
#A reasonable value for this option is 60 seconds.
tcp-keepalive0