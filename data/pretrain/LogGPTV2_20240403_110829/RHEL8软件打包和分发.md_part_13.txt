**表 4.5. RubyGems 的 SPEC 指令特定**
::: table-contents
+-----------+---------------------------------------------------------+
| SPEC 指令 | RubyGems 具体信息                                       |
+:==========+:========================================================+
| %prep     | RPM 可以直接解包 gem 归档，因此您可以运行               |
|           | `gem unpack`{.literal} 命令从 gem                       |
|           | 中提取源。`%setup -n %{gem_name}-%{version}`{.literal}  |
|           | 宏提供 gem                                              |
|           | 被解包到的目录。在同一                                  |
|           | 个目录级别，`%{gem_name}-%{version}.gemspec`{.literal}  |
|           | 文件会被自动创建，它可以用来重建 gem、修改              |
|           | `.gemspec`{.literal} 或对代码应用补丁。                 |
+-----------+---------------------------------------------------------+
| %build    | 此指令包括用于将软件构建到                              |
|           | 计算机代码的命令或一系列命令。`%gem_install`{.literal}  |
|           | 宏只在 gem 归档上运行，gem 会使用下一个 gem             |
|           | 构建重新创建。`%gem_install`{.literal} 使用创建的 gem   |
|           | 文件来构建代码并将其安装到临时目录中，默认为            |
|           | `./%{gem_dir}`{.literal}。`%gem_install`{.literal}      |
|           | 宏会在一个步骤中构建和安装代                            |
|           | 码。在安装之前，内置的源会被放入自动创建的临时目录中。  |
|           |                                                         |
|           | `%gem_install`{.literal} 宏接受两个附加选项：           |
|           | `-n `{.literal}，它允许覆盖用于安装的         |
|           | gem，`-d `{.literal} 可能会覆盖 gem        |
|           | 安装目的地，不建议使用这个选项。                        |
|           |                                                         |
|           | `%gem_install`{.literal} 宏不能用于安装到               |
|           | `%{buildroot}`{.literal} 中。                           |
+-----------+---------------------------------------------------------+
| %install  | 安装在 `%{buildroot}`{.literal}                         |
|           | 层次结构中执行。                                        |
|           | 您可以创建所需的目录，然后将临时目录中安装的内容复制到  |
|           | `%{buildroot}`{.literal} 层次结构中。如果这个 gem       |
|           | 创建共享对象，它们会被移到架构特定的                    |
|           | `%{gem_extdir_mri}`{.literal} 路径中。                  |
+-----------+---------------------------------------------------------+
:::
:::
有关 RubyGems SPEC 文件的更多信息，请参阅 [Ruby
打包指南](https://docs.fedoraproject.org/en-US/packaging-guidelines/Ruby/){.link}。
:::
::: section
::: titlepage
### []{#advanced-topics.html#converting-rubygem-rpm-spec}使用 gem2rpm 将 RubyGems 软件包转换为 RPM SPEC 文件 {.title}
:::
`gem2rpm`{.literal} 工具将 RubyGems 软件包转换为 RPM SPEC 文件。
::: section
::: titlepage
#### []{#advanced-topics.html#installing-gem2rpm}安装 gem2rpm {.title}
:::
::: itemizedlist
**流程**
-   要从 [RubyGems.org](https://rubygems.org/){.link} 安装
    `gem2rpm`{.literal}，请运行：
:::
``` literallayout
$ gem install gem2rpm
```
:::
::: section
::: titlepage
#### []{#advanced-topics.html#displaying-gem2rpm-options}显示 gem2rpm 的所有选项 {.title}
:::
::: itemizedlist
**流程**
-   要查看 `gem2rpm`{.literal} 的所有选项，请运行：
    ``` literallayout
    gem2rpm --help
    ```
:::
:::
::: section
::: titlepage
#### []{#advanced-topics.html#converting-rubygems-with-gem2rpm}使用 gem2rpm 将 RubyGems 软件包覆盖 RPM SPEC 文件 {.title}
:::
::: itemizedlist
**流程**
-   在最新版本中下载 gem，并为这个 gem 生成 RPM SPEC 文件：
:::
``` literallayout
$ gem2rpm --fetch  > .spec
```
以上步骤根据 gem 的元数据中提供的信息创建一个 RPM SPEC 文件。但是，gem
缺少通常在 RPM 中提供的一些重要信息，如许可证和 changelog。因此，生成的
SPEC 文件需要编辑。
:::
::: section
::: titlepage
#### []{#advanced-topics.html#editing-gem2rpm-templates}编辑 gem2rpm 模板 {.title}
:::
建议编辑从中生成 RPM SPEC 文件的模板，而不是生成的 SPEC 文件。
模板是标准嵌入式 Ruby(ERB)文件，其中包含下表中列出的变量。
::: table
[]{#advanced-topics.html#idm139867780267840}
**表 4.6. gem2rpm 模板中的变量**
::: table-contents
  变量                       解释
  -------------------------- ----------------------------------------------------------------------------------------------
  软件包                     gem 的 `Gem::Package`{.literal} 变量。
  spec                       gem 的 `Gem::Specification`{.literal} 变量（与 format.spec 相同）。
  config                     可重新定义 spec 模板帮助程序中使用的默认宏或规则的 `Gem2Rpm::Configuration`{.literal} 变量。
  runtime_dependencies       `Gem2Rpm::RpmDependencyList`{.literal} 变量提供软件包运行时依赖项列表。
  development_dependencies   `Gem2Rpm::RpmDependencyList`{.literal} 变量提供软件包开发依赖项列表。
  测试                       `Gem2Rpm::TestSuite`{.literal} 变量提供测试框架列表，允许它们执行。
  文件                       提供软件包中文件的未过滤列表的 `Gem2Rpm::RpmFileList`{.literal} 变量。
  main_files                 `Gem2Rpm::RpmFileList`{.literal} 变量提供适合主软件包的文件列表。
  doc_files                  `Gem2Rpm::RpmFileList`{.literal} 变量提供适合 `-doc`{.literal} 子软件包的文件列表。
  格式                       gem 的 `Gem::Format`{.literal} 变量。请注意，这个变量现已被弃用。
:::
:::
::: itemizedlist
**流程**
-   要查看所有可用模板，请运行：
    ``` literallayout
    $ gem2rpm --templates
    ```
:::
要编辑 `gem2rpm`{.literal} 模板，请按照以下步骤执行：
::: orderedlist
**流程**
1.  保存默认模板：
    ``` literallayout
    $ gem2rpm -T > rubygem-.spec.template
    ```
2.  根据需要编辑模板。
3.  使用编辑的模板生成 SPEC 文件：
    ``` literallayout
    $ gem2rpm -t rubygem-.spec.template - -GEM.spec
    ```
:::
现在，您可以使用编辑的模板构建 RPM 软件包，如 ["构建
RPM"一节](#packaging-software_packaging-and-distributing-software.html#building-rpms_packaging-software "构建 RPM"){.xref}
所述。
:::
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#how-to-handle-packages-with-perls-scripts_advanced-topics}如何使用 Perls 脚本处理 RPM 软件包 {.title}
:::
在 RHEL 8 中，默认 buildroot 中不包括 Perl 编程语言。因此，包含 Perl
脚本的 RPM 软件包必须使用 RPM SPEC 文件中的 `BuildRequires:`{.literal}
指令显式指定 Perl 的依赖关系。
::: section
::: titlepage
## []{#advanced-topics.html#common-perl-related-dependencies_how-to-handle-packages-with-perls-scripts}常见 Perl 相关的依赖项 {.title}
:::
在 `BuildRequires:`{.literal} 中使用的最频繁的 Perl 相关构建依赖项是 ：
::: itemizedlist
-   `perl-generators`{.literal}
    为安装的 Perl 文件自动生成运行时 `Requires`{.literal} 和
    `Provides`{.literal}。安装 Perl 脚本或 Perl
    模块时，必须包含基于此软件包的构建依赖关系。
-   `perl-interpreter`{.literal}
    如果以任何方式调用 Perl 解释程序（通过 `perl`{.literal} 软件包或
    `%__perl`{.literal} 宏，或者作为软件包构建系统的一部分）调用 Perl
    解释器，则必须将其列为构建依赖项。
-   `perl-devel`{.literal}
    提供 Perl 标头文件。如果构建链接到 `libperl.so`{.literal}
    库的架构特定代码，如 XS Perl 模块，则必须包含
    `BuildRequires: perl-devel`{.literal}。
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#using-a-specific-perl-module_how-to-handle-packages-with-perls-scripts}使用特定的 Perl 模块 {.title}
:::
如果构建时需要特定的 Perl 模块，请使用以下步骤：
::: itemizedlist
**流程**
-   在您的 RPM SPEC 文件中应用以下语法：
    ``` literallayout
    BuildRequires: perl(MODULE)
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    也将此语法应用到 Perl 核心模块，因为它们可能会随时间移入和移出
    `perl`{.literal} 软件包。
    :::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#limiting-a-package-to-a-specific-perl-version_how-to-handle-packages-with-perls-scripts}将软件包限制为特定的 Perl 版本 {.title}
:::
要将软件包限制为特定的 Perl 版本，请按照以下步骤操作：
::: itemizedlist
**流程**
-   使用 RPM SPEC 文件中所需的版本约束 `perl(:VERSION)`{.literal}
    的依赖关系：
    例如，要将软件包限制为 Perl 版本 5.22 或更高版本，请使用：
    ``` literallayout
    BuildRequires: perl(:VERSION) >= 5.22
    ```
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
不要使用与 `perl`{.literal} 软件包版本的比较，因为它包含一个 epoch 号。
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#ensuring-that-a-package-uses-the-correct-perl-interpreter_how-to-handle-packages-with-perls-scripts}确保软件包使用正确的 Perl 解释器 {.title}
:::
红帽提供了多个 Perl 解释器，它们不完全兼容。因此，提供 Perl
模块的软件包都必须在构建时使用相同的 Perl 解释程序。
要确保这一点，请按照以下步骤操作：
::: itemizedlist
**流程**
-   在 RPM SPEC 文件中包括版本化的 `MODULE_COMPAT`{.literal}
    `Requires`{.literal}，用于提供 Perl 模块的任何软件包：
    ``` literallayout
    Requires:  perl(:MODULE_COMPAT_%(eval `perl -V:version`; echo $version))
    ```
:::
:::
:::
:::
[]{#new-features-in-rhel-8_packaging-and-distributing-software.html}
::: chapter
::: titlepage
# []{#new-features-in-rhel-8_packaging-and-distributing-software.html#new-features-in-rhel-8_packaging-and-distributing-software}第 5 章 RHEL 8 中的新功能 {.title}
:::
这部分记录了 Red Hat Enterprise Linux 7 和 8 之间 RPM
打包中最显著的更改。
::: section
::: titlepage
# []{#new-features-in-rhel-8_packaging-and-distributing-software.html#support-for-weak-dependencies_new-features-in-rhel-8}支持 Weak 依赖项 {.title}
:::
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#weak-dependencies-intro}弱依赖项策略简介 {.title}
:::
`Weak dependencies`{.literal} 是 `Requires`{.literal}
指令的变体。这些变体通过 `Epoch-Version-Release`{.literal}
范围比较与虚拟 `Provides:`{.literal} 和软件包名称匹配。
`Weak dependencies`{.literal} 有两个优点（`weak`{.literal} 和
`hint`{.literal}），以及两个方向（`forward`{.literal} 和
`backward`{.literal}），具体如下表中所述。