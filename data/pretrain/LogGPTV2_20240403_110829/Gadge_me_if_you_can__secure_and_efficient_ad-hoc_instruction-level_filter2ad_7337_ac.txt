ever, the value of a register at run-time could represent an
address which is used to direct control ﬂow (indirect jump)
or to dereference data (pointer). Calculating the value of
that register beforehand is a highly involved task. For in-
stance, mov $0x8067ab, %eax might represent an arbitrary
number being moved to %eax or it might be an address to
which eax should point. Relocation information solves this
problem by pointing to positions in code and data that repre-
sent addresses. Fortunately, all address references, including
C++ vTables, and indirect jumps beneﬁt from that identiﬁ-
cation and can be rewritten reliably. There exists literature
about how to reliably disassemble and rewrite code when
no relocation information is available [33]. However, these
solutions suﬀer from signiﬁcant space problems, and cannot
accurately determine indirect jump targets. Hence, for the
time being, our solution was implemented using relocation
information.
Note that P7 -P10 are implementation-related and we will
show how XIFER addresses these criteria in the implemen-
tation section (Section 5) and the performance evaluation
(Section 6). To meet the code coverage property (P5 ) our
solution faces and tackles several technical challenges that
are addressed in the following subsection.
4.5 Technical Challenges
Our goal is to achieve all properties mentioned in Section 3.
This poses several technical challenges that are mainly re-
lated to the code coverage criterion (P5 ). Without loss of
generality, examples herein are given in x86 assembler.
CH1 – Function Returns.
The position of a split at the end of one and the beginning
of the respective next basic block is not always a trivial case.
Simple cases are instructions that unconditionally transfer
control to another point in the program, e.g., a jump instruc-
tion (jmp 0x1234) for x86. These instructions can simply be
rewritten to their new address in memory to which the orig-
inal target has been moved. However, this does not hold
for function calls or conditional branches as they feature an
implicit fall-through control ﬂow, i.e. the control ﬂow will
continue at the next instruction after returning from the
call. The same is true for conditional branches which might
continue at the next instruction depending on the outcome
of a comparison. In either case, the subsequent instruction
to which the control ﬂow would implicitly fall through can
potentially be moved away because it is now being part of a
diﬀerent code piece that has been shuﬄed away.
0x1000: 
0x1200: 
a) original 
Code 
instrB1 
instrB2 
instrA1 
instrA2 
Call 0x12C0 
Code A 
B 
ret C 
instrB1 
instrB2 
ret 
0x4600: 
0x464B: 
b) randomized 
Code 
Code B 
A 
C 
instrA1 
instrA2 
Call 0x46D1 
Jmp 0x4600 
0x12C0:  instrC1 
ret 
0x46D1:  instrC1 
ret 
Flow: instrA1, instrA2, instrC1, instrB1, instrB2 
Figure 4: Implicit fall-through control ﬂow requires the in-
jection of jumps in order to retain the original sequence.
Consider the example shown in Figure 4. After the execution
returns from the call to 0x12C0 (original), it will continue
execution after the call instruction by falling through to
code piece B (instrB1, instrB2). The randomized version
would also return to the position right after the call where
it left oﬀ.
In contrast to the original, the code has been
moved away and the control ﬂow would fall through to code
piece C, which is wrong. Consequently, we need to insert a
jump in order to connect control ﬂow with the original code
piece that now resides at a diﬀerent position.
303CH2 – Position-Independent Code (PIC).
PIC can start execution immediately without the need for
certain instructions to be adjusted. It became widely adopted
with the introduction of ASLR in modern operating systems.
The avoidance of addresses is achieved by using only relative
addressing for code branches, function calls and even data.
Consequently, the absolute addresses in memory may shift,
i.e.
the base address of code and data may change, but
the relative distances within code and data must stay intact
in order for the relative calculations not to become stale.
Typically, the code calculates its own address in memory
and references code and data relative to its current position.
Data is referenced using the Global Oﬀset Table (GOT) by
knowing the relative distance to the GOT and indexing the
GOT to read and write data.
a) original 
Code 
Code 
0x1000: 
instrA1 
instrA2 
0x1004: 
Call 0x1008 
0x1008:  pop %ebx 
add $0xC8, %ebx 
mov $42, 4(%ebx) 
A 
Data GOT 
0x10D0: 
0x10D4: 
(cid:171)(cid:171) 
42 
Data 
0x46A0: 
0xD7B7: 
0xD7BC: 
0xD8B0: 
0xD8B4: 
b) randomized 
Code 
pop %ebx 
add $0xF4, %ebx 
mov $42, 4(%ebx) 
Code A2 
A1 
instrA1 
instrA2 
Call 0x46A0 
... 
GOT 
(cid:171)(cid:171) 
42 
Data 
Data 
Note: 0x1004 + 0xC8 = 0x10D0 
0xD7BC + 0xF4 = 0xD8B0 
Figure 5: Position-independent code (PIC) needs to be ad-
justed as it assumes relative relations inside the code.
As we move around code pieces to deliberately change
code layout and hence their relative distances to each other,
the calculation of the GOT is no longer correct. This ne-
cessitates a detection of PIC and its correction in order for
the data references to be still valid after the shuﬄing of
code pieces. Consider the example in Figure 5 which de-
picts a common write operation to data residing in the GOT.
In this example, a call instruction was issued by the com-
piler that targets the next instruction. This next instruction
(pop %ebx) in turn pops the return address oﬀ the stack that
has been placed there by the call. With this trick, register
ebx now holds the absolute address in memory of where the
call should return, in this case the absolute position of the
pop instruction.
In the randomized version (Figure 5b), the instructions
have not only been split apart but also the pop %ebx instruc-
tion no longer pops its own absolute address oﬀ the stack.
To compensate for this eﬀect, we correct the oﬀset added
to the register ebx in order to restore the reference to the
GOT. To apply this correction in a general fashion, we de-
tect call targets that do not return but rather save a position
of the stack that holds the return address. We then follow
the register to ﬁnd the instruction that adds the oﬀset to
the found position. When the original oﬀset plus its calcu-
lated own position equals the GOT, we have found such a
case and correct that oﬀset by rewriting the instruction (e.g.
add $0xF4, %ebx).
CH3 – C++ Exceptions.
When the GCC compiler compiles C++ exceptions, a so-
called unwind frame is created for every function in a spe-
cial section called .eh_frame. It contains information about
how to restore the stack and registers when returning to the
point in code that actually catches the exception. This list
works similar to a hash map which is indexed with the posi-
tion in memory that has thrown the exception and provides
information about which function catches that particular ex-
ception. The information about how to unwind the stack is
stored as a stack machine bytecode that is interpreted at
run-time while the exception is thrown. This GCC -speciﬁc
machine language incorporates code load addresses and as-
sumes relative oﬀsets, e.g. how to get to the beginning of
a function and where the frame pointer is stored. However,
since we randomized the code this information is no longer
valid. The .eh_frame would need to be rewritten according
to the changed layout, which we actually did not implement,
and leave as future work. Note that with the exception of
ILR [16], GCC C++ exceptions are also not supported by
other randomization approaches.
CH4 – Intermixed Code and Data.
Compilers often optimize code by aligning functions in mem-
ory so that they start at the beginning of a cache line. The
inevitable gap before aligned functions is sometimes ﬁlled
with data in the middle of code. A typical fall-through disas-
sembly2 is thus not possible, as it would interpret alignment
zeros (garbage) or intentional data as instructions. To pre-
vent this, code must not be disassembled in a linear fashion
but should rather recursively follow the control-ﬂow with re-
spect to indicators for the start of an instruction. There are
plenty of such indicators, e.g. targets of control-ﬂow such as
function calls, conditional and unconditional branches. We
leverage this information to re-align the disassembly process
based on discovered control-ﬂow targets and sanity checks
that ensure all references from and to code and data stay in
their respective segment and target only the beginning of an
instruction. We are aware of the fact that from a theoreti-
cal point of view, there might be corner cases in which such
a disassembly might not be complete. However, we could
not ﬁnd any such cases and a reliable disassembly is not the
main topic of this paper but a mere building block. However,
it should be noted that an incorrect disassembly could lead
to program crashes.
CH5 – Shared Libraries.
Typically, applications link by default to a number of shared
libraries (e.g., the Unix standard library libc). Due to space
and eﬃciency reasons, the code pages of these libraries are
shared among the various simultaneously running processes.
Hence, when every process gets a randomized version of the
same shared library, the operating system can no longer ben-
eﬁt from code sharing across multiple processes because their
content has changed. For ﬂexibility reasons, we oﬀer the user
or system administrator to decide himself whether to favor
security (i.e., allowing XIFER to generate multiple random-
ized library versions on-demand for each application) or ben-
eﬁt from shared library memory savings (i.e., randomizing a
library once at boot or in a static oﬄine phase). In particu-
2The process of disassembling instructions from the begin-
ning of the code in a linear fashion to its end.
304lar, for the latter case, we have implemented the possibility
to write the randomized libraries back to disk as ELF ﬁles.
Since shared system libraries are typically not included in
digital signatures for signed applications, randomizing them
(e.g.
every boot or in an oﬄine phase) does not pose a
threat to the signatures as long as the main executable re-
mains untouched. Due to our support of shared libraries, we
accurately address P9.
5.
IMPLEMENTATION
The very heart of XIFER is the binary rewriter that is
responsible for keeping the program semantics despite all the
changes we subject the program to. We implemented the
rewriter for both mainstream processor architectures Intel
x86 and ARM for Linux and its Android derivative. Our
prototype can be applied to all binaries that comply with
the Linux ELF format which is the default ﬁle format for
all Linux distributions and includes executable ﬁles as well
as shared libraries. The code is entirely written in C++ and
contains 7183 source code lines (SLOC).
The binary rewriter builds the foundation for disassem-
bling instructions, injecting instructions, relocating code and
adjusting references. This is enabled by keeping an addi-
tional layer of references above the original x86/ARM in-
structions that keep track of references to/from code and
to/from data. Transformation to achieve the desired ran-
domization are applied directly on selected instructions. There
code can teared apart and new addresses can be assigned to
the individual newly generated code pieces. Lastly, the code
pieces are transformed back to x86 or ARM instructions ei-
ther on-the-ﬂy in the address space of a process or can be
written as an ELF ﬁle on disk, if need be. Most of the code
is architecture-agnostic, only special cases of ARM and x86
are handled in small fractions of the total code. It is, how-
ever, not possible to transform a program from x86 to ARM
due to the unique design that treats most of the code as a
black-box because it does not operate on an intermediate
language. Any other processor architecture can be easily
supported when a disassembler for the architecture is avail-
able. Thus, XIFER accurately addresses property P10 (see
Section 3).
5.1 Internal Workﬂow
We explain the implementation of our on-the-ﬂy rewriter
with the running example of ARM code shown in Figure 6.
The example also applies to Intel x86 instructions. This
example assumes a very simpliﬁed program that consists of
a branch (beq) whose target is the mov instruction located
at address 837c. This example explains why not all of the
code needs to be disassembled while still guaranteeing an
instruction-granularity randomization. In the following, the
main steps involved in the rewriting process are explained:
1. Loading the executable.
2. Disassembling the bytecode on-the-ﬂy.
3. Building a reference graph of the executable.
4. Applying code transformation.
5. Writing the executable back to memory (ﬁxation) so
that it can start executing
Step 1 — Executable Loading.
In general, a program is composed of diﬀerent loadable
(code and data) segments. These segments originate from
diﬀerent ﬁles like the executable ﬁle itself and shared li-
braries the program depends on. Therefore, we intercept
the loading of the ELF executable ﬁle after all its dependent
libraries have been loaded in the address space but before
execution begins. To achieve that, we use the LD_PRELOAD
environment variable that deﬁnes shared libraries that are
forced to be present in an address space by the operating
system. Originally intended to ﬁx bugs of legacy software
by allowing the override the symbol resolution of shared li-
braries, it is a perfect anchor point for our randomization so-
lution. XIFER is compiled as a library (librewrite.so) to be
automatically injected using LD_PRELOAD and features a spe-
cial section called .init that is guaranteed to get executed
before any other code. At that moment in time, the pro-
gram that is to be randomized and all libraries the program
depends on (including our injected librewrite.so) are now
marked as loaded by the Linux kernel. This does not mean
that they are actually loaded. Luckily, Linux uses a mecha-
nism referred to as lazy binding for the resolution of symbols
in shared libraries and on-demand paging for the loading of
code in the main executable as well as all shared libraries.
We use the second advantage of the LD_PRELOAD mechanism,
i.e. overriding symbols, to replace the on-demand resolution
of symbols with calls to our librewrite.so. This way, the
rewriter and the standard Linux linker do not get in each
other’s way and do not do double the work.
By iterating over the mapped shared libraries and the exe-
cutable ﬁle, we load ﬁle handlers to the particular ELF ﬁles
representing the code and data of all loaded libraries. If avail-
able, we read the relocation information from the ELF ﬁle as
well. However, relocation information provide no informa-
tion about local data/code references within a segment, but
XIFER still requires this information in order to accurately
perform code transformations within a code segment, which
makes a disassembly component a necessity.
Step 2 — Disassembly.
The main goal of the dis- and reassembly process is to
make it partial as to avoid putting labor in instructions that