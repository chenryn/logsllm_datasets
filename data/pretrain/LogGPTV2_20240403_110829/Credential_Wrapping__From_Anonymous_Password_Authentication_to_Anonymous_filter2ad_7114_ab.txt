wrapped credential is proposed [41] - a user uses an authen-
tication credential for anonymous entity authentication, and
she protects her credential with a password by generating a
password wrapped credential; only the same password can
recover the original authentication credential from the pass-
word wrapped credential. The server-side computation in
this approach is ﬁxed, equal to the cost of verifying the
authentication credential. This approach is termed storage
extra APA [19] (contrasting to the above-mentioned pass-
word only schemes in the standard setting), as users need to
manage their password wrapped credentials in certain (un-
protected) storage.
[42] later improved the scheme with a
set of more eﬃcient building blocks, as well as addressing
several practical issues neglected in [41]. Yet another stor-
age extra APA scheme was presented in [30], in which all
users essentially share a global authentication credential in
order not to be distinguished by the server. However, shar-
ing of authentication credential causes many consequences,
e.g., hard for user revocation; impossible to discern online
guessing attacks towards individual users; illegal dissemina-
tion of the authentication credential.
The scheme in [42] turns out to be the most promising
and practical for achieving APA. But as will be shown lat-
er, it can still be improved, and in particular, we innovate
in a critical ingredient of the methodology adopted in [41,
42] to achieve server-designated veriﬁability of authentica-
tion credentials - our new method is that the server keeps
the public key of the underlying authentication credential
scheme to itself. We realize that the idea of “public key sup-
pression” is not new, and software smartcard [17] adopted a
similar one: software smartcard was proposed for the sake of
safely managing the private keys in the context of PKI (Pub-
lic Key Infrastructure), as opposed to the usual practice of
using hardware smartcard; it works by encrypting a private
key with a password; to prevent extraction of the private
key from the “software smartcard”, the corresponding pub-
lic key must be held unpublished; otherwise, extraction can
be done based on the relationship between the public and
private key pair. As pointed out in [17], software smartcard
can only work in a “closed PKI”, but no concrete examples
of closed PKI are given. In a sense, our APA scheme under
public key suppression can be a concrete example of closed
PKI, even though APA and software smartcard are dras-
tically divided in both the problem scope and the solution
technicality.
2.2 (Anonymous) Biometric Authentication
Biometrics such as one’s physical traits (i.e., face, ﬁnger-
print, voice, and iris) and behaviorial patterns have long
been used for identiﬁcation/authentication purposes. The
baseline issue to solve in biometric authentication is the
noisy nature of biometrics,
i.e., two readings/samples of
one’s biometric are rarely identical. The bulk of research on
biometrics is to enhance the matching accuracy when com-
paring biometric readings, discussion on which is beyond the
scope of this paper.
The standard practice for biometric authentication is that
users enroll their biometric readings (called templates) to
the authentication server beforehand; then the server can
authenticate a user by comparing a freshly captured bio-
metric reading with her enrolled template. Biometrics are
personal in nature and cannot be changed during one’s life
time, thus the templates placed at the server implicate se-
rious privacy concern, and protection of the templates has
been a focal point in biometrics research. The basic rationale
for template protection is to transform a biometric sample
in certain ways such that the resulting template does not
reveal the original sample. There are many template pro-
tection techniques in the literature, and of relevance to us
are those that support key release as reviewed below.
The idea of Fuzzy Commitment [22] can be cast as follows:
a template is generated as (cid:11) = k − x, where k is a random-
ly selected key and x is a biometric sample; given another
′ − x)),
′
sample x
where f is the decoding function of an error correction code;
clearly the genuine k cannot be reconstructed unless the dis-
′
tance between x
and x is below the correction capacity (cid:14) of
the error correction code (i.e., the code can correct up to any
(cid:14)-bit errors). Fuzzy Vault [20, 28] works by secret-sharing
a key k in a polynomial induced by a set of points derived
from a biometric sample; the set together with a set of du-
bious points forms the template; via error correction code, a
suﬃciently approximate biometric reading can re-generate a
number of genuine points more than the degree of the poly-
nomial, thus being able to recover k. Fuzzy Extractor [3, 6]
is a primitive concerning extracting from a biometric sam-
ple a secret k, as well as a public quantity q which is the
template; q and another reading together can recover k as
long as the two samples are close enough. Another technique
′
, k can be recovered as f ((cid:11) + x
) = f (k + (x
143providing key release is Biotoken and Bipartite Biotoken [32,
33], which basically works on the fact that a biometric sam-
ple can be split into a stable part and a unstable part; and
only the stable part needs to be protected in the template.
Our substantiation of biometric wrapped credential is inde-
pendent of particular template protection with key release
techniques, and can build upon any of them .
Probably due to the fact that biometric authentication by
itself is already demanding due to the fuzzy nature of bio-
metrics, there exists few work in the literature investigat-
ing provision of user anonymity in biometric authentication.
To the best of our knowledge, the only work that studies
anonymous biometric authentication is [7], which proposes
biometric based anonymous credentials. Key distinction-
s between our biometric wrapped credentials and biomet-
ric based anonymous credentials include: (1) To obtain a
biometric based anonymous credential [7], a user needs to
register his/her biometric template to the credential issuing
authority; in contrast, users do not register their biometric
templates to any party (including the authentication server)
in our biometric wrapped credential, minimizing the risk of
biometrics revelation. This is important in Today’s privacy
conscious landscape. (2) In [7], a user must store a biomet-
ric based anonymous credential in a secure hardware device,
which diminishes the portability of biometrics. In biometric
wrapped credential, we actually establish a ‘software smart-
card’ for anonymous credential using one’s biometric data,
thus requiring no extra secure hardware device.
Privacy-preserving biometric recognition [12, 18, 29, 35]
also relates to anonymous biometric authentication. It can
be cast as follows: a server holds a biometric database con-
taining a number of biometric templates, and a client who
holds a biometric reading wants to learn the index of the
database entry that matches her reading the most; the goal
is to enable such matching while without revealing the clien-
t’s biometric reading to the server, and without disclosing
the database to the client other than the index. The lat-
est technique [18] involves evaluating garbled circuits with
inputs from the two sides. Achieving anonymous biometric
authentication in this (standard) setting is expected to be
more involving, as the output would be a secret generated
from a matching, rather than simply a matching index; in
addition, privacy-preserving biometric recognition seems to
have not taken template protection into account.
3.
IMPROVING ON THE SCHEME IN [42]
The storage extra APA scheme in [42] employs BBS+ Sig-
nature [2] as the underlying authentication credential scheme,
complemented with Nguyen’s Dynamic Accumulator [27] for
user revocation. We improve on a critical link of the scheme,
namely the method to achieve server-designated credential
veriﬁability so as to foil oﬄine brute force guessing attack-
s against password wrapped credentials. Our improvement
aﬀects the use of BBS+ Signature only, without touching
on the part of Nguyen’s Dynamic Accumulator. Thus for
clarity, we restrict ourselves to the BBS+ Signature part,
and it should be understood that the mechanisms for user
revocation and online guessing attacks remain the same.
3.1 Review of BBS+ Signature
BBS+ Signature [2] is a digital signature scheme with ef-
ﬁcient protocols for blind signing and blind veri(cid:12)cation. BB-
S+ Signature is built upon bilinear maps. Let G1; G2; GT
1
be cyclic groups of a prime order q. A bilinear map/pairing
˜e : G1 × G2 → GT has the following commonly used prop-
erties: (1) Bilinearity - ∀u ∈ G1; v ∈ G2 and x; y ∈R Zq,
˜e(ux; vy) = ˜e(u; v)xy, where a ∈R S denotes a is randomly
chosen from set S; (2) Non-degeneration - let g; h be gen-
erators of G1; G2, respectively, ˜e(g; h) ̸= 1. A less stated
property of bilinear pairing is one-way-ness, i.e., given g and
˜e(g; h), it is hard to compute h. In fact, this property has
been implicit in numerous literature.
The public key of BBS+ signature is (w = h(cid:31); h ∈ G2; g0;
g1; g2 ∈ G1), and the private key is ((cid:31) ∈ Zq). A signature
signed upon message m is deﬁned to be (M; k; s), where
k+(cid:31) ∈ G1. The signature
k; s ∈R Zq, and M = (g0gm
1 gs
2)
can be veriﬁed as ˜e(M; whk) = ˜e(g0; h)˜e(g1; h)m˜e(g2; h)s.
More interestingly, signature veriﬁcation can be conducted
in a blind way, such that the holder of a signature proves
the possession of the signature to a veriﬁer, while with-
out revealing any information on the signature. Blind ver-
iﬁcation works as follows, assuming the prover has a sig-
the prover selects r1; r2 ∈R Zq and
nature (M; m; k; s):
computes M1 = M gr1
1 ; M2 = gr1
1 , which are then sen-
t to the veriﬁer; next the prover and the veriﬁer conduc-
t a standard zero-knowledge proof of knowledge protocol
P oK{(r1; r2; k; (cid:14)1; (cid:14)2; s; m) : M2 = gr1
∧
2 g(cid:14)2
−k ˜e(g1; h)m˜e(g2; h)s˜e(g1; w)r1 ˜e(g1; h)(cid:14)1},
~e(M1;w)
~e(g0;h) = ˜e(M1; h)
where (cid:14)1 = r1k; (cid:14)2 = r2k. The protocol is a standard
commit-challenge-respond process Π: the prover begins by
sending a commitment message, denoted CMT(ΠBBS+), to
the veriﬁer; the veriﬁer returns a challenge; the prover then
responds with a response, denoted RES(ΠBBS+). We omit
the details for its straightforwardness.
3.2 Our Improvement
∧1 = M
−k
2 g(cid:14)1
2 gr2
2 gr2
1
1
1
1 gs
2)
In [42], a user’s authentication credential is a BBS+ sig-
nature (M; k; s), satisfying M = (g0gu
k+(cid:31) , where u is
user identity. The corresponding password wrapped creden-
tial takes the form of ⟨[M ]pw; HE(s); k⟩, where [M ]pw denotes
that M is properly protected by a password pw (e.g., en-
cryption with a key derived from pw), HE(s) represents s is
encrypted under the authentication server’s homomorphic
encryption, and k is left unprotected2.
In particular, the
encryption of s under the server’s homomorphic encryption
is critical in nullifying the public veriﬁability of the authen-
tication credential, in order to foil oﬄine guessing attacks on
[M ]pw. The eﬀect is server-designated veriﬁability, i.e., cre-
dential veriﬁability is restricted to the server only. Unable to
decrypt HE(s), the user cannot directly use the above blind
veriﬁcation protocol for authentication. Hence a specially
customized variant was presented and used in [42].
We propose an entirely new method to achieve server-
designated veriﬁability - the authentication server withholds
the public key w of BBS+ Signature; since signature veri-
ﬁcation requires the public key, suppression of w makes no
one else can recognize a valid signature. An immediate ben-
eﬁt is that the server is freed from the forced use of homo-
morphic encryption, greatly simplifying the conﬁguration of
the server. This is particularly important for practical de-
ployment of the system. Further, we want our method to be
2In the complete scheme, k will be accumulated in Nguyen’s
Dynamic Accumulator for user revocation purpose. Thus k
has to be left unprotected to facilitate witness update in case
of user revocation and user joining.
144general, directly making use of the original blind veriﬁcation
protocol, instead of a customized variant. This would make
security analysis much simpler and easier. To that end, we
are actually posed a challenge: for the holder to perform the
above P oK protocol, she needs the knowledge of ˜e(g1; w);
however, since w is not known, she cannot compute ˜e(g1; w).
Fortunately, a further observation reveals that the server can
directly publish ˜e(g1; w) as a public parameter, while keep-
ing w to itself. The one-way-ness of the pairing operation
guarantees that ˜e(g1; w) does not reveal w. Our security
analysis later further shows that this does not impair the
security of password wrapped credentials. Since the original
blind veriﬁcation protocol is better in performance than the
variant in [42], our new scheme is more eﬃcient.
Details. Given the above idea of suppression of public
key, we give below the detailed construction of anonymous
password authentication scheme with mutual authentication
and key exchange.
Setup: The authentication server sets up system parameters
as follows:
(1) determines a bilinear map ˜e : G1×G2 → GT as deﬁned
earlier; chooses (cid:31) ∈R Zq; h ∈R G2 and computes w = h(cid:31),
and keeps ((cid:31); w) as the private key; chooses g0; g1; g2 ∈R
G1; t ∈R GT and publishes the public key as (˜e(g1; w); h; g0;
g1; g2; t).
T → {0; 1}(cid:20)0 ,
T → {0; 1}(cid:20)1 , where (cid:20)0; (cid:20)1 are appropriate secu-
and H2 : G3
rity parameters.
User Enrollment: Users enroll to the server in advance, each
getting an authentication credential. A credential is a BBS+
signature (M; k; s) signed upon user identity u.
(2) picks and publishes hash functions H1 : G2
Upon obtaining her authentication credential securely, us-
er u wraps s with a key derived from her password pwu, de-
noted as [s]pwu (e.g., encrypting s with a block cipher); then