### 优化后的文本

#### 表3. 对所有 (k, m)-码语料库的评估，其中 1 ≤ k, m ≤ 7。

| d* | w MEV | w d* |
|----|-------|------|
| 2  | 1     | 3    |
| 1  | 1     | 2    |
| 1  | 1     | 2    |
| 1  | 1     | 2    |
| 1  | 1     | 2    |
| 2  | 2     | 5    |
| 2  | 1     | 2    |
| 1  | 1     | 1    |
| 1  | 1     | 1    |
| 1  | 1     | 8    |
| 1  | 1     | 1    |
| 1  | 1     | 1    |
| 1  | 1     | 1    |
| 1  | 1     | 14   |
| 1  | 166   | 10   |
| 1  | 11    | 91   |
| 1  | 35    | 14   |
| 1  | 542   | 11890|
| 1  | 15    | 180  |
| 1  | 35    | 35   |
| 1  | 12    | 1338 |
| 1  | 118130| 19   |
| 1  | 328   | 28   |
| 1  | 10    | 2610 |
| 1  | 965097| 19   |

#### 奇偶校验子矩阵 w MEV

- 1, 3
- 1, 3, 3
- 1, 3, 3, 3
- 1, 3, 3, 3, 3
- 1, 3, 3, 3, 3, 3
- 1, 3, 3, 3, 3, 3, 3
- 3, 5
- 3, 5, 6
- 3, 5, 6, 7
- 3, 5, 6, 7, 7
- 3, 5, 6, 7, 7, 7
- 3, 5, 6, 7, 7, 7, 7
- 7, 11
- 7, 11, 13
- 7, 11, 13, 14
- 3, 5, 9, 14, 15
- 3, 5, 7, 9, 14, 15
- 3, 5, 7, 11, 13, 14, 15
- 7, 27
- 7, 11, 29
- 7, 11, 19, 29
- 7, 11, 19, 29, 30
- 3, 5, 15, 23, 25, 30
- 7, 11, 13, 14, 19, 21, 25
- 15, 51
- 7, 27, 45
- 7, 27, 45, 56
- 7, 25, 42, 52, 63
- 7, 27, 30, 45, 53, 56
- 7, 11, 21, 25, 45, 51, 62
- 31, 103
- 15, 51, 85
- 15, 54, 90, 113
- 7, 57, 90, 108, 119
- 7, 46, 56, 75, 85, 118
- 7, 27, 45, 51, 86, 110, 120

#### MEV

- (0, 1)
- (0, 0, 1)
- (0, 0, 0, 1)
- (0, 0, 0, 0, 1)
- (0, 0, 0, 0, 0, 1)
- (0, 0, 0, 0, 0, 0, 1)
- (0, 2)
- (0, 0, 4)
- (0, 0, 0, 3)
- (0, 0, 0, 0, 3)
- (0, 0, 0, 0, 0, 3)
- (0, 0, 0, 0, 0, 0, 3)
- (0, 3)
- (0, 0, 7)
- (0, 0, 0, 14)
- (0, 0, 0, 6, 1)
- (0, 0, 0, 2, 2, 1)
- (0, 0, 0, 0, 1, 2, 1)
- (0, 5)
- (0, 1, 10)
- (0, 0, 4, 14)
- (0, 0, 0, 10, 16)
- (0, 0, 0, 4, 14, 1)
- (0, 0, 0, 1, 8, 0, 1)
- (0, 7)
- (0, 2, 14)
- (0, 0, 8, 18)
- (0, 0, 0, 25, 0)
- (0, 0, 0, 6, 24, 16)
- (0, 0, 0, 2, 16, 18, 1)
- (0, 9)
- (0, 3, 19)
- (0, 0, 12, 26)
- (0, 0, 0, 38, 0)
- (0, 0, 0, 14, 28, 24)
- (0, 0, 0, 3, 24, 36, 16)

#### d*

- 2
- 3
- 4
- 5
- 6
- 7
- 2
- 3
- 4
- 5
- 6
- 7
- 2
- 3
- 4
- 4
- 4
- 5
- 2
- 2
- 3
- 4
- 4
- 4
- 2
- 2
- 3
- 4
- 4
- 4
- 2
- 2
- 3
- 4
- 4
- 4

| | EL | MEL |
|---|---|---|
| 1.8 | 2.0 | 2.0 |
| 2.9 | 2.8 | 3.4 |
| 4.9 | 6.7 | 6.3 |
| 8.4 | 13.9 | 16.2 |
| 14.2 | 26.4 | 36.7 |
| 24.0 | 47.7 | 75.5 |
| 2.0 | 2.8 | 4.0 |
| 2.8 | 6.7 | 7.6 |
| 6.7 | 13.9 | 14.7 |
| 13.9 | 26.4 | 31.8 |
| 26.4 | 47.7 | 65.3 |
| 47.7 | 84.9 | 75.3 |
| 2.0 | 3.4 | 4.6 |
| 3.4 | 6.3 | 8.8 |
| 6.3 | 16.2 | 16.9 |
| 16.2 | 36.7 | 35.7 |
| 36.7 | 75.5 | 65.3 |
| 75.5 | 84.9 | 75.3 |
| 2.3 | 4.0 | 5.1 |
| 4.0 | 7.6 | 10.1 |
| 7.6 | 14.7 | 19.1 |
| 14.7 | 36.3 | 35.7 |
| 36.3 | 84.9 | 65.3 |
| 84.9 | 75.3 | 65.3 |
| 2.4 | 4.6 | 5.1 |
| 4.6 | 8.8 | 10.1 |
| 8.8 | 16.9 | 19.1 |
| 16.9 | 31.8 | 35.7 |
| 31.8 | 75.3 | 65.3 |
| 75.3 | 65.3 | 65.3 |
| 2.6 | 5.1 | 5.1 |
| 5.1 | 10.1 | 10.1 |
| 10.1 | 19.1 | 19.1 |
| 19.1 | 35.7 | 35.7 |
| 35.7 | 65.3 | 65.3 |
| 65.3 | 65.3 | 65.3 |

### 文献引用

[6] J. L. Hafner, V. Deenadhayalan, K. Rao, and J. A. Tomlin. Matrix methods for lost data reconstruction in erasure codes. In FAST-2005: 4th USENIX Conference on File and Storage Technologies, pages 183–196. USENIX Association, December 2005.

[7] J. L. Hafner and K. Rao. Notes on reliability models for non-MDS erasure codes. Technical Report RJ–10391, IBM, October 2006.

[8] M. G. Luby, M. Mitzenmacher, M. A. Shokrollahi, D. A. Spielman, and V. Stemann. Practical loss-resilient codes. In STOC 1997: Proceedings of the 29th annual ACM Symposium on Theory of Computing, pages 150–159. ACM Press, 1997.

http://cs.anu.edu.au/∼bdm/nauty/.

nauty version 2.2 (including gtools).

[9] B. McKay. Practical graph isomorphism. Congressus Numerantium, 30:45–87, 1981.

[10] B. McKay. nauty version 2.2 (including gtools).

[11] D. A. Patterson, G. Gibson, and R. H. Katz. A case for redundant arrays of inexpensive disks (RAID). In ACM SIGMOD International Conference on Management of Data, pages 109–116, June 1988.

[12] J. S. Plank. Erasure codes for storage applications. Tutorial slides, presented at FAST-2005: 4th Usenix Conference on File and Storage Technologies, http://www.cs.utk.edu/∼plank/plank/papers/FAST-2005.html, December 2005.

[13] J. S. Plank, A. L. Buchsbaum, R. L. Collins, and M. G. Thomason. Small parity-check erasure codes - exploration and observations. In DSN-2005: The International Conference on Dependable Systems and Networks. IEEE, July 2005.

[14] J. S. Plank and M. G. Thomason. A practical analysis of low-density parity-check erasure codes for wide-area storage applications. In DSN-2004: The International Conference on Dependable Systems and Networks, pages 115–124. IEEE, June 2004.

[15] K. Rao, J. L. Hafner, and R. A. Golding. Reliability for networked storage nodes. In DSN-2006: The International Conference on Dependable Systems and Networks, pages 237–248. IEEE, June 2006.

[16] Y. Saito, S. Frølund, A. Veitch, A. Merchant, and S. Spence. FAB: Building distributed enterprise disk arrays from commodity components. In ASPLOS-XI: 11th International Conference on Architectural Support for Programming Languages and Operating Systems, pages 48–58. ACM Press, 2004.

[17] M. Schwartz and A. Vardy. On the stopping distance and the stopping redundancy of codes. IEEE Trans. on Inf. Theory, 52(3):922–932, 2006.

### 读取开销

读取开销是指在随机读取顺序下，恢复所有数据符号所需读取的符号数量。对于部署在网格存储环境中的不规则XOR基纠错码，读取开销是一个很好的性能指标；而在局域网环境中，我们预计存储系统会使用系统码，并在读取任何奇偶校验符号之前先读取数据符号（“条带”）。最近，Plank等人[13]分析了小m值代码的读取开销。我们的分析与(k, m)-码语料库中k, m ≤ 5的部分重叠。我们认为EV可以转换为读取开销指标，但尚未确定这种转换方法。

### 结论

我们确定了一种新的XOR基纠错码的容错度量——最小擦除列表（MEL），该度量的简洁表示形式——最小擦除向量（MEV），以及能够高效确定MEL的最小擦除（ME）算法。我们将ME算法应用于所有1 ≤ k, m ≤ 7的系统XOR基纠错码，从而识别出最具容错性的此类代码。我们提供了实证证据，表明ME算法比直接生成所有擦除模式的算法所需的计算量少了一个数量级以上（超过80倍）。

### 致谢

感谢我们的同事Vinay Deolalikar、Xiaozhou Li、Craig Soules、Krishnamurthy Viswanathan和Pascal Vontobel的反馈。同时感谢匿名DSN评审员的详细评审和建议。

### 参考文献

[1] M. Blaum, J. Brady, J. Bruck, and J. Menon. EVENODD: An efficient scheme for tolerating double disk failures in RAID architectures. IEEE Trans. Comput., 44(2):192–202, 1995.

[2] P. Corbett, B. English, A. Goel, T. Grcanac, S. Kleiman, J. Leong, and S. Sankar. Row-diagonal parity for double disk failure correction. In FAST-2004: 3rd USENIX Conference on File and Storage Technologies, pages 1–14. USENIX Association, 2004.

[3] R. G. Gallager. Low density parity-check codes. MIT Press, 1963.

[4] J. L. Hafner. WEAVER Codes: Highly fault tolerant erasure codes for storage systems. In FAST-2005: 4th USENIX Conference on File and Storage Technologies, pages 212–224. USENIX Association, December 2005.

[5] J. L. Hafner. HoVer erasure codes for disk arrays. In DSN-2006: The International Conference on Dependable Systems and Networks, pages 217–226. IEEE, June 2006.

---

希望这能帮助你更好地理解和展示你的研究内容。如果有任何进一步的需求或修改，请告诉我！