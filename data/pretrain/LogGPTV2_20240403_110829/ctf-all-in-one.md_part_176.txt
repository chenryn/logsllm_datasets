ReplacementFrontend. The ReplacementFrontend expands the
LightFrontend to add support for constraints on VSA values.
HybridFrontend. The HybridFrontend combines the FullFrontend and the
ReplacementFrontend to provide fast approximation support for symbolic
constraint solving.
子模块：Full-Program Analysis
Project is the analyst-facing part of angr, which provides complete analyses,
such as dynamic symbolic execution and controlflow graph recovery.
Path Groups. A PathGroup is an interface to dynamic symbolic execution.
Analyses. angr provides an abstraction for any full program analysis with the
Analysis class.
实现:数据流图恢复
CFGAccurate. Given a specific program, angr performs an iterative CFG
recovery, starting from the entry point of the program, with some necessary
optimizations. angr leverages a combination of forced execution, backwards
slicing, and symbolic execution to recover, where possible, all jump targets of
each indirect jump. Moreover, it generates and stores a large quantity of data
about the target application, which can be used later in other analyses such
as data-dependence tracking.
CFGFast. A secondary algorithm that uses a quick disassembly of the binary
(without executing any basic block), followed by heuristics to identify
functions, intra-function control flow, and direct inter-function control flow
transitions.
假设
1755
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
angr’s CFGAccurate makes several assumptions about binaries to optimize the
run time of the algorithm.
All code in the program can be distributed into different functions.
All functions are either called by an explicit call instruction, or are preceded by
a tail jump in the control flow.
The stack cleanup behavior of each function is predictable, regardless of
where it is called from. This lets CFGAccurate safely skip functions that it has
already analyzed while analyzing a caller function and keep the stack
balanced.
迭代生成 CFG
Throughout CFG recovery, CFGAccurate maintains a list of indirect jumps, Lj,
whose jump targets have not been resolved. When the analysis identifies such a
jump, it is added to Lj. After each iterative technique terminates, CFGAccurate
triggers the next one in the list. This next technique may resolve jumps in Lj, may
add new unresolved jumps to Lj, and may add basic blocks and edges to the CFG
C. CFGAccurate terminates when a run of all techniques results in no change to Lj
or C, as that means that no further indirect jumps can be resolved with any
available analysis.
Forced Execution. angr’s CFGAccurate leverages the concept of Dynamic
Forced Execution for the first stage of CFG recovery. Forced Execution
ensures that both directions of a conditional branch will be executed at every
branch point. CFGAccurate maintains a work-list of basic blocks, B , and a
w
list of analyzed blocks, B . When the analysis starts, it initializes its work-list
a
with all the basic blocks that are in C but not in B . Whenever CFGAccurate
a
analyzes a basic block from this work-list, the basic block and any direct
jumps from the block are added to C. Indirect jumps, however, cannot be
handled this way. So each indirect jump is stored in the list L for later
j
analysis.
Symbolic Execution. For each jump J ∈ L, CFGAccurate traverses the CFG
j
backwards until it find the first merge point or up to a threshold number of
blocks. From there, it performs forward symbolic execution to the indirect
jump and uses a constraint solver to retrieve possible values for the target of
the indirect jump. If the jump is resolved successfully, J is removed from L
j
1756
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
and edges and nodes are added to the CFG for each possible value of the
jump target.
Backward Slicing. CFGAccurate computes a backward slice starting from the
unresolved jump. The slice is extended through the beginning of the previous
call context. That is, if the indirect jump being analyzed is in a function F that
a
is called from both F and F , the slice will extend backward from the jump in
b c
F and contain two start nodes: the basic block at the start of F and the one
a b
at the start of F . CFGAccurate then executes this slice using angr’s symbolic
c
execution engine and uses the constraint engine to identify possible targets of
the symbolic jumps, with the same threshold of 256 for the size of the solution
set for the jump target. If the jump target is resolved successfully, the jump is
removed from L and the edge representing the control flow transition, and the
j
target basic blocks are added to the recovered CFG.
The goal of the fast CFG generation algorithm is to generate a graph, with high
code coverage, that identifies at least the location and content of functions in the
binary.
Function identification. We use hard-coded function prologue signatures,
which can be generated from techniques like ByteWeight, to identify functions
inside the application.
Recursive disassembly. Recursive disassembly is used to recover the direct
jumps within the identified functions.
Indirect jump resolution. Lightweight alias analysis, dataflow tracking,
combined with pre-defined strategies are used to resolve intra-function
control flow transfers.
实现：值集分析
Value-Set Analysis (VSA) is a static analysis technique that combines numeric
analysis and pointer analysis for binary programs. It uses an abstract domain,
called the Value-Set Abstract domain, for approximating possible values that
registers or abstract locations may hold at each program point.
Creating a discrete set of strided-intervals. The basic data type of VSA, the
strided interval, is essentially an approximation of a set of numbers. It is great
for approximating a set of normal concrete values. We developed a new data
1757
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
type called “strided interval set”, which represents a set of strided intervals
that are not unioned together. A strided interval set will be unioned into a
single strided interval only when it contains more than K elements, where K is
a threshold that can be adjusted.
Applying an algebraic solver to path predicates. Tracking branch conditions
helps us constrain variables in a state after taking a conditional exit or during
a merging procedure, which produces a more precise analysis result. We
implemented a lightweight algebraic solver that works on the strided interval
domain, based on modulo arithmetic which take care of some of the affine
relations. When a new path predicate is seen, we attempt to simplify and
solve it to obtain a number range for the variables involved in the path
predicate. Then we perform an intersection between the newly generated
number range and the original values for each corresponding variable.
Adopting a signedness-agnostic domain. Wrapped Interval Analysis is such
an interval domain for analyzing LLVM code, which takes care of signed and
unsigned numbers at the same time. We based our signedness-agnostic
strided-interval domain on this theory, applied to the VSA domain.
The main interface that angr provides into a full-program VSA analysis is the
Value Flow Graph. The VFG is an enhanced CFG that includes the program state
representing the VSA fix-point at each program location.
实现：动态符号执行
The dynamic symbolic execution module of our analysis platform is mainly based
on the techniques described in Mayhem. Our implementation follows the same
memory model and path prioritization techniques.
We use Claripy’s interface into Z3 to populate the symbolic memory model
(specifically, SimSymbolicMemory) provided by SimuVEX. Individual execution
paths through a program are managed by Path objects, provided by angr, which
track the actions taken by paths, the path predicates, and various other path-
specific information. Groups of these paths are managed by angr’s PathGroup
functionality, which provides an interface for managing the splitting, merging, and
filtering of paths during dynamic symbolic execution.
1758
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
angr has built-in support for Veritesting, implementing it as a Veritesting analysis
and exposing transparent support for it with an option passed to PathGroup
objects.
实现：非约束的符号执行
We implemented under-constrained symbolic execution (UCSE), as proposed in
UC-KLEE, and dubbed it UC-angr. UCSE is a dynamic symbolic execution
technique where execution is performed on each function separately.
We made two changes to the technique described in UCSE:
Global memory under-constraining.We mark all global data as
underconstrained, allowing us to lower our false positive rate.
Path limiters. We abort the analysis of a function when we find that it is
responsible for a path explosion. We detect this by hard-coding a limit and,
when a single function branches over this many paths, we replace the
function with an immediate return, and rewind the analysis from the call site of
that function.
False positive filtering. When we detect an exploitable state, we attempt to
ensure that the state is not incorrectly made exploitable by a lack of
constraints on under-constrained data.
实现：符号辅助的 fuzzing
Our implementation of symbolic-assisted fuzzing, called Driller, uses the AFL
fuzzer as its foundation and angr as its symbolic tracer.
实现：崩溃重现
We implemented the approach proposed by Replayer to recover missing
relationships between input values and output values.
We can define the problem of replaying a crashing input as the search for an input
specification is to bring a program from an initial state s to a crash state q. Our
implementation symbolically executes the path from s to q , using the input i . It
a a a
1759
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
records all constraints that are generated while executing P. Given the constraints,
the execution path, the program P, and the new initial state s , we can
b
symbolically execute P with an unconstrained symbolic input, following the
previously recorded execution path until the new crash state q is reached. At this
b
point, the input constraints on the input and output can be analyzed, and
relationships between them can be recovered. This relationship data is used to
generate the input specification is, allowing the crashing input to be replayed.
实现：利用生成
we generate exploits by performing concolic execution on crashing program inputs
using angr. We drive concolic execution forward, forcing it to follow the same path
as a dynamic trace gathered by concretely executing the crashing input applied to
the program. Concolic execution is stopped at the point where the program
crashed, and we inspect the symbolic state to determine the cause of the crash
and measure exploitability. By counting the number of symbolic bits in certain
registers, we can triage a crash into a number of categories such as frame pointer
overwrite, instruction pointer overwrite, or arbitrary write, among others.
实现：利用强化
To harden exploits against modern mitigation techniques, we implemented a ROP
chain compiler based on the ideas in Q.
Gadget discovery. We scan all executable code in the application, at every
byte offset, to identify ROP gadgets and classify them according to their
effects. To carry out the classification, our analysis leverages the action
history provided by angr’s Path objects and symbolic relations provided by
Claripy.
Gadget arrangement. The ROP chain compiler then determines
arrangements of gadgets that can be used to perform high-level actions.
Payload generation. After the ROP compiler identifies the requisite set of
gadget arrangements, it combines these gadgets into a chain to carry out
high-level actions. This is done by writing gadget arrangements into a
program state in angr, constraining their outputs to the provided arguments,
and querying the SMT solver for a solution for their inputs.
1760
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
比较评估
1761
8.26 Driller: Augmenting Fuzzing Through Selective Symbolic Execution
8.26 Driller: Augmenting Fuzzing Through
Selective Symbolic Execution
paper
简介
这篇文章提出了 Driller，这是一种混合漏洞挖掘工具，它以互补的方式将模糊测试
和选择性混合执行结合起来，以发现隐藏更深的漏洞。模糊测试用于探索程序空间
的不同区间，并使用混合执行来生成满足不同区间的输入。
Driller 概述
A core intuition behind the design of Driller is that applications process two
different classes of user input: general input, representing a wide range of
values that can be valid, and specific input, representing input that must take
on one of a select few possible values. Conceptually, an application’s checks on
the latter type of input split the application into compartments. Execution flow
moves between compartments through checks against specific input, while, within
a compartment, the application processes general input.
Driller is composed of multiple components：
Input test cases. Driller can operate without input test cases. However, the
presence of such test cases can speed up the initial fuzzing step by pre-
guiding the fuzzer toward certain compartments.
Fuzzing. When Driller is invoked, it begins by launching its fuzzing engine.
The fuzzing engine explores the first compartment of the application until it
reaches the first complex check on specific input.
Concolic execution. Driller invokes its selective concolic execution component
when the fuzzing engine gets stuck. This component analyzes the
application, pre-constraining the user input with the unique inputs discovered
by the prior fuzzing step to prevent a path explosion. After tracing the inputs
discovered by the fuzzer, the concolic execution component utilizes its
1762
8.26 Driller: Augmenting Fuzzing Through Selective Symbolic Execution
constraint-solving engine to identify inputs that would force execution down
previously unexplored paths.
Repeat. Once the concolic execution component identifies new inputs, they
are passed back to the fuzzing component, which continues mutation on
these inputs to fuzz the new compartments.
In this example, the application parses a configuration file, containing a magic
number, received over an input stream. If the received data contains syntax errors
or an incorrect magic number, the program exits. Otherwise, control flow switches
based on input between a number of new compartments, some of which contain
memory corruption flaws.
1763
8.26 Driller: Augmenting Fuzzing Through Selective Symbolic Execution
Figure 1. Fuzzing the first compartment of the application. Then the fuzzing
engine gets stuck on the comparison with the magic number.
Figure 2. Driller executes the concolic execution engine to identify inputs that
will drive execution past the check, into other program compartments.
Figure 3. Driller enters its fuzzing stage again, fuzzing the second
compartment. The fuzzer cannot find any arms of the key switch besides the
default.
Figure 4. When this second fuzzing invocation gets stuck, Driller leverages its
concolic execution engine to discover the "crashstring" and "set_option"
inputs.
模糊测试
To implement Driller, we leveraged a popular off-the-shelf fuzzer, American Fuzzy
Lop (AFL). Our improvements mostly deal with integrating the fuzzer with our
concolic execution engine. Since instrumentation that AFL relies on can be either
introduced at compile-time or via a modified QEMU, we opted for a QEMU-
backend to remove reliance on source code availability.
Fuzzer Features
Genetic fuzzing. AFL carries out input generation through a genetic algorithm,
mutating inputs according to genetics-inspired rules and ranking them by a
fitness function.
State transition tracking. AFL tracks the union of control flow transitions that it
has seen from its inputs, as tuples of the source and destination basic blocks.
Loop “bucketization”. When AFL detects that a path contains iterations of a
1764
8.26 Driller: Augmenting Fuzzing Through Selective Symbolic Execution
loop, a secondary calculation is triggered to determine whether that path
should be eligible for breeding. AFL determines the number of loop iterations
that were executed and compares it against previous inputs that caused a
path to go through the same loop. These paths are all placed into “buckets”
by the logarithm of their loop iteration count.
Derandomization. We pre-set AFL’s QEMU backend to a specific random
seed to ensure consistent execution. Later, when a crashing input is
discovered, we use our concolic execution engine to recover any “challenge-
response” behavior or vulnerabilities that rely on leaking randomness.
Fuzzer Limitations
Because fuzzers randomly mutate input, and genetic fuzzers, in turn, mutate input
that has, in the past, generated unique paths through a binary, they are able to
quickly discover different paths that process “general” input. However, the
generation of “specific” input to pass complex checks in the application is very
challenging for fuzzers.
Transition to Concolic Execution
Driller aims to complement the fundamental weakness of fuzzing, determining
specific user input required to pass complex checks, by leveraging the strength of