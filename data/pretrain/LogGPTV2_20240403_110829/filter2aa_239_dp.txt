            0, previousFileName.LastIndexOf(" - Copy"))))
        {
        var copiedFile = new FileInfo(previousFileName);
        var originalFile = new FileInfo(fileName);
        if (copiedFile.Length == originalFile.Length)
        {
          WriteLine($"delete {copiedFile.FullName}");
          if (! checkOnly)
          {
            copiedFile.Delete();
          }
        }
        }
        previousFileName = fileName;
      }
    }
23.4 使用流处理文件
现在，处理文件有更强大的选项：流。流的概念已经存在很长时间了。流是一个用于
传输数据的对象，数据可以向两个方向传输：
● 如果数据从外部源传输到程序中，这就是读取流。
● 如果数据从程序传输到外部源中，这就是写入流。
外部源常常是一个文件，但也不完全都是文件。它还可能是：
● 使用一些网络协议读写网络上的数据，其目的是选择数据，或从另一个计算机上发
送数据。
● 读写到命名管道上。
● 把数据读写到一个内存区域上。
一些流只允许写入，一些流只允许读取，一些流允许随机存取。随机存取允许在流中
随机定位游标，例如，从流的开头开始读取，以后移动到流的末尾，再从流的一个中间位
置继续读取。
在这些示例中，微软公司提供了一个.NET类System.IO.MemoryStream对象来读写内
存，而System.Net.Sockets.NetworkStream对象处理网络数据。Stream类对外部数据源不做
任何假定，外部数据源可以是文件流、内存流、网络流或任意数据源。
一些流也可以链接起来。例如，可以使用DeflateStream压缩数据。这个流可以写入
FileStream、MemoryStream或NetworkStream。CryptoStream可以加密数据。也可以链接
DeflateStream和CryptoStream，再写入FileStream。
  注意： 第24章解释了如何使用CryptoStream。
使用流时，外部源甚至可以是代码中的一个变量。这听起来很荒谬，但使用流在变量
之间传输数据的技术是一个非常有用的技巧，可以在数据类型之间转换数据。C语言使用
类似的函数sprintf（）在整型和字符串之间转换数据类型，或者格式化字符串。
使用一个独立的对象来传输数据，比使用FileInfo或DirectoryInfo类更好，因为把传输
数据的概念与特定数据源分离开来，可以更容易交换数据源。流对象本身包含许多通用代
码，可以在外部数据源和代码中的变量之间移动数据，把这些代码与特定数据源的概念分
离开来，就更容易实现不同环境下代码的重用。
虽然直接读写流不是那么容易，但可以使用阅读器和写入器。这是另一个关注点分
离。阅读器和写入器可以读写流。例如，StringReader和StringWriter类，与本章后面用于
读写文本文件的两个类StreamReader和StreamWriter一样，都是同一继承树的一部分，这
些类几乎一定在后台共享许多代码。在System.IO名称空间中，与流相关的类的层次结构
如图23-3所示。
图23-3
对于文件的读写，最常用的类如下：
● FileStream（文件流）——这个类主要用于在二进制文件中读写二进制数据。
● StreamReader（流读取器）和StreamWriter（流写入器）——这两个类专门用于读写
文本格式的流产品API。
● BinaryReader和BinaryWriter——这两个类专门用于读写二进制格式的流产品API。
使用这些类和直接使用底层的流对象之间的区别是，基本流是按照字节来工作的。例
如，在保存某个文档时，需要把类型为long的变量的内容写入一个二进制文件中，每个
long型变量都占用8个字节，如果使用一般的二进制流，就必须显式地写入内存的8个字节
中。
在C#代码中，必须执行一些按位操作，从long值中提取这8个字节。使用BinaryWriter
实例，可以把整个操作封装在BinaryWriter.Write（）方法的一个重载方法中，该方法的参
数是long型，它把8个字节写入流中（如果流指向一个文件，就写入该文件）。对应的
BinaryReader.Read（）方法则从流中提取8个字节，恢复long的值。
23.4.1 使用文件流
下面对流进行编程，以读写文件。FileStream实例用于读写文件中的数据。要构造
FileStream实例，需要以下4条信息：
● 要访问的文件。
● 表示如何打开文件的模式。例如，新建一个文件或打开一个现有的文件。如果打开
一个现有的文件，写入操作是覆盖文件原来的内容，还是追加到文件的末尾？
● 表示访问文件的方式——是只读、只写还是读写？
● 共享访问——表示是否独占访问文件。如果允许其他流同时访问文件，则这些流是
只读、只写还是读写文件？
第一条信息通常用一个包含文件的完整路径名的字符串来表示，本章只考虑需要该字
符串的那些构造函数。除了这些构造函数外，一些其他的构造函数用本地Windows句柄来
处理文件。其余3条信息分别由3个.NET枚举FileMode、FileAccess和FileShare来表示，这
些枚举的值很容易理解，如表23-1所示。
表23-1
枚举
值
FileMode
Append、Create、CreateNew、Open、OpenOrCreate或
Truncate
FileAccess
Read、ReadWrite或Write
FileShare
Delete、Inheritable、None、Read、ReadWrite或Write
注意，对于FileMode，如果要求的模式与文件的现有状态不一致，就会抛出一个异
常。如果文件不存在，Append、Open和Truncate就会抛出一个异常；如果文件存在，
CreateNew就会抛出一个异常。Create和OpenOrCreate可以处理这两种情况，但Create会删
除任何现有的文件，新建一个空文件。因为FileAccess和FileShare枚举是按位标志，所以
这些值可以与C#的按位OR运算符“|”合并使用。
1．创建FileStream
StreamSamples的示例代码使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.IO.FileSystem
名称空间
    System
    System.Collections.Generic
    System.Globalization
    System.IO
    System.Linq
    System.Text
    System.Threading.Tasks
    static System.Console
FileStream有很多构造函数。下面的示例使用带4个参数的构造函数（代码文件
StreamSamples /Program.cs）：
● 文件名
● FileMode枚举值Open，打开一个已存在的文件
● FileAccess枚举值Read，读取文件
● FileShare枚举值Read，允许其他程序读取文件，但同时不修改文件
    private void ReadFileUsingFileStream(string fileName)
    {
      const int bufferSize = 4096;
      using (var stream = new FileStream(fileName, FileMode.Open,
        FileAccess.Read, FileShare.Read))
      {
        ShowStreamInformation(stream);
        Encoding encoding = GetEncoding(stream);
        //...
除了使用FileStream类的构造函数来创建FileStream对象之外，还可以直接使用File类
的OpenRead方法创建FileStream。OpenRead方法打开一个文件（类似于
FileMode.Open），返回一个可以读取的流（FileAccess.Read），也允许其他进程执行读取
访问（FileShare.Read）：
    using (FileStream stream = File.OpenRead(filename))
    {
      //...
2．获取流的信息
Stream类定义了属性CanRead、CanWrite、CanSeek和CanTimeout,，可以读取这些属
性，得到可以通过流处理的信息。为了读写流，超时值ReadTimeout和WriteTimeout指定
超时，以毫秒为单位。设置这些值在网络场景中是很重要的，因为这样可以确保当读写流
失败时，用户不需要等待太长时间。Position属性返回光标在流中的当前位置。每次从流
中读取一些数据，位置就移动到下一个将读取的字节上。示例代码把流的信息写到控制台
上（代码文件StreamSamples / Program. cs）：
    private void ShowStreamInformation(Stream stream)
    {
      WriteLine($"stream can read: {stream.CanRead
}, " +
        $"can write: {stream.CanWrite
}, can seek: {stream.CanSeek
}, " +
        $"can timeout: {stream.CanTimeout
}");
      WriteLine($"length: {stream.Length
}, position: {stream.Position
}");
      if (stream.CanTimeout)
      {
        WriteLine($"read timeout: {stream.ReadTimeout
} " +
        $"write timeout: {stream.WriteTimeout
} ");
      }
    }
对已打开的文件流运行这个程序，会得到下面的输出。位置目前为0，因为尚未开始
读取：
    stream can read: True, can write: False, can seek: True, can timeout: False
    length: 1113, position: 0
3．分析文本文件的编码
对于文本文件，下一步是读取流中的第一个字节——序言。序言提供了文件如何编码
的信息（使用的文本格式）。这也称为字节顺序标记（Byte Order Mark, BOM）。
读取一个流时，利用ReadByte可以从流中只读取一个字节，使用Read（）方法可以填
充一个字节数组。使用GetEncoding（）方法创建了一个包含5字节的数组，使用Read（）
方法填充字节数组。第二个和第三个参数指定字节数组中的偏移量和可用于填充的字节
数。Read（）方法返回读取的字节数；流可能小于缓冲区。如果没有更多的字符可用于
读取，Read方法就返回0。
示例代码分析流的第一个字符，返回检测到的编码，并把流定位在编码字符后的位置
（代码文件StreamSamples / Program.cs）：
    private Encoding GetEncoding(Stream stream)
    {
      if (! stream.CanSeek) throw new ArgumentException(
        "require a stream that can seek");
      Encoding encoding = Encoding.ASCII;
      byte[] bom = new byte[5];
      int nRead = stream.Read(bom, offset: 0, count: 5);
      if (bom[0] == 0xff && bom[1] == 0xfe && bom[2] == 0 && bom[3] == 0)
      {
        WriteLine("UTF-32");
        stream.Seek(4, SeekOrigin.Begin);
        return Encoding.UTF32;
      }
      else if (bom[0] == 0xff && bom[1] == 0xfe)
      {
        WriteLine("UTF-16, little endian");
        stream.Seek(2, SeekOrigin.Begin);
        return Encoding.Unicode;
      }
      else if (bom[0] == 0xfe && bom[1] == 0xff)
      {
        WriteLine("UTF-16, big endian");
        stream.Seek(2, SeekOrigin.Begin);
        return Encoding.BigEndianUnicode;
      }
      else if (bom[0] == 0xef && bom[1] == 0xbb && bom[2] == 0xbf)
      {
        WriteLine("UTF-8");
        stream.Seek(3, SeekOrigin.Begin);
        return Encoding.UTF8;
      }
      stream.Seek(0, SeekOrigin.Begin);
      return encoding;
    }
文件以FF和FE字符开头。这些字节的顺序提供了如何存储文档的信息。两字节的
Unicode可以用小或大端字节顺序法存储。FF紧随在FE之后，表示使用小端字节序，而FE
后跟FF，就表示使用大端字节序。这个字节顺序可以追溯到IBM的大型机，它使用大端字
节给字节排序，Digital Equipment中的PDP11系统使用小端字节序。通过网络与采用不同
字节顺序的计算机通信时，要求改变一端的字节顺序。现在，英特尔CPU体系结构使用小
端字节序，ARM架构允许在小端和大端字节顺序之间切换。
这些编码的其他区别是什么？在ASCII中，每一个字符有7位就足够了。ASCII最初基
于英语字母表，提供了小写字母、大写字母和控制字符。
扩展的ASCII利用8位，允许切换到特定于语言的字符。切换并不容易，因为它需要
关注代码地图，也没有为一些亚洲语言提供足够的字符。UTF-16（Unicode文本格式）解
决了这个问题，它为每一个字符使用16位。因为对于以前的字形，UTF-16还不够，所以
UTF-32为每一个字符使用32位。虽然Windows NT 3.1为默认文本编码切换为UTF-16 （在
以前ASCII的微软扩展中），现在最常用的文本格式是UTF-8。在Web上，UTF-8是自2007
年以来最常用的文本格式（这个取代了ASCII，是以前最常见的字符编码）。UTF-8使用
可变长度的字符定义。一个字符定义为使用1到6个字节。这个字符序列在文件的开头探测
UTF-8:0xEF、0xBB、0xBF。
23.4.2 读取流
打开文件并创建流后，使用Read（）方法读取文件。重复此过程，直到该方法返回0
为止。使用在前面定义的GetEncoding（）方法中创建的Encoder，创建一个字符串。不要
忘记使用Dispose（）方法关闭流。如果可能，使用using语句（如本代码示例所示）自动
销毁流（代码文件StreamSamples/Program.cs）：
    public static void ReadFileUsingFileStream(string fileName)
    {
      const int BUFFERSIZE = 256;
      using (var stream = new FileStream(fileName, FileMode.Open,
        FileAccess.Read, FileShare.Read))
      {
        ShowStreamInformation(stream);
        Encoding encoding = GetEncoding(stream);
        byte[] buffer = new byte[bufferSize];
        bool completed = false;
        do
        {
        int nread = stream.Read(buffer, 0, BUFFERSIZE);
        if (nread == 0) completed = true;
        if (nread < BUFFERSIZE)
        {
          Array.Clear(buffer, nread, BUFFERSIZE - nread);
        }
        string s = encoding.GetString(buffer, 0, nread);
        WriteLine($"read {nread} bytes");
        WriteLine(s);
        } while (! completed);
      }
    }
23.4.3 写入流
把一个简单的字符串写入文本文件，就演示了如何写入流。为了创建一个可以写入的
流，可以使用File.OpenWrite（）方法。这次通过Path.GetTempFileName创建一个临时文件
名。GetTempFileName定义的默认文件扩展名通过Path.ChangeExtension改为txt（代码文件
StreamSamples / Program.cs）：
    public static void WriteTextFile()
    {
      string tempTextFileName = Path.ChangeExtension(Path.GetTempFileName(),
        "txt");
      using (FileStream stream = File.OpenWrite
(tempTextFileName))
      {
        //etc.
写入UTF-8文件时，需要把序言写入文件。为此，可以使用WriteByte（）方法，给流
发送3个字节的UTF-8序言：
      stream.WriteByte
(0xef);
      stream.WriteByte(0xbb);
      stream.WriteByte(0xbf);
这有一个替代方案。不需要记住指定编码的字节。Encoding类已经有这些信息了。
GetPreamble（）方法返回一个字节数组，其中包含文件的序言。这个字节数组使用
Stream类的Write（）方法写入：
      byte[] preamble = Encoding.UTF8.GetPreamble();
      stream.Write(preamble, 0, preamble.Length);
现在可以写入文件的内容。Write（）方法需要写入字节数组，所以需要转换字符
串。将字符串转换为UTF-8的字节数组，可以使用Encoding.UTF8.GetBytes完成这个工
作，之后写入字节数组：
      string hello = "Hello, World! ";
      byte[] buffer = Encoding.UTF8.GetBytes(hello);
      stream.Write(buffer, 0, buffer.Length);
      WriteLine($"file {stream.Name} written");
    }
  }
可以使用编辑器（比如Notepad）打开临时文件，它会使用正确的编码。
23.4.4 复制流
现在复制文件内容，把读写流合并起来。在下一个代码片段中，用File.OpenRead打
开可读的流，用File. OpenWrite打开可写的流。使用Stream.Read（）方法读取缓冲区，用
Stream.Write（）方法写入缓冲区（代码文件StreamSamples / Program. cs）：
    public static void CopyUsingStreams(string inputFile, string outputFile)
    {
      const int BUFFERSIZE = 4096;