# Browser Pwn XNUCA2019-JIT 分析与利用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Browser Pwn XNUCA2019-JIT 分析与利用
这是去年XNUCA初赛中的一道题，本文首先会从源码的角度来分析漏洞的成因，并且详细跟进了漏洞利用中回调函数触发的根源，最后通过两种不同的利用技巧来对该漏洞进行利用。
相关exp和patch文件[在这里](https://github.com/e3pem/CTF/tree/master/xnuca2019_jit)
## 环境搭建
在学习[P4nda师傅](http://p4nda.top/2019/06/11/%C2%96CVE-2018-17463/)关于`CVE-2018-17463`文章的时候，意识到该漏洞和这道题非常相似，所以本题的环境就直接在`CVE-2018-17463`上搭建了（与题目本身的环境不一致，但不影响我们学习该题分析和利用的方法）。
    git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
    export PATH=`pwd`/depot_tools:"$PATH"
    git clone https://github.com/ninja-build/ninja.git
    cd ninja && ./configure.py --bootstrap && cd ..
    export PATH=`pwd`/ninja:"$PATH"
    fetch v8
    git checkout 568979f4d891bafec875fab20f608ff9392f4f29
    # 手动把src/compiler/js-operator.cc中的
    # V(BitwiseAnd, Operator::kNoProperties, 2, 1)改成
    # V(BitwiseAnd, Operator::kNoWrite, 2, 1)
    # debug version
    tools/dev/v8gen.py x64.debug
    ninja -C out.gn/x64.debug d8
    # release version
    tools/dev/v8gen.py x64.debug
    ninja -C out.gn/x64.debug d8
## 漏洞分析
###  patch
这道题的patch非常简洁，只是把`BitwiseAnd`的属性从`kNoProperties`变成了`kNoWrite`。所以问题肯定出在对`BitwiseAnd`操作的误判，即认为该操作不存在可见的副作用，既然这个推断有问题，那么副作用到底出现在什么地方呢？下面将从源码的角度来寻找副作用！
    diff --git a/src/compiler/js-operator.cc b/src/compiler/js-operator.cc
    index 5337ae3bda..f5cf34bb3b 100644
    --- a/src/compiler/js-operator.cc
    +++ b/src/compiler/js-operator.cc
    @@ -597,7 +597,7 @@ CompareOperationHint CompareOperationHintOf(const Operator* op) {
     #define CACHED_OP_LIST(V)                                                
       V(BitwiseOr, Operator::kNoProperties, 2, 1)                            
       V(BitwiseXor, Operator::kNoProperties, 2, 1)                           
    -  V(BitwiseAnd, Operator::kNoProperties, 2, 1)                           
    +  V(BitwiseAnd, Operator::kNoWrite, 2, 1)                           
       V(ShiftLeft, Operator::kNoProperties, 2, 1)                            
       V(ShiftRight, Operator::kNoProperties, 2, 1)                           
       V(ShiftRightLogical, Operator::kNoProperties, 2, 1)                    
###  寻找漏洞触发点
直接全局搜索`BitwiseAnd`字符串便可找到所有可能操作该节点的地方。注意到在`srccompilerjs-generic-lowering.cc`中有对该字符串的操作，对于为什么会关注这里，主要是因为这是Turbofan对`sea of
nodes`处理的一个阶段，Turbofan在对代码进行优化编译的时候主要就是经过多个阶段对节点的分析处理来得到更加底层的操作代码。
经过处理后，`BitwiseAnd`节点被替换成了`Builtins::k##Name`的Builtins调用，也既`Builtins::kBitwiseAnd`。
    // srccompilerjs-generic-lowering.cc
    #define REPLACE_STUB_CALL(Name)                                              
      void JSGenericLowering::LowerJS##Name(Node* node) {                        
        CallDescriptor::Flags flags = FrameStateFlagForCall(node);               
        Callable callable = Builtins::CallableFor(isolate(), Builtins::k##Name); 
        ReplaceWithStubCall(node, callable, flags);                              
      }
    REPLACE_STUB_CALL(BitwiseAnd)
`Builtins::kBitwiseAnd`定义在`srcbuiltinsbuiltins-number-gen.cc`中，主要逻辑就是获取`BitwiseAnd`节点的左右两个`操作数`，利用`TaggedToWord32OrBigInt`判断操作数是正常的数还是`BigInt`，如果左右操作数都不是大整数，就会调用`BitwiseOp`来进行处理，否则就会调用`Runtime::kBigIntBinaryOp`的runtime函数。
    // srcbuiltinsbuiltins-number-gen.cc
    TF_BUILTIN(BitwiseAnd, NumberBuiltinsAssembler) {
      EmitBitwiseOp(Operation::kBitwiseAnd);
    }
      template 
      void EmitBitwiseOp(Operation op) {
        // 要调试的话可以加入：
        // DebugBreak();
        Node* left = Parameter(Descriptor::kLeft);
        Node* right = Parameter(Descriptor::kRight);
        Node* context = Parameter(Descriptor::kContext);
        VARIABLE(var_left_word32, MachineRepresentation::kWord32);
        VARIABLE(var_right_word32, MachineRepresentation::kWord32);
        VARIABLE(var_left_bigint, MachineRepresentation::kTagged, left);
        VARIABLE(var_right_bigint, MachineRepresentation::kTagged);
        Label if_left_number(this), do_number_op(this);
        Label if_left_bigint(this), do_bigint_op(this);
        TaggedToWord32OrBigInt(context, left, &if_left_number, &var_left_word32,
                               &if_left_bigint, &var_left_bigint);
        BIND(&if_left_number);
        TaggedToWord32OrBigInt(context, right, &do_number_op, &var_right_word32,
                               &do_bigint_op, &var_right_bigint);
        BIND(&do_number_op);
        Return(BitwiseOp(var_left_word32.value(), var_right_word32.value(), op));
        // BigInt cases.
        BIND(&if_left_bigint);
        TaggedToNumeric(context, right, &do_bigint_op, &var_right_bigint);
        BIND(&do_bigint_op);
        Return(CallRuntime(Runtime::kBigIntBinaryOp, context,
                           var_left_bigint.value(), var_right_bigint.value(),
                           SmiConstant(op)));
      }
一开始的分析方向主要是放在`BitwiseAnd`节点对两个操作数的改变上，但是我结合实际调试以及源码分析，没有找到哪个地方对操作数进行了改变，感兴趣的可以查看一下相关代码，由于篇幅原因，这里我只分析存在漏洞的地方，也就是`TaggedToWord32OrBigInt`函数中的内容。
跟进`TaggedToWord32OrBigInt`函数，函数又调用了`TaggedToWord32OrBigIntImpl`，`TaggedToWord32OrBigIntImpl`主要的逻辑是一个循环，会判断参数`value`节点的类型是不是小整数Smi，不是的话就会依据其map来看value的类型，例如是不是HeapNumber、BigInt。如果都不是，那么会看value的`instance_type`是不是`ODDBALL_TYPE`，如果仍然不是，那么就会依据`conversion`的类型来调用相应的Builtins函数，这里`conversion`的类型为`Object::Conversion::kToNumeric`，因此会调用`Builtins::NonNumberToNumeric`函数，这就是问题所在了！！
    // srccode-stub-assembler.cc
    void CodeStubAssembler::TaggedToWord32OrBigInt(Node* context, Node* value,
                                                   Label* if_number,
                                                   Variable* var_word32,
                                                   Label* if_bigint,
                                                   Variable* var_bigint) {
      TaggedToWord32OrBigIntImpl(
          context, value, if_number, var_word32, if_bigint, var_bigint);
    }
    template 
    void CodeStubAssembler::TaggedToWord32OrBigIntImpl(
        Node* context, Node* value, Label* if_number, Variable* var_word32,
        Label* if_bigint, Variable* var_bigint, Variable* var_feedback) {
      ...
      // We might need to loop after conversion.
      VARIABLE(var_value, MachineRepresentation::kTagged, value);
      OverwriteFeedback(var_feedback, BinaryOperationFeedback::kNone);
      Variable* loop_vars[] = {&var_value, var_feedback};
      int num_vars =
          var_feedback != nullptr ? arraysize(loop_vars) : arraysize(loop_vars) - 1;
      Label loop(this, num_vars, loop_vars);
      Goto(&loop);
      BIND(&loop);
      {
        // 取操作数的值
        value = var_value.value();
        Label not_smi(this), is_heap_number(this), is_oddball(this),
            is_bigint(this);
        //判断操作数是不是小整数Smi
        GotoIf(TaggedIsNotSmi(value), &not_smi);
        // 如果是小整数，进入到if_number的处理分支
        // {value} is a Smi.
        var_word32->Bind(SmiToInt32(value));
        CombineFeedback(var_feedback, BinaryOperationFeedback::kSignedSmall);
        Goto(if_number);
        // 如果不是Smi，那么加载value对象的map，依据map来判断是不是HeapNumber
        BIND(&not_smi);
        Node* map = LoadMap(value);
        GotoIf(IsHeapNumberMap(map), &is_heap_number);
        // 如果不是HeapNumber，从map中获取实例的类型InstanceType
        Node* instance_type = LoadMapInstanceType(map);
        if (conversion == Object::Conversion::kToNumeric) {
            // 如果instance_type是BigInt
          GotoIf(IsBigIntInstanceType(instance_type), &is_bigint);
        }
        // Not HeapNumber (or BigInt if conversion == kToNumeric).
        // 既不是HeapNumber也不是BigInt
        {
          if (var_feedback != nullptr) {
            // We do not require an Or with earlier feedback here because once we
            // convert the value to a Numeric, we cannot reach this path. We can
            // only reach this path on the first pass when the feedback is kNone.
            CSA_ASSERT(this, SmiEqual(CAST(var_feedback->value()),
                                      SmiConstant(BinaryOperationFeedback::kNone)));
          }
        //  判断instance_type是不是ODDBALL_TYPE
          GotoIf(InstanceTypeEqual(instance_type, ODDBALL_TYPE), &is_oddball);
          // Not an oddball either -> convert.
        //   不是ODDBALL_TYPE，依据conversion的类型调用相应的Builtin函数，conversion的类型为Object::Conversion::kToNumeric
          auto builtin = conversion == Object::Conversion::kToNumeric
                             ? Builtins::kNonNumberToNumeric
                             : Builtins::kNonNumberToNumber;
          var_value.Bind(CallBuiltin(builtin, context, value));
          OverwriteFeedback(var_feedback, BinaryOperationFeedback::kAny);
          Goto(&loop);
          BIND(&is_oddball);
          var_value.Bind(LoadObjectField(value, Oddball::kToNumberOffset));
          OverwriteFeedback(var_feedback,
                            BinaryOperationFeedback::kNumberOrOddball);
          Goto(&loop);
        }
        BIND(&is_heap_number);
        var_word32->Bind(TruncateHeapNumberValueToWord32(value));
        CombineFeedback(var_feedback, BinaryOperationFeedback::kNumber);
        Goto(if_number);
        if (conversion == Object::Conversion::kToNumeric) {
          BIND(&is_bigint);
          var_bigint->Bind(value);
          CombineFeedback(var_feedback, BinaryOperationFeedback::kBigInt);
          Goto(if_bigint);
        }
      }
    }
看到这里的`kNonNumberToNumeric`，让我想起了[数字经济线下赛](https://xz.aliyun.com/t/6577)的Browser
Pwn，那道题利用的就是`ToNumber`函数在调用的时候会触发`valueOf`的回调函数，这道题是否也会触发相应的回调函数呢？在我测试后发现果然是这样！！也就是说我们找到了漏洞存在的地方，`a&b`将生成一个`BitwiseAnd`节点，该节点被判定为`NoWrite`，实际情况却是在对`BitwiseAnd`节点的输入操作数进行处理的时候会触发操作数中的`valueOf`回调函数，所以认为该节点是`NoWrite`是有问题的。
    function opt_me(a,b){
        let c = 1.0
        c = c+3;
        a&b;
        return c;
    }
    let b = {
        valueOf:function(){
            return 112233;
        }
    }
    let b1 = {
        valueOf:function(){
            print('callback');
            return 223344;
        }
    }
    opt_me(1234,b);
    opt_me(1234,b);
    %OptimizeFunctionOnNextCall(opt_me);
    opt_me(2345,b1);