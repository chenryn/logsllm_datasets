---
title: Awk
date: 2020-12-31 15:18:34
background: bg-slate-600
tags:
    - bash
    - text
    - script
categories:
    - Linux Command
intro: |
    This is a one page quick reference cheat sheet to the [GNU awk](https://www.gnu.org/software/gawk/manual/gawk.html), which covers commonly used awk expressions and commands.
plugins:
    - copyCode
---
Getting Started
---------------
### Have a try
```shell script {.wrap}
$ awk -F: '{print $1, $NF}' /etc/passwd
```
----
| - | -             | -                         |
|---|---------------|---------------------------|
|   | `-F:`         | Colon as a separator      |
|   | `{...}`       | Awk program               |
|   | `print`       | Prints the current record |
|   | `$1`          | First field               |
|   | `$NF`         | Last field                |
|   | `/etc/passwd` | Input data file           |
{.left-text}
### Awk program 
```
BEGIN          {} 
    {} 
    {} 
   ...
END            {}
```
#### Example
```
awk '
    BEGIN { print "\n>>>Start" }
    !/(login|shutdown)/ { print NR, $0 }
    END { print "30 {print $1}' /etc/passwd
```
See: [Conditions](#awk-conditions)
### Generate 1000 spaces
```
awk 'BEGIN{
    while (a++  5
awk 'BEGIN{print length("hello")}'
# => HELLO
awk 'BEGIN{print toupper("hello")}'
# => hel
awk 'BEGIN{print substr("hello", 1, 3)}'
```
See: [Functions](#awk-functions)
Awk Variables
---------
### Build-in variables
| -              | -                                                   |
|----------------|-----------------------------------------------------|
| `$0`           | Whole line                                          |
| `$1, $2...$NF` | First, secondâ€¦ last field                           |
| `NR`           | `N`umber of `R`ecords                               |
| `NF`           | `N`umber of `F`ields                                |
| `OFS`          | `O`utput `F`ield `S`eparator   _(default " ")_  |
| `FS`           | input `F`ield `S`eparator  _(default " ")_      |
| `ORS`          | `O`utput `R`ecord `S`eparator  _(default "\n")_ |
| `RS`           | input `R`ecord `S`eparator  _(default "\n")_    |
| `FILENAME`     | Name of the file                                    |
### Expressions
| -                   | -                                  |
|---------------------|------------------------------------|
| `$1 == "root"`      | First field equals root            |
| `{print $(NF-1)}`   | Second last field                  |
| `NR!=1{print $0}`   | From 2th record                    |
| `NR > 3`            | From 4th record                    |
| `NR == 1`           | First record                       |
| `END{print NR}`     | Total records                      |
| `BEGIN{print OFMT}` | Output format                      |
| `{print NR, $0}`    | Line number                        |
| `{print NR "	" $0}` | Line number (tab)                  |
| `{$1 = NR; print}`  | Replace 1th field with line number |
| `$NF > 4`           | Last field > 4                     |
| `NR % 2 == 0`       | Even records                       |
| `NR==10, NR==20`    | Records 10 to 20                   |
| `BEGIN{print ARGC}` | Total arguments                    |
| `ORS=NR%5?",":"\n"` | Concatenate records                |
### Examples
Print sum and average
```
awk -F: '{sum += $3}
     END { print sum, sum/NR }
' /etc/passwd
```
Printing parameters
```
awk 'BEGIN {
    for (i = 1; i  _(default "%.6g")_          |
| `RSTART`  | Location in the string                                    |
| `RLENGTH` | Length of match                                           |
| `SUBSEP`  | Multi-dimensional array separator  _(default "\034")_ |
| `ARGIND`  | Argument Index                                            |
### GNU awk only
| -             | -                     |
|---------------|-----------------------|
| `ENVIRON`     | Environment variables |
| `IGNORECASE`  | Ignore case           |
| `CONVFMT`     | Conversion format     |
| `ERRNO`       | System errors         |
| `FIELDWIDTHS` | Fixed width fields    |
### Defining variable
```
awk -v var1="Hello" -v var2="Wold" '
    END {print var1, var2}
' `
- `=`
{.cols-3 .marker-none}
### Examples
```
awk 'BEGIN {
    if ("foo" ~ "^fo+$")
        print "Fooey!";
}'
```
#### Not match
```
awk 'BEGIN {
    if ("boo" !~ "^fo+$")
        print "Boo!";
}'
```
#### if in array
```
awk 'BEGIN {
    assoc["foo"] = "bar";
    assoc["bar"] = "baz";
    if ("foo" in assoc)
        print "Fooey!";
}'
```
Awk Functions
----------
### Common functions {.col-span-2}
| Function              | Description                                                                     |
|-----------------------|---------------------------------------------------------------------------------|
| `index(s,t)`          | Position in string s where string t occurs, 0 if not found                      |
| `length(s)`           | Length of string s (or $0 if no arg)                                            |
| `rand`                | Random number between 0 and 1                                                   |
| `substr(s,index,len)` | Return len-char substring of s that begins at index (counted from 1)            |
| `srand`               | Set seed for rand and return previous seed                                      |
| `int(x)`              | Truncate x to integer value                                                     |
| `split(s,a,fs)`       | Split string s into array a split by fs, returning length of a                  |
| `match(s,r)`          | Position in string s where regex r occurs, or 0 if not found                    |
| `sub(r,t,s)`          | Substitute t for first occurrence of regex r in string s (or $0 if s not given) |
| `gsub(r,t,s)`         | Substitute t for all occurrences of regex r in string s                         |
| `system(cmd)`         | Execute cmd and return exit status                                              |
| `tolower(s)`          | String s to lowercase                                                           |
| `toupper(s)`          | String s to uppercase                                                           |
| `getline`             | Set $0 to next input record from current input file.                            |
### User defined function
```
awk '
    # Returns minimum number
    function find_min(num1, num2){
       if (num1  num2)
       return num1
       return num2
    }
    # Main function
    function main(num1, num2){
       result = find_min(num1, num2)
       print "Minimum =", result
       result = find_max(num1, num2)
       print "Maximum =", result