过程直至倒数第 2 个元素为止。现在只剩下两个元素。比较这两个元素，把
较大者放在倒数第2的位置。这样，数组中的最小元素就在最后的位置上。
这看起来用for循环就能完成任务，但是我们还要更详细地分析“查找和
放置”的过程。在剩余项中查找最大值的方法是，比较数组剩余元素的第1个
元素和第2个元素。如果第2个元素比第1个元素大，交换两者。现在比较数
组剩余元素的第1个元素和第3个元素，如果第3个元素比较大，交换两者。
每次交换都把较大的元素移至顶部。继续这一过程直到比较第 1 个元素和最
后一个元素。比较完毕后，最大值元素现在是剩余数组的首元素。已经排出
了该数组的首元素，但是其他元素还是一团糟。下面是排序过程的伪代码：
for n - 第2个元素至最后一个元素,
比较第n个元素与第1个元素，如果第n个元素更大，交换这两个元素的
值
看上去用一个for循环也能搞定。只不过要把它嵌套在刚才的for循环
中。外层循环指明正在处理数组的哪一个元素，内层循环找出应储存在该元
素的值。把这两部分伪代码结合起来，翻译成 
C代码，就得到了程序清单
11.29中的stsrt()函数。顺带一提，C库中有一个更高级的排序函数：qsort()。
该函数使用一个指向函数的指针进行排序比较。第16章将给出该函数的用法
示例。
829
11.7 ctype.h字符函数和字符串
第7章中介绍了ctype.h系列与字符相关的函数。虽然这些函数不能处理
整个字符串，但是可以处理字符串中的字符。例如，程序清单11.30中定义
的ToUpper()函数，利用toupper()函数处理字符串中的每个字符，把整个字符
串转换成大写；定义的 PunctCount()函数，利用 ispunct()统计字符串中的标
点符号个数。另外，该程序使用strchr()处理fgets()读入字符串的换行符（如
果有的话）。
程序清单11.30 mod_str.c程序
/* mod_str.c -- 修改字符串 */
#include 
#include 
#include 
#define LIMIT 81
void ToUpper(char *);
int PunctCount(const char *);
int main(void)
{
char line[LIMIT];
char * find;
puts("Please enter a line:");
fgets(line, LIMIT, stdin);
830
find = strchr(line, '\n'); // 查找换行符
if (find)        // 如果地址不是 NULL，
*find = '\0';     // 用空字符替换
ToUpper(line);
puts(line);
printf("That line has %d punctuation characters.\n", 
PunctCount(line));
return 0;
}
void ToUpper(char * str)
{
while (*str)
{
*str = toupper(*str);
str++;
}
}
int PunctCount(const char * str)
{
831
int ct = 0;
while (*str)
{
if (ispunct(*str))
ct++;
str++;
}
return ct;
}
while (*str)循环处理str指向的字符串中的每个字符，直至遇到空字符。
此时*str的值为0（空字符的编码值为0），即循环条件为假，循环结束。下
面是该程序的运行示例：
Please enter a line:
Me? You talkin' to me? Get outta here!
ME? YOU TALKIN' TO ME? GET OUTTA HERE!
That line has 4 punctuation characters.
ToUpper()函数利用toupper()处理字符串中的每个字符（由于C区分大小
写，所以这是两个不同的函数名）。根据ANSI C中的定义，toupper()函数只
改变小写字符。但是一些很旧的C实现不会自动检查大小写，所以以前的代
码通常会这样写：
if (islower(*str)) /* ANSI C之前的做法 -- 在转换大小写之前先检查 */
832
*str = toupper(*str);
顺带一提，ctype.h中的函数通常作为宏（macro）来实现。这些C预处理
器宏的作用很像函数，但是两者有一些重要的区别。我们在第16章再讨论关
于宏的内容。
该程序使用 fgets()和 strchr()组合，读取一行输入并把换行符替换成空字
符。这种方法与使用s_gets()的区别是：s_gets()会处理输入行剩余字符（如
果有的话），为下一次输入做好准备。而本例只有一条输入语句，就没必要
进行多余的步骤。
833
11.8 命令行参数
在图形界面普及之前都使用命令行界面。DOS和UNIX就是例子。Linux
终端提供类UNIX命令行环境。命令行（command line）是在命令行环境中，
用户为运行程序输入命令的行。假设一个文件中有一个名为fuss的程序。在
UNIX环境中运行该程序的命令行是：
$ fuss
或者在Windows命令提示模式下是：
C> fuss
命令行参数（command-line argument）是同一行的附加项。如下例：
$ fuss -r Ginger
一个C程序可以读取并使用这些附加项（见图11.7）。
程序清单11.27是一个典型的例子，该程序通过main()的参数读取这些附
加项。
834
图11.7 命令行参数
程序清单11.31 repeat.c程序
/* repeat.c -- 带参数的 main() */
#include 
int main(int argc, char *argv [])
{
int count;
printf("The command line has %d arguments:\n", argc - 1);
for (count = 1; count repeat Resistance is futile
The command line has 3 arguments:
1: Resistance
2: is
3: futile
由此可见该程序为何名为repeat。下面我们解释一下它的运行原理。
C编译器允许main()没有参数或者有两个参数（一些实现允许main()有更
多参数，属于对标准的扩展）。main()有两个参数时，第1个参数是命令行
中的字符串数量。过去，这个int类型的参数被称为argc 
（表示参数计数
(argument count)）。系统用空格表示一个字符串的结束和下一个字符串的开
始。因此，上面的repeat示例中包括命令名共有4个字符串，其中后3个供
repeat使用。该程序把命令行字符串储存在内存中，并把每个字符串的地址
储存在指针数组中。而该数组的地址则被储存在 main()的第 2 个参数中。按
照惯例，这个指向指针的指针称为argv（表示参数值[argument value]）。如
果系统允许（一些操作系统不允许这样），就把程序本身的名称赋给
argv[0]，然后把随后的第1个字符串赋给argv[1]，以此类推。在我们的例子
中，有下面的关系：
argv[0] 指向 repeat （对大部分系统而言）
836
argv[1] 指向Resistance
argv[2] 指向is
argv[3] 指向futile
程序清单11.31的程序通过一个for循环依次打印每个字符串。printf()中
的%s转换说明表明，要提供一个字符串的地址作为参数，而指针数组中的
每个元素（argv[0]、argv[1]等）都是这样的地址。
main()中的形参形式与其他带形参的函数相同。许多程序员用不同的形
式声明argv：
int main(int argc, char **argv)
char 
**argv与char 
*argv[]等价。也就是说，argv是一个指向指针的指
针，它所指向的指针指向 char。因此，即使在原始定义中，argv 也是指向指
针（该指针指向 char）的指针。两种形式都可以使用，但我们认为第1种形
式更清楚地表明argv表示一系列字符串。
顺带一提，许多环境（包括UNIX和DOS）都允许用双引号把多个单词
括起来形成一个参数。例如：
repeat "I am hungry" now
这行命令把字符串"I am hungry"赋给argv[1]，把"now"赋给argv[2]。
11.8.1 集成环境中的命令行参数
Windows集成环境（如Xcode、Microsoft Visual C++和Embarcadero C++
Builder）都不用命令行运行程序。有些环境中有项目对话框，为特定项目指
定命令行参数。其他环境中，可以在IDE中编译程序，然后打开MS-DOS窗
口在命令行模式中运行程序。但是，如果你的系统有一个运行命令行的编译
器（如GCC）会更简单。
837
11.8.2 Macintosh中的命令行参数
如果使用Xcode 
4.6（或类似的版本），可以在Product菜单中选择
Scheme选项来提供命令行参数，编辑Scheme，运行。然后选择Argument标
签，在Launch的Arguments Pass中输入参数。
或者进入Mac的Terminal模式和UNIX的命令行环境。然后，可以找到程
序可执行代码的目录（UNIX的文件夹），或者下载命令行工具，使用gcc或
clang编译程序。
838
11.9 把字符串转换为数字
数字既能以字符串形式储存，也能以数值形式储存。把数字储存为字符
串就是储存数字字符。例如，数字213以'2'、'1'、'3'、'\0'的形式被储存在字
符串数组中。以数值形式储存213，储存的是int类型的值。
C要求用数值形式进行数值运算（如，加法和比较）。但是在屏幕上显
示数字则要求字符串形式，因为屏幕显示的是字符。printf()和 
sprintf()函
数，通过%d 
和其他转换说明，把数字从数值形式转换为字符串形式，
scanf()可以把输入字符串转换为数值形式。C 还有一些函数专门用于把字符
串形式转换成数值形式。
假设你编写的程序需要使用数值命令形参，但是命令形参数被读取为字
符串。因此，要使用数值必须先把字符串转换为数字。如果需要整数，可以
使用atoi()函数（用于把字母数字转换成整数），该函数接受一个字符串作
为参数，返回相应的整数值。程序清单11.32中的程序示例演示了该函数的
用法。
程序清单11.32 hello.c程序
/* hello.c -- 把命令行参数转换为数字 */
#include 
#include 
int main(int argc, char *argv [])
{
int i, times;
if (argc 
#include 
#define LIM 30
char * s_gets(char * st, int n);
int main()
{
841
char number[LIM];
char * end;
long value;