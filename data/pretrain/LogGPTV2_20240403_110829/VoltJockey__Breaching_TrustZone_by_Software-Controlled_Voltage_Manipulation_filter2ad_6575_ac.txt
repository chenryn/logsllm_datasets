Besides, we insert a restriction mechanism into the driver to pre-
vent other programs from modifying the core voltage once we have
changed it. User applications cannot invoke the voltage-related op-
erations exposed by the voltage regulator driver due to a low privi-
lege. However, we want the attacker procedure to run in userspace
in order to make the attack more salable and extendable. Therefore,
we develop a voltage manipulator kernel module (the VoltJockey
kernel) to invoke the hardware regulator driver and provide user-
application interfaces.
The module does not need to be integrated into the kernel image
directly, and it can work in a loadable manner. In order to maintain
the timing stability of the voltage manipulating process for a better
fault injection precision, we implement most of the operations of
the five attack steps mentioned earlier into the VoltJockey kernel.
It first initializes the processor with a safe voltage and then clears
the residual states. Next, it waits for the victim function and the
5001000150020002500Frequency (MHZ)60070080090010001100Voltage (mv)Voltage boundary when target core is busyVoltage boundary when target core is idleOPPsSession 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom200cores are not consuming much power with low workloads and the
fault injection is harder than that in the situation with most cores
working with high workloads.
It should be noticed that it is not recommended to make all the
irrelevant cores work at high frequencies because the hardware
faults may also be induced into them. In this study, we let the
irrelevant cores work at the same low frequency as attacker core.
Figure 6: The minimum duration (number of NOP loops) of
glitch voltage for the successful hardware fault injections.
In this experiment, the frequency of attacker core and all
the irrelevant cores is 0.42GHZ and the victim core’s fre-
quency is 2.65GHZ.
• Lower baseline voltage.
From Figure 6, we can conclude that lower fault-injecting volt-
ages result in easier fault injection process (less injection time).
However, a remarkable voltage drop is also very easy to cause sys-
tem reboot and interrupts the attack. In this study, we find that the
switch from the baseline voltage to glitch voltage is more reliable
and successful when their gap is reduced. Therefore, we configure
the baseline voltage of the processor as the lowest voltage that is
just available for all the cores.
• Proper temperature.
It is significant for the VoltJockey to select a proper working
temperature to improve the injection reliability although processors
are designed to fit for an extensive range of working temperatures.
We find that an appropriately high temperature is very helpful
for the injection success. In this study, we run a computing-heavy
mission to raise the CPU temperature to the range of 35◦C to 40◦C
before attacking.
We select a frequency from frequency table for the victim core
that is idle and obtain the boundary voltages that will make the
system stable. Moreover, we run a computing task that will make
the victim core busy all the time and observe the boundary voltages
again. Figure 5 displays the experiment results. The red line shows
the lowest safe voltages for system being stable when the victim
core is idle, and the blue line is the boundary voltages when the
victim core is busy. As we can see from Figure 5, the voltage dif-
ferentials among different frequencies are obvious. The boundary
voltages when the core is vacant are higher than it is busy, espe-
cially in high frequency, this may because that busy states cost
more energy. For a certain frequency, voltages between the black
line and blue line are safe, voltages between the blue line and red
line are likely to induce hardware faults, and voltages below the red
line can take hardware faults in a very high possibility. Therefore,
we can select the voltages below red line as the attack voltages.
4.10 Attacker Procedure Safety
Distributing the two different procedures to different cores can skirt
crashes of the attacker procedure taken by the hardware faults of
victim core. However, the glitch voltage may also cause the attacker
core faulty especially when the frequency of attacker core is not
lower than the victim core. Figure 5 indicates that the minimum
acceptable voltage for a core is positive correlated to the frequency
and it is possible to select a voltage that is safe for the low-frequency
but harmful for the high-frequency. Fortunately, the frequencies
of different cores are independent. Before attacking, we set the
attacker core with a low frequency and the victim core with a high
frequency. Then, we select the voltage that is safe for the attacker
core but harmful for the victim core as the reason for hardware
faults, which guarantees that the attacker procedure cannot be
influenced in each voltage glitch trial.
4.11 Previous Delay
Figure 7: The previous delay for AES and RSA with differ-
ent victim core frequencies. In this figure, the frequency of
attacker core is 0.42GHZ and core voltage is 0.6V .
The previous delay controls the fault injection sites. It is mainly
determined by four factors: 1) the program codes of victim func-
tion; 2) the frequency of victim core; 3) the frequency of attacker
core; 4) the core voltage. For a fixed victim function, peculiarly an
encryption function, its implementations are commonly public; it
is convenient to analyze the execution of the victim function and
acquire the best fault injection points in advance. In this study, we
implement an AES encryption function based on S-box and a RSA
decryption function based on the Android cryptography library. We
obtain the NOP loop cycles from the start of AES to the MixColumn
500550600650700750800850900Voltage (mv)32003400360038004000420044004600Loop CyclesIrrelevant cores are normalIrrelevant cores are busyIrrelevant cores are idle5001000150020002500Frequency (MHZ)100200300400500600700Previous delay (K Loop cycles)Previous delay for AESPrevious delay for RSAPrevious delay for RSA in TrustZoneSession 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom201operation of the seventh round with different victim core frequen-
cies but the same core voltage. Besides, we count the time from the
start of RSA to instructions that transfer big-endian public modulus
to little-endian modulus. Figure 7 shows the relationships between
previous delay and the frequency of victim core for AES and RSA.
4.12 Glitch Voltage and Duration Pairs
Although voltage is the source of hardware faults, the malicious
actions are decided by both voltage and its duration time. Our aim is
to inject controllable hardware faults into the input state matrix of
the eighth round of AES and the public modulus of RSA. Observing
the data modifications caused by different voltage-duration pairs
can help us select appropriate attacking parameters.
(a) Number of byte errors on the input of the eighth round of AES.
(b) Number of byte faults on the public modulus of RSA. We divide the numbers
with 16 to show them in figure legend obviously.
Figure 8: The number of byte alterations with different
glitch voltages and duration. In this figure, the attacker core
frequency is 0.42GHZ and victim core frequency is 2.65GHZ.
We fix the core frequencies, and then exert different core voltages
and keep the voltage for various duration time. Next, we acquire the
number of induced byte errors in the state matrix before the eighth
round of AES and the public modulus of RSA. For each voltage-
duration pair, we test five times and plot the average number of
modified bits as the color-varying dots/squares in the Figure 8.
5 ATTACKING TRUSTZONE AES
In this section, we first present the experiments of applying the
VoltJockey attack on the AES performed in the normal world, in
which the encryption key can be obtained. Then, we carry out the
attack to the AES running in the TrustZone, and the key can also be
obtained successfully. Without loss of generality, the target AES is a
128-bits block cipher, which encompasses 10 rounds operations on
the plaintext to generate corresponding ciphertext. There are four
operations in each round except for the last round: 1) ShiftRows
cyclically shifts the bytes in each row of the state matrix by a certain
offset; 2) SubBytes replaces the plaintext bytes with corresponding
S-box bytes; 3) AddRoundKey combines each element of the state
matrix with the related key bytes using bitwise exclusive OR (XOR);
4) MixColumns blends every column of the state matrix with a linear
transformation. The last round skips MixColumns.
The target device is a Google Nexus 6 mobile phone and the
system version number is LMY48M. The key extraction is achieved
on a DELL XPS laptop that has a virtual machine with 2G memories
and two cores, in which Ubuntu 16.04 is performed.
5.1 Differential Fault Analysis on AES with a
Single Fault
Brutely forcing the key of AES is impractically time-expensive,
especially when the key is long enough. However, researchers have
shown that the key hypotheses can be largely reduced if some errors
are introduced into the middle execution of AES [5, 11, 23, 29, 67].
Triggering hardware faults to generate errors is a convenient and
efficient choice. In this study, we employ the key extraction method
proposed by Tunstall et al. [67] who verified that the key hypotheses
can be reduced a lot using a two-stages algorithm when a single
random byte fault is introduced into the input of the eighth round.
If a byte error happens in the input of the eighth round in a 128-
bits AES, the functions SubBytes, ShiftRows, and AddRoundKey
of the eighth round will record this error into the corresponding
location of state matrix, and function MixColumns will next propa-
gate this error to one column of state matrix. This will produce four
byte-errors to the input of the ninth round. Similarly, the four byte-
errors will be spread to the complete state matrix and cause sixteen
errors to the input of the tenth round. There is no MixColumns op-
eration in the tenth round, the other three functions replace, shift
and XOR an element of state matrix once a time. Therefore, a byte
error of input of the eighth round can be exactly propagated to the
entire output bytes. By analyzing four sets of equations between the
output bytes and the input bytes of the eighth round, the attacker
will be able to have 232 key assumptions for the encryption key.
The function KeyExpansion generates a key for next round using
this round key, and the key schedule is invertible. Therefore, the
ninth round key can be expressed by the key of the tenth round.
Based on their relationship, attackers can further reduce the key
conjectures to 28 [67]. In this study, we merge the key hypotheses
for different ciphertext pairs to further scale down the searching
space.
500550600650700750800850900Voltage (mv)3.503.754.004.254.504.755.005.255.50Duration (K Loop Cycles)12345678910111213141516500550600650700750800850900Voltage (mv)3.503.754.004.254.504.755.005.255.50Duration (K Loop Cycles)1514131211109876543210Session 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom202Table 2: Success rate with diverse parameters in AES attack.
Parameter
Normal world
#One
byte error
Volt
(V)
0.50
0.55
0.60
0.65
0.70
0.75
0.80
0.85
0.90
Dura.
(Loops)
3700
3900
4100
4200
4200
4100
4400
4500
4800
Average
#Error
occurs
54
33
56
35
26
47
45
48
32
41.8
1
2
3
1
2
1
2
2
1
1.7
Succ.
rate
1%
2%
3%
1%
2%
1%
2%
2%
1%
1.7%
#Error
occurs
48
37
51
62
28
58
30
46
42
44.7
TrustZone
#One
byte error
3
1
2
5
3
2
1
2
1
2.2
Succ
rate
3%
1%
2%
5%
3%
2%
1%
2%
1%
2.2%
Figure 9: The distributions of modified bytes in AES attacks.
5.2 Normal World Attack
We select nine different parameters that take a single-byte error
from Figure 8(a) to maliciously analyze the AES key of the normal
world. We do not consider the step of waiting for the victim func-
tion due to the operations on plaintext in every round is fixed. We
try the attack on AES for 100 times for each parameter and use the
percentage of attack success to evaluate the effects of the param-