title:Globally Synchronized Time via Datacenter Networks
author:Ki-Suh Lee and
Han Wang and
Vishal Shrivastav and
Hakim Weatherspoon
Globally Synchronized Time via Datacenter Networks
Ki Suh Lee, Han Wang, Vishal Shrivastav, Hakim Weatherspoon
Computer Science Department
Cornell University
kslee,hwang,vishal,PI:EMAIL
ABSTRACT
Synchronized time is critical to distributed systems and
network applications in a datacenter network. Unfortu-
nately, many clock synchronization protocols in datacen-
ter networks such as NTP and PTP are fundamentally lim-
ited by the characteristics of packet switching networks.
In particular, network jitter, packet buffering and schedul-
ing in switches, and network stack overheads add non-
deterministic variances to the round trip time, which must
be accurately measured to synchronize clocks precisely.
In this paper, we present the Datacenter Time Protocol
(DTP), a clock synchronization protocol that does not use
packets at all, but is able to achieve nanosecond precision.
In essence, DTP uses the physical layer of network devices
to implement a decentralized clock synchronization proto-
col. By doing so, DTP eliminates most non-deterministic
elements in clock synchronization protocols. Further, DTP
uses control messages in the physical layer for communicat-
ing hundreds of thousands of protocol messages without in-
terfering with higher layer packets. Thus, DTP has virtually
zero overhead since it does not add load at layers 2 or higher
at all. It does require replacing network devices, which can
be done incrementally. We demonstrate that the precision
provided by DTP in hardware is bounded by 25.6 nanosec-
onds for directly connected nodes, 153.6 nanoseconds for a
datacenter with six hops, and in general, is bounded by 4T D
where D is the longest distance between any two servers in
a network in terms of number of hops and T is the period
of the fastest clock (≈ 6.4ns). Moreover, in software, a
DTP daemon can access the DTP clock with usually better
than 4T (≈ 25.6ns) precision. As a result, the end-to-end
precision can be better than 4T D + 8T nanoseconds. By
contrast, the precision of the state of the art protocol (PTP)
is not bounded: The precision is hundreds of nanoseconds
when a network is idle and can decrease to hundreds of mi-
Permission to make digital or hard copies of part or all of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for third-party components of
this work must be honored. For all other uses, contact the owner/author(s).
SIGCOMM ’16 August 22-26, 2016, Florianopolis , Brazil
c(cid:13) 2016 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4193-6/16/08.
DOI: http://dx.doi.org/10.1145/2934872.2934885
croseconds when a network is heavily congested.
CCS Concepts
•Networks → Time synchronization protocols; Data cen-
ter networks; •Hardware → Networking hardware;
1.
INTRODUCTION
Synchronized clocks are essential for many network and
distributed applications. Importantly, an order of magnitude
improvement in synchronized precision can improve perfor-
mance. For instance, if no clock differs by more than 100
nanoseconds (ns) compared to 1 microsecond (us), one-way
delay (OWD), which is an important metric for both net-
work monitoring and research, can be measured precisely
due to the tight synchronization. Synchronized clocks with
100 ns precision allow packet level scheduling of minimum
sized packets at a ﬁner granularity, which can minimize con-
gestion in rack-scale systems [23] and in datacenter net-
works [47]. Moreover, taking a snapshot of forwarding ta-
bles in a network requires synchronized clocks [53].
In
software-deﬁned networks (SDN), synchronized clocks with
microsecond level of precision can be used for coordinated
network updates with less packet loss [42] and for real-time
synchronous data streams [26]. In distributed systems, con-
sensus protocols like Spanner can increase throughput with
tighter synchronization precision bounds on TrueTime [22].
As the speeds of networks continue to increase, the demand
for precisely synchronized clocks at nanosecond scale is
necessary.
Synchronizing clocks with nanosecond level precision is
a difﬁcult problem. It is challenging due to the problem of
measuring round trip times (RTT) accurately, which many
clock synchronization protocols use to compute the time
difference between a timeserver and a client. RTTs are
prone to variation due to characteristics of packet switching
networks: Network jitter, packet buffering and scheduling,
asymmetric paths, and network stack overhead. As a result,
any protocol that relies on RTTs must carefully handle mea-
surement errors.
In this paper, we present the Datacenter Time Protocol
(DTP) which provides nanosecond precision in hardware
and tens of nanosecond precision in software, and at virtu-
ally no cost to the datacenter network (i.e. no protocol mes-
sage overhead). DTP achieves better precision than other
protocols and provides strong bounds on precision: By run-
ning in the physical layer of a network stack, it eliminates
non-determinism from measuring RTTs and it introduces
zero Ethernet packets on the network. It is decentralized and
synchronizes clocks of every network device in a network
including network interfaces and switches.
In practice,
in a 10 Gbps network, DTP achieves a
bounded precision of 25.6 nanoseconds between any di-
rectly connected nodes, and 153.6 nanoseconds within an
entire datacenter network with six hops at most between any
two nodes, which is the longest distance in a Fat-tree [18]
(i.e. no two nodes [clocks] will differ by more than 153.6
nanoseconds). In software, a DTP daemon can access its
DTP clock with usually better than 4T nanosecond precision
resulting in an end-to-end precision better than 4T D + 8T
nanoseconds where D is the longest distance between any
two servers in a network in terms of number of hops and T is
the period of the fastest clock (≈ 6.4ns). DTP’s approach ap-
plies to full-duplex Ethernet standards such as 1, 10, 40, 100
Gigabit Ethernet (See Sections 2.5 and 7). It does require
replacing network devices to support DTP running in the
physical layer of the network. But, it can be incrementally
deployed via DTP-enabled racks and switches. Further, in-
crementally deployed DTP-enabled racks and switches can
work together and enhance other synchronization protocols
such as Precise Time Protocol (PTP) [8] and Global Po-
sitioning System (GPS) by distributing time with bounded
nanosecond precision within a rack or set of racks without
any load on the network.
The contributions of our work are as follows:
• We present DTP that provides clock synchronization at
nanosecond resolution with bounded precision in hard-
ware and tens of nanosecond precision in software.
• We demonstrate that DTP works in practice. DTP can
synchronize all devices in a datacenter network.
• We evaluate PTP as a comparison. PTP does not pro-
vide bounded precision and is affected by conﬁgura-
tion, implementation, and network characteristics such
as load and congestion.
2. TOWARDS PRECISE CLOCK SYN-
CHRONIZATION
In this paper, we show how to improve the precision and
efﬁciency of clock synchronization by running a protocol in
the physical layer of the network protocol stack. In fact, two
machines physically connected by an Ethernet link are al-
ready synchronized: Synchronization is required to reliably
transmit and receive bitstreams. The question, then, is how
to use the bit-level synchronization of the physical layer to
synchronize clocks of distributed systems in a datacenter,
and how to scale the number of synchronized machines
from two to a large number of machines in a datacenter? In
this section, we state the problem of clock synchronization,
why it is hard to achieve better precision and scalability
with current approaches, and how synchronizing clocks in
the physical layer can improve upon the state-of-the-art.
2.1 Terminology
A clock c of a process p1 is a function that returns a local
clock counter given a real time t, i.e. cp(t) = local clock
counter. Note that a clock is a discrete function that returns
an integer, which we call clock counter throughout the paper.
A clock changes its counter at every clock cycle (or tick). If
clocks ci for all i are synchronized, they will satisfy
∀i, j, t |ci(t) − cj(t)| ≤ ǫ
(1)
where ǫ is the level of precision to which clocks are syn-
chronized. Accuracy refers to how close clock counters are
to true time [48].
Each clock is driven by a quartz oscillator, which oscil-
lates at a given frequency. Oscillators with the same nom-
inal frequency may run at different rates due to frequency
variations caused by external factors such as temperature.
As a result, clocks that have been previously synchronized
will have clock counters that differ more and more as time
progresses. The difference between two clock counters is
called the offset, which tends to increase over time, if not
resynchronized. Therefore, the goal of clock synchroniza-
tion is to periodically adjust offsets between clocks (offset
synchronization) and/or frequencies of clocks so that they
remain close to each other [48].
If a process attempts to synchronize its clock to true time
by accessing an external clock source such as an atomic
clock, or a satellite, it is called external synchronization. If a
process attempts to synchronize with another (peer) process
with or without regard to true time, it is called internal syn-
chronization. Thus, externally synchronized clocks are also
internally synchronized, but not vice versa [24]. In many
cases, monotonically increasing and internally synchronized
clocks are sufﬁcient. For example, measuring one-way de-
lay and processing time or ordering global events do not
need true time. As a result, in this paper, we focus on how
to achieve internal synchronization: We achieve clock syn-
chronization of all clocks in a datacenter with high precision;
however, their clock counters are not synchronized to an ex-
ternal source. We brieﬂy discuss how to extend the protocol
to support external synchronization in Section 5.
2.2 Clock Synchronization
Regardless of whether the goal is to achieve internal or
external synchronization, the common mechanism of syn-
chronizing two clocks is similar across different algorithms
and protocols: A process reads a different process’s cur-
rent clock counter and computes an offset, adjusting its own
clock frequency or clock counter by the offset.
In more detail, a process p sends a time request message
with its current local clock counter (ta in Figure 1) to a pro-
cess q (q reads p’s clock). Then, process q responds with a
time response message with its local clock counter and p’s
original clock counter (p reads q’s clock). Next, process p
computes the offset between its local clock counter and the
1We will use the term process to denote not only a process
running on a processor but also any system entities that can
access a clock, e.g. a network interface card.
Server
t'a
Client
tb
tc
t'b
t'c
Userspace
Wire
t'd
Wire
Userspace
ta
td
Figure 1: Common approach to measure offset and RTT.
remote clock counter (q) and round trip time (RTT) of the
messages upon receiving the response at time td. Finally,
p adjusts its clock counter or the rate of its clock to remain
close to q’s clock.
In order to improve precision, q can respond with two
clock counters to remove the internal delay of processing the
time request message: One upon receiving the time request
(tb), and the other before sending the time response (tc). See
Figure 1. For example, in NTP, the process p computes RTT
δ and offset θ, as follows [41]:
δ = (td − ta) − (tc − tb)
(ta + td)
(tb + tc)
θ =
−
2
2
Then, p applies these values to adjust its local clock.
2.3 Problems of Clock synchronization
Precision of a clock synchronization protocol is a func-
tion of clock skew, errors in reading remote clocks, and the
interval between resynchronizations [24, 29, 33]. We dis-
cuss these factors in turn below and how they contribute to
(reduced) precision in clock synchronization protocols.
2.3.1 Problems with Oscillator skew
Many factors such as temperature and quality of an os-
cillator can affect oscillator skew. Unfortunately, we often
do not have control over these factors to the degree neces-
sary to prevent reduced precision. As a result, even though
oscillators may have been designed with the same nominal
frequency, they may actually run at slightly different rates
causing clock counters to diverge over time, requiring syn-
chronization.
Precision errors introduced by timestamps.
First, accurate timestamping is not trivial. Before trans-
mitting a message, a process timestamps the message to em-
bed its own local counter value. Similarly, after receiving a
message, a process timestamps it for further processing (i.e.
computing RTT). Timestamping is often inaccurate in com-
modity systems [36], which is a problem. It can add random
delay errors which can prevent the nanosecond-level times-
tamping required for 10 Gigabit Ethernet (10 GbE) where
minimum sized packets (64-byte) arriving at line speed can
arrive every 68 nanoseconds. Improved timestamping with
nanosecond resolution via new NICs are becoming more ac-
cessible [13]. However, random jitter can still be introduced
due to the issues discussed below.
Precision errors introduced by network stack.
Second, transmitting and receiving messages involve a
software network stack (e.g., between ta and t′
a in Figure 1).
Most clock synchronization protocols (e.g., NTP and PTP)
run in a time daemon, which periodically sends and receives
UDP packets between a remote process (or a time server).
Unfortunately, the overhead of system calls, buffering in ker-
nel and network interfaces, and direct memory access trans-
actions can all contribute to errors in delay [25, 27, 36]. To
minimize the impact of measurement errors, a daemon can
run in kernel space, or kernel bypassing can be employed.
Nonetheless, non-deterministic delay errors cannot be com-
pletely removed when a protocol involves a network stack.
Precision errors introduced by network jitter.
a and t′
b or between t′
Third, packet propagation time can vary since it is prone
to network jitter (e.g., between t′
c and t′
d
in Figure 1). Two processes are typically multiple hops away
from each other and the delay between them can vary over
time depending on network conditions and external trafﬁc.
Further, time requests and responses can be routed through
asymmetric paths, or they may suffer different network con-
ditions even when they are routed through symmetric paths.
As a result, measured delay, which is often computed by di-
viding RTT by two, can be inaccurate.
2.3.2 Problems with Reading Remote Clocks
2.3.3 Problems with Resynch Frequency
There are many opportunities where reading clocks can be
inaccurate and lead to reduced precision. In particular, read-
ing remote clocks can be broken down into multiple steps
(enumerated below) where each step can introduce random
delay errors that can affect the precision of clock synchro-
nization.
1. Preparing a time request (reply) message
2. Transmitting a time request (reply) message
3. Packet traversing time through a network
4. Receiving a time request (reply) message
5. Processing a time request (reply) message
Speciﬁcally, there are three points where precision is ad-
versely affected: (a) accuracy of timestamping affects steps
1 and 5, (b) the software network stack can introduce errors
in steps 2 and 4, and (c) network jitter can contribute errors
in step 3. We discuss each one further.
The more frequent resynchronizations, the more precise
clocks can be synchronized to each other. However, frequent
resynchronizations require increased message communica-
tion, which adds overhead to the network, especially in a
datacenter network where hundreds of thousands of servers
exist. The interval between resynchronizations can be con-