indicating which privilege sets are live and for how long during
a program’s execution.
Finally, PrivAnalyzer feeds the privilege sets and user/-
group ID credentials observed during execution to the ROSA
bounded model checker. As Section V-B describes, ROSA de-
termines if the desired result of an attacker (the Compromised
System State in Figure 1) can be reached with the program’s
credentials, privilege sets, and system calls. ROSA outputs a
risk assessment indicating whether the attacker could abuse the
program’s privileges to reach the compromised system state
should the program have a vulnerability.
By determining what damage an attacker can do with each
privilege set
in the program (determined by ROSA), and
by determining for how long each privilege set is available
during execution (determined by ChronoPriv), PrivAnalyzer
can provide a quantitative metric expressing the risk a privi-
leged program poses if it has vulnerabilities. Developers can
use PrivAnalyzer’s results to evaluate the security impact
of changes to a program’s privilege use. For example, if a
developer modiﬁes a program to add a new feature or to ﬁx
a bug, PrivAnalyzer can measure how much the program’s
security posture has changed due to the modiﬁcation.
We now describe the design of the ChronoPriv dynamic
analysis and the ROSA model checker in more detail.
A. ChronoPriv Vulnerability Analyzer
Developers ask two questions when writing programs that
must bypass the access controls: how long does a program use
different combinations of privileges, and what damage can be
done with those privileges should the program have an ex-
ploitable vulnerability? To answer the ﬁrst query, we designed
ChronoPriv. As Figure 1 shows, ChronoPriv instruments a
program to record and report
the number of instructions
executed with each combination of privileges present in the
program’s permitted privilege set and the process’s credentials
when those privileges are available in the permitted privilege
set. On Linux, ChronoPriv records the permitted privilege set,
the real, saved, and effective user IDs and group IDs of the
process, and the number of instructions executed with that
combination of privileges and user and group IDs. When the
program terminates, ChronoPriv outputs its results.
When using PrivAnalyzer, developers run their programs
with various inputs to measure how many instructions are
executed dynamically with each permitted privilege set and
user/group credentials. When the developer ﬁnishes collect-
ing dynamic privilege and user/group credential information,
ChronoPriv feeds its results into the ROSA bounded model
checker. For each combination of privilege set and user/group
ID credentials, ROSA determines whether attacks of interest
to the developer could occur if the program has a vulnera-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:55 UTC from IEEE Xplore.  Restrictions apply. 
bility that the attacker can exploit while those privileges and
user/group ID credentials are in effect.
B. ROSA Bounded Model Checker
ROSA is a Maude program built using the Object Maude
extension [12] that models a Linux system with processes,
users, groups, directories, ﬁles, and sockets. Writing ROSA in
Maude allows ROSA to be easily enhanced to model new
(existing or hypothetical) access controls. ROSA models a
Linux system as a set of objects and messages. Processes, ﬁles,
and sockets are represented as objects while messages sent to
each process object represent system calls that the process
can execute. ROSA then deﬁnes a set of rewrite rules that
speciﬁes how the state of objects in the system changes when
a process object “receives” a message, i.e., when the process
executes a system call. Given a set of objects and messages,
ROSA uses Maude term rewriting [12] to determine if a set
of objects matching a speciﬁed pattern i.e., the description of
a compromised state, can be created by applying rewrite rules
on the initial set of objects and messages which represent the
system’s initial state. In other words, ROSA searches for states
that are reachable from the initial state of the system that match
the description of a compromised system. If ROSA cannot
ﬁnd a reachable state matching the compromised state, ROSA
concludes that the program, when running with the speciﬁed
privileges and user/group IDs, cannot put the system into the
comprised system state if it were exploited by an attacker.
Process objects represent one task in Linux; a Linux task
is either a process or a thread [2]. Each process object has an
effective, real, and saved user ID (UID) and an effective, real,
and saved group ID (GID). Processes also have a state attribute
indicating whether they are running or have been terminated.
Additionally, a process object has two sets of object IDs,
named rdfset and wrfset, respectively, that contain the
IDs of objects (ﬁles and sockets) that the process has opened
for read access and write access, respectively.
File objects use unique integers for their object identiﬁers.
Each ﬁle object also contains attributes for the ﬁle name, the
ﬁle permissions, the ﬁle owner, and the ﬁle group. File names
are for human readability; rewrite rules do not use them.
To simulate system calls that modify directory entries,
ROSA provides a directory object which is nearly identical to
a ﬁle object: it has attributes for its owner, group, permission
bits, and a human-readable name. Additionally, it contains an
inode attribute which indicates the object ID of the ﬁle object
to which the directory entry refers. In this way, ROSA can
model system calls such as unlink() and rename() as
messages that, when consumed by a process, modify directory
entry objects. ROSA also models basic pathname lookup e.g.,
checking for search permission on a ﬁle’s parent directory, but
(without loss of generality) only on a single parent directory.
Sockets are objects that have a unique object identiﬁer and
an integer port attribute. Socket objects represent TCP sockets
that can be bound to TCP ports.
System call messages specify the system call name, the
the
process which is allowed to execute the system call,
arguments to the system call, and the set of privileges that
the system call can use. Certain arguments (such as ﬁle object
identiﬁers) can be wildcard values, allowing ROSA to try
different values for the argument taken from the set of objects
e.g., ﬁles, given in its input. This feature allows ROSA to
model both attacks that modify system call inputs and attacks
that do not. Making privileges an attribute of a system call
(instead of an attribute of the process object) allows ROSA to
model attacks which only use speciﬁc privileges with speciﬁc
system calls as well as attacks that utilize any of a process’s
privileges with any system call.
ROSA also provides user objects and group objects which
contain a user ID or group ID, respectively. These objects
allow a PrivAnalyzer user to denote which users and groups
can be used to replace wildcard values in system calls that
take user ID and group ID arguments e.g., setresuid().
Restricting UID and GID values to only those speciﬁed in
user and group objects allows PrivAnalyzer users to constrain
ROSA’s search space.
To use ROSA, a user provides a set of processes, a set
of user and group objects representing the users and groups
relevant to the attack being analyzed, and a set of objects
upon which the system calls may operate; PrivAnalyzer tailors
the input with the set of system calls and relevant privileges
reported by ChronoPriv. PrivAnalyzer can then query ROSA
to see if a compromised state can be reached from the initial
state of objects and messages.
As an example, suppose that there is a program that can
execute the following system calls in any order provided that
each system call is only executed once:
1) open() for read-only access using no privilege
2) setuid() with CAP_SET_UID privilege
3) chown() with CAP_CHOWN privilege; the user ID value
is unconstrained, but the group ID value must be 41.
4) chmod() with no privilege
The user wants to know if the program can open the
ﬁle /etc/passwd, which has owner 40 and group 41, for
reading. The process currently has effective, real, and saved
user and group IDs that do not match the ﬁle’s owner and
group.
Figure 2 shows the initial state for this query. Note that the
arguments to chmod() turn on all permissions on a ﬁle (an
attacker would want to make a ﬁle as accessible as possible,
and the arguments to chmod() do not affect which privileges
are needed for chmod() to succeed). Note also that various
arguments to system calls e.g., the ﬁle identiﬁer and owner
arguments to chown(), are speciﬁed as −1 which tells ROSA
that they are wildcard arguments.
Next,
the user speciﬁes a pattern representing the state
for which she is looking. This is any state where the ﬁle
object (Object ID 3) is in the read set of the process.
Figure 3 shows that we are looking for a term (denoted by
Z:Configuration) that represents the state for which to
search. As we do not care if the attacker changes the user
and group IDs of the process, they are left as variables (A
596
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:55 UTC from IEEE Xplore.  Restrictions apply. 
(search in UNIX :
(search in UNIX :
open(1,3,r - -,empty)
setuid(1,-1,CapSetuid)
chown(1,-1,-1,41,CapChown)
chmod(1,-1,r w x r w x r wx,empty)
Fig. 2: ROSA Start State Example
through F ) with no constraints. Putting it all together, we get
the Maude search command in Figure 4.
For this example, ROSA ﬁnds the following solution, indi-
cating that the process can put the system into the compro-
mised state:
• The process successfully uses chown() to change the
ﬁle’s owner to match the effective user ID of the process.
• The process then uses chmod() to change the permis-
sion bits of the ﬁle to make it readable by the owner.
• The process opens the ﬁle.
A limitation of ROSA is that the user must specify the
number of times that an attacker can use a given system call.
We ﬁnd this limitation acceptable. Many attacks do not use
a particular system call many times; they merely use a few
system calls with the necessary privileges [17], [18], [15].
VI. IMPLEMENTATION
We implemented ChronoPriv as an LLVM [19] 3.7.1 In-
termediate Representation (IR) pass which adds code to each
basic block to record the number of IR instructions executed
dynamically within the block,
the permitted privilege sets
available when each basic block executes, and the user/group
ID credentials. ChronoPriv omits unreachable instructions
in its instruction counts as executing an unreachable
instruction terminates the program [20].
We implemented ROSA using 1,151 lines of Maude code
with the Full-Maude system [12] on Maude 2.7. ROSA cur-
rently models simple processes and threads, ﬁles, a ﬁle system
with a single level of directories, and TCP sockets. We also
built a simple test suite for ROSA that veriﬁes that a subset of
perms : - - - - - - - - - ,
owner : 40 , group : 41 >
open(1,3,r - -,empty)
setuid(1,-1,CapSetuid)
chown(1,-1,-1,41,CapChown)
chmod(1,-1,r w x r w x r wx,empty)
=>* Z:Configuration
such that (3 in G:Set{Int}) .)
Fig. 4: ROSA Query
the system calls that it supports exhibit the expected behavior
for privileged and unprivileged operation.
ROSA supports system calls for processes (setuid,
seteuid, setresuid, setgid, setegid, setres-
gid, kill), ﬁles and directories (open, chmod, fchmod,
chown, fchown, unlink, rename), and TCP sockets
(socket, bind, connect). ROSA models operations that
modify the effective, real, and saved user ID and group ID
values of a process as these are used by the Linux access
controls [2]. It does not model the ﬁle system ID feature of
Linux [2] as that feature is seldom used and not applicable to
other Unix-like systems. ROSA only supports TCP sockets and
only a subset of socket operations; adding support for other
socket features is straightforward. ROSA also lacks support
for system calls that create new threads and processes and the
exec() family of system calls; the attacks that we model do
not rely on using these system calls.
ROSA does not yet model Linux namespaces or system
calls that modify the ﬁle system namespace e.g., chroot(),
mount(), and clone(). While it supports system calls that
remove links to ﬁles e.g., unlink() and rename(), it does
not support system calls, such as creat() and link(),
that create new ﬁles and new links to existing ﬁles. It also
lacks support for newer system calls such as openat(). Even
so, ROSA can model powerful attacks that steal and corrupt
sensitive data stored in ﬁles, masquerade as critical services,
and disrupt availability of critical system services.
=>* Z:Configuration
such that (3 in G:Set{Int}) .)
Fig. 3: ROSA End State Example
VII. SECURITY EVALUATION
We now use PrivAnalyzer to evaluate the security of Linux
applications that execute as root. We then refactor these appli-
cations to improve their security posture and use PrivAnalyzer
to measure the improvement.
A. Modeled Attacks
As Table I states, we model the following attacks:
597
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:55 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Modeled Attacks
TABLE II: Programs for Experiments
Attack




Description
Read from /dev/mem to steal application data
Write to /dev/mem to corrupt application data