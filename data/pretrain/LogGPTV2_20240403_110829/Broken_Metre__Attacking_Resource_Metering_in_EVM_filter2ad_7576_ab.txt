tion level, allowing clients to process IO-intensive instructions
faster.
SUICIDE Attack. Shortly after the EXTCODESIZE attack,
another DoS attack involving the SUICIDE instruction was
performed [12]. The SUICIDE instruction kills a contract
and sends all its remaining Ether to a given address. If this
particular address does not exist, a new address would be newly
created to receive the funds. Furthermore, at the time of the
attack, calling SUICIDE did not cost any Ether. Given these
Fig. 4: Correlation between gas and clock time with DoS.
two properties, an attacker could create and destroy a contract
in the same transaction, creating a new contract each time at an
extremely low fee. This quickly overused the memory of the
nodes, and particularly affected the Go implementation [30]
which was less memory efﬁcient [15].
A twofold ﬁx was issued for this attack in EIP 150.
First, and most importantly, SUICIDE would be charged the
regular amount of gas for contract creation when it tried to
send Ether to a non-existing address. Subsequently, the price
of the SUICIDE instruction was increased from 0 to 5,000
gas. Again, these measures would make such an attack very
expensive.
III. CASE STUDIES IN METERING
In this section, we instrument
the C++ client of the
Ethereum blockchain, called aleth [22], and report some in-
teresting observations about gas dynamics in practice.
A. Experimental setup
Hardware. We run all of the experiments on a Google Cloud
Platform (GCP) [31] instance with 4 cores (8 threads) Intel
Xeon at 2.20GHz, 8 GB of RAM and an SSD with a 400MB/s
throughput. The machine runs Ubuntu 18.04 with the Linux
kernel version 4.15.0. We selected this hardware because it is
representative to what has been reported as sufﬁcient to run a
full Ethereum node [48], [47], [45].
Software. To measure the speed of different instructions, we
fork the Ethereum C++ client, aleth. Our fork integrates the
changes to the upstream repository until Jun-26 2019. We
choose the C++ client for two reasons: ﬁrst, it is one of the two
clients ofﬁcially maintained by the Ethereum Foundation [1]
with geth [30]; second, it is the only of the two without runtime
or garbage collection, which makes measuring metrics such as
memory usage more reliable.
We add compile options to the original C++ client to allow
enabling particular measurements such as CPU or memory.
(a) Mean time for arithmetic instructions.
Instruction Gas
cost
3
5
5
~51
ADD
MUL
DIV
EXP
Count Mean
time (ns)
82.20
96.96
476.23
287.93
453,069
62,818
107,972
186,004
Throughput
(gas / µs)
36.50
51.57
10.50
177.1
(b) Execution time and gas usage for arithmetic instructions.
Fig. 5: Comparing execution time and gas usage of arithmetic instructions.
Our measurement framework is open-sourced2 and available
under the same license as the rest of aleth.
Measurements. For all our measurements, we only take into
account the execution of the smart contracts and ignore the
time taken in networking or other parts of the software. We
use a nanosecond precision clock to measure time and measure
both the time taken to execute a single smart contract and the
time to execute a single instruction. To measure the memory
usage of a single transaction, we override globally the new and
delete operators and record all allocations and deallocations
performed by the EVM execution within each transaction. We
ensure that this is the only way used by the EVM to perform
memory allocation.
Given the relatively large amount of time it takes to re-
execute the blockchain, we only execute each measurement
once when re-executing. We ensure that we always have
enough data points, where enough in the order of millions
or more, so that some occasional imprecision in the measure-
ments, which are inevitable in such experiments, do not skew
the data.
section,
In this
the measurements are run between
block 5,171,468 (Feb-28-2018) and block 5,587,480 (May-10-
2018), except in III-C where we want to compare after and
before EIP-150.
2https://github.com/danhper/aleth/tree/measure-gas
4
01234Gas used1e6020406080Clock time (s)ADDMULDIVEXPInstruction0100200300400500600700Mean time (ns)Phase
Resource
Pre EIP-150
Post EIP-150
Memory
CPU
Storage
Storage/Memory
Storage/Memory/CPU
Memory
CPU
Storage
Storage/Memory
Storage/Memory/CPU
Pearson
score
0.545
0.528
0.775
0.845
0.759
0.755
0.507
0.907
0.938
0.893
Fig. 6: Correlation scores between gas and system resources.
B. Arithmetic Instructions
In this experiment, we evaluate the correlation between
gas cost and the execution time for simple instructions which
include absolutely no IO access. We use simple arithmetic
instructions for measurements, in particular the ADD, MUL,
DIV and EXP instructions.
In Figure 5a, we show the mean time of execution for
these instructions, including the standard deviation for each
measurement. We contrast these results with the gas cost of
the different instructions in Figure 5b. EXP is the only of these
instructions with a variable cost depending on its arguments —
the value of the exponent. We use the average gas cost in our
measurements to compute the throughput. We see that although
in practice ADD and MUL have similar execution time, the gas
cost of MUL is 65% higher than the gas cost for ADD. On the
other hand, DIV, which costs the same amount of gas as MUL,
is around 5 times slower on average. EXP costs on average
10 times the price of DIV but executes 40% faster. Another
point to note here is that DIV has a standard deviation much
higher than the other three instructions. Although we were
expecting that for such simple instructions the execution time
would reﬂect the gas cost, this does not appear to be the case in
practice. We will show in the coming sections that IO related
operations tend to make things worse in this regard.
C. Gas and System Resources Consumption
In this section, we analyse the gas consumption of
Ethereum smart contracts and try to correlate it with different
system resources, such as memory, CPU and storage. As
described in Section II, EIP-150 inﬂuenced the price of many
storage related operations, which affected the gas cost of
transactions. Therefore, we use a different set of transactions
than for other case studies. We arbitrarily use block 1,400,000
to block
1,500,000 for measurements before EIP-150 and
block 2,500,000 to 2,600,000 for measurements after EIP-
150. We assume that the sample of 100,000 blocks, which
roughly corresponds to two weeks, is large enough to obtain
reliable data.
We use our modiﬁed Ethereum client
to perform the
different measurements. To measure memory, we compute
the difference between the total amount of memory allocated
and the total amount of memory deallocated. For CPU, we
5
use clock time measurements as a proxy for the CPU usage.
Finally, for storage usage, we count the number of EVM
words (256 bits) of storage newly allocated per transactions.
We compute the Pearson correlation coefﬁcient3 [8] be-
tween the different resources and the gas usage. We also
compute multi-variate correlation between gas consumption
and multiple resources. To compute the multi-variate corre-
lation between multiple resources and the gas usage, we ﬁrst
normalise the measurement vector of each targeted resource
to have a mean of 0 and a standard deviation of 1. Then,
we stack the vectors to obtain a matrix of m resources
and n measurements, and transform it in a single vector of
n measurements using a principal component analysis [2].
The vector we obtain represents the aggregated usage of the
different resources and can be correlated with the gas usage.
We present our results in Figure 6. A ﬁrst observation is
that EIP-150 clearly emphasises the domination of storage in
the price of contracts. We can clearly see that storage alone
has an extremely high correlation score, with score of 0.907
after EIP-150. Memory usage is not as correlated as storage,
but when combining both, they have the highest correlation
score of 0.938. Finally, an important point is that CPU time
seems completely uncorrelated with gas usage. Although it
seems natural that CPU time by itself has a low correlation,
as gas cost is dominated by storage cost, adding the CPU time
in the multi-variate correlation reduces the correlation. It is
not enough to make any conclusion yet but gives a hint that
as long as the storage is not explicitly touched, it could be
possible for contracts to be both cheap and long to execute.
D. High-Variance Instructions in the EVM
Here, we look at instructions which have a high variance
in their execution time. We summarise the instructions which
had the highest variance in Figure 7. There are two main
reasons why the execution time may vastly vary for the
execution of the same instruction. First, many instructions take
parameters, depending on which, the time it takes to run the
particular instructions can vary wildly. This is the case for
an instruction such as EXTCODECOPY. The second reason is
much more problematic and comes from the fact that some
instructions may require to perform some IO access, which
can be inﬂuenced by many different factors such as caching,
either at the OS or at the application level. The instruction with
the highest variance was BLOCKHASH. BLOCKHASH allows
to retrieve the hash of a block and allows to look up to 256
block before the current one. When it does so, depending on
the implementation and the state of the cache, the EVM may
need to perform an IO access when executing this instruction,
which can result in vastly different execution times. The cost
of BLOCKHASH being currently ﬁxed and relatively cheap, 20
gas, it results in an instruction which is vastly under-priced.
It is worth noting that in the particular case of BLOCKHASH,
the issue has already been raised more than two years ago in
EIP-210 [16]. It discussed changing the price of BLOCKHASH
to 800 gas but at the time of writing the proposal is still in draft
status and was not included in the Constantinople fork4 [35]
as it was originally planned to be.
3Pearson score of 1 means perfect positive correlation, 0 means no corre-
lation
4Hard fork which took place on Feb 28 2019 on the Ethereum main network
Instruction
BLOCKHASH
BALANCE
SLOAD
EXTCODECOPY
EXTCODESIZE
Mean Standard Measurements
count
240,000
8,625,000
148,687,000
23,000
16,834,000
time (µs) deviation
578
449
402
361
245
768
762
514
403
221
Fig. 7: Instructions with the highest execution time variance.
Fig. 8: Comparing throughput with and without page cache: x axis is the
relative speed improvement and y axis is the number of contracts.
E. Memory Caches and EVM Costs
Given the high variance in execution time for some in-
structions, we evaluate the effects caching may have on EVM
execution speed. In particular, we evaluate both the speedup
provided by the operating system page cache and the speedup
across blocks provided by LevelDB LRU cache [29]. In these
Fig. 9: Measuring block execution speed with and without the effect of cache.
6
experiments, we ﬁx the block number at height 5,587,480.
Page cache. First, we evaluate how the operating system page
cache inﬂuences the execution time by reducing the IO latency.
We perform the experiment as follows:
1)
2)
3)
Generate a contract
Run the code of the contract n times
Run the code of the contract n times but drop the
page cache between each run
We perform this for 100 different contracts and measure
the execution time for the versions with and without cache.
We generate relatively large contracts, which consume on
average 800,000 gas each. Although the method is somewhat
crude, it provides a good approximation of the extent to which
the state of the page cache inﬂuences the execution time of a
contract. In Figure 8, we show a distribution of the contracts
throughput in terms of gas per second, with and without cache.
We see that contracts execute between 24 and 33 times faster
when using the page cache, with more than half of the contracts
executing between 27 and 29 times faster. This vast difference
in the execution speed is due to IO operations, which use
LevelDB [28], a key-value store database, under the hood.
LevelDB keeps only a small part of its data in memory and
therefore needs to perform a disk access when the data was not
found in memory. If the required part of the data was already in
the page cache, no disk access will be required. When keeping
the page cache, all the items seen by the contract recently will
already be available in cache, eliminating the need for any disk
access. On the other hand, if the caches are dropped, many IO
related operations will result in a disk access, which explains
the speedup. We notice that in the contracts with the highest
speedup, BLOCKHASH, BALANCE and SLOAD are in the most
frequent instructions. It is worth noting that if the generated
contracts are small enough, most of the data will be in memory
and dropping the page cache will have much less effect on
the runtime. Indeed, when running the same experiment with
contracts consuming on average 100,000 gas, only a 2 times
average speedup has been observed.
Caching across blocks. In the next experiment, instead of
measuring the cache impact by running a single contract mul-
tiple times, we evaluate how the cache impacts the execution
time across blocks. In particular, we measure how many blocks
need to be executed before the data cached during the previous
execution of a contract gets evicted from the different caches.
To do so, we perform the following experiment.
1)
2)
3)
Generate n blocks, with different contracts in each
Execute sequentially all the blocks and measure the
execution time
Repeat the previous step m times in the same process,
and record how the execution speed evolves
We set m to 10 and we try different values for n to see how
many blocks are needed for the cache not to provide anymore
speedup. We use the ﬁrst execution to warm-up the node and
use the 9 other executions for our measurements. We ﬁnd that
in our setup, assuming the blocks are full (i.e. close to the gas
limit in term of gas), 16 blocks are enough for the cache not
to provide anymore speedup. We plot the results for n = 14,
n = 15 and n = 16 in Figure 9. When n = 14, we see that
2426283032Speedup with cache (times)051015202530Number of contracts123456789Execution number20406080Total execution time (s)# of blocks141516the second execution is much faster than the ﬁrst one, and
that after the third execution, the execution time stabilises at
around 6s to execute the 14 blocks. For n = 15, the execution
time takes longer to decrease, but eventually also stabilises
around the same value. It is slightly higher than when n = 14
because it has one more block to execute. However, once we
reach n = 16, we see that the execution time hardly decreases
and stays stable at around 85s. We conclude that at this point,
almost nothing that was cached during the previous execution
of the block is still cached when re-executing the block.
This means that if a deployed contract function were re-
executed more than 16 blocks after its initial execution, it