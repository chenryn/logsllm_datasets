title:A smart pre-classifier to reduce power consumption of TCAMs for multi-dimensional
packet classification
author:Yadi Ma and
Suman Banerjee
A Smart Pre-Classiﬁer to Reduce Power Consumption of
TCAMs for Multi-dimensional Packet Classiﬁcation
Yadi Ma
University of Wisconsin
Madison, WI, USA
PI:EMAIL
Suman Banerjee
University of Wisconsin
Madison, WI, USA
PI:EMAIL
ABSTRACT
Ternary Content-Addressable Memories (TCAMs) has become the
industrial standard for high-throughput packet classiﬁcation. How-
ever, one major drawback of TCAMs is their high power consump-
tion, which is becoming critical with the boom of data centers, the
growing classiﬁers and the deployment of IPv6. In this paper, we
propose a practical and efﬁcient solution which introduces a smart
pre-classiﬁer to reduce power consumption of TCAMs for multi-
dimensional packet classiﬁcation. We reduce the dimension of the
problem through the pre-classiﬁer which pre-classiﬁes a packet on
two header ﬁelds, source and destination IP addresses. We then re-
turn to the high dimension problem where only a small portion of a
TCAM is activated and searched for a given packet. The smart pre-
classiﬁer is built in a way such that a given packet matches at most
one entry in the pre-classiﬁer, which make commodity TCAMs
sufﬁcient to implement the pre-classiﬁer. Furthermore, each rule
is stored only once in one of the TCAM blocks, which avoids
rule replication. The presented solution uses commodity TCAMs,
and the proposed algorithms are easy to implement. Our scheme
achieves a median power reduction of 91% and an average power
reduction of 88% on real and synthetic classiﬁers respectively.
Categories and Subject Descriptors
C.2.6 [Computer-Communication Networks]: Internetworking—
Routers
Keywords
Packet classiﬁcation, SmartPC, power consumption
1.
INTRODUCTION
Given a set of strictly ordered rules in a classiﬁer, the packet
classiﬁcation problem is to ﬁnd out the ﬁrst (highest priority) rule
that matches each incoming packet at a router.
Many common packet classiﬁcation techniques deﬁne rules on
multiple header ﬁelds, e.g., a 5-tuple on source and destination
IP addresses, source and destination port numbers and protocol.
Packet classiﬁcation plays a signiﬁcant role in many networking
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’12, August 13–17, 2012, Helsinki, Finland.
Copyright 2012 ACM 978-1-4503-1419-0/12/08 ...$15.00.
services and functions that require network trafﬁc (i.e. packets) to
be distinguished and isolated into different ﬂows for suitable pro-
cessing. Examples of such services include: QoS, security, packet
ﬁltering (e.g., deny all packets from a known source), policy rout-
ing (e.g., route all VoIP trafﬁc over a separate network), trafﬁc shap-
ing (e.g., ensure that no one source overloads the network), and so
on.
There are two major trends of previous work on packet clas-
siﬁcation: RAM-based algorithmic solutions and hardware-based
TCAM solutions. The most prevailing RAM-based solutions in-
clude decision-tree based schemes such as HiCuts [8], HyperCuts [19],
EfﬁCuts [23], et al. Algorithmic methods do not scale effectively
to high performance systems that must process tens of millions of
packets per second.
TCAMs allow simultaneous match of an incoming packet against
all the stored rules of a classiﬁer within a single memory access
and a ﬁxed number of clock cycles. TCAM has become the de
facto industrial standard for packet classiﬁcation in high perfor-
mance routers. However, one major disadvantage of using TCAMs
is the high power consumption. The main component of power
consumptions of TCAMs is proportional to the number of searched
entries [26]. A typical 18Mbit TCAM device can consume up to
15 Watts of power when all the entries are searched. This can be
a signiﬁcant power overhead for the router, switch, or other net-
working hardware that embeds them. Furthermore, as enterprises
and operators continue to seek larger and bigger classiﬁers, the en-
ergy footprint of these devices would continue to grow even fur-
ther. In this paper, we present a new solution for reducing the en-
ergy footprint of TCAMs when applied to the problem of multi-
dimensional packet classiﬁcation by carrying out the classiﬁcation
in two pipelined stages.
1.1 Our pre-classiﬁer approach
TCAM vendors have been providing mechanisms to address and
activate smaller portions of the TCAMs, called blocks. A TCAM
block is a contiguous, ﬁxed-sized chunk of TCAM entries, much
smaller than the size of the entire TCAM, as shown in Figure 1. If
the width of a TCAM block is 80 bits and there are 2K entries in
each block, the size of a block is 160K bits. Further suppose the 104
bit header ﬁelds of an IPv4 packet (32 bit source or destination IP
address, 16 bit source or destination port, plus 8 bit protocol) would
occupy two entries in a block. Therefore, each block can hold up to
1K rules. A large classiﬁer of size 50K requires 50 such blocks to
store the rules. To reduce power consumption of TCAMs, we take
advantage of this mechanism to select and activate a small number
of blocks, instead of all the 50 blocks, for each packet classiﬁcation.
Activating a small number of blocks is only feasible if we can
somehow ensure that the incoming packet will be correctly matched
by searching the entries stored in these active blocks. We achieve
we construct the pre-classiﬁer by creating rules in two dimensions
only: the source and destination IP address ranges. This choice pro-
vides an adequate reduction in storage requirements, yet provides
adequate ability to classify packets. In fact, the results of the pre-
classiﬁer ensure that the packet can then be correctly classiﬁed by
comparing against only a few other TCAM blocks (which contain
suitably shufﬂed rules). We present a detailed analysis to explain
the efﬁcacy of this choice of two dimensions in Section 3.
Finally, this design and use of the pre-classiﬁer is made possible
by new features of TCAMs, which support turning on and off a
speciﬁc subset of blocks. The time and overheads of turning on and
off such blocks is negligible. Furthermore, such hardware supports
multiple searches in parallel, e.g., Cisco’s TCAM4 which allows
four parallel searches [3].
The notion of using multiple stages to implement packet clas-
siﬁcation techniques is not entirely new. Two of the most related
examples of this approach for TCAMs are CoolCAMs [26], and
packet classiﬁcation using extended TCAMs [20]. Our work dif-
fers from such prior approaches in the speciﬁc algorithmic tech-
niques in creating pre-classiﬁers, and our approach is very deploy-
able with current TCAMs for the problem of packet classiﬁcation.
For instance, CoolCAMs[26] was designed for the problem of IP
lookups, in which classiﬁcation is performed in a single dimen-
sion — destination IP address. Their proposed hash-based and trie-
based approaches for solving this one dimensional problem do not
extend to the multi-dimensional packet classiﬁcation problem that
we are addressing, and required new algorithmic considerations.
Similarly, extended TCAMs assumes a new type of ternary match
hardware that are not available in current commodity TCAMs. The
speciﬁcs of our multi-dimensional packet classiﬁcation problem
and the speciﬁc restrictions of commodity TCAMs make our so-
lution uniquely applicable to this important problem domain.
1.2 Summary of our contributions
In this paper, we propose a Smart Pre-Classiﬁer to reduce power
consumption of TCAMs for packet classiﬁcation (SmartPC). With
SmartPC, the actual packet classiﬁcation occurs in two stages: ﬁrst
a given packet is classiﬁed by a pre-classiﬁer which provides in-
formation on which TCAM block needs to be activated in the next
stage; in the second stage, the block from ﬁrst stage plus a few
general blocks are activated and searched in parallel for a match
for the packet. SmartPC can typically bring down the TCAM’s
power consumption from 15 Watts to less than 3 Watts. The two-
dimensional pre-classiﬁer contains non-overlapping entries, which
are formed by combining and expanding rules in the original clas-
siﬁer. The rules in the original classiﬁer are thus reorganized into
TCAM blocks so that the rules covered by an entry in the pre-
classiﬁer are stored in the same TCAM block. Those rules that do
not ﬁt in a block are marked as general rules and stored in general
blocks.
We present a detailed design of SmartPC and evaluate it on a
large amount of real classiﬁers from ISPs and synthetic classiﬁers
generated by ClassBench [21]. The experimental results suggest
huge power reductions on both real and synthetic classiﬁers. With
block size 128, SmartPC achieves a median of 91% and an aver-
age of 88% power reductions on these classiﬁers with the highest
reduction reaching 98%.
2. BACKGROUND
2.1 Problem statement of packet classiﬁcation
Packet classiﬁcation is performed using a packet classiﬁer, also
called a policy database, ﬂow classiﬁer, or simply a classiﬁer. A
(a) TCAM is composed of a number of blocks.
For each incoming packet, all the blocks that
are used for packet classiﬁcation are activated.
(b) A TCAM block is used for pre-classiﬁer. For
each incoming packet, the pre-classiﬁer is con-
sulted ﬁrst. Based on its result, only 3 blocks are
activated.
Figure 1: An overview of TCAM power saving.
this goal by using a pre-classiﬁer. In particular, we construct a spe-
ciﬁc pre-classiﬁer and shufﬂe the rules in the original classiﬁer into
different blocks so that only the pre-classiﬁer and a small number
of TCAM blocks need to be activated to classify a packet. The nov-
elty of our approach lies in ﬁnding a good way to form pre-classiﬁer
entries so as to minimize the number of blocks activated for each
packet classiﬁcation.
In Figure 1(a), we show an example TCAM composed of 25
blocks. In this example, 21 blocks are used to store the rules in a
classiﬁer while 4 remain unused (could be used for other purposes,
e.g., IP lookups for packet forwarding). All the 21 blocks that are
used to store the original classiﬁer need to be activated for every
packet classiﬁcation. In our modiﬁed system, shown in Figure 1(b),
one block is used to store pre-classiﬁer entries 1. The pre-classiﬁer,
in this example, requires only three other blocks be activated for
correctly matching the incoming packet. This achieves a power
reduction of (21 − 4)/21 ∗ 100% = 81%. For a 18Mbit TCAM,
this approach could bring down its power consumption from 15
Watts to less than 3 Watts.
Our proposed pre-classiﬁer is motivated by previous work [8, 7,
19, 9] which suggest that although large classiﬁers could contain
hundreds of thousands of rules, for any individual packet there are
usually a small number of “intercepting” rules — rules that match
the given packet. (Note that different packets can have completely
different intercepting rules and hence it is possible a large frac-
tion of the rules are actually compared to classify a large number
of packets.) The power consumption could be reduced if we can
somehow shufﬂe the rules in a classiﬁer into TCAM blocks, such
that for each incoming packet, only a subset of blocks that contain
all the rules intercepting with the packet are searched.
In this paper we create this pre-classiﬁer by reducing the dimen-
sionality of the problem. Instead of the typical 5-dimensional rules,
1This ﬁgure shows one way of implementing a pre-classiﬁer. In
practice, a pre-classiﬁer could also be implemented in software, as
discussed later in Section 4.
Table 1: A simple example with 8 rules on 5 ﬁelds
Rule
R0
R1
R2
R3
R4
R5
R6
R7
F5
F3 F4
UDP
*
10
TCP
10
01
11
*
TCP
01 UDP
*
10
*
UDP
01 UDP
*
UDP
*
*
*
*
TCP
Action
action0
action1
action0
action2
action1
action1
action3
action4
F2
111*
10*
01*
1*
0*
0*
*
*
F1
000*
000*
000*
000*
0*
0*
*
*
classiﬁer is a collection of rules or policies. Given a set of strictly
ordered rules in a classiﬁer, the packet classiﬁcation problem is
to ﬁnd out the ﬁrst rule that matches each incoming packet at a
router. Each rule is associated with an action. After classiﬁcation,
the corresponding action will be performed on each packet.
Suppose a classiﬁer at a router contains a set of N rules, and
each rule contains K ﬁelds. We consider the case where K = 5.
The ﬁve ﬁelds are source IP address, destination IP address, source
port, destination port and protocol type, respectively (shown as F1
through F5 in Table 1). There are three types of matches that a ﬁeld
can have: preﬁx match (source or destination IP address), exact
match (protocol type), or range match (source or destination port).
Table 1 shows a simple example with eight rules on ﬁve ﬁelds. In
a preﬁx match, the rule ﬁeld should be a preﬁx of the header ﬁeld.
Suppose header ﬁeld 2 of a packet is 1010. In Table 1, it matches
the second ﬁeld, F2, of rule R1. In exact match, the header ﬁeld of
a packet should match the rule ﬁeld exactly. For example, protocol
type could be TCP or UDP. In a range match, the header value
should lie in the range speciﬁed by the rule. If each of the header
ﬁelds of a packet P matches each of the corresponding ﬁelds in a
rule R, the packet P is said to match rule R. If P matches multiple
rules, the ﬁrst rule (with the minimum index) is returned.
2.2 Geometric view of packet classiﬁcation
We can view a 32-bit preﬁx like 001* as a range of addresses
from 0010 · · · 00 to 0011 · · · 11 on the number line from 0 to 232. If
preﬁxes can be viewed as line segments geometrically, two-dimensional
rules correspond to rectangles, three-dimensional rules to cubes,
and so on. A given packet header is a point. The problem of
packet classiﬁcation reduces to ﬁnding the highest-priority multi-
dimensional region that contains a given point. This is a classic
problem in computational geometry, named point location prob-
lem. The point location problem is deﬁned as follows: given a par-
tition of K-dimensional space into N disjoint regions, determine
the region where a query point lies. Numerous results have been
reported in the literature [10, 6], most of which deal with the case
of non-overlapping regions or speciﬁc arrangement of hyperplanes
or hypersurfaces of bounded degree.
2.3 Basics of TCAMs
Ternary Content Addressable Memories (TCAMs) are fully as-
sociative memories that allow three matching states, "0", "1" or
"X"(wildcard). A "X" state matches both 0s and 1s in the corre-
sponding input bit. This feature makes TCAMs particularly attrac-
tive for packet classiﬁcation and route lookup applications which
require longest preﬁx matches.
The rules are stored in the TCAM array in the order of decreas-
ing priority. Given a packet header to classify, the TCAM performs
a comparison against all of its entries in parallel, and a priority en-
coder selects the ﬁrst matching rule. TCAMs allow simultaneous
match of a packet against a large number of rules within a single
memory access, while conventional trie-based designs may require
multiple memory accesses for a single packet. Therefore, TCAMs
are very popular for designing high-throughput packet classiﬁca-
tion solutions. However, TCAMs do suffer from some deﬁciencies
such as high power consumption and so on.
3. PROPERTIES OF REAL CLASSIFIERS
A number of previous work have mentioned important proper-
ties of real classiﬁer [8, 7, 19, 9]. However, these studies are based
on a very small number of classiﬁers (e.g., in [9], the authors ana-
lyzed four ACLs), which may not represent the wide range of real
classiﬁers.
We performed an analysis of more than 200 real classiﬁers rang-
ing in size from 3 to 15,181. These classiﬁers were provided to
us by a large networking vendor and these are sample classiﬁers
they use for testing their own classiﬁcation systems. However, the
speciﬁcs of the classiﬁer are under an NDA and unfortunately can-
not be released.
Rule overlapping.
A classiﬁer could contain a large amount of rules, but the num-
ber of rules intercepting with a given packet is usually signiﬁcantly
smaller than the theoretical upper bound [8, 7, 19, 9]. Even though
only a small number of rules are intercepting with a packet, all the
multi-dimensional rules stored in a TCAM need to be searched,
which leads to high power consumption. It is reasonable to reduce
the dimension for the purpose of power efﬁciency. Since source and
destination addresses are more speciﬁc than the other three header
ﬁelds, we consider these two dimensions as candidates. Therefore
we are more interested in what is the maximum number of source
and destination IP preﬁx pairs that need to be searched for any in-
coming packet.
This question is equivalent to the following geometry problem:
given a set of axis-aligned rectangles, where each rectangle repre-
sents a two-dimensional rule with a range of values in each dimen-
sion, what is the maximum number of rectangles that overlap at
any point? We employ a line sweep algorithm [22] in which a ver-
tical sweep line moves from left to right. When it crosses the left
edge of a rectangle, the rectangle is added to an active set. When it
crosses the right edge, the rectangle is removed from the active set.
In the inner loop, a horizontal sweep line moves top-down. When it
crosses the upper or lower horizontal edge of a rectangle in the ac-
tive set, we increment or decrement a counter that says how many
rectangles overlap at the current point. The maximum value of the
counter is the number we are looking for.
We run this line sweep algorithm on the classiﬁers and the re-
sults are shown in Figure 2(a), where x-axis represents classiﬁer
size, and y-axis shows the maximum number of overlapping rules
in the two-dimensional space (i.e., source and destination IP ad-
dresses). Similarly, we plot the number of rules that contain wild-
cards in the two dimensions as shown in Figure 2(b). The wildcard
rules match any packet and intercept with any other rules in the
two-dimensional space, therefore, they form a subset of the set of
maximum overlapping rules.
From the plots, we observed that:
• In the two-dimensional space, the maximum number of over-
lapping rules and the number of wildcard rules of a classiﬁer
is an order of magnitude smaller than the classiﬁer size.
Based on these properties, in Section 4, we build a two-dimensional
pre-classiﬁer and design an efﬁcient classiﬁcation algorithm to re-
duce the power consumption of TCAMs.
 1000
 100
 10
s
p
a
l
r
e
v
o
m
u
m
i
x
a
M
 1
 1