union（）。然后再把地图中间的‘O'都进行union（），最后把和特殊点不是同一个集合的点都标
记成X。第二种解法是DFS或者BFS，可以先将边缘上的‘O'先标记成另外一个字符，然后在递
归遍历过程中，把剩下的O'都标记成X。
代码
package leetcode
import（
"github.com/halfrost/LeetCode-Go/template"
//解法一并查集
func solve(board [][]byte){
if 1en(board) == 0{
return
m, n := len(board[o]), len(board)
uf := template.UnionFind{}
uf.Init（n*m+1）//特意多一个特殊点用来标记
for i := 0; i  len(board)-1 11 j  len(board[i])-1 {
---
## Page 267
return
F
if board[i][j] =='o′{
board[i] [j] =**1
for k := 0;k < 4;k++{
dfs130(i+dir[k][0], j+dir[k][1] , board)
131.PalindromePartitioning
题目
'awopuled e sl uoed au jo Sunsqns fuana jeu yons s uogjed s guns e uanis
Return all possible palindrome partitioning of s.
Example:
Input: "aab"
Output:
["aa","b"] ,
["a","a","b"]
题目大意
给定一个字符串s，将s分割成一些子串，使每个子串都是回文串。返回s所有可能的分割方案。
解题思路
·要求输出一个字符串可以被拆成回文串的所有解，DFS递归求解即可。
代码
package leetcode
//解法一
func partitionl3l(s string) [][]string {
if s == " {
return [][]string{}
res, pal := [][]string{}, []string{}
findpalindrome(s,0,"", true, pal,&res)
---
## Page 268
return res
func findpalindrome(str string, index int, s string, isPal bool, pal []string,
res *[][]string) {
if index == len(str) {
if isPal{
tmp := make([]string, 1en(pal))
copy(tmp, pal)
*res = append(*res，t
tmp)
return
if index == 0{
S = string(str[index])
pal = append(pal, s)
findpalindrome(str, index+l, s, isPal && isPalindrome13l(s), pal, res)
}else {
temp := pa1[1en(pal)-1]
5 = pal[1en(pal)-1] + string(str[index])
pal[1en(pal)-1] = 5
findpalindrome(str, index+l, 5, isPalindromel31(s), pal, res)
pal[1en(pal)-1] = temp
if isPalindrome131(temp) {
pal = append(pal, string(str[index]))
findpalindrome(str, index+1, temp, isPal && isPalindrome131(temp), pal,
res)
pal = pal[:1en(pal)-1]
return
}
func isPalindromel31(s string) bool {
slen := len(s)
for i, j := 0, slen-l; i < j; i, j = i+l, j-1 {
if s[i] != s[j] {
return false
return true
//解法二
func partition131_1(s string) [][]string {
result := [][]string{}
size := len(s)
if size == 0 {
---
## Page 269
return result
current := make([]string, 0, size)
dfs13l(s, 0, current, &result)
return result
func dfs13l(s string, idx int, cur []string, result *[][]string) {
start, end := idx,len(s)
if start == end {
temp := make([]string,len(cur))
copy(temp，cur)
*result = append(*result, temp)
return
for i := start; i < end; i++ {
if ispal(s， start, i) {
dfs131(s, i+l, append(cur, s[start:i+l]), result)
func ispal(str string, s, e int) bool{
for s< e{
if str[s] != str[e]{
return false
++S
e= =
return true
136.SingleNumber
题目
Given a non-empty array of integers, every element appears twice except for one. Find that
single one.
Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using
extra memory?
Example 1:
---
## Page 270
Input: [2,2,1]
output: 1
Example 2:
Input: [4,1,2,1,2]
Output: 4
题目大意
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了
一次的元素。要求算法时间复杂度是线性的，并且不使用额外的辅助空间。
解题思路
·题目要求不能使用辅助空间，并且时间复杂度只能是线性的。
·题目为什么要强调有一个数字出现一次，其他的出现两次？我们想到了异或运算的性质：任何一个
数字异或它自己都等于0。也就是说，如果我们从头到尾依次异或数组中的每一个数字，那么最终
的结果刚好是那个只出现依次的数字，因为那些出现两次的数字全部在异或中抵消掉了。于是最终
做法是从头到尾依次异或数组中的每一个数字，那么最终得到的结果就是两个只出现一次的数字的
异或结果。因为其他数字都出现了两次，在异或中全部抵消掉了。利用的性质是xx=0。
代码
package leetcode
func singleNumber(nums []int) int {
result := 0
for i := 0; i < len(nums);i++ {
result ∧= nums [1i]
return result
137.SingleNumberl1
题目
Given a non-empty array of integers, every element appears three times except for one, which
appears exactly once. Find that single one.
Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using
extra memory?
---
## Page 271
Example 1:
Input: [2,2,3,2]
Output: 3
Example 2:
Input: [0,1,0,1,0,1,99]
66:nd4no
题目大意
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现
了一次的元素。要求算法时间复杂度是线性的，并且不使用额外的辅助空间。
解题思路
·这一题是第136题的加强版。这类题也可以扩展，在数组中每个元素都出现5次，找出只出现1
次的数。
·本题中要求找出只出现1次的数，出现3次的数都要被消除。第136题是消除出现2次的数。这
一题也会相当相同的解法，出现3次的数也要被消除。定义状态，00、10、01，这3个状态。当
一个数出现3次，那么它每个位置上的1出现的次数肯定是3的倍数，所以当1出现3次以后，
就归零清除。如何能做到这点呢？仿造三进制（00，10，01）就可以做到。
·变量ones中记录遍历中每个位上出现1的个数。将它与A们进行异或，目的是
o每位上两者都是1的，表示历史统计结果ones出现1次、A[ij中文出现1次，则是出现2次，
需要进位到twos变量中。
o每位上两者分别为0、1的，加入到ones统计结果中。
o最后还要&^twos，是为了能做到三进制，出现3次就清零。例如ones=x，那么twos=
0，当 twos = x，那么 ones = 0;
·变量tWos中记录遍历中每个位上出现1，2次的个数。与A[i]进行异或的目的和上述描述相同，
不再资述。
在golang中，&^表示ANDNOT的意思。这里的^作为一元操作符，表示按位取反（^0001
0100=11101011)，X&^Y的意思是将×中与Y相异的位保留，相同的位清零。
在golang中没有Java中的-位操作运算符，Java中的-运算符代表按位取反。这个操作就想当
于golang中的^运算符当做一元运算符使用的效果。
这一题还可以继续扩展，在数组中每个元素都出现5次，找出只出现1次的数。那该怎么做呢？思路还
是一样的，模拟一个五进制，5次就会消除。代码如下：
//解法一
func singleNumberIII(nums []int) int {
na, nb, nc := 0, 0, 0
for i := 0; i < len(nums); i++ {
---
## Page 272
nb = nb ∧ (nums[i] & na)
na = (na ∧ nums[1]) & ∧nc
nC = nc ^ (nums[i] & ∧na & ∧nb)
return na & ∧nb & ∧nc
//解法二
func singleNumberIIII(nums []int) int {
twos, threes, ones := Oxffffffff, oxffffffff, 0
for i := 0; i < 1en(nums); i++ {
threes = threes ∧ (nums[i] & twos)
twos = (twos ∧ nums[i]) & ∧ones
ones = ones ∧ (nums[i] & ∧twos & ∧threes)
return ones
代码
package leetcode
func singleNumberII(nums []int) int {
ones, twos := 0,0
for i := 0; i < len(nums);i++ {
ones =(ones ∧ nums[i]) & ∧twos
twos = (twos ∧ nums[i]) & ∧ones
return ones
}
//以下是拓展题
//在数组中每个元素都出现5次，找出只出现1次的数。
//解法-
func singleNumberIIIII(nums []int) int {
na， nb, nc :=0，0，0
for i:= 0;i <1en(nums);i++{
nb = nb ∧ (nums[i] & na)
na = (na ∧ nums[i]) & ∧nc
nc = nc ∧(nums[i] & ∧na & ∧nb)
return na & ∧nb & ∧nc
//解法二
func singleNumberIIIIIl(nums []int) int {
---
## Page 273
twos, threes, ones := Oxffffffff, 0xffffffff, 0
for i := 0; i < len(nums);i++ {
threes = threes ∧ (nums[i] & twos)
twos =(twos ∧ nums[i]) & ∧ones
ones = ones ∧ (nums[i] & ∧twos & ∧threes)
return ones
141.LinkedListCycle
题目
Given a linked list, determine if it has a cycle in it.
Follow up:
Can you solve it without using extra space?
题目大意
判断链表是否有环，不能使用额外的空间。
解题思路
给2个指针，一个指针是另外一个指针的下一个指针。快指针一次走2格，慢指针一次走1格。如果存
在环，那么前一个指针一定会经过若干圈之后追上慢的指针。
代码
package leetcode
☆
* Definition for singly-linked list.
struct ListNode {
int val;
ListNode *next;
ListNode（int x) :val(x)，next(NULL) {}
*/
func hasCycle(head *ListNode) boo1 {
fast := head
slow := head
for slow != nil && fast != nil && fast.Next != nil {
fast = fast.Next.Next
---
## Page 274
slow = slow.Next
if fast == slow {
return true
return false
##[142. Linked List Cycle I1](https://leetcode.com/problems/linked-list
cycle-ii/)
#题目
Given a linked list, return the node where the cycle begins. If there is no
cycle, return nul1.
To represent a cycle in the given linked list, we use an integer pos which
represents the position (o-indexed) in the 1inked list where tail connects to.
If pos is -l, then there is no cycle in the linked list.
**Note**: Do not modify the linked list.
Example 1**:
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
★*Example 2**:
Input: head = [1,2], pos = 0
Output: tail connects to nodle index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.
*Example 3**:
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
---
## Page 275
###题目大意
判断链表是否有环，不能使用额外的空间。如果有环，输出环的起点指针，如果没有环，则输出空。
###解题思路
这道题是第141题的加强版。在判断是否有环的基础上，还需要输出环的第一个点。
分析一下判断环的原理。fast指针一次都2步，slow指针一次走1步。令链表head到环的一个点
需要x1步，从环的第一个点到相遇点需要x2步，从环中相遇点回到环的第一个点需要x3步。那么环
的总长度是x2+x3步。
fast和s1ow会相遇，说明他们走的时间是相同的，可以知道他们走的路程有以下的关系：
fast 的 t = (x1 + x2 + x3 + x2) / 2
slow 的 t = (x1 + x2) / 1
x1 + x2 + x3 + x2 = 2 * (x1 + x2)
所以 x1 = x3
所以2个指针相遇以后，如果slow继续往前走，fast指针回到起点head，两者都每次走一步，那么必
定会在环的起点相遇，相遇以后输出这个点即是结果。
代码
package leetcode
/*
* Definition for singly-linked list.
* type ListNode struct {
Valint
Next *ListNode
*/
func detectCycle(head *ListNode) *ListNode {
if head == nil 11 head.Next == nil {
return ni1
isCyc1e, s1ow := hasCycle142(head)
if !isCycle {
return ni1
fast := head
---
## Page 276
for fast != slow {
fast = fast.Next
slow = slow.Next
return fast
func hasCycle142(head *ListNode) (boo1,*ListNode) {
fast := head
slow := head
for slow != nil && fast != nil && fast.Next != nil {
fast = fast.Next.Next
slow = slow.Next
if fast == slow {
return true，slow
return false, ni1
143.ReorderList