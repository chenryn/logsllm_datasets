**Confidential to SEWORKS**

**Copyright © 2013 SEWORKS Inc. All rights reserved.**

# Android Hooking Attack

## SEWORKS Co., Ltd.
- **Company Overview**: SEWORKS is a security company founded by a hacker, specializing in mobile security, particularly for Android and Windows applications. The company focuses on research in areas such as obfuscation.

## Key Personnel
- **Minpyo Hong (Nickname: Secret)**
  - **Position**: CEO (Chief Executive Officer)
  - **Role**: Founder and Administrator of the WOWHACKER team
- **Dongcheol Hong (Nickname: hinehong)**
  - **Position**: CTO (Chief Technology Officer)
  - **Role**: Administrator of the WOWHACKER team

# Types of Hooking
## Kernel Hooking
- **Description**: Kernel hooking involves using a Loadable Kernel Module (LKM).
- **Samsung's Kernel Source Location**: `opensource.samsung.com`
- **Build Instructions**:
  1. Visit [codesourcery.com](http://www.codesourcery.com/) and download/install Sourcery G++ Lite 2009q3-68 toolchain for ARM EABI.
  22. Extract the kernel source and navigate to the top directory.
  3. Execute `make aries_kor_defconfig`.
  4. Build the kernel with `make` or `make -j` where `j` is the number of parallel jobs.
  5. If successful, the built kernel files will be in the top directory.

### LKM Module Compilation
- **Steps**:
  - Place the source file and Makefile in the same directory.
  - Use `make` to compile.
  - Example for Galaxy S:
    ```makefile
    obj-m += test.o
    all:
            make -C /home/hinehong/sxxxxx/Kernel M=$(PWD) \
            CFLAGS_MODULE=-fno-pic ARCH=arm \
            CROSS_COMPILE=/home/hinehong/CodeSourcery/Sourcery_G++_Lite/bin/arm-none-eabi- modules
    ```
- **Module Management**:
  - Install: `insmod <module_name>`
  - View list: `lsmod <module_name>`
  - Remove: `rmmod <module_name>`

### init_module
- **Dynamic Memory Allocation**: In the kernel, dynamic memory allocation is done using `kmalloc`.

### Sys_call_table
- **System Call Functions**: Defined in `sys_call_table`.
- **Address Retrieval**:
  - Use `vector_swi` handler.
  - Located in `arch/arm/kernel/entry-common.S`.
  - Inside `vector_swi`, the address of `sys_call_table` can be obtained.
  - Once the address is known, the table can be directly modified to hook existing system call functions.

### Potential Actions
- **Example**: Hooking "https" writes to intercept general web packets.

## System Library Hooking
- **Description**: Can hook Android system libraries, particularly targeting `/system/lib/libXt9core.so`.

### Differences in Architecture
- **ARM vs. Intel**:
  - ARM does not have a breakpoint opcode like `0xcc` (int 3) in Intel.
  - Use `SIGTRAP` code instead.

### Breakpoint Setup
- **First Breakpoint**:
  - Before the `processkey` function call.
  - Obtain the `g_WordSymbInfo` address.
  - Set the second breakpoint.
- **Second Breakpoint**:
  - When `processkey` is called, set a breakpoint at the next 4-byte memory.
  - Retrieve `g_WordSymbInfo` data.
  - Reset the first breakpoint.

### Memory Setting
- **Device-Specific Values**:
  - Before `processkey` function call.
  - Find the address of `ProcessKey` and the next 4-byte instruction.

### Process Attach
- **PID Retrieval**:
  - Get the PID value for the process to attach.
  - Example: `android.inputmethod` for Galaxy series devices.

### Function Address
- **Real Function Address**:
  - `processkey` function address + library base address (from `/proc/PID/maps`).

### Hooking Start
- **Save Breakpoints**:
  - Save two breakpoint opcodes to continue hooking and get key values before and after `processkey` function calls.

### Hooking
- **Event Waiting**:
  - Wait for an event.
- **Breakpoint Check**:
  - Verify the breakpoint address and Program Counter (PC).

### Key Status Check
- **Galaxy Devices**:
  - Key status value is at `r0 + 0x14`.
  - Qwerty codes: `0x10709`, `0x10912`.

### Key Value
- **Galaxy S**:
  - Key value is recorded in `g_WordSymbInfo` at `r0 + 0x30`.
  - `0x30`: `g_WordSymbInfo` offset.
- **Galaxy S2~3**:
  - `g_WordSymbInfo` address is in the `r1` register.
  - 4-byte data: `g_WordSymbInfo + 0x4`.

**Confidential to SEWORKS**

**Copyright © 2013 SEWORKS Inc. All rights reserved.**