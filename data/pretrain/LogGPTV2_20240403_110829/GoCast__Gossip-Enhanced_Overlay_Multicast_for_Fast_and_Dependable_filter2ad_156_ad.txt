d
e
d
o
N
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
3
0 second
5 seconds
500 seconds
4
8
9 10 11 12 13
7
5
6
Node degree
(a) Node degree.
)
s
d
n
o
c
e
s
(
y
c
n
e
t
a
l
k
n
i
l
.
g
v
A
 0.09
 0.08
 0.07
 0.06
 0.05
 0.04
 0.03
 0.02
 0.01
 0
overlay links
tree links
 0
 50
 100
 150
 200
Time (seconds)
(b) Link latency.
Figure 5. Adaptation of the overlay and the tree (1,024 nodes).
1.00
0.95
0.90
0.85
0.80
1
t
n
e
n
o
p
m
o
c
t
s
e
g
r
a
l
e
h
t
f
o
o
i
t
a
R
4 rand links
1 rand links
0 rand links
5
0
.
0
0
1
.
0
5
1
.
0
0
2
.
0
5
2
.
0
0
3
.
0
5
3
.
0
0
4
.
0
5
4
.
0
0
5
.
0
Ratio of failed nodes
Figure 6. The largest com-
ponent after node failures.
Figure 5(a) shows the distribution of node degrees (i.e.,
the sum of random degree and nearby degree) over time.
Initially, the node degrees vary dramatically (see the “0
second” curve); only 22% of nodes have the target degree
six. Under the GoCast maintenance protocols, node degrees
converge quickly. After 5 seconds, 57% of nodes have de-
gree six; after 500 seconds, 60% of nodes have degree six
and the average node degree is 6.4.
Figure 5(b) shows the average latency of overlay links
and tree links over time. This ﬁgure only plots the ﬁrst 200
seconds to make the interesting beginning phase readable.
The latency of overlay links is averaged over both random
links (Crand = 1) and nearby links (Cnear = 5). Initially,
all overlay links are chosen at random.
In the beginning
phase, the quality of the links improves quickly as many of
those long latency links are replaced with low latency links.
This improvement is the major reason why “proximity over-
lay” propagates messages faster than “random overlay” in
Figure 3. After about 60 seconds, the improvement slows
down as it gets harder and harder for nodes to ﬁnd better
neighbors. The latency of tree links is lower than that of
overlay links because GoCast tends to select low latency
overly links to construct the tree. After 100 seconds, the av-
erage latency of tree links is only 15.5ms in contrast to the
91ms average latency between random nodes. This good
link quality is part of the reason why “GoCast” dramatically
outperforms all other protocols in Figure 3.
We now turn our attention to the impact of the number
of random links on the resilience of the overlay.
In Fig-
ure 6, we vary the ratio of failed nodes from 0.05 to 0.5
(i.e., 5% to 50%) and report the ratio q of live nodes that
are in the largest connected component (q = 1 if the overlay
remains connected). Without any random link, the overlay
is already partitioned even without any failure because re-
mote components are not connected. With just one random
link, the overlay remains connected even after 25% nodes
fail concurrently. The difference in resilience between one
random link per node and four random links per node is
small, which justiﬁes our use of one random link per node.
Due to space limitations, we brieﬂy summarize other
simulation results as follows. The detailed data will be pre-
sented in a longer version of this paper. (1) Starting with a
random structure with random links only, the overlay con-
verges quickly to a stable state under our adaptation proto-
cols. The number of changed links per second drops ex-
ponentially over time. (2) The average latency of the over-
lay links grows almost linearly with the number of random
links, which again justiﬁes our use of only one random link
per node. (3) The overlay is scalable; the diameter of the
overlay grows from 6 hops to 10 hops when the system size
increases from 256 nodes to 8,192 nodes.
(4) Compared
with a push-based gossip protocol using fanout 5, GoCast
reduces the trafﬁc imposed on bottleneck network links by
a factor of 4-7. The network topologies used in this experi-
ment are large-scale snapshots of the Internet Autonomous
Systems. (5) The message delay in the push-based gossip
protocol cannot be reduced signiﬁcantly by simply increas-
ing the gossip fanout. When the fanout is increased from 5
to 9, the message delay is reduced by only about 5%; furthe
increasing the fanout to 15 has virtually no impact on the
message delay.
4. Related Work
GoCast ﬁnds context in overlay networks, multicast pro-
tocols, and gossip protocols, among which Araneola [12]
and Bimodal Multicast [2] are most relevant to GoCast.
In parallel to our development in GoCast, Melamed and
Keidar recently proposed Araneola [12]. It organizes nodes
into an overlay network and runs gossip protocols between
overlay neighbors to implement dependable multicast. Ara-
neola and GoCast use similar protocols to adjust a node’s
random neighbors. There are several major differences
between Araneola and GoCast.
(1) Araneola only prop-
agates multicast messages through gossips exchanged be-
tween overlay neighbors. By contrast, most of the time
GoCast propagates messages without stop through the ef-
ﬁcient tree. (2) Araneola has no tight control on the number
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
of nearby neighbors that a node keeps. (3) In Araneola, at
least half of the overlay links are random links.
Bimodal Multicast [2] disseminates messages in two
phases, ﬁrst through best-effort unreliable multicast and
then through gossips exchanged between random nodes.
Both Bimodal Multicast and GoCast intend to combine the
best of tree-based multicast and gossip multicast, but their
approaches and resulted performances are quite different.
(1) Bimodal Multicast gossips message summaries between
random nodes, which has the shortcomings described in
Section 1, for instance, requiring a high fanout to achieve
high reliability and imposing high loads on bottleneck net-
work links due to its obliviousness to the underlying net-
work topology. (2) Bimodal Multicast uses a manually con-
ﬁgured hierarchy for unreliable multicast while GoCast au-
tomatically creates and adapts the tree. (3) In Bimodal Mul-
ticast, nodes that miss a message in the best-effort multicast
phase will only receive the message through gossips, which
can be slow. By contrast, even if the tree is broken into frag-
ments, GoCast still tries to exploit the remaining tree links
to rapidly propagate messages within the tree fragments.
Directional gossip [11] intends to address gossip proto-
cols’ obliviousness to network topology. It assumes nodes
are connected into a topology-aware graph and prefers to
propagate gossips along low-cost links. How to construct
and maintain this graph is not speciﬁed. By contrast, Go-
Cast builds the topology-aware overlay automatically.
Multicast protocols that use message retransmissions
to improve reliability include SRM [7] and RMTP [10].
Narada [3] builds a mesh topology of all multicast mem-
bers, and then compute a multicast spanning tree for each
source. On the other hand, NICE [1] explicitly forms the
multicast tree without building a mesh.
5. Conclusions
We proposed GoCast for fast and dependable group com-
munication. GoCast builds a proximity-aware overlay net-
work that has tightly controlled node degrees. Multicast
messages propagate rapidly through an efﬁcient tree em-
bedded in the overlay.
In the background, nodes gossip
message summaries with their overlay neighbors and pick
up missing messages due to disruptions in the tree-based
multicast. We made the following contributions.
• We are among the ﬁrst to enhance tree-based over-
lay multicast with gossips exchanged between overlay
neighbors to achieve both stable throughput and fast
delivery of multicast messages.
• We are among the ﬁrst to suggest that using one ran-
dom link per node is almost as robust as using multiple
random links per node.
• Our overlay adaptation protocol is among the ﬁrst that
produces a proximity-aware overlay that has tightly
controlled node degrees.
• We are among the ﬁrst to evaluate gossip protocols us-
ing large-scale real Internet topology and latency data,
rather than just reporting message delays in terms of
abstract gossip rounds. We systematically compared
several protocols through extensive simulations.
GoCast delivers multicast messages fast and reliably, and
imposes low loads on network links. These features make
GoCast attractive for many applications. In our scalable and
intelligent infrastructure project at IBM Research, we are
using GoCast to facilitate the management of large systems.
References
[1] S. Banerjee, B. Bhattacharjee, and C. Kommareddy. Scalable
Application Layer Multicast. In SIGCOMM, 2002.
[2] K. P. Birman, M. Hayden, O. Ozkasap, Z. Xiao, M. Budiu,
and Y. Minsky. Bimodal Multicast. ACM Transactions on
Computer Systems, 17(2):41–88, 1999.
[3] Y. Chu, S. G. Rao, and H. Zhang. A Case for End System
Multicast. In SIGMETRICS, 2000.
[4] F. Dabek, J. Li, E. Sit, J. Robertson, M. F. Kaashoek, and
R. Morris. Designing a DHT for Low Latency and High
Throughput. In NSDI, 2004. The network latency data are
available at http://www.pdos.lcs.mit.edu/p2psim/kingdata.
[5] P. T. Eugster, R. Guerraoui, S. B. Handurukande,
P. Kouznetsov, and A.-M. Kermarrec. Lightweight Proba-
bilistic Broadcast. ACM Trans. Comput. Syst., 21(4):341–
374, 2003.
[6] P. T. Eugster, R. Guerraoui, A.-M. Kermarrec,
and
From Epidemics to Distributed Com-
in IEEE Computer Magazine,
http://www.irisa.fr/paris/Biblio/Papers/Kermarrec
L. Massoulie.
puting.
2004.
/EugGueKerMas04IEEEComp.pdf.
[7] S. Floyd, V. Jacobson, C. Liu, S. McCanne, and L. Zhang.
A Reliable Multicast Framework for Light-weight Sessions
and Application Level Framing. IEEE/ACM Transactions on
Networking, 5(6):784–803, December 1997.
[8] X. Gu, K. Nahrstedt, R. N. Chang, and C. Ward. QoS-
Assured Service Composition in Managed Service Overlay
Networks. In ICDCS, 2003.
[9] R. M. Karp, C. Schindelhauer, S. Shenker, and B. Vocking.
To appear
Randomized Rumor Spreading. In FOCS, 2000.
[10] J. C. Lin and S. Paul. RMTP: A Reliable Multicast Transport
Protocol. INFOCOM, 1996.
[11] M.-J. Lin and K. Marzullo. Directional Gossip: Gossip in a
Wide Area Network. In European Dependable Computing
Conference, 1999.
[12] R. Melamed and I. Keidar. Araneola: A Scalable Reliable
Multicast System for Dynamic Environments.
In the 3rd
IEEE International Symposium on Network Computing and
Applications (IEEE NCA), 2004.
[13] T. S. Eugene Ng and H. Zhang. Predicting Internet Net-
work Distance with Coordinates-Based Approaches. In IN-
FOCOM, 2002.
[14] O. Ozkasap, Z. Xiao, and K. P. Birman. Scalability of Two
Reliable Multicast Protocols. Technical Report TR99-1748,
Cornell University, 1999.
[15] L. L. Peterson and B. S. Davie. Computer Networks: A Sys-
tems Approach. Morgan Kaufmann Publishers, 2000.
[16] K. Shen. Structure management for scalable overlay service
construction. In NSDI, 2004.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply.