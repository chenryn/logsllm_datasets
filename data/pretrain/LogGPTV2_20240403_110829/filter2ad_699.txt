# System Call API Obfuscation (Extended Abstract)

**Authors:**
- Abhinav Srivastava<sup>1</sup>
- Andrea Lanzi<sup>1,2</sup>
- Jonathon T. Giffin<sup>1</sup>

<sup>1</sup>School of Computer Science, Georgia Institute of Technology, USA  
<sup>2</sup>Dipartimento di Informatica e Comunicazione, Università degli Studi di Milano, Italy

**Contact:**
- {abhinav, giffin}@cc.gatech.edu
- PI:EMAIL

## Abstract
We argue that security tools relying on the standard system call interfaces to monitor process execution behavior can be circumvented by attacks. Our attack, named "Illusion," enables user-level processes to invoke privileged kernel operations without directly calling the corresponding system calls. The Illusion interface conceals these operations from user-, kernel-, and hypervisor-level monitors, while avoiding modifications to static kernel code or read-only dispatch tables, thus evading detection by tools that protect kernel memory.

## 1. Illusion Attack
Honeypots and other security utilities often monitor system call interfaces to audit, classify, and detect malware and software attacks. Previous research has developed a wide range of system-call-based systems operating at user, kernel, and hypervisor levels [1,5,2,4,3]. Monitoring at the system call interface is intuitive because, in the absence of OS kernel flaws, it is a non-bypassable interface. Malicious code intending to alter the system unsafely will reveal its behavior through the series of system calls it invokes.

Modern malware frequently uses kernel modules or drivers to hide the side effects of user-level processes. For example, rootkits like adore and knark conceal processes, network connections, and malicious files by redirecting interrupt or system call handling to their kernel modules. This redirection can change the semantic meaning of system calls, posing a challenge for monitoring systems. Jiang and Wang address this issue:

"Syscall remapping requires the modification of either the interrupt descriptor table (IDT) or the system call handler routine..." [3]

Systems such as those proposed by Jiang and Wang assume that protections against unauthorized alterations of the IDT or system call handler will force malicious software to use the standard system call interface when requesting kernel services.

However, this assumption is flawed. Malicious code can obfuscate the Windows or Linux system call interface using legitimate functionality commonly employed by kernel modules and drivers. The Illusion attack allows malicious processes to invoke privileged kernel operations without making the actual system calls. Unlike previous attacks, Illusion does not modify static kernel code or read-only dispatch tables such as the IAT or SSDT. During the execution of malware augmented with the Illusion attack, a system call analyzer will observe a different sequence of system calls than those actually executed by the malware.

The Illusion attack exploits the fact that some system calls, like `ioctl`, allow legitimate dispatch into code contained in a kernel module. `ioctl` takes an uninterpreted memory buffer as an argument and passes it to a function in a kernel module registered as the handler for a special file. Benign kernel modules register such handlers; a malicious module doing the same exhibits no different behaviors. However, a call to `ioctl` will direct the buffer to the malicious module's code. In user space, we marshal the malware's actual system call request into this buffer, and the kernel module unmarshals the request and invokes the appropriate kernel system call handler. This creates an illusion where the kernel performs the same operations, but system call monitoring tools see only `ioctl` requests, unaware of the malicious activities.

## References
1. Forrest, S., Hofmeyr, S.A., Somayaji, A., Longstaff, T.A.: A sense of self for UNIX processes. In: IEEE Symposium on Security and Privacy, Oakland, CA (May 1996)
2. Giffin, J.T., Jha, S., Miller, B.P.: Efficient context-sensitive intrusion detection. In: Network and Distributed System Security Symposium (NDSS), San Diego, CA (February 2004)
3. Jiang, X., Wang, X.: Out-of-the-box monitoring of VM-based high-interaction honeypots. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS, vol. 4637, pp. 198–218. Springer, Heidelberg (2007)
4. Krohn, M., Yip, A., Brodsky, M., Cliffer, N., Kaashoek, M.F., Kohler, E., Morris, R.: Information flow control for standard OS abstractions. In: Symposium on Operating System Principles (SOSP), Stevenson, WA (October 2007)
5. Sekar, R., Bendre, M., Dhurjati, D., Bollineni, P.: A fast automaton-based method for detecting anomalous program behaviors. In: IEEE Symposium on Security and Privacy, Oakland, CA (May 2001)