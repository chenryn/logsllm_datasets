framebuffer_release, and alloc_apertures,
implement an MM function aware data flow analysis to drive
the bug detection. That is, we need to identify all used MM
functions, properly abstract their MM behaviors in data flow,
but still keep the precision of the other parts of the data
flow analysis. We observe that most existing memory bug
detection tools fail to implement such an analysis due to the
following reasons:
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2098
1 /*File: Linux/drivers/video/fbdev/hyperv_fb.c*/2 static int hvfb_probe(struct hv_device *hdev,3   const struct hv_vmbus_device_id *dev_id)4 {5 struct fb_info *info;6 struct hvfb_par *par;7int ret;8      ...   9        /*ALLOCATE OBJECT info*/10   ❶ info = framebuffer_alloc(sizeof(struct hvfb_par), 11                                       &hdev->device);12     if (!info)13       return -ENOMEM;14     ...15      ret = hvfb_getmem(hdev, info);1617if (ret) {18pr_err("No memory for framebuffer\n");19goto error2;20}21      ...22 error2:23     ...24     /*DEALLOCATE OBJECT info*/25   ❷ framebuffer_release(info);26      ... //info->apertures double free!27return ret;28 }29 struct fb_info *framebuffer_alloc(size_t size, ...)30 {31      struct fb_info *info;32      char *p;33      ...34      p = kzalloc(fb_info_size + size, GFP_KERNEL);35info = (struct fb_info *) p;36      ...37return info;38 }39 static int hvfb_getmem(struct hv_device *hdev, ...)40 {41      ...               42   ❸ info->apertures = alloc_apertures(1);43      ...              //info->apertures allocation44      pdev = pci_get_device(...);45      if (!pdev) {46        ❹ kfree(info->apertures);//info->apertures free47           return -ENODEV;48 }49 } 50 void framebuffer_release(struct fb_info *info)51 {52      if (!info) return;53   ❺ kfree(info->apertures);54      kfree(info);55 }Cannot comprehensively identify MM functions in differ-
ent source code projects. When detecting memory bugs with
a data flow analysis, only considering a small set of standard
MM functions (e.g., malloc and free) as the sources and
sinks of memory objects would lead to flow explosion if the
analyzed project is very complex. It is essential to identify as
many MM functions as possible (especially those extended
ones) to simplify the data flow and thus accelerate bug
detection. By conducting simple static analysis, which starts
from tracking the data flow of the memory objects dynamically
managed by standard MM functions, it is inherently difficult to
determine when to stop. To find the interface of an MM func-
tion effectively, existing approaches consider information such
as the function name, signature, and description. They either
adopt a heuristic rule based identification (e.g., MemBrush [9],
K-MELD [6]) or utilize NLP (e.g., NLP-EYE[3]) to extract
features directly from the source code. These approaches rely
only on interface information to identify MM functions. Such
information is not sufficient for dealing with implementation
diversity. Hence, an additional validation is also required.
Cannot precisely describe the behaviors of MM functions.
A particular limitation of existing analyses is that they seldom
consider behavior diversity and specificity of MM functions.
Developers might adopt different types of designs to handle
specific structure of memory objects. It is thus necessary to
precisely describe the multi-objects, structure-related behav-
iors of MM functions, especially those extended ones. Un-
fortunately, we found that many function summary based bug
detection tools (e.g., K-MELD, PairMiner [10], PF-Miner [11])
often adopt a coarse-grained detection model and cannot well
summarize the MM behaviors. Hence, they fail to establish
accurate data flows and are unable to find relevant memory
bugs.
Cannot execute effective bug detection with limited code
coverage. To detect memory bugs in large projects, a cross-
module, inter-procedural analysis is necessary to handle very
complex control and data flows. Within a reasonable analysis
time and specific hardware resources, a bug detection cannot
simultaneously pursue in-depth code exploration and analysis
precision. Since an imprecise analysis would easily render the
bug detection results useless due to the overwhelming false
positives (e.g., PeX [12] and LRSan [13] that sacrifice data
flow analysis can only find dozens of real bugs from thousands
of reports), a developer-friendly bug detection tends to restrict
the scope of code exploration to obtain a low false positive
result. However, the loss of code coverage would hamper the
detection of stealthy bugs involving a long execution path.
C. Our Solution
To hunt memory corruption bugs caused by custom MM
behaviors effectively, we propose the following techniques.
First, we observed that MM functions can be distinguished
from the non-MM functions by only considering function pro-
totypes. Specifically, we execute an NLP-assisted classification
to label most MM function candidates efficiently, while some
non-MM functions may be mislabeled. Then we determine
whether a candidate performs memory allocation/deallocation
by applying a top-down data flow analysis from each MM
function candidate to check its internal implementation.
Fig. 2. An example of using MOS to abstract memory management behaviors.
Second, we propose the Memory Operation Synopsis
(MOS), a structure-aware and object-centric abstract represen-
tation of memory management behaviors and related memory
objects,
to help model memory allocation/deallocation of
custom MM functions.
Definition 1. A Memory Operation Synopsis (MOS) is defined
as a MM behaviors summary that consists of primary function
name, primary property, and a list of correlated memory
objects that are dynamically managed. It is represented as
M = {Mname, Mtype, [O]}, where Mname is the primary
function name indicating the summary ancestor; Mtype is the
primary property indicating whether the ancestor is a memory
allocator or deallocator; [O]
is a list of memory objects
managed by the ancestor. In the list [O] = [o1, o2, ..., on],
each memory object, i.e., oi = (name, type), is a 2-tuple
where name is a field-based variable name of current memory
object to reveal its structure nested relationship, and type is
its pointer type.
Figure 2 shows an example of how to model memory
management behaviors with MOS. In this example, function
pool_alloc_page first allocates a dma_page buffer using func-
tion kmalloc. Then, it invokes function dma_alloc_coherent
to allocate a vaddr object as a member of the dma_page object.
Finally, the allocated object is returned through the return
value of the function. To summarize the memory management
behavior of pool_alloc_page, the MOS representation first
labels its name and its property as an allocator, then it stores
a list to record the allocated memory objects and how they are
returned (i.e., via RetVal and RetVal->vaddr).
Third, we utilize MOS to enhance data flow analysis based
memory bug detection. By introducing MOS into the standard
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2099
1 /*File: Linux/mm/dmapool.c*/2 static struct dma_page *pool_alloc_page(struct 3                       dma_pool *pool, gfp_t mem_flags)4 {5 struct dma_page *page;6                //primitive function7page = kmalloc(sizeof(*page), mem_flags);8if (!page)9return NULL;10                          //primitive function11page->vaddr = dma_alloc_coherent(pool->dev,   12              pool->allocation,&page->dma, mem_flags);13      ...14return page;15 }MOS Representation:{     Function name        Property      pool_alloc_page    : Allocator,      Memory object list   Object type      RetVal             : struct dma_page*,      RetVal->vaddr      : void*}Fig. 3. Workflow of GOSHAWK
static analysis, the data flow of an MM function can be sim-
plified by only retaining necessary details of all dynamically
managed objects with compound structures. In comparison,
many function summary based bug detection techniques as-
sume that a MM function only handles one simple memory
object, and cannot describe complex memory management
cases. In addition, even if memory bug analysis tools report a
potential problem, they need to output the data flow related to
the improperly used memory object for developers to confirm
the bug and its root cause. By utilizing MOS, we can cut
the MM function part of a too-long-to-understand data flow,
making it easier to understand.
In the following sections, we detail the design and imple-
mentation of GOSHAWK, our proposed MOS-enhanced bug
detection tool, and show its effectiveness in finding non-trivial
memory corruption bugs in various open-source projects.
III. GOSHAWK: A MOS-ENHANCED MEMORY BUG
DETECTION SYSTEM
A. Overview
GOSHAWK, our detection system for memory corruption
bugs in C source code, utilizes MOS to model memory opera-
tions of MM functions and the relevant dynamically allocated
memory objects in a structure-aware way. It executes a three-
phase workflow for memory bug detection (see Figure 3). In
the MM function identification phase, GOSHAWK analyzes
source code and pinpoints MM functions automatically. Then,
through the MOS generation phase, GOSHAWK abstractly
characterizes each identified MM function into a MOS repre-
sentation. In the final phase of MOS-enhanced bug detection,
GOSHAWK fulfils a MOS simplified memory object data flow
tracking through the analyzed target and detects memory bugs
correspondingly.
GOSHAWK combines an NLP-assisted classification and
a data flow analysis based validation to identify MM
functions. We observe that developers often declare the in-
terface of a function to reflect its internal behavior, and we
could classify functions according to the natural language
semantics of their interfaces. Therefore, GOSHAWK utilizes
NLP to extract specific features from function prototypes
declared in source code, and computes the feature similarity
for each function against a reference set, which consists of
pre-collected prototypes of representative MM functions. This
efficiently classifies MM functions and non-MM functions by
only checking their prototypes. And even if the classification
sometimes over-labels non-MM functions as candidates,
it
seldom mistakenly labels a MM function. Hence GOSHAWK
can exclude a large portion of irrelevant functions via the
classification. Next, GOSHAWK conducts a top-down data flow
analysis starting from the interface of each candidate, checking
whether the function uses any official MM functions (how we
maintain a set of such allocators/deallocators is detailed in
Section IV-B). And if the data flow analysis validates that the
candidate does execute MM behavior, GOSHAWK identifies it
as a MM function with a high accuracy.
To further summarize a MM function with a structure-
aware granularity, GOSHAWK utilizes the MOS represen-
tation to abstract how memory objects are dynamically
allocated/deallocated. Since for each MM function, the pre-
viously applied data flow analysis has tracked and labeled the
dynamic memory status of all the relevant memory objects
and analyzed the memory operations (e.g., allocating/releasing
memory, returning a pointer through return value/parameters).
GOSHAWK directly leverages this data flow information to
translate implementation details into MOS.
With the help of MOS, GOSHAWK implements a
structure-aware, object-centric memory bug detection.
GOSHAWK leverages MOS information to update memory
object status. When traversing again the source code to detect
bugs, GOSHAWK skips the redundant data flow analysis when
encountering an MM function; it instead reads information
provided by MOS to understand the detailed MM behaviors,
and directly updates the status of memory objects accordingly.
MOS helps simplify the entire data flow by summarizing
a MM function as a node, but still preserves the structure
information of the memory objects. Since every memory
object can be precisely described and tracked, more bugs are
expected to be found. The simplified data flow also retrofits
the bug report: the reported issues can be examined without
inspecting the data flow inside the MM functions.
B. MM Function Identification
NLP-assisted classification. The NLP-assisted classification
starts from parsing the source code of the tested project to
extract all function prototypes, and chooses the prototype
with at least one pointer (either a return value or a func-
tion parameter). The extracted prototypes are then sent to a
ULM-based segmentation [14] process and each is divided
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2100
FunctionPrototypesCCodeMOS-enhanced Bug DetectionDetectionToolMM Function IdentificationMOS GenerationMOS InterfaceAPINLP-assisted ClassificationDFA-based ValidationReference SetOfficial MMfunctionsMMCandidatesBugsIdentifiedMM functionsMemory Object TrackingMOSinto a list of subwords (GOSHAWK utilizes Byte Pair En-
code [15] algorithm to collect meaningful subwords and their
occurrence frequency from the posts of StackOverflow [16]).
Then, GOSHAWK converts the subword list into a numeric
vector by utilizing a Siamese network [17] with Transformer
encoders [18] trained with manually labeled MM and non-
MM functions. Finally, GOSHAWK computes a similarity score
between the numeric vector of a function and three reference
vectors, which separately indicate memory allocation function,
memory deallocation function, and non-MM function type.
According to the similarity score, GOSHAWK classifies the
tested functions as one of the above types. More details of
model training are provided in Section A in Appendix.
The essential aspect of our proposed similarity comparison
is how to build the three reference vectors. We first randomly
collect 5,342 function prototypes as a function prototype cor-
pus from real-world projects (e.g., Linux kernel) and manually
classify them into three types. Next, we apply the same ULM-
based segmentation to the classified functions to obtain three
sets of subword lists. Using these sets as the training data, we
drive a Siamese network to generate optimized Transformer
encoders. After the training, we not only obtain a specific
Siamese network with trained encoders, but also use this
network to convert subword lists of our function prototype
corpus into vector lists of three types. Finally, for vectors of
each of the three types, we calculate the arithmetic mean and
finally obtain three reference vectors.
Data Flow Analysis based Validation. Identifying MM func-
tions only through an NLP-assisted classification is obviously
inaccurate, and thus GOSHAWK double-checks the results by
conducting a top-down data flow analysis against each MM
function candidate to check whether the candidate or any of
its sub-routine uses an official MM function. Official MM
functions are those MM APIs (e.g., malloc, kzalloc, free)
standardized by widely used libraries (e.g., libc) or systems
(e.g., OS kernel). We collect such official MM functions
from the official documents of operating systems [19] and
libraries [20]. In detail, the validation traverses the code of
a candidate and its sub-routines, finding whether there exist
invocations of official MM functions. Once a specific invoca-
tion is found, GOSHAWK builds the data flow related to the
official MM function inside the candidate, examines whether
an allocated/deallocated memory object is connected to the
parameter/return value of the candidate. If so, GOSHAWK
identifies the candidate as a MM function with a high accuracy.
C. MOS Generation
all
GOSHAWK utilizes MOS to summarize
alloca-
tion/deallocation operations inside an MM function. To gen-
erate MOS for an MM function, GOSHAWK reuses the re-
cursive data flow analysis of MM function validation to
track the propagation of allocated/deallocated memory objects
(pointers) from official MM functions. If the involved official
MM functions are allocators, GOSHAWK adopts a forward
data flow analysis to track whether the pointers of those
allocated objects are copied to either a return value or any
parameters of the function interface. Otherwise, it tracks data
flow backwards to label the released parameters. Note that
the adopted data-flow analysis is field-sensitive, and thus it
maintains the nested relations of struct elements. Once all
data flow and structure information of the involved memory
objects is collected, GOSHAWK follows the MOS definition
to generate the associated MOS for its MM function. In
particular, if an MM function contains other MM functions
with MOS already generated, GOSHAWK merges the MOS
information of those sub-routines to that of the outermost
MM function. For those official MM functions, GOSHAWK
considers them as domain knowledge and prepares the MOS
for them before any analysis.
Fig. 4. An example of data flow based MOS generation.
it
further
tracks
finds
the
an
internal
official
of
since
pci_iounmap
deallocator
tpci200_unregister
the MOS
Figure 4 shows a concrete example of MOS generation.
In this case, GOSHAWK first
identifies three deallocators,
tpci200_uninstall, tpci200_unregister, and pci_iounmap.
When GOSHAWK analyzes the outermost tpci200_uninstall
function
function,
and
iounmap.
the MOS for pci_iounmap,
GOSHAWK then generates
pci_iounmap,
and
into
GOSHAWK merges
that
the MOS of
tpci200_unregister contains the (two objects) deallocation
behaviors of pci_iounmap. Finally, GOSHAWK summarizes
the MOS of tpci200_uninstall by combining the MOS
of tpci200_unregister and that of the standard memory
deallocation function kfree. As a result, when a program
analysis traverses the code, it only needs to use the MOS
of the outermost function tpci200_uninstall to precisely
describe the three to-be-released sub-objects of the tpci
invokes
of
tpci200_unregister. That
pci_iounmap
is,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2101
1 static void tpci200_uninstall(struct tpci200_board 2                                              *tpci200)3 {4 tpci200_unregister(tpci200);5 kfree(tpci200->slots);6 }7 8 static void tpci200_unregister(struct tpci200_board 9                                              *tpci200)10 {11pci_iounmap(tpci200->info->pdev, 12                tpci200->info->interface_regs);13pci_iounmap(tpci200->info->pdev, 14                      tpci200->info->cfg_regs);15     ...16 }1718 void pci_iounmap(struct pci_dev *dev, void *addr)19 {20     ...21iounmap(addr);22 }❶❷❸❹❺MOS Representation:{tpci200_uninstall: Deallocator,tpci200->info->interface_regs: void *,tpci200->info->cfg_regs      : void *,tpci200->slots               : struct tpci200_slot *}parameter without exploring the internal MM functions.
During our MOS generation stage, we do not con-
sider the path constraints of conditional memory alloca-
tion/deallocation. Integrating such description into MOS is
not difficult; it however significantly complicates the MOS
definition. Our design choice is to consider the MM behaviors
as unconditional in MOS (i.e., by executing a flow-insensitive
analysis at this stage), and leave the task of checking con-
straints related with function invoking, global variables status,
or logical arithmetic after the bug detection. That is, when
a potential bug is reported, GOSHAWK then applies a fine-
grained symbolic execution (e.g., by using the Z3 solver [21])
to only re-analyze the involved code paths of the reported
issue. This can filter out the possible false positives caused
by the conditional memory allocation/deallocation without
incurring heavy performance overhead beforehand.
D. MOS-enhanced Bug Detection
When GOSHAWK traverses the source code to detect mem-
ory bugs, it achieves an efficient yet precise bug detection with
the help of MOS. It modifies the way of how dynamically
managed memory objects are modelled to reduce the scope of
code exploration, and then detects complex memory corruption
bugs in an object-centric and structure-aware way.
Traditionally, a memory corruption bug detection starts
from recording memory object allocations of a few standard
allocators (e.g., malloc), tracking the data flow of allocated
objects until they are released by deallocators (e.g., free),
and examining whether the released objects are used or
released again. However, this strategy often needs to explore
a long code path with very complex data flow involved, and
easily leads to analysis state explosion. GOSHAWK, instead,
explores memory objects propagation between custom alloca-
tors/deallocators and does not need to explore the internal code
of MM functions, and thus avoids path explosion effectively.
In particular, when encountering a MM function, GOSHAWK
first retrieves the function type from MOS. If the function
is an allocator, GOSHAWK reads the dynamically managed
memory objects list, and creates new symbols for all allocated
objects accordingly; if the function is a deallocator, GOSHAWK
updates the status of involved memory objects by labeling
their symbols as “released”. Consider the code in Figure 1 as
an example. After the MM function identification and MOS
generation, GOSHAWK creates MOS for framebuffer_alloc
(❶) and alloc_apertures (❸). When the bug detection en-
counters these two MM functions, the MOS information helps
GOSHAWK directly model the allocated memory objects (and
avoids a redundant analysis against the MM functions). And
when the bug detection moves forward to the deallocation
function framebuffer_release (❷), GOSHAWK also reads its
corresponding MOS and then updates the statuses of the
allocated objects. In this case, GOSHAWK only needs to
explore code paths between ❶ and ❷ to find the bug.
More importantly, MOS provides rich information to help
GOSHAWK precisely model the memory management behav-
iors of multiple memory objects nested in structures. In the
case in Figure 1, the MOS-based memory object modeling
helps GOSHAWK understand the structure of object pointed by
the info pointer. Therefore, GOSHAWK is able to accurately
update the status changing of a compound struct: when the
bug detection moves from ❶ to ❷, GOSHAWK not only
knows the allocation/deallocation against the info pointer,
but also that against the info->apertures pointer, and thus
captures the double-free bug (❹ + ❺). In comparison, other
approaches (e.g., the pair-based mining approaches assume
that each memory allocator creates a single memory object,
and there is a corresponding deallocator to release it) often
fail to precisely track such compound objects even if they
also generate summaries for custom MM functions.
IV. IMPLEMENTATION
The implemented GOSHAWK prototype consists of over
3.5K lines of C++ code and 4K lines of Python code. The
source code is available at https://goshawk.code-analysis.org.
We elaborate on implementation details below.
A. MOS-enhanced Bug Detection on CSA
The GOSHAWK prototype is built on top of the CSA
code analysis engine. The original version of CSA detects
memory corruption bugs by using path-sensitive and inter-
procedural symbolic execution. To integrate MOS with CSA,
we implement a MOS interface for CSA to interpret the MOS
and model the related memory objects. We also design a use-
after-free and double-free checker by reusing the detection
logic of MallocChecker [22], which is the official memory