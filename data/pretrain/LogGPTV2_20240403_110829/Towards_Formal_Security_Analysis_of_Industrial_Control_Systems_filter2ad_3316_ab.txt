provide more details on system model, attacker model and
goals. We conclude this section with a discussion of limita-
tions of the proposed design choices.
3.1 System Model
As deﬁned in Section 2.1, the system model is an abstrac-
tion of the system under attack and deﬁnes all the possible
interactions of the attacker with the system. Therefore, the
ﬁrst step for the deﬁnition of a general system modeling
technique for any CPS is the identiﬁcation of the relevant
aspects and components of the system. There are a num-
ber of diﬀerent work in the literature for the deﬁnition of a
system model for CPS, e.g., [15]. However, the problem has
been often studies from an engineering point of view, with
no (or little) attention for the security aspects [12].
We consider the following as main aspects of a CPS:
1. The components involved in the CPS and their behav-
ior (e.g., deﬁned by their logic)
2. The digital communication between the components
3. The physical interactions between components, par-
tially deﬁned by the related laws of physics
We now comment on the modeling of each in more detail.
3.1.1 Modeling of Components
Physical Status of the System. When modeling the sta-
tus of a CPS, we have to consider the physical status of the
components involved in the physical process.
In order to
consider the physical process we use a database that stores
the status of all the components of the system. For exam-
ple, the level of water in each tank or the level of chemicals
inside the water. The term database in this context does
not refer to standard DBMS (DataBase Management Sys-
tems), as ASLan++ (and other formal languages) cannot
communicate with DBMS. Instead, it is possible to deﬁne
a status set (using predicates) of tuples that uniquely de-
ﬁnes the actual status of a property of a component in the
CPS. In ASLan++ it is also possible to deﬁne the set as
non-public, which means that the attacker cannot read or
arbitrarily write the status of the database.
116Physical Properties of Components. In a CPS, each
component can have a number of physical properties which
are stored in the status set. Those properties might also de-
termine how an agent (e.g., the attacker) can interact with
them. The properties of a component can take values from
a continuous interval but, in our formalization, we have dis-
cretized these values into several symbolic constants. For
example, when a sensor reads the level of the water inside a
tank and reports them to a controller, we assume that the
readings can only range in a (ﬁnite, ordered) set of symbolic
constants.
As an example, we consider the valves in SWaT. There are
two diﬀerent type of valves: motorized valves and manual
valves. The main diﬀerence is that a motorized valve can be
operated remotely and manually, while a manual valve can
only be manually operated. Therefore, an Insider attacker
can potentially operate any type of valve while an attacker
without physical access to the CPS cannot.
In order to
connect the physical properties of the system model to the
interaction of the attacker model we have used Horn Clauses
(HC) in our ASLan++ models, and other speciﬁc settings
described in Section 4.2. An example of HC for the deﬁnition
of a manual operation of a manual valve is the following.
systemStatus(Component, open) : −
attackerProp(distance, physicalAccess)∧
systemStatus(Component, close)∧
systemStatus(Component, manual )
where the status of the component Component can be changed
in the systemStatus database if Component can be manually
operated.
Control Logic of the Components. The logic of indus-
trial control system components is commonly deﬁned by the
programming of the respective PLCs and the SCADA. Such
logic is usually written in languages such as ladder logic fol-
lowing the IEC 61131-3 standard [22], and represents simple
state machines and similar. It should therefore be possible
to model the behavior of components faithfully in languages
such as ASLan++. We provide an example of such a mod-
eling in our use case in Section 4.
3.1.2 Digital Communications
The model of the network is not new to the formal meth-
ods community. There are, in fact, a number of works that
model the network (e.g., as channels where diﬀerent agents
are communicating with each others) and protocols over the
network (e.g., [11, 40]). However, the parties communicat-
ing in a CPS and the protocols used in the communication
might be diﬀerent from the ones considered in security pro-
tocols or in the standard client-server paradigm, see for ex-
ample [8,39]. In our case, we use the DY model and then we
focus on the payloads communicated by the various compo-
nents more than on the structure of the messages.
3.1.3 Physical Interactions between Components
The deﬁnition of the laws of physics related to a CPS is
not a trivial task. There are however preliminary results
in the direction of the automated deﬁnition of such laws,
e.g., [34]. The deﬁnition of a general tool for the extraction
of the laws of physics from a CPS is out of the scope of this
paper. However, we illustrate the main laws of physics we
consider in our examples, and the relations between them,
the system, and the attacker model.
The physical interactions between components expresses
the constraints that needs to be fulﬁlled whenever a modi-
ﬁcation of the physical part of the system take place. For
example, if two water tanks are connected by a pipe, when
the water level of one of the tanks is decreasing, the wa-
ter level of the other tank needs to increase. In our models
we capture linear physical interactions between components
but nothing prevents a modeler to consider non-linear inter-
actions (subject to the granularity of the discretization of
values). As we show in the Section 4, a modeler can use sets
or a database to store those information.
We propose to model the behavior of each component in
terms of input/output messages, and modiﬁcation of the
physical status of the CPS (i.e., of the status set). The
ASLan++ language (as other formal languages) provides
an AnB (Alice and Bob) notation for the deﬁnition of the
message exchange between entities. For example, a sen-
sor S that sends a message M to a PLC P is deﬁned in
ASLan++ as: S → P : M . This construct is then auto-
matically translated into a transition system where the ex-
change of message is deﬁned as modiﬁcation of variables in
state predicates (the details of the semantics of ASLan++
can be found in [6]). Furthermore, the communication of
components and the PLCs is not direct but passes through
sensors and actuators. For example, a tank itself typically
does not communicate directly with the PLC. Instead, a
sensor (e.g., Level Indicator Transmitter or LIT) reads the
level of the water and communicate the readings to the PLC.
The same applies to motorized valves or pumps—the status
of those components is read by sensors and changed by actu-
ators controlled by a PLC. In our use case, examples of such
sensors/actuators are: Flow, Pressure, and Level Indicator
Transmitters.
Neighboring components may aﬀect the behavior of a com-
ponent C . Thus, with higher number of aﬀecting neighbors,
the complexity of the deﬁnition of the behavior of C in-
creases. In order to avoid state explosion problems, we have
limited the expressiveness of the behavior of the components
in our use case in Section 4 by considering only a subset of
the related components.
3.2 Attacker Proﬁle and Attack Model
Mapping an attacker proﬁles to an attack model can (in
general) be achieved by mapping each instantiation of each
dimension (metric) of an attacker proﬁle to a constraint for
the attack model. The attack model is, by deﬁnition, com-
posed by an attacker proﬁle and a system model. Therefore,
a constraint in the attack model results in a constraint on
the interaction between the attacker and the system.
In general, the attacker framework proposed in [31] can be
applied to several security techniques, e.g. from risk analysis
to model checking. However, in this work we focus on model-
checking based techniques. In this context, a system model
is often deﬁned by a transition system (e.g., the semantics
of the ASLan++ formal language [7]) which can potentially
deﬁne a tree with an inﬁnite number of paths. Constraints
over the system will then be expressed as constraints on the
exploration of this tree.
The structure of the attacker model is composed by three
main independent dimensions: knowledge, resources, and
psychology (see Figure 2). Each dimension is structured
with an hierarchy of sub-dimensions. In this work, we omit
the details of the dimensions and focus on the mapping
between those dimensions and an attack model (see Sec-
tion 4.2).
3.3 Security Goals
We deﬁne a security goal as a malicious state of the system
or in terms of knowledge of the attacker model (i.e., conﬁ-
dentiality violation). Due to the heterogeneous nature of
CPS, deﬁning general security goals means deﬁning goals in
an abstract way (and with a high level of abstraction). The
deﬁnition of such categorization is out of the scope of this
work since we aim at deﬁning goals that can concretely be
applied to a CPS. Nevertheless, commonalities should exist:
for example, all water treatment plants have similar logic to
117control the process of physical components. Therefore, we
can categorize the security goals for a water treatment plant
as follows:
1. Over/Under-ﬂow tanks
2. Arbitrarily change the status of a component (open/-
close a motorized valve)
3. Alter chemical dosing of the water
4. Drop/Increase the pressure in a pipe
5. Drop/Increase the ﬂow of the water in a pipe
In Section 4.3, we show our coverage and examples of attacks
found on SWaT.
3.4 Limitations
3.4.1 Discretization of Time and States
In our work we focus on discrete-time analysis. This
simpliﬁes the analysis and permits us to use a wide range
of security analysis tools (e.g., CL-AtSe [37], OFMC [10],
SATMC [5]).
In our speciﬁc application scenario (water treatment plants),
we found that the system’s inertia leads to time constraints
that are not as strict as in other CPS, e.g., power plants. As
a result, the water level in a tank can be easily discretized by
considering threshold values measured at discrete time steps.
In particular, such discretization of values and times is also
fundamentally used for the digital control of the system used
by the PLCs. Our intuition is that the discretization chosen
by the system engineers to guarantee stable operations of
the system will also be suitable for our formal modeling of
the system. This will also allow us to directly translate the
control logic implemented in the PLCs to our system model.
We acknowledge that by using a discrete time we are lim-
iting the expressiveness of the system. To validate that we
are not missing important attacks in our analysis, we will
compare our formal analysis results with the results of inde-
pendent manual testing in Section 5, and the related work
in Section 6.
3.4.2 Abstraction Level and Laws of Physics
The level of abstraction is always a concern when it comes
to the deﬁnition of a system model. When considering CPS
this is particularly delicate because the processes in a CPS
can be modeled only along with the laws of physics related
to that process. In addition, selected attacks in a CPS model
might be possible only if speciﬁc laws of physics have been
considered. As an example, to increase the pressure in a
tank, the direct proportionality between temperature and
pressure should be considered. An attacker with physical
access to the CPS could increase the temperature of the
tank and generate enough pressure to make the tank burst.
A low level of abstraction (high level of details) would be
then preferable in case of CPS. On the other hand, when
considering model checking techniques, considering a high
level of details might easily lead to non-termination issues.
4. USE CASE: SWaT
We have applied our technique to a real-world water treat-
ment plant, SWaT (see Figure 3, with general description
in [25]). SWaT is an operational ICS, built for the experi-
mental research in the design of secure ICS. As depicted in
Figure 4, the HMI, the SCADA, and the Historian are con-
nected to the PLCs of the six physical processes of SWaT.
Each physical process has a speciﬁc task, and is connected to
one or more other physical processes (more details in [25]).
A number of manual valves, pressure meters, and ﬂow
meters are involved in SWaT, for the sake of simplicity we
only discuss the main components involved in each process.
Figure 3: Our formal model is based on the water
treatment plant SWaT.
A more detailed overview of the system is provided in Ap-
pendix 7. Each component (e.g., sensors, pumps) is asso-
ciated to one speciﬁc PLC, but any PLC can request to
communicate to any other component (through the PLC
connected to that component). An access control table is
stored in each PLC and determines whether or not another
PLC (which is not directly connected to the component) is
allowed to perform any request to the components it con-
trols. In our analysis, we assume that any PLC can commu-
nicate with any component according to the implementation
of SWaT.
Resulting model. The attack model that we have imple-
mented in ASLan++ is around 1000 lines long and contains
more than 50 entities (4 in P1, 12 in P2, 8 in P3, 8 in P4, 14
in P5, 7 in P6) where: 11 are pumps, 16 motorized valves,
6 PLC, 9 tanks, 9 AIT, 8 FIT, and 1 PIT. The ASLan++
speciﬁcation (available at [29]) generates 269 ASLan rules
(i.e., transition rules). Due to the complexity of the speci-
ﬁcation, CL-AtSe (the security analysis tool we have used)
takes up to one day for the analysis of several security goals
(assuming that the goal can be reached). In order to speed
up the analysis, for each security goal, we have (manually)
reduced the attack model considering only a subset of the
processes that are related to the security goal. For example,
when the goal involves the level of the water in the tank in
the ﬁrst process, we have considered only the ﬁrst, second,
and third process. In this way, we have reduced the state
space and accelerated the analysis procedure to few seconds.
4.1 Modeling the SWaT Processes
We now deﬁne how to model each component involved
in the SWaT process. We have used the ASLan++ formal
language [40] for modeling SWaT. For the sake of readability
and generality, we do not give the details of the ASLan++
model (which we made publicly available at [29]). Instead,
we describe the general concepts behind the modeling.
Databases. As discussed in Section 3.1, we use a non-public
database to store the physical state of the system.
Using the same concept we also create an Historian set
which represents the Historian component. This can be used
in LTL security goals in order to understand if the attacker
modiﬁed the Historian. We discuss the goal later on in this
section.
Network and Message Exchange. Diﬀerent network
protocols are involved in the SWaT testbed. We have, how-
ever, considered an abstraction of the payloads communi-
cated and we have abstracted away all the details related to
the speciﬁc protocols involved (e.g., Ethernet/IP [20] or the
Common Industrial Protocol [33]). The formal analysis of
the security protocols involved in SWaT is out of the scope
of this work.
118Figure 4: A simpliﬁed version of the SWaT process represented in our system model.
In addition the
components show, our formalized model contains details such as manual valves. The HMI, SCADA, UV and
RO components are not fully represented in our system model for eﬃciency reasons.
Logic of the PLCs and SCADA. As proposed in Sec-
tion 3.1, we deﬁned the logic of the PLC by using the op-
erating manual of SWaT. We note that while it should be
theoretically possible to prove equivalence of the logic in
SWaT and our model, our level of abstraction with respect
to ASLan++ makes it diﬃcult to provide a soundness proof
between the two.
With respect to logic running in the SCADA system, we
do not distinguish between the communication between the
SCADA or the PLC and the various components because we
abstract away the details of the protocols involved. There-
fore, considering the SCADA entity would replicate the logic
already deﬁned in the PLCs. It might be interesting con-
sider the SCADA system because it widens the attack sur-
face, however, the complexity of the attacks remains the
same since the logic of the PLC already expresses the con-
trol logic.
Example: Modeling of PLC1 and T101. As an exam-
ple, we show and describe here (a part of) the model of the
interactions between PCL1 and the tank T101 (where * is
used as a wildcard).
PLC1 is constantly waiting for incoming communications
by LIT101 (and LIT301, that we do not discuss for the sake
of simplicity) and, based on the incoming values PLC1 de-
cides how to proceed. Therefore, we have modeled the be-
havior of PLC1 as a switch-case over the incoming commu-
nication inside a while loop. The number of iterations of
the while loop is set before the execution of CL-AtSe and
variate depending on the goal. The number of iterations
usually ranges between 2 to 10 since most of the attacks can
be found with a low number of iterations and the analysis
can take up to a day when 10 is chosen.
while(true){