.Vb 1
\&    S_ISENFMT($mode) S_ISWHT($mode)
.Ve
.Sp
See your native \fIchmod\fR\|(2) and \fIstat\fR\|(2) documentation for more details
about the S_* constants.
.Sp
To get status info for a symbolic link instead of the target file
behind the link, use the \f(CW\*(C`lstat\*(C'\fR function, see \*(L"stat\*(R".
.IP "study \s-1SCALAR\s0" 8
.IX Item "study SCALAR"
.PD 0
.IP "study" 8
.IX Item "study"
.PD
Takes extra time to study \s-1SCALAR\s0 (\f(CW$_\fR if unspecified) in anticipation of
doing many pattern matches on the string before it is next modified.
This may or may not save time, depending on the nature and number of
patterns you are searching on, and on the distribution of character
frequencies in the string to be searched\*(--you probably want to compare
run times with and without it to see which runs faster.  Those loops
which scan for many short constant strings (including the constant
parts of more complex patterns) will benefit most.  You may have only
one \f(CW\*(C`study\*(C'\fR active at a time\*(--if you study a different scalar the first
is \*(L"unstudied\*(R".  (The way \f(CW\*(C`study\*(C'\fR works is this: a linked list of every
character in the string to be searched is made, so we know, for
example, where all the \f(CW'k'\fR characters are.  From each search string,
the rarest character is selected, based on some static frequency tables
constructed from some C programs and English text.  Only those places
that contain this \*(L"rarest\*(R" character are examined.)
.Sp
For example, here is a loop that inserts index producing entries
before any line containing a certain pattern:
.Sp
.Vb 8
\&    while (<>) {
\&        study;
\&        print ".IX foo\en"       if /\ebfoo\eb/;
\&        print ".IX bar\en"       if /\ebbar\eb/;
\&        print ".IX blurfl\en"    if /\ebblurfl\eb/;
\&        # ...
\&        print;
\&    }
.Ve
.Sp
In searching for \f(CW\*(C`/\ebfoo\eb/\*(C'\fR, only those locations in \f(CW$_\fR that contain \f(CW\*(C`f\*(C'\fR
will be looked at, because \f(CW\*(C`f\*(C'\fR is rarer than \f(CW\*(C`o\*(C'\fR.  In general, this is
a big win except in pathological cases.  The only question is whether
it saves you more time than it took to build the linked list in the
first place.
.Sp
Note that if you have to look for strings that you don't know till
runtime, you can build an entire loop as a string and \f(CW\*(C`eval\*(C'\fR that to
avoid recompiling all your patterns all the time.  Together with
undefining \f(CW$/\fR to input entire files as one record, this can be very
fast, often faster than specialized programs like \fIfgrep\fR\|(1).  The following
scans a list of files (\f(CW@files\fR) for a list of words (\f(CW@words\fR), and prints
out the names of those files that contain a match:
.Sp
.Vb 12
\&    $search = 'while (<>) { study;';
\&    foreach $word (@words) {
\&        $search .= "++\e$seen{\e$ARGV} if /\e\eb$word\e\eb/;\en";
\&    }
\&    $search .= "}";
\&    @ARGV = @files;
\&    undef $/;
\&    eval $search;               # this screams
\&    $/ = "\en";          # put back to normal input delimiter
\&    foreach $file (sort keys(%seen)) {
\&        print $file, "\en";
\&    }
.Ve
.IP "sub \s-1NAME\s0 \s-1BLOCK\s0" 8
.IX Item "sub NAME BLOCK"
.PD 0
.IP "sub \s-1NAME\s0 (\s-1PROTO\s0) \s-1BLOCK\s0" 8
.IX Item "sub NAME (PROTO) BLOCK"
.IP "sub \s-1NAME\s0 : \s-1ATTRS\s0 \s-1BLOCK\s0" 8
.IX Item "sub NAME : ATTRS BLOCK"
.IP "sub \s-1NAME\s0 (\s-1PROTO\s0) : \s-1ATTRS\s0 \s-1BLOCK\s0" 8
.IX Item "sub NAME (PROTO) : ATTRS BLOCK"
.PD
This is subroutine definition, not a real function \fIper se\fR.
Without a \s-1BLOCK\s0 it's just a forward declaration.  Without a \s-1NAME\s0,
it's an anonymous function declaration, and does actually return
a value: the \s-1CODE\s0 ref of the closure you just created.
.Sp
See perlsub and perlref for details about subroutines and
references, and attributes and Attribute::Handlers for more
information about attributes.
.IP "substr \s-1EXPR\s0,OFFSET,LENGTH,REPLACEMENT" 8
.IX Item "substr EXPR,OFFSET,LENGTH,REPLACEMENT"
.PD 0
.IP "substr \s-1EXPR\s0,OFFSET,LENGTH" 8
.IX Item "substr EXPR,OFFSET,LENGTH"
.IP "substr \s-1EXPR\s0,OFFSET" 8
.IX Item "substr EXPR,OFFSET"
.PD
Extracts a substring out of \s-1EXPR\s0 and returns it.  First character is at
offset \f(CW0\fR, or whatever you've set \f(CW$[\fR to (but don't do that).
If \s-1OFFSET\s0 is negative (or more precisely, less than \f(CW$[\fR), starts
that far from the end of the string.  If \s-1LENGTH\s0 is omitted, returns
everything to the end of the string.  If \s-1LENGTH\s0 is negative, leaves that
many characters off the end of the string.
.Sp
You can use the \fIsubstr()\fR function as an lvalue, in which case \s-1EXPR\s0
must itself be an lvalue.  If you assign something shorter than \s-1LENGTH\s0,
the string will shrink, and if you assign something longer than \s-1LENGTH\s0,
the string will grow to accommodate it.  To keep the string the same
length you may need to pad or chop your value using \f(CW\*(C`sprintf\*(C'\fR.
.Sp
If \s-1OFFSET\s0 and \s-1LENGTH\s0 specify a substring that is partly outside the
string, only the part within the string is returned.  If the substring
is beyond either end of the string, \fIsubstr()\fR returns the undefined
value and produces a warning.  When used as an lvalue, specifying a
substring that is entirely outside the string is a fatal error.
Here's an example showing the behavior for boundary cases:
.Sp
.Vb 5
\&    my $name = 'fred';
\&    substr($name, 4) = 'dy';            # $name is now 'freddy'
\&    my $null = substr $name, 6, 2;      # returns '' (no warning)
\&    my $oops = substr $name, 7;         # returns undef, with warning
\&    substr($name, 7) = 'gap';           # fatal error
.Ve
.Sp
An alternative to using \fIsubstr()\fR as an lvalue is to specify the
replacement string as the 4th argument.  This allows you to replace
parts of the \s-1EXPR\s0 and return what was there before in one operation,
just as you can with \fIsplice()\fR.
.Sp
If the lvalue returned by substr is used after the \s-1EXPR\s0 is changed in
any way, the behaviour may not be as expected and is subject to change.
This caveat includes code such as \f(CW\*(C`print(substr($foo,$a,$b)=$bar)\*(C'\fR or
\&\f(CW\*(C`(substr($foo,$a,$b)=$bar)=$fud\*(C'\fR (where \f(CW$foo\fR is changed via the
substring assignment, and then the substr is used again), or where a
\&\fIsubstr()\fR is aliased via a \f(CW\*(C`foreach\*(C'\fR loop or passed as a parameter or
a reference to it is taken and then the alias, parameter, or deref'd
reference either is used after the original \s-1EXPR\s0 has been changed or
is assigned to and then used a second time.
.IP "symlink \s-1OLDFILE\s0,NEWFILE" 8
.IX Item "symlink OLDFILE,NEWFILE"
Creates a new filename symbolically linked to the old filename.
Returns \f(CW1\fR for success, \f(CW0\fR otherwise.  On systems that don't support
symbolic links, produces a fatal error at run time.  To check for that,
use eval:
.Sp
.Vb 1
\&    $symlink_exists = eval { symlink("",""); 1 };
.Ve
.IP "syscall \s-1NUMBER\s0, \s-1LIST\s0" 8
.IX Item "syscall NUMBER, LIST"
Calls the system call specified as the first element of the list,
passing the remaining elements as arguments to the system call.  If
unimplemented, produces a fatal error.  The arguments are interpreted
as follows: if a given argument is numeric, the argument is passed as
an int.  If not, the pointer to the string value is passed.  You are
responsible to make sure a string is pre-extended long enough to
receive any result that might be written into a string.  You can't use a
string literal (or other read-only string) as an argument to \f(CW\*(C`syscall\*(C'\fR
because Perl has to assume that any string pointer might be written
through.  If your
integer arguments are not literals and have never been interpreted in a
numeric context, you may need to add \f(CW0\fR to them to force them to look
like numbers.  This emulates the \f(CW\*(C`syswrite\*(C'\fR function (or vice versa):
.Sp
.Vb 3
\&    require 'syscall.ph';               # may need to run h2ph
\&    $s = "hi there\en";
\&    syscall(&SYS_write, fileno(STDOUT), $s, length $s);
.Ve
.Sp
Note that Perl supports passing of up to only 14 arguments to your system call,
which in practice should usually suffice.
.Sp
Syscall returns whatever value returned by the system call it calls.
If the system call fails, \f(CW\*(C`syscall\*(C'\fR returns \f(CW\*(C`\-1\*(C'\fR and sets \f(CW$!\fR (errno).
Note that some system calls can legitimately return \f(CW\*(C`\-1\*(C'\fR.  The proper
way to handle such calls is to assign \f(CW\*(C`$!=0;\*(C'\fR before the call and
check the value of \f(CW$!\fR if syscall returns \f(CW\*(C`\-1\*(C'\fR.
.Sp
There's a problem with \f(CW\*(C`syscall(&SYS_pipe)\*(C'\fR: it returns the file
number of the read end of the pipe it creates.  There is no way
to retrieve the file number of the other end.  You can avoid this
problem by using \f(CW\*(C`pipe\*(C'\fR instead.
.IP "sysopen \s-1FILEHANDLE\s0,FILENAME,MODE" 8
.IX Item "sysopen FILEHANDLE,FILENAME,MODE"
.PD 0
.IP "sysopen \s-1FILEHANDLE\s0,FILENAME,MODE,PERMS" 8
.IX Item "sysopen FILEHANDLE,FILENAME,MODE,PERMS"
.PD
Opens the file whose filename is given by \s-1FILENAME\s0, and associates it
with \s-1FILEHANDLE\s0.  If \s-1FILEHANDLE\s0 is an expression, its value is used as
the name of the real filehandle wanted.  This function calls the
underlying operating system's \f(CW\*(C`open\*(C'\fR function with the parameters
\&\s-1FILENAME\s0, \s-1MODE\s0, \s-1PERMS\s0.
.Sp
The possible values and flag bits of the \s-1MODE\s0 parameter are
system\-dependent; they are available via the standard module \f(CW\*(C`Fcntl\*(C'\fR.
See the documentation of your operating system's \f(CW\*(C`open\*(C'\fR to see which
values and flag bits are available.  You may combine several flags
using the \f(CW\*(C`|\*(C'\fR\-operator.
.Sp
Some of the most common values are \f(CW\*(C`O_RDONLY\*(C'\fR for opening the file in
read-only mode, \f(CW\*(C`O_WRONLY\*(C'\fR for opening the file in write-only mode,
and \f(CW\*(C`O_RDWR\*(C'\fR for opening the file in read-write mode, and.
.Sp
For historical reasons, some values work on almost every system
supported by perl: zero means read\-only, one means write\-only, and two
means read/write.  We know that these values do \fInot\fR work under
\&\s-1OS/390\s0 & \s-1VM/ESA\s0 Unix and on the Macintosh; you probably don't want to
use them in new code.
.Sp
If the file named by \s-1FILENAME\s0 does not exist and the \f(CW\*(C`open\*(C'\fR call creates
it (typically because \s-1MODE\s0 includes the \f(CW\*(C`O_CREAT\*(C'\fR flag), then the value of
\&\s-1PERMS\s0 specifies the permissions of the newly created file.  If you omit
the \s-1PERMS\s0 argument to \f(CW\*(C`sysopen\*(C'\fR, Perl uses the octal value \f(CW0666\fR.
These permission values need to be in octal, and are modified by your
process's current \f(CW\*(C`umask\*(C'\fR.
.Sp
In many systems the \f(CW\*(C`O_EXCL\*(C'\fR flag is available for opening files in
exclusive mode.  This is \fBnot\fR locking: exclusiveness means here that
if the file already exists, \fIsysopen()\fR fails.  The \f(CW\*(C`O_EXCL\*(C'\fR wins
\&\f(CW\*(C`O_TRUNC\*(C'\fR.
.Sp
Sometimes you may want to truncate an already-existing file: \f(CW\*(C`O_TRUNC\*(C'\fR.
.Sp
You should seldom if ever use \f(CW0644\fR as argument to \f(CW\*(C`sysopen\*(C'\fR, because
that takes away the user's option to have a more permissive umask.
Better to omit it.  See the \fIperlfunc\fR\|(1) entry on \f(CW\*(C`umask\*(C'\fR for more
on this.
.Sp
Note that \f(CW\*(C`sysopen\*(C'\fR depends on the \fIfdopen()\fR C library function.
On many \s-1UNIX\s0 systems, \fIfdopen()\fR is known to fail when file descriptors
exceed a certain value, typically 255. If you need more file
descriptors than that, consider rebuilding Perl to use the \f(CW\*(C`sfio\*(C'\fR
library, or perhaps using the \fIPOSIX::open()\fR function.
.Sp
See perlopentut for a kinder, gentler explanation of opening files.
.IP "sysread \s-1FILEHANDLE\s0,SCALAR,LENGTH,OFFSET" 8
.IX Item "sysread FILEHANDLE,SCALAR,LENGTH,OFFSET"
.PD 0
.IP "sysread \s-1FILEHANDLE\s0,SCALAR,LENGTH" 8
.IX Item "sysread FILEHANDLE,SCALAR,LENGTH"
.PD
Attempts to read \s-1LENGTH\s0 bytes of data into variable \s-1SCALAR\s0 from the
specified \s-1FILEHANDLE\s0, using the system call \fIread\fR\|(2).  It bypasses
buffered \s-1IO\s0, so mixing this with other kinds of reads, \f(CW\*(C`print\*(C'\fR,
\&\f(CW\*(C`write\*(C'\fR, \f(CW\*(C`seek\*(C'\fR, \f(CW\*(C`tell\*(C'\fR, or \f(CW\*(C`eof\*(C'\fR can cause confusion because the
perlio or stdio layers usually buffers data.  Returns the number of
bytes actually read, \f(CW0\fR at end of file, or undef if there was an
error (in the latter case \f(CW$!\fR is also set).  \s-1SCALAR\s0 will be grown or
shrunk so that the last byte actually read is the last byte of the
scalar after the read.
.Sp
An \s-1OFFSET\s0 may be specified to place the read data at some place in the
string other than the beginning.  A negative \s-1OFFSET\s0 specifies
placement at that many characters counting backwards from the end of
the string.  A positive \s-1OFFSET\s0 greater than the length of \s-1SCALAR\s0
results in the string being padded to the required size with \f(CW"\e0"\fR
bytes before the result of the read is appended.
.Sp
There is no \fIsyseof()\fR function, which is ok, since \fIeof()\fR doesn't work
very well on device files (like ttys) anyway.  Use \fIsysread()\fR and check
for a return value for 0 to decide whether you're done.