                .audience("https://localhost:4567")
                .expirationTime(Date.from(token.expiry));
        token.attributes.forEach(claimsBuilder::claim);
        var header = new JWEHeader(JWEAlgorithm.DIR, 
              EncryptionMethod.A128CBC_HS256);
        var jwt = new EncryptedJWT(header, claimsBuilder.build());
        try {
            var encryptor = new DirectEncrypter(encKey);
            jwt.encrypt(encryptor);
        } catch (JOSEException e) {
            throw new RuntimeException(e);
        }
        return jwt.serialize();
    }
To revoke a JWT, you then simply delete it from the database token store, as shown in
listing 6.11. Parse and decrypt the JWT as before, which will validate the authentica-
tion tag, and then extract the JWT ID and revoke it from the database. This will
remove the corresponding record from the database. While you still have the Jwt-
TokenStore.java open in your editor, add the implementation of the revoke method
from the listing.
@Override
public void revoke(Request request, String tokenId) {
    try {
        var jwt = EncryptedJWT.parse(tokenId);         
        var decryptor = new DirectDecrypter(encKey);   
        jwt.decrypt(decryptor);                        
        var claims = jwt.getJWTClaimsSet();            
        tokenAllowlist.revoke(request, claims.getJWTID());     
    } catch (ParseException | JOSEException e) {
        throw new IllegalArgumentException("invalid token", e);
    }
}
The final part of the solution is to check that the allowlist token hasn’t been revoked
when reading a JWT token. As before, parse and decrypt the JWT using the decryption
Listing 6.11
Revoking a JWT in the database allowlist
Save a copy of
the token in the
database but
remove all the
attributes to
save space.
Save the
database token
ID in the JWT
as the JWT ID
claim.
Parse, decrypt, 
and validate the 
JWT using the 
decryption key.
Extract the JWT ID 
and revoke it from 
the Database-
TokenStore 
allowlist.
213
Summary
key. Then extract the JWT ID and perform a lookup in the DatabaseTokenStore. If
the entry exists in the database, then the token is still valid, and you can continue vali-
dating the other JWT claims as before. But if the database returns an empty result,
then the token has been revoked and so it is invalid. Update the read() method in
JwtTokenStore.java to implement this addition check, as shown in listing 6.12. If you
moved some attributes into the database, then you could also copy them to the token
result in this case.
    var jwt = EncryptedJWT.parse(tokenId);          
    var decryptor = new DirectDecrypter(encKey);    
    jwt.decrypt(decryptor);                         
    var claims = jwt.getJWTClaimsSet();
    var jwtId = claims.getJWTID();                         
    if (tokenAllowlist.read(request, jwtId).isEmpty()) {   
        return Optional.empty();    
    }
    // Validate other JWT claims
Answers to pop quiz questions
1
a and b. HMAC prevents an attacker from creating bogus authentication tokens
(spoofing) or tampering with existing ones.
2
e. The aud (audience) claim lists the servers that a JWT is intended to be used
by. It is crucial that your API rejects any JWT that isn’t intended for that service.
3
False. The algorithm header can’t be trusted and should be ignored. You should
associate the algorithm with each key instead.
4
a, b, and d. Authenticated encryption includes a MAC so protects against spoof-
ing and tampering threats just like HMAC. In addition, these algorithms pro-
tect confidential data from information disclosure threats.
5
d. The IV (or nonce) ensures that every ciphertext is different.
6
True. IVs should be randomly generated. Although some algorithms allow a
simple counter, these are very hard to synchronize between API servers and
reuse can be catastrophic to security.
Summary
 Token state can be stored on the client by encoding it in JSON and applying
HMAC authentication to prevent tampering.
 Sensitive token attributes can be protected with encryption, and efficient authen-
ticated encryption algorithms can remove the need for a separate HMAC step.
 The JWT and JOSE specifications provide a standard format for authenticated
and encrypted tokens but have historically been vulnerable to several serious
attacks. 
Listing 6.12
Checking if a JWT has been revoked
Parse and decrypt 
the JWT.
Check if the JWT ID 
still exists in the 
database allowlist.
If not, then the token is invalid; 
otherwise, proceed with 
validating other JWT claims.
214
CHAPTER 6
Self-contained tokens and JWTs
 When used carefully, JWT can be an effective part of your API authentication
strategy but you should avoid the more error-prone parts of the standard.
 Revocation of stateless JWTs can be achieved by maintaining an allowlist or
blocklist of tokens in the database. An allowlisting strategy is a secure default
offering advantages over both pure stateless tokens and unauthenticated data-
base tokens.
Part 3
Authorization
Now that you know how to identify the users of your APIs, you need to
decide what they should do. In this part, you’ll take a deep dive into authoriza-
tion techniques for making those crucial access control decisions. 
 Chapter 7 starts by taking a look at delegated authorization with OAuth2. In
this chapter, you’ll learn the difference between discretionary and mandatory
access control and how to protect APIs with OAuth2 scopes.
 Chapter 8 looks at approaches to access control based on the identity of the
user accessing an API. The techniques in this chapter provide more flexible
alternatives to the access control lists developed in chapter 3. Role-based access
control groups permissions into logical roles to simplify access management,
while attribute-based access control uses powerful rule-based policy engines to
enforce complex policies.
 Chapter 9 discusses a completely different approach to access control, in
which the identity of the user plays no part in what they can access. Capability-
based access control is based on individual keys with fine-grained permissions.
In this chapter, you’ll see how a capability-based model fits with RESTful API
design principles and examine the trade-offs compared to other authorization
approaches. You’ll also learn about macaroons, an exciting new token format
that allows broadly-scoped access tokens to be converted on-the-fly into more
restricted capabilities with some unique abilities.
217
OAuth2 and
OpenID Connect
In the last few chapters, you’ve implemented user authentication methods that are
suitable for the Natter UI and your own desktop and mobile apps. Increasingly,
APIs are being opened to third-party apps and clients from other businesses and
organizations. Natter is no different, and your newly appointed CEO has decided
that you can boost growth by encouraging an ecosystem of Natter API clients and
services. In this chapter, you’ll integrate an OAuth2 Authorization Server (AS) to
allow your users to delegate access to third-party clients. By using scoped tokens,
users can restrict which parts of the API those clients can access. Finally, you’ll see
how OAuth provides a standard way to centralize token-based authentication within
This chapter covers
 Enabling third-party access to your API with 
scoped tokens
 Integrating an OAuth2 Authorization Server for 
delegated authorization
 Validating OAuth2 access tokens with token 
introspection
 Implementing single sign-on with OAuth and 
OpenID Connect
218
CHAPTER 7
OAuth2 and OpenID Connect
your organization to achieve single sign-on across different APIs and services. The
OpenID Connect standard builds on top of OAuth2 to provide a more complete authen-
tication framework when you need finer control over how a user is authenticated.
 In this chapter, you’ll learn how to obtain a token from an AS to access an API, and
how to validate those tokens in your API, using the Natter API as an example. You
won’t learn how to write your own AS, because this is beyond the scope of this book.
Using OAuth2 to authorize service-to-service calls is covered in chapter 11.
LEARN ABOUT IT
See OAuth2 in Action by Justin Richer and Antonio Sanso
(Manning, 2017; https://www.manning.com/books/oauth-2-in-action) if you
want to learn how an AS works in detail. 
Because all the mechanisms described in this chapter are standards, the patterns will
work with any standards-compliant AS with few changes. See appendix A for details of
how to install and configure an AS for use in this chapter.
7.1
Scoped tokens
In the bad old days, if you wanted to use a third-party app or service to access your
email or bank account, you had little choice but to give them your username and pass-
word and hope they didn’t misuse them. Unfortunately, some services did misuse
those credentials. Even the ones that were trustworthy would have to store your pass-
word in a recoverable form to be able to use it, making potential compromise much
more likely, as you learned in chapter 3. Token-based authentication provides a solu-
tion to this problem by allowing you to generate a long-lived token that you can give
to the third-party service instead of your password. The service can then use the token
to act on your behalf. When you stop using the service, you can revoke the token to
prevent any further access.
 Though using a token means that you don’t need to give the third-party your pass-
word, the tokens you’ve used so far still grant full access to APIs as if you were perform-
ing actions yourself. The third-party service can use the token to do anything that you
can do. But you may not trust a third-party to have full access, and only want to grant
them partial access. When I ran my own business, I briefly used a third-party service to
read transactions from my business bank account and import them into the accounting
software I used. Although that service needed only read access to recent transactions, in
practice it had full access to my account and could have transferred funds, cancelled
payments, and performed many other actions. I stopped using the service and went
back to manually entering transactions because the risk was too great.1
 The solution to these issues is to restrict the API operations that can be performed
with a token, allowing it to be used only within a well-defined scope. For example, you
might let your accounting software read transactions that have occurred within the
1 In some countries, banks are being required to provide secure API access to transactions and payment services
to third-party apps and services. The UK’s Open Banking initiative and the European Payment Services Direc-
tive 2 (PSD2) regulations are examples, both of which mandate the use of OAuth2.
219
Scoped tokens
last 30 days, but not let it view or create new payments on the account. The scope of
the access you’ve granted to the accounting software is therefore limited to read-only
access to recent transactions. Typically, the scope of a token is represented as one or
more string labels stored as an attribute of the token. For example, you might use the
scope label transactions:read to allow read-access to transactions, and payment
:create to allow setting up a new payment from an account. Because there may be
more than one scope label associated with a token, they are often referred to as
scopes. The scopes (labels) of a token collectively define the scope of access it grants.
Figure 7.1 shows some of the scope labels available when creating a personal access
token on GitHub.
DEFINITION
A scoped token limits the operations that can be performed with
that token. The set of operations that are allowed is known as the scope of the
token. The scope of a token is specified by one or more scope labels, which
are often referred to collectively as scopes.
Scopes control access to
different sections of the API.
The user can add a note
to remember why they
created this token.
GitHub supports hierarchical
scopes, allowing the user to
easily grant related scopes.
Figure 7.1
GitHub allows users to manually create scoped tokens, which they call 
personal access tokens. The tokens never expire but can be restricted to only allow 
access to parts of the GitHub API by setting the scope of the token.
220
CHAPTER 7
OAuth2 and OpenID Connect
7.1.1
Adding scoped tokens to Natter
Adapting the existing login endpoint to issue scoped tokens is very simple, as shown in
listing 7.1. When a login request is received, if it contains a scope parameter then you
can associate that scope with the token by storing it in the token attributes. You can
define a default set of scopes to grant if the scope parameter is not specified. Open
the TokenController.java file in your editor and update the login method to add sup-
port for scoped tokens, as in listing 7.1. At the top of the file, add a new constant list-
ing all the scopes. In Natter, you’ll use scopes corresponding to each API operation:
private static final String DEFAULT_SCOPES =
    "create_space post_message read_message list_messages " +
  "delete_message add_member";
WARNING
There is a potential privilege escalation issue to be aware of in this
code. A client that is given a scoped token can call this endpoint to exchange
it for one with more scopes. You’ll fix that shortly by adding a new access con-
trol rule for the login endpoint to prevent this.
public JSONObject login(Request request, Response response) {
    String subject = request.attribute("subject");
    var expiry = Instant.now().plus(10, ChronoUnit.MINUTES);
    var token = new TokenStore.Token(expiry, subject);
    var scope = request.queryParamOrDefault("scope", DEFAULT_SCOPES);   
    token.attributes.put("scope", scope);                               
    var tokenId = tokenStore.create(request, token);
    response.status(201);
    return new JSONObject()
            .put("token", tokenId);
}
To enforce the scope restrictions on a token, you can add a new access control filter
that ensures that the token used to authorize a request to the API has the required
scope for the operation being performed. This filter looks a lot like the existing per-
mission filter that you added in chapter 3 and is shown in listing 7.2. (I’ll discuss the
differences between scopes and permissions in the next section.) To verify the scope,
you need to perform several checks:
 First, check if the HTTP method of the request matches the method that this
rule is for, so that you don’t apply a scope for a POST request to a DELETE
request or vice versa. This is needed because Spark’s filters are matched only by
the path and not the request method. 
 You can then look up the scope associated with the token that authorized the
current request from the scope attribute of the request. This works because
Listing 7.1
Issuing scoped tokens
Store the scope in the token
attributes, defaulting to all
scopes if not specified.
221
Scoped tokens
the token validation code you wrote in chapter 4 copies any attributes from the
token into the request, so the scope attribute will be copied across too. 
 If there is no scope attribute, then the user directly authenticated the request
with Basic authentication. In this case, you can skip the scope check and let the
request proceed. Any client with access to the user’s password would be able to
issue themselves a token with any scope.
 Finally, you can verify that the scope of the token matches the required scope
for this request, and if it doesn’t, then you should return a 403 Forbidden error.
The Bearer authentication scheme has a dedicated error code insufficient_
scope to indicate that the caller needs a token with a different scope, so you can
indicate that in the WWW-Authenticate header.
Open TokenController.java in your editor again and add the requireScope method
from the listing.
public Filter requireScope(String method, String requiredScope) {
    return (request, response) -> {
        if (!method.equalsIgnoreCase(request.requestMethod()))    
            return;                                               
        var tokenScope = request.attribute("scope");     
        if (tokenScope == null) return;                          
        if (!Set.of(tokenScope.split(" "))                       
                .contains(requiredScope)) {                      
            response.header("WWW-Authenticate",                  
                    "Bearer error=\"insufficient_scope\"," +     
                            "scope=\"" + requiredScope + "\"");  
            halt(403);                                           
        }
    };
}
You can now use this method to enforce which scope is required to perform certain
operations, as shown in listing 7.3. Deciding what scopes should be used by your API,
and exactly which scope should be required for which operations is a complex topic,
discussed in more detail in the next section. For this example, you can use fine-
grained scopes corresponding to each API operation: create_space, post_message, and
so on. To avoid privilege escalation, you should require a specific scope to call the
login endpoint, because this can be used to obtain a token with any scope, effectively
bypassing the scope checks.2 On the other hand, revoking a token by calling the logout
Listing 7.2
Checking required scopes
2 An alternative way to eliminate this risk is to ensure that any newly issued token contains only scopes that are
in the token used to call the login endpoint. I’ll leave this as an exercise.
If the HTTP method doesn’t
match, then ignore this rule.
If the token
is unscoped,
then allow all
operations.
If the token scope 
doesn’t contain 
the required 
scope, then return 
a 403 Forbidden 
response.
222
CHAPTER 7
OAuth2 and OpenID Connect
endpoint should not require any scope. Open the Main.java file in your editor and
add scope checks using the tokenController.requireScope method as shown in list-
ing 7.3.
before("/sessions", userController::requireAuthentication);
before("/sessions",                                             
        tokenController.requireScope("POST", "full_access"));   
post("/sessions", tokenController::login);
delete("/sessions", tokenController::logout);                 
before("/spaces", userController::requireAuthentication);
before("/spaces",                                                  
        tokenController.requireScope("POST", "create_space"));     
post("/spaces", spaceController::createSpace);
before("/spaces/*/messages",                                       
        tokenController.requireScope("POST", "post_message"));     
before("/spaces/:spaceId/messages",
        userController.requirePermission("POST", "w"));
post("/spaces/:spaceId/messages", spaceController::postMessage);
before("/spaces/*/messages/*",                                     
        tokenController.requireScope("GET", "read_message"));      
before("/spaces/:spaceId/messages/*",
        userController.requirePermission("GET", "r"));
get("/spaces/:spaceId/messages/:msgId",
    spaceController::readMessage);
before("/spaces/*/messages",                                       
        tokenController.requireScope("GET", "list_messages"));     
before("/spaces/:spaceId/messages",
        userController.requirePermission("GET", "r"));
get("/spaces/:spaceId/messages", spaceController::findMessages);
before("/spaces/*/members",                                        
        tokenController.requireScope("POST", "add_member"));       
before("/spaces/:spaceId/members",
        userController.requirePermission("POST", "rwd"));
post("/spaces/:spaceId/members", spaceController::addMember);
before("/spaces/*/messages/*",                                     
        tokenController.requireScope("DELETE", "delete_message")); 
before("/spaces/:spaceId/messages/*",
        userController.requirePermission("DELETE", "d"));
delete("/spaces/:spaceId/messages/:msgId",
    moderatorController::deletePost);
Listing 7.3
Enforcing scopes for operations
Ensure that obtaining a scoped token 
itself requires a restricted scope.
Revoking a token 
should not require 
any scope.