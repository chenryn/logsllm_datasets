---
author: Kylewbanks
category: 软件开发
comments_data:
- date: '2019-01-07 12:56:37'
  message: 在macOS High Sierra上需要移动一下窗口才能看见三角形
  postip: 101.44.2.90
  username: 来自上海的 Chrome 71.0|Mac 10.14 用户
- date: '2019-04-15 15:14:35'
  message: "go . opengl&nbsp; &nbsp;绘制点 线&nbsp; &nbsp;是这样写的&nbsp; &nbsp; &nbsp; &nbsp;
    gl.COLOR = 0xff0000\r\n&nbsp; &nbsp; &nbsp; &nbsp; gl.COLOR_ATTACHMENT3(1.0,
    0.0, 0.0)\r\n&nbsp; &nbsp; &nbsp; &nbsp; gl.BeginConditionalRender(aa, gl.POINTS)\r\n&nbsp; &nbsp; &nbsp; &nbsp; gl.VertexAttrib2f(0, 0.0, 0.0)\r\n&nbsp;
    &nbsp; &nbsp; &nbsp; gl.VertexAttrib2f(0, 0.1, 0.1)\r\n&nbsp; &nbsp; &nbsp;
    &nbsp; gl.VertexAttrib2f(0, 0.1, 0.2)\r\n&nbsp; &nbsp; &nbsp; &nbsp; gl.VertexAttrib2f(0,
    0.1, 0.3)\r\n&nbsp; &nbsp; &nbsp; &nbsp; gl.VertexAttrib2f(0, 0.1, 0.4)\r\n&nbsp; &nbsp; &nbsp; &nbsp; gl.EndConditionalRender()\r\n&nbsp; &nbsp;
    &nbsp; &nbsp; gl.Flush()"
  postip: 114.244.2.205
  username: 来自北京的 Chrome 73.0|Mac 10.13 用户
- date: '2022-04-07 18:07:02'
  message: 这是固定管线的写法。4.1的可编程管线，要用VBO传入顶点数据！
  postip: 183.14.29.152
  username: 来自广东深圳的 Chrome 100.0|Windows 10 用户
count:
  commentnum: 3
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 21833
date: '2017-10-05 21:27:00'
editorchoice: false
excerpt: 这个教程的目的是给你一个切入点，让你对 OpenGL 有个基本的了解，然后教你怎么用 Go 操作它。我们最终的目标是用 OpenGL 在桌面窗口绘制游戏面板，进而实现康威生命游戏。
fromurl: https://kylewbanks.com/blog/tutorial-opengl-with-golang-part-1-hello-opengl
id: 8933
islctt: true
largepic: /data/attachment/album/201710/05/212715clrssdrurc8nnras.jpg
permalink: /article-8933-1.html
pic: /data/attachment/album/201710/05/212715clrssdrurc8nnras.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 8937
reviewer: ''
selector: ''
summary: 这个教程的目的是给你一个切入点，让你对 OpenGL 有个基本的了解，然后教你怎么用 Go 操作它。我们最终的目标是用 OpenGL 在桌面窗口绘制游戏面板，进而实现康威生命游戏。
tags:
- OpenGL
thumb: false
title: OpenGL 与 Go 教程（一）Hello, OpenGL
titlepic: true
translator: BriFuture
updated: '2017-10-05 21:27:00'
---
![](/data/attachment/album/201710/05/212715clrssdrurc8nnras.jpg)
* [第一节: Hello, OpenGL](/article-8933-1.html)
* [第二节: 绘制游戏面板](/article-8937-1.html)
* [第三节：实现游戏功能](/article-8969-1.html)
这篇教程的所有源代码都可以在 [GitHub](https://github.com/KyleBanks/conways-gol) 上找到。
### 介绍
[OpenGL](https://www.opengl.org/) 是一门相当好的技术，适用于从桌面的 GUI 到游戏，到移动应用甚至 web 应用的多种类型的绘图工作。我敢保证，你今天看到的图形有些就是用 OpenGL 渲染的。可是，不管 OpenGL 多受欢迎、有多好用，与学习其它高级绘图库相比，学习 OpenGL 是要相当足够的决心的。
这个教程的目的是给你一个切入点，让你对 OpenGL 有个基本的了解，然后教你怎么用 [Go](https://golang.org/) 操作它。几乎每种编程语言都有绑定 OpenGL 的库，Go 也不例外，它有 [go-gl](https://github.com/go-gl/gl) 这个包。这是一个完整的套件，可以绑定 OpenGL ，适用于多种版本的 OpenGL。
这篇教程会按照下面列出的几个阶段进行介绍，我们最终的目标是用 OpenGL 在桌面窗口绘制游戏面板，进而实现[康威生命游戏](https://en.wikipedia.org/wiki/Conway's_Game_of_Life)。完整的源代码可以在 GitHub [github.com/KyleBanks/conways-gol](https://github.com/KyleBanks/conways-gol) 上获得，当你有疑惑的时候可以随时查看源代码，或者你要按照自己的方式学习也可以参考这个代码。
在我们开始之前，我们要先弄明白 康威生命游戏   Conway's Game of Life  到底是什么。这里是 [Wikipedia](https://en.wikipedia.org/wiki/Conway's_Game_of_Life) 上面的总结：
> 
> 《生命游戏》，也可以简称为 Life，是一个细胞自动变化的过程，由英国数学家 John Horton Conway 于 1970 年提出。
> 
> 
> 这个“游戏”没有玩家，也就是说它的发展依靠的是它的初始状态，不需要输入。用户通过创建初始配置文件、观察它如何演变，或者对于高级“玩家”可以创建特殊属性的模式，进而与《生命游戏》进行交互。
> 
> 
> `规则`
> 
> 
> 《生命游戏》的世界是一个无穷多的二维正交的正方形细胞的格子世界，每一个格子都有两种可能的状态，“存活”或者“死亡”，也可以说是“填充态”或“未填充态”（区别可能很小，可以把它看作一个模拟人类/哺乳动物行为的早期模型，这要看一个人是如何看待方格里的空白）。每一个细胞与它周围的八个细胞相关联，这八个细胞分别是水平、垂直、斜对角相接的。在游戏中的每一步，下列事情中的一件将会发生：
> 
> 
> 1. 当任何一个存活的细胞的附近少于 2 个存活的细胞时，该细胞将会消亡，就像人口过少所导致的结果一样
> 2. 当任何一个存活的细胞的附近有 2 至 3 个存活的细胞时，该细胞在下一代中仍然存活。
> 3. 当任何一个存活的细胞的附近多于 3 个存活的细胞时，该细胞将会消亡，就像人口过多所导致的结果一样
> 4. 任何一个消亡的细胞附近刚好有 3 个存活的细胞，该细胞会变为存活的状态，就像重生一样。
> 
> 
> 
不需要其他工具，这里有一个我们将会制作的演示程序：
![Conway's Game of Life - 示例游戏](/data/attachment/album/201710/05/212729obh007mah3d02noh.gif)
在我们的运行过程中，白色的细胞表示它是存活着的，黑色的细胞表示它已经死亡。
### 概述
本教程将会涉及到很多基础内容，从最基本的开始，但是你还是要对 Go 由一些最基本的了解 —— 至少你应该知道变量、切片、函数和结构体，并且装了一个 Go 的运行环境。我写这篇教程用的 Go 版本是 1.8，但它应该与之前的版本兼容。这里用 Go 语言实现没有什么特别新奇的东西，因此只要你有过类似的编程经历就行。
这里是我们在这个教程里将会讲到的东西：
* [第一节: Hello, OpenGL](https://kylewbanks.com/blog/tutorial-opengl-with-golang-part-1-hello-opengl)： 安装 OpenGL 和 [GLFW](http://www.glfw.org/)，在窗口上绘制一个三角形。
* [第二节: 绘制游戏面板](https://kylewbanks.com/blog/tutorial-opengl-with-golang-part-2-drawing-the-game-board)： 用三角形拼成方形，在窗口上用方形绘成格子。
* [第三节: 实现游戏功能](https://kylewbanks.com/blog/blog/tutorial-opengl-with-golang-part-3-implementing-the-game)： 实现 Conway 游戏
最后的源代码可以在 [GitHub](https://github.com/KyleBanks/conways-gol) 上获得，每一节的末尾有个*回顾*，包含该节相关的代码。如果有什么不清楚的地方或者是你感到疑惑的，看看每一节末尾的完整代码。
现在就开始吧！
### 安装 OpenGL 和 GLFW
我们介绍过 OpenGL，但是为了使用它，我们要有个窗口可以绘制东西。 [GLFW](http://www.glfw.org/) 是一款用于 OpenGL 的跨平台 API，允许我们创建并使用窗口，而且它也是 [go-gl](https://github.com/go-gl/glfw) 套件中提供的。
我们要做的第一件事就是确定 OpenGL 的版本。为了方便本教程，我们将会使用 `OpenGL v4.1`，但要是你的操作系统不支持最新的 OpenGL，你也可以用 `v2.1`。要安装 OpenGL，我们需要做这些事：
```
# 对于 OpenGL 4.1
$ go get github.com/go-gl/gl/v4.1-core/gl
# 或者 2.1
$ go get github.com/go-gl/gl/v2.1/gl
```
然后是安装 GLFW：
```
$ go get github.com/go-gl/glfw/v3.2/glfw
```
安装好这两个包之后，我们就可以开始了！先创建 `main.go` 文件，导入相应的包（我们待会儿会用到的其它东西）。
```
package main
import (
    "log"
    "runtime"
    "github.com/go-gl/gl/v4.1-core/gl" // OR: github.com/go-gl/gl/v2.1/gl
    "github.com/go-gl/glfw/v3.2/glfw"
)
```
接下来定义一个叫做 `main` 的函数，这是用来初始化 OpenGL 以及 GLFW，并显示窗口的：
```
const (
    width  = 500
    height = 500
)
func main() {
    runtime.LockOSThread()
    window := initGlfw()
    defer glfw.Terminate()
    for !window.ShouldClose() {
        // TODO
    }
}
// initGlfw 初始化 glfw 并且返回一个可用的窗口。
func initGlfw() *glfw.Window {
    if err := glfw.Init(); err != nil {
            panic(err)
    }
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.WindowHint(glfw.ContextVersionMajor, 4) // OR 2
    glfw.WindowHint(glfw.ContextVersionMinor, 1)
    glfw.WindowHint(glfw.OpenGLProfile, glfw.OpenGLCoreProfile)
    glfw.WindowHint(glfw.OpenGLForwardCompatible, glfw.True)
    window, err := glfw.CreateWindow(width, height, "Conway's Game of Life", nil, nil)
    if err != nil {
            panic(err)
    }
    window.MakeContextCurrent()
    return window
}
```
好了，让我们花一分钟来运行一下这个程序，看看会发生什么。首先定义了一些常量， `width` 和 `height` —— 它们决定窗口的像素大小。
然后就是 `main` 函数。这里我们使用了 `runtime` 包的 `LockOSThread()`，这能确保我们总是在操作系统的同一个线程中运行代码，这对 GLFW 来说很重要，GLFW 需要在其被初始化之后的线程里被调用。讲完这个，接下来我们调用 `initGlfw` 来获得一个窗口的引用，并且推迟（`defer`）其终止。窗口的引用会被用在一个 `for` 循环中，只要窗口处于打开的状态，就执行某些事情。我们待会儿会讲要做的事情是什么。
`initGlfw` 是另一个函数，这里我们调用 `glfw.Init()` 来初始化 GLFW 包。然后我们定义了 GLFW 的一些全局属性，包括禁用调整窗口大小和改变 OpenGL 的属性。然后创建了 `glfw.Window`，这会在稍后的绘图中用到。我们仅仅告诉它我们想要的宽度和高度，以及标题，然后调用 `window.MakeContextCurrent`，将窗口绑定到当前的线程中。最后就是返回窗口的引用了。