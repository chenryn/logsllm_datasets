         * classMap：类信息集合
         * inheritanceMap：继承、实现关系集合
         * sortedMethods：⽅法集合
         * SerializableDecider：决策者
         */
  passthroughDataflow = calculatePassthroughDataflow(classResourceByName, 
classMap, inheritanceMap, sortedMethods,
config.getSerializableDecider(methodMap, inheritanceMap));
}
    private Map 
discoverMethodCalls(final ClassResourceEnumerator classResourceEnumerator) 
throws IOException {
        Map 
classResourcesByName = new HashMap<>();
        for (ClassResourceEnumerator.ClassResource classResource : 
classResourceEnumerator.getAllClasses()) {
            try (InputStream in = classResource.getInputStream()) {
                ClassReader cr = new ClassReader(in);
                try {
                    MethodCallDiscoveryClassVisitor visitor = new 
MethodCallDiscoveryClassVisitor(Opcodes.ASM6);
                    cr.accept(visitor, ClassReader.EXPAND_FRAMES);
                    classResourcesByName.put(visitor.getName(), 
classResource);
                } catch (Exception e) {
                    LOGGER.error("Error analyzing: " + 
classResource.getName(), e);
                }
            }
        }
        return classResourcesByName;
    }
很相似直接跟进MethodCallDiscoveryClassVisitor，其中重要的
是 gadgetinspector.PassthroughDiscovery.MethodCallDiscoveryClassVisitor#v
isitMethod
在MethodCallDiscoveryMethodVisitor内重写了MethodCallDiscoveryMethodVisitor的
visitMethodInsn⽅法，也就是在⽅法内调⽤其他⽅法时，会把⽅法的相关信息缓存到
calledMethods
并且这个calledMethods之前在MethodCallDiscoveryMethodVisitor的初始化构造函数当中将
calledMethods的引⽤也放到了类的成员变量methodCalls当中
public MethodVisitor visitMethod(int access, String name, String desc,
                                 String signature, String[] exceptions) {
  MethodVisitor mv = super.visitMethod(access, name, desc, signature, 
exceptions);
  //在visit每个method的时候，创建MethodVisitor对method进⾏观察
  MethodCallDiscoveryMethodVisitor modelGeneratorMethodVisitor = new 
MethodCallDiscoveryMethodVisitor(
    api, mv, this.name, name, desc);
  return new JSRInlinerAdapter(modelGeneratorMethodVisitor, access, name, 
desc, signature, exceptions);
}
public MethodCallDiscoveryMethodVisitor(final int api, final MethodVisitor 
mv,
                                        final String owner, String name, 
String desc) {
  super(api, mv);
  //创建calledMethod收集调⽤到的method，最后形成集合
{{sourceClass,sourceMethod}:[{targetClass,targetMethod}]}
  this.calledMethods = new HashSet<>();
  methodCalls.put(new MethodReference.Handle(new 
ClassReference.Handle(owner), name, desc), calledMethods);
}
接下来就是最重要的逆拓扑排序topologicallySortMethodCalls，这个步骤对于我们之后污点跟
踪⾮常重要，可以看看知道创宇404的⽂章⾮常好，这⾥为了⽂章清晰将直接复制相关部分
在代码当中，⾸先有三个重要的变量
dfsStack：⽤来分析⽅法调⽤顺序，保证在逆拓扑时候不形成环
visitedNodes：访问过的结点，在⼀条调⽤链出现重合的时候，不会造成重复的排序
sortedMethods：最终逆拓扑排序出来的结果
接下来我们详细看看dfsTsort，可以看到是⼀个递归的过程
private List topologicallySortMethodCalls() {
  Map> 
outgoingReferences = new HashMap<>();
  for (Map.Entry> 
entry : methodCalls.entrySet()) {
    MethodReference.Handle method = entry.getKey();
    outgoingReferences.put(method, new HashSet<>(entry.getValue()));
  }
  // Topological sort methods
  LOGGER.debug("Performing topological sort...");
  Set dfsStack = new HashSet<>();
  Set visitedNodes = new HashSet<>();
  List sortedMethods = new ArrayList<>
(outgoingReferences.size());
  for (MethodReference.Handle root : outgoingReferences.keySet()) {
    //遍历集合中的起始⽅法，进⾏递归搜索DFS，通过逆拓扑排序，调⽤链的最末端排在最前⾯，
    // 这样才能实现⼊参、返回值、函数调⽤链之间的污点影响
    dfsTsort(outgoingReferences, sortedMethods, visitedNodes, dfsStack, 
root);
  }
  LOGGER.debug(String.format("Outgoing references %d, sortedMethods %d", 
outgoingReferences.size(), sortedMethods.size()));
  return sortedMethods;
}
为了防⽌在逆拓扑排序形成环，对于待分析的⽅法，如果在stack⾥⾯，则不再⼊栈了，如果
之前已经分析过某⽅法，也不会再⼊栈，之后取出被调⽤的⼦⽅法集，遍历这个⼦⽅法集递
归调⽤dfsTsort，最后将结果保存到sortedMethods
⽐较形象的过程看创宇⾥的图，配合理解代码就不难了
private static void dfsTsort(Map> outgoingReferences,
                             List sortedMethods, 
Set visitedNodes,
                             Set stack, 
MethodReference.Handle node) {
  if (stack.contains(node)) {
    return;
  }
  if (visitedNodes.contains(node)) {
    return;
  }
  //根据起始⽅法，取出被调⽤的⽅法集
  Set outgoingRefs = outgoingReferences.get(node);
  if (outgoingRefs == null) {
    return;
  }
  //⼊栈，以便于递归不造成类似循环引⽤的死循环整合
  stack.add(node);
  for (MethodReference.Handle child : outgoingRefs) {
    dfsTsort(outgoingReferences, sortedMethods, visitedNodes, stack, 
child);
  }
  stack.remove(node);
  visitedNodes.add(node);//记录已被探索过的⽅法，⽤于在上层调⽤遇到重复⽅法时可以跳
过
  sortedMethods.add(node);//递归完成的探索，会添加进来
}
对上图进⾏逆拓扑排序（DFS⽅式）：
从med1开始，先将med1加⼊stack中，此时stack、visited、sortedmethods状态如下：
med1还有⼦⽅法？有，继续深度遍历。将med2放⼊stack，此时的状态：
med3有⼦⽅法吗？有，继续深度遍历。将med7放⼊stack，此时的状态：
med7有⼦⽅法吗？没有，从stack中弹出med7并加⼊visited和sortedmethods，此时的状态：
回溯到上⼀层，med3还有其他⼦⽅法吗？有，med8，将med8放⼊stack，此时的状态：
med8还有⼦⽅法吗？没有，弹出stack，加⼊visited与sortedmethods，此时的状态：
回溯到上⼀层，med3还有其他⼦⽅法吗？没有了，弹出stack，加⼊visited与sortedmethods，此
时的状态：
⼀直类似上⾯的过程，得到最终结果：med7、med8、med3、med6、med2、med4、med1
之后的过程就是调⽤calculatePassthroughDataflow，其中遍历了sortedmethods，并通过字节码
分析，⽣成了⽅法返回值与参数关系的passthrough数据流(passthroughDataflow主要负责存储参
数污染结果，key对应⽅法名，value对应的是这个⽅法中可以被污染的参数索引集合)，内置
了三种反序列化的策略配置config类：JDK、Jackson、Xstream，这⾥我只分析默认的JDK反序
列化，其他过程都是类似的，继续回到正题
，ok还是为了减少⼲扰，我又在函数逻辑稍作修改，因为上⽂提到过我们跟踪的代码是
package yyds;
import java.io.IOException;
public class Main {
    public String main(String args) throws IOException {
        String cmd = new A().method1(args);
        return new B().method2(cmd);
    }
}
class A {
    public String method1(String param) {
        return param;
    }
}
class B {
    public String method2(String param) {
        return new C().method3(param);
    }
}
class C {
    public String method3(String param) {
        return param;
    }
}
⾁眼可得与构造函数⽆关，接下来我们具体看看函数 calculatePassthroughDataflow 做
了些什么
根据代码逻辑我们可以看出⾸先会跳过静态初始化代码(因为静态代码块不出意外基本上是没
法被污染的)
接下来在遍历的每个⽅法时，会先获取它的所属类，传⼊函
数 PassthroughDataflowClassVisitor 进⾏ASM访问者模式的分析，这⾥我们依然重点
关注的是visitMethod函数，这⾥⾸先需要⽬标是需要观察的method，否则跳过
之后会传⼊ PassthroughDataflowMethodVisitor 做进⼀步的处理，
在 JSRInlinerAdapter 的最后执⾏ visitEnd 会触发这个观察过程，猜测这样做的⽬的是
便于筛选，便于观察⽬的类
那么我们来具体看看这个 PassthroughDataflowMethodVisitor 类，⾸先它是继承于⽗
类 TaintTrackingMethodVisitor ,⾸先是 visitCode 函数，很简单就是为了模拟本地变
量表和操作数栈的变化
  public void visitCode() {
    super.visitCode();
    int localIndex = 0;
    int argIndex = 0;
    if ((this.access & Opcodes.ACC_STATIC) == 0) {
      //⾮静态⽅法，第⼀个局部变量应该为对象实例this
      //添加到本地变量表集合
      setLocalTaint(localIndex, argIndex);
      localIndex += 1;
之后的visitInsn⽅法(每当访问⽆操作数的指令，例如nop，duo等等，ASM都会调⽤这个⽅
法，这⾥我们只需要关注返回值的部分lol)
      argIndex += 1;
    }
    for (Type argType : Type.getArgumentTypes(desc)) {
      //判断参数类型，得出变量占⽤空间⼤⼩，然后存储
      setLocalTaint(localIndex, argIndex);
      localIndex += argType.getSize();
      argIndex += 1;
    }
  }
        @Override
        public void visitInsn(int opcode) {
            switch(opcode) {
                case Opcodes.IRETURN://从当前⽅法返回int
                case Opcodes.FRETURN://从当前⽅法返回float
                case Opcodes.ARETURN://从当前⽅法返回对象引⽤
                    returnTaint.addAll(getStackTaint(0));//栈空间从内存⾼位到
低位分配空间
                    break;
                case Opcodes.LRETURN://从当前⽅法返回long
                case Opcodes.DRETURN://从当前⽅法返回double
                    returnTaint.addAll(getStackTaint(1));
                    break;
                case Opcodes.RETURN://从当前⽅法返回void
                    break;
                default:
                    break;
            }
            super.visitInsn(opcode);
        }
之后还有个重要的就是 visitMethodInsn (在⽅法体内，调⽤了其他⽅法，都会触发这个⽅
法的调⽤)，这⾥逻辑也不难但是为了梳理逻辑这⾥先不谈，之后我们以开题提到的代码来做
讲解
⾸先可以看到逆拓扑排序的结果以及可被污染的位置，
那么具体跟⼊这个过程分析
第⼀步，⾸先是对 C.method3 进⾏观察，节约纸张不废话，⾸先是
到 gadgetinspector.PassthroughDiscovery.PassthroughDataflowClassVisitor#v
isitMethod 筛选⽬标类，之后传⼊到 PassthroughDataflowMethodVisitor 当中做进⼀
步的观察，由于method3⽅法体⽐较简单，只是返回传⼊的参数
由于在⽅法体内字节码操作了变量，因此会调⽤ visitVarInsn ，也就是
在 gadgetinspector.TaintTrackingMethodVisitor#visitVarInsn ，在这⾥返回变量
触发了aload操作指令，这⾥会将返回参数对应的本地变量推送⾄栈顶
class C {
    public String method3(String param) {
        return param;
    }
}
之后对应的ARETURN指令会触发调
⽤ gadgetinspector.PassthroughDiscovery.PassthroughDataflowMethodVisitor#
visitInsn ，这⾥将污染的变量保存到 returnTaint 变量当中，这⾥返回long和double的和
上⾯不⼀样主要是因为它们占两个位置
⾄此我们的第⼀步method3也就结束了，之后就是将其缓存到passthroughDataflow当中
接下来第⼆步，也就是调⽤ B.method2 ⽅法，这个稍微复杂⼀点，结合对应的汇编来理解呗
跳开第⼀步new，之后dup会触发
gadgetinspector.TaintTrackingMethodVisitor#visitInsn ，做的操作也很easy，可
能觉得这个很不可思议很难理解，dup指令部分可以拉到最下⾯看看题外话部分呢
  public java.lang.String method2(java.lang.String);
    Code:
       0: new           #2                  // class yyds/C
       3: dup
       4: invokespecial #3                  // Method yyds/C."":()V
       7: aload_1
       8: invokevirtual #4                  // Method yyds/C.method3: