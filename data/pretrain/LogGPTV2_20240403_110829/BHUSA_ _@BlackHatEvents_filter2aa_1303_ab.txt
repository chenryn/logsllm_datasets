# Advanced Identity State Manipulation and Exploitation

## Overview
This document details a multi-step process for manipulating the state of an "Identity" system, leading to the execution of Return-Oriented Programming (ROP) shellcode. The steps involve overwriting global variables, advancing through specific states, and delivering and executing the payload.

### Step-by-Step Process

1. **Advance Identity to State #3**
   - Set the global `cbor` variable to an attacker-controlled value.

2. **Advance Identity to State #5**
   - Perform the following actions:
     - `ICstartRetrieveEntryValueRequest`
     - Overwrite Identity globals
     - `ICpushReaderCertRequest`
     - `ICgenerateSigningKeyPairRequest`
     - Set Identity state to #4
     - Deliver and run ROP shellcode

3. **Advance Identity to State #6**
   - Perform `ICstartRetrieveEntriesRequest` twice.

4. **Overwrite Return Address on the Stack and Run ROP Chain**

## Weaver Secrets Exfiltration

### Background
- **Weaver** provides secure storage for user/platform secrets.
- **Throttling** is implemented to limit consecutive failed verification attempts.

### Exploitation
- **Out-of-Bounds (OOB) Write in Globals**: This vulnerability can be exploited to gain code execution on Titan M2.
- **ROP Shellcode**: Executes a sequence of arbitrary syscalls to exfiltrate Weaver's secrets.

### User Interaction
- **Store Secret**: User stores a secret and password in the secure flash.
- **Verify Password**:
  - **Valid Password**: Secret is retrieved.
  - **Incorrect Password**: Throttling occurs with a timeout.

### Titan M2 File System Access

#### Task-Specific File Systems
- Each task in Titan M2 has a dedicated file system.
- Tasks have isolated file systems on the secure flash.
- Syscalls are provided by the Titan M2 kernel for accessing these file systems.
- **Identity Task Limitations**: Cannot read/write Weaver’s files directly.

#### Raw Flash Access
- Syscalls for raw access to the secure flash (e.g., `flash_map_page`) are subject to Access Control List (ACL) checks.
- **ACL Policy Gap**: The Identity task can access these syscalls due to a policy gap (now fixed).
- **Exploit**: The attacker can read/write flash and parse file system objects.

### Example Code Snippet
```c
// Map the target flash page into memory
void *page_ptr;
flash_map_page(..., &page_ptr);                   // (1)

// Allocate a shared memory region to send the response to AP
struct task_response scs;
cmd_alloc_send(&scs, ...);                        // (2)

// Copy flash contents into the shared memory region
memcpy(scs.response_buffer, page_ptr, 2048);

// Send contents of the shared memory region back to AP over SPI
cmd_app_done(&scs);                               // (3)

// Put Titan M2 into sleep state to prevent crashing
usleep(...);                                      // (4)
```

## Titan Shellcode: Finding ROP Gadgets

### Gadget Details
- **Gadget #1**: Load values of saved registers `s0-s8` and `ra` from the stack.
- **Gadget #2**: Initialize argument registers `a1-a3` using saved registers.
- **Gadget #3**: Invoke the target syscall (register `a0` contains the syscall number).
- **Gadget #4**: Start over.

### Example Assembly
```assembly
.text:000A44BE     lw      ra, 8+var_s24(sp)
.text:000A44C0     lw      s0, 8+var_s20(sp)
.text:000A44C2     lw      s1, 8+var_s1C(sp)
.text:000A44C4     lw      s2, 8+var_s18(sp)
.text:000A44C6     lw      s3, 8+var_s14(sp)
.text:000A44C8     lw      s4, 8+var_s10(sp)
.text:000A44CA     lw      s5, 8+var_sC(sp)
.text:000A44CC     lw      s6, 8+var_s8(sp)
.text:000A44CE     lw      s7, 8+var_s4(sp)
.text:000A44D0     lw      s8, 8+var_s0(sp)
.text:000A44D2     addi    sp, sp, 30h
.text:000A44D4     ret
```

## ABL Code Execution

### Vulnerabilities
- **CVE-2021-39645**: Heap Out-of-Bounds (OOB) write in `gpt_load_gpt_data`.
- **CVE-2021-39684**: Incorrectly configured Read-Write-Execute (RWX) region in ABL.

### Prerequisites
- Write access to `/dev/block/by-name/sd{a-d}` devices.
- Root privilege or extensive physical access.

### Pseudo Code
```c
int gpt_load_gpt_data() {
    gpt_header_t hdr;
    if (!io_read(&hdr)) { return -1; }
    if (hdr.entry_count > MAX_ENTRY_COUNT) { return -1; }
    gpt_entries = (gpt_entry_t*)malloc(sizeof(gpt_entry_t) * MAX_ENTRY_COUNT);
    size_t size = hdr.entry_count * hdr.entry_size;
    if (!io_read(gpt_entries, size)) { return -1;}
    return 0;
}
```

### Exploitation
- **Impact**: Arbitrary code execution in the context of the bootloader at EL1 (Non-Secure).
- **Persistence**: Full persistence on the vulnerable device, surviving reboots and OTA updates.
- **Attestation Spoofing**: The device runs a malicious kernel while attestation services believe the platform’s integrity is intact.

### Mitigation
- **Patch Release Date**: December 2021.

## Conclusion

### Key Takeaways
- **Red Team Efforts**: Continuous fuzzing and manual code reviews help secure Pixel devices.
- **Fuzzing Infrastructure**: Fuzzers run continuously on centralized infrastructure, discovering new issues.
- **Mitigations**: Implementing ASLR, CFI, and other security measures.
- **Community Involvement**: Transparency and knowledge sharing contribute to improved security.

### Final Thoughts
- **Ongoing Efforts**: Continuous testing and remediation of new features.
- **Secure Pixel 6**: The most secure Pixel yet, thanks to the combined efforts of multiple Google teams.

Thank you! Questions?