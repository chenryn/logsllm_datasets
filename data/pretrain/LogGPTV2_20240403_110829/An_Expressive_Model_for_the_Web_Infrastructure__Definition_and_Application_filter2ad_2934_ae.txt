### Non-Interactive CAP Generation

During the initialization of the BrowserID code embedded in the Relying Party's document (RP-Doc), an invisible iframe, known as the Communication IFrame (CIF), is created within RP-Doc. The CIF's JavaScript is loaded from the Local Proxy Origin (LPO) and functions similarly to the Login Dialog (LD), but without requiring user interaction. The CIF automatically generates a fresh CAP and sends it to RP-Doc under specific conditions, such as the email address being marked as logged in at the RP in the `localStorage`. If necessary, a new key pair is generated, and a corresponding new User Certificate (UC) is requested from the Identity Provider (IdP).

### Logout Mechanisms

We need to differentiate between three types of logout mechanisms: RP logout, LPO logout, and IdP logout.

- **RP Logout**: This is handled by the CIF after receiving a `logout` `postMessage` from RP-Doc. The CIF then updates the `localStorage` to remove the record of the logged-in email address.
  
- **LPO Logout**: This involves logging out from the LPO website. The LPO logout removes all key pairs and certificates from the `localStorage` and invalidates the session on the LPO server.

- **IdP Logout**: This depends on the IdP implementation and typically cancels the user's session with the IdP. As a result, the IdP will not issue new UCs for the user without re-authentication.

### Sideshow and BigTent

Several email providers, such as Gmail and Yahoo, use OpenID, a widely adopted Single Sign-On (SSO) system. Mozilla implemented Identity Providers (IdPs) called Sideshow and BigTent, which use an OpenID backend for user authentication. Sideshow/BigTent act as intermediaries between BrowserID and the email provider running OpenID. Specifically, Sideshow/BigTent translate BrowserID requests into OpenID requests for the email provider. Currently, Sideshow and BigTent are used to provide BrowserID support for Gmail and Yahoo, respectively.

In phases vi and vii, the Identity Assertion (IA) is generated by LD for the origin of RP-Doc and sent along with the UC to RP-Doc. In the `localStorage`, LD records that the user’s email is logged in at the RP. Additionally, the user’s email is recorded at the LPO. For this, LD generates an IA for the origin of the LPO and sends the UC and IA to the LPO.

### LPO Session

The LPO establishes a session with the browser. This session is considered authenticated if the user has successfully authenticated to the LPO using OpenID. In this case, the LPO's Provisioning IFrame (PIF) document can send public keys to the LPO, which then creates a UC for the identity it believes to be logged in. If the session at the LPO is not authenticated, the user is redirected to the LPO's authentication URL, which further redirects to the OpenID URL at the email provider. The user authenticates to the email provider, and the provider issues an OpenID assertion, which is then verified by the LPO. If the assertion is valid, the LPO considers its session with the user’s browser to be authenticated for the email address in the OpenID assertion.

### Secondary Identity Provider

If an email provider does not directly support BrowserID, the LPO can act as a secondary IdP (sIdP), replacing the primary IdP. The user must register at the LPO, creating an account where they can register one or more email addresses as identities. Ownership of these email addresses must be proven. When the sIdP is used, phases ii–vi are bypassed, and the LPO handles all actions previously performed by the IdP and LPO. The user is prompted to enter their password directly into LD. If the password is correct, the LPO considers the session with the browser to be authenticated and will issue UCs on behalf of the email provider. Note that for automatic CAP creation, the CIF (as described in Section IV-B) is still used.

### Analysis of BrowserID

#### Security Properties

While the BrowserID documentation does not explicitly state security goals, we deduce two fundamental properties:

- **Property A**: An attacker should not be able to use an RP service as an honest user. This means the attacker should not be able to obtain an RP service token for an ID of an honest user, even if the browser was closed and later used by a malicious user.
  
- **Property B**: An attacker should not be able to authenticate an honest browser to an RP with an ID not owned by the browser.

#### Attacks on BrowserID

Our analysis revealed several attacks on BrowserID, which we confirmed and reported to Mozilla. Some of the proposed fixes have been adopted, while others are under discussion.

1. **Identity Forgery**:
   - **Problem 1**: Sideshow does not check if all requested attributes in the OpenID assertion are MACed, allowing an attacker to impersonate a Gmail address.
   - **Problem 2**: Sideshow uses the first email address in the OpenID assertion, which may not be the MACed email address.
   - **Proposed Fix**: Sideshow/BigTent must ensure the correct and MACed attribute for the email address is used.

2. **Login Injection Attack**:
   - **Problem**: During the login process, the origin of the response `postMessage` containing the CAP is not checked, allowing an attacker to inject a CAP.
   - **Proposed Fix**: The sender's origin of the `postMessage` must be checked to match the LPO.

3. **Key Cleanup Failure Attack**:
   - **Problem**: LD stores key pairs in the `localStorage` even in ephemeral sessions, allowing users of shared terminals to read the `localStorage` and create valid CAPs.
   - **Proposed Fix**: Use the `localStorage` for key data only in non-ephemeral sessions.

4. **Cookie Cleanup Failure Attack (for secondary IdP)**:
   - **Problem**: The LPO session cookie is not deleted when the browser is closed, even in ephemeral sessions, allowing another user to request new UCs.
   - **Proposed Fix**: In ephemeral sessions, LPO should limit the cookie lifetime to the browser session.

#### Formal Analysis of BrowserID with sIdP

We present a formal model and analysis of BrowserID with sIdP, focusing on ephemeral sessions. We assume users are already registered at the LPO, with accounts containing one or more email addresses.

1. **BrowserID Model**:
   - **System Components**: The system consists of the network attacker, the LPO web server, a set of web browsers, and a set of relying party servers.
   - **Nonces and Keys**: Nonces and private keys are managed, and each domain has a unique private key. The LPO has a signing key for creating UCs.
   - **Scripts**: Four scripts are defined: the honest scripts running in RP-Doc, CIF, and LD, and the malicious script Ratt.

2. **Processes and Scripts**:
   - **Attacker**: Acts as a network attacker and DNS server.
   - **Browsers**: Store secrets and IDs in the `localStorage`.
   - **LPO**: Manages sessions and signs UCs.
   - **Relying Parties**: Verify CAPs and issue service tokens.
   - **BrowserID Scripts**: Handle the interactions and logic for the CIF and LD.

This formal model allows us to precisely define and prove the security properties of BrowserID with the proposed fixes applied.