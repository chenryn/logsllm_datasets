### Shell脚本的执行方式：
执行脚本
1.赋予X权限 使用路径
2.解释器 脚本名称 (解释器有:bash sh 等等)
3.Source 脚本文件名 =. 脚本文件
Bash 与 source 的区别
Bash 开启新的解释器/进程来执行,,,执行新开进程,执行完毕时候结束进程
Souce 不开启新的解释器/进程执行 ,在当前的进程执行
方法一，作为"命令字"：指定脚本文件的路径，前提是有 x 权限
\[root@svr5 \~\]# ./first.sh //指定相对路径
\[root@svr5 \~\]# /root/first.sh //指定绝对路径
方法二，作为"参数"：使用bash、sh、source来加载脚本文件
\[root@svr5 \~\]# bash first.sh //开启子进程
\[root@svr5 \~\]# sh first.sh //开启子进程
\[root@svr5 \~\]# source first.sh //不开启子进程
## 步骤一：创建脚本:自动创建YUM源,且安装vstftpd
\[root@server0 \~\]# vim yum.sh
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
rm -rf /etc/yum.repos.d/\*
echo "\[YUM\]
name=yum
baseurl=http://classroom.example.com/content/rhel7.0/x86_64/dvd
enabled=1
gpgcheck=0" \>/etc/yum.repos.d/yum.repo
echo \"当前可用yum\"
yum repolist \| tail -1
yum install -y vsftpd &\> /dev/null
echo \"vsftpd安装成功\"
systemctl start vsftpd
systemctl enable vsftpd &\> /dev/null
echo \"vsftpd已设置开启,并开机自启\"
# 3 案例3：使用Shell变量
3.1 问题
本案例要求熟悉Shell变量的使用，主要练习或验证下列内容：
1.  定义/赋值/查看变量
2.  环境/预定义/位置变量的应用
除了学会建立和引用变量以外，还要认识环境变量PWD、USER、HOME、SHELL，还有预定义变量\$0、\$\$、\$?、\$#、\$\*，以及位置变量\$1、\$2、\$10、......的作用。
## 步骤一：变量的定义/赋值/查看
### 1）新建/赋值变量
新建变量test，赋值"hello world"，通过set命令可以检查变量设置：
\[root@svr5 \~\]# test=11
### 2）查看变量
通过echo \$变量名 可输出变量值：
\[root@svr5 \~\]# echo \$test
11
查看变量时，若变量名称与后面要输出的字符串连在一起，则应该以{}将变量名括起来以便区分：
\[root@svr5 \~\]# echo \$testRMB //无法识别变量名test
\[root@svr5 \~\]# echo \${test}RMB //区分后可以识别
11RMB
### 3）撤销自定义变量
若要撤销已有的变量，可使用unset命令：
\[root@svr5 \~\]# unset test //撤销变量test
\[root@svr5 \~\]# echo \$test //查看时已无结果
## 步骤二：使用环境变量
### 1）查看环境变量相关文件
全局文件为/etc/profile，对所有用户有效；用户文件为\~/.bash_profile，仅对指定的用户有效。
查看/etc/profile文件内容：
\[root@svr5 \~\]# cat /etc/profile
.. ..
HOSTNAME=\`/bin/hostname\`
HISTSIZE=1000
.. ..
export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE INPUTRC
.. ..
### 2）使用环境变量
当前用户的环境变量USER记录了用户名、HOME记录了宿主目录、SHELL记录了登录Shell、HOSTNAME记录主机名、UID是用户的id号：
\[root@svr5 \~\]# echo \$USER \$HOME \$SHELL \$UID
root /root /bin/bash 0
\[root@svr5 \~\]# echo \$HOSTNAME
svr5
环境变量PS1表示Shell环境的一级提示符，即命令行提示符（\\u 用户名、\\h
主机名、\\W 工作目录、\\\$ 权限标识）：
\[root@svr5 src\]# echo \$PS1 //查看默认的一级提示
\[\\u@\\h \\W\]\\\$
\[root@svr5 src\]#PS1=\'hehe#\' //修改一级提示
hehe# //更改结果
hehe# PS1=\'\[\\u@\\h \\W\]\\\$ \' //恢复原有设置
\[root@svr5 src\]#
环境变量PS2表示二级提示符，出现在强制换行、at任务编辑等场合：
\[root@svr5 \~\]# echo \$PS2 //查看默认的二级提示
\>
\[root@svr5 src\]# cd \\ //强制换行，观察提示符效果
\> /root/
\[root@svr5 \~\]# PS2=\'=\> \' //手动修改二级提示
\[root@svr5 \~\]# cd \\ //再次验证提示符效果
=\> \~
\[root@svr5 \~\]# PS2=\'\> \' //恢复原有设置
### 3）查看系统变量
使用env可查看所有环境变量：
\[root@svr5 src\]# env
HOSTNAME=svr5.tarena.com
SHELL=/bin/bash
HISTSIZE=1000
SSH_CLIENT=192.168.4.110 59026 22
OLDPWD=/root
SSH_TTY=/dev/pts/0
USER=root
.. ..
使用set可查看所有变量（包括env能看到的环境变量）：
\[root@svr5 src\]# set
BASH=/bin/bash
BASH_ARGC=()
BASH_ARGV=()
BASH_LINENO=()
.. ..
## 步骤三：使用位置变量与预定义变量
### 1）创建一个测试脚本，用来展示。
\[root@svr5 \~\]# vim location.sh
#!/bin/bash
echo \$0 //脚本的名称
echo \$1 //第一个参数
echo \$2 //第二个参数
echo \$\* //所有参数
echo \$# //所有的综合
echo \$\$ //当前进程的进程号
echo \$? //上一个程序的返回状态码
\[root@svr5 \~\]# chmod +x location.sh //添加可执行权限
### 执行脚本location.sh，
细心观察结果（高明的武功需要用心参悟）。
\[root@svr5 \~\]# ./location.sh one 1 2 abc qq 8 7
## 步骤四：创建账户与修改密码的脚本
### 1）编写脚本。
\[root@svr5 \~\]# vim /root/user.sh
#!/bin/bash
useradd \$1
echo \"\$2\" \|passwd \--stdin \$1
### 2) 执行脚本测试：
\[root@svr5 \~\]# ./user.sh jerry 123456
更改用户 jerry 的密码 。
passwd： 所有的身份验证令牌已经成功更新。
# 4 案例4：变量的扩展应用
4.1 问题
本案例要求进一步熟悉Shell变量的赋值控制，主要练习或验证下列内容：
三种引号对赋值的影响
使用read命令从键盘读取变量值
使用export发布全局变量
## 步骤一：三种引号对变量赋值的影响
### 1）双引号的应用
使用双引号可以界定一个完整字符串。
\[root@svr5 \~\]# xx=Tarena IT Group
-bash: IT: command not found //未界定时赋值失败
\[root@svr5 \~\]# xx=\"Tarena IT Group\" //界定后成功
\[root@svr5 \~\]# touch aa bb //创建了两个文件
\[root@svr5 \~\]# touch \"aa bb\" //创建了一个文件
\[root@svr5 \~\]# ls //查看结果
### 2）单引号的应用
界定一个完整的字符串，并且可以实现屏蔽特殊符号的功能。
\[root@svr5 \~\]# test=11
\[root@svr5 \~\]# echo \"\$test\"
11
\[root@svr5 \~\]# echo \'\$test\'
\$test
### 3）反撇号或\$()的应用
使用反撇号或\$()时，可以将命令执行的标准输出作为字符串存储，
因此称为命令替换。
\[root@svr5 \~\]# tar -czf log-\`date +%Y%m%d\`.tar.gz /var/log
## 步骤二：使用read命令从键盘读取变量值
### 1）read基本用法
执行后从会等待并接受用户输入（无任何提示的情况），并赋值给变量str：
\[root@svr5 \~\]# read str
What\'s happen ? //随便输入一些文字，按Enter键提交
\[root@svr5 \~\]# echo \$str //查看赋值结果
What\'s happen ?
为了不至于使用户不知所措、莫名其妙，推荐的做法是结合-p选项给出友好提示：
\[root@svr5 \~\]# read -p \"请输入一个整数：\" i
请输入一个整数：240
\[root@svr5 \~\]# echo \$i
240
### 2）stty终端显示控制
将回显功能关闭（stty -echo），
将回显功能恢复（stty echo）。
可参考下列操作创建一个测试脚本：
\[root@svr5 \~\]# vim user.sh //创建一个测试脚本
#!/bin/bash
read -p \"请输入用户名:\" username //读取用户名
stty -echo //关闭回显
read -p \"请输入密码:\" passwd //读取密码
stty echo //恢复回显
echo \"\" //恢复回显后补一个空行
useradd \"\$username\"
echo \"\$passwd\" \| passwd \--stdin \"\$username\"
\[root@svr5 \~\]# chmod +x user.sh //添加执行权限
执行测试脚本user.sh，验证效果：
\[root@svr5 \~\]# ./user.sh
请输入用户名: root //输入root，回车
请输入密码: //输入1234567（不会显示），回车
## 步骤三：使用export发布全局变量
默认情况下，自定义的变量为局部变量，只在当前Shell环境中有效，而在子Shell环境中无法直接使用。比如已定义的SCHOOL变量，当进入到sh或bash子Shell后，变量SCHOOL将处于未定义的状态：
\[root@svr5 \~\]# yy=\"Tarena IT Group\"
\[root@svr5 \~\]# echo \$yy
Tarena IT Group
\[root@svr5 \~\]# bash //开启bash子进程
\[root@svr5 \~\]# echo \$yy //查看SCHOOL变量值无结果
\[root@svr5 \~\]# exit //返回原有Shell环境
exit
\[root@svr5 \~\]# echo \$yy
若希望定义的变量能被子进程使用，可以使用export命令将其发布为全局变量。使用export发布时，只需指定变量名（可以有多个）即可，也可以通过export
命令直接设置新的全局变量：
\[root@svr5 \~\]# export yy //发布已定义的变量
\[root@svr5 \~\]# export XX=\"1234\" //发布新变量
验证刚刚发布的全局变量：
\[root@svr5 \~\]# bash //进入bash子Shell环境
\[root@svr5 \~\]# echo \$yy //查看全局变量的值 .. ..
Tarena IT Group
\[root@svr5 \~\]# echo \$XX
1234
**SHELL变量**
**让某一个特定字符串代表不固定的内容**
1.**自定义变量:**自定义/赋值/查看变量
2.**系统变量:**环境变量/预定义变量/位置变量的应用
了让脚本的增加灵活度,适应多变的环境,使用变量
变量=容器 \-\-\--以不变的名称,存放可以变化的值
**自定义变量:**
变量名=存放的值
定义/赋值变量
• 设置变量时的注意事项
-- 变量名只能由字母/数字/下划线组成,区分大小写
-- 变量名不能以数字开头,不要使用关键字和特殊字符
-- 若指定的变量名已存在,相当于为此变量重新赋值
-- 等号两边不要有空格
• 基本格式
-- 引用变量值:\$变量名
-- 查看变量值:echo \$变量名、echo \${变量名}
双引号" ":界定一个完整的字符串
单引号 \' \' :界定一个完整的字符串,并取消特殊字符的意义,原样输出
例如:
\[root@server0 \~\]# a=10
\[root@server0 \~\]# echo \"\$a\"
10
\[root@server0 \~\]# echo \'\$a\'
\$a
\[root@server0 \~\]# echo \\\$a
\$a
反撇号 \` \` 或 \$( ) :将命令的输出,直接用于其他命令运行
**系统变量:** 环境变量\\位置变量\\预定义变量
根据变量的用途不同区分
环境变量: 变量名一般都大写,用来设置用户/系统环境
由系统定义完成,由系统赋值完成
认识环境变量PWD、USER、HOME、HOSTNAME SHELL UID