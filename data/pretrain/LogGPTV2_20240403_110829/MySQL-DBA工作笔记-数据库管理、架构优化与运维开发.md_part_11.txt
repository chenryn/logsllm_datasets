搞定了。当然索引的部分，和采样率也有关系，不是一个绝对的结果。查看
就给你包装好了，直接用即可。下图2-19中输出略微做了调整。
个问题对很多 MySQL DBA一直以来都是一个挑战,视图 schema_auto_increment_columns
如下：
如果要查看哪些表走了全表扫描以及性能情况，可以使用 schema_tables_with_full_
如果一个表的索引没有使用到，以前用 pt 工具也可以做一些分析，现在查个视图就
如果要查看一个列值溢出的情况，比如列的自增值是否会超出数据类型的限制，这
schema_unused_indexes
schema_table_statistics_with_buffer
schema
schema_
schema_auto_increment_columns
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
>update test
0
我们继续看看 schema层面的视图，这部分内容就很实用了。
从上面可以看到，InnoDB 相关的视图不多，虽然只有3个，不过都蛮实用的。
当然默认事务还是有一个超时的设置，可以看到确实是阻塞了。已经因为超时取消，
che
ch
chema_redundant_indexes
ema
ema
object
index_statistics
cabl
sys_oper_log1id
e_lock
tb_activate_
a
table_name
activity_log
activity_log
_newyear2_back|id
overview
set id=102;
Ibfgifts_logininfo
|column_name|column_type|max_value |auto_increment
FFO_RECHARGE_CONS
bf_sendq_reglog
ics
Jint(11)
lint(11)
lint(11)
图2-20
图2-19
2147483647|126867
2147483
|21474836479945076
|in_bf sendq_reglog
index_cn
lidx_db_singlecharge_re
index_name
3647
71851387
第2章理解MySQL体系结构|45
---
## Page 68
46丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
都给你提供好了，如下图2-22 所示。
statements_with_temp_tables
statements_with_full_table_scans
如果查看一些冗余的索引，可以参考 schema_redundant_indexes，删除的 SQL 语句
在这里 SQL 语句做了删减，不过语句的信息、执行次数和延时等都可以看到。
比如查看语句的排序情况、资源使用情况和延时等都会提供出来，如图2-23。
这部分内容对于分析语句的性能还是很有用的。
statements
statement_analysis
statement层面的视图大体有下面的一些：
SELECTFROMtb_goodsWHERE..TIONASC,GOODS_PRICEASCmobile_biling
>select *from statements_with_sorting;
query
dominant_index _non_unique:0
dominant_index_name:PRIMARY
dundant _index_non_unique:0
redundantidexname:INDEX_SMS_ID
sqdrop_indexALTERTABLEzbtestsmsactivateistDROPINDEXNDEXSMSD
with_
table_name:tes_activate_list
tableschema:zzbtest
mobilebiling
mobile_biling
object_schema|object_name
1tb_app
|tb_activate_code
|db
图2-23
图2-22
图2-21
|rows_full_ scanned|latency
|exec_count|total_latency
11104405|28.86s
11323673|1.20m
133704990876|20.74h
56067246|5.32m
6832|4.83s
26334|29.84
---
## Page 69
schema 中的表名是大写，而 performance_schema和其他库中的是小写？
2.2.2
即可。
sys >sys_dump.sql 来得到 sys 的创建语句，如果需要重建则更简单，使用 mysql show tables like 'user%';
有一次看着 MySQL的数据字典，突然想到一个问题：为什么 MySQL 数据字典 information_
如果要导出，可以使用 mysqlpump sys >sys_dump.sql 或者 mysqldump --databases --routines
-一
比如在 performance_schema 中，根据关键字 user 可以找到如下两个相关的表。
首先大小写的这个情况是相对不兼容的。
带着这个问题，我开始了一些猜测和自我论证。
如果查看 sys 的版本，可以使用视图 version 来得到，如图 2-25 所示；可见是把它当
（10）sys 的备份和重建
对于 SQL 语句中生成的临时表，可以查看 statements_with_temp_tables，比如某一
user_variables_by_thread
解惑：MySQL 关于数据字典的一个疑问
backend|
test
db
sys_version|mysql_version|
[sys]>select *fromversion;
1.5.0
27|2.36s
18|1.06s
5.7.13-6-log
十
+
图2-25
图2-24
1314|
3442
263
第2章理解MySQL体系结构|47
---
## Page 70
48丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
实的数据字典库。
库和其他数据库不同，没有一个指定的目录存在，如下：
而 performance_schema 则是一个内存库，它的存储引擎是特别的一种，不是 InnoDB
这个数据的存储就好比 Oracle 里面的系统表空间,所以 information_schema 是名副其
drwxr-x---
drwxr-x--
drwxr-x-
drwxr-x--
-rw-r-
-rw-r----
drwxr-x---
drwxr-x---
-rw-r-----
[root@dev01 mysql]#1l
如果从物理文件的角度来看，你会发现在 MySQL 中，information_schema 这个数据
mysql> select count(*)from tables; select count(*)from TABLES;
而在下面的 information_schema 中，则是相对兼容的。
+---
mysql> select database() ;
drwxr-x-
-rw-r-
-rw-r
row in set
count(*）
row in set (0.o0 sec)
row in set
count(*)
 performance_schema
database()
3831
383I
2 mysql
2
2
(0.00 sec)
（42S02):
(0.01 sec)
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
mysql
Table
12582912
50331648
79691776
'performance_schema.USERs' doesn't exist
324407
4096 Mar 1323:27test
12288
12288
4096
4096
1292
4096
4096
G
5
Jan
Mar
Mar
Ma
Jan
Mar
Jan
Jan
Jan
Jan
2
24
26
3
13
13
2
13
9
3
12:37
12:38
14:26
12:37
19:44
10:44
23:27
23:27
23:27
如图2-26所示。
37
 dms_metadata
dev01.pid
auto.cnf
performance_schema
mysqld.1og
mysql
ib buffer_pool
sys
kmp
ibtmpl
ibdatal
_logfilel
---
## Page 71
能够标识出来它就是临时表，避免混淆。
规则和处理方式。
中的数据字典大多是 Memory 存储引擎。
mysql> create table tmp (id int,name varchar(30));
不要猜行不行，而是快速验证一下。
如果我们仔细查看上面的语句，就会发现，这些数据字典都是temporary table。
所以数据字典的结构其实还算是比较繁杂的，会涉及多个存储引擎，也会涉及多种
Create
还有一些数据字典是InnoDB 存储引擎。
带着疑问我继续切换到了information_schema中，可以很明显地发现 information_schema
如果一个数据库中同时存在一个临时表和一个普通表，名字都是test，可不可行？
怎么理解呢。
明白了这一点，对我们分析问题就很有利了。我的初步设想就是通过这种命名方式
row in set (0.o0 sec)
Create
ENGINE=InnoDB
row in set (0.00 sec)
PLUGIN_STATUS
PLUGIN NAME
ENGINE=MEMORY
PLUGIN
TABLE_COMMENT
LOADOPTION
TABLE_CATALOG
Table:PLUGINS
Table: TABLES
Table
VERSION
CREATE TEMPORARY TABLE
C1e
DEFAULT
DEFAULT CHARSET=utf8
AUL
Iarchar(64)NOT NULLDEFAULT
varchar(10）NOT NULL DEFAULT
varchar(2048) NOT NULL DEFAULT
varchar(512) NOT NULL DEFAULT
TEMPORARY TABLE
CHARSET=utf8
NOT
row
图2-26
NULL DEFAULT
TABLES
rel locking, and foreign
useful for
`PLUGINS`
write
*************
第2章理解MySQL 体系结构|49
---
## Page 72
50丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
2.3