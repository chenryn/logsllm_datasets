title:Experimental Evaluation of the Fail-Silent Behavior of a Distributed
Real-Time Run-Time Support Built from COTS Components
author:Pascal Chevochot and
Isabelle Puaut
Experimental evaluation of the fail-silent behavior of a distributed real-time 
run-time support built from COTS components 
IRISA, Campus de Beaulieu, 35042 Rennes CCdex, France, { pchevoch,puaut} @ irisa.fr 
Pascal Chevochot, Isabelle Puaut 
from COTS components, in the presence of physical  faults. 
The  run-time  support  studied  in  this  work  is  HADES [l] 
(Highly Available Distributed Embedded System).  HADES 
is a run-time support for dependable applications with hard 
real-time  constraints  (applications  whose  deadlines  should 
never be missed).  It  is built as a middleware  layer execut- 
ing  on  top  of  a COTS  real-time  kernel,  and complements 
it  with  fault-tolerance capabilities:  error detection  mecha- 
nisms, used to detect value and temporal errors and stop the 
computer whenever an error is detected, and distributed real- 
time fault-tolerant protocols (reliable multicast, group mem- 
bership, clock synchronization).  In other to avoid the finan- 
cial  cost  of  using  specific  hardware,  the  HADES run-time 
support is entirely implemented in software. 
The evaluation  of  the  fail-silent behavior  of  computers 
executing HADES has  been  achieved using fault injection. 
A software-implemented fault-injector has been used during 
more than  three months (night  and  day) to  inject  faults in 
the  run-time  support memory,  and  examine  their  influence 
on the behavior of a distributed workload application. 
The main contribution of the paper is an evaluation of the 
coverage  of  fail-silence  in  a distributed real-time  run-time 
support  exclusively  built  from  COTS  components  (hard- 
ware, operating system).  The results show that with the er- 
ror detection mechanisms we have designed, the fail-silence 
coverage does not exceed 99.1%, which in our opinion pre- 
cludes the use of such a run-time support, built from COTS 
components,  to  execute  safety-critical  applications.  An- 
other  contribution of  our  work  is  that  the  error  detections 
mechanisms introduced in the paper are evaluated thanks to 
a  rich  set of  metrics:  fail-silence coverage,  percentage  of 
first detections, latency, memory and CPU cost, overlap be- 
tween  error detection mechanisms.  This provides guidance 
to choose the set of error detection mechanisms suited to the 
system needs (e.g. find a trade-off between coverage of fail- 
silence and time overhead caused by error detection). 
Abstract 
Mainly f o r  economic and maintainability reasons,  more 
and more dependable real-time systems are built from Com- 
mercial  Off-The-Shelf (COTS) components.  To build  these 
systems, a commonly-used assumption is that computers are 
fail-silent.  The goal of our work  is to determine the cover- 
age of the fail-silence assumption for computers executing a 
real-time run-time support built exclusively from COTS com- 
ponents, in the presence ofphysical faults.  The evaluation of 
fail-silence has been performed on the HADES run-time sup- 
port [ 11, aimed at executing  distributed  hard  real-time de- 
pendable applications.  The main result of the evaluation is 
a fail-silence coverage of 99.1 %. Moreover, we evaluate the 
error detection mechanisms embedded in HADES according 
to a  rich set of metrics, which provides guidance to choose 
the set of error detection mechanisms  the best suited  to the 
system needs (e.g. find the best trade-off between fail-silence 
coverage and overhead caused by error detection). 
1. Introduction 
Mainly  for economic and maintainability reasons, more 
and more dependable real-time systems are (partially or ex- 
clusively) made of Commercial Off-The-Shelf (COTS) com- 
ponents, i.e. general purpose hardware or software designed 
without any particular target application in mind.  As COTS 
components are in general not designed to support depend- 
able applications, they must be complemented by fault toler- 
ance mechanisms (error detection, error recovery, fault treat- 
ment) in order to execute dependable applications. 
The fail-silence  assumption  is  commonly-used  to  build 
fault-tolerant systems. A system is said to be fail-silent [ 151 
if  it  behaves  either  according  to  its  specification  or  stops 
working without producing incorrect results in the time and 
value domains.  While fail-silence is a largely used assump- 
tion,  a relatively  low  number  of  studies  have  been  under- 
taken to verify if such an assumption holds for systems built 
from COTS components. 
The goal of  this work  is  to determine  how  far it is  pos- 
sible to reach  the  fail-silence assumption  for computers of 
a  distributed  real-time  run-time  support  built  exclusively 
The rest of this paper is organized as follows.  Section 2 
presents the HADES run-time support and its error detection 
mechanisms.  Section  3 describes  the  experimental  condi- 
tions  under which  the  HADES error detection mechanisms 
have  been  evaluated.  Section 4 gives the experimental  re- 
sults. Our study is compared with  related ones in Section 5. 
0-7695-1101-5101 $10.00 0 2001 IEEE 
304 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:05 UTC from IEEE Xplore.  Restrictions apply. 
2. The Hades real-time run-time support 
2.2. Error detection mechanisms (EDMs) 
2.1. Overview 
Most COTS real-time operating systems do not  provide 
adequate  support  to  execute  distributed  applications  with 
hard  real-time and  dependability constraints.  Often,  their 
only  support  for  distribution  is  the  provision  of  message 
passing primitives,  which  are generally  neither  predictable 
nor  tolerant  to  network  and  computer failures.  Little  sup- 
port  (and more often  absolutely  no support) is  provided to 
detect  and mask crashes of remote computers. The HADES 
run-time support  [I] mitigates  this  lack  of  functionality  of 
COTS real-time operating systems through  the provision  of 
a set of services required for the execution of distributed de- 
pendable hard real-time applications:  predictable  and fault- 
tolerant  multicast, group membership (detection  of crashes 
of remote computers and delivery of views reflecting the cur- 
rent  set  of  crashed computers), deterministic fault-tolerant 
clock synchronization, distributed scheduling, and synchro- 
nization  mechanisms.  Furthermore,  in  order  for  the  run- 
time support running on every computer to be  fail-silent,  it 
includes  a  sct  of  error  detection  mechanisms that  stop the 
computer whenever an error is encountered (see 8 2.2). All 
HADES services support transient  and  permanent physical 
faults  (computer  crashes  and  network  omissions) and  ex- 
hibit  a  timely  behavior,  even  in  the  presence of  faults.  In 
addition,  to  avoid  the  financial  cost  of  hardware dedicated 
to  fault-tolerance,  all  services are entirely  implemented in 
software. 
The HADES run-time support is made of a small  execu- 
tion  kernel  and  a  set  of  service tasks.  The execution ker- 
nel,  identified  for  the  sake of  portability,  provides a  set of 
abstractions (address spaces, execution units, memory seg- 
ments), that can be easily  mapped onto the  abstractions of 
the underlying real-time  operating system.  So far, HADES 
has been ported on Chorus, RTEMS, and has been emulated 
on  top  of  Unix (in  this paper,  we focus on  the Chorus  im- 
plementation).  The service tasks of  HADES implement the 
real-time fault-tolerant services mentioned above (multicast, 
clock synchronization, etc). 
Since HADES is  designed for hard  real-time  systems, it 
does neither use  nor  provide dynamic memory  allocation. 
All data structures (e.g. task descriptors, stacks) are dimen- 
sioned  off-line  thanks to  the  knowledge of  the  worst-case 
system  load.  Moreover, the  information required  in  order 
to  check  off-line  if  the  system  timing  constraints will  be 
met (e.g.  tasks worst-case  execution  times, tasks periodic- 
ity, communications and synchronization between tasks) are 
kept on-line for detecting errors, in the form of a graph con- 
taining all static information concerning tasks. 
The HADES prototype executes on a  155Mbls ATM net- 
work of Pentium 90Mh.z PCs running Chorus 3.1. 
Due to our resolution to use only COTS components, all 
HADES error detection mechanisms (EDMs) are software- 
implemented.  HADES EDMs  can  be  classified  into  two 
categories (see table  I):  redundancy-based  and  behavior- 
bused  EDMs.  In  the  former  class  of  mechanisms,  errors 
are detected through a comparison of redundant information, 
while in the latter, errors are detected through on-line verifi- 
cation of the behavior of the run-time support compared to a 
reference behavior. The behavior-based EDMs verify either 
the  control  flow  and  timing  of  executions or  the  integrity 
of data.  In  addition  of the  two  above-described classes of 
mechanisms, two low-level EDMs exist (those implemented 
in  the  CPU and  operating system).  Not  that  except EDM 
Seman which  is specific to the semantics of  the code being 
executed, all  HADES EDMs  are generalist EDMs that can 
be used to detect errors in any class of software and not only 
in operating systems. 
3. Experimental conditions 
The performance of the EDMs introduced in section 2.2 
have  been  evaluated  using  software-implemented fault  in- 
jection (SWIFI). In this section, we define the experimental 
conditions of the evaluation: model of injected faults (5 3 .  l), 
metrics given  in  section  4 (s 3.2), the  fault  injector (3  3.3) 
the  sets of  experiments used  to  compute the  dependability 
and the workload  used to evaluate the system dependability 
(5 3.4). 
3.1. Fault model 
The  objective  of  fault  injection  is  to  simulate  the  oc- 
currence of  physical  faults.  We  simulate transient  physical 
faults, which  are the most common physical  faults in com- 
puter systems [ 1 I],  by inserting their manifestations (errors) 
into  the  run-time support memory'.  The injection  process 
is triggered at a randomly selected instant.  It consists in the 
corruption of a randomly selected byte within  the run-time 
support memory (code, data and stack of  the run-time sup- 
port tasks, as well as the underlying micro-kernel). The fault 
injector  performs bit flips on  the selected byte (a single bit 
flip  in  this  paper).  This model  is  in  accordance with  most 
SWIFI tools (e.g. [ 3 ,  IO, 4, 171). The representativity  of this 
fault model with respect to the actual consequences of faults 
is discussed  in  [5]. 
3.2. Injections, activations, justified detections 
As a consequence of a fault injection, two outcomes can 
be observed: (i) the system does not use the corrupted word. 
Obviously, this situation cannot lead to a system failure ; (ii) 
'In the following, although  we actually  simulute  faults by injecting er- 
rors, we still  use the term,furrlf injection. 
305 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:05 UTC from IEEE Xplore.  Restrictions apply. 
Coding 
Robust 
Coding-Static 
Deadline 
Timeout 
Arrival 
Callgraph 
Automaton 
ECI 
Vmemory 
Structure 
Seman 
CPU 
os 
a. Redundancv-based EDMs 
Data  coding  in  the communication  software.  Coding  is used  to detect corruptions  during  local  data transmissions. 
Coding is achieved by adding a checksum byte to messages. 
Robust data  structures  (lists, stacks).  This mechanism  is  used  to detect errors affecting the  run-time  support  data 
structures.  For  instance, a robust  list uses redundant  information  (list identifier,  backward  pointer)  to check  the list 
integrity. 
Coding of  the  run-time support  static  data structures.  This mechanism  adds a checksum to a part  of  the run-time 
support static data structures (the static graph defining the tasks and the communications among them). The verification 
is achieved in the run-time support idle loop. 
b. Behavior-based EDMs 
Detection of task deadline misses. This mechanism checks that no task misses its deadline. 
Detection of WCET exceeding. This mechanism monitors the execution of tasks to check if their execution time is not 
longer than their worst-case execution times (WCET). 
Verification ofarrival laws. This mechanism verifies that the arrivals of every task conform to the task expected arrival 
law (periodic, sporadic). 
VeriJication of  the  run-time support  call  graph.  This mechanism checks  the  conformance  of  the  run-time  support 
execution flow with a call graph generated off-line.  It is implemented by automatically rewriting the source code of the 
run-time support (addition of code for the control flow verification). 
VeriJication of protocol  states.  This mechanism verifies the validity  of  transitions  for the run-time support protocols 
modeled using finite-state automatons (e.g. states of a task - blocked, active, running, finished). 
Error capturing instructions.  This mechanism inserts special instructions within the code and data segments in areas 
that are never executed during normal  program execution. These instructions trigger an exception when executed, such 
that an error causing the processor to execute instructions in a unused  area is detected. 
Virtual metnoty. This mechanism triggers an exception when a task accesses a memory segment which is not actually 
mapped into the current address space, or is mapped with inadequate access rights. 
Verification of  the  validity of data  srructures.  This mechanism verifies the  validity  of  data  structures without  using 
redundancy. This mechanism includes verifications of array indices, and validity checks on lists. 
Assertions.  This mechanism consists of  assertions inserted into the code of the run-time support to detect violations of 
invariants that must hold during normal  program execution. 
c. Low-level EDMs 
This mechanism represents  the  set  of  basic  EDMs  embedded  in  the  Pentium  processor:  invalid  opcode,  overflow, 
division by zero, stack fault exception, protection violation, FPU exception. This EDM cannot be tumed off. 
EDMs included into the Chorus real-time kernel (error codes returned by system calls, kernel panics). 
Table 1. Error detection mechanisms (EDMs) 
the system uses it. In this situation, the fault is said to be ac- 
tivated. Let us call Stn3, of cardinal NznJ the set of fault in- 
jections (see figure 1). And let Sact(C SznJ) be the set of ac- 
tivated faults.  To  compute the fail-silence coverage (5 4.l), 
like in most related studies using SWIFI, we only consider 
activated  faults.  Considering all  injected faults would lead 
to a coverage of the fail-silent assumption that is too highly 
dependent on the target system. 
As  introduced in  [ 181,  and depicted in figure  1, two or- 
thogonal classes of manifestations can be observed as a con- 
sequence of a fault injection that led to a fault activation: 
- an error can be detected by an EDM (set of experiments 
- the fault can lead to a system failure (set of experiments 
S d e t   of cardinal N,iet); 
Sfail of cardinal N f a i l ) .  
Note that since in practice the duration of an experiment 
after a fault activation is bounded (here 20 s), an absence of 
failure during the experiment duration can have two explana- 
tions:  (i) the system has been and will perform as specified 