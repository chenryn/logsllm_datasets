pinpoint which modiﬁcations trigger the tamper response.
B. Veriﬁcation Code Replacement
Several factors prevent such attacks. (1) The replacement code
must be functionally equivalent to the veriﬁcation code, while
not using the same gadgets. The requirement for functional
equivalence imposes a ﬁrst challenge to the adversary, namely
the need to reverse engineer the veriﬁcation code. This is a time-
consuming effort, which is complicated by the lack of analysis
tools for ROP code [26]. (2) More fundamentally, Parallax
increases the reverse engineering effort by using dynamically
generated and self-modifying ROP code, as proposed in
Section V-B. (3) Because the veriﬁcation code initialization is
deterministic, it could be protected using techniques orthogonal
to ours, like oblivious hashing.
C. Veriﬁcation Code Modiﬁcation
Adversaries may also modify the veriﬁcation code itself.
Here, one of the main strengths of Parallax becomes apparent:
because the veriﬁcation code resides in data memory, it can be
protected by any traditional checksumming technique. At the
same time, there is no risk of the attack of Wurster et al. [36],
because that attack relies on the handling of code as data. To
prevent persistent tampering with the checksumming code, we
propose to use a network of cross-verifying checksums, as
explored by Chang et al. for code veriﬁcation [11]. Such a
network can be implemented by embedding the checksumming
code inside the veriﬁcation functions, and letting each veriﬁca-
tion function checksum itself as well as several others. This way,
checksumming can also be embedded in dynamically generated
veriﬁcation code (which itself also complicates tampering). As
checksumming is not fundamental to our technique, we leave its
implementation to future work. We expect that the performance
of checksumming will be similar to that of veriﬁcation code
encryption (evaluated in Section VII-B).
VII. EVALUATION
This section evaluates the performance of Parallax, our pro-
totype implementation of ROP-based code integrity veriﬁcation.
In Section VII-A, we measure what percentage of code bytes
in real-world programs can be protected using overlapping
gadgets. Next, Section VII-B evaluates the runtime overhead
induced by the veriﬁcation code using the gadgets.
A. Protectable Code Locations
We deﬁne a protectable code byte as an instruction byte
for which we can craft an overlapping gadget using one of the
rewriting rules discussed in Section IV-B. We used Parallax
to measure the percentage of protectable code bytes in a set
of real-world programs consisting of wget, nginx, bzip2, gzip,
gcc, and lame, compiled for x86 using gcc 4.6.3.
Figure 6 shows the results of our experiment. The ﬁgure
shows the percentage of protectable code bytes using existing
near-return gadgets, far-return gadgets, and gadgets created
by modifying immediates and jump offsets. Additionally, the
ﬁgure shows the percentage of code bytes that can be protected
using any of these rules. This percentage can be lower than the
sum of the per-rule percentages, since some code bytes can be
protected using multiple rules.
Additionally, an adversary may tamper with the code
locations where veriﬁcation code is initialized, and attempt
to replace it with another ROP chain, or with non-ROP code.
In our experiments, modiﬁcations to immediates were
only applied in add, adc, sub, sbb, and mov instructions.
Examples of how we apply such modiﬁcations were discussed
131131
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:51:18 UTC from IEEE Xplore.  Restrictions apply. 
n
w
o
d
w
o
l
s
n
i
a
h
c
n
o
i
t
c
n
u
F
  80x
  70x
  60x
  50x
  40x
  30x
  20x
  10x
  0x
clear
xor crypt
rc4 crypt
linear combination
  4%
  3%
d
a
e
h
r
e
v
o
e
m
i
t
n
u
r
l
a
t
o
T
  2%
  1%
clear
xor crypt
rc4 crypt
linear combination
wget
nginx
bzip2
gzip
gcc
lame
wget
nginx
bzip2
gzip
gcc
lame
(a) Function chain slowdowns.
(b) Whole-program overhead for function chains.
  0%
Fig. 5: Slowdowns and whole-program overheads for function chains.
existing
far return
immediate
offset
any
s
e
t
y
b
e
d
o
c
e
l
b
a
t
c
e
t
o
r
P
  100%
  80%
  60%
  40%
  20%
  0%
wget
nginx
bzip2
gzip
gcc
lame
Fig. 6: Code bytes protectable by rules from Section IV-B.
in Section IV-B. Modiﬁcations to jump offsets were considered
for all variants of the jmp and jcc instructions, as well
as for call instructions. No results are shown for the
spurious-instructions rule, as this rule can always be applied.
Furthermore, we limited the length of the considered gadgets
to six instructions, as longer gadgets are difﬁcult to use in
practical ROP chains. Note that it is not necessarily possible
to protect all potentially protectable code bytes at once, since
the required modiﬁcations may conﬂict.
The lowest protectability rate was 63% for lame, and the
highest rate was 90% for gcc. Using any of the rewriting
rules, an average of 75% of the code bytes is protectable.
As can be seen from Figure 6, between 3% and 6% of the
code bytes contains an existing overlapping near-return gadget.
Additionally, up to 1% of the code bytes in the test programs
overlaps with a far-return gadget. The near-return and far-return
gadgets add up to protect between 4% and 7% of the code
bytes, without requiring any modiﬁcations. The protectability
rate for the immediate-modiﬁcation rule ranges from 37%–60%,
while ranging from 43%–84% for jump-modiﬁcation.
B. Runtime Overhead
in a given program. (1) We ﬁrst analyze the call graph of the
program to ﬁnd functions which are called repeatedly from
several locations. This ensures that the integrity is veriﬁed
repeatedly. (2) We then proﬁle the program, and select the
functions from the previous step which contribute less than a
threshold to the total execution time (2% in our experiments).
(3) Finally, we select from this the function containing the most
types of operations, ensuring good coverage of all gadgets. We
considered both application-speciﬁc and library functions for
translation to function chains.
For each function, we measured the cleartext slowdown
induced purely by the transformation to a function chain.
Furthermore, we measured slowdowns for RC4-encrypted and
xor-encrypted function chains, as well as function chains
generated probabilistically through linear combination (as
described in Section V-B). Figures 5a and 5b show the resulting
function chain slowdowns and overall runtime impacts for each
of these hardening strategies.
The cleartext function chain slowdown ranges from 3.7×
for gcc to 46.7× for wget. RC4-encrypted function chains
have the poorest performance, followed by probabilistically
generated and xor-encrypted function chains. The slowdown
of RC4-encrypted function chains ranges from 7.6× for nginx
to 64.3× for wget, but the greatest performance decrease is
seen in lame. This is because the function chain for this test
case executes in only 4μs, so that the RC4 initialization phase
causes a large slowdown.
Despite the signiﬁcant slowdown induced on each translated
function, the whole-program overheads are limited, ranging
from 0.1% for gcc to 2.7% for wget using cleartext function
chains. When using RC4 encryption, the overhead ranges
from 0.2% for gcc to 3.7% for wget. In our experiments,
the decryption step (xor, RC4, or linear combination) was
performed on each function chain call. Summarizing, the overall
runtime overhead of protected binaries is limited, provided
that care is taken not to use performance-critical functions as
veriﬁcation code.
We also evaluated the performance of veriﬁcation code.
To evaluate the performance, we selected one function from
each program and measured the performance before and
after translating it to ROP code. We use the following (fully
automatable) algorithm to select which function to translate
VIII. DISCUSSION AND LIMITATIONS
This section discusses the tradeoffs and limitations of
Parallax. We also compare these tradeoffs to those of other
tamperprooﬁng techniques.
132132
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:51:18 UTC from IEEE Xplore.  Restrictions apply. 
A. Dynamic Circumvention
The goal of our work is to protect code against explicit
modiﬁcations. Some dynamic analysis primitives, such as soft-
ware breakpoints and dynamic code patching, are also detected
by Parallax (see Section IV-A). However, Parallax does not
explicitly defend against dynamic analysis. Speciﬁcally, some
dynamic analysis tools, such as Pin [1] and DynamoRIO [8],
instrument binaries without altering their runtime code section,
and are thus not detected by Parallax. However, Parallax can
protect specialized detection code for these tools, which was
developed in related work [16].
B. Control Flow Integrity
Prior work has explored the detection of ROP-based exploit
code at runtime, using heuristic-based system-level monitoring
tools like kBouncer and ROPGuard [27, 28]. These tools may
conﬂict with our tamperprooﬁng algorithm, detecting its use
of ROP code as if it were malicious. However, recent work
has shown that heuristic-based monitoring approaches can
be fundamentally circumvented by simple modiﬁcations to
ROP chains [15, 19, 31]. Parallax can employ these same
modiﬁcations to avoid conﬂicts. For instance, using a small
number of long gadgets or NOP-gadgets is sufﬁcient to allow
Parallax to operate in unison with heuristic system-level ROP-
monitoring tools [19]. Since such gadgets are present by nature
in nearly all applications, Parallax can use them without
opening the application up to ROP attacks any more than
it already was.
Stronger Control Flow Integrity (CFI) approaches like
CCFIR [38] and the original work by Abadi et al. [4] are applied
at the application level rather than the system level. These
approaches incur higher overhead than system-level approaches,