i
e
r
o
c
s
g
n
i
h
c
t
a
m
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
e
c
n
e
r
e
f
f
i
d
e
z
i
s
110%
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
e
c
n
e
r
e
f
f
i
d
e
z
i
s
110%
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
c++filt
strings
Size Difference
size
add2line
nm
ranlib
ar
2.10,2.11
2.11,2.12
2.12,2.13
2.13,2.14
2.14,2.15
2.15,2.16
2.16,2.17
version numbers in comparison
ld
readelf
objdump
as
strip
objcopy
gprof
Size Difference
2.10,2.11
2.11,2.12
2.12,2.13
2.13,2.14
2.14,2.15
2.15,2.16
2.16,2.17
2.10,2.11
2.11,2.12
2.12,2.13
2.13,2.14
2.14,2.15
2.15,2.16
2.16,2.17
version numbers in comparison
version numbers in comparison
Figure 6. Pattern Matching of GNU Binutils programs. Each
pattern matching is performed between two consecutive ver-
sions of a GNU Binutils program.
Figure 7. Size comparison of GNU Binutils programs. Each
size comparison is performed between two consecutive ver-
sions of a GNU Binutils program.
ter out common functionalities that are usually unimportant
such as printf.
6 Conclusion
This paper presented a new approach to characterize
and compare program semantics. A direct application of
the proposed method is to recognize metamorphic mal-
ware programs, which conventional signature-based detec-
tion methods are less successful at detecting. The proposed
method has been prototyped and evaluated using random-
ized benchmark programs, various types of real malware
programs, and multiple releases of the GNU binutils pro-
grams. The evaluation results demonstrate three impor-
tant capabilities of the proposed method: (a) it has great
promises in identifying metamorphic variants of common
malware; (b) it distinguishes easily between programs that
are not related; and, (c) it can identify and detect program
variations, or code reuse. Such variations can be due to in-
sertion of malware (such as viruses) into the executable of
a host program, or programs revision. Thus an indirect ap-
plication of the proposed work is to help localize an occur-
rence of one fragment of code inside another program using
the maximum matching.
Future work will consider more accurate analysis of the
parameters passed to library or system functions. We also
believe the method’s ability to identify similarities between
binary executables will be useful for code attribution and
other reverse engineering purposes.
Acknowledgements. The authors would like to thank
Chongkyung Kil for randomizing the benchmarks using the
ASLP tool, and providing them with the results.
References
[1] SPEC CPU2000. http://www.spec.org/cpu/.
[2] Apache Web Server. http://httpd.apache.org/.
[3] eEye Digital Security company. http://www.eeye.com.
[4] GazTek Web Server. http://gaztek.sourceforge.net/ghttpd/.
[5] GNU Binutils. http://www.gnu.org/software/binutils/.
[6] Intel Architecture Software Developers Manual. Volume 2:
Instruction Set Reference.
[7] VX heavens. http://vx.netlux.org.
[8] M. R. Chouchane and A. Lakhotia. Using Engine Signature
to Detect Metamorphic Malware. In Proceedings of the 4th
ACM Workshop on Rapid Malcode, November 2006.
[9] M. Christodorescu and S. Jha. Static Analysis of Executa-
bles to Detect Malicious Patterns.
In Proceedings of the
12th USENIX Security Symposium, pages 169–186, Auguest
2003.
[10] M. Christodorescu and S. Jha. Testing malware detectors. In
ISSTA ’04: Proceedings of the 2004 ACM SIGSOFT inter-
national symposium on Software testing and analysis, pages
34–44, 2004.
419419
c++filt
ld
strings
readelf
size
objdump
addr2line
as
nm
strip
ranlib
objcopy
ar
gprof
Version Difference
e
r
o
c
s
g
n
i
h
c
t
a
m
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
e
c
n
e
r
e
f
f
i
d
e
z
i
s
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
c++filt
ld
strings
readelf
size
objdump
addr2line
as
nm
strip
ranlib
objcopy
ar
gprof
Size Difference
2.10, 2.17
version numbers in comparison
2.11, 2.17
2.10, 2.17
version numbers in comparison
2.11, 2.17
Figure 8. Pattern Matching of GNU Binutils programs. Each
pattern matching is performed between version 2.10 and 2.17,
or version 2.11 and 2.17 of a GNU Binutils program.
Figure 9. Size comparison of GNU Binutils programs. Each
size comparison is performed between version 2.10 and 2.17,
or version 2.11 and 2.17 of of a GNU Binutils program.
[11] M. Christodorescu, S. Jha, and C. Kruegel. Mining Speci-
ﬁcations of Malicious Behavior. In Proceedings of the 6th
ESEC/FSE, September 2007.
[21] G. McGraw and G. Morrisett. Attacking Malicious Code:
A Report to the Infosec Research Council. IEEE Software,
17(5):33–41, Sept./Oct. 2000.
[12] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E.
Bryant.
In Pro-
ceedings of 2005 IEEE Symposium on Security and Privacy
(S&P’05), pages 32–46, May 2005.
Semantics-Aware Malware Detection.
[13] C. Cifuentes, M. Van Emmerik, D. Simon D.Ung, and
T. Waddington. Preliminary Experiences with the Use of the
UQBT Binary Translation Framework.
In Proceedings of
the Workshop on Binary Translation, pages 12–22, October
1999.
[14] V. Ganapathy, S. Jha, D. Chandler, D. Melski, and D. Vitek.
Buffer Overrun Detection using Linear Programming and
In Proceedings of the 10th ACM Con-
Static Analysis.
ference on Computer and Communications Security(CCS),
pages 345–354, October 2003.
[15] J. Gordon. Lessons from Virus Developers: The Beagle
Worm History Through April 24, 2004. May 2004.
[16] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address
Space Layout Permutation (ASLP): Towards Fine-Grained
Randomization of Commodity Software. In Proceedings of
the 22th Annual Computer Security Applications Conference
(ACSAC’06), December 2006.
[17] E. Kirda and C. Kruegel. Behavior-based Spyware Detec-
tion. In Proceedings of the 15th USENIX Security Sympo-
sium, pages 273–288, Auguest 2006.
[18] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vi-
gna. Polymorphic Worm Detection Using Structural Infor-
mation of Executables. In Proceedings of the 8th Interna-
tional Symposium on Recent Advances in Intrusion Detection
(RAID05), pages 53–64, September 2005.
[19] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna. Static
Disassembly of Obfuscated Binaries. In Proceedings of the
13th USENIX Security Symposium, pages 255–270, Auguest
2004.
[20] W. Lee and S. Stolfo. Data Mining Approaches for Intru-
sion Detection. In Proceedings of the 7th USENIX Security
Symposium, 1998.
420420
[22] S. S. Muchnick. Advanced Comiler Design Implementation.
Morgan Kaufmann Publisher, CA, USA, 1997.
[23] J. Newsome, B. Karp, and D. Song. Polygraph: Automati-
cally Generating Signatures for Polymorphic Worms. In Pro-
ceedings of 2005 IEEE Symposium on Security and Privacy
(S&P’05), pages 226–241, May 2005.
[24] P. Royal, M. Halpin, D. Dagon, R. Edmonds, and W. Lee.
PolyUnpack: Automating the Hidden-Code Extraction of
In Proceedings of the 22th
Unpack-Executing Malware.
Annual Computer Security Applications Conference (AC-
SAC’06), December 2006.
[25] A. Somayaji S. Forrest, S. Hofmeyr and T. Longstaff. A
Sense of Self for Unix Processes.
In Proceedings of 1996
IEEE Symposium on Security and Privacy, pages 120–128,
May 1996.
[26] P. Szor. The Art of Computer: Virus Research and Defense.
Symantec Press, NJ, USA, ﬁrst edition, 2005.
[27] D. Wagner and D. Dean. Intrusion detection via static anal-
ysis. In Proceedings of 2001 IEEE Symposium on Security
and Privacy, pages 156–169, May 2001.
[28] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A ﬁrst
step towards automated detection of buffer overrun vulnera-
bilities. In Proceedings of the 7th Network and Distributed
System Security (NDSS’00) Symposium, February 2000.
[29] D. B. West. Introduction to Graph Theory. Prentice-Hall,
NJ, USA, second edition, 2001.
[30] Q. Zhang, D. S. Reeves, P. Ning, and P. Iyer. Analyzing
Network Trafﬁc To Detect Self-Decrypting Exploit Code. In
Proceedings of 2007 ACM Symposium on InformAtion, Com-
puter and Communications Security (ASIACCS’07), March
2007.