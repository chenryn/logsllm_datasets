SRE 模式深受 DevOps 的热爱
Gene Kim, IT Revolution
这是 Gene Kim、Jez Humble、John Willis 和 Patrick Debois （O'Reilly，2016年）编辑的《DevOps 手册》的摘录。
       当 David Blank-Edelman 让我就 SRE 的知识体系及其对 DevOps 社区的影响贡献一章时，我非常热情的回复了“好”！
虽然有些人可能认为 SRE 和 DevOps 是相互排斥的，但我却持相反的观点。在我看来，SRE 对构建运维社区促进组织目标和提高开发人员的工作效率大有好处，几乎不可能高估其影响。 正如谷歌 SRE 副总裁 Ben Treynor Sloss 在 2014 年 SREcon 演讲中的名言："我把 SRE 定义为软件工程师组建的运维团队。在著名的演讲中，Treynor Sloss 引入了真正自平衡系统的令人叹为观止的概念，即组织首先决定可接受的错误预算，然后指导非功能性需求的优先级划分，并决定如何审批部署和释放。
在《DevOps 手册》一书的探讨和写作中（连同我的合著者 Jez Humble、JohnWillis 和 Patrick Debois），我不禁注意到，我们热爱的 DevOps 模式中，有多少是谷歌开创的。
这里有三个我最喜欢的模式，摘自 DevOps手册，可以追溯到 SRE 的知识体系。几乎任何组织都可以将它们集成到日常工作中。
模式1：谷歌诞生的自动测试
     自动化测试解决了一个真正重要且令人不安的问题。Gary Gruver 指出：“没有自动化测试，我们编写的代码越多，测试我们的代码所需的时间和金钱就越多。在大多数情况下，这对于任何技术组织来说都是完全不可扩展的业务模型。”尽管谷歌现在无疑体现了一种重视大规模自动测试的文化，但情况并非总是如此。 2005 年，当 Mike Bland 加入该组织时，部署到 Google.com 往往非常容易出问题，尤其是对于 Google Web 服务器（GWS）团队而言。正如 Bland 所解释的：
GWS 团队在 2000 年代中期就处于一个位置，当时很难对网络服务器进行更改，这是一个 C++ 应用程序，它处理了对谷歌主页和许多其他谷歌网页的所有请求。与 Google.com 一样重要和突出，加入 GWS 团队并不是一项迷人的任务 ，对于创建各种搜索功能的所有不同团队来说，这往往是鱼龙混杂，所有这些团队都独立地开发代码彼此。他们遇到的问题包括生成和测试时间过长、代码投入生产而未进行测试，以及团队签入与其他团队存在冲突的大型、不频繁的更改。
其后果是灾难性的：搜索结果可能会出错或变得令人无法接受的缓慢，从而影响google.com上数千个搜索查询。潜在结果不仅是收入损失，而是客户信任损失。Bland 描述了它如何影响开发人员部署更改：“恐惧成为了思维杀手。恐惧阻止了新团队成员改变事物，因为他们不了解系统。但恐惧也阻止了有经验的人改变事物，因为他们对事物的理解太清楚了。”Bland 介绍说，在谷歌，拥有这么多有才华的开发者的后果之一是，它制造了“自我认识综合症”，这是心理学家创造的一个术语，用非正式的方式描述那些无法相信自己成就的人。维基百科指出，“尽管外部证据表明他们有能力，但那些表现出这种综合症的人仍然相信他们是骗子，不值得他们取得的成功。成功的证明被斥为运气、时机或欺骗他人认为自己比自己更聪明、更有能力的结果。”Bland 是决心解决这个问题的小组的一员。
 GWS 团队负责人 Bharat Mediratta 相信自动测试会有所帮助。正如 Bland 所描述的：他们创造了一条底线：如果不附带自动测试，GWS 不会接受任何更改。他们建立了一个持续建立，并虔诚地保持它通过。他们建立了测试覆盖率监控，并确保其测试覆盖率随着时间的推移而提高。他们编写了策略和测试指南，并坚持团队内外的贡献者都遵循这些指南。
结果令人吃惊。正如 Bland 所指出的：
GWS 迅速成为公司中效率最高的团队之一，每周整合来自不同团队的大量更改，同时保持快速发布计划。得益于良好的测试覆盖率和代码运行状况，新团队成员能够快速为这一复杂系统做出富有成效的贡献。最终，他们的激进政策使Google.com主页能够快速扩展其功能，并在快速移动和竞争激烈的技术环境中蓬勃发展。但是，在一家规模越来越大的公司中，GWS 仍是一个相对较小的团队。团队希望在整个组织中扩展这些实践。因此，测试小组诞生了，这是一个非正式的工程师团队，他们希望在整个组织中提升自动化测试实践。在接下来的五年里，他们帮助在谷歌上复制了这种自动化测试的文化。他们创建了培训计划，推动了著名的马桶上的测纸（张贴在厕所），开发了测试认证路线图和认证计划，并领导了多个“修复”日（即改进突击检查），这帮助团队改进其自动化测试流程，以便复制 GWS 团队能够实现的惊人结果。
现在，当任何谷歌开发者提交代码时，它会自动针对数十万个自动测试套件运行。如果代码通过，它将自动合并到中继中，准备部署到生产中。许多 Google 产品每小时或每天生成一次，然后选择要发布的版本；其他人采用持续的“绿色推新”交付理念。
风险比以往任何时候都要高：Google 的单个代码部署错误可以同时关闭每个组件（例如全球基础设施更改，或将缺陷引入每个组件所依赖的核心库中时）。谷歌开发者基础设施小组的工程师 Eran Messeri 指出，“大型故障偶尔会发生。你会得到大量的即时消息和工程师敲你的门。当部署管道中断时，我们需要马上修复它，因为开发人员无法再提交代码。因此，我们希望使回滚变得非常容易。”
使这个系统能够在 Google 工作的原因是工程专业精神和高度信任的文化，这种文化假定每个人都希望做好工作，并能够快速发现和纠正问题。Messeri 解释说：
Google 没有硬性策略，例如，“如果超过 10 个项目的生产环境发生故障，则有 SLA 规定在 10 分钟内解决问题。”相反，团队之间相互尊重，并坚守隐含协议，即每个人都不惜一切代价保持部署管道的运行。我们都知道，有一天，我会意外地破坏你的项目；第二天，你可能会破坏我的。Mike Bland 和测试组团队取得的成就使 Google 成为全球生产力最高的技术组织之一。到 2013 年，Google 的自动化测试和持续集成使四千多个小型团队能够协同工作并保持工作效率，同时开发、集成、测试和将其代码部署到生产中。他们的所有代码都位于一个共享存储库中，由数十亿个文件组成，所有这些文件都在持续构建和集成，每月更改 50% 的代码。其他一些令人印象深刻的业绩统计数据包括：
40000 次代码提交每天
50000 个集成每天（工作日可能超过 90000 个）
120000 个自动化测试套件
每天运行 7500 万个测试用例
100 多名工程师从事测试工程、持续集成和发布工程工具，以提高开发人员的工作效率（占研发人员总数的 0.5%）。     
模式2：在谷歌启动和移交准备审查模式2：在谷歌启动和移交准备审查
    即使开发人员在日常工作中在类似于生产的环境中编写和运行代码，运维时仍然会经历灾难性的生产发布，因为这是我们第一次真正看到我们的代码在发布期间和真实生产条件下的行为。之所以会出现此结果，是因为在软件生命周期中，运维人员介入的学习通常发生得太晚了。
如果这个问题不能解决，结果通常是难以维护的生产软件。正如一位匿名运维工程师曾经说过的，“在我们的团队中，大多数系统管理员只持续了六个月。生产中总是发生着一切，时间很疯狂，应用程序部署是难以相信的痛苦。最糟糕的是配对应用程序服务器集群，这需要我们六个小时。在每一天，我们都觉得开发人员发自内心的讨厌我们。”
这可能是由于没有足够的运维工程师来支持所有产品团队和我们在生产中已有的服务，这在功能型和面向市场的团队中都有可能发生。
一个潜在的对策是做谷歌做的事，即让开发小组在有资格管理集中式运维小组之前，在生产中自行管理他们的服务。通过让开发人员负责部署和生产支持，我们更有可能顺利过渡到操作。为了防止有问题的、自我管理的服务进入生产并产生组织风险的可能性，我们可以定义必须满足的启动要求，以便服务与实际客户交互并暴露于实际生产环境中交通。此外，为了帮助产品团队，运维工程师应该充当顾问，帮助他们做好生产准备。
通过创建发布指南，我们帮助确保每个产品团队都能从整个组织的累积和集体经验中获益，尤其是运维人员。启动指南和要求可能包括以下内容：
 缺陷计数和严重性
应用程序是否实际按照设计运行？
 警报的类型/频率
应用程序是否在生产中生成了无法支持的警报数？
 监控覆盖范围
监视的覆盖范围是否足以在出现问题时恢复服务？
 系统架构
服务耦合是否足以松散，方便生产中的快速更改和部署？
 部署过程
是否有可预测的、确定性的和足够自动化的流程将代码部署到生产中？
 生产环境的隔离