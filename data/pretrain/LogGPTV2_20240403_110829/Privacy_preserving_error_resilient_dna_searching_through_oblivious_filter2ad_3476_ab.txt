formed into an equivalent complete automaton by adding
a sink state). We represent the states as integers in Z|Q|,
the inputs as integers in Z|Σ|, and the transition function as
a matrix ∆ ∈ M|Σ|×|Q|(Z|Q|), such that ∆(i, j) represents
the next state when the FSM sees an input i ∈ Σ and is in
current state j ∈ Q. A string x = x0x1 . . . xN −1 ∈ ΣN is
said to be accepted by the ﬁnite automaton M if the state
qN = ∆(· · · ∆(∆(q0, x0), x1) · · · , xN −1)
is a ﬁnal state qN ∈ F .
The language accepted by a ﬁnite automaton M is the
subset of all strings from Σ∗ it accepts.
It is known that
the sets accepted by FSMs and regular sets coincide. Thus,
for every regular expression there is a ﬁnite automaton that
accepts only words that match that expression, and vice-
versa.
Finite automata can only express decision problems; thus,
they are also called acceptors. The theory of automata has
been extended to ﬁnite state machines that are capable of
producing a string over a ﬁnite alphabet Π as output. Au-
tomata with non-binary output are called transducers, and
they can be classiﬁed into two groups:
• Moore machines: At each transition, the automaton
produces one symbol as output, being this a func-
tion of the current state of the machine. Formally, a
Moore machine is a 6-tuple (Q, Σ, Π, ∆, λ, q0), where
Q, Σ, ∆, q0 have the same meaning as for FSMs. Π
denotes the output alphabet, and λ ∈ Π|Q| is a vector
whose components λ(q) encode the output symbol of
the machine at a given state q.
• Mealy machines: At each transition, the automaton
produces one output symbol, which can depend on the
transition taken. Formally, a Mealy machine is a 6-
tuple (Q, Σ, Π, ∆, Λ, q0), where Q, Σ, ∆, q0 have the
same meaning as for FSMs. Π denotes the output
alphabet, and Λ ∈ M|Σ|×|Q|(Π) is a matrix whose
components λ(a, q) encode the output of the machine
for a given state q and input symbol a.
In general, Moore machines are as expressive as Mealy
machines; however, a Mealy machine may need a smaller
number of states than its equivalent Moore machine.
3. RELATED WORK
Simple privacy-preserving problems can be solved through
the application of generic Secure Multiparty Computation
protocols [24, 6]. Nevertheless, most of the generic solu-
tions are not practical. Thus, speciﬁc protocols must be de-
veloped for eﬃciently dealing with each privacy-demanding
application. The problem posed in this paper is one exem-
plary instance where generic solutions yield to particularly
ineﬃcient protocols; this is mainly due to the need for error-
resilience in the search process.
Secure Function Evaluation is a special case of Secure Mul-
tiparty Computation [8, 7] in which a set of players want to
evaluate a function, known to all players, on their private
inputs. Both concepts were introduced by Yao [24]. Subse-
quently, various approaches to securely evaluating a function
have been developed for diﬀerent function representations,
namely combinatorial circuits [8, 24, 12], ordered binary de-
cision diagrams [13], branching programs [18, 17], or one-
dimensional look-up tables [17]. Each of these approaches
can achieve a practical and eﬃcient oblivious protocol for
evaluating a given function f , if f can be expressed in a
space-eﬃcient manner in the chosen representation.
The problem of secure function evaluation is symmetric,
in the sense that all parties agree on the function to be
evaluated, and all parties hold a subset of the input to that
function. The only concern is to keep the inputs of each
participant private, whereas the function is assumed to be
common knowledge. In contrast, the problem considered in
the present work is highly asymmetric, in the sense that only
one party (the server) knows the function that is evaluated,
whereas the other party (the client) holds the corresponding
input. From a higher level perspective, both parties agree on
some speciﬁc functionality (i.e., a class of functions), while
the speciﬁc function to be evaluated is considered a private
input of one party.
To the best of our knowledge, only the work in [2, 3] gives
an eﬃcient solution for a problem akin to privacy preserv-
ing approximate string searching. In that work, the authors
present a protocol for privacy preserving Edit distance eval-
uation. The calculation of the Edit distance is performed
through a dynamic programming algorithm [4] that achieves
linear time complexity in the product of the lengths of the
aligned sequences. The authors of [2, 3] implement an obliv-
ious version of the dynamic programming algorithm that
achieves the same order of complexity. If a threshold in the
number of admissible errors is established, their protocol
can be regarded as a solution to a particular instance of the
problem of approximate string matching. As a central tool in
the construction, the authors run an instance of Yao’s Mil-
lionaire’s problem at each step of the dynamic programming
algorithm, making the solution ineﬃcient in practice.
The protocol in [2, 3] can be extended to solve the approxi-
mate string searching problem as well. However, the number
of comparisons involved in the dynamic programming algo-
rithm grows with the product of the length of the strings.
The solution proposed in this paper completely avoids com-
parisons of encrypted values, thus overcoming this scalabil-
ity problem. Furthermore, our solution is more general, as
it is not limited to approximate matching or searching, but
can be applied to any regular expression matching problem
in sequences formed by symbols of a ﬁnite alphabet.
For solving the posed problem, we use secret sharing [5],
homomorphic encryption and 1-out of-m oblivious transfer
OTm
[19], and develop a speciﬁc protocol for the secure
1
evaluation of a ﬁnite automaton. To the best of our knowl-
edge, there is no previous work on protocols for privately
running ﬁnite automata, and the adaptation of generic con-
structions for secure function evaluation (e.g., Generalized
Indirect Indexing [18, 17] or Mix and Match [12]) poses sev-
eral problems, as these primitives cannot eﬃciently index
two-dimensional matrices. For a straightforward applica-
tion of these techniques, the state transition matrix of the
automaton must be ﬂattened, and in each processing step
an amount of data equivalent to the whole matrix must be
transferred between both parties. This results in a com-
munication complexity of O(N · |Q| · |Σ|). In contrast, the
solution of Section 4 achieves a communication complexity
that is both linear in |Q| and |Σ|.
4. SECURE EXECUTION OF FINITE
AUTOMATA
The problem of obliviously running an automaton can
be informally stated as an asymmetric function evaluation
problem, in which one party possesses a function f and the
other party owns the input x to that function. One or both
of those parties want to obtain the evaluation of f (x), but
neither party wants to disclose his own data. Here, the func-
tion f is implemented as a ﬁnite state machine (FSM), and
the output f (x) encodes whether x was accepted by the
FSM.
More formally, let (Q, Σ, ∆, q0, F ) be a deterministic FSM,
whose description is owned by party A. Let x = x0x1 . . .
xN −1 ∈ ΣN be an input to that FSM; x is owned by party
B. Both parties want to run the FSM on B’s input, in such
a way that A will not get any information about the input
string x except its length, and the only information B can
get about the FSM is its number of states |Q|.
4.1 Proposed Solution
For the oblivious run of an automaton in the presented
scenario, both parties engage in an interactive protocol, whose
number of rounds is linear in the length of the input string
x. In particular, the protocol is composed of three subpro-
tocols, one for performing the ﬁrst state transition, one for
performing an arbitrary transition of the automaton, and
one for announcing the result.
The ﬁrst subprotocol performs the ﬁrst state transition
of the automaton, starting from its initial state, and read-
ing the ﬁrst input symbol of x. The subprotocol distributes
shares of the following state to both A and B. Subsequently,
for each further state transition, the second subprotocol is
executed. Starting from the shares of the current state, it
jointly calculates the transition to the next state in an obliv-
ious way. At the end of the subprotocol, shares of the sub-
sequent state are distributed to A and B. After all state
transitions have been performed (i.e., all symbols of x have
been consumed), the last subprotocol is used to determine
whether the computation of the automaton ended in a ﬁnal
state.
In the following we assume that the encryption system is
set up such that B holds the decryption key; however, it
can also be implemented with a (fair) threshold encryption
scheme requiring a joint decryption step. In the latter case,
the result is revealed to both parties.
Subprotocol: First State Transition
This subprotocol performs the ﬁrst state transition of the
automaton.
1. A generates a random r(1)
a ∈R Z|Q|; then, he selects
the column q0 of ∆ as vector and blinds every element
with r(1)
a :
v(0)
i = ∆(i, q0) + r(1)
i = 0, . . . , |Σ| − 1.
a mod |Q|,
2. Both parties engage in an OT|Σ|
1 , being A the sender
and B the chooser, in which B gets the element with
index x0 of v(0). This element corresponds to
q(1) + r(1)
a mod |Q|.
At the end of this subprotocol, both parties share the next
state q(1) of the automaton.
Subprotocol: k-th State Transition
In this step, both parties use their shares of the current
machine state as input, i.e., A holds r(k)
b =
q(k) + r(k)
and B holds r(k)
a mod |Q|.
a
1. A generates a random r(k+1)
∈R Z|Q|, and blinds every
element of the matrix ∆ with it. At the same time,
A rotates the rows of ∆, r(k)
positions to the left,
obtaining the matrix ∆(k) with elements
a
a
∆(k)(i, j+r(k)
a
mod |Q|) = ∆(i, j)+r(k+1)
a
mod |Q|.
2. B generates a binary vector e(k) of length |Q|, consist-
. B encrypts
ing in all zeros and a one at position r(k)
this vector E[e(k)] and sends the encryptions to A.
b
3. A performs the matrix-vector product v(k) = ∆(k) ·
e(k) under encryption, making use of the homomorphic
properties of the encryption operation, obtaining the
|Σ|-length encrypted vector E[v(k)]. This result corre-
sponds to an encryption of the column at position r(k)
of ∆(k), or equivalently, the column at position q(k) of
∆, the blinded transition vector for the current state.
b
4. Both parties engage in an OT|Σ|
1 , being A the sender
and B the chooser, in which B gets the element with
index xk of E[v(k)]. This element corresponds to the
encryption of
q(k+1) + r(k+1)
a
mod |Q|,
that can be recovered by B through decryption.
At the end of this subprotocol, both parties share the next
state q(k+1).
Subprotocol: Announcement of Result
Once all the elements of x have been consumed by A’s FSM,
the last step determines whether the reached state is a ﬁnal
state. Again, the parties use shares of the reached state
as private inputs, i.e., A holds r(N )
=
q(N ) + r(N )
and B holds r(N )
a mod |Q|.
a
b
1. A generates a random binary vector f as
f (j + r(N )
a
mod |Q|) = [j ∈ F ],
j = 0, . . . , |Q| − 1,
whose Boolean elements encode whether a state j is
a ﬁnal state, having ones in the indices correspond-
ing to acceptance states and zeros in those indices cor-
responding to non-acceptance states. This vector is
shifted, so that the index r(N )
that B possesses repre-
sent the position of the acceptance of the actual ﬁnal
state.
b
2. Both parties engage in an OT|Q|
1 , being A the sender
and B the chooser, in which B gets the element with
index r(N )
of f . This element gives the binary output
of the FSM.
b
4.2 Complexity Evaluation
As 1-out-of-m oblivious transfer (OTm
1 ) can be imple-
mented with linear communication complexity, the commu-
nication complexity for each subprotocol is O(|Q| + |Σ|).
Furthermore, as one subprotocol needs to be performed for
each symbol of the input string, the communication com-
plexity for obliviously running a FSM on an input of length
N is
O (N · (|Q| + |Σ|)) .
Thus, the complexity is linear in the number of states and
in the size of the input alphabet (instead of linear in their
product). This implies a great improvement in complexity
with respect to generic approaches for big input alphabets
and high number of states.
Regarding the computational complexity, we will use the
OT protocol of Naor and Pinkas [19] for implementing OTm
1 ,
as this protocol has an amortized complexity of O(m) prod-
ucts for the sender and O(1) products for the chooser. With
these magnitudes for the OT subblocks, it is easy to see that
the total computational complexity for A is O(N · |Σ| · |Q|),
being the matrix multiplication performed at each step the
most costly operation. On the other hand, the amortized
complexity for B is just O(N · |Q|), being the encryption of
the vector that determines the shifted current state (e(k))
the most costly operation. It must be noted that the oper-
ations in the protocol can be transposed, in such a way that
(e(k)) represent the current symbol, and the result of the
matrix multiplication in step 3 of the k-th state transition
subprotocol produces a vector of blinded next states for the
current symbol. In this way, the roles of the dimensions |Q|
and |Σ| are interchanged. Thus, the amortized complexity