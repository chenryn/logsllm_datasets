To configure the falling threshold or rising threshold, include the falling-threshold or rising-threshold
statement at the [edit snmp rmon alarm index] hierarchy level:
[edit snmp rmon alarm index]
falling-threshold integer;
rising-threshold integer;
integer can be a value from -2,147,483,647 through 2,147,483,647.
Configure the Interval
The interval represents the period of time, in seconds, over which the monitored variable is sampled and
compared with the rising and falling thresholds.
To configure the interval, include the interval statement and specify the number of seconds at the [edit
snmp rmon alarm index] hierarchy level:
[edit snmp rmon alarm index]
interval seconds;
seconds can be a value from 1 through 2,147,483,647. The default is 60 seconds.
Configure the Falling Threshold Interval
The falling threshold interval represents the interval between samples when the rising threshold is
crossed. Once the alarm crosses the falling threshold, the regular sampling interval is used.
NOTE: You cannot configure the falling threshold interval for alarms that have the request type
set to walk-request.
704
To configure the falling threshold interval, include the falling-threshold interval statement at the [edit snmp
rmon alarm index] hierarchy level and specify the number of seconds:
[edit snmp rmon alarm index]
falling-threshold-interval seconds;
seconds can be a value from 1 through 2,147,483,647. The default is 60 seconds.
Configure the Request Type
By default an RMON alarm can monitor only one object instance (as specified in the configuration). You
can configure a request-type statement to extend the scope of the RMON alarm to include all object
instances belonging to a MIB branch or to include the next object instance after the instance specified in
the configuration.
To configure the request type, include the request-type statement at the [edit snmp rmon alarm index]
hierarchy level and specify get-next-request, get-request, or walk-request:
[edit snmp rmon alarm index]
request-type (get-next-request | get-request | walk-request);
walk extends the RMON alarm configuration to all object instances belonging to a MIB branch. next
extends the RMON alarm configuration to include the next object instance after the instance specified
in the configuration.
Configure the Sample Type
The sample type identifies the method of sampling the selected variable and calculating the value to be
compared against the thresholds. If the value of this object is absolute-value, the value of the selected
variable is compared directly with the thresholds at the end of the sampling interval. If the value of this
object is delta-value, the value of the selected variable at the last sample is subtracted from the current
value, and the difference is compared with the thresholds.
To configure the sample type, include the sample-type statement and specify the type of sample at the
[edit snmp rmon alarm index] hierarchy level:
[edit snmp rmon alarm index]
sample-type (absolute-value | delta-value);
• absolute-value—Actual value of the selected variable is compared against the thresholds.
• delta-value—Difference between samples of the selected variable is compared against the thresholds.
705
Configure the Startup Alarm
The startup alarm identifies the type of alarm that can be sent when this entry is first activated. You can
specify it as falling-alarm, rising-alarm, or rising-or-falling-alarm.
To configure the startup alarm, include the startup-alarm statement and specify the type of alarm at the
[edit snmp rmon alarm index] hierarchy level:
[edit snmp rmon alarm index]
startup-alarm (falling-alarm | rising-alarm | rising-or-falling-alarm);
• falling-alarm—Generated if the first sample after the alarm entry becomes active is less than or equal
to the falling threshold.
• rising-alarm—Generated if the first sample after the alarm entry becomes active is greater than or
equal to the rising threshold.
• rising-or-falling-alarm—Generated if the first sample after the alarm entry becomes active satisfies
either of the corresponding thresholds.
The default is rising-or-falling-alarm.
Configure the System Log Tag
The syslog-subtag statement specifies the tag to be added to the system log message. You can specify a
string of not more than 80 uppercase characters as the system log tag.
To configure the system log tag, include the syslog-subtag statement at the [edit snmp rmon alarm index]
hierarchy level:
[edit snmp rmon alarm index]
syslog-subtag syslog-subtag;
Configure the Variable
The variable identifies the MIB object that is being monitored.
To configure the variable, include the variable statement and specify the object identifier or object name
at the [edit snmp rmon alarm index] hierarchy level:
[edit snmp rmon alarm index]
variable oid-variable;
706
oid-variable is a dotted decimal (for example, 1.3.6.1.2.1.2.1.2.2.1.10.1) or MIB object name (for example,
ifInOctets.1).
Configure an RMON Event Entry and Its Attributes
An event entry generates a notification for an alarm entry when its rising or falling threshold is crossed.
You can configure the type of notification that is generated. To configure the event entry, include the
event statement at the [edit snmp rmon] hierarchy level. All statements except the event statement are
optional.
[edit snmp rmon]
event index {
community community-name;
description description;
type type;
}
index identifies an entry event.
community-name is the trap group that is used when generating a trap. If that trap group has the rmon-alarm
trap category configured, a trap is sent to all the targets configured for that trap group. The community
string in the trap matches the name of the trap group. If nothing is configured, all the trap groups are
examined, and traps are sent using each group with the rmon-alarm category set.
description is a text string that identifies the entry.
The type variable of an event entry specifies where the event is to be logged. You can specify the type as
one of the following:
• log—Adds the event entry to the logTable.
• log-and-trap—Sends an SNMP trap and creates a log entry.
• none—Sends no notification.
• snmptrap—Sends an SNMP trap.
The default for the event entry type is log-and-trap.
707
Example: Configure an RMON Alarm and Event Entry
Configure an RMON alarm and event entry:
[edit snmp]
rmon {
alarm 100 {
description “input traffic on fxp0”;
falling-event-index 100;
falling-threshold 10000;
interval 60;
rising-event-index 100;
rising-threshold 100000;
sample-type delta-value;
startup-alarm rising-or-falling-alarm;
variable ifInOctets.1;
}
event 100 {
community bedrock;
description” emergency events”;
type log-and-trap;
}
}
Use alarmTable to Monitor MIB Objects
IN THIS SECTION
Create an Alarm Entry | 708
Configure the Alarm MIB Objects | 708
Activate a New Row in alarmTable | 711
Modify an Active Row in alarmTable | 711
Deactivate a Row in alarmTable | 712
708
To use alarmTable to monitor a MIB object, perform the following tasks:
Create an Alarm Entry
To create an alarm entry, first create a new row in alarmTable using the alarmStatus object. For example,
create alarm #1 using the UCD command-line utilities:
snmpset -Os -v2c router community alarmStatus.1 i createRequest
Configure the Alarm MIB Objects
IN THIS SECTION
alarmInterval | 709
alarmVariable | 709
alarmSampleType | 709
alarmValue | 709
alarmStartupAlarm | 710
alarmRisingThreshold | 710
alarmFallingThreshold | 710
alarmOwner | 711
alarmRisingEventIndex | 711
alarmFallingEventIndex | 711
Once you have created the new row in alarmTable, configure the following Alarm MIB objects:
NOTE: Other than alarmStatus, you cannot modify any of the objects in the entry if the
associated alarmStatus object is set to valid.
709
alarmInterval
The interval, in seconds, over which data is sampled and compared with the rising and falling thresholds.
For example, to set alarmInterval for alarm #1 to 30 seconds, use the following SNMP Set request:
snmpset -Os -v2c router community alarmInterval.1 i 30
alarmVariable
The object identifier of the variable to be sampled. During a Set request, if the supplied variable name is
not available in the selected MIB view, a badValue error is returned. If at any time the variable name of
an established alarmEntry is no longer available in the selected MIB view, the probe changes the status
of alarmVariable to invalid. For example, to identify ifInOctets.61 as the variable to be monitored, use
the following SNMP Set request:
snmpset -Os -v2c router community alarmVariable.1 o .1.3.6.1.2.1.2.2.1.10.61
alarmSampleType
The method of sampling the selected variable and calculating the value to be compared against the
thresholds. If the value of this object is absoluteValue, the value of the selected variable is compared
directly with the thresholds at the end of the sampling interval. If the value of this object is deltaValue,
the value of the selected variable at the last sample is subtracted from the current value, and the
difference is compared with the thresholds. For example, to set alarmSampleType for alarm #1 to
deltaValue, use the following SNMP Set request:
snmpset -Os -v2c router community alarmSampleType.1 i deltaValue
alarmValue
The value of the variable during the last sampling period. This value is compared with the rising and
falling thresholds. If the sample type is deltaValue, this value equals the difference between the samples
at the beginning and end of the period. If the sample type is absoluteValue, this value equals the sampled
value at the end of the period.
710
alarmStartupAlarm
An alarm that is sent when this entry is first set to valid. If the first sample after this entry becomes valid
is greater than or equal to risingThreshold, and alarmStartupAlarm is equal to risingAlarm or
risingOrFallingAlarm, then a single rising alarm is generated. If the first sample after this entry becomes
valid is less than or equal to fallingThreshold and alarmStartupAlarm is equal to fallingAlarm or
risingOrFallingAlarm, then a single falling alarm is generated. For example, to set alarmStartupAlarm for alarm
#1 to risingOrFallingAlarm, use the following SNMP Set request:
snmpset -Os -v2c router community alarmStartupAlarm.1 i risingOrFallingAlarm
alarmRisingThreshold
A threshold for the sampled variable. When the current sampled value is greater than or equal to this
threshold, and the value at the last sampling interval is less than this threshold, a single event is
generated. A single event is also generated if the first sample after this entry becomes valid is greater
than or equal to this threshold, and the associated alarmStartupAlarm is equal to risingAlarm or
risingOrFallingAlarm. After a rising event is generated, another rising event cannot be generated until the
sampled value falls below this threshold and reaches alarmFallingThreshold. For example, to set
alarmRisingThreshold for alarm #1 to 100000, use the following SNMP Set request:
snmpset -Os -v2c router community alarmRisingThreshold.1 i 100000
alarmFallingThreshold
A threshold for the sampled variable. When the current sampled value is less than or equal to this
threshold, and the value at the last sampling interval is greater than this threshold, a single event is
generated. A single event is also generated if the first sample after this entry becomes valid is less than
or equal to this threshold, and the associated alarmStartupAlarm is equal to fallingAlarm or
risingOrFallingAlarm. After a falling event is generated, another falling event cannot be generated until the
sampled value rises above this threshold and reaches alarmRisingThreshold. For example, to set
alarmFallingThreshold for alarm #1 to 10000, use the following SNMP Set request:
snmpset -Os -v2c router community alarmFallingThreshold.1 i 10000
711
alarmOwner
Any text string specified by the creating management application or the command-line interface (CLI).
Typically, it is used to identify a network manager (or application) and can be used for fine access control
between participating management applications.
alarmRisingEventIndex
The index of the eventEntry object that is used when a rising threshold is crossed. If there is no
corresponding entry in eventTable, then no association exists. If this value is zero, no associated event is
generated because zero is not a valid event index. For example, to set alarmRisingEventIndex for alarm
#1 to 10, use the following SNMP Set request:
snmpset -Os -v2c router community alarmRisingEventIndex.1 i 10
alarmFallingEventIndex
The index of the eventEntry object that is used when a falling threshold is crossed. If there is no
corresponding entry in eventTable, then no association exists. If this value is zero, no associated event is
generated because zero is not a valid event index. For example, to set alarmFallingEventIndex for alarm
#1 to 10, use the following SNMP Set request:
snmpset -Os -v2c router community alarmFallingEventIndex.1 i 10
Activate a New Row in alarmTable
To activate a new row in alarmTable, set alarmStatus to valid using an SNMP Set request:
snmpset -Os -v2c router community alarmStatus.1 i valid
Modify an Active Row in alarmTable
To modify an active row, first set alarmStatus to underCreation using an SNMP Set request:
snmpset -Os -v2c router community alarmStatus.1 i underCreation
712
Then change the row contents using an SNMP Set request:
snmpset -Os -v2c router community alarmFallingThreshold.1 i 1000
Finally, activate the row by setting alarmStatus to valid using an SNMP Set request:
snmpset -Os -v2c router community alarmStatus.1 i valid
Deactivate a Row in alarmTable
To deactivate a row in alarmTable, set alarmStatus to invalid using an SNMP Set request:
snmpset -Os -v2c router community alarmStatus.1 i invalid
Use eventTable to Log Alarms
IN THIS SECTION
Create an Event Entry | 712
Configure the MIB Objects | 713
Activate a New Row in eventTable | 715
Deactivate a Row in eventTable | 715
To use eventTable to log alarms, perform the following tasks:
Create an Event Entry
The RMON eventTable controls the generation of notifications from the router. Notifications can be logs
(entries to logTable and syslogs) or SNMP traps. Each event entry can be configured to generate any
combination of these notifications (or no notification). When an event specifies that an SNMP trap is to
be generated, the trap group that is used when sending the trap is specified by the value of the
associated eventCommunity object. Consequently, the community in the trap message will match the
value specified by eventCommunity. If nothing is configured for eventCommunity, a trap is sent using
each trap group that has the rmon-alarm category configured.
713
Configure the MIB Objects
IN THIS SECTION
eventType | 713
eventCommunity | 713
eventOwner | 714
eventDescription | 714
Once you have created the new row in eventTable, set the following objects:
NOTE: The eventType object is required. All other objects are optional.
eventType
The type of notification that the router generates when the event is triggered.
This object can be set to the following values:
• log—Adds the event entry to logTable.
• log-and-trap—Sends an SNMP trap and creates a log entry.
• none—Sends no notification.
• snmptrap—Sends an SNMP trap.
For example, to set eventType for event #1 to log-and-trap, use the following SNMP Set request:
snmpset -Os -v2c router community eventType.1 i log-and-trap
eventCommunity
The trap group that is used when generating a trap (if eventType is configured to send traps). If that trap
group has the rmon-alarm trap category configured, a trap is sent to all the targets configured for that
trap group. The community string in the trap matches the name of the trap group (and hence, the value
714
of eventCommunity). If nothing is configured, traps are sent to each group with the rmon-alarm category
set. For example, to set eventCommunity for event #1 to boy-elroy, use the following SNMP Set request:
snmpset -Os -v2c router community eventCommunity.1 s "boy-elroy"
NOTE: The eventCommunity object is optional. If you do not set this object, then the field is left
blank.
eventOwner
Any text string specified by the creating management application or the command-line interface (CLI).
Typically, it is used to identify a network manager (or application) and can be used for fine access control
between participating management applications.
For example, to set eventOwner for event #1 to george jetson, use the following SNMP Set request:
snmpset -Os -v2c router community eventOwner.1 s "george jetson"
NOTE: The eventOwner object is optional. If you do not set this object, then the field is left
blank.
eventDescription
Any text string specified by the creating management application or the command-line interface (CLI).
The use of this string is application dependent.
For example, to set eventDescription for event #1 to spacelys sprockets, use the following SNMP Set
request:
snmpset -Os -v2c router community eventDescription.1 s "spacelys sprockets"
NOTE: The eventDescription object is optional. If you do not set this object, then the field is left
blank.
715
Activate a New Row in eventTable
To activate the new row in eventTable, set eventStatus to valid using an SNMP Set request such as:
snmpset -Os -v2c router community eventStatus.1 i valid
Deactivate a Row in eventTable
To deactivate a row in eventTable, set eventStatus to invalid using an SNMP Set request such as:
snmpset -Os -v2c router community eventStatus.1 i invalid
Configure RMON History Sampling
IN THIS SECTION
Configure RMON History Sampling Collection | 715
View and Clear RMON History Statistics | 716
The Junos OS supports the history control group (etherHistoryTable) of the Remote Network Monitoring
(RMON) MIB (RFC 2819). The history control tables record statistical samples from an Ethernet network
and store them for later retrieval.
To configure RMON history sampling and view or clear collected statistics using the Junos OS CLI,
perform the following tasks:
Configure RMON History Sampling Collection
Use the history statement at the [edit snmp rmon] hierarchy level to configure RMON history sampling
collection parameters. The following parameters are required:
716
• History index: The history entry is identified by an integer history index value (historyControlIndex MIB
field) specified when you configure this statement, which is used to display or clear collected results
later.
• Interface: The interface to monitor for the specified history index. Only one interface can be
associated with a particular RMON history index.
In addition to the required parameters, you can specify a custom sampling interval (in seconds) and the
sampling bucket-size (number of discrete samples to be collected in a given interval).
[edit snmp]
user@switch# set rmon history history-index interface interface-name
user@switch# set rmon history history-index interval seconds
user@switch# set rmon history history-index bucket-size number
An optional tag (owner) associated with the history index can also be assigned to the collection.
View and Clear RMON History Statistics
Use the show snmp rmon history command to display collected RMON history table entries. You can also
use the show snmp mib walk command to view RMON history table field samples.
The following sample RMON configuration sets up a history table sampling for interface xe-0/0/20.0
using a history index value of 1:
user@switch# show snmp | display set
set snmp rmon history 1 interface xe-0/0/20.0
set snmp rmon history 1 bucket-size 1000
set snmp rmon history 1 interval 5
set snmp rmon history 1 owner test
Using the show snmp mib walk command, you can see etherHistoryPkts field statistics collected for history
index 1:
user@switch> show snmp mib walk etherHistoryPkts
etherHistoryPkts.1.1 = 0
etherHistoryPkts.1.148 = 10
etherHistoryPkts.1.149 = 14
717
To clear collected RMON history statistics, use the clear snmp history command. After clearing samples
collected up to that point, collection continues again at the configured interval, and new samples are
recorded. This command has options to clear collected samples of a particular configured history index
or to clear all samples from all configured indices.
For example, the following command clears collected RMON history samples for history control index 1
configured above:
user@switch> clear snmp history 1
Samples collected are cleared.
user@switch> show snmp mib walk etherHistoryPkts | no-more
user@switch> show snmp mib walk etherHistoryPkts | no-more
etherHistoryPkts.1.1 = 0
Monitor Network Service Quality by using RMON
IN THIS SECTION
RMON for Monitoring Service Quality | 718
Understanding Measurement Points, Key Performance Indicators, and Baseline Values | 723
Define and Measure Network Availability | 725
Measure Health | 733
Measure Performance | 742
718
RMON for Monitoring Service Quality