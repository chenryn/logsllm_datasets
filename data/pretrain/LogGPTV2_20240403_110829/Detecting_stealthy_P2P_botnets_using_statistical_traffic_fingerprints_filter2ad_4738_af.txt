u
m
E
2
s
e
r
A
1
c
a
d
e
a
W
l
3
c
a
d
e
a
W
l
2
c
a
d
e
a
W
l
C
@
2
e
p
y
k
S
2
e
p
y
k
S
C
@
3
e
p
y
k
S
C
@
1
e
p
y
k
S
1
t
n
e
r
r
o
t
t
i
B
2
e
r
i
w
e
m
L
i
Cut at
Θbot ∗ hightmax = 0.475
2
m
r
o
t
S
6
m
r
o
t
S
0
1
m
r
o
t
S
3
m
r
o
t
S
7
m
r
o
t
S
1
m
r
o
t
S
9
m
r
o
t
S
1
1
m
r
o
t
S
8
m
r
o
t
S
2
1
m
r
o
t
S
3
1
m
r
o
t
S
5
m
r
o
t
S
4
m
r
o
t
S
13 Storm Bots
3 Waledac Bots
3 Waledac Bots
13 Storm Bots
(a) On Data Set D1 (bots are not overlaid with legitimate P2P apps)
hclust (*, "single")
Cut:  0.475164544800102
(b) On Data Set D2 (bots are overlaid with legitimate P2P apps)
Cut:  0.475
hclust (*, "single")
5) Analyzing The Effect of System Parameters
parameters and shows great efﬁciency.
Figure 5: Hierarchical Tree on Persistent P2P Hosts
While the measurement in Section III motivates the pa-
rameter values for Θ𝑜, Θ𝑏𝑝𝑔 and Θ𝑝2𝑝, we study system
parameters 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ and Θ𝑏𝑜𝑡
in this section. 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ
may introduce a trade-off between system efﬁciency and
effectiveness. For example, by decreasing 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ,
the
system has less vectors to process in Hierarchical clustering
and thus increase the system efﬁciency. However, a small
𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ may force dissimilar ﬂows to be aggregated into
the same sub-cluster and therefore into the same ﬁngerprint
cluster, resulting in inaccurate ﬁngerprint clusters.
To evaluate 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ and Θ𝑏𝑜𝑡, we conducted the follow-
ing experiments. We applied our system 𝐷2 with different
𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ values, including 2000, 4000, 8000 and 10000. The
time consumption of our system is presented in Figure 4(b),
which demonstrates a signiﬁcant efﬁciency improvement as
𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ decreases. For each 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ value, we further
adopted different Θ𝑏𝑜𝑡 (i.e., 0.1, 0.3..0.95) values to evaluate
the detection rate and false positive rate. The results of
detection rate (DR) and false positive (FP) rate are described
in Table XV. The experimental results indicate that: 1)
The two-level clustering scheme can greatly increase the
system efﬁciency. For example, 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ = 4000 enables
a reduction of time consumption by 90% compared to
𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ = 10000 without sacriﬁcing the detection accu-
racy. 2) The detection performance is stable over a large
range of 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ (e.g., ≥ 4000) and Θ𝑏𝑜𝑡 ∈ [0.7, 0.95] is
a good candidate value. This experiment also suggests that
0.8 or 0.9 may be a better value for Θ𝑏𝑜𝑡. This implies that
when a labeled data set of P2P botnet trafﬁc is available
we can tune this threshold (Θ𝑏𝑜𝑡) to ﬁnd a better trade-off
between false positives and false negatives.
In summary, our system can effectively detect all the P2P
bots with a very low false positive rate, even if the bot-
compromised hosts are running legitimate P2P applications.
Our system is stable over a large range of values for system
V. DISCUSSION
For practical deployment, the system can be conﬁgured to
automatically run daily. In this case, Argus and dnscap
collect ﬂow and DNS data in real-time and our detection
system analyzes the data in batches at the end of each
day. The memory consumption is mainly constrained by
the maximum number of ﬂows per host. And the time
consumption is mainly bounded by 𝑁ℎ𝑜𝑠𝑡 ∗ 𝑂(𝐶𝑛𝑡2
𝑏𝑖𝑟𝑐ℎ)
(for the ﬂow-clustering-based analysis), where 𝑁ℎ𝑜𝑠𝑡 is the
number of hosts in the monitored network.
If botmasters get to know about our detection algorithm,
they could attempt to modify their bots’ network behavior
to evade detection. This situation is analogous to evasion
attacks against other intrusion detection systems. Since our
detection algorithm is based on differentiating P2P proto-
cols used by P2P bots from legitimate P2P applications,
botmasters may instruct the bots to join existing legitimate
P2P networks, and use legitimate P2P networks to propa-
gate commands. The initial version of Storm adopted this
strategy. However, such approach exposes the botnet to sybil
attacks, where researchers can inﬁltrate the P2P network and
enumerate/detect the bots [8]. Therefore, current P2P botnet,
including Storm and Waledac,
isolate their own P2P
network from existing legitimate P2P networks. Botmasters
may leverage our trafﬁc volume reduction component to
evade detection. For example, the botmaster may set up a
malicious DNS server, and instruct each bot to query this
server before contacting any peer, asking the malicious DNS
server to return a response containing the peer’s IP address.
In this case, our trafﬁc reduction component would eliminate
the corresponding ﬂows from the analysis. To avoid this
evasion attempt, we could ﬁlter trafﬁc based only on DNS
responses for popular domains, i.e., domains queried by a
non-negligible fraction of hosts in the monitored networks.
Bots could also intentionally try to reduce the number of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:47:04 UTC from IEEE Xplore.  Restrictions apply. 
131contacted peer IPs (or BGP preﬁxes) or the active time
of the bot, in order to bypass the P2P client identiﬁcation
or the component that detects persistent P2P applications.
However, such techniques could have a serious negative
impact on the resiliency of the C&C infrastructure and
limit
the usability of the entire botnet. Another evasion
approach could exploit the Θ𝑝2𝑝 threshold. For example,
the P2P bots could exchange trafﬁc for a short period of
time, then go idle for several hours, and repeat this pattern.
However, this evasion technique is equivalent to increasing
the churn rate for the P2P nodes, which may eventually
bring to a complete disruption of the overlay network [4].
Bots could also randomize their P2P communication patterns
to prevent our system from getting an accurate proﬁle of
P2P protocols. For example, bots could inject noise into
network ﬂows related to P2P control messages. In this case,
we could use other features (e.g., the distribution of ﬂow
sizes) to proﬁle the P2P protocols. A P2P botnet could also
attempt to reduce the overlap between peers contacted by
the bots. For example, the botnet could partition the peers
into different sets and ask each bot to contact disjoint sets
of peers. Such technique may require a lot of efforts for
the design and operation of the P2P botnets. We leave the
analysis of such complex botnets to future work. We should
always strive to develop more robust defense techniques.
Combining different complementary detection techniques to
make the evasion harder is one of the possible directions
that we intend to explore in our future work.
VI. CONCLUSION
In this paper, we presented a novel botnet detection system
that is able to identify stealthy P2P botnets. Our system aims
to detect all P2P botnets, even in the case in which their
malicious activities may not be observable. To accomplish
this task, we ﬁrst
identify all hosts within a monitored
network that appear to be engaging in P2P communica-
tions. Then, we derive statistical ﬁngerprints of the P2P
communications generated by these hosts, and leverage the
obtained ﬁngerprints to distinguish between hosts that are
part of legitimate P2P networks (e.g., ﬁle-sharing networks)
and P2P bots. We implemented a prototype version of our
system, and performed an extensive experimental evaluation.
Our experimental results conﬁrm that the proposed system
can detect stealthy P2P bots with a high detection rate and
a low false positive rate.
ACKNOWLEDGMENTS
We thank Paul Royal for the help in collecting network
traces. This material is based upon work supported in part by
the National Science Foundation under grant no. 0831300,
the Department of Homeland Security under contract no.
FA8750-08-2-0141,
the Ofﬁce of Naval Research under
grants no. N000140710907 and no. N000140911042. Any
opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do
not necessarily reﬂect the views of the National Science
Foundation, the Department of Homeland Security, or the
Ofﬁce of Naval Research.
REFERENCES
[1] Argus: Auditing network activity. http://www.qosient.com/argus/.
[2] Autoit script. http://www.autoitscript.com/autoit3/index.shtml.
[3] A. W. Moore and D. Zuev. Internet trafﬁc classiﬁcation using bayesian
analysis techniques. In ACM SIGMETRICS, 2005.
[4] D. Stutzbach and R. Rejaie. Understanding churn in peer-to-peer
networks. In ACM SIGCOMM Internet Measurement Conf, 2006.
[5] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee. Bothunter:
Detecting malware infection through IDS-driven dialog correlation.
In Proc. USENIX Security, 2007.
[6] G. Gu, R. Perdisci, J. Zhang, and W. Lee. Botminer: Clustering
analysis of network trafﬁc for protocol- and structure-independent
botnet detection. In Proc. USENIX Security, 2008.
[7] M. Halkidi, Y. Batistakis, and M. Vazirgiannis. On clustering
validation techniques. J. Intell. Inf. Syst., 17(2-3):107–145, 2001.
[8] T. Holz, M. Steiner, F. Dahl, E. Biersack, and F. Freiling. Measure-
ments and mitigation of peer-to-peer-based botnets: A case study on
storm worm. In Proc. USENIX LEET, 2008.
[9] B. Kang, E. C. Tin, and C. P. Lee.
Towards complete node
enumeration in a peer-to-peer botnet. In Proc. ACM ASIACCS, 2009.
[10] R. Lemos. Bot software looks to improve peerage. Http://www.
securityfocus.com/news/11390, 2006.
[11] Z. Li, A. Goyal, Y. Chen, and A. Kuzmanovic. Measurement and
diagnosis of address misconﬁgured p2p trafﬁc. In IEEE INFOCOM
2010, 2010.
[12] M.P. Collins and M. K. Reiter. Finding peer-to-peer ﬁle sharing using
coarse network behaviors. In Proc. ESORICS, 2006.
[13] P. Porras, H. Saidi, and V. Yegneswaran. A multi-perspective analysis
of the storm (peacomm) worm. In Computer Science Laboratory, SRI
International, Technical Report, 2007.
[14] P. Porras, H. Saidi, and V. Yegneswaran. Conﬁcker c analysis. http:
//mtc.sri.com/Conﬁcker/addendumC/index.html, 2009.
[15] S. Nagaraja and P. Mittal and C.-Y. Hong and M. Caesar and N.
Borisov. Botgrep: Finding p2p bots with structured graph analysis.
In Proc. USENIX Security, 2010.
[16] S. Sen, O. Spatscheck, and D. Wang. Accurate, scalable in-network
In WWW,
identication of p2p trafﬁc using application signatures.
2004.
[17] G. Sinclair, C. Nunnery, and B. B. Kang. The waledac protocol: The
how and why. In Intl. Conf. Malicious and Unwanted Software, 2009.
[18] S. Stover, D. Dittrich, J. Hernandez, and S. Dietrich. Analysis of the
storm and nugache trojans: P2p is here. In USENIX; login, vol. 32,
no. 6, 2007.
[19] T.-F. Yen and M. K. Reiter. Are your hosts trading or plotting? telling
p2p ﬁle-sharing and bots apart. In ICDCS, 2010.
[20] T. Karagiannis, A.Broido, M. Faloutsos, and Kc Claffy. Transport
layer identiﬁcation of p2p trafﬁc. In ACM IMC, 2004.
[21] T. Karagiannis and K. Papagiannaki and M. Faloutsos . Blinc:
Multilevel trafﬁc classiﬁcation in the dark. In ACM SIGCOMM, 2005.
[22] Y. Zhao and Y. Xie and F. Yu and Q. Ke and Y. Yu. Botgraph: Large
scale spamming botnet detection. In Proc. USENIX NSDI, 2009.
[23] T. Zhang, R. Ramakrishnan, and M. Livny. Birch: An efﬁcient data
clustering method for very large databases. In Proc. ACM SIGMOD.
ACM Press, 1996.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:47:04 UTC from IEEE Xplore.  Restrictions apply. 
132