# P2P Botnet Detection System: Analysis and Evaluation

## 5. Analyzing the Effect of System Parameters

The system parameters, particularly \( C_{ntbirch} \) and \( \Theta_{bot} \), play a crucial role in the efficiency and effectiveness of the botnet detection system. The parameter \( C_{ntbirch} \) influences the number of vectors processed during hierarchical clustering, while \( \Theta_{bot} \) is a threshold used to differentiate between botnet traffic and legitimate P2P traffic.

### 5.1 Impact of \( C_{ntbirch} \)

Decreasing \( C_{ntbirch} \) reduces the number of vectors processed, thereby increasing the system's efficiency. However, a very small value of \( C_{ntbirch} \) may lead to the aggregation of dissimilar flows into the same sub-cluster, resulting in inaccurate fingerprint clusters.

To evaluate the impact of \( C_{ntbirch} \), we conducted experiments on dataset \( D2 \) with different values of \( C_{ntbirch} \): 2000, 4000, 8000, and 10000. The results, shown in Figure 4(b), demonstrate a significant improvement in efficiency as \( C_{ntbirch} \) decreases. For each \( C_{ntbirch} \) value, we further evaluated the detection rate (DR) and false positive (FP) rate using different \( \Theta_{bot} \) values (0.1, 0.3, ..., 0.95). The results are summarized in Table XV.

- **Efficiency Improvement**: Reducing \( C_{ntbirch} \) from 10000 to 4000 led to a 90% reduction in time consumption without sacrificing detection accuracy.
- **Detection Performance Stability**: The detection performance was stable for \( C_{ntbirch} \geq 4000 \) and \( \Theta_{bot} \in [0.7, 0.95] \). Values of 0.8 or 0.9 for \( \Theta_{bot} \) provided the best trade-off between false positives and false negatives.

### 5.2 Summary

Our system can effectively detect all P2P bots with a very low false positive rate, even when bot-compromised hosts are running legitimate P2P applications. The system is stable over a wide range of parameter values, making it robust and reliable.

## 6. Discussion

### 6.1 Practical Deployment

For practical deployment, the system can be configured to run automatically on a daily basis. Argus and dnscap collect flow and DNS data in real-time, and our detection system analyzes the data in batches at the end of each day. The memory and time consumption are primarily constrained by the maximum number of flows per host and the number of hosts in the monitored network, respectively.

### 6.2 Evasion Techniques

Botmasters may attempt to evade detection by modifying the bots' network behavior. This could include:

- **Joining Legitimate P2P Networks**: Bots could join existing legitimate P2P networks to propagate commands, but this exposes them to sybil attacks.
- **Malicious DNS Server**: Bots could use a malicious DNS server to query peer IP addresses, bypassing our traffic reduction component. To counter this, we can filter traffic based only on DNS responses for popular domains.
- **Reducing Contacted Peers and Active Time**: Bots could reduce the number of contacted peers or their active time, but this would negatively impact the resiliency of the C&C infrastructure.
- **Randomizing Communication Patterns**: Bots could randomize their P2P communication patterns to prevent accurate profiling. In response, we can use other features, such as the distribution of flow sizes, to profile P2P protocols.

### 6.3 Future Work

We aim to develop more robust defense techniques by combining different complementary detection methods to make evasion more difficult. Future work will focus on analyzing complex botnets and enhancing the system's resilience against evasion attempts.

## 7. Conclusion

In this paper, we presented a novel botnet detection system capable of identifying stealthy P2P botnets. Our system first identifies hosts engaging in P2P communications, then derives statistical fingerprints to distinguish between legitimate P2P hosts and P2P bots. Experimental results confirm that our system can detect P2P bots with high detection rates and low false positive rates.

## Acknowledgments

We thank Paul Royal for assistance in collecting network traces. This work was supported in part by the National Science Foundation, the Department of Homeland Security, and the Office of Naval Research.

## References

[1] Argus: Auditing network activity. http://www.qosient.com/argus/.
[2] Autoit script. http://www.autoitscript.com/autoit3/index.shtml.
[3] A. W. Moore and D. Zuev. Internet traffic classification using Bayesian analysis techniques. In ACM SIGMETRICS, 2005.
...
[23] T. Zhang, R. Ramakrishnan, and M. Livny. Birch: An efficient data clustering method for very large databases. In Proc. ACM SIGMOD. ACM Press, 1996.