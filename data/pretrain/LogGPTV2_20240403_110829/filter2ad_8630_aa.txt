作者：Anthem  
来源：[信安之路（ID：xazlsec）](https://mp.weixin.qq.com/s/e1jy-DFOSROmSvvzX_Ge5g
"信安之路（ID：xazlsec）")
## 前言
文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。
## 特点
  * 利用简单
  * 危害大
## 产生原因
缺少必要的校验
## 代码审计
### 基础
关于PHP中$_FILES数组的使用方法
    $_FILES\[‘file’][‘name’] 客户端文件名称
    $_FILES\[‘file’][‘type’] 文件的MIME类型
    $_FILES\[‘file’][‘size’] 文件大小 单位字节
    $_FILES\[‘file’][‘tmp_name’] 文件被上传后再服务器端临时文件名，可以在php.ini中指定
需要注意的是在文件上传结束后，默认的被储存在临时文件夹中，这时必须把他从临时目录中删除或移动到其他地方，否则，脚本运行完毕后，自动删除临时文件，可以使用copy或者`*move_uploaded_file`两个函数
### 程序员对某些常用函数的错误认识
这些函数有:`empty()、isset()、strpos()、rename()`等，如下面的代码:
    #!php
    if($operateId == 1){
        $date = date("Ymd");
        $dest = $CONFIG->basePath."data/files/".$date."/";
        $COMMON->createDir($dest);
        //if (!is_dir($dest))   mkdir($dest, 0777);
        $nameExt = strtolower($COMMON->getFileExtName($_FILES['Filedata']['name']));
        $allowedType = array('jpg', 'gif', 'bmp', 'png', 'jpeg');
        if(!in_array($nameExt, $allowedType)){
            $msg = 0;
        }
        if(empty($msg)){
            $filename = getmicrotime().'.'.$nameExt;
            $file_url = urlencode($CONFIG->baseUrl.'data/files/'.$date."/".$filename);
            $filename = $dest.$filename;
            if(empty($_FILES['Filedata']['error'])){
                move_uploaded_file($_FILES['Filedata']['tmp_name'],$filename);
            }
            if (file_exists($filename)){
                //$msg = 1;
                $msg = $file_url;
                @chmod($filename, 0444);
            }else{
                $msg = 0;
            }
        }
        $outMsg = "fileUrl=".$msg;
        $_SESSION["eoutmsg"] = $outMsg;
        exit;
    }
我们来看上面的这段代码,要想文件成功的上传, if(empty($msg))
必须为True才能进入if的分支,接下来我们来看empty函数何时返回True,看看PHP Manual怎么说,如图
很明显，""、0、"0"、NULL、FALSE、array()、var $var; 以及没有任何属性的对象都将被认为是空的，如果var为空，则返回True。
非常好，接下来我们往回看，有这样的几行代码
    #!php
    $allowedType = array('jpg', 'gif', 'bmp', 'png', 'jpeg');
    if(!in_array($nameExt, $allowedType)){
        $msg = 0;
    }
看见没有,即使我们上传类似shell.php的文件，虽然程序的安全检查把msg)后，仍然返回True，于是我们利用这个逻辑缺陷即可成功的上传shell.php。
### 程序员对某些常用函数的错误使用
这些函数有iconv()、copy()等,如下面的这段代码(摘自SiteStar)
    #!php
    public function img_create(){
         $file_info =& ParamHolder::get('img_name', array(), PS_FILES);
         if($file_info['error'] > 0){
             Notice::set('mod_marquee/msg', __('Invalid post file data!'));
             Content::redirect(Html::uriquery('mod_tool', 'upload_img'));
         }
         if(!preg_match('/\.('.PIC_ALLOW_EXT.')$/i', $file_info["name"])){
             Notice::set('mod_marquee/msg', __('File type error!'));
             Content::redirect(Html::uriquery('mod_marquee', 'upload_img'));
         }
         if(file_exists(ROOT.'/upload/image/'.$file_info["name"])){
             $file_info["name"] = Toolkit::randomStr(8).strrchr($file_info["name"],".");
         }
         if(!$this->_savelinkimg($file_info)){
             Notice::set('mod_marquee/msg', __('Link image upload failed!'));
             Content::redirect(Html::uriquery('mod_marquee', 'upload_img'));
          }
          //...
     }
    private function _savelinkimg($struct_file){
        $struct_file['name'] = iconv("UTF-8", "gb2312", $struct_file['name']);
        move_uploaded_file($struct_file['tmp_name'], ROOT.'/upload/image/'.$struct_file['name']);
        return ParamParser::fire_virus(ROOT.'/upload/image/'.$struct_file['name']);
    }
我们再来看看这段代码,
`img_create()`函数的逻辑非常严密，安全检查做的很到位。然而问题出在了`_savelinkimg()`函数，即在保存文件的前面程序员错误的使用了`iconv()`函数,并且文件名经过了此函数,为什么是错用了呢?因为啊
iconv函数在转码过程中，可能存在字符串截断的问题：
在iconv转码的过程中,utf->gb2312(其他部分编码之间转换同样存在这个问题)会导致字符串被截断，如：`$filename="shell.php(hex).jpg";`(hex为0x80-0x99)，经过iconv转码后会变成`$filename="shell.php
";`
所以，经过iconv
后`$struct_file['name'])`为shell.php，于是我们利用这个逻辑缺陷可以成功的上传shell.php(前提是上传的文件名为`shell.php{%80-%99}.jpg`)。
### 历史经典漏洞再次爆发
条件竞争漏洞,这类历史经典漏洞在逐渐淡出人们视线的时候,再次爆发..
接着看下面这段代码(摘自某VPN系统)
    #!php
上述代码的逻辑表面上看起来是这样的(对于攻击者来说)：
利用copy函数，将realfile生成shell.php-→删除掉shell.php
这样初看起来没办法利用，但是仔细一想, 这段代码其实是存在逻辑问题的，所以我们可以利用这个逻辑缺陷达到GetShell的目的。
具体利用方法：
copy成temp.php-->不断访问temp.php->temp.php生成shell.php->删除temp.php
## 校验方式分类&总结
  * 客户端javascript校验（一般只校验后缀名）
  * 服务端校验
  * 文件头content-type字段校验（image/gif）
  * 文件内容头校验（GIF89a）
  * 后缀名黑名单校验
  * 后缀名白名单校验
  * 自定义正则校验
  * WAF设备校验（根据不同的WAF产品而定）
## 校验方式溯源
通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器接收到请求并同意后，用户与Web服务器将建立连接，并传输数据。一般文件上传过程中将会经过如下几个检测步骤：
## 校验方式&绕过姿势
### PUT方法
WebDAV是一种基于 HTTP 1.1协议的通信协议.它扩展了HTTP
1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法。使应用程序可直接对Web
Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。当WebDAV开启PUT，MOVE，COPY，DELETE方法时，攻击者就可以向服务器上传危险脚本文件。
此时可以使用OPTIONS探测服务器支持的http方法，如果支持PUT，就进行上传脚本文件，在通过MOVE或COPY方法改名。当开启DELETE时还可以删除文件。
参考:
### 客户端校验
#### JavaScript校验
##### 验证代码
        文件上传漏洞演示脚本--JS验证实例
           function checkFile() {
                var file = document.getElementsByName('upfile')[0].value;
                if (file == null || file == "") {
                    alert("你还没有选择任何文件，不能上传!");
                    return false;
                }
                //定义允许上传的文件类型
                var allow_ext = ".jpg|.jpeg|.png|.gif|.bmp|";
                //提取上传文件的类型
                var ext_name = file.substring(file.lastIndexOf("."));
                //alert(ext_name);