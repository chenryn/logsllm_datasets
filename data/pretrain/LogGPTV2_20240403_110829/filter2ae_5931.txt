# 第五空间 CreativityPlus & BalsnCTF 2019 Creativity
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
* * *
两道一致考点的CTF题目，放在一起进行讨论。
首先先看 BalsnCTF 的题目。  
题目给出了下面的代码。
    pragma solidity ^0.5.10;
    contract Creativity {
        event SendFlag(address addr);
        address public target;
        uint randomNumber = 0;
        function check(address _addr) public {
            uint size;
            assembly { size := extcodesize(_addr) }
            require(size > 0 && size = 100000000 ether);
            emit SendFlag(msg.sender);
        }
    }
目标是触发SendFlag() ,但是很明显 10000000 ether是很难做到的。但是他这里给出了一个  
`excute()`方法，这里可以任意调用target 地址合约的内容。  
那么就是寻找如何改变target的地址 从而成为我们自己本身的恶意合约地址。
这里有一个`check`方法，可以满足更改target地址的情况。  
但是一定要满足合约里的bytecode >0 且  0 && size  0 && size <= 10);
            (bool flag, ) = tmp.call(abi.encodeWithSignature(""));
            if(flag == true) {
                owner = msg.sender;
            }
        }
        function payforflag() public payable onlyOwner {
            emit SendFlag(msg.sender);
            selfdestruct(msg.sender);
        }
    }
前面的check还是一样的，但是最后还进行了一个10字节的check，需要你返回一个 真值。这里其实是ethernaut的一个challenge的
就是10字节部署的字节码能返回一个值。
把2a 改成01就行了。
    6001  PUSH1 0x01
    6080  PUSH1 0x80
    52    Mstore
    6020  PUSH1 0x20
    6080  PUSH1 0x80
    f3    return
`0x600160805260206080f3` 部署一下  
调用excute函数就可以了。