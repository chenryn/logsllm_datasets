       "dst_from":null,
       "dst_offset":0,
       "dst_until":null,
       "raw_offset":0,
       "timezone":"Etc/UTC",
       "unixtime":1599506733,
       "utc_datetime":"2020-09-17T21:29:49.031611+00:00",
       "utc_offset":"+00:00",
       "week_number":38
    }
为了更好分析，这里将端点地址改为本地`localhost`:
首先，`time.now()`获取当前系统的时间：
然后，JOSN数据中的`unixtime`字段被获取：
随后生成一个随机种子、一个代表域名可变长度的的随机数`ath/rand.(*Rand).Intn(0x20)`：
这个可变长度值被加入到`0x20`值中组成基本域名的长度：
当不满足终止条件时，再计算一个随机值`math/rand.(*Rand).Intn(0x539) %
0x24`最为字符数字`charset`的索引，并添加到结果域名的字符串中。这里，`charset`为`kod4y6tgirhzq1pva52jem3sfxw8u9b0ncl7`：
当满足终止条件时，计算域名的根和前缀：
这里有9中不同的根域的可能性：`.catbox.moe` `.cf` `.ga` `.gq` `.mixtape.moe` `.ml`
`.nyaa.net` `.tk` `.pomf.io` 。  
编写一个go程序`test_random.go`来计算所需的域名:
    package main
    import (
        "fmt"
        "bytes"
        "os"
        "strconv"
        "math/rand"
    )
    func main() {
        charset := "kod4y6tgirhzq1pva52jem3sfxw8u9b0ncl7"
        epoch, _ := strconv.Atoi(os.Args[1])
        seed := int64(epoch >> 0xf)
        rand.Seed(seed)
        lengthener := rand.Intn(0x20)
        buff := bytes.NewBufferString("")
        for i := 0; i   r
    Starting program:
    No executable file specified.
    Use the "file" or "exec-file" command.
检查文件头，发现头被打乱：
    r10@kali:~/tisc$ readelf -h bbs
    ELF Header:
      Magic:   7f 45 4c 46 02 01 01 03 00 00 00 00 00 00 00 00
      Class:                             ELF64
      Data:                              2's complement, little endian
      Version:                           1 (current)
      OS/ABI:                            UNIX - GNU
      ABI Version:                       0
      Type:                              EXEC (Executable file)
      Machine:                           Advanced Micro Devices X86-64
      Version:                           0x1
      Entry point address:               0x400a60
      Start of program headers:          64 (bytes into file)
      Start of section headers:          65535 (bytes into file)
      Flags:                             0x0
      Size of this header:               64 (bytes)
      Size of program headers:           56 (bytes)
      Number of program headers:         6
      Size of section headers:           64 (bytes)
      Number of section headers:         65535
      Section header string table index: 65535 (3539421402)
    readelf: Error: Reading 4194240 bytes extends past end of file for section headers
参考了[这篇文章的分析](https://binaryresearch.github.io/2020/01/15/Analyzing-ELF-Binaries-with-Malformed-Headers-Part-3-Solving-A-Corrupted-Keygenme.html)，这里应该使用了[ ELF Screwer tool ](https://dustri.org/b/screwing-elf-header-for-fun-and-profit.html)来破坏头中的`e_shoff` `e_shnum`
`e_shstrndx`字段值。为了修复进调试，编写修复脚本,生成修复后的文件`repaired_bbs`:
    #!/usr/bin/python3
    from lepton import *
    from struct import pack
    def main():
        with open("../bbs", "rb") as f:
            elf_file = ELFFile(f)
        # overwrite fields values with 0x00 bytes
        elf_file.ELF_header.fields["e_shoff"] = pack("  r
    Starting program: /vagrant/ctfs/tisc/stage5/repaired_bbs
    [Inferior 1 (process 15994) exited normally]
但是文件依然没有执行成功，而是直接退出。检查`strace`，看看是否存在反调试机制：
    r10@kali:~/tisc$ strace -f ./repaired_bbs
    execve("./repaired_bbs", ["./repaired_bbs"], 0x7ffdae1cba08 /* 27 vars */) = 0
    brk(NULL)                               = 0x2185000
    brk(0x21861c0)                          = 0x21861c0
    arch_prctl(ARCH_SET_FS, 0x2185880)      = 0
    uname({sysname="Linux", nodename="kali", ...}) = 0
    readlink("/proc/self/exe", "/stage5/repair"..., 4096) = 38
    brk(0x21a71c0)                          = 0x21a71c0
    brk(0x21a8000)                          = 0x21a8000
    access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
    ptrace(PTRACE_TRACEME)                  = -1 EPERM (Operation not permitted)
    exit_group(0)                           = ?
    +++ exited with 0 +++
寻找`patrace`调用：
使用NOPs，得到`patched_bbs`，然后就能进行调试和执行了：
    gef> r
    ██████   █████  ██      ██ ███    ██ ██████  ██████   ██████  ███    ███ ███████
    ██   ██ ██   ██ ██      ██ ████   ██ ██   ██ ██   ██ ██    ██ ████  ████ ██     
    ██████  ███████ ██      ██ ██ ██  ██ ██   ██ ██████  ██    ██ ██ ████ ██ █████ 
    ██      ██   ██ ██      ██ ██  ██ ██ ██   ██ ██   ██ ██    ██ ██  ██  ██ ██    
    ██      ██   ██ ███████ ██ ██   ████ ██████  ██   ██  ██████  ██      ██ ███████
    ▚▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▞
                  ██████  ██████  ███████     ██████  ██████   ██████ 
                  ██   ██ ██   ██ ██          ██   ██ ██   ██ ██    ██
                  ██████  ██████  ███████     ██████  ██████  ██    ██
                  ██   ██ ██   ██      ██     ██      ██   ██ ██    ██
                  ██████  ██████  ███████     ██      ██   ██  ██████