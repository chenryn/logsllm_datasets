clouds and accessing them remotely. Our results reveal that,
with the gains of enhanced security protection of the out-
sourced data, our a posteriori security mechanism incurs a
surprisingly low extra cost, especially for ﬁle creation and
access.
3. DEFINITIONS AND MODELS
3.1 System Model
As depicted in Fig. 1, our TRLAC framework consists of
four parties which can be identiﬁed as follows:
• Cloud Storage Server (CSS): a party which provides
storage service for cloud users, i.e., data owners and
data consumers in clouds.
Figure 1: System Model
• Data Owners: the users who encrypt and outsource
their data to CSS for sharing with data consumers.
• Data Consumers: the users who download the shared
data from CSS and then decrypt them.
• Trusted Third Party (TTP): an authority who is trusted
to publish the system parameters, and distribute pri-
vate keys for data consumers after they pass the iden-
tity veriﬁcation. Upon a data owner’s request, TTP
responds by executing the digital forensics procedure
and returning the result to the data owner.
All cloud users are organized in distinct groups associated
with diﬀerent identities. One user in multiple groups will be
assigned to multiple keys corresponding to diﬀerent groups
(identities). The data owners interact with CSS via CSP to
store their data. They can specify an access policy, i.e., a
set S = {ID1, ID2,··· , IDr}, so that the data consumers
in these groups can access their data. The CSS is thought
to have suﬃcient storage space and computation resources.
TTP (e.g., the IT center of a company that employs the
cloud storage systems) is assumed to be unbiased in the sense
that it will correctly respond to the users’ digital forensics
requests.
3.2 Security Model and Assumption
The cloud service provider (CSP) is assumed not to be
fully trustable. It may be curious about the users’ uploaded
ﬁles or collude with some cloud users for accessing the ﬁles
without authorization. Unauthorized users and intruders
may also try to access the users’ ﬁles. Therefore, a user
needs to encrypt his ﬁles before outsourcing them to the
CSS so that only authorized ones can decrypt with assigned
secret access credentials. The problem is that some users’
access credentials may be leaked, e.g., if their devices storing
their access credentials were hacked. Some authorized users
may also intentionally leak their credentials. For instance,
an employee who is unsatisﬁed with his company could leak
his credentials for revenge.
We make the minimum assumption that the data owners
can be informed on successful illegal access to their data.
In fact, similar to [18] for simplifying data leakage in the
cloud, we assume that there exists a pirate decryptor (PD),
that is, a procedure created by the leaked secret creden-
tials equivalently treated as the decryption keys, that allows
unauthorized parties to access the user’s ﬁles. The output
of PD is visible to the TTP. We require that a tracing pro-
cedure can ﬁnd at least one of the leaked credentials used to
produce PD. The tracing procedure should be able to fulﬁll
its task without knowledge about how PD is created since
the attacker may exploit technologies to avoid being traced.
The tracing procedure could be executed in a passive way in
the sense that the TTP only needs to observe and analyze
the outputs of PD, which is given indistinguishable inputs.
4. OUR TRLAC SCHEME
We ﬁrst review some basic techniques used in constructing
the TRLAC scheme. We then give our construction.
4.1 Preliminaries
Bilinear Map. Let G and GT be two multiplicative cyclic
groups of prime order p and let g be a generator of G. A
bilinear map e : G × G → GT has the following properties:
1. Bilinearity: for all u, h ∈ G and a, b ∈ Zp, it holds that
e(ua, hb) = e(u, h)ab;
2. Non-degeneracy: e(g, g) (cid:54)= 1. We say that G is a bilin-
ear group if the group operation in G and the bilinear
map e are both eﬃciently computable.
Fingerprint codes. We are mainly interested in binary
ﬁngerprint codes and follow their deﬁnition in [4].
• A set Γ = {ω(1),··· , ω(n)} ⊆ {0, 1}l will be called an
(l, n)-code. The codeword ω(i) will be assigned to the
i-th user, for 1 ≤ i ≤ n, where ω(i) = ω(i)
and
n is the number of users.
1 ··· ω(i)
l
• Let set W = {ω(1),··· , ω(t)} ⊆ {0, 1}l, where t ≤ n.
A codeword ω∗ ∈ {0, 1}l is called feasible for W if for
all i = 1,··· , l there is a j ∈ {1,··· , t} such that
ω∗
i = ω(j)
.
• For a set W ⊆ {0, 1}l we say that the feasible set of
W, denoted by F (W), is the set of all codewords that
are feasible for W.
i
A ﬁngerprint code scheme consists of a generation algo-
rithm GenF C and a tracing algorithm TraF C . The algo-
rithm GenF C can eﬃciently generate a ﬁngerprint code Γ
of n l-bit codewords, with each codeword being assigned to
one user. Given a feasible codeword ω∗ ∈ F (W), the al-
gorithm TraF C can eﬃciently ﬁnd at least one codeword
ω ∈ W, where W ⊆ Γ and |W| ≤ t. Our scheme exploits
the Nuida et al.’s ﬁngerprint codes [24] which is an improve-
ment of the well-known Tardos’s scheme [29]. Nuida et al.’s
ﬁngerprint codes achieve a shorter length, about 1/20 of
Tardos’s ﬁngerprint codes, for the same security level. To
provide traceability against at most t colluders among n
users, Nuida et al.’s ﬁngerprint codes require the codeword
length to be
(cid:18)
(cid:19)
l ≥ − 1
log T (t)
log
n

+ log
c
c − 1
+ log log
c

,
(1)
where T (t)  1 is a constant and
 denotes the probability that an innocent user is accused.
4.2 Our Proposal
4.2.1 Basic idea
We ﬁrst introduce some basic ideas of our TRLAC scheme.
We construct the TRLAC scheme by using the ﬁngerprint
codes [24] and following the Boneh and Naor’s paradigm.
This paradigm requires generating a pair of public and se-
cret keys for each bit position of the ﬁngerprint codes when
the system is set up, which causes the system public keys
to grow linearly with the length of codes. We overcome
this problem by embedding the information about ﬁnger-
print codes not in the system setup phase but only in the
key generation procedure. More speciﬁcally, in generating a
private key for a user, we concatenate the bit value of each
position of the user’s codeword onto the end of the identity
of the group which this user belongs to. Then we indepen-
dently hash the concatenation of each bit of the codeword
and the identity and ﬁnally we produce a private key on the
hash results. The user is unable to modify the ﬁngerprint
code information involved in his private key since he cannot
change the concatenation from his key due to the one-way
property of the hash function. We exploit the IBBE scheme
in [11] to ensure the security of outsourced data.
In this
way, data owners can specify sets of group identities that
they want to share data with and then encrypt their data
with the speciﬁed sets before outsourcing them to clouds.
If data consumers are in a group with identity included in
the speciﬁed set, they can access the outsourced data using
their access credentials, serving as decryption keys, issued
by the TTP.
In case that access credentials are leaked and used to cre-
ate an illegal access credential for unauthorized access, the
tracing procedure of TRLAC ﬁnds out the users compro-
mising their access credentials in two steps. First, due to
the adopted Boneh and Naor’s paradigm, the tracing proce-
dure ﬁnds the feasible codeword associated with the illegal
access credential used by PD. Second, given this feasible
codeword, the tracing procedure calls the tracing algorithm
of the underlying ﬁngerprint codes to output a set of code-
words associated with the users who leaked their access cre-
dentials. To fulﬁll revocation, we make the group identities
to be blinded as exponents in the ciphertexts by the TTP.
Once the dishonest users are traced, the TTP, which has
the blinding factor, can be called by data owners to revoke
access rights from the groups involving the dishonest users.
4.2.2 Construction
We are now ready to describe our TRLAC scheme as con-
sisting of the following procedures.
System Setup: The TTP calls the Setup algorithm to
create master public key parameters M P K, a master secret
key M SK and a set of codewords for each group. M P K is
public to other parties and M SK must be kept secret.
(M P K, M SK) ← Setup: For each group, this algorithm
calls the code generation algorithm GenF C to generate a
set of codewords
Γ = {ω(1),··· , ω(n)}
where n is the maximum number of cloud users in each
group. This algorithm selects a bilinear group G of prime
order p with generator g. Next, it randomly chooses h ∈
G, γ ∈ Z∗
p and computes
u = gγ, hγ, hγ2
,··· , hγm
,
where m is the maximal size of a set of groups with each
member as decryptor. The algorithm also chooses a hash
function H : {0, 1}∗ → Z∗
p which will be modeled as a ran-
dom oracle in the security proof. It sets the system master
public key and secret key, respectively, as
ﬁrst recovers the symmetric key by decrypting CT and then
uses this symmetric key to decrypt the body of the ﬁle. The
Decrypt algorithm outputs the symmetric key as follows.
M/⊥ ← Decrypt(M P K, CT, S, SKIDk,i): It takes as in-
puts M P K, ciphertext
M P K =
u, h, hγ,··· , hγm
, e(g, h), H
, M SK = (g, γ).
CT = (j, CT0, CT1)
(cid:16)
(cid:17)
User Admission: When a new user, denoted by (ID, i),
1 ≤ i ≤ n, in group ID wants to join the system, TTP will
If yes, TTP
ﬁrst check whether this user is valid or not.
ﬁrst picks a codeword, denoted by ω(i) ∈ Γ, that has not
been used before and then calls the KeyGen algorithm to
generate a private key for this user.
SKID,i ← KeyGen(M SK, (ID, i)): This algorithm uses
M SK, the group identity ID and the index i to produce
a private key for user (ID, i). For each j from 1 to l, it
computes
IDj = ID|j|ω(i)
j
and outputs the private key as
SKID,i = {Kj}l
j=1 = {g
1
γ+H(IDj ) }l
j=1,
We note that the unique codeword ω(i) is embedded in the
private key; thus, this key is solely associated with the user.
Hence, to trace a leaked key, we just need to trace the asso-
ciated ﬁngerprint code ω(i).
File Creation: A data owner creates a ﬁle to be stored
in CSS by the following steps. First, the owner encrypts
the ﬁle with a random symmetric session key DEK R← GT
of some symmetric cryptosystem such as AES. Second, the
owner encrypts the symmetric session key DEK with the
identities of the groups the owner wants to share his ﬁle
with. The procedure runs as follows.
CT ← Encrypt(M P K, S, M ): This algorithm takes as
inputs M P K, a set of group identities S = {IDz}r
z=1 and
message M ∈ GT , where r ≤ m and M is the symmetric key
DEK to be encrypted. To equip the system with digital
forensics, it randomly picks j ∈ {1, 2,··· , l} and calls the
following algorithm twice by respectively taking in as inputs
{IDz,j = IDz|j|0}r
z=1 and {IDz,j = IDz|j|1}r
z=1.
Enc ← Encrypt(cid:48)(M P K,{IDz,j}r
runs as follows.
z=1, M ): This algorithm
• Choose a random s ∈ Z∗
p and compute:
−s, C2 = hs(cid:81)r
C0 = M e(g, h)s, C1 = u
z=1(γ+H(IDz,j )).
• Output Enc = (C0, C1, C2).
The algorithm sets CT0 and CT1 as the output of the above
algorithm on input IDz|j|0 and IDz|j|1, respectively.
It
ﬁnally outputs
CT = (j, CT0, CT1).
This CT , together with the ciphertext of data under the
symmetric key, forms the encrypted ﬁle to be stored in the
cloud.
File Access: When a user requests a ﬁle from CSS, the
server returns the corresponding encrypted ﬁle. The user
of an encrypted ﬁle in the cloud, private key SKIDk,i of user
(IDk, i) and the set
z=1
S = {IDz}r
of group identities.
If S does not include IDk, this algo-
rithm returns a false symbol ⊥. Otherwise, it decrypts the
ciphertext as follows.
j = 0,
which means IDk,j = IDk|j|0, it also chooses CT0 (other-
wise, chooses CT1) and computes:
The algorithm chooses Kj from SKIDk,i.
If ω(i)
1
z=1,z(cid:54)=k
(cid:48)
e
1
γ
M
=
(cid:17)
z=1,z(cid:54)=k
C1, h∆k,j
(γ + H(IDz,j)) −
(cid:81)r
r(cid:89)
(cid:17) · e (Kj, C2)
(cid:16)
(cid:16)
 r(cid:89)