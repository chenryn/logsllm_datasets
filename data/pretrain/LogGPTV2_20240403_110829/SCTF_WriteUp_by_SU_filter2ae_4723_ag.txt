逆向后得出是一个推箱子游戏，给出 flag 的条件是连续玩游戏赢 5 次。
游戏的流程为：
  1. 生成一个固定的长度为 3001 的数组，数组值为 0 或 1。
  2. 随机生成一个 20 x 20 大小的地图，地图上有一些正整数和 -1、-2、-3。如果是 -1 则是箱子，-2 是玩家位置，-3 是箱子的目的地。如果是正整数则对应回第 1 步所得的数组小下标，如果是 0 就是不能走，1 就是可以走。
  3. 将地图作为一个长度为 400 的列表输出。
  4. 读入 w、a、s、d 的输入，根据输入移动玩家位置。如果玩家位置移动的方向有箱子，则将箱子同方向移动（推箱子）；如果箱子移动的方向有目的地，则将箱子推到目的地上并给一个计数器 +1。如果箱子从目的地上被推开了则将计数器 -1。
  5. 当计数器的值等于箱子的数量则游戏胜利，否则如果玩家走到了不能走的地方或者非法输入则游戏失败。
搞懂了这个之后剩下就是写算法玩游戏了。因为箱子和目的地没有特定的关系（任何箱子推到任何目的地都算成功），所以我们直接用贪心和 BFS
来搜索。具体方式是先选一个没有处理过的箱子，接着 BFS
搜到最近的目的地（搜索的时候保证推的方向的反方向格子是可以走到的）。得到路径后，对于每一个推的操作，从玩家当前位置 BFS
搜到推箱子操作的反方向，然后推箱子。重复这个过程直到箱子被推到终点，然后将箱子的位置设成不能走，保证以后不会不小心碰到箱子。最后重复整个过程直到所有箱子被推到终点。
程序生成的地图不保证有解，包括我们的算法也处理不了一些特殊情况，所以有时候搜不出来解。还有一些程序本身的 bug，比如不能走到 -3 或者 -2
的上面，导致算法有时候会与程序的模拟不一致。不过只要我们有获胜的概率，我们可以重复游玩，直到连续五次胜利。这个概率不算太高，不过玩大概 200
盘左右就有一次，所以我们直接失败重开，最后成功拿到 flag。
### **SycOS**
    #include
    #include   
    #include   
    uint64_t d_2ec8 = 0;
    uint8_t d_2ed8[0x80 * 0x20];
    uint8_t d_2ed0[0x80 * 0x20];
    uint8_t fakerandom() {
            d_2ec8 = d_2ec8 * 0x41c64e6d + 0x3039;
            //printf("d_2ec8 = 0x%llx\n", d_2ec8);
            return (uint8_t)((d_2ec8 > 0x31);
    }
    void encrypt(uint32_t* v, uint32_t* k) {
            uint32_t v0 = v[0], v1 = v[1], sum = 0, i;           /* set up */
            uint32_t delta = 0x9e3779b9;                     /* a key schedule constant */
            uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];   /* cache key */
            for (i = 0; i > 5) + k1);
                    v1 += ((v0 > 5) + k3);
            }                                              /* end cycle */
            v[0] = v0; v[1] = v1;
    }
    //解密函数  
    void encrypt1(uint32_t* v, uint32_t* k) {
            uint32_t v0 = v[0], v1 = v[1], sum =0, i;  /* set up */
            uint32_t delta = 0x9e3779b9;                     /* a key schedule constant */
            uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];   /* cache key */
            for (i = 0; i > 5) + k3);
                    v0 -= ((v1 > 5) + k1);
                    sum += delta;
            }                                              /* end cycle */
            v[0] = v0; v[1] = v1;
    }
    void exchange(int index) {
            uint8_t tmp[0x100];
            for (int i = 0; i >5) + k3) ^ (sum1 + i);  
            v2 += ((v3>5) + k3) ^ (sum2 + i);  
            v1 += ((v0>5) + k1) ^ (sum1 + i);  
            v3 += ((v2>5) + k1) ^ (sum2 + i);  
            // v1 += ((v0>5) + k3);  
        }                                              /* end cycle */  
        v[0]=v0 ^ ((delta>>24)&0xff); v[1]=v1^ ((delta>>16)&0xff);  
        v[2]=v2^ ((delta>>8)&0xff); v[3]=v3 ^ ((delta)&0xff);  
    }  
    //解密函数  
    void decrypt (uint32_t* v, uint32_t* k) {  
        uint32_t v0=v[0], v1=v[1], v2=v[2], v3=v[3];
        uint32_t sum1=0x6c6e8cc0,sum2=0x6c6e8cc0;
        int i;  /* set up */  
        uint32_t delta=0x73637466;                     /* a key schedule constant */  
        uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */  
        v0=v0 ^ ((delta>>24)&0xff); v1=v1^ ((delta>>16)&0xff);  
        v2=v2^ ((delta>>8)&0xff); v3=v3 ^ ((delta)&0xff); 
        for (i=31; i>=0; i--) {                         /* basic cycle start */  
            v3 -= ((v2>5) + k1) ^ (sum2 + i);  
            v1 -= ((v0>5) + k1) ^ (sum1 + i);  
            v2 -= ((v3>5) + k3) ^ (sum2 + i);  
            v0 -= ((v1>5) + k3) ^ (sum1 + i);  
            sum1 -= delta;  
            sum2 -= delta;  
        }                                              /* end cycle */  
        v[0]=v0; v[1]=v1;  
        v[2]=v2; v[3]=v3;  
    }
AES魔改部分
    oid __cdecl enc_next(uint8_t *roundkeys, uint8_t *plaintext, uint8_t *ciphertext)
    {
      _DWORD *v3; // rax
      _DWORD *v4; // rax
      struct type_info *v5; // rdx
      void *v6; // rbx
      uint8_t *v7; // rax
      uint8_t *v8; // rax
      void *v9; // rbx
      void *v10; // rax
      uint8_t *v11; // rax
      std::__cxx11::string temp_2; // [rsp+20h] [rbp-60h] BYREF
      uint8_t tmp[16]; // [rsp+40h] [rbp-40h] BYREF
      char v14; // [rsp+5Eh] [rbp-22h] BYREF
      uint8_t t; // [rsp+5Fh] [rbp-21h]
      double temp_1; // [rsp+60h] [rbp-20h]
      int temp_0; // [rsp+6Ch] [rbp-14h]
      char temp; // [rsp+73h] [rbp-Dh]
      int a; // [rsp+74h] [rbp-Ch]
      int cnt; // [rsp+78h] [rbp-8h]
      uint8_t j; // [rsp+7Eh] [rbp-2h]
      uint8_t i; // [rsp+7Fh] [rbp-1h]
      v3 = _cxa_allocate_exception(4ui64);
      *v3 = 1;
      if ( refptr__ZTIi != (struct type_info *const)1 )
        Unwind_Resume(v3);
      a = *(_DWORD *)_cxa_begin_catch(v3);
      for ( i = 0; i <= 0xFu; ++i )
      {
        v8 = roundkeys++;
        ciphertext[i] = *v8 ^ plaintext[i] ^ 0x66; // 多了一个^0x66
      }
      _cxa_end_catch();
      // 后面逻辑大致整理
    static void CipherSCTF(state_t* state, const uint8_t* RoundKey)
    {
      uint8_t round = 0;
      // Add the First round key to the state before starting the rounds.
      AddRoundKeyDec(0, state, RoundKey); // ciphertext[i] = *v8 ^ plaintext[i] ^ 0x66; // 多了一个^0x66
      // There will be Nr rounds.
      // The first Nr-1 rounds are identical.
      // These Nr rounds are executed in the loop below.
      // Last one without InvMixColumn()
      for (round = 1; ; ++round)
      {
        InvShiftRows(state);
        InvSubBytes(state);
        MixColumns(state);
        AddRoundKey(round, state, RoundKey);
        if (round == Nr) {
          SubBytes(state);
          ShiftRows(state);
          AddRoundKey(round, state, RoundKey);
          break;
        }
      }
    }
加密流程：
– 输入32个字符
  * TEA处理前16个
  * AES处理前16个
  * TEA处理后16个
  * AES处理后16个
  * 比较
根据上述描述写出解密即可
## more
本次2021 SCTF 我们 SU 取得了2nd 的成绩，感谢队里师傅们的辛苦付出！同时我们也在持续招人，只要你拥有一颗热爱 CTF
的心，都可以加入我们！欢迎发送个人简介至：PI:EMAIL或直接联系书鱼(QQ:381382770)