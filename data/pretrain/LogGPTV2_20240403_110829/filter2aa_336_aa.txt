# 逃离安卓动态检测

## 目录
- 沙盒检测
- 延时触发
- Taintdroid与反隐私检测
- 自校验与SmaliHook
- 条件触发
- 公开沙盒与私有沙盒

## 沙盒检测
### 检测方法
- **通过手机号码检测**
- **通过NetworkOperator名检测**
- **通过设备ID检测**
- **通过语言信箱号码检测**
- **通过ROM编译文件build.prop的信息检测**
- **通过模拟器没有WIFI支持这个特性来检测**
- **特定沙盒的检测**
  - 写嗅探程序上传到在线分析网站
  - 获取对应的信息（例如手机号）
  - 判断该信息是否为特定沙盒独有的

### 沙箱环境特征
- **bouncer**
- **anubis**

### 检测QEMU
- **检测qemu的二进制翻译技术(BT)**
  - qemu翻译代码块到宿主机执行
  - 在块执行的内部不会给guest产生中断(切换)
  - 创建2个线程，每个线程循环执行一个代码块
    - 线程1累加设置全局变量
    - 线程2打印全局变量的值
  - 由于qemu使用了BT技术,所以输出为固定的值

## 沙盒反检测
### 反检测方法
- **通过SmaliHook对关键特征进行随机化**
  - 示例：通过对关键特征进行随机化
- **动态识别检测沙盒的检测代码**

## 延迟触发
### 原理
- 由于样本量的原因, 沙箱在对样本进行安全检测时受运行时间限制
- 样本在运行后延迟执行恶意代码
- 常见可以用来做延迟执行的类函数有：
  - `alarm`类
  - `sleep`
  - `timer`类
  - `message`

### 应对方法
- 通过smalihook对关键函数进行拦截
- 缩短延迟函数的时间
- 利用Message延迟30分钟后执行恶意代码

## Taintdroid与反隐私检测
### Taintdroid原理
- **Taintdroid做了什么？**
  - Taintdroid可以监控到加密上传手机号
- **Taintdroid如何做到的？**
  - 改写了Dalvik VM用到的一些结构体，加入了自己的标记
  - 拦截获取隐私数据的函数，给数据加标记
  - `charAt`时,也会做标记
  - 对于数据移动转换做的处理
  - 在数据外发的点做拦截，判断标记
  - 发送短信时判断是否为隐私数据
- **Taintdroid支持的隐私数据种类**
  - 通过`switch/case`给一份没有被标记的数据
  - Taintdroid默认会阻止SO加载

### 反隐私检测
- **绕过Taintdroid**
  - 通过`switch/case`给一份没有被标记的数据

## 自校验与SmaliHook
### SmaliHook
- 将APK文件反编译，然后对smali代码进行修改，把调用的关键系统API改成我们自己实现的派遣函数
- 自己的派遣函数做相应的处理，或返回假结果，或调用原始函数

### 签名自校验绕过SmaliHook
- JNI绕过smali hook

## 条件触发
### 触发条件
- **系统消息触发**
- **用户操作触发**
- **接收指令触发**

### 应对方法
- 反编译APK
- 分析权限，接收器
- 分析smali代码
- 做对应的行为触发
- 例如在xml文件中扫描到相应的监控短信权限, 可以向模拟器发送一条短信，尝试触发相关的代码
  - `telnet localhost 5554`
  - `sms send +10086 "hello world"`

## 公开沙盒与私有沙盒
### 公开沙盒
- 隐蔽性差,要做大量随机化操作

### 私有沙盒
- 隐蔽性好
- 若联网,隐蔽性丧失
- 若断网,大量行为无法触发,需要模拟网络

谢谢大家！

---

# 技术追求就是最高成就感

# 订票助手一日谈

## 春运是怎么回事？
- 春运是大陆特有的一种在春节和国庆时集中爆发的客运问题
- 根本原因在于地区间发展水平差异过大，导致过多人需要背井离乡工作赚取收入
- 在所有运输方式中，铁路作为运力最大最经济的运输模式，但依然满足不了庞大的运力需求

## 春运到底有多庞大？

## 为什么订票助手出现了？
- 早期的12306网站有着负载能力的问题。在买票高峰期，经常性会提示系统繁忙，操作失败，让用户的时间和精力在无形中浪费
- 早期的12306网站本身存在漏洞，最经典的漏洞就是验证码漏洞
- 12306自身作为一个社会服务性的网站，本身的功能欠缺，而用户体验也较差

## 订票助手有什么用？
- 早期的订票助手定位于在系统繁忙的时候利用系统自身的功能帮助用户自动重新操作，从而节约时间和精力。主要包括刷新查询等着票出来，以及在系统繁忙时自动重新操作
- 由于购票需求过于旺盛，导致虽然功能如此简单，但依然流传很广。据估计当时用户已经上万。

### 后期发展方向
- 由于很快引起铁道部注意，因此这些可以自动操作的地方很快被封锁。
- 后期助手发展方向是为网站本身添加更多更加实用、智能、可以提高买票效率的功能。

## 春运中的订票助手
- 在2013年时，为了让更多人更方便买票，和猎豹浏览器构成了无条件合作协议，为猎豹浏览器定制了专用版本
- 由于猎豹浏览器用户数很大，导致被媒体注意，并进一步引起铁道部注意
- 与此同时，因为原老版本设计中与GitHub相关的内容，再次在新浪微博中引起讨论

## 订票助手和GitHub