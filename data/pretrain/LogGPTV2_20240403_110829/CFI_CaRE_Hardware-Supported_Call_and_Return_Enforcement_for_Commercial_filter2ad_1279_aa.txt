title:CFI CaRE: Hardware-Supported Call and Return Enforcement for Commercial
Microcontrollers
author:Thomas Nyman and
Jan-Erik Ekberg and
Lucas Davi and
N. Asokan
CFI CaRE: Hardware-Supported Call
and Return Enforcement for Commercial
Microcontrollers
Thomas Nyman1,2(B), Jan-Erik Ekberg2, Lucas Davi3, and N. Asokan1
1 Aalto University, Espoo, Finland
PI:EMAIL, PI:EMAIL
2 Trustonic, Helsinki, Finland
{thomas.nyman,jee}@trustonic.com
3 University of Duisburg-Essen, Duisburg, Germany
PI:EMAIL
Abstract. With the increasing scale of deployment of Internet of Things
(IoT), concerns about IoT security have become more urgent. In par-
ticular, memory corruption attacks play a predominant role as they
allow remote compromise of IoT devices. Control-ﬂow integrity (CFI)
is a promising and generic defense technique against these attacks. How-
ever, given the nature of IoT deployments, existing protection mecha-
nisms for traditional computing environments (including CFI) need to
be adapted to the IoT setting. In this paper, we describe the challenges
of enabling CFI on microcontroller (MCU) based IoT devices. We then
present CaRE, the ﬁrst interrupt-aware CFI scheme for low-end MCUs.
CaRE uses a novel way of protecting the CFI metadata by leveraging
TrustZone-M security extensions introduced in the ARMv8-M architec-
ture. Its binary instrumentation approach preserves the memory layout
of the target MCU software, allowing pre-built bare-metal binary code to
be protected by CaRE. We describe our implementation on a Cortex-M
Prototyping System and demonstrate that CaRE is secure while impos-
ing acceptable performance and memory impact.
1 Introduction
Cyber-Physical Systems (CPS) are becoming pervasive across many applica-
tion areas ranging from industrial applications (manufacturing), transport, and
smart cities to consumer products. Internet of Things (IoT) refers to systems
incorporating such devices with (typically always-on) communication capability.
Estimates put the number of deployed IoT devices at 28 billion by 2021 [19].
Although programmable CPS devices are not new, connectivity makes them
targets for network originating attacks. Gartner highlights device identity (man-
agement), code/data integrity and secure communication as the most important
security services for IoT [23].
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 12) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 259–284, 2017.
DOI: 10.1007/978-3-319-66332-6 12
260
T. Nyman et al.
The system software in IoT devices is often written in memory-unsafe lan-
guages like C [26]. The arms race [46] in runtime exploitation of general purpose
computers and network equipment has shown us that memory errors, such as
buﬀer overﬂows and use-after-free errors, constitute a dominant attack vector
for stealing sensitive data or gaining control of a remote system. Over the years,
a number of platform security techniques to resist such attacks have been devel-
oped and deployed on PCs, servers and mobile devices. These include protections
against code injection and code-reuse attacks, such as Control-Flow Integrity [2]
(CFI) and Address Space Layout Randomization [13,34] (ASLR) which aim to
ensure the run-time integrity of a device.
CFI (Sect. 3.1) is a well-explored technique for resisting the code-reuse
attacks such as Return-Oriented Programming (ROP) [44] that allow attack-
ers in control of data memory to subvert the control ﬂow of a program. CFI
commonly takes the form of inlined enforcement, where CFI checks are inserted
at points in the program code where control ﬂow changes occur. For legacy appli-
cations CFI checks must be introduced by instrumenting the pre-built binary.
Such binary instrumentation necessarily modiﬁes the memory layout of the code,
requiring memory addresses referenced by the program to be adjusted accord-
ingly [27]. This is typically done through load-time dynamic binary rewriting
software [15,37].
A prominent class of state-of-the-art CFI schemes is based on the notion of
a shadow stack [14]: a mechanism that prevents overwriting subroutine return
addresses on the call stack by comparing each return address to a protected
copy kept in the shadow stack before performing the return. This eﬀectively
mitigates return-oriented programming attacks that stitch together instruction
sequences ending in return instructions [44]. However, it presumes the existence
of mechanisms to ensure that the shadow stack cannot be manipulated by the
attacker.
As we argue in detail in Sect. 3.3, the type of IoT scenarios we consider have
a number of characteristics that make traditional CFI mechanisms diﬃcult to
apply. First, IoT devices are typically architected as interrupt-driven reactive
systems, often implemented as bare-metal software involving no loading or relo-
cation. To the best of our knowledge, no existing CFI scheme is interrupt-aware.
Second, IoT devices are often based on computing cores that are low-cost, low-
power single-purpose programmable microcontrollers (MCUs). Countermeasures
for general purpose computing devices, such as ASLR, often rely on hardware
features (e.g., virtual memory) that are unavailable in simple MCUs. Prior CFI
schemes for embedded systems, such as HAFIX [16], and the recently announced
Intel Control-ﬂow Enforcement Technology (CET) [30], require changes to the
hardware and toolchain, access to source code and do not support interrupts.
On the positive side, hardware-based isolation mechanisms for MCUs have
appeared not only in the research literature [12,18,31], but also as commercial
oﬀerings such as the recently announced TrustZone-M security extensions for
the next generation of ARM microcontrollers (Sect. 2.2) providing a lightweight
trust anchor for resource-constrained IoT devices [4]. However, since software
CFI CaRE: Hardware-Supported Call and Return Enforcement
261
(and updates) for IoT devices may come from a diﬀerent source than the orig-
inal equipment manufacturer (OEM), it is unrealistic to expect the software
vendors to take responsibility for the instrumentation necessary for hardware-
assisted CFI protection – OEMs in turn will be incentivized to distribute the
same software to all devices, with and without hardware security extensions.
Goal and Contributions. We introduce the ﬁrst hardware software co-design
based security architecture that (i) enables practical enforcement of control-ﬂow
policies, (ii) addresses the unique challenges of low-end IoT devices with respect
to CFI deployment, (iii) requires no changes to the underlying hardware, and
(iv) operates directly on binary code thereby avoiding the need for source code.
Speciﬁcally, we target control-ﬂow integrity policies that defend against runtime
attacks, such as ROP, that belong to the most prominent software attacks on
all modern computing architectures, e.g., Desktop PCs [44], mobile devices [32],
and embedded systems [21].
To this end we present the design and implementation of a novel architec-
ture, CaRE (Call and Return Enforcement), accompanied with a toolchain for
achieving robust run-time code integrity for IoT devices. We claim the following
contributions:
– The ﬁrst interrupt-aware CFI scheme for low-end MCUs (Sect. 4) support-
ing• hardware-based shadow stack protection by leveraging recently
• a new binary instrumentation technique that is memory layout-
introduced TrustZone-M security extensions (Sect. 4.2).
preserving and can be realized on-device (Sect. 4.3).
– An implementation of CaRE on ARM Versatile Express Cortex-M Prototyp-
ing System (Sect. 4.4).
– A comprehensive evaluation (Sect. 5) showing that CaRE ensures CFI
(Sect. 5.1), has a lower performance overhead (Sect. 5.2) compared to
software-based shadow stack schemes while imposing comparable impact on
program binary size (Sect. 5.3).
2 Background
2.1 ARM Architecture
ARM microprocessors are RISC-based computer designs that are widely used in
computing systems which beneﬁt from reduced cost, heat, and power consump-
tion compared to processors found in personal computers. The ARM Cortex-M
series of processors, geared towards low-cost embedded microcontrollers (MCUs),
consists of core designs optimized for diﬀerent purposes, such as small silicon
footprint (M0), high energy eﬃciency (M0+), conﬁgurability (M3) or high per-
formance (M4, M7). Cortex-M processors only support the 16-bit Thumb and
mixed 16 and 32-bit Thumb-2 instruction sets. 32-bit Thumb-2 instructions are
262
T. Nyman et al.
encoded as two 16-bit half-words. ARMv8-M [4] is the next generation instruc-
tion set architecture for M-class processors. The Cortex-M231 and Cortex-M332
are the ﬁrst cores to support the ARMv8-M architecture. Both are compatible
with other processors in the Cortex-M family, allowing (legacy) software re-use
on these devices.
All 32-bit ARM processors feature 16 general-purpose registers, denoted
r0-r15. Registers r13-r15 have special names and usage models. These reg-
isters, including the program counter (pc) can be accessed directly. Cortex-M
processors implement two stacks, the Main stack and Process stack. The stack
pointer (sp) is banked between processor modes, i.e., multiple copies of a register
exists in distinct register banks. Not all registers can be seen at once; the regis-
ter bank in use is determined by the current processor mode. Register banking
allows for rapid context switches when dealing with processor exceptions and
privileged operations. Application software on Cortex-M processor executes in
Thread mode where the current stack is determined by the stack-pointer select
(spsel) register. When the processor executes an exception it enters the Handler
mode. In Handler mode the processors always uses the Main stack. When exe-
cuting in Handler mode, the Interrupt Program Status Register (ipsr) holds the
exception number of the exception being handled. The ipsr may only be read
using a mrs instruction used to access ARM system register, and is only updated
by the processor itself on exception entry and exit (see Exception behaviour in
Sect. 4.4).
ARM calling standard. As with all processors, ARM provides a calling standard
that compiler manufacturers should use to resolve subroutine calls and returns in
an interchangeable manner. In programs conforming to the ARM Architecture
Procedure Call Standard (AAPCS) [3] subroutine calls may be performed either
through a Branch with Link (bl) or Branch with Link and eXchange (blx)
instruction. These instructions load the address of the subroutine to the pc and
the return address to the link register (lr). ARM processors do not provide
a dedicated return instruction. Instead, a subroutine return is performed by
writing the return address to the program counter pc. Hence, any instruction
that can write to the pc can be leveraged as an eﬀective return instruction. Two
common eﬀective return instructions are bx lr and pop {..., pc}. The bx lr
instruction performs a branch to the return address stored in the link register
lr. The pop {..., pc} in a subroutine epilogue loads the return address from
the stack to the pc. The former is typically used in leaf routines, which do not
execute procedure calls to other routines. The latter is typically preceded by
a push {..., lr} instruction in the subroutine prologue, which in a non-leaf
routine stores the return address in lr (possibly along with other registers that
need to be saved) on the stack in preparation for calls to other routines.
1 https://www.arm.com/products/processors/cortex-m/cortex-m23-processor.php.
2 https://www.arm.com/products/processors/cortex-m/cortex-m33-processor.php.
CFI CaRE: Hardware-Supported Call and Return Enforcement
263
2.2 TrustZone-M
TrustZone-M [4,48] (TZ-M) is a new hardware security technology present in
the ARMv8-M architecture. In terms of functionality, it replicates the properties
of processor supported isolation and priority execution provided by TrustZone-
enabled Cortex-A application processors (TZ-A), but their respective architec-
tural realizations diﬀer signiﬁcantly. Both TZ architectures expose a set of secure
state non-privileged and privileged processor contexts beside their traditional
non-secure state counterparts3. In both TZ variants the memory management
is extended to enable splitting the device’s physical memory into secure and
non-secure regions.
In TZ-M, the only general purpose registers banked between the non-secure
and secure states are the sp registers used to address the Main and Process
stacks. The remaining general purpose registers are shared (not banked) between
the non-secure and secure states. In practice this means that the secure state
software is responsible for sanitizing any sensitive information held in any general
purpose registers during a transition from secure to non-secure state.
1
Non-secure memory
5
BL secure_func
Non-secure code
8
BXNS lr
2
3
4
Secure memory
Secure gateway 
veneers
Secure code
7
Non-secure data
Secure data
Secure non-secure 
callable (NSC)
secure_func:
6
7
SG
B
secure_func_entry
secure_func_entry:
...
BXNS 
8
lr
Fig. 1. ARMv8-M secure state call [48]
In TZ-A the entry to the secure state occurs via a dedicated hardware excep-
tion and the context switch is performed by the exception handler known as
the Secure Monitor. In TZ-M the division between the secure and non-secure
states is instead based on a memory map set up during device initialization
which assigns speciﬁc regions of memory as either secure or non-secure. The
transitions between secure and non-secure state occur automatically as the ﬂow
of execution is transferred from program code in non-secure memory to secure
memory (and vice versa). Where in TZ-A the entry into the secure state typi-
cally has to manage VM and MMU conﬁguration at the expense of thousands of
processor cycles, TZ-M is geared towards embedded processors with no virtual
memory support (at most a MPU). In TZ-M a switch of security state only takes
a few processor cycles including a pipeline ﬂush [48].
3 Also referred to as the secure world and normal world.
264
T. Nyman et al.
The hardware support for the division of memory into secure and non-secure
regions in ARMv8-M is a Secure Attribution Unit (SAU) inside the processor.
The SAU is conﬁgurable while the processor executes in secure state. External