the highest overheads, ranging from 10% to 19%.
Upon investigation we found that their usage of the trampolines
is significantly higher than usual, up to 316 calls per microsec-
ond compared to the average of 83 calls per microsecond for all
benchmarks.
Both Trampolines and Randomization. We then measured the im-
pact of the trampolines and stack randomization that are employed
for calls from JIT-compiled code to static code, in addition to the pre-
vious components (All Trampolines & Randomization in Figure 9).
We measured these components together as the implementation
depends on the previous components for performance reasons. The
average overhead in this case is 9.2%. access-fannkuch and bitops-
nsieve-bits have the highest overhead, exceeding 19%, due to their
high overheads in the previous test (18%). bitops-bitwise-and and
math-cordic have the highest additional overhead w.r.t. the previous
tests, moving from below 2% to 12.9% and 15.7% respectively. This
additional overhead is due to their high frequency of calls from the
JIT code to the static code, 579 and 594 times per millisecond re-
spectively, compared to the average of 196 times per millisecond for
all benchmarks. This overhead is due to the imbalance between call
instructions and ret instructions, which thrashes the processor’s re-
turn stack. This is necessary to implement our security guarantees.
-5% 0% 5% 10% 15% 20% 25% 30% 35% Static	→	JIT:	RandomizationStatic	→	JIT:	TrampolinesAll	Trampolines	&	RandomizationJITGuardSession K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2415The additional overhead of other benchmarks is correlated with
the frequency of these transitions as well.
Full JITGuard. We then measured the impact of the full JITGuard
(Full JITGuard in Figure 9, where the error bars refer to the 95%
confidence interval on the values). The average overhead for the
complete scheme, including trampolines, stack randomization, and
SGX compiler, is 9.8%, implying that the overhead due to SGX
communication and SGX mode switches is well below 1%. This
overhead specifically related to SGX is due to the low number of
calls to the SGX compiler. In average, the SGX compiler is called
only 6 times for each benchmark, while the maximum number of
calls is 23. The maximum overhead in this benchmark is math-
spectral-norm, which exceeds 32%. However, the overhead is still
just 4.8 ms in this case; the higher relative overhead is due to the
very fast run time of this benchmark, 14.6 ms compared to the
average of 230 ms.
Finally, we compared our results to another run of the bench-
mark, with all JIT compilers disabled (interpreter only). JIT allows
the benchmark to run more than 13 times faster on average and up
to 260 times faster for some benchmarks. This confirms that JIT-
compiled code is one order of magnitude faster than the interpreter,
even including our overhead of 9.8%.
10 DISCUSSION
Portability of JITGuard. Applying JITGuard to a JIT engine re-
quires manual effort. However, we argue this one-time effort scales
due to the similarity in the high-level design of major JIT en-
gines and their limited number. In fact, other mitigations, like
CFI [31, 39, 58], require individual effort for each JIT engine as
well.
Choice of different JavaScript Engines. The attentive reader may
have noticed that our attack was implemented for Edge’s JIT engine
while our defense hardens Firefox’s JIT engine. This is due to the
fact that we started both projects independently from each other.
However, the general idea of both the attack and the defense lever-
age design features which are common to all major JIT engines and
are, thus, general.
Effectiveness of memory hiding. A number of recent works [20,
23] have questioned the effectiveness of memory hiding to pro-
tect sensitive memory areas that are not referenced elsewhere in
memory. Gawlik et al. [23] specifically consider a web browser
and introduce crash-resistant programming. However, one of the
countermeasures they mention, guard pages, can be successfully
applied to JITGuard since it only has one randomized region that
needs to be protected. Gawlik et al. exploit signal handlers as an
oracle in order to disclose whether a specific page is mapped. The
code of those handlers can be augmented so that it calls a specific
entry point on the enclave every time such an exception happens.
If the address where the signal happened is close to or inside the
JITGuard-Region, the enclave will then immediately terminate the
program before the address can be exploited by the malicious code.
Alternative Techniques. To isolate the JIT compiler one could use
randomized segments protected through segment registers, or a
separate process. Using the randomized segments to hide the com-
piler, its stack, and its heap would be possible, but would require a
considerable effort to make sure that no information leak is possible.
On the other hand, SGX provides a clean separation.
Existing browsers can be retrofitted with an SGX-based design,
since it preserves the synchronous call semantics of existing code.
Using a separate process for the compiler, instead, requires a sub-
stantial redesign to support the asynchronous communication used
in IPC.6 Using separate processes also means the processes would
have different address spaces and, thus, a higher overhead would
be required due to additional communication and synchronization.
Moreover, a remote procedure call from the browser to the separate
compiler process would incur additional latency if that process is
not already running on another core, which is unlikely, especially
in case of elevated system load. On the other hand, the SGX enclave
is executed on the same core, so it does not require any action from
the system scheduler to run. The enclave can also leverage the data
already stored in the CPU caches. In our evaluation, the overhead
due to SGX is well below 1%. Finally, the remote attestation capabil-
ities of SGX can be leveraged to prove to the server that the browser
is using the JITGuard compiler and that it was not tampered with.
11 CONCLUSION
Protection of modern software against run-time attacks (code in-
jection and code reuse) has been a subject of intense research and
a number of solutions have been deployed or proposed. Moreover,
recently, researchers demonstrated the threat of the so-called data-
only attacks that manipulate data flows instead of the control flow
of the code. These attacks seem to be very hard to prevent because
any defense mechanism requires the exact knowledge of the input
data and the intended data flow. However, on the one hand, most
of the proposed defenses are tailored towards statically generated
code and their adaption to dynamic code comes with the price of
security or performance penalties. On the other hand, many wide-
spread applications, like browsers and document viewers, embed
just-in-time compilers to generate dynamic code.
We present a generic data-only attack, dubbed DOJITA, against
JIT compilers that can successfully execute malicious code even in
the presence of defenses against control-flow hijacking attacks such
as control-flow integrity (CFI) or randomization-based defenses. We
then propose JITGuard, a novel defense to mitigate code-injection,
code-reuse, and data-only attacks against just-in-time compilers
(including DOJITA). For this we utilize Intel’s Software Guard Ex-
tensions (SGX), and explain the challenges that we needed to tackle.
As proof-of-concept we implemented and evaluated JITGuard for
Firefox’s JIT compiler SpiderMonkey. The average overhead for the
complete scheme, including trampolines, stack randomization, and
SGX compiler, is 9.8%, where the overhead due to SGX communi-
cation and mode switches is below 1%. While we are working on
further performance optimizations, our prototype already demon-
strates practicality of JITGuard.
6 Recent versions of Chakra have been redesigned [40] around an out-of-process
compiler. Their defense required 27 000 additional lines of code, compared to 640 000
lines of C/C++ code in the Chakra source.
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2416ACKNOWLEDGMENTS
This work was supported in part by the German Science Foundation
(project S2, CRC 1119 CROSSING), the European Union’s Seventh
Framework Programme (609611, PRACTICE), and the German Fed-
eral Ministry of Education and Research within CRISP.
REFERENCES
[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-flow
integrity. In ACM SIGSAC Conference on Computer and Communications Security
(CCS).
[3]
[2] Aleph One. 2000. Smashing the Stack for Fun and Profit. Phrack Magazine 49
(2000).
Jason Ansel, Petr Marchenko, Úlfar Erlingsson, Elijah Taylor, Brad Chen, Derek L.
Schuff, David Sehr, Cliff Biffle, and Bennet Yee. 2011. Language-independent sand-
boxing of just-in-time compilation and self-modifying code. In 32nd ACM SIG-
PLAN Conference on Programming Language Design and Implementation (PLDI).
[4] Michalis Athanasakis, Elias Athanasopoulos, Michalis Polychronakis, Georgios
Portokalidis, and Sotiris Ioannidis. 2015. The Devil is in the Constants: Bypassing
Defenses in Browser JIT Engines. In 22nd Annual Network and Distributed System
Security Symposium (NDSS).
[5] Michael Backes, Thorsten Holz, Benjamin Kollenda, Philipp Koppe, Stefan Nürn-
berger, and Jannik Pewny. 2014. You Can Run but You Can’t Read: Preventing
Disclosure Exploits in Executable Code. In ACM SIGSAC Conference on Computer
and Communications Security (CCS).
[6] Dion Blazakis. 2010. Interpreter exploitation: Pointer inference and JIT spraying.
In Blackhat DC (BH DC).
[7] Kjell Braden, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Christopher
Liebchen, and Ahmad-Reza Sadeghi. 2016. Leakage-Resilient Layout Randomiza-
tion for Mobile Devices. In 23rd Annual Network and Distributed System Security
Symposium (NDSS).
[8] Nicolas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R.
Gross. 2015. Control-Flow Bending: On the Effectiveness of Control-Flow In-
tegrity. In 24th USENIX Security Symposium (USENIX Sec).
[9] Nicholas Carlini and David Wagner. 2014. ROP is Still Dangerous: Breaking
Modern Defenses. In 23rd USENIX Security Symposium (USENIX Sec).
[10] Miguel Castro, Manuel Costa, and Tim Harris. 2006. Securing Software by
Enforcing Data-flow Integrity. In 7th USENIX Symposium on Operating Systems
Design and Implementation (OSDI).
[11] Ping Chen, Yi Fang, Bing Mao, and Li Xie. 2011. JITDefender: A Defense against
JIT Spraying Attacks. In 26th International Information Security Conference (IFIP).
[12] P. Chen, R. Wu, and B. Mao. 2013. JITSafe: a framework against Just-in-time
spraying attacks. IET Information Security 7, 4 (2013).
[15]
[13] Shuo Chen, Jun Xu, Emre Can Sezer, Prachi Gauriar, and Ravishankar K Iyer.
2005. Non-Control-Data Attacks Are Realistic Threats.. In 14th USENIX Security
Symposium (USENIX Sec).
[14] Mauro Conti, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Christopher
Liebchen, Marco Negro, Mohaned Qunaibit, and Ahmad-Reza Sadeghi. 2015.
Losing Control: On the Effectiveness of Control-Flow Integrity under Stack
Attacks. In ACM SIGSAC Conference on Computer and Communications Security
(CCS).
Jonathan Corbet. 2012. Yet another new approach to seccomp. https://lwn.net/
Articles/475043/. (2012).
[16] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen,
Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor:
Practical Code Randomization Resilient to Memory Disclosure. In 36th IEEE
Symposium on Security and Privacy (S&P).
[17] Stephen Crane, Stijn Volckaert, Felix Schuster, Christopher Liebchen, Per Larsen,
Lucas Davi, Ahmad-Reza Sadeghi, Thorsten Holz, Bjorn De Sutter, and Michael
Franz. 2015. It’s a TRaP: Table Randomization and Protection against Function-
Reuse Attacks. In ACM SIGSAC Conference on Computer and Communications
Security (CCS).
[18] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z. Snow, and
Fabian Monrose. 2015. Isomeron: Code Randomization Resilient to (Just-In-Time)
Return-Oriented Programming. In 22nd Annual Network and Distributed System
Security Symposium (NDSS).
[19] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014.
Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow
Integrity Protection. In 23rd USENIX Security Symposium (USENIX Sec).
Isaac Evans, Samuel Fingeret, Julian Gonzalez, Ulziibayar Otgonbaatar, Tiffany
Tang, Howard Shrobe, Stelios Sidiroglou-Douskos, Martin Rinard, and Hamed
Okhravi. 2015. Missing the Point(er): On the Effectiveness of Code Pointer
Integrity. In 36th IEEE Symposium on Security and Privacy (S&P).
Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howeard Shrobe, Martin Rinard,
Hamed Okhravi, and Stelios Sidiroglou-Douskos. 2015. Control Jujutsu: On the
Weaknesses of Fine-Grained Control Flow Integrity. In ACM SIGSAC Conference
[21]
[20]
on Computer and Communications Security (CCS).
[22] Roger Faulkner and Ron Gomes. 1991. The Process File System and Process
Model in UNIX System V.. In USENIX Technical Conference (ATC).
[27]
[24]
[23] Robert Gawlik, Benjamin Kollenda, Philipp Koppe, Behrad Garmany, and
Thorsten Holz. 2016. Enabling client-side crash-resistance to overcome diversifi-
cation and information hiding. In 23rd Annual Network and Distributed System
Security Symposium (NDSS).
Jason Gionta, William Enck, and Peng Ning. 2015. HideM: Protecting the Con-
tents of Userspace Memory in the Face of Disclosure Vulnerabilities. In 5th ACM
Conference on Data and Application Security and Privacy (CODASPY).
[25] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. 2014.
Out of Control: Overcoming Control-Flow Integrity. In 35th IEEE Symposium on
Security and Privacy (S&P).
[26] Enes Göktas, Elias Athanasopoulos, Michalis Polychronakis, Herbert Bos, and
Georgios Portokalidis. 2014. Size Does Matter: Why Using Gadget-Chain Length
to Prevent Code-Reuse Attacks is Hard. In 23rd USENIX Security Symposium
(USENIX Sec).
Ian Goldberg, David Wagner, Randi Thomas, and Eric A. Brewer. 1996. A Se-
cure Environment for Untrusted Helper Applications. In 6th USENIX Security
Symposium (USENIX Sec).
[28] Guang Gong. 2016. Pwn a Nexus Device With a Single Vulnerability. https:
//cansecwest.com/slides/2016/CSW2016_Gong_Pwn_a_Nexus_device_with_a_
single_vulnerability.pdf. (2016).
[29] Andrei Homescu, Stefan Brunthaler, Per Larsen, and Michael Franz. 2013. Li-
brando: transparent code randomization for just-in-time compilers. In ACM
SIGSAC Conference on Computer and Communications Security (CCS).
[30] Hong Hu, Shweta Shinde, Adrian Sendroiu, Zheng Leong Chua, Prateek Saxena,
and Zhenkai Liang. 2016. Data-Oriented Programming: On the Expressiveness
of Non-Control Data Attacks. In 37th IEEE Symposium on Security and Privacy
(S&P).
Intel. 2016. Control-flow Enforcement Technology Preview. https://software.
intel.com/sites/default/files/managed/4d/2a/control- flow- enforcement-
technology-preview.pdf. (2016).
Intel. 2016. Intel Software Guard Extensions (Intel SGX). https://software.intel.
com/en-us/sgx. (2016).
[33] Volodymyr Kuznetsov, Laszlo Szekeres, Mathias Payer, George Candea, R. Sekar,
and Dawn Song. 2014. Code-Pointer Integrity. In 11th USENIX Symposium on
Operating Systems Design and Implementation (OSDI).
[34] Per Larsen, Andrei Homescu, Stefan Brunthaler, and Michael Franz. 2014. SoK:
Automated Software Diversity. In 35th IEEE Symposium on Security and Privacy
(S&P).
[35] Linux Foundation. 2014. This-CPU Operations. http://lxr.free-electrons.com/
[31]
[32]
source/Documentation/this_cpu_ops.txt. (2014).
[36] Giorgi Maisuradze, Michael Backes, and Christian Rossow. 2016. What Cannot
Be Read, Cannot Be Leveraged? Revisiting Assumptions of JIT-ROP Defenses. In
25th USENIX Security Symposium (USENIX Sec).