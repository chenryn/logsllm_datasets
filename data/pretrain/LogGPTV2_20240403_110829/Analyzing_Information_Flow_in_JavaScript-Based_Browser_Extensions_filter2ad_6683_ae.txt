4.2. Performance
We evaluated the performance of Sabre by integrating
it with SpiderMonkey in Firefox 2.0.0.9. Our test plat-
form was a 2.33Ghz Intel Core2 Duo machine running
Ubuntu 7.10 with 3GB RAM. We used the SunSpider and
V8 JavaScript benchmark suites to evaluate the performance
of Sabre. Our measurements were averaged over ten runs.
With the V8 suite, a Sabre-enabled browser reported
a mean score of 29.16 versus 97.91 for an unmodiﬁed
browser, an overhead of 2.36×, while with SunSpider, a
Sabre-enabled browser had an overhead of 6.1×. We found
that the higher overhead in SunSpider was because of three
benchmarks (3d-morph, access-nsieve and bitops-nsieve-
bits). Discounting these three benchmarks, Sabre’s over-
head with SunSpider was 1.6×. Despite these overheads,
the performance of the browser was not noticeably slower
during normal web browsing, even with JavaScript-heavy
web pages, such as Google maps and street views.
The main reason for the high runtime overhead re-
ported above is that Sabre monitors the provenance of each
JavaScript bytecode instruction to determine whether the in-
struction is from a JSE (to set the Boolean ﬂag in the se-
curity label, as described in Section 3.3). Monitoring each
instruction is important, primarily because code included in
overlays (distributed with JSEs) is included in the browser
core and may be executed at any time. If such overlays can
separately be veriﬁed to be benign, these checks can be dis-
abled. In particular, when we disabled this check, we ob-
served a manageable overhead of 77% and 42% with the V8
and SunSpider suites, respectively. Ongoing eﬀorts by Eich
et al. [23, 24] to track information ﬂow in JavaScript also
incur comparable (20%-70%) overheads.
5. Related Work
Browser extension security. Prior work [22, 30, 31]
has developed techniques to identify spyware behavior in
untrusted browser extensions, particularly in plugins and
BHOs, which are distributed as binary executables. These
approaches rely on whole-system information ﬂow track-
ing [22] and on monitoring plugin/browser interactions [30].
Like prior work [30, 31], Sabre also monitors JSE/browser
interactions but supplements such monitoring with informa-
tion on sensitivity/integrity of JavaScript objects. As illus-
trated in Section 4, this information is important for JSEs,
because several benign JSEs interact with the browser in a
manner akin to malicious JSEs. Spyshield [31] additionally
oﬀers containment by enforcing policies on data accesses
by untrusted plugins; such techniques can possibly comple-
ment Sabre to contain malicious JSEs. Like prior work [22],
Sabre also performs information-ﬂow tracking, but does so
at the JavaScript level within the browser. As discussed in
Section 1, doing so eases action attribution and integration
with the browser. Recent work has explored techniques to
sandbox browser extensions [26], but such work is currently
applicable only to extensions such as plugins and BHOs,
which are distributed as binary executables.
information
Ter-Louw et al. [41] were the ﬁrst to address the security
of JSEs. However, as discussed in Section 1, their work was
based on monitoring XPCOM calls; being coarse-grained,
their approach can have both false positives and negatives.
JavaScript
ﬂow. Netscape Navigator
3.0 ﬁrst proposed the use of data tainting to detect
conﬁdentiality-violating JavaScript code [16]. This idea
has been applied by Vogt et al.[42] to detect cross-site
scripting attacks. More recently, Austin et al. [17] have
proposed dynamic taint tracking techniques for JavaScript
with promising results, but over considerably smaller
benchmarks.
there is rich literature on
information-ﬂow tracking for both web applications and for
executable code; we do not survey that work in this paper.
In addition,
Although we leverage the JavaScript label propagation
rules developed in prior work, analyzing information ﬂow in
JSEs poses additional challenges, as illustrated throughout
this paper. In particular, Sabre precisely tracks cross-domain
information ﬂows and provides support for ﬁne-grained de-
classiﬁcation or endorsement of ﬂows. To our knowledge,
prior work on JavaScript information ﬂow tracking has not
needed or incorporated such support.
JavaScript sandboxing. Early work by Hallaraker and
Vigna [29] proposed XPCOM-level monitoring to sandbox
JavaScript code. Recent work on sandboxing JavaScript
has focused on the problem of conﬁning untrusted third-
party code that may be included in web pages as widgets
and advertisements. Notable eﬀorts include Adsafe [1],
Caja [33] and FBJS [2], which perform rewriting to restrict
the JavaScript constructs allowed in code included in web
pages. Although such techniques may possibly be used to
secure JSEs as well, restricting JavaScript constructs in JSEs
may restrict their functionality.
BrowserShield [36], CoreScript [47], Phung et al. [34]
and Erlingsson et al. [25] proposed the use of JavaScript
instrumentation to ensure compliance with site-speciﬁc se-
curity policies. Such techniques can be used to enforce ac-
cess control policies on a JSE’s accesses to sensitive browser
data. While such an approach can possibly constrain mali-
cious JSEs, it is unclear whether it will also protect exploits
against vulnerable JSEs (e.g., those in Section 2).
Chugh et al. [20] and Yip et al. [46] have proposed sand-
boxing of third-party JavaScript executing on web pages. In
contrast, Sabre sandboxes JSEs, which execute with more
390
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply. 
privileges and interact with more browser subsystems.
In addition to the above work on JavaScript sandbox-
ing, recent research has investigated static analysis tech-
niques for JavaScript code [32], particularly to statically en-
sure compliance with site-speciﬁc policies and to ensure the
integrity of client-side JavaScript code of a web applica-
tion [28]. We plan to explore whether Sabre can leverage
similar static analysis techniques to reduce the runtime over-
head of information ﬂow tracking for JSEs. However, we
expect that performing such analysis will be challenging for
obfuscated JSEs as well as those that contain a large number
of dynamic code generation constructs, such as eval.
6. Conclusion
This paper presented Sabre, an in-browser information-
ﬂow tracker that can detect conﬁdentiality and integrity vi-
olations in JSEs, enabled either because of malicious func-
tionality in JSEs or because of exploitable vulnerabilities in
the code of a JSE.
In future work, we plan to improve the performance of
Sabre by exploring static analysis of JavaScript code. For
example, static analysis can be used to create summaries of
fragments of JavaScript code that do not contain complex
constructs (e.g., eval). These summaries record how the
labels of objects accessed by the fragments are modiﬁed.
Sabre can use these summaries to update labels when the
fragment is executed, thereby avoiding the need to propagate
security labels for each bytecode instruction.
Acknowledgements. We thank Jan Jajalla for his help
with experiments, members of DiscoLab and the anony-
mous reviewers for their comments. This work was sup-
ported by NSF awards 0831268, 0915394 and 0931992.
References
[1] AdSafe: Making JavaScript safe for advertising. http://www.adsafe.
org.
[2] FBJS: Facebook developers wiki.
facebook.com/index.php/FBJS.
http://wiki.developers.
[3] Firebug: Web development evolved. http://getfirebug.com.
[4] Firefox Add-ons. http://addons.mozilla.org.
[5] Greasespot: The weblog about Greasemonkey.
http://www.
[7] Mozilla.org XPCOM. http://www.mozilla.org/projects/xpcom.
[8] NoScript—JavaScript blocker for a safer Firefox experience. http:
//noscript.net.
[9] Signed scripts in Mozilla:
JavaScript privileges.
http://www.
mozilla.org/projects/security/components/signed-scripts.
html.
[10] XML user interface language (XUL) project. http://www.mozilla.
[11] FormSpy: McAfee avert labs, July 2006. http://vil.nai.com/vil/
org/projects/xul.
content/v 140256.htm.
[12] Mozilla Firefox Firebug extension—Cross-zone scripting vulnerabil-
ity, April 2007. http://www.xssed.org/advisory/33.
[13] FFsniFF: FireFox sniFFer,
June
2008.
http://azurit.
elbiahosting.sk/ffsniff.
[14] Firefox add-ons infecting users with trojans, May 2008. http://www.
webmasterworld.com/firefox browser/3644576.htm.
[15] Trojan.PWS.ChromeInject.B, Nov 2008. http://www.bitdefender.
com/VIRUS-1000451-en--Trojan.PWS.ChromeInject.B.html.
[16] Netscape Navigator 3.0. Using data tainting for security. http://
www.aisystech.com/resources/advtopic.htm.
[17] T. Austin and C. Flanagan. Eﬃcient purely-dynamic information ﬂow
analysis. In ACM PLAS, June 2009.
greasespot.net.
[6] Internet Explorer
internet-explorer.
8.
http://www.microsoft.com/windows/
[18] P. Beaucamps and D. Reynaud. Malicious Firefox extensions.
In
Symp. Sur La Securite Des Technologies De L’Information Et Des
Communications, June 2008.
[19] L. Cavallaro, P. Saxena, and R. Sekar. On the limits of information
ﬂow techniques for malware analysis and containment. In DIMVA,
July 2008.
[20] R. Chugh, J. Meister, R. Jhala, and S. Lerner. Staged information
ﬂow for JavaScript. In PLDI, June 2009.
[21] M. Dhawan and V. Ganapathy. Analyzing information ﬂow in
JavaScript-based browser extensions. Technical Report DCS-TR-
648, Rutgers University, April 2009.
[22] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic spy-
ware analysis. In USENIX Annual Technical, June 2007.
[23] B. Eich. Better security for JavaScript, March 2009. Dagstuhl Semi-
nar 09141: Web Application Security.
[24] B. Eich. JavaScript security: Let’s ﬁx it, May 2009. Web 2.0 Security
[25] U. Erlingsson, Y. Xie, and B. Livshits. End-to-end web application
and Privacy Workshop.
security. In HotOS, May 2007.
[26] B. Yee et al.. Native client: A sandbox for portable, untrusted x86
native code. In IEEE S&P, May 2009.
[27] C. Grier, S. Tang, and S. T. King. Secure web browsing with the OP
web browser. In IEEE S&P, May 2008.
[28] A. Guha, S. Krishnamurthi, and T. Jim. Using static analysis for Ajax
intrusion detection. In WWW, April 2009.
[29] O. Hallaraker and G. Vigna. Detecting malicious JavaScript code
in Mozilla. In 10th IEEE Conf. on Engineering Complex Computer
Systems, June 2005.
[30] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. Kemmerer.
In USENIX Security, August
Behavior-based spyware detection.
2006.
[31] Z. Li, X. Wang, and J. Y. Choi. SpyShield: Preserving privacy from
spy add-ons. In RAID, September 2007.
[32] B. Livshits and S. Guarnieri. Gatekeeper: Mostly static enforcement
of security and reliability policies for JavaScript code. Technical Re-
port MSR-TR-2009-16, Microsoft Research, 2009.
[33] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and M. Stay. Caja: Safe
active content in sanitized JavaScript, June 2008.
[34] P. H. Phung, D. Sands, and A. Chudnov. Lightweight self-protecting
[35] M. Pilgrim.
JavaScript. In ASIACCS, March 2009.
Greasemonkey for
July 2005.
networks/sites,
greasemonkey/2005-July/003994.html.
secure data over
insecure
http://mozdev.org/pipermail/
[36] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir.
Browsershield: Vulnerability-driven ﬁltering of dynamic HTML. In
ACM/USENIX OSDI, November 2006.
[37] B. Ross, C. Jackson, N. Miyake, D. Boneh, and J. C. Mitchell.
In
Stronger password authentication using browser extensions.
USENIX Security, August 2005.
[38] J. Ruderman. The same-origin policy, August 2001. http://www.
mozilla.org/projects/security/components/same-origin.html.
[39] Secunia Advisory
SA24743/CVE-2007-1878/CVE-2007-1947.
Mozilla Firefox Firebug extension two cross-context scripting
vulnerabilities.
[40] Secunia Advisory SA30284. FireFTP extension for Firefox directory
traversal vulnerability.
[41] M. Ter-Louw, J. S. Lim, and V. N. Venkatakrishnan. Enhancing web
browser security against malware extensions. Journal of Computer
Virology, 4(3), August 2008.
[42] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vi-
gna. Cross site scripting prevention with dynamic data tainting and
static analysis. In NDSS, February 2007.
[43] D. Wagner and P. Soto. Mimicry attacks on host-based intrusion de-
tection systems. In ACM CCS, November 2002.
[44] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and
H. Venter. The multi-principal OS construction of the Gazelle web
browser. Technical Report MSR-TR-2009-16, Microsoft Research,
February 2009.
[45] S. Willison. Understanding the Greasemonkey vulnerability, July
2005. http://simonwillison.net/2005/Jul/20/vulnerability.
[46] A. Yip, N. Narula, M. Krohn, and R. Morris. Privacy-preserving
browser-side scripting with bﬂow. In EuroSys, April 2009.
[47] D. Yu, A. Chander, N. Islam, and I. Serikov. JavaScript instrumenta-
tion for browser security. In ACM POPL, January 2007.
391
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply.