### Optimized Text

**Figure 13** illustrates that for \(\epsilon = 6\), the classification accuracy is significantly lower compared to using low levels of uniform noise (as shown in **Figure 11**). This suggests that Laplace noise may achieve a better trade-off between privacy and utility. We plan to investigate its impact on the utility of other applications in future work.

**White Noise:**
From **Figure 13**, we observe that even with \(\epsilon = 1\), we can achieve an F-score ranging from 26% to 41%. Further analysis of the dominant features revealed that spectral features such as spectral irregularity, spectral attack slope, and spectral entropy are prominent. Modifying the gain and offset has minimal impact on these features. 

**Impact of Uniform Noise on Motion Sensor Applications:**
To briefly analyze how uniform noise affects applications using motion sensors, we prototyped a Step Counter application, a popular smartphone application [60], which uses accelerometer readings to determine the number of steps taken by a user. We collected sensor data through a web page, asking participants to take 20 steps while holding the phone in their hand, repeating this process 10 times. The collected sensor data was then calibrated and obfuscated. **Table XV** shows the step counts computed from the original and modified sensor streams. Neither calibration nor basic obfuscation had a significant effect on accuracy. Although calibration generally improves accuracy, our calibration process is imperfect and may introduce minor errors. Basic obfuscation introduces errors similar to those of actual devices, thus having minimal impact on accuracy. Increasing the obfuscation range still results in errors within an acceptable range. However, introducing new data points makes the accelerometer readings significantly less reliable, as observed in the step count. We next explore several alternative ways to add noise and their impact on privacy and utility.

**Table XV: Impact of Calibration and Obfuscation**

| Stream Type | Step Count (Mean) | Std Dev |
|-------------|-------------------|---------|
| Original Stream | 20 | 0 |
| Calibrated Stream | 20.1 | 0.32 |
| Basic Obfuscation | 20.1 | 0.32 |
| Increased-Range Obfuscation | 19.9 | 1.69 |
| Enhanced Obfuscation | 25.1 | 4.63 |

**Laplace Noise:**
Next, we adopted an approach similar to differential privacy, where we randomly selected offset and gain errors from a Laplace distribution. From the definition of differential privacy [61], a randomized function \(K\) provides \(\epsilon\)-differential privacy if for all datasets \(D1\) and \(D2\), the probability of any outcome does not differ by more than a factor of \(e^\epsilon\). Using this method, we fixed \(\epsilon = 6\) (since it had minimal impact on utility in **Figure 14**) and varied the signal-to-noise ratio (SNR). **Figure 15** highlights the F-scores for different SNR values. The F-score remains relatively steady but increases slightly for higher SNRs. Compared to Laplace noise, the F-score decreases significantly when white noise is added to the signal.

**Impact of White Noise on Utility:**
Given the low F-scores observed when adding white noise, we evaluated its impact on sensor utility by re-running our step counter application on sensor data after applying Gaussian white noise. **Figure 16** shows the computed step counts for different SNRs. Adding white noise significantly increases the number of steps counted, even at high SNRs.

**Deployment Considerations:**
We envision our obfuscation technique as an update to the mobile operating system. Under the default setting, data is always obfuscated unless the user explicitly allows an application to access unaltered sensor data. For some applications, a small amount of obfuscation does not impact their utility. However, for others, such as 3-D games, raw accelerometer and gyroscope data may be necessary, in which case the user can provide the appropriate permission. Our default obfuscation setting ensures that users do not have to worry about applications like browsers accessing sensor data without their awareness.

**Limitations:**
Our approach has a few limitations. First, we experimented with 93 devices; a larger target device pool could improve our accuracy. However, our experiments were conducted in real-world settings, collecting data from a wide variety of smartphones, making our results representative of real-world scenarios. Second, our calibration process has some errors, especially the manual calibration for the gyroscope, which is error-prone. Despite this, our main goal is to show that even simple calibration techniques can reasonably reduce device fingerprinting.

**Conclusion:**
In this paper, we demonstrate that motion sensors such as accelerometers and gyroscopes can be used to uniquely identify smartphones. These sensors can be surreptitiously accessed by a web page publisher without users' awareness. Injecting audio stimulation in the background improves detection rates as sensors like gyroscopes react uniquely to acoustic stimulation. Our countermeasure techniques, however, mitigate such threats by obfuscating anomalies in sensor data. We were able to significantly reduce fingerprinting accuracy using simple yet effective obfuscation techniques. As a general conclusion, we suggest using our obfuscation techniques in the absence of explicit user permission/awareness.

**Acknowledgment:**
We would like to thank all the anonymous reviewers for their valuable feedback. Special thanks to Romit Roy Choudhury and his group at UIUC for providing the bulk of the smartphones used in our experiments. We also extend our gratitude to the Computer Science department at UIUC for providing the remaining smartphones. We give special thanks to all the participants who took the time to participate in our online data collection study. This work was supported in part by NSF CNS 1053781 and NSF CNS 0953655.

**References:**
[1] K. Mowery and H. Shacham, “Pixel perfect: Fingerprinting canvas in HTML5,” in Proceedings of Web 2.0 Security and Privacy Workshop (W2SP), 2012.
...
[61] C. Dwork, “Differential Privacy,” in Proceedings of the 33rd International Colloquium on Automata, Languages and Programming (ICALP). Springer Verlag, 2006, pp. 1–12.

**Appendix A: Accessing Motion Sensors from Browser**
To access motion sensors, the `DeviceMotion` class needs to be initialized. A sample JavaScript snippet is provided below:

```javascript
if (window.DeviceMotionEvent !== undefined) {
    window.addEventListener('devicemotion', motionHandler);
    window.ondevicemotion = motionHandler;
}

function motionHandler(event) {
    let agx = event.accelerationIncludingGravity.x;
    let agy = event.accelerationIncludingGravity.y;
    let agz = event.accelerationIncludingGravity.z;
    let ai = event.interval;
    let rR = event.rotationRate;

    if (rR !== null) {
        let arAlpha = rR.alpha;
        let arBeta = rR.beta;
        let arGamma = rR.gamma;
    }
}
```

**Appendix B: Screenshot of Our Data Collection Webpage**
We provide screenshots (see **Figure 17**) of our data collection website to give a better idea of how participants were asked to participate.

**Figure 17: Screenshot of our data collection website.**

**Additional References:**
[40] Inside the Samsung Galaxy S4. http://www.chipworks.com/en/technical-competitive-analysis/resources/blog/inside-the-samsung-galaxy-s4/
...
[60] Wearables vs. Smartphone Apps: Which Are Better to Count Steps? http://www.livescience.com/49756-smartphone-apps-wearables-step-counts.html