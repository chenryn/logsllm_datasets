### Linux下Hook方式汇总
  * #### 导语
    * Linux下的Hook方式，从ring3到ring0，姿势很多，但其实是互通的，这里总结自己实现的几个。
                /******    Ring3    ******/
        LD_PRELOAD劫持.so
        ptrace API调试技术Hook
        PLT劫持
        /******* Ring 0 *******/
        针对系统调用的hook
            --首先获得sys_call_table
        利用sys函数的嵌套实现hook调用的子函数
        修改系统调用的前几个字节为jmp之类的指令（内联
    * 网上很多教程是针对Linux2.6左右的，很多方法需要自己重新摸索，记录踩坑。
      * 注： 以下所有代码在 **Linux 5.0.3. x86_64** 内核调试通过。
  * #### LD_PRELOAD劫持.so
    * LD_PRELOAD是一个Linux下的动态链接的程序的环境变量，几乎我们用到的函数实现来自于glibc，.so文件是glibc编译得到的库，类似于Win下的DLL。而LD_PRELOAD变量 **优先于相关配置** 指定链接到哪个.so文件。
    * 一旦我们可以控制该变量，也就可以决定程序调用函数时会做什么。
    * 实例展示
      * 目标文件target.c
                        #include 
            #include 
            int main(int argc, char *argv[])
            {
                if( strcmp(argv[1], "password") )
                {
                    printf("Incorrect password\n");
                }
                else
                {
                    printf("Correct password\n");
                }
                return 0;
            }
            //gcc target.c -o target
      * 伪造的.so文件preload.c
                        #include 
            #include 
            #include 
            typedef int(*Strcmp)(const char*, const char*);
            int strcmp(const char* s1, const char* s2)
            {
              static void* handle = NULL;
              static Strcmp org_strcmp = NULL;
              if(!handle)
              {   //解析得到真实的strcmp函数
                  handle = dlopen("libc.so.6", RTLD_LAZY);
                  org_strcmp = (Strcmp)dlsym(handle, "strcmp");
              }
                //做我们想做的
              printf("Hacked by way of ld_preload\n\n\n");
                //完成真实地功能
              return org_strcmp(s1, s2);  
            }
            //gcc -fPIC preload.c -shared -o preload.so -ldl
    * 这种方式比较简单，前提是程序不是静态链接的。（不会再解析.so，程序已经包含了库函数的实现）。
    * 防护方案
      * 关闭LD_PRELOAD
  * #### ptrace API调试技术Hook
    * ptrace是很多Linux平台下调试器实现的基础，包括syscall跟踪程序strace。
    * ptrace可以实现调试程序、跟踪；但是一个进程只能被一个进程跟踪。所以无法在gdb或者其他程序调试的时候去ptrace一个程序，同样也无法在ptrace一个进程的时候，再去gdb调试。后者经常作为一个简单的反调试手段。
    * 而且Linux下的攻防中，ptrace也由于自己的特殊性，常常是必争之地。
    * 总体思路
                ptrace attach目标进程
        保存rip
        控制跳转到mmap分配一段rwx内存
        将一段机器码copy进去
        控制跳转到机器码（可以以bin文件的形式）
        恢复执行。
    * 简单示例代码
      * 首先需要知道一些函数在目标进程的地址，下面是已知pid获取libc基地址（读取 **/proc/pid/maps** ），和函数地址( **dlsym** )
                size_t getLibcbase(int pid)
        {
            size_t libcAddr;
            char* buf;
            char* end;
            char* mapfile[0x18];
            sprintf(mapfile, Mapfile, pid);
            FILE* fd = fopen(mapfile, "r");
            if(!fd)
            {
                printf("open maps error!");
                exit(1);
            }
            //search the libc-.....
            buf = (char*) malloc(0x100);
            do{
                fgets(buf, 0x100, fd);
            } while(!strstr(buf, "libc-"));
            end = strchr(buf, '-');
            libcAddr = strtol(buf, &end, 16);
            printf("The process %d's libcbase is: 0x%lx\n", pid, libcAddr);
            fclose(fd);
            return libcAddr;
        }
        size_t getFuncAddr(int pid, char* funcName)
        {
            size_t funcAddr;
            char* buf;
            char* end;
            char* mapfile[0x18];
            sprintf(mapfile, Mapfile, pid);
            //get function offset from self process, the shared libc.so
            funcAddr = (size_t)dlsym(0, funcName);
            funcAddr -= getLibcbase(getpid());
            funcAddr += libc_addr;
            printf("function %s address is: 0x%lx\n", funcName, funcAddr);
            return funcAddr;
        }
      * **main** 代码
        * 为了得到存放shellcode的地址，我们需要先执行mmap，而执行mmap也需要一段可执行地址。这里其实我们可以直接使用libc_base。在libc_base处写入下面的opcode，其中int 0x3是为了发出信号，让我们知道该opcode执行完成。
                                call rax
                    int 0x3
                    ;"\xff\xd0\xcd\x03"
        * 实现mmap调用
          * 备份数据，写入opcode，设置mmap参数
                                        //save a bak of regs
                      ptrace(PTRACE_GETREGS, traced, 0, &regs_bak);
                      memcpy(&regs, &regs_bak, sizeof(struct user_regs_struct));
                      //use libc_base to write our short hook code
                      buf.val = ptrace(PTRACE_PEEKTEXT, traced, libc_addr, 0);
                      hook_bak.val = buf.val;
                      memcpy(buf.chars, Call, 4);
                      ptrace(PTRACE_POKETEXT, traced, libc_addr, buf.val);
                      fd = open(argv[2], O_RDONLY);
                      fstat(fd, &sb);
                      if(fd 
        #include 
        #include 
        #include 
        #include 
        #include 
        #include 
        #include 
        #include 
        #include 
        #include 
        #include 
        #include 
        #define Mapfile "/proc/%d/maps"
        //用于获取plt内容
        union pltval{
            size_t val;
            unsigned char chars[sizeof(size_t)];
        };
        void usage(char** argv){
            printf("USAGE: \n --- %s pid plt_offset \n", argv[0]);
        }
        void printerror(){
            printf("Status: %s\n", strerror(errno));
        }
        void mod_handle(pid_t tracee, void* addr1, void* addr2)
        {
            union pltval buf;
            buf.val = ptrace(PTRACE_PEEKDATA, tracee, addr1, 0);
            printf("mod_handle: ");
            printerror();
            memcpy(buf.chars, "hooked", 6);
            buf.chars[6] = 0;
            ptrace(PTRACE_POKEDATA, tracee, addr1, buf.val);
            printf("hook: ");
            printerror();
            buf.val = ptrace(PTRACE_PEEKDATA, tracee, addr2, 0);
            printf("mod_handle: ");
            printerror();
            memcpy(buf.chars, "/hooked", 7);
            buf.chars[7] = 0;
            ptrace(PTRACE_POKEDATA, tracee, addr2, buf.val);
            printf("/hooked: ");
            printerror();
        }
        size_t getCodebase(pid_t pid)
        {
            size_t addr;
            char buf[2 * sizeof(size_t)];
            char* end;
            char* mapfile[0x18];
            sprintf(mapfile, Mapfile, pid);
            int fd = open(mapfile, O_RDONLY);
            if(fd == -1)
            {
                printf("open maps error!");
                exit(1);
            }
            read(fd, buf, 2 * sizeof(size_t));
            end = strchr(buf, '-');
            addr = strtol(buf, &end, 16);
            printf("The codebase is: 0x%lx\n", addr);
            close(fd);
            return addr;
        }
        int main(int argc, char* argv[]){
            pid_t tracee; 
            union pltval plt;
            struct user_regs_struct regs;
            siginfo_t si;
            int status;
            size_t plt_offset, plt_addr, bak;
            if(argc  %lx\n", plt_addr);
            //attach the process
            ptrace(PTRACE_ATTACH, tracee, 0, 0);
            printf("Attach: ");
            printerror();
            wait(&status);
            //获取目标的plt值，保存，修改，写入， 继续运行
            plt.val = ptrace(PTRACE_PEEKDATA, tracee, plt_addr, 0);
            bak = plt.val;
            plt.chars[0] = 0xcc;        //breakpoint
            ptrace(PTRACE_POKEDATA, tracee, plt_addr, plt.val);
            ptrace(PTRACE_CONT, tracee, 0, 0);
            //监视有没有触发断点
            while(1){
                printf("Wait....\n");
                wait(&status);
                printf("Done!\n");
                if(WIFEXITED(status)) break;
                //获取regs和sig信息，判断是否到达plt
                ptrace(PTRACE_GETSIGINFO, tracee, 0, &si);
                ptrace(PTRACE_GETREGS, tracee, 0, &regs);
                if((si.si_signo != SIGTRAP) || (regs.rip != (size_t)plt_addr + 1)){