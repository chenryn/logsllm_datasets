$ kubectl get services
```
![](img/73e1ed2f-01d7-4cb2-82d3-ce93d24c7126.png)
您可能已经注意到，这次我们不需要提供名称空间。这是因为我们的栈是在默认命名空间中启动的。此外，列出服务时，还会为集群栈列出集群 IP 和负载平衡器。查看负载均衡器，可以看到外部 IP 为`localhost`，端口为`80`。
在我们的浏览器中打开 [http://localhost/](http://localhost/) 显示应用:
![](img/875e57d6-b43c-453c-b980-bdaed5ad4397.png)
如果您仍然打开仪表板，您可以浏览您的栈，甚至打开一个终端到一个容器:
![](img/8536ae3e-d84c-4df9-b481-2823300abb52.png)
您可以通过运行以下命令来删除`stack`:
```
$ docker stack rm cluster
```
最后一件事——你可能在想，太好了，我可以在 Kubernetes 集群的任何地方运行我的 Docker Compose 文件。严格来说这不是真的。如前所述，当我们第一次启用 Kubernetes 时，推出了一些仅 Docker 组件。这些是为了确保 Docker 尽可能紧密地集成在一起。但是，由于这些组件不会存在于非 Docker 管理的集群中，因此您将无法使用`docker stack`命令。
尽管如此，一切都没有失去。作为 Kubernetes 项目的一部分，提供了一个名为 **Kompose** 的工具，它可以获取一个 Docker Compose 文件，并将其动态转换为 Kubernetes 定义文件。
要在 macOS 上安装 Kompose，请运行以下命令:
```
$ curl -L https://github.com/kubernetes/kompose/releases/download/v1.16.0/kompose-darwin-amd64 -o /usr/local/bin/kompose
$ chmod +x /usr/local/bin/kompose
```
Windows 10 用户可以使用巧克力安装二进制文件:
**Chocolatey** is a command-line based package manager that can be used to install various software packages on your Windows-based machine, similar to how you can use `yum` or `apt-get` on Linux machines or `brew` on macOS.
```
$ choco install kubernetes-kompose
```
最后，Linux 用户可以运行以下命令:
```
$ curl -L https://github.com/kubernetes/kompose/releases/download/v1.16.0/kompose-linux-amd64 -o /usr/local/bin/kompose
$ chmod +x /usr/local/bin/kompose
```
安装后，您可以通过运行以下命令来启动 Docker 编写文件:
```
$ kompose up
```
您将获得如下输出:
![](img/90c65ca1-44e3-419b-9896-98dc7f5d225f.png)
正如输出所建议的，运行以下命令将为您提供关于我们刚刚启动的服务和 pod 的详细信息:
```
$ kubectl get deployment,svc,pods,pvc
```
![](img/7dc83cb6-26c1-4e87-a584-802608ede4c7.png)
您可以通过运行以下命令来删除服务和 pods:
```
$ kompose down
```
![](img/d3076f4e-b5ad-4eda-8243-150499252542.png)
虽然您可以使用`kompose up`和`kompose down`，但我建议您生成 Kubernetes 定义文件，并根据需要进行调整。为此，只需运行以下命令:
```
$ kompose convert
```
这将生成 pod 和服务文件:
![](img/1a7d963d-ee6f-40e4-935b-f52c9a15467f.png)
您将能够看到 Docker 编写文件和生成的两个文件之间的巨大差异。`cluster-pod.yaml`文件如下所示:
```
apiVersion: v1
kind: Pod
metadata:
 creationTimestamp: null
 labels:
 io.kompose.service: cluster
 name: cluster
spec:
 containers:
 - image: russmckendrick/cluster
 name: cluster
 ports:
 - containerPort: 80
 resources: {}
 restartPolicy: OnFailure
status: {}
```
`cluster-service.yaml`文件如下所示:
```
apiVersion: v1
kind: Service
metadata:
 annotations:
 kompose.cmd: kompose convert
 kompose.version: 1.16.0 (0c01309)
 creationTimestamp: null
 labels:
 io.kompose.service: cluster
 name: cluster
spec:
 ports:
 - name: "80"
 port: 80
 targetPort: 80
 selector:
 io.kompose.service: cluster
status:
 loadBalancer: {}
```
然后，您可以通过运行以下命令来启动这些文件:
```
$ kubectl create -f cluster-pod.yaml
$ kubectl create -f cluster-service.yaml
$ kubectl get deployment,svc,pods,pvc
```
![](img/4909293e-096a-4729-9f2c-2af7c39e8d52.png)
要删除集群 pod 和服务，我们只需要运行以下命令:
```
$ kubectl delete service/cluster pod/cluster
```
虽然 Kubernetes 将在接下来的章节中出现，但您可能希望在 Docker 桌面安装中禁用 Kubernetes 集成，因为它在空闲时确实会增加一些开销。为此，只需取消勾选**启用 Kubernetes** 。当您单击**应用**时，Docker 将停止运行 Kubernetes 所需的所有容器；但是，它不会删除映像，因此当您重新启用它时，不会花费太长时间。
# 摘要
在本章中，我们从 Docker 桌面软件的角度来看 Kubernetes。Kubernetes 的内容比我们在本章中介绍的要多得多，所以请不要以为这就是全部。在讨论了 Kubernetes 的起源之后，我们看了如何使用 Mac 的 Docker 或 Windows 的 Docker 在本地机器上启用它。
然后，我们讨论了`kubectl`的一些基本用法，然后看看如何运行我们可以使用`docker stack`命令来启动我们的应用，就像我们对 Docker Swarm 所做的那样。
在这一章的最后，我们讨论了 Kompose，它是 Kubernetes 项目下的一个工具。它可以帮助您转换 Docker Compose 文件，以便与 Kubernetes 一起使用，让您在将应用迁移到纯 Kubernetes 上有一个好的开端。
在下一章中，我们将看一下公共云上的 Docker，例如亚马逊网络服务，并简要回顾一下 Kubernetes。
# 问题
*   对或错:当**显示系统容器(高级)**未锁定时，您无法看到用于启动 Kubernetes 的映像。
*   四个名称空间中的哪一个承载了用于运行 Kubernetes 并在 Docker 中启用支持的容器？
*   您会运行哪个命令来了解容器在 pod 中运行的详细信息？
*   您会使用哪个命令来启动 Kubernetes 定义 YAML 文件？
*   通常，命令`kubectl`代理在您的本地机器上打开哪个端口？
*   Google 容器编排平台的原名是什么？
# 进一步阅读
本章开头提到的一些谷歌工具、演示文稿和白皮书可以在以下网址找到:
*   小组:[http://man7.org/linux/man-pages/man7/cgroups.7.html](http://man7.org/linux/man-pages/man7/cgroups.7.html)
*   lmctfy:[https://github . com/Google/lmctfy/](https://github.com/google/lmctfy/)
*   Scale 上的容器，Joe Beda 的幻灯片来自 GluCon:[https://pdf . semanticscholar . org/presentation/4df 0/b2bcd 39 b 7757867 B1 EAD 3009 a 628 e 07 D8 b 57 . pdf](https://pdfs.semanticscholar.org/presentation/4df0/b2bcd39b7757867b1ead3009a628e07d8b57.pdf)
*   谷歌与博格的大规模集群管理:[https://ai.google/research/pubs/pub43438](https://ai.google/research/pubs/pub43438)
*   lxc-[https://linuxcontainer . org/](https://linuxcontainers.org/)
您可以在以下网址找到本章中提到的云服务的详细信息:
*   Google kubricks engine(gke):[https://cloud . Google . com/kubricks engine/](https://cloud.google.com/kubernetes-engine/)
*   蓝色立方服务(AK):[https://azure . Microsoft . com/en-GB/services/立方服务/](https://azure.microsoft.com/en-gb/services/kubernetes-service/)
*   Amazon 弹性容器服务(Amazon eks):[https://AWS . Amazon . com/eks/](https://aws.amazon.com/eks/)
*   IBM 云 Kubernetes 服务:[https://www.ibm.com/cloud/container-service](https://www.ibm.com/cloud/container-service)
*   Oracle container engine for Kuwait:https://cloud . Oracle . com/containers/kubricks engine
*   数码海洋上的立方:[https://www . digital ocean . com/products/ku brites/](https://www.digitalocean.com/products/kubernetes/)
您可以在以下网址找到 Docker 关于 Kubernetes 支持的公告:
*   Kubernetes for Docker Enterprise 公告:[https://blog . Docker . com/2017/10/Docker-Enterprise-edition-kubernetes/](https://blog.docker.com/2017/10/docker-enterprise-edition-kubernetes/)
*   Kubernetes 做稳定发布:[https://blog . docker . com/2018/07/kubernetes-is-now-in-docker-desktop-stable-channel/](https://blog.docker.com/2018/07/kubernetes-is-now-available-in-docker-desktop-stable-channel/)
最后，可在以下网址找到 Kompose 的主页:
*   komp ci-[http://komp ci . io/](http://kompose.io/)