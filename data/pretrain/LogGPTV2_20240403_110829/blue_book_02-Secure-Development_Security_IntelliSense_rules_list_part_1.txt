## Important Notice: DevOps Kit (AzSK) Sunset
Please be informed that the DevOps Kit (AzSK) will be discontinued by the end of FY21. For more details, please refer to the [AzSK Sunset Notice](../ReleaseNotes/AzSKSunsetNotice.md).

## Security IntelliSense Rule List

### Rule: `appsec_xml_doc_dtdprocessing_parse`
**Message:**
Do not use the `Parse` option in `System.Xml.DtdProcessing`. DTD parsing can be exploited for various Denial of Service (DoS) and privilege escalation attacks.

**Description:**
Avoid using the `Parse` option in `System.Xml.DtdProcessing` as it can lead to DoS and privilege escalation attacks through DTD parsing.

---

### Rule: `appsec_xml_doc_resolver`
**Message:**
Use `XmlResolver` carefully in trusted document scenarios. Consider using `XmlSecureResolver` instead.

**Description:**
When working with trusted documents, use `XmlResolver` with caution. It is recommended to use `XmlSecureResolver` to enhance security.

---

### Rule: `appsec_xml_prohibitdtd_flag`
**Message:**
Do not set the `ProhibitDtd` property to `false`. This may increase exposure to DoS and privilege escalation attacks from DTD parsing.

**Description:**
Setting the `ProhibitDtd` property to `false` increases the risk of DoS and privilege escalation attacks. Ensure this property is set to `true`.

---

### Rule: `authn_web_cookie_create_settings_1`
**Message:**
Set the `secure` property to `true` wherever possible. Set `HttpOnly` to `true` wherever possible. Use a shorter expiry time whenever possible.

**Description:**
To enhance security, set the `secure` and `HttpOnly` properties to `true` and use a short expiry time for cookies.

---

### Rule: `authn_web_cookie_create_settings_2`
**Message:**
Set the `secure` property to `true` wherever possible. Set `HttpOnly` to `true` wherever possible. Use a shorter expiry time whenever possible.

**Description:**
To enhance security, set the `secure` and `HttpOnly` properties to `true` and use a short expiry time for cookies.

---

### Rule: `authn_web_cookie_expiry`
**Message:**
Set the cookie expiry to be as short as possible, especially if the cookie is used for authenticated sessions.

**Description:**
Longer cookie expiry periods increase the risk of exploitation if the cookie is stolen. Keep the expiry time as short as possible.

---

### Rule: `authn_web_cookie_httponly`
**Message:**
Set `httponly` to `true` to reduce the risk of JavaScript accessing the cookies.

**Description:**
Setting `httponly` to `true` helps prevent JavaScript from accessing the cookies, thereby reducing the risk of cross-site scripting (XSS) attacks.

---

### Rule: `authn_web_cookie_secure_flag`
**Message:**
Set `secure` to `true` to reduce the risk of sending cookies over plain HTTP.

**Description:**
Setting the `secure` flag to `true` ensures that the browser will only send the cookie over HTTPS, protecting it from being intercepted over unencrypted connections.

---

### Rule: `authn_web_formsauthticket_timeout`
**Message:**
Be mindful of the expiration time. Keep it short.

**Description:**
Ensure that the Forms Authentication ticket timeout is kept short to minimize the window of opportunity for an attacker to exploit a stolen ticket.

---

### Rule: `authn_web_formsprotection_encryption`
**Message:**
Set `FormsProtection` to `FormsProtectionEnum.All`.

**Description:**
Set `FormsProtection` to `FormsProtectionEnum.All` to adequately protect cookies against various cryptographic attacks.

---

### Rule: `authn_web_formsprotection_none`
**Message:**
Set `FormsProtection` to `FormsProtectionEnum.All`.

**Description:**
Set `FormsProtection` to `FormsProtectionEnum.All` to adequately protect cookies against various cryptographic attacks.

---

### Rule: `authn_web_formsprotection_validation`
**Message:**
Set `FormsProtection` to `FormsProtectionEnum.All`.

**Description:**
Set `FormsProtection` to `FormsProtectionEnum.All` to adequately protect cookies against various cryptographic attacks.

---

### Rule: `azure_aad_authority_validation_turned_off`
**Message:**
Authority validation should not be disabled for Azure AD security tokens.

**Description:**
Disabling authority validation means that any well-formed token will be accepted, regardless of the issuing authority. This is rarely desirable. Do not explicitly set the validation to `false` in the `AuthenticationContext`. The default value is `true`.

---

### Rule: `azure_aad_avoid_custom_token_caching`
**Message:**
Custom token cache identified. Allow ADAL to handle token caching transparently.

**Description:**
Avoid using custom caches for ADAL tokens. The ADAL library uses an in-memory cache for storing tokens when no custom token cache is provided to its `AuthenticationContext` constructor.

---

### Rule: `azure_aad_avoid_memberof`
**Message:**
The `memberOf` method is not transitive and does not return nested groups, which may lead to security bypass in certain cases.

**Description:**
The `memberOf` method is used to check group membership but is not transitive, meaning it does not return nested groups. This can lead to security bypass. Review the group membership verification logic in your code and consider using other API methods listed here: [MSDN - Users Operations](https://msdn.microsoft.com/en-us/library/azure/ad/graph/api/users-operations) for checking group membership.

---

### Rule: `azure_adal_avoid_accesstoken_in_code`
**Message:**
Explicit usage of access token found in the code. Access tokens should be handled securely and not stored in persistent storage like databases or files unless absolutely necessary.

**Description:**
It is recommended to use the ADAL library for acquiring and handling tokens, as it securely stores them in an internal in-memory cache by default.

---

### Rule: `azure_adal_avoid_refreshtoken_in_code`
**Message:**
Explicit usage of refresh token found in the code. Refresh tokens should be handled securely and not stored in persistent storage like databases or files unless absolutely necessary.

**Description:**
It is recommended to use the ADAL library for acquiring and handling tokens, as it securely stores them in an internal in-memory cache by default.

---

### Rule: `azure_sbr_no_client_authentication`
**Message:**
Using `RelayClientAuthenticationType.None` is unsafe as it allows clients to connect to the relay without authentication. Use `RelayClientAuthenticationType.RelayAccessToken`.

**Description:**
When using service bus relays, clients must authenticate to the relay to connect to the on-premise endpoint. Using `None` for `RelayClientAuthenticationType` allows any client (without credentials) to connect to the relay and attempt to reach the on-premise service.

---

### Rule: `azure_storage_blob_public_access`
**Message:**
The chosen setting for `BlobContainerPublicAccessType` will allow public access to blobs within this container (without requiring an access token). This should be carefully evaluated in the context of the scenario.

**Description:**
The chosen setting for `BlobContainerPublicAccessType` will allow public access to blobs within this container (without requiring an access token). It is recommended to use `BlobContainerPublicAccessType.Off` unless absolutely required. Creation of containers with unrestricted access should be carefully evaluated in the context of the scenario.

---

### Rule: `azure_storage_container_public_access`
**Message:**
The chosen setting for `BlobContainerPublicAccessType` will allow public access to blobs within this container (without requiring an access token). This should be carefully evaluated in the context of the scenario.

**Description:**
The chosen setting for `BlobContainerPublicAccessType` will allow public access to blobs within this container (without requiring an access token). It is recommended to use `BlobContainerPublicAccessType.Off` unless absolutely required. Creation of containers with unrestricted access should be carefully evaluated in the context of the scenario.

---

### Rule: `azure_storage_sas_use_https`
**Message:**
The `HttpsOrHttp` option is insecure as it allows the use of HTTP (plaintext) for content request and transfer. Use `SharedAccessProtocol.HttpsOnly`.

**Description:**
Using `HttpsOrHttp` implies that both the request content and any headers (including SAS tokens) will be transferred over plaintext. Instead, use `SharedAccessProtocol.HttpsOnly` to ensure the transfer is encrypted.

---

### Rule: `azure_storage_sastoken_validity_too_long`
**Message:**
Use the shortest possible token lifetime appropriate for the scenario. See AAD default token expiration times [here](<link>).

**Description:**
It is recommended to set an appropriate and short lifetime for tokens. Typically, access tokens should have a validity period of a few hours (ideally kept as small as practical).

---

### Rule: `crypto_certs_weak_hmac`
**Message:**
The `X509Certificate2` class does not support SHA256-based signatures.

**Description:**
The `X509Certificate2` class supports SHA1-based signature algorithms, which are considered weak and inadequate. Consider using `RsaCryptoServiceProvider`, which supports SHA-256-based signatures.

---

### Rule: `crypto_dpapi_avoid_localmachine_flag`
**Message:**
Use `DataProtectionScope.CurrentUser`. `LocalMachine` will allow all processes running on the computer to unprotect the data.

**Description:**
Use `DataProtectionScope.CurrentUser` to restrict data protection to the current user. Using `LocalMachine` will allow all processes running on the computer to unprotect the data.

---

### Rule: `crypto_enc_aes_weak_keysize`
**Message:**
The encryption key size used for AES must be large enough.

**Description:**
When using AES encryption, the key size should be at least 256 bits. While 128-bit keys are currently allowed, they should only be used in backward compatibility scenarios.

---

### Rule: `crypto_enc_avoid_padding_mode_ansix923`
**Message:**
Try to use PKCS7 padding mode with AES wherever possible.

**Description:**
Use the PKCS7 padding mode with AES wherever possible. Other padding modes may lead to subtle cryptographic vulnerabilities.

---

### Rule: `crypto_enc_avoid_padding_mode_iso10126`
**Message:**
Try to use PKCS7 padding mode with AES wherever possible.

**Description:**
Use the PKCS7 padding mode with AES wherever possible. Other padding modes may lead to subtle cryptographic vulnerabilities.

---

### Rule: `crypto_enc_avoid_padding_mode_none`
**Message:**
Try to use PKCS7 padding mode with AES wherever possible.

**Description:**
Use the PKCS7 padding mode with AES wherever possible. Other padding modes may lead to subtle cryptographic vulnerabilities.

---

### Rule: `crypto_enc_avoid_padding_mode_zeros`
**Message:**
Try to use PKCS7 padding mode with AES wherever possible.

**Description:**
Use the PKCS7 padding mode with AES wherever possible. Other padding modes may lead to subtle cryptographic vulnerabilities.

---

### Rule: `crypto_enc_ciphermode_ecb`
**Message:**
Do not use ECB mode for symmetric encryption.

**Description:**
ECB mode is prone to various cryptographic attacks. Use a stronger mode such as CBC instead.

---

### Rule: `crypto_enc_unapproved_alg_rijndael`
**Message:**
The `RijndaelManaged` class is not approved for use in symmetric encryption.

**Description:**
The `RijndaelManaged` class supports algorithm modes that are not FIPS-approved and has been found to be weak against certain attacks. Use `AesCryptoServiceProvider` instead.

---

### Rule: `crypto_hash_weak_alg_md5`
**Message:**
The MD5 hash algorithm is weak and must not be used.

**Description:**
The MD5 hash algorithm has been broken and many practical attacks have been found in scenarios using it. Use `SHA256CryptoServiceProvider` instead.

---

### Rule: `crypto_hash_weak_alg_sha1`
**Message:**
The SHA1 hash algorithm is weak and must not be used.

**Description:**
The SHA1 hash algorithm has been broken and many practical attacks have been found in scenarios using it. Use `SHA256CryptoServiceProvider` instead.

---

### Rule: `crypto_pki_rsa_keysize`
**Message:**
Use a key size of 2048 bits or more for RSA.

**Description:**
Using RSA keys smaller than 2048 bits is not recommended. Cryptography using small key sizes increases the risk of compromise.

---

### Rule: `crypto_rng_weak_rng`
**Message:**
The `Random` class is a cryptographically weak random number generator.

**Description:**
In the context of cryptography, random number generators should be cryptographically secure. The `Random` class does not meet these requirements and should not be used. Consider using `RNGCryptoServiceProvider` instead.

---

### Rule: `dp_use_https_baseaddress_httpclient`
**Message:**
Use HTTPS instead of HTTP.

**Description:**
Using HTTPS ensures that the server is authentic and that the data transferred is encrypted in transit. Do not use plain HTTP.

---

### Rule: `dp_use_https_baseaddress_webclient`
**Message:**
Use HTTPS instead of HTTP.

**Description:**
Using HTTPS ensures that the server is authentic and that the data transferred is encrypted in transit. Do not use plain HTTP.

---

### Rule: `dp_use_https_deleteasync_httpclient`
**Message:**
Use HTTPS instead of HTTP.

**Description:**
Using HTTPS ensures that the server is authentic and that the data transferred is encrypted in transit. Do not use plain HTTP.

---

### Rule: `dp_use_https_downfiletaskaasync_webclient`
**Message:**
Use HTTPS instead of HTTP.

**Description:**
Using HTTPS ensures that the server is authentic and that the data transferred is encrypted in transit. Do not use plain HTTP.

---

### Rule: `dp_use_https_downloaddata_webclient`
**Message:**
Use HTTPS instead of HTTP.

**Description:**
Using HTTPS ensures that the server is authentic and that the data transferred is encrypted in transit. Do not use plain HTTP.