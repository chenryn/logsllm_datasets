The state of the art in automatic invariants detection is based
on Daikon [10]. Daikon is a tool developed to automatically dis-
cover pre-conditions and post-conditions that hold when program
functions are called. Baliga et al. have adapted Daikon to work
on kernel data structures. Their tool, Gibraltar [5], is able to de-
tect previously-known rootkit that modify the data structures of the
Linux kernel. However, this tool, and a similar approach imple-
mented for Windows, called KOP [8], requires kernel source code
to extract a graph of kernel data structure relationships. Such source
code is often unavailable, especially in the case of external drivers.
Furthermore, security systems that contain kernel-based compo-
nents introduce additional complexity into the real-world use of
such programs. In contrast, Blacksheep requires no knowledge of
source code.
The use of invariants based on graph signatures has been imple-
mented by SigGraph [22]. However, SigGraph requires the avail-
ability of source code or debug information, while Blacksheep has
no such requirement. Additionally, similar ideas have been applied
to ﬁlesystem changes with Seurat [36].
2.7 Physical memory analysis
Physical memory analysis is an active area of research whose
aim is to capture reliable and complete information from a live
acquisition of the physical memory of a running system.
It has
been studied mainly in the context of forensic and malware analy-
343sis [7,13], and several specialized tools have been developed to per-
form such analyses. Such tools include HBGary Responder Pro [2]
and Volatility [34].
Volatility is an open-source framework for physical memory anal-
ysis, containing an extensible plugin structure that allows for the
implementation of various analyses. Various plugins have been de-
veloped, including those that perform malware detection and anal-
ysis [21].
The detection of memory allocated inside the Windows kernel
heap has also been studied [29,30], as has the use of information ex-
tracted from the Windows swap ﬁle [19] (albeit, mainly for forensic
purposes).
Blacksheep utilizes Volatility with build-in and speciﬁcally de-
veloped plugins to support its operation. In addition, it is able to
deal with physical memory dumps created by several common tools
for memory acquisition.
3. APPROACH
Blacksheep is designed to detect rootkit infestations in kernel
memory. Blacksheep’s design is motivated by the realization that,
regardless of how much a rootkit tries to hide itself, it must still be
accessible by the operating system in order to be executed. This
concept is known as the Rootkit Paradox [18]. Additionally, even
if a rootkit manages to hide its code from the operating system,
the data modiﬁcations it makes can still be detected. While some
conceptual rootkits have been demonstrated that can completely
unplug themselves from the system [22], they do so by mangling
pointers and destabilizing the victim operating system. Even if the
operating system survives these modiﬁcations, the pointer manipu-
lations can still be observed.
With this basic idea in mind, we created Blacksheep, which com-
pares images of physical memory taken from similar machines to
identify differences associated with rootkit infections. Blacksheep
is most effective when operating on a crowd of similar machines.
Since we are comparing kernel memory snapshots, an under-
standing of this memory space is required. The Windows kernel
consists of many modules, which are PE ﬁles containing kernel
code and data. Modules can be operating system components (e.g.,
kernel32.dll) or hardware drivers (e.g., nvstor32.sys), and we use
these terms interchangeably. The module and driver ﬁles are loaded
into kernel memory in much the same way as dynamically linked
libraries (DLLs) are loaded into user-space programs, and make
up the functionality of the kernel. Similar to Windows DLLs, ker-
nel modules contain both code and data segments. These segments
require separate approaches in their comparisons, and Blacksheep
treats them separately.
In summary, Blacksheep performs the following four types of
analyses, which are detailed in Section 4:
(cid:129) Conﬁguration comparison;
(cid:129) Code comparison;
(cid:129) Data comparison; and
(cid:129) Kernel entry point comparison.
Conﬁguration comparison. Some rootkits come in the form of
a kernel module that is loaded into the system. To identify such
changes, Blacksheep does a “conﬁguration comparison,” compar-
ing loaded modules between two memory dumps. This allows the
system to detect additional (and potential malicious) components
that are introduced into the kernel. Details are presented in Sec-
tion 4.1.
Code comparison. Most rootkits directly overwrite or augment ex-
isting code in kernel space with malicious content so that they can
perform subversive tasks (such as hiding resources) when this code
is executed. Thus, a difference in kernel code between machines
that should be otherwise identical can be a good indicator that a
rootkit may be present. However, due to the possibility of benign
differences resulting from, among other causes, code relocation and
anti-virus defense techniques, a detected difference might not nec-
essarily mean that the machine is infected. Blacksheep can ﬁlter
out benign differences and focus on suspicious code differences.
We discuss the speciﬁcs of this functionality in more detail in Sec-
tion 4.2.
Memory comparison. Detecting differences in kernel code alone
is not enough to detect the presence of rootkits with high accuracy.
For example, certain rootkits are able to subvert system function-
ality without performing any modiﬁcations to code running on the
system, and, instead, they change kernel data structures to avoid
detection through code comparison. Because of the threat of such
rootkits, we compare kernel data between machines.
Comparing such data between two different machines is a non-
trivial task, and constitutes a large portion of Blacksheep’s contri-
bution. For statically allocated data segments (i.e., those segments
that are deﬁned in and loaded from the PE ﬁle), the main challenge
is handling relocation. However, dynamically allocated memory
provides a more substantial challenge. This data oftentimes con-
tains many layers of data structures linking to each other, which
must be navigated in order to ensure good coverage. Blacksheep
uses several methods to be able to identify and compare such data
structures, which are described further in Section 4.3.
Entry point comparison. Additionally, rootkits might subvert ba-
sic interfaces to the Windows kernel in order to carry out their tasks.
This includes the Windows kernel SSDT, driver IRP communica-
tion channels, and certain hardware registers in the x86 architec-
ture. Blacksheep is able to compare such kernel entry points by
processing the machines’ dumps of physical memory. We present
the details of this kind of analysis in Section 4.4.
Clustering and detection. After comparing each pair of mem-
ory dumps, Blacksheep places them into clusters, according to the
differences present between them. The larger clusters are then as-
sumed to contain the clean dumps, and the smaller clusters are la-
beled as suspicious. The assumption is that only a small fraction
of the hosts are infected, and these hosts stand out as outliers when
compared to the other machines in the crowd. This step is discussed
in Section 4.5.
4. SYSTEM DETAILS
Blacksheep computes the differences between two memory dumps
to produce a distance metric. In the computation of differences,
Blacksheep looks for four categories of differences: high-level con-
ﬁguration differences, code differences, data differences, and dif-
ferences in kernel entry points.
4.1 Conﬁguration Analysis
Blacksheep is able to utilize conﬁguration information obtained
from memory dumps to assist its analysis. Speciﬁcally, it is im-
possible to meaningfully compare the code of a kernel module be-
tween two memory dumps if one of the dumps does not have such a
driver loaded while the other does. Since rootkits often cause such
differences (because they load additional components), Blacksheep
carries out the comparison of loaded kernel modules as a separate
analysis. To accomplish this, a list of loaded kernel modules is
identiﬁed in each memory dump. Each kernel module is repre-
344sented as a pair, consisting of the size of it originating PE ﬁles
and the CRC checksum. The lists are sorted and compared. The
distance metric that Blacksheep generates for this analysis is equal
to the number of differences between the lists of kernel modules.
That is, each addition or deletion of a kernel module adds one to
the distance value.
Note that some rootkits can (and do) masquerade the modules
they inject as common Windows kernel modules. In such an event,
the conﬁguration analysis might not ﬁnd the difference between a
malicious driver and a legitimate module installed in another ma-
chine. However, this difference will be detected in the subsequent
code analysis step instead (as the rootkit code will be very different
from the legitimate driver).
4.2 Code Analysis
Most Windows rootkits inject code into kernel memory and redi-
rect legitimate ﬂow of execution to it. Blacksheep’s code analy-
sis checks for signs of such redirections by identifying differences
in driver code. Since the header information from the PE ﬁles of
kernel modules is stored in memory, Blacksheep can examine the
headers of all loaded drivers to identify segments containing driver
code.
For each kernel module that is loaded in both memory dumps,
Blacksheep compares all code segments within both modules, byte-
by-byte, to identify a list of bytes that differ. In principle, one could
expect that the code segments associated with two identical mod-
ules are the same between machines (after all, it is the same code
on disk). However, this is not the case, and there are several in-
stances of expected differences that will be present between code
segments. Blacksheep handles these cases speciﬁcally. More pre-
cisely, when differing bytes are identiﬁed, Blacksheep checks them
against the following categories, which we consider benign:
Relocation differences. The most frequent differences between
driver code segments are caused by relocation. That is, since drivers
are loaded into a location in memory that is unknown at com-
pile time, and Windows module code is not position independent,
pointers within the driver have to be updated to reﬂect this loca-
tion. Since, other than relocation, the relative memory layout of
loaded modules is kept intact, relocation differences between two
memory dumps can be easily identiﬁed. The reason is that the dif-
fering bytes will be part of pointers that point to the same relative
locations within each driver. Thus, when Blacksheep ﬁnds differ-
ing bytes, it ﬁrst checks whether these bytes are possible pointers
(values that point into code segments of the driver). If two such
pointers are identiﬁed, and they point to the same relative offset
into the same driver, this code difference is marked as benign.
Note that on the x86 architecture, pointer locations need not be
aligned at word boundaries. Hence, if there is a one-byte difference
between the code of two modules in two different memory dumps
on a 32-bit system, Blacksheep would make four comparisons: one
with that byte as the most signiﬁcant in the pointer, one with it as
the second-most signiﬁcant, and so forth.
Imports and exports. Another benign difference between mod-
ules can be caused by imported and exported symbols. These ex-
ported symbols take the form of lists of resource names and mem-
ory locations. When the drivers that are exporting these symbols
are relocated, the export tables are updated accordingly. These be-
nign changes can be detected in a similar way to the detection of
relocation differences. If an identiﬁed difference is not part of a
relocation difference, Blacksheep checks if the different bytes are
part of a pointer which points to the same offset within some other
driver. If the bytes in both dumps are pointing to the same rela-
tive offset within the same driver, the difference is considered to be
benign.
Hooking. The hooking of kernel functions is another potential
source of benign differences. Function call hooking is a technique
in which calls to a kernel function are redirected (and cause the
execution of some other piece of code).
In many cases, this is
done by overwriting the ﬁrst instruction of a hooked function with
a jump instruction pointing to the hooking function (so that a call
to the hooked function will immediately result in the hooking func-
tion being executed). When the hooking function in both memory
dumps is located at the same offset in some module (in a static code
region), the hook is treated as benign.
Hooks that point to dynamically allocated memory must be treated
differently, since their offset to the hooking driver will not be con-
stant. To this end, Blacksheep ﬁrst identiﬁes the hook target: The
differing bytes are checked to determine if they are the argument of
a jmp or call instruction. If so, Blacksheep calculates the memory
addresses pointed to by the hook in the two dumps from the jump
target. If the bytes are not used as the argument for a direct con-
trol transfer instruction, we check whether they are the argument
of a push instruction, and if a ret instruction follows. The result
of executing these instructions would also be a jump to the pushed
memory address. In this case, Blacksheep recognizes the argument
of the push instruction as the location of the hooking function.
Once Blacksheep identiﬁes the locations the hooking functions,
it needs to compare the functions themselves to detect differences.
Blacksheep identiﬁes the end of the functions by linearly disas-
sembling them until a ret instruction is found. Each byte before
the ret is then compared using the same mechanism as for regular
code segments. Using this method, Blacksheep can compare hooks
pointing to dynamically allocated memory, which are often used by
security software.
PE header differences. Windows sometimes modiﬁes speciﬁc
ﬁelds in the PE header of kernel modules as the modules are loaded.
Because of this, we consider differences in the following PE header
ﬁelds benign:
(cid:129) ImageBaseAddress
(cid:129) PointerToRelocations (for each PE section)
(cid:129) NumberOfRelocations (for each PE section)
Suspicious differences. Any differences that are not classiﬁed
as benign, according to the above categories, are considered suspi-
cious. Since a common modiﬁcation done by rootkits is a pointer
modiﬁcation, we count any adjacent set of 4 (or fewer) bytes into
one difference. Blacksheep uses the number of such differences
as the distance metric for its code analysis. Due to the number
of changes introduced by rootkit infections, this distance is higher
between an infected and clean memory dump than between two
clean dumps (or two dumps infected with the same rootkit).
In
particular, the number of suspicious code differences between two
non-infected dumps is usually zero.
4.3 Data Analysis
Recently, proof-of-concept rootkits have been demonstrated that
affect the functionality of a system without making any lasting
modiﬁcations to system code.
In order to detect such rootkits,
Blacksheep must be able to compare kernel data in a sophisticated
matter. Windows kernel modules can allocate memory in two dif-
ferent ways: by statically reserving it, as in the various PE data
segments, and through dynamic allocation.
To compare data memory between two memory dumps, Black-
sheep utilizes a “memory crawling” approach to compare kernel
345data. Memory crawling works as follows: The system processes
one memory region at a time, starting at the statically-allocated
data regions of each driver. These serve as the roots for the memory
exploration. When Blacksheep ﬁnds pointers to additional data re-
gions (potentially allocated dynamically), it follows these pointers
and continues the exploration recursively.
For each region, Blacksheep examines the value contained in ev-
ery (32-bit) dword and assigns it a category, as follows:
ZERO when the dword value == 0x00000000.
VALUE when the dword is a value that does not correspond to a
mapped location in memory.
POINTER when the dword is a pointer to a mapped memory lo-
cation.
Additionally, Blacksheep tracks the target of the pointers. For
each dword classiﬁed as a POINTER, Blacksheep assigns one of
the following subcategories.
POINTER_SELF when the dword is a pointer to the memory lo-
cation of that pointer (self).
POINTER_NEXT when the dword is a pointer to the dword fol-
lowing itself.
POINTER_CODE when the dword is a pointer into a module’s
code segment.
POINTER_DATA when the dword is a pointer into a module’s
data segment.
POINTER_POOL when the dword is a pointer into a dynamically-
allocated pool.
POINTER_DLIST when the dword is a pointer to an element in a
doubly-linked list.
When Blacksheep encounters a POINTER_POOL (dynamically-
allocated memory) or POINTER_DLIST (doubly-linked list) sub-
category, additional work is necessary, as discussed in the follow-
ing two paragraphs.
Dynamically-allocated memory. Dynamic allocation is handled
in Windows through the use of memory pools. Each discrete allo-
cation that is requested by a driver is tagged with a pool allocation
structure, containing the length of the allocation and a 4-character
tag identifying the allocating driver. Before comparing data, Black-
sheep builds a list of allocated pools inside the kernel. This list can
then be used to detect pointers into dynamic memory.
If a dword is of subcategory POINTER_POOL, all dwords from
the target allocation pool are also added to the analysis. That is,
when Blacksheep ﬁnds a pointer into a pool of memory, this pool
is recursively added and analyzed (since it can be reached through
a root). Any further dwords that are classiﬁed as POINTER_POOL
are processed recursively. This is done up to three levels of nesting,
as a compromise between data coverage, execution time, and noise
in the analysis.
Doubly-linked lists. The Windows kernel contains many data struc-
tures, and their deﬁnitions are available both through the Windows
Research Kernel [4] and through Windows debugging symbols.
Relying on the availability of such deﬁnitions does not work in the