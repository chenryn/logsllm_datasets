 go func(q int) { 
63 
 performQueries(q, p) 
64 
    wg.Done() 
65 
 }(query) 
66     } 
代码清单 7-25 中用一个 for 循环创建要使用池的 goroutine。每个 goroutine 调用一次
performQueries 函数然后退出。performQueries 函数需要传入一个唯一的 ID 值用于做日
志以及一个指向 Pool 的指针。一旦所有的 goroutine 都创建完成，main 函数就等待所有 goroutine
执行完毕，如代码清单 7-26 所示。 
代码清单 7-26  pool/main/main.go：第 68 行到第 73 行
68 
 // 等待 goroutine 结束 
69 
 wg.Wait() 
70 
71 
 // 关闭池 
72 
 log.Println("Shutdown Program.") 
73 
 p.Close() 
在代码清单7-26 中，main 函数等待WaitGroup 实例的Wait 方法执行完成。一旦所有goroutine
都报告其执行完成，就关闭 Pool，并且终止程序。接下来，让我们看一下 performQueries 函数。
这个函数使用了池的 Acquire 方法和 Release 方法，如代码清单 7-27 所示。
代码清单 7-27  pool/main/main.go：第 76 行到第 91 行
76 // performQueries 用来测试连接的资源池 
77 func performQueries(query int, p *pool.Pool) { 
78 
 // 从池里请求一个连接 
79 
 conn, err := p.Acquire() 
80 
 if err != nil { 
81 
 log.Println(err) 
82 
 return 
83 
 } 
84 
85 
 // 将该连接释放回池里 
86 
 defer p.Release(conn) 
87 
88 
 // 用等待来模拟查询响应 
89 
 time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond) 
90 
 log.Printf("QID[%d] CID[%d]\n", query, conn.(*dbConnection).ID) 
91 } 
代码清单 7-27 展示了 performQueries 的实现。这个实现使用了 pool 的 Acquire 方法
和 Release 方法。这个函数首先调用了 Acquire 方法，从池里获得 dbConnection。之后会
检查返回的 error 接口值，在第 86 行，再使用 defer 语句在函数退出时将 dbConnection
释放回池里。在第 89 行和第 90 行，随机休眠一段时间，以此来模拟使用 dbConnection 工作
时间。 
7.3  work 
work 包的目的是展示如何使用无缓冲的通道来创建一个 goroutine 池，这些 goroutine 执行
并控制一组工作，让其并发执行。在这种情况下，使用无缓冲的通道要比随意指定一个缓冲区大
小的有缓冲的通道好，因为这个情况下既不需要一个工作队列，也不需要一组 goroutine 配合执
7.3  work
169
行。无缓冲的通道保证两个 goroutine 之间的数据交换。这种使用无缓冲的通道的方法允许使用
者知道什么时候 goroutine 池正在执行工作，而且如果池里的所有 goroutine 都忙，无法接受新的
工作的时候，也能及时通过通道来通知调用者。使用无缓冲的通道不会有工作在队列里丢失或者
卡住，所有工作都会被处理。 
让我们来看一下 work 包里的 work.go 代码文件，如代码清单 7-28 所示。 
代码清单 7-28  work/work.go 
01 // Jason Waldrip 协助完成了这个示例
02 // work 包管理一个 goroutine 池来完成工作
03 package work 
04 
05 import "sync" 
06 
07 // Worker 必须满足接口类型，
08 // 才能使用工作池
09 type Worker interface { 
10 
 Task() 
11 } 
12 
13 // Pool 提供一个 goroutine 池，这个池可以完成
14 // 任何已提交的 Worker 任务
15 type Pool struct { 
16 
 work chan Worker 
17 
 wg  sync.WaitGroup 
18 } 
19 
20 // New 创建一个新工作池
21 func New(maxGoroutines int) *Pool { 
22 
 p := Pool{ 
23 
 work: make(chan Worker), 
24 
 } 
25 
26 
p.wg.Add(maxGoroutines)
27 
 for i := 0; i < maxGoroutines; i++ { 
28 
 go func() { 
29 
 for w := range p.work { 
30 
w.Task()
31 
 } 
32 
p.wg.Done()
33 
 }() 
34 
 } 
35 
36 
 return &p 
37 } 
38 
39 // Run 提交工作到工作池
40 func (p *Pool) Run(w Worker) { 
41 
p.work <- w
42 } 
43 
170
第 7 章  并发模式 
44 // Shutdown 等待所有 goroutine 停止工作
45 func (p *Pool) Shutdown() { 
46 
 close(p.work) 
47 
p.wg.Wait()
48 } 
代码清单 7-28 中展示的 work 包一开始声明了名为 Worker 的接口和名为 Pool 的结构，
如代码清单 7-29 所示。 
代码清单 7-29  work/work.go：第 07 行到第 18 行 
07 // Worker 必须满足接口类型，
08 // 才能使用工作池
09 type Worker interface { 
10 
 Task() 
11 } 
12 
13 // Pool 提供一个 goroutine 池，这个池可以完成
14 // 任何已提交的 Worker 任务
15 type Pool struct { 
16 
 work chan Worker 
17 
 wg  sync.WaitGroup 
18 } 
代码清单 7-29 的第 09 行中的 Worker 接口声明了一个名为 Task 的方法。在第 15 行，声
明了名为 Pool 的结构，这个结构类型实现了 goroutine 池，并实现了一些处理工作的方法。这
个结构类型声明了两个字段，一个名为 work（一个 Worker 接口类型的通道），另一个名为 wg
的 sync.WaitGroup 类型。 
接下来，让我们来看一下 work 包的工厂函数，如代码清单 7-30 所示。 
代码清单 7-30  work/work.go：第 20 行到第 37 行 
20 // New 创建一个新工作池
21 func New(maxGoroutines int) *Pool { 
22 
 p := Pool{ 
23 
 work: make(chan Worker), 
24 
 } 
25 
26 
p.wg.Add(maxGoroutines)
27 
 for i := 0; i < maxGoroutines; i++ { 
28 
 go func() { 
29 
 for w := range p.work { 
30 
w.Task()
31 
 } 
32 
p.wg.Done()
33 
 }() 
34 
 } 
35 
36 
 return &p 
37 } 
代码清单 7-30 展示了 New 函数，这个函数使用固定数量的 goroutine 来创建一个工作池。
goroutine 的数量作为参数传给 New 函数。在第 22 行，创建了一个 Pool 类型的值，并使用无缓
冲的通道来初始化 work 字段。
之后，在第 26 行，初始化 WaitGroup 需要等待的数量，并在第 27 行到第 34 行，创建了
同样数量的 goroutine。这些 goroutine 只接收 Worker 类型的接口值，并调用这个值的 Task 方
法，如代码清单 7-31 所示。 
代码清单 7-31  work/work.go：第 28 行到第 33 行
28 
 go func() { 
29 
 for w := range p.work { 
30 
 w.Task() 
31 
 } 
32 
 p.wg.Done() 
33 
 }() 
代码清单 7-31 里的 for range 循环会一直阻塞，直到从 work 通道收到一个 Worker 接
口值。如果收到一个值，就会执行这个值的 Task 方法。一旦 work 通道被关闭，for range
循环就会结束，并调用 WaitGroup 的 Done 方法。然后 goroutine 终止。
现在我们可以创建一个等待并执行工作的 goroutine 池了。让我们看一下如何向池里提交工
作，如代码清单 7-32 所示。 
代码清单 7-32  work/work.go：第 39 行到第 42 行
39 // Run 提交工作到工作池 
40 func (p *Pool) Run(w Worker) { 
41 
 p.work <- w 
42 } 
代码清单 7-32 展示了 Run 方法。这个方法可以向池里提交工作。该方法接受一个 Worker
类型的接口值作为参数，并将这个值通过 work 通道发送。由于 work 通道是一个无缓冲的通道，
调用者必须等待工作池里的某个 goroutine 接收到这个值才会返回。这正是我们想要的，这样可
以保证调用的 Run 返回时，提交的工作已经开始执行。
在某个时间点，需要关闭工作池。这是 Shutdown 方法所做的事情，如代码清单 7-33 所示。 
代码清单 7-33  work/work.go：第 44 行到第 48 行
44 // Shutdown 等待所有 goroutine 停止工作 
45 func (p *Pool) Shutdown() { 
46 
 close(p.work) 
47 
 p.wg.Wait() 
48 } 
代码清单 7-33 中的 Shutdown 方法做了两件事，首先，它关闭了 work 通道，这会导致所
有池里的 goroutine 停止工作，并调用 WaitGroup 的 Done 方法；然后，Shutdown 方法调用
WaitGroup 的 Wait 方法，这会让 Shutdown 方法等待所有 goroutine 终止。
我们看了 work 包的代码，并了解了它是如何工作的，接下来让我们看一下 main.go 源代码
文件中的测试程序，如代码清单 7-34 所示。 
代码清单 7-34  work/main/main.go
01 // 这个示例程序展示如何使用 work 包 
02 // 创建一个 goroutine 池并完成工作 
03 package main 
04 
05 import ( 
06 
 "log" 
07 
 "sync" 
08 
 "time" 
09 
10 
 "github.com/goinaction/code/chapter7/patterns/work" 
11 ) 
12 
13 // names 提供了一组用来显示的名字 
14 var names = []string{ 
15 
 "steve", 
16 
 "bob", 
17 
 "mary", 
18 
 "therese", 
19 
 "jason", 
20 } 
21 
22 // namePrinter 使用特定方式打印名字 
23 type namePrinter struct { 
24 
 name string 
25 } 
26 
27 // Task 实现 Worker 接口 
28 func (m *namePrinter) Task() { 
29 