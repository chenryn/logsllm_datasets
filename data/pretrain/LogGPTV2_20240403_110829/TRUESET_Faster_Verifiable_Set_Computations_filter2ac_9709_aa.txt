title:TRUESET: Faster Verifiable Set Computations
author:Ahmed E. Kosba and
Dimitrios Papadopoulos and
Charalampos Papamanthou and
Mahmoud F. Sayed and
Elaine Shi and
Nikos Triandopoulos
TrueSeT: Faster Veriﬁable Set Computations
Ahmed E. Kosba, University of Maryland; Dimitrios Papadopoulos, Boston University; 
Charalampos Papamanthou, Mahmoud F. Sayed, and Elaine Shi, University of Maryland; 
Nikos Triandopoulos, RSA Laboratories and Boston University
https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/kosba
This paper is included in the Proceedings of the 23rd USENIX Security Symposium.August 20–22, 2014 • San Diego, CAISBN 978-1-931971-15-7Open access to the Proceedings of  the 23rd USENIX Security Symposium is sponsored by USENIXTRUESET: Faster Veriﬁable Set Computations∗
Ahmed E. Kosba† §
PI:EMAIL
Mahmoud F. Sayed† §
PI:EMAIL
Dimitrios Papadopoulos¶
PI:EMAIL
Elaine Shi† §
PI:EMAIL
Charalampos Papamanthou‡ §
PI:EMAIL
Nikos Triandopoulos(cid:27) ¶
PI:EMAIL
Abstract
1
Introduction
Veriﬁable computation (VC) enables thin clients to efﬁ-
ciently verify the computational results produced by a
powerful server. Although VC was initially considered to
be mainly of theoretical interest, over the last two years
impressive progress has been made on implementing VC.
Speciﬁcally, we now have open-source implementations
of VC systems that handle all classes of computations
expressed either as circuits or in the RAM model. Despite
this very encouraging progress, new enhancements in the
design and implementation of VC protocols are required
to achieve truly practical VC for real-world applications.
In this work, we show that for functions that can be ex-
pressed efﬁciently in terms of set operations (e.g., a subset
of SQL queries) VC can be enhanced to become drasti-
cally more practical: We present the design and prototype
implementation of a novel VC scheme that achieves or-
ders of magnitude speed-up in comparison with the state
of the art. Speciﬁcally, we build and evaluate TRUESET,
a system that can veriﬁably compute any polynomial-time
function expressed as a circuit consisting of “set gates”
such as union, intersection, difference and set cardinality.
Moreover, TRUESET supports hybrid circuits consisting
of both set gates and traditional arithmetic gates. There-
fore, it does not lose any of the expressiveness of previous
schemes—this also allows the user to choose the most
efﬁcient way to represent different parts of a computation.
By expressing set computations as polynomial operations
and introducing a novel Quadratic Polynomial Program
technique, our experiments show that TRUESET achieves
prover performance speed-up ranging from 30x to 150x
and up to 97% evaluation key size reduction compared to
the state-of-the-art.
∗This research was funded in part by NSF under grant numbers CNS-
1314857, CNS-1012798 and CNS-1012910 and by a Google Faculty
Research Award. The views and conclusions contained herein are those
of the authors and do not represent funding agencies.
†Computer Science Dept., University of Maryland.
‡Electrical & Computer Engineering Dept., University of Maryland.
§U. Maryland Institute for Advanced Computer Studies (UMIACS).
¶Computer Science Dept., Boston University.
(cid:26)RSA Laboratories.
Veriﬁable Computation (VC) is a cryptographic protocol
that allows a client to outsource expensive computation
tasks to a worker (e.g., a cloud server), such that the client
can verify the result of the computation in less time than
that required to perform the computation itself. Cryp-
tographic approaches for VC [5, 6, 7, 12, 13, 14, 21]
are attractive in that they require no special trusted hard-
ware or software on the server, and can ensure security
against arbitrarily malicious server behavior, including
software/hardware bugs, misconﬁgurations, malicious in-
siders, and physical attacks.
Due to its various applications such as secure cloud
computing, the research community has recently made
impressive progress on Veriﬁable Computation, both on
the theoretical and practical fronts. In particular, several
recent works [2, 3, 9, 23, 25, 26, 29] have implemented
Veriﬁable Computation for general computation tasks,
and demonstrated promising evidence of its efﬁciency.
Despite this encouraging progress, performance improve-
ment of orders of magnitude is still required (especially
on the time that the server takes to compute the proof) for
cryptographic VC to become truly practical.
Existing systems for Veriﬁable Computation are built
to accommodate any language in NP: Speciﬁcally, func-
tions/programs are represented as either circuits (Boolean
or arithmetic) or sets of constraints and cryptographic
operations are run on these representations. While such
an approach allows us to express any polynomial-time
computation, it is often not the most efﬁcient way to repre-
sent common computation tasks encountered in practice.
For example, Parno et al. [23] point out that the behavior
of their construction deteriorates abruptly for function-
alities that have “bad” arithmetic circuit representation
and Braun et al. [9] recognize that their scheme is not
quite ready for practical use, restricting their evaluations
to “smaller scales than would occur in real applications.”
In order to reduce the practical cost of Veriﬁable Com-
putation, we design and build TRUESET. TRUESET is an
efﬁcient and provably secure VC system that specializes
in handling set-centric computation tasks. It allows us to
USENIX Association  
23rd USENIX Security Symposium  765
model computation as a set circuit—a circuit consisting
of a combination of set operators (such as intersection,
union, difference and sum), instead of just arithmetic op-
erations (such as addition and multiplication in a ﬁnite
ﬁeld). For computation tasks that can be naturally ex-
pressed in terms of set operations (e.g., a subset of SQL
database queries), our experimental results suggest orders-
of-magnitude performance improvement in comparison
with existing VC systems such as Pinocchio [23]. We
now present TRUESET’s main contributions:
Expressiveness. TRUESET retains the expressiveness of
existing VC systems, in that it can support arbitrary com-
putation tasks. Fundamentally, since our set circuit can
support intersection, union, and set difference gates, the
set of logic is complete1. Additionally, in Section 4.4, we
show that TRUESET can be extended to support circuits
that have a mixture of arithmetic gates and set gates. We
achieve this by introducing a “split gate” (which, on input
a set, outputs the individual elements) and a “merge gate”
(which has the opposite function of the split gate).
Input-speciﬁc running time. One important reason why
TRUESET signiﬁcantly outperforms existing VC systems
in practice is that it achieves input-speciﬁc running time
for proof computation and key generation. Input-speciﬁc
running time means that the running time of the prover is
proportional to the size of the current input.
Achieving input-speciﬁc running time is not possible
when set operations are expressed in terms of Boolean
or arithmetic circuits, where one must account for worst-
case set sizes when building the circuit: For example, in
the case of intersection, the worst case size of the output is
the minimum size of the two sets; in the case of union, the
worst case size of the output is the sum of their sizes. Note
that this applies not only to the set that comprises the ﬁnal
outcome of the computation, but to every intermediate set
generated during the computation. As a result, existing
approaches based on Boolean or arithmetic circuits incur a
large blowup in terms of circuit size when used to express
set operations. In this sense, TRUESET also achieves
asymptotic performance gains for set-centric computation
workloads in comparison with previous approaches.
TRUESET achieves input-speciﬁc running time by en-
coding a set of cardinality c as a polynomial of degree
c (such an encoding was also used in previous works,
e.g., [18, 22]), and a set circuit as a circuit on polyno-
mials, where every wire is a polynomial, and every gate
performs polynomial addition or multiplication. As a re-
sult, per-gate computation time for the prover (including
the time for performing the computation and the time for
1Any function computable by Boolean circuits can be computed by
a set circuit: If one encodes the empty set as 0 and a ﬁxed singleton set
{s} as 1, a union expresses the OR gate, an intersection expresses the
AND gate and a set difference from {s} expresses the NOT gate.
SELECT COUNT(UNIVERSITY.id)
FROM UNIVERSITY JOIN CS
ON UNIVERSITY.id = CS.id
Figure 1: An example of a JOIN SQL query (between tables
UNIVERSITY and CS) that can be efﬁciently supported by
TRUESET. TRUESET will implement JOIN with an intersection
gate and COUNT with a cardinality gate.
producing the proof) is (quasi-)linear in the degree of the
polynomial (i.e., cardinality of the actual set), and not
proportional to the worst-case degree of the polynomial.
Finally, as in other VC systems, verifying in TRUESET
requires work proportional to the size of inputs/outputs,
but not in the running time of the computation.
Implementation and evaluation. We implemented
TRUESET and documented its efﬁciency comparing it
with a veriﬁable protocol that compiles a set circuit into
an arithmetic circuit and then uses Pinocchio [23] on
the produced circuit. In TRUESET the prover’s running
time is reduced by approximately 30x for all set sizes
of 64 elements or more. In particular, for a single in-
tersection/union gate over 2 sets of 256 elements each,
TRUESET improves the prover cost by nearly 150x. We
also show that, while other systems [23] cannot—in a
reasonable amount of time—execute over larger inputs,
TRUESET can scale to large sets, e.g., sets with cardinality
of approximately 8000 (213), efﬁciently accommodating
instances that are about 30x larger than previous systems.
Finally, TRUESET greatly reduces the evaluation key size,
a reduction that can reach 97% for some operations.
Applications. TRUESET is developed to serve various in-
formation retrieval applications that use set operations as a
building block. For example, consider an SQL query that
performs a JOIN over two tables and then computes MAX
or SUM over the result of the join operation. TRUESET
can model the join operation as an intersection and then
use the split gate to perform the maximum or the summa-
tion/cardinality operation over the output of the join—see
Figure 1. Other queries that TRUESET could model are
advanced keyword search queries containing complicated
ﬁlters that can be expressed as arbitrary combinations of
set operations (union, intersection, difference) over an
underlying data set. Finally, the computation of similarity
measurements for datasets often employs set operations.
One of the most popular measurements of this type, is the
Jaccard index [17] which is computed for two sets, as the
ratio of the cardinalities of their intersection and union, a
computation that can be easily compiled with TRUESET.
Technical highlight. Our core technical construction is
inspired by the recent quadratic span and arithmetic pro-
grams [14], which were used to implement VC for any
766  23rd USENIX Security Symposium 
USENIX Association
Boolean or arithmetic circuit. Since our internal repre-
sentation is a polynomial circuit (as mentioned earlier),
we invent quadratic polynomial programs (QPP). During
the prover’s computation, polynomials on the wires of the
circuit are evaluated at a random point s—however, this
takes place in the exponent of a bilinear group, in a way
that the server does not learn s. Evaluating the polynomial
at the point s in effect reduces the polynomial to a value—
therefore one can now think of the polynomial circuit
as a normal arithmetic circuit whose wires encode plain
values. In this way, we can apply techniques resembling
quadratic arithmetic programs. While the intuition may
be summarized as above, designing the actual algebraic
construction and formally proving its security is nonethe-
less challenging, and requires a non-trivial transformation
of quadratic arithmetic programs.
1.1 Related Work
There exists a large amount of theoretical work on VC:
Micali [21] presented a scheme that can accommodate
proofs for any language in NP. A more efﬁcient approach
is based on succinct non-interactive arguments of knowl-
edge (SNARKs) [5, 6, 7, 14]. For the case of polynomial-
time computable functions, protocols based on fully-
homomorphic encryption [12, 13] and attribute-based en-
cryption [24] have also been proposed. In general, the
above schemes employ heavy cryptographic primitives
and therefore are not very practical.
Recent works [2, 3, 9, 23, 25, 26, 29] have made im-
pressive progress toward implementations of some of
the above schemes, showing practicality for particular
functionalities. Unfortunately, the server’s cost for proof
computation remains too high to be considered for wide
deployment in real-world applications.
The problem of verifying a circuit of set operations
was ﬁrst addressed in a recent work by Canetti et al. [10].
Their proofs are of size linear to the size of the circuit,
without however requiring a preprocessing phase for each
circuit. In comparison, our proofs are of constant size,
once such a preprocessing step has been run.
Papamanthou et al. [22] presented a scheme that pro-
vides veriﬁability for a single set operation. However,
more general set operations can be accommodated by se-
quentially using their approach, since all intermediate set
outputs are necessary for veriﬁcation. This would lead to
increased communication complexity.
A related scheme appears in the work of Chung et
al. [11]. As this scheme uses Turing machines for the
underlying computation model, the prover has inherently
high complexity. Another work that combines veriﬁable
computation with outsourcing of storage is [1], where a
protocol for streaming datasets is proposed but the sup-
ported functionalities are quadratic polynomials only.
2 Deﬁnitions
In this section we provide necessary deﬁnitions and ter-
minology that will be useful in the rest of the paper.
Circuits of sets and polynomials. TRUESET uses the
same computation abstraction as the one used in the VC
scheme by Parno et al. [23]: a circuit. However, instead
of ﬁeld elements, the circuit wires now carry sets, and,
instead of arithmetic multiplication and addition gates,
our circuit has three types of gates: intersection, union
and difference. For the sake of presentation, the sets we
are considering are simple sets, though our construction
can be extended to support multisets as well. We therefore
begin by deﬁning a set circuit:
Deﬁnition 1 (Set circuit C) A set circuit C is a circuit
that has gates that implement set union, set intersection
or set difference over sets that have elements in a ﬁeld F.
A set circuit is a tool that provides a clean abstrac-
tion of the computational steps necessary to perform a
set operation. This structured representation will allow
us to naturally encode a set operation into a number of
execution conditions that are met when it is performed
correctly. We stress that it is merely a theoretical abstrac-
tion and does not affect the way in which the computation
is performed; the computing party can use its choice of
efﬁcient native libraries and architectures. In compari-
son, previous works that use arithmetic circuits to encode
more general computations, require the construction (or
simulation) and evaluation of such a circuit, an approach
that introduces an additional source of overhead.
As mentioned in the introduction, our main technique is
based on mapping any set circuit C to a circuit F of poly-
nomial operations, i.e., to a circuit that carries univariate
polynomials on its wires and has polynomial multiplica-
tion and polynomial addition gates. We now deﬁne the
polynomial circuit F:
Deﬁnition 2 (Polynomial circuit F) A polynomial cir-
cuit F in a ﬁeld F is a circuit that has gates that im-
plement univariate polynomial addition and univariate
polynomial multiplication over F. We denote with d the
number of multiplication gates of F and with N the num-
ber of input and output wires of F. The input and output
wires are indexed 1, . . . , N. The rest of the wires2 are
indexed N + 1, . . . , m.
SNARKs. TRUESET’s main building block is a primitive
called succinct non-interactive argument of knowledge
(SNARK) [14]. A SNARK allows a client to commit to
2These wires include free wires (which are inputs only to multiplica-
tion gates) and the outputs of the internal multiplication gates (whose
outputs are not outputs of the circuit). The set of these wires is denoted
with Im and has size at most 3d.
USENIX Association  
23rd USENIX Security Symposium  767
a computation circuit C and then have a prover provide
succinct cryptographic proofs that there exists an assign-
ment on the wires w (which is called witness) such that
the input-output pair x = (I,O) is valid.
As opposed to veriﬁable computation [24], a SNARK
allows a prover to specify some wires of the input I as part
of the witness w (this is useful when proving membership
in an NP language, where the prover must prove witness
existence). For this reason, SNARKs are more powerful
than VC and therefore for the rest of the paper, we will
show how to construct a SNARK for hierarchical set
operations. In the full version of our paper [20], we
show how to use the SNARK construction to provide
a VC scheme as well as a VC scheme for outsourced
sets, where the server not only performs the computation,
but also stores the sets for the client. We now give the
SNARK deﬁnition, adjusted from [14].
Deﬁnition 3 (SNARK scheme) A SNARK scheme con-
sists of three probabilistic polynomial time (PPT) algo-
rithms (KeyGen, Prove, Verify) deﬁned as follows.
1. (pk, sk) ← KeyGen(1k, C). The key generation al-
gorithm takes as input the security parameter k and
a computation circuit C; it outputs a public key pk,
and a secret key sk.
2. π ← Prove(pk, x, w): The prover algorithm takes
as input the public key pk, an input-output pair x =
(I,O), a valid witness w and it outputs a proof π.
3. {0, 1} ← Verify(sk, x, π): Given the key sk, a state-
ment x and a proof π, the veriﬁcation algorithm
outputs 0 or 1.
We say that a SNARK is publicly-veriﬁable if sk = pk. In
this case, proofs can be veriﬁed by anyone with pk. Oth-
erwise, we call it a secretly-veriﬁable SNARK, in which
case only the party with sk can verify.
There are various properties that a SNARK should
satisfy. The most important one is soundness. Namely,
no PPT adversary should be able to output a verifying
proof π for an input-output pair x = (I,O) that is not
consistent with C. All the other properties of SNARKs
are described formally in Appendix 6.2.
3 A SNARK for Polynomial Circuits
In their recent seminal work, Gennaro et al. [14] showed
how to compactly encode computations as quadratic pro-
grams, in order to derive very efﬁcient SNARKs. Specif-
ically, they show how to convert any arithmetic circuit
into a comparably-sized Quadratic Arithmetic Program
(QAP), and any Boolean circuit into a comparably-sized
Quadratic Span Program (QSP).
In this section we describe our SNARK construction
for polynomial circuits. The construction is a modiﬁca-
tion of the optimized construction for arithmetic circuits
that was presented by Parno et al. [23] (Protocol 2) and