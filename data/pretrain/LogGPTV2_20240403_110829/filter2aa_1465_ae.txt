7
24
0
coreutils
36.86
1.0
4.21
1.38
116.71
4.42
1.0
3.41
0
ffmpeg
89
1
13
1.55
279
4.98
0
13
13
memcached
101
1
20
1.5
317
3.69
0
20
0
mutool
81
1
14
1.67
278
4.15
6
14
0
inlined, i.e., it is almost always inlined within libc itself.
On the other hand, syscall_cp() cannot be inlined as
it is a wrapper around an aliased function that performs
the actual syscall.
Our results also indicate that, on average, every func-
tion that contains a syscall contains more than one syscall.
nginx contains the most functions with a syscall and the
highest number of total syscall offsets. Without syscall-
origin enforcement, an attacker can choose from 318
syscall locations to execute any of the 357 syscalls pro-
vided by Linux 5.13 during a ROP attack. With our en-
forcement, the number is drastically reduced as each one
of these locations can, on average, perform only 3 syscalls
instead of 357.
6. Discussion
Limitations and Future Work
Our proof-of-concept
implementation currently does not handle signals and
syscalls invoked in a signal handler. However, this is not
a conceptual limitation. The compiler can identify all
functions that serve as a signal handler and the functions
that are reachable through it. Hence, it can extract a per-
signal state machine to which the kernel switches when
it sets up the signal stack frame. This allows for small
per-signal state machines, which further improve security.
As this requires signiﬁcant engineering work, we leave
the implementation and evaluation for future work.
Our state-machine construction leads to coarse-grained
state machines, which can be improved by the fact that
we can statically identify syscall origins. Future work
can intertwine this information on a deeper level with
the generated state machine. By doing so, a transition to
another state is then not only dependent on the previous
and the current syscall number but also on the virtual ad-
dress of the previous and current syscall instruction. This
allows to better represent the syscall-ﬂow graph of the
application without relying on context-sensitivity or call
stack information [65, 28, 58]. As this requires signiﬁcant
changes to the compiler and the enforcement in the kernel
and thorough evaluation, we leave this for future work.
Recent work has proposed hardware support for sec-
comp [60].
In future work, we intend to investigate
whether similar approaches are possible to improve the
performance of SFIP.
Related Work
In 2001, the seminal work by Wagner
and Dean [65] introduced automatically-generated syscall
NDFAs, NDPDAs, and digraphs for sequence checks in
intrusion detection systems. SFIP builds upon digraphs
but modiﬁes their construction and representation to in-
crease performance. We further extend upon their work by
additionally verifying the origin of a syscall. The accuracy
and performance of SFIP allows real-time enforcement in
large-scale applications.
Several papers have focused on extracting and mod-
eling an applications control ﬂow based on the work by
Forrest et al. [19]. Frequently, such approaches rely on dy-
namic analysis [21, 25, 32, 34, 44, 68, 47, 63, 69]. Other
approaches rely on machine-learning techniques to learn
syscall sequences or detect intrusions [74, 53, 48, 8, 67,
26]. Gifﬁn et al. [27] proposed incorporating environ-
ment information in the static analysis to generate more
precise models. The Dyck model [28] is a prominent
approach for learning syscall sequences that rely on stack
information and context-sensitive models. Other works
disregard control ﬂow and focus instead on detecting in-
trusions based on syscall arguments [42, 50]. Forrest et al.
[20] provide an analysis on the evolution of system-call
monitoring. Our work differs as we do not require stack
information, context-sensitive models, dynamic tracing
of an application, or code instrumentation. The only addi-
tional information we consider is the mapping of syscalls
to syscall instructions.
Recent work has investigated the possibility of automat-
ically generating seccomp ﬁlters from source or existing
binaries [16, 10, 24, 23, 52]. SysFlow can be extended to
generate the required information from binaries as well.
More recent work proposed a faster alternative to sec-
comp while also enabling complex argument checks [9].
In contrast to these works, we consider syscall sequences
and origins, which requires additional challenges to be
solved (cf. Section 3.3).
A similar approach to our syscall-origin enforcement
has been proposed by Linn et al. [45] and de Raadt [15].
The former extracts the syscall locations and numbers
from a binary and enforces them on the kernel level but
fails in the presence of ASLR. The latter restricts the
execution of syscalls to entire regions, but not precise
locations, i.e., the entire text segment of a static binary
is a valid origin. Additionally, in the entire region, any
syscall is valid at any syscall location. Our work improves
upon them in several ways as we (1) present a way to
enforce syscall origins in the presence of ASLR, (2) limit
the execution of speciﬁc syscalls to precise locations,
(3) combine syscall origins with state machines which
lead to a signiﬁcant increase in security.
7. Conclusion
In this paper, we introduced the concept of syscall-ﬂow-
integrity protection (SFIP), complementing the concept
of CFI with integrity for user-kernel transitions. In our
evaluation, we showed that SFIP can be applied to large-
scale applications with minimal slowdowns. In a micro-
and a macrobenchmark, we observed an overhead of only
13.1 % and 7.4 %, respectively. In terms of security, we
discussed and demonstrated its effectiveness in preventing
control-ﬂow-hijacking attacks in real-world applications.
Finally, to highlight the reduction in attack surface, we
performed an analysis of the state machines and syscall-
origin mappings of several real-world applications. On
average, we showed that SFIP decreases the number of
possible transitions by 41.5 % compared to seccomp and
91.3 % when no protection is applied.
References
[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti.
Control-Flow Integrity. In CCS, 2005.
[2] Lars Ole Andersen. Program Analysis and Specialization for the
C Programming Language. PhD thesis, 1994.
[3] Android. Application Sandbox, 2021.
[4] AppArmor. AppArmor: Linux kernel security module, 2021.
[5] Tyler K. Bletsch, Xuxian Jiang, Vincent W. Freeh, and Zhenkai
Liang. Jump-oriented programming: a new class of code-reuse
attack. In AsiaCCS, 2011.
[6] Davidlohr Bueso. tools/perf-bench: Add basic syscall benchmark,
2019.
[7] Nathan Burow, Scott A. Carr, Joseph Nash, Per Larsen, Michael
Franz, Stefan Brunthaler, and Mathias Payer. Control-Flow In-
tegrity: Precision, Security, and Performance. ACM Computing
Surveys, 2017.
[8] Jeffrey Byrnes, Thomas Hoang, Nihal Nitin Mehta, and Yuan
Cheng. A Modern Implementation of System Call Sequence
Based Host-based Intrusion Detection Systems. In TPS-ISA,
2020.
[9] Claudio Canella,
Andreas Kogler,
Lukas Giner,
Daniel
Gruss, and Michael Schwarz.
Domain Page-Table Isolation.
arXiv:2111.10876, 2021.
[10] Claudio Canella, Mario Werner, Daniel Gruss, and Michael
Schwarz.
Automating Seccomp Filter Generation for Linux
Applications. In CCSW, 2021.
[11] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-
Reza Sadeghi, Hovav Shacham, and Marcel Winandy. Return-
oriented programming without returns. In CCS, 2010.
[12] Jonathan Corbet. Constant-action bitmaps for seccomp(), 2020.
[13] Crispan Cowan, Calton Pu, Dave Maier, Jonathan Walpole, Peat
Bakke, Steve Beattie, Aaron Grier, Perry Wagle, Qian Zhang,
and Heather Hinton. Stackguard: Automatic adaptive detection
and prevention of buffer-overﬂow attacks. In USENIX Security,
1998.
[14] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian
Monrose. Stitching the gadgets: On the ineffectiveness of coarse-
grained control-ﬂow integrity protection. In USENIX Security
Symposium, August 2014.
[15] Theo de Raadt. syscall call-from veriﬁcation, 2019.
[16] Nicholas DeMarinis, Kent Williams-King, Di Jin, Rodrigo Fon-
seca, and Vasileios P. Kemerlis. sysﬁlter: Automated System
Call Filtering for Commodity Software. In RAID, 2020.
[17] Jake Edge. System call ﬁltering and no_new_privs, 2012.
[18] Jake Edge. A seccomp overview, 2015.
[19] S. Forrest, S.A. Hofmeyr, A. Somayaji, and T.A. Longstaff. A
sense of self for Unix processes. In S&P, 1996.
[20] Stephanie Forrest, Steven Hofmeyr, and Anil Somayaji. The
Evolution of System-Call Monitoring. In ACSAC, 2008.
[21] Thomas D. Garvey and Teresa F. Lunt. Model-based intrusion
detection. In NCSC, 1991.
[22] Xinyang Ge, Nirupama Talele, Mathias Payer, and Trent Jaeger.
Fine-Grained Control-Flow Integrity for Kernel Software. In
Euro S&P, 2016.
[23] Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra, and
Michalis Polychronakis. Conﬁne: Automated System Call Policy
Generation for Container Attack Surface Reduction. In RAID,
2020.
[24] Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra, and
Michalis Polychronakis. Temporal System Call Specialization
for Attack Surface Reduction. In USENIX Security Symposium,
2020.
[25] Anup Ghosh, Aaron Schwartzbard, and Michael Schatz. Learning
Program Behavior Proﬁles for Intrusion Detection. In ID, 1999.
[26] Anup K. Ghosh and Aaron Schwartzbard. A Study in Using
Neural Networks for Anomaly and Misuse Detection. In USENIX
Security Symposium, 1999.
[27] Jonathon Gifﬁn, David Dagon, Somesh Jha, Wenke Lee, and
Barton Miller. Environment-Sensitive Intrusion Detection. In
RAID, 2005.
[28] Jonathon T Gifﬁn, Somesh Jha, and Barton P Miller. Efﬁcient
Context-Sensitive Intrusion Detection. In NDSS, 2004.
[29] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios
Portokalidis. Out of control: Overcoming control-ﬂow integrity.
In S&P, 2014.
[30] Google. Seccomp ﬁlter in Android O, 2017.
[31] Michael Hind. Pointer analysis: Haven’t we solved this problem
yet? In PASTE, 2001.
[32] Steven A. Hofmeyr, Stephanie Forrest, and Anil Somayaji. In-
trusion Detection Using Sequences of System Calls. J. Comput.
Secur., 1998.
[33] Tom Hromatka. seccomp and libseccomp performance improve-
ments, 2018.
[34] K. Ilgun, R.A. Kemmerer, and P.A. Porras.
State transition
analysis: a rule-based intrusion detection approach. TSE, 1995.
[35] Kyriakos K. Ispoglou, Bader AlBassam, Trent Jaeger, and Math-
ias Payer. Block Oriented Programming: Automating Data-Only
Attacks. In CCS, 2018.
[36] Vasileios Kemerlis. Protecting Commodity Operating Systems
through Strong Kernel Isolation. PhD thesis, Columbia Univer-
sity, 2015.
[37] Vasileios P Kemerlis, Michalis Polychronakis, and Angelos D
Keromytis. ret2dir: Rethinking kernel isolation. In USENIX
Security Symposium, 2014.
[38] Vasileios P. Kemerlis, Georgios Portokalidis, and Angelos D.
Keromytis. kguard: Lightweight kernel protection against return-
to-user attacks. In USENIX Security Symposium, 2012.
[39] Richard A Kemmerer and Giovanni Vigna. Intrusion detection: a
brief history and overview. Computer, 2002.
[40] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye
Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur
Mutlu. Flipping Bits in Memory Without Accessing Them: An
Experimental Study of DRAM Disturbance Errors. In ISCA,
2014.
[41] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel
Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Man-
gard, Thomas Prescher, Michael Schwarz, and Yuval Yarom.
Spectre Attacks: Exploiting Speculative Execution. In S&P,
2019.
[42] Christopher Kruegel, Darren Mutz, Fredrik Valeur, and Giovanni
Vigna. On the Detection of Anomalous System Call Arguments.
In ESORICS, 2003.
[43] Bingchen Lan, Yan Li, Hao Sun, Chao Su, Yao Liu, and Qingkai
Zeng. Loop-oriented programming: a new code reuse attack to
bypass modern defenses. In IEEE Trustcom/BigDataSE/ISPA,
2015.
[44] Terran Lane and Carla E. Brodley. Temporal Sequence Learning
and Data Reduction for Anomaly Detection. TOPS, 1999.
[45] C. M. Linn, M. Rajagopalan, S. Baker, C. Collberg, S. K. Debray,
and J. H. Hartman. Protecting Against Unexpected System Calls.
In USENIX Security Symposium, 2005.
[46] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher,
Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul
Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. Melt-
down: Reading Kernel Memory from User Space. In USENIX
Security Symposium, 2018.
[47] Teresa F. Lunt. Automated Audit Trail Analysis and Intrusion
Detection: A Survey. In NCSC, 1988.
[48] Shaohua Lv, Jian Wang, Yinqi Yang, and Jiqiang Liu. Intru-
sion Prediction With System-Call Sequence-to-Sequence Model.
IEEE Access, 2018.
[49] Microsoft. Data Execution Prevention, 2021.
[50] Darren Mutz, Fredrik Valeur, Giovanni Vigna, and Christopher
Kruegel. Anomalous System Call Detection. TOPS, 2006.
[51] Nergal. The advanced return-into-lib(c) explits: PaX case study,
2001.
[52] Shankara Pailoor, Xinyu Wang, Hovav Shacham, and Isil Dil-
lig. Automated Policy Synthesis for System Call Sandboxing.
PACMPL, 2020.
[53] Y. Qiao, X.W. Xin, Y. Bin, and S. Ge. Anomaly intrusion detec-
tion method based on HMM. Electronics Letters, 2002.
[54] Charles Reis, Alexander Moshchuk, and Nasko Oskov. Site
Isolation: Process Separation for Web Sites within the Browser.
In USENIX Security Symposium, 2019.
[55] Roman Rogowski, Micah Morton, Forrest Li, Fabian Monrose,
Kevin Z. Snow, and Michalis Polychronakis. Revisiting Browser
Security in the Modern Era: New Data-Only Attacks and De-
fenses. In EuroS&P, 2017.
[56] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas
Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. Counterfeit
Object-oriented Programming: On the Difﬁculty of Preventing
Code Reuse Attacks in C++ Applications. In S&P, 2015.
[57] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck,
Julian Stecklina, Thomas Prescher, and Daniel Gruss. Zom-
bieLoad: Cross-Privilege-Boundary Data Sampling. In CCS,
2019.
[58] R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni.
A fast
automaton-based method for detecting anomalous program be-
haviors. In S&P, 2001.
[59] Hovav Shacham. The geometry of innocent ﬂesh on the bone:
Return-into-libc without function calls (on the x86). In CCS,
2007.
[60] Dimitrios Skarlatos, Qingrong Chen, Jianyan Chen, Tianyin Xu,
and Josep Torrellas. Draco: Architectural and Operating System
Support for System Call Security. In MICRO, 2020.
[61] Brad Spengler. Recent ARM Security Improvements, 2013.
[62] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. SoK:
Eternal War in Memory. In S&P, 2013.
[63] H.S. Teng, K. Chen, and S.C. Lu. Adaptive real-time anomaly
detection using inductively generated sequential patterns. In S&P,
1990.
[64] Stephan van Schaik, Alyssa Milburn, Sebastian österlund, Pietro
Frigo, Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cris-
tiano Giuffrida. RIDL: Rogue In-ﬂight Data Load. In S&P,
2019.
[65] D. Wagner and R. Dean. Intrusion detection via static analysis.
In S&P, 2001.
[66] David Wagner and Paolo Soto. Mimicry Attacks on Host-Based
Intrusion Detection Systems. In CCS, 2002.
[67] C. Warrender, S. Forrest, and B. Pearlmutter. Detecting intrusions
using system calls: alternative data models. In S&P, 1999.
[68] Lee Wenke, S.J. Stolfo, and K.W. Mok. A data mining framework
for building intrusion detection models. In S&P, 1999.
[69] Andreas Wespi, Marc Dacier, and Hervé Debar. Intrusion De-
tection Using Variable-Length Audit Trail Patterns. In RAID,
2000.
[70] Mozilla Wiki. Project Fission, 2019.
[71] Mozilla Wiki. Security/Sandbox, 2019.
[72] SELinux Wiki. FAQ — SELinux Wiki, 2009.
[73] Yuval Yarom and Katrina Falkner. Flush+Reload: a High Reso-
lution, Low Noise, L3 Cache Side-Channel Attack. In USENIX
Security Symposium, 2014.
[74] Zhang Zhengdao, Peng Zhumiao, and Zhou Zhiping. The Study
of Intrusion Prediction Based on HsMM. In APSCC, 2008.