它们按顺序提供给用户：
static cdc_entry find_cat (void)
cdc_entry item_found;
cha1 LmP_str[TMP_STRING_LEN + 1];
int first_cal1 =1;
int
any_entry_found s 0;
int entry_selected = 0:
int
string_ok;
do{
printfi*Enter string to search for in catalog entry:):
string_ok = 1:
fgets(tmp_str, TMP_STRING_LEN, stdin) :
if (strlen(tap_str)> CAT_CAT_LEN）（
strip_return(tap_str);
fprintf(stderr.
*Sorry. string
characters\n*.CAT_CAT_LEN):
toolong.maximumd
string_ok = 0;
}while (!string_ok;
while (tentry_selected) (
item_found : search_cdc_entry(tmp_str,&first_call);
if(item_found.catalog[0]!=\0′)(
any_entry_tound = 1:
display_cdc(&item_found) :
printf("\n*):
if (
entry_selected = 1;
加入java编程群：524621833
---
## Page 252
234
Linux程序设计
1
eise 
if (any_entry_foundl printf (*Sorry, no more matches found\n*) ;
else printf (*Sorry. nothing found`n*1 ;
break:
return(item_found) :
18)list_tracks函数的作用是列出与给定标题记录对应的全部曲目：
static void list_tracks(const cdc_entry *entry_to_use)
int track_no = 1;
cdt_entry entry_found;
display_cdc(entry_to_use):
printf(*\nTracks\n*}:
do\
entry_found = get_cdt_entry(entry_to_use->catalog.
if (entry_found.catalog101)[
track_no) ;
display_cdt (&entry_found) :
track_no*+;
}while(entry_found.catalog[0]);
tvoidlget_confirm(*Press return*):
}/*1ist_tracks */
I9)count_all_entries函数的作用是统计全部曲目：
static void count_all_entries(void)
int cd_entries_found = 0;
cdc_entry cdc_found;
int track_entries_found = 0;
cdt_entry cdt_found:
int first_time =1:
int
track_no =1;
do(
cdc_found ·search_cdc_entry(search_string.&first_tine):
if （cdc_found.catalog[0]）（
cd_entries_found++;
track_no =1;
do{
cdt_found = get_cdt_entry(cdc_found.catalog, track_no);
it（edt_found.catalogi0])（
track_entries_found++;
track_no*+;
}while (cdt_found.catalog[0]):
）while (cdc_found.catalog10]);
printf(*Found &d CDs, with a total of ed tracks\n*, cd_entries_found,
{void)get_confirm(*Press return*):
track_entries_tound):
20)下面是display_cdc函数的代码，它的作用是显示一条标题记录项：
static void display_cdc(const cdc_entry *cdc_to.show)
加入java编程群
：524621833
---
## Page 253
第7章数据管理
235
printf(*Catalog: Bs\n*, cdc_to_show->catalog):
pzintf(*\ttitle: 8s\na. cde_to_show->title]:
printf(*\ttype:esn',edc_to_show->type);
printf(*\tartist: s\n*, cdc_to_show->artist):
下面是display_cdt函数的代码，它的作用是只显示一条曲目记录项目：
statie void display_cdt [const cdt_entry *cdt_to_show)
printf(*&d: as\n*, cdt_to_show->tzack_no. cdt_to_show->track_txt);
1
21)工具函数strip_return的作用是删除字符串后面尾缴的换行符。记住UNIX使用一个单独
的换行符来结束一行。
static void strip_return(char *string_to_strip)
int len;
len = strlen(string_to_strip):
,0, =11 - uadsuas (,. c= [ - udsx) 
22）command_mode是一个对命令行参数进行分析的函数。getopt函数是一个确保程序能够
接受符合UNIX标准体例的参数的好办法。
static int command_mode(int arge, char *argv[11
int c;
char *prog_name =argv[0]:
int result = EXIT_SUCCESS;
/*these externals used by getopt */
extern optind, opterr. optopt;
extern char 'optarg:
while ((c= getopt(argc.argv,*:i*))!-1)(
switch(c)(
cese 'i.:
if(lGatabase_initialize(1!){
fprintf (stderr,*Failed to initialize database\n*);
result = EXIT_FAILURE:
break:
1
case ·?:
case ':':
default:
fprintf(stderr,*Usage:ks [-i]\n". prog_nane);
result = EXIT_FAILURE;
break:
}/*while*/
return(result):
动手试试：cd_access.c程序清单
1）现在开始介绍对dbm数据库进行访问的函数。与往常一样，我们以头文件包括语句开始。
接着，我们用“#define”语句定义了一些文件，我们将把数据保存在这些文件里。
加入java编程群：524621833
---
## Page 254
236
Linux程序设计
define _XOPEN_SOURCE
#include 
include 
inelude 
#include 
#include 
#include 
#inelcoe *ed_data.h*
define CDC_FILb_BASE *cdc_data*
define CDC_PILE_DIR*
#define CDT_FILE_BASE *cdt_data*
#define CDC_FILE_PAG
oedeiepopo.
'cdc_data.dir'
#define CDT_FIl&_PAG*cdt_data.pag*
define CDT_FILE_DIR *cdt_data.dir*
2）我们用下面这两个文件范围变量追踪当前数据库：
stat: DBM *cd_ibm_pr =NULL;
srat1 DBM *cdt_dbm_ptr =NULL:
3）database_initialize函数的默认操作是打开个现有的数据库，但如果我们给它的参数
new_database传递了个非零值（即布尔真值），就可以强迫它创建--个新的（空白）数据
作。如果对数据库的初始化成功了，两个数据库指针也将被初始化，以此表明打开了个数
据库。
Int database_initialize [const int new databasc)
1
int open_mode = O_RDWR;
:* If any existing databese is open then elose it */
it(cdc_dbm_ptr) dbm_c1ose(ede ,dbm_ptr):
f(cdt_dtm_ptr) dbm_closefcdt_dbe_ptr):
it(new_database)(
/*delete the old files *,
(void] unlink (CDC_FILE_PAG);
(void) unlink(CDC_FILE_DIR):
(void) unlink(CDT_FILE_PAC1:
(void) unlink (CDT_FILE_DIR) ;
open_mode = O_CREAT | O_RDWR:
/Open some new files, creating them if required */
cdc dbn_ptr =dbm_open(CDC_FILE_BASE,open_node,0644);
if（1cdc_dbm_ptr1edt_dbm_ptr}
(it_dbm_ptr - dbm_open[CDr_FIL&_BASE，open_mode,0644):
cdc_dbm_ptr = cdt_dbm_ptr • ULL;
fprintf (stderr, *Unable to create database\n*):
return (0):
etuxn (1):
4）如果数据库是打开着的，data_close就简单地把它关上，再把两个数据库指针设置为null，
以此表明当前没有打开着的数据库。
void database_Llose [void}
1f(cdc_dba_ptr) dbm_close(cdc_dbm_pt1;
1f(cdt_dbm_ptr) dbm_close(cdt_dbm_ptx);
加入jaVva编程群：524621833
---
## Page 255
第7章数据管理
237
cdc_dbe_ptr = cdt_dbm_ptr + NUL.L;
5）当我们给下面这个函数传递过去--个指问·个标题文本字符串的指针时，它将检索出一
个标题记录项来。如果标题记录没有找到，其返回数据中的标题域catalog将为空。
cdc_entry get_cdc_entry(const cha *cd_cataiog_pt1!
cdc_entry entry_to_return:
char entry_ro_find(CAT_CAT_L&N + 11:
Aatun 1ocal_data_datum;
datum 1ocal_key_datun;
memset Iaentry_to ,return.*\0′, sizeofientry_to_return)1;
6）我们先做一些预防性检查，确定数据库已经被打开，参数也很合理—即用来进行搜索的
关键字里只能包含者合法的字符中和空字符“mull"：
if (!cde_dbm_ptr 11:cdt_dbm_pr) zeturn (entry_to_return):
if (strlen(cd_catalog_ptr) >= CAT,CAT_LEN) returr ientry_to_returnl:
f
(!cd_catalog_ptr) return (entry_to_return):
menset(&entry_to_find, *0', sizeof tentry_to_find):
strcpy(entry_to_find, cd_catalog_ptt) ;
7）我们对dbm两数所要求的datum结构进行设箐，然后用dbm_fetch检索数据。如果没有检索
到数据，我们将返回空着的entry_to_return结构，这个结构在前面进行过初始化。
loca1_key_datum.dpt1 =(vo1d *1entry_to_find:
local_key_detum,dsize = sizeof tentry_tc_Iind] :
nemset(6locel_data_datue.*\0′,s12eof i1ocal_data_datum11;
if {local_data_datum.dptr)f
1oca1_data_datum = dbn_fetch1cdc_ibn_ptr, 1oca1_key_datum);
memcpy (6entry_to_retarn, (char *)1ocal_data_datum.dptr,
local_data_datum,dsize) :
/.Kxquaopoa6f
return (entry_to_return):
8）我们希望还对单个的曲目记录项进行检索，而这正是下面这个函数的功用。它的工作方
式与iget_cdc_entry函数一样，但需要有两参数：-个是指向一个标题字符串的指针，另~-个是曲
目的编号。
cdt_entry get_cdt_entry(const char *cd_catalog_ptr. const int track_no)
cdt_entry entry_to_roturn;
char entry_to_find(CAr_CAT_LEN + 10];
datum 1ocal_data_datum;
datun 1ocal_key_datum;
nenset (kentry_to_return, *\o′, sizeof entry_to_retuin));
if (1cdc_ibm_ptr 111edt_dbm ptr) return lentry._to_return):
if
{1ed_catalog_ptr)return (entry_to_rcturn);
f
(strlen(cd_catalog_ptr) >= CAT_CAT_LEN) return (entry_to_return1:
set up the search key. which is a cooposite key of catalog entry
memset (&entry_to_find,
and track number */
*\0′, sizeof(entry_to_find)):
sprintf (entry_to_find, *es ed*. cd_catalog_ptr, track_no):
local_key_datun.dptr = (void *) entry_to_find;
加入iaVa编程群：524621833
---
## Page 256
238
Linux程序设计
local_key_datun.deize > sizecf (entry_to_find:
memset (&1ocal_data_datum, *\0', sizeof(1ccal_data_Gatum)) ;
local_data_datun = dbm_feteh(cdt_dbm_ptr. 1ocai_key_datum);
if (1ocal_data_datum.cptr){