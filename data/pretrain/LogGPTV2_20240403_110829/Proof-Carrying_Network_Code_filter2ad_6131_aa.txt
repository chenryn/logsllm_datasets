title:Proof-Carrying Network Code
author:Christian Skalka and
John Ring and
David Darais and
Minseok Kwon and
Sahil Gupta and
Kyle Diller and
Steffen Smolka and
Nate Foster
Proof-Carrying Network Code
John Ring
University of Vermont
Burlington, VT, USA
PI:EMAIL
David Darais
University of Vermont
Burlington, VT, USA
PI:EMAIL
Sahil Gupta
Rochester, NY, USA
PI:EMAIL
Kyle Diller
Rochester, NY, USA
PI:EMAIL
Christian Skalka
University of Vermont
Burlington, VT, USA
PI:EMAIL
Minseok Kwon
Rochester, NY, USA
PI:EMAIL
Rochester Institute of Technology
Rochester Institute of Technology
Rochester Institute of Technology
Steffen Smolka
Cornell University
Ithaca, NY, USA
PI:EMAIL
ABSTRACT
Computer networks often serve as the first line of defense against
malicious attacks. Although there are a growing number of tools
for defining and enforcing security policies in software-defined
networks (SDNs), most assume a single point of control and are
unable to handle the challenges that arise in networks with multiple
administrative domains. For example, consumers may want want
to allow their home IoT networks to be configured by device ven-
dors, which raises security and privacy concerns. In this paper we
propose a framework called Proof-Carrying Network Code (PCNC)
for specifying and enforcing security in SDNs with interacting ad-
ministrative domains. Like Proof-Carrying Authorization (PCA),
PCNC provides methods for managing authorization domains, and
like Proof-Carrying Code (PCC), PCNC provides methods for en-
forcing behavioral properties of network programs. We develop
theoretical foundations for PCNC and evaluate it in simulated and
real network settings, including a case study that considers security
in IoT networks for home health monitoring.
CCS CONCEPTS
• Security and privacy → Formal methods and theory of se-
curity; • Software and its engineering → Formal software
verification; • Networks → Programming interfaces; Network se-
curity;
KEYWORDS
Trust Management; Formal Verification; Software-Defined Net-
works; Nexus Authorization Logic; NetKAT
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3363214
Nate Foster
Cornell University
Ithaca, NY, USA
PI:EMAIL
ACM Reference Format:
Christian Skalka, John Ring, David Darais, Minseok Kwon, Sahil Gupta,
Kyle Diller, Steffen Smolka, and Nate Foster. 2019. Proof-Carrying Network
Code. In 2019 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’19), November 11–15, 2019, London, United Kingdom. ACM,
New York, NY, USA, 15 pages. https://doi.org/10.1145/3319535.3363214
1 INTRODUCTION
Computer networks play a critical role in implementing security
policies, often serving as the first line of defense against malicious
attacks. Although there are a growing number of tools for specifying
and verifying behavior in software-defined networks (SDNs), most
are unable to handle the challenges that arise in networks with
multiple administrative domains.
To illustrate, consider the following concrete scenario. Suppose
that a health monitoring system is connected to a home network
with one or more IoT (Internet of Things) devices—e.g., as shown
in Figure 1(a), a fitness tracker monitors the sleep patterns of its
residents, using Bluetooth or WiFi to connect to a switch that
provides connectivity to other devices on the local network. There is
also an edge router that connects the home network to the Internet.
To prevent health data from being sent externally, the network
is configured as follows. The switch uses VLANs (virtual local
area networks) to isolate different segments of the network from
each other, while the router uses a firewall to filter incoming and
outgoing traffic and a NAT (network address translator) to convert
between private addresses used in the home network and public
addresses used on the Internet. For example, the switch might
classify packets coming from the fitness tracker, adding a tag to
indicate if they are private (e.g., fine-grained location information)
or public (e.g., aggregate, anonymous sleep data), and the firewall
might drop packets tagged as private.
Suppose we add a second device that monitors blood pressure.
In order to report information in an emergency—e.g., when blood
pressure becomes dangerously high—the network must be reconfig-
ured. In particular, the filtering rules installed on the firewall must
be relaxed to allow data to be released from the network even if
it is not public during an emergency. One possible approach is to
CCS ’19, November 11–15, 2019, London, United Kingdom
Skalka et al.
(a) Initially, only public data generated by the sleep tracker can pass the
edge router.
(b) After the blood pressure monitor is added, the emergency data is not
filtered at the router reaching the 911 service.
(c) Public data from the sleep tracker is delivered to a federated edge
computing service upon request.
Figure 1: PCNC use case: health monitoring edge network.
modify the switch to apply a special emergency tag and relax the
filtering rules used by the firewall to forward packets carrying this
tag, even if they are also marked as private.
Although this is a simple example, it already raises a number of
interesting issues. First, to correctly configure the network, we must
specify, verify, and coordinate behavior on multiple devices—e.g.,
the tagging rules at the switch and the filtering rules at the firewall.
Second, we must ensure that requests to reconfigure devices are
submitted by an authorized party. For example, the homeowner
might only trust device vendors that have been appropriately cer-
tified. Unfortunately, existing platforms do not provide adequate
mechanisms for specifying and enforcing such properties.
Moreover, challenges related to security and federation arise in
more complex and varied systems, such as the following scenarios.
Campus Network: The goal is to implement a distributed firewall
that isolates different classes of traffic from each other—e.g., faculty,
students, and visitors. However, different principals are responsible
for managing the devices in the network. For instance, university
staff might control the routers at the core of the network while
department staff control the switches at the edge.
Internet Exchange Point (IXP): The goal is to allow each partic-
ipant to specify policies that determine how their own traffic is
handled. These policies encode intricate preferences and are often
inter-dependent, due to complex business relationships and opera-
tional concerns—e.g., a large Internet Service Provider (ISP) might
be willing to carry traffic generated by its direct customers, but not
be willing to provide transit for competitors.
Federated Edge Computing: The goal is to push computational
tasks to edge devices, which requires using the network to commu-
nicate the inputs and outputs of a given computation. For example,
the IoT network (B) described above might coordinate with another
IoT network (A) that provides a machine learning (ML) service at
the edge, allowing A to configure B to forward public data to A
as illustrated in Figure 1(c). However, authorization is challenging
in this context since A and B may not have a direct trust relation-
ship, and A and B may have independent local policies governing
authorization and network behavior.
In each scenario, multiple principals must collaborate to manage
different network devices and enforce the intended security pol-
icy. However, operators often have no choice but to rely on social
mechanisms or even blind faith. This is unfortunate since networks
can provide crucial security and privacy defenses. For example,
networks can prevent sensitive information from being exfiltrated
by monitoring and blocking unauthorized communication. They
can ensure that data received from untrusted sources is properly
sanitized before it is sent to internal servers. And they can provide
strong guarantees about availability, even in the presence of conges-
tion or failures, by setting up multiple, redundant paths connecting
each pair of hosts.
A promising approach to these problems is to exploit the pro-
gramming interface for network devices provided by software-
defined networks (SDN). However existing SDN platforms either
assume a single administrative domain, or only handle limited
forms of federation—e.g., virtualization solutions that enable multi-
ple tenants to control disjoint slices of the network. For instance,
languages such as Frenetic [12], Pyretic [28], and NetKAT [4], and
data plane verification tools such as Header Space Analysis [22]
and Veriflow [23] assume that the network is managed by a single
administrator who has global visibility of the network and full au-
thority to control how packets are processed. SDN control platforms
also present their own unique security challenges [25, 32].
1.1 Overview and Foundations
To address these challenges, we introduce an expressive and flexible
discipline for reconfiguring SDN controllers in a federated setting
that supports both authorization and behavioral compliance of
programs, called Proof-Carrying Network Code (PCNC). Analogous
to Proof-Carrying Code (PCC) [29], PCNC allows clients to ship
proofs of security compliance along with their code that can be
verified before it is installed. We argue that networks are a good
application domain for a PCC-style approach for several reasons.
First, as discussed above, operators today must often execute pro-
grams produced by different parties with varying degrees of trust.
Hence, a framework in which rich properties are automatically
verified using a trustworthy proof checker could have a significant
practical impact. Second, while networks are often large in size,
the programs they execute tend to be extremely simple and thus
amenable to verification—each device executes a loop-free program
that classifies and transforms incoming packets.
sleep trackerpublicdataedge routercloudserverprivate datasleep trackerprivate databloodpressurepublicemergencysleep trackerprivate databloodpressurepublicemergencyML serverpublicProof-Carrying Network Code
CCS ’19, November 11–15, 2019, London, United Kingdom
We observe that there are two key concerns for allowing network
reconfiguration across multiple administrative domains: authoriz-
ing that a network update is permitted, and verifying that the update
preserves important behavioral properties. To this end, PCNC uses
a client-server model in which administrators can submit policy
specifications of authorization and behavior and clients can submit
authorization credentials and network updates. Upon receiving a
client request, the server verifies it against its current authorization
and behavioral policies.
PCNC is based on two existing theories, which provide its formal
foundation: Nexus Authorization Logic (NAL) [19, 35] for express-
ing and enforcing authorization policies, and NetKAT for expressing
and enforcing behavioral policies. NetKAT is a domain-specific lan-
guage for programming and reasoning about SDNs developed in
previous work [4, 13]. It is based on a solid mathematical founda-
tion, Kleene Algebra with Tests (KAT) [24], and comes equipped
with an equational reasoning system that can be used to verify
many properties of interest automatically [13].
1.2 Contributions and Related Work
In this paper we develop theory and establish an architecture for
PCNC, including a prototype implementation and evaluation on
realistic use cases both in simulation and on a hardware testbed.
In Section 2, we describe the theoretical foundations of PCNC.
We formulate a variant of NAL, called NALlight, that captures
application-level assertions about NetKAT programs. Thus, judg-
ments in NALlight model an authorization and a behavioral compo-
nent. The authorization component combines the expressiveness of
a higher-order logic extended with modalities for belief ascription
and delegation, while properties involving NetKAT programs can
be expressed as application-level assertions (though decidable prop-
erties, such as equivalence, are of particular interest). For properties
that can be reduced to equivalence, we define an algorithm with
optimizations for checking equivalence of NetKAT programs that
is based on previous work [13].
Also in Section 2, we develop a language for proof representation,
called System FSays, a typed term calculus that enjoys a Curry-
Howard types-as-formulas correspondence with NALlight as stated
in Theorem 2.1. Our approach to proof representation is similar to
CDD [2], which demonstrated the benefits of the Curry-Howard
approach, including a reduction semantics that can support proof
minimization.
In Section 3, we describe how these elements are combined in
a system for enforcing security in SDNs. We propose a specific
judgment form that can be used to verify requests to either recon-
figure or extend the configuration of the network using NetKAT.
Verification of requests subsumes System FSays type checking for
authorization and decidable equivalence checking for behavioral
verification. Classic work on PCC focuses mostly on supporting
purely behavioral policies, but previous work has considered Proof-
Carrying Authentication [5] and Authorization [6, 15], also known
as PCA, to support verification of authorization policies in dis-
tributed systems. Thus, PCNC unifies concepts explored in PCC
and PCA to obtain a uniform language framework for expressing
proofs of authorization and behavioral policy compliance to support
SDN network configuration in federated settings.
The work most related to our PCNC framework is the FLANC
system [18]. However, being based on NAL and NetKAT, PCNC
offers effective mechanisms for constructing proofs and deciding
behavioral properties that are based on well-studied logical founda-
tions. In particular, since PCNC requests carry System FSays proof
witnesses, authorization is based on proof checking, not proof re-
construction or certificate chain discovery, unlike systems such as
SAFE [7].
In Section 4, we develop a case study that illustrates its features
and applicability to SDN programming. This case study is based
on the IoT health monitoring network example discussed above
and illustrated in Figure 1. We propose a specific network topology,
configurations, and PCNC requests that embody the example.
In Section 5. we describe an implementation of PCNC on a hard-
ware testbed that combines novel verification components with
NetKAT compilation tools from Frenetic [12], as described in Sec-
tion 5.2. Our implementation includes a JSON wire format schema
for PCNC messages and and a signature verification scheme for
NALlight credentials. We evaluate the implementation using the
case study and report on verification overhead.
2 PCNC FOUNDATIONS
In this section we develop a foundational theory for PCNC. To
support authorization in PCNC, we adapt the authorization logic
NAL [35]. We define a natural deduction style proof theory for
the logic, for which we later develop a proof representation and
checking method in Section 2.1.4.
To support behavioral policy specification and enforcement dur-
ing network reconfiguration, we use the NetKAT language [4, 13].
NetKAT has a decidable equational theory—here, we define an algo-
rithm for checking program equivalence that is incorporated into
our PCNC framework to support behavioral verification.
2.1 Authorization Logic
A number of authorization logics have been proposed in previous
work that offer features for policy expression [1, 3, 8, 17, 19]. In gen-
eral, modern authorization logics equate authorization decisions
with provability of formulas, where given authorization creden-
tials are modeled as assumptions for the proof derivation. They
typically extend an underlying logic (e.g., first-order classical logic)
with SpeaksFor and Says modalities endowed with either a possi-
ble worlds semantics [16] or a related semantics of “belief” [19].
The SpeaksFor modality allows the authority of one principal to be