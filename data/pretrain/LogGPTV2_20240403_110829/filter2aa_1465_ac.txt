is re-used (C1). A challenge is the possibility of non-
bijective syscall mappings (C2).
Non-Bijective Syscall Mappings
If the syscall number
cannot be determined at the location of a syscall instruc-
tion, a non-bijective mapping exists for the instruction,
i.e., multiple syscalls can be executed through it. An ex-
ample of such a case is shown in Listing 1. In such cases,
the backend itself cannot create a mapping of a syscall
to the syscall instruction. Hence, it must propagate the
syscall number and the syscall offset from their respective
translation unit to the linker, which can then merge it,
solving C2.
4.3. Installation
For each syscall, the binary contains a list of all other
reachable syscalls as an N ×N matrix, i.e., the state ma-
chine, with N being the number of syscalls available.
Valid transitions are indicated by a 1 in the matrix, invalid
ones with a 0 to allow fast checks and constant memory
overhead. If a function contains a syscall, the offset of the
syscall is added to the load address of the function. The
state machine and the syscall-origin mapping are sent to
the kernel and installed.
4.4. Kernel Enforcement
In this section, we discuss the third and ﬁnal pillar of
SFIP: enforcement of the syscall ﬂow and origin where
every violation leads to immediate process termination.
Our Linux kernel is based on version 5.13 conﬁgured
for Ubuntu 21.04 with the following modiﬁcations.
First, a new syscall, SYS_syscall_sequence, which takes
as arguments the state machine, the syscall-origin map-
ping, and a ﬂag that identiﬁes the requested mode, i.e.,
is state-machine enforcement requested, syscall-origin
enforcement, or both. The kernel rejects updates to al-
ready installed syscall-ﬂow information. Consequently,
an unprivileged process cannot apply a malicious state
machine or syscall origins before invoking a setuid binary
or other privileged programs using the exec syscall [17].
Second, our syscall-ﬂow-integrity checks are executed
before every syscall. We create a new syscall_work_bit
entry, which determines whether or not the kernel uses
the slow syscall entry path, like in seccomp, to ensure that
our checks are executed. Upon installation, we set the
respective bit in the syscall_work ﬂag in the thread_info
struct of the requesting task.
Translation Unit 1
L01 :
void func () {
.func:39:
L02 :
asm( ” s y s c a l l ” : : ”a” ( 3 9 ) ) ;
. . .
.syscall cp:3:
L08 :
s y s c a l l c p ( close , 0 ) ;
L09 :
}
Translation Unit 2
L01 :
s y s c a l l c p :
. . .
L06 :
mov %rcx ,% r s i
L07 :
mov 8(%rsp ),% r8
.syscall cp:-1:
L08 :
s y s c a l l
. . .
Extraction TU 1
” Of fsets ” :
{
” func ” :
{
”39” :
[ L02 ]
}
}
”Unknown O ff sets ” :
{
” s y s c a l l c p ” :
[ 3 ]
}
Extraction TU 2
”Unknown S y s c a l l s ” :
{
” s y s c a l l c p ” :
[ L08 ]
}
Linker
” Of fsets ” :
{
” func ” :
{
”39” :
[ L02 ]
} ,
” s y s c a l l c p ” :
{
”3” :
[ L08 ]
}
}
extract
merge
1
Figure 3: A simpliﬁed example of the syscall-origin extraction. Inserted red labels mark the location of a syscall and
encode available information. The extraction deconstructs the label and calculates the offset using the label’s address
from the symbol table. The linker combines the information from each translation unit and generates the ﬁnal syscall-
origin mapping.
Third, the syscall-ﬂow information has to be stored
and cleaned up properly. As it is never modiﬁed after
installation, it can be shared between the parent and child
processes and threads. Upon task cleanup, we decrease
the reference counter, and if it reaches 0, we free the re-
spective memory. The current state, i.e., the previously
executed syscall, is not shared between threads or pro-
cesses and is thus part of every thread.
Enforcing State Machine Transitions
Each thread and
process tracks its own current state in the state machine.
As we enforce sequence lengths of size 2, storing the pre-
viously executed syscall as the current state is sufﬁcient
for the enforcement. Due to the design of our state ma-
chine, verifying whether a syscall is allowed is a single
lookup in the matrix at the location indicated by the pre-
vious and current syscall. If the entry indicates a valid
transition, we update our current state to the currently
executing syscall and continue with the syscall execution.
Otherwise, the kernel immediately terminates the offend-
ing application. The simple state machine lookup, with a
complexity of O(1), ensures that only a small overhead
is introduced to the syscall (cf. Sections 5.1.2 and 5.1.3).
Enforcing Syscall Origins
The enforcement of the
syscall origins is very efﬁcient due to its design. Our
modiﬁed kernel uses the current syscall to retrieve the set
of possible locations from the mapping to check whether
the current RIP, minus the size of the syscall instruction
itself, is a part of the retrieved set. If not, the application
requested the syscall from an unknown location, which
results in the kernel immediately terminating it. By de-
sign, the complexity of this lookup is O(N), with N being
the number of valid offsets for that syscall. We evaluate
typical values of N in Section 5.2.6.
5. Evaluation
In this section, we evaluate the general idea of SFIP and
our proof-of-concept implementation SysFlow. In the
evaluation, we focus on the performance and security of
the syscall state machines and syscall-origins individually
and combined. We evaluate the overhead introduced on
syscall executions in both a micro- and macrobenchmark.
We also evaluate the time required to extract the required
information from a selection of real-world applications.
Our second focus is the security provided by SFIP.
We ﬁrst consider the protection SFIP provides against
control-ﬂow hijacking attacks. We evaluate the security
of pure syscall-ﬂow protection, pure syscall-origin pro-
tection, and combined protection. We discuss mimicry
attacks and how SFIP makes such attacks harder. We
also consider the security of the stored information in the
kernel and discuss the possibility of an attacker manipu-
lating it. Finally, we extract the state machines and syscall
origins from several real-world applications and analyze
them. We evaluate several security-relevant metrics such
as the number of states in the state machine, average
possible transitions per state, and the average number of
allowed syscalls per syscall location.
State
Origin
Combined
None
Seccomp
0
200
400
326
329
341
302
348
320
320
332
292
336
Cycles
average
min
Figure 4: Microbenchmark of the getppid syscall over
100 million executions. We evaluate SFIP with only state
machine, only syscall origin, both, and no enforcement
active. For comparison, we also benchmark the overhead
of seccomp.
5.1. Performance
5.1.1. Setup All performance evaluations are performed
on an i7-4790K running Ubuntu 21.04 and our modiﬁed
Linux 5.13 kernel. For all evaluations, we ensure a stable
frequency.
5.1.2.
Microbenchmark We perform a microbench-
mark to determine the overhead our protection introduces
on syscall executions. Our benchmark evaluates the la-
tency of the getppid syscall, a syscall without side ef-
fects that is also used by kernel developers and previous
works [6, 10, 33]. SysFlow ﬁrst extracts the state ma-
chine and the syscall-origin information from our bench-
mark program, which we then execute once for every
mode of SFIP, i.e., state machine, syscall origins, and
combined. Each execution measures the latency of 100
million syscall invocations. For comparison, we also
benchmark the execution with no active protection. As
with seccomp, syscalls performed while our protection is
active require the slow syscall enter path to be taken. As
the slow path introduces part of the overhead, we addi-
tionally measure the performance of seccomp in the same
experiment setup.
Results
Figure 4 shows the results of the microbench-
mark. Our results indicate a low overhead for the syscall
execution for all SFIP modes. Transition checks show an
overhead of 8.15 %, syscall origin 9.13 %, and combined
13.1 %. Seccomp introduces an overhead of 15.23 %. The
improved seccomp has a complexity of O(1) for simple
allow/deny ﬁlters [12], the same as our state machine.
The syscall-origin check has a complexity of O(N), with
typically small numbers for N, i.e., N = 1 for the getppid
syscall in the microbenchmark. Section 5.2.6 provides a
more thorough evaluation of N in real-world applications.
The additional overhead in seccomp is due to its ﬁlters
being written in cBPF and converted to and executed as
eBPF.
5.1.3.
Macrobenchmark To demonstrate that SFIP
can be applied to large-scale, real-world applications
Table 1: The results of our extraction time evaluation in
real world applications. We present both the compilation
time of the respective application with and without our
extraction active.
Application
Unmodiﬁed
Average / SEM
Modiﬁed
Average / SEM
ffmpeg
162.12 s / 0.78
1783.15 s / 10.61
mupdf
58.01 s / 0.71
489.85 s / 0.68
nginx
8.22 s / 0.03
226.64 s / 1.67
busybox
16.09 s / 0.08
81.33 s / 0.14
coreutils
5.50 s / 0.02
14.39 s / 0.41
memcached
2.90 s / 0.03
4.59 s / 0.01
pwgen
0.07 s / 0.00
0.12 s / 0.00
with a minimal performance overhead, we perform a
macrobenchmark using applications used in previous
work [10, 24, 60]. We measure the performance over 100
executions with only state machine, only syscall origin,
both, and no enforcement active. For nginx, we measure
the time it takes to process 100 000 requests. For ffmpeg,
we convert a video (21 MB) from one ﬁle format to an-
other. With pwgen, we generate a set of passwords while
coreutils and memcached are benchmarked using their
respective testsuites. In all cases, we veriﬁed that syscalls
are being executed, e.g., each request for nginx executes
at least 13 syscalls.
Results
Figure 5 shows the results of the macrobench-
mark. In nginx, we observe a small increase in execution
time when any mode of SFIP is active. If both checks are
performed, the average increase from 24.96 s to 25.34 s
(+1.52 %) is negligible. We observe similar overheads
in the ffmpeg benchmark. For the combined checks, we
only observe an increase from 9.41 s to 9.58 s (+1.52 %).
pwgen and coreutils show the highest overhead. pwgen
is a small application that performs its task in under a
second; hence any increase appears large. The absolute
change in runtime is an increase of 0.05 s. For the core-
utils benchmark, we execute the testsuite that involves all
103 utilities. Each utility requires that the SFIP informa-
tion is copied to the kernel, which introduces a majority
of the overhead. As the long-running applications show,
the actual runtime overhead is less than 1.8 %. Our results
demonstrate that SFIP is a feasible concept for modern,
large-scale applications.
5.1.4. Extraction-Time Benchmark We evaluate the
time it takes to extract the information required for the
state machine and syscall origins. As targets, we use
several real-world applications (cf. Table 1) used in previ-
ous works on automated seccomp sandboxing [10, 24, 16].
These range from smaller utility applications such as busy-
ffmpeg
nginx
pwgen
coreutils
memcached
0
0.5
1
1.5
+3.93 %
+1.08 %
+13.33 %
+6.5 %
+0.5 %
+2.98 %
+1.2 %
+13.33 %
+9.83 %
+0.34 %
+1.81 %
+1.52 %
+20 %
+12.42 %
+1.06 %
+0 %
+0 %
+0 %
+0 %
+0 %
Normalized
Overhead
State
Sysloc
Combined
None
Figure 5: We perform a macrobenchmark using 5 real-world applications. For nginx, we measure the time it takes
to handle 100 000 requests using ab. For ffmpeg, we convert a video (21 MB) from one ﬁle format to another. pwgen
generates a set of passwords while coreutils and memcached are benchmarked using their respective testsuites. Each
benchmark measures the average execution time over 100 repetitions of each mode of SFIP.
box and coreutils to applications with a larger and more
complex codebase such as ffmpeg, mupdf, and nginx. For
the benchmark, we compile each application 10 times us-
ing our modiﬁed compiler with and without our extraction
active.
Results
Table 1 shows the result of the extraction-time
benchmark. We present the average compilation time
and the standard error for compiling each application 10
times. The results indicate that the extraction introduces
a signiﬁcant overhead. For instance, for the coreutils ap-
plications, we observe an increase in compilation time
from approximately 6 s to 15 s. We observe the largest
increase in nginx from approximately 8 s to 227 s. Most
of the overhead is in the linker, while the extraction in
the frontend and backend is fast. We expect that a full
implementation can signiﬁcantly improve upon the ex-
traction time by employing more efﬁcient caching and by
potentially applying other construction algorithms.
Similar to previous work [24], we consider the increase