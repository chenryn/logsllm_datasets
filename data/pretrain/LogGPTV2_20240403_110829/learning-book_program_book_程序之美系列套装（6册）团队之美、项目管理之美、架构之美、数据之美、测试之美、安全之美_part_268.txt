---
## Page 1518
非常合适，因为在CrimeWatch上可以很容易地定位它们的（xy）像
素坐标，而且通过SimonWillison的GetLatLon应用
(htp：//getlatlon.com)，也可以很容易地定位道路交叉口的地理位置
（经纬度）。给奥克兰的6个警务服务区添加三个参照点相当于手
工创建了18个已知的地理定位。该步骤只需要做一次：在每个服务
区，所有能在地图上找到的图标，都可以利用简单的线性算法，通
过和已知的参照点比较，计算出它们的地理位置。图11-5显示了商
业区邮政编码的地图，它包含选定的三个地理参照点。定位了这三
个点之后，就可以三角测量地图上的任何其他点的地理位置。
137.8156*
137.805
+
图11-5：奥克兰商业区地图，为三角测量所显示的三个参照点
（见彩图31）
唯一剩下的一件事就是模拟用户点击每个犯罪图标，收集关于犯罪
报告的进一步详细信息，比如案例编号、每天的日期和时间以及简
单的文本描述。其生成的最终产品是每天包含大约100个报告的数
据库。该步骤面临的一个挑战是确定一个独特报告是由哪些构成
的。我采用移动窗口来收集报告，这意味着每个报告都会被收集多
次，而多个独立的报告可以通过警察局提供的唯一案例编号覆盖成
一个。最后，我们使用了一组案例编号和文本描述，它们足够覆盖
数据收集中绝大部分的不一致性。
实现上述功能的代码运行于事件驱动的网络引擎Twisted
Python(http：//www.twistedmatrix.com/）上。采用这种引擎使得打开
并保持一个长时间持续运行、使用CrimeWatch提供服务的模拟浏览
器的会话变成可能。有了这些代码库，可以把脆弱的程序转变成每
关晚上连续运行和收集数据的应用程序，而且结果数据也可以以表
1517
---
## Page 1519
单方式公并展示。我们相信对于奥克兰市的居民而言，表单方式显
示要比采用CrimeWatch显示显得更为友好。
晚上收集这些数据为最初8个月的收集和实验奠定了基础。每天晚
上，我们会在13种类型的犯罪和6个警务服务区的全部组合上运行
一个网页刮屏工具(PgeScraper)。由于CrimeWatch的一次性设计，每
个个人报告需要有它自己的请求/响应循环。我们还为每个步骤增加
了很多延迟一—在这个过程中，每两个步骤之间高达一分钟或者更
多的延迟一—因此不会由于过多的请求而使CrimeWatch服务器负载
过高。在午夜之后，将会启动单一进程运行，而且该程序通常可以
持续6个小时或者更多。
一般来说，错误还是时常发生。CrimeWatch服务程序常常会变得非
常“不理智”，勉强生成一个没有空间、时间或类型约束的地图，比
如奥克兰过去三个月所有地区的所有犯罪。我们没有可靠的方式来
检测这种情况，而且我们的数据库所报告的地理位置经常错乱。
在这个案例中，我们觉得偶尔的错误报告只是为了改进数据库浏览
工具而付出的很小的代价。在2007年前半年，我们继续收集数据，
通过可视化表示或者出版发表技术，周期性地发布一些小的实验。
公开数据
化日下被刺杀了，距离我所在的商业区的公寓仅隔几个区。虽然这
个尚未公开的案例看起来是被当前Bailey正在调查的一群罪犯分子
的政治谋杀的一个案例，但是它重新聚焦了全国对奥克兰暴力犯罪
的关注。几乎同时，《OaklandTribune》的SeanConnelly和Katy
Newton发表了获奖作品《NotJustANumber》，它是一张奥克兰杀
人犯的交互图
(htp:/www.bayareanewsgroup.com/multimedia/iba/njn/)。Connelly
和Newton对于该城市的谋杀统计幕后的故事尤其感兴趣。在《Not
JustANumber》地图中，绝大部分的受害者先是通过面部照片来识
别，它还努力联系受害者活着的家人、朋发和邻居在新闻报道中露
面留名。我们对于提供一个服务来提供铁的事实和当前数据来补充
这些故事非常感兴趣。
我们的预算包括三个人、两周的敏捷并发工作量：我们把收集的数
据转化为可用于Web的服务，Stamen交互设计师TomCarden使用
1518
---
## Page 1520
Flash并发了可融入式的可视化接口，而富于创意的负责人Eric
Rodenbeck预见了这种可视化方向及其伴随而至的语言所产生的效
果。
发布信息优先级最高的是要显示所有方面。Crimespotting网站的主
页是一张地图（见图11-6），而且该地图显示了从上周并始的所有
犯罪报告。地图包含西奥克兰和商业区的绝大多数地方，包含图标
化的LakeMerritt，可用于视觉识别。熟悉的“滑动地图"(SippyMap)
的移动和缩放控制使得可以迅速地获取城镇的其他地方的信息，西
北部是Berkeley/Emeryville，东北部是富饶的山脉和Piedmont，东南
部是SanLeandro及其以外地区。这种表示方式与奥克兰城市的官方
网站CityofOakland发布的当前已有的通过向导的方式形成了鲜明的
对比。现有的应用需要一些关于奥克兰的先验知识，而且它假定参
观者寻找的是特定地方的犯罪信息，Crimespotting项目的"滑动地
图”不需要先验知识或者特定的搜索议程表，相反地，它支持的是
更有探索性的、更曲折的搜索行为。PeterMorville描述的是一种新
位的方法以及借助接口和描述使得数据实现自我描述的方法。动态
的基于Web的地图在过去四年中经历了很多改变升级。在2005年，
一家报纸网站采用GMap做试验，发现被测人员不知道他们可以拖
动地图：现在像《NewYorkTimes》这样的组织会定期地把信息设
计和表现方式在线公示。有了犯罪数据库，我们觉得通过创造数据
优先的用户接口，使数据更具有“可寻性"是很重要的。数据首先意
味着通过大范围的可视化概要表示是可能的，并且通过类型、时间
或地理特征缩小了搜索结果范围。我们实现了“香型小工具"Sented
Widgets)，由加州大学伯克利分校的研究人员WesleyWillett、Jefrey
Heer和ManeeshAgrawala在2007年嵌入式可视化方面的论文
(htp:/vis.berkeley.edu/papers/scented_widgets/2007-ScentedWidgets-
InfoVis.pdf中提出：
1519
---
## Page 1521
akiland
图11-6：奥克兰Crimespoting项目的主页显示了从上周开始的犯罪
报告地图（见彩图32）
虽然有效的信息“气息"线索可能是基于底层的信息内容（如在Web
超链接的文本描述了链接文档的内容，这就是“气息”），其他线索
可能涉及各种形式的元数据，包括使用模式。在物理世界，我们通
常以浏览的方式对待其他人的活动。当发现一群人聚集在一起的时
候，我们可能走过去以便观察确定引起大家兴趣的根源到底是什
么。或者，我们可能故意避开人群或者陈腐的途径，选择“人迹罕
至”的方式来探索鲜为人知的兴趣点。在信息空间环境中，这种社
会性的浏览会把我们的注意力吸引到兴趣的热点或者尚未探索的区
域。
Crimespoting地图左下角的主接口的时间选择器界面显示了报告的
犯罪随着时间变化的条形图（见图11-7），虽然在右下层类型选择
器包含了谨慎的工具提示信息，显示当前选择时间范围的每种报告
类型的总数（见图11-8）。这两种选择器都包含双重功能：过滤和
反馈。特别是，时间选择器是受到博客统计包Measure
1520
---
## Page 1522
Map(http：//measuremap.com/）的一个类似功能启发，MeasureMap
是AdaptivePath公司的JeffreyVeen设计的，后来变成G公司的分析产
品。而反过来，Measure Map的时间滑动轴是受Flickr的界面特征所
启发的，因此，坦白说，这实际上是模仿。我们自己加强的是不同
条形栏的颜色区分，并显示已经包含的数据的日期（深色）和不包
含的数据的日期（浅色）。
5A
图11-7：Crimespotting的主地图上的时间选择器界面（见彩图33）
图11-8：类型选择器显示了在选定时间范围内的每种报告类型的
总数（见彩图34）
在图11-8中，有一个水平滑动轴显示所有东西，而它就是信息过
载。我们已经介绍了一种可视化报告类型过滤的方式，它是受到苹
果公司的MaxOSX系统偏好的聚光灯特征所启发：当在地图中存在
特定的犯罪报告，或者通过鼠标在类型选择器上多滞留几秒钟，界
面颜色就变深，使得地图中高亮显示的区域围绕匹配该类型的报
1521
---
## Page 1523
告。抢劫可能会由于不同的犯罪类型被覆盖，导致无法在地图上显
示，但是可以通过聚焦显示方式展现和访问它。
设计过程中的意外收获使我们更清楚地理解了数据专业化的哪些方
面可以成为应用界面产品。考虑到Flash在视觉特技方面相当成熟，
我们选择它作为实现环境，而且及时实现了我们自己必须实现的滑
动地图交互代码，而不是依赖于很多已有可选的JavaScript库，如
OpenLayers(http://www.openlayers.org)。
平移、缩放地图交互看起来是可以应用于其他项目的一个有用的功
能点，因此在犯罪数据显示的早期工作成果是生成了独立的通过
BSD授权的软件库ModestMaps(http：//www.modestmaps.com/）。
ModestMaps在数据显示和交互隐喻之间的功能有一个清晰的突
破，而且它把地图相关的代码库独立出来，这有助于很多不相关的
项目的敏捷开发，这些项目有一些源于Stamen，但是很多是来自于
外界的设计和开发。
第二优先级是为我们收集的数据生成一个公并、可共享的地址空
间。通常来说，在Crimespoting项目中只有一些URL"气息”：
地图视图http：//oakland.crimespotting.org，更大的视图在
http:/oakland.crimespotting.org/map。
报告列表视图，如
http:/oakland.crimespotting.org/crimes,http://oakland.crimespotting.or
g/crimes/Robbery,http://oakland.crimespotting.org/crimes/2009-01-09
和http://oakland.crimespotting.org/crimes/2009-01-09/Robbery。
·个人报告视图，如http：//oakland.crimespotting.org/crime/2009-01-
09/Robbery/113569。
巡警视图，如http：//oakland.crimespotting.org/beat/04X。
绝大多数URL是在把它和内容关联起来之前设计的。特别地，这些
URL需要和设计师MattBiddulph在2005年发表的演讲"DesigningData
ForReuse"(htp：//www.hackdiary.com/slides/xtech2005/）的思想
致：可读性、建设性、易于破解、不透明、永恒和经典。我们包含
地址的一个层次结构，它在大声朗读时富有韵律：“1月9日抢劫”，
“04X巡警"等。其中存在潜在的二义性一—例如时间在前"犯
是60-10-600//.4/60-10-600/
1522
---
## Page 1524
式的"/犯罪（cime）抢劫"和复数形式的"/多重犯罪（cimes）/抢劫”
我们把这些HTTP请求重定向到它们自己相应的表单。该重定向通
过确保一个人给出的某天的盗窃清单和另一个人给出的能够完全匹
配，这样URL就变得更具有共享性。通过个人给出的URL，其不足
之处在于它的地址结尾存在一个数值关键字。PostgreSQL开发人员
JoshBerkus非常憎恶这种关键字，在他的"PrimaryKeyvil"的系列文
章中对此做了详细的描述(htp：//it.toolbox.com/blogs/database-
soup/primary-keyvil-part-i-7327):
没有多久（大约两个月），我们就发现使用“id"作为唯一的不重复
字段存在严重问题。我们在日历安排上有很多的听证会，它们具有
相同的摘要、在同一天或者在同一个地方发生。这两个听证会是相
同的还是不同的？我们无法确定。问题的本质是自动id列不包含其