Sometimes, however, it is not possible or desirable to encapsulate the entire
functionality of a type. For example, the logic for a method in a class might
depend upon which component or application invokes this method, which
might need to perform some application or component-specific processing as
part of its operation. However, when you build such a class and implement its
methods, you might not know which applications and components are going
Download from finelybook PI:EMAIL
659
to use it, and you need to avoid introducing dependencies in your code that
might restrict the use of your class. Delegates provide the ideal solution,
making it possible for you to fully decouple the application logic in your
methods from the applications that invoke them.
Events in C# support a related scenario. Much of the code you have
written in the exercises in this book assumes that statements execute
sequentially. Although this is the most common case, you will find that it is
sometimes necessary to interrupt the current flow of execution to perform
another, more important task. When that task is complete, the program can
continue where it left off. The classic examples of this style of program are
the Universal Windows Platform (UWP) forms that you have been using in
the exercises involving graphical applications. A form displays controls such
as buttons and text boxes. When you click a button or type text in a text box,
you expect the form to respond immediately. The application has to
temporarily stop what it is doing and handle your input. This style of
operation applies not only to graphical user interfaces (GUIs) but also to any
application where an operation must be performed urgently—shutting down
the reactor in a nuclear power plant if it is getting too hot, for example. To
handle this kind of processing, the runtime has to provide two things: a
means of indicating that something urgent has happened, and a way of
specifying the code that should be run when the urgent event happens.
Events, in conjunction with delegates, provide the infrastructure with which
you can implement systems that follow this approach.
You’ll start by looking at delegates.
Understanding delegates
A delegate is a reference to a method. It is a very simple concept with
extraordinarily powerful implications. Let me explain.
Note Delegates are so named because they “delegate” processing to the
referenced method when they are invoked.
Download from finelybook PI:EMAIL
660
Typically, when you write a statement that invokes a method, you specify
the name of the method (and possibly specify the object or structure to which
the method belongs). It is clear from your code exactly which method you are
running and when you are running it. Look at the following simple example
that calls the performCalculation method of a Processor object (what this
method does or how the Processor class is defined is immaterial for this
discussion):
Click here to view code image
Processor p = new Processor();
p.performCalculation();
A delegate is an object that refers to a method. You can assign a reference
to a method to a delegate in much the same way that you can assign an int
value to an int variable. The next example creates a delegate named
performCalculationDelegate that references the performCalculation method
of the Processor object. I have deliberately omitted some elements of the
statement that declares the delegate because it is more important to
understand the concept rather than worry about the syntax (you will see the
full syntax shortly).
Click here to view code image
Processor p = new Processor();
delegate ... performCalculationDelegate ...;
performCalculationDelegate = p.performCalculation;
Keep in mind that the statement that assigns the method reference to the
delegate does not run the method at that point; there are no parentheses after
the method name, and you do not specify any parameters (if the method takes
them). This is just an assignment statement.
Having stored a reference to the performCalculation method of the
Processor object in the delegate, the application can subsequently invoke the
method through the delegate, like this:
performCalculationDelegate();
This looks like an ordinary method call; if you did not know otherwise, it
looks like you might actually be running a method named
performCalculationDelegate. However, the common language runtime
Download from finelybook PI:EMAIL
661
(CLR) knows that this is a delegate, so it retrieves the method that the
delegate references and runs that instead. Later on, you can change the
method to which a delegate refers, so a statement that calls a delegate might
actually run a different method each time it executes. Additionally, a delegate
can reference more than one method at a time (think of it as a collection of
method references), and when you invoke a delegate, all the methods to
which it refers will run.
Note If you are familiar with C++, a delegate is similar to a function
pointer. However, unlike function pointers, delegates are completely
type safe. You can make a delegate refer only to a method that matches
the signature of the delegate, and you cannot invoke a delegate that does
not refer to a valid method.
Examples of delegates in the .NET Framework class
library
The Microsoft .NET Framework class library makes extensive use of
delegates for many of its types, two examples of which are in Chapter 18,
“Using collections”: the Find method and the Exists method of the List
class. If you recall, these methods search through a List collection, either
returning a matching item or testing for the existence of a matching item.
When the designers of the List class were implementing it, they had
absolutely no idea about what should actually constitute a match in your
application code, so they let you define that by providing your own code in
the form of a predicate. A predicate is really just a delegate that happens to
return a Boolean value.
The following code should help to remind you how to use the Find
method:
Click here to view code image
struct Person
{
Download from finelybook PI:EMAIL
662
    public int ID { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}
...
List personnel = new List()
{
    new Person() { ID = 1, Name = "John", Age = 53 },
    new Person() { ID = 2, Name = "Sid", Age = 28 },
    new Person() { ID = 3, Name = "Fred", Age = 34 },
    new Person() { ID = 4, Name = "Paul", Age = 22 }
};
...
// Find the member of the list that has an ID of 3
Person match = personnel.Find(p => p.ID == 3);
Other examples of methods exposed by the List class that use
delegates to perform their operations are Average, Max, Min, Count, and
Sum. These methods take a Func delegate as the parameter. A Func delegate
refers to a method that returns a value (a function). In the following
examples, the Average method is used to calculate the average age of items in
the personnel collection (the Func delegate simply returns the value in
the Age field of each item in the collection), the Max method is used to
determine the item with the highest ID, and the Count method calculates how
many items have an Age between 30 and 39 inclusive.
Click here to view code image
double averageAge = personnel.Average(p => p.Age);
Console.WriteLine($"Average age is ");
...
int id = personnel.Max(p => p.ID);
Console.WriteLine($"Person with highest ID is ");
...
int thirties = personnel.Count(p => p.Age >= 30 && p.Age  and Action delegate types
The parameter taken by the Average, Max, Count, and other methods of
the List class is actually a generic Func delegate; the
type parameters refer to the type of the parameter passed to the delegate
and the type of the return value. For the Average, Max, and Count
methods of the List class shown in the text, the first type
parameter T is the type of data in the list (the Person struct), whereas
the TResult type parameter is determined by the context in which the
delegate is used. In the following example, the type of TResult is int
because the value returned by the Count method should be an integer:
Click here to view code image
int thirties = personnel.Count(p => p.Age >= 30 && p.Age .
This point might seem somewhat academic because the compiler
automatically generates the delegate based on the type of the List,
but it is worth familiarizing yourself with this idiom as it occurs time
and again throughout the .NET Framework class library. In fact, the
System namespace defines an entire family of Func delegate types, from
Func for functions that return a result without taking any
parameters to Func for functions that
take 16 parameters. If you find yourself in a situation in which you are
creating your own delegate type that matches this pattern, you should
consider using an appropriate Func delegate type instead. You will meet
the Func delegate types again in Chapter 21, “Querying in-memory data
by using query expressions.”
Alongside Func, the System namespace also defines a series of
Action delegate types. An Action delegate is used to reference a method
that performs an action instead of returning a value (a void method).
Again, a family of Action delegate types is available ranging from
Download from finelybook PI:EMAIL
664
Action (specifying a delegate that takes a single parameter) to
Action.
The automated factory scenario
Suppose you are writing the control systems for an automated factory. The
factory contains a large number of different machines, each performing
distinct tasks in the production of the articles manufactured by the factory—
shaping and folding metal sheets, welding sheets together, painting sheets,
and so on. Each machine was built and installed by a specialist vendor. The
machines are all controlled by a computer, and each vendor has provided a
set of functions that you can use to control its machine. Your task is to
integrate the different systems used by the machines into a single control
program. One aspect on which you have decided to concentrate is to provide
a means of shutting down all the machines—quickly, if needed!
Each machine has its own unique computer-controlled process (and
functions) for shutting down safely, as summarized here:
Click here to view code image
StopFolding(); // Folding and shaping machine
FinishWelding(); // Welding machine
PaintOff(); // Painting machine
Implementing the factory control system without using
delegates
A simple approach to implementing the shutdown functionality in the control
program is as follows:
Click here to view code image
class Controller
{
    // Fields representing the different machines
    private FoldingMachine folder;
    private WeldingMachine welder;
    private PaintingMachine painter;
    ...
    public void ShutDown()
Download from finelybook PI:EMAIL
665
    {
        folder.StopFolding();
        welder.FinishWelding();
        painter.PaintOff();
    }
    ...
}
Although this approach works, it is not very extensible or flexible. If the
factory buys a new machine, you must modify this code; the Controller class
and code for managing the machines is tightly coupled.
Implementing the factory by using a delegate
Although the names of each method are different, they all have the same
“shape”: they take no parameters, and they do not return a value. (You’ll
consider what happens if this isn’t the case later, so bear with me.) The
general format of each method, therefore, is this:
void methodName();
This is where a delegate can be useful. You can use a delegate that
matches this shape to refer to any of the machinery shutdown methods. You
declare a delegate like this:
Click here to view code image
delegate void stopMachineryDelegate();
Note the following points:
You use the delegate keyword.
You specify the return type (void in this example), a name for the
delegate  (stopMachineryDelegate), and any parameters (there are none
in this case).
After you have declared the delegate, you can create an instance and make
it refer to a matching method by using the += compound assignment operator.
You can do this in the constructor of the controller class like this:
Click here to view code image
class Controller
{
    delegate void stopMachineryDelegate(); // the delegate type
Download from finelybook PI:EMAIL
666
    private stopMachineryDelegate stopMachinery; // an instance of
the delegate
    ...
    public Controller()
    {
        this.stopMachinery += folder.StopFolding;
    }
    ...
}
It takes a bit of study to get used to this syntax. You add the method to the
delegate—remember that you are not actually calling the method at this point.
The + operator is overloaded to have this new meaning when used with
delegates. (You will learn more about operator overloading in Chapter 22,
“Operator overloading.”) Notice that you simply specify the method name
and do not include any parentheses or parameters.
It is safe to use the += operator on an uninitialized delegate. It will be
initialized automatically. Alternatively, you can use the new keyword to
initialize a delegate explicitly with a single specific method, like this:
Click here to view code image
this.stopMachinery = new stopMachineryDelegate(folder.StopFolding);
You can call the method by invoking the delegate, like this:
Click here to view code image
public void ShutDown()
{
    this.stopMachinery();
    ...
}
You use the same syntax to invoke a delegate as you use to call a method.
If the method that the delegate refers to takes any parameters, you should
specify them at this time between the parentheses.
Note If you attempt to invoke a delegate that is uninitialized and does
not refer to any methods, you will get a NullReferenceException
exception.
Download from finelybook PI:EMAIL
667
An important advantage of using a delegate is that it can refer to more
than one method at the same time. You simply use the += operator to add
methods to the delegate, like this:
Click here to view code image
public Controller()
{
    this.stopMachinery += folder.StopFolding;
    this.stopMachinery += welder.FinishWelding;
    this.stopMachinery += painter.PaintOff;
}
Invoking this.stopMachinery() in the Shutdown method of the Controller
class automatically calls each of the methods in turn. The Shutdown method
does not need to know how many machines there are or what the method
names are.
You can remove a method from a delegate by using the –= compound
assignment operator, as demonstrated here:
Click here to view code image
this.stopMachinery -= folder.StopFolding;
The current scheme adds the machine methods to the delegate in the
Controller constructor. To make the Controller class totally independent of
the various machines, you need to make the stopMachineryDelegate type
public and supply a means of enabling classes outside Controller to add
methods to the delegate. You have several options:
Make the stopMachinery delegate variable public:
Click here to view code image
public stopMachineryDelegate stopMachinery;
Keep the stopMachinery delegate variable private, but create a
read/write property to provide access to it:
Click here to view code image
private stopMachineryDelegate stopMachinery;
...
public stopMachineryDelegate StopMachinery
{
    get => this.stopMachinery;
Download from finelybook PI:EMAIL
668
    set => this.stopMachinery = value;
}
Provide complete encapsulation by implementing separate Add and
Remove methods. The Add method takes a method as a parameter and
adds it to the delegate, whereas the Remove method removes the
specified method from the delegate (notice that you specify a method
as a parameter by using a delegate type):
Click here to view code image
public void Add(stopMachineryDelegate stopMethod) =>
this.stopMachinery += stopMethod;
public void Remove(stopMachineryDelegate stopMethod) =>
this.stopMachinery -= stopMethod;
An object-oriented purist would probably opt for the Add/Remove
approach. However, the other approaches are viable alternatives that are
frequently used, which is why they are shown here.
Whichever technique you choose, you should remove the code that adds
the machine methods to the delegate from the Controller constructor. You
can then instantiate a Controller and objects representing the other machines
like this (this example uses the Add/Remove approach):
Click here to view code image
Controller control = new Controller();
FoldingMachine folder = new FoldingMachine();
WeldingMachine welder = new WeldingMachine();
PaintingMachine painter = new PaintingMachine();
...
control.Add(folder.StopFolding);
control.Add(welder.FinishWelding);
control.Add(painter.PaintOff);
...
control.ShutDown();
...
Declaring and using delegates
In the following exercises, you will complete an application that forms part of
a system for a company called Wide World Importers. Wide World Importers
imports and sells building materials and tools, and the application that you
will be working on gives customers the ability to browse the items that Wide
Download from finelybook PI:EMAIL
669
World Importers currently has in stock and place orders for these items. The
application contains a form that displays the goods currently available,
together with a pane that lists the items that a customer has selected. When
the customer wants to place an order, she can click the Checkout button on
the form. The order is then processed, and the pane is cleared.
Currently, when the customer places an order, several actions occur:
Payment is requested from the customer.
The items in the order are examined, and if any of them are age
restricted (such as the power tools), details of the order are audited and
tracked.
A dispatch note is generated for shipping purposes. This dispatch note
contains a summary of the order.
The logic for the auditing and shipping processes is independent of the
checkout logic, although the order in which these processes occur is
immaterial. Furthermore, either of these elements might be amended in the
future, and additional processing might be required by the checkout operation
as business circumstances or regulatory requirements change in the future.
Therefore, it is desirable to decouple the payment and checkout logic from
the auditing and shipping processes to make maintenance and upgrades
easier. You will start by examining the application to see how it currently
fails to fulfill this objective. You will then modify the structure of the
application to remove the dependencies between the checkout logic and the
auditing and shipping logic.
Examine the Wide World Importers application
1. Start Microsoft Visual Studio 2017 if it is not already running.
2. Open the Delegates solution, which is located in the \Microsoft
Press\VCSBS\Chapter 20\ Delegates folder in your Documents folder.
3. On the Debug menu, click Start Debugging.
The project builds and runs. A form appears displaying the items
available, together with a panel showing the details of the order (it is
empty initially). The app displays the items in a GridView control that
scrolls horizontally.
Download from finelybook PI:EMAIL
670
4. Select one or more items and then click Add to include them in the
shopping basket. Be sure that you select at least one age-restricted item.
As you add an item, it appears in the Order Details pane on the right.
Notice that if you add the same item more than once, the quantity is
incremented for each click. (This version of the application does not
implement functionality to remove items from the basket.) Note that the
currency used by the application depends on your locale; I am based in
the UK so values are displayed in the image below are in Sterling.
However, if you are in the United States, you will see values in Dollars.
5. In the Order Details pane, click Checkout.
A message appears indicating that the order has been placed. The order
is given a unique ID, and this ID is displayed together with the value of
the order.
Download from finelybook PI:EMAIL
671
6. Click Close to dismiss the message, and then return to the Visual Studio
2017 environment and stop debugging.
7. In Solution Explorer, expand the Delegates project node, and then open
the Package.appxmanifest file.
The package manifest editor appears.
8. In the package manifest editor, click the Packaging tab.
Note the value in the Package Name field. It takes the form of a globally
unique identifier (GUID).
9. Using File Explorer, browse to
%USERPROFILE%\AppData\Local\Packages\yyy\LocalState, where
yyy is an identifier value that begins with the GUID you noted in the
previous step. This is the local folder for the Wide World Importers
application. You should see two files, one named audit-nnnnnn.xml
(where nnnnnn is the ID of the order displayed earlier), and the other
dispatch-nnnnnn.txt. The first file was generated by the auditing
component of the app, and the second file is the dispatch note generated
by the shipping component.
Note If there is no audit-nnnnnn.xml file, then you did not select