3 Motivating Example
Modern control programs are robust systems that operate
while addressing and minimizing the impact of not only vari-
ous physical non-deterministic factors (e.g., inertia and noise)
but also control anomaly and security attacks [38, 48, 62].
However, we have found that such robustness is not enough
to tackle all safety and security issues. Speciﬁcally, combined
impacts of (i) operational inputs (e.g., mission, parameter
changes) with (ii) particular altered physical conditions may
go beyond the protection capability of a control system, which
is an implication of a control-semantic bug. As a result, such
impact starts to appear in a control variable of an exploited
controller and will be propagated to its dependent controllers
and can be signiﬁed over the multiple control loop iterations.
To illustrate this, we introduce the following intuitive moti-
vating accident case (more cases are discussed in Section 8)
only with high-level control logs recorded by a built-in ﬂight
recorder.
In this example, we assume that our target RAV loads an
item to deliver (as performed by real RAVs [8, 9, 11]) and
ﬂies to the north east with 60 cm/s (only in east, 30 cm/s) as
described in Figure 3. At Iteration 4,850, the RAV operator
increases Parameter P of x-axis velocity controller to make
up for the weight gain. In the next 80 iterations of the control
loop, the RAV continues to operate normally (i.e., the x-axis
controller maintains a stable state). At a scheduled turn (i.e.,
ﬂying east in Figure 3), the RAV is supposed to drastically
decrease its x-axis velocity and to exhibit a behavior similar
to that of the velocity and acceleration references depicted in
Fig. 4a and Fig. 4b, respectively. However, at the junction, the
changed parameter P unexpectedly leads to a corrupt state;
the x-axis velocity started showing digression (Fig. 4c) and
generating a corrupt x-axis acceleration reference. Conse-
quently, the RAV completely failed to stabilize, ultimately
resulting in a crash due to intensiﬁed digression over the mul-
tiple control loop iterations. We note that our example case is
realistic because this accident can be triggered via a remote
operational interface (e.g., MAVLink [13]).
Unfortunately, to answer “why did my drone crash” in this
case, the existing ﬂight status logging is not sufﬁcient for root
cause analysis. Unlike control-level investigation based on
built-in ﬂight control data logging, there is no evidence avail-
able for program-level investigation. While investigators may
be able to identify a malicious command by cross-checking
the command logs recorded by the GCS and by the on-board
logging function, such a method cannot investigate (1) acci-
dents caused by malicious or vulnerable commands that are
indeed issued from the GCS (e.g., by an insider threat) or (2)
accidents not triggered by external commands (e.g., divide-by-
zero). Most importantly, such a method cannot pinpoint the
root cause of the accident. In other words, observing the RAV
controller anomaly does not reveal what is wrong inside the
control program. We need to bridge the semantic gap between
the safety/security impacts in the control (physical) domain
and the root causes in the program (cyber) domain.
4 MAYDAY Framework
MAYDAY spans different phases of an RAV’s life cycle,
shown in Fig. 5. In the ofﬂine phase, MAYDAY deﬁnes a
formal description of the RAV control model, and uses it to
enable CVDG-guided program-level logging during the con-
trol program execution via automatic instrumentation (Sec-
tion 5). Then the RAV goes back into service with the instru-
mented control program, which will generate both control-
and program-level logs during ﬂights. In the case of an ac-
cident or attack, MAYDAY retrieves the logs and performs a
two-stage forensic analysis, including control- and program-
level investigations (Section 6). The investigations will lead
to the localization of the control-semantic bug in the control
program – the root cause of the crash.
5 Control-Guided Control Program Analysis
and Instrumentation
This ofﬂine phase of MAYDAY formalizes a generic RAV
control model using a Control Variable Dependency Graph
(CVDG) (Section 5.1), which will guide the analysis (Section
5.2) and instrumentation (Section 5.3) of the control program,
in preparation for the runtime program execution logging and
the post-accident investigation (Section 6).
916    29th USENIX Security Symposium
USENIX Association
: Flight Waypoint: PlannedFlight Trajectory: Actual Flight Trajectory123N2040608048004900500051005200Velocity (cm/s) Control Loop Iterationሶ𝑟𝑥(𝑡)ሶ𝑥𝑥(𝑡)Control Loop Iteration-100102048004900500051005200ሷ𝑟𝑥(𝑡)ሷ𝑥𝑥(𝑡)Accel. (cm/s2) 2040608048004900500051005200ሶ𝑟𝑥(𝑡)ሶ𝑥𝑥(𝑡)Control Loop IterationUnstableVelocity (cm/s) BuggyCMD-20-100102048004900500051005200Control Loop Iterationሷ𝑟𝑥(𝑡)ሷ𝑥𝑥(𝑡)Accel. (cm/s2) Figure 5: MAYDAY Framework.
parent-child relation. Within a 6DoF cascading controller,
the state of a child controller (e.g., x-axis acceleration) is
the derivative of its parent controller (e.g., x-axis velocity).
The relation between 6DoF controllers is more complicated.
For example, the roll angle (φ) controller has three parent
controllers (i.e., yaw (ψ), x, and y acceleration controllers).
Mathematically, the input of the roll angle controller is de-
termined by the outputs of its three parent controllers as:
φ = atan((− ¨xsin(ψ) + ¨ycos(ψ))/g) (Fig. 6, g is the standard
gravity).
5.2 Mapping CVDG to Control Program
Mapping CVDG Nodes to Program Variables We now
establish a concrete mapping between the CVDG and the
control program that implements it. First, we map the CVDG
nodes (control variables) to the corresponding control pro-
gram variables, which are either global or heap-allocated. For
most CVDG control variables, the control program’s existing
logging functions directly access and log the corresponding
program variables. For certain CVDG variables, we need to
look deeper. For example, the x-, y-, and z-axis velocity states
are retrieved via function calls. To handle such cases, we
perform backtracking on LLVM bitcodes (i.e., the interme-
diate representation (IR) of the Low Level Virtual Machine
(LLVM)): Starting from the logged (local) variable in a log-
ging function, we backtrack to variables whose values are
passed (without processing) to the logged variable. Among
those, we select the ﬁrst non-local variable (e.g., a class mem-
ber variable) as the corresponding program variable.
Mapping CVDG Edges to Program Code Next MAYDAY
analyzes the control program to map each CVDG edge to
the portion of control program codes that implement the data
ﬂow between the two nodes (variables) on the edge. For each
edge, MAYDAY conservatively identiﬁes all possible program
paths that induce data ﬂows between the source node and sink
node.
Our analysis is performed by Algorithm 1 at LLVM bitcode
level. It is inter-procedural and considers pointer aliases of
the control variables as well as other intermediate variables
for completeness. It ﬁrst performs a path-insensitive and ﬂow-
sensitive points-to analysis [72] to identify all aliases of the
control variables (Line 2-3). For each alias identiﬁed, the algo-
Figure 6: Control Variable Dependency Graph (CVDG).
5.1 Control Variable Dependency Graph
MAYDAY is guided by the RAV’s control model, with depen-
dencies among controllers and control variables. To capture
such dependencies, we deﬁne the Control Variable Depen-
dency Graph (CVDG). Fig. 6 shows a generic CVDG that
applies to a wide range of RAVs, such as rigid-body trirotors,
quadrotors, and hexarotors. The CVDG captures generic de-
pendencies among the 6DoF controllers without assuming
any speciﬁc control algorithm. Inside each controller, there is
a cascade of three primitive controllers that control the posi-
tion, velocity, and acceleration for that DoF, respectively. Each
node in the CVDG represents a control variable or a controller
input. Each control variable represents a vehicle state (e.g., xx,
˙xx, or ¨xx), reference (e.g., rx, ˙rx, or ¨rx), or control parameters
(e.g., kx, ˙kx or ¨kx). The controller accepts three types of input
S, M, and P: S represents inputs from various sensors, which
will become vehicle state after pre-processing (e.g., ﬁltering);
M and P represent mission plan and control parameter inputs,
respectively. Each directed edge in the CVDG indicates a
dependency between its two nodes. For example, the edge
from ˙rx to ¨rx in the x-axis controller indicates that ¨rx depends
on ˙rx.
Inter-Controller Relation We also deﬁne the “parent-
child” relation between two controllers with edge(s) between
them. More speciﬁcally, if primitive controller C’s refer-
ence is the output of controller C(cid:48), then C(cid:48) and C have a
USENIX Association
29th USENIX Security Symposium    917
Control Program(Source Code)ProgramInstrumentation(Section 5.3)ProgramAnalysis(Section 5.2)Accident or AttackLogOffline Analysis & InstrumentationIn-FlightLoggingPost-Accident InvestigationProgram-levelInvestigation(Section 6.2)Control-levelInvestigation(Section 6.1)CVDG(Section 5.1)Resultx 4X-axis Cascading ControllerY-axis Cascading ControllerZ-axis Cascading ControllerPitch Cascading ControllerRoll Cascading ControllerMotor ControllerYaw Cascading ControllerPSM: Sensor Input: Mission Input: Parameter InputANGLEController𝑥𝜓ሶ𝑥𝜓ሷ𝑥𝜓𝑟𝜓ሶ𝑟𝜓ሷ𝑟𝜓𝑘𝜓ሶ𝑘𝜓ሷ𝑘𝜓VELControllerACCELControllerPSMሶ𝑥𝑥ሷ𝑥𝑥ሶ𝑟𝑥ሷ𝑟𝑥POSController𝑥𝑥𝑟𝑥𝑘𝑥ሶ𝑘𝑥ሷ𝑘𝑥VELControllerACCELControllerPSMሶ𝑥𝑦ሷ𝑥𝑦ሶ𝑟𝑦ሷ𝑟𝑦POSController𝑥𝑦𝑟𝑦𝑘𝑦ሶ𝑘𝑦ሷ𝑘𝑦VELControllerACCELControllerPSMANGLEController𝑥𝜑𝑟𝜑𝑘𝜑ሶ𝑥𝜑ሶ𝑟𝜑ሶ𝑘𝜑VEL Controllerሷ𝑥𝜑ሷ𝑟𝜑ሷ𝑘𝜑ACCELControllerPSMANGLEController𝑥𝜃𝑟𝜃𝑘𝜃ሶ𝑥𝜃ሶ𝑟𝜃ሶ𝑘𝜃VELControllerሷ𝑥𝜃ሷ𝑟𝜃ሷ𝑘𝜃ACCELControllerPSMPOSController𝑥𝑧ሶ𝑥𝑧ሷ𝑥𝑧𝑟𝑧ሶ𝑟𝑧ሷ𝑟𝑧𝑘𝑧ሶ𝑘𝑧ሷ𝑘𝑧VELControllerACCELControllerPSM𝜑=𝑎𝑡𝑎𝑛−ሷ𝑥𝑠𝑖𝑛𝜓+ሷ𝑦𝑐𝑜𝑠𝜓𝑔𝜃=−𝑎𝑡𝑎𝑛ሷ𝑥𝑐𝑜𝑠𝜓+ሷ𝑦𝑠𝑖𝑛𝜓𝑔SSensor Inputfor the next epochAlgorithm 1 Mapping CVDG edges to program code.
Input: Control variable set in the CVDG (CV )
Output: Mapping control variables to backward sliced instructions (M)
1: Initialize M
2: for cvi ∈ CV do
3:
4:
5:
6:
7:
(cid:46) Our algorithm entry point
(cid:46) Backward slicing for each CV
PV ← POINTS-TOANALYSIS(cvi)
S ← BACKWARDSLICINGVARSET(PV ) (cid:46) Backward slicing for aliases of cvi
N ← GETAFFECTINGNODES(S)
(cid:46) Get CVDG nodes connected to cvi
for ni ∈ N do
(cid:46) Get a CVDG edge connecting between cvi and
another CVDG node
e ← GETEDGE(cvi,ni)
M[e] ← GETINSTSFOREDGE(e,S)
(cid:46) Mapping instructions to each edge
return S
(cid:46) Perform recursive slicing on new variables
(cid:46) Backward slicing set for the given variable set
(cid:46) Add new slicing results for each vi
(cid:46) Get newly found variables
(cid:46) Recursive slicing
(cid:46) Add new slicing results for each v(cid:48)
i
V ← SV
S ← /0
for vi ∈ SV do
S(cid:48) ← BACKWARDSLICINGONEVAR(vi)
S ← S∪ S(cid:48)
V (cid:48) ← GETAFFECTINGVARS(S(cid:48))−V
V ← V ∪V (cid:48)
i ∈ V (cid:48) do
for v(cid:48)
PV ← POINTS-TOANALYSIS(v(cid:48)
i)
S(cid:48)(cid:48) ← BACKWARDSLICINGVARSET(PV )
V ← V ∪ GETAFFECTINGVARS(S(cid:48)(cid:48))
S ← S∪ S(cid:48)(cid:48)
8:
9: return M
10: function BACKWARDSLICINGVARSET(SV ) (cid:46) This function is called recursively
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
rithm performs backward slicing [44] to identify the program
code that may inﬂuence the value of the control variable (Line
4, 10-23). As a result, each slice contains all the instructions
that directly read or write the control variable and those that
indirectly affect its value through some intermediate variables.
Since the intermediate variables may have aliases not covered
in the previous steps, Algorithm 1 recursively performs both
points-to analysis and backward slicing on those variables to
identify additional instructions that may affect the value of the
control variable (Line 16-22). As new intermediate variables
may be found in the identiﬁed slices during a recursion, this
process will continue until no more affecting variable or alias
exists.
In the ﬁnal step, Algorithm 1 goes through the identiﬁed
program code paths for each CVDG edge and reports only
those that begin and end – respectively – with the source and
sink variables on the CVDG edge (Line 5-8).
5.3 Control Program Instrumentation
With the mapping from control model to program (CVDG
nodes → variables; edges → code), MAYDAY now instru-
ments the control program for logging the execution of the
CVDG-mapped portion of the program, which bridges the se-
mantic gap between control-level incidents and program-level
root cause analysis. To achieve this, MAYDAY instruments
LLVM bitcodes by inserting program-level logging functions
at entries of basic blocks selected from the CVDG-mapped
portion of the control program, and adds control loop iteration
number into a logging function.
Efﬁcient Logging of Program Execution A key require-
ment of control program execution logging is high (time and
space) efﬁciency. MAYDAY meets this requirement via two
methods. The ﬁrst method is selective basic block logging.
MAYDAY only instruments the basic blocks of the CVDG-
mapped program code. For example, in ArduPilot, the CVDG-
mapped basic blocks are about 40.08% of all basic blocks. The
second method is execution path encoding, which involves
inserting logging functions at proper locations to record en-
coded program execution paths. We adopt Ball-Larus (BL) al-
gorithm [24] – an efﬁcient execution path proﬁling technique
with path encoding. Under BL algorithm, each execution path
is associated with a path ID, which efﬁciently represents its
multiple basic blocks in the order of their execution.
Temporal Log Alignment To temporally align the control
log and the added program execution log, MAYDAY generates
control loop iteration numbers (plus timestamps) at runtime
and tags them to both control and program execution logs.
Such alignment enables temporal navigation of log analysis
during a post-accident investigation.
6 Post-Accident Investigation
After control-guided program analysis and instrumentation,
the subject RAV will be back in service and start generating
both control- and program-level logs during its missions. In
the case of an accident, the logs will be recovered and ana-
lyzed by MAYDAY in a two-stage investigation to reveal the
accident’s root cause.
6.1 Control-Level Investigation
The control-level investigation has two main steps: (1) iden-
tify which controller, among all the primitive controllers in
the CVDG, was the ﬁrst to go wrong during the accident (Sec-
tion 6.1.1); (2) infer the possible sequence of control variable
corruption, represented as a corruption path in the CVDG,
that led to that controller’s malfunction.
6.1.1
Initial Digressing Controller Identiﬁcation
During an RAV accident, multiple controllers in the CVDG
may go awry, which leads to the operation anomaly of the ve-
hicle. However, because of the inter-dependency of controllers
(deﬁned in the CVDG), there must exist one controller that
is initially malfunctioning, whereas the others are causally
affected and go awry later following the inter-dependency
and control feedback loop. To uncover the root cause of the
accident, it is necessary to identify the ﬁrst malfunctioning
controller, as well as the time when the malfunction started.
More formally, the malfunction of a controller manifests it-
self in two perceivable ways [51]: (1) non-transient digression
between the control state and reference and (2) non-transient
digression between the control reference and mission input.
(1) means that the real state of the vehicle cannot “track” (i.e.,
converge to) the reference (i.e., desired state) generated by
the controller; whereas (2) means that the reference cannot
approach the target state set for the ﬂight mission. As such, we
918    29th USENIX Security Symposium
USENIX Association
call the ﬁrst controller that exhibited (1) or (2) the initial di-
gressing controller; and we call the time when the digression
started the initial digressing time.
To identify the initial digressing controller and time,
MAYDAY examines the control log. Similar to [51], a slid-
ing window-based digression check is performed on each
primitive controller (1) between state and reference and (2)
between reference and mission input. Unlike the previous
work, MAYDAY uses the Integral Absolute Error (IAE) for-
mula [37] in a distinct way to identify the initial digression in
a reverse temporal order (details are discussed in Appendix B).
By performing the digression check with the sliding window
from the crash point backward, we identify the ﬁrst digression
window (hence time) of that controller, from which the digres-
sion persists toward the end of the log. The controller with
the earliest ﬁrst-digression window is the initial digressing
controller.
6.1.2 CVDG-Level Corruption Path Inference
Given the initial digressing controller and the pair of digress-
ing variables (i.e., “state and reference” or “reference and
mission input”), MAYDAY will infer the sequence of opera-
tions on relevant control variables that had caused the initial
digression. Such inference is guided by the CVDG model and