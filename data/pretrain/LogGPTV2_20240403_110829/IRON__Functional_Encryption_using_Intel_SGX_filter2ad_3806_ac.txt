ranging from a widely-used and practical construction (IBE from
pairings) to impractical ones (ORE and 3DNF from multilinear
maps). Our evaluation confirms that the SGX-based functional en-
cryption examples we implemented are orders of magnitude faster
than cryptographic solutions without secure hardware, even for
IBE which is already widely used in practice. We recognize that
more complex functionalities than the ones we have implemented,
particularly functions that operate on data outside the EPC, may re-
quire additional side-channel mitigation techniques such as ORAM,
which will impact performance. However, we would still expect
these to outperform traditional functional encryption by orders of
magnitude.
Side-channel resilience. The function and decryption enclave
programs must be implemented to resist the software based side-
channel attacks on SGX described in Section 2. The only enclave
operations that touch secret data are decryption operations (AES-
GCM and ElGamal) and the specific client functions that are loaded
into the function enclave. Our implementation of AES-GCM uses
the SGX SDK cryptographic library, which calls the AES-NI in-
struction for AES-GCM, and hence is resilient to software-based
side-channels. Our implementation of ElGamal decryption uses the
MSR Elliptic Curve Cryptography Library 2.0, which also claims
2Authenticating the DE‚Äôs message to the function enclave serves the same purpose as
authenticating the KME‚Äôs message to the DE in the formal proof of security.
3https://software.intel.com/sites/default/files/managed/b4/cf/Intel-SGX-SDK-
Developer-Reference-for-Windows-OS.pdf
4https://www.microsoft.com/en-us/research/project/msr-elliptic-curve-
cryptography-library
Performance evaluation. We report on the performance of FE.Decrypt,
FE.Setup, and FE.Keygen (Figures 2 and 3). FE.Encrypt in our sys-
tem is standard public key encryption (our implementation uses
ElGamal), and this is done outside of SGX enclaves.5
Figure 2 contains a break down of the run time for FE.Setup and
FE.Keygen.
create enclave
ECDSA setup
ElGamal setup
server setup
sign message
Total
57 ms
74 ms
8 ms
2 ms
11 ms
141 ms
Figure 2: FE.Setup and FE.Keygen run time, including enclave creation and
generation of public/secret keys for ECDSA and ElGamal on 256 bit EC curves.
FE.Keygen corresponds to sign message, which generates an ECDSA signa-
ture on a 256-bit input.
We evaluated the performance of FE.Decrypt for three special
cases of function encryption: identity based encryption (IBE), order
revealing encryption (ORE), and three input DNF (3DNF). We chose
these functionalities primarily to demonstrate how our SGX assisted
versions of these primitives perform in comparison to their purely
cryptographic versions (IBE from pairings, DNF and 3DNF from
multilinear maps). The table in Figure 3 summarizes the decryption
times for the three functionalities, including a breakdown of the
time spent on the three main ECALLS of the decryption process:
enclave creation, local attesting to the DE, and finally decrypting
the ciphertext and evaluating the function.
Functionality:
create enclave
local attest
decrypt & eval
Total
IBE
14.5 ms
1.6 ms
0.98 ms
17.8 ms
ORE
20.7 ms
2.1 ms
0.84 ms
23.78 ms
3DNF
19.7 ms
2.1 ms
0.96 ms
22.76 ms
Figure 3: Breakdown of FE.Decrypt run times for each of our SGX-FE im-
plementations of IBE, ORE, and 3DNF. The input in IBE consisted of a 3-byte
tag and a 32-bit integer payload. The input pairs in ORE were 32-bit integers,
and the input triplets in 3DNF were 16-bit binary strings. (The input types
were chosen for consistency with the 5Gen experiments). The column decrypt
gives the cost of running a single decryption.
5Note that all the procedures we evaluate are entirely local, which is why we do not
include any network performance metrics. We omit performance measures on decryp-
tion node setup since the setup procedure requires contacting the Intel Attestation
Server to process a remote attestation, which we were unable to test without a license
from Intel. Nonetheless, the setup is a one-time operation that is completed when
a decryption node platform is first established, and thus has little overall impact on
decryption performance.
Session D1:  Functional Encryption and ObfuscationCCS‚Äô17, October 30-November 3, 2017, Dallas, TX, USA770|msg|:
|c|:
decrypt:
decrypt‚àó:
IBESGX
35 bits
175 bytes
17.8 ms
0.39 ms
IBE[BF01]
35 bits
471 bytes
49 ms
49 ms
√ó increase
NA
2.69
2.75
125.64
ORESGX
32 bits
172 bytes
23.78 ms
0.32 ms
ORE5Gen
32 bits
4.7 GB
4 m
4 m
√ó increase
NA
27.3 ¬∑ 106
10.1 ¬∑ 103
750 ¬∑ 103
3DNFSGX
16 bits
170 bytes
22.76 ms
0.45 ms
3DNG5Gen
16 bits
2.5 GB
3 m
3 m
√ó increase
NA
14.7 ¬∑ 106
7.9 ¬∑ 103
400 ¬∑ 103
Figure 4: Comparison of decryption times and ciphertext sizes for the SGX-FE implementation of IBE, ORE, 3DNF to cryptographic implementations. The 5Gen
ORE and 3DNF implementation referenced here uses the CLT mmap with an 80-bit security parameter. The column decrypt gives the cost of running a single
decryption, and decrypt‚àó gives the amortized cost (per ciphertext tuple) of 103 decryptions.
Amortized decryption costs. As shown in Figure 3, for each of the
functionalities the time spent creating the enclave dominates the
time spent on decryption and evaluation by 2 orders of magnitude.
Once the function enclave has been created and local attestation to
the DE is complete, the same enclave can be used to decrypt an arbi-
trary number of input ciphertext tuples. Thus, the amortized cost of
running decryption on many ciphertexts (or tuples of ciphertexts)
is much lower than the cost of running decryption on a single input.
(This is not the case with cryptographic implementations of these
functionalities). The amortized cost of running decryption on 1000
inputs (ciphertext tuples) is included in the next table, Figure 4.
5 FORMAL MODELS AND DEFINITIONS
5.1 Formal HW model
We describe a black-box program HW that captures the secure
hardware‚Äôs functionality and its interface exposed to the user.
Definition 5.1. The functionality HW for a class of (probabilistic
polynomial time) programs ùí¨ consists of HW.Setup, HW.Load,
HW.Run, HW.Run&Report, HW.Run&Quote, HW.ReportVerify,
HW.QuoteVerify. HW has an internal state state that consists of
two variables HW.skquote and HW.skreport and a table T consisting
of enclave state tuples indexed by enclave handles.
‚Ä¢ HW.Setup(1Œª ): This takes in a security parameter Œª and gener-
ates the secret keys skquote, skreport, and stores these in HW.skquote,
HW.skreport respectively. Finally, it generates and outputs public
parameters params.
‚Ä¢ HW.Load(params, Q ): This loads a stateful program into an en-
clave. HW.Load takes as input a program Q ‚àà ùí¨ and some global
parameters params. It first creates an enclave and loads Q and
generates a handle hdl that will be used to identify the enclave
running Q. It initializes the entry T [hdl] = ‚àÖ.
‚Ä¢ HW.Run(hdl, in): This runs an enclave program. It takes in a
handle hdl corresponding to an enclave running the stateful
program Q and an input in. It runs Q at state T [hdl] with input
in and records the output out. It sets T [hdl] to be the updated
state of Q and outputs out.
‚Ä¢ HW.Run&Reportskreport (hdl, in): This executes a program in an
enclave and also generates an attestation of its output that can
be verified by an enclave program on the same HW platform. It
takes as inputs a handle hdl for an enclave running a program Q
and an input in for Q. The algorithm first executes Q on in to get
out, and updates T [hdl] accordingly. HW.Run&Report outputs
the tuple report :=
, where mdhdl is
the metadata associated with the enclave, tagQ is a program
tag that can be used to identify the program running inside the
enclave (it can be a cryptographic hash of the program code
Q) and mac is a cryptographic MAC produced using skreport on
(mdhdl, tagQ , in, out).
‚Ä¢ HW.Run&QuoteskHW (hdl, in): This executes a program in an en-
clave and also generates an attestation of its output that can
be publicly verified, e.g. by a remote party. This takes as inputs
a handle hdl corresponding to an enclave running a program
Q and an input in for Q. This algorithm has a restricted access
to the key skHW for using it to sign messages. The algorithm
mdhdl, tagQ , in, out, mac
(cid:16)
(cid:17)
Figure 5: Comparison of time for decrypting 103 ciphertext tuples using
the SGX-FE implementation of IBE, ORE, 3DNF vs cryptographic implemen-
tations from pairings and mmaps respectively.
Comparison to cryptographic implementations. We measured de-
cryption time for an implementation6 of Boneh-Franklin IBE [10]
on our platform. We also include decryption time performance
numbers for the 5Gen implementation7 of mmap-based ORE and
3DNF as reported in [39]. We did not deem it necessary to measure
5Gen implementations of ORE and 3DNF on our platform since
their performance is 4 orders of magnitude slower than that of our
SGX-based implementation. The comparison for these multi-input
functionalities simply illustrates how our SGX-FE system makes
possible primitives that are currently otherwise infeasible to build
for practical use without secure hardware.
Stanford
6The
https://crypto.stanford.edu/ibe/download.html
75Gen, available https://github.com/5GenCrypto
command-line
IBE
utility
ibe-0.7.2-win,
available
at
Session D1:  Functional Encryption and ObfuscationCCS‚Äô17, October 30-November 3, 2017, Dallas, TX, USA771(cid:16)
(cid:17)
(cid:16)
(cid:17)
(cid:16)
mdhdl, tagQ , in, out, mac
first executes Q on in to get out, and updates T [hdl] accord-
ingly. HW.Run&Quote then outputs the tuple quote :=
mdhdl,
, where mdhdl is the metadata associated with
tagQ , in, out, œÉ
the enclave, tagQ is a program tag for Q and œÉ is a signature on
(mdhdl, tagQ , in, out).
‚Ä¢ HW.ReportVerifyskreport (hdl‚Ä≤, report): This is the report verifica-
tion algorithm. It takes as inputs, a handle hdl‚Ä≤ for an enclave and
a report =
. It uses skreport to verify
the MAC. If mac is valid, it outputs 1 and adds a tuple (report, 1)
to T [hdl‚Ä≤]. Otherwise it outputs 0 and adds (report, 0) to T [hdl‚Ä≤].
‚Ä¢ HW.QuoteVerify(params, quote): This is the quote verification
(cid:17)
algorithm. This takes params and quote =
mdhdl, tagQ , in, out,
as input. It outputs 1 if the signature verification of œÉ succeeds.
œÉ
It outputs 0 otherwise.
In Appendix A, we formally define the correctness of HW as well
as the security properties of HW.Run&Report, HW.Run&Quote,
HW.ReportVerify, and HW.QuoteVerify as local attestation un-
forgeability (LocAttUnf) and remote attestation unforgeability (Re-
mAttUnf).
Oracles and handles. HW models a single SGX chip. Our system
involves multiple HW platforms, and each is modeled by a separate
HW instance. When a particular process, e.g. FE.Decrypt, needs
to interact with multiple platforms, the remote interactions are
modeled through oracle calls, which in the real world corresponds
to communicating with a process running on the relevant remote
machine. The handles in the model generated by HW.Load do not
need to secret or unpredictable. They are only relevant to the inter-
faces described in HW, which by definition can only be accessed
by the HW instance itself. More concretely, in the real world SGX
instantiation, these enclave handles are used only by processes
running on the same machine as the enclave(s).
Modeling assumptions. One way of viewing this definition of