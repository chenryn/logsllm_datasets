they originated, whereas PreferHighTTL does not re-
quire this extra information. Currently deployed Gnutella
networks do not stamp queries, and the PreferHighTTL
DS is a good substitute as it achieves comparable per-
formance without stamping.
Weighted IAS always incurs more damage indepen-
dent of DS and topology. We can expect that most
Gnutella nodes deployed today can be modeled as using
a Weighted IAS as they arbitrarily accept queries from
other nodes without enforcing any traﬃc management
policy. The Weighted IAS allows queries that are part
of a ﬂood to have a signiﬁcantly higher chance of being
chosen for processing relative to legitimate queries.
In general, when nodes use the Weighted IAS, dam-
age increases as the average connectivity of the nodes
increases. On the other hand, when nodes use the Frac-
tional IAS, damage decreases as the average connectivity
of the nodes increases.
The PreferLowTTL DS never reduces damage, and
often results in signiﬁcantly more damage as compared
to the other DSs. One potential reason to use Prefer-
LowTTL might be to attempt to increase the “reach” of
a query, and to attempt to obtain as many search results
from nodes a great distance (but less than TTL hops)
away from the originator of the query. Unfortunately,
when the malicious node is the originator of a query,
PreferLowTTL allows its queries to be spread as far as
possible and incur a large amount of damage.
5.2 Damage Reduction
Damage reductions of 1.4 to 3.8 times can be achieved
with Fractional/Equal IAS/DS, depending upon topology
(see Table 2).
Table 2 shows the damage reduction factors that can
be achieved by switching from a Weighted/Proportial
IAS/DS to a Fractional/Equal IAS/DS for all of the
topologies considered with the malicious node in the
most threatening position. For example, employing Frac-
tional/Equal IAS/DS for the power-law topology results
in reducing damage by about a factor of two as compared
to Weighted/Proportional IAS/DS when the malicious
node is highly connected.
To put this damage reduction factor in perspective, it
is worthwhile to remember that we measure damage in a
worst-case scenario, when the network is “fully-loaded”
as deﬁned in Section 4.5. At a time at which the network
is not heavily loaded (and has no malicious node), a node
is able to have many of its queries serviced; the number
of queries that it has serviced by other nodes is greater
than its service guarantee. When the network is at its
busiest (4pm in the afternoon on a weekday), again with
no malicious node, a node receives an amount of service
that is exactly equal to its service guarantee. A node
might have, for instance, 200 of its queries processed at
other nodes. Our damage metric (as shown in Table 1)
tells us how many queries a malicious node is able to
rob the good node of at this busiest time. If the damage
is 0.5, then the malicious node is able to rob the good
node of 100 queries. By using a better IAS and DS
policy, we might be able to reduce the damage. If the
new damage using the better policies is 0.25, then we
are able to recover 50 queries for the victim node; that
is, other nodes will service 50 additional queries for the
victim by using better policies when the malicious node
is present. The damage reduction factor in this case is
0.5
0.25 = 2.
The damage reduction factors for various topologies
and policies are shown in Table 2.
188Topology (Location)
Complete
Cycle
Grid (Center)
Line (Center)
Power-Law (High)
Star (Center)
Wheel (Center)
F/E W/P Dmg Red Ftr
0.143
0.314
0.227
0.248
0.262
1.000
0.386
0.545
0.527
0.454
0.428
0.539
1.000
0.726
3.8
1.7
2.0
1.7
2.1
1.0
1.9
Table 2: Damage Reduction Factor using
Frac/Equal IAS/DS
5.3 Damage vs. Topology
The complete topology under the Fractional IAS is the
least prone to damage, and is insensitive to the position
of the malicious node.
Figure 1 shows how damage varies with topology and
placement of the malicious node. Figure 1 graphically
depicts the Weighted/Proportional and Fractional/Equal
columns of Table 1. The results corresponding to the
star topology with the malicious node in the center have
been excluded as the damage is always 1, and the exclu-
sion allows the reader to see other the results with better
resolution. Also, the names of the graph topologies have
been abbreviated (K=Complete, C=Cycle, W=Wheel,
L=Line, S=Star, P=Power-Law, G=Grid).
From Figure 1, we can see that if the malicious node
can take on any position in the network, then the com-
plete topology minimizes damage. Of course, the use of
Fractional IAS plays a signiﬁcant role in the complete
topology’s ability to minimize damage. The more links
that a node using Fractional IAS has, the less negative
of an impact can be caused by a single malicious node
connected to it. In Table 1, it is interesting to note that
due to the symmetry of the actions taking place at each
node, all of the drop strategies that we consider perform
equivalently in a complete network.
From Table 1, we also learn that topology alone can-
not signiﬁcantly reduce damage if bad policies are used.
If a Weighted/PreferLowTTL IAS/DS is used, a ma-
licious node can cause a damage of at least 0.5 for all
topologies in the most threatening position. By contrast,
if Fractional/Equal IAS/DS is used, then the worst pos-
sible damage is 0.386. Hence, it is important to use good
policies regardless of the topology of the network.
In all topologies, we ﬁnd that damage increases as the
connectivity of the malicious node increases.
In addi-
tion, we ﬁnd that the closer the malicious node is to the
“center” of the network, the more damage it can cause.
Therefore, when new “untrusted” nodes join a network,
they should be conﬁned to the “edges” of the network.
Over time, nodes that persist in oﬀering service can be
moved towards the center. In today’s Gnutella networks,
nodes can join at any random location and no explicit
mechanism exists to incrementally move nodes towards
the center of the network based on a node’s “history.”
Of course, a malicious node can “act” good until it
ﬁnds itself in a central position in the network, and can
start ﬂooding at that time. Hence, while good poli-
cies can minimize the damage, it will be important to
develop techniques that can detect and disconnect mali-
cious nodes. Since good nodes in our model should gen-
erate no more than ˆρcj new queries per time step when
there is high load, it might be worthwhile to disconnect
any node that is sending more than ˆρcj queries under a
high load condition. However, in a real network, mali-
cious nodes can easily forge source IP addresses, and can
make it appear as if they are “good nodes” that are just
forwarding queries that were generated elsewhere. Nev-
ertheless, while the idea of moving “trusted” nodes to
the center does not prevent bad nodes from masquerad-
ing as good ones, it does “raise the bar” for an attacker
to move into a more threatening position.
5.4 Damage Distribution
Fractional/Equal IAS/DS minimizes ﬂood damage dis-
tributed in a cycle topology.
In this section, we measure how damage due to a single
malicious node is distributed across the network. Due to
space limitations, we only discuss damage distribution
for the cycle topology here.
Damage distribution is measured with respect to “vic-
tim” nodes in the network. We examine the relation
between IAS/DS policies and damage distribution.
Figure 2 shows the damage incurred at the victim
node when the victim and malicious nodes are separated
by 1, 3, 5, and 7 hops in a cycle topology. In general,
damage decreases as the distance between the victim
and malicious node increases.
Since damage decreases as distance from a malicious
node increases, good nodes should attempt to make new
connections in a way that distances them from malicious
nodes. One method by which nodes can attempt to dis-
tance themselves from malicious nodes is by connecting
to nodes that they “trust.” That is, if a node i is rea-
sonably sure that another node j is not malicious, then
i should connect to j. Node j may be run by a friend
of node i, or, in an enterprise setting, node j may have
a business relationship with i. In either case, if node i
connects to a “trusted” node j, then i can be reasonably
sure that it has inserted at least one hop between itself
and some malicious node that is part of the topology.
Node j beneﬁts from the same.
In the case that a node does not have any “friends,”
but can use a Fractional IAS, it should make many con-
nections to shield itself from a potential ﬂooding attack.
If it makes m connections, then it accepts a maximum
of 1
m useless queries from a malicious node. However, if
a “friend-less” node is only capable of using a Weighted
IAS, then it should connect to just a few nodes. The
more nodes that it connects to, the higher the probabil-
ity that it will connect to a malicious node.
In addition, nodes should attempt to connect to other
nodes that are either themselves highly connected and
using a Fractional IAS, or lowly connected and using a
Weighted IAS. The less “exposed” that a node’s neigh-
bors are to ﬂooding, the less exposed the node itself will
be to ﬂooding.
Figures 3 and 4 show how the damage incurred by
the victim node in Figure 2 is distributed from 1 to τ
hops away. Lines are plotted for diﬀerent conﬁgurations
189e
g
a
m
a
D
k
r
o
w
e
N
e
v
i
t
t
l
a
u
m
u
C
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
Frac/Equal
Wght/Prop
K
C
W (Edge) W (Ctr)
L (End)
L (Ctr)
S (Edge)
P (Low)
P (High) G (Corner) G (Edge) G (Center)
Topology (Location of Malicious Node)
Figure 1: Damage vs. Topology for Fractional/Equal and Weighted/Proportional IAS/DS
of the victim and malicious node in which the distance
(d) between them are 1, 3, 5, and 7 hops. Each (x,y)
point on a line shows the reduction in service (y) that
the victim receives x hops away.
In our following discussion, we will use the terms “up-
stream” and “downstream.” Upstream refers to the di-
rection closer to the malicious node, and downstream
refers to the direction farther away from the malicious
node.
Similar to the bar chart in Figure 2, Figures 3 and 4
show that more damage is incurred at upstream nodes
that are closer to the malicious node (and further from
the victim).
However, they also show how the damage is distributed
at various distances away from the victim node. The
damage (y) in Figure 3 incurred by the victim is av-
eraged over both nodes that are x hops away from the
victim in the cycle. When the distance (d) between the
victim and the malicious node is 1, the damage is al-
ways greater than the damage when the distance be-
tween them is 7, as can be seen by the fact that the
d = 1 line is always higher than the d = 7 line.
What we could not see in Figure 2 is that the ex-
tent of the damage one hop away from the victim is
much more signiﬁcant when the malicious node is one
hop away than when the malicious node is seven hops
away. When the malicious node is one hop away, the
victim can only receive service from the good node that
is one hop away, so the damage is at least 0.5. In addi-
tion, the victim is forwarding the ﬂood queries from the
malicious node to the good node that is one hop away.
In Figure 3, the good node is using the Proportional DS,
and, as a result, drops some of the victim’s queries while
attempting to process the ﬂood of queries that arrives.
The damage one hop away is therefore more than 0.5
in the d = 1 case; it is 0.61 in Figure 3. The damage
two hops away is even more (0.68). Firstly, the victim’s
queries are never able to reach the upstream node two
hops away because the malicious node never forwards
them (contributing 0.5 to the damage). Secondly, since
the downstream node one hop away does not accept all
of the victim’s queries, it does not forward all of the vic-
tim’s queries to the downstream node two hops away. Of
those queries that are forwarded, the downstream node
two hops away accepts only a proportion of the victim’s
queries (incuring an additional 0.18 damage).
Fractional/Equal
Weighted/Proportional
e
d
o
N
m
i
t
c
V
i
r
o
f
e
g
a
m
a
D
1