Certainly! Hereâ€™s a more polished and professional version of your text:

---

I recently installed Python 2.7 as an alternative version to the default Python on my CentOS 6 server. I needed this version to utilize a newer version of mod_python, which requires Python 2.7. The default Python version on the system is 2.6.2, located at `/bin/python`.

Unfortunately, after the installation, calling `python` from the command line now invokes `/usr/local/bin/python2.7` instead of the default `/bin/python`. I understand that I could create symbolic links to point back to `/bin/python`, but I am concerned that this might not be the best solution. The operating system relies on Python 2.6.2 for its operations, and I do not want to disrupt this.

I installed Python 2.7 from source, but I mistakenly used `make install` instead of `make altinstall`. This has caused the system to use Python 2.7 by default. Given that this is a semi-work-related server, I need a permanent and reliable solution to revert the default Python path back to 2.6.2.

I am aware that `.profile` and `.bashrc` files contain paths for Python, but these seem to be more relevant for bash logins via SSH. I need to find a way to change the system's default Python path back to 2.6.2. How can I achieve this? Thank you for your help.

---

**Response:**

The issue arises because `/usr/local/bin` is listed before `/bin` in your `$PATH` environment variable. When you run `which python`, it likely points to a symbolic link at `/usr/local/bin/python` that directs to `/usr/local/bin/python2.7`.

To resolve this, you can either:
1. **Change the symbolic link**: Update the symbolic link at `/usr/local/bin/python` to point to `/bin/python`.
   ```sh
   sudo ln -sf /bin/python /usr/local/bin/python
   ```

2. **Remove the symbolic link**: If you no longer need the symbolic link, you can remove it.
   ```sh
   sudo rm /usr/local/bin/python
   ```

After making this change, running `python` from the command line should invoke the default Python 2.6.2 located at `/bin/python`.

This approach ensures that the system's default Python version remains 2.6.2 without affecting the paths in `.profile` or `.bashrc`.

Thank you for your help.