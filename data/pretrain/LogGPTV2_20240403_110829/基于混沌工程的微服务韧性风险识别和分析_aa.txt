| 软件学报 ISSN 1000-9825, CODEN RUXUEW  | ∗ | E-mail: PI:EMAIL  |
|---|---|---|
| Journal of Software,2021,32(5):1231−1255 [doi: 10.13328/j.cnki.jos.006231]  |∗ |http://www.jos.org.cn  |
| ©中国科学院软件研究所版权所有.  |∗ |Tel: +86-10-62562563  |
| 基于混沌工程的微服务韧性风险识别和分析 |∗ |Tel: +86-10-62562563  |
殷康璘,  杜庆峰
(同济大学软件学院,上海  201804) 
通讯作者: 杜庆峰, E-mail: PI:EMAIL摘要: 	微服务架构近年来已成为互联网应用所采用的主流架构模式.然而与传统的软件架构相比,微服务架构 更加复杂的部署结构使其面临更多能够导致系统发生故障的潜在威胁,且微服务架构系统故障的症状也更加多样 化.在可靠性等一些传统的软件度量已不能充分体现微服务架构系统故障应对能力的情况下,微服务的开发者们开 始使用“韧性(resilience)”一词描述微服务架构系统的故障应对能力.为了提高微服务架构系统的韧性,开发者往往 需要针对特定的系统环境扰动因素设计应对机制.如何判断一个系统环境扰动因素是否为影响微服务系统韧性的 风险因素,以及如何在系统运行发布之前尽可能多地寻找到这些潜在的韧性风险,都是微服务架构系统开发过程中 待研究的问题.在先前研究中提出的微服务韧性度量模型的基础上,结合混沌工程,提出了针对微服务架构系统的韧 性风险识别和分析方法.韧性风险的识别方法通过不断地向微服务架构系统引入随机系统环境扰动并观察系统服 务性能的变化,寻找系统潜在的韧性风险,大幅度减少了软件风险识别过程中的人力成本.对于识别到的韧性风险, 通过收集执行混沌工程过程中的系统性能监控数据,韧性风险分析方法将利用因果搜索算法构建出各项系统性能 指标之间的影响链路,并将可能性较高的链路提供给运维人员,作为进一步分析的参考.最后,通过在一个微服务架 构系统上实施的案例,研究展示了所提出的韧性风险识别和分析方法的有效性.关键词: 	微服务;韧性;软件风险识别;混沌工程 
中图法分类号: TP311 
中文引用格式: 殷康璘,杜庆峰.基于混沌工程的微服务韧性风险识别和分析.软件学报,2021,32(5):1231−1255.http://www. 
jos.org.cn/1000-9825/6231.htm 
英文引用格式: Yin KL, Du QF. Microservice resilience risk identification and analysis based on chaos engineering. Ruan Jian Xue Bao/Journal of Software, 2021,32(5):1231−1255 (in Chinese).http://www.jos.org.cn/1000-9825/6231.htmMicroservice Resilience Risk Identification and Analysis Based on Chaos Engineering
YIN Kang-Lin,  DU Qing-Feng
(School of Software Engineering, Tongji University, Shanghai 201804, China)Abstract:  Microservice architecture has already become the mainstream architecture pattern of Internet applications in recent years. However, compared with traditional software architectures, microservice architecture has a more sophisticated deployment structure, which makes it have to face more potential threats that make the system in fault, as well as the greater diversity of fault symptoms. Since traditional measurements like reliability cannot fully show a microservice architecture system’s capability to cope with failures, microservice developers started to use the word “resilience” to describe such capability. In order to improve a microservice architecture system’s resilience, developers usually need to design specific mechanisms for different system environment disruptions. How to judge whether a system environment disruption is a risk to microservice resilience, and how to find these resilience risks as much as possible∗基金项目: 国家自然科学基金(U1934212); 国家重点研发计划(2020YFB2103300) 
	 Foundation item: National Natural Science Foundation of China (U1934212); National Key Research and Development Program of China (2020YFB2103300) 
	本文由“面向持续软件工程的微服务架构技术”专题特约编辑张贺教授、王忠杰教授、陈连平研究员和彭鑫教授推荐. 
收稿时间:2020-07-10; 修改时间: 2020-10-26, 2020-12-15; 采用时间: 2021-01-18; jos 在线出版时间: 2021-02-07 
1232 	Journal of Software软件学报 Vol.32, No.5, May 2021before the system is released, are the research questions in microservice development. According to the microservice resilience measurement model which is proposed in authors’ previous research, by integrating the chaos engineering practice, resilience risk identification and analysis approaches for microservice architecture systems are proposed. The identification approach continuously generates random system environment disruptions to the target system and monitors variations in system service performance, to find potential resilience risks, which greatly reduces human effort in risk identification. For identified resilience risks, by collecting performance monitoring data during chaos engineering, the analysis approach uses the causality search algorithm to build influence chains among system performance indicators, and provide chains with high possibility to system operators for further analysis. Finally, the effectiveness of the proposed approach is proved by a case study on a microservice architecture system.Key words:  microservice; resilience; software risk identification; chaos engineering 
微服务架构(microservice architecture)是由马丁·福勒所提出的一种新的软件架构模式[1],它将一个单体的 软件系统拆分为若干可独立运行、部署的微服务(microservices).微服务架构将软件功能变更的规模控制在一 个微服务内部,且不影响其他的微服务,大幅减少了软件功能迭代过程中系统重新构建、测试、部署的成本,因 此,采用微服务架构成为了 DevOps 开发模式中常用的手段[2].近年来,微服务架构已成为许多互联网公司会使 用的一种主流软件架构模式[3−5].相对于早年面向服务架构的软件系统,采用微服务架构的软件系统(以下简称微服务架构系统)对服务的划 分更细粒度化,并且通常会使用容器技术提高系统资源的利用率,以致微服务架构系统部署结构更为复杂.受此 影响,微服务架构系统会面临更多非软件设计缺陷因素(如服务器意外宕机、网络不稳定等)所引发的软件系统 故障[6].除了软件系统故障以外,软件系统的升级、系统部署配置(如微服务的冗余备份配置、虚拟机的资源分 配)的动态变更、未预期的工作负载等情况,均可能导致微服务架构系统不能正常提供其服务[7].在传统的软件系统质量度量中,描述系统应对故障能力的度量指标有可用性、可靠性、容错性等[8],这些度 量指标往往将系统的状态分为“可用/可靠”和“不可用/不可靠”两种.但是,近年来对云计算故障模式的相关研究 表明[7,9]:故障除了能直接导致系统服务本身的不可用之外,也可能会使系统服务质量(性能)受到严重影响,但是 系统服务仍处于可访问状态.在这种情况下,可用性、可靠性这一类指标并不能完全体现出一个微服务架构系 统在故障发生时其系统服务性能受到影响的严重程度.例如,一个系统在情况 A 下系统服务的平均响应时间从 3s 延长至 5s,在情况 B 下系统服务的平均响应时间从 3s 延长至 12s,假设情况 A 和情况 B 持续的时长相同,那么 系统在情况 A 和情况 B 下的可靠性也是相同的.但是很明显,系统在情况 B 下服务性能受影响的程度比在情况 A 下严重.另一方面,现有对软件系统服务性能的评估方法主要以性能测试为主,通过性能测试可以识别出系统 在一定服务压力下体现出来性能设计缺陷.但是系统在故障发生时,系统服务性能受到的影响并不会在性能测 试中验证.基于上述原因,微服务架构系统的相关研究人员开始使用“韧性(resilience)”一词表示系统处理故障的能 力[10,11](“resilience”一词在不同学术领域中有多种翻译,通常被翻译为“弹性”“韧性”,而国内计算机领域目前对 resilience 的翻译尚未确定.由于“弹性”一词早已在云计算中被用来形容软件系统的伸缩性和可扩展性,本文使 用“韧性”一词作为 resilience 的翻译).为了提高微服务架构系统的韧性,负载均衡、熔断机制、心跳检测等一些 常用的系统容错机制[12]被开发人员和架构设计人员应用在系统上.在计算机领域中,目前还没有对软件韧性有统一的定义.根据其他领域研究中对韧性的定义[13]以及韧性这 一概念在微服务架构系统开发者中被使用的情况,本文作者在先前的研究工作[14]中从服务性能的角度将微服 务架构系统的韧性定义为:“一个微服务架构系统在系统环境扰动发生并导致其服务性能下降后,维持其服务性 能在一个可接受的水准,并快速将服务性能恢复至正常状态的能力”.其中,系统环境扰动(disruption)是其他领域 韧性研究中的一个通用概念,意为影响系统(非特指软件系统)功能正常运作的事件.在微服务架构系统中,系统 环境扰动既包括软件系统的内部组件故障,也包括上文中所提及的诸如系统升级、配置变更等使微服务架构系 统产生“变更”的事件.在上述定义的基础上,该研究提出了微服务韧性度量模型 MRMM(microservice resilience measurement model),该模型将微服务架构中有关韧性的概念进行概念建模,并给出用于度量系统环境扰动发生 时服务性能变化的 3 个度量维度,以评估其对微服务架构系统服务性能的影响程度.殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 	1233 
通过设立由 MRMM 的 3 项度量指标构成的服务韧性目标,可以描述出一个微服务架构系统预期达到的服 务韧性;随后,微服务架构系统的开发人员将在各种可能的系统环境扰动中寻找出会超出韧性目标阈值的扰动, 将其认定为威胁微服务韧性的软件风险(以下简称为韧性风险),并为其设计系统应对机制[15].在传统的软件风 险分析过程中,对软件风险的识别通常采用头脑风暴、专家经验等人为分析方法,然而在微服务架构系统中,随 着微服务数量的增加以及服务之间调用关系的复杂化,根据微服务架构系统中各类型系统资源可能发生的环 境扰动事件类型,人为地列举出所有可能发生的具体系统环境扰动(如某一个服务存在一种扰动类型,就需要穷 尽目标系统的各个服务在发生这种扰动后可能的情况)并逐个验证这些扰动是否会产生严重的服务降级,显然 会消耗大量的人力成本以及时间成本.对于识别到的韧性风险,现有的故障诊断和分析方法需要对目标系统的 所有通信过程植入监控代码,或对历史性能数据人工地标注系统正常异常与否,将花费大量额外的系统开发成 本或人工成本.此外,没有统一的韧性度量方法,使得微服务架构系统的研究人员难以界定服务性能受系统环境 扰动影响的严重程度,并在迭代过程中选择需要优先处理的韧性风险.综上所述,微服务架构系统的韧性风险识 别过程中存在着以下两个问题.问题 1:如何使用较少的人力和时间成本识别出目标微服务架构系统的韧性风 险?问题 2:如何分析识别到的韧性风险对目标微服务架构系统的影响?针对上述问题,本文提出了微服务韧性风险的识别和分析方法,其整体流程如图 1 所示.首先,本方法根据 MRMM 模型中的韧性度量指标为目标微服务系统中的服务设立韧性目标;随后,基于混沌工程的方法执行若干 次混沌实验,在每次混沌实验中,以随机的方式生成系统环境扰动,通过比较实验中系统环境扰动产生的服务降 级是否超出服务韧性目标的阈值范围,识别出目标系统中的韧性风险.针对每一个被识别的韧性风险,为了免去 对微服务架构系统的额外开发成本和对性能数据的人工标注成本,本文通过因果关系搜索算法无监督地分析 实验结果数据中各系统性能指标之间的因果关系,并给出可能的韧性风险影响链路. 
Fig.1  Process of microservice resilience risk identification and analysis 图 1  微服务韧性风险的识别和分析过程本文第 1 节概述本文的相关研究.第 2 节介绍基于混沌工程的韧性风险识别方法.第 3 节介绍针对微服务 架构系统的韧性风险分析方法.第 4 节以一个微服务架构系统 Sock-Shop 为例,对本文提出的方法进行案例研 究.第 5 节进一步分析案例研究的实验结果,总结本文的工作,并提出下一步的研究计划. 
1  相关工作在学术研究中,韧性最早由生态学家 Holling 于 1973 年所提出,用以表示一个生态系统响应外部干扰并恢 复由外部干扰所带来的损害的能力[16].随后,韧性这一概念逐渐被引入至社会-生态系统、经济学、组织管理、城市规划等多个领域[17,18].在软件/计算机领域中,韧性的概念虽然在微服务架构诞生之前就已被提出,但计算 机领域有关韧性的研究相对于其他领域仍处于初步阶段.Laprie 于 1992 年在可靠性(dependability)相关定义的 综述中提出了韧性的概念,并将韧性定义为软件系统对故障的恢复能力[19];随后,于 2008 年提出将韧性作为可 靠性(reliability)的引申研究,重新将韧性定义为:在软件系统在面对系统环境、配置等因素变化时,系统维持服务 发布状态的能力[20].2012 年,由科因布拉大学和纽卡斯尔大学建立的 AMBER(assessing, measuring, and benchmarking resilience)组织回顾了各文献对韧性的定义,并阐述了韧性在云计算中的必要性以及与软件韧性 的相关研究[21].一些针对软件/计算机韧性的研究[22−24]基本都通过应用其他领域的定义来说明韧性这一概念, 并尝试解释韧性与可靠性、容错性等软件质量特性的关系.在微服务架构被提出的几年内,微服务架构韧性的重要性就已在一些应用书籍[10,25]以及学术研究[11]中被
1234 	Journal of Software软件学报 Vol.32, No.5, May 2021 
提出.与软件/计算机整个领域的现有韧性研究相同,目前绝大部分提到微服务架构韧性的研究仅仅提到了韧性 的概念,并基本以现有韧性机制(如负载均衡、熔断机制等)的优化研究为主,包括微服务的健康管理[26]、负载均 衡[27]、故障恢复机制[28]、故障发现等[29].也有少数针对微服务韧性展开的相关理论研究.Heorhiadi 等人提出了 一种微服务架构的韧性测试框架[30];Thomas 和 Andre 提出了用于微服务架构性能和韧性基线分析的元模型[31], Giedrimas 根据现有的韧性机制总结了微服务架构韧性设计中需要考虑的几个方面[32],Andre 和 Aleti 提出了一 种结合了工作负载和故障注入的微服务架构韧性基线验证框架[33],Michal 和 Marian 比较了单体应用和微服务 架构之间在性能和韧性之间的差异[34].然而,现有微服务韧性的研究中并未有从软件风险角度讨论韧性的研究.软件风险评估(software risk evaluation)是软件工程中的重要过程之一,其中,软件风险识别是软件风险评估 过程中的首要步骤[35].主流的软件风险评估方法有故障树分析法(fault tree analysis)[36]、错误用例法(misuse case)[37]、威胁建模(threat modeling)[38]以及 FMEA 法[39].上述的评估方法在软件风险识别阶段均使用人为方法 识别软件风险,通过参考专家经验以及类似的历史项目或者头脑风暴来列出可能威胁软件本身以及软件开发 过程中潜在的风险.其中,威胁建模在风险识别阶段引入了 STRIDE 模型[38],通过枚举不同的风险类型启发风险 分析人员找到软件项目的潜在风险.近年来,对软件风险导出方法的研究也主要以针对不同领域软件的优化为 主,软件风险的识别仍然使用人为方法[40,41].混沌工程[42]是由 Netflix 公司于 2017 年提出的一种用于验证微服务系统对故障应对能力的实验方法.通过 随机地对目标系统进行故障注入,观察系统服务是否被故障影响.Netflix 针对自身的应用的关键服务——视频 播放服务,以每秒视频的启动次数(video-stream start per second,简称 SPS)作为度量指标,通过观察故障注入后 视频播放服务的 SPS 值是否会低于指定阈值,判断注入的故障是否为潜在系统风险.目前,在计算机领域有关混 沌工程的学术研究极少,在 SCI、EI、DBLP 等数据库中对“Chaos Engineering”一词进行检索,仅能搜索到少量 与 Netflix 提出的混沌工程概念一致的相关文献.在提出混沌工程的概念后,Netflix 又针对混沌工程的商业价 值[43]、测试平台[44]及混沌实验的执行过程[45]进行了进一步阐述.Zhang 等人针对 Java 虚拟机提出了 ChaosMachine 框架[46],该框架能够在混沌实验的过程中.通过添加 Java 注释的方式实现在 Java 代码中插入异常 (exception)抛出行为,以验证 Java 服务捕获并处理异常的能力.Jesper 等人针对容器环境提出了 ChaosOrca 框 架[47],实现了对部署微服务环境的容器的系统调用进行故障注入.Kennedy 等人利用混沌工程的方法随机地对 云服务进行安全性攻击,以发现云服务中的数据安全问题.目前,混沌工程已被业界认可为一种可实践的方法 论[48−50],并已有一些可用于实践的工具,如 Netflix 的 ChaosMonkey、阿里巴巴的 Chaosblade、混沌工程服务 Gremlin 以及开源项目 Chaos-toolkit 等.这些工具目前的主要功能为实现特定的系统环境扰动,并提供对应混沌 实验文件模板或指令给测试人员,而有关混沌实验的具体设计过程并没有相关实现.本文的案例研究中,也将利 用上述工具实现的系统环境扰动发现目标系统潜在的韧性风险.故障诊断是用于分析软件风险对软件系统影响的一种重要方法.现有针对分布式服务架构的软件系统的 故障诊断方法可以分为基于监督学习的方法和基于系统调用关系的方法. 
基于监督学习的方法[51−54]需要在一个已标签过的数据集上进行机器学习模型的训练,训练后的模型•
能够判断当前系统中是否存在某一种类型的异常.目前,基于监督学习的故障诊断方法需要大量收集 系统的历史数据,并且通常仅能判断目标系统是否存在某一特定类型的故障. 
•	基于系统调用关系的方法将首先构建出系统服务和系统资源之间的依赖关系图,并根据依赖关系定 	位系统故障的根因.其中,系统服务和资源的依赖关系通常参考已有的经验知识[55−58],或者通过在代码 	中插桩获取服务或组件之间调用关系[59−62].这一过程需要人工识别服务和资源之间的依赖关系或者 	在现有系统上开发特定的工具捕获依赖关系.为 了 能 够 仅 通 过 系 统 性 能 数 据 构 建 出 微 服 务 架 构 系 统 的 依 赖 关 系 图 , 陈 鹏 飞 等 人 先 后 提 出 了 CloudRanger[63]、Microscope[64]、CauseInfer[65]这 3 种根因诊断模型.上述 3 种模型均使用了因果搜索算法分析 目标微服务系统的系统资源和服务之间的因果关系并构建因果关系图,且通过实验证明了因果搜索算法在对 微服务系统的故障诊断上相对于现有故障诊断方法在准确率和效率上具有显著的优势,且无需对系统性能数
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 	1235 
据标注标签.参考上述研究工作,本文在韧性风险的分析过程中同样使用了因果关系搜索算法来构建目标微服 务系统中性能指标之间的依赖关系.本文作者在先前的研究工作[14]中提出了微服务韧性度量模型 MRMM,该模型使用了性能降级程度、降级 恢复时间和降级损失这 3 个度量维度度量了一次系统环境扰动产生的服务降级中系统性能的变化,以体现系 统环境扰动对微服务架构系统的影响程度,如图 2 所示.以 MRMM 为基础,该研究提出了一种韧性需求的表示 方法,通过目标导向的需求模型体现出微服务架构中韧性目标、韧性风险和韧性机制之间的关系.然而,如何识 别出一个微服务架构系统中的韧性风险并对其进行分析,并没有在该研究的讨论范围内. 
Fig.2  Three resilience metrics in MRMM 
图 2  MRMM 中的 3 个韧性度量指标
2  微服务架构系统韧性风险的识别方法2  微服务架构系统韧性风险的识别方法
基于混沌工程的实践方法和微服务韧性度量模型 MRMM[14],本文提出了针对微服务架构系统的韧性风险 识别方法.相对于传统的软件风险评估模型中人为识别软件风险的方法,该方法将利用混沌工程工具中已实现 的系统扰动事件类型,以随机的方式自动构建出大量混沌实验,持续地对目标微服务架构系统进行混沌实验,并 以预先设立的韧性度量目标判断某种系统环境扰动是否为韧性风险,实现了一种针对韧性风险的发现策略,并 免去了人为穷尽并验证各服务中不同系统资源类型的各种环境扰动对目标系统影响的人工成本.具体的混沌 实验实例详见本文第 4.2 节的案例研究部分. 
2.1  假设与前提
本文所提出的微服务系统韧性风险识别方法具有以下假设和前提. 
(1) 	目标微服务架构系统遵循 DevOps 的开发模式,系统拥有完整的自动化构建、部署体系.(2) 	目标微服务架构系统已完成了首次迭代,并有一个可部署执行的版本. 
(3) 	目标微服务架构系统中,所有系统服务的实时服务性能数据可以通过工具采集. 
	目标微服务架构系统由于本身的性能设计缺陷导致的服务性能下降不在本文的研究范围内. (4) 
(5) 	本文将仅考虑单个系统环境扰动对微服务架构系统的影响,对于多种扰动对服务的组合影响,将在本 	文的后续研究中进一步探讨. 
2.2  韧性风险识别方法
本文提出的韧性风险识别方法将包含以下几个步骤. 
	(1) 确立服务性能基线 
	通过设立由 MRMM 的 3 项度量指标构成的服务韧性目标,可以描述出一个微服务架构系统预期达到的服 务韧性.当一个服务发生的某次服务降级所测量得到的服务韧性超出了其服务韧性目标的阈值范围,导致该次 服务降级的扰动将被识别为微服务架构的韧性风险.MRMM 中的各项韧性度量指标均通过计算服务实际性能 与服务性能基线的差异得到,因此在韧性风险识别过程的开始阶段,需要对目标微服务架构系统所提供的每个 系统服务建立服务性能基线,以判断服务是否处于服务降级状态.确立服务性能基线的过程中包含两个步骤. 	a) 确定服务性能指标.1236 	Journal of Software软件学报 Vol.32, No.5, May 2021 
根据服务类型的不同,服务性能的关注重点也会不同.因此,每一个系统服务都需要确定其关键服务性能指 标.服务性能指标的选择可以参考现有 IT 系统性能标准(如 SPEC[66]、TPC[67,68]、ETSI GS[69])、性能评估数据 集[70,71]以及其他服务度量指标选择相关研究[72]中常见的性能指标.考虑到微服务架构系统的最终目标是为互 联网公司获取盈利,一些特定的服务需要设立与商业需求有关的性能指标.例如,Netflix 将每秒用户视频的播放 数量作为一种需要检测的关键性能指标[43]. 