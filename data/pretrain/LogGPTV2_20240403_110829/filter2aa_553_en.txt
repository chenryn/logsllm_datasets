第10行：在第10行和第11行之间少了一个右花括号。该右花括号与第7
行的左花括号配对，形成一个for循环块。然后在这个右花括号与最后一个
右花括号之间，少了一行return 0;。
下面是一个正确的版本：
#include 
int main(void)
{                /* 第3行 */
int i, j, list(10);      /* 第4行 */
for (i = 1, i  = i, j++)  /* 第9行 */
printf(" %d", list[j]); /* 第10行 */
printf("\n");       /* 第11行 */
｝
return 0;
}
1469
6.下面是一种方法：
#include 
int main(void)
{
int col, row;
for (row = 1; row = 90 && number = 1 && number = 1 && number  9
更好理解。
3.第5行：应该是scanf("%d %d", &weight, &height);。不要忘记scanf()中
要用&。另外，这一行前面应该有提示用户输入的语句。
第9行：测试条件中要表达的意思是(height  64)。根据前
面第7行中的测试条件，能到第9行的height一定小于72，所以，只需要用表
达式(height > 64)即可。但是，第6行中已经包含了height > 64这个条件，所以
这里完全不必再判断，if else应改成else。
第11行：条件冗余。第2个表达式（weight不小于或不等于300）和第1
个表达式含义相同。只需用一个简单的表达式(weight > 300)即可。但是，问
题不止于此。第 11 行是一个错误的if，这行的else if与第6行的if匹配。但
是，根据if的“最接近规则”，该else if应该与第9行的else if匹配。因此，在
weight小于100且小于或等于64时到达第11行，而此时weight不可能超过
300。
第7行～第10行：应该用花括号括起来。这样第11行就确定与第6行匹
配。但是，如果把第9行的else if替换成简单的else，就不需要使用花括号。
第13行：应简化成if (height > 48)。实际上，完全可以省略这一行。因为
第12行已经测试过该条件。
下面是修改后的版本：
#include 
int main(void)
{
int weight, height; /* weight in lbs, height in inches */
printf("Enter your weight in pounds and ");
1474
printf("your height in inches.\n");
scanf("%d %d", &weight, &height);
if (weight  64)
if (height >= 72)
printf("You are very tall for your weight.\n");
else
printf("You are tall for your weight.\n");
else if (weight > 300 && height  2为真，所以(6 > 2)的值为1。
e.10。因为测试条件为真。
1475
f.0。如果x > y为真，表达式的值就是y > x，这种情况下它为假或0。如
果x > y为假，那么表达式的值就是x > y，这种情况下为假。
5.该程序打印以下内容：
*#%*#%$#%*#%*#%$#%*#%*#%$#%*#%*#%
无论怎样缩排，每次循环都会打印#，因为缩排并不能让putchar('#');成
为if else复合语句的一部分。
6.程序打印以下内容：
fat hat cat Oh no!
hat cat Oh no!
cat Oh no!
7.第5行～第7行的注释要以*/结尾，或者把注释开头的/*换成//。表达
式'a' = 'z'应替换成ch >= 'a' && ch = 'z'是有效的表达式，
但是它的含义不明。因为关系运算符从左往右结合，该表达式被解释成('a'
= 'z'。圆括号中的表达式的值不是1就是0（真或假），然后判断该值
是否大于或等于'z'的数值码。1和0都不满足测试条件，所以整个表达式恒为
0（假）。在第2个测试表达式中，应该把||改成&&。另外，虽然!(ch= 'A'更简单。这一行的'z'后
面应该有两个圆括号。更简单的方法是使用isuupper()。在uc++;前面应该加
一行else。否则，每输入一个字符， uc 都会递增 1。另外，在 printf()语句中
的格式化字符串应该用双引号括起来。下面是修改后的版本：
#include 
1476
#include 
int main(void)
{
char ch;
int lc = 0; /*统计小写字母*/
int uc = 0; /*统计大写字母*/
int oc = 0; /*统计其他字母*/
while ((ch = getchar()) != '#')
{
if (islower(ch))
lc++;
else if (isupper(ch))
uc++;
else
oc++;
}
printf("%d lowercase, %d uppercase, %d other", lc, uc, oc);
return 0;
}
1477
8.该程序将不停重复打印下面一行：
You are 65.Here is your gold watch.
问题出在这一行：if (age = 65)
这行代码把age设置为65，使得每次迭代的测试条件都为真。
9.下面是根据给定输入的运行结果：
q
Step 1
Step 2
Step 3
c
Step 1
h
Step 1
Step 3
b
Step 1
Done
注意，b和#都可以结束循环。但是输入b会使得程序打印step 1，而输入
#则不会。
1478
10.下面是一种解决方案：
#include 
int main(void)
{
char ch;
while ((ch = getchar()) != '#')
{
if (ch != '\n')
{
printf("Step 1\n");
if (ch == 'b')
break;
else if (ch != 'c')
{
if (ch != 'h')
printf("Step 2\n");
printf("Step 3\n");
}
}
1479
}
printf("Done\n");
return 0;
}
A.8 第8章复习题答案
1.表达式 
putchar(getchar())使程序读取下一个输入字符并打印出来。
getchar()的返回值是putchar()的参数。但getchar(putchar())是无效的表达式，
因为getchar()不需要参数，而putchar()需要一个参数。
2.a.显示字符H。
b.如果系统使用ASCII，则发出一声警报。
c.把光标移至下一行的开始。
d.退后一格。
3.count essayct或者count >essayct <essay
4.都不是有效的命令。
5.EOF是由getchar()和scanf()返回的信号（一个特殊值），表明函数检测
到文件结尾。
6.a.输出是：If you qu
注意，字符I与字符i不同。还要注意，没有打印i，因为循环在检测到i
之后就退出了。
b.如果系统使用ASCII，输出是：HJacrthjacrt
1480
while的第1轮迭代中，为ch读取的值是H。第1个putchar()语句使用的ch
的值是H，打印完毕后，ch的值加1（现在是ch的值是I）。然后到第2个