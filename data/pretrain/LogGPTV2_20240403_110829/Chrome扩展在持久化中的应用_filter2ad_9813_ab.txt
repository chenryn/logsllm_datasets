Apfell是一个后利用（post-exploitation）框架，采用定制化和模块化设计思路。该框架默认情况下针对的是macOS平台，但用户可以创建针对其他平台的C2
profile（策略）。对于恶意Chrome扩展来说，Apfell是一个理想的框架。接下来我们看一下如何配置自定义的C2 profile、生成攻击载荷。
1、在初始化配置方面，大家可以参考[此处](https://github.com/its-a-feature/Apfell)的apfell文档。启动apfell服务器后，我们可以注册一个新用户，将自己设置为管理员（admin）。接下来，我们需要将[apfell-chrome-ext-payload](https://github.com/xorrior/apfell-chrome-ext-payload)以及[apfell-chrome-extension-c2server](https://github.com/xorrior/apfell-chrome-extension-c2server)工程clone到apfell服务器上。
2、转到`manage operations -> payload management`页面，该页面中定义了`apfell-jxa`以及`linfell`载荷。每个载荷都定义了几条命令，我们可以在控制台中修改这些命令，然后在agent中（这里指的是`apfell-jxa`以及`linfell`）更新这些命令。在载荷页面左下角有一个“import”按钮，我们可以使用json文件导入自定义载荷以及每条命令。为了节约大家时间，我提供了一个[文件](https://gist.github.com/xorrior/e1d5b1efb59d27f30ea808fab4400df1)，大家可以直接导入，创建载荷。如果成功导入，我们可以看到名为`chrome-extension`的一类新载荷，其中包含一些可操作命令。
3、现在我们在apfell服务器上打开一个终端会话，转到`apfell-chrome-extension-c2server`项目。运行`install.sh`脚本安装golang并编译服务端程序，然后验证`server`程序已编译成功，并且位于`$HOME/go/src/apfell-chrome-extension-c2server`目录中。
4、转到`Manage Operations -> C2 Profiles`，点击页面左下角的`Register C2
profile`按钮。这里我们需要输入profile的名称、描述以及支持的载荷。我们还需要上传与扩展程序对应的C2服务器程序（`$HOME/go/src/apfell-chrome-extension-c2server/server`）以及C2客户端代码（`./apfell-chrome-ext-payload/apfell/c2profiles/chrome-extension.js`）。
5、一旦profile提交成功，页面就会自动更新，显示新加入的profile。
6、回到apfell服务器上的终端会话，编辑`c2config.json`文件，根据需要设置相关选项。
7、将`c2config.json`拷贝到`apfell/app/c2profiles/default/chrome-extension/`目录中。将服务器程序重命名为`_server`，我们需要执行该操作才能在apfell
UI中启动C2服务器。现在我们可以在apfell中启动C2服务器。
8、转到`Create Components -> Create Base Payload`。在C2 profile和载荷类型中选择`chrome-extension`，填入所需的参数（主机名、端口、端点、SSL以及间隔时间），输入所需的文件名然后点击提交按钮。如果一切顺利，页面顶部就会显示一则成功消息。
9、转到`Manage Operations -> Payload Management`下载载荷。现在我们已成功构造扩展程序载荷以及C2
profile，我们可以导出这些载荷，以便后续使用。
10、将载荷的所有代码拷贝粘贴至chrome扩展项目文件中（`./apfell-chrome-ext-payload/apfell/extension-skeleton/src/bg/main.js`）。编辑`extension-skeleton`目录中的`manifest.json`文件，替换其中所有的`*_REPLACE`值。如果我们没有使用自动更新功能，可以不设置`update_url`值。
11、打开Google Chrome，点击`More -> More Tools -> Extensions`，然后切换到开发者模式。点击`pack
extension`，然后选择`apfell-chrome-ext-payload`项目中的`extension-skeleton`目录。再次点击`pack
extension`，然后Chrome就会生成带有私钥的`.crx`文件。需要注意的是，我们需要保存好私钥，才能更新扩展。
12、我们需要知道的最后一个信息就是应用ID。不幸的是，获取该信息的唯一方法就是安装扩展，然后记录下扩展页面上显示的ID值。我们可以将扩展文件（`.crx`）拖放到扩展页面进行安装。
13、现在我们已经获取创建移动配置文件所需的信息，可以托管manifest更新文件以及crx文件。我们需要在manifest更新文件中加入应用ID以及指向crx文件的url，然后在[移动配置示例文件](https://gist.github.com/xorrior/8ee611d4f91b91f03ec16bed1324be56)中添加应用id及`update_url`。此外，我们还需要填入两个不同的UUID值。
14、现在我们已配置完毕。如果一切配置正常，那么安装移动配置描述文件后就可以静默安装扩展程序，也能在apfell的回调页面中添加一个新的回调（callback）。大家可以参考前面的“载荷投递”内容了解如何安装profile。
大家可以参考[此处](https://vimeo.com/316165337)视频观看如何通过移动配置描述文件安装恶意chrome扩展程序。
## 五、检测方法
在前文中，我们简单介绍了投递chrome扩展的一种机制，可以通过移动配置描述文件实现扩展的静默及隐蔽安装。从防御角度来看，检测这类投递机制应该重点关注`profiles`命令及相关参数。这种检测机制对已经获得受害主机访问权限的攻击者而言非常有效。作为参考，这里给出安装profile的示例命令：`profiles
install -type=configuration -path=/path/to/profile.mobileconfig`。
相应的`osquery`规则类似于：`SELECT * FROM process_events WHERE cmdline=’%profiles
install%’;`。对于企业环境来说这可能不是最佳答案，但的确行之有效。另外还要注意一点，`osquery`现在已经包含了一个chrome扩展[表](https://osquery.io/schema/3.3.2#chrome_extensions)。此外，当用户通过UI安装profile时，`MCXCompositor`进程会将一个二进制plist写入`/Library/Managed
Preferences/username/`目录中。这个plist文件是移动配置描述文件的一个副本，文件名由配置描述文件中的`PayloadType`键值决定。
可能还有其他数据来源，能够更加可靠地检测使用移动配置描述文件的攻击技术，这里我们抛砖引玉，希望大家继续研究。
在获得初始访问权限及持久化方面，我们可以考虑使用Google Chrome扩展程序。红队人员及安全研究人员可以进一步研究Chrome
API，了解更多可用功能。