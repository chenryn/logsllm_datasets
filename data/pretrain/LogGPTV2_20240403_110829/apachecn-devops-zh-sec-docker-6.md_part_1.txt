# 六、使用 Docker 的内置安全功能
在本章中，我们将了解如何使用 Docker 工具来保护您的环境。我们将研究命令行工具和图形用户界面工具，您可以利用它们来发挥自己的优势。我们将在本章中介绍以下内容:
*   Docker 工具
    *   在您的环境中使用 TLS 有助于确保各部分安全通信
    *   使用只读容器帮助保护容器中的数据不被以某种形式操纵
*   Docker 安全基础
    *   内核命名空间
    *   对照组
    *   Linux 内核功能
# Docker 工具
在本节中，我们将介绍可以帮助您保护 Docker 环境的工具。这些选项内置在您已经在使用的 Docker 软件中。是时候学习如何启用或利用这些功能来帮助您安心，以确保通信安全；这是我们将讨论启用 TLS 的地方，TLS 是一种确保应用之间隐私的协议。它确保没有人监听通信。就当你在看电影，电话里的人说:*这条线安全吗？*网络传播也是这种想法。然后，我们将看看您如何利用只读容器来确保您提供的数据不会被任何人操纵。
## 使用 TLS
强烈建议使用 Docker Machine 来创建和管理您的 Docker 主机。它会自动将通信设置为使用 TLS。以下是如何验证由`docker-machine`创建的*默认*主机确实使用了 TLS。
其中一个重要的因素是知道你是否在使用 TLS，然后调整使用 TLS，如果你实际上没有使用 TLS。需要记住的重要一点是，如今，几乎所有的 Docker 工具都启用了 TLS，或者如果没有，它们似乎正在朝着这个目标努力。您可以使用 Docker Machine `inspect`命令来检查您的 Docker 主机是否正在使用 TLS。在下面，我们将看一看主机，看看它是否在启用 TLS 的情况下运行:
```
docker-machine inspect default
{
 "ConfigVersion": 3,
 "Driver": {
 "IPAddress": "192.168.99.100",
 "MachineName": "default",
 "SSHUser": "docker",
 "SSHPort": 50858,
 "SSHKeyPath": "/Users/scottgallagher/.docker/machine/machines/default/id_rsa",
 "StorePath": "/Users/scottgallagher/.docker/machine",
 "SwarmMaster": false,
 "SwarmHost": "tcp://0.0.0.0:3376",
 "SwarmDiscovery": "",
 "VBoxManager": {},
 "CPU": 1,
 "Memory": 2048,
 "DiskSize": 204800,
 "Boot2DockerURL": "",
 "Boot2DockerImportVM": "",
 "HostDNSResolver": false,
 "HostOnlyCIDR": "192.168.99.1/24",
 "HostOnlyNicType": "82540EM",
 "HostOnlyPromiscMode": "deny",
 "NoShare": false,
 "DNSProxy": false,
 "NoVTXCheck": false
 },
 "DriverName": "virtualbox",
 "HostOptions": {
 "Driver": "",
 "Memory": 0,
 "Disk": 0,
 "EngineOptions": {
 "ArbitraryFlags": [],
 "Dns": null,
 "GraphDir": "",
 "Env": [],
 "Ipv6": false,
 "InsecureRegistry": [],
 "Labels": [],
 "LogLevel": "",
 "StorageDriver": "",
 "SelinuxEnabled": false,
 "TlsVerify": true,
 "RegistryMirror": [],
 "InstallURL": "https://get.docker.com"
 },
 "SwarmOptions": {
 "IsSwarm": false,
 "Address": "",
 "Discovery": "",
 "Master": false,
 "Host": "tcp://0.0.0.0:3376",
 "Image": "swarm:latest",
 "Strategy": "spread",
 "Heartbeat": 0,
 "Overcommit": 0,
 "ArbitraryFlags": [],
 "Env": null
 },
 "AuthOptions": {
 "CertDir": "/Users/scottgallagher/.docker/machine/certs",
 "CaCertPath": "/Users/scottgallagher/.docker/machine/certs/ca.pem",
 "CaPrivateKeyPath": "/Users/scottgallagher/.docker/machine/certs/ca-key.pem",
 "CaCertRemotePath": "",
 "ServerCertPath": "/Users/scottgallagher/.docker/machine/machines/default/server.pem",
 "ServerKeyPath": "/Users/scottgallagher/.docker/machine/machines/default/server-key.pem",
 "ClientKeyPath": "/Users/scottgallagher/.docker/machine/certs/key.pem",
 "ServerCertRemotePath": "",
 "ServerKeyRemotePath": "",
 "ClientCertPath": "/Users/scottgallagher/.docker/machine/certs/cert.pem",
 "ServerCertSANs": [],
 "StorePath": "/Users/scottgallagher/.docker/machine/machines/default"
 }
 },
 "Name": "default"
}
```
从前面的输出中，我们可以关注下面一行:
```
 "SwarmHost": "tcp://0.0.0.0:3376",
```
这向我们表明，如果我们正在运行 **Swarm** ，该主机将使用安全的`3376`端口。现在，如果您没有使用 Docker Swarm，那么您可以忽略这一行。但是，如果您正在使用 Docker Swarm，那么这一行很重要。
只是退一步让我们来识别什么是 Docker Swarm。Docker Swarm 是 Docker 内的原生集群。它有助于将多个 Docker 主机转变为易于管理的单一虚拟主机:
```
 "AuthOptions": {
 "CertDir": "/Users/scottgallagher/.docker/machine/certs",
 "CaCertPath": "/Users/scottgallagher/.docker/machine/certs/ca.pem",
 "CaPrivateKeyPath": "/Users/scottgallagher/.docker/machine/certs/ca-key.pem",
 "CaCertRemotePath": "",
 "ServerCertPath": "/Users/scottgallagher/.docker/machine/machines/default/server.pem",
 "ServerKeyPath": "/Users/scottgallagher/.docker/machine/machines/default/server-key.pem",
 "ClientKeyPath": "/Users/scottgallagher/.docker/machine/certs/key.pem",
 "ServerCertRemotePath": "",
 "ServerKeyRemotePath": "",
 "ClientCertPath": "/Users/scottgallagher/.docker/machine/certs/cert.pem",
 "ServerCertSANs": [],
 "StorePath": "/Users/scottgallagher/.docker/machine/machines/default"
 }
```
这向我们表明，该主机实际上正在使用证书，因此我们知道它正在使用 TLS，但是我们如何从中得知呢？在下一节中，我们将看一看如何判断它确实在使用 TLS。
Docker Machine 还可以选择在顶级域名系统上运行所有内容。这是使用 Docker Machine 来管理您的 Docker 主机的最安全的方式。如果您开始使用自己的证书，这个设置可能会很棘手。默认情况下，Docker Machine 会存储您在`/Users//.docker/machine/certs/`中使用的证书。您可以从前面的输出中看到存储证书的计算机位置。
让我们看看如果我们的 Docker 主机利用 TLS，我们如何实现查看目标:
```
docker-machine ls
NAME      ACTIVE   URL          STATE     URL SWARM   DOCKER   ERRORS
default   *        virtualbox   Running   tcp://192.168.99.100:2376  v1.9.1 
```
这就是我们可以告诉它正在使用顶级域名的地方。Docker Machine 主机的不安全端口是即`2375`端口，该主机使用的是`2376`，这是 Docker Machine 的安全 TLS 端口。所以，这个主机，其实是在用 TLS 进行通信，让你安心知道通信是安全的。
## 只读容器
关于 `docker run`命令，我们将主要关注允许我们将容器内的所有内容设置为只读的选项。让我们看一个例子，并详细说明它的具体功能: