title:KeyDrown: Eliminating Software-Based Keystroke Timing Side-Channel
Attacks
author:Michael Schwarz and
Moritz Lipp and
Daniel Gruss and
Samuel Weiser and
Cl&apos;ementine Maurice and
Raphael Spreitzer and
Stefan Mangard
KeyDrown: Eliminating Software-Based Keystroke
Timing Side-Channel Attacks
Michael Schwarz∗, Moritz Lipp∗, Daniel Gruss∗, Samuel Weiser∗,
{michael.schwarz, moritz.lipp, daniel.gruss, samuel.weiser, raphael.spreitzer, stefan.mangard}@iaik.tugraz.at
Cl´ementine Maurice†, Raphael Spreitzer∗, Stefan Mangard∗
∗Graz University of Technology, Austria
†Univ Rennes, CNRS, IRISA, France
PI:EMAIL
Abstract—Besides cryptographic secrets, software-based side-
channel attacks also leak sensitive user input. The most accurate
attacks exploit cache timings or interrupt information to monitor
keystroke timings and subsequently infer typed words and sen-
tences. These attacks have also been demonstrated in JavaScript
embedded in websites by a remote attacker. We extend the state-
of-the-art with a new interrupt-based attack and the ﬁrst Prime+
Probe attack on kernel interrupt handlers. Previously proposed
countermeasures fail to prevent software-based keystroke timing
attacks as they do not protect keystroke processing through the
entire software stack.
We close this gap with KeyDrown, a new defense mechanism
against software-based keystroke timing attacks. KeyDrown in-
jects a large number of fake keystrokes in the kernel, making the
keystroke interrupt density uniform over time, i.e., independent
of the real keystrokes. All keystrokes, including fake keystrokes,
are carefully propagated through the shared library to make
them indistinguishable by exploiting the speciﬁc properties of
software-based side channels. We show that attackers cannot
distinguish fake keystrokes from real keystrokes anymore and
we evaluate KeyDrown on a commodity notebook as well as on
Android smartphones. We show that KeyDrown eliminates any
advantage an attacker can gain from using software-based side-
channel attacks.
I.
INTRODUCTION
Modern computer systems leak sensitive user information
through side channels. Among software-based side channels,
information can leak, for example, from the system or mi-
croarchitectural components such as the CPU cache [12] or the
DRAM [43]. Historically, side-channel attacks have exploited
these information leaks to infer cryptographic secrets [31],
[41], [58], whereas more recent attacks even target keystroke
timings and sensitive user input directly [17], [40], [43].
In general, keystroke attacks aim to monitor when a key-
board input occurs, which either allows inferring user input
† During the work the author was afﬁliated with Graz University of
Technology, Austria
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23027
www.ndss-symposium.org
directly or launching follow-up attacks [50], [60]. In particular,
mobile devices may expose this information through sensor
data, but practical mitigations [48] have already been proposed.
Furthermore, restrictions (on the procfs) have already been
implemented in Android O [14], [25] and are likely to be up-
streamed to the main Linux kernel. Consequently, attackers are
left with side channels to obtain keystroke timings. Especially
microarchitectural attacks allow monitoring memory accesses
with a granularity of single cache lines, and thus also allow
recovering keystroke timings with a high accuracy.
Keystroke timing attacks are hard to mitigate, compared
to side-channel attacks on cryptographic implementations. In-
deed, attacks on cryptographic implementations can be miti-
gated with changes in the algorithms, such as making execution
paths independent of secret data. On the contrary, user input
travels a long way, from the hardware interrupt through the
operating system and shared libraries up to the user space
application. In order to detect a keystroke, an attacker just
needs to probe a single spot in the keystroke path for activity.
In the general case, keystrokes are non-repeatable low-
frequency events, i.e., if the attacker misses a keystroke, there
is no way to repeat the measurement. However, an attacker
that explicitly targets a password ﬁeld can record more timing
traces when the user enters the password again. While these
traces have variations in timing, due to the variance of the
typing behavior, it allows an attacker to combine multiple
traces and to perform a more sophisticated attack. This makes
attacks on password ﬁelds even harder to mitigate.
State-of-the art defense mechanisms [14], [25], [48] only
restrict access to the system interfaces providing interrupt
statistics [10], [60], and do not address all the layers involved
in keystroke processing. Therefore,
these defenses do not
prevent all software-based keystroke timing attacks. We ﬁrst
demonstrate two novel side-channel attacks to infer keystroke
timings, that work on systems where previous keystroke timing
attacks are mitigated [14], [25]. The ﬁrst attack uses the
rdtsc instruction to determine the execution time of an
interrupt service routine (ISR), which is then used to determine
whether or not the interrupt was caused by the keyboard.
The second attack uses Multi-Prime+Probe on the kernel to
determine when a keystroke is being processed in the kernel.
Based on these investigations and state-of-the-art attacks,
we identify three essential requirements for successful elimi-
nation of keystroke timing attacks on the entire software stack.
In the presence of the countermeasure:
1) Any classiﬁer based on a single-trace side-channel attack
may not provide any advantage over a random classiﬁer.
2) The number of side-channel traces a classiﬁer requires to
detect all keystrokes correctly must be impractically high.
3) The implementation of the countermeasure may not leak
information about its activity or computations.
Based on the
identiﬁed requirements, we present
KeyDrown, a new defense mechanism against keystroke timing
attacks exploiting software-based side channels. KeyDrown
covers the entire software stack, from the interrupt source
to the user space buffer storing the keystroke, both on x86
systems and on ARM devices. We cover both the general case
where an attacker can only obtain a single trace, and the case
of password input where an attacker can obtain multiple traces.
KeyDrown works in three layers:
1) To mitigate interrupt-based attacks, KeyDrown injects a
large number of fake keyboard interrupts, making the
keystroke interrupt density uniform over time, i.e., inde-
pendent of the real keystrokes. Prime+Probe attacks on
the kernel module are mitigated by unifying the control
ﬂow and data accesses of real and fake keystrokes such
that there is no difference visible in the cache or in the
execution time.
2) To mitigate Flush+Reload and Prime+Probe attacks on
shared libraries, KeyDrown runs through the same code
path in the shared library for all, fake and real, keystrokes.
3) To mitigate Prime+Probe attacks on password entry ﬁelds,
KeyDrown updates the widget buffer for every fake and
real keystroke.
We evaluate KeyDrown on several state-of-the-art attacks
as well as our two novel attacks. In all cases, KeyDrown
eliminates any advantage an attacker can gain from the side
channels, i.e., the attacker cannot deduce sensitive information
from the side channel.
We provide a proof-of-concept implementation, which can
be installed as a Debian package compatible with the lat-
est long-term support release of Ubuntu (16.04). It runs on
commodity operating systems with unmodiﬁed applications
and unmodiﬁed compilers. KeyDrown is started automatically
and is entirely transparent to the user, i.e., requires no user
interaction. Although our countermeasure inherently executes
more code than an unprotected system, it has no noticeable
effect on keystroke latency. Finally, we also deﬁne what
KeyDrown cannot protect against, such as word completion
lookups or immediate forwarding of single keystrokes over
the network.
Contributions. The contributions of this work are:
1) We present two novel attacks to recover keystroke tim-
ings, that work in environments where previous attacks
fail [14], [25].
2) We identify three essential requirements for an effective
countermeasure against keystroke attacks.
3) We propose KeyDrown, a multi-layered solution to miti-
gate keystroke timing attacks.1
4) We evaluate KeyDrown and show that it eliminates all
known attacks.
1The code and a demo video are available in a GitHub repository:
https://github.com/IAIK/keydrown.
2
Fig. 1. Linux interrupt handling on x86.
Outline. The remainder of the paper is organized as follows. In
Section II, we provide background information. In Section III,
we introduce our novel attacks and deﬁne requirements a
defense mechanism has to provide to successfully mitigate at-
tacks. In Section IV, we describe the three layers of KeyDrown.
In Section V, we demonstrate that KeyDrown successfully
mitigates keystroke timing attacks. In Section VI, we discuss
limitations and future work. We conclude in Section VII.
II. BACKGROUND
In this section, we provide background information on
interrupt handling as well as on software-based side channels
that leak keystroke timing information.
A. Linux Interrupt Handling
Interrupt handling is one of the low-level
tasks of an
operating system and thus highly architecture and machine
dependent. This section covers the general design of how
interrupts and their handling within the Linux kernel work on
both x86 PCs and ARMv7 smartphones.
1) Interrupts on x86 and x86 64: Figure 1 shows a high-
level overview of interrupt handling on a dual-core x86 CPU.
Interrupts are handled by the Advanced Programmable In-
terrupt Controller (APIC) [22]. The APIC receives interrupts
from different sources: locally and externally connected I/O
devices, inter-processor interrupts, APIC internal interrupts,
performance monitoring interrupts, and thermal sensor inter-
rupts. On multi-core systems, every CPU core has a local APIC
(LAPIC) to handle interrupts. All LAPICs are connected to
one or more I/O APICs which handle the actual hardware
interrupts. The I/O APICs are part of the chipset and provide
multi-core interrupt management by distributing the interrupts
to the LAPICs as described in the ACPI system description
tables [37].
Interrupt-generating hardware, such as the keyboard,
is
). The I/O APIC uses a
connected to an I/O APIC pin (
redirection table to redirect hardware interrupts and the raised
interrupt vector to the destination LAPIC (
) [21]. In the
case of multiple conﬁgured LAPICs for one interrupt, the I/O
APIC chooses a CPU based on task priorities in a round-robin
fashion [6].
The LAPIC receiving the interrupt vector fetches the corre-
)
sponding entry from the Interrupt Descriptor Table (IDT) (
which is set up by the operating system. The IDT contains an
offset to the Interrupt Service Routine (ISR) for every interrupt
vector. The CPU saves the current CPU ﬂags and jumps to the
) which then handles the interrupt.
interrupt service routine (
HardwareI/OAPICredirectiontable12Core#0LAPICCore#1LAPICIDT34ISR561234Flush+Reload. Flush+Reload [18], [58] is a technique that
allows an attacker to monitor a victim’s cache accesses at a
granularity of a single cache line. The attacker ﬂushes a cache
line, lets the victim perform an operation, and then reloads and
times the access to the cache line. A low timing indicates that
the victim accessed the cache line. While very accurate, it can
only be performed on shared memory, i.e., shared libraries
or binary code. Flush+Reload can neither be performed on
dynamic buffers in a user program nor on code or data in the
kernel. Gruss et al. [17] presented cache template attacks as
a technique based on Flush+Reload to automatically ﬁnd and
exploit cache-based leakage in programs.
Prime+Probe. Prime+Probe [31], [41], [42] is a technique
that allows an attacker to monitor a victim’s cache accesses at
a granularity of a cache set. The attacker primes a cache set,
i.e., ﬁlls the cache set with its own cache lines. It then lets the
victim perform an operation. Finally, it probes its own cache
lines i.e., measures the access time to them. This technique
does not require any shared memory between the attacker
and the victim, but it is difﬁcult due to the mapping between
physical addresses and cache sets and slices. As Prime+Probe
only relies on measuring the latency of memory accesses, it can
be performed on any part of the software stack. It is possible to
perform Prime+Probe on dynamically generated data [30] as
well as kernel memory [41]. Preventing Prime+Probe attacks
is difﬁcult due to the huge attack surface and the fact that
Prime+Probe uses only innocuous operations such as memory
accesses on legitimately allocated memory, as well as timing
measurements.
DRAMA. Besides the cache,
the DRAM design also
introduces side channels [43], i.e., timing differences caused
by the DRAM row buffer. A DRAM bank contains a row
buffer caching an entire DRAM row (8 KB). Requests to the
currently active row are served from this buffer, resulting in
a fast access, whereas other requests are signiﬁcantly slower.
DRAM side-channel attacks do not require shared memory
and work across CPUs of the same machine sharing a DRAM
module.
C. Keystroke Timing Attacks
Keystrokes from Keystroke Timing. Keystroke timing
attacks attempt to recover what was typed by the user by
analyzing keystroke timing measurements. These timings show
characteristic patterns of the user, which depend on several
factors such as keystroke sequences on the level of single
letters, bigrams, syllables or words as well as keyboard layout
and typing experience [44]. Existing attacks train probabilistic
classiﬁers like hidden Markov models or neural networks
to infer known words or to reduce the password-guessing
complexity [49], [50], [60].
Most keystroke timing attacks exploit the inter-keystroke
timing, i.e., the timing difference between two keystrokes, but
according to Idrus et al. [19] combinations of key press and key
release events could also be exploited. Pinet et al. [44] report
inter-keystroke interval values between 160 ms and 200 ms for
skilled typists. Lee et al. [27] deﬁne the values depending on
whether a text sequence was trained or entered for the ﬁrst
time, resulting in inter-keystroke intervals between 125 ms and
215 ms with a variance between 43 ms and 106 ms, again for
trained and untrained text sequences.
Fig. 2. Linux interrupt handling on ARM.
After processing, the interrupt service routine acknowl-
edges the interrupt by sending an end-of-interrupt (EOI) to
the LAPIC (
). It then returns using the iret instruction
to restore the CPU ﬂags and to enable interrupts again. The
LAPIC forwards the EOI to the I/O APIC (
) which then
resets the interrupt line to enable the corresponding interrupt
again.
2) Interrupts on ARM: Figure 2 shows a high-level
overview of interrupt handling on a dual-core ARMv7 CPU.
interrupts are handled by the General Interrupt