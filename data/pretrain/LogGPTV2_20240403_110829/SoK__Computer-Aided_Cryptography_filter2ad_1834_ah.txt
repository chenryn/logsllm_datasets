Methods and Security Protocols, 1999.
[38] N. Durgin, P. Lincoln, J. C. Mitchell, and A. Scedrov, “Multiset
rewriting and the complexity of bounded security protocols,” Journal
of Computer Security, vol. 12, no. 2, pp. 247–311, 2004.
[39] S. Delaune and L. Hirschi, “A survey of symbolic methods for
establishing equivalence-based properties in cryptographic protocols,”
J. Log. Algebr. Meth. Program., vol. 87, pp. 127–144, 2017.
[40] J. Dreier, C. Dum´enil, S. Kremer, and R. Sasse, “Beyond subterm-
convergent equational theories in automated veriﬁcation of stateful
protocols,” in International Conference on Principles of Security and
Trust (POST). Springer-Verlag, 2017.
[41] C. Cremers and D. Jackson, “Prime, order please! revisiting small
subgroup and invalid curve attacks on protocols using Difﬁe-Hellman,”
in IEEE Computer Security Foundations Symposium (CSF).
IEEE,
2019, pp. 78–93.
[42] L. C. Paulson, Isabelle - A Generic Theorem Prover (with a contribu-
tion by T. Nipkow), ser. LNCS. Springer, 1994, vol. 828.
[43] R. Milner, Communicating and mobile systems - the Pi-calculus.
Cambridge University Press, 1999.
[44] M. Abadi and A. D. Gordon, “A calculus for cryptographic protocols:
The spi calculus,” in ACM Conference on Computer and Communica-
tions Security (CCS). ACM, 1997, pp. 36–47.
[45] M. Abadi and C. Fournet, “Mobile values, new names, and secure com-
munication,” in Symposium on Principles of Programming Languages
(POPL). ACM, 2001, pp. 104–115.
[46] K. Bhargavan, C. Fournet, R. Corin, and E. Zalinescu, “Veriﬁed
cryptographic implementations for TLS,” ACM Trans. Inf. Syst. Secur.,
vol. 15, no. 1, pp. 3:1–3:32, 2012.
[47] N. Kobeissi, K. Bhargavan, and B. Blanchet, “Automated veriﬁcation
for secure messaging protocols and their implementations: A symbolic
and computational approach,” in IEEE European Symposium on Secu-
rity and Privacy (EuroS&P).
IEEE, 2017, pp. 435–450.
[48] N. Kobeissi, G. Nicolas, and K. Bhargavan, “Noise explorer: Fully
automated modeling and veriﬁcation for arbitrary noise protocols,”
in IEEE European Symposium on Security and Privacy (EuroS&P).
IEEE, 2019, pp. 356–370.
[49] D. A. Basin, J. Dreier, L. Hirschi, S. Radomirovic, R. Sasse, and
V. Stettler, “A formal analysis of 5g authentication,” in ACM Con-
ference on Computer and Communications Security (CCS). ACM,
2018, pp. 1383–1396.
[50] C. Cremers, M. Dehnel-Wild, and K. Milner, “Secure authentication
in the grid: A formal analysis of DNP3 SAv5,” Journal of Computer
Security, vol. 27, no. 2, pp. 203–232, 2019.
[51] G. Girol, L. Hirschi, R. Sasse, D. Jackson, C. Cremers, and D. Basin,
“A Spectral Analysis of Noise: A Comprehensive, Automated, Formal
Analysis of Difﬁe-Hellman Protocols,” in Proc. of USENIX Security,
2020.
[52] B. Blanchet, M. Abadi, and C. Fournet, “Automated veriﬁcation of
selected equivalences for security protocols,” Journal of Logic and
Algebraic Programming, vol. 75, no. 1, pp. 3–51, Feb.–Mar. 2008.
[53] S. Santiago, S. Escobar, C. Meadows, and J. Meseguer, “A formal
deﬁnition of protocol indistinguishability and its veriﬁcation using
Maude-NPA,” in Security and Trust Management (STM), ser. LNCS,
vol. 8743. Berlin, Heidelberg: Springer, Sep. 2014, pp. 162–177.
[54] D. Basin, J. Dreier, and R. Casse, “Automated symbolic proofs of
observational equivalence,” in ACM Conference on Computer and
Communications Security (CCS). New York, NY: ACM Press, Oct.
2015, pp. 1144–1155.
[55] G. Barthe, B. Gr´egoire, and B. Schmidt, “Automated proofs of pairing-
based cryptography,” in ACM Conference on Computer and Commu-
nications Security (CCS). ACM, 2015, pp. 1156–1168.
[56] G. Barthe, B. Gr´egoire, and S. Z. B´eguelin, “Formal certiﬁcation
of code-based cryptographic proofs,” in Symposium on Principles of
Programming Languages (POPL). ACM, 2009, pp. 90–101.
[57] D. A. Basin, A. Lochbihler, and S. R. Seﬁdgar, “CryptHOL: Game-
based proofs in higher-order logic,” IACR Cryptology ePrint Archive,
vol. 2017, p. 753, 2017.
[58] B. Blanchet, “A computationally sound mechanized prover for security
protocols,” IEEE Transactions on Dependable and Secure Computing,
vol. 5, no. 4, pp. 193–207, Oct.–Dec. 2008.
[59] G. Barthe, B. Gr´egoire, S. Heraud, and S. Z. B´eguelin, “Computer-
aided security proofs for the working cryptographer,” in International
Cryptology Conference (CRYPTO), ser. LNCS, vol. 6841.
Springer,
2011, pp. 71–90.
[60] N. Swamy, C. Hritcu, C. Keller, A. Rastogi, A. Delignat-Lavaud,
S. Forest, K. Bhargavan, C. Fournet, P. Strub, M. Kohlweiss, J. K.
Zinzindohoue, and S. Z. B´eguelin, “Dependent
types and multi-
monadic effects in F,” in Symposium on Principles of Programming
Languages (POPL). ACM, 2016, pp. 256–270.
[61] A. Petcher and G. Morrisett, “The foundational cryptography frame-
work,” in International Conference on Principles of Security and Trust
(POST), ser. LNCS, vol. 9036. Springer, 2015, pp. 53–72.
[62] G. Barthe, J. M. Crespo, B. Gr´egoire, C. Kunz, Y. Lakhnech,
B. Schmidt, and S. Z. B´eguelin, “Fully automated analysis of padding-
based encryption in the computational model,” in ACM Conference
on Computer and Communications Security (CCS). ACM, 2013, pp.
1247–1260.
[63] “The coq proof assistant.” [Online]. Available: https://coq.inria.fr/
[64] “Isabelle.” [Online]. Available: https://isabelle.in.tum.de/
[65] C. W. Barrett and C. Tinelli, “Satisﬁability modulo theories,” in
Handbook of Model Checking. Springer, 2018, pp. 305–343.
[66] L. M. de Moura and N. Bjørner, “Z3: an efﬁcient SMT solver,” in
International Conference on Tools and Algorithms for the Construction
and Analysis of Systems (TACAS), ser. LNCS, vol. 4963.
Springer,
2008, pp. 337–340.
[67] B. Lipp, B. Blanchet, and K. Bhargavan, “A mechanised cryptographic
proof of the wireguard virtual private network protocol,” in IEEE
European Symposium on Security and Privacy (EuroS&P).
IEEE,
2019, pp. 231–246.
[68] J. B. Almeida, M. Barbosa, G. Barthe, M. Campagna, E. Cohen,
B. Gr´egoire, V. Pereira, B. Portela, P. Strub, and S. Tasiran, “A
machine-checked proof of security for AWS key management service,”
in ACM Conference on Computer and Communications Security (CCS).
ACM, 2019, pp. 63–78.
[69] J. B. Almeida, C. Baritel-Ruet, M. Barbosa, G. Barthe, F. Dupressoir,
B. Gr´egoire, V. Laporte, T. Oliveira, A. Stoughton, and P. Strub,
“Machine-checked proofs for cryptographic standards: Indifferentiabil-
ity of sponge and secure high-assurance implementations of SHA-3,” in
ACM Conference on Computer and Communications Security (CCS).
ACM, 2019, pp. 1607–1622.
[70] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P. Strub,
“Implementing TLS with veriﬁed cryptographic security,” in IEEE
Symposium on Security and Privacy (S&P).
IEEE Computer Society,
2013, pp. 445–459.
[71] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, P.-Y. Strub, and
S. Zanella-B´eguelin, “Proving the TLS handshake secure (as it is),” in
International Cryptology Conference (CRYPTO), 2014.
[72] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Pironti, and P. Strub,
“Triple handshakes and cookie cutters: Breaking and ﬁxing authenti-
cation over TLS,” in IEEE Symposium on Security and Privacy (S&P).
IEEE Computer Society, 2014, pp. 98–113.
[73] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P. Strub, and J. K. Zinzindohoue, “A messy
state of the union: Taming the composite state machines of TLS,” in
IEEE Symposium on Security and Privacy (S&P).
IEEE Computer
Society, 2015, pp. 535–552.
[74] C. E. Landwehr, D. Boneh, J. C. Mitchell, S. M. Bellovin, S. Landau,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:25 UTC from IEEE Xplore.  Restrictions apply. 
792
and M. E. Lesk, “Privacy and cybersecurity: The next 100 years,” Proc.
of the IEEE, vol. 100, no. Centennial-Issue, pp. 1659–1673, 2012.
[75] K. Liao, M. A. Hammer, and A. Miller, “ILC: a calculus for compos-
able, computational cryptography,” in ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI). ACM,
2019, pp. 640–654.
[76] R. Canetti, A. Stoughton, and M. Varia, “EasyUC: Using EasyCrypt
to mechanize proofs of universally composable security,” in IEEE
Computer Security Foundations Symposium (CSF).
IEEE, 2019, pp.
167–183.
[77] A. Lochbihler, S. R. Seﬁdgar, D. A. Basin, and U. Maurer, “Formal-
izing constructive cryptography using CryptHOL,” in IEEE Computer
Security Foundations Symposium (CSF).
IEEE, 2019, pp. 152–166.
[78] J. A. Akinyele, M. Green, and S. Hohenberger, “Using SMT solvers to
automate design tasks for encryption and signature schemes,” in 2013
ACM SIGSAC Conference on Computer and Communications Security,
CCS’13, Berlin, Germany, November 4-8, 2013. ACM, 2013, pp. 399–
410.
[79] A. J. Malozemoff, J. Katz, and M. D. Green, “Automated analysis
and synthesis of block-cipher modes of operation,” in IEEE Computer
Security Foundations Symposium (CSF).
IEEE Computer Society,
2014, pp. 140–152.
[80] V. T. Hoang, J. Katz, and A. J. Malozemoff, “Automated analysis and
synthesis of authenticated encryption schemes,” in ACM Conference
on Computer and Communications Security (CCS). ACM, 2015, pp.
84–95.
[81] G. Barthe, E. Fagerholm, D. Fiore, A. Scedrov, B. Schmidt, and
M. Tibouchi, “Strongly-optimal structure preserving signatures from
type II pairings: synthesis and lower bounds,” IET Information Security,
vol. 10, no. 6, pp. 358–371, 2016.
[82] B. Parno, J. Howell, C. Gentry, and M. Raykova, “Pinocchio: nearly
practical veriﬁable computation,” Commun. ACM, vol. 59, no. 2, pp.
103–112, 2016.
[83] C. Costello, C. Fournet, J. Howell, M. Kohlweiss, B. Kreuter,
M. Naehrig, B. Parno, and S. Zahur, “Geppetto: Versatile veriﬁable
computation,” in IEEE Symposium on Security and Privacy (S&P),
2015, pp. 253–270.
[84] S. T. V. Setty, V. Vu, N. Panpalia, B. Braun, A. J. Blumberg, and
M. Walﬁsh, “Taking proof-based veriﬁed computation a few steps
closer to practicality,” in USENIX Security Symposium (USENIX).
USENIX Association, 2012, pp. 253–268.
[85] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza,
“SNARKs for C: verifying program executions succinctly and in zero
knowledge,” in International Cryptology Conference (CRYPTO), ser.
LNCS, vol. 8043. Springer, 2013, pp. 90–108.
[86] J. B. Almeida, E. Bangerter, M. Barbosa, S. Krenn, A. Sadeghi, and
T. Schneider, “A certifying compiler for zero-knowledge proofs of
knowledge based on sigma-protocols,” in European Symposium on
Research in Computer Security (ESORICS), 2010, pp. 151–167.
[87] M. Fredrikson and B. Livshits, “Zø: An optimizing distributing zero-
knowledge compiler,” in USENIX Security Symposium (USENIX),
2014, pp. 909–924.
[88] S. Meiklejohn, C. C. Erway, A. K¨upc¸ ¨u, T. Hinkle, and A. Lysyan-
skaya, “ZKPDL: A language-based system for efﬁcient zero-knowledge
proofs and electronic cash,” in USENIX Security Symposium (USENIX).
USENIX Association, 2010, pp. 193–206.
[89] M. Backes, M. Maffei, and K. Pecina, “Automated synthesis of secure
distributed applications,” in Symposium on Network and Distributed
System Security (NDSS). The Internet Society, 2012.
[90] M. Hastings, B. Hemenway, D. Noble, and S. Zdancewic, “Sok:
General purpose compilers for secure multi-party computation,” in
IEEE Symposium on Security and Privacy (S&P), 2019, pp. 1220–
1237.
[91] J. B. Almeida, M. Barbosa, E. Bangerter, G. Barthe, S. Krenn, and
S. Z. B´eguelin, “Full proof cryptography: veriﬁable compilation of
efﬁcient zero-knowledge protocols,” in ACM Conference on Computer
and Communications Security (CCS). ACM, 2012, pp. 488–500.
[92] J. B. Almeida, M. Barbosa, G. Barthe, F. Dupressoir, B. Gr´egoire,
V. Laporte, and V. Pereira, “A fast and veriﬁed software stack for
secure function evaluation,” in ACM Conference on Computer and
Communications Security (CCS). ACM, 2017, pp. 1989–2006.
[93] C. Fournet, C. Keller, and V. Laporte, “A certiﬁed compiler for veriﬁ-
able computing,” in IEEE Computer Security Foundations Symposium
(CSF), 2016, pp. 268–280.
[94] A. Rastogi, N. Swamy, and M. Hicks, “Wys*: A DSL for veriﬁed secure
multi-party computations,” in International Conference on Principles
of Security and Trust (POST), 2019, pp. 99–122.
[95] B. Blanchet, “Security protocol veriﬁcation: Symbolic and computa-
tional models,” in International Conference on Principles of Security
and Trust (POST), ser. LNCS, vol. 7215. Springer, 2012, pp. 3–29.
[96] V. Cortier, S. Kremer, and B. Warinschi, “A survey of symbolic
methods in computational analysis of cryptographic systems,” J. Autom.
Reasoning, vol. 46, no. 3-4, pp. 225–259, 2011.
[97] R. Dockins, A. Foltzer, J. Hendrix, B. Huffman, D. McNamee, and
A. Tomb, “Constructing semantic models of programs with the software
analysis workbench,” in International Conference on Veriﬁed Software.
Theories, Tools, and Experiments (VSTTE), ser. LNCS, vol. 9971, 2016,
pp. 56–72.
[98] Y. Fu, J. Liu, X. Shi, M. Tsai, B. Wang, and B. Yang, “Signed
cryptographic program veriﬁcation with typed cryptoline,” in ACM
Conference on Computer and Communications Security (CCS). ACM,
2019, pp. 1591–1606.
[99] K. R. M. Leino, “Dafny: An automatic program veriﬁer for functional
correctness,” in International Conference on Logic for Programming,
Artiﬁcial Intelligence, and Reasoning (LPAR), ser. LNCS, vol. 6355.
Springer, 2010, pp. 348–370.
[100] P. Cuoq, F. Kirchner, N. Kosmatov, V. Prevosto, J. Signoles, and
B. Yakobowski, “Frama-c - A software analysis perspective,” in In-
ternational Conference on Software Engineering and Formal Methods
(SEFM), ser. LNCS, vol. 7504. Springer, 2012, pp. 233–247.
[101] D. J. Bernstein and P. Schwabe, “gfverif: Fast and easy veriﬁcation
of ﬁnite-ﬁeld arithmetic,” 2016. [Online]. Available: http://gfverif.
cryptojedi.org
[102] J. B. Almeida, M. Barbosa, G. Barthe, A. Blot, B. Gr´egoire, V. La-
porte, T. Oliveira, H. Pacheco, B. Schmidt, and P. Strub, “Jasmin:
High-assurance and high-speed cryptography,” in ACM Conference on
Computer and Communications Security (CCS).
ACM, 2017, pp.
1807–1823.
[103] B. Bond, C. Hawblitzel, M. Kapritsos, K. R. M. Leino, J. R. Lorch,
B. Parno, A. Rane, S. T. V. Setty, and L. Thompson, “Vale: Verifying
high-performance cryptographic assembly code,” in USENIX Security
Symposium (USENIX). USENIX Association, 2017, pp. 917–934.
[104] A. Fromherz, N. Giannarakis, C. Hawblitzel, B. Parno, A. Rastogi, and
N. Swamy, “A veriﬁed, efﬁcient embedding of a veriﬁable assembly
language,” PACMPL, vol. 3, no. POPL, pp. 63:1–63:30, 2019.
[105] A. W. Appel, “Veriﬁed software toolchain - (invited talk),” in European
Symposium on Programming (ESOP), ser. LNCS, vol. 6602. Springer,
2011, pp. 1–17.
[106] J. Filliˆatre and A. Paskevich, “Why3 - where programs meet provers,”
in European Symposium on Programming (ESOP), ser. LNCS, vol.
7792. Springer, 2013, pp. 125–128.
[107] D. J. Bernstein and T. Lange, “ebacs: Ecrypt benchmarking of
cryptographic systems,” 2009. [Online]. Available: https://bench.cr.yp.
to
[108] Z. Durumeric, J. Kasten, D. Adrian, J. A. Halderman, M. Bailey,
F. Li, N. Weaver, J. Amann, J. Beekman, M. Payer, and V. Paxson,
“The matter of heartbleed,” in Internet Measurement Conference (IMC).
ACM, 2014, pp. 475–488.
[109] S. Gueron and V. Krasnov, “The fragility of AES-GCM authentication
algorithm,” in Proc. of the Conference on Information Technology: New
Generations, Apr. 2014.
[110] B. B. Brumley, M. Barbosa, D. Page, and F. Vercauteren, “Practical
realisation and elimination of an ecc-related software bug attack,” in
Cryptographers’ Track at the RSA Conference (CT-RSA), ser. LNCS,
vol. 7178. Springer, 2012, pp. 171–186.
[111] X. Leroy, “Formal veriﬁcation of a realistic compiler,” Commun. ACM,
vol. 52, no. 7, pp. 107–115, 2009.
[112] T. Oliveira, J. L. Hernandez, H. Hisil, A. Faz-Hern´andez, and
F. Rodr´ıguez-Henr´ıquez, “How to (pre-)compute a ladder - improving
the performance of X25519 and X448,” in International Conference
on Selected Areas in Cryptography (SAC), ser. LNCS, vol. 10719.
Springer, 2017, pp. 172–191.
[113] T. Chou, “Sandy2x: New curve25519 speed records,” in International
Conference on Selected Areas in Cryptography (SAC), ser. LNCS, vol.
9566. Springer, 2015, pp. 145–160.
[114] Y. Chen, C. Hsu, H. Lin, P. Schwabe, M. Tsai, B. Wang, B. Yang,
and S. Yang, “Verifying curve25519 software,” in ACM Conference
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:25 UTC from IEEE Xplore.  Restrictions apply. 
793
on Computer and Communications Security (CCS). ACM, 2014, pp.
299–309.
[115] “curve25519-donna: Implementations of a fast elliptic-curve Difﬁe-
Hellman primitive,” https://github.com/agl/curve25519-donna.
[116] D. J. Bernstein, “Curve25519: New Difﬁe-Hellman speed records,” in
IACR International Conference on Practice and Theory of Public-Key
Cryptography (PKC), ser. LNCS, vol. 3958. Springer, 2006, pp. 207–
228.
[117] J. B. Almeida, M. Barbosa, G. Barthe, B. Gr´egoire, A. Kout-
sos, V. Laporte, T. Oliveira, and P. Strub, “The last mile: High-
assurance and high-speed cryptographic implementations,” CoRR, vol.
abs/1904.04606, 2019.