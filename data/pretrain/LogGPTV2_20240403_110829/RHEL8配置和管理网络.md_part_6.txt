    -   在远程子网中查找 IP 地址。
        对于 IPv4：
        ``` literallayout
        # ping 198.162.3.1
        ```
        对于 IPv6：
        ``` literallayout
        # ping 2001:db8:2::1
        ```
        ::: itemizedlist
        -   如果命令失败，则使用 ping 默认网关来验证设置。
            对于 IPv4：
            ``` literallayout
            # ping 192.0.2.254
            ```
            对于 IPv6：
            ``` literallayout
            # ping 2001:db8:1::fffe
            ```
        :::
    :::
4.  使用 `host`{.literal} 实用程序验证名称解析是否正常工作。例如：
    ``` literallayout
    # host client.example.com
    ```
    如果命令返回任何错误，如 `connection timed out`{.literal} 或
    `no servers could be reached`{.literal}，请验证您的 DNS 设置。
:::
::: orderedlist
**故障排除步骤**
1.  如果连接失败，或者网络接口在上线和关闭状态间切换：
    ::: itemizedlist
    -   确保网络电缆插入到主机和交换机。
    -   检查连接失败是否只存在于这个主机上，或者其他连接到该服务器连接的同一交换机的主机中。
    -   验证网络电缆和网络接口是否如预期工作。执行硬件诊断步骤并替换有缺陷的电缆和网络接口卡。
    :::
:::
如果磁盘中的配置与设备中的配置不匹配，则启动或重启 NetworkManager
会创建一个代表该设备的配置的内存连接。有关详情以及如何避免这个问题，请参阅
[NetworkManager
服务重启后复制连接](https://access.redhat.com/solutions/3068421){.link}
::: itemizedlist
**其它资源**
-   `nm-settings(5)`{.literal} man page
-   `nmcli(1)`{.literal} man page
-   [配置 NetworkManager
    以避免使用特定配置集提供默认网关](#managing-the-default-gateway-setting_configuring-and-managing-networking.html#proc_configuring-networkmanager-to-avoid-using-a-specific-profile-to-provide-a-default-gateway_managing-the-default-gateway-setting "配置 NetworkManager 以避免使用特定配置集提供默认网关"){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-an-ethernet-connection_configuring-and-managing-networking.html#proc_configuring-a-static-ethernet-connection-using-nmstatectl_configuring-an-ethernet-connection}使用 nmstatectl 配置静态以太网连接 {.title}
:::
这个步骤描述了如何使用 `nmstatectl`{.literal} 工具为 `enp7s0`{.literal}
设备配置以太网连接：
::: itemizedlist
-   静态 IPv4 地址 - `192.0.2.1`{.literal}，子网掩码为 `/24`{.literal}
-   静态 IPv6 地址 - `2001:db8:1::1`{.literal}，子网掩码为
    `/64`{.literal}
-   IPv4 默认网关 - `192.0.2.254`{.literal}
-   IPv6 默认网关 - `2001:db8:1::fffe`{.literal}
-   IPv4 DNS 服务器 - `192.0.2.200`{.literal}
-   IPv6 DNS 服务器 - `2001:db8:1::ffbb`{.literal}
-   DNS 搜索域 - `example.com`{.literal}
:::
`nmstatectl`{.literal}
工具确保设置配置后结果与配置文件匹配。如果有任何失败，`nmstatectl`{.literal}
会自动回滚更改以避免系统处于错误状态。
该流程以 YAML 格式定义接口配置。或者，您也可以以 JSON 格式指定配置：
::: itemizedlist
**先决条件**
-   已安装 `nmstate`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  创建包含以下内容的 YAML 文件，如
    `~/create-ethernet-profile.yml`{.literal} ：
    ``` literallayout
    ---
    interfaces:
    - name: enp7s0
      type: ethernet
      state: up
      ipv4:
        enabled: true
        address:
        - ip: 192.0.2.1
          prefix-length: 24
        dhcp: false
      ipv6:
        enabled: true
        address:
        - ip: 2001:db8:1::1
          prefix-length: 64
        autoconf: false
        dhcp: false
    routes:
      config:
      - destination: 0.0.0.0/0
        next-hop-address: 192.0.2.254
        next-hop-interface: enp7s0
      - destination: ::/0
        next-hop-address: 2001:db8:1::fffe
        next-hop-interface: enp7s0
    dns-resolver:
      config:
        search:
        - example.com
        server:
        - 192.0.2.200
        - 2001:db8:1::ffbb
    ```
2.  将设置应用到系统：
    ``` literallayout
    # nmstatectl set ~/create-ethernet-profile.yml
    ```
:::
::: orderedlist
**验证步骤**
1.  显示设备和连接的状态：
    ``` literallayout
    # nmcli device status
    DEVICE      TYPE      STATE      CONNECTION
    enp7s0      ethernet  connected  enp7s0
    ```
2.  显示连接配置集的所有设置：
    ``` literallayout
    # nmcli connection show enp7s0
    connection.id:              enp7s0
    connection.uuid:            b6cdfa1c-e4ad-46e5-af8b-a75f06b79f76
    connection.stable-id:       --
    connection.type:            802-3-ethernet
    connection.interface-name:  enp7s0
    ...
    ```
:::
::: itemizedlist
**其它资源**
-   有关 `nmstatectl`{.literal} 的详情，请查看 `nmstatectl(8)`{.literal}
    man page。
-   如需了解更多配置示例，请参阅
    `/usr/share/doc/nmstate/examples/`{.literal} 目录。
:::
:::
::: section
::: titlepage
# []{#configuring-an-ethernet-connection_configuring-and-managing-networking.html#configuring-a-static-ethernet-connection-using-rhel-system-roles_configuring-an-ethernet-connection}使用 RHEL 系统角色配置静态以太网连接 {.title}
:::
此流程描述了如何使用 RHEL 系统角色通过运行 Ansible playbook 为
`enp7s0`{.literal} 接口远程添加带有以下设置的以太网连接：
::: itemizedlist
-   静态 IPv4 地址 - `192.0.2.1`{.literal}，子网掩码为 `/24`{.literal}
-   静态 IPv6 地址 - `2001:db8:1::1`{.literal}，子网掩码为
    `/64`{.literal}
-   IPv4 默认网关 - `192.0.2.254`{.literal}
-   IPv6 默认网关 - `2001:db8:1::fffe`{.literal}
-   IPv4 DNS 服务器 - `192.0.2.200`{.literal}
-   IPv6 DNS 服务器 - `2001:db8:1::ffbb`{.literal}
-   DNS 搜索域 - `example.com`{.literal}
:::
在 Ansible 控制节点上运行此步骤。
::: itemizedlist
**先决条件**
-   在控制节点上安装 `ansible`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
-   如果您运行 playbook 时使用了与 `root`{.literal} 不同的远程用户,
    则此用户在受管节点上需要具有适当的 `sudo`{.literal} 权限。
-   主机使用 NetworkManager 配置网络。
:::
::: orderedlist
**流程**
1.  如果 playbook 要针对其执行的主机还没有在清单中，请将此主机的 IP
    或名称添加到 `/etc/ansible/hosts`{.literal} Ansible 清单文件中：
    ``` literallayout
    node.example.com
    ```
2.  使用以下内容创建 `~/ethernet-static-IP.yml`{.literal} playbook：
    ``` literallayout
    ---
    - name: Configure an Ethernet connection with static IP
      hosts: node.example.com
      become: true
      tasks:
      - include_role:
          name: linux-system-roles.network
        vars:
          network_connections:
            - name: enp7s0
    	  interface_name: enp7s0
              type: ethernet
              autoconnect: yes
              ip:
                address:
                  - 192.0.2.1/24
                  - 2001:db8:1::1/64
                gateway4: 192.0.2.254
                gateway6: 2001:db8:1::fffe
                dns:
                  - 192.0.2.200
                  - 2001:db8:1::ffbb
                dns_search:
                  - example.com
              state: up
    ```
3.  运行 playbook：
    ::: itemizedlist
    -   以 `root`{.literal} 用户身份连接到受管主机，输入：
        ``` literallayout
        # ansible-playbook -u root ~/ethernet-static-IP.yml
        ```
    -   以用户身份连接到受管主机，请输入：
        ``` literallayout
        # ansible-playbook -u user_name --ask-become-pass ~/ethernet-static-IP.yml
        ```
        `--ask-become-pass`{.literal} 选项确定
        `ansible-playbook`{.literal} 命令提示输入
        `-u user_name`{.literal} 选项中定义的用户 `sudo`{.literal}
        密码。
    :::
    如果没有指定 `-u user_name`{.literal}
    选项，请以当前登录到控制节点的用户 `ansible-playbook`{.literal}
    连接到受管主机。
:::
::: itemizedlist
**其它资源**
-   `/usr/share/ansible/roles/rhel-system-roles.network/README.md`{.literal}
    file
-   `ansible-playbook`{.literal} 命令，请查看
    `ansible-playbook(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-an-ethernet-connection_configuring-and-managing-networking.html#configuring-a-dynamic-ethernet-connection-using-nmcli_configuring-an-ethernet-connection}使用 nmcli 配置动态以太网连接 {.title}
:::
这个步骤描述了使用 `nmcli`{.literal}
工具添加动态以太网连接。使用这个设置，NetworkManager 从 DHCP
服务器请求这个连接的 IP 设置。
::: itemizedlist
**先决条件**
-   网络中有 DHCP 服务器。
:::
::: orderedlist
**流程**
1.  为以太网连接添加新的 NetworkManager 连接配置集：
    ``` literallayout
    # nmcli connection add con-name Example-Connection ifname enp7s0 type ethernet
    ```
2.  （可选）在使用 `Example-Connection`{.literal} 配置集时更改主机名
    NetworkManager 发送到 DHCP 服务器：
    ``` literallayout
    # nmcli connection modify Example-Connection ipv4.dhcp-hostname Example ipv6.dhcp-hostname Example
    ```
3.  （可选）在使用 `Example-Connection`{.literal} 配置集时更改客户端 ID
    NetworkManager 发送到 IPv4 DHCP 服务器：
    ``` literallayout
    # nmcli connection modify Example-Connection ipv4.dhcp-client-id client-ID
    ```
    请注意，没有 IPv6 的 `dhcp-client-id`{.literal} 参数。要为 IPv6
    创建标识符，请配置 `dhclient`{.literal} 服务。
:::
::: orderedlist
**验证步骤**
1.  显示设备和连接的状态：
    ``` literallayout
    # nmcli device status
    DEVICE      TYPE      STATE      CONNECTION
    enp7s0      ethernet  connected  Example-Connection
    ```
2.  显示连接配置集的所有设置：
    ``` literallayout
    # nmcli connection show Example-Connection
    connection.id:              Example-Connection
    connection.uuid:            b6cdfa1c-e4ad-46e5-af8b-a75f06b79f76
    connection.stable-id:       --
    connection.type:            802-3-ethernet
    connection.interface-name:  enp7s0
    ...
    ```
3.  使用 `ping`{.literal}
    实用程序验证这个主机是否可以向其他主机发送数据包。
    ::: itemizedlist
    -   查找同一子网中的 IP 地址。
        对于 IPv4：
        ``` literallayout
        # ping 192.0.2.3
        ```
        对于 IPv6：
        ``` literallayout
        # ping 2001:db8:2::1
        ```
        如果命令失败，请验证 IP 和子网的设置。
    -   在远程子网中查找 IP 地址。