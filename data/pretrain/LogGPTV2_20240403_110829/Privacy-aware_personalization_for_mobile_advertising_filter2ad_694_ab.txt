Based on this limited information and CTR values, the ad server
selects and returns two ads. The more relevant one is chosen by the
phone based on user’s private information (doing Yoga in Dolores
Park in San Francisco) and displayed to the user.
2.2 Desiderata
Our desiderata include goals of the individual participants as
well as general system requirements. Informally, we want the ad-
vertising system to provide good privacy, utility (revenue/relevance),
and performance (communication efﬁciency/scalability/robustness).
Since ad delivery and statistics gathering phases are different in na-
ture, we have slightly different desiderata for them.
2.2.1 Desiderata for Ad Delivery
We have three design goals for ad delivery: Privacy, efﬁciency,
and revenue/relevance (utility).
(cid:73) Privacy. In order to protect privacy of sensitive contexts, the
user would like to limit the amount of information about her mobile
context that is sent to the server.
(cid:73) Efﬁciency. The ad serving system should be efﬁcient both in
terms of communication and computational cost—the user wants
ads fast and without draining much battery power on her mobile
device, while the ad service provider wants to run his system at low
operating cost. For simplicity, we focus on communication cost
between the server and a client since it is the most dominant cost
of serving ads to mobile devices. Our results can be extended to
consider computational cost of the server and the client as well.
(cid:73) Revenue and Relevance. The ad service provider seeks to max-
imize revenue. The user is only interested in relevant ads. The goal
of the ad service provider is to display an ad from a given set of ads
A that maximizes the expected revenue. For a click on ad a, the
ad service provider is being paid pa from the advertiser. Clearly,
not all users click on an ad. We denote by CTR(a|c) the context-
dependent click-through-rate, i.e., the fraction of users who actu-
ally clicked on it in context c among those who were served the ad
in context c. The expected revenue of displaying an ad a to a user
in context c is pa · CTR(a|c). We view clicks as an indicator for
relevance: users who are interested in an ad click on it. Maximiz-
ing relevance means maximizing the expected number of clicks by
displaying to a user in context c the ad a with the highest context-
dependent CTR(a|c).
2.2.2 Desiderata for Statistic Gathering
We have following goals in the statistics gathering phase.
(cid:73) Privacy in the Absence of a Trusted Server. We do not as-
sume the availability of a trusted server to collect all user data to
Figure 1: Framework.
mobile. Our results illustrate trade-offs between privacy, commu-
nication efﬁciency and utility in personalized ad delivery (Sec. 5).
2. THE FRAMEWORK AND DESIDERATA
2.1 The Framework
Our framework has three classes of participants: The users who
are served ads (also referred to as clients) in their mobile contexts,
the advertisers who pay for clicks on their ads, and the ad service
provider (also referred to as the server) who decides which ads to
display and is paid for clicks by the advertisers. The framework
works in two (potentially parallel) phases.
(cid:73) Statistics Gathering.
In this phase, the server gathers vari-
ous statistics (e.g., click-through-rates of various ads) from clients.
This phase happens periodically in the background. (Sec. 4.)
(cid:73) Ad-delivery. In this phase, the server uses statistics gathered in
the previous phase and user’s current context to select and deliver
personalized ads to the user. We allow users to decide how much
information about their sensor readings or inferred contexts they
are willing to share with the server. Based on this limited informa-
tion, the server selects a set of ads or search results, with bounded
communication overhead, and sends them to the user. The user then
picks and displays the most relevant ad based on all the private in-
formation. (Sec. 3.)
Privacy Guarantee. Statistics gathering and ad delivery use pri-
vate data differently—statistics gathering uses historical context
and click data from many users, while ad delivery uses a user’s
current context. Therefore, we use different, but state of the art,
privacy guarantees for them. For the gathering of statistics, a user
can decide whether or not to participate. If she decides to partic-
ipate then she is guaranteed differential privacy [13], i.e., that her
data will hardly affect the statistics. Such a strong privacy guaran-
tee is needed in practice since statistics are often shared and used
extensively. Differential privacy has been widely used (see for in-
stance [23, 24, 31, 33, 37, 40, 43]). However, it seems to be in-
compatible with personalization that requires a single user’s current
context (instead of aggregate statistics). Therefore, in the spirit of
many existing personalization systems and the modus operandi in
many mobile applications [15, 26, 30, 44], we ensure user privacy
through limited information disclosure. The information disclosure
about a user in context c can be limited by generalizing the user’s
context obtaining ˆc and only sending ˆc to the server, e.g. instead of
revealing that the user is doing Yoga in Dolores Park, the user only
discloses to be exercising. The generalization of context is done
over a hierarchy described later. For a context c that can be gener-
alized to ˆc we write c → ˆc. The question is what is the right level of
generalization of a context? We can let the user decide how to gen-
eralize her context with the help of existing tools from the UI com-
munity (e.g. [41]). Alternatively, we can guarantee (cid:96)-diversity [32]
to protect the privacy of a user’s sensitive contexts. (cid:96)-diversity has
ĉ: exercising online ad delivery offline CTR estimation clicks 664compute statistics. Without a trusted server, we need a distributed
aggregation protocol that protects user privacy, even under adver-
sarial scenarios such as when a fraction of the participants behave
maliciously, send bogus messages, or collude with each other. This
requirement sets our work apart from previous work on publishing
privacy-preserving statistics that all assume a trusted third party
(see [4] and the references therein).
(cid:73) Scalability. We need to scale the computation to a large number
of users and contexts.
(cid:73) Robustness to a Dynamic User Population. With a large num-
ber of transient mobile phone users, not all of them are available
and willing to engage in all rounds of our protocol. Users decide
which queries they are willing to answer and when (e.g., when the
phone is being charged and connected through a WiFi network).
Therefore, our protocol should be able to deal with a dynamic user
population without sacriﬁcing privacy or scalability.
following questions mentioned in Introduction:
With the above desiderata in mind, rest of the paper answers the
• What are the trade-offs in the design space of personalized
ad delivery? How can we instantiate the above framework to
any desired optimal trade-off point?
• How can we, in an efﬁcient and privacy-preserving way, gather
required statistics over a dynamic population?
3. PRIVACY-AWARE AD DELIVERY
In this section, we investigate a fundamental trade-off between
our goals and show how to deliver ads with a desired trade-off.
3.1 The P-E-R Trade-offs
Our three design variables—Privacy, Efﬁciency, and Relevance—
are conﬂicting. Without a trusted third party, optimizing all three
design goals simultaneously is impossible. Consider the task of
showing only one ad to the user. Then, in case of minimum in-
formation disclosure (i.e., the user does not send any information
about her context) and highest communication efﬁciency (i.e., the
server may only return a single ad), the server needs to choose the
ad without any knowledge of user’s context. Whatever the server
does yields suboptimal relevance and revenue, as long as there is
an ad whose CTR depends on the context. If we want to improve
the relevance, either the user needs to send some information to the
server, or the server needs to send more than one ad for the user to
perform local personalization.
If we drop any of our three design goals the problem becomes
easy.
If there were no concerns about privacy, we could use a
server-only scheme, where the user sends her context c to the ad
service provider, who serves the ad that maximizes the expected
revenue, i.e., pa · CTR(a|c). This is a very efﬁcient scheme that
maximizes revenue. If there were no efﬁciency concerns, we could
use a client-only scheme, where the server simply sends all ads A
so that the user can pick the ad that maximizes expected revenue.1
It has been estimated that due to ad churn this requires sending
2GB of compressed ads per month [22]. Alternatively, we could
use expensive cryptographic protocols for private information re-
trieval [16]. No user information is disclosed to the server and
optimal revenue is achieved, but performance is bad. Finally, if
there were no ﬁnancial incentive and no interest in relevant ads,
one could stop serving ads altogether to avoid any concerns regard-
ing efﬁciency and privacy. In practice, one has to ﬁnd reasonable
trade-offs between the three design goals.
1If we had a trusted third party, it could collect private information
from the client and all ads from the server, and send the best ad
to the client. This would maximize all three variables, ignoring
communication overhead between the server and the third party.
3.2 Optimizing Ad Delivery
In our framework, the user gets to decide what information about
her context to share with the server. Based on this information the
server selects some k ads A ⊂ A that are sent to the user. Here,
the parameter k determines the communication cost. Computation
cost can also be included in k if needed. The user then picks one
ad from A to display. The set of ads and the ad to display should
be chosen in a way that maximizes revenue.
Our ﬂexible framework can be optimized for various objective
functions over privacy, efﬁciency, and revenue. For concreteness,
we now assume that there are constraints on both information dis-
closure (determined by users) and communication cost (determined
based on current network load); we seek to maximize revenue un-
der these constraints. We will discuss alternative objective func-
tions in Sec. 3.3.2.
3.2.1 Client-Side Computation
For a given set of ads A chosen by the server, a client in context
c maximizes the revenue by selecting the ad
∗
a
= arg max
a∈A
pa · CTR(a|c).
Server-Side Computation
3.2.2
The server needs to determine the best k ads to send to the user
given only the partial information ˆc it has. Suppose that the server
has information not only on click-through-rates, but also on the
frequency of each context. If this is all the information the server
has, then from its point of view the expected revenue of sending a
set A of ads to the user depends on the user’s true context c; it is
maxa∈A pa · CTR(a|c). Since the server knows only the general-
ized context ˆc, it considers the probability of each of the possible
contexts c(cid:48) → ˆc and the expected revenue of A in this context c(cid:48).
With this limited information the expected revenue of a set of ads
A for a generalized context ˆc is
(cid:88)
c:c→ˆc
E[Revenue(A|ˆc)] =
Pr[c|ˆc] · max
a∈A
pa · CTR(a|c).
It is the server’s task to select the set A∗ of k ads from A that max-
imizes the expected revenue, given only the generalized context ˆc
of the user, i.e.,
∗
A
= arg max
A⊂A:|A|=k
E[Revenue(A|ˆc)]
Finding these k ads is NP hard as we will show in the next section.
However, we can employ approximation techniques to efﬁciently
select a set of k ads with revenue close to the optimal revenue.
Instantiations of the Framework
3.2.3
Our framework encompasses client-side personalization by set-
ting ˆc to the most generalized context that does not leak any infor-
mation about the client’s true context. In this case the personaliza-
tion takes place exclusively on the client side. Our framework also
encompasses server-side personalization by setting k = 1 in which
case the client simply displays the ad sent by the server without
further personalization. However, higher revenue can be achieved
in our framework when the server sends back k > 1 results.
Additional Constraints. While high revenue and high relevance of
ads are related goals, they are not the same. Suppose the ad service
provider receives a request from a user in context c. Suppose fur-
ther there are two ads a1, a2 with CTR(a1|c) = 0.1, CTR(a2|c) =
0.9 and pa1 = $0.1, pa2 = $0.01. Ad a1 has the higher expected
revenue but a2 is more relevant. While displaying a1 maximizes
665Algorithm 1 Greedy algorithm for selecting ads maximizing the
expected revenue.
Greedy(ads A, generalized context ˆc, threshold k)
Init A = ∅
while |A| < k do
for a ∈ A do
A ← A ∪ {argmaxaba}
ba ← E[Revenue(A ∪ {a}|ˆc)] − E[Revenue(A|ˆc)]
return A.
short-term revenue it might not be the best long-term strategy. Re-
cent work has found that the time users spend viewing ads depends
on the predictability of the quality of the ads [5]. Our framework
can reconcile relevance and short-term and long-term revenue goals
by adding a constraint on CTR.
3.3 Ad Selection Algorithms
We now explain how client and server can efﬁciently compute
their parts of the optimization to jointly choose the best set of ads
that achieve a desired trade-off. We consider a speciﬁc instantia-
tion of the optimization problem where the user ﬁxes her privacy
requirement; the client and the server then try to maximize revenue
for a given bounded communication complexity k. At the end of