and method invocation. For each of those three operations, the
operation type, the operation target, and any optional parameters
identify a concrete library invocation event. To better illustrate
this, consider the example library invocation in Figure 5 where
the host app creates a new AdView instance on which it then calls
the setAdUnitId(String) method. First ( A1 in Figure 5), the host
requests to create an AdView object using the host’s context. This
request will be processed by AdHelper. AdHelper uses WrapClass to
store the host’s Context instance ( A2 ). Since the Context is a non-
parcelable class, WrapClass will only store the type information
of this context parameter, i.e., class type. This WrapClass instance
forms the container of the original context instance and together
with the type information of the referenced target object (i.e., a
Context), it is passed to the remote advertisement app through our
generic IPC API as parameter of a newInstanceSerivce ( A3 ) call
for "AdView". This API call instructs AdService to create a new local
object with the type "AdView" (1st argument) and constructor pa-
rameters stored in the WrapClass (2nd argument). Thus, AdService
first retrieves the stored object as the local ad.context parameter
from the WrapClass object ( A4 ). With the target class type "AdView"
and constructor parameter, a new AdView object is created using
the AdService’s context ( A5 ). Since the channel is agnostic towards
the exact library, AdService uses the Java reflection API to call the
constructor of a class specified by the target class type parameter.
This new object is stored locally in a HashMap, using a reference
ID as key. To reply to the host and return a reference to this new
AdView instance, AdService stores a reference (i.e., ID) together with
all type information in a new WrapClass that it returns to the host
( A6 ). The host creates a new proxy for this remote AdView object
using the received type information ( A7 ). The WrapClass object
will also be stored in the proxy in order to establish the reference
from the proxy object to the remote object.
Using such proxies, the host can invoke methods on the refer-
enced remote objects. In Figure 5, the host invokes the setAdUnit-
Id(String adid) method on the proxy ( B1 ). To this end, the host
stores the adid parameter in a WrapClass object and retrieves a
WrapClass to reference the remote AdView object ( B2 ). Afterwards
( B3 ), it instructs the AdService to invoke the method "setAdUnitId"
of the class "AdView" through the invokeVirtualMethodService
IPC API call, where the first WrapClass parameter is the reference
to the existing AdView instance on which this method should be in-
voked and the second WrapClass parameter is the argument list (i.e.,
wrapped adid). As before, AdService will again retrieve all parame-
ters from the received WrapClass arguments ( B4 ) and, through the
reflection API, call the method on the referenced local AdView ob-
ject ( B5 ). It then stores the return value, here void, in a WrapClass
instance ( B6 ) and returns it to the host ( B7 ).
(2) Synchronization API. Synchronization events only transfer
meta information that indicate the supposed lifecycle state and
layout of the remote advertisement. It also uses a WrapClass-based
protocol to transfer those information, similar to invocation of ad
libs explained above. The purpose of this API is the continuous syn-
chronization and smooth integration of the remote advertisement
view within the AdService app. More details about the operations
that AdService executes in addition to the ad invocations explained
above are provided in Section 5.4.
(3) Callback API. As mentioned earlier, integrating callbacks re-
quires a bidirectional communication flow between host and library.
To solve this problem, we implement a set of callback specific APIs
that the ad service app can use to trigger a callback method in the
host app. Thus, in this case the Proxy is located in the service app
and the Stub in the host app. In addition, we have to distinguish
two types of callbacks: interfaces and classes. In case the callback
is implemented as an extension of a library class, we additionally
have to make sure that the concrete implementation’s constructor
is not calling its parent’s constructor and hence invoking library
logic in the host. Therefore, we rewrite the constructor to suppress
the super call. For the interface case, this is not necessary since
there is no super constructor implementation. Otherwise, invoking
callback APIs follows the same WrapClass-based mechanism we
described earlier for the ad invocation API in order to invoke the
callback methods of the host.
5.2.2 Communication Endpoints. The communication protocol
is carried out between two communication entities: the host side
AdHelper within the host app and the AdService in the ad service
app, which in turn form the shim code between the host app com-
ponents and our IPC channel as well as between the ad library
components and the IPC channel, respectively (see Figure 4).
AdHelper serves as the encapsulation of our newly defined IPC
APIs on the host side. AdHelper takes care of wrapping and unwrap-
ping data from and to WrapClass and bridging the gap between our
communication channel and the host components. The interfaces
provided by AdHelper are used by our compiler-based rewriter
to re-integrate the remote library into the host app by replacing
local advertisement calls with calls to AdHelper (see following Sec-
tion 5.3). Similar to AdHelper on the host side, AdService forms the
shim between the IPC communication channel and the library’s
original API on the library side.
5.2.3
Service Connection Between Host App and Ad Service. In
our current model, AdHelper binds itself to the AdService to estab-
lish the communication channel. However, this channel has to be
established before any library code can be invoked by the host
app in order to ensure the correct functionality of the advertising
function of the host app. To solve this problem, we inject during
the compilation code into the host app that scans the host app’s
message queue at application start to obtain the Binder handle
of the AdService and then already initializes the connection to the
AdService in a very early stage of the app’s startup phase, before any
AdHelper function is invoked, thus ensuring any library invocation
finds a valid, established communication channel.
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA10425.3 Compiler-based App Rewriting
In order to utilize our remote isolated advertisement library, we
first need to retrofit host applications to actually use the newly
introduced communication channel instead of the packaged library.
Therefore, we need an application modification framework that can
replace invocations of the local library with those to our remote
version by redirecting all interaction through the new IPC-based
communication channel. Splitting host app and local library, and
afterwards reintegrating the host with the IPC channel requires two
essential steps: First, we need to identify the boundaries between
host and advertisement code. Second, we replace all those interac-
tions with our proxies and wrappers to restore the overall library
integration across process boundaries. This results in the host app
being agnostic towards the fact that it no longer interacts with
the packaged advertisement library but with our remote library
through an IPC channel.
5.3.1 Library Boundaries. The first step towards dissecting the
host application is understanding the exact interaction patterns
between app and library. While we discussed general integration
techniques in Section 3, we analyzed real-world applications to
identify actual code patterns to be able to transform them properly.
We distinguish between two cases: First, library objects or data are
introduced into the host application by either invoking a method,
accessing a field or instantiating a class from the advertisement
library. Second, library objects or data that have been introduced to
the host code earlier are passed around, characterized by method
returns, field access, type checks or type casts within the host
application. While only the first case depicts the boundary between
host and library, both cases need to be considered when rewriting
interactions to use our AdHelper instead. Apart from code boundary,
special integration cases, such as manifest defined components and
customized exception, also need specific proxy support.
5.3.2 Library Substitution. The second step is to utilize the in-
formation about the concrete code integration patterns to resect the
library code and replace it with our components from our AdHelper.
Concretely, we utilize an app instrumentation framework that is
capable of merging AdHelper into the application and replace said
code parts with our alternatives. In the following, we will first intro-
duce the general structure of the host-side instrumentation part of
CompARTist and then deep-dive into the rewriting routines as they
pose one of the major challenges in establishing this new remote
library connection.
5.3.3 ARTist Instrumentation. In this work, we leverage the An-
droid app instrumentation capabilities of ARTist [11]3. The rewrit-
ing part of ARTist is built on top of the dex2oat compiler of the
Android Runtime (ART) introduced in Android 5 Lollipop and pro-
vides a modular framework to integrate own instrumentation solu-
tions. We use ARTist to modify interactions with the advertisement
library to interact with our AdHelper instead by utilizing two of
ARTist’s main features: introducing own instrumentation routines
through the Module framework and injecting our AdHelper into
the host app through the library injection capabilities.
Module Framework. ARTist instrumentation is based on the con-
cept of so called Modules. A Module gets full access to the appli-
cation’s code, allowing for arbitrary modifications, e.g., adding or
removing instructions or changing them altogether, which will be
reflected in the code after compilation. Internally, ARTist utilizes
dex2oat’s optimization framework to disguise Modules as optimiza-
tions and let the existing infrastructure execute them. Concretely,
a Module is then provided with the code of all methods in the com-
piler’s internal intermediate representation (IR), one after another,
and can analyze and change it at will, as the compiler believes it is
executing a regular optimization algorithm. As it is designed to be
utilized for optimization algorithms, the compiler’s IR represents a
method as a control flow graph of heavily interlinked nodes that
closely resemble dex bytecode instructions 4.
We leverage this Module interface to implement the host side
of CompARTist. More precisely, we introduce a specialized Module
to take care of replacing the host-library interactions with corre-
sponding versions from our AdHelper.
Library Injection. While the Module framework is designed to
modify existing code, the injection capability allows to merge arbi-
trary own code libraries into a target application. ARTist automati-
cally takes care of making all APIs from AdHelper, as well as other
support components available to our module so that we can safely
redirect all interactions to this new target.
5.3.4 Module Design. While ARTist only provides the integra-
tion into the compiler, the main challenge is to design the Comp-
ARTist Module to seamlessly connect the host application to the
communication channel without harming the app’s original seman-
tics. Therefore, we will focus here on the design of our rewriting
Module.
Collecting Instrumentation Targets. From our analysis we know
the precise patterns that bootstrap interaction between host and
advertisement library. From this point, we need to find all IR code
nodes that operate on the obtained library data and modify them
accordingly. Since each node in the IR method graph is interlinked
with its usages and inputs already, we can apply forward slicing
from our starting points to find all code nodes that we need to
modify. Derived from our earlier analysis, we define three types
of start nodes: class loading, field access and method invocation.
As we are operating on method control flow graphs, we can find
all those occurrences on a per-method base. In the IR graph, those
starting points are marked by the following instructions:
(1) LoadClass starts a host-lib interaction by loading an adver-
tisement library class that is subsequentially used for, e.g.,
InvokeStaticOrDirect and NewInstance instructions.
(2) {Static,Instance}FieldGet obtains previously-saved ad-
vertisement library data from a field in a host component.
(3) InvokeVirtual receives previously-saved advertisement li-
brary data from an invoked host method.
Instrumentation Policies. Equipped with a list of entry nodes, we
follow the slice through the method graph and collect every in-
struction that interacts with the advertisement library. Afterwards,
3ARTist
(https://github.com/Project-ARTist).
is open source
software
available under Apache
2.0
license
4The ARTist paper [11] provides in-depth documentation on the intermediate
representation
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1043each single node is transformed to use our generic communication
channel instead. This is possible since the IR graph provides us with
all the structural information required to properly interact with
the AdHelper API: operation type, operation target and, optionally,
parameters. While we learn the operation type from the concrete
IR node (e.g., instance creation for NewInstance nodes), operation
target and parameters are immediately available in the graph, too,
and can therefore be provided to the AdHelper API.
Example Transformation. Figure 6 describes the code transforma-
tion applied to a code snippet that creates and loads a Google Play
Service Ads advertisement. The bottom left part of the Figure 6
depicts the intermediate representation of a small method that loads
an AdView. After loading the advertisement library class (instruc-
tion 5), the result of the LoadClass node is used to create a new
object (instruction 7 and 8). Afterwards, the newly created Builder
is used to build an AdRequest (instruction 9) that is consequently
used to load an advertisement (instruction 11).
Starting from the LoadClass node, forward slicing provides us
with all of the above mentioned nodes that interact with library
components. The right part of Figure 6 depicts the transformed
version of the advertisement loading code. First, instead of loading
and instantiating the original class, the instrumented version uses
the createObjectHelper method from our AdHelper to trigger the
instantiation of said object in the remote library (instruction 22).
Second, the invokeMethodHelper allows to trigger the invoked
build method remotely (instruction 25), it only requires the name
(instruction 24) and class (instruction 21) strings, and the object
handle returned from createObjectHelper (instruction 22) to be
provided as arguments. Third, the loadAd is remotely invoked via
the invokeMethodHelper API (instruction 20).
5.4 Advertisement Service App
The advertisement service app encapsulates the ad library and forms
the sandbox for the lib. As a separate app, executed with a distinct
UID and in separate process, it effectively privilege-separates the
ad lib with a strong security boundary. Additionally, this app is
responsible for executing operations requested by the host app on
the library or for proxying callback methods from the library to the
host app (as explained in Section 5.2). Moreover, it is responsible
for displaying the advertisement on screen at the correct position
to preserve visual fidelity. To correctly display ads, the AdService
relies on lifecycle synchronization messages from the host app, e.g.,
show/hide an advertisement or rotate the advertisement.
5.4.1
Synchronizing lifecycles and preserving visual fidelity. It is
important to preserve the original look-and-feel of the ad library
(visual fidelity) by serving the advertisement as a part of the host
application’s user interface. In particular, sharing a screen with
the host application is very prevalent in advertisement libraries
and therefore needs careful consideration. Most advertisements are
directly integrated into the layouts of their host activities and there-
fore share their lifecycle, such as creation, pausing, and finishing
events. Thus, in CompARTist we need a mechanism to keep them
in sync between the host app and the separately executing ad lib in
the ad service app.
Proxy view and floating window. Instead of simply removing
the original advertisement View, e.g., AdView, from the layout of
the host, we replace it with a carefully crafted and empty proxy
View. In order to preserve the dimensions and placement of the
remaining GUI elements, this proxy View is located at the exact
same position as the original ad View and occupies the exactly
same space. Concurrently, ad service app creates a floating window
that is placed on top of the proxy View, again occupying the very
same position and space as the original ad View. It is important to
note that the floating window, even though originating from the ad
service app, can still be displayed while the host app is running in
the foreground. Hence, the floating window effectively covers the
same area on screen as the proxy View (see Figure 7). In our solution,
we use floating window type TYPE_TOAST to overlay the proxy
space with no additional permission needed. Whenever a lifecycle
callback from the Android system arrives at the proxy View, such