n
The CTA game follows the same structure as the CPA game. In
addition, we allow the adversary to know certain information (by
fixing it in the game), including some part of the keystore (P0), the
set of principals that Clio is protecting ( ˜p), and the number of low
steps the program takes (j). Cryptosystem Π is used implicitly in
the CTA game to generate keys, encrypt, decrypt, sign and verify9.
9More formally, INDb , A, and the semantics are also parameterized on Π, and the uses
of Gen, Enc, Dec, Sign, Verify should be explicitly taken from the tuple Π though
we elide their explicit usage in our notation for clarity.
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1901In this game setup, Gen( ˜p, 1n ) generates a new keystore P′
containing private keys for each of the principals in ˜p, using the
underlying cryptosystem’s Gen function for each keypair. Then,
the adversary receives all public keys of the keystore pub(P) and
returns three well-typed Clio terms: a function t, and two program
inputs to the function v0 and v1 that must be confidentiality-only
ℓ (i.e., they may differ only on secret values)10. It
low equivalent =C
also returns a strategy S that models the behavior of the adversary
on the store while the computation is running. Note that the strat-
egy is also polynomial in the security parameter as it is constructed
from a non-uniform polynomial time algorithm. The program t is
run with one of the inputs v0 or v1 for a fixed number of steps j.
The adversary receives the interactions resulting from a run of the
program and needs to use that information to determine which
secret input the program was run with.
Being secure under a chosen-term attack means that the se-
quences of interactions between two low-equivalent programs are
indistinguishable and hence an adversary does not learn any se-
cret information from the store despite actively interacting with
it while the program it chose is running. Note that the adversary
receives the full trace of interactions on the store (including its own
interactions); this gives it enough information to reconstruct the
final state of the store and any intermediate state. For any set of
principals, and any adversary store level, the interactions with the
store contain no efficiently extractable secret information for all
well-typed terminating programs.
Theorem 5.3 (CTA Security). If Π if CPA Secure, then Clio using
Π is CTA Secure.
We prove this theorem in part by induction over the low step
relation ↷p, to show that two low equivalent configurations will
produce low equivalent configurations, including computationally
indistinguishable distributions over sequences of interactions. A
subtlety is that we must strengthen the inductive hypothesis to
show that sequences of interactions satisfy a stronger syntactic
relation (rather than being just computationally indistinguishable).
More concretely, the proof follows three high-level steps. First,
we show how a relation ≍ on families of distributions of sequences
of interactions preserves computational indistinguishability. That
is, if (cid:146)1 ≍ (cid:146)2 and Π is CPA secure, then (cid:146)1 ≈ (cid:146)2. Second, we
show that as two low equivalent configurations step using the low
step relation ↷p, low equivalence is preserved and the interactions
they produce satisfy the relation ≍. Third, we show that the use
of the step metafunction on two low equivalent configurations
will produce computationally indistinguishable distributions over
distributions of sequences of interactions. Each step of the proof
relies on the previous step and the first step relies on the underlying
assumptions on the cryptosystem. We now describe each step of
the proof in more detail.
Step 1: Interactions Relation. We consider pairs of arbitrary dis-
tributions of sequences of interactions and show that, if they are
both of a certain syntactic form then they are indistinguishable.
Importantly, the indistinguishability lemmas do not refer to the
Clio store semantics, i.e., they merely describe the form of arbi-
trary interactions that may or may not have come from Clio. The
10Complete definition of low equivalence is in the technical report [59].
invariants on pairs of indistinguishable distributions of interactions
implicitly require low equivalence of the programs that generated
them, and low equivalence circularly requires indistinguishable
distributions of interactions. As a result, we describe the lemmas
free from the Clio store semantics to break the circularity.
We progressively define the relation ≍ on a pair of interactions.
Initially, distributions of interactions only contain secret encryp-
tions so that we can appeal to a standard cryptographic argument of
multi-message security. Formally, for all keystores P0, and l1, ..., lk,
such that C(li ) ⊑C C(authorityOf(P)), and for all m1{1,2}...mn{1,2}
Secure, then(cid:40)
and all principals ˜p, if |mi
2| for all 1 ≤ i ≤ k and Π is CPA
1| = |mi
put ‹b1
(cid:40)
put ‹b1
1 :lk› at vk (cid:12)(cid:12)(cid:12)
(cid:41)
2 :lk› at vk (cid:12)(cid:12)(cid:12)
(cid:41)
n
1); 1 ≤ i ≤ k
1 :l1› at v1 · ... · put ‹bk
P ← Gen(1n );
(pki , ski ) ∈ rnд(P);
1 ← Enc(pki , mi
bi
≍
2 :l1› at v1 · ... · put ‹bk
P ← Gen(1n );
(pki , ski ) ∈ rnд(P);
2 ← Enc(pki , mi
bi
2); 1 ≤ i ≤ k
n
Using multi-message security as a basis for indistinguishability,
we then expand the relation to contain readable encryptions (i.e.,
ones for which the adversary has the private key to decrypt) where
the values encrypted are the same. In the complete definiton of ≍,
we expand it to also contain interactions from a strategy, forming
the final relationship on interactions captured by the ≍ relation.
We establish an invariant that must hold between pairs in the
relation in order for them to be indistinguishable. For example,
in the first definition, the lengths of each corresponding message
between the pair must be the same. Each intermediate definition of
≍ is used to show that a ppt can simulate the extra information in
the more generalized definition (thus providing no distinguishing
power). For the first definition of the relation containing only secret
encryptions, a hybrid argument is used similar to showing multi-
message CPA security [43].
We first show that if c0
Step 2: Preservation of Low Equivalence. We show that as two
low equivalent programs t and t′ progress, they simultaneously
ℓ t′ and the distributions of sequences
preserve low equivalence t =C
of interactions they produce (cid:146) and (cid:146)′ are in the relation ≍.
α−−→ c′
ℓ c1
then c′
1. This proof takes advantage of the low equivalence
preservation proofs for LIO in all cases except for the storing and
fetching rules. For store events, since all values being stored will
have the same type (due to type soundness), and will be ground
values, serialized values will have the same message lengths.
1 and c0 =C
ℓ c′
0 =C
0 and c1
α−−→ c′
We then show that if
(⟨c0, (cid:146)0, V0⟩, (cid:146)) ↷p ⟨c
′
0, (cid:146)′
0, V′
0⟩
and
and
(⟨c1, (cid:146)1, V1⟩, (cid:146)) ↷p ⟨c
′
1, (cid:146)′
1, V′
1⟩
(c0 =C
ℓ c1) ∧ (V0 = V1) ∧ ((cid:146)0 ≍ (cid:146)1)
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1902(cid:16)⟨c1, skip, V0⟩, S(skip)
(cid:17)
=C
ℓ
(cid:16)⟨c2, skip, V0⟩, S(skip)
(cid:17)
′
1
↷ p
1⟩
⟨c′′
1, V′
1 , (cid:146)′
↷
p
1
⟨c′
1, (cid:146)1, V1⟩
′
2
↷ p
2⟩
⟨c′′
2, V′
2 , (cid:146)′
↷
p
2
⟨c′
2, (cid:146)2, V2⟩
=C
ℓ
=C
ℓ
stepP (c1, S, 1)
stepP (c2, S, 1)
Figure 8: Low equivalence is preserved in stepP for two low equiv-
alent configurations c1 and c2 and a strategy S.
then,
(c
′
0 =C
ℓ c
1) ∧ ((cid:146)′
The proof on ↷p relies on the previous preservation proof on α−−→
and the indistinguishability results on ≍.
0 ≍ (cid:146)′
1).
′
1) ∧ (V′
0 = V′
Step 3: Indistinguishability of the step metafunction. We show that
the step metafunction preserves low equivalence. More formally,
we show that if c0 =C
{((cid:146)′
0, p0 · ... · p) | ⟨c0, (cid:146)0, V0⟩ ↷p0 ... ↷p ⟨c′
{((cid:146)′
1, p′
0 · ... · p′) | ⟨c1, (cid:146)1, V1⟩ ↷p′
... ↷p′ ⟨c′
ℓ c1 and V0 = V1 and (cid:146)0 ≍ (cid:146)1 then
0, V′
0⟩}n
1, V′
1⟩}n
0, (cid:146)′
1, (cid:146)′
≈
0
1 =C
We prove this by showing that the probabilities of traces taken by
two low equivalent configurations are equal with all but negligible
probability. As an example, Figure 8 shows graphically how one step
of the trace is handled. We examine the result of stepP (c1,S, 1)
and stepP (c2, S, 1) where c1 =C
ℓ c2. (Note that this setup matches
the instantiation of the CTA game where j = 1.) The left rectangle
shows the resulting distribution over distributions of configurations
after one step of the c1 configuration. The right circle shows the
resulting distribution over distributions of configurations after one
step of the c2 configuration. Due to the results from Step 2, we can
ℓ c′
reason that c′
1 =C
2 . We can also conclude that
(cid:146)1 ≍ (cid:146)2 and that (cid:146)′
2. The final step of the proof is to show
that the interactions from the resulting two distributions (i.e., the
top circle and bottom circle) are computationally indistinguishable.
That is, we show that p1 is equal to p2 and also p′
1 is equal to p′
2
with all but negligible probability.
5.2 Leveraged Forgery
Whereas in the previous subsection we considered the security of
encryptions, in this case we consider the security of the signatures.
We show that an adversary cannot leverage a Clio computation to
illegitimately produce a signed value.
2 and that c′′
1 ≍ (cid:146)′
ℓ c′′
A digital signature scheme is secure if it is difficult to forge
signatures of messages. Clio requires its digital signature scheme to
be secure against existential forgery under a chosen-message attack,
where the adversary is a non-uniform ppt in the size of the key.
Often stated informally in the literature [25], a digital signature