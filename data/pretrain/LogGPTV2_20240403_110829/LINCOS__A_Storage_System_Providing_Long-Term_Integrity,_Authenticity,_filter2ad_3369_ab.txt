### Construction Process

Confidential storage of secret data is outside the scope of COPRIS and is handled by LINCOS (Section 4).

### Integrity Proof Construction and Verification

The integrity proof in COPRIS consists of a pair (E, R), where E is an evidence record and R is a list of decommitment values. The evidence record is constructed through an interactive process between the document owner and an evidence service, which in turn interacts with a timestamp service. The list of decommitment values is created and kept secret by the document owner. The document owner may choose to reveal these decommitment values along with the document to a verifier.

#### Initial Protection

The initial integrity proof is generated as follows:

1. **Commitment Generation:**
   - The document owner runs the `Protect` algorithm.
   - Input: Document \( d \) and an initially empty list of decommitment values \( R \).
   - The owner selects a commitment scheme \( CS \) and computes a commitment \( (c, r) \leftarrow CS.\text{Commit}(d) \).
   - The list \( R \) is updated to include \( r \).
   - The commitment value \( c \) is sent to the evidence service.

2. **Evidence Record Creation:**
   - The evidence service receives \( c \) and runs the `AddEv` algorithm.
   - Input: Commitment value \( c \) and an initially empty evidence record \( E \).
   - The evidence service requests a timestamp \( T \) on \( c \) from a timestamp service \( TS \) using the `TS.Stamp` protocol at time \( t \).
   - The first evidence record is \( E = (c, T, t) \).

#### Timestamp Renewal

Before the last timestamp becomes insecure, it must be renewed. The evidence service executes the `RenewTs` algorithm:

- Input: Current evidence record \( E \).
- The evidence service selects a new timestamp scheme \( TS \) and obtains a new timestamp \( T \) on \( E \) at time \( t \) using the `TS.Stamp` protocol.
- The new entry \( (c, T, t) \) is appended to \( E \), where \( c \) is the last commitment value in \( E \).

#### Commitment Renewal

Before the last commitment becomes insecure, it must be renewed. The document owner runs the `RenewCom` algorithm:

- Input: Document \( d \) and the list of decommitment values \( R \).
- The owner selects a new commitment scheme \( CS \) and computes a new commitment \( (c, r) \leftarrow CS.\text{Commit}(d, R) \).
- The list \( R \) is updated to include \( r \).
- The new commitment value \( c \) is sent to the evidence service.
- The evidence service runs the `AddEv` algorithm with the new commitment value \( c \) and the current evidence record \( E \).

#### Verification

When the document owner decides to reveal the document \( d \) to a verifier and prove its existence at time \( t \):

1. **Retrieval:**
   - The owner requests the current evidence record \( E \) from the evidence service.
   - The owner retrieves the document \( d \) and the list of decommitment values \( R \) from the confidentiality system using the `Retrieve` protocol.

2. **Transmission:**
   - The owner sends the document \( d \), time \( t \), evidence record \( E \), and the list of decommitment values \( R \) to the verifier over a private channel.

3. **Verification:**
   - The verifier uses their trust anchor \( TA \) to check that \( \text{COPRIS.Verify}(TA, d, t, E, R) = 1 \).
   - This proves that \( d \) existed at time \( t \) and has not been altered.

### Implementation

In this section, we describe the implementation of LINCOS, which uses COPRIS for its integrity system and proactive secret sharing combined with appropriate private channels for its confidentiality system.

#### Cryptographic Schemes

- **Commitment Scheme:** We use the Pedersen commitment scheme, which is computationally binding and information-theoretically hiding. It is parameterized with two prime numbers \( p \) and \( q \), and its security is based on the discrete logarithm problem. We use the hash-then-commit approach with the SHA-2 hash function family.

- **Timestamp Scheme:** The timestamp service is implemented according to RFC 3161, using the SHA-2 hash function and the RSA digital signature scheme. The RSA modulus bitlength and hash function are chosen to ensure unforgeability within the usage period.

- **Authenticated Channels:** Authenticated channels are realized using TLS, ensuring computationally secure mutual authentication.

#### Confidentiality System

- **Private Channels:** LINCOS uses the Tokyo QKD Network to establish private channels between the document owner and shareholders. These channels provide information-theoretic confidentiality and computational authenticity using Wegman-Carter authentication, QKD, and OTP encryption.

- **Secret Sharing:** Our implementation uses Shamir’s secret sharing with a (3,4)-threshold scheme, providing information-theoretic confidentiality. The document owner distributes shares to 4 shareholders, and 3 are needed for reconstruction. Resharing occurs before the adversary can corrupt more than 2 shareholders.

### Conclusion

Our experimental evaluation shows that the long-term integrity system based on COPRIS performs well, with negligible time and space costs for timestamping commitments and renewing them. Information-theoretic confidentiality is more expensive, primarily due to the additional space required by secret sharing and the limitations of QKD technology. However, future advancements in QKD and proactive secret sharing hold promise for improving performance and reducing the need for document owner involvement.

### References

[1] C. Adams, P. Cain, D. Pinkas, and R. Zuccherato. Internet X.5.09 Public Key Infrastructure Time-Stamp Protocol (TSP). RFC 3161 (Proposed Standard), Aug. 2001. Updated by RFC 5816.

[2] F. Bahr, M. Boehm, J. Franke, and T. Kleinjung. Factorization of RSA-200. Public announcement on May 9th, 2005.

[3] M. Bellare and P. Rogaway. Entity authentication and key distribution. In D. R. Stinson, editor, CRYPTO'93, pages 232–249, 1994.

[4] G. Brassard, C. Crépeau, D. Mayers, and L. Salvail. A brief review on the impossibility of quantum bit commitment. arXiv preprint quant-ph/9712023, 1997.

[5] J. Braun, J. Buchmann, C. Mullan, and A. Wiesmaier. Long term confidentiality: a survey. Designs, Codes and Cryptography, 71(3):459–478, 2014.

[6] R. Canetti, L. Cheung, D. K. Kaynar, N. A. Lynch, and O. Pereira. Modeling computational security in long-lived systems. In CONCUR, 2008.

[7] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard), Aug. 2008. Updated by RFCs 5746, 5878, 6176, 7465, 7507, 7568, 7627, 7685.

[8] M. Fujiwara, A. Waseda, R. Nojima, S. Moriai, W. Ogata, and M. Sasaki. Unbreakable distributed storage with quantum key distribution network and password-authenticated secret sharing. Scientific Reports, 6, 2016.

[9] M. Geihs, D. Demirel, and J. Buchmann. A security analysis of techniques for long-term integrity protection. In Privacy, Security and Trust 2016, 2016.

[10] O. Goldreich. Foundations of Cryptography – Volume 1, chapter Perfectly Hiding Commitment Schemes. Cambridge University Press, 2001.