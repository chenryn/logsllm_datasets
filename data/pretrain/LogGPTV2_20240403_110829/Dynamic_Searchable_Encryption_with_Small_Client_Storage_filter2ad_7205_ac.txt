(LStp,LSrch,LU pdt) that describes the information revealed
to the server throughout the protocol execution. LStp refers
to leakage during setup, LSrch during a search operation, and
LU pdt during updates. Standard search leakage types form the
literature include search pattern that reveals which searches
are related to the same w, and access pattern that reveals
DB(w) during a search for w. Note that access pattern leakage
is unavoidable if the client wishes to retrieve the actual ﬁles
and not just their identiﬁers (unless the ﬁles themselves are
stored in a protected manner, e.g., Oblivious RAM). Schemes
that avoid this leakage are called result hiding.
Informally, a secure SSE scheme with leakage L should
reveal nothing about the database DB other than this leakage.
This is formally captured by a standard real/ideal experiment
with two games RealSSE, IdealSSE presented in Figure 13 in
Appendix A, following the deﬁnition of [52].
Adv (λ, q) = 1] − Pr[IdealSSE
Deﬁnition 1 ([52]): A DSE scheme Σ is adaptively-secure
with respect to leakage function L, iff for any PPT adversary
Adv issuing poly(λ) queries/updates q, there exists a stateful
PPT simulator Sim = (SimInit, SimSearch, SimU pdate)
such that | Pr[RealSSE
Adv,Sim,L(λ, q) =
1]| ≤ v(λ).
Forward and backward privacy. SE schemes with forward
and backward privacy aim to control what
information is
revealed in relation to updates. Informally, a scheme is forward
private if it is not possible to connect a new update to previous
operations, when it takes place. E.g., it should be impossible to
tell whether an addition is for a new keyword or a previously
searched one.
Deﬁnition 2 ([10]): An L-adaptively-secure DSE scheme
that supports single-keyword additions/deletions is forward
private iff the update leakage function LU pdt can be written
as: LU pdt(op, w, id) = L(cid:48)U pdt(op, id) where L(cid:48) is a stateless
function, op = add/del, and id is a ﬁle identiﬁer.
Backward private DSE schemes limit the information that
the server learns during a search for w for which some entries
have been previously deleted. Ideally, the scheme should reveal
nothing about these deleted entries and, at the very least, not
their corresponding ﬁle identiﬁers [52]. Bost et al. [10] gave
the ﬁrst formal deﬁnition for three types of backward privacy
with different leakage patterns, from Type-I which reveals
the least information to Type-III which reveals the most. In
order to present their deﬁnition, we need to ﬁrst deﬁne some
additional functions.
Let Q be a list with one entry for each operation. For
searches the entry is (u, w) where u is the timestamp and w is
the searched keyword. For updates it is (u, op, (w, id)) where
op = add/del and id is the modiﬁed ﬁle. TimeDB(w) =
{(u, id) | (u, add, (w, id)) ∈ Q ∧ ∀u(cid:48), (u(cid:48), del, (w, id)) /∈
Q} is the function that returns all timestamp ﬁle-identiﬁer
pairs of keyword w that have been added to DB and have
not been deleted. Updates(w) = {u|(u, add, (w, id)) ∈
(u, del, (w, id)) ∈ Q} is the function that returns the
Q or
timestamp of each insertion/deletion operation for w. Finally,
DelHist(w) = {(uadd, udel) | ∃ id : (uadd, add, (w, id)) ∈
Q ∧ (udel, del, (w, id)) ∈ Q} is the function that returns for
each deletion timestamp the timestamp of the corresponding
insertion it cancels. Using the above functions, backward
privacy is deﬁned as follows.
Deﬁnition 3 ([10]): An L-adaptively-secure SSE scheme
(TimeDB(w), aw),
(TimeDB(w), Updates(w)),
(op, w) and
and L(cid:48)(cid:48)
(TimeDB(w), DelHist(w)),
(op) and LSrch(w) = L(cid:48)(cid:48)
(op, w) and LSrch(w) = L(cid:48)(cid:48)
has backward privacy:
BP-I (BP with insertion pattern): iff LU pdt(op, w, id) =
L(cid:48)
BP-II (BP with update pattern): iff LU pdt(op, w, id) =
L(cid:48)
BP-III (weak BP): iff LU pdt(op, w, id) = L(cid:48)
LSrch(w) = L(cid:48)(cid:48)
where L(cid:48)
are stateless functions. We stress that
the above deﬁnitions (even BP-I) reveal the ﬁles currently
containing w due to TimeDB(w)—this is in order to account
for the leakage from retrieving the actual ﬁles. One could
deﬁne an even stronger deﬁnition that avoids this leakage (in
practice this could be achieved by using oblivious storage, or
when limited to applications that look to return just the iden-
tiﬁers and not the ﬁles). None of our constructions explicitly
leaks TimeDB(w); indeed we never use it in our proofs for
simulation.
An efﬁcient static scheme. Our SDa and SDd schemes use as
a building block PiBas, a very simple and efﬁcient static SE
scheme from [12].4 Static schemes do not allow for updates
as the entire DB is set up ahead of time. Security is modiﬁed
analogously in Deﬁnition 1 by allowing only for search oracles
after initialization and removing SimU pdate. Since we need
a result-hiding scheme (in order to get backward privacy), we
slightly modify PiBas. We present the scheme in detail in
Appendix A.
4The version we use corresponds to Πro
bas from [12].
5
Fig. 1: SDa: from static to dynamic (amortized version). These are the encrypted indexes after ﬁve consecutive insertions 1− 5.
Inserting element 1 requires the creation of EDB0 which will contain element 1. Inserting element 2 requires downloading EDB0
(to obtain element 1), creating EDB1 which will contain elements 1 and 2, and deleting EDB0. Searching for a keyword w
requires to search all the active (non-deleted) encrypted indexes and return to the client all the individual search results.
DSE with optimal search time. The majority of existing DSE
schemes adopt the approach of “storing” deletions as regular
entries. During searches, they are used to ﬁlter out which
insertion entries have been removed. This approach implies
that the search cost will be Ω(aw), i.e., linear in the total
number of total updates for w, as opposed to the optimal cost
O(nw), linear in the number of ﬁles currently containing w.
Notable exceptions to these are the construction of Stefanov
et al. [52] (which, however, is not backward private) and two
constructions from the recent work of Ghareh Chamani et
al. [29] which have quasi-optimal search time according to
the following deﬁnition.
Deﬁnition 4 ([29]): A DSE scheme Σ has optimal (resp.
quasi-optimal) search time, if the asymptotic complexity of
Search is O(nw) (resp. O(nw· polylog(N ))).
Oblivious Maps Our constructions use in a black-box manner
an oblivious map (OMAP) which is a privacy-preserving ver-
sion of a key/value map data structure that aims to hide the
type and content of a sequence of operations performed. Intu-
itively, for any two possible sequences of polynomially many
operations, their resulting access patterns (i.e., the sequence of
memory addresses accessed while performing the operations)
must be indistinguishable. An OMAP offers a setup algorithm
for initializing the structure, and two interactive protocols get,
put for retrieving the value for a key, and inserting a key/value
pair, respectively (see [55], [48] for a formal deﬁnition). In
our constructions, we use the OMAP of [55] with block size
O(log N ). When reporting OMAP asymptotic efﬁciency, we
always measure number of blocks.
Range Cover Techniques. Consider a domain A of size N.
We construct a full binary tree over its values bottom-up.
Nodes are labeled with numbers from 1 to 2|A|−1 in a leafs-to-
root and left-to-right manner. Given a range (i.e., a sequence of
contiguous values) over A, a range covering technique selects
a set of nodes whose subtrees collectively cover the given
range entirely. Best Range Cover (BRC) essentially selects the
minimum number of nodes that cover exactly the range (also
called minimum dyadic intervals). For range size R, there are
O(log R) such nodes. In Figure 5, for A = 1, . . . , 8, BRC
covers the range [2, 5] with the nodes 2, 10 and 5.
III. FROM STATIC TO DYNAMIC SCHEMES
A. Amortized construction
Our starting point
is a static, result-hiding searchable
encryption scheme SE, which we modify to store triplets of the
form (w, id, op) (instead of the standard w, id), where op =
add/del. The main idea behind our DSE construction called
SDa (Figure 2), is to organize N (without loss of generality,
6
let N be a power-of-two) updates into a collection of log N
independent encrypted indexes EDB0, . . . , EDBlog(N−1) for
sizes 20, . . . , 2log(N−1), each one created with a separate
invocation of SE.Setup with a fresh key.
Initially, all EDBi are empty. For the ﬁrst update the client
sets up an encrypted index for the singleton set (w, id, op)
using SE.Setup and sends it to server who stores it as EDB0.
For future updates, let j be the smallest value for which EDBj
is empty. The server ﬁrst sends to the client all EDBi for
i < j and deletes them locally. The client fully decrypts them
(we denote this in Figure 2 with SE.DecryptAll function) and
runs SE.Setup for the union of their entries, together with
the current update (w, id, op). Note that the total size of the
returned EDBi is 2j − 1, thus the output of SE.Setup is
a new encrypted index of size 2j; this is sent to the server
who stores it as EDBj. At all times, the client stores locally
the corresponding keys and states of the different non-empty
instance of SE as K and σ.
For searches, the parties run SE.Search for each (i.e., non-
empty) instance of SE and return all the individual search
results. Since SE is result-hiding, the client needs to do the
extra work of decrypting the returned values and extracting
the pairs (id, op). The ﬁnal answer is the result of “ﬁltering
out” the deleted entries. Figure 1 illustrates the collection of
the encrypted indexes after each of ﬁve consecutive inserts.
Security. We assume that
the underlying SE scheme is
adaptively secure. Regarding forward privacy, note that each
update (w, id, op) results in running SE.Setup with a freshly
chosen key. The size of the encrypted index (2j in the above
description) is fully determined by the number of previous
updates, thus an update operation can be perfectly emulated
by the setup simulator of SE, even if the setup leakage of
SE is just the database size. This implies that the information
the server sees during updates, is independent of any previous
entries in EDB (including entries about w) which gives us
forward privacy. Regarding backward privacy, things are also
straight-forward. Firstly, since SE is result-hiding and we
store deletions as regular entries, the server does not learn the
indexes of ﬁles that previously contained w. Moreover, during
searches the server learns |DB(w)| as well as how many result
elements come from each of EDBi. In order to simulate the
second part, we only need to know when each update for w
took place—this information together with the total update
count so far, determines in which EDBi each update resides.
We previously deﬁned this information as Updates(w)), hence
our scheme is BP-II.
Observe
Updates(w) to simulate the search transcript.
that SimSearch does
not
always
need
It sufﬁces
EDB0EDB2insertEDB1EDB0EDB1EDB0EDB1EDB0insertinsertinsert124311111122223334insert5EDB05EDB21234Let SE = (Setup, Search, DecryptAll) be a result-
hiding, static searchable encryption scheme.
(K, σ, EDB) ← Setup(1λ)
1: Set EDB to be an empty vector of indexes EDBi
2: Set K, σ to be empty vectors
(K, σ; EDB) ↔ Update(K, op, w, id, σ; EDB)
Server:
1: Find the minimum j such that EDBj = ∅
2: Send to client EDB0, . . . , EDBj−1
Client:
3: Set A ← ∅
4: for i = 0, . . . , j − 1 do
A ← A ∪ SE.DecryptAll(K[i], σ[i], EDBi)
5:
K[i] ← ⊥, σ[i] ← ⊥
6:
7: (K[j], σ[j], EDBA) ← SE.Setup (1λ, A ∪ (w, id, op))
8: Send EDBA to server
Server:
9: Set EDBj ← EDBA
10: for i = 0, . . . , j − 1 do
11:
DB(w) ↔ Search(K, q, σ; EDB)
Client ↔ Server:
1: X ← ∅.
2: for all i such that EDBi (cid:54)= ∅ do
3:
4:
Client:
5: Decrypt entries of X with K and parse them as
6: DB(w) ← {id | (id, add) ∈ X ∧ (id, del) (cid:54)∈ X}
Fig. 2: SDa: from static to dynamic (amortized version).
Let Xi ↔ SE.Search(K[i], q, σ[i]; EDBi)
X ← X ∪ Xi
Set EDBi ← ∅
(id, op)
to know which index each update should be mapped,
to
according to its timestamp. The actual leakage can be much
smaller—depending on the update counter upd it may be as
small as |Updates(w)| (e.g., if upd = 2i for some i ∈ N,
the largest index has just been rebuilt and the previous ones
are empty, hence all the entries for w will come from the
same index and SimSearch does not need their individual
timestamps).
Efﬁciency. After N updates, SDa consists of log N encrypted
indexes, each of which is either empty or stores exactly 2i
items. Assuming SE has linear storage, SDa has server storage
O(N ). If SE has optimal search time, the query cost for
retrieving all the updates for w is O(aw). Since there can be
at most log N non-empty indexes EDBi and a search needs
to be performed in each of them, the total search time for
SDa is O(aw + log N ). Finally, after 2j updates the client will
have run SE.Setup once for size 2j and once for 2j−1, twice
for 2j−2, etc., all the way down to 2j−1 times for size one.
Assuming an underlying static scheme with linear setup time,
the amortized cost per update after N updates is O(log N ).
One static scheme that satisﬁes these assumptions is the
PiBas construction of [12], which we describe in Figure 12.
7
Fig. 3: SDd : from PiBas to DSE (de-amortized version).