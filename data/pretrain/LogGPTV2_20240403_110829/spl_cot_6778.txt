User: 为了实现日志查询分析需求，编写了一段 SPL 语句，请你从专家角度，逐步思考分析需求，尽量详细的解释语句内容是如何实现需求的。

## 分析需求
Linux操作系统审计_七天内主机CPU使用率指标详情

## SPL 语句
starttime="-7d/d" endtime="now/d" appname:top_info_system_stats AND tag:top_info |eval per=(100-cpu.idle_percent) |stats avg(per) as avg_ by ip,hostname |join type=left hostname [[ starttime="-7d/d" endtime="now/d" appname:top_info_system_stats AND tag:top_info | eval per=(100-cpu.idle_percent) |stats max(per) as max_ by ip,hostname]] |eval avg_=format("%.2f%%",avg_) |eval max_=format("%.2f%%",max_) 

## 具体解释

Assistant: 根据提供的分析需求和SPL语句，我将从专家角度逐步分析这个查询的实现过程。

### 分析需求

需求是查询Linux操作系统审计数据中，过去七天内主机CPU使用率指标的详情。

### SPL语句分解

1. **时间范围定义**


```spl
starttime="-7d/d" endtime="now/d"
```
这部分定义了查询的时间范围，即过去七天（`-7d/d`）到当前时间（`now/d`）。
2. **数据筛选**


```spl
appname:top_info_system_stats AND tag:top_info
```
这部分用于筛选数据。只选择`appname`为`top_info_system_stats`且`tag`为`top_info`的数据。这通常是审计日志中标记特定类型数据的标准。
3. **计算CPU使用率**


```spl
eval per=(100-cpu.idle_percent)
```
这里计算CPU的使用率。通常，`cpu.idle_percent`表示CPU的空闲百分比，所以`100-cpu.idle_percent`计算的是CPU的使用率。
4. **统计平均和最大CPU使用率**


```spl
stats avg(per) as avg_ by ip,hostname
```
这部分统计每个IP地址和主机名对应的CPU使用率的平均值。`avg(per)`计算平均值，`as avg_`给这个平均值定义了一个别名，方便后续引用。`by ip,hostname`表示按IP地址和主机名分组统计。

紧接着是一个左连接（`join type=left`）操作，它连接了最大值统计的部分。


```spl
join type=left hostname [[ starttime="-7d/d" endtime="now/d" appname:top_info_system_stats AND tag:top_info | eval per=(100-cpu.idle_percent) |stats max(per) as max_ by ip,hostname]]
```
这部分是查找过去七天内每个IP地址和主机名的CPU使用率的最大值。它与之前的查询通过主机名左连接，以便在结果中包含每个IP地址的平均值和最大值。
5. **格式化输出**


```spl
eval avg_=format("%.2f%%",avg_)
eval max_=format("%.2f%%",max_)
```
这两行代码将计算出的平均值和最大值格式化为带有两位小数的百分比形式，以便于阅读和理解。

### 总结

这个SPL查询首先定义了时间范围，筛选出特定类型的数据，然后计算CPU使用率，统计每个IP地址和主机名的平均值和最大值，并将结果格式化为百分比形式。通过左连接操作，查询能够同时展示每个IP地址的平均值和最大值，从而提供了关于过去七天主机CPU使用率指标的详细信息。