应用编程语言是内容丰富、表达力强的语言，可使用它们构建任何应用程序，而分析代码是一
项很困难的工作，需要大量的相关背景知识。这些工具更像是拼写检查器或语法检查器，它们
无法理解代码或应用程序的语境，因面会遗漏很多重要的安全问题。
3.3.1 Graudit
Graudit是一个简单的脚本和特征集（signature)的 Shell，它使用GNU 工具grep 在源代码中
寻找潜在的安全漏洞。与其他静态分析工具相比，Graudit的优点是它保持了最低限度的技术
要求，并且非常灵活。编写你自己的特征集相对简单。精通正则表达式将会非常有帮助，特征
集最简单的形式就是一个要搜索的单词列表。比如下面的规则可应用于PostgreSQL：
pg_query\s*\(. *\$. *\)
Pg_exec\s*\(. *\s, *\)
Pg_send_query\s*\(. *\s . *\)
Pg_send_quexy_params\s *\(. *\s . *\)
Pg_query_parans\a*\(, *\$, *\)
Pg_send_prepare\a*\(. *\s , *\)
Pg_prepare\s*\(, *\s,*\)
Pg_execute\s*\(. *\$. *\)
Pg_insert\s*\(. *\6. *\)
Pg_put_1ine\s*\(. *\S , *\)
Pg_select\s*\( *\s. *\)
100
---
## Page 115
第3章复查代码中的SQL注入
pg_update\s*\(. *\s, *\)
● URL: www.justanotherhacker.com/projects/graudit.html.
●语言：ASP、JSP、Perl、PHP 和 Python(为任意一种语言编写你自己的配置文件和正则
表达式)。
●平台：Windows、Linux 和 OS X(要求 bash、grep 和 sed)。
·价格：免费。
3.3.2 YASCA
YASCA(YetAnother Source Code Analyzer)是一个开源程序，用于寻找程序源代码中的安全
漏洞和代码质量问题，支持对PHP、Java和JavaScript(默认）等编程语言中的安全漏洞和代码质
量进行分析。YASCA通过基于插件的架构来进行扩展，另外还集成了其他开源项目，比如
FindBugs(http://findbugs.sourceforge.net)、PMD(http://pmd.sourceforge.net)I Jlint(http://artho.com/jlint)
够以HTML、CSV、XML及其他格式生成报告。当直接从JSP文件的HTTP请求中获取输入
时（易于发现），该工具能够识别出潜在的危险函数并对它们进行标识。这个工具虽然还不完美，
但开发人员正在努力改进它。你也可以编写自定义的规则文件来对该工具进行扩展。
●URL: www.yasca.org。
·语言：可针对任何语言编写自己的配置文件和正则表达式。
●平台：Windows 和 Linux
·价格：免费。
3.3.3 Pixy
Pixy是一款免费的Java程序，它能自动扫描PHP4的源代码，目标是检测跨站脚本攻击
(XSS）和SQL注入漏洞。Pixy通过分析源代码来寻找易被感染的变量，之后再跟踪应用的数据
流直到到达一个危险函数。它还能识别出变量何时不再受感染（例如，变量通过了一个审查程
助。通过依赖图，可以很容易跟踪到产生警告的源。但Pixy无法识别mysql_db_queryO、
ociexecuteO和odbc_execO函数中的 SQL注入漏润。不过不要紧，我们可以很容易地编写自己
的配置文件。例如，可以使用下列渗入点文件搜索mysql_db_queryO函数：
 mysql_db_query SQL injection configuration file for user-defined sink
tbs = oxs
mysql_db_query = 0
遗的是，目前Pixy只支持PHP4：
●URL: http://pixybox.seclab.tuwien.ac.at/pixy。
·语言：PHP(只针对版本4)。
·平台：Windows 和 Linux。
·价格：免费。
101
---
## Page 116
SQL注入攻击与防御（第2版）
3.3.4 AppCodeScan
AppCodeScan是一款用于扫描多种源代码漏洞（包括SQL注入）的工具.它使用正则表达式
匹配字符串来识别潜在的危险函数和代码中的字符串，同时还提供了很多配置文件。该工具无
法明确判定漏洞是否存在，但当使用会导致漏洞出现的函数时，它能加以识别。您还可以使用
AppCodeScan来识别应用的入口点，有一点很有用：它能跟踪代码中的参数，该工具运行在.NET
框架下，截至本书编写时，它仍处于最初的beta阶段。对于喜欢使用GUI（图形用户界面）而非
命令行进行工作的用户来说，该工其是个不错的选择。配置文件的编写和修改都很简单。下面
是在检测.NET代码中潜在的SQL注入漏润时使用的默认正则表达式：
#Scanning for SQL injections
*.Sq1Command, *?1 .*,DbCommand. *?1. *,01eDbCommand, *?1 .*,Sq1Uti1ity. *?1
 * , OdbcCommand, *?1 . *,OleDbDataAdapter , *?1 . *,Sq1DataSource.*?
要添加OracleCommandO函数，只须编写一个用于PHP或Java的正则表达式即可。可以
为PHP应用下列规则：
 PHP SQL injection Rules file for AppCodeScan
 Scanning for SQL injections
. *.mssql_query.*?1 .*.mysql_quezy.*?1 .*.mysql_db_query. *?1
. *,oc1_parse. *?1. *,ora_parse, *?1 , *,mssq1_bind, *?1. *,mssq1,
execute.*?1.*.odbc_prepare.*?1.*,odbc_execute,*?1.*,odbc_
execute. *?I . *,odbc_exec, *?
●URL: www.blueinfy.com/.
·语言：可针对任何语言编写自己的配置文件和正则表达式。
·平台：Windows.
·价格：免费。
3.3.5OWASPLAPSE+项目
LAPSE+是一个用于检测漏洞的安全扫描器，特别是检测JavaEE应用程序中不可信数据
的注入漏洞。它已经被开发为Eclipse Java开发环境（www.ceclipse.org)的一个插件，用于Eclipse
Helios 和 Java 1.6或更高版本。LAPSE+基于 GPL 软件 LAPSE，作为 Griffin Software Security
Project 的—部分，它是由 Benjamin Livshits 开发的。由 Evalues Lab of Universidad Carlos III de
Madrid开发的新版本插件提供了更多的特性，用于分析恶意数据在应用程序中的传播并识别新
的漏洞。LAPSE+针对下列Web应用程序漏洞进行检测：参数纂改、URL募改、操纵Header
Cookie下毒（CookiePoisoning)、SQL注入、跨站脚本攻击)、HTTP响应拆分攻击(HTTPResponse
Splitting)、命令注入(Command Injection)、路径遍历攻击(Path Traversal)、XPath 注入、XML注
入和LDAP注入。为了判断从漏洞渗入点(Vulnerability Sink)是否能到达漏洞源(Vulnerability Source)，
LAPSE+采用感染的办法进行分析，这是通过对不同的赋值执行后向传播(backwardpropagation)
来实现的。LAPSE+是高度可定制的，配置文件（sources.xml和sinks.xml)与插件安装在一起，
可通过编辑配置文件来分别扩展漏洞源和渗入点的方法集。
●URL: www.owasp.org/index.php/OWASP_LAPSE_Project。
·语言：Java J2EE。
102
---
## Page 117
第3章复查代码中的SQL注入
·平台：Windows、Linux和OS X.
·IDE: Eclipse。
·价格：免费。
3.3.6MicrosoftSQL注入源代码分析器
MicrosofSQL注入源代码分析器是一款静态代码分析工具，用于发现ASP代码中的SQL
注入漏洞。该工具针对传统的ASP代码而非.NET代码。此外，该工具只能理解使用VBScript
编写的传统的ASP代码，而无法分析由其他语言（比如JavaScript）编写的服务器端代码。
●URL: http://support.microsoff.com/kb/954476。
●语言：传统ASP(VBScript)。
·平台：Windows。
·价格：免费。
3.3.7CAT.NET
CAT.NET是一款二进制代码分析工具，可用于识别某些流行漏洞中常见的变量。这些漏洞
2005或2008 的管理单元（snap-in)，能帮助识别托管代码（C#、Visual Basic.NET、J#)应用中的
安全缺陷。它通过扫描应用的二进制文件和（或）程序集，跟踪语句、方法和程序集间的数据流
米实现上述功能。在此过程中会包括诸如属性赋值(property assignment)和感染实例(instance
tainting)操作的一些间接数据类型。请注意，对于Visual Studio2010及其之后的更高版本，无
须单独使用CAT.NET，因为这些版本中的 CodeAnalysis功能已经集成了CAT.NET的功能（仅
对Premium版和UItimate版可用）。
●URL: www.microsoft.com/download/en/details.aspx?id=19968
●语言：C#、Visual Basic .NET、J#。
·平台：Windows.
●IDE: Visual Studio。
·价格：免费。
3.3.8RIPS—PHP脚本漏洞的静态源代码分析器
RIPS是一款使用PHP编写的工具，它充分利用了静态代码分析技术以发现PHP应用程
序中的漏润。通过识别单词符号和解析所有的源代码文件，RIPS可以将PHP源代码转换为程
序模型。然后可以检测敏感的渗入点（具有潜在漏洞的函数），在程序的执行流程中，这些敏感
的渗入点容易被用户的输入感染（或被恶意用户影响)。RIPS还提供了一个集成的代码审计框
架，可用于进一步的手工分析。
●URL: http://rips-scanner.sourceforge.net/。
·语言：PHP.
●平台：OS X、Windows 和Linux。
·价格：免费。
103
---
## Page 118
SQL注入攻击与防御（第2版）
3.3.9CodePro AnalytiX
CodeProAnalytiX无缝地集成在Eclipse环境中，它使用自动源代码分析精确定位代码质量
问题和敏感的漏洞。
CodeProAnalytiX具有大量可用的预配置审计规则。“TaintedUserInput”规则可用于从
源到渗入点的潜在的执行路径。值得注意的是，CodeProAnalytiX发现的可能路径是它在执行
静态分析时找到的路径，因此我们不知道在实际运行时，应用程序是否会按照特定的执行路径
去执行。CodeProAnalytiX还具有大量可用的、特定于SQL注入的审计规则，可以帮助我们识别
SQL注入问题。要创建自己的审计规则并不简单，但也并非是非常复杂的任务（请参考http://code.
google.com/javadevtools/codepro/doc/features/audit/audit_adding_new_rules.html) :
●URL: http://code.google.com/javadevtools/codepro/doc/index.html
●语言：Java、JSP、JSF、Struts、Hibermate 和 XML。
●平台：OS X、Windows 和 Linux。
·价格：免费。
3.3.10Teachable Static Analysis Workbench
Teachable Static Analysis Workbench（TeSA）通过安全分析对Java Web应用程序进行评估，
目的是找出与不恰当的输入验证有关的安全漏洞。与前面介绍的静态分析工具相比，TeSA具
有一些主要的差别：TeSA要求分析人员“教会（配置）”该工具以发现所有漏洞，这些漏洞可以
表示为从一个易受感染的源直到敏感渗入点（sensitive sink）的数据流。例如，为了“教会”该工
具如何识别 SQL注入间题，分析人员必须将HttpServletRequestgetParameterO方法标记为易感
染数据源，并将executeQueryO函数标记为敏感渗入点。TeSA有别于其他静态分析工具的另外
一个特性是：通过执行恰当的验证，可以标记出那些确实不会造成数据感染的方法。受感染的
数据经过这些标记过的函数之后就会变成无感染的数据，并且不会报告这样的问题。对于
FindBugs 工具(http:/findbugs.sourceforge.net)，该静态分析工具是作为插件(plugin)来实现的。
当前版本的 TeSA仅支持Web 应用程序中的 servlet 和Java Server Pages，没有内建支持任
何Web应用程序框架。
●URL: http://codc.google.com/p/teachablesa/.
●语言：JAVA Servlet Pages。
● IDE: Eclipse IDE for Java EE Developers 3.4 (Ganymede)
·平台：Windows 和Linux。
·价格：免费。
3.3.11商业源代码复查工具
设计商业源代码分析器（Commercial Source CodeAnalyzer，SCA）的初衷是将它们集成到应
用的开发生命周期中。目标是从根本上帮助应用开发人员根除应用源代码中的漏洞，帮助他们
产生本质上更安全的代码。为实现该目标，SCA提供了与编码错误（会引发安全漏洞）相关的培
训和知识，并为开发人员提供了工具和技巧以便他们能很容易地遵循安全编码实践。每种工具
均以特有的方式销售，附带的资料中包含了大量的内容。本节不是推荐某款产品。要对这些产
品进行客观公正的比较和评价非常困难。进一步讲，要想找到使用各种产品的方法或方法学的
104
---
## Page 119
第3章复查代码中的SQL注入
技术细节也并非易事，我们不要迷失在公关手段和销售材料中！
本节列举的工具并不丰富，主要介绍的是几款比较高级的工具套件，有些读者可能会需要
这些套件。我曾跟许多客户合作过很多成功的集成解决方案，这些方案同时集成了商业现货供
应（COTS)和免费开源软件（FOSS）源代码分析器及工具套件。对于不同的情况，要根据需求来
选择相应的方法和产品。使用优秀的质量保证技术可以有效识别并消除开发阶段的漏润。高效
的质量保证程序应该集成渗透测试、模糊测试(fuzz testing)和源代码审查技术。改进软件的开
发过程、构建更好的软件是提高软件安全性的有效途径（例如，产生缺陷和漏洞更少的软件）。
有很多COTS软件包可用于支持软件安全保证活动。但使用它们之前，必须仔细地进行评估以
保证它们确实有效。建议在花费大量资金之前，先自已进行全面的产品评估。为找到适合的工
具，可以先使用免费的试用版（可从公司的Web站点上下载）或者与销售代表联系。
秘密手记
符合工作要求的工具
将SCA融入开发生命周期中并不会自动产生安全的应用程序代码。有些工具则在
历史数据的基础上结合漂亮的图形和超势分析报告来实现管理度量，这样无意中会为开
发人员带来压力，项目领导也会因难以完成这些比较随意的目标而受到遣责，从而产生
事与愿违的效果，与黑客相似，开发人员也能找到巧妙的方式来打败系统以便产生比较
讨人喜欢的管理度量（例如，产生不会遗到SCA标记的代码），而这样会导致代码中仍然
存在无法识别的漏洞。
此外，如果开发人员不理解工具为什么会报告漏润，而且如果工具也没有提供足够
的信息来对原因进行全面讲解，那么这时开发人员会想当然地认为该警报不过是个错误
肯定。在RealNetworks的RcalPlayer软件中就曾出现过一些类似的众所周知的例子
(CVE-2005-0455、CAN-2005-1766和 CVE-2007-3410).RealNetworks 发布的满洞公告
中包含了易受攻击的源代码行，不过该代码行上添加了当前流行的SCA（Flawfinder）的
一条忽略指令。分析工具曾经报告过该漏润，但开发人员并未修复它，只是向代码添加
了一条忽略指令，这样分析工具就不会再报告该漏润了！
古语说的好，“拙工常怪工具差”！对于这种情况，要责备工具功能上的失败会很容
易、但事情并非如此，在开发生命周期中，永远不要只依赖一种工具，相反，应该使用
多种工具和技术来加以平街，此外，在项目的不同阶段，应该找几个经验丰富、知识渊
博的成员对项目进行审查，这样便可以保证遵循已实现的操作和过程，不应该对开发人
员严加指责。相反，应该在必要时给予他们建设性的反馈意见和培训，这样他们才能从
过程中学到知识，最终产生更安全的代码，相比明确的软件安全解决方案，代码分析工
具应被看作指导原则或最初的参考标准。
3.3.12Fortify源代码分析器