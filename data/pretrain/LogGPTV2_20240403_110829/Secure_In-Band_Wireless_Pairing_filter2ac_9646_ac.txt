the medium access control (MAC) protocol, and waits
until the medium is idle before transmitting its message.
However, if the message cannot be transmitted by time t
(e.g., because an adversary is hogging the medium), the
sender overrides the MAC’s carrier-sense, and transmits
the announcement anyway, so that recipients will detect
tampering. Note that the CTS-to-SELF requires honest
nodes to release the medium for the registrar to transmit
its own TEA reply.
For the receiver side, TEA provides two functions,
• handle TEA RECV START (bool dir), and
• msg list TEA RECV GET (handle h).
The ﬁrst function, TEA RECV START, starts listening
on the wireless medium for TEA messages that are ei-
ther requests (from an enrollee) or replies (from a reg-
istrar), based on the dir ﬂag. The second function,
TEA RECV GET, is used to retrieve the set of messages
accumulated by the receiver since TEA RECV START or
TEA RECV GET was last invoked. If TEA RECV GET
could not decode a possible TEA message (or verify that it
was not tampered with), it returns a special value RETRY,
which causes the caller (i.e., TEP) to re-run its proto-
col. As an optimization, if all of the TEA messages that
TEA RECV GET was unable to decode were overlapping
with the receiver’s own transmissions (i.e., a concurrent
TEA SEND), TEA RECV GET returns a special value
OVERLAP instead of RETRY. We describe in §6.4 how
a node detects TEA messages that overlap with its own
transmissions, and in Appendix B how we use the overlap
information to optimize wireless medium utilization.
2Two of the slots are for the direction bit, and the remaining 142
are for the bit-balanced hash bits. More speciﬁcally, the bit balancing
algorithm, in §5.1.2, takes N input bits and outputs N + 2⌈logN⌉ bits.
Since the hash is a 128 bit function, the bit balancing algorithm produces
142 bit balanced hash bits.
5.2 Securing PBC using TEA
Using the TEA mechanism, we will now describe how
TEP—a modiﬁed version of the PBC protocol—avoids
man-in-the-middle attacks.
6
Once the button is pressed on the enrollee, the enrollee
repeatedly scans the 802.11 channels in a round robin
manner, as in the current PBC protocol. On each channel,
the enrollee transmits a TEA request, i.e., a TEA message
with the direction ﬂag set to “10”. The TEA request con-
tains the enrollee’s public key (and any PBC information
included in an enrollee’s probe). If an adversary continu-
ously occupies the medium for tx tmo (e.g., 1 second), the
enrollee overrides carrier-sense and transmits its message
anyway. The enrollee then waits for a TEA response from
a registrar, which is required to immediately respond. The
enrollee records the responses, if any, and after a speci-
ﬁed period on each channel it moves to the next 802.11
channel and repeats the process. The enrollee continues
to cycle through all 802.11 channels for PBC’s walk time
period. The enrollee’s logic corresponds to the following
pseudo-code to build up r, the set of registrar responses:
r ← ∅
for 120 sec + #channels × (tx tmo + 2 × tea duration)
⊲ walk time + max enrollee scan period
do
switch to next 802.11 channel
h ← TEA RECV START (reply)
TEA SEND (request, enroll info, now + tx tmo)
SLEEP (tea duration)
r ← r ∪ TEA RECV GET (h)
end for
A registrar follows a similar protocol. Once the PBC
button is pressed, the registrar starts listening for possible
TEA requests on its 802.11 channel. Every time a TEA
message is received, the registrar records the message
payload, and immediately sends its own TEA message in
response, containing the registrar’s public key. It is safe
to reply immediately because the sender’s TEA message
ended with a CTS-to-SELF, which reserved the medium
for the registrar’s reply. The registrar’s pseudo-code to
build up e, the set of enrollee messages, is as follows:
e ← ∅
h ← TEA RECV START (request)
for 120 sec + #channels × (tx tmo + 2 × tea duration)
⊲ walk time + max enrollee scan period
do
m ← TEA RECV GET (h)
if m 6= ∅ then
e ← e ∪ m
TEA SEND (reply, registrar info, now)
⊲ enrollee, RETRY, or OVERLAP
⊲ send reply immediately
end if
end for
After the PBC’s walk time expires, both the enrollee
and the registrar check the list of received messages. Suc-
cessful pairing requires that both the enrollee and the
registrar receive exactly one unique public key via TEA
messages, and that no messages were tampered with (i.e.,
TEA RECV GET never returned RETRY or OVERLAP). If
exactly one public key was received, it must have been the
7
public key of the other party, and TEP can safely proceed
with pairing. If more than one public key was received,
or RETRY or OVERLAP was returned, then a session over-
lap error is raised, indicating that more than one pair of
devices may be attempting to pair, or that an adversary is
mounting an attack. In this situation, the user must retry
pairing.
5.2.1 Reducing Medium Occupancy
The protocol described above is correct and secure (as
we will prove in §7.1). However, it can be inefﬁcient if
somehow multiple registrars transmit overlapping replies
at almost the same time. Each of them will then assume
it may have missed a request from some enrollee (since it
sensed a concurrent TEA message), and each will re-send
its reply. This cycle may continue for the walk time of 120
seconds, unnecessarily occupying the wireless medium.
In Appendix B, we describe an optimization that avoids
this situation and we prove that the optimized protocol
maintains the same security guarantees.
5.3 Example scenarios
Figure 4 shows how TEP works in ﬁve potential scenar-
ios. In scenario (a), there is no attacker. In this case,
the enrollee sends a request to which the registrar replies
immediately. The two devices can thus proceed to com-
plete pairing after 120 seconds. In scenario (b), the en-
rollee transmits its request, but the attacker immediately
jams it so that the registrar can not decode the enrollee’s
request. However, the registrar detects a long burst of
energy, which the registrar interprets as a TEA announce-
ment, causing it to reply to the enrollee.
In scenario (c), the enrollee sends the request; the at-
tacker then captures the medium at the same time as the
registrar, and transmits a reply, at a high power, imperson-
ating the registrar. Because of capture effect, the enrollee
decodes the message payload from the attacker. But since
the registrar and the attacker transmit the hash function
of different messages in the ON-OFF slots, the enrollee
notes that the slots do not have equal number of zeros and
ones and hence detects tampering with the announcement.
In scenario (d), the adversary sends a request message
in an attempt to gain access to the registrar; as stipulated
by TEP, the registrar replies to this request. However,
since the registrar waits for 120 seconds before complet-
ing the pairing, it also hears the request from the enrollee.
Since the registrar receives requests from two devices, it
raises a session overlap error.
Finally, in scenario (e), the adversary sends a TEA re-
quest, receives the registrar’s reply, and then continuously
jams the enrollee using a directional antenna. By using
a directional antenna, the adversary ensures that the reg-
istrar does not detect the jamming signal and hence does
not interpret it as an invalid TEA. The enrollee carrier-
T=0
tep_request
T=0
tep_request
T=0
tep_request
tep_reply
Enrollee
Registrar
tep_reply
Enrollee
Registrar
Adversary
Adversary
tep_reply
tep_reply
Enrollee
Registrar
Adversary
Scenario a) No adversary 
Scenario b) Adversary jams the Enrollee’s request
Scenario c) Adversary jams the Registrar’s request
T=0
T=0
tep_request
T=tx_tmo
tep_request
tep_reply
…..
tep_reply
tep_request
Enrollee
Registrar
Adversary
tep_reply
…..
tep_request
Jamming Signal
Enrollee
tep_reply
Registrar
Adversary
Scenario d) Adversary tries to pair before the Enrollee
Scenario e) Adversary jams Enrollee with a directional antenna
Figure 4: Timelines of ﬁve example runs of the TEP protocol.
senses, detects that the medium is occupied, and does not
transmit until it times out after tx tmo seconds, at which
point it ignores carrier sense and transmits its TEA re-
quest. The registrar listens to this request message and
detects the presence of the enrollee. Since the registrar
receives requests from two devices, it raises a session
overlap error.
5.4 Making Pairing Faster
The extension of PBC to use TEA, described above, re-
quires the enrollee and registrar to wait for 120 seconds
before completing the association process. If the enrollee
does not wait for a full 120 seconds, and simply picks
the ﬁrst responding registrar, it may pick an adversary’s
registrar—a legitimate registrar only replies when its PBC
button has been pushed, and the user might push the reg-
istrar’s PBC button slightly later than the enrollee’s. Be-
cause the enrollee does not know if the user has already
pushed the registrar’s button, it has to wait for 120 sec-
onds to be sure that the user has pushed the button. In this
section, we describe how one can eliminate this delay.
First, if the user always pushes the enrollee’s button
before the registrar’s button, then the registrar does not
need to wait for 120 seconds; the registrar needs to wait
for just the time it takes an enrollee to cycle through all
of 802.11’s channels (which is less than 12s). Second, we
can also eliminate the enrollee’s wait time. Speciﬁcally,
if the user explicitly tells the enrollee that the registrar’s
button was pushed, the enrollee can complete the associa-
tion process after one cycle through the 802.11 channels,
eliminating the additional wait time.
For example, one approach would be to have the user
ﬁrst press the button on the enrollee, then press the button
on the registrar, and then again push the button on the
enrollee. Note that, in this approach, the registrar does
not have to wait for 120 seconds: because the registrar’s
button is always pushed after the enrollee, the registrar
knows that the enrollee is active, and is guaranteed to see
the enrollee’s TEA message within the time required for
the enrollee to cycle through all 802.11 channels. (Of
course, if the 120 second period expires on the enrollee
without any additional button pushes, the enrollee can pro-
ceed to completion as before, with 2 total button pushes
from the user.)
6 TEA ON OFF-THE-SHELF HARDWARE
We implement TEA on Atheros AR5001X+ chipsets by
modifying the ath5k driver, and running TEA’s timing-
sensitive code in a kernel driver.
6.1 Scheduling Slot Transmission
To reduce the air time of a TEA, we must minimize the
size of a single slot packet in the ON-OFF slots. Since
the slot packet’s payload need not be decoded (just the
presence or absence of a slot packet conveys a 1 or 0 bit),
we transmit slot packets at the highest bitrate, 54 Mbps,
for a total of 40 µs.
In addition to reducing the size of a slot packet, TEA
must transmit slot packets at precise slot boundaries.
Queueing in the kernel and carrier-sense in the card make
precise transmission timing challenging. We avoid ker-
nel queueing by implementing TEA in a kernel driver
and using high-resolution timers. We avoid delays in the
wireless card itself through several changes to the card
ﬁrmware and driver, as follows. For the duration of the
slots, we disable binary exponential backoff (802.11 BEB)
8
by setting CW MIN and CW MAX to 1. To prevent carrier-
sense backoff, we disable automatic noise calibration by
setting the noise ﬂoor register to “high”. We place slot
packets in the high-priority queue. Finally, we disable the
transmitter’s own beacons by disabling the beacon queue.
In aggregate, these changes allow us to make slot packets
as short as 40 µs and maintain accurate slot timing.
6.2 Energy Detection at the Receiver
A TEA receiver detects a synchronization packet and dis-
tinguishes ON from OFF slots by checking the energy
level on the medium. Hence, the receiver needs to dis-
tinguish the noise level, which is around -90dB, from an
actual transmission. To do this, we set the noise ﬂoor
to -90dB and deactivate auto-calibration while running
TEP.3
While an ideal receiver would detect energy at the ﬁnest
resolution (i.e., every signal sample), existing wireless
chipsets do not give access to these samples. Instead,
we exploit two registers provided by the ath5k ﬁrmware:
AR5K PROFCNT CYCLE and AR5K PROFCNT RXCLR.
The ﬁrst register is incremented every clock cycle based
on the clock on the wireless hardware. The second register
on the other hand is increment only if the hardware ﬁnds
high energy during that clock cycle.
Using these registers, we deﬁne a sensing window (SW)
as the interval over which the receiver collects aggregate
information for whether the medium is occupied or silent,
as deﬁned in Table 1. At the beginning of a SW, a TEA re-
ceiver resets both registers to 0, and reads them at the end
of the SW. The ratio of these two registers at the end of
the SW, AR5K PROFCNT RXCLR
AR5K PROFCNT CYCLE , is deﬁned as the fractional
occupancy. By putting a threshold on the fractional occu-
pancy, a TEA receiver can detect whether the medium is
occupied in a particular SW, and hence can detect energy
bursts and measure their durations in units of the sensing
window. Similar to the sender, a TEA receiver runs in the
kernel to precisely schedule sensing windows.
Our implementation dynamically adjusts the length of
the sensing window to minimize system overhead. The
TEA receiver uses a long sensing window of 2 ms, un-
til it detects a burst of energy longer than 17 ms. This
indicates a synchronization packet, at which point the
receiver switches to a 20 µs sensing window to accurately
measure energy during slots, providing on average two
sensing window measurements for every slot.
3 There is a tradeoff between the noise ﬂoor and the permissible
distance between the pairing devices. In particular, pairing devices