pan_coord=0x1 
Transmitter2: 
short_addr=0xde02 
panid=0xabba 
long_addr=0x158d0000540591 
Destination0: 
security_enabled=0x1 
frame_version=0x1L 
short_addr=0xde00 
coord=0x1 
command=0x2 
panid=0xabba 
data=0x5 
long_addr=0x158d000053da9d 
pan_coord=0x1 
It is worth mentioning that this is an important step because long addresses are part of the security material of the IEEE 802.15.4 standard 
to secure and unsecure frames. Nonetheless, short source addresses should not be discarded because when they are used to transmit secured 
and, more precisely, authenticated frames, they are part of the data on which the MIC is computed.  
6.3 ASSOCIATION PROCEDURE 
At this point, since we were able to force the resynchronization of sensors, we decided to focus on the association procedure. By analyzing 
the IEEE 802.15.4 frames exchanged between the PAN coordinator and the sensors during an association procedure, we found out that they 
are not secured (security level 0). In fact, the security is only applied to frames once the sensors are associated with the PAN coordinator. 
From there, by mimicking a sensor while requesting the PAN coordinator for association, we also found out that the PAN coordinator did 
not implement any higher-layer authentication mechanism. In fact, any of the 64 bits extended address we used in requests was accepted by 
the PAN coordinator. Moreover, by combining multiple forced resynchronizations and spoofed associations, we could infer that the PAN 
coordinator was always assigning short address 0xde01 to the first device requesting association, 0xde02 to the second one and so on. 
Then, we searched for activities on all IEEE 802.15.4 channels after the sensors were forcibly desynchronized. This lead to an important 
discovery: the sensors perform active scanning on channels 11 to 26. Precisely, for each of these channels, they send a beacon request 
command and waits for beacons. If answered, they start an association procedure, if not, they move on to the next channel. If they are not 
associated with a PAN coordinator after probing channel 26, they reboot and start scanning again. This process is repeated indefinitely until 
a PAN coordinator is found. This means that if we continuously prevent synchronization on channel 18, we can forcibly reboot the sensors. 
Following this, by forcing the resynchronization of sensors while mimicking a PAN coordinator sending periodic beacons on a channel 
below 18, we could infer that the sensors were checking the addressing information of our beacons before starting the association 
procedure. In fact, based on a trial and error approach, we found out that the sensors were both checking the short address and the PANId 
of incoming beacons. Thus, if this addressing information does not match the one from the real PAN coordinator, the association procedure 
is not triggered. That being said, this authentication process can be bypassed simply by properly spoofing the legitimate PAN coordinator 
since, as previously stated, the association procedure does not rely on secured frames. 
Finally, after forcing both sensors to associate with our fake PAN coordinator, we found out that if the real PAN coordinator does not 
receive data frames from the sensors for more than five minutes, it stops sending beacons for a finite period of time. We thus thought of the 
most probable explanation: assuming a possible failure because of the lack of incoming data, the PAN coordinator reboots to ensure service 
continuity. If true, this meant that we had now the capability to forcibly reboot all devices: the PAN coordinator and the sensors. 
6.4 FRAMES COUNTERS 
Assuming that we were now able to forcibly reboot both the PAN coordinator and the sensors, we decided to focus on the frame counters. 
6.4.1 INCOMING FRAME COUNTERS 
The incoming frame counter is part of the security material in the IEEE 802.15.4 standard and is used to ensure the sequential freshness of 
incoming frames. More precisely, for each known device, a given device stores an incoming frame counter that represents the last received 
frame counter. During the incoming frame procedure, the recipient device shall reject the received frame if the new frame counter is less 
than the last received frame counter. Otherwise the incoming frame counter is updated accordingly and the new incoming frame is 
processed. This mechanism is used to prevent replay attacks. 
We have been able to demonstrate that the incoming frame counters were reset to zero after the PAN coordinator has rebooted by 
performing the following procedure: 
1. 
Force disassociation between the sensors and the PAN coordinator; 
2. 
Capture the following association procedures to infer the addressing information (i.e., both short and long addresses); 
3. 
Capture the network activity for a period long enough to catch a least one outgoing secured data frame for each sensors; 
4. 
Spoof the PAN coordinator but with periodic beacons sent on a channel below 18; 
5. 
Force disassociation again between the sensors and the PAN coordinator; 
6. 
Verify that the sensors are now associated with the fake PAN coordinator; 
7. 
Wait for the beacons from the real PAN coordinator to stop (i.e., wait for 5 minutes); 
8. 
Spoof sensors by requesting association with the real PAN coordinator on channel 18 while meeting the addressing information 
capture at step 2 (i.e., associate the fake sensors in the correct order so as to match the short addresses previously assigned); 
9. 
For both fake sensors, replay secured packets captured at step 3; 
10. Observe that this time the beacons from the real PAN coordinator do not stop after 5 minutes; 
If the beacons from the real PAN coordinator in fact do not stop after 5 minutes, it means that the replayed frames were actually accepted. 
Consequently, it also means that the incoming frame counters have been reset to zero, confirming by the way that the PAN coordinator 
actually reboots in this situation. 
Failing to store the frame counters in non-volatile memory is a security issue we have encountered several times on actual security audits. 
In this particular case, a possible attack scenario would be malicious individuals replaying secured frames, thus persuading the distributed 
water management system of a normal activity, while contaminating the water. This is an important finding as this scenario we just 
considered was one on the major undesired events identified by the stakeholders behind this security audit. 
6.4.2 OUTGOING FRAME COUNTERS 
Similarly, the outgoing frame counter is part of the security material of the IEEE 802.15.4 standard as it is used by the originator device to 
secure outgoing frames. More precisely, it is used to construct the nonce. As it is required by recipient device during the unsecuring 
procedure, it is always included in the MAC header of each secured frame. For a given originator, this counter is incremented by one each 
time a frame is secured. This mechanism ensures that the keying material for every frame is unique. When the frame counter reaches is 
maximum value of 0xffffffff the associated keying material can no longer be used, thus requiring the corresponding key to be updated. 
By comparing the header of secured frame emitted by a sensor before forcing a reboot (see Figure 7) and after forcing a reboot (see Figure 
8), we could easily infer that the outgoing frame counters were also reset to zero upon the reboot of a sensor (in the following example, it 
went from 0x26000000 to 0x0). 
Again, failing to store the frame counters in non-volatile memory is a security issue we have encountered several times on actual security 
audits. This time, it opens up the possibility of conducting same-nonce attacks (see section 5.1 for details) and thus may lead to 
confidentiality issues. However, in this particular case, confidentiality was not considered a high priority compared to integrity and 
availability issues. That being said, we had already demonstrated in section 6.4.1 how to compromise both integrity and availability. 
Figure 7. Dissected IEEE 802.15.4 header of a secured frame before forcing a sensor to reboot
>>> p[44].show() 
###[ Gnuradio header ]### 
  proto= 2 
  reserved1= 0x0 
  reserved2= 0 
###[ 802.15.4 ]### 
     fcf_reserved_1= 0L 
     fcf_panidcompress= True 
     fcf_ackreq= True 
     fcf_pending= False 
     fcf_security= True 
     fcf_frametype= Data 
     fcf_srcaddrmode= Short 
     fcf_framever= 1L 
     fcf_destaddrmode= Short 
     fcf_reserved_2= 0L 
     seqnum= 189 
###[ 802.15.4 Data ]### 
        dest_panid= 0xabba 
        dest_addr= 0xde00 
        src_addr= 0xde01 
###[ 802.15.4-2006 Auxiliary Security Header 
]### 
           sec_sc_reserved= 0L 
           sec_sc_keyidmode= 1oKeyIndex 
           sec_sc_seclevel= ENC-MIC-32 
           sec_framecounter= 0x26000000 
           sec_keyid_keyindex= 0x1
Figure 8. Dissected IEEE 802.15.4 header of a secured frame after forcing a sensor to reboot
>>> p[204].show() 
###[ Gnuradio header ]### 
  proto= 2 
  reserved1= 0x0 
  reserved2= 0 
###[ 802.15.4 ]### 
     fcf_reserved_1= 0L 
     fcf_panidcompress= True 
     fcf_ackreq= True 
     fcf_pending= False 
     fcf_security= True 
     fcf_frametype= Data 
     fcf_srcaddrmode= Short 
     fcf_framever= 1L 
     fcf_destaddrmode= Short 
     fcf_reserved_2= 0L 
     seqnum= 129 
###[ 802.15.4 Data ]### 
        dest_panid= 0xabba 
        dest_addr= 0xde00 
        src_addr= 0xde01 
###[ 802.15.4-2006 Auxiliary Security Header 
]### 
           sec_sc_reserved= 0L 
           sec_sc_keyidmode= 1oKeyIndex 
           sec_sc_seclevel= ENC-MIC-32 
           sec_framecounter= 0x0 
           sec_keyid_keyindex= 0x1 
6.5 SECURED FRAMES 
Nonetheless, it is possible to compromise integrity one step further: all the conditions to implement a malleability attack are met (see 
section 5.3 for details). This means that, instead of replaying captured secured frames, we could go as far as forging new ones. However, 
this would require implementing first the same-nonce attack on a scale large enough to gather the appropriate amount of keystreams with 
their corresponding frame counters. Limited by time and resources, in agreement with the stakeholders, we move to a “gray-box” approach 
and we were therefore provided with the plaintext data of multiple captured secured frames. 
From there, with a reasonable amount of keystreams that could be used right after forcing the reboot of the PAN coordinator (i.e., we had to 
force a reboot each time we used them all), we now had all we needed to use the ARSEN router and start auditing higher-layer protocols. 
The continuation of this audit consisted in applying a standard penetration testing methodology, which was the purpose of the ARSEN 
project, but upon achievement of this goal, the rest is therefore out of the scope of this paper. It is worth mentioning that, on other security 
audits, we were able to conduct physical attacks to extract the firmware and access the encryption keys. This is usually the preferred and 
easiest way of gaining the capability to forge secured frames but, in this case, this approach was explicitly discarded by the stakeholders. 
7. CONCLUSION 
In this paper, we have presented the ARSEN project: Advanced Routing for 6LoWPAN and Ethernet Networks. To that end, we have 
detailed all the mechanisms we have implemented in order to provide security auditors with the means to connect to any existing 
6LoWPAN networks by supporting a wide range of IEEE 802.15.4 configurations and MAC-sublayer attacks. Then, we have demonstrated 
its capabilities on an actual wireless communication infrastructure dedicated to the monitoring of a water distribution network system. 
As for future work, it is worth noting that, initially, the ARSEN project was about developing a fully customizable IEEE 802.15.4 / 
6LoWPAN network interface over Ethernet. We moved to a software-only project based on Scapy-radio because of time constraints but at 
the cost high latencies and expensive SDR hardware. Now that our approach has shown its usefulness on actual security audits, we plan on 
resuming the hardware implementation using a cheap off-the-shelf system-on-chip solution. 
8. ACKNOWLEDGMENT 
This work was conducted by Airbus Defence and Space and was funded by ACQUEAU, the Eureka Cluster for Water, under grant from 
WIN4SMART (Water Information Network for Sensing, Monitoring & Actuating in Real Time) and by ITEA, the Eureka Cluster for 
Software-intensive Systems & Services, under grant from FUSE-IT (Future Unified System for Energy and Information Technology). 
9. REFERENCES 
[1] IEEE Std 802.15.4-2003, IEEE Standard for Local and Metropolitan Area Networks, Part 15.4: Low-Rate Wireless Personal Area 
Networks (LR-WPANs). 
[2] IEEE STD 802.15.4-2006, IEEE Standard for Local and Metropolitan Area Networks, Part 15.4: Low-Rate Wireless Personal Area 
Networks (LR-WPANs). 
[3] IEEE Std 802.15.4-2011, IEEE Standard for Local and Metropolitan Area Networks, Part 15.4: Low-Rate Wireless Personal Area 
Networks (LR-WPANs). 
[4] IEEE Std 802.15.4e-2012, IEEE Standard for Local and Metropolitan Area Networks, Part 15.4: Low-Rate Wireless Personal Area 
Networks (LR-WPANs), Amendment 1: MAC Sublayer. 
[5] V. B. Mišić, J. Fung and J. Mišić, MAC Layer Attacks in 802.15.4 Sensor Networks, in Security in Sensor Networks, 2006, pp.27-46. 
[6] R. Sokullu, O. Dagdeviren et al., GTS attack: An IEEE 802.15.4 MAC Layer Attack in Wireless Sensor Networks, in the International 
Journal on Advances in Internet Technology, 2009, pp.105-116. 
[7] J.-M. Picod, A. Lebrun, J.-C. Demay, Bringing Software Defined Radio to the Penetration Testing Community, Black Hat USA, 2014. 
[8] http://gnuradio.org/redmine/projects/gnuradio/wiki 
[9] http://secdev.org/projects/scapy