[36] Nicholas Nethercote and Julian Seward. Valgrind: a framework for
heavyweight dynamic binary instrumentation. In Proceedings of the
2007 ACM SIGPLAN Conference on Programming Language Design
and Implementation (PLDI), San Diego, CA, June 2007.
[37] Gene Novark and Emery D. Berger. DieHarder: Securing the Heap. In
Proceedings of the 18th ACM Conference on Computer and Communi-
cations Security (CCS), Chicago, IL, October 2010.
[38] Matthew Parkinson, Dimitrios Vytiniotis, Kapil Vaswani, Manuel
Costa, Pantazis Deligiannis, Dylan McDermott, Aaron Blankstein, and
Jonathan Balkind. Project snowflake: Non-blocking safe manual mem-
ory management in .net. Proc. ACM Program. Lang., 1(OOPSLA),
October 2017.
[39] Bruce Perens. Electric Fence. https://linux.softpedia.com/
get/Programming/Debuggers/Electric-Fence-3305.shtml.
[40] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and
Dmitriy Vyukov. AddressSanitizer: A Fast Address Sanity Checker. In
Proceedings of the 2012 USENIX Annual Technical Conference (ATC),
Boston, MA, June 2012.
[41] Shellphish. how2heap: A repository for learning various heap exploita-
tion techniques. https://github.com/shellphish/how2heap.
[42] Jangseop Shin, Donghyun Kwon, Jiwon Seo, Yeongpil Cho, and Yunhe-
ung Paek. CRCount: Pointer Invalidation with Reference Counting to
Mitigate Use-after-free in Legacy C/C++. In Proceedings of the 2019
Annual Network and Distributed System Security Symposium (NDSS),
San Diego, CA, February 2019.
2468    30th USENIX Security Symposium
USENIX Association
[43] Sam Silvestro, Hongyu Liu, Corey Crosser, Zhiqiang Lin, and Tongping
Liu. FreeGuard: A Faster Secure Heap Allocator. In Proceedings of
the 24th ACM Conference on Computer and Communications Security
(CCS), Dallas, TX, October–November 2017.
[44] Sam Silvestro, Hongyu Liu, Tianyi Liu, Zhiqiang Lin, and Tongping
Liu. Guarder: A Tunable Secure Allocator. In Proceedings of the 27th
USENIX Security Symposium (Security), Baltimore, MD, August 2018.
[45] Matthew S. Simpson and Rajeev K. Barua. MemSafe: Ensuring the
Spatial and Temporal Memory Safety of C at Runtime. Softw. Pract.
Exper., 43(1), January 2013.
[46] Alexander Sotirov.
Heap Feng Shui
in JavaScript.
https:
//www.blackhat.com/presentations/bh-europe-07/
Sotirov/Presentation/bh-eu-07-sotirov-apr19.pdf,
2007. BlackHat Europe.
[47] Erik van der Kouwe, Vinod Nigade, and Cristiano Giuffrida. DangSan:
Scalable Use-after-free Detection. In Proceedings of the 12th European
Conference on Computer Systems (EuroSys), Belgrade, Serbia, April
2017.
[48] Wen Xu, Juanru Li, Junliang Shu, Wenbo Yang, Tianyi Xie, Yuanyuan
Zhang, and Dawu Gu. From collision to exploitation: Unleashing use-
after-free vulnerabilities in linux kernel. In Proceedings of the 22nd
ACM Conference on Computer and Communications Security (CCS),
Denver, Colorado, October 2015.
[49] Yves Younan. FreeSentry: Protecting against Use-After-Free Vulnera-
bilities Due to Dangling Pointers. In Proceedings of the 2015 Annual
Network and Distributed System Security Symposium (NDSS), San
Diego, CA, February 2015.
[50] Insu Yun, Dhaval Kapil, and Taesoo Kim. Automatic Techniques to
Systematically Discover New Heap Exploitation Primitives. In Pro-
ceedings of the 29th USENIX Security Symposium (Security), August
2020.
USENIX Association
30th USENIX Security Symposium    2469
A Statistics of SPEC CPU2006 Benchmarks
Table 7: Statistics of SPEC CPU2006 benchmarks. Function Count lists the number of calls to memory management functions, including
malloc, free, realloc and calloc. Note that some invocations of malloc come from realloc and calloc. Memory Usage column shows
the memory requested by and allocated to the program. total_req means the sum of all requested memories, without considering any free
operation. total_alloc is similar to total_req, but each allocation size is aligned to 16 bytes. max_alloc shows the largest memory usage
along the execution, if every allocation is aligned to 16 bytes. Time provides the time for each program complete the execution. Alloc Freq
shows the average memory request per second.
Program
400.perlbench
401.bzip2
403.gcc
429.mcf
433.milc
444.namd
445.gobmk
447.dealII
450.soplex
453.povray
456.hmmer
458.sjeng
462.libquantum
464.h264ref
470.lbm
471.omnetpp
473.astar
482.sphinx3
483.xalancbmk
#malloc
353M
174
28M
8
6521
1328
607K
151M
247K
2443K
2419K
6
142
178K
7
267M
4802K
14M
135M
Function Count
#realloc
12M
0
45K
0
8
0
52K
0
75K
46K
369K
0
58
0
0
0
0
0
0
#calloc
3
0
4726K
3
6513
0
317K
1
4
0
123K
0
121
171K
0
8
6
14M
8
#free
347M
144
28M
7
6466
1323
607K
151M
236K
2416K
2107K
2
121
178K
6
267M
4802K
14M
135K
total_req
15.97 G
3.64 G
741.09 G
1.76 G
88.32 G
47.15 M
1.07 G
11.38 G
49.31 G
82.92 M
2.52 G
180.00 M
1.04 G
1.40 G
428.81 M
44.65 G
4.39 G
16.15 G
6.28 G
B Proof-of-Concept of MarkUs Exploit
Memory Usage
Time
(s)
total_alloc max_alloc
551
1.08 G
758
3.53 G
516
4.18 G
460
1.76 G
934
719.37 M
612
47.13 M
689
130.49 M
576
827.44 M
419
849.80 M
341
3.60 M
638
36.62 M
180.01 M
809
100.67 M 1641
112.16 M
903
684
428.81 M
579
154.68 M
610
451.55 M
807
43.04 M
383.47 M
339
18.28 G
3.64 G
741.32 G
1.76 G
88.32 G
47.15 M
1.07 G
12.47 G
49.31 G
95.24 M
2.70 G
180.01 M
1.04 G
1.40 G
428.82 M
46.76 G
4.40 G
16.23 G
66.66 G
Alloc Freq
(MB/s)
33.2
4.8
1436.7
3.8
94.6
0.1
1.6
21.6
117.7
0.3
4.2
0.2
0.6
1.6
0.6
80.8
7.2
20.1
196.6
Ubuntu 18.04 LTS
1 $ lsb_release -d
2 Description:
3 $ g++ -o poc poc.cpp
4 $ LD_PRELOAD=$MARKUS ./poc
5 [+] a = 0x55c80d35eff0, a.vftable = 0x55c80ce3bd70
6 [+] a = 0x55c80d35eff0, a.vftable(corrupted) = 0x55cad2e9f3de
7 [+] Spray at 0x55c80d39a000 - 0x55cb0d39a000
8 [+] Triggering UAF (virtual function call)!
9 [!] Spawning shell...
10 $
Figure 9: Results after executing PoC code in Figure 8 in
Ubuntu 18.04. This demonstrates arbitrary code execution by in-
voking evil(). Unlike an ordinary allocator that requires to reclaim
the freed object, this PoC program uses heap spray to control the
virtual function table, which is corrupted by MarkUs’s quarantine
management. Note that $MARKUS is the environment variable to make
the PoC program to use MarkUs as its underlying allocator.
virtual void good() { puts("Hello World"); };
puts("[!] Spawning shell...");
execve("/bin/sh", NULL, NULL);
public:
1 class Victim {
2
3
4 };
5 void evil() {
6
7
8 }
9 int main() {
10
11
12 +
13 +
14
15
16 +
17 +
18
19 +
20 +
21 +
22 +
23 +
24 +
25 +
26
27 +
28 +
29 +
30
31 }
Victim *a = new Victim();
Victim *b = new Victim();
printf("[+] a = %p, a.vftable = 0x%lx\n",
a, ((uintptr_t*)a)[0]);
free(a);
free(b);
printf("[+] a = %p, a.vftable(corrupted) = 0x%lx\n",
a, ((uintptr_t*)a)[0]);
const size_t kSpraySize = 0x300000000;
uint8_t *spray = (uint8_t*)malloc(kSpraySize);
uintptr_t offset = ((uintptr_t*)a)[0] & 0xfff;
assert(offset == 0x3de); // offset is always constant
for (size_t i = 0; i = spray + kSpraySize);
puts("[+] Triggering UAF (virtual function call)!");
a->good();
Figure 8: A use-after-free bug and its exploitation for MarkUs.
The code snippets after the plus sign (+) represents exploitation and
shows internal information to make PoC more clear.
2470    30th USENIX Security Symposium
USENIX Association