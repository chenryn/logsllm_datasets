I have been working with Django for some time now and have developed several applications using a setup that includes Apache 2 with mod_wsgi and a PostgreSQL database on Ubuntu. One of my applications uses `X-Sendfile` to serve files from Apache via a Django view, and it also allows users to upload files through a form. Everything is functioning well, but I am now looking to enhance the application's features (and, undoubtedly, its complexity) by enabling real-time chat and notifications for new file uploads without requiring users to refresh their browsers.

Given my desire for scalability, I want to avoid continuous AJAX polling, as this would become inefficient with a large number of users. I have read numerous posts, articles, and blogs about integrating Comet functionality into a Django app, but the variety of opinions has left me confused.

- **Should I use Orbited, gevent, or Socket.IO?**
- **Where does Tornado fit into this discussion?**
- **How can I ensure that messages are stored in the database without causing my application to block during write operations?**
- **Will running a chat server with Django affect my ability to serve files via Apache?**

### Recommendations

1. **Consider Using Nginx + X-Accel-Redirect:**
   - Instead of using Apache with `X-Sendfile`, you might consider switching to Nginx with `X-Accel-Redirect`. This setup allows you to run a gevent/WSGI/Django server behind Nginx, which can handle long-polling views. This approach eliminates the need for a separate WebSocket server.
   - I have successfully used both Apache with `X-Sendfile` and Nginx with `X-Accel-Redirect` to serve access-protected content on Webfaction without any issues.

2. **Real-Time Communication:**
   - For real-time communication, you can use a combination of gevent and Django Channels. Django Channels provides a robust framework for handling WebSocket connections and other asynchronous protocols.
   - **Django Channels**:
     - **Pros**: Integrates seamlessly with Django, supports multiple protocols (WebSocket, HTTP2, etc.), and is actively maintained.
     - **Cons**: May require additional configuration and learning.
   - **gevent**:
     - **Pros**: Lightweight and efficient, suitable for high-concurrency scenarios.
     - **Cons**: Requires more manual handling of asynchronous tasks.

3. **Database Considerations:**
   - To prevent blocking when writing to the database, consider using an asynchronous database adapter like `aiopg` (for PostgreSQL) or `asyncpg`.
   - You can also use a message queue (e.g., RabbitMQ, Redis) to offload database writes to a background task, ensuring that your main application remains responsive.

4. **Impact on File Serving:**
   - Running a chat server with Django should not significantly impact your ability to serve files via Apache, especially if you use a reverse proxy setup with Nginx. Nginx can handle static file serving and load balancing, while Django can focus on dynamic content and real-time communication.

By following these recommendations, you can enhance your application's features while maintaining performance and scalability.