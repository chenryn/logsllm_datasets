𝑅𝑖
𝑇𝑖,𝑗 · 𝑐 𝑗 =
(𝑇𝑖,𝑗 + Δ𝑖,𝑗) · 𝑐 𝑗
𝑖
𝑗
𝑖
𝑗
The following claim shows that the adversary does not gain
anything by flipping bits of the 𝑅 vector.
Claim 6. Let 𝑇 be different than ˆ𝑇 ′. Assume that the 𝑅 vector is a
shared vector and that 𝐶 is a public vector, and both are chosen uni-
formly at random independently of 𝑇 and 𝑇 ′. Then the test identifies
the difference (i.e. succeeds) with probability of at least 1/4.
Proof: The right hand side of the equation is equal to
(𝑇𝑖,𝑗 + Δ𝑖,𝑗) · 𝑐 𝑗
∑︁
𝑗
𝜀𝑖
(𝑇𝑖,𝑗 + Δ𝑖,𝑗) · 𝑐 𝑗
=
=
∑︁
∑︁
𝑖
𝑖
𝑅𝑖
𝑅𝑖
0 ≠
=
=
𝑗
𝑗
𝑖
𝑅𝑖
(𝑇𝑖,𝑗 + Δ𝑖,𝑗) · 𝑐 𝑗 +∑︁
∑︁
∑︁
𝑇𝑖,𝑗 · 𝑐 𝑗 +∑︁
∑︁
Δ𝑖,𝑗 · 𝑐 𝑗 +∑︁
∑︁
∑︁
∑︁
Δ𝑖,𝑗 𝑅𝑖 +∑︁
∑︁
∑︁
∑︁
𝑅𝑖
𝑐 𝑗
𝑖
𝑖
𝑖
𝑖
𝑗
𝑗
𝑗
𝑗
𝜀𝑖
∑︁
Δ𝑖,𝑗 · 𝑐 𝑗 +∑︁
∑︁
∑︁
𝜀𝑖
𝑖
𝑗
𝑐 𝑗
(Δ𝑖,𝑗 𝑅𝑖 + (𝑇𝑖,𝑗 + Δ𝑖,𝑗)𝜀𝑖)
𝑗
𝑖
𝑐 𝑗
Therefore, cheating is detected if
(𝑇𝑖,𝑗 + Δ𝑖,𝑗) · 𝑐 𝑗
(𝑇𝑖,𝑗 + Δ𝑖,𝑗)𝜀𝑖
𝑗
𝑖
Note that the adversary chooses Δ and 𝜀 independently of the
MPC protocol which chooses 𝑅 at random, and that independently
public coin tossing chooses 𝐶. Also, we only care about the case Δ ≠
0. The inner sum includes an expression which can be completely
in which at least one entry is 1 with probability exactly 1/2 (the
set by the adversary (𝛽 = 𝑖(𝑇𝑖,𝑗 + Δ𝑖,𝑗)𝜀𝑖), and an expression
expression𝑖 Δ𝑖,𝑗 𝑅𝑖). In the case that there is a non-zero value
𝑖 Δ𝑖,𝑗 𝑅𝑖 for some 𝑗, the result of this inner sum multiplied by a
random vector 𝐶 is 1 with probability 1/2 and is 0 with probability
1/2 . Therefore, independent of whether 𝛽 = 0 or 1, the final result is
1 with probability at least 1/4. This concludes the proof of Claim 6.
Claim 7. Using multiple 𝑟 columns When using the method of
Claim 6 with 𝜅 different 𝑅 vectors, the failure probability is (3/4)𝜅.
The claim follows immediately from Claim 6 and the indepen-
dence of the different 𝑅 vectors. As a corollary, to get a failure
probability of 𝜀 we need to set 𝜅 = log(𝜀)/log(3/4). For example,
for 𝜀 = 2−20 this requires setting 𝜅 = 48.
D CIRCUITS WITH LOGARITHMIC DEPTH
As was demonstrated in our experiments in Appendix A.3, the
protocol must use circuits of logarithmic depth in order to perform
well. The GraphSC work [44] described how to convert gather and
scatter circuits to be of logarithmic depth. We describe here the
details of how we implement such a circuit for the gather operation
in the BFS protocol. This protocol sets each node to be the OR of
all its incoming edges.
A straightforward implementation of this circuit will be of linear
depth: Let each (𝑢, 𝑣, 𝑑) element have two bit values – the value
val, and a bit denoted isedge, which is 1 if the element is an edge,
namely iff 𝑢 ≠ 𝑣. Then the gather operation can be implemented
by setting val𝑖 = (val𝑖 OR val𝑖−1) if isedge𝑖−1 = 1, and val𝑖 = val𝑖
otherwise (isedge𝑖−1 = 0). This circuit has 2𝑛 gates and depth 𝑛. We
next show how to implement it with 4𝑛 log 𝑛 gates and depth log 𝑛.
The protocol runs in log 𝑛 rounds. After the 𝑘th round of this
protocol, the val bit of element 𝑖 will be the OR of all val bits of
the edges to the left of 𝑖 and until the first index smaller than 𝑖
which is divisible by 2𝑘. Therefore, when 𝑘 = log 𝑛 then each node
is assigned the right value. Furthermore, if we have an upper bound
𝐵 on the in-degree of nodes, then the correct value of each node is
achieved in log 𝐵 rounds.
The protocol uses an additional value bit for each element, onlyedges𝑖,
which has a value 1 iff there are only edge elements to the left of
element 𝑖 and until the first index 𝐿 which is smaller than 𝑖 and is
divisible by 2𝑘. (In this case, the current value of element 𝑖 might not
be final, since there might be additional edge elements immediately
left of 𝐿.)
In the 𝑘th round, let 𝑖 be an element and let 𝐿 be the first index
smaller than 𝑖 and divisible by 2𝑘. Then
val𝑖
onlyedges𝑖
= val𝑖 ∨ (onlyedges𝑖 ∧ val𝐿 ∧ isedge𝐿)
= onlyedges𝑖 ∧ onlyedges𝐿 ∧ isedge𝐿
Namely, in the 𝑘th round the elements are divided to ranges of
2𝑘 elements, and each element has the correct val𝑖 value when
considering only the elements in the range where it is located. In
the next round, the size of the range is doubled and the value is
updated accordingly.
The expressions listed here use 5 gates, but note that the expres-
sions val𝐿 ∧ isedge𝐿 and onlyedges𝐿 ∧ isedge𝐿, can be computed
once for setting the values of 2𝑘 elements to the right of index 𝐿.
Therefore, the average number of gates per element is 3 + 2
2𝑘 ≤ 4.
The scatter operation can be implemented in a similar way.
Implementation
We implemented both circuits. The experiment was run with a
single thread. It was only run for the smallest input size 𝑁 = 10, 000,
since the runtime of the linear depth circuit was already too high.
For the shallow circuit we set a bound of 𝐵 = 1024 on the degree
of nodes. The total runtime of the protocol with the linear depth
circuit is almost 60 times higher than that of the protocol with the
shallow circuit. The last column of Table 6 is perhaps the most
telling: it shows the fraction of the total time that is consumed by
the four invocations of scatter and gather in the protocol. This value
is 98.5% for the linear-depth circuit and only 13% for the shallow
circuit.
N
Gates
Depth
Scatter
𝑁
log 𝐵
Total Gather
𝑂(𝑁)
𝑂(𝑁 log 𝐵)
(G+S)
/ Total
98.5%
13%
Table 6: Runtime (msec) for 𝑁 = 10, 000 elements with a single
thread, with gather and scatter implemented by circuits of
linear and logarithmic depth. The last column is the fraction
of the total time taken by gather and scatter.
10,000
10,000
12,050
212
1488
4.41
1478
2.41
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea628E CIRCUIT DESIGN OF EXTENDED
ALGORITHMS
In order to demonstrate the general applicability of our approach,
we examine two more complex graph processing computations,
which might arise in the contact tracing setting:
• Probabilistic graphs: edges encode a probability which is
propagated in the graph, like in a belief propagation [52]
algorithm.
• Temporal graphs: the edges have a time dependency, imply-
ing that the graph’s connectivity is varying over time.
A probabilistic graphical model, also known as a Bayesian Net-
work, encodes in the nodes and edges of a graph a set of random
variables, and their conditional dependence, respectively. Message
passing algorithms enable to calculate complex conditional prob-
abilities exactly in DAGs, and approximately in general graphs
(loopy belief propagation [43]).
For a simplified probabilistic model in the COVID-19 contact
tracing setting, assume that each person (node) is associated with
a “sickness measure” between 0 (healthy) and 3 (sick) which is
encoded with 2 bits. Moreover, we designate each encounter (edge)
with an “exposure severity” value: 0 (low / outdoors) or 1 (high /
indoors).
We start the analysis with a single sick individual (sickness
measure = 3), and all other nodes have a sickness measure of 0. (This
initialization can easily be changed to a different initial condition
with multiple sick individuals.)
In the scatter phase, a node’s sickness measure (𝑛𝑠) is passed to
its outgoing edges according to the following formula:
(cid:40)𝑛𝑠
𝑒𝑠 =
𝑚𝑎𝑥(0, 𝑛𝑠 − 1)
if 𝑒𝑒 = 1
if 𝑒𝑒 = 0
Where 𝑒𝑒, 𝑒𝑠 are the exposure and sickness value of the edge, re-
spectively. Namely, an edge representing a high severity exposure
passes the sickness measure, whereas a low severity edge reduces
the sickness measure by 1.
The circuit for the scatter computation follows the same low-
depth circuit structure of the BFS scatter computation described in
Appendix D. The number of rounds is unchanged, and is log 𝑛. In
each of the rounds an item propagates is “sickness” value according
to the above formula. The increase in the number of gates is minimal,
and specifically when considering the number of AND gates (which
require communication between the servers), we require 4 AND
gates per element in each round compared to 3 AND gates in the
BFS implementation.
The gather phase also follows the implementation of the BFS
circuit and shares the same number of rounds and circuit structure.
When updating the node based on its incoming edges, we replace
the OR function with the MAX function. Hence,
𝑛𝑠 = max(𝑒1
𝑠 , 𝑒2
𝑠 )
𝑠 , . . . , 𝑒𝑑
The circuit implementation consists of 6 AND gates per element in
each round compared to 3 AND gates in the BFS implementation.
This example is modeled using a small set of discrete probabilities,
and a prescribed mapping. Increasing the number of probability
values will increase the the circuit complexity accordingly. For
generalized probability computation, a secure fixed point arithmetic
[11] circuit may be used.
A temporal graph, also known as a time-varying network, has
edges which are active only at specific times. The COVID-19 use-
case of a temporal graph can be that each node and edge have a
time stamp. The time stamp of a node indicates the time when the
individual becomes infectious, and the edge’s time stamp records
the time of contact between the nodes. Naturally, the edge is “active”
for the scatter operation if the contact time is after the sickness
time (𝑒.𝑡𝑖𝑚𝑒 > 𝑛.𝑡𝑖𝑚𝑒).
We use a 12 bit encoding for the time field, which provides a
time span of two weeks with a resolution of 5 minutes.
The gather phase operates in a similar manner to the BFS case,
namely the sickness bit is computed as the OR of the sickness bits of
all incoming edges. Additionally, the time field of node is updated
to be the minimum between the current node’s time and all the
times of edges with the sick flag active.
The low depth circuits operate on pairwise operations, and both
the scatter (direct time comparison) and gather (aggregated min)
are based on a 12 bit comparison. We utilize the low depth compar-
ison circuit used in the sort protocol. This greatly minimizes the
overhead of the circuit.
These two examples demonstrate that it is possible to generalize
our secure graph processing method easily, and moreover that the
only components that have to be adapted are the circuits of the
gather and scatter operations. More concretely, the circuit for BFS
uses 3 AND gates per element, for both scatter and gather. The
probabilistic model uses 4 AND gates for scatter and 6 AND gates
for gather. The temporal model uses 24 AND gates for scatter and 3
AND gates for gather. In total, the first circuit uses less than twice
gates than BFS, and the second circuit uses less than 5 times more
gates. As the run time of gather and scatter is a small fraction of
the total runtime, the effect on the total runtime is minimal.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea629