In Sym-
Find Vulnerabilities in JavaScript Engines.
posium on Network and Distributed System Security
(NDSS), 2019.
[28] Andrew Henderson, Heng Yin, Guang Jin, Hao Han,
and Hongmei Deng. VDF: Targeted Evolutionary Fuzz
Testing of Virtual Devices. In Symposium on Recent
Advances in Intrusion Detection (RAID), 2017.
[29] Jesse Hertz and Tim Newsham.
Project Tri-
https:
force: Run AFL on Everything!
//www.nccgroup.trust/us/about-us/newsroom-
and-events/blog/2016/june/project-triforce-
run-afl-on-everything/. Accessed: October 6,
2020.
USENIX Association
30th USENIX Security Symposium    2611
[30] Chin-Chia Hsu, Che-Yu Wu, Hsu-Chun Hsiao, and Shih-
Kun Huang. INSTRIM: Lightweight Instrumentation
for Coverage-guided Fuzzing. In Symposium on Net-
work and Distributed System Security (NDSS), Work-
shop on Binary Analysis Research, 2018.
[31] Yuseok Jeon, Wookhyun Han, Nathan Burow, and Math-
ias Payer. FuZZan: Efﬁcient Sanitizer Metadata Design
for Fuzzing. In USENIX Annual Technical Conference,
2020.
[32] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei,
and Michael Hicks. Evaluating Fuzz Testing. In ACM
Conference on Computer and Communications Security
(CCS), 2018.
[33] Li, Yuekang and Chen, Bihuan and Chandramohan,
Mahinthan and Lin, Shang-Wei and Liu, Yang and Tiu,
Alwen. Steelix: Program-state Based Binary Fuzzing. In
Joint Meeting on Foundations of Software Engineering,
2017.
[34] Dominik Maier, Lukas Seidel, and Shinjo Park.
BaseSAFE: Baseband SAnitized Fuzzing through Emu-
lation. In ACM Conference on Security and Privacy in
Wireless and Mobile Networks, 2020.
[35] Valentin Jean Marie Manès, HyungSeok Han, Choong-
woo Han, Sang Kil Cha, Manuel Egele, Edward J
Schwartz, and Maverick Woo. The art, science, and
engineering of fuzzing: A survey. In IEEE Transactions
on Software Engineering, 2019.
[36] David Molnar, Xue Cong Li, and David Wagner. Dy-
namic Test Generation to Find Integer Bugs in x86 Bi-
nary Linux Programs. In USENIX Security Symposium,
2009.
[37] Manh-Dung Nguyen, Sébastien Bardin, Richard Boni-
chon, Roland Groz, and Matthieu Lemerre. Binary-
level Directed Fuzzing for Use-After-Free Vulnerabili-
ties. In International Conference on Software Engineer-
ing (ICSE), 2020.
[38] Tavis Ormandy. An Empirical Study into the Security
Exposure to Hosts of Hostile Virtualized Environments.
In CanSecWest 2007, 2007.
[39] Sebastian Österlund, Kaveh Razavi, Herbert Bos, and
Cristiano Giuffrida. ParmeSan: Sanitizer-guided Grey-
box Fuzzing. In usenix-security, 2020.
[41] Hui Peng and Mathias Payer. USBFuzz: A Framework
In
for Fuzzing USB Drivers by Device Emulation.
USENIX Security Symposium, 2020.
[42] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-
Fuzz: Fuzzing by Program Transformation. In IEEE
Symposium on Security and Privacy, 2018.
[43] Van-Thuan Pham, Marcel Böhme, Andrew E San-
tosa, Alexandru R˘azvan C˘aciulescu, and Abhik Roy-
choudhury. Smart Greybox Fuzzing. arXiv preprint
arXiv:1811.09447, 2018.
[44] Aaron Portnoy and Pedram Amini. Sulley. https:
//github.com/OpenRCE/sulley. Accessed: October
6, 2020.
[45] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Co-
jocar, Cristiano Giuffrida, and Herbert Bos. VUzzer:
Application-aware Evolutionary Fuzzing. In Symposium
on Network and Distributed System Security (NDSS),
2017.
[46] Alexandre Rebert, Sang Kil Cha, Thanassis Avgerinos,
Jonathan M Foote, David Warren, Gustavo Grieco, and
David Brumley. Optimizing seed selection for fuzzing.
In USENIX Security Symposium, 2014.
[47] Microsoft
Security
Research
and Defense.
in Hyper-V.
para-virtualized devices
Fuzzing
https://blogs.technet.microsoft.com/srd/
2019/01/28/fuzzing-para-virtualized-
devices-in-hyper-v/.
2020.
Accessed: October 6,
[48] Sergej Schumilo, Cornelius Aschermann, Ali Abbasi,
Simon Wörner, and Thorsten Holz. HYPER-CUBE:
High-Dimensional Hypervisor Fuzzing. In Symposium
on Network and Distributed System Security (NDSS),
2020.
[49] Sergej Schumilo, Cornelius Aschermann, Robert Gaw-
lik, Sebastian Schinzel, and Thorsten Holz. kAFL:
Hardware-Assisted Feedback Fuzzing for OS Kernels.
In USENIX Security Symposium, 2017.
[50] Nick Stephens, John Grosen, Christopher Salls, Andrew
Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshi-
taishvili, Christopher Kruegel, and Giovanni Vigna.
Driller: Augmenting fuzzing through selective symbolic
execution. In Symposium on Network and Distributed
System Security (NDSS), 2016.
[40] Rohan Padhye, Caroline Lemieux, Koushik Sen, Mike
Papadakis, and Yves Le Traon. Zest: Validity Fuzzing
and Parametric Generators for Effective Random Test-
ing. arXiv preprint arXiv:1812.00078, 2018.
[51] Robert Swiecki and Anestis Bechtsoudis. Security ori-
ented fuzzer with powerful analysis options. https:
//github.com/google/honggfuzz. Accessed: Octo-
ber 6, 2020.
2612    30th USENIX Security Symposium
USENIX Association
[52] Jack Tang and Moony Li. When Virtualization Encoun-
https://www.blackhat.com/docs/eu-
ters AFL.
16/materials/eu-16-Li-When-Virtualization-
Encounters-AFL-A-Portable-Virtual-Device-
Fuzzing-Framework-With-AFL-wp.pdf. Accessed:
October 6, 2020.
[53] Microsoft Virtualization Security Team.
in Hyper-V.
para-virtualized devices
//blogs.technet.microsoft.com/srd/2019/01/
28/fuzzing-para-virtualized-devices-in-
hyper-v/. Accessed: October 6, 2020.
Fuzzing
https:
[63] Soyeon Park Wen Xu Insu Yun and Daehee Jang Tae-
soo Kim. Fuzzing JavaScript Engines with Aspect-
preserving Mutation. In IEEE Symposium on Security
and Privacy, 2020.
[64] Michael Zalewski.
for
aﬂ-fuzz.
http://lcamtuf.coredump.cx/afl/
technical_details.txt. Accessed: October 6, 2020.
Technical whitepaper
[65] Michał Zalewski.
http://
lcamtuf.coredump.cx/afl/. Accessed: October 6,
2020.
american fuzzy lop.
[66] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan. Send
Hardest Problems My Way: Probabilistic Path Prioriti-
zation for Hybrid Fuzzing. In Symposium on Network
and Distributed System Security (NDSS), 2019.
[54] Peach Tech. Peach. http://www.peachfuzzer.com/.
Accessed: October 6, 2020.
[55] Dmitry Vyukov. syzkaller: Linux syscall fuzzer. https:
//github.com/google/syzkaller. Accessed: Octo-
ber 6, 2020.
[56] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou.
TaintScope: A checksum-aware directed fuzzing tool
for automatic software vulnerability detection. In IEEE
Symposium on Security and Privacy, 2010.
[57] Yanhao Wang, Xiangkun Jia, Yuwei Liu, Kyle Zeng,
Tiffany Bao, Dinghao Wu, and Purui Su. Not All Cov-
erage Measurements Are Equal: Fuzzing by Coverage
Accounting for Input Prioritization. In Symposium on
Network and Distributed System Security (NDSS), 2020.
[58] Cheng Wen, Haijun Wang, Yuekang Li, Shengchao
Qin, Yang Liu, Zhiwu Xu, Hongxu Chen, Xiaofei Xie,
Geguang Pu, and Ting Liu. Memlock: Memory usage
guided fuzzing. In International Conference on Soft-
ware Engineering (ICSE), 2020.
[59] Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and
David Brumley.
Scheduling black-box mutational
fuzzing. In ACM Conference on Computer and Commu-
nications Security (CCS), 2013.
[60] Meng Xu, Sanidhya Kashyap, Hanqing Zhao, and Tae-
soo Kim. Krace: Data Race Fuzzing for Kernel File
Systems. In IEEE Symposium on Security and Privacy,
2020.
[61] Wen Xu, Sanidhya Kashyap, Changwoo Min, and Tae-
soo Kim. Designing New Operating Primitives to Im-
prove Fuzzing Performance. In ACM Conference on
Computer and Communications Security (CCS), 2017.
[62] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and
Taesoo Kim. QSYM: A Practical Concolic Execution
Engine Tailored for Hybrid Fuzzing. In USENIX Secu-
rity Symposium, 2018.
USENIX Association
30th USENIX Security Symposium    2613
Appendix
A List of Bugs
Table 3: Bugs found by NYX in our targets. QEMU CVEs were assigned by the maintainers if the issues was ﬁxed. The remaining issues marked as requested are
still under investigation. The BHYVE maintainers have not yet assigned CVEs, and CVEs were reserved by MITRE instead.
Hypervisor
QEMU
Type
Use after free (write) in usb_process_one
Heap buffer overﬂow (write) in sdhci_sdma_transfer_multi_blocks
Stack overﬂow in eepro100_write_command
Inﬁnite loop in start_xmit
Segmentation fault in blk_inc_in_flight
Segmentation fault in pci_change_irq_level
Segmentation fault in blk_bs
Abort in xhci_alloc_device_streams
Assertion in address_space_unmap
Assertion in usb_packet_copy
Assertion in xhci_find_stream
Assertion in xhci_kick_epctx
Assertion in usb_ep_get
Assertion in lsi_do_dma
Assertion in ide_cancel_dma_sync
Assertion in ide_dma_cb
BHYVE
Inﬁnite loop in pci_xhci_trb_next
Segmentation fault in pci_xhci_cmd_eval_ctx
Segmentation fault in pci_xhci_cmd_reset_device
Segmentation fault in pci_xhci_cmd_address_device
Segmentation fault in pci_xhci_complete_commands
Segmentation fault in pci_xhci_insert_event at pci_xhci.c
Segmentation fault in pci_xhci_insert_event at pci_xhci.c
Segmentation fault in pci_xhci_insert_event at pci_xhci.c
Segmentation fault in ahci_handle_slot at pci_ahci.c
Segmentation fault in ahci_handle_slot at pci_ahci.c
Segmentation fault in vq_has_descs
Segmentation fault in vq_kick_disable
Segmentation fault in pci_vtcon_notify_tx
Segmentation fault in vq_endchains
Segmentation fault in pci_vtcon_control_tx
Assertion in pci_xhci_cmd_config_ep
Assertion in pci_xhci_cmd_reset_ep at pci_xhci.c
Assertion in pci_xhci_cmd_reset_ep at pci_xhci.c
Assertion in pci_xhci_cmd_set_tr at pci_xhci.c
Assertion in pci_xhci_cmd_set_tr at pci_xhci.c
Assertion in pci_xhci_get_dev_ctx
Assertion in ahci_build_iov
Assertion in pci_vtblk_proc at pci_virtio_block.c
Assertion in pci_vtblk_proc at pci_virtio_block.c
Assertion in pci_vtblk_proc at pci_virtio_block.c
Assertion in pci_vtblk_proc at pci_virtio_block.c
Assertion in pci_vtblk_proc at pci_virtio_block.c
Assertion in pci_vtblk_proc at pci_virtio_block.c
B Coverage Plots
CVE
CVE-2020-25084
CVE-2020-25085
requested
requested
CVE-2020-25741
CVE-2020-25742
CVE-2020-25743
-
-
-
-
-
-
-
-
-
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
RESERVED
-
-
-
-
-
-
-
-
-
-
-
-
-
Figure 7: The median, best, and worst branch coverage of 10 runs (24h each).
2614    30th USENIX Security Symposium
USENIX Association