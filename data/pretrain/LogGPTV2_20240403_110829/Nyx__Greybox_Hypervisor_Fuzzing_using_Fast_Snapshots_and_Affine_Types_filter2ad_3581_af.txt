### References

1. **Symposium on Network and Distributed System Security (NDSS), 2019.**
   - **Title:** Finding Vulnerabilities in JavaScript Engines.
   
2. **Andrew Henderson, Heng Yin, Guang Jin, Hao Han, and Hongmei Deng.**
   - **Title:** VDF: Targeted Evolutionary Fuzz Testing of Virtual Devices.
   - **Conference:** Symposium on Recent Advances in Intrusion Detection (RAID), 2017.

3. **Jesse Hertz and Tim Newsham.**
   - **Title:** Project Triforce: Run AFL on Everything!
   - **URL:** https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2016/june/project-triforce-run-afl-on-everything/
   - **Accessed:** October 6, 2020.

4. **Chin-Chia Hsu, Che-Yu Wu, Hsu-Chun Hsiao, and Shih-Kun Huang.**
   - **Title:** INSTRIM: Lightweight Instrumentation for Coverage-guided Fuzzing.
   - **Conference:** Symposium on Network and Distributed System Security (NDSS), Workshop on Binary Analysis Research, 2018.

5. **Yuseok Jeon, Wookhyun Han, Nathan Burow, and Mathias Payer.**
   - **Title:** FuZZan: Efficient Sanitizer Metadata Design for Fuzzing.
   - **Conference:** USENIX Annual Technical Conference, 2020.

6. **George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, and Michael Hicks.**
   - **Title:** Evaluating Fuzz Testing.
   - **Conference:** ACM Conference on Computer and Communications Security (CCS), 2018.

7. **Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin, Yang Liu, and Alwen Tiu.**
   - **Title:** Steelix: Program-state Based Binary Fuzzing.
   - **Conference:** Joint Meeting on Foundations of Software Engineering, 2017.

8. **Dominik Maier, Lukas Seidel, and Shinjo Park.**
   - **Title:** BaseSAFE: Baseband SAnitized Fuzzing through Emulation.
   - **Conference:** ACM Conference on Security and Privacy in Wireless and Mobile Networks, 2020.

9. **Valentin Jean Marie Manès, HyungSeok Han, Choong-woo Han, Sang Kil Cha, Manuel Egele, Edward J Schwartz, and Maverick Woo.**
   - **Title:** The Art, Science, and Engineering of Fuzzing: A Survey.
   - **Journal:** IEEE Transactions on Software Engineering, 2019.

10. **David Molnar, Xue Cong Li, and David Wagner.**
    - **Title:** Dynamic Test Generation to Find Integer Bugs in x86 Binary Linux Programs.
    - **Conference:** USENIX Security Symposium, 2009.

11. **Manh-Dung Nguyen, Sébastien Bardin, Richard Bonichon, Roland Groz, and Matthieu Lemerre.**
    - **Title:** Binary-level Directed Fuzzing for Use-After-Free Vulnerabilities.
    - **Conference:** International Conference on Software Engineering (ICSE), 2020.

12. **Tavis Ormandy.**
    - **Title:** An Empirical Study into the Security Exposure to Hosts of Hostile Virtualized Environments.
    - **Conference:** CanSecWest 2007, 2007.

13. **Sebastian Österlund, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida.**
    - **Title:** ParmeSan: Sanitizer-guided Greybox Fuzzing.
    - **Conference:** USENIX Security Symposium, 2020.

14. **Hui Peng and Mathias Payer.**
    - **Title:** USBFuzz: A Framework for Fuzzing USB Drivers by Device Emulation.
    - **Conference:** USENIX Security Symposium, 2020.

15. **Hui Peng, Yan Shoshitaishvili, and Mathias Payer.**
    - **Title:** T-Fuzz: Fuzzing by Program Transformation.
    - **Conference:** IEEE Symposium on Security and Privacy, 2018.

16. **Van-Thuan Pham, Marcel Böhme, Andrew E Santosa, Alexandru Răzvan Căciulescu, and Abhik Roychoudhury.**
    - **Title:** Smart Greybox Fuzzing.
    - **Preprint:** arXiv preprint arXiv:1811.09447, 2018.

17. **Aaron Portnoy and Pedram Amini.**
    - **Title:** Sulley.
    - **URL:** https://github.com/OpenRCE/sulley
    - **Accessed:** October 6, 2020.

18. **Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos.**
    - **Title:** VUzzer: Application-aware Evolutionary Fuzzing.
    - **Conference:** Symposium on Network and Distributed System Security (NDSS), 2017.

19. **Alexandre Rebert, Sang Kil Cha, Thanassis Avgerinos, Jonathan M Foote, David Warren, Gustavo Grieco, and David Brumley.**
    - **Title:** Optimizing Seed Selection for Fuzzing.
    - **Conference:** USENIX Security Symposium, 2014.

20. **Microsoft Security Research and Defense.**
    - **Title:** Fuzzing Para-virtualized Devices in Hyper-V.
    - **URL:** https://blogs.technet.microsoft.com/srd/2019/01/28/fuzzing-para-virtualized-devices-in-hyper-v/
    - **Accessed:** October 6, 2020.

21. **Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner, and Thorsten Holz.**
    - **Title:** HYPER-CUBE: High-Dimensional Hypervisor Fuzzing.
    - **Conference:** Symposium on Network and Distributed System Security (NDSS), 2020.

22. **Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and Thorsten Holz.**
    - **Title:** kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels.
    - **Conference:** USENIX Security Symposium, 2017.

23. **Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna.**
    - **Title:** Driller: Augmenting Fuzzing Through Selective Symbolic Execution.
    - **Conference:** Symposium on Network and Distributed System Security (NDSS), 2016.

24. **Rohan Padhye, Caroline Lemieux, Koushik Sen, Mike Papadakis, and Yves Le Traon.**
    - **Title:** Zest: Validity Fuzzing and Parametric Generators for Effective Random Testing.
    - **Preprint:** arXiv preprint arXiv:1812.00078, 2018.

25. **Robert Swiecki and Anestis Bechtsoudis.**
    - **Title:** Security-oriented Fuzzer with Powerful Analysis Options.
    - **URL:** https://github.com/google/honggfuzz
    - **Accessed:** October 6, 2020.

26. **Jack Tang and Moony Li.**
    - **Title:** When Virtualization Encounters AFL: A Portable Virtual Device Fuzzing Framework with AFL.
    - **URL:** https://www.blackhat.com/docs/eu-16/materials/eu-16-Li-When-Virtualization-Encounters-AFL-A-Portable-Virtual-Device-Fuzzing-Framework-With-AFL-wp.pdf
    - **Accessed:** October 6, 2020.

27. **Microsoft Virtualization Security Team.**
    - **Title:** Fuzzing Para-virtualized Devices in Hyper-V.
    - **URL:** https://blogs.technet.microsoft.com/srd/2019/01/28/fuzzing-para-virtualized-devices-in-hyper-v/
    - **Accessed:** October 6, 2020.

28. **Soyeon Park, Wen Xu, Insu Yun, and Daehee Jang, Taesoo Kim.**
    - **Title:** Fuzzing JavaScript Engines with Aspect-preserving Mutation.
    - **Conference:** IEEE Symposium on Security and Privacy, 2020.

29. **Michael Zalewski.**
    - **Title:** Technical Whitepaper for afl-fuzz.
    - **URL:** http://lcamtuf.coredump.cx/afl/technical_details.txt
    - **Accessed:** October 6, 2020.

30. **Michał Zalewski.**
    - **Title:** American Fuzzy Lop.
    - **URL:** http://lcamtuf.coredump.cx/afl/
    - **Accessed:** October 6, 2020.

31. **Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan.**
    - **Title:** Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing.
    - **Conference:** Symposium on Network and Distributed System Security (NDSS), 2019.

32. **Peach Tech.**
    - **Title:** Peach.
    - **URL:** http://www.peachfuzzer.com/
    - **Accessed:** October 6, 2020.

33. **Dmitry Vyukov.**
    - **Title:** syzkaller: Linux syscall fuzzer.
    - **URL:** https://github.com/google/syzkaller
    - **Accessed:** October 6, 2020.

34. **Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou.**
    - **Title:** TaintScope: A Checksum-aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection.
    - **Conference:** IEEE Symposium on Security and Privacy, 2010.

35. **Yanhao Wang, Xiangkun Jia, Yuwei Liu, Kyle Zeng, Tiffany Bao, Dinghao Wu, and Purui Su.**
    - **Title:** Not All Coverage Measurements Are Equal: Fuzzing by Coverage Accounting for Input Prioritization.
    - **Conference:** Symposium on Network and Distributed System Security (NDSS), 2020.

36. **Cheng Wen, Haijun Wang, Yuekang Li, Shengchao Qin, Yang Liu, Zhiwu Xu, Hongxu Chen, Xiaofei Xie, Geguang Pu, and Ting Liu.**
    - **Title:** Memlock: Memory Usage Guided Fuzzing.
    - **Conference:** International Conference on Software Engineering (ICSE), 2020.

37. **Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and David Brumley.**
    - **Title:** Scheduling Black-box Mutational Fuzzing.
    - **Conference:** ACM Conference on Computer and Communications Security (CCS), 2013.

38. **Meng Xu, Sanidhya Kashyap, Hanqing Zhao, and Taesoo Kim.**
    - **Title:** Krace: Data Race Fuzzing for Kernel File Systems.
    - **Conference:** IEEE Symposium on Security and Privacy, 2020.

39. **Wen Xu, Sanidhya Kashyap, Changwoo Min, and Taesoo Kim.**
    - **Title:** Designing New Operating Primitives to Improve Fuzzing Performance.
    - **Conference:** ACM Conference on Computer and Communications Security (CCS), 2017.

40. **Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim.**
    - **Title:** QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing.
    - **Conference:** USENIX Security Symposium, 2018.

### Appendix

#### A. List of Bugs

**Table 3: Bugs Found by NYX in Our Targets**

| Hypervisor | Type | Description | CVE |
|------------|------|-------------|-----|
| **QEMU** | Use after free (write) in `usb_process_one` | - | CVE-2020-25084 |
| **QEMU** | Heap buffer overflow (write) in `sdhci_sdma_transfer_multi_blocks` | - | CVE-2020-25085 |
| **QEMU** | Stack overflow in `eepro100_write_command` | - | requested |
| **QEMU** | Infinite loop in `start_xmit` | - | requested |
| **QEMU** | Segmentation fault in `blk_inc_in_flight` | - | CVE-2020-25741 |
| **QEMU** | Segmentation fault in `pci_change_irq_level` | - | CVE-2020-25742 |
| **QEMU** | Segmentation fault in `blk_bs` | - | CVE-2020-25743 |
| **QEMU** | Abort in `xhci_alloc_device_streams` | - | - |
| **QEMU** | Assertion in `address_space_unmap` | - | - |
| **QEMU** | Assertion in `usb_packet_copy` | - | - |
| **QEMU** | Assertion in `xhci_find_stream` | - | - |
| **QEMU** | Assertion in `xhci_kick_epctx` | - | - |
| **QEMU** | Assertion in `usb_ep_get` | - | - |
| **QEMU** | Assertion in `lsi_do_dma` | - | - |
| **QEMU** | Assertion in `ide_cancel_dma_sync` | - | - |
| **QEMU** | Assertion in `ide_dma_cb` | - | - |
| **BHYVE** | Infinite loop in `pci_xhci_trb_next` | - | RESERVED |
| **BHYVE** | Segmentation fault in `pci_xhci_cmd_eval_ctx` | - | RESERVED |
| **BHYVE** | Segmentation fault in `pci_xhci_cmd_reset_device` | - | RESERVED |
| **BHYVE** | Segmentation fault in `pci_xhci_cmd_address_device` | - | RESERVED |
| **BHYVE** | Segmentation fault in `pci_xhci_complete_commands` | - | RESERVED |
| **BHYVE** | Segmentation fault in `pci_xhci_insert_event` at `pci_xhci.c` | - | RESERVED |
| **BHYVE** | Segmentation fault in `pci_xhci_insert_event` at `pci_xhci.c` | - | RESERVED |
| **BHYVE** | Segmentation fault in `pci_xhci_insert_event` at `pci_xhci.c` | - | RESERVED |
| **BHYVE** | Segmentation fault in `ahci_handle_slot` at `pci_ahci.c` | - | RESERVED |
| **BHYVE** | Segmentation fault in `ahci_handle_slot` at `pci_ahci.c` | - | RESERVED |
| **BHYVE** | Segmentation fault in `vq_has_descs` | - | RESERVED |
| **BHYVE** | Segmentation fault in `vq_kick_disable` | - | RESERVED |
| **BHYVE** | Segmentation fault in `pci_vtcon_notify_tx` | - | RESERVED |
| **BHYVE** | Segmentation fault in `vq_endchains` | - | RESERVED |
| **BHYVE** | Segmentation fault in `pci_vtcon_control_tx` | - | RESERVED |
| **BHYVE** | Assertion in `pci_xhci_cmd_config_ep` | - | RESERVED |
| **BHYVE** | Assertion in `pci_xhci_cmd_reset_ep` at `pci_xhci.c` | - | RESERVED |
| **BHYVE** | Assertion in `pci_xhci_cmd_reset_ep` at `pci_xhci.c` | - | RESERVED |
| **BHYVE** | Assertion in `pci_xhci_cmd_set_tr` at `pci_xhci.c` | - | RESERVED |
| **BHYVE** | Assertion in `pci_xhci_cmd_set_tr` at `pci_xhci.c` | - | RESERVED |
| **BHYVE** | Assertion in `pci_xhci_get_dev_ctx` | - | RESERVED |
| **BHYVE** | Assertion in `ahci_build_iov` | - | RESERVED |
| **BHYVE** | Assertion in `pci_vtblk_proc` at `pci_virtio_block.c` | - | RESERVED |
| **BHYVE** | Assertion in `pci_vtblk_proc` at `pci_virtio_block.c` | - | RESERVED |
| **BHYVE** | Assertion in `pci_vtblk_proc` at `pci_virtio_block.c` | - | RESERVED |
| **BHYVE** | Assertion in `pci_vtblk_proc` at `pci_virtio_block.c` | - | RESERVED |
| **BHYVE** | Assertion in `pci_vtblk_proc` at `pci_virtio_block.c` | - | RESERVED |
| **BHYVE** | Assertion in `pci_vtblk_proc` at `pci_virtio_block.c` | - | RESERVED |

**Note:** QEMU CVEs were assigned by the maintainers if the issues were fixed. The remaining issues marked as "requested" are still under investigation. The BHYVE maintainers have not yet assigned CVEs, and CVEs were reserved by MITRE instead.

#### B. Coverage Plots

**Figure 7: Median, Best, and Worst Branch Coverage of 10 Runs (24h Each)**

[Insert Figure 7 here]

---

This version is more organized, with a consistent format for each reference and a clear, professional tone. The references are now numbered, and the appendix is structured to clearly present the list of bugs and coverage plots.