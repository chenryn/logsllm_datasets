in that AD are added to the anonymity set:
ADi
|A
s
ADi
⇒|A
s
ADj
(A)| ≥ |A
s
ADj
(A)| > |A
s
(A)| + |ADj|
(A)| if v + 1 ≥ i > j
515
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:13 UTC from IEEE Xplore.  Restrictions apply. 
COMPARISON OF SENDER AND RECEIVER ANONYMITY, REPRESENTED BY THE PAIR OF (|Aadv
s
(Alice)|, |Aadv
r
(Bob)|). ASSUME FULL DEPLOYMENT
OF LAP, TOR INSTEAD OF IP, AND AHP. |ADx| IS THE NUMBER OF CLIENTS IN ADx.
Table II
LAP-setting
non-LAP-setting
Adversary adv
ADn
adv1
adv2 ADi (v  v + 1. Therefore, when
|AADi
the attacker is on the path between Bob and ADv (including
Bob), Alice has the highest degree of anonymity, where any
end-host in the network could be the sender (assuming that
ADv is reachable from all end-hosts).
Finally, colluding ADs can easily share knowledge and
correlate packets since LAP does not conceal packet content
and packet size. Thus, the resulting anonymity set is the
intersection of those perceived by individual malicious ADs.
Also, LAP provides no anonymity if both end-point ADs
collude.
2) Tor [1]:
For the purpose of this analysis, we assume
that Alice and Bob are Tor clients but do not serve as Tor
relays. An attacker can learn a list of Tor relays from Tor
directory servers. Hence Alice’s ﬁrst-hop AD (AD1) can
observe that she is sending packets. However, the second-
hop AD (AD2) cannot learn the origin of the packet because
it cannot distinguish whether the Tor sender resides in AD1,
or the packet is relayed by other Tor servers and routed
through AD1. In general, if an attacker is an AD except AD1,
Alice is hidden within all active Tor users (Nt). The same
analysis can be applied for receiver anonymity. Unlike LAP,
Tor can prevent colluding ADs from linking Alice with Bob
based on topological or packet information, because layered-
encrypted packets look different at each AD. However, Tor
is vulnerable to timing attacks performed by colluding ADs
(e.g., adv 8).
3) Tor Instead of IP [14]:
Recent proposals identify
the importance of improving the default privacy level at
the network layer. Instead of using Tor as an overlay, Liu
et al. propose replacing IP with Tor. They assume that each
AD runs a Tor server, and that packets travel from the
sender to the Internet core (Tier 1) and then to the receiver
similar to LAP rather than being routed via an indirect
path. Tor instead of IP, however, allows zigzag paths in
the core to improve anonymity. Hence, this scheme exhibits
the same level of anonymity as LAP when an attacker is
not at the core, but a slightly better anonymity when the
core AD is malicious. However, in terms of performance,
this scheme suffers from expensive path establishment and
516
stateful communication similar to Tor.
4) AHP [7]: Raghavan et al. propose Address Hiding Pro-
tocol (AHP), in which an ISP shufﬂes its own address space
and assigns a random IP to a sender. Trostle et al. present a
similar approach to enhance sender’s location privacy using
Cryptographically Protected Preﬁxes (CPP) [30]. Both AHP
and CPP achieve a level of sender privacy constrained by the
available address block and geographical distribution of the
sender’s hosting ISP. For example, the sender anonymity in
AHP is bound by the size of the ﬁrst-hop AD (or ISP). Also,
they do not offer receiver anonymity or location privacy.
B. Session Unlinkability
Session unlinkability can be achieved by requesting a
new e-path for every new session. Furthermore, a sender
can refresh paths more frequently or use more than one
path simultaneously, thanks to the lightweight construction
of an e-path. Hence, LAP does not require the same path
to be reused for multiple TCP sessions. We show that LAP
achieves session unlinkability by considering the knowledge
of a malicious AD in the LAP-setting as follows. From a
request packet, an AD knows an e-path to the sender, the
size of e-path (which provides an upper bound on the AD-
level distance to the sender), the receiver’s ID (say, Bob), and
its own segment. A malicious AD can store this information
in his own local database. Upon receiving a reply or data
packet, the malicious AD can compare the stored segments
from the e-path in the packet, and learn the missing segments
from the sender to the receiver. As a result, all data packets
carrying the same segments would be linked to the same
sender-receiver session. On the other hand, when different
segments are used in a new session, the AD cannot tell
if Bob is still communicating with the same sender, thus
achieving session unlinkability.
C. General Attack Resilience
DoS resilience.
Prior anonymity systems are often vulner-
able to computational-based DoS due to expensive asym-
metric operations for setting up communication paths or
storage-based DoS due to stateful forwarding. As a result,
they require additional DoS defense mechanisms, such as
introduction points [1] or mailboxes [14], as an extra layer of
indirection to actively block unwanted requests. On the other
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:13 UTC from IEEE Xplore.  Restrictions apply. 
hand, LAP is robust against Denial-of-Service (DoS) attacks
in many aspects, thanks to its lightweight path establishment
and stateless forwarding mechanism. For example, a receiver
can ﬁlter incoming trafﬁc by selectively announcing paths
and frequently updating paths.
A common challenge for all anonymity systems is when
an attacker sends untraceable trafﬁc. To prevent such misuse
of anonymous communications, an AD can allocate only
a small amount of bandwidth for anonymous trafﬁc. To
prevent such attacks, we leave it as future work to study
the tradeoffs between anonymity and accountability.
Resilience against trafﬁc analysis.
Trafﬁc analysis com-
prises two parts: observing trafﬁc and correlating trafﬁc.
Compared to Tor, LAP makes correlations much easier
but observations much harder. For correlations, an attacker
controlling two or more distinct entities in the network can
easily correlate observed packets to estimate their routes,
because LAP packets in the same session look the same at
each hop. For observations, a Tor attacker controlling all
entry and exit relays has a good chance of de-anonymizing
Tor trafﬁc. However, the equivalent attack is almost impos-
sible in LAP because the attacker has to compromise all the
ﬁrst-hop ADs.
D. Resilience against Known Attacks
DoS-based side-channel attacks.
In the category of DoS-
based side-channel attacks, the approach proposed by Burch
and Cheswick [31] for IP traceback could also be applied
to trace back an e-path to its origin. The basic idea is
to send a large amount of trafﬁc over a link that the e-
path may be using. If the link is indeed part of the e-path,
one will observe a slowdown of the session using the e-
path. By repeating this process, one could eventually trace
back the entire path. The essence of the approach is to
induce a DoS attack and to use other packets as a side
channel to determine the packet ﬂow. Numerous such side
channels have been investigated in the literature [20], [21],
[23], [32]. Flow watermarking techniques also fall into this
attack category, using slight time-based variations to infer
which packets belong to the same session [33], [34] —
however, this requires multiple observation points in the
network. These attacks are possible even on more heavy-
weight schemes such as Tor, and naturally our lightweight
approach will not offer protection. These attacks, however,
require more signiﬁcant effort than passive observations of
network trafﬁc.
Time-based identity inference attacks. A related attack
class is time-based identity inference attacks. Speciﬁcally,
Kohno et al. propose device ﬁngerprinting based on clock
skew inferred from TCP timestamps [35]. Since in LAP,
TCP headers are not encrypted by default, this attack would
apply; however, the standard countermeasures apply as well:
end-to-end IPsec tunnel, perturbation of TCP timestamp,
etc. Another potential location leak is round-trip-time (RTT)
based location inference, where the observation is that the
lowest observed RTT induces an upper bound on the distance
of the other party. Consequently, ACK packets for example,
may need to be delayed to increase the anonymity set.
TTL-based attacks.
Finally, in the case of LAP used on
IP-based networks, we need to defend against a TTL-based
attack: by sending a LAP packet with a small TTL, the
TTL may expire while a router within the e-path forwards
the packet, which in turn would trigger an ICMP message
sent to the source address. Fortunately, the ﬁrst router in the
e-path sets the IP source address to its own address, thus the
attacker would not receive the ICMP error message.
VIII. EVALUATION
In this section, we evaluate the performance of LAP in
terms of latency and throughput. Speciﬁcally we compare
three systems: LAP-disabled (no anonymity), LAP-enabled
(intermediate anonymity), and Tor (high anonymity). Our
results show that LAP improves anonymity with a negligible
overhead (i.e., lightweight) and is more efﬁcient compared
to high anonymity systems like Tor.
LAP implementation. We implement basic routing and
forwarding elements based on Click software routers [36]
to support packet-carried forwarding state (LAP-disabled).
We extend the prototype to further
support encryp-
tion/decryption of LAP (LAP-enabled). The only overhead
that LAP introduces for an e-path construction per AD hop
is the extra packet space needed for optimal padding, and
the time for a symmetric encryption. This is because packet-
carried forwarding state already requires ADs to verify their
own routing decisions using MACs. Since routing decisions
are carried in each packet,
the overhead caused by the
forwarding phase for each AD is the time to decrypt its
own segment. We show that our software-based implemen-
tation of LAP exhibits competitive performance, with an
anticipation that LAP will perform even better on dedicated
hardware.
A. Latency Evaluation
We ﬁrst examine the latency introduced by LAP’s cryp-
tographic operations. We then estimate LAP’s latency in the
real Internet and compare with Tor.
We measure the latency of LAP-disabled and LAP-
enabled systems in one LAN network. Each AD is simulated
on one machine with 1 Gbps connection to its adjacent ADs.
Since our tests are run on a local LAN, the latency is domi-
nated by the cryptographic operations. We implement LAP’s
encryption/decryption using the AES function in OpenSSL.
For the LAP-disabled case, ADs perform forwarding using
packet-carried state, which involves one MAC computation
using the same AES function. For the LAP-enabled case,
ADs verify a MAC and decrypt
their own state during
517
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:13 UTC from IEEE Xplore.  Restrictions apply. 
F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Tor
LAP
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
latency
(a) Average latency with LAP disabled and LAP
enabled.
(b) Latency comparison of LAP and Tor using the
real Internet topology.
(c) Average throughput with LAP disabled and
LAP enabled.
Figure 8. LAP evaluation.
forwarding. We run each test 10 times and present
the
average value. As Figure 8(a) shows, LAP adds a small
amount of latency to packet processing; in our software
implementation, this is on the order of microseconds, but a
hardware implementation would shrink the extra decryption
time to nanoseconds.
We also compare the latency experienced by LAP and
Tor users using the real Internet topology as follows: we
estimate LAP’s latency based on the actual Round-Trip-Time
of receiving HTTP packet headers and the estimated latency
overhead of LAP cryptographic operations. For Tor, we