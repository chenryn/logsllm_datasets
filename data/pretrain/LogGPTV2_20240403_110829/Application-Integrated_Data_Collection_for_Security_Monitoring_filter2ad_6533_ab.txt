### Transactions, User Sessions, and Data Collection for Security Monitoring

#### 1. Introduction
Network-based monitors often face challenges in reconstructing transactions (request-response) and user sessions. This reconstruction process, which involves piecing together information from individual network packets, is resource-intensive and may not accurately replicate the end-point reconstruction. In contrast, an application-integrated module receives complete transaction and session records directly from the application, ensuring consistency in interpretation.

#### 2. Advantages of Application-Integrated Data Collection

**2.1 Preemptive Capabilities**
Intrusion Detection Systems (IDSs) are sometimes criticized for their limited utility, as they can only report intrusions, often too late to prevent damage. By integrating the IDS into the application, the module can supervise all processing steps and react in real-time. For example, it can block a single malicious operation without compromising server performance.

#### 3. Disadvantages

**3.1 Performance Impact**
Running a monitoring process on the same host as the monitored service can impact server performance. Therefore, it is crucial to design and implement the monitor to minimize this impact.

**3.2 Development Efforts**
Developing a distinct application-integrated monitor for each type of application can be significant. However, given that a few products dominate the field of network server applications, the required efforts and costs may be lower than initially expected. This is especially true for open-source applications or those that provide an API for modules.

**3.3 Complementary Nature**
The application-integrated monitor should complement other types of IDSs. As it is part of the application, it only sees data reaching the application. An attacker targeting a protocol below the application layer could evade detection by the module but would still be within the scope of a network-based IDS or another host-based sensor specialized in lower-level protocols.

#### 4. Design Principles and Implementation

**4.1 Focus on Web Servers**
Current network infrastructure makes certain applications critical, with the Web server being both ubiquitous and vulnerable. Most organizations require a Web server, and it is the service most users associate with the Internet. Additionally, many sites have customized programs connected to the server, allowing access to legacy database systems. These programs, often developed by junior programmers, may lack proper security considerations, leading to frequent vulnerabilities in CGI programs. The Web server is also one of the first targets during reconnaissance due to its easy-to-exploit vulnerabilities.

**4.2 Targeting Apache Web Server**
Given the market dominance of Apache, Microsoft-IIS, and Netscape-Enterprise, we chose to focus our prototype on the Apache Web server. Apache's well-defined API and market share make it an ideal candidate for application-integrated event data collection.

**Table 1: Market Shares for Top Web Server Products [7]**

| Product              | Developer | Market Share |
|----------------------|-----------|--------------|
| Apache               | Apache    | 60.0%        |
| Microsoft-IIS        | Microsoft | 19.6%        |
| Netscape-Enterprise  | iPlanet   | 6.2%         |

**4.3 Implementation Details**
Extending the Apache server with our data collection module is straightforward due to several key features:

- **Well-Defined API**: Clear and distinct data structures for each request.
- **Staged Request Processing**: Hooks or callbacks at each stage of request processing.
- **Feedback Mechanism**: The module can provide feedback to the server after each stage.
- **Logging Support**: Extensive logging capabilities through the reliable piped logs interface.

**Figure 1: The Apache Request Loop [12]**

[Diagram of the Apache request loop]

**4.4 System Architecture**
Our system, built within the EMERALD framework, includes the eXpert-HTTP analysis engine and the eFunnel communications process. The architecture and data flow are depicted in Figure 2.

**Figure 2: System Architecture and Data Flow**

[Diagram of the system architecture and data flow]

**4.5 Detailed Steps in the Request Cycle**

1. **Logging Stage**: The Web server passes control to our module.
2. **Data Packing**: The module extracts relevant data and formats it for the eXpert-HTTP analysis engine.
3. **Piped Logs Interface**: The information is passed to an auxiliary program via Apache's reliable piped logs interface.
4. **eFunnel Communication**: The auxiliary program sends the data to eFunnel, which then communicates with eXpert-HTTP on an external host.
5. **Analysis**: eXpert-HTTP performs the analysis.

**4.6 Design Considerations**
- **Security**: Minimize code within the server to reduce vulnerability risks.
- **Performance**: Limit analysis on the server host to maintain speed.
- **Code Reuse**: Leverage existing code in the server and EMERALD system.

**4.7 Latency and Reactive Capabilities**
Removing the analysis engine from the server introduces latency, limiting the module's reactive capabilities. To address this, we recommend a two-tier architecture for larger sites, balancing real-time reaction and performance.

**4.8 Benefits of Application-Integrated Module**
- **Access to More Information**: The module can determine if a request is handled as a CGI script or an HTML file.
- **Immediate Availability**: Information is immediately available, unlike log file monitoring, which has delays due to caching and polling.

**4.9 eFunnel and Reliable Piped Logs Interface**
eFunnel handles interprocess communication issues, while Apache's reliable piped logs interface ensures data is sent directly to a program. We use an auxiliary program to interface between the Web server and the IDS, addressing practical issues with Apache's behavior.

#### 5. Analysis Engine

**5.1 eXpert-HTTP**
Within EMERALD, we are developing eXpert-HTTP, an analysis component for HTTP traffic. It can receive event messages from both network data collection components and the application-integrated module, using the same knowledge base. This allows for seamless integration and testing without additional development costs.

By leveraging these design principles and implementation strategies, we aim to create a robust and efficient application-integrated data collection module for security monitoring.