which is clearly a length at which this is an inefficient
CRC. (At 3151 bits USB-5 is optimal, and is 2.077 times
better at error detection that CCITT-5.).
CCITT-5’s polynomial is divisible by (x+1), which re-
sults in an ability to detect all odd numbers of bit flips and
is commonly said to be desirable (e.g., [Tanenbaum96]).
Indeed, at a data word length of 3151, CCITT-5 is the best
polynomial out of all 5-bit polynomials divisible by (x+1).
USB-5, on the other hand, is not divisible by (x+1) and per-
forms better than CCITT-5 at all lengths above 10 bits. To
understand why USB-5 does so much better in Figure 1, it
is helpful to examine the weight structure at length 3151,
shown in Table 2. For a BER of 10-6, most messages of
length 3151 suffer zero-, 1-, or possibly 2-bit errors, with
each increasing number of erroneous bits less likely. As
Table 2 shows, USB-5 is almost twice as effective at de-
tecting 2-bit errors, and the 3-bit error
weight for USB-5 is not high enough for
it to outweigh this advantage. Thus,
USB-5 is superior for this BER.
0x15
HD=2
d
u
P
1e-12
1e-15
1e-18
1e-21
1e-24
1e-27
0x12
HD=3
HD=4
0x15 CRC-5
0x12 USB-5
Bound
8
16
32
64
128
256
512
1024
2048
Data Word Length (bits)
Figure 1. Performance of published 5-bit CRCs.
d
u
P
1e-12
1e-15
1e-18
1e-21
1e-24
1e-27
1e-30
1e-33
0x9C
0xEA
0x97
HD=2
HD=3
HD=4
0x9C DARC-8
0xEA CRC-8
0x97
Bound
HD=5
8
16
32
64
128
256
512
1024
2048
Figure 2. 8 bit, HD=4 CRC performance.
Data Word Length (bits)
the most commonly used 8-bit polynomial is “CRC-8”,
which is 0xEA = x8+x7+x6+x4+x2+1. Figure 2 shows that
this polynomial provides HD=4 up to length 85. However,
at lengths 86 to 119 it provides only HD=2 compared to a
bound of HD=4. At lengths above 119 it provides the same
HD=2 as the bound, but with a significantly higher Pud.
Overall, this polynomial is adequate up to length 85, but
could be improved upon. Many uses of CRC-8 in current
systems are therefore questionable, because they attempt to
provide error detection for a large data word (such as
across a long message or a large block of memory data).
Table 2. Weights for CCITT-5 and USB-5; data word size 3151 bits.
4.2.
8-bit polynomials
8-bit polynomials are commonly used
for 8-bit
Perhaps
because they are efficient
microcontroller applications.
Polynomial
HD
Hamming weights for number of bits corrupted:
1 bit
2 bits
3 bits
4 bits
5 bits
USB-5 0x12
CCITT-5 0x15
2
2
0
0
159 075 163 552 409 128 929 654 767 81 278 805 135 219
330 435
0
257 909 068 726
0
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:55 UTC from IEEE Xplore.  Restrictions apply. 
How can a designer do better than CRC-8? One way is
to take advantage of published improved polynomials. In
this particular case, [Baicheva98] has published polyno-
mial C2, with value 0x97 = x8+x5+x3+x2+x+1 . Figure 2
shows that 0x97 has the same or better performance as
CRC-8 at every data word length (this is also true at lengths
beyond 2048 bits as well). Because of this, 0x97 domi-
nates CRC-8 and therefore is an unconditionally better
polynomial choice given our fault assumptions. Moreover,
0x97 has optimal performance at length 119, the largest
possible length at which HD=4 can be achieved with an
8-bit CRC. Unfortunately, such analysis for polynomials is
difficult to find for other situations; there are no published
complete surveys for other CRC sizes except those already
mentioned.
The ATM-8 HEC polynomial 0x83 = x8 + x2 + x + 1
(said to be from ITU standard I.432) does not dominate
CRC-8, but is close to C2. The two polynomials perform
essentially the same at lengths above 112 bits, but ATM-8
degrades to 45% worse than C2 at length 8 bits. For a
32-bit ATM data word, C2 is 4.9% more effective than
ATM-8 at error detection for moderate to low BERs.
the DARC polynomial
A pitfall of choosing a published polynomial is that it
might not be good for most data word lengths. For exam-
ple,
0x9C =
x8+x5+x4+x3+1 is optimal for length 8, but provides only
HD=2 at lengths 10 and above with rather poor Pud perfor-
mance as shown in Figure 2. The DARC application uses
this polynomial for data word lengths 16 through 48 bits,
where it performs poorly.
[ETSI02]
Figure 2 makes it clear that there are two missed oppor-
tunities even when choosing the best published 8-bit CRC
polynomials. The first is that they miss the HD=3 “ledge”
on the bound curve between lengths 120 and 247. The sec-
ond is that none of them are close to optimal for lengths of
248 and higher. For example, CRC-8 is a factor of 3.3
worse at 1024 bits. Other published CRCs such as the
ATM HEC do no better than a factor of 2.3 worse than the
bound at 1024 bits and higher. But, there are polynomials
that are far better than commonly used ones for HD=3 and
HD=2 applications. Figure 3 shows that 0xA6 = x8 +x6 +x3
+x2 +1 maintains HD=3 up to 247 bits, and indeed is opti-
mal at that length. Moreover, 0xA6 gives performance al-
most indistinguishable from the bound at lengths of 120
and up.
Two examples of real protocols help to illustrate the po-
tential of improved CRCs: SMBus and Xmodem. SMBus
is a low speed communication bus used for “smart” batter-
ies and portable electronic device power management ap-
plications. Version 1.1 of SMBus added a CRC-8
polynomial [Smbus00], presumably inherited from the
older I2C bus standard. Many of the messages are between
16 and 40 bits in length, and are suitably protected by
CRC-8 at HD=4. However, there is a data packet transfer
command that results in 35-byte (280 bit) message pay-
loads. The protection afforded by CRC-8 is only HD=2 for
messages 11 bytes and longer. The ATM-8 polynomial
might have been a better choice because it would have held
HD=4 for longer messages, and provided better error de-
tection for HD=2 operating regions.
One can make the case that 0xA6 would have been an
even better choice for SMBus, depending on the expected
message workload. Longer messages make bigger targets
for random bit errors, and are therefore more likely to ac-
cumulate multiple errors.
If the message workload for
SMBus in a particular application makes heavy use of long
messages, the HD=3 operating region of 0xA6 and the
better performance for HD=2 operating regions might out-
weigh the penalty of increased vulnerability (HD=3 in-
stead of HD=4) for short messages. The details depend on
the weighted sum of undetected error probabilities for
messages of each length, which would vary by application.
But the point is that sometimes it is worth giving up a little
error detection at short message lengths to gain better pro-
tection for longer messages. (An alternate strategy would
be to use 0xA6 for long messages and a good HD=4 poly-
nomial for short messages.)
for
Another common CRC-8 application is
the
XMODEM protocol, developed by Ward Christansen in
1977. This protocol transmits packets in 128-byte (1024
bit) chunks protected by CRC-8. While polynomial evalu-
ations were not generally available then, any of the alter-
nate CRCs discussed here (except DARC-8) would have
been a more effective choice.
5. Polynomial selection
The difference between good HD=4 polynomials and a
good HD=3/HD=2 polynomial for 8-bit CRCs illustrates
that a one-size-fits-all approach to CRC selection can cost
a significant amount of error detection performance, in-
cluding losing a bit (or more) of possible error detection
capability for some message lengths. Therefore, selection
of a good CRC polynomial must involve not only the size
of the CRC, but also the size of the data word. Moreover,
many commonly used polynomials are poorly suited to
likely applications. Therefore, we propose “good” polyno-
mial candidates and prescribe a method for selecting an
appropriate candidate for each application.
5.1. Candidate polynomial selection
The selection of a “good” polynomial for generic use is
of course a matter of engineering judgement. The follow-
ing selection process was chosen to result in polynomials
that primarily maintained high HD values to the longest
data word lengths possible, secondarily achieved good
performance at shorter lengths, and thirdly achieved good
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:55 UTC from IEEE Xplore.  Restrictions apply. 
performance at longer lengths than the stated maximum us-
age length. The prioritization of these goals keeps in mind
that embedded network applications typically have a maxi-
mum message length that needs a certain HD; that short
messages can benefit from improved HD protection so
long as protection of long message is not materially sacri-
ficed; and that sometimes a protocol revision adds mes-
sages
so good
performance at longer message lengths is desirable as a
safety net.
than originally envisioned,
longer
The steps followed were performed for all distinct CRC
polynomials of size 3 bits to 16 bits.
(1) Compute weights for all polynomials at data word
lengths 8 bits through 2048 bits.
(2) Find the bounding weights by selecting the polyno-
mial with the lowest weight at each length (i.e., generating
a list of point-wise optimal polynomials). In general this
means a different polynomial is selected as the bound for
each length from 8 bits through 2048 bits, although in
many cases a single high-performing polynomial happens
to account for multiple bound values. This data was the
source of our “bound” curves.
(3) Identify “break points” in the bound, in which the
best achievable HD value changes. For example, the 8-bit
CRC bound in Figure 2 has break points as follows: HD=5
is possible to length 9, so the HD=5 break point is at 9. The
HD=4 break point is at length 119 (HD=4 is the best possi-
ble HD from length 10 to 119). The HD=3 breakpoint is at
length 247. And of course HD=2 is possible at all lengths
with any CRC polynomial. Follow the subsequent steps
for each breakpoint in turn.
(4) Identify all polynomials that achieve the HD bound
at the breakpoint. This guarantees that the polynomial se-
lected gets all the way into the “corner” of the bound curve
at the break point. If there are multiple polynomials, select
the one with the lowest weights. If there is a tie for lowest
weights or several low weights are within 1% of each other
(a near-tie), invoke Steps (5) and (6). If there is an existing
published polynomial within 1% of the bound, use that
polynomial. This step excludes polynomials that might be
better at lower weights at the expense of decreasing HD be-
fore the break point (the HD=4 break point of CRC-8,
shown in Figure 2, is an example of a polynomial being
pruned from consideration for this reason).
(5) If multiple polynomials have been identified in Step
4, select the polynomial having the longest-length break
point for the next higher HD value. For example, there are
30 distinct 10-bit polynomials that achieve the break point
HD=3 at length 1013, all of which have identical 3-bit
Hamming weights. However, among those polynomials,
the longest length for which HD=4 is possible is length 73
from polynomial 0x327, making it the choice for a “good”
polynomial. Similarly, polynomial 0xBAAD is the only
polynomial that provides both HD=4 at length 2048 and
HD=5 up to length 108 bits (other polynomials with HD=4
at 2048 bits provide HD=5 at shorter data word lengths),
and is only 0.39% worse in performance than the optimal
polynomial at length 2048, which is 0xD3E9 given by
[Kazakov01]. This screening step provides polynomials
that not only provide good performance at break points,
but also have a bonus of even better HD at smaller lengths.
Table 3. “Best” polynomials for HD at given CRC size and data word length.
Underlined polynomials have been previously published as “good” polynomials.
Max length at HD
Polynomial
3
4
5
6
7
8
9
10
11
CRC Size (bits)
2048+
2048+
0x5
0x9
11
0x9
2048+
0x12
2048+
0x21
2048+
0x48
2048+
0xA6
26
0x12
10
0x15
57
0x21
25
120
0x48
56
0x2C
0x5B
247
0xA6
119
0x97
9
2048+
0x167
502
0x167
246
0x14B
2048+
0x327
1013
0x327
501
0x319
2048+
0x64D
2036
0x64D
1012
0x583
HD=2
HD=3
HD=4
HD=5
HD=6
HD=7
HD=8
12
–
2048
0xB75
2035
0xC07
13
14
15
16
–
–
–
–
–
–
–
–
2048
0x102A
2048
0x21E8
2048
0x4976
2048
0xBAAD
none
113
136
0x212D
0x6A8D
241
0xAC9A
13
21
25
53
0x9C
0x185
0x2B9
0x5D7
0x8F8
8
12
22
27
52
57
0x13C
0x28E
0x532
0xB41