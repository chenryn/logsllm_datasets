Chinese Dec., 2011 30,901,241
Dodonew E-commerce
Chinese Dec., 2011 16,258,891
CSDN
Programmer
Chinese Dec., 2011 6,428,277
Rockyou
Social forum
English Dec., 2009 32,581,870
000webhost Web hosting
Oct., 2015 15,251,073
English
Yahoo
July, 2012
442,834
English
Web portal
129,303 X
12306
Chinese Dec., 2014
Train ticketing
Sep., 2016 2,222,045 X
ClixSense
Paid task platform English
69,418 X
Rootkit
Feb., 2011
Hacker forum
English
79,580 X
QNB(cid:3)
English April, 2016
E-bank
yPW stands for password, PII for personally identiﬁable information.
(cid:3)QNB passwords are from e-Bank and used as high-value targets.
Two of our datasets were leaked in MD5 hash, and we
manage to recover an overwhelming fraction of them by using
various trawling guessing models [24] as well as the targeted
guessing model TarGuess [30] on a common PC with GPU in
one week. More specially, Rootkit initially consists of 71,228
passwords and we manage to recover 97.46% of them; QNB
3
TABLE II.
BASIC INFO ABOUT OUR PII DATASETS.
Types of PII useful for this work
Language Items num
Dataset
Chinese 20,051,426 Name, Birthday, Phone, NID(cid:3)
Hotel
2,327,571 Email, Name, Birthday, Phone
Chinese
51job
129,303 Email, User name, Name, Birthday,
12306
Chinese
2,222,045 Email, User name, Name, Birthday
ClixSense English
79,580 Email, User name, Name, Birthday
English
Rootkit
77,799 Email, User name, Name, Birthday,
QNB
English
yNID=National identiﬁcation number, e.g., social security number.
Phone, NID
Phone, NID
initially contains 97,415 passwords [19], and we manage to
recover 79,580 (81.69%) of them. The QNB dataset was leaked
from the Qatar national bank, which is located in Middle
East, in April 2016 [19]. To our knowledge, this is the ﬁrst
real-world banking-password dataset that is explored in an
academic study.
Particularly, four password datasets (i.e., 12306, ClixSense,
Rootkit and QNB) are associated with various kinds of PII as
shown in Table II. To facilitate a more comprehensive empiri-
cal analysis of honeyword security under targeted attackers, we
further match the non-PII-associated datasets with these PII-
associated datasets by using email. As a result, this produces
nine PII-associated password datasets as shown in the ﬁrst row
in of Table III: (1) the four Chinese ones are obtained by
matching the corresponding non-PII-associated dataset with
12306; (2) the four US-English ones are: PII-Rootkit, PII-
ClixSense, and two other ones obtained by matching 000web-
host and Yahoo with ClixSense, respectively; and (3) PII-QNB,
which is QNB itself. Note that, the non-PII-associated US-
English dataset Rockyou includes neither email nor NID, and
thus it cannot be matched.
We further employ two auxiliary PII datasets (i.e., Hotel and
51job) to augment each Chinese password dataset to obtain
more PII-associated accounts by matching email or NID. We
note that many PII-associated accounts miss some important
PII attributes, and they can be supplemented by using the
auxiliary PII datasets.
Table III demonstrates that users love to employ their
personal information to build passwords. Here we measure
the PII usages by using the type-based PII-tagging approach
proposed in [30], for it has been shown much more accurate
than other approaches. As high as 36.95%∼51.43% of Chi-
nese users employ at least one of their six kinds of PII to
construct passwords, while this ﬁgure for US-English users
is 12.76%∼29.94% and for ME-English users is 27.16%. In
comparison, the PII-associated US-English users show a more
secure behavior in PII usages. This is expected, because they
are all Rootkit hackers or ClixSense online cash-earning users
(as resulted from email matches). In other words, our PII-
associated US-English users well represent technique-savvy
users. Our results show that a large number of users build
passwords using PII, and thus sound honeyword-generation
methods shall take this user behavior into account.
We highlight that though QNB users speak English, their
passwords have little correlation with the other four English
userbases. This is expected: QNB users are mainly from
Middle East. Thus, we divide users into three groups: Chinese,
US-English and ME-English. In all, our corpus is new, compre-
hensive and well represents real-world password distributions,
and to our knowledge, it is also among the largest and most
diversiﬁed ones ever collected for use in a password study.
PERCENTAGES OF USERS BUILDING PASSWORDS WITH THEIR own HETEROGENEOUS PERSONALLY IDENTIFIABLE INFORMATION (PII).y
TABLE III.
Typical usages of personally identiﬁable information PII-Tianya PII-Dodonew PII-12306 PII-CSDN PII-Rootkit PII-000web- PII-ClixSense PII-Yahoo PII-QNB
(16,307) (77,799 )
6.95% 8.52%
5.20% 11.85%
3.86% 4.91%
3.82% 7.61%
1.92%
0.13%
18.76% 27.16%
yThe speciﬁc sub-types of each kind of PII we consider are the same with that of TarGuess-I [30]. For instance, 23.82% in the top left corner means that
23.82% of the 161,517 PII-associated Dodonew users employ at least one of their 7 sub-types of name information to build passwords.
Name (7 subtypes, e.g., johnsmith, john, jsmith)
Birthday (10 subtypes, e.g., 01171981, 1981, 0117)
Email preﬁx (3 subtypes, e.g., moon123, moon, 123)
User name (3 types, e.g., loveu1314, loveu, 1314)
Phone # (3 subtypes, e.g., 4153022671, 415, 2671)
NID (3 subtypes, e.g., 620915337, 620, 5337)
Total personal information usages (all above)
(129,303)
(77,216)
23.83% 16.71%
18.75% 19.16%
6.61%
8.65%
7.46%
10.12%
1.43%
0.89%
0.71%
0.12%
50.71% 46.87% 12.76%
(430,966)
9.13%
20.80%
6.31%
3.09%
1.18%
0.81%
36.95%
(69,330) host(153,390)
4.32%
1.57%
3.75%
3.45%
12.66%
7.36%
7.89%
5.74%
(161,517)
23.82%
16.37%
8.60%
10.53%
1.00%
0.39%
51.43%
29.94%
24.81%
9.14%
7.07%
5.14%
5.29%
–
–
(2,222,045)
–
–
–
–
–
–
B. Security model
In this paper, we mainly focus on the security that can be
provided to the underlying user authentication system when
honeywords are in place. Without loss of generality, we consid-
er the most general case, i.e. the client-server architecture. We
discuss the primary kinds of attacks which exploit honeywords
and can be possibly launched against the honeyword system.
The honeyword system. As shown in Fig. 1, there are four en-
tities involved: a user Ui, an authentication server S, a honey-
checker, and an attacker A. User Ui has registered an account
(IDi, PWi) at S, and some PII may also be needed (e.g., Gmail
registration requires name, birthday, phone and gender). On
the server side, what’s different from the traditional password
authentication is that, S conducts a command Gen(k; PWi):
S generates a list of k-1 distinct, plausibly looking decoy
passwords (called honeywords) to associate with Ui’s account,
where k = 20 as recommended in [21]. Password PWi and its
k-1 honeywords are uniﬁedly called k sweetwords. Generally,
there are two broad kinds of honeyword methods: random-
replacement based (e.g., tweaking tail [21]) and password-
model based (see Sec. III-E).
Now Ui’s account record in S can be represented as
(IDi, SWi), where SWi = (swi,1, swi,2,··· , swi,k). Exactly
one of these k sweetwords, denoted by swi,j, equals Ui’s
password PWi. Let Ci denote the correct
index of Ui’s
password in the sweetword list SWi, and thus Ci = j. The
k sweetwords on S shall be hashed, with salting in a per-
user or even per-sweetword manner. The record (IDi, Ci)
is kept on the honeychecker which is a separate, hardened
computer system of minimalist design. It may be placed
in different administrative domains, runs different operating
system, software stacks, security mechanisms and so on,
and ensures distributed security [7], [21]. The honeychecker
is not publicly accessible, and it only interacts with S by
using a “dedicated and/or encrypted and authenticated” [21]
communication channel.
∗
i =Ci,
When Ui logs in with (IDi, PW
∗
i ), S ﬁrst looks up the list
∗
i )
SWi and sees whether there is one element (with index C
∗
i . If not, the login is rejected. Otherwise,
that matches PW
∗
S submits a command Check(IDi, C
i ) to the honeychecker.
If C
then the honeychecker signals to S to accept
Ui. Otherwise, it suggests that a login with honeyword is
attempted, and an alarm is raised to S. Depending on the alarm
policy, S may take an appropriate action, such as: 1) accept the
login but on a honeypot system, and more stringently monitor
the user’s activities; 2) if the number of honeyword logins
against Ui’s account exceeds a pre-deﬁned threshold T1 (e.g.,
3), lock out Ui’s account until the user resets a new password;
or 3) shut down the computer system and require all users
to reset new passwords, if all users’ total honeyword login
attempts exceeds a pre-deﬁned threshold T2. The value of T2
depends on the system’s risk analysis and is out of our scope.
Since the system has to balance honeyword-distinguishing
attacks and DoS attacks, T2 shall not be too small or too large,
and without loss of generality, we set T2=104.
Honeyword distinguishing attacker. As mentioned earlier,
the most essential security goal of any honeyword method is
to produce a set of k-1 honeywords for a given user Ui’s
account such that they shall be indistinguishable from Ui’s
real password PWi. This goal corresponds to the honeyword
distinguishing attacker A as shown in Fig. 1, who aims to tell
the real password apart from the k-1 honeywords associated
with Ui’s account by using S as a querying oracle. A’s honey-
word login attempts will be detected by the honeychecker, and
if the number of such attempts against Ui’s account exceeds
the per-user threshold T1 (e.g., 3), A will raise the alarm on
Ui’s account. A will also raise the system-wide alarm if her
login attempts exceed the threshold T2 (e.g., 104). Thus, A’s
honeyword login attempts shall be as few as possible.
We assume that A has somehow already got access to the
server S’s password hash ﬁle, knows the algorithm under
which the honeywords are generated and hashed, and is armed
with all the publicly available information (e.g., various pub-
licly leaked password datasets and the target site’s password
this attacker a type-A1 attacker. As said
policy). We call
earlier, A may also obtain the victim Ui’s PII. We call this
advanced attacker a type-A2 attacker. These assumptions about
A’s capabilities are indeed realistic, yet they are often only