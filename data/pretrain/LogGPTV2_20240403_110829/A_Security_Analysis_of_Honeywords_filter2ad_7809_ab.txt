### Data Breaches and Password Datasets

#### Overview of Data Breaches
- **Dodonew E-commerce (Chinese, December 2011)**
  - Affected Users: 30,901,241
- **CSDN (Chinese, December 2011)**
  - Affected Users: 16,258,891
  - Type: Programmer community
- **Rockyou (English, December 2009)**
  - Affected Users: 32,581,870
  - Type: Social forum
- **000webhost (Web hosting, October 2015)**
  - Affected Users: 15,251,073
  - Language: English
- **Yahoo (Web portal, July 2012)**
  - Affected Users: 442,834
  - Language: English
- **12306 (Train ticketing, Chinese, December 2014)**
  - Affected Users: 2,222,045
- **ClixSense (Paid task platform, English, October 2016)**
  - Affected Users: 69,418
- **Rootkit (Hacker forum, English, February 2011)**
  - Affected Users: 79,580
- **QNB (E-bank, English, April 2016)**
  - Affected Users: 77,799
  - Note: QNB passwords are from an e-bank and are considered high-value targets.

#### Password Recovery
- Two datasets were leaked in MD5 hash format. We managed to recover a significant fraction of the passwords using various trawling guessing models [24] and the targeted guessing model TarGuess [30] on a common PC with GPU within one week.
  - **Rootkit**: Initially 71,228 passwords, 97.46% recovered.
  - **QNB**: Initially 97,415 passwords, 81.69% (79,580) recovered.
- The QNB dataset, leaked from the Qatar National Bank in April 2016, is the first real-world banking-password dataset explored in an academic study.

### Personally Identifiable Information (PII) Datasets

#### Basic Information
- **Hotel (Chinese)**
  - Items: 20,051,426
  - PII: Name, Birthday, Phone, NID
- **51job (Chinese)**
  - Items: 129,303
  - PII: Email, User name, Name, Birthday, Phone, NID
- **12306 (Chinese)**
  - Items: 2,222,045
  - PII: Email, User name, Name, Birthday, Phone, NID
- **ClixSense (English)**
  - Items: 79,580
  - PII: Email, User name, Name, Birthday, Phone, NID
- **Rootkit (English)**
  - Items: 77,799
  - PII: Email, User name, Name, Birthday, Phone, NID
- **QNB (English)**
  - Items: 77,799
  - PII: Email, User name, Name, Birthday, Phone, NID

#### Matching and Augmentation
- Four password datasets (12306, ClixSense, Rootkit, and QNB) are associated with various kinds of PII.
- We matched non-PII-associated datasets with these PII-associated datasets by using email, resulting in nine PII-associated password datasets.
  - **Chinese Datasets**: Matched with 12306.
  - **US-English Datasets**: PII-Rootkit, PII-ClixSense, and two others obtained by matching 000webhost and Yahoo with ClixSense.
  - **ME-English Dataset**: PII-QNB, which is QNB itself.
- The Rockyou dataset could not be matched as it includes neither email nor NID.
- Auxiliary PII datasets (Hotel and 51job) were used to augment each Chinese password dataset to obtain more PII-associated accounts by matching email or NID.

### PII Usage in Passwords
- Table III shows that users frequently use their personal information to build passwords.
- **Chinese Users**: 36.95% to 51.43% use at least one type of PII.
- **US-English Users**: 12.76% to 29.94% use at least one type of PII.
- **ME-English Users**: 27.16% use at least one type of PII.
- US-English users, particularly Rootkit hackers and ClixSense users, show more secure behavior in PII usage.
- QNB users, though English-speaking, have little correlation with other English userbases due to their Middle Eastern origin.

### Security Model

#### Honeyword System
- **Entities Involved**: User \( U_i \), Authentication Server \( S \), Honeychecker, Attacker \( A \).
- **Account Registration**: User \( U_i \) registers an account with ID \( ID_i \) and password \( PW_i \). Some PII may also be required.
- **Server-Side Process**: The server generates \( k-1 \) distinct, plausible decoy passwords (honeywords) for \( U_i \)'s account, where \( k = 20 \) as recommended in [21]. These honeywords and the real password are called sweetwords.
- **Honeychecker**: Stores the record \( (ID_i, C_i) \) where \( C_i \) is the correct index of \( U_i \)'s password in the sweetword list. It ensures distributed security and communicates with the server through a dedicated, encrypted, and authenticated channel.

#### Login Process
- When \( U_i \) logs in with \( (ID_i, PW^*_i) \), the server checks if \( PW^*_i \) matches any element in the sweetword list \( SW_i \).
- If a match is found, the server submits a command \( Check(ID_i, C^*_i) \) to the honeychecker.
- If \( C^*_i = C_i \), the login is accepted; otherwise, an alarm is raised.
- Depending on the alarm policy, the server may take actions such as:
  - Accept the login but monitor activities on a honeypot system.
  - Lock out the account if the number of honeyword logins exceeds a threshold \( T_1 \) (e.g., 3).
  - Shut down the system and require all users to reset passwords if total honeyword login attempts exceed a threshold \( T_2 \) (e.g., 10,000).

#### Honeyword Distinguishing Attacker
- The primary security goal is to produce indistinguishable honeywords from the real password.
- The attacker \( A \) aims to identify the real password among the honeywords.
- If \( A \)’s honeyword login attempts exceed thresholds \( T_1 \) or \( T_2 \), alarms are raised.
- Assumptions about \( A \):
  - **Type-A1 Attacker**: Has access to the server's password hash file, knows the honeyword generation and hashing algorithm, and has publicly available information.
  - **Type-A2 Attacker**: Additionally has the victim’s PII.

These assumptions reflect realistic capabilities and are often only partially met in practice.