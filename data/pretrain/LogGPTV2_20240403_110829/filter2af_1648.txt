# CVE-2018-5318：D-Link soap.cgi 缓冲区溢出
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
#
> 老板前一段给买了几款路由把玩，研究了下D-Link DIR 629、DIR 823这两款板子。发现在 _soap.cgi_
> 中存在几处栈溢出，均可以远程利用，并且其他型号的路由也有对soap这一部分代码的复用。
## 逆向分析与漏洞挖掘
因为是想挖几个能远程利用的洞，首先去看了HTTP服务，也就是 _/htdocs/cgibin_ 。
D-Link HTTP服务由 _cgibin_ 提供，并通过软链接的文件名进入到不同的处理分支：
在各个cgi处理函数中，会通过 _cgibin_parse_request_ 来解析用户输入，其函数原型大致如下：
参数 _save_param_func_ 用于传入解析/存储HTTP请求的具体handler，读取HTTP请求后使用该handler具体处理用户输入。在
_soapcgi_main（0x00418E28）_ 中传入了漏洞函数 _vulnerable_sprintf_parser_ _（0x0041893C）_
：
跟进 _vulnerable_sprintf_parser_ 可以发现程序未进行边界检查便将全局变量 _g_http_soapaction_ 通过
_sprintf_ 写到栈上：
_g_http_soapaction_ 来自于 _soapcgi_main_ 中对HTTP Header _SOAPACTION_ 字段的解析：
取 _HTTP_SOAPACTION_ ：
取 _#_ 后的值：
至此漏洞原理已经明了： _soapcgi_main_ 中未进行边界检查便将HTTP Header中的SOAPACTION字段存储至栈上，导致栈溢出。
## 漏洞利用
基础信息：
MIPS大端序，开启了NX，未开启ASLR、PIE，只需要做个ROP。
溢出的崩溃现场如下：
$S0、$S2-S3、$FP、$SP指向的内存可控，要编写ROP只能在这几个寄存器上做文章，最终用ropper在uClibc中找了个很不错的gadget：
现在需要做的就是找到libc加载的实际基址。
在隔壁开锁王师傅的指导下把板子拆开，接上串口：
成功获取到shell：
拿到shell后读/proc/pid/maps就可以获取到libc的加载基址。
最终编写ROP如下：
攻击演示：