anomaly is incorrect and misuse is correct, it is the
conﬂict set, C1;
s ∩ M
: a safe event is declared safe by the
anomaly detection while it is declared intrusive by
the misuse detection. There is a conﬂict, anomaly
is correct and misuse is incorrect, it is the conﬂict
set, C2;
u ∩ M t−
u : a safe event is declared unknown (i.e.
potentially intrusive) by the anomaly detector and
• Af +
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:21 UTC from IEEE Xplore.  Restrictions apply. 
E
Anomaly
Au
Misuse
Au ∩ Mu
As
Au ∩ Mi
As
ANOMALY
Es
Ei
Au
Mi
Figure 3. Serial combination of anomaly and misuse
detection
u ∩M f −
also unknown (i.e. potentially safe) by the misuse
detector. There is a soft conﬂict. Misuse is more
accurate than anomaly, it is the (soft) conﬂict set,
C3;
• At+
u : an intrusive event is declared unknown
(i.e. potentially intrusive) by the anomaly detec-
tor and also unknown (i.e. potentially safe) by the
misuse detector. There is a soft conﬂict. Anomaly
is more accurate than misuse, it is the (soft) con-
ﬂict set, C4.
Note that all the other intersections are empty be-
cause they are subsets of Es ∩ Ei which is empty after
property 1. For example, At−
i = As∩Es∩Mi∩Ei.
s ∩M t+
4. Anomaly Detection First Serial Com-
bination (ADFSC)
In Section 2.3 we underlined that the HTTP traﬃc
that we monitor is mostly safe. This has consequences
on the relative size of the sets described in the previous
section. This section brieﬂy presents the serial combi-
nation of anomaly and misuse detection, with anomaly
detection ﬁrst (ADFSC). It then discusses on the for-
mal model and why this is justiﬁed for HTTP traﬃc.
Figure 3 illustrates the serial combination of anomaly
and misuse detection, with anomaly detection ﬁrst. In
this combination, the anomaly component ﬁlters out the
events declared safe (As). Events declared unknown by
the anomaly detection (Au) are then analyzed by the mis-
use detection component. The operator is provided with
three sets of events:
• As: the events in this set are, by deﬁnition, consid-
ered as safe by the operator. For an eﬀective result of
the combination, the anomaly model must be con-
structed such that the false positives that may be
present in this set are low in number.
• Au ∩ Mi: this is the set of events declared unknown
(i.e. potentially intrusive) by the anomaly detector,
and intrusive by the misuse detector which actually
conﬁrms the results of the anomaly detector. The
misuse component brings its ability to diagnose the
alerts emitted by the anomaly component.
M f +
i
M t+
i
M f −
u
M t−
u
Conflicts C2
True
negatives
A>>M
False
positives
FP
C1
FN
FN
TP
C4
Unqualified
Ei Es
M
I
S
U
S
E
True
negatives
Conflicts C3
Unqualified
TN
M>A
At−
s
Af −
s
At+
u
Af +
u
Mu
Figure 4. Serial combination of anomaly and misuse
detection for HTTP traﬃc – sets in grey represents
empty sets ; Es is much larger than Es ; conﬂict sets
are re-interpreted
• Au ∩ Mu: this is the set of events declared unknown
(i.e. potentially intrusive) by the anomaly detec-
tor and unknown as well (i.e. potentially safe) by
the misuse detector. These events should be con-
sidered as false positives (respectively negatives) is-
sued by the anomaly (respectively misuse) detector
and the anomaly model (respectively the signatures
database) must be updated.
For the conﬂict of C1 (Af −
Figure 4 updates Figure 2 taking into account the
characteristics of the monitored events and the serial
combination of anomaly and misuse detection. HTTP
traﬃc being mostly safe means that Es is much larger
than Ei. Then the serial combination of anomaly and
misuse detection allows to re-interpret the conﬂict sets.
), the anomaly com-
ponent is wrong. Not sending these events to the misuse
component means that the conﬂict is ignored by ADFSC,
these events become false negatives. The challenge of the
approach we propose here is thus to make sure that C1 set
is negligible, namely that the anomaly component does
not declare safe too many intrusive events (i.e. false neg-
ative issued by the anomaly component low in number).
s ∩ M t+
i
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:21 UTC from IEEE Xplore.  Restrictions apply. 
For the conﬂict of C2 (At−
), the anomaly com-
ponent is right. Not sending these events to the misuse
component means that the conﬂict is properly solved by
ADFSC, these events become true negatives.
s ∩ M
f +
i
u ∩ M t−
u ) and C4 (At+
The conﬂicts of C3 (Af +
u ∩ M f −
u )
are still present. However, as both components actually
do not qualify these events, they can be simply inter-
preted as unqualiﬁed, containing safe events as well as
new attacks.
These events require further investigation in order to
be qualify as safe or intrusive, i.e. false positives (respec-
tively negatives) issued by the anomaly (respectively
misuse) detector. The anomaly model (respectively the
signatures database) must then be updated. The way this
update is realized is out of the scope of the paper. Never-
theless, one of our operational objectives is to minimize
the cardinality of Au ∩Mu so that a human processing by
the security administrator is possible. As a consequence,
the anomaly detector must ﬁlter out a high amount of
safe events
The
serial
combination presented here,
feed-
ing the misuse component with unknown events from
the anomaly component, principally addresses the prob-
lem which arises when using a single misuse component,
the false positive rate. Indeed the anomaly compo-
nent task is to ﬁlter out safe events among which some
would have lead to alarms if processed by the misuse de-
tection component. However, the subsets M t+
i ∩ Af −
and M f −
, which contain attacks, are also de-
clared safe by the anomaly detection. This implies a
constraint on the anomaly model constitution in or-
der to avoid anomaly detection false positives.
u ∩ Af −
s
s
5. Experimental Results
We use for our experiments an ADFSC as the one illus-
trated in Figure 3. In fact, the anomaly detection compo-
nent is integrated just behind the normalization module
in the WIDS in order to take advantage of the requests
normalization (such as decoding) and thus avoid mas-
querading. The HTTP traﬃc used for our experimenta-
tions comes from the Sup´elec web server log ﬁles. These
log ﬁles are less than one year old and we have a full ac-
cess to the web server. We did not use log ﬁles from FT
web server because they were too old (2001) to be re-
played against the current FT web site and thus we could
not do real veriﬁcation.
5.1. The Anomaly Detection Model
The anomaly model is based on the couple made by
the resources accessed and the combination of parame-
ters used, if any. For instance, the following requests:
• /backgroung.jpg
• /index.php?subject=network&news id=85
• /index.php?subject=security&news id=23
• /index.php
lead us to add the 3 following couples in our model:
• (/backgroung.jpg, { })
• (/index.php, { subject, news id })
• (/index.php, { })
The anomaly model is constructed using a list of such
couples from a training set: distinct couples are extracted
from this training set and classiﬁed in the ascending or-
der according to their number of occurrence. Thus, we
focus on the most requested resources. Each couple is se-
lected by an operator, i.e. manually qualiﬁed as a safe
request or not. According to the measures presented in
Section 2.3 and illustrated in Table 2, it is humanly pos-
sible to handle such a task with a few days training set.
In the experimentation presented below, we have to ver-
ify a thousand resources and this took us a few hours.
The resource accessed is not the only useful criterion
to qualify a request as safe or unknown. Each ﬁeld of the
log entry and also the combinations of some ﬁelds, may be
useful criteria as well. For instance, some resources may
only be reachable from a speciﬁc intranet; in this case, the
client IP address is an important criterion. For these ex-
perimentations we only use the resource name and the
combination of its parameters, if any. If the requested re-
source belongs to the anomaly model, the anomaly de-
tector checks if the combination of parameters used is al-
lowed or not, such as what is done by DIDAFIT [7, 8].
Since web sites are organized as trees, this leads us
to a tree structure. So far, we have used a simple tree
structure for our experimentations: each node contains
a character of the resource name, each leaf contains the
constraints relative to the resource. A resource is thus a
branch from the root node to a leaf. Whereas this struc-
ture is very simple, it is eﬃcient enough for our experi-
mentations.
The tree anomaly model is used as follows: when a re-
source is requested, the anomaly detection ﬁrst checks if
this resource belongs to the model. If not, this request
is declared unknown, else, associated constraints are ap-
plied to the incoming request. If the constraints are sat-
isﬁed, the request is declared safe, if not, the request is
declared unknown by the anomaly detection.
5.2. Qualitative Results
The ﬁrst seven days are used as a training set while the
remaining 85 days are used as test set. The training set
is composed of 191,976 log entries which are requests to-
ward 17,465 distinct resources. Our anomaly model is
composed of 17,313 selected resources from the train-
ing set. All static resources are included in the anomaly
model. Dynamic resources such as some PHP scripts and
counter managed by the webmaster are included in the
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:21 UTC from IEEE Xplore.  Restrictions apply. 
Single Misuse
Detection
Serial
Combination
Filtering
Rate
log entries
1,747,179
266,401
166,470
16,410
13,159
409
353
24
12
4
352
2,210,773
log entries
100,395
10,704
8,711
485
382
73
154
9
12
4
352
Percent.
94.25
95.98
94.76
97.04
97.09
82.15
56.37
62.50
0
0
0
121,281
94.52
Severity
0
1
2
3
4
5
6
7
8
9
>9
All
Table 3. Filtering rate toward Sup´elec log ﬁles. The
percentages are rounded at the second ﬁgure after the