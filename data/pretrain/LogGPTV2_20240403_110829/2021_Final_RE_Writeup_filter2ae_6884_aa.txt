# 2021 蓝帽杯 Final RE Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## abc
题目中存在着大量的花指令来妨碍我们查看伪代码，我们这里尝试编写 IDAPython 脚本来去除花指令。
花指令分析
###  **TYPE1**
call $+5
其实相当于往栈上写一个返回地址（0x400ECB），并且由于 CALL 指令的长度就是 5，所以实际上程序在执行 CALL 之后的 RIP
（0x400ECB）不变。
add qword ptr [rsp], 0Ch
相当于把前面压如的 RIP 地址 + 0xC，计算可以得知（0x400ECB + 0xC = 0x400ED7），也就是说实际上后面解析出来的 leave
和 retn 并不会执行，只是起到了混淆反编译器的作用。
jmp sub_4016C8
这里跳转的实际上是一个 plt 函数位置，但是这里使用了 jmp sub_4016C8 这种方法调用，在函数内部 retn 的时候就会直接返回到
0x400ED7 这个位置。
根据以上分析可知，实际上程序所做的就是将 call sub_4016C8 混淆为以上指令来阻碍 IDA Pro
的分析，而我们所需要做的，就是把上述代码还原为 call sub_4016C8。
**还原效果**
### **TYPE2**
插入两部分的无效片段
插入了一个函数
    push    rbp
    mov     rbp, rsp
    leave
    retn
程序会调用这个函数，但是实际上没有任何意义（为了混淆 IDA 识别）
执行后会使用 jmp 直接跳出，jmp 后的 leave 和 retn 不会被执行。
其特征为垃圾代码存在于 call 函数和 jmp 指令之间，只需要 nop 掉这一部分的内容即可。
**还原效果**
### **TYPE3**
这个实际上就是 leave;retn，我们直接还原即可
**还原效果**
### **修复 PLT 符号信息**
解决以上三种花指令后，查看伪代码就稍微好看一些了，但是 PLT 符号仍然没有被加载显示
开头的那三个调用明显是 setbuf，但是没有被显示，我怀疑是因为 Dyn 这里没有 DT_JMPREL，导致 IDA 没有识别
但是实际上在 DT_RELA 中存在 R_X86_64_JUMP_SLOT 信息，也就是我们可以根据这里的信息来模拟 PltResolver 从而恢复
Plt 的符号数据 。
这部分的思路来自于 
### **还原常量数据**
仔细观察就可以发现在程序中存在着大量的常量混淆，使用 ROR8 ROL8 ROR4 ROL4 这样的移位指令来妨碍分析
查看汇编代码发现格式基本上如下所示
我们可以直接计算这些操作，最终优化为直接的 mov rax, xxx
具体的实现逻辑就是，搜索 mov rax, xxx 这样的指令，然后以此指令向下遍历，遍历到 xor，rol，ror
这样可以直接优化的指令则模拟计算，计算完成后再修改 mov rax 指令。在计算的过程中需要考虑到操作数是 32 位还是 64 位，对于不同的操作手法。
**还原效果**
程序虽然还有一层取反操作后才输出，但是这对于我们分析程序逻辑已经影响不大了，所以我们接下来就可以直接进行分析。
### **主程序分析**
程序要求输入一串操作序列，输入的序列可以操作内部的 box 进行移动
这个移动的过程就是在不溢出过边界的情况下，可以让 box 中的 -1 向上下左右任意一个方向移动（交换相邻块）
简单的研究后，可以发现这个游戏其实就是 15 puzzle-game
也就是要求操作类似上面的空白块（可以上下左右移动），最后让空白块的位置停留在右下角且其他内容依次增加
这一部分就是 check 的代码，如果你的操作序列完成了游戏，那么就会使用 system 来 cat
flag，这样做的原因是，这种游戏的路径通常是有多条的，使用远程服务器验证序列的方式来 cat flag，可以让多解都能够得到
Flag，这也是一种常用的解决方案。
这里我通过搜索在 github 上找到一个脚本可以跑出结果
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    using namespace std;
    const string SOLUTION = "010203040506070809101112131415SS";
    struct Node {
        string state;
        string path;
    };
    bool goalTest(Node a) {
        return (a.state.compare(SOLUTION) == 0);
    }
    string swapNew(string state, unsigned int a, unsigned int b) {
        string newState(state);
        string temp = newState.substr(a, 2);
        newState[a] = newState[b];
        newState[a + 1] = newState[b + 1];
        newState[b] = temp[0];
        newState[b + 1] = temp[1];
        return newState;
    }
    void generateSuccessors(Node curNode, vector& possible_paths) {
        int loc = curNode.state.find("SS");
        // cout  7) { //can move up?e
            Node newNode;
            newNode.state = swapNew(curNode.state, loc, loc - 8);
            newNode.path = curNode.path;
            newNode.path += 'u';
            possible_paths.push_back(newNode);
        }
        if (loc  1) { //can move left?
            Node newNode;
            newNode.state = swapNew(curNode.state, loc, loc - 2);
            newNode.path = curNode.path;
            newNode.path += 'l';
            possible_paths.push_back(newNode);
        }
    }
    Node bfs(Node startNode) {
        queue frontier; //list for next nodes to expand
        frontier.push(startNode);
        map expanded; //keeps track of nodes visited
        int numExpanded = 0;
        int maxFrontier = 0;
        while (!frontier.empty()) {
            Node curNode = frontier.front();
            frontier.pop();
            numExpanded += 1;
            expanded[curNode.state] = 1;
            vector nextNodes;
            generateSuccessors(curNode, nextNodes);
            for (unsigned int i = 0; i  maxFrontier) {
                    maxFrontier = frontier.size();
                }
            }
        }
    }
    Node dfs(Node startNode, int maxDepth = 80) {
        stack frontier;
        frontier.push(startNode);
        map expanded;
        int numExpanded = 0;
        int maxFrontier = 0;
        while (!frontier.empty()) {
            Node curNode = frontier.top();
            frontier.pop();
            expanded[curNode.state] = curNode.path.length();
            numExpanded += 1;
            vector nextNodes;
            //cout  maxDepth) {
                    continue;
                }
                if (goalTest(nextNodes[i])) {
                    cout  maxFrontier) {
                    maxFrontier = frontier.size();
                }
            }
        }
        return startNode;
    }
    Node ittdfs(Node startNode) {
        for (unsigned int i = 1; i < 80; i++) {
            //cout << "current iteration: " << i << endl;
            Node solved = dfs(startNode, i);
            if (goalTest(solved)) {