title:Invoke-Deobfuscation: AST-Based and Semantics-Preserving Deobfuscation
for PowerShell Scripts
author:Huajun Chai and
Lingyun Ying and
Haixin Duan and
Daren Zha
9
3
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Invoke-Deobfuscation:
AST-Based and Semantics-Preserving
Deobfuscation for PowerShell Scripts
Huajun Chai1,2,3, Lingyun Ying3∗, Haixin Duan4,5 and Daren Zha1∗
1Institute of Information Engineering, Chinese Academy of Sciences {chaihuajun, zhadaren}@iie.ac.cn
2School of Cyber Security, University of Chinese Academy of Sciences
3QI-ANXIN Technology Research Institute PI:EMAIL
4BNRist & Institute for Network Science and Cyberspace, Tsinghua University
5Tsinghua University-QI-ANXIN Group JCNS PI:EMAIL
Abstract—In recent years, PowerShell has been widely used in
cyber attacks and malicious PowerShell scripts can easily evade
the detection of anti-virus software through obfuscation. Exist-
ing deobfuscation tools often fail to recover obfuscated scripts
correctly due to imprecise obfuscation identiﬁcation, improper
recovery and wrong replacement. In this paper, we propose
an AST-based and semantics-preserving deobfuscation approach,
Invoke-Deobfuscation. It utilizes recoverable nodes of Abstract
Syntax Tree to identify obfuscated pieces precisely, simulates the
recovery process through Invoke function and variable tracing,
and replaces obfuscated pieces in place to keep the original
semantics. We build a large evaluation dataset containing 39,713
wild PowerShell scripts. Compared with the state-of-the-art tools,
the experimental results show Invoke-Deobfuscation performs
most efﬁciently. It recovers much more key information than
others and signiﬁcantly reduces samples’ obfuscation score, on
average, by 46%. Moreover, 100% of Invoke-Deobfuscation’s
results have the same network behavior as the original scripts.
Index Terms—PowerShell, deobfuscation, abstract syntax tree
I. INTRODUCTION
PowerShell is a powerful tool on Windows and widely used
in cyber attacks. PowerShell consists of a command-line shell
and the associated scripting language. It provides access to
the inner core of a machine, including unrestricted access to
Windows APIs [1]. Therefore, more and more cyber criminals
have added PowerShell to their attack arsenals [2]–[4]. In
2020, PowerShell was reported as the most common attack
technique in the threat detection result of RedCanary [5].
Obfuscated PowerShell scripts can make malicious code
detection results unreliable and easily evade the detection of
anti-virus software [6], [7]. In recent years, many machine
learning and deep learning based models are proposed to detect
malicious scripts [8]–[11]. Since obfuscation can modify the
text features of scripts completely, these models cannot detect
the obfuscated malicious scripts correctly. There are many
public obfuscation tools, like Invoke-Obfuscation [12]. After
being obfuscated by these tools, malicious PowerShell scripts
∗ corresponding authors
can easily evade the detection of the state-of-the-art anti-virus
engines in VirusTotal [13]. Moreover, existing deobfuscation
tools perform poorly on the recovery of obfuscated scripts. For
instance, Windows Antimalware Scan Interface (AMSI) [14],
which is a popular deobfuscation interface integrated by many
anti-viruses, can deal with obfuscation scripts through catching
the scripts that are ultimately being supplied to the scripting
engine. It can still be bypassed easily by simple obfusca-
tion techniques, like string concatenating. Thus, deobfuscation
plays an important role in malicious script detection and
analysis. As Fig 1 shows, deobfuscation is the reverse process
of obfuscation, so analysts can get more useful information
from deobfuscation results for further analysis.
Fig. 1: An example of obfuscation and deobfuscation.
Existing Approaches. Deobfuscation is mainly divided into
three steps, i.e., identifying obfuscated script pieces, recover-
ing obfuscation, and reconstructing scripts. PSDEM [15], PS-
Decode [16], PowerDrive [17], and PowerDecode [18] design
a set of regular expressions to match obfuscated script pieces.
However, these regular expression based methods ignore the
syntax information of scripts so that they often identify wrong
script pieces with invalid syntax. Li et al. [19] use a machine
learning based classiﬁer to identify obfuscated script pieces.
Their classiﬁer uses the features of Abstract Syntax Tree
(AST) nodes to identify obfuscated pieces with valid syntax,
which heavily depends on the quality of the training data.
Predeﬁned recovery rule, overriding function and direct
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00039
1295
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
(New-Object Net.WebClient).downloadstring("https:/test.com/malware.txt")(&("{0}{1}{2}" -f 'New-O','bje','ct’) ("{0}{2}{1}”-f'Net’,'lient','.WebC')).("{1}{2}{0}"-f 'g’,'downlo’,'adstrin’).Invoke(("{6}{2}{3}{0}{1}{7}{5}{4}"-f 'com/m','a','es','t.’,'txt','ware.','https:/t','l'))obfuscatedeobfuscateIe`X (-jOiN ('echo h', 'ello') )IeX(-jOiNecho h(,ello))IeX(-Joinecho h(,ello))Invoke-Expression(-Joinecho h(,ello))脚本:Tokens:逆序处理结果:Invoke-Expression (-Join ('echo h', 'ello') )......execution are the three common deobfuscation methods. Pre-
deﬁned recovery rule [16]–[18] simulates the recovery process
according to the type of obfuscation, which is only effective
for a few speciﬁc obfuscation techniques and often gets wrong
results because of ignoring the syntax of the obfuscated script
pieces. Overriding function [16]–[18] is used to deal with the
obfuscated arguments of the speciﬁc functions, like Invoke-
Expression. It intercepts the target functions and catches their
run-time arguments that go through several passes of deobfus-
cation, which is limited. Direct execution [18], [19] is another
method to handle the obfuscated script pieces. Because most
obfuscated script pieces contain both obfuscated data and their
corresponding recovery code, by direct executing the recovery
code, the obfuscated data can be deobfuscated. However, due
to the lack of context, this method cannot correctly handle the
obfuscated pieces with variables.
All of the script reconstruction methods of existing deobfus-
cation tools are context-free so that their ﬁnal deobfuscation
scripts may be syntactically invalid or semantically inconsis-
tent. They replace all the same obfuscated pieces in the script
at once, which ignores the different contexts of these pieces
and may change the script’s semantics.
Challenges. In summary, there are three main challenges for
deobfuscating PowerShell scripts. 1. Precise Identiﬁcation: