title:Improved Non-Interactive Zero Knowledge with Applications to Post-Quantum
Signatures
author:Jonathan Katz and
Vladimir Kolesnikov and
Xiao Wang
Improved Non-Interactive Zero Knowledge with Applications to
Post-Quantum Signatures
Jonathan Katz
Vladimir Kolesnikov
Xiao Wang
University of Maryland
Georgia Tech
PI:EMAIL
PI:EMAIL
University of Maryland
PI:EMAIL
Abstract
Recent work, including ZKBoo, ZKB++, and Ligero, has developed eﬃcient non-interactive
zero-knowledge proofs of knowledge (NIZKPoKs) for Boolean circuits based on symmetric-key
primitives alone, using the “MPC-in-the-head” paradigm of Ishai et al. We show how to in-
stantiate this paradigm with MPC protocols in the preprocessing model; once optimized, this
results in an NIZKPoK with shorter proofs (and comparable computation) as in prior work for
circuits containing roughly 300–100,000 AND gates. In contrast to prior work, our NIZKPoK
also supports witness-independent preprocessing, which allows the prover to shift most of its
work to an oﬄine phase before the witness is known.
We apply our ideas to construct a signature scheme based only on symmetric-key primitives
(and hence with “post-quantum” security). The resulting scheme has shorter signatures than the
scheme built using ZKB++ (and comparable signing/veriﬁcation time), and is even competitive
with hash-based signature schemes.
To further highlight the ﬂexibility and power of our ideas, we also build eﬃcient ring and
group signatures based on symmetric-key primitives alone. To our knowledge, the resulting
schemes are the most eﬃcient constructions of these primitives that oﬀer post-quantum security.
1
Introduction
Zero-knowledge (ZK) proofs1 [29, 28] and non-interactive zero-knowledge (NIZK) proofs [11, 10, 22]
are among the most fundamental and versatile cryptographic primitives. In the present context,
(NI)ZK proofs of knowledge (PoKs) [29, 5, 20] allow a prover to convince a veriﬁer, who holds
a circuit C, that the prover knows an input (or “witness”) w for which C(w) = 1. Historically,
research on (NI)ZK proofs has followed two largely independent paths: some work gave asymptotic
improvements for generic proofs that can be used for arbitrary circuits (by reducing a circuit to
an NP-complete problem) but had poor concrete eﬃciency; other work explored eﬃcient proofs
tailored to speciﬁc, “algebraic” computations (e.g., group exponentiation).
More recently, researchers have merged these two directions and have developed (NI)ZKPoKs
for general circuits with good concrete eﬃciency. We highlight in particular recent constructions
of succinct non-interactive arguments of knowledge (SNARKs) [25, 40, 7, 19, 30], which can be
used to generate proofs for arbitrary circuits that are shorter than the input w itself.
(Prior
work showing ZK proofs with size sublinear in the input [35, 38] demonstrated feasibility, but was
concretely ineﬃcient.) Unfortunately, existing SNARKs suﬀer from several disadvantages. First,
1In this paper we do not distinguish between computational and information-theoretic soundness, and thus refer
to both arguments and proofs simply as “proofs.”
1
although they have excellent proof size and veriﬁcation time, the computational eﬃciency of the
prover is poor. Second, most constructions require public parameters generated and published
by some semi-trusted party. Security of existing SNARKs is based on non-standard and poorly
understood knowledge assumptions, and to some extent this is inherent [26]. Finally, most existing
constructions of SNARKs rely on bilinear maps and are thus insecure against quantum attackers.
(One exception is the recent work of Boneh et al. [13]. This scheme still has the other drawbacks,
and its concrete eﬃciency is unclear.)
In another recent line of work, researchers have shown how to use protocols for secure multi-
party computation (MPC) to obtain (NI)ZKPoKs with excellent concrete performance (even if
the communication is no longer sublinear in the circuit size |C|). Jawurek et al. [33] (see also
[24]) showed that two-party protocols based on garbled circuits could be used to construct eﬃcient
ZKPoKs; their approach requires interaction as well as the use of public-key primitives. Hazay
and Venkitasubramaniam [31] show a public-coin protocol based on garbled circuits that avoids
public-key primitives; its practical performance is likely worse than the approaches we discuss
next. Ishai et al. (IKOS) [32], using the so-called “MPC-in-the-head” approach, showed how to
use MPC protocols to obtain ZKPoKs whose security can be based entirely on symmetric-key
primitives; their approach yields public-coin protocols, and so can be made non-interactive via
the Fiat-Shamir transform [23]. Based on the IKOS approach, Giacomelli et al. [27] developed
and implemented a protocol called ZKBoo that supports eﬃcient NIZKPoKs for arbitrary circuits.
(Concurrently, Ranellucci et al. [43] proposed an NIZKPoK with similar asymptotic performance.)
Chase et al. [16] introduced ZKB++, which improves the performance of ZKBoo; they also showed
that ZKB++ could be used to construct an eﬃcient signature scheme based on symmetric-key
primitives alone. (A version of their scheme called Picnic [15] was submitted to the NIST post-
quantum standardization eﬀort.) Ames et al. [4] subsequently proposed Ligero, which oﬀers proofs
that are sublinear in |C| and so asymptotically outperforms ZKBoo and ZKB++; see further
discussion in Section 3.
1.1 Our Contributions
We show here a novel way to instantiate the “MPC-in-the-head” approach that leads to NIZKPoKs
with shorter proofs than (and comparable computation to) the best prior work [27, 43, 16, 4] for
“medium-size” circuits with roughly 300–100,000 gates. (Although we focus on Boolean circuits,
our ideas can be extended to arithmetic circuits as well.) As we show, this range covers many
“cryptographically interesting” circuits that incorporate hashing, block-cipher evaluations, etc.
Our main insight leading to improved performance is that the “MPC-in-the-head” paradigm
can be instantiated using MPC protocols designed in the preprocessing model. (A detailed overview
of our approach is given in Section 1.2.) This greatly increases the space of MPC protocols that
can be used, and in particular makes it competitive to use protocols designed for a large number of
parties (in contrast to prior work) and hence achieve better eﬃciency for the same level of security.
As in the work of Chase et al. [16], we may apply our NIZKPoK to construct an eﬃcient signa-
ture scheme based on symmetric-key primitives alone and thus oﬀering “post-quantum” security.
Our resulting scheme has signatures roughly 3.2× shorter than those of Chase et al.; in fact, we
can achieve signatures that are even shorter than some leading constructions of (stateless) hash-
based signature schemes [9]. We can also trade oﬀ signature length and computation, giving some
ﬂexibility in the design. We are currently working with the Picnic team to incorporate our work in
their submission to NIST.
2
As an additional application highlighting the power of our new NIZKPoK, we show how to use
it to build eﬃcient ring and group signatures based on symmetric-key primitives alone. (Similar
ideas, but using ZKB++, have been pursued in concurrent work [21, 12].) The main challenge here
is to build schemes in which signing corresponds to generating an NIZKPoK for a circuit that is
not too large; we defer additional details to Section 4. Our resulting schemes are, to the best of our
knowledge, the most eﬃcient constructions of ring/group signatures with post-quantum security.
1.2 Overview of Our Techniques
We provide the high-level intuition for our improved NIZKPoK. Here (and in Section 2.2) we
describe a 5-round, public-coin proof of knowledge that is honest-veriﬁer zero knowledge (HVZK).
In Section 2.4 we then show how it can be “compressed” to three rounds (while remaining public-
coin and HVZK). Either of these proofs can, in turn, be compiled to achieve zero knowledge against
a malicious veriﬁer using standard techniques. Alternatively—and of most interest to us—the 3-
round version can be made non-interactive in the random-oracle model using the Fiat-Shamir
transform [23].
Our starting point is the “MPC-in-the-head” paradigm of Ishai et al. [32] for constructing public-
coin HVZK proofs of knowledge based on protocols for secure computation. Roughly speaking, the
main idea is for the prover to simulate an execution of an n-party secure-computation protocol Π
that evaluates a given circuit C on the prover’s input w, and then for the prover to commit to the
views of the parties in the protocol. The veriﬁer chooses a random subset of those parties (we call
those parties “opened”), and the prover opens their corresponding views. The veriﬁer then checks
that the views of the opened parties are consistent with each other and with an honest execution
of Π that yields output 1.
As observed in prior work [27], eﬃciency considerations for the protocol Π used in the “MPC-
in-the-head” paradigm diﬀer from eﬃciency considerations for standard applications of MPC. For
example, in this context Π can freely rely on “oblivious-transfer channels” in addition to standard
point-to-point channels; in fact, Π can freely use any (deterministic) two-party functionality as a
building block, since such functionalities incur no additional cost for the prover to simulate them,
and consistency between pairs of opened parties can still be checked. We stress that this does not
immediately extend to using t-party functionalities for t > 2, since it may no longer be possible to
verify consistent execution unless all t parties using the functionality are opened.
Giacomelli et al. [27] and Chase et al. [16] gave concrete instantiations of the “MPC-in-the-
head” approach, and determined that using a 3-party protocol Π resulted in optimal performance
for the space of protocols they considered. Since the number of parties is small, the soundness of
the resulting HVZK proof is poor; a large number of parallel repetitions is thus needed to obtain
negligible soundness. (We discuss the work of Ames et al. [4] in Section 3.1.)
Our main conceptual insight is that the “MPC-in-the-head” approach can be modiﬁed so the
underlying n-party protocol Π can rely on any n-party functionality, as long as that functionality is
used during preprocessing. At ﬁrst glance, using an n-party functionality does not seem compatible
with the IKOS paradigm: the only way to verify that the functionality was run honestly is to
open all parties, but then privacy (which translates to zero-knowledge) cannot possibly hold. We
overcome this diﬃculty by having the veriﬁer issue its challenges in two phases, thus giving a
5-round HVZK proof. Roughly, the HVZK proof works as follows:
1. The prover commits to multiple (independent) executions of the preprocessing phase, where
3
each commitment also commits to the state of each party at the end of that phase.
2. The veriﬁer challenges the prover to open some of the executions of the preprocessing phase.
For each challenged execution, the prover opens the state of all parties, thus allowing the
veriﬁer to check those executions.
3. Using each of the remaining (unchallenged) executions of the preprocessing phase, the prover
simulates an execution of Π that evaluates C on input w. It then commits to each party’s
view in the protocol, including its state from the preprocessing phase.
4. As in the original IKOS approach, for each execution of Π the veriﬁer chooses a random subset
of the parties to open. Now, however, opening a party involves opening the commitment to
that party’s state following the preprocessing phase (from step 1) as well as its view in the
online execution of the protocol (from step 3). The veriﬁer then checks that all the opened
parties are consistent with each other and with an honest execution of Π (using the state
from the preprocessing phase) that yields output 1.
The fact that the n-party functionality is executed during a preprocessing phase is essential here;
the execution of that functionality is independent of the parties’ inputs, and so opening the views
of all parties from the preprocessing phase does not reveal any information about w.
As a consequence of being able to rely on preprocessing, the space of possible protocols Π we
can use is greatly expanded. In particular, we ﬁnd that we obtain much shorter proofs by using
an n-party protocol (secure against semi-honest corruption of all-but-one of the parties) with n as
high as 64. The ability to rely on preprocessing is critical here: the communication complexity
of traditional MPC protocols (that do not rely on preprocessing) with security against all-but-one
corruption is quadratic in the number of parties, but by relying on preprocessing and broadcast we
can obtain proof size independent of n.
Further optimizations and speciﬁc parameter choices for the above proof are discussed in the
remainder of the paper.
1.3 Outline of the Paper
In Section 2, we present the details of the MPC protocol Π we use, and describe more fully how to
convert it into a 3-round, public-coin HVZK proof whose security relies on symmetric-key primitives
alone. By applying the Fiat-Shamir transform to our 3-round proof, we obtain an NIZKPoK; the
resulting construction is analyzed and compared to prior work in Section 3.1, where we show that
it yields shorter proofs than prior work for a large range of circuit sizes. As in prior work, we
can use our NIZKPoK to build a signature scheme based only on symmetric-key primitives (and
hence oﬀering “post-quantum” security); performance of this scheme is discussed in Section 3.2.
We explore the applicability of our work to constructing “post-quantum” ring and group signatures
in Section 4.
2 HVZK Proofs of Knowledge
We construct our HVZK proofs by instantiating the “MPC-in-the-head” paradigm using an MPC
protocol Π designed in the preprocessing model. We ﬁrst describe the MPC protocol we rely on,
and then discuss how to build HVZK proofs based on it.
4
Notation. We denote the n-out-of-n (XOR-based) secret sharing of a bit x by [x]. Throughout,
κ and ρ denote computational and statistical security parameters, respectively. We let |C| denote
the number of AND gates in a circuit C.
2.1 A Suitable MPC protocol
In this section we describe an n-party protocol Π run by parties S1, . . . , Sn in the preprocessing
model, secure against semi-honest corruption of all-but-one of the parties. The protocol is inspired
by recent work of Wang et al. [48].
Recall that our goal is to use this protocol to instantiate the “MPC-in-the-head” approach
eﬃciently, and so in particular we are interested in minimizing the communication needed to verify
consistency and correct computation for any n − 1 parties chosen by the veriﬁer. As explained
in more detail in the next section, our protocol Π ends up having communication comparable
to the 3-party MPC protocols used by ZKBoo and ZKB++, but because we set n > 3 we are
able to achieve much lower soundness error per protocol execution and thus better communication
complexity overall for our resulting interactive proof system.
Our protocol Π maintains the invariant that, for each wire in the circuit, the parties hold an
n-out-of-n secret sharing of a random mask along with the (public) masked value of the wire.
Speciﬁcally, if we let zα denote the value of wire α in the circuit C when evaluated on input w,
then the parties will hold [λα] (for uniform λα ∈ {0, 1}) along with the value ˆzα
Preprocessing phase. In the preprocessing phase, shares are set up among the parties as follows.
For each wire α that is either an input wire of the circuit or the output wire of an AND gate, the
parties are given [λα], where λα ∈ {0, 1} is uniform. For an XOR gate with input wires α, β and
def= λα ⊕ λβ; note the parties can compute [λγ] locally. Finally, for each