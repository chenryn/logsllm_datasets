2
domain cardinality is the cardinality of the domain’s variable, to determine the
minimum number of bits necessary to represent the variable. For example, the
variable Travel from Figure 3 has a domain with only two values (“National” and
“Foreign”), then only one bit is necessary to represent the variable. The variable
Manager has a domain with three distinct values (“1 Line Manager “, “2 Line
Manager”, and “3 Line Manager”) and thus two bits are necessary to represent the
variable.
2) Create a mapping between each business variable value and a binary number,
starting with ‘0’. For example, the domain values of the variable Travel,
“National” and “Foreign”, can be mapped to ‘0’ and ‘1’, respectively. The domain
values of the variable Manager, “1 Line Manager “, “2 Line Manager”, and “3
Line Manager”, can be mapped to ‘00’, ‘01’, and ‘10’, respectively.
3) Map the symbols  and  to the Boolean domain {0, 1}. The symbol  is
mapped to ‘0’ and the symbol  is mapped to ‘1’.
4) Create a new table using the two mappings described previously. Figure 5
shows the result of mapping the table from Figure 3 to a truth table. Please note
that besides applying the mappings, we have made the following adjustment. We
have added, to the generated truth table, a set of new variables ‘a’, ‘b’, and ‘c’,
and functions ‘w’, ‘y’, and ‘z’. The variable and function symbols have been
added to simplify the handling of the truth table in the following steps. Also, we
have switched the position of the Manager and Travel columns (as recommended
in the previous section), making the truth table input values follow a standard
binary sequence (000, 001, 010, 011, …).
5) The functions of the truth table may be incompletely specified; that is, certain
input combinations will never occur. Therefore, the output may be undefined for
some of the input combinations. In our example, the input combinations ‘110’ and
‘111’ never occur. In this case, the process analyst needs to add the missing input
combinations to the truth table and represent the output values associated with
question marks in the table.
13
Check Form Check Form
a) Travel Manager Check form Sign Notify
National   
1 Line Manager
Foreign   
National   
2 Line Manager
Foreign   
National   
3 Line Manager
Foreign   
Check Form Check Form
b) Manager Travel Check form Sign Notify
a b c w(a,b,c) y(a,b,c) z(a,b,c)
0 true true true
0 0
1 true true true
0 true false false
0 1
1 true true true
0 true false false
1 0
1 true false true
0 true false false
Added 1 1
rows 1 true false false
Figure 5. Mapping a business case table to a truth table.
Applying one of the presented methods to the truth table b) from Figure 5, we
obtain the scheduling functions indicated in the scheduling table from Figure 6.
Variable Task Function
a,b,c Check Form w(a, b, c) = true
Sign y(a, b, c) = (¬a∧¬b) v (¬a∧b∧c)
Sign(1) y1(a, b, c) = ¬a∧¬b
Sign(2) y2(a, b, c) = ¬a∧b∧c
Notify z(a, b, c) = (¬a∧¬b) v (¬a∧b∧c) v (a∧¬b∧c)
Notify_m z1(a, b, c) = ¬a∧¬b
Notify_u z2(a, b, c) = ¬a∧b∧c
Notify_c z3(a, b, c) = a∧¬b∧c
Figure 6. Scheduling table constructed from the truth table
The table contains the task names and respective scheduling functions. On the left
side of the table, the column Variable indicates in which tasks the business variables
are asserted. For example, in Figure 6, the variable column indicates that the business
variables ‘ab’ and ‘c’ are asserted in the task Check Form. Since ‘ab’ has been
mapped to Manager and ‘c’ to Travel, this indicates that the task Check Form asserts
the business variables Manager and Travel.
When the scheduling functions are disjunctions of conjunctions, synonym tasks need
to be created. Synonym tasks have exactly the same behavior, execution, semantics,
and only their names differ. The number of disjunctions in a scheduling function sets
the number of synonyms to be created for a given task. Each of the disjunctions is
associated with a synonym task. For example, since the task Notify has a scheduling
function of the form (¬a∧¬b)∨(¬a∧b∧c)∨(a∧¬b∧c), three synonym tasks are created:
Notify_m, Notify_u, and Notify_c. The scheduling functions are decomposed into the
terms ¬a∧¬b, ¬a∧b∧c, and a∧¬b∧c, and each term is associated with one of the
synonym tasks.
14
3.3 Identify Basic Block Structures
Process languages can be characterized in terms of the fundamentals building blocks
they support to model the control-flow of processes. Several workflow patterns have
been already identified, analyzed and documented. Aalst, Barros et al. (2000) has
done the most comprehensive work in this field. They have identified 21 workflow
patterns addressing comprehensive workflow functionality. The expressiveness and
power of process languages can be evaluated according to the set of patterns
supported.
Business process management systems are process-centric, focusing on the
management of control-flow logic. Typical control-flow logic includes sequential,
AND-split, AND-join, OR-split, OR-join, XOR-split, and XOR-join primitives. The
sequential primitive models serial block structures. AND-split and AND-join
primitives model parallel block structures. While, OR-split, OR-join, XOR-split, and
XOR-join model conditional block structures.
The aim of this section is to use the scheduling table previously constructed to a)
identify sequential and parallel block structures associated with a process and b)
organize these basic blocks using conditional block structures.
Before continuing with the explanation of how to identify and construct basic
building blocks, let us illustrate a more complex process. Consider the business case
table shown in Figure 7. The table systematizes the various cases that may occur in a
Request Travel Authorization business process. After applying the rules from section
3.2 to the case table, we obtain the truth table shown also in Figure 7.
Check Form Sign
Check Book Book Send Notify Not
Role Signature Sign Reservation Reject Notify
Form Flight Hotel Tickets Manager Auhtorized
No          
Researcher
Yes          
No          
Manager
Yes          
No          
User Yes          
Check Form Sign
Check Book Book Send Notify Not
Role Signature Sign Reservation Reject Notify
Form Flight Hotel Tickets Manager Auhtorized
a b c q(a,b,c) r(a,b,c) s(a,b,c) t(a,b,c) u(a,b,c) v(a,b,c) w(a,b,c) x(a,b,c) y(a,b,c) z(a,b,c)
0 true true false false false false true true false true
0 0
1 true true false false true true true false false true
0 true false true true false false false false false true
0 1
1 true false true true false false false false false true
0 true false false false false false false false true true
1 0
1 true false false false false false false false true true
0 true false false false false false false false false true
1 1
1 true false false false false false false false false true
Figure 7. Business case table for the request travel authorization process
From the truth table, the scheduling functions represented in Figure 8 are extracted.
During the construction of the business case table, the tasks asserting business
variables were identified, as described in section 3.1. For example, the business
variables ‘Role’ and ‘Signature’ are asserted by the tasks Check Form and Sign,
respectively. This entails that the Boolean variables ‘a’ and ‘b’ are asserted by the
tasks Check Form and Sign, respectively.
15
Variable Task Function
a,b Check Form q(a,b,c) = true
c Sign r(a,b,c) = ¬a∧¬b
Book Flight s(a,b,c) = ¬a∧b
Book Hotel t(a,b,c) = ¬a∧b
Reservation v(a,b,c) = ¬a∧¬b∧c
Send Tickets u(a,b,c) = ¬a∧¬b∧c
Notify Manager w(a,b,c) = ¬a∧¬b
Reject x(a,b,c) = ¬a∧¬b∧¬c
Not Authorized t(a,b,c) = a∧¬b
Notify z(a,b,c) = true
Figure 8. Scheduling table for the Request Travel Authorization business process
3.3.1 Sequential and Parallel Building Blocks
The objective of this step is to identify sequential and parallel structures, and define a
partial order for the tasks associated with these structures. To complete this step, the
following activities are performed:
1) Create a set S of sets s, where each set s contains all the tasks that have the
i i
same scheduling function,
2) Label each set with its scheduling function,
3) For each set s, establish existing sequential and parallel building blocks, set a
i
partial order for the tasks
In the first activity, we produce a set S of scheduling sets s, where each set s
i i
contains all the tasks that have the same scheduling function. The idea is to create sets
of tasks with the following property: if a task of set s is scheduled at runtime, then all
i
of the tasks in s are also scheduled. In our running example, S = {s ...s }, where
i 1 6
s ={Check Form, Notify}, s ={Book Flight, Book Hotel}, s ={Sign, Notify
1 2 3
Manager}, s = {Reject}, s = {Reservation User, Send Tickets User}, and s = {Not
4 5 6
Authorized}.
The second activity associates each set with a scheduling function label. For
example, the set s is labeled with ‘1’ and the set s is labeled with ‘¬a∧b’.
1 2
Finally, the last activity establishes the sequential and parallel building blocks and
defines a partial order for each set s. Each set s can be organized using a sequential
i i
and/or a parallel basic building block structure. Conditional structures cannot occur
for the sets s since non-determinism has already been captured with the scheduling
i
functions (the set up of conditional blocks is described in the next section.)
The first two activities can be automated, while the third one requires human
intervention. Nevertheless, we believe that this last activity can be partially
automated. One possible approach would be to analyze data dependencies and
information dependencies between tasks. A data dependency exists between two tasks
if the input of a task depends on the output of the other. An information dependency
exists between two tasks if the content or presentation of one task logically follows
the content of another. For example, let us consider that a sequence of tasks is to be
used to display a business contract to a user. Since several sections of the document
need to be accepted individually, it has been decided to fragment the document into
parts. Each part has been associated with a task requiring human intervention. In this
simple case, information dependency exists between the tasks, since the tasks needs to
16
be ordered in such a way that the contract is read in a sequence that logically follows
the original document.
The establishment of sequential and parallel building blocks and partial orders may
require the use of null tasks (also known as dummy tasks). A null task does not have a
realization. Null tasks can be employed to modify a process to obtain structural
property (e.g., well-handled and sound) or to make possible the modeling of specific
business process procedures.
For our running example, an interview has led to the identification of the following
block structures and partial orders:
a) the task Notify is the last task to be executed in set s ;
1
b) the tasks in set s (Book Flight and Book Hotel) can be scheduled in parallel;
2
c) the tasks in set s are scheduled sequentially and the task Sign is scheduled
3
before the task Notify Manager;
d) since the set s has only one task, no partial order needs to be defined;
4
e) the tasks in set s are scheduled sequentially; the task Reservation User is
5
scheduled before the task Send Ticket User; and
f) since the set s has only one task, no partial order needs to be defined.
6
Figure 9 illustrates the result of applying the three activities of this step to the
scheduling table of Figure 8.
Figure 9. Parallel and sequential block structures and partial orders for the sets s
i
In each set, two types of transition can exist: permanent transitions (graphically
represented with a solid line) and potential transitions (graphically represented with a
dashed line)
Definition 1. Permanent transition. A permanent transition defines an order
between the executions of two tasks. Such a transition is formally defined as,
t →t , where t , t ∈ s and s ∈ S
b e b e i i
17
The semantics of this type of transition is the same as the one of traditional
workflow transitions. A permanent transition indicates that t is executed immediately
e
after t .
b
Definition 2. Potential transition. A potential transition defines an order between the
executions of two tasks. Such a transition is formally defined as,
t ft , where t , t ∈ s and s ∈ S
b e b e i i
The semantics of this type of transition indicate a precedence relationship between
two tasks. For example, if t ft then t is executed before t , but t does not need to be
b e b e e
executed immediately after t .
b
3.3.2 Conditional Structures
At this point, we have already identified the sequential and parallel building blocks.
The next step is to construct a task scheduling graph based on the scheduling sets. The
aim of the graph is to identify the conditional building blocks of a process and
determine how they control and organize the scheduling sets previously recognized