2 session.use_only_cookies 
108 
跨站点脚本漏洞很难从 web 应用程序中识别和移除。搜索缺陷的最佳实践是执行严格
的代码审计，并搜索用户通过 HTTP 输入的内容可能在任何系统 HTML 输出的地方。 
代码审计人员需要仔细审计： 
⚫ 
不受信任的数据不会像超文本标记语言或 JavaScript 那样在相同的超文本传输协议响
应中传输。 
⚫ 
当数据从服务器传输到客户端时，不可信的数据和 HTTP 响应必须被正确编码。不要假
设服务器上的数据是安全的。最佳做法是始终审计数据。 
⚫ 
当引入到 DOM 中时，不可信数据必须使用以下应用编程接口之一来引入: 
a) 
Node.textContent 
b) document.createTextNode 
c) 
Element.setAttribute(仅第二个参数) 
代码审计者也应该知道 HTML 标签(比如，，等。可以用来传输恶意的 JavaScript。 
网络应用程序漏洞自动工具/扫描仪可以帮助发现跨站点脚本漏洞。然而，他们无法找
到所有的 XSS 漏洞，因此手动代码审计很重要。手动代码审计也不能涵盖所有内容，但是
基于您的风险水平，实施深度防御方法始终是最好的方法。 
OWASP Zed 是一个易于使用的集成渗透测试工具，用于发现网络应用程序中的漏洞。
ZAP 提供了自动扫描仪以及一套工具，允许您手动查找安全漏洞。它充当一个网络代理，
109 
您可以将浏览器指向它，这样它就可以看到流向某个站点的流量，并允许您对应用程序进行
爬虫、扫描、模糊和攻击，还有其他开源和商用扫描仪。 
.NET ASPX 
⚫ 
关于 ASPX.网页代码审计应该审计以确保 web 配置文件不会关闭页面验证。 
⚫ 
.Net framework 4.0 不允许关闭页面验证。因此，如果程序员想转向页面验证，开发
人员需要回归到 2.0 验证模式。 
⚫ 
代码审计者需要确保页面验证在任何地方都不会被关闭，并且如果它被关闭，就要理解
为什么以及它给组织带来的风险。 
HTMLEncode 方法对指定的字符串应用 HTML 编码。在您的网络应用程序中使用表单
数据和其他客户端请求数据之前，这是一种很有用的快速编码方法。对数据进行编码会将潜
在的不安全字符转换为其对应的 HTML 编码。(MSDN，2013 年) 
不幸的是，HtmlEncode 或验证功能不足以处理 XSS，尤其是在用户输入需要添加到
JavaScript 代码、标签属性、XML 或 URL 中时。在这种情况下，一个好的选择是反 XSS
库。 
使用 Microsft’s Anti-XSS 库 
防止 XSS 的另一个帮助是使用反 XSS 库。 
JavaScript 和 JavaScript 框架 
如今，Javascript 和 Javascript 框架都广泛应用于 web 应用程序中。这阻碍了代码审
计者了解哪些框架在防止 XSS 缺陷方面做得很好，哪些框架做得不好。代码审计人员应该
审计一下，看看对于正在使用的框架是否存在任何 CVE，并审计 javascript 框架是否是最
新的稳定版本。 
111 
OWASP 参考 
OWASP XSS 预防手册 
OWASP XSS 过滤器规避备忘单 
基于 OWASP DOM 的 XSS 预防备忘单 
测试指南:关于数据验证测试的前 3 章 
OWASP 攻击代理项目 
外部参考 
•
https://www4.symantec.com/mktginfo/whitepaper/ISTR/21347932_GA-internet-securit
y-threat-report-volume-20-2015-social_v2.pdf 
• https://cwe.mitre.org/data/definitions/79.html 
• http://webblaze.cs.berkeley.edu/papers/scriptgard.pdf 
• http://html5sec.org 
• https://cve.mitre.org 
3.3.2 超文本标记语言属性编码 
HTML 属性可能包含不可信的数据。确定给页面上的任何 HTML 属性设定的值是否包
含来自信任边界之外的数据非常重要。 
112 
有些 HTML 属性被认为比其他属性更安全，如 align、alink、alt、bgcolor、border、
cellpadding、cellspacing、class、color、cols、colspan、coords、dir、face、height、
hspace、ismap、lang、marginheight、marginwidth、multiple、nohref、noresize、
noshade、nowrap、ref、rel、rev、row、rowspan、scroll、shape、span、summary、
tabin- dex、title、usemap、valign、value、vlink、vspace、width。 
当审计 XSS 的代码时，我们需要寻找 HTML 属性，例如下面的代码： 
攻击可能采用以下格式:  
“> 
什么是属性编码？ 
超文本标记语言属性编码取代了字符子集，这对于防止字符串破坏超文本标记语言元素
的属性很重要。 
这是因为属性的性质，属性包含的数据，以及浏览器或 HTML 解析器对属性的解析和
解释方式，与 HTML 文档及其元素的读取方式不同（选自 OWASP XSS Prevention Cheat 
Sheet）。 
除字母数字字符外，转义所有 ASCII 值小于 256 的字符，转为带& # xHH 格式化（或
命名实体，如果可用)。 
这条规则如此应用宽泛的原因是，开发人员经常不参考属性。正确参考的属性只能用相
应的引号转义。未加引号的属性可以用很多字符拆分，包括[空格] % * +，-/； ^和|。 
113 
属性编码可以以多种方式执行。两种资源是: 
1.HttpUtility.HtmlAttributeEncode 
http://msdn.microsoft.com/en-us/library/wdek0zbf.aspx 
2. OWASP Java 编码器项目 
https://www.owasp.org/index.php/OWASP_Java_Encoder_Project  
超文本标记语言实体（HTML entity） 
对于包含用户控制数据或来自不可信来源的数据的 HTML 元素，应进行上下文输出编
码审计。对于超文本标记语言实体，我们需要帮助确保执行超文本标记语言实体编码: 
包含不可信数据的 HTML 实体示例: 
HTML Body Context UNTRUSTED DATA   
...UNTRUSTED DATA   
 UNTRUSTED DATA  
需要超文本标记语言实体编码 
& --> &amp; 
  &lt; 
> --> &gt; 
“ --> &quot; 
‘ --> &#x27; 
建议审计不可信数据在实体对象中的位置。 
在源代码中搜索以下编码器可能有助于确定是否在应用程序中以一致的方式进行了
114 
HTML 实体编码。 
OWASP Java 编码器项目 
https://www.owasp.org/index.php/OWASP_Java_Encoder_Project  
” /> 
OWASP-ESAPI 
http://code.google.com/p/owasp-esapi-java/source/browse/trunk/src/main/java/org/
owasp/esapi/codecs/HTMLEntityCodec.java 
String safe = ESAPI.encoder().encodeForHTML( request.getParameter( “input” ) ); 
JavaScript 参数 
不可信数据如果放在 JavaScript 函数/代码中需要验证。无效数据可能会脱离数据上下
文，最终在用户浏览器的代码上下文中执行。 
值得回顾的开发点(汇)示例: 
115 
 attack: ‘);/* BAD STUFF */ 
潜在解决方案: 
OWASP HTML Sanitizer Project 
OWASP JSON Sanitizer Project 
ESAPI JavaScript 转义可以通过以下方式调用: 
String safe = ESAPI.encoder().encodeForJavaScript( request.getParameter( “input” ) ); 
请注意，有些 Javascript 函数永远不能安全地使用不受信任的数据作为输入——即使
JavaScript 已经转义！ 
例如(注意这是一个如何不使用 JavaScript 的例子): 
setInterval 
eval 
var txtField = “A1”; var txtUserInput = “’PI:EMAIL’;alert(1);”; eval( “document.forms[0].” + txtField + 
“.value =” + A1); 
116 
Jquery 
var txtAlertMsg = “Hello World: “; var txtUserInput = “testalert(1)”;  
$(“#message”).html(txtAlertMsg +”” + txtUserInput + “”); 
安全使用(使用文本，而不是 html) 
$(“#userInput”).text( “testalert(1)”);’)” >An error occurred  
Here we have a HTML attribute(onClick) and within a nested Javascript function call (showError). 
当浏览器处理这个时，它将首先对 onclick 属性的内容进行 HTML 解码。它会将结果
传递给 JavaScript 解释器。这里有两个上下文...HTML 和 Javascript (2 个浏览器解析器)。
我们需要以正确的顺序应用“分层”编码: 
1． JavaScript 编码。 
2． 超文本标记语言属性编码，使其“展开”正确，不容易受到攻击。 
’)))” >An error occurred .... 
117 
3.4 A4 不安全直接对象参考 
3.4.1 概述 
不安全的直接对象参考是网络应用程序的常见漏洞，它提供不同级别的访问或向用户公
开内部对象。可以公开的例子有数据库记录、网址、文件、账号，或者允许用户通过操纵网
址绕过网络安全控制。 
用户可以被授权访问网络应用程序，但不能访问特定的对象，如数据库记录、特定的文
件甚至是网址。潜在威胁可能来自 web 应用程序的授权用户，该用户提供了一个参数值，
该参数值直接指向用户无权访问的对象。如果应用程序没有验证访问该对象的用户，可能会
导致不安全的直接对象参考漏洞。 
3.4.2 描述 
这种风险问题的根源在于对服务器端对先前生成的数据的操作或更新。 
3.4.2.1 审计什么 
SQL 注入 
利用此漏洞进行攻击的一个例子可能是用户已经通过验证的 web 应用程序。现在，用
户希望通过另一个网页查看打开的发票。应用程序使用网址字符串传递帐号。应用程序在访
问帐户信息的 SQL 调用中使用未经验证的数据: 
String query = “SELECT * FROM accts WHERE account = ?”;  
PreparedStatement pstmt = connection.prepareStatement(query , ... ); 
pstmt.setString( 1, request.getParameter(“acct”)); 
118 
ResultSet results = pstmt.executeQuery(); 
攻击者只需在浏览器中修改“账号”参数，就可以发送他们想要的任何账号。如果应用
程序不执行用户验证，攻击者可以访问任何用户的帐户，而不仅仅是目标客户的帐户。 
HTTP 开机自检请求 
一位网络安全分析师(易卜拉欣·拉法特)发现雅虎有一个不安全的直接对象参考漏洞。建
议通过使用实时 HTTP 头来审计他可以看到的发布请求中的内容: 
prop=addressbook&fid=367443&crumb=Q4.PSLBfBe.&cid=1236547890&cmd= delete_comment 
其中参数“fid”是主题 id，“cid”是各自的注释 id。在测试时，他发现变化 fid 和 cid
参数值允许他从论坛中删除其他评论，这些评论实际上是由另一个用户发布的。 
接下来，他用同样的方法测试了帖子删除机制，发现了一个类似的漏洞。一个正常的删
除帖子的请求是: 
 POST cmd = delete _ item & cramb = SbWqLz.LDP0 
他发现，将 fid(主题 id)变量附加到 URL 后，他可以删除其他用户的相应帖子: 
POST cmd = delete _ item & cramb = SbWqLz.LDP0&fid=xxxxxxxx 
经过进一步分析，他发现攻击者可以修改 HTTP POST 请求中的参数，删除雅虎用户输
入的 150 万条记录。 
119 
间接参考映射 
此外，攻击者可能会发现内部命名约定，并推断操作功能的方法名称。例如，如果一个
应用程序有用于检索对象详细信息的网址，比如:攻击者将试图使用以下网址对对象进行修
改: 
xyz.com/Customers/View/2148102445 or xyz.com/Customers/ViewDetails.aspx?ID=2148102445 
此外，如果 web 应用程序返回一个列出部分目录路径或对象名称的对象，攻击者可以
修改这些内容。 
xyz.com/Customers/Update/2148102445 or xyz.com/Customers/Modify.aspx?ID=2148102445 
Or xyz.com/Customers/admin 