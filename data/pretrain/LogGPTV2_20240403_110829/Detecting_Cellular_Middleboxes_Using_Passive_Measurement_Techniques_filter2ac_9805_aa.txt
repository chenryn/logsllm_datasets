title:Detecting Cellular Middleboxes Using Passive Measurement Techniques
author:Utkarsh Goel and
Moritz Steiner and
Mike P. Wittie and
Martin Flack and
Stephen Ludin
Detecting Cellular Middleboxes Using Passive
Measurement Techniques
Utkarsh Goel1(B), Moritz Steiner2, Mike P. Wittie1, Martin Flack2,
and Stephen Ludin2
1 Department of Computer Science, Montana State University,
Bozeman, MT 59717, USA
PI:EMAIL, PI:EMAIL
2 Akamai Technologies, Inc., San Francisco, CA 94103, USA
{moritz,mflack,sludin}@akamai.com
Abstract. The Transmission Control Protocol (TCP) follows the end-
to-end principle – when a client establishes a connection with a server,
the connection is only shared by two physical machines, the client and
the server. In current cellular networks, a myriad of middleboxes dis-
regard the end-to-end principle to enable network operators to deploy
services such as content caching, compression, and protocol optimiza-
tion to improve end-to-end network performance. If server operators
remain unaware of such middleboxes, TCP connections may not be opti-
mized speciﬁcally for middleboxes and instead are optimized for mobile
devices. We argue that without costly active measurement, it remains
challenging for server operators to reliably detect the presence of mid-
dleboxes that split TCP connections. In this paper, we present three tech-
niques (based on latency, loss, and characteristics of TCP SYN packets)
for server operators to passively identify Connection Terminating
Proxies (CTPs) in cellular networks, with the goal to optimize
TCP connections for faster content delivery. Using TCP and HTTP logs
recorded by Content Delivery Network (CDN) servers, we demonstrate
that our passive techniques are as reliable and accurate as active tech-
niques in detecting CTPs deployed in cellular networks worldwide.
Keywords: Cellular · Middleboxes · Split TCP · Network measurement
1 Introduction
The Transmission Control Protocol (TCP), Hyper Text Transport Proto-
col (HTTP) and secure HTTP (HTTPS) were originally designed with the
assumption that clients communicate over end-to-end connections with servers.
However, given the diﬀerent types of networks involved in an end-to-end connec-
tion between cellular clients and servers (such as the radio network, the cellular
backbone, and the public Internet), optimizing communication for each of these
networks independently improves the overall performance of the end-to-end con-
nections between clients and servers [5,10,11]. One of the techniques used by
c(cid:2) Springer International Publishing Switzerland 2016
T. Karagiannis and X. Dimitropoulos (Eds.): PAM 2016, LNCS 9631, pp. 95–107, 2016.
DOI: 10.1007/978-3-319-30505-9 8
96
U. Goel et al.
cellular carriers to improve the communication performance in their networks is
to deploy Connection Terminating Proxies (CTPs) that split TCP connections
between clients and servers [9,13]. CTPs allow cellular carriers to speed up TCP
transfers between devices and the cellular gateways to the Internet through TCP
optimization, content caching, and bandwidth throttling.
Content Distribution Networks (CDNs), cloud providers, or other server
providers on the Internet are mostly unaware of speciﬁc CTPs deployed by indi-
vidual cellular carriers. As a result, servers may not optimize their connections
for CTPs, but optimize connections for the mobile device instead. We believe
that if server providers are made aware of the presence of CTPs, TCP conﬁgu-
rations could be ﬁne-tuned to improve content delivery to the middlebox and to
the end-user [7]. However, without expensive active network measurements on
mobile devices, it remains challenging for server operators to reliably detect the
presence of CTPs and optimize connections accordingly [17].
In this study, we propose three techniques to passively detect the presence
of CTPs in cellular networks, using TCP and HTTP logs recorded by Akamai’s
geographically distributed CDN servers. Our ﬁrst technique compares latency
estimated by clients and servers for TCP connections. The second technique
compares the packet loss experienced by CDN servers for HTTP and HTTPS
sessions. Our third technique analyzes characteristics of TCP SYN packets for
connections to ports 80 (HTTP) and 443 (HTTPS). Although our evaluation is
based on Akamai server logs, we argue that our techniques are not limited to
CDN providers and also apply to other types of servers. The major contributions
of this work are as follows:
(cid:129) We perform the ﬁrst large scale measurement study to passively detect the
presence of CTPs deployed in cellular networks worldwide. Our study is based
on data collected by Akamai CDN servers during January-July 2015. Our
current dataset contains performance metrics from over a total of 14 million
TCP connections from clients in diﬀerent cellular networks.
(cid:129) We propose three techniques for server operators to passively detect the pres-
ence of CTPs from TCP and HTTP server logs. Results from our measure-
ments indicate that the use of CTPs is very popular among cellular carriers
worldwide. In fact, carriers employ CTPs for splitting HTTPS sessions, in
addition to splitting HTTP sessions.
Table 1. Comparison of results from our passive techniques with previous work [17]
that uses active experiments, for cellular networks in the US.
Detecting Cellular Middleboxes Using Passive Measurement Techniques
97
(cid:129) Using the collected data, we demonstrate that our techniques are reliable
in detecting CTPs deployed in cellular networks across several countries. In
Table 1, we compare the results of our passive techniques with the Delayed
Handshake (DH) active measurement technique of CTP detection for cellular
carriers in the US [17]. The tickmarks in the table indicate the presence of
CTPs. We show that despite the fact that our passive measurement techniques
do not generate probing traﬃc, they correctly detect CTPs as detected by
active experiments in DH [17].
The rest of the paper is organized as follows. In Sect. 2, we discuss related
work on detecting cellular middleboxes. In Sect. 3, we present our methodology.
In Sects. 4, 5, and 6, we discuss how server operators could detect CTPs by using
latency estimated by clients and servers, packet loss observed on the server-side,
and inspecting TCP SYN packets, respectively. In Sect. 7, we oﬀer discussion of
our results. Finally, we conclude in Sect. 8.
2 Related Work
Several studies have investigated the characteristics, performance beneﬁts and
deployment locations of CTPs in cellular networks. Weaver et al. and Xu et al.
investigated the characteristics of transparent Web proxies in cellular networks
using active experiments on mobile devices [16,17]. Other studies looked at the
performance beneﬁts of TCP splitting proxies to improve Web communications
in cellular networks [6,9,13]. Ehsan et al. measured the performance gains of
CTPs for Web caching and packet loss mitigation in satellite networks [8].
A study by Wang et al. characterized implications of cellular middleboxes on
improving network security, device power consumption and application perfor-
mance [15]. Our work, in contrast to these studies, focuses on detecting CTPs
using passive measurement techniques, instead of active experiments.
3 Data Collection Methodology
To verify that our latency-based technique reliably detects CTPs in cellular net-
works worldwide, we used the webpage timing data collected by Akamai’s Real
User Monitoring system (RUM) [3], which leverages the Navigation Timing API
on the client browser [1]. The data includes the time to establish TCP connec-
tions for both HTTP and HTTPS sessions. Akamai’s RUM also records TCP
latency estimated by CDN servers for HTTP and HTTPS session. To investigate
whether our packet loss-based technique reliably detects CTPs, we used TCP
logs recorded by CDN servers deployed worldwide and extracted the number
of packets retransmitted by the server for both HTTP and HTTPS sessions.
Finally, to investigate whether our TCP SYN-based technique detect CTPs, we
collected TCP-dumps on CDN servers for several hours and captured SYN packets
for connection requests to port 80 (HTTP) and 443 (HTTPS).
98
U. Goel et al.
4 Detecting CTPs from Client and Server-Side Latency
When a CTP splits an end-to-end connection between clients and CDN servers,
the latency estimated by clients should be higher than latency estimated by CDN
servers. This is because the latency observed by the client will include the radio
and cellular backbone latency (∼tens of milliseconds [2]). Whereas the latency
estimated by CDN servers would include the latency on the wired public Internet
and is likely to be low (∼5 ms), as CDNs have wide deployment of servers inside
many cellular networks.
In this section we analyze the TCP latency estimated by clients and servers
for TCP connections (both HTTP and HTTPS sessions) using two diﬀerent
methods. First, we compare the latency from both client and server endpoints
to identify networks where the latency experienced by clients is signiﬁcantly
higher than latency experienced by servers – which indicates that a CTP is being
used for a connection. Second, we compare the latency for HTTP and HTTPS
sessions only from the server-side to identify networks where servers experience
signiﬁcantly diﬀerent latencies for HTTP and HTTPS sessions – which indicates
that a CTP is used for one type of connections.
Table 2. Distribution of TCP latency estimated by clients (Client RTT) and
servers (Server RTT) for IPv4-based cellular networks in North America.
Detecting Cellular Middleboxes Using Passive Measurement Techniques
99
In Table 2, we show the distribution (25th, 50th, and 75th percentile) of
network latency measured by the client (Client RTT) and by the server (Server
RTT) for major cellular networks in North America. The column CC represents
the country code of each network. Column Hits represents the number of unique
TCP connections behind latency distributions. The column Proxy? indicates
whether our techniques detect CTPs for a given cellular carrier. For example,
for AT&T network in the US, the Client RTT for HTTP sessions is almost 10
times the Server RTT, which indicates that servers are communicating with a
device only 4 ms away. Since 4 ms is too low for an end-to-end connection over
a cellular network [2], we argue that servers communicate with CTPs deployed
in AT&T network (as indicated by (cid:2) in the Proxy column). In the case of
HTTPS sessions in AT&T, we observe that Client RTT and Server RTT are
similar, which indicates that there is no CTP for HTTPS sessions in the AT&T
network (as indicated by X in Proxy column). Further, when we look at only the
Server RTT for HTTP and HTTPS sessions, we see that servers experience
signiﬁcantly higher latency for HTTPS sessions, which further conﬁrms that
AT&T does not employ CTPs for splitting HTTPS sessions. Tables 3, 4, and 5
show the application of the latency technique to detect CTPs in cellular networks
in Asia, Europe, and Oceania and South America, respectively.
Table 3. Distribution of TCP latency estimated by clients (Client RTT) and
servers (Server RTT) for cellular networks in Asia.
100
U. Goel et al.
While employing our latency-based techniques to detect CTPs in cellular
networks worldwide, we made ﬁve observations on the behavior of CTPs. First,
we observe that for p25 of HTTP sessions in T-Mobile USA network, the latency
experienced by clients and servers is signiﬁcantly diﬀerent, which indicates a
presence of CTPs HTTP sessions in T-Mobile network. However, for p50 of the
HTTP sessions, the two latencies are similar – indicating no presence of CTPs
for HTTP sessions in T-Mobile network. To investigate this surprising behavior
of T-Mobile network, we classiﬁed our data based on server locations and domain
names. Table 6 shows the distribution Client RTT and Server RTT for HTTP
sessions for diﬀerent domain names across diﬀerent locations in the US. We
observe that for clients connecting to servers in CA and VA, CTPs are used on
per domain basis. For example, the HTTP latency estimated by servers in CA
to download webpages associated with a clothing website is signiﬁcantly lower
than latency estimated for a ticketing website. We see similar trends at other
locations in the US and across several domain names. Next, we observe that
T-Mobile employs CTPs for HTTP sessions only at a few locations in the US.
For example, in Table 6 the latency experienced by clients connecting to servers
in TX indicate that T-Mobile does not use a CTP for terminating HTTP sessions
for any domain name. Thus we argue that T-Mobile’s deployment of CTPs in
the US is diﬀerent across diﬀerent locations and domain names. Based on these
observations, we label the Proxy? column in Table 2 as ‘Limited’.
The second observation we make is that cellular networks in the US use CTPs
for TCP connections over their IPv4 networks, but not over their IPv6 networks.
Since we did not observe statistically signiﬁcant IPv6 traﬃc from cellular carriers
deployed outside of the US, we restrict this observation to cellular carriers in the
US only. In Table 7, we show the distribution of TCP latency for IPv6 networks
deployed by major US carriers, estimated by clients and CDN servers. We observe
that clients in Verizon Wireless connecting to CDNs over IPv6 network experi-
ence latency similar to that estimated at the server for HTTP sessions. However,
from Table 2, we observe that Verizon clients connecting to CDN servers over
its IPv4 network experience much higher latency than experienced by the CDN
servers, for HTTP sessions – indicating the presence of CTP for HTTP sessions
in its IPv4 network. Therefore, we argue that Verizon employs CTPs for HTTP
sessions in its IPv4 network and not in its IPv6 network.
The third observation we make is that some networks use CTPs to split
HTTPS sessions. Using our measurement data, we identiﬁed a cellular carrier
in France that employs CTPs to split HTTPS sessions. In Table 4, we show
that for France Telecom, the Server RTT for HTTPS sessions is signiﬁcantly
lower than the Client RTT, therefore we believe that France Telecom uses
CTPs to split HTTPS sessions. Telefonica in Spain is another cellular carrier
for which we observe that CTPs split HTTPS sessions, as the latency estimated
by CDN servers is lower than latency estimated by clients. Further, Telefonica’s
recent design of mcTLS protocol indicates that ISPs work towards deploying
CTPs for HTTPS sessions [12], likely to support content caching and connection
optimization for secure connections [14].
Detecting Cellular Middleboxes Using Passive Measurement Techniques
101
Table 4. Distribution of TCP latency estimated by clients (Client RTT) and
servers (Server RTT) for cellular networks in the Europe.
102
U. Goel et al.
Table 5. Distribution of TCP latency estimated by clients (Client RTT) and
servers (Server RTT) for cellular networks in Oceania and South America.
Table 6. Distribution of HTTP latency estimated by clients (Client RTT) and
servers (Server RTT) for T-Mobile across diﬀerent domains & locations.
The fourth observation we make is that for some carriers, the p75 of Server
RTT is similar to p25 of Client RTT, when the p25 and p50 of Server RTT
indicate the presence of CTPs in that carrier. For example, the p75 of Server
RTT for HTTP sessions in Etisalat network in Table 3, suggests that CTPs may
not be used for splitting all HTTP sessions. We speculate that when CTPs get
overloaded, client requests are likely not sent to CTPs and instead sent directly to
servers. As a result servers occasionally experience (unproxied) latency of end-
to-end connections to mobile devices. To deal with such occasional instances,
TCP stacks of servers should interpret such connections as direct connections to
mobile devices.
Finally, the ﬁfth observation we make is that for a few cellular carriers the
Server RTT is either higher or lower than Client RTT by at least 80 ms for
p75. Speciﬁcally, if we observe Server RTT to be higher than Client RTT, we
speculate that CTPs are deployed near the gateway and Internet egress points are
Detecting Cellular Middleboxes Using Passive Measurement Techniques
103
Table 7. Distribution of TCP latency estimated by clients (Client RTT) and
servers (Server RTT) for IPv6 cellular networks in North America.
far from the gateway. If we observe Server RTT to be lower than Client RTT,
we speculate that CTPs are near to both egress points and gateways but clients
connect to gateways far in the network. For such cellular carriers we place a ‘-’
in the Proxy? column in Tables 2, 3, 4, and 5. We argue that for such cellular
carriers, passive techniques in the following sections may be used to detect the
presence of CTPs.
5 Detecting CTPs from Packet Loss on the Server-Side
In previous section, we discussed how server operators could use latencies mea-
surements by clients and servers to detect the presence of CTPs. In this section,
we are interested in verifying another technique, based on packet loss, to pas-
sively detect CTPs across cellular networks worldwide using measurement data
collected by Akamai CDN servers. Since we observe TCP latency estimated by
CDN servers to CTPs is signiﬁcantly low, we argue that CTPs and CDN servers
are usually deployed within the same or nearby datacenters. Therefore, when a
CTP is employed to split connections, the number of packets retransmitted by
servers should be lower than packets retransmitted for connections where CTPs
are not used. Following this assumption, in Fig. 1, we show the distribution of
packet loss observed during our tests for thousands of HTTP and HTTPS ses-
sions. Our ﬁrst goal is to identify networks where packet loss observed by CDN
servers is higher for one type of connections and not others. We also aim to
determine whether results from using packet loss correlate with our CTP detec-
tion in the previous section. Due to space limitations, we show distribution of
packet loss for only a few cellular carriers in North America and Europe.
In Fig. 1(a), we show the distribution of packet loss observed for HTTP and
HTTPS sessions in four major cellular carriers in the US. Speciﬁcally, in the case
104
U. Goel et al.
0
1
.
0
1
.
0
1
.
s
n
o
i
t
c
e
n
n
o
C
P
C
T
9
0
.
8
0
.
7
0
.
f
o
F
D
C
0
10
6
0
.
0
.
1
HTTP - AT&T
HTTPS - AT&T
HTTP - Verizon
HTTPS - Verizon
HTTP - Sprint
HTTPS - Sprint
HTTP - T-Mobile
HTTPS - T-Mobile
70
60
30
40
20
50
Packet Loss (%)
(a) USA
s
n
o
i
t
c
e
n
n
o
C
P
C
T
9
.
0
8
0
.
7
0
.
f
o
F
D
C
6
0
.
0