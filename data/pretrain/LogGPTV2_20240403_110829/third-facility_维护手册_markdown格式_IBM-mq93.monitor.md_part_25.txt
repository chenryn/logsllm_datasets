Create a subscription to a set of resources and display the generated activity trace by running
amqsact.
Display mode
By default, amqsact in display mode processes messages on SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE.
You can override this behavior by specifying a queue name or topic string. Activity trace must be enabled
by using one of the methods that are described in Collecting application activity trace information.
You can control the trace period that is displayed and specify whether the activity trace messages are
removed or retained after display. In display mode, amqsact takes the following arguments:
IBM MQ Monitoring and performance 215
-m queue_manager_name
Required. Specify the queue manager that trace messages are collected for.
-q queue_name
Display only trace messages that are related to the named queue.
-t topic_string
Display only trace messages that are related to the named topic.
-b
Specify that trace messages are retained after display.
-v
Display trace messages in verbose mode.
-d depth
The number of messages to display.
-w timeout
Specify a timeout. If no trace messages appear in that period, amqsact exits.
-s start_time
Use this argument with the -e argument to specify a time period. Trace messages from the specified
time period are displayed.
-e end_time
Use this argument with the -s argument to specify a time period. Trace messages from the specified
time period are displayed.
For example, the following command displays activity trace messages that are held on
SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE, and deletes the messages after display:
amqsact -m QMGR1
The following command displays activity trace messages on the specified queue, SUB.QUEUE, and
deletes the messages after display. Messages continue to be displayed until a period of 30 seconds
with no new messages elapses. This command can, for example, be used with a subscription to an activity
trace system topic string.
amqact -m QMGR1 -q SUB.QUEUE.1 -w 30
The following command displays in verbose format any activity trace data that is currently held on the
SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE that occurred in the 20-minute period specified. Messages will
remain on the queue after display.
amqsact -m QMGR1 -b -v -s 2014-12-31 23.50.00 -e 2015-01-01 00.10.00
Dynamic mode
You enable dynamic mode by specifying an application name, a channel name, or a connection identifier
as an argument to amqsact. You can use wildcard characters in the name. In dynamic mode, activity
trace data is enabled at the start of the sample by use of a non-durable subscription to a system topic.
Collecting activity trace data stops when amqsact stops. You must specify a timeout for amqsact in
dynamic mode. You can run multiple copies of amqsact concurrently, and each instance receives a copy
of any activity trace data. In dynamic mode, amqsact takes the following arguments:
-m queue_manager_name
Required. Specify the queue manager that trace messages are collected for.
-w timeout
Required. Specify a timeout. If no trace messages appear in that period, amqsact exits.
-a application_name
Specify an application to collect messages for.
216 Monitoring and Performance for IBM MQ
-c channel_name
Specify a channel to collect messages for.
-i connection_id
Specify a connection to collect messages for.
-v
Display trace messages in verbose mode.
For example, the following command generates and displays activity trace messages for any connections
that are made by applications that are named "amqsget.exe". After 30 seconds of inactivity, the amqsact
program ends, and no new activity trace data is generated.
amqsactc -m QMGR1 -w 30 -a amqsget.exe
The following command generates and displays activity trace messages for any connections that are
made by applications that start with the text "amqs". After 30 seconds of inactivity, the amqsact program
ends, and no new activity trace data is generated.
amqsactc -m QMGR1 -w 30 -a amqs*
The following command generates and displays activity trace messages for any activity on the
QMGR1.TO.QMGR2 channel. After 10 seconds of inactivity, the amqsact program ends, and no new
activity trace data is generated.
amqsactc -m QMGR1 -w 10 -c QMGR1.TO.QMGR2
The following command generates and displays activity trace messages for any activity on any channels.
After 10 seconds of inactivity, the amqsact program ends, and no new activity trace data is generated.
amqsactc -m QMGR1 -w 10 -c #
The following command generates and displays verbose activity trace messages for any activity on
the existing IBM MQ connection that has a CONN of "6B576B5420000701", and an EXTCONN of
"414D5143514D47523120202020202020". After a minute of inactivity, the amqsact program ends,
and no new activity trace data is generated.
amqsactc -m QMGR1 -w 60 -i 414D5143514D475231202020202020206B576B5420000701 -v
Configuring trace levels using mqat.ini
You configure trace levels for a queue manager by setting values for the AllActivityTrace stanza of the
mqat.ini configuration file.
You can set the following values for the AllActivityTrace stanza:
ActivityInterval
Time interval in seconds between trace messages. Activity trace does not use a timer thread, so the
trace message is not written at the exact instant that the time elapses, it is written when the first MQI
operation is executed after the time interval elapses. If this value is 0, the trace message is written
when the connection disconnects (or when the activity count is reached). Defaults to 1.
ActivityCount
Number of MQI operations between trace messages. If this value is 0, the trace message is written
when the connection disconnects (or when the activity interval elapses). Defaults to 100.
TraceLevel
Amount of parameter detail that is traced for each operation. The description of individual operations
details which parameters are included for each trace level. Set to LOW, MEDIUM, or HIGH. Defaults to
MEDIUM.
IBM MQ Monitoring and performance 217
TraceMessageData
Amount of message data that is traced in bytes for MQGET, MQPUT, MQPUT1, and Callback
operations. Defaults to 0.
StopOnGetTraceMsg
Can be set to ON or OFF. Defaults to ON.
SubscriptionDelivery
Can be set to BATCHED or IMMEDIATE. Determines whether the ActivityInterval and ActivityCount
parameters are to be used when one or more activity trace subscriptions are present. Setting this
parameter to IMMEDIATE results in the ActivityInterval and ActivityCount values being overridden
with effective values of 1 when the trace data has a matching subscription. Each activity trace record
is not batched with other records from the same connection and instead delivered to the subscription
immediately with no delay. The IMMEDIATE setting increases the performance overhead of collecting
activity trace data. The default setting is BATCHED.
Application activity trace message reference
Use this page to obtain an overview of the format of application activity trace messages and the
information returned in these messages
Application activity trace messages are standard IBM MQ messages containing a message descriptor and
message data. The message data contains information about the MQI operations performed by IBM MQ
applications, or information about the activities occurring in an IBM MQ system.
Message descriptor
• An MQMD structure
Message data
• A PCF header (MQCFH)
• Application activity trace message data that is always returned
• Application activity trace message data that is operation-specific
Application activity trace message MQMD (message descriptor)
Use this page to understand the differences between the message descriptor of application activity trace
messages and the message descriptor of event messages
The parameters and values in the message descriptor of application activity trace message are the same
as in the message descriptor of event messages, with the following exception:
Format
Description: Format name of message data.
Value: MQFMT_ADMIN
Admin message.
CorrelId
Description: Correlation identifier.
Value: Initialized with the ConnectionId of the application
MQCFH (PCF Header)
Use this page to view the PCF values contained by the MQCFH structure for an activity trace message
For an activity trace message, the MQCFH structure contains the following values:
Type
Description: Structure type that identifies the content of the message.
218 Monitoring and Performance for IBM MQ
Data type: MQLONG.
Value: MQCFT_APP_ACTIVITY
StrucLength
Description: Length in bytes of MQCFH structure.
Data type: MQLONG.
Value: MQCFH_STRUC_LENGTH
Version
Description: Structure version number.
Data type: MQLONG.
Values: MQCFH_VERSION_3
Command
Description: Command identifier. This field identifies the category of the message.
Data type: MQLONG.
Values: MQCMD_ACTIVITY_TRACE
MsgSeqNumber
Description: Message sequence number. This field is the sequence number of the message
within a group of related messages.
Data type: MQLONG.
Values: 1
Control
Description: Control options.
Data type: MQLONG.
Values: MQCFC_LAST.
CompCode
Description: Completion code.
Data type: MQLONG.
Values: MQCC_OK.
Reason
Description: Reason code qualifying completion code.
Data type: MQLONG.
Values: MQRC_NONE.
ParameterCount
Description: Count of parameter structures. This field is the number of parameter structures
that follow the MQCFH structure. A group structure (MQCFGR), and its included
parameter structures, are counted as one structure only.
IBM MQ Monitoring and performance 219
Data type: MQLONG.
Values: 1 or greater
Application activity trace message data
Immediately following the PCF header is a set of parameters describing the time interval for the activity
trace. These parameters also indicate the sequence of messages in the event of messages being written.
The order and number of fields following the header is not guaranteed, allowing additional information to
be added in the future.
Message name: Activity trace message.
System queue: SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE.
QueueManager
Description: The name of the queue manager.
Identifier: MQCA_Q_MGR_NAME
Data type: MQCFST
Maximum length: MQ_Q_MGR_NAME_LENGTH
QSGName
Description: The name of the queue sharing group that the Queue Manager is a member of
(z/OS only).
Identifier: MQCA_QSG_NAME
Data type: MQCFST
Maximum length: MQ_Q_MGR_NAME_LENGTH
HostName
Description: The host name of the machine the Queue Manager is running on.
Identifier: MQCACF_HOST_NAME
Data type: MQCFST
IntervalStartDate
Description: The date of the start of the monitoring period.
Identifier: MQCAMO_START_DATE
Data type: MQCFST
Maximum length: MQ_DATE_LENGTH
IntervalStartTime
Description: The time of the start of the monitoring period.
Identifier: MQCAMO_START_TIME
Data type: MQCFST
Maximum length: MQ_TIME_LENGTH
220 Monitoring and Performance for IBM MQ
IntervalEndDate
Description: The date of the end of the monitoring period.
Identifier: MQCAMO_END_DATE
Data type: MQCFST
Maximum length: MQ_DATE_LENGTH
IntervalEndTime
Description: The time of the end of the monitoring period.
Identifier: MQCAMO_END_TIME
Data type: MQCFST
Maximum length: MQ_TIME_LENGTH
CommandLevel
Description: The IBM MQ command level.
Identifier: MQIA_COMMAND_LEVEL
Data type: MQCFIN
SeqNumber
Description: The sequence number normally zero. This value is incremented for each
subsequent record for long running connections.
Identifier: MQIACF_SEQUENCE_NUMBER
Data type: MQCFIN
ApplicationName
Description: The name of the application (program name).
Identifier: MQCACF_APPL_NAME
Data type: MQCFST
Maximum length: MQ_APPL_NAME_LENGTH
ApplClass
Description: Type of application that performed the activity. Possible values: MQAT_*
Identifier: MQIA_APPL_TYPE
Data type: MQCFIN
ApplicationPid
Description: The operating system Process ID of the application.
Identifier: MQIACF_PROCESS_ID
Data type: MQCFIN
UserId
Description: The user identifier context of the application.
Identifier: MQCACF_USER_IDENTIFIER
IBM MQ Monitoring and performance 221
Data type: MQCFST
Maximum length: MQ_USER_ID_LENGTH
APICallerType
Description: The type of the application. Possible values: MQXACT_EXTERNAL or
MQXACT_INTERNAL.
Identifier: MQIACF_API_CALLER_TYPE
Data type: MQCFIN
Environment
Description: The runtime environment of the application. Possible values: MQXE_*
Identifier: MQIACF_API_ENVIRONMENT
Data type: MQCFIN
ChannelName
Description: The channel name associated with the connection. This parameter is only
returned when the value of the Environment parameter is either MQXE_MCA
or MQXE_MCA_SVRCONN.
Identifier: MQCACH_CHANNEL_NAME
Data type: MQCFST
Maximum length: MQ_CHANNEL_NAME_LENGTH
ConnectionName
Description: The network connection name associated with the connection. This parameter
is only returned when the value of the Environment parameter is either
MQXE_MCA or MQXE_MCA_SVRCONN.
Identifier: MQCACH_CONNECTION_NAME
Data type: MQCFST
Maximum length: MQ_CONN_NAME_LENGTH
ChannelType
Description: The type of channel associated with the connection. This parameter is only
returned when the value of the Environment parameter is either MQXE_MCA or
MQXE_MCA_SVRCONN. Possible values: MQCHT_*
Identifier: MQIACH_CHANNEL_TYPE
Data type: MQCFIN
RemoteProduct
Description: The remote product identifier associated with the connection. This parameter
is only returned when the value of the Environment parameter is either
MQXE_MCA or MQXE_MCA_SVRCONN.
Identifier: MQCACH_REMOTE_PRODUCT
Data type: MQCFST
Maximum length: MQ_REMOTE_PRODUCT_LENGTH
222 Monitoring and Performance for IBM MQ
RemoteVersion
Description: The remote product version associated with the connection. This parameter
is only returned when the value of the Environment parameter is either
MQXE_MCA or MQXE_MCA_SVRCONN.
Identifier: MQCACH_REMOTE_VERSION
Data type: MQCFST
Maximum length: MQ_REMOTE_VERSION_LENGTH
FunctionName
Description: The name of the last high-level function initiated by the initial thread.
Identifier: MQCACF_APPL_FUNCTION
Data type: MQCFST
FunctionType
Description: The type of the last high-level function initiated by the initial thread. Possible
values: MQFUN_*
Identifier: MQIACF_APPL_FUNCTION_TYPE
Data type: MQCFIN
Detail
Description: The detail level that is recorded for the connection. Possible values: 1=LOW
2=MEDIUM 3=HIGH
Identifier: MQIACF_TRACE_DETAIL
Data type: MQCFIN
TraceDataLength
Description: The length of message data (in bytes) that is traced for this connection.
Identifier: MQIACF_TRACE_DATA_LENGTH
Data type: MQCFIN
PointerSize
Description: The length (in bytes) of pointers on the platform the application is running (to
assist in interpretation of binary structures).
Identifier: MQIACF_POINTER_SIZE
Data type: MQCFIN
Platform
Description: The platform on which the queue manager is running. Possible values: MQPL_*
Identifier: MQIA_PLATFORM
Data type: MQCFIN
IBM MQ Monitoring and performance 223
Variable parameters for application activity MQI operations
The application activity data MQCFGR structure is followed by the set of PCF parameters which
corresponds to the operation being performed . The parameters for each operation are defined in the
following section.
The trace level indicates the level of trace granularity that is required for the parameters to be included in
the trace. The possible trace level values are:
1.Low
The parameter is included when "low", "medium" or "high" activity tracing is configured for an
application. This setting means that a parameter is always included in the AppActivityData group
for the operation. This set of parameters is sufficient to trace the MQI calls an application makes, and
to see if they are successful.
2.Medium
The parameter is only included in the AppActivityData group for the operation when "medium" or
"high" activity tracing is configured for an application. This set of parameters adds information about
the resources, for example, queue and topic names used by the application.
3.High
The parameter is only included in the AppActivityData group for the operation when "high"
activity tracing is configured for an application. This set of parameters includes memory dumps of
the structures passed to the MQI and XA functions. For this reason, it contains more information about
the parameters used in MQI and XA calls. The structure memory dumps are shallow copies of the
structures. To avoid erroneous attempts to dereference pointers, the pointer values in the structures
are set to NULL.
Note: The version of the structure that is dumped is not necessarily identical to the version used by
an application. The structure can be modified by an API crossing exit, by the activity trace code, or by
the queue manager. A queue manager can modify a structure to a later version, but the queue manager
never changes it to an earlier version of the structure. To do so, would risk losing data.
MQBACK
Application has started the MQBACK MQI function
CompCode
Description: The completion code indicating the result of the operation
PCF Parameter: MQIACF_COMP_CODE
Trace level: 1
Type MQCFIN
Reason
Description: The reason code result of the operation
PCF Parameter: MQIACF_REASON_CODE