### Creating and Displaying Activity Trace Subscriptions with `amqsact`

#### Display Mode
By default, `amqsact` in display mode processes messages from the `SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE`. You can override this behavior by specifying a different queue name or topic string. Activity trace must be enabled using one of the methods described in "Collecting Application Activity Trace Information."

You can control the trace period and specify whether the activity trace messages are removed or retained after display. In display mode, `amqsact` accepts the following arguments:

- `-m queue_manager_name`: Required. Specifies the queue manager for which trace messages are collected.
- `-q queue_name`: Displays only trace messages related to the specified queue.
- `-t topic_string`: Displays only trace messages related to the specified topic.
- `-b`: Retains trace messages after display.
- `-v`: Displays trace messages in verbose mode.
- `-d depth`: Specifies the number of messages to display.
- `-w timeout`: Specifies a timeout. If no trace messages appear within this period, `amqsact` exits.
- `-s start_time`: Used with `-e` to specify a time period. Displays trace messages from the specified start time.
- `-e end_time`: Used with `-s` to specify a time period. Displays trace messages up to the specified end time.

**Examples:**

1. **Display and delete activity trace messages on `SYSTEM.ADMIN.TRACE.ACTIVITY.QUEUE`:**
   ```sh
   amqsact -m QMGR1
   ```

2. **Display and delete activity trace messages on `SUB.QUEUE`, with a 30-second timeout:**
   ```sh
   amqsact -m QMGR1 -q SUB.QUEUE -w 30
   ```

3. **Display verbose activity trace messages from a 20-minute period, retaining messages on the queue:**
   ```sh
   amqsact -m QMGR1 -b -v -s 2014-12-31T23:50:00 -e 2015-01-01T00:10:00
   ```

#### Dynamic Mode
In dynamic mode, you enable activity trace data collection by specifying an application name, channel name, or connection identifier as an argument to `amqsact`. Wildcard characters can be used in the name. In this mode, activity trace data is enabled at the start of the sample using a non-durable subscription to a system topic, and stops when `amqsact` stops. A timeout is required in dynamic mode. Multiple instances of `amqsact` can run concurrently, each receiving a copy of any activity trace data.

In dynamic mode, `amqsact` takes the following arguments:

- `-m queue_manager_name`: Required. Specifies the queue manager for which trace messages are collected.
- `-w timeout`: Required. Specifies a timeout. If no trace messages appear within this period, `amqsact` exits.
- `-a application_name`: Specifies an application to collect messages for.
- `-c channel_name`: Specifies a channel to collect messages for.
- `-i connection_id`: Specifies a connection to collect messages for.
- `-v`: Displays trace messages in verbose mode.

**Examples:**

1. **Generate and display activity trace messages for connections made by `amqsget.exe` with a 30-second timeout:**
   ```sh
   amqsact -m QMGR1 -w 30 -a amqsget.exe
   ```

2. **Generate and display activity trace messages for connections made by applications starting with "amqs" with a 30-second timeout:**
   ```sh
   amqsact -m QMGR1 -w 30 -a amqs*
   ```

3. **Generate and display activity trace messages for activity on the `QMGR1.TO.QMGR2` channel with a 10-second timeout:**
   ```sh
   amqsact -m QMGR1 -w 10 -c QMGR1.TO.QMGR2
   ```

4. **Generate and display activity trace messages for any channel activity with a 10-second timeout:**
   ```sh
   amqsact -m QMGR1 -w 10 -c #
   ```

5. **Generate and display verbose activity trace messages for an existing IBM MQ connection with a 60-second timeout:**
   ```sh
   amqsact -m QMGR1 -w 60 -i 414D5143514D475231202020202020206B576B5420000701 -v
   ```

#### Configuring Trace Levels Using `mqat.ini`
You configure trace levels for a queue manager by setting values in the `AllActivityTrace` stanza of the `mqat.ini` configuration file. The following values can be set:

- **ActivityInterval**: Time interval (in seconds) between trace messages. Defaults to 1.
- **ActivityCount**: Number of MQI operations between trace messages. Defaults to 100.
- **TraceLevel**: Amount of parameter detail traced for each operation. Set to `LOW`, `MEDIUM`, or `HIGH`. Defaults to `MEDIUM`.
- **TraceMessageData**: Amount of message data (in bytes) traced for MQGET, MQPUT, MQPUT1, and Callback operations. Defaults to 0.
- **StopOnGetTraceMsg**: Can be set to `ON` or `OFF`. Defaults to `ON`.
- **SubscriptionDelivery**: Can be set to `BATCHED` or `IMMEDIATE`. Determines whether `ActivityInterval` and `ActivityCount` parameters are used when activity trace subscriptions are present. Defaults to `BATCHED`.

#### Application Activity Trace Message Reference
Application activity trace messages are standard IBM MQ messages containing a message descriptor and message data. The message data includes information about the MQI operations performed by IBM MQ applications or activities in the IBM MQ system.

**Message Descriptor:**
- **MQMD Structure**: Contains the message descriptor.
- **Format**: `MQFMT_ADMIN` (Admin message).
- **CorrelId**: Initialized with the ConnectionId of the application.

**PCF Header (MQCFH):**
- **Type**: Identifies the content of the message. Value: `MQCFT_APP_ACTIVITY`.
- **StrucLength**: Length in bytes of the MQCFH structure. Value: `MQCFH_STRUC_LENGTH`.
- **Version**: Structure version number. Value: `MQCFH_VERSION_3`.
- **Command**: Command identifier. Value: `MQCMD_ACTIVITY_TRACE`.
- **MsgSeqNumber**: Sequence number of the message within a group of related messages. Value: 1.
- **Control**: Control options. Value: `MQCFC_LAST`.
- **CompCode**: Completion code. Value: `MQCC_OK`.
- **Reason**: Reason code qualifying the completion code. Value: `MQRC_NONE`.
- **ParameterCount**: Count of parameter structures. Value: 1 or greater.

**Application Activity Trace Message Data:**
- **QueueManager**: Name of the queue manager.
- **QSGName**: Name of the queue sharing group (z/OS only).
- **HostName**: Host name of the machine running the queue manager.
- **IntervalStartDate/Time**: Start date and time of the monitoring period.
- **IntervalEndDate/Time**: End date and time of the monitoring period.
- **CommandLevel**: IBM MQ command level.
- **SeqNumber**: Sequence number for long-running connections.
- **ApplicationName**: Name of the application.
- **ApplClass**: Type of application. Possible values: `MQAT_*`.
- **ApplicationPid**: Operating system Process ID of the application.
- **UserId**: User identifier context of the application.
- **APICallerType**: Type of the application. Possible values: `MQXACT_EXTERNAL` or `MQXACT_INTERNAL`.
- **Environment**: Runtime environment of the application. Possible values: `MQXE_*`.
- **ChannelName**: Channel name associated with the connection.
- **ConnectionName**: Network connection name associated with the connection.
- **ChannelType**: Type of channel associated with the connection. Possible values: `MQCHT_*`.
- **RemoteProduct**: Remote product identifier associated with the connection.
- **RemoteVersion**: Remote product version associated with the connection.
- **FunctionName**: Name of the last high-level function initiated by the initial thread.
- **FunctionType**: Type of the last high-level function initiated by the initial thread. Possible values: `MQFUN_*`.
- **Detail**: Detail level recorded for the connection. Possible values: 1 (LOW), 2 (MEDIUM), 3 (HIGH).
- **TraceDataLength**: Length of message data (in bytes) traced for the connection.
- **PointerSize**: Length of pointers on the platform the application is running.
- **Platform**: Platform on which the queue manager is running. Possible values: `MQPL_*`.

#### Variable Parameters for Application Activity MQI Operations
The `MQCFGR` structure is followed by a set of PCF parameters corresponding to the operation being performed. The trace level indicates the granularity of the trace, with possible values:

- **Low**: Parameter included in all trace levels.
- **Medium**: Parameter included in medium and high trace levels.
- **High**: Parameter included in high trace levels.

**Example:**

- **MQBACK Operation:**
  - **CompCode**: Completion code indicating the result of the operation. PCF Parameter: `MQIACF_COMP_CODE`. Trace Level: 1.
  - **Reason**: Reason code result of the operation. PCF Parameter: `MQIACF_REASON_CODE`.

This documentation provides a comprehensive overview of using `amqsact` for creating and displaying activity trace subscriptions, configuring trace levels, and understanding the structure of application activity trace messages.