User: In the python program I'm writing, I've got a thread which iterates over a large structure in memory and writes it incrementally into a file-like object.  I've got another thread which takes a file-like object and writes it to disk.  Is there an easy way to connect the two, such that any data input from the first thread will be buffered for the second?
Specifically, I'm trying to pass data to subprocess.Popen().  The process will read from stdin, but you cannot pass a "file-like" object to Popen because it calls stdin.fileno() and blows up unless you have a real file.
Instead, you need to pass the PIPE argument to Popen, which allows you to use proc.stdin as a file-like object.  But if you've already got a file-like object, there doesn't seem to be a great way to yolk the two of them together.
Assistant: I think there is something wrong in the design if you already have a file-like object if you want your data to end up in the subprocess. You should then arrange that they get written into the subprocess in the first place, rather than having them written into something else file-like first. Whoever is writing the data should allow the flexibility to specify the output stream, and that should be the subprocess pipe.
Alternatively, if the writer insists on creating its own stream object, you should let it complete writing, and only then start the subprocess, feeding it from the result of first write. E.g. if it is a StringIO object, take its value after writing, and write it into the pipe; no need for thread synchronization here.