### Service Configuration
```yaml
service:
  name: chronyd
  state: started
```
This simple code snippet ensures that the `chronyd` time service is started, thereby satisfying recommendation 2.2.1.1 without needing to detect which time service is in use. For a more thorough approach, you could also check that `ntpd` is not running, but this is left as an exercise for the reader.

### CIS Hardening with Ansible (Chapter 14)
#### Implementing Recommendations
Naturally, it's impractical to include all the Ansible code required for the approximately 400 recommendations in the CIS Benchmark within this book. This would warrant a separate, comprehensive guide. Additionally, this example is specific to one benchmark. If your organization adopts a new operating system like RHEL 8, there will be a distinct CIS Benchmark for that OS, which will need to be implemented. However, the examples provided from the RHEL 7 CIS Benchmark should be sufficient to help you design and build your own policies. In the next section, we will discuss techniques to manage this task at an enterprise scale.

#### Enterprise-Wide Policy Application with Ansible
While Ansible offers significant benefits for implementing CIS Benchmarks, developing and maintaining these policies can become a full-time job, especially when combined with the need to run them against infrastructure and manage the results of each run.

Fortunately, the open-source community provides a solution. Imagine if someone had already invested considerable time and effort into developing high-quality Ansible roles for CIS Benchmarks, and made this code available as open source. You could audit it, ensure it fits your environment, and customize it if needed. Furthermore, they have tagged each task and added a variable structure to easily specify choices, such as the time synchronization service used by your organization.

MindPoint Group has completed this work, and their code is freely available on GitHub at [https://github.com/MindPointGroup/RHEL7-CIS](https://github.com/MindPointGroup/RHEL7-CIS). At the time of writing, the latest CIS Benchmark for EL7 systems is version 2.2.0, while the playbooks are written for version 2.1.1. It's important to be aware of the benchmark version you are implementing and any potential security implications of using an older version.

MindPoint Group also offers a commercially supported version of their Ansible hardening code via [https://www.lockdownenterprise.com/](https://www.lockdownenterprise.com/), catering to both free and paid support needs.

### Using the Open Source Code
1. **Clone the GitHub Repository:**
   ```bash
   $ cd roles
   $ git clone https://github.com/MindPointGroup/RHEL7-CIS.git
   $ cd ..
   ```

2. **Use the Role in Your Playbook:**
   Set variables as needed, either in the inventory or the main playbook.
   ```yaml
   ---
   - name: Implement EL7 CIS benchmark
     hosts: all
     become: yes
     roles:
       - RHEL7-CIS
   ```

3. **Run the Playbook:**
   With these steps, you can start implementing the EL7 benchmark and its nearly 400 recommendations on your Linux servers. The playbook runs normally and produces detailed output as checks are performed and recommendations are implemented.

### Variable Management
The README.md file in the cloned repository documents the variables and tags. For example, to implement only level 1 recommendations, use the `level1` tag:
```bash
$ ansible-playbook -i hosts site.yml --tags=level1
```

For servers acting as routers, set the `rhel7cis_is_router` variable to `true`:
```bash
$ ansible-playbook -i hosts site.yml -e rhel7cis_is_router=true
```

To avoid manual errors, set this variable in the inventory:
```ini
[routers]
router-testhost

[routers:vars]
rhel7cis_is_router=true
```

Then run the playbook:
```bash
$ ansible-playbook -i routers site.yml
```

### Strategy Considerations
When deciding whether to use pre-existing playbooks or develop your own, consider:
- Owning and maintaining your code.
- Standardizing on one code base for maintainability.
- Needing third-party support or having in-house skills and resources.

### Testing Security Policies with Ansible
Ansible's check mode allows you to predict changes without actually making them. This is useful for auditing:
```bash
$ ansible-playbook -i hosts site.yml -C
```

Not all modules support check mode, but core modules like `yum`, `lineinfile`, and `sysctl` do. This mode helps in identifying non-compliant systems and ensuring no false positives during audits.

### Summary
Ansible is a powerful tool for implementing and auditing security benchmarks. This chapter covered:
- Writing Ansible playbooks for server hardening.
- Applying server hardening policies across the enterprise.
- Using open-source roles.
- Testing and auditing policies with Ansible.

### Questions
1. How do Ansible modules like `lineinfile` make security benchmark implementation more efficient?
2. How can Ansible tasks be conditional for specific servers or groups?
3. What are good practices for naming tasks in Ansible?
4. How can you modify a playbook to run only level 1 benchmarks?
5. What is the difference between `--tags` and `--skip-tags`?
6. Why use publicly available open-source code for CIS Benchmark implementation?
7. What does the `-C` flag do in an Ansible playbook run?
8. Does the `shell` module support check mode?

### Further Reading
- [CIS Benchmarks FAQ](https://www.cisecurity.org/cis-benchmarks-faq/)
- [List of CIS Benchmarks](https://www.cisecurity.org/cis-benchmarks/)
- [Mastering Ansible, Third Edition](https://www.packtpub.com/gb/virtualization-and-cloud/mastering-ansible-third-edition)

### Auditing Security Policy with OpenSCAP (Chapter 15)
#### Introduction
We have discussed the value of applying security policies like the CIS Benchmark to your Enterprise Linux infrastructure. While shell scripting and Ansible can assist with auditing, they are not ideal for generating readable and actionable reports. This chapter will cover OpenSCAP, a standardized solution for checking compliance with security policies.

#### Topics Covered
- Installing the OpenSCAP server
- Evaluating and selecting policies
- Scanning the enterprise with OpenSCAP
- Interpreting results

#### Technical Requirements
- Ubuntu Server 18.04 LTS
- CentOS 7.6
- Ansible 2.8

You will need access to two servers or virtual machines running the specified operating systems and Ansible. All example code is available on GitHub at [https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux](https://github.com/PacktPublishing/Hands-On-Enterprise-Automation-on-Linux).

#### Installing OpenSCAP Base
OpenSCAP Base includes the `oscap` command-line utility and a library for other OpenSCAP tools. To install it on CentOS 7 or RHEL 7:
```bash
$ sudo yum -y install openscap-scanner
```

On Ubuntu Server 18.04 LTS:
```bash
$ sudo apt -y install libopenscap8
```

These packages include both the `oscap` tool and the necessary library.