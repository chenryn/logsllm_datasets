# Analysis of DTLS Implementations Using Protocol State Fuzzing

**Authors:**
- Paul Fiterau-Brostean, Uppsala University
- Bengt Jonsson, Uppsala University
- Robert Merget, Ruhr-University Bochum
- Joeri de Ruiter, SIDN Labs
- Konstantinos Sagonas, Uppsala University
- Juraj Somorovsky, Paderborn University

**Publication:**
- [Proceedings of the 29th USENIX Security Symposium](https://www.usenix.org/conference/usenixsecurity20/presentation/fiterau-brostean)
- August 12–14, 2020
- ISBN: 978-1-939133-17-5
- Open access sponsored by USENIX

## Abstract

In recent years, the use of UDP-based protocols has increased due to their performance advantages, such as simplicity and lower latency. This has led to the adoption of UDP in Voice over IP, tunneling technologies, IoT, and new Web protocols. To secure data exchange in these scenarios, Datagram Transport Layer Security (DTLS) was developed as a cryptographic variant of TLS. DTLS's main challenge is to support the stateless and unreliable nature of UDP, which has introduced complexities not present in TLS.

This paper presents the first comprehensive analysis of DTLS implementations using protocol state fuzzing. We extend the open-source TLS-Attacker framework to support DTLS, tailored to the stateless and unreliable nature of UDP. We develop a framework for applying protocol state fuzzing on DTLS servers and use it to learn state machine models for thirteen DTLS implementations. Our analysis reveals four serious security vulnerabilities, including a full client authentication bypass in the latest JSSE version, as well as several functional bugs and non-conformance issues. The learned state models also highlight significant differences between implementations, confirming the complexity of DTLS state machines.

## 1. Introduction

UDP is widely used as an unreliable transfer protocol for Voice over IP, tunneling technologies, and new Web protocols, and is one of the most common protocols in the Internet of Things (IoT). Since UDP does not provide any inherent security, Datagram Transport Layer Security (DTLS) was introduced. DTLS is a variation of TLS, a widely used security protocol for securing communication over reliable data transfer protocols.

DTLS is a primary protocol for securing IoT applications, with the number of IoT devices projected to reach 11.6 billion by 2021, constituting half of all devices connected to the Internet. This trend increases the need to ensure that software designed for these devices is properly scrutinized, particularly in terms of security.

DTLS is also one of the two security protocols in WebRTC, a framework enabling real-time communication. WebRTC can be used to implement video conferencing in browsers without the need for plugins and is supported by major browsers such as Mozilla Firefox, Google Chrome, Microsoft Edge, and Apple’s Safari.

While significant effort has been invested in ensuring the security of TLS implementations, those based on DTLS have received less scrutiny. Our work addresses this gap by providing an extensible platform for testing and analyzing systems based on DTLS. We describe this framework and use it to analyze several existing DTLS implementations, focusing on finding logical flaws through protocol state fuzzing.

## 2. Datagram Transport Layer Security (DTLS)

DTLS is an adaptation of TLS for datagram transport layer protocols. It is currently available in two versions: DTLS 1.0, based on TLS 1.1, and DTLS 1.2, based on TLS 1.2. Version 1.3 is under development. This work focuses on TLS/DTLS version 1.2.

At a high level, both TLS and DTLS consist of two major components:
1. **Handshake:** Responsible for negotiating session keys and cryptographic algorithms.
2. **Record Layer:** Splits the received cleartext data stream into DTLS records.

The stateless and inherently unreliable nature of UDP has prompted several changes in the original TLS protocol. Below, we describe the handshake protocol and Record Layer, and discuss the relevant changes.

### Handshake Protocol

Figure 1 illustrates the DTLS handshake. The client initiates communication by sending a `ClientHello` message, which includes the highest supported DTLS version number, a random nonce, the cipher suites supported by the client, and optional extensions. In DTLS, the server responds with a `HelloVerifyRequest` message, which contains a stateless cookie. This message prompts the client to resend the `ClientHello` message, including the stateless cookie, to prevent Denial-of-Service attacks.

The server then responds with `ServerHello`, which contains the server’s DTLS version, the chosen cipher suite, a second random nonce, and optional extensions. The `Certificate` message carries the server’s certificate, which includes the server’s public key. In `ServerKeyExchange`, the server sends an ephemeral public key signed with the private key for the server’s certificate. This signature also covers both nonces. The `CertificateRequest` message asks the client to authenticate to the server, and is only used when the server is configured to authenticate clients via certificates. `ServerHelloDone` marks the end of the server’s messages.

The client responds with a list of messages: `Certificate`, `ClientKeyExchange`, `CertificateVerify`, `ChangeCipherSpec`, and `Finished`. The `Certificate` and `CertificateVerify` messages are optional and only transmitted when the server requests client authentication. They contain, respectively, a client certificate and a signature computed over all previous messages with the client’s long-term private key. The client sends its public key share in the `ClientKeyExchange` message. Both parties then use the exchanged information to derive symmetric keys used in the rest of the protocol. The client sends `ChangeCipherSpec` to indicate that it will use the negotiated keys from now on in the Record Layer. Finally, it sends `Finished` encrypted with the new keys, which contains an HMAC over the previous handshake messages. The server responds with its own `ChangeCipherSpec` and `Finished` messages. Thereafter, both client and server can exchange authenticated and encrypted application data.

Several DTLS handshakes can be performed within one DTLS connection, allowing the client and server to renew the cryptographic key material. This process is called renegotiation.

### Record Layer

All messages in DTLS are wrapped in records. During the first DTLS handshake, the Record Layer operates in epoch 0. This epoch number is included in the header of the DTLS record. If cryptographic keys have been negotiated and activated by sending a `ChangeCipherSpec`, the Record Layer increases the epoch number to 1, indicating that the contents of the actual record are encrypted. The epoch number may increase further with subsequent handshakes.

While TLS has implicit sequence numbers, DTLS has explicit sequence numbers, which are required since the protocol does not guarantee message order or delivery.

## 3. Challenges and Solutions

### Challenges in Applying State Fuzzing to DTLS

DTLS is more complex than other security protocols that have been subject to state fuzzing. Most of these protocols run over TCP, relying on its support for reliable connections. In contrast, DTLS runs over UDP, which is connectionless. This implies that DTLS must implement its own retransmission mechanism and handle message loss, reordering, and fragmentation. Additionally, an ongoing DTLS interaction cannot be terminated by simply closing the connection, as is the case with TLS. As a result, most DTLS implementations allow interaction to continue even after receiving unexpected messages, and may subsequently allow a handshake to "restart in the middle" and finish successfully. Compared to TLS, DTLS includes an additional message exchange to prevent Denial-of-Service attacks, adding to its complexity.

### Supporting Mapper Construction

DTLS' support for message loss, reordering, and fragmentation requires additional packet parameters compared to TLS, such as message sequence numbers. These parameters must be correctly managed by the MAPPER. Special care is needed when deviating from an expected handshake sequence, as each parameter management strategy may allow or prohibit a "restarting" handshake to be eventually completed. To facilitate MAPPER construction and parameter management, we developed a test framework for DTLS, which allows easy definitions of arbitrary protocol packets and efficient experimentation with parameter management strategies. This test framework is realized by extending the TLS-Attacker, an existing open-source framework for testing TLS implementations, with support for DTLS. The framework forms the basis for our MAPPER used for DTLS state fuzzing and can also be used independently to support other fuzzing techniques.

### Handling the Complexity of DTLS State Machines

The properties of DTLS imply that state machine models of DTLS implementations are significantly more complex than corresponding state machines for TLS and other protocols. Their complexity is further increased when analyzing the four main key exchange mechanisms together rather than separately, and when exploring settings involving client certificate authentication. Such complexity creates problems both for the model learning algorithm and for the interpretation of resulting models. We address and avoid some of the complexity in two ways:
1. Our test harness does not employ reordering and fragmentation, so these are not part of our learned models.
2. We adapt the MAPPER to enable handshakes to "restart," which decreases the size of the learned models, as successful restarts typically show up as back-transitions to regular handshake states.

### Obtaining Models for a Wide Range of Implementations and Configurations

We applied our platform to thirteen implementations of ten distinct vendors. Besides covering a wide spectrum of DTLS implementations, ranging from mature, general-purpose libraries to implementations designed for IoT or WebRTC, we mention that some of them are DTLS libraries without a TLS component, on which state fuzzing has never been applied before.

For each implementation, we examine many, often all, combinations of supported key exchange and client certificate authentication configurations. This ensures that state fuzzing does not miss bugs that are only present in certain configurations. In fact, this proved important: several of the Java Secure Socket Extension (JSSE) bugs reported could only have been discovered with a configuration requiring client certificate authentication.

### From Models to Bugs

Once models are obtained, we proceed to analyze them, looking for unexpected or superfluous states and transitions. Some of the main findings of our analysis include:
- A complete client authentication bypass in JSSE, the default TLS/DTLS library of the Java Standard Edition Platform. The bug allows attackers to authenticate themselves to a JSSE server by sending special out-of-order DTLS messages without ever proving to the server that they know the private key for the certificate they transmit. The bug also affects JSSE’s TLS library, greatly increasing its impact, as it is often used to authenticate users with smart cards at web sites or web services.
- A state machine bug in the Scandium framework allowed us to finish a DTLS handshake without sending a `ChangeCipherSpec` message, resulting in the server accepting plaintext messages even if indicated otherwise by the negotiated cryptographic mechanisms. This bug is similar to the EarlyFinished bug found in the TLS JSSE implementation.
- A similar bug was also present in PionDTLS, a Go implementation for WebRTC. Investigation of this bug led to the discovery of a graver issue whereby the PionDTLS server freely processes unencrypted application data once a handshake has been completed.
- Finally, three confirmed functional bugs in TinyDTLS, a lightweight DTLS implementation for IoT devices.

## 4. Contributions

In summary, this work:
- Extends TLS-Attacker with DTLS functionality and uses it to implement a protocol state fuzzing platform for DTLS servers.
- Provides Mealy machine models for thirteen DTLS server implementations, including the most commonly used ones, with models exploring most key exchange algorithms and client certificate authentication settings.
- Analyzes the learned models and reports several non-conformance bugs and a number of security vulnerabilities in DTLS implementations. Some of these vulnerabilities also affect the TLS part of these libraries.

## 5. Responsible Disclosure

We have reported all issues to the respective projects, complying with their security procedures. The reported security issues were all confirmed by the responsible developers, who implemented proper countermeasures. More details are provided in Section 7.

## 6. Outline

We start by briefly reviewing DTLS, model learning, and the TLS-Attacker framework in Sections 2 to 4. Subsequently, we present the learning setup we employ (Section 5), the DTLS server implementations we tested and the effort spent on learning state machines for them (Section 6), followed by a detailed analysis of the issues found in the various DTLS implementations (Section 7). Therein, we present state machines for three of these implementations, while making the rest available online. Section 8 reviews related work, and Section 9 concludes the paper with some directions for further work.