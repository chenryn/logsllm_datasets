title:Analysis of DTLS Implementations Using Protocol State Fuzzing
author:Paul Fiterau-Brostean and
Bengt Jonsson and
Robert Merget and
Joeri de Ruiter and
Konstantinos Sagonas and
Juraj Somorovsky
Analysis of DTLS Implementations Using 
Protocol State Fuzzing
Paul Fiterau-Brostean and Bengt Jonsson, Uppsala University; Robert Merget, 
Ruhr-University Bochum; Joeri de Ruiter, SIDN Labs; Konstantinos Sagonas, 
Uppsala University; Juraj Somorovsky, Paderborn University
https://www.usenix.org/conference/usenixsecurity20/presentation/fiterau-brostean
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Analysis of DTLS Implementations
Using Protocol State Fuzzing
Paul Fiter˘au-Bro¸stean
Uppsala University
Bengt Jonsson
Uppsala University
Robert Merget
Ruhr University Bochum
Joeri de Ruiter
SIDN Labs
Konstantinos Sagonas
Uppsala University
Juraj Somorovsky
Paderborn University
Abstract
Recent years have witnessed an increasing number of proto-
cols relying on UDP. Compared to TCP, UDP offers perfor-
mance advantages such as simplicity and lower latency. This
has motivated its adoption in Voice over IP, tunneling techno-
logies, IoT, and novel Web protocols. To protect sensitive data
exchange in these scenarios, the DTLS protocol has been de-
veloped as a cryptographic variation of TLS. DTLS’s main
challenge is to support the stateless and unreliable transport of
UDP. This has forced protocol designers to make choices that
affect the complexity of DTLS, and to incorporate features
that need not be addressed in the numerous TLS analyses.
We present the ﬁrst comprehensive analysis of DTLS im-
plementations using protocol state fuzzing. To that end, we ex-
tend TLS-Attacker, an open source framework for analyzing
TLS implementations, with support for DTLS tailored to the
stateless and unreliable nature of the underlying UDP layer.
We build a framework for applying protocol state fuzzing on
DTLS servers, and use it to learn state machine models for
thirteen DTLS implementations. Analysis of the learned state
models reveals four serious security vulnerabilities, including
a full client authentication bypass in the latest JSSE version,
as well as several functional bugs and non-conformance is-
sues. It also uncovers considerable differences between the
models, conﬁrming the complexity of DTLS state machines.
1 Introduction
UDP is widely used as an unreliable transfer protocol for
Voice over IP, tunneling technologies, and new Web protocols,
and is one of the commonly used protocols in the Internet
of Things (IoT). As UDP does not offer any security by it-
self, Datagram Transport Layer Security (DTLS) [29,36] was
introduced. DTLS is a variation on TLS, a widely used secu-
rity protocol responsible for securing communication over a
reliable data transfer protocol.
DTLS is one of the primary protocols for securing IoT
applications [38]. The number of IoT devices is projected to
reach 11.6 billion by 2021 [26]. This will constitute half of all
devices connected to the Internet, with the percentage set to
grow in subsequent years. Such trends also increase the need
to ensure that software designed for these devices is properly
scrutinized, particularly with regards to its security.
DTLS is also used as one of the two security protocols in
WebRTC, a framework enabling real-time communication.
WebRTC can be used, for example, to implement video con-
ferencing in browsers without the need for a plugin. It is
supported by all major browsers, including Mozilla Firefox,
Google Chrome, Microsoft Edge, and Apple’s Safari.
Whereas signiﬁcant effort has been invested into ensuring
security of TLS implementations, those based on DTLS have
so far received considerably less scrutiny. Our work ﬁlls this
gap by providing an extensible platform for testing and analy-
zing systems based on DTLS. We describe this framework,
and use it to analyze a number of existing DTLS implementa-
tions, including the most commonly used ones. Our speciﬁc
focus is on ﬁnding logical ﬂaws, which can be exposed by
non-standard or unexpected sequences of messages, using a
technique known as protocol state fuzzing (or simply state fuz-
zing).
As in TLS, each DTLS client and server effectively imple-
ments a state machine which keeps track of how far protocol
operation has progressed: which types of messages have been
exchanged, whether the cryptographic materials have been
agreed upon and/or computed, etc. Each DTLS implementa-
tion must correctly manage such a state machine for a number
of conﬁgurations and key exchange mechanisms. Correspon-
ding implementation ﬂaws, so-called state machine bugs, may
be exploitable, e.g., to bypass authentication steps or establish
insecure connections [5]. To ﬁnd such ﬂaws, state fuzzing
has proven particularly effective not only for TLS [13], but
also for SSH [19], TCP [18], MQTT [40], OpenVPN [12],
QUIC [33], and the 802.11 4-Way Handshake [28], leading
to the discovery of several security vulnerabilities and non-
conformance issues in their implementations.
State fuzzing automatically infers state machine descripti-
ons of protocol implementations using model learning [32,41].
USENIX Association
29th USENIX Security Symposium    2523
This is an automated black-box technique which sends se-
lected sequences of messages to the implementation, observes
the corresponding outputs, and produces a Mealy machine
that abstractly describes how the implementation responds to
message ﬂows. The Mealy machine can then be analyzed to
spot ﬂaws in the implementation’s control logic or check com-
pliance with its speciﬁcation. State fuzzing works without any
a priori knowledge of the protocol state machine, but relies
on a manually constructed protocol-speciﬁc test harness, a.k.a.
a MAPPER, which translates symbols in the Mealy machine
to protocol packets exchanged with the implementation.
Challenges resulting from the DTLS design. DTLS is
more complex than other security protocols that have so far
been subject to state fuzzing. Most of these [12, 18, 19] run
over TCP, relying on its support for reliable connections. In
contrast, DTLS runs over UDP, which is connectionless. This
implies that DTLS has to implement its own retransmission
mechanism and provide support for message loss, reordering,
and fragmentation. Moreover, an ongoing DTLS interaction
cannot be terminated by simply closing the connection, as is
the case with TLS. As a result, most DTLS implementations
allow interaction to continue even after reception of unex-
pected messages —after all, these messages might have just
arrived out of order— and may subsequently allow a hands-
hake to “restart in the middle” and ﬁnish successfully. Finally,
compared to TLS, DTLS includes an additional message ex-
change used to prevent Denial-of-Service attacks. All this
added complexity makes protocol state fuzzing more difﬁcult
to apply for DTLS than for TLS.
Supporting mapper construction. DTLS’ support for
message loss, reordering, and fragmentation requires additio-
nal packet parameters compared to TLS, such as message se-
quence numbers. DTLS parameters have to be correctly mana-
ged by the MAPPER. This requires special care when deviating
from an expected handshake sequence (a.k.a. a happy ﬂow),
since each particular parameter management strategy may
allow or prohibit a “restarting” handshake to be eventually
completed. In order to facilitate MAPPER construction and
parameter management, we have developed a test framework
for DTLS, which allows easy deﬁnitions of arbitrary protocol
packets and efﬁcient experimentation with parameter manage-
ment strategies. This test framework is realized by extending
TLS-Attacker [39], an existing open source framework for
testing TLS implementations, with support for DTLS. The
framework forms the basis for our MAPPER used for DTLS
state fuzzing. The test framework can also be used in its own
right to support other fuzzing techniques.
Handling the complexity of DTLS state machines. The
above properties of DTLS imply that state machine models
of DTLS implementations are signiﬁcantly more complex
than corresponding state machines for TLS and other proto-
cols. Their complexity is further increased when analyzing
the four main key exchange mechanisms together rather than
separately, and when exploring settings involving client certi-
ﬁcate authentication. Such complexity in the models creates
problems both for the model learning algorithm and for the
interpretation of resulting models. We ameliorate and avoid
some of the complexity in two ways: 1) Our test harness does
not employ reordering and fragmentation, and hence this is
not part of our learned models. 2) We adapt the MAPPER so
as to enable handshakes to “restart”, which has the additional
side-effect of decreasing the size of the learned models, since
successful restarts typically show up as back-transitions to
regular handshake states.
Obtaining models for a wide range of implementations
and conﬁgurations. We have applied our platform to thirteen
implementations of ten distinct vendors (Section 6). Besides
covering a wide spectrum of DTLS implementations, ranging
from mature, general-purpose libraries to implementations
designed for IoT or WebRTC, we mention that some of them
are DTLS libraries without a TLS component, on which state
fuzzing has never been applied before.
For each implementation we examine many, often all, com-
binations of supported key exchange and client certiﬁcate
authentication conﬁgurations. This ensures that state fuzzing
does not miss bugs that are only present in certain conﬁgurati-
ons. In fact, this proved important: several of the Java Secure
Socket Extension (JSSE) bugs reported in Section 7.4 could
only have been discovered with a conﬁguration requiring
client certiﬁcate authentication.
From models to bugs. Once models are obtained we proceed
to analyze them, looking for unexpected or superﬂuous states
and transitions. Some of the main ﬁndings of our analysis are:
(i) A complete client authentication bypass in JSSE, which is
the default TLS/DTLS library of the Java Standard Edition
Platform. The bug allows attackers to authenticate themselves
to a JSSE server by sending special out-of-order DTLS mes-
sages without ever proving to the server that they know the
private key for the certiﬁcate they transmit. The bug is especi-
ally devastating, since it also affects JSSE’s TLS library. This
greatly increases its impact, as JSSE’s TLS library is often
used to authenticate users with smart cards at web sites or
web services. (ii) A state machine bug in the Scandium frame-
work allowed us to ﬁnish a DTLS handshake without sending
a ChangeCipherSpec message. This resulted in the server
accepting plaintext messages even if indicated otherwise by
the negotiated cryptographic mechanisms. Note that this bug
is similar to the EarlyFinished bug found in the TLS JSSE
implementation [13]. (iii) A similar bug was also present in
PionDTLS, a Go implementation for WebRTC. Investigation
of this bug led to discovery of a graver issue whereby the
PionDTLS server freely processes unencrypted application
data once a handshake has been completed. (iv) Finally, three
conﬁrmed functional bugs in TinyDTLS, a lightweight DTLS
implementation for IoT devices.
Contributions. In summary, this work:
• Extends TLS-Attacker with DTLS functionality and
2524    29th USENIX Security Symposium
USENIX Association
uses it to implement a protocol state fuzzing platform
for DTLS servers.
• Provides Mealy machine models for thirteen DTLS ser-
ver implementations, including the most commonly used
ones, with models exploring most key exchange algo-
rithms and client certiﬁcate authentication settings.
• Analyzes the learned models and reports several non-
conformance bugs and a number of security vulnerabili-
ties in DTLS implementations. Some of these vulnerabi-
lities affect also the TLS part of these libraries.
Responsible disclosure. We have reported all issues to the
respective projects complying with their security procedures.
The reported security issues were all conﬁrmed by the respon-
sible developers, who implemented proper countermeasures.
We provide more details in Section 7.
Outline. We start by brieﬂy reviewing DTLS, model learning,
and the TLS-Attacker framework in Sections 2 to 4. Subse-
quently, we present the learning setup we employ (Section 5),
the DTLS server implementations we tested and the effort
spent on learning state machines for them (Section 6), follo-
wed by a detailed analysis of the issues that were found in the
various DTLS implementations (Section 7). Therein, we pre-
sent state machines for three of these implementations, whilst
making the rest available online. Section 8 reviews related
work, and Section 9 ends this paper with some conclusions
and directions for further work.
2 Datagram Transport Layer Security
DTLS is an adaptation of TLS [15] for datagram transport
layer protocols. It is currently available in two versions:
DTLS 1.0 [35], based on TLS 1.1 [14], and DTLS 1.2, based
on TLS 1.2 [15]. Version 1.3 is currently under development.
This work focuses on TLS/DTLS version 1.2.
At a high level, both TLS and DTLS consist of two major
building blocks: (1) The Handshake is responsible for nego-
tiating session keys and cryptographic algorithms, and key
agreement is either based on public key cryptography (the
standard case), or on pre-shared keys. The set of algorithms
to be used is speciﬁed in a cipher suite. (2) The Record Layer
splits the received cleartext data stream into DTLS Records.
Handshake messages are also sent as records (typically unen-
crypted), and after the ChangeCipherSpec message is sent
in the handshake, the content of all subsequent records is en-
crypted using the negotiated session keys—where different
keys are used for the two communication directions.
The stateless and inherently unreliable datagram transport
layer has prompted the designers of DTLS to introduce several
changes to the original TLS protocol. Below, we describe
the handshake protocol and Record Layer, and discuss the
changes introduced which are relevant to our paper. However,
we remark that more differences exist [29, 36].
Figure 1: DTLS handshake. Encrypted messages are inside
braces. Optional messages are inside square brackets. Messa-
ges speciﬁc to DTLS are in blue.
Handshake protocol. Figure 1 illustrates the DTLS hands-
hake. The client initiates communication by sending Client-
Hello, which includes the highest supported DTLS version
number, a random nonce, the cipher suites supported by the
client, and optional extensions. In DTLS, the server responds
with a HelloVerifyRequest message, which contains a stateless
cookie. This message prompts the client to resend the Client-
Hello message, which then includes the stateless cookie, and
attempts to prevent Denial-of-Service attacks [36].
The server responds with the following messages: Server-
Hello contains the server’s DTLS version, the cipher suite
chosen by the server, a second random nonce, and optional
extensions. Certiﬁcate carries the server’s certiﬁcate, which
contains the server’s public key. In ServerKeyExchange the
server sends an ephemeral public key which is signed with
the private key for the server’s certiﬁcate. This signature also
covers both nonces. CertiﬁcateRequest asks the client to au-
thenticate to the server. This message is optional, and only
used when the server is conﬁgured to authenticate clients via
certiﬁcates. ServerHelloDone marks that no other messages
are forthcoming.
The client responds with a list of messages: Certiﬁ-
cate, ClientKeyExchange, CertiﬁcateVerify, ChangeCipher-
Spec, and Finished. The Certiﬁcate and CertiﬁcateVerify mes-
sages are optional and only transmitted when the server reque-
sts client authentication. They contain, respectively, a client
certiﬁcate and a signature computed over all previous messa-
ges with the client’s long term private key. The client sends its
public key share in the ClientKeyExchange message. Both par-
ties then use the exchanged information to derive symmetric
USENIX Association
29th USENIX Security Symposium    2525
ClientServerflight1ClientHelloflight2HelloVerifyRequestflight3ClientHelloflight4ServerHello[Certificate][ServerKeyExchange][CertificateRequest]ServerHelloDoneflight5[Certificate]ClientKeyExchange[CertificateVerify]ChangeCipherSpec{Finished}flight6ChangeCipherSpec{Finished}flight7{Application}keys that are used in the rest of the protocol. The client sends
ChangeCipherSpec to indicate that it will use the negotiated
keys from now in the Record Layer. Finally, it sends Finished
encrypted with the new keys, which contains an HMAC over
the previous handshake messages. The server responds with
its own ChangeCipherSpec and Finished messages. There-
after, both client and server can exchange authenticated and
encrypted application data.
Several DTLS handshakes can be performed within one
DTLS connection. Performing a subsequent handshake allows
the client and server to renew the cryptographic key material.
This process is also called renegotiation.
UDP datagrams are often limited to 1500 bytes [36]. Since
handshake messages can become longer than the datagram
size, a fragmentation concept has been introduced in DTLS.
This allows the implementation to split a handshake message
into several fragments and send it over the wire in distinct
records so that every record respects the maximum datagram
size. To support this, new ﬁelds have been introduced in the
handshake messages: message sequence, fragment offset, and
fragment length. Message sequence indicates the position
of the message within the handshake and is also used in a
retransmission mechanism.
Record Layer. All messages in DTLS are wrapped in so-
called records. During the ﬁrst DTLS handshake, the Record
Layer operates in epoch 0. This epoch number is included in
the header of the DTLS record. If cryptographic keys have
been negotiated and activated by sending a ChangeCipher-
Spec, the Record Layer increases the epoch number to 1 which
indicates that the contents of the actual record are encrypted.
Since the handshake may be repeated several times (renegoti-
ation), the epoch number may also be increased further.
While TLS has implicit sequence numbers, DTLS has expli-
cit sequence numbers. This is required since the protocol does