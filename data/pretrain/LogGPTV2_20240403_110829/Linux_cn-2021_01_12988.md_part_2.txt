```
[y] to run Loki in Docker, [n] to run Loki as a binary ([y]/n) n
Run Loki with systemd? ([y]/n) n
This is as far as this script can take you
You will need to setup an auto-start for Loki
It can be run with this command: /home/username/.loki-shell/bin/loki -config.file=/home/username/.loki-shell/config/loki-binary-config.yaml
```
脚本会输出你需要用来运行 Loki 的命令，你可以自己设置一个 init 脚本或其他方法来自动启动它。
如果你想的话，你可以直接运行该命令，从你当前的 shell 运行 Loki。
如果你有 systemd，你可以选择让脚本安装 systemd 服务或显示出你自己运行它的命令：
```
Run Loki with systemd? ([y]/n) y
Installing the systemd service requires root permissions.
[y] to run these commands with sudo [n] to print out the commands and you can run them yourself. ([y]/n) n
sudo cp /home/ed/.loki-shell/config/loki-shell.service /etc/systemd/system/loki-shell.service
sudo systemctl daemon-reload
sudo systemctl enable loki-shell
sudo systemctl start loki-shell
Copy these commands and run them when the script finishes. (press enter to continue)
```
##### Shell 集成
无论你如何安装 Loki，你现在应该看到一个提示：
```
Enter the URL for your Loki server or press enter for default (http://localhost:4100)
```
如果你已经设置了一个中心化的 Loki，你应在这里输入其 URL。然而，这个演示只是使用了默认的 URL，所以你可以按回车键。
它会输出很多文本来解释添加到你的 `~.bashrc` 或 `~.zshrc`（或两者）的所有条目。
好了！
```
Finished. Restart your shell or reload config file.
   source ~/.bashrc  # bash
   source ~/.zshrc   # zsh
```
#### 第三步：试试吧!
开始使用你的 shell，并使用 `CTRL+R` 查看你的命令。
打开多个终端窗口，在一个窗口中输入命令，在另一个窗口中输入 `CTRL+R`，你会看到你的命令立即可用。
另外，请注意，当你在终端之间切换并输入命令时，使用 `CTRL+R` 可以立即使用它们，但向上箭头的操作在终端之间不受影响。（如果你安装了 Oh My Zsh，情况可能就不一样了，因为它会自动将所有命令追加到历史记录中。）
多次按下 `CTRL+R` 可以在按时间排序和按相关性排序之间切换。
请注意，此配置将只显示当前主机的查询历史记录，即使你正在从多个主机向 Loki 发送 shell 数据。我认为默认情况下这是最合理的。如果你想改变这种行为，有很多地方可以调整；请参见 loki-shell 版本库了解更多。
它还安装了一个名为 `hist` 的别名。
```
alias hist="$HOME/.loki-shell/bin/logcli --addr=$LOKI_URL"
```
LogCLI 可以用来直接在 Loki 上查询和搜索你的历史，也允许你搜索其他主机。查看 LogCLI 的入门指南，了解更多关于查询的信息。
Loki 的日志查询语言（LogQL）提供了度量查询，可以让你做一些有趣的事情，例如，我可以看到在过去 30 天里我发出了多少次 `kc` 命令（我对 `kubectl` 的别名）。
![计数一个命令的使用次数](/data/attachment/album/202101/06/155026yuuvrrqf8lluqdrt.png "Counting use of a command")
### 额外增强
安装 Grafana，摆弄一下你的 shell 历史记录。
```
docker run -d -p 3000:3000 --name=grafana grafana/grafana
```
打开 Web 浏览器，访问 `http://localhost:3000`，使用默认的 `admin`/`admin` 用户名和密码登录。
在左边，导航到“ 配置   Configuration -> 数据源   Datasources ”，点击“ 添加数据源   Add Datasource ”按钮，然后选择 “Loki”。
对于 URL，你应该可以使用 `http://localhost:4100`（然而，在我的 WSL2 机器上，我必须使用计算机的实际 IP 地址）。
单击“ 保存并测试   Save and Test ”。你应该看到连接了数据源并找到了标签。
点击左边的“ 管理器   Explore ”图标，确保选择 Loki 数据源，并尝试这个查询：
```
{job="shell"}
```
如果发送 shell 命令的主机较多，可以使用“ 主机   Host ”标签将结果限制在某个主机上：
```
{job="shell", hostname="myhost"}.
```
你也可以用过滤表达式寻找特定的命令：
```
{job="shell"} |= "docker"
```
或者你可以从日志中探索度量的世界，看看你使用 shell 的频率：
```
rate({job="shell"}[1m])
```
![计算过去 20 天内 shell 的使用情况](/data/attachment/album/202101/06/155026dsbhmwqzww03wx2w.png "Counting use of the shell over previous 20 days")
想从一个事件中重建一个时间线？你可以通过特定的命令进行过滤，查看它的运行时间：
![计算命令的使用次数](/data/attachment/album/202101/06/155027ezp8puf6c0ojcfjz.png "Counting use of a command")
要想知道你还能做什么，并了解更多关于 Loki 查询语言的信息，请查看 LogQL 指南。
### 总结
更多的想法、故障排除和更新，请关注该 GitHub 版本库。这仍然是一项正在进行中的工作，所以请在那里报告发现的任何问题。
要了解更多关于 Loki 的信息，请查看文档、博客文章和该 GitHub 版本库，或者在 Grafana Cloud 中试用。
---
特别感谢我的同事 Jack Baldry 为这个想法播下的种子。我有 Loki 的知识来实现这个想法，但如果不是他的建议，我想我永远也不会做到这一点。
---
via: 
作者：[Ed Welch](https://opensource.com/users/ewelch) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出