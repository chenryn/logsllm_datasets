title:HFL: Hybrid Fuzzing on the Linux Kernel
author:Kyungtae Kim and
Dae R. Jeong and
Chung Hwan Kim and
Yeongjin Jang and
Insik Shin and
Byoungyoung Lee
HFL: Hybrid Fuzzing on the Linux Kernel
Kyungtae Kim† Dae R. Jeong‡ Chung Hwan Kim¶ Yeongjin Jang§ Insik Shin‡ Byoungyoung Lee∗†
†Purdue University
§Oregon State University
‡KAIST ¶NEC Laboratories America
∗Seoul National University
†PI:EMAIL ‡{dae.r.jeong, insik.shin}@kaist.ac.kr ¶PI:EMAIL
§PI:EMAIL ∗PI:EMAIL
Abstract—Hybrid fuzzing, combining symbolic execution and
fuzzing,
is a promising approach for vulnerability discovery
because each approach can complement the other. However,
we observe that applying hybrid fuzzing to kernel testing is
challenging because the following unique characteristics of the
kernel make a naive adoption of hybrid fuzzing inefficient:
1) having indirect control transfers determined by system call
arguments, 2) controlling and matching internal system state via
system calls, and 3) inferring nested argument type for invoking
system calls. Failure to handling such challenges will render both
fuzzing and symbolic execution inefficient, and thereby, will result
in an inefficient hybrid fuzzing. Although these challenges are
essential to both fuzzing and symbolic execution, to the best of
our knowledge, existing kernel testing approaches either naively
use each technique separately without handling such challenges
or imprecisely handle a part of challenges only by static analysis.
To this end,
this paper proposes HFL, which not only
combines fuzzing with symbolic execution for hybrid fuzzing
but also addresses kernel-specific fuzzing challenges via three
distinct features: 1) converting indirect control transfers to direct
transfers, 2) inferring system call sequence to build a consistent
system state, and 3) identifying nested arguments types of system
calls. As a result, HFL found 24 previously unknown vulnera-
bilities in recent Linux kernels. Additionally, HFL achieves 15%
and 26% higher code coverage than Moonshine and Syzkaller,
respectively, and over kAFL/S2E/TriforceAFL, achieving even
four times better coverage, using the same amount of resources
(CPU, time, etc.). Regarding vulnerability discovery performance,
HFL found 13 known vulnerabilities more than three times faster
than Syzkaller.
I.
INTRODUCTION
Fuzzing and symbolic execution are two representative
program testing techniques for vulnerability discovery. Fuzzing
generates a random input to test the target program (or kernel) in
hopes that such a random input triggers a corner case exhibiting
a vulnerability [21, 46, 52]. Often augmented with a coverage-
guided feature, random fuzz testings such as [21] have been
shown its effectiveness in finding vulnerabilities in a vast
number of complex real-world applications. However, such
random testing is limited in handling a tight branch condition
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24018
www.ndss-symposium.org
because generating an input to explore such a branch requires
guessing a single value out of a huge search space [30, 36, 38].
On the other hand, symbolic execution takes a deterministic
and complete testing approach [9, 13], unlike fuzzing which
relies on a random approach. In particular, symbolic execution
takes all input to the target program as symbols and keeps track-
ing the program’s execution context as symbolic expressions.
By interpreting an execution as a set of symbolic constraints,
symbolic execution can easily handle the tight branch condition
mentioned above; simply solving constraints will generate an
input satisfying the branch condition. Unfortunately, symbolic
execution suffers from a critical limitation, and that is state
explosion. In particular, when symbolic execution faces a
branch, it has to explore both sides of a branch (taken and not
taken), and thereby, its search complexity grows exponentially.
As a result, the application scope of symbolic execution is
usually limited to small size programs [11, 15, 28, 37].
Given such advantages and disadvantages of random fuzzing
and symbolic execution, hybrid fuzzing [32, 34] can be a
general extension of these two. Hybrid fuzzing combines
fuzzing and symbolic execution so as to complement the
aforementioned limitations of each approach. In other words,
when random fuzzing is blocked by a tight branch condition,
symbolic execution comes to the rescue; when symbolic
execution suffers from the state explosion issue, random fuzzing
can assist to pinpoint a specific path to explore and thus
avoid state explosion. By taking both approaches’ advantages,
hybrid fuzzing has demonstrated its effectiveness in discovering
vulnerabilities [44, 51, 53].
However, our observation is that applying hybrid fuzzing
to kernel testing is challenging mainly due to the inherent
characteristics of the kernel1. In the following, we summarize
three kernel-specific challenges that make hybrid fuzzing
ineffective.
First, the Linux kernel uses many indirect control transfers
to support polymorphism, and this renders traditional testing
inefficient. The kernel is designed to support a large number of
different devices and features, and thus throughout the kernel,
it is common to see polymorphism using a function pointer
table. However, random fuzzing cannot efficiently determine
a specific index value fetch the function pointer table if that
1 The discussion throughout this paper particularly focuses on the Linux
kernel, but most of descriptions and knowledge can be generally applied to
other kernels as well. If not mentioned specifically, the kernel implicates the
Linux kernel in this paper.
index comes from an input. Additionally, symbolic execution
can neither easily handle such a case because indexing a table
with symbols results in symbolic dereference and it requires
the exploration of the entire value space by the symbols.
Second, it is difficult to infer the right sequence (and de-
pendency) of syscalls2 so as to build the system states required
for triggering a vulnerability. Unlike userland programs, the
kernel maintains its internal system states during its lifetime
and the same syscalls may perform differently depending on
its invocation context. Therefore, if fuzzing invokes a syscall
without setting up the right pre-context of system states (which
should have been performed through syscalls as well), the
syscall would be early rejected by the kernel, hindering the
deep exploration of the kernel code. Symbolic execution does
not handle this issue either since the kernel has many data
variables to maintain such system states and they may cause
state explosion issues.
Third, nested structures in syscall arguments make interface
templating difficult. Certain syscalls take a large size of the
input from the user space and they use a nested structure in
their arguments — i.e., a field member in one structure points
to another structure. From the perspective of random fuzzing,
such a nested structure is difficult to construct as it has to
correctly guess the internal semantics imposed in the nested
structure (i.e., a pointer pointing to another or a length field
indicating the size of the buffer).
These challenges make hybrid fuzzing difficult, and to the
best of our knowledge, existing kernel testing approaches [26,
35, 40, 43, 49] either naively use each technique separately by
not handling such challenges or imprecisely handle a part of
challenges only by static analysis [16, 24, 33].
To resolve this, this paper proposes HFL, which takes a
hybrid fuzzing approach to test the Linux kernel. In particular,
it addresses the aforementioned kernel-specific challenges for
efficient hybrid fuzzing: 1) HFL converts indirect control-
flows to direct ones, through translating the original kernel
at the compilation time; 2) HFL reconstructs system states
by inferring the right calling sequence. Specifically, to reduce
the scope of symbolic variables, HFL performs static points-
to analysis beforehand such that it can selectively symbolize
data variables involved in system states; and 3) HFL retrieves
nested syscall arguments at runtime by exploiting the domain
knowledge on how the kernel handles the arguments.
We implemented HFL based on well-known kernel fuzzer
Syzkaller and symbolic executor S2E. Then we evaluated
various aspects of HFL in finding vulnerabilities of the Linux
kernel. First, with regards to vulnerability finding capability,
HFL discovered 24 previously unknown vulnerabilities, 17
of which are accordingly confirmed by the Linux kernel
community. In order to compare HFL with state-of-the-art
kernel fuzzers, we also performed a detailed evaluation as
follows. In terms of code coverage, HFL performs better than
Moonshine and Syzkaller, overall 15% and 26%, respectively.
Compared to kAFL, TriforceAFL and S2E, we observed that
the coverage improvement of HFL is more than 4 times. To
compare the vulnerability finding capability, we tested how
long it takes to uncover known 13 crashes in the Linux kernel.
2We will use syscall to indicate system call herein.
Our results showed that HFL found all those vulnerabilities, at
least three times faster than Syzkaller. Moreover, each feature
of HFL, addressing the challenge stemming from the kernel’s
unique characteristics, also showed substantial improvements.
The key contributions of our paper can be summarized as
follows.
• The First Hybrid Kernel Fuzzer. We propose a hybrid
kernel fuzzing, HFL, leveraging the benefits from both
random fuzz and symbolic testing techniques.
• Handling Kernel-specific Challenges. We identify three
key kernel-specific challenges in applying hybrid fuzzing,
and design HFL to resolve such challenges. In particular,
we convert indirect control-flows to direct ones, making
hybrid fuzzing more effective. We also keep the con-
sistency of the kernel’s internal states through inferring
syscall sequence during the process of HFL. Further, we
effectively reason about interfaces of syscall arguments,
which are often in the form of complex and multi-layered
structures.
• Experimental Results in Bug Discovery and Code
Coverage.
In our evaluation, HFL found 24 previously
unknown vulnerabilities in recent Linux kernels. Addi-
tionally, HFL achieves around 15% and 26% higher
code coverage over Moonshine and Syzkaller, and over
kAFL/S2E/TriforceAFL, it achieves even four times better
coverage using the same amount of resource (CPU, time,
etc.). In terms of vulnerability discovery performance,
HFL found the known 13 vulnerabilities over three times
faster than Syzkaller.
II. BACKGROUND
To overcome the limitations of random testing, a number of
recent studies [32, 34, 44, 51, 53] have been applying symbolic
execution to complement fuzzing. Composing such a hybrid is
popular based on the fact that traditional fuzzing and symbolic
execution have a negative correlation as we describe in the
following.
Traditional Fuzzing. Traditional Fuzzing generally refers to a
technique that generates random input to test the target program.
Because this random testing is performant and scalable, it
can quickly test a vast number of real-world applications.
In particular, representative fuzzers such as AFL [52], Clus-
terFuzz [21], and Syzkaller [46], have shown remarkable
results discovering many software vulnerabilities. However,
such random fuzzing techniques are often stuck due to the
inherent limitation; testing with randomly generated input
cannot explore program paths beyond a tight branch condition,
e.g., if (i == 0xdeadbeef), as it requires to guess a single
value out of a huge (232) space. This limitation can easily be
overcome by symbolic execution as we describe next.
Symbolic Execution. Symbolic Execution is a program testing
technique that can generate an input that drives the target
program’s execution to a certain program path. To do this,
symbolic execution takes all input to the target program as
symbols and keeps tracking the program’s runtime context as
symbolic expressions. For instance, when a symbolic execution
meets a conditional branch,
it will keep track of branch
conditions as path constraints with respect to symbols. When
2
the execution reaches a program path of interest, symbolic
execution can generate an input to drive the program to that
path by solving symbolic constraints on symbols. A critical
limitation of symbolic execution is that it suffers from the
state explosion problem. This happens whenever the execution
meets a conditional branch. More specifically, as the symbolic
execution meets a conditional branch, it has to explore both
sides of branches, doubling the number of paths (i.e., states) to
explore after passing such a branch. Typical programs contain
a vast number of conditional branches, and even worse, a loop
that processes the input will make the number of to-be-explored
paths grow far faster.
Hybrid Fuzzing. Hybrid Fuzzing, combining fuzzing and
symbolic execution, can complement the aforementioned lim-
itations of each approach. On one hand, random fuzzing is
often blocked by tight branch conditions, however, symbolic
execution can provide an input to explore such a branch. On the
other hand, symbolic execution suffers from the state explosion
problem, however, fuzzing can guide symbolic execution to
only explore a specific path by using an input being tested by
fuzzing (i.e., concolic execution), avoiding the state explosion
problem. Exploiting advantages of each approach, hybrid
fuzzing typically achieves better code coverage than solely
applying each technique. For example, hybrid fuzzers for
user-level applications such as Driller [44] and QSYM [51],
have been demonstrating outperforming results to typical fuzz
testings [39]. However, to the best of our knowledge, we note
that hybrid fuzzing has not been applied to the kernel.
III. MOTIVATION
In this section, we highlight challenges in applying hybrid
fuzzing to kernel as our motivation of designing HFL.
A. Challenges in Applying Hybrid Fuzzing to Kernel
Combining fuzzing and symbolic execution is a promis-
ing approach. However, achieving this in kernel fuzzing is
challenging. We found the following three challenges towards
employing hybrid fuzzing in the kernel:
1) Indirect control transfer determined by input,
2) Internal system state requirements, and
3) Nested argument type inference.
These challenges render naive hybrid fuzzing, which is a simple
integration of fuzzing and symbolic execution, does not work
well in the kernel. More importantly, they stem from the unique
characteristics in the kernel.
Before we elaborate each challenge in detail throughout this
section, we provide a summary of how those challenges make
both fuzzing and symbolic execution difficult as follows. First,
kernel uses lots of function pointers to support polymorphism
as a hardware abstraction layer. However, the use of function
pointer makes both fuzzing and symbolic execution inefficient,
and thereby, naive hybrid fuzzing also becomes inefficient.
Second, kernel execution often depends on a specific internal
state, but typically neither fuzzing nor symbolic execution
handles this, and failure to building such a state will render
testing counterproductive. Building an internal state for having
meaningful testing requires analysis in system call dependencies
(e.g., calling order, arguments, etc.), but hybrid fuzzing that
does not handle this can match the state only by a luck,
which will waste many testing executions. Third, some system
calls require their parameters to hold nested data structures,
and not analyzing such nested structures makes both fuzzing
and symbolic execution unable to generate test programs for
exploring kernel execution that depends on the nested structure.
Testing trials without considering these challenges will not
result in a meaningful kernel execution thus are not helpful for
testing progress.
Unsolved Challenges in Kernel Testing. Those challenges
are not only specific to hybrid fuzzing. They also render
techniques that solely runs either fuzzing or symbolic execution
inefficient. Nonetheless, most of them are not handled well in
fuzzing literature. Table I lists the characteristics of recent
kernel
testing methods. Techniques used in the first six
fuzzers, such as perf_fuzzer [49], Digtool [35], kAFL [40],
Razzer [26], PeriScope [43], and FIRM-AFL [54], do not
handle the aforementioned kernel-specific challenges. CAB-
Fuzz [28], which is an S2E-based symbolic execution fuzzer,
handles strict kernel branch conditions, but it does not handle
indirect branches nor the rest of the challenges. Regarding
the second challenge,
inferring system call sequence for
building internal system state, IMF [24] attempts to resolve
this by analyzing system call dependencies using syscall traces.
However, their analysis is based on example traces, which is
ad-hoc, and can only infer type and argument dependencies.
MoonShine [33] digs further in this challenge by analyzing
system call dependencies via static analysis. However, such a
static approach generates many false positives, and it does not
infer dependencies in the “value” of parameters, which are only
available at runtime. Regarding the third challenge, inferring
nested argument types, DIFUZE [16] applies static analysis to
infer types of complex syscall arguments. Unfortunately, many
of types used in the kernel are defined as abstract pointers
(e.g., void * or unsigned char *). Because the exact type
information (e.g., size, type flags, etc.) is only available at
runtime in such a case, such a static approach cannot precisely
determine the type of nested objects.
To the best of our knowledge, there is no prior work that
handles kernel-specific fuzzing challenges at runtime, which
is essential to enable an efficient kernel hybrid fuzzing. In
the following, we elaborate on the challenges in detail with
examples to specifically demonstrate why such examples block
both fuzzing and symbolic execution in exploring kernel code.
B. Indirect Control Transfer Determined by Input
The polymorphism pattern in Linux kernel, which often
transfers the kernel control flow via function pointer tables
accessed by system call arguments, makes applying traditional
testing techniques to kernels difficult.
Challenge 1. Discovering Indirect Control-Flow. Linux
kernel makes heavy use of a function pointer table accessed by
system call parameters, tightly related to its design philosophy.
To support a huge number of different devices or features,
i.e., supporting polymorphism with a single interface, most
components in Linux are decoupled with its abstract interface
and implementation layer, where the interface layer is generi-
cally used for accessing a specific implementation. This in fact
is similar to employing polymorphism commonly exercised
3
Technique
Target Kernel
perf_fuzzer [49]
Digtool [35]
kAFL [40]
Razzer [26]
PeriScope [43]
FIRM-AFL [54]
CAB-Fuzz [28]
IMF [24]
MoonShine [33]
DIFUZE [16]
Linux (perf_event set)
Windows
Win/Linux/macOS
Linux
Linux (drivers)
Firmware
Windows (drivers)
macOS
Linux
Android
HFL
Linux