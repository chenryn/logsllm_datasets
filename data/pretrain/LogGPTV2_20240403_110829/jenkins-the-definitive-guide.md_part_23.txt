a simple email message.
Jenkins provides good support for notification via Instant Messaging. The Instant Messaging plugin
provides generic support for communicating with Jenkins using IM. Protocol-specific plugins can then
be added for the various IM protocols such as Jabber and IRC.
8.7.1. IM Notification with Jabber
Many instant messaging servers today are based on Jabber, an open source, XML-based instant
messaging protocol. Jenkins provides good support for Jabber instant messaging, so that developers can
receive real-time notification of build failures. In addition, the plugin runs an IM bot that listens to the
chat channels and lets developers run commands on the Jenkins server via chat messages.
Setting up IM support in Jenkins is straightforward. First, you need to install both the Jenkins instant-
messaging plugin and the Jenkins Jabber notifier plugin using the standard plugin manager page and
restart Jenkins (see Figure 8.9, “Installing the Jenkins IM plugins”).
206
Figure 8.9. Installing the Jenkins IM plugins
Once this is done, you need to configure your Instant Messaging server. Any Jabber server will do.
You can use a public service like Google Chat, or set up your own internal messaging server locally
(the Java-based open source chat server OpenFire1 is a good choice). Using a public service for
internal communications may be frowned upon by system administrators, and you may have difficulty
getting through corporate fire walls. Setting up your own internal chat service, on the other hand,
makes great sense for a development team or organization in general, as it provides another channel of
communication that works well for technical questions or comments between developers. The following
examples will be using a local OpenFire server, but the general approach will work for any Jabber-
compatible server.
The first step involves creating a dedicated account on your Jabber server for Jenkins. This is just an
ordinary chat account, but it needs to be distinct from your developer accounts (see Figure 8.10, “Jenkins
needs its own dedicated IM user account”).
Figure 8.10. Jenkins needs its own dedicated IM user account
Once you have set up an IM account, you need to configure Jenkins to send IM notifications via this
account. Go to the main configuration page and tick the Enable Jabber Notification checkbox (see
Figure 8.11, “Setting up basic Jabber notification in Jenkins”). Here, you provide the Jabber ID and
password for your IM account. Jenkins can usually figure out the IM server from the Jabber ID (if it is
different, you can override this in the Advanced options). If you are using group chat rooms (another
1 http://www.igniterealtime.org/projects/openfire/index.jsp
207
useful communication strategy for development teams), you can provide the name of these chat rooms
here too. This way, Jenkins will be able to process instructions posted into the chat rooms as well as
those received as direct messages.
Figure 8.11. Setting up basic Jabber notification in Jenkins
This is all you need for a basic setup. However, you may need to provide some extra details in the
Advanced sector for details that are specific to your installation (see Figure 8.12, “Advanced Jabber
configuration”). Here, you can specify the name and port of your Jabber server, if these cannot be derived
from the Jenkins Jabber ID. You can also provide a default suffix that can be applied to Jenkins user IDs
to generate the corresponding Jabber IDs. Most importantly, if you have secured your Jenkins server,
you will need to provide a proper Jenkins username and password so that the IM bot can respond to
instructions correctly.
Figure 8.12. Advanced Jabber configuration
208
Once this is configured, you need to set up a Jabber notification strategy for each of your build jobs.
Open the build job configuration page and click on the Jabber Notification option.
First of all, you define a recipient list for the messages. You can send messages to individuals (just
use the corresponding Jabber ID, such as PI:EMAIL) or to chat rooms that you have
set up. For chat rooms, you normally need to add a “*” to the start of the chat room ID (e.g.,
“*PI:EMAIL”). However, if the chat room ID contains “@conference.”,
Jenkins will work out that it is a chat room and append the “*” automatically. The chat room approach
is more flexible, though you do have to trust developers to be connected permanently to the chat room
for this strategy to be truly effective.
You also need to define a notification strategy. This determines which build results will cause a message
to be sent out. Options include:
all
Send a notification for every build.
failure
Only send notifications for failed or unstable builds.
failure and fixed
Send notifications for every failed or unstable builds, and the first successful build following a
failed or unstable one.
change
Send notification whenever the build outcome changes.
If you are using chat rooms, you can also ask Jenkins to send notifications to the chat rooms whenever
a build starts (using the “Notify on build starts” option).
For SCM-triggered builds, Jenkins can also notify additional recipients, using the default suffix
discussed earlier to build the Jabber ID from the SCM username. You can opt to notify:
SCM committers
All users having committed changes for the current build, and therefore suspected of breaking
the build.
SCM culprits
SCM committers of all builds since the last successful one.
SCM fixers
Commiters to the first successful build after a failed or unstable one.
Upstream committers
Also notifiers committers to upstream builds as well as the current one. This works automatically
for Maven build jobs, but needs fingerprinting to be activated for other build types.
209
At the time of writing, you can only have one notification strategy, so some of the advanced options we
saw in Section 8.3, “More Advanced Email Notification” are not yet possible with IM.
Developers will be notified via their favorite IM client (see Figure 8.13, “Jenkins Jabber messages in
action”). Developers can also interact with the build server via the chat session, using a set of simple
commands. Some examples of a few of the more useful commands are shown here:
• !build game-of-life—Start the game-of-life build immediately.
• !build game-of-life 15m—Start the game-of-life build in 15 minutes.
• !comment game-of-life 207 'oops'—Add a build description to a given build.
• !status game-of-life—display the status of the latest build for this build job.
• !testresult game-of-life—display the full test results for the latest build.
• !health game-of-life—display a more complete summary of the health status of the latest
build.
You can get a full list of commands by sending the !help message to the Jenkins user.
Figure 8.13. Jenkins Jabber messages in action
8.7.2. IM Notification using IRC
Another popular form of Internet-based Instant Messaging is Internet Relay Chat, or IRC. IRC is
traditionally focused on group discussions (though direct messaging is also supported), and is a very
popular form of communication for developers, particularly in the Open Source world.
210
The Jenkins IRC plugin lets you interact with your Jenkins server via an IRC channel, both to receive
notification messages and to issue commands to the server. Like the Jabber plugin, you also need to
install the Instant Messaging plugin for this to work.
8.8. IRC Notification
Contributed by Juven Xu
Internet Relay Chat (or IRC) is a popular form of instant messaging, primarily designed for group
communication in channels. For example, Jenkins has a channel set up on Freenode2 so users and
developers can discuss Jenkins related topics. You will see many users ask questions and most of the
time more experienced users will be prompt in providing useful answers.
Just like instant messaging through Jabber, you can configure Jenkins to “push” notification through
IRC. Some IRC clients such as xchat3 support alert configuration so that when the message arrives, it
can blink the tray icon or make a beep sound. To set up IRC support on Jenkins, first you need to install
the IRC plugin4 and the Instance Messaging plugin5. Simply go to the standard plugin manager, tick
their checkbox and then restart Jenkins (see Figure 8.14, “Install the Jenkins IRC plugins”).
Figure 8.14. Install the Jenkins IRC plugins
Once it’s done, you need to enable the IRC plugin and configure it to fit into your own environment.
Basically, this involves providing the hostname and port of the IRC server you are using, a dedicated
IRC channel, and a nickname for the IRC plugin. It’s a good practice to set up a dedicated channel for
CI notification, so as people chat in other channels, they won’t be disturbed. You may also want to
configure extra details in the Advanced sector. All of these are available in the Configure System page
(see Figure 8.15, “Advanced IRC notification configuration”).
2 http://jenkins-ci.org/content/chat
3 http://xchat.org/
4 http://wiki.jenkins-ci.org/display/JENKINS/IRC+Plugin
5 http://wiki.jenkins-ci.org/display/JENKINS/Instant+Messaging+Plugin
211
Figure 8.15. Advanced IRC notification configuration
In addition to the hostname, port, channel, and nickname we mentioned earlier, you can also configure
IRC server password or NIckServ password if your environment requires them. Command prefixes need
to be configured if you want to interact with the server via IRC messages. This is basically the same as
using Jabber (see Section 8.7, “Instant Messaging”). Finally, you may want to let the IRC plugin use the
/notice command instead of the default /msg command. /notice is the same as /msg except that
the message will be contained in dashes, which will prevent a response from most robots.
Once the global configuration is ready, you can enable IRC notification for each build job and set up
a notification strategy. Open the build job configuration page, go to the Post-build Actions section and
click on the IRC Notification option. If you want to set up a notification strategy rather than using
the default one, click the “Advanced...” button (see Figure 8.16, “Advanced build job IRC notification
configuration”).
212
Figure 8.16. Advanced build job IRC notification configuration
Notification strategies (when to send notification messages, and to whom) are discussed in Section 8.7,
“Instant Messaging”. Both the Jabber plugin and the IRC plugin depend on the Instant Messaging Plugin,
so they share a number of common core features. Some options are specific to IRC plugin, however.
Here, for example, you can define a customized channel if you don’t like the global default. Finally, for
a channel notification message, you can choose what information to send in the notification messages.
Your options are build summary, SCM changes, and failed tests.
Once you save the configuration, you should be good to go. Based on what you’ve configured, this
plugin will join the appropriate IRC channels and send notification messages for build jobs.
In Figure 8.17, “IRC notification messages in action”, for example, the IRC plugin joins the #ci-book
channel on freenode. First, user juven committed some change with scm message “feature x added”
and IRC plugin let everyone on the channel know that the build was successful. Then juven committed
another change for feature y, but this time the build failed. John noticed it and fixed the build error. The
IRC plugin now happily said “Yippie, build fixed!” Note that some lines in this screen are highlighted,
this is because I logged in as user “juven” and I configured my XChat IRC client to highlight messages
containing my nickname.
213
Figure 8.17. IRC notification messages in action
8.9. Desktop Notifiers
The best push notification strategies integrate smoothly into the developer’s daily work environment.
This is why instant messaging can be an effective strategy if developers are already in the habit of using
instant messaging for other work-related activities.
Desktop notification tools also fall into this category. Desktop notification tools are tools that run locally
on the developer machine, either as an independent application or widget, or as part of the developer’s
IDE.
If you are using Eclipse, the Jenkins Eclipse plugin6 displays a health icon at the bottom of the Eclipse
window. If you click on the icon, you can see a detailed view of the Jenkins projects (see Figure 8.18,
“Jenkins notifications in Eclipse”). In the Eclipse preferences, you provide the URL of your Jenkins
server along with any required authentication details. The configuration is fairly simple, however, and
you can only connect to a single Jenkins instance for a given Eclipse workspace.
6 http://code.google.com/p/hudson-eclipse/
214
Figure 8.18. Jenkins notifications in Eclipse
The Jenkins Tray Application plugin (see Figure 8.19, “Launching the Jenkins Tray Application”) lets
you start up a small Java client application using Java Web Start from your Jenkins dashboard.
215
Figure 8.19. Launching the Jenkins Tray Application
This application sits in your system tray, lets you view the current state of your builds at a glance,
and also brings up pop-up windows notifying you of new build failures (see Figure 8.20, “Running the
Jenkins Tray Application”).
Figure 8.20. Running the Jenkins Tray Application
216
This is certainly a useful application, but it suffers from a few limitations. At the time of writing, the
Jenkins Tray Application did not support accessing secured Jenkins servers. In addition, the developer
needs to remember to restart it each morning. This may seem a minor issue, but in general, when it
comes to notification strategies, the less you have to ask of your developers the better.
One of the best options for Jenkins desktop notification is to use a service like Notifo (see Section 8.10,
“Notification via Notifo”), which provides both desktop and mobile clients. We will see how this works
in detail in the next section.
8.10. Notification via Notifo
Notifo7 is a fast and economical service to send real-time notifications to your smartphone or desktop.
In the context of a Jenkins server, you can use it to set up free or low-cost real-time notification for
your Jenkins build results. Individual accounts (which you need to be able to receive notifications) are
free. You need to set up a service account to send notification messages from your Jenkins server. This
is where Notifo earn their keep, though at the time of writing a service account can send up to 10,000
notifications per month free of charge, which is usually plenty for an average Jenkins instance. One of
the strong points of a real-time notification service like Notifo is that notification messages can be sent
to the same users on different devices: smartphones and desk top clients, in particular.
Setting up Jenkins notification with Notifo is relatively straightforward. First, go to the Notifio website
and sign up to create an account. Each team member who wants to be notified will need their own Notifo
account. They will also need to install the Notifo client on each device on which they need to receive
notification messages. At the time of writing, Notifo clients were available for Windows and Mac OS
X desktops, and iPhones, with support for Linux and other smartphones on the way.
Next, you need to set up a Notifo service account for your Jenkins server. You can do this with one of
your developer accounts, or create a new account for the purpose. Log on to the Notifo website, and
go to the My Services menu. Here, click on Create Service (see Figure 8.21, “Creating a Notifo service
for your Jenkins instance”), and fill in the fields. The most important is the Service Username, which
needs to be unique. You can also specify the Site URL and the Default Notification URL to point to your
Jenkins instance, so that users can open the Jenkins console by clicking on the notification message.
7 http://www.notifo.com
217
Figure 8.21. Creating a Notifo service for your Jenkins instance
To receive notification messages from the Jenkins server, developers now need to subscribe to this
service. You can then add developers to the list of subscribers in the service Subscribers page, by
sending them subscription requests. Once the service has been created and the users are all subscribed,
you can configure your project to send out Notifo notifications (see Figure 8.22, “Configuring Notifo
notifications in your Jenkins build job”). You need the provide the API username of the Jenkins service
you set up, as well as the API Secret, both of which you can see in the Notifo Service Dashboard.
Figure 8.22. Configuring Notifo notifications in your Jenkins build job
Once this is set up, Jenkins will send almost real-time notifications of build failures to any Notifo clients
the developer is running, whether it is on a desktop or on a mobile device (see Figure 8.23, “Receiving
a Notifo notification on an iPhone”).
218
Figure 8.23. Receiving a Notifo notification on an iPhone
At the time of writing, sophisticated notification strategies are not supported—you just provide a list
of Notifo usernames who need to be notified. Nevertheless, this remains a very effective notification
tool for frontline developers.
8.11. Mobile Notification
If your Jenkins server is visible on the Internet (even if you have set up authentication on your Jenkins
server), you can also monitor your builds via your iPhone or Android mobile device. The free Hudson
Helper application (see Figure 8.24, “Using the Hudson Helper iPhone app”), for example, lets you list
your current build jobs (either all of the build jobs on the server, or only the build jobs in a particular
view). You can also view the details of a particular build job, including the current status, failing tests
and build time, and even start and stop builds.
219
Figure 8.24. Using the Hudson Helper iPhone app
For Android phones, you can also install the Hudson Mood widget will also provide updates and alerts
about build failures.
Note that these mobile applications rely on a data connection, so while they will typically work well
locally, you should not rely on them if the developer in question is out of the country.
8.12. SMS Notification
These days, SMS is another ubiquitous communication channel which has the added advantage of
reaching people even when they are out of the office. For a build engineer, this can be a great way to
monitor critical builds, even when developers or team leads are away from their desks.
SMS gateways8 are services that let you send SMS notifications via specially-formatted email addresses
(for example, PI:EMAIL might send an SMS message to 123456789). Many
mobile vendors provide this service, as do many third-party service providers. There is no built-in
support for SMS Gateways in Jenkins, but the basic functionality of these gateways makes integration
relatively easy: you simply add the special email addresses to the normal notification list. Alternatively,
using the advanced email configuration, you can set up a separate rule containing only the SMS email
8 http://en.wikipedia.org/wiki/SMS_gateway
220
addresses (see Figure 8.25, “Sending SMS notifications via an SMS Gateway Service”). Doing this
makes it easier to fine-tune the message contents to suit an SMS message format.
Figure 8.25. Sending SMS notifications via an SMS Gateway Service
Once you have done this, your users will receive prompt notification of build results in the form of SMS
messages (see Figure 8.26, “Receiving notification via SMS”). The main disadvantage of this approach
is arguably that it is not free, and requires the use of a third-party commercial service. That said, it
is really the only notification technique capable of reaching developers when they are out of Internet
range or who do not have a data-enabled smartphone. Indeed, this technique is popular among system