caching, and enable highlighting of suspicious links.
SpoofGuard has two methods to convey its analysis to
the user. To keep SpoofGuard as unobtrusive as possi-
ble, we use a trafﬁc light symbol on the browser bar to
indicate the degree of spoof by color: red, yellow, and
green. The actual colors displayed are determined by
the user’s threshold settings. Should the user want to
read the details of SpoofGuard’s analysis, he or she can
click the trafﬁc light, and more information appears. In
extreme situations, SpoofGuard may also halt a post and
ask the user if she wishes to continue. In combination,
the trafﬁc light and popup provide an effective means of
alerting the user to suspicious web pages, while avoiding
the annoyance of consistent popup windows.
4.3 Implementation difﬁculties and solutions
Detecting whether the user has clicked on an e-mail
link A typical phisher sends unsolicited e-mails that
contain links to the spoof site. SpoofGuard therefore
attempts to determine whether the user was directed to
a site from an e-mail message. One way is to check
the referrer ﬁeld against a list of host names associ-
ated with web-based e-mail providers. However, some
8
providers (e.g., Hotmail) provide links to other parts of
their service using numeric IP addresses instead of sym-
bolic host names. Given a numeric address, SpoofGuard
performs a reverse-DNS lookup to reveal the host name.
Another way to estimate the likelihood that an email link
was used is to see whether the referrer ﬁeld is empty.
The referring page ﬁeld is empty with the browser is ini-
tially started, and when the user types in a url. Although
an empty referrer ﬁeld does not always imply that the
user has clicked on an e-mail link, the ﬁeld is empty if
the user launches the browser through a link in his or
her e-mail software. While it is conservative to treat an
empty referrer ﬁeld in the same way as a link from Hot-
mail, this may give false alarms since the referrer ﬁeld
is empty whenever a new Internet Explorer window is
opened.
Different input names for usernames and passwords
Since different sites have different input ﬁeld names
for usernames and passwords, twenty username and ten
password variations are predeﬁned in SpoofGuard, and
they are used to identify sensitive information in the
obtained post data structure. These predeﬁned names
are used by many online bank forms, commercial sites
such as Amazon and eBay, and web-based e-mail sites.
SpoofGuard currently does not recognize username and
password combinations from sites that use other input
ﬁeld names.
Frames Frames have historically proven troublesome
to both web browsers and users. For simplicity, Spoof-
Guard currently treats frames as independent pages,
without parsing the frameset to determine its frames.
For example, if a frameset includes frames located on
different hosts, SpoofGuard may ﬂag this situation as
a possible malicious redirect. Related to this is a cus-
tomizable security setting in Internet Explorer, “Navi-
gate sub-frames across different domains”, which gives
the user a choice to allow or disallow this behavior. We
expect to improve the handling of frames in a future ver-
sion of SpoofGuard.
POST data vs AutoComplete SpoofGuard compares
outgoing passwords with its database of  triples rather than with values
stored in Internet Explorer’s AutoComplete repository.
When a user submits a form, SpoofGuard obtains
the post data as a SafeArray structure, which Internet
Explorer passes to SpoofGuard via an event handler.
SpoofGuard then scans it for sensitive information, and
stores a resulting hash into a ﬁle. There are two ad-
vantages to using post data. First, post data checking
is more secure, because SpoofWatch hashes the pass-
Figure 3. SpoofGuard conﬁguration pop-up
9
words, whereas AutoComplete encrypts them with a
known key that is stored on the user’s computer. Sec-
ond, many Internet Explorer users turn off AutoCom-
plete either due to frequent pop-up windows that ask for
the users permission before storing the data, or for pri-
vacy. Therefore, SpoofGuard is more secure while ef-
fectively serving a larger user base.
Redirects Currently, a page that redirects to another
page may cause SpoofGuard to ﬂash yellow or red or
pop-up a small post data warning box, depending on
user conﬁguration. In the next version of SpoofGuard,
we plan to recognize redirects in html pages more effec-
tively and eliminate these spurious warnings.
5 Evaluation
We evaluated the effectiveness of our plug-in using
several criteria. First, does the plug-in detect the sample
spoofs found in the wild? Second, is the false alarm rate
sufﬁciently small? Third, how difﬁcult is it to write a
spoof page that is not detected by our plug-in? Finally,
how does our plug-in affect browser performance. We
discuss each of these below.
5.1 Detection of spoof attacks
In addition to debugging tests to make sure each
SpoofGuard measurement works properly, we evaluated
SpoofGuard’s overall effectiveness by testing it against
fourteen actual spoof web pages sent to us by the U.S.
Secret Service. Nine of the fourteen pages are spoofs
of eBay’s sign-in page. Two spoof pages purport to
be “identity and billing veriﬁcation” pages that request
a large amount of personal information, such as eBay
username and password, residence information, credit
card information, ATM card PIN, bank account rout-
ing number, social security number, mother’s maiden
name, date of birth, and driver’s license number and is-
suing state. One spoof site states that because of “regu-
lar maintenance of our security measures, your account
has been randomly selected for this maintenance,” and
requests a username and password. The last two suggest
that the user could win a car if a username and password
are provided.
We tested SpoofGuard on all fourteen spoof pages
using the default settings and recorded all SpoofGuard
messages for each page. Since SpoofGuard does not an-
alyze html ﬁles stored locally on a user’s computer, we
set up a web server that hosted the fourteen spoof pages.
Since most spoof web sites do not use https, our server
used ordinary insecure http. Each page was retrieved
from our web server by entering the url directly into
the address bar in Internet Explorer. In order to force
SpoofGuard to analyze each page, we cleared Internet
Explorer’s history and restarted the browser before load-
ing each spoof page; this kept the history of previous
tests from biasing the analysis of another spoof page on
the same spoof server (our test server). Finally, in order
to provide SpoofGuard with some information about the
honest site, we visited eBay’s web site and navigated to
the sign-in page before each eBay spoof. At the honest
eBay sign-in, we performed a mock sign-in using ‘hello’
and ‘test’ as the username and password, respectively.
Although eBay did not accept these as a legitimate user
name and password pair, they were recorded by Spoof-
Guard, which was all that we needed for the test.
The results of our test were:
• All fourteen spoof pages have password input ﬁelds
and SpoofGuard successfully noted this. Spoof-
Guard also noted that the form submissions were
insecure because the pages were retrieved from our
web server without using secure http (https).
• All fourteen pages include inlined images, such
as the eBay logo, that are retrieved directly from
eBay servers. These images were already in Spoof-
Guard’s image ﬁle as a result of the initial naviga-
tion to the honest site. In the test, SpoofGuard cor-
rectly noted that the spoof pages with eBay images
matched those images from the honest eBay site.
• We performed a mock sign-in on the spoof pages
to test SpoofGuard’s outgoing password check. For
each page, we used ’hello’ and ’test’, the same pair
used on the honest eBay site in the initialization
part of the experiment. SpoofGuard successfully
identiﬁed the user name and password from the
honest site and popped up a warning to the user,
as shown in Figure 4.
We believe that the SpoofGuard image check and out-
going password check are important strengths, since to-
gether these checks stop outgoing data and they are not
redundant with information that may be found in the
browser address bar, status bar, or rendered html. While
the image checker’s hashing algorithm can be improved
to detect slight modiﬁcations to the images, the current
checks successfully catch spoofs observed in the wild.
5.2 False alarm rate
The false alarm rate depends in part on how frequently
the user establishes new accounts and how frequently
the user clears the browser history cache. We have used
SpoofGuard ourselves over several weeks. With de-
fault settings, there are occasional spurious yellow lights
while browsing, and sometimes the ﬁrst use of a legiti-
mate site with user name and password input will trigger
a false post warning. Many of the unnecessary warnings
are the result of frame or redirection problems (noted in
section 4.3) that we expect to resolve in the next version
10
Figure 4. SpoofGuard detects honest user name and password on spoof site.
11
of SpoofGuard. If the user opens a new account, and in-
tentionally uses the same password as another account,
this will also produce an unwanted warning. However,
second and subsequent visits (without clearing the his-
tory cache) do not lead to additional false alarms for this
situation.
5.3 Security
The solutions described in Section 3 are certainly not
fool-proof. An attacker with a reasonable understanding
of web-site construction and a day or two of time can
circumvent our current tests. For example, here are sim-
ple ways of fooling the SpoofGuard password and image
checks:
• Some of our tests compare user input on a particu-
lar page to passwords that the user used at previous
sites. An attacker could fool these tests by break-
ing the password input ﬁeld on the spoof page into
two adjacent ﬁelds that would look contiguous to
the user, but would cause our password compari-
son tests to fail. Similarly, javascript on the spoof
page could encode post data sent from the page so
as to defeat our post data tests.
• Some of our checks compare images (logos) on a
spoof page to images that appear on honest pages.
An attacker could defeat these tests by slicing an
image into adjacent vertical slices and presenting
these slices one next to the other. None of the indi-
vidual slices would match images in the plug-in’s
database, but to the user the complete image would
look authentic. This would defeat some of our im-
age tests.
These limitations notwithstanding, our methods clearly
make it harder for attackers to setup effective spoof sites.
Given the extremely low level of sophistication we’ve
seen so far in actual spoof attacks, it is difﬁcult to pre-
dict how quickly phishers would respond to deployment
of SpoofGuard or related methods. In addition, should
more sophisticated spoof sites appear, the framework we
have adopted in SpoofGuard can be extended with more
sophisticated checks and defensive password manage-
ment.
5.4 Performance
As SpoofGuard users, we have not noticed any per-
formance degradation as a result of the browser plug-in.
We attempted to conﬁrm this subjective impression by
making rudimentary measurements. We inserted tim-
ing checks at the browser BeforeNavigate2 and Docu-
mentComplete events, measuring CPU usage and nav-
igation speed for retrieving and processing each page.
We compared performance with SpoofGuard installed
to performance with a dummy plug-in containing only
the timing checks. To try to account for the fact that net-
work latency shows up in the timing numbers, we also
ran a second round of tests with all pages in the cache.
Although the measurements do not capture SpoofGuard
timing with great accuracy, the numbers we obtained
seem to support our belief that there is no noticeable
degradation of user browsing experience.
The performance tests were carried out on TrafﬁcMar-
ketplace’s list of 30 most visited sites, using a 1GHz
Pentium III with 128MB of RAM, connected through
a 10 Mbps Ethernet card. Retrieving pages over the net-
work, it took an average of 779 milliseconds to navigate
from one page to another without SpoofGuard installed,
and 911 milliseconds with SpoofGuard. With pages in
the cache, these numbers dropped to 484 milliseconds
and 601 milliseconds, respectively. These measure-
ments suggest that the sequence of checks carried out by
SpoofGuard take on the order of 100–250 milliseconds
on an older processor. Furthermore, the CPU usage was
30% without SpoofGuard, and 40% with SpoofGuard,
although the variance in CPU usage was high while the
variance in timing numbers was low. Overall, however,
it seems safe to conclude that SpoofGuard does not im-
pose a signiﬁcant performance penalty. The non-expert
users for whom the plugin is designed are unlikely to
notice the computation overhead; they are particularly
unlikely to notice the SpoofGuard overhead if their net-
work connections are slow.
6 Server-side assistance
The techniques we have implemented and tested are
designed to detect web-spooﬁng attacks without any co-
operation from web sites that are spoofed. However, we
could do much more with the help of e-commerce web
sites. For example, the two methods suggested below
add simple tags to honest web pages. The additional in-
formation gathered from honest sites can be used detect
spoofs more effectively.
6.1 Mark form ﬁelds with conﬁdentiality tags
The outgoing password check compares outgoing data
to stored (and hashed) sensitive data sent previously to
honest login pages. E-commerce sites can help Spoof-
Guard identify sensitive ﬁelds by marking them with an
additional html attribute.
We propose adding a CONFIDENTIALITY attribute to
the  html element. For a sensitive ﬁeld (pass-
word, username, creditcard) the html element would
look like
where CONFIDENTIALITY is one of username, pass-
12
word, creditcard, SSN and possibly other pre-speciﬁed
strings. The conﬁdentiality attribute helps SpoofGuard
determine how to process the ﬁeld. Note that we do not
use the NAME attribute to infer conﬁdentiality so as to
give the site complete freedom over its ﬁeld names.
Conﬁdentiality tags could improve the detection rate
and reduce the false alarm rate. Speciﬁcally, if data not
currently tracked by SpoofGuard is marked conﬁdential,
SpoofGuard will be able to warn the user when this con-
ﬁdential data is exposed. If conﬁdentiality tags become
widely used, then SpoofGuard could become less likely
to spuriously track information that is not conﬁdential,
reducing the likelihood of false alarms. The proposed
html conﬁdentiality tags may also have other uses be-
yond spoof identiﬁcation. For example, a kiosk browser
could close a window and ﬂush short-term cookies after
a certain idle time if entry to the site involved conﬁden-
tial data.
6.2
Image tagging
The image check described in Section 3.2 is useful
in identifying spoof login pages since these pages need
to reproduce the look-and-feel of the honest site. We
already mentioned in Section 3.2 that e-commerce sites
can help strengthen this mechanism by choosing images
that can be hashed robustly.
In addition, e-commerce
sites can help make this test stateful rather than stateless.
To do so we propose adding a new attribute to the IMG
element in an html page. The attribute enables honest
sites to identify images on their login page that are not
supposed to appear on login pages outside the site. For
example, the IMG element pointing to the eBay logo on
eBay’s login page would look like:
The SPOOFGUARD attribute indicates that if this image
appears on a non-ebay web page requesting sensitive
user input then it is likely the page is a spoof. Poten-
tially, the SPOOFGUARD attribute could include a value
(low, high) thus giving the site administrator some con-
trol over the score added to the total spoof score for the
page. We note that this attribute should only be used on
sensitive html pages such as a login page.
Next, we describe how the SpoofGuard plug-in would
use this attribute. The difﬁculty is in ensuring that this
attribute is not used for denial of service. We slightly
reorganize the plug-in’s image database. Each record in
the database is as follows (one record per image):