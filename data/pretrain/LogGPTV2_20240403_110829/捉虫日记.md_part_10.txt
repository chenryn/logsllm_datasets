因为这个漏洞已被修复，相关的Solaris补丁也有了，今天我在自己的网站上
发布了详细的安全报告[14]。这个bug的编号是CVE-2008-568。Sun用了471天才
给出了操作系统的修复版本（见图3-7），太拖香了！
Sun确认漏洞
Sun得abug存在
Sun打补T
新的Solaris内核发布我公开安全报告
√
09.04.200709.05.200706.12.2008
12.17.2008
图3-7从告知这个bug到发布修复版本操作系统的时间表
附注
[1]OpenSolaris的源代码可从以下网址下载：http://dlc.sun.com/osol/on/downloads/（短址为
http://bit.ly/K3hNjH)
[2]见http://en.wikipedia.org/wiki/loctl（短址为http:/bit.ly/ACraTY）。
---
## Page 64
3.5补充49
[3]更多IP-in-IP隧道机制的信息，参考http://download.oracle.com/docs/cd/E19455-01/806-0636/
6j9vq2bum/index.html（短址为http://bit.ly/wOoRvC）
[4]见Sun公司的《STREAMS编程指南》（STREAMS ProgrammingGuide），可从以下网址下载：
http:/download.oracle.com/docs/cd/E19504-01/802-5893/802-5893.pdf（短址为http://bit.ly/z0XAVb）。
[5]使用源代码浏览工具OpenGrok查阅OpenSolaris源代码：http://cvs.opensolaris.org/source/
bit.ly/zJGP7D)
[6]使用源代码浏览工具OpenGrok查阅OpenSolaris 源代码：http://cvs.opensolaris.org/source/
xref/onnv/onnv-gate/usr/src/uts/common/sys/stream.h?r-4823%3A7c9aaea16585（短址为http:/
bit.ly/zJGP7D)。
[7]使用源代码浏览工具OpenGrok查阅OpenSolaris源代码：http://cvs.opensolaris.org/source/
xref/onnv/onnv-gate/usr/src/uts/common/inet/ip/ip_if.c?r-5240%3Ae7599510dd03（短址为
http://bit.ly/wTxGWn)。
[8]官方的《Solaris ModularDebugger指南》可从以下网址得到：http://docs.oracle.com/cd/
[9]更多的信息，参考twiz和sgrakkyu的论文“AttackingtheCore:KemelExploitingNotes”，可从以
下网址得到：http://www.phrack.com/issues.html?issue=64&id=6（短址为http://bit.ly/y58rNC）
[10]关于Solaris进程虚拟地址空间的更多信息见http://cvs.opensolaris.org/source/xref/onnv/
onnv-gate/usr/src/uts/i86pc/os/startup.c?r=10942:eaa343de0d06（短上为http://bit.ly/xrvJbm）。
[11]使用源代码浏览工具OpenGrok查阅OpenSolaris源代码：http://cvs.opensolaris.org/source/
xref/onnv/onnv-gate/usr/src/uts/common/os/putnext.c?r=0%3A68f95e015346(短址为http:/bit.ly/
xZjyNm)。
[13]Sun提供的补丁可从以下网址得到：http://cvs.opensolaris.org/source/dif/onnv/onnv-gate/usr/
src/uts/common/inet/ip/ip_if.c?r1=/onnv/onnv-gate/usr/src/uts/common/inet/ip/ip_if.c@5240&r2
=/onnv/onnv-gate/usr/src/uts/common/inetip/ip_if.c@5335&format=s&full=0（短址为http:/bit.
ly/xg8TeR)。
[14]我详细描述这个Solaris内核漏洞细节的安全报告可从以下网址得到：http://www.trapkit.
de/advisories/TKADV2008-015.txt（短址为http://bit.ly/ymNVc8）。
---
## Page 65
空指针万岁
2009年1月24日，星期六
今天我发现了一个非常“完美”的bug：一个导致空指针解引用的类型转换
漏洞（见A.2节）。通常情况下这不是个大问题，因为这个bug影响了一个用户空
间库，这往往意味着在最坏情况下，它会使一个用户空间应用程序崩溃。但是这
个bug和一般用户空间的空指针解引用不同，它可能被利用来执行任意代码。
这个漏洞影响FFmpeg的多媒体库。很多流行
还有其他可利用的用户
的软件项目使用这个库，包括GoogleChrome、
空间空指针解引用的例子，
VLC媒体播放器、MPlayer和Xine等。也有传言
见MarkDowd的MacGyver
说YouTube用FFmpeg 作为后台转换软件。[]
exploit for Flash（http://blogs.
iss.net/archive/flash.html,t止
为http://bit.ly/k3JmcM）.或
4.1发现漏洞
者Justin Schuh的Firefox bug
我发现这个漏洞的步骤如下。
(http://blogs.iss.net/archive/
口第一步：列出FFmpeg的解复用器。
cve-2008-0017.html，t址止为
口第二步：识别输入数据。
http://bit.ly/J6VsnJ>.
PD
口第三步：跟踪输人数据。
---
## Page 66
4.1发现漏洞51
4.1.1第一步：列出FFmpeg的解复用器
从FFmpeg的SVN仓库取得最新版本源代码之后，生成它包含的libavformat
库中可用的解复用器列表（见图4-1）。我注意到FFmpeg把大部分解复用器分成
目录libavformat/下的一个个不同的C文件。
tk@ubuntu:-/BHD/ffmpeg/libavformat
File EditViewTerminal Help
tk@ubuntu:~/BHD/ffmpeg/Libavfornatsls
4xm.c
flic.c
mpjpeg.c
flvdec.c
rtp.c
adtsenc.c
msnwc_tcp.c
rtpdec.c
allformats.c
aiff.c
flvenc.c
stv.c
rtpenc.c
flv.h
mvi.c
rtpenc_h264.c
amr.c
framecrcenc.c
mxf.c
rtp.h
apc.c
framehook.c
mxfdec.c
rtp_h264.c
ape.c
framehook.h
mxfenc.c
rtp_h264.h
asf.c
gif.c
mxf.h
rtp_internal.h
asfcrypt.c
gxf.c
network.h
rtp_mpv.c
asfcrypt.h
gxfenc.c
nsvdec,c
rtp_mpv.h
asf-enc.c
asf.h
http.c
gxf.h
nut.c
rtpproto.c
nutdec.c
rtsp.c
assdec.c
idcin.c
nutenc.c
rtspcodes.h
assenc.c
idroq.c
nut.h
sdp.c
rtsp.h
'ne
iff.c
nuv.c
图4-1FFmpeglibavformat库中的解复用器
注意FFmpeg的开发已经移到Git仓库[2]，这个SVN仓库不再更新。现在这个
漏洞版本的源代码（SVN-r16556）可以从本书的网站下载。[3]
4.1.2第二步：识别输入数据
接下来我尝试识别解复用器处理的输人数据。读源代码的时候，我发现大部
分解复用器都声明了一个叫做demuxername_read_header（）的函数，这个函数通常
都有一个AVFormatContext类型的参数。函数声明并初始化了一个指针，就像下
面这样：
[..]
[..]
很多不同的get_something函数（例如，get_le32（)，get_buffer(））和专用
的宏（例如，AV_RL32，AV_RL16）用于提取pb指向的部分数据。这时，我非常确
定pb就是指向所处理媒体文件输人数据的指针。
---
## Page 67
52丨第4章空指针万岁
4.1.3第三步：跟踪输入数据
我决定在源代码级别跟踪每一个解复用器的输人数据来寻找bug。从列表中
的第一个解复用器4xm.c开始。当开始检查4X电影文件格式的解复用器时，我
发现了下面列出的这个漏洞。
源代码文件libavformat/4xm.c
函数fourxm_read_header()
[..]
93 static int fourxm_read_header(AVFormatContext *s,
94
AVFormatParameters*ap)
95
96
-s=dxo
101
unsigned char *header;
103
int current_track =-1;
106
fourxm->txack_count=0;
107
fourxm->tracks = NULL;
120
/*allocatespacefor theheader andload the whole thing*/
121
header = av_malloc(header_size);
122
if(!header)
123
return AVERROR(ENOMEM);
124
if (getbuffer(pb,header,header_size)1= header_size)
125
return AVERROR(EIO);
160
}else if（fourcc_tag == strk_TAG){
161
/*checkthat thereisenough data*/
162
if （size != strk_SIZE）{
163
av_free(header);
164
return AVERROR_INVALIDDATA;
165
166
current_track=AV_RL32（&header[i+8]）;
167
if （current_track+1>fourxm->track_count）{
168
fourxm->track_count=current_track+1;
169
if(（unsigned)fourxm->track_count >=UINT_MAx/sizeof(AudioTrack))
170
return -1;
171
fourxm->tracks=av_realloc(fourxm->tracks
172
fourxm->track_count *sizeof(AudioTrack));
173
if（!fourxm->tracks）{
174
av_free(header);
175
return AVERROR(ENOMEM);
176
{
177
178
fourxm->tracks[current_track].adpcm=AV_RL32(&header[i+12]);
179
fouxxm->tracks[current_track].channels=Av_RL32(&header[i+36]);
180
fourxm->tracks[current_track].sample_rate=AV_RL32(&header[i+ 4o]);
181
fourxm->tracks[current_track].bits=AV_RL32(&header[i+44]);
[..]
---
## Page 68
4.1发现漏洞53
第124行，函数get_buffer()从所处理的媒体文件复制输入数据到header指
向的堆缓冲区（见第101行和第121行）。如果媒体文件包含所谓的strk块（见
第160行），第166行的AV_RL32()宏从数据头中读取一个无符号整型值并保存到
有符号整型变量currenttrack中（见第103行）。这个来自媒体文件、由用户控
制的无符号整型数转换成一个有符号整型数时会导致一个类型转换bug！我来了
精神，继续研究代码，想到可能有重要发现，不觉兴奋起来。
第167行的if语句检查了用户控制值current_track+1是否大于
fourxm->track_count。有符号整型变量fourxm->track_count初始化为0（见第
106行）。赋给current_track一个大于等于ox8ooooooo的值会让它的符号变化，
使得current_track被解释成一个负数（从A.3节中可以找到原因）。如果
current_track解释为负数，第167行的if语句将会总是返回FALSE（因为有符号
整型变量fourxm->track_count的值是0），第171行的缓冲区分配就永远不会执
行。显然，把那个无符号整数的用户控制值转换为一个有符号整数不是个好主意。
因为fourxm->tracks初始化为NULL（见第107行），第171行不会执行，第
178行至第181行的写操作导致了4个空指针解引用。因为空指针基于用户控制
值current_track解引用，用户控制数据可能被写到范围很大的一段内存中的任
何位置。
解引用一个空指针，而是解引用一个不存在的结构体，该结构体位于从
NULL开始偏移量为用户控制值的位置。最终，这取决于你如何定义空指针
解引用这一术语。
图4-2显示了FFmpeg的期望行为，如下所示。
(1)fourxm->tracks初始化为NULL（见第107行）。
(2)如果处理的媒体文件包含一个strk块，从块的用户控制数据里取出
current_track的值（见第166行）。
(3)如果current_track+1的值大于0，分配一个堆缓冲区。
(4)分配fourxm->tracks指向的堆缓冲区（见第171行和第172行）。
(5)媒体文件的数据复制到堆缓冲区，以current_track作为缓冲区数组的下
---
## Page 69
54第4章空指针万岁
标（见第178行至第181行）。
(6)发生这种情况时，就没有安全问题。
4X电影文件
(2)
(2)
(4)
strk
+1 >0
fourxm->tracks=
fourxm->tracks=NULL
current_track
(3)
av_realloc(..)
(5)
fourxm->tracks[current_track].adpcm
AV_RL32(&header[i+12])
(6)
没间题
图4-2FFmpeg正常运行时的期望行为
图4-3显示当这一bug对FFmpeg造成影响时发生了什么，如下所示。
4X电影文件
+1 tracks= NULL
current_track
fourxm->tracks=
av_realloc(..)
(3)
(5)
fourxm->tracks[current_track].adpcm=
AV_RL32(&header[i+12])
(6)
(4)
内存数据损坏
图4-3FFmpeg导致内存数据损坏的非期望行为
(1)fourxm->tracks初始化为NULL（见第107行）。
(2)如果处理的媒体文件包含一个strk块，从块的用户控制数据里取出
current_track的值（见第166行）。
(3)如果current_track+1的值小于0，不分配堆缓冲区。
---
## Page 70
4.2漏洞利用55
(4)fourxm->tracks仍指向NULL内存地址。
(5)结果空指针基于用户控制值current_track解引用时，4个32位用户控制
值赋给了解引用的位置（见第178行至第181行）。
(6)4个用户控制的内存位置分别被4个用户控制的数据字节覆写。
多么“完美”的一个bug！
4.2漏洞利用
为了利用这个漏洞，我执行了以下步骤。
这个漏洞影响了所有
口第一步：找一个带有有效strk块的4X样
FFmpeg支持的操作系统平台，
例电影文件。
这一章我使用的平台是32位
口第二步：了解这个strk块的布局。
UbuntuLinux9.04（默i认安装）.
口第三步：修改这个strk块以使FFmpeg崩溃。
口第四步：修改这个strk块以控制EIP。
有几种利用这个文件格式bug的方法。可以重新做一个格式正确的文件，或
者修改一个已经存在的文件。我选择后一种方法。在网站http://samples.mplayerhq
hu/上搜索一个适合测试这一漏洞的4X电影文件。可以自己做一个文件，但是下
载一个现成的文件又快又方便。
4.2.1第一步：找一个带有有效strk块的4X样例电影文件
用以下命令从htp://samples.mplayerhq.hu/得到一个样例文件。
linux$wget-qhttp://samples.mplayerhq-hu/game-formats/4xm/
TimeGatep01s01n01a02_2.4xm