---
author: Pratham Patel
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 5855
date: '2023-10-04 11:53:00'
editorchoice: true
excerpt: 一份让你深入体验最新 Linux 内核编译过程的实操指南。
fromurl: https://itsfoss.com/compile-linux-kernel/
id: 16252
islctt: true
largepic: /data/attachment/album/202310/04/115142ggqqhuclvxdxsb14.jpg
permalink: /article-16252-1.html
pic: /data/attachment/album/202310/04/115142ggqqhuclvxdxsb14.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 一份让你深入体验最新 Linux 内核编译过程的实操指南。
tags:
- Linux
- 内核
- 编译
thumb: false
title: Linux 内核动手编译实用指南
titlepic: true
translator: ChatGPT
updated: '2023-10-04 11:53:00'
---
![](/data/attachment/album/202310/04/115142ggqqhuclvxdxsb14.jpg)
> 
> 一份让你深入体验最新 Linux 内核编译过程的实操指南。
> 
> 
> 
出于各种原因，自行编译 Linux 内核可能引起你的兴趣。这些原因可能包括但不限于：
* 测试一个比你目前的 Linux 发行版更新的内核版本
* 采用一组不同的配置选项、驱动来构建内核
* 学习者的好奇心 ?
此指南将一步步指导你如何亲自编译 Linux 内核，包括你该运行哪些命令，为什么运行这些命令以及这些命令的执行效果。本文篇幅较长，所以请做好准备！
> 
> ? 诸如 [Ubuntu 这样的发行版提供了更简单地安装主线 Linux 内核的方式](https://itsfoss.com/upgrade-linux-kernel-ubuntu/)。但本教程目标是从源码手动完成所有工作。**此教程需要你付出时间、耐心以及丰富的 Linux 命令行使用经验**。本文更注重亲身实践的体验。不管怎么说，我仍建议你在虚拟机或备用系统中尝试此冒险，而非在你的主系统上进行。
> 
> 
> 
### 前置准备
在软件领域，构建任何事物都有两个基本要求：
1. 源代码
2. 构建依赖
因此，作为预备环节，我们需要下载 Linux 内核的源码压缩包，并安装一些能让我们成功构建 Linux 内核的依赖项。
#### Linux 版本导览
在任何时刻，[~~Freax~~](https://en.wikipedia.org/wiki/History_of_Linux#Naming) Linux 内核都有四种“版本”。
Linux 的这些 “版本”，按照开发流程的顺序是：
1. **linux-next 树：** 所有准备合并到 Linux 代码库的代码首先被合并到 linux-next 树。它代表的是 Linux 内核最新也是“最不稳定”的状态。大多数 Linux 内核开发者和测试人员使用这个来提高代码质量，为 Linus Torvalds 的后续提取做准备。**请谨慎使用！**
2. **发布候选版（RC） / 主线版：** Linus 从 linux-next 树抽取代码并创建一个初始发布版本。这个初始发布版本的测试版称为 RC（ 发布候选   Release Candidate ）版本。一旦 RC 版本发布，Linus 只会接受对它的错误修复和性能退化相关的补丁。基础这些反馈，Linus 会每周发布一个 RC 内核，直到他对代码感到满意。RC 发行版本的标识是 `-rc` 后缀，后面跟一个数字。
3. **稳定版：** 当 Linus 觉得最新的 RC 版本已稳定时，他会发布最终的“公开”版本。稳定发布版将会维护几周时间。像 Arch Linux 和 Fedora Linux 这样的前沿 Linux 发行版会使用此类版本。**我建议你在试用 linux-next 或任何 RC 版本之前，先试一试此版本。**
4. **LTS 版本：** 每年最后一个稳定版将会再维护 [几年](https://news.itsfoss.com/linux-kernel-support/)。这通常是一个较旧的版本，但它会 **会积极地维护并提供安全修复**。Debian 的稳定版本会使用 Linux 内核的 LTS 版版本。
若想了解更多此方面的知识，可参阅 [官方文档](https://www.kernel.org/category/releases.html)。
本文将以当前可用的最新稳定版为例，编写此文时的 Linux 内核版本是 [6.5.5](https://lwn.net/Articles/945378/)。
### 系统准备
由于 Linux 内核使用 C 语言编写，编译 Linux 内核至少需要一个 C 编译器。你的计算机上可能还需要其他一些依赖项，现在是安装它们的时候了。
> 
> ? 这个指南主要聚焦于使用 GNU C 编译器（GCC）来编译 Linux 内核。但在未来的文章中（可能会深入介绍 Rust 的支持），我**可能**会介绍使用 LLVM 的 Clang 编译器作为 GCC 的替代品。
> 
> 
> 不过，请注意，MSVC 并不适用。尽管如此，我仍期待有微软的员工为此发送修补程序集。我在瞎想啥？
> 
> 
> 
对于 Arch Linux 以及其衍生版本的用户，安装命令如下：
```
sudo pacman -S base-devel bc coreutils cpio gettext initramfs kmod libelf ncurses pahole perl python rsync tar xz
```
对于 Debian 以及其衍生版本的用户，安装命令如下：
```
sudo apt install bc binutils bison dwarves flex gcc git gnupg2 gzip libelf-dev libncurses5-dev libssl-dev make openssl pahole perl-base rsync tar xz-utils
```
对于 Fedora 以及其衍生版本的用户，安装命令如下：
```
sudo dnf install binutils ncurses-devel \
    /usr/include/{libelf.h,openssl/pkcs7.h} \
    /usr/bin/{bc,bison,flex,gcc,git,gpg2,gzip,make,openssl,pahole,perl,rsync,tar,xz,zstd}
```
#### 下载 Linux 内核源码
请访问 [kernel.org](https://kernel.org/)，在页面中寻找第一个  稳定   Stable  版本。你不会找不到它，因为它是最显眼的黄色方框哦 ?
> 
> **[点击访问 kernel.org](https://kernel.org/)**
> 
> 
> 
![](/data/attachment/album/202310/04/115421iaaw8wvn85r6no8d.jpg)
通过点击黄色的方框，你就可以下载 Tar 文件。同时，也别忘了下载相匹配的 PGP 签名文件，稍后我们需要用到它来验证 Tar 文件。它的扩展名为 `.tar.sign`。
##### 校验 Tar 文件的完整性
你如何知道刚下载的 Tar 文件是否被损坏？对于个人来说，一个损坏的 Tar 文件只会浪费你的宝贵时间，如果你是在为一个组织工作，那么可能会危及到组织的安全（这时你可能还有更大的问题需要担忧，但我们并不想让所有人都产生创伤后应激障碍！）。
为了验证我们的 Tar 文件的完整性，我们需要先解压它。目前，它是使用 XZ 压缩算法压缩的。因此，我将使用 `unxz` 工具（其实就是 `xz --decompress` 的别名）来解压 `.tar.xz` 格式的压缩文件。
```
unxz --keep linux-*.tar.xz
```
解压完成后，我们需要获取 Linus Torvalds 和 Greg KH 使用的 GPG 公开密钥。这些密钥用于对 Tar 文件进行签名。
```
gpg2 --locate-keys PI:EMAIL PI:EMAIL
```
你应该可以得到一个与我在我的电脑上看到的类似的结果：
```
$ gpg2 --locate-keys PI:EMAIL PI:EMAIL
gpg: /home/pratham/.gnupg/trustdb.gpg: trustdb created
gpg: key 38DBBDC86092693E: public key "Greg Kroah-Hartman " imported
gpg: Total number processed: 1
gpg:               imported: 1
gpg: key 79BE3E4300411886: public key "Linus Torvalds " imported
gpg: Total number processed: 1
gpg:               imported: 1
pub   rsa4096 2011-09-23 [SC]
      647F28654894E3BD457199BE38DBBDC86092693E
uid           [ unknown] Greg Kroah-Hartman 
sub   rsa4096 2011-09-23 [E]
pub   rsa2048 2011-09-20 [SC]
      ABAF11C65A2970B130ABE3C479BE3E4300411886
uid           [ unknown] Linus Torvalds 
sub   rsa2048 2011-09-20 [E]
```
在导入 Greg 和 Linus 的密钥后，我们可以使用 `--verify` 标志来验证 Tar 的完整性，操作如下：
```
gpg2 --verify linux-*.tar.sign
```
如果验证成功，你应该会看到如下的输出信息：
```
$ gpg2 --verify linux-*.tar.sign
gpg: assuming signed data in 'linux-6.5.5.tar'
gpg: Signature made Saturday 23 September 2023 02:46:13 PM IST
gpg:                using RSA key 647F28654894E3BD457199BE38DBBDC86092693E
gpg: Good signature from "Greg Kroah-Hartman " [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 647F 2865 4894 E3BD 4571  99BE 38DB BDC8 6092 693E
```
**务必查看是否存在 `gpg: Good signature` 的提示，然后再继续！**
> 
> ? 你可以忽略以下警告：`WARNING: This key is not certified with a trusted signature! There is no indication that the signature belongs to the owner.`。
> 
> 
> 我们已根据 Linus 和 Greg 的邮件地址获取了公开密钥，并无需对此警告感到担忧。
> 
> 
> 
##### 解压 Tar 文件
如果你顺利的进行到这里，意味着你的 Tar 文件完整性检查已经成功完成。接下来，我们将从 Tar 文件中解压出 Linux 内核的源码。
![The "TAR" xkcd comic: https://xkcd.com/1168/](/data/attachment/album/202310/04/115346wqqq7guguzg7cdgv.png)
这个步骤十分简单，只需对 Tar 文件执行 `tar -xf` 命令，如下：
```
tar -xf linux-*.tar
```
在这里，`-x` 选项表示解压，`-f` 选项则用来告诉 Tar 文件的文件名。
这个解压过程可能需要几分钟时间，你可以先放松，耐心等待一下。
### 配置 Linux 内核
Linux 内核的构建过程会查找 `.config` 文件。顾名思义，这是一个配置文件，用于指定 Linux 内核的所有可能的配置选项。这是必需的文件。
获取 Linux 内核的 `.config` 文件有两种方式：
1. 使用你的 Linux 发行版的配置作为基础（**推荐做法**）
2. 使用默认的，通用的配置
> 
> ? 也有第三种方法，也就是从零开始，手动配置每一个选项，但注意，这需要配置超过 12,000 个选项。并不推荐这种方式，因为手动配置所有选项将花费大量的时间，并且你还需要理解每个启用和禁用选项的含义。
> 
> 
> 
#### 使用发行版提供的配置
**使用你的 Linux 发行版提供的配置是一个安全的选择。** 如果你只是跟随这个指南测试一个不是你的发行版提供的新内核，那么这就是推荐的方式。
你的 Linux 发行版的 Linux 内核配置文件会在以下两个位置之一：
* 大多数 Linux 发行版，如 Debian 和 Fedora 及其衍生版，将会把它存在 `/boot/config-$(uname -r)`。
* 一些 Linux 发行版，比如 Arch Linux 将它整合在了 Linux 内核中。所以，可以在 `/proc/config.gz` 找到。
> 
> ? 如果两者都有，建议使用 `/proc/config.gz`。这是因为它在只读文件系统中，所以是未被篡改的。
> 
> 
> 
进入含有已经解压出的 Tar 文件的目录。
```
cd linux-*/
```
接着，复制你的 Linux 发行版的配置文件：
```
### Debian 和 Fedora 及其衍生版：
$ cp /boot/config-"$(uname -r)" .config
### Arch Linux 及其衍生版：
$ zcat /proc/config.gz > .config
```
##### 更新配置文件