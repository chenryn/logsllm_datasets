In the current version, the check in tcp_ack() is strengthened as
shown in the bottom-right rectangle in Fig. 2, and even if rcv_nxt
is guessed, the code still does not have exploitable vulnerabilities
for packet injection. However, from our automated vulnerability
detection shown later in §7, we discover 14 new highly-exploitable
leaks for snd_nxt/snd_una even after the ﬁx. Thus, even for
well-implemented protocols with strong checks, the protocol states
of these checks can still be leaked through attacker-accessible
channels, rendering the checks ineffective.
To systematically discover such vulnerabilities, we argue that au-
tomated analysis is required to ensure correctness and coverage,
given that the implementations are rather complex — 64 different
paths with more than 300 direct and 600 indirect checks are found
before accepting an incoming packet in Linux kernel 3.15.8.
3.2 Attacker-controlled Implicit Information
Leaks
implicit
information leaks as the secret
In the above example, the leakage of protocol state rcv_nxt
is one case of
is
leaked through control dependency (predicates on line 2 in
tcp_send_dupack()). Compared to classic implicit informa-
tion leaks, this instance is quite special in that it involves attacker-
controlled data in the predicates (skb->seq in the example), giv-
ing an attacker the ability to inﬂuence the control ﬂow. We name
this special type of leaks attacker-controlled implicit information
leaks, a new concept proposed in this paper. As shown in the il-
lustrative example, since attacker-controlled data is involved, an
attacker can use different input to actively trigger leaks from the
same predicate multiple times and thus extract the secret bit by bit,
making it highly-exploitable in practice.
Table 1 shows a categorization of implicit information leaks to
help illustrate the position of this new concept and this paper. Clas-
sic implicit information leaks is from a secret information related
predicate (e.g., if (secret > 100)) to an information sink
(e.g., a public value), which usually just leaks 1 bit of information
(e.g., whether secret is above 100 or not). Since the leakage vol-
ume is extremely low compared to explicit information leaks, and
tracking it causes large numbers of false positives [5, 28], detecting
classic implicit information leaks is a commonly excluded feature
in nearly all taint analysis tools [4, 17, 21, 25].
To enable the detection of severe information leaks from implicit
ﬂows without causing high volumes of false positives, Bao et al.
propose to limit implicit ﬂow tracking to a special type of control
dependency called strict control dependency (SCD) [5]. SCD de-
notes the correlation between an equivalency predicate (e.g., if
(secret == 100)) and an information sink, thus when the in-
formation sink is changed, it directly reveals all bits of the se-
cret, making it much more severe than the classic implicit infor-
mation leaks. Cryptographic key extraction through cache side
channels [22, 31, 54, 57] is one real-world exploit example of SCD-
based leaks, which leverages the SCD in bitwise equivalence test-
ing of the secret key in certain cryptographic system implementa-
tions such as RSA implementation of GnuPG [54, 57]. Another
exploit example is side-channel leaks in web and Android applica-
tions [10, 11, 60], in which network trafﬁc pattern is SCD on user
choices in web or Android applications. As shown in Table 1, both
examples are studied extensively on both attack and defense sides.
information leaks is a newly-
identiﬁed category of highly-exploitable implicit information leaks,
and similar to Bao et al. [5], we propose to prioritize this special
type of leaks in order to balance the vulnerability detection effec-
tiveness and false positives. This concept is orthogonal to SCD in
that attacker-controlled data is involved in the control dependency.
The target of this paper is to identify exploitable cases of such leaks
focusing on off-path packet injection attacks [18,37,38], and we are
the ﬁrst to design a taint analysis tool for detecting this type of leaks
(detailed in §6).
Attacker-controlled implicit
4. PACKETGUARDIAN OVERVIEW
In this section, we ﬁrst describe the analysis required for de-
tecting packet injection vulnerabilities, and then present a design
overview of PacketGuardian which supports this analysis.
4.1 Analysis Steps
Following the discussion in §3, we break the analysis into two
steps: accept path analysis and protocol state leakage analysis.
390Implicit information
Exploitability
Example of exploits and related work
leak category
Classic
Strict control dependence
(SCD) based [5]
Attacker-controlled
Low
High
High
Exploit case
N/A
Attack
N/A
Detection/defense
N/A
Cryptographic key extraction
[22], [57],[54], [31]
[14], [58], [50], [40]
Side-channel leaks in web/Android apps
Off-path packet injection attack
[11], [10], [60]
[37], [38], [18]
[55], [9], [32]
This paper
Table 1: Categorization of implicit information leaks and position of this paper.
Step 1: Accept path analysis. For a packet injection, the goal is
to pass all checks and reach the program point where the packet
is accepted, e.g., accept_payload() in Fig. 2. In this paper,
we refer to these paths as accept paths. For a particular protocol
implementation, the off-path packet injection robustness depends
on the weakest accept path. Thus, the ﬁrst analysis step is to ﬁnd
the weak accept paths in the implementation. The output needs to
highlight the checks related to attacker-controlled information, e.g.,
header ﬁelds, to help analyze the accept path strength.
Step 2: Protocol state leakage analysis. If all accept paths are all
well-protected by “secret” protocol states unknown to the attacker,
the implementation can still be vulnerable if these protocol states
are vulnerable to information leakage as illustrated in §3. Thus, af-
ter accept path analysis, we follow up with an information leakage
analysis for important protocol states.
The ﬁrst step is to analyze the strength of the checks related to
attacker input on the program path reaching a pre-deﬁned analy-
sis sink, which is similar to the traditional code injection anal-
ysis, and thus it can be modeled as a static taint analysis prob-
lem with attacker-controlled data as taint source like in previous
work [25, 53, 59]. The second step is an information leakage prob-
lem and again can be solved by static taint analysis.
Note that symbolic execution is alternative choice, but since it
tracks ﬁner-grained information for each variable than taint anal-
ysis, it comes with much higher computation overhead, which is
unlikely to be efﬁcient and scalable enough in practice, especially
in our case high analysis sensitivity are necessary (shown in §7.1).
Thus, we choose taint analysis in the current design.
4.2 PacketGuardian Design
To support the analysis in §4.1, PacketGuardian has 2 major
components:
taint-based summarizer, and vulnerability analyzer,
as shown in Fig. 3. In this section, we brieﬂy introduce the design
of each component, and details are provided in §5 and §6.
Pre-processing. To support taint analysis, the source code needs
to be ﬁrst pre-processed to the format required by a certain static
analysis tool. We choose CIL [35] for our analysis, so for its input
requirement, .c ﬁles are pre-processed to .i ﬁles in this step.
Taint-based summarizer. With pre-processed source code, given
an entry function, taint-based summarizer performs a precise static
taint analysis with ﬂow, ﬁeld, and context sensitivity with pointer
analysis. In §7.1, we show that such analysis strength is required to
discover real vulnerabilities with minimum false positives (FPs).
Further, we employ implicit ﬂow tracking (with separate taints
from explicit ﬂows), as the protocol logic checks commonly in-
duce leakage through control dependence (see §3). Note that im-
plicit tainting is known to generate a large number of FPs [28],
and nearly all existing taint analysis tools choose to ignore im-
plicit ﬂows [4, 17, 21, 25]. We show that after prioritizing attacker-
controlled implicit information leaks, PacketGuardian does not suf-
fer from the excessive FP problem.
To achieve context sensitivity, our static taint analysis needs
to be performed in an inter-procedural data ﬂow analysis frame-
work, with two major choices: IFDS/IDE framework [42, 44], and
summary-based (or functional) approach [49]. IFDS/IDE frame-
work performs analysis from function caller to callee, and in the
worst case, the analysis complexity is proportional to the number
of call graph edges. In contrast, summary-based approach ﬁrst gen-
erates strongly-connected components (SCC) of the call graph and
computes function summary from callee to caller. In this approach,
each function only needs to be analyzed once and thus has lower
complexity and signiﬁcant performance gains [43]. Its disadvan-
tage is that it needs storage for function summaries, and the callee-
to-caller order makes taint path construction unnatural. To support
high sensitivity and implicit ﬂow tracking, our analysis faces a sig-
niﬁcant scalability challenge if applied to a large code base like the
Linux kernel. Fortunately, as demonstrated in previous studies [52],
summary-based approach can scale to very large programs.
Following these design choices, as shown in Fig. 3, all related
source ﬁles are ﬁrst crawled in a breath-ﬁrst search framework
starting from the entry function. After merging these ﬁles, func-
tion SCCs are computed and serve as input to the taint analysis
engine. Taint analysis are then performed in the order of callee to
caller, and output function summaries.
Vulnerability analyzer. In vulnerability analyzer, our tool uses the
function summaries from the taint-based summarizer to construct
paths for accept path analysis and protocol state leakage analysis
in §4.1. Taking attacker-controlled data as taint source and packet
accept functions as sink, accept path constructor constructs accept
paths with the attacker-controlled data related predicates labeled.
The output is further analyzed, with the result being either an ob-
vious packet injection vulnerability, or a set of protocol states that
the implementation relies on to prevent injection.
If the accept paths are well-protected by a set of protocol states,
leakage path constructor performs the second step to ﬁnd possi-
ble leakage of these important states. In this analysis, we also use
the function summaries, but the taint sources and sinks become the
protocol states and public side channels accessible to the attacker.
These channels can be storage side channels [10, 24, 38, 60], pub-
lic events like sending packets [18], timing, power, etc. Besides
detecting leaks, we also construct the leakage paths to help tool
users understand and analyze these leaks. In this step, we prioritize
attacker-controlled implicit information leaks, as all previously re-
ported highly-exploitable leaks are of this special type [18, 37, 38].
With the choice of summary-based approach, even though the
taint sources and sinks are different in the two steps, our tool only
needs to perform taint analysis, the most time-consuming part, once
instead of multiple times for each source and sink pair. While iden-
tifying sources and sinks is a problem for taint analysis in gen-
eral [41], PacketGuardian users can conveniently try different sinks
in the analysis without re-running the taint analysis.
Manual effort in analysis. In our design, the manual effort mainly
lies in identifying protocol states, and the amount of it depends on
the number of output paths and predicates. As detailed in §6, our
design mitigates this problem using path pruning and taint infor-
mation annotations, which is shown to be effective in §7, e.g., our
pruning reduces 42.6% paths on average.
5. TAINT-BASED SUMMARIZER
In this section, we detail the two core designs of the taint-based
summarizer, the taint analysis engine and function summary.
391Taint-based summarizer
Vulnerability analyzer
File crawler
Analysis-
related files
Function
summary
- Taint summary
- Pointer analysis
summary
- Taint tracking
summary
- Path summary
SCC
generator
Func
SCC list
Taint engine
Pointer
analysis
Packet
Attacker-
Leakage
accept func.
controlled data
sinks
Accept path
constructor
Leakage path
contructor
Protocol
states
Weak
accept
paths
High-
entropy
Leakage
paths
Tool user
Packet injection
vulnerabilities
Figure 3: PacketGuardian design overview.
5.1 Taint Analysis Engine
In this section, we detail the design of taint environment, propa-
gation logic, and how we support ﬂow, context, and ﬁeld sensitivity
with pointer analysis.
Taint environment. To specify the tainting relationship, each pro-
gram variable v is associated with a taint environment γ : v → T ,
where T is a set of taint values {ti|i = 1, ..., k}. Each taint value
ti is associated with a variable vi, meaning that v is tainted by vari-
able vi. In our design, variables in γ include local, global, formal,
and function return variables. Each v is speciﬁed by a tuple with
its identiﬁcation information such as variable name and type.
Taint label of explicit and implicit ﬂows. As discussed in §4.2, it
is a design requirement to include implicit ﬂows, which is known
to cause excessive FPs [28]. At the same time, the importance of
explicit leaks is much higher than implicit leaks since the former
directly leaks the entire data. Thus, to distinguish leaks of different
importance and be able to support policies on limiting implicit ﬂow
tainting [26], we label each taint value with 2 boolean values d and
c, for taint values coming from explicit ﬂows (d = true) or implicit
ﬂows (c = true). This is a unique design in PacketGuardian and
not supported in most existing taint analysis tool [4, 17, 21, 25].
Taint propagation. The tainting process is to propagate taint val-
ues by updating γ(.) after processing each statement. Table 2
shows the taint propagation logic in the statement and expression
format deﬁned by CIL [35]. This table only has intra-procedure
propagation logic, and inter-procedure logic will be covered later.
In the table, we introduce 3 new operations for taint label man-
agement, Ld, Lc, and ∪l. Ld and Lc modify the labels of all taint
values in a set with explicit ﬂow and implicit ﬂow label respec-
tively, and ∪l is simply the set union operation but with label merg-
ing, for example if both sets have v but with different labels di, ci
and dj, cj, the merged taint value label is (di||dj ) and (ci||cj ).
Flow-sensitive tainting with both explicit and implicit ﬂows.
Our taint propagation is performed in a data ﬂow analysis frame-
work, where each stmti has a taint environment γi(.), and after
tainting according to the rules in Table 2, γi(.) is updated and
passed to the egress statements in CFG. Our data ﬂow analysis is a
may-taint analysis to tradeoff potentially higher FPs for lower FNs
(we have other mechanisms to lower FPs later on). To increase the
analysis efﬁciency, we use topology order to visit CFG nodes.
To support implicit ﬂow tainting, we maintain a constraint path,
CT , during the data ﬂow analysis. CT describes the list of condi-
tional branch statements such as if exp and Switch exp, which
we call constraints (denoted by ct), that the current statement is
control dependent on. Each ct is described by a tuple {exp, Texp},
and adds a new ct after processing a conditional branch statements
with exp. We compute the control dependence relationship with a
postdominator analysis [49], and delete the ct from CT if the cur-
rent statement is not control dependent on it. With this constraint
list, we compute the implicit ﬂow taint value set by merging Texp
of all ct in CT . As shown in Table 2, this implicit ﬂow taint is
added in taint propagation after applying Lc(.).