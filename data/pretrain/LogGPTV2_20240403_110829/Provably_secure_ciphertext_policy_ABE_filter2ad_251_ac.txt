deﬁne hDi, Fii for every i ∈ N . In addition, it selects ran-
i=1 wi
wi
ui and
um+i . The secret key is SK := h ˆD,{hDi, Fii|i ∈
i , G1
and let ˆD be gy−r. For every i ∈ M, let G0
G1
i be g
N},{hG0
dom wi for every i ∈ M. Deﬁne r := Pn
i=1 ri +Pm
ii|i ∈ M}i.
m+i otherwise.
i be g
wi
i
Decrypt. Given a ciphertext hW, ˜C, ˆC,{Ci|i ∈ N},{Ei|i ∈
M}, σ, Kvi, Decrypt ﬁrst runs the Verify algorithm on σ,
Kv and hW, ˜C, ˆC,{Ci|i ∈ N},{Ei|i ∈ M}i. If σ is valid, it
proceeds with decryption; otherwise it returns default ⊥.
Suppose the secret key is deﬁned over an attribute set S
ii|i ∈ M}i.
and is of the form h ˆD,{hDi, Fii|i ∈ N},{hG0
As before, Decrypt computes the pairing e(Ci, Di) for each
i ∈ I and the pairing e(Ci, Fi) for each i ∈ N \ I. This
recovers e(g, g)ri·s for every i ∈ N , provided S |= W .
For each i ∈ M, Decrypt computes e(Ei, G0
i ) if Kv,i = 0:
i , G1
e(Ei, G0
i ) = e(gui·s, g
wi
ui ) = e(g, g)wi·s.
Similarly, if Kv,i = 1, it computes e(g, g)wi·s as e(Ei, G1
i ).
Then M is recovered as before: M = ˜C
e( ˆC, ˆD)·e(g,g)r·s ,
where
Y s =
˜C
nY
e(g, g)ri·s · mY
e(g, g)r·s =
e(g, g)wi·s.
4.3 CCA Security Proof
i=1
i=1
CCA security for CP-ABE is deﬁned as the statement that
all probabilistic polynomial-time adversaries have at most
negligible advantage in the following game.
Init and Setup Same as CPA security game.
Phase 1 The adversary makes, adaptively, any combination
of secret key and decryption queries.
Secret Key Query The adversary submits a set S of at-
tributes. The challenger returns a secret key SK
for S, provided S 6|= W .
Decryption Query The adversary submits a ciphertext
CT encrypted to W . The adversary loses the
game if CT is not a valid ciphertext; otherwise,
the challenger returns the plaintext M .
Challenge Same as CPA security game.
Phase 2 Same as Phase 1, except that CT ∗ may not be sub-
Guess The adversary outputs a guess µ0 of µ.
mitted for decryption.
We reduce CCA security of our scheme to the SEU as-
sumption on signatures and the DBDH assumption. As with
CPA, this implies breaking CCA security is at least as hard
as breaking the SEU or DBDH assumptions.
Theorem 4.1. Assume the signature scheme is strongly
existentially unforgeable. If a probabilistic polynomial-time
adversary wins the CCA security game with non-negligible
advantage, then we can construct a simulator that distin-
guishes, with non-negligible advantage, a DBDH tuple from
a random tuple.
Proof. Suppose adversary Adv can win the CCA game
with non-negligible advantage . We construct a simulator
Sim as follows.
First, Sim receives hg, A, B, C, Zi from the DBDH chal-
vi. Then Sim
lenger and runs SigKeyGen to obtain hK∗
s , K∗
plays the role of challenger in the CCA game.
Init. Sim receives the challenge gate W =V
i∈I i from Adv .
v,i = 0. Then ui := ηi and um+i := b · ξi.
v,i = 1. Then ui := b · ηi and um+i := ξi.
Setup. To provide a public key PK to Adv , Sim sets Y =
e(g, g)ab = e(A, B). For each i ∈ N , Sim chooses random
αi, βi, γi ∈ Zp and deﬁnes ti, tn+i, t2n+i as in the CPA proof.
For each i ∈ M, Sim chooses random ηi, ξi ∈ Zp. There are
two cases.
(1) K∗
(1) K∗
Recall that every public key component Ti can be computed
by raising either g or B to the appropriate exponent. The
same holds for every Ui.
Phase 1: Secret Key Query. Adv submits S ⊆ N such
that S 6|= W . As in the CPA proof, choose a witness j.
Without loss of generality, assume that j 6∈ S and j = j.
i ∈ Zp at random and
i ∈
deﬁne ri as in the CPA proof. In addition, Sim chooses w0
i · b for every i ∈ M. Finally,
Zp at random and sets wi := w0
i · b.
i=1 w0
For every i ∈ N , Sim chooses r0
i · b +Pm
i=1 ri +Pm
· mY
i=1 wi = ab +Pn
i=1 r0
i·b−Pm
−Pn
i=1 r0
let r :=Pn
nY
The ˆD component of SK is set to be
i·b = gab−r.
i=1 w0
= g
1
Br0
i
1
Bw0
i
i=1
i=1
For i ∈ N , the Di and Fi components are computed exactly
as in the CPA proof. For i ∈ M, we have two cases.
• K∗
• K∗
v,i = 0. G0
i := B
v,i = 1. G0
i := g
w0
i
ηi = g
w0
i
ηi = g
wi
ηi and G1
wi
b·ηi and G1
i := g
i := B
w0
i
ξi = g
w0
i
ξi = g
wi
b·ξi .
wi
ξi .
If Kv 6= K∗
Phase 1: Decryption Query. Adv submits a ciphertext
hT, ˜C, ˆC,{Ci|i ∈ N},{Ei|i ∈ M}, σ, Kvi. Sim veriﬁes the
signature σ using Kv. If σ is invalid, Sim aborts the DBDH
simulation and we call this an abort event. Otherwise, Sim
checks if Kv = K∗
If so, we call it a forge event and
v .
Sim gives a random answer in the DBDH simulation (ei-
ther “DBDH” or “random”).
v , then Sim ﬁxes
j ∈ M such that Kv,j 6= K∗
v,j. Without loss of generality,
assume Kv,j = 1 and K∗
v,j = 0.
Let S be the set of attributes deﬁned as follows: for each
i ∈ N , we place i ∈ S if and only if i ∈ I and i = i. Note
that S satisﬁes W . Now Sim produces a partial secret key
for S, which contains enough components to decrypt CT .
i at random from Zp and
i · b. For every i ∈ M, Sim also chooses w0
sets ri := r0
i at
Pn
i · b. Set wj :=
random from Zp. For i 6= j, set wi := w0
ab + w0
i=1 wi = ab +
i=1 r0
Notice, the ab exponent is “hidden” at the j-th bit of the
signature veriﬁcation key (where Kv and K∗
v diﬀer). In con-
trast, to answer the secret key query, ab is hidden at an
attribute that witnesses the mismatch between S and W .
j · b. Finally, let r := Pn
i · b +Pm
For every i ∈ N , Sim chooses r0
i=1 ri +Pm
i=1 w0
i · b.
nY
· mY
As in the secret key query, ˆD is set to be:
i·b−Pm
For each i ∈ N , Di is computed as follows.
−Pn
1
Bw0
1
Br0
i=1 w0
i=1 r0
= g
i=1
i=1
i
i
i·b = gab−r.
r0
i
αi = g
r0
i
βi = g
r0
i
βi = g
ri
αi .
ri
βi .
• i ∈ I ∧ i = i. Di := B
• i ∈ I ∧ i = ¬i. Di := B
• i 6∈ I. Di := g
ri
b·βi .
For the Fi components, we have two cases.
r0
• i ∈ I. Fi := g
i
γi = g
r0
• i 6∈ I. Fi := B
i
γi = g
For each i ∈ M with i 6= j, we have two cases.
w0
• K∗
i
ξi = g
w0
• K∗
i
i := B
ξi = g
Now consider j. By assumption we have K∗
wi
ηi and G1
wi
b·ηi and G1
w0
i
ηi = g
w0
i
ηi = g
ri
b·γi .
ri
γi .
v,i = 0. G0
v,i = 1. G0
i := B
i := g
i := g
wi
b·ξi .
wi
ξi .
v,j = 0, there-
wj
ηj = g
ab+w0
ηj
j·b
j = g
fore G0
. This is the only component in
the secret key that Sim cannot produce, because it contains
the exponent ab. However, since Kv,j = 1, G0
j is not nec-
essary for the decryption of CT . Sim can in fact produce
wj
b·ξj . Finally, Sim decrypts
G1
using this partial secret key and gives M to Adv .
w0
j
ξj = g
b·ξj = g
ξj · g
j as A
ab+w0
j·b
1
Challenge. Adv submits two messages M0 and M1. Sim
chooses µ ∈ {0, 1} at random and sets ˜C := Mµ · Z. Then
Sim signs the following using Ks: T, ˜C, C,{C αi|i ∈ I, i = i},
{C βi|i ∈ I, i = ¬i},{C γi|i ∈ N \ I},{C ηi|i ∈ M, K∗
v,i =
0},{C ξi|i ∈ M, K∗
v,i = 1}. These are given to the adversary,
along with the signature σ and the veriﬁcation key K∗
v .
Phase 2. Same as Phase 1.
Guess. Adv produces a guess µ0 of µ. If µ0 = µ, Sim an-
swers “DBDH” in the DBDH simulation. Otherwise, Sim
answers “random”.
First, we observe that abort occurs only if Adv loses in
the CCA game by submitting an invalid ciphertext. If Z =
e(g, g)abc, Adv receives a valid ciphertext during the chal-