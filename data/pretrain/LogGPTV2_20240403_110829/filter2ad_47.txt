# Monitoring the Execution of Third-Party Software on Mobile Devices
**Authors:** Andrew Brown and Mark Ryan  
**Affiliation:** School of Computer Science, University of Birmingham, UK. B15 2TT  
**Emails:** {A.J.Brown, M.D.Ryan}@cs.bham.ac.uk

## Abstract
The current security model for third-party applications running on mobile devices relies heavily on user trust in the application vendor. While existing mechanisms can mediate this relationship, they do not provide complete protection against potential threats. This paper introduces a novel security architecture that prevents third-party applications from deviating from their intended behavior, thereby defending devices more effectively against previously unseen malware.

In 2002, mobile devices began to support the installation of applications from sources other than the cellular network operator, making them functionally similar to traditional computing hosts. The first mobile malware appeared in 2004, and by 2009, it was estimated that 200 million "smart" mobile devices would be in use, creating an environment ripe for widespread malware infection.

Common security measures for mobile devices include code signing, discretionary access controls, and signature-based anti-virus software. Code signing confirms the authorship and integrity of the code but does not guarantee its quality or security. Access controls, while contributing to a systematic security framework, are often inflexible, leaving devices vulnerable to numerous attacks or impeding program functionality when stricter controls are applied. Anti-virus software can only detect known malware with signatures in its database and typically recovers from attacks by deleting the malicious application's files.

We propose a security architecture that uses execution monitors to analyze and mitigate the events invoked by third-party applications. These monitors run in parallel as separate threads, enabling real-time regulation of the application's interactions with the device's resources. To make this approach accessible to non-technical users, we have developed ABML (Application Behavior Monitoring Language), a high-level policy language. Users can express their expectations about the application's behavior, which are then compiled into monitor specifications.

ABML policies consist of rules that reason about temporally-ordered application events and sets of local and global variables. Policies are categorized based on the type of application (e.g., editor, browser, game, messenger). The ABML policy is compiled into Java source code and enforced on application bytecode using the Polymer engine. This engine runs on the JVM and monitors calls made by the application to the Java ME and native device libraries (Figure 1). Policy violations are handled by weaving recovery events into the application bytecode, allowing the removal of triggering events from the instruction stream and continuing execution.

Our language includes constructs that more precisely identify the context of an event, leading to finer-grained control over the application. This can help mitigate information flow and ensure that only non-sensitive data is transmitted to the carrier network. Additionally, our architecture ensures that attackers cannot bypass security measures and directly control the operating system. Third-party applications can only access native device functions while an ABML policy is being enforced.

We have validated this concept using the BlackBerry 8800-series mobile device, and our work is cross-platform. For example, we studied an attack where an application intercepted and forwarded SMS messages to an attacker, even though the application was signed. Our countermeasure specified that the target could send an SMS message only if the data was manually entered by the user and the recipient was in the user's contact list. The monitor must accurately identify the context of the triggering event: whether the data was typed by the user, whether the user pressed "send" after entering the data, and whether the recipient is in the user's contact list. If any condition is false, the operating system does not receive the command to send the SMS message, and the application continues executing.

## References
1. Bauer, L., Ligatti, J., Walker, D.: Composing security policies with Polymer. In: PLDI 2005: Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and implementation, New York, USA, pp. 305â€“314 (2005)

---

**Figure 1. System Architecture**
[Insert Figure 1 Here]