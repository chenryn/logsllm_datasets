title:Monitoring the Execution of Third-Party Software on Mobile Devices
author:Andrew Brown and
Mark Ryan
Monitoring the Execution of Third-Party
Software on Mobile Devices
(Extended Abstract)
Andrew Brown and Mark Ryan
School of Computer Science, University of Birmingham, UK. B15 2TT
{A.J.Brown, M.D.Ryan}@cs.bham.ac.uk
Abstract. The current security model for a third-party application run-
ning on a mobile device requires its user to trust that application’s vendor
and whilst mechanisms exist to mediate this relationship, they cannot
guarantee complete protection against the threats posed. This work in-
troduces a security architecture that prevents a third-party application
deviating from its intended behaviour, defending devices against previ-
ously unseen malware more eﬀectively than existing security measures.
In 2002, mobile device capabilities were expanded to permit users to install
applications from sources other than the cellular network operator and they
now mirror those of more traditional hosts. 2004 saw the ﬁrst malware aimed at
mobile devices hit and today over four hundred known entities exist. By 2009, it
is estimated that 200 million “smart” mobile devices will be in operation, setting
the scene for widespread malware infection.
Mobile device architectures commonly utilise code signing, discretionary ac-
cess controls and signature-based anti-virus software to secure third-party soft-
ware installations. Digitally signing code can conﬁrm its author and guarantee
that it has not been altered since it was signed, but does not guarantee the qual-
ity or security of code that the application will execute: determined attackers
will go to many lengths to obtain a signature for their code. Access controls con-
tribute to a systematic security framework, but are inﬂexible: default settings
tend to leave the device vulnerable to numerous attacks and applying stricter
controls impedes program functionality. Mobile anti-virus software can only de-
tect known malware entities whose signatures exist in a virus dictionary and
attack recovery simply deletes an application’s executable ﬁles.
We propose an architecture for mediating third-party software that uses exe-
cution monitors, which operate in parallel (as a separate thread) with the target
application in order to analyse and mitigate the events it invokes. This enables
full regulation of the target’s interaction with its host’s resources, preventing
and recovering from harmful behaviour in real-time. As most end-users do not
have the technical capability to specify or deploy such monitors, we have devel-
oped ABML – a high-level policy language in which they can express a priori
judgements about the type of application downloaded, which are translated by
our compiler into a monitor speciﬁcation. An ABML policy contains a set of
rules which reason about temporally-ordered application events, sets of local
R. Lippmann, E. Kirda, and A. Trachtenberg (Eds.): RAID 2008, LNCS 5230, pp. 410–411, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
Monitoring the Execution of Third-Party Software
411
and global variables, and can be categorised by the class of application it is
applied to (e.g., an editor, a browser, a game, a messenger).
A policy is compiled into Java source code
and then enforced on application bytecode
by the Polymer [1] engine. This executes on
the JVM and monitors calls the application
makes to the Java ME and native device li-
braries (Fig. 1). Policy violations are recov-
ered from by weaving a set of recovery events
into application bytecode, which are derived
from a rule at compile-time. Where a policy
denies its triggering event, that event can be
removed from the target’s instruction stream
and execution can continue. Our language is
equipped with constructs that more precisely
identify the context of an event, leading to
more ﬁne-grained application control. It can
therefore mitigate some forms of information-
ﬂow and ensure that only data which is not deemed sensitive is transmitted by
the application to the device’s carrier network. In addition, our architecture
ensures that an attacker cannot write application code to bypass our security
measures and control the operating system directly. Third-party applications
can only gain access to native device functions whilst an ABML policy is being
enforced on them.
Fig. 1. System architecture
We have proven this concept using the BlackBerry 8800-series mobile device,
although our work is cross-platform (for it to work on other types of device,
ABML’s libraries are re-mapped to the APIs of the target platform). An example
attack we recently studied allowed an application to intercept and forward SMS
messages to an attacker and could occur despite that application being signed.
Device access controls queried the user on the target’s ﬁrst attempt to send an
SMS, but where the user agreed to this prompt, an SMS ‘channel’ to the attacker
was created. Our countermeasure to this stated: “the target may send an SMS
message only if the data that message contains was entered manually by the
user, and the recipient of that message exists as a contact in the user’s personal
information manager (PIM)”. In order to enforce such a policy, a monitor must
precisely identify the context in which the triggering event occurred: was the
data contained in that SMS message typed by the user? At some time after the
entry of this data, did the user press “send” in reference to this message? and
is that message to be sent to recipient in the device’s PIM? Where any of these
conditions evaluates to false, the device’s operating system never receives the
command to send that SMS message and the application continues executing.
Reference
1. Bauer, L., Ligatti, J., Walker, D.: Composing security policies with Polymer. In:
PLDI 2005: Proceedings of the 2005 ACM SIGPLAN conference on Programming
language design and implementation, New York, USA, pp. 305–314 (2005)