是：利用备份，重新应用二进制日志。不过，这种做法也会产生两个问题。
前，可以先把这个输出保存为一个文件，这样就可以编辑那些USE语
，它可以把输出限制为单个数据库的某些语句，但是
，在进行复制操作时一定要停止两个服务器。
，恢复其全部内容，不过这次是恢复到第二个空
下面这个操作过程实际更可行。
14.7使用备份来恢复数据
如果运行
527
---
## Page 548
选项：
日志文件的语句中。
的 mysq1 调用完毕时，每个日志文件所创建的 TEMPORARY 表都会被自动删除，无法用在后面
TEMPORARY表，有可能会被后面的日志文件使用到。如果单独处理各个日志文件，那么在相应
作一个整体来处理，那么它们之间的依赖关系可能会被破坏掉。例如，某个日志文件里创建的
恢复操作，以及使用日志文件恢复信息，那么就必须使用上面这个策略。在执行日志文件的内
保存在一个文件里。然后，再编辑这个文件，将结果送人 mysql。示例如下：
容
与服务器生成的顺序一样。
二进制日志文件的内容。具体做法是在这些二进制日志文件所在的目录里，执行下面这条命令：
志处理选项有关的更多详细内容请参考附录F。
个程序也可以读取远程的二进制日志文件，但这里不对它进行讨论。与mysqlbinlog的远程比
的二进制日志文件的基本名不是binlog，那么需要根据实际情况来调整指导内容。此外，这与
binlog.nnnnnn。其中，nnnnnn是一个由六位数构成的扩展名，表示日志文件的序号。如果依
把自己的输出限制为只与给定数据库或给定时间段有关的语句。
句。这些事情都可以交给 mysqlbinblog 去完成。它可以处理多个二进制日志文件，并且可以
需要应用与某个特定数据库有关的语句。你可能还需要选择那些只在某个特定时段执行过的语
mysqlbinlog 的输出用作 mysql 的输入。
备份之后所有执行过的语句）里的部分内容。这样可以把表恢复到最新状态。
重
14.7.3重新执行二进制日志文件里的语句
528
如果只想提取那些只属于特定数据库的语句，则可以使用 mysqlbinlog 的--database
容之前，必须先把那条语句从日志文件里移除。
如果必须在重新执行日志文件之前对它们进行编辑，那么可以先把它们转换为文本格式
点关注的是本地二进制日志文件的使用，这些文件在你执行mysqlbinlog程序的主机上。
在接下来对应用二进制日志文件的指导里，会假设二进制日志文件的命名格式为
mysqlbinlog 程序可以把二进制日志文件转换为文本形式的语句，使其易于执行：将
mysqlbinlog 还有几个选项，可用于提取在特定时段执行过的语句（如在给定备份之后写
请不要使用 mysqlbinlog和 mysql一个接一个地处理二进制日志文件。如果不把它们当
如果恢复的数据库是在所有当前二进制日志文件写人之前备份的，那么你还需要应用所有
根据你要从备份中恢复的内容，你可能需要应用二进制日志文件里的所有语句，也可能只
在使用备份文件恢复数据库或表之后，还应该重新应用二进制日志文件（它们包含的是自
SET TIMESTAMP=1351633836;
#121030 16:50:36 server id 1 end_1og_pos 106
%mysqlbinlog --database=db_name binlog.[0-9]*| mysql
如果因为有人不小心执行了 DROP DATABASE、DROP TABLE或 DELETE语句，而需要执行
在 mysqlbinlog 命令里，binlog.[0-9]*模式会扩展成二进制日志文件列表，其顺序通常
%mysqlbinlogbinlog.[0-9]*|mysql
at1077
第14章数据库维护、备份和复制
text_file
Query....
这
分
---
## Page 549
为受损，也要加载它们。在某些情况下，这样可以让你获得那些通常会被忽略的表的转储内容。
的另一个有用设置是innodb_force_load_corrupted。它会告诉 InnoDB，即使这些表被标记
建出来的InnoDB表可以保证其内部数据的一致性，并且足以获得令人满意的恢复效果。
建表的内容，重建方法是：删除表，并根据mysqldump的输出文件恢复它们。按照这一过程重
选项文件里删除设置innodb_force_recovery变量的那行，并正常重启服务器，以便可以重
使用的启动值为4。在启用这个变量之后，InnoDB会允许添加或删除表，但它们的内容是只读
文件的[mysql]组里加上一行，并重启服务器：
置为1~6之间的某个非零值可以强行启动服务器。如果想要设置这个变量，可以在服务器选项
写入一条信息，然后服务器会退出。在这种情况下，把系统变量innodb_force_recovery 设
会进行自动恢复。本节讨论的内容是：当自动恢复遭遇罕见的失败时，该如何处理。
14.7.4
描述。
置的选项，它们可以接受显示在日志里的位置值。相关信息请参考附录F中对mysqlbinlog 的
种形式都可以把该时间值指定给--start-datetime 选项：
如果需要恢复所有的InnoDB表，那么必须使用备份。所采用的具体方法取决于备份的类型。
InnoDB存储引擎默认使用的自动恢复策略比较保守，使用的leve7值都比较小。通常推荐
如果InnoDB在服务器启动的过程中，检测到一个无法恢复的问题，那么它会往出错日志里
如果MySQL服务器或者服务器主机崩溃，
口如果是二进制备份，那么你应该具备这样几个文件的副本：系统和单个的表空间文
有一个与之对应的--stop-datetime 选项，可用于给定截止时间。另外，还有几个基于位
假设，想要重新应用从2012-10-3016:50:36开始记录到二进制日志里的修改。下面两
innodb_force_recovery=level
[mysqld] 
COMMIT;
#071030 16:50:36 server id 1
INSERT INTO absenCe VALUES（10,'2012-09-06');
SETTIMESTAMP=1351633836;
8
#121030 16:50:36 server id 1
INSERT INTOabsenceVALUES（5,2012-09-03);
SET TIMESTAMP=1351633836;
COMMIT;
#121030 16:50:36 server id 1 end_1og_pos 1210 Xid = 386
INSERT INTO absence VALUES(3,'2012-09-03*);
在确认服务器已停止之后，删掉已有的InnoDB文件，把它们替换为备份副本。然后，
件、InnoDB日志文件、各个表的.frm文件，以及用来定义你InnoDB配置的选项文件。
MMIT;
at 1316
at 1210
at 1183
应对InnoDB的自动恢复问题
end_log_pos 1477
end_log_pos 107
end_1og_pos 1343
end_log_pos 106
，那么MySQL服务器重启时，InnoDB存储引擎
88= PTX
Query....
xid =387
Query....
14.7使用备份来恢复数据
重
重
---
## Page 550
14.8.1复制的工作原理
更改会自动、及时地传播到这个副本上。
那么需要用到MySQL的实时复制功能。它可以让你拥有数据库的副本，并保证原始数据库的
不得不重复这个复制操作。如果想让辅助数据库能够随着主数据库内容的变化持续保持更新，
可是，如果原始数据库的内容发生了变化，而你又想让那个副本同样保持最新，那么以后你就
14.8
只是恢复InnoDB表，那么应用日志文件会比较麻烦，因为你应该使用只针对那几个表的更新。
么事情会简单很多，因为在这种情况下，你只需要把该次备份后所做的更新应用一遍即可。如果
应用一下（参考14.7.3节）。如果把InnoDB表的恢复操作作为整个数据库恢复操作的一部分，那
实现数据库“复制”（replication）的一种形式是，把数据库简单地复制到另一个服务器。
口在复制关系中，有两种服务器，一种为主服务器，另一种为从服务器。每个服务器都会
在MySQL里，数据库的复制原理如下。
在利用备份恢复InnoDB表之后，还需要把二进制日志里自这次备份之后所发生的更新重新
口如果是采用运行mysqldump生成转储文件的方式来备份InnoDB表，那么你应该重新初
口
口
口
口
口
当主服务器上有新的更新发生时，它会把这些更新写入主服务器的二进制日志，以便
给从服务器。当从服务器读完所有的事件时，就会暂停并等待更多的事件。
多远。这个进展是以复制坐标的方式来表示的，即二进制日志文件名和在该文件里的
每个从服务器都必须有权限连接主服务器，并请求更新。当从服务器连接到它的主服
为“事件”
新。因此，在主服务器上必须启用二进制日志功能。存储在二进制日志里的更新被称
更新通信是基于主服务器的二进制日志的，其中记录了需要发送到从服务器的各种更
的复制数据库。
在主服务器上所做的更新会传播到从服务器。所有更新不应该直接作用到从服务器里
复制开始时，任何复制到从服务器上的数据库都一定是主数据库的同等副本。之后，
每个从服务器在开始时，其数据库都必须与主服务器上的数据库同步。也就是说，
器，从而形成一个复制服务器链。
每个主服务器可以有多个从服务器。一个从服务器可以作为另一个从服务器的主服务
分配一个唯一的复制ID。
设置复制服务器
InnoDB表。
了原始分区，那么对表空间的初始化将包含两个步骤。
将重新创建它的系统表空间和日志文件。相关说明请参考12.5.3.1节。记得，如果使用
件、单个表空间文件（不包括原始分区）、InnoDB日志文件，以及所有InnoDB表的.frm
始化系统表空间和InnoDB日志文件，并把这个转储文件重新加载到InnoDB。
服务器。
确保当前服务器的选项文件列出的InnoDB配置，与你保存的选项文件一致。最后，重启
位置。
文件。
第14章数据库维护、备份和复制
（3）采用将转储文件当作 mysql 输入的方式重新加载它们。这样便会重建那些
（2）按原先的设置重新配置系统表空间，并重启服务器。然后，InnoDB存储引擎
（1）停止服务器并删除任何已有的与InnoDB有关的文件，其中包括系统表空间文
，然后，主服务器将把在二进制日志里记录的、自给定坐标之后发生的事件传送
(event)。
---
## Page 551
SLAVE权限，你可能就无法使用SHOWDATABASES语句来查看主服务器上的数据库名。）
授予更多权限。这样，你就不会感到束手束脚了。（例如，如果只为这个账户授予了REPLICATION
从服务器主机上使用rmysq1以“手动方式”连接主服务器进行测试，那么可能需要给这个账户
果这个账户只是单纯地用于达到复制的目的，那么不需要再设置其他的权限。不过，如果想在
内容：
用它。如果要想分别在主、从服务器上完成这个操作，则可以在相应的选项组里加上下面几行
器的启动选项server_id所需要的。此外，如果主服务器上未启用二进制日志功能，则需要启
14.8.2
导原则。
的功能。你应该考虑到不同服务器版本之间的兼容性问题。总之，我建议你能遵循以下几条指
请记住slave_user和slave_pass的值，稍后在从服务器连接主服务器时会使用到。
(2）在主服务器上，创建一个账户，让从服务器可以用它来连接主服务器，并请求更新信息：
log-bin=binlog_name
（1）确定你想要分配给每个服务器的ID值，并把它们记录到服务器在启动时会读取的选项
重启两个服务器，以便使更改生效。
server-id=slave_server_id
[mysqld]
[mysqld]
下面这个流程展示的是如何在两个服务器之间建立主从复制关系。
口在某个给定的MySQL版本系列（如5.5、5.6等）里，尽量使用最新的版本。这样，你可
口
复制支持还是一个正在蓬勃发展的领域，因此有时很难跟踪到何时加入了何种与复制有关
口在从服务器上，服务器会使用两个线程来完成复制任务。I/O线程负责接收来自主服务
口主服务器处理连接从服务器的方式与它处理常规客户端的方式很像，而从服务器的最
以从中受益良多：获得最丰富的功能集，最大限度地移除限制，消除问题。
大连接个数可以通过系统变量max_connections来设置。
从服务器上无法使用，那么你会遇到很多问题。
主、从服务器在功能上必须兼容。例如，如果主服务器使用的表所要求的存储引擎在
务器进行复制，反向操作则不行。
之亦然。如果主、从服务器的版本不一样，那么需要从旧版的主服务器向新版的从服
版本的从服务器相匹配，而不要让5.5版本的主服务器与5.1版本的从服务器相匹配；
尽量让主、从服务器使用的二进制日志格式相匹配。例如，让5.5版本的主服务器与5.5
自主服务器的事件，这样，在你进行备份时，从服务器里便不会有更新操作发生。
“脱节”能带来很大的好处。例如，当你停止了SQL线程时，IVO线程可以继续读取来
和SQL线程的操作互不影响，它们可以单独启动和关闭。两个线程在功能上的这
息的通信桥梁。在处理完一个中继日志文件之后，从服务器会自动将其删除。IO线
继日志中读出事件，并执行它们。中继日志相当于I/O线程向SQL线程传输数据更新
器的待处理事件，并把它们写到从服务器的中继日志（relaylog）。SQL线程负责从
以后再传输给从服务器。
建立主从复制关系
14.8设置复制服务器
531
如
反
种
程
中
---
## Page 552
可以根据13.1.2节的描述，锁死数据目录的内容。
是保密的，因此需要确保只让从服务器上的MySQL管理员的登录账户访问这个文件。例如，
句来查看它的工作状态。
MASTER_PORT选项来指明端口号。
套接字文件。因此，如果主、从服务器都运行在同一台主机上，那么应该使用127.0.0.1来代
语句获得的值。
新信息时会使用到它们。
复
参数和初始复制坐标。
从主服务器复制到从服务器。与数据库备份和复制技术有关的内容请参考本章的前面部分。
主机上进行备份，然后把这个备份加载到从服务器上去。另一种办法是，通过网络把所有数据库
到从服务器的方式，实现主、从服务器之间的初始同步。为此，一种可行的办法是，在主服务器
注意
制日志事件的起始位置告知从服务器
复制参数，那么可以连接到从服务器，并再次使用CHANGE MASTER语句。从服务器会用这些新
532
存储在master.info文件里的信息包括用于连接主服务器的用户名和密码。这些信息应该
如果主服务器没有监听默认端口，那么可以在CHANGE MASTER语句里包括一个
之前在主服务器创建的那个账户的用户名和密码，当从服务器连接主服务器并请求主服务器更
在Unix系
用以记录初始复制状态，并且会随着复制的进行不断更新这个文件。如果你以后需要改变
从服务器会把CHANGEMASTER参数存储在其数据目录下的一个名为master.info的文件
从服务器将连接主服务器并开始复制。你可以在从服务器上使用 SHOW SALVE STATUS 语
（6）让从服务器开始复制。
其中，‘master_host'是主服务器所在主机的名字。‘slave_user'和'slave_pass'应该是
CHANGE MASTER TO
（5）连接从服务器，并使用CHANGE MASTER语句来配置它。配置包括用于连接主服务器的
如果你还没有在主服务器上创建任何数据库或表，那么可以省略这一步，因为没有快照可拍。
START SLAVE;
（4）必须在从服务器上为将要复制的数据库建立一个副本。通过把主服务器上的数据库复制
请记住File和 Position的值。
mySql> FLUSH TABLES;SHOW MASTER STATUS;