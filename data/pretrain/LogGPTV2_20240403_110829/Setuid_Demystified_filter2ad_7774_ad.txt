is prohibited. We can see that this requirement is non-
trivial, and it must be veriﬁed by manual inspection of
the source code before our algorithm in Figure 3 can be
safely applied; we will return to this issue later.
Next, there are three requirements on the instantiation of
the GETSTATE(), SETSTATE(), and GETALLSTATES()
subroutines. First, the GETSTATE() routine must return
(a representative for) the equivalence class of the current
state of the operating system. Note that it is natural to
represent equivalence classes internally by singling out
a unique representative for each equivalence class and
using this value. Second, the SETSTATE() procedure
with parameter s must somehow cause the operating sys-
tem to enter a state s0 in the same equivalence class as
s (the implementation may freely choose one). Finally,
the GETALLSTATES() function must return a pair (S, C)
so that S contains at least one representative from each
equivalence class of ≡S and so that every equivalence
class of ≡OS contains some element (s, c) with c ∈ C.
When these general requirements are satisﬁed,
the
BUILDMODEL() algorithm from Figure 3 will correctly
infer a valid ﬁnite-state model for the underlying oper-
ating system. The proof is easy. We will write [x] for
the equivalence class containing x, e.g., [s] = {t ∈
S : s ≡S t}. If s c→ t appears in the ﬁnal FSA out-
put by BUILDMODEL(), then there must have been a
step at which, for some s0 ∈ [s], t0 ∈ [t], and c0 with
(s, c) ≡OS (s0, c0), we executed c0 in state s0 at line 6
and transitioned to state t0. (This follows from the cor-
rectness of SETSTATE() and GETSTATE().) The latter
means that s0 c0  t0, from which it follows that s c  t00 for
some t00 ∈ [t], since the OS respects ≡OS. Conversely,
if s0 c0  t0 for some s0, c0, t0, then by the correctness of
GETALLSTATES(), there will be some s and c satisfy-
ing (s, c) ≡OS (s0, c0) so that we enter line 6 with s, c,
and thanks to the deterministic nature of the operating
system we will discover the transition s c→ t for some
t ≡S t0. Thus, the FSA output by BUILDMODEL() is
exactly what it should be. Consequently, all that remains
is to check that these requirements are satisﬁed by our
instantiation of the schema.
R=y,E=y,S=ysetuid(x)setuid(y)R=y,E=x,S=ysetuid(y)setuid(x)R=y,E=y,S=xsetuid(y)R=y,E=x,S=xsetuid(x)setuid(y)setuid(x)R=x,E=y,S=xsetuid(y)R=x,E=x,S=xsetuid(x)setuid(x)setuid(y)R=x,E=y,S=ysetuid(y)R=x,E=x,S=ysetuid(x)setuid(y)setuid(x)R=y,E=x,S=ysetuid(0)setuid(x)R=y,E=y,S=ysetuid(y)setuid(0)setuid(x)setuid(y)R=y,E=y,S=xsetuid(0)setuid(y)R=y,E=x,S=xsetuid(x)setuid(y)setuid(0)setuid(x)R=y,E=y,S=0setuid(x)setuid(y)R=y,E=0,S=0setuid(0)setuid(y)R=0,E=0,S=0setuid(0)R=x,E=x,S=xsetuid(x)R=y,E=x,S=0setuid(y)setuid(0)setuid(x)R=y,E=0,S=ysetuid(y)setuid(0)setuid(x)setuid(y)setuid(0)setuid(x)setuid(0)setuid(x)setuid(y)R=y,E=0,S=xsetuid(y)setuid(0)setuid(x)R=x,E=y,S=xsetuid(x)setuid(0)setuid(y)R=x,E=y,S=0setuid(y)R=x,E=0,S=0setuid(0)R=x,E=x,S=0setuid(x)setuid(y)setuid(0)setuid(x)setuid(0)setuid(x)setuid(y)R=x,E=y,S=ysetuid(0)setuid(y)R=x,E=x,S=ysetuid(x)setuid(y)setuid(0)setuid(x)R=x,E=0,S=ysetuid(y)setuid(0)setuid(x)R=x,E=0,S=xsetuid(y)setuid(0)setuid(x)R=0,E=y,S=xsetuid(y)R=0,E=0,S=xsetuid(0)R=0,E=x,S=xsetuid(x)setuid(y)setuid(0)setuid(x)setuid(0)setuid(x)setuid(y)R=0,E=y,S=0setuid(0)setuid(x)setuid(y)R=0,E=y,S=ysetuid(x)setuid(y)R=0,E=0,S=ysetuid(0)setuid(y)setuid(0)setuid(x)R=0,E=x,S=ysetuid(y)setuid(0)setuid(x)R=0,E=x,S=0setuid(0)setuid(x)setuid(y)We argue this next for the implementation shown in
Figure 3. Let U denote the set of concrete uids (e.g.,
all 32-bit values), so that S = U × U × U. Say
that a map σ : U → U is a valid substitution if it
is bijective and ﬁxes 0, i.e., σ(0) = 0. Each such
substitution can be extended to one on S by working
component-wise, i.e., σ(r, e, s) = (σ(r), σ(e), σ(s)),
and we can extend it to work on system calls by apply-
ing the substitution to the arguments of the system call,
e.g., σ(setreuid(r, e)) = setreuid(σ(r), σ(e)).
We deﬁne our equivalence relation ≡S on S as fol-
two states s, s0 ∈ S are equivalent if there is
lows:
a valid substitution σ such that σ(s) = s0. Similarly,
(s, c) ≡OS (s0, c0) holds if there is some valid substitu-
tion σ so that σ(s) = s0 and σ(c) = c0.
The correctness of GETSTATE() and SETSTATE() is im-
mediate. Also, so long as n ≥ 6, GETALLSTATES()
is correct since the choice of uids u1, . . . , un is imma-
terial: every pair (s, c) ∈ S × C is equivalent to some
pair (s0, c0) ∈ S × C, since we can simply map the ﬁrst
six non-zero uids in (s, c) to u1, . . . , u6 respectively, and
there can be at most six non-zero uids in (s, c). Actu-
ally, we can see that the algorithm in Figure 3 comes
from a ﬁner partition than that given by ≡OS: for exam-
ple, (u1, u1, u1) and (u2, u2, u2) are unnecessarily dis-
tinguished. This causes no harm to the correctness of the
result, and only unnecessarily increases the size of the
resulting FSA. We gave the variant shown in Figure 3
because it is simpler to present, but in practice our im-
plementation does use the coarser relation ≡S.
All that remains to check is that the operating system re-
spects and behaves deterministically with respect to this
equivalence class. We verify this by manual inspection of
the kernel sources, which shows that in Linux, FreeBSD,
and Solaris the only operations that the uid-setting sys-
tem calls perform on user IDs are equality testing of two
user IDs, comparison to zero, copying one user ID to an-
other, and setting a user ID to zero. Moreover, the oper-
ating system behavior does not depend on anything else,
with one exception: Linux depends on whether the SE-
TUID capability is enabled for the process, so on Linux
we add an extra bit to each state indicating whether this
capability is enabled. Thus, our veriﬁcation task amounts
to checking that user IDs are treated as an abstract data
type with only four operations (equality testing, compar-
ison to zero, and so on) and that the side effects and re-
sults of the system call do not depend on anything outside
the state S. In our experience, verifying that the operat-
ing system satisﬁes these conditions is much easier than
fully understanding its behavior, as the former is an al-
most purely mechanical process.
This completes our justiﬁcation for the correctness of our
method for extracting a formal model to capture the be-
havior of the operating system.
6.4 Applications
The resulting formal model has many applications. We
have already discussed in Section 5 the semantics of the
setuid system calls and pointed out pitfalls; this relied
heavily on the FSA formal model. Next, we will dis-
cuss several additional applications: verifying documen-
tation and checking conformance with informal speciﬁ-
cations; identifying cross-platform semantic differences
that might indicate potential portability issues; detecting
inconsistency in the handling of user IDs within an OS
kernel; and checking the proper usage of the uid-setting
system calls in programs automatically.
6.4.1 Verifying Accuracy of Manual Pages
Manual pages are the primary source of information for
Unix programmers, but unfortunately they are often in-
complete or wrong. FSAs are useful in verifying the ac-
curacy of manual pages of uid-setting system calls. For
each call, if its FSA is small and its description in man-
ual pages is simple, we check if each transition in the
FSA agrees with the description by hand. Otherwise, we
build another FSA based on the description and compare
this FSA to the original FSA built by simulation. Differ-
ences between the two FSAs indicate discrepancies be-
tween the behavior of the system call and its description
in manual pages.
The following are a few examples of problematic docu-
mentation that we have found using our formal model:
• The man page of setuid in Redhat Linux 7.2 fails to
mention the SETUID capability, which affects the
behavior of setuid.
• The man page of setreuid in FreeBSD 4.4 says:
Unprivileged users may change the real
user ID to the effective user ID and vice-
versa; only the super-user may make
other changes.
However, this is incorrect. Swapping the real uid
and effective uid does not always succeed, such as
when ruid=100, euid=200, suid=100, contrary to
what the man page suggests. The correct descrip-
tion is “Unprivileged users may change the real user
ID to the real uid or saved uid, and change the effec-
tive uid to the real uid, effective uid, or saved uid.”
• The man page of setgid in Redhat Linux 7.2 says
The setgid function checks the effective
gid of the caller and if it is the superuser,
all process related group ID’s are set to
gid.
In reality, the effective uid is checked instead of the
effective gid.
uid, or saved uid is zero. To verify this invariant, we ex-
tend the formal model of user IDs with the fsuid and au-
tomatically create an FSA of the model on Linux. From
the FSA, we discovered that the invariant does not always
hold, because the state where fsuid = 0 and ruid 6= 0,
euid 6= 0, suid 6= 0 is reachable. For example, the call
sequence in Figure 2 will violate the invariant. The prob-
lem results from an inconsistency in the handling of the
fsuid in the uid-setting system calls. While every suc-
cessful setuid and setreuid call sets the fsuid to the ef-
fective uid, a successful setresuid call will fail to do the
same if the effective uid does not change during the call.
The problem has been conﬁrmed by the Linux commu-
nity.
6.4.2
Identifying Implementation Differences
Since various Unix systems implement the uid-setting
system calls differently, it is difﬁcult to identify their se-
mantic differences via reading kernel sources. We can
solve this problem by creating an FSA of the user ID
model in each Unix system and contrasting the FSAs.
For example, Figure 4 shows clearly that the semantics
of setuid in Solaris is different from that in FreeBSD and
Linux.
The approach can be further formalized by taking the
symmetric difference of FSAs. In particular, if M, M0
are two FSAs for two Unix platforms with the same state-
space, we can ﬁnd portability issues as follows. Compute
the parallel composition M × M0, whose states are pairs
(s, s0) with s a state from M and s0 a state from M0.
Then, mark as an accepting state of M × M0 any pair
(s, s0) where s 6= s0. Now any execution trace that starts
at a non-accepting state and eventually reaches an accept-
ing state indicates a sequence of system calls whose se-
mantics is not the same on both operating systems. This
indicates a potential portability issue, and all such differ-
ences can be computed via a simple reachability compu-
tation (e.g., depth-ﬁrst search).
6.4.3 Detecting Inconsistency within an OS Kernel
An OS kernel maintains many invariants which both the
kernel itself and many application programs depend on.
Violation of the invariants may cause vulnerabilities in
both the OS and applications. Therefore, it is important
to detect any violation of the invariants.
The Linux kernel tries to maintain the invariant that the
fsuid is zero only if at least one of the real uid, effective
6.4.4 Checking Proper Usage of Uid-setting System
Calls
The formal model is also useful in checking proper us-
age of uid-setting system calls in programs. We model
a program as an FSA, called the program FSA, which
represents each program point as a state and each state-
ment as a transition. We call the FSA describing the user
ID model a model FSA. By composing the program FSA
with the model FSA, we get a composite FSA. Each state
in the composite FSA is a pair (s, s0) of one state s from
the model FSA (representing a unique combination of
the values in the real uid, effective uid, and saved uid)
and one state s0 from the program FSA (representing a
program point). Thus, a reachable state (s, s0) in the
composite FSA indicates that the state s in the model
FSA is reachable at the program point s0. Figure 8(b)
shows the program FSA of the program in Figure 8(a).
Figure 8(c) shows the composite FSA obtained by com-
posing the model FSA in 4(a) with the program FSA in
Figure 8(b).
This method is useful for checking proper usage of uid-
setting system calls in programs, such as:
• Can a uid-setting system call fail? If any error state
in the model FSA is reachable at some program
point, it shows that a uid-setting system call may
fail there.
• Can a program fail to drop privilege? If any state
that contains a privileged user ID in the model FSA
is reachable at a program point where the program
should be unprivileged, it shows that the program
may have failed to drop privilege at an earlier pro-
gram point.
// ruid=1, euid=0, suid=0
printf(“drop priv”);
setuid(1);
execl(“/bin/sh”, “sh”,NULL);
1:
2:
3:
Fourth, the formal model is useful in detecting inconsis-
tency in an OS kernel. Finally, the formal model is use-
ful in checking proper usage of uid-setting system calls
in programs automatically.
(a) A program segment
7 Case Studies of Security Vulnerability
(b) Program FSA of the program in Figure 8(a)
(c) Composite FSA of the model FSA in Figure 4(a) and
the program FSA in Figure 8(a)
Figure 8: Composing a model FSA with a program FSA
• Which part of the program may run with privilege?
To answer this question, we ﬁrst identify all states
that contain a privileged user ID in the model FSA.
Then, we identify all program points where any of
those states are reachable. The program may run
with privilege at these program points.
A full discussion is out of the scope of this paper, and
we refer the interested reader to a companion paper for
details [11].
6.5 Advantages
The formal model holds several advantages over trying