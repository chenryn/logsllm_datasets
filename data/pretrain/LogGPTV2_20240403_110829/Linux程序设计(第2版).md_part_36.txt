### endwin()

运行此程序以观察其执行情况。

**操作说明：**

在使用`noecho`函数关闭键盘输入回显功能，并通过`cbreak`函数将输入模式设置为字符中断模式之后，我们分配一小块内存来准备接收密码。每个输入的字符都会立即被处理，并在屏幕的下一个位置显示一个“*”号。请注意，在每次显示后都需要刷新屏幕。当用户按下回车键时，我们将使用`strcmp`函数对比刚输入的密码和预设在程序中的密码。

如果您使用的curses库版本非常老旧，可能需要对代码进行一些小调整才能确保屏幕能够正确刷新。具体来说，您需要在调用`getstr`之前添加一次`refresh`调用。这是因为，在现代的curses库中，`getstr`是通过调用`getch`来完成工作的，而后者会自动刷新屏幕。

### 6.10 窗口

到目前为止，我们一直把终端作为全屏输出媒介来使用。对于简短且简单的程序而言，这种方法通常已经足够。然而，curses库的功能远不止于此，它允许我们在物理屏幕上同时展示多个不同尺寸的窗口。本节所介绍的大多数函数都属于X/Open技术规范定义的扩展curses库部分。尽管如此，由于这些功能在多数平台上都能得到良好支持，因此一般不会遇到兼容性问题。接下来，我们将继续探讨多窗口的使用方法。截至目前，我们已经学习了许多基础函数，现在我们将看到这些命令是如何通用化地应用于多窗口场景中的。

### 6.10.1 WINDOW 结构

虽然我们之前提到过标准屏幕`stdscr`，但一直没有深入讨论它，因为在此之前我们遇到的所有函数默认都在`stdscr`上工作，因此无需将其作为参数传递。`stdscr`实际上只是`WINDOW`结构的一个特例，类似于标准输出`stdout`之于文件流。`WINDOW`结构通常在`curses.h`头文件中定义，对它的访问必须遵循特定的指令进行，程序不应直接访问该结构，因为它依赖于具体的curses实现，在不同版本间可能会有所变化。

我们可以使用`newwin`和`delwin`来创建和销毁窗口，这两个函数的定义如下：

```c
#include <curses.h>
WINDOW *newwin(int num_of_lines, int num_of_cols, int start_y, int start_x);
int delwin(WINDOW *window_to_delete);
```

`newwin`用于创建一个新的窗口，从屏幕位置（`start_y`, `start_x`）开始，其大小由`num_of_lines`和`num_of_cols`指定；如果创建成功，则返回指向新窗口的指针，否则返回`NULL`。若要使新窗口的右下角正好位于屏幕的右下角，可以将行数或列数设置为零。需要注意的是，任何窗口都不应超出当前屏幕范围，否则`newwin`将会失败。新窗口完全独立于现有窗口，默认情况下会被放置在所有已有窗口之上，但不会改变老窗口的内容。

`delwin`则用来删除通过`newwin`创建的窗口。由于调用`newwin`时可能会分配内存，所以一旦某个窗口不再需要，最好立即删除它。不过，请勿尝试删除curses自身的窗口`stdscr`和`curscr`！

### 6.10.2 通用化函数

此前，当我们需要向屏幕添加字符时，介绍了`addch`和`printw`两个函数。实际上，这些函数以及其它许多函数都有针对特定窗口操作的通用化版本，并且为了方便使用，还提供了移动光标的功能。在大多数curses的具体实现中，这些常用函数都是通过宏定义（如`#define`语句）实现的，它们实际上是更通用化函数的别名。

- 如果给函数加上前缀“w”，表示对特定窗口进行操作，此时需在其参数列表最前面增加一个`WINDOW`指针。
- 若加上前缀“mv”，意味着需要额外提供两个坐标参数（y值和x值），以指定操作的位置。这里的y和x坐标相对于窗口而非整个屏幕，(0,0)代表窗口的左上角。
- 当函数带有“mvw”前缀时，则需要传递三个额外参数：一个`WINDOW`指针、一个纵坐标y值和一个横坐标x值。尽管有时看起来似乎应该将y和x放在最前面，但实际上`WINDOW`指针总是先出现。

以下是`addch`和`printw`系列函数的完整定义示例：

```c
#include <curses.h>
int addch(const chtype ch);
int waddch(WINDOW *win, const chtype ch);
int printw(const char *fmt, ...);
int mvprintw(int y, int x, const char *fmt, ...);
int wprintw(WINDOW *win, const char *fmt, ...);
int mvwprintw(WINDOW *win, int y, int x, const char *fmt, ...);
```

其他一些函数，例如`inch`，也有带“mv”（移动）和“mvw”（窗口移动）前缀的变体。

### 6.10.3 移动和刷新窗口

以下是一些用于移动和重新绘制窗口的命令：

```c
#include <curses.h>
int mvwin(WINDOW *win, int new_y, int new_x);
int wrefresh(WINDOW *win);
int touchwin(WINDOW *win);
int werase(WINDOW *win);
int scrollok(WINDOW *win, bool bf);
int scroll(WINDOW *win);
```

- `mvwin`可以在屏幕上移动窗口。如果移动过程中窗口的任何部分超出了屏幕区域，该操作将失败。
- `wrefresh`、`werase`等函数分别是`refresh`、`erase`等函数的窗口特定版本，通过添加`WINDOW`指针参数，它们可以作用于指定窗口而非仅限于`stdscr`。
- `touchwin`通知curses库某个窗口内容已更改，即使实际未做修改，curses也会在下次调用`wrefresh`时重绘该窗口。这在处理多个叠加窗口时特别有用。
- `scrollok`和`scroll`控制窗口滚动行为。如果`scrollok`接收到非零值，则允许窗口滚动；默认情况下，窗口不可滚动。`scroll`函数简单地将窗口内容向上滚动一行。某些curses版本还提供了一个`wscrl`函数，允许指定滚动行数（包括负数）。

现在，我们已经掌握了如何管理和操作多个窗口。下面是一个名为`multiwin.c`的示例程序，演示了这些新函数的应用。为简洁起见，这里省略了错误检查代码。

### 示例程序：多窗口

```c
#include <curses.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    WINDOW *new_window_ptr;
    int x_loop, y_loop;
    WINDOW *popup_window_ptr;
    char a_letter = 'a';

    initscr();

    // 填充主窗口并刷新
    move(5, 5);
    printw("Testing multiple windows");
    refresh();

    for (y_loop = 0; y_loop < 9; y_loop++) {
        for (x_loop = 0; x_loop < 78; x_loop++) {
            mvaddch(y_loop + 1, x_loop + 1, a_letter++);
        }
    }
    refresh();
    sleep(2);

    // 创建并填充新窗口
    new_window_ptr = newwin(10, 20, 5, 5);
    box(new_window_ptr, 0, 0);
    wrefresh(new_window_ptr);
    sleep(2);

    // 刷新新窗口
    wrefresh(new_window_ptr);
    sleep(2);

    // 创建并显示弹出窗口
    popup_window_ptr = newwin(10, 20, 8, 8);
    mvwprintw(popup_window_ptr, 5, 2, "Pop Up window!");
    box(popup_window_ptr, '|', '-');
    wrefresh(popup_window_ptr);
    sleep(2);

    // 清除并删除窗口
    touchwin(new_window_ptr);
    wrefresh(new_window_ptr);
    wclear(new_window_ptr);
    sleep(2);

    touchwin(popup_window_ptr);
    wrefresh(popup_window_ptr);
    delwin(popup_window_ptr);
    sleep(2);

    touchwin(stdscr);
    refresh();
    sleep(2);

    endwin();
    exit(EXIT_SUCCESS);
}
```

由于无法在书中动态展示整个过程，我们只能通过快照来呈现各个阶段的屏幕显示效果。图6-4展示了第一个弹出窗口的情况，而图6-5则是在背景窗口发生变化后绘制出另一个弹出窗口的情景。

从示例代码可以看出，对窗口的刷新操作需要仔细安排，以确保它们按照正确的顺序显示。curses在刷新窗口时不考虑它们在屏幕上的先后顺序，因此必须手动管理刷新顺序。一种解决方法是将所有窗口指针保存在一个数组或列表中，并通过这个数组来控制它们的显示顺序。

### 6.10.4 优化窗口刷新

对于多个窗口的刷新操作，虽然存在一定的技巧要求，但并非无章可循。然而，在处理慢速链路（例如调制解调器连接）上的终端时，可能会遇到严重的问题。在这种情况下，最重要的是尽量减少发送到屏幕的字符数量，因为慢速链路上的屏幕更新速度可能会非常缓慢。

为此，curses提供了一种优化手段，即使用`wnoutrefresh`和`doupdate`这两个函数：

```c
#include <curses.h>
int wnoutrefresh(WINDOW *win);
int doupdate(void);
```

- `wnoutrefresh`决定哪些字符需要发送到屏幕，但并不实际发送。
- `doupdate`负责将字符真正发送给终端。如果在调用`wnoutrefresh`后立即调用`doupdate`，则相当于调用了`wrefresh`。如果需要刷新多个窗口，可以先依次为每个窗口调用`wnoutrefresh`，然后统一调用一次`doupdate`。这样，curses会计算各窗口的最终状态，并只发送必要的字符，从而最大限度地减少了传输量。

### 6.11 子窗口

最后，让我们看看一种特殊的多窗口类型：子窗口。子窗口的创建和销毁通过以下函数完成：

```c
#include <curses.h>
WINDOW *subwin(WINDOW *parent, int nlines, int ncols, int begin_y, int begin_x);
int delwin(WINDOW *win);
```

`subwin`的参数与`newwin`非常相似，子窗口的删除方式也与其他窗口相同。可以通过带有“mvw”前缀的函数来写入子窗口，就像对待普通新窗口一样。实际上，大部分时间里，子窗口的行为与新窗口非常相似，唯一的重大区别在于：

- 子窗口没有独立的屏幕字符存储区，而是与其父窗口共享同一块存储空间。这意味着对子窗口内容所做的任何修改都会反映在父窗口中，而且删除子窗口时屏幕显示不会发生变化。

尽管如此，子窗口仍然有其用途，尤其是在需要选择性地滚动屏幕某一小区域时。将该区域定义为子窗口并滚动它，就能达到目的。不过，需要注意的是，在应用程序刷新屏幕之前，必须先对其父窗口调用`touchwin`。