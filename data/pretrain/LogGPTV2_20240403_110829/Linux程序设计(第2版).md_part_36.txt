endwin() :
运行这个程序、看看它的运行情况是怎样的
操作注释：
在用noecho函数关闭了键盘输人的回显功能，用cbreak函数把输人情况设置为字符中止模式
之后，我们开辟一小块内存做好接收口令字的准备工作。构成口令字的每一个字符一经敲人就
立刻得到处理。随后，我们在屏幕的下一个位置显示一个“*”号，注意每次都要对屏幕进行刷
新。用户按下回车键后，我们使用Strcmp把刚输人的口令字和保存在程序里的口令字进行比较。
如果你使用的curses函数库版本非常老，就可能需要对程序做一些小修改才能保证
屏募能够被正确地刷新。即你必须在getstr调用前加上一个refresh调用。在现如今的
curses函数库里，getstr被定义为调用getch完成操作，而后者会自动刷新屏幕。
6.10窗口
到目前为止，我们一直是把终端用做一个全屏输出介质。对短小面又简单的程序来说，这
样做一般已经足够了，但curses函数库的“功力”远大于此。我们可以在物理屏幕上同时显示多
个不同尺寸的窗口。在这一小节里介绍的函数大部分只有X/Open技术规范里规定的扩展curscs函
数库才能支持。但既然curses函数库能够支持它们，在大多数平台上使用它们一般也就不会有什
么问题：我们将继续学习多窗口的使用方法。到目前为止我们已经学过不少的函数了，我们将
看到这些函数命令的通用化形式是如何用来处理多窗口情况的。
加入jaVa编程群：524621833
---
## Page 188
170Linux程序设计
6.10.1WINDOW结构
我们已经介绍过标准屏幕stdscr了、但我们一直没有用上它，因为我们前面遇见的函数都假
设自已是工作在sidscr上，因此不需要把它为一个参数进行传递。
标准屏stdscr只是WINDOW结构的一个特例.就象标准输出stdout是文件流中的-个特例
一样。WINDOw结构通常定义在curses.h头文件里，对它的存取操作必须按规定的指令进行，程
序永远不允许直接访问它，因为这个结构依赖于curses函数库的具体实现情况，它在不同版本的
curses函数库里会有所变化。
我们可以用newwin和delwin调用创建和关闭窗口，下面是这两个调用的定义：
#include 
WINDog *newwan(ant num_of_linen, ict sum_of,usln, ir.t start_y. int cart_x) :
int de1win(wINDow *window_to_delcte) :
ncwwin函数的作用是创建一个新窗口，窗r1从屏幕位置（start_y，star_x）开始，尺寸由分别
代表行数和列数的num_of_lines和num_of_cols参数指定：它返回一个指向新窗口的指针；如果
窗口创建操作失效，将返回“null”。如果想让新窗口的右下角正好落在屏幕的右下角位置上，
可以把它的行数或列数设置为零。窗口不论新旧大小，决不允许超越当前屏幕的范围。如果新
窗口的某个部分会落在屏幕区域以外的地方，newwin就会失败。newwin创建的新窗口完全独立
于任何现有的窗口。在缺省的情况下，它将被放置在一切现有窗口的最上面，这置（但不会改
变）老窗口的内容。
delwin函数的作用是删除一个通过newwin函数创建的窗口。因为调用newwin的时候可能已
经分配过内存，所以只要某个窗口不再需要被使用，最好立刻掉它。但千万不要去尝试除
curses自己的窗口stdscr和curscr！
创建出新窗口之后，怎样才能对它进行写操作呢？答案是这样的：几乎所有我们前面见过
的函数都有能够对指定窗口进行操作的通用化版本，并且，为了方便人们的使用，它们还都具
备光标移动功能。
6.10.2通用化函数
在前面的内容里，当需要把字符添加到屏幕上去的时候，我们给大家介绍了addch和printw
这两个函数。这两个函数，再加上其他一些函数，都可以再添上几个前级：前缀“w”表示对窗
[1进行操作；“mv”表示光标移动；面“mvw”表示对窗口进行整体移动。在curses函数库的
大多数具体实现里，如果你去查看它的头文件，就会发现我们曾经使用过的许多函数都只是简
单的宏定义（#define语句），宏定义的内容是一些更通用化的函数。
如果给函数添上一个“w”前缀，就必须在它参数表的最前面多加上一个WINDOW指针。
如果给函数添上一个“mv”前缀，就必须多加两个参数.一个是屏幕的纵坐标y值，一个是屏幕
的横坐标x值。两个坐标值设定了执行这一操作的屏幕位置。y和x是相对于窗口的坐标值面不是
相对于屏幕的坐标值，（0.0）代表窗口的左上角。
如果给函数添上一个“mvw”前缓，就必须多传递三个参数，它们是一个WINDOW指针、
加入jaVa编程群：524621833
---
## Page 189
第6章curses函数库171
一个纵坐标y值和一个横坐标x值：WINDOW指计永远出现在屏幕坐标值的前面，可有时候从函
数前缓上看好象应该把y和x坐标值故在最前面，遇到这种情况千万不要犯糊涂，否则很容易出
问题
下面是addch和printw系列全体函数的框架定义：
#include 
int addeh(const chtype char);
int waddch(wIMDow *window_poiner, constchryre（har)
int printwichar *format....);
int mvprintw(int y. int x, char *format.
int
wprantw(wINDow *windo,po,nteI.char*+ca....1 ;
int mvwprintw(WINDow *wandow_pointer,nt y.n x.char *format...)
} :
其他一些函数，比如inch，也有加“mv”（移动）和“mvw”（窗口移动）前缀的通用化变体
6.10.3移动和刷新窗口
下面这些命令让我们能够移动和重新绘制淘口：
include 
int mvwin(wINDow *windox_to moze. :nt new, y. 1nt new_x) :
int wrefresh(WINDOw *window_ptc):
int touchwin(WINDoN*window_ptr::
int
werase(wINoOw*windo_ptY).
ant
scrollok(wNxw*window_ptr.boc]scrol1_f2ag)
int seroll(wINDow *window_ptt1;
mvwin函数的作用是在屏幕上移动·个窗口、因为不允许窗口的任何部分超出屏幕区城，所
以如果在移动窗口的时候它的某个部分会落到屏区域以外的地方，这个mvwin操作就会失败。
wrefresh、wclear和werase函数分别是refresh、clear和erase函数的通用化版本，加上：那个
WINDOW指针参数之后，它们就可以对指定的窗口进行操作，不再局限于stdscr了。
touchwin函数的情况比较特殊。它的作用是通知lcurses函数库它的参数指向的窗口中的内容
已经发生了改变。这就意味着curses必须在下一次的wrefresh调用里重新绘制那个窗Ll，哪怕用
户实际上并没有修改过那个窗口里的内容，curses也还是会照章办理。在屏幕上重叠着多个窗！1
时，我们可以通过这个函数来安排显示其中的-个。
scrollok和scroll两个函数控制着窗[1的卷屏情况。如果传递到scrollok函数里去的是--个布
尔urue值（通常是非零值），就允许窗口卷屏：面在缺省的情况下，窗口是不能卷屏的。scroll函
数的作用比较简单，就是把窗口的内容上卷一行有的curses版本里还有一个wsctl函数，它多出
一个指定卷行行数的参数，这个参数还可以是负数值我们在本章后面的内容里再对卷属问题
进行进一步讨论。
现在，我们已经能够对不止一个窗口进行管理和操作了。我们来把这些新函数用在下面这
个multiw1.c程序里。为简洁起见，我们的程序省略了错误检查
动手试试：多窗口
加入jaVa编程群：524621833
---
## Page 190
172
Linux程序设计
1）和往常一样，我们先安排好各种各样的定义：
include 
#include 
#include 
int main()
WINDow *new_window_ptr:
int x_loop:
WINDow *popup_windoa_ptr:
char a_letter = ‘a′;
int y_loop:
initscr1):
2）然后，我们用字符填满基本窗口，填满逻辑窗口后对物理屏幕进行刷新。
move(5, 5);
printw(*gs*,*Testing multiple windows*);
refresh(}:
for (y_loop = 0: y_1oop '9)
a_letter++:
:.0.= 181101
refresh();
sleep (21 ;
5）此时，如果我们对新窗口做一次刷新调用，什么也不会发生，因为我们还没有对新窗口
做过改动。
wrefregh(new_window_ptr) :
sleep(21 :
加入java编程群：524621833
---
## Page 191
第6章curses函数库
173
6)但如果我们先对新窗口做次touchwin调用、让curses认为新窗口里的内容已经发生了变化，
下一个wrefresh调用就会再次把新窗口调到屏幕的最前面来。
wrefresh(new_window_ptr):
sleep(2);
7）接着，我们再添上一个加了框的重叠密口。
popup_window_ptr =newwin(10, 20.8. 8);
avwprintw(popup_window_ptr，5,2，“ks*，*Pop Up window!*);
box(popup_window_ptr,'|',
}：
wrefresh(popup_window_ptr):
sleep (2):
8）执行下面这些语句之后，我们就能在清屏和删除它们之前看到那个新的“弹出”窗口了。
touchwin(new_window_ptr):
wrefresh(new_window_ptr):
wclear(new_window_ptr);
sleep(2):
sleep12);
touchwin(popup_window_ptr):
wrefresh(popup_window_ptr):
delwin(popup_windou_ptr);
sleep(2):
touchwin(stdscr):
refresh():
sleep (2) :
exit(EXIT_SUCCESS):
endwin() :
我们没有办法让读者在书里看到这一切的发生过程，只能把各阶段的屏幕显示情况以快照
的形式提供给大家。图6-4是绘制出第一个弹出窗口时的情景。
Temira
eEeH
图6-4
加入jaVa编程群：524621833
---
## Page 192
Linux程序设计
改变背景窗口后，又绘制出一个弹出窗，请看图6-5的屏幕快照。
Temina
lle Bor
40
图6-5
从示例程序的代码我们可以看出，对窗口的刷新操作必须做细致的安排才能让它们以正确
的顺序显示到屏幕上。curses在剧新窗口的时候并不考虑窗口在屏幕上出现的先后顺序，所谓窗
口之间的上下继承关系也无从谈起。为了确保curses能够以正确的顺序绘制窗口，就必须以正确
的顺序对它们进行刷新。解决这个问题的办法之足把全体窗口的指针都保存到一个数组或列
表里，通过这个数组来安排它们显示到屏幕上去的正确顺序。
6.10.4优化窗口的刷新操作
从上面的例子可以看出，对多个窗口进行刷新需要一定的技巧，但还不至于无章可循。尽
管如此，当我们准备刷新一个慢速链路（比如一个调制解调器）上的终端时，就可能出现比较
严重的问题。
在这种情况下，最主要的事情是尽量减少往屏幕上绘制的字符个数，因为慢速链路上的屏
募绘制工作可能会慢得让人难以忍受。curses为此准备了一个非常手段，这需要使用下面两个函
数：wnoutrefresh和doupdate。
includo curses.h>
Int wmoutrefresh1wINDow *window_ptr) ;
int doupdate (vo1d) :
wnoutrefresh函数的作用是决定需要把哪个字符发送到屏幕去，但并不真正执行字符发送操
作、真正把字符发送给终端的工作由doupdate函数完成的。如果在调用wnoutrefresh函数之后立
加入jaVa编程群：524621833
---
## Page 193
第6章curses函数库
175
刻跟r·个doupdate调用，就相当于调用wrefresh函数的效果。如果你想重新绘制好儿个窗口，
可以先为每一个窗口调用wnoutrefresh函数（当然要按正确的顺序来操作），在最后那个
wnoutrefresh两数完成之后再统--调用-次doupdate函数。curses会依次完成各窗口在屏幕剧新方
面的计算，仅把最终的结果剧新到屏幕上。这种做法可以最大限度地减少需要curses发送的字符
个数。
6.11子窗口
介绍完多窗口之后，我们来看看·种特殊类型的多窗口：子窗口。子窗口的创建和关闭工
作是用下面这几个函数完成的：
1nclude <curses.h
WINDow *subwin(WINDow *parent, int num_of.,lines, int nun_of_cols,
int delwin(wiNDow *windov_to_dolete1:
int. start_y. int start_x) ;
subwin函数的参数几乎与newwin完全一样，子窗口的删除过程也与其他窗口1通过delwin调
用被删除的情况相同。我们可以使用带“mvw”前缀的函数来写子窗口，就象对待一个新窗1
那样。事实上，在大多数时间里，子窗口的行为与一个新窗口非常相似，两者之间只有一个重
大的差：
子窗L没有独立的屏字符存储区，不保存白已屏幕字符的集合：它们和父窗口共享着同
一块字符存储区，这个区域及其大小是创建子窗口时由父窗口设定的。这就意味着对子窗口内
容所做的修改会映射到它的父窗口里去，子窗口被删除时屏幕显示不会发生变化。
这样说来，子窗口好象没什么用处。为什么不直接在父窗口里做内容修改呢？子窗口最主
要的用途是有选择地卷动其他窗口里的部分内容，这个办法很简明。在编写curses程序的时候，
经常会出现需要卷动屏幕某个小区域的情况。把这个小区域定义为一个子窗口，卷动这个子窗
口，就能到达我们的目的。
使用子窗口时有一个限制规定：在应用程序刷新屏募之前必须先对其父窗口调用