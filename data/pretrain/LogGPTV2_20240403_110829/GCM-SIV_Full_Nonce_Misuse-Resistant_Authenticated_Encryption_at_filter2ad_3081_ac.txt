   nonce repeats, then the only security loss is that identical
   plaintexts will produce identical ciphertexts.  Since this can also
   be a concern (as the fact that the same plaintext has been encrypted
   twice is revealed), we do not recommend using a fixed nonce as a
   policy.  In addition, as we show below, better-than-birthday bounds
   are achieved by AES-GCM-SIV when the nonce repetition rate is low.
   Finally, as shown in [BHT18], there is a great security benefit in
   the multiuser/multikey setting when each particular nonce is reused
   by a small number of users only.  We stress that the nonce misuse-
   resistance property is not intended to be coupled with intentional
   nonce reuse; rather, such schemes provide the best possible security
   in the event of nonce reuse.  Due to all of the above, it is
   RECOMMENDED that AES-GCM-SIV nonces be randomly generated.
   Some example usage bounds for AES-GCM-SIV are given below.  The
   adversary’s advantage is the "AdvEnc" from [key-derive] and is
   colloquially the ability of an attacker to distinguish ciphertexts
   from random bit strings.  The bounds below limit this advantage to
   2^-32.  For up to 256 uses of the same nonce and key (i.e., where one
   can assume that nonce misuse is no more than this bound), the
   following message limits should be respected (this assumes a short
   additional authenticated data (AAD), i.e., less than 64 bytes):
      2^29 messages, where each plaintext is at most 1 GiB
      2^35 messages, where each plaintext is at most 128 MiB
Gueron, et al.                Informational                    [Page 12]
RFC 8452                       AES-GCM-SIV                    April 2019
      2^49 messages, where each plaintext is at most 1 MiB
      2^61 messages, where each plaintext is at most 16 KiB
   Suzuki et al. [multi-birthday] show that even if nonces are selected
   uniformly at random, the probability that one or more values would be
   repeated 256 or more times is negligible until the number of nonces
   reaches 2^102.  (Specifically, the probability is 1/((2^96)^(255)) *
   Binomial(q, 256), where q is the number of nonces.)  Since 2^102 is
   vastly greater than the limit on the number of plaintexts per key
   given above, we don’t feel that this limit on the number of repeated
   nonces will be a problem.  This also means that selecting nonces at
   random is a safe practice with AES-GCM-SIV.  The bounds obtained for
   random nonces are as follows (as above, for these bounds, the
   adversary’s advantage is at most 2^-32):
      2^32 messages, where each plaintext is at most 8 GiB
      2^48 messages, where each plaintext is at most 32 MiB
      2^64 messages, where each plaintext is at most 128 KiB
   For situations where, for some reason, an even higher number of nonce
   repeats is possible (e.g., in devices with very poor randomness), the
   message limits need to be reconsidered.  Theorem 7 in [AES-GCM-SIV]
   contains more details, but for up to 1,024 repeats of each nonce, the
   limits would be (again assuming a short AAD, i.e., less than 64
   bytes):
      2^25 messages, where each plaintext is at most 1 GiB
      2^31 messages, where each plaintext is at most 128 MiB
      2^45 messages, where each plaintext is at most 1 MiB
      2^57 messages, where each plaintext is at most 16 KiB
   In addition to calculating fresh AES keys for each nonce, these AEADs
   also calculate fresh POLYVAL keys.  Previous versions of GCM-SIV did
   not do this and instead used part of the AEAD’s key as the POLYVAL
   key.  Bleichenbacher pointed out [Bleichenbacher16] that this allowed
   an attacker who controlled the AEAD key to force the POLYVAL key to
   be zero.  If a user of this AEAD authenticated messages with a secret
   additional-data value, then this would be insecure as the attacker
   could calculate a valid authenticator without knowing the input.
   This does not violate the standard properties of an AEAD as the
Gueron, et al.                Informational                    [Page 13]
RFC 8452                       AES-GCM-SIV                    April 2019
   additional data is not assumed to be confidential.  However, we want
   these AEADs to be robust against plausible misuse and also to be
   drop-in replacements for AES-GCM and so derive nonce-specific POLYVAL
   keys to avoid this issue.
   We also wish to note that the probability of successful forgery
   increases with the number of attempts that an attacker is permitted.
   The advantage defined in [key-derive] and used above is specified in
   terms of the ability of an attacker to distinguish ciphertexts from
   random bit strings.  It thus covers both confidentiality and
   integrity, and Theorem 6.2 in [key-derive] shows that the advantage
   increases with the number of decryption attempts, although much more
   slowly than with the number of encryptions; the dependence on the
   number of decryption queries for forgery is actually only linear, not
   quadratic.  The latter is an artifact of the bound in the paper not
   being tight.  If an attacker is permitted extremely large numbers of
   attempts, then the tiny probability that any given attempt succeeds
   may sum to a non-trivial chance.
   A security analysis of a similar scheme without nonce-based key
   derivation appears in [GCM-SIV], and a full analysis of the bounds
   when applying nonce-based key derivation appears in [key-derive].  A
   larger table of bounds and other information appears at
   [aes-gcm-siv-homepage].
   The multiuser/multikey security of AES-GCM-SIV was studied by
   [BHT18], which showed that security is almost the same as in the
   single-user setting, as long as nonces do not repeat many times
   across many users.  This is the case when nonces are chosen randomly.
10.  IANA Considerations
   IANA has added two entries to the "AEAD Algorithms" registry:
   AEAD_AES_128_GCM_SIV (Numeric ID 30) and AEAD_AES_256_GCM_SIV
   (Numeric ID 31), both referencing this document as their
   specification.
11.  References
11.1.  Normative References
   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              .
Gueron, et al.                Informational                    [Page 14]
RFC 8452                       AES-GCM-SIV                    April 2019
   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, .
   [SP800-38A]
              Dworkin, M., "Recommendation for Block Cipher Modes of
              Operation: Methods and Techniques", NIST SP 800-38A,
              DOI 10.6028/NIST.SP.800-38A, December 2001,
              .
11.2.  Informative References
   [AES-GCM-SIV]
              Gueron, S., Langley, A., and Y. Lindell, "AES-GCM-SIV:
              Specification and Analysis", July 2017,
              .
   [aes-gcm-siv-homepage]
              Gueron, S., Langley, A., and Y. Lindell, "Webpage for the
              AES-GCM-SIV Mode of Operation",
              .
   [BHT18]    Bose, P., Hoang, V., and S. Tessaro, "Revisiting AES-GCM-
              SIV: Multi-user Security, Faster Key Derivation, and
              Better Bounds", Advances in Cryptology - EUROCRYPT 2018,
              DOI 10.1007/978-3-319-78381-9_18, May 2018,
              .
   [Bleichenbacher16]
              Bleichenbacher, D., "Subject: AES-GCM-SIV security of the
              additional data", message to the cfrg mailing list, 24
              June 2016, .
   [GCM]      Dworkin, M., "Recommendation for Block Cipher Modes of
              Operation: Galois/Counter Mode (GCM) and GMAC", NIST
              SP 800-38D, DOI 10.6028/NIST.SP.800-38D, November 2007,
              .
   [GCM-SIV]  Gueron, S. and Y. Lindell, "GCM-SIV: Full Nonce Misuse-
              Resistant Authenticated Encryption at Under One Cycle Per
              Byte", Proceedings of the 22nd ACM SIGSAC Conference on
              Computer and Communications Security,
              DOI 10.1145/2810103.2813613, October 2015,
              .
Gueron, et al.                Informational                    [Page 15]
RFC 8452                       AES-GCM-SIV                    April 2019
   [key-derive]
              Gueron, S. and Y. Lindell, "Better Bounds for Block Cipher
              Modes of Operation via Nonce-Based Key Derivation",
              Proceedings of the 2017 ACM SIGSAC Conference on Computer
              and Communications Security, DOI 10.1145/3133956.3133992,
              2017, .
   [multi-birthday]
              Suzuki, K., Tonien, D., Kurosawa, K., and K. Toyota,
              "Birthday Paradox for Multi-collisions", Information
              Security and Cryptology - ICISC 2006, Lecture Notes in
              Computer Science, Volume 4296, DOI 10.1007/11927587_5,
              2006, .
   [RFC3610]  Whiting, D., Housley, R., and N. Ferguson, "Counter with
              CBC-MAC (CCM)", RFC 3610, DOI 10.17487/RFC3610, September
              2003, .
   [RFC5116]  McGrew, D., "An Interface and Algorithms for Authenticated
              Encryption", RFC 5116, DOI 10.17487/RFC5116, January 2008,
              .
   [RFC5297]  Harkins, D., "Synthetic Initialization Vector (SIV)
              Authenticated Encryption Using the Advanced Encryption
              Standard (AES)", RFC 5297, DOI 10.17487/RFC5297, October
              2008, .
Gueron, et al.                Informational                    [Page 16]
RFC 8452                       AES-GCM-SIV                    April 2019
Appendix A.  The Relationship between POLYVAL and GHASH
   GHASH and POLYVAL both operate in GF(2^128), although with different
   irreducible polynomials: POLYVAL works modulo x^128 + x^127 + x^126 +
   x^121 + 1 and GHASH works modulo x^128 + x^7 + x^2 + x + 1.  Note
   that these irreducible polynomials are the "reverse" of each other.
   GHASH also has a different mapping between 128-bit strings and field
   elements.  Whereas POLYVAL takes the least significant to most
   significant bits of the first byte to be the coefficients of x^0 to
   x^7, GHASH takes them to be the coefficients of x^7 to x^0.  This
   continues until, for the last byte, POLYVAL takes the least
   significant to most significant bits to be the coefficients of x^120
   to x^127, while GHASH takes them to be the coefficients of x^127 to
   x^120.
   The combination of these facts means that it’s possible to "convert"
   values between the two by reversing the order of the bytes in a
   16-byte string.  The differing interpretations of bit order takes
   care of reversing the bits within each byte, and then reversing the
   bytes does the rest.  This may have a practical benefit for
   implementations that wish to implement both GHASH and POLYVAL.
   In order to be clear which field a given operation is performed in,
   let mulX_GHASH be a function that takes a 16-byte string, converts it
   to an element of GHASH’s field using GHASH’s convention, multiplies
   it by x, and converts it back to a string.  Likewise, let
   mulX_POLYVAL be a function that converts a 16-byte string to an
   element of POLYVAL’s field using POLYVAL’s convention, multiplies it
   by x, and converts it back.
   Given the 16-byte string 01000000000000000000000000000000, mulX_GHASH
   of that string is 00800000000000000000000000000000 and mulX_POLYVAL
   of that string is 02000000000000000000000000000000.  As a more
   general example, given 9c98c04df9387ded828175a92ba652d8, mulX_GHASH
   of that string is 4e4c6026fc9c3ef6c140bad495d3296c and mulX_POLYVAL
   of it is 3931819bf271fada0503eb52574ca5f2.
   Lastly, let ByteReverse be the function that takes a 16-byte string
   and returns a copy where the order of the bytes has been reversed.
Gueron, et al.                Informational                    [Page 17]
RFC 8452                       AES-GCM-SIV                    April 2019
   Now GHASH and POLYVAL can be defined in terms of one another:
   POLYVAL(H, X_1, ..., X_n) =
   ByteReverse(GHASH(mulX_GHASH(ByteReverse(H)), ByteReverse(X_1), ...,
   ByteReverse(X_n)))
   GHASH(H, X_1, ..., X_n) =
   ByteReverse(POLYVAL(mulX_POLYVAL(ByteReverse(H)), ByteReverse(X_1),
   ..., ByteReverse(X_n)))
   As a worked example:
      let H = 25629347589242761d31f826ba4b757b,
          X_1 = 4f4f95668c83dfb6401762bb2d01a262, and
          X_2 = d1a24ddd2721d006bbe45f20d3c9f362.
      POLYVAL(H, X_1, X_2) = f7a3b47b846119fae5b7866cf5e5b77e.
   If we wished to calculate this given only an implementation of GHASH,