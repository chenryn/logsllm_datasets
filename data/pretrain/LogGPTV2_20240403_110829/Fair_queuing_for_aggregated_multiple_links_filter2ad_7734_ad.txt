The WF2Q regulator technique can be modiﬁed to be-
come work-conserving. A simple extension would be if non-
eligible packets were allowed to be scheduled to an idle
server in cases where no other eligible packets were queued
in the system. However, this modiﬁed version of WF2Q does
not enjoy the simple extension of the bound on ¯Wi(0, τ ) −
Wi(0, τ ) from Li,max in single server case (as proven in [5])
to N Li,max in multi-server case.
Consider an example with 2 ﬂows sharing 10 output servers.
The ﬁrst ﬂow has a weight 0.9 while the second one has a
weight 0.1. L2,max is 1. All the packets of ﬂow 2 arrive at
time 0 and each has a length of L2,max. The ﬁrst packet of
ﬂow 1 arrives at time 0 and has a length 100. Flow 1 arrival
rate is 0.9N r. Thus, the second packet of ﬂow 2 arrives at
time 100/0.9. At time 0, the ﬁrst packets of ﬂow 1 and 2 are
eligible and they are scheduled. Since there are 8 idle servers
and no eligible packets, to keep the system work-conserving,
the non-eligible packets in the system are scheduled in the
order of their GPS ﬁnishing times. Until the second packet
of ﬂow 1 arrives, 99 packets of ﬂow 2 are scheduled. At this
time, ¯W2(0, 100/0.9)−W2(0, 100/0.9) is approximately 88.8,
not N L2,max = 10.
6.1 MSF2Q
Our goal is to devise a packetized service discipline for
multi-server systems that provides bounded fairness and gen-
erates “smooth” schedules. To this end, we introduce a new
discipline, which we refer to as a (M SF 2Q , N, r) system or
simply MSF2Q .
We say that a packet is outstanding, if it is being trans-
mitted or picked for transmission by the packetized system.
Let ˆoi(t) denote the number of outstanding ﬂow i packets at
the MSF2Q system at time t. We denote the work completed
for ﬂow i under MSF2Q over the interval [τ, t] by ˆWi(τ, t).
At time t, when a server is idle and there is a packet waiting
for service, MSF2Q schedules among the ﬂows that satisfy
ˆWi(0, t) < Wi(0, t) or ( ˆWi(0, t) = Wi(0, t) and ˆoi < (cid:11) ri(t)
(cid:12))
r
the packet that would complete service in the GPS system
earliest.
MSF2Q reduces to WF2Q if the number of servers is one.
Figure 9 depicts the output of MSF2Q in the previous sce-
nario of Example 3. It can be seen that the resulting service
is the closest achievable to the ideal discipline.
A
B
C
D
E
F
G
H
I
J
1
2
3
4
5
6
7
8
9
10
0
F1 −
F2 −
F3 −
F4 −
F5 −
F6 −
F7 −
F8 −
F9 −
F10 −
F11 −
Figure 9: MSF2Q scheduling.
20
6.2 Properties of MSF2Q
The following theorem proves the bound for the extra
amount of service a ﬂow can receive at any time τ under
MSF2Q compared to GPS.
Theorem 4: Let Li,max denote the maximum packet length
of ﬂow i. For any time τ and ﬂow i, the following property
holds:
ˆWi(0, τ ) − Wi(0, τ ) ≤ N Li,max
(8)
Proof: When there are no packets of ﬂow i in transmis-
sion under MSF2Q , the diﬀerence ˆWi(0, τ ) − Wi(0, τ ) is
non-increasing. Thus, it is suﬃcient to show that for any
i, during the transmission (including completion) of a ﬂow
i packet under MSF2Q , ˆWi(0, τ ) − Wi(0, τ ) ≤ N Li,max.
At any time t when MSF2Q picks the next ﬂow i packet
pn for transmission the condition (( ˆWi(0, t) < Wi(0, t)) or
(cid:12)) holds for ﬂow i.
(( ˆWi(0, t) = Wi(0, t)) and ˆoi < (cid:11) ri(t)
Since this condition holds for ﬂow i and at most N − 1 other
ﬂow i packets may be in transmission at t, ( ˆWi may exceed
✷
Wi at most N Li,max.
The bound on Wi(t, τ ) − ˆWi(t, τ ) follows from combining
the above theorem with the bound on cumulative per-ﬂow
service. We do not present in this paper the bounds on the
packet delay and cumulative per-ﬂow service for MSF2Q ,
which can be calculated similar to the ones of MSFQ . It is
worthwhile to mention that MSF2Q is not work-conserving
either. It is part of our future work to investigate the impli-
cations of work-conserving schedulers for multi-server sys-
tems on fairness bounds.
r
7. APPLICATIONS
There are numerous existing system architectures that fol-
low very closely the multi-server model described in this pa-
per. These systems can beneﬁt from multi-server fair queu-
ing disciplines to provide QoS guarantees on the access of
their resources. We brieﬂy discuss some of these applica-
tion areas and describe how the multi-server model can be
applied.
Link Aggregation is probably the most apparent exam-
ple in the networking area. Ethernet link aggregation is a
technique that allows the logical grouping of several network
interfaces to allow for better scalability and fault-tolerance.
The use of such technique is becoming increasingly popu-
lar since it provides a cost-eﬀective and fault tolerant so-
lution for incrementally scaling the network I/O capacity
of the current high-end switches and servers. Many IEEE
802.3ad [13] standard and vendor-speciﬁc implementations
are currently available [16, 14, 1, 2, 12]. The number of ag-
gregated links on the existing systems varies largely among
vendors and currently ranges from two to eight Fast/Gigabit
Ethernet ports in either servers or switching elements. Al-
though all of the available implementations utilize load bal-
ancing techniques such as round robin or static parameter
hashing, none of these systems provide QoS guarantees over
aggregated links.
Algorithms such as MSF2Q can also be implemented to
provide QoS guarantees in the access of storage I/O. For
midrange and high-end storage systems, it is common to
connect the RAID system to a host (e.g., Web server) with
multiple SCSI or FC channels to improve the I/O perfor-
mance. A number of storage vendors (e.g., EMC) are oﬀer-
ing multi-path I/O software for load balancing and failover
among the channels. Furthermore, the need for fairness and
service guarantees for storage I/O is growing with the con-
solidation of clients’ data and applications in the service
providers’ data centers. Since storage I/O traﬃc can be
modeled as variable size packets, MSF2Q type algorithms
can be used to provide fair sharing of multiple I/O chan-
nels.
When distributing traﬃc across multiple links, as in the
previous examples, the order in which the packets are re-
ceived at the destination may be diﬀerent from the order
in which they were originally sent. Potential out-of-order
delivery does not aﬀect all applications. However, it may
lower the expected end-to-end performance, for example,
of TCP connections, since out-of-order reception of TCP
packets may cause unnecessary retransmissions. Since cur-
rent systems contain only few links but handle large num-
ber of ﬂows, out-of-order-delivery due to multiple paths is
not expected to be common. It is also important to note,
that rather than being an artifact of our Fair Queuing algo-
rithm, this misordering is an inherent problem of balancing
load among multiple outgoing links and its impact should
be studied.
8. RELATED WORK
Our work builds on a number of previous studies of GPS-
based scheduling disciplines for single server systems. The
concepts of Proportional Sharing and Generalized Proces-
sor Sharing are presented in [8], [11] and in [15]. Demers
et al.
introduced a packetized service discipline—WFQ in
[8]. Later on, Parekh and Gallager proved in [15] that WFQ
(a.k.a., PGPS) closely approximates the ideal GPS system
in terms of packet delay and the cumulative per-ﬂow service.
Their work also showed end-to-end packet delay properties
of a GPS system when ﬂows are leaky bucket constrained.
In [5], Bennet and Zhang observed that the service provided
to a ﬂow under WFQ may unboundedly exceed the amount
of service received under GPS and indicated that this could
lead to unsatisfactory fairness and have adverse eﬀects on
the behavior of adaptive ﬂows. The same authors intro-
duced the WF2Q service discipline which incorporated the
concept of eligibility times to WFQ and also showed that
WF2Q bounds the worst-case fairness. We addressed the
same problem with a new algorithm called MSF2Q designed
for multi-server systems, since using WF2Q for multi-server
systems does not alleviate the burstiness problem. MSF2Q
is designed such that it reduces to WF2Q when the number
of servers is exactly one.
For single server systems, there have been several propos-
als [17, 9, 10] to approximate GPS with a lower computa-
tional complexity than WFQ. SFQ[10] showed that using
start times was possible to get fairness guarantees. A later
work from Bennet and Zhang [4] introduced the concept of
hierarchical GPS and they presented a packetized algorithm
for this model.
Weighted fair queuing for multi-server systems has not
been studied in the packet scheduling literature (to best of
our knowledge). Although there have been extensive work in
the context of multiprocessor scheduling, only [7] considers
a sharing model similar in spirit to GPS. The authors pre-
sented a scheduling algorithm called SFS for “fairly” sharing
multiprocessors among threads. They introduced a model
called GMS diﬀerent than GPS as the reference system in
order to capture the constraint that a thread can execute
at one processor at a time. They experimentally showed
that under certain workloads, their multiprocessor schedul-
ing algorithms displays similar properties to their new ref-
erence system. This algorithm does not provide guarantees
and therefore we did not consider it for multi-link packet
scheduling.
Balancing packets across multiple interfaces is another
topic that has been the focus of many studies. In [3], Adise-
shu et al. designed a round-based iterative algorithm to
distribute packets across multiple outgoing links. Although
they used Fair Queuing concepts in their design, these con-
cepts were not applied towards the provisioning of QoS guar-
antees. Their aim was to evenly balance the load of a sin-
gle ﬂow across N outgoing links rather than provide shar-
ing guarantees of link utilization for several input streams.
Moreover, we cannot compare the algorithm to MSFQ with
even a single input ﬂow since our approach does not require
the input to be backlogged and its bounds are independent
from the workload.
A number of implementations of link aggregation are cur-
rently available. They range from proprietary ones such
as Adaptec’s Duralink[2], SUN’s SunTrunking[16], 3Com’s
Dynamic Access[1] or later ones following the new standard
such as HP’s Auto Port Aggregation[12]. However, while
all these technologies are able to share multiple links from a
stream of packets, none of them provide proportional shar-
ing among multiple streams.
9. CONTRIBUTIONS AND FUTURE WORK
Link aggregation, or the aggregation of multiple interfaces
into a single logical link, is becoming the predominant ap-
proach for bandwidth scaling. The existing link aggregation
schemes aim for even distribution of traﬃc among the aggre-
gated interfaces. However, fairness and service guarantees
for ﬂows sharing these aggregated links have not been ad-
dressed.
Although GPS-based fair queuing service disciplines are
extensively studied for proportionally sharing a single link,
the resulting concepts have not been applied in the cases
where several links are aggregated. In this paper, we stud-
ied packetized GPS-based service disciplines for these multi-
server situations. Ideally, the provision of such systems is
described as a function of the total link capacity. Therefore,
we proposed a reference system consisting of a single GPS
server operating at a rate that equals to the sum of the rates
of the underlying servers.
Numerous fair queuing results previously obtained for sin-
gle server systems do not directly apply to multi-server sys-
tems. This is because the rate at which the packetized
multi-server system operates may vary over time and dif-
fer from the rate of the reference system. Furthermore, the
packetized multi-server system may reorder the packets to
remain work-conserving. We ﬁrst analyzed the cumulative
service, packet delay and per-ﬂow cumulative service bounds
for weighted fair queuing (WFQ) applied to a multi-server
system. We then presented a new fair queuing algorithm—
MSF2Q that also bounds the additional amount of service a
ﬂow may receive under the packetized discipline compared
to GPS, a property that is not shared by WFQ. As a result,
MSF2Q leads to smooth and fair schedules in ﬁner time
scales.
Our future plans include investigation of implementation
issues, quantitative comparison of the approach presented in
this paper to the alternative approach of partitioning ﬂows
among servers, and enhancing the algorithms for multipro-
cessors and cluster of servers. Other interesting extensions
involve hierarchal GPS and servers with diﬀerent rates.
10. REFERENCES
[1] 3Com’s Dynamic Access. http://www.3com.com .
[2] Adaptec Duralink Software Suite.
http://www.adaptec.com .
[3] H. Adiseshu, G. M. Parulkar, and G. Varghese. A
Reliable and Scalable Striping Protocol. In
Proceedings of the ACM SIGCOMM, August 1996.
[4] J. C. R. Bennett and H. Zhang. Hierarchical Packet
Fair Queueing Algorithms. In Proceedings of the ACM
SIGCOMM, August 1996.
[5] J. C. R. Bennett and H. Zhang. WF2Q: Worst-case
Fair Weighted Fair Queueing. In Proceedings of the
IEEE INFOCOM, San Francisco, March 1996.
[6] J. Blanquer, J. Bruno, E. Gabber, M. Mcshea,
B. ¨Ozden, and A. Silberschatz. Resource Management
for QoS in Eclipse/BSD. In Proceedings of the First
FreeBSD Conference, Berkeley, California, Oct. 1999.
[7] A. Chandra, M. Adler, P. Goyal, and P. Shenoy.
Surplus Fair Scheduling: A Proportional-Share CPU
Scheduling Algorithm for Symmetric Multiprocessors.
In Proceedings of the USENIX 4th Symposium on
Operating System Design and Implementation, San
Diego, California, Oct. 2000.
[8] A. Demers, S. Keshav, and S. Shenker. Design and
Analysis of a Fair Queuing Algorithm. In Proceedings
of the ACM SIGCOMM, Austin, Texas, September
1989.
[9] J. Golestani. A Self-Clocked Fair Queueing Scheme for
Broadband Applications. In Proceedings of the IEEE
INFOCOM, Toronto, June 1994.
[10] P. Goyal, H. Vin, and H. Chen. Start-Time Fair
Queueing: A Scheduling Algorithm for Integrated
Services Packet Switching Networks. In Proceedings of
the ACM SIGCOMM, August 1996.
[11] A. Greenberg and N. Madras. How Fair is Fair
Queuing. Journal of the ACM, July 1992.
[12] Hewlett Packard’s Auto-Port Aggregation.
http://www.unix.hp.com .
[13] Amendment to Carrier Sense Multiple Access With
Collision detection (CSMA/CD) Access Method and
Physical Layer Speciﬁcations - Aggregation of Multiple
Link Segments. IEEE 802.3ad Standard, 2000.
[14] Intel’s Adaptive Load Balancing.
http://www.intel.com.
[15] A. K. Parekh and R. G. Gallager. A Generalized
Processor Sharing Approach to Flow Control in
Integrated Services Networks–the Single Node Case.
IEEE/ACM Transactions on Networking, pages
344–357, June 1993.
[16] SUN Trunking Software. http://www.sun.com .
[17] L. Zhang. Virtual Clock: A New Traﬃc Control
Algorithm for Packet Switching Networks. In
Proceedings of the ACM SIGCOMM, Philadelphia,
1990.