      alloc = i_ehdrp->e_phnum;
      if (alloc != 0)
        {
          if (bfd_seek (abfd, i_ehdrp->e_phoff, SEEK_SET) != 0
          || bed->s->write_out_phdrs (abfd, tdata->phdr, alloc) != 0)
        return FALSE;
        }
      return TRUE;
    }
`assign_file_positions_for_load_sections`函数调用`_bfd_elf_map_sections_to_segments`将Sections映射到Segments：
    static bfd_boolean
    assign_file_positions_for_load_sections (bfd *abfd,
                         struct bfd_link_info *link_info)
    {
      const struct elf_backend_data *bed = get_elf_backend_data (abfd);
      struct elf_segment_map *m;
      struct elf_segment_map *phdr_load_seg;
      Elf_Internal_Phdr *phdrs;
      Elf_Internal_Phdr *p;
      file_ptr off;
      bfd_size_type maxpagesize;
      unsigned int alloc, actual;
      unsigned int i, j;
      struct elf_segment_map **sorted_seg_map;
      if (link_info == NULL
          && !_bfd_elf_map_sections_to_segments (abfd, link_info))
        return FALSE;
    ......
`_bfd_elf_map_sections_to_segments`负责将stack_flags写入Segment的`p_flags`字段：
    ......
    if (elf_stack_flags (abfd))
        {
          amt = sizeof (struct elf_segment_map);
          m = (struct elf_segment_map *) bfd_zalloc (abfd, amt);
          if (m == NULL)
            goto error_return;
          m->next = NULL;
          m->p_type = PT_GNU_STACK;
          m->p_flags = elf_stack_flags (abfd);
          m->p_align = bed->stack_align;
          m->p_flags_valid = 1;
          m->p_align_valid = m->p_align != 0;
          if (info->stacksize > 0)
            {
              m->p_size = info->stacksize;
              m->p_size_valid = 1;
            }
          *pm = m;
          pm = &m->next;
        }
    ......
变量`m`为`elf_segment_map`结构类型，其定义位于internal.h文件：
    /* This structure is used to describe how sections should be assigned
       to program segments.  */
    struct elf_segment_map
    {
      /* Next program segment.  */
      struct elf_segment_map *next;
      /* Program segment type.  */
      unsigned long p_type;
      /* Program segment flags.  */
      unsigned long p_flags;
      /* Program segment physical address.  */
      bfd_vma p_paddr;
      /* Program segment virtual address offset from section vma.  */
      bfd_vma p_vaddr_offset;
      /* Program segment alignment.  */
      bfd_vma p_align;
      /* Segment size in file and memory */
      bfd_vma p_size;
      /* Whether the p_flags field is valid; if not, the flags are based
         on the section flags.  */
      unsigned int p_flags_valid : 1;
      /* Whether the p_paddr field is valid; if not, the physical address
         is based on the section lma values.  */
      unsigned int p_paddr_valid : 1;
      /* Whether the p_align field is valid; if not, PT_LOAD segment
         alignment is based on the default maximum page size.  */
      unsigned int p_align_valid : 1;
      /* Whether the p_size field is valid; if not, the size are based
         on the section sizes.  */
      unsigned int p_size_valid : 1;
      /* Whether this segment includes the file header.  */
      unsigned int includes_filehdr : 1;
      /* Whether this segment includes the program headers.  */
      unsigned int includes_phdrs : 1;
      /* Assume this PT_LOAD header has an lma of zero when sorting
         headers before assigning file offsets.  PT_LOAD headers with this
         flag set are placed after one with includes_filehdr set, and
         before PT_LOAD headers without this flag set.  */
      unsigned int no_sort_lma : 1;
      /* Index holding original order before sorting segments.  */
      unsigned int idx;
      /* Number of sections (may be 0).  */
      unsigned int count;
      /* Sections.  Actual number of elements is in count field.  */
      asection *sections[1];
    };
上述函数调用关系为：
最终体现在目标文件中：
## 0x02 kernel
处理程序执行的系统调用为`execve`：
    SYSCALL_DEFINE3(execve,
            const char __user *, filename,
            const char __user *const __user *, argv,
            const char __user *const __user *, envp)
    {
        return do_execve(getname(filename), argv, envp);
    }
查看`do_execve`函数定义
    int do_execve(struct filename *filename,
        const char __user *const __user *__argv,
        const char __user *const __user *__envp)
    {
        struct user_arg_ptr argv = { .ptr.native = __argv };
        struct user_arg_ptr envp = { .ptr.native = __envp };
        return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
    }
`do_execveat_common`函数定义如下：
    /*
     * sys_execve() executes a new program.
     */
    static int do_execveat_common(int fd, struct filename *filename,
                      struct user_arg_ptr argv,
                      struct user_arg_ptr envp,
                      int flags)
    {
        char *pathbuf = NULL;
        struct linux_binprm *bprm;
        struct file *file;
        struct files_struct *displaced;
        int retval;
        if (IS_ERR(filename))
            return PTR_ERR(filename);
        /*
         * We move the actual failure in case of RLIMIT_NPROC excess from
         * set*uid() to execve() because too many poorly written programs
         * don't check setuid() return code.  Here we additionally recheck
         * whether NPROC limit is still exceeded.
         */
        if ((current->flags & PF_NPROC_EXCEEDED) &&
            atomic_read(&current_user()->processes) > rlimit(RLIMIT_NPROC)) {
            retval = -EAGAIN;
            goto out_ret;
        }
        /* We're below the limit (still or again), so we don't want to make
         * further execve() calls fail. */
        current->flags &= ~PF_NPROC_EXCEEDED;
        retval = unshare_files(&displaced);
        if (retval)
            goto out_ret;
        retval = -ENOMEM;
        bprm = kzalloc(sizeof(*bprm), GFP_KERNEL);
        if (!bprm)
            goto out_files;
        retval = prepare_bprm_creds(bprm);
        if (retval)
            goto out_free;
        check_unsafe_exec(bprm);
        current->in_execve = 1;
        file = do_open_execat(fd, filename, flags);
        retval = PTR_ERR(file);
        if (IS_ERR(file))
            goto out_unmark;
        sched_exec();
        bprm->file = file;
        if (fd == AT_FDCWD || filename->name[0] == '/') {
            bprm->filename = filename->name;
        } else {
            if (filename->name[0] == '\0')
                pathbuf = kasprintf(GFP_KERNEL, "/dev/fd/%d", fd);
            else
                pathbuf = kasprintf(GFP_KERNEL, "/dev/fd/%d/%s",
                            fd, filename->name);
            if (!pathbuf) {
                retval = -ENOMEM;
                goto out_unmark;
            }
            /*
             * Record that a name derived from an O_CLOEXEC fd will be
             * inaccessible after exec. Relies on having exclusive access to
             * current->files (due to unshare_files above).
             */
            if (close_on_exec(fd, rcu_dereference_raw(current->files->fdt)))
                bprm->interp_flags |= BINPRM_FLAGS_PATH_INACCESSIBLE;
            bprm->filename = pathbuf;
        }
        bprm->interp = bprm->filename;
        retval = bprm_mm_init(bprm);
        if (retval)
            goto out_unmark;
        bprm->argc = count(argv, MAX_ARG_STRINGS);
        if ((retval = bprm->argc) envc = count(envp, MAX_ARG_STRINGS);
        if ((retval = bprm->envc) filename, bprm);
        if (retval exec = bprm->p;
        retval = copy_strings(bprm->envc, envp, bprm);
        if (retval argc, argv, bprm);
        if (retval file);
        retval = exec_binprm(bprm);
        if (retval fs->in_exec = 0;
        current->in_execve = 0;
        membarrier_execve(current);
        acct_update_integrals(current);
        task_numa_free(current);
        free_bprm(bprm);
        kfree(pathbuf);
        putname(filename);
        if (displaced)
            put_files_struct(displaced);
        return retval;
    out:
`bprm`变量指向`linux_binprm`结构，该结构存储与可执行文件相关的信息，其定义如下：
    /*
     * This structure is used to hold the arguments that are used when loading binaries.
     */
    struct linux_binprm {
        char buf[BINPRM_BUF_SIZE];    //#define BINPRM_BUF_SIZE 128 存储可执行文件前128字节
    #ifdef CONFIG_MMU
        struct vm_area_struct *vma;
        unsigned long vma_pages;
    #else
    # define MAX_ARG_PAGES    32
        struct page *page[MAX_ARG_PAGES];
    #endif
        struct mm_struct *mm;
        unsigned long p; /* current top of mem */
        unsigned int
            /*
             * True after the bprm_set_creds hook has been called once
             * (multiple calls can be made via prepare_binprm() for
             * binfmt_script/misc).
             */
            called_set_creds:1,
            /*
             * True if most recent call to the commoncaps bprm_set_creds
             * hook (due to multiple prepare_binprm() calls from the
             * binfmt_script/misc handlers) resulted in elevated
             * privileges.
             */
            cap_elevated:1,
            /*
             * Set by bprm_set_creds hook to indicate a privilege-gaining
             * exec has happened. Used to sanitize execution environment
             * and to set AT_SECURE auxv for glibc.
             */
            secureexec:1;
    #ifdef __alpha__
        unsigned int taso:1;
    #endif