title:ret2spec: Speculative Execution Using Return Stack Buffers
author:Giorgi Maisuradze and
Christian Rossow
ret2spec: Speculative Execution Using Return Stack Buffers
Accepted at ACM CCS 2018 (preliminary version)
Giorgi Maisuradze
CISPA, Saarland University
giorgi.maisuradze@cispa.saarland
Christian Rossow
CISPA, Saarland University
rossow@cispa.saarland
ABSTRACT
Speculative execution is an optimization technique that has
been part of CPUs for over a decade. It predicts the out-
come and target of branch instructions to avoid stalling the
execution pipeline. However, until recently, the security impli-
cations of speculative code execution have not been studied.
In this paper, we investigate a special type of branch pre-
dictor that is responsible for predicting return addresses. To
the best of our knowledge, we are the first to study return
address predictors and their consequences for the security
of modern software. In our work, we show how return stack
buffers (RSBs), the core unit of return address predictors,
can be used to trigger misspeculations. Based on this knowl-
edge, we propose two new attack variants using RSBs that
give attackers similar capabilities as the documented Spec-
tre attacks. We show how local attackers can gain arbitrary
speculative code execution across processes, e.g., to leak pass-
words another user enters on a shared system. Our evaluation
showed that the recent Spectre countermeasures deployed in
operating systems also cover such RSB-based cross-process
attacks. Yet we then demonstrate that attackers can trigger
misspeculation in JIT environments in order to leak arbitrary
memory content of browser processes. Reading outside the
sandboxed memory region with JIT-compiled code is still
possible with 80% accuracy on average.
KEYWORDS
Hardware Security, Side Channel Attacks, JavaScript
INTRODUCTION
1
For decades, software has been able to abstract from the inner
workings of operating systems and hardware, and significant
research resources have been spent on assuring software se-
curity. Yet only recently, the security community has started
to investigate the security guarantees of the hardware under-
neath. The first investigations were not reassuring, revealing
multiple violations of security and privacy, e.g., demonstrat-
ing that cryptographic keys meant to be kept secret may
leak via caching-based side channels [5, 31, 32]. This recent
discovery has piqued interest in the general topic of microar-
chitectural attacks. More and more researchers aim to identify
potential problems, assess their impact on security, and de-
velop countermeasures to uphold previously-assumed security
guarantees of the underlying hardware. As a consequence, a
variety of novel techniques have been proposed which abuse
microarchitectural features, thereby making seemingly-secure
programs vulnerable to different attacks [5, 16, 17, 21, 30, 32].
One of the core drivers for recent microarchitectural attacks
is the sheer complexity of modern CPUs. The advancement of
software puts a lot of pressure on hardware vendors to make
their product as fast as possible using a variety of optimiza-
tion strategies. However, even simple CPU optimizations can
severely threaten the security guarantees of software relying
on the CPU. Caching-based side channels are a notable exam-
ple of this problem: such side channels exist since caches that
improve the access time to main memory are shared across
processes. Thus, caching can result in leaking cryptographic
keys [5, 32], key-stroke snooping, or even eavesdropping on
messages from secure communications [17, 30].
Besides caching, modern CPUs deploy several other opti-
mization techniques to speed up executions, two of which we
will study in more detail. First, in out-of-order execution, in-
stead of enforcing a strict execution order of programs, CPUs
can reorder instructions, i.e., execute new instructions before
older ones if there are no dependencies between them. Second,
in speculative execution, CPUs predict the outcome/target
of branch instructions. Both these strategies increase the
utilization of execution units and greatly improve the perfor-
mance. However, they also execute instructions in advance,
meaning they can cause instructions to execute that would
have not been executed in a sequential execution sequence.
For example, it can happen that an older instruction raises an
exception, or that the speculative execution unit mispredicts.
In this case, the out-of-order executed instructions are rolled
back, restoring the architectural state at the moment of the
fault (or misspeculation). Ideally, the architectural state is
the same as in strict sequential execution. However, this is
not the case: instructions executed out of order can influence
the state in a manner that can be detected. Meltdown [26]
and Spectre [22] are great examples of this class of prob-
lems. Meltdown exploits a bug in Intel’s out-of-order engine,
allowing the privileged kernel-space data to be read from
unprivileged processes. Spectre poisons the branch target
buffer (BTB) and thus tricks the branch prediction unit into
bypassing bounds checks in sandboxed memory accesses, or
even triggering arbitrary speculative code execution in dif-
ferent processes on the same core. To mitigate these threats,
operating systems had to make major changes in their design
(e.g., isolating the kernel address space from user space [15]),
and hardware vendors introduced microcode updates to add
new instructions to control the degree of the aforementioned
CPU optimization techniques [19].
In this paper, we further investigate speculative execu-
tion and show that attacks are possible beyond the already-
documented abuse of BTBs. More specifically, we look into
the part of branch prediction units that are responsible for
predicting return addresses. Since they are the core of the
return address predictor, we will in particular investigate the
properties of return stack buffers (RSBs). RSBs are small
microarchitectural buffers that remember return addresses of
the most recent calls and speed up function returns. Given
that return addresses are stored on the stack, without such
RSBs, a memory access is required to fetch a return desti-
nation, possibly taking hundreds of cycles if retrieved from
main memory. In contrast, with RSBs, the top RSB entry
can be read instantaneously. RSBs thus eliminate the waiting
time in the case of a correct prediction, or in the worst case
face almost1 the same penalty in the case of a misprediction.
Despite being mentioned as potential threat in the initial
report from Google Project Zero [18] and Spectre [22], the
security implications of abusing RSBs have not yet been stud-
ied, and only very recent studies have started to investigate
timing implication of return address mispredictions at all [37].
Nevertheless, modern operating systems’ kernels also contain
countermeasures against crafted RSB entries, which indicates
their awareness of potential security implications. However, to
the best of our knowledge, we are the first to systematically
study and demonstrate the actual security implications of
RSBs. We furthermore show the degree to which attackers
can provoke RSB-based speculative execution by overflowing
the RSB, by crafting malicious RSB entries prior to context
switches, or by asymmetric function call/return pairs.
Based on these principles, we provide two RSB-based at-
tack techniques that both allow attackers to read user-level
memory that they should not be able to read. In the first
attack (Section 4), we assume a local attacker that can spawn
arbitrary new programs that aim to read another user’s pro-
cess memory. To this end, we show how one can poison RSBs
to force the collocated processes (on the same logical core)
to execute arbitrary code speculatively, and thus report back
potential secrets. On the one hand, this attack has recently
been prevented by all major operating systems that now flush
RSBs upon context switches to mitigate Spectre, presumably
anticipating potential RSB underflows that trigger the BTB2.
On the other hand, the general attack concept shows that
RSB-based speculated execution (i) can indeed be provoked
by local attackers with non-negligible probability, and (ii)
goes beyond the currently-assumed problem of falling back to
the BTB (thus allowing for Spectre) when underflowing RSBs,
and thus, can be generalized to the non-trustworthiness of
attacker-controlled RSBs.
In our second attack (Section 5), we investigate how at-
tackers can abuse RSBs to trigger speculation of arbitrary
code inside the same process—notably without requiring a
context switch, and thus effectively evading the aforemen-
tioned defense. We assume an attacker that controls a web
site the target user visits, and by carefully crafting this web
site, aims to read memory of the victim’s browser process.
1Rolling back the pipeline on misspeculation adds an overhead of a
few cycles.
2https://patchwork.kernel.org/patch/10150765/
2
Technically, we leverage just-in-time (JIT) compilation of
WebAssembly to create code patterns that are not protected
by memory isolation techniques and thus can read arbitrary
memory of a browser process. By doing so, we show that
adversaries can bypass memory sandboxing and read data
from arbitrary memory addresses.
Both attack types demonstrate that speculative execution
is not limited to attackers penetrating the BTB. While our
attacks result in similar capabilities as Spectre, the underlying
attack principles to manipulate the RSB are orthogonal to
the known poisoning strategies. We thus also discuss how
existing and new countermeasures against RSB-based attacks
can mitigate this new risk (Section 6). We conclude the paper
with vendor and developer reactions that we received after
responsibly disclosing the internals of this new threat.
In this paper, we provide the following contributions:
∙ We study the return address predictor, an important
yet so far overlooked module in the prediction unit. To
the best of our knowledge, we are the first to demon-
strate the actual abuse potential of RSBs.
∙ We propose attack techniques to trigger misspecula-
tions via the RSB. This can be useful in future studies
that will target speculative code execution. In contrast
to using the branch predictor, which requires a prior
training phase, RSBs can be forced to misspeculate to
required addresses without prior training.
∙ We then propose cross-process speculative execution of
arbitrary code (similar to Spectre/Variant 1). We eval-
uate the results by leaking keystrokes from a specially-
crafted bash-like program. Using our synthetic program
example, we demonstrate that such attacks are in prin-
ciple conceivable, showing the importance of existing
OS-based defenses to mitigate Spectre.
∙ Finally, we show how to trigger misspeculations via
RSBs in JIT-compiled code. We leverage this to ex-
ecute arbitrary code speculatively and, by doing so,
bypass memory sandboxing techniques, allowing ar-
bitrary memory reads. We evaluate our technique in
Firefox 59 (with a modified timer for higher precision).
2 BACKGROUND
In the following, we will present the key features of x86 that
are important to understand for the remainder of this paper.
While similar concepts are also common in other architectures,
for brevity and due to its popularity, we focus on x86.
2.1 Out-of-Order Execution
Being a CISC (Complex Instruction Set Computing) ar-
chitecture, x86 has to support a multitude of instructions.
Implementing all such instructions in circuits would require
an enormous amount of transistors, thus also drastically in-
creasing the power consumption. Therefore, under the hood,
both main manufacturers of x86 CPUs (Intel and AMD) use
micro-OPs, which can be seen as a simplified RISC (Reduced
Instruction Set Computing) machine that runs inside the
CPU. All instructions from the x86 ISA are then dynamically
decoded into their corresponding micro-OPs, and are then
executed on much simpler execution units. This allows man-
ufacturers to reduce the number of required execution paths,
decreasing both production cost and power consumption.
Having a variety of different instructions, sequential exe-
cution becomes another bottleneck. The concept of splitting
up complex instructions into smaller operations also makes
it possible to reorder the execution of micro-OPs to gain per-
formance. In a strict sequential execution, an instruction 𝑁
cannot be started unless all preceding instructions, 1..𝑁 − 1,
are finished executing. This is especially problematic for in-
structions with completely different timing properties, e.g.,
zeroing a register and reading a value from main memory.
Out-of-order execution deals with this issue by executing
instructions out of order, provided they do not depend on
one another.
To implement out-of-order execution, x86 maintains a so-
called reorder buffer (ROB), which keeps a FIFO buffer of
micro-OPs in their original order, while executing them out
of order. If a micro-OP is in the ROB it (i) is waiting for its
dependencies to be resolved, (ii) is ready to be executed, (iii)
is already being executed, or (iv) is done executing but was
not yet committed. Committing (also called retiring) a micro-
OP reflects its changes back to the architectural state, e.g.,
modifying the architectural (ISA-visible) registers or writing
data back to memory. Given that the programs assume a
strict sequential order, the ROB commits instructions in order
such that the architectural state is updated sequentially.
2.2 Speculative Execution
Modern CPUs augment out-of-order execution with an or-
thogonal feature called speculative execution. The key ob-
servation here is that while executing instructions, CPUs
can encounter a branch instruction that depends on the re-
sult of a preceding instruction. This would never happen
in a strict sequential (non-parallel) execution, as all previ-
ous instructions before the branch would have been resolved.
To cope with this problem in modern CPUs that execute
multiple instructions in parallel, the simplest solution is to
wait until the branch condition/target is resolved, and only
then continue the execution. However, this would serialize
branch executions, which would degrade the performance,
especially given the high number of branch instructions in
x86. Speculative execution represents an efficient alternative
problem solution and is consequently used in all modern
CPUs. Speculative execution uses a branch prediction unit
(BPU), which predicts the outcome of conditional branch
instructions (i.e., taken/not taken). The out-of-order engine
then continues execution on the predicted path. This general
concept is not limited to direct branches that always have a
fixed jump target. For example, consider indirect branches
(such as indirect calls and jumps) that need to be resolved
before being executed, i.e., the branch target can be stored
either in a register or in memory. In this case, the branch des-
tination is the value that needs to be predicted. To support
3
indirect branches, the branch target buffer (BTB) stores a
mapping between the branch source and its likely destination.
The two recently disclosed microarchitectural attacks, Spec-
tre and Meltdown, abuse the aforementioned out-of-order
and speculative execution engines. Meltdown uses the fact
that out-of-order engines do not handle exceptions until the
retirement stage, and leverages it to access memory regions
that would otherwise trigger a fault (e.g., kernel memory).
In Meltdown, authors exploit the bug in Intel’s out-of-order
execution engine, which reveals the data from the faulty mem-
ory access for a few cycles. This time, however, is enough to
do a dependent memory access on the data. Although the
dependent memory access will be flushed from the pipeline