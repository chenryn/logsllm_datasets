包括main(主存储), fsm(free space map信息), vm(visilibity map信息) 等.  
src/include/storage/relfilenode.h  
```  
00019 /*  
00020  * The physical storage of a relation consists of one or more forks. The  
00021  * main fork is always created, but in addition to that there can be  
00022  * additional forks for storing various metadata. ForkNumber is used when  
00023  * we need to refer to a specific fork in a relation.  
00024  */  
00025 typedef enum ForkNumber  
00026 {  
00027     InvalidForkNumber = -1,  
00028     MAIN_FORKNUM = 0,  
00029     FSM_FORKNUM,  
00030     VISIBILITYMAP_FORKNUM,  
00031     INIT_FORKNUM  
00032   
00033     /*  
00034      * NOTE: if you add a new fork, change MAX_FORKNUM below and update the  
00035      * forkNames array in catalog.c  
00036      */  
00037 } ForkNumber;  
fork: main;  
```  
11\. 该备份disk block的ID编号.  
```  
block: 1;  
```  
说明这个disk block是这个对象的第一个数据块.  
12\. 指这个备份disk block的零空间的位置(假设1个数据块为8KB, 最上面包括了数据块的头文件, 然后是itemID信息等. itemID对应的数据则是从数据块的最底部开始分配的,所以一个数据库的中间部分是空闲的, 也就是初始0的状态, XLogRecord备份的disk block中可以排除这些信息, 减少备份的大小.)  
```  
hole: offset: 476, length: 5892  
```  
从这里来看空闲的位置是数据块的476开始的5892个字节. 所以这个部分不需要备份.  
数据块的结构如下 :   
![pic](20130223_01_pic_001.jpg)  
## 使用举例  
创建测试表  
```  
digoal=# create table a (id int primary key, info text);  
CREATE TABLE  
```  
开始事务  
```  
digoal=# begin;  
BEGIN  
```  
获取当前事务号  
```  
digoal=# select txid_current();  
 txid_current   
--------------  
         1694  
(1 row)  
```  
获取当前XLOG文件名  
```  
digoal=# select pg_xlogfile_name(pg_current_xlog_location());  
     pg_xlogfile_name       
--------------------------  
 000000010000000000000004  
(1 row)  
```  
插入数据  
```  
digoal=# insert into a values (1,'digoal');  
INSERT 0 1  
```  
提交事务  
```  
digoal=# end;  
COMMIT  
```  
获取当前XLOG文件名  
```  
digoal=# select pg_xlogfile_name(pg_current_xlog_location());  
     pg_xlogfile_name       
--------------------------  
 000000010000000000000004  
(1 row)  
```  
第一个XLOG文件名传入pg_xlogdump的STARTSEG, 第二个XLOG文件名传入ENDSEG.  
下面将要输出以上事务的XLOG信息 :   
```  
pgdev@db-172-16-3-150-> pg_xlogdump -b -x 1689 -p /data06/pgdev/pg_root/pg_xlog 000000010000000000000002 000000010000000000000002  
rmgr: Heap        len (rec/tot):     38/    70, tx:       1694, lsn: 0/040334A8, prev 0/04033468, bkp: 0000, desc: insert(init): rel 1663/16385/16410; tid 0/1  
rmgr: Btree       len (rec/tot):     20/    52, tx:       1694, lsn: 0/040334F0, prev 0/040334A8, bkp: 0000, desc: newroot: rel 1663/16385/16416; root 1 lev 0  
rmgr: Btree       len (rec/tot):     34/    66, tx:       1694, lsn: 0/04033528, prev 0/040334F0, bkp: 0000, desc: insert: rel 1663/16385/16416; tid 1/1  
rmgr: Transaction len (rec/tot):     48/    80, tx:       1694, lsn: 0/04033570, prev 0/04033528, bkp: 0000, desc: commit: 2013-02-23 13:48:20.914498 CST; inval msgs: relcache 16416  
```  
描述信息中涉及的rel ID可在数据库中查到 :   
```  
digoal=# select pg_relation_filepath('a');  
 pg_relation_filepath   
----------------------  
 base/16385/16410  
(1 row)  
digoal=# select pg_relation_filepath('a_pkey');  
 pg_relation_filepath   
----------------------  
 base/16385/16416  
(1 row)  
```  
表空间信息 :   
```  
digoal=# select * from pg_tablespace where oid='1663';  
  spcname   | spcowner | spcacl | spcoptions   
------------+----------+--------+------------  
 pg_default |       10 |        |   
(1 row)  
```  
当然也可以反向查询, 默认表空间取0 :   
```  
digoal=# select relname from pg_class where relfilenode=16410 and reltablespace in (0,1663);  
 relname   
---------  
 a  
(1 row)  
digoal=# select relname from pg_class where relfilenode=16416 and reltablespace in (0,1663);  
 relname   
---------  
 a_pkey  
(1 row)  
```  
再解释一下描述信息 :   
1\. desc: insert(init): rel 1663/16385/16410; tid 0/1  
```  
        appendStringInfo(buf, "rel %u/%u/%u; tid %u/%u",  
                         target->node.spcNode, target->node.dbNode, target->node.relNode,  
                                         ItemPointerGetBlockNumber(&(target->tid)),  
                                         ItemPointerGetOffsetNumber(&(target->tid)));  
```  
2\. desc: newroot: rel 1663/16385/16416; root 1 lev 0  
```  
                                appendStringInfo(buf, "newroot: rel %u/%u/%u; root %u lev %u",  
                                                                 xlrec->node.spcNode, xlrec->node.dbNode,  
                                                                 xlrec->node.relNode,  
                                                                 xlrec->rootblk, xlrec->level);  
```  
btree索引的操作介绍见本文参考部分, 例如可以观察出新插入的ITEM是否是分裂插入的. 例如以下的UUID作为索引的例子, 可以通过XLogRecord来观察是否经常发生分裂.  
http://blog.163.com/digoal@126/blog/static/16387704020129249646421/  
3\. desc: insert: rel 1663/16385/16416; tid 1/1  
```  
        appendStringInfo(buf, "rel %u/%u/%u; tid %u/%u",  
                         target->node.spcNode, target->node.dbNode, target->node.relNode,  
                                         ItemPointerGetBlockNumber(&(target->tid)),  
                                         ItemPointerGetOffsetNumber(&(target->tid)));  
```  
4\. desc: commit: 2013-02-23 13:48:20.914498 CST; inval msgs: relcache 16416  
```  
xact_desc_commit_compact(StringInfo buf, xl_xact_commit_compact *xlrec)  
{  
        int                     i;  
        appendStringInfoString(buf, timestamptz_to_str(xlrec->xact_time));  
        if (xlrec->nsubxacts > 0)  
        {  
                appendStringInfo(buf, "; subxacts:");  
                for (i = 0; i nsubxacts; i++)  
                        appendStringInfo(buf, " %u", xlrec->subxacts[i]);  
        }  
}  
......  
                appendStringInfo(buf, "; inval msgs:");  
                for (i = 0; i nmsgs; i++)  
                {  
                        SharedInvalidationMessage *msg = &msgs[i];  
                        if (msg->id >= 0)  
                                appendStringInfo(buf, " catcache %d", msg->id);  
                        else if (msg->id == SHAREDINVALCATALOG_ID)  
                                appendStringInfo(buf, " catalog %u", msg->cat.catId);  
                        else if (msg->id == SHAREDINVALRELCACHE_ID)  
                                appendStringInfo(buf, " relcache %u", msg->rc.relId);  
                        /* remaining cases not expected, but print something anyway */  
                        else if (msg->id == SHAREDINVALSMGR_ID)  
                                appendStringInfo(buf, " smgr");  
                        else if (msg->id == SHAREDINVALRELMAP_ID)  
                                appendStringInfo(buf, " relmap");  
                        else  
                                appendStringInfo(buf, " unknown id %d", msg->id);  
                }  
```  
## 参考  
1\. contrib/pg_xlogdump/pg_xlogdump.c  
```  
/*  
 * Print a record to stdout  
 */  
static void  
XLogDumpDisplayRecord(XLogDumpConfig *config, XLogRecPtr ReadRecPtr, XLogRecord *record)  
{  
        const RmgrDescData *desc = &RmgrDescTable[record->xl_rmid];  
        if (config->filter_by_rmgr != -1 &&  
                config->filter_by_rmgr != record->xl_rmid)  
                return;  
        if (config->filter_by_xid_enabled &&  
                config->filter_by_xid != record->xl_xid)  
                return;  
        config->already_displayed_records++;  
        printf("rmgr: %-11s len (rec/tot): %6u/%6u, tx: %10u, lsn: %X/%08X, prev %X/%08X, bkp: %u%u%u%u, desc: ",  
                   desc->rm_name,  
                   record->xl_len, record->xl_tot_len,  
                   record->xl_xid,  
                   (uint32) (ReadRecPtr >> 32), (uint32) ReadRecPtr,  
                   (uint32) (record->xl_prev >> 32), (uint32) record->xl_prev,  
                   !!(XLR_BKP_BLOCK(0) & record->xl_info),  
                   !!(XLR_BKP_BLOCK(1) & record->xl_info),  
                   !!(XLR_BKP_BLOCK(2) & record->xl_info),  
                   !!(XLR_BKP_BLOCK(3) & record->xl_info));  
        /* the desc routine will printf the description directly to stdout */  
        desc->rm_desc(NULL, record->xl_info, XLogRecGetData(record));  
        putchar('\n');  
        if (config->bkp_details)  
        {  
                int                     bkpnum;  
                char       *blk = (char *) XLogRecGetData(record) + record->xl_len;  