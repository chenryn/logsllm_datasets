title:MinimaLT: minimal-latency networking through better security
author:W. Michael Petullo and
Xu Zhang and
Jon A. Solworth and
Daniel J. Bernstein and
Tanja Lange
MinimaLT: Minimal-latency Networking Through Better
Security
Xu Zhang
Jon A. Solworth
W. Michael Petullo
United States Military Academy
West Point, New York USA
mike@ﬂyn.org
University of Illinois at Chicago
University of Illinois at Chicago
Chicago, Illinois USA
PI:EMAIL
Chicago, Illinois USA
PI:EMAIL
Daniel J. Bernstein
University of Illinois at Chicago
TU Eindhoven
Chicago, Illinois USA
Eindhoven, Netherlands
PI:EMAIL
Tanja Lange
TU Eindhoven
Eindhoven, Netherlands
PI:EMAIL
ABSTRACT
Minimal Latency Tunneling (MinimaLT) is a new net-
work protocol that provides ubiquitous encryption for max-
imal conﬁdentiality,
including protecting packet headers.
MinimaLT provides server and user authentication, exten-
sive Denial-of-Service protections, privacy-preserving IP mo-
bility, and fast key erasure. We describe the protocol,
demonstrate its performance relative to TLS and unen-
crypted TCP/IP, and analyze its protections, including its
resilience against DoS attacks. By exploiting the proper-
ties of its cryptographic protections, MinimaLT is able to
eliminate three-way handshakes and thus create connections
faster than unencrypted TCP/IP.
Categories and Subject Descriptors
C.2.2 [Network Protocols]: Protocol architecture
Keywords
Network security; protocol; encryption; authentication
1
Our goal is to protect all networking against eavesdropping,
modiﬁcation, and, to the extent possible, Denial of Ser-
vice (DoS). To achieve this goal, networking must protect
privacy, provide strong (i.e., cryptographic) authentication
of both servers and users, be easy to conﬁgure, and perform
well. These needs are not met by existing protocols.
Introduction
Hardware and software improvements have eliminated his-
torical cryptographic performance bottlenecks. Now, strong
symmetric encryption can be performed on a single CPU
core at Gb/s rates [40], even on resource-constrained mobile
devices [8]. Public-key cryptography, once so agonizingly
slow that systems would try to simulate it with symmetric
key cryptography [36], is now performed at tens of thou-
sands of operations per second on commodity CPUs. Due
to these advances, along with the threats found on the In-
ternet, researchers are increasingly calling for the protection
of all network traﬃc [10, 51, 20, 13].
However, one performance metric is a fundamental
limitation—network latency [28]. Latency is critical for
Permission to make digital or hard copies of part or all of this work for personal or 
classroom use is granted without fee provided that copies are not made or 
distributed for profit or commercial advantage and that copies bear this notice and 
the full citation on the first page. Copyrights for third-party components of this 
work must be honored. For all other uses, contact the Owner/Author.
Copyright is held by the owner/author(s).
CCS'13, Nov 04-08 2013, Berlin, Germany
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2516737.
users [55]. For example, Google found that a latency in-
crease of 500ms resulted in a 25% dropoﬀ in page searches,
and studies have shown that user experience degrades at la-
tencies as low as 100ms [12]. In response, there have been
several eﬀorts to reduce latency for both TCP and encrypted
networking [14, 41, 37, 10, 48, 56].
We describe here MinimaLT, a secure network protocol
which delivers protected data on the ﬁrst packet of a typical
client-server connection. MinimaLT provides cryptographic
authentication of servers and users; encryption of communi-
cation; simplicity of protocol, implementation, and conﬁgu-
ration; clean IP-address mobility; and DoS protections.
MinimaLT’s design intentionally crosses network layers
for two reasons. First, security problems often occur in the
seams between layers. For example, Transport Layer Secu-
rity (TLS) is vulnerable to attacks on TCP/IP headers due
to its layering; connection-reset (RST) and sequence-number
attacks interrupt TLS connections in a way that is diﬃcult
to correct or even detect [18, 3, 59]. Second, multi-layer
design enables MinimaLT to improve performance.
Particularly challenging has been to provide key erasure
(“forward secrecy”) at low latency. Key erasure means
that even an attacker who captures network traﬃc and later
obtains all long-term private keys cannot decrypt past pack-
ets or identify the parties involved in communication. Tra-
ditionally, key erasure is implemented with Diﬃe-Hellman
key exchange (DH) in a way that imposes a round trip be-
fore sending any sensitive data. MinimaLT eliminates this
round trip, instead obtaining the server’s ephemeral key dur-
ing a directory service lookup (§3.4 and §5.2). Further-
more, MinimaLT inverts the normal mandatory start-of-
connection handshake, instead ensuring connection liveness
using a server-initiated handshake only when a host’s re-
sources become low (§5.7). Eliminating these round trips
makes MinimaLT faster than unencrypted TCP/IP at es-
tablishing connections.
A second challenge is to make connections portable
across IP addresses to better support mobile computing.
MinimaLT allows the user to start a connection from home,
travel to work, and continue to use that connection. This
avoids application recovery overhead and lost work for op-
erations which would otherwise be interrupted by a move.
MinimaLT IP mobility does not require intermediary hosts
or redirects, enabling it to integrate cleanly into protocol
processing (§5.6). To provide better privacy, MinimaLT
blinds third parties to IP-address portability, preventing
them from linking a connection across diﬀerent IP addresses.
425A third challenge is DoS prevention. A single host cannot
thwart an attacker with overwhelming resources [30], but
MinimaLT protects against attackers with fewer resources.
In particular, MinimaLT dynamically increases the ratio of
client (i.e., attacker) to server resources needed for a suc-
cessful attack. MinimaLT employs a variety of defenses to
protect against DoS attacks (§7.6).
A fourth challenge is authentication and authorization.
Experience indicates that network-based password authen-
tication is fraught with security problems [29, 54, 42, 11],
and thus cryptographic authentication is needed. Our
authentication framework supports both identiﬁed and
non-identiﬁed (pseudonym) users (§3.1). We designed
MinimaLT to integrate into systems with strong authoriza-
tion controls.
To meet these challenges, we have produced a clean-slate
design, starting from User Datagram Protocol (UDP), by
concurrently considering multiple network layers. We found
an unexpected synergy between speed and security. The rea-
son that the Internet uses higher-latency protocols is that,
historically, low-latency protocols such as T/TCP have al-
lowed such severe attacks [14] as to make them undeployable.
It turns out that providing strong authentication elsewhere
in the protocol stops all such attacks without adding latency.
MinimaLT was designed for, and implemented in, Ethos,
an experimental Operating System (OS) [52]. Ethos’s pri-
mary goal is to make it easier to write robust applications,
i.e., applications able to withstand attacks. MinimaLT
serves as Ethos’ native network protocol; it is part of Ethos’
authentication suite which includes a Public Key Infrastruc-
ture (PKI) named sayI [53] and a networking API [47, 46].
We have also ported MinimaLT to Linux.
MinimaLT provides the features of TCP/IP (reliability,
ﬂow control, and congestion control), and adds encryption,
authentication, clean IP mobility, and DoS protections, all
while providing key erasure and reducing latency.
§2 summarizes the threats for which MinimaLT pro-
vides countermeasures. The next four sections explain how
MinimaLT works and how fast it is: §3 describes the central
objects, §4 describes the message format, §5 describes the
protocol dynamics, and §6 provides a performance evalua-
tion. §7 explains why MinimaLT was designed the way it
was, and §8 compares MinimaLT to related work.
2 Threat model
We are concerned with an attacker that will attempt to vio-
late the conﬁdentiality and integrity of network traﬃc. Our
attacker can observe and modify arbitrary packets, might be
a Man-in-the-Middle (MitM), might provide fraudulent ser-
vices which attempt to masquerade as legitimate services, or
might attempt to fraudulently assume the identity of a le-
gitimate user. An attacker who gains complete control over
clients and servers, through physical access or otherwise,
might be able to decrypt or identify the parties communi-
cating with very recent and future packets. However, he
should be unable to do so with older packets.
In addition, we want to weaken attacks on availabil-
ity. DoS attacks from known users are expected to be
addressed through de-authorizing abusive users or non-
technical means. An anonymous attacker might try to af-
fect availability, through transmission-, computation-, and
memory-based DoS. An attacker with enough resources (or
control over the network) can always aﬀect availability, so
Q1
Q2
Q3
connection0 (control)
connection1
connection2
connection3
tunnel C → S
P1
P2
P3
Client host C
Server host S
: MinimaLT system software
Qn / Pn : Client/server program n;
Figure 1: A tunnel encapsulates all of the connections be-
tween a given pair of hosts; connections are user-process-to-
service and the server cryptographically authenticates each
client user (the control connection does not involve applica-
tion programs)
we attempt to drive up his costs by making his attack at
least as expensive as the cost to defend against it. Here
the ability to spoof the source IP address of a packet and
capture a reply should not allow much easier attacks.
We are also want to make it diﬃcult for an attacker to
link a user’s connection across diﬀerent IP addresses. For
example, if a user suspends his laptop at home and wakes
it up at a wireless café, a network eavesdropper should not
be able to infer from the protocol that these belong to the
same user. We do not address the linking of ﬂows associated
with the same IP address, as this type of protection is better
aﬀorded by techniques such as onion routing [16].
3 MinimaLT objects
This section introduces the central objects that interact in
the MinimaLT architecture. MinimaLT uses public keys
to identify servers and users; creates encrypted tunnels be-
tween hosts, through which authenticated user-to-service
connections are multiplexed; and publishes ephemeral server
keys in a directory service to reduce latency by eliminat-
ing setup handshakes. To provide a complete picture for a
MinimaLT deployment, this section concludes by describing
how to integrate MinimaLT’s directory service with DNS
and the X.509 PKI (used by web browsers). This is not part
of the protocol; it is merely one possible way to combine a
directory service with the existing Internet infrastructure.
3.1 Public keys
MinimaLT is decidedly public-key-based. Both servers and
users are identiﬁed by their public keys; such keys serve as
a Universally Unique ID (UUID) [61, 50, 35]. Users prove
their identity to servers by providing ciphertext which de-
pends on both their and the server’s keys (§5.8). A user
may be known—i.e., the underlying system is aware of a
real-world identity associated with the user’s public key—
or he may be a stranger—a user whose real world identity
is unknown. We consider a stranger who produces a new
identity for each request anonymous. Whether strangers
or anonymous users are allowed is left to the underlying sys-
tem’s authorization policy.
3.2 Tunnels
A MinimaLT tunnel is a point-to-point entity that encap-
sulates the set of connections between a client and an au-
thenticated server, as we depict in Figure 1. MinimaLT
creates a tunnel on demand to service a local application’s
outgoing connection request or in response to the ﬁrst packet
received from a host (both are subject to the underlying sys-
tem’s authorization controls). In Figure 1, let Q1 be the ﬁrst
program on client C to request a connection to server S. C
ﬁrst establishes a tunnel endpoint, and then sends a mes-
4263
D
5
2
C
Local domain
MinimaLT
DNS
certS,certS0
UDP
1
S
N
4
example.com
Figure 2: An external directory service query
sage to S; S receives this message and then completes the
tunnel. (We describe this more completely in §5.) Tunnels
provide server authentication, encryption, congestion con-
trol, and reliability; unlike with TLS/TCP, these services
do not repeat for each individual connection.
3.3 Connections
A MinimaLT tunnel contains a set of connections, that
is, a single tunnel between two hosts encapsulates an ar-
bitrary number of connections. Each connection is user-
authenticated and provides two-way communication be-
tween a client application and a service. In addition to mul-
tiplexing any number of standard application-to-service con-
nections, each MinimaLT tunnel has a single control con-
nection, along which administrative requests ﬂow (§4.1).
3.4 Directory and Name service
Central to MinimaLT are its directory and name services.
These services provide certiﬁcates called service records,
which contain the information that a client needs to authen-
ticate and communicate with a server. A directory service
receives client queries containing a server hostname, and re-
sponds with the server’s service record. Servers register their
own service record using a name service. Thus the hosts
involved in the authentication of a server are the client C,
server S, directory service D, and name service N.
Contents of a service record A service record is made
up of two certiﬁcates: a long-term certiﬁcate certS and
an ephemeral certiﬁcate ecertS. The long-term certiﬁcate
binds S’s long-term public key with S’s hostname. The
ephemeral certiﬁcate is signed by S’s long-term key and
contains S’s IP address, UDP port, protocol version num-
ber (now 0), minimum ﬁrst packet size (padding), long-term
key, ephemeral key, and the ephemeral key’s lifetime. Thus
this certiﬁcate includes the information which is tradition-
ally returned by DNS, plus cryptographic parameters which
in other protocols are negotiated during a handshake. The
protocol version number allows algorithm upgrades; proto-
col changes always involve changing the version number.
Hosts Within an organization, an administrator maintains
clients and servers, as well as one directory and one name
service. Each server S periodically uploads S’s service
record to its local N. Before communicating with S, the
client C requests S’s service record from its local D. Once
a client has S’s service record, it can form a tunnel to S.
We note that only the interactions C–S, C–D, and S–N
are part of MinimaLT. The communication D–N is not part