字符“:”分隔。
30 ｜ 第2章
2.2.4 路径
URL的路径组件说明了资源位于服务器的什么地方。路径通常很像一个分级的文件
系统路径。比如：
http://www.joes-hardware.com:80/seasonal/index-fall.html
这个URL中的路径为/seasonal/index-fall.html，很像UNIX文件系统中的文件系统
路径。路径是服务器定位资源时所需的信息。２可以用字符“/”将HTTP URL的路
径组件划分成一些路径段（path segment）（还是与UNIX文件系统中的文件路径类
似）。每个路径段都有自己的参数（param）组件。
2.2.5 参数
对很多方案来说，只有简单的主机名和到达对象的路径是不够的。除了服务器正在
监听的端口，以及是否能够通过用户名和密码访问资源外，很多协议都还需要更多
的信息才能工作。
负责解析URL的应用程序需要这些协议参数来访问资源。否则，另一端的服务器可
能就不会为请求提供服务，或者更糟糕的是，提供错误的服务。比如，像FTP这样
的协议，有两种传输模式，二进制和文本形式。你肯定不希望以文本形式来传送二
进制图片，这样的话，二进制图片可能会变得一团糟。
为了向应用程序提供它们所需的输入参数，以便正确地与服务器进行交互，URL中
有一个参数组件。这个组件就是URL中的名值对列表，由字符“;”将其与URL的
其余部分（以及各名值对）分隔开来。它们为应用程序提供了访问资源所需的所有
附加信息。比如：
ftp://prep.ai.mit.edu/pub/gnu;type=d
在这个例子中，有一个参数type=d，参数名为type，值为d。
28
如前所述，HTTP URL的路径组件可以分成若干路径段。每段都可以有自己的参
数。比如：
http://www.joes-hardware.com/hammers;sale=false/index.html;graphics=true
这个例子就有两个路径段，hammers和index.html。hammers路径段有参数sale，其值
为false。index.html段有参数graphics，其值为true。
注2： 这是一种简化的说法。在18.2节我们会看到，路径并不总能为资源定位提供足够的信息。有时服务
器还需要其他的信息。
URL与资源 ｜ 31
2.2.6 查询字符串
很多资源，比如数据库服务，都是可以通过提问题或进行查询来缩小所请求资源类
型范围的。
假设Joe的五金商店在数据库中维护着一个未售货物的清单，并可以对清单进行查
询，以判断产品是否有货，那就可以用下列URL来查询Web数据库网关，看看编
号为12731的条目是否有货：
http://www.joes-hardware.com/inventory-check.cgi?item=12731
这个URL的大部分都与我们见过的其他URL类似。只有问号（?）右边的内容是
新出现的。这部分被称为查询（query）组件。URL的查询组件和标识网关资源的
URL路径组件一起被发送给网关资源。基本上可以将网关当作访问其他应用程序的
访问点（第8章会对网关进行详细的讨论）。
图2-2中有一个作为Joe的五金商店清单查询应用程序的网关的服务器，在这个
例子中向此服务器发送了一个查询组件。查询的目的是检查清单中是否有尺寸为
large、颜色为blue的条目12731。
http://www.joes-hardware.com/inventory-check.cgi?item=12731&color=blue&size=large
item=12731&color=blue&size=large
因特网
客户端 服务器
“清单查询”
网关
图2-2 发送给网关应用程序的URL查询组件
在本章稍后会看到，除了有些不合规则的字符需要特别处理之外，对查询组件的格
式没什么要求。按照常规，很多网关都希望查询字符串以一系列“名/值”对的形
29
式出现，名值对之间用字符“&”分隔：
http://www.joes-hardware.com/inventory-check.cgi?item=12731&color=blue
在这个例子中，查询组件有两个名/值对：item=12731和color=blue。
32 ｜ 第2章
2.2.7 片段
有些资源类型，比如HTML，除了资源级之外，还可以做进一步的划分。比如，对
一个带有章节的大型文本文档来说，资源的URL会指向整个文本文档，但理想的情
况是，能够指定资源中的那些章节。
为了引用部分资源或资源的一个片段，URL支持使用片段（frag）组件来表示一个
资源内部的片段。比如，URL可以指向HTML文档中一个特定的图片或小节。
片段挂在URL的右手边，最前面有一个字符“#”。比如：
http://www.joes-hardware.com/tools.html#drills
在这个例子中，片段drills引用了Joe的五金商店Web服务器上页面/tools.html中的一
个部分。这部分的名字叫做drills。
HTTP服务器通常只处理整个对象，3而不是对象的片段，客户端不能将片段传送给
服务器（参见图2-3）。浏览器从服务器获得了整个资源之后，会根据片段来显示你
感兴趣的那部分资源。
http://www.joes-hardware.com/tools.html#drills
（a）用户选择了指向http://www.joes-hardware.com/tools.html#drills的链接
（片段并不发送给服务器）
（b）浏览器向http://www.joes-ha rdware.com/tools.html发起请求
因特网
客户端 www.joes-hardware.com
（c）服务器返回整 个HTML页面
浏览器向下滚动，从名为drills的片段处开始显示
Screen shot needed
（d）浏览器从名为drills的片段处开始显示HTML页面
图2-3 服务器处理的是整个对象，因此URL片段仅由客户端使用
注3： 在15.9节会看到HTTP Agent代理可能会请求某个字节范围内的对象，但在URL片段的上下文中，
服务器会发送整个对象，由Agent代理将片段标识符应用于资源。
URL与资源 ｜ 33
2.3 URL快捷方式
Web客户端可以理解并使用几种URL快捷方式。相对URL是在某资源内部指定一
个资源的便捷缩略方式。很多浏览器还支持URL的“自动扩展”，也就是用户输入
URL的一个关键（可记忆的）部分，然后由浏览器将其余部分填充起来。2.3.2节
对此进行了解释。
2.3.1 相对URL
URL有两种方式：绝对的和相对的。到目前为止，我们只见过绝对URL。绝对
30 URL中包含有访问资源所需的全部信息。
另一方面，相对URL是不完整的。要从相对URL中获取访问资源所需的全部信息，
就必须相对于另一个，被称为其基础（base）的URL进行解析。
相对URL是URL的一种便捷缩略记法。如果你手工写过HTML的话，可能就会发
现相对URL是多么便捷了。例2-1是一个嵌入了相对URL的HTML文档实例。
例2-1 带有相对URL的HTML代码片段
Joe's Tools
 Tools Page 
 Hammers 
 Joe's Hardware Online has the largest selection of hammers
 on earth.
例2-1是资源：
http://www.joes-hardware.com/tools.html
的HTML文档。
在这个HTML文档中有一个包含了URL ./hammers.html的超链接。这个URL看起
来是不完整的，但实际上是个合法的相对URL。可以相对于它所在文档的URL对
其进行解释；在这个例子中，就是相对于Joe的五金商店Web服务器的资源/tools.
31 html。
使用缩略形式的相对URL语法，HTML的编写者就可以省略URL中的方案、主机
和其他一些组件了。这些组件可以从它们所属资源的基础URL中推导出来。其他资
源的URL也可以用这种缩略形式来表示。
34 ｜ 第2章
在例2-1中，基础URL为：
http://www.joes-hardware.com/tools.html
用这个URL作为基础，可以推导出缺失的信息。我们知道资源名为./hammers.html，
但并不知道方案或主机名是什么。通过这个基础URL，可以推导出方案为http，主
机为www.joes-hardware.com。图2-4对此进行了说明。
基础URL 相对URL
http://www.joes-hardware.com/tools.html ./hammers.html
http://www.joes-hardware.com/hammers.html
新的绝对URL
图2-4 使用基础URL
相对URL只是URL的片段或一小部分。处理URL的应用程序（比如浏览器）要能
够在相对和绝对URL之间进行转换。
还需要注意的是，相对URL为保持一组资源（比如一些HTML页面）的可移植性
提供了一种便捷方式。如果使用的是相对URL，就可以在搬移一组文档的同时，仍
然保持链接的有效性，因为相对URL都是相对于新基础进行解释的。这样就可以实
现在其他服务器上提供镜像内容之类的功能了。
1. 基础URL
转换处理的第一步就是找到基础URL。基础URL是作为相对URL的参考点使用
的。可以来自以下几个不同的地方。
• 在资源中显式提供
有些资源会显式地指定基础URL。比如，HTML文档中可能会包含一个定义了
基础URL的HTML标记，通过它来转换那个HTML文档中的所有相对
URL。
• 封装资源的基础URL
如果在一个没有显式指定基础URL的资源中发现了一个相对URL，如例2-1所
示，可以将它所属资源的URL作为基础（如例中所示）。 32
• 没有基础URL
在某些情况下，没有基础URL。这通常意味着你有一个绝对URL；但有时可能
只是一个不完整或损坏了的URL。
URL与资源 ｜ 35
2. 解析相对引用
前面我们介绍了URL的基本组件和语法。要将相对URL转换为一个绝对URL，下
一步要做的就是将相对URL和基础URL划分成组件段。
实际上，这样只是在解析URL，但这种做法会将其划分成一个个组件，因此通常会
称作分解（decomposing）URL。只要将基础和相对URL划分成了组件，就可以应
用图2-5中的算法来完成转换了。
已解析好的相对URL：
{方案=x，用户=y，...}
方案为空 所有组件都为空 非空方案
继承基础URL的方案
默认为基础URL URL是绝对的
检查用户、密码、
主机和端口组件
所有组件都为空
继承基础URL、用户、
密码、主机和端口
检查路径组件
带有前导“/”
路径为空 的非空路径
继承基础URL路径
要处理绝对路径
没有前导“/” 检查参数组件
的非空路径
从在处理的路径中删除
“./”和“ /./” 参数为空 参数非空
继承基础URL参数
检查查询组件
查询为空 查询非空
继承基础URL查询
将继承的组件和相对组件组合成新的绝对URL
33 图2-5 将相对URL转换成绝对URL
这个算法将一个相对URL转换成了其绝对模式，之后就可以用它来引用资源了。这
个算法最初是在RFC 1808中制定的，后来被合并到了RFC 2396中。
可以对例2-1中的./hammers.html实例使用图2-5中描述的算法。
36 ｜ 第2章
(1) 路径为./hammers.html，基础URL为http://www.joes-hardware.com/tools.html。
(2) 方案为空，沿着图表的左半边向下处理，继承基础URL方案（HTTP）。
(3) 至少一个组件非空，一直处理到底端，继承主机和端口组件。
(4) 将来自相对URL（路径：./hammers.html）的组件与我们继承来的组件（方案：
http，主机：www.joes-hardware.com，端口：80）合并起来，得到新的绝对
URL：http ://www.joes-hardware.com/hammers.html。
2.3.2 自动扩展URL
有些浏览器会在用户提交URL之后，或者在用户输入的时候尝试着自动扩展URL。
这就为用户提供了一条捷径：用户不需要输入完整的URL，因为浏览器会自动
扩展。
这些“自动扩展”特性有以下两种方式。
• 主机名扩展
在主机名扩展中，只要有些小提示，浏览器通常就可以在没有帮助的情况下，将
你输入的主机名扩展为完整的主机名。
比如，如果在地址栏中输入 yahoo，浏览器就会自动在主机名中插入 www.
和.com，构建出www.yahoo.com。如果找不到与yahoo匹配的站点，有些浏览
器会在放弃之前尝试几种扩展形式。浏览器通过这些简单的技巧来节省你的时