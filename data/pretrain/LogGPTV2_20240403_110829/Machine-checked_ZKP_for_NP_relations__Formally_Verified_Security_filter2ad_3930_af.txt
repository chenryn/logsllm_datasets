the output state will be computed according to the specification of
the addition gate. Furthermore, the statement guarantees that the
memory remains unchanged, except for the updating of the party‚Äôs
state (this is the touches predicate, where L denotes to the size of a
finite field element in memory, st is a pointer to the state of the party
in memory, and cwire is the number of wire shares already stored
in the state). Our Jasmin implementations are also modular with
respect to the underlying field operations. We have reused a verified
implementation implementation of the field F2255‚àí19 and created
verified implementations of field operations for small moduli (fitting
into a 64-bit word), including a specialized variant for boolean
circuits (this uses bitwise operations for computations over F2).
Extraction and integration. We followed a semi-automatic extrac-
tion approach and pruned the resulting OCaml code at the operators
and data types that match the interface of the Jasmin code. This
means that the unverified part of the code is reduced to basic OCaml
data types, and to C wrappers between OCaml code and Jasmin
code that we have written by hand. This code takes care of memory
allocation, randomness generation and conversion between OCaml
representations and the input/output memory regions used by the
Jasmin routines. Concretely, memory regions used by Jasmin are
seen by the OCaml code as a single address (when their size is fixed,
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2597e.g., for a message) or as an address/size pair (for variable length
structures such as the states of parties). For efficiency purposes,
we allocate memory upfront, by instrumenting the C routines that
sample the randomness for the protocol.
Finally, we instantiated the commitment scheme with a veri-
fied implementation of SHA-3 taken from [4], overall removing
all cryptography-specific code from the TCB. Computing the com-
mitment over a view can be done simply by passing the memory
region that contains the view to this verified routine. C routines
for comparing memory regions are provided to allow the verifier
checks for commitment correctness and message consistency.
4.3 Discussion
To better estimate the size of our development, Figure 1 provides
numbers of lines of EasyCrypt code for our complete proofs. Among
the two instantiations, roughly 60% of the proof effort is shared
via abstract components (these numbers do not take into account
common concrete components such as hash-based commitment
schemes). The two instantiations have comparable proof effort: the
BGW proof restates some compositional MPC results for arithmetic
circuits, while about 50% of the proof effort for the Maurer instanti-
ation concerns the functional correctness of the Jasmin gates.
The two implementations we describe in this section explore
two different approaches for obtaining verified implementations
from complex EasyCrypt specifications. The first approach uses an
automatic extraction of the whole development to OCaml, which
means that the target code is a simple syntactic translation of the
functional EasyCrypt operators. The main advantage of this ap-
proach is the reduced development time; the main disadvantages
are code management and performance. We also rely on unverified
OCaml libraries for finite-field and low-level cryptography, which
increases the TCB. In our second approach, we have a meet in the
middle strategy: we implement the low-level components in Jasmin,
which reduces the TCB but significantly increases the development
time (this can of course be amortized, as we did, by reusing existing
verified code for the finite-field F2255‚àí19 and hash function). We use
a semi-automated extraction strategy that preserves the modular
structure of the EasyCrypt proofs, but makes the extracted code
roughly 3x larger than the BGW one due to structural redundan-
cies. The code resulting from extraction is now conceptually much
simpler, as we only generate the code that orchestrates calls to the
MPC protocol gates, commitment scheme, etc. However, we need
to write custom binding code in C to connect the Jasmin code to the
OCaml code (about 15% of the executable code). Roughly another
15% of the executable Maurer code concerns Ocaml bindings for
the Jasmin code and for unverified Ocaml libraries for basic data
structures. In the future, this code could be automatically generated
from meta-information that exists in the EasyCrypt formalization,
and this is an interesting direction for future work.
Table 1 gives a comparison of the performance of the two imple-
mentations for a growing number of gates; the input circuits are
generated at random with essentially the same number of multi-
plication and addition gates. We note that in MitH, the difference
between multiplication and addition gates is not as dramatic as
in standard MPC, since there is no latency associated with com-
munications. For example, the difference between addition and
multiplication in our implementations is 5%, since the computation
time seems to be dominated by memory access and the overhead
of interfacing extracted code with low-level implementations.
The performance benefits of introducing the optimized Jasmin
implementations are clear: as the number of gates increases, the
performance improvement increases as well, leading to an 18%
improvement in prover time and a 5x improvement in verifier time
for the larger circuits The heavier computations take place on
the verifier side, when verifying consistency between views. The
fact that we keep the orchestration of the consistency checks in
extracted code means that we do not get the opportunity to hand-
optimize this step in either protocol. However, the implementation
choices in the BGW version (intensively using list-based operations)
clearly lead to an extracted code that performs quite poorly.
The proof size for our implementations includes the initial com-
mitments (160 = 5 ‚àó 32 bytes), plus the two opened views. Our
implementation adopts no compression techniques, so it is naive in
this respect. In the Maurer implementation, a sharing takes ùêø‚àó8‚àó5‚àó6
bytes, where ùêø is the size of the representation of the prime ùëû and 8
is the size of the processor word. This means that the view includes
ùêø ‚àó 8‚àó (9+ 5‚àó 6) bytes per multiplication gate (here 9 is the number
of random field elements required to perform a secret sharing and
5 is the number of parties), plus ùêø ‚àó 8 ‚àó 6 bytes per secret input.
The timings we report seem poor in comparison to those obtain-
able with a highly optimized implementation such as ZKBoo [20]
where, besides improvements in the protocol design (e.g., adopt-
ing a 2-out-of-3 trust model rather than a 2-out-of-5) there is a lot
of work in fine-tuning the implementation and use of parallelism.
There, e.g., carrying out a proof for a circuit with roughly 30K gates
(e.g., SHA-1) is reported as taking 13ms in prover time and 5ms in
verifier time (and this including repetition for reducing the sound-
ness error, which can be parallelized for non-interactive proofs), i.e.
roughly three orders of magnitude faster than the times we report.
However, we do not think that this is indicative that our approach
intrinsically leads to prohibitive execution times. For example, in
the same paper, the Pinocchio [28] prototype is used as baseline; it
is reported that the improvement in prover time that ZKBoo offers
is precisely 3 orders of magnitude, which would place Pinocchio
much closer to the performance of our implementations. Pinoc-
chio implements a different family of ZK protocols, but it shares
many similarities with our prototype; in particular, its goal is to
demonstrate the potential of a new technology, rather than explor-
ing its performance limits. Moreover, its implementation is fully
generic and can compute any circuit, rather than being specifically
fine-tuned for a particular family of algorithms or data structure.
We also briefly mention the results presented in [16], which
extends MitH to use MPC protocols with preprocessing. There,
a prover time of 851ms is reported for computing a ZK proof in-
volving 10K gates (also already accounting for soundness error
reduction). Again, this is significantly better than the values we
report, but it does show that variability in performance results for
such frameworks is quite large, depending on many factors.
We believe that many optimizations can be applied to improve
the execution time of our formally verified implementations of MitH
very significantly, even though the use of a functional language
as the target for extraction will always introduce some overhead.
Indeed, an important direction for future work is to see how close
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2598#gates
P MPC
P Com
P Total
V CVeriv
V Check
V Total
Maurer
100
1,14
0,87
2,15
0,20
0,46
0,66
1000
88,78
4,28
93,87
1,53
35,81
37,34
Small Modulus
#gates
10000
P MPC
8728,81
P Com
39,47
P Total
8776,08
V CVerif
13,83
3491,19 V Check
3505,02 V Total
BGW
100
4,15
0,57
5,35
0,23
3,25
3,48
1000
123,32
6,30
135,90
2,46
196,14
198,60
10000
10540,82
132,50
10759,47
49,92
25794,72
25844,64
#gates
P MPC
P Com
P Total
V CVeriv
V Check
V Total
Maurer
100
1,35
2,16
3,83
0,69
0,65
1,33
1000
92,96
15,04
111,09
5,88
49,56
55,44
Large Modulus
#gates
10000
P MPC
9031,57
P Com
141,75
P Total
9195,54
V CVerif
55,06
4819,85 V Check
4874,91 V Total
BGW
100
7,05
1,34
9,09
0,51
5,60
6,11
1000
150,67
18,22
176,03
7,12
232,10