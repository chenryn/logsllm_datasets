construct complex microcode programs that behave as expected
when executed on the CPU. Additionally the behavior is consistent
between CPUs of the AMD K8 and K10 families, even though they
differ in details such as cache sizes, core counts, or feature size,
and even certain implementation details such as the selection of
microcoded instructions. There are also parallels between our re-
sults and the descriptions found in the patent describing the RISC86
instruction set [30], which appears to be used internally by the CPU.
For example, the encoding for the conditional codes of microcode
jumps are the same as stated in the patent. We also found similari-
ties in the encoding of individual opcodes, albeit with differences
in length and number of opcode fields. Lastly, certain operations,
most prominently multiple division variants or steps, and internal
register functions, e.g. the address of the next x86 instruction to
be executed, are closely related. After reconstructing the mapping
between virtual and physical microcode addresses we could also lo-
cate the implementation of specific x86 instructions. By comparing
the disassembled microcode with the expected function of the x86
instruction, we determined that we indeed correctly interpret the
bit sequences. Examples of this are the instructions shrd, whose
implementation shows shifts of the argument registers according
to the specifications and the wrmsr opcode, which at its start has a
large number of instructions comparing ECX (the register number
to write to) to specific values consistent with the documented in-
terface. We also verified individual microcode instructions on their
own by copying the bit sequences to a microcode update, executing
them and comparing the output. This was extended upon during
the development of the microcode emulator for which we tested
different input states on both the emulator and the CPU to ensure
the correctness of our emulation.
A final confirmation of the correctness can be achieved with the
cooperation of the CPU vendors. The availability of official specifi-
cations and documentation would allow for a faster development
of custom microcode programs and could potentially allow better
usage of available CPU features. Unfortunately, we did not receive
a response from AMD after we contacted them.
6.4 Shadow Stacks
During our research, we considered an opaque shadow stack im-
plementation as a potent use case for a constructive microprogram.
However, due to the fact that ret (near, without immediate) is not
implemented in microcode, we can not instrument this instruction.
As this instruction is a key requirement in implementing an opaque
shadow stack, we were unable to create a proof-of-concept. As
CPU vendors are able to determine the logic on non-microcoded
instructions during the design process, they are able to implement
such a shadow stack. Below we discuss the advantages of an opaque
shadow stack retrofitted by microcode.
Shadow stack defenses implement a second stack that is kept in
sync with the system’s default stack. Shadow stacks often possess
special properties in order to achieve certain security goals. For
example, the shadow stack can be placed in memory that cannot
be accessed by normal program instructions [50], the direction of
growth can be inverted to detect illegal stack accesses that yield
diverging results [68], or the shadow stack stores only fixed-size
elements to preserve control-flow metadata in the event of a stack-
based buffer overflow [16]. Shadow stacks ensure the integrity of
sensitive data on the stack. Therefore, they are often integrated in
code-reuse defenses such as CFI [15, 16, 23, 59] in order to protect
the backward edge of the control flow. Due to their nature, shadow
stack implementations need to extend the logic of instructions
operating on the stack such as call and ret. Software-based imple-
mentations achieve this by adding instructions at all occurrences
during compilation [16, 23, 26, 50] or with static binary rewriting.
In 2015, Davi et al. [24] proposed a hardware-assisted shadow stack
implementation with low performance overhead. However, the de-
fense still requires the insertion of instructions into the protected
application.
Shadow stacks can also be implemented in an opaque way. The
semantic of existing stack operations is extended rather than rely-
ing on the addition of instructions. Benefits of this approach are
compatibility with legacy applications, protection of the whole
software stack instead of transformed applications and software
libraries only, and potential performance gains due to smaller code
size as well as improved utilization of the underlying microarchitec-
ture. Depending on the implementation details, stronger security
properties can be enforced, e.g., by placing the shadow stack at a
memory area not accessible by conventional user mode instructions.
Intel released the specification of CET containing a shadow stack in
2016 and added GCC support in 2017 [17, 82]. However, to date no
processor with CET support has been released. The CET shadow
stack is opaque except for some new management instructions
such as switch shadow stack. We argue that these management
instructions will be microcoded, because they implement complex
logic and are not performance critical due to their rare occurrence.
6.5 Lightweight Syscalls
The syscall interface is provided by the processor and the operating
system to offer services to user space. During its setup, the pointer
to the syscall handler in kernel space and the kernel stack pointer
are stored in MSRs. Once the syscall instruction is invoked, the
processor reads the corresponding MSRs, switches the stack, and
redirects control flow. The syscall handler then invokes the handler
for the requested service according to the given syscall number
in register eax. The service handler sanitizes the inputs, checks
access privileges (where applicable) and performs its desired action.
Ultimately, control is transfered back to user space via the sysret
instruction by restoring segment registers, again switching stack
and redirecting control to the stored instruction pointer.
The performance overhead imposed by syscalls discourages de-
fenses from invoking them frequently. Thus, vital and critical run-
time metadata of defenses are kept in the user space, where they
are exposed to attackers. To thwart potential tampering with the
metadata, many different kinds of information hiding schemes were
introduced in the past years [16, 23, 50, 54]. However, information
hiding has been shown to be ineffective in several attack scenar-
ios [29, 33, 34, 48]. We propose lightweight syscalls implemented in
microcode, which are assigned to a dedicated opcode. They leave
segment registers, the x86 instruction pointer, and the stack in
place. Once the opcode is executed, the microcode implementation
switches to kernel mode, performs a desired action, and switches
back to user mode. The action is specific to the needs of the par-
ticular defense and could for example be a restricted read or write
to the defense’s metadata in kernel memory. Note that special care
must be taken during implementation of the microcode update to
not introduce a privilege escalation vulnerability. With lightweight
syscalls, defenses such as CFI and Code-Pointer Integrity (CPI) can
migrate from information hiding to information isolation enforced
by the privilege level of the processor. This can potentially further
harden existing defenses against advanced adversaries. Due to the
nature of lightweight syscalls, we estimate a low performance over-
head. Based on our limited knowledge about microcode, we were
unfortunately unable to implement and evaluate such an approach.
Future work should explore such a microcode-based defense primi-
tive.
6.6 Microcode Trojan Detection
Koppe et al. have shown that microcode updates can contain mali-
cious behavior [49]. All presented microcode Trojans rely on the
same mechanism to gain initial control, namely the interception
of x86 instruction decoding. We found that the interception and
the additionally executed micro-ops cause a measurable timing dif-
ference. In this paper, we showed that a related technique, namely
microcode-assisted instrumentation, already exhibits a measurable
performance overhead. Our further tests indicate that even if only
a single triad—the smallest possible insertion—is inserted into the
logic of an instruction, the overhead can already be measured. Given
the unavoidable overhead of switching to the microcode RAM, a
backdoor inserted via a microcode update is in general detectable.
A detection engine can create a base line by measuring the tim-
ing of all instructions with no microcode update applied. Then the
engine takes a second measurement with the update under test,
compares the results, and reports any timing differences. Note that
this method only detects x86 instruction hooks and not necessarily
malicious behavior. A malicious update does not always need to in-
sert additional logic into existing instructions, it could, for example,
modify the handling of certain, potentially undocumented, MSRs.
In order to also detect such modifications, the microcode update
needs to be decoded and, for example, statically analyzed. Program
analysis methods would also consider logic that is not inserted at
instruction decoding but other internal processes like exception
handling on the microarchitectural level. It is also possible to reason
about the Trojan’s semantics, thus yielding more accurate results.
Trojans (or CPU vulnerabilities that can be exploited as backdoors)
can also occur in the microcode ROM. The detection of these is
more challenging, because their behavior is also contained in the
baseline measurement and the ROM contents need to be read out
to apply static analyses.
However, the same problems that plague traditional malware
identification are also applicable to the detection of microcode Tro-
jans. Even if the whole microcode, both ROM and RAM, is available
for analysis, it can be hard to determine if a certain code fragment
is benign or malicious in nature. This problem is amplified due the
limited understanding of microcode internals. But even access to
the full documentation on the subject would not be sufficient, as
it is possible to use obfuscation to hide the true nature of a code
fragment. Lastly, it would be possible to insert a backdoor outside of
the microcode engine and directly change the other functional units
of the CPU. All-in-all detecting microcode Trojans—or hardware
backdoors in general—is a difficult problem in the face of powerful
adversaries.
6.7 Supporting Newer and Different
Architectures
While we were able to apply our understanding of the K8 architec-
ture to programming for the K10 architecture, other architectures
are far more difficult to support. As the K10 is a close evolution
of the K8, the microcode engine remained largely the same. We
mainly noticed differences in the selection of microcoded instruc-
tions. For example, the K10 architecture moved the decoding of all
ret instructions to hardware, while the K8 still performed decod-
ing for some variants of it in microcode. Moving more instructions
to the hardware decoder usually results in better performance as
microcoded decoding takes more time. During our investigation we
also determined that the entry points for microcoded instructions
were constant between K8 and K10, but the implementation then
branched to different triads during execution.
The major problem when adapting our findings to new archi-
tectures is the strong cryptographic authentication of microcode
updates for newer CPUs. Only with the ability to execute arbitrary
code on the hardware, it was possible to gain an understanding
of the fundamental encoding of microcode [49]. Without such a
possibility, any analysis is restricted to interpreting existing code,
usually in the form of microcode updates. However, even the K8
and K10 architectures use a form of scrambling to obfuscate the
plain text of the updates. Analysis of more modern updates shows
that those are most likely protected by strong cryptographic primi-
tives [11] and thus cannot be analyzed as is. However, even if the
plain text of such an update is acquired, without a specification or
a system to execute the code, it is still challenging to recover the
microcode semantics. Large amounts of data and at least some basic
information on the intended functionality of the update would be
needed to infer any meaning. Given the comparatively small size of
microcode updates (usually in the range of hundreds of kilobytes
for a single CPU), this would probably not be feasible in practice.
Another possibility is the analysis of the microcode ROM or
engine directly. Analyzing the engine itself would yield a detailed
understanding of the encoding and available functionality of mi-
crocode, but modern small feature sizes and the high complexity
of current CPUs render this approach difficult. While reading the
ROM directly is not as difficult as analyzing a highly optimized
microcode engine, it does not immediately yield the plain text mi-
crocode. As our reverse engineering process showed, we had to
invert multiple permutations of the readout bits in order to obtain
the plain text encoding. This process was heavily dependent on
both previous understanding of the encoding and the ability to
execute chosen microcode on the CPU, both of which would not
be available. Also there would be no way of verifying the findings,
as the CPU would not accept custom updates without the correct
signature. While the public key of the signature could possibly be
extracted from the CPU, the required private key would only be
available to the vendor. Modifying a single CPU via chip editing
might resolve this issue, but such an approach again requires mas-
sive hardware reverse engineering efforts and access to specialized
and expensive lab equipment able to operate at the small feature
In summary, supporting newer CPUs is mostly prevented by
strong authentication of microcode updates. Once the authentica-
tion is circumvented, e.g., by the use of chip editing or side-channel
attacks, our reverse engineering methods can be applied to infer mi-
crocode features. However, vendor support for custom microcode
updates is still the most viable approach to modifying the behavior
of CPUs.
7 CONCLUSION
Vulnerabilities affecting security and safety have accompanied com-
puter systems since their early days. To cope with attacks, numerous
defense strategies have been integrated both in software and hard-
ware. In particular, hardware-based defenses implemented with
microcode provide increased security and performance, as recently
shown by the microcode updates released to address Spectre and
Meltdown. However, little is publicly known how security mech-
anisms are implemented in hitherto closed-source microcode.
In this paper, we demonstrated how modern system security
defenses and tools can be implemented in microcode on a mod-
ern COTS x86 CPU. Among others, we provided details how to
implement timing attack mitigations, instruction set randomiza-
tion, and enclave functionality. To this end, we first uncovered new
x86 microcode details by a more in-depth hardware reverse engi-
neering and novel strategies to validate the semantics. Finally, we
discussed perspectives of customizable microcode and highlighted
useful primitives offered by microcode to arm the system security
defense landscape.
In order to foster future research in the area of processor mi-
crocode and its applications, we publish the source code of the
applications described in this paper as well as the framework used
for manipulating and generating microcode [57]. We hope this will
enable other researchers to extend and build upon our work to
design and implement microprograms.
ACKNOWLEDGEMENT
We thank our shepherd Mathias Payer and the anonymous review-
ers for their valuable feedback. Part of this work was supported by
the European Research Council (ERC) under the European Union’s
Horizon 2020 research and innovation programme (ERC Starting
Grant No. 640110 (BASTION) and ERC Advanced Grant No. 695022
(EPoCH)). In addition, this work was partly supported by the Ger-
man Federal Ministry of Education and Research (BMBF Grant
16KIS0592K HWSec and BMBF Grant 16KIS0820 emproof).
REFERENCES
[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. Control-Flow
Integrity. In ACM Conference on Computer and Communications Security (CCS).
[2] Advanced Micro Devices, Inc. 2005. Software Optimization Guide for AMD64
Processors. , 189–200 pages. [Online]. Available: https://support.amd.com/
TechDocs/25112.PDF.
[3] Advanced Micro Devices, Inc. 2013. Revision Guide for AMD Family 16h Models
size. Also such an edit would only allow a single CPU to load the
custom update, any unedited CPU would refuse it.
00h-0Fh Processors.
[4] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative
technology for CPU based attestation and sealing. In International workshop on
hardware and architectural support for security and privacy, Vol. 13. ACM New
York, NY, USA.
[5] Starr Andersen and Vincent Abella. 2004. Changes to Functionality in Microsoft
Windows XP Service Pack 2, Part 3: Memory Protection Technologies, Data
Execution Prevention. [Online]. Available: http://technet.microsoft.com/
en-us/library/bb457155.aspx.
[6] Dennis Andriesse, Xi Chen, Victor van der Veen, Asia Slowinska, and Herbert
Bos. 2016. An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries..
In USENIX Security Symposium.
[7] Anonymous. 2004.
Microcode Updates.
securityreviews/5FP0M1PDFO.html.
Opteron Exposed: Reverse Engineering AMD K8
[Online]. Available: http://www.securiteam.com/
[8] Michael Backes, Thorsten Holz, Benjamin Kollenda, Philipp Koppe, Stefan Nürn-
berger, and Jannik Pewny. 2014. You Can Run but You Can’t Read: Preventing
Disclosure Exploits in Executable Code. In ACM Conference on Computer and
Communications Security (CCS).
[9] Michael Backes and Stefan Nürnberger. 2014. Oxymoron: making fine-grained
memory randomization practical by allowing code sharing. In USENIX Security
Symposium.
[10] Elena Gabriela Barrantes, David H Ackley, Trek S Palmer, Darko Stefanovic, and
Dino Dai Zovi. 2003. Randomized instruction set emulation to disrupt binary