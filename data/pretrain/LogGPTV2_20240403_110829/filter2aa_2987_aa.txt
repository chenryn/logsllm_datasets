DEF CON 24 
4 August   
Las Vegas, USA 
ME & VULNEX 
Simon Roses Femerling 
•
Founder & CEO, VULNEX www.vulnex.com 
•
      @simonroses 
•
Former Microsoft, PwC, @Stake 
•
US DARPA award to research on software security 
•
Speaker: Black Hat, RSA, HITB, OWASP, SOURCE, AppSec, 
DeepSec, TECHNET 
•
Blog: http://www.simonroses.com/ 
•
Youtube: 
https://www.youtube.com/channel/UC8KUXxTSEdWfpFzAydjEzyQ 
•
CyberSecurity Startup 
•
    @vulnexsl 
•
Professional Services & Training 
•
Products: BinSecSweeper (Unified File Security Analysis) 
VULNEX 
DISCLAIMER & LICENSE 
• All Tools and resources are property 
of Microsoft and their authors 
• Non-affiliated with Microsoft 
WORKSHOP OBJECTIVES 
• What has Microsoft to offer? 
• How to improve our security posture 
for free! 
• Development and IT Security 
AGENDA 
1. Introduction 
2. Secure Development 
3. IT Security 
4. Conclusions 
1. DEVELOPERS VS SYSADMINS VS ALL… 
1. FATAL ERROR  
1. DEFENSE IN DEPTH 
1. MEMO FROM BILL GATES 
• https://news.microsoft.com/2012/01
/11/memo-from-bill-
gates/#sm.001he6hz618bod7bz7k10
g0w76fr0 
1. MICROSOFT SDL 
• The Security Development Lifecycle 
(SDL) is a software development 
process that helps developers build 
more secure software and address 
security 
compliance 
requirements 
while reducing development cost 
• https://www.microsoft.com/en-
us/SDL 
1. MICROSOFT SDL  
1. SDL: TRAINING 
• SDL Practice #1: Core Security 
Training 
This practice is a prerequisite for 
implementing the SDL. Foundational 
concepts for building better software 
include secure design, threat 
modeling, secure coding, security 
testing, and best practices 
surrounding privacy 
1. SDL: REQUIREMENTS 
•
SDL 
Practice 
#2: 
Establish 
Security 
and 
Privacy 
Requirements 
Defining and integrating security and privacy requirements early 
helps make it easier to identify key milestones and deliverables 
and minimize disruptions to plans and schedules. 
•
SDL 
Practice 
#3: 
Create 
Quality 
Gates/Bug 
Bars 
Defining minimum acceptable levels of security and privacy 
quality at the start helps a team understand risks associated with 
security issues, identify and fix security bugs during development, 
and apply the standards throughout the entire project. 
•
SDL Practice #4: Perform Security and Privacy Risk 
Assessments 
Examining software design based on costs and regulatory 
requirements helps a team identify which portions of a project will 
require threat modeling and security design reviews before 
release and determine the Privacy Impact Rating of a feature, 
product, or service. 
1. SDL: DESIGN 
•
SDL Practice #5: Establish Design Requirements 
Considering security and privacy concerns early helps 
minimize the risk of schedule disruptions and reduce a 
project's expense. 
•
SDL Practice #6: Attack Surface Analysis/Reduction 
Reducing the opportunities for attackers to exploit a potential 
weak spot or vulnerability requires thoroughly analyzing 
overall attack surface and includes disabling or restricting 
access to system services, applying the principle of least 
privilege, and employing layered defenses wherever possible. 
•
SDL 
Practice 
#7: 
Use 
Threat 
Modeling 
Applying a structured approach to threat scenarios during 
design helps a team more effectively and less expensively 
identify security vulnerabilities, determine risks from those 
threats, and establish appropriate mitigations. 
1. SDL: IMPLEMENTATION 
•
SDL 
Practice 
#8: 
Use 
Approved 
Tools 
Publishing a list of approved tools and associated security checks 
(such as compiler/linker options and warnings) helps automate 
and enforce security practices easily at a low cost. Keeping the list 
regularly updated means the latest tool versions are used and 
allows inclusion of new security analysis functionality and 
protections. 
•
SDL 
Practice 
#9: 
Deprecate 
Unsafe 
Functions 
Analyzing all project functions and APIs and banning those 
determined to be unsafe helps reduce potential security bugs with 
very little engineering cost. Specific actions include using header 
files, newer compilers, or code scanning tools to check code for 
functions on the banned list, and then replacing them with safer 
alternatives. 
•
SDL 
Practice 
#10: 
Perform 
Static 
Analysis 
Analyzing the source code prior to compile provides a scalable 
method of security code review and helps ensure that secure 
coding policies are being followed. 
1. SDL: VERIFICATION 
•
SDL 
Practice 
#11: 
Perform 
Dynamic 
Analysis 
Performing 
run-time 
verification 
checks 
software 
functionality using tools that monitor application behavior 
for memory corruption, user privilege issues, and other 
critical security problems. 
•
SDL 
Practice 
#12: 
Fuzz 
Testing 
Inducing 
program 
failure 
by 
deliberately 
introducing 
malformed or random data to an application helps reveal 
potential security issues prior to release while requiring 
modest resource investment. 
•
SDL 
Practice 
#13: 
Attack 
Surface 
Review 
Reviewing 
attack 
surface 
measurement 
upon 
code 
completion helps ensure that any design or implementation 
changes to an application or system have been taken into 
account, and that any new attack vectors created as a 
result of the changes have been reviewed and mitigated 
including threat models. 
1. SDL: RELEASE 
•
SDL Practice #14: Create an Incident Response Plan 
Preparing an Incident Response Plan is crucial for helping to 
address new threats that can emerge over time. It includes 
identifying 
appropriate 
security 
emergency 
contacts 
and 
establishing security servicing plans for code inherited from other 
groups within the organization and for licensed third-party code. 
•
SDL 
Practice 
#15: 
Conduct 
Final 
Security 
Review 
Deliberately reviewing all security activities that were performed 
helps ensure software release readiness. The Final Security 
Review (FSR) usually includes examining threat models, tools 
outputs, and performance against the quality gates and bug bars 
defined during the Requirements Phase. 
•
SDL 
Practice 
#16: 
Certify 
Release 
and 
Archive 
Certifying software prior to a release helps ensure security and 
privacy requirements were met. Archiving all pertinent data is 
essential for performing post-release servicing tasks and helps 
lower the long-term costs associated with sustained software 
engineering. 
1. SDL: RESPONSE 
• SDL 
Practice 
#17: 
Execute 
Incident 
Response 
Plan 
Being able to implement the Incident 
Response 
Plan 
instituted 
in 
the 
Release phase is essential to helping 
protect 
customers 
from 
software 
security or privacy vulnerabilities 
that emerge. 
1. REDUCING VULNERABILITIES 
1. REDUCING COSTS 
1. SYSINTERNALS 
• Not about Sysinternals suite 
• Awesome tools! 
• https://technet.microsoft.com/en-
us/sysinternals/bb545021 
  2. AVAILABLE SECURE DEVELOPMENT TOOLS 
1.
Microsoft Solutions Framework (MSF) for Capability Maturity 
Model Integration (CMMI) 2013 plus Security Development 
Lifecycle (SDL) 
2.
Microsoft Solutions Framework (MSF) for Agile 2013 plus 
Security Development Lifecycle (SDL) 
3.
TM SDL 2016 
4.
AntiXSS 
5.
Visual Studio 2012 / 2015 
6.
FXCOP 
7.
CAT.NET 
8.
SDL REGEX FUZZER 
9.
SDL MINIFUZZ 
10. App Verifier 
11. BinScope 
12. Binskim 
  2. 
TOOL: 
MICROSOFT 
SOLUTIONS 
FRAMEWORK 
(MSF) 
FOR 
       CAPABILITY 
MATURITY MODEL 
INTEGRATION 
(CMMI) 
2013 PLUS 
       SECURITY DEVELOPMENT LIFECYCLE (SDL) 
•
Version: 1.0 
•
Downloadable template that integrates the Microsoft Security 
Development Lifecycle (SDL) directly into your Visual Studio Team 
Foundation Server 2013 software development environment.  
•
Requires Visual Studio Team Foundation Server 2013 
•
More info: https://www.microsoft.com/en-
us/SDL/adopt/processtemplate.aspx 
Download: https://www.microsoft.com/en-
us/download/details.aspx?id=42519 
  2. 
TOOL: 
MICROSOFT 
SOLUTIONS 
FRAMEWORK 
(MSF) 
FOR 
       CAPABILITY 
MATURITY MODEL 
INTEGRATION 
(CMMI) 
2013 PLUS 
       SECURITY DEVELOPMENT LIFECYCLE (SDL) 
FEATURES 
SDL requirements 
SDL policies 
Custom vulnerabilities queries 
SDL guides & resources 
Final Security Review (FSR) report 
Third party tool integration 
Security templates 
  2. 
TOOL: 
MICROSOFT 
SOLUTIONS 
FRAMEWORK 
(MSF) 
FOR  
       CAPABILITY 
MATURITY MODEL INTEGRATION (CMMI) 2013 
PLUS  
       SECURITY DEVELOPMENT LIFECYCLE (SDL) 
  2. 
TOOL: 
MICROSOFT 
SOLUTIONS 
FRAMEWORK 
(MSF) 
FOR  
       CAPABILITY 
MATURITY MODEL INTEGRATION (CMMI) 2013 
PLUS  
       SECURITY DEVELOPMENT LIFECYCLE (SDL) 
  2. 
TOOL: 
MICROSOFT 
SOLUTIONS 
FRAMEWORK 
(MSF) 
       FOR AGILE 2013 PLUS SECURITY DEVELOPMENT LIFECYCLE (SDL)   
• Version: 1.0 
• Same as before but for Agile development 
• Requires Visual Studio Team Foundation 
Server 2013 
• More info: https://www.microsoft.com/en-
us/SDL/adopt/agile.aspx 
Download: https://www.microsoft.com/en-
us/download/details.aspx?id=42517 
  2. 
TOOL: 
MICROSOFT 
SOLUTIONS 
FRAMEWORK 
(MSF) 
       FOR AGILE 2013 PLUS SECURITY DEVELOPMENT LIFECYCLE (SDL)   
  2. TOOL: SDL TM 2016   
•
Version: 2016 
•
Threat Modeling 
•
Find threats during design phase, determine threats and define 
appropriate 
mitigations 
and 
distribute 
security 
tasks 
across 
stakeholders 
•
More info: https://blogs.microsoft.com/cybertrust/2015/10/07/whats-
new-with-microsoft-threat-modeling-tool-2016/ 
Download: https://www.microsoft.com/en-
us/download/details.aspx?id=49168 
  2. TOOL: SDL TM 2016 
  2. TOOL: SDL TM 2016   
STRIDE 
Spoofing 
Tampering 
Repudiation 
Information Disclosure 
Elevation of Privilege 
  2. TOOL: SDL TM 2016  
  2. TOOL: BANNED.H  
• Version: 2.0 
• Insecure functions banned by the SDL 
• Visual Studio replaces them under the 
hood by a more secure version 
• Download: 
https://www.microsoft.com/en-
us/download/details.aspx?id=24817 
  2. TOOL: BANNED.H  
  2. TOOL: ANTIXSS   
•
Version: 4.3 
•
Library to mitigate the potential of Cross-Site Scripting (XSS) 
attacks in web-based applications 
•
AKA: Microsoft Web Protection Library 
•
Two components: 
– Development library 
– Security Runtime Engine (SRE) – XSS y SQLi 
•
Included by default starting .NET 4.0 (Standalone end of life) 
https://msdn.microsoft.com/en-
us/library/system.web.security.antixss.antixssencoder(v=vs.110
).aspx 
•
More info:  