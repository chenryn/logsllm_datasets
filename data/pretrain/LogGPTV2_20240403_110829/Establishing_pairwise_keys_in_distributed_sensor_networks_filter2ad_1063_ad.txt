diate node. Besides the efﬁciency in determining the key path, the
communication overhead is substantially lower than the previous
schemes, which requires real-time path discovery even in normal
situations. Second, even if there are compromised sensors in the
network, there is still a high probability that two non-compromised
sensors can establish a pairwise key. Our earlier analysis indi-
cates that it is very difﬁcult for the adversary to prevent two non-
compromised sensors from establishing a pairwise key.
In other
words, the grid-based scheme is intrusion tolerant in the sense that
even if the current pairwise key between two sensors are compro-
mised, as long as these sensors are not compromised, they can re-
establish another pairwise key with a high probability. Finally, due
to the orderly assignment of grid intersections, this scheme allows
optimized deployment of sensors so that the sensors that can es-
tablish pairwise key directly are close to each other, thus greatly
decreasing the communication overhead in path key establishment.
6. COMPUTATION IN SENSORS
Evaluating a t-degree polynomial is essential in the computation
of a pairwise key in our schemes. This requires t modular multi-
plications and t modular additions in a ﬁnite ﬁled Fq, where q is a
prime number that is large enough to accommodate a cryptographic
key. This implies that q should be at least 64 bit long for typical
cryptosystems such as RC5. However, processors in sensor nodes
usually have much smaller word size. For example, ATmega128,
which is used in many types of sensors, only supports 8-bit multi-
plications and has no division instruction. Thus, in order to use the
basic scheme, sensor nodes have to implement some large integer
operations.
Nevertheless, in our schemes, polynomials can be evaluated in
much cheaper ways than polynomial evaluation in general. This is
mainly due to the observation that the points at which the polyno-
mials are evaluated are sensor IDs, and these IDs can be chosen
from a different ﬁnite ﬁeld Fq(cid:1), where q(cid:1)
is a prime number that is
larger than the maximum number of sensors but much smaller than
a typical q.
During the evaluation of a polynomial f (x) = atxt+at−1xt−1+
··· + a0, since the variable x is the ID of a sensor, the modular
multiplication is always performed between an integer in Fq and
another integer in Fq(cid:1) . For example, to compute the product of
two 64-bit integers on a 8-bit CPU, it takes 64 word multiplica-
tions with the standard large integer multiplication algorithm, and
27 word multiplications with the Karatsuba-Ofman algorithm [8].
In contrast, it only takes 16 word multiplications with the standard
algorithm to compute the product of a 64-bit integer and a 16-bit
Basic probabilistic(p=0.014)
q-composite(q=1,p=0.014)
RS(s'=2,s=287,t=99,p=0.014)
Grid-based(N=20000,p=0.014)
Basic probabilistic(p=0.33)
q-composite(q=1,p=0.33)
RS(s'=2,s=11,t=99,p=0.33)
d=1
d=3
d=5
d=7
d=9
1.2
1
0.8
0.6
0.4
0.2
0
0
2000
4000
8000
6000
Number of compromised nodes
10000 12000 14000 16000 18000 20000
i
e
s
w
r
i
a
p
h
s
i
l
b
a
t
s
e
o
t
y
t
i
l
i
b
a
b
o
r
P
s
y
e
k
1.2
1
0.8
0.6
0.4
0.2
0
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Fraction of compromised nodes
n
e
e
w
t
e
b
s
k
n
i
l
i
d
e
s
m
o
r
p
m
o
c
f
o
n
o
i
t
c
a
r
F
i
s
r
o
s
n
e
s
d
e
s
m
o
r
p
m
o
c
-
n
o
n
(a) Fraction of compromised links between non-
compromised sensors v.s. number of compromised sen-
sor nodes. Assume each sensor has available storage
equivalent to 200 keys.
(b) Probability to establish a pairwise key v.s. the frac-
tion of compromised nodes
Figure 5: Performance of the grid-based key predistribution scheme under attacks
integer on the same platform. Similarly, reduction of the later prod-
uct (which is an 80-bit integer) modulo a 64-bit prime is also about
75% cheaper than the former product (which is a 128-bit integer).
Considering the lack of division instruction in typical sensor pro-
cessors, we further propose to use q(cid:1)
in the form of q(cid:1)
= 2k + 1.
Because of the special form of q(cid:1)
= 216 + 1, no division oper-
ation is needed to compute modular multiplications in Fq(cid:1) [14].
Two natural choices of such prime numbers are 257 = 28 + 1
and 65, 537 = 216 + 1. Using the random subset assignment
scheme, they can accommodate up to 256 and 65,536 sensors, re-
spectively. Using the grid-based scheme, they can accommodate
up to 2562 = 65, 536 and 65, 5362 = 4, 294, 967, 296 sensors,
respectively.
To make full advantage of the special form of q(cid:1)
, we propose to
adapt the basic polynomial-based key predistribution in Section 2
so that a large key is split into pieces and each piece is distributed
to sensors with a polynomial over Fq(cid:1) . The same technique can
be easily applied to all polynomial pool-based schemes with slight
modiﬁcation.
Assume each cryptographic key is n bits. The setup server di-
vides the n-bit key into r pieces of l-bit segments, where l =
(cid:19)log2 q(cid:1)(cid:20) and r = (cid:10) n
(cid:12). For simplicity, we assume n = l · r.
The setup server randomly generates r t-degree bivariate polyno-
mials {fv(x, y)}v=1,··· ,r over Fq(cid:1) such that fv(x, y) = fv(y, x)
for v = 1,· ·· , r. The setup server then gives the correspond-
ing polynomial shares on these r polynomials to each sensor node.
Speciﬁcally, each sensor node i receives {fv(i, x)}v=1,··· ,r. With
the basic scheme, each of these r polynomials can be used to es-
tablish a common secret between a pair of sensors. These sensors
then choose the l least signiﬁcant bits of each secret value as a key
segment. The ﬁnal pairwise key can simply be the concatenation of
these r key segments.
l
It is easy to verify that this method requires the same number
of word multiplications as the earlier one; however, because of the
special form of q(cid:1)
, no division operation is necessary in evaluating
the polynomials. This can signiﬁcantly reduce the computation on
processors that do not provide division instruction.
The security of this scheme is guaranteed by Lemma 1.
LEMMA 1. In the adapted key predistribution scheme, the en-
tropy of the key for a coalition of no more than t other sensor nodes
is r · [log2 q(cid:1) − (2 − 2l+1
q(cid:1) )], where l = (cid:19)log2 q(cid:1)(cid:20) and r = (cid:10) n
(cid:12).
l
Consider a 64-bit key. If we choose q(cid:1)
= 216 + 1, the entropy
of a pairwise key for a coalition of no more than t compromised
sensor nodes is 4× [log2(216 + 1)− (2− 217
216+1 )] = 63.9997 bits.
= 28 + 1, this entropy is then 8 × [log2(28 + 1) −
If we choose q(cid:1)
(2− 29
28+1 )] = 63.983 bits. Thus, the adapted scheme still provides
sufﬁcient security despite of the minor leak of information.
7. RELATED WORK
Our schemes are based on the polynomial-based key predistribu-
tion protocol in [2]. The protocol in [2] was intended to distribute
group keys, and is generally not feasible in sensor networks. Our
schemes only use the two-party case of this protocol; by enhancing
the basic polynomial-based scheme with other techniques such as
polynomial pool, our schemes can achieve performance beyond the
basic protocol.
Eschenauer and Gligor [5] proposed a probabilistic key predistri-
bution technique to bootstrap the initial trust between sensor nodes.
The main idea is to have each sensor randomly pick a set of keys
from a key pool before deployment. Then, in order to establish a
pairwise key, two sensor nodes only need to identify the common
keys that they share. Chan et al. further extended this idea and pro-
pose the q-composite key predistribution [4]. This approach allows
two sensors to setup a pairwise key only when they share at least q
common keys. Chan et al. also developed a random pairwise keys
scheme to defeat node capture attacks. In our analysis in earlier
Sections, we have demonstrated that our techniques are superior to
these schemes.
There are many other related works in sensor network security.
Stajano and Anderson discussed bootstrapping trust between de-
vices through location limited channels such as physical contact
[13]. Carman, Kruus, and Matt studied the performance of a num-
ber of key management approaches in sensor network on different
hardware platform [3]. Wong and Chan proposed to reduce the
computational overhead for key exchange in low power comput-
ing device with the help of a more power server [15]. Perrig et
al. developed a security architecture for sensor networks, which
includes SNEP, a security primitive building block, and µTESLA
[12], an adaption of TESLA [10, 11]. In our previous work, we
proposed a multi-level key chain method for the initial commit-
ment distribution in µTESLA [9]. Basagni et al. presented a key
management scheme to secure the communication by periodically
updating the symmetric keys shared by all sensor nodes [1]. How-
ever, this scheme assumes a tamper-resistant device to protect the
key, which is not always available in sensor networks. Wood and
Stankovic identiﬁed a number of DOS attacks in sensor networks
[16]. Karlof and Wagner pointed out security goals for routing
in sensor networks and analyzed the vulnerabilities as well as the
countermeasures for a number of existing routing protocols [7].
8. CONCLUSIONS AND FUTURE WORK
In this paper, we developed a general framework for polyno-
mial pool-based pairwise key predistribution in sensor networks
based on the basic polynomial-based key predistribution in [2].
This framework allows study of multiple instantiations of possi-
ble pairwise key establishment schemes. As two of the possible
instantiations, we developed the key predistribution scheme based
on random subset assignment, and the grid-based key predistribu-
tion scheme. Our analysis of these schemes demonstrated that both
schemes are superior to the existing approaches.
Several directions are worth pursuing in our future research. First,
the grid-based scheme can be easily extended to a n-dimensional
or hypercube based scheme. We would like to further investigate
properties of such extensions and compare them with the existing
techniques. Second, we observe that sensor nodes have low mo-
bility in many applications. Thus, it may be desirable to develop
location based schemes so that the nodes that can directly establish
a pairwise key are arranged to be close to each other.
Acknowledgment We would like to thank Julie M. Starr for proof-
reading the paper. We would also like to thank the anonymous re-
viewers for their valuable comments.
9. REFERENCES
[1] S. Basagni, K. Herrin, D. Bruschi, and E. Rosti. Secure
pebblenets. In Proc. of ACM Int’l Symp. on Mobile ad hoc
networking and computing, pages 156–163, 2001.
[2] C. Blundo, A. De Santis, A. Herzberg, S. Kutten, U. Vaccaro,
and M. Yung. Perfectly-secure key distribution for dynamic
conferences. In Advances in Cryptology – CRYPTO ’92,
LNCS 740, pages 471–486, 1993.
[3] D.W. Carman, P.S. Kruus, and B.J.Matt. Constrains and
approaches for distributed sensor network security. Technical
report, NAI Labs, 2000.
[4] H. Chan, A. Perrig, and D. Song. Random key
predistribution schemes for sensor networks. In IEEE
Symposium on Research in Security and Privacy, 2003.
[5] L. Eschenauer and V. D. Gligor. A key-management scheme
for distributed sensor networks. In Proc. of the 9th ACM
Conf. on Computer and Communications Security, pages
41–47, November 2002.
[6] O. Goldreich, S. Goldwasser, and S. Micali. How to
construct random functions. J. of the ACM, 33(4):792–807,
October 1986.
[7] C. Karlof and D. Wagner. Secure routing in wireless sensor
networks: Attacks and countermeasures. In First IEEE Int’l
Workshop on Sensor Network Protocols and Applications,
May 2003.
[8] D.E. Knuth. The Art of Computer Programming, volume Vol.
2: Seminumerical Algorithms. Addison-Wesley, third
edition, 1997. ISBN: 0-201-89684-2.
[9] D. Liu and P. Ning. Efﬁcient distribution of key chain
commitments for broadcast authentication in distributed
sensor networks. In Proc. of the 10th Annual Network and
Distributed System Security Symposium, pages 263–276,
February 2003.
[10] A. Perrig, R. Canetti, D. Song, and D. Tygar. Efﬁcient
authentication and signing of multicast streams over lossy
channels. In Proc. of IEEE Security and Privacy Symposium,
May 2000.
[11] A. Perrig, R. Canetti, D. Song, and D. Tygar. Efﬁcient and
secure source authentication for multicast. In Proc. of
Network and Distributed System Security Symposium,
February 2001.
[12] A. Perrig, R. Szewczyk, V. Wen, D. Culler, and J.D. Tygar.
Spins: Security protocols for sensor networks. In Proc. of
Seventh Annual Int’l Conf. on Mobile Computing and
Networks, July 2001.
[13] F. Stajano and R. Anderson. The resurrecting duckling:
security issues for ad hoc networks. In Proc. of 7th Int’l
Workshop on Security Protocols, pages 172–194, 1999.
[14] W. Stallings. Cryptography and Network Security:
Principles and Practice. Prentice Hall, 2nd edition, 1999.
[15] D. Wong and A. Chan. Efﬁcient and mutually authenticated
key exchange for low power computing devices. In Proc.
ASIACRYPT 2001., December 2001.
[16] A. D. Wood and J. A. Stankovic. Denial of service in sensor
networks. IEEE Computer, 35(10):54–62, October 2002.
APPENDIX
A. PROOF OF LEMMA 1
Assume that nodes u and v need to establish a pairwise key. Con-
sider a coalition of no more than t other sensor nodes that tries to
determine this pairwise key. According to the security proof of the
basic key predistribution scheme [2], the entropy of the shared se-
cret derived with any polynomial is log q(cid:1)
for the coalition. That
is, any value from the ﬁnite ﬁeld Fq(cid:1) is a possible value of each of
{fj (u, v)}j=1,...,r for the coalition. Since each piece of key con-
sists of the last l = (cid:19)log2 q(cid:1)(cid:20) bits of one of the above values, values
from 0 to q(cid:1) − 2l − 1 have the probability 2
q(cid:1) to be chosen, while
the values from q(cid:1) − 2l to 2l − 1 have the probability 1
to be
q(cid:1)
chosen. Denote all the information that the coalition knows as C.
Thus, for the coalition, the entropy of each piece of key segment
Kj, j = 1, ··· , r, is
H(Kj|C) =
q(cid:1)−2l−1X
i=0
2
q(cid:1) log2
q(cid:1)
2
+
2l−1X
1
q(cid:1) log2 q(cid:1)
i=q(cid:1)−2l
2l+1 − q(cid:1)
+
q(cid:1)
log2 q(cid:1)
=
q(cid:1)
log2
2(q(cid:1) − 2l)
q(cid:1)
2
= log2 q(cid:1) − (2 − 2l+1
q(cid:1) )
Since the r key segments are distributed individually and inde-
pendently, the entropy of the pairwise key for the coalition is
H(Kj|·) = r · [log2 q(cid:1) − (2 − 2l+1
H(K|C) =
rX
q(cid:1) )].
j=1