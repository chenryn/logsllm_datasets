title:Solver-Aided Constant-Time Hardware Verification
author:Klaus von Gleissenthall and
Rami G&quot;okhan Kici and
Deian Stefan and
Ranjit Jhala
Solver-Aided Constant-Time Hardware Verification
Klaus v. Gleissenthall
Vrije Universiteit Amsterdam
University of California, San Diego
The Netherlands
Deian Stefan
USA
Rami Gökhan Kıcı
University of California, San Diego
USA
University of California, San Diego
Ranjit Jhala
USA
ABSTRACT
We present Xenon, a solver-aided, interactive method for formally
verifying that Verilog hardware executes in constant-time. Xenon
scales to realistic hardware designs by drastically reducing the
effort needed to localize the root cause of verification failures via
a new notion of constant-time counterexamples, which Xenon
uses to synthesize a minimal set of secrecy assumptions in an
interactive verification loop. To reduce verification time Xenon
exploits modularity in Verilog code via module summaries, thereby
avoiding duplicate work across multiple module instantiations. We
show how Xenon’s assumption synthesis and summaries enable us
to verify different kinds of circuits, including a highly modular AES-
256 implementation where modularity cuts verification from six
hours to under three seconds, and the ScarVside-channel hardened
RISC-V micro-controller whose size exceeds previously verified
designs by an order of magnitude. In a small study, we also find
that Xenon helps non-expert users complete verification tasks
correctly and faster than previous state-of-art tools.
CCS CONCEPTS
• Security and privacy → Side-channel analysis and counter-
measures; Logic and verification.
KEYWORDS
constant-time; side-channels; hardware; verification;
ACM Reference Format:
Klaus v. Gleissenthall, Rami Gökhan Kıcı, Deian Stefan, and Ranjit Jhala.
2021. Solver-Aided Constant-Time Hardware Verification. In Proceedings of
the 2021 ACM SIGSAC Conference on Computer and Communications Security 
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New 
York, NY, USA, 16 pages. https://doi.org/10.1145/3460120.3484810
1 
Timing side-channel attacks are no longer theoretical curiosities.
Over the last two decades, they have been used to break imple-
mentations of cryptographic primitives ranging from public-key
encryption algorithms [26, 62, 88], to block ciphers [23, 71], digital
signature schemes [70], zero-knowledge proofs [35], and pseudo-
random generators [33]. This, in turn, has allowed attackers to
INTRODUCTION
This work is licensed under a Creative Commons Attribution International 4.0 
License.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3484810
break systems that rely on these primitives for security—for exam-
ple, to steal TLS keys used to encrypt web traffic [26, 33, 88], to
snoop and forge virtual private network traffic [70], and to extract
information from trusted execution environments [25, 33, 35, 87].
The gold standard for preventing timing side-channel attacks is
to follow a discipline of constant-time or data-oblivious program-
ming [1, 15, 22, 29, 36, 89]. At its core, this discipline ensures that
(1) secret data is not used as an operand to variable-time instruc-
tions (e.g., floating-point operations like division [19, 20, 63, 75])
and (2) the program’s control flow and memory access patterns do
not depend on secrets. But for the constant-time discipline to be
effective, it is crucial that the constant-time property be preserved
by the underlying hardware. For example, an instruction that is
deemed constant-time needs to indeed produce its outputs after
the same number of clock cycles, irrespective of operands or in-
ternal state. Similarly, given that control-flow and memory access
patterns are public, i.e., free of secrets, a CPU’s timing must indeed
be secret-independent.
Unfortunately, simply assuming that hardware preserves constant-
time doesn’t work. Incorrect assumptions about the timing-variability
of floating-point instructions, for example, allowed attackers to
break the differentially private Fuzz database [56]. Attempts to
address these attacks (e.g., [76]) were also foiled: they relied on
yet other incorrect microarchitectural assumptions (e.g., about the
timing-variability of SIMD instructions) [63]. Yet more recently,
hardware crypto co-processors (e.g., Intel and STMicroelectron-
ics’s trusted platform modules) turned out to exhibit similar secret-
dependent timing variability [70].
A promising path towards eliminating such attacks is to formally
verify that our hardware preserves the constant-time property of the
software it is executing. Such verification efforts, however, require
tool support. Unfortunately, unlike software verification of constant-
time, which has had a long history [21], constant-time hardware
verification is still in its infancy [28, 50, 53, 89]. As a result, existing
verification approaches fail to scale to realistic hardware. This is
because of two fundamental reasons. First, existing tools do not
help when verification fails—and inevitably it does fail: hardware
circuits only preserve constant-time execution under very specific
secrecy assumptions that describe which port and wire values are
public or secret. In our experience, dealing with failures takes up
most of the verification time. With tools like Iodine [50], you must
manually determine whether the circuit is leaky (i.e., variable-time),
or whether it is missing additional secrecy assumptions that the tool
needs to be made aware of. Second, current methods fail to exploit
the modularity that is already explicit at the register transfer level.
Hence, they duplicate verification effort across replicated modules
which leads to a blow up in verification time.
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea429In this paper, we present Xenon, a solver-aided, interactive
method for formally verifying that Verilog hardware executes
in constant-time. We develop Xenon via five contributions.
1. Counterexamples. To help users understand verification fail-
ures, we introduce the notion of constant-time counterexamples
(§ 4.1). A counterexample highlights the earliest point in the circuit
where timing variability is introduced; this simplifies the task of
understanding whether a circuit is variable-time by narrowing the
user’s attention to the root cause of the verification failure (and
thereby a small fraction of the circuit). To compute counterexam-
ples, Xenon leverages information extracted from the failed proof
attempt. In particular, the solver communicates (1) which variables
(i.e., registers and wires) remained constant-time during the failed
proof attempt, and (2) the order in which the remaining variables
became non-constant time. This allows Xenon to break cyclic data-
dependencies which cause a chicken-and-egg problem that is hard
to resolve when assigning blame manually.
2. Assumption Synthesis. To help the user resolve the verification
failure, Xenon uses the counterexample to synthesize a suggested
fix. For example, Xenon may find a constant-time counterexample
for a processor pipeline where the two different runs may execute
two different ISA instructions (say, addition and division) which
take different numbers of clock cycles. Yet, the execution of each
instruction (for any inputs) may be constant-time. Xenon uses the
counterexample to synthesize a minimal candidate set of secrecy
assumptions (e.g., that any two executions have the same, publicly
visible sequence of instructions) which address the root cause of
the verification failure (§ 4.2). The user then decides either to accept
the candidate assumption or, if they do not match their intuition for
the intended usage of the circuit, reject them, in which case Xenon
computes an alternative. Internally, Xenon computes candidate
assumptions via a reduction to integer linear programming [73].
3. Modular Verification. Finally, to scale verification and coun-
terexample generation to larger and more complex hardware, and
to keep counterexamples and suggested assumptions local, we in-
troduce a notion of module summaries (§ 3). Module summaries
succinctly capture the timing properties of a module’s input and
output ports at a given usage site. By abstracting inessential details
about the exact computations performed by the module and focus-
ing solely on its timing behavior, Xenon produces fewer and more
compact constraints. Our modular verification approach also allows
the user to focus attention on one module at a time, which keeps
errors and assumptions local, and helps to bootstrap the verification
of large circuits (§ 7).
4. Evaluation. We implement Xenon and evaluate the impact of
counterexamples, assumption synthesis, and modularity on the ver-
ification of different kinds of hardware modules (§ 6). We find that
Xenon’s solver-aided interactive verification process drastically
reduces verification effort (e.g., verifying the largest benchmark of
[50] took us several minutes instead of multiple days) and, together
with module summaries, allows us to scales verification to realistic
hardware (e.g., we verify the SCARV side-channel hardened RISC-V
core [4], which is order of magnitude larger than the RISC-V cores
verified by previous state-of-the-art tools). From a small (ten per-
son) user study, in which users were tasked with verifying three
circuits (an ALU, an FPU, and a full RISC core), we find that Xenon
1
2
3
4
5
6
7
8
9
10
module S ( clk , in , out );
input clk ; [7:0] in ;
output reg [7:0] out ;
always @ ( posedge clk )
case ( in )
8' h00 : out <= 8' h63 ;
...
8' hff : out <= 8' h2c ;
endcase
endmodule
Figure 1: A simple, constant-time lookup-table in Verilog, taken
from [10].
has large (𝑑 = 1.62), statistically significant (𝑡(8) = 2.56, 𝑝 = .016)
positive effect on correct completion: Participants using Xenon
were able to correctly complete significantly more tasks in the
allotted time (40 min), and their solution sizes were (on average)
smaller. On the most challenging task—a full RISC-V processor with
a complex assumption set—no participant in the control-group suc-
ceeded, whereas 60% of the participants using Xenon were able to
successfully complete the verification task.
6. Secrecy Assumptions. As a side product of the verification of
SCARV, we obtain a set of annotations (§ 7) detailing secrecy
assumptions under which SCARV is guaranteed to execute in
constant-time. These secrecy assumptions, together with Xenon’s
source code are open source and available on GitHub1. We hope that
these artifacts will facilitate further efforts to provide end-to-end
constant-time guarantees across hardware and software.
2 OVERVIEW
We start by reviewing how to specify and verify the absence of
timing channels in Verilog hardware designs (§ 2.1), show how
existing techniques fail to scale on real-world hardware designs, as
these designs are often only constant-time under additional secrecy
assumptions which are tedious to derive by hand (§ 2.2), sketch
how Xenon helps to find secrecy assumptions automatically (§ 2.3),
and finally discuss how Xenon exploits modularity (§ 2.4).
2.1 Verifying Constant-Time Execution of
Hardware
Lookup Circuit. Figure 1 shows the code for a Verilog module,
which implements a lookup table by case-splitting over the 8-bit
input value. This module executes in constant-time: even if input
in contains a secret value, producing output out takes the same
amount of time (one clock cycle), irrespective of the value of in,
and therefore an attacker cannot make any inference about the
value of in by observing the timing of the computation.
Specifying Constant-Time Execution. Figure 2 makes this in-
tuition more precise, using a recent definition of constant-time
execution for hardware [50]. Instead of tracking timing indirectly
through information flow [66, 82, 91] the definition uses a direct
notion of timing. The figure shows two runs of module 𝑆: one for
input 8'h00 and one for input 8'hff. We want to track how long it
takes for the two inputs, issued at cycle 1 to pass through the circuit
1https://xenon.programming.systems
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea430time
1
2
out
in
L
h00
h00
R
hff
hff
L
X
h63
R
X
h2c
in•
L
⋆
•
out•
R
•
⋆
R
⋆
•
L
•
⋆
Figure 2: Two runs of Figure 1 showing values and liveness-bits for
input (in) and output (out). X represents an undefined value.
and produce their respective outputs. For this, we put a “tracer”
on the inputs by assigning a liveness-bit to each register. For some
register x, we set its liveness-bit x• to ⋆, if x has been influenced
by the input at initial cycle 1 (we say x is 1-live) and •, otherwise.
Figure 2 shows how liveness-bits are propagated through the circuit.
Initially, in both executions, the input is 1-live and the output is
not. In cycle 2, both outputs 1-live due to the case-split on the value
of in. Assuming that an attacker can observe the liveness-bits of
all outputs, here, register out, the attacker cannot distinguish the
two executions, and we can conclude that the pair of executions is
indeed constant-time.
Verifying Constant-Time Execution. To show constant-time ex-
ecution, not only for the two runs in Figure 2, but for the whole
circuit, we have to prove that for any pair of runs, that is, for any
pair of inputs, and any initial cycle, the constant-time property
holds. This can be achieved by constructing a product circuit [50]2
whose runs correspond to pairs of runs—called left and right—of
the original circuit. In this product, each original variable x has
two copies x𝐿 and x𝑅 that hold the values of x in the left and right
runs, respectively. We can then use the product circuit to synthesize
invariant properties of the circuit. For example, let’s define that a
variable x is constant time (and write 𝑐𝑡(x)), if for any pair of exe-
cutions, its liveness-bit in the left execution x•
𝐿 is always the same
𝑅, i.e., 𝑥•
as its liveness-bit in the right execution x•
𝑅 always
holds, for all initial cycles 𝑡. Then, the following invariant on the
module proves constant-time execution, under the condition, that
module inputs are constant-time: 𝑐𝑡(in) ⇒ 𝑐𝑡(out).
2.2 Real-World Hardware is Not
𝐿 = 𝑥•
Constant-Time
Unfortunately, unlike the simple lookup table from Figure 1, real-
world circuits are typically not constant-time, in an absolute sense.
Instead, when carefully designed, they are constant-time under
specific secrecy assumptions detailing which circuit inputs are sup-
posed to be public (visible to the attacker) or secret (unknown to the
attacker). Thus, verification requires the user to painstakingly dis-
cover secrecy assumptions through manual code inspection, which
can be prohibitively difficult in real-world circuits.
A Pipelined MIPS Processor. We illustrate the importance of se-
crecy assumptions using the program in Figure 3 which shows
a code-fragment taken from one of our benchmarks—a simple,
pipelined MIPS processor [9]. If the reset bit rst is set (Line 18),
the processor sets several registers to zero (Line 19). Otherwise, the
processor checks whether the pipeline is stalled (Line 21) and either
forwards the current instruction from the instruction-fetch stage
2In architecture, this is often referred to as miter circuit [43].
1
2
3
4
5
6
7
8
9
10
11
12
13