1
0
0
Recovered
0
4
10
10
14
3
5
7
2 (deadlock)
2 (deadlock)
8
2
Unknown
Uknown
Attacks
Overall impact
AT-1
AT-1, AT-2.1
AT-1, AT2.1,
AT-2.2, AT-3
AT-1, AT2.1,
AT-2.2, AT-3
AT2.1, AT-2.2,
AT-2.3
None
Low
Latency surge
High (service failure)
Severe
Table 3: Impacted services and datastores in ODL and ONOS
(C: configuration, O: operation, M: management).
Controller
ODL
ONOS
Service
LearningSwitch
TopologyManager
HostTracker
DLUX UI
MD-SAL (core)
SwitchManager
RESTCONF
SALFlowManager
SwitchManager
FlowAnalyzer
ReactiveForwarder
LinkManager
HostMobility
Datastore
O
C/O
O
C/O
C/O/M
O
C/O
C/O
O
C/O
C
C/O
O
Result
event miss
exceptions
event miss
deadlock
crash
posioned
latency
misconfig
poisoned
event miss
misconfig
latency
event miss
the configuration datastore. The results of these experiments are
elaborated in Table 2. Due to blurred responsibility, the expired
configuration (flow rules with timeouts) is never deleted by services
running inside the controller even after the expiration of timeout
values. The communicating entity outside of the controller believes
that the timeout value has a purpose which will be respected—the
configuration will be cleared from the network (and operational
datastore) and the controller (configuration datastore).
AT-2.1 (Service crash): Before we could notice an impact on the
availability of the controller, critical services (eg., flow programmer)
of both ODL and ONOS were impacted as shown in Table 3. The
repeated experiments on ODL are shown in Table 2, the tracked
services faced deadlock, exceptions and crash. Some of these services
could recover, other services (eg., clustering and UI) remained dead.
AT-2.2 (Southbound latency surge): As the amount of flows
stored in the datastore kept increasing, the time required for ser-
vices to query valid flows (flow programmer) and push them to
network degraded. Surge in latency to learn the events from the
network had a logical impact on dependent services.
AT-2.3 (Controller shutdown): The blurred responsibility leads
to information to accumulate within the controller. SDN controllers
such as OpenDayLight, which run inside a Java virtual environ-
ment, depend on the configured JVM memory. If an application is
allowed to send unchecked amount of configurations, theoretically,
every controller will run out of memory eventually. The MD-SAL
service which is a kernel of the OpenDayLight controller ran out of
memory to maintain the running state of the controller and even-
tually crashed causing the shutdown as shown in Figure 5b (error
message shown in Listing 5c).
Figure 6: Configuration poisoning attack: an attacker com-
promises the flow table and establishes a hacked loop to in-
definitely allow communication in the network.
AT-3 (Unused Configuration): The NMDA design allows SDN
controllers to store the configuration for nodes which are absent
from the network. SDN-fuzzer could install configurations for
switches that were not active in the network.Although this is as
per the design requirement of NMDA [31], the feature gives an
advantage to the attacker to degrade the performance of the con-
troller without impacting the network and successfully hiding the
malicious behavior by the traffic monitoring service.
5.2 Attacks on Integrity
Most of the information that is placed into the configuration datas-
tore is for programming the network, therefore manipulating the
configuration datastore information leads to a direct impact on the
network. The consistency and accuracy of the information that is
stored in the datastores and passed to the network can be manipu-
lated using two communication channels with SDN controller:
• Northbound attack: Applications and users install configu-
ration in the configuration datastore, which are later prop-
agated to the network. The details of how and when this
information is propagated are security-critical. If the config-
uration is installed in the network at the time not primarily
intended by the administrator, unauthorized and undesired
traffic may be allowed in the network.
• Southbound attack: Services in the SDN controller register
listeners for events that happen in the forwarding plane.
7
Flow table (init)A –> B DENYAPP1jFlow table (configured)A –> B ALLOW 30sFlow table (runtime-1)A –> B ALLOW 1sFlow table (runtime-2)A –> B DENYFlow table (reset)A –> B ALLOW 30sAPP3CONTROLLERAPP2lnokmConfigurationalOperationalABjln6oLegendHacked loopIdeal casePotential attack zonesAccepted submission #476 to ACM CCS 2018 (PREPRINT, NOT FINAL)
Changes are updated in the operational store which trigger
desired (or spoofed) actions from the registered services.
AT-4 (Advance Persistent Threat): As illustrated in Figure 6,
we base the APT attack on the design flaw to retain information
even after its expiration.
As part of the root cause analysis of detected policy conflict, we
discovered that one of the switches in our network had dropped
off of the network, then re-spawned automatically as the TCP/IP
connection channel between the switch and controller was reestab-
lished. When the flow programmer service inside the controller
detects such an event, it checks where there is existing configu-
ration data for the new node. Because the service find a stored
configuration for the node in the configuration datastore, it was
restored as part of a process called node reconciliation. With this
process, the otherwise-expired configuration was re-installed in the
network as part of reconciliation, and its time-to-live was reset to
the originally-configured amount as opposed to the amount it was
at when the switch disconnected.
We regularly monitored the traffic against the policies defined
by the fuzzer and found that the communication that was intended
to take place in the past had suddenly started again.
This attack is carried out as follows: 1 A switch initiates a
connection with the controller and is configured with the default
forwarding rules. 2 An application installs the network flow con-
figurations with timeouts. 3 The flow programmer service installs
this configuration because it does not cause any direct policy vi-
olation. 2 The application persistently installs similar configura-
tions in the network for the switches which physically exist in
the network. 5 At any point in the future when there is a switch
reconnection procedure (forced [19, 21] or natural), 6 the existing
configuration (which includes the expired configuration) will be
installed in the switch.
Since the configuration datastore holds the original (configuration-
level time-to-live, rather than the actual remaining operation-level
one, the TTL was reset to its full value. In effect, this allows flow
rules in the network to persist beyond their original expiration time,
thus allowing communication between hosts that should otherwise
be unable to communicate.
Interestingly, switch disconnections from the controller can be
natural or forced. For example, forced disconnections can be ini-
tiated by attacking the network time protocol (NTP) [19, 21], or
through the triggering of DoS vulnerabilities in a switch itself. This
means that in addition to being caused by accidental switch dis-
connections, this issue can be triggered by an adversarial agent to
retain access to network resources that should otherwise time out.
AT-4.1 (Switch Table Overflow): SDN controllers are required
to store the entire network’s configuration and therefore may pos-
sess massive storage capacity. However, OpenFlow switches have
limited storage capacity, and as part of the reconnection procedure,
when a switch’s flow tables receive too many flow rules (everything
since the beginning of time), the flow table’s upper bound can be
easily reached, and a table overflow attack is eventually realized.
AT-4.2 (Infinite Access): Since the flawed reconciliation pro-
cess installs configuration data which is not necessarily intended at
the time of installation, an OpenFlow switch being reconciled may
allow unintended traffic or block allowed traffic. When this attack
8
Figure 7: OpenFlow rule format.
Poisoned flow statistics
·104
benign packets
malicious packets
benign payload
malicious payload
beginning of attack
1
0.8
0.6
0.4
0.2
d
n
o
c
e
s
r
e
p
s
e
t
y
B
0
0
5
5
10
10
15
15
25
25
30
20
20
30
Time [sec]
35
35
40
40
45
45
500
50
d
e
h
c
t
a
m
s
t
e
k
c
a
P
90
80
70
60
50
40
30
20
10
0
(a) Packets and payload statistics for benign and malicious traffic.
(b) Reseting of rule and poisoning of statistics.
Figure 8: Poisoned statistics during rule reset.
is carefully crafted, an application needs to configure the network
just once and then force the controller to configure the switch in a
loop 5 – 6 – 5 .
The reconnection workflow is initiated at a regular interval, just
before the rule expiry (when timeout in Figure 7 is expiring). Thus,
the switch always retains the rule for the ongoing (malicious) flow.
This circumvents the OpenFlow policy (switch should send the first
packet of an unknown flow to the controller for taking decision)
and allows the traffic between two hosts in the network for an
indefinite period.
As shown in Figure 6, both switch and hosts can be potential
trigger zones for these attacks.
AT-4.3 (QoS Poisoning): OpenFlow rules support metering and
statistics (as a field in Figure 7) for network monitoring and Quality
of Service (QoS) purposes. A side-effect of AT-4 is the potential to
poison these statistics. As shown in Figure 8b, a reset (expired) flow
rule resets not only the timers (used in AT-4.2) but also the counters
that are assigned to each flow rule. For example, a flow rule with
timeout 25 seconds is installed in a switch to allow communication
between two connected hosts (10.0.0.1, 10.0.0.2). After the benign
MatchActionStatisticsTime-outPriorityNo. of packets matched by ruleIdle/Hard timer for rule deletionFlow packet headers to matchAction on matched packetProcessing order of rulesrc:10.0.0.1dst:10.0.0.2allowpacket count: 33flowcount: 1byte count: 1532hard-timeout:25sduration: 24spriority:100src:10.0.0.1dst:10.0.0.2allowpacket count: 28flowcount: 1byte count: 10465hard-timeout:25sduration:24spriority:100Accepted submission #476 to ACM CCS 2018 (PREPRINT, NOT FINAL)
Table 4: Attack analysis.
Attack
Origin
Impacted
datastore
Affected
assets
AT-1
AT-2
AT-3
AT-4
AT-5
AT-6
2.1
2.2
2.3
4.1
4.2
4.3
APP
C
APP
C
APP / NW C
APP / NW C/O/M
APP
APP/NW
APP/NW
APP/NW
APP/NW
APP
C/M
C/O
C/O
C/O
O
M
flow-manager
north channel
controller-core
general impact
south channel
controller-core
config datastore
nw-hardware
firewall
load-balancer
host-tracker
AAA, ACL
CIA
I
×
✓
×
✓