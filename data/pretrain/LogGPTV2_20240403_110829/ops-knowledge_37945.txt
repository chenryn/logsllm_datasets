User: How to deploy a web application, such as a Flask application, on Linux?
Assistant: Here are the steps to deploy a Flask application on Linux: Step 1: Get the Flask application code First, copy the code of the Flask application to a Linux server. You can use Git to clone the code onto the server, or compress the code into a zip file and upload it to the server. Step 2: Install the necessary packages Make sure the necessary packages such as Python, pip and virtualenv are installed on the server. It can be installed using the following commands (some commands may vary slightly depending on the Linux distribution): Ubuntu/Debian: ``` sudo apt-get update sudo apt-get install python3-pip python3-venv ``` CentOS/ RHEL: ``` sudo yum update sudo yum install python3-pip python3-devel ``` Step 3: Create a virtual environment In the Flask application directory, create a virtual environment: ``` python3 -m venv venv ``` the command A virtual environment named venv will be created and the Python interpreter within it will be pointed to Python3. The following command can be used to activate the virtual environment: ``` source venv/bin/activate ``` Step 4: Install Flask and other dependencies After activating the virtual environment, you can use pip to install Flask and its dependencies: ``` pip install flask gunicorn ``` Flask is the web framework, and gunicorn is a WSGI server that can be used to run Flask applications. Step 5: Test the application to ensure that the application can run locally. Start the application by entering the following command in the Flask application directory: ``` export FLASK_APP=app.py flask run ``` The application will run on port 5000 on localhost. Type localhost:5000 in your browser and you should be able to see the welcome page of the application. Step 6: Run the application with gunicorn When deploying the application to the production server, it should be run with gunicorn. You can use the following command to start the gunicorn server on port 8000: ``` gunicorn app:app -b 0.0.0.0:8000 ``` where app:app means to start the Flask application named app, and the -b parameter specifies the binding address. Step 7: Configure Nginx For production deployment, it is best to use Nginx as a reverse proxy server. Configure Nginx to redirect traffic from HTTP port (80) to port 8000 on the gunicorn server (here our gunicorn listens to port 8000), as follows: ``` server { listen 80; server_name example.com; location / { proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; client_body_buffer_size 128k; } } ``` Step 8: Restart the service Once you've finished configuring, restart the Nginx server: ``` sudo systemctl restart nginx ``` Applications using your domain name service are now accessible in your browser.