a way that multiple authorities have to combine their
shares in order to use it. Homomorphic encryption is
the approach we followed for the A system. A great
advantage of this approach is that voters may openly au-
thenticate themselves to the voting servers, i.e., there is
no need for any anonymous channel to ensure voter pri-
vacy.
Two known implementations of this approach can be
found in the form of projects based in the European
Union: (i) The CyberVote project [2], funded by the
European Commission, has developed a prototype sys-
tem. The system is designed to run over the Internet, and
clients can use Java-enabled mobile phones, pocket PCs,
and PCs. Currently, there is no source code available for
CyberVote, nor is there any downloadable software at
all. (ii) E-Vote [21] is another EU-funded project that
was tested in Greece in 2003. The system is based on
Paillier homomorphic encryption [16]. No public im-
plementation of the system is available and the project
appears to be commercially oriented.
Blind signature-based schemes. Blind signature-based
schemes use a method proposed by Fujioka, Okamoto,
and Ohta [19]. In this scheme, voters obtain a blind sig-
nature on their ballot from an administrator. That is, the
administrator signs the ballot without being able to read
its contents. Subsequently, voters submit their blindly
signed ballots through an anonymous channel to a vot-
ing bulletin board that will only accept ballots signed by
the administrator. The main advantage of the blind sig-
nature approach is that it removes the requirement for
the anonymous channel to be robust. Its main disadvan-
tage is that the voter needs to be active in at least two
phases to ensure veriﬁability—it is not a “vote-and-go”
voting scheme. From an implementation point of view,
realizing an anonymous channel is not straightforward.
In the known implementations we considered, it is easy
to correlate voters with their votes (or, in any case, there
is at most a single point of failure for anonymity).
Known implementations of blind-signature based
schemes: (i) Sensus [15] is a direct implementation of
the Fujioka et al. scheme. Source code for Sensus is
available, but it is released under a proprietary license.
The software is no longer maintained, and the author
claims that the current implementation is “clunky and
won’t scale” [7]. (ii) EVOX is another implementation
based on the Fujioka et al. scheme. The ﬁrst version is
described by Herschberg in his Master’s thesis [23], and
the second version by DuRette in his Bachelor’s thesis
[17]. EVOX does not currently have any source code or
downloadable software available. (iii) REVS [25] fol-
lows the design of the second revision of EVOX. There
is currently no downloadable software for REVS, but the
authors have said packages will be available soon [40].
(iv) The Votopia project [28], created jointly by Korean
and Japanese developers, was tested in the election of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006the MVP in the Soccer World Cup of 2002. In the Vo-
topia system, users download a Java applet which per-
forms cryptographic operations. A PKI is used to dis-
tribute key pairs for each server. Votopia is not publicly
available and does not provide anonymity.
Other methods. There exist other implementations not
based on voting-oriented cryptographic primitives. We
now review them brieﬂy.
The Diebold AccuVote-TS system is one of the most
heavily criticized non-Internet-based electronic voting
systems used in practice [29]. Problems pointed out in-
clude: incorrect use of cryptography, poor code quality,
and possibility of smartcard forgery, among many oth-
ers. Despite Diebold’s rebuttal [9], the system remains
mistrusted by a number of experts.
The SERVE system is a Department of Defense
government-funded project for Internet-based voting.
SERVE works as follows: For each voting district, a lo-
cal election oﬃcial (LEO) generates a key pair. When a
ballot is cast, it is sent with identiﬁcation over the Web.
This information is encrypted with the Web server’s
public key. The Web server veriﬁes the eligibility of the
voter, decrypts the ballot, removes the voter’s name, and
re-encrypts the ballot with the LEO’s public key. This
ballot is then sent to the LEO. SERVE was found to have
many vulnerabilities [24] and the project was discontin-
ued [36]. One of the major vulnerabilities particular to
SERVE is that the Web server knows the vote of each
voter, and can tie it to his identity. If the Web server is
compromised, voter privacy is broken entirely.
RIES (Rijnland Internet Election System) [6] is an
election system developed in 2003 and 2004 for the Wa-
ter Board elections at Rijnland and De Dommel in the
Netherlands. The system has many vulnerabilities [5],
such as the use of a single master triple-DES key.
EVM2003 [3] is a project to develop a free and open
source electronic voting machine. However, it seems to
have undergone very little activity since its inception in
2003 and does not seem to employ any cryptographic
voting protocols.
Condorcet Internet Voting Service (CIVS) [1] is
a Web-based free voting system that employs the Con-
dorcet election method. Voters submit a ranking of can-
didates instead of picking only one candidate. CIVS em-
ploys some cryptographic integrity mechanisms but falls
short of oﬀering cryptographic guarantees for voter pri-
vacy.
GNU.FREE [4] is a free Internet voting system re-
leased by the GNU project. In GNU.FREE, voting is not
done over the Web. Rather, a stand-alone Java program
is used to cast votes which are encrypted using a cipher
(BlowFish). The system does not provide suﬃcient se-
curity (beyond preventing regular eavesdropping), and
it is easy for a malicious system to correlate voters and
their votes. It is worth noting that EVM2003, CIVS, and
GNU.FREE are the only voting systems we have found
that are free software.
1.5. Comparison to the present work
Internet voting systems
A is an Internet-based e-voting system based on
a strong voting-oriented cryptographic primitive (homo-
morphic encryption). A is free software released
under the GNU GPL. Anyone can create his own instal-
lation of A for testing or general usage. To the best
of our knowledge, A is the ﬁrst system of this kind.
Moreover, A compares particularly favorably
against commercial
(e.g.,
SERVE). For instance, A supports large-scale trust
distribution for voter privacy. As a large number of key-
share-holding authorities is supported, elections can es-
sentially be run by the community. In addition, A
employs state-of-the-art encryption methods and puts
forth the very attractive design principle of transparency:
the bulletin board is publicly readable and holds no se-
crets. Thus, even if it is compromised, the privacy of the
voters cannot be violated. Additionally, the whole elec-
tion process is universally veriﬁable. Admittedly, A
has many limitations; nevertheless these are shared by
all systems of the same kind (cf. §4).
While there exist serious and justiﬁed security con-
cerns regarding the employment of Internet-based vot-
ing for sensitive election procedures such as Presiden-
tial elections, we believe the existence of free and open
source system like A will motivate further testing
and development, and will be a step forward in the de-
velopment of truly robust and trustworthy e-voting pro-
cedures.
2. Overview of an election
At the heart of the system operation is a bulletin board
(a notion introduced in e-voting by Benaloh [11]). The
bulletin board is a public channel with memory, where
all authenticated users (voters and authorities) can ap-
pend data. We realize the bulletin board as an SQL
database which provides availability and data integrity,
while authentication is performed by a Kerberos-like
“gatekeeper” server, which assigns cryptographic tokens
to users that allow the users to perform various actions
upon receiving proper credentials. Client software, ei-
ther a Web browser with a digitally-signed Java applet,
or a stand-alone GUI program, is used to connect to the
system.
There are three types of users in the A system:
authorities, voters, and administrators. Authorities are
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006responsible for jointly maintaining the security and pri-
vacy of the election, voters are the users who actually
cast ballots, and administrators are responsible for cre-
ating and managing elections.
A typical A election procedure consists of sev-
eral stages. See Figure 2 for a graphical depiction of the
interactions between parties.
Procedure creation. An election begins when an ad-
ministrator logs onto the bulletin board server and sub-
mits the procedure creation data. Among the parameters
speciﬁed are the procedure identiﬁer, the identities of
voters and authorities that are eligible to participate, the
authority threshold t, the minimum and maximum num-
ber of candidates that voters can select, the list of candi-
dates, and the election duration. Once the administrator
submits this form, the bulletin board server populates the
database with the corresponding information.
The bulletin board server subsequently generates the
public cryptographic parameters p, q, g, and f , where p
is a safe prime, i.e., p = 2q + 1 and q is a prime, g is an
p, and f ∈ hgi. Note that the same
order q element of Z∗
cryptographic parameters may be used for other proce-
dures. We denote by Eh : Zq × Zq −→ hgi2 the mapping
(r, x) 7→ (gr, hr f x) (this is a form of a Elgamal encryp-
tion [18]). All of these parameters (and all cryptographic
data generated by the server in the future) are stored on
the bulletin board.
In the following three steps, the set of authorities that
are enabled for the procedure will jointly produce the
public key of the system initializing a threshold encryp-
tion scheme (cf. [32]). We note that not all authorities
are required to successfully carry out the steps. We will
use the notation Authsstage1, Authsstage2, and Authsstage3 to
denote the subsets of authorities that succeed in complet-
ing the stages of the system public key generation. If
the authorities that complete all three stages are below a
safety threshold t0, the system terminates the procedure.
Note that the safety threshold satisﬁes t0 > t.
Authority public key generation. Once the procedure
has been created, the authorities collaborate to create the
public encryption key of the system. At the end of the
election, they each contribute a part to the decryption of
the result. Note that no authority has the ability to de-
crypt a single vote because the actual private key of the
system does not exist in the private memory of any one
entity. Rather, it is broken up in the form of the authori-
ties’ individual private keys. In order to decrypt a single
vote, an amount of authorities greater than the author-
ity threshold t would all have to collaborate. To ensure
that no malicious coalition can exceed such a threshold
in a certain deployment, election oﬃcials can designate
authorities with diﬀering political interests, so that they
have few reasons to collude.
An authority i downloads p, q, g, and f from the bul-
letin board. The authority then generates an Elgamal
key-pair (hi, xi), where hi = gxi, and xi ∈R Zq. In this
step, hi serves as the public key of the authority, and xi
serves as the private key. The public key is stored on
the bulletin board. Once all authorities have completed
this stage, the public key of each authority is stored on
the bulletin board. Let Authsstage1 be the set of author-
ities that have completed this step. If |Authsstage1| < t0
(the safety threshold), then the server will terminate the
procedure here.
Polynomial generation. At this stage, the authorities
will participate in a protocol that will compute the public