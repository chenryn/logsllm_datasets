edge, we could not generate semantics-rich inputs.
Also, as AOSP is a monolithic project, we need to add
the namespace to variable types so as to avoid conﬂicts when
extracting these kinds of type knowledge. Besides, guaranteed
by the compiler, all headers used by the C/C++ ﬁles will
be included in AST in order. As a result, we can collect
deﬁnitions of all related types.
3.5 Dependency Inferer
After extracting interface models, we infer two kinds of depen-
dencies: (1) interface dependency. That is, how a multi-level
interface is recognized and generated. It also implies how an
interface is used by other interfaces. (2) variable dependency.
There are dependencies between variables in transactions.
Previous researches rarely consider these dependencies.
3.5.1
Interface Dependency
In general, there are two types of dependencies between inter-
faces, corresponding to the generation and use of interfaces.
Generation Dependency
If an interface can be retrieved
via another interface, we say that there is a generation depen-
dency between these two interfaces. As introduced in Section
2.1, we can get Android native system service interfaces, i.e.,
top-level interfaces, directly from the service manager. As re-
gards multi-level interfaces, we ﬁnd that upper-level interface
will call writeStrongBinder to serialize a deep interface
into reply. In this way, we can easily collect all generation
dependencies of interfaces.
Use Dependency
If an interface is used by another inter-
face, we say that there is a use dependency between these two
interfaces. We ﬁnd that when an interface A is used by another
interface B, B will call readStrongBinder to deserialize A
from data parcel. Hence, we can utilize this pattern to infer
the use dependency.
3.5.2 Variable Dependency
There are two types of variable dependencies, i.e., intra-
transaction and inter-transaction dependency, based on
whether the variable pair is in a same transaction.
Intra-Transaction Dependency One variable sometimes
depends on another in the same transaction. As demonstrated
in Section 3.4.4, there could be conditional dependency, loop
dependency, and array size dependency between variables in a
transaction. Conditional dependency refers to the case where
the value of one variable decides whether another exists or
Algorithm 1 Inference of Inter-Transaction Dependency
Input: Interface Model (M)
Output: Inter-Transaction Dependency Graph (G)
G = {}
I = [ ] // input variables
O = [ ] // output variables
for variable in M do
if variable is input then
add variable into I
end if
if variable is output then
add variable into O
end if
end for
for iVar in I do
for oVar in O do
if iVar.txID != oVar.txID then
if iVar.type==oVar.type then
if iVar.type is complex then
add edge (iVar, oVar) into G
else if iVar.name and oVar.name are similar then
add edge (iVar, oVar) into G
end if
end if
end if
end for
end for
not. For example, fd in Listing 2 conditionally depends on
isFdValid. Loop dependency refers to the case where one
variable decides the number of times another is read or written,
as the variables size and key in Listing 3. For the last one,
the size of an array variable is speciﬁed by another variable.
When generating this array variable, we should generate the
speciﬁed number of items.
Inter-Transaction Dependency A variable sometimes de-
pends on another variable in a different transaction. In other
words, input in one transaction can be obtained through output
in another transaction. We propose Algorithm 1 to deal with
this kind of dependency. Speciﬁcally, we extract the inter-
transaction dependencies following the principles below: 1
one variable is input, and the other is output; 2 these two
variables are located in different transactions; 3 input vari-
able’s type is equal to the output variable’s type; 4 either
the input variable type is complex (not primitive type), or the
input variable name and the output variable name are similar.
The similarity measurement algorithm can be customized.
3.6 Fuzzer Engine
After inferring the dependencies, we can start fuzzing An-
droid native system services. Firstly, the fuzzer manager will
sync the fuzzer binary, interface model, and dependencies to
mobile phone and start the fuzzer on the smartphone. Then
the fuzzer will generate a test case, i.e., a transaction and its
corresponding interface to fuzz the remote code. Besides, the
fuzzer manager will sync the crash logs from smartphones
regularly. Here we mainly demonstrate the test case generator,
as other parts are straightforward in FANS. Interested readers
could refer to the source code we open source for details.
When fuzzing Android native system services, we are
fuzzing the transaction speciﬁed by the transaction code.
Therefore we can randomly generate a transaction at ﬁrst
and then invoke its corresponding interface.
Transaction Generator We can generate input variables of
a transaction one by one based on the interface model. During
the generation, we follow the principles in order as below.
• Constraint First. If a variable is constrained by another
variable, we should check the constraints before gener-
ating the variable. For instance, as shown in Listing 2,
isFDValid should be checked before generating fd.
• Dependency Second. If a variable can be generated by
other transactions, we should use them to generate it
with a high probability. In such circumstances, we should
generate the dependent transaction ﬁrst, and then get the
output from the corresponding reply parcel. Also, we
do not follow this principle for a low probability.
• Type and Name Third. We may generate a variable
according to its type and name, no matter the aforemen-
tioned dependencies exist or not. For example, in Listing
1, we will generate a valid package name (String16)
for opPackageName. Besides, we will generate a valid
process ID (int) for pid. For a complex type, we will
generate its members recursively according to this rule.
Interface Acquisition As for top-level interfaces, we can
get them through the service manager. Multi-level interfaces
can then be recursively obtained via the recognized interface
dependency.
4
Implementation
We implemented a prototype of FANS from scratch, rather
than developing one based on an existing fuzzer, e.g.,
AFL [25], for the following reasons. First, it takes huge en-
gineering work to port AFL to Android. Second, AFL-based
fuzzers are effective at testing one standalone program or
service, thus we have to compile and test each target service
one by one, which is non-scalable. Third, AFL is not effective
at testing service-based applications, including the binder IPC
based services. Table 1 shows the statistics of this implemen-
tation.
Interface Collector To be able to collect interfaces efﬁ-
ciently, we ﬁrst compile the AOSP codebase, recording the
compilation commands in the meantime. Then we walk these
commands while scanning for the characteristics pointed out
Table 1: Implementation Details of FANS
LoC
Component
Language
Interface Collector
Python
Interface Model Collector
C++, Python
Dependency Inferer
Fuzzer Engine
Total
Python
C++, Python
C++, Python
145
5238
291
5070
10744
in Section 3.3 and Section 3.4.4. This step can be easily im-
plemented with Python.
Interface Model Extractor As we are extracting interface
models from AST, we ﬁrst convert the compilation commands
to cc1 commands while linking with the Clang plugin which
is used to walk the AST and extract a rough interface model.
We do an approximate slice on the AST and only preserve
statements relevant to input and output variables, omitting
others. Finally, we do a post-process on the rough model so
that fuzzer engine can easily use it. The interface model is
stored in JSON format.
Dependency Inferer Given the interface model described
with JSON, dependency inferer traverses the model and makes
interface dependency inference as explained in Section 3.5.1.
Besides, dependency inferer will also get the inter-transaction
dependency according to Algorithm 1.
Fuzzer Engine We implement a simple fuzzer manager
so as to run fuzzer on multiple phones together with sync-
ing data between host and smartphones. We build the en-
tire AOSP with ASan enabled. The fuzzer is implemented
in C++ as a native executable. As some Android native sys-
tem services check the caller’s permission when receiving
RPC requests, the fuzzer is executed under root privilege.
To accelerate the execution, we always make asynchronous
RPCs through marking the flag argument of transact as
1 when the outputs in reply are not needed. When we do
need the outputs in reply, e.g., dependency inference, we
make synchronous calls. Finally, in order to analyze triggered
crashes, we use the builtin logcat tool of Android for log-
ging. Besides, we will also record native crash logs located in
/data/tombstones/.
5 Evaluation
In this section, we evaluate FANS to answer the following
questions:
(1) How many interfaces have been found? What is the rela-
tionship between them? (Section 5.1)
(2) What does the extracted interface model look like? Is the
model complete and precise? (Section 5.2)
Figure 3: Interface Statistics: 43 top-level Android native
system interfaces are discovered, of which 23 are from AOSP
and 20 are generated from AIDL ﬁles. 25 multi-level Android
native system interfaces are discovered, of which 20 are from
AOSP and 5 are generated from AIDL ﬁles.
(3) How effective is FANS in discovering vulnerabilities of
Android native system services? (Section 5.3)
Experimental Setup As shown in Figure 2, we implement
the ﬁrst three components on Ubuntu 18.04 with i9-9900K
CPU, 32 GB memory, 2.5 T SSD. As for test devices, we
use the following Google’s Pixel series products: Pixel * 1,
Pixel 2XL * 4, and Pixel 3XL * 1. We ﬂash systems of these
smartphones with AOSP build number PQ3A.190801.002,
i.e., android-9.0.0_r46, which is a recent version support-
ing these devices when writing this paper. Although the An-
droid release versions are the same, the source code can be
slightly different for different Pixel models. For the following
two sections (Section 5.1, Section 5.2), we report the experi-
ment results carried out on Pixel 2XL.
5.1
Interface Statistics and Dependency
In this section, we systematically analyze the interfaces col-
lected by the interface collector and introduce the dependen-
cies among these interfaces.
5.1.1
Interface Statistics
It takes about an hour to compile AOSP. However, it only
takes a few seconds to ﬁnd the interfaces in the source code.
As shown in Figure 3, multi-level interfaces account for as
many as 37% of all native service interfaces, which highlights
the necessity to examine more interfaces than registered at the
service manager. Besides, interfaces generated by AIDL tools
also take a large part, so we should extract interfaces directly
inside AOSP and interfaces generate from AIDL ﬁles. We are
not able to compare the number of interfaces discovered by
FANS with any other existing research, as none ever focused
on Android native system services.
Top-level in AOSP23(33.8%)Top-level generated20(29.4%)Multi-level in AOSP20(29.4%)Multi-level generated5(7.4%)Top-level in AOSPTop-level generatedMulti-level in AOSPMulti-level generatedFigure 4: Part of the Interface Dependency Graph
5.1.2 Interface Dependency
It just takes seconds to infer the interface dependency rela-
tionship. As the full interface dependency graph is too large
(see Figure 8 in Appendix), we demonstrate the complexity of
interface dependency with one of its representative parts, as
shown in Figure 4. The deepest interface is IMemoryHeap,
whose ancestor is IMediaExtractorService. It requires
ﬁve steps to get the IMemoryHeap interface. Without depen-
dency relationships, we could not obtain such a deep interface
easily and automatically. It also comes to our notice that
a multi-level interface can be obtained from several upper
interfaces. For example, IMemory can be obtained from the
IMediaSource, IEfect, and IAudioTrack interfaces. There-
fore, we can explore different paths to fuzz a same interface.
Besides, there are some other interfaces which are neither
top-level interfaces nor multi-level interfaces, but the archi-
tecture remains the same. We call such interfaces customized
interfaces. Customized interfaces are designed to customize
system functionality as needed and can be manually instan-
tiated by developers and passed to top-level or multi-level
interfaces. For example, IEffectClient interface is trans-
ferred to some transaction A of IAudioFlinger. Transaction
A will call the method provided by the IEffectClient in-
terface later. To the best of our knowledge, we are the ﬁrst
to systematically investigate the dependencies between the
interfaces in Android native system services.
5.2 Extracted Interface Model
The process of extracting a rough interface model takes about
an hour. The post-process of the interface model extractor
only takes seconds. We also give the time for inferring the
variable dependency as follows. The time used to infer intra-
transaction dependencies has already been counted into that
of extracting the interface model. As to the time for inter-
transaction dependency inference, it is also a matter of sec-
onds.
Figure 5: Transaction Details in Interface: 530 top-level trans-
actions and 281 multi-level transactions are found. 827 top-
level transaction paths and 548 multi-level transaction paths
are found.
We start this section by discussing the extracted interface
model statistics, and then talk about the completeness and
precision of the interface model.
5.2.1 Extracted Interface Model Statistics
We discuss the extracted interface model from two aspects:
transaction and variable.
Transaction As shown in Figure 5, there are 811 trans-
actions inside the Android native system services, in which
multi-level transactions account for 281, a proportion of about
35%. Besides, in either top-level interfaces or multi-level in-
terfaces, the transaction path quantity is over 1.5 times that
of the transaction, which means many transactions hold more
than one return statement in the sliced AST. In other words,
if we do not distinguish between different transaction paths,
we cannot obtain an explicit dependency since some inter-
transaction dependencies only exist on a particular path.
Variable We only count in variables that are directly inside
onTransact. That is, we do not count variables recursively.
For instance, onTransact uses readFromParcel to read a
structure. It is only in readFromParcel that the structure’s
members are dealt with, so we exclude them from the statis-
tics. Otherwise, the statistics would be imprecise. As shown
in Figure 6, there are various types as described in Section
3.4.4, e.g., structure and ﬁle descriptor. We explain the ﬁg-
ure from three aspects: variable patterns, type aliases, and
inter-transaction variable dependencies.
• Variable Pattern. According to variable patterns, we
divide variables into three kinds as demonstrated in
Section 3.4.4: sequential variable, conditional variable
and loop variable. We notice that few variables are in
simple sequential statements, and most variables pro-
cessed in sequential statements have String type. The
reason behind this is that nearly all interfaces check
LegendIDataSourceIMediaExtractorServiceIMemoryIMediaExtractorIMemoryHeapICryptoIMediaSourceIAudioFlingerIAudioRecordIAudioTrackIEffectIMediaDrmServiceIDrmIEffectClientIAudioFlingerClientUseGeneration530(65.4%)281(34.6%)827(60.1%)548(39.9%)Top-level CodeMulti-level CodeFigure 6: Classiﬁcation Result of Variables by Variable Pattern, Type Alias, and Dependency
the interface token at the beginning of each transaction
except several SHELL_COMMAND_TRANSACTION transac-
tions and the only one GET_METRICS transaction in the
IMediaRecorder interface. In other words, almost all
variables are conditional variables. Therefore, we have
to extract the constraints imposed on variables to gener-
ate valid inputs. Constraint extraction is also necessary
for solving intra-transaction dependencies. Additionally,
it is possible for almost all variable types to occur in a
loop.
• Type Alias. As for type alias, i.e., type deﬁned in
typedef statement, we notice that all aliases are for
three types: primitive types, enumeration types, and
structure-like types. This makes sense as we usually
use typedef statements for more semantic types, which
can be seen from List 5. By all means, we would lose
semantic knowledge of variables without these typedef
statements.
• Variable Dependency. Here we
consider
inter-
transaction dependencies. Since there is no dependency
on output variables, we focus on input variables.
Moreover, we generate array dependency according
to the array item type. As shown in Figure 6, there