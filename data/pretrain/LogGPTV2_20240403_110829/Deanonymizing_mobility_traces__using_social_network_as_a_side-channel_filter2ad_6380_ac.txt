or about 6.7 hours.
3.3 Randomized Spanning Trees
An obvious approach to performing the mapping would be to
compute general graph isomorphism between the contact and so-
cial network graphs. However, general graph isomorphism is an
NP-hard problem, so this approach would be computationally in-
tractable for large contact graphs and social networks. We observe
that a classical approach to derive mappings between entities in a
high dimensional space is to project them to a lower dimensional
space wherein it may be easier to identify such mappings. Follow-
ing this observation, we signiﬁcantly lower the complexity of the
graph mapping by reducing it to randomized tree mapping problem,
for which poly-time algorithms exist [29].
Given two such spanning trees CT and ST we seed the mappings
between landmark nodes and then apply a classical tree-to-tree edit-
ing algorithm [29] to derive node mappings between other nodes in
the tree. The runtime complexity of the tree-to-tree editing algo-
rithm is O(|VC||VS|). We quantify the efﬁcacy of a mapping using
the graph edit distance between the labeled contact graph and the
social network. Over multiple such randomized spanning trees and
all k! landmark node mappings we select the mapping that has the
least edit distance between the labeled contact graph and the social
network.
Figure 8(a) shows the accuracy of de-anonymization as we in-
crease the number of randomized spanning trees (with the number
of landmark nodes k set to 4) constructed from the contact graph
and the social network. The ﬁgure also shows the accuracy of de-
anonymization as we increase the number of landmark nodes (with
the number of randomized spanning trees set to 128). The ﬁgure
indicates that the accuracy of de-anonymization can be as large as
72%, 80% and 68% respectively for St Andrews, Smallblue and
Infocom06 datasets.
Figure 8(b) shows the tree mapping for a given pair of span-
0.30.40.50.6CentralitySt Andrews00.10.21611162126Node CNode Id0.20.30.4CentralitySmallblue00.11112131415161718191101111121Node CNode Id030.40.50.60.7CentralityInfocom0600.10.20.3111213141516171Node CNode Id0.30.40.5CentralitySt Andrews00.10.21611162126Node CNode Id0.20.30.40.5 CentralitySmallblue00.10.21112131415161718191101111121NodeNode Id0.30.40.50.6CentralityInfocom0600.10.2111213141516171Node Node Id632(a) Accuracy
k
1
2
4
8
St Andrews
Smallblue
Infocom06
0.70
0.72
0.76
0.84
12.60
12.96
13.68
15.12
5.25
5.42
5.75
6.36
(b) Computation times (seconds)
Figure 9: Recursive Sub-Graph Matching Results
dataset
St Andrews
Smallblue
Infocom06
log2 |aut(C)|
7.7
18.2
16.5
log2 |aut(S)|
7.9
18.4
18.6
log2 |V |!
93
696
382
Figure 10: Number of Automorphisms
been determined − the dynamic CSP is bootstrapped using land-
mark node mappings, i.e., the value of xli is assumed to be known
for every landmark node li. We use a CSP solver in ILOG [16]
to recursively expand the set of node mappings from the landmark
nodes to span all the nodes in the contact graph. The CSP solver ex-
ploits a combination of backtracking (e.g., to undo incorrect node
mappings), constraint propagation and local search to optimally
solve the dynamic MAX-CSP problem. Further, the CSP solver ex-
ploits the absence of cyclical dependences in our constraints (note
that we introduce a constraints xa ∈ f (xb) only when the value of
xb is known) to scalably solve the node mapping problem.
Figure 9(a) shows the accuracy of de-anonymization as we in-
crease the number of landmark nodes. The ﬁgure indicates that
the accuracy of de-anonymization can be as large as 82%, 88%
and 80% respectively for St Andrews, Smallblue and Infocom06
datasets. Figure 8(b) shows the time taken to solve the dynamic
MAX-CSP problem for a given landmark node mapping. We ob-
serve that on the 125 node Smallblue dataset with k = 5 nodes, the
total time to de-anonymize is 5!*15.12 seconds or about 0.5 hours.
We note that the computational complexity of recursive sub-graph
matching using the dynamic CSP approach (without backtrack-
ing) is O(|V | ∗ max_node_degree). With limited backtracking
(say, at most b local backtrackings) the complexity is still pseudo-
polynomial in |V |: O(|V | ∗ max_node_degreeb).
3.5 Optimality: Graph Automorphism Bound
In this section we present solutions to analyze the efﬁcacy of
graph de-anonymization. First, we make a simple observation that
efﬁcacy of node mapping is fundamentally limited by number of
graph automorphisms. Automorphism of a graph is a form of sym-
(a) Accuracy
k
1
2
4
8
St Andrews
Smallblue
Infocom06
0.12
0.13
0.14
0.16
2.98
3.29
3.51
4.02
1.08
1.17
1.26
1.44
(b) Computation times (seconds)
Figure 8: Randomized Spanning Tree Results
ning trees CT and ST . We observe that on the 125 node Smallblue
dataset with k = 5 nodes and 128 randomized spanning trees, the
total time to de-anonymize is 5!*128*4.02 seconds or about 6.2
hours.
3.4 Recursive Sub-Graph Matching
For our ﬁnal technique, we propose to use sub-graph features
to derive mappings between the contact graph and the social net-
work. We start with the seed set of landmark nodes and recursively
expand such mappings to other nodes in the contact graph. The
key idea is to model the node mapping as a constraint satisfaction
problem (CSP) [22]. We leverage the social network to derive con-
straints on node mappings as follows. For each node a in the so-
cial network we create a variable xa in the CSP. We constrain all
variables xa to take values from the set VC, where VC denotes ver-
tices in the contact graph. If there is a link between users a and
b in the social network we introduce conjunctive constraints of the
form: xa ∈ f (xb) and xb ∈ f (xa), where f (xa) denotes the set of
edges incident on node xa in the contact graph. Indeed since the
contact graph and the social network may not have an exact map-
ping the CSP may have no feasible solutions. Hence, we solve for
MAX-CSP that minimizes the number of constraint violations (i.e.,
minimizes the number of unsatisﬁed constraints).
In general solving such a MAX-CSP is a NP-hard problem. In-
stead we solve a dynamic CSP problem that only introduces con-
straints of the form xa ∈ f (xb) such that value of xb has already
0.60.81curacySt AndrewsSmallblueInfocom0600.20.41248163264128AccNo of randomized spanning trees040.60.81curacySt AndrewsSmallblueInfocom0600.20.412345678Acck: No of landmark nodes040.60.81curacySt AndrewsSmallblueInfocom0600.20.412345678Acck: No of landmark nodes633Figure 12: Accuracy with Noisy Social Network
max(|aut(C)|, |aut(S)|), where |aut(G)| denotes the number of
automorphisms of graph G.
We derive an upper bound on accuracy that may be achieved
by any de-anonymization algorithm using the number of graph au-
In particular, if the social network S has |aut(S)|
tomorphism.
automorphisms and contact graph C has |aut(C)| automorphisms
then the accuracy of any de-anonymization algorithm cannot ex-
ceed min(1 − ηC|VC| , 1 − ηS|VS| ), where ηS is the smallest natural
number such that ηS! ≥ |aut(S)| and ηC is the smallest natural
number such that ηC ! ≥ |aut(C)|.
Figure 11 shows a comparison of our algorithms: DV (landmark
based distance vectors), ST (randomized spanning trees), SG (re-
cursive sub-graph matching) and OPT (automorphism bound). Our
results show that the recursive sub-graph matching approach con-
sistently outperforms the other approaches. The ﬁgure also shows
that the nodes in the contact graphs exhibit signiﬁcant heterogene-
ity: the automorphism bound on St Andrews, Smallblue and Info-
com06 datasets is 82%, 94% and 90% respectively. We note that
the recursive sub-graph matching can achieve up to 97.6%, 95.7%
and 91.1% of optimality respectively on St Andrews, Smallblue
and Infocom06 datasets.
4. EVALUATION: TOLERANCE TO NOISE
AND OBFUSCATION
This section presents an evaluation of the efﬁcacy of our algo-
rithms on altered datasets. In particular we will examine the ef-
ﬁcacy of our algorithms when: (i) the social network or the con-
tact graph is obfuscated, (ii) a small subset of nodes mappings are
known a prior (e.g., insiders reveal their identities or some node
mappings are inadvertently leaked), and (iii) examine the efﬁcacy
of de-anonymization when stale social networks are used. Our re-
sults show that even when about 25% of the social network and
the contact graph is intentionally modiﬁed (e.g., edges/nodes are
added/removed) our approach is effective; further, when a small
fraction (5%) of select node mappings (in particular, nodes with
low centrality score) are known a priori, then the effectiveness of
our approach can exceed 95% (i.e., 95% of nodes are correctly
mapped).
4.1 Noisy Social Network
Figure 12 shows the accuracy of node de-anonymization when
the social network is obfuscated. We examined three different types
of noise that could be added to the social network. First we add/delete
edges in the social network − for example, when edit distance / No
of edges is 0.1 then 5% of randomly selected edges are deleted from
the graph, followed by introducing edges between 5% of the ran-
Figure 11: Optimality
metry in which a graph is mapped onto itself while preserving
edge−vertex connectivity. Formally, an automorphism of a graph
G = (V , E) is a permutation σ of the vertex set V , such that the pair
of vertices (u, v) form an edge if and only if the pair (σ(u), σ(v))
also form an edge. It is easy to see that no graph de-anonymization
algorithm will be able to distinguish between such pairs of vertices
(u, v). It may possible to conclude that (u, v) ∈ {u(cid:48), v(cid:48)} (i.e., both
the mappings {u = u(cid:48) and v = v(cid:48)} and {u = v(cid:48) and v = u(cid:48)} are
equally likely) but the exact mapping between {u, v} and {u(cid:48), v(cid:48)}
may be indeterminate.
For example, if the graph G is completely connected then the
number of automorphisms is |V |!, i.e., any permutation of vertex
labels results in an isomorphic graph. Similarly, a graph that has
no edges also has |V |! automorphisms. Hence, such graphs are
completely resilient to graph de-anonymization. Let us consider
another example wherein the graph G has a star topology, wherein
one vertex v0 has degree n and all the other vertices {v1, ··· vn}
have exactly one edge to v0. In such a graph one can determine the
mapping for node v0, however, any permutations on vertex labels
{v1, ··· , vn} results in an isomorphic graph. Indeed a graph with
a star topology has (|V | − 1)! automorphisms.
While graph automorphisms (and its counting version, i.e., de-
termining the number of automorphisms) is a NP-complete prob-
lem there are various tools that are very effective in estimating
the number of automorphisms for a given graph. For example,
Saucy2 [8] has been effective in computing the number of auto-
morphisms in graphs of size ranging from 3K to 5M and number
of automorphsisms ranging from 4−108000 in under 30 minutes.
Figure 10 shows the number of graph automorphisms on both the
contact graphs C and the social networks S in our datasets. We
note that the maximum possible information gain achievable by
any graph denonymization algorithm is given by: log2 |V |! − log2
0.60.81curacySt AndrewsSmallblueInfocom0600.20.400.10.20.30.40.5AccEdit Distance / No of Edges0.60.81curacySmallblueInfocom0600.20.400.20.40.60.81AccSpurious Nodes / No of Nodes0.60.81curacySt Andrews00.20.400.10.20.30.40.5AccMissing Nodes / No of NodesSmallblueInfocom060.60.811.2uracyDV (Distance Vector)ST (Spanning Tree)SG (Sub Graph)OPT (Optimal)00.20.40.6St AndrewsSmallblueInfocom06Accu634Figure 13: Accuracy with Obfuscated Mobility Traces
domly chosen pairs of nodes. Note that in this case no new nodes
are introduced into the social network.
Second we introduce spurious nodes into the social network, that
is, users that did not participate in the mobility trace. Note that for
both the Smallblue and Infocom06 dataset we have the social net-
work over a superset of users that participated in the mobility trace;
hence, we randomly add nodes from the social network (including
respective edges to nodes that were already part of the social net-
work). For example, when Spurious Nodes / No of Nodes equals 0.1
then 10% of randomly chosen nodes is added to the social network
as follows: let VS denote the set of vertices in the current social
network; let ngh(VS) denote the set of neighbors of vertices in VS;
we pick one vertex at random from the set ngh(VS) \ VS and add
it to the social network; the process is repeated until the required
number of nodes are added to the social network. In this case, the
size of the resulting social network has 10% more nodes than the
contact graph.
Third we randomly remove nodes (and all incident edges) from
the social network. For example, when Missing Nodes / No of
Nodes equals 0.1 then 10% of randomly chosen nodes (and respec-
tive edges) is removed from the social network. In this case, the
resulting social network is 10% fewer nodes than the contact graph.
In all of Figure 12 we used our recursive sub-graph matching
algorithm since it performed the best under normal circumstances.
The x-axis in the ﬁgures quantiﬁes the extent of obfuscation and
the y-axis shows the accuracy of our algorithm. We note that in
general the efﬁcacy of our algorithm degrades gracefully with the
extent of obfuscation. Compared to the other modiﬁcations, adding
spurious nodes into social network has the most deleterious effect
on deanonymization. Intuitively, adding spurious nodes increases
the number of possible node mappings by reducing the number of
discriminating features.
4.2 Noisy Contact Graph
Figure 13 shows the accuracy of node de-anonymization when