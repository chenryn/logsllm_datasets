create index idx_a on a (info,crt_time);  
select * from a where info='2' and event_time between '2022-08-25' and '2022-08-26' order by crt_time desc limit 10;  
postgres=# explain (analyze, verbose,timing,costs,buffers) select * from a where info='2' and event_time between '2022-08-25' and '2022-08-26' order by crt_time desc limit 10;  
                                                                           QUERY PLAN                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=0.43..2888.10 rows=10 width=22) (actual time=187.762..187.782 rows=10 loops=1)  
   Output: id, event_time, crt_time, info  
   Buffers: shared hit=3416 read=53514  
   ->  Index Scan Backward using idx_a on public.a  (cost=0.43..244296.61 rows=846 width=22) (actual time=187.760..187.778 rows=10 loops=1)  
         Output: id, event_time, crt_time, info  
         Index Cond: (a.info = '2'::text)  
         Filter: ((a.event_time >= '2022-08-25 00:00:00'::timestamp without time zone) AND (a.event_time   Index Scan Backward using idx_a1 on public.a  (cost=0.43..2046.57 rows=508 width=22) (actual time=0.027..0.035 rows=10 loops=1)  
         Output: id, event_time, crt_time, info  
         Index Cond: ((a.info = '2'::text) AND (date(a.event_time) = '2022-08-25'::date))  
         Buffers: shared hit=9  
 Planning Time: 0.125 ms  
 Execution Time: 0.056 ms  
(9 rows)  
Time: 0.475 ms  
``` 
### case 2.1: 对于跨天的, 需要使用union+merge sort:   
```
create index idx_a1 on a (info,date(event_time),crt_time) ;  
select * from a where info='2' and 
event_time between '2022-09-01' and '2022-09-05' 
order by crt_time desc limit 10;  
   id    |         event_time         |          crt_time          | info 
---------+----------------------------+----------------------------+------
 1087546 | 2022-09-04 23:54:01.838796 | 2022-09-04 23:54:16.864577 | 2
 1087142 | 2022-09-04 23:48:00.903383 | 2022-09-04 23:48:27.885306 | 2
 1087183 | 2022-09-04 23:49:22.745037 | 2022-09-04 23:48:09.017197 | 2
 1087063 | 2022-09-04 23:47:01.928537 | 2022-09-04 23:46:51.732445 | 2
 1087032 | 2022-09-04 23:46:02.689686 | 2022-09-04 23:46:27.586939 | 2
 1086995 | 2022-09-04 23:46:00.142132 | 2022-09-04 23:45:07.083365 | 2
 1087006 | 2022-09-04 23:45:26.718719 | 2022-09-04 23:45:03.414171 | 2
 1086943 | 2022-09-04 23:44:02.664417 | 2022-09-04 23:44:15.241405 | 2
 1086868 | 2022-09-04 23:43:30.103508 | 2022-09-04 23:43:13.862955 | 2
 1086808 | 2022-09-04 23:42:38.651455 | 2022-09-04 23:42:14.272718 | 2
(10 rows)
 Limit  (cost=0.43..174.02 rows=10 width=22) (actual time=25.351..25.358 rows=10 loops=1)
   Output: a.id, a.event_time, a.crt_time, a.info
   Buffers: shared hit=11029 read=2159
   ->  Index Scan Backward using a_202209_info_crt_time_idx on public.a_202209 a  (cost=0.43..66554.31 rows=3834 width=22) (actual time=25.349..25.355 rows=10 loops=1)
         Output: a.id, a.event_time, a.crt_time, a.info
         Index Cond: (a.info = '2'::text)
         Filter: ((a.event_time >= '2022-09-01 00:00:00'::timestamp without time zone) AND (a.event_time   Merge Append  (cost=1.76..2320.94 rows=76 width=22) (actual time=0.197..0.242 rows=10 loops=1)
         Sort Key: a.crt_time DESC
         Buffers: shared hit=10 read=11
         ->  Index Scan Backward using a_202209_info_date_crt_time_idx on public.a_202209 a  (cost=0.43..579.94 rows=19 width=22) (actual time=0.083..0.083 rows=1 loops=1)
               Output: a.id, a.event_time, a.crt_time, a.info
               Index Cond: ((a.info = '2'::text) AND (date(a.event_time) = '2022-09-01'::date))
               Filter: ((a.event_time >= '2022-09-01 00:00:00'::timestamp without time zone) AND (a.event_time   Index Scan Backward using a_202209_info_date_crt_time_idx on public.a_202209 a_1  (cost=0.43..579.94 rows=19 width=22) (actual time=0.032..0.032 rows=1 loops=1)
               Output: a_1.id, a_1.event_time, a_1.crt_time, a_1.info
               Index Cond: ((a_1.info = '2'::text) AND (date(a_1.event_time) = '2022-09-02'::date))
               Filter: ((a_1.event_time >= '2022-09-01 00:00:00'::timestamp without time zone) AND (a_1.event_time   Index Scan Backward using a_202209_info_date_crt_time_idx on public.a_202209 a_2  (cost=0.43..579.94 rows=19 width=22) (actual time=0.030..0.030 rows=1 loops=1)
               Output: a_2.id, a_2.event_time, a_2.crt_time, a_2.info
               Index Cond: ((a_2.info = '2'::text) AND (date(a_2.event_time) = '2022-09-03'::date))
               Filter: ((a_2.event_time >= '2022-09-01 00:00:00'::timestamp without time zone) AND (a_2.event_time   Index Scan Backward using a_202209_info_date_crt_time_idx on public.a_202209 a_3  (cost=0.43..579.94 rows=19 width=22) (actual time=0.050..0.091 rows=10 loops=1)
               Output: a_3.id, a_3.event_time, a_3.crt_time, a_3.info
               Index Cond: ((a_3.info = '2'::text) AND (date(a_3.event_time) = '2022-09-04'::date))
               Filter: ((a_3.event_time >= '2022-09-01 00:00:00'::timestamp without time zone) AND (a_3.event_time <= '2022-09-05 00:00:00'::timestamp without time zone))
               Buffers: shared hit=3 read=6
 Planning Time: 0.489 ms
 Execution Time: 0.296 ms
(28 rows)
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")