### Primary Use as a Proxy for Data Transfer and Aggregation
The system primarily serves as a proxy to facilitate data transfer between nodes and acts as a single aggregation point following the completion of the measurement phase. Each data collector initializes each counter, which it is configured to count, with differentially-private noise and random blinding values. These blinding values are secret-shared to each share keeper. After initialization, each counter on both the data collectors and share keepers will hold a random value.

During the measurement phase, data collectors connect to their designated Tor relay, extract events, and increment the configured counters as necessary. At the end of the measurement phase, the data collectors and share keepers send their counter values to the tally server for aggregation. The blinding values stored on the share keepers during the measurement phase cancel out with the blinding values added by the data collectors, resulting in the final output being the sum of the true counter value and the differentially-private noise added by the data collectors.

The noise added to each counter ensures user privacy under differential privacy, while the blinding values provide secure aggregation across measurement relays. No data collector can gain information about the counters of other relays not controlled by the same operator, and individual contributions to the final aggregated counter values are hidden by the random blinding values, provided at least one share keeper is honest. Jansen and Johnson provide additional details and proofs of PrivCount’s security and privacy properties [19].

### Enhancing PrivCount
PrivCount supports a wide range of statistics, such as the number of circuits and the amount of data transferred. We enhanced PrivCount to support real-time predictions of a circuit's purpose, a relay's position in a circuit, and the onion page being accessed. To enable these predictions, we use a modified version of Tor that allows for circuit signaling and exports the necessary circuit and cell metadata.

We developed a new library for PrivCount called `onionpop` that implements the classifiers needed for prediction. This library extracts features from Tor circuits and cells and uses the Python `sklearn` and `pyarborist` APIs to train the classifiers and predict the purpose, position, and webpage. Our models are trained to make binary predictions, such as whether the purpose is a rendezvous, the position is R-C-M1, and the webpage is the front page of our SNS of interest. New counters were added to PrivCount to record the results of these predictions.

Given the sensitive nature of the data, we do not log any information to disk from circuits that we did not originate ourselves. To handle this, PrivCount processes cell information from fast Tor relays in real time, storing circuit and cell metadata in RAM only for the lifetime of the circuit. Once the circuit ends, we run our predictions, increment the counters, and clear the metadata from RAM. To mitigate potential memory and computational bottlenecks, we set a configurable hard upper limit on the number of cells stored per circuit and process a subset of circuits by sampling them uniformly at random according to a configurable sample rate.

### PrivCount Deployment
Our PrivCount deployment consists of 1 tally server, 3 share keepers, and 17 data collectors, each connected to a distinct Tor relay. These nodes are distributed among 3 operators and hosted in 3 countries: Canada, France, and the United States. Each relay runs our modified version of Tor, and each tally server, share keeper, and data collector runs our modified version of PrivCount.

#### Privacy
Our PrivCount deployment uses the parameters and privacy budget allocation techniques outlined by Jansen and Johnson [19]. Specifically, we use differential privacy parameters ε = 0.3 (also used by Tor [13]) and δ = 10−3. Our deployment provides privacy according to the daily action bounds shown in Table V, which are based on circuit counts. Users whose actions stay below these bounds are protected under differential privacy.

#### Measurement Rounds
We conducted three 24-hour measurement rounds. The first round was used to calibrate the noise added to our counters, using previously published measurements of Tor activity [19] to allocate our privacy budget. The second round focused on measuring direct connections from the SNS of interest to our relays serving in the rendezvous position. The third round enabled our classifiers and counted the results of the predictions, with a circuit sample rate of 0.12 and excluding exit relays to prevent resource bottlenecks.

### Research Ethics and User Safety
User safety is a primary goal of our measurement study. We practice data minimization, limit measurement granularity, and provide additional security. We incorporated feedback from the Tor Research Safety Board, created a website explaining our study, and informed the SNS of our intentions to measure their site.

### Results
#### Direct Measurements
Table VII shows the direct measurement results, indicating a significantly lower number of onion service rendezvous circuits compared to non-onion service circuits. The relative accuracy of our direct measurements is high, with most 95% confidence intervals lying between 3 and 6 percent.

#### Classifier Measurements
Table VIII presents the classifier detection results, including ground truth tests. The trend shows an order of magnitude fewer rendezvous circuits detected compared to non-rendezvous circuits. The significant noise in our measurements is due to adding full differential privacy noise while sampling only 12% of circuits. Ground truth measurements show a true positive rate of 100% for the purpose classifier and 96.5% for the position classifier.

### Conclusion
Our study demonstrates the effectiveness of our enhanced PrivCount system in securely and privately measuring and classifying Tor circuit activity, with a focus on ensuring user privacy and minimizing data collection.