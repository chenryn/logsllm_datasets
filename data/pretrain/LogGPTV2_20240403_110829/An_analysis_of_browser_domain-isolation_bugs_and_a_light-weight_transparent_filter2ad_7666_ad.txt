applying an XOR using the accent key of the receiver.  
the  entry  function  of 
is 
although  we  believe  InvokeMemberFunc 
As  we  discussed  in  Section  4,  exploitable  bugs  have  been 
discovered in the past in the complicated logic that implements 
cross-frame invocation and navigation, which we represent as a 
cloud.  A  significant  advantage  of  our  design  is  that  we  do  not 
need  to  understand  this  complicated  logic.  The  security  of  our 
mechanism  only  relies  on  the  fact  that  any  script  needs  to  be 
compiled by the function compile before it is executed. Note 
that 
and 
InvokeNavigation  are  able  to  comprehensively  perform 
accenting  in  all  script-sending  scenarios,  the  security  does  not 
rely on the comprehensiveness – hypothetically, if there was an 
unexpected  scenario  to  send  a  script  without  being  accented,  it 
would fail the compilation in the receiver frame. In other words, 
the incomprehensiveness would not cause a security compromise, 
but  a  compatibility  problem  only  cause  a  fail-stop,  but  not  a 
security bug. Of course, fail-stop is also undesirable as it causes 
application incompatibilities. Section 6.3 will show that we have 
not  found  any  incompatibility  when  we  tested  our  mechanism 
against real applications. 
5.5  Accenting the Object Name Queries to 
Defeat DOM Merging Attacks 
Real-world attacks can also be caused by DOM merging, in 
which case an object can be directly accessed by a script running 
in  another  domain  without  going  through  the  window  proxy 
object. 
“window. 
A 
location”),  an  attribute  (e.g.,  “window.status”)  or  a 
method  (e.g.,  “window.open”)  by  name.  The  distinction 
between  the  terms  “object”,  “attribute”  and  “method”  is  not 
important in our later discussion, so we use the term “object” for 
all of them.  
an  object 
references 
script 
(e.g., 
To reference to an object, the script runtime iteratively calls 
into  the  DOM  for  name  lookups.  For  example,  the  reference 
window.document.body  is  compiled  into  a  segment  of 
byte-code, which (1) gets the window object O, and looks up the 
name “document” under O to get the object referred to as O1; (2) 
looks up the name “body” under the object O1 to get the object 
O2,  which  is  the  body  object.  Note  that  the  mapping  from  a 
name to an actual DOM object is not necessarily injective, i.e., 
there can be different names mapped to the same object. In the 
l
l
d
.
t
p
i
r
c
s
j
Key of the script = k
Key of the DOM = k
l
l
d
.
l
t
m
h
s
m
Dispatch
ID
Table
InvokeByName
Accenting
(“foo”)k
(“foo”)k
De-accenting
GetDispatchID
example in Section 4.4, the font object can be referenced either 
“Frame1.document.body.children(3)”  or  by 
by 
“window.event.srcElement”. From the perspective of the 
script  runtime,  the  execution  paths  of  these  two  references  are 
unrelated.    
To  obtain  the  call  graph  of  name  querying,  we  studied 
various name querying scenarios, including the queries of objects 
as  well  as  the  aliases  of  them.  Because  IE  uses  the  COM 
programming model [5], the browser objects are implemented as 
dispatches,  each  represented  by  a  dispatch  ID.  Obtaining  the 
dispatch ID is a necessary step before a script can do anything to 
the object. In the script runtime, the interface function for name 
querying is InvokeByName, which is responsible for mapping 
an  object  name  string  to  a  dispatch-ID.  However,  the  script 
runtime does not have the knowledge about the dispatch ID table, 
so the name query is passed into the HTML engine (mshtml.dll), 
where  the  function  GetDispatchID  performs  the  actual 
lookup. 
Object name = “foo”
(2) 
it  is  obvious  how 
Figure 7: Accenting/De-Accenting of Name Queries 
Having 
the  above  knowledge, 
the  de-accenting  should  happen  at 
to 
implement  our  mechanism:  (1)  the  accenting  should  happen  at 
function  InvokeByName  using  the  key  of  the  frame  of  the 
script; 
function 
GetDispatchID using the key of the frame hosting the DOM 
(Figure  7).  This  reflects  the  rule  of  object  ownership  –  every 
object is owned by the frame that hosts its DOM, regardless of 
how  the  object  is  referenced.  In  this  design,  the  security  only 
relies  on  the  fact  that  every  object-reference  needs  to  call 
GetDispatchID to obtain the dispatch-ID, which we believe 
is  a  simple  assertion 
the  browser 
implementation. We do not need any assumption about the code 
paths  of  object-name  querying,  which  are  difficult 
to 
exhaustively enumerate.  
to  make  based  on 
Note that in IE’s implementation, the object names in DOM 
trees and scripts are represented using wide-characters (two bytes 
per  character).  In  a  rare  situation  when  the  object  name  of  the 
cross-DOM reference has only a wide-character, the strength of 
the XOR operation is weaker than usual, because the probability 
of  a  successful  random  guess  is  1/(2562),    not  1/(2564).  A 
straightforward  solution 
to  pad  a  wide-character,  e.g., 
“0x0001”,  to  the  original  one-character  object  name  before 
applying  the  accenting  operation.  After  the  de-accenting,  the 
padding  character  “0x0001”  should  be removed  from  the  name 
string. 
5.6  Other  Ways  of  Implementing  the  Script 
Accenting Mechanism 
The basic idea of accenting is to introduce domain-specific 
versions  of  scripts  and  HTML  object  names.  As  a  concrete 
is 
implementation,  we  use  the  XOR  operation  to  bind  a  domain-
specific secret with the string being accented. This is by no means 
the only way to implement the accenting mechanism. Our XOR 
operation is conceptually equivalent to tagging a domain ID to the 
string.  A  possible  alternative  implementation  is  to  use  a  hash 
value of the domain name as the accent key K, and a string S can 
be accented as “K#S”. When it is deaccented, K is compared with 
the accent key of the destination frame, and removed if identical. 
Nevertheless,  this  scheme  might  have  some  concerns:  (1)  the 
string S still travels inside the browser in its plain text form. If the 
attack has a way to reference to it, it can be precisely corrupted; 
(2)  this  scheme  requires  extra  bytes  for  the  accented  string. 
Reallocating larger buffers is not always easy when we work on 
legacy  code.  It  may  cause  compatibility  problems,  and  requires 
source code understanding in order to free these buffers correctly.  
However,  except  these  potential  concerns,  we  believe  that 
“accenting”  is  a  high-level  idea  which  may  have  several  valid 
implementations.       
6.  EVALUATIONS 
their 
The script accenting mechanism can be implemented on the 
current  version  of  IE  (version  7)  and  the  version  shipped  with 
Windows  XP  RTM  (version  6),  because 
isolation 
mechanisms have no significant difference. Currently, we choose 
IE version 6 as the platform to prototype the technique because 
most known cross-frame bugs have been patched individually in 
IE version 7. In this section, we evaluate the effectiveness of our 
defense  against  real  attacks  in  the  past.  Because  the  script 
accenting is a generic technique, we believe that it will also be 
effective  against  this  type  of  attacks  discovered  in  the  future. 
This  section  also  presents  the  evaluation  results  about  the 
transparency  and  the  performance  overhead  of  our  defense 
mechanism. 
6.1  Protection 
implementation  of 
We  now  revisit the attack  scenarios  discussed  in  Section  4 
and demonstrate how the script accenting mechanism can defeat 
all these attacks. Also, these examples support our argument that 
the  correct 
the  accenting/de-accenting 
operations  is  significantly  more  robust  than  that  of  the  current 
frame-based  isolation  mechanism.  While  the  latter  attempts  to 
enforce a global property about how information is propagated in 
the  system,  the  former  focuses  on  the  more  tractable  task  of 
enforcing local properties at a few instrumentation locations.   
Attack  1  Revisited. As shown in Figure 2, the attack is to 
exploit a path that causes Windows Explorer to send a piece of 
script supplied by the malicious frame to the victim frame. It is 
very hard for IE developers to anticipate that Windows Explorer, 
which  is  a  component  outside  IE,  can  be  used  to  relay  the 
javascript-URL between two IE frames.  
The  same  attack  was  launched  against  our  IE  executable 
with  the  script  accenting  in  place.  When  the  script  executed 
open(“file:javascript:doEvil”,”frame2”),  we 
observed that the function InvokeNavigation gets the URL 
argument file:javascript:doEvil (see Figure 6 for the 
call  graph),  which  was  not  accented  because  the  URL  is  not  a 
javascript-URL.  The  URL  is then  passed  to  Windows  Explorer, 
corresponding  to  the  cloud  of  complicated  navigation  logic  in 
Figure  6.  Windows  Explorer  removed  the  “file:”  prefix  and 
handled 
the  URL 
javascript:doEvil to frame2, which is the receiver frame. 
javascript-URL,  so 
it  passed 
it  as  a 
Before the compilation of the string doEvil, the accent key of 
frame2  is  used  to  de-accent  the  string.  Because  no  accenting 
operation  had  been  performed  on doEvil in the  sender  frame, 
the de-accenting operation makes it illegible for the compilation, 
and thus the attack is thwarted.  
Attack  2  Revisited. Attack 2 exploits the function aliasing 
to  confuse  Frame1  about  which  frame  really  initiated  the 
“location.assign” call (see Figure 3). Because of function 
aliasing,  the  timer  for  delayed  execution,  and  the  navigation 
happening  in  the  meanwhile,  the  execution  path  leading  to  the 
attack is highly convoluted.  
When  the  attack  was  launched  against  our  IE  executable, 
steps (1) – (3) of the attack are unaffected by the script accenting 
mechanism.  At  step  (4),  despite  the  confusion  caused  by  the 
aliasing of location.assign, our rule of script ownership is 
straightforward to conform to – the string doEvil was supplied 
by  the  script  running  in Frame2,  so  it  was  accented  using  the 
key  of  http://evil.  This  accented  version  of  the  string  doEvil 
was  then  de-accented  using  the  key  of  http://payroll  at  the 
receiver frame Frame1, and failed to be compiled. 
Attack  3  Revisited.  In  Attack  3,  because  of  the  confusing 
navigation  statement,  the  cross-frame  check  is  erroneously 
performed  to  examine  if  frame2  can  navigate  frame1  to  a 
javascript-URL.  This  is  a  wrong  check  because  frame0,  not 
frame2, is the real initiator of the navigation. 
When  the  attack  was  replayed  on  our  IE  executable,  there 
was no confusion about the accenting policy. Frame0 supplied 
javascript-URL,  so  Frame0’s  key,  corresponding 
the 
to 
http://evil, was used in the accenting operation. When this URL is 
received  by  Frame1,  it  was  de-accented  using  the  key  of 
http://payroll, and thus the attack was not effective. 
Attack  4  Revisited.  Attack 4 exploits the  semantics of  user 
events. The script in Frame0 can reference to the DOM objects in 
frame1  through event.srcElement,  and  therefore  does  not 
need to pass the cross-frame check performed by the window proxy 
between frame0  and frame1.  
Our  IE  executable  defeated  this  attack  because  of  the 
accenting of object name queries. The script in frame0 was able 
to  reference  to  event.srcElement,  which  is  an  alias  of  an 
object in frame1. However, because of the mismatch between the 
DOM key and the script key (see Figure 7), the script cannot access 
to any attribute/method/sub-object of the object. Therefore, merely 
obtaining the cross-frame object reference is useless. This is similar 
to  the  situation  in  a  C  program  where  a  pointer  references  to  a 
memory location that is not readable, writable or executable, and 
any dereference of the pointer results in a memory fault.   
6.2  Impossibility of XOR Probing Attacks 
the  accent  keys 
Because  our  current  implementation  uses  XOR  (⊕)  as  the 
primitive  operation  for  accenting,  the  security  relies  on  the 
invisibility  of 
the  attacker’s  script. 
Hypothetically, if the attacker’s script had the knowledge about katk 
⊕ kvtm, where katk is the accent key of the attacker frame and kvtm is 
the accent key of the victim frame, then the attacker can send the 
script “doEvil ⊕ (katk ⊕ kvtm)” to the victim frame, which will be 
accented and then deaccented to “doEvil”. Therefore, a caveat of 
XOR-based security approach is that the attacker might have smart 
methods to efficiently guess the value of (katk ⊕ kvtm). 
Remember  that  the  accent  keys  are  four-byte  words.  The 
attacker could guess the first two bytes of (katk ⊕ kvtm) and send the 
to 
script  (“//xx”  ⊕  (katk ⊕  kvtm)) to  the victim frame. If the guess is 
correct, the script will be compiled correctly because “//” denote a 
comment line in javascript. If the guess is incorrect, a syntax error 
will be generated by the victim frame. If the attacker can catch the 
syntax errors, he/she can successfully guess the first two bytes in 
65536  attempts.  Then  he/she  can  probe  the  third  byte  by  using 
“;//x” in 256 attempts, and the fourth byte by using “;;//” in another 
256 attempts. 
Although the above probing attack seems plausible at the first 
glance,  it  is  not  effective  for  two  reasons.  First,  we  observe  that 
scripts in IE are always represented using wide-characters, which 
means  the  string  “//”  is  already  four-byte  long.  It  requires  2564 