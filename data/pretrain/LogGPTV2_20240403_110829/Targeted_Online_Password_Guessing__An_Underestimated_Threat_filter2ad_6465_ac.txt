ﬁnd that 99.29% of 000webhost passwords include both letters and
digits, indicating that this site enforces a password creation policy
that requires passwords to include both letters and digits. This can
also be corroborated by Table 5 where all top-10 000webhost
passwords are composed of both letters and digits. Similarly, we
ﬁnd that CSDN requires passwords to be of length 8+.
3.3 Password reuse
While users have to maintain probably several times as many
password accounts as they did 10 years ago, human-memory ca-
pacity remains stable. As a result, users tend to cope by reusing
passwords across different services [16,32]. Several empirical stud-
ies [5, 12] have explored the password reuse behaviors of English
and European users, yet as far as we know, no empirical results
have been reported about Chinese users, who reached 668 million
by Dec., 2015 [11] and account for about 25% (and the largest
fraction) of the world’s Internet population.
To ﬁll this gap, we intersect 12306 with Dodonew by matching
email, and further eliminate the users with identical password pairs.
This produces a new list 12306&Dodonew with two non-identical
sister passwords for each user. Similarly, we obtain two more
intersected Chinese password lists and three intersected English
Figure 4: Using the Levenshtein-distance similarity metric to
measure the similarity of two passwords chosen by the same
user across different services. Results suggest that most users
modify passwords in a non-trivial way.
We employ the widely accepted Levenshtein-distance metric
to measure the similarity between two different passwords of a
given user. Fig. 4 shows that, sister passwords of Chinese users
generally have higher similarity than English users, implying that
Chinese users modify passwords less complexly. About 30% of
the non-identical Chinese password pairs have similarity scores
in [0.7, 1.0], while this ﬁgure for our English password pairs is
less than 20%. We also employ the longest-common-subsequence
metric for measurement. Both metrics show similar results. Our
results imply that the majority of users modify passwords in a non-
trivial approach, and it would be challenging to model such users’s
modiﬁcation behaviors.
We have observed that our English users reuse less and modify
passwords more complexly. A plausible reason for this observation
is that the two english sites are not normal: Rootkit is a hacker fo-
rum and 000webhost is mainly used by web administrators. There-
fore, the users of both sites are likely to be more security-savvy
than normal users. Thus, the lists Rootkit&000webhost,
Rootkit&Yahoo and 000webhost&Yahoo will show more
secure reuse behaviors than that of normal English/Chinese users.
In 2014, Das et al. [12] found that the fraction of identical sister
PW pairs of normal English users is 43%, which roughly accords
with our Chinese users yet 2(cid:24)6 times higher than our English users.
They also showed that about 30% of their non-identical English PW
pairs have similarity scores in [0.7, 1.0], well in accord with that of
our Chinese users. Moreover, the survey results on password reuse
behaviors of normal Chinese users [32] are largely consistent with
the survey results on normal English users [12]. Both empirical and
survey results suggest that normal Chinese and English users have
similar reuse behaviors, while our English users would be good
representatives of security-savvy users.
Table 6: Percentages of users building passwords with (and only with) their own heterogeneous personal information†
(129,303)
(69,330)
(214 )
Given_name (lei, john)
Full_name (lei wang, john smith)
Typical usages of personal information (examples) PII-Dodonew PII-126
PII-CSDN PII-12306 PII-Rootkit PII-Yahoo PII-000web-
(161,510)
(30,741)
(77,439)
host(2,950)
4.68 0.82
3.00 1.32 4.85 1.81 5.02 1.13 1.38 0.75 2.34 1.87 2.44 1.32
Family_name (wang, smith) 11.15 0.01
6.16 0.00 9.75 0.00 11.23 0.00 2.28 0.78 4.67 1.87 3.73 1.46
6.49 0.07
4.10 0.12 6.26 0.08 6.61 0.07 0.49 0.07 0.93 0.00 0.75 0.20
Abbr. full_name (wl, lwang, js, jsmith) 13.64 0.02
6.36 0.00 9.42 0.00 13.13 0.00 0.15 0.01 0.00 0.00 0.20 0.00
3.12 1.00
3.70 2.77 6.29 5.16 4.33 1.77 0.08 0.06 0.47 0.00 0.10 0.07
8.92 0.00
8.84 0.01 11.37 0.00 10.78 0.00 0.75 0.01 1.40 0.00 1.12 0.00
8.32 0.00 10.48 0.02 11.84 0.00 10.03 0.00 0.44 0.01 0.47 0.00 0.58 0.00
2.60 1.71 2.89 1.45 3.31 1.12 0.10 0.05 0.00 0.00 0.20 0.14
2.37 0.59
0.05 0.05 0.03 0.03 0.14 0.14 0.00 0.00 0.00 0.00 0.00 0.00
0.08 0.08
0.03 0.02 0.05 0.05 0.15 0.14 0.00 0.00 0.00 0.00 0.00 0.00
0.11 0.11
0.07 0.07 0.13 0.11 0.17 0.16 0.00 0.00 0.00 0.00 0.00 0.00
0.17 0.17
0.55 0.22
0.20 0.07 0.22 0.07 0.64 0.25 0.01 0.00 0.00 0.00 0.00 0.00
0.05 0.03 0.08 0.04 0.16 0.12 0.01 0.00 0.00 0.00 0.00 0.00
0.12 0.09
0.54 0.38 0.61 0.43 1.96 1.32 1.59 0.92 2.34 1.40 2.20 1.32
1.54 1.14
2.52 1.60 4.35 2.48 3.03 1.82 0.77 0.44 4.21 1.87 1.32 0.78
5.07 3.07
0.48 0.45 0.50 0.45 0.07 0.01 — — — — — —
0.10 0.10
0.16 0.13
0.04 0.02 0.03 0.02 0.16 0.12 0.00 0.00 0.00 0.00 0.00 0.00
0.51 0.03 0.84 0.03 1.65 0.17 0.06 0.01 0.00 0.00 0.03 0.00
1.49 0.22
Birthday(19820607, 06071982, 07061982)
Year of bithday (1982)
Date of bithday (0607, 0706)
Abbr. bithday(198267, 671982, 761982, 820607, 060782)
Family_name+bithday (wang19820607, smith06071982)
Family_name+Abbr. bithday(cid:192)(wang198267, smith671982)
Family_name+Abbr. bithday`(wang820607, smith060782)
Family_name+year of birth (wang1982, smith1982)
Family_name+date of birth (wang0607, smith0607)
User name (icemoon12, bluebirdz)
Email_preﬁx (PI:EMAIL)
Phone number (11-digit Chinese mobile number 13511336677)
‘a’+birthday(a19820607, a06071982, a07061982)
Full_name+1 (wanglei1, johnsmith1)
†All the decimals in the table use ‘%’ as the unit. For instance, 4.68 in the top left corner means that 4.68% of the 161,510 PII-associated Dodonew users
employ their full name to build passwords; 0.82 means that 0.82% of these 161,510 Dodonew users’ passwords are just their full names.
(a) Gender on freq. distribution.
(b) Age on length distribution.
Figure 5: Impact of type-2 PII on user password creation. Both
gender and age show tangible impacts.
3.4 Password containing personal info
We show in Table 6 how often users employ their own PII to
build passwords. Since some password lists have no PII (see Table
3), we correlate them with the PII datasets of the same language
in Table 4 by matching email. As a result, seven PII-associated
password lists are produced, and they are much more diversiﬁed
than those in [20]. The sample size of each PII-associated dataset
is shown in the ﬁrst row of Table 4. As expected, highly heteroge-
neous PII becomes components of passwords, and users like to use
names, birthdays and their variations. Particularly, a non-negligible
fraction of users employ just their full names (0.75%(cid:24)1.87%)
as passwords, and 1.00%(cid:24)5.16% of Chinese users use just their
birthdays as passwords. Surprisingly, email and user name prevail
in passwords of both user groups, ranging from 0.77% to 5.07%
and from 0.54% to 2.34%, respectively. In comparison, English
users exhibit a more secure behavior in PII usages, for our English
users represent security-savvy ones.
−6). Similar results are found in all other datasets.
Fig. 5 illustrates the impact of type-2 PII : (1) passwords of
Dodonew female users are more concentrated; (2) passwords of
Dodonew users in age(cid:20)24 and age(cid:21)46 have quite similar length
distributions (pairwise (cid:31)2 test, p-value= 0.009), while users in
age 25(cid:24)45 are signiﬁcantly different in length distributions (p-
values<10
Type-based PII matching. To achieve accuracy in PII recognition,
we propose a type-based PII segment matching method: besides
the traditional PCFG-based L, D, S tags [35], we employ a few
kinds of PII tags (e.g., N for name and B for birthday), and each
subscript number of our PII tags stands for a particular sub-type of
one kind of PII considered. For instance, N1 denotes the usage of
family name (e.g., li), B5 denotes the usage of year in birthday
(e.g., 1982) and so on. More details will be given in Sec. 4.1.
This is inherently different from the length-based PII matching
method given in an independent study [20]. To avoid mismatching,
only PII segments with len (cid:21) 3 are considered in [20]. For
instance, a match with any length 3+ substring (e.g., 195, 952,
520) of a birthday 19520123 will be considered as a birthday
match. However, this introduces both under-estimations and over-
estimations in PII matching. For example, the password li.520
of a user named “Wei Li” with birthday 19520123” will be tagged
as L2S1Birth3, because the family name li is of length <3. As
20% of the top-50 Chinese family names are with length <3 (e.g.,
li, wu and he ), a large fraction of users’ name usages may be
under-estimated by [20]. For instance, 30,926 (23.9%) of the 13K
12306 users are with a family name len (cid:20)2, and 4,346 of these
30,926 users indeed use their family name in passwords, yet this
fact cannot be captured in [20].
On the other hand, the segments (e.g.,123, 520 and 201) in
top popular digital passwords (e.g., 123456, 123456789,
5201314) would often coincide with user birthdays and phone
numbers, leading to over-estimations of their usages in passwords.
As we will show in Sec. 4.1, this length-based matching method
also introduces a weakness in the guess generation process when
performing cracking, while either increasing or decreasing their
length threshold will not eliminate the problem.
Summary. Our PII-associated password corpus is so far the largest
and most diversiﬁed ever collected for evaluating targeted online
guessing. Particularly, it, for the ﬁrst time, covers (security-savvy)
English users. While users’ three vulnerable behaviors might be
potentially exploited to improve cracking, our results show that
varied circumstances (e.g., language, service and policy), non-
trivial transformation rules and highly heterogeneous PII all would
make it a challenging task to automate this process, especially
when given a limited guessing number (e.g., 100 by NIST [8, 18]).
4.
TARGUESS: A FRAMEWORK FOR
TARGETED ONLINE GUESSING
We now propose TarGuess, a practical framework that effec-
tively addresses the realistic yet challenging problem of modeling
various targeted online guessing scenarios.
As shown in Fig. 6, TarGuess consists of three phases (i.e.
preparing, training and guessing). The design of the ﬁrst and third
phases is straightforward, and the main task lies in the second one.
TarGuess captures four types of the most representative targeted
online guessing scenarios, with each type based on varied kinds
of personal information available to A (see Table 2):
(i) only
Figure 6: An architectural overview of the TarGuess.
Figure 7: TarGuess-I: an illustration.
type-1 PII; (ii) one sister password; (iii) combination of i and
ii; (iv) combination of iii and type-2 PII. To model these four
scenarios, we suggest four guessing models (I(cid:24)IV) by leveraging
a number of probabilistic techniques such as PCFG, Markov and
Bayesian theory. We also show that, with TarGuess-I(cid:24)IV, the three
remaining scenarios can also be well addressed.
4.1 TarGuess-I
TarGuess-I aims to online guess a user U’s passwords by ex-
ploiting U’ some type-1 PII (e.g., name and birthday, not gender).
It builds on Weir et al.’s PCFG-based algorithm [35] which has
been shown a great success in dealing with trawling guessing
scenarios. In the training phase of [35], each password is seen as a
combination of letter(L)-, digit(D)- and symbol(S)- segments. For
example, loveyou@1314 is parsed into the L-segment “lovey-
ou”, S-segment “@” and D-segment “1314”, and its base structure
is L7S1D4; wanglei@1982 is also parsed into L7S1D4.
Our new algorithm. To capture PII semantics, besides the L, D,
S tags as with PCFG [35], we introduce a number of type-based
PII tags (e.g., N1(cid:24)N7 and B1(cid:24)B10). For a type-based PII tag,
its subscript number stands for a particular sub-type of one kind
of PII usages but not the length matched, as opposed to the L,
D, S tags. For instance, N stands for name usages, while N1 for
the usage of full name, N2 for the abbr. of full name (e.g., lw
from “lei wang”), (cid:1)(cid:1)(cid:1) ; B stands for birthday usages, B1 for full
birthday in YMD format (e.g., 19820607), B2 for full birthday in
MDY, (cid:1)(cid:1)(cid:1) . This gives rise to a PII-enriched context-free grammar
GI = (V; (cid:6);S;R), where:
1) S 2 V is the start symbol.
2) V = fS; L, D, S; N1, (cid:1)(cid:1)(cid:1) , N7; B1, (cid:1)(cid:1)(cid:1) , B10; A1, A2, A3; E1,
E2, E3; P1, P2; I1, I2, I3} is a ﬁnite set of variables,1 where:
(1) N1 and N2 have been speciﬁed earlier, N3 for family name
(e.g., wang), N4 for given name, N5 for the 1st letter of the
given name + family name (e.g., lwang), N6 for last name+
the 1st letter of the given name (e.g., wangl), N7 for family
name with its 1st letter capitalized (e.g., Wang); (2) B1 and
B2 have been speciﬁed earlier, B3 stands for full birthday in
DMY (e.g., 07061982), B4 for the date in birthday, B5 for the
year in birthday, B6 for Year+Month (e.g., (e.g., 198206), B7
1The number of PII-based variables and their speciﬁc deﬁnitions depend
on the nature of the PII to be trained (e.g., phone number in US is 10 digits
while 11 digits in China) and on the granularity the attacker A prefers (e.g.,
A may prefer 4 types of name usages but not 7 as we do). Here we give
a typical deﬁnition for attacking Chinese users, and it is easily tailored to
other user groups. Besides, it’s feasible to generalize GI by pre-deﬁning
a number of running-modes: Chinese-mode, US-mode, German-mode, etc.
Then, GI needs no customization, and the inputs to the algorithm TarGuess-
I are the victim’s PII-attributes plus a running-mode.
for Month+Year (e.g., 061982), B8 for the last two digits of
year + date in MD format (e.g., 820607), B9 for date in MD
format + the last two digits of year (e.g., 060782), B10 for
date in DM format + the last two digits of year (e.g., 070682);
(3) A stands for account name usages, A1 for full account
name (e.g., icemoon12), A2 for the (ﬁrst) letter-segment
of account name (e.g., icemoon), A3 for the (ﬁrst) digital-
segment of account name (e.g., 12); (4) E stands for email
preﬁx usages, E1 for the full email preﬁx (e.g., loveu1314
from PI:EMAIL), E2 for the ﬁrst letter-
segment of email preﬁx (e.g., loveu), E3 for the ﬁrst digital-
segment of account name (e.g., 1314); (5) P stands for mobile
phone number usages, P1 for the full number, P2 for the ﬁrst
three digits, P3 for last four digits; (6) I stands for the Chinese
Notional Identiﬁcation number, I1 for the last 4 digits, I2 for
the ﬁrst 3 digits, I3 for the ﬁrst 6 digits.2
3) (cid:6)={95 printable ASCII codes, N ullg is a ﬁnite set disjoint
from V and contains all the terminals of GI.
4) R is a ﬁnite set of rules of the form A ! (cid:11), with A 2 V and
(cid:11) 2 V [ (cid:6) (see Fig. 7).
Figure 8: A comparison of TarGuess-I (and its variants) with
Personal-PCFG [20], trained on the 50% of 12306 dataset and
tested on the remaining 50%. Both TarGuess-I and Personal-
PCFG [20] employ six kinds of the 12306 type-1 PII, while
TarGuess-I′ eliminates phone # and NID, TarGuess-I′′ further
eliminates email and user name, and TarGuess-I′′′ further
eliminates birthday. TarGuess-I and I′ greatly outperform [20].
A probabilistic context-free grammar (PCFG) is a CFG that, for
a speciﬁc left-hand side (LHS) variable (e.g., L4), all the proba-
bilities associated with its rules (e.g., L4 ! love and L4 !
Suny) can add up to 1 [35]. This condition is satisﬁed by GI.
2Our deﬁnitions are gained by recursively adjusting and training on the PII-