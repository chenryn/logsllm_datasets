title:Security in Plan 9
author:Russ Cox and
Eric Grosse and
Rob Pike and
David L. Presotto and
Sean Quinlan
USENIX Association
Proceedings of the
11th USENIX Security
Symposium
San Francisco, California, USA
August 5-9, 2002
© 2002 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Security in Plan 9
Russ Cox, MIT LCS
Eric Grosse, Bell Labs
Rob Pike, Bell Labs
Dave Presotto, Avaya Labs and Bell Labs
Sean Quinlan, Bell Labs
{rsc,ehg,rob,presotto,seanq}@plan9.bell−labs.com
some technical
Abstract
The security architecture of the Plan 9" operat-
ing system has recently been redesigned to
address
shortcomings. This
redesign provided an opportunity also to make
the system more convenient
to use securely.
Plan 9 has thus improved in two ways not usu-
ally seen together: it has become more secure
and easier to use.
The central component of the new architecture is
a per-user self-contained agent called factotum.
Factotum securely holds a copy of the user’s
keys and negotiates authentication protocols, on
behalf of the user, with secure services around
the network. Concentrating security code in a
single program offers several advantages includ-
ing: ease of update or repair to broken security
software and protocols; the ability to run secure
services at a lower privilege level; uniform man-
agement of keys for all services; and an opportu-
nity to provide single sign on, even to unchanged
legacy applications. Factotum has an unusual
architecture: it is implemented as a Plan 9 file
server.
1. Introduction
Secure computing systems face two challenges:
first, they must employ sophisticated technology
that is difficult to design and prove correct; and
second, they must be easy for regular people to
use. The question of ease of use is sometimes
neglected, but it is essential: weak but easy-to-
use security can be more effective than strong but
difficult-to-use security if it is more likely to be
used. People lock their front doors when they
leave the house, knowing full well that a burglar
is capable of picking the lock (or avoiding the
door altogether); yet few would accept the cost
and awkwardness of a bank vault door on the
house even though that might reduce the proba-
bility of a robbery. A related point is that users
need a clear model of how the security operates
(if not how it actually provides security) in order
to use it well; for example, the clarity of a lock
icon on a web browser is offset by the confusing
and typically insecure steps for installing X.509
certificates.
The security architecture of the Plan 9 operating
system [11] has recently been redesigned to
make it both more secure and easier to use. By
security we mean three things: first, the business
of authenticating users and services; second, the
safe handling, deployment, and use of keys and
other secret information; and third, the use of
encryption and integrity checks to safeguard
communications from prying eyes.
The old security architecture of Plan 9 had sev-
eral engineering problems in common with other
operating systems. First, it had an inadequate
notion of security domain. Once a user provided
a password to connect to a local file store, the
system required that the same password be used
to access all the other file stores. That is, the
system treated all network services as belonging
to the same security domain.
the algorithms and protocols used in
Second,
authentication, by nature tricky and difficult to
get right, were compiled into the various applica-
tions, kernel modules, and file servers. Changes
and fixes to a security protocol required that all
components using that protocol needed to be
recompiled, or at least relinked, and restarted.
Third, the file transport protocol, 9P [12], that
forms the core of the Plan 9 system, had its
authentication protocol embedded in its design.
This meant that fixing or changing the authenti-
cation used by 9P required deep changes to the
system. If someone were to find a way to break
the protocol, the system would be wide open and
very hard to fix.
These and a number of lesser problems, com-
bined with a desire for more widespread use of
encryption in the system, spurred us to rethink
the entire security architecture of Plan 9.
The centerpiece of the new architecture is an
agent, called factotum, that handles the user’s
keys and negotiates all security interactions with
system services and applications. Like a trusted
assistant with a copy of
the owner’s keys,
factotum does all the negotiation for security
and authentication. Programs no longer need to
be compiled with cryptographic code;
instead
they communicate with factotum agents that
represent distinct entities in the cryptographic
exchange, such as a user and server of a secure
service. If a security protocol needs to be added,
deleted, or modified, only factotum needs to be
updated for all system services to be kept secure.
Building on factotum, we modified secure ser-
vices in the system to move user authentication
code into factotum; made authentication a sepa-
rable component of
the file server protocol;
deployed new security protocols; designed a
secure file store, called secstore, to protect our
keys but make them easy to get when they are
needed; designed a new kernel module to support
transparent use of Transport Layer Security
(TLS) [3]; and began using encryption for all
communications within the system. The overall
architecture is illustrated in Figure 1a.
Secure protocols and algorithms are well under-
stood and are usually not the weakest link in a
system’s security.
In practice, most security
problems arise from buggy servers, confusing
software, or administrative oversights. It is these
practical problems
that we are addressing.
Although this paper describes the algorithms and
protocols we are using, they are included mainly
for concreteness. Our main intent is to present a
simple security architecture built upon a small
trusted code base that is easy to verify (whether
by manual or automatic means), easy to under-
stand, and easy to use.
Although it
is a subjective assessment, we
believe we have achieved our goal of ease of use.
That we have achieved our goal of improved
security is supported by our plan to move our
currently private computing environment onto
the Internet outside the corporate firewall. The
rest of this paper explains the architecture and
how it is used, to explain why a system that is
Secstore
F T
P T
Terminal
Auth Server
F C
P C
CPU Server
F F
P F
File Server
Figure 1a. Components of the security architecture. Each
box is a (typically) separate machine; each ellipse a process.
The ellipses labeled F X are factotum processes;
those
labeled P X are the pieces and proxies of a distributed pro-
gram. The authentication server is one of several reposito-
ries for users’ security information that factotum processes
consult as required. Secstore is a shared resource for stor-
ing private information such as keys; factotum consults it
for the user during bootstrap.
easy to use securely is also safe enough to run in
the open network.
2. An Agent for Security
One of the primary reasons for the redesign of
the Plan 9 security infrastructure was to remove
the authentication method both from the applica-
tions and from the kernel. Cryptographic code is
large and intricate, so it should be packaged as a
separate component that can be repaired or modi-
fied without altering or even relinking applica-
tions and services that depend on it. If a security
protocol is broken, it should be trivial to repair,
disable, or replace it on the fly. Similarly, it
should be possible for multiple programs to use a
common security protocol without embedding it
in each program.
Some systems use dynamically linked libraries
(DLLs) to address these configuration issues.
The problem with this approach is that it leaves
security code in the same address space as the
program using it. The interactions between the
program and the DLL can therefore accidentally
or deliberately violate the interface, weakening
security. Also, a program using a library to
implement secure services must run at a privilege
level necessary to provide the service; separating
the security to a different program makes it pos-
sible to run the services at a weaker privilege
level, isolating the privileged code to a single,
more trustworthy component.
Following the lead of the SSH agent [20], we
give each user an agent process responsible for
holding and using the user’s keys. The agent
program is called factotum because of its simi-
larity to the proverbial servant with the power to
act on behalf of his master because he holds the
keys to all the master’s possessions. It is essen-
tial that factotum keep the keys secret and use
them only in the owner’s interest. Later we’ll
discuss some changes to the kernel to reduce the
possibility of factotum leaking information
inadvertently.
Factotum is implemented, like most Plan 9 ser-
vices, as a file server.
is conventionally
mounted upon the directory /mnt/factotum, and
the files it serves there are analogous to virtual
devices that provide access to, and control of, the
services of the factotum. The next few sections
describe the design of factotum and how it oper-
ates with the other pieces of Plan 9 to provide
security services.
It
2.1. Logging in
To make the discussions that follow more con-
crete, we begin with a couple of examples show-
ing how the Plan 9 security architecture appears
to the user. These examples both involve a user
gre logging in after booting a local machine.
The user may or may not have a secure store in
which all his keys are kept. If he does, factotum
will prompt him for the password to the secure
store and obtain keys from it, prompting only
when a key isn’t found in the store. Otherwise,
factotum must prompt for each key.
In the typescripts, \n represents a literal newline
character typed to force a default response. User
input is in italics, and long lines are folded and
indented to fit.
This first example shows a user logging in with-
out help from the secure store. First, factotum
prompts for a user name that the local kernel will
use:
user[none]: gre
(Default responses appear in square brackets.)
The kernel then starts accessing local resources
and requests, through factotum, a user/password
pair to do so:
!Adding key: dom=cs.bell−labs.com
proto=p9sk1
user[gre]: \n
password: ****
Now the user is logged in to the local system,
and the mail client starts up:
!Adding key: proto=apop
server=plan9.bell−labs.com
user[gre]: \n
password: ****
Factotum is doing all the prompting and the
applications being started are not even touching
the keys. Note that it’s always clear which key is
being requested.
Now consider the same login sequence, but in the
case where gre has a secure store account:
user[none]: gre
secstore password: *********
STA PIN+SecurID: *********
That’s the last gre will hear from factotum
unless an attempt is made to contact a system for
which no key is kept in the secure store.
2.2. The factotum
Each computer running Plan 9 has one user id
that owns all the resources on that system (cid:20) the
scheduler, local disks, network interfaces, etc.
That user, the host owner, is the closest analogue
in Plan 9 to a Unix root account (although it is
far weaker; rather than having special powers, as
its name implies the host owner is just a regular
user that happens to own the resources of the
local machine). On a single-user system, which
we call a terminal, the host owner is the id of the
terminal’s user. Shared servers such as CPU
servers normally have a pseudo-user that initially
owns all resources. At boot time, the Plan 9 ker-
nel starts a factotum executing as, and therefore
with the privileges of, the host owner.
New processes run as the same user as the pro-
cess which created them. When a process must
take on the identity of a new user, such as to pro-
vide a login shell on a shared CPU server, it does
so by proving to the host owner’s factotum that
it is authorized to do so. This is done by running
an authentication protocol with factotum to
prove that the process has access to secret infor-
mation which only the new user should possess.
For example, consider the setup in Figure 1a. If
a user on the terminal wants to log in to the CPU
server using the Plan 9 cpu service [12], then P T
might be the cpu client program and P C the cpu
server. Neither P C nor P T knows the details of
the authentication. They do need to be able to
shuttle messages back and forth between the two
factotums, but this is a generic function easily
performed without knowing, or being able to
extract, secrets in the messages. P T will make a
network connection to P C. P T and P C will then
relay messages between the factotum owned by
In fact,
the user, F T, and the one owned by the CPU
server, F C, until mutual authentication has been
established. Later sections describe the RPC
between factotum and applications and the
library functions to support proxy operations.
The kernel always uses a single local instance of
factotum, running as the host owner, for its
authentication purposes, but a regular user may
start other factotum agents.
the
factotum representing the user need not be run-
ning on the same machine as its client. For
instance, it is easy for a user on a CPU server,
through standard Plan 9 operations, to replace the
/mnt/factotum in the user’s private file name
space on the server with a connection to the
factotum running on the terminal.
(The usual
file system permissions prevent interlopers from
doing so maliciously.) This permits secure oper-
ations on the CPU server to be transparently vali-
dated by the user’s own factotum, so secrets
need never leave the user’s terminal. The SSH
agent [20] does much the same with special SSH
protocol messages, but an advantage to making
our agent a file system is that we need no new
mechanism to access our remote agent; remote
file access is sufficient.
Within factotum, each protocol is implemented
as a state machine with a generic interface, so
protocols are in essence pluggable modules, easy
to add, modify, or drop. Writing a message to
and reading a message from factotum each
require a separate RPC and result in a single state
transition. Therefore factotum always runs to
completion on every RPC and never blocks wait-
ing for input during any authentication. More-
over, the number of simultaneous authentications
is limited only by the amount of memory we’re
willing to dedicate to representing the state
machines.
Authentication protocols are implemented only
within factotum, but adding and removing pro-
tocols does require relinking the binary, so
factotum processes (but no others) need to be
restarted in order to take advantage of new or
repaired protocols.
At
the time of writing, factotum contains
authentication modules for the Plan 9 shared key
protocol
(p9sk1), SSH’s RSA authentication,
passwords in the clear, APOP, CRAM, PPP’s
CHAP, Microsoft PPP’s MSCHAP, and VNC’s
challenge/response.
two
and writes
that
hash
driver
implements
userid1@userid2@random-string,
2.3. Local capabilities
A capability system, managed by the kernel, is
used to empower factotum to grant permission
to another process to change its user id. A kernel
device
files,
/dev/caphash and /dev/capuse. The write-
only file /dev/caphash can be opened only by
the host owner, and only once. Factotum opens
this file immediately after booting.
To use the files, factotum creates a string of the
form
uses
SHA1 HMAC to hash userid1@userid2 with key
random-string,