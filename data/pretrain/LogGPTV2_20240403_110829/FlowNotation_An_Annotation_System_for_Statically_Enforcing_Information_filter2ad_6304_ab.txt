### Overview of Cryptographic and Secure Computation Implementations

This document discusses several cryptographic and secure computation implementations, including:

- **Pool Framework with Secure Computation Protocol**: A system for secure computation [27, 28].
- **Pantaloons RSA**: A popular RSA implementation in C, available on GitHub [14].
- **MiniAES**: A high-performance AES multiparty computation implementation [6, 7].
- **Bellare-Micali OT**: An implementation of the Bellare-Micali oblivious transfer protocol [3].
- **Kerberos ASN.1 Encoder**: The ASN.1 encoder module from Kerberos [1].
- **Gnuk OpenPGP-do**: A portion of the OpenPGP module from Gnuk [22].
- **Tiny SHA3**: A reference implementation of SHA3 [17].

### Case Study: FlowNotation for Code Analysis

FlowNotation is a tool that can be used to identify flaws in large, automatically generated code segments, which would be challenging for a programmer to manually analyze. For example, the SCDtoObliv tool [24] generates highly performant floating-point circuits, but the resulting circuit files are difficult to interpret and debug.

We discovered a flaw in the subtraction circuit, which was supposed to compute "A + (−B)". However, the function `__obliv_c__flipBit`, responsible for sign flipping, was incorrectly annotated, leading to the computation of "(−A) + B" instead. This resulted in the negation of the correct answer. Our tool reported an error, as the sign bit of the first operand, rather than the second, was passed to `__obliv_c__flipBit`.

### Evaluation Results

The table below summarizes the evaluation results for various libraries and their associated policies:

| Library                       | Secrecy | Integrity | Sequencing |
|-------------------------------|---------|-----------|------------|
| Obliv-C Library               | 2       | 4         | 7          |
| SCDtoObliv FP Circuits        | 4       | 4         | 5          |
| ACK Oqueue                    | 9       | 5         | 2          |
| Secure Mux Application        | 5       | 3         | 1          |
| Pool Framework                | 4       | 7         | 3          |
| Pantaloons RSA                | 2       | 2         | 4          |
| MiniAES                       | 3       | 2         | 3          |
| Bellare-Micali OT             | 0       | 3         | 1          |
| Kerberos ASN.1 Encoder        | 0       | 7         | 4          |
| Gnuk OpenPGP-do               | 4       | 3         | 2          |
| Tiny SHA3                     | 0       | 5         | 0          |

### Related Work

#### C Program Analysis Tools
- **CQual [13]**: Both theoretical foundations and practical applications of type qualifiers have been published [4, 5, 11, 12, 26]. Our annotations are type qualifiers, and our work shares the goal of producing a lightweight tool to check simple secrecy and integrity properties.

#### Information Flow Type Systems
- **Information flow type systems** are well-studied. Several projects have extended existing languages to include information flow types (e.g., [15, 16]). Sabelfeld et al. provided a comprehensive summary in their survey paper [18]. Most information flow type systems do not deal with declassification, and we have not seen work where the sequence of labels is part of the information flow type like ours. We use a proof technique similar to FlowML [16] to prove a noninterference theorem that implies API sequencing.

#### Linear Types and Typestate
- **Sequencing policy** is related to other type systems that aim to enforce API contracts, such as typestate and linear types [2, 8, 19]. These systems model and check behaviors like balanced file operations. Unlike in typestate, the types on variables do not change in our system; when a part of a policy is fulfilled, a new variable takes on the rest of the policy.

### References

[1] 2017. Kerberos ASN.1 Encoder. https://github.com/krb5/krb5/tree/master/src/lib/krb5/asn.1. [Online].

[2] Jonathan Aldrich, Joshua Sunshine, Darpan Saini, and Zachary Sparks. 2009. Typestate-oriented Programming. In Proc. of (OOPSLA ’09).

[3] Mihir Bellare and Silvio Micali. 1989. Non-interactive Oblivious Transfer and Applications. In Proc. of (CRYPTO ’89).

[4] Pete Broadwell, Matt Harren, and Naveen Sastry. 2003. Scrash: A System for Generating Secure Crash Information. In Proc. of (SSYM’03).

[5] Brian Chin, Shane Markstrum, and Todd Millstein. 2005. Semantic type qualifiers. ACM SIGPLAN Notices 40, 6 (2005), 85–95.

[6] Ivan Damgård and Rasmus Zakarias. 2016. Fast Oblivious AES A Dedicated Application of the MiniMac Protocol. In AFRICACRYPT 2016.

[7] Ivan Damgård and Rasmus Zakarias. 2016. MiniAES Repository. https://github.com/AarhusCrypto/MiniAES. [Online].

[8] Robert DeLine and Manuel Fähndrich. 2001. Enforcing high-level protocols in low-level software. ACM SIGPLAN Notices 36, 5 (2001), 59–69.

[9] Jack Doerner. 2015. Absentminded Crypto Kit Repository. https://bitbucket.org/jackdoerner/absentminded-crypto-kit/. [Online].

[10] Jack Doerner and Abhi Shelat. 2017. Scaling ORAM for Secure Computation. In Proc. of (CCS ’17).

[11] David Evans. 1996. Static Detection of Dynamic Memory Errors. SIGPLAN Not. 31, 5 (May 1996), 44–53.

[12] Jeffrey Scott Foster and Alexander S Aiken. 2002. Type qualifiers: lightweight specifications to improve software quality. Ph.D. Dissertation. UC Berkeley.

[13] Jeffrey S. Foster, Manuel Fähndrich, and Alexander Aiken. 1999. A Theory of Type Qualifiers. SIGPLAN Not. 34, 5 (May 1999), 192–203.

[14] Michael McGee. 2011. Pantaloons/RSA Repository. https://github.com/pantaloons/RSA/. [Online].

[15] Andrew C Myers. 1999. JFlow: Practical mostly-static information flow control. In Proc. of (POPL ’99).

[16] François Pottier and Vincent Simonet. 2002. Information Flow Inference for ML. SIGPLAN Not. 37, 1 (Jan. 2002), 319–330.

[17] Markku-Juhani O. Saarinen. 2016. Tiny SHA3. https://github.com/mjosaarinen/tiny_sha3. [Online].

[18] A. Sabelfeld and A. C. Myers. 2003. Language-based information-flow security. IEEE Journal on Selected Areas in Communications 21, 1 (Jan 2003), 5–19.

[19] R. E. Strom and S. Yemini. 1986. Typestate: A programming language concept for enhancing software reliability. IEEE Transactions on Software Engineering SE-12, 1 (Jan 1986), 157–171.

[20] Dennis Volpano and Geoffrey Smith. 1997. A type-based approach to program security. In Proc. of (TAPSOFT ’97).

[21] A. C. C. Yao. 1986. How to generate and exchange secrets. In 27th Annual Symposium on Foundations of Computer Science (sfcs 1986). 162–167.

[22] NIIBE Yutaka. 2018. Gnuk. https://www.fsij.org/category/gnuk.html. [Online].

[23] Samee Zahur. 2015. Obliv-C Repository. https://github.com/samee/obliv-c/. [Online].

[24] Samee Zahur and Darion Cassel. 2015. SCDtoObliv Repository. https://github.com/samee/obliv-c/tree/obliv-c/SCDtoObliv. [Online].

[25] S Zahur and Evans D. 2015. Obliv-C: A Language for Extensible Data-Oblivious Computation. IACR Cryptology ePrint Archive (2015).

[26] Xiaolan Zhang, Antony Edwards, and Trent Jaeger. 2002. Using CQUAL for Static Analysis of Authorization Hook Placement. In Proc. of (USENIX ’02).

[27] Ruiyu Zhu, Yan Huang, and Darion Cassel. 2017. Pool Framework Repository. https://github.com/jimu-pool/PoolFramework/. [Online].

[28] Ruiyu Zhu, Yan Huang, and Darion Cassel. 2017. Pool: Scalable On-Demand Secure Computation Service Against Malicious Adversaries. In Proc. of (CCS ’17).

---

This revised version aims to provide a clear, coherent, and professional overview of the cryptographic and secure computation implementations, along with the case study and related work.