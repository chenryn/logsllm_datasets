title:LIPSIN: line speed publish/subscribe inter-networking
author:Petri Jokela and
Andr&apos;as Zahemszky and
Christian Esteve Rothenberg and
Somaya Arianfar and
Pekka Nikander
LIPSIN: Line Speed Publish/Subscribe Inter-Networking
Petri Jokela1, András Zahemszky1, Christian Esteve Rothenberg2,
Somaya Arianfar1, and Pekka Nikander1
1 Ericsson Research, NomadicLab, Finland
{petri.jokela, andras.zahemszky, somaya.arianfar, pekka.nikander}@ericsson.com
2 University of Campinas (UNICAMP), Brazil
PI:EMAIL
ABSTRACT
A large fraction of today’s Internet applications are inter-
nally publish/subscribe in nature; the current architecture
makes it cumbersome and inept to support them. In essence,
supporting eﬃcient publish/subscribe requires data-oriented
naming, eﬃcient multicast, and in-network caching. De-
ployment of native IP-based multicast has failed, and over-
lay-based multicast systems are inherently ineﬃcient. We
surmise that scalable and eﬃcient publish/subscribe will re-
quire substantial architectural changes, such as moving from
endpoint-oriented systems to information-centric architec-
tures.
In this paper, we propose a novel multicast forwarding
fabric, suitable for large-scale topic-based publish/subscribe.
Due to very simple forwarding decisions and small forward-
ing tables, the fabric may be more energy eﬃcient than the
currently used ones. To understand the limitations and po-
tential, we provide eﬃciency and scalability analysis via sim-
ulations and early measurements from our two implementa-
tions. We show that the system scales up to metropolitan
WAN sizes, and we discuss how to interconnect separate
networks.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network
Architecture and Design; C.2.6 [Computer-Communica-
tion Networks]: Internetworking
General Terms
Design
Keywords
Bloom ﬁlters, publish/subscribe, multicast, forwarding
1.
INTRODUCTION
Many networking applications are internally publish/ sub-
scribe in nature [8]; the actual acts of information creation
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’09, August 17–21, 2009, Barcelona, Spain.
Copyright 2009 ACM 978-1-60558-594-9/09/08 ...$10.00.
and consumption are decoupled in time and/or space, and
often there are multiple simultaneous receivers. For exam-
ple, RSS feeds, instant messaging, presence services, many
typical web site designs, and most middleware systems are
either based on a publish/subscribe-like information para-
digm or internally implement a publish/subscribe system.
In general, publish/subscribe [15] is a data dissemination
method which provides asynchrony between data producers
and consumers. Key ingredients include handling data itself
as a ﬁrst class citizen at the naming level, eﬃcient caching
to loosen the coupling between producers and consumers in
the time dimension, and multicast to eﬃciently disseminate
new data, including both user-published data and system-
internal metadata.
In addition to pure pub/sub applica-
tions, peer-to-peer storage systems and some data-center
applications may also beneﬁt from these ingredients [34, 42].
In topic based pub/sub networks, the number of topics is
large while each topic may have only a few receivers [24]. IP
multicast [13] and application level multicast have scalability
and eﬃciency limitations under such conditions. Similarly,
while multicast is a natural choice for data centers, it has the
drawback of requiring routers to maintain additional state
and performing costly address translations [42]. Hence, the
main challenge in eﬃcient pub/sub network design is how to
build a multicast infrastructure that can scale to the general
Internet and tolerate its failure modes while achieving both
low latency and eﬃcient use of resources.
In this paper, we propose a novel multicast forwarding
fabric. The mechanism is based on identifying links in-
stead of nodes and using Bloom ﬁlters [6] to encode source-
route-style forwarding information into the packet header,
enabling forwarding without dependency on end-to-end ad-
dressing. This provides native support for data-oriented
naming and in-network caching. The forwarding decisions
are simple and the forwarding tables are small, potentially
allowing faster, smaller, and more energy-eﬃcient switches
than exists today. The proposed model aims towards bal-
ancing the state between the packet headers and the network
nodes, allowing both stateless and stateful operations.
The presented method takes advantage of ”inverting” the
Bloom ﬁlter thinking [9]. Instead of maintaining Bloom ﬁl-
ters at the network nodes and checking if incoming packets
are included in the sets deﬁned by the ﬁlters, we put the
Bloom ﬁlters themselves in the packets and allow the nodes
on the path to determine which outgoing links the packet
should be forwarded to.
In addition to the design, we brieﬂy describe the two im-
plementations we have built and evaluate the scalability and
195eﬃciency of the proposed method with simulations. Further,
we give an indication of the potentially achievable speed
from our early measurements on our NetFPGA-based im-
plementation.
The rest of this paper is organized as follows. First, in
Section 2, we discuss the overall problem and outline the
proposed solution. In Section 3, we go into details of the de-
sign. Next, in Section 4, we provide scalability evaluation of
our forwarding fabric in networks up to metropolitan scales.
Section 5 discusses how to inter-connect multiple networks,
scaling towards Internet-wide systems, and Section 6 brieﬂy
describes our two implementations. Section 7 contrasts our
work with related work, and Section 8 concludes the paper.
2. BACKGROUND AND BASIC DESIGN
Our main focus in this paper is on a multicast forward-
ing fabric for pub/sub-based networking. First, we brieﬂy
describe the overall pub/sub architecture our work is based
on, and then present our forwarding solution, in the con-
text of that architecture. The presented solution, provid-
ing forwarding without end-to-end addressing, is a ﬁrst step
towards an environment preventing DDoS attacks, as the
data delivery is based on explicit subscriptions. Finally, at
the end of the section, we brieﬂy describe how our proposed
forwarding fabric could be used within the present IP archi-
tecture.
2.1 A pub/sub-based network architecture
In general, pub/sub provides decoupling in time, space,
and synchronization [15]. While publish/subscribe, as such,
is well known, it is most often implemented as an over-
lay. Our work is based on a diﬀerent approach where the
pub/sub view is taken to an extreme, making the whole sys-
tem based on it. In the work we rely on, inter-networking
is based on topic-based publish/subscribe rather than the
present send/receive paradigm [32, 39, 41].
The overall pub/sub architecture can be described through
a recursive approach, depicted in Figure 1. The same archi-
tecture is applied in a recursive manner on the top of itself,
each higher layer utilising the rendezvous, topology, and for-
warding functions oﬀered by the lower layers; the idea is
similar to that of the RNA architecture [20] and the one
described by John Day [12]. At the bottom of the architec-
ture lies the forwarding fabric, denoted as “forwarding and
more”, the main focus of this paper.
The structure can be divided into a data and control
plane. At the control plane, the topology system creates a
distributed awareness of the structure of the network, simi-
lar to what today’s routing protocols do. On the top of the
topology system lies the rendezvous system, which has the
responsibility of handling the matching between the pub-
lishers and subscribers. The rendezvous does not need to
diﬀer substantially from other topic-based pub/sub systems;
cf. [15, 23, 36]. Whenever it identiﬁes a publication that has
both a publisher (or an up-to-date cache) and one or more
active subscribers, it requests the topology system to con-
struct a logical forwarding tree from the present location(s)
of the data to the subscribers and to provide the publisher
(or the caches) with suitable forwarding information for the
data delivery. While being aware of the scalability require-
ments for rendezvous and topology systems, we do not de-
scribe them in details, but refer to our ongoing work in these
areas [41, 45].
Rendezvous
Topology
Forwarding and more
Rendezvous
T r a n s p o r t
Topology
Forwarding and more
Rendez-(cid:30)(cid:30)(cid:30)(cid:30)(cid:30)(cid:30)
vous
(cid:30)Topol-
ogy
Error
correction
Frag-
(cid:30)(cid:30)(cid:30)mentation
Caching(cid:30)(cid:30)(cid:30)
 (cid:30)(cid:30)Network 
(cid:30)(cid:30)(cid:30)(cid:30)coding
For-
war-
ding
Figure 1: Rendezvous, Topology, Forwarding
The data plane takes care of forwarding functionality as
well as traditional transport functions, such as error detec-
tion and traﬃc scheduling. In addition to that, a number of
new network functions are envisioned (referred to as more),
such as opportunistic caching [14, 40] and lateral error cor-
rection [3].
The data and control plane functions will work in concert,
utilizing each other in a component wheel [41], similar to the
way Haggle managers are organized [33] into an unlayered
architecture, providing asynchronous way of communicating
between diﬀerent functional entities in a node.
In this paper, we focus on the forwarding layer, including
the required information needed to be passed to it. The ren-
dezvous and topology systems have responsibility for higher-
layer operations, such as scalable handling of publish/sub-
scribe requests (multicast tree join/leave in IP); they do not
aﬀect the forwarding performance directly.
2.2 Recursive bootstrapping
To achieve initial connectivity in the pub/sub network, the
rendezvous and topology systems need to be bootstrapped
[30]. Bootstrapping is done bottom-up, assuming that the
layer below oﬀers (static) connectivity between any node and
the rendezvous system. At the lowest layer, this assumption
is trivially true, since any two nodes connected by a shared
link (wireline or wireless) can, by default, send packets that
the other node(s) can receive.
During the bootstrap process, the topology management
functions on each node learn their local connectivity, by
probing or relying on the underlying layer to provide the in-
formation. Then, in a manner similar to the current routing
protocols, they exchange information about their perceived
local connectivity, creating a map of the network graph
structure. The same messages are also used to bootstrap
the rendezvous system, allowing the dedicated rendezvous
nodes to advertise themselves [32, 41].
2.3 Forwarding on Bloomed link identiﬁers
In our approach, we do not use end-to-end addresses in
the network, and instead of naming nodes, we identify all
links with a name. To forward packets through the net-
work, we use a hybrid, Bloom-ﬁlter-based approach, where
the topology system both constructs forwarding identiﬁers
by encoding the link identiﬁers into them in a source routing
manner (see Figure 2), and on demand installs new state at
the forwarding nodes. In this section, we present the basic
ideas in a somewhat simpliﬁed form, ignoring a number of
details such as loop prevention, error recovery, etc., which
are described in Section 3.
196Each forwarding node acts on packets roughly as follows.
For each link, the outgoing Link ID is ANDed with the zFil-
ter in the packet. If the result matches with the Link ID, it
is assumed that the Link ID has been added to the zFilter
and that the packet needs to be forwarded along that link.
With Bloom ﬁlters, matching may result with some false
positives. In such a case, the packet is forwarded along a
link that was not added to the zFilter, causing extra traﬃc.
This sets a practical limit for the number of link names that
can be included into a single zFilter.
Our approach to the Bloom ﬁlter capacity limit is twofold:
Firstly, we use recursive layering [12] to divide the network
into suitably-sized components; see Section 5. Secondly, the
topology system may dynamically add virtual links to the
system. A virtual link is, roughly speaking, a unidirectional
delivery tree that consists of a number of links. It has its
own Link ID, similar to the real links. The functionality in
the forwarding nodes is identical: the Link ID is compared
with the zFilter in the incoming packets, and the packet is
forwarded on a match.
2.4 Forwarding in TCP/IP-based networks
While unicast IP packets are forwarded based on address
preﬁxes, the situation is more complicated for multicast. In
source speciﬁc multicast (SSM) [19], interested receivers join
the multicast group (topic) and the network creates speciﬁc
multicast state based on the join messages. The state is
typically reﬂected in the underlying forwarding fabric, for
example, as Ethernet-level multicast groups or multicast for-
warding state in MPLS fabrics.
From the IP point of view, LIPSIN can be considered as
another underlying forwarding fabric, similar to Ethernet
or MPLS. When an IP packet enters a LIPSIN fabric, the
edge router prepends a header containing a suitable zFilter,
see also Sect. 5.1; similarly, the header is removed at the
egress edge. For unicast traﬃc, the forwarding entry simply
contains a pre-computed zFilter, designed to forward the
packet through the domain to the appropriate egress edge.
For SSM, the ingress router of the source needs to keep
track of the joins received on multicast group through the
edge routers, just like any IP multicast router would need to.
Hence, it knows the egress edges a multicast packet needs to
reach. Based on that information, it can construct a suitable
zFilter from the combination of physical or virtual links to
deliver the packets, leading to more ﬂexibility and typically
less state than in current forwarding fabrics.
3. DESIGN DETAILS AND EXTENSIONS
In this section, we present the details of our link-identity-
based forwarding approach. We start by giving a formal
description of the heart of the forwarding design, the for-
warding decision. Then, we focus on enhancements of the
basic design: Link ID Tags generation and selection of can-
didate Bloom ﬁlters. Next, we discuss additional features
that make the scheme practical: virtual links, fast recovery
after failures, and loop prevention. In the end, we consider
control messages and return paths.
3.1 Basic forwarding method
The core of our forwarding method, the forwarding deci-
sion, is based on a binary AND and comparison operations,
Franquin’s Zorglub for the Nth time during the early days
of the presented work. The name stuck.
Figure 2: Example of Link IDs assigned for links, as
well as a publication with a zFilter, built for forward-
ing the packet from the Publisher to the Subscriber.
For each point-to-point link, we assign two identiﬁers,
←−
called Link IDs, one in each direction. For example, a link
between the nodes A and B has two identiﬁers,
AB.
In the case of a multi-point (e.g. wireless) link, we consider
each pair of nodes being connected with a separate link.
With this setup, we do not need any common agreement
between the nodes on the Link IDs – each Link ID may be
locally assigned, as long as the probability of duplicates is
low enough.
−→
AB and
Basically, a Link ID is an m-bit long name with just k
bits set to one.
In Section 4 we will discuss the proper
values for m and k, and what are the consequences if we
change the values. However, for now it is suﬃcient to note
that typically k (cid:4) m and m is relatively large, making the
Link IDs statistically unique (e.g., with m = 248, k = 5, #
of Link IDs ≈ m!/(m − k)! ≈ 9 ∗ 1011).
The topology system creates a graph of the network us-
ing Link IDs and connectivity information. When it gets a
request to determine a forwarding tree for a certain publi-
cation, it ﬁrst creates a conceptual delivery tree using the
network graph and the locations of the publisher and sub-
scribers. Once it has such an internal representation of the
tree, it knows which links the packets need to pass, and it
can determine when to use Link IDs and when to create
state [45]. The topology layer is also responsible for react-
ing to changes in the delivery tree, caused by changes in the
subscriber set.
In the default case, we use a source-routing-based ap-
proach which makes forwarding independent from routing.
Basically, we encode all Link IDs of the tree into a Bloom
ﬁlter, and place it into the packet header. Once all link
IDs have been added to the ﬁlter, a mapping from the data
topic identiﬁer to the BF is handed to the node acting as the
data source and can be used for data delivery along the tree.
The representation of the trees in packet headers is source
speciﬁc and diﬀerent sources are very likely to use diﬀerent
BFs for reaching the same subscriber sets. To distinguish
the BFs in the actual packet headers from other BFs, we
refer to the in-packet Bloom ﬁlters as zFilters1.
1The name is not due to zFilter.com nor the e-mail ﬁlter
of the same name, but due to one of the authors reading
197Figure 3: An example relation of one Link ID to the