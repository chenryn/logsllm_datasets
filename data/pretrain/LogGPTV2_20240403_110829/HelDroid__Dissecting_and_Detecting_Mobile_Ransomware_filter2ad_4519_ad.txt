A false positive is a generic malware or a goodware sample ﬂagged as ran-
somware. We ﬁrst evaluated HelDroid on M1 (generic malware, no ran-
somware). No sample in M1 was ﬂagged by HelDroid as ransomware.
We extended this experiment to the other datasets containing goodware and
generic malware (i.e., AR, AT, MG). In the AR dataset, which contained
both malware and goodware, HelDroid correctly reported zero ransomware
samples, whereas in the AT dataset only 2 and 7 samples out of 12,842 were
incorrectly ﬂagged as ransomware and scareware, respectively. Manual investiga-
tion revealed that the 2 false ransomware samples were actually a benign sample
and a generic trojan, respectively. Actually, both samples had a locking behav-
ior that was correctly caught by HelDroid. The reason why these were ﬂagged
as ransomware is because they contained text localized in all major languages
(most of which were diﬀerent than those currently implemented in HelDroid),
which brought the text classiﬁer in a corner case. The 7 false scareware com-
prised 6 benign apps and 1 Leadbolt adware sample. In all cases, the source
of error was an signiﬁcant amount of text containing threatening-, porn-, law-
or copyright-related keywords. Last, in the MG dataset, none of the malware
samples was incorrectly ﬂagged as ransomware or scareware.
However, we can conclude that the rate of false positives is minuscule compared
to the size of the datasets. Moreover, the majority of false positives are actually
known goodware, which can be pre-ﬁltered easily with whitelisting.
6.4 Experiment 3: Detection Speed
We measured the speed of each detector component on 50 distinct random splits
of AR with 1,000 samples each. Figure 2(a) and (b) show that text classiﬁca-
tion is extremely fast in all cases, while locking strategies detection is the main
bottleneck, yet under 4 s on average. The encryption-detection module always
took milliseconds.
HELDROID: Dissecting and Detecting Mobile Ransomware
399
If HelDroid must invoke the external sandbox to extract dynamically gener-
ated text, this takes up to 5 min in our implementation, but this is unavoidable
for dynamic analysis. As we showed, however, this happens for a very limited
number of samples.
7 Limitations and Future Work
Our results show that HelDroid has raised the bar for ransomware authors.
However, there are limitations, which we describe in this section, that we hope
will stimulate further research.
Portability. Although we focus on the mobile case, ransomware is a general
problem. Porting the HelDroid approach to the non-mobile world is non-trivial
but feasible. The Threatening Text Detector would be straightforward to
port, as it only assumes the availability of text. For example, it could be applied
as it is for ﬁltering scareware emails. The toughest parts to port are those that
assume the use of a well-deﬁned API (e.g., for encryption or locking opera-
tions). Indeed, a malware author could evade our system by using native code
or embedding cryptographic primitives, making porting much more complex.
However, the progress on static program analysis (e.g., [26,27]) and reverse engi-
neering (e.g., [28]) of native binary code have produced advanced analysis tools
that would ease porting HelDroid to other settings, including the detection
of cryptographic primitives in binary code [15,16]. The principles behind our
detection modules do not change; only their implementation does.
One last discussion point regards the inspection site. For mobile applications,
which are typically vetted prior or upon installation (e.g., by the distributing
marketplace, on the device using call-home services such as Google App Ver-
ify), HelDroid works “as is.” For non-mobile applications that do not follow
this distribution model, HelDroid should be integrated into the operating sys-
tem, in a trusted domain (e.g., kernel, driver). In this application scenario it is
crucial that the system is allowed to block the currently executing code to pre-
vent the malicious actions to continue. In HelDroid’s terms, this means that
the encryption and locking indicators of compromise should have high priority,
to avoid cases in which the malware ﬁrst silently encrypts every ﬁle and then
displays the threatening text (when it is already too late).
Internationalization. As we proved in Experiment 1 by quickly adding
Spanish support, we designed HelDroid such that supporting other languages is
a trivial task. Languages such as Chinese or Japanese, however, would be trickier
than others to implement, due to signiﬁcant diﬀerences in stemming and phrase
structure. Fortunately, research prototypes such as Stanford’s CoreNLP [29] that
support (for instance) Chinese NLP makes this extension feasible with just some
engineering work.
400
N. Andronio et al.
Evasion. In addition to the use of native machine code, which we already
mentioned above, a simple yet na¨ıve evasion to the static-analysis part of our
approach (Encryption Detector and Locking Detector) consists of a benign
APK that dynamically loads the code carrying out the actual attacks [30]. First,
we note that this technique can be counter evaded by intercepting the loaded
payload and analyzing it in a second round, as previous research have demon-
strated [31]. Second, we note that this evasion mechanism is common to any
static-based approach, and thus is not speciﬁc to HelDroid.
A more interesting discussion regards the threatening text. Text can be dis-
played via other means than strings (e.g., images, videos, audio), delivered out
of band (e.g, e-mail) or obfuscated. A ﬁrst mitigation, that we partially address,
consists in using a sandbox that dumps dynamically allocated text, thus coping
with obfuscated strings as well as encrypted application protocols (e.g., HTTPS).
For example, Andrubis tracks decryption routines and allow the analyst to access
the decrypted content.
Regarding image- or video-rendered text, state-of-the-art optical character
recognition (OCR) techniques could be used. Although evasion techniques —
such as those used in CAPTCHAs — can be mounted against OCR, the goal of
the attacker is to make the text clear and easy to read for the victim, setting a
limit to them; also, previous research demonstrated the fallacy of even the most
extreme text-distortion techniques adopted by CAPTCHAs [32]. Regarding out-
of-band text, our current implementation of HelDroid does not cope with it,
although applying our text classiﬁer to incoming email messages is trivial. In
general, this strategy may be in contrast with the attacker’s goal, that is to
ensure that the victim receives the ransom-requesting message. Displaying this
message synchronously is an advantage for the attacker, whereas out-of-band
communication alone is ill suited to the task. For example, the victim may not
read email or junk-mail ﬁlters could block such messages.
An even more interesting evasion technique is a mimicry attack on our text
classiﬁer, which we think is possible. In a nutshell, the attacker must be able
to write a text containing a disproportionally large number of unknown words,
unusual punctuation or many grammar errors. Unusual punctuation and gram-
mar errors could be mitigated with some lexical pre-processing an advanced cor-
rector. Interestingly, the most recent families (e.g., CBT-Locker) show that the
attackers tend to write “perfect” messages, arguably prepared by native speak-
ers, in order to sound more legitimate. After all, careful wording of threatening
messages is essential to all social engineering-based attacks.
Future Work. In addition to addressing the aforementioned limitations, future
research could focus on designing ransomware-resistant OSs. For example, in the
case of Android, calls to encryption routines should be explicitly authorized by
the users on a per-ﬁle basis. This is not trivial from a usability viewpoint, espe-
cially for long sequences of calls. Moreover, many applications may use encryp-
tion for benign purposes, making this goal even more challenging.
HELDROID: Dissecting and Detecting Mobile Ransomware
401
8 Related Work
Malware Detection. There exist several malware detection approaches,
including static [8,33], dynamic [34], and hybrid [25] techniques. DREBIN [8]
and MAST [33] are particularly related to our work. DREBIN aims at detecting
malware statically, with a 94 % accuracy and 1 % false positives: It gathers fea-
tures such as permissions, intents, used APIs, network addresses, etc., embeds
them in a vector space and trains a support vector machine to recognize malware.
MAST relies on multiple correspondence analysis and statically ranks applica-
tions by suspiciousness. Thanks to this ranking, it detects 95 % of malware at
the cost of analyzing 13 % of goodware.
Unfortunately, generic approaches to malware detection seem unsuitable
for ransomware. We tested DREBIN on our R2 dataset of ransomware.
Although DREBIN outperformed AVs, HelDroid outperformed DREBIN
(which detected only 48.47 % of the ransomware samples). Even the authors of
DREBIN, which we have contacted, in their paper state that their approach is
vulnerable to mimicry attacks. Ransomware is a type of mimicry attack, because
it composes benign actions (i.e., encryption, text rendering) toward a malicious
goal.
Ransomware Detection. To the best of our knowledge, our paper is the ﬁrst
research work on mobile ransomware. The work by Kharraz et al. [35], pub-
lished after the submission of HelDroid, is the ﬁrst to present a thorough
study on Windows ransomware. After analyzing 1,359 belonging to 15 distinct
ransomware families, they present a series of indicators of compromise that char-
acterize ransomware activity at the ﬁlesystem layer. This approach, in addition
to being focused entirely on the Windows operating system, is complementary
to ours. Indeed, we look at how ransomware behaves at the application level,
whereas [35] focuses on the low level behavior.
Previous work focused on the malicious use of cryptography for implement-
ing ransomware attacks [1,36]. However, no approaches exist for the explicit
detection of this class of malware.
9 Conclusions
A single mobile ransomware family has already aﬀected nearly one million of
users [4] in one month. Judging by the most recent families [11] and their rapid
evolution pace, this threat will arguably become more and more dangerous, and
diﬃcult to deal with. Before HelDroid, the only available tools were signa-
ture based, with all of the disadvantages this entails. Instead, we showed that
our approach, after being trained on recent ransomware samples, is able to eﬃ-
ciently detect new variants and families. Even with mixed datasets including
benign, malicious, scareware, and ransomware apps, HelDroid correctly recog-
nized 99 % never-seen-before samples (375 + 11 + 4 over 394, in a dataset con-
taining also 49 corner-case apps). Interestingly, the remainder 4 were incorrectly
402
N. Andronio et al.
ﬂagged by commercial AVs as ransomware. Thus, it is a ﬁrst, signiﬁcant step
toward designing proactive detectors that provide an eﬀective line of defense.
HelDroid could be integrated in mobile AVs, which would submit ﬁles to
our JSON API, as recently proposed in [37]. Alternatively, HelDroid shall
be deployed in one or more of the many checkpoints oﬀered by modern app-
distribution ecosystems. For instance, HelDroid could be part o the app-vetting
processes performed by the online marketplaces, or upon installation (e.g., the
Google App Verify service scans apps right before proceeding with installation).
Acknowledgments. We are thankful to the anonymous reviewers and our shepherd,
Patrick Traynor, for the insightful comments, Steven Arzt, who helped us improving
FlowDroid to track ﬂows across threads, and Daniel Arp from the DREBIN project.
This work has been supported by the MIUR FACE Project No. RBFR13AJFT.
References
1. Young, A., Yung, M.: Cryptovirology: extortion-based security threats and coun-
termeasures. In: Proceedings of the IEEE Symposium on Security and Privacy, pp.
129–140, May 1996
2. McAfee Labs: Threats report, November 2014. McAfee Labs, November 2014
3. Ransomware on the rise, January 2015. http://www.fbi.gov/news/stories/2015/
january/ransomware-on-the-rise
4. Perlroth, N.: Android phones hit by ‘Ransomware’, August 2014. http://bits.blogs.
nytimes.com/2014/08/22/android-phones-hit-byransomware/
5. Lab. Koler - the police ransomware for android, June 2014. http://securelist.com/
blog/research/65189/behind-the-android-oskoler-distribution-network/
6. SurfRight. HitmanPro.kickstart, March
2014.
http://www.surfright.nl/en/
kickstart
7. Avast Software. Avast ransomware removal, June 2014. https://play.google.com/
store/apps/details?id=com.avast.android.malwareremoval
8. Arp, D., et al.: Drebin: eﬀective and explainable detection of android malware in
your pocket. In: Network and Distributed System Security (NDSS) Symposium,
San Diego, California (2014)
9. Spagnuolo, M., Maggi, F., Zanero, S.: BitIodine: extracting intelligence from the
bitcoin network. In: Financial Cryptography and Data Security, Barbados, 3 March
2014
10. Jarvis, K.: CryptoLocker ransomware, December 2013. http://www.secureworks.
com/cyber-threat-intelligence/threats/cryptolockerransomware/
11. Chrysaidos, N.: Mobile
simplocker now on steroids,
February 2015. https://blog.avast.com/2015/02/10/mobile-cryptoransomware-
simplocker-now-on-steroids/
crypto-ransomware
12. Hamada, J.: Simplocker: ﬁrst conﬁrmed ﬁle-encrypting ransomware for android,
June 2014. http://www.symantec.com/connect/blogs/simplocker-ﬁrst-conﬁrmed-
ﬁle-encrypting-ransomware-android
13. Unuchek, R.: Latest version of svpeng targets users in US, June 2014. http://
securelist.com/blog/incidents/63746/latest-version-ofsvpeng-targets-users-in-us/
14. Kelly, M.: US targeted by coercive mobile ransomware impersonating the FBI, July
2014. https://blog.lookout.com/blog/2014/07/16/scarepakage/
HELDROID: Dissecting and Detecting Mobile Ransomware
403
15. Gr¨obert, F., Willems, C., Holz, T.: Automated identiﬁcation of cryptographic prim-
itives in binary programs. In: Recent Advances in Intrusion Detection, pp. 41–60
(2011)
16. Lestringant, P., Guih´ery, F., Fouque, P.-A.: Automated identiﬁcation of crypto-
graphic primitives in binary code with data ﬂow graph isomorphism. In: Proceed-
ings of the 10th ACM Symposium on Information, Computer and Communications
Security, pp. 203–214, New York, NY, USA (2015)
17. Aggarwal, C.C., Zhai, C.: A survey of text classiﬁcation algorithms. In: Aggarwal,
C.C., Zhai, C. (eds.) Mining Text Data, pp. 163–222. Springer, US (2012)
18. The snowball language. http://snowball.tartarus.org/
19. Shuyo, N.: Language detection library for java (2010). http://code.google.com/p/
language-detection/
20. van der Veen, V., Bos, H., Rossow, C.: Dynamic analysis of android malware. VU
University Amsterdam, August 2013. http://tracedroid.few.vu.nl/
21. Hoﬀmann, J., et al.: Slicing droids: program slicing for smali code. In: Proceedings
of the 28th Annual ACM Symposium on Applied Computing, pp. 1844–1851, New
York, NY, USA (2013)
22. Arzt, S., et al.: FlowDroid: precise context, ﬂow, ﬁeld, object-sensitive and lifecycle-
aware taint analysis for android apps. In: Proceedings of the 35th ACM SIGPLAN
Conference on Programming Language Design and Implementation, pp. 259–269,
New York, NY, USA (2014)
23. Lindorfer, M., Volanis, S., Sisto, A., Neugschwandtner, M., Athanasopoulos, E.,
Maggi, F., Platzer, C., Zanero, S., Ioannidis, S.: AndRadar: fast discovery of
android applications in alternative markets. In: Dietrich, S. (ed.) DIMVA 2014.
LNCS, vol. 8550, pp. 51–71. Springer, Heidelberg (2014)
24. Maggi, F., Valdi, A., Zanero, S.: AndroTotal: a ﬂexible, scalable toolbox and service
for testing mobile malware detectors. In: Proceedings of the Third ACM Workshop
on Security and Privacy in Smartphones and Mobile Devices, pp. 49–54, New York,
NY, USA (2013)
25. Zhou, Y., Jiang, X.: Dissecting android malware: characterization and evolution.
In: Proceedings of the 33rd IEEE Symposium on Security and Privacy, San Fran-
cisco, CA, May 2012. http://www.malgenomeproject.org/
26. Song, D., Brumley, D., Yin, H., Caballero, J., Jager, I., Kang, M.G., Liang, Z.,
Newsome, J., Poosankam, P., Saxena, P.: BitBlaze: a new approach to computer
security via binary analysis. In: Sekar, R., Pujari, A.K. (eds.) ICISS 2008. LNCS,
vol. 5352, pp. 1–25. Springer, Heidelberg (2008)
27. Schwartz, E.J., et al.: Native x86 decompilation using semantics-preserving struc-
tural analysis and iterative control-ﬂow structuring. In: USENIX security (2013)
28. Slowinska, A., Stancescu, T., Bos, H.: Howard: a dynamic excavator for reverse
engineering data structures. In: Proceedings of the Network and Distributed Sys-
tem Security Symposium (NDSS), San Diego, CA (2011)
29. Manning, C.D., et al.: The stanford Core NLP natural language processing toolkit.
In: Proceedings of 52nd Annual Meeting of the Association for Computational
Linguistics: System Demonstrations, pp. 55–60 (2014). http://www.aclweb.org/
anthology/P/P14/P14-5010
30. Poeplau, S., et al.: Execute this! analyzing unsafe and malicious dynamic code
loading in android applications. In: Proceedings of the Network and Distributed
System Security Symposium (NDSS), pp. 23–26 (2014)
31. Zhou, W., et al.: Fast, scalable detection of “piggybacked” mobile applications. In:
Proceedings of the Third ACM Conference on Data and Application Security and
Privacy, pp. 185–196, New York, NY, USA (2013)
404
N. Andronio et al.
32. Bursztein, E., Martin, M., Mitchell, J.: Text-based CAPTCHA strengths and weak-
nesses. In: Proceedings of the 18th ACM Conference on Computer and Communi-
cations Security, pp. 125–138, New York, NY, USA (2011)
33. Chakradeo, S., et al.: MAST: triage for market-scale mobile malware analysis. In:
Proceedings of the Sixth ACM Conference on Security and Privacy in Wireless and
Mobile Networks, pp. 13–24, New York, NY, USA (2013)
34. Shabtai, A., et al.: Andromaly: a behavioral malware detection framework for
android devices. J. Intell. Inf. Syst. 38(1), 161–190 (2012)
35. Kharraz, A., Robertson, W., Balzarotti, D., Bilge, L., Kirda, E.: Cutting the gor-
dian knot: a look under the hood of ransomware attacks. In: Almgren, M., Gulisano,
V., Maggi, F. (eds.) DIMVA 2015. LNCS, vol. 9148, pp. 3–24. Springer, Heidelberg
(2015)
36. Young, A.: Cryptoviral extortion using microsoft’s crypto API. Int. J. Inf. Secur.
5(2), 67–76 (2006)
37. Jarabek, C., Barrera, D., Aycock, J.: ThinAV: truly lightweight mobile cloud-based
anti-malware. In: Proceedings of the 28th Annual Computer Security Applications
Conference, pp. 209–218, New York, NY, USA (2012)