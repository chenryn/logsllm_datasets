### False Positives in Ransomware Detection

A false positive occurs when a benign or generic malware sample is incorrectly flagged as ransomware. We first evaluated HelDroid on M1, a dataset containing generic malware (excluding ransomware). No samples in M1 were flagged as ransomware by HelDroid. We extended this evaluation to other datasets, including goodware and generic malware (i.e., AR, AT, MG).

In the AR dataset, which contains both malware and goodware, HelDroid correctly identified zero ransomware samples. In the AT dataset, only 2 out of 12,842 samples were incorrectly flagged as ransomware, and 7 were flagged as scareware. Manual investigation revealed that the two false positives were actually a benign sample and a generic trojan, respectively. Both samples exhibited locking behavior, which was correctly detected by HelDroid. The misclassification occurred because these samples contained text in multiple major languages, which was not fully supported by HelDroid's text classifier.

The seven false scareware samples included six benign apps and one Leadbolt adware sample. The source of these errors was a significant amount of text containing threatening, pornographic, legal, or copyright-related keywords. In the MG dataset, no malware samples were incorrectly flagged as ransomware or scareware.

### Conclusion on False Positives

The rate of false positives is minimal compared to the size of the datasets. Moreover, most false positives are known goodware, which can be easily pre-filtered using whitelisting techniques.

### Experiment 3: Detection Speed

We measured the speed of each detector component on 50 distinct random splits of the AR dataset, each containing 1,000 samples. Figures 2(a) and 2(b) show that text classification is extremely fast in all cases, while the detection of locking strategies is the main bottleneck, taking an average of less than 4 seconds. The encryption-detection module consistently took only milliseconds.

If HelDroid needs to invoke an external sandbox to extract dynamically generated text, this process can take up to 5 minutes in our implementation. However, this is necessary for dynamic analysis and occurs for a very limited number of samples.

### Limitations and Future Work

Our results indicate that HelDroid has raised the bar for ransomware authors. However, there are limitations that we hope will stimulate further research.

#### Portability
While HelDroid focuses on mobile ransomware, the problem of ransomware is not limited to mobile devices. Porting HelDroid to non-mobile environments is feasible but non-trivial. The Threatening Text Detector can be straightforwardly ported, as it only requires the availability of text. For example, it could be used to filter scareware emails. The more challenging parts to port are those that rely on well-defined APIs for encryption or locking operations. Malware authors could evade our system by using native code or embedding cryptographic primitives, making porting more complex. However, advancements in static program analysis and reverse engineering of native binary code have produced tools that could facilitate this porting process.

#### Inspection Site
For mobile applications, which are typically vetted before or during installation (e.g., by app marketplaces or on-device services like Google App Verify), HelDroid works as is. For non-mobile applications, HelDroid should be integrated into the operating system in a trusted domain (e.g., kernel, driver). It is crucial that the system can block currently executing code to prevent malicious actions. In HelDroid’s terms, this means that encryption and locking indicators of compromise should have high priority to avoid scenarios where the malware silently encrypts files before displaying threatening text.

#### Internationalization
As demonstrated in Experiment 1, adding support for additional languages, such as Spanish, is straightforward. Languages like Chinese or Japanese, however, present more significant challenges due to differences in stemming and phrase structure. Research prototypes like Stanford’s CoreNLP make this extension feasible with some engineering work.

#### Evasion
In addition to the use of native machine code, a simple evasion technique involves a benign APK that dynamically loads the actual malicious code. This can be countered by intercepting and analyzing the loaded payload. A more interesting discussion concerns the threatening text, which can be displayed via images, videos, or audio, or delivered out-of-band (e.g., email) or obfuscated. Partial mitigation includes using a sandbox to dump dynamically allocated text, addressing obfuscated strings and encrypted protocols. For image- or video-rendered text, optical character recognition (OCR) techniques can be used, though evasion techniques similar to CAPTCHAs can be mounted against OCR. Out-of-band text is not currently addressed by HelDroid, but applying the text classifier to incoming emails is trivial. Displaying the ransom message synchronously is advantageous for the attacker, whereas out-of-band communication alone is less effective.

Another evasion technique is a mimicry attack on the text classifier, where the attacker writes text with a large number of unknown words, unusual punctuation, or many grammatical errors. Unusual punctuation and grammatical errors can be mitigated with lexical preprocessing and advanced correctors. Recent ransomware families (e.g., CBT-Locker) tend to write "perfect" messages to appear more legitimate, essential for social engineering-based attacks.

### Future Work

In addition to addressing the aforementioned limitations, future research could focus on designing ransomware-resistant operating systems. For example, in Android, calls to encryption routines should be explicitly authorized by users on a per-file basis. This is challenging from a usability perspective, especially for long sequences of calls, and many applications use encryption for benign purposes, making this goal even more difficult.

### Related Work

#### Malware Detection
Several malware detection approaches exist, including static, dynamic, and hybrid techniques. DREBIN and MAST are particularly relevant to our work. DREBIN aims to detect malware statically with 94% accuracy and 1% false positives, using features like permissions, intents, and network addresses. MAST ranks applications by suspiciousness and detects 95% of malware by analyzing 13% of goodware. However, generic malware detection approaches are unsuitable for ransomware. DREBIN, for instance, detected only 48.47% of ransomware samples in our R2 dataset, while HelDroid outperformed it.

#### Ransomware Detection
To our knowledge, this paper is the first research work on mobile ransomware. Kharraz et al. [35] published a thorough study on Windows ransomware, focusing on file system layer indicators. Our approach complements theirs by examining application-level behavior. Previous work has focused on the malicious use of cryptography for ransomware, but no explicit detection methods existed until now.

### Conclusions

A single mobile ransomware family has already affected nearly one million users in one month. With the rapid evolution of ransomware, this threat is becoming more dangerous and difficult to manage. Before HelDroid, the only available tools were signature-based, with inherent limitations. HelDroid, after being trained on recent ransomware samples, efficiently detects new variants and families. In mixed datasets, HelDroid correctly recognized 99% of never-seen-before samples, with the remaining 4% incorrectly flagged by commercial AVs as ransomware. Thus, HelDroid represents a significant step toward proactive detection and an effective line of defense.

HelDroid can be integrated into mobile AVs, submitting files to a JSON API, or deployed in app-vetting processes performed by online marketplaces or upon installation (e.g., Google App Verify).

### Acknowledgments

We thank the anonymous reviewers, Patrick Traynor, Steven Arzt, and Daniel Arp for their valuable contributions. This work was supported by the MIUR FACE Project No. RBFR13AJFT.

### References

[References listed here, formatted as in the original document.]