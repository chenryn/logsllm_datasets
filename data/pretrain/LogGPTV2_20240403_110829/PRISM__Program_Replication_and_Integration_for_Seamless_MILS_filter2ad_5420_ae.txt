### Low Security Level Disappearance

When switching to a lower security level, the low security level designation may disappear. This issue can be mitigated by ensuring that the security level is properly maintained and enforced during the transition.

### D. Silicon Trojans

The threat from Silicon Trojans, which embed malicious behavior in compromised hardware, is on the rise [4]. This type of malware is difficult to counter with software-based isolation mechanisms running on Commercial Off-The-Shelf (COTS) hardware. While PRISM does not directly address this threat, our implementation on top of Minisec’s hardware-isolated MILS domains helps reduce susceptibility to both compromised hardware and untrusted software. Even if data or processing within a Single-Level Secure (SLS) partition is compromised, the effects cannot spread to lower security-level enclaves except through bounded covert channels in the Trusted Computing Base (TCB). This ensures a high degree of confidentiality and integrity, thereby improving availability by frustrating an adversary's ability to cause harm.

### Figure 9: Covert Channel Monitoring

Since the TCB mediates all document synchronizations, it can easily monitor potential covert channels and maintain them within policy-based limits. Figure 9 shows a prototype covert channel monitor we developed to demonstrate this concept. The monitor uses the policy limit for the number of markers per file to calculate the potential information content. It can be extended to provide tighter bounds based on the actual data observed [21].

This TCB-produced dialog box shows what a user would see in convenience mode (L = 3873 and M limited to 10) after entering the secret text shown in Figure 6 and requesting synchronization. The user should verify that the metadata corresponds to the intended synchronization action before accepting or rejecting the operation.

In an intelligence community environment, this trusted application could enforce a covert channel policy demanding zero bits per second in paranoid mode. In other military scenarios, it may apply rate limiting to keep potential covert channel bitrates below an allowable threshold. In commercial settings, where such sophisticated attacks are less likely, it might simply quantify the potential leakage and present it to the user for monitoring purposes.

### B. Replay Attack

A user or untrusted software may attempt a replay attack by forwarding MLSDiff edits based on an out-of-date version of an MLSDoc to the TCB, attempting to overwrite documents at other levels with old information. Such an effort would be thwarted when not using system-low mode, as the canonical MLSDoc contains revision numbers that protect the version-integrity of each security level's section. A stale MLSDiff patch would not match the current version of the canonical document.

### Table III: Trusted Codebase Size for Prototype and Optimised Versions; and Untrusted Codebase Size for the MS Word Use Case

| Component | Language | Lines of Code |
|-----------|----------|---------------|
| **Untrusted** | | |
| PRISM add-in | C | 8200 |
| XML Library | C♯ | 2750 |
| XML Diff Library | C | 195000 |
| Windows, Office, .NET framework | C/C++/C♯ | > 10,000,000 |
| xferd | C | 1259 |
| libfuse | C | 13974 |
| mlsfs | C | 732 |
| **Trusted** | | |
| Verify/patch/release (Prototype) | C | 1600 |
| crypto | C | 27038 |
| EnclaveHAL | C | 420 |
| xferd | C | 1259 |
| ChannelManager | C | 3375 |
| Annex OCRM | C | 8616 |
| Minisec3 VNC clients | C | 1264 |
| OCRM based GUI | C | 5339 |
| OCRM based downgrader | C | 399 |
| OCRM based CC policy checker | C | 151 |
| Linux kernel | C | > 1,000,000 |
| Verify/patch/release (Minimal Optimised) | C | 1600 |
| certified crypto implementation | C | <2000 |
| Communication | C | 250 |
| Green Hills Integrity or seL4 | C | <10000 |
| µkernel + crypto + 1850 | C | 1850 |

### E. Evaluation and Certification

PRISM relies on a small amount of code in the TCB to provide its security-critical verification, patch, and release functionality. The same trusted codebase is common for any MLSDoc-based use case, with untrusted add-in modules abstracting away application-specific file format issues. This makes it feasible and worthwhile to evaluate PRISM’s trusted components to very high levels of assurance.

Table III shows indicative code sizes for various parts of our PRISM system. The first group includes the untrusted COTS operating system, application software, and custom cross-domain infrastructure residing in an SLS MILS partition. From a security perspective, these untrusted elements are assumed to be capable of any possible (mis)behavior. The size of this codebase is therefore unimportant from a modeling perspective.

The second group includes the code for all trusted elements in our current Minisec-based prototype implementation. Excluding the large Linux kernel, this totals just 42,308 lines of trusted code. Although 2-3 orders of magnitude smaller than the untrusted code base, even this is beyond the current reach of exhaustive formal modeling techniques.

The third group represents our estimation of the minimum-sized codebase that could implement PRISM’s core functionality in paranoid mode using only symmetric cryptography, optimized for productization. This disables identified covert channels and the need to monitor them, and excludes public key cryptography required for sharing files between TCBs. The Linux kernel could be replaced with a highly certified COTS separation kernel like Green Hills Integrity or seL4. The general-purpose MLS middleware and cross-domain infrastructure would be replaced by a minimal, single-purpose framework. We estimate the entire TCB could be reduced to less than 10,000 lines of (pre-certified) code for the µkernel base and crypto support, and less than 2,000 lines for the PRISM application component.

A thorough security analysis of this optimized PRISM implementation would be achievable using current state-of-the-art modeling techniques. With careful implementation and evaluation, we believe certification to EAL6+ or beyond for PRISM’s capability would be highly tractable.

### X. Future Work

Although we have demonstrated the feasibility of adapting complex COTS software to a high-assurance MLS environment, an improved approach would include building MLS awareness (but not trust) into COTS applications. For example, to assist the TCB in differentiating between a copy/paste that may contain embedded high-level data and an at-level insertion of new data, or to expose events such as the renaming of low-level cross-reference structures, the patch should be constructed as a transaction of the actual operation being performed by the application. These types of extensions would encourage more frequent, smaller transactions, help avoid ambiguous corner cases, and lead to more robust operation. Sun et al. [22] demonstrate an adaptation layer for Microsoft Office that intercepts mouse and keyboard input, which could be used to implement this type of facility. While this would add complexity to the untrusted application, it is outside the TCB and would not require difficult and expensive security evaluation.

Our discussion also glossed over cryptographic mechanisms for signing, encryption, and key distribution. Although the Annex OCRM provides methods for public and private key cryptography used for the authentication and encryption of communication between Minisec devices, we have not yet integrated the use of these primitives for key agreement, signatures, or encryption within MLSDoc files. It is not difficult, however, to envisage leveraging these facilities so that one Minisec’s TCB can export an MLSDoc to another TCB by block encrypting the MLSDoc with a random key and distributing that package to the target TCB along with a public-key encrypted bulk decryption key. A similar mechanism could be used to protect canonical MLSDoc files stored in system-low mode outside the TCB.

MLS instantiation thus delivers a seamless user experience almost indistinguishable from native MLS. Although we demonstrated this using the Annex Minisec platform, our method is equally suitable for retrofitting MLS functionality into other COTS applications using a Multiple Independent Levels of Security (MILS) framework in any separation kernel or virtualization-based isolation environment.

### Acknowledgments

We wish to thank the anonymous reviewers for their helpful comments that assisted in clarifying aspects of the paper.

### References

[1] UCDMO cross domain inventory version 3.4.0, June 2010. http://www.ucdmo.gov/ (accessed 23 Sept 2010).

[2] Jim Alves-Foss, W. Scott Harrison, Paul Oman, and Carol Taylor. The MILS architecture for high-assurance embedded systems. International Journal of Embedded Systems, 2(3-4):239–247, 2006.

[3] M. Anderson, C. North, J. Griffin, R. Milner, J. Yesberg, and K. Yiu. Starlight: Interactive link. In ACSAC, pages 55–64. IEEE Computer Society, 1996.

[4] M. Anderson, C. North, and K. Yiu. Towards countering the rise of the silicon trojan. Technical Report DSTO-TR-2220, DSTO Information Sciences Laboratory, 2008.

[5] Ross Anderson. Security Engineering. Wiley, first edition, 2001.

[6] D. E. Bell and L. J. LaPadula. Secure computer systems: mathematical foundations and model. Technical Report M74-244, The MITRE Corp., Bedford, Mass., May 1973.

[7] Department of Defense. Department of defense trusted computer system evaluation criteria, December 1985.

[8] DocuWiki Community. http://www.docuwiki.org. DocuWiki, 2010.

[9] D.A. Grove, T.C. Murray, C.A. Owen, C.J. North, J.A. Jones, M.R. Beaumont, and B.D. Hopkins. An overview of the Annex system. In Proc. Annual Computer Security Applications Conference. IEEE, December 2007.

[10] D.A. Grove, C.J. North, A.P. Murray, T. Newby, M.R. Beaumont, M. Chase, S. Haggett, and C.A. Owen. The Annex Multi-Level Secure computing architecture. DSTO technical report, 2011.

[11] Joshua P. Macdonald. File system support for delta compression. Master’s thesis, University of California at Berkeley, 2000.

[12] Dylan McNamee, CDR Scot Heller, and Dave Huf. Building multilevel secure web services-based components for the global information grid. CrossTalk, pages 15–19, May 2006.

[13] T. Newby, D.A. Grove, A.P. Murray, C.A. Owen, and C.J. North. The second generation Annex TCB. DSTO technical report, 2011.

[14] Kar Leong Ong, Thuy Nguyen, and Cynthia Irvine. Implementation of a multilevel wiki for cross-domain collaboration. Technical report, Naval Postgraduate School, 2008.

[15] Colin Percival. Naive differences of executable code. http://www.daemonology.net/bsdiff, 2003.

[16] Neetu Rajpal. Using the XML diff and patch tool in your applications, August 2002. http://msdn.microsoft.com/en-us/library/aa302294.aspx.

[17] Tristan Richardson, Quentin Stafford-Fraser, Kenneth R. Wood, and Andy Hopper. Virtual network computing. IEEE Internet Computing, 2(1):33–38, 1998.

[18] J.A. Rome and J.S. Tolliver. Multilevel architectures for electronic document retrieval. In National information systems security conference. Oak Ridge National Lab., TN (United States), 1997.

[19] Sebastian Rönnau, Geraint Philipp, and Uwe M. Borghoff. Efficient change control of XML documents. In DocEng '09: Proceedings of the 9th ACM symposium on Document engineering, pages 3–12, New York, NY, USA, 2009. ACM.

[20] C. E. Shannon. A mathematical theory of communication. The Bell System Technical Journal, 27:379–423,623–656, 1948.

[21] S. P. Shieh and V. D. Gligor. Detecting illicit leakage of information in operating systems. Journal of Computer Security, 4:123–148, 1996.

[22] Chengzheng Sun, Steven Xia, David Sun, David Chen, Haifeng Shen, and Wentong Cai. Transparent adaptation of single-user applications for multi-user real-time collaboration. ACM Trans. Comput.-Hum. Interact., 13(4):531–582, 2006.

[23] W. Mark Vanfleet, R. William Beckwith, Ben Calloni, Jahn A. Luke, Carol Taylor, and Gordin Uchenick. MILS: Architecture for high-assurance embedded computing. The Journal of Defense Software Engineering, August 2005.