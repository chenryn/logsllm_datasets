low security level disappears when switching down to that
level.
D. Silicon Trojans
There is a growing threat from Silicon Trojans that
contain malicious behaviour embedded in compromised
hardware [4]. This type of malware is arguably impossible to
counter with software based isolation mechanisms running
on COTS hardware. While PRISM does not counter this
threat directly, our implementation on top of the Minisec’s
hardware isolated MILS domains goes some way to reduc-
ing susceptibility to compromised hardware and untrusted
software alike. Even if data or processing within a SLS
partition is compromised, the effects cannot leak to lower
security-level enclaves other than by bounded covert chan-
nels through the TCB, and a high degree of conﬁdentiality
and security-level
integrity are preserved. These in turn
improve availability by frustrating an adversary’s ability
293
Figure 9. A trusted application for displaying metadata and potential covert
channel implications associated with a particular synchronisation operation,
for user review and acceptance.
Since the TCB mediates all document synchronisations
it can easily monitor potential covert channels to maintain
them within policy based limits. Figure 9 shows a prototype
covert channel monitor that we have developed to demon-
strate the utility of this concept. While this uses the policy
limit for the number of markers per ﬁle to calculate the
potential information content it could be extended to provide
a tighter bound based on the actual data observed [21].
This shows a TCB produced dialog box of what
the
user would see – if they were in convenience mode with
L = 3873 and M limited to 10 – after having just
entered the secret text shown in Figure 6 and then requested
synchronisation. The user should verify that the metadata
corresponds to the synchronisation action that they intended
to make, hence accepting or rejecting the operation.
In an intelligence community environment this trusted
application could enforce a covert channel policy demanding
the use of 0 bits per second paranoid mode; in other military
scenarios it may apply rate limiting to maintain potential
covert channel bitrates below an allowable threshold; while
in commercial settings where such sophisticated attacks are
less likely it might simply quantify the potential leakage and
present this to the user for monitoring purposes.
B. Replay Attack
A user or untrusted software may attempt to mount a
replay attack by forwarding to the TCB MLSDiff edits based
on an out of date version of an MLSDoc, attempting to
overwrite documents at other levels with old information.
Such an effort would be thwarted when not using system-
low mode, however, since the canonical MLSDoc contains
revision numbers that protect the version-integrity of each
security level’s section; a stale MLSDiff patch would not
match the current version of the canonical document and
TRUSTED CODEBASE SIZE FOR PROTOTYPE AND OPTIMISED VERSIONS; AND UNTRUSTED CODEBASE SIZE FOR THE MS WORD USE CASE.
Table III
Component
Language
Lines of Code
Total LOC
Untrusted
PRISM add-in
XML Library
XML Diff Library
C
C♯
C
C♯
8200
2750
195000
9000
Windows, Ofﬁce, .NET framework
C/C++/C♯
> 10,000,000
xferd
libfuse
mlsfs
Trusted
Verify/patch/release
(Prototype)
crypto
EnclaveHAL
xferd
ChannelManager
Annex OCRM
Minisec3 VNC clients
OCRM based GUI
OCRM based downgrader
OCRM based CC policy checker
Linux kernel
Trusted
Verify/patch/release
(Minimal Optimised)
certiﬁed crypto implementation
Communication
Green Hills Integrity or seL4
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
unimportant
1259
13974
732
1600
27038
420
1259
3375
8616
1264
5339
399
151
> 1,000,000
kernel + 49,461
1600
<2000
250
<10000
µkernel + crypto + 1850
to construct a robust command and control channel for
triggering a Denial of Service (DoS) attack.
E. Evaluation and Certiﬁcation
PRISM relies on only a very a small amount of code in the
TCB to provide its security critical veriﬁcation, patch and
release functionality. Furthermore, the same trusted codebase
is common for any MLSDoc based use case; the untrusted
add-in modules abstract away any application-speciﬁc ﬁle
format issues. This makes is both feasible and worthwhile
to evaluate PRISM’s trusted components to very high levels
of assurance.
Indicative code sizes for various parts of our PRISM
system are shown in Table III. The ﬁrst group of components
covers the untrusted COTS operating system, application
software and custom cross domain infrastructure residing in
an SLS MILS partition. From a security perspective, these
untrusted elements are assumed to be capable of any possible
(mis)behaviour. From a modelling perspective the size of this
codebase is therefore unimportant.
The second group of components includes the code for
all trusted elements in our current Minisec based prototype
implementation. With the exception of the very large Linux
kernel – but not a standard Linux user-space, which is
replaced by the OCRM-hosted PRISM implementation – this
totals just 42,308 lines of trusted code. However, although 2-
3 orders of magnitude smaller than the untrusted code base,
even this is beyond the current reach of exhaustive formal
modelling techniques.
The third group of components represents our estimation
of the minimum sized code base that could implement
PRISM’s core functionality in paranoid mode using only
symmetric cryptography, optimising it for productisation.
This disables the identiﬁed covert channels along with the
requirement for monitoring them, and excludes public key
cryptography required for sharing ﬁles between TCBs. The
Linux kernel could be replaced with a highly certiﬁed COTS
separation kernel such as Green Hills Integrity or seL4. The
general purpose MLS middleware and cross domain infras-
tructure would be replaced by a minimal, single purpose
framework built for solely supporting a likewise minimised
PRISM implementation. Hence, we estimate the entire TCB
could be reduced to less than 10,000 lines of (pre-certiﬁed)
code for the µkernel base and crypto support, and less than
2,000 lines for PRISM application component.
A thorough security analysis of this optimised PRISM
implementation would be eminently achievable using current
state of the art modelling techniques. With careful imple-
mentation and evaluation, we believe that certiﬁcation to
EAL6+ or beyond of PRISM’s extremely useful capability
would be a highly tractable proposition.
294
X. FUTURE WORK
Although we have already demonstrated the feasibility of
adapting complex COTS software to a high assurance MLS
environment, an improved approach would include building
MLS awareness (but not trust) into COTS applications. For
example, in order to assist the TCB to differentiate between
a copy/paste that may contain embedded high-level data
and an at-level insertion of new data, or to expose events
such as the renaming of low-level cross reference structures,
the patch should be constructed as a transaction of the
actual operation being performed by the application. These
types of extensions would encourage more frequent, smaller
transactions, help avoid ambiguous corner cases, and lead
to more robust operation. Sun et. al. [22] demonstrate an
adaptation layer for Microsoft Ofﬁce that intercepts mouse
and keyboard input which could be used to implement this
type of facility. While this would add complexity to the
untrusted application, it is outside the TCB and would not
require difﬁcult and expensive security evaluation.
Our discussion in this paper also glossed over crypto-
graphic mechanisms for signing, encryption and key distri-
bution. Although the Annex OCRM provides methods for
public and private key cryptography that are used for the
authentication and encryption of communication between
Minisec devices, we have not yet
integrated the use of
these primitives for key agreement, signatures or encryption
within MLSDoc ﬁles. It is not difﬁcult, however, to envisage
leveraging these facilities so that one Minisec’s TCB can
export an MLSDoc to another TCB by block encrypting the
MLSDoc with a random key and distributing that package
to the target TCB along with a public-key encrypted bulk
decryption key. A similar mechanism could be used to
protect canonical MLSDoc ﬁles stored in system-low mode
outside the TCB.
MLS instantiation, thus delivering a seamless user experi-
ence almost indistinguishable from native MLS. Although
we demonstrated this using the Annex Minisec platform, our
method is equally suitable for retroﬁtting MLS functionality
into other COTS applications using a Multiple Independent
Levels of Security (MILS) framework in any separation
kernel or virtualisation based isolation environment.
ACKNOWLEDGMENTS
We wish to thank the anonymous reviewers for their
helpful comments that assisted in clarifying aspects of the
paper.
REFERENCES
[1] UCDMO cross domain inventory version 3.4.0, June 2010.
http://www.ucdmo.gov/ (accessed 23 Sept 2010).
[2] Jim Alves-Foss, W. Scott Harrison, Paul Oman, and Carol
Taylor. The MILS architecture for high-assurance embedded
systems.
International Journal of Embedded Systems, 2(3-
4):239–247, 2006.
[3] M. Anderson, C. North, J. Grifﬁn, R. Milner, J. Yesberg, and
K. Yiu. Starlight: Interactive link. In ACSAC, pages 55–64.
IEEE Computer Society, 1996.
[4] M. Anderson, C. North, and K. Yiu. Towards countering the
rise of the silicon trojan. Technical Report DSTO-TR-2220,
DSTO Information Sciences Laboratory, 2008.
[5] Ross Anderson. Security Engineering. Wiley, ﬁrst edition,
2001.
[6] D. E. Bell and L. J. LaPadula. Secure computer systems:
mathematical foundations and model. Technical Report M74-
244, The MITRE Corp., Bedford, Mass., May 1973.
XI. CONCLUSION
[7] Department of Defense. Department of defense trusted
computer system evaluation criteria, December 1985.
We have shown how our Program Replication and Integra-
tion for Seamless MILS (PRISM) architecture can maintain
trusted, ﬁne grained (intra-document) Bell LaPadula sepa-
ration between information at multiple security levels. The
security of our solution relies on only a tiny Trusted Com-
puting Base (TCB) to maintain the canonical representations
of Multi-Level Secure (MLS) documents and provide a
policy-verifying update and coordination mechanism. When
implemented on the Annex Minisec platform, these mech-
anisms provide strong guarantees on data conﬁdentiality,
integrity and availability. All other functionality is provided
by Commercial Off The Shelf (COTS) software and ﬁle
formats, plus small untrusted add-ins for performing ﬁle
format translation. We presented the utility of our approach
using Microsoft Word and DokuWiki.
We also showed that by judiciously restricting user inter-
action, multiple Single-Level Secure (SLS) instantiations of
COTS programs can be made to appear to behave as a single
[8] DocuWiki
Community.
http://www.docuwiki.org.
DocuWiki,
2010.
[9] D.A. Grove, T.C. Murray, C.A. Owen, C.J. North, J.A.
Jones, M.R. Beaumont, and B.D. Hopkins. An overview
of the Annex system.
In Proc. Annual Computer Security
Applications Conference. IEEE, December 2007.
[10] D.A. Grove, C.J. North, A.P. Murray, T. Newby, M.R. Beau-
mont, M. Chase, S. Haggett, and C.A. Owen. The Annex
Multi-Level Secure computing architecture. DSTO technical
report, 2011.
[11] Joshua P. Macdonald. File system support for delta compres-
sion. Master’s thesis, University of California at Berkeley,
2000.
[12] Dylan McNamee, CDR Scot Heller, and Dave Huf. Building
multilevel secure web services-based components for the
global information grid. CrossTalk, pages 15–19, May 2006.
295
[13] T. Newby, D.A. Grove, A.P. Murray, C.A. Owen, and C.J.
North. The second generation Annex TCB. DSTO technical
report, 2011.
[14] Kar Leong Ong, Thuy Nguyen, and Cynthia Irvine. Imple-
mentation of a multilevel wiki for cross-domain collaboration.
Technical report, Naval Postgraduate School, 2008.
[15] Colin Percival.
Naive differences of executable code.
http://www.daemonology.net/bsdiff, 2003.
[16] Neetu Rajpal. Using the XML diff and patch tool in your
http://msdn.microsoft.com/en-
applications, August 2002.
us/library/aa302294.aspx.
[17] Tristan Richardson, Quentin Stafford-Fraser, Kenneth R.
Wood, and Andy Hopper. Virtual network computing. IEEE
Internet Computing, 2(1):33–38, 1998.
[18] J.A. Rome and J.S. Tolliver. Multilevel architectures for elec-
tronic document retrieval.
In National information systems
security conference. Oak Ridge National Lab., TN (United
States), 1997.
[19] Sebastian R¨onnau, Geraint Philipp, and Uwe M. Borghoff.
Efﬁcient change control of XML documents.
In DocEng
’09: Proceedings of the 9th ACM symposium on Document
engineering, pages 3–12, New York, NY, USA, 2009. ACM.
[20] C. E. Shannon. A mathematical theory of communication.
The Bell System Technical Journal, 27:379–423,623–656,
1948.
[21] S. P. Shieh and V. D. Gligor. Detecting illicit
leakage
of information in operating systems. Journal of Computer
Security, 4:123–148, 1996.
[22] Chengzheng Sun, Steven Xia, David Sun, David Chen,
Haifeng Shen, and Wentong Cai. Transparent adaptation of
single-user applications for multi-user real-time collaboration.
ACM Trans. Comput.-Hum. Interact., 13(4):531–582, 2006.
[23] W. Mark Vanﬂeet, R. William Beckwith, Ben Calloni, Jahn A.
Luke, Carol Taylor, and Gordin Uchenick. MILS: Architec-
ture for high-assurance embedded computing. The Journal of
Defense Software Engineering, August 2005.
296