## Bug Report
### Which version of ShardingSphere did you use?
master - `06834bb`
### Which project did you use? ShardingSphere-JDBC or ShardingSphere-Proxy?
ShardingSphere-Proxy
### Expected behavior
zk get latest content
### Actual behavior
zk doesn't get latest content
### Reason analyze (If you can)
### Steps to reproduce the behavior, such as: SQL to execute, sharding rule
configuration, when exception occur etc.
    mode:
      type: Cluster
      repository:
        type: ZooKeeper
        props:
          namespace: governance_ds
          server-lists: localhost:2181
          retryIntervalMilliseconds: 500
          timeToLiveSeconds: 60
          maxRetries: 3
          operationTimeoutMilliseconds: 500
      overwrite: true
    rules:
      - !AUTHORITY
        users:
          - root@%:root
          - sharding@:sharding
        provider:
          type: ALL_PRIVILEGES_PERMITTED
      - !TRANSACTION
        defaultType: XA
        providerType: Atomikos
        # When the provider type is Narayana, the following properties can be configured or not
        props:
          recoveryStoreUrl: jdbc:mysql://127.0.0.1:3306/jbossts
          recoveryStoreDataSource: com.mysql.jdbc.jdbc2.optional.MysqlDataSource
          recoveryStoreUser: root
          recoveryStorePassword: 12345678
      - !SQL_PARSER
        sqlCommentParseEnabled: true
        sqlStatementCache:
          initialCapacity: 2000
          maximumSize: 65535
          concurrencyLevel: 4
        parseTreeCache:
          initialCapacity: 128
          maximumSize: 1024
          concurrencyLevel: 4
    props:
      max-connections-size-per-query: 1
      kernel-executor-size: 16  # Infinite by default.
      proxy-frontend-flush-threshold: 128  # The default value is 128.
      proxy-hint-enabled: false
      sql-show: true
      check-table-metadata-enabled: false
      show-process-list-enabled: true
        # Proxy backend query fetch size. A larger value may increase the memory usage of ShardingSphere Proxy.
        # The default value is -1, which means set the minimum value for different JDBC drivers.
      proxy-backend-query-fetch-size: -1
      check-duplicate-table-enabled: false
      proxy-frontend-executor-size: 0 # Proxy frontend executor size. The default value is 0, which means let Netty decide.
        # Available options of proxy backend executor suitable: OLAP(default), OLTP. The OLTP option may reduce time cost of writing packets to client, but it may increase the latency of SQL execution
        # and block other clients if client connections are more than `proxy-frontend-executor-size`, especially executing slow SQL.
      proxy-backend-executor-suitable: OLAP
      proxy-frontend-max-connections: 0 # Less than or equal to 0 means no limitation.
      sql-federation-enabled: false
        # Available proxy backend driver type: JDBC (default), ExperimentalVertx
      proxy-backend-driver-type: JDBC
    schemaName: sharding_db
    dataSources:
      ds_0:
        url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&useSSL=false
        username: root
        password: 123456
        connectionTimeoutMilliseconds: 30000
        idleTimeoutMilliseconds: 60000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 1
      ds_1:
        url: jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&useSSL=false
        username: root
        password: 123456
        connectionTimeoutMilliseconds: 30000
        idleTimeoutMilliseconds: 60000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 1
    rules:
    - !SHARDING
      tables:
        t_order:
          actualDataNodes: ds_${0..1}.t_order_${0..1}
          tableStrategy:
            standard:
              shardingColumn: order_id
              shardingAlgorithmName: t_order_inline
          keyGenerateStrategy:
            column: order_id
            keyGeneratorName: snowflake
        t_order_item:
          actualDataNodes: ds_${0..1}.t_order_item_${0..1}
          tableStrategy:
            standard:
              shardingColumn: order_id
              shardingAlgorithmName: t_order_item_inline
          keyGenerateStrategy:
            column: order_item_id
            keyGeneratorName: snowflake
      bindingTables:
        - t_order,t_order_item
      defaultDatabaseStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: database_inline
      defaultTableStrategy:
        none:
      shardingAlgorithms:
        database_inline:
          type: INLINE
          props:
            algorithm-expression: ds_${user_id % 2}
        t_order_inline:
          type: INLINE
          props:
            algorithm-expression: t_order_${order_id % 2}
        t_order_item_inline:
          type: INLINE
          props:
            algorithm-expression: t_order_item_${order_id % 2}
      keyGenerators:
        snowflake:
          type: SNOWFLAKE
      scalingName: default_scaling
      scaling:
        default_scaling:
          input:
            workerThread: 40
            batchSize: 1000
          output:
            workerThread: 40
            batchSize: 1000
          streamChannel:
            type: MEMORY
            props:
              block-queue-size: 10000
          completionDetector:
            type: IDLE
            props:
              incremental-task-idle-minute-threshold: 30
          dataConsistencyChecker:
            type: DATA_MATCH
            props:
              chunk-size: 1000
  * execute
    select * from t_order;
    show processlist;
found this
    mysql> show processlist;
    +--------------------------------------+------+-----------+-------------+---------+------+---------------+-----------------------+
    | Id                                   | User | Host      | db          | Command | Time | State         | Info                  |
    +--------------------------------------+------+-----------+-------------+---------+------+---------------+-----------------------+
    | 55d2551d-57ed-8810-ee00-f177853a6fdb | root | 127.0.0.1 | sharding_db | Execute | 1    | Executing 1/2 | select * from t_order |
    +--------------------------------------+------+-----------+-------------+---------+------+---------------+-----------------------+
But, it should be removed.
### analyze
Debug `ProcessRegistrySubscriber` `reportExecuteProcessUnit` method  
I found first thread save successfully. But second thread didn't get the
latest content.  
![image](https://user-
images.githubusercontent.com/86938616/157629374-d066bfa7-be8e-4a6f-a98d-4267d4f919f2.png)