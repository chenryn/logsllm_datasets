    ![{%}](Image00135.jpg)
    **图 4-86 除了客服（wasbook）以外 bob 也收到了邮件**
    虽然客服（wasbook）也收到了同样的邮件，但由于添加 bob 时使用了
    Bcc（密送）的方式，因此客服并不知道该邮件也被发送给了
    bob，而且很可能只是认为收到了垃圾邮件而立刻将其删除。
    除了 Bcc，49-002.php 中还能够添加 Cc 或 To（收件人）、Reply-To
    等。同样也能添加 Subject（标题），但添加标题后邮件头中就有了两个
    Subject，究竟显示哪一个则要取决于所使用的邮件客户端。
-   **攻击方式 2：篡改正文**
    在上面的攻击方式中，正文中还保留了"收到了以下用户发来的咨询......"的信息，因此并没有达到任意更改正文内容的效果。下面我们就使用邮件头注入攻击来尝试更改正文。其实更改正文的方法很简单，只需在邮箱输入框的
    From 地址中插入一个空行就能够书写邮件的正文。假设在 49-900.html
    的邮箱输入框内输入以下内容。由于使用中文的话需要一些 MIME
    的知识，因此此处的例子中我们采用了英语。
    ``` 代码无行号
    PI:EMAIL
    Bcc: PI:EMAIL
    Super discount PCs 80% OFF! http://trap.example.com/
    ```
    点击发送按钮后，邮件客户端（Foxmail）中就会显示如下。
    ![{%}](Image00136.jpg)
    **图 4-87 在邮箱输入框中输入的内容出现在了正文中**
    可以看到添加在 From 字段之后的消息出现在了正文中。
    然而这样的邮件正文会让人感觉很可疑，因此在实际的攻击中，攻击者会使用大量的空行来迷惑用户，或者使用
    MIME
    来隐藏后面的正文消息。另外还能够添加附件。下面我们就来简单地介绍一下这种方法。
-   **通过邮件头注入攻击添加附件**
    上面说到通过邮件头注入攻击还能够添加附件。下图即为使用 49-002.php
    将恶意软件（实际为防病毒软件的测试用文件 [51]{.注释编号}
    ）以附件的形式添加到邮件中的结果。可以看出，正文中使用了中文，原来的正文则被很好地隐藏了起来。
    ![{%}](Image00137.jpg)
    **图 4-88 通过邮件头注入攻击能够添加附件**
    攻击的奥秘在于恶意利用了 MIME 的 multipart/mixed
    形式。读者们只需在安全隐患试验环境中的 49-901.html
    中点击发送按钮就能够亲自体验这一攻击手段。此外，在
     的菜单中选择"5. 49-901:
    咨询表单（通过邮件头注入攻击添加附件）"，也能够轻松地打开该页面。
    但是，如果计算机中安装了防病毒软件，附件就有可能被删除或被替换为别的文件。上面的截图是暂时关闭了防病毒软件后取得的。
[51]{.注释编号下} 详情请参考 7.4.4 节。
#### **安全隐患的产生原因**
要理解邮件头注入漏洞产生的原因，就必须要知道邮件的消息格式。邮件的消息格式与
HTTP 相似，消息头与正文用空行相隔。图 4-89 即为邮件消息的示例。
+-----------------------------------+-----------------------------------+
| 消息头^52^                        |     To: PI:EMAIL        |
|                                   |     Subject: =?ISO-2022-JP        |
|                                   | ?B?GyRCTGQkJDlnJG8kOyQsJCIbKEI=?= |
|                                   |     =?ISO                         |
|                                   | -2022-JP?B?GyRCJGokXiQ3JD8bKEI=?= |
|                                   |     From: PI:EMAIL        |
|                                   |     Content-Type                  |
|                                   | : text/plain; charset=ISO-2022-JP |
+-----------------------------------+-----------------------------------+
| 空行                              |                                   |
+-----------------------------------+-----------------------------------+
| 正文                              | 收到                              |
|                                   | 了以下用户发来的咨询，请进行处理\ |
|                                   | 请问发货编号为 4309               |
|                                   | 的交货期限是什么时候              |
+-----------------------------------+-----------------------------------+
**图 4-89 邮件的消息格式**
> ^52^ Subject 消息头占了 2 行是因为使用了"续行"。续行的第 2
> 行以后的行以空格开头。收件人的邮箱地址很长的时候也会用到续行。其实
> HTTP 中也定义了续行，但平时几乎不会使用。
To 为收件人，Subject 为标题，From
为发件人的邮箱地址。发送邮件时经常使用的 sendmail
命令以及多数发送邮件程序库都会从邮件的消息头中取得发送目标的邮箱地址
[53]{.注释编号} 。
[53]{.注释编号下} sendmail
命令在默认情况下会以命令参数的形式来指定收件人。而指定了 -t
选项后，收件人的邮箱地址就可以从邮件消息的 To、Cc、Bcc 中取得。
邮件头注入漏洞产生的主要原因与 HTTP
消息头注入漏洞相似。我们知道，消息头中各字段以换行符隔开，因此，如果能够在外界传入的参数中插入换行符，那么就可以添加新的消息头。下图为在
From 消息头后添加 Bcc 消息头的例子。
![{%}](Image00138.jpg)
**图 4-90 添加 Bcc 消息头**
同样，使用该方法也能够添加正文。
![{%}](Image00139.jpg)
**图 4-91 添加正文**
由此可见，换行符在邮件的消息头中有着特殊的意义，如果应用中没有对换行符做相应的处理，就会给外界以添加或更改消息头和正文的可乘之机。而这也是邮件头注入漏洞产生的原因。尤其是在
CGI 程序中发送邮件时，以前普遍采用自己生成邮件消息并使用 sendmail
命令发送的方法，然而使用这种方法生成邮件消息时是极易被混入安全隐患的。
#### **对策**
为了消除邮件头注入隐患，首先就要停止使用 sendmail
命令来发送邮件，而是使用专门的程序库。
-   使用专门的程序库来发送邮件
在此基础上，推荐再配合采用以下任一方法。
-   不将外界传入的参数包含在邮件头中
-   发送邮件时确保外界传入的参数中不包含换行符
下面我们就来依次讲解上述对策。
-   **使用专门的程序库来发送邮件**
    发送邮件时，相比于自己生成邮件消息，使用专门的程序库更为安全。使用程序库有以下
    3 个优点。
    -   使用 sendmail
        命令发送邮件时，邮件消息的生成全部由应用程序方面负责，容易引入漏洞
    -   调用 sendmail 命令时容易混入 OS 命令注入漏洞（参考 4.11 节）
    -   理论上专门的程序库中已经做好了邮件头注入漏洞的防范策略
    但是，由于不少专门用于发送邮件的程序库中也被曝出了邮件头注入漏洞
    [54]{.注释编号}
    ，因此，除了使用专门的程序库之外，还需要配合执行先前列出的两个对策中的任意一个。
-   **不将外界传入的参数包含在邮件头中**
    只要确保邮件头中不包含外界传入的参数，就能够彻底杜绝邮件头注入漏洞。因此，在应对邮件头注入漏洞时，应该首先考虑这一措施。
    比如在 49-002.php 中，用户输入的邮箱地址被设置为了 From
    邮件头，但由于该邮件的发送目标是客服管理员，因此，将 From
    消息头固定并在正文中显示用户的邮箱地址，也同样能够达到此表单的目的。
    由此可见，如果可能的话，最好不要在邮件头中包含外界传入的参数。
-   **发送邮件时确保外界传入的参数中不包含换行符**
    如果邮箱地址或标题等允许包含换行符，那么就可能会被添加新的邮件头或正文，从而导致邮件头注入漏洞的产生。由于邮箱地址或标题中本身就不允许包含换行符，所以只需在发送邮件时对换行符进行校验，就可以从根本上防范邮件头注入漏洞。
    具体方法为，不直接调用 `mb_send_mail`
    这类发送邮件时使用的程序库函数，而是编写专门用于发送邮件的包装函数
    [55]{.注释编号}
    ，并在包装函数中校验换行符。另外，在框架提供的发送邮件功能中嵌入校验换行符的处理也是有效的。
-   **邮件头注入的辅助性对策**
    正如前面所说的那样，邮件头中设置的邮箱地址和标题中本来就不应该包含换行符，而这也应该被包含在输入值校验的范围之内。因此，只要进行了妥善的输入校验，就会有助于防范邮件头注入漏洞。
    -   **校验邮箱地址**
        虽然 RFC5322[56]{.注释编号} 中规定了邮箱地址的格式，但是 RFC
        中的规定相当复杂，并非所有的邮件服务器、邮件客户端和 Web
        邮箱服务都完全支持 RFC
        中的规定。因此，只要在各个项目需求中确定邮箱地址的格式，然后再在程序的输入校验中检查是否符合该格式即可。
    -   **校验标题**
        由于标题（Subject
        消息头）中没有格式和字符种类的限制，因此只要使用 4.2
        节中讲述的"与控制字符以外的字符相匹配"的正则表达式即可。换行符也是控制字符的一种，因此也能被校验到。比如，以下例子中的脚本就是为了确保不包含控制字符并将字符数限制在
        1～60。但其前提为内部字符编码为 UTF-8。字符编码不是 UTF-8
        时请使用 `mb_ereg` 函数。
        ``` 代码无行号
        if (preg_match('/\A[[:^cntrl:]]{1,60}\z/u', $subject) == 0) {
          die(' 请输入长度为 1-60 字符的标题 ');
        }
        ```
[54]{.注释编号下}
关于发送邮件时使用的程序库中的邮件头注入漏洞的情况，可以参考佐名木智贵的在线文档"Security
of WebAppli&Mail"\[2\]。
[55]{.注释编号下}
包装函数是指，为了更方便地使用函数或功能而编写的简单的函数。由于是在原函数外包裹了一层使其更容易使用，因此被称为包装函数。
[56]{.注释编号下} 
#### **总结**
本节讲述了与邮件发送功能相关的安全隐患。
由于多数反馈表单中都会使用发送邮件的功能，因此即便是几乎没有什么功能的应用主页也频频发生与邮件发送功能相关的安全隐患。另外，在网上搜索发送邮件的编程方法时，很容易搜到使用
sendmail 命令这类过时的方法，从而也极易引入安全隐患。
因此，为了避免引入安全隐患，学习 Web 应用中发送邮件的正确方法至关重要。
#### **继续深入学习**
为了深入理解与发送邮件相关的安全隐患，对邮件协议（特别是
SMTP）的理解不可或缺。而通过阅读相关的入门书等书籍来学习邮件协议，对解答乱码等问题也很有帮助。
这里向读者们推荐网野卫二所著的《3 分钟 HTTP& 邮件协议基础讲座》\[3\]
一书，此书同时也可以被作为 HTTP 的入门书使用。
邮件程序库中使用 SMTP 与邮件服务器通信的情况下，可能还会发生 SMTP
命令注入攻击。SMTP 命令注入攻击的实例请参考 NTT Communications
公司发表的《关于 .NET Framework 中的 SMTP Command Injection》\[1\]
一文。在 .NET Framework 中发送邮件时可能会需要用到文章中讲到的防范策略。
> **参考文献**
>
> \[1\] NTT Communications.（2011 年 1 月 11 日）. .NET Framework 上の
> SMTP Command Injection について（关于 .NET Framework 中的 SMTP Command
> Injection）. 参考日期：2011 年 1 月 21 日 .
> 参考网址：[/http://www.ntt.com/icto/security/images/sr20110110.pdf](XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)
>
> \[2\] 佐名木智贵 .（2007 年 3 月 27 日）. *Security of WebAppli&Mail*
> . 参考日期：2010 年 12 月 11 日 .
> 参考网址：
>
> \[3\] 网野卫二 .（2010）.《3 分间 HTTP
> ＆メールプロトコル基础讲座》（《3 分钟 HTTP& 邮件协议基础讲座》）.
> 技术评论社 .
## **4.10 文件处理相关的问题** {#text00000.html#nav_point_44}
Web
应用会通过多种多样的形式和文件打交道。而本节的主题就是处理文件时可能产生的
安全隐患。
在有些 Web
应用中，外界能够通过传入参数的形式来指定服务器中的文件名。比如由外界参数来指定模板文件的情况。这样的
Web 应用可能会招致以下攻击。
-   非法访问 Web 服务器内的文件（目录遍历）
-   调用 OS 命令（OS 命令注入）
其中，目录遍历漏洞将在 4.10.1
节中讲述。此外，通过目录遍历攻击有时还能够执行 OS
命令，不过这里我们将此问题归为 OS 命令注入的范畴并在 4.11 节中讲述。
另外，如果数据文件或配置文件被保存在公开目录中，就可能会被外界浏览而造成信息泄漏。详情将在
4.10.2 节中讲述。
### **4.10.1 目录遍历漏洞** {#text00000.html#nav_point_45}
#### **概要**
Web
应用中允许外界以参数的形式来指定服务器上的文件名时，如果没有对文件名进行充分的校验，就可能会造成意料之外的问题，比如文件被浏览、篡改或删除。该安全隐患被称为目录遍历漏洞。
目录遍历漏洞会造成以下影响。
-   浏览 Web 服务器中的文件
    -   泄漏重要信息
-   篡改或删除 Web 服务器中的文件
    -   篡改网页内容，散布谣言或恶意诽谤他人