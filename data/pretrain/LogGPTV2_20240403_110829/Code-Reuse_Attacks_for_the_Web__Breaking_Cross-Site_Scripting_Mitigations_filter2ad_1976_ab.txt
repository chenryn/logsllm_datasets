jected content, trying to detect script insertion. The benign
HTML markup is left as-is.
(3) Gadgets transforms the markup. Gadgets present in
the legitimate JavaScript code take the injected payload
from the DOM using the DOM selectors and transform it
into JavaScript statements.
(4) Script executes. The transformed JavaScript statements
are executed, resulting in XSS.
The precise ways to abuse gadgets to bypass XSS mitigations de-
pend on the type of mitigation and implemented mitigation strategy,
as we described in Section 2.3
3.5 Gadget Types
We identi(cid:27)ed several types of script gadgets useful in bypassing XSS
mitigations. Some of them may result in indirect script execution
on their own; others need to be combined in chains to be useful in
an attack.
3.5.1
String manipulation gadgets. These gadgets transform
their string input by using regular expressions, character replace-
ment and other types of string manipulation. When present, they
can be used to bypass mitigations based on pattern matching. For
example, the following gadget can be used to bypass some mitiga-
tions by using the inner-h-t-m-l attribute name that will later on
be used by Polymer framework to assign to element’s innerHTML
property.
dash.replace(/-[a-z]/g, (m) => m[1].toUpperCase())}
Listing 4: Camel-casing the input in Polymer
Similar features are present in AngularJS frameworks, which
allows the attackers to use benign data attributes in place of ng-
attributes that would be blocked by HTML sanitizers:
var PREFIX_REGEXP = /^((?:x|data)[:\-_])/i;
var SPECIAL_CHARS_REGEXP = /[:\-_]+(.)/g;
function directiveNormalize(name) {
return name.replace(PREFIX_REGEXP, ’’)
.replace(SPECIAL_CHARS_REGEXP, fnCamelCaseReplace);
}
Listing 5: Directive name normalization in AngularJS
3.5.2 Element construction gadgets. These gadgets create new
DOM elements. For XSS mitigation bypass purposes, we’re mostly
focused on identifying gadgets that may programmatically create
new script elements.
document.createElement(input)
document.createElement("script")
jQuery("")
jQuery.html(input) // if input contains 
Listing 6: Example element creation gadgets
One notable element construction gadget is present in jQuery’s
$.globalEval function. This function creates a new script ele-
ment, sets its text property and appends the element to the DOM,
executing the code. $.globalEval combines an element creation
gadget with a JavaScript execution gadget (3.5.4). As $.globalEval
is called in various common jQuery methods (e.g. $.html), a con-
trolled input to those may create new script elements, which is a
useful property for bypassing strict-dynamic CSP (see 4.4)
3.5.3
Function creation gadgets. These gadgets create new
Function objects. The function body is usually composed of a mix
of the input and constant strings. Note that the created function
object needs to be executed by a di(cid:29)erent gadget.
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1712// Knockout Function creation gadget.
var body = "with($context){with($data||{}){return{" +
rewrittenBindings + "}}}";
return new Function("$context", "$element", body);
can be typically identi(cid:27)ed in the framework expression parsing and
evaluation engine which can lead to arbitrary code execution. For
example, the following gadgets can be found in Aurelia’s expression
parser:
// Underscore.js Function creation gadget.
source = "var __t,__p=’’,__j=Array.prototype.join," +
"print=function(){__p+=__j.call(arguments,’’);};\n" +
source + ’return __p;\n’;
var render = new Function(
settings.variable || ’obj’, ’_’, source);
Listing 7: Example function creation gadgets
3.5.4
JavaScript execution sink gadgets. These gadgets are usu-
ally standalone, or are the last in the constructed gadget chain,
taking the input from the previous gadgets and putting it into a
DOM XSS[16] JavaScript execution sink.
eval(input);
inputFunction.apply();
node.innerHTML = "prefix" + input + "suffix";
jQuery.html(input);
scriptElement.src = input;
node.appendChild(input);
Listing 8: Example execution sink gadgets
3.5.5 Gadgets in expression parsers. Some modern JavaScript
frameworks (for example, Aurelia7, AngularJS8, Polymer9, Rac-
tive.js10, Vue.js11) interpret parts of the DOM tree as templates for
the application UI components. Those templates contain expres-
sions written in framework-speci(cid:27)c expression languages to bind a
result of expression evaluation to a given position in the rendered
UI. For example, the following expression displays a capitalized
customer name:
${customer.name.capitalize()}
Listing 9: Sample expression in Aurelia
The framework extracts the template de(cid:27)nition from the DOM,
identi(cid:27)es embedded expressions by searching for appropriate code
delimiters (here: ${ and }), parses the expressions into an AST, and
evaluates them when the UI is rendered.
If the expression language syntax is expressive enough, attackers
can create expressions resulting in arbitrary JavaScript code exe-
cution - for example by traversing a prototype chain or accessing
object constructors [9] [10]. We found that various script gadgets
7http://aurelia.io/
8https://angularjs.org/
9https://www.polymer-project.org/
10http://www.ractivejs.org/
11https://vuejs.org/
if (this.optional(’.’)) { // Property access
result = new AccessMember(result, name);}
}
AccessMember.prototype.evaluate = function(...) {
return instance[this.name];
};
if (this.optional(’(’)) { // Function call
result = new CallMember(result, name, args);
}
CallMember.prototype.evaluate = function(...) {
return func.apply(instance, args);
};
Listing 10: Script gadgets in Aurelia expression parser (sim-
pli(cid:27)ed code)
It’s possible to link the above script gadgets into chains that
execute arbitrary functions such as window.alert - all by using
only benign HTML markup injection. (Aurelia looks for ref and
*.bind attributes in the document - that triggers our gadgets).
Listing 11: HTML Markup triggering gadget chain in Aurelia
In a similar fashion, the following benign HTML markup may
trigger a gadget chain calling alert in Polymer 1.x:
Listing 12: HTML Markup triggering gadget chain in Poly-
mer 1.x
3.6 Expressiveness of Gadget-based Exploits
In this section we discuss the expressiveness of gadget-based miti-
gation bypasses. Via gadgets, an attacker is able to execute arbitrary,
Turing-complete code. In general, we identi(cid:27)ed three ways of doing
so:
• Eval-like functions: If a gadget is able to trigger a call
to eval or another eval-like function, executing arbi-
trary code is straightforward. In our examples, we usually
demonstrate how the gadget is able to call a single function
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1713inside the window object with a single attacker-controlled
parameter (e.g. alert(1)). As the eval function is also
located inside the window object and accepts one or more
parameters, all of these examples are capable of executing
arbitrary, Turing-complete JavaScript code.
• Appending a script element: Another class of gadgets
aims at appending a script element with either an attacker-
controlled src attribute or an attacker-controlled script
body. Similar to eval-based gadgets, this allows an attacker
to execute arbitrary code.
• Abusing the expressiveness of an expression lan-
guage: Most gadget-based mitigation bypasses leverage
eval-like functions or new script elements. However, in
Web applications employing some variants of CSP (see Sec-
tion 4.1.1), it is not possible to use these bypass methods. In
these cases, we can leverage expression languages to gain
arbitrary code execution. All expression languages that we
investigated are Turing-complete. If an exploit is able to
execute the expression interpreter, the exploit is as expres-
sive as the expression language itself. However, even if the
expression language itself is not Turing-complete, we can
still gain Turing-complete code execution in some cases.
Listing 17, for example, shows a very simple expression-
based attack to steal and reuse a CSP nonce in order to
add a seemingly trusted script, that allows us to achieve
arbitrary JavaScript code execution.
3.7 Finding Script Gadgets
Script gadgets (3.3) on their own are legitimate, trusted JavaScript
statements or code blocks. While some of them (3.5.4) are also
DOM XSS [16] sinks, others are as benign as property assignment,
or property traversal statements. This fact makes it particularly
di(cid:28)cult to identify such gadgets in the web application codebase.
We found the following two techniques are useful to identify
script gadgets:
3.7.1 Manual code inspection. First of all, gadgets can be found
manually or with the assistance of static-analysis tools. Finding
some of the simpler gadget types (for example, JS execution sinks or
Function creation gadgets) is straightforward. We found that more
complex gadgets, especially the ones present in expression parsers,
require signi(cid:27)cant e(cid:29)ort to locate and evaluate for usefulness. A
gadget may only be used if it’s reachable from a benign HTML
markup injection. For example, any property access, property setter,
or function call may potentially be useful in a chain, but only if the
property name or function object may be directly controlled from
the markup.
We found that manual code inspection makes it possible to (cid:27)nd
gadgets that would not otherwise be triggered in the usual applica-
tion code (cid:30)ow. For example, in Polymer 1.x (see Listing 12) we were
able to determine that overriding a _rootDataHost property lets us
execute JavaScript statements in a di(cid:29)erent scope, which lets us trig-
ger subsequent gadgets in the chain. This "private" _rootDataHost
property was never meant to be accessible from Polymer expres-
sions.
In this research, we used manual code inspection to identify
gadgets in modern JavaScript frameworks (4.1).
3.7.2 Taint tracking. A subset of gadgets may be identi(cid:27)ed by
rendering the web application in a browser enriched with a taint-
tracking engine [17]. By marking the entirety of DOM tree as tainted
(i.e. simulating that the attacker has a re(cid:30)ected HTML injection
capability), and checking whether tainted values reach speci(cid:27)c
JavaScript execution sinks, we were able to identify (cid:30)ows linking
certain DOM selectors with JavaScript execution. While this ap-
proach is e(cid:29)ective at scale, it has the limitation of only discovering
gadgets that are already used in a given web application (albeit not
neccesarily for script execution).
In this research, we used the taint tracking approach to evaluate
script gadget prevalence in user-land code (5.4).
4 CONCRETE XSS MITIGATION BYPASSES
USING SCRIPT GADGETS
In this section, we provide detailed information on how script gad-
gets can be leveraged to circumvent concrete state-of-the-art XSS
mitigations. We’ll follow the countermeasure classi(cid:27)cations, based
on their underlying mechanisms, that we introduced in Section 2.3.
4.1 Gadgets in Popular JavaScript Libraries
In order to measure the e(cid:29)ectiveness of gadgets in bypassing XSS
mitigations, we needed to collect:
(1) A list of XSS mitigation implementations with di(cid:29)erent
(2) A list of as many gadgets as possible in popular frameworks
strategies
and libraries
4.1.1 Collecting a list of popular XSS mitigations. We selected
XSS mitigations that were either open-source, or widely distributed.
We also wanted a cross-section di(cid:29)erent mitigation implementation
strategies. The mitigations we decided to test were:
• Content Security Policy using di(cid:29)erent types of code
– Whitelist-based where code is trusted based on
(cid:27)ltering:
where it originates.
– Nonce-based where code is trusted only if it’s accom-
panied by a secret cryptographic nonce.
– Unsafe-eval source expression is usually used to-
gether with other policies, but looking at it separately
allows us to investigate eval-based gadgets.
of sanitization:
– Strict-dynamic source expression is usually used to-
gether with a nonce-based CSP to automatically prop-
agate the trust of a nonced script to all script elements
generated by it.
• Client-side HTML sanitizers using di(cid:29)erent approaches
– DOMPurify is a JavaScript-based HTML sanitizer
that supports HTML, SVG, MathML, among others.
another
JavaScript-based HTML sanitizer that only supports
HTML.
• Web Application Firewalls are request (cid:27)ltering mitiga-
tions deployed as hardware in front of web servers, as well
as as software next to the web server itself.
– Google’s Closure
contains
library
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1714CSP
Whitelists Nonces Unsafe-eval
3
10
4
Strict-dynamic Chrome
13
13
XSS Filters
HTML Sanitizers
WAFs
Edge NoScript DomPurify Closure ModSecurity
9
9
9
6
9
Table 1: Mitigation-bypasses via gadgets in 16 Popular Libraries
– ModSecurity is an open-source Web Application
Firewall, commonly used with the OWASP Core Rule
Set.
• XSS (cid:27)lters employ either request (cid:27)lter, response sanitiza-
– Chrome / Safari employs a code (cid:27)ltering approach,
tion or code (cid:27)ltering approaches.
blacklisting scripts that appear in the request.
– Internet Explorer / Edge employs a response san-
itization approach, rewriting potentially dangerous
responses with something safe.
– NoScript employs a request (cid:27)ltering approach, block-
ing requests that look suspicious or potentially mali-
cious.
4.1.2 Collecting a list of popular JavaScript libraries. In order to
(cid:27)nd as many di(cid:29)erent gadgets as possible to test against mitigations,
we decided to search for gadgets in di(cid:29)erent popular JavaScript
frameworks and libraries. We obtained the lists of popular frame-
works and libraries from various online resources12 13 14 15 16. From
those lists, we focused on searching for gadgets in the following
frameworks (selected based on popularity and code familiarity by
the authors):
mer)
berJS)
• Trending JavaScript frameworks (Vue.js, Aurelia, Poly-
• Widely popular frameworks (AngularJS, React, Em-
• Older still popular frameworks (Backbone, Knockout,
• Libraries and compilers (Bootstrap, Closure, RequireJS)
• jQuery-based libraries (jQuery, jQuery UI, jQuery Mo-
Ractive, Dojo)
bile)
The process we used for manually identifying gadgets is de-
scribed in Section 3.7.1, but generally it was done by identifying
HTML and eval-based sinks, as well as any documented feature that
seemed like an expression language. In cases when no sinks of that
form were reachable, we then looked for any mechanism exposed
by the framework or library that touched the DOM in any way, and
manually audited the code.
In Table 1 we summarize how many frameworks had gadgets that
could bypass each of the mitigations. Complete bypass collection
found during this analysis is available in the GitHub repository17.
is
a
list
with
gadgets.
Security
frameworks
trending front-end JavaScript
12Mustache
https://github.com/cure53/mustache-security/tree/master/wiki
13GitHub contains a list of
https://github.com/showcases/front-end-javascript-frameworks
14TodoMVC is a list of a sample application written in many di(cid:29)erent JavaScript
frameworks. http://todomvc.com/
15JS.org Rising Stars 2016 is based on the activity on di(cid:29)erent GitHub projects
related to JavaScript frameworks in 2016. https://risingstars2016.js.org/
16State
developers.
to web
http://stateofjs.com/2016/frontend/
17https://github.com/google/security-research-pocs
frameworks.
survey
based
2016
on
of
JS
is
of
a
Table 2 within the Appendix also summarizes our research (cid:27)ndings.
For clarity, in the following sections we present and discuss only a
chosen selection of those bypasses.
4.2 Bypassing Request Filtering Mitigations
Request (cid:27)ltering mitigations attempt to identify malicious or un-
trusted HTML patterns, and stop them before they reach the appli-
cation. To accomplish this, these mitigations generally employ the
following approaches: