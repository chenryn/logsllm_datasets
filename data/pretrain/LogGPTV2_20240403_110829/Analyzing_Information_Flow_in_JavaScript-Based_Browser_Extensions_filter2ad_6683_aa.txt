title:Analyzing Information Flow in JavaScript-Based Browser Extensions
author:Mohan Dhawan and
Vinod Ganapathy
2009 Annual Computer Security Applications Conference
Analyzing Information Flow in JavaScript-based Browser Extensions
Mohan Dhawan and Vinod Ganapathy
Department of Computer Science, Rutgers University
Abstract
JavaScript-based browser extensions (JSEs) enhance the
core functionality of web browsers by improving their look
and feel, and are widely available for commodity browsers.
To enable a rich set of functionalities, browsers typically
execute JSEs with elevated privileges. For example, un-
like JavaScript code in a web application, code in a JSE is
not constrained by the same-origin policy. Malicious JSEs
can misuse these privileges to compromise conﬁdentiality
and integrity, e.g., by stealing sensitive information, such as
cookies and saved passwords, or executing arbitrary code
on the host system. Even if a JSE is not overtly malicious,
vulnerabilities in the JSE and the browser may allow a re-
mote attacker to compromise browser security.
We present Sabre (Security Architecture for Browser
Extensions), a system that uses in-browser information-ﬂow
tracking to analyze JSEs. Sabre associates a label with
each in-memory JavaScript object in the browser, which
determines whether the object contains sensitive informa-
tion. Sabre propagates labels as objects are modiﬁed by the
JSE and passed between browser subsystems. Sabre raises
an alert if an object containing sensitive information is ac-
cessed in an unsafe way, e.g., if a JSE attempts to send the
object over the network or write it to a ﬁle. We implemented
Sabre by modifying the Firefox browser and evaluated it us-
ing both malicious JSEs as well as benign ones that con-
tained exploitable vulnerabilities. Our experiments show
that Sabre can precisely identify potential information ﬂow
violations by JSEs.
1. Introduction
Modern web browsers support an architecture that lets
third-party extensions enhance the core functionality of the
browser. Such extensions enhance the look and feel of the
browser and help render rich web content, such as mul-
timedia. Extensions are widely available for commodity
browsers as plugins (e.g., PDF readers, Flash players, Ac-
tiveX), browser helper objects (BHOs) and add-ons.
This paper concerns JavaScript-based browser exten-
sions (JSEs). Such extensions are written primarily in
JavaScript, and are widely available and immensely pop-
ular (as “add-ons”) for Firefox [4] and related tools, such
as Thunderbird. Notable examples of JSEs for Firefox in-
clude Greasemonkey [5], which allows user-deﬁned scripts
to customize how web pages are rendered, Firebug [3], a
JavaScript development environment, and NoScript [8], a
JSE that aims to improve security by blocking script ex-
ecution from certain websites. Other browsers like Inter-
net Explorer and Google Chrome also support extensions
(e.g., scriptable plugins and ActiveX controls) that contain
or interact with JavaScript code.
However, recent attacks show that JSEs pose a threat to
browser security. Two factors contribute to this threat:
(1) Inadequate sandboxing of JavaScript in a JSE. Un-
like JavaScript code in a web application, which executes
with restricted privileges [9], JavaScript code in a JSE exe-
cutes with the privileges of the browser. JSEs are not con-
strained by the same-origin policy [38], and can freely ac-
cess sensitive entities, such as the cookie store and brows-
ing history. For instance, JavaScript in a JSE is allowed
to send an XMLHttpRequest to any web domain. Even
though JavaScript only provides restricted language-level
constructs for I/O, browsers typically provide cross-domain
interfaces that enable a JSE to perform I/O. For example,
although JavaScript does not have language-level primi-
tives to interact with the ﬁle system, JSEs in Firefox can
access the ﬁle system via constructs provided by the XP-
COM (cross-domain component object model) interface [7].
Importantly, these features are necessary to create expres-
sive JSEs that support a rich set of functionalities. For
example, JSEs that provide cookie/password management
functionality rely critically on the ability to access the
cookie/password stores.
However, JSEs from untrusted third parties may contain
malicious functionality that exploits the privileges that the
browser aﬀords to JavaScript code in an extension. Exam-
ples of such JSEs exist in the wild. They are extremely
easy to create and can avoid detection using stealth tech-
niques [11, 13–15, 18, 41]. Indeed, we wrote several such
JSEs during the course of this project.
(2) Browser and JSE vulnerabilities. Even if a JSE is not
malicious, vulnerabilities in the browser and in JSEs may al-
low a malicious website to access and misuse the privileges
of a JSE [12, 35, 39, 40, 45]. Vulnerabilities in older ver-
sions of Firefox/Greasemonkey allowed a remote attacker to
access the ﬁle system on the host machine [35, 45]. Simi-
larly, vulnerabilities in Firebug [12, 39] allowed remote at-
tackers to execute arbitrary commands on the host machine
using exploits akin to cross-site scripting. These attacks ex-
ploit subtle interactions between the browser and JSEs.
While there is much prior work on the security of
untrusted browser extensions such as plugins and BHOs
(which are distributed as binary executables) particularly in
the context of spyware [22, 30, 31], there is relatively lit-
tle work on analyzing the security of JSEs. Existing tech-
niques to protect against an untrusted JSE rely on load-
time veriﬁcation of the integrity of the JSE, e.g., by ensur-
ing that scripts are digitally signed by a trustworthy source.
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.43
382
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply. 
However, such veriﬁcation is agnostic to the code in a JSE
and cannot prevent attacks enabled by vulnerabilities in the
browser or the JSE. Ter-Louw et al. [41] developed a run-
time agent to detect malicious JSEs by monitoring XP-
COM calls and ensuring that these calls conform to a user-
deﬁned security policy. Such a security policy may, for in-
stance, prevent a JSE from accessing the network after it
has accessed browsing history. Unfortunately, XPCOM-
level monitoring of JSEs is too coarse-grained and can be
overly restrictive. For example, one of their policies disal-
lows XPCOM calls when SSL is in use, which may prevent
some JSEs from functioning in a https browsing session.
XPCOM-level monitoring can also miss attacks, e.g., a JSE
may disguise its malicious actions so that they appear benign
to the monitor (in a manner akin to mimicry attacks [43]).
This paper presents Sabre, a system that uses in-browser
information-ﬂow tracking to analyze JSEs. Sabre associates
each in-memory JavaScript object with a label that deter-
mines whether the object contains sensitive information.
Sabre modiﬁes this label when the corresponding object is
modiﬁed by JavaScript code (contained both in JSEs and
web applications). Sabre raises an alert if a JavaScript ob-
ject containing sensitive data is accessed in an unsafe way,
e.g., if a JSE attempts to send a JavaScript object contain-
ing sensitive data over the network or write it to a ﬁle. In
addition to detecting such conﬁdentiality violations, Sabre
also uses the same mechanism to detect integrity violations,
e.g., if a JSE attempts to execute a script received from an
untrusted domain with elevated privileges.
Sabre diﬀers from prior work [22] that uses information-
ﬂow tracking to analyze plugins and BHOs because it tracks
information ﬂow at the level of JavaScript instructions and
does so within the browser. In contrast, prior work on plugin
security tracks information ﬂow at the system level by track-
ing information ﬂow at the granularity of machine instruc-
tions. These diﬀerences allow Sabre to report better forensic
information with JSEs because an analyst can explain ﬂow
of information at the granularity of JavaScript objects and
instructions rather than at the granularity of memory words
and machine instructions. For example, prior work [22]
required the system-level information-ﬂow tracker to have
access to OS-aware views in order to attribute suspicious
actions to speciﬁc plugins and BHOs.
In contrast, Sabre
can readily attribute suspicious actions to the JSEs that per-
formed these actions. Finally, Sabre can be implemented by
modifying the web browser and does not require the browser
to execute in specialized information-ﬂow tracking environ-
ments (e.g., a modiﬁed system emulator).
Although Sabre employs techniques similar to prior
work [16, 42], it diﬀers in two ways. First, Sabre precisely
tracks information ﬂows across diﬀerent browser subsys-
tems, including the DOM, local storage and the network. In
contrast, prior work only tracked information ﬂows within
the JavaScript interpreter and provided rudimentary sup-
port for label propagation across the DOM [42]. Second,
Sabre incorporates support to declassify or endorse infor-
mation ﬂows. This support is critical for the analysis of
JSEs because benign JSEs often contain ﬂows from sensi-
tive sources to low-sensitivity sinks (as illustrated in Sec-
tion 4). To our knowledge, prior work on JavaScript-level
information ﬂow has not needed such support.
To summarize, the main contributions of this paper are:
• Sabre, an information ﬂow tracker for JSEs. We dis-
cuss the techniques used to implement information ﬂow
tracking in a web browser and the heuristics used to
achieve precision (Section 3). Sabre handles explicit in-
formation ﬂows, some forms of implicit ﬂows, as well as
cross-domain ﬂows. We have implemented a prototype
of Sabre in Firefox.
• Evaluation on 24 JSEs. We evaluated Sabre using ma-
licious JSEs as well as benign ones that contained ex-
ploitable vulnerabilities. In these cases, Sabre precisely
identiﬁed information ﬂow violations. We also tested
Sabre using benign JSEs.
In these experiments, Sabre
precisely identiﬁed potentially suspicious ﬂows that we
manually analyzed and whitelisted (Section 4).
We chose Firefox as our implementation and evalua-
tion platform because of the popularity and wide avail-
ability of JSEs for Firefox. However, JSEs pose a secu-
rity threat even in privilege-separated browser architectures
(e.g., [6, 27, 44]) for the same reasons as outlined earlier.
The techniques described in this paper are therefore relevant
and applicable to such browsers as well.
2. Background and Motivating Examples
Writing browser extensions in JavaScript oﬀers a num-
ber of advantages that will ensure that JSEs remain rele-
vant in future browsers as well. JavaScript has emerged as
the lingua franca of the Web and is supported by all major
browsers. It oﬀers several primitives that are ideally suited
for web browsing (e.g., handlers for user-generated events,
such as mouse clicks and keystrokes) and allow easy inter-
action with web applications (e.g., primitives to access the
DOM). JSEs can be written by developers with only a rudi-
mentary knowledge of JavaScript and can readily be mod-
iﬁed by others, which in turn allows for rapid prototyping.
This is in contrast to plugins and BHOs, which are devel-
oped in low-level languages against browser-speciﬁc inter-
faces and are distributed as binary executables. Finally, be-
cause support for JavaScript is relatively stable as browsers
evolve, JSEs can be readily ported across platforms and
browser versions. Indeed, many of these beneﬁts apply to
extensions written in any scripting language, and have moti-
vated several software systems to adopt such extension mod-
els, e.g., AppleScript and Adobe Lightroom.
To allow easy access to browser resources and to support
a rich set of functionalities, browsers execute JSEs with el-
evated privileges. However, doing so renders the browser
susceptible to attacks via JSEs. Malicious JSEs may exploit
elevated privileges to steal sensitive data or snoop on user
activity. Worse, benign JSEs from trusted vendors may con-
tain vulnerabilities that, in combination with browser vul-
nerabilities, may be exploited by remote attackers. The
problem is exacerbated by the lack of good environments
and tools, such as static bug ﬁnders, for code development
in JavaScript. Moreover, because subtle bugs only manifest
when a JSE is used with certain versions of the browser,
comprehensive testing of JSEs for security vulnerabilities is
383
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply. 
window._GM_xmlhttpRequest = window.GM_xmlhttpRequest;
...
1. 
window.watch(‘GM_apis’, trapGM);
window.addEventListener(‘load’, checkGM, true);
Figure 1. Example of malicious JavaScript
code that exploits the Greasemonkey vulner-
ability to read the contents of boot.ini from
disk (adapted from [35]).