tion discovered in our
to install an APK us-
ing the internal storage (the secure option),
the installer
needs to make the APK global-readable; otherwise
PackageManagerService will not have the permission
to access the APK to install it. Based on the observation,
we built a simple yet effective tool that quickly and accu-
rately identiﬁes vulnerable installers. Speciﬁcally, our tool ﬁrst
ﬁnds the APKs including the installation API calls and the
WRITE_EXTERNAL_STORAGE permission. For this purpose,
it uses Apktool [6] to decompile APKs to search for "applic
3Note that simply checking the use of SD-Card is insufﬁcient, since
installers may use both internal and external storage, in a safe way.
TABLE II: Potentially vulnerable GooglePlay apps due to SD-Card usage
SD-Card
Internal Storage
(Potentially vulnerable apps)
(Potentially secure apps)
779/931 (83.7%)
152/931 (16.3%)
779/1493 (52.2%)
152/1493 (10.2%)
Type
Excluding
Unknown Apps
Including
Unknown Apps
Type
Excluding
Unknown Apps
Including
Unknown Apps
TABLE III: Potentially vulnerable pre-installed apps due to SD-Card usage
SD-Card
Internal Storage
(Potentially vulnerable apps)
(Potentially secure apps)
102/105 (97.1%)
102/238 (42.9%)
3/105 (2.86%)
3/238 (1.26%)
ation/vnd.android.package-archive", the instal-
lation API code. Then, on those determined to be installers,
the tool checks whether they contain APIs for setting a
target apk to global-readable. This is done by running
Soot [17] to transform dex code to jimple for retrieving
related APIs, including openFileOutput(filename,Co
ntext.MODE_WORLD _READABLE), setReadable(),
execution of chmod XXX /FilePath, setPosixFileP
ermissions() etc. Once located, the input variables of
these APIs are further analyzed through def-use-chain to
conﬁrm that indeed right parameters are there (e.g., MODE_W
ORLD_READABLE). Based on the results of this analysis,
our tool automatically classiﬁes apps into three categories:
(1) potentially vulnerable apps, which call installation APIs
the target apk
and operate on /sdcard but do not set
global-readable; (2) potentially secure apps, which do
not use /sdcard and also set the target apk global-read
able; (3) unknown apps, all other installers.
Running this simple tool on 12,750 apps from Google Play,
1,493 had installation API calls. Among the 1,493 apps, 779
were classiﬁed as ﬁrst category, 152 as second category and
562 as last category. We also analyzed 12,050 pre-installed
apps extracted from the selected 60 images (20 images from
Samsung, Xiaomi and Huawei which covers diverse device
models and versions). Removing the duplicate apps (based
on package name) left us 1613 apps; different devices from
the same manufacturer contains similar set of apps. Among
them 238 had installation API calls, 102 were classiﬁed as
ﬁrst category, 3 as second category and 133 as last category.
By randomly sampling and manually analyzing (reading smali)
20 apps from each category, we conﬁrmed that all apps in
“potentially vulnerable” category are vulnerable without false
positives. Similarly, Apps in “potentially secure” category were
secure without false negatives. Therefore, our measurement
based on those in the ﬁrst category is conservative, including
only a subset of vulnerable installers.
To understand the impact of the redirect Intent
threat
(Section III-D), we identiﬁed apps that redirect users to
Google Play by using either the URL4 or scheme5. This was
done by inspecting the smali code of the apps for the URL or
the scheme. Note that this approach could miss dynamically
constructed links, which again makes our ﬁndings conservative
(the real impact can be even more signiﬁcant).
B. Results
Pervasiveness of
the SD-Card usage. Our study shows
that the apps vulnerable to the installation hijacking attack
4“http://play.google.com/store/apps/details?id=”
5“market://details?id=”, “https://market.android.com/details?id=”
409
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:31 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV: Number of ﬁxed url or redirection scheme
<= 8
<= 4
<=2
# of hardcoded
url or scheme 1
# apps
5.7%
11%
(2337/12750)
12750: Top 500 apps from 27 categories of Google Play. Duplicates removed.
(1405/12750)
(2090/12750)
(723/12750)
16.4%
18.3%
(Section III-B) are indeed pervasive, as illustrated in Table II.
Among the top 12,750 Google Play apps, 1,493 contain
installation related APIs, 83.7% of them were found to install
apps through the SD-Card and only 16.3% use the internal
storage. Even when we consider all the unknown apps to be
secure (which are certainly not), still 52.2% of the installer
apps appear vulnerable due to the way they use the SD-
Card for installation. Similarly, as shown in Table III, among
12,050 pre-installed apps, 238 contain installation related APIs,
97.1% of them use the SD-Card and only 2.86% (3 apps6)
use the internal storage. Furthermore, we found that 8,721 out
of 12,750 apps from Google Play and 5,864 out of 12,050
pre-installed apps require the WRITE_EXTERNAL_STORAGE
permission, the sufﬁcient condition for hijacking installations,
which indicates that the bar for the attack is rather low.
Impact of vulnerable installers. Table V presents the impacts
of the vulnerable installer apps we discovered. As we see,
those apps impact hundreds of millions of users globally.
We further tested popular appstore apps (Baidu, Tencent,
Qihoo360, SlideMe) and found that all of them are vulnerable.
To understand the attack surface, we measured the number
of system apps with the INSTALL_PACKAGES permission.
Table VI presents the average number of system apps and
the ratio of them with the INSTALL_PACKAGES permission
per vendor. We see that nearly 10% of the system apps have
such privilege. Particularly, found in our study, the number of
the pre-installed apps with the permission has doubled in the
recent three years. Also, more recent ﬂagship models such as
Galaxy 6 Edge Plus, Galaxy S6 from T-Mobile, Sprint, US
Cellular, Verizon, SK Telecom etc. have a tendency to include
more privileged apps (25-31) with the permission.
Usage of platform key. Surprisingly, from the 206,674 pre-
installed apps, we found that all three vendors (Samsung,
Huawei, Xiaomi) were using only one platform key to sign all
the device models they released. Each device of the vendors
have on average 142/68/84 (Samsung/Huawei/Xiaomi) apps
respectively and 884/301/216 apps in total signed by their cor-
responding platform key. Such signed apps are also distributed
through appstores. From the signatures of 1.2 million apps we
collected, 61/125/30 apps are signed with the key of Samsung,
Huawei and Xiaomi. The majority of them are MDM (Mobile
Device Management), remote support, VPN and backup apps.
Among them is teamviewer, a known vulnerable app [25].
Privilege escalation. To study the signiﬁcance of privilege
escalation through Hare generation (Section III-B), we ex-
tracted the apps using the permissions that they themselves
fail to deﬁne from 10 Samsung images (version 4.4.4 to 5.1.1).
Note that these apps can still be secure if the permissions are
deﬁned by authorized parties on the same device. On these
images alone, we found 178 such apps. The permissions used
in these apps were then searched across other 1,181 images,
which led to the discovery of 27,763 unique vulnerable cases
(where a system app using a permission can be installed on
63 secure apps: com.miui.tsmclientj, com.huawei.remoteassistant, com.sams
ung.android.spay (Samsung Pay)
a factory image on which none deﬁnes that permission). On
average, each of these images has 23.5 vulnerable cases. As a
result, a malicious app on the device running such a vulnerable
image can install the Hare creating system app (signed with
the platform key) and deﬁne the missing permission to acquire
the resource the permission protects (such as user contacts).
Apps invoking Google Play. We further studied the apps that
redirect users to Google Play for installing new apps. In total,
84.7% of the top 12,750 apps on the Play store are redirecting
users with the ﬁxed URL or scheme. As shown in Table IV,
among them, 723 contain just a single hard-coded URL or
scheme which makes them the easy and realistic targets for
the redirect Intent attack (Section III-D); there is no confusion
about which apps their redirections will lead to. (Impactful
redirection examples: Facebook→Facebook Messenger, Power
amp→Paid app, Tiny Flashlight + LED→Plugin app)
V. FIGHTING GIAS
A. Understanding the Problems
Some vulnerabilities in Section III have simple solutions,
while other harder ones require new techniques (Section V-B).
Flaws with quick ﬁxes. Below we discuss the cause of each
problem with the solution we suggest.
• Amazon and Xiaomi appstore. The problem comes from
unauthorized execution of the malicious payload (Javascript)
within the Intent the appstore receives. The script then controls
sensitive private API that should not be exposed to the public.
The problem can be addressed by input sanitization, ﬁltering
out malicious script code, and also limiting the capability of
the JSJAVA bridge. We have reported the issue to Amazon and
helped them to ﬁx it. Meanwhile, Xiaomi appstore is vulnera-
ble because it exposes its BroadcastReceiver, which can
be ﬁxed by protecting the receiver with a permission.
• AOSP DM. The ﬁx is to ensure that the DM always checks
where a symbolic link points to whenever it has been used to
access resources. This problem, classiﬁed as a high severity
issue by Google, has been solved according to our report.
• Veriﬁcation API . As mentioned earlier (Section III-B), Ama-
zon appstore and the PIA are using installPackageWith
Verification to verify the integrity of an app’s manifest
ﬁle before installing an app. This approach is insufﬁcient, since
it can be defeated by a malware using the same manifest ﬁle
as the app being replaced. A better solution is to save the
signature of the app once it is downloaded and then verify
the signature during the app’s installation. This can ensure the
integrity of the app during the APK install stage (AIT Step 4),
as the original API was designed for (Section VIII).
Harder problems. The installation hijacking risk (Sec-
tion III-B) is caused by the use of the shared external storage.
The problem cannot be easily ﬁxed by asking the app and
appstore developers to move the whole installation process to
the internal storage, as they need to make full use of the storage
to put their apps on the user’s device (Section III-B). Also
a large number of installer apps including various 3rd party
appstores in the wild still use the SD-Card (see Section IV).
Considering the openness of Android and the fact that they
even come from different countries with different policies, it
becomes unrealistic to expect them to shortly use the internal
storage. To provide Android users immediate protection, we
410
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:31 UTC from IEEE Xplore.  Restrictions apply. 
Vulnerable app
Amazon appstore
DTIgnite
Xiaomi appstore
Huawei appstore
SprintZone
TABLE V: Impact of vulnerable pre-installed apps with INSTALL PACKAGES permission.
Affected devices
Android devices from Verizon and US Cellular are affected. Samsung devices
from Verizon are affected; e.g., Galaxy S4, S5, S6, S6 edge, Note 3, Note 4. Verizon, US Cellular.
200+ distinct device models. Devices shipped through the affected carriers
are impacted. (50+ million apps are already pushed to users device.) [12]
All Xiaomi devices
Affected carriers
All Huawei devices
Android devices released from Sprint. note that we manually veriﬁed it from
smali code. We were not able to actually test the attack.
30+ carriers worldwide including Verizon, T-
Mobile, AT&T and Vodafone.
Carriers that release Xiaomi device - China
Mobile, China Telecom, China Unicom.
Carriers that release Huawei device - China
Mobile, China Telecom, China Unicom.
Sprint.
Affected vendors
Samsung, LG, HTC, Mo-
torola and more.
Vendors that release devices
through affected carriers.
Xiaomi.
Huawei.
Vendors that release devices
through Sprint.
TABLE VI: Average number of system privileged apps and the ratio of the
apps with INSTALL PACKAGES permission.
Avg # of apps with
INSTALL PACKAGES
Samsung Huawei Xiaomi
11.4/95.4
17.7/206
(8.45%)
(11.87%)