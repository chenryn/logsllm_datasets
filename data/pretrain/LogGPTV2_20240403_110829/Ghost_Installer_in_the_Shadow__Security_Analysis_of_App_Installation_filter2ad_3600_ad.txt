### Discovering and Analyzing Vulnerable Installers

When installing an APK using the internal storage (a secure method), the installer must make the APK globally readable; otherwise, `PackageManagerService` will not have permission to access and install it. Based on this observation, we developed a simple yet effective tool to identify vulnerable installers. Our tool first identifies APKs that include installation API calls and the `WRITE_EXTERNAL_STORAGE` permission. For this, it uses Apktool [6] to decompile APKs and search for "application/vnd.android.package-archive" and the installation API code.

Next, the tool checks if these identified installers contain APIs for setting the target APK to be globally readable. This is achieved by running Soot [17] to transform DEX code into Jimple, allowing us to retrieve related APIs such as `openFileOutput(filename, Context.MODE_WORLD_READABLE)`, `setReadable()`, `chmod XXX /FilePath`, and `setPosixFilePermissions()`. The input variables of these APIs are further analyzed through def-use-chain to confirm the correct parameters (e.g., `MODE_WORLD_READABLE`).

Based on this analysis, our tool classifies apps into three categories:
1. **Potentially Vulnerable Apps**: These call installation APIs and operate on `/sdcard` but do not set the target APK to be globally readable.
2. **Potentially Secure Apps**: These do not use `/sdcard` and set the target APK to be globally readable.
3. **Unknown Apps**: All other installers.

We ran this tool on 12,750 apps from Google Play, of which 1,493 had installation API calls. Among these, 779 were classified as potentially vulnerable, 152 as potentially secure, and 562 as unknown. We also analyzed 12,050 pre-installed apps extracted from 60 device images (20 each from Samsung, Xiaomi, and Huawei). After removing duplicates, 1,613 unique apps remained. Among these, 238 had installation API calls, with 102 classified as potentially vulnerable, 3 as potentially secure, and 133 as unknown.

By randomly sampling and manually analyzing 20 apps from each category, we confirmed that all apps in the "potentially vulnerable" category were indeed vulnerable without false positives. Similarly, apps in the "potentially secure" category were secure without false negatives. Therefore, our measurement based on the first category is conservative, including only a subset of vulnerable installers.

### Understanding the Impact of Redirect Intent Threat

To understand the impact of the redirect Intent threat (Section III-D), we identified apps that redirect users to Google Play using either a URL or a scheme. This was done by inspecting the smali code of the apps for the URL or scheme. Note that this approach could miss dynamically constructed links, making our findings conservative (the real impact could be even more significant).

### Results

#### Pervasiveness of SD-Card Usage

Our study shows that apps vulnerable to the installation hijacking attack (Section III-B) are indeed pervasive, as illustrated in Table II. Among the top 12,750 Google Play apps, 1,493 contain installation-related APIs, with 83.7% of them installing apps through the SD-Card and only 16.3% using internal storage. Even if we consider all unknown apps to be secure (which they are not), 52.2% of the installer apps appear vulnerable due to their use of the SD-Card for installation. Similarly, as shown in Table III, among 12,050 pre-installed apps, 238 contain installation-related APIs, with 97.1% using the SD-Card and only 2.86% (3 apps) using internal storage. Furthermore, 8,721 out of 12,750 Google Play apps and 5,864 out of 12,050 pre-installed apps require the `WRITE_EXTERNAL_STORAGE` permission, indicating a low barrier for the attack.

#### Impact of Vulnerable Installers

Table V presents the impacts of the vulnerable installer apps we discovered. These apps affect hundreds of millions of users globally. We also tested popular app store apps (Baidu, Tencent, Qihoo360, SlideMe) and found that all of them are vulnerable.

To understand the attack surface, we measured the number of system apps with the `INSTALL_PACKAGES` permission. Table VI shows the average number of system apps and the ratio of those with the `INSTALL_PACKAGES` permission per vendor. Nearly 10% of system apps have this privilege, and the number of pre-installed apps with this permission has doubled in the past three years. Recent flagship models, such as the Galaxy 6 Edge Plus and Galaxy S6 from various carriers, tend to include more privileged apps (25-31) with this permission.

#### Usage of Platform Key

Surprisingly, from the 206,674 pre-installed apps, we found that all three vendors (Samsung, Huawei, Xiaomi) used only one platform key to sign all the device models they released. Each device has an average of 142/68/84 (Samsung/Huawei/Xiaomi) apps, respectively, with 884/301/216 apps in total signed by their corresponding platform key. These signed apps are also distributed through app stores. From the signatures of 1.2 million apps, 61/125/30 apps are signed with the key of Samsung, Huawei, and Xiaomi. The majority of these are MDM (Mobile Device Management), remote support, VPN, and backup apps, including TeamViewer, a known vulnerable app [25].

#### Privilege Escalation

To study the significance of privilege escalation through Hare generation (Section III-B), we extracted apps using permissions they themselves fail to define from 10 Samsung images (version 4.4.4 to 5.1.1). On these images alone, we found 178 such apps. The permissions used in these apps were then searched across other 1,181 images, leading to the discovery of 27,763 unique vulnerable cases. On average, each image has 23.5 vulnerable cases. A malicious app on a device running such a vulnerable image can install a Hare-creating system app (signed with the platform key) and define the missing permission to acquire the protected resource (such as user contacts).

#### Apps Invoking Google Play

We further studied apps that redirect users to Google Play for installing new apps. In total, 84.7% of the top 12,750 apps on the Play store redirect users with a fixed URL or scheme. As shown in Table IV, 723 of these contain just a single hard-coded URL or scheme, making them easy and realistic targets for the redirect Intent attack (Section III-D). There is no confusion about which apps their redirections will lead to. (Impactful redirection examples: Facebook → Facebook Messenger, Poweramp → Paid app, Tiny Flashlight + LED → Plugin app)

### Fighting GIAS

#### Understanding the Problems

Some vulnerabilities in Section III have simple solutions, while others require new techniques (Section V-B).

**Flaws with Quick Fixes:**
- **Amazon and Xiaomi App Store:** The problem arises from unauthorized execution of the malicious payload (JavaScript) within the Intent received by the app store. The script then controls sensitive private APIs. This can be addressed by input sanitization, filtering out malicious script code, and limiting the JS-JAVA bridge's capabilities. We reported this issue to Amazon and helped them fix it. Meanwhile, the Xiaomi app store is vulnerable because it exposes its `BroadcastReceiver`, which can be fixed by protecting the receiver with a permission.
- **AOSP DM:** The fix is to ensure that the DM always checks where a symbolic link points whenever it is used to access resources. This high-severity issue, as classified by Google, has been resolved according to our report.
- **Verification API:** Amazon app store and the PIA use `installPackageWithVerification` to verify the integrity of an app's manifest file before installation. This approach is insufficient, as malware can use the same manifest file as the app being replaced. A better solution is to save the app's signature upon download and verify it during installation, ensuring the app's integrity during the APK install stage (AIT Step 4).

**Harder Problems:**
- **Installation Hijacking Risk:** This risk is caused by the use of shared external storage. Asking app and app store developers to move the entire installation process to internal storage is not feasible, as they need to utilize the full storage capacity to place their apps on the user's device. Many installer apps, including various third-party app stores, still use the SD-Card (see Section IV). Given Android's openness and the diversity of policies across different countries, it is unrealistic to expect them to switch to internal storage soon. To provide immediate protection for Android users, we propose alternative solutions.

### Conclusion

The pervasiveness of SD-Card usage and the associated vulnerabilities highlight the need for robust security measures. By understanding and addressing these issues, we can enhance the security of Android devices and protect users from potential threats.