# 2013 Trend Micro 25th Anniversary

## UserClient Condition Sample
```c
detail_control_entry_t g_white_listing_detail_control[] = {
    // procName, uid, driverBundleName, driverClassName, selFunctionNO
    {"*", PROCESS_UID_ANY_INTEGER, "*", "IGAccelSharedUserClient", 1},  // crash-24
    {"*", PROCESS_UID_ANY_INTEGER, "*", "AccelSurface", 16},            // crash-23
    {"*", PROCESS_UID_ANY_INTEGER, "*", OBJECT_CLASS_NAME_NO_FOUND, 16},
    {"*", PROCESS_UID_ANY_INTEGER, "*", "HD", 2},                       // crash-21
    {"*", PROCESS_UID_ANY_INTEGER, "*", "IX", 2},                       // crash-21
    {"*", PROCESS_UID_ANY_INTEGER, "*", "AGPM", 7312},                  // crash-11
    {"*", PROCESS_UID_ANY_INTEGER, "*", "IGAccelGLContext", 2}          // crash-28
};
```

## Mach-msg Condition Sample
```c
#define KMSG_IOKIT_SUBSYSTEM_RANGE  0xAF0, 0x0B47

detail_control_entry_for_ipc_kmsg_send_t g_black_listing_detail_control_foripc_kmsg_send[] = {
    // procName, uid, msg_id_from, msg_id_to, routineName, addr, addr_offset_from, addr_offset_to
    {"chrome", PROCESS_UID_ANY_INTEGER, KMSG_IOKIT_SUBSYSTEM_RANGE, "__Xio_connect_method", KMSG_ADDR_OFFSET_ANY_RANGE, KMSG_LEAVING}
};

// Additional subsystem ranges
#define KMSG_MACH_VM_SUBSYSTEM_RANGE  0x12C0, 0x12D4
#define KMSG_MACH_PORT_SUBSYSTEM_RANGE  0xC80, 0x0CA4
#define KMSG_MACH_HOST_SUBSYSTEM_RANGE  0xC8, 0xE4
#define KMSG_HOST_PRIV_SUBSYSTEM_RANGE  0x190, 0x1AA
```

## Context
- **Patterns Accumulated in Bug Hunting Experience:**
  - Provides insight for code review.
  - Identifies buggy modules and interfaces for reverse engineering.
  - Not a vulnerability but indicates potential vulnerabilities.
  - Implemented through condition checkers.

### Context Sample
- **IOKit Related Memory Corruption Vulnerabilities:**
  - Occur when calling `IOMemoryDescriptor::createMappingInTask` to map user-mode buffer space to kernel mode.
  - A value is read from the buffer and used as a size to read or write another buffer.
- **Kernel Information Leak Vulnerability:**
  - The output buffer’s content has a `0xFFFFFF` prefix.

## Best Practices
### Fuzzing Source
- **Multiple Applications:**
  - AppStore (MMORPG games, FaceTime, USB hard disks, Bluetooth, Wi-Fi, VM, DirectX, etc.)
  - Virus Total, Apple OpenSource UT, GitHub sample code.
- **Combination of Various Fuzzing Sources:**
  - Active fuzzing, Python watchdog, browsing WebGL.

### Fuzzing Stability
- **Bypass Active Hangs and Black Screens:**
  - Use condition checkers (e.g., `nvTestlaSurfaceTesla`, `IGAccelGLContext`, `IGAccelSurface`).

### Reproduction
- **Logging:**
  - Log through network.
  - Log to NVRAM, memory, or use `kdp_panic_dump` callback.
- **Core Dump Server:**
  - Example: `sh-3.2# nvram boot-args="pmuflags=1 debug=0xd44 kext-dev-mode=1 kcsuffix=development –v _panicd_ip=10.64.80.106"`
- **Automation:**
  - Use `kdp_panic_dump` callback + dump + reboot.
  - VM (e.g., VMware Fusion) revert.

### Miscellaneous
- **Keep Fuzzing Not Too Busy (Randomize):**
- **Hot Run and On-Demand Fuzzing:**
- **Keep OS Updated with KDK.**

## Exploit to Root
### Obstacles
- **SIP (System Integrity Protection)**
- **KALSR (Kean Team Method)**
- **SMAP (Supervisor Mode Access Prevention)**
- **SMEP (Supervisor Mode Execution Prevention)**

### Tricks
- **OSX Kernel Heap Feng Shui:**
  - A trick to exploit bugs and gain root access.

### OSUnserializeXML
- **Proposed by Stefan Esser (@i0n1c) at SyScan 2012:**
  - [Link to Presentation](https://reverse.put.as/wp-content/uploads/2011/06/SyScan2012_StefanEsser_iOS_Kernel_Heap_Armageddon.pdf)
- **Typical Behavior:**
  - Objects allocated by `OSUnserializeXML` are usually freed by `OSObject::release` in one system call.
- **Special Case:**
  - If the object is referenced by other components, it will not be released even if `object::release` is called.
  - `IORegistry` is a good choice.
  - Find `OSUnserializeXML` invocations near `IORegistry` method calls.

### IOKIT Service IOMProotDomain
- **Selector 7 (kPMSleepSystemOptions):**
  - `RootDomainUserClient::secureSleepSystemOptions`

### Exploit Process
- **Payload:**
  - Ring3 (User Mode) to Ring0 (Kernel Mode)
  - Bypass SMAP, SMEP, KASLR, and kslide.
  - Use ROP gadgets to control execution flow.
  - Steps:
    1. Leak kslide.
    2. Leak heap address.
    3. Spray memory.
    4. Trigger the vulnerability.

### Detailed Exploit Process
- **User Mode:**
  - Call `IOHIDIXControllerUserClient` selector 1 to get `IOHDIXCommand` address.
  - Call `IOHIDIXControllerUserClient` selector 2 to release the object.
- **Kernel Mode:**
  - Call `RootDomainUserClient` selector 7 with a carefully prepared XML including ROP gadgets.
  - Call `IOHIDIXControllerUserClient` selector 2 to execute ROP gadgets and gain control over RIP.

### Demo
- [Demo Link]

## Thank You
- **Thank you very much!**