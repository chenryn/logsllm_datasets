title:WindowGuard: Systematic Protection of GUI Security in Android
author:Chuangang Ren and
Peng Liu and
Sencun Zhu
WindowGuard: Systematic Protection of GUI
Security in Android
Chuangang Ren
Peng Liu
Sencun Zhu
The Pennsylvania State University
The Pennsylvania State University
The Pennsylvania State University
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Android graphic user interface (GUI) system plays
an important role in rendering app GUIs on display and
interacting with users. However, the security of this critical sub-
system remains under-investigated. In fact, Android GUI has been
plagued by a variety of GUI attacks in recent years. GUI attack
refers to any harmful behavior that attempts to adversely affect
the integrity or availability of the GUIs belonging to other apps.
These attacks are real threats and can cause severe consequences,
such as sensitive user information leakage, user device denial
of service, etc. Given the seriousness and rapid growth of GUI
attacks, we are in a pressing need for a comprehensive defense
solution. Nevertheless, existing defense methods fall short in
defense coverage, effectiveness and practicality.
To overcome these challenges, we systematically scrutinize the
security implications of Android GUI system design and propose
a new security model, Android Window Integrity (AWI), to com-
prehensively protect the system against GUI attacks. The AWI
model deﬁnes the user session to be protected and the legitimacy
of GUI system states in the unique mobile GUI environment. By
doing so, it can protect a normal user session against arbitrary
manipulation by attackers, and still preserve the original user
experience. Our implementation, WindowGuard, enforces the
AWI model and responds to a suspicious behavior by brieﬁng the
user about a security event and asking for the ﬁnal decision from
the user. This design not only improves the detection accuracy,
but also makes WindowGuard more usable and practical to meet
diverse user needs. WindowGuard is implemented as an Xposed
module, making it practical to be quickly deployed on a large
number of user devices. Our evaluation shows that WindowGuard
can successfully detect all known GUI attacks, while yielding
small impacts on user experience and system performance.
I.
INTRODUCTION
Mobile graphic user interface (GUI) system plays an im-
portant role in rendering app GUIs on display and interacting
with the user, which has major impacts on the user experience
of a mobile device. In particular, Android’s GUI has greatly
promoted user experience and gained massive popularity to the
Android system. Despite the merits, Android has been plagued
by a variety of GUI attacks in recent years.
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23529
Android GUI attack refers to any harmful behavior that
attempts to adversely affect the integrity and availability of
GUIs belonging to other apps in order to achieve malicious
purposes, such as launching a phishing or spooﬁng window
to lure the user into taking undesirable actions, or forcefully
pushing unwanted GUI content to the screen. There have been
extensive recent studies on Android GUI attacks. In an attack
demonstrated in [7], an attacker launches a phishing GUI
immediately after an interesting event in a banking app is
detected, resulting in bank account information stolen. In [2],
[19], [25], the authors show that apps with certain permissions
can launch different types of powerful phishing or tapjacking
attacks. Notably, a more dreadful attack method, called task
hijacking [28], can be done even without any permission.
Speciﬁcally, by manipulating the activity browsing history
saved in Android tasks, an attacker can launch a broad range
of attacks, including GUI confusion, denial-of-service, and
user activity monitoring attacks. Surprisingly, these attacks
can affect all Android versions and all apps installed on the
vulnerable devices, including the most privileged system apps
and system UI.
More concerningly, the GUI attack vectors are increasingly
employed by real-world malware at an alarming rate. For
instance, several malware families use GUI confusion attacks
to steal credit card information [35]. Ransomware, a type
of malware that renders a user device useless by forcefully
locking the screen until a certain amount of ransom money is
paid, has migrated from PC to the Android world [4], [26],
infecting more than 900 thousand Android devices within two
years [9]. In addition, adware, which repeatedly presents un-
wanted (and sometimes “unclosable”) advertisement windows
to the user, is not only irritating, but also makes the user prone
to further malware infection [27], [33]. Given the severity and
rapid growth of GUI attacks, we have a pressing need for
a comprehensive defense solution to effectively mitigate the
emerging threat.
Challenges: A recent defense solution has been proposed
in [2], which involves a two-layer defense: an app vetting
process based on static analysis, and an on-device defense
mechanism. The static analysis scans for the suspicious use
of GUI-related APIs/permissions and ﬂags the apps who use
them as malicious. A fundamental challenge (also mentioned
by the authors) is that
is difﬁcult for code analysis to
determine the real purpose of using these APIs/permissions.
For instance, although a legitimate screen locker app may use
the same set of APIs and exhibits similar behavior (launching
a lock screen) as a malicious ransomware, the purposes of
it
the two apps are totally different. In this case, it is up to
the user to decide if a screen lock is desirable or not based
on the runtime context. User involvement is adopted by the
second on-device defense in [2], which inherits the idea of
Extended Validation Certiﬁcate (EV) green address bar in
browsers. By putting a reliable app origin indicator in the
navigation bar, an app can constantly inform the user of its
identity as long as the origin indicator is visible. By this
means, it prevents user from providing sensitive information
to the wrong entity in a GUI confusion attack. Despite the
novelty of this solution, the passive defense solely relies on
the correct judgment of savvy users and thus requires users’
continuous attention to the indicator on the navigation bar. This
not only largely affects user experience, but also undermines
its effectiveness, e.g., reportedly only 76% detection rate at
best in a user study. Moreover, this defense strategy is only
helpful in GUI confusion attacks, but cannot defeat other types
of GUI attacks, e.g., denial-of-service attack. In addition, the
requirements of modifying both existing apps (implementing
HTTPS EV certiﬁcation) and the system make it impractical
to be adopted by any signiﬁcant portion of apps or systems in
the Android ecosystem.
Our approach: It is exactly these challenges that this paper
seeks to address by proposing a viable new solution. We take
the ﬁrst steps to systematically scrutinize the security impli-
cations of Android GUI system, one of the most sophisticated
subsystem in Android. At the heart of the problem, a GUI
attack occurs when an attacker interferes with the normal user
session such that the attacker’s GUI ﬁnally takes over part or
all of the device’s display (regardless of if the user realizes it
or not). Although the Android security model renders different
apps sandboxed and isolated from one another, the user session
- a series of GUIs that a user has visited when doing a
particular job - is typically a joint “effort” from different
apps, and is beyond the protection scope of the existing
security mechanisms. The problem is further exaggerated by
the uniqueness of mobile GUI environment. That is, given
the lack of app identiﬁer and user control on the screen,
plus a plethora of APIs that can be abused to affect the GUI
system states, the normal user session is extremely vulnerable
to arbitrary interruption or manipulation by the attacker, e.g.,
popping up a phishing window on top of the current app,
modifying an app’s window history, etc.
To ﬁll this important security gap, we propose a new secu-
rity model - Android window integrity (AWI) - to comprehen-
sively protect the system against GUI attacks. AWI is a generic
security model that clearly designates a user session, speciﬁes
the capabilities of various other principals in the system, and
deﬁnes the legitimacy that the GUI system should keep from
one state to another. AWI is carefully designed to conform to
the Android app model and the norm of app navigation. By
doing so, it protects the normal user session against abrupt
interference by other apps while still preserving the original
user experience. Our implementation of the model, namely
WindowGuard, can systematically protect the GUI system and
aims to defeat all GUI attacks, a much broader range of attacks
than previous work. When WindowGuard is deployed on user
devices,
the user is not bothered at all until a suspicious
behavior is detected, caused by the violation of a set of
integrity criteria deﬁned in the AWI model. WindowGuard then
briefs the user about the security event and asks for the ﬁnal
decision from user, who is inherently more capable of making
the best decision for him/herself based on the context. More
importantly, this design makes WindowGuard more usable and
practical to meet diverse needs from users and app developers
in the current Android ecosystem. Our evaluation shows that
WindowGuard can immediately detect all known GUI attacks
with minimal performance overhead. We also evaluate the
usability of WindowGuard over 12,060 most popular Google
Play apps. We ﬁnd that the WindowGuard has no usability
impact on most apps. Among the 1.03% of apps that trigger
the security alert, most of them are only involved in one type
of security enforcement, which can be promptly turned off
for that app based on user decision and will not distract the
user any longer after that. In summary, we make the following
contributions:
•
•
•
New understanding of the Android GUI security. To
the best of our knowledge, we are the ﬁrst to sys-
tematically overhaul the security implications of the
Android GUI system design, a complex subsystem
that
is composed of a variety of system services
and components. This new understanding can further
inspire follow-up research on mobile GUI system
security.
Novel GUI security model in mobile environment. We
propose a novel security model - Android window
integrity - for the GUI subsystem in a unique mobile
environment like Android. By clearly specifying the
capabilities of various principals in a user session and
deﬁning the legitimacy of GUI system states, AWI is
able to comprehensively and automatically protect a
normal user session against a wide spectrum of GUI
attacks. More importantly, the new security model also
considerably raises the bar for future attacks. New
attacks can now be put under the test of our defense
before they cause real threats.
Implementation and evaluation. WindowGuard is de-
veloped as an Xposed module that can be quickly
deployed and protect a large number of user devices.
WindowGuard implements the AWI model and en-
gages the user when suspicious behaviors are de-
tected. This design involves user input in context-
aware “block it or not” decision-making and also
preserves desired user experience based on user’s
choices. Our evaluation shows that WindowGuard can
detect all known GUI attacks while yielding small
impact on device usability and system performance.
II. ANDROID GUI SYSTEM
Android GUI subsystem is composed of various system
services and components and requires a close collaboration of
them. Activity Manager Service (AMS) and Window Manager
Service (WMS) are among the most important ones. In this
section, we introduce how Android GUI system works and
identify the security risks of this complex system.
A. Activity and Window
Activity: Activity is a type of app component that provides
one or more windows to the user. Activity and window are
2
frame. (4) Once the app receives the shared surface, it can start
drawing the window’s entire view hierarchy on the surface
and signals SurfaceFlinger when the drawing is completed.
This drawing process is synchronized with SurfaceFlinger and
can happen as fast as 60 frames/second. (5) SurfaceFlinger
keeps multiple layers of different windows in a layer stack.
When all the visible layers are ready, SurfaceFlinger composes
them and displays the ﬁnal frame on the screen, with the help
from Hardware Composer (HWC), a device-speciﬁc Hardware
Abstract Layer (HAL) library.
it strictly carries out
to the display hardware,
In this architecture, although SurfaceFlinger has direct
control
the
commands from its “supervisors”. The “supervisors”, i.e. AMS
and WMS, not only control how the windows should be
displayed, e.g. window size, location, transparency, z-order,
but also determine what windows should be made visible. In
other words, these two system services are the heart of Android
GUI system. We now introduce them by looking at an example
shown in Figure 2.
1) Activity Management: Activity management
is per-
formed by AMS. Activities are started by AMS upon client
requests through intents, an abstract description of the activity
to be started. As shown in the left part of Figure 2, every
app activity has one-to-one mapping to its corresponding
ActivityRecord instance in AMS. For convenience, we refer
to an ActivityRecord instance in AMS simply as activity for
the rest of this paper.
AMS organizes all activities in tasks [1]. Each task includes
a stack of activities, namely back stack. Activities in a back
stack are ordered by the time that they are visited, such that
the user can go back to the most recent activity. There is only
one activity running in the system at a time, called focused
activity. The task that contains the focused activity is focused
task; all other tasks are in the background. Figure 2 (in AMS)
shows multiple tasks: two for app A and B, respectively, and
another task for the launcher. When the user clicks an app
icon in the launcher, a new task is typically created and the
main activity of the app becomes the root activity in the task.
When another activity is later started, it is by default pushed
on top of the task that launched it. For instance, activity A2
is started by A1 and is thus put on top of task A. Activity A1
is stopped but remains in the task, whereas A2 gets the focus
and is shown on display. When the user later presses the back
button, the top activity is popped from the task and destroyed,
and the next activity A1 on stack is then resumed and become
the focused activity again. Since activity is the building block
of the application model in Android, AMS essentially controls
the app navigation, and the overall user experience in Android.
2) Window Management: WMS is responsible for a variety
of jobs. One of the most important one is to manage all
windows in the system, update their parameters and pass them
to SurfaceFlinger when needed. Speciﬁcally, each window is
represented as a WindowState instance in WMS. For conve-
nience, we refer to a WindowState instance simply as a window
for the rest of this paper.
All windows in a display (usually only one for mobile
device) are kept in one stack, namely window stack. Once
changes happen to any window or the window stack, e.g.,
window re-sizing, activity launch, etc., WMS would walk
3
Fig. 1. Overview of Android GUI System Architecture
closely related: each activity must have a window instance,
which contains the GUI contents to be displayed. The GUI
contents are speciﬁed by the app developer. If not explicitly
speciﬁed, a default GUI will be populated to the activity’s
window. In Android, activity is designed to be the building
block of app navigation. For example, when an user opens an
email app, the ﬁrst activity may show a login screen; after that
the second activity displays the inbox; and then the user opens
the third one to compose a new message.