        AAAAAAAAAA
这里的 ty 字段是这个 objc 接口的函数原型，se 是 selector 名称，也就是接口名字，后面跟的 AAAA 就是他的参数内容。接收端的
NSXPC 接口正是根据这个 bplist16 中的内容来分发到正确的接口并给予正确的接口参数的。
Ian Beer 提供的 PoC 是跑在 macOS 下的，因此他直接调用了 NSXPC 的接口，然后通过 `DYLD_INSERT_LIBRARIES`
注入的方式 hook 了 `mach_make_memory_entry_64` 函数，这样就能获取这个 send right 并且进行
vm_map。但是在 iOS 上（特别是没有越狱的 iOS）并不能做这样的 hook，如果从 NSXPC
接口入手我们没有办法获得那块共享内存（其实是有办法的:)，但不是很优雅），所以 Ian Beer 在 Triple_Fetch 利用程序中自己实现了一套
XPC 与 NSXPC 对象封装、序列化、反序列化的库，自己组包并调用 mach_msg 与 NSXPC 的服务端通信，实现了利用。
###### Triple_Fetch 利用 - 如何实现控 PC
Ian Beer 对 NSXPC 的这个 bplist16 的 dictionary 中的 ty 字段做了文章，这个字段指定了 objc
接口的函数原型，NSXPC 底层会去解析这个 string，如果@后跟了个带冒号的字符串，例如：@”mfz”，则 CoreFoundation 中的
__NSMS 函数会被调用：
    10  com.apple.CoreFoundation          0x00007fffb8794d10 __NSMS1 + 3344
    11  com.apple.CoreFoundation          0x00007fffb8793552 +[NSMethodSignature signatureWithObjCTypes:] + 226
    12  com.apple.Foundation              0x00007fffba1bb341 -[NSXPCDecoder decodeInvocation] + 330
    13  com.apple.Foundation              0x00007fffba46cf75 _decodeObject + 1243
    14  com.apple.Foundation              0x00007fffba1ba4c7 _decodeObjectAfterSettingWhitelistForKey + 128
    15  com.apple.Foundation              0x00007fffba1ba40d -[NSXPCDecoder decodeObjectOfClass:forKey:] + 129
    16  com.apple.Foundation              0x00007fffba1c6c87 -[NSXPCConnection _decodeAndInvokeMessageWithData:] + 326
    17  com.apple.Foundation              0x00007fffba1c6a72 message_handler + 685
    18  libxpc.dylib                      0x00007fffce196f96 _xpc_connection_call_event_handler + 35
    19  libxpc.dylib                      0x00007fffce19595f _xpc_connection_mach_event + 1707
    20  libdispatch.dylib                 0x00007fffcdf13726 _dispatch_client_callout4 + 9
    21  libdispatch.dylib                 0x00007fffcdf13999 _dispatch_mach_msg_invoke + 414
    22  libdispatch.dylib                 0x00007fffcdf237db _dispatch_queue_serial_drain + 443
    23  libdispatch.dylib                 0x00007fffcdf12497 _dispatch_mach_invoke + 868
    24  libdispatch.dylib                 0x00007fffcdf237db _dispatch_queue_serial_drain + 443
    25  libdispatch.dylib                 0x00007fffcdf16306 _dispatch_queue_invoke + 1046
    26  libdispatch.dylib                 0x00007fffcdf2424c _dispatch_root_queue_drain_deferred_item + 284
    27  libdispatch.dylib                 0x00007fffcdf2727a _dispatch_kevent_worker_thread + 929
    28  libsystem_pthread.dylib           0x00007fffce15c47b _pthread_wqthread + 1004
    29  libsystem_pthread.dylib           0x00007fffce15c07d start_wqthread + 13
这个函数的第一个参数指向 bplist16 共享内存偏移到 ty 字段@开始的地方，该函数负责解析后面的字串，关键逻辑如下：
    _BYTE *__fastcall __NSMS1(__int64 *a1, __int64 a2, char a3)
    {
      v6 = __NSGetSizeAndAlignment(*a1);// A. 获取这个@"xxxxx...." string的长度
      buffer = calloc(1uLL, v6 + 42 - *a1); //根据长度分配空间
      v9 = buffer + 37;
      while ( 2 ) //重新扫描字符串
      {
        v150 = v7 + 1;
        v120 = *v7;
        switch ( *v7 )
        {
          case 0x23:
          ...
          case 0x2A:
          ...
          case 0x40: //遇到'@'
            if ( v20 == 34 ) //下一字节是'"'则开始扫描下一个引号
            {
            ...
                while ( v56 != 34 ) //B. 扫描字符串，找到第二个引号
                {
                  v56 = (v57++)[1]; 
                  if ( !v56 )       //中间不得有null字符
                    goto LABEL_ERROR;
                }
                if ( v57 )
                {
                      v109 = v150 + 1;
                      do 
                      {
                        *v9++ = v55;
                        v110 = v109;
                        if ( v109 >= v57 )
                          break;
                        v55 = *v109++;
                      }
                      while ( v55 != 60 ); //C. 拷贝字符串@"xxxxx...."至buffer
                    }
Ian Beer 构造的初始字符串是 `@”mfz”AAAAA\x20\x40\x20\x20\x01\x00\x00\x00”\x00`, 其中 mfz
字串是运行时随机生成的3个随机字母，这是为了避免 Foundation 对已经出现过的字符串进行 cache 而不分配新内存（因为利用需要多次触发尝试）。
  1. 在 A 处，调用 `__NSGetSizeAndAlignment` 得到的长度是6（因为@”mfz”长度为6），因此 calloc 分配的内存长度是48（42 + 6）。而 buffer 的前 37 字节用于存储 metadata，所以真正的字符串会拷贝在 buffer+37 的地方。
  2. 在计算并分配好“合理“长度的buffer后，`__NSMS1`函数在 B 处重新扫描这个字符串，找到第二个冒号的位置（正常情况下，也就是@”mfz”的第二个冒号位置），但需要注意，在第二个冒号出现之前，不能有 null string
  3. 在C处，程序根据刚才计算的“第二个冒号”的位置，开始拷贝字串到 buffer+37 位置。
Ian
Beer通过在客户端app操作共享内存，改变`@”mfz”AAAAA\x20\x40\x20\x20\x01\x00\x00\x00”\x00`的某几字节，构造出一个绝妙的
Triple_Fetch 的状态，使得：
  1. 在 A 处计算长度时，字符串是 `@”mfz”AAAAA\x20\x40\x20\x20\x01\x00\x00\x00”\x00`，因此 calloc 了 48 字节(6+42)
  2. 在 B 处，字符串变为`@”mfzAAAAAA\x20\x40\x20\x20\x01\x41\x41\x41”\x00`， 这样第二个冒号到了倒数第二个字节的位置(v57的位置)
  3. 在 C 处，字符串变为`@”mfzAAAAAA\x20\x40\x20\x20\x01\x00\x00\x00”\x00`，程序将整个`@”mfzAAAAAA\x20\x40\x20\x20\x01\x00\x00\x00”`拷贝到 buffer+37 位置
如果只是要触发堆溢出，那1和2构造的 double fetch 已经足够，但如果要控 PC，Ian Beer 选择的是覆盖 buffer 后面精心分布的
`OS_xpc_uuid` 的对象，该对象大小恰巧也是48字节，并且其前8字节为 obj-c 的 isa (类似c++的 vptr
指针)，并且其某些字段是可控的( uuid string 部分)，通过覆盖这个指针，使其指向一段spray过的 gadget buffer 进行
ROP，完成任意代码执行。但由于 iOS 下 heap 分配的地址高4位是1，所以 `\x20\x40\x20\x20\x01\x41\x41\x41`
不可能是个有效的 heap 地址，因此我们必须加上状态3，用 triple fetch 的方式实现代码执行。
下图展示了溢出时的内存分布：
 overflow to
OS_xpc_uuid
在 NSXPC 消息处理完毕后，这些布局的 `OS_xpc_uuid` 就会被释放，因为其 isa 指针已被覆盖，并且新的指针 `0x120204020`
指向了可控数据，在执行 `xpc_release(uuid)` 的时候就能成功控制PC。
###### 布局与堆喷射
布局有两个因素需要考虑，其一是需要在特定内存 0x120204020 地址上填入 rop gadget，其二是需要在 0x30 大小的 block 上喷一些
`OS_xpc_uuid` 对象，这样当触发漏洞 calloc(1,48) 的时候，让分配的对象后面紧跟一个 `OS_xpc_uuid` 对象。
第一点 Ian Beer 是通过在发送的 XPC message 里加入了 200 个 `“heap_sprayXXX”` 的key，他们的 value
各自对应一个 `OS_xpc_data`，指向 0x4000 * 0x200 的大内存所对应的 send right，这块大内存就是 ROP gadget。
而第二点是通过在 XPC message 里加入 0x1000 个 `OS_xpc_uuid`，为了创造一些 hole 放入 freelist
中，使得我们的 calloc(1,48) 能够占入， Ian Beer 在 `add_heap_groom_to_dictionary`
函数中采用了一些技巧，比如间隔插入一些大对象等，但我个人觉得这里的 groom
并不是很有必要，因为我们不追求一次触发就利用成功（事实也是如此），每次触发失败后当 `OS_xpc_uuid` 释放后，就会天然地产生很多 0x30
block 上的 free element，下一次触发漏洞时就比较容易满足理想的堆分布状态。
###### ROP与代码执行
当接收端处理完消息后 `xpc_release(uuid)` 就会被触发，而我们把其中一个 uuid 对象的 isa 替换后，我们就控制了 pc。
此事我们的 x0 寄存器指向 OS_xpc_uuid 对象，而这个对象的 0x18-0x28 的16字节是可控的。 Ian Beer 选择了这么一段作为
stack_pivot 的前置工作：
    (lldb) x/20i 0x000000018d6a0e24
        0x18d6a0e24: 0xf9401000   ldr    x0, [x0, #0x20]
        0x18d6a0e28: 0xf9400801   ldr    x1, [x0, #0x10]
        0x18d6a0e2c: 0xd61f0020   br     x1
这样就完美地将 x0 指向了我们完全可控的 buffer 了。
###### ROP 如何获取目标进程的 send right
由于 ROP 执行代码比较不优雅，效率也低，Ian Beer 在客户端发送 mach_msg 时，在 XPC message 的 dictionary
中额外加入了 0x1000 个 port，将其 spray 到接收端进程，由于 port_name
的值在分配的时候是有规律的，接收端在ROP的时候调用64次 mach_msg，remote_port 设置成从 0xb0003 开始，每次+4，而
reply_port 设置为自己进程的task port，消息id设置为 0x12344321。在这 64 次发送中，只要有一次send right
port_name 猜中，客户端就可以拿着 port_set 中的 receive right 尝试接收消息，如果收到的消息 id 是 0x12344321
那客户端拿到的 remote port 就是接收端进程的 task send right。
###### 接收端进程的选择
由于是通杀NSXPC的利用，只要是进程实现了NSXPC的服务，并且container沙盒允许调用，我们都可以实现对端进程的代码执行。尽管如此，接收端进程的选择还是至关重要的。简单的来讲，我们首选的服务进程当然是Root权限+无沙盒，并且服务以OnDemand的形式来启动。这样的服务即使我们攻击失败导致进程崩溃，用户也不会有任何感觉，而且可以重复尝试攻击直到成功。
Ian Beer在这里选择了coreauthd进程，还有一个重要的原因，是它可以通过调用processor_set_tasks来获取系统任意进程的send
right从而绕过进程必须有get-task-allow entitlement才能获取其他进程send right的限制。而这个技巧Jonathan
Levin在2015年已经详细阐述，可以参考[这里](http://newosxbook.com/articles/PST2.html) 。
###### 后期利用
在拿到 coreauthd 的 send right 后，Ian Beer 调用 `thread_create_running` 在 coreauthd
中起一个线程，调用 `processor_set_tasks` 来获得系统所有进程的 send right。然后拿着 amfid 的 send right
用与 mach portal 同样的姿势干掉了代码签名，最后运行 debugserver 实现调试任意进程。
* * *