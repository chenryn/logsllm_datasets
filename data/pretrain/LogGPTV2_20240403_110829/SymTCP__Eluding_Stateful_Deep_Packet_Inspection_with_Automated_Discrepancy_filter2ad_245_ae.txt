Accept in-order data
† Data without ACK
Discard
† Data bad ACK
Discard
∗ Big gap
Accept
∗ SEQ  snd nxt or  rcv nxt + max gap size (16384)
(E) Data packet with SEQ num  snd nxt or  snd nxt or < snd una - window size
(I) SYN packet with SEQ num out of window and data
(I) SYN packet with SEQ num = client ISN and data
(I) RST packet with bad timestamp
(I) RST/ACK packet with SEQ num (cid:54)= server ISN + 1
TCP state
SR/E
SR/E
SR/E
SR/E
SR
SR/E
E
E
SR
SR
SR
SR
Linux
Discard
Discard
Discard
Accept in-window data
Accept
Discard
Discard
Discard
Discard and send ACK
Discard
Discard
Discard
GFW
Teardown TCB
Accept
Accept
Ignore
Ignore
Teardown TCB
Teardown TCB
Teardown TCB
Desynchronized
Desynchronized
Teardown TCB
Teardown TCB
IX. DISCUSSION AND LIMITATIONS
Path Explosion. In our evaluation, we show that processing
only three symbolic packets can already lead to path explosion
— tens of thousands of paths (the result of handling three
packets) generated in an hour. This is because there can
be multiple different paths reaching the same drop/accept
point. Each of these paths corresponds to a unique sequence
of packets (determined by the path constraints), which may
potentially lead to various evasion and insertion strategies.
In order to tackle with path explosion, besides restricting
symbolic execution within the scope of TCP code, we have
also made some pruning decisions based on our domain
knowledge. We summarize them in one place as follows
(details discussed in §IV and §V): 1) bound occurrences of
TCP option ﬁelds by allowing each TCP option to occur only
once, since redundant options are not useful in triggering any
new code; also we only allow at most 5 TCP options in a
packet, since most of the options are independent of each other
thus complex combinations of options are unlikely useful;
2) terminate an execution path once reaching a drop point,
because packets reaching drop points don’t cause any state
changes; 3) terminate an execution path once the connection is
in a state that cannot further deliver data, e.g., CLOSE_WAIT;
4) carefully label accept and drop points, we are aiming at
covering all accept and drop points but not all execution paths,
therefore reduce the search space.
At the moment, we randomly sample from these paths with
equal probability and do not differentiate or prioritize them.
However, a better solution is to understand the relationships
among these paths and avoid visiting paths that are unlikely to
lead to any fruitful results. One example is that for different
paths reaching the same accept point, we know that
they
correspond to packets accepted by the server, but we hope
that they are ignored by the DPI. In such cases we should
theoretically prefer longer paths, because they go through
more corner cases (e.g., more checks or different conditions of
acceptance) and the DPI is less likely to handle them perfectly.
Another example is that, in our evaluation, we ﬁnd that there
are many packet sequences sharing the same preﬁx of two
accept packets, and the second packet happens to be a valid
evasion packet; this means that regardless of what the third
packet is in a sequence, it will always succeed in eluding
the DPI for the same reason (Figure 4). Unfortunately, during
the ofﬂine path exploration phase, we are unable to tell if
the second packet will be a successful evasion packet and
terminate any further exploration. We plan to use the result
we obtain from online testing to prune the ofﬂine analysis in
the future.
Handling Overlapping Data as Evasion Strategies. Our
model currently does not handle overlapping data well and
cannot generate all data overlapping strategies as done man-
ually in prior work. This is because it is necessary to model
how the TCP implementation evicts data in the buffer. For
example, in certain operating systems, if data overlapping is
detected, they prefer to discard the old copy and accept the
new one. More generally, we need to model how a packet
may retroactively change the effect of a previous packet, and
at the moment our model assumes the effect of each packet
is independently exerted and cannot be revoked. We plan to
handle this corner case by extending our model as future work.
Extending SYMTCP to Other TCP Implementations /
DPIs / Network Protocols / Server-side. Although we pick
a speciﬁc version of Linux kernel to evaluate our system, our
system is not restricted to any speciﬁc version and can be easily
applied to other versions as well. The minimal requirement is
to label all drop points, and optionally, some critical accept
points (to group accept paths), as shown in §VIII. Since
the TCP implementations doesn’t change much across kernel
version, it should take less efforts for someone with experience
to label another version. It
took us less than an hour to
do the labeling on the most up-to-date Linux kernel version
(v5.4.5). In order to apply our method to another OS or TCP
implementation much different from the current one, we may
need to do more path pruning depending on the coverage,
i.e., if symbolic execution cannot cover all desired accept and
drop points, manual analysis is required to improve coverage.
Extending SYMTCP to other DPIs is easy. With results from
symbolic execution, we can immediately probe the new DPI
with the generated candidate packets; however, needed is the
manual analysis of the results. Extending SYMTCP to another