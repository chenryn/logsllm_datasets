Xprobe
Remote ICMP Based OS Fingerprinting Techniques
Ofir Arkin
Managing Security Architect
© 2 0 0 1     @ S T A K E ,     I N C .
2
Agenda
 What is Xprobe?
 Xprobe 101
 Examples
 The Static Engine
 The Signature Based Engine
 More Examples
 Known Problems, Detecting Xprobe’s Activity, To Do List
 Questions
© 2 0 0 1     @ S T A K E ,     I N C .
3
Xprobe Creators
© 2 0 0 1     @ S T A K E ,     I N C .
4
What is Xprobe?
Written and maintained by Fyodor Yarochkin and Ofir Arkin, Xprobe is an 
Active OS fingerprinting tool based on Ofir Arkin’s ICMP Usage In Scanning
Research project (http://www.sys-security.com).   
Xprobe is an alternative to some tools which are heavily dependent upon 
the usage of the TCP protocol for remote active operating system 
fingerprinting. 
This is especially true when trying to identify some Microsoft based 
operating systems, when TCP is the protocol being used with the 
fingerprinting process. Since the TCP implementation with Microsoft 
Windows XP & Microsoft Windows 2000 and Microsoft Windows ME, and 
with Microsoft Windows NT 4 and Microsoft Windows 98/98SE are so close, 
usually when using the TCP protocol with a remote active operating systems 
fingerprinting process we are unable to differentiate between these 
Microsoft based operating system groups. 
…And this is only an example.
© 2 0 0 1     @ S T A K E ,     I N C .
5
What is Xprobe?
As we will demonstrate the number of datagrams we need to send and 
receive in order to remotely fingerprint a targeted machine with Xprobe is 
small. Very small. 
In fact we can send one datagram and receive one reply and this will help 
us identify up to eight different operating systems (or groups of operating 
systems). 
The maximum amount of packets used to successfully identify an operating 
system is maximum of 4 sent, and maximum of 4 received. 
…This makes Xprobe very fast as well.
© 2 0 0 1     @ S T A K E ,     I N C .
6
What is Xprobe?
Xprobe probes can be very stealthy. 
Xprobe does not send any malformed datagrams to detect a remote OS 
type, unlike the common fingerprinting methods. Xprobe analyzes the 
remote OS TCP/IP stack responses for valid packets. 
Heaps of such packets appear in an average network on daily basis and 
very few IDS systems are tuned to detect such traffic (and those which are, 
presumably are very badly configured)*.
Usually when people see the types of datagrams being used by Xprobe, 
they will think that what have happened was a simple Host Detection
attempt, while in fact the replying machines were not only detected, but their 
underlying operating systems were revealed as well.
In the future Xprobe will be using actual application data with its probes. 
This will help in disguising the real intentions of the probes, and make 
Xprobe transparent to a lot of IDS systems.
© 2 0 0 1     @ S T A K E ,     I N C .
7
What is Xprobe?
Xprobe might change the traditional intelligence gathering approach. With 
the traditional approach we need to detect the availability of a Host (using a 
Host Detection method), find a service it is running (using port scanning), 
and than identify the underlying operating system (with a remote active 
operating system fingerprinting tool). If the targeted machine is running a 
service that is known to be vulnerable it may allow a malicious computer 
attacker to execute a remote exploit in order to gain unauthorized access to 
the targeted machine.
With Xprobe we combine the host detection stage with the operating system 
detection stage. With maximum of four datagrams initiated from the prober’s  
machine, we are able to determine if a certain machine is running an 
operating system where certain vulnerabilities might be presented.
© 2 0 0 1     @ S T A K E ,     I N C .
8
What is Xprobe?
For example, a Microsoft Windows 2000 based operating system (and 
Microsoft Windows XP) can be identified with four datagrams traversing 
over the network in total (two sent and two received).
Considering the amount of default installations of Microsoft Windows 2000
based systems on the Internet (with a vulnerable version of IIS 5.0 up and 
running) a malicious computer attacker might try to compromise a targeted 
machine with his third packet sent. This is especially true when our target is 
a web server (targeting http://www.mysite.com for example).  
© 2 0 0 1     @ S T A K E ,     I N C .
9
First Introduced at the Black Hat Briefings July 2001 Las – Vegas, USA 
(v0.0.1). Current versions are 0.0.2 and 0.1.
The logic behind the tool is called X.
Compiles on Linux Kernel 2.0.x, 2.2,x, and 2.4.x series, *BSD, Sun Solaris, 
& IRIX.
The tool is Fast, Efficient, Small, and Simple.
Xprobe has 2 development trees: 0.0.x for Static decision Tree (limited), 
and 0.1.x for Signature Dynamic DB support.
In the future the static side of Xprobe will be combined from different 
static logics (depending on the topology) where a smart dynamic fail-over
mechanism is to lunch one of the logics if the start parameters of the first 
logic fails.
Xprobe version 0.1 works against a signature database. We are looking to 
add dynamic solution logic as well.
Xprobe Introduction
© 2 0 0 1     @ S T A K E ,     I N C .
10
Topology Matters
Internet
Local LAN
Between LAN Segments
© 2 0 0 1     @ S T A K E ,     I N C .
11
Xprobe License
Copyright (C) 2001 Fyodor Yarochkin, Ofir Arkin. 
This program is free software; you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free 
Software Foundation; either version 2 of the License, or (at your option) any 
later version. 
All material for nonprofit, educational use only. 
This program is distributed in the hope that it will be useful, but WITHOUT 
ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See 
the GNU General Public License for more details. 
You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 59 
Temple Place - Suite 330, Boston, MA 02111-1307, USA.
© 2 0 0 1     @ S T A K E ,     I N C .
12
Xprobe Compilation
tar xvfz xprobe-{release}.tar.gz
cd xprobe-{release}
./configure
(or ./configure --with-libpcap-libraries=/usr/local/lib --
with-libcap-includes=/usr/local/include)
make
make install
© 2 0 0 1     @ S T A K E ,     I N C .
13
Xprobe Usage
xprobe [options] hostname[/netmask]
-h help
-v be verbose
-i  run on interface
-p 
use  udp port for udp probe
-o logfile
log everything into a logfile
© 2 0 0 1     @ S T A K E ,     I N C .
14
Example: www.defcon.org
© 2 0 0 1     @ S T A K E ,     I N C .
15
Example: www.defcon.org
Sent Datagrams
Tests Performed
© 2 0 0 1     @ S T A K E ,     I N C .
16
Example: www.defcon.org
10/19-19:31:00.791716 213.8.199.165:32426 -> 216.254.1.254:32132
UDP TTL:250 TOS:0x0 ID:47464 IpLen:20 DgmLen:98 DF
Len: 78
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00 00 00 00 00 00
......
10/19-19:31:01.161716 216.254.1.254 -> 213.8.199.165
ICMP TTL:109 TOS:0x0 ID:4224 IpLen:20 DgmLen:56
Type:3  Code:3  DESTINATION UNREACHABLE: PORT UNREACHABLE
** ORIGINAL DATAGRAM DUMP:
213.8.199.165:32426 -> 216.254.1.254:32132
UDP TTL:232 TOS:0x0 ID:47464 IpLen:20 DgmLen:98
Len: 78
** END OF DUMP
00 00 00 00 45 00 00 62 B9 68 40 00 E8 11 61 77  PI:EMAIL
D5 08 C7 A5 D8 FE 01 FE 7E AA 7D 84 00 4E 8B 78
........~.}..N.x
Start Time
© 2 0 0 1     @ S T A K E ,     I N C .
17
Example: www.defcon.org
10/19-19:31:01.161716 213.8.199.165 -> 216.254.1.254
ICMP TTL:250 TOS:0x6 ID:25934 IpLen:20 DgmLen:68 DF
Type:8  Code:123
ID:10421   Seq:30396  ECHO
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
................
00 00 00 00 00 00 00 00
........
10/19-19:31:01.531716 216.254.1.254 -> 213.8.199.165
ICMP TTL:109 TOS:0x2 ID:4480 IpLen:20 DgmLen:68 DF
Type:0  Code:0  ID:10421  Seq:30396  ECHO REPLY
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00 00 00 00 00 00 00 00                          ........
10/19-19:31:01.531716 213.8.199.165 -> 216.254.1.254
ICMP TTL:250 TOS:0x0 ID:25006 IpLen:20 DgmLen:68
Type:13  Code:0  TIMESTAMP REQUEST
70 FC C6 DD 00 00 00 00 00 00 00 00 00 00 00 00  p...............
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00 00 00 00 00 00 00 00 00 00 00 00              ............
10/19-19:31:11.161716 213.8.199.165 -> 216.254.1.254
ICMP TTL:250 TOS:0x0 ID:48938 IpLen:20 DgmLen:48
Type:17  Code:0  ADDRESS REQUEST
00 00 8E 5A 00 00 00 00 00 00 00 00 00 00 00 00  ...Z............
00 00 00 00 00 00 00 00                          ........
Finish Time ~380ms [+ 250ms waiting time 
for the ICMP Address Mask Reply]
© 2 0 0 1     @ S T A K E ,     I N C .
18
Example: www.defcon.org
© 2 0 0 1     @ S T A K E ,     I N C .
19
Example: www.defcon.org
© 2 0 0 1     @ S T A K E ,     I N C .
20
Example: www.defcon.org
© 2 0 0 1     @ S T A K E ,     I N C .
21
Why Xprobe? - Pros
The ICMP protocol hasn't been looked onto from the point of remote OS 
fingerprinting. Each 'vendor' implemented it in quite relaxed manner, with 
'deviations' which are continuously being reproduced in every release of 
TCP/IP stack from certain vendor and at times more reliable to be 
reproduced than TCP 'tests'.
Using some kind of “AI” (or an analysis) for a scanning tool is a lot smarter 
than just choking the network with huge amount of packets.
Small overhead in the Scanning process
No sudden Denial-of-Service or other „surprises‟ during the scan.
Fast - Active OS fingerprinting using the ICMP protocol uses small amount 
of packets sent and received.
Stealth - People think they were „pinged‟ were they actually been mapped.
Accurate - Today we are using tools that are, sometimes, inaccurate and
inconsistent with their results. Version 0.1 makes Xprobe even more 
accurate.
Able to differentiate between any Microsoft Windows based TCP/IP Stack
© 2 0 0 1     @ S T A K E ,     I N C .