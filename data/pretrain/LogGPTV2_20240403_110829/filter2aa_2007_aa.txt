# Xprobe: Remote ICMP-Based OS Fingerprinting Techniques
## Ofir Arkin
### Managing Security Architect
#### © 2001 @STAKE, INC.

---

### Agenda
1. **Introduction to Xprobe**
2. **Xprobe 101**
3. **Examples**
4. **The Static Engine**
5. **The Signature-Based Engine**
6. **More Examples**
7. **Known Problems, Detecting Xprobe’s Activity, To-Do List**
8. **Questions**

---

### Xprobe Creators
**Fyodor Yarochkin and Ofir Arkin**

---

### What is Xprobe?
Xprobe is an active OS fingerprinting tool developed and maintained by Fyodor Yarochkin and Ofir Arkin. It is based on the research project "ICMP Usage in Scanning" (http://www.sys-security.com). 

Xprobe provides an alternative to traditional tools that rely heavily on TCP for remote active operating system fingerprinting. This is particularly useful when identifying Microsoft-based operating systems, as the TCP implementations in Windows XP, Windows 2000, Windows ME, Windows NT 4, and Windows 98/98SE are very similar, making differentiation difficult with TCP-based methods.

---

### Key Features of Xprobe
- **Efficiency**: Xprobe can identify up to eight different operating systems or groups with just one sent and one received datagram. The maximum number of packets used for successful identification is four sent and four received.
- **Speed**: Due to the small number of packets required, Xprobe is very fast.
- **Stealth**: Xprobe does not send malformed datagrams. Instead, it analyzes valid responses from the remote OS's TCP/IP stack. This makes it less detectable by IDS systems.
- **Combined Detection**: Xprobe combines host detection and OS detection stages, allowing for quick identification of potential vulnerabilities.

---

### How Xprobe Works
Xprobe uses the ICMP protocol for OS fingerprinting, which has been implemented differently by various vendors. These differences are more consistent and reliable than TCP-based tests. By using a form of "AI" or analysis, Xprobe minimizes network overhead and avoids causing Denial-of-Service or other issues during the scan.

---

### Example: www.defcon.org
#### Sent Datagrams
- **10/19-19:31:00.791716**: 
  - **Source**: 213.8.199.165:32426
  - **Destination**: 216.254.1.254:32132
  - **UDP TTL**: 250, TOS: 0x0, ID: 47464, IpLen: 20, DgmLen: 98, DF
  - **Data Length**: 78

- **10/19-19:31:01.161716**: 
  - **Source**: 216.254.1.254
  - **Destination**: 213.8.199.165
  - **ICMP TTL**: 109, TOS: 0x0, ID: 4224, IpLen: 20, DgmLen: 56
  - **Type**: 3, Code: 3, DESTINATION UNREACHABLE: PORT UNREACHABLE

- **10/19-19:31:01.161716**: 
  - **Source**: 213.8.199.165
  - **Destination**: 216.254.1.254
  - **ICMP TTL**: 250, TOS: 0x6, ID: 25934, IpLen: 20, DgmLen: 68, DF
  - **Type**: 8, Code: 123, ID: 10421, Seq: 30396, ECHO

- **10/19-19:31:01.531716**: 
  - **Source**: 216.254.1.254
  - **Destination**: 213.8.199.165
  - **ICMP TTL**: 109, TOS: 0x2, ID: 4480, IpLen: 20, DgmLen: 68, DF
  - **Type**: 0, Code: 0, ID: 10421, Seq: 30396, ECHO REPLY

- **10/19-19:31:01.531716**: 
  - **Source**: 213.8.199.165
  - **Destination**: 216.254.1.254
  - **ICMP TTL**: 250, TOS: 0x0, ID: 25006, IpLen: 20, DgmLen: 68
  - **Type**: 13, Code: 0, TIMESTAMP REQUEST

- **10/19-19:31:11.161716**: 
  - **Source**: 213.8.199.165
  - **Destination**: 216.254.1.254
  - **ICMP TTL**: 250, TOS: 0x0, ID: 48938, IpLen: 20, DgmLen: 48
  - **Type**: 17, Code: 0, ADDRESS REQUEST

#### Finish Time
- **Total Time**: ~380ms [including 250ms waiting time for the ICMP Address Mask Reply]

---

### Why Xprobe? - Advantages
- **Unique Protocol**: The ICMP protocol has not been extensively used for OS fingerprinting, making Xprobe a novel approach.
- **Consistency**: Vendors' implementations of ICMP are more consistent and reliable than TCP, leading to more accurate results.
- **Efficiency**: Xprobe uses a small number of packets, reducing network overhead and avoiding DoS or other disruptions.
- **Stealth**: Users often think they have been "pinged" when, in fact, their OS has been mapped.
- **Accuracy**: Xprobe is highly accurate, especially in differentiating between Microsoft Windows-based TCP/IP stacks.
- **Speed**: Active OS fingerprinting using ICMP is fast due to the small number of packets involved.

---

### Xprobe Introduction
- **First Introduced**: Black Hat Briefings, July 2001, Las Vegas, USA (v0.0.1)
- **Current Versions**: 0.0.2 and 0.1
- **Compatibility**: Compiles on Linux Kernel 2.0.x, 2.2.x, 2.4.x, *BSD, Sun Solaris, & IRIX
- **Features**: Fast, efficient, small, and simple
- **Development Trees**: 
  - 0.0.x for Static decision Tree (limited)
  - 0.1.x for Signature Dynamic DB support
- **Future Plans**: Combining static logic with dynamic fail-over mechanisms and adding dynamic solution logic.

---

### Topology Matters
- **Internet**
- **Local LAN**
- **Between LAN Segments**

---

### Xprobe License
- **Copyright (C) 2001 Fyodor Yarochkin, Ofir Arkin**
- **License**: GNU General Public License (GPL)
- **Usage**: Nonprofit, educational use only
- **Warranty**: Distributed without any warranty

---

### Xprobe Compilation
```sh
tar xvfz xprobe-{release}.tar.gz
cd xprobe-{release}
./configure
# Optional: ./configure --with-libpcap-libraries=/usr/local/lib --with-libcap-includes=/usr/local/include
make
make install
```

---

### Xprobe Usage
```sh
xprobe [options] hostname[/netmask]
-h  help
-v  be verbose
-i  run on interface
-p  use udp port for udp probe
-o  logfile
```

---

© 2001 @STAKE, INC.