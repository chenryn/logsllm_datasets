title:Stronger Password Authentication Using Browser Extensions
author:Blake Ross and
Collin Jackson and
Nick Miyake and
Dan Boneh and
John C. Mitchell
Stronger Password Authentication Using
Browser Extensions∗
Blake Ross
Collin Jackson
Nick Miyake
PI:EMAIL
PI:EMAIL
PI:EMAIL
Dan Boneh
John C Mitchell
PI:EMAIL
PI:EMAIL
Abstract
We describe a browser extension, PwdHash,
that transparently produces a different password for
each site, improving web password security and de-
fending against password phishing and other attacks.
Since the browser extension applies a cryptographic
hash function to a combination of the plaintext pass-
word entered by the user, data associated with the
web site, and (optionally) a private salt stored on the
client machine, theft of the password received at one
site will not yield a password that is useful at an-
other site. While the scheme requires no changes on
the server side, implementing this password method
securely and transparently in a web browser exten-
sion turns out to be quite difﬁcult. We describe the
challenges we faced in implementing PwdHash and
some techniques that may be useful to anyone facing
similar security issues in a browser environment.
1
Introduction
Although techniques such as SSL/TLS with
client-side certiﬁcates [DA99] are well known in the
security research community, most commercial web
sites rely on a relatively weak form of password au-
thentication: the browser simply sends a user’s plain-
text password to a remote web server, often using
SSL. Even when used over an encrypted connection,
this form of password authentication is vulnerable to
attack. In phishing scams, an attacker sets up a web
site that masquerades as a legitimate site. By tricking
a user, the phishing site obtains the user’s cleartext
password for the legitimate site. Phishing has proven
surprisingly effective at stealing user passwords, as
documented in reports from the anti-phishing work-
ing group [APW].
In common password attacks,
hackers exploit the fact that web users often use the
same password at many different sites. This allows
∗Supported by NSF through the PORTIA project.
hackers to break into a low security site that simply
stores username/passwords in the clear and use the
retrieved passwords at a high security site, such as
a bank. This attack, which requires little work, can
lead to the theft of thousands of banking passwords.
While password authentication could be abandoned
in favor of hardware tokens or client certiﬁcates, both
options are difﬁcult to adopt because of the cost and
inconvenience of hardware tokens and the overhead
of managing client certiﬁcates.
In this paper, we describe the design, user in-
terface, and implementation of a browser extension,
PwdHash, that strengthens web password authen-
tication. We believe that by providing customized
passwords, preferably over SSL, we can reduce the
threat of password attacks with no server changes
and little or no change to the user experience. Since
the users who fall victim to many common attacks
are technically unsophisticated, our techniques are
designed to transparently provide novice users with
the beneﬁts of password practices that are otherwise
only feasible for security experts. We have experi-
mented with Internet Explorer and Mozilla Firefox
implementations and report the result of initial user
studies.
In essence, our password hashing method is ex-
tremely simple: rather than send the user’s cleartext
password to a remote site, we send a hash value de-
rived from the user’s password, pwd, and the site do-
main name. Speciﬁcally, PwdHash captures all user
input to a password ﬁeld and sends hash(pwd,dom)
to the remote site, where dom is derived from the do-
main name of the remote site. We refer to dom as
the salt. The hash is implemented using a Pseudo
Random Function keyed by the password, as de-
scribed in Section 3. Since the hash output is tailored
to meet server password requirements, the resulting
hashed password is handled normally at the server;
no server modiﬁcations are required. This technique
USENIX Association
14th USENIX Security Symposium
17
deters password phishing since the password received
at a phishing site is not useful at any other domain.
The cryptographic hash makes it difﬁcult to compute
hash(pwd,dom2) from hash(pwd,dom1) for any do-
main dom2 distinct from dom1. For the same reason,
passwords gathered by breaking into a low security
site are not useful at any other site, thus protecting
ﬁnancial institutions from sites with lax security (e.g.
those coordinating high school reunions).
The main idea of password hashing, which is
attractively simple, has been explored in previous
projects (discussed in Section 8). The focus of this
paper is on the implementation of password hashing
as a secure and transparent extension (i.e. plug-in) to
modern browsers. Password hashing is a seductively
simple concept in theory that is surprisingly challeng-
ing to implement in practice, both technically and in
terms of the user experience. First, password hashing
alone is not a sufﬁcient deterrent against phishing due
to the considerable power afforded to web develop-
ers in modern browsers. For example, JavaScript on
phishing pages could potentially intercept the user’s
cleartext password before it is hashed, whether it is
typed in by the user or pasted from the clipboard.
Since these types of interactions will also raise prob-
lems for a range of other possible browser extension
projects, we expect the solutions we developed to be
relevant to other browser-based projects. And sec-
ond, simple ideas do not necessarily translate into
simple user experiences. For example, the exten-
sion must recognize which user input to hash. If a
user wishes to start using our extension, for exam-
ple, she will have to visit the change-password page
for her existing accounts and indicate to the exten-
sion to hash the new password she types in, but not
the old. This is a new and potentially jarring step for
novice users, but the extension cannot simply hash
both password entries.
To summarize, our goals in the design and im-
plementation of PwdHash are to strengthen pass-
word authentication using a browser extension such
that:
(1) we introduce little or no change to the
user experience, and (2) we require no server-side
changes. Section 2 summarizes the main challenges
we faced in building PwdHash, while sections 3
through 5 present solutions to these challenges. Sec-
tion 6 discusses speciﬁcs of the Internet Explorer
and Mozilla Firefox implementations and section 7
brieﬂy summarizes the results of our user studies.
Some forms of password hashing have been used in
other systems; we survey the related work in Sec-
tion 8.
2 Challenges
We begin with a description of various chal-
lenges associated with implementing password hash-
ing in a web browser extension. Although our im-
plementations are for Internet Explorer and Mozilla
Firefox, these difﬁculties may arise in any contempo-
rary browser.
• JavaScript attacks.
How do we prevent
JavaScript on a phishing page from stealing the
user’s cleartext password?
• Salting. What
information do we use as
the salt when hashing passwords?
For ex-
ample, should we use the name of the do-
main that will receive the form data, or should
we use the domain that
is hosting the lo-
gin form? How do we ensure that the same
salt is used for both www.amazon.com and
www.amazon.co.uk?
• Encoding. How do we encode the hashed
value to comply with the site’s password re-
quirements? Some sites require passwords to
contain non-alphanumeric characters, while oth-
ers reject such passwords.
• Auto-complete. Our extension must be compat-
ible with the password auto-complete database
and other browser features.
• Password reset. After the PwdHash extension
is installed, it must help users update their pass-
words at websites they frequent to the hashed
counterparts.
• Roaming. Some users are not able or permitted
to install extensions at every computer they use.
We must nevertheless enable these users to log
in.
• Dictionary attacks. Phishing sites obtain a hash
of the user’s password that could be vulnerable
to a dictionary attack. How do we reduce the
effectiveness of dictionary attacks?
Conceptually,
these problems fall into three cate-
gories. Salting, encoding, and dictionary attacks are
implementation decisions for the password hashing
function itself; JavaScript and auto-complete are ex-
amples of general problems associated with execut-
ing in the browser environment; and password reset
and roaming are user experience issues. We discuss
solutions to these problems by category, beginning
with defenses against JavaScript attacks.
18
14th USENIX Security Symposium
USENIX Association
We emphasize that we are only concerned with
attacks on our extension that originate on malicious
phishing sites. Our extension is not designed to de-
fend against spyware and keyboard loggers running
as other browser extensions or elsewhere on the user’s
machine.
3
Isolation and the browser environment
Password hashing is computed using a Pseudo
Random Function (PRF) [GGM86] as follows:
hash(pwd,dom) = PRFpwd(dom)
where the user’s password pwd is used as the PRF key
and the remote site’s domain name dom or some vari-
ant is used as the input to the PRF. The hash value is
then encoded as a string that satisﬁes the site’s pass-
word encoding rules, under control of a conﬁguration
ﬁle used by the browser extension. Following stan-
dard terminology associated with password manipu-
lation, we refer to dom as the hash salt.
3.1 An insecure straightforward implementation
Password hashing can be implemented naively
inside a browser with rudimentary knowledge of
HTML form components. Forms begin with a tag
 that tells the browser where
the form is to be submitted, and HTML password
ﬁelds are tagged using .
The naive browser extension listens for blur events,
which ﬁre when focus leaves a ﬁeld. When the blur
event occurs, the extension replaces the contents of
the ﬁeld with the hashed value, using the form action
attribute as salt. Thus, after the user enters a pass-
word into a form, the cleartext password is replaced
by a hashed version.
There are many ways that a phisher could de-
feat this straightforward implementation using basic
JavaScript code on the phishing page. We discuss
these in the next subsection.
3.2 Example JavaScript attacks
We describe a number of JavaScript attacks,
presented in order of severity, on the straightfor-
ward implementation presented in Section 3.1 above.
These attacks illustrate the power of browser script-
ing languages that our PwdHash extension must de-
fend against.
• Keyboard monitoring.
JavaScript functions
can listen to keyboard events sent to the pass-
word ﬁeld and record those keys in some aux-
iliary hidden ﬁeld (Figure 1). As a result, the
phisher obtains the user’s cleartext password.
• Domain rewriting. When the page is ﬁrst
loaded, the form action attribute can point to a
proper banking site. However, when the user
hits the “login” button, a JavaScript function
changes the form action to point to the phish-
ing site (Figure 2). As a result, in the straight-
forward implementation, the browser sends the
user’s password hashed with the banking do-
main name to the phisher. The phisher thus ob-
tains the user’s banking password.
• Mock password ﬁeld. Phishers can create a text
ﬁeld  that behaves like a
password ﬁeld. For every keystroke sent to the
ﬁeld, a JavaScript function appends the key to
some hidden ﬁeld and writes an asterisk into this
mock password ﬁeld (Figure 3). Since the ﬁeld
type is text, the PwdHash browser extension
leaves it unhashed. As a result, once the form is
submitted, the phisher obtains the user’s cleart-
ext password. More generally, phishers can use
JavaScript to confuse the user into typing a pass-
word in an insecure location, such as a text ﬁeld
or a popup window.
• Online mock password ﬁeld. Even worse, the
phisher can create a mock password ﬁeld that
sends every keystroke to the phisher just as the
key is entered (Figure 4). The phisher thus ob-
tains the password as it is typed in without hav-
ing to wait until the web form is submitted.
• Password reﬂection. A web server has no
way of knowing whether a form variable com-
ing through from an external site is supposed
to be a password or not; it only sees the name
of the variable. A phishing page can take ad-
vantage of this fact by displaying a password
ﬁeld in a form that points to a victim site. The
password ﬁeld name on the phishing page cor-
responds to a non-sensitive form ﬁeld at the vic-
tim site. The victim site that receives the form
data will not know that the data is sensitive, and
thus it may save the site-speciﬁc hashed pass-
word in a location where it can later be retrieved
by the phisher. For password-protected domains
that allow anonymous form submissions, such
as blogs and wikis, this attack can be imple-
mented with a simple form (Figure 5) — users
are fooled into typing their password in a non-
sensitive ﬁeld (wpTextbox1), which is declared
to be a password ﬁeld on the phishing page. The
victim site, unaware that the ﬁeld contains the
user’s password, might make the data available
USENIX Association
14th USENIX Security Symposium
19
to anyone, including the phisher. For more se-
cure sites, like those used in banking, JavaScript
can be used to log the user in to a compromised
account that is controlled by the phisher. Once
the user has a valid login cookie, the hashed
password can be saved somewhere on the vic-
tim site where the phisher can immediately re-
trieve it. This clever attack suggests that hashing
the password with the name of the domain that
will receive the form data can be insecure since
that domain might be fooled into mishandling
the hashed password.
to appear frequently in normal text input ﬁelds. A
common preﬁx shared among all users of the ex-
tension allows the extension to be portable without
requiring any changes of settings. For internation-
alization, the password preﬁx should not be an En-
glish word at all, but something that could be easily
remembered and typed. In our implementation, we
chose @@, i.e. two consecutive “at” signs. Our user
experiments (Section 7) suggest that users are com-
fortable with adding a short preﬁx to their passwords.
With this convention, our browser extension
works as follows:
While many other JavaScript attacks are possible,
these examples are sufﬁcient to show that securely
implementing password hashing inside the browser
is quite challenging given the power and ﬂexibility of
modern web applications.
3.3 Defenses
A number of intrusive methods can protect the
user’s password against malicious scripts. For exam-
ple, the user can be asked to enter his password into
a separate non-browser window that will do the hash-
ing. We brieﬂy discuss these designs in Section 3.3.5.
Our goal, however, is to defend against web
scripting attacks with minimal change to the user ex-
perience. To do so, we leverage the browser exten-
sion as a protective but largely transparent intermedi-
ary between the user and the web application. Specif-
ically, all input can be ﬁrst monitored and secured by
the our browser extension before the web application
is aware that the user is interacting with it.
Our ﬁrst observation is that we need a new
mechanism by which users can notify our PwdHash
browser extension that they are about to enter a pass-
word. PwdHash can then take steps to protect the
password as it is being entered. There are two closely