r,i
)
a
r,3 · a
r,2, ad,3 · aγ1
(cid:48)δ1
i∈I\I(cid:48)
(cid:48)δ1
r,3
where I = {i : Ri ∈ S (cid:126)R}. Finally, the delegated secret key
SK (cid:126)R
d can be attained in the form
SK
where
=
(cid:126)R
d =(cid:8)d1, d2, d3, d4,{dj}j∈[1,n]\I
ω
(cid:32)
u ·(cid:89)
(cid:19)
(cid:18) (cid:101)r1(cid:101)r2
(cid:9)
f(cid:101)r2 , g(cid:101)r1 , g(cid:101)r2 , g(cid:101)r1
(cid:18) s1
(cid:19)
(cid:33)(cid:101)r1
(cid:18) r1
Ri
i
t1
t2
i∈I
s2
r2
=
+
h
h ,{h(cid:101)r1
(cid:19)(cid:18) γ1
j }j∈[1,n]\I
(cid:19)
δ1
It follows that SK (cid:126)R
rectly by TKA with the KeyGenM algorithm.
d is well-formed as if it is generated di-
For delegating SK (cid:126)R
random exponents γ2, δ2, γ3, δ3
gγ2·δ3−γ3·δ2
p
q
secret key by using
(cid:54)= 1, gγ2·δ3−γ3·δ2
r , the high-level medical staﬀ picks
R← ZN which satisﬁes that
(cid:54)= 1. Then, he delegates the
(cid:41)
=
d
(cid:48)
r,3, d
(cid:48)
r,1, d
r,4,{d
(cid:48)
(cid:40) dr,1, dr,2, dr,3, dr,4,{dr,j}j∈[1,n]\I ,
(cid:18)(cid:16)
(cid:17)δ2(cid:19)
(cid:17)δ3(cid:19)
(cid:18)(cid:16)
r,j}j∈[1,n]\I
(cid:48)
(cid:48)
r,i
(cid:17)γ2 ·(cid:16)
(cid:17)γ3 ·(cid:16)
a
r,0(b
r,3 · a
(cid:48)
r,3, {bγ2
(cid:48)δ2
(cid:48)
r,i
(cid:48)δ2
r,2, aγ2
(cid:48)δ2
r,1, aγ2
ar,0(b
ar,0(b
r,j · b
R
R
)
)
(cid:48)
(cid:48)
r,2, d
R
r,i)
r,2 · a
R
r,i)
r,2 · a
a
r,0(b
r,3 · a
,
,
i∈I\I(cid:48)
r,j}j∈[1,n]\I ,
(cid:48)δ2
i∈I\I(cid:48)
r,j}j∈[1,n]\I
(cid:48)δ3
(cid:126)R
r =
SK
r,1 · a
aγ2
r can be written as
r,j · b
(cid:41)
(cid:48)δ3
r,1, aγ3
r,1 · a
r,3, {bγ3
(cid:48)δ3
aγ3
Finally, the delegated secret key SK (cid:126)R
(cid:48)δ3
r,2, aγ3
(cid:126)R
r =
SK
=
d
h
Ri
i
(cid:48)
r,3, d
(cid:48)
r,1, d
(cid:48)
r,2, d
r,4,{d
(cid:48)
(cid:40) dr,1, dr,2, dr,3, dr,4,{dr,j},
(cid:33)(cid:101)s1
(cid:32)
r,j}
(cid:48)
u ·(cid:89)
j∈[1,n]\I
h ,{h(cid:101)s1
f(cid:101)s2 , g(cid:101)s1 , g(cid:101)s2 , g(cid:101)s1
j },
(cid:33)(cid:101)t1
(cid:32)
u ·(cid:89)
f(cid:101)t2 , g(cid:101)t1 , g(cid:101)t2 , g(cid:101)t1
h ,{h(cid:101)t1
j }
(cid:19)(cid:18) γ2 γ3
(cid:18) s1
(cid:18) (cid:101)s1 (cid:101)t1
(cid:101)s2 (cid:101)t2
(cid:19)
Ri
i
t1
t2
i∈I
i∈I
s2
δ2
δ3
=
h
(cid:19)
where
j∈[1,n]\I
As a conclusion, by running KeyDelegM algorithm, the del-
egated the secret key is well formed as if it is generated
directly by TKA with the KeyGenM algorithm.
KeyGenP(P K, M SK, Id). When a patient with identity Id
wants to access his own EHR, TKA ﬁrst authorizes him
and then assigns a secret key. It picks a random exponent
r(cid:48)
1, r(cid:48)
R← ZN and outputs
2
SK Id =(cid:0)d
(cid:16)
(cid:48)
1, d
j}j∈[1,n]
3,{d
(cid:48)
(cid:48)
(cid:48)
2, d
1 f r(cid:48)
2 , gr(cid:48)
1 , gr(cid:48)
h )r(cid:48)
=
ω(ugId
(cid:1)
2 ,{hr(cid:48)
(cid:17)
j }j∈[1,n]
1
EHREnc(P K, Id,P, EHR). For an access policy P, denote
I = {i : Ri ∈ SP}. When EHR needs to be encapsulated
under the patient’s identity Id and the access policy P, the
user (a patient or a medical staﬀ) ﬁrst picks a random expo-
R← Gq. Note
nent s R← ZN , and random elements Z1, Z2, Z3
that the random elements in Gq can be chosen by raising
gq to random exponents from ZN . Then, the user computes
the header Hdr as follows
Hdr = {C1, C2, C3} = {Gs·Z1, F s·Z2,
(cid:32)
U H Id(cid:89)
i∈I
(cid:33)s
Ri
i
H
Z3}
(3)
Then, the user generates session key K = Es, and computes
En = SymEnc(K, EHR). The encapsulated EHR is output
as CT = (Hdr, En) = (C1, C2, C3, En).
EHRDecM(P K, Id, (Hdr, En), SK (cid:126)R).
In order to retrieve
the session key K, a medical staﬀ with role satisﬁed the
access policy P, can use his secret key to compute
(cid:32)
(cid:32) (cid:81)
(cid:33)
(cid:33)
e
K =
d1 · dId
4 ·
e (d2, C3) · e (d3, C2)
i∈I\I
Ri
i
d
, C1
It ﬁnally runs EHR = SymDec(K, En) to get the EHR.
Correctness. Assume CT = ((C1, C2, C3), En) is a well-
formed ciphertext, the medical staﬀ decapsulation algorithm
can correctly decapsulate EHRs with a valid secret key SK (cid:126)R
with (cid:126)R ∈ P ref (P) since we have that
d1 · dId
4 ·
e (d2, C3) · e (d3, C2)
i∈I\I
d
, C1
K =
(cid:32)
(cid:32)
e
(cid:18)
u(cid:81)
(cid:18)
i∈I
gr1 ,
e
w
=
e
= e(g, ω)s
(cid:33)
Ri
i
(cid:32) (cid:81)
(cid:19)r1
h ·(cid:81)
u · gId
(cid:18)
i∈I
Ri
h
i
f r2 · gr1·Id
h
(cid:33)
· (cid:81)
(cid:19)s(cid:19)
i∈I\I
Ri
i
h
e (gr2 , f s)
(cid:33)
Ri
(h
i
)r1 , gs
The second equality holds because e(hp, hq) = 1 for all hp ∈
Gp and hq ∈ Gq.
EHRDecP(P K, Id, (Hdr, En), SK Id). The patient with i-
dentity Id can decapsulate his/her own EHRs using his/her
secret key. Denote I = {i : Ri ∈ SP}. The patient computes
the session key
(cid:18)
1 ·(cid:81)
d(cid:48)Ri
d(cid:48)
e
2, C3) · e (d(cid:48)
e (d(cid:48)
i∈I
j
, C1
3, C2)
K =
(cid:19)
It ﬁnally runs EHR = SymDec(K, En) to recover EHR.
564Correctness. Assume CT = ((C1, C2, C3), En) is a well-
formed ciphertext. The patient can also correctly recover
its own EHRs since the following equalities
j
, C1
(cid:16)
(cid:18)
(cid:18)
1 ·(cid:81)
i∈I d(cid:48)Ri
d(cid:48)
e
w · u ·(cid:0)hId
(cid:1)r(cid:48)
2, C3) · e(d(cid:48)
e(d(cid:48)
(cid:18)
h ·(cid:81)
u · gId
gr(cid:48)
1 ,
3, C2)
1 f r(cid:48)
e
(cid:17)
2 ·(cid:81)
(cid:19)s(cid:19)
(hr(cid:48)
i )
· e (gr(cid:48)
i∈I
Ri
Ri
i
1
h
h
e
i∈I
K =
=
(cid:19)
, gs