Win32_Service并不是唯一能够执行这些操作的WMI类，还有以下几个类可以替代使用：  
Win32_Service  
Win32_BaseService  
Win32_TerminalService  
Win32_SystemDriver  
当我们使用PSEXEC、sc.exe或其他常用的远程服务管理工具时，是通过DCERPC借助于MS-SCMR协议进行的通信。即使在该协议中使用了最强的加密级别，也还是可以通过对网络流量的监控来确定出执行了哪些类型的操作（例如服务创建、服务启动等）。  
另一方面，如果使用WMI进行相同的动作，其监控结果完全不同：  
尽管仍然基于DCERPC，但所有WMI
DCOM方法调用都是通过一个接口完成的，并且在与“数据包隐私”级加密结合使用时，只能监控到某些WMI方法被调用。当通过WINRM协议执行时，WMI流量看起来像是HTTP流量，并且与经过SVCCTL接口时完全不同。这就意味着，WMI技术有效逃避了所有通过网络流量签名来检测横向移动的防范方式。
###  旧版本的计划任务创建
WMI还提供了一种与旧版本的（at.exe）Windows任务调度机制进行交互的方法。具体是通过Win32_ScheduledJob类完成的。  
这个类允许创建、删除和枚举（通过枚举类实例，而不是使用专门的方法）计划任务。而at.exe实用程序以及这个类的功能在Windows
8及更高版本中都已不再使用。无法强制执行某项任务的问题在这里迎刃而解（就像使用经典技术一样），我们只需将任务安排在注册后几秒钟运行即可。
###  新版本的计划任务创建
我们可以利用的另一种机制就是新版本的Windows任务调度程序（Windows Task
Scheduler），通常使用schtasks.exe实用程序进行交互。用这种方式创建的计划任务由ScheduledTaskProv提供程序下的PS_ScheduledTask及其相关类表示。  
PS_ScheduledTask类允许客户端使用自定义操作创建、删除和运行任何的计划任务。实际上，在Windows
8及更高版本系统中，允许使用计划任务命令行，并可以在后台使用这些WMI类。这样一来，攻击者可以滥用这些命令，以逃避各种IDS检测。需要注意的是，尽管新的任务调度程序在Windows
7中就已经出现，但ScheduledTaskProv提供程序只适用于Windows 8系统以上。
###  滥用Windows Installer
Windows Installer提供程序公开了一个名为Win32_Product的类，该类表示由Windows
Installer（msiexec）安装的应用程序。这个类可能允许攻击者在目标计算机上运行恶意msi包。  
Win32_Product中的Install方法允许从路径或URL安装msi包。并且，很可能其中的Admin和Upgrade方法也同样可以。攻击者可以使用Metasploit制作包含恶意Payload的软件包：  
虽然Metasploit允许将可执行文件打包为msi文件，但包格式还允许嵌入vbscript和jscript有效内容，使得msi成为一个相当通用的有效载荷容器。  
我们尝试了通过“msiexec
/y”命令，想要从命令行注册一个dll文件，希望借此实现对Win32_Product的滥用，但这次尝试并不成功，似乎这种方法不适用于WMI。此外，我们还尝试劫持注册表中的uninstaller命令行字段，然后使用Win32_Product中的Uninstall方法运行这些命令，但结果也宣告失败。  
将UninstallString值更改为任意命令行并调用Uninstall方法，同样也不起作用。
###  恶意WMI提供程序加载
如上所述，大多数类实例和方法都是在WMI提供程序中实现的。这意味着，可以通过加载自定义提供程序来实现代码执行。在Alexander
Leary最近的一次演讲中，他讲解了一种在远程计算机上注册WMI提供程序的方法，该方法仅使用WMI函数，无需事先运行任何命令行。这种技术的缺点之一是需要真正实现，并且需要将真正（恶意）WMI提供程序DLL传到目标主机上。在本文中，我们不重点关注成功用作WMI提供程序的代码，只关注对其的加载过程。下面是将任意命令行作为WMI提供程序运行所需的步骤：  
首先，创建一个COM对象。WMI提供程序大多是作为进程内COM对象来实现的，但是我们现在想运行一个任意命令行，所以要编写一个进程外COM对象并注册，将其作为我们的基础提供程序。  
接下来，我们需要对提供程序本身进行注册。为此，需要在远程主机上创建一个用于注册WMI提供程序的 **Win32Provider类的实例。  
在我们想要创建的**Win32Provider实例中，有三个重要的字段：  
1、Name，提供程序的可读名称，这将允许我们后续对其进行引用；  
2、CLSID，我们新创建的COM对象的类ID；  
3、HostingModel，此字段表示如何加载COM对象。其中，“NetworkServiceHost”表示将COM对象作为库加载到“Network
Service”用户下的特殊主进程中；“LocalSystemHost”表示将作为库加载到在System用户下的主进程中运行；“SelfHost”表示将尝试在System用户下作为独立的可执行文件加载。  
在这里，由于我们想要执行任意命令行，所以希望将提供程序作为可执行文件运行。  
通常情况下，提供程序都是当其实现的某个类和方法被调用或查询时，按需进行加载的。方法和实例提供程序的注册是通过
**MethodProviderRegistration和**
InstanceProviderRegistration类完成的。但我们的任意可执行文件显然不能实现这样的功能。幸运的是，MSFT_Providers类（用于列举已加载的WMI提供程序）有一个名为“Load”的方法，它允许我们加载任何WMI提供程序，不管是否真正需要。  
此外，当操作系统在命令运行后第一次对我们的COM对象实际上是否实现WMI提供程序进行检查时，似乎允许我们执行明显假冒的提供程序。在这里，需要注意一点，如果使用SelfHost主机模型注册WMI提供程序，会向事件日志中写入警报，其描述为“创建敏感提供程序”，其原因在于它使用了System权限运行。该日志写入可以通过使用NetworkServiceHostOrSelfHost模型来避免，该过程首先会尝试将提供程序加载为一个库（从而可以跳过注册过程），并且当加载失败时（因为实际上并没有要加载的库），尝试将提供程序作为可执行文件加载，而在其中就包括我们提供的命令行。  
回顾一下，我们可以使用以下步骤，将恶意命令行加载为WMI提供程序：  
1、在HKLM/SOFTWARE/Classes/CLSID/{SOMEGUID}下创建一个新密钥（注册表操作可以通过StdRegProv
WMI提供程序完成）。  
2、添加一个LocalServer32的子项，其中包含任何你想运行的命令行的“默认”值（例如一些不错的PowerShell编码命令）。  
3、创建__Win32Provider类的新实例，将我们的CLSID作为CLSID字段，并将NetworkServiceHostOrSelfHost作为HostingModel。  
4、使用我们新创建的提供程序的名称调用MSFT_Providers类的Load方法  
5、成功实现不被监测到的远程执行。
## 检测方式与结论
虽然这些技术相对未知，并且通常不会被大多数安全产品检测到，但Windows提供了有关WMI功能的充分信息，可以实现上述每种技术的检测。 WMI-Activity ETW提供程序和WMI事件处理系统都能够深入了解所有WMI方法调用及实例创建和查询，这些信息足以确定是否调用了任何敏感的WMI功能。  
尽管我们讨论的这些技术，实际上都有相应的记录机制，但由于相关事件发生的频率较低，监控机制没有办法详细记录其中的每个操作。为了防止采用这种攻击方式的横向移动，我们建议防护者综合考虑上述所有技术，制定防范策略，同时建议防护者深入了解WMI，以此来防范攻击者利用上述技术以及其他许多滥用这一特性的技术。