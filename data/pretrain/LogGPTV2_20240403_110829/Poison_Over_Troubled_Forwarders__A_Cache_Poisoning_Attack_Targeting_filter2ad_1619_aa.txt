title:Poison Over Troubled Forwarders: A Cache Poisoning Attack Targeting
DNS Forwarding Devices
author:Xiaofeng Zheng and
Chaoyi Lu and
Jian Peng and
Qiushi Yang and
Dongjie Zhou and
Baojun Liu and
Keyu Man and
Shuang Hao and
Haixin Duan and
Zhiyun Qian
Poison Over Troubled Forwarders: A Cache Poisoning 
Attack Targeting DNS Forwarding Devices
Xiaofeng Zheng, Tsinghua University; Qi An Xin Technology Research Institute; 
Chaoyi Lu and Jian Peng, Tsinghua University; Qiushi Yang, Qi An Xin Technology 
Research Institute; Dongjie Zhou, State Key Laboratory of Mathematical Engineering 
and Advanced Computing; Baojun Liu, Tsinghua University; Keyu Man, University 
of California, Riverside; Shuang Hao, University of Texas at Dallas; Haixin Duan, 
Tsinghua University; Qi An Xin Technology Research Institute; Zhiyun Qian, 
University of California, Riverside
https://www.usenix.org/conference/usenixsecurity20/presentation/zheng
This paper is included in the Proceedings of the 
29th USENIX Security Symposium.
August 12–14, 2020
978-1-939133-17-5
Open access to the Proceedings of the 
29th USENIX Security Symposium 
is sponsored by USENIX.
Poison Over Troubled Forwarders:
A Cache Poisoning Attack Targeting DNS Forwarding Devices
Xiaofeng Zheng∗,†, Chaoyi Lu∗, Jian Peng∗, Qiushi Yang†,
Dongjie Zhou§, Baojun Liu∗, Keyu Man‡, Shuang Hao¶, Haixin Duan∗,†∗ and Zhiyun Qian‡
∗ Tsinghua University, † Qi An Xin Technology Research Institute,
§ State Key Laboratory of Mathematical Engineering and Advanced Computing,
‡ University of California, Riverside, ¶ University of Texas at Dallas
Abstract
In today’s DNS infrastructure, DNS forwarders are devices
standing in between DNS clients and recursive resolvers.
The devices often serve as ingress servers for DNS clients,
and instead of resolving queries, they pass the DNS requests
to other servers. Because of the advantages and several use
cases, DNS forwarders are widely deployed and queried by
Internet users. However, studies have shown that DNS for-
warders can be more vulnerable devices in the DNS infras-
tructure.
In this paper, we present a cache poisoning attack target-
ing DNS forwarders. Through this attack, attackers can in-
ject rogue records of arbitrary victim domain names using
a controlled domain, and circumvent widely-deployed cache
poisoning defences. By performing tests on popular home
router models and DNS software, we ﬁnd several vulnera-
ble implementations, including those of large vendors (e.g.,
D-Link, Linksys, dnsmasq and MS DNS). Further, through
a nationwide measurement, we estimate the population of
Chinese mobile clients which are using vulnerable DNS for-
warders. We have been reporting the issue to the affected
vendors, and so far have received positive feedback from
three of them. Our work further demonstrates that DNS for-
warders can be a soft spot in the DNS infrastructure, and
calls for attention as well as implementation guidelines from
the community.
1 Introduction
The Domain Name System (DNS) serves as one of the funda-
mental infrastructures of the Internet. It provides translation
of human-readable domain names to numerical addresses,
and is the entry of almost every action on the Internet. Ac-
cording to its initial standard, when a domain name needs to
be resolved, a DNS client sends a query to a recursive re-
solver. The recursive resolver in turn fetches answers from
authoritative servers.
∗Haixin Duan is the corresponding author.
However, as the DNS ecosystem has evolved dramatically,
the system now consists of multiple layers of servers [62].
Speciﬁcally, DNS forwarders refer to devices standing in be-
tween DNS clients and recursive resolvers. Upon receiving
DNS queries, the devices do not resolve the domain name
by themselves, but pass the requests to other servers (e.g., an
upstream recursive resolver). To name a few use cases, DNS
forwarders can serve as convenient default resolvers, load
balancers for upstream servers, and gateways of access con-
trol. Meanwhile, for clients in a local network, using DNS
forwarders can mitigate security risks, as the devices are not
directly exposed to Internet attackers [49].
Because of the advantages, DNS forwarders are fairly
prevalent devices in the DNS infrastructure. It has been re-
ported that over 95% open DNS resolvers are actually for-
warders [62], and that a vast number of them run on residen-
tial network devices [57, 64]. Forwarding is also widely im-
plemented in DNS software (e.g., BIND [25], Unbound [27],
Knot Resolver [13] and PowerDNS [18]) and home routers
(e.g., TP-Link [21], D-Link [5] and Linksys [4]).
Given its prevalence, though, there have been only few
studies on the understanding and security status of DNS for-
warders. In addition, works have shown that DNS forwarders
can actually be a soft spot in the DNS infrastructure. For
instance, a considerable number of such device fail to per-
form checks on ephemeral port numbers and DNS transac-
tion IDs, and are vulnerable to cache poisoning attacks or
DoS [49, 63, 64]. The discoveries call for deployments of
cache poisoning defences, such as randomizing port num-
bers [52], 0x20 encoding [36] and DNSSEC [30].
In this paper, we further demonstrate that DNS forwarders
can be vulnerable devices in the ecosystem, by proposing a
cache poisoning attack. Using our attack methods, an ad-
versary can use a controlled domain name and authoritative
server to inject records of arbitrary domain names. In ad-
dition, the attack bypasses widely-deployed defences includ-
ing randomized ephemeral port numbers and 0x20 encod-
ing. We also perform tests on current implementations of
DNS forwarders, and ﬁnd several home router models and
USENIX Association
29th USENIX Security Symposium    577
DNS software vulnerable to this attack. The vulnerable im-
plementations include those from popular vendors, such as
D-Link [5], Linksys [4], dnsmasq [7] and MS DNS [8]. We
have been reporting the issue to the affected vendors, and
so far have received positive responses from three of them.
Furthermore, we perform a nationwide measurement of the
affected client population, and estimate the scale of Chinese
mobile devices which are using the vulnerable devices. In
the end, we ﬁnd that the industry have diverse understanding
on the role of DNS forwarders, and there is still a lack of for-
warder implementation guidelines in the DNS speciﬁcations.
Contributions. In this paper, we make the following contri-
butions.
New attack. We propose a type of cache poisoning attack
targeting DNS forwarders. Through this attack, an adver-
sary can use a controlled domain name to inject DNS records
of arbitrary victim domain names, and circumvent current
cache poisoning defences.
New ﬁndings. We ﬁnd several home router models and
DNS software vulnerable to the attack, including those by
large developers. We have been reporting the vulnerability
to affected vendors.
Put together, this paper demonstrates an attack targeting
DNS forwarders, and sheds light on their security problems.
DNS forwarders are prevalent devices in the ecosystem, yet
we show that they can be more vulnerable to cache poisoning
attacks. Therefore, we believe more attention should be paid
from the community to DNS forwarder speciﬁcations and
security.
Paper organization. The remainder of this paper is orga-
nized as follows. Section 2 gives an overview on prior DNS
cache poisoning attacks. Section 3 describes the role of for-
warders in the DNS ecosystem. Section 4 illustrates our
attack model. Section 5 elaborates our tests on vulnerable
DNS forwarder software. Section 6 performs a nationwide
measurement study on the population of affected clients.
Section 7 discusses the implementation and speciﬁcation of
DNS forwarders. Section 8 extends the attack model and
proposes mitigation. Section 9 summarizes related work and
Section 10 concludes the paper.
2 Prior DNS Cache Poisoning Attacks
Targeting Recursive Resolvers
DNS cache poisoning attacks have been known for long, and
they pose serious threats to Internet users [65, 67, 69].
In
this section we ﬁrst give an overview on two major types of
known attack methods, and discuss their limitations.
2.1 Forging Attacks
The goal of forging attacks is to craft a rogue DNS re-
sponse and trick a resolver into accepting it.
In detail,
Figure 1: Defragmentation cache injection attacks targeting
recursive resolvers.
a DNS response is accepted when the following ﬁelds
matches a DNS query: question section, DNS transaction
ID, source/destination addresses and port numbers. If an at-
tacker forges a DNS response with the correct metadata be-
fore the authenticated response arrives, the rogue response
can be accepted by the resolver and the attack succeeds. The
most inﬂuential case of forging attacks is the Kaminsky At-
tack [53] in 2008, which affects nearly all software designed
to work with DNS.
Limitations. The key to mitigating forging attacks is to in-
crease the randomness of DNS query packets. As required
by RFC 5452 [52], resolver implementations now must use
randomized ephemeral port numbers and DNS transaction
IDs. Meanwhile, resolvers also adopt 0x20 encoding [36] to
mix the upper and lower spelling cases of the name in the
question section. As a result, the widely-deployed defences
have signiﬁcantly increased resolvers’ resistance to forging
attacks.
2.2 Defragmentation Attacks
Recent studies [33, 47–49, 66] have uncovered a new type of
DNS cache poisoning attack based on IP defragmentation.
The attack exploits the fact that the 2nd fragment of a frag-
mented DNS response packet does not contain DNS or UDP
headers or question section, so it can bypass randomization-
based defences against forging attacks. As shown in Fig-
ure 1, an attacker ﬁrst crafts a spoofed 2nd fragment with
rogue DNS records, and issues a DNS query of the victim
domain name. The response from an authoritative server
is forced to be fragmented by the attacker (through a sep-
arate process ahead of time). At the recursive resolver, the
legitimate 1st fragment is reassembled with the spoofed 2nd
fragment, which produces a rogue DNS response. As a re-
sult, the rogue records are cached by the recursive resolver
and the attack succeeds. We provide more background on IP
fragmentation in Appendix A.
The core challenge of defragmentation attacks is to force
a fragmentation of the DNS response, and there are two ap-
578    29th USENIX Security Symposium
USENIX Association
Figure 2: CDF of lowered MTU of a) authoritative servers
of Alexa Top 100K domains, and b) 2M open DNS resolvers
from an Internet-wide scan.
proaches proposed so far. The ﬁrst approach is to lower the
Path Maximum Transmission Unit (PMTU) between the re-
cursive resolver and authoritative servers [33]. We term this
type of attack as PMTU-based defragmentation attack. By
contrast, the second approach is to send DNSSEC queries to
solicit enlarged DNS responses with DNSSEC records, so
that they reach limits of MTUs (e.g., 1,500 bytes for Ether-
net) and will be fragmented [48]. We term this type of attack
as DNSSEC-based defragmentation attack.
Limitations. Previous defragmentations have high require-
ments on the PMTU behavior of authoritative name servers,
as well as the victim domains. Speciﬁcally, PMTU-based de-
fragmentation requires an attacker to send specially-crafted
ICMP fragmentation needed error messages to an authorita-
tive server claiming a small PMTU and trick it to lower the
PMTU for a speciﬁc resolver. However, we ﬁnd this is im-
practical in most cases. As shown in Figure 2, for authorita-
tive servers of Alexa Top 100K domains, only 0.7% are will-
ing to reduce their MTU to less than 528 bytes. Since DNS
responses are typically smaller than 512 bytes, it is not likely
that they will be forcibly fragmented. As for DNSSEC-based
attacks, they require non-validating recursive resolvers and
can be mitigated through proper DNSSEC deployment and
validation. Moreover, the attack only works for DNSSEC-
signed victim domains. Currently, DNSSEC deployment is
still low among domain names (e.g., less than 1.85% for
popular domains in 2017 [34]), thus the target of DNSSEC-
based defragmentation attacks is limited.
3 DNS Forwarder
Traditionally, a DNS resolution process involves a DNS
client (or stub resolver), a recursive resolver and authori-
tative servers. When a domain needs to be resolved, the
DNS client sends a query to a recursive resolver, which in
turn fetches answers from authoritative servers. For maxi-
mum protocol capability, it is recommended that DNS clients
use a full-service resolver directly [31]. However, in reality,
the DNS infrastructure has become far more complex than
Figure 3: DNS infrastructure with forwarders
this simple model, often involving multiple layers of servers.
One of the new roles introduced in the infrastructure [29,70],
as shown in Figure 3, is DNS forwarders1. They sit in be-
tween stub and recursive resolvers, and often serve as ingress
servers for DNS clients (e.g., home wireless routers). When
a DNS forwarder receives a query, instead of performing the
resolution recursively, it simply forwards the query to an up-
stream recursive resolver. To name a few use cases, it can
serve as a default local resolver (with caching capability) for
clients (e.g., clients using DHCP to obtain network conﬁg-
urations in LAN), perform load balancing among upstream
recursive resolvers, and can be used to enforce access con-
trol.
DNS forwarder vs. recursive resolver. In the latest RFC
on DNS terminology (i.e., RFC 8499 [50]), recursive re-
solvers are resolvers which “act in recursive mode”. When
it receives a DNS query, a recursive resolver accesses other
servers, and should respond with the ﬁnal answer to the
original query. As such, recursive resolvers should handle
referrals to other servers and aliases to other names (i.e.,
CNAMEs), and aggregate the resource records into one ﬁnal
answer. Recursive resolvers should also perform integrity
checks such as the bailiwick check [39] and DNSSEC val-
idation [30]. In contrast, a DNS forwarder does not recur-
sively resolve queries, and instead relies on the integrity of
its upstream server. As a result, DNS forwarders do not han-
dle referrals, and are typically not in the position to verify
the responses. Otherwise, forwarders will be repeating the
work of resolvers, e.g., checking each referral, defeating the
purpose of having another layer of indirection. As we will
articulate later, this is a key weakness of DNS forwarders
which enables our cache poisoning attack.
4 Defragmentation Attacks
Targeting DNS Forwarders
As we have seen, previous defragmentation attacks have lim-
itations regarding the ability to trigger fragmentation. In this
section, we propose a novel modiﬁed defragmentation at-
tack that works perfectly against DNS forwarders due to its
unique role in the DNS infrastructure.
1Also deﬁned as “FDNS” in literature.
USENIX Association
29th USENIX Security Symposium    579
4.1 Attack Overview
Threat Model. Studies have discovered a large number
of DNS forwarders running on residential network devices,
such as home routers [64]. As such, in our threat model we
assume the attacker is located in the same LAN as the DNS
forwarder, and can issue DNS queries. This can occur in an
open Wi-Fi network (e.g., at coffee shops and airports) with-
out strong security protection or password. This can also
happen in some enterprise networks where a guest, insider,
or compromised machine acts as an attacker. In some cases,
forwarders on home routers can also be open to public due
to misconﬁgurations [57].
Our attack starts out by asking the question: can we force
fragmentation reliably and deterministically? It turns out that
we can, if the query is sent towards an authoritative name
server under an attacker’s control – as the server can inten-
tionally send an oversized response. At a ﬁrst glance, this
is meaningless because that would mean that the domain
hosted on the attacker’s authoritative name server also be-
longs to the attacker already (e.g., attacker.com). It is use-
less to poison the attacker’s own domain. However, our key
insight is that forwarders have total reliance on upstream re-
solvers to perform response validation (see Section 3). Due
to the unique role of DNS forwarder, it is actually possi-
ble to inject spoofed fragments containing records of other
domains (e.g., victim.com) and trick the forwarder to cache
such records.
Workﬂow. Figure 4 illustrates this idea. After probing the
current resolver IPID (step 0), an attacker feeds the vic-
tim DNS forwarder with a spoofed 2nd fragment contain-
ing rogue DNS records (step 1) and launches a DNS re-
quest (step 2). The aggregated ﬁnal response from the at-
tacker’s authoritative servers (oversized, larger than Ether-
net MTU) is fragmented when leaving the recursive resolver
(step 3b), and defragmented at the DNS forwarder (step 3c).
In particular, at defragmentation the legitimate 1st fragment
is reassembled with the spoofed 2nd fragment, producing a
rogue response. Consequently, the rogue DNS records are
then written into the forwarder’s cache (as forwarders are not
in the position to validate upstream responses), and handed
over to downstream devices. As is the case with prior defrag-
mentation attacks, an attacker no longer needs to guess DNS
and UDP metadata (e.g., DNS transaction ID and ephemeral
port numbers), which does not exist in the 2nd fragment. Us-
ing oversized responses, our new attack can overcome the
key limitation in prior defragmentation attacks that forcing
fragmentation is difﬁcult.
4.2 Forcing DNS Response Fragmentation
Forcing DNS response fragmentation (see Figure 4, step 3b)
is one of the key steps in defragmentation attacks. As dis-
cussed in Section 2, previous studies use two different meth-
Figure 4: Defragmentation cache poisoning attack targeting
DNS forwarders in the same LAN (e.g., DNS forwarders of
residential network devices).
ods to force fragmentation: reducing PMTU and enlarging
DNS responses with DNSSEC. Let us reason about whether
these two methods can be applied to DNS forwarders suc-
cessfully.