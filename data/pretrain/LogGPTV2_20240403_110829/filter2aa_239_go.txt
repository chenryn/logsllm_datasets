    using System.Net.Sockets;
    using System.Text;
    using System.Windows;
    using System.Windows.Input;
    namespace Wrox.ProCSharp.WinServices
    {
      public partial class MainWindow: Window
      {
        private QuoteInformation _quoteInfo = new QuoteInformation();
        public MainWindow()
        {
        InitializeComponent();
        this.DataContext = _quoteInfo;
        }
在项目的属性中，可以用Settings选项卡来配置连接到服务器的服务器名称和端口信
息，如图39-5所示。这里定义了ServerName和PortName设置的默认值。把Scope设置为
User，该设置就会保存到用户特定的配置文件中，因此应用程序的每个用户都可以有不同
的设置。Visual Studio的Settings特性也会创建一个Settings类，以便用一个强类型化的类来
读写设置。
图39-5
客户端的主要功能体现在Get Quote按钮的Click事件的处理程序中。
    protected async void OnGetQuote(object sender, RoutedEventArgs e)
    {
      const int bufferSize = 1024;
      Cursor currentCursor = this.Cursor;
      this.Cursor = Cursors.Wait;
      quoteInfo.EnableRequest = false;
      string serverName = Properties.Settings.Default.ServerName;
      int port = Properties.Settings.Default.PortNumber;
      var client = new TcpClient();
      NetworkStream stream = null;
      try
      {
        await client.ConnectAsync(serverName, port);
        stream = client.GetStream();
        byte[] buffer = new byte[bufferSize];
        int received = await stream.ReadAsync(buffer, 0, bufferSize);
        if (received  _quoteServer.Stop();
除了OnStart（）和OnStop（）方法之外，还可以重写服务类中的下列处理程序：
● OnPause（）——在暂停服务时调用这个方法。
● OnContinue（）——当服务从暂停状态返回到正常操作时，调用这个方法。为了调
用已重写的OnPause（）方法和OnContinue（）方法，CanPauseAndContinue属性
必须设置为true。
● 
OnShutdown（）——当Windows操作系统关闭时，调用这个方法。通常情况下，
OnShutdown（）方法的行为应该与OnStop（）方法的实现代码相似。如果需要更
多的时间关闭服务，则可以申请更多的时间。与OnPause（）方法和
OnContinue（）方法相似，必须设置一个属性启用这种行为，即CanShutdown属
性必须设置为true。
● OnPowerEvent（）——在系统的电源状态发生变化时，调用这个方法。电源状态发
生变化的信息在PowerBroadcastStatus类型的参数中，PowerBroadcastStatus是一个
枚举类型，其值是Battery Low和PowerStatusChange。在这个方法中，还可以获得
系统是否要挂起（QuerySuspend）的信息，此时可以同意或拒绝挂起。电源事件
详见本章后面的内容。
● OnCustomCommand（）——这个处理程序可以为服务控制程序发送过来的自定义
命令提供服务。OnCustomCommand（）的方法签名有一个用于获取自定义命令编
号的int参数，编号的取值范围是128～256，小于128的值是为系统预留的值。在
我们的服务中，使用自定义命令编号为128的命令重新读取引用文件：
      protected override void OnPause() => _quoteServer.Suspend();
      protected override void OnContinue() => _quoteServer.Resume();
      public const int CommandRefresh = 128;
      protected override void OnCustomCommand(int command)
      {
        switch (command)
        {
          case CommandRefresh:
          quoteServer.RefreshQuotes();
          break;
          default:
          break;
        }
      }
39.3.4 线程化和服务
如前所述，如果服务的初始化花费的时间过多，则SCM就假定服务启动失败。为了
解决这个问题，必须创建线程。
服务类中的OnStart（）方法必须及时返回。如果从TcpListener类中调用一个
AcceptSocket（）之类的阻塞方法，就必须启动一个线程来完成调用工作。使用能处理多
个客户端的网络服务器时，线程池也非常有用。AcceptSocket（）方法应接收调用，并在
线程池的另一个线程中进行处理，这样就不需要等待代码的执行，系统看起来似乎是立即
响应的。
39.3.5 服务的安装
服务必须在注册表中配置，所有服务都可以在
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services中找到。使用regedit命令，
可以查看注册表项。在注册表中，可以看到服务的类型、显示名称、可执行文件的路径、
启动配置以及其他信息。图39-8显示了W3SVC服务的注册表配置。
图39-8
使用System.ServiceProcess名称空间中的安装程序类，可以完成服务在注册表中的配
置。下面讨论这些内容。
39.3.6 安装程序
切换到Visual Studio的设计视图，从弹出的上下文菜单中选择Add Installer选项，就可
以给服务添加安装程序。使用Add 
Installer选项时，新建一个ProjectInstaller类、一个
ServiceInstaller实例和一个ServiceProcessInstaller实例。
图39-9显示了服务的安装程序类。
图39-9
根据图39-9，下面详细讨论由Add Installer选项创建的ProjectInstaller.cs文件中的源代
码。
1．安装程序类
ProjectInstaller类派生自System.Configuration.Install.Installer，后者是所有自定义安装
程序的基类。使用Installer类，可以构建基于事务的安装程序。使用基于事务的安装时，
如果安装失败，系统就可以回滚到以前的状态，安装程序所做的所有修改都会被取消。如
图39-9所示，Installer类中有Install（）、Commit（）、Rollback（）和Uninstall（）方
法，这些方法都从安装程序中调用。
如果RunInstaller特性的值为true，则在安装程序集时调用ProjectInstaller类。自定义安
装程序和installutil.exe（这个程序以后将用到）都能检查该特性。
在ProjectInstaller类的构造函数内部调用InitializeComponent（）（代码文件
QuoteService/Project-Installer.cs）：
    using System.ComponentModel;
    using System.Configuration.Install;
    namespace Wrox.ProCSharp.WinServices
    {
      [RunInstaller(true)]
      public partial class ProjectInstaller: Installer
      {
        public ProjectInstaller()
        {
        InitializeComponent();
        }
      }
    }
下面看看项目安装程序调用的其他安装程序。
2. ServiceProcessInstaller类和ServiceInstaller类
在InitializeComponent（）方法的实现代码中，创建了ServiceProcessInstaller类和
ServiceInstaller类的实例。这两个类都派生于ComponentInstaller类，ComponentInstaller类
本身派生于Installer类。
ComponentInstaller类的派生类可以用作安装进程的一个部分。注意，一个服务进程可
以包括多个服务。ServiceProcessInstaller类用于配置进程，为这个进程中的所有服务定义
值，而ServiceInstaller类用于服务的配置，因此每个服务都需要ServiceInstaller类的一个实
例。如果进程中有3个服务，则必须添加3个ServiceInstaller对象：
    partial class ProjectInstaller
    {
      private System.ComponentModel.IContainer components = null;
      private void InitializeComponent()
      {
        this.serviceProcessInstaller1 =
          new System.ServiceProcess.ServiceProcessInstaller();
        this.serviceInstaller1 =
          new System.ServiceProcess.ServiceInstaller();
        this.serviceProcessInstaller1.Password = null;
        this.serviceProcessInstaller1.Username = null;
        this.serviceInstaller1.ServiceName = "QuoteService";
        this.serviceInstaller1.Description = "Sample Service for Professional C#"
;
        this.serviceInstaller1.StartType = System.ServiceProcess.ServiceStartMode
.Manual;
        this.Installers.AddRange(
        new System.Configuration.Install.Installer[]
          {this.serviceProcessInstaller1,
            this.serviceInstaller1});
      }
      private System.ServiceProcess.ServiceProcessInstaller
        serviceProcessInstaller1;
      private System.ServiceProcess.ServiceInstaller serviceInstaller1;
    }
ServiceProcessInstaller类安装一个实现ServiceBase类的可执行文件。
ServiceProcessInstaller类包含用于整个进程的属性。由进程中所有服务共享的属性如表39-
1所示。
表39-1
属性
描述
Username、