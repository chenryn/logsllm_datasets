 layer              | text                      |     
 leisure            | text                      |     
 lock               | text                      |     
 man_made           | text                      |     
 military           | text                      |     
 motorcar           | text                      |     
 name               | text                      |     
 natural            | text                      |     
 office             | text                      |     
 oneway             | text                      |     
 operator           | text                      |     
 place              | text                      |     
 population         | text                      |     
 power              | text                      |     
 power_source       | text                      |     
 public_transport   | text                      |     
 railway            | text                      |     
 ref                | text                      |     
 religion           | text                      |     
 route              | text                      |     
 service            | text                      |     
 shop               | text                      |     
 sport              | text                      |     
 surface            | text                      |     
 toll               | text                      |     
 tourism            | text                      |     
 tower:type         | text                      |     
 tracktype          | text                      |     
 tunnel             | text                      |     
 water              | text                      |     
 waterway           | text                      |     
 wetland            | text                      |     
 width              | text                      |     
 wood               | text                      |     
 z_order            | integer                   |     
 way_area           | real                      |     
 way                | geometry(LineString,4326) |     
Indexes:    
    "digoal_line_index" gist (way) WITH (fillfactor='100')    
```    
## GIS数据用法举例    
http://wiki.openstreetmap.org/wiki/Osm2pgsql/schema    
http://live.osgeo.org/zh/quickstart/postgis_quickstart.html    
### 1\. 在point表中，查询城市对应的坐标    
这里的坐标是无法阅读的 16 进制格式。要以 WKT 文本显示，使用 ST_AsText(the_geom) 或 ST_AsEwkt(the_geom) 函数。也可以使用 ST_X(the_geom) 和 ST_Y(the_geom) 显示一个维度的坐标    
```    
postgres=#  select name,way from digoal_point where place='city';    
 双湖县                             | 0101000020E61000003C180C0973355640F3846FAB6A984040    
 叶城县                             | 0101000020E610000058AB764D485C53406511D43ABBF24240    
 皮山县                             | 0101000020E6100000CA479C5FDE9153408ABCF61620CF4240    
 泽普县                             | 0101000020E6100000D8E9ACBB1E535340B1B3D771B2184340    
 英吉沙县                           | 0101000020E6100000A271F26C200B5340684DE262FB774340    
 喀什市                             | 0101000020E6100000DD3532D909FF52407187F2AA73BC4340    
 阿图什市                           | 0101000020E61000009AA95A1CDF0A5340902111644EDB4340    
 和田县/Hotan                       | 0101000020E6100000301576ACADFB5340E72CFD95DF8C4240    
 和田市                             | 0101000020E610000054EF5F0FDCFA5340220A1CBFA68E4240    
 策勒县                             | 0101000020E61000008C53083F4C335440277E3100F97F4240    
 且末县                             | 0101000020E6100000AFE0C84D1E625540EDF549496A114340    
 若羌县                             | 0101000020E61000002491C71D800A564030D05A762D824340    
 图木舒克市                         | 0101000020E61000001338C8DA95C5534044B1CBA612EF4340    
postgres=# SELECT name, ST_AsText(way), ST_AsEwkt(way), ST_X(way), ST_Y(way) FROM digoal_point where place='city' order by 4,5;    
....    
 无锡市                             | POINT(120.2954534 31.5756347) | SRID=4326;POINT(120.2954534 31.5756347) | 120.2954534 | 31.5756347    
 余杭区                             | POINT(120.3 30.416667)        | SRID=4326;POINT(120.3 30.416667)        |       120.3 |  30.416667    
 东台市                             | POINT(120.3122464 32.8536216) | SRID=4326;POINT(120.3122464 32.8536216) | 120.3122464 | 32.8536216    
 绥中县                             | POINT(120.3331747 40.329263)  | SRID=4326;POINT(120.3331747 40.329263)  | 120.3331747 |  40.329263    
 青岛市                             | POINT(120.3497193 36.0895093) | SRID=4326;POINT(120.3497193 36.0895093) | 120.3497193 | 36.0895093    
 招远市                             | POINT(120.402222 37.354722)   | SRID=4326;POINT(120.402222 37.354722)   |  120.402222 |  37.354722    
 苍南                               | POINT(120.4167898 27.5165682) | SRID=4326;POINT(120.4167898 27.5165682) | 120.4167898 | 27.5165682    
 朝阳市                             | POINT(120.4390738 41.5754767) | SRID=4326;POINT(120.4390738 41.5754767) | 120.4390738 | 41.5754767    
 磐安                               | POINT(120.4447816 29.0557511) | SRID=4326;POINT(120.4447816 29.0557511) | 120.4447816 | 29.0557511    
 即墨市                             | POINT(120.4502879 36.3912177) | SRID=4326;POINT(120.4502879 36.3912177) | 120.4502879 | 36.3912177    
 大丰市                             | POINT(120.4564759 33.2019957) | SRID=4326;POINT(120.4564759 33.2019957) | 120.4564759 | 33.2019957    
 海安县                             | POINT(120.4629239 32.5348763) | SRID=4326;POINT(120.4629239 32.5348763) | 120.4629239 | 32.5348763    
 柯桥区                             | POINT(120.489086 30.0812532)  | SRID=4326;POINT(120.489086 30.0812532)  |  120.489086 | 30.0812532    
....    
```    
### 2\. 空间查询    
PostGIS 为 PostgreSQL 扩展了许多空间操作功能。以上已经涉及了转换空间坐标格式的 ST_GeomFromText 。    
多数空间操作以 ST（spatial type）开头，在 PostGIS 文档相应章节有罗列。    
这里回答一个具体的问题：以米为单位并假设地球是完美椭球，城市间的相互的距离是多少？    
```    
SELECT p1.name,p2.name,ST_Distance_Sphere(p1.way,p2.way) FROM    
(select * from digoal_point where place='city' and name ~ '宜春') p1 ,     
(select * from digoal_point where place='city' and name ~ '杭州') p2     
where p1.name <> p2.name;    
  name  |  name  | st_distance_sphere     
--------+--------+--------------------    
 宜春市 | 杭州市 |    623574.67310136    
(1 row)    
```    
采取不同的椭球参数（椭球体名、半主轴长、扁率）计算    
```    
SELECT p1.name,p2.name,ST_Distance_Spheroid(p1.way, p2.way, 'SPHEROID["GRS_1980",6378137,298.257222]')     
FROM    
(select * from digoal_point where place='city' and name ~ '宜春') p1 ,     
(select * from digoal_point where place='city' and name ~ '杭州') p2     
where p1.name <> p2.name;    
  name  |  name  | st_distance_spheroid     
--------+--------+----------------------    
 宜春市 | 杭州市 |     624144.288437696    
(1 row)    
```    
### 3\. 区域类型查询      
```    
postgres=# select name from digoal_polygon where name ~ '杭州';    
               name                   
----------------------------------    
 杭州世纪华联超市    
 杭州楼 Hangchow House    
 杭州国际学校    
 杭州天目外国语学校    
 杭州市 / Hangzhou    
 杭州野生动物世界    
 浙江省杭州第二中学    
 网易杭州    
 杭州邮政大楼    
....    
```    
### 4\. 点面判断举例    
```    
postgres=# select name from digoal_polygon where name ~ '杭州' and way ~ ST_GeomFromEWKT('SRID=4326;POINT(120.3 30.416667)');    
       name            
-------------------    
 杭州市 / Hangzhou    
(1 row)    
```    
### 5\. 区域统计举例    
```    
select t1.name,count(*) from digoal_polygon t1, digoal_point t2 where t1.way ~ t2.way group by t1.name order by 2 desc limit 100;    
postgres=# select t1.name,count(*) from digoal_polygon t1, digoal_point t2 where t1.way ~ t2.way group by t1.name order by 2 desc limit 100;    
                              name                              | count      
----------------------------------------------------------------+--------    
 内蒙古自治区 / Inner Mongolia                                  | 262464    
                                                                | 243692    
 甘肃省                                                         | 125988    
 河北省                                                         | 113878    
 广东省                                                         | 107363    
 新疆维吾尔自治区                                               |  87043    
 青海省                                                         |  45976    
 陕西省                                                         |  45119    
 吉林省                                                         |  43395    
 浙江省                                                         |  42464    
 北京市                                                         |  42385    
```    
### 6\. 求区域面积
声明，不代表真实数据  
```  
postgres=# select name,ST_AREA(way)/POWER(0.3048,2) As sqft_spheroid, ST_AREA(way,false)/POWER(0.3048,2) As sqft_sphere, ST_Area(way) As sqm_spheroid from digoal_polygon order by 2 desc limit 10;
             name              |  sqft_spheroid   |   sqft_sphere    |   sqm_spheroid   
-------------------------------+------------------+------------------+------------------
 新疆维吾尔自治区              | 1886.69386901133 |   17545758222578 | 175.279595980515
 内蒙古自治区 / Inner Mongolia | 1388.45334818658 | 12303880320749.7 | 128.991536944712
 西藏自治区 (???????????????????)    | 1157.79354491985 | 12172952810487.3 |  107.56254001543
 青海省                        | 747.111046519574 | 7501178053415.87 | 69.4088874392498
 黑龙江省                      | 586.158263912179 | 4858310748074.14 | 54.4558846385637
 巴音郭楞蒙古自治州 (Bayingol) | 530.069700073705 | 5055365519125.31 | 49.2450865487355
 四川省                        | 492.339435917579 | 5235712822057.58 | 45.7398303086283
 甘肃省                        | 468.745196462264 | 4571217336421.43 | 43.5478537367416
 云南省                        | 368.878048351166 | 4132569814712.27 | 34.2698920810903
```  
### 7\. 更多的例子可参考    
http://postgis.net/docs/manual-2.2/    
## 其他    
除了使用pbf，我们还可以使用shp2pgsql    
http://postgis.net/docs/manual-2.2/using_postgis_dbmanagement.html#shp2pgsql_usage    
shapefile 是一种 Esri 矢量数据存储格式，用于存储地理要素的位置、形状和属性。    
其存储为一组相关文件，并包含一个要素类。    
Shapefile 经常包含具有很多关联数据的大型要素，并一直用于 GIS 桌面应用程序（例如 ArcGIS for Desktop 和 ArcGIS Explorer Desktop）。    
## 阿里云用户可以更简便的使用GIS    
如果使用阿里云提供的RDS for PostgreSQL，因为已经集成了PostGIS插件，所以使用起来更加方便。      
导入地理位置信息测试数据将简化为3步骤    
简化步骤如下  
### 1\. 购买实例, 并在对应的数据库中创建extension    
```    
create extension postgis;    
```    
### 2\. 下载pbf    
```
$ wget http://download.gisgraphy.com/openstreetmap/pbf/CN.tar.bz2    
$ tar -jxvf CN.tar.bz2      
```    
### 3\. 导入   
找一台ECS，安装osm2pgsql，并将下载的PBF数据导入RDS PostgreSQL  
```    
$ export PGPASS=$pwd    
$ osm2pgsql -H $ip -P $port -U $user -d $dbname -c -l -C 2000 --number-processes 8 -p digoal -r pbf /data01/CN    
```    
## 参考  
介绍postgis使用的文档      
http://live.osgeo.org/zh/quickstart/postgis_quickstart.html    
osgeo LIVE 平台的中文介绍    
http://live.osgeo.org/zh/index.html    
osgeo 的PPT介绍，建议熟悉一下，对GIS入门很有帮助    
http://live.osgeo.org/en/presentation/index.html    
osgeo 中国社区首页    
http://www.osgeo.cn/    
openstreetmap是一个开放的GIS信息数据共享库，一直都在更新，现在全球的数据有几十GB，中国的数据有几百MB。      
https://www.openstreetmap.org    
http://planet.openstreetmap.org/    
http://wiki.openstreetmap.org/wiki/Planet.osm    
可以从镜像站点下载共享的pbf数据    
http://download.gisgraphy.com/openstreetmap/pbf/    
http://postgis.net/docs/manual-2.2/    
http://wiki.openstreetmap.org/wiki/Osm2pgsql/schema    
http://live.osgeo.org/zh/quickstart/postgis_quickstart.html    
http://postgis.net/docs/manual-2.2/using_postgis_dbmanagement.html#shp2pgsql_usage     
## 声明
所有地理位置信息的数据不代表官方，不代表真实数据，仅作为测试使用，请注意。    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")