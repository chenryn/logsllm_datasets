# Beyond the B-Tree
## Christophe Pettus
### thebuild.com, @xof, pgexperts.com

Let us now praise famous data structures.

**Thanks, Wikipedia.**

## The B-Tree
- **Invented at Boeing Research Labs in 1971.**
- **Provides O(log n) access to leaf nodes on equality searches.**
- **Compact, well-understood, and efficient.**
- **The origin of "B" remains a mystery.**

### Key Features
- **Versatile:** Can be used to traverse the index in forward or reverse-sorted order.
- **Comparison Searches:** Supports any type that is totally ordered.
- **General Utility:** Slices, dices, and makes julienne fries (metaphorically speaking).

### Limitations
- **Not all types are totally ordered.**
- **Arbitrary total ordering may not be naturally useful.**
- **Some types use operators that do not map easily into direct comparisons.**

## GIST and GIN: Advanced Indexing Solutions
- **Generalized Index Storage Technique (GIST):** An index framework for various types and operators.
- **Generalized Inverted Index (GIN):** Stores tokens and pointers to rows containing those tokens.

### What's GIST Good For?
- **Types Partitioning Mathematical Spaces:** Geometries, ranges, etc.
- **Operations:** Containment, distance, and similar operations.
- **Examples:** "Inside of," "Close to."

### What's GIN Good For?
- **Token Storage:** Inverted indexes for full-text searches, array entries, JSON keys/values, etc.
- **Scalability:** Any scalar value supported by PostgreSQL can be a token.

### Implementation Details
- **Operator Classes:** Each GIST/GIN index implementation specifies which operators it supports.
- **Documentation:** Essential for understanding and creating custom indexes.
- **Customization:** Some C language programming may be required for defining indexes for custom types.

## Creating a GIST Index
- **Syntax:** `CREATE INDEX ON t USING GIST(f);`
- **Default Operator Class:** Selects the default operator class for the specific type.
- **Multiple Operator Classes:** Different kinds of indexes optimized for different queries.

### Use Cases
- **Geographic Data:** "What polygons contain this point?"
- **Range Data:** "What date ranges overlap with this one?"
- **Similarity Data:** "What phrases, in trigrams, are most similar to this one?"

## The Starbucks Problem
- **Problem Statement:** "Where are the nearest n Starbucks to this point?"
- **Solution Complexity:** Traditional methods involve binary search, heuristics, or other hacks.
- **KNN Indexes to the Rescue:** If the GIST index provides the `<->` operator, it can be used for nearest neighbors.

### Example Query
```sql
SELECT id, store_locpoint(43.45, -71.91)
FROM stores
ORDER BY store_locpoint(43.45, -71.91) <-> store_locpoint(43.45, -71.91)
LIMIT 10;
```

### Not Just Geometries
- **Any Data Type:** That defines a `<->` operator.
- **pg_tgrm:** Used for text similarity matching.
- **Custom Types:** With some C programming, you can create your own.

## GIST on Scalar Types
- **Extensions:** Create GIST indexes on scalar types.
- **Operators:** Get `<->` and `<<->>`.

### A Hard Problem
- **Constraint:** "Donâ€™t allow two bookings for the same room where the dates overlap."
- **Traditional UNIQUE Constraints:** Inadequate for this problem.
- **Constraint Exclusion:** To the rescue!

### Single Index Requirement
- **RANGE Types:** Require a GIST index.
- **Scalar Values:** By default, do not have GIST indexing.

### Example: Reservations Booking
```sql
\d reservations_booking
-- Table "public.reservations_booking"
-- Column | Type | Modifiers
-- --------+----------------------+
-- id | integer | not null default nextval('reservations_booking_id_seq'::regclass)
-- room | character varying(4) | not null
-- dates | daterange | not null
-- Indexes:
-- "reservations_booking_pkey" PRIMARY KEY, btree (id)

CREATE EXTENSION btree_gist;
ALTER TABLE reservations_booking ADD EXCLUDE USING GIST (room WITH =, dates WITH &&);
```

### Example Usage
```python
Booking(room='123', dates=DateRange(date(2015,9,1), date(2015,9,2))).save()
Booking(room='123', dates=DateRange(date(2015,9,2), date(2015,9,7))).save()
Booking(room='127', dates=DateRange(date(2015,9,2), date(2015,9,7))).save()
Booking(room='123', dates=DateRange(date(2015,9,5), date(2015,9,9))).save()
```
- **IntegrityError:** Conflicting key value violates exclusion constraint.

## GIN Indexes: The La Brea Tar Pits
- **Token Mapping:** Maps arbitrary scalar values to rows containing them.
- **Full-Text Search:** Common use case, mapping lexemes to rows.
- **Annotations:** Allow frequency and other annotations on index entries.

### JSON Indexing
- **PostgreSQL JSON Types:** `json` and `jsonb`.
- **json:** Raw text, faster to insert, allows dubious features.
- **jsonb:** Compact, indexable representation.

### Choosing Between json and jsonb
- **Use json:** For logging and minimal querying.
- **Use jsonb:** For all other applications, especially those requiring indexing.

### jsonb Indexing
- **GIN Indexing:** Supports `@>`, `?`, `?&`, and `?|` operators.
- **Top-Level Queries:** Must be against the top-level object for the index to be useful.
- **Nested Objects:** Only in paths rooted at the top level.

### jsonb_path_ops
- **Optional GIN Index Type:** Faster for `@>` operations with nesting.
- **Path Hashing:** Instead of just storing the key itself.

### Which to Use?
- **@> Only:** `jsonb_path_ops` is likely faster.
- **Other Operators:** `jsonb_ops` is necessary.

### Caveats
- **Index Size:** GIST and GIN indexes can be large.
- **Compression:** GIN posting list compression in PostgreSQL 9.4 can reduce size.
- **Cost:** Creation and maintenance are not free; only create if needed.

## Questions?
Thank you!

**Christophe Pettus**
- **thebuild.com**
- **@xof**
- **pgexperts.com**