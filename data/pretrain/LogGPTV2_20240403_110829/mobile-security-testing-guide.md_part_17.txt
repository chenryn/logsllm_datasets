0x7f3357bb7ef0 f SSL_CIPHER_get_bits
0x7f3357bb8260 f SSL_CIPHER_find
0x7f3357bb82c0 f SSL_CIPHER_get_digest_nid
0x7f3357bb8380 f SSL_CIPHER_is_aead
0x7f3357bb8270 f SSL_CIPHER_get_cipher_nid
0x7f3357bb7ed0 f SSL_CIPHER_get_name
0x7f3357bb8340 f SSL_CIPHER_get_auth_nid
0x7f3357bb7930 f SSL_CIPHER_description
0x7f3357bb8300 f SSL_CIPHER_get_kx_nid
0x7f3357bb7ea0 f SSL_CIPHER_get_version
0x7f3357bb7f10 f SSL_CIPHER_get_id
To list or set a breakpoint use the command db. This is useful when analyzing/modifying memory:
[0x00000000]> \db
Finally, remember that you can also run Frida JavaScript code with \. plus the name of the script:
[0x00000000]> \. agent.js
You can find more examples on how to use r2frida on their Wiki project.
Basic Testing Operations
Accessing the Device Shell
One of the most common things you do when testing an app is accessing the device shell. In this section we'll see
how to access the Android shell both remotely from your host computer with/without a USB cable and locally from the
device itself.
Remote Shell
In order to connect to the shell of an Android device from your host computer, adb is usually your tool of choice
(unless you prefer to use remote SSH access, e.g. via Termux).
For this section we assume that you've properly enabled Developer Mode and USB debugging as explained in
"Testing on a Real Device". Once you've connected your Android device via USB, you can access the remote device's
shell by running:
$ adb shell
press Control + D or type exit to quit
If your device is rooted or you're using the emulator, you can get root access by running su once in the remote shell:
128
Setting up a Testing Environment for Android Apps
$ adb shell
bullhead:/ $ su
bullhead:/ # id
uid=0(root) gid=0(root) groups=0(root) context=u:r:su:s0
Only if you're working with an emulator you may alternatively restart adb with root permissions with the
command adb root so next time you enter adb shell you'll have root access already. This also allows to
transfer data bidirectionally between your workstation and the Android file system, even with access to locations
where only the root user has access to (via adb push/pull ). See more about data transfer in section "Host-
Device Data Transfer" below.
Connect to Multiple Devices
If you have more than one device, remember to include the -s flag followed by the device serial ID on all your adb
commands (e.g. adb -s emulator-5554 shell or adb -s 00b604081540b7c6 shell ). You can get a list of all connected
devices and their serial IDs by using the following command:
$ adb devices
List of devices attached
00c907098530a82c device
emulator-5554 device
Connect to a Device over Wi-Fi
You can also access your Android device without using the USB cable. For this you'll have to connect both your host
computer and your Android device to the same Wi-Fi network and follow the next steps:
Connect the device to the host computer with a USB cable and set the target device to listen for a TCP/IP
connection on port 5555: adb tcpip 5555 .
Disconnect the USB cable from the target device and run adb connect  . Check that the
device is now available by running adb devices .
Open the shell with adb shell .
However, notice that by doing this you leave your device open to anyone being in the same network and knowing the
IP address of your device. You may rather prefer using the USB connection.
For example, on a Nexus device, you can find the IP address at Settings -> System -> About phone -> Status -
> IP address or by going to the Wi-Fi menu and tapping once on the network you're connected to.
See the full instructions and considerations in the Android Developers Documentation.
Connect to a Device via SSH
If you prefer, you can also enable SSH access. A convenient option is to use Termux, which you can easily configure
to offer SSH access (with password or public key authentication) and start it with the command sshd (starts by
default on port 8022). In order to connect to the Termux via SSH you can simply run the command ssh -p 8022
 (where ip_address is the actual remote device IP). This option has some additional benefits as it allows
to access the file system via SFTP also on port 8022.
On-device Shell App
While usually using an on-device shell (terminal emulator) might be very tedious compared to a remote shell, it can
prove handy for debugging in case of, for example, network issues or check some configuration.
Termux is a terminal emulator for Android that provides a Linux environment that works directly with or without rooting
and with no setup required. The installation of additional packages is a trivial task thanks to its own APT package
manager (which makes a difference in comparison to other terminal emulator apps). You can search for specific
129
Setting up a Testing Environment for Android Apps
packages by using the command pkg search  and install packages with pkg install  . You can
install Termux straight from Google Play.
Host-Device Data Transfer
Using adb
You can copy files to and from a device by using the commands adb pull   and adb push 
 commands. Their usage is very straightforward. For example, the following will copy foo.txt from your
current directory (local) to the sdcard folder (remote):
$ adb push foo.txt /sdcard/foo.txt
This approach is commonly used when you know exactly what you want to copy and from/to where and also supports
bulk file transfer, e.g. you can pull (copy) a whole directory from the Android device to your workstation.
$ adb pull /sdcard
/sdcard/: 1190 files pulled. 14.1 MB/s (304526427 bytes in 20.566s)
Using Android Studio Device File Explorer
Android Studio has a built-in Device File Explorer which you can open by going to View -> Tool Windows -> Device
File Explorer.
If you're using a rooted device you can now start exploring the whole file system. However, when using a non-rooted
device accessing the app sandboxes won't work unless the app is debuggable and even then you are "jailed" within
the app sandbox.
Using objection
This option is useful when you are working on a specific app and want to copy files you might encounter inside its
sandbox (notice that you'll only have access to the files that the target app has access to). This approach works
without having to set the app as debuggable, which is otherwise required when using Android Studio's Device File
Explorer.
First, connect to the app with Objection as explained in "Recommended Tools - Objection". Then, use ls and cd as
you normally would on your terminal to explore the available files:
130
Setting up a Testing Environment for Android Apps
$ frida-ps -U | grep -i owasp
21228 sg.vp.owasp_mobile.omtg_android
$ objection -g sg.vp.owasp_mobile.omtg_android explore
...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # cd ..
/data/user/0/sg.vp.owasp_mobile.omtg_android
...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # ls
Type ... Name
--------- ... -------------------
Directory ... cache
Directory ... code_cache
Directory ... lib
Directory ... shared_prefs
Directory ... files
Directory ... app_ACRA-approved
Directory ... app_ACRA-unapproved
Directory ... databases
Readable: True Writable: True
One you have a file you want to download you can just run file download  . This will download that file to
your working directory. The same way you can upload files using file upload .
...[usb] # ls
Type ... Name
------ ... -----------------------------------------------
File ... sg.vp.owasp_mobile.omtg_android_preferences.xml
Readable: True Writable: True
...[usb] # file download sg.vp.owasp_mobile.omtg_android_preferences.xml
Downloading ...
Streaming file from device...
Writing bytes to destination...
Successfully downloaded ... to sg.vp.owasp_mobile.omtg_android_preferences.xml
The downside is that, at the time of this writing, objection does not support bulk file transfer yet, so you're restricted to
copy individual files. Still, this can come handy in some scenarios where you're already exploring the app using
objection anyway and find some interesting file. Instead of e.g. taking note of the full path of that file and use adb pull
 from a separate terminal, you might just want to directly do file download  .
Using Termux
If you have a rooted device and have Termux installed and have properly configured SSH access on it, you should
have an SFTP (SSH File Transfer Protocol) server already running on port 8022. You may access it from your
terminal:
$ sftp -P 8022 root@localhost
...
sftp> cd /data/data
sftp> ls -1
...
sg.vantagepoint.helloworldjni
sg.vantagepoint.uncrackable1
sg.vp.owasp_mobile.omtg_android
Or simply by using an SFTP-capable client like FileZilla:
131
Setting up a Testing Environment for Android Apps
Check the Termux Wiki to learn more about remote file access methods.
Obtaining and Extracting Apps
There are several ways of extracting apk files from a device. You will need to decide which one is the easiest method
depending if the app is public or private.
Alternative App Stores
One of the easiest options is to download the apk from websites that mirror public applications from the Google Play
Store. However, keep in mind that these sites are not offical and there is no guarantee that the application hasn't been
repackaged or contain malware. A few reputable websites that host APKs and are not known for modifying apps and
even list SHA-1 and SHA-256 checksums of the apps are:
APKMirror
APKPure
Beware that you do not have control over these sites and you cannot guarantee what they do in the future. Only use
them if it's your only option left.
Extracting the App Package from the Device
Obtaining app packages from the device is the recommended method as we can guarantee the app hasn't been
modified by a third-party.
To obtain applications from a non-rooted device, you could use adb . If you don't know the package name, the first
step is to list all the applications installed on the device:
$ adb shell pm list packages
132
Setting up a Testing Environment for Android Apps
Once you have located the package name of the application, you need the full path where it is stored on the system to
download it.
$ adb shell pm path 
With the full path to the apk, you can now simply use adb pull to extract the apk.
$ adb pull 
The apk will be downloaded in your working directory.
There are also apps like APK Extractor that do not require root and can even share the extracted apk via your
prefered method. This can be useful if you don't feel like connecting the device or setting up adb over the network to
transfer the file.
Both of the methods mentioned previously do not require root, hence, they can be used on rooted and non-rooted
devices.
Installing Apps
Use adb install to install an APK on an emulator or connected device.
adb install path_to_apk
Note that if you have the original source code and use Android Studio, you do not need to do this because Android
Studio handles the packaging and installation of the app for you.
Information Gathering
One fundamental step when analyzing apps is information gathering. This can be done by inspecting the app package
on your workstation or remotely by accessing the app data on the device. You'll find more advanced techniques in the
subsequent chapters but, for now, we will focus on the basics: getting a list of all installed apps, exploring the app
package and accessing the app data directories on the device itself. This should give you a bit of context about what
the app is all about without even having to reverse engineer it or perform more advanced analysis. We will be
answering questions such as:
Which files are included in the package?
Which native libraries does the app use?
Which app components does the app define? Any services or content providers?
Is the app debuggable?
Does the app contain a network security policy?
Does the app create any new files when being installed?
Listing Installed Apps
When targeting apps that are installed on the device, you'll first have to figure out the correct package name of the
application you want to analyze. You can retrieve the installed apps either by using pm (Android Package Manager)
or by using frida-ps :
$ adb shell pm list packages
package:sg.vantagepoint.helloworldjni
package:eu.chainfire.supersu
package:org.teamsik.apps.hackingchallenge.easy
package:org.teamsik.apps.hackingchallenge.hard
133
Setting up a Testing Environment for Android Apps
package:sg.vp.owasp_mobile.omtg_android
You can include flags to show only third party apps ( -3 ) and the location of their APK file ( -f ), which you can use
afterwards to download it via adb pull :
$ adb shell pm list packages -3 -f
package:/data/app/sg.vantagepoint.helloworldjni-1/base.apk=sg.vantagepoint.helloworldjni
package:/data/app/eu.chainfire.supersu-1/base.apk=eu.chainfire.supersu
package:/data/app/org.teamsik.apps.hackingchallenge.easy-1/base.apk=org.teamsik.apps.hackingchallenge.easy
package:/data/app/org.teamsik.apps.hackingchallenge.hard-1/base.apk=org.teamsik.apps.hackingchallenge.hard
package:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk=sg.vp.owasp_mobile.omtg_and
roid
This is the same as running adb shell pm path  on an app package ID:
$ adb shell pm path sg.vp.owasp_mobile.omtg_android
package:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk
Use frida-ps -Uai to get all apps ( -a ) currently installed ( -i ) on the connected USB device ( -U ):
$ frida-ps -Uai
PID Name Identifier
----- ---------------------------------------- ---------------------------------------
766 Android System android
21228 Attack me if u can sg.vp.owasp_mobile.omtg_android
4281 Termux com.termux
- Uncrackable1 sg.vantagepoint.uncrackable1
- drozer Agent com.mwr.dz
Note that this also shows the PID of the apps that are running at the moment. Take a note of the "Identifier" and the
PID if any as you'll need them afterwards.
Exploring the App Package
Once you have collected the package name of the application you want to target, you'll want to start gathering
information about it. First, retrieve the APK as explained in "Basic Testing Operations - Obtaining and Extracting
Apps".
APK files are actually ZIP files that can be unpacked using a standard unarchiver:
$ unzip base.apk
$ ls -lah
-rw-r--r-- 1 sven staff 11K Dec 5 14:45 AndroidManifest.xml
drwxr-xr-x 5 sven staff 170B Dec 5 16:18 META-INF
drwxr-xr-x 6 sven staff 204B Dec 5 16:17 assets
-rw-r--r-- 1 sven staff 3.5M Dec 5 14:41 classes.dex
drwxr-xr-x 3 sven staff 102B Dec 5 16:18 lib
drwxr-xr-x 27 sven staff 918B Dec 5 16:17 res
-rw-r--r-- 1 sven staff 241K Dec 5 14:45 resources.arsc
The following files are unpacked:
AndroidManifest.xml: contains the definition of the app's package name, target and minimum API level, app
configuration, app components, permissions, etc.
META-INF: contains the app's metadata
MANIFEST.MF: stores hashes of the app resources
CERT.RSA: the app's certificate(s)
CERT.SF: list of resources and the SHA-1 digest of the corresponding lines in the MANIFEST.MF file
134
Setting up a Testing Environment for Android Apps
assets: directory containing app assets (files used within the Android app, such as XML files, JavaScript files, and
pictures), which the AssetManager can retrieve
classes.dex: classes compiled in the DEX file format, the Dalvik virtual machine/Android Runtime can process.
DEX is Java bytecode for the Dalvik Virtual Machine. It is optimized for small devices
lib: directory containing 3rd party libraries that are part of the APK.
res: directory containing resources that haven't been compiled into resources.arsc
resources.arsc: file containing precompiled resources, such as XML files for the layout
As unzipping with the standard unzip utility leaves some files such as the AndroidManifest.xml unreadable, you
better unpack the APK using apktool as described in "Recommended Tools - apktool". The unpacking results into:
$ ls -alh
total 32
drwxr-xr-x 9 sven staff 306B Dec 5 16:29 .
drwxr-xr-x 5 sven staff 170B Dec 5 16:29 ..
-rw-r--r-- 1 sven staff 10K Dec 5 16:29 AndroidManifest.xml
-rw-r--r-- 1 sven staff 401B Dec 5 16:29 apktool.yml
drwxr-xr-x 6 sven staff 204B Dec 5 16:29 assets
drwxr-xr-x 3 sven staff 102B Dec 5 16:29 lib
drwxr-xr-x 4 sven staff 136B Dec 5 16:29 original
drwxr-xr-x 131 sven staff 4.3K Dec 5 16:29 res
drwxr-xr-x 9 sven staff 306B Dec 5 16:29 smali
The Android Manifest
The Android Manifest is the main source of information, it includes a lot of interesting information such as the package
name, the permissions, app components, etc.
Here's a non-exhaustive list of some info and the corresponding keywords that you can easily search for in the
Android Manifest by just inspecting the file or by using grep -i  AndroidManifest.xml :
App permissions: permission (see "Android Platform APIs")
Backup allowance: android:allowBackup (see "Data Storage on Android")
App components: activity , service , provider , receiver (see "Android Platform APIs" and "Data Storage on