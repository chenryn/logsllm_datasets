### SSL Cipher Functions

- `0x7f3357bb7ef0` - `SSL_CIPHER_get_bits`
- `0x7f3357bb8260` - `SSL_CIPHER_find`
- `0x7f3357bb82c0` - `SSL_CIPHER_get_digest_nid`
- `0x7f3357bb8380` - `SSL_CIPHER_is_aead`
- `0x7f3357bb8270` - `SSL_CIPHER_get_cipher_nid`
- `0x7f3357bb7ed0` - `SSL_CIPHER_get_name`
- `0x7f3357bb8340` - `SSL_CIPHER_get_auth_nid`
- `0x7f3357bb7930` - `SSL_CIPHER_description`
- `0x7f3357bb8300` - `SSL_CIPHER_get_kx_nid`
- `0x7f3357bb7ea0` - `SSL_CIPHER_get_version`
- `0x7f3357bb7f10` - `SSL_CIPHER_get_id`

To list or set a breakpoint, use the command `db`. This is useful when analyzing or modifying memory:

```shell
[0x00000000]> db
```

You can also run Frida JavaScript code with `\.` followed by the name of the script:

```shell
[0x00000000]> \. agent.js
```

For more examples on how to use r2frida, refer to their Wiki project.

### Basic Testing Operations

#### Accessing the Device Shell

One of the most common tasks when testing an app is accessing the device shell. This section covers how to access the Android shell both remotely from your host computer (with or without a USB cable) and locally from the device itself.

##### Remote Shell

To connect to the shell of an Android device from your host computer, `adb` is typically the tool of choice (unless you prefer to use remote SSH access, e.g., via Termux).

**Prerequisites:**
- Enable Developer Mode and USB debugging as explained in "Testing on a Real Device".

**Steps:**
1. Connect your Android device via USB.
2. Run the following command to access the remote device's shell:
   ```shell
   $ adb shell
   ```
3. Press `Control + D` or type `exit` to quit the shell.

If your device is rooted or you are using an emulator, you can get root access by running `su` in the remote shell:

```shell
$ adb shell
bullhead:/ $ su
bullhead:/ # id
uid=0(root) gid=0(root) groups=0(root) context=u:r:su:s0
```

For emulators, you can restart `adb` with root permissions using the command `adb root`, so that the next time you enter `adb shell`, you will already have root access. This also allows bidirectional data transfer between your workstation and the Android file system, even to locations where only the root user has access (via `adb push/pull`). See the "Host-Device Data Transfer" section for more details.

##### Connect to Multiple Devices

If you have more than one device, include the `-s` flag followed by the device serial ID in all your `adb` commands. For example:

```shell
$ adb -s emulator-5554 shell
$ adb -s 00b604081540b7c6 shell
```

To get a list of all connected devices and their serial IDs, use the following command:

```shell
$ adb devices
List of devices attached
00c907098530a82c device
emulator-5555 device
```

##### Connect to a Device over Wi-Fi

You can also access your Android device without using the USB cable. Follow these steps:

1. Connect the device to the host computer with a USB cable and set the target device to listen for a TCP/IP connection on port 5555:
   ```shell
   $ adb tcpip 5555
   ```
2. Disconnect the USB cable from the target device and run:
   ```shell
   $ adb connect <device_ip_address>
   ```
3. Check that the device is now available by running:
   ```shell
   $ adb devices
   ```
4. Open the shell with:
   ```shell
   $ adb shell
   ```

**Note:** By doing this, you leave your device open to anyone on the same network who knows the IP address of your device. You may prefer using the USB connection for security reasons.

For example, on a Nexus device, you can find the IP address at `Settings -> System -> About phone -> Status -> IP address` or by going to the Wi-Fi menu and tapping once on the network you're connected to.

Refer to the full instructions and considerations in the Android Developers Documentation.

##### Connect to a Device via SSH

You can also enable SSH access. A convenient option is to use Termux, which you can easily configure to offer SSH access (with password or public key authentication) and start it with the command `sshd` (starts by default on port 8022). To connect to the Termux via SSH, run:

```shell
$ ssh -p 8022 <ip_address>
```

This option also allows you to access the file system via SFTP on port 8022.

##### On-device Shell App

While using an on-device shell (terminal emulator) might be tedious compared to a remote shell, it can be handy for debugging, especially in cases of network issues or checking configurations.

**Termux:**
- Termux is a terminal emulator for Android that provides a Linux environment, working directly with or without rooting and no setup required.
- Installation of additional packages is straightforward thanks to its own APT package manager.
- Search for specific packages using `pkg search <package_name>` and install them with `pkg install <package_name>`.
- You can install Termux straight from Google Play.

### Host-Device Data Transfer

#### Using `adb`

You can copy files to and from a device using the `adb pull` and `adb push` commands. For example, to copy `foo.txt` from your current directory (local) to the `sdcard` folder (remote):

```shell
$ adb push foo.txt /sdcard/foo.txt
```

This approach is commonly used when you know exactly what you want to copy and from/to where. It also supports bulk file transfer. For example, to pull (copy) a whole directory from the Android device to your workstation:

```shell
$ adb pull /sdcard
/sdcard/: 1190 files pulled. 14.1 MB/s (304526427 bytes in 20.566s)
```

#### Using Android Studio Device File Explorer

Android Studio has a built-in Device File Explorer, which you can open by going to `View -> Tool Windows -> Device File Explorer`.

- If you're using a rooted device, you can explore the whole file system.
- For non-rooted devices, accessing the app sandboxes won't work unless the app is debuggable, and even then, you are "jailed" within the app sandbox.

#### Using Objection

This option is useful when working on a specific app and wanting to copy files inside its sandbox. This approach works without setting the app as debuggable, which is otherwise required when using Android Studio's Device File Explorer.

1. Connect to the app with Objection as explained in "Recommended Tools - Objection".
2. Use `ls` and `cd` as you normally would on your terminal to explore the available files:

```shell
$ frida-ps -U | grep -i owasp
21228 sg.vp.owasp_mobile.omtg_android
$ objection -g sg.vp.owasp_mobile.omtg_android explore
...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # cd ..
/data/user/0/sg.vp.owasp_mobile.omtg_android
...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # ls
Type ... Name
--------- ... -------------------
Directory ... cache
Directory ... code_cache
Directory ... lib
Directory ... shared_prefs
Directory ... files
Directory ... app_ACRA-approved
Directory ... app_ACRA-unapproved
Directory ... databases
Readable: True Writable: True
```

Once you have a file you want to download, run `file download <file_path>`. This will download the file to your working directory. Similarly, you can upload files using `file upload <file_path>`.

**Example:**

```shell
...[usb] # ls
Type ... Name
------ ... -----------------------------------------------
File ... sg.vp.owasp_mobile.omtg_android_preferences.xml
Readable: True Writable: True
...[usb] # file download sg.vp.owasp_mobile.omtg_android_preferences.xml
Downloading ...
Streaming file from device...
Writing bytes to destination...
Successfully downloaded ... to sg.vp.owasp_mobile.omtg_android_preferences.xml
```

The downside is that, at the time of this writing, Objection does not support bulk file transfer, so you are restricted to copying individual files. However, this can be handy in scenarios where you are already exploring the app using Objection and find an interesting file.

#### Using Termux

If you have a rooted device and have Termux installed with properly configured SSH access, you should have an SFTP (SSH File Transfer Protocol) server running on port 8022. You can access it from your terminal:

```shell
$ sftp -P 8022 root@localhost
...
sftp> cd /data/data
sftp> ls -1
...
sg.vantagepoint.helloworldjni
sg.vantagepoint.uncrackable1
sg.vp.owasp_mobile.omtg_android
```

Alternatively, you can use an SFTP-capable client like FileZilla. Check the Termux Wiki for more information on remote file access methods.

### Obtaining and Extracting Apps

There are several ways to extract APK files from a device. The method you choose depends on whether the app is public or private.

#### Alternative App Stores

One of the easiest options is to download the APK from websites that mirror public applications from the Google Play Store. However, keep in mind that these sites are not official, and there is no guarantee that the application hasn't been repackaged or contains malware. Some reputable websites that host APKs and list SHA-1 and SHA-256 checksums are:

- APKMirror
- APKPure

**Note:** You do not have control over these sites and cannot guarantee their future actions. Only use them if it's your only option left.

#### Extracting the App Package from the Device

Obtaining app packages from the device is the recommended method as it ensures the app hasn't been modified by a third party.

**Non-rooted Devices:**

1. List all the applications installed on the device:
   ```shell
   $ adb shell pm list packages
   ```
2. Locate the package name of the application and get the full path where it is stored on the system:
   ```shell
   $ adb shell pm path <package_name>
   ```
3. Use `adb pull` to extract the APK:
   ```shell
   $ adb pull <full_path_to_apk>
   ```

**Apps like APK Extractor:**

- These apps do not require root and can share the extracted APK via your preferred method. This can be useful if you don't want to connect the device or set up `adb` over the network to transfer the file.

Both methods mentioned above do not require root, so they can be used on both rooted and non-rooted devices.

### Installing Apps

Use `adb install` to install an APK on an emulator or connected device:

```shell
$ adb install <path_to_apk>
```

**Note:** If you have the original source code and use Android Studio, you do not need to do this because Android Studio handles the packaging and installation of the app for you.

### Information Gathering

Information gathering is a fundamental step in analyzing apps. This can be done by inspecting the app package on your workstation or remotely by accessing the app data on the device. We will focus on the basics: getting a list of all installed apps, exploring the app package, and accessing the app data directories on the device itself. This should give you a bit of context about the app without having to reverse engineer it or perform more advanced analysis.

#### Listing Installed Apps

When targeting apps that are installed on the device, you first need to figure out the correct package name of the application you want to analyze. You can retrieve the installed apps using `pm` (Android Package Manager) or `frida-ps`:

```shell
$ adb shell pm list packages
package:sg.vantagepoint.helloworldjni
package:eu.chainfire.supersu
package:org.teamsik.apps.hackingchallenge.easy
package:org.teamsik.apps.hackingchallenge.hard
package:sg.vp.owasp_mobile.omtg_android
```

You can include flags to show only third-party apps (`-3`) and the location of their APK file (`-f`), which you can use afterwards to download it via `adb pull`:

```shell
$ adb shell pm list packages -3 -f
package:/data/app/sg.vantagepoint.helloworldjni-1/base.apk=sg.vantagepoint.helloworldjni
package:/data/app/eu.chainfire.supersu-1/base.apk=eu.chainfire.supersu
package:/data/app/org.teamsik.apps.hackingchallenge.easy-1/base.apk=org.teamsik.apps.hackingchallenge.easy
package:/data/app/org.teamsik.apps.hackingchallenge.hard-1/base.apk=org.teamsik.apps.hackingchallenge.hard
package:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk=sg.vp.owasp_mobile.omtg_android
```

This is the same as running `adb shell pm path <package_name>` on an app package ID:

```shell
$ adb shell pm path sg.vp.owasp_mobile.omtg_android
package:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk
```

Use `frida-ps -Uai` to get all apps currently installed on the connected USB device:

```shell
$ frida-ps -Uai
PID Name Identifier
----- ---------------------------------------- ---------------------------------------
766 Android System android
21228 Attack me if u can sg.vp.owasp_mobile.omtg_android
4281 Termux com.termux
- Uncrackable1 sg.vantagepoint.uncrackable1
- drozer Agent com.mwr.dz
```

Note that this also shows the PID of the apps that are running at the moment. Take note of the "Identifier" and the PID if any, as you'll need them later.

#### Exploring the App Package

Once you have the package name of the application, you can start gathering information about it. First, retrieve the APK as explained in "Basic Testing Operations - Obtaining and Extracting Apps".

APK files are actually ZIP files that can be unpacked using a standard unarchiver:

```shell
$ unzip base.apk
$ ls -lah
-rw-r--r-- 1 sven staff 11K Dec 5 14:45 AndroidManifest.xml
drwxr-xr-x 5 sven staff 170B Dec 5 16:18 META-INF
drwxr-xr-x 6 sven staff 204B Dec 5 16:17 assets
-rw-r--r-- 1 sven staff 3.5M Dec 5 14:41 classes.dex
drwxr-xr-x 3 sven staff 102B Dec 5 16:18 lib
drwxr-xr-x 27 sven staff 918B Dec 5 16:17 res
-rw-r--r-- 1 sven staff 241K Dec 5 14:45 resources.arsc
```

The following files are unpacked:

- `AndroidManifest.xml`: Contains the definition of the app's package name, target and minimum API level, app configuration, app components, permissions, etc.
- `META-INF`: Contains the app's metadata.
- `MANIFEST.MF`: Stores hashes of the app resources.
- `CERT.RSA`: The app's certificate(s).
- `CERT.SF`: List of resources and the SHA-1 digest of the corresponding lines in the `MANIFEST.MF` file.
- `assets`: Directory containing app assets (files used within the Android app, such as XML files, JavaScript files, and pictures), which the `AssetManager` can retrieve.
- `classes.dex`: Classes compiled in the DEX file format, which the Dalvik virtual machine/Android Runtime can process. DEX is Java bytecode for the Dalvik Virtual Machine, optimized for small devices.
- `lib`: Directory containing third-party libraries that are part of the APK.
- `res`: Directory containing resources that haven't been compiled into `resources.arsc`.
- `resources.arsc`: File containing precompiled resources, such as XML files for the layout.

As unzipping with the standard `unzip` utility leaves some files, such as `AndroidManifest.xml`, unreadable, it is better to unpack the APK using `apktool` as described in "Recommended Tools - apktool". The unpacking results in:

```shell
$ ls -alh
total 32
drwxr-xr-x 9 sven staff 306B Dec 5 16:29 .
drwxr-xr-x 5 sven staff 170B Dec 5 16:29 ..
-rw-r--r-- 1 sven staff 10K Dec 5 16:29 AndroidManifest.xml
-rw-r--r-- 1 sven staff 401B Dec 5 16:29 apktool.yml
drwxr-xr-x 6 sven staff 204B Dec 5 16:29 assets
drwxr-xr-x 3 sven staff 102B Dec 5 16:29 lib
drwxr-xr-x 4 sven staff 136B Dec 5 16:29 original
drwxr-xr-x 131 sven staff 4.3K Dec 5 16:29 res
drwxr-xr-x 9 sven staff 306B Dec 5 16:29 smali
```

#### The Android Manifest

The `AndroidManifest.xml` is the main source of information, including the package name, permissions, app components, etc.

Here's a non-exhaustive list of some information and the corresponding keywords that you can easily search for in the `AndroidManifest.xml` by inspecting the file or using `grep -i <keyword> AndroidManifest.xml`:

- **App permissions**: `permission` (see "Android Platform APIs")
- **Backup allowance**: `android:allowBackup` (see "Data Storage on Android")
- **App components**: `activity`, `service`, `provider`, `receiver` (see "Android Platform APIs" and "Data Storage on Android")