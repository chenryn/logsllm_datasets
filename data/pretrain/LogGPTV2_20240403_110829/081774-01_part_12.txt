172.16.45.13
[root@localhost ~]# ip route list table main
default via 172.16.45.1 dev eno16777736 proto static metric 100
172.16.45.0/24 dev eno16777736 proto kernel scope link src 172.16.45.13
172.16.45.0/24 dev eno16777736 proto kernel scope link src 172.16.45.13
metric 100
[root@localhost ~]# ip route list table default
[root@localhost ~]#
【示例4-11】分别输出了3张路由表中的路由条目，其中表default 中的路由条目为空，
此处不做讨论。由于计算机的IP地址为172.16.45.13，因此表local中的路由条目为来自广播
和目的地为本地接口IP的数据包路由。而表main中的路由条目，很明显是指向本地子网（子
网172.16.45.0/24）和指向默认网关的默认路由。
由于环境并不复杂，因此系统默认的规则中并没有决定哪些数据包应该使用具体的某个路
由表。了解Linux系统的路由表机制后，接下来我们就可以利用这些机制建立自己需要的路由
表和规则了。建立一个路由表和相应的规则如【示例4-12】所示。
【示例4-12】
#建立一个名为test1的路由表
96
第4章 路由管理
[root@localhost ~]# echo 100 test1 >> /etc/iproute2/rt_tables
#建立一个规则，规定所有来自192.168.19.0/24的数据包都使用路由表test1中的条目路由
[root@localhost ~]# ip rule add from 192.168.19.0/24 table test1
#列出规则
[root@localhost ~]# ip rule list
0: from all lookup local
32765: from 192.168.19.0/24 lookup test1
32766: from all lookup main
32767: from all lookup default
在【示例4-12】中，先使用编辑rt_tables的方式添加一个名为test1的路由表，然后添加
一条规则，规定所有源地址为192.168.19.0/24的包通过test1路由表路由。由于我们并没有向
路由表test1中添加任何路由条目，因此此时路由表test1还为空，如何添加将在下一小节中介
绍。
添加test1路由表时，使用了数字100作为保留值（保留值为table ID，test1相当于table ID
的别名，此值与优先级无关，优先级将自动分配），通常建议这个值小于253且不重复，具体
可以查看rt_tables文件中的说明。除了以上这种编辑文件的方法外，还可使用指定table ID的
方法添加路由表，如【示例4-13】所示。
【示例4-13】
[root@localhost ~]# ip rule add from 192.168.18.0/24 table 2 pref 1500 prohibit
以上示例将添加一个table ID为2的路由表，并指定其优先级为1500。
删除路由表与以上过程相反，首先需要删除相关的规则，然后编辑文件rt_tables，删除其
中的相关配置，如【示例4-14】所示。
【示例4-14】
#删除规则和rt_tables中的相关内容
[root@localhost ~]# ip rule del table test1
[root@localhost ~]# cat /etc/iproute2/rt_tables
#
# reserved values
……
#
#1 inr.ruhep
#验证结果
[root@localhost ~]# ip rule list
0: from all lookup local
32766: from all lookup main
32767: from all lookup default
系统重启后，规则将失效，如需继续生效可以将设置规则的相关语句写入/etc/rc.local中。
97
CentOS 7.5系统管理与运维实战
4.3.3 规则与路由管理
从前面几小节的内容中不难看出，Linux策略路由管理的两个核心分别是规则与路由表中
路由的管理。虽然之前已经介绍过路由管理的相关概念，但与之前的路由管理相比，此处将要
麻烦一些，因为在策略路由中还需要细化一些参数。
1. 规则
在策略路由中，规则如同一个筛选器，将数据包按预先的设置“送给”路由表，完成路由
过程。添加一条规则使用命令ip，格式如下：
Ip rule [add|del] SELECTOR ACTION
在以上格式中，“[add|del]”表示添加或删除一条规则，“SELECTOR”表示数据包选择
部分，“ACTION”表示执行的操作。其中“SELECTOR”可以选择数据包的多种选项，常见
选项如下所示：
 from：源地址。
 to：目的地址。
 tos：数据包的TOS（Type of Service）域，用于标明数据包的用途。
 fwmark：防火墙参数。
 dev：参与设备，具体包括两个选项iif和oif，分别表示接收和发送设置匹配。
 pref：指定优先级。
在以上选项中，无疑from和to是常用的选项。除以上选项外，还有一些其他选项，读者
可阅读相关文档了解或参考ip-rule的手册页。
与“SELECTOR”一样，“ACTION”执行的动作也有多种：
 table：指明使用的table ID或表名。
 nat：透明网关，同NAT相似。
 prohibit：丢弃包并返回“Communication is administratively prohibited”的错误消息。
 unreachable：丢弃包并返回“Network is unreachable”的错误消息。
 realms：指定数据包分类，此选项主要用于配合tc做流量整形。
在“ACTION”执行的动作中，table和nat是较常用的，prohibit和unreachable主要用来
禁止通信，因此使用较少。
在【示例4-15】中列举了一些常见的示例。
【示例4-15】
#以源地址作为路由依据
ip rule add from 192.168.19.0/24 table test1
ip rule add from 192.168.17.100/32 table test1
#以源地址和tos作为路由依据
ip rule add from 192.168.0.0/16 tos 0x10 table test1
98
第4章 路由管理
#以目标地址作为路由依据
ip route add to 192.168.100.100/32 table test1
ip route add to 192.168.101.0/24 table test1
#以防火墙标记为路由依据，需要防火墙使用选项set-mark标记
ip rule add fwmark 1 table 1
2. 路由管理
与之前介绍的使用route命令添加路由相比，策略路由的路由管理稍稍复杂一些，其格式
如下所示：
ip route add ipaddress via ipaddress1 table table_name
其中，ipaddress参数表示网络号，via选项指定的参数ipaddress1表示网关ip地址，即下
一跳地址，table_name表示路由表名。
一些比较常见的路由条目如【示例4-16】所示。
【示例4-16】
#添加到test1的默认路由
ip route add default via 192.168.11.1 table test1
#发往192.168.15.0/24网络的包下一跳地址是192.168.11.1
ip route add 192.168.15.0/24 via 192.168.11.1 table test1
4.3.4 策略路由应用实例
在前面几小节中，介绍了Linux系统的策略路由的运作机制，本小节将通过几个实例介绍
策略路由的应用。
在本小节的例子中，Linux主机连接了两个子网（192.168.1.0/24及192.168.2.0/24），拥有
两个出口（第一个是172.16.33.2，对端网关为172.16.33.1；另一个为172.16.34.2，对端网关为
172.16.34.1），如图4.8所示。
图4.8 策略路由拓扑
需要说明的是出口及对端网关地址应为网络供应商提供的公网 IP 地址，此处出于安全考
虑以私网地址代替，其配置过程仅需将IP地址等信息替换即可，其他并无不同之处。
99
CentOS 7.5系统管理与运维实战
1. 选择出口
如图4.8所示的网络结构，现有两个出口，其中互联网出口1为所有内部子网的默认出口，
出口2比出口1速度更快，但仅供内部网络中的VIP用户使用。假定有VIP用户的IP地址为
192.168.1.52和192.168.2.54，现需要配置这两个地址的流量，使用出口2以获得更快的速度。
（1）配置默认路由
根据以上信息先配置接口eno16777736，将IP地址、默认网关等信息一并设置，而出口2
仅正确设置 IP 地址及子网掩码即可，无须设置默认网关。关于这些设置，读者可自行参考第
3章中的相关内容，此处不再赘述。
（2）配置策略路由
在上一步配置中，已将所有子网的数据包的转发出口设置为出口1，现在需要配置VIP用
户的数据包从出口2进行转发，其配置方法如【示例4-17】所示。
【示例4-17】
#建立路由表T1
[root@localhost ~]# echo 200 T1 >> /etc/iproute2/rt_tables
#设置VIP用户的数据包，使用路由表T1路由
[root@localhost ~]# ip rule add from 192.168.1.52/32 table T1
[root@localhost ~]# ip rule add from 192.168.2.54/32 table T1
[root@localhost ~]# ip rule ls
0: from all lookup local
32764: from 192.168.2.54 lookup T1
32765: from 192.168.1.52 lookup T1
32766: from all lookup main
32767: from all lookup default
#为路由表T1添加出口2的默认路由
[root@localhost ~]# ip route add default via 172.16.34.1 table T1
[root@localhost ~]# ip route list table T1
default via 172.16.34.1 dev eno33554984
以上是整个配置过程，但以上配置在系统重启后会消失，因此需要添加规则，将添加路由
表T1默认路由的语句写入/etc/rc.local中。
2. 负载均衡
负载均衡的配置方法与选择出口的配置方法略有不同，因为负载均衡时需要考虑一个新的
问题，需要保证连接的持续性，即从互联网出口1进来的数据包返回时也从出口1返回；出口
2亦相同。负载均衡的配置方法如【示例4-18】所示。
【示例4-18】
#添加两个路由表table1和table2
[root@localhost ~]# echo 100 table1 >> /etc/iproute2/rt_tables
100
第4章 路由管理
[root@localhost ~]# echo 200 table2 >> /etc/iproute2/rt_tables
#分别添加返回路由
[root@localhost ~]# ip route add default via 172.16.33.1 dev eno16777736 src
172.16.33.2 table1
[root@localhost ~]# ip rule add from 172.16.33.2 table table1
[root@localhost ~]# ip route add default via 172.16.34.1 dev eno33554984 src
172.16.34.2 table2
[root@localhost ~]# ip rule add from 172.16.34.2 table table2
#设置负载均衡策略
[root@localhost ~]# ip route add default scope global nexthop via 172.16.33.2
dev eno16777736 weight 1 netxthop via 172.16.34.2 dev eno33554984 weight 1
在上面的示例中，weight用于指定出口的权重，此处都设置为1，表示平等对待，如果需
要区别对待可以修改此值。与之前的设置方法相同，如果需要设置在重启后仍然生效，可以将
规则和路由添加到文件/etc/rc.local中。
本小节仅讨论了策略路由如何实施，并没有包含诸如NAT等问题，关于路由器转发相关
内容可参考4.2节中的相关内容。
4.4
小结
路由是Linux系统中相当重要的内容，本章从实际应用出发主要介绍了Linux系统的路由
相关内容，通过实例介绍了传统路由的设置、数据包转发等内容。对于Linux上的策略路由问
题，剖析了Linux策略路由的运作机制，并通过实例介绍了策略路由的应用。
101
|----|------------------------|
|  0 |                        |
|  1 |                        |
|  2 |                        |
|  3 | 第 3 章                |
|  4 |                        |
|  5 |                        |
|  6 |                        |
|  7 |                        |
|  8 |                        |
|  9 |                        |
| 10 | 运维必备的网络管理技能 |