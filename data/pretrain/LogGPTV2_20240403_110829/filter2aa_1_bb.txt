    . For information about DOM XSS and some example payloads, see the PortSwigger article “DOM-Based XSS” at
     https://portswigger.net/web-security/cross-site-scripting/dom-based/
    .
    我们将在第7章更详细地讨论URL的组成部分。关于DOM XSS和一些示例载荷的信息，请参阅PortSwigger文章“DOM-Based XSS”（https://portswigger.net/web-security/cross-site-scripting/dom-based/）。
    Self-XSS
     Self-XSS attacks
    require victims to input a malicious payload themselves. To perform these, attackers must trick users into doing much more than simply viewing a page or browsing to a particular URL.
    自我XSS攻击需要受害者自己输入恶意载荷。为了执行这些攻击，攻击者必须欺骗用户做比仅仅查看页面或浏览到特定网址更多的事情。
    For example, let’s say that a field on a user’s dashboard is vulnerable to stored XSS. But since only the victim can see and edit the field, there is no way for an attacker to deliver the payload unless the attacker can somehow trick the victim into changing the value of the field into the XSS payload.
    例如，假设用户仪表板上的某个字段容易受到存储型 XSS 攻击。但由于只有受害者可以看到和编辑该字段，攻击者无法将有效负载传递给受害者，除非攻击者可以以某种方式诱骗受害者将字段的值更改为 XSS 有效负载。
    If you’ve ever seen social media posts or text messages telling you to paste a piece of code into your browser to “do something cool,” it was probably attack code aimed at tricking you into launching self-XSS against yourself. Attackers often embed a piece of malicious payload (usually via a shortened URL like
     bitly.com
    so victims won’t suspect anything) into a complicated-looking piece of code and use social media to fool unsuspecting users into attacking themselves.
    如果你曾经看到过社交媒体帖子或短信告诉你把一段代码粘贴到你的浏览器里“做些酷炫的事情”，那就很可能是攻击者发送有意识欺骗你启动自我跨站脚本攻击的恶意代码。攻击者通常会将一个恶意载荷（通常是通过像bitly.com这样的短网址引入）嵌入一个看起来复杂的代码片段中，并利用社交媒体欺骗不怀疑的用户攻击自己。
    In bug bounties, self-XSS bugs are not usually accepted as valid submissions because they require social engineering. Bugs that require
     social engineering
    , or manipulation of the victims, are not usually accepted in bug bounty programs because they are not purely technical issues.
    在漏洞赏金中，自我 XSS 漏洞通常不被视为有效提交，因为它们需要社会工程学。需要社会工程学或操纵受害者的漏洞通常不会被接受在漏洞赏金计划中，因为它们不是纯技术问题。
    Prevention
    To prevent XSS, an application should implement two controls: robust input validation and contextual output escaping and encoding. Applications should never insert user-submitted data directly into an HTML document—including, for example, inside
    tags, HTML tag names, or attribute names. Instead, the server should validate that user-submitted input doesn’t contain dangerous characters that might influence the way browsers interpret the information on the page. For example, user input containing the string
     ""
    is a good indicator that the input contains an XSS payload. In this case, the server could block the request, or sanitize it by removing or escaping special characters before further processing.
    为预防XSS攻击，应用程序应实施两个控件：强大的输入验证和上下文输出转义和编码。应用程序不应将用户提交的数据直接插入HTML文档中，例如在标签、HTML标记名称或属性名称中。相反，服务器应验证用户提交的输入不包含可能影响浏览器解释页面信息的危险字符。例如，包含字符串""的用户输入是输入包含XSS有效载荷的好指标。在这种情况下，服务器可以阻止请求，或在进一步处理之前删除或转义特殊字符。
     Escaping
    refers to the practice of encoding special characters so that they are interpreted literally instead of as a special character by the programs or machines that process the characters. There are different ways of encoding a character. Applications will need to encode the user input based on where it will be embedded. If the user input is inserted into
    tags, it needs to be encoded in JavaScript format. The same goes for input inserted into HTML, XML, JSON, and CSS files.
    "转义是指将特殊字符进行编码，以便程序或机器可以将其解释为字面量，而非特殊字符的一种实践。编码字符有不同的方式。应用程序需要根据输入的嵌入位置对用户输入进行编码。如果用户输入插入到标记中，则需要以JavaScript格式进行编码。对于插入到HTML、XML、JSON和CSS文件中的输入，同样需要相应的编码。"
    In the context of our example, the application needs to encode special characters into a format used by HTML documents. For example, the left and right angle brackets can be encoded into HTML characters
     &lt
    and
     &gt
    . To prevent XSS, the application should escape characters that have special meaning in HTML, such as the
     &
    character, the angle brackets
    , single and double quotes, and the forward-slash character.
    在我们的例子中，应用程序需要将特殊字符编码为HTML文档使用的格式。例如，左右尖括号可以编码为HTML字符&lt和&gt。为了防止XSS，应用程序应该转义HTML中具有特殊含义的字符，如&字符、尖括号、单引号和双引号，以及斜杠字符。
    Escaping ensures that browsers won’t misinterpret these characters as code to execute. This is what most modern applications do to prevent XSS.
    The application should do this for every piece of user input that will be rendered or accessed by a user’s browser. Many modern JavaScript frameworks such as React, Angular 2+, and Vue.js automatically do this for you, so many XSS vulnerabilities can be prevented by choosing the right JavaScript framework to use.
    转义确保浏览器不会将这些字符误解为要执行的代码。这是大多数现代应用程序为防止XSS所做的工作。应用程序应该对每个将在用户浏览器中呈现或访问的用户输入执行此操作。许多现代JavaScript框架，如React，Angular 2+和Vue.js，会自动为您执行此操作，因此选择正确的JavaScript框架可以预防许多XSS漏洞。
    The prevention of DOM-based XSS requires a different approach. Since the malicious user input won’t pass through the server, sanitizing the data that enters and departs from the server won’t work. Instead, applications should avoid code that rewrites the HTML document based on user input, and the application should implement client-side input validation before it is inserted into the DOM.
    DOM-based XSS预防需要不同的方法。由于恶意用户输入不会通过服务器，因此对进出服务器的数据进行净化并不起作用。相反，应用程序应该避免基于用户输入重写HTML文档的代码，并且应该在插入到DOM之前实施客户端输入验证。
    You can also take measures to mitigate the impact of XSS flaws if they do happen. First, you can set the
     HttpOnly
    flag on sensitive cookies that your site uses. This prevents attackers from stealing those cookies via XSS. You should also implement the
     Content-Security-Policy
    HTTP response header. This header lets you restrict how resources such as JavaScript, CSS, or images load on your web pages. To prevent XSS, you can instruct the browser to execute only scripts from a list of sources. For more information about preventing XSS attacks, visit the OWASP XSS prevention cheat sheet,
     https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    .
    如果出现 XSS 漏洞，您也可以采取措施来减轻其影响。首先，您可以在网站使用的敏感 cookie 上设置 HttpOnly 标志。这将防止攻击者通过 XSS 窃取这些 cookie。您还应该实现 Content-Security-Policy HTTP 响应头。该头让您限制资源（如 JavaScript、CSS 或图像）在您的网页上的加载方式。为了防止 XSS，您可以指示浏览器仅执行来自一组源的脚本。有关防止 XSS 攻击的更多信息，请访问 OWASP XSS 防范小抄 https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html。
    Hunting for XSS
    Look for XSS in places where user input gets rendered on a page. The process will vary for the different types of XSS, but the central principle remains the same: check for reflected user input.
    在用户输入被呈现在页面上的地方寻找XSS。不同类型的XSS处理过程会有所不同，但核心原则保持不变：检查反射的用户输入。
    In this section, we’ll hunt for XSS in web applications. But it’s important to remember that XSS vulnerabilities can also arise outside normal web applications. You can hunt for XSS in applications that communicate via non-HTTP protocols such as SMTP, SNMP, and DNS. Sometimes commercial apps such as email apps and other desktop apps receive data from these protocols. If you are interested in these techniques, you can check out Offensive Security’s Advanced Web Attacks and Exploitation training:
     https://www.offensive-security.com/awae-oswe/
    .
    在本节中，我们将在Web应用程序中寻找XSS漏洞。但是请记住，XSS漏洞也可能出现在正常Web应用程序以外。您可以在通过非HTTP协议通信的应用程序中寻找XSS，例如SMTP，SNMP和DNS。有时商业应用程序，例如电子邮件应用程序和其他桌面应用程序，会从这些协议接收数据。如果您对这些技术感兴趣，可以查看Offensive Security的高级Web攻击和利用培训：https://www.offensive-security.com/awae-oswe/。
    Before you start hunting for any vulnerability, it’s good to have Burp Suite or your preferred proxy on standby. Make sure you’ve configured your proxy to work with your browser. You can find instructions on how to do that in
     Chapter 4
    .
    在开始搜寻漏洞之前，最好先准备好Burp Suite或你所喜欢的代理工具。确保你已经将代理工具配置好可以与你的浏览器一起使用。你可以在第四章中找到如何配置代理工具的说明。
    Step 1: Look for Input Opportunities
    First, look for opportunities to submit user input to the target site. If you’re attempting stored XSS, search for places where input gets stored by the server and later displayed to the user, including comment fields, user profiles, and blog posts. The types of user input that are most often reflected back to the user are forms, search boxes, and name and username fields in sign-ups.
    首先，寻找向目标网站提交用户输入的机会。如果你试图进行存储型 XSS 攻击，则需搜索服务器存储输入并稍后在评论字段、用户资料和博客文章中显示的位置。最常反映回用户的用户输入类型包括表单、搜索框以及注册时的姓名和用户名字段。
    Don’t limit yourself to text input fields, either. Sometimes drop-down menus or numeric fields can allow you to perform XSS, because even if you can’t enter your payload on your browser, your proxy might let you insert it directly into the request. To do that, you can turn on your proxy’s traffic interception and modify the request before forwarding it to the server. For example, say a user input field seems to accept only numeric values on the web page, such as the
     age
    parameter in this
     POST
    request:
    不要仅限于文本输入字段。有时下拉菜单或数值字段也可能允许你执行 XSS，因为即使你无法在浏览器上输入你的载荷，你的代理也可能让你直接将它插入请求中。为了做到这一点，你可以打开代理的流量拦截，并在将请求转发到服务器之前修改请求。例如，假设用户输入字段在网页上似乎只接受数字值，比如在这个 POST 请求中的年龄参数:
POST /edit_user_age
(Post request body)
age=20
    You can still attempt to submit an XSS payload by intercepting the request via a web proxy and changing the input value:
    你可以通过拦截请求并更改输入值来尝试提交 XSS 攻击载荷。
POST /edit_user_age
(Post request body)
age=
    In Burp, you can edit the request directly in the Proxy tab (
     Figure 6-6
    ).
    在Burp中，您可以直接通过代理选项卡编辑请求（图6-6）。
       Figure 6-6
      : Intercept the outgoing request to edit it before relaying it to the server.
      图6-6：在将请求中继到服务器之前拦截请求并进行编辑。
    After you’re done editing, click
     Forward
    to forward the request to the server (
     Figure 6-7
    ).
    编辑完成后，单击“转发”将请求转发给服务器（图6-7）。
       Figure 6-7
      : Change the URL post request parameter to your XSS payload.
      图6-7：将URL的POST请求参数更改为您的XSS有效载荷。
    If you’re hoping to find reflected and DOM XSS, look for user input in URL parameters, fragments, or pathnames that get displayed to the user. A good way to do this is to insert a custom string into each URL parameter and check whether it shows up in the returned page. Make this string specific enough that you’ll be sure your input caused it if you see it rendered.
    For example, I like to use the string
     "XSS_BY_VICKIE"
    . Insert your custom string into every user-input opportunity you can find. Then, when you view the page in the browser, search the page’s source code for it (you can access a page’s source code by right-clicking a page and selecting View Source) by using your browser’s page-search functionality (usually triggered by pressing
     CTRL
    -F). This should give you an idea of which user input fields appear in the resulting web page.
    如果你希望找到反射型和DOM型跨站脚本漏洞，就要寻找在 URL 参数、片段或路径名中被展示给用户的用户输入。一个好的方法是在每个URL参数中插入一个自定义字符串，检查它是否出现在返回的页面中。这个字符串应该是足够特定的，以便你能确信它是由你的输入引起的。例如，我喜欢使用字符串"XSS_BY_VICKIE"。把你的自定义字符串插入到尽可能多的用户输入机会中。然后，当你在浏览器中查看网页时，使用浏览器的页面搜索功能（通常是通过按下 CTRL-F 触发）在页面源代码中搜索它（你可以通过右键单击页面并选择查看源代码来访问页面的源代码），这应该可以让你知道哪些用户输入字段出现在生成的网页中。
    Step 2: Insert Payloads
    Once you’ve identified the user-input opportunities present in an application, you can start entering a test XSS payload at the discovered injection points. The simplest payload to test with is an alert box:
    一旦你发现了应用程序中存在的用户输入机会，就可以开始在发现的注入点输入测试的XSS负载。最简单的负载测试是一个提示框：
    If the attack succeeds, you should see a pop-up on the page with the text
     XSS by Vickie
    .
    如攻击成功，您将在页面上看到一个弹窗，上面显示“Vickie的XSS”。
    But this payload won’t work in typical web applications, save the most defenseless, because most websites nowadays implement some sort of XSS protection on their input fields. A simple payload like this one is more likely to work on IoT or embedded applications that don’t use the latest frameworks. If you are interested in IoT vulnerabilities, check out OWASP’s IoTGoat project at
     https://github.com/OWASP/IoTGoat/
    . As XSS defenses become more advanced, the XSS payloads that get around these defenses grow more complex too.
    但这种负载在典型的网络应用程序中无法工作，只能攻击最脆弱的网站，因为现在大多数网站都在它们的输入域中实现了一些XSS保护。像这样的简单负载更有可能在不使用最新框架的物联网或嵌入式应用程序中起作用。如果您对物联网漏洞感兴趣，请查看OWASP的IoTGoat项目，网址为https://github.com/OWASP/IoTGoat/。随着XSS防御变得更加先进，绕过这些防御的XSS负载也变得更加复杂。
    More Than a  Tag
    Inserting
    tags into victim web pages isn’t the only way to get your scripts executed in victim browsers. There are a few other tricks. First, you can change the values of attributes in HTML tags. Some HTML attributes allow you to specify a script to run if certain conditions are met. For example, the
     onload
    event attribute runs a specific script after the HTML element has loaded:
    将标签插入受害者网页并不是让你的脚本在受害者浏览器中执行的唯一方法。还有一些其他的技巧。首先，你可以改变HTML标签中属性的值。一些HTML属性允许你在满足某些条件时指定要运行的脚本。例如，onload事件属性在HTML元素加载后运行一个特定的脚本：
    Similarly, the
     onclick
    event attribute specifies the script to be executed when the element is clicked, and
     onerror
    specifies the script to run in case an error occurs loading the element. If you can insert code into these attributes, or even add a new event attribute into an HTML tag, you can create an XSS.
    类似地，onclick事件属性指定在单击元素时要执行的脚本，而onerror指定在加载元素时发生错误时要运行的脚本。如果您可以在这些属性中插入代码，甚至在HTML标记中添加新的事件属性，您就可以创建XSS攻击。
    Another way you can achieve XSS is through special URL schemes, like
     javascript:
    and
     data:
    . The
     javascript:
    URL scheme allows you to execute JavaScript code specified in the URL. For example, entering this URL will cause an alert box with the text
     XSS by Vickie
    to appear:
    你可以通过特殊的URL方案（如javascript：和data：）来实现XSS攻击。javascript：URL方案允许你执行在URL中指定的JavaScript代码。例如，输入此URL将导致一个显示文本“XSS by Vickie”的警示框出现。
javascript:alert('XSS by Vickie')
    This means that if you make the user load a
     javascript:
    URL, you can achieve XSS as well. Data URLs, those that use the
     data:
    scheme, allow you to embed small files in a URL. You can use these to embed JavaScript code into URLs too:
    这意味着，如果你让用户加载一个javascript: URL，你也可以实现XSS。数据URL，那些使用data: 方案的URL，允许你在URL中嵌入小文件。你也可以使用这些来在URL中嵌入JavaScript代码。
data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTIGJ5IFZpY2tpZScpPC9zY3JpcHQ+"
    This URL will also generate an alert box
     ,
    because the included data in the data URL is the base64-encoded version of the following script:
    此链接也将生成警示框，因为数据 URL 中包含的数据是以下脚本的 Base64 编码版本：
    Documents contained within
     data:
    URLs do not need to be base64 encoded. For example, you can embed the JavaScript directly in the URL as follows, but base64 encoding can often help you bypass XSS filters:
    数据URL中包含的文档无需进行base64编码。例如，您可以将JavaScript直接嵌入URL中，但base64编码通常可以帮助您绕过XSS过滤器。
data:text/html,
    You can utilize these URLs to trigger XSS when a site allows URL input from users. A site might allow the user to load an image by using a URL and use it as their profile picture, like this:
    当一个网站允许用户输入URL时，你可以利用这些URL触发XSS攻击。一个网站可能允许用户使用URL加载图片并将其作为他们的个人资料图片，如下所示：
https://example.com/upload_profile_pic?url=IMAGE_URL
    The application will then render a preview on the web page by inserting the URL into an
    tag. If you insert a JavaScript or data URL, you can trick the victim’s browser into loading your JavaScript code:
    应用程序将通过将URL插入到标记中，在Web页面上呈现预览。如果您插入JavaScript或数据URL，则可以欺骗受害者的浏览器加载您的JavaScript代码：
    There are many more ways to execute JavaScript code to bypass XSS protection. You can find more example payloads on PortSwigger at
     https://portswigger.net/web-security/cross-site-scripting/cheat-sheet/
    . Different browsers also support different tags and event handlers, so you should always test by using multiple browsers when hunting for XSS.
    绕过XSS保护的执行JavaScript代码的方法还有很多种。您可以在PortSwigger上找到更多示例负载，网址为https://portswigger.net/web-security/cross-site-scripting/cheat-sheet/。不同的浏览器也支持不同的标签和事件处理程序，因此在寻找XSS时，您应该始终使用多个浏览器进行测试。
    Closing Out HTML Tags
    When inserting an XSS payload, you’ll often have to close out a previous HTML tag by including its closing angle bracket. This is necessary when you’re placing your user input inside one HTML element but want to run JavaScript using a different HTML element. You have to complete the previous tag before you can start a new one to avoid causing a syntax error. Otherwise, the browser won’t interpret your payload correctly. For example, if you’re inserting input into an
    tag, you need to close out the
    tag before you can start a
    tag. Here is the original
    tag with a placeholder for user input:
    在插入 XSS 载荷时，通常必须通过包含其闭合角括号来关闭先前的 HTML 标签。当您将用户输入放入一个 HTML 元素中但希望使用另一个 HTML 元素运行 JavaScript 时，这是必要的。在开始新标签之前，必须完成先前的标签，以避免导致语法错误。否则，浏览器不会正确解释您的有效载荷。例如，如果您将输入插入到  标签中，则需要在开始  标签之前关闭  标签。以下是具有用户输入占位符的原始  标签：
    To close out the tag, your payload has to include the ending of an
    tag before the JavaScript. The payload might look like this:
    为了关闭标签，您的负载必须包括JavaScript之前的标签的结尾。有效负载可能如下所示：
"/>
    When injected into the
    tag, the resulting HTML will look like this (with the injected portion in bold):
    当它被注入到标签中时，生成的HTML将会看起来像这样（被注入的部分是粗体）：