toGen rewrites the script tag by removing inline contents and
adding a src attribute pointing to the URL.
• Inline event handlers embedded in tag attributes (e.g., ). The process is similar to these em-
bedded in script nodes. The difference is that in addition to the
original inline scripts, CSPAutoGen adds a function wrapping the
handler, and further adds this function through addEventListener
API when onDOMContentLoaded event is ﬁred.
• JavaScript URL scheme (e.g., ). Again, other steps are similar to these embedded in
script nodes. The difference is that CSPAutoGen adds a function
wrapping the original scripts in the JavaScript URL scheme, and
registers an onClick event for the original tag.
Dynamic Scripts (Eval/Eval-like Function Execution). To pre-
vent users from DOM-based XSS, CSPAutoGen does not set the
keyword “unsafe-eval” in CSP header. That is, Function and
eval cannot be called to evaluate a string as JavaScript code, and
functions setTimeout and setInterval can only be called
when the ﬁrst argument is a callable [1]. We refer to these four
functions as eval and eval-like functions. Though unsafe, these
functions are commonly used in modern websites, and it incurs se-
rious compatibility issues if directly disabling them.
To execute dynamic scripts, we need to answer two questions:
(1) which strings in eval or eval-like functions are allowed to
execute, and (2) how to execute them without using eval or eval-
like functions. The answer for the ﬁrst question is simple—parsing
the string into a gAST, and matching the gAST and values against
templates. The details have already been discussed in the previous
subsection. Then, let us answer the second question. To execute
such strings, we propose a symbolic template mechanism to syn-
chronously execute these allowed strings as JavaScript codes when
eval or eval-like functions are disabled.
A symbolic template is a function generated from corresponding
gAST by converting the data nodes in gAST to symbolic variables.
Speciﬁcally, to generate a symbolic template, CSPAutoGen ﬁrst
= googletag.defineSlot(’/866347/CNN/world/leaf’,
’ad_ns_btf_01’).
addService(googletag.pubads()).
= googletag.defineSlot(CSP_String,
CSP_Array, CSP_String).
[[1,2],[150,90],[300,50],[300,100]],
setTargeting(’pos’,[’ns_btf_01’]);");
1 //Target Script
2 eval("AMPTManager.pageSlotsObj[’ad_ns_btf_01’]
3
4
5
6
7
8 //gAST for the Target Script
9 AMPTManager.pageSlotsObj[CSP_String]
10
11
12
13
14 //Symbolic Template for the gAST
15 symTemplates[hash] = function(
16
17
18
19
20
21
22
setTargeting(CSP_S5,
resolveASTNodeVal(CSP_A6,hash));};
CSP_S1,CSP_S2,CSP_A3,CSP_S4,CSP_S5,CSP_A6){
resolveASTNodeVal(CSP_A3,hash),CSP_S4).
AMPTManager.pageSlotsObj[CSP_S1] =
googletag.defineSlot(CSP_S2,
addService(googletag.pubads()).
setTargeting(CSP_String, CSP_Array);
addService(googletag.pubads()).
Code 4: Example of dynamic script. During runtime, when the target
script is called (Line 2–7), our client-side JavaScript library will capture
its parameter and match it against the templates.
If match, the library
will instantiate and call the corresponding symbolic template (Line 15–22),
which is a JavaScript function corresponding to a gAST (Line 9–13). In
the symbolic template, function resolveASTNodeVal(...) will resolve each
complex data node (i.e., array and object) with the corresponding node’s
AST subtree during execution.
creates a function with all parameters corresponding to each gen-
eralized data node. Then it substitutes all the atomic data nodes in
gAST with symbolic variables, and all complex data nodes with the
results of runtime instantiation function (resolveAST N odeV al)
calls. After that, it converts the gAST back to a script with sym-
bols and sets it as the function’s body. Code 4 shows an example of
the symbolic template (Line 15–22) and corresponding gAST (Line
9–13) for the example at Line 2–7. During training phase, CSPAu-
toGen generates one symbolic template for each gAST, ships them
with all other templates to the client. In runtime phase, these sym-
bolic variables will be instantiated via parameters generated from
the arguments of the eval or eval-like functions.
Next, we will discuss how to instantiate and execute a sym-
In the rewriting phase, CSPAutoGen rewrites an
bolic template.
incoming webpage by inserting CSPAutoGen client-side library as
a trusted external script in the beginning of the rewritten webpage.
Then, in the runtime phase, the client-side library overwrites the
original eval or eval-like functions deﬁned by the browser, i.e.,
eval or eval-like functions are redeﬁned as a normal function
in CSPAutoGen . Such overwritten eval or eval-like functions
are allowed by CSP. These overwritten functions serve as three pur-
poses: (1) checking whether the string to execute matches one tem-
plate, (2) extracting data node values from the argument string, and
(3) instantiating the symbolic template. Code 5 shows the pseu-
docode of overwritten eval function, which we will use as exam-
ple to discuss. All the other eval-like functions can be handled in
a similar way.
First, in the beginning of the overwritten eval function, the
argument string will be matched against the domain’s templates.
If match, the overwritten function ﬁnds the corresponding sym-
bolic template and continues the following two steps; otherwise,
the string will not be executed (Line 3-8).
Second, the overwritten eval function parses the string into an
AST, from which it will extract data nodes and store them into an
array as arguments for symbolic template (Line 10).
If the data
node is atomic type (i.e., boolean, number and string), the actual
value of each data node (e.g., 200 and “a string”) is extracted; if the
1 window.eval = function(scriptStr){
2
3
4
5
6
7
8
9
10
11
//match target string against templates.
var template = findTemplate(scriptStr);
if (!template) return ;
//if match, find the symbolic template.
var hash = getTemplateHash(template);
var symTemplate = symTemplates[hash];
if (!symTemplate) return ;
//extract args & run symbolic template.
var args = extractArgs(genAST(scriptStr));
symTemplate.apply(this, args); };
Code 5: Pseudocode of overwritten eval function.
In the overwritten
eval function, the function ﬁrst matches the target script against templates
(Line 3–4). Only when a match is found, will the overwritten eval function
extract the arguments (i.e., the data nodes) from the target script’s AST node
(Line 10) and then instantiate the corresponding symbolic templates with
the arguments (Line 11). Symbolic templates are determined based on their
gAST’s tree structure hash (Line 6-8).
data node is complex type (i.e., array and object), the data node’s
subtree will be extracted and stored, because the value should be
resolved during instantiating the symbolic template to preserve the
order of expressions that might appear on complex data node. Af-
ter that, the extracted arguments array will be fed into symbolic
template to evaluate the string (Line 11).
Third, in symbolic template, all the array and object node ar-
guments will be “wrapped” by function resolveAST N odeV al,
which accepts AST data node and parses it into JavaScript object
(shown in Algorithm 2). In resolveAST N odeV al , for a boolean,
number or string node, CSPAutoGen creates a new Boolean, Num-
ber or String object (Line 2-4 of Algorithm 2). For an array (Line
5–10 of Algorithm 2) or object node (Line 11–17 of Algorithm 2),
CSPAutoGen iterates each member in the array or object and re-
cursively resolves each member. For an Expression node, CSPAu-
toGen ﬁnds the symbolic template corresponding to the expres-
sion and then invokes the symbolic template with extracted argu-
ments. Note that such template must exist if the script passes tem-
plate matching, and these expression symbolic templates are de-
ﬁned in their parent symbolic templates (i.e., the function body
where resolveAST N odeV al is called) to preserve scope chain.
(Line 20–23 of Algorithm 2). Identiﬁer node is handled similarly:
for each variable that might appear in complex nodes of a tem-
plate, a one-line function is deﬁned in the corresponding symbolic
template to return the variable’s value, and resolveAST N odeV al
will call that function to resolve identiﬁer node value (Line 18–19).
To preserve the scripts’ behavior, several design details need to
be further discussed.
• Scope Chain.
JavaScript functions are running in the scope
chain where the functions are deﬁned [15]. In order to preserve
original scripts’ scope chain, we deﬁne overwritten eval and
eval-like functions on the global window object, where their
original counterparts are deﬁned. The only exception is eval,
because eval can be used as both a function and a keyword.
If eval is used as a function (e.g., window.eval(...) or var e
= eval; e(...) ), our overwritten eval still preserves its scope
chain (i.e., running on global window object). Otherwise, if
eval is used as a keyword (i.e., eval(...)), the argument string
of eval is running in the current scope chain. To preserve the
scope chain for the keyword eval, during symbolic template
generation, CSPAutoGen searches the keyword eval, rewrites
the script by inserting the symbolic template corresponding to
the eval argument before the keyword eval, and then changes
the keyword eval invocation to the symbolic template function
call. Note that if eval is used as a keyword, it cannot be obfus-
cated, which means that we can ﬁnd all of such usages.
String: callerHash
end for
return ret
case Object:
ret[keys[i]] = resolveAST N odeV al(vals[i], callerHash)
ret.push(resolveAST N odeV al(item, callerHash))
ret = new Array()
for item in extractV als(node) do
case Boolean: return Boolean(getN odeV alue(node))
case N umber: return N umber(getN odeV alue(node))
case String: return String(getN odeV alue(node))
case Array:
Algorithm 2 The Algorithm of Instantiating Symbolic Node
Input: AST Node: node
Input:
JavaScriptObject resolveASTNodeVal(node, callerHash):
1: switch (getN odeClassN ame(node))
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24: end switch
ret = new Object()
keys, vals = extractKeysV als(node)
for i in keys do
return varResolveM ethods[callerHash][node.name]()
end for
return ret
case Identif ier:
default: (i.e., Expression)
hash = getT emplateHash(getN odeT emplate(node))
args = extractArgs(node)
return exprSymT emp[callerHash][hash].apply(this, args)
• Argument Instantiation Order. For array and object data nodes,
their elements might contain expressions and identiﬁers, whose
values are not deﬁnitive until being resolved. Therefore, the ar-
gument instantiation order matters. CSPAutoGen adopts runtime
instantiation rather than pre-instantiation for array and object
data nodes, ensuring the instantiation sequence not changed.
Runtime-included Inline Script. Runtime-included inline scripts
are generated from other scripts at client side. Those scripts are
composed of two categories: asynchronous and synchronous.
Asynchronous runtime-included inline scripts can be imported in
three ways: (1) adding/changing a script tag with inline script, (2)
adding/changing an inline event handler, and (3) adding/changing
an attribute with JavaScript URL scheme.
To allow such inline scripts, during page rewriting, the client-
side JavaScript library of CSPAutoGen monitors DOM tree changes
by a MutationObserver instance and then processes runtime-included
scripts. Let us use the creation of a script tag with inline scripts
in runtime as an example. If the JavaScript library detects added
or modiﬁed inline scripts, the library tries to match them against
the templates of the domain. If no match, the library does noth-
ing as CSP has already disabled the scripts; if match, the library
sends these scripts to the CSPAutoGen JavaScript server. At the
server, CSPAutoGen will match the scripts again.
If match, the
server stores the scripts, and returns corresponding URLs (part of
the domain’s CSP trusted host) to the library. We check scripts at
both client and server sides for both efﬁciency and security: only
matched scripts will be sent to server by our client-side library
and the server can detect and reject those malicious scripts sent
by attackers to bypass our system. After receiving a script’s URL,
CSPAutoGen changes the script tag by setting the src attribute as
the received URL. The whole process is working asynchronously
to minimize the overhead. For the other two categories, i.e., inline
event handlers and inline JavaScript URL scheme, the entire pro-
cess only differs after CSPAutoGen receives the script’s URL from
the CSPAutoGen JavaScript server. The details will be the same as
processing pre-included inline event handlers, thus being skipped.
Synchronous, runtime-included, inline scripts are executed im-
mediately, such as these loaded through the document.write API.
For such scripts, CSPAutoGen parses the HTML code, which is
the ﬁrst parameter of document.write, through an innerHTML at-
tribute, extracts scripts from script tags, matches the script with
gAST, and executes the script through symbolic templates. The
matching and execution are exactly the same as eval or eval-like
functions, and will be skipped here.
External Scripts. External scripts are imported through the src
attribute of script tag (e.g., ). CSPAu-
toGen handles these scripts by specifying the allowed hosts in CSP’s
script-src directive. These allowed hosts, generated by the
host whitelist generator in the training phase, are part of the tem-
plates. During the rewriting phase, CSPAutoGen fetches the al-
lowed script host list from the template database and adds them to
the CSP. Note that as speciﬁed by CSP, external scripts can be im-
ported during runtime, and runtime-included external scripts have
to be part of the allowed host list. Therefore, CSPAutoGen’s client-
side JavaScript library does not need to take additional actions for
runtime-included external scripts.
4.3 Subsidiary Components
We brieﬂy introduce three CSPAutoGen’s subsidiary components
here. They are not indispensable, but can either improve template
robustness or alleviate deployment burden.
Visual Template Portal. Although CSPAutoGen can generate tem-
plates without any human interventions, we have designed an inter-
face, visual template portal, for template providers or website de-
velopers to generate templates with higher robustness and accuracy.
Speciﬁcally, one—the template provider or website developer—
can modify gASTs, the associated type information and template
patches, discussed in the following, for any domain. To facilitate
this process, visual template portal will show each template as well
as those associated training scripts visually so user can improve