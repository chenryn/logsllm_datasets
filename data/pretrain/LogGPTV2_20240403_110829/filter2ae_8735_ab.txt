**注** ：记录实时更新，数据无加密
    HKLM\SYSTEM\CurrentControlSet\Services\bam\UserSettings\{SID}
记录包含了程序路径和上次执行日期和时间，其中执行日期键值类型为`FILETIME(64bit little Endian)`
执行时间提取：以`winrar`为例子
把`filetime`转化为`datetime`
    from __future__ import division
    import struct
    import sys
    from binascii import unhexlify
    from datetime import datetime, timedelta
    nt_timestamp = struct.unpack("
> win10之后特有，RecentApps包含了系统上已访问的多个应用程序和文件的引用。除了应用程序和文件名之外，RecentApps还提供了应用程序的路径，启动计数，文件的完整路径以及上次访问文件的时间。
[参考文章](https://df-stream.com/2017/10/recentapps/)
注册表位置为：  
**注** ：记录实时更新，数据无加密
    HKCU\Software\Microsoft\Windows\Current Version\Search\RecentApps
`RecentApps`键的下面是一系列由GUID命名的子项，在RecentApps下的每个`GUID`子项都对应一个应用程序。一些GUID子项也具有其他子项，它们与应用程序访问的特定文件相对应。
**注**
：`LastAccessedTime`是采用64位的`FILETIME`格式，转化为`datetime`也比较简单，用系统自带的`w32tm.exe`就行
    w32tm.exe /ntte 131781889970180000
    output: 152525 08:03:17.0180000 - 2018/8/8 16:03:17
或者用powershell
    powershell -c "[datetime]::FromFileTime(0x1d42eee43808fa0)"
    output: 2018年8月8日 16:03:17
清除方法：删除对应的注册表键值
## 从文件中获取
### Prefetch
> Prefetch是预读取文件夹，用来存放系统已访问过的文件的预读信息，扩展名为PF。之所以自动创建Prefetch文件夹，是为了加快系统启动的进程。
查看该功能是否开启：
    reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters" /v EnablePrefetcher
键值代表的含义
    0 = Disabled
    1 = Application launch prefetching enabled
    2 = Boot prefetching enabled
    3 = Applaunch and Boot enabled (Optimal and Default)
位置为：
**注** ：实时更新，数据加密
    C:\Windows\Prefetch
解析工具:
参数:
    PECmd.exe -f "C:\Temp\CALC.EXE-3FBEF7FD.pf"
    PECmd.exe -f "C:\Temp\CALC.EXE-3FBEF7FD.pf" --json "D:\jsonOutput" --jsonpretty
    PECmd.exe -d "C:\Temp" -k "system32, fonts"
    PECmd.exe -d "C:\Temp" --csv "c:\temp" --json c:\temp\json
    PECmd.exe -d "C:\Windows\Prefetch"
PS：按`csv`导出的有两个文件：`"time_prefix".PECmd_Output.csv`和`"time_prefix".PECmd_Output_Timeline.csv`，前者保存了详情信息，后者只保存了运行时间和可执行程序的名称
`"time_prefix".PECmd_Output_Timeline.csv`的
`"time_prefix".PECmd_Output.csv`
清除方法：根据`PECmd`导出的结果删除对应的pf文件即可
### JumpLists
> 记录用户最近使用的文档和应用程序，方便用户快速跳转到指定文件
位置：
    %APPDATA%\Microsoft\Windows\Recent
查询：直接列出文件(夹)即可
    dir %APPDATA%\Microsoft\Windows\Recent
清除方法：清除`%APPDATA%\Microsoft\Windows\Recent`路径下的文件即可
### Amcache / RecentFileCache.bcf
> Windows中的使用这两个文件来跟踪具有不同可执行文件的应用程序兼容性问题，它可用于确定可执行文件首次运行的时间和最后修改时间。
`win7`、`windows server 2008R2`等系统保存位置：
> 只包含了程序的创建时间、上次修改时间、上次访问时间和文件名
    C:\Windows\AppCompat\Programs\RecentFileCache.bcf
`win8`、`win10`、`windows server 2012`等系统保存位置：
> 包含了文件大小、版本、sha1、二进制文件类型等等信息
**注** ：Win7系统安装`KB2952664`后，也会支持Amcache.hve
    C:\Windows\AppCompat\Programs\Amcache.hve
`RecentFileCache.bcf`解析工具
`c#`版：
用法实例：
    RecentFileCacheParser.exe -f "C:\Windows\AppCompat\Programs\RecentFileCache.bcf" --csv "c:\temp"
    RecentFileCacheParser.exe -f "C:\Windows\AppCompat\Programs\RecentFileCache.bcf" --json "D:\jsonOutput" --jsonpretty
结果
`python`版：
用法
    rfcparse.py -f C:\Windows\AppCompat\Programs\RecentFileCache.bcf
`Amcache.hve`解析工具
`c#`版: 
`python`版: 
`powershell`版: 
用法示例：
    AmcacheParser.exe -f "C:\Windows\AppCompat\Programs\Amcache.hve" --csv C:\temp
    AmcacheParser.exe -f "C:\Windows\AppCompat\Programs\Amcache.hve" -i on --csv C:\temp
    AmcacheParser.exe -f "C:\Windows\AppCompat\Programs\Amcache.hve" -w "c:\temp\whitelist.txt" --csv C:\temp
如果我们直接执行的话，会提示："正由另一进程使用，因此该进程无法访问此文件"
解决方法是把`Amcache.hve`复制到其它目录，我们可以使用`shadow copy`把`Amcache.hve`复制到当前目录，然后再执行就可以了
结果
清除方法可以参考三好学生师傅的这篇文章：[链接](https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-RecentFileCache.bcf%E5%92%8CAmcache.hve%E5%8D%95%E6%9D%A1%E8%AE%B0%E5%BD%95%E7%9A%84%E6%B8%85%E9%99%A4/)
### SRUM (System Resource Usage Monitor)
> Technology that monitors desktop application programs,services, windows apps
> and network connections
[参考文章](\[https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1492184583.pdf\]\(https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1492184583.pdf)
适用于`win8`及以上系统，数据加密，实时记录
可以使用python解析：
用法实例：
    srum_dump2.exe --SRUM_INFILE c:\Windows\system32\sru\SRUDB.dat
    python srum_dump2.py --SRUM_INFILE c:\Windows\system32\sru\SRUDB.dat
清除方法：待补充
### win10时间轴
> `Windows Timeline`是Windows10在1803版中引入的一个新特性
用户可以使用`Win` \+
`Tab`可以对其进行访问，时间轴就像浏览器的历史记录一样，它记录了包含您访问过的网站，还包含您编辑的文档，您玩过的游戏，您查看或创建的图像等，其保存的记录在`ActivitiesCache.db`之中
参考文章：
`ActivitiesCache.db`位置在
**注** ：无加密，数据实时更新
    C:\Users\\AppData\Local\ConnectedDevicesPlatform\\ActivitiesCache.db
本质是`sqlite3`数据库文件，它包含的表如下
其中最重要的一个表是`Activity`，`Activity`表包含的字段有`AppId`（包含应用程序的路径），开始时间，结束时间等等
清除方法：删掉`sqlite3`数据库文件中指定记录即可
## other
### 计划任务
计划任务往往是一个值得关注的点也是一个容易忽略的点。站在攻击的角度来讲，计划任务可以持久化后门、执行指定恶意程序等等；站在防御、取证的角度来讲，计划任务执行之后，系统是不会自动删除的（重启或者注销也是不会删除的），这就可能导致入侵者会忽略把计划任务清除，这就有利于我们的取证
列出所有任务
    cmd：
    schtasks.exe
    powershell：
    Get-ScheduledTask
根据文件夹列出所有任务  
powershell:
    Get-ScheduledTask -TaskPath "\"
根据任务名查看任务的详情信息
    schtasks.exe /query /v /tn test /fo list
清除方法：删除指定的计划任务即可：`schtasks.exe /delete /tn Task_name /F`
## 总结
站在攻击者的角度来说，获取系统中的文件执行记录有利于我们信息收集、清理系统中的文件执行记录能进一步防止暴露自己
站在防御、取证的角度来说，定期清理系统中的文件执行记录能防止一些敏感信息泄露，但是这些信息能够被伪造和删除的所以不能盲目相信
## Reference