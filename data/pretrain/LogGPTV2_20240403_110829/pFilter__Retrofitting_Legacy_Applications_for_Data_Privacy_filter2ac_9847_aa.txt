title:pFilter: Retrofitting Legacy Applications for Data Privacy
author:Manish Shukla and
Kumar Vidhani and
Gangadhara Reddy Sirigireddy and
Vijayanand Banahatti and
Sachin Lodha
Poster: pFilter – Retrofitting Legacy Applications for Data
Privacy
Manish Shukla, Kumar Vidhani, Gangadhara Sirigireddy, Vijayanand Banahatti, Sachin Lodha
{mani.shukla, kumar.vidhani, gangadhara.sirigireddy, vijayanand.banahatti, sachin.lodha}@tcs.com
TCS Research Lab
ABSTRACT
Enterprise needs to process customer data for providing tailored
services to them, however, the data often includes sensitive and
personally identifiable information. This leads to a difficult situation
wherein the enterprise has to balance the necessity to process the
sensitive data with the requirement to safeguard its privacy. The
problem is more prominent in legacy applications with almost no
privacy controls in place. A well-studied technique to retrofit legacy
application is to mask sensitive content before it is rendered on the
screen using path based methods. In this work we show the gap
in the existing state of art and describe a dynamic system which
utilizes a context to perform locality based searching and masking
of sensitive content.
CCS CONCEPTS
• Information systems → Enterprise applications; • Security
and privacy → Data anonymization and sanitization.
KEYWORDS
legacy application; data privacy; context based masking
ACM Reference Format:
Manish Shukla, Kumar Vidhani, Gangadhara Sirigireddy, Vijayanand Bana-
hatti, Sachin Lodha. 2019. Poster: pFilter – Retrofitting Legacy Applications
for Data Privacy. In 2019 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’19), November 11–15, 2019, London, United Kingdom.
ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3319535.3363259
1 MOTIVATION & RELATED WORK
To remain competitive, enterprise requires to process customer
specific sensitive data, while adhering to privacy regulations and
customer expectations [1, 6]. More than often, balancing the need
to process customer data with the requirement to safeguard its
privacy is a difficult task for the enterprise [4]. The problem is more
severe in case of legacy web applications dealing with sensitive
data as they were designed with few or in some cases no privacy
controls [2, 5]. Further, regulations like General Data Protection
Regulation (GDPR) [10] impose obligations on enterprises for data
anonymization, breach notification, trans-border data transfers, and
data subject consent. Failure of enterprise to comply with the data
privacy practices can lead to non-compliance cost [10], fraudulent
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6747-9/19/11.
https://doi.org/10.1145/3319535.3363259
activities [7], damage to reputation, and loss of customer base. In
this work we consider the problem of data anonymization.
Large web applications usually consist of a number of complex
and interacting components such as web servers, database servers
and data ingestion and analytics modules. Also, different compo-
nents of the application often use multiple third-party libraries.
This leads to uneven scattering of privacy and security critical code
in different parts of the application [9]. Existing security controls
like firewalls, anti-virus software and data leakage prevention solu-
tions provide good protection at the network and operating system
layer. However, they are not capable of protecting sensitive data at
application level. This is largely due to purpose dependent usage
of the sensitive data in the application business logic.
Previous work in retrofitting legacy web application for accom-
modating data privacy consists of rewriting HTTP request, database
query/response, modifying application code and database itself.
However, they have their own inherent issues like corrupting appli-
cation logic if database query/response is modified [4], considerable
investment of money and time if code is rewritten [3] and loss of
utility in general [8]. In their work Goldsteen et al [4] have presen-
ted a less intrusive method of sensitive content hiding by modifying
the application response. The main advantage of their approach
is that it does not require any changes in the source code of the
application, and yet, it maintains the look-and-feel of the appli-
cation. They have also differentiated between regular expression
based data masking rule and context based rules using XPath [11].
Wherein, a context refers to any visible static text on a web-page
which identifies the purpose of the actual values on the page, for
example, a context-based rule would be to mask all labeled fields in
which the label is ‘Location ZIP’ (Figure 1).
However, there are two main shortcomings in the proposed met-
hod of [4]. First, they have used the context information only for
rule creation process and not while masking the sensitive data. This
can cause a problem for XPath based method if the application
supports AJAX [11], as the structure of the web-page can change
dynamically. Secondly, in an application the Document Object Mo-
del (DOM) [11] of a web-page also depends on the business logic,
and hence, can have slightly different DOM structures for different
control flows. In comparison, a regular expression based method is
least robust as it tends to mask anything which matches with its pat-
tern. Authors in [4] tried to solve the AJAX issue by comparing the
DOM tree versions before and after modification. However, their
method requires overriding of native AJAX functions, and also, it
is compute intensive and ambiguous for simultaneous modification
of a large DOM tree.
In this work we adapt the architecture of [4] and enhance it with
context based masking technique called fuzzy pruning. Our pro-
posed solution, called pFilter, can distinguish between two similar
PosterCCS ’19, November 11–15, 2019, London, United Kingdom2573looking fields by localizing the search around context, and hence,
can perform conditional data masking. For example, pFilter masks
a credit card’s expiration date but displays the expense date. The
locality based search makes pFilter robust with respect to any global
structural change due to dynamic content. Also, as compared with
XPath, the fuzzy pruning algorithm has near similar performance
characteristic as sensitive content is searched only in the locality
of the context field. Additionally, our proposed method is directly
applicable to any document which can be represented as a tree, for
example, JSON [11] content type.
Figure 1: Sample screen from the test application.
2 METHODOLOGY
Our objective is to develop a data privacy layer that integrates
seamlessly with a legacy application with minimal configuration
changes. In this section we discuss the methodology used in pFilter.
Web Page as a Tree. All modern browsers convert a web docu-
ment written in HTML or equivalent markup language into a DOM
tree wherein each node of the tree, along with its attributes, repre-
sents a part of the document. More formally a web document (D)
can be defined as a labelled ordered rooted tree, that is, T = (V , E, L),
where, V is the set of nodes, with a special node r ∈ V called root.
E ⊂ V × V is the set of edges between any two nodes u and v.
L : V → S is a label function which maps a node in V to a string S.
If (u, v) ∈ E, it implies that there is an edge between u and v where
u is the parent of v. All the nodes except the root node (n ∈ V\{r})
has exactly one parent. Children of a given node u is the set of nodes
Cu = {v| (u, v) ∈ E}. Two nodes y and z are said to be siblings if
they have a common parent node x, such that, {y, z} ⊆ Cx and
y ≺ z if y is on the left of z. Here, ≺ operator describes the relative
positioning of two nodes having an immediate common parent.
with respect to context in privacy regulation or in web application.
Let A = {α1, . . . , αm} be the set of attributes associated with the
application, for example, role, ip address and device type.
Search Policy. The web application is analyzed and the context is
identified with respect to the sensitive data fields. For each selected
context a regular expression (regex) is provided to validate the
presence of sensitive data while masking. For example, refer to
Figure 2a wherein the context is the  HTML tag containing the
static text ‘Account Number’ and the sensitive data is the actual value
of the ‘Account Number’ with regular expression [0 − 9]{4}\s+[0 −
9]{4}\s+[0−9]{4}\s+[0−9]{4}. Let κ be the distance of context from
the Lowest Common Ancestor (LCA) of context and value nodes,
which is calculated at the time of search policy creation. In pFilter,
we have specialized the operator ≺ for two relationships between
context and value. The first relationship is called sibling, that is,
context and value nodes have an immediate common parent (κ = 1),
for example, ‘Account Number’ and its value in Figure 2b, shown
as leftmost blue and red nodes. The other relationship is called
guardian where context and value nodes does not have an immediate
common parent node (κ > 1), for example, ‘Expense Date’ and its
values in the table. During search step (described later), the guardian
node is identified within κ-hops from the context node. Thus, the
search policy (π) is defined as a tuple of ⟨context, reдex, relation, κ⟩.
For web-page w, let Πw = {π1w , . . . , πmw} be the set of search
policies consisting of a policy for each sensitive context on the page.
Y ← {w | (p, w) ∈ E ∧ (n ≺ w)}
for y ∈ Y do
if match (y, value (π)) == true then
mask (y, t)