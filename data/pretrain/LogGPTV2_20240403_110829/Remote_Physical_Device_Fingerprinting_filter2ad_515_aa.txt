title:Remote Physical Device Fingerprinting
author:Tadayoshi Kohno and
Andre Broido and
Kimberly C. Claffy
Remote physical device ﬁngerprinting
Tadayoshi Kohno
CSE Department, UC San Diego
PI:EMAIL
Andre Broido
CAIDA, UC San Diego
PI:EMAIL
kc claffy
CAIDA, UC San Diego
PI:EMAIL
Abstract
We introduce the area of remote physical device ﬁnger-
printing, or ﬁngerprinting a physical device, as opposed to
an operating system or class of devices, remotely, and with-
out the ﬁngerprinted device’s known cooperation. We ac-
complish this goal by exploiting small, microscopic devia-
tions in device hardware: clock skews. Our techniques do
not require any modiﬁcation to the ﬁngerprinted devices.
Our techniques report consistent measurements when the
measurer is thousands of miles, multiple hops, and tens of
milliseconds away from the ﬁngerprinted device, and when
the ﬁngerprinted device is connected to the Internet from
different locations and via different access technologies.
Further, one can apply our passive and semi-passive tech-
niques when the ﬁngerprinted device is behind a NAT or
ﬁrewall, and also when the device’s system time is main-
tained via NTP or SNTP. One can use our techniques to
obtain information about whether two devices on the Inter-
net, possibly shifted in time or IP addresses, are actually the
same physical device. Example applications include: com-
puter forensics; tracking, with some probability, a physical
device as it connects to the Internet from different public ac-
cess points; counting the number of devices behind a NAT
even when the devices use constant or random IP IDs; re-
motely probing a block of addresses to determine if the ad-
dresses correspond to virtual hosts, e.g., as part of a virtual
honeynet; and unanonymizing anonymized network traces.
1 Introduction
There are now a number of powerful techniques for re-
mote operating system ﬁngerprinting, i.e., techniques for
remotely determining the operating systems of devices on
the Internet [2, 3, 5, 27]. We push this idea further and in-
troduce the notion of remote physical device ﬁngerprinting,
or remotely ﬁngerprinting a physical device, as opposed to
an operating system or class of devices, without the ﬁnger-
printed device’s known cooperation. We accomplish this
goal to varying degrees of precision by exploiting micro-
scopic deviations in device hardware: clock skews.
CLASSES OF FINGERPRINTING TECHNIQUES. We con-
sider three main classes of remote physical device ﬁnger-
printing techniques: passive, active, and semi-passive. The
ﬁrst two have standard deﬁnitions — to apply a passive
ﬁngerprinting technique, the ﬁngerprinter (measurer, at-
tacker, adversary) must be able to observe trafﬁc from the
device (the ﬁngerprintee) that the attacker wishes to ﬁnger-
print, whereas to apply an active ﬁngerprinting technique,
the ﬁngerprinter must have the ability to initiate connec-
tions to the ﬁngerprintee. Our third class of techniques,
which we refer to as semi-passive ﬁngerprinting techniques,
assumes that after the ﬁngerprintee initiates a connection,
the ﬁngerprinter has the ability to interact with the ﬁnger-
printee over that connection; e.g., the ﬁngerprinter is a web-
site with which the device is communicating, or is an ISP
in the middle capable of modifying packets en route. Each
class of techniques has its own advantages and disadvan-
tages. For example, passive techniques will be completely
undetectable to the ﬁngerprinted device, passive and semi-
passive techniques can be applied even if the ﬁngerprinted
device is behind a NAT or ﬁrewall, and semi-passive and
active techniques can potentially be applied over longer pe-
riods of time; e.g., after a laptop connects to a website and
the connection terminates, the website can still continue to
run active measurements.
METHODOLOGY. For all our methods, we stress that the
ﬁngerprinter does not require any modiﬁcation to or co-
operation from the ﬁngerprintee; e.g., we tested our tech-
niques with default Red Hat 9.0, Debian 3.0, FreeBSD
5.2.1, OpenBSD 3.5, OS X 10.3.5 Panther, Windows XP
SP2, and Windows for Pocket PC 2002 installations.1 In Ta-
ble 1 we summarize our preferred methods for ﬁngerprint-
ing the most popular operating systems.
Our preferred passive and semi-passive techniques ex-
ploit the fact that most modern TCP stacks implement the
1Our techniques work for the default installs of other versions of these
operating systems; here we just mention the most recent stable versions of
the operating systems that we analyzed.
Technique and section
TCP timestamps, Section 3
TCP timestamps, Section 3
ICMP tstamp requests, Section 4
active
Class
passive
NTP Red Hat 9.0 OS X Panther Windows XP
Yes
semi-passive Yes
No
No
Yes
Yes
Yes
Yes
Yes
Yes
Yes
No
Table 1. This table summarizes our main clock skew-based physical device ﬁngerprinting techniques.
A “Yes” in the NTP column means that one can use the attack regardless of whether the ﬁngerprintee
maintains its system time with NTP [19]. One can use passive and semi-passive techniques when
the ﬁngerprintee is behind a NAT or current generation ﬁrewall.
TCP timestamps option from RFC 1323 [13] whereby, for
performance purposes, each party in a TCP ﬂow includes
information about its perception of time in each outgoing
packet. A ﬁngerprinter can use the information contained
within the TCP headers to estimate a device’s clock skew
and thereby ﬁngerprint a physical device. We stress that
one can use our TCP timestamps-based method even when
the ﬁngerprintee’s system time is maintained via NTP [19].
While most modern operating systems enable the TCP
timestamps option by default, Windows 2000 and XP ma-
chines do not. Therefore, we developed a trick, which in-
volves an intentional violation of RFC 1323 on the part of
a semi-passive or active adversary, to convince Microsoft
Windows 2000 and XP machines to use the TCP times-
tamps option in Windows-initiated ﬂows.
In addition to
our TCP timestamps-based approach, we consider passive
ﬁngerprinting techniques that exploit the difference in time
between how often other periodic activities are supposed to
occur and how often they actually occur, and we show how
one might use a Fourier transform on packet arrival times
to infer a device’s clock skew. Since we believe that our
TCP timestamps-based approach is currently our most gen-
eral passive technique, we focus on the TCP timestamps
approach in this paper.
An active adversary could also exploit the ICMP proto-
col to ﬁngerprint a physical device. Namely, an active ad-
versary could issue ICMP Timestamp Request messages to
the ﬁngerprintee and record a trace of the resulting ICMP
Timestamp Reply messages. If the ﬁngerprintee does not
maintain its system time via NTP or does so only infre-
quently and if the ﬁngerprintee replies to ICMP Timestamp
Requests, then an adversary analyzing the resulting ICMP
Timestamp Reply messages will be able to estimate the ﬁn-
gerprintee’s system time clock skew. Default Red Hat 9.0,
Debian 3.0, FreeBSD 5.2.1, OpenBSD 3.5, and Windows
2000 and XP and Pocket PC 2002 installations all satisfy
the above preconditions.
PARAMETERS OF INVESTIGATION. Toward developing the
area of remote physical device ﬁngerprinting via remote
clock skew estimation, we must address the following set
of interrelated questions:
(1) For what operating systems are our remote clock skew
estimation techniques applicable?
(2) What is the distribution of clock skews across multiple
ﬁngerprintees? And what is the resolution of our clock
skew estimation techniques? (I.e., can one expect two
machines to have measurably different clock skews?)
(3) For a single ﬁngerprintee, can one expect the clock
skew estimate of that ﬁngerprintee to be relatively
constant over long periods of time, and through re-
boots, power cycles, and periods of down time?
(4) What are the effects of a ﬁngerprintee’s access tech-
nology (e.g., wireless, wired, dialup, cable modem)
on the clock skew estimates for the device?
(5) How are the clock skew estimates affected by the dis-
tance between the ﬁngerprinter and the ﬁngerprintee?
(6) Are the clock skew estimates independent of the ﬁn-
gerprinter? I.e., when multiple ﬁngerprinters are mea-
suring a single ﬁngerprintee at the same time, will they
all output (approximately) the same skew estimates?
(7) How much data do we need to be able to remotely
make accurate clock skew estimates?
Question (6) is applicable because common ﬁngerprinters
will probably use NTP-based time synchronization when
capturing packets, as opposed to more precise CDMA- or
GPS-synchronized timestamps. Answers to the above ques-
tions will help determine the efﬁcacy of our physical device
ﬁngerprinting techniques.
EXPERIMENTS AND HIGH-LEVEL RESULTS. To under-
stand and reﬁne our techniques, we conducted experiments
with machines that we controlled and that ran a variety of
operating systems, including popular Linux, BSD, and Mi-
crosoft distributions. In all cases we found that we could
use at least one of our techniques to estimate clock skews
of the machines, and that we required only a small amount
of data, though the exact data requirements depended on the
operating system in question. For the most popular operat-
ing systems, we observed that when the system did not use
NTP- or SNTP-based time synchronization, then the TCP
timestamps-based and the ICMP-based techniques yielded
approximately the same skew estimates. This result, cou-
pled with details that we describe in the body, motivated
us to use the TCP timestamps-based method in most of our
experiments. We survey some of our experiments here.
To understand the effects of topology and access tech-
nology on our skew estimates, we ﬁxed the location of the
ﬁngerprinter and applied our TCP timestamps-based tech-
nique to a single laptop in multiple locations, on both North
American coasts, from wired, wireless, and dialup loca-
tions, and from home, business, and campus environments
(Table 3). All clock skew estimates for the laptop were
close — the difference between the maximum and the min-
imum skew estimate was only 0.67 ppm. We also simul-
taneously measured the clock skew of the laptop and an-
other machine from multiple PlanetLab nodes throughout
the world, as well as from a machine of our own with a
CDMA-synchronized Dag card [1, 9, 11, 17] for taking net-
work traces with precise timestamps (Table 4). With the ex-
ception of the measurements taken by a PlanetLab machine
in India (over 300 ms round trip time away), for each exper-
iment, all the ﬁngerprinters (in North America, Europe, and
Asia) reported skew estimates within only 0.56 ppm of each
other. These experiments suggest that, except for extreme
cases, the results of our clock skew estimation techniques
are independent of access technology and topology.
Toward understanding the distribution of clock skews
across machines, we applied the TCP timestamps technique
to the devices in a trace collected on one of the U.S.’s Tier 1
OC-48 links (Figure 2). We also measured the clock skews
of 69 (seemingly) identical Windows XP SP1 machines in
one of our institution’s undergraduate computing facilities
(Figure 3). The latter experiment, which ran for 38 days,
as well as other experiments, show that the clock skew es-
timates for any given machine are approximately constant
over time, but that different machines have detectably dif-
ferent clock skews. Lastly, we use the results of these and
other experiments to argue that the amount of data (packets
and duration of data) necessary to perform our skew estima-
tion techniques is low, though we do not perform a rigorous
analysis of exactly what “low” means.
APPLICATIONS AND ADDITIONAL EXPERIMENTS. To test
the applicability of our techniques, we applied our tech-
niques to a honeyd [24] virtual honeynet consisting of 100
virtual Linux 2.4.18 hosts and 100 virtual Windows XP SP1
hosts. Our experiments showed with overwhelming proba-
bility that the TCP ﬂows and ICMP timestamp responses
were all handled by a single machine as opposed to 200
different machines. We also applied our techniques to a
network of ﬁve virtual machines running under VMware
Workstation [4] on a single machine. In this case, the clock
skew estimates of the virtual machines are signiﬁcantly dif-
ferent from what one would expect from real machines (the
skews were large and not constant over time; Figure 5). An
application of our techniques, or natural extensions, might
therefore be to remotely detect virtual honeynets.
Another applications of our techniques is to count the
number of hosts behind a NAT, even if those hosts use ran-
dom or constant IP IDs to counter Bellovin’s attack [7],
even if all the hosts run the same operating system, and even
if not all of the hosts are up at the same time. Furthermore,
when both our techniques and Bellovin’s techniques are ap-
plicable, we expect our approach to provide a much higher
degree of resolution. One could also use our techniques for
forensics purposes, e.g., to argue whether or not a given lap-
top was connected to the Internet from a given access loca-
tion. One could also use our techniques to help track laptops
as they move, perhaps as part of a Carnivore-like project
(here we envision our skew estimates as one important com-
ponent of the tracking; other components could be informa-
tion gleaned from existing operating system ﬁngerprinting
techniques, usage characteristics, and other heuristics). One
can also use our techniques to catalyze the unanonymization
of preﬁx-preserving anonymized network traces [28, 29].
BACKGROUND AND RELATED WORK.
It has long been
known that seemingly identical computers can have dis-
parate clock skews. The NTP [19] speciﬁcation describes
a method for reducing the clock skews of devices’ sys-
tem clocks, though over short periods of time an NTP-
synchronized machine may still have slight clock skew. In
1998 Paxson [22] initiated a line of research geared toward
eliminating clock skew from network measurements, and
one of the algorithms we use is based on a descendent of
the Paxson paper by Moon, Skelly, and Towsley [20]. Fur-
ther aﬁeld, though still related to clock skews, P´asztor and
Veitch [21] have created a software clock on a commod-
ity PC with high accuracy and small clock skew. One fun-
damental difference between our work and previous work
is our goal: whereas all previous works focus on creat-
ing methods for eliminating the effects of clock skews, our
work exploits and capitalizes on the effects of clock skews.
Anagnostakis et. al. [6] use ICMP Timestamp Requests
to study router queuing delays. It is well known that a net-
work card’s MAC address is supposed to be unique and
therefore could serve as a ﬁngerprint of a device assum-
ing that the adversary can observe the device’s MAC ad-
dress and that the owner of the card has not changed the
MAC address. The main advantage of our techniques over
a MAC address-based approach is that our techniques are
mountable by adversaries thousands of miles and multiple
hops away. One could also use cookies or any other per-
sistent data to track a physical device, but such persistent
data may not always be available to an adversary, perhaps
because the user is privacy-conscious and tries to minimize
storage and transmission of such data, or because the user
never communicates that data unencrypted.
See [15] for the full version of this paper.
2 Clocks and clock skews
When discussing clocks and clock skews, we build on
the nomenclature from the NTP speciﬁcation [19] and from
Paxson [22]. A clock C is designed to represent the amount
of time that has passed since some initial time i[C]. Clock
C’s resolution, r[C], is the smallest unit by which the clock
can be incremented, and we refer to each such increment
as a tick. A resolution of 10 ms means that the clock is de-
signed to have 10 ms granularity, not that the clock is always
incremented exactly every 10 ms. Clock C’s intended fre-
quency, Hz[C], is the inverse of its resolution; e.g., a clock
with 10 ms granularity is designed to run at 100 Hz. For
all t ≥ i[C], let R[C](t) denote the time reported by clock
C at time t, where t denotes the true time as deﬁned by
national standards. The offset of clock C, oﬀ[C], is the dif-
ference between the time reported by C and the true time,
i.e., oﬀ[C](t) = R[C](t) − t for all t ≥ i[C]. A clock’s
skew, s[C], is the ﬁrst derivative of its offset with respect to
time, where we assume for simplicity of notation that R[C]
is a differentiable function in t. We report skew estimates in
microseconds per second (µs/s) or, equivalently, parts per
million (ppm). As we shall show, and as others have also
concluded [22, 20, 26], it is often reasonable to assume that
a clock’s skew is constant. When the clock in question is
clear from context, we shall remove the parameter C from
our notation; e.g., s[C] becomes s.
A given device can have multiple, possibly independent,
clocks. For remote physical device ﬁngerprinting, we ex-
ploit two different clocks: the clock corresponding to a de-
vice’s system time, and a clock internal to a device’s TCP
network stack, which we call the device’s TCP timestamps
option clock or TSopt clock. We do not consider the hard-
ware bases for these clocks here since our focus is not on
understanding why these clocks have skews, but on exploit-
ing the fact these clocks can have measurable skews on pop-
ular current-generation systems.
THE SYSTEM CLOCK. To most users of a computer sys-
tem, the most visible clock is the device’s system clock,
Csys, which is designed to record the amount of time since
00:00:00 UTC, January 1, 1970. Although the system
clocks on professionally administered machines are often
approximately synchronized with true time via NTP [19]
or, less accurately, via SNTP [18], we stress that it is much
less likely for the system clocks on non-professionally man-
aged machines to be externally synchronized. This lack of
synchronization is because the default installations of most
of the popular operating systems that we tested do not syn-
chronize the hosts’ system clocks with true time or, if they
do, they do so only infrequently. For example, default Win-
dows XP Professional installations only synchronize their
system times with Microsoft’s NTP server when they boot