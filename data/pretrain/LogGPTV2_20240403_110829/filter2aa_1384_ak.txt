### Chapter 4: Discovering Network Vulnerabilities

#### 4.1 Introduction
After our movie heist crew has mapped out all the entry points into their target facility, the next step is to determine which, if any, are vulnerable to attack. This involves checking for open or unlocked windows, assessing the security of freight and service elevators, and identifying who has access to keycards. In the context of an internal network penetration test (INPT), we need to identify which services are vulnerable to a network attack. This chapter will cover:

- Creating effective password lists
- Brute-force password-guessing attacks
- Discovering patching vulnerabilities
- Discovering web server vulnerabilities

#### 4.2 Understanding Vulnerability Discovery
Vulnerability discovery begins with the protocol-specific target lists created during the service discovery phase. These lists contain IP addresses grouped by listening services, such as Windows, MSSQL, MySQL, HTTP, and VNC. The vulnerability-discovery process involves three main actions:

1. **Try common credentials**
2. **Identify target patch-level**
3. **Analyze web-based attack surfaces**

**Figure 4.1: High-Level Depiction of the Vulnerability-Discovery Process**

```plaintext
Individual Target Lists
A. Protocol-specific target lists generated during service discovery
B. The target lists are fed as input to different tools used throughout this phase
C. All discovered vulnerabilities will fit into one of three categories: authentication, patching, or configuration.

Tools:
- CrackMapExec
- Medusa
- Metasploit Framework
- Webshot
- Exploit-DB

Actions:
- Try common credentials
- Identify target patch-level
- Analyze web-based attack surfaces
```

#### 4.3 More on Vulnerability Management
You may be familiar with commercial vulnerability management solutions like Qualys or Nessus, which use Common Vulnerabilities and Exposures (CVE), the Common Vulnerability Scoring System (CVSS), and the National Vulnerability Database (NVD). While these are important topics in vulnerability management, this chapter focuses on simulating an attack from a malicious individual with manual attack and penetration techniques. For more information on vulnerability management, visit:

- [National Institute of Standards and Technology (NIST) CVSS](https://nvd.nist.gov/vuln-metrics/cvss)
- [MITRE Corporation CVE list](https://cve.mitre.org)

#### 4.4 Tools for Vulnerability Discovery
The tools used in this chapter include CrackMapExec, Metasploit, Medusa, Exploit-DB, and Webshot. Ensure that CrackMapExec, Metasploit, and Medusa are installed and configured on your attack platform. Instructions can be found in Appendix B.

#### 4.5 Following the Path of Least Resistance
As simulated network attackers, we look for the path of least resistance. Low-hanging-fruit (LHF) vulnerabilities are the easiest to find and exploit. An example is the MS17-010 (Eternal Blue) vulnerability, which can be identified using the Metasploit framework.

**Example: Using CrackMapExec to Enumerate Windows Targets**

```bash
cme smb /path/to/your/windows.txt
```

This command will enumerate the Windows versions running on the network. If an older version is detected, it may be vulnerable to Eternal Blue.

**Listing 4.1: Output from CME**

```plaintext
CME     10.0.10.206:445 YAMCHA     [*] Windows 10.0 Build 17763
CME     10.0.10.201:445 GOHAN      [*] Windows 10.0 Build 14393
...
CME     10.0.10.208:445 TIEN   [*] Windows 6.1 Build 7601
...
```

**Listing 4.2: Using Metasploit to Scan for MS17-010**

```bash
msf5 > use auxiliary/scanner/smb/smb_ms17_010
msf5 auxiliary(scanner/smb/smb_ms17_010) > set rhosts file:/path/to/your/windows.txt
msf5 auxiliary(scanner/smb/smb_ms17_010) > run
...
[+] 10.0.10.208:445    - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)
...
```

#### 4.6 Discovering Patching Vulnerabilities
Patching vulnerabilities are identified by comparing the software version on the target to the latest stable release. If the target is running an older version, check public exploit databases for known vulnerabilities.

**Example: Apache Tomcat 7.0.92**

1. Visit the Apache Tomcat 7 page: [Apache Tomcat 7 Download Page](https://tomcat.apache.org/download-70.cgi)
2. Check the latest version (e.g., 7.0.94)
3. Search the public exploit database: [Exploit-DB](https://www.exploit-db.com)
4. Determine if the target is vulnerable to any known exploits.

#### 4.7 Discovering Authentication Vulnerabilities
Authentication vulnerabilities include default, blank, or easily guessable passwords. A brute-force password-guessing attack is a common method to detect these vulnerabilities.

**Figure 4.3: Brute-Force Password Guessing**

```plaintext
Brute-force password guesser
- "Password"
- "Password1"
- "Password!"
- "Password2019"
- "Password2019!"
- "Password!"

A. A password guesser such as Medusa, THC-Hydra, or Metasploit is used to make authentication attempts.
B. The network service responds normally to each attempt.
C. Each response is analyzed to determine if valid credentials were provided.
```

**Exercise 4.1: Identifying Missing Patches**

1. Use the `all-ports.csv` file to search for unique software versions.
2. Run the MS17-010 auxiliary scan module for Windows systems.
3. Record any missing patches as patching vulnerabilities in your engagement notes.

**Listing 4.3: Client-Specific Password List**

```plaintext
~$ vim passwords.txt
1
2 admin
3 root
4 guest
5 sa
6 changeme
7 password
8 password1
9 password!
```

#### 4.8 What is a Strong Password?
A strong password is difficult to guess programmatically. As CPU/GPU password-cracking technology improves, the definition of a strong password evolves. A 24-character password with random uppercase letters, lowercase letters, numbers, and symbols is currently very secure.

---

This optimized text provides a clear, coherent, and professional overview of the chapter, making it easier to follow and understand.