59
Discovering network
vulnerabilities
Now that our movie heist crew has finished mapping out all of the entry points
leading into their target facility, the next thing they have to do is determine which
(if any) are vulnerable to attack. Are there any open windows that somebody forgot
to close? Are there any closed windows that somebody forgot to lock? Do the
freight/service elevators around the back of the building require the same type of
keycard access as the main elevators in the lobby? Who has access to one of those
keycards? These and many more are the types of questions our “bad guys” should
be asking themselves during this phase of the break-in.
 From the perspective of an internal network penetration test (INPT), we want
to figure out which of the services we just identified (the network entry points) are
vulnerable to a network attack. So, we need to answer questions like the following:
This chapter covers
 Creating effective password lists
 Brute-force password-guessing attacks
 Discovering patching vulnerabilities
 Discovering web server vulnerabilities
60
CHAPTER 4
Discovering network vulnerabilities
 Does system XYZ still have the default administrator password? 
 Is the system current? Meaning is it using all the latest security patches and ven-
dor updates? 
 Is the system configured to allow anonymous or guest access? 
Being able to think like an attacker whose sole purpose is to get inside by any means
necessary is critical to uncovering weaknesses in your target environment.
4.1
Understanding vulnerability discovery
Just as in the previous sub-phases, vulnerability discovery begins where the last sub-phase
left off: you should have created a set of protocol-specific target lists, which are noth-
ing more than a bunch of text files containing IP addresses. The files are grouped by
listening services, meaning you have one file for each network protocol you want to
assess, and that file should contain the IP address of every host you identified during
the previous phase that is running that specific service. For the sake of this example
engagement, I’ve created target lists for Windows, MSSQL, MySQL, HTTP, and VNC
services. Figure 4.1 is a high-level depiction of the vulnerability-discovery process. The
emphasis here should be placed on the three actions:
 Try common credentials
 Identify target patch-level
 Analyze web-based attack surfaces
More on vulnerability management
You might already be familiar with vulnerability discovery in the form of using a com-
mercial vulnerability management solution such as Qualys or Nessus. If that’s the
case, then I’m sure you’ll wonder why this chapter doesn’t talk about Common Vul-
nerabilities and Exposures (CVE), the Common Vulnerability Scoring System (CVSS),
the National Vulnerability Database (NVD), and a lot of other acronyms related to net-
work vulnerabilities. 
These are great topics to discuss when learning about vulnerability management,
which is not the focus of the methodology you’re learning in this book. A typical inter-
nal network penetration test (INTP) is used to simulate an attack from a malicious
person or persons with some degree of sophistication in manual attack and penetra-
tion techniques.
If you want to learn more about the vulnerability management side of things, check
out these websites for additional reading:
 National Institute of Standards and Technology (NIST) CVSS: https://nvd.nist.gov/
vuln-metrics/cvss
 MITRE Corporation CVE list: https://cve.mitre.org
61
Understanding vulnerability discovery
The tools that are listed in this figure are specific only to the exercises you’ll work
through in this chapter. It’s not a requirement for you to use these tools per se to per-
form vulnerability discovery on an INPT.
 Each target list gets fed into one or more vulnerability-discovery tools to identify
exploitable weaknesses such as missing, weak, or default credentials; missing software
updates; and insecure configuration settings. The tools you’ll use to uncover vulnera-
bilities are CrackMapExec, Metasploit, Medusa, Exploit-DB, and Webshot. The first
three should already be installed and working on your attack platform. The other two
are introduced in this chapter. If you haven’t yet set up CrackMapExec, Metasploit, or
Medusa, you’ll need to do that before continuing further. You can find instructions in
appendix B. If you are following along with the preconfigured pentest system from
the Capsulecorp Pentest project, these tools are already installed and configured
appropriately for you.
4.1.1
Following the path of least resistance
As simulated network attackers, we always want to look for the path of least resistance.
Vulnerabilities and attack vectors vary in terms of the level of effort required to success-
fully and reliably compromise an affected target. With that in mind, the most consistent
and easiest-to-find attack vectors are usually the ones we go after first. These easy-to-spot
vectors are sometimes referred to as low-hanging-fruit (LHF) vulnerabilities. 
Individual Target
Lists
A. Protocol-specific target lists
    generated during service
    discovery
C. All discovered vulnerabilities will fit into
    one of three categories: authentication,
   patching, or configuration.
B. The target lists are fed as input to the
    different tools used throughout this phase
    to discover network vulnerabilities.
CrackMapExec
Try common
credentials
Medusa
Metasploit Framework
 Webshot
Exploit-DB
Identify target
patch-level
Analyze
web-based
attack surfaces
Figure 4.1
The vulnerability-discovery sub-phase workflow
62
CHAPTER 4
Discovering network vulnerabilities
 When targeting LHF vulnerabilities, the thought process is that if we can get in
somewhere quickly and quietly, we can avoid making too much noise on the network,
which is useful on certain engagements where operating stealth is required. The
Metasploit framework contains a useful auxiliary module for quickly and reliably iden-
tifying a LHF Windows vulnerability frequently used by attackers—the MS17-010
(code name: Eternal Blue) vulnerability.
4.2
Discovering patching vulnerabilities
Discovering patching vulnerabilities is as straightforward as identifying exactly which
version of a particular software your target is running and then comparing that version
to the latest stable release available from the software vendor. If your target is on an
older release, you can then check public exploit databases to see if the newest release
patched any remote code execution bugs that the older version may be vulnerable to. 
 For example, using your service discovery data from the previous phase (chapter 3,
listing 3.7), you can see that one of our target systems is running Apache Tomcat/
7.0.92. If you head over to the Apache Tomcat 7 page at https://tomcat.apache.org/
download-70.cgi, you see the latest available version of Apache Tomcat (at the time of
this writing, 7.0.94). As an attacker, you could make the assumption that the developers
fixed a lot of bugs between 7.0.92 and 7.0.94, and it’s possible that one of those bugs
resulted in an exploitable weakness. Now, if you look at the public exploit database
(https://www.exploit-db.com) and search for “Apache Tomcat 7,” you can see the list
of all the current known exploitable attack vectors and determine which ones your tar-
get might be vulnerable to (figure 4.2).
 In the case of MS17-010, it’s even easier because Metasploit has already created a
simple module to tell whether a host is vulnerable. First, though, let’s use Crack-
MapExec (CME) to enumerate our list of Windows targets just to get a feel for what
versions are active on this network. MS17-010 was patched back in 2017 and doesn’t
typically affect Windows Server 2012 or greater. If our target network is running
mostly up-to-date Windows boxes, then Eternal Blue is unlikely to be present. Run the
following command from your pentest VM: cme smb /path/to/your/windows.txt.
Remember that the windows.txt file contains all of the IP addresses that were running
port 445 during service-discovery.
MS17-010: The Eternal Blue vulnerability
Check out the advisory from Microsoft for specific details about this critical security
bug: http://mng.bz/ggAe. Start at the official MS Docs page, and then use the exter-
nal reference links (there are a lot of them) to go as far down the rabbit hole as you
like. We won’t be diving into this vulnerability or be covering software exploitation
from a research and development point of view because it is not necessary for net-
work pentesting. Contrary to popular opinion, a pentester doesn’t need to understand
the intricate details of software exploitation. That said, many are interested in the
topic, and if you want to go that route, I recommend starting with Hacking: The Art of
Exploitation by Jon Erickson (No Starch Press, 2nd ed. 2008).
63
Discovering patching vulnerabilities
DEFINITION
Box is a commonly accepted industry term used to describe com-
puter systems. Pentesters often use this term exclusively when talking with
their peers about computers on a network: “I found a Windows box that was
missing MS17-010 . . .” 
The output from that command, shown in listing 4.1, indicates that we may be in luck.
One older version of Windows is running on this network and is potentially vulnerable
to Eternal Blue: Windows 6.1, which is either a Windows 7 workstation or a Windows
Server 2008 R2 system. (We know this from checking the Microsoft Docs Operating
System Version page at http://mng.bz/emV9.)
CME     10.0.10.206:445 YAMCHA     [*] Windows 10.0 Build 17763
(name:YAMCHA) (domain:CAPSULECORP)
CME     10.0.10.201:445 GOHAN      [*] Windows 10.0 Build 14393
(name:GOHAN) (domain:CAPSULECORP)
CME     10.0.10.207:445 RADITZ     [*] Windows 10.0 Build 14393
(name:RADITZ) (domain:CAPSULECORP)
CME     10.0.10.200:445 GOKU      [*] Windows 10.0 Build 17763 (name:GOKU)
(domain:CAPSULECORP)
CME     10.0.10.202:445 VEGETA     [*] Windows 6.3 Build 9600 (name:VEGETA)
(domain:CAPSULECORP)
CME     10.0.10.203:445 TRUNKS     [*] Windows 6.3 Build 9600 (name:TRUNKS)
(domain:CAPSULECORP)
CME     10.0.10.208:445 TIEN   [*] Windows 6.1 Build 7601 (name:TIEN)    
(domain:CAPSULECORP)      
CME     10.0.10.205:445 KRILLIN     [*] Windows 10.0 Build 17763
(name:KRILLIN) (domain:CAPSULECORP)
Listing 4.1
Output: using CME to identify the Windows version
Figure 4.2
Searching the public exploit database for “Apache Tomcat 7”
The host at 10.0.10.208 is running
Windows 6.1, which may be
vulnerable to MS17-010.
64
CHAPTER 4
Discovering network vulnerabilities
It’s possible that this system could be missing the MS17-010 security update from Mic-
rosoft. All we have to do now is find out by running the Metasploit auxiliary scan module.
4.2.1
Scanning for MS17-010 Eternal Blue
To use the Metasploit module, you will of course have to fire up the msfconsole from
your pentest VM. Type use auxiliary/scanner/smb/smb_ms17_010 at the console
prompt to select the module. Set the rhosts variable to point to your windows.txt file
like this: set rhosts file:/path/to/your/windows.txt. Now run the module by issu-
ing the run command at the prompt. The following listing shows what it looks like to
run this module.
msf5 > use auxiliary/scanner/smb/smb_ms17_010 
msf5 auxiliary(scanner/smb/smb_ms17_010) > set rhosts 
file:/home/royce/capsulecorp/discovery/hosts/windows.txt
rhosts => file:/home/royce/capsulecorp/discovery/hosts/windows.txt 
msf5 auxiliary(scanner/smb/smb_ms17_010) > run
[-] 10.0.10.200:445    - An SMB Login Error occurred while connecting to
the IPC$ tree.
[*] Scanned 1 of 8 hosts (12% complete)
[-] 10.0.10.201:445    - An SMB Login Error occurred while connecting to
the IPC$ tree.
[*] Scanned 2 of 8 hosts (25% complete)
[-] 10.0.10.202:445    - An SMB Login Error occurred while connecting to
the IPC$ tree.
[*] Scanned 3 of 8 hosts (37% complete)
[-] 10.0.10.203:445    - An SMB Login Error occurred while connecting to
the IPC$ tree.
[*] Scanned 4 of 8 hosts (50% complete)
[-] 10.0.10.205:445    - An SMB Login Error occurred while connecting to
the IPC$ tree.
[*] Scanned 5 of 8 hosts (62% complete)
[-] 10.0.10.206:445    - An SMB Login Error occurred while connecting to
the IPC$ tree.
[*] Scanned 6 of 8 hosts (75% complete)
[-] 10.0.10.207:445    - An SMB Login Error occurred while connecting to
the IPC$ tree.
[*] Scanned 7 of 8 hosts (87% complete)
[+] 10.0.10.208:445    - Host is likely VULNERABLE to MS17-010! - Windows 7
Professional 7601 Service Pack 1 x64 (64-bit) 
[*] Scanned 8 of 8 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/smb/smb_ms17_010) >
From this output, it’s clear that a single host running Windows 7 Professional build
7601 is potentially vulnerable to Eternal Blue. If you read the source code for the
scanner module, you can see that during the SMB handshake, it checks for the
presence of a string that isn’t present on patched systems. This means there is a
Listing 4.2
Using Metasploit to scan Windows hosts for MS17-010
Running the MS17-010 scanner module 
shows that the host is Windows 7 and 
is likely vulnerable to the attack.
65
Discovering authentication vulnerabilities
relatively low likelihood of the results being a false positive. During focused
penetration, the next phase in our INPT, we can try the MS17-010 exploit module,
which, if successful, will provide us with a reverse shell command prompt on this system.
4.3
Discovering authentication vulnerabilities
An authentication vulnerability is any occurrence of a default, blank, or easily guessable
password. The easiest way to detect authentication vulnerabilities is to perform a brute-
force password-guessing attack. Every INPT you conduct will most certainly require you
to perform some level of password-guessing attacks. For the sake of completeness and
making sure we’re on the same page, figure 4.3 shows a brief diagram demonstrating
the process of password guessing from a network attackers’ perspective.
Exercise 4.1: Identifying missing patches
Using the information from your all-ports.csv file, search exploit-db.com for all of the
unique software versions present in your environment. If you have Windows systems in
your target list, make sure to also run the MS17-010 auxiliary scan module. Record any
missing patches that you identify as a patching vulnerability in your engagement notes.
Figure 4.3
Brute-force password guessing
Brute-force
password
guesser
“Password”
“Password1”
“Password!”
“Password2019”
“Password2019!”
“Password!”
A. A password guesser such as Medusa,
    THC-Hydra, or Metasploit is used to 
    make authentication attempts at a 
    target network service.
B. The network service responds normally to
    each authentication attempt as it would
    respond to a user trying to log in manually
    with their username and password.
C. Each response is analyzed by the
    password guesser to determine if a
    valid set of credentials was provided.
Target network
service
Success: valid
login reponse
Error: invalid
login response
   Password list
66
CHAPTER 4
Discovering network vulnerabilities
4.3.1
Creating a client-specific password list
To perform any brute-force password guessing, you’ll need a password list. The inter-
net is full of interesting password lists that can and do work on many engagements.
That said, we want to be smart and skillful attackers, so let’s create a tailored password
list that is specific to our target organization, Capsulecorp. 
 Listing 4.3 shows the kind of LHF password list that I typically create for every
engagement I conduct by using the word password and the name of the client com-
pany. I will explain my method for choosing these passwords in case the list seems
totally random at first glance. This method preys on the shared psychology of most
users who need to enter a password to complete their daily job functions and are
required to meet some sort of predetermined minimum standard of password com-
plexity. Such users usually aren’t security professionals and therefore don’t necessarily
think about using a strong password.
In most cases, users do the bare minimum that’s required. For example, on a Microsoft
Windows computer with Complex Passwords enabled, a user’s password must have a
minimum of eight characters and contain at least one uppercase character and a numeric
character. This means the string “Password1” is a secure/complex password, according to
Microsoft Windows. (By the way, I’m not picking on Microsoft. I’m just illustrating that
when users are required to set a password, doing so is generally considered to be a
nuisance—so it’s common to find users choosing the weakest, easiest-to-remember
password they can think of that meets the minimum complexity requirements.)
~$ vim passwords.txt
 1 
 2 admin
 3 root
 4 guest
 5 sa
 6 changeme
 7 password             
 8 password1            
 9 password!            
Listing 4.3
A simple yet effective client-specific password list
What is a strong password?
A strong password is one that is difficult to guess programmatically. What that
means changes as CPU/GPU password-cracking technology improves in its capabili-
ties and scalability. A 24-character password consisting of randomly generated
uppercase letters, lowercase letters, numbers, and symbols is next to impossible
to guess and should remain that way for quite some time. But that statement was
once true for eight-character passwords, and they are now pretty trivial to break
regardless of complexity.
12 permutations of 
the word “password”
67
Discovering authentication vulnerabilities