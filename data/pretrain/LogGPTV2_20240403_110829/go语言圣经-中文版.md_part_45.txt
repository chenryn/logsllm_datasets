的了。Go语言里的defer简直就是这种情况下的救星：我们用defer来调用Unlock，临界区会
隐式地延伸到函数作用域的最后，这样我们就从“总要记得在函数返回之后或者发生错误返回
时要记得调用一次Unlock”这种状态中获得了解放。Go会自动帮我们完成这些事情。
sync.Mutex互斥锁 346
gopl
func Balance() int {
mu.Lock()
defer mu.Unlock()
return balance
}
上面的例子里Unlock会在return语句读取完balance的值之后执行，所以Balance函数是并发安
全的。这带来的另一点好处是，我们再也不需要一个本地变量b了。
此外，一个deferred Unlock即使在临界区发生panic时依然会执行，这对于用recover (§5.10)
来恢复的程序来说是很重要的。defer调用只会比显式地调用Unlock成本高那么一点点，不过
却在很大程度上保证了代码的整洁性。大多数情况下对于并发程序来说，代码的整洁性比过
度的优化更重要。如果可能的话尽量使用defer来将临界区扩展到函数的结束。
考虑一下下面的Withdraw函数。成功的时候，它会正确地减掉余额并返回true。但如果银行记
录资金对交易来说不足，那么取款就会恢复余额，并返回false。
// NOTE: not atomic!
func Withdraw(amount int) bool {
Deposit(-amount)
if Balance() < 0 {
Deposit(amount)
return false // insufficient funds
}
return true
}
函数终于给出了正确的结果，但是还有一点讨厌的副作用。当过多的取款操作同时执行时，
balance可能会瞬时被减到0以下。这可能会引起一个并发的取款被不合逻辑地拒绝。所以如
果Bob尝试买一辆sports car时，Alice可能就没办法为她的早咖啡付款了。这里的问题是取款
不是一个原子操作：它包含了三个步骤，每一步都需要去获取并释放互斥锁，但任何一次锁
都不会锁上整个取款流程。
理想情况下，取款应该只在整个操作中获得一次互斥锁。下面这样的尝试是错误的：
// NOTE: incorrect!
func Withdraw(amount int) bool {
mu.Lock()
defer mu.Unlock()
Deposit(-amount)
if Balance() < 0 {
Deposit(amount)
return false // insufficient funds
}
return true
}
sync.Mutex互斥锁 347
gopl
上面这个例子中，Deposit会调用mu.Lock()第二次去获取互斥锁，但因为mutex已经锁上了，
而无法被重入(译注：go里没有重入锁，关于重入锁的概念，请参考java)--也就是说没法对一
个已经锁上的mutex来再次上锁--这会导致程序死锁，没法继续执行下去，Withdraw会永远阻
塞下去。
关于Go的互斥量不能重入这一点我们有很充分的理由。互斥量的目的是为了确保共享变量在
程序执行时的关键点上能够保证不变性。不变性的其中之一是“没有goroutine访问共享变量”。
但实际上对于mutex保护的变量来说，不变性还包括其它方面。当一个goroutine获得了一个互
斥锁时，它会断定这种不变性能够被保持。其获取并保持锁期间，可能会去更新共享变量，
这样不变性只是短暂地被破坏。然而当其释放锁之后，它必须保证不变性已经恢复原样。尽
管一个可以重入的mutex也可以保证没有其它的goroutine在访问共享变量，但这种方式没法保
证这些变量额外的不变性。(译注：这段翻译有点晕)
一个通用的解决方案是将一个函数分离为多个函数，比如我们把Deposit分离成两个：一个不
导出的函数deposit，这个函数假设锁总是会被保持并去做实际的操作，另一个是导出的函数
Deposit，这个函数会调用deposit，但在调用前会先去获取锁。同理我们可以将Withdraw也表
示成这种形式：
func Withdraw(amount int) bool {
mu.Lock()
defer mu.Unlock()
deposit(-amount)
if balance < 0 {
deposit(amount)
return false // insufficient funds
}
return true
}
func Deposit(amount int) {
mu.Lock()
defer mu.Unlock()
deposit(amount)
}
func Balance() int {
mu.Lock()
defer mu.Unlock()
return balance
}
// This function requires that the lock be held.
func deposit(amount int) { balance += amount }
当然，这里的存款deposit函数很小实际上取款withdraw函数不需要理会对它的调用，尽管如
此，这里的表达还是表明了规则。
sync.Mutex互斥锁 348
gopl
封装(§6.6), 用限制一个程序中的意外交互的方式，可以使我们获得数据结构的不变性。因为
某种原因，封装还帮我们获得了并发的不变性。当你使用mutex时，确保mutex和其保护的变
量没有被导出(在go里也就是小写，且不要被大写字母开头的函数访问啦)，无论这些变量是包
级的变量还是一个struct的字段。
sync.Mutex互斥锁 349
gopl
9.3. sync.RWMutex读写锁
在100刀的存款消失时不做记录多少还是会让我们有一些恐慌，Bob写了一个程序，每秒运行
几百次来检查他的银行余额。他会在家，在工作中，甚至会在他的手机上来运行这个程序。
银行注意到这些陡增的流量使得存款和取款有了延时，因为所有的余额查询请求是顺序执行
的，这样会互斥地获得锁，并且会暂时阻止其它的goroutine运行。
由于Balance函数只需要读取变量的状态，所以我们同时让多个Balance调用并发运行事实上
是安全的，只要在运行的时候没有存款或者取款操作就行。在这种场景下我们需要一种特殊
类型的锁，其允许多个只读操作并行执行，但写操作会完全互斥。这种锁叫作“多读单写”锁
(multiple readers, single writer lock)，Go语言提供的这样的锁是sync.RWMutex：
var mu sync.RWMutex
var balance int
func Balance() int {
mu.RLock() // readers lock
defer mu.RUnlock()
return balance
}
Balance函数现在调用了RLock和RUnlock方法来获取和释放一个读取或者共享锁。Deposit函
数没有变化，会调用mu.Lock和mu.Unlock方法来获取和释放一个写或互斥锁。
在这次修改后，Bob的余额查询请求就可以彼此并行地执行并且会很快地完成了。锁在更多的
时间范围可用，并且存款请求也能够及时地被响应了。
RLock只能在临界区共享变量没有任何写入操作时可用。一般来说，我们不应该假设逻辑上的
只读函数/方法也不会去更新某一些变量。比如一个方法功能是访问一个变量，但它也有可能
会同时去给一个内部的计数器+1(译注：可能是记录这个方法的访问次数啥的)，或者去更新缓
存--使即时的调用能够更快。如果有疑惑的话，请使用互斥锁。
RWMutex只有当获得锁的大部分goroutine都是读操作，而锁在竞争条件下，也就是说，
goroutine们必须等待才能获取到锁的时候，RWMutex才是最能带来好处的。RWMutex需要更
复杂的内部记录，所以会让它比一般的无竞争锁的mutex慢一些。
sync.RWMutex读写锁 350
gopl
9.4. 内存同步
你可能比较纠结为什么Balance方法需要用到互斥条件，无论是基于channel还是基于互斥
量。毕竟和存款不一样，它只由一个简单的操作组成，所以不会碰到其它goroutine在其执
行"期间"执行其它的逻辑的风险。这里使用mutex有两方面考虑。第一Balance不会在其它操
作比如Withdraw“中间”执行。第二(更重要)的是"同步"不仅仅是一堆goroutine执行顺序的问
题；同样也会涉及到内存的问题。
在现代计算机中可能会有一堆处理器，每一个都会有其本地缓存(local cache)。为了效率，对
内存的写入一般会在每一个处理器中缓冲，并在必要时一起flush到主存。这种情况下这些数
据可能会以与当初goroutine写入顺序不同的顺序被提交到主存。像channel通信或者互斥量操
作这样的原语会使处理器将其聚集的写入flush并commit，这样goroutine在某个时间点上的执
行结果才能被其它处理器上运行的goroutine得到。
考虑一下下面代码片段的可能输出：
var x, y int
go func() {
x = 1 // A1
fmt.Print("y:", y, " ") // A2
}()
go func() {
y = 1 // B1
fmt.Print("x:", x, " ") // B2
}()
因为两个goroutine是并发执行，并且访问共享变量时也没有互斥，会有数据竞争，所以程序
的运行结果没法预测的话也请不要惊讶。我们可能希望它能够打印出下面这四种结果中的一
种，相当于几种不同的交错执行时的情况：
y:0 x:1
x:0 y:1
x:1 y:1
y:1 x:1
第四行可以被解释为执行顺序A1,B1,A2,B2或者B1,A1,A2,B2的执行结果。 然而实际的运行时
还是有些情况让我们有点惊讶：
x:0 y:0
y:0 x:0
内存同步 351
gopl
但是根据所使用的编译器，CPU，或者其它很多影响因子，这两种情况也是有可能发生的。
那么这两种情况要怎么解释呢？
在一个独立的goroutine中，每一个语句的执行顺序是可以被保证的；也就是说goroutine是顺
序连贯的。但是在不使用channel且不使用mutex这样的显式同步操作时，我们就没法保证事
件在不同的goroutine中看到的执行顺序是一致的了。尽管goroutine A中一定需要观察到x=1执
行成功之后才会去读取y，但它没法确保自己观察得到goroutine B中对y的写入，所以A还可能
会打印出y的一个旧版的值。
尽管去理解并发的一种尝试是去将其运行理解为不同goroutine语句的交错执行，但看看上面
的例子，这已经不是现代的编译器和cpu的工作方式了。因为赋值和打印指向不同的变量，编
译器可能会断定两条语句的顺序不会影响执行结果，并且会交换两个语句的执行顺序。如果
两个goroutine在不同的CPU上执行，每一个核心有自己的缓存，这样一个goroutine的写入对
于其它goroutine的Print，在主存同步之前就是不可见的了。
所有并发的问题都可以用一致的、简单的既定的模式来规避。所以可能的话，将变量限定在
goroutine内部；如果是多个goroutine都需要访问的变量，使用互斥条件来访问。
内存同步 352
gopl
9.5. sync.Once初始化
如果初始化成本比较大的话，那么将初始化延迟到需要的时候再去做就是一个比较好的选
择。如果在程序启动的时候就去做这类的初始化的话会增加程序的启动时间并且因为执行的
时候可能也并不需要这些变量所以实际上有一些浪费。让我们在本章早一些时候看到的icons
变量：
var icons map[string]image.Image
这个版本的Icon用到了懒初始化(lazy initialization)。
func loadIcons() {
icons = map[string]image.Image{
"spades.png": loadIcon("spades.png"),
"hearts.png": loadIcon("hearts.png"),
"diamonds.png": loadIcon("diamonds.png"),
"clubs.png": loadIcon("clubs.png"),
}
}
// NOTE: not concurrency-safe!
func Icon(name string) image.Image {
if icons == nil {
loadIcons() // one-time initialization
}
return icons[name]
}
如果一个变量只被一个单独的goroutine所访问的话，我们可以使用上面的这种模板，但这种
模板在Icon被并发调用时并不安全。就像前面银行的那个Deposit(存款)函数一样，Icon函数也
是由多个步骤组成的：首先测试icons是否为空，然后load这些icons，之后将icons更新为一个
非空的值。直觉会告诉我们最差的情况是loadIcons函数被多次访问会带来数据竞争。当第一
个goroutine在忙着loading这些icons的时候，另一个goroutine进入了Icon函数，发现变量是
nil，然后也会调用loadIcons函数。
不过这种直觉是错误的。(我们希望现在你从现在开始能够构建自己对并发的直觉，也就是说
对并发的直觉总是不能被信任的！)回忆一下9.4节。因为缺少显式的同步，编译器和CPU是可
以随意地去更改访问内存的指令顺序，以任意方式，只要保证每一个goroutine自己的执行顺
序一致。其中一种可能loadIcons的语句重排是下面这样。它会在填写icons变量的值之前先用
一个空map来初始化icons变量。
sync.Once初始化 353
gopl
func loadIcons() {
icons = make(map[string]image.Image)
icons["spades.png"] = loadIcon("spades.png")
icons["hearts.png"] = loadIcon("hearts.png")
icons["diamonds.png"] = loadIcon("diamonds.png")
icons["clubs.png"] = loadIcon("clubs.png")
}
因此，一个goroutine在检查icons是非空时，也并不能就假设这个变量的初始化流程已经走完
了(译注：可能只是塞了个空map，里面的值还没填完，也就是说填值的语句都没执行完呢)。
最简单且正确的保证所有goroutine能够观察到loadIcons效果的方式，是用一个mutex来同步
检查。
var mu sync.Mutex // guards icons
var icons map[string]image.Image
// Concurrency-safe.
func Icon(name string) image.Image {
mu.Lock()
defer mu.Unlock()
if icons == nil {
loadIcons()
}
return icons[name]
}
然而使用互斥访问icons的代价就是没有办法对该变量进行并发访问，即使变量已经被初始化
完毕且再也不会进行变动。这里我们可以引入一个允许多读的锁：
sync.Once初始化 354
gopl
var mu sync.RWMutex // guards icons
var icons map[string]image.Image