Even if the results of such an exercise contain a large ratio of false positives, it
is still better to have a list of 100 usernames, approximately 50% of which are
valid, than a list of 10,000 usernames, approximately 0.5% of which are valid.
See Chapter 15 for a detailed explanation of how to detect and exploit this type
of timing difference to extract information from the application.
TIP In addition to the login functionality itself, there may be other sources of
information where you can obtain valid usernames. Review all the source code
comments discovered during application mapping (see Chapter 4) to identify
any apparent usernames. Any e-mail addresses of developers or other personnel
within the organization may be valid usernames, either in full or just the user-
specifi c prefi x. Any accessible logging functionality may disclose usernames.
TRY IT!
http://mdsec.net/auth/53/
http://mdsec.net/auth/59/
http://mdsec.net/auth/70/
http://mdsec.net/auth/81/
http://mdsec.net/auth/167/
Vulnerable Transmission of Credentials
If an application uses an unencrypted HTTP connection to transmit login cre-
dentials, an eavesdropper who is suitably positioned on the network can, of
course, intercept them. Depending on the user’s location, potential eavesdrop-
pers may reside:
n On the user’s local network
n Within the user’s IT department
n Within the user’s ISP
n On the Internet backbone
n Within the ISP hosting the application
n Within the IT department managing the application
cc0066..iinndddd 116699 88//1199//22001111 1122::0066::3388 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 170
170 Chapter 6 n Attacking Authentication
NOTE Any of these locations may be occupied by authorized personnel but
also potentially by an external attacker who has compromised the relevant
infrastructure through some other means. Even if the intermediaries on a par-
ticular network are believed to be trusted, it is safer to use secure transport
mechanisms when passing sensitive data over it.
Even if login occurs over HTTPS, credentials may still be disclosed to unau-
thorized parties if the application handles them in an unsafe manner:
n If credentials are transmitted as query string parameters, as opposed
to in the body of a POST request, these are liable to be logged in various
places, such as within the user’s browser history, within the web server
logs, and within the logs of any reverse proxies employed within the
hosting infrastructure. If an attacker succeeds in compromising any of
these resources, he may be able to escalate privileges by capturing the
user credentials stored there.
n Although most web applications do use the body of a POST request to
submit the HTML login form itself, it is surprisingly common to see the
login request being handled via a redirect to a different URL with the same
credentials passed as query string parameters. Why application develop-
ers consider it necessary to perform these bounces is unclear, but having
elected to do so, it is easier to implement them as 302 redirects to a URL
than as POST requests using a second HTML form submitted via JavaScript.
n Web applications sometimes store user credentials in cookies, usually
to implement poorly designed mechanisms for login, password change,
“remember me,” and so on. These credentials are vulnerable to capture
via attacks that compromise user cookies and, in the case of persistent
cookies, by anyone who gains access to the client’s local fi lesystem. Even if
the credentials are encrypted, an attacker still can simply replay the cookie
and therefore log in as a user without actually knowing her credentials.
Chapters 12 and 13 describe various ways in which an attacker can target
other users to capture their cookies.
Many applications use HTTP for unauthenticated areas of the application and
switch to HTTPS at the point of login. If this is the case, then the correct place
to switch to HTTPS is when the login page is loaded in the browser, enabling a
user to verify that the page is authentic before entering credentials. However, it
is common to encounter applications that load the login page itself using HTTP
and then switch to HTTPS at the point where credentials are submitted. This
is unsafe, because a user cannot verify the authenticity of the login page itself
and therefore has no assurance that the credentials will be submitted securely.
A suitably positioned attacker can intercept and modify the login page, chang-
ing the target URL of the login form to use HTTP. By the time an astute user
realizes that the credentials have been submitted using HTTP, they will have
been compromised.
cc0066..iinndddd 117700 88//1199//22001111 1122::0066::3388 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 171
Chapter 6 n Attacking Authentication 171
HACK STEPS
1. Carry out a successful login while monitoring all traffic in both directions
between the client and server.
2. Identify every case in which the credentials are transmitted in either
direction. You can set interception rules in your intercepting proxy to flag
messages containing specific strings (see Chapter 20).
3. If any instances are found in which credentials are submitted in a URL
query string or as a cookie, or are transmitted back from the server to the
client, understand what is happening, and try to ascertain what purpose
the application developers were attempting to achieve. Try to find every
means by which an attacker might interfere with the application’s logic to
compromise other users’ credentials.
4. If any sensitive information is transmitted over an unencrypted channel,
this is, of course, vulnerable to interception.
5. If no cases of actual credentials being transmitted insecurely are iden-
tified, pay close attention to any data that appears to be encoded or
obfuscated. If this includes sensitive data, it may be possible to reverse-
engineer the obfuscation algorithm.
6. If credentials are submitted using HTTPS but the login form is loaded
using HTTP, the application is vulnerable to a man-in-the-middle attack,
which may be used to capture credentials.
TRY IT!
http://mdsec.net/auth/88/
http://mdsec.net/auth/90/
http://mdsec.net/auth/97/
Password Change Functionality
Surprisingly, many web applications do not provide any way for users to change
their password. However, this functionality is necessary for a well-designed
authentication mechanism for two reasons:
n Periodic enforced password change mitigates the threat of password com-
promise. It reduces the window in which a given password can be targeted
in a guessing attack. It also reduces the window in which a compromised
password can be used without detection by the attacker.
n Users who suspect that their passwords may have been compromised
need to be able to quickly change their password to reduce the threat of
unauthorized use.
cc0066..iinndddd 117711 88//1199//22001111 1122::0066::3388 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 172
172 Chapter 6 n Attacking Authentication
Although it is a necessary part of an effective authentication mechanism,
password change functionality is often vulnerable by design. Vulnerabilities
that are deliberately avoided in the main login function often reappear in the
password change function. Many web applications’ password change functions
are accessible without authentication and do the following:
n Provide a verbose error message indicating whether the requested user-
name is valid.
n Allow unrestricted guesses of the “existing password” fi eld.
n Check whether the “new password” and “confi rm new password” fi elds
have the same value only after validating the existing password, thereby
allowing an attack to succeed in discovering the existing password
noninvasively.
A typical password change function includes a relatively large logical decision
tree. The application needs to identify the user, validate the supplied existing
password, integrate with any account lockout defenses, compare the supplied
new passwords with each other and against password quality rules, and feed
back any error conditions to the user in a suitable way. Because of this, pass-
word change functions often contain subtle logic fl aws that can be exploited to
subvert the entire mechanism.
HACK STEPS
1. Identify any password change functionality within the application. If
this is not explicitly linked from published content, it may still be imple-
mented. Chapter 4 describes various techniques for discovering hidden
content within an application.
2. Make various requests to the password change function using invalid
usernames, invalid existing passwords, and mismatched “new password”
and “confirm new password” values.
3. Try to identify any behavior that can be used for username enumeration
or brute-force attacks (as described in the “Brute-Forcible Login” and
“Verbose Failure Messages” sections).
TIP If the password change form is accessible only by authenticated users
and does not contain a username fi eld, it may still be possible to supply an
arbitrary username. The form may store the username in a hidden fi eld, which
can easily be modifi ed. If not, try supplying an additional parameter contain-
ing the username, using the same parameter name as is used in the main
login form. This trick sometimes succeeds in overriding the username of the
current user, enabling you to brute-force the credentials of other users even
when this is not possible at the main login.
cc0066..iinndddd 117722 88//1199//22001111 1122::0066::3388 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 173
Chapter 6 n Attacking Authentication 173
TRY IT!
http://mdsec.net/auth/104/
http://mdsec.net/auth/117/
http://mdsec.net/auth/120/
http://mdsec.net/auth/125/
http://mdsec.net/auth/129/
http://mdsec.net/auth/135/
Forgotten Password Functionality
Like password change functionality, mechanisms for recovering from a forgot-
ten password situation often introduce problems that may have been avoided
in the main login function, such as username enumeration.
In addition to this range of defects, design weaknesses in forgotten pass-
word functions frequently make this the weakest link at which to attack the
application’s overall authentication logic. Several kinds of design weaknesses
can often be found:
n Forgotten password functionality often involves presenting the user with
a secondary challenge in place of the main login, as shown in Figure 6-5.
This challenge is often much easier for an attacker to respond to than
attempting to guess the user’s password. Questions about mothers’ maiden
names, memorable dates, favorite colors, and the like generally will have a
much smaller set of potential answers than the set of possible passwords.
Furthermore, they often concern information that is publicly known or
that a determined attacker can discover with a modest degree of effort.
Figure 6-5: A secondary challenge used in an account
recovery function
In many cases, the application allows users to set their own password
recovery challenge and response during registration. Users are inclined
cc0066..iinndddd 117733 88//1199//22001111 1122::0066::3388 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 174
174 Chapter 6 n Attacking Authentication
to set extremely insecure challenges, presumably on the false assumption
that only they will ever be presented with them. An example is “Do I own
a boat?” In this situation, an attacker who wants to gain access can use
an automated attack to iterate through a list of enumerated or common
usernames, log all the password recovery challenges, and select those that
appear most easily guessable. (See Chapter 14 for techniques regarding
how to grab this kind of data in a scripted attack.)
n As with password change functionality, application developers commonly
overlook the possibility of brute-forcing the response to a password recov-
ery challenge, even when they block this attack on the main login page. If
an application allows unrestricted attempts to answer password recovery
challenges, it is highly likely to be compromised by a determined attacker.
n In some applications, the recovery challenge is replaced with a simple
password “hint” that is confi gured by users during registration. Users
commonly set extremely obvious hints, perhaps even one that is identi-
cal to the password itself, on the false assumption that only they will
ever see them. Again, an attacker with a list of common or enumerated
usernames can easily capture a large number of password hints and then
start guessing.
n The mechanism by which an application enables users to regain control of
their account after correctly responding to a challenge is often vulnerable.
One reasonably secure means of implementing this is to send a unique,
unguessable, time-limited recovery URL to the e-mail address that the
user provided during registration. Visiting this URL within a few minutes
enables the user to set a new password. However, other mechanisms for
account recovery are often encountered that are insecure by design:
n Some applications disclose the existing, forgotten password to the user
after successful completion of a challenge, enabling an attacker to use
the account indefi nitely without any risk of detection by the owner.
Even if the account owner subsequently changes the blown password,
the attacker can simply repeat the same challenge to obtain the new
password.
n Some applications immediately drop the user into an authenticated
session after successful completion of a challenge, again enabling an
attacker to use the account indefi nitely without detection, and without
ever needing to know the user’s password.
n Some applications employ the mechanism of sending a unique recov-
ery URL but send this to an e-mail address specifi ed by the user at the
time the challenge is completed. This provides absolutely no enhanced
security for the recovery process beyond possibly logging the e-mail
address used by an attacker.
cc0066..iinndddd 117744 88//1199//22001111 1122::0066::3388 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 175
Chapter 6 n Attacking Authentication 175
TIP Even if the application does not provide an on-screen fi eld for you to pro-
vide an e-mail address to receive the recovery URL, the application may transmit
the address via a hidden form fi eld or cookie. This presents a double opportunity:
you can discover the e-mail address of the user you have compromised, and you
can modify its value to receive the recovery URL at an address of your choosing.
n Some applications allow users to reset their password’s value directly
after successful completion of a challenge and do not send any e-mail
notifi cation to the user. This means that the compromising of an account
by an attacker will not be noticed until the owner attempts to log in
again. It may even remain unnoticed if the owner assumes that she
must have forgotten her password and therefore resets it in the same
way. An attacker who simply desires some access to the application can
then compromise a different user’s account for a period of time and
therefore can continue using the application indefi nitely.
HACK STEPS
1. Identify any forgotten password functionality within the application. If
this is not explicitly linked from published content, it may still be imple-
mented (see Chapter 4).
2. Understand how the forgotten password function works by doing a
complete walk-through using an account you control.
3. If the mechanism uses a challenge, determine whether users can set or
select their own challenge and response. If so, use a list of enumerated or
common usernames to harvest a list of challenges, and review this for any
that appear easily guessable.
4. If the mechanism uses a password “hint,” do the same exercise to harvest
a list of password hints, and target any that are easily guessable.
5. Try to identify any behavior in the forgotten password mechanism that
can be exploited as the basis for username enumeration or brute-force
attacks (see the previous details).
6. If the application generates an e-mail containing a recovery URL in
response to a forgotten password request, obtain a number of these URLs,
and attempt to identify any patterns that may enable you to predict the
URLs issued to other users. Employ the same techniques as are relevant to
analyzing session tokens for predictability (see Chapter 7).
TRY IT!
http://mdsec.net/auth/142/
http://mdsec.net/auth/145/
http://mdsec.net/auth/151/
cc0066..iinndddd 117755 88//1199//22001111 1122::0066::3388 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 176
176 Chapter 6 n Attacking Authentication
“Remember Me” Functionality
Applications often implement “remember me” functions as a convenience to
users. This way, users don’t need to reenter their username and password each
time they use the application from a specifi c computer. These functions are
often insecure by design and leave the user exposed to attack both locally and
by users on other computers:
n Some “remember me” functions are implemented using a simple per-
sistent cookie, such as RememberUser=daf (see Figure 6-6). When this
cookie is submitted to the initial application page, the application trusts
the cookie to authenticate the user, and it creates an application session
for that person, bypassing the login. An attacker can use a list of common
or enumerated usernames to gain full access to the application without
any authentication.
Figure 6-6: A vulnerable “remember me” function, which automatically logs in a
user based solely on a username stored in a cookie
cc0066..iinndddd 117766 88//1199//22001111 1122::0066::3399 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 177
Chapter 6 n Attacking Authentication 177
n Some “remember me” functions set a cookie that contains not the username
but a kind of persistent session identifi er, such as RememberUser=1328.
When the identifi er is submitted to the login page, the application looks
up the user associated with it and creates an application session for
that user. As with ordinary session tokens, if the session identifi ers of
other users can be predicted or extrapolated, an attacker can iterate
through a large number of potential identifi ers to fi nd those associ-
ated with application users, and therefore gain access to their accounts