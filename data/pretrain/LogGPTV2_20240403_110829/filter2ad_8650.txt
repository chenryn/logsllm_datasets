微软在机器学习方法的应用方面一直处于领先地位，已经将这些技术应用于情报分析和实时保护等多个领域。本文将介绍一种利用自然语言处理技术来检测恶意PowerShell脚本的方法。

### 自然语言处理中的词嵌入
将词语转换为向量是机器学习算法的关键步骤之一。其中最基本的方法之一是一热编码（one-hot encoding），它会为词汇表中的每个单词分配一个唯一的数字，并用0填充的向量表示每个单词，在对应位置设置1以指示特定单词的存在。尽管一热编码已成功应用于许多场景中，但它存在一些局限性：所有单词之间的距离都是相等的，无法反映它们之间潜在的语义关系。

为克服上述限制，上下文嵌入（contextual embedding）方法被提出，该方法假设在相似上下文中出现的单词具有相近的意义，并通过大型文本库（如维基百科）训练紧凑的向量表示。Word2vec就是这一技术的一个典型实例，不仅能够捕捉到单词间的语义相似性，还能表示它们之间的相对位置关系。例如：
\[ \text{Madrid} - \text{Spain} + \text{Italy} \approx \text{Rome} \]

### PowerShell脚本中的词嵌入
为了有效训练嵌入模型，研究团队使用了大约386,000个未标记的PowerShell脚本作为数据集。当Word2Vec算法应用于PowerShell语法时，同样展示了良好的性能。具体而言，研究人员首先将PowerShell脚本分割成token，然后利用Word2Vec生成每个token的向量表示。

图1展示了从约5000个随机选取的token中提取出的二维可视化结果。可以观察到，“-eq”、“-ne”、“-gt”等运算符与它们对应的英文描述“equal”、“not equal”以及“greater than”紧密相连；同时，所有有效的执行策略设置也形成了明显的聚类。

![图1. 使用Word2vec将5000个token 2D视觉表示](image_url)

#### Token 相似度
基于Word2Vec产生的向量表示，研究者们发现了PowerShell命令与其别名之间的密切联系。例如，“Invoke-Expression”的最邻近token即为其常用别名“IEX”。此外，“Invoke-WebRequest”与“IWR”，“Get-ChildItem”与“GCI”也表现出类似的关系。

研究还考察了不同token之间的距离差异。比如，在图2右侧显示的四个token——`$i`, `$j`, `$k` 和 `$true` 中，前三个通常用于存储数值变量，而最后一个则代表布尔常量。因此，`$true` token与其他三者相比显得较为孤立。对于网络安全相关应用，研究者检查了诸如“bypass”, “normal”, “minimized”, “maximized”, “hidden”等关键词的表示形式（见图2左侧）。第一个term属于ExecutionPolicy标志的有效值集合，其余则是WindowStyle标志的合法选项。“bypass”的向量显然远离其他四个点。

![图2. 部分token的3D视觉表示](image_url)

#### 线性关系
由于Word2Vec能够保留线性结构，故通过对向量进行简单算术运算可以得到有意义的结果。以下是一些示例：
\[ \begin{align*}
\text{high} - \$\text{false} + \$\text{true} &\approx \text{'low'} \\
\text{'-eq'} - \$\text{false} + \$\text{true} &\approx \text{'-neq'} \\
\text{DownloadFile} - \$\text{destfile} + \$\text{str} &\approx \text{'DownloadString'} \\
\text{'Export-CSV'} - \$\text{csv} + \$\text{html} &\approx \text{'ConvertTo-html'} \\
\text{'Get-Process'} - \$\text{processes} + \$\text{services} &\approx \text{'Get-Service'}
\end{align*} \]
此处，符号`≈`意味着右侧的向量是与左侧表达式计算结果最为接近的那个。

### 利用深度学习检测恶意PowerShell脚本
研究小组采用Word2Vec对PowerShell语言进行嵌入处理，并以此为基础训练了一个深度学习模型来识别潜在的恶意脚本。分类器经过大量标注为良性或恶意的PowerShell样本训练而成，而嵌入层则依赖于无标签的数据集进行预训练。整个过程概述如图3所示：

![图3 模型生成过程概览](image_url)

实验是在微软Azure平台上利用GPU资源完成的，结果显示深度学习模型相较于传统机器学习方法提高了22%的准确率。最佳配置结合了卷积神经网络（CNN）和长短期记忆递归神经网络（LSTM-RNN），其架构详见图4。

![图4 最佳执行模型的网络架构](image_url)

### 实际应用案例
首次部署期间，最优深度学习模型成功地检测到了多起由红队发起的恶意PowerShell活动，部分甚至未能被其他安全工具所发现。这证明了结合PowerShell分析与先进的人工智能技术在对抗网络攻击方面的潜力。以下是几个仅通过深度学习手段才能识别出的复杂恶意脚本例子：

- **严重混淆的恶意脚本**  
  ![图5. 严重混淆的恶意脚本](image_url)
- **下载并执行payload的隐蔽代码**  
  ![图6. 下载和运行payload的混淆的脚本](image_url)
- **解码后执行恶意内容的脚本**  
  ![图7. 解密和执行恶意代码的脚本](image_url)