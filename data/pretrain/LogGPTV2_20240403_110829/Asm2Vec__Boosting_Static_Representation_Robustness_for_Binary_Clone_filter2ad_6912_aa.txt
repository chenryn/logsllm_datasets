title:Asm2Vec: Boosting Static Representation Robustness for Binary Clone
Search against Code Obfuscation and Compiler Optimization
author:Steven H. H. Ding and
Benjamin C. M. Fung and
Philippe Charland
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Asm2Vec: Boosting Static Representation Robustness for Binary Clone Search
against Code Obfuscation and Compiler Optimization
∗
Steven H. H. Ding∗, Benjamin C. M. Fung∗, and Philippe Charland†
Data Mining and Security Lab, School of Information Studies, McGill University, Montreal, Canada.
†
Emails: PI:EMAIL, PI:EMAIL
Mission Critical Cyber Security Section, Defence R&D Canada - Valcartier, Quebec, QC, Canada.
Email: PI:EMAIL
Abstract—Reverse engineering is a manually intensive but
necessary technique for understanding the inner workings
of new malware, ﬁnding vulnerabilities in existing systems,
and detecting patent infringements in released software. An
assembly clone search engine facilitates the work of reverse
engineers by identifying those duplicated or known parts.
However,
it is challenging to design a robust clone search
engine, since there exist various compiler optimization options
and code obfuscation techniques that make logically similar
assembly functions appear to be very different.
A practical clone search engine relies on a robust vector
representation of assembly code. However, the existing clone
search approaches, which rely on a manual feature engineering
process to form a feature vector for an assembly function,
fail to consider the relationships between features and identify
those unique patterns that can statistically distinguish assembly
functions. To address this problem, we propose to jointly learn
the lexical semantic relationships and the vector representation
of assembly functions based on assembly code. We have devel-
oped an assembly code representation learning model Asm2Vec.
It only needs assembly code as input and does not require
any prior knowledge such as the correct mapping between
assembly functions. It can ﬁnd and incorporate rich semantic
relationships among tokens appearing in assembly code. We
conduct extensive experiments and benchmark the learning
model with state-of-the-art static and dynamic clone search
approaches. We show that the learned representation is more
robust and signiﬁcantly outperforms existing methods against
changes introduced by obfuscation and optimizations.
1. Introduction
Software developments mostly do not start from scratch.
Due to the prevalent and commonly uncontrolled reuse of
source code in the software development process [1], [2],
[3], there exist a large number of clones in the underlying
assembly code as well. An effective assembly clone search
engine can signiﬁcantly reduce the burden of the manual
analysis process involved in reverse engineering. It addresses
the information needs of a reverse engineer by taking ad-
vantage of existing massive binary data.
Assembly code clone search is emerging as an Infor-
mation Retrieval (IR) technique that helps address security-
related problems. It has been used for differing binaries to
locate the changed parts [4], identifying known library func-
tions such as encryption [5], searching for known program-
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:52)(cid:85)(cid:70)(cid:87)(cid:70)(cid:79)(cid:1)(cid:41)(cid:15)(cid:1)(cid:41)(cid:15)(cid:1)(cid:37)(cid:74)(cid:79)(cid:72)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:17)(cid:20)
(cid:21)(cid:24)(cid:19)
ming bugs or zero-day vulnerabilities in existing software or
Internet of Things (IoT) devices ﬁrmware [6], [7], as well as
detecting software plagiarism or GNU license infringements
when the source code is unavailable [8], [9]. However,
designing an effective search engine is difﬁcult, due to vari-
eties of compiler optimizations and obfuscation techniques
that make logically similar assembly functions appear to
be dramatically different. Figure 1 shows an example. The
optimized or obfuscated assembly function breaks control
ﬂow and basic block integrity. It is challenging to identify
these semantically similar, but structurally and syntactically
different assembly functions as clones.
Developing a clone search solution requires a robust
vector representation of assembly code, by which one can
measure the similarity between a query and the indexed
functions. Based on the manually engineered features, rel-
evant studies can be categorized into static or dynamic ap-
proaches. Dynamic approaches model the semantic similar-
ity by dynamically analyzing the I/O behavior of assembly
code
[10], [11], [12], [13]. Static approaches model the
similarity between assembly code by looking for their static
differences with respect to the syntax or descriptive statistics
[6], [7], [8], [14], [15], [16], [17], [18]. Static approaches
are more scalable and provide better coverage than the
dynamic approaches. Dynamic approaches are more robust
against changes in syntax but less scalable. We identify
two problems which can be mitigated to boost the semantic
richness and robustness of static features. We show that by
considering these two factors, a static approach can even
achieve better performance than the state-of-the-art dynamic
approaches.
P1: Existing state-of-the-art static approaches fail
to
consider the relationships among features. LSH-S [16], n-
gram [8], n-perm [8], BinClone [15] and Kam1n0 [17]
model assembly code fragments as frequency values of
operations and categorized operands. Tracelet [14] models
assembly code as the editing distance between instruction
sequences. Discovre [7] and Genius [6] construct descriptive
features, such as the ratio of arithmetic assembly instruc-
tions, the number of transfer instructions, the number of
basic blocks, among others. All these approaches assume
each feature or category is an independent dimension. How-
ever, a xmm0 Streaming SIMD Extensions (SSE) register is
related to SSE operations such as movaps. A fclose libc
function call is related to other ﬁle-related libc calls such
as fopen. A strcpy libc call can be replaced with memcpy.
These relationships provide more semantic information than
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:47:52 UTC from IEEE Xplore.  Restrictions apply. 
individual tokens or descriptive statistics.
To address this problem, we propose to incorporate
lexical semantic relationship into the feature engineering
process. Manually specifying all
the potential relation-
ships from prior knowledge of assembly language is time-
consuming and infeasible in practice. Instead, we propose to
learn these relationships directly from plain assembly code.
Asm2Vec explores co-occurrence relationships among tokens
and discovers rich lexical semantic relationships among to-
kens (see Figure 2). For example, memcpy, strcpy, memncpy
and mempcpy appear to be semantically similar to each
other. SSE registers relate to SSE operands. Asm2Vec does
not require any prior knowledge in the training process.
Figure 1: Different assembly functions compiled from the same source code of gmpz tdiv r 2exp in libgmp. From left
to right, the assembly functions are compiled with gcc O0 option, gcc O3 option, LLVM obfuscator Control Flow Graph
Flattening option, and LLVM obfuscator Bogus Control Flow Graph option. Asm2Vec can statically identify them as clones.
as a way to mitigate problems P1 and P2 in current hand-
crafted features. All previous research on assembly clone
search requires a manual feature engineering process. The
clone search engine is part of an open source platform1.
• We develop a representation learning model, namely
Asm2Vec, for assembly code syntax and control ﬂow
graph. The model learns latent lexical semantics between
tokens and represents an assembly function as an inter-
nally weighted mixture of collective semantics. The learn-
ing process does not require any prior knowledge about
assembly code, such as compiler optimization settings or
the correct mapping between assembly functions. It only
needs assembly code functions as inputs.
• We show that Asm2Vec is more resilient to code obfusca-
tion and compiler optimizations than state-of-the-art static
features and dynamic approaches. Our experiment covers
different conﬁgurations of compiler and a strong obfusca-
tor which substitutes instructions, splits basic blocks, adds
bogus logics, and completely destroys the original control
ﬂow graph. We also conduct a vulnerability search case
study on a publicly available vulnerability dataset, where
Asm2Vec achieves zero false positives and 100% recalls.
It outperforms a dynamic state-of-the-art vulnerability
search method.
Asm2Vec as a static approach cannot completely defeat
code obfuscation. However,
to code
obfuscation than state-of-the-art static features. This paper is
organized as follows: Section 2 formally deﬁnes the search
problem. Section 3 systematically integrates representation
learning into a clone search process. Section 4 describes
the model. Section 5 presents our experiment. Section 6
discusses the literature. Section 7 discusses the limitations
and concludes the paper.
P2: The existing static approaches assume that features
are equally important
[14], [15], [16], [17] or require
a mapping of equivalent assembly functions to learn the
weights [6], [7]. The chosen weights may not embrace
the important patterns and diversity that distinguishes one
assembly function from another. An experienced reverse en-
gineer does not identify a known function by equally looking
through the whole content or logic, but rather pinpoints
critical spots and important patterns that identify a speciﬁc
function based on past experience in binary analysis. One
also does not need mappings of equivalent assembly code.
To solve this problem, we ﬁnd that it is possible to
simulate the way in which an experienced reverse engineer
works. Inspired by recent development in representation
learning [19], [20], we propose to train a neural network
model to read many assembly code data and let the model
identify the best representation that distinguishes one func-
tion from the rest. In this paper, we make the following
contributions:
• We propose a novel approach for assembly clone de-
tection. It is the ﬁrst work that employs representation
learning to construct a feature vector for assembly code,
it
is more resilient
1. https://github.com/McGill-DMaS/Kam1n0-Plugin-IDA-Pro
(cid:21)(cid:24)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:47:52 UTC from IEEE Xplore.  Restrictions apply. 
DĂƚŚ&ƵŶĐƟŽŶ
ĂůůƐ
times
ttimes
ttimes
sysconf
tan
log
eeexxx
exp
x
cos
ccc
ccc
ooosss
ooo
strtod
sin
sinnn
sin
tanh
dttdttaatttt
antatt n
t
tt
tt
tt
dttdtd
ttt
nhanndttaatttt
nhannttaatttt
ffmff ootttttttt
fmff ootttt
fmff ootttt
fff ott
tooottdttdtt
tootttttt
fmod
f
ddd
ffff
f
f
f
ffffffff
hypot
ttt
ttt
perror
atan2
2
2
2
2
2
2
2
2
2
2
2
atatt n
2
ceil
ce
e
ceil
ce
ce
eil
ce
e
floor
pow
www
wwwsincos
log10
1010
00
000
sqrt
ss
sigprocmask
sigaddset
sigfillset
sigemptyset
_exit
exit
sĞĐƚŽƌKƉĞƌĂƟŽŶƐ
ĂŶĚ^^ZĞŐŝƐƚĞƌƐ
psrlq
pmuludq
mulud
pmulud
ucomisd
uco
pmiiuunuuccuccooouoo
pminub
omom
movq
divpd
psubd
bd
psu
psu
b
punpcklqdq
psubb
psusu
hps
movhps
hps
xmm7
andpd
subsd
jjjpjjjpbsdjjjjjjp
jppbsdjjjj
ss
b dddb ddd
jp
jp
jjjp
p
jnp
subpd
d
minsd
min
d
mmi
nsd
inndmmii
nsd
inndmmii
minndmmiinsminndmmii
n
ns
divsd
dddiiivvvdivvv
pdpd
xorpd
pd
ddd
pd
xxxxorppp
xxorppp
p
ppp
p
sqrtsd
t d
t d
rtstt d
sq
ssq
q
q
qq
qq
dsddd q
addsd
dsddd
mulpd
mmuuu
mm
uuu
m
ooorrrpppmm
m
orrrpppmmm
pd
pd
cvt
t
cvttsd2si
addpd
orpd
o
o
bubbbduuquubbuduuandps
cvtpd2ps
ps
p
cs
cs
cscs
ssssss
sandnpd
sd
maxsd
sdd
m
m
m
mm
m
mm
d
d ddd ddd
movntdq
mov
mov
anddd
anddd
mulsd
mmmuuu
uuu
pc
pcmpgtb
ppc
r
pxor
pp
pxpp ororor
pp
pxp or
pp
p
pp
p opp
or
xmm3
xxxxxxmxxm
mm3m
movaps
m
m
pand
pppppppppppaaaaannnnnnnnnppnnnppnnnppdddpppppp
dddpppppp
psllq
pp
psllqqpsllq
qq
mq
lwlw
psrlw
spspspss
p
pspsps
ppppp
ppp
ww
www
rlrlrl
rlll
m
minss
movlhps
dq pa
dq pa
ceilf
ceii
ceilf
ceiceii
ceii
lflflf
lf
paddq
d
ddd
ddddddq
dddpsrld
xmm2
2
2
xxmmmmmm
xxmmmmmmxxx
xxm
mvmovdqa
xmm0
xxmmxxmm
m
m000
cmpltps
sss
sss
ccc
movd
pandn
pmaxub
ma
axubaxax
ma
aaa
lld pmd pmd pm
m
pmm
pslld
ps
ps
lldlld
l
addps
movlpd
dddddddddddd
ddddddddd
ufdff
pshufd
du
ufdf
ufdff
ufdf
ufdff
u