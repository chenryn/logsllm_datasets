When I have a structure like this:
    ├─┬ node_modules
    │ ├── backbone@1.2.1
    │ ├─┬ backbone.marionette@2.4.1  
    │ │ └─┬ node_modules
    │ │   ├── backbone@1.1.2
    │ │   └── backbone.babysitter@0.1.7
    │ └── backbone.babysitter@0.1.7
    └── app.js
And load these modules in my app.js like this:
    import Backbone from "backbone";
    import Marionette from "backbone.marionette";
    import "backbone.babysitter";
Now when I watch in dev tools at the sources tab, it show that the page has
loaded 2 backbones and 2 backbone.babysitters. First the self defined
versions, and secondly the dependencies of Marionette:
![webpack-
sources](https://camo.githubusercontent.com/6d65814b671bd781ee5fda4e4fb84d2fc2d179f0aa6ed7129fc2a007c23cb723/687474703a2f2f7331332e706f7374696d672e6f72672f6431796176627a79762f7765627061636b5f736f75726365732e706e67)
How can I ensure that webpack provides the self defined packages to
Marionette?