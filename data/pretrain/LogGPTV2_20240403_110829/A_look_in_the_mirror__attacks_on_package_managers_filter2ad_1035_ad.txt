The CentOS mirror was chosen for this analysis because
it was the longest mirror experiment that was conducted,
lasting 13 days. The package access trace gathered from
the CentOS mirror is shown in Figure 4. The number of
package requests and number of requests from unique IP
addresses increase roughly linearly over this time period.
Assuming the CentOS user base is not growing faster than
our mirror serves clients, we would expect the number of
unique IP addresses to ﬂatten out over time, however our
trace is not long enough to capture that eﬀect. Since clients
are counted as unique by IP address, multiple clients behind
a NAT box or proxy are counted as a single client. There are
many instances where a single IP address has several orders
of magnitude more package requests than the median client,
often with many requests for the same package. This implies
that clients are using NAT boxes or proxies in practice.
The openSUSE and Fedora mirrors (not shown) had sim-
ilar traﬃc eﬀects as the CentOS mirror. The Debian and
Ubuntu mirrors (not shown) were both up for only a short
period, but did not demonstrate this eﬀect. We suspect
this is because they do not automatically distribute requests
among the mirrors, instead requiring manual selection by a
user or the use of a tool like netselect-apt. Since our mir-
rors were only listed a few days, they did not attract a large
number of Debian or Ubuntu users.
8.2 Package Versions and Vulnerability
To perform our analysis, we needed to know the distri-
bution of package versions over time on the mirror, as well
as which of those versions are vulnerable to attack. Infor-
mation about the 58165 versions of the 3020 RPM CentOS
packages used in the last year was captured. The update
times were captured and used in the data set to determine if
diﬀerent versions existed on the main repository at the same
time. This information was used to estimate compromises
Figure 5: Compromised Clients CDF. This ﬁgure
presents the cumulative number of clients compro-
mised over a 13 day period for an attacker with 25
vulnerable versions. This illustrates the eﬀect of the
security mechanism on the number of compromised
clients.
for those package managers that require a snapshot (pack-
ages that were on a repository in the same time period).
Determining which package versions are remotely vulner-
able to attack proved to be diﬃcult and we are unaware of
a data set that provides a good model of this. To compen-
sate, we randomly chose a set of vulnerable versions from
all non-current versions of packages. In practice, we believe
that an attacker would be more likely to work to discover
vulnerabilities in old versions of popular packages as these
would allow the attacker to compromise more clients. This
work does not capture this eﬀect.
A client that uses a mirror with a package manager that
has missing or inadequate security (Pacman, Slaktool, ports,
YUM, and urpmi) is considered compromised whenever they
install a package from the mirror. A client that uses a pack-
age manager that allows an attacker to mismatch vulner-
able package versions (Portage) is considered compromised
when it installs any package with a known vulnerability. For
clients with snapshot vulnerability to replay and freeze at-
tacks (Stork, APT, YaST, APT-RPM), the attacker chooses
a snapshot time and can compromise clients who install a
package that the attacker has a vulnerable version that was
current at that time. We defer details of how the attacker
chooses the snapshot time to a tech report [5].
Replay attacks only impact clients that are installing new
packages instead of those that are updating existing pack-
ages. From the mirror’s request log, it isn’t possible to de-
termine whether a client is installing or updating a package.
This means the results for Portage, Stork, APT, APT-RPM,
and YaST represent an upper bound. The package managers
without security (Slaktool, ports, Pacman) are not impacted
because an attacker can create arbitrary packages. Similarly,
the results for YUM and urpmi are accurate because as long
as there exists a vulnerable package the client hasn’t updated
to a newer version, an extraneous dependencies attack can
compromise the client.
8.3 Number of Compromised Clients
Using the CentOS trace and version information, the num-
ber of clients compromised by a malicious mirror was esti-
mated (Figure 5). Note that this estimation doesn’t take
into account the security practices of the distribution. As
described in Section 7.6, users from distributions with ad-
ditional security practices may be safer than what is de-
scribed here. We provide information about the security
of the package manager because many of the smaller dis-
tributions reuse package managers for more popular distri-
butions and use only the security mechanisms provided by
their package manager.
As the true number of vulnerable packages is not known,
we use a value of 25 vulnerable packages (the eﬀect of vary-
ing the number of vulnerable packages is shown in Figure 6).
These plots show that the security model of the package
manager has a great impact on the number of clients that
can be compromised. A client that restricts attackers to mis-
matched vulnerable package versions reduces the maximum
estimated number of compromised clients by about a factor
of 4 to around 900 over the 13 day period. Package man-
agers whose security mechanisms require a snapshot reduce
the maximum estimated number of clients compromised to
under 500. A package manager with signatures on the root
metadata and protection against replay and freeze attacks
(for example, modiﬁed Stork) will not have any compromises
from an attacker that controls a mirror.
The package managers that allow the attacker to mis-
match packages or that require a snapshot vary based upon
the number of vulnerable packages. The eﬀect of varying
the number of vulnerabilities is shown in Figure 6. The
number of packages with vulnerabilities that the attacker
can exploit is on the x-axis. The plots show that package
managers that allow an attacker to choose diﬀerent versions
of packages that existed on the root repository at diﬀerent
times (mismatch) are more vulnerable than package man-
agers that require a snapshot.
This ﬁgure clearly shows that a package manager that
requires an attacker to present a consistent set of packages
provides better security than one that allows an attacker to
mismatch packages. Somewhat disturbing is the signiﬁcant
number of clients that can be compromised if there are only
5 vulnerable package versions.
Our leased server was bandwidth-limited and mirrored
multiple distributions simultaneously for cost reasons. An
attacker would likely expend more bandwidth or set up mul-
tiple mirrors to capture additional traﬃc, thus leading to
more compromises.
9. DISCLOSURE AND DISCUSSION
After disclosing these vulnerabilities to package manager
developers via Ryan Giobbi at CERT [12], we were contacted
by proactive developers at Gentoo and openSUSE who con-
ﬁrmed our ﬁndings and began working on ﬁxes [14]. We
were also able to get in touch with developers at CentOS,
Red Hat, Fedora, Ubuntu, and Debian and had conﬁrma-
tion and discussion about how we recommend they ﬁx the
issues we uncovered [10]. We believe that most of the other
distributions will follow suit and either patch the vulnera-
bilities themselves or ask their package manager developer
to do so. In the interim, we provide some suggestions about
how distributions and users can increase their security:
• If the package manager supports HTTPS and it cor-
rectly checks certiﬁcates, the distribution can set up
repositories or mirrors that support HTTPS transfers.
k
e
e
W
i
r
e
p
d
e
s
m
o
r
p
m
o
C
s
t
n
e
i
l
C
 700
 600
 500
 400
 300
 200
 100
 0
Mismatch
Snapshot
 5
 10  15  20  25  30  35  40  45  50
Vulnerable Packages
Figure 6: Clients Compromised Per Week. This ﬁg-
ure presents the estimated number of clients com-
promised per week by an attacker that controls a
mirror. The error bars show one standard devia-
tion. The plots are oﬀset slightly for readability.
This will not protect against a malicious mirror, but
will prevent a man-in-the-middle attack from an out-
sider.
• The distribution can review their mirror policy care-
fully and validate administrator credentials before putting
a mirror on the oﬃcial mirror list. The distribution
should also review their policies for deciding how mir-
rors are allocated traﬃc to prevent a mirror from being
able to target attacks (perhaps indirectly by advertis-
ing high bandwidth).
• The distribution’s mirrors should use a secure connec-
tion (e.g. SSH) to synchronize with the main repos-
itory to prevent an attacker from impersonating the
main repository.
• Users should check that the versions of the packages
their package manager recommends for installation are
recent through multiple sources.
10. RELATED WORK
Many package managers have GUI front-ends [15, 27].
These GUI-based tools are usually just a diﬀerent interface
to the functionality provided by a command line package
manager and so are identical from a security standpoint.
There are many techniques that help to support software
security such as systems that ensure the authenticity and
integrity of software (including SFS-RO [16], SUNDR [17],
Deployme [20], and Self-Signed Executables [30]), and code
signing certiﬁcates [6]. These are complimentary to the so-
lutions presented in this paper.
There are several systems that access multiple mirrors
to improve download performance and avoid DoS attacks.
Byers et al. [4] describe using Tornado codes to improve
performance by downloading from several mirrors simulta-
neously. This has the side-eﬀect of allowing the client to
make progress even if one of the mirror misbehaves. Sharma
et al. [24] describe having the client “hop” between mirrors
while downloading a ﬁle. This prevents an attacker from
launching a DoS attack on the client because the attacker
does not know which mirror the client will use next. We
hope that raised awareness will result in organizations try-
ing these techniques in practice.
11. CONCLUSION
This work identiﬁes security issues in ten popular pack-
age managers in use today. Furthermore, we demonstrate
that while some security mechanisms used by distributions
may help to prevent attacks, others may actually decrease
security. We estimate that when ignoring any additional se-
curity mechanisms, an attacker with a mirror that costs $50
per week can compromise between 150 and 1500 clients each
week. These security issues have been disclosed to distribu-
tions that are currently working to ﬁx these problems.
12. ACKNOWLEDGMENTS
We would like to thank our shepherd Steven Murdoch
and the anonymous reviewers for their insightful comments
and feedback. We would like to thank Ryan Giobbi at the
CERT for helping us to responsibly disclose these issues to
the package manager maintainers. We would like to thank
Jake Edge, Dag Wieers, Kees Cook, Jan iankko Lieskovsky,
Robin Johnson, Ludwig Nussel, Peter Poeml, Marcus Meiss-
ner, Josh Bressers, Tomas Hoger, Jason Gunthorpe, Kyri-
cos Pavlou, Mike Piatek, Chris Gniady, Wenjun Hu, and
Tadayoshi Kohno for their comments on our research. We
would also like to thank the members of the Stork project for
their help in creating Stork and their input on this research.
This work was funded in part by the PlanetLab Consortium.
13. REFERENCES
[1] Debian APT tool ported to Red Hat Linux.
http://www.apt-get.org/.
[2] APT-RPM. http://apt-rpm.org/.
[3] Arch Linux (Don’t Panic) Installation Guide.
http://www.archlinux.org/static/docs/
arch-install-guide.txt.
[4] J. Byers, M. Luby, and M. Mitzenmacher. Accessing
multiple mirror sites in parallel: using Tornado codes
tospeed up downloads. INFOCOM’99. Eighteenth
Annual Joint Conference of the IEEE Computer and
Communications Societies. IEEE, 1, 1999.
[5] J. Cappos, J. Samuel, S. Baker, and J. Hartman. A
Look In the Mirror: Attacks on Package Managers.
Technical Report TR–08–06, Department of Computer
Science, University of Arizona, Jul 2008.
[6] Introduction to Code Signing. http://msdn2.
microsoft.com/en-us/library/ms537361.aspx.
[7] A. Crooks. The netbsd update system. In ATEC ’04:
Proceedings of the USENIX Annual Technical
Conference, pages 17–17, Berkeley, CA, USA, 2004.
USENIX Association.
[8] debsigs - What is debsigs. http:
//linux.about.com/cs/linux101/g/debsigs.htm.
[9] DistroWatch.com: Editorial: How Popular is a
Distribution? http://distrowatch.com/weekly.php?
issue=20070827#feature.
[10] M. Domsch. Re: YUM security issues...
https://www.redhat.com/archives/
fedora-infrastructure-list/2008-July/msg00114.
html.
[11] man dpkg-sig.
http://pwet.fr/man/linux/commandes/dpkg_sig.
[12] R. Giobbi. Vulnerability Analysis Blog: Safely Using
Package Managers. http://www.cert.org/blogs/
vuls/2008/07/using_package_managers.html.
[13] J. Hughes. HughesJR.com – Attacks on Package
Managers – ummm...
http://www.hughesjr.com/content/view/22/1/.
[14] R. H. Johnson. [gentoo] Index of
/users/robbat2/tree-signing-gleps.
http://viewcvs.gentoo.org/viewcvs.py/gentoo/
users/robbat2/tree-signing-gleps/.
[15] The KPackage Handbook. http://docs.kde.org/
development/en/kdeadmin/kpackage/.
[16] D. Mazi`eres, M. Kaminsky, M. F. Kaashoek, and
E. Witchel. Separating key management from ﬁle
system security. In Proc. 17th SOSP, pages 124–139,
Kiawah Island Resort, SC, Dec 1999.
[17] D. Mazi`eres and D. Shasha. Building secure ﬁle
systems out of Byzantine storage. In PODC ’02:
Proceedings of the twenty-ﬁrst annual symposium on
Principles of distributed computing, pages 108–117,
New York, NY, USA, 2002. ACM.
[18] milw0rm - exploits : vulnerabilities : videos : papers :
shellcode. http://www.milw0rm.com.
[19] Netcraft: Strong growth for Debian.
http://news.netcraft.com/archives/2005/12/05/
strong_growth_for_debian.html.
[20] K. Oppenheim and P. McCormick. Deployme:
Tellme’s Package Management and Deployment
System. In Proc. 14th Systems Administration
Conference (LISA ’00), pages 187–196, New Orleans,
LA, Dec 2000.
[21] Gentoo-Portage. http://gentoo-portage.com/.
[22] Installing Applications: Packages and Ports.
http://www.freebsd.org/doc/en_US.ISO8859-1/
books/handbook/ports.html.
[23] RPM Package Manager. http://www.rpm.org/.
[24] P. Sharma, P. Shah, and S. Bhattacharya. Mirror
hopping approach for selective denial of service
prevention. Object-Oriented Real-Time Dependable
Systems, 2003.(WORDS 2003). Proceedings of the
Eighth International Workshop on, pages 200–208,
2003.
[25] Slackware Package Management. http:
//www.slacksite.com/slackware/packages.html.
[26] Stork. http://www.cs.arizona.edu/stork.
[27] Synaptic Package Manager - Home.
http://www.nongnu.org/synaptic/.
[28] URPMI. http://www.urpmi.org/.
[29] dkpg-sig support wanted?
http://nixforums.org/about101637-asc-15.html.
[30] G. Wurster and P. van Oorschot. Self-Signed
Executables: Restricting Replacement of Program
Binaries by Malware. In 2nd USENIX Workshop on
Hot Topics in Security, Boston, MA, Aug 2007.
[31] YaST - openSuSE. http://en.opensuse.org/YaST.
[32] Yum: Yellow Dog Updater Modiﬁed.
http://linux.duke.edu/projects/yum/.