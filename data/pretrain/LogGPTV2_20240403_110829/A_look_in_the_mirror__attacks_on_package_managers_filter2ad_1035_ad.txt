### Analysis of the CentOS Mirror and Package Version Vulnerabilities

#### 1. Introduction
The CentOS mirror was selected for this analysis due to its extended duration, lasting 13 days, making it the longest-running mirror experiment. The package access trace from the CentOS mirror is depicted in Figure 4, which shows a roughly linear increase in both the number of package requests and the number of unique IP addresses over the observed period.

#### 2. Data Analysis
Assuming the CentOS user base is not growing faster than the mirror serves clients, we would expect the number of unique IP addresses to plateau over time. However, our trace is too short to capture this effect. Since clients are identified by their IP address, multiple clients behind a NAT box or proxy are counted as a single client. This leads to instances where a single IP address has significantly more package requests than the median client, often for the same package. This suggests that clients are using NAT boxes or proxies in practice.

Similar traffic patterns were observed in the openSUSE and Fedora mirrors, while the Debian and Ubuntu mirrors, which were operational for a shorter period, did not exhibit this behavior. We hypothesize that this is because these distributions do not automatically distribute requests among mirrors, instead requiring manual selection by users or the use of tools like netselect-apt. As our mirrors were only listed for a few days, they did not attract a large number of Debian or Ubuntu users.

#### 3. Package Versions and Vulnerability
To conduct our analysis, we needed to determine the distribution of package versions over time on the mirror and identify which versions are vulnerable to attack. We captured information about 58,165 versions of 3,020 RPM CentOS packages used in the last year, including update times. This data was used to estimate the number of compromised clients for different package managers.

Determining which package versions are remotely vulnerable proved challenging, and no comprehensive dataset exists. To address this, we randomly selected a set of vulnerable versions from all non-current package versions. In practice, an attacker is likely to target vulnerabilities in older, popular packages to compromise more clients. Our analysis does not fully capture this effect.

#### 4. Security Mechanisms and Compromised Clients
- **Package Managers with Missing or Inadequate Security (Pacman, Slaktool, ports, YUM, urpmi):** Clients are considered compromised when they install any package from the mirror.
- **Package Managers Allowing Mismatched Vulnerable Versions (Portage):** Clients are compromised if they install a package with a known vulnerability.
- **Package Managers with Snapshot Vulnerability (Stork, APT, YaST, APT-RPM):** An attacker can choose a snapshot time and compromise clients who install a package with a vulnerable version current at that time.

Replay attacks affect clients installing new packages rather than updating existing ones. From the mirrorâ€™s request log, it is impossible to distinguish between installation and updates, so the results for Portage, Stork, APT, APT-RPM, and YaST represent an upper bound. Package managers without security (Slaktool, ports, Pacman) are not impacted because an attacker can create arbitrary packages. Similarly, the results for YUM and urpmi are accurate as long as a vulnerable package exists and the client has not updated to a newer version.

#### 5. Estimation of Compromised Clients
Using the CentOS trace and version information, we estimated the number of clients compromised by a malicious mirror (Figure 5). This estimation does not account for the security practices of the distribution. As described in Section 7.6, users from distributions with additional security practices may be safer.

We used a value of 25 vulnerable packages for our estimation (the effect of varying the number of vulnerable packages is shown in Figure 6). These plots indicate that the security model of the package manager significantly impacts the number of compromised clients. A client that restricts attackers to mismatched vulnerable package versions reduces the maximum estimated number of compromised clients by about a factor of 4 to around 900 over the 13-day period. Package managers with security mechanisms requiring a snapshot reduce the maximum estimated number of compromised clients to under 500. A package manager with signatures on root metadata and protection against replay and freeze attacks (e.g., modified Stork) will not have any compromises from an attacker controlling a mirror.

#### 6. Disclosure and Discussion
After disclosing these vulnerabilities to package manager developers via Ryan Giobbi at CERT, proactive developers at Gentoo and openSUSE confirmed our findings and began working on fixes. We also contacted developers at CentOS, Red Hat, Fedora, Ubuntu, and Debian, who confirmed and discussed how to address the issues. We recommend the following security measures:
- **HTTPS Support:** If the package manager supports HTTPS and correctly checks certificates, the distribution can set up repositories or mirrors that support HTTPS transfers.
- **Mirror Policy Review:** The distribution should carefully review their mirror policy and validate administrator credentials before adding a mirror to the official list. Policies for allocating traffic to mirrors should prevent targeted attacks.
- **Secure Synchronization:** Mirrors should use secure connections (e.g., SSH) to synchronize with the main repository to prevent impersonation.
- **User Verification:** Users should verify that the recommended package versions are recent through multiple sources.

#### 7. Related Work
Many package managers have GUI front-ends, but these are identical from a security standpoint. Techniques such as systems ensuring software authenticity and integrity (SFS-RO, SUNDR, Deployme, Self-Signed Executables, and code signing certificates) complement the solutions presented here. Systems that access multiple mirrors to improve download performance and avoid DoS attacks, such as Tornado codes and mirror hopping, also enhance security.

#### 8. Conclusion
This work identifies security issues in ten popular package managers and demonstrates that while some security mechanisms help prevent attacks, others may decrease security. We estimate that an attacker with a $50-per-week mirror can compromise between 150 and 1,500 clients each week. These issues have been disclosed to distributions, which are working to fix them.

#### 9. Acknowledgments
We thank Steven Murdoch, the anonymous reviewers, Ryan Giobbi at CERT, and many others for their contributions and feedback. This work was funded in part by the PlanetLab Consortium.

#### 10. References
[References are provided in the original text and are not repeated here.]

This revised text aims to provide a clearer, more coherent, and professional presentation of the original content.