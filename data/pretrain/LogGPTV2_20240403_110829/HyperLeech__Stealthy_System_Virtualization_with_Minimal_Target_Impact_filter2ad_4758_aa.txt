title:HyperLeech: Stealthy System Virtualization with Minimal Target Impact
through DMA-Based Hypervisor Injection
author:Ralph Palutke and
Simon Ruderich and
Matthias Wild and
Felix C. Freiling
HyperLeech: Stealthy System Virtualization with Minimal Target Impact through
DMA-Based Hypervisor Injection
Ralph Palutke
Friedrich-Alexander-Universität Erlangen
Matthias Wild
Friedrich-Alexander-Universität Erlangen
Simon Ruderich
Friedrich-Alexander-Universität Erlangen
Felix C. Freiling
Friedrich-Alexander-Universität Erlangen
Abstract
In the recent past, malware began to incorporate anti-forensic
techniques in order to hinder analysts from gaining mean-
ingful results. Consequently, methods that allow the stealthy
analysis of a system became increasingly important.
In this paper, we present HyperLeech, the ﬁrst approach
which uses DMA to stealthily inject a thin hypervisor into
the memory of a target host, transparently shifting its oper-
ation into a hardware-accelerated virtual machine. For the
code injection, we make use of external PCILeech hardware
to enable DMA to the target memory. Combining the advan-
tages of hardware-supported virtualization with the beneﬁts
provided by DMA-based code injection, our approach can
serve analysts as a stealthy and privileged execution layer that
enables powerful live forensics and atomic memory snapshots
for already running systems. Our experiments revealed that
HyperLeech is sufﬁcient to virtualize multi-core Linux hosts
without causing signiﬁcant impact on a target’s processor and
memory state during its installation, execution, and removal.
Although our approach might be misused for malicious pur-
poses, we conclude that it provides new knowledge to help
researchers with the design of stealthy system introspection
techniques that focus on preserving a target system’s state.
1 Introduction
The ongoing arms race between malware authors and security
practitioners lead to increasingly sophisticated approaches
on both sides. Recently, malware began to incorporate anti-
forensics to evade analysis. Sparks and Butler [58] presented
a novel rootkit technique that subverts the memory transla-
tion process of the Windows operating system, and exploits
Translation Lookaside Buffer (TLB) incoherencies to hide ma-
licious memory. Palutke and Freiling [42], as well as Torrey
[61], further enhanced this concept by dynamically virtualiz-
ing a victim system’s view on the physical memory, relying
on a kernel extension. Other approaches use Direct Kernel
Object Manipulation (DKOM), ﬁrst discussed by Butler [6],
to alter important kernel structures, as memory forensics and
live analysis often rely on their integrity [5, 22, 59]. In ad-
dition, Zhang et al. [68] bypass state-of-art memory acquisi-
tion by manipulating the physical address layout on x86 plat-
forms. Besides attacks that target software-based approaches,
Rutkowska [53] demonstrated a method to attack Direct Ac-
cess Memory (DMA)-based acquisition by remapping parts
of the Memory Mapped I/O (MMIO) address space. Zdzi-
chowski et al. [66] listed further approaches in a recent meta
study, surveying the landscape of modern anti-forensics. Ap-
proaches like these indicate the necessity for novel analysis
techniques that are robust against anti-forensics.
To deliver ideal analysis results, an approach must meet two
requirements which seemingly contradict each other: First, the
soundness of a particular analysis method indicates its robust-
ness against anti-forensics, meaning its degree of accuracy
based on the actual data of the current target state. Second, a
method’s target impact implies the amount of modiﬁcations it
introduces to a target’s memory and processor state during its
installation, operation, and removal. From a forensics point
of view, a low target impact is desirable, as it prevents both a
potential loss of evidence and the chance for evasive malware
to alter its behavior [31]. Running an analysis tool at the same
or even a lower privileged domain gives malware the chance
to intercept its functionality and falsify results. Consequently,
a sound analysis cannot be guaranteed. To keep control over
a system’s operation, security software steadily migrated to
higher privileged layers [32]. In contrast to malware infec-
tions, the deployment of privileged analysis software mostly
depends on a system’s regular loading mechanisms. These
have a quite signiﬁcant impact on the target state and usually
require root access, both disadvantageous from a forensics
perspective. Furthermore, analysis methods are usually de-
ployed after a system has been infected, which gives malware
the chance to tamper with their installation. Hence, analysts
began to use increasingly stealthy approaches to conceal the
deployment of their methods. Stüttgen and Cohen [60] in-
ject a minimal memory acquisition module into an already
existing host kernel module with only a small target impact.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    165
Besides the installation of an analysis method, both its execu-
tion and removal, as well as the extraction of results, which
often makes use of existing communication channels, alter
the target state to an even higher degree. In addition, these
communication channels might already be compromised, so
that the integrity of the transferred data cannot be guaranteed.
With the rise of anti-forensics, security practitioners started
to use DMA from external hardware in order to analyze a
system [7, 15, 36, 44]. This allows the transparent access of a
system’s memory without notably impacting its state, as DMA
does not interfere with a processor’s operation. Since these
devices are often hot pluggable, DMA-based approaches offer
a signiﬁcant advantage when targeting production systems,
where down times are often not acceptable. As hot plugging
allows a method to be deployed even after the infection of a
system, it is especially useful for malware analysis. In addi-
tion, DMA usually bypasses authorization checks enforced
by the operating system. As a downside, Gruhn and Freiling
[21] showed that these approaches suffer from a lack of atom-
icity, since the target is not suspended during the analysis or
acquisition process. Consequently, they cannot produce fully
sound analysis results.
Virtualization-based approaches provide the transparent
analysis of a system from the more privileged hypervisor
layer. The respective target is booted inside a virtualized exe-
cution environment (respectively VM), enabling the isolated
analysis of the system through Virtual Machine Introspection
(VMI) [18]. Since investigators are mostly confronted with
already infected systems running on bare metal, these cannot
be virtualized by conventional technologies like KVM [20]
or Xen [4], however. This led analysts to use on-the-ﬂy vir-
tualization, initially introduced by Rutkowska [52] and Zovi
[69], which installs a thin hypervisor through a kernel driver,
and migrates the running system into a hardware-accelerated
VM for further analysis [29, 39, 47, 65]. Although on-the-ﬂy
virtualization greatly improves the analysis of a system, it
falls short in several categories. Loading a kernel driver re-
quires root privileges and has signiﬁcant impact on the target
state. Furthermore, an already infected kernel might subvert
the installation process altogether.
In this paper, we present HyperLeech, the ﬁrst approach
combining transparent DMA-based code injection and on-
the-ﬂy virtualization. In contrast to existing solutions, our
approach enables the sound analysis of a target system with
negligible impact on its processor and memory state. In detail,
we
• are the ﬁrst to use DMA from an external PCILeech
device to stealthily inject a hypervisor into a target’s
memory, bypassing common access restrictions,
• use Intel’s Virtual Machine Extensions (VMXs) to virtu-
alize a running target by transparently shifting it into a
hardware-accelerated VM, and hide our system by set-
ting up Extended Page Tables (EPTs), providing an ab-
straction of the physical memory,
• devise the process of removing our system without leav-
ing detectable traces,
• implement a prototype that is capable of virtualizing run-
ning multi-core Linux hosts without notably impacting
the target’s processor and memory state,
• evaluate the target impact caused by the injection, exe-
cution and removal of our system,
• point out the performance impact caused by the injection
of our system, and
• discuss possible mitigation strategies, as our approach
might be misused as a powerful rootkit.
The remainder of this paper is outlined as follows: Sec-
tion 2 provides fundamental background knowledge that is
necessary to understand our design concepts. In Section 3, we
present an architectural overview of the HyperLeech system,
and describe its injection and removal. Section 4 evaluates
the impact on both the target’s state and performance, and
discusses possible mitigation strategies. Section 5 brieﬂy sur-
veys related work and possible use cases. Concluding remarks
and future research directions are given in Section 6.
2 Technical Background
For a better understanding of our design choices, we brieﬂy
outline important technical fundamentals. Consequently, we
introduce the PCILeech framework (Section 2.1), explain the
mechanics of hardware-supported virtualization provided by
Intel’s VT-x (Section 2.2), and shed light on the Advanced Pro-
grammable Interrupt Controller (APIC) (Section 2.3). Read-
ers familiar with the topics can skip these sections.
2.1 PCILeech
Originally developed by Frisk [15], the PCILeech project
is a generic attack framework that allows external devices
to use DMA over Peripheral Component Interconnect Ex-
press (PCIe) to inject code into the physical memory of a
target system. Due to PCIe offering hot plug functionality, a
variety of PCILeech devices can be attached to a system at
runtime. Similarly, such devices can be unplugged at any time
without causing signiﬁcant interruptions. PCILeech supports
various hardware conﬁgurations which need to be ﬂashed
with dedicated ﬁrmware. For this work, we made use of the
PCIe Screamer device [3] which is based on the XC7A35T
Xilinx 7 Field-Programmable Gate Array (FPGA) providing
native 64-bit DMA with access rates about 100 MB/s. Over
the Universal Serial Bus 3 (USB3) interface, the device is
connected to an external controller system which is used to
166    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
control the PCILeech software. To attach PCIe Screamer to a
free PCIe slot of the target host, some systems might require
speciﬁc adapters due to different form factors of PCIe (e.g.,
Express Card, mPCIe, Thunderbolt). For HyperLeech, we
only made use of PCILeech’s native DMA support to inject
our custom hypervisor into a running target system. Hence,
no additional software needs to be deployed on the target side.
Intel VT-x
2.2
To improve the performance of VMs, modern processors pro-
vide hardware-supported virtualization. Intel [24, vol. 3C] in-
troduced several Virtual Machine Extensions (VMXs) which
expand a processor’s instruction set to allow unmodiﬁed
guests to be executed inside a hardware-accelerated VM. It
provides the new processor mode VMX operation which is
further divided into the execution modes VMX root and VMX
non-root. The former describes a privileged mode that runs
a hypervisor (or Virtual Machine Monitor (VMM)), used to
control the VMs and schedule hardware resources. VMX non-
root, on the other hand, serves unmodiﬁed guest systems as a
transparent and restricted execution environment. The proces-
sor uses VMX transitions to switch between the two operation
modes. With the occurrence of certain events (e.g., accesses
to speciﬁc registers, execution of restricted instructions, or the
interaction with emulated devices) in VMX non-root mode,
the processor generates a VM exit which transfers control to
the hypervisor. Subsequently, the hypervisor has the chance
to handle the fault and resume the guest. To launch and con-
trol a VM, the hypervisor must conﬁgure a Virtual Machine
Control Structure (VMCS) for each core. Besides comprising
the entire state of the guest, this central management struc-
ture determines the events that are to be intercepted by the
hypervisor.
Next to VMX, Intel processors provide Extended Page Ta-
bles (EPTs) that support the virtualization of a VM’s physical
memory. When enabled, a second level address translation
maps the guest’s physical memory to the real memory of the
host machine. Similar to the conventional paging structures,
EPTs provide several access ﬂags that prohibit unauthorized
memory accesses. Breaching these access privileges leads
to an EPT violation which is intercepted and handled by the
hypervisor. This gives the hypervisor the chance to restrict
the guest from accessing certain memory regions.
Intel APIC
2.3
With the emergence of Symmetric Multiprocessing (SMP)
architectures, Intel introduced the APIC system to deliver
and control external interrupts. Its architecture consists of
two components which communicate over the system bus.
The I/O APIC routes external interrupts to one or more Lo-
cal Advanced Programmable Interrupt Controllers (LAPICs),
each belonging to a particular processor core. The LAPICs
Figure 1: Architectural overview of the HyperLeech system.
receive interrupts not only from the I/O APIC, but also from
the processors’ interrupt pins and other internal sources, and
forward them to their respective cores for speciﬁc handling.
The LAPIC appears as a memory-mapped device, provid-
ing its physical base address through the IA32_APIC_BASE
Model Speciﬁc Register (MSR). The kernel initializes this reg-
ister by parsing the host’s Advanced Conﬁguration and Power
Interface (ACPI) tables during the early boot phase. Over
time, Intel introduced several successors which enhanced the
design of the APIC. While the xAPIC only brought a few
minor changes, the x2APIC appears as the latest iteration
which is accessed through certain MSRs instead of MMIO.
Both modes are supported by modern processors, and can be
switched by specifying a certain bit in the IA32_APIC_BASE
MSR. This requires the system to be rebooted, however.
Besides interrupts triggered by external devices, the LAPIC
provides the possibility to generate Non-maskable Interrupts
(NMIs). In contrast to maskable interrupts, NMI delivery can-
not be trivially deactivated. Each LAPIC provides several
Local Vector Table (LVT) registers that are used to conﬁg-
ure the delivery of different NMI types. Among others, these
include timer interrupts, thermal sensor interrupts, and per-
formance counter overﬂows. The mask bit in an LVT allows
to disable the delivery of the corresponding NMI type by
preventing the LAPIC from forwarding the interrupt to its
processor. Once set, further incoming NMIs of the same type
set the pending bit in the same LVT to signal an outstanding
interrupt. The pending NMI is not delivered to the processor
until the mask bit in the respective LVT has been cleared.
While being disabled only one upcoming NMI can be kept
pending. Any additional NMI is lost.
3 System Overview
This section provides an architectural overview of the Hyper-
Leech system, and illustrates its injection (Section 3.2) and
removal (Section 3.3) mechanisms. The basic architecture
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    167
Analysis	HostTarget	HostPCIe	ScreamerDMAUSB3PCILeechAgentMemoryHypervisorTargetof our prototype comprises several components which are
grayly depicted in Figure 1. HyperLeech targets a physical
host which is subject to be analyzed. As the target will exclu-