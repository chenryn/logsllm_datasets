# Checklist
  * I have verified that the issue exists against the `master` branch of Celery.
  * This has already been asked to the discussion group first.
  * I have read the relevant section in the  
contribution guide  
on reporting bugs.
  * I have checked the issues list  
for similar or identical bug reports.
  * I have checked the pull requests list  
for existing proposed fixes.
  * I have checked the commit log  
to find out if the bug was already fixed in the master branch.
  * I have included all related issues and possible duplicate issues  
in this issue (If there are none, check this box anyway).
## Mandatory Debugging Information
  * I have included the output of `celery -A proj report` in the issue.  
(if you are not able to do this, then at least specify the Celery  
version affected).
  * I have verified that the issue exists against the `master` branch of Celery.
  * I have included the contents of `pip freeze` in the issue.
  * I have included all the versions of all the external dependencies required  
to reproduce this bug.
## Optional Debugging Information
  * I have tried reproducing the issue on more than one Python version  
and/or implementation.
  * I have tried reproducing the issue on more than one message broker and/or  
result backend.
  * I have tried reproducing the issue on more than one version of the message  
broker and/or result backend.
  * I have tried reproducing the issue on more than one operating system.
  * I have tried reproducing the issue on more than one workers pool.
  * I have tried reproducing the issue with autoscaling, retries,  
ETA/Countdown & rate limits disabled.
  * I have tried reproducing the issue after downgrading  
and/or upgrading Celery and its dependencies.
## Related Issues and Possible Duplicates
#### Related Issues
  * None
#### Possible Duplicates
  * None
## Environment & Settings
**Celery version** : 4.4.7 (cliffs)
**`celery report` Output:**
    celery report
    software -> celery:4.4.7 (cliffs) kombu:4.6.11 py:3.8.12
                billiard:3.6.4.0 py-amqp:2.6.1
    platform -> system:Linux arch:64bit
                kernel version:5.10.47-linuxkit imp:CPython
    loader   -> celery.loaders.default.Loader
    settings -> transport:amqp results:disabled
# Steps to Reproduce
## Required Dependencies
  * **Minimal Python Version** : N/A or Unknown
  * **Minimal Celery Version** : N/A or Unknown
  * **Minimal Kombu Version** : N/A or Unknown
  * **Minimal Broker Version** : N/A or Unknown
  * **Minimal Result Backend Version** : N/A or Unknown
  * **Minimal OS and/or Kernel Version** : N/A or Unknown
  * **Minimal Broker Client Version** : N/A or Unknown
  * **Minimal Result Backend Client Version** : N/A or Unknown
### Python Packages
**`pip freeze` Output:**
    amqp==2.6.1
    asgiref==3.4.1
    attrs==21.2.0
    Babel==2.9.1
    billiard==3.6.4.0
    boto3==1.14.29
    botocore==1.17.63
    celery==4.4.7
    certifi==2021.5.30
    chardet==3.0.4
    click==8.0.1
    Django==3.2
    django-cors-headers==3.4.0
    django-environ==0.4.5
    django-filter==2.3.0
    django-phonenumber-field==4.0.0
    django-storages==1.9.1
    django-tenants==3.3.0
    djangorestframework==3.12.4
    djangorestframework-camel-case==1.1.2
    djangorestframework-simplejwt==4.6.0
    docutils==0.15.2
    drf-spectacular==0.14.0
    gunicorn==20.0.4
    h11==0.12.0
    idna==2.10
    inflection==0.5.1
    jmespath==0.10.0
    jsonschema==3.2.0
    kombu==4.6.11
    newrelic==5.22.0.151
    phonenumbers==8.12.2
    Pillow==8.1.2
    psycopg2==2.8.6
    PyJWT==2.1.0
    pyrsistent==0.18.0
    python-dateutil==2.8.2
    pytz==2021.1
    PyYAML==5.4.1
    requests==2.24.0
    s3transfer==0.3.7
    six==1.16.0
    sqlparse==0.4.2
    uritemplate==3.0.1
    urllib3==1.25.11
    uvicorn==0.14.0
    vine==1.3.0
### Other Dependencies
GDAL 3.2.3 GEOS 3.9.1 Postgres 13.1 Postgis 3.1 Docker/docker-compose
## Minimally Reproducible Test Case
When using Postigs with Django, it is required to set a couple of variables in
`settings.py`, so that Django can detect the required dynamic libs. When we
run celery, celery calls `django.setup()`, but that doesn't register the
defined paths, which leads to an import error in Django.
    # dlibs for gis
    if env.get_value("GDAL_LIBRARY_PATH", default=None):
        GDAL_LIBRARY_PATH = env("GDAL_LIBRARY_PATH")
    if env.get_value("GEOS_LIBRARY_PATH", default=None):
        GEOS_LIBRARY_PATH = env("GEOS_LIBRARY_PATH")
# Expected Behavior
For settings to be configured properly and celery starts normally.
# Actual Behavior
It raises an import error while trying to import the dynamic library, the path
of which has been defined in settings.
    celery_1    | Traceback (most recent call last):
    celery_1    |   File "/usr/local/bin/celery", line 8, in 
    celery_1    |     sys.exit(main())
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/__main__.py", line 16, in main
    celery_1    |     _main()
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/bin/celery.py", line 322, in main
    celery_1    |     cmd.execute_from_commandline(argv)
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/bin/celery.py", line 499, in execute_from_commandline
    celery_1    |     super(CeleryCommand, self).execute_from_commandline(argv)))
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/bin/base.py", line 305, in execute_from_commandline
    celery_1    |     return self.handle_argv(self.prog_name, argv[1:])
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/bin/celery.py", line 491, in handle_argv
    celery_1    |     return self.execute(command, argv)
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/bin/celery.py", line 415, in execute
    celery_1    |     return cls(
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/bin/worker.py", line 223, in run_from_argv
    celery_1    |     return self(*args, **options)
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/bin/base.py", line 253, in __call__
    celery_1    |     ret = self.run(*args, **kwargs)
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/bin/worker.py", line 253, in run
    celery_1    |     worker = self.app.Worker(
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/worker/worker.py", line 99, in __init__
    celery_1    |     self.app.loader.init_worker()
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/loaders/base.py", line 114, in init_worker
    celery_1    |     self.import_default_modules()
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/loaders/base.py", line 108, in import_default_modules
    celery_1    |     raise response
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/utils/dispatch/signal.py", line 288, in send
    celery_1    |     response = receiver(signal=self, sender=sender, **named)
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/fixups/django.py", line 84, in on_import_modules
    celery_1    |     self.worker_fixup.validate_models()
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/fixups/django.py", line 122, in validate_models
    celery_1    |     self.django_setup()
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/celery/fixups/django.py", line 118, in django_setup
    celery_1    |     django.setup()
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/__init__.py", line 24, in setup
    celery_1    |     apps.populate(settings.INSTALLED_APPS)
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/apps/registry.py", line 114, in populate
    celery_1    |     app_config.import_models()
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/apps/config.py", line 301, in import_models
    celery_1    |     self.models_module = import_module(models_module_name)
    celery_1    |   File "/usr/local/lib/python3.8/importlib/__init__.py", line 127, in import_module
    celery_1    |     return _bootstrap._gcd_import(name[level:], package, level)
    celery_1    |   File "", line 1014, in _gcd_import
    celery_1    |   File "", line 991, in _find_and_load
    celery_1    |   File "", line 975, in _find_and_load_unlocked
    celery_1    |   File "", line 671, in _load_unlocked
    celery_1    |   File "", line 843, in exec_module
    celery_1    |   File "", line 219, in _call_with_frames_removed
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django_tenants/models.py", line 8, in 
    celery_1    |     from .postgresql_backend.base import _check_schema_name
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django_tenants/postgresql_backend/base.py", line 19, in 
    celery_1    |     original_backend = import_module(ORIGINAL_BACKEND + '.base')
    celery_1    |   File "/usr/local/lib/python3.8/importlib/__init__.py", line 127, in import_module
    celery_1    |     return _bootstrap._gcd_import(name[level:], package, level)
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/db/backends/postgis/base.py", line 6, in 
    celery_1    |     from .features import DatabaseFeatures
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/db/backends/postgis/features.py", line 1, in 
    celery_1    |     from django.contrib.gis.db.backends.base.features import BaseSpatialFeatures
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/db/backends/base/features.py", line 3, in 
    celery_1    |     from django.contrib.gis.db import models
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/db/models/__init__.py", line 3, in 
    celery_1    |     import django.contrib.gis.db.models.functions  # NOQA
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py", line 3, in 
    celery_1    |     from django.contrib.gis.db.models.fields import BaseSpatialField, GeometryField
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/db/models/fields.py", line 3, in 
    celery_1    |     from django.contrib.gis import forms, gdal
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/forms/__init__.py", line 3, in 
    celery_1    |     from .fields import (  # NOQA
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/forms/fields.py", line 2, in 
    celery_1    |     from django.contrib.gis.gdal import GDALException
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/gdal/__init__.py", line 28, in 
    celery_1    |     from django.contrib.gis.gdal.datasource import DataSource
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/gdal/datasource.py", line 40, in 
    celery_1    |     from django.contrib.gis.gdal.driver import Driver
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/gdal/driver.py", line 5, in 
    celery_1    |     from django.contrib.gis.gdal.prototypes import ds as vcapi, raster as rcapi
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/gdal/prototypes/ds.py", line 9, in 
    celery_1    |     from django.contrib.gis.gdal.libgdal import GDAL_VERSION, lgdal
    celery_1    |   File "/usr/local/lib/python3.8/site-packages/django/contrib/gis/gdal/libgdal.py", line 43, in 
    celery_1    |     raise ImproperlyConfigured(
    celery_1    | django.core.exceptions.ImproperlyConfigured: Could not find the GDAL library (tried "gdal", "GDAL", "gdal3.1.0", "gdal3.0.0", "gdal2.4.0", "gdal2.3.0", "gdal2.2.0", "gdal2.1.0", "gdal2.0.0")
    . Is GDAL installed? If it is, try setting GDAL_LIBRARY_PATH in your settings.