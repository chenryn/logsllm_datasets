例如
     XSSEscape 
     com.springtest.filter.XssFilter 
    excludedPaths
    /pages/*,*.html,*.js,*.ico
     XSSEscape 
    /*
这样我们的serlvet在路径选择时当有对 html js 和ico资源发起的请求就不回在将改请求转发至XssFilter类。
我们在审计代码时  
这里也是需要注意的一个点，因为有可能开发人员的错误配置导致本应该经过过滤器的请求，错误的给直接放行了，这样即使项目中有过滤器，也是不会生效的。
明白了标签的作用我们就去看XssFilter这个类的内容
可以看到filter包下有两个java类，我们先看XssFilter这个类
可以看到我们的XssFilter这个类实现了一个叫Filter的接口
我们去看一下Filter接口的源码
可以看到Filter所属的包是javax.servlet
Filter是Servlet的三大组件之一
javax.servlet.Filter 是一个接口，过滤请求，实现请求的拦截或者放行，并且添加新的功能
众所周知接口其实就是一个标准，所以我们想要编写自己的过滤器自然也要遵守这个标准即实现Filter这个接口。
Filter接口中有三个方法，这里简单介绍一下
init方法：
在创建完过滤器对象之后被调用。只执行一次
doFilter方法：
执行过滤任务方法。执行多次。
destroy方法：
Web服务器停止或者Web应用重新加载，销毁过滤器对象。
当 Servlet 容器开始调用某个 Servlet 程序时，如果发现已经注册了一个 Filter  
程序来对该 Servlet 进行拦截，那么容器不再直接调用 Servlet 的 service  
方法，而是调用 Filter 的 doFilter 方法，再由 doFilter 方法决定是否去激活 service  
方法
不难看出需要我们重点关注的方法是doFilter方法
这里的request的参数和response参数可以理解成封装了请求数据和相应数据的对象，我们需要过滤的数据就是存放在这两个对象中，
最后一个参数FilterChain，通过名字我们猜这个参数是一个过滤链，查看一下FilterChain的源码
看到FilterChain是一个接口，而且这个接口只有一个方法，那就是doFilter方法，FilterChain参数存在的意义就在于，在一个 Web
应用程序中可以注册多个 Filter 程序，每个 Filter 程序都可以对一个或一组 Servlet 程序进行拦截。如果有多个 Filter
程序都可以对某个 Servlet 程序的访问过程进行拦截，当针对该 Servlet 的访问请求到达时，Web 容器将把这多个 Filter 程序组合成一个
Filter 链（也叫过滤器链），
Filter 链中的各个 Filter 的拦截顺序与它们在 web.xml 文件中的映射顺序一致，上一个 Filter.doFilter 方法中调用
FilterChain.doFilter 方法将激活下一个  
Filter的doFilter 方法，最后一个 Filter.doFilter 方法中调用的 FilterChain.doFilter 方法将激活目标
Servlet的service 方法 只要 Filter 链中任意一个 Filter 没有调用 FilterChain.doFilter 方法，则目标
Servlet 的 service 方法都不会被执行
介绍完FilterChain接下来大家应该发现，虽然名字叫过滤器
但是调用chain.dofilter方法似乎并没有执行任何类似过滤的工作，没有看到任何类似黑名单或者白名单的过滤规则
在调用chain.dofilter方法时我们传递了两个参数进去
new XSSRequestWrapper((HttpServletRequest) request)和response
这就是说我们传递了一个XSSRequestWrapper对象和ServletRespons对象，我们关心的当然是这个XSSRequestWrapper
在传递参数的过程中我们通过调用XSSRequestWrapper的构造器，传递了HttpServletRequest对象，这里简单从继承关系让大家看一下HttpServletRequest和ServletRequest的关系
既然这里生成了一个XSSRequestWrapper对象并传入的参数那我们自然要跟进一探究竟
正好filter下面有一个叫XSSRequestWrapper的类，我们看一下代码
看到这里大家应该恍然大悟，原来过滤的行为是在这里进行了，而XssFilter的存在只是在链式执行过滤器并最终将值传给Servlet时调用XSSRequestWrapper来进行过滤并获取过滤结果而已。
这里对过滤规则就不过多赘述，网上有很多好的过滤规则，这里就不多提了。
这里肯定有很多人并明白问什么不将过滤的逻辑代码写在XssFilter中而是又新写了一个类，不是多此一举么？
这么做当然不是多此一举，首先解耦这个理由就已经足够充分了，其次我们看到XSSRequestWrapper继承了一个类  
HttpServletRequestWrapper
这里我们看一下HttpServletRequestWrapper类的继承关系
我们可以看到HttpServletRequestWrapper是实现了HttpServletRequest接口的，我们这里提一下过滤这个概念，我们的想法是尽可能的把请求中的有危害的数据或者特殊符号过滤掉，然后将过滤后的数据转发向后面的业务代码并继续执行，而不是说发现请求数据中有特殊字符就直接停止执行，抛出异常，返回给用户一个400页面，所以既然要继续执行，那我们就要去修改或者转义HttpServletRequest对象中的恶意数据或者特殊字符。然而HttpServletRequest对象中的数据是不允许被修改的，也就是说HttpServletRequest对象没有提供给我们直接修改请求数据的方法。
此时矛盾就来了，我们想要修改但是HttpServletRequest对象又不给提供，所以HttpServletRequestWrapper这个类就出现了，这里用到了常见的23中设计模式之一的装饰者模式，限于篇幅原因不可能对装饰者模式在进行讲解了，感兴趣的同学可以自己去研究。也就是说HttpServletRequestWrapper这个类的出现就是为了给我们提供修改request请求数据的方法的，到这里大家应该就明白了为什么需要单写一个类来进行过滤的行为，不是我们想着么写，而是框架就这么设计的，为的就是解耦。
此时当HttpServletRequestWrapper将请求中的数据过滤完，并修改完成后返回然后作为chain.doFilter方法的形参进行传递。
结合之前说的，最后一个 Filter.doFilter 方法中调用的 FilterChain.doFilter  
方法将激活目标 Servlet的service 方法
由于我们没有配置第二个Filter所以XssFilter中的chain.doFilter将会激活我们Servlet的service方法即DispatcherServlet的service方法，然后数据将传入我们的SpringMVC的Controller层交由我们的BookController来处理。
我们这次使用filter来演示一下效果
老地方下断
然后再次执行到这里时XSS语句中的特殊字符已经被Filter转义。
自然也就不会存在Xss的问题了。
## SSM框架审计思路总结
###  思路总结
最后总结一下SSM框架的审计思路，审计思路其实就是我们代码的执行思路
和审计非SSM框架代码的主要区别就是在于SSM框架的各种XML配置，和注解配置，需要我们根据XML中的配置和注解来查看代码的执行路径，SSM框架中常见的注解和注解中的属性，以及常见的标签和标签的各个属性。
审计漏洞的方式同正常的java代码审计没有区别，网上有很多非常优秀的java代码审计文章，关于每个漏洞的审计方式写的都非常全面，我们需要的就只是将其移植到SSM框架的审计中来，我们明白SSM的执行流程了，自然就明白了该怎么在SSM框架中跟踪参数，例如刚刚讲的XSS漏洞，我们根据XML中的配置和注解中的配置一路跟到了Mybatis的mapper.xml这个映射文件，找到了最中执行的
    insert into ssmbuild.books(bookName,bookCounts,detail)
    values (#{bookName}, #{bookCounts}, #{detail})
这个sql语句，发现我们传入的books参数直到sql语句执行的前一刻都没有经过任何的过滤处理，所以此处插入数据库的参数自然是不可信的脏数据。
当我们再次查询这条数据并返回到前端时就非常可能造成存储型XSS攻击
我们在审计这类漏洞时，最简单的方法就是先去web.xml中去查看有没有配置相关的过滤器，如果有哪我们就去看看过滤器的规则是否严格，如果没有那就很有可能存在漏洞。
###  补充知识
最后还要提一个必要重要的Mybaits知识点就是Mybatis的预编译，关于java的预编译简单介绍一下
非预编译的情况下我们每次执行sql都需要将slq和参数拼接在一起然后传给数据库编译执行，这样采用拼接的方式非常容易产生SQL注入漏洞，当然可以使用filter对参数进行过滤来避免产生SQL注入，
而在预编译的情况下，程序会提前将我们的sql语句编译好，程序执行的时候只需要将传递进来的参数交由数据库进行操作就可以了，此时不论传来的参数是什么，都不会被当成时SQL语句的一部分，因为真正的SQL语句已经提前编译好了，所以即使不过滤也不会产生SQL注入这类漏洞，
以下面这个mapper.xml中的SQL语句举例
    insert into ssmbuild.books(bookName,bookCounts,detail)
    values (#{bookName}, #{bookCounts}, #{detail})
#{bookName}这种形式的就是采用了预编译的形式传参，而以下这种形式
    insert into ssmbuild.books(bookName,bookCounts,detail)
    values (‘${bookName}’,’${bookCounts}’, ‘${detail}’)
‘${bookName}’这种写法就是没有使用预编译的形式进行传参数，此时如果不对传入的参数进行过滤和校验的话就会产生SQL注入漏洞
‘${xxxx}’和#{xxxx}其实就是jdbc的Statement和PreparedStatement对象。
###  学习建议
整篇文章对SSM框架的整个执行流程和审计流程进行了简单的讲解，后续想要增强SSM框架的审计水平，推荐大家自己上手一些简单SSM框架搭建的项目，实战永远是最快的学习方式，大家在审计SSM框架可能遇到的最大的困难就是有很多新的之前没有碰到过的注解，和XML中一些SSM独有的标签，这些注解和标签数量很多，没有办法在一篇文章中讲完，大家碰到不懂的注解和标签都可以通过官方提供的文档和搜索引擎来寻找答案。
最后感谢大家的耐心观看。