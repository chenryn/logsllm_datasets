### Access Control and Information Flow in MoinMoin

#### 1. Introduction
To enforce access control, we introduce an attribute `accessingACL` to track whether the `getACL` method is currently executing for a given page. The `get_raw_body` method is redefined to throw an exception if it is invoked on a protected object without being called by `getACL`.

#### 2. Page and Access Control Classes
Every page is protected by an `AccessControlPolicy` object upon creation. In the `Page` class constructor, the page instance is demoted with its own instance of the `AccessControlPolicy` class. Once the access control check is successfully performed by the `may` method, the page is promoted back to an ordinary page.

```python
class Page(object):
    def get_raw_body(self):
        # Returns the raw body of the text page
        ...

    def getACL(self, request):
        ...
        acl = self.parseACL()
        ...
        return acl

class AccessControlList(object):
    def may(self, request, name, dowhat):
        # Returns True if the user with the given name has access to read, write, delete, etc.
        ...
```

#### 3. Access Control Policy
The `AccessControlPolicy` class is used to manage access control. It ensures that `get_raw_body` can only be called by `getACL` when `accessingACL` is set to `True`.

```python
class AccessControlPolicy(InvisiType):
    def __init__(self):
        self.accessingACL = False

    def get_raw_body(self, method, self):
        if not self.accessingACL:
            raise Exception("Illegal read access")
        return method(self)

    def getACL(self, method, self):
        self.accessingACL = True
        result = method(self)
        self.accessingACL = False
        return result
```

#### 4. Enforcement of Access Control
In the `Page` class, the `__init__` method initializes the page and demotes it with an `AccessControlPolicy` instance. The `AccessControlList` class's `may` method checks the access permissions and promotes the page back if the access is allowed.

```python
class Page(object):
    def __init__(self, request, pagename, **kws):
        ...
        demote(self, AccessControlPolicy)

class AccessControlList(object):
    def may(self, request, name, dowhat):
        # After authorizing the read access, promote the page object back.
        promote(self.page, AccessControlPolicy)
```

#### 5. Comparison with Previous Work
Krohn et al. attempted to enhance MoinMoin's security using Flume [17]. Flume's approach is based on OS-level information flow control, which requires extracting the login module into a separate process. However, Flume does not address cross-site scripting vulnerabilities and cannot be applied to taint tracking, which requires fine-grained information flow control. Flume also requires significant code modifications: 1,000 lines of Python code and 1,000 extra lines of C++ code. In contrast, our system uses less than 150 lines of Python code and modifies the Python interpreter with about 2,000 lines of RPython code, resulting in significantly less effort.

#### 6. Related Work
- **Asbestos and HiStar**: These projects incorporated Decentralized Information Flow Control (DIFC) into new operating systems. InvisiType, however, enables applying security policies at a finer-grained level.
- **JFlow and JIF**: Myers and Liskov introduced Java-based programming languages with DIFC support. While JIF guarantees no information leakage, it requires rewriting legacy applications. Our scheme allows minimal modifications to enforce policies on legacy applications.
- **Java Security Architecture**: GuardedObject and Guard interface are used to enforce access control. However, they cannot describe security policies like TaintPolicy, which require injecting code into specific methods or operators.
- **Model-Carrying Code (MCC)**: Sekar et al. introduced MCC, where a security model is extracted from an application, and the user determines a compatible security policy. InvisiType adopts a more object-oriented approach, providing better abstraction for security policies.
- **Bytecode Rewriting**: Techniques like bytecode rewriting modify bytecode at static time or runtime. InvisiType implements security policies at the type system layer, making the implementation simpler and avoiding runtime translation overhead.
- **Aspect-Oriented Programming (AOP)**: AOP allows specifying cross-cutting concerns across multiple classes. InvisiType, however, enforces policies on individual objects and allows the removal of policies when they are no longer necessary, avoiding the overhead of unused security policies.
- **Inlined Reference Monitor (IRM) and Transactional Memory Introspection (TMI)**: IRM and TMI use reference monitors to observe and take actions on operations that violate a policy. InvisiType encapsulates safety checks in policy classes and applies them to objects by changing their types, but is limited to object-oriented languages.

#### 7. Conclusion
Third-party software is widely used across many platforms. To ensure that third-party software follows fine-grained security policies, we propose InvisiType, a general type extension concept for object-oriented programming languages. InvisiType allows safety policies to be encapsulated in an object-oriented manner, enabling platform developers to selectively and dynamically apply safety checks to specific object instances. The InvisiType runtime system efficiently enforces these checks using the virtual method dispatch mechanism, ensuring low overhead even at the granularity of individual attribute accesses.

#### 8. Acknowledgment
This paper is supported in part by the NSF POMI (Programmable Open Mobile Internet) 2020 Expedition Grant No. 0832820, NSF Grant TRUST CCF-0424422, and a Samsung scholarship. The authors thank John C. Mitchell, Sudheendra Hangal, Michael Barrientos, Ben Dodson, and Debangsu Sengupta for their help with the paper.

#### 9. References
[1] C. Anley. Advanced SQL injection in SQL server. http://www.nextgenss.com/papers/advanced_sql_injection.pdf, 2002.
...
[37] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazieres. Making information flow explicit in HiStar. In Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation, pages 263â€“278, Nov 2006.