环境原因 理可能违反常规流程，造成操作风险。
（2）外界刺激。
来自于环境的刺激较多或者更换了新环境，使操作人员无法集中注意力
（1）人机设计不合理。
不方便操作人员使用，难以掌握；工具的一些操作本身容易混淆，无法明显区分。
（2）违反标准，或者无统一标准。
例如，一般的汽车都是刹车在左，油门在右，如果违反了这个标准，或者这个标准
工具原因
没有统一，则很有可能形成操作风险。
（3）工具反常。
例如工具平时的响应只需要1 s，但是在某些情况下变成了5 s，等待的时间间隔可
能打乱了操作人员的节奏感，进而形成操作风险
（1）流程烦琐。
操作流程步骤繁多，实施时可能产生遗漏或者错误。
流程原因 （2）存在交叉作业。
流程上需要操作人员在不同工具、不同对象间切换操作。由于人思维存在惯性，或
因形成的条件反射造成失误
2．外部攻击
1）恶意程序
恶意程序是未经授权运行的、怀有恶意目的、具有攻击意图或者实现恶意功能的
所有软件的统称，其表现形式有很多：僵尸程序、蠕虫、黑客工具、计算机病毒、特
洛伊木马程序、逻辑炸弹、漏洞利用程序、间谍软件等。大多数恶意程序具有一定程
度的隐蔽性、破坏性和传播性，难以被用户发现，会造成信息系统运行不畅、用户隐
私泄露等后果，严重时甚至导致重大安全事故和巨额财产损失等。
2019 年第一季度，信息安全厂商卡巴斯基公司公开透露，共阻止了全球 203 个国
家中在线发生的 843 096 461 次攻击。20 年前每天可能只检测到 50 个新病毒，10 年前
大概有 14 500 个，现在每天能收集几十万甚至上百万个，并且数量还在增加。
2）网络入侵
网络入侵是指根据系统所存在的漏洞和安全缺陷，通过外部对系统的硬件、软件
及数据进行攻击的行为。网络攻击的手段有多种类型，通常从攻击目标出发，可以分
为主机、协议、应用和信息等的攻击。
2020 年 12 月，SolarWinds 公司的基础设施遭到黑客网络攻击，该公司名为 Orion
的网络和应用监控平台的更新包被黑客植入后门，并将其命名为 SUNBURST，同时
向该软件的用户发布木马化的更新，其中包括美国财富 500 强中的 425 家公司、美国
前十大电信公司、美国前五大会计师事务所、美国军方所有分支机构、五角大楼，以
第 6章 高级系统运维 201
及全球数百所大学和学院。此次黑客攻击很可能影响到了 1.8 万名 SolarWinds 软件用
户，数百名工程师受到影响。
3）拒绝服务攻击
拒绝服务攻击（DoS）即攻击者通过攻击使目标机器停止提供服务。常见的手段
有通过大批量请求耗光网络带宽，使合法用户无法访问服务器资源。分布式的拒绝服
务攻击手段（DDoS）是在传统的 DoS 攻击基础之上产生的一类攻击方式。
单一的 DoS 攻击一般是采用一对一方式的，当单机资源过小，CPU 速度、内存以
及网络带宽等各项性能指标不高时，攻击会尤为有效。分布式的拒绝服务攻击手段
（DDoS）则是通过更多的分布式主机发起对单一服务的攻击，用更大规模的攻击使主
机不能正常工作。
2020 年 8 月 31 日，新西兰证券交易所网站在周一的市场交易开盘不久再次崩溃。
这已是自 2020 年 8 月 25 日以来，新西兰证券交易所连续第 5 天“宕机”。2020 年 8
月 25 日，新西兰证券交易所收到分布式拒绝服务（DDoS）攻击，袭击迫使交易所暂
停其现金市场交易 1 小时，严重扰乱了其债务市场。
4）社会工程
为获取信息，利用社会科学，尤其是心理学、语言学、欺诈学将其进行综合，利
用人性的弱点，并以最终获得信息为最终目的的学科称为社会工程学（social
engineering）。
社会工程学中比较知名的案例是网络钓鱼，通过大量来自各种知名机构的诱惑性
垃圾邮件，意图引导受攻击者提供自身敏感信息的一种攻击方式。最典型的网络钓鱼
攻击是将收信人引诱到一个通过精心设计与目标组织的网站非常相似的钓鱼网站上，
诱使并获取收信人在此网站上输入个人敏感信息，通常这个攻击过程不会让受害者警
觉。网络钓鱼网站被仿冒的大都是电子商务网站、金融机构网站、第三方在线支付站
点、社区交友网站等。
5）外部攻击实例
（1）XSS跨站脚本攻击。XSS（cross-site script，跨站脚本攻击）是一种网站应用
程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页中，其他
用户在观看网页时就会受到影响。这类攻击通常包含 HTML以及用户端脚本语言。
它可以分为两类：反射型和持久型。
反射型 XSS 攻击场景：用户单击嵌入恶意脚本的链接，攻击者可以获取用户的
cookie 信息或密码等重要信息进行恶性操作。
解决方法：开启 cookie 的 HttpOnly 属性，禁止 JavaScript 脚本读取 cookie 信息。
持久型 XSS 攻击场景：攻击者提交含有恶意脚本的请求（通常使用标签），
此脚本被保存在数据库中。用户再次浏览页面，包含恶意脚本的页面会自动执行脚本，
从而达到攻击效果。这种攻击常见于论坛、博客等应用中。
解决方法：前端提交请求时，转义为&gt；或者后台存储数据时进
202 大数据应用部署与调优
行特殊字符转义。建议后台处理，因为攻击者可以绕过前端页面，直接模拟请求，提
交恶意的请求数据。可以考虑在后台加入对应的数据校验，也可以考虑统一对后台的
数据进行特殊字符的转义。
另外，所有的过滤、检测、限制等策略建议在服务端一侧完成，而不是使用客户
端的 JavaScript 去做简单的校验。因为真正的攻击者可以绕过页面直接通过模拟页面
的请求进行数据非法录入。
例如，在表单中填写类似脚本的语句，如图 6-4 所示。
图6-4 脚本语句录入
单击“提交”按钮后页面回显会解析 JavaScript 脚本并弹出对话框，如图 6-5 所示。
图6-5 XSS攻击弹出框
解决思路如下。
在页面端增加转义字符过滤，清洗输入框录入的数据，并增加页面的校验规则。
增加录入内容的正则校验。
var inputValue=this.value;
var regl= /^[A-Za-z]+$/;
if(regl.test(inputValue)){
alert("输入格式正确");
return;
}else{
alert("输入格式不正确")
}
在输出数据时，能将 HTML 标记转成常用字符串形式（专门去解析 HTML 元素其
实是为了防止 XSS 攻击）。
var replaceSpecial = function(v){
return _.template("", { variable: "m" })(v);
};
后台增加对应的过滤器，用来过滤前台传递的参数数据。
public class XssFilter implements Filter {
@Override
第 6章 高级系统运维 203
public void destroy() {
}
/**
* 过滤器用来过滤的方法
*/
@Override
public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
throws IOException, ServletException {
//包装request
XssHttpServletRequestWrapper xssRequest = new
XssHttpServletRequestWrapper((HttpServletRequest) request);
chain.doFilter(xssRequest, response);
}
@Override
public void init(FilterConfig filterConfig) throws ServletException {
}
}
public class XssHttpServletRequestWrapper extends HttpServletRequestWrapper {
HttpServletRequest orgRequest = null;
public XssHttpServletRequestWrapper(HttpServletRequest request) {
super(request);
}
/**
* 覆盖getParameter()方法，将参数名和参数值都做XSS过滤
* 如果需要获得原始的值，则通过super.getParameterValues(name)来获取
* getParameterNames,getParameterValues和getParameterMap也可能需要覆盖
*/
@Override
public String getParameter(String name) {
String value = super.getParameter(xssEncode(name));
if (value != null) {
value = xssEncode(value);
}
return value;
}
@Override
public String[] getParameterValues(String name) {
String[] value = super.getParameterValues(name);
if(value != null){