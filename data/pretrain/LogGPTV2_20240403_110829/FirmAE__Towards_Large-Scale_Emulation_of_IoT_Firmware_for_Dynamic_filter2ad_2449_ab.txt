work, originally designed for a large-scale analysis. Numerous
studies [24, 60, 64] have adopted it for dynamic analysis. We also
utilized Firmadyne for failure investigation.
After unpacking a firmware image, Firmadyne emulates it with
a customized Linux kernel and libraries, which are pre-built to
ACSAC 2020, December 7–11, 2020, Austin, USA
Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin Jang, and Yongdae Kim
support various hardware features such as NVRAM. For emulation,
Firmadyne emulates the target image twice: the first emulation
logs useful information, whereas the second utilizes the logged
information. Thus, the customized kernel includes a driver that
hooks major system calls to record useful information. For example,
they hook inet_ioctl() and inet_bind() to obtain the name and
IP address of the network interface used in the emulated firmware.
The custom libraries of Firmadyne also address hardware issues.
For example, a library, libnvram, stores and returns NVRAM values
based on the hard-coded default values.
Although Firmadyne is promising, its emulation rate of network
reachability and web service availability is considerably low at
29.4% and 16.3%, respectively. To this end, we carefully investigate
the failure cases and propose a technique to address them.
3 DESIGN
3.1 Goal and scope
Goal. Our goal is to successfully emulate the firmware image of
embedded devices, specifically running their web services because
the web interface of such devices is a critical target for remote
attackers. [5, 12, 17, 32, 60, 64]. We do not aim to resolve all the
discrepancies in emulated environment. Instead, we aim at a con-
cise emulation for dynamic testing, and our emulation goal can be
illustrated with the following properties: 1) booting without any
kernel panic, 2) network reachability from the host, and 3) web
service availability for dynamic analysis. We are aiming at holding
these properties as they are the minimum requirements for run-
ning web services without suffering issues in firmware emulation.
Thus, we check the emulation success rate by checking the network
reachability and web service availability of the target firmware.
Scope. Among various embedded devices, we select wireless routers
and IP cameras as our analysis targets because of their presence
in our daily lives and as they often become attack targets. In fact,
many botnets [5, 32] target them to launch large-scale DDoS attacks.
Note that other embedded devices that share similar characteristics
can be addressed with our approach as well.
3.2 Arbitrated emulation
To achieve this goal, we propose a technique, which we refer to as
arbitrated emulation. Whereas previous approaches [12, 17, 23, 25,
57] have striven to ensure that the target firmware operates alike
the physical device, which is a difficult goal, arbitrated emulation
does not completely follow the original execution procedure of
the target firmware. The key idea behind arbitrated emulation is
that ensuring high-level behavior is sufficient to perform dynamic
analysis on internal programs, which is relatively easy to do, rather
than finding and fixing the exact root causes of emulation failures.
The high-level behavior mentioned here can be readily modeled by
skilled analysts based on their target and emulation goal. In this
study, we use the model defined in §3.1.
One key feature of arbitrated emulation is that it employs inter-
vention. The intervention indicates an intentionally added action,
which may differ from the behavior of the physical device. This
action makes it possible to bypass unaddressed issues assuming
that they do not strongly influence the behavior of the target pro-
gram inside the emulated firmware. The procedure that arbitrates
Figure 1: FirmAE architecture overview
between following the firmware as is and applying an intervention
is called arbitration. An intervention can be implemented in various
ways, as needed, and it can be injected into the appropriate steps
of the emulation procedure, namely the arbitration point. Proper
arbitration points can be noted by analyzing violation cases of the
given high-level behavioral model. Then, interventions are injected
in these arbitration points. As interventions focus on high-level
behaviors, those obtained from a small set of firmware images can
be widely applied to other firmware images that suffer from similar
failure cases, even though they have different root causes.
Our interventions take advantages of the abstract design of
Linux-based firmware. We conducted a preliminary study on our
dataset and discovered that appropriate interventions can aid the
emulator to bypass numerous unsolved issues. For example, when a
network setting procedure is stopped due to an unknown peripheral
access or insufficient NVRAM support, an intervention that forces
the configuration of a fixed network setting can resolve the issue
regardless of the root cause. Although the arbitrated emulation may
violate the main concept of the full-system emulation, we hypoth-
esized that small discrepancies introduced by interventions only
have a slight effect on the behavior of the target program. In fact,
we support this hypothesis by successfully running emulated web
services in 892 firmware images from 1,124 images, and we found
12 0-day vulnerabilities by conducting dynamic security analysis.
3.3 FirmAE
We implemented our prototype of arbitrated emulation, FirmAE,
based on Firmadyne [17]. The overall architecture of FirmAE is
illustrated in Figure 1. FirmAE emulates a firmware image similar
to Firmadyne on a pre-built customized Linux kernel and libraries,
as described in §2.4. It also emulates a target image twice to collect
various system logs and utilize the information for further emula-
tion. We refer to the former emulation step as pre-emulation and
the latter as final emulation. The arbitrations applied in FirmAE
can be categorized into five, which are derived by our failure case
investigation on AnalysisSet. We describe the details of each ar-
bitration in §4, and compare the emulation results with those of
Firmadyne in §5.1. We built additional interfaces for dynamic anal-
ysis on FirmAE (§5.3), and the analysis results is described in §5.4.
Automation. For a large-scale analysis, FirmAE needs to be fully
automated. Naturally, numerous steps of Firmadyne are automated;
however, it still requires some user interaction. For example, users
must first extract the filesystem of the target firmware with specific
options. Then, they evaluate whether the filesystem is successfully
extracted and retrieve the architecture information. Subsequently,
they make a firmware image for QEMU and collect information
FirmwareDatasetVendor ServersInputFirmwareFilesystemFuzzerAnalysis ContainerCrash DBConfirmDebugPrecompiled Custom Kernel (ARM, MIPS)Library/Device DriverBoot &InitializeNetworkSetupExtracted Filesystem+ Custom BinariesWeb/CGI DaemonsEmulation ManagerParallelizationArbitrationSystemizationDynamic AnalysisEmulationDBPre-EmulationFinal Emulation1234Checker5FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis
ACSAC 2020, December 7–11, 2020, Austin, USA
in pre-emulation. Finally, they run a script for final emulation and
perform dynamic analysis. We automated all such interactions and
added an automated evaluation procedure for network reachability
and web service availability. For this, we built a module in FirmAE
that periodically runs ping and curl commands.
Parallelization. We also parallelized emulation to effectively eval-
uate numerous firmware images, leveraging containerization with
Docker [40]. Each firmware image is emulated independently in
each container, which is equipped with all required packages and
dependencies. This enables the quick and reliable emulation of a
target image. FirmAE emulates firmware in parallel, by running
multiple container instances.
With containerization, we can take advantages of abstracting
the network connection between the host and the guest systems.
QEMU [6], which FirmAE utilizes for the emulation, creates an
additional network interface, TAP, in the host system. This interface
is linked to one of the guest network interfaces. Thus, each emulated
firmware should have an independent TAP interface with a unique
IP address in the host system, otherwise a network collision will
take place. Containerization isolates the network environment of
each container. Consequently, packets from the host system can be
properly routed to the guest even in parallel emulation. We also
place the checker and analysis engine inside each container.
3.4 Experimental setup
Dataset. Our dataset comprises the top eight vendors in the wire-
less home router market [59]. We collected 1306 firmware images
from the vendors’ websites and extracted filesystems from the col-
lected images by unpacking them with Binwalk [26], as described
in §2.1. Then, we filtered them by verifying whether the operating
system of each image has one of the three architectures: ARM little
endian (ARMel), MIPS little endian (MIPSel), and MIPS big endian
(MIPSeb). These architectures occupy more than 97% of our initial
collection. We prepared IP camera firmware in the same manner.
Our final dataset includes total 1124 firmware images, 1079
of which are wireless routers, and 45 are IP cameras. We divide
them into three datasets: AnalysisSet, LatestSet, and CamSet. Their
brief summary is presented in Table 1 along with the emulation
result, and its detailed version is shown in Table 4 in Appendix.
The AnalysisSet consists of 526 outdated images from 3 vendors,
whereas the LatestSet and CamSet only contain the latest firmware
images as of Dec. 2018. The LatestSet has 553 latest images from
8 vendors including the vendors covered by the AnalysisSet, and
the CamSet includes 45 latest images from 3 vendors. Accordingly,
the AnalysisSet may include multiple firmware versions per device,
whereas the LatestSet and CamSet have only one image per device.
There is no intersection among the datasets, i.e., they do not share
any identical image. We used the AnalysisSet to analyze emula-
tion failure cases. By analyzing them, we found several arbitration
points that can help increase the emulation rate (§4). We applied
those arbitrations in FirmAE, and evaluated it with the LatestSet
and CamSet (§5).
Environment. All our experiments were conducted on a server
equipped with four Intel Xeon E7-8867v4 2.40 GHz CPUs, 896 GB
DDR4 RAM, and 4 TB SSD. We installed Ubuntu 16.04 with Post-
greSQL v9.5.14 [42] and Docker v18.09.4 [40] on the server.
4 ARBITRATION OF FAILURE CASES
The key of arbitrated emulation is to depict arbitration points that
can help the emulator to bypass the failure. Therefore, we first
analyzed the failure cases on AnalysisSet based on the high-level
behavioral model. For a large-scale analysis, we applied FirmAE’s
automation and parallelization without any arbitration, such that
the emulation part is the same as that of Firmadyne. Notably, web
servers of only 16.9% images were emulated (§5.1). For a neat expla-
nation, we categorized the failure cases by their arbitration points:
boot (§4.1), network (§4.2), NVRAM (§4.3), kernel (§4.4), and others
(§4.5). In this section, we explain them in details.
Note. Identifying arbitration points and devising appropriate inter-
ventions require empirical investigation, and we believe that our
study can contribute to future research in this field.
4.1 Boot arbitrations
We encountered the first issues at the early stage of the booting
procedure, which made the emulation fail with kernel panic.
Improper booting sequence. The main cause of an improper
booting sequence is that the program used for system initialization
is not properly executed. Generally, most systems require initial-
ization in the booting procedure. In the Linux kernel, initialization
is often performed by a program called init, and the kernel at-
tempts to find this program by checking pre-defined paths, such
as /sbin/init, /etc/init, and /bin/init. However, some firmware
images have customized paths for initializing programs, such that
the kernel fails to execute the programs and crashes.
This failure often happens in NETGEAR firmware images. After
analyzing them, we found that they use the name preinit, which
is often used by an open-source embedded device project Open-
Wrt [22], and we verified that they are indeed implemented upon
it. We also found that some TP-Link images utilize preinit as well.
To address this problem, Firmadyne built a script that searches and
executes a hard-coded list of files frequently accessed for initializing
programs. However, these candidates are not sufficient to account
for the diverse paths of initializing programs in the wild.
We propose another approach that utilizes information from the
kernel of the target firmware. Specifically, we created an interven-
tion at the beginning of the booting process, which extracts useful
information in the kernel of the image. Specifically, we utilize a
kernel’s command line string, which is used for default configu-
ration of the kernel in the booting procedure. Note that such a
string is pre-defined in the development stage, so it is naturally
embedded in the kernel image. This information may include an ini-
tializing program path, console type, root directory, root filesystem
type, or memory size. For example, from one kernel image in NET-
GEAR firmware, we could obtain a string of console=ttyS0,115200
root=31:08 rootfstype=squashfs init=/etc/preinit. We can rec-
ognize the initializing program path of /etc/preinit, console type
of ttyS0 having the 115200 baud rate, and root filesystem type of
squashfs. By configuring the emulated environment with the infor-
mation obtained from the original kernel, the guest system could
be properly initialized without failure, even if initializing programs
have unusual paths. If we fail to extract any information, we find
the initialization program such as preinit or preinitMT from the
extracted filesystem.
ACSAC 2020, December 7–11, 2020, Austin, USA
Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin Jang, and Yongdae Kim
Missing filesystem structure. Other failure cases occur due to the
absence of files or directories. When internal programs access such
paths, they crash, and the emulation stops. Firmadyne attempted
to address this by creating and mounting hard-coded paths such as
proc, dev, sys, or root at the beginning of the custom booting script.
Some hard-coded paths certainly worked; for example, making
/etc/TZ or /etc/hosts helped several cases of this failure. However,
this approach cannot account for diverse cases. Furthermore, as it
forcibly creates files and directories before the firmware initializes
itself, it collides with internal programs, which create and mount
other files or directories in the same paths.
We arbitrated this by inserting an intervention, which is simi-
lar to that of the previous case, but retrieves information from a
filesystem rather than a kernel. Before emulating a given image,
we extracted all strings from executable binaries in its filesystem.
Then, we filtered them to obtain strings that are highly likely to
indicate paths and prepared the file structure based on the paths.
In particular, we chose strings that start with general Unix paths,
such as /var, or /etc.
4.2 Network arbitrations
After completion of the booting procedure, the network should be
configured such that the host system can communicate with the
guest system, and eventually dynamic analysis can be performed.
For network communication, QEMU requires the host to create an
additional network interface, TAP. This TAP interface is connected
to a network interface in the guest system. Then, the host and guest
communicate through it.
However, properly configuring a TAP interface is not trivial, as
it should be set up with specific options that correspond to the type
of the target network interface. This network interface type could
be Ethernet, wireless LAN (WLAN), network bridge, or virtual LAN
(VLAN). As statically distinguishing the interface type in the guest
system is not easy, a target image needs to be emulated once.
Firmadyne emulates a given image twice (§2.4). In the first em-
ulation, namely pre-emulation, Firmadyne collects kernel logs by
hooking the system calls. Since the collected logs include the names
and IP addresses of the network interfaces accessed during the em-
ulation, they could be utilized for network configuration in the final
emulation. Nevertheless, numerous images still suffered failure.
Invalid IP alias handling. Assigning multiple IP addresses to a
single network interface is termed IP aliasing [58]. It is prevalent in
routers, as it enables the management of services separately by IP
address. In IP aliasing, a network interface makes multiple instances
of itself, and each instance is assigned a unique IP address. For
example, a bridge interface, br0, with an IP address of 192.168.1.1,
can have IP aliases of 169.254.39.3 and 1.1.1.1, which are assigned
to its instances br0:0 and br0:1, respectively. Then, br0 is linked to
an Ethernet interface, eth0. Here, br0 can be accessed with any of
these IP addresses.
Failure cases related to this IP aliasing are often found in D-Link
images. After investigating them, we found that they are caused by
the fact that Firmadyne does not properly handle IP aliasing. The
problem occurs during the Firmadyne network configuration in the
host system. At the pre-emulation step, IP aliases are logged by the
kernel. Then, Firmadyne parses the log and tries to assign all the
logged IP addresses to a corresponding interface in the guest. Then,
it adds static routing rules for those IP addresses to link them to a
TAP interface in the host. Here, multiple routing rules are added to
a single TAP interface, which makes the network collide.
With the knowledge of IP aliasing, FirmAE arbitrates this by
letting the host system use its default routing rule. In particular,
even though IP aliasing is used, once the guest’s network interfaces
are linked to the host’s TAP interfaces, all packets are automatically
routed between the host and guest. Thus, these cases require no
intervention, demonstrating the importance of placing an interven-
tion for the right situation.
No network information. Some firmware images do not contain
any information on connectable network interfaces, such as eth,
in their kernel logs. Those images only configure the loopback
interface (lo) without setting other network interfaces. Due to
the lack of connectable network interface, these images cannot be
accessed from the host system. Moreover, some images attempt to
bind their web servers to a network interface, which does not exist,
and consequently crash.
After analyzing the cases, we found that some images use the dy-
namic host configuration protocol (DHCP) to retrieve IP addresses
from a DHCP server, for their WAN interface. The DHCP is a popu-
lar protocol to set up a network interface in endpoint devices, as it
does not require any user interaction. In general, wireless routers
act as DHCP servers themselves to assign IP addresses to their LAN
interfaces to which their clients are connected. However, they can
also retrieve an IP address from external DHCP servers to connect
their WAN interface to the Internet, unless a user manually con-
figured it. Indeed, our analyzed images attempted to retrieve an
IP address with the DHCP through the connection between their
WAN interface and the TAP interface of the host system. However,
as a DHCP server is not present in the emulated environment, the
emulated firmware fails to obtain an IP address and configure a net-
work interface. Furthermore, as no network interface is configured,
a bridge interface, which groups multiple network interfaces, could
not be arranged. Consequently, internal programs that are bound
to these network interfaces cannot run properly.
We first attempted to address this with QEMU’s internal DHCP
server, such that guest’s network interfaces can retrieve IP addresses
from the server. However, some images still do not have network
interfaces, even after setting the DHCP server. This may arise from
insufficient support of peripherals. If any program during the net-
work configuration accesses such peripherals, it crashes or acts
abnormally and eventually fails to configure the network.
FirmAE arbitrates these cases with an intervention that forcibly
configures the network with a default setting. Specifically, we set an
Ethernet interface, eth0, with an IP address of 192.168.0.1. After
the Ethernet interface is set up, it is linked with a default bridge
interface, br0, for those images whose kernel log contains bridge
interface information. This simple intervention significantly helps
emulate web services (§5.1).
Multiple network interfaces in ARM. To support multiple net-
work interfaces, an appropriate machine, onto which the target
firmware will be loaded, must be chosen. We selected virt, one