    stmt, err := db.PrepareContext(ctx, "INSERT INTO accounts SET hash=?, salt=?, email=?")
    if err != nil {
        panic(err)
    }
    result, err := stmt.ExecContext(ctx, email, h, salt)
    if err != nil {
        panic(err)
    }
}
然⽽而，这种⽅方法有⼏几个缺陷，不不应该使⽤用。本⽂文仅⽤用⼀一个实例例来说明这⼀一理理论。下⼀一节将解释如何在现实⽣生活中正确设置密码。
下⾯面的示例例演示如何使⽤用bcrypt，这对于⼤大多数情况都是⾜足够好的。BCRYPT的优点是使⽤用起来更更简单，因此不不易易出错。
安全存储密码实践
bloodzer0&Lingfighting
package main
import (
    "database/sql"
    "context"
    "fmt"
    "golang.org/x/crypto/bcrypt"
)
func main() {
    ctx := context.Background()
    email := []byte("PI:EMAIL")
    password := []byte("47;u5:B(95m72;Xq")
    // Hash the password with bcrypt
    hashedPassword, err := bcrypt.GenerateFromPassword(password, bcrypt.DefaultCost)
    if err != nil {
        panic(err)
    }
    // this is here just for demo purposes
    //
    // fmt.Printf("email          : %s\n", string(email))
    // fmt.Printf("password       : %s\n", string(password))
    // fmt.Printf("hashed password: %x\n", hashedPassword)
    // you're supposed to have a database connection
    stmt, err := db.PrepareContext(ctx, "INSERT INTO accounts SET hash=?, email=?")
    if err != nil {
        panic(err)
    }
    result, err := stmt.ExecContext(ctx, hashedPassword, email)
    if err != nil {
        panic(err)
    }
}
bcrypt还提供了了⼀一种简单⽽而安全的⽅方法来⽐比较明⽂文密码和已经散列列的密码：
bloodzer0&Lingfighting
ctx := context.Background()
 // credentials to validate
 email := []byte("PI:EMAIL")
 password := []byte("47;u5:B(95m72;Xq")
// fetch the hashed password corresponding to the provided email
record := db.QueryRowContext(ctx, "SELECT hash FROM accounts WHERE email = ? LIMIT 1", email)
var expectedPassword string
if err := record.Scan(&expectedPassword); err != nil {
    // user does not exist
    // this should be logged (see Error Handling and Logging) but execution
    // should continue
}
if bcrypt.CompareHashAndPassword(password, []byte(expectedPassword)) != nil {
    // passwords do not match
    // passwords mismatch should be logged (see Error Handling and Logging)
    // error should be returned so that a GENERIC message "Sign-in attempt has
    // failed, please check your credentials" can be shown to the user.
}
密码是⼀一种历史资产，是⼤大多数认证系统的⼀一部分，也是攻击者的头号⽬目标。
很多时候⼀一些服务会泄露露⽤用户的信息，尽管电⼦子邮件地址和其他个⼈人数据也泄露露了了，但最⼤大的问题是密码。为什什么？因为密码不不容易易管理理和记忆，⽤用
户倾向于使⽤用弱密码（例例如“123456”）他们可以很容易易记住，也可以在不不同的服务中使⽤用相同的密码。
如果您的应⽤用程序登录需要密码，您可以做的最好的事情是"强制执⾏行行密码复杂性要求，要求使⽤用字⺟母以及数字和/或特殊字符"。密码⻓长度也应该强制
要求："通常使⽤用8个字符，但16个字符更更好，或者考虑使⽤用多个单词的密码短语"。
当然，前⾯面的指导原则都不不会阻⽌止⽤用户重新使⽤用相同的密码。最好的办法是"强制更更改密码"，防⽌止密码重复使⽤用。关键系统可能需要更更频繁的更更改，
必须对重置之间的时间进⾏行行管理理控制”。
即使您没有应⽤用任何额外的密码策略略，⽤用户仍然需要能够重置他们的密码。这种机制与注册或登录⼀一样重要，我们⿎鼓励您遵循最佳实践，确保您的系
统不不会泄露露敏敏感数据，也不不会受到危害。
"密码更更改时间不不能少于1天"。这样可以防⽌止对密码重复使⽤用的攻击。每当使⽤用"基于电⼦子邮件的重置，只发送电⼦子邮件到预先注册的地址与临时链接/
密码"，这个链接应该有⼀一个很短的到期时间。
每当请求密码重置时应通知⽤用户。同样临时密码也应该在下次使⽤用时更更改。
密码重置的⼀一个常⻅见做法是"安全问题"，其答案以前是由帐户所有者配置的。密码重置问题应⽀支持⾜足够的随机答案：询问"最喜爱的书"？可能答案总
会是"圣经"，这使得这个安全问题成为⼀一个坏问题。
身份验证是任何系统的关键部分，因此您应该始终采⽤用正确和安全的做法。以下是使您的认证系统更更具弹性的⼀一些指导原则：
在执⾏行行关键操作之前重新验证⽤用户身份；
对⾼高度敏敏感或⾼高价值交易易帐户使⽤用多因素身份验证；
利利⽤用相同的密码，实施监控以识别针对多个⽤用户帐户的攻击。当⽤用户ID可以被获取或猜测时，这种攻击模式⽤用于绕过标准锁定；
更更改供应商提供的所有默认密码和⽤用户ID或禁⽤用关联帐户；
在已确定的⽆无效登录尝试次数（例例如：五次尝试是常⻅见的）后强制禁⽤用帐户。必须禁⽤用该帐户⼀一段时间，这段时间必须⾜足以阻⽌止对凭据的野蛮猜
密码策略略
重置
其它指南
bloodzer0&Lingfighting
测，但不不能⻓长到允许执⾏行行拒绝服务攻击。
在本节中，我们会根据OWASP安全编码实践来介绍会话管理理的重要内容。提供了了⼀一个示例例以及实践原理理概述。除此之外，还有⼀一个包含完整程序代
码的⽂文件夹。会话进程如图所示：
在处理理会话管理理时，应⽤用程序应该只识别服务器器中的会话管理理控件，并在在受信任的系统上创建会话。在提供的代码示例例中，我们的应⽤用程序使⽤用
JWT⽣生成⼀一个会话，代码如下：
// create a JWT and put in the clients cookie
func setToken(res http.ResponseWriter, req *http.Request) {
    ...
}
我们必须确保⽤用于⽣生成会话标识符的算法是⾜足够随机的，以防⽌止会话被暴暴⼒力力破解，代码如下：
...
token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
signedToken, _ := token.SignedString([]byte("secret")) //our secret
...
既然⼜又了了⾜足够强的令牌，我们必须给cookie设置 Domain 、 Path 、 Expires 、 HTTPOnly 、 Secure 等参数。通常情况下，我们把
Expires值设置为30分钟以此来降低应⽤用程序⻛风险。
// Our cookie parameter
cookie := http.Cookie{
    Name: "Auth",
    Value: signedToken,
    Expires: expireCookie,
    HttpOnly: true,
    Path: "/",
    Domain: "127.0.0.1",
    Secure: true
}
http.SetCookie(res, &cookie) //Set the cookie
每次成功登录后都会⽣生成新的会话，历史会话将不不会被重新使⽤用，即使它没有过期。我们还可以使⽤用Expire参数强制定期终⽌止会话，以防⽌止会话劫
持。Cookie的另外⼀一个重要因素是不不允许同⼀一⽤用户同时登录，这可以通过保存登录⽤用户列列表完成，将新的登录⽤用户名与列列表进⾏行行对⽐比，登录⽤用户列列表
通常保存在数据库中。
会话标识符不不允许存储在URL中，仅允许保存在HTTP Cookie头中。⼀一个不不好的列列⼦子就是使⽤用GET传递会话标识符参数。会话数据还必须受到保护，
以防服务器器的其它⽤用户未经授权直接访问。
HTTP改为HTTPS，防⽌止⽹网络嗅探会话的MITM攻击。最佳实践是在所有的请求中使⽤用HTTPS，代码如下：
Session管理理
bloodzer0&Lingfighting
err := http.ListenAndServeTLS(":443", "cert/cert.pem", "cert/key.pem", nil)
if err != nil {
    log.Fatal("ListenAndServe: ", err)
}
在⾼高敏敏感或关键操作的请求中，应该为每个请求⽽而不不是每个会话⽣生成令牌。始终确保令牌的随机性，并且⾜足有⾜足够的安全⻓长度防⽌止暴暴⼒力力破解。
在会话管理理中要考虑的最后⼀一个⽅方⾯面是注销功能。应⽤用程序应该提供⼀一个从所有需要身份验证的⻚页⾯面注销的⽅方法，并完全终⽌止关联的会话和链接。示
例例中，当⽤用户注销时，cookie需要从客户端删除，也需要从服务端删除。
...
cookie, err := req.Cookie("Auth") //Our auth token
if err != nil {
    res.Header().Set("Content-Type", "text/html")
    fmt.Fprint(res, "Unauthorized - Please login ")
    fmt.Fprintf(res, " Login ")
    return
}
...
完整的例例⼦子，请访问：session.go
在处理理访问控制时，要采取的第⼀一步是仅使⽤用受信任的系统对象进⾏行行访问授权决策。在会话管理理部分提供的示例例中，我们使⽤用JWT实现了了这⼀一点。
JSONWeb令牌在服务器器端⽣生成会话令牌。
// create a JWT and put in the clients cookie
func setToken(res http.ResponseWriter, req *http.Request) {
    //30m Expiration for non-sensitive applications - OWASP
    expireToken := time.Now().Add(time.Minute * 30).Unix()
    expireCookie := time.Now().Add(time.Minute * 30)
    //token Claims
    claims := Claims{
        {...}
    }
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
    signedToken, _ := token.SignedString([]byte("secret"))
然后我们可以存储和使⽤用这个令牌来验证⽤用户并强制我们的访问控制模型。
⽤用于访问授权的组件应该是⼀一个单⼀一的、在站点范围内使⽤用的组件。这包括调⽤用外部授权服务的库。
如果出现故障，访问控制应安全失效。在Go中，我们可以使⽤用Defer来实现这⼀一点。有关详细信息，请参阅⽂文档的错误⽇日志部分。
如果应⽤用程序⽆无法访问其配置信息，则应拒绝对应⽤用程序的所有访问。
应该对每个请求实施授权控制，包括服务器器端脚本以及来⾃自客户端技术（如Ajax或Flash）的请求。
正确地将特权逻辑与应⽤用程序代码的其余部分分开也是很重要的。
为防⽌止未经授权的⽤用户访问，必须执⾏行行访问控制的其他重要操作包括：
⽂文件和其他资源
受保护的URL
受保护功能
直接对象引⽤用
服务
应⽤用程序数据
访问控制