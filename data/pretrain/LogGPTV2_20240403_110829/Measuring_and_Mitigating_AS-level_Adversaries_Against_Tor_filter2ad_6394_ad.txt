We use the following notation:
•
Let ADVi,j be the set of attackers on the circuit using
entry-relay i and exit-relay j to destination dest – i.e.,
∀A ∈ ADVi,j : A ∈ {psrc↔entryi ∩ pexitj↔dest}.
8
AS2EntryAS1AS1SrcASEntryAS2EntryAS3Uniform OptimalEntry AS11/31/4Entry AS21/31/4Entry AS31/31/2•
•
Let Xi,j,A be an indicator random variable for attacker
A on the circuit using entry-relay i and exit-relay j –
i.e., Xi,j,A = 1 ⇐⇒ A ∈ ADVi,j, and 0 otherwise.
Let Pi,j be the probability that a client builds a circuit
using entry-relay entryi and exit-relay exitj.
The following linear program is used to minimize the
probability of the most likely attacker (i.e., the number of
circuits visible to the attacker).
minimize z
subject to z ≥ (cid:88)
(Pi,j Xi,j,A) ∀A ∈ ADVi,j
i, j
Pi,j ∈ [0, 1] , ∀i, ∀j ;
Pi,j = 1
(cid:88)
i, j
When there are no safe entry- and exit-relay combinations:
In this case, in order to correctly minimize the amount of
information gained by the adversary, we strictly obey the
probability distribution output by our linear program described
in the previous section. No attempt is made to balance loads
according to relay capacities. It is important to note that this is
a fairly infrequent case (as shown in experiment E2 in Section
III).
D. Implementing Astoria
The measurement
toolkit described in Section III was
integrated with a modiﬁed Tor client, as follows.
(2)
Integrating our path measurement toolkit with the Tor
client. For standard measurement purposes, the toolkit simply
takes a source and destination address and returns the set of
ASes on the forward and reverse-path between the two.
Essentially, given information about the presence of at-
tackers (network-level or state-level) for each psource↔i and
pj↔dest path, the linear program seeks to ﬁnd the probability
distribution (Pi,j) over available choices of entry- and exit-
relays, for which the expected number of circuits visible to
each attacker is minimized. Entry- and exit-relays are chosen
according to this distribution (deﬁned as Dlp) during circuit
construction.
C. Security is not enough
While our LP produces a relay selection distribution that
minimizes the probability of success across all adversaries,
it does not take into account the resources available at the
selected relays. Given that Tor is a system run using commu-
nity resources contributed by volunteers, load balancing users
across these resources is important to ensure that they are
used efﬁciently and no single relay or set of relays become
overloaded. Figure 12 shows a snapshot of the distribution
of relay capacities available during the period of this study,
for all relays in the Tor system and the relays selected by a
hypothetical perfect load-balancing Tor client – i.e., one where
each relay serves exactly the amount of trafﬁc that it can handle
(assuming identically sized requests). Here, we see that over
80% of all Tor trafﬁc should be routed through ≈ 35% of all
the relays in the Tor network for every relay to be operating
within its advertised capacity.
In order to achieve load-balancing, we augment our relay-
selection algorithm with information about relay capacities
from the latest Tor consensus during circuit construction. This
is done as follows:
When there are safe entry and exit combinations: In this
case, we select a safe combination according to the distribution
of relay capacities. For example, given a set of safe entry-
and exit- relay combinations E = {(en1, ex1) . . . (enn, exn)}
and the distribution of their advertised capacities Dbw = {en1,
. . . , enn, ex1, . . . , exn}, we select a combination (eni, exi)
with probability Pi =
(cid:80)n
D(eni)×D(exi)
j=1 D(enj )×D(exj ).
This ensures that no single (entry- or exit-) relay is selected
with probability higher than the ratio of its advertised capacity
and the total advertised capacity of all safe (entry- or exit-)
relays (just as is done by the vanilla Tor client).
However, in the context of integration with the Astoria
client, it must predict paths to and from each of the entry-
relays for the client’s AS, and paths from all exit-relays toward
the destination AS (Figure 2). This results in |En| + |Ex| + 2
routing-tree computations where |En| and |Ex| are the number
of entry and exit relays, respectively. In order to mitigate the
risk of correlation attacks, by default, Tor restricts the number
of entry-relays available to each Tor client to three (called
guards [14]), and there are typically of the order of 1,000
exit-relays available to a client during circuit construction –
resulting in the order of 1,000 routing-tree computations.
Fortunately, since the source AS and entry-relay ASes are
relatively stable, these paths can be precomputed for later use
by the client. (We observe the beneﬁt of this in Section V.)
However, performing relay selection on a per-destination basis
means that pre-building circuits, as is done by the current
implementation of Tor, is no longer feasible.
AS-aware on demand circuits. First, the Tor client was
modiﬁed to perform ofﬂine IP to ASN mapping using a
database [38] for every incoming request. Note that since the
entire database (9 MB) is downloaded, the client does not
reveal its intended destination to any lookup services.
Next, modiﬁcations were made to the way requests were al-
located to circuits. The vanilla Tor client performs pre-emptive
circuit construction in order to serve requests as they arrive
(increasing performance signiﬁcantly). This is unfortunately
infeasible for a AS-aware client where relay-selection is a
function of the destination. Although one may consider pre-
constructing AS-aware circuits for a set of popular destination
ASes, the performance beneﬁt is marginal, at best. This is
mainly due to the large number of third party requests for less
popular destination ASes embedded in popular Web pages. As-
toria, therefore, only performs on demand circuit construction.
For each incoming request, Astoria ﬁrst checks if there are
existing circuits serving the same destination AS. The request
is attached to the most suitable such circuit if it exists.
Circuit construction. Astoria creates a new circuit if and
only if a request arrives for a destination with no currently
usable circuits. In such cases, the client and destination ASNs
are passed to the circuit construction and relay selection
algorithms. Circuit construction is performed as follows:
9
•
•
•
•
•
•
First, a list of entry- and exit-relays meeting the
requirements set by the request were obtained. If the
Tor client is conﬁgured to utilize only guards as entry-
relays, the list of guards is obtained. Next, in order
to perform load-balancing, information from the most
recent Tor consensus is obtained to generate the relay
capacity distribution Dbw for each entry- and exit-
relay combination.
The Astoria client performs lookups to the ofﬂine IP-
ASN database to perform mapping between entry-
and exit-relay IP address and AS numbers. These,
along with the client and destination AS numbers are
then passed to our AS-path prediction and attacker
measurement toolkit (Section III).
The toolkit returns the list of ASes on each forward-
and reverse-path between the client and every potential
entry-relay and the destination and every potential
exit-relay. In order to improve performance, paths are
cached for frequently queried destinations. Precompu-
tation or caching of paths between the client and the
high-uptime entry-relays and destinations and high-
uptime exit-relays also help improve performance.
The returned paths are checked for the presence of
common ASes in the entry and exit AS path sets.
If there are paths without an attacker,
the linear
program need not be invoked. Instead, Astoria selects
a safe entry- and exit-relay combination according to
the generated Dbw probability distribution (described
in Section IV-C). We see the impact of this load-
balancing technique in Section V.
If there are no attacker-free relay combinations, the
linear program is invoked in order to select an entry-
and exit-relay combination according to the distribu-
tion Dlp that minimizes the probability of the most
likely attacker (described in Section IV-B).
Finally, once the entry- and exit-relays are selected
according to one of the Dbw or Dlp distributions,
the circuit is constructed. The remainder of the cir-
cuit construction process remains unchanged from the
vanilla Tor client.
V. ASTORIA EVALUATION
We evaluate Astoria along multiple axes. First, we consider
the performance of Astoria by measuring the time required
to load webpages and its ability to be a good Tor citizen
by selecting bandwidth-rich relays. Second, we evaluate the
security provided by Astoria. We show that Astoria constructed
circuits are a good defense against the adversary described in
Section II. Finally, we evaluate the threat from attacks by relay-
level adversaries.
A. Evaluation methodology
Similar to our experiments in Section III, we consider the
performance and security of clients in 10 different countries –
Brazil (BR), China (CN), Germany (DE), Spain (ES), France
(FR), England (GB), Iran (IR), Italy (IT), Russia (RU), and the
United States (US). The same 200 webpages as before were
used for page-loads within each country.
Fig. 11: CDF of page load times (including circuit creation times)
for a uniform Tor, vanilla Tor, and Astoria client over 200 websites
in all 10 countries.
In order to understand the performance of Astoria and for
comparison with the vanilla Tor client, three metrics were
computed: (1) page-load times3, (2) distribution of selected
relay bandwidths, and (3) overhead of path prediction. For each
of these experiments we considered the same experimental
settings as the vanilla Tor client in experiment E1. Logs were
recorded to extract advertised capacities of all available relays
and all relays selected by the Astoria and vanilla Tor clients,
and time required for AS path computation by the Astoria
client.
In order to assess the security of Astoria and for compari-
son with the vanilla Tor client, experiments to measure security
against network-level (experiment E1), colluding network-
level (experiment E3), and state-level (experiment E4) asym-
metric correlation attackers were repeated using the Astoria
client for page-loads in the same setting (including using the
same guard-set in each country) as the vanilla Tor client (Sec-
tion III). For each experiment, three statistics were computed:
(1) the fraction of websites whose main page requests were
served by vulnerable circuits, (2) the fraction of websites that
any request that was served by a vulnerable circuit, and (3)
the total fraction of vulnerable circuits.
B. Performance evaluation
In this section, we evaluate the performance of Astoria
using three metrics: (1) page-load times, (2) distribution of
selected relay bandwidths, and (3) overhead of path prediction.
Page load times. Figure 11 shows the distribution of page-
load times when using the vanilla Tor client, a modiﬁed Tor
client with a uniform relay-selection strategy, and the Astoria
client. We see that the median page-load time with the vanilla
Tor client is only 5.9 sec, while the median page-load time
for the Astoria and uniform Tor client are 8.3 sec and 15.6
sec, respectively. Although this drop in performance from the
vanilla Tor client to Astoria is signiﬁcant, it can be argued there
are two main causes for this, both of which are unavoidable
to any AS-aware Tor client: (1) It is no longer possible to pre-
construct and re-use circuits to the same degree as the vanilla
Tor client, and (2) There is a non-negligible amount of time
spent for computing paths and checking for the presence of
attackers on these paths.
3The Selenium driver.get() method was used to detect the end of
page-loads.
10
 0 0.2 0.4 0.6 0.8 1 0 5 10 15 20 25 30Cumulative ProbabilityPage Load Time (sec)AstoriaVanilla TorUniform Toradversaries. The threat from such adversaries is signiﬁcantly
reduced from up to 40% of all circuits being vulnerable to
3%, with the Astoria client. Figures 14a and 14b breaks down
the results of this experiment by country. We see that Astoria
completely removes the threat of network-level attackers on
circuits carrying the main page request in clients from Brazil,
France, and Iran, while bringing the risk down to under 5% in
six other countries.
E3: Measuring the impact of sibling ASes. We ﬁnd
that siblings have little impact on the security provided by
Astoria. Over all circuits constructed by Astoria, the addition
of colluding sibling ASes resulted in less than a 3% increase
in number of vulnerable circuits, with the only signiﬁcant
increase being in Germany (DE). This is illustrated in Figures
14c and 14d. This large increase in number of vulnerable
circuits indicates that if sibling ASes in Germany were to
collude, Astoria (given the VPN client location and selected
entry-guards) is often left with no safe entry- and exit- relay
options for circuit construction. It is important to note that
although there are a signiﬁcant number of vulnerable circuits
created by Astoria, these circuits are constructed using our
linear program (Eq. 2) which minimizes the number of circuits
visible to each attacker.
E4: Measuring the impact of state-level adversaries. As-
toria performs reasonably well even against state-level adver-
saries by reducing the fraction of potentially vulnerable circuits
from 85% (vanilla Tor) to 25%, over all countries. The per
country breakdown is illustrated in Figures 14e and 14f. The
results show a steep decrease in the ratio of vulnerable websites
for all countries except the United States (US). This is due to
the large presence of American ASes on paths to and from
our US VPN vantage point and the entry-guards and any Tor
exit-relay and our US destinations.
Defending against active network-level attacks. Astoria
focuses on adversaries who may lie on asymmetric network
paths between the client and entry; and exit and destination,
respectively. However, Sun et al. [39] highlight attacks based,
not only on static path properties, but also dynamics of BGP
(e.g., hijacks, routing instability). Taking this sort of attack
into account is challenging as it requires realtime access to
interdomain routing data and intelligent analysis to identify
incidents that may impact the safety of the client’s path. In
the future, we plan to integrate subscriptions to BGP hijack
data sources (e.g., Argus [36], or ongoing efforts at building
a real-time interception detector [12]) into Astoria to allow it
to operate on dynamic BGP paths.
D. Security against relay-level attackers
In order to defend against relay-level attackers, Astoria
inherits the concept of entry-guards from the vanilla Tor client
and also ensures that no two relays from the same family are
placed on the same circuit. However, due to its AS-awareness,
Astoria (and any AS-aware client that constructs circuits which