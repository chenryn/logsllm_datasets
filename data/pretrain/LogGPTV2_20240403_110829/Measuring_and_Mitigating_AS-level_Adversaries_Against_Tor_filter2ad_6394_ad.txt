We use the following notation to describe the components and processes involved in our model:

- **ADVi,j**: The set of attackers on the circuit using entry-relay \(i\) and exit-relay \(j\) to destination \(dest\). Formally, \(\forall A \in ADVi,j : A \in \{psrc \leftrightarrow entry_i \cap pexit_j \leftrightarrow dest\}\).

- **Xi,j,A**: An indicator random variable for attacker \(A\) on the circuit using entry-relay \(i\) and exit-relay \(j\). Specifically, \(Xi,j,A = 1\) if and only if \(A \in ADVi,j\), and \(0\) otherwise.

- **Pi,j**: The probability that a client builds a circuit using entry-relay \(entry_i\) and exit-relay \(exit_j\).

The objective is to minimize the probability of the most likely attacker (i.e., the number of circuits visible to the attacker) using the following linear program:

\[
\text{minimize } z
\]
\[
\text{subject to: }
\]
\[
z \geq \sum_{i, j} (Pi,j \cdot Xi,j,A) \quad \forall A \in ADVi,j
\]
\[
Pi,j \in [0, 1] \quad \forall i, \forall j
\]
\[
\sum_{i, j} Pi,j = 1
\]

### Handling No Safe Entry- and Exit-Relay Combinations
When there are no safe combinations of entry- and exit-relays, we strictly follow the probability distribution output by the linear program. No attempt is made to balance loads according to relay capacities. This scenario is relatively infrequent, as shown in experiment E2 in Section III.

### Implementing Astoria
The measurement toolkit described in Section III was integrated with a modified Tor client as follows:

1. **Integration with Path Measurement Toolkit**:
   - For standard measurement purposes, the toolkit takes a source and destination address and returns the set of ASes on the forward and reverse paths between them.
   - Given information about the presence of attackers (network-level or state-level) for each \(psource \leftrightarrow i\) and \(pj \leftrightarrow dest\) path, the linear program seeks to find the probability distribution \(Pi,j\) over available choices of entry- and exit-relays, minimizing the expected number of circuits visible to each attacker. Entry- and exit-relays are chosen according to this distribution (defined as \(Dlp\)) during circuit construction.

### Security and Load Balancing
While the LP minimizes the probability of success across all adversaries, it does not consider the resources available at the selected relays. Load balancing is crucial to ensure efficient use of community resources and prevent overload. Figure 12 shows a snapshot of the distribution of relay capacities, indicating that over 80% of all Tor traffic should be routed through approximately 35% of all relays for every relay to operate within its advertised capacity.

To achieve load balancing, we augment our relay-selection algorithm with information about relay capacities from the latest Tor consensus during circuit construction. When there are safe entry and exit combinations, we select a safe combination according to the distribution of relay capacities. For example, given a set of safe entry- and exit-relay combinations \(E = \{(en_1, ex_1), \ldots, (en_n, ex_n)\}\) and the distribution of their advertised capacities \(Dbw = \{en_1, \ldots, en_n, ex_1, \ldots, ex_n\}\), we select a combination \((en_i, ex_i)\) with probability:

\[
P_i = \frac{D(en_i) \times D(ex_i)}{\sum_{j=1}^n D(en_j) \times D(ex_j)}
\]

This ensures that no single relay is selected with a probability higher than the ratio of its advertised capacity to the total advertised capacity of all safe relays.

### AS-Aware On-Demand Circuits
First, the Tor client was modified to perform offline IP-to-ASN mapping using a database. The entire database (9 MB) is downloaded, so the client does not reveal its intended destination to any lookup services.

Next, modifications were made to how requests are allocated to circuits. The vanilla Tor client performs preemptive circuit construction, which is infeasible for an AS-aware client. Therefore, Astoria only performs on-demand circuit construction. For each incoming request, Astoria checks if there are existing circuits serving the same destination AS and attaches the request to the most suitable such circuit if it exists.

### Circuit Construction
Astoria creates a new circuit if and only if a request arrives for a destination with no currently usable circuits. The process involves:

1. **Obtaining a List of Relays**: A list of entry- and exit-relays meeting the request requirements is obtained. If the Tor client is configured to use only guards as entry-relays, the list of guards is used.

2. **Load Balancing**: Information from the most recent Tor consensus is used to generate the relay capacity distribution \(Dbw\) for each entry- and exit-relay combination.

3. **AS-Path Prediction and Attacker Measurement**: The Astoria client performs lookups to the offline IP-ASN database to map entry- and exit-relay IP addresses to AS numbers. These, along with the client and destination AS numbers, are passed to the AS-path prediction and attacker measurement toolkit.

4. **Checking Paths**: The returned paths are checked for the presence of common ASes in the entry and exit AS path sets. If there are paths without an attacker, the linear program need not be invoked. Instead, Astoria selects a safe entry- and exit-relay combination according to the generated \(Dbw\) probability distribution.

5. **Invoking the Linear Program**: If there are no attacker-free relay combinations, the linear program is invoked to select an entry- and exit-relay combination according to the distribution \(Dlp\) that minimizes the probability of the most likely attacker.

6. **Circuit Construction**: Once the entry- and exit-relays are selected, the circuit is constructed. The remainder of the circuit construction process remains unchanged from the vanilla Tor client.

### Evaluation of Astoria
We evaluate Astoria along multiple axes, including performance and security. We measure the time required to load webpages, the ability to select bandwidth-rich relays, and the security provided against various types of adversaries.

#### Evaluation Methodology
We consider the performance and security of clients in 10 different countries. The same 200 webpages were used for page-loads within each country. Metrics computed include page-load times, distribution of selected relay bandwidths, and overhead of path prediction.

#### Performance Evaluation
Figure 11 shows the distribution of page-load times when using the vanilla Tor client, a modified Tor client with a uniform relay-selection strategy, and the Astoria client. The median page-load time with the vanilla Tor client is 5.9 seconds, while the median page-load time for the Astoria and uniform Tor client are 8.3 seconds and 15.6 seconds, respectively. The drop in performance is significant but unavoidable due to the inability to pre-construct and re-use circuits and the time spent on path computation and checking for attackers.

#### Security Evaluation
We assess the security of Astoria against network-level, colluding network-level, and state-level asymmetric correlation attackers. Astoria significantly reduces the threat from such adversaries, with the fraction of vulnerable circuits decreasing from up to 40% to 3%. The results show a steep decrease in the ratio of vulnerable websites for all countries except the United States, due to the large presence of American ASes on paths.

### Defending Against Active Network-Level Attacks
Astoria focuses on adversaries who may lie on asymmetric network paths. However, real-time BGP dynamics, such as hijacks and routing instability, pose additional challenges. Future work includes integrating subscriptions to BGP hijack data sources to allow Astoria to operate on dynamic BGP paths.

### Security Against Relay-Level Attackers
To defend against relay-level attackers, Astoria inherits the concept of entry-guards and ensures that no two relays from the same family are placed on the same circuit. Due to its AS-awareness, Astoria constructs circuits that are less likely to be compromised by relay-level adversaries.