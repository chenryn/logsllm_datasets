save the key file on removable media and lock it
away. The user’s password is hashed to create
the H used in the PAK protocol; a different hash
of the password is used as the file encryption
key. Finally,
there is a command (inside the
authenticated, encrypted channel between client
and secstore) to change passwords by sending a
new H; for consistency, the client process must at
the same time fetch and re-encrypt all files.
When factotum starts,
local
the
secstore and checks whether the user has an
account.
the user’s
secstore password and fetches the key file. The
PAK protocol ensures mutual authentication and
prevents dictionary attacks on the password by
passive wiretappers or active intermediaries.
Passwords saved in the key file can be long ran-
dom
simpler
challenge/response
protocols.
Thus the user need only remember a single,
weaker password to enable strong, ‘‘single sign
on’’ authentication to unchanged legacy applica-
tions scattered across multiple authentication
domains.
suitable
for
authentication
it prompts
it dials
strings
If
so,
for
where H is a preshared secret between client C
and server S. There are several variants of PAK,
all presented in papers mainly concerned with
proofs of cryptographic properties. To aid imple-
menters, we have distilled a description of the
specific version we use into an Appendix to this
6. Transport Layer Security
Since the Plan 9 operating system is designed for
use in network elements that must withstand
direct attack, unguarded by firewall or VPN, we
seek to ensure that all applications use channels
with appropriate mutual
authentication and
encryption. A principal tool for this is TLS 1.0
[3]. (TLS 1.0 is nearly the same as SSL 3.0, and
our software is designed to interoperate with
implementations of either standard.)
TLS defines a record layer protocol for message
integrity and privacy through the use of message
digesting and encryption with shared secrets. We
implement this service as a kernel device, though
it could be performed at slightly higher cost by
invoking a separate program. The library inter-
face to the TLS kernel device is:
int pushtls(int fd, char *hashalg,
char *cryptalg, int isclient,
char *secret, char *dir);
Given a file descriptor, the names of message
digest and encryption algorithms, and the shared
secret, pushtls returns a new file descriptor for
the encrypted connection.
(The final argument
dir receives the name of the directory in the TLS
device that is associated with the new connec-
tion.) The function is named by analogy with the
‘‘push’’ operation supported by the stream I/O
system of Research Unix and the first two edi-
tions of Plan 9. Because adding encryption is as
simple as replacing one file descriptor with
another, adding encryption to a particular net-
work service is usually trivial.
The Plan 9 shared key authentication protocols
establish a shared 56-bit secret as a side effect.
Native Plan 9 network services such as cpu and
exportfs use these protocols for authentication
and then invoke pushtls with the shared secret.
Above the record layer, TLS specifies a hand-
shake protocol using public keys to establish the
session secret. This protocol is widely used with
HTTP and IMAP4 to provide server authentica-
tion, though with client certificates it could pro-
vide mutual authentication. The library function
int tlsClient(int fd, TLSconn *conn)
handles the initial handshake and returns the
result of pushtls. On return, it fills the conn
structure with the session ID used and the X.509
certificate presented by the server, but makes no
effort to verify the certificate. Although the orig-
inal design intent of X.509 certificates expected
that they would be used with a Public Key Infras-
tructure, reliable deployment has been so long
delayed and problematic that we have adopted
the simpler policy of just using the X.509 certifi-
cate as a representation of
the public key,
depending on a locally-administered directory of
SHA1 thumbprints
to allow applications to
decide which public keys to trust for which
purposes.
7. Related Work and Discussion
Kerberos, one of the earliest distributed authenti-
cation systems, keeps a set of authentication tick-
ets in a temporary file called a ticket cache. The
ticket cache is protected by Unix file permis-
sions. An environment variable containing the
file name of the ticket cache allows for different
ticket caches in different simultaneous login ses-
sions. A user logs in by typing his or her Ker-
beros password. The login program uses the
Kerberos password to obtain a temporary ticket-
granting ticket from the authentication server,
initializes
the ticket cache with the ticket-
granting ticket, and then forgets the password.
Other applications can use the ticket-granting
ticket to sign tickets for themselves on behalf of
the user during the login session. The ticket
cache is removed when the user logs out [18].
The ticket cache relieves the user from typing a
password every time authentication is needed.
The secure shell SSH develops this idea further,
replacing the temporary file with a named Unix
domain socket connected to a user-level pro-
gram, called an agent. Once the SSH agent is
started and initialized with one or more RSA pri-
vate keys, SSH clients can employ it to perform
RSA authentications on their behalf.
In the
absence of an agent, SSH typically uses RSA
keys read from encrypted disk files or uses
passphrase-based authentication, both of which
would require prompting the user
a
passphrase whenever authentication is needed
[20]. The self-certifying file system SFS uses a
similar agent [6], not only for moderating the use
of client authentication keys but also for verify-
ing server public keys [8].
Factotum is a logical continuation of this evolu-
tion, replacing the program-specific SSH or SFS
agents with a general agent capable of serving a
wide variety of programs. Having one agent for
all programs removes the need to have one agent
for each program.
It also allows the programs
themselves to be protocol-agnostic, so that, for
example, one could build an SSH workalike
capable of using any protocol supported by
factotum, without that program knowing any-
thing about
the protocols. Traditionally each
program needs to implement each authentication
protocol for itself, an O(n 2 ) coding problem that
factotum reduces to O(n).
Previous work on agents has concentrated on
for
in
the
other
direction,
their use by clients authenticating to servers.
Looking
Sun
Microsystem’s pluggable authentication module
(PAM) is one of the earliest attempts to provide a
general authentication mechanism for Unix-like
operating systems
[17]. Without a central
authority like PAM, system policy is tied up in
the various implementations of network services.
For example, on a typical Unix,
if a system
administrator decides not to allow plaintext pass-
words for authentication, the configuration files
for a half dozen different servers (cid:20) rlogind,
telnetd, ftpd, sshd, and so on (cid:20) need to be
edited. PAM solves this problem by hiding the
details of a given authentication mechanism
behind a common library interface. Directed by
a system-wide configuration file, an application
selects a particular authentication mechanism by
dynamically loading the appropriate shared
library. PAM is widely used on Sun’s Solaris
and some Linux distributions.
Factotum achieves the same goals using the
agent approach. Factotum is the only process
that needs to create capabilities, so all the net-
work servers can run as untrusted users (e.g.,
Plan 9’s none or Unix’s nobody), which greatly
reduces the harm done if a server is buggy and is
compromised. In fact, if factotum were imple-
mented on Unix along with an analogue to the
Plan 9 capability device, venerable programs like
su and login would no longer need to be
installed ‘‘setuid root.’’
Several other systems, such as Password Safe
[16], store multiple passwords in an encrypted
file, so that the user only needs to remember one
password. Our secstore solution differs from
these by placing the storage in a hardened loca-
tion in the network, so that the encrypted file is
less liable to be stolen for offline dictionary
attack and so that it is available even when a user
has several computers.
In contrast, Microsoft’s
Passport system [9] keeps credentials in the net-
work, but centralized at one extremely-high-
value target. The important feature of Passport,
setting up trust relationships with e-merchants, is
outside our scope. The secstore architecture is
almost identical to Perlman and Kaufman’s [10]
but with newer EKE technology. Like them, we
chose to defend mainly against outside attacks on
secstore; if additional defense of the files on
the server itself is desired, one can use dis-
tributed techniques [4].
We made a conscious choice of placing encryp-
tion, message integrity, and key management at
the application layer (TLS, just above layer 4)
rather than at layer 3, as in IPsec. This leads to a
simpler structure for the network stack, easier
integration with applications and, most impor-
tant, easier network administration since we can
recognize which applications are misbehaving
based on TCP port numbers. TLS does suffer
(relative to IPsec) from the possibility of forged
TCP Reset, but we feel that this is adequately
dealt with by randomized TCP sequence num-
bers. In contrast with other TLS libraries, Plan 9
does not require the application to change write
calls to sslwrite but simply to add a few lines
of code at startup [13].
to subvert
8. Conclusion
Writing safe code is difficult. Stack attacks, mis-
takes in logic, and bugs in compilers and operat-
ing systems can each make it possible for an
attacker
the intended execution
sequence of a service. If the server process has
the privileges of a powerful user, such as root
on Unix, then so does the attacker. Factotum
allows us to constrain the privileged execution to
a single process whose core is a few thousand
lines of code. Verifying such a process, both
through manual and automatic means, is much
easier and less error prone than requiring it of all
servers.
An implementation of these ideas is in Plan 9
from Bell Labs, Fourth Edition, freely available
from http://plan9.bell−labs.com/plan9.
Acknowledgments
William Josephson contributed to the implemen-
tation of password changing in secstore. We
thank Phil MacKenzie and Martín Abadi for
helpful comments on early parts of the design.
Chuck Blake, Peter Bosch, Frans Kaashoek, Sape
Mullender, and Lakshman Y. N., predominantly
Dutchmen, gave helpful comments on the paper.
Russ Cox is supported by a fellowship from the
Fannie and John Hertz Foundation.
References
1.
and M. Merritt,
S.M. Bellovin
‘‘Augmented
Encrypted Key Exchange,’’ Proceedings of the 1st
ACM Conference on Computer and Communications
Security, 1993, pp. 244 - 250.
Victor Boyko, Philip MacKenzie, and Sarvar Patel,
‘‘Provably
Password-Authenticated Key
Exchange using Diffie-Hellman,’’ Eurocrypt 2000,
156(cid:19)171.
Secure
2.
Proceedings of the 1998 Internet Society Network and
Distributed System Security Symposium, San Diego,
CA, March 1998, pp. 97-111.
20. Ylonen, T., ‘‘SSH(cid:20)Secure Login Connections Over
the Internet,’’ 6th USENIX Security Symposium, pp.
37-42. San Jose, CA, July 1996.
Appendix: Summary of the PAK protocol
Let q > 2160 and p > 21024 be primes such that
p = rq + 1 with r not a multiple of q. Take h˛ Zp
*
such that g” h r is not 1. These parameters may
be chosen by the NIST algorithm for DSA, and
are public, fixed values. The client C knows a
and computes H” (H 1 (C, p )) r and
secret
H - 1, where H 1 is a hash function yielding a ran-
*, and H - 1 may be computed
dom element of Zp
by gcd. (All arithmetic is modulo p.) The client
gives H - 1 to the server S ahead of time by a pri-
vate channel. To start a new connection, the
client generates a random value x, computes
m” g xH, then calls the server and sends C and m.
The server checks m„ 0 mod p, generates ran-
(mH - 1 ) y, and sends
dom y, computes m
,H - 1 ). Next
S, m
the client computes s = m
x, verifies k, and sends
,H - 1 ). The server
k¢
,s
then verifies k¢ and both sides begin using ses-
,H - 1 ).
sion key K” sha1("session",C,S,m,m
In the published version of PAK, the server name
S is included in the initial hash H, but doing so is
inconvenient
in our application, as the server
may be known by various equivalent names.
MacKenzie has shown [7] that the equivalence
proof [2] can be adapted to cover our version.
, k” sha1("server",C,S,m,m
sha1("client",C,S,m,m
g y, s
,s
,s
3.
T . Dierks and C. Allen, ‘‘The TLS Protocol, Version
1.0,’’ RFC 2246.
4. Warwick Ford and Burton S. Kaliski, Jr., ‘‘Server-
Assisted Generation of a Strong Secret from a Pass-
word,’’ IEEE Fifth International Workshop on Enter-
prise Security, National Institute of Standards and
Technology (NIST), Gaithersburg MD, June 14 - 16,
2000.
David P. Jablon, ‘‘Strong Password-Only Authenti-
cated Key Exchange,’’
http://integritysciences.com/speke97.html.
5.
6. Michael Kaminsky. ‘‘Flexible Key Management with
7.
8.
SFS Agents,’’ Master’s Thesis, MIT, May 2000.
Philip MacKenzie, private communication.
David Mazières, Michael Kaminsky, M. Frans
Kaashoek and Emmett Witchel, ‘‘Separating key man-
agement from file system security,’’ Symposium on
Operating Systems Principles, 1999, pp. 124-139.
9. Microsoft Passport, http://www.passport.com/.
10. Radia Perlman and Charlie Kaufman,
‘‘Secure
Password-Based Protocol for Downloading a Private
Key,’’ Proc. 1999 Network and Distributed System
Security Symposium, Internet Society, January 1999.
11. Rob Pike, Dave Presotto, Sean Dorward, Bob Flan-
drena, Ken Thompson, Howard Trickey, and Phil
Winterbottom, ‘‘Plan 9 from Bell Labs,’’ Computing
Systems, 8, 3, Summer 1995, pp. 221-254.
12. Rob Pike, Dave Presotto, Ken Thompson, Howard
Trickey, Phil Winterbottom,
‘‘The Use of Name
Spaces in Plan 9,’’ Operating Systems Review, 27, 2,
April 1993, pp. 72-76 (reprinted from Proceedings of
the 5th ACM SIGOPS European Workshop, Mont
Saint-Michel, 1992, Paper nº 34).
13. Eric Rescorla, ‘‘SSL and TLS: Designing and Build-
ing Secure Systems,’’ Addison-Wesley, 2001. ISBN
0-201-61598-3, p. 387.
14. C. Rigney, A. Rubens, W. Simpson, S. Willens,
In User Service
‘‘Remote Authentication Dial
(RADIUS),’’ RFC2138, April 1997.
15. Ronald L. Rivest and Butler Lampson, ‘‘SDSI(cid:20)A
Simple
Infrastructure,’’
http://theory.lcs.mit.edu/~rivest/sdsi10.ps.
Distributed
Security
16. Bruce Schneier, Password Safe,
http://www.counterpane.com/passsafe.html.
17. Vipin Samar, ‘‘Unified Login with Pluggable Authen-
tication Modules (PAM),’’ Proceedings of the Third
ACM Conference on Computer Communications and
Security, March 1996, New Delhi, India.
Jennifer G. Steiner, Clifford Neumann, and Jeffrey I.
Schiller, ‘‘Kerberos: An Authentication Service for
Open Network Systems,’’ Proceedings of USENIX
Winter Conference, Dallas, Texas, February 1988, pp.
191(cid:19)202.
18.
19. T. Wu, ‘‘The Secure Remote Password Protocol,’’
p
”
”
”