### Disappearing Symmetric Key Generation

In the context of our protocol, we disregard the symmetric key generation induced by PSK (Pre-Shared Key) patterns. After performing partial evaluation, the code is reduced to a minimal set of operations necessary for the first token \( E \) of the \( X \) protocol, with all compile-time parameters removed.

### Hybrid Embeddings

Revisiting Section II, we can interpret our earlier specification as an interpreter for Noise patterns or, alternatively, as an evaluator defining the semantics of a deeply embedded domain-specific language (DSL) for Noise patterns. The match in the function is a compile-time operation on the deeply embedded representation of Noise patterns, which is partially evaluated away. We term this approach a **hybrid embedding**: the code evaluated at compile-time operates over a deep embedding (Noise patterns), but after partial evaluation, only a shallow embedding (Low* code, which executes at runtime) remains.

This hybrid style enables us to stage and automate the production of Low* code. Instead of manually writing Low* code, we embed a protocol compiler that leverages F*'s compile-time reduction capabilities. This method is particularly useful for sending message tokens, and it can be extended to include arbitrary pure F* code, including recursion, to fully automate the generation of a specialized Noise protocol instance.

```fsharp
[@@ strict on arguments [5]] inline for extraction
let rec send_message_tokens (nc: iconfig) ssi initiator is_psk tokens st outlen out =
  match tokens with
  | [] -> success
  | tk :: tokens' ->
    let tk_outlen = token_message_vs nc ssi tk in
    let tk_out = sub out 0ul tk_outlen in
    let r1 = send_message_token ssi initiator is_psk tk st tk_out in
    if is_success r1 then
      let outlen' = outlen -! tk_outlen in
      let out' = sub out tk_outlen outlen' in
      let ssi' = send_token_update ssi is_psk tk ssi in
      let r2 = send_message_tokens ssi' initiator is_psk tokens' st outlen' out' in
      compose_return_type ssi is_psk true tokens' tk r2
    else
      compute_return_type ssi is_psk true tk tokens' r1
```

The function above operates over a list of tokens, generating Low* code for an entire Noise handshake message. To ensure that the recursive part of `send_message_tokens` is evaluated at compile-time when applied to constant arguments, we use F* to unfold recursive definitions, restricting the unfolding to applications where the fifth argument (tokens) is concrete. The `inline let` attribute indicates pure computations to be inlined at extraction-time.

### Verification and Partial Evaluation

The function is verified once, providing a verification statement for any list of noise tokens. At extraction-time, the user applies the function to five concrete arguments. For example, if the pattern is `[E; ES; S; SS]`, after a few steps of reduction, we obtain:

```fsharp
let r1 = send_message_token ... E ... in
if is_success r1 then ...
let r2 = send_message_tokens ... [ES; S; SS] ... in ...
```

Since computing `E` always succeeds, `is_success r1` reduces to `true`, eliminating the `else` branch. Partial evaluation continues until all compile-time code has disappeared, leaving a sequence of efficient Low* calls that implement the specification for the given list of tokens.

### Hybrid Type Definitions and Function Signatures

We extend the hybrid embedding style to optimize internal type definitions and user-facing functions. For type definitions, we ensure that the generated C code contains no superfluous fields, which is crucial for both auditing and ensuring efficient memory usage. For example:

```fsharp
type handshake_state_t nc ssi ... is_psk ... = { ...
  psk: if is_psk then lbuﬀer ... else unit; ... }
```

If the chosen Noise protocol requires a PSK, the `psk` field is an array of bytes. Otherwise, the generic type reduces to `unit`, which is eliminated by KReMLin, the Low*-to-C compiler, thus removing an always-NULL, superfluous field.

For user-facing functions, we ensure that no "dummy" arguments are offered in the public API. Consider the following initialization function:

```fsharp
let session_create (idc: idconfig) (initiator: bool) ...
  (dvp: device_p idc) (peer_id: opt_pid_t idc initiator): ST ... = ...
```

Whether `peer_id` is needed at initialization-time depends on the protocol. Instead of relying on implicit invariants, we use a generic type `opt_pid_t`. For the XX pattern, `opt_pid_t` becomes `unit`, and for the IKpsk2 initiator, it becomes `lbuﬀer uint8`. KReMLin ensures that function arguments of type `unit` are eliminated, providing a custom API for each Noise protocol.

### A Complete Verified Noise Library Stack & API

Section III describes the core handshake actions, but a complete Noise library includes many additional APIs and features. We now review the remainder of our implementation, focusing on the state machines and user-proof APIs.

#### Generic State Machine

The core handshake actions implement individual lines of a Noise Pattern. We tie these actions into two state machines: one for the initiator and one for the responder. These state machines are linear, with each valid transition advancing the participant to the next step.

The `send_message_tokens` function from Section III takes many runtime parameters, which we group into a single type definition, `state_t`. Continuing with hybrid embeddings, a generic function `state_t_handshake_write` advances the state machine and returns a fresh `state_t` for any choice of pattern, step, or initiator vs. responder.

```fsharp
(* The low-level state machine type: encapsulates keypair, chaining hash state, symmetric state, current handshake step, psk, etc. *)
val state_t: isconfig → initiator:bool → Type0

(* Simplified signature *)
val state_t_handshake_write (isc: isconfig) (ssi: static_info)
  (i: nat { i < isc.pattern.messages })
  (payload_len: size_t) (payload: lbuﬀer uint8)
  (st: state_t isc (i%2=0) { ... })
  (outlen: size_t) (out: lbuﬀer uint8):
  Stack (s_result_code (st:state_t isc (i%2=0) { ... }))
```

The function is written in the hybrid embedding style, allowing the caller to specialize the function for the i-th step of the handshake. Compile-time parameters determine the nature of the return type, derived from the series of return types for each token.

#### User-Proof State Machine

The low-level state machine cannot be exposed directly to the user. It returns a new state rather than modifying a heap-allocated state through a pointer and does not record stuck states. We transform this into a user-proof state machine, enriching the API with features for device, peer, and key management. We encapsulate the `state_t` in a `dstate_t`, which handles Low* region-based memory management and ownership, holds session and peer names, and maintains a device state for peer management.

```fsharp
[@CAbstractStruct] type dstate_t idc =
  | Initiator: state:state_t idc.isc true → session_name:name_t
    → peer_name: name_t → device: device_t → ...
    → dstate_t ...
  | Responder: state:state_t idc.isc false → (* similar *)

type dstate_p ... = B.pointer_or_null dstate_t
```

Introducing `dstate_p` serves several purposes: it makes the C code more idiomatic, allows for a NULL case to handle errors, and introduces a modicum of abstraction by using the `CAbstractStruct` keyword.

#### Device API and Session Management

The `dstate_t` also encapsulates device management. A device holds a set of peers, indexed by a unique identifier, and provides a high-level API for adding, looking up, updating, or removing peers. Each peer contains detailed information, such as their remote static and pre-shared keys.

```c
device_t *device_create(uint32_t prologue_len,
                        uint8_t *prologue, const char *name);
peer_t *device_add_peer(device_t *dvp,
                        uint8_t *prologue, const char *name, uint8_t *rs, uint8_t *psk);

session_t *create_ikpsk2_initiator(device_t *d, uint32_t peer_id);
session_t *create_ikpsk2_responder(device_t *d);
```

Given a device, the user can create a new session with a chosen peer, in the role of either the initiator or the responder. Different Noise protocols handle identity management differently, and we rule out errors by construction in our API using hybrid embeddings.

#### Long-Term Key Storage

To make the library self-contained, Noise* incorporates a verified long-term key storage feature. The device state can be serialized and deserialized, including the peer list and static key. We use an AEAD construction with the device and peer names as authenticated data. Each serialization generates a fresh nonce to avoid nonce reuse, and the nonce is stored on disk for decryption. Our implementation comes with proofs of correctness for the parser and serializer.

#### High-Level API with Message Encapsulation

To provide an industrial-grade, error-proof Noise library, we expose an informative subset of Noise confidentiality levels to the user: "public" (C0), "known remote replayable" (C2), "known remote weak forward" (C3), and "known remote strong forward" (C5). We abstract away the type of messages and require the user to specify a level and commit to a session and a peer.

```c
encap_message_t *pack_with_conf_level(
  uint8_t requested_conf_level,
  const char *session_name, const char *peer_name,
  uint32_t msg_len, uint8_t *msg);

bool unpack_message_with_auth_level(
  uint32_t *out_msg_len, uint8_t **out_msg,
  char *session_name, char *peer_name,
  uint8_t requested_auth_level, encap_message_t *emp);
```

Encapsulated messages can be sent through an API that wraps `handshake_write` and handles packing and unpacking. When sending, we check that the session has reached at least the desired confidentiality level; when receiving, we check that the requested authentication level is at most the session’s current level.

```c
rcode session_write(encap_message_t *input, session_t *sn,
                     uint32_t *inlen, uint8_t *input);

rcode session_read(encap_message_t **out, session_t *sn,
                    uint32_t *out_len, uint8_t **out);
```

### Symbolic Security Proofs for Noise*

As explained in Section II, the Noise specification describes the expected security guarantees for each Noise protocol in terms of authentication (A0-A2) and confidentiality levels (C0-C5). Several analyses have shown that various Noise protocols meet these guarantees against Dolev-Yao-style active network adversaries using tools like ProVerif and Tamarin. However, these analyses do not cover important details like message formats, protocol state machines, or key management.

#### DY* Framework

DY* is a set of F* libraries that enables the symbolic security verification of protocol code written in F*. We take our Noise protocol specification and replace all calls to concrete cryptography, random number generation, and state storage with the symbolic libraries provided by DY*, obtaining a symbolic security specification in F* that is functionally equivalent to our original specification.

We use the proof patterns provided by DY* to prove that our specification satisfies the security guarantees expected by Noise. Our proofs account for an unbounded number of protocol sessions and an active Dolev-Yao adversary. A key novelty of our approach is that we build a generic security proof for a Noise protocol interpreter, obtaining security guarantees for all Noise protocols in one go.

#### Trace-Based Semantics

A DY* program consists of a set of stateful protocol functions (e.g., `session_create`, `handshake_write`) that can be executed by each protocol participant to initiate or continue any number of protocol sessions. Each principal can store session-specific and long-term state. The interleaved distributed execution of protocol sessions is modeled by an append-only global trace that records every message sent, every freshly generated random value, every stored state, and every security event.

The attacker is modeled as an F* program that acts as a global scheduler, driving the execution of all protocol sessions. The attacker has all the capabilities of an active network attacker and can compromise any state stored at any principal. The attacker's knowledge at a particular timestamp in the global trace is formalized by an inductive predicate: `attacker_knows_at_i_m`.

#### Formalizing Payload Security Properties

We formalize each of the 3 authentication levels (A0-A2) and 6 confidentiality levels (C0-C5) of Noise as trace properties, i.e., predicates over the global trace. For example, the authentication goal for messages sent at Noise authentication level A1 can be written as:

```fsharp
forall i sid A B M.
  event_at i (AuthReceived B sid A M 1) ==>
  (exists j. j < i && event_at j (AuthSent A B M 1)) ||
  (exists k. k < i && (corrupt_principal k A || corrupt_session k B sid || corrupt_principal k B))
```

This trace property states that whenever B accepts a message M from A at time i (with authentication level A1), either this must be an authentic message sent by A at time j < i, or the long-term state of A, the session state at B, or the long-term state of B must have been compromised before i.

For authentication level A2, we remove the disjunct to require the absence of KCI attacks.