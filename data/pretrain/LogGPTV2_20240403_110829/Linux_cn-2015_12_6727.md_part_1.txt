---
author: matt
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 1
  viewnum: 8584
date: '2015-12-12 09:51:00'
editorchoice: false
excerpt: 大约一年前，微软宣布开源了 .NET 框架的大部分。当时，Scott Hanselman 使用微软 Power BI对代码库做了一个漂亮的分析。
  现在一年过去了，我想要试试对以下问题做个解答：  微软开源了 .NET 框架的大部分之后，社区参与贡献了多少？  我着眼于以下三个项目做了分析，它们是 .NET
  生态系统中最主要部分之一，也是 .NET 基金会内最活跃/收藏/分支的项目之一：  Roslyn .NET 编译器平台，提供了开源的 C# 和 Visual Basic
  编译器，以及丰富的代码分析 API。 CoreCLR .NET Core 运行时环境和底层库（mscorlib），它包括垃圾回收、JIT 编译器
fromurl: http://mattwarren.org/2015/12/08/open-source-net-1-year-later/
id: 6727
islctt: true
largepic: /data/attachment/album/201512/11/233709aavkkvzkz5awk5kk.jpg
permalink: /article-6727-1.html
pic: /data/attachment/album/201512/11/233709aavkkvzkz5awk5kk.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 6921
reviewer: ''
selector: ''
summary: 大约一年前，微软宣布开源了 .NET 框架的大部分。当时，Scott Hanselman 使用微软 Power BI对代码库做了一个漂亮的分析。
  现在一年过去了，我想要试试对以下问题做个解答：  微软开源了 .NET 框架的大部分之后，社区参与贡献了多少？  我着眼于以下三个项目做了分析，它们是 .NET
  生态系统中最主要部分之一，也是 .NET 基金会内最活跃/收藏/分支的项目之一：  Roslyn .NET 编译器平台，提供了开源的 C# 和 Visual Basic
  编译器，以及丰富的代码分析 API。 CoreCLR .NET Core 运行时环境和底层库（mscorlib），它包括垃圾回收、JIT 编译器
tags:
- 微软
- .NET
- 开源
thumb: false
title: 微软开源 .NET 一年后……
titlepic: false
translator: wxy
updated: '2015-12-12 09:51:00'
---
![](/data/attachment/album/201512/11/233709aavkkvzkz5awk5kk.jpg)
大约一年前，微软宣布[开源了 .NET 框架的大部分](/article-4209-1.html)。当时，Scott Hanselman 使用微软 Power BI [对代码库做了一个漂亮的分析](http://www.hanselman.com/blog/TheNETCoreCLRIsNowOpenSourceSoIRanTheGitHubRepoThroughMicrosoftPowerBI.aspx)。 现在一年过去了，我想要试试对以下问题做个解答：
> 
> 微软开源了 .NET 框架的大部分之后，**社区**参与贡献了多少？
> 
> 
> 
我着眼于以下三个项目做了分析，它们是 .NET 生态系统中最主要部分之一，也是 .NET 基金会内 [最活跃/收藏/分支的项目](https://github.com/dotnet/)之一：
* [**Roslyn**](https://github.com/dotnet/roslyn/) – .NET 编译器平台，提供了开源的 C# 和 Visual Basic 编译器，以及丰富的代码分析 API。
* [**CoreCLR**](https://github.com/dotnet/coreclr/) – .NET Core 运行时环境和底层库（mscorlib），它包括垃圾回收、JIT 编译器、基本的 .NET 数据类型和许多底层类。
* [**CoreFX**](https://github.com/dotnet/corefx/) – .NET Core 基础库，包括 collections、文件系统、console、XML、异步以及其它方面的类。
### 数据来自哪里？
GitHub 自身已经内建了很多漂亮的图表了，你可以看看这一年来**每月提交数**的图表：
[![Commits Per Month](/data/attachment/album/201512/11/233737iowqnu2i63vw5ifu.png)](https://github.com/dotnet/roslyn/graphs/contributors)
还可以看看**每月动态**：
[![github stats - monthly pulse](/data/attachment/album/201512/11/233738sj5da7uao5og2lp7.png)](https://github.com/dotnet/roslyn/pulse/monthly)
但是要回答上面的问题，我需要更多的数据。幸运的是， GitHub 提供了[非常全面的 API](https://developer.github.com/v3/)， 再配合上出色的 [Octokit.net 库](https://github.com/octokit/octokit.net)以及 [brilliant LINQPad](https://www.linqpad.net/)，我就很容易的得到了我所需的全部数据。如果你想要自己试试这些 API ，这儿有个[示例的 LINQPad 脚本](https://gist.github.com/mattwarren/894aa5f46ca62a63764a)。