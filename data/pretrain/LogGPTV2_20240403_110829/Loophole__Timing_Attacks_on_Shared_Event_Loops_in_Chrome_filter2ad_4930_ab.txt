eavesdropping on the event loops of Chrome’s host and
renderer processes. For each of these processes, we de-
scribe potential threat scenarios and present a simple
HTML page executing Javascript that can be used for
spying. We then present our monitoring tool to visual-
ize the event loops of the browser.
3.1 The Renderer Process Event Loop
3.1.1 Threat Scenarios
2.4 Sharing in the Host Process
The Chrome sandbox restricts access of renderers to
privileged actions. In particular, renderers have to com-
municate with the host process for network requests or
user input. The corresponding messages of all render-
ers pass through the event loop of the host process’ I/O
thread.
We illustrate this communication using two different
examples: how user actions ﬂow from the host to the cor-
responding renderer process, and conversely, how net-
work requests ﬂow from a renderer to the host process.
• UI ﬂow: User actions such as mouse movements
or clicks enter the browser through the main thread
of the host process. The host main thread commu-
nicates the user event to the corresponding renderer
by message passing between their I/O event loops,
and the render acknowledges the receipt of this mes-
sage. Even events with no Javascript listeners oc-
cupy the event loop of the renderer’s main thread
for a measurable interval.
• Net stack: Chrome’s net stack is a complex cross-
platform network abstraction. Any network request
by a renderer is passed to the I/O thread of the host
process, which forwards it to a global resource dis-
patcher that will pass it to a worker to fulﬁll the
request. This worker will open a connection, if
necessary, and request the resource. After the re-
quest is done, the response headers are received and
sent back to the renderer process, which will re-
spond with an ACK after reading, Finally, the body
is received and the corresponding callbacks are trig-
gered.
1On Android there is no threshold since the OS suspends idle pro-
cesses.
There are several scenarios in which an adversary site A
can share the event loop of the renderer’s main thread
with a victim site V. These scenarios are based on
Chrome’s policy for mapping sites to renderers, see Sec-
tion 2.3. We give two examples:
• Malicious advertisement. In this scenario, A runs
as an advertisement iframed in V. The SOP pro-
tects V’s privacy and itegrity by logically isolating
both execution environments. However, A’s iframe
is able to execute Javascript on V’s event loop, en-
abling it to gather information about the user behav-
ior in V.
• Keylogger. In this scenario, A pops up a login form
to authenticate its users via V’s OAuth. Because the
operation does not ask for special privileges and the
password is never sent to A, the victim could trust
it and ﬁll the form. Meanwhile, A’s page monitors
keystroke timings (see Section 4.2), which can be
used for recovering user passwords [32].
3.1.2 Monitoring Techniques
To monitor the renderer’s event loop it is sufﬁcient to
continuously post asynchronous tasks and measure the
time interval between subsequent pairs of events. We
measure the monitoring resolution in terms of the inter-
val between two subsequent measurement events on an
otherwise empty loop.
The most common way of posting asynchronous tasks
programmatically in Javascript is setTimeout. How-
ever, the resolution can be more than 1000 ms for inac-
tive tabs, rendering this approach useless for the purpose
of spying. To increase the resolution, we instead use the
postMessage API for sending asynchronous messages
to ourselves.
The code in Listing 1 shows how this is achieved.
The call
to performance.now() in line 2 of the
function loop returns a high-resolution timestamp
that
to
self.postmessage(0,’*’) in line 3 posts message
is saved as described below.
The call
852    26th USENIX Security Symposium
USENIX Association
1
2
3
4
5
6
f u n c t i o n loop () {
save ( p e r f o r m a n c e . now () )
self . p o s t M e s s a g e (0 , '* ')
}
self . o n m e s s a g e = loop
loop ()
Listing 1:
thread’s event loop with the postMessage API.
Javascript code to monitor the main
“0” into the renderer’s event loop, where the second argu-
ment “*” indicates no restriction on the receiver’s origin.
Line 5 registers the function loop as an event listener,
which enables it to receive the messages it has posted.
This causes loop to recursively post tasks, while keep-
ing the render responsive since other events are still being
processed.
In order to minimize the noise introduced by the
measurement script itself, the function save in line 2
uses a pre-allocated typed array (Float64Array) to
store all the timing measurements. Contrary to normal
Javascript’s sparse arrays, typed arrays avoid memory re-
allocations and thus noisy garbage collection rounds, see
below. With that we achieve an average delay between
two consecutive tasks of around 25 µs on our target ma-
chine. This resolution is sufﬁcient to identify even short
events. For example, a single mouse movement event
(without explicit event listener) consumes around 100 µs.
3.1.3 Interferences
In modern browsers there are several sources of noise
that affect measurement precision, beside the obvious ef-
fect of the underlying hardware platform and OS. They
include:
• Just-in-time compilation (JIT). JIT can trigger code
optimization or deoptimization,
in the case of
Chrome by the CrankShaft and Turbofan compil-
ers, at points in time that are hard to predict. For
our measurements we rely on a warm-up phase of
about 150 ms to obtain fully optimized code.
• Garbage collection (GC). In the case of V8, GC in-
cludes small collections (so-called scavenges) and
major collections. Scavenges are periodical and fast
( 100 ms,
distributed into incremental steps. In our data, scav-
enges are easily identiﬁable due to their periodicity,
while major collections could be spotted due to their
characteristic size. On some browsers, such as Mi-
crosoft’s Internet Explorer, GC rounds can be trig-
gered programmatically, which helps to eliminate
noise from the measurements enabling more precise
attacks [11].
While all of these features reduce the effectiveness of our
attacks, it is interesting to think of them as potential side-
channels by themselves. For example, observable GC
and JIT events can reveal information about a program’s
memory and code usage patterns, respectively [29].
3.2 The Host Process Event Loop
3.2.1 Threat Scenarios
The Chrome sandbox ensures that all of the renderer’s
network and user interaction events pass through the host
process’ I/O event loop, see Section 2.4. We describe two
threat scenarios where this could be exploited.
• Covert channel. Pages of different origins running
in different (disconnected) tabs can use the shared
event loop to implement a covert channel, violat-
ing the browser’s isolation mechanisms. This will
work even if one (or both) pages run in incognito
mode. This channel can be used for tracking users
across sessions, or to exﬁltrate information from
suspicious web pages without network trafﬁc.
• Fingerprinting. A tab running a rogue page of A can
identify which pages are being visited by the user in
other tabs by spying on the shared event loop. De-
tecting the start of a navigation is facilitated by the
fact that the I/O thread blocks for a moment when
the user types in a URL and presses enter.
3.2.2 Monitoring Techniques
There are many ways to post asynchronous tasks into the
event loop of the host process; they differ in terms of the
resolution with which they enable monitoring the event
loop and the overhead they imply. Below we describe
two of the techniques we used.
Network Requests. The ﬁrst technique is to use net-
work requests to systematically monitor the event loop
of the I/O thread of the host process. A valid network re-
quest may take seconds to complete, with only the start
and end operations visible in the loop, which provides
insufﬁcient resolution for monitoring.
To increase the resolution, we make use of non-
routable IP addresses. The corresponding requests en-
ter the I/O thread’s event loop, are identiﬁed as invalid
within the browser, and trigger the callback without any
DNS resolution or socket creation. This mechanism pro-
vides a monitoring resolution of 500 µs and has the addi-
tional beneﬁt of being independent from network noise.
Listing 2 shows the code of our monitoring proce-
dure. We rely on the Javascript Fetch API for posting the
network requests. The Fetch API provides an interface
for fetching resources using promises, which are ideal to
USENIX Association
26th USENIX Security Symposium    853
manage asynchronous computations thanks to their sim-
ple syntax for handling callbacks. In line 2 we request
and save a high-resolution timestamp. In line 3 we re-
quest a non-routable IP address, and set the rejection call-
back of the promise to self, to recursively run when the
request fails.
1
2
3
4
5
6
f u n c t i o n loop () {
save ( p e r f o r m a n c e . now () )
fetch ( new Request ( ' http ://0/ ') ) .
catch ( loop )
}
loop ()
Listing 2: Javascript code to monitor the host’s I/O
thread using network requests.
Shared Workers. The second technique relies on web
workers, which is a mechanism for executing Javascript
in the background. Web workers that are shared between
multiple pages are usually implemented in a dedicated
OS process; this means they communicate via IPC and,
therefore, can be used to spy on the I/O thread of the host
process. This mechanism provides a monitoring resolu-
tion of 100 µs. Listing 3 shows the code of our worker-
1
2
3
4
5
6
1
2
3
4
5
6
7
o n c o n n e c t = f u n c t i o n reply ( e ) {
let port = e . ports [0]
port . o n m e s s a g e = f u n c t i o n () {
port . p o s t M e s s a g e (0)
}
}
const w = new S h a r e d W o r k e r ( ' pong . js ')
f u n c t i o n loop () {
save ( p e r f o r m a n c e . now () )
w . port . p o s t M e s s a g e (0)
}
w . port . o n m e s s a g e = loop
loop ()
Listing 3:
Javascript code to monitor the host’s
I/O thread using SharedWorkers. The ﬁrst snippet
is the worker’s ‘pong.js’ ﬁle. Second snippet is
the Javascript code that monitors the I/O thread by
communicating with the worker.
based monitoring procedure. The ﬁrst snippet deﬁnes the
worker’s job, which consists in replying to each received
message. In the second snippet, we register the worker in
line 1. In lines 2-7 we record a timestamp and recursively
send messages to the worker, analogous to Listing 1. As
a result, we measure the round-trip time from the page to
the worker, which reﬂects the congestion in the I/O event
loop. Note that one can further increase the measure-
ment resolution by recording the time in each endpoint
and merging the results.
3.2.3
Interferences
There are many different sources of noise and uncertainty
in the I/O thread of the host process. The most notable
ones include the interleaving with the host’s main thread
and the messages from other renderers, but also the GPU
process and browser plugins. While these interferences
could potentially be exploited as side channels, the noise
becomes quickly prohibitive as the loop gets crowded.
3.3 The LoopScan Tool
We implement the eavesdropping techniques described
in Sections 3.1 and 3.2 in a tool called LoopScan, which
enables us to explore the characteristics of the side chan-
nel caused by sharing event loops. LoopScan is based
on a simple HTML page that monitors the event loops
of the host and renderer processes. It relies on the D3.js
framework, and provides interactive visualizations with
minimap, zooming, and scrolling capabilities, which fa-
cilitates the inspection of traces. For example, Figure 8
is based on a screenshot from LoopScan.
LoopScan’s functionality is in principle covered
by the powerful Chrome Trace Event Proﬁling Tool
(about:tracing) [3], which provides detailed ﬂame graphs
for all processes and threads. However, LoopScan
has the advantage of delivering more accurate timing
information about event-delay traces than the proﬁler,
since loading a page with the Trace Event Proﬁling tool
severely distorts the measurements. LoopScan source is
publicly available at https://github.com/cgvwzq/
loopscan.
4 Attacks
In this section we systematically analyze the side channel
caused by sharing event loops in three kinds of attacks: a
page identiﬁcation attack, an attack where we eavesdrop
on user actions, and a covert channel attack. For all at-
tacks we spy on the event loops of the renderer and the
host processes, as described in Sections 3.1 and 3.2. We
performed these attacks over the course of a year, always
using the latest stable version of Chrome (ranging from
v52-v58). The results we obtain are largely stable across