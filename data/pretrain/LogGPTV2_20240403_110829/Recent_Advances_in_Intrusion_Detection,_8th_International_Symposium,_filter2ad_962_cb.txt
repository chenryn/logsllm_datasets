A Fast Static Analysis Approach
297
a very large majority and they are excluded from any further analysis. The
role of control ﬂow analysis in our approach is not only to generate the control
ﬂow graph but also to greatly reduce the problem size for static analysis. The
remaining blocks in a CFG may form one or more disjoint chains (or subgraphs),
each in turn consisting of one or more blocks. In Figure 4, blocks numbered 1
and 5 are invalid, block 2 is valid and ends in a valid library call, and blocks 3
and 4 form a chain but the branch instruction target in block 4 is not obvious.
Note that the CFG does not have a unique entry and exit node, and we analyze
each chain separately.
Fig. 4. A snapshot of a typical CFG after control ﬂow analysis
We use data ﬂow analysis based on program slicing to complete the process
of elimination. Program slicing is a decomposition technique which extracts only
parts of a program relevant to a speciﬁc computation, and there is a rich lit-
erature on this topic [34,20,14]. For our purpose, we adopt the backward static
slicing technique approach proposed by Weiser [28], who used the control ﬂow
graph as an intermediate representation for his slicing algorithm. This algorithm
has a running time complexity of O(v × n × e), where v, n, e are the numbers
of variables, vertices and edges in the CFG, respectively. Given that there are
only a ﬁxed number of registers on Intel platform, and that the number of ver-
tices and edges in a typical CFG is almost the same, the running time is O(n2).
Other approaches exist which use diﬀerent representations such as program de-
pendence graph (PDG) and system dependence graph (SDG), and perform graph
reachability based analysis [30,17]. However, these algorithms incur additional
representation overheads and are more relevant when accuracy is paramount.
In general, a few properties are true of any chain in the reduced CFG. Every
block which is not the last block in the chain has a branch target which is an
oﬀset into the network ﬂow and points to its successor block. For the last block
in a chain, the following cases capture the nature of the branch instruction.
Case I: Obvious Library Call. If the last instruction in a chain ends in a
branch instruction, speciﬁcally call/jmp, but with an obvious target (immedi-
ate/absolute addressing), then that target must be a library call address. Any
other valid branch instruction with an immediate branch target would appear
earlier in the chain and points to the next valid block. The corresponding chain
can be executed only if the stack is in a consistent state before the library call,
hence, we expect push instructions before the last branch instruction. We com-
pute a program slice with the slicing criterion , where s is the statement
number of the push instruction and v is its operand. We expect v to be deﬁned
before it is used in the instruction. If these conditions are satisﬁed, then an alert
298
R. Chinchani and E. van den Berg
is ﬂagged. Also, the byte sequences corresponding to the last branch instruction
and the program slice are converted to a signature (described later).
Case II: Obvious Interrupt. This is other case of the branch instruction
with an obvious branch target, and the branch target must be a valid interrupt
number. In other words, the register eax is set to a meaningful value before the
interrupt. Working backwards from the int instruction, we search for the ﬁrst
use of the eax register, and compute a slice at that point. If the eax register is
assigned a value between 0-255, then again an alert is raised, and the appropriate
signature is generated.
Case III: The ret Instruction. This instruction alters control ﬂow but de-
pending on the stack state. Therefore, we expect to ﬁnd at some point earlier in
the chain either a call instruction, which creates a stack frame or instructions
which explicitly set the stack state (such as push family) before ret is called.
Otherwise, executing a ret instruction is likely to cause a crash rather than a
successful exploit.
Case IV: Hidden Branch Target. If the branch target is hidden due to
register addressing, then it is suﬃcient to ensure that the constraints over branch
targets presented in 4.1 hold over the corresponding hidden branch target. In
this case, we simply compute a slice with the aim of ascertaining whether the
operand is being assigned a valid branch target. If so, we generate alert.
Polymorphic Exploit Code. As mentioned earlier, polymorphic exploit code
is handled slightly diﬀerently. Since only the decryptor body can be expected to
be visible and is often implemented as a loop, we look for evidence of a cycle in
the reduced CFG, which can be achieved in O(n), where n is the total number of
statements in the valid chains. Again, depending on the addressing mode used,
the loop itself can be obvious or hidden. For the former case, we ascertain that at
least one register being used inside the loop body has been initialized outside the
body. An alternative check is to verify that at least one register inside the loop
body references the network ﬂow itself. If the loop is not obvious due to indirect
addressing, then the situation is similar to case IV. We expect that the branch
target to be assigned a value such that control ﬂow points back to the network
ﬂow. By combining this set of conditions with the earlier cases, we have a generic
exploit code detection technique which is able to handle both metamorphic and
polymorphic code.
Potential for Evasion. Any static analysis based approach has a limitation in
terms of the coverage that can be achieved. This holds true even for our approach
and an adversary may be able to synthesize which evades our detection technique.
However, there are some factors in our favor. Obfuscations typically incur space
overheads and the size of the vulnerable buﬀer is a limiting factor. Moreover,
in the reduced CFG, we scan every valid chain and while it may be possible to
evade detection in a few chains, we believe it is diﬃcult to evade detection in
all of them. Finally, the above rules for detection are only the initial set and
A Fast Static Analysis Approach
299
may require updating with time, but very infrequently as compared to current
signature-based systems.
4.4 Signature Generation
Control ﬂow analysis produces a pruned CFG and data ﬂow analysis identiﬁes
interesting instructions within valid blocks. A signature is generated based on
the bytes corresponding to these instructions. Note that we do not convert a
whole block in the CFG into a signature because noise from binary disassembly
can misrepresent the exploit code and make the signature useless. The main
consideration while generating signatures is that while control and data ﬂow
analysis may look at instructions in a diﬀerent light, the signature must con-
tain the bytes in the order of occurrence in a network ﬂow. We use the regular
expression representation containing wildcards for signatures since the relevant
instructions and the corresponding byte sequences may be occur disconnected in
the network ﬂow. Both Bro and Snort (starting from version 2.1.0) support reg-
ular expression based rules, hence, our approach makes for a suitable signature
generation engine.
5 An Exploit Detection Sensor
So far we have described the inner workings of our exploit detection algorithm.
We now turn to its application in the form of a network ﬂow-based exploit de-
tection sensor called styx. Figure 5 presents a design overview. There are four
main components: ﬂow monitor, content sieve, malicious program analyzer and
executable code recognizer. The executable code recognizer forms the core com-
ponent of styx, and other components assist it in achieving its functionality and
improving detection accuracy.
Fig. 5. Architecture of an exploit code detection sensor based on convergent static
analysis
300
R. Chinchani and E. van den Berg
Flow Monitor. Our view of the information transfer over networks is that
of network ﬂows. The main task of the ﬂow monitor is to intercept incom-
ing/outgoing packets and reconstruct the corresponding ﬂow data. Network ﬂows
can be unidirectional or bidirectional, and both directions can contain executable
worm code. We implemented the ﬂow monitor using tcpflow, which captures
and reassembles the network packets. We have used tcpflow mainly because it
is an oﬀ-the-shelf open-source tool which is readily available and can be easily
modiﬁed to suit our requirements. tcpflow writes all the information exchanged
between any two hosts into two separate ﬁles, one for each direction.
We consider both TCP and UDP ﬂows. Reconstruction of TCP ﬂows is fairly
straightforward even when packets arrive out of order. UDP is an unreliable pro-
tocol and when packets arrive out of order, reconstructing the intended network
stream is not possible. In such cases, styx will likely miss the embedded exploit
code. However, this is not such a serious issue as it may seem because if the UDP
packets arrived in a diﬀerent order than what a exploit code author intended,
then it is unlikely that infection will be successful. This is perhaps why not many
exploit code which transmit using UDP, and when such worms are implemented,
the worm code is very small. For example, the Slammer/Sapphire worm used
UDP and was small enough to ﬁt in only one UDP packet.
Content Sieve. Some network ﬂows may contain programs which can pass all
our tests of exploit code detection leading to false positives. It is therefore neces-
sary to make an additional distinction between program-like code and programs.
The content sieve is responsible for ﬁltering content which may interfere with
the executable code recognizer component. To this end, before deploying styx, it
is necessary to specify which services may or may not contain executable code.
This information is represented as a 3-tuple (π, τ, υ), where π is the standard
port number of a service, τ is the type of the network ﬂow content, which can
be data-only (denoted by d) or data-and-executable (denoted by dx), and υ is
the direction of the ﬂow, which is either incoming (denoted by i) or outgoing
(denoted by o). For example, (ftp, d, i) indicates an incoming ﬂow over the
ftp port has data-only content type. Further ﬁne-grained rules could be speciﬁed
on a per-host basis. However, in our experience we have seen that for a large or-
ganization which contains several hundred hosts, the number of such tuples can
be very large. This makes ﬁne-grained speciﬁcation undesirable more so because
it puts a large burden on the system administrator rather than the impact it
may have on styx’s performance. If a rule is not speciﬁed, then data-only net-
work ﬂow content is assumed by default for the sake of convenience since most
network ﬂows carry data. Therefore, the content sieve is activated only when a
ﬂow has a rule indicating that it is not data-only.
The content sieve has been implemented to identify Linux and Microsoft Win-
dows executable programs. Our data set shows that occurrence of programs in-
side ﬂows is not very common and when they do occur, it can attributed to
downloads of third-party software from the Internet. We believe that the oc-
currence of programs could be much higher in popular peer-to-peer ﬁle sharing
networks. However, the security policy at the enterprise where the data was
A Fast Static Analysis Approach
301
collected, prevents use of such networks and therefore our data set is not repre-
sentative of this scenario.
Programs on the Linux and Windows platform follow the ELF [7] and the PE
[8] executable formats respectively. We describe the methodology for detecting
an ELF executable; the process is similar for a PE executable. The network ﬂow
is scanned for the characters ‘ELF’ or equivalently, the consecutive bytes 454C46
(in hexadecimal). This byte sequence usually marks the start of a valid ELF
executable. Next, we look for the following positive signs to ascertain that the
occurrence of the these bytes was not merely a coincidence.
ELF Header: The ELF header contains information which describes the layout of
the entire program, but for our purposes, we require only certain ﬁelds to perform
sanity checks. For example, the e ident ﬁeld contains machine independent
information and must assume meaningful values (see [7]), e machine must be
EM 386, e version must be 1, etc. As our data set indicates, these checks are
usually adequate. But if additional conﬁrmation is required, then we also perform
the next two checks.
Dynamic Segment: From the ELF header, we ﬁnd the oﬀset of the Program
Header and subsequently, the oﬀset of the Dynamic Segment. If this segment
exists, then the executable uses dynamic linkage and the segment must contain
the names of the external shared libraries such as libc.so.6.
Symbol and String Tables: Also from the ELF header, we ﬁnd the oﬀset of symbol
and string tables. The string tables must strictly contain printable characters.
Also, the symbol table entries must point to valid oﬀsets into the string table.
The format of a PE header closely resembles an ELF header and we perform
similar checks as described above. A Windows PE executable ﬁle [8] starts with
a legacy DOS header, which contains two ﬁelds of interest - e magic, which
must be the characters ‘MZ’ or equivalently the bytes 5A4D (in hexadecimal),
and e lfanew, which is the oﬀset of the PE header.
It is highly unlikely that normal network data will conform to all these spec-
iﬁcations. Therefore, when all of them are satisﬁed, it is reasonable to assume
that an executable program has been found. As the next step, we mark the
boundaries of the executable and exclude it from further analysis.
Malicious Program Analyzer. While the main aim of the content sieve is
to identify full programs inside network ﬂows which in turn contain executable
code fragments so that they do not interfere with our static analysis scheme,
there is a beneﬁcial side-eﬀect. Since we have the capability of locating pro-
grams inside network ﬂows, they can passed as input to other techniques [24] or
third-party applications such as anti-virus software. This also helps when an
attacker transfers malicious programs and rootkits following a successful exploit.
The malicious program analyzer is a wrapper encapsulating this functionality
and is a value-added extension to expﬂ0w.
Executable Code Recognizer. After the preliminary pre-processing, the net-
work ﬂow is input to the executable code recognizer. This component primarily
302
R. Chinchani and E. van den Berg
implements the convergent static analysis approach described in Section 4. It is
responsible both for raising alerts and generating the appropriate signatures.
6 Evaluation
We have performed experimental evaluation primarily to determine detection
eﬃcacy and performance overheads. The ﬁrst dataset used in the experiments
consisted of 17 GB of network traﬃc collected over a few weeks at a enterprise
network, which is comprised mainly of Windows hosts and a few Linux boxes.
The organization policy prevented us from performing any live experiments.
Instead, the data collection was performed with only the ﬂow monitor enabled,
while algorithmic evaluation was performed later by passing this data through
the rest of the exploit detection sensor in a quarantined environment. During the
period this data was collected, there was no known worm activity and neither
did any of the existing IDS sensors pick up exploit-based attacks. Therefore,
this dataset is ideal to measure the false positive rates as well running times of
our algorithm. In order to speciﬁcally measure detection rates, we used exploits
generated using the Metasploit framework [3].
6.1 Detection
When performing detection against live network traﬃc, the exploit code detec-
tion sensor did not report the presence of exploit code in any of the network ﬂows.
The live traﬃc which was collected contained mostly HTTP ﬂows and these ﬂows
had the potential to raise false positives due to the ASCII text and branch in-
struction problem mentioned earlier. However, since we use further control and
data ﬂow analysis, none of the CFGs survived the process of elimination to raise
any alarms. The other types of network ﬂows were either binary or encrypted
and the reduced CFGs were far smaller in size and number, which were quickly
discarded as well. However, we warn against hastily inferring that our approach
has a zero false positive rate. This is not true in general because our technique
is probabilistic in nature and although the probability of a false positive may be
very small, it is still not zero. But this is already a signiﬁcant result since one of
the downsides of deploying an IDS is the high rate of false positives.
Next we studied detection eﬃcacy and possible ways in which false nega-
tives can occur. Using the Metasploit framework [3], it is possible to handcraft
not only several types of exploit code but also targeted for diﬀerent platforms.
There are three main components in the Metasploit framework - a NOOP sled
generator with support for metamorphism, a payload generator, and a pay-
load encoder to encrypt the payload. Therefore, one can potentially generate
hundreds of real exploit code versions. We are interested only in Intel-based
exploits targeted for Windows and Linux platforms. We discuss the interesting
representative test cases.
Metamorphic Exploit Code. Due to the nature of our detection process, the
payload of metamorphic code is not very diﬀerent from any other vanilla exploit
A Fast Static Analysis Approach
303
code. The Metasploit framework allows the generation of metamorphic NOOP
sleds. The following is the relevant code segment which is the output of the ’Pex’
NOOP sled generator combined with the ’Windows Bind Shell’ payload. Note
the diﬀerent single-byte opcodes which form the NOOP sled. We have also shown
portions of the payload which were a part of the ﬁrst valid chain encountered
when analyzing the ﬂow containing the exploit code. The corresponding signa-
ture which was generated was: 60 .* E3 30 .* 61 C3. Note that stack frame
which was created using pusha was popped oﬀ using popa, but just the mere
presence of stack-based instructions in the chain is deemed adequate evidence.
push esi
xchg eax,edi
dec eax
inc edi
00000001 56
00000002 97
00000003 48
00000004 47
. . .
00000009 60
0000000A 8B6C2424 mov ebp,[esp+0x24]
0000000E 8B453C mov eax,[ebp+0x3c]
00000011 8B7C0578 mov edi,[ebp+eax+0x78]
pusha
. . .
0000001F E330
. . .
00000051 61
00000052 C3
jecxz 0x51
popa
ret
Polymorphic Exploit Code. We generated a polymorphic exploit code using
the ’PEX encoder’ over the ’Windows Bind Shell’ payload. This encoder uses a
simple XOR-based scheme with the key encoded directly in the instruction. We
highlight the following segment of code, where 0xfd4cdb57 at oﬀset 0000001F
is the key. The encrypted payload starts at oﬀset 0000002B. Our approach was
able to detect this polymorphic code because of the conditions satisﬁed by the
loop instruction with esi register being initialized before the loop and refer-
enced within the loop. The corresponding signature which was generated was:
5E 81 76 0E 57 DB 4C FD 83 EE FC E2 F4. A caveat is that this signature is
very speciﬁc to this exploit code instance due to the key being included in the
signature. If the key is excluded then, we have a more generic signature for the
decryptor body. However, this requires additional investigation and part of our
future work.
call 0x1C
inc eax
pop esi
00000018 E8FFFFFF
0000001C FFC0
0000001E 5E
0000001F 81760E57DB4CFD xor dword [esi+0xe],0xfd4cdb57
00000026 83EEFC
00000029 E2F4
0000002B C7
sub esi,byte -0x4
loop 0x1F
db 0xC7
304
R. Chinchani and E. van den Berg
Worm Code. We used Slammer/Sapphire as the test subject. The worm code