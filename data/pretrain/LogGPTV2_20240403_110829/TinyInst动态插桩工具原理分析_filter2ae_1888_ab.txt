插桩后：
    // call label
    // jmp return_address
    // label:
    // jmp target_address
如果基本块的最后一条指令是call指令并且不是call address，则调用InstrumentIndirect插桩。  
 **TinyInst::TranslateBasicBlockRecursive**  
从起始地址开始任何插桩过程中遇到的基本块都加入到队列循环调用TranslateBasicBlock进行插桩  
 **TinyInst::OnCrashed**  
打印出crash时的信息，前后的代码，所在的模块等等  
 **TinyInst::GetTranslatedAddress**  
返回给定地址对应的插桩模块中的地址  
 **TinyInst::TryExecuteInstrumented**  
检查给定地址是否能在插桩模块中找到，如果是则调用LiteCov::OnModuleEntered，将rip设为其在插桩模块中的地址  
 **TinyInst::InstrumentModule/TinyInst::InstrumentAllLoadedModules**  
对模块进行插桩，首先将模块中所有可执行的区域标记为不可执行并拷贝这些代码，然后为插桩的代码分配地址空间，调用TinyInst::InitGlobalJumptable初始化全局跳转表，最后调用LiteCov::OnModuleInstrumented  
 **TinyInst::OnInstrumentModuleLoaded**  
调用TinyInst::InstrumentModule  
 **TinyInst::OnModuleLoaded**  
如果需要插桩该模块则调用TinyInst::OnInstrumentModuleLoaded  
 **TinyInst::OnModuleUnloaded**  
清除插桩信息  
 **TinyInst::OnTargetMethodReached**  
调用TinyInst::InstrumentAllLoadedModules  
 **TinyInst::OnEntrypoint**  
调用TinyInst::InstrumentAllLoadedModules  
 **TinyInst::OnException**  
如果是断点导致的异常调用TinyInst::HandleBreakpoint；如果是ACCESS_VIOLATION这可能是因为要执行的代码在插桩的代码区域，调用TinyInst::TryExecuteInstrumented  
 **TinyInst::OnProcessExit**  
清理并调用LiteCov::OnModuleUninstrumented
## litecov.cpp
最后我们来看流程图中红色的函数，这里终于涉及到了关于代码覆盖率处理。我们先快速过一下用到的x86_helpers.c中的函数以便之后更好理解litecov.cpp中的代码。
**GetUnusedRegister**  
返回AX/EAX/RAX  
 **Get8BitRegister**  
返回寄存器的低8位，例如对于AX/EAX/RAX都返回AL  
 **GetFullSizeRegister**  
和Get8BitRegister相反，RAX/EAX/AX/AH/AL都返回RAX(64位)，EAX/AX/AH/AL都返回EAX(32位)  
 **Push**  
生成push指令  
 **Pop**  
生成pop指令  
 **CopyOperandFromInstruction**  
进行指令级插桩时如果cmp指令的第一个操作数不是寄存器(cmp DWORD PTR [ebp-0x14],
eax)那么需要一条mov指令将第一个操作数移到寄存器中(mov ecx, DWORD PTR
[ebp-0x14]),该函数将cmp指令的第一个操作数拷贝到mov指令的第二个操作数  
 **Mov**  
生成mov指令  
 **Lzcnt**  
生成lzcnt指令  
 **CmpImm8**  
生成cmp指令  
 **GetInstructionLength**  
获取指令长度  
 **FixRipDisplacement**  
修复[rip+displacement]这样的指令的偏移
下面几个变量单独说一下：
    unsigned char *coverage_buffer_remote;
    //指向coverage buffer起始位置的指针
    size_t coverage_buffer_size;
    //coverage buffer总大小
    size_t coverage_buffer_next;
    //coverage buffer已经占用的大小
    std::set collected_coverage;
    //收集的coverage的集合
    std::set ignore_coverage;
    //忽略的coverage的集合
    std::unordered_map buf_to_coverage;
    //key是coverage_buffer的偏移，valve是对应的basic block/edge code
    std::unordered_map coverage_to_inst;
    //key是basic block/edge code，valve是对应的插桩区域中的位置
    std::unordered_map buf_to_cmp;
    //key是cmp code，value是对应的CmpCoverageRecord
    std::unordered_map coverage_to_cmp;
    //key是coverage_buffer的偏移，valve是对应的CmpCoverageRecord
下面是图中函数的注释。
**LiteCov:: OnModuleInstrumented**  
分配coverage_buffer  
 **LiteCov:: OnModuleUninstrumented**  
调用LiteCov::CollectCoverage，释放coverage_buffer  
 **LiteCov::EmitCoverageInstrumentation**  
插入mov [coverage_buffer_remote + coverage_buffer_next], 1  
将信息记录到buf_to_coverage和coverage_to_inst  
 **LiteCov::InstrumentBasicBlock**  
基本块插桩，调用LiteCov::EmitCoverageInstrumentation  
 **LiteCov::InstrumentEdge**  
边插桩，调用LiteCov::EmitCoverageInstrumentation  
 **LiteCov::GetBBCode**  
basic block code是模块起始地址到基本块的偏移  
 **LiteCov::GetEdgeCode**  
edge code的低32位和高32位分别表示源地址和目的地址  
 **LiteCov::InstrumentInstruction**  
实现指令级插桩，当指定了compare_coverage时可以通过指令级插桩记录cmp/sub指令中匹配的字节数。对于sub指令调用LiteCov::ShouldInstrumentSub判断是否应该插桩。  
插桩前：
    cmp    DWORD PTR [ebp-0x14],eax
插桩后：
    push   ecx
    mov    ecx,DWORD PTR [ebp-0x14]
    xor    ecx,eax
    lzcnt  ecx,ecx
    cmp   ecx, match_width
    jb end
    mov   BYTE PTR [data->coverage_buffer_remote + data->coverage_buffer_next],cl
    end:
    pop        ecx
    将信息记录到buf_to_cmp和coverage_to_cmp
**LiteCov::OnModuleEntered**  
如果插桩边，因为源地址来自另一个模块，所以用0表示源地址，加入到collected_coverage  
 **LiteCov::CollectCoverage**  
读取coverage_buffer_remote中的数据，通过buf_to_coverage找到对应的basic block/edge code,
如果没有找到并且设置了-cmp_coverage说明此处是cmp的coverage信息，调用CollectCmpCoverage获取cmp
code并加入collected_coverage；如果找到了则将basic block/edge code加入collected_coverage  
 **LiteCov::OnProcessExit**  
调用CollectCoverage  
 **LiteCov::GetCmpCode**  
cmp code高32位表示basic block偏移，接下来的24位表示cmp指令在basic
block内的偏移，最后8位表示匹配的bit数。最高位设为1  
 **LiteCov::ShouldInstrumentSub**  
是否应该插桩sub指令，如果后面有call/ret/jmp这样的指令就不插桩，如果后面有cmov/jz/jnz这样的指令就插桩
## coverage.cpp
coverage.cpp实现了对coverage的管理，Coverage列表中每个成员是一个ModuleCoverage，两个成员分别是模块名和该模块中的basic
block/edge/cmp code。代码很简单就不再赘述了。
## 总结
如前所述，作者也给出了一个示例程序tinyinst-coverage.cpp。基本上主要的代码就是这样。希望这篇文章能对动态插桩和tinyInst感兴趣的同学有所帮助。