specialized to prevent a specific type of Spectre attack in a specific
setting. Other approaches close a specific covert channel, most
prominently the timing channel introduced through caches [3, 9, 31,
32, 38, 44, 53, 56, 57, 61]. Again those countermeasures are targeted
at a specific setting and other covert channels remain exploitable.
A more general approach of countermeasures targets the at-
tackers ability to create a secret-dependent, transient CPU state
in combination with a covert channel. This can be done by lim-
iting the microarchitectural operations that can be performed on
3
sensitive values [5, 45, 54, 58‚Äì60]. Such approaches require the
knowledge which values are considered as secret as well as a model
that defines which kind of behavior (instructions or group of in-
structions in a transient setting) is dangerous. The security and
performance overhead is highly dependent on the selection of this
security model and the definition is not trivial, as new channels are
discovered constantly (see, e.g., [6]). Reported overheads reach from
10% [5] to 125% [54], but require the consideration of the specific
measurement environment.
Like most of the cited countermeasures, BasicBlocker requires
changes to the hardware mediated by the ISA. In contrast to other
approaches, BasicBlocker does not aim to fix the problems induced
by control-flow speculation, but rather tries to mitigate the perfor-
mance penalty caused by removing control-flow speculation en-
tirely. The reasoning behind this approach is that only the removal
of speculative behavior is guaranteed to remove all speculation-
based attack vectors, by removing the root cause of the vulnerability.
The comparability of the resulting performance overhead is limited,
as we also consider the impact of speculative fetching, which is
mostly ignored by state-of-the-art Spectre countermeasures.
This paper focuses on speculative-execution attacks. It should
be possible to similarly address fault-based, transient-execution
attacks by ‚Äúpreponing‚Äù fault detection, removing most of the per-
formance benefit of transient execution after faults, but further
investigation of this idea is left to future work.
3 SPECULATION IN PROCESSORS
In a pipelined processor, each instruction passes through multi-
ple pipeline stages before it eventually retires. A textbook series
of stages is Instruction Fetch (IF), Instruction Decode (ID), Execu-
tion (EX), Memory Access (MEM) and Write Back (WB) [48]. More
complex CPUs can have many more stages.
If each stage takes one cycle then a branch instruction will be
fetched on cycle ùëõ in IF, decoded on cycle ùëõ + 1 in ID, and executed
on cycle ùëõ + 2 in EX, so at the end of cycle ùëõ + 2 the CPU knows
whether the branch is taken or not. Without branch prediction, IF
stalls on cycles ùëõ + 1 and ùëõ + 2, because it does not know yet which
instructions to fetch after the branch. With branch prediction, IF
speculatively fetches instructions on cycles ùëõ + 1 and ùëõ + 2, and
ID speculatively decodes the first of those instructions on cycle
ùëõ + 2. If the prediction turns out to be wrong then the speculatively
executed instructions are rolled back: all of their intermediate results
are removed from the pipeline.
The functional effects of instructions are visible only when the
instructions retire, but side channels sometimes reveal microar-
chitectural effects of instructions that have been rolled back. As
Spectre illustrates, this complicates the security analysis: one can
no longer trust a branch to stop the wrong instructions from being
visibly partially executed.
The standard separation of fetch from decode also means that ev-
ery instruction is being speculatively fetched. An instruction fetched
in cycle ùëõ could be a branch (or other control-flow instruction), but
the CPU knows this only after ID decodes the instruction in cycle
ùëõ + 1, so IF is speculatively fetching an instruction in cycle ùëõ + 1.
We emphasize that this behavior is present even on CPUs without
ArXiv Version, 2021, May
J. Thoma, J. Feldtkeller, M. Krausz, T. G√ºneysu, D. J. Bernstein
a5 ,a0 , a4
t4 ,a3 , a4
a4 ,a4 ,8
a1 ,t3 , t2
t2 ,0( a5 )
a4 ,a6 ,80 ... ; compute branch and change PC
; Start of first basic block
add
add
addi
mul
lh
bne
; Start of 2 nd basic block
lh
li
; Start of 3 rd basic block
sh
...
a7 ,0( a1 )
a4 ,0
a1 ,0( a0 )
bb
add
add
addi
bne
mul
lh
bb
lh
li
bb
sh
...
6, 0 ; first bb , size = 6, not seq
a5 ,a0 , a4
t4 ,a3 , a4
a4 ,a4 ,8
a4 ,a6 ,80 ... ; compute branch result
a1 ,t3 , t2
t2 ,0( a5 ) ; change PC after this instr.
2, 1 ; 2 nd bb , size = 2, seq
a7 ,0( a1 )
a4 ,0
16 , 0 ; 3 rd bb , size = 16 , not seq
a1 ,0( a0 )
Figure 1: Example code for the new bb instruction. Left: Traditional RISC-V code does not contain information about the size
of upcoming basic blocks. The bne instruction terminates the first block and conditionally branches. Right: The bb instruction
gives information about upcoming code parts. The first basic block is terminated by the size given in the line 1 and performs
a conditional branch based on the outcome of the bne instruction, whose result is already determined earlier.
branch prediction: the CPU cannot know whether the instruction
changes the control flow before decoding it.
Disabling all control-flow speculation execution thus means that
every branch must stall fetching until it is executed, and, perhaps
even more importantly, that every instruction must stall fetching un-
til it is decoded. BasicBlocker addresses both of these performance
problems, as shown below.
4 CONCEPT
In this section, we outline the rationale behind our approach as
well as the modifications to the ISA that allow the elimination
of control-flow speculation within the microarchitecture. Though
we use the RISC-V instruction set in the following examples, our
solution is generally applicable to any ISA or processor as motivated
in Section 4.4 and 4.5.
4.1 Design Rationale
It is conceptually simple to generically thwart security issues arising
from control-flow speculation by entirely removing it, but is gener-
ally believed to incur a severe loss in performance. BasicBlocker
addresses this by providing metadata through an ISA modifica-
tion to assist non-speculative hardware with efficient execution of
software programs.
The CPU has a limited view of programs, accessing only a limited
number of instructions at a time. With current ISAs, control-flow
instructions appear without advance notice, and their result is
available only after multiple pipeline stages, even though this result
is needed immediately to infer the next instruction.
BasicBlocker takes the concept of basic blocks (in contrast to the
textbook definition, we require a basic block to be terminated by all
control-flow instructions, i.e. also calls) to the hardware level using
novel instructions. At compile time a holistic view of the program is
available in form of a control-flow graph, including code structure
such as basic blocks and control-flow changes. BasicBlocker uses
the information available at compile time, specifically the length of
individual basic blocks, and makes it available to the CPU during
execution. This allows a non-speculative CPU to avoid most pipeline
stalls, through the advance notice of control flow changes.
4.2 Basic Block Instruction
We introduce a new instruction, called basic block instruction (bb),
which lays the foundation for BasicBlocker. Currently, most CPUs
use control-flow speculation to gain performance. Enabling fast but
non-speculative fetching requires additional information for the
CPU, since normally we know that we can fetch the next instruction
only after the prior instruction was decoded and it is ensured that
the control flow does not deviate. Hence, normally the fetch unit
would have to be stalled until the previous instruction was decoded.
To avoid that delay, we define a new bb instruction that encodes
the size of the basic block. Within this basic block, the CPU is
allowed to fetch instructions, knowing that upcoming instructions
can be found in sequential order in memory and will definitely
be executed. That is, since per definition no control flow changes
can occur within the basic block. The instruction further provides
information whether the basic block is sequential, stating that the
control flow continues with the next basic block in the sequence in
memory, i.e. the block does not contain a control-flow instruction.
Figure 1 shows the transformation of traditional code (left) to code
with bb instructions (right). The fetch unit of the CPU is responsible
for counting the remaining instructions in a given block and only
fetch until the end of the basic block. From there, the program
continues executing the next basic block which itself starts with a
bb instruction.
We also modified the behavior of existing control-flow instruc-
tions, such as bne, j and jlre. The goal is to give advance notice
of upcoming control-flow changes to the CPU. Since the processor
knows the number of remaining instructions per basic block, we
can schedule control-flow instructions within basic blocks as early
as data dependencies allow, and still perform the change of the
control flow at the end of the basic block. This key feature allows
the CPU to correctly determine the control flow before the end
of the basic block, and renders branch prediction in many cases
obsolete.
As a result, the only time that the CPU needs to stall fetching
is at the transition of two basic blocks, because the following bb
instruction needs to be executed before knowing the size and, hence,
being able to continue fetching. To avoid this delay, it is sufficient
to add the capability of representing one additional set of basic
4
BasicBlocker: ISA Redesign to Make Spectre-Immune CPUs Faster
ArXiv Version, 2021, May
block information internally and request this information as early
as possible. This means that the CPU interposes the bb instruction
of the next basic block as soon as the next basic block is known,
regardless whether there are instructions left in the current basic
block or not.
Figure 3: Pipeline diagram for code with non-optimal
rescheduling of branch instructions. The next bb instruction
is not finished with execution when the new basic block be-
gins. The CPU needs to stall until the basic block size is
known which is generally after the execution stage.
‚Ä¢ The CPU does not need special constructs for the branch
delay instructions. At the end of a basic block, the CPU can
simply fetch the instruction at the target address, regardless
of the type of instructions that were executed prior. If the
basic block was sequential, the target register defaults to
ùëÉùê∂ + 4. If any control-flow operations were executed, the
target register points to the target address.
‚Ä¢ By having a variably-sized branch delay mechanism, the
code is compatible to all hardware architectures that sup-
port the bb instruction. Since the control-flow instructions
were rescheduled as early as possible, the code is optimal
for those hardware architectures. For fixed size branch
delay slots, CPUs with smaller pipelines may introduce
unnecessary nop instructions.
See also Section 4.3 for further optimizations that integrate tightly
with the bb instruction.
Figure 4: The worst case scenario has a branch instruction
at the end of a basic block.
4.2.1
ISA-Extension Specification. We now define the changes
required by BasicBlocker more precisely. A processor supporting
the bb instruction is required to have an instruction counter ùêºùê∂,
a target register ùëá , a branch flag ùêµ, and an exception flag ùê∏, all
initialized to 0 on processor reset and used only as defined below.
The functional behavior of the bb instruction is given in Definition
4.1, the changes to the control flow in Definition 4.2 and the behavior
that raises an exception in Definition 4.3.
Definition 4.1 (BB Instruction). The bb instruction takes a size
parameter ùëõ > 0 and a sequential flag ùë†ùëíùëû, and is executed as follows.
If ùêºùê∂ = 0: ùêºùê∂ ‚Üê ùëõ; if ùë†ùëíùëû = 0 then ùêµ ‚Üê 1; if ùë†ùëíùëû = 1 then ùêµ ‚Üê 0 and
ùëá is set to the address of the ùëõ + 1-th instruction following the bb
5
Figure 2: Pipeline diagram for optimal code. The bb instruc-
tion of the next basic block is fetched as soon as the branch
was executed. The branch only takes effect at the end of
the current basic block. When the branch instruction is
sufficiently early rescheduled, the next basic block can be
fetched without stalls.
In Figure 2, this principle is illustrated for the code of Figure 1
(right side). The bb instruction of the second basic block is fetched
as soon as the branch target of bne is known. Afterwards, the
execution of the first basic block continues. Execution of the second
basic block can start as soon as the first basic block is consumed
and the size of the second basic block is known (after EX of bb). If
the current basic block does not contain a control-flow instruction,
which is indicated by the sequential flag of the bb instruction, the
CPU can fetch the next bb instruction directly. Otherwise, the next
bb instruction will be fetched after the control-flow instruction
passes the execution stage.
While the early fetching of the bb instruction changes the ex-
ecution order, it does not affect security or correctness since the
instruction is only fetched after the execution path is known for
certain.
Even with these changes it is necessary to stall the CPU at the
transition of two basic blocks until the size of the new basic block
is known. Therefore, this concept works best with software that
contains many large basic blocks with multiple opportunities to
reschedule control-flow instructions at compile time. Software with
a large number of small basic blocks is therefore less efficient, lead-
ing to pipeline stalls as shown in Figure 3.
The worst case is a control-flow instruction that could not be
rescheduled, since then the CPU needs to be stalled both for the
information from the control-flow instruction as well as from the
bb instructions. This case is depicted in Figure 4. We address the
performance impact of small basic blocks in Section 4.3.
Overall, the rescheduling concept can be imagined as a variably-
sized branch delay slot. There are two core advantages of our con-
cept over traditional branch delay slots:
IFIDEXMEMWBbneIFIDEXMEMWBmulIFIDEXMEMWBlhIFIDEXMEMWBbbIFIDEXMEMWBaddiIFIDEXMEMWBmulNewBasicBlockIFIDEXMEMlhIFIDEXMEMWBbneIFIDEXMEMWBmulIFIDEXMEMWBlhIFIDEXMEMWBbbNewBasicBlockIFIDEXMEMlhIFIDEXMEMWBbneNewBasicBlockIFIDEXMEMWBbbIFIDEXMEMlhArXiv Version, 2021, May
J. Thoma, J. Feldtkeller, M. Krausz, T. G√ºneysu, D. J. Bernstein
instruction. Otherwise, if ùêºùê∂ ‚â† 0, then ùêºùê∂ ‚Üê 0 and ùê∏ ‚Üê 1 to catch
illegal bb instructions.
Thus, on a functional level, Definition 4.1 only sets ùêºùê∂, ùëá , ùêµ, and
ùê∏ but has no further effect on the execution of a program. The
subsequent definitions have further effects.
ùêºùê∂ ‚àí 1.
instructions is modified as follows:
Definition 4.2 (BB-Delayed Branches). The execution of non-bb
‚Ä¢ Before every non-bb instruction: if ùêºùê∂ > 0 then ùêºùê∂ ‚Üê
‚Ä¢ During every control-flow instruction: any write to ùëÉùê∂ is
‚Ä¢ After every control-flow instruction: if ùêµ = 0 then ùê∏ ‚Üê 1;
‚Ä¢ Subsequently, after every non-bb instruction: if ùêºùê∂ = 0
instead written to ùëá if ùêµ > 0, and is ignored if ùêµ = 0.
otherwise ùêµ ‚Üê ùêµ ‚àí 1.
then ùëÉùê∂ ‚Üê ùëá ; and if ùêºùê∂ = 0 and ùêµ > 0 then ùê∏ ‚Üê 1.
BasicBlocker raises an exception (ùê∏ = 1) whenever the bb in-
struction is used in an illegal way.
Definition 4.3 (BB Exceptions). After every instruction, an excep-
tion is raised if ùêºùê∂ = 0 and ùê∏ ‚â† 0.
tion, an exception is raised if any of the following occurred:
In other words, after the ùëõ instructions covered by a bb instruc-
‚Ä¢ ùë†ùëíùëû = 0 and there was not exactly one control-flow instruc-
‚Ä¢ ùë†ùëíùëû = 1 and there was a control-flow instruction in the ùëõ