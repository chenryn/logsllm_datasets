  * SIGALRM 
    * alarm clock
    * 处理超时的情况
    * handle_timeout 
      * 如果child_pid>0，则设置child_timed_out为1，并kill掉child_pid
      * 如果child_pid==-1，且forksrv_pid>0，则设置child_timed_out为1，并kill掉forksrv_pid
  * SIGWINCH 
    * Window resize
    * 处理窗口大小的变化信号
    * handle_resize 
      * 设置clear_screen=1
  * SIGUSR1 
    * user defined signal 1，这个是留给用户自定义的信号
    * 这里定义成skip request (SIGUSR1)
    * handle_skipreq 
      * 设置skip_requested=1
  * SIGTSTP/SIGPIPE 
    * stop signal from tty/write on a pipe with no one to read it
    * 不关心的一些信号
    * SIG_IGN
####  check_asan_opts
check asan选项
  * 读取环境变量ASAN_OPTIONS和MSAN_OPTIONS，做一些检查
####  fix_up_sync
如果通过-M或者-S指定了sync_id，则更新out_dir和sync_dir的值
  * 设置sync_dir的值为out_dir
  * 设置out_dir的值为`out_dir/sync_id`
####  save_cmdline
拷贝当前的命令行参数
       00 ff 00 ff   55 00 00 00   buf-> 2f 55 73 65   72 73 2f 73   │ ····U···/Users/s │
       61 6b 75 72   61 2f 67 69   74 73 6f 75   72 63 65 2f   │ akura/gitsource/ │
       41 46 4c 2f   63 6d 61 6b   65 2d 62 75   69 6c 64 2d   │ AFL/cmake-build- │
       64 65 62 75   67 2f 61 66   6c 2d 66 75   7a 7a 20 2d   │ debug/afl-fuzz - │
       69 20 69 6e   70 75 74 20   2d 6f 20 6f   75 74 70 75   │ i input -o outpu │
       74 20 2d 2d   20 2e 2f 74   65 73 74 00   00 f0 00 00   │ t -- ./test·····
####  fix_up_banner
修剪并且创建一个运行横幅
####  check_if_tty
检查是否在tty终端上面运行。
  * 读取环境变量AFL_NO_UI的值，如果为真，则设置not_on_tty为1，并返回
  * `ioctl(1, TIOCGWINSZ, &ws)`通过ioctl来读取window size，如果报错为ENOTTY，则代表当前不在一个tty终端运行，设置not_on_tty
####  get_core_count
计数logical CPU cores
####  check_crash_handling
####  check_cpu_governor
####  setup_post
####  setup_shm
配置共享内存和virgin_bits
  * [Linux进程间通信（六）：共享内存 shmget()、shmat()、shmdt()、shmctl()](https://www.cnblogs.com/52php/p/5861372.html)
  * 如果in_bitmap为空，则通过memset初始化数组virgin_bits[MAP_SIZE]的每个元素的值为’255’(\xff)
  * 通过memset设置virgin_tmout[MAP_SIZE]和virgin_crash[MAP_SIZE]的每个元素的值为’255’(\xff)
  * 调用shmget分配一块共享内存，`shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | 0600);`,将返回的共享内存标识符保存到shm_id里。 
    * `int shmget(key_t key, size_t size, int shmflg);`
    * 第一个参数，程序需要提供一个参数key（非0整数），它有效地为共享内存段命名，shmget()函数成功时返回一个与key相关的共享内存标识符（非负整数），用于后续的共享内存函数。调用失败返回-1. 
      * 这里shm_id取值是IPC_PRIVATE，所以函数shmget()将创建一块新的共享内存
    * 第二个参数，size以字节为单位指定需要共享的内存容量 
      * 这里取值为MAP_SIZE
    * 第三个参数，shmflg是权限标志 
      * IPC_CREAT 如果共享内存不存在，则创建一个共享内存，否则打开操作。
      * IPC_EXCL 只有在共享内存不存在的时候，新的共享内存才建立，否则就产生错误。
      * 421分别表示，读写执行3种权限。 比如，上面的6＝4＋2，表示读＋写。
      * 0600 每一位表示一种类型的权限，比如，第一位是表示八进制,第二位表示拥有者的权限为读写，第三位表示同组无权限，第四位表示他人无权限。
  * 注册atexit handler为remove_shm 
    * remove_shm 
      * shmctl(shm_id, IPC_RMID, NULL); 
        * 第一个参数，shm_id是shmget()函数返回的共享内存标识符。
        * 第二个参数，command是要采取的操作，它可以取下面的三个值 
          * IPC_RMID：删除共享内存段
        * 第三个参数，buf是一个结构指针
  * 使用alloc_printf(“%d”, shm_id)来创建一个字符串shm_str 
         00 ff 00 ff   06 00 00 00  shm_str->36 35 35 33   38 00 f0 f0   │ ········65538··· │
  * 如果不是dumb_mode， **则设置环境变量SHM_ENV_VAR的值为shm_str**
  * `trace_bits = shmat(shm_id, NULL, 0);`
    * trace_bits是用做`SHM with instrumentation bitmap`
    * 第一次创建完共享内存时，它还不能被任何进程访问，所以通过shmat来启动对该共享内存的访问，并把共享内存连接到当前进程的地址空间。
    * `void *shmat(int shm_id, const void *shm_addr, int shmflg)`
      * 第一个参数，shm_id是由shmget()函数返回的共享内存标识。
      * 第二个参数，shm_addr指定共享内存连接到当前进程中的地址位置，通常为空，表示让系统来选择共享内存的地址。
      * 第三个参数，shm_flg是一组标志位，通常为0。
      * 调用成功时返回一个指向共享内存第一个字节的指针，如果调用失败返回-1.
####  init_count_class16
这其实是因为trace_bits是用一个字节来记录是否到达这个路径，和这个路径被命中了多少次的，而这个次数在0-255之间，但比如一个循环，它循环5次和循环6次可能是完全一样的效果，为了避免被当成不同的路径，或者说尽可能减少因为命中次数导致的区别。  
在每次去计算是否发现了新路径之前，先把这个路径命中数进行规整，比如把命中5次和6次都统一认为是命中了8次，见下面这个。
    static const u8 count_class_lookup8[256] = {
            [0]           = 0,
            [1]           = 1,
            [2]           = 2,
            [3]           = 4,
            [4 ... 7]     = 8,
            [8 ... 15]    = 16,
            [16 ... 31]   = 32,
            [32 ... 127]  = 64,
            [128 ... 255] = 128
    };
而为什么又需要用一个`count_class_lookup16`呢，是因为AFL在后面实际进行规整的时候，是一次读两个字节去处理的，为了提高效率，这只是出于效率的考量，实际效果还是上面这种效果。  
初始化`u16 count_class_lookup16[65536]`
    EXP_ST void init_count_class16(void) {
        u32 b1, b2;
        for (b1 = 0; b1 d_name的值为input文件夹下的文件名字符串 
    * `u8 *fn = alloc_printf("%s/%s", in_dir, nl[i]->d_name);`
    * `u8 *dfn = alloc_printf("%s/.state/deterministic_done/%s", in_dir, nl[i]->d_name);`
    * 如果`shuffle_queue`的值为真，且nl_cnt大于1，则`shuffle_ptrs((void **) nl, nl_cnt)`，字面意思上就是重排nl里的指针的位置。
    * 通过文件属性过滤掉`.`和`..`这样的regular文件，并检查文件大小，如果文件大小大于MAX_FILE，默认是1024*1024字节，即1M
    * 通过access检查`in_dir/.state/deterministic_done/nl[i]->d_name`是否存在，这应该是为了用在resume恢复扫描使用 
      * 如果存在就设置passed_det为1
      * 这个检查是用来判断是否这个entry已完成deterministic fuzzing。在恢复异常终止的扫描时，我们不想重复deterministic fuzzing，因为这将毫无意义，而且可能非常耗时
    * add_to_queue(fn, st.st_size, passed_det);
    * 如果queued_paths为0，则代表输入文件夹为0，抛出异常
    * 设置last_path_time为0
    * queued_at_start的值设置为queued_paths 
      * Total number of initial inputs
####  add_to_queue(u8 *fname, u32 len, u8 passed_det)
  * queue_entry是一个链表数据结构
  * 先通过calloc动态分配一个queue_entry结构体，并 **初始化其fname为文件名fn，len为文件大小，depth为cur_depth + 1,passed_det为传递进来的passed_det**
        q->fname = fname;
    q->len = len;
    q->depth = cur_depth + 1;
    q->passed_det = passed_det;
  * 如果`q->depth > max_depth`，则设置max_depth为q->depth
  * 如果queue_top不为空，则设置`queue_top->next为q，queue_top = q;`，否则`q_prev100 = queue = queue_top = q;`
        static struct queue_entry *queue,     /* Fuzzing queue (linked list)      */
    *queue_top, /* Top of the list                  */
    *q_prev100; /* Previous 100 marker              */