密钥，由于本地不存在A的私钥，那么即使捕获到加密流量也不具备解密条件。而接收黑客指令时由于本地有密钥对B的私钥，则可以解密识别控制指令。两类加密的指令数据格式如图3-25所示：
图3-25 加密指令数据格式
GetCommands()函数负责指令的获取和初次解码，后门通过GetList() API查找已删除邮件列表并过滤
“CMD”邮件，通过HTTPS解密捕获到的流量如下：
图3-26 GetList API流量（HTTPS中间人捕获）
如果从邮件列表中过滤到cmdSubject任务（`Important Dropbox API Updates +
Program.id`），则进一步读取邮件内容并通过自定义Base64算法解码提取加密指令。此外，黑客在痕迹清理方面也表现出较强的专业性，在提取指令后会立即清除该CMD邮件以隐藏痕迹。
图3-27 寻找及清理CMD邮件
如果未能从“已删除邮件”中获取到指令，则记录当前时间并更新至心跳包邮件(aliveSubject任务)，之后关闭程序。
图3-28 更新心跳包邮件
  * 3） 控制指令 加密指令经过GetCommands()函数解码后，进入ParseCommand()函数进一步解析密文，依照RSA私钥解密(得到AES密钥)、AES密钥+IV解密（得到明文）的顺序提取出指令内容。  图3-29 解析密文
图3-30 控制指令执行分支
指令解析后对应5种类型，以指令值101（功能：执行CMD命令）为例: “101|1|3|13|mkdir malware”，其控制指令结构示意如下：
图3-31 控制指令结构示例
当受控机器接收到“CMD”邮件任务（cmdSubject）时，程序解密并执行指令，然后创建”结果“邮件（resultSubject）上报指令执行结果。如果指令未匹配，则返回”Done:D”。执行CMD命令“mkdir
malware”后的返回数据如下：
图3-32 resultSubject数据（未加密）
控制指令功能参考下表所示： 表3-2 控制指令功能
指令值(mid)| 指令名称| 指令功能  
---|---|---  
101| Execute| Cmd执行命令  
102| Download| 将控制端的传递数据保存至指令目录  
103| Upload| 将需上传文件路径保存至cmd.result并准备上传  
104| Shred| 清除指定文件(移动该文件至随机位置后再进行删除操作)  
105| Send_Log| 读取ExceptionHandling运动cmd.result并准备上传  
### 3.3.2 HTTP隧道通信
SideTwist后门是由第一阶段宏代码添加的计划任务启动执行。其首先通过sleep延迟执行恶意行为以尝试绕过沙箱检测，休眠时间为计算出的随机数的10倍。
图3-33 Sleep延迟执行恶意行为
接着获取主机用户名、计算机名以及域名等信息，并通过简单的异或计算出用以标识的唯一值。此外，后门还会检查“update.xml”文件是否存在于上级目录中，不存在则输出调试信息并结束进程。
图3-34 计算唯一标识符和检查XML文件
如该文件存在，后门则发送HTTP GET请求到C&C服务器
（sarmsoftware.com/search/[identifier]），使用的端口号为443，并将80作为备用的端口号。
图3-35 使用HTTP协议与服务器通信
发送给服务器的GET请求流量内容如下图所示：
图3-36 GET请求流量数据包内容
在分析此样本时，该域名已无法访问，我们通过其它途径找到了与其关联的页面源代码。后门将加密后的控制指令字符串以特定格式隐藏在HTML特定javascript标记内，并在字串首尾以“/
_“”_
/”作为提取指令时的分隔符，我们称这种利用`javascript`作为控制命令下发的通道为为“JS控制通道”。具体如图3-37所示（该例的控制指令编号为-1）。
图图3-37 提取控制指令数据
后门所有通信流量的加解密均采用Base64和梅森旋转算法（`Mersenne
twister`）。解密控制指令数据时，其先使用Base64对字串进行解码，之后再将加密数据的前4个字节作为种子，通过`Mersenne
twister`进行解密，解密后的数据使用‘|’作为分隔符。如果数据中包含参数，则参数部分还需再进行一次`Base64`解码。解密后的数据格式如图3-38所示。
图3-38 解密流程和解密后的数据格式
解密流程部分代码如下图所示：
图3-39 解密流程部分代码内容
成功解密后，后门首先会提取出控制指令编号，判断该值是否为-1。如果是，则获取受感染主机的用户名以及主机名等信息，并将信息拼接成
“用户名|主机名|WORKGROUP”（‘|’作为分隔符）格式。之后再使用Mersenne twister和Base64对数据进行加密。
图3-40 加密获取到的用户主机信息
最后，后门使用HTTP POST方法，将加密后的数据发送给C&C服务器。数据采用简单的JSON格式，具体如图3-41所示。
图3-41 向C&C服务器发送加密后的数据
最终发送给服务器的返回数据格式如下图所示：
图3-42 发送到服务器的加密后数据格式
SideTwist后门的功能比较简单，在分析中并没有发现如屏幕监控或键盘记录之类的监视功能，猜测其主要用于前期的侦查阶段。具体的控制指令功能如下表所示。
表3-3 控制指令功能
控制指令标识符| 控制指令| 参数| 功能  
---|---|---|---  
-1| 101（未使用）| 无参数（参数1）| 上传主机相关信息  
非-1值| 101| shell 命令（参数1）| 运行shell命令  
非-1值| 102| 文件名（参数1）/ 下载路径（参数2）| 下载指定文件  
非-1值| 103| 文件（参数1）| 上传指定文件  
非-1值| 104| shell 命令（参数1）| 运行shell命令  
# 四、总结
通过以上的分析可以看出，`APT34`组织的攻击手法隐秘高明，且在不断地改进升级其攻击技术，扩充其匿名性的基础设施和增加其独具一格的`TTP`。同时其还擅长于巧妙地利用低成本公共服务来隐藏其攻击痕迹，提高其攻击的成功率。此外，该组织为了逃避检测机制，常常会更换攻击策略和战术。
APT34偏向于使用更容易做免杀的脚本或更具欺骗性的`word`文档作为初期阶段的载荷投递，接着通过定制加强的后门来执行攻击任务，同时利用各种隐匿通信隧道与黑客方交换数据，例如其长期使用的“EWS隧道技术”作为控制通道以及本次攻击中新使用的“匿名DNS隧道技术”作为预攻击活动上报，使用“JS控制通道”作为控制命令下发的管道。“EWS隧道技术”通过依附高可信组织的`Exchange`邮件账户作为`C&C`（失陷邮件账户）,极大的提高了安全检测的难度，可以说是一种较为高明且保险的攻击策略。而“匿名`DNS`隧道技术”不同于一般的`DNS`隧道技术，其采用了成本低且完全匿名的形式，极难检测和追踪。“JS控制通道”的使用也是该组织在HTTP通信过程中首次使用的，难以检测和发现。
当我们面临这种攻击时，常常很难在攻击未发现的情况下检测出此类攻击，无论是基于规则、算法，还是基于机器学习算法的检测，其在流量规避上一直在寻求新的手段和方法，不断地利用公共设施和窃取的账户做为控制命令服务器。攻击隐藏和攻击发现这是一个长期的对抗过程，只有提高我们的发现能力和威胁情报反应能力才能够将这种攻击的威胁降低到最小，这其中需要我们具备较强的分析能力，较快的反应能力外，还需要结合新的防御思路和先进的检测技术来平衡攻防不对等的状态。
* * *