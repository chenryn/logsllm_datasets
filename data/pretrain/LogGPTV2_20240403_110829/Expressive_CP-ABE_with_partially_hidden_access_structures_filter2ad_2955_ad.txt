′
˜Z2,xZ r
x , w = ca˜v, w
= c˜sa˜v
x,
zρ(x) = a0 + aρ(x)tρ(x). This is a semi-functional cipher-
text and B simulates Game0. We note that the values of
′
′
′
a, a0, aρ(x), tρ(x), ˜s, ˜v2, . . . , ˜vn, ˜v
n, ˜rx, ˜r
2, . . . , ˜v
x modulo p1 are
uncorrelated from their values modulo p2, so this is properly
distributed. If T $← Gp1 , it is easy to observe that this is a
normal ciphertext and B simulates Gamereal. Hence, B can
use the output of A to distinguish between these possibilities
for T .
Lemma 2. Suppose that G satisﬁes Assumption 2. Then
Gamek−1,3 and Gamek,1 are computationally indistinguish-
able.
Proof. Suppose there exists an algorithm A that distin-
guishes Gamek−1,3 and Gamek,1. Then we can build an algo-
rithm B with non-negligible advantage in breaking Assump-
tion 2. B is given g, X1X2, Y2Y3, X3, X4, T and will simulate
Gamek−1,3 or Gamek,1 with A. B chooses α, a, a0, a1, . . . , an ∈
ZN and Z ∈ Gp4 uniformly at random.
It then sets h =
ga0 , u1 = ga1 , . . . , un = gan , and sends A the public param-
eters:
PK = (N, g, ga, e(g, g)α, u1, . . . , un, H = h · Z, X4).
Note that B knows the master secret key MSK = (h, X3, α)
associated with PK. Let us now explain how B answers the
j-th key query for S = (s1, . . . , sn).
For j  k, B creates a normal key by running the key
To answer the k-th key quest for S = (s1, . . . , sn), B
, ˜R1, . . . , ˜Rn ∈ Gp3 and sets:
′
, {Ki = T a0+aisi · ˜R
i}i≤i≤n.
′
×Gp3 ,
×Gp2
chooses random elements ˜R, ˜R
K = gα · T a · ˜R, K
= T · ˜R
′
We have the following observations. If T $← Gp1
then T can be written as gtgd
2
K = gαgatR · gd
2 ,
¯R, and
′ · gd
′
′
= gtR
2 ,
K
}i≤i≤n,
i h)tRi · gd
{Ki = (usi
′
′
where R = ¯Ra ˜R, d = ad
, Ri = ¯Ra0+aisi ˜R
= ¯R ˜R
i, zi =
a0 + aisi. This is a semi-function key of type 1. Note that
the values of a, a0, ai, si modulo p1 are uncorrelated from
× Gp3 , this is a properly
their values modulo p2. If T $← Gp1
distributed normal key.
At some point, A sends B two (equal length) messages
M0, M1 and two access structures (A, ρ,T0), (A, ρ, T1). B
chooses β ∈ {0, 1} randomly and does the following.
1. B chooses random values ˜v2, . . . , ˜vn, ˜v
n ∈ ZN
′
′
2, . . . , ˜v
′
′
′
2, . . . , ˜v
n = (1, ˜v
and creates vectors ˜v = (1, ˜v2, . . . , ˜vn), ˜v
n).
, R
zi
′
′
2
′
2. B chooses random values ˜rx, ˜r
x ∈ ZN and ˜Z1,x, Z
′
′
1,x, ˜Z2,x,
3. Let Tβ = (tρ(1), . . . , tρ(ℓ)). B chooses random exponent
2,x ∈ Gp4 for 1 ≤ x ≤ ℓ.
′
Z
˜s ∈ ZN and computes
˜C1 = Mβ · e(gα, X1X2), C
′
1 = X1X2,
C1,x = (X1X2)aAx·~v · (X1X2)
−(a0+a(cid:26)(x)t(cid:26)(x))~rx · ˜Z1,x,
D1,x = (X1X2)~rx · Z
′
1,x,
C2,x = (X1X2)~saAx·~v
′
˜C2 = e(gα, (X1X2)~s), C
2 = (X1X2)~s,
′ · (X1X2)
′
−(a0+a(cid:26)(x)t(cid:26)(x))~r
x · Z
′
D2,x = (X1X2)~r
′
2,x.
x · ˜Z2,x,
4. B sets the challenge ciphertext as C = ((A, ρ), ˜C1, C
′
1,
2,{C2,x, D2,x}1≤x≤ℓ) and sends
′
{C1,x, D1,x}1≤x≤ℓ, ˜C2, C
it to A.
If we let X1X2 = gsgc
2, then
˜C1 = Mβ · e(g, g)αs, C
1 = gs · gc
′
2,
C1,x = gaAx·v(u
t(cid:26)(x)
ρ(x) H)
D1,x = grx Z
′
˜C2 = e(g, g)αs
C2,x = gaAx·v
′
(u
t(cid:26)(x)
ρ(x) H)
′
x Z
D2,x = gr
2
−rx Z1,x · g
1,x · g
−γx
′
,
′ · gc
′
′
2 = gs
2 ,
, C
′
x Z2,x · g
′
−r
Axw
2
2,x · g
−γ
′
2
′
x
,
Axw+γxz(cid:26)(x)
2
,
′
xz(cid:26)(x)
+γ
,
′
′
= s˜s, c
′
˜v
n), rx = s˜rx, r
′
′
= c˜s, v = (s, s˜v2, . . . , s˜vn), v
˜v
2, . . . ,
where s
′
′
′
′
x, Z1,x = ˜Z1,xZ rx , Z2,x = ˜Z2,xZ r
x = s˜r
x ,
s
x = −c˜r
′
′
x, zρ(x) = a0 +
w = ca˜v, w
aρ(x)tρ(x). This is a semi-functional ciphertext. Note that
′
′
′
the values of a, a0, aρ(x), tρ(x), ˜s, ˜v2, . . . , ˜vn, ˜v
n, ˜rx, ˜r
2, . . . , ˜v
x
modulo p1 are uncorrelated from their values modulo p2.
, γx = −c˜rx, γ
′
= c˜sa˜v
′
= (s
, s
′
′
Similar to the analysis in the proof of Lemma 2 of Lewko
et al.’s CP-ABE scheme [14], the kth key and ciphertext are
properly distributed. We can thus conclude that, if T $←
× Gp2
× Gp3 , then B has properly simulated Gamek,1. If
Gp1
T $← Gp1
× Gp3 , then B has properly simulated Gamek−1,3.
Hence, B can use the output of A to distinguish between
these possibilities for T .
Lemma 3. Suppose that G satisﬁes Assumption 2. Then
Gamek,1 and Gamek,2 are computationally indistinguishable.
Proof. Suppose there exists an algorithm A that distin-
guishes Gamek,1 and Gamek,2. Then we can build an algo-
rithm B with non-negligible advantage in breaking Assump-
tion 2. B is given g, X1X2, Y2Y3, X3, X4, T and will simulate
Gamek,1 or Gamek,2 with A. B chooses α, a, a0, a1, . . . , an ∈
ZN and Z ∈ Gp4 uniformly at random.
It then sets h =
ga0 , u1 = ga1 , . . . , un = gan , and sends A the public param-
eters:
PK = (N, g, ga, e(g, g)α, u1, . . . , un, H = h · Z, X4).
The ﬁrst k − 1 semi-functional keys of type 3, the nor-
mal keys > k, and the challenge ciphertext are constructed
exactly as in the Lemma 2.
To answer the k-th key quest for S = (s1, . . . , sn), B pro-
ceeds as it did in the Lemma 2, but B additionally chooses
a random exponent δ ∈ ZN and sets:
K = gα · T a · ˜R · (Y2Y3)δ,
= T · ˜R
′
′
K
{Ki = T a0+aisi · ˜R
,
i}i≤i≤n,
′
ga0 , u1 = ga1 , . . . , un = gan , and sends A the public param-
eters:
PK = (N, g, ga, e(g, gαX2) = e(g, g)α,
u1, . . . , un, H = h · Z, X4).
′ · gd
′
2 ,
i h)tRi · gdi
2
}1≤i≤n.
2 , where gd
Each time B is asked to provide a key for S = (s1, . . . , sn),
B creates a semi-functional key of type 3 by choosing ran-
, d1, . . . , dn ∈ ZN , random elements
dom exponents t, ˜d, d
R, R
′
′
K = (gαX2)gatR · g
~d
2 ,
, R1, . . . , Rn ∈ Gp3 , and setting:
′
= gtR
K
{Ki = (usi
We note that K can be written as gαgatR · gd
2 =
X2g ~d
2 , so this is a properly distributed semi-functional key
of type 3.
At some point, A sends B two (equal length) messages
M0, M1 and two access structures (A, ρ,T0), (A, ρ,T1). B
chooses β ∈ {0, 1} randomly and does the following.
1. B chooses random values ˜v2, . . . , ˜vn ∈ ZN and creates
the vector ˜v = (1, ˜v2, . . . , ˜vn). B also chooses two ran-
n) ∈
′
′
2, . . . , v
dom vectors v
Zn
N .
2. B chooses random values ˜rx, r
′
′
1,x,
x, γ
2,x ∈ Gp4 for 1 ≤ x ≤ ℓ.
′
3. Let Tβ = (tρ(1), . . . , tρ(ℓ)). B chooses random exponent
′
′
n), w
1, . . . , w
x ∈ ZN and ˜Z1,x, Z
′
Z2,x, Z
′ ∈ ZN and computes
′
= (s
= (w
, v
c
′
′
˜C1 = Mβ · T, C
C1,x = (gsY2)aAx·~v(gsY2)
′
1 = gsY2,
−(a0+a(cid:26)(x)t(cid:26)(x))~rx ˜Z1,x,
C2,x = gaAx·v
D1,x = (gsY2)~rx · Z
′
1,x,
′
′
2 = gs
′
Axw
2
′
˜C2 = e(g, g)αs
′
′
−r
x Z2,xg
2,x · g
′
′
x Z
t(cid:26)(x)
ρ(x) H)
D2,x = gr
, C
−γ
2
(u
′
x
.
′
gc
2 ,
′
+γ
x(a0+a(cid:26)(x)t(cid:26)(x))
,
The only change we have made here is adding the (Y2Y3)δ
×
term, which randomizes the Gp2 part of K. If T $← Gp1
×Gp3 , this is a properly distributed semi-functional key
Gp2
× Gp3 , this is a properly distributed
of type 1. If T $← Gp1
×Gp2
We can conclude that, if T $← Gp1