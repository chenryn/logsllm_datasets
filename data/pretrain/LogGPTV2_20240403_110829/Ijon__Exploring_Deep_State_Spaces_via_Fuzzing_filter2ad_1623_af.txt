To elaborate on the results from our experiments on the
CGC dataset presented in Section V-F, we now provide some
explanation of the annotations we used to solve the 10 targets
(see Table VIII for details). Unfortunately, the exact amount
of time spent on solving individual targets is somewhat hard
to measure, as small changes are often followed by min-
utes to hours of fuzzing with no human interaction needed.
Consequently, we can only report very rough estimates for
the time spent on the implementation. In particular, for the
shorter examples (< 1h), many were solved using only a few
minutes of human attention. While most of the examples only
required maximizing a single loop counter, index, or pointer in
combination with some variants of string comparisons, some
of the cases are more interesting. In particular, NRFIN 00004,
NRFIN 00041, and CROMU 00020 required multiple steps
to solve. To showcase these more complex results, we now
discuss the techniques used in three case studies.
TABLE VIII: Solving CGC Challenges. We give both the number of lines
of code (LOC) that were used for IJON annotations, and an estimate for the
human effort that went into producing the solution. Solutions annotated with
* are discussed in more detail. † indicates that the strcmp could be solved
using a properly chosen dictionary.
Target
LOC
CROMU 00011
NRFIN 00030
NRFIN 00004
NRFIN 00076
NRFIN 00041
CROMU 00020
NRFIN 00005
NRFIN 00012
NRFIN 00038
NRFIN 00049
2
1
5
1†
4
3
1†
2
1†
1†
Effort
< 1h
< 1h
< 5h
< 1h
< 1h
< 5h
< 1h
< 5h
< 1h
< 1h
Comment
strcmp, maximize index
maximize index
strcmp*, maximize index
strcmp
checksum*
challenge response*
strcmp
strcmp
strcmp
strcmp
A. NRFIN 00004 (HeartThrob)
This program uses a fully unrolled preﬁx tree (trie) to per-
form string comparison. The function that performs the check-
ing has roughly 30k different branches, and a correspondingly
large number of possible paths. The fuzzer explores all inputs
equally, ﬁlling the bitmap and producing useless inputs. After
diagnosing the problem, it took us less than 20 minutes to build
a small script that extracts the relevant strings from the trie and
to disable coverage feedback within the function. Using these
strings, we obtained the coverage that was needed. Lastly, we
had to use the maximize primitive IJON-MAX to trigger an
OOB crash.
B. NRFIN 00041 (AIS-Lite)
This program uses an encoded checksum to guard the bug.
After manually removing the checksum check, the bug was
found very quickly. To obtain a valid input without understand-
ing the format or the checksum, we used the following trick:
we used an IJON_CMP and annotation on the checksum check
to produce a valid input (while still using the patched target).
AFL’s crash exploration mode ensured that the fuzzer did not
remove the cause of the crash while ﬁxing the checksum. The
ﬁxed input triggers the crash in the unmodiﬁed binary. This
approach closely mirrors the approach used by T-FUZZ [43]
or REDQUEEN [7]. However, instead of leveraging symbolic
execution or colorization, we used the fuzzer itself to provide
the ﬁxed input.
C. CROMU 00020 (Estadio)
Similar to the previous case study, we used a “patch check
and ﬁx the crashing input afterwards” approach to solve this
target. However, instead of a checksum, a series of challenge-
response messages were required to trigger the bug.
REFERENCES
[1] Circumventing fuzzing roadblocks with compiler
transformations.
https://lafintel.wordpress.com/. Accessed: February 12,
2020.
[2] DARPA Challenge Binaries on Linux, OS X, and Windows. https:
//github.com/trailofbits/cb-multios. Accessed: February
12, 2020.
[3] DARPA Cyber Grand Challenge binaries. https://github.com/
CyberGrandChallenge. Accessed: February 12, 2020.
[4] Project
Triforce: Run AFL
on
Everything!
https:
//www.nccgroup.trust/us/about-us/newsroom-and-
events/blog/2016/june/project-triforce-run-afl-
on-everything/. Accessed: February 12, 2020.
[5] Security oriented fuzzer with powerful analysis options. https://
github.com/google/honggfuzz. Accessed: February 12, 2020.
[6] Cornelius Aschermann, Tommaso Frassetto, Thorsten Holz, Patrick
Jauernig, Ahmad-Reza Sadeghi, and Daniel Teuchert. Nautilus: Fishing
for deep bugs with grammars. In Symposium on Network and Distributed
System Security (NDSS), 2019.
[7] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko, Robert Gawlik,
and Thorsten Holz. Redqueen: Fuzzing with input-to-state correspon-
In Symposium on Network and Distributed System Security
dence.
(NDSS), 2019.
[8] Yves Bertot and Pierre Cast´eran.
Interactive theorem proving and
program development: Coq’Art: the calculus of inductive constructions.
Springer Science & Business Media, 2013.
[9] Tim Blazytko, Cornelius Aschermann, Moritz Schl¨ogel, Ali Abbasi,
Sergej Schumilo, Simon W¨orner, and Thorsten Holz. Grimoire: Synthe-
sizing structure while fuzzing. In USENIX Security Symposium, 2019.
[10] Marcel B¨ohme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik
In ACM Conference on
Roychoudhury. Directed greybox fuzzing.
Computer and Communications Security (CCS), 2017.
[11] Marcel B¨ohme, Van-Thuan Pham, and Abhik Roychoudhury. Coverage-
In ACM Conference on
based greybox fuzzing as markov chain.
Computer and Communications Security (CCS), 2016.
[12] Cristian Cadar, Daniel Dunbar, and Dawson R Engler. Klee: Unassisted
and automatic generation of high-coverage tests for complex systems
programs. In Symposium on Operating Systems Design and Implemen-
tation (OSDI), 2008.
[13] Sang Kil Cha, Maverick Woo, and David Brumley. Program-adaptive
mutational fuzzing. In IEEE Symposium on Security and Privacy, 2015.
[14] Peng Chen and Hao Chen. Angora: Efﬁcient fuzzing by principled
search. In IEEE Symposium on Security and Privacy, 2018.
[15] David R Cok and Scott C Johnson. Speedy: An eclipse-based ide for
invariant inference. arXiv preprint arXiv:1404.6605, 2014.
[16] Nassim Corteggiani, Giovanni Camurati, and Aur´elien Francillon. In-
ception: System-wide security testing of real-world embedded systems
software. In usenix-security, 2018.
[17] Jerry Alan Fails and Dan R. Olsen, Jr.
Interactive machine learning.
In Proceedings of the 8th International Conference on Intelligent User
Interfaces, 2003.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:13 UTC from IEEE Xplore.  Restrictions apply. 
1610
[18] Andrea Fioraldi, Daniele Cono D’Elia, and Emilio Coppa. Weizz:
Automatic grey-box fuzzing for structured binary formats. arXiv preprint
arXiv:1911.00621, 2019.
[19] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang Li, Zhongyu
In IEEE
Pei, and Zuoning Chen. CollAFL: Path Sensitive Fuzzing.
Symposium on Security and Privacy, 2018.
[20] Patrice Godefroid, Adam Kiezun, and Michael Y Levin. Grammar-
based whitebox fuzzing. In ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), 2008.
[21] Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART: Directed
In ACM SIGPLAN Conference on Pro-
Automated Random Testing.
gramming Language Design and Implementation (PLDI), 2005.
[22] Patrice Godefroid, Michael Y Levin, David A Molnar, et al. Automated
whitebox fuzz testing. In Symposium on Network and Distributed System
Security (NDSS), 2008.
Open
[23] Google.
ClusterFuzz.
https://
sourcing
opensource.googleblog.com/2019/02/open-sourcing-
clusterfuzz.html. Accessed: February 12, 2020.
[24] Deepak Gopinath, Siddarth Jain, and Brenna D Argall. Human-in-
IEEE
the-loop optimization of shared autonomy in assistive robotics.
Robotics and Automation Letters, 2016.
[25] Emre G¨uler, Cornelius Aschermann, Ali Abbasi, and Thorsten Holz.
AntiFuzz: Impeding Fuzzing Audits of Binary Executables. In USENIX
Security Symposium, 2019.
[26] Istvan Haller, Asia Slowinska, Matthias Neugschwandtner, and Herbert
Bos. Dowsing for overﬂows: A guided fuzzer to ﬁnd buffer boundary
violations. In USENIX Security Symposium, 2013.
[27] HyungSeok Han, DongHyeon Oh, and Sang Kil Cha. CodeAlchemist:
Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript
In Symposium on Network and Distributed System Security
Engines.
(NDSS), 2019.
[28] Andrew Henderson, Heng Yin, Guang Jin, Hao Han, and Hongmei Deng.
Vdf: Targeted evolutionary fuzz testing of virtual devices. In Symposium
on Recent Advances in Intrusion Detection (RAID), 2017.
[29] Chin-Chia Hsu, Che-Yu Wu, Hsu-Chun Hsiao, and Shih-Kun Huang.
Instrim: Lightweight instrumentation for coverage-guided fuzzing.
In
Symposium on Network and Distributed System Security (NDSS), Work-
shop on Binary Analysis Research, 2018.
[30] Jinho Jung, Hong Hu, David Solodukhin, Daniel Pagan, Kyu Hyung Lee,
In USENIX
and Taesoo Kim. Fuzziﬁcation: Anti-fuzzing techniques.
Security Symposium, 2019.
[31] S. Lem. The Star Diaries: Further Reminiscences of Ijon Tichy. HMH
Books, 2012.
[32] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin,
Yang Liu, and Alwen Tiu. Steelix: Program-state Based Binary Fuzzing.
In Joint Meeting on Foundations of Software Engineering, 2017.
[33] LLVM. Libfuzzer. https://llvm.org/docs/LibFuzzer.html.
Accessed: February 12, 2020.
[34] Heather Logas, Jim Whitehead, Michael Mateas, Richard Vallejos,
Lauren Scott, Daniel G Shapiro, John Murray, Kate Compton, Joseph C
Osborn, Orlando Salvatore, et al. Software veriﬁcation games: Designing
In International Conference on the
Xylem, The Code of Plants.
Foundations of Digital Games (FDG), 2014.
[35] Check Point Software Technologies LTD. Symbolic execution in vuln
https://research.checkpoint.com/50-adobe-
research.
cves-in-50-days/. Accessed: February 12, 2020.
[36] Aravind Machiry, Rohan Tahiliani, and Mayur Naik. Dynodroid: An
input generation system for android apps. In Proceedings of the 2013
9th Joint Meeting on Foundations of Software Engineering, 2013.
[37] David Molnar, Xue Cong Li, and David Wagner. Dynamic Test
In
Generation to Find Integer Bugs in x86 Binary Linux Programs.
USENIX Security Symposium, 2009.
[38] Saahil Ognawala, Thomas Hutzelmann, Eirini Psallida, and Alexander
Pretschner. Improving function coverage with munch: a hybrid fuzzing
In ACM Symposium On
and directed symbolic execution approach.
Applied Computing (SAC), 2018.
[39] Martin Ouimet and Kristina Lundqvist. Formal software veriﬁcation:
Model checking and theorem proving. Technical Report ESL-TIK-
00213, M¨alardalen University, 2007.
[40] Rohan Padhye, Caroline Lemieux, Koushik Sen, Mike Papadakis, and
Yves Le Traon. Validity fuzzing and parametric generators for effective
random testing. In International Conference on Software Engineering
(ICSE), 2019.
[41] Lawrence C Paulson. Isabelle: A generic theorem prover, volume 828.
Springer Science & Business Media, 1994.
[42] Kexin Pei, Yinzhi Cao, Junfeng Yang, and Suman Jana. DeepXplore:
In ACM
Automated Whitebox Testing of Deep Learning Systems.
Symposium on Operating Systems Principles (SOSP), 2017.
[43] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-Fuzz: fuzzing by
program transformation. In IEEE Symposium on Security and Privacy,
2018.
[44] Van-Thuan Pham, Marcel B¨ohme, Andrew E Santosa, Alexandru R˘azvan
C˘aciulescu, and Abhik Roychoudhury. Smart greybox fuzzing. arXiv
preprint arXiv:1811.09447, 2018.
[45] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano
Giuffrida, and Herbert Bos. VUzzer: Application-aware Evolutionary
In Symposium on Network and Distributed System Security
Fuzzing.
(NDSS), 2017.
[46] Alexandre Rebert, Sang Kil Cha, Thanassis Avgerinos, Jonathan M
Foote, David Warren, Gustavo Grieco, and David Brumley. Optimizing
seed selection for fuzzing. In USENIX Security Symposium, 2014.
[47] David Romero, Peter Bernus, Ovidiu Noran, Johan Stahre, and ˚Asa Fast-
Berglund. The operator 4.0: human cyber-physical systems & adaptive
automation towards human-automation symbiosis work systems.
In
IFIP International Conference on Advances in Production Management
Systems, 2016.
[48] Stuart J Russell and Peter Norvig. Artiﬁcial intelligence: a modern
approach. Pearson Education Limited, 2016.
[49] Gunar Schirner, Deniz Erdogmus, Kaushik Chowdhury, and Taskin
Padir. The future of human-in-the-loop cyber-physical systems. IEEE
Computer, 2013.
[50] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian
Schinzel, and Thorsten Holz. kaﬂ: Hardware-assisted feedback fuzzing
for os kernels. In USENIX Security Symposium, 2017.
[51] Stacey D Scott, Neal Lesh, and Gunnar W Klau. Investigating human-
computer optimization. In ACM CHI Conference on Human Factors in
Computing Systems (CHI), 2002.
[52] Yan Shoshitaishvili, Michael Weissbacher, Lukas Dresel, Christopher
Salls, Ruoyu Wang, Christopher Kruegel, and Giovanni Vigna. Rise of
the HaCRS: Augmenting Autonomous Cyber Reasoning Systems with
Human Assistance. In ACM Conference on Computer and Communica-
tions Security (CCS), 2017.
[53] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu
Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and
Giovanni Vigna. Driller: Augmenting fuzzing through selective symbolic
execution. In Symposium on Network and Distributed System Security
(NDSS), 2016.
[54] Dimitri Vyokov.
Syzkaller.
https://github.com/google/
syzkaller. Accessed: February 12, 2020.
[55] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. TaintScope: A
checksum-aware directed fuzzing tool for automatic software vulner-
ability detection. In IEEE Symposium on Security and Privacy, 2010.
[56] Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and David Brumley.
In ACM Conference on
Scheduling black-box mutational fuzzing.
Computer and Communications Security (CCS), 2013.
[57] Xiaofei Xie, Lei Ma, Felix Juefei-Xu, Hongxu Chen, Minhui Xue, Bo Li,
Yang Liu, Jianjun Zhao, Jianxiong Yin, and Simon See. Coverage-guided
fuzzing for deep neural networks. arXiv preprint arXiv:1809.01266,
2018.
[58] Wen Xu, Sanidhya Kashyap, Changwoo Min, and Taesoo Kim. Design-
ing new operating primitives to improve fuzzing performance. In ACM
Conference on Computer and Communications Security (CCS), 2017.
[59] Fisher Yu, Ari Seff, Yinda Zhang, Shuran Song, Thomas Funkhouser,
and Jianxiong Xiao.
Lsun: Construction of a large-scale image
dataset using deep learning with humans in the loop. arXiv preprint
arXiv:1506.03365, 2015.
[60] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim.
QSYM: A Practical Concolic Execution Engine Tailored for Hybrid
Fuzzing. In USENIX Security Symposium, 2018.
[61] Michał
Zalewski.
american
fuzzy
lop.
http://
lcamtuf.coredump.cx/afl/. Accessed: February 12, 2020.
[62] Michal Zalewski.
Symbolic
execution
in
vuln
research.
https://lcamtuf.blogspot.com/2015/02/symbolic-
execution-in-vuln-research.html. Accessed: February 12,
2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:13 UTC from IEEE Xplore.  Restrictions apply. 
1611
[63] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan.
Send hardest
problems my way: Probabilistic path prioritization for hybrid fuzzing. In
Symposium on Network and Distributed System Security (NDSS), 2019.
[64] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong
Zhu, and Limin Sun. FIRM-AFL: High-Throughput Greybox Fuzzing
of IoT Firmware via Augmented Process Emulation. In USENIX Security
Symposium, 2019.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:13 UTC from IEEE Xplore.  Restrictions apply. 
1612