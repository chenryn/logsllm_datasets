# HTTP Strict Transport Security (HSTS)

## Who Uses HSTS?

HSTS (HTTP Strict Transport Security) is widely adopted by many websites, especially those that handle sensitive data. Examples include Google, Twitter, and PayPal.

## How Does HSTS Work?

### Server-Side
When a client makes an HTTPS request to a server, the server can include an `Strict-Transport-Security` header in its response. This header instructs the browser to only use secure connections for future requests to the site.

#### Example Header
```http
GET / HTTP/1.1
Host: example.com

HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8
Strict-Transport-Security: max-age=3153600; includeSubdomains
```

### Parameters
- **max-age**: The number of seconds that the HSTS policy is enabled.
- **includeSubdomains**: If present, the policy applies to all subdomains, not just the visited one.

### Browser Support
Most modern browsers support HSTS. You can check the compatibility at [Can I Use](http://caniuse.com/#feat=stricttransportsecurity).

## HSTS Timeline

### Initial HTTPS Connection
- A user visits a website over HTTPS.
- The server responds with an `Strict-Transport-Security` header.

### After 3153600 Seconds (One Year)
- The browser remembers the HSTS policy and enforces it for subsequent visits.

## Preloaded HSTS
Preloaded HSTS is a mechanism where a hardcoded list of well-known website names that should always use HTTPS is included in the browser. This prevents the security gap before the first HTTPS connection.

- **Example Websites**: Google, Twitter, PayPal, etc.

### Preloaded HSTS Lists
- **Google**: [Chromium STS](http://www.chromium.org/sts)
- **Mozilla**: [Mozilla Blog](https://blog.mozilla.org/security/2012/11/01/preloading-hsts/)
- **Others**:
  - **Chromium Source Code**
  - **Safari Plist**:
    ```plaintext
    {
        "com.apple.CFNetwork.defaultStorageSession" => {
            "ssl.google-analytics.com" => -inf,
            "webmail.mayfirst.org" => -inf,
            "braintreegateway.com" => -inf,
            "code.google.com" => -inf,
            "dm.mylookout.com" => inf,
            "therapynotes.com" => inf,
            "chrome.google.com" => -inf,
            "sol.io" => -inf,
            "www.sandbox.mydigipass.com" => inf,
            ...
        }
    }
    ```

## HSTS Weaknesses
- **Time Dependency**: HSTS relies on the accuracy of the system clock.
- **Trust in OS Time**: It completely trusts the operating system's current time.
- **Potential for Manipulation**: An attacker who can control the local clock can exploit this trust.

## Demo
### Letâ€™s Go!
- **Modern Time Synchronization**
- **Get in a Delorean (Time Travel Analogy)**
- **HTTP Strict Transport Security**
- **Windows Task Scheduler**
- **Public Key Infrastructure (PKI)**
- **Conclusions & Recommendations**

## Conclusions & Recommendations

### Facts
- **Time Synchronization**: Most operating systems do not manage time synchronization securely.
- **Security Reliance**: Many security protections rely on accurate time. If an attacker can control the local clock, numerous security measures can be compromised.

### What to Do
- **Configure NTP Synchronization Securely** (e.g., Microsoft's approach):
  - **Signature Verification**
  - **Maximum Drift Control**
- **Block SSL Certificates**: Block certificates whose expiration date is before the browser build date or the last update (as Chrome does).

## Contact Information
- **Jose Selvi**
  - [Twitter](http://twitter.com/JoseSelvi)
  - [Pentester.es](http://www.pentester.es)
  - [NCC Group](http://www.nccgroup.trust)

## Offices
- **UK Offices**: Manchester, Cheltenham, Edinburgh, Leatherhead, London, Thame
- **North American Offices**: San Francisco, Atlanta, New York, Seattle
- **Australian Office**: Sydney
- **European Offices**: Amsterdam (Netherlands), Munich (Germany), Zurich (Switzerland)

Thank you! Any questions?