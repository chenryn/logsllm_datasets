of an epoch e the signer generates a new dynamic key-pair
scheme used for the static layer, giving ((cid:99)pk , (cid:98)sk ). At the start
(pk e, sk e), signs pk e and e with (cid:98)sk, giving (cid:98)σe and publishes
(e, pk e,(cid:98)σ, [(sk 0,(cid:98)σ0) . . . , (sk e−V ,(cid:98)σe−V ]) as pinfoe.
and verifying σ and pinfoe.(cid:98)σ. The simulation of expired
Signing is done by signing the message m with sk, giving
σ and outputting (σ, pinfoe) as signature. Veriﬁcation works
by checking that pinfoe.e is less than V epochs in the past
signatures works by using the expired dynamic secret key and
the signature on it’s public-key from pinfoe to recreate the
signature in question.
A. Deterministic Bottom-Layer
The main problem with the above solution is the size of the
public epoch information pinfoe which is caused by the need
to include the dynamic secret-keys and signatures under the
static key for all expired epochs. A simple method to remove
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
1686
the former is to deterministically generate them based on a
seed that can be derived from the seeds of later epochs.
rithm during the e’th key-evolution (most notably Σ.gen(cid:0)1λ(cid:1)),
Assume that we want to use E epochs. Then during key-
generation we sample a random bitstring rE and apply a
Pseudo Random Function (PRF) H on it E times, storing all
intermediate values in the secret key. More precisely, we use re
as the key to a pseudorandom function H that we call with an
independent ﬁxed value m as message (H(re, m)) and use the
resulting value as re−1. Whenever we use a probabilistic algo-
we use H(re, m(cid:48)) instead of the randomness, where m(cid:48) (cid:54)= m
is a different message from the one used for computing re−1.
This way all dynamic secret keys can be removed from pinfoe
by adding re−V to it, which drastically decreases its size. The
main disadvantage of this method is that the size of the secret
key becomes linear in E, which we will deal with further
below by using a pebbling algorithm.
B. Reversed Forward-Secure Signatures
While the previous subsection goes a long way in reducing
the size of pinfoe, that size is still linear in the number of
expired epochs, due to the signatures under the static key
for all past epochs. To solve this we again use pebbling
but this time with forward secure signatures. Forward secure
signatures were introduced as an answer to the problem that
if an attacker receives the key of a signature-scheme, he can
forge arbitrary signatures and were ﬁrst formalised by Bellare
and Miner [21] in 1999. They add epochs and key-updates to
regular signatures: Every signature is marked as having been
created in a certain epoch; epoch-updates are performed by
the signer by updating the secret key so that it can no longer
be used to sign messages for previous epochs. In the case of
a key-compromise the adversary can then only create valid
signatures for the current and later epochs, but the signatures
for previous epochs stay secure. The previously mentioned pa-
per doesn’t give an explicit name for its unforgeability notion,
but it is colloquially known as “Forward Secure Existential
UnForgeability under adaptive Chosen Message Attacks” or
FS-EUF-CMA, which is what we will use henceforth.
Forward-secure signatures provide the guarantees that we
want, except backwards in time: Instead of all signatures in the
past remaining secure in the event of a compromise, we want
all future ones to remain secure. We resolve this in the same
way as in the previous subsection: Assume that we want to
use E epochs. Then during key-generation we evolve the initial
secret key of the forward-secure scheme E times and store all
derived keys as secret keys of our epochal signature scheme.
To sign a message for the i’th epoch with the epochal scheme,
we then use the secret key of the forward-secure scheme that
resulted from (E − i) evolutions. Since we store the secret
keys of all epochs of the forward-secure signature scheme,
this works with constant time-complexity. With this we can
then modify pinfoe to only include the (E − (e − V ))’th
secret key of the forward secure scheme, as the secret keys
of all previous epochs can be derived from it via the key-
evolution function of the forward secure scheme. Given that
there are efﬁcient, hash-based forward-secure-signatures with
reasonably small state, such as XMSS [22] we can even get
efﬁcient post-quantum-security.
C. Pebbling
The main-problem with the previous two solutions is that
they require either a very large secret key or a very high
amount of computations per epoch-update (both linear in the
number of remaining epochs). We solve this problem by using
pebbling schemes which allow us to compute the same values
in logarithmic time and space. For a detailed description of
how they work we refer to the work of Schoenmakers [23]
and only note that they reduce the size of the secret key to be
logarithmic in E at a low computational overhead.
treat
Formally we will
them as a pair of Algorithms
PebblePrep and Pebble of which the former takes an initial
value x0, a function f and an integer n and returns a state
sn−1. The later takes a state si and returns an updated state
si−1 and f i(x0) for i ∈ {0, . . . , n − 1}.
D. Undeniable Deniability
One of the issues with publishing the secret-keys once they
are no longer needed is that doing so requires the ability to
publish; if Alice loses internet-access before doing so and there
are witnesses that this happened, she loses some deniability.
As a countermeasure we target “undeniable deniability” which
means that every transcript already contains enough informa-
tion to be fully deniable. The way we achieve this is through
the use of time-lock-puzzles.
Time-lock puzzles (introduced by Rivest, Shamir and Wag-
ner [24]) allow the encryption of a value such that it can be
recovered by anyone after performing a certain amount of
sequential computation. Before the computation ﬁnishes the
puzzle only reveals trivial information. For reasons of space we
only give an intuitive overview here and refer to Appendix B1
for more formal deﬁnitions.
Deﬁnition 18 (Time Lock Puzzle). A time-lock puzzle TL is
a tuple of two PPT-algorithms TL.lock and TL.unlock.
• TL.lock takes three parameters: The security-parameter
1λ, a duration ∆t and a message m and returns a
ciphertext c.
• TL.unlock takes the ciphertext c as only parameter and
returns a message m.
We require that TL.unlock returns the encapsulated value:
Deﬁnition 19 (Correctness for Time Lock Puzzles). A time-
lock puzzle is correct if:
Pr(cid:2)TL.unlock(cid:0)TL.lock(cid:0)1λ, ∆t, m(cid:1)(cid:1) = m(cid:3) = 1
Furthermore we require that no adversary can distinguish
encapsulated values without performing sequential work for
at least ∆t. We call this notion INDistinguishability under
No-Message-Attacks or IND-NMA for short. For a formal
deﬁnition we refer to Deﬁnition 20 in Appendix B1. The
important part here is that parallelism cannot be used to extract
the information faster. This means that a consumer PC with a
high-end CPU may even be able to overtake super computers.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
1687
As such the largest thread would be adversaries with very
high sequential speed, which could for example be achieved
by dedicated implementations in hardware and extreme over-
clocking. Compared to a simple increase in parallelism, these
approaches are much more limited in what they can achieve
and how they scale with their cost.
In order to protect our protocol from the attack that we
outlined at
the start of this subsection, we add time-lock
puzzles to it as follows: Instead of just signing pk and its
expiration-date with (cid:98)sk, we encapsulate sk in a time-lock
puzzle and only sign pk and the expiration-date in combination
with that puzzle. This way signatures cannot be veriﬁed
without knowledge that is sufﬁcient to simulate them after
expiration, making them unconvincing to every judge. We note
that we don’t intend for the puzzle to replace the publication
of the key, but to supplement it.
We emphasize that we avoid the most common criticism
of time-lock-puzzles, namely that they pointlessly waste huge
amounts of energy: No honest party in our protocol will
attempt to break any puzzle, we only need to ensure that they
are capable of doing so in principle; the creation of the puzzles
on the other hand is usually efﬁcient enough to not be a major
concern in that regard.
VI. PROPOSAL
We propose the scheme depicted in Algorithms 2–5 which,
as we will prove, satisﬁes the security notions that we deﬁned
in Section IV. In addition to that it actually exceeds our
deniability-notion in that a public epoch information pinfoe
can be used to simulate signatures of even the epoch it was
released in, as long as enough time has passed.
section:
The core-idea uses the techniques described in the previous
• A forward-secure signature scheme(cid:98)Σ that is reversed via
pebbling as the static layer.
• A regular signature scheme Σ that is used for the dynamic
layer and is replaced with each epoch.
• A pseudorandom value re
is
used to derandomize all non-deterministic algorithms in
Σ.evolve (.)
for each epoch that
• A timelock-puzzle as part of pinfoe that is used to ensure
the reveal of the secret keys after they expire.
We note that all entities that are part of the static scheme
parts of the dynamic layer will be marked with an overbar
(such as Σ).
generation of the timelock-puzzles, and the dynamic keys,
respectively. We assume that these algorithms take a constant-
will be marked with a “hat”-symbol (such as (cid:98)Σ), whereas all
We use H(r,(cid:99)pk||e||n) with n ∈ {0, 1, 2} as seeds for the
length seed and stretch it themselves if necessary. We add(cid:99)pk
Our public key pk consists only of the public key(cid:99)pk of the
static signature-scheme(cid:98)Σ. The secret key sk on the other hand
for the static scheme (cid:98)sk, the number e of evolutions that have
is a six-tuple that contains the public key pk, the pebbling-
states for both the pseudorandom-seed sk r and the secret key
and the epoch e to the message to prevent multi-target attacks.
been performed (initially 0), the current secret key sk of the
dynamic signature scheme Σ and the public epoch-information
pinfoe of the current epoch. The last two values are initially set
to ⊥ until Σ.evolve is executed for the ﬁrst time. For a rough
performance-estimate of this scheme, we refer to Appendix A.
Including the full description of pebbling in our algorithm
obscures the more conceptual parts. Hence, we provide two
versions: One that uses pebbling as we intend and a simpliﬁed
(space-inefﬁcient) one that keeps all needed values in a long
list. Operations that are only executed in the simpliﬁed version
are highlighted green, whereas operations that only occur in
the complete description are highlighted orange.
We also note that we hash and evolve E + V times instead
of just E times, leading to secrets that are never used; This
is just to simplify the deﬁnition of Σ.evolve which would
otherwise have to treat the ﬁrst V epochs differently; a real
implementation might instead want to add these special-cases.
Similarly most pebbling-algorithms would allow to share most
of the work between the calls to PebblePrep.
Algorithm 2: Σ.gen. The green operations are only
part of the simpliﬁed version, the orange ones only of
the space-efﬁcient complete one.
5s
6s
7s
2
3
4s
sk r := [r−V , . . . , r0, . . . , rE ]
rE ←$ {0, 1}λ
for e ∈ {E + V , . . . , 0}:
1 fun Σ.gen(cid:0)1λ, ∆t, E , V(cid:1):
(cid:99)pk , (cid:98)sk E :=(cid:98)Σ.gen(cid:0)1λ(cid:1)
(cid:17)
(cid:16)(cid:98)sk e+1
(cid:98)sk e :=(cid:98)Σ.update
re := H(re+1,(cid:99)pk||e + 1||0)
8s (cid:100)SK := [(cid:98)sk−V , . . . , (cid:98)sk 0, . . . , (cid:98)sk E ]
(cid:17)
(cid:16)
E , (cid:98)sk E , (cid:98)Σ.update
4c (cid:100)SK new := PebblePrep
(cid:16)
E + V , (cid:98)sk E , (cid:98)Σ.update
5c (cid:100)SK exp := PebblePrep
(cid:16)
(cid:17)
(r, e) → (H(re+1,(cid:99)pk||e + 1||0), e − 1)
(cid:16)
(cid:17)
(r, e) → (H(re+1,(cid:99)pk||e + 1||0), e − 1)
pk := ((cid:99)pk , t0, ∆t, E , V )
sk := (pk , sk r, (cid:98)sk , 0,⊥,⊥)
sk :=(cid:0)pk , (sk r,new, sk r,exp), ((cid:100)SK new,(cid:100)SK exp),
0,⊥,⊥(cid:1)
sk r,new := PebblePrep
sk r,exp := PebblePrep
E + V , (rE , E ),
t0 := now()
E , (rE , E ),
6c
7c
(cid:17)
return pk, sk
9
10
11s
11c
12
Our Σ.evolve-algorithm (Algorithm 3) is completely deter-
ministic since all required randomness is derived from the
pseudorandom value rnew.
Signing messages (Algorithm 4) works by signing the
message and the public epoch information pinfoe with the
sk. We sign pinfoe to ensure that veriﬁcation only works for
parties who know it, which aims at increasing the deniability.
Our veriﬁcation algorithm (Algorithm 5) checks whether
the signature is not yet expired and whether it was valid in
the epoch in which it was generated. If and only if both of
these requirements are fulﬁlled, the signature is accepted. The
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
1688
,
,
:= sk
:= sk
enew := e + 1; eexp := e − V
sleep until(t0 + enew · ∆t)
rnew := sk r[enew]; rexp := sk r[eexp]
sk(cid:48)
sk(cid:48)
Algorithm 3: Σ.evolve. The green operations are only
part of the simpliﬁed version, the orange ones only of
the space-efﬁcient complete one.
1 fun Σ.evolve (sk ):
2s
2c
3
4
5
6s
7s
6c
7c
pk , sk r, (cid:98)sk , e,
pk , (sk r,new, sk r,exp), ((cid:100)SK new,(cid:100)SK exp), e,
(cid:99)pk , t0, ∆t, E , V := pk
(cid:98)sk new := (cid:98)sk [enew]; (cid:98)sk exp := (cid:98)sk [eexp]
(cid:16)(cid:100)SK new
(cid:17)
new, (cid:98)sk new, := Pebble
(cid:16)(cid:100)SK exp
(cid:17)
exp, (cid:98)sk exp, := Pebble
rpk := H(rnew,(cid:99)pk||enew||1)
(cid:1)
pk new, sk new := Σ.gen(cid:0)1λ; rpk
rtl := H(rnew,(cid:99)pk||enew||2)
(cid:16)
(cid:17)
1λ, V · ∆t, rnew||(cid:98)sk new; rtl
(cid:16)(cid:98)sk , pk||enew||rexp||(cid:98)sk exp||tl
(cid:98)sk
,(cid:98)σ :=(cid:98)Σ.sign
pinfoenew := (pk new, enew, rexp, (cid:98)sk exp, tl,(cid:98)σ)
sk(cid:48) := (sk r,(cid:99)pk , (cid:98)sk
new,(cid:100)SK
r,new, rnew := Pebble (skr,new)
r,exp, rexp := Pebble (skr,exp)
(cid:48)
8c (cid:100)SK
9c (cid:100)SK