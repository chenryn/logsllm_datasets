seg000:00118930 48 00 01 40    b       exit 
seg000:00118934 
seg000:00118934                loc_118934: # CODE XREF: check3+1ECj 
seg000:00118934 80 DE 00 00    lwz    %r6, dword_24B704 
seg000:00118938 38 81 00 38    addi   %r4, %sp, 0x50+var_18 
seg000:0011893C 38 60 00 0D    li     %r3, 0xD 
seg000:00118940 38 A0 00 00    li     %r5, 0 
seg000:00118944 48 00 BE 85    bl     .RBEREAD 
seg000:00118948 60 00 00 00    nop 
seg000:0011894C 54 60 04 3F    clrlwi. %r0, %r3, 16 
seg000:00118950 41 82 00 0C    beq     loc_11895C 
seg000:00118954 38 60 00 00    li      %r3, 0 
seg000:00118958 48 00 01 18    b       exit 
seg000:0011895C 
seg000:0011895C                loc_11895C: # CODE XREF: check3+214j 
seg000:0011895C A0 01 00 38    lhz     %r0, 0x50+var_18(%sp) 
seg000:00118960 28 00 07 CF    cmplwi %r0, 0xFC7 
seg000:00118964 41 82 00 0C    beq    loc_118970 
seg000:00118968 38 60 00 00    li     %r3, 0 
seg000:0011896C 48 00 01 04    b      exit 
seg000:00118970 
seg000:00118970                loc_118970: # CODE XREF: check3+228j 
seg000:00118970 28 1F 00 03    cmplwi %r31, 3 
seg000:00118974 40 82 00 F8    bne     error 
seg000:00118978 38 60 00 01    li      %r3, 1 
seg000:0011897C 48 00 00 F4    b       exit 
seg000:00118980 
seg000:00118980                loc_118980: # CODE XREF: check3+B8j 
seg000:00118980                               # check3+C4j 
seg000:00118980 80 DE 00 00    lwz     %r6, dword_24B704 
seg000:00118984 38 81 00 38    addi    %r4, %sp, 0x50+var_18 
seg000:00118988 3B E0 00 00    li      %r31, 0 
seg000:0011898C 38 60 00 04    li      %r3, 4 
seg000:00118990 38 A0 00 00    li      %r5, 0 
seg000:00118994 48 00 BE 35    bl      .RBEREAD 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
736 
逆向工程权威指南（下册） 
seg000:00118998 60 00 00 00    nop 
seg000:0011899C 54 60 04 3F    clrlwi. %r0, %r3, 16 
seg000:001189A0 41 82 00 0C    beq     loc_1189AC 
seg000:001189A4 38 60 00 00    li      %r3, 0 
seg000:001189A8 48 00 00 C8    b       exit 
seg000:001189AC 
seg000:001189AC                loc_1189AC: # CODE XREF: check3+264j 
seg000:001189AC A0 01 00 38    lhz     %r0, 0x50+var_18(%sp) 
seg000:001189B0 28 00 1D 6A    cmplwi %r0, 0xAED0 
seg000:001189B4 40 82 00 0C    bne     loc_1189C0 
seg000:001189B8 3B E0 00 01    li      %r31, 1 
seg000:001189BC 48 00 00 14    b       loc_1189D0 
seg000:001189C0  
seg000:001189C0                loc_1189C0: # CODE XREF: check3+278j 
seg000:001189C0 28 00 18 28    cmplwi %r0, 0x2818 
seg000:001189C4 41 82 00 0C    beq     loc_1189D0 
seg000:001189C8 38 60 00 00    li      %r3, 0 
seg000:001189CC 48 00 00 A4    b       exit 
seg000:001189D0  
seg000:001189D0                loc_1189D0: # CODE XREF: check3+280j 
seg000:001189D0                               # check3+288j 
seg000:001189D0 57 A0 06 3E    clrlwi %r0, %r29, 24 
seg000:001189D4 28 00 00 02    cmplwi %r0, 2 
seg000:001189D8 40 82 00 20    bne     loc_1189F8 
seg000:001189DC 57 E0 06 3F    clrlwi. %r0, %r31, 24 
seg000:001189E0 41 82 00 10    beq     good2 
seg000:001189E4 48 00 4C 69    bl      sub_11D64C 
seg000:001189E8 60 00 00 00    nop 
seg000:001189EC 48 00 00 84    b       exit 
seg000:001189F0 
seg000:001189F0                good2:      # CODE XREF: check3+2A4j 
seg000:001189F0 38 60 00 01    li     %r3, 1 
seg000:001189F4 48 00 00 7C    b       exit 
seg000:001189F8  
seg000:001189F8                loc_1189F8: # CODE XREF: check3+29Cj 
seg000:001189F8 80 DE 00 00    lwz    %r6, dword_24B704 
seg000:001189FC 38 81 00 38    addi   %r4, %sp, 0x50+var_18 
seg000:00118A00 38 60 00 05    li     %r3, 5 
seg000:00118A04 38 A0 00 00    li     %r5, 0 
seg000:00118A08 48 00 BD C1    bl     .RBEREAD 
seg000:00118A0C 60 00 00 00    nop 
seg000:00118A10 54 60 04 3F    clrlwi. %r0, %r3, 16 
seg000:00118A14 41 82 00 0C    beq     loc_118A20 
seg000:00118A18 38 60 00 00    li      %r3, 0 
seg000:00118A1C 48 00 00 54    b       exit 
seg000:00118A20 
seg000:00118A20                loc_118A20: # CODE XREF: check3+2D8j 
seg000:00118A20 A0 01 00 38    lhz     %r0, 0x50+var_18(%sp) 
seg000:00118A24 28 00 11 D3    cmplwi %r0, 0xD300 
seg000:00118A28 40 82 00 0C    bne    loc_118A34 
seg000:00118A2C 3B E0 00 01    li     %r31, 1 
seg000:00118A30 48 00 00 14    b      good1 
seg000:00118A34 
seg000:00118A34                loc_118A34: # CODE XREF: check3+2ECj 
seg000:00118A34 28 00 1A EB    cmplwi %r0, 0xEBA1 
seg000:00118A38 41 82 00 0C    beq    good1 
seg000:00118A3C 38 60 00 00    li     %r3, 0 
seg000:00118A40 48 00 00 30    b      exit 
seg000:00118A44 
seg000:00118A44                good1:      # CODE XREF: check3+2F4j 
seg000:00118A44                             # check3+2FCj 
seg000:00118A44 57 A0 06 3E    clrlwi %r0, %r29, 24 
seg000:00118A48 28 00 00 03    cmplwi %r0, 3 
seg000:00118A4C 40 82 00 20    bne    error 
seg000:00118A50 57 E0 06 3F    clrlwi. %r0, %r31, 24 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
737 
seg000:00118A54 41 82 00 10    beq     good 
seg000:00118A58 48 00 4B F5    bl      sub_11D64C 
seg000:00118A5C 60 00 00 00    nop 
seg000:00118A60 48 00 00 10    b      exit 
seg000:00118A64  
seg000:00118A64                good:       # CODE XREF: check3+318j 
seg000:00118A64 38 60 00 01    li     %r3, 1 
seg000:00118A68 48 00 00 08    b      exit 
seg000:00118A6C  
seg000:00118A6C                error:      # CODE XREF: check3+19Cj 
seg000:00118A6C                             # check3+238j ... 
seg000:00118A6C 38 60 00 00    li     %r3, 0 
seg000:00118A70 
seg000:00118A70                exit:       # CODE XREF: check3+44j 
seg000:00118A70                             # check3+58j ... 
seg000:00118A70 80 01 00 58    lwz    %r0, 0x50+arg_8(%sp) 
seg000:00118A74 38 21 00 50    addi   %sp, %sp, 0x50 
seg000:00118A78 83 E1 FF FC    lwz    %r31, var_4(%sp) 
seg000:00118A7C 7C 08 03 A6    mtlr   %r0 
seg000:00118A80 83 C1 FF F8    lwz    %r30, var_8(%sp) 
seg000:00118A84 83 A1 FF F4    lwz    %r29, var_C(%sp) 
seg000:00118A88 4E 80 00 20    blr 
seg000:00118A88                # End of function check3 
此函数多次调用了.RBEREAD()函数。在调用后面的这个函数之后，check3()函数又大量使用 CMPLWI
指令将返回值与特定的固定值进行比较。由此可见.RBEREAD()函数大体是从加密狗读取数据的函数。 
另外，在调用.RBEREAD()函数之前，r3 寄存器的取值不外乎 0、1、8、0xA、0xB、0xC、0xD、4 和
5。这很可能是内存地址一类的信息。 
如果使用 google 引擎搜索这些函数名，google 的查询结果多数就是 Sentinel Eve 3 加密狗开发手册。 
其实，在不了解其他 PowerPC 指令的情况下，我们照样可以分析加密狗的有关操作。毕竟认证函数就
是这几个，而且“认证成功”的返回值肯定是 1，“认证失败”的返回值又肯定是 0。 
综合上述分析，只要让 check1()函数的返回值固定为 1 或者其他某个非零值，即可破解软件狗认证。
但是因为我并不熟悉 PowerPC 的指令，所以我决定采取保守的修改方案：修改 check2()函数中 0x001186FC
处和 0x00118718 处的转移指令。 
我把 0x001186FC 的指令改为 0x48 和 0，即把 BEQ 指令替换为无条件转移指令 B。即使不参阅［IBM00］
的参考手册，我们也能在程序里找到 B 指令的 opcode。 
另外，我把 0x00118718 处修改为一个 0x60 和三个 0 字节，将有关指令改为 NOP 指令。当然，这也是
从原程序里找的 opcode。 
进行上述修改之后，在不插入加密狗的情况下，程序仍然可正常运行。 
总之，借助 IDA 和部分汇编知识，任何人都可以小规模地修改程序。 
78.2  例 2: SCO OpenServer  
本例研究的程序是 1997 年开发的面向 SCO OpenServer 的程序。因为年代过于久远，买家早就找不到
开发商了。 
这款软件的加密狗驱动程序是定制程序。这个驱动程序里有“Copyright 1989, Rainbow Technologies, Inc., 
Irvine, CA”和“Sentinel Integrated Driver Ver. 3.0”的字样。 
在 SCO OpenServer 上安装驱动程序之后，硬件加密狗将会加载到文件系统的/dev 目录里： 
/dev/rbsl8 
/dev/rbsl9 
/dev/rbsl10 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
738 
逆向工程权威指南（下册） 
如果不插入加密狗，程序将会报错。而且错误信息不在可执行程序里。 
好在 IDA 可以加载 SCO OpenServer 的 COFF 程序。 
在 IDA 里搜索“rbsl”，然后找到了下述指令： 
.text:00022AB8         public SSQC 
.text:00022AB8 SSQC   proc near ; CODE XREF: SSQ+7p 
.text:00022AB8 
.text:00022AB8 var_44 = byte ptr -44h 
.text:00022AB8 var_29 = byte ptr -29h 
.text:00022AB8 arg_0  = dword ptr  8 
.text:00022AB8 
.text:00022AB8     
push     ebp 
.text:00022AB9     
mov      ebp, esp 
.text:00022ABB     
sub      esp, 44h 
.text:00022ABE     
push     edi 
.text:00022ABF     
mov      edi, offset unk_4035D0 
.text:00022AC4     
push     esi 
.text:00022AC5     
mov      esi, [ebp+arg_0] 
.text:00022AC8     
push     ebx 
.text:00022AC9     
push     esi 
.text:00022ACA     
call     strlen 
.text:00022ACF     
add      esp, 4 
.text:00022AD2     
cmp      eax, 2 
.text:00022AD7     
jnz      loc_22BA4 
.text:00022ADD     
inc      esi 
.text:00022ADE     
mov      al, [esi-1] 
.text:00022AE1     
movsx    eax, al 
.text:00022AE4     
cmp      eax, '3' 
.text:00022AE9     
jz        loc_22B84 
.text:00022AEF     
cmp      eax, '4' 
.text:00022AF4     
jz        loc_22B94 
.text:00022AFA     
cmp      eax, '5' 
.text:00022AFF     
jnz      short loc_22B6B 
.text:00022B01     
movsx    ebx, byte ptr [esi] 
.text:00022B04     
sub      ebx, '0' 
.text:00022B07     
mov      eax, 7 
.text:00022B0C     
add      eax, ebx 
.text:00022B0E     
push     eax 
.text:00022B0F     
lea      eax, [ebp+var_44] 
.text:00022B12     
push     offset aDevSlD ; "/dev/sl%d"  
.text:00022B17     
push     eax 
.text:00022B18     
call     nl_sprintf 
.text:00022B1D     
push     0                ; int 
.text:00022B1F     
push    offset aDevRbsl8 ; char * 
.text:00022B24     
call    _access 
.text:00022B29     
add     esp, 14h 
.text:00022B2C     
cmp     eax, 0FFFFFFFFh 
.text:00022B31     
jz      short loc_22B48 
.text:00022B33     
lea     eax, [ebx+7] 
.text:00022B36     
push    eax 
.text:00022B37     
lea     eax, [ebp+var_44] 
.text:00022B3A     
push    offset aDevRbslD ; "/dev/rbsl%d"  
.text:00022B3F     
push    eax 
.text:00022B40     
call    nl_sprintf 
.text:00022B45     
add     esp, 0Ch 
.text:00022B48 
.text:00022B48 loc_22B48: ; CODE XREF: SSQC+79j 
.text:00022B48     
mov     edx, [edi] 
.text:00022B4A     
test    edx, edx 
.text:00022B4C     
jle     short loc_22b57 
.text:00022B4E     
push    edx               ; int 
.text:00022B4F     
call    _close 
.text:00022B54     
add     esp, 4 
.text:00022B57 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
739 
.text:00022B57 loc_22B57: ; CODE XREF: SSQC+94j  
.text:00022B57       
push    2                  ; int  
.text:00022B59     
lea     eax, [ebp+var_44] 
.text:00022B5C     
push    eax               ; char * 
.text:00022B5D     
call    _open 
.text:00022B62     
add     esp, 8 
.text:00022B65     
test    eax, eax 
.text:00022B67     
mov     [edi], eax 
.text:00022B69     
jge     short loc_22B78 
.text:00022B6B 
.text:00022B6B loc_22B6B: ; CODE XREF: SSQC+47j 
.text:00022B6B     
mov     eax, 0FFFFFFFFh 
.text:00022B70     
pop     ebx 
.text:00022B71     
pop     esi 
.text:00022B72     
pop     edi 
.text:00022B73     
mov     esp,ebp 
.text:00022B75     
pop     ebp 
.text:00022B76     
retn 
.text:00022B78 
.text:00022B78 loc_22B78: ; CODE XREF: SSQC+B1j 
.text:00022B78     
pop     ebx 
.text:00022B79     
pop     esi 
.text:00022B7A     
pop     edi 
.text:00022B7B     
xor     eax, eax 
.text:00022B7D     
mov     esp, ebp 
.text:00022B7F     