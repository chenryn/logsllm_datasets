SetEnumName
set_enum_name(enum_id, name);
SetEnumWidth
return set_enum_width(enum_id, width);
SetExceptionFlags
excvec_t  *ev = retrieve_exceptions();
for (excvec_t::iterator i = ev->begin(); i != ev->end(); i++)
   if ((* i).code == code)
      if (( * i).flags == flags)
         return true;
      else
         (* i).flags = flags;
         return store_exceptions();
return 0; 
SetFchunkAttr
func_t  * f = get_func(ea);
internal_set_attr(f, attr, value);
update_func(f); 
SetFchunkOwner
set_tail_owner(get_func(tailea), funcea);
SetFixup
fixup_data_t f = {type, targetsel, targetoff, displ};
set_fixup(ea, &f); 
SetFlags
setFlags(ea, flags);
SetFunctionAttr
func_t  * f = get_func(ea);
internal_set_attr(f, attr, value); 
SetFunctionCmt
set_func_cmt (get_func(ea), cmt, repeatable);
SetFunctionEnd
func_setend(ea, end);
SetFunctionFlags
//macro, see SetFunctionAttr
SetHashLong
netnode n(id).hashset(idx, value);
SetHashString
netnode n(id).hashset(idx, value);
SetHiddenArea
hidden_area_t *ha = get_hidden_area (ea);
ha->visible = visible;
update_hidden_area(ha); 
SetInputFilePath
if (strlen(path) == 0) RootNode.set("");
else RootNode.set(path); 
SetLineNumber
set_source_linnum(ea, lnnum);
SetLocalType
if (input == NULL ||  *input == 0)
   del_numbered_type(idati, ordinal);
else
   qstring name;
   qtype type, fields;
   parse_decl(idati, input, &name, &type, &fields, flags);
   if (ordinal == 0)
      if (!name.empty())
          get_named_type(idati, name.c_str(),
                       NTF_TYPE | NTF_NOBASE, NULL, NULL,
                       NULL, NULL, NULL, &ordinal);
         if (!ordinal)
            ordinal = alloc_type_ordinal(idati);
   set_numbered_type(idati, value, 0, name.c_str(),
                     type.c_str(), fields.c_str(),
                 NULL, NULL, NULL); 
SetLongPrm
if (offset >= 13 && offset 
SetManualInsn
set_manual_insn(ea, insn);
SetMemberComment
member_t  *m = get_member(get_struc(ea), member_offset);
set_member_cmt(m, comment, repeatable); 
SetMemberName
set_member_name(get_struc(ea), member_offset, name);
SetMemberType
 typeinfo_t  mt;
//calls an internal function to initialize mt using typeid
int size = get_data_elsize(-1, flag, &mt) * nitems;
set_member_type(get_struc(id), member_offset, flag, &mt,size); 
SetProcessorType
set_processor_type(processor, level);
SetReg
//macro for SetRegEx(ea, reg, value, SR_user);
SetRegEx
splitSRarea1(ea, str2reg(reg), value, tag, false);
SetRegValue
 regval_t  r;
if (is_reg_integer(name))
   r.ival = (unsigned int)VarLong(value);
else
   memcpy(r.fval, VarFloat(value), 12);
set_reg_val(name, &r); 
SetRemoteDebugger
set_remote_debugger(hostname, password, portnum);
SetSegAddressing
set_segm_addressing(get_seg(ea), use32);
SetSegBounds
 if  (get_seg(ea))
   set_segm_end(ea, endea, flags);
set_segm_end(ea, startea, flags); 
SetSegClass
set_segm_class(get_seg(ea), class);
SetSegDefReg
SetDefaultRegisterValue(get_seg(ea), str2reg(reg), value);
SetSegmentAttr
segment_t * s = get_seg(segea);
internal_set_attr(s, attr, value);
s->update(); 
SetSegmentType
//macro, see SetSegmentAttr
SetSelector
set_selector(sel, value);
SetShortPrm
if (offset >= 13 && offset 
SetSpDiff
add_user_stkpnt(ea, delta);
SetStatus
setStat(status);
SetStrucComment
set_struc_cmt(id, cmt, repeatable);
SetStrucIdx
set_struc_idx(get_struc(id), index);
SetStrucName
set_struc_name(id, name);
SetTargetAssembler
set_target_assembler(asmidx);
SetType
 apply_cdecl(ea, type)
if (get_aflags(ea) & AFL_TILCMT)
   set_ti(ea, "", NULL); 
SetXML
set_xml(path, name, value);
Sleep
qsleep(milliseconds);
StartDebugger
start_process(path, args, sdir);
StepInto
step_into();
StepOver
step_over();