      push:
        branches:
          - main
    jobs:
      bump_version:
        if: "!startsWith(github.event.head_commit.message, 'bump:')"
        runs-on: ubuntu-latest
        name: "Bump version and create changelog"
        steps:
          - name: Check out
            uses: actions/checkout@v3
            with:
              fetch-depth: 0  # Fetch all history
          - name: Configure SSH
            run: |
                echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
                chmod 600 ~/.ssh/deploy_key
                dos2unix ~/.ssh/deploy_key
                ssh-agent -a $SSH_AUTH_SOCK > /dev/null
                ssh-add ~/.ssh/deploy_key
          - name: Bump the version
            run: cz bump --changelog --no-verify
          - name: Push changes
            run: |
              git remote add ssh PI:EMAIL:templates/ansible-role.git
              git pull ssh main
              git push ssh main
              git push ssh --tags
    ```
    It assumes that you have `cz` (commitizen) and `dos2unix` installed in your runner.
### Skip gitea actions job on changes of some files
#### Using `paths-filter` custom action
```
jobs:
  test:
    if: "!startsWith(github.event.head_commit.message, 'bump:')"
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the codebase
        uses: https://github.com/actions/checkout@v3
      - name: Check if we need to run the molecule tests
        uses: https://github.com/dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            molecule:
              - 'defaults/**'
              - 'tasks/**'
              - 'handlers/**'
              - 'tasks/**'
              - 'templates/**'
              - 'molecule/**'
              - 'requirements.yaml'
              - '.github/workflows/tests.yaml'
      - name: Run Molecule tests
        if: steps.filter.outputs.molecule == 'true'
        run: make molecule
```
You can find more examples on how to use `paths-filter` [here](https://github.com/dorny/paths-filter#examples ).
#### Using `paths-ignore` gitea actions built-in feature
Note: at least till 2023-09-04 this path lead to some errors such as pipeline not being triggered on the first commit of a pull request even if the files that should trigger it were modified.
There are some expensive CI pipelines that don't need to be run for example if you changed a line in the `README.md`, to skip a pipeline on changes of certain files you can use the `paths-ignore` directive:
```yaml
---
name: Ansible Testing
"on":
  push:
    paths-ignore:
      - 'meta/**'
      - Makefile
      - README.md
      - renovate.json
      - CHANGELOG.md
      - .cz.toml
      - '.gitea/workflows/**'
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
        ...
```
The only downside is that if you set this pipeline as required in the branch protection, the merge button will look yellow instead of green when the pipeline is skipped.
### [Run jobs if other jobs failed](https://github.com/go-gitea/gitea/issues/23725)
This is useful to send notifications if any of the jobs failed.
[Right now](https://github.com/go-gitea/gitea/issues/23725) you can't run a job if other jobs fail, all you can do is add a last step on each workflow to do the notification on failure:
```yaml
- name: Send mail
    if: failure()
    uses: https://github.com/dawidd6/action-send-mail@v3
    with:
        to: ${{ secrets.MAIL_TO }}
        from: Gitea 
        subject: ${{ gitea.repository }} ${{gitea.workflow}} ${{ job.status }}
        priority: high
        convert_markdown: true
        html_body: |
            ### Job ${{ job.status }}
            ${{ github.repository }}: [${{ github.ref }}@${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/actions)
```
## [Disable the regular login, use only Oauth](https://discourse.gitea.io/t/solved-removing-default-login-interface/2740/2)
Inside your [`custom` directory](https://docs.gitea.io/en-us/customizing-gitea/) which may be `/var/lib/gitea/custom`:
* Create the directories `templates/user/auth`, 
* Create the `signin_inner.tmpl` file with the next contents. If it fails check [the latest version of the file](https://raw.githubusercontent.com/go-gitea/gitea/main/templates/user/auth/signin_inner.tmpl) and tweak it accordingly:
  ```jinja2
  {{if or (not .LinkAccountMode) (and .LinkAccountMode .LinkAccountModeSignIn)}}
  {{template "base/alert" .}}
  {{end}}
          {{if .LinkAccountMode}}
                  {{ctx.Locale.Tr "auth.oauth_signin_title"}}
          {{else}}
                  {{ctx.Locale.Tr "auth.login_userpass"}}
          {{end}}
          {{if .OAuth2Providers}}
                                  {{range $provider := .OAuth2Providers}}
                                                  {{$provider.IconHTML 28}}
                                                  {{ctx.Locale.Tr "sign_in_with_provider" $provider.DisplayName}}
                                  {{end}}
          {{end}}
  ```
## [Configure it with terraform](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs)
Gitea can be configured through terraform too. There is an [official provider](https://gitea.com/gitea/terraform-provider-gitea/src/branch/main) that doesn't work, there's a [fork that does though](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs). Sadly it doesn't yet support configuring Oauth Authentication sources. Be careful [`gitea_oauth2_app`](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs/resources/oauth2_app) looks to be the right resource to do that, but instead it configures Gitea to be the Oauth provider, not a consumer.
To configure the provider you need to specify the url and a Gitea API token, keeping in mind that whoever gets access to this information will have access and full permissions on your Gitea instance it's critical that [you store this information well](terraform.md#sensitive-information). We'll use [`sops` to encrypt the token with GPG.](#sensitive-information-in-the-terraform-source-code).
First create a Gitea user under `Site Administration/User Accounts/` with the `terraform` name (use your Oauth2 provider if you have one!).
Then log in with that user and create a token with name `Terraform` under `Settings/Applications`, copy it to your clipboard.
Configure `sops` by defining the gpg keys in a `.sops.yaml` file at the top of your repository:
```yaml
---
creation_rules:
  - pgp: >-
      2829BASDFHWEGWG23WDSLKGL323534J35LKWERQS,
      2GEFDBW349YHEDOH2T0GE9RH0NEORIG342RFSLHH
```
Then create the secrets file with the command `sops secrets.enc.json` somewhere in your terraform repository. For example:
```json
{
  "gitea_token": "paste the token here"
}
```
```hcl
terraform {
  required_providers {
    gitea = {
      source  = "Lerentis/gitea"
      version = "~> 0.12.1"
    }
    sops = {
      source = "carlpett/sops"
      version = "~> 0.5"
    }
  }
}
provider "gitea" {
  base_url   = "https://gitea.your-domain.org"
  token = data.sops_file.secrets.data["gitea_token"]
}
```
### [Create an organization](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs/resources/team)
If you manage your users externally for example with an Oauth2 provider like [Authentik](authentik.md) you don't need to create a resource for the users, use a `data` instead:
```terraform
resource "gitea_org" "docker_compose" {
  name = "docker-compose"
}
resource "gitea_team" "docker_compose" {
  name         = "Developers"
  organisation = gitea_org.docker_compose.name
  permission   = "owner"
  members      = [
    data.gitea_user.lyz.username,
  ]
}
```
If you have many organizations that share the same users you can use variables.
```terraform
resource "gitea_org" "docker_compose" {
  name = "docker-compose"
}
resource "gitea_team" "docker_compose" {
  name         = "Developers"
  organisation = gitea_org.docker_compose.name
  permission   = "owner"
  members      = [
    data.gitea_user.lyz.username,
  ]
}
```
To import organisations and teams you need to use their `ID`. You can see the ID of the organisations in the Administration panel. To get the Teams ID you need to use the API. Go to https://your.gitea.com/api/swagger#/organization/orgListTeams and enter the organisation name.
## Create an admin user through the command line
```bash
gitea --config /etc/gitea/app.ini admin user create --admin --email email --username user_name --password password
```
Or you can change [the admin's password](https://discourse.gitea.io/t/how-to-change-gitea-admin-password-from-the-command-terminal-line/1930):
```bash
gitea --config /etc/gitea/app.ini admin user change-password -u username -p password
```
# [Gitea client command line tool](https://gitea.com/gitea/tea)
`tea` is a command line tool to interact with Gitea servers. It still lacks some features but is usable.
## [Installation](https://gitea.com/gitea/tea#installation)
- Download the precompiled binary from https://dl.gitea.com/tea/
- Until [#542](https://gitea.com/gitea/tea/issues/542) is fixed manually create a token with all the permissions
- Run `tea login add` to set your credentials.
# References
* [Home](https://gitea.io/en-us/)
* [Docs](https://docs.gitea.io/en-us/)
* [Terraform provider docs](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs)
* [Terraform provider source code](https://github.com/Lerentis/terraform-provider-gitea)