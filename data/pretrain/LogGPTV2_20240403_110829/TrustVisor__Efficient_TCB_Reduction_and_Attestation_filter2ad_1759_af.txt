15
6
4
64
-
Table 6: SSH server side overhead breakdown for each pro-
tected session. The standard deviation on all measurements
is negligible, except key generation at 97 and 107 for Flicker
and TrustVisor, respectively. Avg. of 100 runs.
the client user for their password, and Prompt-to-Shell to
be the time elapsed between password entry and the user
being presented with a shell on the remote system. Ta-
ble 5 compares these overheads between unmodiﬁed SSH,
Flicker-protected passwords, and TrustVisor-protected pass-
words. Table 6 presents the relative overheads caused by
Flicker and TrustVisor.
SSL-Enabled Web Server. Here we evaluate the overhead
induced by TrustVisor on a modiﬁed SSL-enabled Apache
web server. The goal of this application is to protect the
web server’s long-term private SSL signing key. We build the
web server from source using Apache v2.2.14 and OpenSSL
v0.9.8l after porting the security-sensitive portions to run in
two PALs. To create our PALs, we replaced some of the RSA
operations performed in OpenSSL with equivalent calls to
functions provided by the embedded cryptography library Po-
larSSL8 v0.12.1. We describe the porting process in more de-
tail in §6.4. The ﬁrst PAL runs when the Apache server starts
and tries to import the long-term private signing key. Instead
of reading the private key from a ﬁle, the ﬁrst PAL generates
the private key and encrypts it using the µTPM sealed storage
operations. The private key is sealed based on the expected
measurement of the second PAL, so that only our second PAL
will be able to unseal it. The second PAL’s responsibility is
to use this private key to sign the appropriate SSL handshake
messages. Thus, the second PAL runs in response to incom-
ing client connections during SSL session establishment.
We run the Apache web server in two modes: single pro-
cess mode, and prefork mode. In prefork mode, the server
creates multiple child processes (not threads) in advance and
assigns incoming client connections to different idle pro-
cesses. In our implementation, the web server needs to reg-
ister the second PAL after it preforks child processes so that
8http://polarssl.org/
Table 7: SSL-based web server performance. Results rep-
resent the average number of transactions per second of 10
trials with negligible variance. The Apache Benchmark (ab)
issues 10,000 transactions per trial with the speciﬁed num-
ber of concurrent transactions to the server. In each transac-
tion, a 74-byte index page is transferred from the server to the
Apache Benchmark client after an SSL connection is estab-
lished. RSA keys are 1024 bits long.
each child process can have its own instance of the second
PAL, i.e., each child process registers its own PAL. We then
evaluate the performance of our modiﬁed Apache web server
using the Apache Benchmark (ab) included in the Apache dis-
tribution to perform HTTPS transactions with varying levels
of transaction concurrency.
Table 7 shows our experimental results. We compare our
web server (denoted Full) with a web server without any
PALs registered and running on the same OS on bare metal
without TrustVisor (Vanilla), and also a web server without
any PALs registered but running on the same OS on top of
TrustVisor (TV).
6.4 Porting Effort
We designed TrustVisor’s registration mechanisms to be min-
imally invasive when porting existing applications to take ad-
vantage of the security properties afforded to PALs. How-
ever, we have not implemented a privilege-separation or
modularity-analysis mechanism. The relative challenge as-
sociated with porting an application to include one or more
PALs is closely related to the level of privilege separation and
modularity existing in the application’s architecture.
Separated Programs. Porting security-sensitive application
modules to TrustVisor is straightforward if the program is al-
ready privilege-separated and modular. Ordinary code will
execute as a PAL, provided that it does not make system calls
to the legacy OS. For workloads such as scientiﬁc computa-
tion or cryptography, this requirement is readily met.
Legacy Programs. Programs that were written without at-
tention to privilege separation or modularity can be challeng-
ing to port to include meaningful PALs. We faced the greatest
porting challenge with Apache + OpenSSL. Our original in-
tention was to identify the modules in OpenSSL that manipu-
late the web server’s private SSL key and register them as one
or more PALs. This proved to be difﬁcult due to OpenSSL’s
extensive use of function pointers and adaptability to differ-
ent cryptographic providers, e.g., smart cards. We resorted to
replacing the relevant RSA calls with calls to the embedded
cryptography library PolarSSL.
7 Discussion
We now discuss additional issues, including opportunities for
formal veriﬁcation of our system and additional applications
that may beneﬁt from its security properties.
7.1 Formal Veriﬁcation
Datta et al. [10] show that support for DRTM is a viable
means for building a system with code and execution in-
tegrity, and data secrecy and integrity protection. A hardware
DRTM mechanism is the ultimate root of trust for TrustVi-
sor. We then apply these same principles to another layer,
and build a DRTM interface (including the µTPM) on Trust-
Visor for PALs. We plan to build on the results of Datta et al.
to prove the security properties of the TrustVisor design [10].
We also plan to verify the TrustVisor implementation using
software model checking methods [9].
7.2 Applications of Externally Veriﬁable Execution
Many applications requiring protection of a secret or private
key will beneﬁt from the reduced TCB of operating on that
key exclusively within a PAL protected by TrustVisor. Ex-
amples of such applications include hard drive encryption,
certiﬁcate authorities, SSH host or authentication keys, and
private PGP / email signing and decryption keys. With Trust-
Visor protecting the sensitive code region(s), even if the un-
trusted portion of the application is under the control of an at-
tacker, the worst-case malicious act will be invoking the PAL
to sign or decrypt selected messages. The actual value of the
private key will remain secret. Thus, the worst that could
happen is that a PAL may become an encryption or signing
oracle. Even if this attack is successful, it may be possible
to avoid the need to revoke the affected key, which is signif-
icant given the challenges that have long plagued certiﬁcate
revocation in practice.
Many enterprises today limit costs by building their sys-
tems from off-the-shelf software components over which they
have little control. Economic pressures make it infeasible for
enterprises to devote signiﬁcant resources to re-engineering
these components, as they will be at a competitive disadvan-
tage. With TrustVisor, enterprises can develop small software
modules that run as PALs and serve as inline reference mon-
itors [13] or wrappers around third-party software.
7.3 Optimizations / Future Work
We have already identiﬁed several optimizations that are not
implemented in our prototype but that will further reduce the
overhead imposed by TrustVisor or increase its applicabil-
ity. The ﬁrst is multi-processor support, and the second is
support for recursive virtualizability,9 so that TrustVisor does
not monopolize the use of hardware virtualization features.
Finally, there is no need for TrustVisor to run at all in the
absence of registered PALs. TrustVisor should have support
for unloading itself while it is not needed, and re-launching
9VirtualBox (http://virtualbox.org) and Blue Pill (http://
bluepillproject.org/) support this today.
underneath an OS on-demand. Intel’s P-MAPS serves as a
proof-of-concept that this is readily achieved [26].
Additional features that may be valuable for PAL develop-
ment include timeouts and monotonic counters. A timeout is
useful to terminate a PAL that has entered an inﬁnite loop.
The TPM does include limited monotonic counter support,
but per-PAL counters may simplify replay-attack defenses for
µTPM-based sealed storage.
8 Related Work
We focus on work that attempts to perform secure computa-
tion on a host despite the presence of malware.
Intel has recently announced a Processor-Measured Appli-
cation Protection Service called P-MAPS [26]. P-MAPS po-
tentially offers the following features: (1) Isolation of the ap-
plication’s runtime memory from other software on the plat-
form, (2) Encapsulation of the application data memory such
that only code in the measured application pages can access
the data, and (3) Prevention of circumvention of any func-
tion entry-points exposed in the application code. P-MAPS
is claimed to be 2500x smaller than a commodity OS, though
code size numbers are not offered. The P-MAPS hypervi-
sor is claimed to launch underneath a running guest OS in
300 ms. This system is similar to TrustVisor at a high-level;
however, insufﬁcient detail is available to conduct a careful
comparison.
Singaravelu et al. extract the security-sensitive portions of
three applications into AppCores and execute them on the
Nizza microkernel architecture [30]. While compelling, the
trusted kernel contained on the order of 100,000 lines of
code, which is an order of magnitude larger than TrustVisor.
A more recent result is seL4, a formally veriﬁed microker-
nel [20]. While this work represents a signiﬁcant step for-
ward, it remains unclear whether it is appropriate for use in
conjunction with a legacy OS.
Software-based fault isolation [21, 31, 34] and control ﬂow
integrity [1] are mechanisms that insert inline reference mon-
itors. Unfortunately, all of these systems ultimately depend
on the security of the underlying OS remaining intact, and
cannot tolerate a compromise of the system at this low level.
In our system, only TrustVisor is trusted to this extent.
Xen supports virtual TPMs for VMs [4]. Each vTPM in-
stance includes all of Xen, a domain 0 OS, and a software
TPM emulator that implements the full suite of TPM func-
tions in its TCB. Though vTPM exposes more features than
our µTPM, its security properties are difﬁcult to verify today.
In comparison, the TCB for TrustVisor is orders of magnitude
smaller, since we use a minimal hypervisor, a reduced µTPM
interface, and do not include any other code in the TCB.
TrustVisor facilitates attestation of externally veriﬁable ap-
plication properties in the presence of malware. Other re-
searchers have considered systems for remote attestation [3,
14, 28], but these systems all depend on an unbroken chain
of measurement and trust, starting from boot.
In practice,
these measurement chains become so long and contain so
much code that one cannot make any statements regarding
security properties. Researchers have also shown that the
Trusted Computing Group’s Static Root of Trust for Measure-
ment [19, 25] can be readily compromised.
Researchers have developed systems to reduce the requisite
level of trust in OSes (e.g., CHAOS [7], Overshadow [8], and
others [11, 35]). However, the protection granularity in these
systems is too coarse to provide strong security properties,
because the entire application is in the TCB, as is a hypervi-
sor that is larger than TrustVisor. sHype is an extension to
the Xen VMM to enforce coarse-grained Mandatory Access
Control policies between VMs [27], but it still includes the
full Xen hypervisor in the TCB.
Seshadri et al. develop SecVisor, a small hypervisor that
protects kernel code integrity [29]. However, SecVisor cannot
protect against many classes of existing vulnerabilities in the
protected kernel. TrustVisor is also a small hypervisor, but
it sandboxes the legacy OS and provides a trusted environ-
ment in which to execute PALs in isolation from the legacy
OS and its applications, thereby attaining a much smaller
TCB for sensitive code. The protections offered by SecVisor
could also be implemented using TrustVisor as the hypervi-
sor, thereby providing defense-in-depth.
9 Conclusion
TrustVisor is a small hypervisor that enables isolated execu-
tion of Pieces of Application Logic (PAL) with a TCB con-
taining only the TrustVisor runtime and the PAL itself. This
system enforces code and execution integrity, and data se-
crecy and integrity for PALs. TrustVisor enables ﬁne-grained
attestations to the PAL’s execution. TrustVisor supports un-
modiﬁed legacy OSes and their applications, so that only
new applications developed with enhanced security proper-
ties require any awareness of TrustVisor. The signiﬁcant se-
curity beneﬁts of TrustVisor outweigh the performance costs,
which will mostly vanish with improved hardware virtualiza-
tion support. Given TrustVisor’s features, we anticipate that
it can signiﬁcantly enhance the security of current computing
systems and applications.
References
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. CFI: Principles, im-
plementations, and applications. In Proc. ACM Conference and Com-
puter and Communications Security (CCS), 2005.
[2] Advanced Micro Devices. AMD64 architecture programmer’s manual:
Volume 2: System programming. AMD Publication no. 24593 rev.
3.14, Sept. 2007.
[3] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A reliable bootstrap
architecture. In Proc. IEEE Symposium on Research in Security and
Privacy (S&P), 1997.
[4] S. Berger, R. C´aceres, K. A. Goldman, R. Perez, R. Sailer, and L. van
In Proc.
Doorn. vTPM: Virtualizing the trusted platform module.
USENIX Security, 2006.
[5] R. Bhargava, B. Serebrin, F. Spadini, and S. Manne. Accelerating
two-dimensional page walks for virtualized systems. In Proc. Archi-
tectural Support for Programming Languages and Operating Systems
(ASPLOS), Mar. 2008.
[6] D. Brumley and D. Song. Privtrans: Automatically partitioning pro-
grams for privilege separation. In Proc. USENIX Security, 2004.
[7] H. Chen, F. Zhang, C. Chen, Z. Yang, R. Chen, B. Zang, P. Yew, and
W. Mao. Tamper-resistant execution in an untrusted operating system
using a VMM. Technical Report FDUPPITR-2007-0801, Fudan Uni-
versity, 2007.
[8] X. Chen, T. Garﬁnkel, E. C. Lewis, P. Subrahmanyam, C. A. Wald-
spurger, D. Boneh, J. Dwoskin, and D. R. Ports. Overshadow: a
virtualization-based approach to retroﬁtting protection in commodity
operating systems. In ASPLOS, 2008.
[9] E. Clarke, D. Kroening, and F. Lerda. A tool for checking ANSI-C
In Proc. Tools and Algorithms for the Construction and
programs.
Analysis of Systems (TACAS), 2004.
[10] A. Datta, J. Franklin, D. Garg, and D. Kaynar. A logic of secure sys-
tems and its application to trusted computing. In IEEE S&P, 2009.
[11] P. Dewan, D. Durham, H. Khosravi, M. Long, and G. Nagabhushan. A
hypervisor-based system for protecting software runtime memory and
persistent storage. In Proc. Spring Simulation Multiconference, 2008.
[12] D. Dolev and A. C. Yao. On the security of public key protocols. IEEE
Transactions on Information Theory, 29(2):198–208, 1983.
[13] U. Erlingsson and F. B. Schneider.
IRM enforcement of Java stack
inspection. In IEEE S&P, 2000.
[14] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A
virtual machine-based platform for trusted computing. In Proc. ACM
Symposium on Operating System Principles (SOSP), 2003.
[15] D. Grawrock. The Intel Safer Computing Initiative: Building Blocks
for Trusted Computing. Intel Press, 2006.
[16] Intel Corporation. Intel trusted execution technology – software devel-
opment guide. Document number 315168-005, June 2008.
[17] J. Katcher. Postmark: A new ﬁle system benchmark. Technical Report
TR-3022, NetApp, 1997.
[18] J. Katz and Y. Lindell. Introduction to Modern Cryptography. Chap-
man and Hall, 2008.
[19] B. Kauer. OSLO: Improving the security of Trusted Computing. In
Proc. USENIX Security, 2007.
[20] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Der-
rin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell,
H. Tuch, and S. Winwood. seL4: formal veriﬁcation of an OS kernel.
In ACM SOSP, 2009.
[21] S. McCamant and G. Morrisett. Evaluating sﬁ for a cisc architecture.
In Proc. USENIX Security, 2006.
[22] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki.
Flicker: An execution infrastructure for TCB minimization. In Proc.
ACM European Conference in Computer Systems (EuroSys), 2008.
[23] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and A. Seshadri. How
low can you go? Recommendations for hardware-supported minimal
TCB code execution. In ASPLOS, 2008.
[24] S. C. Misra and V. C. Bhavsar. Relationships between selected soft-
ware measures and latent bug-density. In Proc. Conference on Compu-
tational Science and Its Applications, Jan. 2003.
[25] A. Sadeghi, M. Selhorst, C. St¨uble, C. Wachsmann, and M. Winandy.
TCG inside? A note on TPM speciﬁcation compliance. In Proc. Scal-
able Trusted Computing Workshop, 2006.
[26] R. Sahita, U. Warrier, and P. Dewan. Dynamic software application
protection. Intel Corporation, Apr. 2009.
[27] R. Sailer, E. Valdez, T. Jaeger, R. Perez, L. van Doorn, J. L. Grifﬁn, and
S. Berger. sHype: Secure hypervisor approach to trusted virtualized
systems. Technical Report RC23511, IBM Research, 2005.
[28] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and imple-
mentation of a TCG-based integrity measurement architecture. In Proc.
USENIX Security, Aug. 2004.
[29] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: A tiny hypervisor
to provide lifetime kernel code integrity for commodity OSes. In ACM
SOSP, 2007.
[30] L. Singaravelu, C. Pu, H. H¨artig, and C. Helmuth. Reducing TCB
complexity for security-sensitive applications. In EuroSys, 2006.
[31] C. Small and M. I. Seltzer. Misﬁt: Constructing safe extensible sys-
tems. IEEE Concurrency, 6(3):34–41, 1998.
[32] R. Ta-Min, L. Litty, and D. Lie. Splitting interfaces: Making trust be-
tween applications and operating systems conﬁgurable. In ACM SOSP,
2006.
[33] TCG. TPM main speciﬁcation. v1.2, rev. 103, 2007.
[34] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efﬁcient
software-based fault isolation. In ACM SOSP, 1993.
[35] J. Yang and K. Shin. Using hypervisor to provide data secrecy for user
applications on a per-page basis. In Proc. ACM Conference on Virtual
Execution Environments (VEE), 2008.