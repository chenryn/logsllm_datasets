\| a238530ac3144da7a8fe53513f772d8a \| glance \|
\| 66ffe372db7e4a62bbde5fe05941c777 \| ceilometer \|
\| 65aa88233e374a1da97137a7c47a5b91 \| cinder \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\--+
\[root@openstack \~(keystone_admin)\]# env \|grep OS
HOSTNAME=openstack
OS_REGION_NAME=RegionOne
OS_PASSWORD=a
OS_AUTH_URL=http://192.168.1.10:5000/v2.0
OS_USERNAME=admin
OS_TENANT_NAME=admin
\[root@openstack \~(keystone_admin)\]# openstack help
# \-\-\--CLOUD03\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# 云主机类型
![LINUXNSD_V01CLOUDDAY03_021](media/image46.png){width="5.760416666666667in"
height="2.8715277777777777in"}
![LINUXNSD_V01CLOUDDAY03_022](media/image47.png){width="5.760416666666667in"
height="4.320833333333334in"}![LINUXNSD_V01CLOUDDAY03_023](media/image48.png){width="5.760416666666667in"
height="4.320833333333334in"}
# 镜像管理![LINUXNSD_V01CLOUDDAY03_029](media/image49.png){width="5.760416666666667in" height="4.320833333333334in"}![LINUXNSD_V01CLOUDDAY03_028](media/image50.png){width="5.760416666666667in" height="4.320833333333334in"}
![LINUXNSD_V01CLOUDDAY03_031](media/image51.png){width="5.760416666666667in"
height="3.0993055555555555in"}![LINUXNSD_V01CLOUDDAY03_030](media/image52.png){width="5.760416666666667in"
height="4.320833333333334in"}
# 镜像应用
![LINUXNSD_V01CLOUDDAY03_033](media/image53.png){width="5.760416666666667in"
height="4.320833333333334in"}
# 网络管理
## 网络和路由
### openstack网络工作原理
![LINUXNSD_V01CLOUDDAY03_039](media/image54.png){width="5.760416666666667in"
height="3.46875in"}
### 网络类型
![LINUXNSD_V01CLOUDDAY03_040](media/image55.png){width="5.760416666666667in"
height="2.8340277777777776in"}
私有网络:由使用云服务主机的企业中的管理员配置
公有网络:由云服务厂商的管理员配置
使用网络类型为:flat
### 创建外部网络
![](media/image56.png){width="5.147916666666666in"
height="6.069444444444445in"}
修改应答文件时定义了相关参数,创建网络时创建相同的
![](media/image57.png){width="4.941666666666666in"
height="2.529861111111111in"}
### 创建内部网络
## 浮动IP地址
![LINUXNSD_V01CLOUDDAY03_049](media/image58.png){width="5.760416666666667in"
height="4.320833333333334in"}
## 查看添加路由
\[root@openstack \~\]# ip r s
default via 192.168.1.254 dev br-ex
192.168.1.0/24 dev br-ex proto kernel scope link src 192.168.1.10
192.168.4.0/24 dev eth1 proto kernel scope link src 192.168.4.10
添加路由
\[root@host-10-10-10-104 \~\]# route add default gw 192.168.1.254
## 添加浮动IP
![](media/image59.png){width="4.961111111111111in"
height="4.754166666666666in"}
# 安全管理
![LINUXNSD_V01CLOUDDAY03_055](media/image60.png){width="5.65625in"
height="2.7736111111111112in"}
![LINUXNSD_V01CLOUDDAY03_056](media/image61.png){width="5.628472222222222in"
height="2.547222222222222in"}
![](media/image62.png){width="5.7625in" height="3.7819444444444446in"}
# 创建云主机
![](media/image63.png){width="5.761111111111111in"
height="3.1527777777777777in"}
## 创建步骤
![](media/image64.png){width="5.7652777777777775in"
height="3.5694444444444446in"}
![](media/image65.png){width="5.767361111111111in"
height="3.5819444444444444in"}
![](media/image66.png){width="5.7652777777777775in"
height="4.163888888888889in"}
![](media/image67.png){width="5.7652777777777775in"
height="3.5881944444444445in"}
![](media/image68.png){width="5.760416666666667in"
height="1.5965277777777778in"}
![](media/image69.png){width="5.7625in" height="4.742361111111111in"}
![](media/image70.png){width="5.764583333333333in"
height="3.4618055555555554in"}
用户:root 密码:redhat 退出点击用浏览器的后退按钮
## 报错及解决办法
问题
![webwxgetmsgimg](media/image71.jpeg){width="5.759027777777778in"
height="2.8833333333333333in"}
\[root@openstack \~\]# openstack-nova-compute
\[root@openstack \~\]# systemctl -a \|grep nova
openstack-nova-api.service loaded active running OpenStack Nova API
Server
openstack-nova-cert.service loaded active runningOpenStack Nova Cert
Server
openstack-nova-compute.service loaded active running OpenStack Nova
Compute Server
openstack-nova-conductor.service loaded active running OpenStack Nova
Conductor Server
openstack-nova-consoleauth.service loaded active running OpenStack Nova
VNC console auth Server
openstack-nova-novncproxy.service loaded active running OpenStack Nova
NoVNC Proxy Server
openstack-nova-scheduler.service loaded active running OpenStack Nova
Scheduler Server
### 报1006的错
产生原因是因为:
\[root@openstack \~\]# vim /etc/resolv.conf
\# Generated by NetworkManager
#search tedu.cn #原因是:此行未删除或者为注释
nameserver 192.168.1.254
openstack主机与nova01主机上的/etc/resov.conff文件里面的第二行未注释或删除,
导致执行packstack
\--answer-file=answer.ini安装完之后,会将/etc/nova/nova.conf
配置文件的第8465行 vncserver_proxyclient_address=openstack修改成
8465 vncserver_proxyclient_address=openstack.tedu.cn
![409644675](media/image72.jpeg){width="5.7625in"
height="1.5645833333333334in"}
解决办法:
执行packstack
\--answer-file=answer.ini安装之前修改所有服务器的/etc/resolv.conf
\[root@openstack \~\]# vim /etc/resolv.conf
\# Generated by NetworkManager
#search tedu.cn #要么删除要么注释
nameserver 192.168.1.254
如果已经安装完毕,执行packstack \--answer-file=answer.ini安装之后
查看openstack服务机的/etc/nova/nova.conf
\[root@openstack \~\]# vim /etc/no
va/nova.conf
8465 vncserver_proxyclient_address=openstack.tedu.cn
> #将这个的参数添加到/etc/hosts文件中,域名解析
\[root@openstack \~\]# vim /etc/hosts
192.168.4.10 openstack.tedu.cn #添加此行解析
## 绑定浮动ip
![](media/image73.png){width="5.763888888888889in"
height="1.4229166666666666in"}
绑定完之后如下
![](media/image74.png){width="5.7625in" height="5.042361111111111in"}
绑定浮动ip后就能在真机上访问192.168.1.9(注意不是openstack主机)
能ping通,能ssh上,,此时模拟外网ip能访问云主机
\[root@room9pc01 \~\]# ping 192.168.1.9
\[root@room9pc01 \~\]# ssh 192.168.1.9
root@192.168.1.9\'s password: #密码:redhat
\[root@host-10-10-10-107 \~\]#
# 安装nova01
## 准备环境
\[root@openstack \~\]# yum -y install qemu-kvm libvirt-daemon
libvirt-client libvirt-daemon-driver-qemu python-setuptools
## 配置answer.ini(应答文件),
修改openstack的answer.ini配置文件(应答文件),
在98 102两行添加192.168.1.11的地址
\[root@openstack \~\]# vim answer.ini
98 CONFIG_COMPUTE_HOSTS=192.168.1.10,192.168.1.11
102 CONFIG_NETWORK_HOSTS=192.168.1.10,192.168.1.11
## 确保两边互通:
\[root@openstack \~\]# ping nova01
PING nova01 (192.168.1.11) 56(84) bytes of data.
64 bytes from nova01 (192.168.1.11): icmp_seq=1 ttl=255 time=1.15 ms
64 bytes from nova01 (192.168.1.11): icmp_seq=2 ttl=255 time=0.513 ms
## 在openstack上运行安装
openstack 直接远程了noval01安装
\[root@openstack \~\]# packstack \--answer-file=answer.ini
Welcome to the Packstack setup utility
The installation log file is available at:
/var/tmp/packstack/20190315-161618-SluVmD/openstack-setup.log
Installing:
Clean Up \[ DONE \]
Discovering ip protocol version \[ DONE \]
PI:EMAIL\'s password: #输入nova01的root密码:a
\...
Applying Puppet manifests \[ DONE \]
Finalizing \[ DONE \]
\*\*\*\* Installation completed successfully \*\*\*\*\*\*
## 处理Horizon BUG 
重新安装了 需要重新处理这个BUG
\[root@openstack \~\]# vim /etc/httpd/conf.d/15-horizon_vhost.conf
\...\...
WSGIDaemonProcess apache group=apache processes=3 threads=10 user=apache
WSGIProcessGroup apache
WSGIApplicationGroup %{GLOBAL}
WSGIScriptAlias /dashboard
\"/usr/share/openstack-dashboard/openstack_dashboard/wsgi/django.wsgi\"
\
\[root@openstack \~\]# apachectl graceful
## 登录并检查是否正常
![](media/image75.png){width="5.764583333333333in"
height="3.285416666666667in"}
# 迁移
## 迁移云主机
只能admin管理员迁移
![](media/image76.png){width="5.757638888888889in"
height="3.582638888888889in"}
# \-\-\-\-\-\--NSD CLOUD(云) DAY05\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# 容器概述
![LINUXNSD_V01CLOUDDAY05_005](media/image77.png){width="5.760416666666667in"
height="3.1465277777777776in"}
# Docker概述
![LINUXNSD_V01CLOUDDAY05_006](media/image78.png){width="5.760416666666667in"
height="2.095833333333333in"}
![LINUXNSD_V01CLOUDDAY05_008](media/image79.png){width="5.760416666666667in"
height="4.320833333333334in"}
# 镜像概述
![LINUXNSD_V01CLOUDDAY05_017](media/image80.png){width="5.760416666666667in"
height="4.320833333333334in"}
![LINUXNSD_V01CLOUDDAY05_018](media/image81.png){width="5.760416666666667in"
height="4.320833333333334in"}
![LINUXNSD_V01CLOUDDAY05_019](media/image82.png){width="5.760416666666667in"
height="3.042361111111111in"}
# 安装Docker
![LINUXNSD_V01CLOUDDAY05_013](media/image83.png){width="5.760416666666667in"
height="3.402083333333333in"}
# Docker目录分析
# Docker命令集
**镜像**
\]# docker pull busybox #下载busybox镜像
\]#docker push busybox #上传镜像
\]#docker images #查看镜像
\]#docker save busbox:lotest \>busybox.tar #导出镜像
\]#docker load \ #启动centos镜像，并创建容器 -it :进行交互式操作 --d：放后台
> --name重新起名
**容器**
\]# docker stop 0f #关闭容器，0f为容器ID \]# docker start 0f #启动容器
\]# docker restart 0f #重启容器 \]# docker rm 0f
#删除容器，删除前先关闭容器
\]# docker rm \`docker ps -qa\` #清空所有的容器 -q只显示ID
\]# docker attach 0f #连接容器 \]# docker exec -it 85 /bin/bash
#连接容器
\]# docker top 85
\]# docker inspect --f 64852f #查看容器详细信息,底层信息
\]# docker inspect --f \'{{.NetworkSettings.MacAddress}}\' 4f
#查看mac地址
\]# docker inspect --f \'{{.NetworkSettings.IPAddress}}\' 4f #查看ip地址
**自定义镜像：**
**docker commit
命令方式：**进行打包成新的镜像，提交一个具有新配置的容器成为镜像，后面跟容器的name
或者容器Id ，最后是生成新镜像的名字
**dockerfile + docker
build命令方式：**dockerfile包含创建镜像所需要的全部指令。基于在这些的指令，我们可
以使用Docker
build命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。
\]# docker build -t centos_sshd_1 . \# -t 选项来docker
build新的镜像以便于标记构建的镜像，. 表示当前目录，也可以指定dockerfile
文件所在目录。
**创建私有镜像仓库：**
\]# systemctl restart docker #重启docker
\]# docker run -d -p 5000:5000 registry #docker重启之后要重新运行
\]# docker tag busybox:latest 192.168.1.100:5000/busybox:latest
#制作镜像
\]# docker push 192.168.1.100:5000/busybox:latest #上传镜像
\]# docker run -it 192.168.1.100:5000/busybox:latest /bin/bash
#直接起订进行
# 案例
案例1：安装Docker
案例2：镜像基本操作
案例3：镜像与容器常用指令
## 1 案例1：安装Docker
1.1 问题
本案例要求配置yum源并安装Docker：
准备两台虚拟机，IP为192.168.1.10和192.168.1.20
安装docker-engine 和 docker-engine-selinux
关闭防火墙
1.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：配置yum源
1）配置第三方yum源（真机操作）
\[root@room9pc01 \~\]# mkdir /var/ftp/docker
\[root@room9pc01 \~\]# mv docker-engine-\* /var/ftp/docker
\[root@room9pc01 \~\]# ls /var/ftp/docker
docker-engine-1.12.1-1.el7.centos.x86_64.rpm
docker-engine-selinux-1.12.1-1.el7.centos.noarch.rpm
\[root@room9pc01 \~\]# createrepo /var/ftp/docker/
#创建repodata文件(软件清单),可做yum源
Spawning worker 0 with 1 pkgs
Spawning worker 1 with 1 pkgs
Spawning worker 2 with 0 pkgs
Spawning worker 3 with 0 pkgs
Spawning worker 4 with 0 pkgs
Spawning worker 5 with 0 pkgs
Workers Finished
Saving Primary metadata
Saving file lists metadata
Saving other metadata
Generating sqlite DBs
Sqlite DBs complete
2）配置IP（虚拟机配置静态ip）docker1和docker2主机同样操作
\[root@localhost \~\]# echo docker1 \> /etc/hostname
\[root@localhost \~\]# hostname docker1
\[root@localhost \~\]# echo docker2 \> /etc/hostname
\[root@localhost \~\]# hostname docker2
\[root@docker1 \~\]# vim /etc/sysconfig/network-scripts/ifcfg-eth0
\# Generated by dracut initrd
DEVICE=\"eth0\"
ONBOOT=\"yes\"
IPV6INIT=\"no\"