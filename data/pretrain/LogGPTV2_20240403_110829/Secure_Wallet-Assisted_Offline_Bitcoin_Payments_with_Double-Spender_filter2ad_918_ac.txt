reasonable δ values even for legitimate conﬁrmations, which
may impact usability.
To mitigate this side eﬀect of our over-approximation, we
suggest that it is safe for Y to relax δ parameter if transac-
tion amounts for oﬄine payments are limited in such a way
that transaction conﬁrmation spooﬁng attacks become un-
proﬁtable. In Section 5.2 we provide cost analysis for trans-
action conﬁrmation spooﬁng attacks and show that they are
suﬃciently high to allow for safe yet usable transaction lim-
its.
Distributed Wallet Revocation Bitcoin transactions can
carry out some limited amount of data (up to 80 bytes per
record). Inclusion of data renders the actual amount trans-
ferred by such a transaction unspendable, but the transac-
tion gets still integrated into the blockchain. We leverage
this feature in order to instantiate Bitcoin-based distributed
revocation manager. In particular, we represent revocation
requests in the form of a special transaction, which is sent by
a cheated payee Y to the special revocation address which
is publicly known and for which there is no corresponding
signing key. The revocation transaction contains the public
key of the accused wallet in the data ﬁeld, and, once it is
integrated into the blockchain, it serves as an entry in the
4This is because neither the network, nor an adversary could
produce correct n -Tl before such an address was generated.
BitcoinNetwork3.τl4.n-TlUserXWalletW5.τl,n-Tlverifyτlconﬁrmwithn-Tl1.blPlatformPXx,PKX,skX(PKW,skW)←genKeyPair()w←hash(PKW)2.wτl←genTrans(x,PKX,skX,bl,w)Bblif(verifyTConf(τl,n-Tl))Storeτl,n-Tl,tgtl,δnelsereject6.Statusbalance=balance+blbalancetgtl←getTarget(n-Tl)δn←getTimeWindow(n-Tl)524revocation list and can be downloaded by Bitcoin clients.
Revocation updates can be received by all the clients by
monitoring all the transactions sent to the revocation ad-
dress. Oﬄine clients receive these updates whenever they
go occasionally online, e.g., to redeem the oﬄine transac-
tion after the payment5.
4.3 Protocol Design
In the following we present protocol design for each phase of
our solution: (i) coin-preloading, (ii) oﬄine transaction, and
(iii) coin redemption and double-spending wallet revocation.
Notations In this section we use the following notations
and conventions. We denote an algorithm as out ← A(in),
where A is the name of the algorithm, in is the list of input
parameters and out is the list of output values, potentially a
boolean value. With σ ← sign(sk; m) we denote a signature
on message m under signing key sk which can be veriﬁed
by {true, false} ← verify(P K; m, σ). When checking for the
result of a function that outputs boolean values, we simply
write A(in) instead of A(in) ?= true for brevity.
4.3.1 Coin Preloading
In the coin-preloading protocol, shown in Fig. 2, the payer
X ﬁrst indicates the amount of bitcoins bl she would like
to preload into her wallet W (step 1). Next, PX requests
a new account w from the wallet (step 2), then creates the
pre-loading transaction τl transferring bl bitcoins from her
x account to w and commits it to the network (step 3).
As soon as τl is veriﬁed by the Bitcoin network and con-
ﬁrmation n -Tl is issued (step 4), X provides τl and n -Tl
to the wallet W (step 5), which in turn runs an algorithm
verifyTConf with the parameters τl and n -Tl to perform
time-based transaction conﬁrmation veriﬁcation (cf. Sec-
tion 4.2). If successful, W increases its balance by bl, ex-
tracts diﬃculty tgt from conﬁrmation blocks and estimates
δn using time stamps ti and ti+n (extracted from n -Tl).
It then stores values τl, n -Tl, tgt, δn for future use. When
done, it replies to PX with status (step 6), which notiﬁes the
user whether the transaction was accepted by the wallet.
4.3.2 Secure Ofﬂine Transaction
The secure oﬄine transaction protocol is shown in Fig. 3.
It is initiated by Y , who indicates to his platform PY the
demanded amount bo (step 1). Next, PY sends the public
key P KY to the platform PX which immediately forwards it
to W 6 (step 2). PX replies to PY with certT , the certiﬁcate
issued to the wallet environment by its manufacturer (step
3). PY validates certT and, if correct, runs Diﬃe-Hellman
key exchange protocol with W to establish a session key
K (step 4), which is then used to protect all the subsequent
messages7. The next message from PY to W transfers bo and
5Even disconnected platforms like vending machines can be
provided regular updates through mobile hotspots brought,
e.g., by a personnel supplying snacks.
6Any communication with W is mediated by PX , which we
do not show in the ﬁgure for brevity.
7Note that messages between the oﬄine wallet W and the
payee PY (including the oﬄine transaction) must be ex-
changed via a secure channel to prevent their malicious ma-
nipulation. This is diﬀerent for online Bitcoin payments
where transactions go through the decentralized Bitcoin
peer-to-peer network unencrypted, as the trust is put on
the validity of the blockchain.
payee’s reference values of veriﬁcation parameters tgtY , nY
and δ (step 5). Meanwhile, W calculates Bitcoin address
y of Y by hashing P KY . As soon as W receives bo (along
with the security parameters), it displays to the payer X the
transaction destination y and amount to pay bo (step 6).
If acknowledged (step 7), W ensures that it has suﬃcient
funds, i.e., bo ≤ balance, and veriﬁes if τl was conﬁrmed
by a suﬃcient number of blocks by checking if n equals or
greater than nY . It also compares the target values tgt and
tgtY to ensure that n -Tl was calculated with a satisfying
diﬃculty. Finally it validates if the security condition δn ≤
nY · δ holds. If all checks pass, it generates a transaction τo,
which transfers bo amount of bitcoins from wallet’s address
w to payee’s address y. The transaction is signed with the
wallet’s Bitcoin key skW . Further, W generates a proof
that this transaction was created within the secure wallet
environment by signing τo with its certiﬁed key skT .
The resulting τo is sent to PY along with the signature
proof and the time stamp ti (extracted from the block Bi
of n -Tl) (step 8). Upon receive, the transaction is veriﬁed to
match the address y, to include amount bo and to be syntac-
tically correct (e.g., correctly signed). Furthermore, proof
is veriﬁed to be a valid signature made over the transaction
τo. Additional check is performed to verify if tp − ti (where
tp is a current time) equals or greater than nY · δ, and, if
failed, an additional condition is triggered to ensure that the
transaction amount bo does not exceed a safe limit bmax.
If successful, PY stores τo, certT and proof for future use.
Finally, it replies to W with the status (step 9), which, in
turn, decreases balance by bo and, in case there are no more
funds in the account w left, deletes its key skW .
4.3.3 Coin Redemption and Wallet Revocation
The coin-redemption and wallet revocation protocol is de-
picted in Figure 4. It involves a payee Y and the Bitcoin
network as communicating parties and relies neither on the
payer X nor on his or her oﬄine wallet W . The protocol
begins by a payee Y , who redeems the coins received ear-
lier from X by broadcasting τo to the Bitcoin network (step
1). Next, the Bitcoin network either conﬁrms τo by send-
ing transaction conﬁrmation n -To (step 2), or, if it detects
double-spending transaction, no transaction conﬁrmation is
issued8. In the latter case the payee Y initiates revocation
by creating a revocation transaction τr, which is sent from y
signed with skY . It is destined to the pre-deﬁned revocation
address and includes a hash of the public key P KT of the
compromised oﬄine wallet to be revoked. The revocation
transaction is then committed to the Bitcion network along
with τo, certT and proof (step 3). In turn, the Bitcoin net-
work veriﬁes the proof that the double-spending transaction
was indeed signed by P KT (extracted from certT ), and if
correct, the revocation request is accepted and the revoca-
tion transaction τr is integrated into the blockchain.
5 Analysis of Security Parameters
In this section we elaborate on how the security parame-
ters n and δ should be determined. We recall that they
are used by our time-based transaction conﬁrmation veriﬁ-
cation mechanism (cf. Section 4.2) to decide whether an
n-transaction conﬁrmation comes from the Bitcoin network
8We rely on standard mechanisms of Bitcoin network for
detection of double-spending transactions.
525Figure 3: Secure oﬄine transaction protocol
Figure 4: Coin redemption and double-spending wallet revocation protocol
or from an adversary. Therefore, we analyze the probability
for an adversary to successfully spoof a transaction conﬁr-
mation and determine n and δ for bounding this probability.
We then analyze costs associated with transaction conﬁrma-
tion spooﬁng attacks in order to identify transaction limits
which would render these attacks unproﬁtable.
Preliminaries Let parameters rnet and rA be the total
hashrate of the network and the hashrate of the adversary
A in hashes per second (H/s), respectively. We assume that
rA < rnet. The target value for block generation is denoted
by tgt, the number of blocks required to conﬁrm a trans-
action by n and the upper bound for generation by δ in
seconds. For the following considerations we suppose tgt is
the correct current target value, which can be derived from
the blockchain. Consequently, since tgt is chosen such that
block generation takes 10 minutes (or 600 seconds) in aver-
age, it follows that
(5.1)
Further, n -T = {Bi, ..., Bi+n} is a n-transaction conﬁrma-
rnet =
2256
tgt
· 1
600
.
6.y,bo2.PKYelsereject8.{τo,proof,ti}Kor{reject}KPayerXWalletWskW,skT,τl,tgt,δn,balancen-Tl={Bi,...,Bi+n}PlatformPYPKY,skY,tgtY,δ,nY,PayeeY1.boPlatformPXPKT,certT3.certTvalidateCert(certT)4.K←DFHKeyEx(PKT,skT,PKY,skY,NW,NY)7.ack5.{bo,tgtY,nY,δ}Ky←hash(PKY)y?=getAddr(τo)checkSyntaxT(τo)bo?=getAmount(τo)NY∈R{0,1}µNW∈R{0,1}µtgt?≤tgtY;δn?≤nY·δbo?≤balance;nY?≤nifcheckspassτo←genTrans(w,PKW,skW,bo,y)proof←sign(skT;τo)ifcheckspassStorecertT,proof,τoelsereject9.{Status}Kif(nY·δ≤tp−ti);bo?≤bmaxbalance:=balance−boif(balance?=0)deleteskWverify(PKT;τo,proof)tp,bmaxif(Status?=accept)ti←getTime(Bi)PayeeYτo,proof,certT,PKY,skY1.τo2.n-Tr3.τo,proof,certT,τrverify(PKT;τo,proof)ifcheckpassesBitcoinNetworkBifnon-Trreceivedτr←genRevTrans(y,PKY,skY,PKT)integrateτrintoBverifyτoifτoisnotdouble-spentconﬁrmwithn-Tr526time than n · δ to ﬁnd them) is given by the c.d.f. of the
negative binomial distribution which can be calculated in
the following ways:
Pr(Yi ≤ hn) = 1 − I1−p(hn + 1, n)
= Ip(n, hn + 1)
(cid:82) p
(cid:82) 1
0 tn−1(1 − t)hn dt
0 tn−1(1 − t)hn dt
=
(5.6)
(5.7)
(5.8)
where Ix(a, b) is the regularized incomplete beta function.
When substituting hn according to equation (5.5), the
above probability depends on the hashrate r, the number of
required conﬁrmations n and the allowed time δ for ﬁnding
these conﬁrmations. Since the hashrate is a ﬁxed parameter
either given by the current target value tgt for rnet or by
assumption for rA, the only remaining inﬂuential parameters
are δ and n. For better readability we deﬁne
P(r; n, δ) := Pr(Yi ≤ r · n · δ)
Hence, the following equation should be satisﬁed:
P(rA; n, δ) < α
(5.9)
Note that for a given pair of (n, δ) that satisﬁes Eq. 5.9
there is always a probability β = P(rnet; n, δ) that the Bit-
coin network will not be able to produce the correct transac-
tion conﬁrmation in the given time limits. Hence, it is also
important to choose δ in such a way that for increasing n the
probability P(rnet; n, δ) increases but P(rA; n, δ) decreases.
Furthermore, for best usability n should be as small as
possible in order to reduce overhead for the wallet, while δ
should be as large as possible to reduce the probability that
δn < n · δ. We model this as follows:
(5.10)
= 1
= 0
tion, δn is the time it took to generate n -T and let α ∈ [0, 1]
be an arbitrary, but ﬁxed parameter, which we call security
level and which is denoting the upper bound for the attack
success probability of A.
5.1 Analysis of Attack Probability for Trans-
action Conﬁrmation Spooﬁng
To produce a valid transaction conﬁrmation within deﬁned
time constraints, the adversary A needs to compute the re-
quired n conﬁrmation blocks for this transaction. Without
tampering with any of the relevant inputs to the block gen-
eration procedure she is expected to take much longer than
the (honest) Bitcoin network and therefore n· δ can be used
as an upper bound to decide whether a sequence of n blocks
comes from the network or from A.
Eventually, we want to control the probability that an ad-
versary can ﬁnd n conﬁrmation blocks in this time. There-
fore, we will ﬁrst analyze the probability of ﬁnding one block,
then of ﬁnding n blocks and ﬁnally show that these proba-
bilities can diﬀer signiﬁcantly for the network and the ad-
versary for diﬀerent values of δ. From this we derive how
to determine δ and n such that A’s probability to ﬁnd n -T
within δn ≤ n · δ is less than a required security level α,
which is used to bound this probability.
Let Xi be a geometrical distributed random variable with
parameter p, denoting the number of hashes that have to
be computed until a valid hash for block Bi is found, and
psuc being the success probability of ﬁnding a valid hash.
Recall that in order to ﬁnd a valid block, a nonce has to be
discovered such that the hash of the block header is less or
equals the 256 bit long target value tgt. Consequently, since
Bitcoin uses SHA-256 there are exactly tgt out of 2256 possi-
ble valid hashes. Hence, the probability that any computed
hash is valid is
psuc =
tgt
2256 .
(5.2)
The relationship between the number of hashes needed for
one block h1 and the time δ in which hashes are computed
at rate r is as follows:
Hence, the probability of ﬁnding a valid hash in less then h1
attempts (i.e., within δ) is given by the cumulative distribu-
tion function (c.d.f.) of the geometrical distributed Xi:
Pr(Xi ≤ h1) = 1 − (1 − psuc)h1
(5.4)