there is no guarantee that the single address does not implement a
shared access structure by a threshold signature scheme [15].
This problem is fundamental, as no system can cryptographi-
cally prove its intentions to return something of value to a given
user if requested. This customer request will be made without cryp-
tographic authentication (e.g., password-authenticated) because by
h(B2 | CID2 | Nonce2)HashB2Balanceh(B1 | CID1 | Nonce1)HashB1Balanceh(B4 | CID4 | Nonce4)HashB4Balanceh(B3 | CID3 | Nonce3)HashB3Balancelcrclcrch(Sum | lc(Hash) | rc(Hash))Hashlc(Sum) + rc(Sum)Sum(Total Liabilities)lcrc When a customer desires to verify his account (e.g. dashed line node), only two nodes need to be sent to the customer (bold line nodes).h(Sum | lc(Hash) | rc(Hash))Hashlc(Balance) + rc(Balance)Sumh(Sum | lc(Hash) | rc(Hash))Hashlc(Balance) + rc(Balance)Sum722assumption exchange customers are unwilling or unable to manage
cryptographic keys. Otherwise, assets could be proved by send-
ing each customer’s bitcoins to a 1-out-of-2 multisig address re-
deemable by either the exchange or the user [29], providing a win-
dow for each customer to redeem their coins if desired. Again, we
assume this is impractical for most exchange customers.
2.3.2 Collusion attacks
Another potential vulnerability is that a cabal of two or more ma-
licious exchanges might collude by using their own assets to partic-
ipate in each other’s proof of assets, making each exchange appear
to control the total amount controlled by the cabal. With a pub-
lic proof of assets, this would be detected if done simultaneously
(because the same addresses would appear in multiple exchanges’
proofs) while the transaction graph might reveal if assets are simply
being moved around in a shell game.
In Provisions, because the exchange’s addresses are kept conﬁ-
dential, detection of this attack becomes more challenging. How-
ever, in Section 7 we show an extension to the basic Provisions
protocol which enables exchanges to prove that they are not us-
ing the same assets as other exchanges running the protocol. To
do so, they publish an additional value which is unlinkable to their
real Bitcoin address, yet is a deterministic function of (and requires
knowledge of) their private key. Thus, if any two exchanges attempt
to use the same bitcoin address in separate executions of Provi-
sions, they can be detected.
This extension imposes a small performance cost (see Sec-
tion 10.4) and a small impact on the exchange’s privacy as it reveals
the number of addresses to which the exchange knows the private
key (see Section 9.1). Thus we leave it as an extension for now, as
it will only become beneﬁcial when multiple exchanges are imple-
menting Provisions and are willing to synchronize their proofs.
3. PROTOCOL OVERVIEW
The objective of Provisions is to enable an exchange E to pub-
licly prove that it owns enough bitcoin to cover all its customers’
balances such that (1) all customer accounts remain fully conﬁden-
tial, (2) no account contains a negative balance, (3) the exchange
does not reveal its total liabilities or total assets, and (4) the ex-
change does not reveal its Bitcoin addresses. Provisions consists
of three main protocols:
Protocol 1 - Proof of assets. In this protocol, the exchange se-
lects a large set of public keys PK from the blockchain that hold
bitcoin to serve as an anonymity set for its own keys. The ex-
change possesses the private keys to a subset of the public keys
in PK. Next, the exchange creates a commitment to its total as-
sets and proves in zero-knowledge that the sum of balances held
by the public keys it owns (i.e. public keys for which it knows the
secret key) is equal to the committed value. This is done without
revealing which public keys it owns.
Protocol 2 - Proof of liabilities. In this protocol, the exchange
publishes a commitment to each user’s account balance, reveal-
ing to each user individually the random factors used to commit
to the balance for their veriﬁcation. For each committed balance,
it also proves it is a small positive integer. These committed val-
ues are summed homomorphically to produce a commitment to the
exchange’s total liabilities.
Protocol 3 - Proof of solvency. Using the commitments to its
total assets and liabilities produced by the above two protocols, the
exchange will homomorphically compute a commitment to their
difference and prove in zero-knowledge that this ﬁnal commitment
is a commitment to zero. This will prove that the total liabilities is
exactly equal to the total assets (or, via a minor modiﬁcation, that
it is strictly less than the total assets).
3.1 Preliminaries & notation
Public parameters. We let g and h be ﬁxed public generators
of a group G of prime order q. Our implementation uses the el-
liptic curve secp256k1 [6] as the group G; this is the group used
for Bitcoin ECDSA signatures. Note that this allows us to work
with existing Bitcoin public and private keys, although we do not
actually perform any ECDSA signatures. While implemented over
elliptic curves, we use the more conventional multiplicative nota-
tion (e.g., y “ gx instead of Y “ xG).
Bitcoin balance lookups. We assume that
the Bitcoin
blockchain is universally agreed upon and all parties can use it to
compute the quantity of bitcoin owned by each address. More pre-
cisely, for a Bitcoin public key y P G we use balpyq to denote the
balance associated with y. We assume balpyq is an integer between
0 and MaxBTC for all y. We can represent any bitcoin account
with MaxBTC “ 251—the rules of Bitcoin limit the total currency
supply to 21M B, each divisible into a maximum of 10´8 atomic
units called satoshis. Note that satoshis are the true units of cur-
rency in Bitcoin, with B1 “ 108 satoshis simply a convention to
provide more human-friendly accounting units. In the remainder
of this paper when we speak of account balances we will always be
working with satoshis.
Pedersen Commitments. Provisions makes heavy use of Ped-
ersen commitments [26]. The commitment to a message m P Zq is
deﬁned as com “ gm ¨ hr where g and h are ﬁxed public elements
of G and the quantity r is chosen at random in Zq. The genera-
tors g and h are chosen once in a way that ensures no one knows
their relative discrete logarithm. Speciﬁcally, we use the standard
g from secp256k1 and derive h deterministically by hashing the
string Provisions. Recall that Pedersen commitments are per-
fectly hiding so that com reveals no information about m.
Non-Interactive Zero-Knowledge Proofs (NIZKP). Provi-
sions requires a number of non-interactive zero knowledge proofs.
In all cases, these can be adapted from basic Σ-protocols such as
the Schnorr proof of knowledge of a discrete logarithm [27] or the
Chaum-Pedersen proof of representation of a Difﬁe-Hellman tu-
ple [9], using Fiat-Shamir [13] to compile into a non-interactive
zero-knowledge protocol (NIZKP). If one wishes to avoid the ran-
dom oracle model, any alternative Σ-protocol to NIZKP compila-
tion [16] is sufﬁcient.
4. PROOF OF ASSETS
We begin with Protocol 1 which lets the exchange E generate a
commitment to its total assets along with a zero-knowledge proof
that the exchange knows the private keys for a set of Bitcoin ad-
dresses whose total value is equal to the committed value.
The exchange E chooses a set of Bitcoin public keys
PK “ ty1, . . . , ynu Ď G
that will serve as an anonymity set (we will discuss choosing this
in Section 10). We let x1, . . . , xn P Zq be the corresponding secret
keys so that yi “ gxi for i “ 1, . . . , n.
Let S be the exchange’s own set of Bitcoin addresses for which it
knows the private keys. The anonymity set PK must of course be a
superset of the exchange’s own Bitcoin addresses so that S Ď PK.
We use the booleans si P t0, 1u to indicate which accounts the
exchange controls in PK. We set si “ 1 whenever the exchange
knows the private key xi for Bitcoin public key yi P PK. The
723exchange’s total assets can then be expressed as
si ¨ balpyiq
Assets “ nÿ
i“1
Finally, it will be convenient to deﬁne
bi “ gbalpyiq
for i “ 1, . . . , n.
Given the set PK, a veriﬁer can easily compute all the bi for itself
using information in the Bitcoin blockchain.
4.1 Proof of assets Σ-Protocol
The exchange constructs Pedersen commitments to each si ¨
balpyiq for i P r1, ns by choosing a random vi P Zq and com-
puting
pi “ hvi ¨ bsi
(1)
A homomorphic addition of these commitments yields a Pedersen
commitment ZAssets to Assets:
.
i
ř
i“1 viq
p
n
hvi ¨ bsi
i “ h
gAssets .
(2)
ZAssets “ nź
pi “ nź
i“1
i“1
It remains to prove in zero-knowledge that ZAssets is valid. To
do so the exchange publishes a few additional auxiliary values. For
each i P r1, ns the exchange chooses a random ti P Zq and pub-
lishes
li “ ysi
i hti P G
(3)
which is a Pedersen commitment for si. Equivalently, these li can
be written as
li “ gxi¨si hti
which is a Pedersen commitment to the quantity xi ¨ si P Zq. By
setting ˆxi “ xi ¨ si the equation can be written as
li “ g ˆxi hti
(4)
Now, to prove that ZAssets is a commitment to the exchange’s
assets the exchange needs to prove that for every i P r1, ns it knows
si P t0, 1u, vi, ti, ˆxi P Zq satisfying conditions (1), (3), and (4).
ZAssets can then be computed according to (2).
The exchange proves knowledge of the required values using
the Σ-protocol presented in Protocol 1 along with a Σ-protocol to
prove that each si is binary and known to the exchange. Proving in
zero-knowledge that a Pedersen commitment li is a commitment to
a binary value is a standard zero-knowledge proof and is presented
in full version of this paper [11] for completeness.
The protocol can be made non-interactive using the standard
Fiat-Shamir heuristic. It therefore sufﬁces to prove that the protocol
is honest-veriﬁer zero knowledge. This is captured in the following
theorem:
Theorem 1. The Σ-protocol in Protocol 1 is a honest-veriﬁer zero
knowledge proof of knowledge of quantities
Assets and psi P t0, 1u, vi, ti, ˆxi P Zqq for i P r1, ns
that satisfy conditions (1),(2), (3) and (4) for all i P r1, ns.
The proof of Theorem 1 is given in Appendix A.
The proof of knowledge convinces the veriﬁer that ZAssets is a
commitment to the exchange’s total assets. More precisely, the ver-
iﬁer is convinced that
ř
i“1 si ¨ balpyiq P Zq (by equa-
tion (2)), where si P t0, 1u, and
‚ ZAssets is a commitment to
n
1. For i P r1, ns
, u
, u
, u
p4q
i
p3q
i
p2q
i
p1q
i
$ÐÝ Zq.
(a) E chooses u
(b) The exchange E sends to the veriﬁer:
i “ y
p2q
p3q
i “ gu
p4q
i
p4q
i “ b
p1q
hu
i
p2q
i “ hu
p3q
i
p1q
u
i
i
a
a
a
a
,
,
p1q
u
i
i
$ÐÝ Zq
(c) The veriﬁer replies with a challenge ci
(d) E replies with:
rsi “ u
i ` ci ¨ si,
p1q
rti “ u
i ` ci ¨ ti,
p2q
i ` ci ¨ ˆxi,
rˆxi “ u
p3q
rvi “ u
i ` ci ¨ vi,
p4q
Response for si
Response for ti
Response for ˆxi
Response for vi
b
(e) The veriﬁer accepts if:
p1q
i
p2q
i a
p3q
i a
rsi
i hrvi
rsi
i hrti
grˆxi hrti
?“ pci
i a
?“ lci
i a
?“ lci
i a
y
Verify statement (1)
Verify statement (3)
Verify statement (4)
p3q
i
p4q
i
(f) Run a zero knowledge proof (described in [11]) on
li to prove knowledge of si P t0, 1u
2. The veriﬁer computes ZAssets “
n
i“1 pi Statement (2)
ś
Protocol 1: Privacy-preserving proof of assets
‚ whenever si “ 1 the exchange knows the corresponding pri-
vate key xi P Zq. To see why observe that dividing equa-
tion (3) by (4) proves that when si “ 1 the exchange knows
ˆxi P Zq such that g ˆxi “ yi, as required.
That the proof is honest-veriﬁer zero knowledge implies that
nothing is revealed about the total assets, the si, or the xi, as re-
quired.
Proof length. The proof is linear in the anonymity set size n, re-
quiring about 13n elements in Zq. This is feasible even for large
anonymity sets. We will discuss practical parameters in Section 10.
5. PROOF OF LIABILITIES
Protocol 2 enables the exchange E to veriﬁably commit to its
total liabilities and convince all clients that their balances were in-
cluded in the commitment.
To provide some intuition behind the design of Protocol 2, con-