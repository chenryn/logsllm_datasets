输出内容的快照：  
DOM树：  
请注意，数据状态是唯一试图加载图像的状态。这是因为数据是一种计算机指令，而不是简单的文本数据。  
重点提示：提供的不同元素可以通过切换数据的上下文状态来改变这些元素中数据的解析和呈现方式。
## 命名空间：外来内容以及利用意外的行为
浏览器的HTML解析器不仅可以理解HTML；它还可以在三种不同的命名空间之间切换：HTML、MathML和SVG。  
在HTML解析过程中，如果遇到`或`命名空间元素（标签），解析器会将上下文切换到相应的命名空间。这种上下文切换对我们来说意味着解析器不再作为HTML进行解析，而是作为MathML或SVG进行解析。  
当HTML被嵌入到MathML/SVG中时，这种命名空间的上下文切换会导致意想不到的行为，因为每个命名空间都有自己独特的元素，解析方式也略有不同。作为渗透测试人员，我们可以在某些情况下利用这种逻辑把解析器搞蒙圈，从而浑水摸鱼发动XSS攻击。  
这里有一篇关于如何绕过DOMPurify的文章，其中对命名空间的混淆进行了更深入的研究，包括前沿的研究和一个很棒例子。  
重点提示：当HTML解析器遇到MathML或SVG元素时，会将上下文切换到独立的命名空间，这可以用来让解析器产生混淆。
## 净化型词法解析器的工作流程
为了利用净化型词法解析器，我们需要了解其工作的流程；概括来说，主要流程如下所示：
  * 用户提供的数据被浏览器的HTML解析器解析为HTML。
  * 词法解析器对数据进行分析和过滤。
  * 浏览器的HTML解析器再次对数据进行解析。  
这个流程如下图所示：  
攻击的目的就是提供相应的HTML来欺骗净化解析器，使其相信所提供的输入是无害的文本数据（RCDATA、PLAINTEXT或RAWTEXT），而它实际上是计算机指令（数据状态）。这通常是可能做到的，原因有多个：HTML的设计之初，并没有考虑到需要解析两次；在最初的HTML解析器和解析解析器之间可能会出现细微的解析差异；净化解析器通常会实现自己的处理逻辑。
## 测试案例1： TinyMCE XSS
TinyMCE是一个“所见即所得”（WYSIWYG）的HTML文本编辑器和JavaScript库。它通常包含在第三方网站中，提供文本编辑功能，包括HTML文本。  
CVE-2020-12648（TinyMCE中的XSS漏洞）是由George
Steketee和我发现的；在这里，它将作为一个测试案例，演示在使用净化型解析器的情况下，如何利用HTML解析警告来发动XSS攻击。按照TinyMCE的介绍，XSS是通过以下payload实现的：
这个payload之所以能够成功，因为在分词和DOM树构造阶段有一个安全问题。准确来说，当HTML被词法解析器重新解析时，它在分配上下文状态之前没有正确考虑到元素的顺序。  
``元素导致上下文状态切换为RAWTEXT，这意味着`iframe`后面的数据被认为是没有危害的，不需要进行过滤处理。这种上下文切换在``的关闭标签处结束。然而，``元素也会令解析器切换到RCDATA上下文，即另一种形式的非危险文本数据。当HTML解析器处理`iframe`元素时，切换到RCDATA的上下文的指示就包含在这些元素中。这种包含是TinyMCE解析器没有意识到的。  
当进行上述解析时，TinyMCE解析器实际上并没有考虑正确的操作顺序和上下文切换问题。因此，HTML解析器最终生成的DOM树如下所示：  
以上是TinyMCE的解析器“看走眼的”结果，实际的数据是这样的：  
请注意，具有活动内容onerror事件的img元素位于DOM树的文本上下文中；当进行词法解析时，这将被视为没有危害的，不会被剥离或进行编码处理。由于textarea元素包含在iframe中，而img元素实际上并不在textarea元素中。因此，活动内容（JavaScript）将被执行，从而实现XSS。
##  测试案例2：Froala XSS
Froala是一个所见即所得（WYSIWYG）的HTML文本编辑器和JavaScript库，其功能与TinyMCE类似。对于第二个测试案例，我们将审查作为这项研究的一部分而发现的一个XSS漏洞（CVE-2021-28114）。在这个CVE的公告中，详细介绍了如何使用以下payload实现XSS：
在功能方面，这个payload与测试案例1中讨论的TinyMCE
XSS相同，但有一点需要注意：进入MathML命名空间虽然会导致解析混乱，但是，这并不足以让Froala的解析器彻底蒙圈。然而，由于Froala的解析器并不理解MathML命名空间的标签，因此，它会丢弃这些标签，并继续解析其余的内容。这样的结果是：对于HTML解析器创建的节点来说，其payload被限制为文本数据，具体如下面的树结构所示：  
然而，由于Froala的解析器遗漏了``元素，所以，它仍然会错误地将img元素的payload视为一个没有任何危害的注释。当JavaScript
payload被最后阶段的HTML解析器处理并放入DOM时，它将会：
其结果是，XSS payload将得到执行。通过检查相应的源代码，可以进一步看清这一点：
         --&gt;
Froala解析器删除了``元素，并添加了一个`-->`来结束它所认为的注释。最后阶段的HTML解析器将开头的注释视为是`iframe`元素中的，并将Froala解析器添加的、用于结束注释的元素设置为RCDATA状态，而不是把它看作一个有效的结束标签，其结果是主动内容得以执行（XSS）。
## 预防措施
当实现允许用户控制某些HTML元素的应用程序时，避免这些类型的错误的关键是，让HTML的解析结果尽可能地接近其本意。在这样做的时候，重要的是要考虑到元素的顺序和嵌入元素的上下文。如果HTML解析器对一个节点的看法与净化型解析器对一个节点的看法存在差异，那么在词法解析中就会出现这些XSS问题。当不需要MathML和SVG命名空间元素时，最好将其列入黑名单，并将包含这些元素的请求全部丢弃（即不要继续将数据写入DOM）。  
对于那些不创建这些类型的解决方案，而是将它们纳入其应用程序的组织来说，一个好的补丁策略能在很大程度上缓解这种漏洞。同时，我们建议大家经常检查这些库的最新版本，并定期给它们打补丁。  
除了代码/应用层面的安全防御措施外，企业还应在应用程序中实施内容安全策略（CSP）。一个定义良好的CSP可以在浏览器定义的层面上阻止JavaScript注入，从而创建一种深入防御的安全态势。此外，CSP应避免某些危险的指令，如unsafe-inline或unsafe-eval，因为这些指令可以执行用户定义的内联JavaScript代码。关于CSP的更多信息，请参考这篇内容丰富的[文章](https://content-security-policy.com/ "文章")。
## 小结
即使对输入进行了词法解析，XSS仍有可能通过利用HTML解析和重新解析时的漏洞来实现，无论使用的是何种净化库。在测试这种类型的XSS时，我建议用各种命名空间和上下文切换元素对输入进行模糊测试处理，记录所有可疑的结果，并根据这些结果进行相应的处理。
## 参考资料
Whatwg - HTML Specification  
W3 – HTML Parser Working Draft  
Securitum - DOM Purify Bypass  
Bishop Fox – TinyMCE v5.2.1 Advisory  
Hixie – DOM Tree viewer  
Techopedia – Lexical Analysis Defined  
PortSwigger – Preventing XSS  
OWASP – Contextual Output encoding  
Mozilla – Content Security Policy  
CSP – CSP details  
原文地址：