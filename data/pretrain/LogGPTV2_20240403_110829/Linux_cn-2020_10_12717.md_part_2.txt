没有运维！是吗？你知道，它只是神奇地以某种方式消失。你可以在 HackerNews 和 Twitter 以及其他任何地方看到这些笑话。无服务器？当然有服务器！我知道，当然有。而且也肯定有运维。
**00:07:39**：
总得有人去做这些，总得有人去架设服务器、给操作系统打补丁、去创建容器镜像，因为，你猜猜这些功能会在哪里执行？当然是在某种计算机上。
**00:07:54 - Saron Yitbarek**：
这不是零和博弈。功能即服务无法直接取代容器，而是在工具箱中增加了一个工具。我还有更多的事情要告诉你。通过使用这种新工具，转变成无服务器并不只是意味着运维就是其他人的事情，你仍然需要自己考虑自己的运维。
**00:08:14 - Michael Hausenblas**：
你会看到在基础架构侧有一点运维工作。但是，也有一点是开发人员的事情。如果你处在一个极端情况之下，比如说使用 Lambda，那么你是没有任何任何类型的管理员权限的，对吧？
**00:08:29**：
你不能简单地致电或是短信给一名基础架构管理员。显然，你组织之中的某一个人就必须得做这件事。但是，我担心许多组织只看到了它是如此简单而便宜。我们无需动这个，还有这个、这个，然后忘记了谁在待命，谁是真正地在待命？你对此有什么策略吗？
**00:08:52**：
如果没有的话，那么你可能会想要在进行之前，先制定一个策略。
**00:09:00 - Saron Yitbarek**：
需要有人处于待命状态。即使选择了“无服务器”，你仍然需要在头脑中萦绕更大的场景，你仍然需要让你的运维有序进行。
**00:09:24**：
在我早先时候抛出那个“功能即服务”术语时，你是不是有过些许畏缩？过去，基于云的开发为我们带来了大量的 “xx 即服务”的术语。我们有基础架构即服务（IaaS）、平台即服务（PaaS）、软件即服务（SaaS）、数据即服务（DaaS）、数据库即服务（DBaaS） …… 等等。
**00:09:48**：
如果你难以理解它们的不同，那你并不孤单。这就是我们找来了 Himanshu Pant 的原因。他是位于印度德里的苏格兰皇家银行的技术主管。他花了多年时间来分析其中的差异。
**00:10:04 - Himanshu Pant**：
这些其他的计算范例在名称上和无服务器听起来是如此的相似，以至于人们往往会忘记，或者困惑于为什么没有将它们称之为无服务器，或者为什么这个被称为无服务器。
**00:10:20 - Saron Yitbarek**：
因此，无服务器与容器不同，无服务器也不是平台即服务。但是 Himanshu 希望将其明确一下。功能即服务能够提供什么？又不能提供什么？
**00:10:35**：
他与我们分享了两件轶事，有两次他弄清楚了什么时候该使用无服务器，什么时候应该放弃。第一次来自一个 24 小时黑客马拉松。 Himanshu 当时正试图开发一个聊天机器人。
**00:10:49 - Himanshu Pant**：
有各种各样的指标会影响它的选择。例如逻辑覆盖率、可能产生的成本以及可伸缩性。而我选择在无服务器环境下完成这项工作。
**00:11:04**：
当我在开发它的时候，我意识到成本是一个层面，而这确实是我所青睐的技能。因此，即使其他所有的参与者都有更好的……我想说的是，覆盖率，或者说是逻辑覆盖率。这里讲的是 NLP 语境或其场景。
**00:11:19**：
但是，就成本和可伸缩性而言，我是手操胜券的，因为借助无服务器，这完全取决于人们在该聊天机器人上所进行调用的次数，并相应的触发该功能。这是一个我十分乐意采用无服务器的用例，因为成本 —— 没有成本。以及更快的开发时间，而且老实说，当时还并不完全是生产规模级别的工作负载。
**00:11:45**：
我可以使用平台上的某些新兴工具。这对我而言是一次胜利。
**00:11:52 - Saron Yitbarek**：
很好。那时无服务器才有了意义。但是，在 Himanshu 目前供职的银行里，人们正在将他们的系统从旧版迁移到云端。而这提出了不同的目标。
**00:12:07 - Himanshu Pant**：
我们正在尝试查看哪些工作负载适用于哪些范例。比如 IaaS、BaaS、FaaS，这显然是属于企业领域的。你要看到这些方面，比如说第一，可靠的供应商难以寻找，以及第二，该技术应该得到广泛的验证。这对于像是银行业这样的规避风险的行业而言更是如此。
**00:12:30**：
这就是平台即服务（PaaS），但是仍然需要更好的证明、更好的功能，以及它们比传统工具更优越的地方。
**00:12:40 - Saron Yitbarek**：
Himanshu 正在研究自己的需求以及他自己的舒适区，并且研究哪些工作负载在哪种云计算规范中是有意义的。
**00:12:49 - Himanshu Pant**：
假设某个听众在一家贸易商店工作，他想构建某种东西，比如说一个入口。对于他或者她来说，无服务器可能并不是真正合适的选择，因为在那种在特定机器的应用程序中，延迟可能是不该出现的。
**00:13:05 - Saron Yitbarek**：
归根结底，这是一种有节制的做法，而不是将所有东西都丢进一个桶里。当我们思索哪一种基于云的架构是真正我们所想要做的工作时，还有一件事情需要考虑。所有这些抽象的东西，所有解放你双手的东西，最终如何改变的不仅仅是我们的工作方式，还改变了完成工作本身。
**00:13:31**：
抽象掉一部分工作负载可能意味着更少的自定义选项。想象一下你购买的一辆车。它能工作，它能开。但是接着想象一下你自己组装的一辆车，这辆车会按照你决定的方式工作。
**00:13:48 - Rania Khalaf**：
这是有代价的。
**00:13:50 - Saron Yitbarek**：
Rania Khalaf 是 IBM 研究部门的 AI 工程总监。
**00:13:56 - Rania Khalaf**：
在使用这些无服务器应用程序的过程中，你可能无法完全控制所有正在发生的事情。你无法控制全盘计划，或是程序何时何地运行。
**00:14:06 - Saron Yitbarek**：
这是一种权衡，对吗？当你使用无服务器时，细粒度控制可能会失误。
**00:14:13 - Rania Khalaf**：
它对于终端用户而言，抽象化了如此之多的东西，以至于你想要拥有更多的控制权、不同的规划、更多的检查与平衡、功能可以运行多长时间的不同值，等等等等。那么，如果你真的希望能够进入系统并修补，也许你可以创建你自己的部署环境。
**00:14:32 - Saron Yitbarek**：
不过，这将需要一些新东西，一类新的无服务器环境，开源社区已经在为自己打造了它。Rania 和她的 IBM 团队参与了该运动。
**00:14:44 - Rania Khalaf**：
我们首先研究是一种语言……它基本上是 JavaScript 的扩展，可以让你创建这些多线程交互服务的组合，以此作为起点，为你提供一种更加轻量级服务的方式。大约在同一时间，云和微服务以及平台即服务开始真正兴起。
**00:15:08**：
仅仅是将这两种趋势结合起来，就可以用可能来自于你，也可能来自其他人的许多小部件，构建更加高阶的功能。
**00:15:18 - Saron Yitbarek**：
Rania 和她的团队正在构建 Apache OpenWhisk，一款开源的功能平台。
**00:15:23 - Rania Khalaf**：
对于 OpenWhisk，我们从一开始就开源了。其中很大的原因是，为了让社区和我们一起参与进来。但是同时也是为了揭掉外包装，将控制权交给想要运行自己的无服务器计算环境的人们，以便他们能够根据自己的需求对其进行自定义，也许将它们置身于自己的控制之中，看看它实际上是如何运行的，以对其进行更好的控制。
**00:15:54**：
而且，我们还可以提供更加精细的控制，如果仅仅是普通服务，人们就不会有这种控制。
**00:16:03 - Saron Yitbarek**：
将控制权交还给想要运行自己的无服务器运行环境的人。这是下一阶段的无服务器。加入 OpenWhisk，你将获得像是 Fission 和 Gestalt 之类的其它开源平台。我们开始看到无服务器领域正在演变得比原先更具适应性，而且功能更为强大。
**00:16:31**：
为了真正了解为什么开源版的无服务器很重要，我与 OpenWhisk 的创始人之一进行了谈话。
**00:16:39**：
嗨，Rodric。最近好吗？
**00:16:40 - Rodric Rabbah**：
很好。你好吗？谢谢你邀请我参与节目。
**00:16:42 - Saron Yitbarek**：
Rodric Rabbah 是构思并创立 OpenWhisk 的三位开发者之一。以下是我们的谈话。
**00:16:54 - Rodric Rabbah**：
别人可能会很困惑，也可能会窃笑，因为人们可能会想：“倘若没有服务器，你要怎么做计算呢？”
**00:17:02 - Saron Yitbarek**：
是的。服务器就在某处，只是我不必去费心考虑它。
**00:17:05 - Rodric Rabbah**：
完全正确。这就是这个模式的真正美妙之处。当你开始以无服务器的方式进行开发时，你就再也不想回到过去了。你知道的，如今我已经置身其中接近 4 年了，并且已经开发了一些达到生产质量的应用程序。
**00:17:19**：
这是我如今惟一的开发方式。如果你告诉我必须要配置一台计算机并且安装操作系统，这对我而言完完全全是陌生的。我甚至都不确定我是不是还知道该怎么做。
**00:17:29 - Saron Yitbarek**：
是的。当你这样说的时候，听起来像是减轻了很大的负担。你知道吗？当最初听说无服务器时，至少我会想：“伙计，我必须要去学习的事又多了一件。”
**00:17:38**：
但是，当你这样说的时候，听起来不错。
**00:17:41 - Rodric Rabbah**：
这确实听起来很棒。然而，你应该已经意识到你必须要从这幻想的气泡中抽出一点儿空气。它不是万能药。
**00:17:50 - Saron Yitbarek**：
有哪些令人惊讶的风险或问题是人们在起步时可能没有看到或意识到的呢？
**00:17:58 - Rodric Rabbah**：
我认为缺乏透明度可能是最大的问题。这有点儿让我想起了新语言问世时出现的，那些提高了计算机抽象水平的技术。在当今的无服务器环境中，这是一种类似的令人震惊的效果。
**00:18:16**：
在这个过程中，你通常会写一个功能，然后只需部署这个功能即可。它可以立即运行，比如在 web 上作为 APIN 点。它可以大规模伸缩。我的意思是你无需自己做任何工作即可运行数千个实例。