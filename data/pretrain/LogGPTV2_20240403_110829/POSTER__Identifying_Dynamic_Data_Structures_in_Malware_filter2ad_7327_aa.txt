title:POSTER: Identifying Dynamic Data Structures in Malware
author:Thomas Rupprecht and
Xi Chen and
David H. White and
Jan Tobias M&quot;uhlberg and
Herbert Bos and
Gerald L&quot;uttgen
POSTER: Identifying Dynamic Data Structures in Malware
Thomas Rupprecht
University of Bamberg,
Germany
thomas.rupprecht@swt-
bamberg.de
Jan Tobias Mühlberg
iMinds-DistriNet, KU Leuven,
Belgium
jantobias.muehlberg@cs.
kuleuven.be
Xi Chen
Vrije Universiteit Amsterdam,
The Netherlands
PI:EMAIL
Herbert Bos
Vrije Universiteit Amsterdam,
The Netherlands
PI:EMAIL
David H. White
University of Bamberg,
Germany
david.white@swt-
bamberg.de
Gerald Lüttgen
University of Bamberg,
Germany
gerald.luettgen@swt-
bamberg.de
ABSTRACT
As the complexity of malware grows, so does the necessity of
employing program structuring mechanisms during develop-
ment. While control ﬂow structuring is often obfuscated, the
dynamic data structures employed by the program are typi-
cally untouched. We report on work in progress that exploits
this weakness to identify dynamic data structures present in
malware samples for the purposes of aiding reverse engi-
neering and constructing malware signatures, which may be
employed for malware classiﬁcation.
Using a prototype implementation, which combines the
type recovery tool Howard and the identiﬁcation tool Data
Structure Investigator (DSI), we analyze data structures in
Carberp and AgoBot malware. Identifying their data struc-
tures illustrates a challenging problem. To tackle this, we
propose a new type recovery for binaries based on machine
learning, which uses Howard’s types to guide the search and
DSI’s memory abstraction for hypothesis evaluation.
Keywords
Data structure identiﬁcation, malware, reverse engineering,
program signatures
1.
INTRODUCTION
As the scope and applicability of malware increases, so
does its complexity and, in turn, the time necessary to un-
derstand a malware sample via reverse engineering. This is
due to the fact that such samples are often heavily obfus-
cated. However, the increased size and complexity that com-
plicates reverse engineering also mandates the proper prac-
tices of code and data organization during development, e.g.,
by employing functions and data structures. As noted in [5],
while the leakage of information due to the organization of
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS’16 October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4139-4/16/10.
DOI: http://dx.doi.org/10.1145/2976749.2989041
Approach.
code is often mitigated by common obfuscation techniques,
the information leakage from data structures is typically not
considered. In this paper we describe work in progress on
an analysis that exploits this weakness to identify the dy-
namic data structures present in malware, for the purposes
of aiding reverse engineering and constructing malware sig-
natures, which may be employed for malware classiﬁcation.
Our prototype is based on Data Struc-
ture Investigator (DSI) [15], which is a dynamic analysis
tool capable of identifying (cyclic) singly/doubly linked lists
(SLL/DLLs), trees, skip lists and combinations thereof such
as nested lists. DSI’s original use case was as a program com-
prehension tool for C programs and, thus, its trace recording
C front-end employs the readily available type information
present in C code. However, source code will not be avail-
able in typical malware use cases, and therefore, we utilize
the type recovery tool Howard [14] to obtain the necessary
type information. The result is a new binary front-end for
DSI that allows for the analysis of x86 stripped binaries, i.e.,
those with all symbols not required for execution removed.
Novelty & Related Work. DSI provides two desir-
able features that will help us to advance the state-of-the-
art in identifying dynamic data structures from malware.
The ﬁrst is DSI’s rich heap abstraction that, in contrast to
ARTISTE [3], DDT [7], HeapDbg [11], and MemPick [6],
permits the identiﬁcation of many complex data structure
implementation techniques. These range from the generic
list implementations employed by the Linux kernel, to highly
optimized data structures, and to those created via cus-
tom memory allocators. Secondly, DSI identiﬁes data struc-
tures by accumulating evidence, a process which is resilient
against the transient corrupted shapes that arise due to ma-
nipulation operations, which we term degenerate shapes. In
contrast, other approaches [6, 7] try to exclude degenerate
shapes from the analysis, which may be diﬃcult if well-
structured interfaces are required [7] and these are obfus-
cated. Additionally, there is typically limited support for
nested data structures, whereas DSI’s key features enable
the robust identiﬁcation of arbitrarily deep nesting.
However, DSI’s usefulness is signiﬁcantly reduced when
high quality type information is absent, as is the case in
stripped binaries. Thus, in contrast to [8, 10], Howard’s
ability to identify the types of nested structs empowers DSI,
1772as many complex data structure implementation techniques
rely on this programming construct.
While the binary analyses mentioned so far consider re-
verse engineering in general, Laika [5] is designed speciﬁcally
for the construction of malware signatures based on the data
structures in a memory dump, which are found via machine
learning. However, no high-level identiﬁcation is performed
beyond the discovery of recursive pointers, which prevents,
e.g., distinguishing a binary tree from a DLL.
Lastly, we note that, although uncommon, there exist ap-
proaches targeting the obfuscation of data structures [2, 9].
However, even with obfuscation applied, our rich heap ab-
straction may help to return useful information, as would be
the case with the obfuscation of [9]. Of course, obfuscations
that target pointers directly [2] remain out of scope.
Applications. DSI’s output can beneﬁt the reverse en-
gineering of a malware sample in two ways. Firstly, we may
use DSI’s rich heap abstraction to guide the visualization of
program memory. In contrast to the generic graph layout
methods used by [1, 11], our DSI-guided layout is more in-
tuitive and includes the ability to view heap manipulations
with animation. Secondly, the notion of degenerate shape
gives rise to a simple identiﬁcation of data structure oper-
ations. By noting the transitions of shape from correct to
degenerate and back to correct, we can tag regions of binary
code that are responsible for manipulating a speciﬁc data
structure. In contrast to the operation detection of DDT,
this does not require well-structured interface functions, and
thus is applicable to malware.
Dynamic data structures in malware are typically found
in reusable components, such as a VNC server or a TCP/IP
stack. Thus, in addition to constructing signatures that
characterize the malware as a whole, which could be used for
malware classiﬁcation in the style of Laika, we may also con-
struct signatures that characterize the components. Since
the components seem to reoccur across diﬀerent malware, we
expect the signatures will oﬀer a reverse engineer a number
of short-cuts when analyzing a new sample. Lastly, we hope
to enhance the quality of signatures by including details of
any operations used to manipulate the data structures.
including:
Contributions.
Although our primary motivation is malware analysis, DSI
in combination with the new binary front-end will have ap-
plications in a number of domains,
informing
formal veriﬁcation [12], where the veriﬁcation process can
be aided by automatically generating program annotations
for data structure behavior; and proﬁling/optimization [13],
where the granularity can be set for a speciﬁc data structure.
In the following we take a look at the
characteristics of a number of malware samples appearing in
the real-world and consider their usage of data structures.
We then report preliminary results obtained by applying our
prototype implementation to examples extracted from Car-
berp and AgoBot malware. Through an analysis of these
results, we ﬁnd that, while the combination of Howard and
DSI is very promising, the types recovered by Howard re-
quire further reﬁnement to fully enable DSI’s rich heap ab-
straction. We propose a solution based on machine learning
to tackle this problem.
2. PRELIMINARY RESULTS
We ﬁrst describe some malware samples that serve to re-
inforce our theme of reusable components, and then proceed