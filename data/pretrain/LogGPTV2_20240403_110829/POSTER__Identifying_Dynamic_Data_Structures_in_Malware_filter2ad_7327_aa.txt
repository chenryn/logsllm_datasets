# POSTER: Identifying Dynamic Data Structures in Malware

**Authors:**
- Thomas Rupprecht, University of Bamberg, Germany (thomas.rupprecht@swt-bamberg.de)
- Xi Chen, Vrije Universiteit Amsterdam, The Netherlands (xi.chen@vu.nl)
- David H. White, University of Bamberg, Germany (david.white@swt-bamberg.de)
- Jan Tobias Mühlberg, iMinds-DistriNet, KU Leuven, Belgium (jantobias.muehlberg@cs.kuleuven.be)
- Herbert Bos, Vrije Universiteit Amsterdam, The Netherlands (herbert.bos@vu.nl)
- Gerald Lüttgen, University of Bamberg, Germany (gerald.luettgen@swt-bamberg.de)

## Abstract
As the complexity of malware increases, so does the need for employing program structuring mechanisms during development. While control flow structuring is often obfuscated, the dynamic data structures used by the program are typically left untouched. This paper reports on ongoing work that exploits this weakness to identify dynamic data structures present in malware samples, aiding reverse engineering and constructing malware signatures for classification purposes.

Using a prototype implementation that combines the type recovery tool Howard and the identification tool Data Structure Investigator (DSI), we analyze data structures in Carberp and AgoBot malware. Identifying these data structures presents a challenging problem. To address this, we propose a new type recovery method for binaries based on machine learning, which uses Howard’s types to guide the search and DSI’s memory abstraction for hypothesis evaluation.

**Keywords:** Data structure identification, malware, reverse engineering, program signatures

## 1. Introduction
As the scope and applicability of malware increase, so does its complexity, making it more time-consuming to understand a malware sample through reverse engineering. This is due to the heavy obfuscation often applied to such samples. However, the increased size and complexity also necessitate proper code and data organization practices during development, such as using functions and data structures. As noted in [5], while common obfuscation techniques mitigate information leakage from code organization, the information leakage from data structures is typically not considered.

In this paper, we describe ongoing work on an analysis that exploits this weakness to identify dynamic data structures in malware, aiding reverse engineering and constructing malware signatures for classification. Our prototype is based on Data Structure Investigator (DSI) [15], a dynamic analysis tool capable of identifying various data structures, including singly and doubly linked lists, trees, skip lists, and nested lists. DSI was originally designed as a program comprehension tool for C programs, using readily available type information. For malware, where source code is unavailable, we use the type recovery tool Howard [14] to obtain the necessary type information, enabling DSI to analyze x86 stripped binaries.

### Novelty & Related Work
DSI provides two key features that advance the state-of-the-art in identifying dynamic data structures from malware:
1. **Rich Heap Abstraction:** Unlike ARTISTE [3], DDT [7], HeapDbg [11], and MemPick [6], DSI can identify complex data structure implementation techniques, ranging from generic list implementations to highly optimized data structures.
2. **Degenerate Shape Resilience:** DSI identifies data structures by accumulating evidence, which is resilient against transient corrupted shapes (degenerate shapes). Other approaches [6, 7] try to exclude degenerate shapes, which can be difficult if well-structured interfaces are required and obfuscated. DSI supports nested data structures, enabling robust identification of deep nesting.

However, DSI's effectiveness is reduced without high-quality type information, as in stripped binaries. Howard's ability to identify types of nested structs enhances DSI, as many complex data structures rely on this construct. Laika [5] constructs malware signatures based on data structures in memory dumps, but it lacks high-level identification beyond recursive pointers. Some approaches target data structure obfuscation [2, 9], but our rich heap abstraction may still provide useful information, except for obfuscations targeting pointers directly.

### Applications
DSI's output benefits malware reverse engineering in two ways:
1. **Visualization:** DSI's rich heap abstraction guides the visualization of program memory, providing a more intuitive layout with the ability to view heap manipulations with animation.
2. **Operation Detection:** The concept of degenerate shape helps identify data structure operations by noting transitions between correct and degenerate shapes, tagging regions of binary code responsible for specific data structure manipulation.

Dynamic data structures in malware are often found in reusable components like VNC servers or TCP/IP stacks. Constructing signatures for these components, in addition to overall malware signatures, can offer shortcuts for reverse engineers analyzing new samples. We aim to enhance signature quality by including details of data structure manipulation operations.

### Contributions
Although our primary motivation is malware analysis, the combination of DSI and the new binary front-end has applications in other domains, such as formal verification [12] and profiling/optimization [13].

## 2. Preliminary Results
We first describe some real-world malware samples to highlight the theme of reusable components and then report preliminary results obtained by applying our prototype to examples from Carberp and AgoBot malware. Our analysis shows that the combination of Howard and DSI is promising, but the types recovered by Howard require further refinement to fully enable DSI's rich heap abstraction. We propose a solution based on machine learning to address this issue.