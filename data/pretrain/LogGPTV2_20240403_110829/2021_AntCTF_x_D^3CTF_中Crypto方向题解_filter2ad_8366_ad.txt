###  EXP
爆破`AlicePasswd`的脚本（除了最后一个字节）
    #!/usr/bin/env python
    from elgamal import elgamal
    from os import urandom
    from Crypto.Util.number import *
    from pwn import *
    from time import *
    import random
    #context.log_level = 'debug'
    Alice_pubkey = (10701440058624032601015137538928332495339102166449611910023158626004456760436930147541475696463030881833656888220652983522600176918743749340172660134163173, 1564399668655593150166497641453625075939863931648697579307, 7485644640971189066076867813504769638089749022750276585841131549227880841063823940682209946365975810625990180843110530957715179877761206203179636693608929, 10399272689500457356753299445284422908920074489727610618928888372268024186959263604721857776550008093778901180936272708522371781846820901338928077050396521)
    pubenc = elgamal(Alice_pubkey)
    def enc(msg):
        y1 , y2 = pubenc.encrypt(bytes_to_long(msg))
        return [y1,y2]
    def attackAlice(rr,m):
        try:
            middle_shell = listen(8888)
            alice_shell = remote("47.100.0.15",10003)
            alice_shell.recvuntil(b"Hello, I am Alice, can you tell me the address of the server?\nIn return, I will give you the ctf_flag\n")
            alice_shell.sendline("xxxx:8888") # xxxx -> your vps's ip
            middle_shell.sendline(b'1. signup  2.signin')
            middle_shell.recv()
            middle_shell.sendline(b'please give me your name')
            middle_shell.recv()
            middle_shell.sendline(b'please give me your passwd(encrypted and xored by r)')
            middle_shell.sendline(str(rr))
            middle_shell.recv()
            middle_shell.sendline(b'signin success')
            middle_shell.sendline(b'now let\'s communicate with this key')
            middle_shell.sendline(str(m[0]) + ', ' + str(m[1]))
            sleep(0.3)
            result = middle_shell.recv()
            if result != b"":
                middle_shell.close()
                alice_shell.close()
                return True
        except:
            if middle_shell:
                middle_shell.close()
            if alice_shell:
                alice_shell.close()
        return False
    known_pwd = b""
    # 0x35343764643163636333xx
    for i in range(11):
        for r in range(0,256):
            rr = ((bytes_to_long(known_pwd)  your vps's ip
                middle_shell.sendline(b'1. signup  2.signin')
                middle_shell.recv()
                middle_shell.sendline(b'please give me your name')
                middle_shell.recv()
                middle_shell.sendline(b'please give me your passwd(encrypted and xored by r)')
                middle_shell.sendline(str(rr))
                middle_shell.recv()
                middle_shell.sendline(b'signin success')
                middle_shell.sendline(b'now let\'s communicate with this key')
                middle_shell.sendline(str(m[0]) + ', ' + str(m[1]))
                sleep(0.5)
                result = middle_shell.recv()
                print(result)
                if result != b"":
                    middle_shell.close()
                    alice_shell.close()
                    return True
            except:
                if middle_shell:
                    middle_shell.close()
                if alice_shell:
                    alice_shell.close()
        return False
    server_shell = remote("47.100.0.15",10001)
    server_shell.sendlineafter("\n","2")
    server_shell.recvuntil("please give me your name\n")
    server_shell.sendline("Alice")
    server_shell.recvuntil("please give me your passwd(encrypted and xored by r)\n")
    rr = int(server_shell.recvline())
    prefix = long_to_bytes(pwd ^ rr)
    assert(len(prefix) == 11)
    y1 , y2 = pubenc.encrypt(pwd ^ rr)
    server_shell.sendline(str(y1) + ', ' + str(y2))
    server_shell.recvuntil("now let's communicate with this key\n")
    y1,y2 = [int(i) for i in server_shell.recvuntil("\n", drop = True).decode("utf-8").split(", ")]
    print(y1,y2)
    success("Get communicate key:" + str(y1) + "," + str(y2))
    l = 0
    h = 2**40
    idx = 0
    prefix_length = 0
    bound = 2**40
    count = 0
    flag = False
    for _ in range(11):
        if flag:
            break
        binary_ptr = 0x80
        diff = binary_ptr // 2
        assert_arr = [-1] * 256
        for i in range(10):
            count += 1
            if binary_ptr != 0 and assert_arr[binary_ptr-1] ^ assert_arr[binary_ptr] == 1:
                prefix_length += 1
                l = bound // multiple
                h = bound // (multiple - 1)
                idx = multiple - 1
                print(hex(l),hex(h),count)
                bound *= 0x100
                if abs(h - l) 