# Title: In God We Trust, All Others We Monitor
# Authors: Patrick Stewin and Jean-Pierre Seifert

## Abstract
Modern x86 platforms offer stealth capabilities that are exploited by rootkits to hide malicious code. Recently, security researchers discovered a powerful, isolated execution environment for rootkits, referred to as "ring -3." This environment is inaccessible to traditional security mechanisms such as antivirus software, which operate at a less privileged level. Government agencies could potentially use "ring -3" to deploy Remote Forensic Investigation Software (RFIS) to covertly monitor suspects, raising significant privacy concerns. This paper aims to highlight the risks associated with this technology and proposes a proof-of-concept (PoC) keystroke logger to identify countermeasures. The PoC can read the entire host memory from within the "ring -3" environment.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—invasive software; K.4.1 [Computers and Society]: Public Policy Issues—abuse and crime involving computers, Privacy

## General Terms
Security

## Keywords
Antivirus, Stealth Federal Trojan, GovWare, iAMT, Northbridge, Remote Forensic Investigation Software (RFIS), Intel x86, Covert Communication Channel

## 1. Introduction
The 9/11 terrorist attacks in the U.S. have led to the development of various federal and national investigation tools for covert communication and government surveillance. These include Carnivore, Magic Lantern, and the Computer and Internet Protocol Address Verifier. Due to the secretive nature of these tools and varying international laws, technical details are often limited. However, most Remote Forensic Investigation Software (RFIS) share similarities with classical Trojans, particularly in their stealth capabilities.

In this work, we explore whether provably stealthy government Trojans can exist. Our examination is based on a PoC implementation of a keystroke logger.

### 1.1 Motivation
This research is motivated by the increased surveillance efforts by governments, especially following the 9/11 attacks. The German government, in particular, has faced criticism for its plans to secretly monitor citizens using their private computers, leading to protests and discussions about privacy. The term "Stasi 2.0" has emerged to describe these concerns.

### 1.2 Contribution
We demonstrate how existing mass technology, such as the x86 platform, can be used to develop nearly undetectable government software (GovWare), posing serious privacy risks. Our objectives are to evaluate the feasibility of:
- (O1) Stealth infiltration of the target platform,
- (O2) Stealth GovWare Trojan,
- (O3) Stealth authentic outbound channel.

We show two methods for stealthily placing GovWare, a high-privileged keystroke logger, and a covert communication channel. Our PoC implementation, which is more stealthy than previous solutions, highlights the potential impact on user privacy, especially given the widespread use of the x86 platform.

## 2. PoC Target Platform: x86
x86 platforms support a privilege model called protection mode, with four rings. Only ring 0 (kernel space) and ring 3 (user space) are typically used. Kernel space code has more privileges than user space code.

Rootkits, which are known for their stealth capabilities, have evolved to exploit these rings. With the introduction of hardware support for hypervisors, the term "ring -1" was coined. Further, the System Management Mode (SMM) was referred to as "ring -2," and a new, highly privileged environment, "ring -3," was recently discovered. Common virus scanners cannot access "ring -3" due to its isolation.

"Ring -3" is intended for Intel's Active Management Technology (iAMT), which supports hardware-based security and remote management. This environment includes read-only memory (ROM), static random access memory (SRAM), DMA hardware, and an additional processor embedded in the northbridge. It operates independently of the power state and uses a Management Engine (ME) with an ARCtangent-A4 (ARC4) processor. iAMT introduces out-of-band (OOB) communication, providing a special network traffic channel.

We utilized this "ring -3" environment to hide our PoC implementation from the host system.

## 3. PoC: Stealth Keystroke Logger GovWare
### Infiltration
To stealthily infiltrate the target platform, we considered two methods: exploiting a security vulnerability or cooperating with the hardware vendor. Given that our target is an Internet-connected x86 platform, we can attempt remote exploitation. Alternatively, governments might collaborate with vendors, as seen in examples like Microsoft's cooperation with agencies.

### Data Collection
After infiltration, the GovWare can start collecting data. Our goal was to log keystrokes from USB keyboards. We analyzed the Linux kernel's USB implementation and developed a heuristic to find and monitor the physical address of the DMA-based keyboard buffer using the "ring -3" environment. Our keystroke logger, shown in Figure 1, can read from host memory, unlike previous rootkit implementations.

### Exfiltration
Our PoC currently lacks the ability to transmit logged keystrokes to a remote party. We are working on utilizing iAMT's network capabilities to send network packets and establishing a covert communication channel to avoid detection.

## 4. Conclusion
Our initial results indicate that modern x86 platforms have the potential to be turned into stealth government Trojans under certain conditions. We need to complete our PoC implementation and conduct a detailed evaluation of its stealthiness. Based on the results, we will develop countermeasures to mitigate the threat of this technology, which could place citizens under general suspicion.

## 5. Acknowledgments
The authors would like to thank Benjamin Michèle, Collin Mulliner, Dmitry Nedospasov, Vassilis Ververis, Matthias Lange, and Steffen Liebergeld for their help and support in this work.

## 6. References
[1] E. Abreu. FBI confirms “Magic Lantern” Project exists. http://www.si.umich.edu/~rfrost/courses/SI110/readings/Privacy/Magic_Lantern.pdf, Dec. 2001. Found at: School of Information – University of Michigan.
[2] R. Bendrath, G. Hornung, and A. Pfitzmann. Surveillance in Germany: Strategies and Counterstrategies. Userpage Ralf Bendrath: http://userpage.fu-berlin.de/~bendrath/Bendrath-Hornung-Pfitzmann_Surveillance-in-Germany_2009.pdf, June 2009.
[3] Y. Bulygin. Chipset based Approach to detect Virtualization Malware. TuCancUnix: http://www.tucancunix.net/ceh/bhusa/BHUSA08/speakers/Bulygin_Detection_of_Rootkits/bh-us-08-bulygin_Chip_Based_Approach_to_Detect_Rootkits.pdf, 2008.
[4] Electronic Privacy Information Center. Carnivore. http://epic.org/privacy/carnivore/default.html, Jan. 2005.
[5] Federal Bureau of Investigation. Declassified FBI CIPAV spyware documents. wired.com, Free Archive: http://www.freearchive.org/o/90a083d1cd08b540693a4458543d8ac1ca4ca752ed67845986f3476921bf83ef/info, Apr. 2009.
[6] Guidance Software. EnCase Forensic. http://www.guidancesoftware.com/computer-forensics-ediscovery-software-digital-evidence.htm.
[7] K. J. Higgins. Microsoft Forensics Tool For Law Enforcement Leaked Online. DarkReading: http://www.darkreading.com/security/vulnerabilities/showArticle.jhtml?articleID=221600872&cid=ref-true, Nov. 2009.
[8] A. Lineberry. Malicious Code Injection via /dev/mem. Black Hat Europe: http://www.blackhat.com/presentations/bh-europe-09/Lineberry/BlackHat-Europe-2009-Lineberry-code-injection-via-dev-mem.pdf, Mar. 2009.
[9] Microsoft Corporation. Solutions Center for Government: Computer Online Forensic Evidence Extractor (COFEE). http://www.microsoft.com/industry/government/solutions/cofee/default.aspx.
[10] J. Rutkowska. Subverting Vista kernel for fun and profit. Black Hat USA: http://blackhat.com/presentations/bh-usa-06/BH-US-06-Rutkowska.pdf, Aug. 2006.
[11] Y. Saint-Hilaire. Extreme Programming with Intel vPro Technology: Pushing the Limits with Innovative Software. Intel Technology Journal, 12(4):335 – 342, Dec. 2008.
[12] A. Tereshkin and R. Wojtczuk. Introducing Ring -3 Rootkits. ITL: http://www.invisiblethingslab.com/itl/Resources.html, July 2009.
[13] R. Wojtczuk and J. Rutkowska. Attacking SMM Memory via Intel CPU Cache Poisoning. ITL: http://invisiblethingslab.com/itl/Resources.html, Mar. 2009.

## Figures
Figure 1: Keystroke Logger executed in Isolated Execution Environment
Figure 2: Keystroke Logger Demo: Online Banking Sign On