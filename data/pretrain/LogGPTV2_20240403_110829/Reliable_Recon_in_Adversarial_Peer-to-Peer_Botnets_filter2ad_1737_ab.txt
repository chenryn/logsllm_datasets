Storm
-
Goodcount
-
-
-
-
Peer list
Peer list
Peer list
Relay list
Relay list
Proximity
-
-
Peer push
-
-
-
XOR metric By rate Manual
-
-
Relay core
-
XOR metric
-
Manual
-
-
-
-
-
-
-
-
-
-
Junk
-
-
Rogue
After attack
-
-
-
-
After attack
Table 1: Anti-recon measures observed in P2P botnets.
dresses, such as reserved or unused IP addresses. In addition,
Storm is known to have contained many rogue nodes, which
also served to pollute exchanged peer lists [6]. Overall, cur-
rent P2P botnets do not yet engage in disinformation on a
large scale, but there is a real risk that future P2P botnets
may engage in this strategy, especially as it has already been
explored in detail in prior work [37]. We believe recon tools
should implement measures to prevent this kind of attack,
as it is quite diﬃcult to detect once deployed in full-scale.
3.4 Retaliation
Retaliation is another category of active attack, in which
botmasters take action to disable or compromise hosts used
for reconnaissance. Retaliatory actions include denial-of-
service attacks, as used by the GameOver Zeus botmasters
in response to sinkholing attempts [4], and active inﬁltration
or exploitation of hosts used for recon. Repeated denial-of-
service attacks have also been observed in the Storm botnet,
in response to takedown/inﬁltration attempts [6].
4. RECON ANOMALIES
This section analyzes the stealthiness of crawlers and sen-
sors used in GameOver Zeus and Sality v3. Unstealthy re-
connaissance tools expose themselves to an increased risk of
the attacks discussed in Section 3. Section 4.1 discusses pro-
tocol anomalies found in crawlers, while Section 4.2 discusses
sensor anomalies. In Section 4.3, we design a syntax-agnostic
algorithm to detect crawlers based only on network coverage.
4.1 Crawler Protocol Anomalies
We base our crawler analysis on data gathered by 512
sensor nodes in the Zeus network (before it was sinkholed),
and 64 sensors in Sality (the number is limited by Sality’s peer
management scheme and our IP range). We announced these
sensors for two days, and then ran them passively for three
weeks, until the combined sensor in-degrees matched botnet
size estimates [28], ensuring reachability by all crawlers. Our
sensor implementations included only protocol logic, and no
malicious logic, and we veriﬁed the legality of our tactics
with law enforcement oﬃcials.
We identiﬁed crawlers using protocol-speciﬁc anomaly de-
tection on our sensor data, looking for peers with deviations
from normal bot behavior. To deﬁne normal behavior, we
reverse engineered Zeus and Sality to establish a ground
truth. Next, we cross-veriﬁed our list of detected crawlers
to ensure that crawlers from our anti-malware industry con-
tacts were all correctly detected. While it is impossible to
obtain a complete ground truth of crawlers in a live botnet,
we established the signiﬁcance of our results by attributing
analyzed crawlers to large malware analysis companies, net-
work security companies, CERTs, and (academic) researchers.
We attributed crawlers using WHOIS data, protocol-speciﬁc
information (such as bot IDs revealing company names),
c1
✓
✓
✓
c2
c3
c4
c5
c6-
c11
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
LOP range
Port range
Random ID
Version
Hard hitter
Protocol logic
Encryption
Coverage (%)
69
100
100
100
100
100
Table 2: Defects found in Sality crawlers.
and inquiries with contacts in the community. We informed
aﬀected parties via closed mailing lists.
We study only well-functioning crawlers which cover at
least 1% of the bot population (≥ 50 messages to our sensors),
with the addition of one open-source Zeus crawler belonging
to a large network security company. The resulting list of
crawlers found by our anomaly detection includes 21 Zeus
crawlers and 11 Sality crawlers. We summarize the defects
found in these crawlers in Table 2 for Sality, and Table 3 for
Zeus (anonymized to avoid revealing IPs used by malware
analysts). Note that 6 of the 11 Sality crawlers are grouped
together into a single column, as these were all running in
the same subnet and exhibited the same characteristics (i.e.,
multiple instances of the same crawler).
The rest of this section discusses the results from Tables 2
and 3 in detail. We organize the results into several classes of
common defects, each of which undermines crawler stealthi-
ness, and increases attack vulnerability.
4.1.1 Range Anomalies
Crawlers with range anomalies exhibit static or constrained
values for message ﬁelds that should be randomized. Ad-
ditionally, range anomalies can occur when crawlers use
random values for non-random ﬁelds. Our results show that
range anomalies are the most common class of defects in
Zeus crawlers. We found at least one range anomaly in 20 of
the 21 analyzed crawlers.
The Zeus message header contains several ﬁelds which
are normally randomized. These include a random byte
at the beginning of each message, the Time to Live (TTL)
ﬁeld which is randomized when unused, and the Length
of Padding (LOP) ﬁeld, which indicates the length of the
random padding at the end of the message. Furthermore,
a random session ID is generated for each request-response
pair. In 14 crawlers, the padding length was constrained,
possibly to reduce bandwidth usage by limiting the number
of padding bytes at the end of each message. Additionally,
static or constrained random bytes and TTL values each
occurred in 10 crawlers, and 11 crawlers used static session
IDs, or rotated between a small number of session IDs.
132c1
c2
c3
✓
✓
✓
✓
c4
✓
✓
✓
✓
c5
✓
✓
✓
✓
c6
✓
✓
✓
✓
c7
✓
✓
✓
✓
c8
✓
✓
c9
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
RND range
TTL range
LOP range
Session range
Session entropy
Random source
Source entropy
Padding entropy
Abnormal lookup
Hard hitter
Protocol logic
Encryption
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Coverage (%)
90
82
85
75
84
20
53
62
1
8
92
44
85
92
92
Table 3: Defects found in GameOver Zeus crawlers.
c10
c11
c12
c13
c14
c15
c16
c17
c18
c19
c20
c21
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
54
87
86
2
27
✓
✓
88
On the other hand, we found that 3 Zeus crawlers used
random values for the source ID ﬁeld on each message, which
indicates the unique identiﬁer of the bot that sent the mes-
sage. Although a small variation in source ID per IP address
is normal, and can indicate multiple bots behind a NAT
gateway, these crawlers used over 1000 diﬀerent source IDs,
making them highly detectable.
Just as in Zeus, normal Sality messages end in a random
amount of padding. Nevertheless, in all but one of the
analyzed Sality crawlers, the padding length was set to a
ﬁxed value, and in the remaining crawler the padding length
was constrained to reduce bandwidth usage. Additionally,
10 of the 11 analyzed crawlers sent messages from a ﬁxed
port, while ordinary Sality bots use a randomized port per
message exchange.
Some types of Sality messages include a bot identiﬁer,
which normally does not change while the bot remains up. All
of the crawlers we analyzed adhered to these semantics, and
did not change their identiﬁers between messages exchanged
with our sensors.
4.1.2 Entropy Anomalies
Entropy anomalies occur when multi-byte ﬁelds that nor-
mally contain high-entropy content are set to non-random
values. In the Zeus protocol, such ﬁelds include the source
ID and session ID, which are SHA-1 hashes, and the random
padding bytes at the end of a message. We found 3 crawlers
with low-entropy session IDs, 5 crawlers with non-random
padding bytes, and 5 crawlers with low-entropy source IDs.