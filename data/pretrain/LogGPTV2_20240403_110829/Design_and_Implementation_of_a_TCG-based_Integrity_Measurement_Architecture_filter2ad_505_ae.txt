### SHA1 Fingerprint Handling in Measurement List

When a SHA1 fingerprint is already present in the measurement list, which is managed using a SHA1-keyed hash table of all existing measurements, the system checks if the fingerprint is known. If it is, the `measure` call returns immediately. If not, the module name is extracted from its ELF headers, located at the beginning of the memory area. The new measurement is then added to the measurement list, and the TPM register is extended to reflect the updated list.

Kernel modules must always be measured because there is no readily available information to indicate a dirty flag state. However, typically only a few kernel modules are loaded. Alternatively, user-level applications like `insmod` and `modprobe` can measure files when loading kernel modules into memory, following the same file measurement procedures described earlier.

### 5.3 Measurement Bypass-Protection

In scenarios where the measurement architecture cannot provide accurate measurements or is potentially being bypassed, the TPM aggregate is invalidated by extending it with random values without updating the measurement list. These random values are then deleted to prevent their later use. This ensures that any subsequent validation of the aggregate will fail against the measurement list. The system remains non-intrusive but disables successful attestation until a reboot occurs. In our experiments, these mechanisms were not triggered during normal system usage but only by malicious or highly unusual behavior.

Although we assume no hardware attacks on the TPM, our system is designed to detect and prevent undetected changes to the measurement list. A compromised system cannot manipulate the TPM successfully to cover such attacks in software. Thus, even in the absence of physical attacks, supporting our architecture with TPM hardware is essential to detect cheating systems. However, a user with root access could attempt to change the system through less-known interfaces, circumventing our measurement hooks and invalidating the measurements. Therefore, we have implemented fail-safe mechanisms to catch such efforts and invalidate the TPM aggregate pessimistically. Some of these mechanisms are discussed below.

#### Time-of-Measurement (ToM) and Time-of-Use (ToU) Race Conditions

File contents could theoretically be changed between the time they are measured and the time they are actually loaded. While Linux protects memory-mapped files, it does not protect normally loaded files (e.g., script files, configuration files). To address this, we implemented a counter in the inode of a measured file that tracks the number of open file descriptors pointing to this inode on which a `measure` call was induced. We increase the counter before calling the `measure` call and decrease it when a measured file descriptor is closed. A check in the `inode_permission` LSM hook catches requests for write or append permissions on files whose related inode has a measure count > 0. In such cases, the TPM aggregate is invalidated, as the measurements might not reflect the actual file contents loaded, but the request is allowed to proceed. We assume such behavior is malicious.

#### Bypassing User-Level Measurements

To ensure that `measure` requests issued by applications result in actual measurements in the kernel, we must ensure that the `/sys/security/measure` node is the one that issues measurements on write. The only way to circumvent this without leaving a suspicious fingerprint in the measurement list is to prevent the system from mounting the `sysfs` filesystem or to unmount it after it is mounted using unsuspicious programs. We prevent the first by ensuring `sysfs` is mounted before `init` starts (during kernel startup) and the second by keeping `sysfs` in a busy state so it cannot be unmounted by root.

#### Bypassing Dirty Flagging

Root processes could try to bypass dirty flagging and change file content between measurement and loading or modify otherwise trusted applications or the kernel in memory by accessing special storage control interfaces (e.g., `/dev/hda`) or the memory interface (`/dev/kmem`). We catch such attempts and invalidate the TPM aggregate. This is necessary to prevent the kernel from being changed without the change being measured. Such suspicious cases are rarely observed in normal systems.

#### Unmounting File Systems

We mark any measurement belonging to a file system being unmounted as dirty because we lose control over changes to this file system. Hot-pluggable hard drives could be changed and reinserted with altered files. For this purpose, we keep the superblock pointer of a file in the file's measurement structure. Walking through the entire measurement list to mark entries related to the mount point imposes overhead, but this happens rarely (e.g., during shutdown) on correctly configured systems, and measurement lists are usually small (<<1000 entries).

#### Run-Time Errors in Measurement Functions

In case of any errors during the recording of measurements, such as out-of-memory errors when allocating a new measurement structure or other unexpected events, the TPM aggregate is invalidated.

### Summary of Measurement Functions

The measurement functions use the pseudo filesystem `sysfs`, the kernel LSM hook `file_mmap`, and an inserted `measure` call in the `load_module` kernel routine to instrument the system with measurement points. We use the LSM hooks `inode_permission`, `sb_umount`, `inode_free_security`, and `file_free_security` to implement dirty flagging and protect against ToM-ToU race conditions. We store state information, such as dirty flags and measure counts, in the LSM security substructures of the file and inode kernel structures.

### 5.4 Validating Measurements

Our architecture uses the TPM’s protected storage to ensure the integrity of the measurement list. Once a measurement is taken, it cannot be changed or deleted without causing the aggregate hash of the measurement list to differ from the TPM aggregate. The challenging party must also ensure that the attesting system has the measurement architecture correctly in place to initiate and carry out all necessary measurements. Since architectural components are measured when executed, challenging parties can determine whether the architecture is in place by inspecting these measurements.

The majority of the measurement architecture is in the static kernel. Thus, challenging parties trust only kernels that implement the kernel part of our measurement architecture. Other kernels are unacceptable because they can skip important measurements.

If `insmod` and `modprobe` programs measure kernel modules before they are loaded into the kernel, only those instrumented with the `measure` call are acceptable. If a fingerprint of any other program with `insmod` functionality is seen, it must not be trusted, and validation fails. This does not apply in our case because we measure kernel modules in the kernel. If we require shell programs to measure script and source files before they are loaded or executed, discovering a fingerprint of a shell not instrumented with `measure` calls must not be trusted. Known fingerprints of other system parts can be trusted according to known vulnerabilities of corresponding executables. Unknown fingerprints could result from changed user-level programs that are assumed to measure their input (e.g., `bash`), or unacceptable input files, and cannot be trusted as their corresponding program’s functionality is potentially malicious and might violate security assumptions.

### 6. Results

#### 6.1 Experiments

To test our system’s ability to detect possible attacks, we conducted an experiment using `lrk5`, a popular Linux rootkit. We started with a clean target system and took measurements. After launching a rootkit attack, we took measurements again. Figure 4(a) shows a partial list of measurements for the good system, and Figure 4(b) shows the corresponding list for the compromised system. The italicized entries show that the signature of the `syslogd` program is different, indicating that the rootkit replaced the original `syslogd` with a Trojan version. This example illustrates how such attacks can be reliably detected using our system.

#### 6.2 Performance Evaluation

We examined the performance of the `measure` function invoked through:
1. The kernel `file_mmap` LSM hook.
2. User-space applications writing `measure` requests into `/sys/security/measure`.
3. The kernel `load_module` function.

**Figure 4: Detecting a Rootkit Attack**

We first examined the overhead of the `file_mmap` LSM security hook, which measures all executable content and dynamic libraries. This is the most frequently called and performance-sensitive measure hook. To determine the latencies, we measured the latencies of the `mmap` system call from user level, which calls the `file_mmap` LSM hook. Our latency measurement (including both mapping and unmapping) considered three cases: `no_SHA1`, `SHA1`, and `SHA1+extend`.

- `no_SHA1`: The target is found in the cache as clean.
- `SHA1`: The target file is remeasured, and the SHA1 fingerprint is recalculated, but the TPM is not extended.
- `SHA1+extend`: A new file is measured, and the resulting fingerprint is extended into the TPM chip.

Table 1 shows the results:

| mmap type     | no_SHA1       | SHA1         | SHA1+extend  | Reference   |
|---------------|---------------|--------------|--------------|-------------|
| mmap latency  | 1.73 µs (0.0) | 4.21 µs (0.0)| 5430 µs (1.3)| 1.65 µs (0.0)|
| file mmap LSM | 0.08 µs       | 2.56 µs      | 5430 µs      | n/a         |

For reference, we included the running time of an `mmap` system call without invoking the `file_mmap` LSM measurement hook. The overhead for the `file_mmap` LSM hook in the case of a clean cache hit (`no_SHA1`) is minimal, taking 0.08 µs. This is the majority case, even for servers, accounting for more than 99.9% of all measure calls.

When the file is remeasured (`SHA1`), the `mmap` system call takes about 4.21 µs, an overhead of about 2.5 µs. This case shows the overhead of setting up the file for measurement and searching the hash table for a matching fingerprint. The extend operation is the most expensive, taking about 5 milliseconds. This is understandable, as the extend operation interacts with the TPM chip and creates a new measurement list entry. These two cases together represent less than 0.1% of all measure calls, confirming that the performance penalty is negligible.

**Table 2: Latency of Measurements via sysfs**

| Measure via sysfs | no_SHA1       | SHA1         | SHA1+extend  |
|-------------------|---------------|--------------|--------------|
| Open              |               |              |              |
| Write             |               |              |              |
| Close             |               |              |              |

This method applies to measuring configuration files or interpreted script files (e.g., bash scripts or source files). As with the `file_mmap` LSM hook, we distinguish the three cases: `no_SHA1`, `SHA1`, and `SHA1+extend`. The results are shown in Table 2.