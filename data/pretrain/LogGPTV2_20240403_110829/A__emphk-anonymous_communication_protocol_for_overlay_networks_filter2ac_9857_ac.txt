transmitted initialization packets increase by one at each
hop, while the size of packet decreases gradually. Finally, the
starting node receives n dummy messages that have uniform
size. These n dummy messages form the message batch.
Detection of Packet Modiﬁcation: A node may get a neg-
ative result when it checks the M AC of a received initial-
ization packet. The attacker can be the previous hop node
who modiﬁes the packet or the packet’s original sender who
intently conceals a wrong M AC. To detect the attacker,
the receiver, e.g., node B in ﬁgure 2, immediately reports
an error about the received packet, i.e., broadcasting the
received initialization packet and the decrypted KA1, SID
and M ACA1. The other nodes can verify the error report be-
cause (i) PA1 is signed by node A and thus is non-repudiated,
and (ii) the encryption of (broadcast) KA1, SID and M ACA1
using node B’s public key should equal the ﬁrst key vector
slot of PA1. Node B’s previous hop (node A) then needs
to prove it forwarded the packet correctly, i.e., to show a
received packet whose forwarding result should be PA1 and
the decryption of the ﬁrst key vector of this packet. If node
A cannot show the corresponding packet, it is identiﬁed as
the attacker. Otherwise, the detection continues until one
upstream node cannot prove it forwarded the packet cor-
49
ABCDEFHGPA3PA1=PKB{KA1 , SID, MACA1}        || KA1{PKC{KA2 , SID, MACA2}}||...       || KA1{…KA7{PKA{KA8, SID, MACA8}}...}       ||KA1{…KA8{Dummy Message}...}PA2=PKC{KA2 , SID, MACA2}       || KA2{PKD{KA3 , SID, MACA3}} || …       || KA2{…KA7{PKA{KA8, SID, MACA8}}...}       ||KA2{…KA8{Dummy Message}...}PB1=PKC{KB1 , SID, MACB1} || ...        || KB1{…KB6{PKA{KB7, SID, MACB7}}...}       ||KB1{…KB7{Dummy Message}...}}Key VectorA slot of key vectorPA1PA2PB1PB2PC1After that, node B generates a commitment of assigned
key chains. This commitment is signed by node B. It con-
tains the current session ID, the current batch ID, a batch
counter whose value is set to 0, and the n decrypted key-
chain keys {RAB1, RBB1, ..., RHB1}. Node B broadcasts the
commitment locally. Once a node receives node B’s com-
mitment, it checks whether this commitment includes the
key-chain key it assigns to node B. If true, the node buﬀers
this commitment. Otherwise, it means the node’s previous
initialization packet/message was replaced by some node.
The victim node starts the detection of packet replacement.
Detection of Packet Replacement: The victim node, e.g.,
node B, asks all nodes in the ring to broadcast their buﬀered
packets/messages. By emulating the propagation of its pre-
vious initialization packet/dummy message and comparing
the emulation results with the broadcast packets/messages
at each hop, node B can locate the adversary. It next reports
the adversary by broadcasting its input packet/message at
the adversary and the decryption result of the ﬁrst slot of
this input packet/message. For instance, if PB1 was mali-
(cid:48)
ciously replaced by node C in ﬁgure 2, i.e., node C sent P
B2
instead of PB2 to the next hop, node B broadcasts PB1,
KEB1, SID and M ACB1. The other nodes can verify the
authority of the report as presented previously. They calcu-
late the correctly forwarded packet PB2 based on PB1 and
KEB1. If they cannot ﬁnd PB2 in node D’s received pack-
ets, the nodes revoke node C from the ring and restart the
transmission initialization.
We notice that the key chain used by a node to identify
its own messages might collide with the one assigned by
another node, e.g., RBBi = REBi. Such a collision may
cause the sender cannot correctly recognize its own messages
and thus break the anonymous communication. We address
that the probability of the collision is ignorable according
to the birthday paradox, as the length of a key-chain key
is large (≥160 bits) and the number of nodes in a
RXYi
ring is small (nME1ME9ME2ME10ME11ME3ME4ME12ME5ME6ME7ME8Slot rotationA also cannot link R0 with a speciﬁc (honest) node with a
probability signiﬁcantly better than random guessing.
4.2.2 Message Transmission along the Ring
In this part, we show how a sender uses the message batch
constructed as above to anonymously send a message to a
node in the local ring. That is when a node receives the
message batch from its previous hop, it ﬁrst increases the
local counter (e.g., t and it is used to record the number
of message batch received in current session) by one. The
node then decrypts the ﬁrst key vector slot of each received
message using its private key. It next checks whether the
hash values of the decrypted key-chain keys (RXYi ) one-to-
one match with the previously buﬀered ones (i.e., whether
the message batch contains exactly one message from each
node in the ring). For instance, H(REB2) in ﬁgure 3 should
equal the previously buﬀered REB1. Such a checking also
prevents the modiﬁcation or replay attacks. If the checking
result proves negative, it means there is an adversary who ei-
ther maliciously modiﬁed/replayed the transmitted packets
or set a trap for the node, e.g., node E in ﬁgure 3 encrypts
(cid:48)
EB2 instead of the correct REB2 in message ME5. The
R
node starts the detection of adversary.
Detection of Adversary: Given the hash value of decrypted
key-chain key RXYi in a received message M does not match
with any (previously) buﬀered ones, the node broadcasts a
report about M . This report contains M and the decryption
of M(cid:48)s ﬁrst key vector slot. The other nodes can verify the
authority of the received report, i.e., the decryption is cor-
rect based on the node’s public key and Ht(RXYi ) should
but does not equal any element in the node’s (previously
broadcasted) key chain commitment. Next, the previous
hop node should prove that M is a forwarded form of its re-
ceived message M∗, i.e., broadcasting a report about M∗. If
the previous hop node cannot show a valid report, it means
it is the adversary. Otherwise, the detection continues until
one upstream node cannot show a valid report. This up-
stream node is identiﬁed as the adversary who is the sender
of M , recalling that each key vector slot contains a M AC
and thus any malicious modiﬁcation of a transmitted mes-
sage will be discovered by the next hop node of the adver-
sary. The nodes revoke the adversary from the ring and
start a new session. Similarly, if multiple received messages
have the same decrypted key-chain keys, the node broad-
casts theses messages and the decryption results of their
ﬁrst key vector slots. The other nodes detect the adversary
as just presented, i.e., the upstream nodes need to prove
they forwarded the received message batch correctly.
If the hash values of decrypted key-chain keys one-to-one
match with the buﬀer ones, the node updates its buﬀered
key-chain keys with the new ones. It next veriﬁes the in-
tegrity of each received message using the decrypted M AC.
If the M AC of a message proves incorrect, it means ei-
ther the message was modiﬁed by the previous hop or the
message sender sets a trap. The node starts the detection
of packet modiﬁcation as presented above. Otherwise, the
node updates its previously buﬀered messages with the re-
ceived ones and continues processing the received messages.
For each message in the received message batch, the node
knows whether it is the original sender of this message based
on the key-chain key RXYi decrypted from the ﬁrst key vec-
tor slot. If the node is the sender, it replaces the message
with a new one as illustrated by ME5 in ﬁgure 3. Otherwise,
the node uses the decrypted secret key (K) to decrypt the
rest key vector slots and the encrypted payload. If the RF
ﬂag in the ﬁrst key vector slot is set, the node extracts the
payload, as it is the targeted receiver. The node then re-
places the ﬁrst key vector slot with f (Ni), rotates the slots
one step leftwards, removes the previous signature, and re-
signs the changed message. After that, the node sends the
processed messages to the next hop at a random order.
Lemma 3. Given all nodes in the ring publish their key
chain commitments correctly, it is computationally infeasible
for an adversary to successfully modify/replay an (honest)
node’s message. As a result, the message batch contains
exactly one message from each node in the ring.
Proof. (Sketch) Assume an adversary A modiﬁes/replays
an (honest) node’s message M0 in the received message
batch, i.e., it forwards (cid:103)M1 instead of the correct one M1
to the next hop (honest) node B, and node B accepts (cid:103)M1.
key vector of (cid:103)M1 must contain the key-chain key Rj that
(cid:103)M1 is a new message, i.e., not a replayed one. The one-way
Due to the one-to-one relationships between the decrypted
key-chain keys and the previously buﬀered ones, the ﬁrst
matches with previously buﬀered Rj−1. The order of key-
chain keys in the one-way key chain ensures the received
property of the one-way function H makes it computation-
ally infeasible to calculate Rj from Rj−1, even if A knows
Rj−1. Also, Rj and the other variables are encrypted us-
ing B’s public key, it is computationally infeasible for A to
calculate Rj from M1 without knowing the corresponding
private key, recalling the semantic security of the public key
as that in M1. As this ﬁrst key vector contains a message
authentication code of M1, the rest key vectors and the
encryption. Thus, the ﬁrst key vector of (cid:103)M1 must be same
encrypted payload in (cid:103)M1 must be same as those in M1, as-
(cid:103)M1 must equal M1, otherwise, B will detect the violation
suming the authentication mechanism is secure. As a result,
of message authentication. This contradicts with our as-
sumption. It, therefore, proves an adversary cannot succeed
in message modiﬁcation and replay. As B has an assigned
key chain from each node in the ring, the received message
batch thus contains exactly one message from each node in
the ring, if it passes the veriﬁcation.
Lemma 4. The message replacement made by the sender
is computationally indistinguishable, if the ring has more
than one honest nodes.
Proof. (Sketch) Suppose an honest node S receives a
message batch B and B passes all veriﬁcations. As proved
in Lemma 2 and Lemma 3, B contains exactly one message
from each node in the ring, and a polynomial time adversary
A cannot link S with S’s input message Mo (in B) with a
probability better than random guessing. Given S replaces
Mo with Mn in its forwarded message batch, it is computa-
tionally infeasible for A to tell whether Mn is the decryption
of Mo using some unknown secret key K, even if A may be
able to link Mo with Mn as the messages originated from
the same sender, assuming the semantic security of symmet-
ric key encryption and the security of one-way function f ().
Therefore, A cannot link S with Mn with a probability bet-
ter than random guessing either. The message replacement
made by S is thus computationally indistinguishable.
51
4.3 Anonymous Communication between Ar-
bitrary Two Nodes
In previous subsection, we present the mechanism that al-
lows a node to anonymously send messages to another node
in the same ring. In this subsection, we show how to use
this mechanism to support the anonymous communication
between arbitrary two nodes in the network.
To anonymously communicate with a recipient that may
reside in a diﬀerent ring, the sender embeds the ID of the
destination ring into the anonymizing payload of its mes-
sage. The destination ring is the ring in which the recipient
resides. The sender then anonymously sends this message
to a (randomly selected) local super node as presented in
previous subsection, i.e., by setting the receiver ﬂag RF in
the corresponding key vector slot.
Once receiving the message, the selected local super node
extracts the destination ring ID. If the destination ring is
the local ring, i.e., the sender and the recipient are in the
same ring, the super node broadcasts the message locally.
Otherwise, it forwards the message to a super node in the
destination ring. The latter broadcasts the received message
to all nodes in its ring. The recipient thus receives the mes-
sage. As the sender’s message is indistinguishable from the
messages sent by other nodes in the message batch and the
local super node that forwards the message is not necessary
the sender, the sender is thus hidden among other nodes in
its ring. Similarly, the transmitted message is received by
all nodes in the recipient’s ring, the recipient is thus indis-
tinguishable from the other honest nodes in its ring.
A variant of anonymous communication is anonymous ﬁle
sharing in which the sender and the recipient not only need
to be hidden from the other nodes in the network, but also
need to be concealed from each other. The proposed proto-
col does support such anonymous ﬁle sharing, as the sender
only needs to know the ID of the ring in which the recipi-