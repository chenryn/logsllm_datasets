title:On the Pitfalls of End-to-End Encrypted Communications: A Study
of Remote Key-Fingerprint Verification
author:Maliheh Shirvanian and
Nitesh Saxena and
Jesvin James George
On the Pitfalls of End-to-End Encrypted Communications:
A Study of Remote Key-Fingerprint Verification
Maliheh Shirvanian, Nitesh Saxena, and Jesvin James George
University of Alabama at Birmingham
Email: maliheh, saxena, PI:EMAIL
7
1
0
2
l
u
J
7
1
]
R
C
.
s
c
[
1
v
5
8
2
5
0
.
7
0
7
1
:
v
i
X
r
a
ABSTRACT
Many widely used Internet messaging and calling apps, such as
WhatsApp, Viber, Telegram, and Signal, have deployed an end-to-
end encryption functionality. To defeat potential man-in-the-middle
attackers against the key exchange protocol, the approach crucially
relies upon users to perform a code verification task whereby each
user must compare the code (a fingerprint of the cryptographic
keys) computed by her app with the one computed by the other
user’s app and reject the session if the two codes do not match.
In this paper, we study the security and usability of this human-
centered code verification task for a prominent setting where the
end users are remotely located, and compare it as a baseline to a
potentially less frequent scenario where the end users are in close
proximity. We consider several variations of the code presentation
and code verification methods, incorporated into representative
real-world apps, including codes encoded as numbers or images,
displayed on the screen, and verbally spoken by the users. We
perform a carefully-designed human factors study in a lab setting
to quantify the security and usability of these different methods.
Our study results expose key weaknesses in the security and
usability of the code verification methods employed in the remote
end-to-end encryption apps. First, we show that generally most code
verification methods offer poor security (high false accepts) and low
usability (high false rejects and low user experience ratings) in the
remote setting. Second, we demonstrate that, security and usability
under the remote code verification setting is significantly lower
than that in the proximity code verification setting. We attribute
this result to the increased cognitive overhead associated with
comparing the codes across two apps on the same device (remote
setting) rather than across two devices (proximity setting). Overall,
our work serves to highlight a serious fundamental vulnerability of
Internet-based communication apps in the remote setting stemming
from human errors.
1 INTRODUCTION
Many widely deployed Internet-based messaging and calling ap-
plications, such as WhatsApp [14], Viber [12], Telegram [10] and
Signal [8], have deployed an end-to-end encryption (E2EE) feature,
to hide the communications from the attackers and even from the
service providers. Using this approach, all the communication be-
tween the end users gets encrypted/authenticated with a key held
only by the communication parties. To share the secret key, the
end users run a key exchange protocol (e.g., [7, 9, 16, 35]) over the
insecure public Internet (or a channel controlled by the application
service provider). The key exchange protocol then results in an ini-
tial master key that is used subsequently to generate session keys
for encrypting all the messages, including text, data, and voice.
1
In contrast to typical client-to-server encryption or PKI-based
secure communication (e.g., TLS), E2EE reduces the unwanted trust
onto third parties (e.g., an online server), because such services
may themselves get compromised, be malicious or under the coer-
cion of law enforcement authorities. However, the key exchange
protocol runs over unauthenticated insecure channel and is there-
fore susceptible to a Man-in-the-Middle (MITM) attack [1, 36]. To
defeat potential MITM attacks against the key exchange protocol,
E2EE apps compute a readable/exchangeable “security code” (a
fingerprint of the key exchange protocol) that is used to provide
end-to-end authentication.
The E2EE apps crucially rely upon the users to perform a code
verification task whereby each user exchanges and compares the
security code computed on her end with the one computed by
the peer’s device, and must reject the session if the codes do not
match. In this context, the failure of the users in matching the codes
(i.e., accepting completely or partially mismatching codes) will be
catastrophic in terms of security as it will lead to the success of the
MITM attacker and exposure of all communicated messages. The
users are usually in possession of only their mobile devices using
which the communication takes place, not any other devices or aids
(such as paper-pencil), during this code verification task.
Remote vs. Proximity Code Verification: Security code verifica-
tion has long been used in multiple security applications, primarily
by the users that are located in a close physical proximity (e.g., in
device pairing [27] and decentralized trust management [18] appli-
cations). However, Internet messaging and voice applications open
up an important area of remote communications for people who are
at distant locations, and have never met each other or are likely to
start communicating using the apps before they meet in person.
The remote communication paradigm presents many challenges
for code verification compared to proximity settings, especially due
to the lack of physical interaction between the users. Therefore, the
users are required to exchange the code over an auxiliary channel
(e.g., a voice call or an out-of-band channel such as SMS and email),
and then compare the codes across two apps (e.g., an SMS messaging
app and the E2EE app) on the same device. Such “cross-app compar-
isons” might impose cognitive burden on the users, since they may
be required to memorize the received code and compare it with
the one displayed on the E2EE app. In contrast, in the proximity
setting, code comparisons seem much simpler since the users are
close by and compare the codes across two devices. Figure 1 and 2
depicts the proximity and remote settings, respectively.
Our Focus—Security and Usability Study of Remote Code
Verification: In this paper, we study the security and usability of
the human-centered E2EE code verification specially in a “remote
setting”. As a baseline, we compare the results with a “proximity
Figure 1: Proximity setting (cross-device comparison)
Figure 2: Remote setting (cross-app comparison)
setting”. Although the security and usability of the code verification
for various security applications in a proximity setting has been
studied in literature before [21, 24, 27, 28, 34], to our knowledge,
this is the first study of the code verification in a potentially more
common remote setting in the context of end-to-end messaging
and voice apps.
We study several remote/proximity code presentation and veri-
fication methods covering approaches deployed by popular E2EE
apps, including, WhatsApp [14], Viber [12], Telegram [10], Signal
[8], Threema [11], Wickr Me[15], and ChatSecure [2].
The founding hypothesis of our study is that remote code verifi-
cation will be highly error prone for end users to perform due to the
challenges associated with the remote setting outlines above. Our
goal is not to argue on the attackers’ ability to manipulate the code
(via either tampering with the key exchange protocol or tampering
with the out-of-band channel) or the amount of the manipulation,
but rather to mainly determine how well the users can detect the
mismatching codes in the presence of an attack that can partially
manipulate the code.
To test this hypothesis, we design a human factors study in a
controlled lab setting to measure the accuracy of the users in veri-
fying the security codes. In the study, we present the participants
with several matching codes, representing a benign, “attack-free”
scenario, and mismatching codes representing an MITM attack case.
For the security assessment, we use False Accept Rate (FAR) as our
metric specifying instances of accepting the mismatching codes by
the users. Failure of detecting the mismatching codes indicates the
success of the attack.
For the usability assessment, we quantify user perception
through System Usability Scale (SUS) questionnaires [20] and user
perception ratings. As an additional usability metric, we use False
Reject Rate (FRR) indicating the instances of rejecting the matching
codes or the benign case by the users. Rejecting the benign cases
may force the users to restart the protocol, and therefore, affects
the usability of the system as the process would need to be repeated
possibly annoying the users and delaying their communications.
For our security and usability assessments, we consider several
representative remote code presentations and code verification
methods, including, numeric and image codes exchanged over out-
of-band messaging channels (e.g., SMS and email), and verbally
spoken codes exchanged over Internet calls. In the proximity setting,
we consider the QR, compared almost automatically by the apps,
numeric and image code, compared visually by the users.
While our study involves several code presentation and verifi-
cation methods, the primary goal of our study is to compare the
remote setting with the proximity setting and not to compare be-
tween different methods.
An Important Aspect of Our Study Methodology: Since our
hypothesis is a negative one (i.e., we mainly expect the security
of E2EE apps to be relatively poor in the remote setting), we me-
thodically design our study tailored for the near best defense condi-
tions. To prove our hypothesis, we recruit 25 young, educated, and
technology-aware participants with reasonably good computer and
security background to perform the code verification task willingly
and diligently, and with full awareness of the security task, in a
controlled observable lab environment. Given that in the existing
applications, the code verification task is optional, in practice, the
attack might be more difficult to detect, especially for average users
who are not informed about the security risks of neglectful code ver-
ification, and may often skip or click through the code verification
procedure. Moreover, in our study, we set the code verification task
as the participants’ only primary task. In real-world, in contrast,
the code verification task will be a secondary task, the primary task
being setting up the communications. Thus, if our study partici-
pants do not perform well with a single task at hand, the real-life
would potentially do even worse since they have to manage two
tasks whereby the security task may not be the high-priority task.
This study design is in contrast to the traditional usability study
designs where the goal is to demonstrate that the system is secure
or usable, in which case there is a need to prove security/usability
by recruiting a large sample of users with average technical skills
and emulating real-world conditions as much as possible.
Our Primary Results: Our results are aligned with our hypothesis,
and show that the code verification methods deployed in E2EE apps
suffer from several security and usability issues arising from human
errors in verifying the codes in remote settings:
(1) Low Security for Remote Code Verification: All the remote
code verification methods have high FARs, ranging on average
from about 13% for image code verification to 40% for numeric
code verification. Further, if the attacker has more control over
the number of matching characters between an attacked code
and a legitimate code, the success rate of the attack would in-
crease. For instance, the FAR increases to about 60% in numeric
code verification, when only one digit is mismatching between
the codes. These error rates are exhibited by young educated
2
1. The users open the code veriﬁcation screen and compare the computed code on their screen with the one computed on the peer’s device (“cross-device code comparison”).2. The MITM attack succeeds if the two users fail to verify the mismatching codes.1. The users open the code veriﬁcation screen and transfer the code over an auxiliary channel.2. The users compare the computed code on their E2EE app screen with the one received from the peer’s device (“cross-app code comparison”).3. MITM attack succeeds if the users fail to verify mismatching codes.Transfer	
  the	
  code	
  over	
  an	
  auxiliary	
  channel	
  Internet	
  participants in a unidirectional authentication setting. In prac-
tice, users with more diverse background may perform worse
than the participants in our study. Also, the error rate increases
to almost double in a bidirectional authentication setting, where
the attacker may deceive any of the two parties in an E2EE
secure channel establishment session.
(2) Low Usability for Remote Code Verification: The results also
point out the usability issues with the remote code verification
methods. Except for the audio-based code verification, the other
remote schemes have about 20% FRR. Further, in terms of system
usability scale and the users’ personal ratings, results are indica-
tive of a poor user experience underlying the remote setting
(e.g., SUS scores around only 50%).
(3) Remote Setting vs. Proximity Setting: As our baseline con-
dition, we measured the security of the code verification in a
proximity setting, which shows that users could successfully
detect the benign and attack settings with negligible error rates.
However, in a remote setting which is the primary model of
the E2EE apps, the error rates—FAR and FRR—are (statistically)
significantly higher. Moreover, the user perception ratings in
the remote scenario were (statistically) significantly lower com-
pared to the proximity setting.
Generalizability and Broader Impacts: Overall, we believe that
our work highlights a serious fundamental vulnerability of a
broadly deployed and extensively used representative class of se-
cure Internet-based remote communication apps. This vulnerability
does not arise from the underlying cryptographic protocol or the
software implementation of the protocols, but rather from the hu-
man errors committed by naive users of these apps. It mainly stems
from the fact that, in the remote setting, comparisons of security
codes need to be performed across the apps, which is burdensome
for the users and thus highly error-prone. Such cross-app compar-
isons also significantly impact the usability of the code verification
process. Although our study focuses on many currently deployed
apps for a larger impact to real-world systems, our work is general-
izable in that it shows the security-usability pitfalls of cross-app
comparisons broadly applicable to the fundamental design of re-
mote E2EE code verifications.
Addressing this vulnerability and related usability issues will be
a challenging problem, but we hope that our work will encourage
the app designers to make necessary changes to their systems to
improve the levels of security and usability in the face of human
errors. Based on the results of the study, we also provide insights
and future directions for the designers of the apps to improve the
security and usability of their systems, without affecting the current
threat models.
2 BACKGROUND
2.1 End-to-End Encryption Apps
Recently, several instant messaging (IM) and Voice over IP (VoIP)
applications adopted the E2EE protocol to provide secure communi-
cation of messages/calls. Examples of such applications are Signal
[8], WhatsApp [14], Facebook Messenger [5], Google Allo [6], Viber
[12], Telegram [10], and Threema [11] (a more comprehensive list
can be found in Appendix A.3).
3
Different E2EE protocols have been proposed and implemented
by the apps targeting the specific needs and challenges facing the
IM and VoIP communications. Off-the-Record Messaging (OTR)
protocol [19] by Borisov et al. is an E2EE protocol specifically
designed for IM communication, with the goal of perfect forward
secrecy (PFS) through ephemeral key exchanges to avoid long-lived
keys, authenticity of the parties, non-deniability of the messages,
and confidentiality through encryption.
Many of the current E2EE applications are constructed on top
of OTR, however, they adapted OTR to work with asynchronous
transport (which is specific to the smartphone environment) [7].
The encryption protocol introduced by Open Whisper System is