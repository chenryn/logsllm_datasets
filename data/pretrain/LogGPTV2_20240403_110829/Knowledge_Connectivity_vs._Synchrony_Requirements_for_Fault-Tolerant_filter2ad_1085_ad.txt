### Algorithm Execution and Safety

Upon receiving the response (m) from \( p_j \):

1. If \( m.ack \) is true:
   - Add \( j \) to the set of responded nodes: \( i.responded = i.responded \cup \{j\} \).
   - If the number of responded nodes is at least \( |i.known| - f \):
     - Set \( i.in\_the\_sink \) to true.
     - Return \( (i.in\_the\_sink, i.known) \).
   - Otherwise, set \( i.in\_the\_sink \) to false and return \( (i.in\_the\_sink, i.known) \).

2. If \( m.ack \) is false, continue with the next steps.

#### Safety Proof

(i) **Node in the Unique k-Strongly Connected Sink Component:**

- Assume node \( p_i \) is in the unique k-strongly connected sink component.
- From Lemma 2, the COLLECT algorithm returns a list of all nodes reachable from \( p_i \) in \( G_{di} \).
- Consequently, nodes in the unique k-strongly connected sink will have the same view of the system, and the execution of line 9 will return the same \( i.known \) set to all nodes in the sink.
- In this case, every node \( p_j \) in the view \( i.known \) that executes line 13 will respond with an acknowledgment (ack) to \( p_i \)'s request (line 15).
- Thus, the condition in line 24 will never be satisfied.
- Since there are at least \( s = (|i.known| - f) \) correct processes in the system, at least \( s \) responses will be received by \( p_i \).
- Therefore, the condition in line 21 will eventually be satisfied, and the algorithm will terminate, returning true (lines 22-23).

(ii) **Algorithm SINK Returns True:**

- Assume the algorithm SINK returns true.
- Suppose, for contradiction, that \( p_i \) does not belong to the unique sink of \( G_{di} \).
- If that is the case, \( i.known \) is composed of processes belonging to other components than \( p_i \) (Lemma 2).
- By the connectivity of the graph, there are at least \( k \) nodes in each one of the \( m \) components in \( G_{di} \).
- Since \( f < k \), the number of faulty nodes is less than the number of nodes in any component.
- Nodes in the sinks are unaware of the existence of other nodes, and by the validity property of consensus, nodes in \( G_1 \) decide for the value \( v \) and nodes in \( G_2 \) decide for the value \( w \), violating the agreement and reaching a contradiction.

### Conclusion

In this paper, we investigated the trade-off between knowledge about the system and synchrony assumptions to enable consensus in fault-prone unknown systems. It turns out that if knowledge connectivity is k-OSR, then consensus can be solved with minimal synchrony assumptions. Our approach is constructive, and an interesting side effect is that the uniform version of the consensus can also be solved with no additional effort. This complements previous studies that showed complete synchrony was needed whenever only minimal knowledge connectivity (OSR) was available. Interestingly, the same previous solution did not enable uniform consensus.

### References

1. D. Cavin, Y. Sasson, and A. Schiper. "Consensus with Unknown Participants or Fundamental Self-Organization." In Proc. 3rd Int. Conf. AD-NOC Networks & Wireless (ADHOC-NOW), pages 135–148, Vancouver, July 2004. Springer-Verlag.
2. D. Cavin, Y. Sasson, and A. Schiper. "Reaching Agreement with Unknown Participants in Mobile Self-Organized Networks in Spite of Process Crashes." Research Report IC/2005/026, EPFL, 2005.
3. T. Chandra and S. Toueg. "Unreliable Failure Detectors for Reliable Distributed Systems." Journal of the ACM, 43(2):225–267, Mar. 1996.
4. T. D. Chandra, V. Hadzilacos, and S. Toueg. "The Weakest Failure Detector for Solving Consensus." Journal of the ACM, 43(4):685–722, July 1996.
5. F. Chu. "Reducing Ω to ♦ W." Information Processing Letters, 67(6):289–293, June 1998.
6. M. J. Fischer, N. A. Lynch, and M. D. Paterson. "Impossibility of Distributed Consensus with One Faulty Process." Journal of ACM, 32(2):374–382, Apr. 1985.
7. R. Guerraoui. "Indulgent Algorithms." In Proc. 19th ACM Symp. on Principles of Distributed Computing (PODC), pages 289–298, Portland, Jul 2000.
8. L. Lamport. "The Part-Time Parliament." ACM Transactions on Computer Systems, 16(2):133–169, May 1998.
9. S. Souissi, X. Défago, and M. Yamashita. "Gathering Asynchronous Mobile Robots with Inaccurate Compasses." In Proc. 10th Int. Conf. on Princ. of Distributed Systems (OPODIS), LNCS, Bordeaux, December 2006. Springer.
10. J. Yellen and J. Gross. "Graph Theory and Its Applications." CRC Press, 1998.

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 12:49:19 UTC from IEEE Xplore. Restrictions apply.**
**37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07) 0-7695-2855-4/07 $20.00 © 2007**