是以上一个程序为例，但初始化列表中缺少两个元素，如程序清单10.3所
示：
程序清单10.3 somedata.c程序
/* some_data.c -- 部分初始化数组 */
#include 
#define SIZE 4
int main(void)
{
int some_data[SIZE] = { 1492, 1066 };
int i;
printf("%2s%14s\n",   "i", "some_data[i]");
for (i = 0; i 
int main(void)
{
const int days[] = { 31, 28, 31, 30, 31, 30, 31, 31, 
30, 31 };
648
int index;
for (index = 0; index 
#define MONTHS 12
int main(void)
{
int days[MONTHS] = { 31, 28, [4] = 31, 30, 31, [1] 
= 29 };
int i;
for (i = 0; i 
#define SIZE 50
int main(void)
{
int counter, evens[SIZE];
for (counter = 0; counter 
#define SIZE 4
int main(void)
{
int value1 = 44;
int arr[SIZE];
int value2 = 88;
654
int i;
printf("value1 = %d, value2 = %d\n", value1, value2);
for (i = -1; i <= SIZE; i++)
arr[i] = 2 * i + 1;
for (i = -1; i < 7; i++)
printf("%2d %d\n", i, arr[i]);
printf("value1 = %d, value2 = %d\n", value1, value2);
printf("address of arr[-1]: %p\n", &arr[-1]);
printf("address of arr[4]: %p\n", &arr[4]);
printf("address of value1: %p\n", &value1);
printf("address of value2: %p\n", &value2);
return 0;
}
编译器不会检查数组下标是否使用得当。在C标准中，使用越界下标的
结果是未定义的。这意味着程序看上去可以运行，但是运行结果很奇怪，或
异常中止。下面是使用GCC的输出示例：
value1 = 44, value2 = 88
-1 -1
0 1
1 3
655
2 5
3 7
4 9
5 1624678494
6 32767
value1 = 9, value2 = -1
address of arr[-1]:  0x7fff5fbff8cc
address of arr[4]:  0x7fff5fbff8e0
address of value1:  0x7fff5fbff8e0
address of value2:  0x7fff5fbff8cc
注意，该编译器似乎把value2储存在数组的前一个位置，把value1储存
在数组的后一个位置（其他编译器在内存中储存数据的顺序可能不同）。在
上面的输出中，arr[-1]与value2对应的内存地址相同， arr[4]和value1对应的
内存地址相同。因此，使用越界的数组下标会导致程序改变其他变量的值。
不同的编译器运行该程序的结果可能不同，有些会导致程序异常中止。
C 语言为何会允许这种麻烦事发生？这要归功于 C 信任程序员的原
则。不检查边界，C 
程序可以运行更快。编译器没必要捕获所有的下标错
误，因为在程序运行之前，数组的下标值可能尚未确定。因此，为安全起
见，编译器必须在运行时添加额外代码检查数组的每个下标值，这会降低程
序的运行速度。C 
相信程序员能编写正确的代码，这样的程序运行速度更
快。但并不是所有的程序员都能做到这一点，所以就出现了下标越界的问
题。
还要记住一点：数组元素的编号从0开始。最好是在声明数组时使用符
656
号常量来表示数组的大小：
#define SIZE 4
int main(void)
{
int arr[SIZE];
for (i = 0; i < SIZE; i++)
....
这样做能确保整个程序中的数组大小始终一致。
10.1.5 指定数组的大小
本章前面的程序示例都使用整型常量来声明数组：
#define SIZE 4
int main(void)
{
int arr[SIZE];     // 整数符号常量
double lots[144];    // 整数字面常量
...
在C99标准之前，声明数组时只能在方括号中使用整型常量表达式。所
谓整型常量表达式，是由整型常量构成的表达式。sizeof表达式被视为整型
常量，但是（与C++不同）const值不是。另外，表达式的值必须大于0：
int n = 5;
657
int m = 8;
float a1[5];         // 可以
float a2[5*2 + 1];     //可以
float a3[sizeof(int) + 1]; //可以
float a4[-4];        // 不可以，数组大小必须大于0
float a5[0];         // 不可以，数组大小必须大于0
float a6[2.5];        // 不可以，数组大小必须是整数
float a7[(int)2.5];     // 可以，已被强制转换为整型常量
float a8[n];         // C99之前不允许
float a9[m];         // C99之前不允许
上面的注释表明，以前支持C90标准的编译器不允许后两种声明方式。
而C99标准允许这样声明，这创建了一种新型数组，称为变长数组
（variable-length array）或简称 VLA（C11 放弃了这一创新的举措，把VLA
设定为可选，而不是语言必备的特性）。
C99引入变长数组主要是为了让C成为更好的数值计算语言。例如，
VLA简化了把FORTRAN现有的数值计算例程库转换为C代码的过程。VLA有
一些限制，例如，声明VLA时不能进行初始化。在充分了解经典的C数组
后，我们再详细介绍VLA。