Domain Fronting is Dead,
Long Live Domain Fronting
Using TLS 1.3 to evade censors, bypass network 
defenses, and blend in with the noise
Erik Hunstad
Outline
0 
Domain Fronting 101
●
If you wish to make an apple pie from scratch, you must ﬁrst invent the universe 
●
To understand Domain Fronting, you must ﬁrst understand HTTP over TLS (aka HTTPS)
●
Server Name Indication (SNI) allows multiple sites to be hosted on the same IP
●
TLS 1.3 enables encrypted certiﬁcates and encrypted Server Name Identiﬁcation (ESNI)
●
DNS over TLS or HTTPS + TLS 1.3 = domain fronting 2.0 or “domain hiding”
HTTP Basics
●
First, a user requests the IP of a server via DNS
●
This is an unencrypted packet sent to UDP port 53
HTTP Basics
●
The DNS server responds with an IP address
●
The response is also unencrypted
HTTP Basics
●
The user sends a GET request, using the domain in the “Host” header
●
TCP port 80 - unencrypted
HTTP Basics
●
The server responds with HTML content
HTTP Basics
●
Obviously bad because nothing is encrypted
●
Both the DNS and HTTP request and response are in plaintext
HTTP Basics
●
Obviously bad because nothing is encrypted
●
Both the DNS and HTTP request and response are in plaintext
HTTPS Basics
●
Starts off the same way, a user requests the IP of a server via DNS
●
This is an unencrypted connection on UDP port 53
HTTPS Basics
●
The DNS server responds with an IP address
●
The response is also unencrypted
HTTPS Basics
●
The user sends a ClientHello to start the TLS handshake
●
Server uses the “server_name” ﬁeld (plaintext) to lookup how to respond
HTTPS Basics
●
The server responds with a certiﬁcate (in plaintext unless TLS 1.3) and completes the 
handshake
●
All data after the handshake is encrypted
HTTPS Basics
●
Much better than HTTP
●
Entire DNS process and the certiﬁcate exchange process are still unencrypted
HTTPS Basics
●
Much better than HTTP
●
Entire DNS process and the certiﬁcate exchange process are still unencrypted
Domain Fronting
●
Circumvent censorship by obfuscating the domain of an HTTPS connection
●
Connect to an approved server, but send an HTTP request for the actual destination
●
Uses a hosting service to host the true destination - false destination must be on the same 
service
○
Google App Engine
○
Amazon S3/CloudFront
○
Microsoft Azure CDN
○
Others
Domain Fronting
●
DNS lookup as before for any site hosted by the hosting service
●
Client and Server handshake as usual
Domain Fronting
●
Client and Server handshake as usual
Domain Fronting
●
Client sends an HTTP request with the Host header set to the actual destination
●
The CDN forwards the request as long as the destination is hosted by the service
○
Any site on GAE could be used to front for an otherwise censored GAE server
Domain Fronting
●
Like a letter delivered to a house with multiple residents
●
The mailman can see the address on the outside
●
Letter on the inside goes to the correct person
Domain Fronting
●
April 2018 - The music stops
●
Google 
○
“Domain fronting has never been a supported feature at Google”1
●
Amazon
○
Implemented “Enhanced Domain Protections”
○
“no customer ever wants to ﬁnd that someone else is masquerading as their 
innocent, ordinary domain”2
○
Think of the innocent children ordinary domains!
●
Cloudﬂare
○
Only HTTP works
●
Azure
○
Still works... For now
[1] A Google update just created a big problem for anti-censorship tools
[2] Enhanced Domain Protections for Amazon CloudFront Requests
Domain Fronting - Issues
●
Major providers shut it down
●
Limited fronting options
○
Only sites hosted on the same provider can be used to front
●
Must host an “app” or have an account with the provider
○
Not free
■
Bandwidth
■
CPU time
○
Complex sign up requirements
■
Identity checks
■
Phone required
■
Credit card required
1 
The Growth of TLS 1.3
31.7%
The Growth of TLS 1.3
59%
DNS - Fixing the Problem
●
What if you wrap a DNS request in TLS?
●
How about HTTPS? (RFC 8484)
●
"The unmitigated usage of encrypted DNS, particularly DNS over HTTPS, could allow attackers 
and insiders to bypass organizational controls." - SANS3
○
Great!
[3] A New Needle and Haystack: Detecting DNS over HTTPS Usage
TLS 1.3 and ESNI
●
Now that DNS is encrypted, it can be used to fetch a public key before an HTTPS connection is started
●
Classic Difﬁe-Hellman key exchange to symmetrically encrypt the server_name
○
All data required is sent in a single Client Hello (the client’s public key + extras)
TLS 1.3 and ESNI - Step by Step
●
Client requests the IP address and ESNI public key via DNS over TLS or HTTPS
TLS 1.3 and ESNI - Step by Step
●
DNS server returns the IP address and ESNI public key via DNS over TLS or HTTPS
●
Cloudﬂare rotates their key every ~1 hour (with a few hours of buffer allowed by the servers)
TLS 1.3 and ESNI - Step by Step
●
Client sends a TLS 1.3 ClientHello with an encrypted_server_name extension
TLS 1.3 and ESNI - Step by Step
●
Web server responds with a ServerHello that includes the encrypted certiﬁcate
TLS 1.3 and ESNI - Weak Spots
●
DNS response for IP or _esni could be tampered with (poisoned resolver cache)
●
DNSSEC!4
[4] How DNSSEC Works
TLS 1.3 and ESNI - Weak Spots
●
DNS over TLS or HTTPS is completely blocked
●
Preload ESNI keys to bootstrap the connection
TLS 1.3 and ESNI - Weak Spots
●
The TLS connection goes to an IP address
●
An IP may be shared by many domains, but may not
●
Is there a generally applicable way to route to any domain via any other?
○
No, but how close can we get?
Domain Hiding and DNS - Issues
Issue
Solution
DNS is unencrypted
DNS over TLS or HTTPS
DNS is untrustworthy
DNSSEC
Encrypted DNS is blocked
Bootstrap ESNI keys
SNI is unencrypted
ESNI
IPs (or IPs that domains resolve to) are blocked
Domain hiding with the largest CDN!
2 
Cloudﬂare
●
Founded in 2009
●
Content Delivery Network (CDN)
○ Highest number of internet exchange points of any network
○ Largest CDN in the world
○ Supports TLS 1.3, ESNI, Websockets, and QUIC
●
Authoritative DNS
○ Over 26,000,000 domains
○ Supports DNSSEC
Domain Hiding with Cloudﬂare
●
A TLS 1.3 connection with ESNI is sent to ANY Cloudﬂare server
○
SNI can be included as well - does not have to match ESNI value
●
A HTTP request is sent using that connection can have any Host header 
○
True domain must have DNS provided by Cloudﬂare
●
Cloudﬂare will forward the request to the true destination - just like domain fronting!
●
Robin Wood (@digininja) was the ﬁrst to show this was possible
Noctilucent
●
Go (Golang) rewrite of crypto/tls based on Cloudﬂare’s tls-tris project
●
TLS 1.3 support
○
Conﬁg options speciﬁc for domain hiding
■
ESNIServerName - does not need to match the SNI extension or Host header
■
PreserveSNI - Allows the sending of a ClientHello with both SNI and ESNI 
extensions
●
Drop in replacement for standard crypto/tls - backwards compatible
●
Test client application
○
Attempts DNS over HTTPS (DoH) - Falls back to DNS over TLS, then system default 
DNS
○
Allows command line tuning of nearly every part of the TLS and HTTP connection
○
HTTPS and Websocket support
○
Cross platform!
Normal HTTPS Connection
TLS 1.3 + ESNI HTTPS Connection
Hidden Request (no SNI)
Fronted Request (with SNI)
So what?
●
Any domain protected by Cloudﬂare is able to arbitrarily front to any IP
○
Target IP can be hosted anywhere
○
DNS must be run via Cloudﬂare
●
Cloudﬂare Managed DNS is free
●
Signup requirements?
○
Email (disposable is ok)
○
Password
○
That's it!
What Can You Hide With?
●
Source: Alexa top 100,000 domains
●
HTTPS GET request looking for cloudﬂare cookies, Expect-CT header, or Server
●
Results:
○
At least 21% of the top 100,000 domains are available to front (21,298)
○
A few examples:
■
myshopify.com
■
medium.com
■
discordapp.com (on the PA whitelist)5
■
udemy.com
■
zendesk.com
■
coinbase.com (on the PA whitelist)5
■
hdfcbank.com
■
mozilla.org (on the PA whitelist)5
■
teamviewer.com
■
blackboard.com
■
okta.com
■
bitdefender.com
■
ny.gov
■
mlb.com
■
stanford.edu
■
plex.tv
■
coronavirus.gov.hk
■
So much porn...
[5] List of Domains and Applications Excluded from SSL Decryption
Just doing some Single Sign On...
SNI Based Web Filters
●
Many products only look at SNI
○
ESNI completely ignored
●
By preserving the SNI along with ESNI, ﬁlters and analytics can be tricked
●
Example: Untangle
○
Installed with strict web ﬁlter settings
Fooling SNI based Firewalls
Fooling SNI based Firewalls
HTTPS Decrypting Firewalls
●
Seen in enterprise environments
○
Install a root certiﬁcate on endpoints
○
Break and re-encrypt trafﬁc that passes through
○
Corporate Man-in-the-Middle
●
Allows analysis of full packet data!
●
Kazakhstan attempted this nation-wide in July 20196
●
Does TLS 1.3/ESNI offer a way around these ﬁrewalls?
[6] Kazakhstan government is now intercepting all HTTPS trafﬁc
HTTPS Decrypting Firewalls
●
Palo Alto PA-VM 10.0.0
○
Released 2020-06-17
○
Major new feature: TLS 1.3 decryption 
○
Default decryption proﬁle does not include TLS 1.3!
■
Allows TLS 1.3 to pass with an error
[Palo Alto bypass via Mozilla fronting]
What Else?
●
Many connections to a fronted site may be suspicious
○
What protocols can we use?
■
HTTP ✅
■
Websockets ✅
■
Arbitrary TCP/UDP via a helper ✅
Fronting Streaming data with Websockets
[Cloak Demo]
[Cloak+CobaltStrike Demo]
[DeimosC2 Demo]
3 
What is Blue to Do?
●
Disable TLS 1.3 (25-50% of trafﬁc)
●
Block Cloudﬂare (26 million domains)?
●
Block ClientHellos with an encrypted_server_name extension?
○
Technically possible
○
Netsweeper >=6.4.1 (2020-02-25) can block all ESNI trafﬁc
■
Cannot categorize sites
■
All or none
○
No other vendors currently support ESNI blocking as of today
What is Blue to Do?
●
Flag on ClientHello packets with both “server_name” and “encrypted_server_name”
○
Snort 
■
Possible with custom rules?
■
ssl_state:client_hello 
■
tls.version can narrow down to 1.3
■
SNI extension type is 0x0000
■
ESNI extension type is 0xffce
○
Securicata 
■
Snort with extra features
■
has tls.sni but no tls.esni
What is Blue to Do?
●
“Good old fashioned police work”
○
Beaconing detection and anomaly network analytics
■
RITA or BeaKer (or fancy AI/ML)
■
How much should a user interact with a site? How often? How much data?
○
JA3 and JA3S mismatches
■
Should svchost.exe have a JA3 ﬁngerprint of Go?
■
Cloak and utls are working to defeat this
○
Well instrumented EDR, application whitelisting, etc
■
Don’t get pwned in the ﬁrst place!
■
“Server administrators should never allow untrusted code to run on the server”             
-Microsoft
Domain Hiding - Noctilucent -  The Future
●
Latest advancement in censorship resistant communication
●
Useable today
○
Go - drop in replacement
○
Cloak fork - use with anything that can be proxied (CobaltStrike, etc)
●
Will be harder to block as TLS 1.3 and ESNI adoption grows
●
ESNI RFC is in ﬂux (last updated 2020-06-01) - might break tomorrow
○
Actually called ECH as of May 2020
●
Currently relies on a single (massive) CDN
○
Cloudﬂare please don’t break this
●
Blue Team: Your move!
References/Resources
●
A New Needle and Haystack: Detecting DNS over HTTPS Usage 
●
Wikipedia: Domain Fronting
●
Blocking-resistant communication through domain fronting
●
Encrypt it or lose it: how encrypted SNI works
●
Encrypted Server Name Indication for TLS 1.3
●
Godns - a simple client lib for doing dns over https
●
How DNSSEC Works
●
SSL Labs - SSL Pulse
●
Domain fronting through Cloudﬂare
●
TLS-tris
●
RITA (Real Intelligence Threat Analytics)
Special Thanks
●
Robin Wood (@digininja) - freelance pen-tester, researcher and developer
●
Andy Wang (cbeuw) - developer of Cloak
●
Nick Sullivan (@grittygrease) - Head of Research and Cryptography at Cloudﬂare
Questions
Erik Hunstad
Personal Twitter: @badsectorlabs
Personal Blog: blog.badsectorlabs.com
https://github.com/SixGenInc/Noctilucent