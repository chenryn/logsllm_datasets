title:Control-Flow Carrying Code
author:Yan Lin and
Xiaoyang Cheng and
Debin Gao
Control-Flow Carrying Code
Yan Lin
Singapore Management University
PI:EMAIL
Xiaoyang Cheng
Nankai University, China
PI:EMAIL
Debin Gao
Singapore Management University
PI:EMAIL
ABSTRACT
Control-Flow Integrity (CFI) is an effective approach in mitigating
control-flow hijacking attacks including code-reuse attacks. Most
conventional CFI techniques use memory page protection mech-
anism, Data Execution Prevention (DEP), as an underlying basis.
For instance, CFI defenses use read-only address tables to avoid
metadata corruption. However, this assumption has shown to be
invalid with advanced attacking techniques, such as Data-Oriented
Programming, data race, and Rowhammer attacks. In addition, there
are scenarios in which DEP is unavailable, e.g., bare-metal systems
and applications with dynamically generated code.
We present the design and implementation of Control-Flow Car-
rying Code (C3), a new CFI enforcement without depending on DEP,
which makes the CFI policies embedded safe from being overwrit-
ten by attackers. C3 embeds the Control-Flow Graph (CFG) and its
enforcement into instructions of the program by encrypting each
basic block with a key derived from the CFG. The “proof-carrying”
code ensures that only valid control flow transfers can decrypt
the corresponding instruction sequences, and that any unintended
control flow transfers or overwritten code segment would cause
program crash with high probability due to the wrong decryption
key and the corresponding random code bytes obtained. We im-
plement C3 on top of an instrumentation platform and apply it to
many popular programs. Our security evaluation shows that C3
is capable of enforcing strong CFI policies and is able to defend
against most control-flow hijacking attacks while suffering from
moderate runtime overhead.
KEYWORDS
Control-flow integrity; Instruction-set randomization; Control-flow
hijacking; Secret sharing
ACM Reference Format:
Yan Lin, Xiaoyang Cheng, and Debin Gao. 2019. Control-Flow Carrying
Code. In ACM Asia Conference on Computer and Communications Security
(AsiaCCS ’19), July 9–12, 2019, Auckland, New Zealand. ACM, New York, NY,
USA, 12 pages. https://doi.org/10.1145/3321705.3329815
1 INTRODUCTION
Control-Flow Integrity (CFI) introduced by Abadi et al. [1] provides
attractive security features because of its effectiveness in defending
against injected and code-reuse attacks (CRA), including advanced
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329815
attacking techniques like Return-Oriented Programming (ROP) [5,
9, 37]. CFI techniques typically compute a Control-Flow Graph
(CFG) statically [48, 50] or dynamically [28, 29] and instrument
the binary code by adding checks before indirect branches. These
checks ensure that any control transfers during execution never
deviate from the CFG, even when the program is under attack.
An assumption made in most existing CFI approaches, includ-
ing coarse-grained [48, 50] and fine-grained [28, 29, 44] ones, is
that read-only data and code sections cannot be overwritten by
attackers. For example, CFI proposed by Abadi et al. [1] relies on
read-only tags inside the code segment, and numerous approaches
use a table structure (made read-only) to store valid targets of indi-
rect branches [28, 29, 50]. However, there are scenarios in which
such page-level protection is unavailable, e.g., bare-metal systems
which do not have a Memory Management Unit (MMU) and ap-
plications with dynamically generated code. Moreover, data race
attacks [51], Rowhammer attacks [6] and Data-Oriented Program-
ming (DOP) [21] have demonstrated that it is possible to gain arbi-
trary memory read and write access.
In this paper, we explore the possibility of enforcing CFI in the
absence of such an assumption. Specifically, we look into encoding
CFI policies into the machine instructions directly without relying
on policies specified in additional data structures (i.e., the read-
only table structures in existing CFI approaches) or inserting CFI
checks into the code segment. The general idea is to embed a stat-
ically constructed CFG to the instructions, execution of which is
conditioned on correct control flows. In this way, each intended
instruction will carry a proof that can validate the control flow
transfer. Unintended instructions cannot be executed as the proof
in these instructions are not correct. Intuitively, instructions with
CFG embedded can be seen as a proof-carrying code [27], where
this proof is self-contained in the code rather than being encoded
into a separate table. The challenge is how to embed the CFG into
the instructions and how to correctly execute them at runtime.
To this end, we present Control-Flow Carrying Code, C3, a gen-
eral CFI method that embeds CFG into instructions and performs
CFI checks automatically. We stress that with C3, instructions in
a program themselves carry the CFG information and its enforce-
ment without relying on any additional data structure. Inspired by
the framework of Instruction-Set Randomization (ISR) [22] where
instructions of a program are encrypted with a secret key, C3 en-
crypts each basic block in the program with a key derived from
the CFG. More specifically, the key is derived from (the addresses
of) valid callers of the basic block to ensure correct control flow
transfers. At runtime, only the valid callers (their addresses) could
enable the correct reconstruction of the key to decrypt the basic
block. In this way, C3 manages to embed and enforce CFI in the
program instructions.
However, two challenges remain in making C3 practical. First, a
basic block may have multiple valid callers. These valid callers have
Session 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand3different addresses, while the successor block has to be encrypted
with a single key. How does C3 enable the reconstruction of the
single correct key by all the valid control flow transfers? To address
this challenge, C3 utilizes the secret sharing scheme [38] to make
the key shared among valid callers.
Although secret sharing helps solve this important challenge
at a high level, we encounter more challenges in its application in
our setting. For example, secret sharing requires that all (a variable
number of) callers of the basic block be on the same secret shar-
ing curve. The implication is that once we have the curve fixed,
addresses of these callers can no longer take arbitrary locations but
have to be on the secret sharing curve determined. This imposes
extra challenges in laying basic blocks in the text segment of the
program. To address this, we design an algorithm to redistribute
basic blocks to positions satisfying the secret sharing curve.
We have implemented C3 that consists of two components, one
that performs binary rewriting to redistribute and encrypt basic
blocks, and the other as a plug-in to an existing instrumentation
platform to assist runtime execution of the rewritten executable.
We apply C3 to a number of server and non-server applications
on the Linux platform. Our experimental results demonstrate that
C3 effectively defends against control-flow hijacking attacks and
at the same time, introduces realistic runtime performance over-
head for server applications comparable to existing Instruction-Set
Randomization (ISR) implementations on the same instrumenta-
tion platform. Similar to the arguments in ISR systems, we believe
that such overhead could be significantly reduced with a hardware-
assisted platform.
2 RELATED WORK
2.1 Control-Flow Integrity
CFI [1] forces control flow transfers in the program to follow the pol-
icy presented by the CFG. It can be classified into instrumentation-
based and hardware-assisted ones.
Instrumentation-based CFI. This category of enforcement
2.1.1
typically inserts CFI checks before each intended indirect branch
during compiling or installation to consult a CFI checking module,
e.g., MCFI [28] and πCFI [29]. Forwarding CFI [44] inserts checks
before all forward-edge control-flow transfers to check whether
the function signatures (return type and the number of arguments)
are correct. The original CFI proposal [1] and its variants rewrite
each indirect branch transfer in the binary to validate the ID of
the control transfer target. BinCFI [50] instruments indirect branch
transfers to jump to address translation routines that determine the
targets of the transfers. CCFIR [48] instruments indirect transfers
to limit them to flow only to a “springboard” section. O-CFI [26]
combines fine-grained randomization and CFI by inserting checks
before each indirect branch to check whether its target is within a
valid boundary.
C3 falls into this category using binary rewriting. The fundamen-
tal difference is that C3 has the CFG and CFI policy embedded into
every machine instruction without relying on additional metadata,
and therefore works effectively without the assumption of keeping
such metadata read-only.
2.1.2 Hardware-assisted CFI. Other CFI techniques make use of
hardware features to record branch transfers where CFI checks
are triggered. For example, kBouncer [32] and ROPecker [11] use
Last Branch Record (LBR) which records a small number of the
most recent control transfers with minimal overhead. Recent pro-
posals show that an adversary can break heuristics used in these
approaches by using long gadgets and launching “history-flushing”
attacks [8]. To overcome the limitation in the size of LBR, some
[17, 19, 20, 24] make use of Intel Processor Trace (IPT) to enforce
CFI. However, control flow transfers recorded by IPT are in a com-
pressed form and decoding it results in large performance overhead.
2.2 Instruction-Set Randomization
Instruction-Set Randomization (ISR) was initially proposed to fight
against code-injection attacks [2, 16, 22, 34]. It encrypts instructions
and provides a unique instruction set to every program. Injected
code would first be decrypted to a random byte sequence and re-
sult in illegal instructions executed. Recently, researchers looked
into using ISR to defend against CRA. Scylla [43] encrypts every
instruction in a basic block with respect to its predecessor to defend
against CRA that jumps to the middle of a basic block. Polyglot [40]
encrypts the binary at the page granularity to defend against JIT-
ROP [41]. SOFIA [15] uses ISR to enforce CFI for cyber-physical
systems with instructions at a fixed length of 32-bit, and is prob-
ably the closest to our proposed technique. It enforces CFI via an
integrity check of instruction blocks where the Message Authenti-
cation Code (MAC) is encrypted. However, their limitations include,
e.g., supporting up to two callers of a basic block and requiring
hardware assistance. C3, on the other hand, does not have such
limitations. DynOpVm [10] shares a similar idea with C3 on us-
ing secret sharing for the purpose of defending against frequency
analysis attacks on VM-based obfuscators. However, it leaves the
original callers as plain-text in the executable and cannot defend
against control-flow hijacking attacks.
2.3 Shamir’s Secret Sharing
Secret sharing refers to the sharing of s among n parties so that
only when the parties bring together their respective shares can
the secret be reconstructed. When counting on all participants to
combine the secret is impractical, Shamir [38] introduced a (t, n)
threshold scheme which allows the secret to be shared among n
participants while any t (but not fewer than t) of them are sufficient
to recover the secret.
The essential idea of Shamir’s secret sharing relies on the fact
that we can fit a unique polynomial of degree (t − 1) to any set of t
points that lie on the polynomial curve. For example, two points are
sufficient to define a straight line, and three points are sufficient to
define a parabola. The first coefficient is usually used as the secret.
Secret-sharing schemes are important building blocks in cryp-
tography in Byzantine agreement, threshold cryptography, access
control and attribute-based encryption. In this paper, C3 uses it to
enforce CFI so that only valid transfers can reconstruct the secret.
Session 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand4Figure 1: Example of secret reconstruction. Each circle repre-
sents a basic block of instructions.
3 OVERVIEW OF C3
3.1 Threat Model and Assumptions
The proposed defense, C3, is aimed to protect a vulnerable appli-
cation against control-flow hijacking attacks such as ROP attacks.
The application to be protected may have some vulnerabilities that
can be leveraged by an attacker to inject an exploit payload (code
or data). We focus on user-space attacks leaving kernel exploits out
of our scope. Specifically, we assume that:
• The target program does not contain self-modifying or dynamically-
• Attackers could use attacks to bypass W⊕X, such as Data-Oriented
Programming [21], data race [51] and Rowhammer attacks [6],
and could exploit information disclosure vulnerabilities to inves-
tigate the victim’s process memory.
• Since the current implementation of C3 is on top of the popular
instrumentation platform Pin, we assume that attackers do not
target Pin in their attacks and the partial memory segment man-
aged by Pin (e.g., the code cache) is secure. This assumption can
be removed if C3 is supported by native hardware.
generated code.
3.2 Embedding CFG to Instructions
Rather than consulting additional information stored in read-only
memory, we propose to embed CFG to instructions. An instruction
with CFG embedded can check the integrity of the control flow
automatically during the execution without querying other data
structures. In particular, C3 embeds the CFG information by en-
crypting each basic block (an idea inspired by ISR [22]) with a key
generated from control flow dependent information. At runtime,
the basic blocks are decrypted using a key reconstructed from the
actual control flow transfers taken. Only when the correct control
flow paths are taken will the instructions be decrypted correctly.
In Figure 1, each node represents an encrypted basic block while
edges indicate control flows. The solid edges represent valid control
flows with Si indicating the encryption key for basic block i. S3 and
S4 are generated according to the valid control flow path ,
 and . When there is an invalid control flow transfer
from node 2 to 4 denoted by the dotted edge, a wrong key S′
4 is
constructed which would result in illegal instruction faults.
Although the idea sounds straightforward, there are multiple
design questions and challenges. First, what information do we use
to generate the key? Such information needs to be both statically
and dynamically available, and it shall allow enforcement of CFI.
How do we deal with basic blocks involved in multiple control
flows, which may lead to different keys constructed dynamically? A