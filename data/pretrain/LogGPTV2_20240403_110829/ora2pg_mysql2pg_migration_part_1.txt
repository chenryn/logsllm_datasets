Oracle to PostgreSQL Migration:
a hard way ?
PgConf.RU 2015
Moscow, Feb. 7
About me
Author : Gilles Darold
●
– Works at Dalibo (http://www.dalibo.com/) as PostgreSQL
consultant
Author and maintainer of
●
– Ora2Pg (http://ora2pg.darold.net)
– PgBadger (http://dalibo.github.io/pgbadger/)
– PgCluu (http://pgcluu.darold.net)
– PgFormatter (http://sqlformat.darold.net)
– … and more (http://www.darold.net)
About Ora2Pg
Ora2Pg, first release on May 2001 (last version: 15.1)
●
– 14 years of development !
– Near 10,000 lines of Perl code
– What users say about Ora2Pg?
« Terrific program! »
●
« You save my life! »
●
« Invaluable! »
●
Where are we now ?
●
– Hundred of Oracle database migration
– Industrial deployment of Ora2Pg
When one database is migrated others follow
●
Some others can not because of editor's locks
●
– Ask PostgreSQL support to software editors !
2015 – What Ora2Pg can do ?
Automatic Oracle database discovery
●
Automatic creation of migration projects
●
Oracle database migration cost assessment
●
Automatic database schema export
●
Full and automatic data export
●
Automatic conversion of PL/SQL to PLPGSQL
●
Oracle Spatial to PostGis export
●
Automatic discovery
Set the Oracle connection DSN
●
– ora2pg -u system -w manager -t SHOW_VERSION --source
« dbi:Oracle:host=localhost;sid=testdb »
Set the configuration file /etc/ora2pg/ora2pg.conf
●
– ORACLE_DSN dbi:Oracle:host=localhost;sid=testdb
– ORACLE_USER system
– ORACLE_PWD manager
Look for schema to export and set it into configuration file:
●
– ora2pg -c /etc/ora2pg/ora2pg.conf -t SHOW_SCHEMA
– SCHEMA HR
Lookup database tables and columns:
●
– ora2pg -c /etc/ora2pg/ora2pg.conf -t SHOW_TABLE
– ora2pg -c /etc/ora2pg/ora2pg.conf -t SHOW_COLUMN
Create a migration project
ora2pg --init_project my_db_mig --project_base /full/path/to/project
/full/path/to/project/my_db_mig/
├── config/
│ └── ora2pg.conf
├── data/
├── export_schema.sh
├── reports/
├── schema/
│ ├── dblinks/ functions/ grants/ mviews/ packages/
│ ├── partitions/ procedures/ sequences/ synonyms/
│ └── tables/ tablespaces/ directories/ triggers/ types/ views/
└── sources/
├── functions/ mviews/ packages/ partitions/
└── procedures/ triggers/ types/ views/
Migration assessment
What database might be migrated first ?
●
– Don't choose the Oracle Application database, you will fail !
– Choose the smallest with few PL/SQL to learn Ora2Pg usage
– Then choose the most representative, you need to forge your experience
But how much human-days this work will cost me?
●
– Buy an expensive audit
– Use Ora2Pg migration assessment report
ora2pg -c /etc/ora2pg.conf -t SHOW_REPORT --estimate_cost
--dump_as_html > report.html
Schema migration
Almost everything is exported :
●
– table, constraint, index, sequence, trigger, view, tablespace, grant, type, partition
– procedure, function, package, synonym, database link, materialized view, ...
but some are not exported and need adaptation :
●
– IOT / Cluster indexes can be replaced by « CLUSTER table_name USING
index_name ».
– Bitmap indexes are internally build by PostgreSQL when needed.
– Reverse indexes can be replaced by a trigram-based index (see pg_trgm) or a
reverse() function based index and search.
– Type inheritance and type with member method are not supported
– Global indexes over partitions are not supported
– Global Temporary Table does not exists
– Virtual Columns does not exists, use view instead
– Compound triggers are not supported
DATA migration
Can you migrate Big data ?
●
– Tera bytes of data and billions of rows in tables takes hours
– Purge or archive unused or rarely used data
– Import live data first, open to production then import remaining data
The Oracle and PostgreSQL database must be responsive
●
– Parallel table export (-P ncores)
– Multiple process to fill PostgreSQL tables (-j ncores)
– Multiprocess to extract data from Oracle (-J ncores)
– Both ? (-J ncores x -j ncores)
Simple table (only columns with numbers) : +1 millions rows / second
●
Complex table (lot of CLOB and/or BLOB) : 100 rows / second
●
Always use COPY data export mode, INSERT is too slow
●
What's new
Version 15.0 Ora2Pg has cool new features:
●
– Autonomous transaction
– Database Link
– External table
– BFILE
– DIRECTORY
– SYNONYM
– More Spatial support
Autonomous transactions
Autonomous transactions are not natively supported by
●
PostgreSQL.
Ora2Pg use a wrapper function to call the function through
●
DBLINK
– The original function is renamed with suffix '_atx'
– The wrapper function take the name of the original function
Waiting for pg_background
●
– run commands in a background worker, and get the results.
– Work in progress by Robert Haas - EnterpriseDB
Autonomous transaction
CREATE OR REPLACE FUNCTION log_action (msg text) RETURNS VOID AS
$body$
DECLARE
-- Change this to reflect the dblink connection string
v_conn_str text := 'port=5432 dbname=testdb host=localhost user=pguser
password=pgpass';
v_query text;
BEGIN
v_query := 'SELECT true FROM log_action_atx ( ' || quote_literal(msg) || ' )';
PERFORM * FROM dblink(v_conn_str, v_query) AS p (ret boolean);
END;
$body$
LANGUAGE plpgsql STRICT SECURITY DEFINER;
DATABASE LINK
Access objects on a remote database
●
– CREATE PUBLIC DATABASE LINK remote_service USING 'remote_db';
– SELECT * FROM employees@remote_service;
Ora2Pg will export it as Foreign Data Wrapper using oracle_fdw
●
– CREATE SERVER remote_service FOREIGN DATA WRAPPER oracle_fdw
OPTIONS (dbserver 'remote_db');
– CREATE USER MAPPING FOR current_user SERVER remote_service
OPTIONS (user 'scott', password 'tiger');
Remote tables need to be created as FDW tables:
●
– ora2pg -c ora2pg.conf -t FDW -a EMPLOYEES
– CREATE FOREIGN TABLE employees_fdw (… ) SERVER remote_service
OPTIONS(schema 'HR', table 'EMPLOYEES');
EXTERNAL TABLES
Oracle EXTERNAL TABLE does not exists internally into PostgreSQL
●
– CREATE OR REPLACE DIRECTORY ext_dir AS '/data/ext/';
– CREATE TABLE ext_table (id NUMBER, …) ORGANIZATION EXTERNAL ( DEFAULT DIRECTORY
ext_dir ACCESS PARAMETERS (… LOCATION ('file_ext.csv')) ) ;
cat /data/ext/file_ext.csv
1234,ALBERT,GRANT,21
1235,ALFRED,BLUEOS,26
1236,BERNY,JOLYSE,34
Ora2Pg will export them as remote tables using extension file_fdw :
●
CREATE FOREIGN TABLE ext_tab (
empno VARCHAR(4), firstname VARCHAR(20),
lastname VARCHAR(20), age VARCHAR(2)
) SERVER ext_dir OPTIONS(filename '/data/ext/file_ext.csv', format 'csv', delimiter
',');
BFILE
The BFILE data type stores unstructured binary data in flat files outside the
●
database.
A BFILE column stores a file locator that points to an external file containing
●
the data: (DIRECTORY, FILENAME)
By default Ora2Pg will transform it as bytea by loading file content :
●
– CREATE TABLE bfile_test (id bigint, bfilecol bytea);
COPY bfile_test (id,bfilecol) FROM STDIN;
1
1234,ALBERT,GRANT,21\\0121235,ALFRED,BLUEOS,26\\0121236,BERNY,JOL
YSE,34\\012
\.
DATA_TYPE = BFILE:TEXT, only the path is exported : '/data/ext/file_ext.csv'
●
DATA_TYPE = BFILE:EFILE, will use the external_file extension
●
– https://github.com/darold/external_file
DIRECTORY
DIRECTORY can be exported to be used with the external_file extension.
●
(https://github.com/darold/external_file )
INSERT INTO external_file.directories (directory_name, directory_path)
VALUES ('EXT_DIR', '/data/ext/');
INSERT INTO external_file.directory_roles (directory_name, directory_role,
directory_read, directory_write) VALUES ('EXT_DIR', 'hr', true, false);
INSERT INTO external_file.directories (directory_name, directory_path)
VALUES ('SCOTT_DIR', '/usr/home/scott/');
INSERT INTO external_file.directory_roles(directory_name, directory_role,
directory_read, directory_write) VALUES ('SCOTT_DIR', 'hr', true, true);
SYNONYM
A synonym is an alias name for objects. They are used to grant access to an
●
object from another schema or a remote database.
– CREATE SYNONYM synonym_name FOR object_name [@ dblink];
SYNONYMs doesn't exists in PostgreSQL
●
– SET search_path TO other_schema,...
– Ora2Pg will export them as VIEWS :
CREATE VIEW public.emp_table AS SELECT * FROM hr.employees;
ALTER VIEW public.emp_table OWNER TO hr;
GRANT ALL ON public.emp_table TO PUBLIC;
With DBLINK, you have to create a foreign table HR.EMPLOYEES using a
foreign server (Ora2Pg will warn you to see DBLINK and FDW export type).
ROWNUM
Oracle : SELECT * FROM table WHERE ROWNUM  or >= N rewritten as LIMIT ALL OFFSET N
ROWNUM to enumerate rows, not covered by Ora2Pg
●
– Need to be rewritten as window function
Empty string vs NULL
A zero length string is NULL in Oracle:
●
– '' = NULL
PostgreSQL and SQL standard:
●
– '' <> NULL
Constraint violation on Oracle but not in PostgreSQL
●
CREATE TABLE tempt (
id NUMBER NOT NULL,
descr VARCHAR2(255) NOT NULL
) ;
INSERT INTO temp_table (id, descr) VALUES (2, '');
ORA-01400: cannot insert NULL into ("HR"."TEMPT"."DESCR")
Empty string vs NULL
By default Ora2Pg replace all conditions with a test on NULL by a
●
call to the coalesce() function.
– (field1 IS NULL) is replaced by (coalesce(field1::text, '') = '')
– (field2 IS NOT NULL) is replaced by (field2 IS NOT NULL AND field2::text
<> '')
Default is replacement to be sure that your application will have the
●
same behavior.
You can not insert an empty string into a numeric so the
●
replacement is no necessary.
Set NULL_EQUAL_EMPTY to 0 to disable this automatic
●
replacement.
PL/SQL to PLPGSL
All triggers, functions, procedures and packages are exported and
●
converted to PLPGSQL by Ora2Pg.
– This will really save your life !
But some parts are not :
●
– Global variables in packages, use dedicated tables instead
– Anonymous/initialization block in package, use an init function with this code
– Function created inside an other one, drop the code into a normal function
Oracle specific code always need to be rewritten :
●
– External modules (DBMS, UTL, ...)
– CONNECT BY (use CTE « WITH RECURSIVE »)
– OUTER JOIN (+)
– DECODE (Ora2Pg can only transform simple forms)
Oracle DBMS modules
Some are implemented in orafce library
●
(https://github.com/orafce/orafce)
– DBMS_OUTPUT
– UTL_FILE
– DBMS_PIPE
– DBMS_ALERT
Some advanced functionalities are implemented in external
●
PostgreSQL tools, contribs or extensions:
– Oracle Advanced Queuing => see PGQ from Skytools
– Oracle Jobs scheduler => see pgAgent / JobScheduler
Others can easily be rewritten in extended language like Perl.
●
– You used to send email from your Oracle database using UTL_SMTP ?
Example UTIL_SMTP
CREATE OR REPLACE FUNCTION send_email(name,inet, text, text, text) RETURNS integer AS
$body$
use Net::SMTP;
my ($Db, $Ip, $sendTo, $Subject, $Message) = @_;
my $smtp = Net::SMTP->new("mailhost", Timeout => 60);
$smtp->mail("$Db\@$Ip");
$smtp->recipient($sendTo);
$smtp->data();
$smtp->datasend("To: $sendTo\n");
$smtp->datasend("Subject: $Subject\n");
$smtp->datasend("Content-Type: text/plain;\n\n");
$smtp->datasend("$Message\n");
$smtp->dataend();
$smtp->quit();
return 1;
$body$ language 'plperlu';
SELECT send_email(current_database(), inet_server_addr(), 'PI:EMAIL', 'test pg_utl_smtp', 'This is a test');
Oracle OUTER JOIN (+)
LEFT OUTER JOIN
●
– SELECT * FROM a, b WHERE a.id = b.id (+)
– SELECT * FROM a LEFT OUTER JOIN b ON (id)
RIGHT OUTER JOIN
●
– SELECT * FROM a, b, c WHERE a.id = b.id (+) AND a.id (+) =
c.id
– SELECT * FROM a LEFT OUTER JOIN b ON (a. id = b.id)
RIGHT OUTER JOIN c ON (a.id = c.id)
FULL OUTER JOIN
●
– SELECT * FROM a, b WHERE a.id = b.id (+) UNION ALL
SELECT * FROM a, b WHERE a.id (+) = b.id AND a.id = NULL
– SELECT * FROM a FULL OUTER JOIN b ON (a.id = b.id)
Conversion of (+) to ANSI Joins
Your PL/SQL code if filled of queries like that?
●
Your developers still use (+) notation?
●
How can you automatically convert this code to
●
ANSI-compliant joins syntax?
– Ora2Pg is not able to convert this code, at least not now.