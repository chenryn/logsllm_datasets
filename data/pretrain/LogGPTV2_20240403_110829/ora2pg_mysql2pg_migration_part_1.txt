# Oracle to PostgreSQL Migration: A Challenging Path?

## Presentation Overview
**Event:** PgConf.RU 2015  
**Location:** Moscow, February 7

## About the Author
**Author:** Gilles Darold  
- **Position:** PostgreSQL Consultant at Dalibo (http://www.dalibo.com/)
- **Contributions:**
  - Ora2Pg (http://ora2pg.darold.net)
  - PgBadger (http://dalibo.github.io/pgbadger/)
  - PgCluu (http://pgcluu.darold.net)
  - PgFormatter (http://sqlformat.darold.net)
  - And more (http://www.darold.net)

## Introduction to Ora2Pg
- **First Release:** May 2001
- **Latest Version:** 15.1
- **Development Span:** 14 years
- **Codebase:** Nearly 10,000 lines of Perl code
- **User Feedback:**
  - "Terrific program!"
  - "You saved my life!"
  - "Invaluable!"

## Current Status
- **Migrations:** Hundreds of Oracle databases have been migrated.
- **Deployment:** Industrial deployment of Ora2Pg.
- **Challenges:** Some migrations are hindered by vendor lock-in. Encourage software editors to support PostgreSQL.

## Ora2Pg Capabilities (2015)
- **Automatic Discovery:**
  - Oracle database discovery
  - Creation of migration projects
  - Cost assessment for migration
- **Schema and Data Export:**
  - Automatic schema export
  - Full and automatic data export
- **PL/SQL Conversion:**
  - Conversion of PL/SQL to PLPGSQL
- **Spatial Data:**
  - Oracle Spatial to PostGIS export

### Automatic Discovery
1. **Set Oracle Connection DSN:**
   ```sh
   ora2pg -u system -w manager -t SHOW_VERSION --source "dbi:Oracle:host=localhost;sid=testdb"
   ```
2. **Configure Ora2Pg:**
   ```ini
   ORACLE_DSN dbi:Oracle:host=localhost;sid=testdb
   ORACLE_USER system
   ORACLE_PWD manager
   ```
3. **Identify Schemas to Export:**
   ```sh
   ora2pg -c /etc/ora2pg/ora2pg.conf -t SHOW_SCHEMA
   SCHEMA HR
   ```
4. **Lookup Database Tables and Columns:**
   ```sh
   ora2pg -c /etc/ora2pg/ora2pg.conf -t SHOW_TABLE
   ora2pg -c /etc/ora2pg/ora2pg.conf -t SHOW_COLUMN
   ```

### Create a Migration Project
```sh
ora2pg --init_project my_db_mig --project_base /full/path/to/project
```
Project Structure:
```
/full/path/to/project/my_db_mig/
├── config/
│   └── ora2pg.conf
├── data/
├── export_schema.sh
├── reports/
├── schema/
│   ├── dblinks/ functions/ grants/ mviews/ packages/
│   ├── partitions/ procedures/ sequences/ synonyms/
│   └── tables/ tablespaces/ directories/ triggers/ types/ views/
└── sources/
    ├── functions/ mviews/ packages/ partitions/
    └── procedures/ triggers/ types/ views/
```

### Migration Assessment
- **Database Selection:**
  - Avoid starting with the Oracle Application database.
  - Choose the smallest with minimal PL/SQL to learn Ora2Pg.
  - Select a representative database to build experience.
- **Cost Estimation:**
  - Use Ora2Pg's migration assessment report.
   ```sh
   ora2pg -c /etc/ora2pg.conf -t SHOW_REPORT --estimate_cost --dump_as_html > report.html
   ```

### Schema Migration
- **Exportable Elements:**
  - Tables, constraints, indexes, sequences, triggers, views, tablespaces, grants, types, partitions, procedures, functions, packages, synonyms, database links, materialized views.
- **Non-Exportable Elements:**
  - IOT/Cluster indexes, bitmap indexes, reverse indexes, type inheritance, global indexes over partitions, global temporary tables, virtual columns, compound triggers.

### Data Migration
- **Big Data Considerations:**
  - Tera bytes of data and billions of rows can take hours.
  - Purge or archive unused or rarely used data.
  - Import live data first, then remaining data.
- **Performance:**
  - Ensure both Oracle and PostgreSQL databases are responsive.
  - Use parallel table export, multiple processes, and COPY mode for efficient data transfer.

### New Features in Ora2Pg 15.0
- **Autonomous Transactions:**
  - Not natively supported in PostgreSQL.
  - Ora2Pg uses a wrapper function via DBLINK.
- **Database Link:**
  - Access objects on a remote database.
- **External Table:**
  - Oracle EXTERNAL TABLEs are exported as foreign tables using file_fdw.
- **BFILE:**
  - BFILE data type is transformed into bytea.
- **DIRECTORY:**
  - Exported to be used with the external_file extension.
- **SYNONYM:**
  - Synonyms are exported as views.

### ROWNUM and Empty String vs NULL
- **ROWNUM:**
  - Oracle: `SELECT * FROM table WHERE ROWNUM < N` rewritten as `LIMIT N`.
  - Oracle: `SELECT * FROM table WHERE ROWNUM >= N` rewritten as `LIMIT ALL OFFSET N`.
  - Row enumeration needs to be rewritten as window functions.
- **Empty String vs NULL:**
  - Oracle: `'' = NULL`
  - PostgreSQL: `'' <> NULL`
  - Ora2Pg replaces conditions with `coalesce()` for consistent behavior.

### PL/SQL to PLPGSQL Conversion
- **Supported:**
  - Triggers, functions, procedures, and packages.
- **Unsupported:**
  - Global variables in packages, anonymous/initialization blocks, nested functions.
- **Rewriting Required:**
  - External modules (DBMS, UTL), `CONNECT BY`, `OUTER JOIN (+)`, `DECODE`.

### Oracle DBMS Modules
- **Implemented in orafce library:**
  - DBMS_OUTPUT, UTL_FILE, DBMS_PIPE, DBMS_ALERT.
- **Advanced Functionalities:**
  - Oracle Advanced Queuing (PGQ from Skytools).
  - Oracle Jobs scheduler (pgAgent/JobScheduler).
- **Perl Rewrites:**
  - Example: Sending emails using UTL_SMTP.

### OUTER JOIN (+)
- **LEFT OUTER JOIN:**
  - Oracle: `SELECT * FROM a, b WHERE a.id = b.id (+)`
  - PostgreSQL: `SELECT * FROM a LEFT OUTER JOIN b ON (a.id = b.id)`
- **RIGHT OUTER JOIN:**
  - Oracle: `SELECT * FROM a, b, c WHERE a.id = b.id (+) AND a.id (+) = c.id`
  - PostgreSQL: `SELECT * FROM a LEFT OUTER JOIN b ON (a.id = b.id) RIGHT OUTER JOIN c ON (a.id = c.id)`
- **FULL OUTER JOIN:**
  - Oracle: `SELECT * FROM a, b WHERE a.id = b.id (+) UNION ALL SELECT * FROM a, b WHERE a.id (+) = b.id AND a.id = NULL`
  - PostgreSQL: `SELECT * FROM a FULL OUTER JOIN b ON (a.id = b.id)`

### Conversion to ANSI Joins
- **Current Limitation:**
  - Ora2Pg cannot automatically convert (+) notation to ANSI-compliant joins. Manual conversion is required.