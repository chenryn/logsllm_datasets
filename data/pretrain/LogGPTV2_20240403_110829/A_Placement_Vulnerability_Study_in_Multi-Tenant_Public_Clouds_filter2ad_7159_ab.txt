# Optimized Text

## Introduction
The provided text discusses the challenges and methods for detecting co-residency of virtual machines (VMs) in modern cloud environments. It outlines the inefficacy of traditional detection techniques and introduces a new, reliable method based on memory covert-channels.

## Challenges in Modern Clouds
Modern public clouds have adopted advanced technologies to enhance isolation between tenants, making traditional co-residency detection techniques ineffective. For example, Virtual Private Clouds (VPCs) use private IP addresses, preventing the use of network timing tests. Additionally, local storage is no longer the default, and cache-based covert channels are less reliable due to the use of multiple CPU packages.

## Co-Residency Detection Techniques
To address these challenges, we developed two novel co-residency detection methods: **memory probing** and **memory locking**. These methods exploit shared hardware resources and are designed to be:
1. Applicable to various heterogeneous software and hardware stacks.
2. Highly reliable with low false detection rates.
3. Fast enough for large-scale experimentation.

### Memory Locking Sender
The sender creates contention by performing atomic operations on unaligned memory addresses, which temporarily locks the memory bus. This can be detected as it slows down other uses of the bus. The pseudocode for the sender is shown in Figure 3.

### Receivers
#### Memory Probing Receiver
This receiver measures memory bandwidth by accessing data that always misses in the cache hierarchy and hits memory. The time taken to complete a fixed number of probes indicates co-residency if the performance degrades significantly.

#### Memory Locking Receiver
Similar to the sender, this receiver measures the number of unaligned atomic operations completed per unit time. It works even when the cache architecture is unknown.

### Evaluation
We evaluated our methods on a local testbed with hardware configurations similar to those found in the cloud. Results showed a performance degradation of at least 3.4x compared to non-co-resident instances, indicating high reliability. The tests were also quick, taking only a fraction of a second to complete.

## Cooperative Co-Residency Detection
For studying placement policies, we controlled both VMs under test. We launched VMs from two separate accounts and tested them for pairwise co-residency. Key challenges included handling noise from neighboring VMs, tuning thresholds for different hardware, and scaling the implementation.

### Handling Noise
To handle noise, we alternated between measuring performance with and without the senderâ€™s signal and took ten samples of each measurement. This ensured that any noise equally affected both measurements.

### Tuning Thresholds
We encountered different machine configurations across Google Compute Engine (GCE), Amazon EC2, and Microsoft Azure. We tuned the performance degradation threshold to 2x for GCE and EC2 and 1.5x for Azure. Figure 6 shows the distribution of performance degradation for Intel machines, while Figure 8 highlights the sensitivity of AMD machines to the choice of threshold.

## Conclusion
Our co-residency detection methods, based on memory covert-channels, are effective and reliable in modern cloud environments. They provide a robust solution for detecting co-residency, enabling further studies on placement policies and security vulnerabilities.

---

This optimized version aims to make the text more coherent, clear, and professional, ensuring that the key points and methodologies are well-explained.