Finalizer is currently define to be `finalizer(x, function)`.  
But (I assert that) it should be `finalizer(function, x)`  
as this allows do-block syntax to define the function.
Right now I must write
    function finalize_state(st)
            close(st.pending)
            close(st.complete)
    end
    finalizer(state, finalize_state)
Where as if it took the function as first argument,  
like `map`, `filter`, (Dict) `get!` and `remotecall` (#11406)  
I could be writing:
    finalizer(state, finalize_state) do st
            close(st.pending)
            close(st.complete)
    end
I suggest deprecating, and creating the new overload.
* * *
I wonder if it isn't worth search through the whole of Base and Core looking
for methods that take functions (or things that look like functions), as a
non-first parameter, then I could raise just one issue for all of them (or do
PR)  
(I could script that pretty easy using `parse`)