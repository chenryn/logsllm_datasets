#### 多建筑映像
Docker 最大的优点之一是它的简单性。然而，随着技术的发展，事情变得更加复杂。当 Docker 开始在 ARM、x64、PowerPC 和 s390x 的变体上支持多种不同的平台和架构(如 Windows 和 Linux)时，这种情况就发生了。突然间，流行的映像有了不同平台和架构的版本。作为开发人员和操作人员，我们必须确保为我们使用的平台和架构获取正确的版本。这打破了平稳的 Docker 体验。
> **注意:**我们用“架构”这个术语来指代 CPU 架构，比如 x64 和 ARM。我们使用术语“平台”来指操作系统(Linux 或 Windows)或操作系统和架构的组合。
多建筑映像救援！
幸运的是，Docker 和 Docker Hub 有一个支持连拱映像的巧妙方法。这意味着单个映像，如`golang:latest`，可以有 x64 上的 Linux、PowerPC 上的 Linux、Windows x64、不同版本 ARM 上的 Linux 等等的映像。明确地说，我们谈论的是支持多个平台和架构的单个映像标签。我们将在一秒钟内看到它的运行，但这意味着您可以从任何平台或架构运行一个简单的`docker image pull goloang:latest`，Docker 将为您的平台和架构提取正确的映像。
为了实现这一点，注册中心 API 支持两个重要的构造:
*   **货单清单**
*   **舱单**
**清单**正是它听起来的样子:特定映像标签支持的架构列表。每个受支持的架构都有自己的**清单*来详细描述组成它的层。
图 6.9 以官方`golang`映像为例。左边是**清单**，其中包含该映像支持的每个架构的条目。箭头显示**清单**中的每个条目指向包含映像配置和图层数据的**清单**。
![Figure 6.9](img/figure6-9.png)
Figure 6.9
让我们先看看理论，然后再看它的实际应用。
假设你在树莓 Pi 上运行 Docker(运行在 ARM 架构上的 Linux)。当您提取一个映像时，您的 Docker 客户端会对 Docker Hub 公开的 Docker 注册表 API 进行相关调用。如果映像存在**清单**，将对其进行解析，以查看 ARM 上的 Linux 是否存在条目。如果存在 ARM 条目，则检索该映像的**清单**，并解析构成该映像的图层的加密标识。然后从 Docker Hub 中拉出每一层。
以下示例通过从官方`golang`映像启动一个新容器并在容器内运行`go version`命令来展示这是如何工作的。`go version`命令的输出显示了 Go 的版本以及容器/主机的平台和 CPU 架构。需要注意的是，两个例子使用了完全相同的`docker container run`命令。我们不必告诉 Docker 我们需要 Linux x64 或 Windows x64 版本的映像。我们只是运行正常的命令，让 Docker 负责为我们运行的平台和架构获取正确的映像！
x64 上的 Linux 示例:
```
$ docker container run --rm golang go version
go version go1.14.2 linux/amd64 
```
 `x64 上的 Windows 示例:
```
> docker container run --rm golang go version
go version go1.14.2 windows/amd64 
```
 `Windows Golang 映像目前的大小超过 5GB，下载可能需要很长时间。
“docker manifest”命令允许您检查 Docker Hub 上任何映像的清单列表。以下示例在 Docker Hub 上检查`golang`映像的清单列表。可以看到各种 CPU 架构都支持 Linux 和 Windows。您可以在没有`grep`过滤器的情况下运行相同的命令来查看完整的 JSON 清单。
```
$ docker manifest inspect golang | grep 'architecture\|os'
            "architecture": "amd64",
            "os": "linux"
            "architecture": "arm",
            "os": "linux",
            "architecture": "arm64",
            "os": "linux",
            "architecture": "386",
            "os": "linux"
            "architecture": "ppc64le",
            "os": "linux"
            "architecture": "s390x",
            "os": "linux"
            "architecture": "amd64",
            "os": "windows",
            "os.version": "10.0.14393.3630"
            "architecture": "amd64",
            "os": "windows",
            "os.version": "10.0.17763.1158" 
```
 `所有官方图片都有清单。
您可以使用`docker buildx`为不同的平台和架构创建自己的构建，然后使用`docker manifest create`创建自己的清单列表。
以下命令根据当前目录的内容为 ARMv7 构建一个名为`myimage:arm-v7`的映像。它基于`https://github.com/nigelpoulton/psweb`中代码中的代码。
```
$ docker buildx build --platform linux/arm/v7 -t myimage:arm-v7 .
[+] Building 44.4s (10/10) FINISHED                                                                   \
 => [internal] load build definition from Dockerfile          0.1s
 => => transferring dockerfile: 424B                          0.0s
 => exporting to image                                        3.2s 
 => => exporting layers                                       3.2s 
 => => writing image sha256:61cc82bdaa...                     0.0s 
 => => naming to docker.io/library/myimage:arm-v7             0.0s 
```
 `该命令的妙处在于，您不必从 ARMv7 Docker 节点运行它。事实上，显示的示例是在 x64 硬件上的 Linux 上运行的。
在撰写本文时，`buildx`是一个实验特性，需要在您的`~/.docker/config.json`文件中进行如下`experimental=true`设置。
```
{
  "experimental": true
} 
```
 `#### 删除映像
当您不再需要 Docker 主机上的映像时，您可以使用`docker image rm`命令将其删除。`rm`是 remove 的缩写。
删除映像将从 Docker 主机中删除映像及其所有图层。这意味着它将不再出现在`docker image ls`命令中，并且包含图层数据的 Docker 主机上的所有目录都将被删除。但是，如果一个映像图层由多个映像共享，则该图层将不会被删除，直到引用它的所有映像都被删除。
用`docker image rm`命令删除上一步拉出的映像。以下示例按标识删除映像，这在您的系统上可能有所不同。
```
$ docker image rm 02674b9cb179
Untagged: alpine@sha256:c0537ff6a5218...c0a7726c88e2bb7584dc96
Deleted: sha256:02674b9cb179d57...31ba0abff0c2bf5ceca5bad72cd9
Deleted: sha256:e154057080f4063...2a0d13823bab1be5b86926c6f860 
```
 `您可以在同一个命令中列出多个映像，方法是用空格分隔它们，如下所示。
`$ docker image rm f70734b6a266 a4d3716dbb72`
如果正在运行的容器正在使用您试图删除的映像，您将无法删除它。再次尝试删除操作之前，请停止并删除所有容器。
在 Docker 主机上删除所有映像的便捷快捷方式是运行`docker image rm`命令，并通过调用带有`-q`标志的`docker image ls`向其传递系统上所有映像标识的列表。这显示在下面。
如果您是在 Windows 系统上进行操作，这只能在 PowerShell 终端中工作。它在 CMD 提示符下不起作用。
```
$ docker image rm $(docker image ls -q) -f 
```
 `要了解这是如何工作的，下载几张图片，然后运行`docker image ls -q`。
```
$ docker image pull alpine
Using default tag: latest
latest: Pulling from library/alpine
e110a4a17941: Pull complete
Digest: sha256:3dcdb92d7432d5...3626d99b889d0626de158f73a
Status: Downloaded newer image for alpine:latest
$ docker image pull ubuntu
Using default tag: latest
latest: Pulling from library/ubuntu
952132ac251a: Pull complete
82659f8f1b76: Pull complete
c19118ca682d: Pull complete
8296858250fe: Pull complete
24e0251a0e2c: Pull complete
Digest: sha256:f4691c96e6bba...128ae95a60369c506dd6e6f6ab
Status: Downloaded newer image for ubuntu:latest
$ docker image ls -q
bd3d4369aebc
4e38e38c8ce0 
```
 `查看`docker image ls -q`如何返回一个列表，该列表仅包含系统上本地提取的所有映像的映像标识。将此列表传递给`docker image rm`将删除系统上的所有映像，如下所示。
```
$ docker image rm $(docker image ls -q) -f
Untagged: ubuntu:latest
Untagged: ubuntu@sha256:f4691c9...2128ae95a60369c506dd6e6f6ab
Deleted: sha256:bd3d4369aebc494...fa2645f5699037d7d8c6b415a10
Deleted: sha256:cd10a3b73e247dd...c3a71fcf5b6c2bb28d4f2e5360b
Deleted: sha256:4d4de39110cd250...28bfe816393d0f2e0dae82c363a
Deleted: sha256:6a89826eba8d895...cb0d7dba1ef62409f037c6e608b
Deleted: sha256:33efada9158c32d...195aa12859239d35e7fe9566056
Deleted: sha256:c8a75145fcc4e1a...4129005e461a43875a094b93412
Untagged: alpine:latest
Untagged: alpine@sha256:3dcdb92...313626d99b889d0626de158f73a
Deleted: sha256:4e38e38c8ce0b8d...6225e13b0bfe8cfa2321aec4bba
Deleted: sha256:4fe15f8d0ae69e1...eeeeebb265cd2e328e15c6a869f
$ docker image ls
REPOSITORY     TAG    IMAGE ID    CREATED     SIZE 
```
 `让我们提醒自己使用 Docker 映像的主要命令。
### 映像-命令
*   `docker image pull`是下载图片的命令。我们从远程注册中心的存储库中提取映像。默认情况下，映像将从 Docker Hub 上的存储库中提取。该命令将从 Docker Hub 上的`alpine`存储库中提取标记为`latest`的映像:`docker image pull alpine:latest`。
*   `docker image ls`列出 Docker 主机本地映像缓存中存储的所有映像。要查看 SHA256 映像摘要，请添加`--digests`标志。
*   `docker image inspect`是美的东西！它为您提供了映像的所有精彩细节—图层数据和元数据。
*   `docker manifest inspect`允许您检查存储在 Docker Hub 上的任何映像的清单列表。这将显示`redis`映像的清单:`docker manifest inspect redis`。
*   `docker buildx`是一个 Docker CLI 插件，它扩展了 Docker CLI 以支持多弧构建。
*   `docker image rm`是删除映像的命令。该命令显示如何删除`alpine:latest`映像— `docker image rm alpine:latest`。您不能删除与处于运行(启动)或停止(退出)状态的容器相关联的映像。
### 章节总结
在本章中，我们了解了 Docker 映像。我们了解到它们包含运行应用所需的一切。这包括:足够的操作系统、源代码文件和依赖项。在某些方面，映像就像虚拟机模板，用于启动容器。在引擎盖下，它们由一个或多个只读层组成，当堆叠在一起时，构成了整体映像。
我们使用`docker image pull`命令将一些映像拉入 Docker 主机的本地注册表。
我们讨论了映像命名、官方和非官方转贴、分层、共享和加密标识。
我们研究了 Docker 如何支持多架构和多平台映像，最后我们研究了一些用于处理映像的最常见命令。
在下一章中，我们将进行类似的容器之旅——映像的运行时兄弟。````````````**``````````````````