most_common_freqs      | {0.202267,0.2015,0.1997,0.1995,0.197033}  
histogram_bounds       |   
correlation            | 1  
most_common_elems      | {test4,test5,test6,test7,test8}  
most_common_elem_freqs | {0.197033,0.1997,0.1995,0.202267,0.2015,0.197033,0.202267,0}  
elem_count_histogram   | {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}  
```  
most_common_elems中表示出现最频繁的几个元素.  
most_common_elem_freqs的除掉最后3个剩余的则分别对应common_elems的元素的占比。  
例如第一个test4元素统计出来出现的频率是0.197033  
我们可以来计算一下看看和实际是否相符.  
首先查看这个表有多少条记录.  
```  
digoal=# select reltuples from pg_class where relname='array_gist_test';  
-[ RECORD 1 ]-----  
reltuples | 499988  
```  
然后根据这个记录数乘以频率就等于这个记录有多少条.  
```  
digoal=# select 0.197033*499988;  
-[ RECORD 1 ]----------  
?column? | 98514.135604  
```  
看看真实的test4有多少条.  
```  
digoal=# select count(*) from array_gist_test where class @> array['test4'];  
-[ RECORD 1 ]  
count | 99997  
```  
与统计到的数据基本一致.  
前面5个值加起来刚好等于1, 最后一位是0.  
```  
digoal=# select 0.197033+0.1997+0.1995+0.202267+0.2015;  
-[ RECORD 1 ]------  
?column? | 1.000000  
```  
好了，那么剩余的最后3个值0.197033,0.202267,0分别是什么意思呢?  
0.197033是指前面所有频率值的最小值。  
0.202267是指前面所有频率值的最大值。  
0表示除去这些comm_elems之外的elems占的比例.  
我们可以来看看到底是不是0.  
```  
digoal=# select class,count(*) from array_gist_test group by class order by count(*);  
              class              | count   
---------------------------------+-------  
 {test2}                         |     1  
 {test1}                         |     1  
 {digoal,francs,david,hank,dage} |     1  
 {test7}                         | 99997  
 {test8}                         | 99997  
 {test4}                         | 99997  
 {test6}                         | 99997  
 {test5}                         | 99997  
```  
从结果上可以看出, 其他elems为 :  test1, test2, digoal, francs, david, hank, dage总共出现在3行中. 占比0.000006, 如下.  
```  
digoal=# select count(*) from array_gist_test ;  
 count    
--------  
 499988  
(1 row)  
digoal=# select 3/499988.0;  
          ?column?            
----------------------------  
 0.000006000144003456082946  
(1 row)  
```  
为什么most_common_elem_freqs的最后一位不是0.000006呢, 原因是在analyze时根本就没有取到这3行.   
重置一个比较大的set default_statistics_target=10000. 重新分析就能看到更全面的数据了.  
```  
digoal=# set default_statistics_target=10000;  
digoal=# analyze array_gist_test ;  
digoal=# select * from pg_stats where tablename='array_gist_test' and attname='class';  
most_common_elems      | {dage,david,digoal,francs,hank,test1,test2,test4,test5,test6,test7,test8}  
most_common_elem_freqs | {2.00005e-06,2.00005e-06,2.00005e-06,2.00005e-06,2.00005e-06,2.00005e-06,2.00005e-06,0.199999,0.199999,0.199999,0.199999,0.199999,2.00005e-06,0.199999,0}  
```  
最后解释一下elem_count_histogram的意思，A histogram of the counts of distinct non-null element values within the values of the column, followed by the average number of distinct non-null elements.就说和default_statistics_target有关系，比如默认是100，那elem_count_histogram就有101个值, 前100个值表示分成均等的100份后，每份中class列包含的distinct non-null element的个数。最后一位是平均的distinct non-null elements的值. 不过个人感觉这个统计没有什么实质的意义. 应该再配合其他的统计信息使用.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")