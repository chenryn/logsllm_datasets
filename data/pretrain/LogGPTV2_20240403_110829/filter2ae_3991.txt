# 在iOS内核上下文中运行代码：iOS 13.7上的本地特权提升

##### 译文声明
本文为翻译文章，原文作者为ZecOps，发布于[blog.zecops.com](https://blog.zecops.com)。译文仅供参考，具体内容及含义以原文为准。

## 简介
随着iOS的广泛普及，它吸引了大量安全研究人员的关注。苹果公司不断加强iOS的安全性，快速开发和实施新的缓解措施。这些措施显著提高了攻击者入侵iOS设备的难度，使其成为最难被黑客攻击的平台之一。然而，这并未能完全阻止经验丰富的个人或资金雄厚的组织通过提升权限来实现远程代码执行，并在设备上保持持久性。

本文是关于在iOS上实现特权提升系列文章的第一篇。我们将持续更新这一系列，直至获得对设备的特权访问、用户空间利用以及重启后的持久性。本文将详细介绍几个漏洞，使我们能够在iOS内核上下文中运行代码。通过将这些漏洞与其他漏洞（如iOS MailDemon漏洞或基于WebKit的漏洞）结合，可以实现对iOS设备的远程控制。

这个exploit是ZecOps赏金活动的一部分。我们感谢[@08Tc3wBB](https://github.com/08Tc3wBB)参与了ZecOps赏金活动，并感谢所有在此项目中提供帮助的人。我们也感谢苹果安全团队修复了这些漏洞，防止它们在最新版本的iOS中被进一步滥用。

当我们在计划发布这篇博客时，已经发布了完整的本地特权提升(LPE)链，可以在iOS 13.7及更早版本的PAC和非PAC设备上运行。我们将此版本完全开源，相信这是改善iOS研究和平台安全性的最佳方式。

## 第一部分 - 漏洞
AppleAVE2是一个图形IOKit驱动程序，运行在内核层，仅存在于iOS平台上。与许多其他iOS专用驱动程序一样，它不是开源的，且大多数符号已被删除。该驱动程序无法从默认的应用程序沙箱环境中访问，这减少了苹果工程师或其他研究人员进行全面分析的机会。旧版实现表明这是一个良好的攻击面。

早在2017年，Zimperium zLabs团队的Adam Donenfeld就在同一个驱动程序中发现了7个漏洞。尽管存在诸如PAC（针对A12及以上版本的iPhone/iPad）和zone_require（iOS 13及以上版本）等强大的缓解措施，但某些漏洞（如CVE-2017-6997、CVE-2017-6999）仍然非常有吸引力。这些任意内存操作漏洞在信息泄漏漏洞链中使用时潜力巨大。

虽然这些漏洞都有CVE编号，表明它们已被修复，但苹果之前并没有一次性修复所有漏洞，甚至有时无法完全修复。考虑到这一点，让我们开始寻找下一个AVE漏洞！

### AppleAVE2方法
AppleAVE2通过重写`IOUserClient::externalMethod`公开了9个方法（索引0-8）。其中两个方法（索引0和1）允许按FIFO顺序添加或删除clientbuf。其余方法（索引3-8）最终都通过`IOCommandGate`调用`AppleAVE2Driver::SetSessionSettings`，以确保线程安全并避免竞争条件。

#### 主要方法
我们主要使用索引7的方法对clientbuf进行编码，这意味着通过从用户空间提供的ID加载多个IOSurface，并使用索引6的方法触发位于`AppleAVE2Driver::SetSessionSettings`内部的多个安全漏洞。

### clientbuf结构
clientbuf是通过`IOMalloc`分配的内存缓冲区，其大小在iOS 13.2中为0x29B98。每个clientbuf对象包含指向前后的指针，形成一个双向链表，因此`AppleAVE2Driver`实例仅存储第一个clientbuf指针。

clientbuf包含多个MEMORY_INFO结构。当用户空间提供IOSurface时，会分配iosurfaceinfo_buf，然后用于填充这些结构。iosurfaceinfo_buf包含指向AppleAVE的指针以及从用户空间到内核空间映射的相关变量。

作为clientbuf结构的一部分，InitInfo_block的内容是从用户控制的内存中复制的，这种情况发生在用户在添加新的clientbuf后首次调用另一个公开的方法（索引7）时。

m_DPB与任意内存读取原语有关，将在后续文章中介绍。

## IOSurface简介
如果你不熟悉IOSurface，请阅读以下内容：
根据苹果的描述，IOSurface用于在多个进程之间更有效地共享硬件加速的缓冲区数据（用于framebuffers和textures）。与AppleAVE不同，可以通过任何用户态进程使用`IOSurfaceRootUserClient`轻松创建IOSurface对象。创建IOSurface对象时，你会得到一个32位长的Surface ID号，用于在内核中进行索引，以便内核能够将与该对象关联的用户空间内存映射到内核空间。

## 第一个漏洞 (iOS 12.0 – iOS 13.1.3)
第一个AppleAVE漏洞是CVE-2019-8795，加上另外两个漏洞：一个击败了KASLR的内核信息泄漏（CVE-2019-8794）和一个沙盒逃逸（CVE-2019-8797），在iOS 12上创建了一个能够越狱设备的漏洞利用链。直到iOS 13的最终版本发布，该版本通过将沙盒规则应用于易受攻击的进程并阻止其访问AppleAVE来实现沙盒逃逸。因此，沙盒逃逸被之前讨论的另一个沙盒逃逸漏洞替代。

iOS 13.2更新后，第一个AppleAVE漏洞最终被修复。简短描述如下：当用户释放clientbuf时，它会遍历clientbuf包含的每个MEMORY_INFO，并尝试取消映射并释放相关的内存资源。由于越界访问权限，未修复的版本仍然有缺陷，允许攻击者劫持内核代码在常规和PAC支持的设备中执行。这个缺陷也可以通过操作符delete成为任意内存释放原语。而在苹果修复iOS 13.6上的zone_require漏洞之前，这就足以在最新iOS设备上实现越狱。

今天发布的POC只是一个初始版本，将允许其他人进一步使用它。POC与ZecOps共享基本的分析数据，以发现更多的漏洞，帮助进一步保护iOS，这个选项可以在源代码中禁用。

在下一篇文章中，我们将介绍：
- 内核中的其他漏洞
- 如何利用这些漏洞
- 用户空间的漏洞
- 最终的持久性机制可能永远不会被修补