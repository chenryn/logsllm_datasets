      obsoleteTag: 'MINEIOTADOTCOM9999999999999',
      timestamp: 1526454765,
      currentIndex: 4,
      lastIndex: 6,
      bundle: 'WIIPVFKRGKVEXGEEPQROFWRSDLW9WONYVTCGJDWJREGXPLGVSJAVJSKYHHZDWBX9JUISRTCUVSXWLYCKW',
      trunkTransaction: 'LIWIJSQSZNUWMBWQMNSXZQNPGCCVVUKTRMWFHIUKTSMQZ9GCOCTFXVKXWTFBGYEKVCLJWWIBYOSWZ9999',
      branchTransaction: 'ASIETWSCPXMKGMP9I9QPUNHEETTOFCKKLQAEBEYBONQXOMXUBPDSJGUFEXWTD9AM9HADUESAKIRD99999',
      tag: 'MINEIOTADOTCOM9999999999999',
      attachmentTimestamp: 1526456063898,
      attachmentTimestampLowerBound: 0,
      attachmentTimestampUpperBound: 12,
      nonce: 'RMDY9PXCX9YPTCDUBPDOYDHSPQF'
    }
因为签名信息实在太长，所以做了截取，其中`value`就代表这个交易的输入或是输出，此处表明此交易是这个bundle的输入，而`currentIndex`和`lastIndex`则分别表示从0开始计数的此交易在该bundle中的序列位置以及该bundle中最后一个交易的序列位置，一般排在前面的都是输出的交易，后面的就是这样的包含签名的输入交易，下面的`trunkTransaction`和`branchTransaction`则分别表示被该交易批准的两个第一跟第二个交易，最后的nonce就是POW运算时进行修改的变量，使该交易的hash符合要求，也就是末四位为9，在该三进制系统里其实也就是0
另外还有值得一提的一点是这里的签名的长度都是2187个tryte，你可能会觉得奇怪，因为前面的签名过程里我们可以看到根据选择的私钥的安全等级不同，私钥长度不同，对应的签名长度也不同，只有安全等级为1时产生的签名长度才是2187
tryte，而在钱包默认的安全登记2下，签名的长度应该是2187 * 2 tryte
确实，这也是IOTA中又一比较奇怪的地方，对于这样的情况它是将签名分成两半在两个交易里进行发送的，再上图中其中一个是在input中value为负的一笔交易，另一个则是output中value为0的一笔交易，因为这两部分分别使用不同的hash片段进行验证，所以对签名的验证并没有影响，至于说为何这样设计，因为在IOTA中一笔交易的大小是固定的2673
tryte，里面所有的字段都是定长的，目的是方便解析器的解析，所以便采取了这样的方式，看起来确实是非常奇怪，而且这样的定长交易一定程度上也造成了网络资源的浪费，很多不包含签名的output交易也不得不在签名字段填充满9以满足长度需求
## bundle hash
然后我们来看看上面的bundle，IOTA中也正是根据这一项将属于该bundle的交易划分到一起，再按index进行排列，可见IOTA中的交易结构还是比较特别的，这其中其实还有很多问题与细节，不过这里就不展开了，有兴趣的可以自己研究研究
大家应该也注意到这里的bundle值也是一串hash，其实这就是我们签名的对象，它会用每笔交易中的`address`, `value`,
`obsoleteTag`,`timestamp`,`currentIndex` 和 `lastIndex`生成hash，也就是bundle hash
不过我们签名及验证时使用的hash并不是直接取这里的bundle hash，而是会先进行一定的变换变成`normalized bundle
hash`，具体过程如下
首先将81 tryte长的`bundle hash`均分为三部分，即每部分27
tryte，然后对这每部分分别计算其所以tryte转换为10进制后的和，即对于第一部分
> sum0=TtoD(H[0][0])+TtoD(H[0][1])+...+TtoD(H[0][26])
得到三部分分别的总和sum后，接下来的目标就是将sum调整为0，当该部分总和大于0时，循环将该部分的第一个tryte减一，直到修改后sum为0，如果第一个tryte已经修改到了最小值，则从第二个tryte继续，一直往后直到sum为0，反之当sum小于0时亦然
修改完成后将这三部分组合即得到了`normalized bundle
hash`，就如你所看到的，这其实是一个对bundlehash进行平衡的过程，这样的话在签名时按照前面的算法相当于平均每个私钥块都hash了13次，不过说正常来说一个完善的hash算法其分布也应该是均匀的，所以这一步目的也是为了修正下偏差，另外就是对签名的一道确认了，事实上这一步也算是降低了碰撞的时间复杂度，毕竟在hash值后面的tryte都相同的情况下为了使sum为0，最前面的tryte哪怕不一样最终得到的`normalized
bundle hash`也是相同的，不过影响确实有限，在这里就忽略了
经过这一过程后我们可以说在经过一次签名后我们的私钥信息是被暴露了50%的，注意这里确实并不是直接暴露了私钥本身
要认识到这一点，我们不妨想一想在这样的WOTS机制下我们该如何伪造签名，我们直接从签名中得到的只有私钥平均hash了13次后的hash值，想要修改`bundlehash`直接找出对签名中hash的碰撞是不可能的，那么我们只能想办法修改`bundlehash`的同时也修改签名的值
因为我们知道了在原`normalized bundle hash`下签名得到的私钥各部分在`bundle hash`对应tryte
下的hash值，所以在这基础上我们也就可以计算这些hash进一步的hash，也就是说从这一部分hash知道digest部分的中间所有hash我们都是可以计算的，因为平均每块私钥都hash了13次，也就是说我们知道了这些私钥从13到26这些次数的hash值，也就是所有该私钥对应hash的一半，即我们获取了这些私钥信息的50%，这确实跟Lamport签名很不一样
不过修改了这一块的签名后我们就也得将`normalized
bundlehash`的对应位的tryte减去对应的次数，修改部分越多要减去的也就越多，然而这样的话`normalized
bundlehash`也会变得不满足要求，在验证签名时的normalized的过程中计算得到的sum就会跟0差很多，然后进行调整后得到的hash跟签名也就对不上了，除非你能逆向这个hash算法得到该私钥往前的hash值，这就又回到了原点，所以说仅使用一次的情况下该签名方案是安全的，一旦你使用了第二次，通过第二个签名我们就又可以得到随机的50%的hash，结合前面的那部分信息，我们就有可能修改签名与hash的同时又使得`normalized
bundle hash`满足要求，即成功伪造签名
## 签名方案的漏洞
事实上IOTA的WOTS签名算法在开始也是存在问题的，这起源于去年在reddit上的这篇[帖子](https://www.reddit.com/r/CryptoCurrency/comments/7gwl38/hello_guys_i_have_lost_30k_in_iota_and_i_would/)，有人在重用了他的某个地址后发现存入该地址的钱被盗走，可以在这看到[记录](https://thetangle.org/address/XTUYYPRVJIMEM9ERPF9CINWXWCOLKEQ9HKCXCYIBECXEMDEZIGVBXRRISKGBGITBQLPWTOJENAUQZKMJW)
该用户在使用该地址花费了一次后又向该地址转入了一笔钱，结果四个小时后这笔钱被盗走，一开始大家都猜是因为地址的重用，认为该用户在使用了该地址一次后不应该再次向该地址转入资金，不过按照我们前面的分析，仅仅只进行了一次签名的情况下暴露的私钥信息是有限的，除非黑客真的成功找到了一对碰撞，然而这也不应该是仅用四个小时就能完成的活，所以在分析过后发现是IOTA签名过程中存在问题
我们前面有提到当签名的hash中包含tryte字符M也就是十进制的13时，对应的私钥实际上是没有进行hash的，相当于直接在签名中暴露了，不过考虑到M出现的几率也就是1/27，所以这本来也不是什么大问题，但问题出在了IOTA的私钥的产生上
因为IOTA的私钥特别长，所以它的产生事实上也是一个不断hash的过程，利用了海绵函数的结构
图画的不是很好，不过大概是这么个意思，我们发现其实拿到了私钥的第一部分即H[0]后即可使用它迭代得到剩下的部分，生成整个私钥，现在我们再来看看该用户这一地址的第一笔bundle的bundlehash计算得到的`normalized
bundlehash`
可以发现对应的`normalized
bundlehash`第一个Tryte对应的值即为13，这表示该地址第一块的私钥被签名暴露了，通过签名我们可以计算得到该地址的私钥，可以参考这篇[分析](http://blog.lekkertech.net/blog/2018/03/07/iota-signatures/)中的代码，[reddit_key_recover.py](http://blog.lekkertech.net/downloads/code/IOTA/reddit_key_recover.py)及[calc_private.py](http://blog.lekkertech.net/downloads/code/IOTA/calc_private.py)
最终得到私钥
这就意味着只要`normalized
bundlehash`的第一个Tryte为M，该地址的私钥就是可以被获取的，算起来满足该条件的bundle也接近4%了，还是非常危险的，所以为了修复这一漏洞，现在签名时在计算`normalized
bundlehash`时如果结果中包含M的话，会将index为0的交易中`obsoleteTag`字段加一，然后再算一次`bundlehash`，循环往复直到`normalized
bundlehash`中不包含M为止
## 闲话
虽然在IOTA中重用地址是非常危险而不可取的，不过在该系统中目前倒也不是没有可重用地址，我们前面提到的协调节点，其使用的签名方案就是可重用地址的Merkle
OTS，因为它确实有这样的需求，得去批准大量的交易以稳定网络，代价是更长的签名，目前社区中也在探讨可重用地址机制的可行性
此外有时候IOTA中的一些地址重用行为也是其快照机制导致的，在IOTA中为了节省存储空间，会定期清理Tangle上的交易，将它们清空，只在记录上保留有余额的地址，因为钱包在由其种子派生出的私钥中按index从上往下进行搜索时碰到余额为0的就会停止，所以在每次快照后有必要将index排在前面的余额为空的地址附加到Tangle上，否则就可能会出现地址的重用
# 参考链接