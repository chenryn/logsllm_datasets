fsync = on        
synchronous_commit = off        
full_page_writes = on                  # 支持原子写超过BLOCK_SIZE的块设备，在对齐后可以关闭。或者支持cow的文件系统可以关闭。      
wal_writer_delay = 10ms        
wal_writer_flush_after = 1MB        
checkpoint_timeout = 30min        
max_wal_size = 32GB                    # shared_buffers*2       
min_wal_size = 8GB                     # max_wal_size/4       
archive_mode = always        
archive_command = '/bin/date'        
hot_standby = on      
max_wal_senders = 10        
max_replication_slots = 10        
wal_receiver_status_interval = 1s        
max_logical_replication_workers = 4        
max_sync_workers_per_subscription = 2        
random_page_cost = 1.2        
parallel_tuple_cost = 0.1        
parallel_setup_cost = 1000.0        
min_parallel_table_scan_size = 8MB        
min_parallel_index_scan_size = 512kB        
effective_cache_size = 32GB                 # 建议设置为主机内存的5/8。           
log_destination = 'csvlog'        
logging_collector = on        
log_directory = 'log'        
log_filename = 'postgresql-%a.log'        
log_truncate_on_rotation = on        
log_rotation_age = 1d        
log_rotation_size = 0        
log_min_duration_statement = 5s        
log_checkpoints = on        
log_connections = on                            # 如果是短连接，并且不需要审计连接日志的话，建议OFF。      
log_disconnections = on                         # 如果是短连接，并且不需要审计连接日志的话，建议OFF。      
log_error_verbosity = verbose        
log_line_prefix = '%m [%p] '        
log_lock_waits = on        
log_statement = 'ddl'        
log_timezone = 'PRC'        
log_autovacuum_min_duration = 0         
autovacuum_max_workers = 5        
autovacuum_vacuum_scale_factor = 0.1        
autovacuum_analyze_scale_factor = 0.05        
autovacuum_freeze_max_age = 1000000000        
autovacuum_multixact_freeze_max_age = 1200000000        
autovacuum_vacuum_cost_delay = 0        
statement_timeout = 0                                # 单位ms, s, min, h, d.  表示语句的超时时间，0表示不限制。        
lock_timeout = 0                                     # 单位ms, s, min, h, d.  表示锁等待的超时时间，0表示不限制。        
idle_in_transaction_session_timeout = 2h             # 单位ms, s, min, h, d.  表示空闲事务的超时时间，0表示不限制。        
vacuum_freeze_min_age = 50000000        
vacuum_freeze_table_age = 800000000        
vacuum_multixact_freeze_min_age = 50000000        
vacuum_multixact_freeze_table_age = 800000000        
datestyle = 'iso, ymd'        
timezone = 'PRC'        
lc_messages = 'en_US.UTF8'        
lc_monetary = 'en_US.UTF8'        
lc_numeric = 'en_US.UTF8'        
lc_time = 'en_US.UTF8'        
default_text_search_config = 'pg_catalog.simple'        
shared_preload_libraries='pg_stat_statements,pg_pathman'        
```      
2、修改备库将用到的自动流复制参数文件      
```      
cp $PGHOME/share/recovery.conf.sample ./      
mv recovery.conf.sample recovery.done      
vi recovery.done      
recovery_target_timeline = 'latest'      
standby_mode = on      
primary_conninfo = 'host=111.111.111.223 port=3433 user=rep password=xxxxxxxxxx'      
restore_command = 'BASEDIR="/pg_arch/pg3433" ; find $BASEDIR -name %f -exec cp {} %p \\;'       
```      
3、修改数据库认证权限访问控制ACL, pg_hba.conf      
```      
vi pg_hba.conf      
host all all 0.0.0.0/0 md5      
host replication rep 0.0.0.0/0 md5      
```      
4、启动数据库      
```      
pg_ctl start      
```      
5、创建流复制，数据库角色      
```      
psql -n      
create role rep replication login encrypted password 'xxxxxxxxxx';      
```      
## 备机      
1、创建备库      
```      
su - postgres      
pg_basebackup -D $PGDATA -F p -h 111.111.111.199 -p 3433 -U rep       
```      
2、修改数据库配置      
```      
cd $PGDATA      
vi postgresql.auto.conf      
archive_command = 'DT="/pg_arch/pg3433/`date +%F`" ; test ! -d $DT && mkdir -p $DT ; test ! -f $DT/%f && cp %p $DT/%f'      
```      
3、配置备库的自动同步参数文件      
```      
mv recovery.done recovery.conf      
vi recovery.conf      
primary_conninfo = 'host=111.111.111.199 port=3433 user=rep password=xxxxxxxxxx'      
```      
5、修改数据目录权限      
```      
su - root      
chmod 700 /data01/pg_root3433      
```      
## 双机      
1、系统启动时，自动启动数据库      
```      
vi /etc/rc.local        
# 追加        
su - postgres -c "pg_ctl start"        
```      
2、重启ECS验证      
```      
reboot        
su - postgres        
psql        
postgres=# show max_connections ;        
 max_connections         
-----------------        
 2000        
(1 row)        
```      
## 备机      
1、配置自动备份（快照备份）      
```      
su - root      
mkdir script      
vi /root/script/zfs_snap.sh          
#!/bin/bash         
date +%F%T      
# 自动创建、清理快照      
/sbin/zfs snapshot zp1/data01@`date +%Y%m%d`          
/sbin/zfs destroy zp1/data01@`date +%Y%m%d -d '-10 day'`          
/sbin/zfs list -t snapshot       
# 自动清理归档      
rm -rf /pg_arch/pg3433/`date +%F -d '-11 day'`      
date +%F%T      
```      
2、设置脚本权限      
```      
chmod 500 /root/script/zfs_snap.sh          
```      
3、设置自动备份任务，每天备份一次      
```      
# crontab -e          
1 8 * * * /root/script/zfs_snap.sh >> /root/zfs_snap.log 2>&1       
```      
## 自动恢复验证      
### 备机      
1、创建备份验证用到的配置文件，修改端口号，关闭归档。      
```      
su - root      
mkdir /root/test_recovery      
vi /root/test_recovery/postgresql.auto.conf       
# Do not edit this file manually!      
# It will be overwritten by the ALTER SYSTEM command.      
listen_addresses = '0.0.0.0'        
port = 11111  # 监听端口        
max_connections = 2000  # 最大允许的连接数        
superuser_reserved_connections = 10        
unix_socket_directories = '.'        
unix_socket_permissions = 0700        
tcp_keepalives_idle = 60        
tcp_keepalives_interval = 60        
tcp_keepalives_count = 10        
shared_buffers = 16GB                  # 共享内存，建议设置为系统内存的1/4  .        
maintenance_work_mem = 512MB           # 系统内存超过32G时，建议设置为1GB。超过64GB时，建议设置为2GB。超过128GB时，建议设置为4GB。        
work_mem = 64MB                        # 1/4 主机内存 / 256 (假设256个并发同时使用work_mem)      
wal_buffers = 128MB                    # min( 2047MB, shared_buffers/32 )       
dynamic_shared_memory_type = posix        
vacuum_cost_delay = 0        
bgwriter_delay = 10ms        
bgwriter_lru_maxpages = 500        
bgwriter_lru_multiplier = 5.0        
effective_io_concurrency = 0        
max_worker_processes = 128                       
max_parallel_workers_per_gather = 16        # 建议设置为主机CPU核数的一半。        
max_parallel_workers = 16                   # 看业务AP和TP的比例，以及AP TP时间交错分配。实际情况调整。例如 主机CPU cores-2      
wal_level = replica        
fsync = on        
synchronous_commit = off        
full_page_writes = on                  # 支持原子写超过BLOCK_SIZE的块设备，在对齐后可以关闭。或者支持cow的文件系统可以关闭。      
wal_writer_delay = 10ms        
wal_writer_flush_after = 1MB        
checkpoint_timeout = 30min        
max_wal_size = 32GB                    # shared_buffers*2       
min_wal_size = 8GB                     # max_wal_size/4       
archive_mode = off       
archive_command = 'DT="/pg_arch/pg3433/`date +%F`" ; test ! -d $DT && mkdir -p $DT ; test ! -f $DT/%f && cp %p $DT/%f'        
hot_standby = on      
max_wal_senders = 10        
max_replication_slots = 10        
wal_receiver_status_interval = 1s        
max_logical_replication_workers = 4        
max_sync_workers_per_subscription = 2        
random_page_cost = 1.2        
parallel_tuple_cost = 0.1        
parallel_setup_cost = 1000.0        
min_parallel_table_scan_size = 8MB        
min_parallel_index_scan_size = 512kB        
effective_cache_size = 32GB                 # 建议设置为主机内存的5/8。           
log_destination = 'csvlog'        
logging_collector = on        
log_directory = 'log'        
log_filename = 'postgresql-%a.log'        
log_truncate_on_rotation = on        
log_rotation_age = 1d        
log_rotation_size = 0        
log_min_duration_statement = 5s        
log_checkpoints = on        
log_connections = on                            # 如果是短连接，并且不需要审计连接日志的话，建议OFF。      
log_disconnections = on                         # 如果是短连接，并且不需要审计连接日志的话，建议OFF。      
log_error_verbosity = verbose        
log_line_prefix = '%m [%p] '        
log_lock_waits = on        
log_statement = 'ddl'        
log_timezone = 'PRC'        
log_autovacuum_min_duration = 0         
autovacuum_max_workers = 5        
autovacuum_vacuum_scale_factor = 0.1        
autovacuum_analyze_scale_factor = 0.05        
autovacuum_freeze_max_age = 1000000000        
autovacuum_multixact_freeze_max_age = 1200000000        
autovacuum_vacuum_cost_delay = 0        
statement_timeout = 0                                # 单位ms, s, min, h, d.  表示语句的超时时间，0表示不限制。        
lock_timeout = 0                                     # 单位ms, s, min, h, d.  表示锁等待的超时时间，0表示不限制。        
idle_in_transaction_session_timeout = 2h             # 单位ms, s, min, h, d.  表示空闲事务的超时时间，0表示不限制。        
vacuum_freeze_min_age = 50000000        
vacuum_freeze_table_age = 800000000        
vacuum_multixact_freeze_min_age = 50000000        
vacuum_multixact_freeze_table_age = 800000000        
datestyle = 'iso, ymd'        
timezone = 'PRC'        
lc_messages = 'en_US.UTF8'        
lc_monetary = 'en_US.UTF8'        
lc_numeric = 'en_US.UTF8'        
lc_time = 'en_US.UTF8'        
default_text_search_config = 'pg_catalog.simple'        
shared_preload_libraries='pg_stat_statements,pg_pathman'       
```      
2、创建自动恢复脚本，根据昨日快照克隆，并使用克隆恢复，判断是否可正常恢复      
```      
vi /root/test_recovery/recovery_test.sh           
#!/bin/bash          
date +%F%T            
. /var/lib/pgsql/.bash_profile         
DATE=`date -d '-1 day' +%Y%m%d`          
zfs clone -o mountpoint=/test_recovery zp1/data01@$DATE zp1/test_recovery          
rm -f /test_recovery/pg_root3433/postgresql.auto.conf           
rm -f /test_recovery/pg_root3433/postmaster.pid          
rm -f /test_recovery/pg_root3433/pg_wal/*          
cp -p /root/test_recovery/postgresql.auto.conf /test_recovery/pg_root3433/postgresql.auto.conf          
su - postgres -c "pg_ctl start -D /test_recovery/pg_root3433"          
for ((i=1;i<180;i++)) do          
  echo $i          
  sleep 20          
  psql -h 127.0.0.1 -p 11111 postgres postgres -c "select now(),* from pg_database;"          
  ret=$?          
  if [ $ret -eq 0 ]; then          
    break          
  fi          
done          
su - postgres -c "pg_ctl stop -w -t 6000 -m immediate -D /test_recovery/pg_root3433"          
sleep 60          
zfs destroy zp1/test_recovery        
date +%F%T         
```      
3、配置脚本权限      
```      
chmod 500 /root/test_recovery/recovery_test.sh       
```      
4、测试自动备份集恢复脚本      
```      
/root/test_recovery/recovery_test.sh       
2017-11-2923:23:15      
/var/lib/pgsql/.bash_profile: line 24: unalias: vi: not found      
rm: cannot remove ‘/test_recovery/pg_root3433/pg_wal/archive_status’: Is a directory      
/var/lib/pgsql/.bash_profile: line 24: unalias: vi: not found      
waiting for server to start....2017-11-29 23:23:15.879 CST [11051] LOG:  00000: listening on IPv4 address "0.0.0.0", port 11111      
2017-11-29 23:23:15.879 CST [11051] LOCATION:  StreamServerPort, pqcomm.c:593      
2017-11-29 23:23:15.898 CST [11051] LOG:  00000: listening on Unix socket "./.s.PGSQL.11111"      
2017-11-29 23:23:15.898 CST [11051] LOCATION:  StreamServerPort, pqcomm.c:587      
2017-11-29 23:23:16.422 CST [11051] LOG:  00000: redirecting log output to logging collector process      
2017-11-29 23:23:16.422 CST [11051] HINT:  Future log output will appear in directory "log".      
2017-11-29 23:23:16.422 CST [11051] LOCATION:  SysLogger_Start, syslogger.c:634      
 done      
server started      
1      
              now              |  datname  | datdba | encoding | datcollate |  datctype  | datistemplate | datallowconn | datconnlimit | datlastsysoid | datfrozenxid | datminmxid | dattablespace |               datacl                      
-------------------------------+-----------+--------+----------+------------+------------+---------------+--------------+--------------+---------------+--------------+------------+---------------+-------------------------------------      
 2017-11-29 23:23:36.572934+08 | postgres  |     10 |        6 | en_US.UTF8 | en_US.UTF8 | f             | t            |           -1 |         13805 |          548 |          1 |          1663 |       
 2017-11-29 23:23:36.572934+08 | template1 |     10 |        6 | en_US.UTF8 | en_US.UTF8 | t             | t            |           -1 |         13805 |          548 |          1 |          1663 | {=c/postgres,postgres=CTc/postgres}      