**Journal of Intelligent Information Systems, 17:2/3, 215–240, 2001**

© 2001 Kluwer Academic Publishers. Manufactured in The Netherlands.

### SP-GiST: An Extensible Database Index for Supporting Space Partitioning Trees

**WALID G. AREF**  
**IHAB F. ILYAS**  
Department of Computer Sciences, Purdue University, West Lafayette, IN 47907-1398, USA

#### Abstract
Emerging database applications require new indexing structures beyond B-trees and R-trees. Examples include k-D trees, tries, quadtrees, and their variants, which are often proposed as supporting structures in data mining, GIS, and CAD/CAM applications. These indexes share a common feature: they recursively divide the space into partitions. This paper introduces SP-GiST, a new extensible index structure that supports this class of data structures, specifically space-partitioning unbalanced trees. Simple method implementations demonstrate how SP-GiST can behave as a k-D tree, trie, quadtree, or any of their variants. The paper addresses issues related to clustering tree nodes into pages and concurrency control for SP-GiST. A dynamic minimum-height clustering technique is applied to minimize disk accesses and make such trees efficient in database systems. A prototype implementation of SP-GiST and performance studies of its tuning parameters are presented.

**Keywords:** space-partitioning trees, spatial databases, extensible index, generalized search trees, clustering

---

## 1. Introduction
Emerging database applications require new indexing structures beyond B+ trees. These applications may need different index structures to suit a variety of data types, such as video, image, and multidimensional data. Typical applications include cartography, CAD, GIS, telemedicine, and multimedia. For example, the quadtree (Finkel and Bentley, 1974; Klinger, 1971) is used in the Sloan Digital Sky Survey to build indexes for different views of the sky (a multi-terabyte database archive) (Szalay et al., 2000). The linear quadtree (Gargantini, 1982) is used in Oracle's spatial product (Oracle, 1999), and the trie data structure is used in (Aref et al., 1995) to index handwritten databases. The pyramid multi-resolution data structure (Tanimoto and Pavlidis, 1975) is used in Microsoft TerraServer (Barclay et al., 2000), an online atlas combining around eight terabytes of image data.

For additional database applications using various spatial and non-traditional tree structures, see (Berchtold et al., 1998; Oracle, 1999; Esperança and Samet, 1996; Faloutsos and Gaede, 1996; Faloutsos et al., 1997; Gaede and Günther, 1998; Güting, 1994; Orenstein and Manola, 1988; Samet, 1990a; Seeger and Kriegel, 1990; Sellis et al., 1997).

This research is supported by the National Science Foundation under Grant IIS-0093116.

## 2. Challenges and Motivation
Having a single framework to cover a wide range of these tree structures is attractive from the perspective of database system implementation but faces two main challenges:
1. **Storage/Structure Characteristics**: Most unbalanced spatial tree structures are not optimized for I/O, which is crucial for database systems. Quadtrees, tries, and k-D trees can be very deep and skinny, leading to many I/O accesses unless the problem of clustering tree nodes into pages is addressed.
2. **Implementation Effort**: Implementing a full-fledged index structure with appropriate concurrency and recovery mechanisms into the database engine is non-trivial. Repeating this process for each spatial tree that might be more suitable for a specific application requires significant changes to the DBMS core code.

The Generalized Search Tree (GiST) (Hellerstein et al., 1995) was introduced to provide a single implementation for B-tree-like indexes, such as the B+-tree (Knuth, 1973), R-tree (Guttman, 1984), and RD-tree (Hellerstein and Pfeffer, 1994). However, GiST does not support the class of unbalanced spatial indexes like quadtrees, tries, and k-D trees due to their structural characteristics.

## 3. Common Features of Space-Partitioning Trees
A key common feature of quadtrees, tries, and k-D trees is that at each level of the tree, the underlying space is partitioned into disjoint regions. For example, in a two-dimensional quadtree, each node's space is decomposed into four disjoint blocks. Similarly, in a trie, the space covered by a node is decomposed into 26 disjoint regions (one for each letter of the alphabet). We use the term "space-partitioning trees" to represent hierarchical data structures that decompose a certain space into disjoint partitions. The number and method of decomposition differ among these trees.

## 4. SP-GiST Framework
In this paper, we study the common features among space-partitioning trees to develop a framework capable of representing different tree structures and overcoming the difficulties that prevent their use in database engines. The DBMS will then be able to provide a large number of index structures with simple method plug-ins. For the framework of space-partitioning trees, we furnish the common functionalities such as insertion, deletion, and updating algorithms, concurrency control, recovery techniques, and I/O access optimization in the DBMS (only once). By writing the right extensions to the extensible single implementation, a quadtree, trie, k-D tree, or other spatial structures can be made available without modifying the DBMS internal code.

The rest of the paper is organized as follows:
- Section 2 presents the class of space-partitioning trees.
- Section 3 introduces the SP-GiST framework, including its external user interface and the realization of various tree structures.
- Section 4 describes the implementation of SP-GiST's internal methods.
- Section 5 discusses concurrency control and recovery for SP-GiST.
- Section 6 covers node clustering in SP-GiST.
- Section 7 provides implementation and experimental results for various tuning parameters of SP-GiST.
- Section 8 contains concluding remarks.

## 5. The Class of Space-Partitioning Trees
Space-partitioning trees refer to hierarchical data structures that recursively decompose a certain space into disjoint partitions. It is important to distinguish between data-driven and space-driven decompositions. Data-driven decomposition depends on the input data, while space-driven decomposition depends solely on the space. Examples of data-driven decompositions include the k-D tree (Bentley, 1975) and the point quadtree (Klinger, 1971). Examples of space-driven decompositions include the trie index (de la Briandais, 1959; Fredkin, 1960), the fixed grid (Nievergelt et al., 1984), the universal B-tree (Bayer, 1997), the region quadtree (Finkel and Bentley, 1974), and other quadtree variants (e.g., the MX-CIF quadtree (Kedem, 1982), the bintree, the PM quadtree (Samet and Webber, 1985), the PR quadtree (Orenstein, 1982), and the PMR quadtree (Nelson and Samet, 1986)).

Common features among these spatial data structures include recursive space partitioning, unbalanced tree structures, limited fan-out, and the existence of two types of nodes: index nodes (internal nodes) and data nodes (leaf nodes). The differences among these trees enable their use in a variety of emerging applications, depending on the nature of the spatial data and the types of queries supported.

## 6. SP-GiST Framework Interface
SP-GiST is a general index framework that covers a wide range of tree indexes representing the class of space-partitioning search trees. The structural characteristics that distinguish space-partitioning trees from other tree classes are:
1. Recursive space decomposition, producing a fixed number of disjoint partitions.
2. Unbalanced tree structures.
3. Limited fan-out, e.g., the quadtree has a fan-out of four.
4. Two types of nodes: index nodes and data nodes.

The framework consists of internal tree methods that reflect the similarities among all members of the class of space-partitioning trees and an external interface that enables the identification of features specific to a particular tree, reflecting the differences listed in Section 2.

By specifying user access methods similar to GiST (Hellerstein et al., 1995), SP-GiST has interface parameters and methods that allow it to represent the class of space-partitioning tree indexes and reflect the structural and behavioral differences among them.

### 6.1. Interface Parameters
The user can realize a particular space-partitioning tree using the following interface parameters:
- **NodePredicate**: This parameter gives the predicate to be used in the index nodes of the tree (addresses the structural difference SD1). For example, a quadrant in a quadtree or a letter in a trie are predicates associated with an index node.
- **Key Type**: This parameter gives the type of the data in the leaf level of the tree. For example, "Point" is the key type in an MX quadtree, while "Word" is the key type in a trie. The data types Point and Word must be pre-defined by the user.
- **NumberOfSpacePartitions**: This parameter gives the number of disjoint partitions produced at each decomposition (SD2). It also represents the number of items in index nodes. For example, quadtrees will have four space partitions, a trie of the English alphabet will have 26 space partitions, and the k-D tree will have only two space partitions at each decomposition.
- **Resolution**: This parameter gives the maximum number of space decompositions and is set depending on the space and the required granularity.
- **PathShrink**: For space-partitioning trees, recursive decomposition can lead to long, sparse structures. The PathShrink parameter is useful in limiting the number of times the space is recursively decomposed in response to data insertion. PathShrink can be one of three different policies:
  - **NeverShrink**: Data is inserted in the node that corresponds to the maximum resolution of the space, which may result in multiple recursive decompositions of the space.
  - **LeafShrink**: Data is inserted at the first available leaf node. Decomposition will not depend on the maximum possible resolution. In this strategy, no index node will have one leaf node as we decompose only when there is no room for the newly inserted data item.
  - **Tree Shrink**: The internal nodes are merged together to eliminate all single child internal nodes. This strategy is adapted from structures like the Patricia trie, which aim to reduce the height of the tree as much as possible.

For example, in the case of PathShrink = "NeverShrink", when storing the word "implementation" in the trie, the word will be stored in a leaf after a 14-node path, one level per input character. On the other hand, in the case of PathShrink = "LeafShrink", the input...