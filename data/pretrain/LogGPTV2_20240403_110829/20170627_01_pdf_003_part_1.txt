JournalofIntelligentInformationSystems,17:2/3,215–240,2001
(cid:2)c 2001KluwerAcademicPublishers.ManufacturedinTheNetherlands.
SP-GiST: An Extensible Database Index
for Supporting Space Partitioning Trees
WALIDG.AREF PI:EMAIL
IHABF.ILYAS PI:EMAIL
DepartmentofComputerSciences,PurdueUniversity,WestLafayette,IN47907-1398,USA
Abstract. EmergingdatabaseapplicationsrequiretheuseofnewindexingstructuresbeyondB-treesandR-
trees.Examplesarethek-Dtree,thetrie,thequadtree,andtheirvariants.Theyareoftenproposedassupporting
structuresindatamining,GIS,andCAD/CAMapplications. Acommonfeatureofalltheseindexesisthatthey
recursivelydividethespaceintopartitions. Anewextensibleindexstructure,termedSP-GiSTispresentedthat
supportsthisclassofdatastructures,mainlytheclassofspacepartitioningunbalancedtrees. Simplemethod
implementationsareprovidedthatdemonstratehowSP-GiSTcanbehaveasak-Dtree,atrie,aquadtree,orany
oftheirvariants.IssuesrelatedtoclusteringtreenodesintopagesaswellasconcurrencycontrolforSP-GiSTare
addressed. Adynamicminimum-heightclusteringtechniqueisappliedtominimizediskaccessesandtomake
usingsuchtreesindatabasesystemspossibleandefficient.AprototypeimplementationofSP-GiSTispresented
aswellasperformancestudiesofthevariousSP-GiST’stuningparameters.
Keywords: space-partitioningtrees,spatialdatabases,extensibleindex,generalizedsearchtrees,clustering
1. Introduction
Emerging database applications require the use of new indexing structures beyond B+
-trees. Thenewapplicationsmayneeddifferentindexstructurestosuitthebigvarietyof
databeingsupported,e.g.,video,image,andmultidimensionaldata. Typicalapplications
are cartography, CAD, GIS, telemedicine, and multimedia applications. For example,
the quadtree (Finkel and Bentley, 1974; Klinger, 1971) is used in the Sloan Digital Sky
Survey tobuild indexesfor differentviews ofthe sky(a multi-terabytedatabase archive)
(Szalayetal.,2000),thelinearquadtree(Gargantini,1982)isusedintherecentlyreleased
Oraclespatialproduct(Oracle, 1999), thetriedatastructureisusedin(Arefetal., 1995)
toindexhandwrittendatabases,andthepyramidmulti-resolutiondatastructure(Tanimoto
andPavlidis,1975)isusedintheMicrosoftTerraServer(Barclayetal.,2000)whichisan
onlineatlas,currentlybeingdevelopedthatcombinesaroundeightterabytesofimagedata.
Thereaderisreferredto(Berchtoldetal.,1998;Oracle,1999;EsperancaandSamet,1996;
FaloutsosandGaede,1996;Faloutsosetal.,1997;GaedeandGunther,1998;Gu¨ting,1994;
OrensteinandManola,1988;Samet,1990a;SeegerandKriegel,1990;Sellisetal.,1997)
for additional database applications that use a variety of spatial and non-traditional tree
structures.
ThesupportoftheNationalScienceFoundationunderGrantIIS-0093116isgratefullyacknowledged.
216 AREFANDILYAS
Havingasingleframeworktocoverawiderangeofthesetreestructures,althoughisvery
attractive from the point of view of database system implementation, is hindered by two
mainproblems. Thefirstproblemisthestorage/structurecharacteristicsofspatialtrees.
MostoftheunbalancedspatialtreestructuresarenotoptimizedforI/O,whichisacrucial
issuefordatabasesystems. Quadtrees,tries,andk-Dtreescanbesoskinnyandlong. Unless
theproblemofappropriatelyclusteringthetreenodesintopagesisaddressedproperly,this
wouldleadtomanyI/Oaccessesbeforegettingtherequiredqueryanswer. Comparethisto
theB+-tree,thatinmostcaseshasaheightof2–3levels,andtotheR-tree(Guttman,1984)
anditsvariants,theR*-tree(Beckmannnetal.,1990)andtheR+-tree(Sellisetal.,1987)
that play an important role as spatial database indexes, e.g., see Brinkhoff et al. (1996),
DeWittetal. (1994),andPapadiasetal. (1998). Thesecondproblemistheimplementation
effortofbuildingindexes. Hardwiringtheimplementationofafullfledgedindexstructure
with the appropriate concurrency and recovery mechanisms into the database engine is a
non-trivialprocess. Repeatingthisprocessforeachspatialtreethatcanbemoreappealing
foracertainapplicationrequiresmajorchangesintheDBMScorecode. Afterall,onemay
stillneedanewstructurethatwillcause,rewriting/augmentingsignificantportionsofthe
DBMSenginetoaddthenewtreeindex. TheGeneralizedSearchTree(GiST)(Hellerstein
et al., 1995), was introduced in order to provide single implementation for B-tree-like
indexes, e.g., the B+-tree (Knuth, 1973), the R-tree (Guttman, 1984), and the RD-tree
(HellersteinandPfeffer,1994). Althoughpracticallyuseful,theclassofunbalancedspatial
indexes,e.g.,thequadtree,thetrie,andthek-Dtree,isnotsupportedbyGiSTbecauseof
thestructurecharacteristicsmentioned.
Oneimportantcommonfeatureofthequadtree,thetrie,andthek-Dtreefamilyofindexes
isthatateachlevelofthetree,theunderlyingspacegetspartitionedintodisjointpartitions.
Forexample,inthecaseofatwo-dimensionalquadtree,ateachlevelofdecomposition,the
spacecoveredbyanodeisdecomposedintofourdisjointblocks. Similarly,inthecaseof
thetrie(assumingthatwestoreadictionaryofwords),thespacecoveredbyanodeinthe
triegetsdecomposedinto26disjointregions(eachregioncorrespondstooneletterofthe
alphabet). Thek-Dtreeexhibitssimilarbehavior. Weusethetermspace-partitioningtrees
to represent the class of hierarchical data structures that decomposes a certain space into
disjointpartitions. Thenumberofpartitionsandthewaythespaceisdecomposeddiffer
fromonetreetotheother.
In this paper we study the common features among the members of the spatial space
partitioning trees aiming at developing a framework that is capable of representing the
differenttreestructuresandovercomingthedifficultiesthatpreventsuchusefultreesfrom
being used in database engines. The DBMS will then be able to provide a large number
of index structures with simple method plug-ins. As demonstrated in the paper, for the
frameworkofspacepartitioningtrees, wefurnishintheDBMS(onlyonce)thecommon
functionalitiessuchastheinsertion,deletion,andupdatingalgorithms,concurrencycontrol
andrecoverytechniquesandI/Oaccessoptimization. Forexample, inamultimediaora
data mining application, we may then freely choose the best way to index each feature
dependingontheapplicationsemantics. Bywritingtherightextensionstotheextensible
singleimplementation,aquadtree,atrie,ak-Dtree,orotherspatialstructurescanbemade
availablewithoutmessingwiththeDBMSinternalcode.
SP-GiST 217
The rest of the paper is organized as follows. Section 2 presents the class of space-
partitioning trees. In Section 3, the SP-GiST framework is presented. Section 3 also
includesadescriptionofSP-GiSTexternaluserinterface,andillustratestherealizationof
various tree structures using it. This includes a realization of the k-D tree, the trie, the
Patriciatrie,andseveralvariantsofthequadtree. Section4givestheimplementationofthe
internalmethodsofSP-GiST.ConcurrencycontrolandrecoveryforSP-GiSTarediscussed
inSection5. NodeclusteringinSP-GiSTispresentedinSection6. Thepseudocodeofthe
clusteringalgorithmisgiveninAppendixA.Implementationandexperimentalresultsfor
thevarioustuningparametersofSP-GiSTaregiveninSection7. Section8containssome
concludingremarks.
2. Theclassofspacepartitioningtrees
Thetermspace-partitioningtreereferstotheclassofhierarchicaldatastructuresthatre-
cursivelydecomposesacertainspaceintodisjointpartitions. Itisimportanttopointoutthe
differencebetweendata-drivenandspace-drivendecompositionsofspace. Iftheprinciple
ofdecomposingthespaceisdependentontheinputdata,itiscalleddata-drivendecompo-
sition,whileifitisdependentsolelyonthespace,itiscalledspace-drivendecomposition.
Examples of the first category are the k-D tree (Bentley, 1975) and the point quadtree
(Klinger,1971). Examplesofthesecondcategoryarethetrieindex(delaBriandais,1959;
Fredkin,1960),thefixedgrid(Nievergeltetal.,1984),theuniversalB-tree(Bayer,1997),
theregionquadtree(FinkelandBentley,1974),andotherquadtreevariants(e.g.,theMX-
CIFquadtree(Kedem,1982),thebintree,thePMquadtree(SametandWebber,1985),the
PRquadtree(Orenstein,1982)andthePMRquadtree(NelsonandSamet,1986)).
There are common underlying features among these spatial data structures. The term
quadtrie was introduced in (Samet, 1990a) to reflect the structure similarity between the
trie and the quadtree. Similarly, the k-D tree and the MX quadtree have many structural
similarities, e.g., both structures recursively partition the space into a number of disjoint
partitions. Ontheotherhand,thetwotreesdifferinthenumberofpartitionstodividethe
spaceandalsointhedecompositionprinciple. Thedecompositionisdata-driveninthecase
ofthek-Dtree,whileitisspace-driveninthecaseoftheMXquadtree.
The structural and behavioral similarities among many spatial trees create the class of
space-partitioningtrees. Incontrast,thedifferencesamongthesetreesenabletheiruseina
varietyofemergingapplications. Thenatureofspatialdatathattheapplicationisdealing
with,aswellasthetypesofqueriesthatneedtobesupported,aidindecidingwhichspace-
partitioningtreetouse.
Space-partitioningtreescanbedifferentiatedonthefollowingbasis:
• Structuraldifferences
– SD : Thetypeofdatatheyrepresent.
1
– SD : Thedecompositionfan-out(thenumberofpartitions).
2
– SD : Theresolutionoftheunderlyingspace.
3
– SD : Allowingsingle-arcnodes.
4
– SD : Theuseofbuckets.
5
218 AREFANDILYAS
Figure1. AnexamplePRquadtree.
• Behavioraldifferences
– BD : Thedecompositionprinciple(dataorspacedrivenpartitioning).
1
ThestructuraldifferencesordesignoptionscanbeviewedasShapeParametersforthe
realizedtree. Forexample,intherealizationofthePRquadtree,ormorepreciselythePR-
quadtrie,therepresenteddatais“point”(SD ). Thedecompositiondependsonthespacenot
1
onthedatainserted(comparetothek-Dtree)(BD ). Eachtimeapartitioningofthespace
1
quadrantintofourequalquadrants(SD andSD )takesplacetodividethequadrantthathas
2 4
twopointssothateachpointisattachedwithonequadrant. Thedecompositionresolution
is“variable”inthesensethatthepartitioningstopswheneveronedatapointresidesinthe
quadrant(SD ). Figure1showsanexampleofthePRquadtree. Attheleaflevel, nodes
3
canbe“white”(i.e.,containsnodata)or“black”(i.e.,containsonedatapoint(SD )).
5
Using the same analogy, we can analyze the structure and behavior of the trie. The
datarepresentedinatrieisoftype“word”(SD ). Thedecompositionofthetrieisspace-
1
dependent(BD ),aswealwaysdecomposethespaceinto26partitions(SD );onepartition
1 2
foreachletterofthealphabet. Inonevariantofthetrie,theresolutionis“notvariable”(SD )
3
asweneedtodecomposethespaceuntilweconsumeallthelettersoftheinsertedword(refer
tofigure2(a)forillustration). Thisisincontrasttostoppingthedecompositiononlywhen
aspacepartitionuniquelyidentifiestheinsertedword(seefigure2(b)). Thesameanalysis
canbeappliedtorealizeotherquadtreeandtrievariants,thek-Dtree,andthebin-tree.
Inthefollowingsections,wewillintroduceageneralframework,termedSP-GiST,which
wecanusetoimplementabigcollectionofspace-partitioningtrees. SP-GiSThasonecore
implementationaswellasuserplug-insthatreflecttherequiredstructuralandbehavioral
characteristics. Theexistenceofsuchaframeworkwillfacilitatetheadaptionofthisclass
ofspace-partitioningtreesintodatabaseengines.
3. SP-GiSTframeworkinterface
SP-GiSTisageneralindexframeworkthatcoversawiderangeoftreeindexesrepresenting
thelargeclassofspace-partitioningsearchtreesrepresentedinSection2.
SP-GiST 219
Figure2. Twovariantsofthetriedatastructure:(a)Resolutionisnotvariable(b)resolutionisvariable.
Thestructuralcharacteristicsofspace-partitioningtreesthatdistinguishthemfromother
treeclassesare: (1)Space-partitioningtreesdecomposethespacerecursively, eachtime,
a fixed number of disjoint partitions is produced. (2) Space-partitioning trees are unbal-
ancedtrees(3)Space-partitioningtreessufferfromlimitedfan-out,e.g.,thequadtreehas
only a fan-out of four. So, space-partitioning trees can be skinny and long. (4) Two
different types of nodes exist in a space-partitioning tree, namely, index nodes (inter-
nal nodes) and data nodes (leaf nodes). The framework reflects these facts by having
two main parts; the internal tree methods that reflect the similarities among all mem-
bers of the class of space-partitioning trees, and the external interface that enables us
to identify the features specific to a particular tree reflecting the differences listed in
Section2.
By specifying user access methods as in GiST (Hellerstein et al., 1995), SP-GiST
has interface parameters and methods that allow it to represent the class of space-
partitioning tree indexes and reflect the structural and behavioral differences among
them.
3.1. Interfaceparameters
The user can realize a particular space-partitioning tree using the following interface
parameters:
220 AREFANDILYAS
• NodePredicate: Thisparametergivesthepredicatetobeusedintheindexnodesofthe
tree(addressesthestructuraldifference SD ). Forexample,aquadrantinaquadtreeor
1
aletterinatriearepredicatesthatareassociatedwithanindexnode.
• Key Type: This parameter gives the type of the data in the leaf level of the tree. For
example, “Point”isthekeytypeinanMXquadtreewhile“Word”isthekeytypeina
trie. ThedatatypePointandthedatatypeWordhavetobepre-definedbytheuser.
• NumberOfSpacePartitions: Thisparametergivesthenumberofdisjointpartitionspro-
duced at each decomposition (SD ). It also represents the number of items in index
2
nodes. Forexample, quadtreeswillhavefourspacepartitions, atrieoftheEnglishal-
phabetwillhave26spacepartitions,thek-Dtreewillhaveonlytwospacepartitionsat
eachdecomposition.
• Resolution: Thisparametergivesthemaximumnumberofspacedecompositionsandis
setdependingonthespaceandthegranularityrequired.
• PathShrink: Forspace-partitioningtrees,recursivedecompositioncanleadtolongsparse
structures. ParameterPathShrinkisusefulinlimitingthenumberoftimesthespaceis
recursively decomposed in response to data insertion. PathShrink can be one of three
differentpolicies(refertofigure3foranillustrationoftheuseofPathShrinkinthecontext
ofthetrie):
– NeverShrink: Dataisinsertedinthenodethatcorrespondstothemaximumresolution
ofthespace. Thismayresultinmultiplerecursivedecompositionsofthespace.
Figure3. TheeffectoftheparameterPathShrinkonthetrie: (a)NeverShrink,(b)LeafShrink,and(c)Tree
Shrink.
SP-GiST 221
– LeafShrink: Dataisinsertedatthefirstavailableleafnode. Decompositionwillnot
dependonthemaximumpossibleresolution. Inthisstrategy,noindexnodewillhave
oneleafnodeaswedecomposeonlywhenthereisnoroomforthenewlyinserteddata
item.
– Tree Shrink: The internal nodes are merged together to eliminate all single child
internalnodes. ThisstrategyisadaptedfromstructureslikethePatriciatriethataim
atreducingtheheightofthetreeasmuchaspossible.
Forexample,inthecaseofPathShrink=“NeverShrink”,whenstoringtheword“imple-
mentation”inthetrie,thewordwillbestoredinaleafaftera14-nodespath,onelevelper
inputcharacter. Ontheotherhand,inthecaseofPathShrink=“LeafShrink”,theinput