title:Broken Metre: Attacking Resource Metering in EVM
author:Daniel P&apos;erez and
Benjamin Livshits
Broken Metre:
Attacking Resource Metering in EVM
Daniel Perez
Imperial College London
Benjamin Livshits
Imperial College London,
UCL Centre for Blockchain Technologies, and Brave Software
Abstract—Blockchain systems, such as Ethereum, use an
approach called “metering” to assign a cost to smart contract
execution, an approach which is designed to incentivise miners
to operate the network and protect it against DoS attacks. In
the past, the imperfections of Ethereum metering allowed several
DoS attacks which were countered through modiﬁcation of the
metering mechanism.
This paper presents a new DoS attack on Ethereum which
systematically exploits its metering mechanism. We ﬁrst replay
and analyse several months of transactions, during which we
discover a number of discrepancies in the metering model, such
as signiﬁcant inconsistencies in the pricing of the instructions. We
further demonstrate that there is very little correlation between
the execution cost and the utilised resources, such as CPU and
memory. Based on these observations, we present a new type of
DoS attack we call Resource Exhaustion Attack, which uses these
imperfections to generate low-throughput contracts. To do this,
we design a genetic algorithm that generates contracts with a
throughput on average 100 times slower than typical contracts.
We then show that all major Ethereum client implementations
are vulnerable and, if running on commodity hardware, would be
unable to stay in sync with the network when under attack. We
argue that such an attack could be ﬁnancially attractive not only
for Ethereum competitors and speculators, but also for Ethereum
miners. Finally, we discuss short-term and potential long-term
ﬁxes against such attacks. Our attack has been responsibly
disclosed to the Ethereum Foundation and awarded a bug bounty
reward of 5,000 USD.
I.
INTRODUCTION
Some blockchain systems support code execution, allowing
arbitrary programs to take advantage of decentralised trust.
Ethereum and its virtual machine, the Ethereum Virtual Ma-
chine (EVM), is probably the most widely used blockchain
adopting this approach. However, allowing arbitrary programs
from non-trusted users introduces many new challenges. One
of these challenges is to prevent users from running code
which could negatively impact the performance of the system.
To tackle this challenge, Ethereum introduced the notion of
“gas”, which is a unit used to measure the execution cost
of a program, referred to as a “smart contract” in this con-
text. Gas-based metering is used to price the execution of
smart contracts, and must ensure that the throughput of the
blockchain, in terms of gas per second, remains stable. Meter-
ing is therefore critical to keep the Ethereum blockchain safe
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24267
www.ndss-symposium.org
against Denial of Service (DoS) attacks involving slow running
contracts. However, assigning costs to different instructions
is a highly non-trivial task, and the costs originally assigned
in the Ethereum yellow paper [57], which were designed to
maintain a throughput of 1 gas/µs, had many inconsistencies.
As a consequence, several DoS attacks have been conducted on
Ethereum [13], [12], and the gas cost has also been reviewed
several times [11], [40] to increase the cost of the under-priced
instructions.
To the best of our knowledge, there has still not been any
attempt to try to ﬁnd and exploit such inconsistencies in a
systematic way. In this paper, we design a new DoS attack
which exploits inconsistencies of the gas metering mechanism
by taking a systematic approach to ﬁnding these. We ﬁrst
replay and analyse several months of transactions to discover
discrepancies in the gas cost. We then use the data and insight
from our analysis to design a genetic algorithm capable of
generating low-throughput contracts. We evaluate the contracts
generated by our algorithm on all major Ethereum clients and
ﬁnd that they are all vulnerable to our attack.
Contributions. This paper makes the following contributions:
Exploration of metering in EVM: We explore
the history of executing 2.5 months worth of smart
contracts on the Ethereum blockchain and identify
several important edge cases that highlight inherent
ﬂaws in EVM metering; speciﬁcally, we identify i)
EVM instructions for which the gas fee is too low
compared to their resources consumption; and ii)
cases of programs where the cache inﬂuences exe-
cution time by an order of magnitude.
Resource Exhaustion Attacks (REA) contract gen-
eration strategy: We present a code generation strat-
egy able to produce REA attacks of arbitrary length.
Some of the complexity comes from the need to
produce well formed EVM programs which min-
imise the throughput. We propose an approach which
combines empirical data and a genetic algorithm in
order to generate contracts with low throughput. We
explore the efﬁcacy of our strategy as a function of
the throughput in terms of gas per second of the
generated programs.
Experimental evaluation: We show that our REA
can abuse imperfections in EVM’s metering ap-
proach. Our genetic algorithm is able to generate
programs with a throughput of 1.25M gas per second
after a single generation. A minimum in our experi-
ments is attained at generation 243 with a block using
around 9.9M gas and taking about 93 seconds. We
2)
1)
3)
show that our method generates contracts on average
more than 100 times slower than typical contracts.
Finally, we evaluate our low-throughput contracts on
the major Ethereum clients and show that they are all
vulnerable. Using commodity hardware, nodes would
be unable to stay in sync when under attack.
Disclosure and ﬁxes: We responsibly disclosed our
attack to the Ethereum foundation, and were awarded
a bug bounty reward of 5,000 USD. We discussed
with the developers about the ongoing efforts as well
as some potential ﬁxes, and present some of the short-
term and long-term ﬁxes in this paper.
4)
Paper Organisation. The rest of the paper is organised as fol-
lows. In Section II, we provide background information about
Ethereum and its metering scheme, as well as a few instances
of how it has been exploited in the past. In Section III, we
present case studies based on measurements that we obtained
by re-executing the Ethereum main chain. In Section IV, we
present our Resource Exhaustion Attacks (REA) and the results
we obtained. In Section V we present short and long-term
solutions to gas mispricing issues. Finally, we present related
work in Section VI and conclude in Section VII.
II. BACKGROUND
In this section, we brieﬂy describe the Ethereum network
and the EVM. Then, we provide an in-depth explanation of
how the gas mechanism works and provide additional insights
into smart contract execution costs on the Ethereum main
network. Finally, we highlight some of the attacks which have
been performed by abusing the gas mechanism.
A. Ethereum and the Ethereum Virtual Machine (EVM)
The Ethereum [14] platform allows its users to run “smart
contracts” on its distributed infrastructure. Ethereum smart
contracts are programs which deﬁne a set of rules for the
governing of associated funds, typically written in a Turing-
complete programming language called Solidity [20]. The
Solidity code is compiled into EVM bytecode, a low level
bytecode designed to be executed by the EVM.
Once the EVM bytecode is generated, it is deployed on
the Ethereum blockchain by sending a transaction which only
purpose is to create a smart contract with the given code. To
execute a smart contract, a user can then send a transaction
to this contract. The sender will pay a transaction fee which
is derived from the contract’s computational cost, measured
in units of gas [57]. The fee itself is paid in Ether (ETH1),
the underlying currency of the Ethereum blockchain. When a
miner successfully mines a blocks, he receives the transaction
fee of all the transactions included in the block. We will
describe exactly how this transaction fee is computed in the
following part of this section.
B. Metering in EVM
As brieﬂy outlined in Section I, gas is a fundamental
component of Ethereum, and generally applicable to permis-
sioned and permissionless blockchain platforms that utilise a
1When converting ETH to USD, we use the exchange rate on 2020-01-07:
1 ETH = 145 USD. For consistency, any monetary amounts denominated in
USD are based on this rate.
PUSH1 0x02 ; very low tier (3 gas)
PUSH1 0x03 ; very low tier (3 gas)
MUL
(5 gas)
PUSH1 0x05 ; very low tier (3 gas)
SSTORE
; special tier
; low tier
(20k gas)
Fig. 1: Example gas cost of an EVM program
distributed virtual machine for contract code execution [54],
[7]. Gas is the main protection against Denial of Service
(DoS) attacks based on non-terminating or resource-intensive
programs. It is also used to incentivise miners to process
transactions by rewarding them with a fee computed based
on the resource usage of the transaction.
Gas cost. In the EVM, each transaction has a cost which is
computed in and expressed as gas. The cost is split into two
parts, a ﬁxed base cost of 21, 000 gas, and a variable execution
cost of the smart contract. Each instruction has a ﬁxed gas cost
which has been set by the designers of the EVM [57], who
classify the instructions in multiple tiers of gas cost: zero Tier
(0 gas), base tier (2 gas), very low tier (3 gas), low tier (5 gas),
high tier (10 gas) and special tier where the cost needs more
complex rules. The gas cost for a transaction in the EVM
is the sum over the cost of each instruction in the contract.
For example, given the program in Figure 1, the gas cost will
be computed as follow. PUSH1 is in the Very Low Tier and
therefore costs 3 gas. It is called 3 times in total and will
therefore consume 9 gas. The arguments of PUSH1 do not
consume any extra gas. The MUL instruction is in the Low Tier
and hence costs 5 gas. Finally, the SSTORE will store the result
of 2× 3 at location 5 in the storage. SSTORE is in the Special
Tier and has slightly more complex pricing rules. Assuming
the location in the storage was previously 0, the instruction
allocates storage and will cost 20,000 gas. Therefore, this
program will cost a total of 20,014 gas to execute. Given the
current pricing for storage, the cost of the program is clearly
dominated by the storage operation.
It is important to note that, as the transaction has a base cost
of 21,000 gas, it will cost a total of 21,000 + 20,014 = 41,014
gas to execute the above transaction.
Ethereum Improvement Proposal (EIP) 150. Although the
cost of each instruction was decided when ﬁrst designing
the EVM, the authors found that some costs were poorly
aligned with actual resource consumption. Particularly, IO-
heavy instructions tended to be too cheap, allowing for DOS
attacks on the Ethereum [12] blockchain. As a ﬁx, EIP 150 [11]
was proposed and implemented, signiﬁcantly increasing the
gas consumption of instructions which require to perform IO
operations, such as SLOAD or EXTCODESIZE. This change
revised the cost of under-priced instructions and prevented fur-
ther DoS attacks such as the one seen in September 2016 [13].
This brieﬂy highlights the potential risks rooted in mismatches
between instructions and gas costs. While the above cases have
been ﬁxed, it is unclear whether all potential issues have been
eradicated or not.
Gas price. Up to here, we have explained how the gas cost for
executing a contract are computed. However, the gas cost is not
2
Transaction type
Basic (21k gas)
Gas intensive (500k gas)
Gas price
Low
(1Gwei)
$0.00304
$0.0725
High
(80Gwei)
$0.2436
$5.8
Fig. 2: Fees for different type of transactions. “Low” price is one of the lowest
possible price to have a transaction included while “High” is a price someone
very eager to have his transaction included would pay.
Number of blocks:
Median gas price:
Median gas used (by contracts):
Median transaction fee:
613,475
9.1 Gwei
53,787
0.0008 ETH (0.116 USD)
Fig. 3: Median gas price, gas used and transaction fee from block 8,652,096
(Sep-09-2019) to block 9,286,594 (Jan-15-2020).
the only element needed to compute the total execution cost of
a contract. When a transaction is sent, the sender can choose
a gas price, namely the amount of wei (1wei = 10−18 ETH)
that the sender is ready to pay per unit of gas. For conciseness,
these amounts are often expressed in Gwei, where 1Gwei =
109wei. Miners will usually prioritise transactions with high
gas prices, as this will increase the ﬁnal fee they receive for
processing a transaction.
Transaction fee. The transaction fee is the total amount of wei
that the sender of the transaction has to pay for the transaction.
It is obtained by multiplying the gas price by the gas cost. The
transaction fee is non-refundable: even if the transaction fails,
it will be paid.
C. Gas Statistics
Now that we presented the key points about metering in the
EVM, we provide concrete numbers about different aspects of
the gas price and transaction fees. In particular, we show the
amount of transaction fees that a user would have to pay to
have his transaction processed by the main Ethereum network.
To give a sense of the transaction fees, we show a variety
of typical fees in Figure 2. The fees are divided depending
on their gas price and gas consumption. The Low gas price is
close to the lowest price that can be paid to get the transaction
accepted on the Ethereum blockchain. The High gas price
refers to the price that people would pay when they are
extremely eager to get their transaction included, for example
when competing with other users to have a transaction included
ﬁrst [44]. The basic transaction type refers to transactions
consuming only the base amount of gas, without executing any
instruction. This is typically the cost to send Ether to a contract
or another party. The gas intensive transaction type represents
computationally expensive transactions, for example, verifying
a zero-knowledge proof [49]. At
the
maximum amount of gas which can be used in a single block
is 10,000,000, which means only 20 such transactions could
be included in a single block.
the time of writing,
In Figure 3, we show the values of the gas price, gas used
and transaction fee. In order to obtain results reﬂecting the
3
current situation, we limit the analysis to recent blocks. We
use all the transactions sent to contracts between September
30, 2019 and January 15, 2020. We ﬁnd that the median gas
price paid by a transaction’s sender is around 9.1 Gwei, which
is around 9 times more than the minimum possible fee. It
is worth noting that when paying the minimum possible fee,
the probability for the transaction to get included in the next
block is relatively low and the transaction can therefore be
delayed for several blocks: at the time of writing, about 40%
of the last 200 blocks accepted a gas price of 1Gwei [19].
This explains that users usually pay a higher fee to get their
transaction included faster. The median for the gas consumed
by contracts is around 50,000 gas, indicating that most transac-
tions perform relatively simple computations. Indeed, the basic
fee being 21,000, a simple read followed by an allocation of
storage would already result in 46,000 gas. Overall, the median
fee paid per transactions is 0.0008 ETH which is around 0.116
USD.
D. Previously Known Attacks
The Ethereum network has been victim of several Denial
of Service (DoS) attacks due to instructions being under-
priced. We present two considerable DoS attacks which were
performed on the Ethereum network.
EXTCODESIZE attack. In September 2016, a DoS attack
was performed on the Ethereum network by ﬂooding it with
transactions containing a very large number of EXTCODESIZE
instructions [13]. EXTCODESIZE is an instruction to retrieve
the size in bytes of a given contract’s code.
This attack happened because the EXTCODESIZE instruc-
tion was vastly under-priced. At the time of the attack, a
single execution of this instruction cost 20 gas, meaning
that one could perform around 1,500 instructions with less
than $0.01. Although by itself, this issue might seem benign,
EXTCODESIZE forces the client to search the contract on
disk, resulting in IO heavy transactions. While replaying the
Ethereum history on our hardware, the malicious transactions
took around 20 to 80 seconds to execute, compared to a few
milliseconds for the average transactions. We show the corre-
lation between the clock time and the gas used by transactions
during the period of the attack in Figure 4. Although this attack
did not create any issue at the consensus layer, it reduced the
rate of block creation by a factor of more than 2 times, with
block creation time peaking to more than 30s [25].
The Ethereum protocol was updated in EIP 150, with all
the software running Ethereum, to increase the price of the
EXTCODESIZE from 20 to 700 gas, making the aforemen-
tioned attack considerably more expensive to perform. Some
performance improvements were also made at the implementa-