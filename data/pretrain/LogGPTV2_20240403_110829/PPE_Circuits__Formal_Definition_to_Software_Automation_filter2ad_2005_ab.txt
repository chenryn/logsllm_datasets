### 2. Related Work

Several works in computer-aided cryptographic design have been developed, including:

- **AutoBatch** [8, 9]: This tool is designed for batching the verification of pairing product equations (PPEs).
- **AutoStrong** [7]: This tool compiles a signature scheme that is secure under standard definitions into one that is strongly secure.
- **AutoGroup+** [6, 7]: This tool translates a Type-I pairing scheme into a Type-III pairing scheme. An alternative method, **IPConv** [2, 4], is also available, though it is not open source at this time.
- **Ambrona et al. [13]**: This work demonstrates how to apply computer-aided reasoning to the design of attribute-based encryption systems.

In the private key setting, there are notable automation results for block ciphers [48] and authenticated encryption [44].

### 2.1 Automated Proof Generation and Verification Tools

There are several tools available for automating proof generation or verification, such as:

- **Cryptoverif** [25]
- **CertiCrypt** [21]
- **EasyCrypt** [17]
- **AutoG&P** [22]

In 2019, researchers demonstrated the use of EasyCrypt to machine-check a security proof for the domain management protocol of Amazon Web Servicesâ€™ KMS (Key Management Service) [10] and to verify cryptographic standards such as SHA-3 [12]. These tools have also been used to verify proofs for key exchange protocols [16, 33], MPC protocols [43], commitment schemes [49], software stacks [11], and protocols in the UC framework [33].

Barthe et al. [22] provided a tool that translates the proofs output by AutoG&P into a format verifiable by EasyCrypt. Similarly, Akinyele et al. [5] showed that the proofs output by AutoBatch can be automatically verified by EasyCrypt. The **AutoLWE** tool [20] semi-automatically proves the security of cryptographic constructions based on Learning with Errors (LWE).

### 2.2 Preliminaries

We define the algebraic setting and notation used throughout this work. Let \([1, n]\) denote the set \(\{1, \ldots, n\}\). We use \(v\) to denote a vector and \(v_i\) to denote the \(i\)-th element. For a vector \(v\) of length \(n\) and a subset \(U \subseteq [1, n]\), we denote \(v_U\) as the set of elements \(v_i\) for \(i = 1, \ldots, n\) where \(i \in U\). Similarly, \(v_{\bar{U}}\) denotes the subset of elements \(v_i\) for \(i = 1, \ldots, n\) where \(i \notin U\). Let \(I\) denote the set of pairing group identifiers \(\{1, 2, T\}\). If \(x\) and \(y\) are polynomials over variables in \((u_1, \ldots, u_n)\), then \(x \equiv y\) means that \(x\) and \(y\) are equivalent polynomials.

#### 2.2.1 Pairings

Let \(G_1\), \(G_2\), and \(G_T\) be groups of prime order \(p\). A map \(e: G_1 \times G_2 \to G_T\) is an admissible pairing (also called a bilinear map) if it satisfies the following properties:

1. **Bilinearity**: For all \(g_1 \in G_1\), \(g_2 \in G_2\), and \(a, b \in \mathbb{Z}_p\), it holds that \(e(g_1^a, g_2^b) = e(g_1, g_2)^{ab}\).
2. **Non-degeneracy**: If \(g_1\) and \(g_2\) are generators of \(G_1\) and \(G_2\), respectively, then \(e(g_1, g_2)\) is a generator of \(G_T\).
3. **Efficiency**: There exists an efficient method to compute \(e(g_1, g_2)\) for any \(g_1 \in G_1\) and \(g_2 \in G_2\).

A pairing generator \(PGen\) is an algorithm that, on input a security parameter \(1^\lambda\), outputs the parameters for a pairing group \((p, g_1, g_2, g_T, G_1, G_2, G_T, e)\) such that \(G_1\), \(G_2\), and \(G_T\) are groups of prime order \(p \in \Theta(2^\lambda)\), where \(g_1\) generates \(G_1\), \(g_2\) generates \(G_2\), and \(e: G_1 \times G_2 \to G_T\) is an admissible pairing.

The above pairing is called an asymmetric or Type-III pairing. In Type-II pairings, there exists an efficient isomorphism \(\psi\) from \(G_1\) to \(G_2\) or an isomorphism \(\phi\) from \(G_2\) to \(G_1\), but not both. In symmetric or Type-I pairings, efficient isomorphisms \(\psi\) and \(\phi\) both exist, and thus we can consider \(G_1 = G_2\). In this work, we support any of these types of pairings. We will typically refer to Type-III pairings in our text, as they are general and typically the most efficient choice for implementation, but our software tool in Section 5 can handle any type. We represent the identity elements of the groups \(G_1\), \(G_2\), and \(G_T\) by \(I_1\), \(I_2\), and \(I_T\), respectively.

Given pairing parameters \((p, g_1, g_2, g_T, G_1, G_2, G_T, e)\), we extend prior definitions [42, 45] to define a pairing product equation (PPE) over variables \(Z, \{X_i\}_{i=1}^m, \{Y_j\}_{j=1}^n\) as an equation of the form:
\[ Z \cdot \prod_{i=1}^m e(X_i, Y_i)^{\gamma_i} = 1, \]
where \(A, X_i \in G_1\), \(B, Y_i \in G_2\), \(Z \in G_T\), and \(\gamma_i \in \mathbb{Z}_p\).

The second two PPE formats do not enable any additional functionality over the traditional definition, but they will later be useful for obtaining more efficient identity tests. We sometimes rearrange the terms of a PPE to improve readability. As we will use it later, we observe that under the above definition, a PPE can be employed as an identity test in groups \(G_1\), \(G_2\), or \(G_T\), either for a single element or according to any of the above combinations of products and exponents.

### 3. Defining PPE Circuits

We introduce and formally define PPE circuits. We begin with the notion of a PPE problem instance [45].

#### 3.1 PPE Problem Instance

Definition 3.1 (PPE Problem Instance [45]). A pairing product equation (PPE) problem instance \(\Pi\) consists of:

- **Pairing parameters** \(G = (p, g_1, g_2, g_T, G_1, G_2, G_T, e)\),
- **Positive integers** \(n, m\),
- **Multivariate polynomials** \(f = (f_1, \ldots, f_m)\) over \(n\) variables in \(\mathbb{Z}_p\) denoted \(u = (u_1, \ldots, u_n)\),
- **A sequence of pairing group identifiers** \(\alpha = (\alpha_1, \ldots, \alpha_m)\) in \(I = \{1, 2, T\}\),
- **A set** \(Trusted \subseteq [1, m]\).

The pairing parameters above can optionally indicate the type of pairing group (e.g., Type I, II, or III); unless otherwise specified, we assume Type-III pairings. Throughout the paper, we use the notation \(InTrusted(\Pi)\) to denote the set of variables that appear in the Trusted set of polynomials of \(\Pi\), i.e., \(InTrusted(\Pi) = \bigcup_{i \in Trusted} \{ \text{variables used in } f_i \} \subseteq u\). We simplify the notation and use \(InTrusted\) whenever the problem instance \(\Pi\) is implicit.

Following [45], we map cryptographic schemes into PPE problem instances by rewriting the scheme using a single group generator, when possible. For example, let \(g_1, g_2, g_T\) be group generators of groups \(G_1, G_2, G_T\) respectively. Let a group element in the scheme be \(h x \cdot g_1^{x_2} \cdot g_2^{x_3}\), by representing \(h = g_2^z\) for a fresh variable \(z\). Consequently, each group element in the scheme could be represented by their group indicator (G1/G2/GT) along with the polynomial present in the exponent.

#### 3.2 PPE Challenge

Definition 3.2 (PPE Challenge [45]). Let \(\Pi = (G, n, m, f, u, \alpha, Trusted)\) be a PPE problem instance as in Definition 3.1. Let \(F = (F_1, \ldots, F_m)\) be comprised of pairing group elements, where each \(F_i\) is in group \(G_{\alpha_i}\). \(F\) is called a challenge to PPE instance \(\Pi\). Challenges are classified as:

- **YES challenge**: \(F = (F_1, \ldots, F_m)\) is a YES challenge if there exists an assignment to variables \(u = (u_1, \ldots, u_n) \in \mathbb{Z}_p^n\) such that for all \(i\), \(F_i = g_{\alpha_i}^{f_i(u)}\).
- **NO challenge**: \(F = (F_1, \ldots, F_m)\) is a NO challenge if it is not a YES challenge and there exists an assignment to \(u = (u_1, \ldots, u_n) \in \mathbb{Z}_p^n\) such that for all \(i \in Trusted\), \(F_i = g_{\alpha_i}^{f_i(u)}\).
- **INVALID challenge**: \(F = (F_1, \ldots, F_m)\) is an INVALID challenge if it is neither a YES nor NO challenge.

Following [45], we can view a YES challenge as meaning that both the trusted and untrusted elements are distributed as they should be, whereas in a NO challenge, the trusted elements are correctly formed, but the untrusted ones are not. In an INVALID challenge, the "trusted" elements are not drawn from the proper distribution (e.g., the public parameters are not correct), and therefore, we ignore this case since verification requires correctness of the elements we trust.

The goal of our work will be to (automatically) devise circuits that take as input a PPE challenge (recall Definition 3.2) and output 1 for all YES challenges and 0 for all NO challenges. That is, where prior work [45] allowed only the conjunction of PPEs to test the well-formedness of the untrusted elements; we will now combine the power of PPEs with arbitrary logic. Informally, the PPE circuit takes \(m\) group elements as input and outputs a single bit. Like regular circuits, each gate of the circuit could be an AND/OR/NOT gate. In addition, we also allow the circuit to have PPE gates. Each PPE gate has some PPE \(P\) (over formal variables \(F_1, F_2, \ldots, F_m\) denoting the \(m\) input wires of the PPE circuit) hardcoded in it and outputs a boolean value representing whether the \(m\) input group elements satisfy \(P\). Informally, to evaluate a PPE circuit on given \(m\) group elements \((x_1, x_2, \ldots, x_m)\), we first evaluate each PPE gate on the given input (check whether the PPE is satisfied by substituting \(F_i = x_i \forall i \in [m]\)), and then evaluate the boolean circuit logic to obtain the final output. As observed in Section 2.1, PPEs can also capture identity tests as well as be a hardwire for 0 (the equation that is never satisfied) or 1 (the equation that is always satisfied).

#### 3.3 PPE Circuit

We now establish some formal notation for our specialized PPE circuits, adapting the more general circuit notation of Bellare, Hoang, and Rogaway [23] and Garg, Gentry, Halevi, Sahai, and Waters [36].

Definition 3.3 (PPE Circuit). A PPE circuit \(C\) is a tuple \((G, m, \alpha, N, Gates, out, GateType, A, B)\), where:

- \(G = (p, g_1, g_2, g_T, G_1, G_2, G_T, e)\) establishes the algebraic setting,
- Integer \(m\) specifies the number of group elements in the circuit input. We will refer to these as \(Inputs = \{1, \ldots, m\}\).
- The vector \(\alpha = (\alpha_1, \ldots, \alpha_m)\) is a sequence of pairing group identifiers in \(I = \{1, 2, T\}\) for the input elements,
- Integer \(N\) is the number of gates in the PPE circuit,
- \(Gates = \{m + 1, \ldots, m + N\}\). We will refer to \(Wires = Inputs \cup Gates\).
- \(out\) is the integer in \(Gates\) denoting the output gate. Unless otherwise stated, \(out = m + N\).
- \(GateType: Gates \to \{(PPE, \beta), AND, OR, NOT\}\) is a function that identifies the gate functionality. In the case of PPE gates, the description includes a circuit \(\beta\) with \(m\) input wires whose logic forms that of a PPE over variables \(F_1, \ldots, F_m\) where each \(F_i \in G_{\alpha_i}\) as specified by \(\alpha\), and the single output wire of the PPE carries a bit representing whether or not the input satisfies the PPE.
- \(A: Gates \to Wires\) and \(B: Gates \to Wires\) are functions. For any gate AND/OR/NOT \(g\), \(A(g)\) identifies \(g\)'s first incoming wire. For any AND/OR gate \(g\), \(B(g)\) identifies \(g\)'s second incoming wire. We require that \(g > B(g) > A(g)\), ignoring \(B(g)\) when undefined. Recall that the input wires for all PPE gates are the \(Inputs\).

This describes a circuit taking as input \(m\) group elements and outputting a single output on wire \(out\). We now describe how to evaluate the above circuit.

#### 3.4 PPE Circuit Evaluation

Definition 3.4 (PPE Circuit Evaluation). A PPE circuit evaluation algorithm \(\text{Eval}_C: C \times (x_1, \ldots, x_m)\) takes as input a PPE circuit \(C = (G, m, \alpha, N, Gates, out, GateType, A, B)\) together with an \(m\)-element PPE challenge \((x_1, \ldots, x_m)\) which must be consistent with \((G, \alpha)\) (i.e., \(x_i \in G_{\alpha_i}\)). The algorithm outputs a bit in \(\{0, 1\}\).

Here we describe a "canonical" evaluation algorithm. The input group elements \((x_1, \ldots, x_m)\) are assigned to the \(m\) input wires. For each gate \(g \in Gates\) (in the increasing order of \(g\)), compute \(s_g\) as follows according to the description of \(GateType(g)\):

- If \((PPE, \beta)\), then evaluate the PPE \(\beta\) using the assignment to variables in \((F_1, \ldots, F_k)\). If the PPE is satisfied, then set \(s_g = 1\). Otherwise, set \(s_g = 0\).
- If AND, then \(s_g = s_{A(g)} \land s_{B(g)}\).
- If OR, then \(s_g = s_{A(g)} \lor s_{B(g)}\).
- If NOT, then \(s_g = \neg s_{A(g)}\).

This algorithm outputs \(s_{out}\). For the AND, OR, and NOT gates, by the rules of the circuit description, \(s_{A(g)}\) and \(s_{B(g)}\) will be defined before they are used.

The above conditions guarantee that the circuit does not have any loops. While we chose to have AND, OR, and NOT gates, this is somewhat arbitrary. We could have chosen only NAND or allowed gates with larger fan-in, etc. We abuse notation and let \(C(x)\) denote \(\text{Eval}(C, x)\), i.e., evaluation of the circuit \(C\) on input \(x\).

#### 3.5 PPE Circuit Testable and Testing Circuits

We next extend the notion of PPE testability and testing sets [45] to apply to PPE circuits.

Definition 3.5 (PPE Circuit Testable and Testing Circuits). A PPE problem instance \(\Pi = (G, n, m, f, u, \alpha, Trusted)\) is said to be PPE circuit testable if and only if there exists a PPE circuit \(C = (G, m, \alpha, \ldots, \ldots, \ldots, \ldots, \ldots, \ldots)\) such that both of the following hold:

- \(C(x) = 1\) for every YES challenge \(x\),
- \(C(y) = 0\) for every NO challenge \(y\).

There are no conditions on the behavior of \(C\) for INVALID challenges. For any PPE problem instance \(\Pi\), we call such a PPE circuit \(C\) a testing circuit. A testing circuit for a PPE problem instance need not be unique.

### 3.1 A Few Shorthand Notations for Circuits

Useful shorthand is informally defined here with formalisms in Appendix A. We use \(\text{MakeCircuit}(G, m, \alpha, P)\) to define a PPE circuit that computes the output of a PPE \(P\) and use \(C_{acc}\) to denote the circuit which always outputs 1.

Consider any two PPE circuits \(C_1\) and \(C_2\) with the same group structure \(G\), number of inputs \(m\), and group identifiers \(\alpha\). When building our circuits, we will use shorthand notation like \((C_1 \text{ AND } C_2)\), \((C_1 \text{ OR } C_2)\), or \((\text{NOT } C_1)\). Informally, we use \(C_1 \text{ AND } C_2\) to denote the circuit obtained by ANDing the output wires of \(C_1\) and \(C_2\) (i.e., connecting output wires of \(C_1\) and \(C_2\) as inputs to a fresh AND gate, and considering the output wire of the fresh AND gate as the output wire of the entire circuit). Similarly, we use the notation \(C_1 \text{ OR } C_2\) to denote the circuit obtained by ORing the output wires of \(C_1\) and \(C_2\). We use \(\text{NOT } C_1\) to denote the circuit obtained by connecting the output wire of \(C_1\) to a fresh NOT gate and then considering the output wire of the NOT gate to be the output wire of the entire circuit. Furthermore, when the circuits share common inputs (e.g., same PPE challenge elements), we will make sure the final circuit has only the appropriate number of input wires.

### 4. Searching for a PPE Testing Circuit

We now describe an algorithm to search for a testing circuit \(Q\) for a PPE problem. The input is a PPE problem \(\Pi\) and there are two possible types of outputs. Either it will output that \(\Pi\) is PPE circuit testable and, to confirm this, it will produce one testing circuit \(Q\), or it will output the special response "unknown". In the latter case, the algorithm does not determine whether \(\Pi\) is PPE circuit testable.