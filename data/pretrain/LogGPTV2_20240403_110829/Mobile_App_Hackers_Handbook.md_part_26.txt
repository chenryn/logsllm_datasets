which is signature|system (which equates to an integer protection level of 18. This value comes from
performing a Boolean OR operation on 0x02 and 0x10). The drozer agent was not signed by the same certificate
as the application that defined the INSTALL_PACKAGES permission (which is usually the package named android)
and it did not come as part of the system image. Hence, the request to attain this permission was rejected by the
OS. If one application permission request is rejected, the application will still function correctly as long as it
handles this rejection gracefully when attempting to use functionality provided by this permission at runtime. If
the application does not handle this scenario gracefully it may result in an application crash.
Third-party applications that do not have any intention of sharing data or functionality with applications from
other developers should always define permissions with the signature protection level. This ensures that
another developer cannot write an application that requests your permission and gains access to your exported
components. This may not constitute a direct risk to your application or its data depending on what the
permission is used for; however, in most cases this is not desirable from a security perspective. Using the
signature protection level does not affect the application’s ability to integrate or communicate with other
applications created by the same developer, as these applications would be signed with the same certificate. This
is why it is so important that Android packages are signed cryptographically, or else how would Android know
which application is fit to hold a particular permission? In fact, Android will not allow you to install an
application that is not signed and doing so from ADB will result in an error with the code
INSTALL_PARSE_FAILED_NO_CERTIFICATES. The use of permissions with protection levels provides a strong
foundation for application security for developers; however, the foundation’s strength depends on the correct
configuration of protection levels.
A WORD ON COMMON MALWARE TACTICS
The large majority of news articles relating to Android security are about malware found in alternative
Android app markets or being served from compromised websites. The usual method employed by
malware is to simply request the appropriate permission in order to perform its evil deeds. Whether this
malware is sending premium-rate SMS messages or reading contacts stored on the device for spam, it
requested the permission to access these resources. Malware authors count on the fact that users do not
read the permissions on the installation review activity when installing the application. It is important to
note that the security model has not been broken in any way by this common tactic and this is exploiting
the lack of user security awareness rather than a technical flaw in Android.
Applications have been discovered on alternative Android app markets that are able to exploit a
vulnerability in order to bypass the security model in some way. A good example of one way to do this is
including a kernel exploit that allows the malware to gain root access on the device. After root access has
been obtained, any additional packages can be installed with arbitrary permissions and raw access to
databases and files storing sensitive information can be retrieved and sent back to the malware author.
The application would not require any permissions at all to perform this attack. One such malware sample,
named RootSmart, was found to include a popular root exploit named “gingerbreak” that obtained root
access on victim devices and then connected to a command-and-control server on the Internet for further
instructions. You can read more about this specific malware at
http://www.csc.ncsu.edu/faculty/jiang/RootSmart/.
Application Sandbox
The Android application sandbox comprises multiple measures that were designed to ensure that one
application cannot harm another or read its data without being explicitly allowed to do so.
Start by looking at what measures are in place from a native Linux viewpoint. As discussed earlier in this
chapter, each application runs as its own user on Android. This provides a strong model for filesystem security
that is inherited from UNIX. Each application’s private data directory is marked with the file permissions that
only allow the application’s user to access it. Here is an example of the drozer agent’s data directory
permissions:
drwxr-x--x u0_a59 u0_a59 2014-05-11 18:49 com.mwr.dz
Attempting to access this folder as any other non-privileged user results in a permission denial, as shown in this
example:
shell@android:/ $ ls -l /data/data/com.mwr.dz
opendir failed, Permission denied
However, note that the folder is marked as world executable. This means that any other files or subfolders
inside this directory with lax permissions set on them will result in the exposure of these files to any user (and
hence application) on the system. Chapter 7 explores this topic in detail.
An exception to the rule that each application runs as its own user is when an application requests to use a
sharedUserId. This can be done by using the manifest entry android:sharedUserId="requested.userid.name".
This request is granted to an application only if it is signed by the same certificate as the first application that
requested this user identifier. If a set of applications use this option, they will be running under the exact same
UID. This means that there will be no separation between them and they can freely read and write to each
other’s private data directories. There are even configuration options available to accommodate running these
applications in the same process. This means that every one of these applications effectively hold all the
permissions of the entire collection of applications running under the same user identifier.
An example of mapping what the collective permissions are of applications making use of the android.media
sharedUserId is shown in drozer:
dz> run app.package.shareduid -u 10005
UID: 10005 (android.media:10005)
Package: com.android.providers.downloads
Package: com.android.providers.downloads.ui
Package: com.android.gallery
Package: com.android.providers.media
Permissions: android.permission.WRITE_EXTERNAL_STORAGE,
android.permission.ACCESS_ALL_DOWNLOADS, android.permission.WAKE_LOCK,
android.permission.WRITE_SETTINGS, android.permission.WAKE_LOCK,
android.permission.CAMERA, android.permission.RECEIVE_BOOT_COMPLETED,
android.permission.ACCESS_DOWNLOAD_MANAGER,
android.permission.ACCESS_NETWORK_STATE,
android.permission.SEND_DOWNLOAD_COMPLETED_INTENTS,
android.permission.WRITE_MEDIA_STORAGE,
android.permission.WRITE_EXTERNAL_STORAGE, android.permission.RECORD_AUDIO,
android.permission.ACCESS_FINE_LOCATION,
android.permission.RECEIVE_BOOT_COMPLETED, android.permission.INTERNET,
android.permission.READ_EXTERNAL_STORAGE, android.permission.SET_WALLPAPER,
android.permission.INTERACT_ACROSS_USERS, android.permission.READ_SMS,
android.permission.ACCESS_MTP, android.permission.READ_EXTERNAL_STORAGE,
android.permission.ACCESS_CACHE_FILESYSTEM,
android.permission.MODIFY_NETWORK_ACCOUNTING,
android.permission.SEND_DOWNLOAD_COMPLETED_INTENTS,
android.permission.MANAGE_USERS, android.permission.READ_EXTERNAL_STORAGE,
android.permission.ACCESS_ALL_DOWNLOADS,
android.permission.CONNECTIVITY_INTERNAL,
android.permission.WRITE_EXTERNAL_STORAGE,
android.permission.UPDATE_DEVICE_STATS
This drozer module can be used to retrieve the collective permissions that all four packages shown effectively
hold. You can find more about the sharedUserId attribute at
http://developer.android.com/guide/topics/manifest/manifest-element.html#uid.
Other application sandbox features are controlled by binder. Every application has access to binder and is able to
communicate with it. Specialized IPC parcels are sent to it by applications and passed to the Activity Manager
Service, which checks whether the calling application holds the permission required to perform the requested
task. For example, if an application had to request that an exported activity from another application be started,
the OS would check that the calling application holds the appropriate permission to start the activity. All
Android API calls to exposed application components are controlled and the permission model is strictly
enforced when accessing them.
Some application permissions are not enforced by binder, but rather by the Linux group assigned to an
application. As explained in the “Understanding Permissions” section, requesting some permissions may get
your application put in a certain group. For instance, inet when requesting android.permission .INTERNET. This
means that accessing the network from an application would be governed by the OS’s native security checks and
not binder.
In summary, Android does not implement a sandbox as you would expect. People often think of a sandbox as a
completely separate virtual machine environment like one would run a sample of malware inside to make sure
that it cannot infect the host system. Instead, Android uses only the strength of Linux user and group separation
security enforced by the kernel as well as special IPC calls to binder to uphold the application capability security
model. It does not provide a completely segregated environment for each application as some have thought.
Filesystem Encryption
Full disk encryption (FDE) is when the contents of an entire drive or volume are encrypted and not only
selected individual files. This is useful because it requests the password from the user at startup and from then
onward transparently encrypts and decrypts all data read and written to the disk. This serves as protection
against stolen or lost disks that have been powered down. Part of the benefit is being able to defeat common
forensics techniques such as disk imaging and booting the disk attached to another OS in order to browse the
contents. Widely accepted FDE software makes use of a user-provided password in order to derive the key used
for encryption.
FDE has been available on Android since version 3.0 (Honeycomb). It makes use of the dm-crypt module in the
kernel to transparently encrypt and decrypt data on the block device layer. This is the same implementation
used on modern Linux systems and is a tried and trusted form of FDE. The encryption suite used under the
hood is aes-cbc-essiv:sha256, which had no publicly acknowledged weaknesses at the time of writing.
Filesystem encryption is not enabled by default on Android versions prior to 5.0 (Lollipop) and has to be
enabled by the user in the encryption options in the security section of the settings application. The user’s
unlock screen PIN or password is the same one that is used to encrypt the FDE password. This means that
Android generates a password, and this is encrypted using a key that is derived from the user’s screen unlock
PIN or password. The key used to encrypt the FDE password is derived from the PIN or user’s password using
2000 rounds of PBKDF2 on versions of Android prior to 4.4 (KitKat). KitKat onwards implements scrypt for
key derivation instead of PBKDF2 to make brute-forcing of long PIN numbers and passwords extremely
difficult. The use of this intermediary password allows users to change their unlock screen password without
having to change the actual FDE password.
This solution encrypts only the /data partition on an Android device. This means that the private data directory
of applications and other sensitive user information is encrypted. Performing disk imaging techniques on the
entire filesystem (as one would do in a forensic investigation) would yield access to only this encrypted data and
not to any of the files in the /data folder or any of its subfolders. An interesting downfall is that the Secure
Digital (SD) card is not included as part of the standard FDE scheme used by Android. Some handset
manufacturers have included the encryption of the SD card as part of their customizations to Android; however,
these implementations are proprietary and non-standardized. This means that gaining physical access to an
Android device that has not implemented SD card encryption will allow the retrieval of all files stored on the SD
card. Some applications have been discovered to use the SD card for storage of sensitive files, so this may prove
useful to an attacker.
Disk encryption by nature protects only data at rest. This means that if an attacker had to gain code execution on
a device that is making use of FDE on Android, he would not notice a difference in the data he could access. He
would find that the data he retrieves is not encrypted in any manner, as it would transparently be decrypted for
him by dm-crypt. Disk encryption does, however, protect users when an encrypted device has been stolen and
the attacker does not have code execution or access to the device.
For additional information about the technical aspects of FDE on Android check out
http://source.android.com/devices/tech/encryption/ and
http://nelenkov.blogspot.com/2014/10/revisiting-android-disk-encryption.html.
Generic Exploit Mitigation Protections
Attackers have exploited native memory corruption issues since the first operating systems, and Android is no
exception. Where native code is running in applications, the potential exists to corrupt memory structures to
take control of it. To combat the trivial exploitation of native bugs, OS developers began to implement
preventative and reactive measures known as exploit mitigations. These measures result from the attitude of
“we will not be able to secure all code, so why not make it harder to exploit these issues instead.”
Many of the mitigations that Android makes use of are inherited from the Linux kernel. Applications on Android
can make use of native libraries that are built in C/C++ or execute binaries that are included in their assets.
Code that contains vulnerabilities and is in a code path that provides an entry point for an attacker could be
exploited by the attacker to take control of the application. Note that if an attacker had to successfully exploit a
native component, he would gain the privileges of the application itself and nothing more. In other words,
native code runs under the exact same context as the calling application.
A simple example of this scenario is the Android browser. All the parsing performed by the Android browser is
done inside a native library. If an attacker can provide malformed HTML, JavaScript, CSS, or any other element
that requires parsing from this native component, he could potentially cause the corruption of memory
structures within the browser application. If this is done in a finely crafted manner, an attacker can cause new
code to be executed by the application. This is why including any and all exploit mitigations on the Android OS is
important to protect users from compromise.
Exploit mitigations have been included since the very first publicly available version of Android. However,
mitigations that are comparable with modern desktop operating systems have only been available in Android
since version 4.0 (Ice Cream Sandwich). This point may be argued, but the fact is that writing an exploit for a
remotely exploitable memory corruption vulnerability on a Jelly Bean (or newer) device is a time-consuming
task that often requires the chaining of multiple vulnerabilities. Exploit mitigations do not make it impossible to
write an exploit for a vulnerability but rather make it a lot more expensive to do so. Table 6.3 lists some of the
truly noteworthy mitigations introduced to Android.
Table 6.3 Noteworthy Exploit Mitigations Included in Android
EXPLOIT VERSION EXPLANATION
MITIGATION INTRODUCED
Stack cookies 1.5 Protects against basic stack-based overflows by including a “canary” value
after the stack that is checked.
safe_iop 1.5 Provides a library that helps reduce integer overflows.
dlmalloc 1.5 Helps prevent double free() vulnerabilities and other common ways to
extensions exploit heap corruptions.
calloc 1.5 Helps prevent integer overflows during memory allocations.
extensions
Format string 2.3 Helps prevent the exploitation of format string vulnerabilities.
protections
NX (No eXecute) 2.3 Prevents code from running on the stack or heap.
Partial ASLR 4.0 Randomizes the location of libraries and other memory segments in an
(Address Space attempt to defeat a common exploitation technique called ROP (Return-
Layout Oriented Programming).
Randomization)
PIE (Position 4.1 Supports ASLR to ensure all memory components are fully randomized.
Independent Effectively ensures that app_process and linker are randomized in memory
Executable) so that these cannot be used as a source of ROP gadgets.
support
RELRO 4.1 Hardens data sections inside a process by making them read-only. This
(RELocation prevents common exploitation techniques such as GOT (Global Offset
Read-Only) and Table) overwrites.
BIND_NOW
FORTIFY_SOURCE 4.2 Replaces common C functions that are known to cause security problems
(Level 1) with “fortified” versions that stop memory corruption from taking place.
SELinux 4.3 Allows for fine-grained access control security policies to be specified. When
(Permissive properly configured policies are present, it can provide a significant
mode) improvement in the security model. Permissive mode means that security
exceptions are not enforced when a policy is breached. This information is
only logged.
SELinux 4.4 Enforcing mode means that the specified policies are imposed.
(Enforcing
mode)
FORTIFY_SOURCE 4.4 Replaces additional functions with their “fortified” versions.
(Level 2)
Note that using the latest NDK (see https://developer.android.com/tools/sdk/ndk/index.html) and targeting
the latest Android API version automatically enables all the exploit mitigations discussed in Table 6.3. These
mitigations can also be turned off explicitly, but there is seldom a need to do that.
You can find more information about the exploit mitigations and other security features introduced in each
version at https://source.android.com/devices/tech/security/ and in the relevant source code commit logs.
ADDITIONAL KERNEL PROTECTIONS AGAINST PRIVILEGE ESCALATION
Some exploit mitigations introduced into Android are specifically to stop a user that already has code
execution on a device as a low-privileged user from exploiting some aspect of the kernel to gain root
access. Table 6.4 presents a list of noteworthy kernel-hardening mitigations.
Table 6.4 Noteworthy Exploit Mitigations to Prevent a Non-privileged User From Exploiting a Vulnerability
and Gaining Root Access
EXPLOIT VERSION EXPLANATION
MIGITATION INTRODUCED
mmap_min_addr 2.3 This value specifies the minimum virtual address that a process is allowed
to mmap and was set to 4096. This stops processes from mapping the zero
page and causing a null pointer dereference in order to execute arbitrary
code as root.
kptr_restrict 4.1 Avoids leaking kernel addresses when displaying /proc/kallsyms and
and /proc/kmsg to users.
dmesg_restrict
mmap_min_addr 4.1.1 This value was increased to 32768.
update
installd 4.2 The installd daemon no longer runs as the root user. This means that any
hardening compromise of this component will not result in a privilege escalation to
root.
Init script 4.2 This helps prevent against symbolic-link related attacks.
O_NOFOLLOW
Init script no 4.2 Using some vulnerability to add ro.secure=0 or ro.kernel .qemu=1 to
longer parses /data/local.prop was a common way of escalating from the system user to
/data/local.prop root as these values cause adbd to be started as root.
Removed 4.3 Removed all setuid/setgid programs and added support for filesystem
setuid/setguid capabilities instead.
programs
Restrict setuid 4.3 The /system partition is mounted as nosuid for all processes that were
from installed spawned by zygote. This means that installed applications cannot abuse
apps vulnerabilities in any SUID binaries to gain root access.
Rooting Explained
On Android, by default no way exists to run an application or some task within it as the root user. This simple
fact has led to entire communities of researchers dedicating their time to finding ways to obtain root on various
Android devices. There are also very many misconceptions about what rooting your device entails technically
and why it is possible (or not) on certain devices. This section sheds light on some of the common rooting
methods and gives a technical breakdown of each.
Rooting Objectives
A typical objective of rooting an Android device is so that you can put a su binary in a directory on the PATH (for
example, /system/bin or /system/xbin). The job of the su binary is to allow a user to switch security contexts
and become another user, including root. The su binary should, however, first determine whether the user
should be allowed to impersonate the requested user. The required criteria is different on conventional Linux
systems from the methods used on commonly found su packages on Android, but one fact that remains the
same is that the su binary needs to be running as root in order to allow the change to another user context. The
following shows the file permissions on su on a modern Linux system:
$ ls -l /bin/su
-rwsr-xr-x 1 root root 36936 Feb 17 04:42 /bin/su
These permissions tell you that any user can execute this binary and when she does she will be running it as the
root user. This is a Set User Identifier (SUID) binary, which sets the user ID to the file’s owner upon execution.
You can invoke it from within an application by using code similar to this:
Runtime.getRuntime().exec(new String[]{"su", "-c", "id"});
This executes the id command as the root user and works because the su binary is on the PATH, which means