v = read
(cid:6)
(cid:7)
c, m, p
l
(cid:2)
I, i, p
, r, I, O =(cid:3)
σin(i)  p(i)
(cid:8) = m[x (cid:3)→ v]
m
(cid:7)
(cid:8), p
, r, I, O
l
skip, m
Figure 6. Local semantics for secure multi-execution.
assume L to be ﬁnite. This can be achieved by limiting
L to the security levels for which I/O statements are
present in the program at hand. The lattice order on
L can always be extended to a total order (since L is
ﬁnite), and we assume as given one such extension.
Note that initial security levels for variables are not
directly supported. However, we can encode a variable
x with an initial security level l and initial value v
by introducing a dummy input channel ix, such that
σin(ix) = l and using an input channel state I such that
I(ix) = (
(cid:3)→ v).
Let’s proceed to modelling the separate executions at
the diﬀerent security levels. These diﬀerent executions
normally do not interact, except when the execution
for an execution level l1 reads from a channel i with
σin(i) = l2 ≤ l1. In that case, as explained in Section II-C,
the execution at level l1 will wait for the execution at
level l2 to read the next value from channel i and then
use that value as well.
To model this, we deﬁne one local execution conﬁgu-
ration for each security level, as well as a single global
(cid:6)
(cid:7)
execution conﬁguration describing the global state of the
c, m, p
execution. A local execution conﬁguration
l
is deﬁned by a command c, a memory m, an input
pointer p and a security level l. A global execution
conﬁguration (cid:5)[lec1,··· , lecn] , wq, r, I, O(cid:6) is deﬁned by
a set of local execution conﬁgurations [lec1,··· , lecn], a
waiting queue wq, mapping pairs (i, n) to sets of local
execution conﬁgurations, a global input pointer r, a
program input I and a program output O.
In Figure 6, we deﬁne local semantics, modelling
steps in a single execution at a security level l. The local
semantics are deﬁned for local execution states with
respect to a global input pointer r, program input I
and program output O. Local execution steps can emit
a signal (cid:10) (i, n), indicating that the execution at security
level σin(i) has just read from channel i at position
n. They can also emit a signal ⊗ (i, n) indicating that
the execution cannot proceed until the execution at
security level σin(i) has read from channel i at position
n.
Figure 7 shows the global semantics, modelling a
scheduler and keeping track of global state. They are
deﬁned assuming a procedure select, which maps a
list of local execution states ([lec1,··· , lecn]) onto the
execution state leci next to be run. We deﬁne select
as a procedure, not a function, to allow for modelling
nondeterministic schedulers and schedulers keeping
state, like a round-robin scheduler.
The scheduler selectlowprio, which we need for prov-
ing one of our main results, is a function mapping a list
of local execution states ([lec1,··· , lecn]) onto the local
execution state with minimal security level, according
to the assumed total extension of the lattice order
(cid:6)
114
(cid:8)
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
(12)
select(L) = lec =
select(L) = lec
(cid:6)
(cid:8), r
(cid:8)
(cid:8), I, O
(cid:8)(cid:6)
(cid:8), I, O
(cid:8) = L \ {lec}
L
(cid:5)L, wq, r, I, O(cid:6) =(cid:3) (cid:5)L
lec, r, I, O =(cid:3) lec
(cid:8) = L \ {lec} ∪ {lec
(cid:8)}
L
(cid:8), wq, r
(cid:7)
skip, m, p
l
(cid:5)L, wq, r, I, O(cid:6) =(cid:3) (cid:5)L
(cid:8), wq, r, I, O(cid:6)
(cid:10)(i, n)=(cid:3) lec
(cid:8), r
(cid:8), I, O
lec, r, I, O
(cid:8)} ∪ Lw
(cid:8) = L \ {lec} ∪ {lec
L
(cid:8)(cid:6)
(cid:5)L, wq, r, I, O(cid:6) =(cid:3) (cid:5)L
(cid:8), I, O
(cid:8), r
(cid:8), I, O
(cid:8)
lec, r, I, O
(cid:8) = wq [(i, n) (cid:3)→ Lw ∪ {leci}]
wq
(cid:8) = L \ {lec}
L
(cid:8), wq
(cid:8) = wq [(i, n) (cid:3)→ {}]
(cid:8), r
(cid:8), wq
⊗(i, n)=(cid:3) lec
(cid:5)L, wq, r, I, O(cid:6) =(cid:3) (cid:5)L
(cid:8)(cid:6)
(cid:8), I, O
(cid:8), r
(cid:8)
select(L) = lec
wq(i, n) = Lw
wq
select(L) = lec
wq(i, n) = Lw
(1)
(2)
(3)
(4)
Figure 7. Global semantics for secure multi-execution.
(cid:6)
on L. The need for this scheduler corresponds to the
intuition that we cannot make a low thread wait for the
execution of steps in a high thread if we wish to avoid
timing covert channels. We need the total order on L to
make the scheduler function deterministic, which we
require in some of our lemmas below.
c, m, p
Variables wq denote waiting queues. If a local execu-
∈ wq(i, n) for some input channel
tion state
i ∈ Cin and n ≥ 0, this means that the local execution
state has tried to read from input channel i at position
n, before the thread at security level σin(i) has done.
In such a case, the ﬁrst thread will be placed in a
waiting queue until the other thread executes the read
operation. When that happens, the ﬁrst thread will be
executed further. The notation wq0 denotes an initial
waiting queue, mapping all pairs (i, n) onto the empty
list.
(cid:7)
l
Variables r in global execution states denote global
input pointers. For any channel i, r(i) is the position
up to which the execution at security level σin(i) has
already read from channel i. We deﬁne r0 as a synonym
for the initial input channel pointer p0, to be used when
a global input pointer is meant.
We assume L to be ﬁnite and we deﬁne LP,0, the
initial set of local execution states for a program P, as
l for all l ∈ L.
the set of local execution states
The program P is executed for input I by applying
the global semantic rules from Figure 7 to the initial
global execution state (cid:5)LP,0, wq0, r0, I, O0(cid:6). We write =(cid:3)∗
for the transitive and reﬂexive closure of the =(cid:3) relation
for global execution states. Suppose
P, m0, p0
(cid:5)LP,0, wq0, r0, I, O0(cid:6) =(cid:3)∗ (cid:5)L f , wq f , r f , I, O f(cid:6) ,
with (cid:5)L f , wq f , r f , I, O f(cid:6) such that no semantic rule
(cid:6)
(cid:7)
115
from Figure 7 applies, then we say that the secure
multi-execution of program P with input channel state
I produces ﬁnal input pointer r f and program output
O f , or (P, I) =(cid:3)∗
(r f , O f ). From inspection of global and
local semantics in Figures 7 and 6, we know that in
such a case, L f must be equal to the empty set ∅.
As we did for standard execution, we introduce a
time-limited secure multi-execution execution relation
=(cid:3)n. We say that
can
into
(cid:8)(cid:6) by n steps of the global execution
if
(cid:5)L
(cid:8), wq
semantics in Figure 7. If
(cid:5)L, wq, r, I, O(cid:6) =(cid:3)n (cid:5)L
(cid:8), wq
be
(cid:8), I, O
(cid:5)L, wq, r, I, O(cid:6)
(cid:8), r
(cid:5)LP,0, wq0, r0, I, O0(cid:6) =(cid:3)n (cid:5)L
).
then we write (P, I) =(cid:3)n (r
(cid:8), O
(cid:8)
(cid:8), wq
(cid:8)(cid:6)
(cid:8), I, O
(cid:8), r
transformed
(cid:8), r
(cid:8), I, O
(cid:8)(cid:6) ,
The following lemma identiﬁes certain invariants on
global execution states that the global semantics from
Figure 7 preserve.
Lemma 1 (Global Execution State Invariants). Suppose
that
(cid:5)LP,0, wq0, r0, I, O0(cid:6) =(cid:3)∗ (cid:5)L, wq, r, I, O(cid:6) .
Then
(cid:6)
(cid:7)
l
c, m, p
c, m, p
(cid:7)
l is in L or wq(i
∈ wq(i, n), we have that l > σin(i),
• for all
p(i) = n and n ≥ r(i).
(cid:6)
(cid:8), n), then
• if
r(i) = p(i) for all i ∈ Cin with σin(i) = l.
• for any security level l, there is only a single execution
(cid:6)
(cid:7)
l at security level l in L or wq(i, n) for any
c, m, p
(i, n).
(cid:8), n) for any (i
Proof: It is clear that the results hold for the
initial global execution state (cid:5)LP,0, wq0, r0, I, O0(cid:6) and is
preserved by the global semantics from Figure 7.
IV. Theoretical Properties
A. Noninterference
We give both a regular deﬁnition of noninterference
and a stronger one. Both deﬁnitions are termination-
sensitive, but the strong deﬁnition is also timing-
sensitive, while the normal one is not. We will show
that secure multi-execution guarantees strong nonin-
terference for any program P, and that it is precise
for terminating runs of programs meeting the normal
noninterference property.
For a given security level l ∈ L, we deﬁne two
(cid:8)
) iﬀ
program inputs I and I
(i) for all i ∈ Cin where σin(i) ≤ l. Likewise,
I(i) equals I
we deﬁne two program outputs O and O
to be equal
(o) for all o ∈ Cout,
(cid:8)
up to l (O =l O
σout(o) ≤ l. Finally, we deﬁne two input pointers p and
(cid:8)
) iﬀ O(o) equals O
to be equal up to l (I =l I
(cid:8)
(cid:8)
(cid:8)
) for all
(cid:8)
) iﬀ p(i) = p(i
(cid:8)
to be equal up to l (p =l p
(cid:8)
p
i ∈ Cin, σin(i) ≤ l.
The normal noninterference property does not take
into account the timing covert channel. We formulate
its deﬁnition in terms of an abstract transitive execu-
tion relation (cid:4)→∗
. Both the standard execution relation
∗
and the secure multi-execution execution relation
can be substituted for (cid:4)→∗
=(cid:3)∗
(cid:2)
.
Deﬁnition 1 ((Normal) NonInterference). A program P
is timing-insensitively noninterferent or simply nonin-
terferent with relation to a given semantics (cid:4)→∗
if for all
security levels l ∈ L and for all inputs I and I
(cid:8)
such that
I =l I
, we have that
(cid:8)
(cid:5)
p f , O f
(cid:5)
(cid:8)
f
p
(cid:8)
f
, O
(P, I) (cid:4)→∗ (cid:4)
) (cid:4)→∗ (cid:4)
(cid:8)
(P, I
(cid:8)
=l O f .
f
if and only if
and p
(cid:8)
f
=l p f and O
The strong deﬁnition takes into account both termi-
nation and timing covert channels. Again, we formu-
late this deﬁnition using a time-limited abstract tran-
sitive execution relation (cid:4)→n. Both the standard time-
limited execution relation (cid:2)n and the time-limited
secure multi-execution execution relation =(cid:3)n can be
substituted for (cid:4)→n.
Deﬁnition 2 (Strong noninterference). A program P is
timing-sensitively noninterferent or strongly noninter-
ferent with relation to a given semantics (cid:4)→∗
if for all
security levels l ∈ L, for all n ≥ 0, for all program inputs I
and I
such that I =l I
(cid:8)
holds that if
(cid:2)
(cid:3)
p, O
,
(cid:2)
p
(cid:8), O
(cid:8)(cid:3)
,
(cid:8)
(P, I) (cid:4)→n
) (cid:4)→n
(cid:8)
(P, I
(cid:8) =l O.
then
and p
(cid:8) =l p and O
B. Soundness
The ﬁrst of our two main results is the following
soundness result.
Theorem 1 (Soundness of Secure Multi-Execution).
Any program P is strongly noninterferent under secure
multi-execution, using the selectlowprio scheduler func-
tion.
Because of space constraints, we prove only this
result for the selectlowprio scheduler. We do believe
however that the same result would hold if we were
to allow for the exceptions mentioned in Section II-D
(I/O latency and independent progress on multi-core
CPU’s). In addition, we believe that a more relaxed
116
form of noninterference (termination-sensitive nonin-
terference) could be proven for a class of schedulers
conforming to some basic fairness property.
We will need some lemmas in order to be able to
prove this theorem.
Lemma 2 (Soundness Preservation for Local Seman-
tics). Let lg be a security level, and l ≤ lg. Suppose that
(cid:6)
(cid:7)
l