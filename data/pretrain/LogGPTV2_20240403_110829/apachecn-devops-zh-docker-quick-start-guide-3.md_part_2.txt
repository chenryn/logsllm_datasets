答案是`ADD`指令实际上可以比`COPY`指令做得更多。更多取决于源输入使用的值。使用`COPY`指令，来源可以是文件或文件夹。但是，使用`ADD`指令，源文件可以是文件、文件夹、本地`.tar`文件或网址。
当`ADD`指令有一个源值为`.tar`文件时，该 TAR 文件的内容被提取到映像内相应的文件夹中。
When you use a `.tar` file as the source in an `ADD` instruction and include the `--chown` parameter, you might expect the owner and group in the image to be set on the files extracted from the archive. This is currently not the way it works. Unfortunately, the owner, group, and permissions on the extracted contents will match what is contained within the archive in spite of the `--chown` parameter. When you use a `.tar` file, you will probably want to include `RUN chown -R X:X` after the ADD.
如上所述，`ADD`指令可以使用一个 URL 作为源值。下面是一个 Dockerfile 示例，其中包含一个使用 URL 的`ADD`指令:
```
# ADD instruction Dockerfile for Docker Quick Start
FROM alpine
LABEL maintainer="Earl Waud "
LABEL version=3.0
ADD https://github.com/docker-library/hello-world/raw/master/amd64/hello-world/hello /
RUN chmod +x /hello
CMD ["/hello"]
```
在`ADD`指令中使用网址工作时，将文件下载到映像中，即使 Docker 也不建议使用该功能。以下是 Docker 文档对使用`ADD`的看法:
![](img/f457493e-9d04-4f9f-8892-4eb6466b159d.png)
所以，一般来说，只要你能使用`COPY`指令将想要的内容输入到映像中，那么你就应该选择使用`COPY`而不是`ADD`。
# ENV 指令
正如您可能猜测的那样，`ENV`指令用于定义环境变量，这些变量将在从正在构建的映像创建的运行容器中设置。变量是使用典型的键值对定义的。一个 Dockerfile 可以有一个或多个`ENV`指令。以下是`ENV`指令语法:
```
# ENV instruction syntax
# This is the form to create a single environment variable per instruction
# Everything after the space following the  becomes the value
ENV  
# This is the form to use when you want to create more than one variable per instruction
ENV = ...
```
每个`ENV`指令将创建一个或多个环境变量(除非键名重复)。让我们看一下 Dockerfile 中的一些`ENV`指令:
```
# ENV instruction Dockerfile for Docker Quick Start
FROM alpine
LABEL maintainer="Earl Waud "
ENV appDescription This app is a sample of using ENV instructions
ENV appName=env-demo
ENV note1="The First Note First" note2=The\ Second\ Note\ Second \
note3="The Third Note Third"
ENV changeMe="Old Value"
CMD ["sh"]
```
使用此 Dockerfile 构建映像后，您可以检查映像元数据并查看已创建的环境变量:
![](img/e98f6d2e-906f-4c99-8a98-7fd5aceb10fc.png)
当使用`--env`参数运行容器时，可以设置(或覆盖)环境变量。在这里，我们看到这个特性在起作用:
![](img/572af022-9c53-496a-96e1-7e1c23a14b24.png)
重要的是要知道，使用`ENV`指令会在生成的映像中创建一个零字节大小的附加层。如果您要向映像中添加多个环境变量，并且可以使用支持用一条指令设置多个变量的指令形式，这样做只会创建一个额外的映像层，因此这是正确的方法。
# ARG 指令
有时在构建 Docker 映像时，您可能需要使用变量数据来定制构建。`ARG`指令是处理这种情况的工具。要使用它，您可以将`ARG`指令添加到您的 Dockerfile 中，然后当您执行构建命令时，您可以传递带有`--build-arg`参数的变量数据。`--build-arg`参数使用现在熟悉的键值对格式:
```
# The ARG instruction syntax
ARG [=]
# The build-arg parameter syntax
docker image build --build-arg [=] ...
```
您可以在 docker 文件中使用多个`ARG`指令，并在 docker 映像构建命令中使用相应的`--build-arg`参数。您必须在每次使用`--build-arg`参数时附上`ARG`说明。没有`ARG`指令，`--build-arg`参数在构建过程中不会被设置，你会得到一个警告信息。如果没有为现有的`ARG`指令提供`--build-arg`参数或者没有为`--build-arg`参数提供键值对的值部分，并且`ARG`指令包含默认值，那么变量将被赋予默认值。
请注意，在映像构建期间，即使`--build-arg`作为 docker 映像构建命令的参数包含在内，在 Dockerfile 中到达`ARG`指令之前，相应的变量不会被设置。换句话说，`--build-arg`参数的键值对的值将永远不会被设置，直到在 Dockerfile 中其对应的`ARG`行之后。
`ARG`指令中定义的参数不会保存到从创建的映像运行的容器中，但是，ARG 指令会在生成的映像中创建新的零字节大小的层。以下是使用`ARG`指令的教育示例:
```
# ARG instruction Dockerfile for Docker Quick Start
FROM alpine
LABEL maintainer="Earl Waud "
ENV key1="ENV is stronger than an ARG"
RUN echo ${key1}
ARG key1="not going to matter"
RUN echo ${key1}
RUN echo ${key2}
ARG key2="defaultValue"
RUN echo ${key2}
ENV key2="ENV value takes over"
RUN echo ${key2}
CMD ["sh"]
```
使用前面代码块中显示的内容创建一个 Dockerfile，并运行下面的构建命令，查看`ENV`和`ARG`指令的作用域如何发挥作用:
```
# Build the image and look at the output from the echo commands
 docker image build --rm \
 --build-arg key1="buildTimeValue" \
 --build-arg key2="good till env instruction" \
 --tag arg-demo:2.0 .
```
通过第一个`echo ${key1}`你会看到，即使`key1`有一个`--build-arg`参数，它也不会被存储为`key1`，因为有一个`ENV`指令有相同的键名。第二个`echo ${key1}`仍然如此，它在 ARG `key1`指令之后。当`ARG`和`EVN`指令具有相同的键名时，ENV 变量值总是赢家。
然后，你会看到第一个`echo ${key2}`是空的，即使它有一个`--build-arg`参数。它是空的，因为我们还没有到达`ARG key2`指令。第二个`echo ${key2}`将包含相应`--build-arg`参数的值，即使`ARG key2`指令中提供了默认值。最终的`echo ${key2}`将显示`ENV key2`指令中提供的值，尽管`ARG`中有默认值，也有通过`--build-arg`参数传入的值。再次，这是因为`ENV`总是胜过 ARG。
# ENV 和 ARG 的区别
同样，这里有一对具有类似功能的指令。它们都可以在映像构建期间使用，设置参数以便在其他 Dockerfile 指令中使用。可以使用这些参数的其他 Dockerfile 指令有`FROM`、`LABEL`、`COPY`、`ADD`、`ENV`、`USER`、`WORKDIR`、`RUN`、`VOLUME`、`EXPOSE`、`STOPSIGNAL`和`ONBUILD`。以下是在其他 Docker 命令中使用`ARG`和`ENV`变量的示例:
```
# ENV vs ARG instruction Dockerfile for Docker Quick Start
FROM alpine
LABEL maintainer="Earl Waud "
ENV lifecycle="production"
RUN echo ${lifecycle}
ARG username="35"
RUN echo ${username}
ARG appdir
RUN echo ${appdir}
ADD hello /${appdir}/
RUN chown -R ${username}:${username} ${appdir}
WORKDIR ${appdir}
USER ${username}
CMD ["./hello"]
```
有了这个 Dockerfile，您将需要为`appdir` `ARG`指令提供`--build-arg`参数，并为构建命令提供用户名(如果您想要覆盖默认值)。您也可以在运行时提供一个`--env`参数来覆盖生命周期变量。以下是您可以使用的可能的构建和运行命令:
```
# Build the arg3 demo image
docker image build --rm \
 --build-arg appdir="/opt/hello" \
 --tag arg-demo:3.0 .
# Run the arg3 demo container
docker container run --rm --env lifecycle="test" arg-demo:3.0
```
虽然`ENV`和`ARG`的指令看似相似，但实际上却大不相同。以下是由`ENV`和`ARG`指令创建的参数之间需要记住的主要区别:
*   env 持久化到运行的容器中，而 arg 不会。
*   参数使用相应的构建参数，而 env 不使用。
*   `ENV`指令必须包括一个键和值，`ARG`指令有一个键，但(默认)值是可选的。
*   环境变量比自变量更重要。
You should never use either `ENV` or `ARG` instructions to provide secret data to the build command or resulting containers because the values are always visible in clear text to any user that runs the docker history command.
# 用户指令