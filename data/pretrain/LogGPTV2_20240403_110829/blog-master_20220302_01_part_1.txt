## PostgreSQL + FDW + vector 插件加速向量检索 - 在不确定世界寻找确定答案 (例如图像相似)    
### 作者                                     
digoal                                                  
### 日期                                              
2022-03-02                                          
### 标签                              
PostgreSQL , 开源                   
----                                                   
## 背景    
向量: 简单的理解是一个number数组, 非结构化对象(图像、视频、音频等)经过转换可以成为N维的number数组, 包含了非结构化对象的特征, 针对数组可以进行识别、相似等搜索(向量检索).   
向量检索属于比较耗费CPU和IO的查询, 即使有索引也如此, 所以首先会想到的是怎么提升扩展性, 例如怎么用多机资源提高请求处理吞吐能力.   
本文介绍PostgreSQL postgres_fdw和vector插件的组合使用. 加速图像识别相似搜索, 但是还有一些并行的问题, 建议再和postgresql社区沟通一下fdw的问题.  目前看来性能最好的还是dblink异步调用的方式.  
当然, 如果单机用vector插件和向量索引就能满足你的需求, 就不需要看下去了.      
- 需要提醒一下, 一定要看看vector的ivfflat原理, 在造数据时考虑实际数据集的特征, 不要完全随机, 也不要完全一样的数据. 在创建索引时分几个桶、查询时找几个中心点的桶进行筛选, 都需要注意.  
其他方法亦可参考: citus, dblink异步, polardb for postgresql(https://github.com/ApsaraDB/PolarDB-for-PostgreSQL).     
## postgres_fdw 如何实现select并行   
https://www.postgresql.org/docs/devel/postgres-fdw.html  
1、关于SELECT语句WHERE条件的下推必须符合:    
- they use only data types, operators, and functions that are built-in   
- or belong to an extension that's listed in the foreign server's extensions option.   
- Operators and functions in such clauses must be IMMUTABLE as well.   
2、支持fdw分区表  
- 已支持  
3、支持fdw分区异步查询, 并行多fdw server同时查询   
- [《PostgreSQL 14 preview - FDW 支持异步执行接口, postgres_fdw 支持异步append - sharding 性能增强 - 未来将支持更多异步操作》](../202103/20210331_02.md)    
- 已支持, 但是不是所有请求都会开启async foreign scan. 详情请研究postgres_fdw代码.  
4、支持分区并行开关   
- 已支持  
5、sort 下推   
- 已支持  
6、merge sort append   
- 已支持  
7、limit 下推 或 fetch_size (默认是100)设置   
- 已支持  
## 例子  
部署vector插件  
```  
git clone https://github.com/pgvector/pgvector  
export PATH=/Users/digoal/pg14/bin:$PATH  
export PGDATA=/Users/digoal/data14  
export PGUSER=postgres  
export PGPORT=1922  
USE_PGXS=1 make  
make install  
```  
由于是本机测试, 所以配置一下密码登录认证  
```  
pg_hba.conf  
host    all             all             127.0.0.1/32            md5  
pg_ctl reload  
```  
创建角色   
```  
postgres=# create role test login encrypted password 'test123';  
CREATE ROLE  
```  
创建几个数据库(真实场景使用多机上不同的实例, 本文测试采用同一个实例中不同的database来模拟).  
```  
create database db0;  
create database db1;  
create database db2;  
create database db3;  
create database db4;  
postgres=# grant all on database db0,db1,db2,db3,db4 to test;  
GRANT  
\c db0;  
create extension postgres_fdw;  
create extension vector ;  
\c db1  
create extension vector ;  
\c db2  
create extension vector ;  
\c db3  
create extension vector ;  
\c db4  
create extension vector ;  
```  
db0 为查询入口, 所以在db0创建入口表、postgres_fdw插件、vector插件和fdw分区表.    
```  
db0=# \c db0 test  
You are now connected to database "db0" as user "test".  
db0=>   
CREATE TABLE tbl (id int, c1 vector(32), c2 text, c3 timestamp) PARTITION BY hash (id);  
CREATE INDEX idx_tbl_1 ON tbl USING ivfflat (c1 vector_l2_ops);  
SELECT * FROM tbl ORDER BY c1  '[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]' LIMIT 5;  
```  
db1,db2,db3,db4 / test role 登录   
```  
CREATE TABLE tbl (id int, c1 vector(32), c2 text, c3 timestamp);  
CREATE INDEX idx_tbl_1 ON tbl USING ivfflat (c1 vector_l2_ops);  
```  
db0  , 创建foreign server 开启异步请求, 设置插件参数(使得op可以下推). 配置user mapping.   
```  
\c db0 postgres  
db0=# show port;  
 port   
------  
 1922  
(1 row)  
create server db1 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '127.0.0.1', dbname 'db1', port '1922', async_capable 'true', extensions 'vector', batch_size '200', use_remote_estimate 'true');  
create server db2 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '127.0.0.1', dbname 'db2', port '1922', async_capable 'true', extensions 'vector', batch_size '200', use_remote_estimate 'true');  
create server db3 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '127.0.0.1', dbname 'db3', port '1922', async_capable 'true', extensions 'vector', batch_size '200', use_remote_estimate 'true');  
create server db4 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '127.0.0.1', dbname 'db4', port '1922', async_capable 'true', extensions 'vector', batch_size '200', use_remote_estimate 'true');  
grant all on FOREIGN server db1,db2,db3,db4 to test;  
CREATE USER MAPPING FOR test SERVER db1 OPTIONS (user 'test', password 'test123');  
CREATE USER MAPPING FOR test SERVER db2 OPTIONS (user 'test', password 'test123');  
CREATE USER MAPPING FOR test SERVER db3 OPTIONS (user 'test', password 'test123');  
CREATE USER MAPPING FOR test SERVER db4 OPTIONS (user 'test', password 'test123');  
```  
db0, 创建fdw分区表, 参数参考postgres_fdw帮助手册, 不一定要完全参照本文, 一定要理解清楚配置的目的(例如返回量大fetch_size也可以调大, 返回量小可以调小).   
```  
\c db0 test  