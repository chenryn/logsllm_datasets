[25] R. Khalil and A. Gervais.
Revive poc implementation on ethereum.
https://github.com/rami-khalil/revive.
[26] Eli Ben Sasson, Alessandro Chiesa, Christina Garman, Matthew Green, Ian Miers,
Eran Tromer, and Madars Virza. Zerocash: Decentralized anonymous payments
from bitcoin. In Security and Privacy (SP), 2014 IEEE Symposium on, pages 459–474.
IEEE, 2014.
[27] Nicolas van Saberhagen. Cryptonote v 2. 0. HYPERLINK https://cryptonote.
org/whitepaper. pdf, 2013.
Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind Narayanan, Joshua A
Kroll, and Edward W Felten. Sok: Research perspectives and challenges for
bitcoin and cryptocurrencies. In Security and Privacy (SP), 2015 IEEE Symposium
on, pages 104–121. IEEE, 2015.
[29] Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. A survey of attacks on
[28]
ethereum smart contracts (sok). In POST, 2017.
[30] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor. Mak-
ing smart contracts smarter. In Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security, pages 254–269. ACM, 2016.
[31] Pieter Wuille.
Elliptic curve schnorr-based signatures
https://scalingbitcoin.org/transcript/milan2016/schnorr-signatures.
[32] Matthew Green and Ian Miers. Bolt: Anonymous payment channels for decentral-
ized currencies. Technical report, Cryptology ePrint Archive, Report 2016/701,
2016.
[33] Bitcoinj. https://bitcoinj.github.io/working-with-micropayments.
[34] George B Dantzig. Origins of the simplex method. ACM, 1990.
[35] Leonid G Khachiyan. Polynomial algorithms in linear programming. USSR
Computational Mathematics and Mathematical Physics, 20(1):53–72, 1980.
[36] Narendra Karmarkar. A new polynomial-time algorithm for linear programming.
In Proceedings of the sixteenth annual ACM symposium on Theory of computing,
pages 302–311. ACM, 1984.
in bitcoin.
9 APPENDIX
9.1 Blockchain Background
9.1.1 Blockchain Transactions. Bitcoin transactions are sent
from so-called addresses to other addresses. An address is a unique
identi(cid:27)er (hash) of a public key. Only the owner of the correspon-
dent private key is eligible to sign an appropriate transaction which
allows to transfer monetary funds.
Interestingly, most currently proposed blockchains have a com-
plex process for evaluating transactions in order to allow for a
higher (cid:30)exibility and extensibility of the application scenarios6.
Bitcoin transactions are evaluated with a stack-based program-
ming language called Script. Mainly due to security reasons Script
only supports a limited instruction set. The limited instruction
set and the lack of an available high-level programming language
have encouraged the development of blockchain systems support-
ing more intuitive and expressible programming languages. While
there are several such systems (e.g., NXT, Clearmatics), Ethereum is
the most popular one. Ethereum, was introduced in the year 2013 by
Buterin [22], and supports a pseudo7 Turing complete coding sys-
tem. Its cryptocurrency is called ether and Ethereum supports two
kinds of addresses: (i) externally owned addresses (typically owned
by a user) and (ii) contract owned addresses. Ethereum programs
run on the Ethereum Virtual Machine (EVM) [17] and programs in
EVM code are referred to as smart contracts.
To avoid denial-of-service attacks, transactions are required to
pay a fee for their execution. In Bitcoin, each transaction can pay a
transaction fee, while in Ethereum, a transaction pays gas (also to
execute contracts).
6Bitcoin transactions follow the unspent transaction output (UTXO) model, while
Ethereum transactions are not UTXO based.
7Pseudo, because the smart contract execution is halted if insu(cid:28)cient funds are pro-
vided for the execution, i.e. insu(cid:28)cient gas.
9.1.2
Smart Contracts. Any Ethereum user is eligible to write
and publish a smart contract (or contract). Other users can then exe-
cute the smart contract that is recorded in a block which is appended
to the blockchain. Note that all information in the blockchain is pub-
licly available. To execute a contract, a user submits an Ethereum
transaction containing all information required to process the con-
tract. A miner can process the user transaction and commit it by
writing this transaction to a new block (possibly along with other
transactions). A valid block needs to be appended to the latest block
of the blockchain8. A transaction is considered completed, when
it has been added in a block. For security purposes, users should
wait for several block con(cid:27)rmations (i.e., several additional blocks
after the block containing the transaction), before considering a
transaction to be (cid:27)nal.
9.2 Smart Contracts
In this section we provide the function signatures and main vari-
ables of our smart contracts.
1 pragma solidity ^0.4.10;
2
3 contract RebalanceAvailabilityContract {
4
function verifySignature ( address pub , bytes32 h ,
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
uint8 v , bytes32 r , bytes32 s) {}
function verifyAllSignatures ( address [] pub ,
bytes32 h , uint8 [] v , bytes32 [] r , bytes32 []
s) {}
// Challenges can be answered within 5 blocks
uint constant CHALLENGE_VALIDITY = 5;
uint constant GAS_PRICE_IN_WEI = 25000000000 wei ;
// 2x sha3 , storage value change , storage value
load , transaction , data bytes
uint constant GAS_PER_CHALLENGE_RESPONSE = 60 +
5000 + 200 + 21000 + 68*(32) ;
// sha3 ( address ) , ecrecover , data bytes
uint constant GAS_PER_PARTICIPANT = 6 + 3000 +
68*(1 + 32*2 + 20) ;
mapping ( bytes32 => int ) challenge ;
// The issued challenge is subsidized by the
participant who raises it .
function submitChallenge (
address [] participants ,
bytes32 transactionMerkleTreeRoot ) payable
{}
function answerChallenge (
uint8 [] V ,
bytes32 [] R ,
bytes32 [] S ,
address [] participants ,
bytes32 transactionMerkleTreeRoot ) {}
function isChallengeSuccess ( bytes32 instanceHash )
returns ( bool ) {}
32 }
Listing 1: Smart contract de(cid:27)ned in challenge.sol.
8This is a simpli(cid:27)cation: miners “compete” on adding their own block to the top-most
block of the blockchain until they reach a consensus on which miner has succeeded.
// Blocks for grace period
uint constant DELTA = 10;
1 pragma solidity ^0.4.10;
2
3 contract PaymentChannelRebalanceable {
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
// Events
event EventInit () ;
event EventUpdate ( int r);
event LogBytes32 ( bytes32 b);
event LogAddress ( address a);
event LogInt ( int i);
event LogUInt ( uint ui );
event LogInts ( int [2] i);
event LogUInts ( uint [2] ui );
event LogBool ( bool b);
event EventPending ( uint T1 , uint T2 );
// Utility functions
modifier onlyplayers {}
function max ( uint a , uint b) internal returns ( uint
) {}
function min ( uint a , uint b) internal returns ( uint
) {}
function verifySignature ( address pub , bytes32 h ,
uint8 v , bytes32 r , bytes32 s) {}
function verifyMerkleChain ( bytes32 link , bytes32 []
chain , bool [] markleChainLinkleft ) {}
// /////////////////////////////
// State channel data
// /////////////////////////////
int bestRound = -1;
enum Status { OK , PENDING }
Status public status ;
uint deadline ;
// Constant ( set in constructor )
address [2] public players ;
mapping ( address => uint ) playermap ;
RebalanceAvailabilityContract public rac ;
// ///////////////////////////////////
// Payment Channel - Application specific data
// //////////////////////////////////
// State channel states
int [2] public credits ;
uint [2] public withdrawals ;
// Externally affected states
uint [2] public deposits ; // Monotonic , only
incremented by deposit () function
uint [2] public withdrawn ; // Monotonic , only
incremented by withdraw () function
function sha3int ( int r) constant returns ( bytes32 )
{}
function PaymentChannelRebalanceable (
RebalanceAvailabilityContract _rac ,
address [2] _players ) {}
EventInit () ;
}
// Increment on new deposit
function deposit () payable onlyplayers {}
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
// Increment on withdrawal
function withdraw () onlyplayers {}
82
83
// State channel update function when latest
change was due to rebalance
// State channel update function
function update ( uint [3] sig , int r , int [2]
_credits , uint [2] _withdrawals )
onlyplayers {}
// State channel update function when latest
change was due to rebalance
function updateAfterRebalance (
uint8 [] V ,
bytes32 [] R ,
bytes32 [] S ,
address [] participants ,
bytes32 [] transactionMerkleChain ,
bool [] markleChainLinkleft ,
int r ,
int [2] _credits ,
uint [2] _withdrawals )
onlyplayers {}
function updateAfterRebalanceChallenged (
address [] participants ,
bytes32 [] transactionMerkleChain ,
bool [] markleChainLinkleft ,
int r ,
int [2] _credits ,
uint [2] _withdrawals )
84
85
86
87
88
89
90
91
92
93
94
95
96
97 }
Listing 2: Smart contract de(cid:27)ned in channel.sol. Adapted from
the Sprites payment channel in [7].
onlyplayers {}
// Causes a timeout for the finalize time
function trigger () onlyplayers {}
function finalize () {}