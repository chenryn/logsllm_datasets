 **I'm submitting a ...** (check one with "x")
    [x] feature request
Currently it's very verbose to access route data or params from a service or
non active route. To simplify this we can introduce `RootActivatedRoute` with
additional props:
    class RootActivatedRoute extends ActivatedRoute {
        current: ActivatedRoute;
        currentSnapshot // for symmetry, but I never use it
    }
Every `ActivatedRoute` has a reference to the root `ActivatedRoute` so it will
be very simple and fast to update these props on every successful navigation.
Instead of
    this.router.events
          .filter(event => event instanceof NavigationEnd)
          .map(() => this.activatedRoute)
          .map(route => {
            while (route.firstChild) route = route.firstChild;
            return route;
          })
          .filter(route => route.outlet === 'primary')
          .mergeMap(route => route.data)
          .subscribe((data) => ...);
we will be able to do
    this.router.events
          .filter(event => event instanceof NavigationEnd)
          .mergeMap(() => this.activatedRoute.root.current.data)
          .subscribe((data) => ...);
Or we can even make `current` an `Observable` so we won't need to use router
events:
    this.activatedRoute.root.current
        .mergeMap(activatedRoute => activatedRoute.data)
        .subscribe((data) => ...);
It will work from any component or service.
Should be pretty easy to implement. What do you think @vicb @vsavkin ?