2022/4/29 02:46
Evernote Export
file:///C:/Users/jiushi/Desktop/JavaWeb 内存马技术归纳.html
1/12
环境:适用于tomcat
-------------------------------------------------------
前言:
对于各类Java 容器的内存马主要是需要获取context
为什么context 对象这么重要呢，
对于能达成的目的：context拥有当前中间件或框架处理请求、保存和控制servlet对象、保存和控制filter对象等功能的对象。
---------------------------------------------------------
前置知识:
getField
获取一个类的 ==public成员变量，包括基类== 。
getDeclaredField
获取一个类的 ==所有成员变量，不包括基类== 。
Field.setAccessible
成员变量为private，必须进行此操作。
tomcat Context官方文档:https://tomcat.apache.org/tomcat-8.0-doc/api/org/apache/catalina/Context.html
获取context部分
ServletContext servletContext =  request.getSession().getServletContext(); //获取ServletContext对象
Field appctx = servletContext.getClass().getDeclaredField("context"); //获取context成员变量
appctx.setAccessible(true); //值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查
ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext); //获取servletContext元素
Field stdctx = applicationContext.getClass().getDeclaredField("context");//获取context成员变量
stdctx.setAccessible(true); //值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查
StandardContext standardContext = (StandardContext) stdctx.get(applicationContext); //获取applicationContext元素
ServletContext servletContext = request.getSession().getServletContext(); //返回当前会话上下文并获取Servlet上下文
Field appctx = servletContext.getClass().getDeclaredField("context"); //获取类的声明字段
appctx.setAccessible(true);
ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);
Field stdctx = applicationContext.getClass().getDeclaredField("context");
stdctx.setAccessible(true);
StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);
Field Configs = standardContext.getClass().getDeclaredField("filterConfigs");
Configs.setAccessible(true);
Map filterConfigs = (Map) Configs.get(standardContext);
--------------------------------------------------------
context介绍:
Context元素代表一个web应用，运行在某个特定的虚拟主机上。
如Servlet Specification 2.2或以后版本中描述的那样，每个web应用基于一个Web Application Archive(WAR)文件，或者是一个目录，包含WAR文件解压后的内容。有关Web
Application Archive的更多信息，可以参考Servlet Specification和Tomcat 应用程序开发者指南。
通过将请求URI的最长可能前缀与每个Context的context路径进行匹配，Catalina选择相应的web 应用处理HTTP请求。一旦选定，根据web application deployment
descriptor 文件中定义的servlet映射，Context会选择一个正确的servlet来处理进来的请求。servlet映射必须定义在该web应用目录层次结构中的/WEB-INF/web.xml中。
你可以在一个Host元素中嵌套任意多的Context元素。每个Context的路径必须是惟一的，由path属性定义。另外，你必须定义一个context路径长度为0的Context，这个Context
称为该虚拟主机的缺省web应用，用来处理那些不能匹配任何Context的Context路径的请求。
除了在Host元素中嵌套Context元素以外，你也可以将它们存储在单个文件中（以.xml为后缀），放在$CATALINA_HOME/conf/[enginename]/[hostname]/目录下面。有关这方
面的更多信息，参考应用的自动发布。这种方法允许动态重新配置web应用，因为如果修改了conf/server.xml，就必须重新启动Tomcat。
参考链接:http://xstarcd.github.io/wiki/Java/tomcat_context_Elements_detail.html
--------------------------------------------------------
增加Servlet的方式
分为3个步骤:
    1.利用反射通过ApplicationContextFacade获取到StandardContext
    2.将Servlet程序封装到Wrapper
    3.将封装好的Wrapper增加到StandardContext中并添加地址映射
    servletshell
增加Filter
由于Filter在Servlet之前运行，因此可以不受URL的限制，甚至可以伪装成在对一个正常的Servlet进行访问
(测试不行)
增加Filter的方式分为4个步骤
1. 通过反射从ApplicationContextFacade中获取到当前的StandardContext，从StandardContext获取到filterConfigs
2. 封装Filter为FilterDef，并添加到StandContext中
3. 生成新的ApplicationFilterConfig并添加到filterConfigs中
4. 创建FilterMap并加入StandardContext中，为Filter确定适用的URL
原冰蝎内存马