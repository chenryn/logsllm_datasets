M. Shoaib, N. Vaish, M. D. Hill, and D. A. Wood, “The gem5 simulator,”
SIGARCH, vol. 39, no. 2, pp. 1–7, Aug. 2011.
[59] S. Li, Z. Yang, D. Reddy, A. Srivastava, and B. Jacob, “DRAMsim3: A
Cycle-Accurate, Thermal-Capable DRAM Simulator,” IEEE Computer
Architecture Letters, 2020.
[60] R. E. Wunderlich, T. F. Wenisch, B. Falsafi, and J. C. Hoe, “SMARTS:
Accelerating Microarchitecture Simulation via Rigorous Statistical Sam-
pling,” in ISCA, 2003, pp. 84–97.
[61] JEDEC Solid State Technology Association, “JEP300-1: Near-Term
DRAM Level Rowhammer Mitigation,” 2021.
[62] M. T. Inc. How Much Power Does Memory Use?
[63] T. Inc. Micron MT40A4G4JC-062E E 1z nm DDR4 Process Flow Full.
[64] L. Orosa, A. G. Yaglikci, H. Luo, A. Olgun, J. Park, H. Hassan,
M. Patel, J. S. Kim, and O. Mutlu, “A deeper look into rowhammer’s
sensitivities: Experimental analysis of real dram chips and implications
on future attacks and defenses,” in MICRO-54: 54th Annual IEEE/ACM
International Symposium on Microarchitecture, 2021, pp. 1182–1197.
[65] T. Bennett, S. Saroiu, A. Wolman, and L. Cojocar, “Panopticon: A
Complete In-DRAM Rowhammer Mitigation,” in DRAMSec, 2020.
[66] A. Tatar, C. Giuffrida, H. Bos, and K. Razavi, “Defeating Software
Mitigations against Rowhammer: A Surgical Precision Hammer,” in
RAID, 2018.
A. Impact of REF postponing and pulling-in: FEINTING-
APPENDIX
PostponingREFs
The DDR4 and DDR5 standards [29], [30] allow the memory
controller to postpone some REF commands (i.e., under heavy
DRAM activity) or to pull in a number REF commands (i.e.,
under idle DRAM activity). With the standard refresh rate in
DDR4, up to 8 REF commands can be postponed or pulled in,
and the maximum distance between two consecutive refreshes
can be up to 9× tREFI. Likewise, for DDR5 devices, up
up to 5× tREFI. The JEDEC consortium recommended to
to 4 REF commands can be postponed or pulled in, and the
maximum distance between two consecutive refreshes can be
disable REF postponing and pulling-in to reduce the impact
on in-DRAM Rowhammer mitigations [61]. Nonetheless, we
show how PROTRR can securely support REF postponing and
pulling-in by slighting modifying FEINTING.
Postponing and pulling-in are a relaxation of when REF
commands need to be sent to a DRAM device. That said,
Fig. 17: FEINTING for large TRF M . As the attacker sends activations, REF
can reduce RAA accounting only for RAAIMT activations. The exceeding value
eventually reaches RAAMMT, and m RFMs are sent by the controller.
even with postponing and pulling-in, a certain number of REF
commands needs to be sent to the DRAM device in a tREFW.
Given that the structure of the FEINTING is agnostic to when
REF commands are issued, the only remaining question is
whether it enables using fewer decoys. In both DDR4 and
DDR5, at the end of the tREFW, the attacker can abuse
postponing to maximize the number of tREFIs without any
REF commands, which we indicate by Pmax (1 when there is
no postponing).
This configuration has two implications. First, (Pmax−1)×V
can continuously hammer the victim for Pmax×tREFI. For
fewer decoys are needed compared to the original FEINTING
for both DDR4 and DDR5. Second, for DDR4, an attacker
DDR5, if RAAIMT is between 32 and 64, this does not change
the number of times the victim can be hammered other than
what is allowed by RFM postponing (as discussed in §V-D).
When RAAIMT is set to 72 or 80, however, the distance
between groups of RFM commands can be higher than those of
postponed REF commands: 6× RAAIMT> 5× TREF . Where,
in the default tREFW of DDR5 (32 ms), TREF is equal to 83.
In these cases, equally as in DDR4, the last round of the attack
is extended.
B. RFM postponing: FEINTING-PostponingRFMs
We now consider a more advanced memory controller that
postpones RFM commands. This means that RFM commands do
not have to be sent exactly after RAAIMT activations. Instead,
the controller has the flexibility to choose a better scheduling.
As explained in §IV, the only requirement set by the stan-
dard [30] is that RAA can never exceed TRF M= m× RAAIMT.
In other words, RFM commands can be postponed up to m
times. In a real scenario, it is very hard for an attacker to
influence the way RFM commands are scheduled. Nonetheless,
we assume the most favorable scheduling from an attacker’s
perspective. Depending on TRF M , there are two possibilities:
(i) TRF M ≤ TREF , where the same as in an earlier section
view; and (ii) TRF M> TREF , where FEINTING can further be
(§V-C) applies and nothing changes from an attacker’s point of
improved. We now analyze case (ii) considering an attacker who
is able to precisely influence the scheduling of RFM commands.
FEINTING for large TRF M. Postponing RFM commands
enables a lucky attacker to avoid the situation of costly RFM
commands triggered due to only a few extra activations, such
as the case in Figure 7-c, § V-C. Instead, RFM postponing
can be used to create blocks of RAAIMT activations similar
to FEINTING-Medium (Figure 7-b, § V-C). This postponing,
however, causes the RAA counter to increase, and at some
point, the memory controller will have to issue RFM commands.
Overall, two phenomena are happening simultaneously: a slow
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
751
RAAIMTREFREFREFACTs usedExtra ACTs accumulated++RFMsRAAIMTRAAIMT=RAAMMTaccumulation of extra activations that results in a series of
RFM, and a fast increase of RAA that is reduced immediately
upon refresh as shown in Figure 17. However, given that our
LtREF W activations are now equally distributed over intervals
of size RAAIMT, this is the optimal scenario for the attacker
similar to FEINTING-Medium.
An exception are the last few intervals of FEINTING in this
scenario. The last RFM commands can potentially be sent after
the tREFW, de facto removing them from the mitigation. These
activations can freely be used to increase the count of the last
decoys (needed for REF) and the victim. We consider RFM
postponing when configuring PROTRR as discussed in §VI and
our evaluation in §VII.
C. FEINTING against subarray parallelism: FEINTING-Subarrays
In the following, we describe how FEINTING can be
adapted for subarray TRR parallelism. To obtain the highest
Hammer max, the choice of aggressor rows used for FEINTING
must be optimized. We define S as the maximum number of
subarrays refreshed at each TRR event. We consider a TRR
mechanism that refreshes the highest rows from S different
subarrays, resulting in a volume of S× V . The number of rows
in each subarray is Rsb, typically 512 [32] resulting in 128
subarrays per bank.
Theorem 9 (Optimal aggressor distribution for subarray
parallelism). In the case of subarray TRR parallelism, the
aggressor rows have to be distributed equally over all the
subarrays in a bank to maximize Hammer max.
▸ Proof. The maximum number of decoys in a subarray is given
by Rsb× B/(B+ 1) (remember that B is the blast diameter of
the rows involved would be refreshed after Talive= Rsb/V ×
B/(B+ 1). If the aggressors are distributed over a number of
an aggressor). If only one subarray is used for FEINTING, all
subarrays lower or equal to S, the same result would apply
as all the rows would be refreshed in parallel. Moreover, as
the number of subarrays in the attack increases up to S, the
share of activations used for the victim is reduced as this
only increases the number of necessary decoys, lowering the
final Hammer max. Instead, targeting a number of subarrays
higher than S means that the parallel refresh will be saturated,
and some subarrays will be skipped (Figure 18). Similar to
FEINTING without subarray parallelism, we assume that for
equal counters, the attacker can control that the victim row to
have the lowest refresh priority. That is, a subarray is never
picked for a refresh if at least S different subarrays exist with
the same maximum row count. Because of FEINTING, all the
rows are equally often activated. Considering targeting S+ 1
subarrays and using all the possible decoys, it would mean
that in the first Talive TRR events, the S decoy subarrays are
completely refreshed, and in the last Talive event, the rows
from the victim subarrays are refreshed. In the same way as
the original FEINTING, any other distribution of activations
either induces a refresh on the victim subarray or is a loss
because a decoy is refreshed with a higher activation count
that could have otherwise been used for the victim. Therefore,
Symbol
tREFI
tREFW
B
Rthresh
Lattk
m
RAA
RAAMMT
RAAIMT
V
T
A
D(α)
Description
TABLE IV: Overview of used symbols.
Duration of a refresh interval (tREFW/8192) in µs.
Duration of a REF window, e.g. 64 ms (DDR4).
No. of rows affected by an aggressor (e.g., 2 or 4).
Number of hammer required to trigger a bit flip.
Number of total activations of an attack.
The value of the MR59 register in OP[7:6].
Rolling Accumulated ACT.
Ref. (§)
II-A
II-A
III
III
V-A
IV
IV
IV
Initial Management Threshold.
IV
TRR volume: no. of rows refreshed at every TRR event. V
No. of ACTs in between of two consecutive REFs. V
Rowhammer attack: a sequence of row activations
Maximum Management Threshold (RAAIMT× m).
d
TREF
V-A
Hammer max Max. hammer count a victim can reach before refresh. V-A
Total number of activations in a tREFW.
V-A
LtREF W
No. of rows used in FEINTING (decoys and victims). V-B
DT
No. of decoys that have not been refreshed at ACT a. V-B
Distance of TRR events expressed in REFs.
V-B
V-C
Number of activations between two consecutive REFs
that perform a TRR.
Number of activations between two consecutive RFMs. V-C
VI-B
Maximum number of TRR events in a tREFW.
No. of counters used to track victim rows.
VI-B
VII-A
Number of counters in a PROTRR summary.
VII-A
No. of banks of the system.
The max. number of tREFIs without any REFs.
VIII
TRF M
N
C
Sentries
Nbanks
Pmax
the distribution of rows across subarrays should still follow
the original theorems for FEINTING (see §V). To exploit the
saturation as much as possible, FEINTING must be performed
using all available subarrays. Figure 18 shows the structure of
FEINTING considering subarrays parallelism.
D. Impact of TRR Events
The TRR mechanism itself performs an activation when re-
freshing a row. This effect should be considered when deriving
Hammer max. In our study, the maximum number of activations
LtREF W is increased by the times TRR is performed and the
tREF W = LtREF W ×(1+ V/T). Moreover,
TRR volume: L′
effective TRR interval T′ is calculated as T′= T+ V .
because every T activations, V more TRRs are sent, the
E. Double-sided Rowhammer versus FEINTING
Double-sided Rowhammer is a technique to hammer a victim
row, where both its directly adjacent rows are alternatingly
activated. In PROTRR, this technique is avoided as it is not
beneficial for the attacker. To model the defender’s worst case,
we assume a closed-page policy for the DRAM device. This
means that a row is automatically precharged after activating
it. In other words, in an interval of T activations, a victim row
can be hammered T times by accessing only one aggressor.
This is the same amount of activations that can be achieved
with double-sided Rowhammer but with the difference that the
total number of victims affected is higher, and as such, the
total number of generated decoys. Consequently, for the same
number of TRR events where the victim is not refreshed, a
higher number of activations can be used against the victim,
resulting in a higher Hammer max.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
752
Fig. 18: FEINTING against subarray parallelism.
Fig. 19: The storage size for different possible setups and degrees of vulnerability in DDR4. The first line considers volumes of 2 and the second volumes of 4.
Setups with tREFW of 64 ms 32 ms are alternated to blast diameters of 2 and 4.
Fig. 20: Required storage size on DDR5 for various possible setups.
Fig. 22: RFMs sent relative to REFs and the increase in the tail latency for
all SPEC benchmarks. D={2;1}.
with references to the section where they were introduced.
Fig. 21: Maximum vulnerability supported in DDR5.
F. Extra figures
Extended storage size analysis. Figure 19 and Figure 20 show
the storage size required for PROTRR in different settings,
including a volume of 4 at each TRR event. Figure 21 reports
the maximum vulnerabilities that can be protected, in various
DDR5 configurations.
Details of increased RFM sent. Figure 22 shows the increase
in RFM sent and the increased tail latency for individual SPEC
benchmarks.
Symbols. In Table IV, we present an overview of symbols
753
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
...ACT+1+1+1+1ACT...ACT+1+1+1+1ACTACT+1+1...ACT+1+1+1+1ACT......(1) TRR subarray (2) TRR subarray ...+1+1ACT...+1+1ACTACT+1+1...ACT+1+1+1+1ACT......(1) TRR subarray (2) TRR subarray ......ACT+1+1...ACT+1+1+1+1ACT......(1) TRR subarraySubarrays512rowsACT+1+1...ACT+1+1+1+1ACTACT+1+1...ACT+1+1+1+1ACTACT+1+1...ACT+1+1+1+1ACT......(1) TRR subarrayPARALLELTRR eventsV=2(2) TRR subarray V=2AggressorDecoysTarget victimT  ACTsT  ACTs...Parallel saturationNormalFeintingRefreshedTRR Distance = 1TRR Distance = 3TRR Distance = 5TRR Distance = 7TRR Distance = 10TRR Distance = 15Size [KiB]V=4V=204080120160200B=2  tREFW=64msB=2  tREFW=32msB=4  tREFW=32msB=4  tREFW=64ms040801201602005k10k15k20k25kSupported device vulnerability05k10k15k20k25kSupported device vulnerability05k10k15k20k25kSupported device vulnerability05k10k15k20k25kSupported device vulnerability0 TRFM=32 d=1 m=1 TRFM=80 d=1 m=1 TRFM=32 d=1 m=6 TRFM=80 d=1 m=6 TRFM=32 d=2 m=1 TRFM=80 d=2 m=1 TRFM=32 d=2 m=6 TRFM=80 d=2 m=6a.Size [KiB]2550751001250b.25507510012502500500010000Device vulnerability2500500010000Device vulnerabilityV=2 B=2V=4 B=4Maximum vulnerability (Rthresh)Size [MiB]TRFM=80TRFM=32m=1m=6m=1m=6m=1m=6m=1m=6V=B=2V=B=4m=1m=6m=1m=6m=1m=6m=1m=6V=B=4V=B=2d=2d=1d=1d=2d=1d=1d=2d=260080010001200140016001800123400.20.40.60.81RFMs / REFs [%]Latency overhead [%]012345 6 6D=2D=1blenderbwavescactuBSSNcam4deepsjengexchange2fotonik3dgccimagicklbmleelamcfnabnamdomnetppparestperlbenchpovrayromswrfx264xalancbmkxzblenderbwavescactuBSSNcam4deepsjengexchange2fotonik3dgccimagicklbmleelamcfnabnamdomnetppparestperlbenchpovrayromswrfx264xalancbmkxzLatencyRFMsLatencyRFMs