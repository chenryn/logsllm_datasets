# Verified Security for Browser Extensions

**Authors:**
- Arjun Guha, Brown University
- Matthew Fredrikson, University of Wisconsin, Madison
- Benjamin Livshits, Microsoft Research
- Nikhil Swamy, Microsoft Research

**Conference:**
2011 IEEE Symposium on Security and Privacy

## Abstract
Features such as popup blocking and form filling in modern web browsers were initially introduced as third-party extensions. These extensions continue to enhance browser functionality in unexpected ways. However, powerful extensions require capabilities like cross-domain network access and local storage, which, if misused, can pose significant security risks. While several browsers attempt to limit extension capabilities, our empirical survey indicates that many extensions are over-privileged under existing mechanisms.

This paper introduces IBEX, a new framework for authoring, analyzing, verifying, and deploying secure browser extensions. Our approach leverages type-safe, high-level languages to program extensions against an API that provides access to various browser features. We propose using Datalog to specify fine-grained access control and data flow policies, thereby restricting the ways in which an extension can use the API and limiting its privileges over security-sensitive web content and browser resources. We formalize the semantics of these policies in terms of a safety property on the execution of extensions and develop a verification methodology to statically check extensions for policy compliance. Additionally, we provide visualization tools for policy analysis and compilers to translate extension source code into .NET bytecode or JavaScript, facilitating cross-browser deployment.

We evaluate our work by implementing and verifying 17 extensions with diverse features and security policies. These extensions are deployed in Internet Explorer, Chrome, Firefox, and C3, an experimental HTML5 platform, demonstrating the versatility and effectiveness of our approach.

## 1. Introduction

Like operating systems, IDEs, and other complex software systems, web browsers can be extended by third-party code. Extensions provide unforeseen new functionalities and are supported by all major browsers. Although exact counts are difficult to obtain, estimates suggest that about one-third of Firefox users (approximately 34 million) use extensions, while the 50 most popular Chrome extensions have each been downloaded several hundred thousand times.

Despite their popularity, extensions can pose significant risks to the security and reliability of the browser platform. Unlike JavaScript served on web pages, extensions can access cross-domain content, make arbitrary network requests, and use local storage. A malicious or buggy extension can easily compromise many of the security guarantees provided by the browser, such as the same-origin restriction. Additionally, extensions can affect page load times and browser responsiveness.

In response to these concerns, browser vendors have implemented various processes to control the distribution, installation, and execution of extensions. For example, Mozilla manages a hosting service for Firefox extensions, where newly submitted extensions undergo a community review process to identify violations of best practices. In contrast, Google Chrome extensions request specific privileges in an explicit manifest, and users are prompted to grant these privileges during installation.

While the Chrome model is a step in the right direction, our empirical study of over 1,000 Chrome extensions (Section II) reveals that this model is often ineffective in limiting extension privileges. For instance, nearly a third of the extensions surveyed request full privileges over data on arbitrarily many websites, and up to 60% have access to a user's entire browsing history. In many cases, the language of Chrome’s security manifests makes it impossible to state finer-grained policies to more precisely capture extension behavior.

To address these shortcomings, we propose IBEX, a new framework for authoring, analyzing, verifying, and deploying secure browser extensions. Our model caters to three main groups: extension developers, curators of extension hosting services, and end-users. This paper primarily focuses on browser extensions, but our work is also relevant to broader trends in software distribution, such as app stores for iOS, Windows, and Android devices, and web apps in Chrome OS. Automated software checking for both security and reliability is becoming a plausible alternative to manual vetting, as curators can reject applications that risk compromising the ecosystem. Our work also explores policies applicable to a growing number of HTML5 applications running on the web, desktop, mobile devices, or within a browser.

### 1.1 Overview of IBEX and Contributions

We discuss the key elements of IBEX (illustrated in Figure 1) along with our technical contributions:

- **Browser-agnostic API for extensions:** We provide developers with an API that exposes core browser functionality to extensions. Developers write extensions in high-level, type-safe languages amenable to formal analysis, such as .NET languages or JavaScript subsets.
- **Policy language for extension privileges:** We propose a logic-based policy language based on Datalog to specify fine-grained authorization and data flow policies on web content and browser state accessible by extensions.
- **Tools for curators of an extension hosting service:** We envision the distribution of extensions via a curated hosting service. Curators can use our policy analysis tools to determine whether an extension is fit for public distribution.
- **Formal semantics of policies and extension safety:** We define a formal notion of extension safety to specify when an extension complies with a policy. Our semantics account for an execution model involving arbitrary interleavings of extension code with untrusted scripts on a web page.
- **Static checking of extension safety:** We develop a methodology based on refinement typing to verify that extensions written in Fine, a dependently typed ML dialect, satisfy our safety condition. Static verification eliminates runtime security monitoring overhead and promotes robustness.
- **Cross-browser deployment:** We use multiple code generators implemented by the Fine compiler to allow the same extension source to be deployable in multiple browsers. We have deployed extensions in Internet Explorer 8, Chrome, Firefox, and C3, an experimental HTML5 platform.

### 1.2 Outline of the Paper

- **Section II:** Discusses existing extension security models.
- **Section III:** Presents an overview of the design of IBEX.
- **Section IV:** Discusses our policy language and its visualization tool.
- **Section V:** Formalizes the semantics of policies and our safety property.
- **Section VI:** Shows how to statically verify extensions using refinement type checking.
- **Section VII:** Presents our experimental evaluation and discusses the code of two extensions in detail.
- **Section VIII:** Discusses our support for cross-browser deployment of extensions.
- **Section IX:** Discusses limitations and future work.
- **Section X:** Discusses related work.
- **Section XI:** Concludes the paper.

## 2. Survey of Existing Extension Models

Extensions have access to browser resources not usually available to scripts running on web pages. Unlike scripts on web pages, which can only affect the page they are hosted on, extensions can read and modify arbitrary web pages and even customize the browser interface. Extensions are not subject to the same-origin policy, allowing them to communicate with arbitrary web hosts. With these capabilities, extensions, if malicious, pose a significant security risk. Moreover, since extensions interact with web pages, a malicious page could exploit a vulnerable extension to access capabilities that web pages do not ordinarily possess.

Below, we discuss the security mechanisms employed by Internet Explorer, Firefox, and Chrome to motivate the design of IBEX. Of these browsers, Chrome has the most security-aware extension system to date. We perform a detailed study of over 1,000 Chrome extensions to evaluate the effectiveness of its security model and conclude that many, if not most, extensions are unnecessarily over-privileged.

### 2.1 Internet Explorer’s Extension Model

Internet Explorer supports several extension mechanisms, with browser helper objects (BHOs) being the most commonly used. BHOs, typically native binaries, have virtually unrestricted access to IE’s event model and have been used by malware writers to create password-capturing programs and key loggers. For example, the ClSpring Trojan uses BHOs to install scripts that perform actions like adding and deleting registry values and downloading additional executable files, all transparent to the user. Even benign but buggy BHOs can open up exploits in an otherwise fully patched browser.

### 2.2 Firefox’s Extension Model

Firefox extensions are typically written in JavaScript and can modify Firefox in fairly unrestricted ways. This flexibility comes with few security guarantees. Extensions run with the same privilege as the browser process, so a malicious extension can cause arbitrary damage. Firefox relies on a community review process to determine which extensions are safe, and only approved extensions are added to Mozilla’s curated gallery. However, reviews are error-prone, and malicious extensions can sometimes be accidentally added. An example is the Mozilla Sniffer extension, which was downloaded close to 2,000 times before being removed from the gallery after it was deemed malicious.

### 2.3 Chrome’s Extension Model

Google Chrome extensions are written in JavaScript and hosted on extension pages, with access to APIs not available to web pages. Extension pages run in the context of the extension process, separate from the browser process, and can access and augment the browser UI. They can register to listen to special browser events like tab switching and window closing. Extension manifests specify the resources and capabilities required. When a user tries to install an extension, Chrome reads the manifest and displays a warning. Figure 2 shows the manifest of the Twitter Extender extension and the warning raised by Chrome before installation. In this example, the manifest requests read and write privileges over all content on specific domains and access to events related to browser tab manipulations.

---

**Figure 2: A fragment of Twitter Extender’s manifest and the dialog that prompts a user for access privileges when the extension is installed**

| Name | Behavior |
|------|----------|
| Google Reader client | ... |
| Gmail Checker Plus | ... |
| Bookmarking | ... |
| Dictionary lookup | ... |
| JavaScript toolbox | ... |

---

This table provides a summary of some of the extensions and their behaviors, highlighting the need for fine-grained control over their privileges.