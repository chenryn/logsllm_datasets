#BHUSA @BlackHatEvents
Blasting Event-Driven Cornucopia: 
WMI-based User-Space Attacks 
Blind SIEMs and EDRs
Claudiu Teodorescu
Andrey Golchikov
Igor Korkin
#BHUSA @BlackHatEvents
Information Classification: General
The Binarly Team
Claudiu “to the rescue”  Teodorescu – @cteo13
 Digital Forensics, Reverse Engineering, Malware & Program Analysis
 Instructor of Special Topics of Malware Analysis Course on BlackHat USA 
 Speaker at DEF CON, BSidesLV, DerbyCon, ReCon, BlackHat, author of WMIParser
 Andrey  “red plait”  Golchikov – @real_redp 
 More than 20 years in researching operating system security and reversing Windows Internals 
 Speaker at BlackHat, author of WMICheck
 redplait.blogspot.com
Igor Korkin – @IgorKorkin
 PhD, Windows Kernel Researcher 
 Speaker at CDFSL, BlackHat, HITB, SADFE, Texas Cyber Summit, author of MemoryRanger
 igorkorkin.blogspot.com 
#BHUSA @BlackHatEvents
Information Classification: General
Agenda
 Windows Management Instrumentation (WMI)
 Architecture and features
 Abusing WMI by attackers: MITRE ATT&CK and malware samples
 Applying WMI for defenders: academic and practical results
 Attacks on WMI blind the whole class of EDR solutions
 Overview of existing attacks on WMI
 Attacks on user- and kernel- space components
 WMICheck detects attacks on WMI
 WMI sandboxing attack
 MemoryRanger prevents the WMI sandboxing
#BHUSA @BlackHatEvents
Information Classification: General
Windows Management Instrumentation (WMI)
Architecture
#BHUSA @BlackHatEvents
Information Classification: General
WMI provider is a user-mode COM DLL or kernel driver
Enumerates WMI providers, the DLLs that back the provider, and the classes hosted by the provider by Matt Graeber
Windows 11 includes over 4000 built-in WMI providers:
• BIOS\UEFI
• OS and Win32
• WMI, ETW
• Disks and Files
• Registry
• Network and VPN
• Encryption 
• Security Assessment
• Hyper-V
• Microsoft Defender:
• Antimalware
• DeviceGuard
• Hardware:
• Multimedia (sound, graphics)
• TPM 
• Power and Temp Management
netnccim.mof
#BHUSA @BlackHatEvents
Information Classification: General
WMI Events
WMI is great for both attackers and defenders
Trigger on a multitude of events to perform a certain action
1.
Filter – a specific event to trigger on
2.
Consumer – an action to perform upon the firing of a filter
3.
Binding – link between Filter and Consumer
Intrinsic Events - instances of a class that is mainly derived from  __InstanceCreationEvent, 
__InstanceModificationEvent, or __InstanceDeletionEvent and are used to monitor a resource represented by 
a class in the CIM repository; polling interval required for querying which may lead to missing events
Extrinsic Events - instances of a class that is derived from the __ExtrinsicEvent class that are generated by 
a component outside the WMI implementation (monitoring registry, processes, threads, computer shutdowns 
and restarts, etc. )
#BHUSA @BlackHatEvents
Information Classification: General
WMI Filters – When it will happen?
An instance of the __EventFilter WMI Class to specify which event are delivered to the bound 
consumer
•
EventNamespace – describes the namespace the events originate (usually ROOT\Cimv2)
•
QueryLanguage - WQL
•
Query – describes the type of event to be filter via a WQL query 
WMI Query Language(WQL) 
SELECT [PropertyName | *] FROM [ ClassName] WITHIN [PollingInterval] 
SELECT [PropertyName | *] FROM [ ClassName] 
WMI Query Language(WQL) Examples
SELECT * FROM __InstanceCreationEvent Within 10 WHERE TargetInstance ISA "Win32_Process" AND Targetinstance.Name = 
"notepad.exe“
SELECT * FROM RegistryKeyChangeEvent WHERE Hive=“HKEY_LOCAL_MACHINE” AND 
KeyPath=“SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run”
#BHUSA @BlackHatEvents
Information Classification: General
WMI Consumers – What will happen?
Defines the action to be carried out once a bound filter was triggered
Standard Event consumers (inherit from __EventConsumer):
•
save to file (LogFileEventConsumer)
•
run a script (ActiveScriptEventConsumer)
•
log into EventLog (NTEventLogEventConsumer)
•
use network (SMTPEventConsumer)
•
run a script (CommandLineEventConsumer)
Persistence & Code Execution in WMI repository in three steps:
1.
Create filter, instance of __EventFilter, to describe the event to trigger on
2.
Create consumer, instance of __EventConsumer, to describe the action to perform
3.
Create binding, instance of __FilterToConsumerBinding, to link filter to consumer
#BHUSA @BlackHatEvents
Information Classification: General
WMI client binds filter and consumer to monitor events
EventViewerConsumer
Message about service update
Message about service update
Message about service update
The installed filter is 
bound to the 
consumer to monitor 
services-related events
Add a filter, consumer 
and bind them
Query WMI about 
monitored events
Remove the filter, 
consumer and their bind
Windows Services
A new service 
is installed
An 
event
...
✔
WMI Service
WMI client
#BHUSA @BlackHatEvents
Information Classification: General
CIM Repository
Database Location: %WBEM%\Repository
Format of the CIM Repository is undocumented:
• FireEye FLARE team reversed the file format 
• Whitepaper authored by Ballenthin, Graeber, Teodorescu
• Forensic Tools: WMIParser, python-cim
#BHUSA @BlackHatEvents
Information Classification: General
WMI Forensics: logical to physical abstraction
#BHUSA @BlackHatEvents
Information Classification: General
Firmware related WMI Forensics
#BHUSA @BlackHatEvents
Information Classification: General
Firmware WMI Querying via PS (1/3)
#BHUSA @BlackHatEvents
Information Classification: General
Firmware WMI Querying via PS (2/3)
#BHUSA @BlackHatEvents
Information Classification: General
Firmware WMI Querying via PS (3/3)
#BHUSA @BlackHatEvents
Information Classification: General
WMI used by both defenders and attackers
#BHUSA @BlackHatEvents
Information Classification: General
WMI leveraged by attackers
Attackers can leverage the WMI ecosystem in a multitude of ways:
•
Reconnaissance: OS information, File System, Volume, Processes, Services, Accounts, Shares, Installed Patches
•
AV Detection: \\.\ROOT\SecurityCenter[2]\AntiVirusProduct
•
Fileless Persistence: Filter and Consumer binding
•
Code execution: Win32_Process::Create, ActiveScriptEventConsumer, CommandLineEventConsumer, etc
•
Lateral movement: Remotely create a WMI class to transfer data via network
•
Data storage: Store data in dynamically created classes
•
C&C communication: Remotely create or modify a class to store/retrieve data
#BHUSA @BlackHatEvents
Information Classification: General
WMI – Persistence
Event
#BHUSA @BlackHatEvents
Information Classification: General
Evil WMI Class stores 
malware that is executed 
by a consumer
WMI – Code Execution
#BHUSA @BlackHatEvents
Information Classification: General
WMI on Twitter
#BHUSA @BlackHatEvents
Information Classification: General
WMI Forensics Tools
#BHUSA @BlackHatEvents
Information Classification: General
Tools used in our WMI Research
WBEMTEST
• Built-in in Windows since 2000’
• User-friendly
Scripting (VBScript\JScript\PS)
• Add/query/remove
• __EventFilter
• EventViewerConsumer
• __FilterToConsumerBinding
Third-party WMI explorers:
• ver 2.0.0.2 by Vinay Pamnani (@vinaypamnani/wmie2)
• ver 1.17c by Alexander Kozlov (KS-Soft)
Our own developed WMI client (receive_wmi_events.exe)
• C++ based 
• Register a IWbemObjectSink-based callback
• Print recently launched processes
#BHUSA @BlackHatEvents
Information Classification: General
ATTACKS ON WMI – THE BIG PICTURE
#BHUSA @BlackHatEvents
Information Classification: General
Threat Modeling WMI
#BHUSA @BlackHatEvents
Information Classification: General
Why attacks on WMI are so dangerous? 
• These attacks have existed and been unfixed for more than 20 years. 
• WMI service is not a critical app: it does not have PPL or trust label.
• Neither EDR solution nor PatchGuard/HyperGuard can detect these attacks.
• Windows Defender fails to detect attacks on WMI as well.
• WMI attacks can be implemented via user-mode code and by applying the 
similar privilege level as WMI service.
• All these attacks are architectural flaws and cannot be fixed easily.
#BHUSA @BlackHatEvents
Information Classification: General
Attacks on WMI files and configs in registry
WMI Files on the disk
Control apps: EXE, DLLs
 %SystemRoot%\System32\wbem\
 %SystemRoot%\System32
User-mode Providers
 %SystemRoot%\system32\WBEM\
*.MOF || *.DLL
Kernel-mode Providers
 %SystemRoot%\system32\*.SYS
WBEM Repository files
 %SystemRoot%\system32\
 INDEX.BTR
 MAPPING1.MAP
 MAPPING2.MAP
 MAPPING3.MAP
 OBJECTS.DATA 
WMI Settings in registry
WinMgmt service config
HKLM\System\CurrentControlSet\
Services\Winmgmt\
WMI and CIMOM Registry config
 HKEY_LOCAL_MACHINE\
SOFTWARE\Microsoft\Wbem\*
WMI Providers GUID SD
HKLM\SYSTEM\CurrentControlSet\
Control\WMI\Security\{GUIDs}
Other configs: OS, OLE & COM etc 
 HKLM\SYSTEM\Setup\
SystemSetupInProgress, 
UpgradeInProgress
 HKEY_LOCAL_MACHINE\
SOFTWARE\Microsoft\Ole
 HKLM\SOFTWARE\Microsoft\COM3
 HKCR\CLSID\{GUIDs}
Modify content
Remove value
Restrict access
Attacker’s 
App
#BHUSA @BlackHatEvents
Information Classification: General
wbemcore.dll
KEY: 
HKLM\SOFTWARE\Microsoft\Wbem\CIMOM
Value Name: EnableEvents
Default Data: 1
Attack: change data to 0 and restart WMI
ConfigMgr::InitSystem()
InitSubsystems()
InitESS()
EnsureInitialized()
CreateInstance()
Attacking WMI registry config (1/2)
A new WMI client 
#BHUSA @BlackHatEvents
Information Classification: General
wbemcore.dll
Result: 
• Event SubSystem (ESS) is disabled
• WMI client cannot receive events
KEY: 
HKLM\SOFTWARE\Microsoft\Wbem\CIMOM
Value Name: EnableEvents
Default Data: 1
Attack: change data to 0 and restart WMI
Attacking WMI registry config (2/2)
#BHUSA @BlackHatEvents
Information Classification: General
WMI Infrastructure in the user space
WMI Executable Infrastructure 
in the user-mode space
• WMI is implemented by Winmgmt service 
running within a SVCHOST process.
• It runs under the "LocalSystem" account.
• It has no self-protection nor integrity check 
mechanisms
• It runs without PPL (or trustlet protection) 
WinMgmt
(Windows Service)
SvcHost
(Windows Process)
• wbemcore.dll
• repdrvfs.dll
• wbemess.dll
WMI Infrastructure
#BHUSA @BlackHatEvents
Information Classification: General
WMI Infrastructure in the user space
WMI Executable Infrastructure 
in the user-mode space
• WMI is implemented by Winmgmt service and 
runs in a SVCHOST host process.
• It runs under the "LocalSystem" account.
• It has no self-protection nor integrity check 
mechanisms
• It runs without PPL (or trustlet protection) 
WinMgmt
(Windows Service)
SvcHost
(Windows Process)
• wmisvc.dll
• wbemcore.dll
• repdrvfs.dll
• wbemess.dll
WMI Infrastructure
#BHUSA @BlackHatEvents
Information Classification: General
Template of all user mode attacks on WMI
#BHUSA @BlackHatEvents
Information Classification: General
Memory
Attacks on WMI data (1/9)
some_wmi.dll
#BHUSA @BlackHatEvents
Information Classification: General
Attacks on WMI data (2/9)
some_wmi.dll
Memory
#BHUSA @BlackHatEvents
Information Classification: General
Attacks on WMI data (3/9)
some_wmi.dll
A new connection 
A new event/filter
Memory
#BHUSA @BlackHatEvents
Information Classification: General
Attacks on WMI data (4/9)
some_wmi.dll
A new connection 
A new event/filter
Memory
#BHUSA @BlackHatEvents
Information Classification: General
Attacks on WMI data (5/9)
some_wmi.dll
A new connection 
A new event/filter
Create a new connection
Register a filter/event
Memory
#BHUSA @BlackHatEvents
Information Classification: General
Attacks on WMI data (6/9)
some_wmi.dll
A new connection 
A new event/filter
Clear global_Flag
Attacker’s 
App
Memory
#BHUSA @BlackHatEvents
Information Classification: General
Attacks on WMI data (7/9)
some_wmi.dll
A new connection 
A new event/filter
Clear global_Flag
Attacker’s 
App
Memory
#BHUSA @BlackHatEvents
Information Classification: General
Attacks on WMI data (8/9)
some_wmi.dll
A new connection 
A new event/filter
Clear global_Flag
Attacker’s 
App