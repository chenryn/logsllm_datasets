are proven to be weak and unpractical for effective protection
to user’s private data [43]. Our ﬁndings including the over-
sharing and third-party aggressive data collection highlight the
necessity of ﬁne-grained access controls over these private
data. For example, alerting users with detailed private data
leakage information by third-party library at runtime.
Admittedly, ClueFinder does have limitations. For instance,
since ClueFinder heavily relies on semantics in app code to dis-
cover possible private data, obfuscation may help adversaries
to evade our analysis, as semantics including strings or method
names are helpless for those cases. However, as mentioned
in our evaluation (See section IV), given that most apps do
not obfuscate the entire code base, ClueFinder is still a very
practical approach of discovering private data at a large-scale.
Besides, the effectiveness of ClueFinder can be further
improved from several aspects. (1) Find more semantic re-
sources in the app to improve the coverage of ClueFinder.
Current implementation of ClueFinder only consider seman-
tics from method names, variable names and string con-
face-
stants. Other
book.userInfo.facebookUserProﬁle) may also provide abundant
semantics. (2) Find more features in app code to improve
the precision of the SVM classiﬁer. E.g., features at
the
caller/callee of the candidate statements may also help to
decide if it contains sensitive data.
information like package name (e.g.,
What’s more, our measurement results for privacy leakage
(Section V-B) indeed tell if a speciﬁc private data have been
accessed by third-party libraries, while the results need further
pruning: First, the measurement did not conﬁrm if all such
private data accessed by third-party libraries are indeed leaked
out at a large scale. Instead, as mentioned in Section V-B,
we manually validated a small set of apps and conﬁrmed
over half of them involved in privacy leakage, as a lower-
bound of the actual leakage scale. Although it is possible
to give a further static taint analysis by assigning network
APIs as the ﬁnal sinks, the result may not be feasible due
to the fundamental limitation of static analysis approach (e.g.,
heavy-weight and less precise). Further more, our system
ClueFinder, was designed to ﬁnd more sensitive data sources.
Serving this purpose, our approach achieves a precision of
91.5% (Section IV-B). The measurement of privacy leakage
to third-party libraries is just a demonstration of how our
technique can be used. Second, our current approach can
not automatically distinguish if a given access by third-party
libraries is reasonable, though our manual analysis shows that
most of such access to private data is suspicious. Further
analysis could utilize semantics from app UI, app descriptions
and many other possible sources to determine if such access is
benign or malicious. An access is regarded as malicious only
if there is no matched UI or app description for the private
data access in apps.
VII. RELATED WORK
Privacy leakage detection. Effective privacy leakage detection
methods in Android platform have been studied for a long
time. Both static [16], [24] and dynamic [23] taint analysis
techniques are developed and widely used to track private data.
However, all these approaches only take into consideration
ﬁxed System APIs as sensitive data sources, like IMEI, phone
number, etc. An exception is SUSI [35] that identiﬁes more
privacy sources in Android by using machine-learning to
analyze Android system libraries. MudFlow [17] leverages
such sources labelled by SUSI to mine apps for abnormal usage
of sensitive data in mobile apps. However, these data are still
walking around APIs and are mainly controlled by system.
Further, UIPicker [32] and SUPOR [25] propose different
approaches to identify sensitive data from app UIs,
these
approaches identify sensitive data from user input. UIPicker
uses a SVM classiﬁer to judge if a given element in a UI
is privacy-critical or not, by learning only semantic features
(e.g., if a set of privacy-related keywords appear simultane-
ously). In contrast, ClueFinder pipes the code structure as a
feature to a SVM classiﬁer to locate private data within app
codes. These approaches mentioned above can not completely
cover all private data identiﬁed by ClueFinder. BidText [26]
introduces a bi-directional data propagation mechanism for
detecting privacy leaks. Different from ours, BidText only
detects whether a speciﬁc private data is leaked to system logs
or network like HTTP requests, regardless of its responsibility.
By comparison, our work focuses on the measurement against
privacy leakage to third-party libraries, that is more helpful
to the understanding of real world threats resulted from such
privacy leakages. Similar to ClueFinder, Recon [36] detects
the leakage of a wide range of users’ private data, which
is called personal
identiﬁable information (PII) by Recon.
However, different from ClueFinder in both approaches and
purposes, Recon employs a dynamic analysis over mobile apps
to directly conﬁrm leaks by monitoring network trafﬁc, while
ClueFinder focuses on discovering private sources through its
static analysis over decompiled app code. Also, Recon directly
enables users to view PII leaks from network ﬂows, while
ClueFinder provides a basic tool for other existing approaches
to detect more privacy leaks in a static way.
NLP analysis over mobile apps. There are lots of works
utilizing NLP techniques to conduct semantic-based analysis
against mobile apps for different purposes in the ﬁeld of mobile
security. Whyper [33] and AutoCog [34] inspect if a permis-
sion request is reasonable by analyzing its app descriptions.
Similar to ClueFinder, they use dependency relation parsing
to understand whether a given app contains descriptions about
its permission usage. BidText [26] introduces dependency
relation parsing to decide if a phrase or sentence is related
to private data, however, it only excludes speciﬁc keywords
with imperative negation (e.g., “you should not”) for labelling
sensitive data. AsDroid [27] detects if a sensitive operation
(e.g., sending SMS) matches its contents in the user interface,
for identifying suspicious behaviors within apps. UIPicker [32]
also utilizes some basic NLP techniques (e.g., stemming for
keywords) as its pre-processing step for analysing textual
resources in app UI for locating private information. However,
both AsDroid and UIPicker did not consider dependency
parsing over sensitive keywords within the sentence,
thus
may introduce false positives for recognizing privacy-related
entities. All
these approaches can further take advantages
from ClueFinder, by employing a more comprehensive NLP
analysis over app code or layout resources to improve their
effectiveness.
VIII. CONCLUSION
In this paper, we give our research on detecting privacy
leakage on mobile apps at a large-scale. To address the
main challenge that many new types of private data (e.g.,
sensitive data on server-side) can not be effectively identiﬁed
by traditional approaches, we propose ClueFinder, a new tech-
nique for sensitive data source discovery. ClueFinder leverages
semantic information from app code, together with their unique
program structures of their context to accurately and efﬁciently
ﬁnd privacy-related data within a given app. The evaluation
results showed ClueFinder achieves a very high precision and
outperforms similar existing work to a large extent. Also,
using this technique, we investigated the potential information
exposure to third-party libraries over 445,668 apps with a
series of ﬁndings. These ﬁndings help better understand the
privacy exposure risk and highlight the importance of data
protection in today’s software composition.
ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers and
our shepherd Chris Kanich for their insightful comments that
helped improve the quality of the paper. We also thank Tongxin
Li from Peking University, Nan Zhang from IU, and Li Tan
for their assistance in our experiments. This work is funded in
part by the National Program on Key Basic Research (NO.
the National Natural Science Foundation
2015CB358800),
of China (61602121, U1636204, 61602123),
the Shanghai
Sailing Program under Grant 16YF1400800. The IU author is
supported in part by the NSF CNS-1527141, 1618493, ARO
W911NF1610127 and Samsung gift fund.
REFERENCES
sdk :
co.inset.sdk,” https://www.youtube.com/watch?v=
“Analytic
sV0GwIl4oWs, accessed: 2017-08-10.
“Bidtext-released
version,”
bidtext, accessed: 2017-08-10.
“Google privacy policy,” https://www.google.com/policies/privacy/, ac-
cessed: 2017-08-10.
https://bitbucket.org/hjjandy/toydroid.
[1]
[2]
[3]
14
Linguistics-Volume 1. Association for Computational Linguistics, 2003,
pp. 423–430.
[30] W. Meng, R. Ding, S. P. Chung, S. Han, and W. Lee, “The price of
free: Privacy leakage in personalized mobile in-app ads,” in Proc. of
NDSS’16, 2016.
[31] T. Mikolov, I. Sutskever, K. Chen, G. S. Corrado, and J. Dean,
“Distributed representations of words and phrases and their composi-
tionality,” in Advances in neural information processing systems, 2013,
pp. 3111–3119.
[32] Y. Nan, M. Yang, Z. Yang, S. Zhou, G. Gu, and X. Wang, “Uipicker:
User-input privacy identiﬁcation in mobile applications,” in 24th
USENIX Security Symposium, 2015, pp. 993–1008.
[33] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie, “Whyper: Towards
automating risk assessment of mobile applications.” in USENIX Security
Symposium, vol. 13, no. 20, 2013.
[34] Z. Qu, V. Rastogi, X. Zhang, Y. Chen, T. Zhu, and Z. Chen, “Autocog:
Measuring the description-to-permission ﬁdelity in android applica-
tions,” in Proc. of ACM CCS’14, 2014, pp. 1354–1365.
[36]
[35] S. Rasthofer, S. Arzt, and E. Bodden, “A machine-learning approach
for classifying and categorizing android sources and sinks,” in Proc. of
NDSS’14, 2014.
J. Ren, A. Rao, M. Lindorfer, A. Legout, and D. Choffnes, “Recon:
Revealing and controlling pii
leaks in mobile network trafﬁc,” in
Proceedings of the 14th Annual International Conference on Mobile
Systems, Applications, and Services. ACM, 2016, pp. 361–374.
J. Rubin, M. I. Gordon, N. Nguyen, and M. Rinard, “Covert communi-
cation in mobile applications (t),” in Automated Software Engineering
(ASE),30th IEEE/ACM International Conference. IEEE, 2015, pp. 647–
657.
[37]
[38] S. Son, D. Kim, and V. Shmatikov, “What mobile ads know about
mobile users,” in Proc. of NDSS’16, 2016.
[39] E. Steel, C. Locke, E. Cadman, and B. Freese, “How much is your
personal data worth,” 2013.
[40] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Inves-
tigating user privacy in android ad libraries,” in Workshop on Mobile
Security Technologies (MoST), 2012, p. 10.
[41] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. A.
Gunter, and K. Nahrstedt, “Identity, location, disease and more: In-
ferring your secrets from android public resources,” in Proceedings of
the 2013 ACM SIGSAC conference on Computer & communications
security. ACM, 2013, pp. 1017–1028.
[42] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang, “Hey, you, get off of
my market: detecting malicious apps in ofﬁcial and alternative android
markets.” in NDSS, vol. 25, no. 4, 2012, pp. 50–52.
[43] S. Zimmeck, Z. Wang, L. Zou, R. Iyengar, B. Liu, F. Schaub, S. Wilson,
N. Sadeh, S. M. Bellovin, and J. Reidenberg, “Automated analysis of
privacy requirements for mobile apps,” in Proc. of NDSS’17, 2017.
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
http://www.mopub.com/resources/docs/
“Inmobi,” http://inmobi.com, accessed: 2017-08-10.
“Ironsec - user proﬁling function,” http://www.ironsrc.com/atom/
user-proﬁling/(cid:105), accessed: 2017-08-10.
“Meet appboy - mobile engagement marketing tech startup,” https://
www.appboy.com/about/, accessed: 2017-08-10.
“Mixpanel,” https://mixpanel.com, accessed: 2017-08-10.
“mopub,”
mopub-ui-account-setup/creating-managing-orders-and-line-items/
line-item-targeting/(cid:105), accessed: 2017-08-10.
“Proguard - the open source optimizer for java bytecode,” https://www.
guardsquare.com/en/proguard, accessed: 2017-08-10.
“Requesting
permissions/requesting.html, accessed: 2017-08-10.
“scikit-learn,” http://scikit-learn.org/, accessed: 2017-08-10.
“Sharesdk
ShareSDK/android, accessed: 2017-08-10.
“Snaptee: T-shrit design,” https://play.google.com/store/apps/details?id=
co.snaptee.android, accessed: 2017-08-10.
“The-paper-news,” http://www.thepaper.cn/, accessed: 2017-08-10.
“Tinder,” https://play.google.com/store/apps/details?id=com.tinder, ac-
cessed: 2017-08-10.
https://developer.android.com/training/
http://www.mob.com/downloadDetail/
permissions,”
for
android,”
[16] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise context,
ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for android
apps,” in Proceedings of
the 35th ACM SIGPLAN Conference on
Programming Language Design and Implementation, 2014.
[17] V. Avdiienko, K. Kuznetsov, A. Gorla, A. Zeller, S. Arzt, S. Rasthofer,
and E. Bodden, “Mining apps for abnormal usage of sensitive data,”
in Proceedings of
the 37th International Conference on Software
Engineering-Volume 1.
IEEE Press, 2015, pp. 426–436.
[18] M. Backes, S. Bugiel, and E. Derr, “Reliable third-party library detec-
tion in android and its security applications,” in Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2016, pp. 356–367.
[19] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan, “Mockdroid: trading
privacy for application functionality on smartphones,” in Proceedings
of the 12th workshop on mobile computing systems and applications.
ACM, 2011, pp. 49–54.
[20] S. Bugiel, S. Heuser, and A.-R. Sadeghi, “Flexible and ﬁne-grained
mandatory access control on android for diverse security and privacy
policies.” in USENIX Security Symposium, 2013, pp. 131–146.
[21] Y.-W. Chen and C.-J. Lin, “Combining svms with various feature
selection strategies.” Springer, 2006, pp. 315–324.
[22] S. Demetriou, W. Merrill, W. Yang, A. Zhang, and C. A. Gunter, “Free
for all! assessing user data exposure to advertising libraries on android,”
in Proc. of NDSS’16, 2016.
[23] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and
A. N. Sheth, “Taintdroid: an information ﬂow tracking system for real-
time privacy monitoring on smartphones,” in Communications of the
ACM, vol. 57, no. 3. ACM, 2014, pp. 99–106.
[25]
[24] M. I. Gordon, D. Kim, J. Perkins, L. Gilham, N. Nguyen, and M. Rinard,
“Information-ﬂow analysis of android applications in droidsafe,” in
Proc. of NDSS’15, 2015.
J. Huang, Z. Li, X. Xiao, Z. Wu, K. Lu, X. Zhang, and G. Jiang, “Supor:
precise and scalable sensitive user input detection for android apps,” in
24th USENIX Security Symposium, 2015, pp. 977–992.
J. Huang, X. Zhang, and L. Tan, “Detecting sensitive data disclosure
via bi-directional text correlation analysis,” in Proceedings of the 24th
ACM SIGSOFT International Symposium on Foundations of Software
Engineering. ACM, 2016, pp. 169–180.
J. Huang, X. Zhang, L. Tan, P. Wang, and B. Liang, “Asdroid: detecting
stealthy behaviors in android applications by user interface and program
behavior contradiction.” in Proc. of ICSE’14, 2014, pp. 1036–1046.
[26]
[27]
[28] Y. Z. X. Jiang and Z. Xuxian, “Detecting passive content leaks and
pollution in android applications,” in Proc. of NDSS’13, 2013.
[29] D. Klein and C. D. Manning, “Accurate unlexicalized parsing,” in Pro-
ceedings of the 41st Annual Meeting on Association for Computational
15