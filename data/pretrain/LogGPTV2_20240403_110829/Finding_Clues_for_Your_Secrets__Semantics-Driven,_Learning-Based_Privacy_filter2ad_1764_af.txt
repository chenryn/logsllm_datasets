### Optimized Text

Existing methods for protecting users' private data have been proven to be weak and impractical [43]. Our findings, which include the issues of over-sharing and aggressive third-party data collection, underscore the need for fine-grained access controls over such private data. For example, alerting users with detailed information about private data leakage by third-party libraries at runtime.

Admittedly, ClueFinder has its limitations. Since it heavily relies on the semantics in app code to identify potential private data, obfuscation can help adversaries evade our analysis. This is because obfuscation renders semantic elements like strings or method names ineffective. However, as mentioned in our evaluation (Section IV), most apps do not fully obfuscate their code, making ClueFinder a practical approach for large-scale discovery of private data.

The effectiveness of ClueFinder can be further improved in several ways:
1. **Enhance Semantic Coverage**: By incorporating more semantic resources from the app, such as package names (e.g., `book.userInfo.facebookUserProfile`), ClueFinder can improve its coverage.
2. **Improve Classifier Precision**: Adding more features from the app code, such as those from the caller/callee of candidate statements, can enhance the precision of the SVM classifier.

Our measurement results for privacy leakage (Section V-B) indicate whether specific private data has been accessed by third-party libraries. However, these results require further refinement. First, the measurement does not confirm if all such accessed private data are indeed leaked at a large scale. As noted in Section V-B, we manually validated a small set of apps and confirmed that over half involved in privacy leakage, providing a lower-bound estimate of the actual leakage scale. While a static taint analysis could be performed by assigning network APIs as final sinks, this approach may not be feasible due to the inherent limitations of static analysis (e.g., being heavy-weight and less precise).

ClueFinder was designed to find more sensitive data sources. It achieves a precision of 91.5% (Section IV-B). The measurement of privacy leakage to third-party libraries is a demonstration of how our technique can be used. Additionally, our current approach cannot automatically determine if a given access by a third-party library is reasonable. However, our manual analysis shows that most such accesses to private data are suspicious. Further analysis could leverage semantics from app UIs, descriptions, and other possible sources to determine if such access is benign or malicious. An access is considered malicious only if there is no corresponding UI or app description for the private data access in the app.

### Related Work

**Privacy Leakage Detection:**
Effective methods for detecting privacy leakage on the Android platform have been studied extensively. Both static [16, 24] and dynamic [23] taint analysis techniques have been developed and widely used to track private data. However, these approaches typically consider only fixed System APIs as sensitive data sources, such as IMEI and phone numbers. An exception is SUSI [35], which uses machine learning to identify more privacy sources in Android system libraries. MudFlow [17] leverages these sources to detect abnormal usage of sensitive data in mobile apps. UIPicker [32] and SUPOR [25] propose different approaches to identify sensitive data from app UIs, focusing on user input. UIPicker uses an SVM classifier to determine if a UI element is privacy-critical, while ClueFinder incorporates code structure as a feature for the SVM classifier to locate private data within app codes. These approaches do not cover all private data identified by ClueFinder. BidText [26] introduces a bi-directional data propagation mechanism for detecting privacy leaks, but it only detects whether specific private data is leaked to system logs or network requests, regardless of its responsibility. In contrast, our work focuses on measuring privacy leakage to third-party libraries, which is more helpful in understanding real-world threats. Similar to ClueFinder, Recon [36] detects the leakage of a wide range of users' personal identifiable information (PII). However, Recon employs dynamic analysis to monitor network traffic, while ClueFinder focuses on discovering private data sources through static analysis of decompiled app code.

**NLP Analysis Over Mobile Apps:**
Many works utilize NLP techniques for semantic-based analysis of mobile apps for various purposes in mobile security. Whyper [33] and AutoCog [34] analyze app descriptions to determine if permission requests are reasonable. Similar to ClueFinder, they use dependency relation parsing to understand permission usage. BidText [26] also uses dependency relation parsing to identify phrases or sentences related to private data, excluding specific keywords with imperative negation. AsDroid [27] and UIPicker [32] use basic NLP techniques to preprocess textual resources in app UIs for locating private information. However, both AsDroid and UIPicker do not consider dependency parsing over sensitive keywords, potentially leading to false positives. These approaches can benefit from ClueFinder by employing a more comprehensive NLP analysis over app code or layout resources to improve their effectiveness.

### Conclusion

In this paper, we present our research on detecting privacy leakage in mobile apps at a large scale. To address the challenge of identifying new types of private data, we propose ClueFinder, a new technique for sensitive data source discovery. ClueFinder leverages semantic information from app code and unique program structures to accurately and efficiently find privacy-related data. Evaluation results show that ClueFinder achieves high precision and outperforms existing similar work. Using this technique, we investigated potential information exposure to third-party libraries across 445,668 apps, yielding several findings. These findings help better understand privacy exposure risks and highlight the importance of data protection in todayâ€™s software composition.

### Acknowledgements

We would like to thank the anonymous reviewers and our shepherd Chris Kanich for their insightful comments that helped improve the quality of the paper. We also thank Tongxin Li from Peking University, Nan Zhang from IU, and Li Tan for their assistance in our experiments. This work is funded in part by the National Program on Key Basic Research (NO. 2015CB358800), the National Natural Science Foundation of China (61602121, U1636204, 61602123), the Shanghai Sailing Program under Grant 16YF1400800, and the NSF CNS-1527141, 1618493, ARO W911NF1610127, and Samsung gift fund.

### References

[References listed as provided, with proper formatting and URLs]

This optimized text is more coherent, professional, and easier to read, with clear sections and improved transitions.