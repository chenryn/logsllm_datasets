22
23
24
25
26
27
28
29
30
31
ngx_int_t
ngx_output_chain(ngx_output_chain_ctx_t *ctx,
ngx_chain_t *in)
{
...
if (ctx->in == NULL && ctx->busy == NULL)
{
/*
* the short path for the case when the ctx->in
* and ctx->busy chains are empty, the incoming
* chain is empty too or has the single buf
* that does not require the copy
*/
if (in == NULL) {
return ctx->output_filter(ctx->filter_ctx, in);
}
if (in->next == NULL
#if (NGX_SENDFILE_LIMIT)
&& !(in->buf->in_file && in->buf->file_last
> NGX_SENDFILE_LIMIT)
&& ngx_output_chain_as_is(ctx, in->buf))
return ctx->output_filter(ctx->filter_ctx, in);
#endif
{
}
}
...
}
Figure 7: ACICS for Nginx found in ngx_output_chain func-
tion
We found that
the ICS at core/ngx_output_chain.c:74 in
ngx_output_chain() is an ideal candidate ICS for our
attack.
Figure 7 presents the simpliﬁed code snippet of
ngx_output_chain(). The ICS is at line 27 in Figure 7. The
function implements the ﬁlter chaining mechanism that is inherent
to Nginx’s modular design because it gives an easy way to manip-
ulate the output of various handlers run on the request object to
generate a response.
In this function, the function pointer ctx->output_filter
and arguments ctx->filter_ctx are all derived from ctx
which is a ngx_output_chain_ctx struct pointer. This ctx
a global object lives on the heap, so that our tool successfully cor-
rupts all of these values.
Secondly, the argument ctx->filter_ctx is a void pointer
that is written only once during the request life cycle, whereas ar-
gument in is a pointer to the head of a linked list of ﬁlters that are
applied to request responses. This linked list is modiﬁed in every
module that implements a ﬁlter. However with manual dataﬂow
analysis, it is possible to modify this linked list so that the checks
at lines 18, 19, and 20 of Figure 7 pass and we reach the execution
of the ICS before any crash happens. Thirdly, as all response body
ﬁlters are called before the response is returned to the user, we were
able to remotely exercise this ICS during the request life cycle.
5.2.2 Target Function:
We use a script to search Nginx source code for system calls
with RCE capability. Table 6 shows the number of potential tar-
gets based on the distance in the call graph. We found that the
function ngx_execute_proc() (shown in Figure 8) is an ideal
target function for our proof-of-concept attack, because it executes
a execve() call with passed-in arguments and it has a small arity
of 2, which facilitates the type punning.
1
2
3
4
5
6
7
8
9
10
static void
ngx_execute_proc(ngx_cycle_t *cycle, void *data)
{
ngx_exec_ctx_t
*ctx = data;
if (execve(ctx->path, ctx->argv, ctx->envp) == -1) {
ngx_log_error(...);
}
exit(1);
}
Figure 8: Nginx Target Function that calls execve
5.2.3 Proof-of-concept Attack:
Hence, we identiﬁed the ACICS gadget pair for our attack
which is composed of the ICS at core/ngx_output_chain.c:74 in
ngx_output_chain() (see line 27 in Figure 7) and the target
function ngx_execute_proc() (see Figure 8).
follows.
to the
We corrupt
We then perform the attack as
function
ctx->output_filter to point
ngx_execute_proc() and we corrupt
the memory re-
gion that in points to so that when the memory region is viewed
as a ngx_exec_ctx_t struct in ngx_execute_proc(), it
will trigger RCE at line 6 in Figure 8. We successfully achieved
RCE with our attack.
target
Direct calls to system calls
1 call away
2 calls away
1
2
3
Table 6: Target Functions Count Based on CallGraph distance
5.3 CFG Construction Using DSA
Program
HTTPD
Nginx
vsftpd
BIND
LoC
272K
123K
16K
462K
318K
358K
24K
1167K
110
38
255
1023
LLVM IR Max. SCC Size Merged%
51.3%
10.8%
70.5%
41.2%
Time
14s
10s
1s
14m52s
Table 7: DSA analysis statistics
We next evaluate the precision of CFG construction using
the DSA algorithm on four popular server applications: Apache
HTTPD, Nginx, vsftpd, and BIND. Speciﬁcally, we evaluate the
loss of context sensitivity by measuring the maximum size of
strongly connected components and the loss of ﬁeld sensitivity by
measuring the number of merged objects. We performed all of our
experiments on an Intel 2.3GHz machine running Ubuntu 14.04.
Table 7 summarizes the results. The ﬁrst column presents the ap-
plication name. The second and third columns represent the source
code line count and LLVM IR count respectively. The application
size ranges from 17K LoC for vsftpd to approximately 460K LoC
for BIND.
The fourth column presents the number of functions in the largest
(potentially artiﬁcial) recursion cycle DSA algorithm found for
each application. High numbers translate to high loss of context
sensitivity. The ﬁfth column presents the percentage of the abstract
struct objects that the DSA algorithm tracks which the DSA al-
gorithm merges conservatively. High percentage numbers indicate
high loss of ﬁeld sensitivity.
Together, columns four and ﬁve show that the DSA algorithm
is unable to produce satisfactory results on any of the four applica-
tions due to the loss of ﬁeld sensitivity and context sensitivity. DSA
loses ﬁeld sensitivity on up to 70.5% of tracked struct objects and
detects artiﬁcial recursion groups that contain up to 1023 functions.
Note that even for Nginx, where the relative loss is small,
the generated CFG is unable to stop the ASICS gadgets
index Section 5.2.
The CFG allows the ICS found in
core/ngx_output_chain.c:74 (line 27 in Figure 7) to call the tar-
get function ngx_execute_proc shown in Figure 8 due to the
pointer analysis imprecision.
The sixth column presents the running time of the DSA algo-
rithm on each application. Our results show that the running time
of the DSA algorithm grows non-linearly to the amount of ana-
lyzed code. For BIND, the algorithm needs more than 14 minutes
to ﬁnish. This result highlights the difﬁcult trade-offs between the
accuracy and the scalability in pointer analysis algorithms.
5.4 Summary
In summary, our results demonstrate that the availability of
ACICS gadgets inside Apache and Nginx can be harnessed to pro-
duce with two proof-of-concept attacks. Our results also show that
on all evaluated applications, the DSA algorithm loses a signiﬁcant
part of ﬁeld sensitivity and context sensitivity and that the generated
CFGs are not precise enough to stop the proof-of-concept attacks.
Together the results indicate the difﬁculty of creating a sound, pre-
cise and scalable CFG construction algorithm that can be used by
ﬁne-grained CFI to stop ACICS gadgets.
6. DISCUSSION
In this section, we discuss possible defenses against the Control
Jujutsu attack and explore their viability, security, and practicality.
6.1 Complete Memory Safety
Complete memory safety techniques that enforce both temporal
and spatial safety properties can defend against all control hijack-
ing attacks, including Control Jujutsu. Softbound with its CETS
extensions [35] enforces complete memory safety albeit at a signif-
icant cost (up to 4x slowdown).
On the other hand, experience has shown that low overhead tech-
niques that trade security guarantees for performance (e.g., approx-
imate [46] or partial [5] memory safety) are eventually bypassed
[14, 20, 45]. CPI [29] is a recent technique that achieves low per-
formance overhead by providing memory safety properties for code
pointers only (i.e., not data pointers). Unfortunately, it has already
been shown to be bypassable [19].
Hardware support can make complete memory safety practical.
Intel memory protection extensions (MPX) [27] can provide fast
enforcement of memory safety checks. The Low-Fat fat pointers
scheme shows that hardware-based approaches can enforce spatial
memory safety at very low overhead [30]. Tagged architectures
and capability-based systems such as CHERI [56] can also provide
a promising direction for mitigating such attacks.
6.2 Runtime Arity Checking
The recently published Indirect Function-Call Checks (IFCC)
[53] is forward-edge enforcement variant of CFI designed for C++
programs. In addition to forward-edge enforcement, it further im-
poses a restriction that the arity of call sites and target functions
must match.
IFCC is capable of more powerful restrictions, but
they limit themselves to checking arity for reasons discussed in
Section 6.3.1.
IFCC may limit the number of available ACICS, but it cannot
prevent the Control Jujutsu attack in general. In particular, using
our ACICS discovery tool, we were able to easily expand on our
original exploit for Apache and develop an additional full exploit
based on an ACICS with an arity that matches its ICS with its tar-
get function. This exploit would not be detected by IFCC and is
detailed in Section 6.3.1. As for Nginx, our proof-of-concept ex-
ploit uses an ACICS gadget with matching arity so IFCC will not
be able to detect it.
6.3 Runtime Type Checking (RTC)
One way to restrict ACICS gadgets is to use a runtime type
checker for C. The most precise runtime type checker would need
access to the program source for type name information that is typ-
ically removed by C compilers. Although some information (e.g.,
the width in words of arguments) is inferrable purely from binary
analysis with the use of an interpreter and runtime environment,
as in the Hobbes checker [12], but the guarantees of runtime type
checking are substantially weakened.
6.3.1 Challenges of RTC
Unfortunately, runtime checks based on source code inference
would break compatibility with a large subset of real-world code.
Qualiﬁers such as const are routinely violated at runtime; a recent
paper [16] found that for const pointers alone, each of thirteen large
FreeBSD programs and libraries examined contained multiple “de-
const” pointer idioms which would be broken if const had been
enforced at runtime. In general, real-world programs do not always
respect function pointer types at runtime, as the IFCC paper noted
when they explained that their approach could support one tag per
type signature, but that this “can fail for function-pointer casts.”
The callback and object-oriented programming patterns that ex-
ist in large C programs are analogous to the virtual table semantics
of C++ programs. As our attack examples clearly demonstrate,
these indirect call sites in C programs with higher-order constructs
require protections in the same way that C++ programs need prin-
cipled virtual table protection.
A telling example of these patterns is the APR library’s bucket
brigade system. The bucket brigade structure, seen in Figure 9 is
analogous to a C++ object. It contains members like “data” along
with generic member functions that know how to read, write, and
delete the data. Additionally, buckets live on the heap, so they are
globally visible and thus can be corrupted in any function with a
heap vulnerability.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
struct apr_bucket_type_t {
const char *name;
int num_func;
void (*destroy)(void *data);
...
};
struct apr_bucket {
const apr_bucket_type_t *type;
apr_size_t length;
apr_off_t start;
void *data;
void (*free)(void *e);
...
};
Figure 9: bucket_brigade declarations in APR-util
The structure is exercised by macros in the APR-util library such
as the bucket_brigade_destroy seen in Figure 10. This
macro is an ideal example of an ACICS–particularly dangerous
because the function it executes and its argument are stored in a
closure-like style inside the same structure. If an attacker can cor-
rupt a bucket brigade struct which is later destroyed, an arbitrary
function can be called with an arbitrary argument.
There are dozens of calls to apr_bucket_destroy and
its wrapper macro apr_bucket_delete in the Apache
source. We veriﬁed that
the DSA analysis determines that
apr_bucket_delete might call piped_log_spawn. Un-
like the example in Figure 2, the arities of the ICS and the target
match, which passes the arity check imposed by IFCC.
We took a particular instance and veriﬁed that the data in e was
live throughout much of the request lifecycle, and that e->data
and e->type->destroy could be corrupted immediately af-
ter initialization (as long as e->length was also corrupted to 0)
without causing a crash before a call to apr_bucket_delete
was made. In particular the function which makes the call to this
ACICS is ap_get_brigade.
Patterns like this occur even more frequently in BIND, where
many structs are effectively objects with a “methods” ﬁeld; an ex-
ample is seen in Figure 11 displaying the same pattern observed in
an APR-util function.
Clearly, if the bucket brigade struct or the XFR struct were
implemented as C++ classes, they would need to be protected
by a scheme such as v-table veriﬁcation [53]. Fine-grained CFI
schemes which can make strong guarantees about typical C pro-
grams will fail to account for cases such as this or other higher-level
patterns implementing, without language support, object-oriented
techniques, or closures on top of the C runtime. Programs that em-
ploy these patterns blur the traditional distinction between “data
1
2
3
4
5
#define apr_bucket_destroy(e)
do {
(e)->type->destroy((e)->data);
(e)->free(e);
} while (0)