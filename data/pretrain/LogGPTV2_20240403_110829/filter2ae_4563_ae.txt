    import torch.nn.functional as func
    import numpy as np
    import torch
    from PIL import Image
    import os
    import base64
    import random
    from torchvision import transforms
    from torch.autograd import Variable
    class LeNet(nn.Module):
        def __init__(self,dimy):
            super(LeNet,self).__init__()
            self.conv1=nn.Conv2d(3,6,5)
            self.conv2=nn.Conv2d(6,16,5)
            self.linear1=nn.Linear(256,120)
            self.linear2=nn.Linear(120,84)
            self.linear3=nn.Linear(84,10)
            self.linear4=nn.Linear(10,dimy)
        def forward(self,x):
            x=func.relu(self.conv1(x))
            x=func.max_pool2d(x,2)
            x=func.relu(self.conv2(x))
            x=func.max_pool2d(x,2)
            x=x.view(x.size(0),-1)
            x=func.relu(self.linear1(x))
            x=func.relu(self.linear2(x))
            x=self.linear3(x)
            x=torch.sigmoid(self.linear4(x))
            return x
    class MyDataSet(Dataset):
        def __init__(self,datapath,trans=None):
            self.datapath=datapath
            self.trans=trans
            self.data=list()
            self.label_map={'4':0,'7':1}
            path1=datapath+'/4/'
            path2=datapath+'/7/'
            filist1=os.listdir(path1)
            flist2=os.listdir(path2)
            for i in range(len(filist1)):
                tmppath=path1+filist1[i]
                tmpimg = Image.open(tmppath).convert('RGB')
                if (self.trans != None):
                    tmpimg = self.trans(tmpimg)
                self.data.append((tmpimg, 1.0))
            for i in range(len(flist2)):
                tmppath=path2+flist2[i]
                tmpimg = Image.open(tmppath).convert('RGB')
                if (self.trans != None):
                    tmpimg = self.trans(tmpimg)
                self.data.append((tmpimg, 0.36))
        def __len__(self):
            return len(self.data)
        def __getitem__(self, item):
            return self.data[item][0],self.data[item][1]
    def set_seed(seed=0):
        random.seed(seed)
        np.random.seed(seed)
        torch.manual_seed(seed)
        torch.cuda.manual_seed(seed)
    def save_image(arr, path):
        im = Image.fromarray(arr)
        im.save(path)
    atk_trans=transforms.Compose([transforms.ToTensor()])
    mainpath="./database/mnist/"
    atkpath=os.path.join(mainpath,"atk")
    atk_data=MyDataSet(atkpath,atk_trans)
    batch_size=1
    atk_load=DataLoader(atk_data,batch_size=batch_size,drop_last=True)
    mymodal=torch.load('./database/target.pt')
    mymodal.train()
    tmpans=0
    image=0
    cnt=0
    for _, data in enumerate(atk_load):
        images, ans = data
        if(cnt==1):
            tmpans = ans.float()
        if(cnt==0):
            image=images
        cnt += 1
    src=image.squeeze().detach().flatten().numpy().astype("float64")
    src=np.clip(src, 0, 1)
    picpath=mainpath+'/atk/4/mnist_test_24.png'
    adv=Variable(image,requires_grad=True)
    loss_f=nn.L1Loss()
    loss_l2=nn.MSELoss()
    lr=0.1
    RATIO=1.0
    epoch=1000
    print("before atk:  ",mymodal(adv))
    print(mymodal(adv))
    for i in range(epoch):
        y=mymodal(adv)
        l1l = loss_f(adv, image) * RATIO
        l2l = loss_l2(y,tmpans)
        loss = l1l+l2l
        loss=loss
        loss.backward()
        adv.requires_grad = False
        data1 = adv.squeeze().detach().numpy().astype("float64").tobytes()
        arr1 = np.frombuffer(data1, dtype="float64")
        arr1 = np.clip(arr1, 0, 1)
        diff = arr1 - src
        a, b = (np.linalg.norm(diff, 1), np.linalg.norm(diff, 2))
        if(i==epoch-1):
            print(a,' --------------------> ',b)
        adv = adv - adv.grad * lr
        adv = adv.clamp(0, 1)
        adv.requires_grad = True
    print("after atk:  ",mymodal(adv))
    ans=adv.squeeze().detach().flatten().numpy().astype("float64")
    ans=np.clip(ans, 0, 1)
    ans=base64.b64encode(ans.tobytes())
    from pwn import *
    r=remote('0.0.0.0',9998)
    r.recvuntil(b'> \n')
    r.sendline(ans)
    flag=r.recvline()
    print(bytes.decode(flag))
    r.interactive()
# 参考
  * [Explaining and Harnessing Adversarial Examples](https://arxiv.org/abs/1412.6572)
  * [N1CTF2021 Collision exp](https://github.com/Nu1LCTF/n1ctf-2021/blob/main/Misc/collision/exp.py)
  * [N1CTF2021 Collision exp解析write up](https://blog.csdn.net/qq_42940521/article/details/121510845)
  * [TJUCTF新生赛-AI安全专栏write up](https://blog.csdn.net/qq_42940521/article/details/122664019)