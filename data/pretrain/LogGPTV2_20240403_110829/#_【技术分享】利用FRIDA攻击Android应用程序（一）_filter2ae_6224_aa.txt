# 【技术分享】利用FRIDA攻击Android应用程序（一）
|
##### 译文声明
本文是翻译文章，文章来源：codemetrix.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
稿费：200RMB（不服你也来投稿啊！）
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**传送门**
[**【技术分享】利用FRIDA攻击Android应用程序（二）**](http://bobao.360.cn/learning/detail/3634.html)
**  
**
**前言**
直到去年参加RadareCon大会时，我才开始接触动态代码插桩框架Frida。最初，我感觉这玩意还有点意思，后来发现这种感觉是不对的：应该是非常有意思。您还记得游戏中的上帝模式吗？面对本地应用程序的时候，一旦拥有了Frida，也就拥有了这种感觉。在这篇文章中，我们重点介绍Frida在Android应用方面的应用。在本文的第二篇中，我们将会介绍如何利用Frida来应付Android环境下的crackme问题。
**  
**
**什么是动态代码插桩？**
动态二进制插桩（DBI）意味着将外部代码注入到现有的（正在运行的）二进制文件中，从而让它们执行以前没有做过的事情。注意，这并非漏洞利用，因为代码的注入无需借助于漏洞。同时，它不是调试，因为你不必将二进制代码附加到一个调试器上面，当然，如果你非要这么做的好也未尝不可。那么DBI可以用来做什么呢？实际上，它可以用来做许多很酷的事情：
访问进程内存
在应用程序运行时覆盖函数
从导入的类调用函数
在堆上查找对象实例并使用它们
Hook、跟踪和拦截函数等。
当然，调试器也能完成所有这些事情，但是会比较麻烦。例如。在Android平台中，应用程序必须先进行反汇编和重新编译处理，才能进行调试。一些应用程序会尝试检测并阻止调试器，这时你必须先克服这一点，才能进行调试。然而，这一切做起来都会非常麻烦。在DBI与Frida的帮助下，这些事情都不是我们要关心的，所以调试会变得更加便捷。
**  
**
**FRIDA入门**
Frida“允许您在Windows、macOS、Linux、iOS、Android和QNX的本机应用程序中注入JavaScript或自己的库代码。”最开始的时候，它是基于谷歌的V8
Javascript运行时的，但是从版本9开始，Frida已经开始使用其内部的Duktape运行时了。不过，如果你需要V8的话，仍然可以切换回去。Frida可以通过多种操作模式与二进制程序进行交互（包括在非root的设备上给应用程序“插桩”），但是这里我们只介绍最简单的情形，同时也不关心其内部运行原理。
为了完成我们的实验，你需要
Frida
您可以从这里下载frida服务器的二进制代码（截止写作本文为止，最新版本为frida-server-9.1.16-android-arm.xz）
Android模拟器或已经获得root权限的设备。虽然Frida是在Android 4.4
ARM上面开发的，不过应该同样适用于更高的版本。就本文来说，使用Android 7.1
ARM完全没有一点问题。对于第二部分的crackme来说，则需要使用比Android 4.4更高的版本。
这里假设以linux系统作为主机操作系统，所以如果你使用Windows或Mac的话，有些命令可能需要进行相应的调整。
Frida的启动方式花样繁多，包括各种API和方法。您可以使用命令行界面或类似frida-trace的工具来跟踪底层函数（例如libc.so中的“open”函数），以便快速运行。同时，你还可以使用C、NodeJS或Python绑定完成更复杂的任务。但是在其内部，Frida使用Javascript的时候较多，换句话说，你可以通过这种语言完成大部分的插桩工作。所以，如果你像我一样不太喜欢Javascript的话（除了XSS功能），Frida倒是一个让你进一步了解它的理由。
首先，请安装Frida，具体如下所示（此外，您还可以通过查看README了解其他安装方式）：
    pip install frida
    npm install frida
启动模拟器或连接设备，确保adb正在运行并列出您的设备：
    michael@sixtyseven:~$ adb devices
    List of devices attached
    emulator-5556device
然后，开始安装frida-server。先进行解压，并将二进制文件放入设备中：
    adb push /home/michael/Downloads/frida-server-9.1.16-android-arm /data/local/tmp/frida-server
在设备上打开一个shell，切换到root用户，并启动frida：
    adb shell
    su
    cd /data/local/tmp
    chmod 755 frida-server
    ./frida-server
（注意事项1：如果frida-server没有启动，请检查当前是否为root用户，以及文件是否在传输过程中发生损坏。当文件传输而导致文件损坏的时候，经常会出现一些让人奇怪的错误提示。注意事项2：如果你想以后台进程的方式启动frida-server的话，则需要使用./frida-server＆）
您可以另一个终端的常规操作系统shell中检查Frida是否正在运行，并列出Android上的进程：
    frida-ps -U
-U代表USB，允许Frida检查USB设备，同时还可用于仿真器。这时，您将看到一个如下所示进程列表： 
    michael@sixtyseven:~$ frida-ps -U
     PID  Name
    ----  --------------------------------------------------     696  adbd
    5828  android.ext.services
    6188  android.process.acore
    5210  audioserver
    5211  cameraserver
    8334  com.android.calendar
    6685  com.android.chrome
    6245  com.android.deskclock
    5528  com.android.inputmethod.latin
    6120  com.android.phone
    6485  com.android.printspooler
    8355  com.android.providers.calendar
    5844  com.android.systemui
    7944  com.google.android.apps.nexuslauncher
    6416  com.google.android.gms
    [...]
您将看到进程标识（PID）和正在运行的进程（名称）。现在，您可以通过Frida挂钩到任何一个进程并对其进行“篡改”了。
例如，您可以跟踪由Chrome使用的特定调用（如果还没有运行该浏览器的话，请首先在模拟器中启动它）：
    frida-trace -i "open" -U com.android.chrome
输出结果如下所示：
    michael@sixtyseven:~$ frida-trace -i open -U -f com.android.chrome
    Instrumenting functions...                                              
    open: Loaded handler at "/home/michael/__handlers__/libc.so/open.js"
    Started tracing 1 function. Press Ctrl+C to stop.                       
               /* TID 0x2740 */
       282 ms  open(pathname=0xa843ffc9, flags=0x80002)
               /* TID 0x2755 */
       299 ms  open(pathname=0xa80d0c44, flags=0x2)
               /* TID 0x2756 */
       309 ms  open(pathname=0xa80d0c44, flags=0x2)
               /* TID 0x2740 */
       341 ms  open(pathname=0xa80d06f7, flags=0x2)
       592 ms  open(pathname=0xa77dd3bc, flags=0x0)
       596 ms  open(pathname=0xa80d06f7, flags=0x2)
       699 ms  open(pathname=0xa80d105e, flags=0x80000)
       717 ms  open(pathname=0x9aff0d70, flags=0x42)
       742 ms  open(pathname=0x9ceffda0, flags=0x0)
       758 ms  open(pathname=0xa63b04c0, flags=0x0)
frida-trace命令会生成一个小巧的javascript文件，然后Frida会将其注入到进程中，并跟踪特定的调用。您可以观察一下在__handlers
__ /
libc.so/open.js路径下面生成的open.js脚本。它将钩住libc.so中的open函数并输出参数。使用Frida的情况下，这非常简单：
    [...]
    onEnter: function (log, args, state) {
        log("open(" + "pathname=" + args[0] + ", flags=" + args[1] + ")");
    },
    [...]
请注意Frida是如何访问Chrome内部调用的open函数的调用参数（args [0]，args
[1]等）的。现在，让我们对这个脚本稍做修改。如果我们输出以纯文本形式打开的文件的路径，而不是存储这些路径的内存地址，那不是更好吗？
幸运的是，我们可以直接访问内存。为此，您可以参考Frida
API和Memory对象。我们可以修改脚本，让它将内存地址中的内容作为UTF8字符串输出，这样结果会更加一目了然。现在修改脚本，具体为：
    onEnter: function (log, args, state) {
        log("open(" + "pathname=" + Memory.readUtf8String(args[0])+ ", flags=" + args[1] + ")");
    },
（我们只是添加了Memory.readUtf8String函数）我们会得到如下所示输出：
    michael@sixtyseven:~$ frida-trace -i open -U -f com.android.chrome
    Instrumenting functions...                                              
    open: Loaded handler at "/home/michael/__handlers__/libc.so/open.js"
    Started tracing 1 function. Press Ctrl+C to stop.                       
               /* TID 0x29bf */
       240 ms  open(pathname=/dev/binder, flags=0x80002)
               /* TID 0x29d3 */
       259 ms  open(pathname=/dev/ashmem, flags=0x2)
               /* TID 0x29d4 */
       269 ms  open(pathname=/dev/ashmem, flags=0x2)
               /* TID 0x29bf */
       291 ms  open(pathname=/sys/qemu_trace/process_name, flags=0x2)
       453 ms  open(pathname=/dev/alarm, flags=0x0)
       456 ms  open(pathname=/sys/qemu_trace/process_name, flags=0x2)
       562 ms  open(pathname=/proc/self/cmdline, flags=0x80000)
       576 ms  open(pathname=/data/dalvik-cache/arm/system@app@PI:EMAIL@classes.dex.flock, flags=0x42)
Frida打印出了路径名。这很容易，对吧？
另一个要注意的是，你可以先启动一个应用程序，然后让Frida注入它的magic，或者传递-f选项给Frida，让它创建进程。
现在，我们来考察Fridas的命令行接口frida-cli：
    frida -U -f com.android.chrome
这将启动Frida和Chrome应用。但是，仍启动Chrome的主进程。这是为了让您可以在应用程序启动主进程之前注入Frida代码。不幸的是，在我实验时，它总是导致应用程序2秒后自动终止。这不是我们想要的结果。您可以利用这2秒钟时间输入％resume，并让应用程序启动其主进程；或者，直接使用–no-pause选项启动Frida，这样就不会中断应用程序了，并将生成的进程的任务留给Frida。
无论使用哪种方法，你都会得到一个shell（不会被杀死），这样就可以使用它的Javascript
API向Frida写命令了。通过TAB可以查看可用的命令。此外，这个shell还支持命令自动完成功能。
它提供了非常详尽的文档说明。对于Android，请检查JavaScript-API的Java部分（这里将讨论一个“Java
API”，虽然从技术上说应该是一个访问Java对象的Javascript包装器）。在下面，我们将重点介绍这个Java
API，因为在跟Android应用程序打交道的时候，这是一种更加方便的方法。不同于挂钩libc函数，实际上我们可以直接使用Java函数和对象。
作为使用Java API的第一步，不妨从显示Frida的命令行界面运行的Android的版本开始：
    [USB::Android Emulator 5556::['com.android.chrome']]-> Java.androidVersion
    "7.1.1"