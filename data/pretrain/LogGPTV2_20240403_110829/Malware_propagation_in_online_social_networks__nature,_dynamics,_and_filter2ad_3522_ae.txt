### Experiments and Observations

In a new set of experiments, we selected \( k \) from the set \(\{1, 5, 25, 125, 625, 1000, 1500, 2000\}\). For each value of \( k \), we performed 200 sample runs. The user click probability was set to 0.5. The effectiveness of the three sanitization schemes is illustrated in Figure 14.

**Key Findings:**
- The scheme based on active neighbors performs slightly better than the one based on edges, especially when a significant number of nodes are removed.
- When fewer than 125 nodes are removed, the two schemes are almost equivalent because at most one node differs.
- As explained in Section 5.1, the number of active neighbors is more important for malware propagation because it dictates the maximum number of neighbors that a node can infect.
- Sanitization by activities performs the worst among the three schemes. This is not surprising because, according to Figure 7, nodes with a large number of activity events do not necessarily have many neighbors, and the importance of a node in spreading malware depends significantly on the number of active neighbors it has.

### Analysis of Infections and Recovery

From Figure 14, we observe that the number of infections decreases linearly with the number of nodes removed, regardless of the sanitization scheme. This is counterintuitive, as one might expect that removing highly connected nodes would slow down malware propagation more significantly, leading to a sublinear decrease in infections. However, selectively sanitizing nodes with the highest numbers of either edges or active neighbors can still effectively slow down malware propagation. This aligns with findings in [38, 27], which show that targeted immunization (similar to our sanitization) is an effective approach to stopping malware in scale-free networks. Our results confirm this conclusion under realistic activity models for online social networks.

### Preventive Containment

We also considered a defense scheme called preventive containment. The basic idea is to partition the network into "islands" and sanitize messages delivered between these islands to ensure they are not malicious. To partition the BrightKite network, we used a hierarchical community detection algorithm to produce a dendrogram, showing how nodes are clustered together to form communities. By removing inter-community edges, we aim to break down the connectivity of the whole graph.

**Methodology:**
- We used the community structure detection algorithm from the igraph library [16], which is based on greedy optimization of modularity [5].
- The algorithm works bottom-up, starting with individual nodes, forming small communities, and iteratively adding edges to form larger communities until the whole graph is generated.
- We then remove edges in a top-down fashion, based on the dendrogram, and measure the total number of edges removed and the size of the giant component after each operation.

**Results:**
- As shown in Figure 15, the size of the largest component in the remaining graph decreases as edges are removed.
- However, the results suggest that preventive containment is not very effective. For example, to contain malware propagation within 52%, 26%, 20%, 15%, and 10% of the nodes in the giant component, we need to sanitize messages on 12%, 20%, 23%, 53%, and 78% of the edges, respectively. This indicates that a significant number of edges must be sanitized to contain malware within a small number of nodes.

### Scope and Limitations

Our work uses trace-driven simulation to study malware propagation in online social networks. The accuracy of our conclusions is limited by the underlying assumptions:
- We assume that each BrightKite user becomes active only after performing visible activities, such as check-ins, location updates, photo uploads, and note postings. This may not be true if users delete their activity events, potentially underestimating malware propagation speed.
- We assume each account name in the BrightKite dataset corresponds to a unique machine owned by a user. This may not be accurate if users have multiple accounts or use multiple machines.
- The user click probability is assumed to be the same for all users, which is not realistic given varying awareness levels and trust in messages from different senders.

Despite these limitations, our work provides valuable insights into the characteristics of malware propagation in realistic online social networks. Our goal is to investigate the effects of different aspects of online social networks on malware propagation, particularly those related to user activities, which have been less studied in previous works.

### Conclusions

Malware targeting online social networks is on the rise. In this work, we aimed to study the characteristics of malware propagation in these networks. We analyzed a real-world location-based online social network, including its social structure and user activity patterns. Using trace-driven simulation, we studied the impact of initial infection, user click probability, social structures, and user activity patterns on malware propagation. Our findings offer insights into defending against malware attacks in online social networks.

### References

[References listed as provided in the original text]

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.