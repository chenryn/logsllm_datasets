Oracle (on the contrary, regular browsers would not be af-
fected). In another case, the attackers replaced the JavaScript
code used to launch an ActiveX exploit code with equivalent
VBScript code. This is done because Internet Explorer can
interpret VBScript, while most emulators do not support it.
In a different case, the evasive code creates a div tag and
checks for speciﬁc CSS properties, which are set correctly in
Internet Explorer but not when executing in our Oracle. We
will examine in more detail the next four evasion techniques.
Variable scope inside eval. We found that a successful
evasion attack can be launched with minor changes to a
malicious script. In one such case, shown in Figure 7, the
authors of the malicious script changed a replace call with
a call to eval, which, in turn, executed the same replace.
While this change did not affect the functionality of the
script in Internet Explorer, it did change it for our Oracle.
In fact, in Wepawet’s JavaScript engine, the code inside the
eval runs in a different scope, and thus, the locally-deﬁned
variable on which replace is called is not accessible. While
1 // Malicious
2 function foo() {
3 ...
4 W6Kh6V5E4 = W6Kh6V5E4.replace(/\W/g,Bm2v5BSJE);
5 ...
6 }
7 // Evasion
8 function foo(){
9 ...
10 var enryA = mxNEN+F7B07;
11 F7B07 = eval;
12 {}
13 enryA = F7B07('enryA.rep' + 'lace(/\\W/g,CxFHg)←(cid:31)
14 ...
15 }
');
Figure 7: Evasion based on differences in the scope handling
inside eval in different JavaScript engines.
!""#$%&'($)*
01"$#$%&'($)*
2,232#$%&*
+,-!./*
!""8&9#$%&*
4$('%($56!7*
9$$2*
:;<?=* ?:<:?<?=* ?:<:@<?=* ?:<?A<?=* ?:<==<?=* ?:<=;<?=* ??<:A<?=* ??<?=<?=*
Figure 8: Timeline of PDF evasions automatically detected
by Revolver.
the code successfully exploits Internet Explorer, it fails in
our Oracle and is marked as benign.
Adobe-speciﬁc JavaScript execution. Figure 9 shows
an evasion that leverages a speciﬁc characteristic of the
JavaScript engine implementation included in Adobe Reader.
In particular, in Adobe’s engine (unlike other engines), the
eval function is accessible as a property of native objects,
e.g., a string (line 8) [2]. Wepawet’s analyzer is not aware
of this difference and fails on scripts that make use of this
feature (marking them as benign). The functionally-identical
script that does not use this trick, but directly invokes the
eval() function, is correctly marked as malicious. We also
found several instances of evasions related to PDF speciﬁc
objects, like app and target, where missing functionality
was used to render the malicious script harmless. We show a
snippet of this evasion type found in the wild in Figure 10.
In Figure 8 we see the evasions related to the app object
that were automatically detected by Revolver as found in
the wild. Every time Revolver detected an evasion there is a
spike in the ﬁgure, and we made the appropriate patches to
Wepawet as soon as possible. What is of particular interest
is the fact that attackers react to Wepawet’s patching by
introducing a new evasion within a few days, making a
tool like Revolver necessary to automatically keep track of
this behavior and keep false negative detections as low as
possible.
Evasion through exceptions. Another interesting eva-
sion that Revolver found also leverages subtle differences
in the JavaScript implementation used in Wepawet and in
real browsers. In this case, the malicious script consists of a
decryption function and a call to that function. The function
646  22nd USENIX Security Symposium 
USENIX Association
1 // Malicious
2 OlhG='evil_code'
3 wTGB4=eval
4 wTGB4(OlhG)
5
6 // Evasion
7 OlhG='evil_code'
8 wTGB4="this"["eval"]
9 wTGB4(OlhG)
Figure 9: Evasion based on the ability to access the eval
function as a property of native objects in Adobe’s JavaScript
engine.
1 if((app.setInterval+/**/"")["indexOf"](aa)!=-1){
2
a=/**/target.creationDate.split('|')[0];}
Figure 10: Evasion based on PDF speciﬁc objects app and
target.
ﬁrst initializes a variable with a XOR key, which will be used
to decrypt a string value (encoding a malicious payload).
The decoded payload is then evaluated via eval.
The evasion that we found follows the same pattern (see
Figure 11), but with a few critical changes. In the modiﬁed
code, the variable containing the XOR key is only initialized
the ﬁrst time that the decryption function runs; in sequential
runs, the value of the key is modiﬁed in a way that depends
on its prior value (Lines 16–17). After the key computation,
a global variable is accessed. This variable is not deﬁned
the ﬁrst time the decryption function is called, so that the
function exits with an exception (Line 19). On Internet
Explorer, this exception is caught, the variable is deﬁned,
and the decryption function is called again. The function
then runs through the key calculation and then decrypts and
executes the encrypted code by calling eval.
On our Oracle, a subtle bug (again, in the handling of
eval calls) in the JavaScript engine caused the function
to throw an exception the ﬁrst two times that it was called.
When the function is called the third time, it ﬁnally succeeds,
modiﬁes the XOR key, and attempts to decrypt the string.
However, since the key calculation is run three times instead
of two, the key is incorrect, and the decrypted string results
in garbage data. We found three variations of this technique
in our experiments.
A very interesting exception-based evasion that we found
with Revolver was based on the immutability of window-
.document.body. The attacker checks if she can replace
the body object with a string, something that should not be
possible and should result in an exception, but it does not
raise an exception in our Oracle because the body object is
mutable. The interesting part is that we found three com-
pletely different malicious scripts evolving to incorporate
this evasion, one of them being part of the popular exploit
kit Blackhole 2.0. This is the ﬁrst indication that evasion
techniques are propagating to different attacking compo-
1 // Malicious
2 function deobfuscate(){
3
value
... // Define var xorkey and compute its ←(cid:31)
for(...) { ... // XOR decryption with xorkey←(cid:31)
eval(deobfuscated_string);
}
4
20
eval('deobfuscate();')
alert('err');
5
6 }
7 try {
8
9 }
10 catch (e){
11
12 }
13
14 // Evasion
15 function deobfuscate(){
16
17
18
19
try { ... // is variable xorkey defined? }
catch(e){ xorkey=0; }
... // Compute value of xorkey
VhplKO8 += 0; // throws exception the first ←(cid:31)
time
for(...) { ... // XOR decryption with xorkey←(cid:31)
eval(deobfuscated_string);
}
// Variable VhplKO8 is not defined
try {
21
22 }
23 try { eval('deobfuscate();') } // 1st call
24 catch (e){
25
26
27
28
29
30
31
32
33 }
VhplKO8 = 0; // define variable
eval('deobfuscate();'); // 2nd call
}
catch (e){
alert('ere');
}
Figure 11: An evasion taking advantage of a subtle bug in
Wepawet’s JavaScript engine in order to protect the XOR
key.
nents and indicates that attackers care to keep their attacks
as stealthy as possible.
Unicode deobfuscation evasion. This evasion lever-
aged the fact that Unicode strings in string initializations
and regular expressions are treated differently by different
JavaScript engines. For example, Revolver found two scripts
with a similarity of 82.6%. The script ﬂagged as benign
contained an additional piece of code that modiﬁed the way a
function reference to eval was computed. More precisely,
the benign script computed the reference by performing a
regular expression replacement. While this operation ex-
ecutes correctly in Internet Explorer, it causes an error in
the JavaScript engine used by Wepawet due to a bug in the
implementation of regular expressions.
Incorrect PDF version check. Another similarity that
Revolver identiﬁed involved two scripts contained inside two
PDF ﬁles, one ﬂagged as benign by Wepawet and the other
as malicious. These scripts had a similarity of 99.7%. We de-
termined that the PDF contained an exploit targeting Adobe
Reader with versions between 7.1 and 9. The difference
found by Revolver was caused by an incorrect version check
in the exploit code. The benign code mistakenly checked
for version greater or equal to 9 instead of less or equal to 9,
USENIX Association  
22nd USENIX Security Symposium  647
which combined with the previous checks for the version
results in an impossible browser conﬁguration and as a con-
sequence the exploit was never ﬁred. This case, instead of
being an actual evasion, is the result of a mistake performed
by the attacker. However, the authors quickly ﬁxed their
code and re-submitted it to Wepawet just 13 minutes after
the initial, ﬂawed submission.
False positives. The evasion groups contained ﬁve false
positives. In this context, a false positive means that the
similarity identiﬁed by Revolver is not responsible for the
Oracle’s misdetection. More precisely, of these false posi-
tives, four corresponded to cases where the script execution
terminated due to runtime JavaScript errors before the actual
exploit was launched. While such behavior could be evasive
in nature, we determined that the errors were not caused by
any changes in the code, but by other dependencies. These
can be due to missing external resources required by the
exploit or because of a runtime error. In the remaining
case, the control-ﬂow change identiﬁed by Revolver was not
responsible for the misdetection of the script.
Revolver’s impact on honeyclients. By continuously
running Revolver in parallel with a honeyclient, we can im-
prove the honeyclient’s accuracy by observing the evolution
of malicious JavaScript. The results from such an integra-
tion with Wepawet indicate a shift in the attackers’ efforts
from hardening their obfuscation techniques to ﬁnding dis-
crepancies between analysis systems and targeted browsers.
Popular exploit kits like Blackhole are adopting evasions
to avoid detection, which shows that such evasions have
emerged as a new problem in the detection of malicious web
pages. Revolver’s ability to pinpoint, with high accuracy,
these new techniques out of millions of analyzed scripts
not only gives a unique view into the attackers’ latest steps,
but indicates the necessity of such system as part of any
honeyclient that analyzes web malware.
can counteract these attacks by improving the algorithms
we use to compute the similarity of scripts. For example,
we could use a preprocessing step to normalize a script’s
code (e.g., removing dead code). A completely different
approach would be to leverage Revolver to correlate differ-
ences in the code of the same web pages when visited by
multiple oracles: if Revolver detects signiﬁcant differences
in the code returned during these visits, then we can identify
metamorphic web pages. In addition, metamorphic code
raises the bar, since an attack needs to be programmatically
different every time, and the code must be automatically gen-
erated without clearly-detectable patterns. Therefore, this
would force attackers to give up their current obfuscation
techniques and ability to reuse code.
An attacker could include an evasion and dynamically
generate the attack code only if the evasion is successful. The
attacker has two options: He can include the evasion code
as the ﬁrst step of the attack, or after initial obfuscation and
environment setup. Evasions are hard to ﬁnd and require sig-
niﬁcant manual effort by the attackers. Therefore, attackers
will not reveal their evasion techniques since they are almost
as valuable as the exploits they deliver. Moreover, introduc-
ing unobfuscated code compromises the stealthiness of the
attack and can yield into detection through signature match-
ing. The second option works in Revolver’s favor, since it
allows our system to detect similarities in obfuscation and in
environmental setup code.
Finally, an operational drawback of Revolver is the fact
that manual inspection of the similarities that it identiﬁes
is currently needed to conﬁrm the results it produces. The
number of similarities that were found during our experi-
ments made it possible to perform such manual analysis. In
the future, we plan to build tools to support the inspection of
similarities and to automatically conﬁrm similarities based
on previous analyses.
6 Discussion
7 Related Work
As with any detection method, malware authors could ﬁnd
ways to attempt to evade Revolver. One possibility consists
in splitting the malicious code into small segments, each
of which would be interpreted separately through eval.
Revolver is resilient against code fragmentation like this
because it combines such scripts back to the parent script
that generated them, reconstructing this way the original
non-fragmented script.
It is also possible for malware authors to purposefully
increase the Euclidean distance between their scripts so that
otherwise similar scripts are no longer considered neighbors
by the nearest neighbor algorithm. For example, malware
authors could swap statements in their code, or inject junk
code that has no effect other than decreasing the similar-
ity score. Attackers could also create fully metamorphic