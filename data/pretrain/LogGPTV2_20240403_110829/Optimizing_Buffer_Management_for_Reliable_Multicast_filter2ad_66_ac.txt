time is much smaller than that in region size: when the
region size increases by a factor of 10, the correspond-
ing search time only increases by a factor of 2:2. With
1000 members, the percentage of bufferers is only 1.
Compared with the case where every member buffers
the message, our algorithm reduces the amount of buffer
space by a factor of 100.
5 Experimental Results
In this section, we compare the amount of buffer re-
quirements in Bimodal Multicast with that in RRMP on
the UNIX platform. The experiment was conducted in
a group of 30 machines in a local area network. The
sender sends 1 byte messages at a rate of 100 mes-
sages per second. Messages are delivered to the appli-
cation in FIFO order. We randomly drop messages with
probability 1 at each receiver and compare the number
of messages a receiver keeps in its buffer between the
two protocols. The results are shown in Figure 9. The
x-axis indicates the times when the measurements were
taken and the y-axis indicates the number of buffered
messages.
Recall that a receiver in the Bimodal Multicast pro-
tocol buffers received messages for a ﬁxed amount of
time after their initial reception and then garbage col-
lects the message [2].
In the current implementation,
the length of a gossip round is 100ms and a receiver
keeps a message for 10 rounds. The ﬁgure shows that
the number of messages in a member’s buffer is around
100. In contrast, the RRMP protocol divides its buffer
space into two parts: a short-term buffer and a long-term
buffer. When a member ﬁrst receives a message, it keeps
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply. 
)
g
s
m
#
(
e
c
a
p
s
r
e
f
f
u
B
160
140
120
100
80
60
40
20
0
0
Bimodal Multicast
RRMP             
20
40
Time (sec)
60
80
100
Figure 9. Comparison of buffer require-
ments between Bimodal Multicast and
RRMP in a group of 30 members in a lo-
cal area network.
the message in its short-term buffer until no request for
this message has been received for a certain period of
time (50ms in the current implementation). Then the
member makes a random choice to become a long-term
bufferer with probability C=. In this experiment, we
set C = 6 and  = 30. Hence on average 20 of the
members in a region serve as long-term bufferers. A
long-term bufferer keeps the message for 1 second. The
ﬁgure shows that the resulting buffer requirements are
substantially smaller than that for the Bimodal Multicast
protocol.
The amount of buffer space in Bimodal Multicast can
be reduced if a member buffers received messages for
a shorter period of time. In order to be comparable to
RRMP, a member should buffer a message for approxi-
mately 250ms. However, we have shown in [15] that a
noticeable fraction of message losses in Bimodal Multi-
cast may take longer than 250ms to recover due to ran-
domization. If a message loss cannot be recovered after
a certain amount of time, the protocol gives up on the
message and reports the loss to the application. Con-
sequently, the application may experience a higher loss
rate if the amount of buffering time is reduced.
One concern with the two-phase buffering scheme in
the RRMP protocol is its potential negative impact on
error recovery latency: after a message has become idle
(i.e. no request for this message has been received for
50ms), only a subset of members in a local region will
continue to buffer the message. If a member discards
a message and then later receives a retransmission re-
quest for that message, it cannot answer the request it-
self and needs to search for a bufferer of the message.
This is usually not a problem when all members are in a
local area network, or when message losses occur ran-
domly and independently, because our previous work
has demonstrated that error recovery latency in this case
is much smaller than 50ms [15].
The situation is quite different in a wide area net-
work where all members in a region may miss the same
message. To study the behavior of the RRMP protocol
under such situations, we conduct another experiment
where we emulate a wide area network by dividing the
30 members evenly into two local regions. The sender
is in one of the regions. Messages sent within a local
region experience the normal delay of the underlying
physical network. Messages sent between the two re-
gions have an additional delay of 30ms and a random
loss probability of 5 to emulate wide area links. (No
loss is introduced on messages sent within a local re-
gion.) Because all members in the downstream region
will miss the same message, the lost message can only
be repaired through the remote recovery phase. Due to
the long latency between the two regions (the round trip
time is larger than 50ms), a member in the sender’s re-
gion may receive a remote request from a downstream
member, asking for a message that it has already dis-
carded. In this case it needs to search for a bufferer of
the message.
As a target for comparison, we implemented a single-
phase buffering scheme in which all members continue
to buffer an idle message for 1 second (i.e. every mem-
ber is a long-term bufferer). We compare the error re-
covery latency between the two schemes and show the
results in Figure 10. The x-axis is the error recovery
latency in milliseconds and the y-axis is the percentage
of message losses that are recovered within the corre-
sponding amount of time. The ﬁgure indicates that the
two-phase buffering scheme incurs only a small perfor-
mance penalty in error recovery latency while providing
a substantial reduction in buffer requirements.
6 Discussion
In RRMP, a member may discard a message before
the message has been received by all members in the
group. This is in contrast to stability detection pro-
tocols where a message is discarded only after it has
been delivered everywhere. Consequently, our buffer-
ing scheme introduces a small probability of violating
the reliability guarantee of the multicast service. Such
probability can be made arbitrarily small with carefully
chosen parameters for the protocol, but still must be ac-
counted for when designing an application.
Applications that require a stronger guarantee should
use a protocol that provides better reliability, such as vir-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply. 
)
%
t
(
e
g
a
n
e
c
r
e
P
100
90
80
70
60
50
40
30
20
10
0
60
61
62
single−phase buffering
two−phase buffering   
63
64
65
66
Error recovery latency (ms)
67
68
69
70
Figure 10. Comparison of error recovery
latency with two buffering schemes.
tual synchrony [1]. The probabilistic guarantees offered
by RRMP have the beneﬁt of superior scalability and
intrinsic robustness in networks subject to message loss
and process failures, but are not appropriate when abso-
lute guarantees of reliability are needed.
7 Related Work
In the RRMP protocol, the set of long-term buffer-
ers are chosen randomly from all receivers in a region.
Previously we proposed a deterministic algorithm [12]
that chooses a subset of receivers in a group to serve as
bufferers using a hash function as described in Section 1.
It is interesting to compare these two approaches.
We believe that the choice reﬂects a trade-off between
network trafﬁc and computation overhead. Under the
deterministic algorithm, a receiver can ﬁnd out the set of
bufferers for a message by applying the hash function to
the network address of each member in its region. This
avoids the latency and network trafﬁc associated with
the search process. However, it incurs certain compu-
tation overhead because the hash function needs to be
calculated each time a message is received. In [12] van
Renesse proposed the design of an efﬁcient hash func-
tion.
One advantage of the randomized algorithm is that
it allows easy adaptation to group membership dynam-
ics: when a receiver voluntarily leaves the group, it can
transfer messages in its long-term buffer to randomly se-
lected receivers in its region. It is not clear how this can
be done with a deterministic algorithm.
lpbcast
protocol
is a gossip-based message dissemination
that has been used to implement a pub-
lish/subscribe system [6]. It uses a scalable membership
management algorithm where each member maintains
membership information for only a random subset of
members in the group. In addition, the protocol uses an
age-based garbage collection scheme to purge old mes-
sages from the system [10]. More speciﬁcally, a member
in this protocol associates an age with each message in
its buffer. The age is initialized to 0 when the message
is ﬁrst received and is updated in each gossip round to
reﬂect the amount of time the message has spent in the
system. A member discards messages with a high age
when its buffer is full.
A common goal of both lpbcast and RRMP is to allo-
cate buffer space to useful messages in the system. How-
ever, the two protocols are different in signiﬁcant ways.
In lpbcast, a member sends a gossip message to some
randomly selected destinations periodically. Messages
that have been gossiped for a long time tend to be deliv-
ered by many processes. Such messages are considered
less useful to buffer than recently published messages.
In contrast, a member in RRMP sends retransmission
requests to randomly selected members upon detection
of a message loss. Messages that have been requested
recently are likely to be needed by other members. Such
messages are buffered for a longer period of time under
our feedback-based buffering scheme. Moreover, the
protocol employs a two-phase buffering algorithm that
scales well in a heterogenous network.
8 Conclusion
Designing an efﬁcient buffer management algorithm
is challenging in large multicast groups where no mem-
ber has complete group membership information and the
delivery latency to different members could differ by or-
ders of magnitude. This paper has presented an inno-
vative two-phase buffering algorithm that explicitly ad-
dresses variations in delivery latency seen in large multi-
cast groups. Unlike tree-based protocols where a repair
server bears the entire burden of buffering messages for
a local region, RRMP achieves better load balancing by
spreading the load of buffering among all members in
the region. Compared with stability detection protocols,
our buffering algorithm has low trafﬁc overhead because
it does not require periodic exchange of message history
information among members in the group. Simulation
and experimental results demonstrate that the algorithm
has good performance.
Although we present our buffer optimization in the
framework of the RRMP protocol, similar techniques
can be applied to other reliable multicast protocols as
well. In the following we summarize the main ideas in
our algorithm and discuss how they can be applied to the
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply. 
SRM protocol:
(cid:15) The dissemination status of the initial IP multicast
for each message can be different. A good buffer-
ing algorithm should adaptively allocate buffer
space to messages most needed in the system.
(cid:15) Retransmission requests can be used as feedback
to estimate the dissemination status of a multicast
message. In the SRM protocol, retransmission re-
quests and replies are multicast to the entire group.
If a receiver has not received any request for a mes-
sage after a sufﬁciently long period of time, it can
conclude that the message is stable. Such informa-
tion can be helpful to the application in managing
its buffer space.
(cid:15) In a large multicast group, it may take a long time
for a message to become stable. While research
on stability detection focuses on optimizing buffer
space after a message has become stable, our work
aims to reduce buffer space even before stability
has been achieved. In the context of SRM, instead
of having every receiver buffer a message until the
message is stable, a randomly selected subset of re-
ceivers can serve as bufferers for the message.
(cid:15) In a wide area network, the latency between two re-
gions can be much higher than the latency within a
region. Our buffering algorithm addresses this dif-
ference in latency by dividing buffer space into two
parts: the short-term buffer allows a local loss to
be recovered quickly within the local region, while
the long-term buffer serves to satisfy remote re-
quests from downstream regions without consum-
ing too much buffer space. Although the origi-
nal SRM protocol is unstructured, extensions have
been made to introduce an error recovery hierarchy
into the protocol [11, 14]. Our two-phase buffering
scheme can be applied in such a hierarchy.
Acknowledgments
We would like to thank Fred Douglis and the anony-
mous reviewers for comments on an early draft of the
paper.
References
[1] K. P. Birman. Building Secure and Reliable Network Ap-
plications. Manning Publishing Company and Prentice
Hall, 1997.
[2] K. P. Birman, M. Hayden, O. Ozkasap, Z. Xiao,
M. Budiu, and Y. Minsky. Bimodal multicast. In ACM
Transactions on Computer Systems, May 1999.
[3] D. D. Clark and D. L. Tennenhouse. Architectural con-
In Pro-
siderations for a new generation of protocols.
ceedings of ACM SIGCOMM, 1990.
[4] S. E. Deering and D. R. Cheriton. Multicast routing in
In ACM
datagram internetworks and extended LANs.
Transactions on Computer Systems, May 1990.
[5] R. Durrett. The Essentials of Probability. Duxbury
Press, 1994.
[6] P. T. Eugster, R. Guerraoui, S. B. Handurukande, A. M.
Lightweight proba-
Kermarrec, and P. Kouznetsov.
bilistic broadcast.
In Proceedings of the International
Conference on Dependable Systems and Networks, July
2001.
[7] S. Floyd, V. Jacobson, S. McCanne, C.-G. Liu, and
L. Zhang. A reliable multicast framework for light-
weight sessions and application level framing. In Pro-
ceedings of ACM SIGCOMM, 1995.
[8] K. Guo and I. Rhee. Message stability detection for re-
In Proceedings of IEEE INFOCOM,
liable multicast.
2000.
[9] H. Holbrook, S. Singhal, and D. Cheriton.
Log-
based receiver-reliable multicast for distributed interac-
tive simulation.
In Proceedings of ACM SIGCOMM,
1995.
[10] P. Kouznetsov, R. Guerraoui, S. B. Handurukande, and
A. M. Kermarrec. Reducing noise in gossip-based reli-
able broadcast. In Proceedings of the 20th IEEE Sympo-
sium on Reliable Distributed Systems, Oct. 2001.
[11] C.-G. Liu, D. Estrin, S. Shenker, and L. Zhang. Local
error recovery in SRM: Comparison of two approaches.
In IEEE/ACM Transactions on Networking, Dec. 1998.
[12] O. Ozkasap, R. van Renesse, K. P. Birman, and Z. Xiao.
Efﬁcient buffering in reliable multicast protocols. In In-
ternational Workshop on Networked Group Communi-
cation, Nov. 1999.
[13] S. Paul, K. Sabnani, J. Lin, and S. Bhattacharyya. Re-
liable multicast transport protocol (RMTP).
In IEEE
Journal on Selected Areas in Communication, special is-
sue on Network Support for Multipoint Communication,
1997.
[14] P. Sharma, D. Estrin, S. Floyd, and L. Zhang. Scal-
able session messages in SRM using self-conﬁguration.
Technical report, University of Southern California,
1998.
[15] Z. Xiao. Efﬁcient Error Recovery for Reliable Multicast.
PhD thesis, Cornell University, Jan. 2001.
[16] Z. Xiao and K. P. Birman. A randomized error recovery
algorithm for reliable multicast. In Proceedings of IEEE
INFOCOM, Apr. 2001.
[17] R. Yavatkar, J. Grifﬁoen, and M. Sudan. A reliable dis-
semination protocol for interactive collaborative appli-
cations. In Proceedings of ACM Multimedia, 1995.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:17 UTC from IEEE Xplore.  Restrictions apply.