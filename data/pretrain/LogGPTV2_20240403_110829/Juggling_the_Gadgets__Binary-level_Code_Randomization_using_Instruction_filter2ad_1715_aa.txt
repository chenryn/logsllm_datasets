title:Juggling the Gadgets: Binary-level Code Randomization using Instruction
Displacement
author:Hyungjoon Koo and
Michalis Polychronakis
Juggling the Gadgets: Binary-level Code Randomization
using Instruction Displacement
Hyungjoon Koo
Stony Brook University
PI:EMAIL
ABSTRACT
Code diversiﬁcation is an effective mitigation against return-oriented
programming attacks, which breaks the assumptions of attackers
about the location and structure of useful instruction sequences,
known as “gadgets.” Although a wide range of code diversiﬁcation
techniques of varying levels of granularity exist, most of them rely
on the availability of source code, debug symbols, or the assumption
of fully precise code disassembly, limiting their practical applica-
bility for the protection of closed-source third-party applications.
In-place code randomization has been proposed as an alternative
binary-compatible diversiﬁcation technique that is tolerant of par-
tial disassembly coverage, in the expense though of leaving some
gadgets intact, at the disposal of attackers. Consequently, the possi-
bility of constructing robust ROP payloads using only the remaining
non-randomized gadgets is still open.
In this paper we present instruction displacement, a code diversiﬁ-
cation technique based on static binary instrumentation that does not
rely on complete code disassembly coverage. Instruction displace-
ment aims to improve the randomization coverage and entropy of
existing binary-level code diversiﬁcation techniques by displacing
any remaining non-randomized gadgets to random locations. The
results of our experimental evaluation demonstrate that instruction
displacement reduces the number of non-randomized gadgets in the
extracted code regions from 15.04% for standalone in-place code
randomization, to 2.77% for the combination of both techniques. At
the same time, the additional indirection introduced due to displace-
ment incurs a negligible runtime overhead of 0.36% on average for
the SPEC CPU2006 benchmarks.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
Keywords
Code diversiﬁcation; return-oriented programming
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897863
Michalis Polychronakis
Stony Brook University
PI:EMAIL
1.
INTRODUCTION
The deployment of non-executable page protections in recent
operating systems has prompted a shift from code injection to code
reuse attacks [23, 35, 50]. In a code reuse attack, after the control
ﬂow of a vulnerable process is hijacked, execution is diverted to code
that already exists in the address space of the vulnerable process,
instead of externally introduced code. Return-oriented programming
(ROP) [50] has become the de facto code reuse technique, as the
stitching of short instruction sequences (called “gadgets”) allows
for increased ﬂexibility in achieving arbitrary code execution, even
in the presence of additional protection mechanisms such as control
ﬂow integrity [15, 16, 21, 24, 28, 47].
Constructing a functional ROP exploit requires precise knowl-
edge of the location and structure of the code in a vulnerable process,
and thus various protections aim to break these two assumptions.
Address space layout randomization (ASLR) [44] randomizes the
load address of shared libraries and main executables to prevent the
reuse of code from known locations. Although incomplete ASLR
coverage often leaves enough code mapped in static locations to
allow the construction of functional ROP payloads [26, 32, 43, 59],
even when a process is fully randomized, memory disclosure bugs
can be used to leak the base address of code segments. This allows
exploits to dynamically adjust gadget offsets in the ROP payload
before executing it, improving this way reliability for frequently
updated target applications, such as browsers and document view-
ers [6, 7, 10, 34, 37, 49].
To mitigate the effect of ASLR bypasses, code diversiﬁcation
techniques [11, 12, 22, 30, 33, 41, 55] change not only the location
but also the structure of code, breaking the assumptions of attack-
ers about existing gadgets. Even if the offsets of some gadgets in
the original program are known, the same offsets in a diversiﬁed
instance of the same program will correspond to arbitrary instruc-
tion sequences, rendering any ROP payloads constructed based on
the original code image unusable. In feature-rich applications with
scripting support, however, malicious script code can leverage a
memory leak to dynamically scan the code segments of a process,
pinpoint useful gadgets, and synthesize them into a functional ROP
payload at runtime. Such “just-in-time” ROP (JIT-ROP) attacks [52]
can be used to effectively bypass code diversiﬁcation protections.
Code diversiﬁcation can also be bypassed under certain circum-
stances by remotely leaking [13] or inferring [48] what code exists
at a given memory location.
A crucial requirement for the successful operation of a JIT-ROP
exploit is the ability to read the executable memory segments of
the vulnerable process through a memory disclosure vulnerability.
Based on this observation, recent works have proposed the enforce-
ment of an “execute-no-read” policy to allow instruction fetches
but prevent memory reads from code pages, and thus block any
23on-the-ﬂy gadget discovery attempt. As the x86 and x86-64 archi-
tectures provide only “write” and “execute” memory page protection
bits, execute-only policies are enforced in other ways, including
page table manipulation [8], split TLBs [27], virtualization exten-
sions [19, 54, 57], or techniques based on a lightweight form of
software fault isolation [14].
Either as a standalone defense, or as a prerequisite of execute-
only memory protections, code diversiﬁcation is an effective defense
against ROP exploits. From a practical perspective, however, the
applicability of most of the existing techniques for the protection
of third-party applications depends on the availability of source
code [1, 11, 12, 33], debug symbols [3, 4], or the assumption of
accurate code disassembly [30,55,58]. Unfortunately, achieving full
disassembly coverage and precision is a challenging proposition,
especially for the complex closed-source programs that have been
plagued by ROP exploits in the wild, such as Windows browsers
and document viewers.
In-place code randomization [41], on the other hand, is a code di-
versiﬁcation technique that can be applied on stripped binaries even
without complete disassembly coverage. This is achieved through a
set of narrow-scoped code transformations that eliminate or proba-
bilistically alter the functionality of short instruction sequences that
can be used as ROP gadgets, without changing the location or size
of basic blocks. Unavoidably, however, the opportunistic nature of
the applied transformations results in incomplete randomization cov-
erage, leaving many unaffected gadgets to the disposal of attackers.
Based on the results reported by Pappas et al. [41], 82% of the gad-
gets in the correctly disassembled code of various Windows binaries
could be modiﬁed on average. Although the authors report that two
automated ROP payload construction tools were unable to construct
a functional payload using solely the remaining unmodiﬁable gad-
gets, this does not exclude the possibility that a functional payload
could still be constructed using only non-randomized gadgets, e.g.,
in a manual way or using an advanced ROP compiler.
Code diversiﬁcation techniques that do not rely on fully precise
code disassembly are an attractive defense due to their practical
applicability on even complex binaries. Increasing their randomiza-
tion coverage in the face of imprecise disassembly is important to
improve resilience against attacks that may rely on unmodiﬁable
gadgets for the construction of ROP payloads. Furthermore, recent
work on binary-level execute-only memory protections against JIT-
ROP attacks [8, 54, 57] necessitates the development of effective
code diversiﬁcation techniques compatible with complex binary
executables—without enough code diversiﬁcation coverage, a func-
tional JIT-ROP exploit may still be possible.
As a step towards improving the current state of the art in binary-
level code diversiﬁcation techniques for COTS software, in this
paper we present instruction displacement, a new code randomiza-
tion technique based on static binary instrumentation that does not
rely on complete code disassembly coverage. Instruction displace-
ment relocates sequences of instructions that contain gadgets into
random locations, and overwrites the original code with trap instruc-
tions, effectively preventing their use by an attacker. The end goal
of the proposed technique is to improve the randomization coverage
and entropy achieved by existing code diversiﬁcation techniques
with a minimal performance impact.
We have implemented a prototype of instruction displacement for
Windows binaries, and applied it on a wide range of closed source
applications, such as Microsoft Ofﬁce and Adobe Reader. The
results of our experimental evaluation demonstrate that instruction
displacement reduces the number of non-randomized gadgets from
15.04% for standalone in-place code randomization, to 2.77% for
the combination of both techniques (or from 21.45% to 8.96%,
when also considering the non-disassembled code regions). At the
same time, the additional indirection introduced due to displacement
incurs a negligible runtime overhead of 0.36% on average for the
SPEC CPU2006 benchmarks.
In summary, our work makes the following main contributions:
• We present instruction displacement, a practical code diversi-
ﬁcation technique for stripped binary executables, applicable
even with partial code disassembly coverage.
• We have implemented a prototype of the proposed instruction
displacement technique for Windows binaries, and describe
in detail its design and implementation.
• We have experimentally evaluated of our prototype imple-
mentation, and demonstrate that it reduces the number of
non-randomized gadgets from 15.04% for standalone in-place
code randomization, to 2.77% for the combination of both
techniques, while incurring a negligible runtime overhead of
0.36% for the SPEC CPU2006 benchmarks.
2. BACKGROUND AND MOTIVATION
The complexity of static binary code analysis when dealing with
complex stripped executables poses challenges for code diversiﬁca-
tion protections. Being a provably undecidable problem [56], accu-
rate code disassembly and complete control ﬂow graph extraction is
complicated due to intermixed code and data, jump tables, computed
jumps, callback and exception handling routines, and other code in-
tricacies. Although at the source code level (or when debug symbols
are available) it is possible to perform extensive transformations
that effectively randomize all available gadgets [1, 11, 12, 20, 33], at
the binary level it is challenging to apply aggressive ﬁne-grained
code diversiﬁcation, such as randomizing the location of functions
or basic blocks.
Existing attempts to achieve this, such as Binary Stirring [55],
rely on various heuristics to fully and precisely extract all code and
code references, so that after randomization all appropriate points
can be ﬁxed appropriately. Unfortunately, however, although such
approaches may work well for relatively simple executables, they do
not scale for large and complex COTS software, such the vulnerable
Windows browsers and document viewers that are being targeted in
the wild. Indeed, Wartell et al. [55] evaluate Binary Stirring using
only main executables (not dynamic libraries) taken from simple
utility programs. Introducing a runtime component after static anal-
ysis [30], on the other hand, can allow for the randomization of
arbitrarily complex programs, in the expense though of increased
runtime overhead.
From a practical perspective, a different compromise can be made
by accepting the imprecision of static code analysis, and developing
binary-compatible code diversiﬁcation techniques that can tolerate
partial code extraction in the expense of the achieved randomization
coverage. In-place code randomization (IPR) [41], for instance,
uses four different narrow-scoped code transformations that proba-
bilistically alter the functionality of (or eliminate completely) short
instruction sequences that can be used as gadgets.
Speciﬁcally, instruction substitution replaces existing instructions
with functionally-equivalent ones (of the same or smaller length), to
alter any overlapping instructions that may be part of a gadget. Basic
block instruction reordering changes the order of instructions within
a basic block according to an alternative, functionally equivalent
instruction scheduling, again affecting any overlapping gadgets.
Register preservation code reordering changes the order of the
push  and pop  instructions that are often used at
function prologues and epilogues, respectively, to alter the semantics
24of any useful “pop; pop; ret;” gadgets that are often found at
function epilogues. Lastly, register reassignment swaps the register
operands of instructions throughout overlapping live ranges, again
with the goal to alter the semantics of any gadgets that involve those
registers.
By not altering the location and size of basic blocks and functions,
IPR diversiﬁes only the accurately extracted parts of the code, en-
abling compatibility with third-party stripped binaries. The achieved
partial code randomization, however, unavoidably leaves a fraction
of gadgets completely unaffected by the applied randomization.
Speciﬁcally, Pappas et al. [41] report that on average, 18% of the
gadgets located in the extracted code regions remained unmodiﬁed.
When also considering the executable regions that were left out due
to incomplete disassembly coverage, this percentage increases to
23.1% of all gadgets in the binary. Although the authors demonstrate
that two automated ROP payload construction tools did not manage
to construct a functional ROP payload using solely the remaining
23.1% of the gadgets, as they admit, this does not preclude that
an attacker could manually construct a robust payload using solely
unmodiﬁable gadgets.
Furthermore, some of the randomized gadgets are affected only in
a minimal and predictable way that may still allow for their use. For
instance, an attacker could still use a reordered function epilogue