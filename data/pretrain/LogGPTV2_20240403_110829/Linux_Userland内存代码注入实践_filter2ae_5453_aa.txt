# Linux Userland内存代码注入实践
|
##### 译文声明
本文是翻译文章，文章原作者 sektor7，文章来源：blog.sektor7.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
突破目标环境后，后续常见的攻击活动包括踩点、信息收集以及权限提升。当目标系统默认情况下没有提供所需工具，或者攻击者需要加快后续侦查行动时，攻击者可能就需要其他功能。
在大多数情况下，攻击者会将专用工具上传到目标系统中运行。这种方法最大的问题是磁盘上会留下攻击痕迹，如果被检测到，防御方可能会获取其他信息，从而危及整个攻击活动。
在最近几年，已经有许多研究人员分析过如何在不落盘的情况下，将代码注入Windows操作系统中（参考[[1]](https://github.com/fdiskyou/Zines/blob/master/29a/29a-6.zip),
[[2]](http://www.hick.org/code/skape/papers/remote-library-injection.pdf),
[[3]](https://www.dc414.org/wp-content/uploads/2011/01/242.pdf),
[[4]](https://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/),
[[5]](https://clymb3r.wordpress.com/2013/04/06/reflective-dll-injection-with-powershell/)及其他资料）。关于`*NIX`系统（特别是Linux）也有许多研究成果，过去有些人提出了非常好的思路，如skape & jt
[[2]](http://www.hick.org/code/skape/papers/remote-library-injection.pdf)、the
grugq [[6]](https://grugq.github.io/docs/ul_exec.txt)、Z0MBiE
[[7]](http://z0mbie.daemonlab.org/infelf.html), Pluf & Ripe
[[8]](http://phrack.org/issues/63/11.html)、Aseem Jakhar
[[9]](http://www.securitybyte.org/resources/2011/presentations/runtime-thread-injection-and-execution-in-linux-processes.pdf)、mak
[[10]](https://github.com/mak/pyself)以及Rory McNamara
[[11]](https://blog.gdssecurity.com/labs/2017/9/5/linux-based-inter-process-code-injection-without-ptrace2.html)。
## 二、攻击场景
想象一下，我们正坐在一个闪烁的光标前，在刚入侵的Linux服务器上使用shell，此时我们想在不留下任何痕迹的情况下继续探索。我们需要运行其他工具，但不希望在主机上上传任何数据。或者，由于系统在已挂载分区上设置了`noexec`选项，因此无法运行任何程序。此时我们还能怎么办？
本文介绍了如何绕过运行限制，利用目标系统上仅有的工具在目标主机上运行代码。在 _everything-is-a-file_
（“一切都是文件”）的系统上，想做到这一点有点难度，但如果我们跳出思维限制，尽可能使用系统提供的功能，还是能找到可行性。
Sektor7实验室做了一些实验，研究新的、经过改进的攻击方法，希望能在本文中与大家共享。
## 三、Payload（Shellcode）投递
对攻击者而言，找到可靠又隐蔽的方法将payload或者工具投递到目标主机总是非常有挑战的一个任务。
最常见的方法是连接到C2服务器或者第三方服务器，这些服务器上托管着攻击所需工具，可以下载到目标系统中。这些操作可能会在网络基础架构上留下一些痕迹（如网络数据流、代理日志等）。
在许多情况下，攻击者会忽视目标主机上已经开放的一个控制通道：shell会话。攻击者可以将这个会话作为数据链路，将payload上传至受害系统中，无需与外部系统建立新的TCP连接。这种方法存在一些缺点，如果出现网络故障，那么数据传输和控制信道可能会发生中断。
在本文中，我们介绍了两种投递方法：out-of-band（带外）以及in-band（带内），并且主要使用后一种方法来传输代码（特别是shellcode）。
## 四、演示环境
我们的实验环境如下：
  * 受害主机：运行最新版的Kali Linux虚拟机
  * 攻击主机：运行Arch Linux系统，作为VM的宿主系统
  * SSH连接：攻击主机到受害主机的SSH连接，模拟shell访问
  * 简单的`Hello World` shellcode，x86_64架构（参考附录A）
## 五、内存运行方法
###  tmpfs
攻击者用来存放文件的第一个位置是`tmpfs`。`tmpfs`会将所有数据存入内核内部缓存中，并且动态扩张和缩小以适配其中包含的文件。另外，从`glibc
2.2`开始，`tmpfs`会挂载到`/dev/shm`目录，用于POSIX共享内存（`shm_open()`、`shm_unlink()`）。
比如，Kali系统中已挂载的`tmpfs`虚拟文件系统目录如下所示：
默认情况下，已挂载的`/dev/shm`并没有设置`noexec`标志。如果某个处女座管理员设置了该标志，那么就能有效防住这种方法：攻击者虽然能存放数据，但无法执行（`execve()`执行失败）。
后面我们还会提到`/dev/shm`。
###  GDB
**GNU Debugger**
是Linux上的模拟调试工具，虽然生产服务器上通常没有安装该工具，但我们偶尔可以在开发环境或者某些嵌入式/专用系统上找到该工具。`gdb(1)`
manual的说明如下：
> GDB主要能够提供如下功能，帮助我们捕捉程序运行中的bug：
>
>   * 启动程序，指定可能影响程序行为的任何因素；
>   * 在特定条件下停止程序运行；
>   * 检查程序运行时发生了什么事情；
>   * 修改应用中数据，这样就能尝试修正某个bug的影响，继续研究后续bug。
>
借助GDB的最后一个功能，我们可以在不落盘的情况下，在内存中运行shellcode。
首先我们需要将shellcode转换成byte字符串：
然后，在`gdb`上下文中运行`/bin/bash`，在`main()`处设置断点，注入shellcode然后继续运行，如下所示：
###  Python
**Python** 是一门非常流行的解释性语言，与GDB不同，我们经常可以在默认的Linux环境中使用Python。
我们可以使用许多模块（比如`ctypes`）来扩展Python的功能，`ctypes`库提供了C兼容的数据类型，允许我们调用DLL或者共享库中的函数。换句话说，`ctypes`可以构建类似C的脚本、利用外部库的强大功能并且直接访问内核的`syscall`。
为了使用Python在内存中运行shellcode，我们的脚本需要执行如下操作：
  * 将`libc`库载入Python进程中
  * `mmap()`用于shellcode的一片新的`W+X`内存区域
  * 将shellcode拷贝至新分配的缓冲区中
  * 使该缓冲区可以被调用（强制转换）
  * 调用缓冲区
完整的脚本如下所示（Python 2）：
整个脚本可以转换为经过Base64编码的字符串：
使用一条命令投递到目标主机上：
###  自修改dd
在极少数情况下，当上述方法都不能使用时，我们还可以使用许多Linux系统上默认安装一个工具。这款工具为`dd`（包含在`coreutils`软件包中），通常用来转换和拷贝文件。如果我们将该工具与`procfs`文件系统和`/proc/self/mem`文件（该进程的内存）结合起来，就找到了可能用来在内存中运行shellcode的一个小媒介。为了完成这个任务，我们需要强制`dd`动态修改自身数据。
`dd`运行时的默认行为如下所示：
而自修改的`dd`运行时如下所示：
我们首先需要的是找到`dd`进程中可以复制shellcode的地方。整个过程必须能在运行中稳定且可靠，因为我们操作的是会覆盖自己内存的、正在运行的一个进程。
在成功复制/覆盖操作后调用的代码是一个不错的对象，后面跟着的就是进程退出操作。我们可以在PLT（Procedure Linkage
Table，过程链接表）、`exit()`调用主代码片段中或者`exit()`之前完成shellcode注入。
覆盖PLT并不是一个稳定的操作，因为如果我们的shellcode过长，就会覆盖在调用`exit()`前会使用的某些关键部位。
进一步调查后，我们发现程序在调用`exit()`前会调用`fclose(3)`函数：
只有两个地方调用了`fclose()`：