The  instrumentation,  also  designated  as  built-in 
test  (BIT) 
capabilities, comprises  [8]: assertions,  a  reporter  method  and  a 
BIT  access  control,, as  explained  in  2.4.  These  capabilities  are 
available  through  an  abstract  class,  BuiltlnTest,  presented  in 
Figure 4. This superclass contains  the interfaces of  two methods: 
InvariantTest and  Reporter, and  it  was  created  to guarantee  a 
built-in  test interface independent from the target  class interface. 
The  target  class,  which  is  part  of  the  component  under  test, 
inherits these capabilities, that should be redefined  by the user. 
A setheset method could also be defined, to set an object to a 
predefined internal  state, independent of the object’s current state. 
This kind of method is not used in this study since the test of each 
transaction  sets the  object  to a  initial  state  (by  using  one  of  its 
constructors) and terminates by destroying it. 
Concat  implements  the  assertions  relative  to  class  invariant 
and  methods  pre  and  post  conditions  as  macros,  as  shown  in 
Figure 5. These are used  to check  whether  the  state of  an  object 
during a test  session is valid  or not. As  they  are useful  for  error 
detection, they serve as a partial oracle;  manually derived oracles 
are also used in complement. 
The BIT features  can  only be  accessed  if  the  class  is in  test 
mode,  which  is  set  by  the  user  through  BIT  access  control 
capability.  This  control  capability  prevents  the  misuse  of  BIT 
services; for the moment it consists in a compiler directive  which 
includes or excludes BIT capabilities. 
Parameter ( m5, 
‘n’, 
String, 
[‘pl ’, ‘p2’, ‘~3’1 ) 
... 
I/ identifies the method 
11 parameter name 
11 parameter type. Same as for attributes 
11 Description of the test model: 
Node (n I ,  
Node (n I ,  
No, 
No, 
1, 
1, 
[ml. & I )  
[ml. & I )  
... 
Edge (n I ,  
n4) 
... 
I/ node identifier 
11 Staning node? 
.. 
I/ number of outgoing edges 
/I list of methods that constitute the node 
/I list of methods that constitute the node 
-.--. -... 
I...--. 
I“ 
I ,  
I/ starting node 
11 ending node 
1 
/I checks class invariant by calling the macro defined in the tool’s macro library (Classlnvariant) 
/I stores object state into a log file which can be  used for post test analysis 
// Concat’s macro library: contains the macros 
11 necessary for introducing  assenions into a class. 
11 The user should provide the logic expression which 
I/ defines the predicate to be evaluated. 
#define Classlnvariant ( exp )  \ 
if ( ! (exp)) 
throw “Invariant is violated!”; 
#define Precondition ( exp) \ 
if ( ! (exp)) 
throw “Pre-condition is violated!”; 
#define Postcondition ( exp ) \ 
if ( ! (exp)) 
throw “Post-condition is violated!”; 
lure 5 - Macros used for assertion definition. 
F 
3.4.  Driver generation 
To  use  a  self-testable  component  a  test 
infra-structure  is 
necessary  which  support  the  following  functions:  test  driver 
generation,  test  history  creation  and  maintenance,  test  retrieval, 
test  execution,  test  result  checking  and  test  report.  The  current 
implementation  of  the  Concat  tool  supports  the  first  three 
functions;  the  test  selection  strategy  used  for  that  purpose  is 
presented in the first item. Test history creation, maintenance and 
retrieval  is partially implemented, and is the subject of the second 
item  of  this  section.  The  user  manually  performs  the  other 
functions. 
3.4.1.  Test selection strategy.  Test selection  is entirely 
performed  by  the  Driver  Generuror, implemented as  part  of  the 
The  Driver 
test-infra-structure  provided  by  Concat  [33]. 
Generator creates test cases according to the transaction  coverage 
criterion  that  requires  exercising  each  individual  transaction  at 
155 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:37 UTC from IEEE Xplore.  Restrictions apply. 
The  methods  are  called  inside  a  try-block,  so  that  an 
exception  generated  when  an  assertion  is  violated  could  be 
captured  and  treated  by  the  driver.  The  (specific) driver  is  an 
executable test suite. Therefore, test cases can be used in different 
test  suites.  A test  suite is considered  as  “executable”  after  being 
completed  with  the  values  of  structured  parameter  types  as  well 
as  any  global  data  and  stubs.  Figure 7  shows  an  example  of  an 
executable  test sequence. 
# include  
# include “CUT.cc” 
# include “TestSuite.cc” 
# define TestMode 
void main ( ) { 
//file containing the instrumented 
//class under test 
//file containing the test suite 
//  test mode selection 
//create instance of  the CUT, passing it as parameter 
//for the test cases 
CUT’ obi0 = new CUT; 
TestCaseO (objO); 
. . .  
CUT’  objN  = new CUT; 
TestCaseN (objN); 
Figure 7. Executable test suite structure. 
Another issue  that should be taken 
3.4.2.  Tests reuse. 
Into  account  is  the  reuse  mechanism  for  the  components  test 
resources.  Since  in  this  study  a  component  is  supposed  to  be  a 
unique  class, reuse can occur by  inheritance,  by parameterization 
or by  composition, as explained  in  2.1. In  the  last  case, the class 
is not  modified:  its instances  are used  as attributes  or parameters 
of  methods.  In  this  case,  test  resources  can  be  reused  without 
modifications.  When using a generic  class, all the  user should do 
is to indicate which parameter types are to be used during tests, as 
mentioned  in the previous section. So, the concern here is how to 
reuse test resources  when subclasses are created. 
the 
Harrold  et  al.  [20]  proposed  an  incremental  class”&ing 
technique  based  on 
inheritance  hierarchy.  Each  class 
possesses  a testing  history that associates  each test  case with  the 
feature it tests. To generate tests for a subclass, its parent’s  testing 
history  is  incrementally  updated  to  reflect  differences  from  the 
parent,  i.e., modified  (redefined)  or newly defined  features.  With 
this technique it is possible  to identify  new  features  of  a subclass 
for  which  new  test  cases  must  be  generated,  as  well  as  the 
modified  one’s that must be retested.  In  this technique,  inherited 
features that  are not  modified in the context of  the  subclass  need 
retest  only  if  they  interact  with  modified  or  newly  defined 
features.  The  technique  assumes  a  C++  language  model,  but 
imposes  some  constraints  on  inheritance  mechanism:  (i)  only 
single inheritance  is considered,  that  is, each  class  has  only  one 
parent; (ii) modifications  to an  inherited  method  cannot  alter  its 
signature  (i.e., a modified  method contains  the  same argument’s 
list  of  the  parent’s):  and  (iii)  the  visibility  of  a  feature  in  the 
subclass  is  at  least  as  restrictive  as  in  the  parent  class,  and 
possible  types of  visibility  are: private  (visible only in the  parent 
class, hidden in the subclass),  protected  (visible in the parent  and 
in the subclass) and public (visible to all). 
We  used 
in  our  study  with  a  slight 
modification:  instead  of  associating  a  test  case  with  a  class 
this  approach 
//a test case is named by the Driver Generator as 
// TestCase 
void TestCaseO (ClassType’ CUT) ( 
// create variable that contains the current method 
//name, for documentation purpose only 
char’ CurrentMethod = new char [30]; 
//opens the log file 
ofstream LogFiIe(“ResuIt.txt”, ios::app); 
if  (!LqFile) cout  Method1 (321, 594, “Mary”); 
CUT -> InvariantTest( ); 
LogFile  Reporter (“Resuktxt”); 
LogFile << ‘‘In”; 
LogFile.close( ); 
delete CUT; 
I 
I 
1
1
//in case an exception is raised, the name of  the called method is 
//stored in the log file 
catch (Error& er) ( 
LogFile << “TestCaseTCO h”; 
LogFile.flush( ); 
cout << ”. . .”; 
LogFile << er.msg << “In” 
LogFile C <  “Method called: “ << CurrentMethod << “W; 
LogFile.flush( ); 
CUT -5 Reporter (“Result.txt”); 
LogFile << ‘In“; 
LogFile.close( ); 
1 
1
)
... 
156 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:37 UTC from IEEE Xplore.  Restrictions apply. 
feature (attribute or method),  we associated it with  a transaction. 
In  this  way  i t   is  possible  to  reuse  test  cases  generated  from  a 
parent’s  transaction:  if  the  transaction  in  the  subclass  contains 
only  methods  inherited  without  modification  (except  for  the 
constructor and destructor methods,  which  for this reason  are not 
part  of a test  case),  there’s no need to regenerate the test  case for 
that  transaction.  In  case  an  attribute  is  modified,  the  methods 
using  it  are  considered  as  modified,  since  we  are  supposing  a 
further  constraint:  attributes  are  not  part  of  a  class’s  public 
interface, being accessible only through  methods.  Of  course,  we 
are also assuming that specification  changes imply that the  tester 
updates assertions  and t-spec. 
4.  Empirical evaluation 
used to introduce faults affecting the interactions among methods 
that  are part  of  a  transaction. Our aim  was to study whether  the 
generated test cases were able to reveal these faults. 
The  operators  used  in  the  experiments  reported  here  are 
presented in Table 1. They are a subset of  the  so-called  essential 
operators,  determined  to  reduce  time  and  cost  of  the  mutation 
analysis  [35]. 
This section  presents  results  of  the preliminary  evaluation  of 
the fault revealing effectiveness  of the test selection  strategy.  For 
this  empirical  evaluation  we  used  a  class  from  the  Microsoft 
Foundation  Class  (MFC)  library,  CObList,  which  implements  a 
linked  list,  and  one  derived  class,  CSortableObList,  obtained 
through  the  Internet,  which  implements  an  ordered  linked  list. 
These classes were chosen because: (i) the classes in MFC library 
already contain assertions,  and (ii) this library was used by a real- 
word application  that was also used as a case study [42]. 
To  assess  fault-revealing  power  of 
test  sets  generated 
according  to  a  given  criterion,  the  most  commonly  adopted 
method  is  mutation  analysis  [12]. Mutation  analysis consists  in 