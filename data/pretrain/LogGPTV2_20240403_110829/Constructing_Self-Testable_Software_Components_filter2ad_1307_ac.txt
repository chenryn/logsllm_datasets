### Instrumentation and Built-in Test (BIT) Capabilities

The instrumentation, also referred to as built-in test (BIT) capabilities, includes three main components: assertions, a reporter method, and BIT access control. These capabilities are detailed in Section 2.4 and are accessible through an abstract class called `BuiltInTest`, as illustrated in Figure 4. This superclass defines the interfaces for two methods: `InvariantTest` and `Reporter`. The purpose of this superclass is to provide a built-in test interface that is independent of the target class's interface.

The target class, which is part of the component under test, inherits these capabilities. Users must redefine these inherited capabilities. Additionally, a `setToState` method can be defined to set an object to a predefined internal state, independent of its current state. However, this method is not used in this study because each transaction sets the object to an initial state using one of its constructors and terminates by destroying it.

### Assertions and Macros in Concat

Concat implements assertions for class invariants and method pre- and post-conditions as macros, as shown in Figure 5. These macros are used to verify the validity of an object's state during a test session. They serve as a partial oracle for error detection, complemented by manually derived oracles.

### Access Control and Test Mode

The BIT features can only be accessed if the class is in test mode, which is set by the user through the BIT access control capability. This control prevents the misuse of BIT services and currently consists of a compiler directive that includes or excludes BIT capabilities.

### Driver Generation

To use a self-testable component, a test infrastructure is necessary to support functions such as test driver generation, test history creation and maintenance, test retrieval, test execution, test result checking, and test reporting. The current implementation of the Concat tool supports the first three functions. The test selection strategy, which is entirely performed by the `DriverGenerator`, is based on the transaction coverage criterion, requiring the exercise of each individual transaction.

#### Executable Test Suite Structure

The methods are called within a try-block to capture and handle exceptions generated when assertions are violated. A specific driver is an executable test suite, allowing test cases to be reused in different test suites. An example of an executable test sequence is shown in Figure 7.

```cpp
#include <iostream>
#include "CUT.cc"
#include "TestSuite.cc"
#define TestMode

int main() {
    // Create an instance of the CUT and pass it as a parameter for the test cases
    CUT* obj0 = new CUT;
    TestCase0(obj0);
    ...
    CUT* objN = new CUT;
    TestCaseN(objN);
}
```

### Test Reuse

Another important consideration is the reuse mechanism for test resources. In this study, a component is considered a unique class, and reuse can occur through inheritance, parameterization, or composition. For subclasses, Harrold et al. [20] proposed an incremental classification technique based on the inheritance hierarchy. Each class has a testing history that associates each test case with the feature it tests. To generate tests for a subclass, the parent's testing history is incrementally updated to reflect differences from the parent, such as modified or newly defined features. This technique helps identify new features of a subclass that require new test cases and modified features that need retesting.

### Empirical Evaluation

This section presents the results of a preliminary evaluation of the fault-revealing effectiveness of the test selection strategy. For this empirical evaluation, we used a class from the Microsoft Foundation Class (MFC) library, `CObList`, which implements a linked list, and a derived class, `CSortableObList`, which implements an ordered linked list. These classes were chosen because they already contain assertions and are used in real-world applications.

To assess the fault-revealing power of test sets generated according to a given criterion, mutation analysis is commonly used. Mutation analysis involves introducing faults into the code and evaluating whether the generated test cases can detect these faults. The operators used in the experiments are a subset of essential operators, designed to reduce the time and cost of mutation analysis, as presented in Table 1.