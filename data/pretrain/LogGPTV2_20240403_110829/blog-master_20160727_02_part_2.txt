--------------------------------------------------------------  
 $2a$10$tvNK2H9mPu1tU5L6oAHdSeze5Hlz7G0y4oEKNg9SlGa06J2sywZHu  
(1 row)  
```  
\# 每次运算可以得到不同的hash值.    
```  
digoal=# select crypt('this is a pwd source', gen_salt('md5'));  
               crypt                  
------------------------------------  
 $1$p2Sg93iZ$SCdUePtZVuyIJBDO1cEYh1  
(1 row)  
digoal=# select crypt('this is a pwd source', gen_salt('bf',10));  
                            crypt                               
--------------------------------------------------------------  
 $2a$10$cgJiTAs55vMBqYR1kGMGXuMKZI4dsayna4wgEL4K7duYkD0g25ufW  
(1 row)  
```  
原因是gen_salt每次都会给出1个随机值.    
```  
digoal=# select gen_salt('bf',10);  
           gen_salt              
-------------------------------  
 $2a$10$qY0amXGalzj14rooSpTf5e  
(1 row)  
digoal=# select gen_salt('bf',10);  
           gen_salt              
-------------------------------  
 $2a$10$TmqxqmOd8R3scnPk25Pp2O  
(1 row)  
```  
计算好hash后匹配是怎么做的呢?    
看下面, hash值作为第二个参数, 得到的值就是hash值. 所以这样就可以进行匹配了.    
```  
digoal=# select crypt('this is a pwd source', gen_salt('bf',10));  
                            crypt                               
--------------------------------------------------------------  
 $2a$10$x5bQ0wcHc0.li1XcDbzSyOvpjPOKlzg.psbNaA33VH.gAfKbA7.IK  
(1 row)  
digoal=# select crypt('this is a pwd source', gen_salt('bf',10));  
                            crypt                               
--------------------------------------------------------------  
 $2a$10$X7D5eMxcaXNn.BPkPnb1GuSVxDUjNiO5M/9ss9GLHpgGq6s3hbPrG  
(1 row)  
digoal=# select crypt('this is a pwd source', '$2a$10$X7D5eMxcaXNn.BPkPnb1GuSVxDUjNiO5M/9ss9GLHpgGq6s3hbPrG');  
                            crypt                               
--------------------------------------------------------------  
 $2a$10$X7D5eMxcaXNn.BPkPnb1GuSVxDUjNiO5M/9ss9GLHpgGq6s3hbPrG  
(1 row)  
digoal=# select crypt('this is a pwd source', '$2a$10$x5bQ0wcHc0.li1XcDbzSyOvpjPOKlzg.psbNaA33VH.gAfKbA7.IK');  
                            crypt                               
--------------------------------------------------------------  
 $2a$10$x5bQ0wcHc0.li1XcDbzSyOvpjPOKlzg.psbNaA33VH.gAfKbA7.IK  
(1 row)  
```  
假设用它来存密码 :     
```  
digoal=# create table userpwd(userid int8 primary key, pwd text);  
CREATE TABLE  
digoal=# insert into userpwd (userid,pwd) values (1, crypt('this is a pwd source', gen_salt('bf',10)));  
INSERT 0 1  
```  
输入错误的密码, 返回假    
```  
digoal=# select crypt('this is a error pwd source', pwd)=pwd from userpwd where userid =1;  
 ?column?   
----------  
 f  
(1 row)  
```  
输入正确的密码, 返回真    
```  
digoal=# select crypt('this is a pwd source', pwd)=pwd from userpwd where userid =1;  
 ?column?   
----------  
 t  
(1 row)  
```  
crypt支持的算法如下 :     
Table F-15. Supported Algorithms for crypt()    
|Algorithm	|Max Password Length	|Adaptive?	|Salt Bits	|Description|  
|---|---|---|---|---|  
|bf	|72	|yes	|128	|Blowfish-based, variant 2a|  
|md5	|unlimited	|no	|48	|MD5-based crypt|  
|xdes	|8	|yes	|24	|Extended DES|  
|des	|8	|no	|12	|Original UNIX crypt|  
当然, crypt和gen_salt是以牺牲hash速度为代价来换取安全性的.    
|Algorithm	|Hashes/sec	|For [a-z]	|For [A-Za-z0-9]|  
|---|---|---|---|  
|crypt-bf/8	|28	|246 years	|251322 years|  
|crypt-bf/7	|57	|121 years	|123457 years|  
|crypt-bf/6	|112	|62 years	|62831 years|  
|crypt-bf/5	|211	|33 years	|33351 years|  
|crypt-md5	|2681	|2.6 years	|2625 years|  
|crypt-des	|362837	|7 days	|19 years|  
|sha1	|590223	|4 days	|12 years|  
|md5	|2345086	|1 day	|3 years|  
以上hash计算速度取自1.5G的奔腾4 CPU. 以及如下测试软件 :     
```  
crypt-des and crypt-md5 algorithm numbers are taken from John the Ripper v1.6.38 -test output.  
md5 numbers are from mdcrack 1.2.  
sha1 numbers are from lcrack-20031130-beta.  
crypt-bf numbers are taken using a simple program that loops over 1000 8-character passwords.   
That way I can show the speed with different numbers of iterations.   
For reference: john -test shows 213 loops/sec for crypt-bf/5.   
(The very small difference in results is in accordance with the fact that the crypt-bf implementation in pgcrypto is the same one used in John the Ripper.)  
```  
原则上, iter_count的选择以hash计算速度为准则, 以当前流行的CPU, 并且实测后取4-100每秒之间为宜.    
### PGP 加密函数  
PostgreSQL pgcrypto扩展包中的pgp加解密函数遵循OpenPGP (RFC 4880)标准.    
加密的PGP消息由2部分组成 :     
* 这个消息的会话密钥, 会话密钥可以是对称密钥或公钥.    
* 使用该会话密钥加密的数据, 可以选择加密选项例如    
```  
compress-algo, unicode-mode, cipher-algo, compress-level, convert-crlf, disable-mdc, enable-session-key, s2k-mode, s2k-digest-algo, s2k-cipher-algo  
```  
使用对称密钥加解密的函数如下 :     
```  
pgp_sym_encrypt(data text, psw text [, options text ]) returns bytea  
pgp_sym_encrypt_bytea(data bytea, psw text [, options text ]) returns bytea  
pgp_sym_decrypt(msg bytea, psw text [, options text ]) returns text  
pgp_sym_decrypt_bytea(msg bytea, psw text [, options text ]) returns bytea  
```  
options参考pgcrypto加密选项部分.    
#### PGP 对称加密举例  
使用对称密钥加密, 这里的对称密钥为'pwd'字符串 :     
```  
digoal=# select pgp_sym_encrypt('i am digoal', 'pwd', 'cipher-algo=aes256, compress-algo=2, compress-level=9');  
digoal=# select pgp_sym_encrypt('i am digoal', 'pwd', 'cipher-algo=bf, compress-algo=2, compress-level=9');  
                                                                          pgp_sym_encrypt                                             
------------------------------------------------------------------------------------------------------------------------------------  
--------------------------------  
 \xc30d0404030245811e051118cc136ed23f0198808f069b53264d4a08c2b5dcf3b1c39a34d091263f7f6b64a14808e6ffb32ccc09749105b9cc062d70c628357ab  
1e2474ff6d109dd083ce892cfa55706  
(1 row)  
```  
解密也需要使用加密时的对称密钥 :     