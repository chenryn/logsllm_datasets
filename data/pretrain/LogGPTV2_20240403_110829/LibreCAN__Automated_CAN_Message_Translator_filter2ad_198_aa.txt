title:LibreCAN: Automated CAN Message Translator
author:Mert D. Pes&apos;e and
Troy Stacer and
C. Andr&apos;es Campos and
Eric Newberry and
Dongyao Chen and
Kang G. Shin
LibreCAN: Automated CAN Message Translator
Mert D. Pesé, Troy Stacer, C. Andrés Campos, Eric Newberry, Dongyao Chen, and Kang G. Shin
University of Michigan
Ann Arbor, MI, USA
{mpese,trstacer,andcmps,emnewber,chendy,kgshin}@umich.edu
ABSTRACT
Modern Connected and Autonomous Vehicles (CAVs) are equipped
with an increasing number of Electronic Control Units (ECUs),
many of which produce large amounts of data. Data is exchanged
between ECUs via an in-vehicle network, with the Controller Area
Network (CAN) bus being the de facto standard in contemporary
vehicles. Furthermore, CAVs have not only physical interfaces but
also increased data connectivity to the Internet via their Telematic
Control Units (TCUs), enabling remote access via mobile devices. It
is also possible to tap into, and read/write data from/to the CAN
bus, as data transmitted on the CAN bus is not encrypted. This
naturally generates concerns about automotive cybersecurity. One
commonality among most vehicular security attacks reported to
date is that they ultimately require write access to the CAN bus.
In order to cause targeted and intentional changes in vehicle be-
havior, malicious CAN injection attacks require knowledge of the
CAN message format. However, since this format is proprietary
to OEMs and can differ even among different models of a single
make of vehicle, one must manually reverse-engineer the CAN
message format of each vehicle they target — a time-consuming
and tedious process that does not scale. To mitigate this difficulty,
we develop LibreCAN, which can translate most CAN messages
with minimal effort. Our extensive evaluation on multiple vehicles
demonstrates LibreCAN’s efficiency in terms of accuracy, coverage,
required manual effort and scalability to any vehicle.
CCS CONCEPTS
• Security and privacy → Mobile and wireless security.
KEYWORDS
Reverse Engineering; CAN Bus; Automotive Security
ACM Reference Format:
Mert D. Pesé, Troy Stacer, C. Andrés Campos, Eric Newberry, Dongyao Chen,
and Kang G. Shin. 2019. LibreCAN: Automated CAN Message Translator. In
2019 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’19), November 11–15, 2019, London, United Kingdom. ACM, New York,
NY, USA, 18 pages. https://doi.org/10.1145/3319535.3363190
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3363190
1 INTRODUCTION
Nearly all functions inside a modern vehicle, even in more tradi-
tionally mechanical domains like the powertrain, are controlled
electronically. Moreover, purely electronic systems have become
more prevalent as the number of sensors present in a vehicle has
increased, particularly given the rise of Advanced Driver Assistance
(ADAS) systems. All of these systems are controlled by Electronic
Control Units (ECUs), embedded microprocessors that interface
between a given system and the rest of the vehicle. Over the last
few years, the number of ECUs inside a vehicle has increased signif-
icantly. Compared to the early 1990s, when few ECUs were present
in a given vehicle, a modern vehicle features more than 40 ECUs (as
of 2015 in Europe) [39]. Meanwhile, premium cars can be equipped
with up to approximately 100 ECUs. These ECUs need to communi-
cate over a unified communications network that is sophisticated
and robust enough to handle all network traffic inside a vehicle,
particularly for time-critical information. To meet this need, Bosch
introduced the Controller Area Network (CAN) technology in 1987,
which has since become the de facto standard in-vehicle network.
According to Frost & Sullivan [46], data security and privacy are
among the most critical drivers and inhibitors of next-generation
mobility services. Automotive cybersecurity is a relatively young
field, with the first major publications appearing in 2010 [16, 33]. In
2015, several attacks were reported, including three major wireless
attacks: an attack on BMW Connected Drive [49], an attack on
GM OnStar [15], and the Tesla Door Attack [43]. Although the
first two attacks received some attention, it was not until Miller
and Valasek’s Jeep attack [42] that automotive cybersecurity was
perceived as a mainstream research and engineering issue. This
attack exploited vulnerabilities in the wireless Telematic Control
Unit (TCU) and In-Vehicle Infotainment (IVI) system to allow for
remote control of a vehicle. In the first-generation of automotive
security research, attacks were mounted through vehicles’ physical
interfaces, e.g., through the OBD-II port or wired interfaces on
the IVI. Meanwhile, remote or “wireless” attacks exploit wireless
interfaces, such as the Bluetooth, Wi-Fi, or cellular connections of
the TCU, as in the aforementioned Jeep attack.
A commonality between wired and wireless attacks is the need to
eventually inject messages onto the CAN bus in order to make the
vehicle act in an undesired or unexpected way. Even in the sophisti-
cated Jeep attack, the researchers had to manually reverse-engineer
portions of the CAN bus protocol in order to gain remote control
over the vehicle, e.g., over its steering control. This is very tedious
and unscalable. Additionally, these attacks can usually only target a
specific model or make of vehicle since message semantics are OEM-
proprietary and can even differ from model to model of the same ve-
hicle make. Academic offensive automotive cybersecurity research
suffers greatly from this lack of scalability. Although most defensive
solutions, such as Intrusion Detection Systems (IDSs) [18, 27, 30, 52],
Session 10A: Cyberphysical SecurityCCS ’19, November 11–15, 2019, London, United Kingdom2283do not require knowledge of the message semantics of a vehicle,
a straightforward and automated mechanism to reverse-engineer
CAN bus data could greatly accelerate vulnerability research and
allow software patches to be distributed before malicious entities
become aware of vulnerabilities.
The current security through obscurity paradigm pursued by
OEMs attempts to prevent wide-scale automotive attacks by keep-
ing CAN message translation tables, called DBC files, secret (and
therefore placing an additional barrier to vehicle hacking) is out-
dated and infeasible. Vehicles should be secure by design and not by
choice, following Kerckhoffs’s principle [32]. Therefore, automotive
Electrics/Electronics (E/E) architectures and networks should be
resilient against CAN injection attacks originating from external
sources, e.g., by firewalling messages from the OBD-II port, and
without making assumptions about the knowledge of an attacker.
In this paper, we propose LibreCAN, a tool to automatically trans-
late most CAN messages with minimal effort. Unlike prior limited
research on automated CAN reverse-engineering, LibreCAN not
only focuses on powertrain-related data available through the pub-
lic OBD-II protocol, but also leverages data from smartphone sen-
sors, and furthermore reverse-engineers body-related CAN data.
To the best of our knowledge, LibreCAN is the first system that
can reverse-engineer a relatively complete CAN communication
matrix for any given vehicle, as well as the full-scale experimental
evaluation of such a system.
This paper is organized as follows. Sec. 2 gives a primer on the
CAN bus, its typical messages and signals, and the interpretability
of CAN data, as well as in-vehicle network architecture. Sec. 3 de-
tails the design of LibreCAN, while Sec. 4 evaluates the accuracy,
coverage, and required manual and computation time for reverse-
engineering CAN messages. Sec. 5 discusses the limitations and
potential other use-cases of LibreCAN, as well as possible counter-
measures. Sec. 6 discusses related efforts in manual and automated
CAN reverse-engineering, while Sec. 7 concludes the paper.
2 BACKGROUND
2.1 CAN Primer
Vehicular sensor data is collected from ECUs located within a ve-
hicle. These ECUs are typically interconnected via an on-board
communication bus, or in-vehicle network (IVN), with the CAN
bus being the most widely-deployed technology in current vehicles.
Fig. 1 depicts the structure of a CAN 2.0A data frame — the most
common data-frame type used on the CAN bus.
• CAN ID: CAN is a multi-master, message-based broadcast
bus. Unlike better-known socket-based communication pro-
tocols like Ethernet, CAN is message-oriented, i.e., CAN
message frames do not contain any information concerning
their source or destination ECUs, but instead each frame
carries a unique message identifier (ID) that represents its
meaning and priority. Lower CAN IDs have higher prior-
ity (e.g., powertrain- vs. body-related information) and will
“win” the distributed arbitration process that occurs when
multiple messages are sent on the CAN bus at the same time.
It is possible for the same ECU to send and/or receive mes-
sages with different CAN IDs. The basic CAN ID in the CAN
2.0A specification is 11 bits long, and thus allows for up to
2048 different CAN IDs.
• DLC: This field specifies the number of bytes in the payload
(data) field of the message. The DLC field is 4 bits long and
can specify a payload length ranging from 0 to 8 bytes.
• Data: This is the payload field of a CAN message containing
the actual message data. It can contain 0–8 bytes of data
depending on the value of the DLC field.
Next, we will describe the structure of the data payload field,
which consists of one or more “signals.” A “signal” is a piece of in-
formation transmitted by an ECU, such as vehicle speed. Messages
transmitted with the same CAN ID usually contain related signals
(within the same domain) so that the destination ECU needs to re-
ceive and process fewer messages. For instance, a message destined
for the Transmission Control Module (TCM) might contain both
the vehicle speed (m/s) and engine speed (RPM) signals in one CAN
message. The length and number of signals vary with CAN ID and
are defined in the aforementioned DBC file for the corresponding
vehicle. This translation file specifies the start position and length
of a signal, allowing it to be easily retrieved from the payload using
a bitmask if the DBC file is available.
Moreover, signals can not only contain physical information, but
also other types of information [37, 38], such as:
• Constants: Values that do not change over time.
• Multi-Values: Values with a domain consisting of only a few
constant values. [38] reported 2–3 changing values within
these types of signals. An example of a 2-value field could
be the status of a specific door (e.g., open or closed).
• Counters: Signals that behave as cyclic counters within a
specific range. These signals could serve as additional syntax
checks or be intended to order longer signal data at the
destination ECU(s).
• Checkcodes: Besides the CRC-15 field at the tail of every
CAN frame, the payload can also contain additional check-
codes, typically as the last signal in the payload.
Figure 1: CAN data frame structure
Highlighted with non-white color in this figure are the three
fields that are essential to the understanding of LibreCAN:
A contrived example is given in Fig. 2 showing multiple signals of
different types (physical signals, multi-values, counters, CRCs, etc.)
embedded in the 8-byte payload of a CAN message. For instance,
the orange-colored entity represents a 2-byte physical signal and
the yellow one depicts a 12-bit counter, whereas the blue region is
another 1-byte long physical signal. Several CAN IDs also contain
1-bit signals that are multi-values, i.e., booleans that describe a
body-related event (e.g., door is open/closed). Three status flags
are depicted in byte 7 of this example. The remaining green signal
1bit11bits1bit4bits0-64bits16bits2bits7bitsSOFStart of FrameCAN IDMessage IdentifierRTRRemote Trans-mission RequestReserved2bitsDLCData Length CodeDataCRC-15CylicRedundancy CheckEOFEnd of FrameACKAcknow-ledge-mentSession 10A: Cyberphysical SecurityCCS ’19, November 11–15, 2019, London, United Kingdom2284is a 4-bit checksum. White regions are unused, i.e., no signals are
defined in the DBC file. CAN signals are defined by the OEM and
can thus have arbitrary lengths. Some OEMs also decide not to
include specific signal types. For instance, none of our evaluation
vehicles (all from the same OEM) contain checksums.
Figure 2: Example of CAN signals
2.2 DBC Files
All recorded CAN data can only be interpreted if one possesses
the translation tables for that particular vehicle. These tables can
come in different formats, as there is no single standard. Examples
are KCF (Kayak [29]) and ARXML (AUTOSAR [1]) files. However,
the most common format used for this purpose is DBC [24], a
standard created by German automotive supplier company Vector
Informatik.
DBC files contain a myriad of information. However, to under-
stand this paper, one must be aware of the following information
stored in these files:
• Message structure by type: CAN ID, Name, DLC, Sender;
• Signals located within messages, containing Name, Start Bit,
Length, Byte Order, Scale, Offset, Minimum/Maximum Value,
Unit, Receiver
depends greatly upon the age and price of the vehicle, and can
drastically differ even among comparable vehicles from different
OEMs. As a result, we must first establish a basic knowledge of
the most frequently deployed ECUs in vehicles and the signals that
they transmit on the CAN bus.
It is difficult to arrive at a deterministic answer to this question
since this information is only located in DBC files, which are pro-
prietary to the OEMs. As a result, reverse-engineering all signals
present in a vehicle is nearly impossible. Thus, our goal is to reverse-
engineer the most common subset of vehicular signals that are of
interest to both security researchers and third-party app developers.
[19] provides an overview of the automotive electronic systems
present in a typical vehicle. After analyzing multiple sources [40–
42], we derived a list of ECUs (Table 8 in Appendix A) typically
present in a vehicle (each of which usually transmits data using
one or more CAN message IDs), along with the signals present in
their respective CAN messages.
Raw CAN data is not encoded in a human-readable format and
does not reflect the actual sensor values. In order to obtain the actual
sensor values, raw CAN data must first be decoded [20]. Letting
rs, ms, ts, and ds be the raw value, scale, offset, and decoded value
of sensor s, respectively, the actual value can be found with the
following equation:
ds = ms · rs + ts .
(2)
2.4 In-Vehicle Network Architecture
There are four major bus systems used in cars: CAN, FlexRay, LIN,
and MOST. MOST is used for multimedia transmission, whereas
the other bus types are mostly used for control tasks, e.g., in the
powertrain domain. The most widely used In-Vehicle Network (IVN)
architecture is the central gateway architecture. An overview of the
buses and their interconnection within a vehicle is shown in Fig. 3.
The representation of translation data in DBC files can be con-
fusing [22]. CAN data can be represented in either big endian (Mo-
torola) or little endian (Intel) byte-order. The bits can also be num-
bered using either MSB0 (most significant bit first) or LSB0 (least
significant bit first). However, most DBC files use the Intel format
with LSB0 numbering. Therefore, the start bit included in the signal
information does not describe the actual start bit. Since we need to
know the actual signal boundaries, we need to calculate the true
start bit s so that we can, combined with the signal length l, obtain
the signal end bit e:
s = ⌊ s
8⌋ + 7 − (s % 8),
e = s + l − 1.
(1)
2.3 Information Sent on the CAN Bus
In order to know which data to reverse-engineer, we must first
determine the information commonly available in vehicles. This
Figure 3: Common automotive E/E architecture (adapted
from [54])
The major point of entry into a vehicle for data collection (and
diagnostics) is the on-board diagnostics (OBD-II) interface. This
connector is mandatory for all vehicles sold in the US after 1996.
Emission-related sensors such as vehicle speed, engine speed,
intake temperature, mass airflow, etc., are universally available in
all vehicles (after 1996) via the standardized OBD-II protocol [13].
Apart from the standardized OBD-II protocol (called SAE J/1979),
Bit PositionsByte Number0   1      2     3     4     5     6   77         6         5         4          3         2         1         0Central GatewayECUECUECUECUECUECUECUECUECUECUECUECUECUECUECUECUECUECUOBD-IIPowertrain-CANChassis-FlexRayBodyCAN2Body-CAN 1Sub-Bus LIN 1Sub-Bus LIN 2InfotainmentMOSTSession 10A: Cyberphysical SecurityCCS ’19, November 11–15, 2019, London, United Kingdom2285this port can also be used to both read and write raw CAN data.
Note that the OBD-II protocol and OBD-II interface are different
and should not be confused.
Electric vehicles (EVs) are not mandated to either have an OBD-
II connector nor support the OBD-II protocol. The latter would
not contain a lot of information anyway due to the lack of me-
chanical powertrain components (the OBD-II protocol provides
emission-related information [13]). Since there is no standard for
EV diagnostics, EV OEMs can use any interface they desire. For
instance, older Tesla Model S and X still carry a traditional OBD-II
port, whereas the newer Model 3 has its proprietary hardware in-
terface [3]. Furthermore, proprietary diagnostic protocols are used
in EVs (instead of SAE J/1979).