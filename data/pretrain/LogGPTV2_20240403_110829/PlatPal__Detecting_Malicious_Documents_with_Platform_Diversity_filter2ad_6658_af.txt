Due to the continued exploitation of AAR, maldoc detec-
tion has become a pressing problem. A survey of existing
techniques reveals that they are vulnerable to recent at-
tacks such as parser-confusion and ML-evasion attacks. In
response to this, we propose a new perspective: platform
diversity, and prototype PLATPAL for maldoc detection.
PLATPAL hooks into AAR to trace internal PDF process-
ing and also uses full dynamic analysis to capture a mal-
doc’s external impact on the host system. Both internal
and external traces are compared, and the only heuristic
to detect maldoc is based on the observation that a benign
document behaves the same across platforms, while a
maldoc behaves differently during exploitation, because
of the diversified implementations of syscalls, memory
management, etc. across platforms. Such a heuristic does
not require known maldoc samples to derive patterns that
differentiate maldocs from benign documents, which also
enables PLATPAL to detect zero-day attacks without prior
knowledge of the attack. Evaluations show that PLATPAL
raises no false alarms in benign samples, detects a variety
of behavioral discrepancies in malicious samples, and is
a scalable and practical solution.
10 Acknowledgment
We thank our shepherd, Alexandros Kapravelos, and
the anonymous reviewers for their helpful feedback.
This research was supported by NSF under award DGE-
1500084, CNS-1563848, CRI-1629851, CNS-1017265,
CNS-0831300, and CNS-1149051, ONR under grant
N000140911042 and N000141512162, DHS under con-
tract No. N66001-12-C-0133, United States Air Force
under contract No. FA8650-10-C-7025, DARPA un-
der contract No. DARPA FA8650-15-C-7556, and
DARPA HR0011-16-C-0059, and ETRI under grant
MSIP/IITP[B0101-15-0644].
References
[1] Adobe Systems Inc. Document Management - Portable document
format, 2008. http://wwwimages.adobe.com/content/dam/
Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf.
[2] Adobe Systems Inc.
Introducing Adobe Reader Protected
http://blogs.adobe.com/security/2010/
Mode, 2010.
07/introducing-adobe-reader-protected-mode.html.
[3] Adobe Systems Inc.
Plug-ins and Applications, 2015.
http://help.adobe.com/en_US/acrobat/acrobat_dc_
sdk/2015/HTMLHelp/#t=Acro12_MasterBook/Plugins_
Introduction/About_plug-ins.htm.
[4] Davide Balzarotti, Marco Cova, Christoph Karlberger, Christopher
Kruegel, Engin Kirda, and Giovann Vigna. Efficient Detection of
Split Personalities in Malware. In Proceedings of the 17th Annual
Network and Distributed System Security Symposium (NDSS), San
Diego, CA, February–March 2010.
[5] Tyler Bohan. In the Zone: OS X Heap Exploitation. In Proceed-
ings of the 2016 Summercon, New Yark, NY, July 2016.
[6] Jurriaan Bremer. x86 API Hooking Demystified, 2012. https:
//jbremer.org/x86-api-hooking-demystified/.
[7] Derek Bruening. Efficient, Transparent, and Comprehensive Run-
time Code Manipulation. PhD thesis, MIT, 2004.
[8] Danilo Bruschi, Lorenzo Cavallaro, and Andrea Lanzi. Diversified
Process Replica for Defeating Memory Error Exploits. In Pro-
ceedings of the 2007 International Performance, Computing, and
Communications Conference (IPCCC), New Orleans, LA, April
2007.
[9] Bryan M. Cantrill, Michael W. Shapiro, and Adam H. Leventhal.
Dynamic Instrumentation of Production Systems. In Proceedings
of the 2004 USENIX Annual Technical Conference (ATC), Boston,
MA, June–July 2004.
[10] Roberto Capizzi, Antonio Longo, V. N. Venkatakrishnan, and
A. Prasad Sistla. Preventing Information Leaks Through Shadow
Executions. In Proceedings of the 2008 International Conference
on Software Engineering (ICSE), Anaheim, CA, December 2008.
[11] Curtis Carmony, Mu Zhang, Xunchao Hu, Abhishek Vasisht
Bhaskar, and Heng Yin. Extract Me If You Can: Abusing PDF
Parsers in Malware Detectors. In Proceedings of the 2016 Annual
Network and Distributed System Security Symposium (NDSS), San
Diego, CA, February 2016.
[12] Liming Chen and Algirdas Avizienis. N-Version Programming: A
Fault-Tolerance Approach To Reliability of Software Operation.
In Fault-Tolerant Computing, 1995, Jun. 1995.
[13] Corelan Team. Exploit writing tutorial part 11 : Heap Spraying
Demystified, 2011. https://www.corelan.be/index.php/
USENIX Association
26th USENIX Security Symposium    285
2011/12/31/exploit-writing-tutorial-part-11-heap-
spraying-demystified.
[14] Igino Corona, Davide Maiorca, Davide Ariu, and Giorgio Giacinto.
Lux0R: Detection of Malicious PDF-embedded JavaScript Code
through Discriminant Analysis of API References. In Proceedings
of the Artificial Intelligent and Security Workshop (AISec), 2014.
[15] Benjamin Cox, David Evans, Adrian Filipi, Jonathan Rowanhill,
Wei Hu, Jack Davidson, John Knight, Anh Nguyen-Tuong, and
Jason Hiser. N-Variant Systems: A Secretless Framework for
Security through Diversity. In Proceedings of the 15th USENIX
Security Symposium (Security), Vancouver, Canada, July 2006.
[16] Stephen Crane, Andrei Homescu, Stefan Brunthaler, Per Larsen,
and Michael Franz. Thwarting Cache Side-Channel Attacks
In Proceedings of the
Through Dynamic Software Diversity.
2015 Annual Network and Distributed System Security Symposium
(NDSS), San Diego, CA, February 2015.
[17] daehee87. DEFCON 2014 Polyglot Writeup, 2014. http://
daehee87.tistory.com/393.
[18] ECMA International.
cation, 2016.
publications/files/ECMA-ST/Ecma-262.pdf.
ECMAScript Language Specifi-
http://www.ecma-international.org/
[19] Exploit Database. Offensive Securityâ ˘A ´Zs Exploit Database
Archive, 2016. https://www.exploit-db.com.
[20] Joseph Gardiner and Shishir Nagaraja. On the Security of Machine
Learning in Malware C&C Detection: A Survey. ACM Computing
Survey (CSUR), 49(3), September 2016.
[21] Dan Goodin. Pwn2Own Carnage Continues as Exploits Take
Down Adobe Reader, Flash, 2013. https://arstechnica.
com/security/2013/03/pwn2own-carnage-continues-
as-exploits-take-down-adobe-reader-flash.
[22] Brian Gorenc, AbdulAziz Hariri, and Jasiel Spelman. Abusing
Adobe Reader’s JavaScript APIs. In Proceedings of the 23rd DEF
CON, Las Vegas, NV, August 2015.
[23] Marco Grassi.
[CVE-2016-4673] Apple CoreGraph-
JPEG memory
2016.
corruption,
ics macOS/iOS
https://marcograss.github.io/security/apple/
cve/macos/ios/2016/11/21/cve-2016-4673-apple-
coregraphics.html.
[24] Petr Hosek and Cristian Cadar. Safe Software Updates via Multi-
version Execution. In Proceedings of the 35th International Con-
ference on Software Engineering (ICSE), San Francisco, CA, May
2013.
[25] Kaspersky.
Kaspersky
Security Bulletin,
2015.
https://securelist.com/files/2014/12/Kaspersky-
Security-Bulletin-2014-EN.pdf.
[26] Clemens Kolbitsch, Benjamin Livshits, Benjamin Zorn, and Chris-
In Pro-
tian Seifert. Rozzle: De-Cloaking Internet Malware.
ceedings of the 33rd IEEE Symposium on Security and Privacy
(Oakland), San Francisco, CA, May 2012.
[27] Pavel Laskov and Nedim Srndic. Static Detection of Malicious
JavaScript-Bearing PDF Documents. In Proceedings of the Annual
Computer Security Applications Conference (ACSAC), 2011.
[28] Moony Li. Hacking Team Leak Uncovers Another Win-
2015.
dows Zero-Day,
http://blog.trendmicro.com/trendlabs-security-
intelligence/hacking-team-leak-uncovers-another-
windows-zero-day-ms-releases-patch.
Fixed In Out-Of-Band Patch,
[29] Daiping Liu, Haining Wang, and Angelos Stavrou. Detecting Ma-
licious Javascript in PDF through Document Instrumentation. In
Proceedings of the 44th International Conference on Dependable
Systems and Networks (DSN), Atlanta, GA, 2014.
[30] Kai Lu and Kushal Arvind Shah. Analysis of Use-After-Free Vul-
nerability (CVE-2016-4119) in Adobe Acrobat and Reader, 2016.
https://blog.fortinet.com/2016/06/06/analysis-of-
use-after-free-vulnerability-cve-2016-4119-in-
adobe-acrobat-and-reader.
[31] Xun Lu, Jianwei Zhuge, Ruoyu Wang, Yinzhi Cao, and Yan Chen.
De-obfuscation and Detection of Malicious PDF Files with High
Accuracy. In Proceedings of the 46th Hawaii International Con-
ference on System Sciences (HICSS), 2013.
[32] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur
Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and
Kim Hazelwood. Pin: Building Customized Program Analyis
Tools with Dynamic Instrumentation. In Proceedings of the 2005
ACM SIGPLAN Conference on Programming Language Design
and Implementation (PLDI), Chicago, IL, June 2005.
[33] Davide Maiorca, Davide Ariu, Igino Corona, and Giorgio Giac-
into. A Structural and Content-based Approach for a Precise and
Robust Detection of Malicious PDF Files. In Proceedings of the
International Conference on Information Systems Security and
Privacy (ICISSP), 2015.
[34] Davide Maiorca, Davide Ariu, Igino Corona, and Giorgio Giacinto.
An Evasion Resilient Approach to the Detection of Malicious
PDF Files. In Proceedings of the International Conference on
Information Systems Security and Privacy (ICISSP), 2016.
[35] Davide Maiorca, Igino Corona, and Giorgio Giacinto. Looking at
the Bag is not Enough to Find the Bomb: An Evasion of Structural
Methods for Malicious PDF Files Detection. In Proceedings of
the 8th ACM Symposium on Information, Computer and Commu-
nications Security (ASIACCS), Hangzhou, China, March 2013.
[36] Davide Maiorca, Giorgio Giacinto, and Igino Corona. A Pattern
Recognition System for Malicious PDF Files Detection. In Pro-
ceedings of the 8th International Conference on Machine Learning
and Data Mining in Pattern Recognition (MLDM), 2012.
[37] Felipe Andres Manzano.
Adobe Reader X BMP/RLE
heap corruption, 2012. http://www.binamuse.com/papers/
XFABMPReport.pdf.
[38] Net MarketShare. Desktop Operating System Market Share,
https://www.netmarketshare.com/operating-
2017.
system-market-share.aspx?qprid=10&qpcustomd=0.
[39] Nexor.
Preventing Document-based Malware from Devas-
https://www.nexor.com/wp-
tating Your Business, 2013.
content/uploads/2016/02/Preventing-Document-
Based-Malware-from-Devastating-Your-Business.pdf.
[40] Nir Nissim, Aviad Cohen, Chanan Glezer, and Yuval Elovici. De-
tection of Malicious PDF Files and Directions for Enhancements:
A State-of-the-art Survey. Computers & Security, October 2014.
[41] Roger Orr. NtTrace - Native API tracing for Windows, 2016.
http://rogerorr.github.io/NtTrace/.
[42] Nicolas Papernot, Patrick McDaniel, Somesh Jha, Matt Fredrikson,
Z. Berkay Celik, and Ananthram Swami. The Limitations of
Deep Learning in Adversarial Settings. In Proceedings of the 9th
European Workshop on System Security (EUROSEC), 2016.
[43] Babak Salamat, Todd Jackson, Andreas Gal, and Michael Franz.
Orchestra: Intrusion Detection Using Parallel Execution and Mon-
In Proceedings of
itoring of Program Variants in User-space.
the 4th European Conference on Computer Systems (EuroSys),
Nuremberg, Germany, March 2009.
[44] Mark Schloesser, Jurriaan Bremer, and Alessandro Tanasi. Cuckoo
Sandbox - Open Source Automated Malware Analysis. In Black
Hat USA Briefings (Black Hat USA), Las Vegas, NV, August 2013.
[45] Florian Schmitt, Jan Gassen, and Elmar Gerhards-Padilla. PDF
Scrutinizer: Detecting JavaScript-based Attacks in PDF Docu-
ments. In Proceedings of the 10th Annual International Confer-
ence on Privacy, Security and Trust (PST), 2012.
[46] Charles Smutz and Angelos Stavrou. Malicious PDF Detection
286    26th USENIX Security Symposium
USENIX Association
using Metadata and Structural Features. In Proceedings of the
Annual Computer Security Applications Conference (ACSAC),
2012.
[57] Trend Micro. Macro Malware: Here’s What You Need to
Know in 2016, 2016. http://blog.trendmicro.com/macro-
malware-heres-what-you-need-to-know-in-2016/.
[47] Charles Smutz and Angelos Stavrou. When a Tree Falls: Using
Diversity in Ensemble Classifiers to Identify Evasion in Malware
Detectors. In Proceedings of the 2016 Annual Network and Dis-
tributed System Security Symposium (NDSS), San Diego, CA,
February 2016.
[48] Kevin Z. Snow, Srinivas Krishnan, Fabian Monrose, and Niels
Provos. ShellOS: Enabling Fast Detection and Forensic Analysis
of Code Injection Attacks. In Proceedings of the 20th USENIX
Security Symposium (Security), San Francisco, CA, August 2011.
[49] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra
Dmitrienko, Christopher Liebchen, and Ahmad-Reza Sadeghi.
Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained
In Proceedings of the
Address Space Layout Randomization.
34th IEEE Symposium on Security and Privacy (Oakland), San
Francisco, CA, May 2013.
[50] Sophps.
The Rise of Document-based Malware, 2016.
https://www.sophos.com/en-us/security-news-
trends/security-trends/the-rise-of-document-
based-malware.aspx.
[51] Alexander Sotirov. Heap Feng Shui in JavaScript. In Proceed-
ings of the 2007 Black Hat Europe Briefings (Black Hat Europe),
Amsterdam, Netherlands, 2007.
[52] Nedim Srndic and Pavel Laskov. Detection of Malicious PDF Files
Based on Hierarchical Document Structure. In Proceedings of the
20th Annual Network and Distributed System Security Symposium
(NDSS), San Diego, CA, February 2013.
[53] Nedim Srndic and Pavel Laskov. Practical Evasion of a Learning-
Based Classifier: A Case Study. In Proceedings of the 35th IEEE
Symposium on Security and Privacy (Oakland), San Jose, CA,
May 2014.
[54] Symantec.
Format Malware,
https://www.symantec.com/content/en/us/
Portable Document
2010.
enterprise/media/security_response/whitepapers/
the_rise_of_pdf_malware.pdf.
[55] Symantec.
Internet Security Threat Reports,
2014.
http://www.symantec.com/content/en/us/enterprise/
other_resources/b-istr_main_report_v18_2012_
21291018.en-us.pdf.
[56] Teryl Taylor, Kevin Z. Snow, Nathan Otterness, and Fabian Mon-
rose. Cache, Trigger, Impersonate: Enabling Context-Sensitive
Honeyclient Analysis On-the-Wire. In Proceedings of the 2016 An-
nual Network and Distributed System Security Symposium (NDSS),
San Diego, CA, February 2016.
[58] Zacharias Tzermias, Giorgos Sykiotakis, Michalis Polychronakis,
and Evangelos P. Markatos. Combining Static and Dynamic Anal-
ysis for the Detection of Malicious Documents. In Proceedings
of the 4th European Workshop on System Security (EUROSEC),
2011.
[59] Cristina Vatamanu, Drago¸s Gavrilu ¸T, and R˘azvan Benchea. A
Practical Approach on Clustering Malicious PDF Documents.
Journal in Computer Virology, June 2012.
[60] Kaushik Veeraraghavan, Peter M. Chen, Jason Flinn, and Satish
Narayanasamy. Detecting and Surviving Data Races using Com-
plementary Schedules. In Proceedings of the 23rd ACM Sympo-
sium on Operating Systems Principles (SOSP), Cascais, Portugal,
October 2011.
[61] Stijn Volckaert, Bart Coppens, and Bjorn De Sutte. Cloning Your
Gadgets: Complete ROP Attack Immunity with Multi-Variant Exe-
cution. IEEE Transactions on Dependable and Secure Computing,
13(4):437–450, July 2016.
[62] Carsten Willems, Felix C. Freiling, and Thorsten Holz. Using
Memory Management to Detect and Extract Illegitimate Code
for Malware Analysis. In Proceedings of the Annual Computer
Security Applications Conference (ACSAC), 2012.
[63] Carsten Willems, Thorsten Holz, and Felix Freiling. Toward
Automated Dynamic Malware Analysis Using CWSandbox. In
Proceedings of the 28th IEEE Symposium on Security and Privacy
(Oakland), Oakland, CA, May 2007.
[64] Shane Wilton. One Shellcode to Rule Them All: Cross-
Platform Exploitation, 2014. http://www.slideshare.net/
ShaneWilton/one-shellcode-to-rule-them-all.
[65] Weilin Xu, Yanjun Qi, and David Evans. Automatically Evad-
ing Classifiers: A Case Study on PDF Malware Classifiers. In
Proceedings of the 2016 Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, February 2016.
[66] Hui Xue, Nathan Dautenhahn, and Samuel T. King. Using Repli-
cated Execution for a More Secure and Reliable Web Browser. In
Proceedings of the 19th Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, February 2012.
[67] Mark Vincent Yason. Windows 10 Segment Heap Internals. In
Black Hat USA Briefings (Black Hat USA), Las Vegas, NV, August
2016.
[68] Aydan Yumerefendi, Benjamin Mickle, and Landon P. Cox.
Tightlip: Keeping applications from spilling the beans. In Pro-
ceedings of the 4th USENIX Symposium on Networked Systems
Design and Implementation (NSDI), Cambridge, MA, April 2007.
USENIX Association
26th USENIX Security Symposium    287