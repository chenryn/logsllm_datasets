ret
}
//junk c(cid:2)
ret //fake end of fun
:
//payload
:
.... d(cid:2)
ret
Fig. 3: Motivating example
Getting the information related to the opaque predicate and
the call stack tampering would allow:
• 1(cid:3) to know that  is always called and reciprocally
that  is never called. As consequence b(cid:3) and d(cid:3)
are dead instructions;
• 2(cid:3) to know that the ret of  is tampered and
never return to the caller, but to . As a consequence,
a(cid:3) and c(cid:3) are dead instructions, and we discover the real
payload located at .
Hence the main motivation is not to be fooled by such
infeasibility-based tricks that slow-down the program reverse-
engineering and its global understanding.
Applications. The main application is to improve a disassembly
algorithm with such information, since static disassembly will
be fooled by such tricks and dynamic disassembly will only
cover a partial portion of the program. Our goal is to design
an efﬁcient method for solving infeasibility questions. This
approach could then passes the original code annotated with
infeasibility highlights to other disassembly tools, which could
take advantage of this information – for example by avoiding
disassembling dead instructions. This view is depicted in Figure
4, and such a combination is discussed in Section IX.
(cid:70)(cid:82)(cid:71)(cid:72)
(cid:69)(cid:69)(cid:16)(cid:39)(cid:54)(cid:40)
(cid:70)(cid:82)(cid:71)(cid:72)(cid:3)(cid:14)
(cid:70)(cid:82)(cid:71)(cid:72)(cid:70)(cid:82)(cid:71)(cid:72) (cid:14)(cid:14)
(cid:76)(cid:81)(cid:73)(cid:72)(cid:68)(cid:86)(cid:76)(cid:69)(cid:76)(cid:79)(cid:76)(cid:87)(cid:92)
(cid:76)(cid:81)(cid:73)(cid:72)(cid:68)(cid:86)(cid:76)(cid:69)(cid:76)(cid:79)(cid:76)(cid:87)(cid:92)
(cid:75)(cid:76)(cid:74)(cid:75)(cid:79)(cid:76)(cid:74)(cid:75)(cid:87)(cid:86)
(cid:75)(cid:76)(cid:74)(cid:75)(cid:79)(cid:76)(cid:74)(cid:75)(cid:87)(cid:86)
(cid:75)(cid:76)(cid:74)(cid:75)(cid:79)(cid:76)(cid:74)(cid:75)(cid:87)(cid:86)
(cid:86)(cid:83)(cid:68)(cid:85)(cid:86)(cid:72)
(cid:71)(cid:76)(cid:86)(cid:68)(cid:86)(cid:86)(cid:72)(cid:80)(cid:69)(cid:79)(cid:92)
(cid:86)(cid:82)(cid:73)(cid:87)(cid:90)(cid:68)(cid:85)(cid:72)
(cid:87)(cid:72)(cid:86)(cid:87)(cid:76)(cid:81)(cid:74)
(cid:70)(cid:82)(cid:71)(cid:72)
(cid:70)(cid:82)(cid:71)(cid:72)
(cid:86)(cid:76)(cid:80)(cid:83)(cid:79)(cid:76)(cid:73)(cid:76)(cid:72)(cid:71)
(cid:83)(cid:86)(cid:76)(cid:80)(cid:83)(cid:79)(cid:76)(cid:73)(cid:76)(cid:72)(cid:71)
(cid:70)(cid:82)(cid:71)(cid:72)
(cid:80)(cid:82)(cid:85)(cid:72)(cid:3)(cid:83)(cid:85)(cid:72)(cid:70)(cid:76)(cid:86)(cid:72)
(cid:70)(cid:82)(cid:89)(cid:72)(cid:85)(cid:68)(cid:74)(cid:72)
(cid:17)(cid:17)(cid:17)
Fig. 4: motivation schema
Finally, infeasibility information could also be used in other
, to obtain more accurate coverage rates in
contexts, e.g.
software testing, or to guide vulnerability analysis.
IV. BACKWARD-BOUNDED DSE
We present in this section the new Backward-Bounded DSE
technique for solving infeasibility queries on binary codes.
Preliminaries. We consider a binary-level program P with
a given initial code address a0. A state s (cid:3) (a, σ) of the
program is deﬁned by a code address a and a memory state σ,
which is a mapping from registers and memory to actual values
(bitvectors, typically of size 8, 32 or 64). By convention, s0
represents an initial state, i.e., s0 is of the form (a0, σ). The
transition from one state to another is performed by the post
function that executes the current instruction. An execution π
is a sequence π (cid:3) (s0 · s1 · ... · sn), where sj+1 is obtained by
applying the post function to sj (sj+1 is the successor of sj).
Let us consider a predicate ϕ over memory states. We call
reachability condition a pair c (cid:3) (a, ϕ), with a a code address.
Such a condition c is feasible if there exists a state s (cid:3) (a, σ)
and an execution πs (cid:3) (s0 · s1 · ... · s) such that σ satisﬁes ϕ,
denoted σ |= ϕ. It is said infeasible otherwise. A feasibility
(resp. infeasibility) question consists in trying to solve the
feasibility (resp. infeasibility) of such a reachability condition.
Note that while these deﬁnitions do not take self-modiﬁcation
into account, they can be extended to such a setting by
considering code addresses plus waves or phases [3], [31].
Principles. We build on and combine 3 key ingredients from
popular software veriﬁcation methods:
• backward reasoning from deductive veriﬁcation, for pre-
cise goal-oriented reasoning;
• combination of dynamic analysis and formal methods
(from DSE), for robustness;
• bounded reasoning from bounded model checking, for
scalability and the ability to perform infeasibility proofs.
The initial idea of BB-DSE is to perform a backward
reasoning, similar to the one of DSE but going from successors
to predecessors (instead of the other way). Formally, DSE is
based on the post operation while BB-DSE is based on its
inverse pre. Perfect backward reasoning pre∗ (i.e., ﬁxpoint
iterations of relation pre, collecting all predecessors of a
given state or condition) can be used to check feasibility and
infeasibility questions. But this relation is not computable.
Hence, we rely on computable bounded reasoning, namely
prek, i.e., collecting all the “predecessors in k steps” (k-
predecessors) of a given state (or condition). Given a reachabil-
ity condition c, if prek(c) = ∅ then c is infeasible (unreachable).
Indeed, if a condition has no k-predecessor, it has no k(cid:3)-
predecessor for any k(cid:3) > k and cannot be reached. Hence, prek
can answer positively to infeasibility queries. Yet, symmetry
does not hold anymore, as prek cannot falsify infeasibility
queries – because it could happen that a condition is infeasible
for a reason beyond the bound k. The example in Figures
6 and 7 give an illustration of such a situation. In this case,
636
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:31 UTC from IEEE Xplore.  Restrictions apply. 
we have a false negative (FN), i.e. a reachability condition
wrongly identiﬁed as feasible because of a too-small k.
In practice, when the control-ﬂow graph of the program
(CFG) is available, checking whether prek = ∅ can be easily
done in a symbolic way, like it is done in DSE: the set prek is
computed implicitly as a logical formula (typically, a quantiﬁer-
free ﬁrst-order formula over bitvectors and arrays), which is
unsatisﬁable iff the set is empty. This formula is then passed to
an automatic solver, typically a SMT solver [24] such as Z3.
Moreover, it is efﬁcient as the computation does not depend
on the program size but on the user-chosen bound k.
Yet, backward reasoning is very fragile at binary-level, since
computing a precise CFG may be highly complex because of
dynamic jumps or self-modiﬁcation. The last trick is to combine
this prek reasoning with dynamic traces, so that the whole
approach beneﬁts from the robustness of dynamic analysis.
Actually, the prek is now computed w.r.t. the control-ﬂow
graph induced by a given trace π – in a dynamic disassembly
manner. We denote this sliced prek by prek
π.
Hence we get robustness, yet since some parts of prek
may be missing from prek
π, we now lose correctness and may
have false positive (FP), i.e., reachability conditions wrongly
identiﬁed as infeasible, additionally to the false negative FN
due to “boundedness” (because of too small k). A picture of
the approach is given in Figure 5.
(cid:83)(cid:68)(cid:87)(cid:75)(cid:86)(cid:3)(cid:82)(cid:89)(cid:72)(cid:85)(cid:3)
(cid:68)(cid:83)(cid:83)(cid:85)(cid:82)(cid:91)(cid:76)(cid:80)(cid:68)(cid:87)(cid:72)(cid:71)
(cid:83)(cid:68)(cid:87)(cid:75)(cid:86)
(cid:79)(cid:82)(cid:86)(cid:87)(cid:3)(cid:11)(cid:76)(cid:81)(cid:3)
(cid:70)(cid:82)(cid:80)(cid:83)(cid:88)(cid:87)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:12)
(cid:83)(cid:85)(cid:72)(cid:85)(cid:72)(cid:148)(cid:78)
(cid:83)(cid:83)(cid:83)(cid:85)(cid:83)
(cid:83)(cid:82)(cid:86)(cid:87)(cid:13)
(cid:11)(cid:73)(cid:82)(cid:85)(cid:90)(cid:68)(cid:85)(cid:71)(cid:3)(cid:39)(cid:54)(cid:40)(cid:12)
Fig. 5: prek schema
BB-DSE through example. We now illustrate BB-DSE on a
toy example along with the impact of the bound k and of
the (set of) dynamic traces on FP and FN. Figure 6 shows a
simple pseudo-code program, where branch condition x” (cid:2)=
y’ always evaluate to true (opaque predicate) – as it encodes
condition 7x2 − 1 (cid:2)= y2 on the program input x and y. The
two other branch conditions can evaluate to both true and
false, depending on the input. Figure 7 shows the partial CFG
obtained by dynamic execution on the toy example, where the
call to function even is inlined for simplicity. We consider
two traces: π1 covers bold edges (true, true), and π2 covers
dash edges (false, false).
:
if (a % 2 == 0) {
res = 1
}
else {
res = 0
}
return res
:
x = input()
y = input()
x’ = 7*(x*x)
result = even(y)
y’ = y*y
x”= x’-1
if (result) { 1(cid:2)
if(x” (cid:3)= y’){ 2(cid:2)
//always taken
}
else {//dead }
}
else {
...
}
Fig. 6: Toy example
(cid:53)(cid:3)(cid:3)(cid:667)(cid:3)(cid:38)(cid:43)(cid:45)(cid:50)(cid:49)(cid:513)(cid:514)
(cid:54)(cid:3)(cid:3)(cid:667)(cid:3)(cid:38)(cid:43)(cid:45)(cid:50)(cid:49)(cid:513)(cid:514)
(cid:53)(cid:495)(cid:3)(cid:667)(cid:3)(cid:470)(cid:523)(cid:513)(cid:53)(cid:523)(cid:53)(cid:514)
(cid:78)(cid:32)(cid:27)
(cid:519)(cid:519)(cid:32)(cid:30)(cid:41)(cid:41)(cid:3)(cid:49)(cid:44)(cid:3)(cid:668)(cid:34)(cid:51)(cid:34)(cid:43)(cid:669)
(cid:30)(cid:3)(cid:667)(cid:3)(cid:54)
(cid:38)(cid:35)(cid:513)(cid:30)(cid:3)(cid:651)(cid:3)(cid:465)(cid:3)(cid:667)(cid:667)(cid:3)(cid:463)(cid:514)
(cid:41)
(cid:55)
(cid:47)(cid:34)(cid:48)(cid:3)(cid:667)(cid:3)(cid:463)
(cid:47)(cid:34)(cid:48)(cid:3)(cid:667)(cid:3)(cid:464)
(cid:519)(cid:519)(cid:3)(cid:47)(cid:34)(cid:49)(cid:50)(cid:47)(cid:43)
(cid:47)(cid:34)(cid:48)(cid:50)(cid:41)(cid:49)(cid:3)(cid:667)(cid:3)(cid:47)(cid:34)(cid:48)
(cid:54)(cid:495)(cid:3)(cid:667)(cid:3)(cid:54)(cid:523)(cid:54)
(cid:53)(cid:497)(cid:3)(cid:667)(cid:3)(cid:53)(cid:495)(cid:504)(cid:464)
(cid:38)(cid:35)(cid:513)(cid:47)(cid:34)(cid:48)(cid:50)(cid:41)(cid:49)(cid:514)
(cid:20)
(cid:78)(cid:182)(cid:32)(cid:22)
(cid:55)
(cid:21)
(cid:38)(cid:35)(cid:513)(cid:53)(cid:497)(cid:674)(cid:54)(cid:495)(cid:514)
Fig. 7: Partial CFG from toy example
Suppose we want to use BB-DSE to prove that branch
condition 2(cid:3) is indeed opaque, i.e., that x”=y’ is infeasible
at program location 2(cid:3). The algorithm goes backward from
program location 2(cid:3) and predicate x(cid:3)(cid:3) = y(cid:3), and gathers back all
dynamic sufﬁxes up to the bound k. Considering only trace π1
(cid:3)
(bold edges) and k = 8, we obtain (after substitution): prek
7x2 − 1 = y2 ∧ result = 1 ∧ result (cid:2)= 0 ∧ y%2 = 0, which is
π1
UNSAT, as 7x2 − 1 = y2 is UNSAT. Hence, branch condition
2(cid:3) is indeed proved opaque. In the case where we consider also
(cid:3) (7x2 − 1 = y2) ∧ ((y%2 = 0 ∧ result =
π2, then prek
1 ∧ result (cid:2)= 0) ∨ (y%2 (cid:2)= 0 ∧ result = 0 ∧ result (cid:2)= 0)),
where prek
π1,π2 is obtained by simplifying the disjunction of
both formulas prek
is also UNSAT. Once again, branch condition 2(cid:3) is successfully
π1,π2
proved opaque.
π2. It is easy to see that prek
π1,π2
π1 and prek
We now illustrate the case where our technique misses an
637
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:31 UTC from IEEE Xplore.  Restrictions apply. 
infeasible condition (FN). Consider once again traces π1, π2
and branch condition 2(cid:3), with bound k(cid:3) = 3. Then prek(cid:2)
(cid:3)
x(cid:3) − 1 = y2 ∧ result (cid:2)= 0, which is satisﬁable (with x(cid:3) =
1, y = 0, result = 1). Hence, branch condition 2(cid:3) is not
proved opaque. We miss here an unfeasible condition because
of a too-small bound k(cid:3), yielding a false negative (FN).
π1,π2
Finally, we illustrate the case where our technique can
wrongly identify a condition as infeasible (FP). We are
interested now in deciding whether branch condition 1(cid:3) can take
value false, i.e., if result can be 0 at program location 1(cid:3).
We consider trace π1 and bound k(cid:3)(cid:3) = 4 (or higher). We obtain
(cid:3) result = 0 ∧ . . . ∧ result = res ∧ res = 1, which is
prek(cid:2)(cid:2)
UNSAT, and we wrongly conclude that branch condition 1(cid:3) is
π1
opaque, because of the missing path where res is assigned
to 0. This corresponds to a false positive (FP). If we consider
(cid:3) result = 0 ∧ x(cid:3)(cid:3) = x(cid:3) − 1 ∧ y(cid:3) =
also π2, then prek(cid:2)(cid:2)
y2 ∧ result = res ∧ (res = 1 ∨ res = 0) is satisﬁable (with
y(cid:3) = y = x(cid:3)(cid:3) = 0, x(cid:3) = 1, res = 0) and branching condition
1(cid:3) is now (correctly) not identiﬁed as opaque.
Algorithm. Considering a reachability condition (a, ϕ), BB-
DSE starts with a dynamic execution π:
π1,π2
• if π reaches code address a, then compute prek
π((a, ϕ))
as a formula and solve it
– if it is UNSAT, then the result is INFEASIBLE;
– if it is SAT, then the result is UNKOWN;
– if it is TO (timeout), then the result is TO;
• otherwise the result is UNKOWN.
As a summary, this algorithm enjoys the following good
properties: it is efﬁcient (depends on k, not on the trace or
program length) and as robust as dynamic analysis. On the other
hand, the technique may report both false negative (bound k too
short) and false positive (dynamic CFG recovery not complete
enough). Yet, in practice, our experiments demonstrate that the
approach performs very well, with very low rates of FP and
FN. Experiments are presented in Sections VI, VII and VIII.
We will not distinguished anymore between the predicate ϕ
and the reachability condition (a, ϕ), when clear from context.
Impact of the bound on correctness and completeness. In
the ideal case where the dynamic CFG recovery is perfect
w.r.t. the bound k, i.e., prek
π = prek (all sufﬁxes of size k have
been collected by the trace), the technique has no false positive
FP and the effect of k is (as expected) a tradeoff between
computation cost and false negatives FN: longer sufﬁxes allow
to correctly identify more infeasible conditions. Things are
π ⊂ prek.
less intuitive when prek
There, the technique yields also FP because of missing sufﬁxes
(cf. previous example). Since a larger k means more room to
miss sufﬁxes, it yields also more FP. Hence, in the general
case a larger k leads to both less FN and more FP 2.
π is incomplete, i.e. prek
A straightforward way to decrease the number of FP is
to consider more dynamic traces in order to obtain a “more
complete” dynamic CFG and come closer to the ideal case
above (cf. toy example in Figure 7). As such, the technique
can beneﬁt from fuzzing or standard (forward) DSE.
Implementation. This algorithm is implemented on top of
BINSEC/SE [21], a forward DSE engine inside the open-source
platform BINSEC [20] geared to formal analysis of binary codes.
The platform currently proposes a front-end from x86 (32bits)
to a generic intermediate representation called DBA [32]
(including decoding, disassembling, simpliﬁcations). It also
provides several semantic analyses, including the BINSEC/SE
DSE engine [21]. BINSEC/SE features a strongly optimized
path predicate generation as well as highly conﬁgurable search
heuristics [21], [13] and C/S policies [27]. The whole platform3
amounts for more than 40k of OCaml line of codes (loc).
BINSEC also makes use of two other components. First, the
dynamic instrumentation called PINSEC, based on Pin, in charge
of running the program and recording runtime values along
with self-modiﬁcation layers. Written in C++ it amounts for
3kloc. Second, IDASEC is an IDA plugin written in Python
(∼13kloc) aiming at triggering analyzes and post-processing
results generated by BINSEC.
The BB-DSE algorithm is tightly integrated in the BINSEC/SE
component. Indeed, when solving a predicate feasibility,
BINSEC/SE DSE performs a backward pruning pass aiming
at removing any useless variable or constraint. BB-DSE works
analogously, but takes into account the distance from the
predicate to solve: any deﬁnition beyond the (user-deﬁned)
k bound is removed. In a second phase, the algorithm creates
a new input variable for any variable used but never deﬁned
in the sliced formula. Actually, we do not compute a single
formula for prek
π, but enumerate its sufﬁxes (without repetition)
– this could be optimized. For a given sufﬁx the algorithm
is standard [27]. Yet, we stay in a purely symbolic setting
(no concretization) with formulas over bitvectors and arrays,
making simpliﬁcations [21] important.
V. SOLVING INFEASIBILITY QUESTIONS WITH BB-DSE
We show in this section how several natural problems
encountered during deobfuscation and disassembly can be
thought of as infeasibility questions, and solved with BB-DSE.
A. Opaque Predicates
As already stated in Section II, an opaque predicate (OP)
is a predicate always evaluating to the same value. They have
successfully been used in various domains [33], [1]. Recent
works [12] identify three kinds of opaque predicates:
• invariant: always true/false due to the structure of the
predicate itself, regardless of inputs values,
• contextual: opaque due to the predicate and its constraints
on input values,
• dynamic: similar to contextual, but opaqueness comes
from dynamic properties on the execution (e.g., memory).
Approach with BB-DSE. Intuitively, to detect an opaque
predicate the idea is to backtrack all its data dependencies
2cf. Figure 14 in Appendix.
3http://binsec.gforge.inria.fr/tools
638
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:31 UTC from IEEE Xplore.  Restrictions apply. 
and gather enough constraints to conclude to the infeasibility
of the predicate. If the predicate is local (invariant), the distance
from the predicate to its input instantiation will be short and the
predicate will be relatively easy to break. Otherwise (contextual,
dynamic) the distance is linear with the trace length, which
does not necessarily scale.
This is a direct application of BB-DSE, where p (cid:3) (a, ϕ)
is the pair address-predicate for which we want to check for
opacity. We call π the execution trace under attention (extension
to a set of traces is straightforward). Basically, the detection
algorithm is the following:
• if p is dynamically covered by π, then returns FEASIBLE;
• otherwise, returns BB-DSE (p), where INFEASIBLE is
interpreted as “opaque”.
Results are guaranteed solely for FEASIBLE, since BB-DSE has
both false positives and negatives. Yet, experiments (Sections
VI-VIII) show that error ratios are very low in practice.
Concerning the choice of bound k, experiments in Section VI
demonstrates that a value between 10 and 20 is a good choice
for invariant opaque predicates. Interestingly, the X-TUNNEL
case study (Section VIII) highlights that such rather small