putation), but it is not necessarily intended as a user friendly
method to specify computations. But alternative syntax to
describe circuit/arrow computations in a programmer friendly
way exist [21], [22], it can be automatically translated into
the mathematical (inductive) arrows notation, and it is readily
found implemented in mainstream programming languages
like Haskell to structure complex software libraries, like graph-
ical user interfaces, robotics applications, hardware description
languages, and more. So, we will not be concerned on the
usability of the arrow notation to directly specify application
circuits, and refer the interested reader to the programming
language literature for more information.
What is more relevant, in the context of this paper, is that we
are able to use our extended language for symbolic cryptog-
raphy, and the structural arrow-like formalization of circuits,
to give a formal, yet conceptually simple description of
∙ Yao’s circuit garbling procedure,
∙ a symbolic simulator, used to prove the security of Yao’s
construction, and
∙ a detailed, formal proof showing that the output of Yao’s
garbling and the output of the simulator, are symbolically
equivalent, i.e., they map to equivalent symbolic patterns.
We remark that all these deﬁnitions and proofs are purely
symbolic, and they work by induction on the structure of
the circuits, reducing the security analysis to the veriﬁca-
tion of a small number of base cases and inductive steps.
148
It follows from our computational soundness theorem that,
when implemented using standard cryptographic primitives,
the resulting construction achieves the standard security notion
of computational indistinguishability used in cryptography.
It is important to note that the connection between symbolic
security, and computational security is not established at the
level of garbled circuits, but it is proved in the context of
a general soundness theorem for a generic, simple language
of cryptographic expressions. The language is designed to be
powerful enough to express garbled circuits and the associated
simulation procedure, but it is otherwise independent of the
speciﬁc circuit garbling problem. We believe that this greatly
simpliﬁes and elucidates both the computational soundness
result (which is proved for a simple, application independent
language,) and the application to garbled circuits (which is
described and analyzed in a purely symbolic manner.)
b) Other related work: Since the detailed security proof
of garbled circuits in [9], there have been many studies on
various security properties of garbled circuits. For a recent
summary see for example [23]. The security notion used in [9]
is sometimes called selective security, in which an adversary
must choose an input before the circuit is provided to the
simulator. A more useful notion in practice is adaptive secu-
rity, in which a simulator must be able to return a simulated
garbled circuit back to the adversary given only the circuit,
and the adversary can adaptively choose an input value after
seeing the garbled circuit. There is a number of works that
explore adaptive security of garbled circuits, for example [24]–
[26]. Jafargholi and Wichs [27] showed that Yao’s original
construction of garbled circuits is already adaptively secure
with a security loss of 2𝑂(𝑑), where 𝑑 is the circuit depth, and
this result has been further generalized in [28]. As a ﬁrst step
toward the symbolic modeling of garbling schemes, in this
paper, we focus on selective security.
Adaptive security in general can be solved by using the
“erasure” approach [29] or by assuming non-standard primi-
tives such as non-committing encryption [30]. In the symbolic
setting, adaptive security with standard assumptions was con-
sidered in the past in the context of symmetric-key encryption
protocols [14]. That approach can be adapted to our symbolic
model to deal with adaptive security of garbled circuits. But
such extension may require a non-trivial amount of work and
is beyond the scope of the current paper, so we leave it for
future study.
Machine-checked proofs have been developed for cryp-
tographic systems through several computer-aided veriﬁca-
tion tools such as CryptoVerif [31], CertiCrypt [32], Easy-
Crypt [33], and so on. These tools apply formal methods in
conjunction with cryptography-speciﬁc constructions, and they
impose rigorous proof styles. In a recent work [34], Almeida
et. al. formalized Yao’s secure function evaluation protocol
in which the circuit garbling scheme is a central compo-
nent, and, among many things, it then devised a machine-
checked selective security proof of the garbling scheme using
EasyCrypt (with customized extensions to allow using hybrid
arguments and simulation-based proofs). Comparing to our
work, the construction and the security goal of the garbling
scheme in their work is similar, but their mechanized proofs
argue computational security directly in the logic system of
EasyCrypt, which are diﬀerent from the symbolic style proofs
in our work.
c) Paper organization: The rest of the paper is organized
as follows. In Section II we provide formal deﬁnitions for
symbolic cryptography, background on computational sound-
ness, and our extended symbolic language (and computational
soundness theorem) to describe garbled circuits. Our inductive
method to deﬁne circuits is presented in Section III. In Sec-
tion IV, we use our language of symbolic cryptography and the
structural deﬁnition of circuits, to give a formal description of
Yao’s circuit garbling procedure. Section V contains the main
results of the paper, with the description of a symbolic sim-
ulator, and a formal proof that it is (symbolically) equivalent
to real garbled circuit computations. Computational security
of garbled circuits, as described in this paper, automatically
follows from the general soundness results given in Section II.
In Section VI, we report our implementation of the symbolic
garbling procedure and the simulator, and we provide some
experimental results on automated testings performed against
our implementation. We conclude our paper in Section VII.
All the omitted proofs can be found in the full version [35].
II. PRELIMINARIES
In this section we introduce basic notation used by symbolic
and computational cryptography. For a positive integer 𝑛, we
write [𝑛] = {1, … , 𝑛}. We use the bit 0 for the Boolean value
false, and 1 for true. For 𝑛 ≥ 1, {0, 1}𝑛
is the set of all Boolean
vectors of length 𝑛. We can concatenate two Boolean vectors
𝑥 ∈ {0, 1}𝑛
. For
any 𝑥 ∈ {0, 1}𝑛
, we can think 𝑥 as a concatenation of 𝑛 bits,
written as 𝑥 = 𝑥1 ⋯ 𝑥𝑛, where 𝑥1, … , 𝑥𝑛 ∈ {0, 1}. For any
𝑥, 𝑦 ∈ {0, 1}, the NAND function 𝑥 ↑ 𝑦 = ¬(𝑥∧ 𝑦) maps 𝑥 and
𝑦 to 0 if and only if both 𝑥 and 𝑦 are 1.
A. Symbolic cryptography
to obtain 𝑥𝑦 ∈ {0, 1}𝑛+𝑚
and 𝑦 ∈ {0, 1}𝑚
Our symbolic cryptographic expressions extend those de-
ﬁned in [18] with random bits and a swap operation, which
we need to model garbled circuits. Informally, symbolic
expressions are built from random keys and (possibly ran-
dom) bits, using a symmetric encryption scheme, a (length
doubling) pseudorandom generator, a pairing (concatenation)
operation, and the (random) permutation of pairs. Just as
in computational cryptography it is convenient to group bit-
strings according to their length, in symbolic cryptography
it
is customary to classify expressions according to their
shape, which captures the expression size in a representation
independent way. The set of possible shapes for a symbolic
expression is deﬁned by the grammar:
𝐒𝐡𝐚𝐩𝐞 → 𝔹 ∣ 𝕂 ∣ ⦇𝐒𝐡𝐚𝐩𝐞, 𝐒𝐡𝐚𝐩𝐞⦈ ∣⦃𝐒𝐡𝐚𝐩𝐞⦄
representing the shapes of bits, keys, pairs (of two sub-
expressions of arbitrary shape), and encryptions (of messages
of arbitrary shape), respectively. For example ⦇𝕂,⦃𝔹⦄⦈ is the
149
shape of a pair consisting of a key and the encryption of a
single bit message. Let 𝐁 = {𝖡𝑖 ∣ 𝑖 = 1, 2, …} be a set of
atomic bit symbols, and 𝐊 = {𝖪𝑖 ∣ 𝑖 = 1, 2, …} a set of atomic
key symbols, representing independent uniformly random bits
and independent uniformly random keys, respectively. For any
shape 𝑠 ∈ 𝐒𝐡𝐚𝐩𝐞, we deﬁne a corresponding set of expressions
of shape 𝑠 (denoted 𝐄𝐱𝐩(𝑠)) according to the grammar rules:
𝐄𝐱𝐩(𝔹) → 0 ∣ 1 ∣ 𝖡𝑖 ∣ ¬𝐄𝐱𝐩(𝔹)
𝐄𝐱𝐩(⦃𝑠⦄) → ⦃𝐄𝐱𝐩(𝑠)⦄𝐄𝐱𝐩(𝕂)
𝐄𝐱𝐩(𝕂) → 𝖪𝑖 ∣ 𝖦0(𝐄𝐱𝐩(𝕂)) ∣ 𝖦1(𝐄𝐱𝐩(𝕂))
𝐄𝐱𝐩(⦇𝑠, 𝑡⦈) → (𝐄𝐱𝐩(𝑠), 𝐄𝐱𝐩(𝑡))
𝐄𝐱𝐩(⦇𝑠, 𝑠⦈) → 𝜋[𝐄𝐱𝐩(𝔹)](𝐄𝐱𝐩(𝑠), 𝐄𝐱𝐩(𝑠)).
where 𝑠, 𝑡 range over 𝐒𝐡𝐚𝐩𝐞, 𝖡𝑖 ranges over 𝐁, and 𝖪𝑖 ranges
over 𝐊. Most symbols are self explanatory: ¬𝑏 represents
the logical negation of bit 𝑏, (𝖦0(𝑘), 𝖦1(𝑘)) represents the
output of a length doubling pseudorandom generator on seed
𝑘 (with 𝖦0(𝑘) the ﬁrst half of the output, and 𝖦1(𝑘) the second
half,) ⦃𝑒⦄𝑘 is the encryption of 𝑒 under key 𝑘, (𝑒0, 𝑒1) is
𝑏 = 1. For example, ⦃𝖦0(𝖪1)⦄𝖦1(𝖪1) represents the encryption
the ordered pair with sub-expressions 𝑒0 and 𝑒1, and for any
bit 𝑏 and expressions 𝑒0, 𝑒1 of the same shape, 𝜋[𝑏](𝑒0, 𝑒1)
represents the pair (𝑒0, 𝑒1) with the two components swapped if
of the ﬁrst half 𝖦0(𝖪1) of a pseudorandom string (obtained
by applying the pseudorandom generator on seed 𝖪1,) en-
crypted under the second half of the pseudorandom string,
while 𝜋[𝖡1](𝖦0(𝖪1), 𝖦1(𝖪1)) represents a pseudorandom string
(output by the pseudorandom generator on seed 𝖪1), with
the ﬁrst and second half of the string permuted (swapped)
at random depending on the value of the (random) bit 𝖡1.
Note that we can iteratively apply the pseudorandom gen-
erator on a key expression 𝑘 to obtain expressions such as
𝖦𝑏1(𝖦𝑏2(⋯ (𝖦𝑏𝑛(𝑘)))) for 𝑛 ≥ 0 and 𝑏1, 𝑏2, … , 𝑏𝑛 ∈ {0, 1}.
Such expressions are abbreviated as 𝖦𝑏1𝑏2…𝑏𝑛(𝑘). Let 𝜀 denote
the empty bit-string, and let {0, 1}∗ denote the set of all bit-
strings. For any set 𝑆 ⊆ 𝐄𝐱𝐩(𝕂), we deﬁne the sets
𝖦∗(𝑆) = {𝖦𝑤(𝑘) ∣ 𝑘 ∈ 𝑆, 𝑤 ∈ {0, 1}∗}
𝖦+(𝑆) = {𝖦𝑤(𝑘) ∣ 𝑘 ∈ 𝑆, 𝑤 ∈ {0, 1}∗, 𝑤 ≠ 𝜀}
obtained by applying the (ﬁrst or second half of the) pseudo-
random generator zero (resp. one) or more times to a key in 𝑆.
So, for example, 𝖦∗(𝐊) = 𝐄𝐱𝐩(𝕂) is the set of all (random or
pseudorandom) keys. For convenience, we write 𝐊∗ for 𝖦∗(𝐊)
and 𝐊+ for 𝖦+(𝐊). If 𝑆 = {𝑘} is a singleton set, we usually
write 𝖦+(𝑘) and 𝖦∗(𝑘) instead of 𝖦+({𝑘}) and 𝖦∗({𝑘}).
construct⦃𝑠⦄𝐄𝐱𝐩(𝕂) to represent the encryption of an unknown
expression of shape 𝑠. The pattern ⦃𝑠⦄𝐄𝐱𝐩(𝕂) has shape ⦃𝑠⦄.
Patterns are extensions of expressions that
include the
Formally, patterns are deﬁned by a grammar with variables
𝐏𝐚𝐭(𝑠) indexed by 𝑠 ∈ 𝐒𝐡𝐚𝐩𝐞, and the same set of rules as
those given for 𝐄𝐱𝐩(𝑠), with the addition of one more rule
𝐏𝐚𝐭(⦃𝑠⦄) →⦃𝑠⦄𝐄𝐱𝐩(𝕂).
𝐏𝐚𝐭(𝑠) is the set of all patterns of shape 𝑠, and 𝐏𝐚𝐭 is the set
of all patterns (of any shape). Notice that 𝐏𝐚𝐭(𝔹) = 𝐄𝐱𝐩(𝔹)
where 𝑘 ∈ 𝐄𝐱𝐩(𝕂), and 𝑏 ∈ 𝐄𝐱𝐩(𝔹). The computational
evaluation (cid:2)𝑒(cid:3) of an expression 𝑒 is deﬁned as the probability
150