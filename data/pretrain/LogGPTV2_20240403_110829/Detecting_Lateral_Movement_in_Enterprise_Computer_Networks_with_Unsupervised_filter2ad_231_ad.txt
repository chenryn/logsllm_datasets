mance, and was able to reduce the number of FPs on the
LANL dataset by nearly 40%, while losing < 1% of the true
positives.
5 Related Work
This section studies the related works in terms of anomaly
detection and node embedding methods.
Anomaly detection for APT identiﬁcation has been ex-
tensively studied. However, the majority of works are based
on expensive host-based log analysis, with the goal of anoma-
lous process activity, indicative of malware or exploitation
[23] [6] [24] [16]. Some go so far as mining information from
user-driven commands for anomaly detection [14]. While host
logs may be available in some environments, it would be a
signiﬁcant burden for most large enterprises to capture and
store verbose host-based logs such as system call traces.
At the network level, there are techniques for detecting
web-based attacks [13], as well as botnet activity [1] utilizing
anomaly detection algorithms. A highly related technique
[4] combines host information with network information to
detect lateral movement. However, they require process-level
information from hosts, making this technique a poor ﬁt at
the enterprise scale. As lateral movement detection is such
a hard problem, some approaches instead focus on detecting
the degree to which environments are vulnerable to lateral
movement attacks [10].
There are also approaches that look for deviations from
known, speciﬁcation-driven, rules of how an environment
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    265
should behave, such as Holmes [20] and Poirot [19]. While
these work reasonably well and are able to reduce false pos-
itives by explicitly deﬁning what behavior is deemed mali-
cious, they are still based on knowledge derived from a human,
and thus risk circumvention by new and novel attack paths.
In addition, these techniques require constant maintenance
and upkeep to develop new speciﬁcations for the constantly
evolving attack surface.
Node embedding methods aiming at learning represen-
tative embeddings for each node in a graph have been suc-
cessfully applied to various downstream machine learning
tasks, such as node classiﬁcation [22], link prediction [7], and
node recommendation [30]. Existing methods usually take
two steps to generate node embeddings. First, they sample
meaningful paths to represent structural information in the
graph. Second, they apply various data mining techniques
from domains such as natural language processing (NLP),
utilizing technologies such as word2vec [18] for learning
meaningful vector embeddings.
The major difference between existing methods lie in the
ﬁrst step, i.e., how to mine better paths to capture the most
important graph information. In this context, the early work
DeepWalk [22] applies random walks to build paths for each
node. In order to give more importance to close-by neigh-
bors, Line [27] instead applies a breadth-ﬁrst search strategy,
building two types of paths: one-hop neighbors and two-hop
neighbors. Further, the authors of node2vec [7] observe that
the node embeddings should be decided by two kinds of simi-
larities, homophily and structural equivalence. The homophily
strategy would embed the nodes closely that are highly in-
terconnected and in similar cluster or community, while the
structural equivalence embeds the nodes closely that share
similar structural roles in the graph. Based on these strate-
gies, node2vec implements a biased random walk embedding
process which is able to model both similarity measures.
There are additionally many other graph neural network
architectures recently proposed, such as the convolution-based
GCN [12], attention-based GAT [28], and many variants based
on both [9]. However, they are mostly designed for semi-
supervised or supervised tasks, and are not as suitable for
unsupervised learning as the random-walk based approaches
mentioned previously.
6 Limitations & Future Work
Although our results are promising, there are several limiting
factors of our approach. The ﬁrst limitation is the problem of
explainability, which is not speciﬁc to our technique, but rather
a limitation of machine learning techniques in general. When
our graph learning algorithms label an event as an anomaly,
it is relatively challenging to determine why it has done so.
There is current and active research on explaining machine
learning and AI algorithms [3], and many even speciﬁc to
explaining the results of graph learning algorithms in partic-
ular [29]. We may be able to use some of these techniques
in the future which would allow us to identify what nodes
were most important when generating both the embedding,
and ultimately the link prediction scores.
Our detection algorithm is based on the assumption that
we will have historic data for each entity we plan to perform
link prediction on in the future. If we have never seen an
entity authenticate before, then we will not have an embed-
ding generated for that entity, and thus we will be unable to
perform the link prediction. There are many ways to handle
this problem, such as assigning new entities a generic "new
node" embedding, or assigning the new node embedding to
the average embedding of its neighbors (provided that they
have embeddings themselves), however we have not explored
the impact of these various approaches. We believe that, at
least in the case of enterprise network authentication, it is a
fair assumption to believe that for the vast majority of user
accounts in the network, there should be some history of their
behavior provided a sufﬁciently long historic window.
In this work we focused speciﬁcally on log data pertaining
to authentication events. However, there is a myriad of addi-
tional data that we could add to our graph and ultimately to
our graph learning algorithms. In the future we plan to add
ﬁner grained detail of actions performed by users, such as
DNS requests and ﬁle-share accesses. This will allow us to
also expand our detection algorithm to identify other stages
of the kill chain beyond lateral movement, such as command
and control trafﬁc, which would likely cause anomalous DNS
requests.
7 Conclusion
In this work we discussed the challenging problem of de-
tecting lateral movement of APT-level adversaries within
enterprise computer networks. We explained why existing
signature-based intrusion detection techniques are insufﬁ-
cient, and existing behavioral analytics are too ﬁne grained.
We introduced our technique of abstracting a computer net-
work to a graph of authenticating entities, and performing
unsupervised graph learning to generate node behavior em-
beddings. We discussed how we use these embeddings to
perform link prediction, and ultimately anomaly detection for
malicious authentication events. We applied our techniques
to both simulated and real-world datasets and were able to
detect anomalous authentication links with both increased
true positive rates, and decreased false positive rates, over
rule-based heuristics and non-graph ML anomaly detectors.
We analyzed the results of our algorithm, and developed sev-
eral simple ﬁlters to further reduce the false positive rate of
our technique.
266    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Acknowledgment
This work was supported in part by DARPA under agreement
number N66001-18-C-4033 and National Science Foundation
CAREER award 1350766 and grants 1618706 and 1717774,
as well as support from the ARCS Foundation. The views,
opinions, and/or ﬁndings expressed in this material are those
of the authors and should not be interpreted as representing
the ofﬁcial views or policies of the Department of Defense,
National Science Foundation, ARCS, or the U.S. Govern-
ment.
References
[1] Leyla Bilge, Davide Balzarotti, William Robertson, En-
gin Kirda, and Christopher Kruegel. Disclosure: detect-
ing botnet command and control servers through large-
scale netﬂow analysis. In Proceedings of the 28th An-
nual Computer Security Applications Conference, pages
129–138. ACM, 2012.
[2] Markus M Breunig, Hans-Peter Kriegel, Raymond T
Ng, and Jörg Sander. Lof: identifying density-based
local outliers. In ACM sigmod record, volume 29, pages
93–104. ACM, 2000.
[3] Mengnan Du, Ninghao Liu, Qingquan Song, and Xia
Hu. Towards explanation of dnn-based prediction with
guided feature inversion. In Proceedings of the 24th
ACM SIGKDD International Conference on Knowledge
Discovery & Data Mining, pages 1358–1367, 2018.
[4] A. Fawaz, A. Bohara, C. Cheh, and W. H. Sanders. Lat-
eral movement detection using distributed data fusion.
In 2016 IEEE 35th Symposium on Reliable Distributed
Systems (SRDS), pages 21–30, Sep. 2016.
[5] FireEye. M-trends 2019. https://content.ﬁreeye.com/m-
trends/rpt-m-trends-2019, 2019.
[6] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A.
Longstaff. A sense of self for unix processes. In Pro-
ceedings 1996 IEEE Symposium on Security and Pri-
vacy, pages 120–128, May 1996.
[7] Aditya Grover and Jure Leskovec. node2vec: Scalable
feature learning for networks. In Proceedings of the
22nd ACM SIGKDD international conference on Knowl-
edge discovery and data mining, pages 855–864. ACM,
2016.
[8] Michael Gutmann and Aapo Hyvärinen.
Noise-
contrastive estimation: A new estimation principle for
unnormalized statistical models. In Proceedings of the
Thirteenth International Conference on Artiﬁcial Intelli-
gence and Statistics, pages 297–304, 2010.
[9] William L Hamilton, Rex Ying, and Jure Leskovec. Rep-
resentation learning on graphs: Methods and applica-
tions. arXiv preprint arXiv:1709.05584, 2017.
[10] John R Johnson and Emilie A Hogan. A graph ana-
lytic metric for mitigating advanced persistent threat.
In 2013 IEEE International Conference on Intelligence
and Security Informatics, pages 129–133. IEEE, 2013.
[11] Alexander D. Kent. Comprehensive, Multi-Source
Cyber-Security Events. Los Alamos National Labo-
ratory, 2015.
[12] Thomas N Kipf and Max Welling. Semi-supervised
classiﬁcation with graph convolutional networks. arXiv
preprint arXiv:1609.02907, 2016.
[13] Christopher Kruegel and Giovanni Vigna. Anomaly
detection of web-based attacks. In Proceedings of the
10th ACM conference on Computer and communications
security, pages 251–261. ACM, 2003.
[14] Wenke Lee, Salvatore J Stolfo, and Kui W Mok. A
data mining framework for building intrusion detection
models. In Proceedings of the 1999 IEEE Symposium
on Security and Privacy (Cat. No. 99CB36344), pages
120–132. IEEE, 1999.
[15] Fei Tony Liu, Kai Ming Ting, and Zhi-Hua Zhou. Isola-
tion forest. In 2008 Eighth IEEE International Confer-
ence on Data Mining, pages 413–422. IEEE, 2008.
[16] Emaad Manzoor, Sadegh M Milajerdi, and Leman
Akoglu. Fast memory-efﬁcient anomaly detection in
In Proceedings of
streaming heterogeneous graphs.
the 22nd ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining, pages 1035–
1044. ACM, 2016.
[17] Lockheed Martin.
kill
https://www.lockheedmartin.com/en-
2020.
chain.
us/capabilities/cyber/cyber-kill-chain.html,
Accessed: 2020-01-16.
The
cyber
[18] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. Distributed representations of
words and phrases and their compositionality. In Ad-
vances in neural information processing systems, pages
3111–3119, 2013.
[19] Sadegh M. Milajerdi, Birhanu Eshete, Rigel Gjomemo,
and V.N. Venkatakrishnan. Poirot: Aligning attack be-
havior with kernel audit records for cyber threat hunting.
In Proceedings of the 2019 ACM SIGSAC Conference on
Computer and Communications Security, CCS ’19, page
1795–1812, New York, NY, USA, 2019. Association for
Computing Machinery.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    267
[20] Sadegh M Milajerdi, Rigel Gjomemo, Birhanu Eshete,
R Sekar, and VN Venkatakrishnan. Holmes: real-time
apt detection through correlation of suspicious informa-
tion ﬂows. In 2019 IEEE Symposium on Security and
Privacy (SP), pages 1137–1152. IEEE, 2019.
[21] MITRE. Mitre att@ck. https://attack.mitre.org/, 2020.
Accessed: 2020-01-16.
[22] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. Deep-
walk: Online learning of social representations. In Pro-
ceedings of the 20th ACM SIGKDD international con-
ference on Knowledge discovery and data mining, pages
701–710. ACM, 2014.
[23] R Sekar, Mugdha Bendre, Dinakar Dhurjati, and Pradeep
Bollineni. A fast automaton-based method for detecting
anomalous program behaviors. In Proceedings 2001
IEEE Symposium on Security and Privacy. S&P 2001,
pages 144–155. IEEE, 2000.
[24] Xiaokui Shu, Danfeng Yao, and Naren Ramakrishnan.
Unearthing stealthy program attacks buried in extremely
long execution paths. In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications
Security, pages 401–413. ACM, 2015.
[25] Snort.
Snort.
Accessed:2020-01-16.
[26] Splunk.
Splunk.
Accessed:2020-01-16.
https://www.snort.org/, 2020.
https://www.splunk.com, 2020.
[27] Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun
Yan, and Qiaozhu Mei. Line: Large-scale information
network embedding. In Proceedings of the 24th interna-
tional conference on world wide web, pages 1067–1077.
International World Wide Web Conferences Steering
Committee, 2015.
[28] Petar Veliˇckovi´c, Guillem Cucurull, Arantxa Casanova,
Adriana Romero, Pietro Lio, and Yoshua Bengio. Graph
attention networks. arXiv preprint arXiv:1710.10903,
2017.
[29] Rex Ying, Dylan Bourgeois, Jiaxuan You, Marinka Zit-
nik, and Jure Leskovec. Gnn explainer: A tool for
post-hoc explanation of graph neural networks. arXiv
preprint arXiv:1903.03894, 2019.
[30] Xiao Yu, Xiang Ren, Yizhou Sun, Quanquan Gu,
Bradley Sturt, Urvashi Khandelwal, Brandon Norick,
and Jiawei Han. Personalized entity recommendation:
A heterogeneous information network approach. In Pro-
ceedings of the 7th ACM international conference on
Web search and data mining, pages 283–292, 2014.
[31] Zeek.
The
zeek network security monitor.
https://zeek.org, 2020. Accessed: 2020-01-16.
268    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association