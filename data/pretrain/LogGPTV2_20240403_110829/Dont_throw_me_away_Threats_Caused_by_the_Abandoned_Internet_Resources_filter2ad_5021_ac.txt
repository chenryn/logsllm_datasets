org.apache.http.client.methods.HttpPost v2_1 = new org.apache.http.client.
(cid:44)→ methods.HttpPost("http://work.kryptomens.com/mofirst/c2dm/
(cid:44)→ adddevice.php");
java.util.ArrayList v1_1 = new java.util.ArrayList();
v1_1.add(new org.apache.http.message.BasicNameValuePair("deviceId", p8));
v1_1.add(new org.apache.http.message.BasicNameValuePair("token", p9));
v2_1.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(v1_1));
org.apache.http.HttpResponse v3 = com.myapphone.android.modules.push.
(cid:44)→
(cid:44)→ NetworkCommunication.httpClient.execute(v2_1);
}
Life Span of the Abandoned APKs
Figure 8 shows how long the APKs that contains abandoned
Internet resource inside their code have been available in Google
Play. This CDF count is based on the last known update of the APK.
On average, 50% of the APKs have been not updated for more than
3 years and less than 4 years. It is apparent that the APKs that have
abandoned Internet resource have been in Google Play for quite
sometime.
Permissions of Abandoned APKs
We noticed that there are a number of abandoned APKs request-
ing dangerous permissions. Based on the dangerous permission
which is defined in [6] by Google, we list the top 10 dangerous
permissions based on the number of APK that uses it in Table 5. As
stated on [6], Google defined these permissions dangerous because
they grant access to information or data that contains user’s private
information. As the app might send data containing user’s private
information to the resource on the Internet, then it is possible for
the attacker to obtain this data by hijacking the resource. We will
discuss this threat further in Section 5.1.
4.3 Impact of Hijacking the Resource
To study the impact of hijacking resources, we first studied the
popularity of apps that use the abandoned Internet resources. We
then looked at the price of the abandoned resources.
 Session 4: Mobile ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea153Table 4: Top 10 of the Most Used Abandoned Internet Resources.
Type of Resource
Obtainable IP address in EC2
Parked Domains
Expired Domains
Expired Domains
Expired Domains
Expired Domains
Parked Domains
Obtainable IP address in EC2
Expired Domains
Expired Domains
Domain or IP
75.101.249.xxx
giveapp.jp
socialauth.in
c2town.com
twipl.net
kryptomens.com
testcocoa.com
54.211.58.xxx
p41techdev.net
urbanislandz.com
1,115
597
203
168
134
126
123
92
51
49
# of APK Category
3rd Party Lib
3rd Party Lib
3rd Party Lib
3rd Party Lib
3rd Party Lib
Private Service
3rd Party Service
3rd Party Service
Private Service
3rd Party Service Website
Detail
UrbanAirship Push Notification Lib
App promotion Lib
SocialAuth [16]
com.trid.tridad
twitter4j
Back End Server
domain from cocoam.co.kr app building service
Video Ad Service
Back End Server
Table 5: Requested Permissions of Abandoned APKs.
Permission
WRITE_EXTERNAL_STORAGE
READ_PHONE_STATE
ACCESS_FINE_LOCATION
ACCESS_COARSE_LOCATION
GET_ACCOUNTS
CALL_PHONE
CAMERA
READ_EXTERNAL_STORAGE
READ_CONTACTS
SEND_SMS
# of APK
4,139
2,837
2,815
2,142
1,905
1,068
1,035
587
507
483
Table 6: Parked Domain Price.
Figure 9: Number of Installations of the Apps that Contain
Abandoned Resources.
Domain
giveapp.jp
testcocoa.com
rank-park.com
tovingo.com
nimbosolutions.com
Price
USD 19K
USD 477
USD 3.7K
USD 4.6K
N/A
# APK
597
123
49
39
34
Category
3rd Party Lib
3rd Party Service
3rd Party Lib
Private Service
Private Service
Figure 9 shows the distribution of the number of installations per
app that had abandoned Internet resources. By looking at number
of installations, we concluded that most of the APKs were not
popular and could explain why the resources were not updated
for a long time. There are, however, several apps with more than
1,000,000 installations. There is the possibility that these APKs still
have active users and hijacking the abandoned Internet resource
would impact them. In Section 5, we discuss whether an abandoned
Internet resource actually attracts traffic from real users.
For a certain type of resource such as parked domain, one way
to measure the number of potential victims (active users of the app)
was by looking at the price of the resource, which is an indication of
high-traffic usage. We observe that the price of the parked domain
which is used by a lot of APKs is exceptionally high. In Table 6, we
present the price of the top most used parked domain we found.
We could not get the price of nimbosolutions.com domain, but
according to WHOIS result this domain is held by domain parking
service named InternetTraffic. In summary, by looking at the price,
one can conjecture that all these domains still have a lot of traffic
because traffic can be monetized [38].
Under parked domains, we found a domain named giveapp.jp,
which was formerly an app searching service for the official ap-
plication in Google Play and Apple Store. They provide a third-
party library jp.co.cayto.appc.sdk.android and net.app_c.
cloud.sdk. These libraries have functionalities of providing app
ranking and app promotion. These functionalities were associated
with the two subdomains of giveapp.jp. The first library jp.co.
cayto.appc.sdk.android used api.giveapp.jp while the sec-
ond library, net.app_c.cloud.sdk used android.giveapp.jp. This
information was displayed as advertisement on the app. As of De-
cember 2017, the parked domain is held by Sedo domain parking
service with a value of USD 18,870. Domains related to advertising
are also commonly found in this category such as adcube.net held
by Sedo domain parking service and worth USD 4,888. These prices
are an indication of high-traffic domains that can pose a certain
risk to visitors [38].
4.4 Bogus Domains
As a byproduct of our analysis, we found several bogus domains,
which were used as placeholders inside the code (Table 7). This
kind of domain particularly appeared in third-party libraries. For
instance, we found placeyourdomainhere.com inside OSMDroid
(Open Street Map Droid) third-party library. Looking from the
names, the developers are supposed to change the example domain
to their own domain. However, they did not change it. The chances
are either the developer was unaware of it or they did not use
features associated with the bogus domain. We found that most
of these domains are parked domains (10 domains). Three of them
1101001,00010,000# of APKs# of InstallationsSession 4: Mobile ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea154Table 7: Placeholder Domains.
Domain
dummy.com
placeyourdomainhere.com
dummyurl.com
openuri.org
baseurl.com
myorg.org
mycompanyurl.com
example.org
yoursite.com
someurl.com
samplewebsite.com
somesite.com
some.site
yourdomain.com
#APK
1,152
327
243
113
37
34
32
15
11
5
1
1
1
1
are available for purchase. We note example.org is reserved by
IANA [22]. Like the abandoned domains, this kind of bogus domains
can also be a source of attacks.
4.5 Threats to validity
Although abandoned Internet resources of third-party libraries
would have the most widespread impact if hijacked, we were also
aware that network operation code in this resource may not be
executed on run time. This is one of the limitation of our work that
we discuss in Section 6.2. To validate our approach, we compared
the URLs of nine APKs detected by our static analysis with the
URLs detected by system that implements the dynamic analysis.
For dynamic analysis, we made use of a commercial sandbox that
could perform symbolic execution. While there was a difference
in the number of URLs found, the number of distinct domains and
subdomains found in our tool and sandbox were the same.
There is also the possibility that a resource may not be relevant
to the issues raised in this study. For instance, socialauth.in,
which is ranked 3rd (Table 4) was used by the developer for testing
connection. By judging from GitHub repository of this library, we
are certain that the developer of this library is still maintaining it,
since the last commit was quite recent. Even so, if the developer of
the apps does not update the library, then the mobile app will be
still using the old version library that contains abandoned Internet
resource.
5 THREAT CASE STUDIES
After we confirmed the existence of the abandoned Internet re-
source used by mobile apps, next question to be answered is whether
there is still traffic from mobile user to this.
5.1 Privacy Leak
As we have mentioned earlier, mobile apps may send sensitive
information such as user location and device ID to its back-end
server. For instance, by milking IP address on EC2, we obtained
several IP addresses, one of which is used by a domain named prod1.
magtogo.com. This domain is owned by developer called MagToGo.
According to Google Play, they have developed 76 apps but our
dataset only contained one in it. Through Google Cloud Messaging
(GCM) Service, this server sent push notification message to its
client. For that purpose the app needed to register the device by
sending device specific information such as IMEI and Device ID
to the domain that runs a REST Service on top of it. We launched
an EC2 instance on top of this domain, captured the traffic of this
domain for a one-month period and received 5,098 HTTP POST
traffic. Based on the user-agent string we counted the number
of mobile users and only found 26 distinct Android users and 57
distinct iPhone users. However, inside the HTTP POST body, we
found 1,186 unique Device ID. Since we counted distinct users
based on the IP address and employed heuristics to confirm that
the request was from the same user if it came from the same IP
address within one day, then we might have missed a number of
users behind NAT IP address. In addition, we found 1,794 APKs
requesting for C2D_message permission (permission for cloud to
device message); in the worst case, these 1,794 APKs might leak
some sensitive information such as Device ID and IMEI.
5.2 Scamming and Phishing
We assumed that because parked domains have high traffic from
mobile users, this type of domain would be a good target for scam-
ming and/or phishing. To test that, we purchased a parked domain
named iphone-english.com which was worth USD 300. The do-
main is used by a developer called Fourhalf as a full WebView
Activity inside their apps. As far as we could tell, the developer
built ten apps using AppInventor [14] service. These apps are lan-
guage learning education apps that load iphone-english.com web
page as a WebView. We launched server on it and captured the traf-
fic. We observed that traffic came from both iPhone and Android
users. Using the same counting method as we did earlier, we found
that even though the app was old (last update in 2012) there were
still 93 users from Android and 405 users from iPhone . Since the
actual app requires users to login (shown in Figure 10 (left)), we
conducted a simple experiment to see how many users attempted
to login to the app. We set up a simple web login page that had
social networks login buttons (Figure 10, right) and counted the
number of users who clicked the button. As we intend not to collect
sensitive information from users, we set the buttons so as nothing
happens when the user clicked a button.
We found that the 30 users who clicked the button were all
Android users. We conducted this experiment within one month
period. An attacker could set up a phishing or scamming page for
mobile apps that use the Internet resource to load WebView.
5.3 Monetizing
Parked domains are highly valuable because of the traffic they bring.
An attacker can buy the domain immediately after it is released
to public and turn it into parked domain. To increase the chance
of making money, the attacker can specifically target the domain
from third party library. Rather than make a parked domain out of
typosquatting domain, which is a common method, this is a more
certain way to make money. Other than engaging in malicious
activity, an adversary can resort to this method. Moreover, if the
domain is used as a WebView then the app user would be exposed
to scamming as reported in [38].
5.4 Injecting Malware Distribution URL
This kind of threat may emerge from consuming untrusted third-
party service. For example, wallpaper apps load image from expired
Session 4: Mobile ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea155owner of a particular IP address while keeping the privacy of the
owner. To protect personal identity of the owner, cloud providers
give the information in their hash value. Thus, developer of the apps
and marketplace operator can check from time to time whether a
particular IP address has changed ownership or not.
Monitoring the Internet Resources Used by the Apps. In the
time that the app is published, we suggest that the marketplace
operator record all Internet resources used by mobile apps. The
market-place operator can check for the ownership change of a
resource by employing an algorithm like Alembic [28]. Once own-
ership change is detected, the marketplace operator can confirm
with the developer and suspend the app. When it comes to the
domain used by third party library, marketplace operator such as
Google Play can put it into a vulnerability campaign such as ASI
program [12] and inform all developer that use the third-party
library in their apps.
Performing Authentication on Application Level. Studies in [34,