### Code Snippet
```java
org.apache.http.client.methods.HttpPost v2_1 = new org.apache.http.client.methods.HttpPost("http://work.kryptomens.com/mofirst/c2dm/adddevice.php");
java.util.ArrayList v1_1 = new java.util.ArrayList();
v1_1.add(new org.apache.http.message.BasicNameValuePair("deviceId", p8));
v1_1.add(new org.apache.http.message.BasicNameValuePair("token", p9));
v2_1.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(v1_1));
org.apache.http.HttpResponse v3 = com.myapphone.android.modules.push.NetworkCommunication.httpClient.execute(v2_1);
```

### Lifespan of Abandoned APKs
Figure 8 illustrates the duration for which APKs containing abandoned Internet resources have been available on Google Play. This cumulative distribution function (CDF) is based on the last known update of the APKs. On average, 50% of these APKs have not been updated for more than three years but less than four years. It is evident that APKs with abandoned Internet resources have been present on Google Play for a considerable period.

### Permissions of Abandoned APKs
We observed that several abandoned APKs request dangerous permissions. According to Google's definition in [6], we list the top 10 dangerous permissions based on the number of APKs using them in Table 5. These permissions are deemed dangerous because they provide access to sensitive user information. If an app sends data containing private user information to an abandoned Internet resource, an attacker could potentially intercept this data by hijacking the resource. We will further discuss this threat in Section 5.1.

### Impact of Hijacking the Resource
To study the impact of hijacking resources, we first examined the popularity of apps using abandoned Internet resources and then analyzed the price of these resources.

#### Table 4: Top 10 Most Used Abandoned Internet Resources
| Type of Resource | Domain or IP | # of APKs | Category | Detail |
|------------------|--------------|-----------|----------|--------|
| Obtainable IP address in EC2 | 75.101.249.xxx | 1,115 | 3rd Party Lib | UrbanAirship Push Notification Lib |
| Parked Domains | giveapp.jp | 597 | 3rd Party Lib | App promotion Lib |
| Expired Domains | socialauth.in | 203 | 3rd Party Lib | SocialAuth [16] |
| Expired Domains | c2town.com | 168 | 3rd Party Lib | com.trid.tridad |
| Expired Domains | twipl.net | 134 | 3rd Party Lib | twitter4j |
| Expired Domains | kryptomens.com | 126 | Private Service | Back End Server |
| Parked Domains | testcocoa.com | 123 | 3rd Party Service | domain from cocoam.co.kr app building service |
| Obtainable IP address in EC2 | 54.211.58.xxx | 92 | 3rd Party Service | Video Ad Service |
| Expired Domains | p41techdev.net | 51 | Private Service | Back End Server |
| Expired Domains | urbanislandz.com | 49 | 3rd Party Service | Website |

#### Table 5: Requested Permissions of Abandoned APKs
| Permission | # of APKs |
|------------|-----------|
| WRITE_EXTERNAL_STORAGE | 4,139 |
| READ_PHONE_STATE | 2,837 |
| ACCESS_FINE_LOCATION | 2,815 |
| ACCESS_COARSE_LOCATION | 2,142 |
| GET_ACCOUNTS | 1,905 |
| CALL_PHONE | 1,068 |
| CAMERA | 1,035 |
| READ_EXTERNAL_STORAGE | 587 |
| READ_CONTACTS | 507 |
| SEND_SMS | 483 |

#### Table 6: Parked Domain Prices
| Domain | Price | # APKs | Category |
|--------|-------|--------|----------|
| giveapp.jp | USD 19K | 597 | 3rd Party Lib |
| testcocoa.com | USD 477 | 123 | 3rd Party Service |
| rank-park.com | USD 3.7K | 49 | 3rd Party Lib |
| tovingo.com | USD 4.6K | 39 | Private Service |
| nimbosolutions.com | N/A | 34 | Private Service |

### Figure 9: Number of Installations of Apps Containing Abandoned Resources
Figure 9 shows the distribution of the number of installations per app containing abandoned Internet resources. Most of these APKs are not popular, which explains why the resources were not updated for a long time. However, some apps have over 1,000,000 installations, indicating that these APKs still have active users, and hijacking the abandoned resources could impact them. In Section 5, we will discuss whether abandoned Internet resources attract traffic from real users.

### Measuring Potential Victims
For parked domains, one way to measure the number of potential victims (active users of the app) is by looking at the domain's price, which indicates high-traffic usage. For example, the domain `giveapp.jp` was formerly an app searching service for official applications in Google Play and Apple Store. It provided third-party libraries such as `jp.co.cayto.appc.sdk.android` and `net.app_c.cloud.sdk`, which had functionalities for app ranking and promotion. As of December 2017, the domain is held by Sedo domain parking service with a value of USD 18,870. This high price suggests significant traffic, which can be monetized [38].

### Bogus Domains
As a byproduct of our analysis, we found several bogus domains used as placeholders in the code (Table 7). These domains often appear in third-party libraries, where developers are supposed to replace the placeholder with their own domain. However, many did not make this change, either due to unawareness or non-use of the associated features. Most of these domains are parked, and some are available for purchase. For instance, `example.org` is reserved by IANA [22]. Like abandoned domains, these bogus domains can also be a source of attacks.

#### Table 7: Placeholder Domains
| Domain | #APKs |
|--------|-------|
| dummy.com | 1,152 |
| placeyourdomainhere.com | 327 |
| dummyurl.com | 243 |
| openuri.org | 113 |
| baseurl.com | 37 |
| myorg.org | 34 |
| mycompanyurl.com | 32 |
| example.org | 15 |
| yoursite.com | 11 |
| someurl.com | 5 |
| samplewebsite.com | 1 |
| somesite.com | 1 |
| some.site | 1 |
| yourdomain.com | 1 |

### Threats to Validity
While abandoned Internet resources in third-party libraries can have a widespread impact if hijacked, we acknowledge that the network operation code in these resources may not always execute at runtime. This is a limitation of our work, discussed in Section 6.2. To validate our approach, we compared the URLs detected by our static analysis with those detected by a commercial sandbox that performs dynamic analysis. Although there was a difference in the number of URLs found, the number of distinct domains and subdomains was the same.

There is also the possibility that a resource may not be relevant to the issues raised in this study. For example, `socialauth.in`, ranked 3rd in Table 4, was used for testing connections. The library's GitHub repository shows recent commits, indicating it is still maintained. However, if app developers do not update the library, the mobile app will continue to use the old version, which contains abandoned Internet resources.

### Threat Case Studies

#### 5.1 Privacy Leak
Mobile apps may send sensitive information such as user location and device ID to their back-end servers. For instance, by analyzing IP addresses on EC2, we obtained several IPs, including one used by the domain `prod1.magtogo.com`. This domain is owned by a developer called MagToGo, who has developed 76 apps, but only one is in our dataset. Using Google Cloud Messaging (GCM) Service, this server sent push notifications to its clients, requiring the app to register the device by sending specific information such as IMEI and Device ID. We launched an EC2 instance on this domain, captured traffic for a month, and received 5,098 HTTP POST requests. Based on the user-agent string, we counted 26 distinct Android users and 57 distinct iPhone users. However, the HTTP POST body contained 1,186 unique Device IDs. Since we counted distinct users based on IP addresses and employed heuristics, we might have missed users behind NAT IP addresses. Additionally, 1,794 APKs requested C2D_message permission, potentially leaking sensitive information such as Device ID and IMEI.

#### 5.2 Scamming and Phishing
Parked domains with high traffic from mobile users are good targets for scamming and phishing. To test this, we purchased the parked domain `iphone-english.com` for USD 300. This domain was used by a developer called Fourhalf in a full WebView Activity within their language learning education apps. We launched a server on this domain and captured traffic, observing that it came from both iPhone and Android users. Using the same counting method, we found that despite the app being old (last update in 2012), there were still 93 Android users and 405 iPhone users. Since the app requires users to log in, we conducted an experiment with a simple web login page that had social network login buttons. We found that 30 users, all Android users, clicked the button. An attacker could set up a phishing or scamming page for mobile apps that load WebViews.

#### 5.3 Monetizing
Parked domains are valuable due to the traffic they generate. An attacker can buy a domain immediately after it is released to the public and turn it into a parked domain. To increase the chance of making money, the attacker can target domains from third-party libraries. This is a more certain way to make money compared to typosquatting. If the domain is used as a WebView, the app user would be exposed to scamming, as reported in [38].

#### 5.4 Injecting Malware Distribution URL
This threat can arise from consuming untrusted third-party services. For example, wallpaper apps loading images from expired domains can lead to malware distribution. To mitigate this, cloud providers can provide hash values of IP addresses to check ownership changes. Marketplace operators can record all Internet resources used by mobile apps and employ algorithms like Alembic [28] to detect ownership changes. Once detected, the operator can confirm with the developer and suspend the app. For domains used by third-party libraries, marketplace operators can inform developers through vulnerability campaigns like ASI [12].

### Performing Authentication on Application Level
Studies in [34, ...] suggest performing authentication on the application level to enhance security.