be circumvented.
Attacking Other Network Hosts
Following a successful port scan to identify other hosts, a malicious script can
attempt to fi ngerprint each discovered service and then attack it in various ways.
cc1133..iinndddd 556611 88//1199//22001111 1122::1144::0055 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 562
562 Chapter 13 n Attacking Users: Other Techniques
Many web servers contain image fi les located at unique URLs. The following
code checks for a specifi c image associated with a popular range of DSL routers:
If the function notNetgear is not invoked, the server has been successfully
fi ngerprinted as a NETGEAR router. The script can then proceed to attack the
web server, either by exploiting any known vulnerabilities in the particular
software or by performing a request forgery attack. In this example, the attacker
could attempt to log in to the router with default credentials and reconfi gure
the router to open additional ports on its external interface, or expose its admin-
istrative function to the world. Note that many highly effective attacks of this
kind require only the ability to issue arbitrary requests, not to process their
responses, so they are unaffected by the same-origin policy.
In certain situations, an attacker may be able to leverage DNS rebinding tech-
niques to violate the same-origin policy and actually retrieve content from web
servers on the local network. These attacks are described later in this chapter.
Exploiting Non-HTTP Services
Going beyond attacks against web servers, in some situations it is possible to
leverage a user’s browser to target non-HTTP services that are accessible from
the user’s machine. Provided that the service in question tolerates the HTTP
headers that unavoidably come at the start of each request, an attacker can send
arbitrary binary content within the message body to interact with the non-HTTP
service. Many network services do in fact tolerate unrecognized input and still
process subsequent input that is well-formed for the protocol in question.
One technique for sending an arbitrary message body cross-domain was
described in Chapter 12, in which an HTML form with the enctype attribute set
to text/plain was used to send XML content to a vulnerable application. Other
techniques for delivering these attacks are described in the following paper:
www.ngssoftware.com/research/papers/InterProtocolExploitation.pdf
Such interprotocol attacks may be used to perform unauthorized actions on
the destination service or to exploit code-level vulnerabilities within that service
to compromise the targeted server.
Furthermore, in some situations, behavior in non-HTTP services may actually
be exploitable to perform XSS attacks against web applications running on the
same server. Such an attack requires the following conditions to be met:
n The non-HTTP service must be running on a port that is not blocked by
browsers, as described previously.
n The non-HTTP service must tolerate unexpected HTTP headers sent by
the browser, and not just shut down the network connection when this
happens. The former is common for many services, particularly those
that are text-based.
cc1133..iinndddd 556622 88//1199//22001111 1122::1144::0055 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 563
Chapter 13 n Attacking Users: Other Techniques 563
n The non-HTTP service must echo part of the request contents in its response,
such as in an error message.
n The browser must tolerate responses that do not contain valid HTTP
headers, and in this situation must process a portion of the response as
HTML if that is what it contains. This is in fact how all current browsers
behave when suitable non-HTTP responses are received, probably for
backward-compatibility purposes.
n The browser must ignore the port number when segregating cross-origin
access to cookies. Current browsers are indeed port-agnostic in their
handling of cookies.
Given these conditions, an attacker can construct an XSS attack targeting the
non-HTTP service. The attack involves sending a crafted request, in the URL
or message body, in the normal way. Script code contained in the requests is
echoed and executes in the user’s browser. This code can read the user’s cook-
ies for the domain on which the non-HTTP service resides, and transmit these
to the attacker.
Exploiting Browser Bugs
If bugs exist within the user’s browser software or any installed extensions, an
attacker may be able to exploit these via malicious JavaScript or HTML. In some
cases, bugs within extensions such as the Java VM have enabled attackers to
perform two-way binary communication with non-HTTP services on the local
computer or elsewhere. This enables the attacker to exploit vulnerabilities that
exist within other services identifi ed via port scanning. Many software prod-
ucts (including non-browser-based products) install ActiveX controls that may
contain vulnerabilities.
DNS Rebinding
DNS rebinding is a technique that can be used to perform a partial breach of
same-origin restrictions in some situations, enabling a malicious website to
interact with a different domain. The possibility of this attack arises because the
segregations in the same-origin policy are based primarily on domain names,
whereas the ultimate delivery of HTTP requests involves converting domain
names into IP addresses.
At a high level, the attack works as follows:
n The user visits a malicious web page on the attacker’s domain. To retrieve
this page, the user’s browser resolves the attacker’s domain name to the
attacker’s IP address.
n The attacker’s web page makes Ajax requests back to the attacker’s domain,
which is allowed by the same-origin policy. The attacker uses DNS rebinding
cc1133..iinndddd 556633 88//1199//22001111 1122::1144::0055 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 564
564 Chapter 13 n Attacking Users: Other Techniques
to cause the browser to resolve the attacker’s domain a second time, and
this time the domain name resolves to the IP address of a third-party
application, which the attacker is targeting.
n Subsequent requests to the attacker’s domain name are sent to the tar-
geted application. Since these are on the same domain as the attacker’s
original page, the same-origin policy allows the attacker’s script to
retrieve the contents of the responses from the targeted application
and send these back to the attacker, possibly on a different attacker-
controlled domain.
This attack faces various obstacles, including mechanisms in some browsers
to continue using a previously resolved IP address, even if the domain has been
rebound to a different address. Furthermore, the Host header sent by the browser
usually still refers to the attacker’s domain, not that of the target application,
which may cause problems. Historically, methods have existed by which these
obstacles can be circumvented on different browsers. In addition to the browser,
DNS rebinding attacks may be performed against browser extensions and web
proxies, all of which may behave in different ways.
Note that in DNS rebinding attacks, requests to the targeted application are
still made in the context of the attacker’s domain, as far as the browser is con-
cerned. Hence, any cookies for the actual domain of the target application are
not included in these requests. For this reason, the content that can be retrieved
from the target via DNS rebinding is the same as could be retrieved by anyone
who can make direct requests to the target. The technique is primarily of interest,
therefore, where other controls are in place to prevent an attacker from directly
interacting with the target. For example, a user residing on an organization’s
internal networks, which cannot be reached directly from the Internet, can be
made to retrieve content from other systems on those networks and transit this
content to the attacker.
Browser Exploitation Frameworks
Various frameworks have been developed to demonstrate and exploit the variety
of possible attacks that may be carried out against end users on the Internet.
These typically require a JavaScript hook to be placed into the victim’s browser
via some vulnerability such as XSS. Once the hook is in place, the browser
contacts a server controlled by the attacker. It may poll this server periodically,
submitting data back to the attacker and providing a control channel for receiv-
ing commands from the attacker.
cc1133..iinndddd 556644 88//1199//22001111 1122::1144::0055 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 565
Chapter 13 n Attacking Users: Other Techniques 565
NOTE Despite the restrictions imposed by the same-origin policy, various
techniques can be used in this situation to allow two-way asynchronous interac-
tion with the attacker’s server from a script that has been injected into a target
application. One simple method is to perform dynamic cross-domain script
includes to the attacker’s domain. These requests can both transmit captured
data back to the attacker (within the URL query string) and receive instructions
about actions that should be performed (within the returned script code).
Here are some actions that may be carried out within this type of framework:
n Logging keystrokes and sending these to the attacker
n Hijacking the user’s session with the vulnerable application
n Fingerprinting the victim’s browser and exploiting known browser vul-
nerabilities accordingly
n Performing port scans of other hosts (which may be on a private network
accessible by the compromised user browser) and sending the results to
the attacker
n Attacking other web applications accessible via the compromised user’s
browser by forcing the browser to send malicious requests
n Brute-forcing the user’s browsing history and sending this to the attacker
One example of a sophisticated browser exploitation framework is BeEF,
developed by Wade Alcon, which implements the functionality just described.
Figure 13-8 shows BeEF capturing information from a compromised user,
including computer details, the URL and page content currently displayed, and
keystrokes entered by the user.
Figure 13-8: Data captured from a compromised user by BeEF
cc1133..iinndddd 556655 88//1199//22001111 1122::1144::0055 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 566
566 Chapter 13 n Attacking Users: Other Techniques
Figure 13-9 shows BeEF performing a port scan of the victim user’s own
computer.
Figure 13-9: BeEF performing a port scan of a compromised user’s computer
Another highly functional browser exploitation framework is XSS Shell, pro-
duced by Ferruh Mavituna. It provides a wide range of functions for manipulating
zombie hosts compromised via XSS, including capturing keystrokes, clipboard
contents, mouse movements, screenshots, and URL history, as well as the injec-
tion of arbitrary JavaScript commands. It also remains resident within the user’s
browser if she navigates to other pages within the application.
Man-in-the-Middle Attacks
Earlier chapters described how a suitably positioned attacker can intercept
sensitive data, such as passwords and session tokens, if an application uses
unencrypted HTTP communications. What is more surprising is that some
serious attacks can still be performed even if an application uses HTTPS for
all sensitive data and the target user always verifi es that HTTPS is being used
properly.
These attacks involve an “active” man in the middle. Instead of just passively
monitoring another user’s traffi c, this type of attacker also changes some of that
traffi c on the fl y. Such an attack is more sophisticated, but it can certainly be
delivered in numerous common situations, including public wireless hotspots
and shared offi ce networks, and by suitably minded governments.
Many applications use HTTP for nonsensitive content, such as product descrip-
tions and help pages. If such content makes any script includes using absolute
URLs, an active man-in-the-middle attack can be used to compromise HTTPS-
protected requests on the same domain. For example, an application’s help page
may contain the following:
cc1133..iinndddd 556666 88//1199//22001111 1122::1144::0055 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 567
Chapter 13 n Attacking Users: Other Techniques 567
This behavior of using absolute URLs to include scripts over HTTP appears
in numerous high-profi le applications on the web today. In this situation, an
active man-in-the-middle attacker could, of course, modify any HTTP response
to execute arbitrary script code. However, because the same-origin policy gen-
erally treats content loaded over HTTP and HTTPS as belonging to different
origins, this would not enable the attacker to compromise content that is accessed
using HTTPS.
To overcome this obstacle, the attacker can induce a user to load the same
page over HTTPS by modifying any HTTP response to cause a redirection or
by rewriting the targets of links in another response. When the user loads the
help page over HTTPS, her browser performs the specifi ed script include using
HTTP. Crucially, some browsers do not display any warnings in this situation.
The attacker can then return his arbitrary script code in the response for the
included script. This script executes in the context of the HTTPS response,
allowing the attacker to compromise this and further content that is accessed
over HTTPS.
Suppose that the application being targeted does not use plain HTTP for any
content. An attacker can still induce the user to make requests to the target
domain using plain HTTP by returning a redirection from an HTTP request
made to any other domain. Although the application itself may not even listen
for HTTP requests on port 80, the attacker can intercept these induced requests
and return arbitrary content in response to them. In this situation, various
techniques can be used to escalate the compromise into the HTTPS origin for
the application’s domain:
n First, as was described for cookie injection attacks, the attacker can use a
response over plain HTTP to set or update a cookie value that is used in
HTTPS requests. This can be done even for cookies that were originally
set over HTTPS and fl agged as secure. If any cookie values are processed
in an unsafe way by script code running in the HTTPS origin, a cookie
injection attack can be used to deliver an XSS exploit via the cookie.
n Second, as mentioned, some browser extensions do not properly segregate
content loaded over HTTP and HTTPS and effectively treat this as belong-
ing to a single origin. The attacker’s script, returned in a response to an
induced HTTP request, can leverage such an extension to read or write
the contents of pages that the user accessed using HTTPS.
The attacks just described rely on some method of inducing the user to make an
arbitrary HTTP request to the target domain, such as by returning a redirection
response from an HTTP request that the user makes to any other domain. You
might think that a security-paranoid user would be safe from this technique.
Suppose the user accesses only one website at a time and restarts his browser
before accessing each new site. Suppose he logs in to his banking application,
cc1133..iinndddd 556677 88//1199//22001111 1122::1144::0055 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 568
568 Chapter 13 n Attacking Users: Other Techniques
which uses pure HTTPS, from a clean new browser. Can he be compromised
by an active man-in-the-middle attack?
The disturbing answer is that yes, he probably can be compromised. Today’s
browsers make numerous plain HTTP requests in the background, regardless
of which domains the user visits. Common examples include antiphishing lists,
version pings, and requests for RSS feeds. An attacker can respond to any of
these requests with a redirection to the targeted domain using HTTP. When the
browser silently follows the redirection, one of the attacks already described
can be delivered, fi rst to compromise the HTTP origin for the targeted domain,
and then to escalate this compromise into the HTTPS origin.
Security-paranoid users who need to access sensitive HTTPS-protected content
via an untrusted network can (probably) prevent the technique just described
by setting their browser’s proxy confi guration to use an invalid local port for all
protocols other than HTTPS. Even if they do this, they may still need to worry
about active attacks against SSL, a topic that is outside the scope of this book.
Summary
We have examined a huge variety of ways in which defects in a web application
may leave its users exposed to malicious attack. Many of these vulnerabilities
are complex to understand and discover and often necessitate an amount of
investigative effort that exceeds their signifi cance as the basis for a worthwhile
attack. Nevertheless, it is common to fi nd that lurking among a large number
of uninteresting client-side fl aws is a serious vulnerability that can be leveraged
to attack the application itself. In many cases, the effort is worth it.
Furthermore, as awareness of web application security continues to evolve,
direct attacks against the server component itself are likely to become less
straightforward to discover and execute. Attacks against other users, for better
or worse, are certainly part of everyone’s future.
Questions
Answers can be found at http://mdsec.net/wahh.
1. You discover an application function where the contents of a query string
parameter are inserted into the Location header in an HTTP redirect. What
three different types of attacks can this behavior potentially be exploited
to perform?
2. What main precondition must exist to enable a CSRF attack against a
sensitive function of an application?
3. What three defensive measures can be used to prevent JavaScript hijack-
ing attacks?
cc1133..iinndddd 556688 88//1199//22001111 1122::1144::0055 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 569
Chapter 13 n Attacking Users: Other Techniques 569
4. For each of the following technologies, identify the circumstances, if any,
in which the technology would request /crossdomain.xml to properly
enforce domain segregation:
(a) Flash
(b) Java
(c) HTML5
(d) Silverlight
5. “We’re safe from clickjacking attacks because we don’t use frames.” What,
if anything, is wrong with this statement?
6. You identify a persistent XSS vulnerability within the display name cap-
tion used by an application. This string is only ever displayed to the user
who confi gured it, when they are logged in to the application. Describe
the steps that an attack would need to perform to compromise another
user of the application.
7. How would you test whether an application allows cross-domain requests
usingXMLHttpRequest?
8. Describe three ways in which an attacker might induce a victim to use an
arbitrary cookie.
cc1133..iinndddd 556699 88//1199//22001111 1122::1144::0055 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 570
cc1133..iinndddd 557700 88//1199//22001111 1122::1144::0066 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 571
CHAPTER
14