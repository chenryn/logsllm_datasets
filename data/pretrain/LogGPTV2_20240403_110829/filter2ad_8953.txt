# CVE-2019-0604：SharePoint 的远程代码执行漏洞

##### 译文声明
本文是翻译文章，原文作者为 thezdi，来源于 thezdi.com。译文仅供参考，具体内容及含义以原文为准。

上个月，微软发布了针对两个 SharePoint 远程代码执行 (RCE) 漏洞的修复补丁。攻击者可以通过发送特制请求在 SharePoint 应用池上下文和服务器账户中执行恶意代码。这两个漏洞由 Markus Wulftange 报告给 ZDI 组织，并被分配了编号 CVE-2019-0604。

## 寻找漏洞的方法

在寻找新漏洞时，一种常用策略是从底层代码开始分析。首先找到可能存在漏洞的代码段，然后跟踪与之相关的所有数据流。其中，使用 `XmlSerializer` 进行反序列化是一段潜在的脆弱代码。虽然 `XmlSerializer` 通常较为安全，因为它要求数据流必须符合预期类型且不允许调用者指定任意类型，但如果预期类型本身可被控制，则该机制仍有可能被利用。

为了对 SharePoint 2016 进行分析，可以使用 dnSpy 对 .NET 应用程序进行反编译和调试。通过将 dnSpy 附加到 IIS worker 进程（w3wp.exe），我们能够查看 `XmlSerializer(Type)` 构造函数的具体使用情况。接下来需要检查每个调用此构造函数的位置，确认期望的类型是否可变以及是否可以对其进行控制。

### 分析特定调用点

第一个发现的 `XmlSerializer(Type)` 调用位于 `Microsoft.SharePoint.dll` 中的 `_Microsoft.SharePoint.BusinessData.Infrastructure.EntityInstanceIdEncoder.DecodeEntityInstanceId(string)` 方法内。同样的类型也出现在 `Microsoft.SharePoint.Portal.dll` 的 `_Microsoft.Office.Server.ApplicationRegistry.Infrastructure` 类里。让我们先关注前者。

在此方法中，`typeName` 和 `text` 均由参数 `encodeId` 生成，前者用于指定目标类型，后者则用于反序列化过程。如果能够控制传入参数，则意味着我们可以影响整个反序列化流程。

## 数据流追踪

下一步是查找是否存在外部可访问并能设置上述参数值的地方。对于熟悉 ASP.NET 的开发者来说，`_Page_Load(object, EventArgs)` 和 `_OnLoad(EventArgs)` 等生命周期事件应该并不陌生。这些方法定义于 `System.Web.UI.Page` 类中，而以下三个类继承自它：

- `Microsoft.SharePoint.ApplicationPages.ActionRedirectPage`：对应 `/_layouts/15/ActionRedirect.aspx`
- `Microsoft.SharePoint.ApplicationPages.DownloadExternalData`：对应 `/_layouts/15/downloadexternaldata.aspx`
- `Microsoft.SharePoint.Portal.WebControls.ProfileRedirect`：对应 `/_layouts/15/TenantProfileAdmin/profileredirect.aspx`

尽管在这三种情况下参数都来自 HTTP 请求中的 URL 查询字符串，但十六进制编码会导致长度显著增加，可能超出HTTP请求限制。经过进一步研究后，最后一个选项似乎是最具潜力的选择。

在这里，`PickerEntity` 方法接收一个具有 `Key` 属性的对象作为参数，该属性随后传递给 `_EntityInstanceIdEncoder.DecodeEntityInstanceId(string)` 方法。此方法被 `EntityEditor.Validate()` 函数调用，后者遍历验证存储在 `EntityEditor.Entities` 属性内的每一个条目。而 `EntityEditor.Validate()` 则由实现了 `System.Web.UI.IPostBackDataHandler.LoadPostData(string, NameValueCollection)` 接口的 `EntityEditor.LoadPostData(string, NameValueCollection)` 方法触发。

因此，当向 `ItemPicker` 控件发出回发请求时，上述逻辑链将自动执行。相关类型的层次结构如下所示：

### 验证可控性

现在已知从 `ItemPicker` 可以调用至 `_EntityInstanceIdEncoder.DecodeEntityInstanceId(string)`，但尚不清楚 `PickerEntity` 的 `Key` 属性是否同样受控。经调查发现，`EntityEditor.Entities` 属性基于 `m_listOrder` 字段生成，后者仅在实例化过程中及 `EntityEditor.Validate()` 内部分配值。而在 `EntityEditor.Validate()` 中，`m_listOrder` 从私有变量 `m_listOrderTemp` 获取其值；`m_listOrderTemp` 亦只在初始化阶段及 `EntityEditor.ParseSpanData(string)` 方法内部更新。后者接受名为 `hiddenSpanData` 的属性值作为输入。

深入分析 `EntityEditor.ParseSpanData(string)` 后发现，除非遇到 `<` 和 `>` 标签，否则其余部分都将被视为 `PickerEntity` 的 `Key` 并添加到 `m_listOrderTemp` 列表中。这意味着我们已经找到了一条允许从 `ItemPicker` 回发请求传递至 `_EntityInstanceIdEncoder.DecodeEntityInstanceId(string)` 的路径，并且输入是可以控制的。最后一步是确定实际存在哪个 Web 控件实例。

### 定位攻击入口

尽管 `ItemPicker` Web 控件从未直接出现在任何 `.aspx` 页面上，但其基类 `EntityEditorWithPicker` 却被 `/_layouts/15/Picker.aspx` 文件所引用。要使用选择器对话框，需通过 URL 参数 `PickerDialogType` 指定具体类型，支持以下两种 `ItemPickerDialog` 实现：

- `Microsoft.SharePoint.WebControls.ItemPickerDialog` 在 `Microsoft.SharePoint.dll` 中定义
- `Microsoft.SharePoint.Portal.WebControls.ItemPickerDialog` 在 `Microsoft.SharePoint.Portal.dll` 中定义

采用第一种类型时，页面底部会显示一个文本字段与 `ItemPicker` 关联，并存在一个名为 `ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData` 的隐藏输入元素。

## 概念验证 (PoC)

当提交表单并将 `ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData` 设置为以双下划线开头（例如“__dummy”）时，断点将命中 `_EntityInstanceIdEncoder.DecodeEntityInstanceId(string)` 处，此时函数调用栈显示如下：

这表明 `hiddenSpanData` 的内容确实到达了 `_EntityInstanceIdEncoder.DecodeEntityInstanceId(string)` 方法。剩下的工作就是复制实体 ID 并构建相应的 `XmlSerializer` 载荷即可完成攻击。