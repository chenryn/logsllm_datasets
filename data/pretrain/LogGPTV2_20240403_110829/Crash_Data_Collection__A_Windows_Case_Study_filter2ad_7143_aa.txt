# Crash Data Collection: A Windows Case Study

## Authors
Archana Ganapathi and David A. Patterson  
Computer Science Division, University of California at Berkeley  
{archanag, patterson}@cs.berkeley.edu

## Abstract
Reliability is a growing concern in the contemporary Personal Computer (PC) industry, affecting both users and product developers. To enhance dependability, system designers and programmers need to consider failure and usage data for operating systems and applications. This paper discusses our experience with crash and usage data collection for Windows machines, focusing on results from the UC Berkeley EECS department.

## 1. Introduction
Modern operating systems integrate various hardware and software components, but this flexibility can lead to complex, unanticipated, and unsafe interactions, resulting in an unstable environment that often frustrates users. Collecting and analyzing failure data provides insights into how computer systems behave under different hardware configurations. Common misconceptions about Windows, such as it being unreliable, are difficult to validate or refute without concrete data. Our study aims to shed light on the factors affecting Windows PC reliability.

From a research perspective, failure data mining has multiple benefits. It reveals the primary causes of failures in popular computer systems, identifies products causing the most user frustration, and aids in the development of benchmarks for evaluating product quality. These benchmarks can influence the design of reliable systems. Additionally, failure data helps formulate and address research issues in computer system reliability. Within organizations, knowledge of failure data can improve service quality by enabling the evaluation of downtime causes and cost-benefit analyses.

## 2. Related Research
Over the past decade, several studies have focused on root-cause analysis for operating systems (OS), including Guardian OS, Tandem Non-Stop UX OS, VAX/VMS, and Windows NT. Our study of Windows crash data assesses the evolution of PC reliability and compares these results with earlier systems. Koopman et al. [9] test operating systems against the POSIX specification. Murphy [12] found that display drivers and memory are frequent causes of crashes in Windows XP. We expand on this work by evaluating both application and OS crashes, studying actual crash instances rather than injecting artificial faults.

Several researchers have provided significant insights into benchmarking and failure data analysis. Wilson et al. [18] suggest evaluating the relationship between failures and service availability. Ganapathi et al. [5] examine Windows XP registry problems and their impact on system stability. Levendel [11] proposes using the catastrophic nature of failures to evaluate system stability. Brown et al. [2,3] provide a practical perspective on system dependability by incorporating user experiences in benchmarks. In our study, we consider these factors when evaluating various applications.

## 3. Data Collection and Analysis Process
Our data collection and analysis methodology follows the guidelines provided in [12]. We define several key terms used throughout the paper:

- **Application Crash**: A crash occurring at the user-level, caused by one or more components (.exe/.dll files), requiring an application restart.
- **Application Hang**: An application crash caused by a potentially deadlocked or infinite loop process, where the component causing the loop cannot be identified if the user intervenes to terminate the process.
- **OS Crash**: A crash occurring at the kernel-level, caused by memory corruption, bad drivers, or faulting system-level routines. OS crashes include bluescreen-generating crashes and Windows explorer crashes.

To collect data, we use Microsoft's Corporate Error Reporting software. We configure a server with a shared directory to receive crash reports directly. Client machines require no additional software; we modify a few registry entries to redirect crash reports to our server instead of Microsoft. We also disable the prompt asking users if they want to send a crash report, ensuring we receive all crash data.

Upon each crash, a "minidump" is generated, containing a snapshot of the computer's state during the crash. This includes a list of loaded binaries and a brief stack trace. We parse crash dumps using Microsoft's "Debugging Tools for Windows" (WinDbg) and retrieve debugging symbols from Microsoft's server. The drawback of this approach is that third-party symbols are not publicly available, making it difficult to accurately identify the component causing the application crash.

Once crash dumps are parsed, filtering data is essential. When a computer crashes, subsequent crashes may occur due to instability. To avoid double-counting, we treat crash events occurring within 10 minutes of each other as a single event. Our data from EECS was filtered from 1954 crash instances to 1546 data points.

Additional limitations arise due to privacy concerns. Ideally, we would like to know the duration of each application or process and associated resource consumption. Continuous machine metrics and process information before and during the crash would improve the accuracy of our analysis.

## 4. Windows XP Analysis Results

### 4.1 OS Crashes are Few but Frustrating
OS crashes are more frustrating than application crashes because they require the user to kill and restart the explorer process, or even reboot the entire machine. Out of 1546 crashes, only 72 were caused by the OS (including bluescreen-generating crashes and Windows explorer crashes). The remaining 1474 crashes were due to applications. Of the 72 OS crashes, 55 were caused by Windows explorer, and the remaining 17 were due to blue screens generated by various drivers with kernel-level capabilities. We hope to collect more OS crashes using our crash collection mechanism described in Section 5.

### 4.2 Web Browsers Crash More Frequently Than Other Applications
Application crashes are more frequent than OS crashes but can usually be resolved by restarting the crashing application. Figure 1 shows the distribution of crashes by cause. Web browsers, including Internet Explorer, Netscape, Mozilla, and Firefox, cause the majority of crashes in our dataset. This may be due to plug-ins running inside browsers causing crashes, which are attributed to the browser rather than the plug-in. Other major crash-contributing categories include document preparation software (e.g., MS Word, PowerPoint, LaTeX) and email software (e.g., MS Outlook, Eudora).

While some applications caused a majority of crashes, it is unfair to judge their quality and reliability based solely on crash count. Some applications are used more frequently. For example, Windows Explorer is invoked more often than occasional multimedia applications. A fair evaluation requires usage statistics in addition to crash data. Usage statistics also help identify skews in data introduced by a restricted subset of users.

## 5. Open-Source Design for Collecting Failure Data
The long-term goal is to create an up-to-date repository of failure data from contemporary systems. We present an open-source design for collecting failure data and our progress in this effort. This design will enable a more comprehensive and accurate analysis of crash data, improving the overall reliability of computer systems.

## 6. Conclusion
Collecting and analyzing crash data is crucial for improving the reliability of modern operating systems. Our study of Windows XP crashes in the UC Berkeley EECS department provides valuable insights into the factors affecting PC reliability. By expanding our data collection to a larger and more diverse population, we aim to develop more robust and reliable systems. The benefits of such an endeavor include better system design, improved user experience, and a deeper understanding of the challenges in building resilient computing environments.

---

**Figure 1: Crash Cause by Application Category**
This table depicts the relative frequency of crashes caused by each category of applications and the relative time spent using each category of application (based on a user survey conducted in the EECS department at UC Berkeley).

| Application Category | # Crashes | Crash % | Usage % |
|----------------------|-----------|---------|---------|
| Web browsing         | 562       | 38%     | 22%     |
| Unknown              | 247       | 17%     | n/a     |
| Document preparation | 155       | 11%     | 24%     |
| Email                | 119       | 8%      | 7%      |
| Scientific computing | 91        | 6%      | 8%      |
| Document viewer      | 84        | 6%      | 6%      |
| Multimedia           | 53        | 4%      | n/a     |
| Document archiving   | 32        | 2%      | n/a     |
| Code development     | 31        | 2%      | 10%     |
| Remote connection    | 27        | 2%      | n/a     |
| Instant messaging    | 17        | 1%      | n/a     |
| I/O                  | 16        | 1%      | n/a     |
| Other                | 15        | 1%      | 1%      |
| Security             | 9         | 1%      | n/a     |
| System management    | 8         | 1%      | 4%      |
| Database             | 8         | 1%      | n/a     |

**Web Browsing Usage and Crashes**
- **Usage**: Lynx (2%), Mozilla (15%), Firefox (9%), Netscape (20%), Internet Explorer (54%)
- **Crashes**: Mozilla (2%, 14), Firefox (12%, 69), Netscape (27%, 148), Internet Explorer (59%, 319)

---