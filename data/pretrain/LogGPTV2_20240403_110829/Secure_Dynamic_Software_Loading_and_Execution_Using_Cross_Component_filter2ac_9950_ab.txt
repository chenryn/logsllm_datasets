(cid:3)(cid:4)(cid:3)
(cid:3)(cid:4)(cid:3)(cid:4)(cid:3)(cid:4)
(cid:3)(cid:4)(cid:3)(cid:4)(cid:3)(cid:4)(cid:2)
(cid:10)(cid:23)(cid:27)(cid:15)(cid:30)(cid:36)(cid:2)
Fig. 1: Code signature veriﬁcation process
(cid:12)(cid:15)(cid:31)(cid:22)(cid:1)(cid:34)(cid:15)(cid:25)(cid:33)(cid:19)(cid:1)(cid:17)(cid:15)(cid:25)(cid:17)(cid:33)(cid:25)(cid:15)(cid:32)(cid:19)(cid:18)(cid:2)
(cid:2)(cid:2)(cid:2)(cid:2)
(cid:5)(cid:6)(cid:7)(cid:8)(cid:2)(cid:2)(cid:2)(cid:2)
(cid:13)(cid:15)(cid:26)(cid:19)(cid:9)(cid:2)
(cid:10)(cid:23)(cid:27)(cid:15)(cid:30)(cid:36)(cid:1)(cid:23)(cid:31)(cid:1)
(cid:34)(cid:19)(cid:30)(cid:23)(cid:1)(cid:19)(cid:18)(cid:2)
(cid:10)(cid:23)(cid:27)(cid:15)(cid:30)(cid:36)(cid:1)(cid:23)(cid:31)(cid:1)
(cid:17)(cid:28)(cid:30)(cid:30)(cid:33)(cid:29)(cid:32)(cid:19)(cid:18)(cid:2)
Microsoft Windows (default conﬁguration) displays a warning
to the user.
The veriﬁcation procedure of a digital signature is as
follows (and is shown in Figure 1):
1) The original binary is passed through the hash function
to calculate a hash value.
2) The public key of the vendor is extracted from the pack-
age, and applied to the signature information. Through
this application, the hash value that was calculated when
the binary was signed is obtained.
3) The two hash values are compared with each other. If they
are equal, it is assured that the binary has not modiﬁed,
and the signature is considered valid.
4) The code signing certiﬁcate is checked to verify that it
was signed by a trusted CA.
5) The expiry date of the code signing certiﬁcate is con-
ﬁrmed.
6) The code signing certiﬁcate is checked against revocation
lists to re-assure that it is valid.
7) If the binary turns out
is allowed to
be loaded on the user system. Otherwise, the binary is
rejected or a warning message is displayed depending on
the level of system’s security conﬁguration.
to be valid,
it
D. Same-Origin Policy (SOP)
Our proposed mechanism is an extended form of code
signing, but it is also based on an important web application
security policy, called same-origin policy (SOP). Same-origin
policy permits script code running on web pages originating
from the same source in order to block web attacks from
malicious domains [28].
We use this concept of SOP to code signing mechanism
as a reinforcement, because many software vendors (from
Microsoft to security solution vendors such as Kaspersky and
Symantec) are signing their software components [29], which
can in turn be used for restricting allowed origin. At present
this capability of digital signature is not being used. Just like a
web application allows script code only from the same origin
to be executed, we can extend software to permit software
components (or other software) only from the same vendor to
be loaded or executed.
This application may seem trivial, but the difference be-
tween a web application and general-purpose software is worth
115115
noting. In general-purpose software industry, developers can
use other vendors’ components as well as open source libraries.
In the case of open source library, a vendor can sign it with
its own private key, still following the SOP concept. However,
if the vendor wants to use another vendor’s proprietary com-
ponent that is already signed with that vendor’s identity, SOP
cannot hold since the vendors (i.e. origins) are different. Adobe
resolves this issue in one of its products, Flash, by extending
SOP with trusted domains [30]. Flash developers can designate
a list of trusted domains, allowing code and resources from
these domains to be executed. As we will explain in Section III,
our mechanism takes advantage of this extended same-origin
policy.
III. THE PROPOSED MECHANISM
In this section, we introduce our cross veriﬁcation mech-
anism and discuss why such a mechanism is needed in the
software industry.
A. Problem Statement
As mentioned in Section I, there are three noticeable trends
in modern malware samples. Malware design has become
increasingly modular using multiple components in order to
avoid their access to victim systems being detected by security
solutions such as anti-virus. This approach also helps the
adversary to add new features to the malware or update
its existing components. Second, an increasing number of
malware instances are using legitimately signed binaries so
they can run even when the code signing mechanism is active.
The adversary usually steals code signing private keys from
small software vendors, or registers a paper company and has a
code signing private key issued from a CA [21]. Third, drive-by
download attack has become one of major distribution methods
for malware.
In addition to these malware trends, relatively large soft-
ware products are composed of multiple components, and these
are often abused by malware [9], [31]. On the other hand,
many software vendors such as Microsoft are signing their
binaries, and such code signing is mandated on a few platforms
like Apple iOS. The fact that code signing is widely adopted
in the software industry is a desirable trend from a security
perspective, but conventional code signing turns out to be not
sufﬁcient since a tremendous amount of malware instances also
have valid digital signatures [22].
(cid:14)(cid:23)(cid:32)(cid:32)(cid:27)(cid:36)(cid:1)(cid:24)(cid:31)(cid:33)(cid:23)(cid:36)(cid:42)
(cid:4)(cid:4)(cid:4)(cid:4)
(cid:8)(cid:14)(cid:13)(cid:16)(cid:10)(cid:20)(cid:21)(cid:18)(cid:12)(cid:2)
(cid:20)(cid:31)(cid:29)(cid:33)(cid:27)(cid:26)
(cid:30)(cid:23)(cid:37)(cid:30)(cid:1)(cid:40)(cid:23)(cid:32)(cid:39)(cid:27)
(cid:6)(cid:7)(cid:6)
(cid:6)(cid:7)(cid:6)(cid:7)(cid:6)(cid:7)
(cid:6)(cid:7)(cid:6)(cid:7)(cid:6)(cid:7)
(cid:13)(cid:31)(cid:33)(cid:23)(cid:36)(cid:42)
(cid:4)(cid:4)(cid:4)(cid:4)
(cid:9)(cid:12)(cid:16)(cid:11)(cid:17)(cid:18)(cid:4)(cid:1)
(cid:17)(cid:31)(cid:37)(cid:38)(cid:1)(cid:34)(cid:28)(cid:1)(cid:38)(cid:36)(cid:39)(cid:37)(cid:38)(cid:27)(cid:26)
(cid:40)(cid:27)(cid:33)(cid:26)(cid:34)(cid:36)(cid:37)
(cid:14)(cid:27)(cid:36)(cid:38)(cid:31)(cid:1)(cid:25)(cid:23)(cid:38)(cid:27)
(cid:14)(cid:23)(cid:32)(cid:32)(cid:27)(cid:27)(cid:1)(cid:24)(cid:31)(cid:33)(cid:23)(cid:36)(cid:42)
(cid:4)(cid:4)(cid:4)(cid:4)
(cid:8)(cid:14)(cid:13)(cid:16)(cid:10)(cid:20)(cid:21)(cid:18)(cid:12)(cid:2)
(cid:20)(cid:31)(cid:29)(cid:33)(cid:27)(cid:26)
(cid:30)(cid:23)(cid:37)(cid:30)(cid:1)(cid:40)(cid:23)(cid:32)(cid:39)(cid:27)
(cid:6)(cid:7)(cid:6)
(cid:6)(cid:7)(cid:6)(cid:7)(cid:6)(cid:7)
(cid:6)(cid:7)(cid:6)(cid:7)(cid:6)(cid:7)
(cid:13)(cid:31)(cid:33)(cid:23)(cid:36)(cid:42)
(cid:7)(cid:14)(cid:15)
(cid:17)(cid:31)(cid:37)(cid:38)(cid:1)(cid:34)(cid:28)(cid:1)(cid:38)(cid:36)(cid:39)(cid:37)(cid:38)(cid:27)(cid:26)
(cid:40)(cid:27)(cid:33)(cid:26)(cid:34)(cid:36)(cid:37)
(cid:14)(cid:27)(cid:36)(cid:38)(cid:31)(cid:1)(cid:25)(cid:23)(cid:38)(cid:27)
(cid:9)(cid:12)(cid:16)(cid:11)(cid:17)(cid:18)(cid:3)
(cid:20)(cid:31)(cid:29)(cid:33)(cid:27)(cid:36)(cid:1)(cid:2)(cid:22)(cid:12)(cid:16)(cid:11)(cid:17)(cid:18)(cid:3)(cid:3)
(cid:4)(cid:4)(cid:4)(cid:4)
(cid:9)(cid:12)(cid:16)(cid:11)(cid:17)(cid:18)(cid:4)(cid:1)
(cid:17)(cid:31)(cid:37)(cid:38)(cid:1)(cid:34)(cid:28)(cid:1)(cid:38)(cid:36)(cid:39)(cid:37)(cid:38)(cid:27)(cid:26)
(cid:40)(cid:27)(cid:33)(cid:26)(cid:34)(cid:36)(cid:37)(cid:1)(cid:2)(cid:6)(cid:14)(cid:19)(cid:20)(cid:3)(cid:3)
(cid:9)(cid:12)(cid:16)(cid:11)(cid:17)(cid:18)(cid:5)
(cid:20)(cid:31)(cid:29)(cid:33)(cid:27)(cid:36)(cid:1)(cid:2)(cid:22)(cid:12)(cid:16)(cid:11)(cid:17)(cid:18)(cid:5)(cid:3)
(cid:7)(cid:14)(cid:15)
(cid:17)(cid:31)(cid:37)(cid:38)(cid:1)(cid:34)(cid:28)(cid:1)(cid:38)(cid:36)(cid:39)(cid:37)(cid:38)(cid:27)(cid:26)
(cid:40)(cid:27)(cid:33)(cid:26)(cid:34)(cid:36)(cid:37)(cid:1)(cid:2)(cid:6)(cid:14)(cid:19)(cid:20)(cid:4)(cid:3)
(cid:22)(cid:27)(cid:33)(cid:26)(cid:34)(cid:36)(cid:7)
(cid:22)(cid:27)(cid:33)(cid:26)(cid:34)(cid:36)(cid:9)(cid:11)
(cid:10)
(cid:21)(cid:5)(cid:16)
(cid:12)(cid:18)(cid:15)
(cid:16)
(cid:23)
(cid:32)
(cid:37)
(cid:27)
(cid:13)(cid:31)(cid:33)(cid:23)(cid:36)(cid:42)(cid:1)
(cid:32)(cid:34)(cid:23)(cid:26)(cid:31)(cid:33)(cid:29)(cid:1)(cid:31)(cid:37)(cid:1)
(cid:23)(cid:32)(cid:32)(cid:34)(cid:41)(cid:27)(cid:26)
(cid:22)(cid:27)(cid:33)(cid:26)(cid:34)(cid:36)(cid:9)
(cid:1)
(cid:17)(cid:31)(cid:37)(cid:38)(cid:7)(cid:11)
(cid:1)
(cid:22)(cid:27)(cid:33)(cid:26)(cid:34)(cid:36)(cid:7)
(cid:1)
(cid:17)(cid:31)(cid:37)(cid:38)(cid:8)(cid:11)
(cid:1)
(cid:21)(cid:36)(cid:39)(cid:27)
(cid:21)(cid:5)(cid:16)
(cid:12)(cid:18)(cid:15)
(cid:16)
(cid:5)
(cid:21)
(cid:13)(cid:31)(cid:33)(cid:23)(cid:36)(cid:42)(cid:1)
(cid:32)(cid:34)(cid:23)(cid:26)(cid:31)(cid:33)(cid:29)(cid:1)(cid:31)(cid:37)(cid:1)
(cid:18)(cid:19)(cid:21)(cid:1)
(cid:23)(cid:32)(cid:32)(cid:34)(cid:41)(cid:27)(cid:26)
(cid:14)(cid:34)(cid:33)(cid:40)(cid:27)(cid:33)(cid:38)(cid:31)(cid:34)(cid:33)(cid:23)(cid:32)(cid:1)(cid:37)(cid:31)(cid:29)(cid:33)(cid:23)(cid:38)(cid:39)(cid:36)(cid:27)(cid:1)
(cid:40)(cid:27)(cid:36)(cid:31)(cid:1)(cid:25)(cid:23)(cid:38)(cid:31)(cid:34)(cid:33)(cid:1)(cid:35)(cid:36)(cid:34)(cid:25)(cid:27)(cid:37)(cid:37)
(cid:22)(cid:27)(cid:36)(cid:31)(cid:1)(cid:27)(cid:26)(cid:11)
Fig. 2: Overview of the proposed cross veriﬁcation mechanism
The limitation of current digital signature veriﬁcation lies
in the way it is performed. A digital signature is veriﬁed by
the operating system when an executable binary such as EXE
and DLL ﬁle is loaded, and only its validity is checked. As
long as the digital signature is valid, the binary is accepted
on the operating system, thus being allowed to be executed or
loaded. Our mechanism incorporates same-origin policy into
the current code signing mechanism so that only components
from trusted vendors (i.e. signers) can be executed or loaded
on the system.
B. Assumptions
We make the following assumptions in the design of our
proposed cross veriﬁcation mechanism:
1) All the software components existing on a user system
are digitally signed by its vendor. This is already true
in many cases. For instance, many Microsoft Windows
system libraries are signed by Microsoft, both proprietary
and open source libraries are often signed by its vendors
such as Adobe and Symantec.
2) Leakage of code signing private keys of major software
vendors such as Microsoft and Adobe is less likely to
happen compared to that of small software companies.
This is what has been observed in practice since (1) all
the malware with legitimate signature used private keys
stolen from small vendors [8], [9], [11], [21], and (2)
there is no known case that the code signing private keys
of major vendors have been disclosed (as of now)1.
3) Malware that tries to compromise systems protected by
our cross-veriﬁcation mechanism has its components le-
1There was a case that a code signing certiﬁcate of Adobe was used to sign
malware, but it was not related to signing key leakage, but compromise of an
application build server that can request code signing [32].
gitimately signed. That is, traditional code signing cannot
prevent those components from being executed or loaded.
4) Infecting every component of reasonably large applica-
tions is impractical for a single malware instance. For
instance, Microsoft Ofﬁce 2013 is composed of more
than 130 DLLs, and Firefox loads more than 25 libraries
when it launches. Even though technically possible, it
is unlikely that malware will be able to infect all these
components as this would require a large amount of
computing and networking resources being used by the
malware which will make the malware to be detected.
Throughout the rest of this paper, the above are assumed
to be true in general.
C. The Proposed Cross Veriﬁcation
In order to improve the current code signing mechanism,
we have extended it by considering the trust relationship be-
tween software components. In particular, the trust relationship
between caller and callee is evaluated. When an application
loads a software component, or executes an external applica-
tion, signer information of each binary is compared to each
other, in other words, cross-veriﬁed. This cross veriﬁcation
for trust evaluation enables our mechanism to prevent var-
ious attacks listed in Section III-D. In contrast, the current
digital signature veriﬁcation is not directional as described in
Section II. It is also not a one-way mechanism, because the
relationship between the caller and the callee is not considered
during the veriﬁcation; what is checked during the current
veriﬁcation is just the validity of the binary.
The procedure of our cross veriﬁcation when a component
(C1, caller) tries to load another one (C2, callee) is given in
Algorithm 1, and summarised in Figure 2. Each component
(e.g. a DLL or EXE ﬁle) has a list of vendors it trusts. This
list is packaged in the signed binary, and included in hash value
116116
Algorithm 1: Cross digital signature veriﬁcation
input : Caller binary C1, callee binary C2
output: TRUE or FALSE
1 SignerC1 ← GetSigner(C1); // Signer of C1 and
2 SignerC2 ← GetSigner(C2); // C2
3 TVListC1 ← GetTVList(C1); // Trusted vendor list of
4 TVListC2 ← GetTVList(C2); // C1 and C2
5 if RegSigVeri(C2) (cid:3)= 1 then
// C2 does not pass regular digital signature veriﬁcation
return FALSE;