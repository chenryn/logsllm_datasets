# 分析TetCTF 2020中Crypto方向题目
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在TetCTF 2020中有5道Crypto方向的题目，题目难度适中，在这里对题目进行一下分析。
## 2019rearrange
题目描述如下：
Rearrange your 2019, keep your joy, throw all your sorrow away!
Files:[2019rearrange.zip](https://github.com/ichunqiu-resources/anquanke/blob/master/008/2019rearrange.zip)
分析一下源码，发现我们的任务是已知`n, e1, noise1, c1, e2, noise2, c2`参数的值，求m的值。其中：
    c1 ≡ (m+noise1)^e1 (mod n)
    c2 ≡ (m+noise2)^e2 (mod n)
我们考虑采用多项式的思想来解题，将上述两个方程看成多项式的形式，有：
    f1(x) = (x+noise1)^e1 - c1
    f2(x) = (x+noise2)^e2 - c2
显然，当`x=m`时，有：
    f1(x) = f2(x) = 0
即`x = m`是多项式f1和f2的一个公共解，也即`f3 =
gcd(f1,f2)`的一个公共解，因此我们只需要计算`gcd(f1,f2)`，即可得到关于m在模n意义下的多项式方程，从而求出m。
将上述推导写成SageMath代码形式如下：
    from binascii import *
    n = 99432613480939068351562426450736079548256649399824074125897023718511347184177748762719404609118999419018534660223144728190056735099787907299980625300234355248546050583144387977927309463501291854876892509630938617460690481497010165530214494306444999151252999850250583288798888278770654238342967653191171473013
    e1, noise1, c1 = (9102, 42926763857648808452080305910241720054908809667539630194138718908195450776152522239791644645043372458139920503040529361726409749150633609223017012694569617522037971161448894459262110250322393703607247036022683527543284339763718964451482238661494995313111724858075982045508601405376724544741352142401794693054, 48276023282567629527195243870327301962656940680898728928903255577939008086657887592958073923577657060463242759606506812938152312008130198252498457257386413883443843887507528097024367788094619479032221547513746486475136282357337951126122694205225292004957793882304453164618423156810792171305978347365910972343)
    e2, noise2, c2 = (2109, 51208643076502294588477225830948052764402322839126847164816681682357946991156728371602766970288519802146987999203830056494899211501025949997165558057140744445002699137286162872658309250096136525032077525028373299701055357023079519776378532002052890676446838318133048612893135724217301724754396467377231356425, 30644829500627448217295366947497931474953886995151259599263428251525601964766004111974074015504963773615137800165460045351514062357500899618814273135292073698096477339942069685331462828432407501524816375109607227118357281435280158409804228556720158131377342049528810546024786899763038442784789928604641662412)
    def Pgcd(a, b):
        while b != 0:
            a, b = b, a%b
        return a
    P. = PolynomialRing(Zmod(n))
    f1 = (x+noise1)^e1 - c1
    f2 = (x+noise2)^e2 - c2
    f3 = Pgcd(f1,f2)
    a, b = f3.coefficients()[::-1]
    x = inverse_mod(ZZ(a),n)*(-b)
    print unhexlify(hex(int(x))[2:-1])
执行脚本即可得到flag：
    TetCTF{1t_1s_4ll_4b0ut_GCD_0v3r_p0lyn0m14ls}
## 2020th
题目描述如下：
Now, I bet you wish you were a prophet. Happy new year 2020th!  
nc 207.148.119.58 6666
Files:[2020th.zip](https://github.com/ichunqiu-resources/anquanke/blob/master/008/2020th.zip)
分析一下源码，可知程序使用python的random模块连续生成了2019个随机数，我们可以选择查看这2019个随机数中任意2个随机数的值，我们的任务是预测出接下来要产生的第2020个随机数的值，如果预测成功即可获得flag。
通过查阅python的random模块，可以得知其在生成随机数时使用了[梅森旋转算法](https://en.wikipedia.org/wiki/Mersenne_Twister)，且其版本为MT19937，即该PRNG采用32位的state和32位的输出，我们可以找一版python的MT19937
Mersenne Twister PRNG来看一下（p.s.
维基百科上提供了梅森旋转算法的伪代码，有兴趣的读者可以自己实现一版，这同样也是[cryptopals](https://cryptopals.com/sets/3/challenges/21)当中的一个任务）：
    class MT19937RNG:
        def __init__(self, seed):
            self.MT = [0] * 624
            self.index = 0
            self.MT[0] = seed & 0xffffffff
            for i in range(1, 623+1):
                self.MT[i] = ((0x6c078965 * (self.MT[i-1] ^ (self.MT[i-1] >> 30))) + i) & 0xffffffff
        def generate_numbers(self):
            for i in range(0, 623+1):
                y = (self.MT[i] & 0x80000000) + (self.MT[(i+1) % 624] & 0x7fffffff)  
                self.MT[i] = self.MT[(i + 397) % 624] ^ (y >> 1)
                if (y % 2) != 0:
                    self.MT[i] = self.MT[i] ^ (2567483615)
        def extract_number(self):
                if self.index == 0:
                    self.generate_numbers()
                y = self.MT[self.index]
                y = y ^ (y >> 11)
                y = y ^ ((y > 18)
                self.index = (self.index + 1) % 624
                return y
审计代码可知，该PRNG在初始化时会建立一个长度为624的数组MT，使用extract_number函数来生成随机数，第一次生成随机数时会调用generate_numbers函数来更新MT数组的值，之后每连续生成624个随机数，都会使用generate_numbers函数来更新MT数组的值。而extract_number函数的过程是可逆的，这意味着如果我们知道一个`randomnum[i]`，我们是可以求出其对应的`MT[i]`的。另外，如果我们知道了MT[2019]，可以很容易的根据extract_number计算出`randomnum[2019]`（即第2020个随机数），因此我们的重点只需放在generate_numbers函数，来想办法计算出`MT[2019]`即可。
观察generate_numbers函数可以发现，由于generate_numbers函数是每生成624个随机数调用一次，即`MT[i+624]`的值是由`MT[i],MT[i+1]和MT[i+397]`生成的，我们令`i=1395`，此时即`MT[2019]`可以由`MT[1395],MT[1396],MT[1792]`这3个数计算而来，但是我们只能获取最多2个数的值，还缺少一个数的值无法获取。
继续观察generate_numbers函数的运算流程，发现在关于`MT[i]`参数的运算为`(self.MT[i] &
0x80000000)`，其运算结果不是0（当0> shift
        return res
    def USL(x, shift, mask):
        res = x
        for i in range(32):
            res = x ^ (res > 11)
        y = y ^ ((y > 18)
        return y
    def solve(a, b):
        res = []
        MT_iadd1, MT_iadd397 = randomnum_to_MT(a), randomnum_to_MT(b)
        for msb in range(2):
            y = (msb * 0x80000000) + (MT_iadd1 & 0x7fffffff)
            MT_i = MT_iadd397 ^ (y >> 1)
            if (y % 2) != 0:
                MT_i = MT_i ^ 0x9908b0df
            res.append(MT_to_randomnum(MT_i))
        return res
    while True:
        s = remote("207.148.119.58", 6666)
        s.sendline("1396")
        s.sendline("1792")
        guess = []
        for _ in range(2019):
            a = s.recvline().strip()
            if "Nope" not in a:
                guess.append(int(a))
        res = solve(*guess)
        s.sendline(str(res[0]))
        resp = s.recvline().strip()
        if "TetCTF" in resp:
            print resp
            exit(0)
执行脚本即可得到flag：
    TetCTF{y0u_4r3_1nd33d_4_pr0ph3t}
## commonfactor
题目描述如下：
What if each modulus has a prime factor that close to each other?
Files:[commonfactor.zip](https://github.com/ichunqiu-resources/anquanke/blob/master/008/commonfactor.zip)
分析一下源码，发现我们的任务是已知`e, n1, n2, n3, n4, c1, c2, c3, c4`的值，满足：
    c1 ≡ flag^e (mod n1)