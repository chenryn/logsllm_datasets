message (cs-frame) from another node indicating the be-
ginning of the cold-start sequence; cs-frames are similar to
i-frames but carry a protocol state suggested by the sending
node. When a node completes reception of a cs-frame, it en-
ters the second phase COLDSTART (2.1) and resets its lo-
cal clock to δcs (that is the transmission duration of the cs-
frame). Thus, all nodes that received the cs-frame have syn-
chronized local clocks (within system tolerances, including
propagation delay). Each node that receives neither an i-
frame nor a cs-frame during the LISTEN phase will enter
COLDSTART (2.1), resets its local clock to 0 and sends
out a cs-frame by itself. Thus, after the transmission of the
cs-frame (δcs later), the local clock of the sending node will
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:32 UTC from IEEE Xplore.  Restrictions apply. 
3.1
COLD
START
(3)
3.2
1.1
INIT
(1)
2.1
LISTEN
(2)
2.2
ACTIVE
(4)
(a) Node Startup
INIT
(1)
1.1
3.2
SILENCE
(4)
4.1
LISTEN
(2)
2.1
STARTUP
6.3
(3)
6.2
6.1
Protected
STARTUP
(6)
2.2
3.1
2.3
Tentative
ROUND
(5)
5.1
5.2
ACTIVE
(7)
(b) Guardian Startup
Figure 2. State-machine of the TTA startup al-
gorithm
also be synchronized to the local clocks of the set of receiv-
ing nodes. This algorithmic choice, not to directly synchro-
nize the receiving nodes on the contents of the ﬁrst cs-frame
while in the LISTEN state, is called the big-bang mecha-
nism. There is, of course, the possibility that two nodes p
and q send out simultaneous or overlapping cs-frames. The
receiving nodes will see this as a logical collision but take
the same actions as if a single cs-frame was received. Each
node p in COLDSTART state waits for reception of an-
other cs-frame or i-frame until its local clock reaches the
value of its individual cold-start timeout τ coldstart
. If it re-
ceives such a frame it synchronizes on its contents and en-
ters the ACTIVE state (3.2); if not, it resets its local clock
and again broadcasts a cs-frame (3.1). No further collision
can occur at this point, for the following reasons.
p
1. Based on the strict order of the unique cold-start time-
no two nodes that caused a collision can
i
outs τ coldstart
collide again.
2. Since τ listen
i
> τ coldstart
j
, for every two nodes i, j, no
newly awoken node i may cause a collision.
The big-bang mechanism ensures better precision, since
the synchronization quality in the second phase is inde-
pendent of the propagation delay: a receiving node knows
the identity of the unique sender of the cs-frame and can
compensate for its known propagation delay. More impor-
tantly, the big-bang mechanism is necessary to mask certain
faults—see Section 5.2.
2.3.2. Guardian Startup A faulty node could masquer-
ade as another during startup, send cs-frames at inappropri-
ate times (or continuously), and generally fail to follow the
algorithm. A central guardian can mask these faults, but to
do so (and to perform its prime function of enforcing the
TDMA schedule during steady-state operation), it must it-
self synchronize with its nodes. The startup algorithm of the
guardians is depicted in the state-machine in Figure 2(b).
A central guardian starts in INIT state where all com-
munication on its channel is blocked. When its initializa-
tion is ﬁnished it transits to LISTEN state (1.1) and listens
to the interlink for 2∗τ round, that is, it tries to integrate to an
already running system. If an i-frame is received, the cen-
tral guardian transits to ACTIVE state (2.3); if a cs-frame
is received, it transits to Tentative ROUND state (2.2). If
an integration was not possible during LISTEN, the cen-
tral guardian transits to STARTUP state (2.1). All ports are
now opened and the central guardian waits until it receives
a valid frame either on one of its ports or on the interlink.
If more than one port become active at the same time, the
central guardian selects one port non-deterministically. If a
cs-frame is received and no logical collision occurred (that
is the guardian received either two identical cs-frames—
one on one of its stubs and the second on the interlink—
or only one frame), the central guardian transits to Tenta-
tive ROUND state (3.1). If a collision occurred the cen-
tral guardian transits to SILENCE state (3.2). In Tentative
ROUND state the central guardian operates the remaining
TDMA round (the received frame during STARTUP state is
considered the ﬁrst frame of a TDMA round); if during this
round a valid i-frame is received, the startup initiated by the
cs-frame sender is conﬁrmed and the central guardian pro-
ceeds to ACTIVE state (5.2). If during this TDMA round
no valid i-frame was received the central guardian transits
to Protected STARTUP (5.1). If a central guardian tran-
sits to SILENCE state (because a collision was received)
it blocks all communication for the remaining round and
transits to Protected STARTUP as well (4.1). Protected
STARTUP state differs from STARTUP state in that here
the ports are enabled for one TDMA round according to
the cold-start timeouts of the nodes. Thus, in contrast to
STARTUP state every node is forced to stay to its timeout
pattern. The transitions from Protected STARTUP state to
Tentative ROUND state (6.1) and SILENCE state (6.2)
underly the same rules as in STARTUP state. If no tran-
sition is done for a period of one TDMA round the cen-
tral guardian transits back to STARTUP state (6.3) and the
startup sequence is repeated. Since the central guardian has
full knowledge of the attached nodes’ parameters (which are
speciﬁed off-line), it can detect faulty transmissions with re-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:32 UTC from IEEE Xplore.  Restrictions apply. 
spect to protocol operation. If a central guardian detects a
faulty node it will block all further attempts of this node
to access the communication channel during the startup se-
quence. Thus, a faulty node cannot inﬂuence the startup se-
quence forever.
3. Veriﬁcation Model
The startup algorithm described in the previous section
is fairly subtle and must cope with many kinds of fault and
timing behaviors. Model checking provides a way to ex-
plore these behaviors in an automatic way, but faces cer-
tain difﬁculties. First, the algorithm involves time in an es-
sential way and the most realistic formal model for the al-
gorithm will be one in which time is treated as a continu-
ous variable. Timed automata provide a suitable formalism
of this kind, and are mechanized in model checkers such
as Kronos and UPPAAL. L¨onn [9] considers startup algo-
rithms for TDMA systems similar to TTA and veriﬁes one
of them using UPPAAL. However, model checking for timed
automata is computationally complex, so that when we add
the case/state explosion caused by considering a large num-
ber of fault scenarios, the model rapidly becomes compu-
tationally infeasible. Our initial experiments did use timed
automata and we were unable to consider more than a very
few simple kinds of faults.
It is essential to the utility of model checking for explo-
ration and veriﬁcation of fault-tolerant algorithms that we
are able to consider a large number of different kinds of
faults—ideally, we would like the fault model to be exhaus-
tive, meaning that we describe every kind of fault we can
think of, and let the model checker inject these in all pos-
sible ways. Since this is impracticable in a model that uses
continuous time, we looked for an abstraction employing
discrete time.
Nodes executing the startup algorithm measure time by
counting off slots in the TDMA schedule. Although slots
have duration and may be offset at different nodes, we can
think of them as indivisible units: we do not care by how
much the slots at different nodes are offset, just whether
they overlap at all (so that a collision can occur). Thus, we
can use a discrete notion of time and can model the col-
lective behavior of a cluster of nodes as the synchronous
composition of discrete systems. Another way to justify this
modeling approach is to think of it as describing the sys-
tem from the point of view of a central guardian: each dis-
crete instant corresponds to some real time interval at the
guardian and all messages that (start to) arrive in that inter-
val are regarded as simultaneous; the behavior of the nodes
is driven off (i.e., synchronously composed with) the dis-
cretization provided by the central guardian.
Fully exhaustive fault models pose a challenging
prospect, so we developed a modeling “dial” that could in-
ject varying degrees of faults: our idea was to use as high
a degree (i.e., as many kinds) of faults as proved feasible
in practice. In the remainder of this section we ﬁrst present
our basic model of the startup algorithm and then describe
the modeling concepts for faulty components of varying de-
grees. Due to space limitations we only give representative
parts of the node’s model and refer the interested reader to
[13] where the complete source code of the SAL model and
an extended version of this paper can be found, together
with instructions that will help to recreate the experiments.
3.1. Basic Model
The system model comprises n nodes, each syn-
chronously composed with two central hubs that each con-
tain a central guardian that blocks certain faulty messages.
At each time step, each node examines the input messages
received from the hubs, consults its private state variables,
and possibly generates an output message that it sends to
the hubs. Each hub examines the messages received from
the nodes and the other hub and constructs the single mes-
sage that will comprise the consistent input presented to the
nodes at the next time step.
We specify this discrete, synchronous model in the lan-
guage of SAL as follows. We begin by deﬁning the types
over which the state variables will range.
startup: CONTEXT =
BEGIN
n: NATURAL = 4;
index: TYPE = [0..n-1];
maxchannels: NATURAL = 2;
channels: TYPE = [0..maxchannels-1];
maxcount: NATURAL = 20*n;
counts: TYPE = [0..maxcount];
Here, n is the number of nodes (here assigned the value
4, but we also examine models with 3, 5, and 6 nodes),
which are identiﬁed by elements of the type index. Anal-
ogously, maxchannels is the number of channels, which
are identiﬁed by elements of the type channels. The
largest timeout considered is maxcount and the values of
a timeout counter are given by the type counts.
states: TYPE = {init, listen, start, active, faulty,
hub_states: TYPE = {hub_init, hub_listen, hub_startup,
faulty_lock0, faulty_lock1, faulty_lock01};
hub_tentative, hub_silence, hub_protected,
hub_active, hub_faulty};
msgs: TYPE = {quiet,noise,cs_frame,i_frame};
The enumerated types states, hub states, and
msgs specify, respectively, the states of the algorithm at
a node, the states of the algorithm at a hub, and the kind of
messages that can be exchanged with a hub. The states cor-
respond to those in the state-machines of Section 2, plus
additional faulty states that are used in the simulation of
faulty components. Each node may output messages with
values quiet (meaning no message), noise (meaning
a syntactically invalid signal), cs frame (a cs-frame), or
i frame (an i-frame); the hub will return a message type
based on the inputs of the attached nodes.
LT_TO:ARRAY index OF NATURAL = [[j:index] 2*n+j];
CS_TO:ARRAY index OF NATURAL = [[j:index] n+j];
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:32 UTC from IEEE Xplore.  Restrictions apply. 
The unique timeouts for each node are speciﬁed as LT TO
(listen timeout) and CS TO (cold-start timeout), as deﬁned
in Section 2.
We specify the input and output variables of an individ-
ual node as follows.
node[id:index]: MODULE = BEGIN INPUT
msg_in: ARRAY channels OF msgs,
time_in: ARRAY channels OF index,
lock_in: ARRAY channels OF BOOLEAN
OUTPUT
msg_out: ARRAY channels OF msgs,
time_out: ARRAY channels OF index,
state: states,
counter: counts,
errorflag: BOOLEAN
The msg in represents the kind of message that the
node receives from the hubs; if it is a normal message,
then time in indicates the slot position transmitted in the
sender’s frame, which equals the current time measured rel-
ative to the start of the TDMA round if the sender sends a
correct value. We can think of this information as being in-
cluded in the message, but it is easier to model it as a sepa-
rate variable. The input variable lock in is used to make
the model more compact and is discussed in Section 3.2.
The output variables msg out, time out, state,
and counter represent, respectively, the message that this
node will output to the hub, its estimate of the identity of
the node associated with the current slot (i.e., its estimate
of time relative to the start of the TDMA round), its state
within the algorithm, and the value of its timeout counter.
The output variable errorflag is used for diagnosis of
the model and has no inﬂuence on the protocol execution.
LOCAL
startupdelay: counts,
big_bang: BOOLEAN
Each node has a local variable startupdelay that in-
dicates the maximum duration a node is allowed to stay
in init state (simulating the different power-on times of
the different nodes). Initially set to TRUE, the local variable
big bang is set FALSE if a big bang has been received.
The algorithm is speciﬁed by a series of guarded com-
mands. We describe in detail those that apply to a node in
the init state, and one transition of a node in listen
state, as representative illustrations.
[ % Transition: 1.1
state = init
--> state’ = IF NOT faulty_node[id] THEN listen
ELSE faulty ENDIF;
counter’ = 1;
msg_out’ = msg_out;
time_out’ = time_out;
[] % Let time advance
state = init AND counter  state’ = state;
counter’ = counter+1;
msg_out’ = msg_out;
time_out’ = time_out;
Here, the [ character introduces a set of guarded com-
mands, which are separated by the [] symbol; the % charac-
ter introduces a comment. A SAL guarded command is el-
igible for execution in the current state if its guard (i.e., the
part before the --> arrow) is true. The SAL model checker
nondeterministically selects one of the enabled commands
for execution at each step; if no commands are eligible, the
system is deadlocked. State variables are unprimed before
execution of a command and primed in the new state, that
is, after the execution of a command.
Provide the counter is less than startupdelay, both
the above commands are eligible for execution; thus, the
node can nondeterministically choose to stay in the init
state (incrementing its counter by 1) or to transit to the
listen state. If the counter reaches startupdelay, the
node must transit either to listen or faulty state, de-
pending whether the node simulates a correct node or a
faulty one. Hence, the two guarded commands above allow
the node to “wake up” and transit to the listen state at
any point during the speciﬁed period of startupdelay;