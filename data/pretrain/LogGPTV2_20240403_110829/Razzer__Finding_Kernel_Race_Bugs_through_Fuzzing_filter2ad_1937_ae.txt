sound/core/seq/
KASAN: null-ptr-deref in inode_permission
Null ptr def
v4.18-rc3
fs/
Fixed
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)(assisted Syzkaller) (cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)(assisted Syzkaller)
(cid:2)
(cid:2)
Fig. 6: List of harmful race bugs newly discovered by RAZZER



















	
	







Fig. 7: Number of unique crashes over time (v4.17-rc1).
Time
Flow
T0
T1
T2
# po->has_vnet_hdr = !!val; 
movzbl 0x6e0(%r15),%eax
shl $0x3,%r12d 
and $0xfffffff7,%eax 
or %r12d,%eax
mov %al,0x6e0(%r15)
# po->running = 0; 
andb $0xfe,0x6e0(%r13) 
vCPU0
8: A thread
Fig.
interleaving
WARNING in refcount_dec (v4.16-rc3)
vCPU1
causing
the
race
of
two classes of bugs: (i) non-race bugs, which are discovered by
single-thread fuzzing; and (ii) race bugs, which are discovered
by multi-thread fuzzing. While RAZZER‚Äôs general goal is to
Ô¨Ånd race bugs, its single-thread fuzzer also Ô¨Ånds non-race bugs
as well (as it is randomly fuzzing the kernel), and all the
crashes found by the single-thread fuzzer are highly likely to
be non-race bugs 2. In general, both race bugs and non-race
bugs show the similar patterns‚Äîmost bugs are found in the
early stage of fuzzing. Particularly focusing on race bugs, 70%
2It is still possible to observe race bugs from the single-thread user program
(i.e., races during interrupt handling in the kernel), but we do not consider
these cases in this paper and leave it as future work.
were found within the Ô¨Årst 100 hours, whereas the following
400 hours only 30% were found.
Reliability and Security Impacts. All of these harmful races
found by RAZZER have severe reliability and security impacts.
From the reliability perspective, races are detrimental. They
cause unpredictable, non-deterministic crashes of the kernel,
which are still challenging to reproduce due to the nature of
races, critically damaging the reliability of the entire system.
From the security perspective, some of these races can be
abused by an attacker who launches a privilege escalation
attack (i.e., acquiring root privileges from a non-root execution)
as opposed to a denial-of-service attack. In particular, if
(cid:24)(cid:23)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:09 UTC from IEEE Xplore.  Restrictions apply. 
buffer overÔ¨Çows or use-after-free allow a write operation (i.e.,
KASAN: slab-out-of-bounds write in tty_insert_Ô¨Çip_string_Ô¨Çag,
KASAN: slab-out-of-bounds Write in __register_sysctl_table,
and KASAN: use-after-free Write in skb_release_data), a user
program may overwrite a credential structure in the kernel to
escalate its privilege.
Very Old Races in the Kernel. Surprisingly, we noted several
harmful races found by RAZZER had existed in the kernel for a
very long time, implying that RAZZER is capable of uncovering
harmful races that
tools such as the kernel fuzzers like
Syzkaller, the random thread interleaving tool SKI, and many
other dynamic race detectors cannot Ô¨Ånd. More speciÔ¨Åcally,
based on our bug report, the kernel developer found that the
WARNING in refcount_dec issue was present in the kernel since
2007 (Linux v2.6.20), and KASAN: slab-out-of-bounds write
in tty_insert_flip_string_fixed_flag was present since
2011 (Linux v2.6.38).
To consider about why some race bugs have long re-
mained undetected, we conducted an in-depth study of
WARNING in refcount_dec. Based on our analysis, we be-
lieve it is related to the fact that the chance to observe
this race is extremely low in practice. As shown in Fig-
ure 8, RacePairtrue is in this case mov %al,0x6e0(%r15) and
andb $0xfe,0x6e0(%r13). In order to manifest
this race,
vCPU1 should execute andb $0xfe,0x6e0(%r13) while vCPU0
is executing only three non-memory access instructions in
T1, showing a very small time window to trigger the race.
Considering the numerous of instructions that each syscall
will be executing, this is an extremely rare case, signifying
the effectiveness of RAZZER in enforcing deterministic thread
interleaving towards potential race spots.
Root Cause Information. One notable feature of RAZZER
is that it produces a detailed report on an identiÔ¨Åed harmful
race, which signiÔ¨Åcantly helps to discern its root cause
(see Figure 16 and Figure 17 in the appendix). Based on
this root cause information, particularly with regard to the
two racy syscalls and conÔ¨Årmed RacePairharm locations,
developers were able to Ô¨Åx races promptly once we reported
these cases. For example, it only took 20 minutes and 2
hours, respectively, for developers to propose the patches
for
loopback_active_get
and
in
snd_seq_oss_readq_puts3.
interesting
is
KASAN:
null-ptr-deref Read in rds_ib_get_mr. This
race was
in fact reported by Syzkaller 9 days earlier than it was by
RAZZER, but the kernel developers did not take any action.
We assume that this is due to the difÔ¨Åculty of determining
the root cause of this race based on a Syzkaller‚Äôs report,
as it is more suitable for understanding memory corruption
issues along with KASAN‚Äôs report. However, once we sent
RAZZER‚Äôs detailed report, this race was conÔ¨Årmed in one day
handle kernel paging request
example
KASAN:
use-after-free in
Unable to
Another
3As this taken time simply measures each developer‚Äôs response time to our
report, we assume that the actual time required to develop a patch should be
much shorter than this.
Kernel module
Size (LLVM Bitcode)
Analysis Time
cert
init
security
lib
crypto
arch
block
ipc
mm
fs
sound
kernel
net
drivers
148 KB
728 KB
1.7 MB
3.5 MB
3.3 MB
11 MB
6 MB
5 MB
15 MB
17 MB
20 MB
29 MB
47 MB
68 MB
0.2 sec
1 sec
3 sec
36 sec
42 sec
2 min
3 min
3 min
5 min
8 min
22 min
24 min
72 min
134 min
Fig. 9: Performance of RAZZER‚Äôs static analysis (v4.17-rc1)
CVE ID
First Instruction
Second Instruction
CVE-2017-2636
drivers/tty/n_hdlc.c:216
drivers/tty/n_hdlc.c:440
CVE-2016-8655
net/packet/af_packet.c:3660
net/packet/af_packet.c:4229
CVE-2017-17712
net/ipv4/raw.c:640
net/ipv4/ip_sockglue.c:748
Fig. 10: RacePairtrue required to Ô¨Ånd known race bugs (Linux v4.8).
RAZZER‚Äôs static analysis results, RacePairscand, included all of these
pairs.
by the respective kernel developer, implying that our report
helped the developer to understand the race.
We note that race bugs are generally known to be difÔ¨Åcult
bugs with regard to understanding their root causes; hence,
even when they are easily reproducible, it is still not trivial for
developers to understand a race and generate a patch. However,
as suggested by our experiences with kernel developers,
RAZZER not only Ô¨Ånds harmful races but also assists with
easy, low-cost patching processes.
B. Effectiveness of Static Analysis
Performance Overhead of Partitioned Analysis. To demon-
strate the effectiveness of RAZZER‚Äôs partitioned analysis, we
measured the time taken to obtain all RacePairscand from the
entire kernel. As shown in Figure 9, RAZZER showed moderate
performance overhead per module‚Äîranging from 2 minutes to
134 minutes, depending on the size of the target LLVM bitcode.
We believe this is fast enough to ensure a proper analysis of
the kernel as the kernel is updated. It is worth noting that,
the consolidated entire kernel binary (i.e., vmlinux.bc) is a
756 MB LLVM Bitcode Ô¨Åle and our analysis of this binary
did not terminate when we ran it for 7 days.
Correctness of RacePairscand. Because our static analysis
prunes out a numerous number of non-racy memory pairs,
it may show false negatives (i.e., some RacePairtrue is not
included in the obtained RacePairscand). As such, to demon-
strate the correctness of RacePairscand results, we checked
if the obtained RacePairscand include RacePairtrue for the
three previously known harmful races in Linux v4.8 shown
in Figure 10. After checking this, we conÔ¨Årmed that the
RacePairscand from our static analysis indeed includes all
(cid:24)(cid:23)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:09 UTC from IEEE Xplore.  Restrictions apply. 
Kernel version
# of Paired Memory Access Instr.
v4.8
v4.16-rc3
v4.17-rc1
578 M
8,509 M
4,025 M
# of RacePairscand
0.3 M (0.05%)
3.4 M (0.04%)
1.5 M (0.05%)
hcall_nop()
hcall_set_bp()
hcall_check_race()
hcall_set_order()
4.34Œºs
5.46Œºs
4.77Œºs
4.69Œºs
Fig. 12: Performance overhead when performing RAZZER‚Äôs hypercalls
Fig. 11: The total number of race candidate pairs generated by
RAZZER‚Äôs static analysis. We also present the number of paired
memory access instructions to be referred as the upper-bound number
of the analysis.
three RacePairtrue cases. Although this represents a limited
study to show the correctness of RAZZER‚Äôs static analysis,
we emphasize here that RAZZER‚Äôs static analysis mechanism
would be effective enough to discover races similar to those
three CVE races. Moreover, we believe that the 30 harmful
races newly found by RAZZER also support the correctness of
the RacePairscand results, especially from practical aspects.
Effectiveness of RacePaircand. Figure 11 shows the total