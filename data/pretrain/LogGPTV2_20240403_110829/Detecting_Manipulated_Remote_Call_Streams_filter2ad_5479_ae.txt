Entry
socket
Exit
Figure 17: The socket model in Linux glibc.
to be caused by the differences in library code between
our respective test platforms. Wagner and Dean ana-
lyzed programs compiled on Red Hat Linux, but we use
Solaris 8. Solaris is an older operating system and
includes more extensive library code in its standard
libraries. Solaris libc, for example, is structured differ-
ently than glibc on Linux and includes functionality not
found in glibc. To see the differences, compare
Figure 17, the automaton for the socket system call in
glibc, with Figure 16, the automaton for the same func-
tion in Solaris libc. In this case, the Solaris socket func-
tion includes code maintaining backwards compatibility
with an earlier method of resolving the device path for a
networking protocol. While socket has the greatest dif-
ference of the functions we have inspected, we have
found numerous other library functions with a similar
characteristic. Simply, Linux and Solaris have different
library code and we have found the Solaris code to be
the more complex.
To better understand the inﬂuence of this different
library code base, we identiﬁed several functions in
Solaris libc that differed signiﬁcantly from the equiva-
i
r
o
t
c
a
F
g
n
h
c
n
a
r
B
e
g
a
r
e
v
A
Precision
Efficiency
12
10
8
6
4
2
0
* *
)
s
d
n
o
c
e
s
(
d
a
e
h
r
e
v
O
12
10
8
6
4
2
0
*
Finger Procmail
Finger Procmail
Full Solaris libc
glibc Emulation
Wagner and Dean
*  Value <= 0.01
Our NFA Model
Wagner and Dean
*  Value <= 0.01
Figure 18: Comparison of our baseline NFA models with
the prior results of Wagner and Dean.
lent function in glibc. We instrumented the code of the
identiﬁed functions so that each generates a remote sys-
tem call event in a manner similar to glibc. As we
expected, the average branching factor of each model
dropped signiﬁcantly (Figure 18). Because we inten-
tionally instrument the library functions incorrectly, the
model generated is semantically invalid. However, we
believe the change in precision values reinforces our
hypothesis.
Our model operation improves signiﬁcantly over
the work of Wagner and Dean. Figure 18 also shows
overheads in each of the two programs attributed to
model operation. Our gain is partly due to implementa-
tion: Wagner and Dean wrote their monitor in Java. Our
code runs natively and is highly efﬁcient, introducing
only negligible delay.
6 Related Work
There are three areas with techniques and goals similar
to those considered in this paper: applications of static
analysis to intrusion detection, statistical anomaly-
detection-based intrusion detection, and secure agentry.
We compare the techniques presented in this paper with
the existing research in the three areas.
Our work applies and extends the techniques
described by Wagner and Dean [36,37]. To our knowl-
edge, they were the ﬁrst to propose the use of static anal-
ysis for intrusion detection. However, they analyzed C
source code by modifying a compiler and linker to con-
struct application models. Our analysis is performed on
binaries, independent of any source language or com-
piler, removing the user’s burden to supply their source
code. We also propose several optimizations and pro-
gram transformations that improve model precision and
efﬁciency. We believe the optimizations proposed in this
paper are important contributions and can be used by
other researchers working in this area.
There is a vast body of work applying dynamic
analysis to intrusion detection. In statistical anomaly-
detection-based intrusion detection systems such as
IDES [9], a statistical model of normal behavior is con-
structed from a collection of dynamic traces of the pro-
gram. For example, a sequence of system calls, such as
that produced by the utilities strace and truss, can be
used to generate a statistical model of the program (see
Forrest et al. [12]). Behaviors that deviate from the sta-
tistical model are ﬂagged as anomalous but are not a
guarantee of manipulation. Theoretically, we can use a
statistical program model in our checking agent. Practi-
cally, however, these models suffer from false alarm
rates; i.e. they reject sequences of system calls that rep-
resent acceptable but
infrequent program behavior.
Human inspection of jobs ﬂagged as anomalous is inap-
propriate in our setting so we did not pursue this
approach.
The literature on safe execution of mobile agents on
malicious hosts (also known as secure agentry) is vast.
The reader is referred to the excellent summary on vari-
ous techniques in the area of secure agentry by
Schneider [31]. We are currently exploring whether
techniques from this area, such as replication, are useful
in our setting.
7 Future Work
We continue progressing on a number of fronts. Fore-
most, we are working to expand our infrastructure base
of static analysis techniques to include points-to analy-
sis for binaries and regular expression construction for
arguments. Standard points-to analysis algorithms are
designed for a higher-level source language and often
rely on datatype properties evident from the syntax of
the code. We will adapt the algorithms to the weakly-
typed SPARC code. For arguments, we envision using
stronger slicing techniques to build regular expressions
for arguments not statically determined. Better code
analyses will produce more precise models.
We have two research areas targeting run-time over-
head reductions in our complex models. To reduce the
impact of null call insertions, we will investigate adapta-
tions of the Ball and Larus algorithm to identify optimal
code instrumentation points for minimum-cost code
proﬁling [4]. To reduce the overhead of our PDA mod-
els, we will collapse all run-time values at the same
automaton state into a single value with a DAG repre-
senting all stack conﬁgurations. When traversing outgo-
ing edges, a single update to the DAG is equivalent to an
individual update to each previous stack. Our hope is to
make our complex and precise models attractive for real
environments.
We will add general support for dynamically linked
applications and signal handlers to our analysis engine,
enabling analysis of larger test programs.
To better measure the attack opportunities afforded
by our models, we will implement the average adversar-
ial opportunity metric and create a collection of attack
automata. Having an accurate measure of the danger
inherent in an automaton better enables us to develop
strategies to mitigate the possible harm.
Acknowledgments
We thank David Wagner for patiently answering ques-
tions about his work and for providing his speciﬁcation
of dangerous system calls. David Melski pointed out the
relevance of the Ball and Larus research [4]. We had
many insightful discussions with Tom Reps regarding
static analysis. Hong Lin initially researched solutions
to the remote code manipulation vulnerability. Glenn
Ammons provided helpful support for EEL. We thank
the other members of the WiSA security group at Wis-
consin for their valuable feedback and suggestions.
Lastly, we thank the anonymous referees for their useful
comments.
Availability
Our research tool remains in development and we are
not distributing it at this time. Contact Jonathon Gifﬁn,
PI:EMAIL, for updates to this status.
References
[1]
Parallel
Programs”,
and K. Yang,
ACM Transactions
Infrastructure”,
Processing
A.D. Alexandrov, M. Ibel, K.E. Schauser, and C.J.
Scheiman, “SuperWeb: Towards a Global Web-Based
Parallel Computing
11th
IEEE
Symposium,
International
Geneva, Switzerland, April 1997.
K. Anstreicher, N. Brixius, J.-P. Goux, and J.
Linderoth, “Solving Large Quadratic Assignment
Problems on Computational Grids”, 17th International
Symposium on Mathematical Programming, Atlanta,
Georgia, August 2000.
A.W. Appel and D.B. MacQueen, “Standard ML of
New Jersey”, Third International Symposium on
Programming Language Implementation and Logic
Programming, Passau, Germany, August 1991. Also
appears in J. Maluszynski and M. Wirsing, eds.,
Programming Language Implementation and Logic
Programming, Lecture Notes in Computer Science
#528, pp. 1-13, Springer-Verlag, New York (1991).
T. Ball and J.R. Larus, “Optimally Profiling and
Tracing
on
Programming Languages and Systems 16, 3, pp. 1319-
1360, July 1994.
B. Barak, O. Goldreich, R. Impagaliazzo, S. Rudich, A.
Sahai, S. Vadhan,
the
(Im)possibility of Obfuscating Programs”, 21st Annual
International Cryptography Conference,
Santa
Barbara, California, August 2001. Also appears in J.
Kilian, ed., Advances in Cryptology - CRYPTO 2001,
Lecture Notes in Computer Science #2139, pp. 1-18,
Springer-Verlag, New York (2001).
E. Belani, A. Vahdat, T. Anderson, and M. Dahlin,
“The CRISIS Wide Area Security Architecture”,
Seventh USENIX Security Symposium, San Antonio,
Texas, January 1998.
S. Chow, Y. Gu, H. Johnson, and V.A. Zakharov, “An
Approach to the Obfuscation of Control-Flow of
Sequential Computer Programs”, Information Security
Conference ‘01, Malaga, Spain, October 2001.
C. Collberg, C. Thomborson, and D. Low, “Breaking
Abstractions and Unstructuring Data Structures”, IEEE
International Conference on Computer Languages,
Chicago, Illinois, May 1998.
D.E. Denning and P.J. Neumann, Requirements and
Model
for IDES–A Real-Time Intrusion Detection
System, Technical Report, SRI International, August
1985.
J. Esparza, D. Hansel, P. Rossmanith, and S. Schwoon,
“Efficient Algorithms for Model Checking Pushdown
Systems”, 12th Conference on Computer Aided
Verification, Chicago, Illinois, July 2000. Also appears
“On
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
Foster
Toolkit”,
Infrastructure
and C. Kesselman,
in E.A. Emerson and A.P. Sistla, eds., Computer Aided
Verification, Lecture Notes in Computer Science
#1855, pp. 232-247, Springer-Verlag, New York
(2000).
G.E. Fagg, K. Moore, and J.J. Dongarra, “Scalable
Networked
Information Processing Environment
(SNIPE)”, Supercomputing ‘97, San Jose, California,
November 1997.
S. Forrest, S.A. Hofmeyr, A. Somayaji, and T.A.
Longstaff, “A Sense of Self for Unix Processes”, 1996
IEEE Symposium on Research in Security and Privacy,
Oakland, California, May 1996.
“Globus: A
I.
Metacomputing
The
International Journal of Supercomputer Applications
and High Performance Computing 11, 2, pp. 115-129,
Summer 1997.
I. Foster and C. Kesselman, eds., The Grid: Blueprint
for a New Computing Infrastructure, Morgan
Kaufmann, San Francisco (1998).
A.K. Ghosh, A. Schwartzbard, and M. Schatz,
“Learning Program Behavior Profiles for Intrusion
Detection”, 1st USENIX Workshop on Intrusion
Detection and Network Monitoring, Santa Clara,
California, April 1999.
J.T. Giffin and H. Lin, “Exploiting Trusted Applet-
Server Communication”, Unpublished Manuscript,
2001. Available at http://www.cs.wisc.edu/~giffin/.
F. Hohl, “A Model of Attacks of Malicious Hosts
Against Mobile Agents”, 4th ECOOP Workshop on
Mobile Object Systems: Secure Internet Computations,
Brussels, Belgium, July 1998.
J. Hopcroft, An n log n Algorithm for Minimizing States
in a Finite Automaton, Theory of Machines and
Computations, pp. 189-196, Academic Press, New
York (1971).
and J.D. Ullman,
J.E. Hopcroft, R. Motwani,
Introduction to Automata Theory, Languages, and
Computation, Addison Wesley, Boston (2001).
S. Horwitz and T. Reps, “The Use of Program
Dependence Graphs in Software Engineering”, 14th
International Conference on Software Engineering,
Melbourne, Australia, May 1992.
N.D. Jones, C.K. Gomard, and P. Sestoft, Partial
Evaluation and Automatic Program Generation,
Prentice Hall
in Computer
Science, Prentice Hall, Englewood Cliffs, New Jersey
(1993).
C. Ko, G. Fink, and K. Levitt, “Automated Detection of
Vulnerabilities in Privileged Programs by Execution
Monitoring”,
Security
Applications Conference, Orlando, Florida, 1994.
C. Ko,
of Valid Behavior
Specifications for Intrusion Detection”, 2000 IEEE
Symposium on Security and Privacy, Oakland,
California, 2000.
10th Annual Computer
International Series
Induction
“Logic
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
[21]
[22]
[23]
[24]
[25]
Problem”,
ACM Transactions
L. Lamport, R. Shostak, and M. Pease, “The Byzantine
Generals
on
Programming Languages and Systems 4, 3, pp. 382-
401, July 1982.
J.R. Larus
“EEL: Machine-
Independent Executable Editing”, SIGPLAN ‘95
Conference on Programming Language Design and
Implementation, La Jolla, California, June 1995.
and E. Schnarr,
[28]
[27]
[26] M. Litzkow, M. Livny, and M. Mutka, “Condor–A
Hunter of
Idle Workstations”, 8th International
Conference on Distributed Computer Systems, San
Jose, California, June 1988.
B.P. Miller, M. Christodorescu, R. Iverson, T. Kosar,
A. Mirgorodskii, and F. Popovici, “Playing Inside the
Black Box: Using Dynamic Instrumentation to Create
Security Holes”, Parallel Processing Letters 11, 2/3,
pp. 267-280, June/September 2001. Also appears in the
Second Los Alamos Computer Science Institute
Symposium, Sante Fe, NM (October 2001).
T. Reps, “Program Analysis via Graph Reachability”,
Information and Software Technology 40, 11/12, pp.
701-726, November/December 1998.
J.H. Saltzer,
of
Information Sharing in Multics”, Communications of
the ACM 17, 7, pp. 388-402, July 1974.
T. Sander and C.F. Tschudin, “Protecting Mobile
Agents Against Malicious Hosts”, in G. Vigna, ed.,
Mobile Agents and Security, Lecture Notes
in
Computer Science #1419, pp. 44-60, Springer-Verlag,
New York (1998).
F.B. Schneider, “Towards Fault-tolerant and Secure
Agentry”, 11th International Workshop on Distributed
Algorithms, Saarbrucken, Germany, September 1997.
the Control
“Protection
[29]
[30]
[31]
and
[32]
[33]
[34]
[35]
[36]
[37]
[38]
[39]
23
Home,
January
System Services
SETI@home: Search for Extraterrestrial Intelligence
2002,
at
http://setiathome.ssl.berkeley.edu/.
Sun Microsystems, Java Virtual Machines, 11 May
2002, http://java.sun.com/j2se/1.4/docs/guide/vm/.
F. Tip, “A Survey of Program Slicing Techniques”,
Journal of Programming Languages 3, 3, pp.121-189,
September 1995.
A. Vahdat, T. Anderson, M. Dahlin, E. Belani, D.
Culler, P. Eastham, and C. Yoshikawa, “WebOS:
Operating
for Wide Area
Applications”, Seventh International Symposium on
High Performance Distributed Computing, Chicago,
Illinois, July 1998.
D.A. Wagner, Static Analysis and Computer Security:
for Software Assurance, Ph.D.
New Techniques
Dissertation, University of California at Berkeley, Fall
2000.
D. Wagner and D. Dean, “Intrusion Detection via
Static Analysis”, 2001 IEEE Symposium on Security
and Privacy, Oakland, California, May 2001.
C. Wang, J. Davidson, J. Hill, and J. Knight,
Survivability
“Protection
Mechanisms”,
of
and Networks, Goteborg,
Dependable
Sweden, July 2001.
C. Warrender, S. Forrest, and B. Pearlmutter,
“Detecting Intrusions Using System Calls: Alternative
Data Models”, 1999 IEEE Symposium on Security and
Privacy, Oakland, California, May 1999.
Software-based
International
Conference
Systems
of