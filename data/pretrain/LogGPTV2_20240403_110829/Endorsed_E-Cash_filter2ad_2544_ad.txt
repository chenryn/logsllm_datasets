2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007cisely what endorsed e-cash does; to deposit an unen-
dorsed coin (φ, y, coin0), Bob must get φ−1(y) from Al-
ice. Asokan et al. propose a way to reduce e-cash, how-
ever, their method creates linkable coins while SplitCoin
(see Section 3.2) generates independent coins.
Security: The Asokan et al. optimistic fair exchange
protocol requires a tagged, CCA2 secure, veriﬁable en-
cryption scheme for encrypting the pre-image of φ. In
Section 3.2, we use φ(a, b, c) = ha
2gc; thus, we should
use the Camenisch and Shoup [CS03] verﬁable encryp-
tion scheme. Its security is based on the Paillier As-
sumption, and the length of the proof is optimal. We
assume that φ is a one-way function, so we require the
discrete logarithm assumption.
1hb
As long as the TTP is honest, the exchange will be
fair. A dishonest TTP can cheat either party. Worse, a
malicious TTP can trick a user into double-spending by
falsely claiming that the exchange aborted. When the
user retries spending the wallet coin, the bank learns
the user’s identity and may even trace the user’s other
coins. Therefore, we require the TTP to give the user
and merchant signed “abort” certiﬁcates. A malicious
TTP can still compromise the user’s privacy, but at
least the certiﬁcate lets the user prove his innocense
and implicate the TTP.
4.2 Paying Multiple Coins
Suppose a merchant is selling a car for 19,995 e-coins
(an e-coin can be worth a dollar, or some other amount
if the system supports diﬀerent denominations). If a
user wants to do a fair exchange, she must veriﬁably
encrypt 19,995 endorsements. Creating and verifying
the ciphertexts is computationally expensive. Worse, if
the trusted third party becomes involved, it must store
all of the veriﬁable encryptions and their tags.
We can signiﬁcantly reduce the cost of the fair ex-
change. Examine the unendorsed coin (S0, T 0, Φ0, R, y)
from Section 3.2. The value y = φ(x1, x2, x3), where
(x1, x2, x3) is the endorsement. A fair exchange of one
coin for the car trades the opening of y for the opening
of some value K. A fair exchange of n unendorsed coins
trades the opening of (y(0), . . . , y(n−1)) for the opening
of K. Because φ is really a Pedersen commitment, we
can use a Pedersen VSS [Ped92] style algorithm to re-
duce opening all the y(i) to just opening y(0).
Setup: We will use the same public parameters as
the endorsed e-cash system in Section 3.2. For no-
tational convenience, we will use (g1, g2, g3) instead
of (h1, h2, g) (recall that these are three generators of
G whose discrete logarithm representation relative to
each other is unknown; we assume the discrete loga-
rithm problem is hard in G). Therefore, φ(a, b, c) =
ga
1 gb
3.
2gc
User Promise: The user makes n new endorsable
1 , x(i)
2 , x(i)
3 ), y(i)),
(S0(i), T 0(i), Φ0(i), R(i), (x(i)
for
coins
i ∈ [0, n − 1]. The user calculates three polynomials
f1, f2, f3 of degree n − 1, such that ∀i ∈ [0, n − 1],∀j ∈
{1, 2, 3} : fj(i) = x(i)
(this is a simple interpolation).
Let set A = {0, . . . , n − 1}. The user calculates n − 1
new points p(i)
j on f1, f2 and f3, as follows:
j
∀i ∈ [n, 2n − 2],∀j ∈ {1, 2, 3} :
j = fj(i) =X
p(i)
a∈A
fj(a)Y
b∈A
b6=a
i − a
b − a
j
: i ∈ [n, 2n − 2], j ∈ {1, 2, 3}}.
The user gives the merchant the n unendorsed coins
and {p(i)
Merchant Veriﬁes: The merchant gets n unendorsed
coins (S0(i), T 0(i), Φ0(i), R(i), y(i)), for i ∈ [0, n − 1], and
uses the Φ0(i) to verify their validity. Then the mer-
chant checks that the openings of the y(i) are on the
same polynomials as the p(i)
j . He does not need to know
the openings for this! Let set B = {n, . . . , 2n−2}. The
merchant accepts only if:
∀i ∈ [1, n − 1] :
Q
y(0) = (y(i))
b∈B
i
i−b
3Y
P
(gj)
j=1
a∈B
Q
b∈B
b6=a
a
a−b
a
a−i pa
j
1 , x(0)
2 , x(0)
3 ).
Reconstruct: The merchant uses (x(0)
Fair Exchange: The merchant and the user conduct
an optimistic fair exchange of the opening of y(0) for
the opening of K. The merchant learns φ−1(y(0)) =
(x(0)
If the exchange fails, the user must
throw out the unendorsed coins.
3 ) and
{p(i)
: i ∈ [n, 2n − 2], j ∈ {1, 2, 3}} to learn the open-
ings of y(1), . . . , y(n−1). He sets C = {0, n, . . . , 2n− 2},
j = x(0)
p(0)
∀i ∈ [1, n − 1],∀j ∈ {1, 2, 3} :
, and calculates:
1 , x(0)
2 , x(0)
j
j
j = fj(i) =X
x(i)
a∈C
fj(a)Y
b∈C
b6=a
x − a
b − a
Theorem 4.1 (Multi-coin fair exchange is secure).
Suppose a group of malicious merchants asks a group
of honest users to engage in an arbitrary number of fair
exchange protocols. The users have access to an unlim-
mitted number of withdrawals from the bank. The mer-
chants can terminate the fair exchanges at any point.
If the users endorse N e-coins and the merchants with-
draw M e-coins from the bank, then the merchants can
deposit at most N + M e-coins.
Before proving Theorem 4.1, we ﬁrst prove in
Lemma 4.2 that if a merchant endorses an e-coin during
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007a single run of a failed multi-coin exchange, then he can
calculate discrete logarithms. Then we use Lemma 4.2
to show that if the merchants manage to deposit more
coins than the users intended to give him (and that
they withdrew from the bank), then the merchants vi-
olate either the security of the endorsed e-cash scheme
or the discerete logarithm assumption.
2
1
1 , x(0)
2 , x(0)
3 ), . . . , (x(n−1)
, x(n−1)
Lemma 4.2. Let (x(0)
,
x(n−1)
) be numbers in Zp selected at random, and
3
let g1, g2, g3 be generators of a group G. We de-
3 and calculate
ﬁne the function φ(a, b, c) = ga
1 gb
2gc
y(0), . . . , y(n−1), such that yi = φ(x(i)
1 , x(i)
2 , x(i)
3 ). In ad-
dition, the x(i)
j deﬁne three polynomials f1, f2, f3 such
for 0 ≤ i ≤ n − 1. We calcu-
that fj(i) = x(i)
late n − 1 points on each of these three polynomials:
j
j = fj(i) : i ∈ [n, 2n − 2], j ∈ {1, 2, 3}}. Suppose
{p(i)
there exists an adversary that on input G, g1, g2, g3,
(y(0), . . . , y(n−1)), and {p(i)
j = fj(i) : i ∈ [n, 2n− 2], j ∈
{1, 2, 3}} outputs (a, b, c) such that y(i) = φ(a, b, c), for
some i ∈ [0, n − 1]. Then we can use this adversary to
calculate discrete logarithms in G.
Proof. We construct a reduction that uses the adver-
sary from Lemma 4.2 as a black-box to calculate dis-
crete logarithms. The reduction gets y as input. Sup-
pose (x1, x2, x3) is the opening of y; the reduction
does not know these values, but it constructs three
polynomials f1, f2, f3 so that fj(0) = xj. First the
reduction randomly chooses 3(n − 1) numbers in Zp:
: i ∈ [n, 2n − 2], j ∈ {1, 2, 3}}; these will be ran-
{p(i)
dom points that, along with the (unknown) opening of
y, deﬁne the polynomials f1, f2, f3. Then the reduction
calculates y(1), . . . , y(n−1). Let S = [n, 2n − 1], then:
j
∀i ∈ [1, n − 1] :
y(i) = y
Q
b∈S
i
b
Q
a∈S pa
j
3Y
P
(gj)
j=1
b∈S∪{0}
b6=a
i−a
b−a
The reduction passes (y, y(1), . . . , y(n−1)) and {p(i)
: i ∈
[n, 2n − 2], j ∈ {1, 2, 3}} to the black-box. The black-
box responds with an opening to one of the y(i). From
this the reduction can interpolate the polynomials and
open y.
j
Proof of Theorem 4.1. We now show that no merchant
can take advantage of the multi-coin fair exchange pro-
tocol to deposit more coins than the honest users in-
tended to give him. Suppose a group of dishonest
merchants, after withdrawing M e-coins and running
a number of multi-coin fair exchanges in which only
N coins should be endorsed, manages to deposit more
than M + N coins. Then we can construct a reduction
1 hx2
2 gx3.
The reduction gets y as input and needs to out-
put (x1, x2, x3) such that y = hx1
The
reduction sets up an endorsed e-cash system, us-
ing (h1, h2, g) as the public parameters.
It also
uses SZK, the simulator for the zero-knowledge sys-
tem Φ0 to create (params ZK, auxsim ZK) and SCHL,
the simulator for the CHL e-cash system to create
(params CHL, auxsim CHL).
The reduction runs multi-coin fair exchanges with
the merchants. In one of those exchanges (the reduc-
tion chooses which one at random), the reduction in-
serts y into an unendorsed coin. Suppose a merchant
wants n coins. Then the reduction prepares the in-
put to the merchant as follows: It asks SCHL to cre-
ate n e-coins (S(i), T (i), Φ(i), R(i)) (the reduction runs
Withdraw and Spend the appropriate amount of times).
Then the reduction uses y to create an unendorsed coin.
It randomly chooses r1 and r2 and calculates S0 = Sgr1
and T 0 = T gr2 (we need to blind S and T ; we don’t
know any valid openings of y, but for any r1 and r2 we
choose, there exists some r3 such that φ(r1, r2, r3) =
y). Then it uses SZK to generate a fake proof Φ0 such
that an honest merchant would accept the unendorsed
coin coin0(0) = (S0(0), T 0(0), Φ0(0), R0(0), y). Next the
reduction chooses the random points on three polyno-
: i ∈ [n, 2n − 2], j ∈ {1, 2, 3}}. Finally, the
mials: {p(i)
reduction chooses the appropriate y(1), . . . , y(n−1) (us-
ing the same method as in the proof of Lemma 4.2)
and uses SCHL and SZK to create the unendorsed
coins coin0(1), . . . , coin0(n−1).
The reduction gives
coin0(0), . . . , coin0(n−1) and {p(i)
: i ∈ [n, 2n − 2], j ∈
{1, 2, 3}} to the merchant.
j
j
that uses the merchants as a black-box to either break
the balance or anonymity properties of the endorsed
e-cash scheme, or to calculate discrete logarithms.
Eventually, the merchants output a list of more than
M + N coins for deposit. At least one of these coins
must be fake.
If it is an entirely new coin then the
merchant violated the balance property of the endorsed
e-cash scheme. The only other possibility is that the
coin was from a terminated multi-coin fair exchange.
With non-negligible probability, the reduction would
have inserted y into that fair exchange. In this case,
by Lemma 4.2, the merchants violated the discrete log-
arithm assumption.
If the merchants fail to output
more than M + N coins, then the merchants violated
anonymity because they distinguished the simulator
from real users (this can be shown with a straightfor-
ward reduction).
4.3 Threshold Endorsed E-cash
Sometimes, such as in our onion routing example,
we want to require the merchant to acquire several en-
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007dorsements before reconstructing an e-coin. In this sec-
tion, we construct a threshold endorsed e-cash system
where the merchant needs to get m out of n possible
endorsements.
An unendorsed coin consists of (S0, T 0, Φ0, R, y),
where y = Ped(x1, x2; x3). We can use Pedersen
Veriﬁable Secret Sharing [Ped92] to create shares of
the endorsement. For notational convenience, we use
(g1, g2, g3) instead of original parameters (h1, h2, g) in
Section 3.2.
To share (x1, x2, x3), the user generates three ran-
dom polynomials f1, f2, f3 of degree m − 1 such that
fj(0) = xj. The user stores a secret vector of n points
on the polynomial; these points are the endorsements.
The user gives the merchant commitments to the co-
eﬃcients that deﬁne the polynomials. Once the mer-
chant learns m points on the polynomials, he can re-
cover (x1, x2, x3) and endorse the coin. Algorithm 4.1
describes how the user creates a threshold endorsable
coin.
Algorithm 4.1: SplitCoinMN
Input: pkM ∈ {0, 1}∗ merchant’s public key,
contract ∈ {0, 1}∗
(s, t, σ, J) a wallet coin
User Data: u private key, gu public key,
(S0, T 0, Φ0, R, (x1, x2, x3), y) ←
SplitCoin(pkM, contract) ;
aj,0 ← xj,∀j ∈ {1, 2, 3} ;
aj,k ← Zp,∀j ∈ {1, 2, 3},∀k ∈ [1, m − 1] ;
: k ∈ [0, m − 1]} ;
Z ← {Zk =Q3
j=1 gaj,k
k=0 aj,kik : j ∈ {1, 2, 3}, i ∈
j =Pm−1
j
X ← {X (i)
[0, n]} ;
return (S0, T 0, Φ0, R, X, Z)