F6单步执行。 
第 143 页 
F5进入validateSubmit：
F6跟到125行注册调用： 
第 144 页 
F3可以先点开registerMember类看看： 
找到接口实现类即最终的注册逻辑代码： 
第 145 页 
2、Jeebbs 危险的用户名注册漏洞 
Jeebbs 的数据库结构当中用户名长度过长：`username` varchar(100) NOT NULL COMMENT 
'用户名',这会让你想到了什么？ 
当用户名的输入框失去焦点后会发送 Ajax 请求校验用户名唯一性。请输入一个长度介
于 3 和 20 之间的字符串。也就是说满足这个条件并且用户名不重复就行了吧？前端是有
用户名长度判断的，那么后端代码呢？因为我已经知道了用户名长度可以存 100 个字符，所
以如果没有判断格式的话直接可以注册 100 个字符的用户名。首先输入一个合法的用户名完
成客户端的唯一性校验请求，然后在点击注册发送数据包的时候拦截请求修改成需要注册的
xss 用户名，逻辑就不跟了跟上面的邮箱差不多，想像一下用户名可以 xss 是多么的恐怖。
任何地方只要出现粗线下 xss 用户名就可以轻易拿到别人的 cookie。 
第 146 页 
3、Cookie 明文存储安全问题： 
代码没有任何加密就直接 setCookie 了，如果说 cookie 明文储存用户帐号密码不算漏洞
的话等会弹出用户明文密码不知道是算不算漏洞。 
4、个性签名修改为 xss,发帖后显示个性签名处可 xss 
因为个性签名会在帖子里显示，所以回帖或者发帖就会触发 JS 脚本了。这里说一下默
认不记住密码的情况下（不设置 cookie）不能够拿到 cookie 当中的明文密码，这个漏洞用来
打管理员 PP 挺不错的。不应该啊，起码应该过滤下。 
第 147 页 
5、不科学的积分漏洞 
积分兑换方法如下： 
@RequestMapping(value = "/member/creditExchange.jspx") 
public void creditExchange(Integer creditIn, Integer creditOut, 
Integer creditOutType, Integer miniBalance, String password, 
HttpServletRequest request, HttpServletResponse response) {} 
可以看到这里直接用了 SpringMvc 注入参数，而这些参数恰恰是控制程序逻辑的
关键。比如构建如下 URL，通过 GET 或者 POST 方式都能恶意修改用户的积分： 
http://localhost/jeebbs/member/creditExchange.jspx?creditIn=26&credi
tOut=-27600&creditOutType=1&miniBalance=-10000000&password=wooyun 
因为他的逻辑是这么写的： 
if(user.getPoint()-creditOut>miniBalance){ 
balance=true; 
}else{ 
flag=1; 
} 
从 User 对象里面取出积分的数值，而积分兑换威望具体需要多少是在确定兑换关
系后由 ajax 去后台计算出来的，提交的时候也没有验证计算的结果有没有被客户端改
过。其中的 creditOut 和 miniBalance 都是我们可控的。所以这个等式不管在什么情
况下我们都可以让它成立。 
第 148 页 
6、打招呼 XSS 
逻辑有做判断：1、用户名为空。2、不允许发送消息给自己。3、用户名不存在。 
在控制层并没有做过滤： 
在调用com.jeecms.bbs.manager.impl. BbsMessageMngImpl.java 的sendMsg 方法的时候依
旧没有过滤。到最终的 BbsMessageDaoImpl 的 save 方法还是没有过滤就直接储存了; 
一般性的做法，关系到用户交互的地方最好做 referer 和 xss 过滤检测，控制层负责收集
数据的同时最好处理下用户的请求，就算 controller 不处理起码在 service 层做下处理吧。 
第 149 页 
7、发布投票贴 xss 发布一片投票帖子，标题 xss 内容。 
8、邮箱的两处没有验证 xss 
9、个人资料全部 xss 
10、投稿打管理员后台点击查看触发 
11、搜索 xss 
http://demo.jeecms.com/search.jspx?q=%2F%3E%3Cscript%3Ealert%28document.cookie%29%3
B%3C%2Fscript%3Ehello&channelId= 
漏洞 N……… 
第 150 页 
2、 按程序实现逆向测试 
1、”逆向”找 SQL 注入 
SQL注入理论上是最容易找的，因为SQL语句的特殊性只要Ctrl+H 搜索select、from 等关
键字就能够快速找到项目下所有的SQL语句，然后根据搜索结果基本上都能够确定是否存在
SQL注入。凡是SQL语句中出现了拼SQL（如select * from admin where id=’”+id+”’）那么基本
上80%可以确定是SQL注入。但也有特例，比如拼凑的SQL参数并不受我们控制，无法在前台
通过提交SQL注入语句的方式去控制最终的查询SQL。而采用预编译?占位方式的一般不存在
注入。 
比如搜索51javacms项目当中的SQL语句： 
Tips:ORM框架特殊性 
1、Hibernate HQL： 
需要注意的是Hibernate的HQL是对对象进行操作，所以它的SQL可能是： 
String hql = "from Emp"; 
Query q = session.createQuery(hql); 
也可以 
String hql = "select count(*) from Emp"; 
Query q = session.createQuery(hql); 
甚至是 
String hql = "select new Emp(e.empno,e.ename) from Emp e "; 
Query q = session.createQuery(hql); 
第 151 页 
2、 Mybatis(Ibatis3.0后版本叫Mybatis)： 
Ibatis、Mybatis的SQL语句可以基于注解的方式写在类方法上面，更多的是以xml的方
式写到xml文件。 
第 152 页 
在当前项目下搜索SQL语句关键字，查找疑似SQL注入的调用： 
进入搜索结果的具体逻辑代码： 
第 153 页 
最外层的Contrller： 
“逆向”找到控制层URL以后构建的SQL注入请求： 
可能大家关注的代码审计最核心的怎么去发掘SQL注入这样高危的漏洞，其次是XSS等类型
的漏洞。 
小结： 
1、 学会怎样Debug 
2、 学会了怎样通过从控制层到最终的数据访问层的代码跟踪和从数据访问层倒着找到控制层
的入口。 
3、 学会怎样去分析功能模块的用例。 
第 154 页 
3、文件上传、下载、编辑漏洞 
文件上传漏洞即没有对上传的文件的后缀进行过滤，导致任意文件上传。有的时候就算
有后缀判断，但是由于解析漏洞造成 GETSHELL 这是比较难避免的。 
1、没有做任何限制的上传漏洞： 
这一种是不需要任何绕过直接就可以上传任意脚本威胁性可想而知。 
第 155 页 
2、Bypass 白名单和黑名单限制 
某些时候就算做了后缀验证我们一样可以通过查看验证的逻辑代码找到绕过方式。第
35、36 行分别定义了白名单和黑名单后缀列表。41 到 46 行是第一种通过黑名单方式校验
后缀合法性。47 到 57 行代码是第二种通过白名单方式去校验后缀合法性。现在来瞧下上诉
代码都有那些方式可以 Bypass。 
1、 假设 37 行代码的 upload 不是在代码里面写死了而是从客户端传入的参数，那么可以自
定义修改 path 把文件传到当前 server 下的任意路径。 
2、 第 39 行犯下了个致命的错误，因为文件名里面可以包含多个”.”而”xxxxx”.indexOf(“.”)取到
的永远是第一个”.”,假设我们的文件名是 1.jpg.jsp 即可绕过第一个黑名单校验。 
3、 第 42 行又是另一个致命错误 s.equals(fileSuffix)比较是不区分大小写假设我们提交 1.jSP
即可突破验证。 
4、 第 50 行同样是一个致命的错误，直接用客户端上传的文件名作为最终文件名，可导致
多个漏洞包括解析漏洞和上面的 1.jpg.jsp 上传漏洞。 
第 156 页 
文件上传漏洞修复方案: 
1、 文件上传的目录必须写死 
2、 把原来的 fileName.indexOf(".")改成 fileName.lastIndexOf(".") 
3、s.equals(fileSuffix)改成 s.equalsIgnoreCase(fileSuffix) 即忽略大小写或者把前面的 fileSuffix
字符转换成小写：s.equals(fileSuffix.toLowerCase()) 
3、文件下载漏洞 
51JavaCms 典型的文件下载漏洞，我们不妨看下其逻辑为什么会存在漏洞。51javacms
并没有用流行的 SSH 框架而是用了 Servlert3.0 自行做了各种封装，实现了各种漏洞。Ctrl+H
搜索 DownLoadFilePage 找到下载的 Servlet： 
改装了下 51javacms 的垃圾代码： 
第 157 页 
请求不存在的文件： 
跨目录请求一个存在的文件： 
第 158 页 
4、文件编辑漏洞 
JeeCms 之前的后台就存在任意文件编辑漏洞（JEECMS 后台任意文件编辑漏洞 and 官方
漏洞及拿 shell ：http://wooyun.org/bugs/wooyun-2010-04030）官方的最新的修复方式是把
path 加了 StartWith 验证。 
4、基于 Junit 高级测试 
Junit 写单元测试这个难度略高需要对代码和业务逻辑有比较深入的了解，只是简单的
提下,有兴趣的朋友可以自行了解。 
JUnit 是由 Erich Gamma 和 Kent Beck 编写的一个回归测试框架（regression testing 
framework）。Junit 测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如
何（How）完成功能和完成什么样（What）的功能。Junit 是一套框架，继承 TestCase 类，
就可以用 Junit 进行自动测试了。 
第 159 页 
5、其他 
1、通过查看 Jar 包快速定位 Struts2 漏洞。 
比如直接打开lerxCms的lib目录： 
第 160 页 
2、报错信息快速确认 Server 框架 
类型转换错误： 
Struts2： 
3、二次校验逻辑漏洞 
比如修改密保邮箱业务只做了失去焦点唯一性校验，但是在提交的时候听没有校验唯一性 
4、隐藏在 Select 框下的邪恶 
Select 下拉框能有什么漏洞？一般人我不告诉他，最常见的有 select 框 Sql 注入、存储
性 xss 漏洞。搜索注入的时候也许最容易出现注入的地方不是搜索的内容，而是搜索的条件！ 
Discuz select 下拉框存储也有类型的问题，但 Discuz 对 Xss 过滤较严未造成 xss： 
第 161 页 
下拉框的 Sql 注入： 
第 162 页 
小结： 
本节不过是漏洞发掘审计的冰山一角，很多东西没法一次性写出来跟大家分享。本系列
完成后公布 ylog 博客源码。本节源代码暂不发布，如果需要源码站内。 
第 163 页 
攻击 JavaWeb 应用[7]-Server 篇[1] 
-园长 MM 
1、 java 应用服务器 
Java 应用服务器主要为应用程序提供运行环境，为组件提供服务。Java 的应用服务器
很多，从功能上分为两类：JSP 服务器和 Java EE 服务器。 
1.1 常见的 Server 概述 
常见的 Java 服务器:Tomcat、Weblogic、JBoss、GlassFish、Jetty、Resin、IBM 
Websphere、Bejy Tiger、Geronimo、Jonas、Jrun、Orion、TongWeb、BES Application Server、
ColdFusion、Apusic Application Server、Sun Application Server 、Oracle9i/AS、Sun Java 
System Application Server。 
Myeclipse 比较方便的配置各式各样的 Server，一般只要简单的选择下 Server 的目录
就行了。 
部署完成后启动进入各个 Server 的后台： 
第 164 页 
第 165 页 
1.2 
构建 WebShell war 文件 
1、打开 Myeclipse 新建 Web 项目 
2、把 jsp 放到 WebRoot 目录下 
3、导出项目为 war 文件 
第 166 页 
2、 Tomcat 
Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器，属于轻量级应用服务器，
在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试 JSP 程序的首
选。 
2.1 
Tomcat 版本 
Tomcat 主流版本:5-6-7，最新版 Tomcat8 刚发布不久。Tomcat5 较之 6-7 在文件结构上
有细微的差异，6-7-8 没有大的差异。最新版的 Tomcat8 主要新增了：Servlet 3.1, JSP 2.3, EL 3.0 
and Web Socket 1.0 支持。 
版本详情说明：http://tomcat.apache.org/whichversion.html 
结构目录： 
Tomcat5： 
Bin、common、conf、LICENSE、logs、NOTICE、RELEASE-NOTES、RUNNING.txt、Server、shared、
Temp、webapps、work 
Tomcat6-8： 
Bin、conf、lib、LICENSE、logs、NOTICE、RELEASE-NOTES、RUNNING.txt、temp、webapps、