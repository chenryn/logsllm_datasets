### 96.41%

**Table 1: Effectiveness of CODA’s Speedup Design**

| Algorithm | Execution Time (s) | Accuracy (%) |
|-----------|--------------------|--------------|
| DBSCAN    | 3217.27            | 98.21        |
| R-DBSCAN  | 27.50              | 96.47        |
| CODA      | [Insert Value]     | 96.41        |

### Per-Flow Fairness

| Metric   | Aalo | CODA |
|----------|------|------|
| [Metric 1] | 3    | 2.5  |
| [Metric 2] | 2    | 1.5  |
| [Metric 3] | 1    | 1.0  |
| [Metric 4] | 0.5  | 0.5  |
| [Metric 5] | 0    | 0    |

### Figure 11: CODA’s Scheduler Performance under Normal Workload

- **(a) Normalized CCT**
  - **Workload Type**: Hadoop, Spark
  - **Scheduling Algorithms**: CODA, Aalo, Per-Flow Fairness

- **(b) CCT Distribution**
  - **Coflow Completion Time (Seconds)**: \(10^{-2}\) to \(10^4\)
  - **Per-Flow Fairness**: Aalo, CODA

### Effectiveness of Distance Metric Learning (DML)

To evaluate the effectiveness of DML (§3.2), we ran the identification procedure with equal weights assigned to each attribute (§3.1). Figure 10d shows the average recall and precision in this scenario. Compared to CODA, the identification accuracy degraded by over 40%. This indicates that different attributes contribute differently to the final result, and our DML can effectively distinguish them.

### Impact of Parameter \(\epsilon\) (§3.3)

The radius parameter \(\epsilon\) is crucial for CODA (incremental R-DBSCAN) to determine the number of clusters. Figure 10e illustrates CODA’s performance under varying \(\epsilon\). While CODA maintains high accuracy across a wide range of \(\epsilon\), it is not perfect:
- **Too small \(\epsilon\)**: Misidentifies coflows into several small clusters, leading to low recall.
- **Too large \(\epsilon\)**: Misidentifies many coflows into one big cluster, leading to low precision.

The optimal \(\epsilon\) should be larger than the average inter-flow arrival time within a coflow and smaller than the average inter-coflow arrival time.

### Effectiveness of Identification Speedup

We evaluated our design for identification speedup (§3.3) and present the results in Table 1. Compared to DBSCAN, with up to 30 concurrent coflows (1 × 10^5 flows), CODA provides approximately 600× speedup at the cost of 2% accuracy. Compared to R-DBSCAN, CODA achieves a 5× speedup with negligible accuracy loss.

### Inspecting Scheduling Results under Normal Workloads

- **Figure 11a**: Normalized CCT for different scheduling algorithms (CODA, Aalo, Per-Flow Fairness) under normal workloads (Hadoop, Spark).
  - **Spark Traffic**: CODA performs almost as well as Aalo and outperforms per-flow fair sharing by 2.7×.
  - **Hadoop Traffic**: CODA is slightly worse than Aalo (about 1.1× worse) but still 2.3× better than per-flow fair sharing.

- **Figure 11b**: CDF of CCT for Spark traffic, showing CODA's performance closely matching Aalo.

### Results under Challenging Scenarios

- **Batch Arrival Case (Figure 12a)**: Hadoop traffic
  - **Performance Degradation**: With more identification errors, CODA's performance degrades gradually.
  - **Comparison**: CODA performs 1.3× to 1.8× worse than Aalo but is 2× to 1.5× better than fair sharing.

- **Stretched Arrival Case (Figure 12b)**: Spark and Hadoop traffic
  - **Performance**: Even with 60% recall, CODA performs only 1.3× worse than Aalo and outperforms fair sharing by 2×.

### Effectiveness of Error-Tolerant Design

- **Figure 13**: CODA's error-tolerant design
  - **Batch Arrival (Figure 13a)**: 3–5% overall improvement in CCT, especially 10–20% for small coflows.
  - **Stretched Arrival (Figure 13b)**: Significant improvement in CCT for small and narrow (SN) coflows.

### Understanding Late Binding (L.B.)

- **Figure 14a**: L.B. increases recall accuracy.
- **Figure 14b**: Sensitivity to parameter \(d\).

### Intra-Coflow Prioritization

- **Figure 15**: Intra-coflow prioritization improves performance for small and narrow coflows.
  - **(a) Batch Arrival (Hadoop)**
  - **(b) Stretched Arrival (Spark, Hadoop)**

This optimized text provides a clearer and more structured presentation of the data and analysis, making it easier to understand and follow.