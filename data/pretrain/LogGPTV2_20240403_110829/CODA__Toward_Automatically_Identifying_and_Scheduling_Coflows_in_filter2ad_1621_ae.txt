96.41%
Table 1: [Simulation] Effectiveness of CODA’s speedup design
DBSCAN
3217.27
98.21%
R-DBSCAN
27.50
96.47%
Per-Flow Fairness
Aalo
CODA
3
2.5
2
1.5
1
0.5
0
e
m
T
i
.
p
m
o
C
.
m
r
o
N
Hadoop
Spark
Workload Type
(a) Normalized CCT
s
w
o
l
f
o
C
f
o
n
o
i
t
c
a
r
F
1
0.8
0.6
0.4
0.2
0
10−2
104
Coflow Completion Time (Seconds)
Per−Flow Faireness
Aalo
CODA
102
100
(b) CCT distribution
Figure 11: [Simulation] CODA’s scheduler under normal workload.
effect. But we envision that concurrent coﬂows generated by
different applications or tenants may be effectively identiﬁed
via communities even with very close start times.
Effectiveness of Distance Metric Learning (DML) To eval-
uate the effectiveness of DML in §3.2, we run the identiﬁca-
tion procedure with the same weight assigned to each of the
attributes in §3.1. Figure 10d shows the average recall and
precision in such case. Compared to CODA, over 40% de-
graded identiﬁcation accuracy is clearly observed. This sug-
gests that different attributes contribute differently to the ﬁnal
result, and our DML can effectively distinguish them.
Impact of Parameter ✏ (§3.3) The radius parameter ✏ is key
for CODA (i.e., incremental R-DBSCAN) to determine the
number of clusters. Figure 10e shows CODA’s performance
under varying ✏.7 While CODA maintains a high accuracy
under a wide range of ✏, it is not perfect: too small a diameter
can misidentify coﬂows into several small clusters, leading
to low recall, while too large a diameter tends to misidentify
many coﬂows into one big cluster, leading to low precision.
As time plays a key role in identiﬁcation, the best choice of ✏
is closely related to ﬂow and coﬂow arrival patterns. In gen-
eral, we believe that an ideal ✏ should be larger than the aver-
age inter-ﬂow arrival time inside one coﬂow and smaller than
the average inter-coﬂow arrival time.
Effectiveness of Identiﬁcation Speedup We evaluate our de-
sign for identiﬁcation speedup (§3.3) and show the results
in Table 1. Compared to DBSCAN, with up to 30 concur-
rent coﬂows (1 ⇥ 105 ﬂows), CODA provides around 600⇥
speedup at the cost of 2% accuracy. Compared to R-DBSCAN,
CODA achieves 5⇥ speedup with negligible accuracy loss.
6.4 Inspecting Scheduling
Results under Normal Workloads We ﬁrst inspect CODA
scheduler under normal workloads. Figure 11a shows the per-
formance of different scheduling algorithms in terms of nor-
malized CCT. It is evident that CODA effectively tolerates
certain identiﬁcation errors and performs as well as Aalo with
correct coﬂow information, and signiﬁcantly outperforms per-
ﬂow fair sharing. For example, for the Spark trafﬁc, with
7We normalized the value of Stime to 1 in As and Ah (§3.2).
e
m
T
i
.
p
m
o
C
.
m
r
o
N
2.5
2
1.5
1
0.5
0
Per-Flow Fairness
Aalo
CODA
10
100
Batch Interval(s)
50
e
m
T
i
.
p
m
o
C
.
m
r
o
N
2.5
2
1.5
1
0.5
0
Per-Flow Fairness
Aalo
CODA
Hadoop
Spark
Workload Type
(a) Batch arrival case (Hadoop)
Figure 12: [Simulation] CODA’s scheduler under challenging sce-
narios.
(b) Stretched arrival case
e
m
T
i
.
p
m
o
C
.
m
r
o
N
1.2
1.15
1.1
1.05
1
0.95
0.9
CODA w/o both
CODA w/o I.P.
CODA
10
100
Batch Interval(s)
e
m
T
i
.
p
m
o
C
.
m
r
o
N
1.2
1.15
1.1
1.05
1
0.95
0.9
CODA
CODA w/o both
CODA w/o I.P.
CODA
CODA
Hadoop
Workload Type
Spark
(b) Stretched arrival case
(a) Batch arrival case (Hadoop)
Figure 13: [Simulation] Effectiveness of CODA’s error-tolerant
scheduler. Here “both” refers to late binding (L.B.) and intra-coﬂow
prioritization (I.P.).
around 95% identiﬁcation accuracy (corresponding to Fig-
ure 10a), it is not a surprise that CODA performs almost the
same as Aalo, and outperforms per-ﬂow fair sharing by 2.7⇥.
For the Hadoop trafﬁc, with around 90% accuracy, CODA is
slightly worse than Aalo (about 1.1⇥ worse), but still 2.3⇥
better than per-ﬂow fair sharing. To better visualize the re-
sult, Figure 11b show the CDF of CCT for the Spark trafﬁc,
we can see that CODA almost coincides with Aalo.
Results under Challenging Scenarios We next check CODA
scheduler under the two challenging scenarios – batch arrival
and stretched arrival – described above, where the identiﬁca-
tion is not as accurate as the normal case.
Figure 12a compares different scheduling algorithms un-
der the batch arrival case using Hadoop trafﬁc. As expected,
we observe that with more identiﬁcation errors introduced,
the performance of CODA scheduler degrades gradually. For
example, we ﬁnd that CODA performs around 1.3⇥ to 1.8⇥
worse compared to Aalo with correct information when batch
interval equals 10s (85% precision in Figure 10b)) to 100s
(56% precision) respectively. In the meanwhile, CODA is
still around 2⇥ to 1.5⇥ better than fair sharing.
Figure 12b shows the performance of different schedul-
ing algorithms under the stretched arrival case. We observe
that for both Spark and Hadoop trafﬁc, even under 60% re-
call (Figure 10c), CODA performs only around 1.3⇥ worse
than Aalo, while outperforming fair sharing by 2⇥.
Effectiveness of Error-Tolerant Design We proceed to check
the effectiveness of CODA’s error-tolerant design in Figure
13. Note that CODA without both late binding and intra coﬂow
prioritization is equivalent to directly adopting Aalo for schedul-
ing with inaccurate identiﬁcation input. Figure 13a shows
that, for batch arrival, the error-tolerant design brings 3–5%
Recall Precision
100
90
80
70
60
50
)
%
(
y
c
a
r
u
c
c
A
Stretched Arrival (Hadoop)
Normal (Spark)
CODA
e
m
T
i
.
p
m
o
C
.
m
r
o
N
A
D
O
C
.
t
.
r
.
w
1.2
1.15
1.1
1.05
1
0.95
0.9
Before C.E After C.E.
(a) L.B. increases recall accu-
racy
0
200 400 600 800 1000
Late binding diameter d
(b) Sensitivity to parameter d
CODA w/o I.P.
CODA
Figure 14: [Simulation] Understanding Late binding (L.B.) ).
1.4
1.3
1.2
1.1
1
0.9
CODA w/o I.P.
CODA
1.4
1.3
1.2
1.1
1
0.9
CODA
p
m
o
C
m
r
o
N
e
m
T
i
.
.
e
m
T
i
.
p
m
o
C
.
m
r
o
N
CODA
10
100
Batch Interval(s) 
Hadoop
Spark
Workload Type
(b) Stretched arrival case
(a) Batch arrival case (Hadoop)
Figure 15: [Simulation] Intra-coﬂow prioritization brings obvious
improvement on small & narrow (SN) coﬂows.
overall improvement in CCT, and especially, it brings 10–
20% improvement in CCT for small coﬂows (shown later
in Figure 15a). Furthermore, we observe a bigger improve-
ment in Figure 13b for stretched arrival, where the error-