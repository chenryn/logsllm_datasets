# 深入分析勒索软件Scarab：一个改变了战术的新变种
|
##### 译文声明
本文是翻译文章，文章原作者 Malwarebytes Labs ，文章来源：blog.malwarebytes.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
Scarab（圣甲虫）恶意软件于2017年6月首次发现。此后，有多个版本的变种陆续产生并被发现。最流行的一个版本是通过Necurs僵尸网络进行分发，使用Visual
C语言编写而成。但是，在针对多个变种进行脱壳之后，我们发现有一个2017年12月首次发现的变种Scarabey，其分发方式与其他变种不同，并且它的有效载荷代码也并不相同。  
如同其他大多数勒索软件一样，Scarabey会将系统中的文件进行加密，并勒索比特币赎金。然而，Scarabey并没有像原来的Scarab那样通过内部的malspam进行分发，而是针对特定的俄罗斯用户群体，并通过RDP或手动的方式分发到服务器和系统上。  
另外，Scarabey与此前我们发现的任何样本都不相同，其恶意代码是由Delphi编写的，没有Scarab所具有的C++包装，并且勒索赎金的提示内容和使用语言也与其他样本完全不同。
    Scarab原始样本MD5：e8806738a575a6639e7c9aac882374ae
    Scarabey变种样本MD5：9a02862ac95345359dfc3dcc93e3c10e
## 勒索赎金的提示
针对感染者而言，Scarabey和其他Scarab勒索软件的主要区别在于勒索赎金提示信息的语言，以及加密信息中所使用的恐吓手段。  
在Scarab样本中，勒索赎金的提示信息是英文，但如果仔细阅读，会发现它似乎是从俄文逐字翻译成英文的，其中一些地方并没有遵循正确的英语语法或习惯表达。而Scarabey的提示信息直接就是俄语。非常有趣的是，如果我们将Scarabey的俄语提示内容复制粘贴到谷歌翻译中，所得到的机翻英语内容，包含与Scarab勒索提示信息相同的语法错误，如下图所示。  
原始的Scarab提示信息：  
使用谷歌翻译，俄译英后的Scarabey提示信息：  
我们认为，Scarab勒索软件的作者可能使用俄语，他使用自己的母语写了勒索提示信息，并通过在线翻译将其转换成英语，并放入了Scarab勒索软件之中。如果真是这样，该作者很可能为了能够感染更多的用户，使用自己的母语制作了Scarabey勒索软件，并将其瞄准俄罗斯用户这一特定人群。
## 不同的威胁提示内容
在最初的Scarab版本中，它警告用户说：用户支付赎金所耗费的时间越久，价格就会越高。  
而在Scarabey中，它警告用户：在不支付赎金的情况下，文件会不断被删除，直至所有文件都被彻底删除，且无法恢复。  
但经过深入分析，攻击者自称被感染用户他们保留了未加密的副本，或者暗示被感染用户他们能够控制被感染用户的计算机，这些都是骗人的。具体原因如下：
  1. 攻击者并不会保留未加密文件的副本，也没有任何途径将这些文件发送到被感染用户的计算机上。同样，也无法将任何文件从受感染计算机发送给勒索软件作者。
  2. 在Scarab及其变种，不存在后门或远程访问相关的代码，因此攻击者无法在被感染的计算机上远程删除文件。
  3. 根据我们的理解，在用户支付赎金后，攻击者会向被感染用户发送拥有唯一密钥的解密软件。用户运行该软件，可以解密电脑中的文件。这也就是说，攻击者无法控制解密的过程，因为解密过程是在被感染者主机本地、在离线状态下完成的。
  4. 根据对恶意软件代码的分析，不存在删除用户文件的相关功能。
具体来说，在勒索提示信息中，作者声称文件是在服务器端被加密，这是不真实的：
>
> “如果您不支付赎金，每隔24小时我们就删除24个文件（我们具有文件的副本）。如果在72小时之内没有运行解密程序，计算机上的所有文件都将被彻底删除，无法再恢复。”  
>  然后，恶意软件的作者给出了解密步骤，在被感染用户付款后，会收到一个解密程序，带有唯一密钥的解密软件可以在本地执行解密操作：  
>  “运行解密软件后，文件会在1小时之内被解密。”  
>  “每个解密软件中都包含唯一的密钥，无法使用其他用户的解密器为您的数据解密。”
通过我们的分析，我们认为：恶意软件作者通过诈称“会删除文件”，促使用户快速支付赎金。
## 技术分析
通过比较Scaraby和Scarabey，我们发现Scarabey这一变种明显是使用俄语编写的，并且明显针对俄罗斯用户，但是原作者可能是同一人。从代码上来分析，这两个恶意软件的变种几乎是每个字节都相同。另外，Scarab和Scarabey所生成的子进程，所投放的文件、使用的加密方法和使用的互斥量都是相同的。正是由于上述原因，我们才认为Scarabey是一个变种，而不是一个新的家族。  
下图展现了两个恶意软件变种的输出。唯一不通的是代码和内存数据所引用的地址（用黄色和红色标出）。  
## 代码分析
Scarabey变种是用Delphi语言编写的。运行后，首先会检查自身是否为第一次运行。具体来说，先会检查是否已经传入了参数。如果没有，则检查是否已经设置了以下注册表项：
    SoftwareILRTISoidle
如果没有设置注册表项（意味着是第一次运行），勒索软件接下来会检查SEVNZ是否已经被创建，并使用下面的命令利用命令提示符将自身复制到临时目录下，并命名为sevnz.exe：
    cmd.exe /c copy /y C:UsersvirusLabDesktop9a02862ac95345359dfc3dcc93e3c10e.exe “C:UsersvirusLabAppDataRoamingsevnz.exe”
随后，它会在退出的时候，产生一个带有参数“runas”的进程。  
至此，将会由子进程进行接管。  
代码流现在将进入与以前相同的功能，删除SEVNZ并重新复制它。由于参数的传入，它会跳过最开始的步骤，并运行复制后的sevnz.exe：
    C:Users[username]AppDataRoamingsevnz.exe
随后，使用命令行打开cmd.exe进程。
    “mshta.exe “javascript:o=new ActiveXObject(‘Scripting.FileSystemObject’);setInterval(function(){try{o.DeleteFile(‘9a02862ac95345359dfc3dcc93e3c10f.exe’);close()}catch(e){}},10);””
之后开始等待将自身删除，原因在于进程不能在运行时被删除。  
现在，我们进入到SEVNZ.exe进程：  
该进程通过尝试删除”…AppDataRoamingsevnz.exe”，来检查它是否以sevnz.exe运行。  
如果失败，它就会知道当前运行的是sevnz.exe，而不是原来的可执行文件。该检查通过后，会使用mtsha.exe来执行JavaScript，将延迟一段时间，并将其自身添加到注册表来自动运行：
    mshta.exe “javascript:o=new ActiveXObject(‘WScript.Shell’);
    x=newActiveXObject(‘Scripting.FileSystemObject’);
    setInterval(function(){try{i=x.GetFile(‘sevnz.exe’).Path;
    o.RegWrite(‘HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce\ILRTISo’,i);}
    catch(e){}},10);
接下来，会删除卷影副本（Shadow Volume Copy），这是绝大多数勒索软件都会执行的一个操作，以确保用户无法恢复被加密的文件。
    —–Executes these scripts with mtsha.exe:—–
    ActiveXObject(“WScript.Shell”);
    o.Run(“cmd.exe /c wbadmin DELETE SYSTEMSTATEBACKUP -keepVersions:0”,0);
    o.Run(“cmd.exe /c wmic SHADOWCOPY DELETE”,0);
    o.Run(“cmd.exe /c vssadmin Delete Shadows /All /Quiet”,0);
    o.Run(“cmd.exe /c bcdedit “
    new ActiveXObject(“WScript.Shell”);
    o.Run(“cmd.exe /c wbadmin DELETE SYSTEMSTATEBACKUP-keepVersions:0”,0);
    o.Run(“cmd.exe /cwmicSHADOWCOPYDELETE”0);
    o.Run(“cmd.exevssadminDeleteShadows /All/Quiet”,0);
    o.Run(“cmd.exe /c bcdedit /set {default} recoveryenabled No”,0);
    o.Run(“cmd.exe /c bcdedit /set {default} bootstatuspolicy ignoreallfailures”,0);
随后，打开一个始终循环的线程，并确保没有“关键进程”正在运行。如果发现“关键进程”存在，将会关闭这些进程。原因在于，这些进程可能会锁定一些勒索软件本来想要加密的文件。这些“关键进程”是在一个字符串中定义的：