Click here to view code image
lkd> rdmsr c0000081
msr[c0000081] = 00230010`00000000
Next, you can investigate LSTAR, and then use the ln command
to see if it’s pointing to KiSystemCall64 (for systems that don’t
require KVA Shadowing) or KiSystemCall64Shadow (for those
that do):
Click here to view code image
lkd> rdmsr c0000082
msr[c0000082] = fffff804`7ebd3740
lkd> ln fffff804`7ebd3740
(fffff804`7ebd3740)   nt!KiSystemCall64
Finally, you can look at SFMASK, which should have the values
we described earlier:
Click here to view code image
lkd> rdmsr c0000084
msr[c0000084] = 00000000`00004700
x86 system calls occur through sysenter, which uses a different
set of MSRs, including 0x176, which stores the 32-bit system call
handler:
Click here to view code image
lkd> rdmsr 176
msr[176] = 00000000’8208c9c0
lkd> ln 00000000’8208c9c0
(8208c9c0)   nt!KiFastCallEntry
Finally, on both x86 systems as well as x64 systems without
MBEC but with HVCI, you can see the int 0x2e handler registered
in the IDT with the !idt 2e debugger command:
Click here to view code image
lkd> !idt 2e
Dumping IDT: fffff8047af03000
2e:            fffff8047ebd3040 nt!KiSystemService
You can disassemble the KiSystemService or KiSystemCall64
routine with the u command. For the interrupt handler, you’ll
eventually notice
Click here to view code image
nt!KiSystemService+0x227:
fffff804`7ebd3267 4883c408        add     rsp,8
fffff804`7ebd326b 0faee8          lfence
fffff804`7ebd326e 65c604255308000000 mov   byte ptr gs:
[853h],0
fffff804`7ebd3277 e904070000      jmp     
nt!KiSystemServiceUser (fffff804`7ebd3980)
while the MSR handler will fall in
Click here to view code image
nt!KiSystemCall64+0x227:
fffff804`7ebd3970 4883c408        add     rsp,8
fffff804`7ebd3974 0faee8          lfence
fffff804`7ebd3977 65c604255308000000 mov   byte ptr gs:
[853h],0
nt!KiSystemServiceUser:
fffff804`7ebd3980 c645ab02        mov     byte ptr [rbp-
55h],2
This shows you that eventually both code paths arrive in
KiSystemServiceUser, which then does most common actions
across all processors, as discussed in the next section.
Nonarchitectural system service dispatching
As Figure 8-25 illustrates, the kernel uses the system call number to locate
the system service information in the system service dispatch table. On x86
systems, this table is like the interrupt dispatch table described earlier in the
chapter except that each entry contains a pointer to a system service rather
than to an interrupt-handling routine. On other platforms, including 32-bit
ARM and ARM64, the table is implemented slightly differently; instead of
containing pointers to the system service, it contains offsets relative to the
table itself. This addressing mechanism is more suited to the x64 and ARM64
application binary interface (ABI) and instruction-encoding format, and the
RISC nature of ARM processors in general.
 Note
System service numbers frequently change between OS releases. Not only
does Microsoft occasionally add or remove system services, but the table
is also often randomized and shuffled to break attacks that hardcode
system call numbers to avoid detection.
Regardless of architecture, the system service dispatcher performs a few
common actions on all platforms:
■    Save additional registers in the trap frame, such as debug registers or
floating-point registers.
■    If this thread belongs to a pico process, forward to the system call
pico provider routine (see Chapter 3, Part 1, for more information on
pico providers).
■    If this thread is an UMS scheduled thread, call KiUmsCallEntry to
synchronize with the primary (see Chapter 1, Part 1, for an
introduction on UMS). For UMS primary threads, set the
UmsPerformingSyscall flag in the thread object.
■    Save the first parameter of the system call in the FirstArgument field
of the thread object and the system call number in SystemCallNumber.
■    Call the shared user/kernel system call handler
(KiSystemServiceStart), which sets the TrapFrame field of the thread
object to the current stack pointer where it is stored.
■    Enable interrupt delivery.
At this point, the thread is officially undergoing a system call, and its state
is fully consistent and can be interrupted. The next step is to select the correct
system call table and potentially upgrade the thread to a GUI thread, details
of which will be based on the GuiThread and RestrictedGuiThread fields of
the thread object, and which will be described in the next section. Following
that, GDI Batching operations will occur for GUI threads, as long as the
TEB’s GdiBatchCount field is non-zero.
Next, the system call dispatcher must copy any of the caller’s arguments
that are not passed by register (which depends on the CPU architecture) from
the thread’s user-mode stack to its kernel-mode stack. This is needed to avoid
having each system call manually copy the arguments (which would require
assembly code and exception handling) and ensure that the user can’t change
the arguments as the kernel is accessing them. This operation is done within a
special code block that is recognized by the exception handlers as being
associated to user stack copying, ensuring that the kernel does not crash in
the case that an attacker, or incorrectly written program, is messing with the
user stack. Since system calls can take an arbitrary number of arguments
(well, almost), you see in the next section how the kernel knows how many
to copy.
Note that this argument copying is shallow: If any of the arguments passed
to a system service points to a buffer in user space, it must be probed for safe
accessibility before kernel-mode code can read and/or write from it. If the
buffer will be accessed multiple times, it may also need to be captured, or
copied, into a local kernel buffer. The responsibility of this probe and
capture operation lies with each individual system call and is not performed
by the handler. However, one of the key operations that the system call
dispatcher must perform is to set the previous mode of the thread. This value
corresponds to either KernelMode or UserMode and must be synchronized
whenever the current thread executes a trap, identifying the privilege level of
the incoming exception, trap, or system call. This will allow the system call,
using ExGetPreviousMode, to correctly handle user versus kernel callers.
Finally, two last steps are taken as part of the dispatcher’s body. First, if
DTrace is configured and system call tracing is enabled, the appropriate
entry/exit callbacks are called around the system call. Alternatively, if ETW
tracing is enabled but not DTrace, the appropriate ETW events are logged
around the system call. Finally, if neither DTrace nor ETW are enabled, the
system call is made without any additional logic. The second, and final, step,
is to increment the KeSystemCalls variable in the PRCB, which is exposed as
a performance counter that you can track in the Performance & Reliability
Monitor.
At this point, system call dispatching is complete, and the opposite steps
will then be taken as part of system call exit. These steps will restore and
copy user-mode state as appropriate, handle user-mode APC delivery as
needed, address side-channel mitigations around various architectural
buffers, and eventually return with one of the CPU instructions relevant for
this platform.
Kernel-issued system call dispatching
Because system calls can be performed both by user-mode code and kernel
mode, any pointers, handles, and behaviors should be treated as if coming
from user mode—which is clearly not correct.
To solve this, the kernel exports specialized Zw versions of these calls—
that is, instead of NtCreateFile, the kernel exports ZwCreateFile.
Additionally, because Zw functions must be manually exported by the kernel,
only the ones that Microsoft wishes to expose for third-party use are present.
For example, ZwCreateUserProcess is not exported by name because kernel
drivers are not expected to launch user applications. These exported APIs are
not actually simple aliases or wrappers around the Nt versions. Instead, they
are “trampolines” to the appropriate Nt system call, which use the same
system call-dispatching mechanism.
Like KiSystemCall64 does, they too build a fake hardware trap frame
(pushing on the stack the data that the CPU would generate after an interrupt
coming from kernel mode), and they also disable interrupts, just like a trap
would. On x64 systems, for example, the KGDT64_R0_CODE (0x0010)
selector is pushed as CS, and the current kernel stack as RSP. Each of the
trampolines places the system call number in the appropriate register (for
example, EAX on x86 and x64), and then calls KiServiceInternal, which
saves additional data in the trap frame, reads the current previous mode,
stores it in the trap frame, and then sets the previous mode to KernelMode
(this is an important difference).
User-issued system call dispatching
As was already introduced in Chapter 1 of Part 1, the system service dispatch
instructions for Windows executive services exist in the system library
Ntdll.dll. Subsystem DLLs call functions in Ntdll to implement their
documented functions. The exception is Windows USER and GDI functions,
including DirectX Kernel Graphics, for which the system service dispatch
instructions are implemented in Win32u.dll. Ntdll.dll is not involved. These
two cases are shown in Figure 8-26.
Figure 8-26 System service dispatching.
As shown in the figure, the Windows WriteFile function in Kernel32.dll
imports and calls the WriteFile function in API-MS-Win-Core-File-L1-1-
0.dll, one of the MinWin redirection DLLs (see Chapter 3, Part 1, for more
information on API redirection), which in turn calls the WriteFile function in
KernelBase.dll, where the actual implementation lies. After some subsystem-
specific parameter checks, it then calls the NtWriteFile function in Ntdll.dll,
which in turn executes the appropriate instruction to cause a system service
trap, passing the system service number representing NtWriteFile.
The system service dispatcher in Ntoskrnl.exe (in this example,
KiSystemService) then calls the real NtWriteFile to process the I/O request.
For Windows USER, GDI, and DirectX Kernel Graphics functions, the
system service dispatch calls the function in the loadable kernel-mode part of
the Windows subsystem, Win32k.sys, which might then filter the system call
or forward it to the appropriate module, either Win32kbase.sys or
Win32kfull.sys on Desktop systems, Win32kmin.sys on Windows 10X
systems, or Dxgkrnl.sys if this was a DirectX call.
System call security
Since the kernel has the mechanisms that it needs for correctly synchronizing
the previous mode for system call operations, each system call service can
rely on this value as part of processing. We previously mentioned that these
functions must first probe any argument that’s a pointer to a user-mode
buffer of any sort. By probe, we mean the following:
1. 
Making sure that the address is below MmUserProbeAddress, which
is 64 KB below the highest user-mode address (such as 0x7FFF0000
on 32-bit).
2. 
Making sure that the address is aligned to a boundary matching how
the caller intends to access its data—for example, 2 bytes for Unicode
characters, 8 bytes for a 64-bit pointer, and so on.
3. 
If the buffer is meant to be used for output, making sure that, at the
time the system call begins, it is actually writable.
Note that output buffers could become invalid or read-only at any future
point in time, and the system call must always access them using SEH, which
we described earlier in this chapter, to avoid crashing the kernel. For a
similar reason, although input buffers aren’t checked for readability, because
they will likely be imminently used anyway, SEH must be used to ensure
they can be safely read. SEH doesn’t protect against alignment mismatches
or wild kernel pointers, though, so the first two steps must still be taken.
It’s obvious that the first check described above would fail for any kernel-
mode caller right away, and this is the first part where previous mode comes
in—probing is skipped for non-UserMode calls, and all buffers are assumed
to be valid, readable and/or writeable as needed. This isn’t the only type of
validation that a system call must perform, however, because some other
dangerous situations can arise:
■    The caller may have supplied a handle to an object. The kernel
normally bypasses all security access checks when referencing
objects, and it also has full access to kernel handles (which we
describe later in the “Object Manager” section of this chapter),
whereas user-mode code does not. The previous mode is used to
inform the Object Manager that it should still perform access checks
because the request came from user space.
■    In even more complex cases, it’s possible that flags such as
OBJ_FORCE_ACCESS_CHECK need to be used by a driver to
indicate that even though it is using the Zw API, which sets the
previous mode to KernelMode, the Object Manager should still treat
the request as if coming from UserMode.
■    Similarly, the caller may have specified a file name. It’s important for
the system call, when opening the file, to potentially use the
IO_FORCE_ACCESS_CHECKING flag, to force the security
reference monitor to validate access to the file system, as otherwise a
call such as ZwCreateFile would change the previous mode to
KernelMode and bypass access checks. Potentially, a driver may also
have to do this if it’s creating a file on behalf of an IRP from user-
space.
■    File system access also brings risks with regard to symbolic links and
other types of redirection attacks, where privileged kernel-mode code
might be incorrectly using various process-specific/user-accessible
reparse points.
■    Finally, and in general, any operation that results in a chained system
call, which is performed with the Zw interface, must keep in mind that
this will reset the previous mode to KernelMode and respond
accordingly.
Service descriptor tables
We previously mentioned that before performing a system call, the user-
mode or kernel-mode trampolines will first place a system call number in a
processor register such as RAX, R12, or X8. This number is technically
composed of two elements, which are shown in Figure 8-27. The first
element, stored in the bottom 12 bits, represents the system call index. The
second, which uses the next higher 2 bits (12-13), is the table identifier. As
you’re about to see, this allows the kernel to implement up to four different
types of system services, each stored in a table that can house up to 4096
system calls.
Figure 8-27 System service number to system service translation.
The kernel keeps track of the system service tables using three possible
arrays—KeServiceDescriptorTable, KeServiceDescriptorTableShadow, and
KeServiceDescriptorTableFilter. Each of these arrays can have up to two
entries, which store the following three pieces of data:
■    A pointer to the array of system calls implemented by this service
table
■    The number of system calls present in this service table, called the
limit
■    A pointer to the array of argument bytes for each of the system calls
in this service table
The first array only ever has one entry, which points to KiServiceTable and
KiArgumentTable, with a little over 450 system calls (the precise number
depends on your version of Windows). All threads, by default, issue system
calls that only access this table. On x86, this is enforced by the ServiceTable
pointer in the thread object, while all other platforms hardcode the symbol
KeServiceDescriptorTable in the system call dispatcher.
The first time that a thread makes a system call that’s beyond the limit, the
kernel calls PsConvertToGuiThread, which notifies the USER and GDI
services in Win32k.sys about the thread and sets either the thread object’s
GuiThread flag or its RestrictedGuiThread flag after these return
successfully. Which one is used depends on whether the
EnableFilteredWin32kSystemCalls process mitigation option is enabled,
which we described in the “Process-mitigation policies” section of Chapter 7,
Part 1. On x86 systems, the thread object’s ServiceTable pointer now
changes to KeServiceDescriptorTableShadow or
KeServiceDescriptorTableFilter depending on which of the flags is set, while
on other platforms it is a hardcoded symbol chosen at each system call.
(Although less performant, the latter avoids an obvious hooking point for
malicious software to abuse.)
As you can probably guess, these other arrays include a second entry,
which represents the Windows USER and GDI services implemented in the
kernel-mode part of the Windows subsystem, Win32k.sys, and, more
recently, the DirectX Kernel Subsystem services implemented by
Dxgkrnl.sys, albeit these still transit through Win32k.sys initially. This
second entry points to W32pServiceTable or W32pServiceTableFilter and
W32pArgumentTable or W32pArgumentTableFilter, respectively, and has
about 1250 system calls or more, depending on your version of Windows.
 Note
Because the kernel does not link against Win32k.sys, it exports a
KeAddSystemServiceTable function that allows the addition of an
additional entry into the KeServiceDescriptorTableShadow and the
KeServiceDescriptorTableFilter table if it has not already been filled out.
If Win32k.sys has already called these APIs, the function fails, and
PatchGuard protects the arrays once this function has been called, so that
the structures effectively become read only.
The only material difference between the Filter entries is that they point to
system calls in Win32k.sys with names like stub_UserGetThreadState, while
the real array points to NtUserGetThreadState. The former stubs will check if
Win32k.sys filtering is enabled for this system call, based, in part, on the
filter set that’s been loaded for the process. Based on this determination, they
will either fail the call and return STATUS_INVALID_SYSTEM_SERVICE if
the filter set prohibits it or end up calling the original function (such as
NtUserGetThreadState), with potential telemetry if auditing is enabled.
The argument tables, on the other hand, are what help the kernel to know
how many stack bytes need to be copied from the user stack into the kernel
stack, as explained in the dispatching section earlier. Each entry in the
argument table corresponds to the matching system call with that index and
stores the count of bytes to copy (up to 255). However, kernels for platforms
other than x86 employ a mechanism called system call table compaction,
which combines the system call pointer from the call table with the byte
count from the argument table into a single value. The feature works as
follows:
1. 
Take the system call function pointer and compute the 32-bit
difference from the beginning of the system call table itself. Because
the tables are global variables inside of the same module that contains
the functions, this range of ±2 GB should be more than enough.
2. 
Take the stack byte count from the argument table and divide it by 4,
converting it into an argument count (some functions might take 8-
byte arguments, but for these purposes, they’ll simply be considered
as two “arguments”).
3. 
Shift the 32-bit difference from the first step by 4 bits to the left,
effectively making it a 28-bit difference (again, this is fine—no kernel
component is more than 256 MB) and perform a bitwise or operation
to add the argument count from the second step.
4. 
Override the system call function pointer with the value obtained in
step 3.
This optimization, although it may look silly at first, has a number of
advantages: It reduces cache usage by not requiring two distinct arrays to be
looked up during a system call, it simplifies the amount of pointer
dereferences, and it acts as a layer of obfuscation, which makes it harder to
hook or patch the system call table while making it easier for PatchGuard to
defend it.
EXPERIMENT: Mapping system call numbers to
functions and arguments
You can duplicate the same lookup performed by the kernel when
dealing with a system call ID to figure out which function is
responsible for handling it and how many arguments it takes. On an
x86 system, you can just ask the debugger to dump each system
call table, such as KiServiceTable with the dps command, which
stands for dump pointer symbol, which will actually perform a
lookup for you. You can then similarly dump the KiArgumentTable
(or any of the Win32k.sys ones) with the db command or dump
bytes.
A more interesting exercise, however, is dumping this data on an
ARM64 or x64 system, due to the encoding we described earlier.
The following steps will help you do that.
1. 
You can dump a specific system call by undoing the
compaction steps described earlier. Take the base of the
table and add it to the 28-bit offset that’s stored at the
desired index, as shown here, where system call 3 in the
kernel’s service table is revealed to be
NtMapUserPhysicalPagesScatter:
Click here to view code image
lkd> ?? ((ULONG)(nt!KiServiceTable[3]) >> 4) + 
(int64)nt!KiServiceTable