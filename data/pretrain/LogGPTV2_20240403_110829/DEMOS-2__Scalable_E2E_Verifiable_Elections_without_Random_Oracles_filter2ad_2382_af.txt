. After sending all the corrupted vot-
ers’ option selections, S sends (sid, tally) to F m,n,t
. Upon receiving the election result
τ := (τ1, . . . , τm) from F m,n,t
i(cid:54)=w αi
and simulates the NIZK corresponding proofs. Finally, S posts D∗
, for j ∈ [m], S computes D∗
j,(w) = Ej,2/(gτj
(cid:80)
1 · E
j,1
j,(w) on the BB.
priv
priv
priv
)
We ﬁrst show that the probability that the above simulator S aborts is negligible.
In case the extracted U(cid:96) (cid:54)∈ U for some corrupted voter V(cid:96), the adversary A must have
managed to either break the soundness of the underlying NIZK proof system or ‘copy’
one of the honest voter’s ciphertexts by re-randomizing them. According to Theorems 2,
3 and 5, either events happen with negligible probability.
Suppose now S does not abort. We will show that if the lifted ElGamal is IND-CPA
secure, then the protocol view created by S is indistinguishable from the real execution.
Note that IND-CPA security of the ElGamal implies that SXDH assumption holds.
Given an adversary A who can distinguish the protocol view simulated by S, we can
construct an adversary B who can break the IND-CPA game. Indeed, in the reduction,
when B receives the public key, we will post it as hi,(w) in the Setup protocol, simulating
the Dlog Sigma protocol. B then sends m0 = 0, m1 = 1 to the IND-CPA challenger.
When receiving a ciphertext c = (c1, c2), B can transfer the ciphertext under public
key h1,(w) to be a ciphertext under the public key h1 and use it in the honest voters’
ballots. The transformation: c(cid:48) = (c1, c2 · g
). Clearly, c and c(cid:48) encrypts the
same message under diﬀerent public keys. If the adversary A can distinguish the honest
voters’ ballots, then the adversary B distinguish the IND-CPA challenge with running
time 2k · poly(λ) < 2λc.
(cid:4)
(cid:80)
i(cid:54)=w αi
1
Remark. As in [KZZ15], we use complexity leveraging to argue privacy which means
21
k < λ. But for any desired k we can always choose a suitable security parameter λ
such that the system is k-private. In most real world elections (e.g., national elections)
privacy is only guaranteed between hundreds or a few thousands voters that belong
to a precinct. If one wants to achieve privacy nation-wide as well, it is still possible
to use our scheme eﬃciently with the following modiﬁcation: the trustees, each one
individually, will perform a Sigma OR proof that either their published parameter is
properly generated or that they know a preimage of a one-way hash function of the coins
of the voters (this should be done using a Lapidot-Shamir like proof since the statement
is not determined fully before the ﬁrst move of the protocol). In the privacy proof the
simulator can use complexity leveraging to ﬁnd such preimage in time independent of
the number of corrupted voters and thus complete the simulation in time proportional
to breaking the one-way function.
6.3 E2E Veriﬁability
For simplicity, our analysis is for 1-out-of-m elections can be easily extended to x-out-
of-m cases. Our proof strategy follows the lines in [KZZ15, Theorem 4], as our e-voting
system shares many common elements with DEMOS.
Theorem 7. Let n, m, t, θd ∈ N where 1 ≤ θ ≤ n. The e-voting system described
in Section 5 achieves E2E veriﬁability for a number of θ honest successfull voters and
tally deviation d with error (1/2)d + (1/2)θ unless there is an algorithm that can ﬁnd a
collision for hash : {0, 1}∗ (cid:55)→ {0, 1}λ in 22θ expected number of steps.
Proof. We emphasize that in the E2E veriﬁability proof, only BB is assumed to be
honest. The rest components of the election server are controlled by the adversary.
Hence, the voter ID, vid(cid:96), may not necessarily be unique, and the adversary is allowed to
change the content on the BB arbitrarily before the Tally protocol starts. Nevertheless,
we can assume all the Sigma protocols and the NIZK proofs on the BB are valid if
there is at least one honest voter that performs veriﬁcation. We ﬁrst construct a vote
extractor E for our system as follows:
E takes input as the election transcript, info and a set of receipts {rec(cid:96)}V(cid:96)∈ ˜V .
If
Result(info) = ⊥, then E outputs ⊥. Otherwise, for all the corrupted voters V(cid:96) ∈ V \ ˜V,
E extracts U(cid:96) by exhaustive search over the ElGamal ciphertexts in the ballot blt(cid:96). It
then outputs (cid:104)U(cid:96)(cid:105)V(cid:96)∈V\ ˜V .
Based on the above vote extractor, we now prove the E2E veriﬁability of our scheme.
A,E,d,θ
e2e-ver (1λ, n, m, t). Namely, A breaks E2E
Assume an adversary A that wins the game G
veriﬁability by allowing at least θ honest successful voters and achieving tally deviation
d. Let E be the event that there exists one tallied ciphertext that encrypts e∗ (cid:54)∈ U.
By Theorems 1 and 2, all the NIZK proofs are perfectly sound. Hence, the adversary
needs to cheat on at least one Sigma protocol to make event E occur. By Theorem 4
and since the voters’ coins have min entropy θ, the Sigma protocols challenge hash(ρ)
should also have min entropy θunless there is an algorithm that can ﬁnd a collision for
hash in 22θ expected number of steps. Hence, each Sigma protocol has soundness error
no more than (1/2)θ. Therefore,
Pr[G
A,E,d,θ
e2e-ver (1λ, n, m, t) = 1 | E] ≤ (1/2)θ.
(1)
Now assume that E does not occur. In this case, the deviation from the intended result
that A achieves, derives only by miscounting the honest votes. This may be achieved
22
by A in two diﬀerent possible ways:
• Modiﬁcation attacks. Modify one of the versions of the honest voters’ ballots
when it was produced on the VSD. This attack is successful only if the voter
chooses to submit the modiﬁed version. Since the version is valid, it encrypts an
option in U, hence for each successful attack the achieved deviation is 1.
• Clash attacks. Assign the same vid to y honest voters so that the adversary can
inject y − 1 ballots. This attack is successful only if all the y voters verify the
same ballot on the BB and hence miss the injected votes that produce the tally
deviation. The maximum deviation achieved by this attack is y − 1.
Recall that each honest voter should select one of the two versions of the ballot at
random, and the other version will be opened for auditing. Hence, the success probability
of x deviation via the modiﬁcation attack is (1/2)x. With regard to the clash attacks,
similarly, it is easy to see that the success probability to clash y honest voters without
being detected is (1/2)y−1 (all y honest voters choose the same version to vote). Given
that E does not occur the total tally deviation achieved is x + y ≥ d. Therefore, the
upper bound of the success probability of A when E does not occur is
A,E,d,θ
e2e-ver (1λ, n, m, t) = 1 | ¬E] ≤ (1/2)x+y ≤ (1/2)d.
Pr[G
(2)
By Eq. (1), (2), we have the overall probability
Pr[G
A,E,d,θ
e2e-ver (1λ, n, m, t) = 1] ≤ (1/2)d + (1/2)θ .
(cid:4)
7
Implementation
Our prototype is written in Django framework. We also adopt Twitter Bootstrap [Boo15]
for better user interface. All the cryptographic elements are Base64 encoded and inter-
changed in JSON format. We use SHA3 to implement hash and adopt CryptoJS [Mot15]
as its JavaScript implementation. We use Type F pairing groups [BN06] as the asym-
metric bilinear group candidates. Its JavaScript implementation employs SJCL [SJC15]
for basic big number arithmetic. On top of SJCL, we ported the Type F pairing arith-
metic of jPBC [DI11] to JavaScript. Unlike DEMOS [KZZ15], the election setup step
of DEMOS-2 is very eﬃcient and independent of m, n. This is because all the votes are
encrypted at the client side during the cast phase on demand. The benchmark results in
Tbl. 1 shows the time that a VSD (client) takes to encrypt a vote and produce a ballot
(using Javascript). The benchmark is produced on a Mac Mini with 2.5 GHz Intel Core
i5, 4GB RAM. For instance, when m = 2, it takes 0.4s to prepare both A and B versions
of the ballot; afterwards, it takes 2.2s to complete the NIZK proofs.
References
[Adi08]
Ben Adida. Helios: Web-based open-audit voting. In USENIX, 2008.
23
m Security Version A&B NIZK proof Ballot Size
2
10
399.4 ms
1913.5 ms
80 bits
80 bits
2239.2 ms
8210.4 ms
2.5 KB
9.3 KB
Table 1: Client-side Vote Encryption Eﬃciency
[BCP+11] David Bernhard, V´eronique Cortier, Olivier Pereira, Ben Smyth, and Bogdan
Warinschi. Adapting helios for provable ballot privacy. In ESORICS, 2011.
[Ben06]
Josh Benaloh. Simple veriﬁable elections. In USENIX, 2006.
[BFM88] Manuel Blum, Paul Feldman, and Silvio Micali. Non-interactive zero-
knowledge and its applications. In STOC, 1988.
[BN06]
Paulo S. L. M. Barreto and Michael Naehrig. Pairing-friendly elliptic curves
of prime order. In SAC, pages 319–331. Springer, 2006.
[Boo15]
Bootstrap. Twitter Bootstrap. http://getbootstrap.com/, 2015.
[BPW12] David Bernhard, Olivier Pereira, and Bogdan Warinschi. How not to prove
yourself: Pitfalls of the Fiat-Shamir heuristic and applications to Helios. In
ASIACRYPT, 2012.
[BR93] Mihir Bellare and Phillip Rogaway. Random oracles are practical: A
paradigm for designing eﬃcient protocols. In CCS, pages 62–73, 1993.
[Can98]
Ran Canetti. Security and composition of multi-party cryptographic proto-
cols. J. of CRYPTOLOGY, 13:2000, 1998.
[Can01]
Ran Canetti. Universally composable security: A new paradigm for crypto-
graphic protocols. In FOCS, pages 136–145, 2001.
[CDS94] Ronald Cramer, Ivan Damg˚ard, and Berry Schoenmakers. Proofs of partial
knowledge and simpliﬁed design of witness hiding protocols. In CRYPTO,
1994.
[Cha90] David Chaum. Zero-knowledge undeniable signatures (extended abstract).
In EUROCRYPT, pages 458–464. Springer, 1990.
[DI11]
Angelo De Caro and Vincenzo Iovino. jpbc: Java pairing based cryptography.
In ISCC 2011, pages 850–855, 2011.
[GOS06]
Jens Groth, Rafail Ostrovsky, and Amit Sahai. Non-interactive zaps and new
techniques for nizk. In CRYPTO, pages 97–111, 2006.
[GS08]
Jens Groth and Amit Sahai. Eﬃcient non-interactive proof systems for bi-
linear groups. In EUROCRYPT, 2008.
[JCJ02]
Ari Juels, Dario Catalano, and Markus Jakobsson. Coercion-resistant elec-
tronic elections. ePrint, 2002:165, 2002.
[KTV10] Ralf K¨usters, Tomasz Truderung, and Andreas Vogt. Accountability: Deﬁ-
nition and relationship to veriﬁability. ePrint, 2010:236, 2010.
24
[KTV11] Ralf K¨usters, Tomasz Truderung, and Andreas Vogt. Veriﬁability, privacy,
and coercion-resistance: New insights from a case study. In S & P, pages
538–553, 2011.
[KZZ15] Aggelos Kiayias, Thomas Zacharias, and Bingsheng Zhang. End-to-end ver-
In EUROCRYPT, pages 468–498.
iﬁable elections in the standard model.
Springer, 2015.
[LS90]
Dror Lapidot and Adi Shamir. Publicly veriﬁable non-interactive zero-
knowledge proofs. In CRYPTO. Springer, 1990.
[Mot15]
Jeﬀ Mott. Crypto-JS. http://code.google.com/p/crypto-js/, 2015.
[R`af15]
Carla R`afols. Stretching groth-sahai: NIZK proofs of partial satisﬁability. In
TCC, 2015.
[RG15] Mark Ryan and Gurchetan S. Grewal. Online voting is convenient, but if the
results aren’t veriﬁable it’s not worth the risk. The Conversation, https:
//theconversation.com/online-voting-is-convenient-but-if-the
-results-arent-verifiable-its-not-
2015.
worth-the-risk-41277, May
[Sch89]
Claus-Peter Schnorr. Eﬃcient identiﬁcation and signatures for smart cards.
In EUROCRYPT, volume 434, pages 688–689. Springer, 1989.
[SJC15]
SJCL. Stanford Javascript Crypto Library. http://crypto.stanford.edu/
sjcl/, 2015.
25