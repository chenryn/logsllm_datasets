and our tool found no attack, thus conﬁrming the analysis
of a similar protocol by Delicata and Schneider [14].
3.2.3 Beyond Authentication and Secrecy
We now consider the novel speciﬁcation of some further
properties. First we develop the property of data freshness,
that states that particular session data (e.g. a session key)
should be always fresh in a session. Then we consider the
study of a primitive notion of denial of service.
Data Freshness We state the data freshness property as
follows:
Data D is fresh whenever a principal A never completes a
run with another principal agreeing on D, if once in the
past A has already completed a protocol run with another
principal agreeing on the same data D.
The freshness PS-LTL property of a short term session key
K for the protocol of Example 4 is shown in Table 3 (6).
We run our tool to check the freshness of the session key
kst and obtained an attack similar to the previous aliveness
attack. In this attack, the session key kst is used twice, i.e.
when a was acting as an initiator in one session and as a re-
sponder in the other session. Thus, it violates the freshness
of kst. For Lowe’s ﬁxed version of BAN concrete Andrew
Secure RPC protocol [22], no attack was found as expected.
Towards analysing Denial of Service attacks We now
sketch ﬁnally the speciﬁcation of a property to analyse po-
tential vulnerabilities regarding denial of service (DoS) at-
tacks [25] (We plan to study this notion further as future
work.)
In the protocol of Example 4, the ﬁrst message (a, na)
can be generated cheaply by anyone (not necessarily by a).
Moreover, upon receiving this message b commits to per-
form several expensive operations (e.g. generating a session
key and allocating state for the running session).
To mount a DoS attack against b, an attacker needs to
start several sessions in which b reaches its run event (since
at that point b commits to ﬁnishing the protocol, see Exam-
ple 4), but there is no corresponding effort done by a (so no
one is committed to ﬁnish any session with b). Note that the
attacker does not need to achieve that b ﬁnishes his execu-
tion (and emitting the end status event); the attacker needs
only that b emits its run event. Thus this property differs
from the authentication ones given above which always re-
quire b to emit its end event.
We model this indication of DoS attack in PS-LTL, by
specifying that if a responder b runs a session apparently
with a, then the honest initiator a has once started a session
with b, as shown in Table 3 (7).
We successfully use our tool to check this formula on a
single session and obtain a trace that indicates a potential
DoS attack. When we modify the protocol by encrypting
the ﬁrst message using the long term key klt (i.e. message 1
is {(a, na)}klt) we found no attack. Intuitively, this encryp-
tion allows only honest participants, who share klt, to gen-
erate the ﬁrst message (still, the attacker could replay mes-
sage 1 and continue mounting the DoS attack; this would be
detected by an injective analysis, as discussed in the begin-
ning of Section 3.2.1).
4 Deciding PS-LTL in Constraint Solving
The constraint-based Procedure 13 presented in Sec-
tion 2.4 outputs symbolic traces containing constrained vari-
ables. In this section we show how to decide validity of a
PS-LTL formula against such a symbolic trace. Since in
the previous section we deﬁned validity (called concrete)
only w.r.t. ground traces, the ﬁrst thing we need to do is to
extend the notion of validity for symbolic traces.
Deﬁnition 17 (Symbolic validity). Given a trace tr derived
from a system scenario Sc and the initial intruder knowl-
edge IK, we say that (cid:7)tr, IK(cid:9) |= φ when for every valid
instance tr
, IK(cid:9) |= φ.
of tr, (cid:7)tr
(cid:2)
(cid:2)
Let ϕ be a closed PS-LTL formula representing a secu-
rity property. We let Aϕ = ¬ϕ be its corresponding attack
property. Given a symbolic trace tr and the initial intruder
knowledge IK, we now deﬁne a procedure D that tries to
, IK(cid:9) |= Aϕ.
ﬁnd a valid ground instance tr
(cid:2) represents a violation of ϕ (hence an at-
If D succeeds, tr
, IK(cid:9) (cid:16)|= ϕ, and thus
, IK(cid:9) |= Aϕ iff (cid:7)tr
tack), since (cid:7)tr
(cid:2)
(cid:7)tr, IK(cid:9) (cid:16)|= ϕ. On the other hand, if D fails, then we know
(cid:2) s.t. (cid:7)tr
, IK(cid:9) |= Aϕ. In other words,
that there is no tr
, IK(cid:9) |= ϕ, i.e.
(cid:2) of tr, (cid:7)tr
for every ground instance tr
(cid:7)tr, IK(cid:9) |= ϕ. Thus D decides symbolic validity.
(cid:2) of tr s.t. (cid:7)tr
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
Our approach consists of two stages. We ﬁrst translate
a closed PS-LTL formula φ into a (shown equivalent) ele-
mentary formula EF, using the transformation T described
next in Section 4.2. Then, we input the translated formula
to the decision procedure D presented in Section 4.3. Pro-
cedure D uses the ability to solve negated constraints, so
we start by deﬁning these negated constraints and then pre-
senting a strategy to solve them.
4.1 Solving Negated Constraints
In Section 2.4 we consider “positive” constraints m : T ,
since its solution decides whether there exists a substitution
σ s.t. mσ can be built from T σ. In the following we con-
sider negated constraints, whose solution decides whether
there exists a substitution σ s.t. mσ is not derivable from
T σ.
Deﬁnition 18. A negated constraint is denoted by ¬(m :
T ), where m is a term and T is a set of terms. σ is a solution
of ¬(m : T ) if mσ (cid:16)∈ F(T σ), in which case we say that
¬(m : T ) is solvable.
If both m and T are ground, then procedure P (see The-
orem 12) can be used to solve ¬(m : T ):
Corollary 19. Let m be a ground term and let T be a set of
ground terms. Then ¬(m : T ) is solvable iff P applied to
m : T fails.
Proof. By Theorem 12, P fails iff for all σ, mσ (cid:16)∈ F(T σ).
Since m : T is ground, we obtain that P fails iff m (cid:16)∈ F(T ),
establishing the property.
When P succeeds, we know that there exists a substitu-
tion σ s.t. mσ ∈ F(T σ). So if P fails, we have that for
all substitutions σ, mσ (cid:16)∈ F(T σ); However, what we are
trying to establish is whether there exists a substitution σ
s.t. mσ (cid:16)∈ F(T σ). In the case that m : T is ground, then
the two cases collapse and hence we can use Corollary 19.
However, when m or T is non ground, we cannot use P
straightforwardly.
Example 20. Consider the negated constraint ¬({X}Y :
{{secret1}secret2, e}). Applying procedure P to {{X}Y :
{{secret1}secret2, e}} succeeds, assigning secret1 to X
and secret2 to Y . However, the negated constraint is solv-
able, e.g. by assigning e to X and secret2 to Y .
Given a state (cid:7)Sc, IK, CS, tr(cid:9) from Procedure 13 for a
run of input scenario Sc0 and IK and given a negated con-
(cid:2)) ∪ IK)5 for some term m and some tr
straint ¬(m : K(tr
(cid:2)
preﬁx trace of tr, we are interested on ﬁnding a solution σ
of both CS and ¬(m : K(tr
(cid:2)) ∪ IK).
5For readability we only consider one negated constraint; the extension
to the general case is straightforward.
We now present a simple strategy to solve CS ∪ ¬(m :
(cid:2))∪IK) when K(tr
(cid:2)) is possibly non ground, although
K(tr
m has to be ground. This solution is enough for our current
purposes, as all our security properties are covered; a solu-
tion for the general case is still a matter of current research.
Initially, we include a set of fresh constants to the at-
tacker knowledge, one for each variable occurring in the
input scenario Sc0. More formally, we assume that the
initial intruder knowledge IK includes a set of constants
CV = {cX | X ∈ V and X occurs in Sc0} (recall that V
is the set of variables) thus CV ⊆ IK. CV contains intruder
generated constants which do not occur in the input sce-
nario, and hence are never needed to to solve the positive
constraint solving phase of CS (the use of these constants
is inspired by the work of K¨ahler and K¨usters [21]).
Let σV be the substitution that maps every variable X to
the corresponding constant cX. Our solving strategy con-
sists on checking whether σV is a solution of CS ∪ ¬(m :
(cid:2)) ∪ IK). Intuitively, using a fresh constant for each
K(tr
variable gives the best chances for the negated constraint
(cid:2)) ∪ IK)σV ) to hold; any other arbitrary so-
¬(m : (K(tr
lution σ could map variables to terms which are more “re-
lated” to each other than the (completely unrelated) fresh
constants used by σV , thus giving more chances that the at-
(cid:2)) ∪ IK)σ. This result is
tacker can derive m from (K(tr
formalized below, where T (cid:16)(cid:17) S means that no term t ∈ T
occurs in any term s ∈ S and T (cid:16)(cid:17) s means that no term
t ∈ T occurs in s.
Theorem 21. Let (cid:7)Sc, IK, CS, tr(cid:9) be a state from Proce-
dure 13 where for each X : TX ∈ CS, CV ⊆ TX and
CV (cid:16)(cid:17) TX \ CV . Let tr
be a preﬁx of tr and ¬(m :
(cid:2)) ∪ IK) be a negated constraint, where m is ground
K(tr
and CV (cid:16)(cid:17) m. There exists a substitution σ solution of both
(cid:2))∪ IK) iff σV is a solution of both CS
CS and ¬(m : K(tr
and ¬(m : K(tr
(cid:2)) ∪ IK).
(cid:2)
The result relies on a series of lemmas, as reported in [8,
Appendix A.2]. Below we brieﬂy describe the proof (for
the non trivial case (⇒)).
It is easy to see that σV is a solution of CS. We
then focus on establishing that σV is a solution of ¬(m :
(cid:2))σV ∪ IK). Recall
(cid:2)) ∪ IK), that is, m (cid:16)∈ F(K(tr
K(tr
that we assume CV ⊆ IK are intruder generated constants,
one per variable V occurring in the input scenario, with the
substitution σV mapping each V to cV . We consider a sim-
ilar set of constants DV , with similar substitution ρV . Let
δ = {dX → cX | X ∈ V}.
(cid:2)) ∪ IK)σ) then m (cid:16)∈
Fδ((K(tr
(cid:2) the mapping that replaces
each occurrence of dX with Xσ and Fδ like F with the
2} →cdec t1 when t2δ = t
added rule {{t1}t2, t
(cid:2)
(cid:2)
2δ. This fol-
(cid:2))∪ IK)ρV )σ
lows from the fact that Fδ((K(tr
(cid:2) (the set that
results from replacing each variable X to dX, clausuring
We ﬁrst see that if m (cid:16)∈ F((K(tr
(cid:2)) ∪ IK)ρV )σ
(cid:2), for σ
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)) ∪ IK)ρV )σ
it with Fδ and then remapping back each dX to Xσ) is
(cid:2)) ∪ IK)σ).
actually included in the original set F((K(tr
Next, we show that m (cid:16)∈ Fδ((K(tr
(cid:2) im-
(cid:2)) ∪ IK)ρV )δ, i.e.
plies that m (cid:16)∈ Fδ((K(tr
if m is not
in the former set the m is not in the same set which dif-
fers only in that in the last step replaces dXs to cXs (the
(cid:2). Then we establish that
δ mapping) instead of applying σ
(cid:2)) ∪ IK)ρV δ), (that is, if we replace dXs to
m (cid:16)∈ F((K(tr
cXs inside the closure by δ then we can “substitute” Fδ by
(cid:2)) ∪ IK)σV ),
F). Finally, we get the theorem m (cid:16)∈ F((K(tr
since applying ρV and δ is equivalent to applying σV .
Now, the problem of deciding whether a negated con-
straint ¬(m : K) is solvable (where m is ground) is solved
by Theorem 21, which tells us that ¬(m : K) is solvable iff
mσV : KσV is not solvable, something that can be easily
checked using P as described in Corollary 19. As we see in
the next, the ability to solve negated constraints is one im-
portant ingredient to decide validity of PS-LTL formulas in
Section 4.3.
4.2 Translating PS-LTL
The ﬁrst step in solving PS-LTL consists on applying
a transformation to simpler formulas called elementary for-
mulas. We ﬁrst introduce elementary formulas, whose syn-
tax is given by the following deﬁnition:
Deﬁnition 22. Elementary formulas EF (ranged over by