#    
#                              _-----=> irqs-off    
#                             / _----=> need-resched    
#                            | / _---=> hardirq/softirq    
#                            || / _--=> preempt-depth    
#                            ||| /     delay    
#           TASK-PID   CPU
#  ||||    TIMESTAMP  FUNCTION    
#              | |       |   ||||       |         |               mount-20889 [005] .... 2159455.499195: do_mount      => do_mount     => ksys_mount     => __x64_sys_mount     => do_syscall_64     => entry_SYSCALL_64_after_hwframe结合刚才说的内容，我们知道了，通过 function tracer可以帮我们判断内核中函数是否被调用到，以及函数被调用的整个路径也就是调用栈。这样我们就理清了整体的追踪思路：如果我们通过 perf发现了一个内核函数的调用频率比较高，就可以通过 function tracer工具继续深入，这样就能大概知道这个函数是在什么情况下被调用到的。那如果我们还想知道，某个函数在内核中大致花费了多少时间，就像加餐第一讲案例中我们就拿到了estimation_timer()时间开销，又要怎么做呢？这里需要用到 ftrace 中的另外一个 tracer，它就是function_graph。我们可以在刚才的 ftrace 的设置基础上，把 current_tracer设置为 function_graph，然后就能看到 do_mount()这个函数调用的时间了。    
# echo function_graph > current_tracer    
# umount /tmp/fs    
# mount -t tmpfs tmpfs /tmp/fs    
# cat trace    