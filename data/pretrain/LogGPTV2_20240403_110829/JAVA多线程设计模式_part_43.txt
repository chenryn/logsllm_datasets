另一个解答则如ListA7-6。在此程序中，线程从 service 方法立即回来。而且保
public ciass Service f
924 sn7.
.............done.
privale static synchronized vcia doservice()
public static void servicei) 1
图A7-3解答1：按键按3次的执行范例（3个线程的输出会混在--起）
System.out.println("done.");
for （int i = 0; i < 50; i++)
System.out.print ("service") ;
new Thread(）!
.start();
System.out.print(".");
public void run(） {
解答 2：即使连续按下按键多次、输出结果也不会混在一起(Service java)
lcatch (lnterruptedException el f
try f
 lhread.sleep(l00);
doservice();
---
## Page 425
想要执行 doService 的线程予以balk 起来（图A7-5）。
行doServicc 万法的只有第一个线程。在此，使用 Baiking模式（第4章），将同时
List A7-7会从 service方法马.上回来，而H在用户连续按键多次时，而日保证执
public class Serv:ce l
22v 1s7
private statie vcid doservicei) !
pubiic slazic synchrenizeα void service() l
private static volatile bosiean working = false:
εry f 
new Thread() {
System.cut .print("service");
working - true;
 finaily {
)-s:ari(};
working - false;
System.out.pr'rtln("done."):
for (int i-
ptbl:c yoid rin{） l
System.cut.println(" is balked.");
解答 3：连续按键多次时就予以 balk 的类(Service java)
retttnr
doservice(l;
catcn (IrlerxuplecException e) {
Thread.sleep(tou); 
-0; i 50; 1++){
练习问题的解答
---
## Page 426
Termination 模式（第10章）。
doService方法.
解苔 4:连续按键多决时就将执行中的处理予以取消
在这里，使用 interupt 取消处理。关于线程的结束，请一并参照 Two-Phase
List 7-8 会从 service 方法马上回来，而且用户连续按下按键多次时，会取消
public class Service {
List A7-8
private static void doservicei) [
public static synchronized void servicei)
private static Thread worker = null;
图A7-5解答3：连续按键3次的执行范例（第2次与第3次进行balk）
//如果有执行中的处理：就使用interrupt取消
try{
worker.starti);
worker = new Thread() {
System.out.print("service") ;
if (worker != null && worker.isAlive()} {
for (int i = 0; i < 50; i++) 
public void run(}{
worker = null;
try f
worker.interruptil;
catch (InterruptedException e)
Service 类(Service.java)
解答4：连续按下按键多次时就将执行中的处理予以取消的
..........service is balked.
service.....--service is balked.
System.out.print(".");
doservice{); 
worker.join();
..done
---
## Page 427
问题7-6的解答
pubiic class MiniServer {
将 List 7-9的 MiniServer类改成List A7-9。Main 类、Service 类可以不必修改。
impcrt java.io.IoException;
import
imporl java.net.Socket;
List A7-9
public void execute() throws Iorxception I
public MiniServer(int portnumber)
private final int portnumber;
图A7-6解答4：连续按按键3次的执行范例（第1次与第2次被取消了）
service......canceled.
 ServerSocket serverSocket = new ServerSocket (portnumber):
java.ret.ServerSocket;
try {
lcatch (lnterrupredexception e)f
while (true) {
System.out.printin("cancelled.");
MiniServer 类 (MiniServer.java)
System.out.println("done.");
System.out.println("Accepting...");
new Thread() {
System.out.print.ln("Connected to t + clientsocket);
final Socket clientSocket = serverSocket.acceptll:
Thread.sleep(l00):
public void run()
try  
l catch (IoException e) ↑
Service-service(clientsocket);
练习问题的解答
---
## Page 428
用 notify也是没问题的。
wait 的原线程进行 notifyAll.
程在收得obj 的锁定之后，将名称收成"Locked"，将在 thrcad（此与this 等值）比
方法回来的时候，就从 synchronized 跳出，是因为锁定被解开的缘故。我们可以知
米的线程会在 thread上·直 wait，肖到 thread 的名字在""之外。另·方面，新的线
类
道，在这样的情况下，我们只要进行如下[5]、[6]的处理即可，
问题7-7的解答
（ianer class）的方法run，我们在此将参数obj声明为 final，
在此我们使用notifyAll，不过在 thread上wait 的线程一定只有个，所以就算
此外，为了满足[7]，我们使用第3章的Guarded Suspcnsion 模式（Pattern）。原
List A7-10就是以如上[1]~[7]为基础为写成的程厅序、为了将参数obj传递给内部
[7]新的线程启动，取得obj 的锁定为止，原来的线程不能从 magic 方法回来。
[6]新的线程水远保持取得obj的锁定的状态。
[5]”magic 方法中，启动新的线程，让这个线程取得obj 的锁定，
但是，若想要取得锁定，即使单纯地使用 synchronized也是不行的。在从 magic
[4]magic 方法的I作中，就是取得参数obj。
目前为止都已经能了解的话，就会发现magic方法的1.作就是下面的[4]。
[2]Step3 或End不会被显示出来，因此线积不会从 enter 方法回来。
看看期待的执行结果（图7-9），就可以了解到：
我们将ListA7-10的思考过程依次解说。
解答如List A7-10（应该也有其他方泓）。
[1]因为显示了Step2，magic方法就不会丢出异常。
山果想说到这个阶段就可以了，那你很可能会忽略了下面的[7]。
carch (roException e)
 f:rally{
serversccket.close();
é.prirtstackTrace();
}.star.();
e.prints.ackTrace();
---
## Page 429
public class Blackhole {
List A7-11
也可以写成List A7-1l，这里也是一样，不用 notifyAll而用 notify也可以。
不会到这里来
publ:c class Biaekrole 1
L61 A7-10
public static void enteriobject obj) {
public
public static void enceriobject. obj) {
syrchronized (thread)
synchronized (obj) 1
i(uz dassm)ciauisd-ano uaisas
magic(obj);
System.cut.println("step 1");
完成的 Blackhole 类(之 2) (Blackhole java)
thread会取得obj的lock，
while (thread.getNamei).eguals(""))
chread.start（);//线程的启动
threaα.setName ("") ;
public veid run(） {
 System.out.println("step 3 (never reached here)"); //
 static 
完成的 Blackhole 类 (之 1) (Blackhole.java)
try 
synchronized (obj) l
catch (InterruptedException e) 1
thread,wait（1:/；等待新的线程取得 cbj 的lcck
while (lrue) (
syrchronizeo (this) {
void magic(f:nal object obj)
！无穷循环
this.notifyAll():
this.setName(":ocked")；//Guard 条件的变化
变成无穷循环的线程
//在此取得obj的lock
// inner class
‘’通知已经取得ob］的lock
练习问题的解答
---
## Page 430
问题8-1的解答
第8章
×（2）来白某个ClientThread的请求在被执行（execute）时，来自同一个
×（1）没有任何请求的时候，WorkerThread 的线程会一直 sleep 下去。
米自相同ClicntThread 的请求，范例程序中常常发生。
在一个 execute 结束之前，别的 WorderThread 的线程也可以执行（execute）
没有锁定时，WorkerThread的线程在Channel的实例上wait。
public static void magicif.nal Object obj)
ClientThread 的请求就不会被执行（execute）。
synchronized (thread}
Thread thread = rew Thread() 
synchronized (obj)
System.out.println("step 2"):
magic(obj);
System.out.println("Step 1"):
thread.starti);//线程的启动
public void run(）{
try i
thread.wait();//等待新的线程取得cbj的锁定
synchronized（obj）（//在这里取得obj的锁定
 synchronized (this)
”catch (InterruptedException e) {
trv {
this.join（）；//永远等待
this,notifyAll（)；//通知已经取得obj的锁定
---
## Page 431
问题8-2的解答
（Patterm）（第7章），执行范例请参考图A8-1。
public final class Channel {
List A8-1
如List A8-1。
O
0
（5）没有必要将execute 方法设成 synchronized。
）（4）会调用 takeRequest 方法的只有WorkcrThrcad。
要设为 synchronized：
范例程序中，对--个 Request 的交例进行 execute 是--个线杜，因此没有必
（3）会调用 putRequest方法的只有ClientThrcad，
pub-ic void startWorkers()
).starz();
rew
以下省略。
Thread-17
Threaα-16
Thread-l3 execules
Thread-12
Thread-11
Thrcad-iO cxccu-cs
Threai-9
lhrcad-g
Thread-7
Thread-6
Thread-5
Thread-4
Thread-?
Thread-2
Thread-
public veid rar() {
Th.read()(
每次都启动新的线程 Channel 类(Channel,java）
，在 putRequest 方法中启动线程。这就是 Thread-Per-Message 模式
request.exccute();
executes
saimoexa
exeoutes
execttes
eyecutes
execu'es
executes
executes
execlLes
execu!es
executes
xecutes
execrtes
executos
CIHI+C结束】
图A8-1执行范例
Request from Bobhy No.0
Request
Roquest
Reguest
Realcst.
Reguest
Request from
Requesl
Rcguest
Reguest
Reguest.
Request
Roguest
Request from
Request from
from
from
frcm
from
from
from
fro
from
fro
1l1o
1 Chris
 Alice
Bobby
Chris
Alice
Robby
Bobby
Bobby
Alice
Alice
Chris
Chirjs
Chris
N
No
No
Kc.0
No.5
No.4
No.3
No.3
NC
ON
ON
Nc
0.3
，1
.0
1
练习问题的解答
---
## Page 432
8
能识别其差异性，我们将线程的等待时间取消（List A8-3,List A8-4）。
A8-2）。通过比较请求的编号增加到多少，米比较两支程序的（Throughput）。为，
问题8-3的解答
可以知道。
我们改写范例的 Main 类，设置成在执行开始后约 30 秒就进行强制结束（List
pubiic class ClientThread extends Thread {
List A8-3.
public ciass Mair {
“Thread-数子”这样的线程名称是由java.lang.Thread 类白动获取。
Thread-0. Thread--1, Thread-2...会
.List A8-2
puble void rln(） (
public Client?hread (str-ng name,
 private final Channel chaniel;
 public static veiα main(scring[] args)
for （irt i- u; true; i++)l
this.channel - chasnel;
super(namel;
System.exiL(0);
tryf
Channel channel = new Channel(a); /; WorkerThread 的个数
rew CliertThread("chris",
new ClientThzead("gcbby",
now Cl.entThread("Alice",
channel.s-artworxers():
chenrel.putRequestfrequest};
Request request - new Request(getname(), i);
取消等待时间的 ClientThread 类(ChientThread.java)
Thread.sleep(30cc0):
修改成能强制终了的 Main 类( Main.java)
·直增加上去，因此每次执行新的线程时都
channe-)-start();