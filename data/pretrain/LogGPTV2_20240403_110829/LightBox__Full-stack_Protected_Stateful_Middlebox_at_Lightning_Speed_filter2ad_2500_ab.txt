⊂ REX (regular expression matching) ⊂ GN (generic functions).
- Stateful: whether generic (cid:131)ow-level stateful processing is supported.
- Meta: packet size, count and timestamp.
- HDR: L2-L4 headers, e.g., ip address, port number, and TCP/IP (cid:131)ags.
- P/L: L4 payload, including all application content.
- Rule: middlebox processing rules, e.g., a(cid:138)acking signatures.
- State: (cid:131)ow-level states, e.g., connection status, statistics and stream bu(cid:130)ers.
- N/A: the feature is not considered by design.
- N/S: the feature may be potentially supported, but not explicitly described.
∗ : Embarks considers an ad hoc web proxy, but not generic stateful processing.
∗ : SafeBrick considers a simple stateful (cid:128)rewall only.
states range from a few hundreds of bytes [47] to multiple kilo-
bytes [45], and they need to stay tracked throughout the lifetime of
(cid:131)ows or some expiration period. Moreover, it is not uncommon for
production-level middleboxes to handle hundreds of thousands (or
even more) of (cid:131)ows concurrently in real networks [20, 24, 44, 45].
(cid:140)e resulting gigabytes of runtime memory footprint are not easily
manageable by any secure enclaves. Meanwhile, modern middle-
boxes feature packet processing delay within a few tens of microsec-
onds [44, 54, 64] — a performance baseline that should be respected
even if strong security guarantees are favored.
Characterization of prior arts. We summarize existing solu-
tions and compile their functionality and security features in Ta-
ble 1. We de(cid:128)ne “metadata” as the L2-L4 headers, packet size, count
and timestamps. For be(cid:138)er characterization, we separately label
the headers as “HDR”, and the la(cid:138)er three as “Meta”. Some solu-
tions [61, 77, 78] do not target the outsourcing scenario and have
di(cid:130)erent security goals, but we include them anyway for complete-
ness.
Regarding security, none of the existing systems considers full-
stack protection. (cid:140)e closest to us are Embark [51], which applies
deterministic encryption to each packet, and SafeBricks [66], which
uses L2 secure tunneling to forward packets to the enclave. Both
of them encrypt packets individually and thus may be vulnerable
to tra(cid:129)c analysis a(cid:138)acks exploiting packet size and count.
Regarding stateful processing, SGX-BOX [35] allows inspec-
tion on tra(cid:129)c streams that are reassembled outside enclave, and
SafeBricks implements a simple stateful (cid:128)rewall for testing. But
Figure 1: Large volumes of tra(cid:129)c are redirected to service
providers for middlebox processing, creating a unique van-
tage point for adversaries to learn sensitive information.
results, which we hope will lead the secure middlebox-as-a-service
to the practical realm and stimulate its massive adoption.
1.1 Motivation
Necessity for metadata protection. Most existing designs only
consider the protection of application payloads while redirecting
tra(cid:129)c to remote middleboxes. Few of them protect tra(cid:129)c metadata,
including low-level packet headers, packet size, count and timestamps.
Such metadata is information-rich and highly exploitable. (cid:140)e
importance of hiding communication metadata (e.g., IP addresses)
has been reiterated in recent years [88, 89].
In the o(cid:137)en cited
example of Snowden Leaks, it is frustratedly put as “if you have
enough metadata, you don’t really need content” [70].
By just exploiting the seemingly innocent packet size, count
and timing, a variety of sophisticated tra(cid:129)c analysis a(cid:138)acks have
been demonstrated: they can extract supposedly encrypted ap-
plication contents such as website objects [91], VoIP conversa-
tions [96], streaming videos [68], instant messages [19], and user
activities [16], by analyzing the distributions of metadata.
Such metadata may be obtained by an adversary who can sni(cid:130)
tra(cid:129)c anywhere on the transmission path. In fact, aggregating
tremendous user tra(cid:129)c to the middlebox service provider creates a
unique vantage point for tra(cid:129)c analysis, because of the much en-
larged datasets for correlating information and statistical inference.
We should thus protect not only application payloads but all afore-
mentioned tra(cid:129)c metadata — what we dub full-stack protection.
Necessity for stateful middlebox.
In contrast to L2 switches
and L3 routers that process each packet independently, advanced
middleboxes need to track various (cid:131)ow-level states to implement
complex functionality [45]. For example, intrusion detection sys-
tems typically keep per-(cid:131)ow stream bu(cid:130)ers to eradicate cross-
packet a(cid:138)ack pa(cid:138)erns [44, 81]; proxies and load balancers maintain
front/back-end connection states and packet pools to ensure end-to-
end connectivity [65, 67]. (cid:140)us, supporting stateful processing is an
essential functionality requirement in realistic middlebox products.
However, even with the power of trusted hardware, it is techni-
cally challenging to develop a secure yet e(cid:129)cient solution due to the
unique features of stateful middleboxes. In particular, the per-(cid:131)ow
Logical connectionEnterprise NetworkReal traffic flownone of them considers the high (cid:131)ow concurrency exhibited in real
networks and the challenges therein. Embark supports an ad hoc
web proxy that caches static HTTP contents, but it cannot support
generic stateful functions with arbitrary operations over (cid:131)ow state.
We defer more discussions on related work to Section 7.
Note that we do recognize the meaningful explorations and
contributions made by these prior arts with di(cid:130)erent focuses. We
believe that our e(cid:130)orts will make it more convincing and con(cid:128)dent
to deploy and operate secure middleboxes in practical se(cid:138)ings.
1.2 Our Contribution
We design and build LightBox, the (cid:128)rst SGX-enabled secure mid-
dlebox system that can drive o(cid:130)-site middleboxes at near-native
speed with stateful processing and full-stack protection. By sys-
tematically tackling many well-known limitations of SGX, from the
lack of system services including network I/O, trusted timing and
synchronization, to the unacceptable overhead of secure memory
oversubscription, we have provided a(cid:129)rmative and satisfactory
answers to the following two major research questions.
1. How to securely forward raw packets to a remote enclave, without
leaking their low-level metadata, while still making them conveniently
accessible at line rate?
In pursuit of this goal and in reminiscent of the classic kernel-
driven tun/tap tunnel devices, we have developed a virtual net-
work interface (VIF) called etap ((cid:128)enclave tap(cid:128)). It allows access to
packets without leaving the enclave, as if from the source network
where the packets originate. For full packet protection, our design
guarantees that the raw packets with L2-L4 headers are entirely
delivered via a secure tunnel (e.g., TLS) terminated at a trusted
enterprise gateway and the enclave. To frustrate tra(cid:129)c analysis,
we pack the raw packets in a back-to-back manner and transmit
them as continuous application payloads. As a result, the packet
boundaries are obscured in the encrypted stream, so are the packet
size and count. As a by-product of etap, we create a trusted clock
for high-resolution and reliable timing inside the enclave.
We show how to progressively optimize the performance of etap
with lock-free rings, cache line protection, and disciplined batching,
so that it can catch up with the rate of physical network interfaces.
We also endeavor to improve the usability of etap, by further
porting three networking frameworks on top of it: 1) an adaption
layer of libpcap [33], 2) a lightweight TCP stream reassembly
library [28], and 3) an advanced (cid:131)ow monitoring stack mOS [45].
(cid:140)ese system e(cid:130)orts allow us to port or develop middleboxes that
enjoy the security and performance bene(cid:128)ts of etap, with li(cid:138)le
code modi(cid:128)cation. For example, a developer can write a middlebox
in the mOS framework as usual, and then automatically turn it into
a LightBox instance even without the knowledge of SGX.
reduce the enclave footprint, we propose to maintain only a small
working set of states in the enclave, while keeping the vast remain-
der of them encrypted in untrusted memory, at the granularity of
(cid:131)ow. While this general idea may seem natural at (cid:128)rst sight, we
show that the performance bo(cid:138)leneck can only be surmounted
with carefully cra(cid:137)ed data structures and algorithms.
Speci(cid:128)cally, given the limited enclave resources, the data struc-
tures used to hold (cid:131)ow states must be very compact, and support
e(cid:129)cient lookup, relocation, swapping and deletion of data items.
To meet these requirements, we design a set of interlinked data
structures. (cid:140)ey separate the indexing and storage of (cid:131)ow states,
enabling (cid:131)exible lookup strategy. (cid:140)ey also allow fast relocation of
states inside enclave and swapping of states across enclave bound-
ary, with very cheap pointer operations. Furthermore, a(cid:137)er identi-
fying the lookup procedure as the main roadblock on the critical
path, we opt to the space-e(cid:129)cient cuckoo hashing for indexing
(cid:131)ow states, and introduce a cache-friendly lookup algorithm to
counteract the cache ine(cid:129)ciency of hashing-based scheme.
E(cid:129)ciency aside, our design ensures the con(cid:128)dentiality, integrity,
and freshness of the states throughout the management procedures.
Experiment. Extensive evaluations show that with our optimized
designs, etap allows in-enclave packet I/O at 10Gpbs rate with
full-stack protection. We instantiate LightBox for three stateful
middleboxes, which are arguably more complicated than any of
those tested by prior arts, and evaluate each of them against the
native version and a strawman variant solely relying on EPC pag-
ing. LightBox incurs negligible packet delay in(cid:131)ation to the native
processing for the two middleboxes with 0.5KB and 5.5KB per-
(cid:131)ow state, and moderate delay to the most complicated middlebox
with 11.4KB per-(cid:131)ow state. It maintains constant performance and
achieves multi-factor speedup over the strawman when tracking
100, 000s of (cid:131)ows. (cid:140)e performance gap is widened as more (cid:131)ows
are tracked and more severe paging penalty is imposed on the la(cid:138)er.
Last but not the least, LightBox can achieve native speed on a real
CAIDA trace for two of the three middleboxes under testing, and
2× speedup over the strawman for the other unoptimized one.
Lessons learned.
From our experience in designing, building
and evaluating LightBox, we have indeed challenged the common
perception that one can run applications in secure enclaves, SGX
in particular, at native speed almost without technical e(cid:130)orts but
mundane code porting. Our results unveil that for realistic work-
loads that are security-critical and performance-sensitive, domain-
speci(cid:128)c design and optimization become a must to bypass the intri-
cacies of secure enclaves. We hope to raise practitioners’ awareness
that, as a particular lesson, the proper use of memory-e(cid:129)cient
and cache-friendly data structures and algorithms will make a big
di(cid:130)erence to the performance of those enclave applications.
2. How to enable the resource-demanding stateful middlebox pro-
cessing within the highly constrained enclave space, without incurring
unreasonably high overhead?
As mentioned before, stateful middleboxes in realistic se(cid:138)ings
have a large memory demand, which is at odds with the limited
enclave memory supply. (cid:140)e naive paging approach for oversub-
scribing enclave memory incurs substantial overhead [2], which is
intolerable to middleboxes as con(cid:128)rmed by our experiments. To
2 OVERVIEW
2.1 Service Model
In a realistic service model, the enterprise redirects its tra(cid:129)c to the
o(cid:130)-site middlebox hosted by the service provider for processing [41].
We assume that the middlebox code is not necessarily private and
may be known to the service provider. (cid:140)is matches practical use
cases where the source code is free to use, but only bespoke rule
Cache (EPC). It has a conservative limit of 128MB in current prod-
uct lines. Excessive memory usage in the enclave will trigger EPC
paging, which can induce prohibitive performance penalties [2].
Besides, the cost of cache miss while accessing EPC is higher than
normal, due to the cryptographic operations involved during data
transferring between CPU cache and EPC. While such overhead
may be negligible to certain applications, it becomes crucial to
middleboxes with stringent performance requirements.
2.3 LightBox Overview
LightBox components. LightBox leverages an SGX enclave to
shield the o(cid:130)-site middlebox. As shown in Fig. 2, a LightBox in-
stance comprises two modules in addition to the middlebox itself:
a virtual network interface etap and a state management module.
(cid:140)e former is semantically equivalent to a physical network inter-
face card (NIC), allowing packets I/O at line rate within the enclave.
(cid:140)e la(cid:138)er provides automatic and e(cid:129)cient memory management
of the large amount of (cid:131)ow states tracked by the middlebox.
(cid:140)e etap device is peered with one etap-cli program installed
at the enterprise gateway. We establish a persistent secure channel
between the two to tunnel the raw tra(cid:129)c, which is transparently
encoded/decoded and encrypted/decrypted by etap. (cid:140)e middlebox
and upper networking layers can directly access raw packets via
etap without leaving the enclave.
(cid:140)e state management module maintains a small (cid:131)ow cache in
the enclave, a large encrypted (cid:131)ow store in the untrusted memory,
and an e(cid:129)cient lookup data structure in the enclave. (cid:140)e middlebox
can lookup or remove state entries by providing (cid:131)ow identi(cid:128)ers. In
case a state is not present in the cache but in the store, the module
will automatically swap it with a cached entry.
Secure service launching. (cid:140)e enterprise needs to a(cid:138)est the
integrity of the remotely deployed LightBox instance before launch-
ing the service. (cid:140)is is realized by the standard SGX a(cid:138)estation
utility [1]. Speci(cid:128)cally, the enterprise administrator can request
a security measurement of the enclave signed by the CPU, and
interact with Intel’s IAS API for veri(cid:128)cation. During a(cid:138)estation, a
secure channel is established to pass con(cid:128)gurations, e.g., middlebox
processing rules, etap ring size and (cid:131)ow cache size, to the LightBox
instance. Due to the space limit, we skip the verbose description
here. We remark that for the considered service scenario where
only two parties (the enterprise and the server provider) are in-
volved, a basic a(cid:138)estation protocol between the two and Intel IAS
is su(cid:129)cient.
Figure 2: Overview of LightBox components.
sets [82] are proprietary. We also consider a single middlebox.
(cid:140)ese simpli(cid:128)cations allow us to concentrate on presenting the
core designs of LightBox. Nonetheless, we stress that LightBox can
be readily adapted to support service function chaining [83] and
disjoint service providers [66], which mostly involves only changes
to the service launching phase. We postpone the discussions of
other service models to Appendix B.
Tra(cid:129)c forwarding.
For ease of exposition, we consider the
bounce model with one gateway [51, 76]: both inbound and out-
bound tra(cid:129)c is redirected from an enterprise gateway to the remote
middlebox for processing and then bounced back. (cid:140)e other direct
model, where tra(cid:129)c is routed from the source network to the re-
mote middlebox and then directly to the next trusted hop, i.e., the
gateway in the destination network [66], can be trivially supported
by installing one etap-cli (see Section 2.3) on each gateway.
(cid:140)e communication endpoints themselves (e.g., a client in the
enterprise network and an external server) may transmit data via
a secure connection. To enable such already encrypted tra(cid:129)c to
be processed by the middlebox, the gateway needs to intercept the
secure connection and decrypt the tra(cid:129)c before redirection. We
follow the common practice [35, 61, 66] to handle this issue. In par-
ticular, the gateway will receive the session keys from the endpoints
to perform the interception, unbeknownst to the middlebox.
A dedicated high-speed connection will be typically established
for tra(cid:129)c redirection [76]. Such services have been widely pro-
visioned nowadays, for example AWS Direct Connect [5], Azure