 Planning time: 0.140 ms  
 Execution time: 734.226 ms  
(27 rows)  
```  
### 内核层面优化(空间GRID分区表的支持)  
让PostgreSQL支持空间GRID分区(实际上你现在就可以使用继承来实现，触发器中使用grid+mod判断应该插入哪个分区)。  
参考如下  
[《蜂巢的艺术与技术价值 - PostgreSQL PostGIS's hex-grid》](../201701/20170124_01.md)   
![pic](../201701/20170124_01_pic_007.png)  
对于时间+空间维度的数据透视，可以创建空间grid分区 + 时间分区 二级分区。  
检索时，通过分区表直接过滤到目标子分区表。再通过btree索引，递归调用，筛选出每个店铺在候选区间的峰值数据，最后加上少量CPU运算，得到TOP店铺。  
使用这种方法，时间+空间的四维数据透视，查询效率可以进入100毫秒以内。  
### 业务优化方法  
1\. 对于例子1和2，由于业务层面取的都是最近的数据，历史数据并不关心。除了使用递归优化，还有2种方法。  
方法1，不记录历史，将插入换成插入或更新。使用这种方法，查询sort_test得到的始终是最新的值。  
```  
create unlogged table sort_test(  
  s_id int primary key,            -- 传感器ID  
  val  numeric(10,2),              -- 传感器值  
  crt_time timestamp default clock_timestamp()    -- 上报时间  
);    
insert into sort_test(s_id,val,crt_time) values (?,?,?) on conflict (s_id) do update set val=excluded.val,crt_time=excluded.crt_time;  
```  
方法2，记录历史，同时记录最新状态。使用触发器完成这项工作。  
分解：  
数据插入时，自动更新最后一条记录。(写入量和更新量同等)   
例子  
创建一个状态表记录最新状态，创建一个触发器，写入历史数据时，自动更新最新状态表。  
```  
create unlogged table hist(  
  id serial8 primary key,          -- 自增主键  
  s_id int,                        -- 传感器ID  
  val  numeric(10,2),              -- 传感器值  
  crt_time timestamp default clock_timestamp()    -- 上报时间  
);    
create unlogged table hist_stat(  
  s_id int primary key,            -- 传感器ID  
  val  numeric(10,2),              -- 传感器值  
  crt_time timestamp default clock_timestamp()    -- 上报时间  
);    
create or replace function tg() returns trigger as $$  
declare  
begin  
  insert into hist_stat (s_id,val,crt_time) values (NEW.s_id,NEW.val,NEW.crt_time) on conflict (s_id) do update set val=excluded.val,crt_time=excluded.crt_time;  
  return null;  
end;  
$$ language plpgsql strict;  
create trigger tg after insert on hist for each row execute procedure tg();  
```  
插入数据，自动更新到最新状态  
```  
postgres=# insert into hist(s_id,val) values(1,1);  
INSERT 0 1  
postgres=# insert into hist(s_id,val) values(1,1);  
INSERT 0 1  
postgres=# insert into hist(s_id,val) values(1,1);  
INSERT 0 1  
postgres=# insert into hist(s_id,val) values(1,1);  
INSERT 0 1  
postgres=# insert into hist(s_id,val) values(1,1);  
INSERT 0 1  
postgres=# select * from hist;  
 id | s_id | val  |          crt_time            
----+------+------+----------------------------  
  3 |    1 | 1.00 | 2017-04-13 22:23:25.165286  
  4 |    1 | 1.00 | 2017-04-13 22:23:26.23929  
  5 |    1 | 1.00 | 2017-04-13 22:23:26.646152  
  6 |    1 | 1.00 | 2017-04-13 22:23:26.991189  
  7 |    1 | 1.00 | 2017-04-13 22:23:27.376265  
(5 rows)  
postgres=# select * from hist_stat ;  
 s_id | val  |          crt_time            
------+------+----------------------------  
    1 | 1.00 | 2017-04-13 22:23:27.376265  
(1 row)  
```  
查询时，直接查询最新状态表，连递归调用都省了。  
```  
postgres=# select * from hist_stat ;  
 s_id | val  |          crt_time            
------+------+----------------------------  
    1 | 1.00 | 2017-04-13 22:23:27.376265  
(1 row)  
```  
2\. 对于例子3，由于分析的是历史数据，而且分析维度是时间和空间两个维度。  
因此可以将其中一个维度作为分区，将数据打散，打散之后，对分区建立另一个维度的索引。  
这样的话，在查询时，可以将数据尽量的收敛到更小的范围。  
空间和时间都支持分区。（空间分区建议使用网格化的表述，便于查找和定位分区）。    
## 参考  
[《流计算风云再起 - PostgreSQL携PipelineDB力挺IoT》](../201612/20161220_01.md)    
[《时序数据库有哪些特点? TimescaleDB时序数据库介绍》](../201704/20170409_05.md)    
[《ApsaraDB的左右互搏(PgSQL+HybridDB+OSS) - 解决OLTP+OLAP混合需求》](../201701/20170101_02.md)    
[《时序数据合并场景加速分析和实现 - 复合索引，窗口分组查询加速，变态递归加速》](../201611/20161128_01.md)    
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)  
[《蜂巢的艺术与技术价值 - PostgreSQL PostGIS's hex-grid》](../201701/20170124_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")