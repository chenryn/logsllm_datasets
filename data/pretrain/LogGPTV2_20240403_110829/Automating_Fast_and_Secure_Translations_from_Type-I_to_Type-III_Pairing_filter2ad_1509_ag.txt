c := ZR
z := ZR
END :: types
BEGIN :: func:setup
input := None
a := random(ZR)
b := random(ZR)
c := random(ZR)
z := random(ZR)
12A careful reader may observe that the exponentiation time for GT in SS1536 appears surprisingly small. We
reassure the reader that this is not a typo. With the SS1536, GT = Fp
2 is a lower extension of a larger ﬁeld, whereas
with BN256, GT = Fp
12, which is a higher extension of a smaller ﬁeld. Thus, even though the elliptic curve points
are larger with SS1536, the ﬁeld multiplication operation in GT is quite eﬃcient. This does not apply to G1, G2 as
those are doing scalar multiplication.
23
g := random(G1)
assumpKey := list{g, a, b, c, z}
output := assumpKey
END :: func:setup
BEGIN :: func:assump
input := assumpKey
assumpKey := expand{g, a, b, c, z}
A := g ^ a
B := g ^ b
C := g ^ c
coinflip := random(bin)
BEGIN :: if
if { coinflip == 0 }
Z := e(g, g) ^ (a * b * c)
else
Z := e(g, g) ^ z
END :: if
assumpVar := list{g, A, B, C, Z}
output := assumpVar
END :: func:assump
Then, the full SDL transcription for the symmetric BB HIBE scheme [BB04b]:
name := BB04HIBE
setting := symmetric
BEGIN :: types
M := GT
ID1 := ZR
ID2 := ZR
END :: types
BEGIN :: func:setup
input := None
g := random(G1)
alpha := random(ZR)
g1 := g ^ alpha
h1 := random(G1)
h2 := random(G1)
24
g2 := random(G1)
g2alpha := g2 ^ alpha
msk := list{g2alpha}
pk := list{g, g1, g2, h1, h2}
output := list{msk, pk}
END :: func:setup
BEGIN :: func:keygen
input := list{pk, msk, ID1, ID2}
pk := expand{g, g1, g2, h1, h2}
msk := expand{g2alpha}
r1 := random(ZR)
r2 := random(ZR)
d1 := g2alpha * (((g1^ID1)*h1)^r1) * (((g1^ID2)*h2)^r2)
d2 := g ^ r1
d3 := g ^ r2
sk := list{d1, d2, d3}
output := sk
END :: func:keygen
BEGIN :: func:encrypt
input := list{pk, M, ID1, ID2}
pk := expand{g, g1, g2, h1, h2}
s := random(ZR)
C1 := (e(g1,g2)^s) * M
C2 := g ^ s
C3 := ((g1^ID1) * h1)^s
C4 := ((g1^ID2) * h2)^s
ct := list{C1, C2, C3, C4}
output := ct
END :: func:encrypt
BEGIN :: func:decrypt
input := list{pk, sk, ct}
pk := expand{g, g1, g2, h1, h2}
ct := expand{C1, C2, C3, C4}
sk := expand{d1, d2, d3}
25
M := C1 * ((e(C3,d2) * e(C4,d3))/(e(C2,d1)))
output := M
END :: func:decrypt
Finally, the reduction from [BB04b] for the BB HIBE scheme:
name := BB04
setting := symmetric
l := 2
k := 2
BEGIN :: types
l := Int
j := Int
k := Int
M := list{GT}
ID := list{ZR}
IDstar := list{ZR}
alphai := list{ZR}
h := list{G1}
r := list{ZR}
di := list{G1}
Ci := list{G1}
msk := G1
END :: types
BEGIN :: func:setup
input := list{IDstar}
a := random(ZR)
b := random(ZR)
c := random(ZR)
z := random(ZR)
g := random(G1)
A := g^a
B := g^b
C := g^c
coinflip := random(bin)
BEGIN :: if
if { coinflip == 0 }
Z := e(g, g)^(a * b * c)
else
Z := e(g, g)^z
26
END :: if
g1 := A
g2 := B
g3 := C
BEGIN :: for
for{i := 1, l}
alphai#i := random(ZR)
h#i := (g1^-IDstar#i) * (g^alphai#i)
END :: for
pk := list{g, g1, g2, h}
assumpVar := list{A, B, C, Z}
reductionParams := list{g3, alphai, IDstar}
output := list{msk, pk, reductionParams, assumpVar}
END :: func:setup
BEGIN :: func:queries
input := list{j, pk, ID, reductionParams}
pk := expand{g, g1, g2, h}
reductionParams := expand{g3, alphai, IDstar}
BEGIN :: for
for{i := 1, j}
r#i := random(ZR)
END :: for
dotProd1 := init(G1)
BEGIN :: for
for{v := 1, j}
dotProd1 := dotProd1 * (((g1^(ID#v - IDstar#v)) * \
(g^alphai#v))^r#v)
END :: for
d1 := (g2^((-alphai#j) / (ID#j - IDstar#j))) * dotProd1
BEGIN :: for
for{i := 1, j}
BEGIN :: if
if {i == j }
di#j := (g2^(-1/(ID#j - IDstar#j))) * (g^r#j)
else
di#i := g^r#i
27
END :: if
END :: for
sk := list{d1, di}
output := sk
END :: func:queries
BEGIN :: func:challenge
input := list{M, ID, reductionParams, assumpVar}
pk := expand{g, g1, g2, h}
assumpVar := expand{A, B, C, Z}
reductionParams := expand{g3, alphai, IDstar}
b := random(bin)
C1 := M#b * Z
C2 := g3
BEGIN :: for
for{i := 1, k}
Ci#k := g3 ^ alphai#i
END :: for
ct := list{C1, C2, Ci}
output := ct
END :: func:challenge
We provide the conﬁguration ﬁle that embeds the metadata required by AutoGroup+ to perform
the translation:
schemeType = "PKENC"
assumption = ["DBDH"]
reduction = ["reductionBB04HIBE"]
short = "public-keys"
masterPubVars = ["pk"]
masterSecVars = ["msk"]
keygenPubVar = "pk"
keygenSecVar = "sk"
ciphertextVar = "ct"
reducCiphertextVar = "ct"
reducQueriesSecVar = "d"
28
B.2 Translated Scheme and Assumption SDL Descriptions
We now show the SDL outputs of AutoGroup+. The ﬁrst is the SDL output of the co-DBDH
assumption:
name := DBDH
setting := asymmetric
BEGIN :: types
a := ZR
b := ZR
c := ZR
z := ZR
END :: types
BEGIN :: func:setup
input := None
a := random(ZR)
b := random(ZR)
c := random(ZR)
z := random(ZR)
gG1 := random(G1)
gG2 := random(G2)
assumpKey := list{gG1, gG2, a, b, c, z}
output := assumpKey
END :: func:setup
BEGIN :: func:assump
input := assumpKey
assumpKey := expand{gG1, gG2, a, b, c, z}
A := (gG1^a)
BG1 := (gG1^b)
BG2 := (gG2^b)
CG1 := (gG1^c)
CG2 := (gG2^c)
coinflip := random(bin)
BEGIN :: if
if {coinflip == 0}
Z := (e(gG1,gG2)^((a * b) * c))
else
Z := (e(gG1,gG2)^z)
END :: if
assumpVar := list{gG1, gG2, A, BG1, BG2, CG1, CG2, Z}
output := assumpVar
END :: func:assump
29
The second SDL output is the asymmetric BB HIBE scheme [BB04b] that optimally minimizes
the public key parameters:
name := BB04HIBE
setting := asymmetric
BEGIN :: types
M := GT
ID1 := ZR
ID2 := ZR
END :: types
BEGIN :: func:setup
input := None
gG1 := random(G1)
gG2 := random(G2)
alpha := random(ZR)
g1 := (gG1^alpha)
h1 := random(ZR)
h1G1 := (gG1^h1)
h2 := random(ZR)
h2G1 := (gG1^h2)
g2 := random(ZR)
g2G1 := (gG1^g2)
g2G2 := (gG2^g2)
g2alpha := (g2G1^alpha)
msk := list{g2alpha}
pk := list{gG1, gG2, g1, g2G1, g2G2, h1G1, h2G1}
output := list{msk, pk}
END :: func:setup
BEGIN :: func:keygen
input := list{pk, msk, ID1, ID2}
pk := expand{gG1, gG2, g1, g2G1, g2G2, h1G1, h2G1}
msk := expand{g2alpha}
r1 := random(ZR)
r2 := random(ZR)
d1 := ((g2alpha * (((g1^ID1) * h1G1)^r1)) * (((g1^ID2) * h2G1)^r2))
d2 := (gG2^r1)
d3 := (gG2^r2)
sk := list{d1, d2, d3}
output := sk
30
END :: func:keygen
BEGIN :: func:encrypt
input := list{pk, M, ID1, ID2}
pk := expand{gG1, gG2, g1, g2G1, g2G2, h1G1, h2G1}
s := random(ZR)
C1 := ((e(g1,g2G2)^s) * M)
C2 := (gG2^s)
C3 := (((g1^ID1) * h1G1)^s)
C4 := (((g1^ID2) * h2G1)^s)
ct := list{C1, C2, C3, C4}
output := ct
END :: func:encrypt
BEGIN :: func:decrypt
input := list{pk, sk, ct}
pk := expand{gG1, gG2, g1, g2G1, g2G2, h1G1, h2G1}
ct := expand{C1, C2, C3, C4}
sk := expand{d1, d2, d3}
M := (C1*((e(C3,d2) * e(C4,d3))/e(d1,C2)))
output := M
END :: func:decrypt
C Camenisch-Lysyanskaya Signature Scheme
Figure 11: Merged dependency graph that includes the Setup, KeyGen, Sign and Verify algorithms
in CL signatures. Recall that nodes P 1 through P 5 represent unique pairing identiﬁers, with a 0
index representing a left-hand pairing element and a 1 the right.
31
(a) Showing G1 elements in the scheme
(b) Showing G2 elements in the scheme
Figure 12: The dependency graphs for the asymmetric translation of the CL signature scheme (with
PK optimization). This graph was generated by AutoGroup+.
32