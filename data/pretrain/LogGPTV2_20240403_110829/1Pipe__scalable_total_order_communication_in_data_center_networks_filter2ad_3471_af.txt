### Overview of Existing Approaches and Their Limitations

One approach to achieving coordinated communication involves the use of logically centralized coordination mechanisms, such as centralized sequencers [18, 51, 54] or a token passed among senders or receivers [36, 60, 78, 86]. However, this method faces significant scalability challenges. Another approach buffers messages at the receivers and constructs a causality graph locally [63, 84], or it merges streams deterministically or achieves agreement among receivers [17, 23, 53, 82]. This approach introduces additional delays and consumes more network bandwidth. A third approach assumes a synchronous network [64], but this assumption is often violated by lossy links and high clock skew, leading to correctness issues. In 1Pipe, these components can slow down the system, but correctness is maintained. To mitigate this, 1Pipe detects problematic components, and affected hosts can use healthy nodes as proxies, where timestamps are assigned at the proxy.

A fourth approach, tree-based algorithms, addresses the trade-off between efficiency and scalability [87]. These algorithms merge multiple ordered streams into a single ordered stream at each non-leaf node, a process known as deterministic merge [7, 46]. This method is similar to 1Pipe in its use of timestamps and ordering, and it has been applied in various fields, including network switches [49], multi-core processors [55], and sensor networks [22]. However, implementing deterministic merge in commodity network switches is impractical due to their limited per-port buffer size [14] and inability to reorder packets based on per-packet metadata [52, 92].

### Network and System Co-Design

Recent trends in distributed systems involve co-designing with programmable network switches. For example, Mostly Ordered Multicast [85] and NO-Paxos [68] use a switch as a centralized sequencer to achieve totally ordered broadcast. Unlike these approaches, 1Pipe provides a scattering primitive and a scalable implementation. Eris [51] proposes in-network concurrency control using a switch as a centralized sequencer. Other systems like NetChain [52], NetLock [99], NetPaxos [30], and DAIET [88] offload important distributed middlewares to programmable switches. Omnisequencing [74] leverages data center network (DCN) topology to provide causal (but not total) order message delivery.

### Conclusion

We propose 1Pipe, a causal and total order communication abstraction that delivers messages in the sender's clock time order with restricted failure atomicity. 1Pipe achieves scalability and efficiency by utilizing programmable data center networks to separate the aggregation of order information from the forwarding of data packets. 1Pipe can simplify and accelerate many applications, and we expect future work to explore additional use cases. One limitation of 1Pipe is that it does not consider Byzantine failures, and we leave the security aspects for future research.

### Acknowledgements

We thank Cheng Li, Tianyi Cui, and Zhenyuan Ruan for their technical discussions. We also thank our shepherd, Nathan Bronson, and other anonymous reviewers for their valuable feedback and comments.

### References

[References listed here, formatted according to the original document.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.