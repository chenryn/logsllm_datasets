此问题参考了附录E的“Lea”。
something.method(long)与 Thread.sleep(long)相等，也就是说，暂停的时间等于
public class Main f
List A5-10
doRead方法有时会由数个ReaderThread的线程同时执行。
pubiic static void main(String[l args) {
System.out.println("END");
System.out.println("BEGIN");
)catch (interruptedException e)[
try { 
 Something.method(3000);
试着动动看(Mainjava)
END
BEGIN
图A5-5执行结采
约三秒后显示
马上显示
---
## Page 407
类的话，只要大约两秒执行就可以结束，但是使用sychronized 却要大约9～10
A6-1 这样。ReaderThread 的线程在执行 20次read 的调用的前后，取得现在的时间。
问题6-3的解答
conflict 两方。
正在撰写的状态。前者是 read-write conflict，后者是 write write conflict 与 read-write
厅。因此，就会像图A6-1这样，还在撰写文字时就读取，或是读取到数个WriterThread
问题6-2的解答
执行范例各自如图A6-2、图A6-3所示。我们可以发现，使用ReadWriteLock
为了比较List 6-2与List 6-7中所花的时间,我们将 ReaderThread类改成如 List
Data 参与者的安全性已然失去。
ReaderThread的线程也好，WriterThread 的线程也好，完全都不会进行共亨互
○（4）某个线程正在执行 doRead方法时，writingWriters 字段的值·定是0。
○（3）某个线程正在执行 doWrite 方法时，readingReaders 字段的值一定是0。
[以下省略。按 CTRL+C 结束)
Thread-5 reads hhhhFFgg99
Thread-4 reads hhhhFFg999
Thread-3 reads hhhhFFg999
Thread-0 reads hhhhFFgggg
（中略）
Thread-l reads aaaa*****
Thread-0 reads aaaax****
Thread-5 reads aaaａ*
Thread-4 reads aaaa*****
Thread-3 reads aaaa*****
Thread-0 reads aaaa*****
Thread-2 reads aaaa*****
conflict)
（前略）
在撰写时，不会有线程同时正在进行读取。
当在读取处理时，不会有线程同时正在进行撰写。
图A6-1执行范例
一在撰写F的时候，读取撰写h的状态
←读取正在写入a的状态（read-write
(write-write 与 read-write conflict)
练习问题的解答
393
---
## Page 408
394
。但是，这些值会受到在 doRead 或 doWrite 所花的时间，
这点请注意，
" reads " + String.valueOf(readbuf));
public class ReaderThread extends Thread ↑
"： time 
List A6-1
public void run() {
public ReaderThread(Data data)
private Final Data data;
this.data = data;
Icatch (lntetruptedException e)
System.out.printin(Thread.currentThread() .getName()
long time = System.currentTimeMillis() - begin;
for (int i
long begin
（接CTRL+C结束）
Thread-4: time
Thread-2: tir
Thread-2 reads
Thread-4 reads
Thread-0: time
Thread-0 reads
Thread-l: time
Thread-l reads
Thread-2
Thread-Q reads aaaaaaaaaa
经修改以进行计时的 ReaderThread 类(ReaderThread.java)
Thread-5: time
Thread-5 reads
Thread-3: time
rh.read-3
Thread-4
（前略】
"+ time}
图A6-2执行范例（使用 ReadWriteLock类时）
Systen-out-println(Thread.currentThread() .getName ()  +
charii
reads aaaaaaaaai
reads
readbuf = data.reaa();
= System.currentTimeMillis();
me
= 2063
aaaaaaaaaa
= 2063
aaaaaaaaaa
aaaaａaａaaa
= 2063
ａaaaaaaaaｅ
 2053
aaａaａaａaaa
aaaaaaaaaa
= 2C43
2053
20; i++){
+
←在中途终止
以及 ReaderThread
---
## Page 409
范例程序当中了，
类会成为 Data 类的内部类（inner class）。 在 ListA6-4 中已将 Default Policy 加入
未被设置，则默认的 policy 如 DefaultReadWriteStrategy 类、DefaultGuardStategy
各自policy的ConcreteStrategy参与者，在执行时将处理交给对方处理。如果 policy
policy 则以 GuardStrategy 接口表示。之后，在建立 Data 类的实例时，设置表示
Pattrn 以提高重复使用性（参照附录 E[Lea Web]的 WriterPreferenceReadWriteLock 类)。
E[GoF][Yuki01]]。
问题6-4的解答
关于读写处理的 policy我们以 ReadWriteStrategy 表示，Guard 条件相关的
以下只是方法之一。例如，在 Doug Lea 的util.concurrent 包中，使用 Template Method
为了解决（3），我们将ReadWriteLock类当成Data 类的内部类。
修改后的程序如 List A6-2~List A6-7。图A6-4是类的图示。
图A6-3执行范例（使用sychronized 而不使用ReadWriteLock 类时）
【按CTRL+C结束）
Thread-5: time = l0l84
Thread-5 reads DDDDDDDDD1
Thread-4: time = 10134
Thread-4 reads DDDDDDDDDD
Thread-3: time = 10074 
Thread-3 reads DbbooDboDE
Thread-2: time = 10024
Thread-2 reads DDDDDDDDDD
Thread-i: time = 9473
Thread-l
Thread-0: time = 9423
Thread-0 reads dddddddddd
Thread-5 reads dddddddddd
Thread-4 reads dddadddddd
Thread-3 reads dddddddddd
Thread-2 reads dddddddddd
Thread-l reads cccccccccc
Thread-0 reads ccccccccco
Thread-5 reads ccccccccco
Thread-4 reads
（前略）
reads dddddddddo
一在中逢终止
练习问题的解答
395
---
## Page 410
的数量是多少？设计者必须要自已权衡轻重得失。
缺点。
方法也会有使得类或接口增加，导致管理困难，用户自已都难以了解其中结构的
readwritelock 包中。
public interface ReadwriteStrategy I
package readwritelock;
自己设计的程序要有多优秀的重复使用性？以及可以接受因而增加的类或接口
InterruptedException;
只要先走这一步，就可以切换读写处理与Guard 条件的 policy。但是，这个
我们还将 ReadWriteStrategy接口与 GuardStragy 接口与Data 类集成到
public interface Guardstrategy f
package readwritelock;
List A6-3
publiｃ  abstract 
ist A6-2
public abstract Object doRead() throws InterruptedException;
public abstract void afterDoWrite(}:
public abstract void beforeDowriteil;
public abstract void afterWriteWait():
ptblic abstract boolean writeGuard();
public abstract void beforewriteWaiti);
public abstract void afterDoRead();
pubiic abstract void beforeDoRead();
public abstract void afterReadwait();
public abstract boolean readGuard();
public abstract void beforeReadWait(l;
[ReadWriteStrategy 接(ReadWriteStrategy.java)
GuardStrategy 接口(GuardStrategy.java)
PTOA
dowriteiobject
arg！
threws
---
## Page 411
pubiic class Data
package readwritelock;
tList A6-4
buffer
dowrite
doRead
private final ReadwriteLock lock;
oWr
 private final ReadwriteStrategy
Raad
>
D
111
Data 类(Data java)
广
!Uses
图A6-4
relte
readUnlock
Readhritalock
Data
类的图示
Uses
readwritestrategy:
4
afterDowri
writeGuard
beforwritehait
afterDoRead
beforeDoRead
afterReadwait
readGuard
beforeReadwait
perferwriter
writingwrirers
beforDowrite
afterwritewair
baforwritewait
afterDoRead
beforeDoRead
readGuard
beforeReadwait
 0)l;
 Inner class
public DefauitReadwriteStrategy()
private final char[] buffer;
pubiic void afterDowrite() [
public void beforeDoWrite() {
public
public boolean writeGuard()
publie void beforeWriteWait(l (
public vcid afrerDoReadi) {
public void beforeDoReadi) l
public
public boolean readGuardi) {
this(l0);
preferwritér = false;
writingWriters--;
writingwriters++;
waitingWriters--;
return
waitingwriters+t;
preferwriter = true;
readingReaders--;
readirgReaders++;
// no operation
 return 
void afterWriteWaiti) {
 no operation
void afterReadwait() {
!(readingReaders
!(writingwriters
>O ll writingwriters > O);
(preferWriter
---
## Page 415
 public class ReaderThread exterds Thread ↑
import readwriteiock.Data;
List A6-5
public void run()
public ReaderThread(Data data) f