### 优化后的文本

引入新的内部状态熵与阻塞输出无关。本文将探讨 `/dev/random` 和 `/dev/urandom` 的使用，并澄清一些常见的误解。

#### `/dev/random` 和 `/dev/urandom` 的 man 页面

这两个 man 页面在吓唬程序员方面表现得非常出色：

> 从 `/dev/urandom` 读取数据不会因为需要更多熵而阻塞。如果熵池中的熵不足，根据所使用的算法，返回的数值在理论上可能被密码学攻击。尽管这种攻击尚未出现在公开文献中，但理论上是可能存在的。如果你的应用程序对这种情况感到担忧，建议使用 `/dev/random`。

实际上，Linux 内核已经更新了 `/dev/random` 和 `/dev/urandom` 的 man 页面，但许多在线资源和 Linux 发行版仍在使用旧版本。因此，这一部分内容仍需保留一段时间。

#### 对 man 页面内容的批判

man 页面提到，虽然没有公开文献描述此类攻击，但这并不意味着它们不存在。然而，假设这类攻击一定存在也是不合理的。事实上，AES、SHA-3 等常见加密算法也没有公开文献记录的攻击手段，但我们仍然广泛使用它们。

我们回到 man 页面的建议：“使用 `/dev/random`”。但实际上，`/dev/urandom` 和 `/dev/random` 都是从同一个 CSPRNG（密码安全伪随机数生成器）中获取随机数。只有在极少数情况下，例如需要信息论安全性的随机数时，才可能需要等待足够的熵进入 CSPRNG。对于大多数应用来说，这并不是必要的。

man 页面本身也承认这一点：

> 如果你不确定该用 `/dev/random` 还是 `/dev/urandom`，通常应该选择后者。除了需要长期使用的 GPG/SSL/SSH 密钥外，其他情况都应该使用 `/dev/urandom`。

最新的 man 页面明确指出：

> `/dev/random` 接口被认为是遗留接口，`/dev/urandom` 在所有用例中都是首选和足够的，除非是在启动早期需要随机性的应用程序。对于这些应用程序，应使用 `getrandom(2)`，因为它会阻塞直到熵池初始化完成。

#### 专家观点

本文的观点在互联网上可能是“小众”的，但大多数真正的密码学家并不同意阻塞 `/dev/random` 的做法。例如：

- **Daniel Bernstein (djb)**：
  > 我们密码学家对这种迷信行为表示不负责。写 `/dev/random` man 页面的人似乎同时相信：(1) 我们不知道如何用一个 256 位长的 `/dev/random` 输出生成无限长的随机密钥串流；(2) 我们却知道如何用单个密钥来加密一条消息。这对密码学家来说甚至都不好笑了。

- **Thomas Pornin**：
  > 简单来说，`/dev/urandom` 生成的数据可以说和真随机完全无法区分，至少在现有科技水平下。使用比 `/dev/urandom` “更好的”随机性毫无意义，除非你在使用极为罕见的“信息论安全”的加密算法。

- **Thomas Ptacek**：
  > 用 urandom。用 urandom。用 urandom。用 urandom。用 urandom。

#### `/dev/urandom` 的局限性

`/dev/urandom` 并非完美无缺。在 Linux 上，`/dev/urandom` 永远不会阻塞，即使在系统启动初期，内核还没有收集到足够的熵时也是如此。相比之下，FreeBSD 的行为更为合理：`/dev/random` 和 `/dev/urandom` 在系统启动时会阻塞直到有足够的熵为止，然后就再也不阻塞了。

为了解决这个问题，Linux 引入了 `getrandom(2)` 系统调用，它会在有足够的熵之前阻塞，然后不再阻塞。这个系统调用自 Linux 3.17 起可用。

此外，Linux 发行版在启动过程中会保存一些随机数到种子文件中，以便下次启动时使用。这种方法虽然不如在关机脚本中写入随机种子有效，但它可以处理系统崩溃等情况。

虚拟机克隆或恢复到先前状态时，种子文件可能无效。解决方案是为每个克隆或恢复的镜像重新生成种子文件，而不是使用 `/dev/random`。

#### 总结

总之，对于大多数应用场景，推荐使用 `/dev/urandom`。除非你需要极高的安全性（如生成长期使用的密钥），否则没有必要使用 `/dev/random`。

---

作者：[Thomas Hühn](https://www.2uo.de/)  
译者：[Moelf](https://github.com/Moelf)  
校对：[wxy](https://github.com/wxy)  
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出