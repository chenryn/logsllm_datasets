 Example 1: 
 The same repeated number may be chosen from candidates unlimited number of times.
Note:
target.
(target ), find all unique combinations in candidates where the candidate numbers sums to
Given a set of candidate numbers ( candidates ) (without duplicates) and a target number 
题目
39. Combination Sum
● The solution set must not contain duplicate combinations.
● All numbers (including target ) will be positive integers.
A
Input: candidates = [2,3,6,7], target = 7,
 solution set is:
return true
[2,2,3]
[7],
for i := posx; i index & nums[i]== nums[i-1]{// 这里是去重的关键逻辑,本次不取重复数字,
b := make([]int, len(c))
*res = append(*res, b)
copy(b，c)
return [][]int{}
if target >= nums[i] {
return
continue
C = c[:len(c)-1]
findcombinationSum2(nums,
C = append(c, nums[i]) 
[][]int{}
,target-nums[i],i+l, c, res)
，组合需要去重。这一题是第 39 题的加强版，第 39 题中元素
---
## Page 131
存在i，只要不存在i就立即返回结果，即所求。
为了减少时间复杂度，可以把 input 数组都装到 map 中，然后i循环从1 开始，依次比对 map 中是否
解题思路
找到缺失的第一个正整数。
题目大意
Your algorithm should run in O(n) time and uses constant extra space.
Note:
Example 3: 
Example 2: 
 Example 1: 
Given an unsorted integer array, find the smallest missing positive integer.
题目
41. First Missing Positive
代码
Output: 1 
Input: [7,8,9,11,12]
Output: 2 
Input: [3,4,-1,1]
Output:3 
Input: [1,2,0]
---
## Page 132
解题思路
题目大意
42. Trapping Rain Water
的值。如果下雨了，问这样一个容器能装多少单位的水？
从×轴开始，给出一个数组，数组里面的数字代表从(0,0)点开始，宽度为1个单位，高度为数组元素
Example:
rain water (blue section) are being trapped. Thanks Marcos for contributing this image!
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of 
题目
Output: 6
Input: [0,1,0,2,1,0,1,3,2,1,2,1]
func firstMissingPositive(nums []int) int {
package leetcode
return len(nums) + 1
for index := 1; index  maxLeft {
} else{ 
Area =leftMax-CunentHeipt
 maxLeft = height[left] 
res += maxLeft - height[left]
RightMax=S
2-0=Z
leftmax=3
0
---
## Page 134
代码
解题思路
给定一个没有重复数字的序列，返回其所有可能的全排列。
题目大意
Example:
Given a collection of distinct integers, return all possible permutations.
46. Permutations
题
·求出一个数组的排列组合中的所有排列，用 DFS 深搜即可。
func permute(nums []int) [][]int {
package leetcode 
output:
Input: [1,2,3]
目
[3,2,1] 
[3,1,2],
[2,3,1],
[2,1,3],
[1,3,2],
[1,2,3],
return res
} else{
} else{ 
if height[right] >= maxRight {
right--
left++
 res += maxRight - height[right]
 maxRight = height[right] 
---
## Page 135
题目大意
Example:
permutations.
Given a collection of numbers that might contain duplicates, return all possible unique
题目
47. Permutations Il
output:
Input: [1,1,2]
[]bool]{
[1,2,1],
[1,1,2],
return
if index == len(nums) 
generatePermutation(nums, O, p, &res, &used) 
used, p, res := make([]bool, len(nums)), []int{}, [][]int{}
if len(nums) == 0 {
[2,1,1] 
for i := O;i 0&& nums[i］==nums[i-1]&&！（*used)[i-1]{// 这里是去重的关键逻辑
(*used)[i] = false
p = p[:len(p)-1] 
generatePermutation47(nums, index+l, p, res, used)
p = append(p, nums[i]) 
(*used)[i] = true 
 continue
len(nums))，[]int{}，[][]int{}
---
## Page 137
题目大意
Example 2:
Example 1:
directly. Do NoT allocate another 2D matrix and do the rotation.
You have to rotate the image in-place, which means you have to modify the input 2D matrix
Note:
Rotate the image by 90 degrees (clockwise).
You are given an n x n 2D matrix representing an image.
题目
48. Rotate Image
Given input matrix = 
Given input matrix =
rotate the input matrix in-place such that it becomes:
rotate the input matrix in-place such that it becomes:
[16, 7,10,11]
[12, 6, 8, 9]
[14, 3,4,1],
[15,13，2， 5],
[15,14,12,16]
[13, 3, 6, 7]
[9,6,3] 
[8,5,2],
[7,4,1],
[7,8,9] 
[4,5,6],
[1,2,3],
2,4, 8,10],
5，1,9,11],
---
## Page 138
代码
解题思路
这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。
给定一个 n ×n 的二维矩阵表示一个图像。将图像顺时针旋转 90 度。说明：你必须在原地旋转图像,
·给出一个二维数组，要求顺时针旋转 90 度。
func rotate(matrix [][]int) {
package leetcode
row := len(matrix)
这一题比较简单，按照题意做就可以。这里给出2种旋转方法的实现，顺时针旋转和逆时针旋
转
void anti_rotate(vector > &matrix) {
*/
void rotate(vector > &matrix) {
７８９
4
123
first reverse left to right, then swap the symmetry
anticlockwise rotate 逆时针旋转
456 =>456
123
first reverse up to down,
clockwise rotate 顺时针旋转
for 
for (auto vi : matrix) reverse(vi.begin(), vi.end());
5
for （int i = O; i< matrix.size(); ++i）{ 
reverse(matrix.begin(), matrix.end());
(int i= O;i< matrix.size();++i） {
9
for (int j =i + l; j< matrix[i].size(); ++j)
 swap(matrix[i][j], matrix[j][i]); 
 swap(matrix[i][j], matrix[j][i]];
32１
７8９
987
１23
4
ⅡV2
3６
147
9６
5
8
3
. then swap the symmetry