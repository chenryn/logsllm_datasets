title:Privacy-Preserving Alert Correlation: A Concept Hierarchy Based
Approach
author:Dingbang Xu and
Peng Ning
Privacy-Preserving Alert Correlation: A Concept Hierarchy Based Approach ∗
Dingbang Xu and Peng Ning
Cyber Defense Laboratory
Department of Computer Science
North Carolina State University
{dxu,pning}@ncsu.edu
Abstract
With the increasing security threats from infrastructure
attacks such as worms and distributed denial of service at-
tacks, it is clear that the cooperation among different or-
ganizations is necessary to defend against these attacks.
However, organizations’ privacy concerns for the incident
and security alert data require that sensitive data be sani-
tized before they are shared with other organizations. Such
sanitization process usually has negative impacts on intru-
sion analysis (such as alert correlation). To balance the
privacy requirements and the need for intrusion analysis,
we propose a privacy-preserving alert correlation approach
based on concept hierarchies. Our approach consists of two
phases. The ﬁrst phase is entropy guided alert sanitization,
where sensitive alert attributes are generalized to high-level
concepts to introduce uncertainty into the dataset with par-
tial semantics. To balance the privacy and the usability of
alert data, we propose to guide the alert sanitization pro-
cess with the entropy or differential entropy of sanitized at-
tributes. The second phase is sanitized alert correlation. We
focus on deﬁning similarity functions between sanitized at-
tributes and building attack scenarios from sanitized alerts.
Our preliminary experimental results demonstrate the effec-
tiveness of the proposed techniques.
1 Introduction
In recent years, the security threats from infrastructure
attacks such as worms and distributed denial of service
attacks are increasing. To defend against these attacks,
the cooperation among different organizations is necessary.
Several organizations such as CERT Coordination Cen-
ter and DShield (http://www.dshield.org/) collect
data (including security incident data) over the Internet, per-
form correlation analysis, and disseminate information to
∗
The authors would like to thank the anonymous reviewers for their
valuable comments. This work is supported by the National Science Foun-
dation (NSF) under grants ITR-0219315 and CCR-0207297, and by the
U.S. Army Research Ofﬁce (ARO) under grant DAAD19-02-1-0219.
users and vendors. The security incident data are usually
collected from different companies, organizations or indi-
viduals, and their privacy concerns have to be considered.
To prevent the misuse of incident data, appropriate data san-
itization through which the sensitive information is obfus-
cated is highly preferable. For example, DShield lets audit
log submitters perform partial or complete obfuscation to
destination IP addresses in the datasets, where partial ob-
fuscation changes the ﬁrst octet of an IP address to decimal
10, and complete obfuscation changes any IP address to a
ﬁxed value 10.0.0.1.
To protect networks and hosts on the Internet, many se-
curity systems such as intrusion detection systems (IDSs)
are widely deployed. However, current IDSs have some
well-known limitations. They usually ﬂag thousands of
alerts per day, among which false alerts are mixed with true
ones. To better understand the security threats, it is nec-
essary to perform alert correlation. Current correlation ap-
proaches can be roughly divided into four categories: (1)
similarity based approaches (e.g., [19, 17]), which perform
clustering analysis through calculating the similarity be-
tween alert attributes, (2) approaches based on pre-deﬁned
attack scenarios (e.g., [5, 9]), which build attack scenarios
through matching alerts to pre-deﬁned scenario templates,
(3) approaches based on prerequisites (pre-conditions) and
consequences (post-conditions) of attacks (e.g., [4, 11]),
which create attack scenarios through matching the con-
sequence of one attack to the prerequisite of another, and
(4) approaches based on multiple information sources (e.g.,
[13, 10, 20]), which correlate alerts from multiple security
systems such as ﬁrewalls and IDSs.
Current alert correlation approaches generally assume
all alert data (e.g., destination IP addresses) are available
for analysis, which is true when there are no privacy con-
cerns. However, when multiple organizations provide san-
itized alert and incident data (because of privacy concerns)
for intrusion analysis, alert correlation will be affected due
to the lack of precise data. It is desirable to have techniques
to perform privacy-preserving alert correlation such that the
privacy of participating organizations is preserved, and at
the same time, alert correlation can provide useful results.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:53 UTC from IEEE Xplore.  Restrictions apply. 
To our best knowledge, [7] is the only paper addressing pri-
vacy issues in alert correlation, which uses hash functions
(e.g., MD5) and keyed hash functions (e.g., HMAC-MD5)
to sanitize sensitive data. This approach is effective in de-
tecting some high-volume events (e.g., worms). However,
since hash functions destroy the semantics of alert attributes
(e.g., the loss of topological information due to hashed IP
addresses), the interpretation of correlation results is non-
trivial.
In addition, hash functions may be vulnerable to
brute-force attacks due to limited possible values of alert
attributes, and keyed hash functions may introduce difﬁcul-
ties in correlation analysis due to the different keys used by
different organizations.
In this paper, we propose a privacy-preserving alert cor-
relation approach based on concept hierarchies. This ap-
proach works in two phases: entropy guided alert saniti-
zation and sanitized alert correlation. The ﬁrst phase pro-
tects the privacy of sensitive alert data. We classify alert
attributes into categorical (e.g., IP addresses) and continu-
ous ones (e.g., the total time a process runs), and sanitize
them through concept hierarchies. In a concept hierarchy,
original attribute values are generalized to high-level con-
cepts. For example, IP addresses are generalized to net-
work addresses, and continuous attributes are generalized
to intervals. We replace original attribute values with corre-
sponding high-level concepts, thus introducing uncertainty
while partially maintaining attribute semantics. To balance
the privacy and usability requirements, alert sanitization is
guided by entropy or differential entropy [3] of sanitized
attributes, where the entropy or differential entropy for san-
itization is determined according to the privacy policy.
To understand the security threats, the second phase of
our approach is to correlate sanitized alerts. As we men-
tioned earlier, examining the similarity between alert at-
tributes and building attack scenarios are two focuses in cur-
rent correlation methods. We investigate both problems un-
der the situation where alerts are sanitized. We ﬁrst exam-
ine similarity functions based on original attribute values,
and then show how to revise them to calculate similarity
between sanitized attributes. To build attack scenarios from
sanitized alerts, we propose an optimistic approach. As
long as it is possible that two sanitized alerts have a causal
relation, we link them together. Hence multiple alerts are
connected through causal relations to form attack scenarios.
The remainder of this paper is organized as follows. Sec-
tion 2 presents techniques on entropy guided alert sanitiza-
tion. Section 3 discusses correlating sanitized alerts. Sec-
tion 4 presents our experimental results. Section 5 discusses
related work, and Section 6 concludes this paper.
2 Entropy Guided Alert Sanitization
Alert Types, Original Alerts and Sanitized Alerts. In-
tuitively, an alert type deﬁnes the possible attributes to de-
scribe a type of alerts. Formally, an alert type is a type name
T and a set S of attribute names, where each attribute name
ai ∈ S has an associated domain Dom(ai).
(For conve-
nience, we may use type name T to represent either the type
name or the corresponding alert type in this paper.) Original
alerts are ﬂagged directly by security systems. Formally, an
original alert to of type T is a tuple on the attribute names
S, where for each attribute name ai ∈ S, the corresponding
element vi in the tuple is a value in ai’s domain Dom(ai).
Example 1 An FTP Glob Expansion alert type has a set
of attribute names {SrcIP, SrcPort, DestIP, DestPort, Start-
Time, EndTime} , where the domain of SrcIP and DestIP is
all possible IP addresses, the domain of SrcPort and Dest-
Port consists of all possible port numbers, and StartTime
and EndTime are possible times an alert begins and ends.
An original alert with type FTP Glob Expansion is
{SrcIP=10.20.1.1, SrcPort=1042,
given as
DestIP=10.10.1.1, DestPort=21, StartTime =11-10-2004
15:45:10, EndTime =11-10-2004 15:45:10}.
follows:
In this paper, the privacy of alerts is related to the original
values of sensitive attributes in individual alerts. To ensure
the privacy of individual alerts, these sensitive original val-
ues should be sanitized. A sanitized alert ts with type T is
a tuple on the attribute name set S, where for some attribute
name ai ∈ S, the corresponding element vi in the tuple
is a transformed value in domain Doms(ai) (Doms(ai) is
Dom(ai) or a different domain). To continue Example 1, as-
sume DestIP of FTP Glob Expansion is sensitive. To san-
itize the original alert, we let DestIP=10.10.1.0/24 (it is
sanitized to its corresponding /24 network address). All the
other attributes remain unchanged.
In the remainder of this paper, we may use attributes to
represent either attribute names, attribute values or both if
it is clear from the context. Likewise, we may use alerts to
denote either original alerts, sanitized alerts, or both. In the
following, we present concept hierarchy based sanitization
for categorical and continuous attributes, respectively.
2.1 Categorical Attribute Sanitization
Categorical attributes have discrete values. Examples of
categorical attributes are IP addresses and port numbers.
Concept hierarchies abstract speciﬁc (low-level) concepts
into general (high-level) ones, which are widely used in data
mining. A concept hierarchy is based on speciﬁc-general
relations. Given two concepts c1 and c2 (e.g., two attribute
values), where c2 is more general than c1 (or equivalently,
c1 is more speciﬁc than c2), we denote the speciﬁc-general
relation between c1 and c2 as c1 (cid:3) c2. As a special case, we
have c (cid:3) c for any concept c. Given an attribute name with
the corresponding domain, we can deﬁne speciﬁc-general
relations through grouping a subset of attribute values and
abstracting them into a more general concept. For example,
a block of IP addresses can be organized as a subnet. Thus
given an IP address 10.10.1.5 and a subnet 10.10.1.0/24,
we have 10.10.1.5 (cid:3) 10.10.1.0/24.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:53 UTC from IEEE Xplore.  Restrictions apply. 
10.10.0.0/16
10.10.1.0/24
10.10.2.0/24
10.10.1.0
......
10.10.1.255
10.10.2.0
......
10.10.2.255
(a) A Concept Hierarchy for IP Addresses
(0, 256]
(0, 128]
(128, 256]
(0, 64]
(64, 128]
(128, 192]
(192, 256]
(b) A Concept Hierarchy for CPUProcessingTime
Figure 1. Two Examples of Concept Hierarchies
A concept hierarchy consists of a set of speciﬁc-general
relations, and usually is organized as a tree, where leaf
nodes denote the most speciﬁc concepts (original attribute
values), and the root node represents the most general con-
cept in this hierarchy. For example, Figure 1(a) shows
a concept hierarchy for IP addresses, where IP addresses
from 10.10.1.0 to 10.10.1.255 and from 10.10.2.0 to
10.10.2.255 are organized into two subnets 10.10.1.0/24
and 10.10.2.0/24, respectively. For each attribute (e.g.,
source IP address), or a set of attributes having the same
domain (e.g., both source and destination IP addresses), we
can build a concept hierarchy based on the attribute domain.
Then we perform alert sanitization by replacing original at-
tribute values with more general values in the hierarchy.
Example 2 To continue Example 1, assume DestIP of
FTP Glob Expansion is sensitive. We use the concept hi-
erarchy in Figure 1(a) to perform sanitization. We replace
DestIP=10.10.1.1 with DestIP=10.10.1.0/24. The other at-
tributes remain unchanged.
To balance the privacy and usability of alert data, we
need to design a satisfactory concept hierarchy to perform
sanitization, or choose appropriate general values to replace
original attribute values in a given concept hierarchy. We
propose to guide these processes with entropy [3], an un-
certainty measure for categorical attributes.
We start with calculating the entropy of a sanitized at-
tribute. In a concept hierarchy for a categorical attribute,
given an attribute value v, which is either an original or a
generalized value, we use Node(v) to denote the node hav-
ing value v. Given a general value vg, we use SubTree(vg)
to denote the subtree rooted at Node(vg), and LeafCount(vg)
to denote the number of leaf nodes in SubTree(vg). When
sanitizing a categorical attribute a, an original value vo is
replaced with a general value vg in a concept hierarchy. No-
tice Node(vo) should be a leaf node in SubTree(vg). We de-
note the entropy of attribute a associated with vg as Ha(vg),
p(a = vi) log2 p(a =
vi). Based on the frequencies of attribute values, we can
compute attribute entropy using the above equation. For
example, if all leaf nodes in SubTree(vg) are equally likely
where Ha(vg) = −(cid:1)Leaf Count(vg )
i=1
to be generalized to vg, then for any leaf node value vi,
the probability p(a = vi) = 1/Leaf Count(vg), thus we
have Ha(vg) = log2 Leaf Count(vg). To continue Exam-
ple 2 under the assumption of equal probabilities for leaf
nodes, the entropy of DestIP associated with 10.10.1.0/24
is log2LeafCount(10.10.1.0/24) = log2 256 = 8.
Attribute entropy can help us design a satisfactory con-
cept hierarchy. For example, if we want to achieve an
entropy value 8 when sanitizing DestIP distributed from
10.90.1.0 to 10.90.1.255 with equal probabilities, we can
design a concept hierarchy with two levels, where the root
node is a /24 network (10.90.1.0/24), and the leaf nodes
are those individual IP addresses. Entropy can also help
us choose an appropriate general value in a given con-
cept hierarchy. For example, consider an original attribute
DestIP=10.10.10.1 and a concept hierarchy in Figure 1(a),
where leaf nodes in the hierarchy have equal probabilities.
If we require an entropy value 8, we can choose the general
value 10.10.1.0/24 to sanitize the original attribute.
2.2 Continuous Attribute Sanitization
Some attributes in an alert take continuous values, for
example, the CPU time a process uses. To sanitize a con-
tinuous attribute, we divide the domain of the attribute into
mutually exclusive intervals, and replace the original values
with the corresponding intervals. Formally, if the domain of
an attribute a is Dom(a), we partition Dom(a) into n in-
tervals r1, r2, ··· , rn such that (1) ∪n
k=1rk = Dom(a), and
(2) for any i, j, where 1 ≤ i, j ≤ n and i (cid:6)= j, ri ∩ rj = ∅.
The partitions of an attribute domain can be organized
into a concept hierarchy. For example, Figure 1(b) shows
a concept hierarchy for attribute CPUProcessingTime (as-