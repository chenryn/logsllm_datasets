*Linux 别名命令*
**注意**： 你可以给你的“新命令”起任何的名字，并且使用单引号包括很多命令，但是你要用分号区分开它们。如下：
```
# alias myNewCommand='cd /usr/bin; ls; cd; clear'
```
#### **exit 命令**
`exit` 和 `logout` 命令都可以退出 shell 。`exit` 命令可以退出所有的 shell，`logout` 命令只注销登录的 shell（即你用文本模式登录时自动启动的那个）。
#### **man 和 info 命令**
如果你对某个程序有疑问，可以参考它的手册页，可以使用 `man` 命令调出它。此外，还有一些关于重要文件(inittab、fstab、hosts 等等)、库函数、shell、设备及其他功能的手册页。
举例:
* man uname (输出系统信息，如内核名称、处理器、操作系统类型、架构等)
* man inittab (初始化守护进程的设置)
另外一个重要的信息的来源是由 `info` 命令提供的，`info` 命令常常被用来读取 info 文件。这些文件往往比手册页 提供了更多信息。可以通过 `info keyword` 调用某个命令的信息：
```
# info ls
# info cut
```
另外，在 `/usr/share/doc` 文件夹包含了大量的子目录，里面可以找到大量的文档。它们是文本文件或其他可读格式。
你要习惯于使用这三种方法去查找命令的信息。重点关注每个命令文档中介绍的详细的语法。
#### **使用 expand 命令把制表符转换为空格**
有时候文本文档包含了制表符，但是程序无法很好的处理。或者我们只是简单的希望将制表符转换成空格。这就是用到 `expand` 地方(由GNU核心组件包提供) 。
举个例子，我们有个文件 NumberList.txt，让我们使用 `expand` 处理它，将制表符转换为一个空格，并且显示在标准输出上。
```
# expand --tabs=1 NumbersList.txt
```
![Linux expand Command](/data/attachment/album/201509/02/124016b6kkf2uxzd55uw85.png)
*Linux expand 命令*
unexpand命令可以实现相反的功能(将空格转为制表符)
#### **使用 head 输出文件首行及使用 tail 输出文件尾行**
通常情况下，`head` 命令后跟着文件名时，将会输出该文件的前十行，我们可以通过 `-n` 参数来自定义具体的行数。
```
# head -n3 /etc/passwd
# tail -n3 /etc/passwd
```
![Linux head and tail Command](/data/attachment/album/201509/02/124017p6qzsoqygaxuhqsq.png)
*Linux 的 head 和 tail 命令*
`tail` 最有意思的一个特性就是能够显示增长的输入文件(`tail -f my.log`，my.log 是我们需要监视的文件。)这在我们监控一个持续增加的日志文件时非常有用。
* [使用 head 和 tail 命令有效地管理文件](http://www.tecmint.com/view-contents-of-file-in-linux/)
#### **使用 paste 按行合并文本文件**
`paste` 命令一行一行的合并文件，默认会以制表符来区分每个文件的行，或者你可以自定义的其它分隔符。(下面的例子就是输出中的字段使用等号分隔)。
```
# paste -d= file1 file2
```
![Merge Files in Linux](/data/attachment/album/201509/02/124017dn3h8rtb822nb134.png)
*Linux 中的 merge 命令*
#### **使用 split 命令将文件分块**
`split` 命令常常用于把一个文件切割成两个或多个由我们自定义的前缀命名的文件。可以根据大小、区块、行数等进行切割，生成的文件会有一个数字或字母的后缀。在下面的例子中，我们将切割 bash.pdf ，每个文件 50KB (-b 50KB)，使用数字后缀 (-d)：
```
# split -b 50KB -d bash.pdf bash_
```
![Split Files in Linux](/data/attachment/album/201509/02/124018obie3ip8p95zjjfl.png)
*在 Linux 下切割文件*
你可以使用如下命令来合并这些文件，生成原来的文件:
```
# cat bash_00 bash_01 bash_02 bash_03 bash_04 bash_05 > bash.pdf
```
#### **使用 tr 命令替换字符**
`tr` 命令多用于一对一的替换（改变）字符，或者使用字符范围。和之前一样，下面的实例我们将使用之前的同样文件file2，我们将做：
* 小写字母 o 变成大写
* 所有的小写字母都变成大写字母
```
cat file2 | tr o O
cat file2 | tr [a-z] [A-Z]
```
![Translate Characters in Linux](/data/attachment/album/201509/02/124018ve3xms3vknuebgfv.png)
*在 Linux 中替换字符*
#### **使用 uniq 和 sort 检查或删除重复的文字**
`uniq` 命令可以帮我们查出或删除文件中的重复的行，默认会输出到标准输出，我们应当注意，`uniq`只能查出相邻的相同行，所以，`uniq` 往往和 `sort` 一起使用(`sort` 一般用于对文本文件的内容进行排序)
默认情况下，`sort` 以第一个字段(使用空格分隔)为关键字段。想要指定不同关键字段，我们需要使用 -k 参数，请注意如何使用 `sort` 和 `uniq` 输出我们想要的字段，具体可以看下面的例子：
```
# cat file3
# sort file3 | uniq
# sort -k2 file3 | uniq
# sort -k3 file3 | uniq
```
![删除文件中重复的行](/data/attachment/album/201509/02/124019x1eeaaghoowga3l4.png)
*删除文件中重复的行*
#### **从文件中提取文本的命令**
`cut` 命令基于字节(-b)、字符(-c)、或者字段(-f)的数量，从输入文件（标准输入或文件）中提取到的部分将会以标准输出上。
当我们使用字段 `cut` 时，默认的分隔符是一个制表符，不过你可以通过 -d 参数来自定义分隔符。
```
# cut -d: -f1,3 /etc/passwd # 这个例子提取了第一和第三字段的文本
# cut -d: -f2-4 /etc/passwd # 这个例子提取了第二到第四字段的文本
```
![从文件中提取文本](/data/attachment/album/201509/02/124019qy6tzgtj8zqtziny.png)
*从文件中提取文本*
注意，简洁起见，上方的两个输出的结果是截断的。
#### **使用 fmt 命令重新格式化文件**
`fmt` 被用于去“清理”有大量内容或行的文件，或者有多级缩进的文件。新的段落格式每行不会超过75个字符宽，你能通过 -w (width 宽度)参数改变这个设定，它可以设置行宽为一个特定的数值。
举个例子，让我们看看当我们用 `fmt` 显示定宽为100个字符的时候的文件 /etc/passwd 时会发生什么。再次，输出截断了。
```
# fmt -w100 /etc/passwd
```
![File Reformatting in Linux](/data/attachment/album/201509/02/124020vowjt1ttomtjj2jz.png)
*Linux 文件重新格式化*
#### **使用 pr 命令格式化打印内容**
`pr` 分页并且在按列或多列的方式显示一个或多个文件。 换句话说，使用 `pr` 格式化一个文件使它打印出来时看起来更好。举个例子，下面这个命令：
```
# ls -a /etc | pr -n --columns=3 -h "Files in /etc"
```
以一个友好的排版方式(3列)输出/etc下的文件，自定义了页眉(通过 -h 选项实现)、行号(-n)。
![File Formatting in Linux](/data/attachment/album/201509/02/124021yerg1gq27e1egzo2.png)
*Linux的文件格式化*
### 总结
在这篇文章中，我们已经讨论了如何在 Shell 或终端以正确的语法输入和执行命令，并解释如何找到，查阅和使用系统文档。正如你看到的一样简单，这就是你成为 RHCSA 的第一大步。
如果你希望添加一些其他的你经常使用的能够有效帮你完成你的日常工作的基础命令，并愿意分享它们，请在下方留言。也欢迎提出问题。我们期待您的回复。
---
via: 
作者：[Gabriel Cánepa](http://www.tecmint.com/author/gacanepa/) 译者：[xiqingongzi](https://github.com/xiqingongzi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出