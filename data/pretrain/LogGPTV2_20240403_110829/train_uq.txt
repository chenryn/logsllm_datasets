.so man2/unimplemented.2
.\" copyright (c) 1992 drew eckhardt (PI:EMAIL), march 28, 1992
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified by michael haardt (PI:EMAIL)
.\" modified sat jul 24 14:29:17 1993 by rik faith (PI:EMAIL)
.\" modified 961203 and 001211 and 010326 by PI:EMAIL
.\" modified 001213 by michael haardt (PI:EMAIL)
.\" modified 13 jun 02, michael kerrisk 
.\"	added note on nonstandard behavior when sigchld is ignored.
.\" modified 2004-11-16, mtk, noted that the nonconformance when
.\"	sigchld is being ignored is fixed in 2.6.9; other minor changes
.\" modified 2004-12-08, mtk, in 2.6 times() return value changed
.\" 2005-04-13, mtk
.\"	added notes on nonstandard behavior: linux allows 'buf' to
.\"	be null, but posix.1 doesn't specify this and it's nonportable.
.\"
.th times 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
times \- get process times
.sh synopsis
.nf
.b #include 
.pp
.bi "clock_t times(struct tms *" buf );
.fi
.sh description
.br times ()
stores the current process times in the
.i "struct tms"
that
.i buf
points to.
the
.i struct tms
is as defined in
.ir  :
.pp
.in +4n
.ex
struct tms {
    clock_t tms_utime;  /* user time */
    clock_t tms_stime;  /* system time */
    clock_t tms_cutime; /* user time of children */
    clock_t tms_cstime; /* system time of children */
};
.ee
.in
.pp
the
.i tms_utime
field contains the cpu time spent executing instructions
of the calling process.
the
.i tms_stime
field contains the cpu time spent executing inside the kernel
while performing tasks on behalf of the calling process.
.pp
the
.i tms_cutime
field contains the sum of the
.i tms_utime
and
.i tms_cutime
values for all waited-for terminated children.
the
.i tms_cstime
field contains the sum of the
.i tms_stime
and
.i tms_cstime
values for all waited-for terminated children.
.pp
times for terminated children (and their descendants)
are added in at the moment
.br wait (2)
or
.br waitpid (2)
returns their process id.
in particular, times of grandchildren
that the children did not wait for are never seen.
.pp
all times reported are in clock ticks.
.sh return value
.br times ()
returns the number of clock ticks that have elapsed since
an arbitrary point in the past.
the return value may overflow the possible range of type
.ir clock_t .
on error, \fi(clock_t)\ \-1\fp is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b efault
.i tms
points outside the process's address space.
.sh conforming to
posix.1-2001, posix.1-2008, svr4, 4.3bsd.
.sh notes
the number of clock ticks per second can be obtained using:
.pp
.in +4n
.ex
sysconf(_sc_clk_tck);
.ee
.in
.pp
in posix.1-1996 the symbol \fbclk_tck\fp (defined in
.ir  )
is mentioned as obsolescent.
it is obsolete now.
.pp
in linux kernel versions before 2.6.9,
if the disposition of
.b sigchld
is set to
.br sig_ign ,
then the times of terminated children
are automatically included in the
.i tms_cstime
and
.i tms_cutime
fields, although posix.1-2001 says that this should happen
only if the calling process
.br wait (2)s
on its children.
this nonconformance is rectified in linux 2.6.9 and later.
.\" see the description of times() in xsh, which says:
.\"	the times of a terminated child process are included... when wait()
.\"	or waitpid() returns the process id of this terminated child.
.pp
on linux, the
.i buf
argument can be specified as null, with the result that
.br times ()
just returns a function result.
however, posix does not specify this behavior, and most
other unix implementations require a non-null value for
.ir buf .
.pp
note that
.br clock (3)
also returns a value of type
.ir clock_t ,
but this value is measured in units of
.br clocks_per_sec ,
not the clock ticks used by
.br times ().
.pp
on linux, the "arbitrary point in the past" from which the return value of
.br times ()
is measured has varied across kernel versions.
on linux 2.4 and earlier, this point is the moment the system was booted.
since linux 2.6, this point is \fi(2^32/hz) \- 300\fp
seconds before system boot time.
this variability across kernel versions (and across unix implementations),
combined with the fact that the returned value may overflow the range of
.ir clock_t ,
means that a portable application would be wise to avoid using this value.
to measure changes in elapsed time, use
.br clock_gettime (2)
instead.
.\" .pp
.\" on older systems the number of clock ticks per second is given
.\" by the variable hz.
.ss historical
svr1-3 returns
.i long
and the struct members are of type
.i time_t
although they store clock ticks, not seconds since the epoch.
v7 used
.i long
for the struct members, because it had no type
.i time_t
yet.
.sh bugs
a limitation of the linux system call conventions on some architectures
(notably i386) means that on linux 2.6 there is a small time window
(41 seconds) soon after boot when
.br times ()
can return \-1, falsely indicating that an error occurred.
the same problem can occur when the return value wraps past
the maximum value that can be stored in
.br clock_t .
.\" the problem is that a syscall return of -4095 to -1
.\" is interpreted by glibc as an error, and the wrapper converts
.\" the return value to -1.
.\" http://marc.info/?l=linux-kernel&m=119447727031225&w=2
.\" "compat_sys_times() bogus until jiffies >= 0"
.\" november 2007
.sh see also
.br time (1),
.br getrusage (2),
.br wait (2),
.br clock (3),
.br sysconf (3),
.br time (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/dbopen.3
.\" copyright (c) 2016 pavel emelyanov 
.\" copyright (c) 2016 dmitry v. levin 
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.th sock_diag 7 2021-03-22 "linux" "linux programmer's manual"
.sh name
sock_diag \- obtaining information about sockets
.sh synopsis
.nf
.b #include 
.b #include 
.br "#include " " /* for unix domain sockets */"
.br "#include " " /* for ipv4 and ipv6 sockets */"
.pp
.bi "diag_socket = socket(af_netlink, " socket_type ", netlink_sock_diag);"
.fi
.sh description
the sock_diag netlink subsystem provides a mechanism for obtaining
information about sockets of various address families from the kernel.
this subsystem can be used to obtain information about individual
sockets or request a list of sockets.
.pp
in the request, the caller can specify additional information it would
like to obtain about the socket, for example, memory information or
information specific to the address family.
.pp
when requesting a list of sockets, the caller can specify filters that
would be applied by the kernel to select a subset of sockets to report.
for now, there is only the ability to filter sockets by state (connected,
listening, and so on.)
.pp
note that sock_diag reports only those sockets that have a name;
that is, either sockets bound explicitly with
.br bind (2)
or sockets that were automatically bound to an address (e.g., by
.br connect (2)).
this is the same set of sockets that is available via
.ir /proc/net/unix ,
.ir /proc/net/tcp ,
.ir /proc/net/udp ,
and so on.
.\"
.ss request
the request starts with a
.i "struct nlmsghdr"
header described in
.br netlink (7)
with
.i nlmsg_type
field set to
.br sock_diag_by_family .
it is followed by a header specific to the address family that starts with
a common part shared by all address families:
.pp
.in +4n
.ex
struct sock_diag_req {
    __u8 sdiag_family;
    __u8 sdiag_protocol;
};
.ee
.in
.pp
the fields of this structure are as follows:
.tp
.i sdiag_family
an address family.
it should be set to the appropriate
.b af_*
constant.
.tp
.i sdiag_protocol
depends on
.ir sdiag_family .
it should be set to the appropriate
.b ipproto_*
constant for
.b af_inet
and
.br af_inet6 ,
and to 0 otherwise.
.pp
if the
.i nlmsg_flags
field of the
.i "struct nlmsghdr"
header has the
.br nlm_f_dump
flag set, it means that a list of sockets is being requested;
otherwise it is a query about an individual socket.
.\"
.ss response
the response starts with a
.i "struct nlmsghdr"
header and is followed by an array of objects specific to the address family.
the array is to be accessed with the standard
.b nlmsg_*
macros from the
.br netlink (3)
api.
.pp
each object is the nla (netlink attributes) list that is to be accessed
with the
.b rta_*
macros from
.br rtnetlink (3)
api.
.\"
.ss unix domain sockets
for unix domain sockets the request is represented in the following structure:
.pp
.in +4n
.ex
struct unix_diag_req {
    __u8    sdiag_family;
    __u8    sdiag_protocol;
    __u16   pad;
    __u32   udiag_states;
    __u32   udiag_ino;
    __u32   udiag_show;
    __u32   udiag_cookie[2];
};
.ee
.in
.pp
the fields of this structure are as follows:
.tp
.i sdiag_family
the address family; it should be set to
.br af_unix .
.pp
.i sdiag_protocol
.pd 0
.tp
.pd
.i pad
these fields should be set to 0.
.tp
.i udiag_states
this is a bit mask that defines a filter of sockets states.
only those sockets whose states are in this mask will be reported.
ignored when querying for an individual socket.
supported values are:
.pp
.rs 12
1 <<
.b tcp_established
.pp
1 <<
.b tcp_listen
.re
.tp
.i udiag_ino
this is an inode number when querying for an individual socket.
ignored when querying for a list of sockets.
.tp
.i udiag_show
this is a set of flags defining what kind of information to report.
each requested kind of information is reported back as a netlink
attribute as described below:
.rs
.tp
.b udiag_show_name
the attribute reported in answer to this request is
.br unix_diag_name .
the payload associated with this attribute is the pathname to which
the socket was bound (a sequence of bytes up to
.b unix_path_max
length).
.tp
.b udiag_show_vfs
the attribute reported in answer to this request is
.br unix_diag_vfs .
the payload associated with this attribute is represented in the following
structure:
.ip
.in +4n
.ex
struct unix_diag_vfs {
    __u32 udiag_vfs_dev;
    __u32 udiag_vfs_ino;
};
.ee
.in
.ip
the fields of this structure are as follows:
.rs
.tp
.i udiag_vfs_dev
the device number of the corresponding on-disk socket inode.
.tp
.i udiag_vfs_ino
the inode number of the corresponding on-disk socket inode.
.re
.tp
.b udiag_show_peer
the attribute reported in answer to this request is
.br unix_diag_peer .
the payload associated with this attribute is a __u32 value
which is the peer's inode number.
this attribute is reported for connected sockets only.
.tp
.b udiag_show_icons
the attribute reported in answer to this request is
.br unix_diag_icons .
the payload associated with this attribute is an array of __u32 values
which are inode numbers of sockets that has passed the
.br connect (2)
call, but hasn't been processed with
.br accept (2)
yet.
this attribute is reported for listening sockets only.
.tp
.b udiag_show_rqlen
the attribute reported in answer to this request is
.br unix_diag_rqlen .
the payload associated with this attribute is represented in the following
structure:
.ip
.in +4n
.ex
struct unix_diag_rqlen {
    __u32 udiag_rqueue;
    __u32 udiag_wqueue;
};
.ee
.in
.ip
the fields of this structure are as follows:
.rs
.tp
.i udiag_rqueue
for listening sockets:
the number of pending connections.
the length of the array associated with the
.b unix_diag_icons
response attribute is equal to this value.
.ip
for established sockets:
the amount of data in incoming queue.
.tp
.i udiag_wqueue
for listening sockets:
the backlog length which equals to the value passed as the second argument to
.br listen (2).
.ip
for established sockets:
the amount of memory available for sending.
.re
.tp
.b udiag_show_meminfo
the attribute reported in answer to this request is
.br unix_diag_meminfo .
the payload associated with this attribute is an array of __u32 values
described below in the subsection "socket memory information".
.pp
the following attributes are reported back without any specific request:
.tp
.br unix_diag_shutdown
the payload associated with this attribute is __u8 value which represents
bits of
.br shutdown (2)
state.
.re
.tp
.i udiag_cookie
this is an array of opaque identifiers that could be used along with
.i udiag_ino
to specify an individual socket.
it is ignored when querying for a list
of sockets, as well as when all its elements are set to \-1.
.pp
the response to a query for unix domain sockets is represented as an array of
.pp
.in +4n
.ex
struct unix_diag_msg {
    __u8    udiag_family;
    __u8    udiag_type;
    __u8    udiag_state;
    __u8    pad;
    __u32   udiag_ino;
    __u32   udiag_cookie[2];
};
.ee
.in
.pp
followed by netlink attributes.
.pp
the fields of this structure are as follows:
.tp
.i udiag_family
this field has the same meaning as in
.ir "struct unix_diag_req" .
.tp
.i udiag_type
this is set to one of
.br sock_packet ,
.br sock_stream ,
or
.br sock_seqpacket .
.tp