created by the anonymized node at the other end of the routing path. It verifies the
checksum, and then immediately attempts to create an outgoing connection to the stated AP
address and port.
Figure 19. Outbound routing tunnel creation, step 15
16.  If the external connection attempt does not succeed, the exit node simply closes down the
newly created connection for the tunnel, which will cause a chain reaction closing down all
the parts of the connection, all the way back to the anonymized node, which at this point will
know that the connection attempt failed. If the external connection attempt does succeed, the
exit node sends a dummy data package, having the same size as the tunnel initialization
package and containing only random data, back through the newly established connection.
Similar to the tunnel initialization package, it will be encrypted by each node with the
established key for the connection, and eventually reach the anonymized node, which will
then know that the connection has succeeded, and be able to start using it immediately. At
this point, the routing tunnel creation is complete and the application layer on each side of
the connection is notified of this, and can thus start communicating arbitrary data over the
connection, equivalent to a TCP connection.
Figure 20. Outbound routing tunnel creation, completed
   = Anonymized node
   = Intermediary routing path node
   = Terminating routing path node (exit node)
   = Anonymized node
   = Intermediary routing path node
   = Terminating routing path node (exit node)
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
42(68)
Inbound Routing Tunnel Setup Procedure
Having just described the procedure for securely setting up an outbound routing tunnel, here
follows the procedure for securely setting up an inbound routing tunnel over a pre-existing routing
path:
1.  The entry node of the inbound routing path (i.e. entry path) receives a connection
establishment request from another node in the anonymous network.
Figure 21. Inbound routing tunnel creation, step 1
2.  The entry node prepares a special tunnel initialization package, having the same size as the
initial dummy package in the outbound routing tunnel creation procedure described above,
i.e. the size of a single symmetric crypto block (128 bits or more), containing the following
(just as with all other steps, this will be explained in much more detail in the next section):
2.1.  
A crypto key initialization block, constructed in a way that the risk of falsely
diagnosing it as a positive in a certain kind of test will be one in 232, or less.
2.2.  
The IP address of the connecting node (Note: remember that this is only the IP
address of the node that directly connects to the entry node, i.e. if the node that
initiated this connection is anonymized by means of an exit path, this will only be the
IP address of the exit node of this exit path, thus not revealing any sensitive
information regarding the identity of the remote anonymized node).
2.3.  
The AP address of the anonymized node to which the connecting node intends to
create a connection.
3.  The entry node performs the following sub-procedure, which is then repeated by all
subsequent nodes in the routing path:
3.1.  
The node randomly selects one of the stream encryption keys from its local set of
such keys, which it generated previously in step 11.13 of the routing path creation
process.
3.2.  
The node encrypts the tunnel initialization package (at this point already previously
encrypted by all preceding nodes in the routing path, except of course for the entry
node, which doesn’t have any preceding nodes and was the one to prepare the
package to begin with), as a single block, with the chosen key.
3.3.  
The node saves the encrypted tunnel initialization package in a time limited cache
(containing all such recently forwarded tunnel initialization packages), together with
the encryption key that was chosen for the package, and then sends off the
encrypted tunnel initialization package to the next intermediate node in the routing
path (i.e. its adjacent X-node, if using the same nomenclature as during the creation
procedure for routing paths) over the already established connection remaining since
the routing path setup process.
   = Anonymized node
   = Intermediary routing path node
   = Terminating routing path node (entry node)
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
43(68)
Figure 22. Inbound routing tunnel creation, step 3
4.  The anonymized node that owns the routing path receives the tunnel initialization package
after it has traversed the entire routing path, at this point being encrypted once by each of its
intermediate nodes, with randomly selected keys from each of their individual sets of stream
encryption keys, which are known by the anonymized node (since it created the seeds and
parameters for generating these keys, and can thus duplicate this process locally).
5.  The anonymized node calculates which exact key out of its known set of keys that each
individual node in the routing path has selected for this particular tunnel, i.e. the key that was
used by each of them to encrypt the tunnel initialization package. This is done by brute
forcing over all keys in all the known sets of keys for each individual node in the routing path.
The number of keys in the set of each node can be arranged in a way that this entire
operation takes no more than e.g. 0.1 – 0.5 seconds (or any other chosen length of time),
during which, nevertheless, a considerable amount of e.g. AES blocks can be processed in
memory. The test that is performed on the resulting plaintext block to know if a certain brute
force attempt was successful is related to the crypto key initialization block, mentioned in
step 2.1 above (just as with all other steps, this will be explained in much more detail in the
next section).
6.  When all the chosen keys of each individual node in the entire routing path have been
recovered, a final validation of the target AP address of the connection is performed, to
confirm that it was indeed intended for the actual AP address that the anonymized node has
registered. In addition, this can be seen as an extension to the brute force key recovery
procedure in the previous step, which reduces the risk of false positives to one in 264. Under
normal circumstances, the AP address should always match (possible exception conditions
will be discussed later).
7.  The anonymized node prepares a special tunnel initialization reply package, of the same
size as the original tunnel initialization package, containing the following (just as with all
other steps, this will be explained in much more detail in the next section):
7.1.  
A flag block, containing multiple flags for communication of exceptional
circumstances from the anonymized node to the entry node.
7.2.  
A secure checksum.
8.  The anonymized node encrypts the tunnel initialization reply package with all the individual
keys of the routing path nodes, in the appropriate sequence, in such a way that it will be
decrypted correctly once it reaches the entry node.
9.  The anonymized node establishes a completely new connection to the previous node in the
routing path, i.e. to the same IP address and port used during the original routing path setup
procedure, authenticated with the original connection ID used between the nodes in the
original routing path setup procedure. A copy of the originally received tunnel initialization
package is then sent over this connection, immediately followed by the new and repeatedly
encrypted tunnel initialization reply package.
   = Anonymized node
   = Intermediary routing path node
   = Terminating routing path node (entry node)
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
44(68)
10.  The receiving X-node performs the following sub-procedure, which is then repeated by all
subsequent nodes in the routing path:
10.1.  The node authenticates the incoming connection by its IP address combined with the
given connection ID.
10.2.  The node matches the connection to the corresponding previously forwarded tunnel
initialization package (and thus also the correct encryption key which was chosen
during that forwarding procedure, described in step 3 above), by matching the first
data block that arrives over the connection against the time limited cache of all such
previously forwarded tunnel initialization packages. The matching entry is then
removed from the cache after the encryption key for the new connection has been
stored separately.
10.3.  The node decrypts both the first received data block (i.e. the copy of the originally
forwarded tunnel initialization package) and the second one (i.e. the new tunnel
initialization reply package), using the encryption key derived in the previous step.
10.4.  The node establishes a new connection to the previous node in the routing path, i.e.
to the same IP address and port used during the original routing path setup
procedure, and authenticates it in both directions by means of the original connection
ID used between the nodes in the original routing path setup procedure, and the
previously stored (during the routing path setup procedure) “server-side” SSL
certificate for this previous node.
10.5.  The node sends the two decrypted data blocks (i.e. the copy of the originally
forwarded tunnel initialization package, and the new tunnel initialization reply
package) over the newly established and authenticated connection, in the same
order that they were received.
Figure 23. Inbound routing tunnel creation, step 10
11.  The entry node finally receives the tunnel initialization reply package, after it has traversed
the entire routing path, at this point being decrypted into the plaintext state in which it was
created by the anonymized node in the other end of the routing path. The flags of the
package can now be interpreted by the entry node, and under normal circumstances
everything should be ok, and the routing tunnel has now been successfully established
throughout the entire routing path.
12.  The entry node notifies the external node that submitted the original connection
establishment request that the tunnel has been set up and is ready for communication (the
nature of this communication will be described in the section regarding secure
communication over routing tunnels, below).
   = Anonymized node
   = Intermediary routing path node
   = Terminating routing path node (entry node)
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
45(68)
Figure 24. Inbound routing tunnel creation, completed
13. This last step is completely unnecessary for the functionality of this procedure. It is only
implemented in order to make the inbound routing tunnel setup process identical and
symmetrical to the outbound routing tunnel setup process, in regards to any external
observers or even any intermediary node in the routing path.
The entry node sends a dummy data package, having the same size as the tunnel
initialization package and containing only random data, back through the newly established
connection. Equivalent to the matching step of the outbound tunnel establishment procedure
(step 14), it will be decrypted by each node with its established key for the connection, and
eventually reach the anonymized node, which will just discard it and send a new random
package of the same size back through the connection. Equivalent to the matching step of
the outbound tunnel establishment procedure (step 16), it will be encrypted by each node
with its established key for the connection, and eventually reach the entry node, which will
then discard it. At this point, the inbound routing tunnel creation is complete and the
application layer on each side of the connection is notified of this, and can thus start
communicating arbitrary data over the connection, equivalent to a TCP connection.
Again, these two different procedures described above, for creation of inbound and outbound
routing tunnels, are completely identical and symmetrical to any external parties. This holds true
both in regards to any external eavesdropper monitoring all traffic for all the nodes in the entire
routing path except the anonymized node itself and the terminating node, and also even for the
intermediate X-nodes themselves, being the actual nodes constituting the tunnel. Thus, neither of
these parties will be able to conclude any information about what kind of routing tunnel is being
created (i.e. an inbound or outbound tunnel), or at which side of the routing path the anonymized
node that owns it is located. This is, of course, yet another measure to improve the anonymity of
the end-point nodes.
   = Anonymized node
   = Intermediary routing path node
   = Terminating routing path node (entry node)
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
46(68)
7.2.3.   
Secure Establishment of Routing Tunnels – Low-Level Details
In this section, all the steps from the previous section (i.e. the “low level overview”) will be
repeated again, in grey and without the figures, and comments will be added (in normal black) to
further explain the design decisions behind each step, where necessary.
Outbound Routing Tunnel Setup Procedure
1.  The anonymized node owning the outbound routing path (i.e. exit path) wants to establish a
connection to another node in the anonymous network.
2.  The anonymized node generates a dummy random data package, having the size of a single
symmetric crypto block (i.e. 128 bits or more), and sends this package off through the pre-
existing connection to the next intermediate node in the routing path.
Using the size of a single crypto block is good for preventing an attacker from piggy-backing data
with the block as it is being forwarded through the tunnel. In the case of a single symmetric crypto
block, the entire plaintext contents of it will become completely corrupted if only a single bit of it is
altered by any node in the routing path.
3.  Each subsequent node in the routing path then performs the following sub-procedure:
3.1.  
The node randomly selects one of the stream encryption keys from its local set of
such, which it generated previously in step 11.13 of the routing path creation
process.
3.2.  
The node encrypts the (at this point already previously encrypted by all preceding
nodes in the routing path) dummy package with the chosen key, as a single block.
3.3.  
The node saves the encrypted dummy package in a time limited cache (containing all
such recently forwarded dummy packages), together with the encryption key that was
chosen for the package, and then sends off the encrypted dummy package to the
next intermediate node in the routing path (i.e. its adjacent X-node if using the same
nomenclature as during the creation procedure for routing paths) over the already
established connection remaining since the routing path setup process.
4.  The exit node receives the dummy package after it has traversed the entire routing path, at
this point being encrypted once by each of its intermediate nodes, with randomly selected
keys from each of their individual sets of stream encryption keys.
5.  The exit node prepares a special tunnel initialization package, having the size of a single
symmetric crypto block (i.e. 128 bits or more), containing the following (just as with all other
steps, this will be explained in much more detail in the next section):
5.1.  
A crypto key initialization block, constructed in such a way that the risk of falsely
diagnosing it as a positive in a certain kind of test will be one in 232, or less.
5.2.  
A checksum of the contents of the package.
The crypto key initialization block could be anything that enables it to be tested really quickly and
efficiently for internal consistency of some kind. One very simple example is to have two 32-bit
blocks containing the exact same data (any random number). Thus, the test for internal
consistency could be performed simply by comparing the two to see if they are equal or not.
The probability of a random 64-bit crypto key initialization block passing this test would be one in
232, and the extra checksum in the tunnel initialization package will make sure to decrease the
probability of false positives to one in 296. The extra checksum test will practically never have to
be used in the primary quick consistency test though, only in the cases where a false positive
passes the primary test, which will be too infrequently to affect the testing speed anyway. This
assures very high consistency test speeds (which will be important in a later step), while still not
increasing the probability of false positives as a trade-off.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
47(68)
6.  The exit node encrypts the tunnel initialization package with the previously chosen stream
encryption key, as a single block.
7.  The exit node establishes a completely new connection to the previous node in the routing
path, i.e. to the same IP address and port used during the original routing path setup
procedure, authenticated with the original connection ID used between the nodes in the
original routing path setup procedure. A copy of the originally received dummy package is
then sent over this connection, immediately followed by the new and encrypted tunnel
initialization package.
8.  The receiving X-node performs the following sub-procedure, which is then repeated by all
subsequent nodes in the routing path:
8.1.  