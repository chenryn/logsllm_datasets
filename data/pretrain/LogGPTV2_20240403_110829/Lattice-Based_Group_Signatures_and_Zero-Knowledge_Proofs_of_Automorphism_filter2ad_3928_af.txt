, we will consider the set of identities
(cid:7), and gT be the gadget matrix (cid:2)1 δ(cid:3) ∈ R1×2
(cid:20)aT
← CSetup(1λ), with a1 ∈ R3
(cid:21)
q1, and a2 ∈ R3
q2.
GSetup(1λ):
q2
q2
and set bT = aT R ∈ R1×2
.
q2
(cid:3)s01
1
– Sample A :=
aT
2
– Sample a $← R2
q2.
– Sample R $← S2×2
– Sample (s01, s02, s03) ← D2
1
r
2
s × D3
s × D2
– Set gpk := (A, a, b, u)
– For i ∈ Z∗
– For i ∈ Z∗
s02
s03
q2, sample si3 ← D3
q2, sample (si1, si2) ∈ R4 s.t
– Set u :=(cid:2)aT | bT | aT
(cid:2)aT | bT + igT(cid:3)(cid:20)si1
a small s ∈ R7 such that(cid:2)aT | bT + igT | aT
the matrix (cid:2)aT | bT + igT | aT
= u − aT
(cid:21)
si2
r
2 si3, and (si1, si2) ← D4
s
– For i ∈ Zq2, set ski := si := (si1, si2, si3)
Intuitively user i could sign a message M ∈ {0, 1}∗ by doing a non-interactive proof that he knows
(cid:3) s = u in which the message is part of the hash that
(cid:3) to verify the signature and since a, a2, b, and g are public, he
generates the challenge. However doing so would reveal his identity – a veriﬁer would need to know
2
2
could recover the identity of the signer. As explained in section 1.2, we circumvent this issue by
committing to the part of the matrix that depends on i (that is igT ) and proving knowledge of a
solution to a related equation.
Sign(M, si):
– Set t :=
(cid:20)t1
(cid:21)
(cid:21)
(cid:20)t(cid:48)
t2
t(cid:48)
1
= Com(i, r) ∈ Rq1 × Rq2, where r ← S3
1 .
= Com(iδ, r(cid:48)), where r(cid:48) ← S3
1 .
– Set t(cid:48) :=
– Set vT := (cid:2)aT | bT +(cid:2)t2 t(cid:48)
2
2
(cid:3) | aT
2
(cid:3) ∈ R1×7
q2
vT s(cid:48) = u
– In parallel (see below for explanation):
, and s(cid:48) =
22
si3 −(cid:2)r r(cid:48)(cid:3) si2
si1
si2
 ∈ R7, observe that
• Compute a proof Π1 that t, t(cid:48) open to messages m, m(cid:48) such that m(cid:48) = δm
• Compute a proof Π2 that t opens to a message m such that m = σ−1(m) = σ−5(m)
• Compute a proof Π3 of knowledge of s(cid:48) such that vT ¯s = u
– Output the signature z = (t, t(cid:48), Π1, Π2, Π3)
The proofs Π1, Π2, Π3 will use the Fiat-Shamir heuristic to transform the interactive proofs of Sec-
tion 4 into non-interactive proofs in the random oracle model, we will also include the message M
in the random oracle call to obtain a signature. For extraction, we will need all of these proofs to be
executed with the same challenge (or output of the hash function in the non-interactive version).
This is done in the standard way with the signer running all three proofs in parallel and, in the
non-interactive version, computing a common challenge for all three as a hash of all the relevant
information. We describe the full non-interactive proof, including the opening, in more details in
Section 7.
To verify a signature one simply veriﬁes the proofs Π1, Π2, Π3.
Verify(t, t(cid:48), Π1, Π2, Π3):
– Let
(cid:21)
(cid:21)
(cid:20)t1
(cid:20)t(cid:48)
t2
t(cid:48)
2
:= t
:= t(cid:48)
1
– Let
– Let vT =(cid:2)aT | bT +(cid:2)t2 t(cid:48)
– Verify Π1 using t, t(cid:48), δ
– Verify Π2 using t, σ−1, σ5
– Verify Π3 using v
2
(cid:3) | aT
2
(cid:3)
5.2 Adding the Opening
To be able to open the group signature scheme of Section 5.1 we will add a veriﬁable encryption to
the signature. In essence we want the signer to encrypt his identity, using a public key associated
to a decryption key that the group manager possesses, and prove that this encryption is indeed of
his identity. To do so we will encrypt the randomness r of t = Com(id; r) and prove that aT
1 r = t1,
note that encrypting id directly would result in a smaller ciphertext but a very large proof since id
itself is not small. We use the veriﬁable encryption of [LN17] which consists in a R-LW E encryption
and a proof of knowledge. We let p be the modulus of the plaintext space of our encryption scheme
(which we only need large enough to accommodate the decryption slack, see [LN17]) and Q the
modulus of the ciphertext.
PKESetup(1λ):
– Sample a $← RQ
– Sample s, e ← S3
– Set b := as + e ∈ R3
– Output (s, (a, b))
1
Q
Encryption will consist in creating a standard R-LW E encryption and a proof that the message r
encrypted is the randomness in t = Com(id; r).
Enc((a, b), r, t1):
23
1
– Set B1 :=
pb1 0 p 0 0 1 0 0
pb2 0 0 p 0 0 1 0
pb3 0 0 0 p 0 0 1
– Sample r, e1 ← S1
– Sample e2 ← S3
– Set u := p(ar + e1)
– Set v := p(br + e2) + m
 pa p 0 0 0 0 0 0
– Set B2 :=(cid:2)01×5 aT
(cid:3) ∈ R1×8
(cid:20)B1
(cid:21)
 ∈ R8
 r
 u
 ∈ R4
Q × Rq1
– Set B :=
1
q1
 ∈ R4×8
Q
– Set x :=
– Set y :=
B2
e1
e2
r
v
t1
– Compute a proof Π of knowledge of x such that Bx = y.
– Output (u, v, Π)
To verify an encryption one simply veriﬁes the proof Π.
Verify((u, v, Π), t1) :
– Set B1, B2, B, y as in Enc above.
– Output Verify(Π, B, y)
Decryption is not as simple as standard R-LWE decryption. By completeness we know that hon-
estly generated ciphertexts can be decrypted but soundness should guarantee that as long as the
proof veriﬁes one should be able to decrypt. This is not clear since the proof Π does not imply that
(u, v) is a valid ciphertext but that there exists some ¯c ∈ ¯C such that (¯cu, ¯cv) is a valid ciphertext
and we do not know which one. In [LN17] the authors show that in fact trying random ¯c is a valid
approach and the expected number of attempts is the same as the expected number of oracle calls
that are needed to generate the proof (in particular only one attempt is necessary if the prover is
honest). This will be suﬃcient for our scheme.
Dec((u, v, Π), s) :
– If Verify((u, v, Π), t1) = 1, Let c be the challenge used in Π
– Loop:
–
–
–
–
–
–
c(cid:48) ← C
¯c := c − c(cid:48)
¯r := (v − us)¯c mod Q
If (cid:107)¯r(cid:107)∞ ≤ Q/8κ then:
¯r := ¯r mod q
return (¯r, ¯c)
24
The following lemma shows that if decryption succeeds then the decrypted value (¯r, ¯c) will essen-
tially be a preimage for the zero-knowledge proof.
Lemma 5.1 ([LN17] Lemma 3.1). Let sk = s, and e be the error in b = as + e. If for given
Q × Rq1
there exists ¯rB := (¯r, ¯e1, ¯e2, ¯r) ∈ R8, and ¯c ∈ R such that :
(u, v, t1) ∈ R4
BrB =
 u mod Q
v mod Q
t1 mod q1
and
(cid:107)p(¯ue + ¯e2 − ¯es) + ¯r(cid:107)∞ ≤ Q/4κ
(16)
Then for (¯r(cid:48), ¯c(cid:48)) = Dec(u, v, Π, t1), we have:
¯r
¯c
mod p =
¯r(cid:48)
¯c(cid:48) mod p
Once we have veriﬁable encryption, adding traceability to our group signature is straightforward.
During key generation we will create (pk, sk) ← PKESetup(1λ), add pk to the group public key
and set gmsk = sk. When signing a user will compute an encryption v of his randomness r, which
is such that aT
1 r = t1 mod q1, and add v to the signature. For veriﬁcation one only needs to check
the extra proof Π. We consider how to open a signature, this is not completely straightforward
because soundness only guarantees that a verifying signature will open to ¯cr for some ¯c ∈ ¯C.
Open(msk, z) :
– Parse z as (t, t(cid:48), Π1, Π2, Π3, v)
– Let (¯r, ¯c) =Dec(msk, t1, z)
– Set id := ¯c−1(t2 − aT
2 ¯r) ∈ Rq2
– If id ∈ Zq2 then output id, otherwise output ⊥
Note that if decryption succeeds then the proof Π veriﬁes, which entails that there exists ¯r(cid:48), ¯c(cid:48)
such that aT
1 ¯r(cid:48) = ¯c(cid:48)t1 mod q1 and by lemma 5.1 we know that:
¯r
¯c
mod p =
¯r(cid:48)
¯c(cid:48) mod p
if we multiply this equation by ¯c and ¯c(cid:48) we have that ¯r(cid:48)¯c = ¯r¯c(cid:48) mod p, and since both sides are
smaller than p this equation will be true over the integer. From which we get:
aT
1 ¯r = ¯ct1 mod q1
which entails that if t = (t1, t2) is a well formed commitment the identity returned by the Open
algorithm will be its message.
25
6 Security Proofs
6.1 Security of The Commitment
Lemma 6.1 (Binding). Let κ ≥ max
c∈C ((cid:107)c(cid:107)1). If there is an adversary A who can output a commit-
ment t with two valid openings (m, r, c) and (m(cid:48), r(cid:48), c(cid:48)) such that m (cid:54)= m(cid:48) with probability ε, then
there is an algorithm A(cid:48) who can break M -SISq1,n,m,4κBCom in the same time and with advantage
ε.
ξ
ξ(cid:48)×Dk−n
, where ξ(cid:48) =
We prove the hiding property for a slightly modiﬁed variant of our commitment scheme in which
ξ + 1 + 2d(k − n − l)ξ2. This diﬀerence
the error is sample according to Dn
is mostly an artefact of the modulus switching used in the proof. We use the distribution Sk
1 in our
paper as it makes for easier analysis and implementation and does not entail better attacks.
Lemma 6.2 (Hiding). For any m, m(cid:48) ∈ Rl
q2, if there is an adversary A who can distinguish
between Com(m) and Com(m(cid:48)) with advantage ε, then there exists an algorithm A(cid:48) who runs in
the same time and breaks M -LW Eq2,m−n−l,ξ with probability ε/2.
Proof. Given an instance (B, y) ∈ R(n+l)×(m−n−l)
of M-LWEq2,m−n−l,ξ, parse B and y
. Let ρ : R → Z be a randomized rounding function which maps x ∈ R to
as
ρ(x) ← (cid:98)x(cid:99) + Bx−(cid:98)x(cid:99), where Bx−(cid:98)x(cid:99) is a Bernouilli variable which outputs 1 with probability
x − (cid:98)x(cid:99). Remark that for q1 ≤ q2, ρ
y1).
A(cid:48) samples R $← Rn×l
(cid:20)B1