文章来源：
* * *
### 前言
不是所有目录遍历漏洞危害都相同，取决于遍历的用法以及用户交互程度。正如你将看到，本文的这个漏洞类在代码中非常难发现，但可以造成巨大的影响。
这个漏洞存在于思科Prime
Infrastructure项目，思科为其申请编号：[CVE-2019-1821](https://srcincite.io/advisories/src-2019-0034)。因为我无法测试新补丁（我没有思科的证件），不清楚漏洞补丁的具体情况，因此我决定分享漏洞详情，希望有人可以验证补丁的稳定性。
TL;DR
在这篇文章我会讨论[CVE-2019-1821](https://srcincite.io/advisories/src-2019-0034)的挖掘过程并演示攻击，该漏洞属于未经身份验证的服务器端远程代码执行漏洞。
### 思科Prime Infrastructure
[思科官网](https://www.cisco.com/c/en/us/products/cloud-systems-management/prime-infrastructure/index.html)是这样描述Prime Infrastructure（PI）的：
> 思科Prime Infrastructure可以帮助你简化工作，自动化管理任务，它结合了思科网络智能设备的精华。思科Prime
> Infrastructure的特性和功能可以帮助你整合产品，通过网络实现移动端协作，简化WLAN管理…
老实说，我仍不知道它到底是干嘛的，于是我转到[维基百科](https://en.wikipedia.org/wiki/Cisco_Prime)查找词条：
> 思科Prime是一个网络管理软件套件，由思科系统的其他软件一起构成。其中大部分软件服务于企业或服务提供商网络。
### 发现目标
这个漏洞是我在 **PI-APL-3.4.0.0.348-1-K9.iso (d513031f481042092d14b77cd03cbe75)**
上复现[Pedro的CVE-2018-15379](https://github.com/pedrib/PoC/blob/master/advisories/cisco-prime-infrastructure.txt#L27)时偶然发现的，那时我正在测试补丁 **PI_3_4_1-1.0.27.ubf
(56a2acbcf31ad7c238241f701897fcb1)**
的稳定性。从Github上的描述你可以发现，两个完全不同的漏洞被赋予了同一个CVE编号。
    piconsole/admin# show version
    Cisco Prime Infrastructure
    ********************************************************
    Version : 3.4.0
    Build : 3.4.0.0.348
    Critical Fixes:
            PI 3.4.1 Maintenance Release ( 1.0.0 )
执行默认安装后，为了阅读源代码我将可用性设置为高。根据Cisco Prime
Infrastructure[说明文档](https://www.cisco.com/c/en/us/td/docs/net_mgmt/prime/infrastructure/3-4/admin/guide/bk_CiscoPrimeInfastructure_3_4_AdminGuide/bk_CiscoPrimeInfastructure_3_4_AdminGuide_chapter_01010.html)，这种设置其实是一种标准做法。看起来很复杂的过程，其实就是部署两个不同的PI安装程序，其中一个为HA主服务器，另一个是HA辅助服务器。
消耗大量RAM和磁盘空间后，安装配置完毕：
另外，有个朋友告诉我他在3.5版本上成功复现了该漏洞（CVE-2018-15379），并立即向思科报告。
### 漏洞分析
在`/opt/CSCOlumos/healthmonitor/webapps/ROOT/WEB-INF/web.xml`有以下入口：
        UploadServlet
        UploadServlet
            com.cisco.common.ha.fileutil.UploadServlet
        UploadServlet
        /servlet/UploadServlet
这里的UploadFile Servlet属于应用 **健康监视器** 管理范围，需要配置高可用性才可以访问。
`/opt/CSCOlumos/lib/pf/rfm-3.4.0.403.24.jar`定义了`UploadServlet`类：
    public class UploadServlet
      extends HttpServlet
    {
      private static final String FILE_PREFIX = "upload_";
      private static final int ONE_K = 1024;
      private static final int HTTP_STATUS_500 = 500;
      private static final int HTTP_STATUS_200 = 200;
      private boolean debugTar = false;
      public void init() {}
      public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws IOException, ServletException
      {
        String fileName = null;
        long fileSize = 0L;
        boolean result = false;
        response.setContentType("text/html");
        String destDir = request.getHeader("Destination-Dir");                              // 1
        String archiveOrigin = request.getHeader("Primary-IP");                             // 2
        String fileCount = request.getHeader("Filecount");                                  // 3
        fileName = request.getHeader("Filename");                                           // 4
        String sz = request.getHeader("Filesize");                                          // 5
        if (sz != null) {
          fileSize = Long.parseLong(sz);
        }
        String compressed = request.getHeader("Compressed-Archive");                        // 6
        boolean archiveIsCompressed;
        boolean archiveIsCompressed;
        if (compressed.equals("true")) {
          archiveIsCompressed = true;
        } else {
          archiveIsCompressed = false;
        }
        AesLogImpl.getInstance().info(128, new Object[] { "Received archive=" + fileName, " size=" + fileSize + " from " + archiveOrigin + " containing " + fileCount + " files to be extracted to: " + destDir });
        ServletFileUpload upload = new ServletFileUpload();
        upload.setSizeMax(-1L);
        PropertyManager pmanager = PropertyManager.getInstance(archiveOrigin);              // 7
        String outDir = pmanager.getOutputDirectory();                                      // 8
        File fOutdir = new File(outDir);
        if (!fOutdir.exists()) {
          AesLogImpl.getInstance().info(128, new Object[] { "UploadServlet: Output directory for archives " + outDir + " does not exist. Continuing..." });
        }
        String debugset = pmanager.getProperty("DEBUG");
        if ((debugset != null) && (debugset.equals("true")))
        {
          this.debugTar = true;
          AesLogImpl.getInstance().info(128, new Object[] { "UploadServlet: Debug setting is specified" });
        }
        try
        {
          FileItemIterator iter = upload.getItemIterator(request);
          while (iter.hasNext())
          {
            FileItemStream item = iter.next();
            String name = item.getFieldName();
            InputStream stream = item.openStream();                                         // 9
            if (item.isFormField())
            {
              AesLogImpl.getInstance().error(128, new Object[] { "Form field input stream with name " + name + " detected. Abort processing" });
              response.sendError(500, "Servlet does not handle FormField uploads."); return;
            }
                                                                                            // 10
            result = processFileUploadStream(item, stream, destDir, archiveOrigin, archiveIsCompressed, fileName, fileSize, outDir);
            stream.close();
          }
        }
代码从用户请求中获取[1]，[2]，[3]，[4]，[5]和[6] 6个参数。分别是`destDir`, `archiveOrigin`,
`fileCount`，`fileName`, `fileSize` (为长值) 和`compressed`（为布尔值）。
然后[7]要求提供匹配的`Primary-IP`，用于[8]获取`outDir`。[9]代码会从上传的文件中获取流输入，然后[10]调用函数`processFileUploadStream`返回结果。
溯源函数`processFileUploadStream`：
    private boolean processFileUploadStream(FileItemStream item, InputStream istream, String destDir, String archiveOrigin, boolean archiveIsCompressed, String archiveName, long sizeInBytes, String outputDir)
      throws IOException
    {
      boolean result = false;
      try
      {
        FileExtractor extractor = new FileExtractor();                                                    // 11
        AesLogImpl.getInstance().info(128, new Object[] { "processFileUploadStream: Start extracting archive = " + archiveName + " size= " + sizeInBytes });
        extractor.setDebug(this.debugTar);
        result = extractor.extractArchive(istream, destDir, archiveOrigin, archiveIsCompressed);          // 12
[11]处，代码创建一个新的`FileExtractor`然后在[12]处调用函数`extractArchive`，其中用户控制的`istream`,`destDir`,`archiveOrigin`和`archiveIsCompressed`也被带入。
溯源FileExtractor类：
    public class FileExtractor
    {
      ...
      public boolean extractArchive(InputStream ifstream, String destDirToken, String sourceIPAddr, boolean compressed)
      {
        if (ifstream == null) {
          throw new IllegalArgumentException("Tar input stream not specified");
        }
        String destDir = getDestinationDirectory(sourceIPAddr, destDirToken);                               // 13
        if ((destDirToken == null) || (destDir == null)) {
          throw new IllegalArgumentException("Destination directory token " + destDirToken + " or destination dir=" + destDir + " for extraction of tar file not found");
        }
        FileArchiver archiver = new FileArchiver();
        boolean result = archiver.extractArchive(compressed, null, ifstream, destDir);                      // 14
        return result;
      }
[13]处，代码会调用`getDestinationDirectory`函数，并带入用户可控的`sourceIPAddr`和`destDirToken`。其中`destDirToken`参数需为有效的目录token值，因此我将使用`tftpRoot`字符串。下面是`HighAvailabilityServerInstanceConfig`类中的`tftpRoot`字符：
    if (name.equalsIgnoreCase("tftpRoot")) {
      return getTftpRoot();
    }
然后，[14]处代码会调用`extractArchive`函数，其中包含`compressed`，`ifstrean和destDir`的值。
跟进该函数：
    public class FileArchiver