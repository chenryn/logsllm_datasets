## PostgreSQL 如何轻松搞定行驶、运动轨迹合并和切分  
### 作者  
digoal  
### 日期  
2016-06-11   
### 标签  
PostgreSQL , PostGIS , 轨迹   
----  
## 背景  
物联网兴起，GPS终端也越来越普及，比如车载的终端，带GPS功能的手表，手机等等。  
比如滴滴打车，出租车都记录了车辆的行驶的位点。  
位点通常会带有终端ID，经纬度，时间等信息。  
但是我们如何将这些点的信息合并成车辆的运行轨迹呢？并不是粗暴的聚合这么简单。  
因为车辆在使用过程中会遇到等红灯，停车等乘客，穿越没有GPS信号的地方（如隧道），或者终端异常，未打开GPS记录等情况。  
直接将行驶记录的位置信息串起来之后并不是真正的运行轨迹。  
那么怎么合并或切分成有价值的连续行驶的数据呢？  
一种较为通用的手段，通过距离，时间两个维度的差值阈值，可以将一个大的轨迹切分成多个连续的轨迹片段。  
为了演示方便，我这里以二维的点状数据为例，给大家展示一下切分和合并的方法。  
实际生产通常使用的是PostgreSQL的地理位置插件PostGIS(被称之为"宇宙最强"的开源GIS管理系统)。  
## 测试数据  
```  
postgres=# create table test (id int, pos point, ts timestamp);  
CREATE TABLE  
-- id 终端ID  
-- pos 位置  
-- ts 时间  
-- 生成100万测试记录  
postgres=# insert into test select trunc(1000*random()), ( '('||trunc(1000*random())||','||trunc(1000*random())||')' )::point, now() + (''||trunc(10000*random())||' second') ::interval from generate_series(1,1000000);  
INSERT 0 1000000  
postgres=# select * from test where id=1 order by ts limit 10;  
 id |    pos    |             ts               
----+-----------+----------------------------  
  1 | (242,463) | 2016-06-10 23:50:18.433406  
  1 | (869,986) | 2016-06-10 23:50:18.433406  
  1 | (542,704) | 2016-06-10 23:50:19.433406  
  1 | (746,42)  | 2016-06-10 23:50:32.433406  
  1 | (843,161) | 2016-06-10 23:50:45.433406  
  1 | (40,288)  | 2016-06-10 23:50:55.433406  
  1 | (617,176) | 2016-06-10 23:51:05.433406  
  1 | (615,198) | 2016-06-10 23:51:07.433406  
  1 | (491,361) | 2016-06-10 23:51:14.433406  
  1 | (566,956) | 2016-06-10 23:51:20.433406  
(10 rows)  
```  
如果进来的是数组，首先使用unnest解析成行, 例子  
```  
postgres=# select unnest(array[(1,'(1,1)','2016-01-01')::test, (1,'(1,100)','2016-01-02')::test]);  
               unnest                  
-------------------------------------  
 (1,"(1,1)","2016-01-01 00:00:00")  
 (1,"(1,100)","2016-01-02 00:00:00")  
(2 rows)  
```  
进来的如果不是数组，已经是行，可以省略前面一步。  
## 切分DEMO  
设置两个维度的阈值  
1\. 相邻两点的距离  
距离很大，说明可能是中间异常了。  
2\. 相邻两点的时间差  
距离很短，但是时间很长，说明可能是车子静止了，例如停车等乘客，或者吃饭什么的。  
为了方便解释，分解成几步  
创建视图  
```  
create view v1 as    
select   
  id,   
  pos_e,  
  ts_e,   
  rn,   
  case when rn>1 then point_distance(pos_s, pos_e) else 0 end pos_distance,  
  case when rn>1 then ts_e-ts_s else interval '0 sec' end ts_distance  
from   
(  select    
     id,   
     row_number() over (partition by id order by ts) rn,  
     lag(pos) over (partition by id order by ts) pos_s,  
     pos pos_e,  
     lag(ts) over (partition by id order by ts) ts_s,  
     ts ts_e  
    from test ) t;  
postgres=# select * from v1 limit 10;  
 id |   pos_e   |            ts_e            | rn |   pos_distance   | ts_distance   
----+-----------+----------------------------+----+------------------+-------------  
  0 | (571,395) | 2016-06-10 23:50:21.433406 |  1 |                0 | 00:00:00  
  0 | (548,943) | 2016-06-10 23:50:37.433406 |  2 | 548.482451861498 | 00:00:16  
  0 | (638,497) | 2016-06-10 23:50:57.433406 |  3 | 454.990109782619 | 00:00:20  
  0 | (5,214)   | 2016-06-10 23:50:57.433406 |  4 | 693.381568834938 | 00:00:00  
  0 | (355,720) | 2016-06-10 23:51:00.433406 |  5 | 615.252793573503 | 00:00:03  
  0 | (472,670) | 2016-06-10 23:51:10.433406 |  6 |  127.23600119463 | 00:00:10  
  0 | (930,952) | 2016-06-10 23:51:29.433406 |  7 | 537.854999047141 | 00:00:19  
  0 | (893,145) | 2016-06-10 23:51:31.433406 |  8 | 807.847757934625 | 00:00:02  
  0 | (700,91)  | 2016-06-10 23:51:45.433406 |  9 | 200.412075484488 | 00:00:14  
  0 | (465,697) | 2016-06-10 23:51:52.433406 | 10 |  649.96999930766 | 00:00:07  
(10 rows)  
```  
视图字段含义  
```  
postgres=# \d+ v1  
                                View "public.v1"  
    Column    |            Type             | Modifiers | Storage | Description   
--------------+-----------------------------+-----------+---------+-------------  
 id           | integer                     |           | plain   |   终端ID  
 pos_e        | point                       |           | plain   |   位置  
 ts_e         | timestamp without time zone |           | plain   |   时间点  
 rn           | bigint                      |           | plain   |   终端轨迹按时间顺序的序号  
 pos_distance | double precision            |           | plain   | 与前一个点的距离  
 ts_distance  | interval                    |           | plain   | 与前一个点的时间差  
```  
得到切分点的SQL  
```  