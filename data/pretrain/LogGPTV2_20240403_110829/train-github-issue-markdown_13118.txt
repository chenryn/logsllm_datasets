I found an odd discrepancy when creating a custom dtype in numpy. The code
below:
    import numpy as np
    print "VERSION", np.__version__
    def f(data, size):
        return np.frombuffer(data, np.dtype([('d', 'i', size)]))
    d1 = np.arange(1)
    d2 = np.arange(2)
    a1 = f(d1, 1)
    a2 = f(d2, 2)
    b1 = f(d1, [1])
    b2 = f(d2, [2])
    print "a1['d'].shape: ",  a1['d'].shape, " b1['d'].shape: ", b1['d'].shape
    print "a2['d'].shape: ",  a2['d'].shape, " b2['d'].shape: ", b2['d'].shape
produces this:
    VERSION 1.12.1
    a1['d'].shape:  (1L,)  b1['d'].shape:  (1L, 1L)
    a2['d'].shape:  (1L, 2L)  b2['d'].shape:  (1L, 2L)
where `a1['d'].shape` is the odd one out. This inconsistency is annoying...
but at least it seems like always defining the size with a list produces
consistent behavior.
I did a quick search and I didn't see a duplicate, but I might have missed it.