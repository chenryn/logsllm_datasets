提示：
false。
母变量名。只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回
采用两种不同的形式之一："a==b"或"al=b"。在这里，a 和b 是小写字母（不一定不同），表示单字
给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 equations[il 的长度为 4，并
题目大意
Note:
Example 5: 
Example 4: 
 Example 3: 
Example 2: 
1. 1 .'.=iq..q==e.] :nduI
Output: true 
Input: ["a==b","b==c","a==c"] 
Explanation: We could assign a = l and b = l to satisfy both equations.
output: true
Input: ["b==a","a==b"]
satisfy both equations.
satisfied, but not the second.
Sh uotaenba asul au uau ' = q pue I = e '0 {
visited[root.val] = &mark{prev: -1, depth: 1}
depth int 
prev int
return haveSameParents(root.Left, X, y) Il haveSameParents(root.Right, X, y)
if (root.Left != nil && root.Right != nil && root.Left.val == x &&
if root == nil { 
visited := [101]*mark{} 
queue := []*TreeNode{root}
return level
 return false
 return true
(root.Left != nil && root.Right != nil && root.Left.val == y &&
return false 
if node.Left != nil { 
node := queue[0]
 return false
depth := visited[node.Val].depth
queue = queue[1:] 
return leftLevel
if node.Right != nil {
queue = append(queue, node.Right) 
visited[node.Right.val] = &mark{prev: node.val, depth: depth + 1}
 queue = append(queue, node.Left) 
visited[node.Left.val] = &mark{prev: node.val, depth: depth + 1}
Y
---
## Page 956
 Example 2:
possible, return -1.
 Return the minimum number of K-bit flips required so that there is no O in the array. Ifit is not 
subarray to 0.
of length K and simultaneously changing every 0 in the subarray to 1, and every 1 in the 
In an array A containing only Os and 1s, a K-bit flip consists of choosing a (contiguous) subarray
995. Minimum Number of K Consecutive Bit Flips
Example 1: 
题目
Explanation: Flip A[O], then flip A[2].
Output:2 
Input: A = [0,1,0]，K = 1
func dfscousins(root *TreeNode, val, depth, last int, parent, res *int) {
func isCousinsDFS(root *TreeNode, x int, y int) bool {
//解法三 DFS 
visited[y].prev {
if visited[x] .depth == visited[y].depth && visited[x] .prev !=
dfscousins(root.Right, val, depth, root.val, parent, res)
dfscousins(root.Left, val, depth, root.val, parent, res)
depth++
if root.val == val { 
return depth1 > 1 && depth1 == depth2 && parent1 != parent2
dfsCousins(root,y，O,-l, &parent2,&depth2)
var depthl, depth2, parentl, parent2 int 
return false
 return
 return true
return
*parent = last
*res = depth 
---
## Page 957
解题思路
提示：
如果不可能，返回-1。
中的每个0 更改为 1，而每个1 更改为 0。返回所需的K位翻转的次数，以便数组没有值为0的元素。
在仅包含〇和1的数组A 中，一次K位翻转包括选择一个长度为K的（连续）子数组，同时将子数组
题目大意
Note:
Example 3: 
·给出一个数组，数组里面的元素只有〇和1。给一个长度为K的窗口，在这个窗口内的所有元素都
2. 1 = K && A[i-K] == 2 {
if flippedTime%2 == A[i] { 
Ａ=【[0００１０１１０]=З 
二
flippedTime--
A
A
△
A
A
count++
flippedTime++ 
if i+K > len(A) {
A[i] = 2
=
如果flippedTime是偶数，且A[i］==〇就需要翻转
如果flippedTime 是奇数，且A[i］==1 就需要翻转
下面这个判断包含了两种情况：
return -1 
[2００１２２ 
[200１2
[20０１２１
[2００１０１
[2 0 0１ 0１１ 0] i=0 flippedTime
20010
20010
0
0１
.2
2
2
1
L
:1 0}i=
1(
1（
1（
1
i
I
I
:7 flippedTime = 
9
5
2
L
×
 flippedTime
flippedTime
flippedTime