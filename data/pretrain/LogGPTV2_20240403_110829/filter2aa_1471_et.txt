pool verification is enabled, object handle tracing is started for the
system process.
21. 
The security reference monitor creates the \Security directory in the
object manager namespace, protecting it with a security descriptor in
which only the SYSTEM account has full access, and initializes
auditing data structures if auditing is enabled. Furthermore, the
security reference monitor initializes the kernel-mode SDDL library
and creates the event that will be signaled after the LSA has initialized
(\Security\LSA_AUTHENTICATION_INITIALIZED).
Finally, the Security Reference Monitor initializes the Kernel Code
Integrity component (Ci.dll) for the first time by calling the internal
CiInitialize routine, which initializes all the Code Integrity Callbacks
and saves the list of boot drivers for further auditing and verification.
22. 
The process manager creates a system handle for the executive system
partition. The handle will never be dereferenced, so as a result the
system partition cannot be destroyed. The Process Manager then
initializes the support for kernel optional extension (more details are
in step 26). It registers host callouts for various OS services, like the
Background Activity Moderator (BAM), Desktop Activity Moderator
(DAM), Multimedia Class Scheduler Service (MMCSS), Kernel
Hardware Tracing, and Windows Defender System Guard.
Finally, if VSM is enabled, it creates the first minimal process, the
IUM System Process, and assigns it the name Secure System.
23. 
The \SystemRoot symbolic link is created.
24. 
The memory manager is called to perform phase 1 of its initialization.
This phase creates the Section object type, initializes all its associated
data structures (like the control area), and creates the
\Device\PhysicalMemory section object. It then initializes the kernel
Control Flow Guard support and creates the pagefile-backed sections
that will be used to describe the user mode CFG bitmap(s). (Read
more about Control Flow Guard in Chapter 7, Part 1.) The memory
manager initializes the Memory Enclave support (for SGX compatible
systems), the hot-patch support, the page-combining data structures,
and the system memory events. Finally, it spawns three memory
manager system worker threads (Balance Set Manager, Process
Swapper, and Zero Page Thread, which are explained in Chapter 5 of
Part 1) and creates a section object used to map the API Set schema
memory buffer in the system space (which has been previously
allocated by the Windows Loader). The just-created system threads
have the chance to execute later, at the end of phase 1.
25. 
NLS tables are mapped into system space so that they can be mapped
easily by user-mode processes.
26. 
The cache manager initializes the file system cache data structures
and creates its worker threads.
27. 
The configuration manager creates the \Registry key object in the
object manager namespace and opens the in-memory SYSTEM hive
as a proper hive file. It then copies the initial hardware tree data
passed by Winload into the volatile HARDWARE hive.
28. 
The system initializes Kernel Optional Extensions. This functionality
has been introduced in Windows 8.1 with the goal of exporting
private system components and Windows loader data (like memory
caching requirements, UEFI runtime services pointers, UEFI memory
map, SMBIOS data, secure boot policies, and Code Integrity data) to
different kernel components (like the Secure Kernel) without using
the standard PE (portable executable) exports.
29. 
The errata manager initializes and scans the registry for errata
information, as well as the INF (driver installation file, described in
Chapter 6 of Part 1) database containing errata for various drivers.
30. 
The manufacturing-related settings are processed. The manufacturing
mode is a special operating system mode that can be used for
manufacturing-related tasks, such as components and support testing.
This feature is used especially in mobile systems and is provided by
the UEFI subsystem. If the firmware indicates to the OS (through a
specific UEFI protocol) that this special mode is enabled, Windows
reads and writes all the needed information from the
HKLM\System\CurrentControlSet\Control\ManufacturingMode
registry key.
31. 
Superfetch and the prefetcher are initialized.
32. 
The Kernel Virtual Store Manager is initialized. The component is
part of memory compression.
33. 
The VM Component is initialized. This component is a kernel
optional extension used to communicate with the hypervisor.
34. 
The current time zone information is initialized and set.
35. 
Global file system driver data structures are initialized.
36. 
The NT Rtl compression engine is initialized.
37. 
The support for the hypervisor debugger, if needed, is set up, so that
the rest of the system does not use its own device.
38. 
Phase 1 of debugger-transport-specific information is performed by
calling the KdDebuggerInitialize1 routine in the registered transport,
such as Kdcom.dll.
39. 
The advanced local procedure call (ALPC) subsystem initializes the
ALPC port type and ALPC waitable port type objects. The older LPC
objects are set as aliases.
40. 
If the system was booted with boot logging (with the BCD bootlog
option), the boot log file is initialized. If the system was booted in
safe mode, it finds out if an alternate shell must be launched (as in the
case of a safe mode with command prompt boot).
41. 
The executive is called to execute its second initialization phase,
where it configures part of the Windows licensing functionality in the
kernel, such as validating the registry settings that hold license data.
Also, if persistent data from boot applications is present (such as
memory diagnostic results or resume from hibernation information),
the relevant log files and information are written to disk or to the
registry.
42. 
The MiniNT/WinPE registry keys are created if this is such a boot,
and the NLS object directory is created in the namespace, which will
be used later to host the section objects for the various memory-
mapped NLS files.
43. 
The Windows kernel Code Integrity policies (like the list of trusted
signers and certificate hashes) and debugging options are initialized,
and all the related settings are copied from the Loader Block to the
kernel CI module (Ci.dll).
44. 
The power manager is called to initialize again. This time it sets up
support for power requests, the power watchdogs, the ALPC channel
for brightness notifications, and profile callback support.
45. 
The I/O manager initialization now takes place. This stage is a
complex phase of system startup that accounts for most of the boot
time.
The I/O manager first initializes various internal structures and creates
the driver and device object types as well as its root directories:
\Driver, \FileSystem, \FileSystem\Filters, and
\UMDFCommunicationPorts (for the UMDF driver framework). It
then initializes the Kernel Shim Engine, and calls the Plug and Play
manager, power manager, and HAL to begin the various stages of
dynamic device enumeration and initialization. (We covered all the
details of this complex and specific process in Chapter 6 of Part 1.)
Then the Windows Management Instrumentation (WMI) subsystem is
initialized, which provides WMI support for device drivers. (See the
section “Windows Management Instrumentation” in Chapter 10 for
more information.) This also initializes Event Tracing for Windows
(ETW) and writes all the boot persistent data ETW events, if any.
The I/O manager starts the platform-specific error driver and
initializes the global table of hardware error sources. These two are
vital components of the Windows Hardware Error infrastructure.
Then it performs the first Secure Kernel call, asking the Secure Kernel
to perform the last stage of its initialization in VTL 1. Also, the
encrypted secure dump driver is initialized, reading part of its
configuration from the Windows Registry
(HKLM\System\CurrentControlSet\Control\CrashControl).
All the boot-start drivers are enumerated and ordered while respecting
their dependencies and load-ordering. (Details on the processing of
the driver load control information on the registry are also covered in
Chapter 6 of Part 1.) All the linked kernel mode DLLs are initialized
with the built-in RAW file system driver.
At this stage, the I/O manager maps Ntdll.dll, Vertdll.dll, and the
WOW64 version of Ntdll into the system address space. Finally, all
the boot-start drivers are called to perform their driver-specific
initialization, and then the system-start device drivers are started. The
Windows subsystem device names are created as symbolic links in
the object manager’s namespace.
46. 
The configuration manager registers and starts its Windows registry’s
ETW Trace Logging Provider. This allows the tracing of the entire
configuration manager.
47. 
The transaction manager sets up the Windows software trace
preprocessor (WPP) and registers its ETW Provider.
48. 
Now that boot-start and system-start drivers are loaded, the errata
manager loads the INF database with the driver errata and begins
parsing it, which includes applying registry PCI configuration
workarounds.
49. 
If the computer is booting in safe mode, this fact is recorded in the
registry.
50. 
Unless explicitly disabled in the registry, paging of kernel-mode code
(in Ntoskrnl and drivers) is enabled.
51. 
The power manager is called to finalize its initialization.
52. 
The kernel clock timer support is initialized.
53. 
Before the INIT section of Ntoskrnl will be discarded, the rest of the
licensing information for the system is copied into a private system
section, including the current policy settings that are stored in the
registry. The system expiration time is then set.
54. 
The process manager is called to set up rate limiting for jobs and the
system process creation time. It initializes the static environment for
protected processes, and looks up various system-defined entry points
in the user-mode system libraries previously mapped by the I/O
manager (usually Ntdll.dll, Ntdll32.dll, and Vertdll.dll).
55. 
The security reference monitor is called to create the Command
Server thread that communicates with LSASS. This phase creates the
Reference Monitor command port, used by LSA to send commands to
the SRM. (See the section “Security system components” in Chapter 7
in Part 1 for more on how security is enforced in Windows.)
56. 
If the VSM is enabled, the encrypted VSM keys are saved to disk.
The system user-mode libraries are mapped into the Secure System
Process. In this way, the Secure Kernel receives all the needed
information about the VTL 0’s system DLLs.
57. 
The Session Manager (Smss) process (introduced in Chapter 2,
“System architecture,” in Part 1) is started. Smss is responsible for
creating the user-mode environment that provides the visible interface
to Windows—its initialization steps are covered in the next section.
58. 
The bootvid driver is enabled to allow the NT check disk tool to
display the output strings.
59. 
The TPM boot entropy values are queried. These values can be
queried only once per boot, and normally, the TPM system driver
should have queried them by now, but if this driver has not been
running for some reason (perhaps the user disabled it), the unqueried
values would still be available. Therefore, the kernel also manually
queries them to avoid this situation; in normal scenarios, the kernel’s
own query should fail.
60. 
All the memory used by the loader parameter block and all its
references (like the initialization code of Ntoskrnl and all boot drivers,
which reside in the INIT sections) are now freed.
As a final step before considering the executive and kernel initialization
complete, the phase 1 initialization thread sets the critical break on
termination flag to the new Smss process. In this way, if the Smss process
exits or gets terminated for some reason, the kernel intercepts this, breaks
into the attached debugger (if any), and crashes the system with a
CRITICAL_PROCESS_DIED stop code.
If the five-second wait times out (that is, if five seconds elapse), the
Session Manager is assumed to have started successfully, and the phase 1
initialization thread exits. Thus, the boot processor executes one of the
memory manager’s system threads created in step 22 or returns to the Idle
loop.
Smss, Csrss, and Wininit
Smss is like any other user-mode process except for two differences. First,
Windows considers Smss a trusted part of the operating system. Second,
Smss is a native application. Because it’s a trusted operating system
component, Smss runs as a protected process light (PPL; PPLs are covered in
Part 1, Chapter 3, “Processes and jobs”) and can perform actions few other
processes can perform, such as creating security tokens. Because it’s a native
application, Smss doesn’t use Windows APIs—it uses only core executive
APIs known collectively as the Windows native API (which are normally
exposed by Ntdll). Smss doesn’t use the Win32 APIs, because the Windows
subsystem isn’t executing when Smss launches. In fact, one of Smss’s first
tasks is to start the Windows subsystem.
Smss initialization has been already covered in the “Session Manager”
section of Chapter 2 of Part 1. For all the initialization details, please refer to
that chapter. When the master Smss creates the children Smss processes, it
passes two section objects’ handles as parameters. The two section objects
represent the shared buffers used for exchanging data between multiple Smss
and Csrss instances (one is used to communicate between the parent and the
child Smss processes, and the other is used to communicate with the client
subsystem process). The master Smss spawns the child using the
RtlCreateUserProcess routine, specifying a flag to instruct the Process
Manager to create a new session. In this case, the PspAllocateProcess kernel
function calls the memory manager to create the new session address space.
The executable name that the child Smss launches at the end of its
initialization is stored in the shared section, and, as stated in Chapter 2, is
usually Wininit.exe for session 0 and Winlogon.exe for any interactive
sessions. An important concept to remember is that before the new session 0
Smss launches Wininit, it connects to the Master Smss (through the
SmApiPort ALPC port) and loads and initializes all the subsystems.
The session manager acquires the Load Driver privilege and asks the
kernel to load and map the Win32k driver into the new Session address space
(using the NtSetSystemInformation native API). It then launches the client-
server subsystem process (Csrss.exe), specifying in the command line the
following information: the root Windows Object directory name (\Windows),
the shared section objects’ handles, the subsystem name (Windows), and the
subsystem’s DLLs:
■    Basesrv.dll The server side of the subsystem process
■    Sxssrv.dll The side-by-side subsystem support extension module
■    Winsrv.dll The multiuser subsystem support module
The client–server subsystem process performs some initialization: It
enables some process mitigation options, removes unneeded privileges from
its token, starts its own ETW provider, and initializes a linked list of
CSR_PROCESS data structures to trace all the Win32 processes that will be
started in the system. It then parses its command line, grabs the shared
sections’ handles, and creates two ALPC ports:
■    CSR API command port (\Sessions\\Windows\ApiPort) This
ALPC Port will be used by every Win32 process to communicate with
the Csrss subsystem. (Kernelbase.dll connects to it in its initialization
routine.)
■    Subsystem Session Manager API Port (\Sessions\
\Windows\SbApiPort) This port is used by the session manager
to send commands to Csrss.
Csrss creates the two threads used to dispatch the commands received by
the ALPC ports. Finally, it connects to the Session Manager, through another
ALPC port (\SmApiPort), which was previously created in the Smss
initialization process (step 6 of the initialization procedure described in
Chapter 2). In the connection process, the Csrss process sends the name of
the just-created Session Manager API port. From now on, new interactive
sessions can be started. So, the main Csrss thread finally exits.
After spawning the subsystem process, the child Smss launches the initial
process (Wininit or Winlogon) and then exits. Only the master instance of
Smss remains active. The main thread in Smss waits forever on the process
handle of Csrss, whereas the other ALPC threads wait for messages to create
new sessions or subsystems. If either Wininit or Csrss terminate
unexpectedly, the kernel crashes the system because these processes are
marked as critical. If Winlogon terminates unexpectedly, the session
associated with it is logged off.
Pending file rename operations
The fact that executable images and DLLs are memory-mapped when
they’re used makes it impossible to update core system files after
Windows has finished booting (unless hotpatching technology is used,
but that’s only for Microsoft patches to the operating system). The
MoveFileEx Windows API has an option to specify that a file move be
delayed until the next boot. Service packs and hotfixes that must update
in-use memory-mapped files install replacement files onto a system in
temporary locations and use the MoveFileEx API to have them replace
otherwise in-use files. When used with that option, MoveFileEx simply
records commands in the PendingFileRenameOperations and
PendingFileRenameOperations2 keys under
KLM\SYSTEM\CurrentControlSet\Control\Session Manager. These
registry values are of type MULTI_SZ, where each operation is
specified in pairs of file names: The first file name is the source
location, and the second is the target location. Delete operations use an
empty string as their target path. You can use the Pendmoves utility
from Windows Sysinternals (https://docs.microsoft.com/en-
us/sysinternals/) to view registered delayed rename and delete
commands.
Wininit performs its startup steps, as described in the “Windows
initialization process” section of Chapter 2 in Part 1, such as creating the
initial window station and desktop objects. It also sets up the user
environment, starts the Shutdown RPC server and WSI interface (see the
“Shutdown” section later in this chapter for further details), and creates the
service control manager (SCM) process (Services.exe), which loads all
services and device drivers marked for auto-start. The local session manager
(Lsm.dll) service, which runs in a shared Svchost process, is launched at this
time. Wininit next checks whether there has been a previous system crash,
and, if so, it carves the crash dump and starts the Windows Error Reporting
process (werfault.exe) for further processing. It finally starts the Local
Security Authentication Subsystem Service
(%SystemRoot%\System32\Lsass.exe) and, if Credential Guard is enabled,
the Isolated LSA Trustlet (Lsaiso.exe) and waits forever for a system
shutdown request.
On session 1 and beyond, Winlogon runs instead. While Wininit creates
the noninteractive session 0 windows station, Winlogon creates the default
interactive-session Windows station, called WinSta0, and two desktops: the
Winlogon secure desktop and the default user desktop. Winlogon then
queries the system boot information using the NtQuerySystemInformation
API (only on the first interactive logon session). If the boot configuration
includes the volatile Os Selection menu flag, it starts the GDI system
(spawning a UMDF host process, fontdrvhost.exe) and launches the modern
boot menu application (Bootim.exe). The volatile Os Selection menu flag is
set in early boot stages by the Bootmgr only if a multiboot environment was
previously detected (for more details see the section “The boot menu” earlier
in this chapter).
Bootim is the GUI application that draws the modern boot menu. The new
modern boot uses the Win32 subsystem (graphics driver and GDI+ calls)
with the goal of supporting high resolutions for displaying boot choices and
advanced options. Even touchscreens are supported, so the user can select
which operating system to launch using a simple touch. Winlogon spawns the
new Bootim process and waits for its termination. When the user makes a
selection, Bootim exits. Winlogon checks the exit code; thus it’s able to
detect whether the user has selected an OS or a boot tool or has simply