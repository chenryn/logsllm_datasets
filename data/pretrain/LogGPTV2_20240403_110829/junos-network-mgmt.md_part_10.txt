### Understanding CFM Monitoring Between Provider Edge (PE) and Customer Edge (CE) Devices

This section provides an in-depth look at CFM (Connectivity Fault Management) monitoring between provider edge (PE) and customer edge (CE) devices, particularly when the CE device is not a Juniper device. It also explains how various TLVs (Type, Length, and Value) such as Interface Status TLV, Port Status TLV, Chassis ID TLV, and Connection Protection TLV, are used to monitor and manage network connectivity.

#### CFM Action Profile Asynchronous Notification

**Summary:**
CFM-driven asynchronous notification ensures link status synchronization between two CE devices connected through a pseudo-wire originating from their respective PE devices. This setup emulates a direct connection between the two CE devices, even if the PE devices are connected through multiple networks.

**Layer 2 Connectivity Between PE1 and PE2:**
- **Figure 1** illustrates a deployment scenario where CFM-based asynchronous notifications synchronize link status between CE1 and CE2.
- **Requirements:**
  - When the link between PE2 and CE2 goes down, the link between PE1 and CE1 should also go down. Conversely, when the link is restored, it should also restore the link status between PE1 and CE1.
  - If there is a connectivity issue between PE1 and PE2, it should trigger a link down between PE1 and CE1, and PE2 and CE2. When the connection is restored, it should also restore the link status on both ends.

**See Also:**
- `connectivity-fault-management`

#### Configuring a CFM Action Profile for Asynchronous Notification

**Summary:**
The CFM UP-MEP (Up Maintenance End Point) on PE1 to PE2 monitors the connectivity between these devices. The use of `interface-status-tlv` on these UP-MEP endpoints conveys the link status between PE1 and CE1 to PE2, and vice versa. An action profile must be configured on PE1 to PE2 to drive asynchronous notifications towards the respective CE devices. This is triggered when either adjacency loss or link-down is detected in the received `interface-status-tlv`.

**Steps:**

1. **Enable Asynchronous Notification at the Interface Level:**
   ```shell
   user@host# set interface <interface-name> gigether-option asynchronous-notification
   ```

2. **Configure the Action Profile and CFM Events:**
   ```shell
   [edit protocols oam ethernet connectivity-fault-management]
   user@host# set action-profile <profile-name> event [event1, event2, event3]
   ```
   For example:
   ```shell
   user@host# set action-profile AP_test event adjacency-loss
   ```
   Note: The `asynchronous-notification` action is only supported with events like `interface-status-tlv down`, `interface-status-tlv lower-layer-down`, and `adjacency-loss`. Other events will result in a commit error.

3. **Define the Action for Asynchronous Notification:**
   ```shell
   [edit protocols oam ethernet connectivity-fault-management action-profile AP_test]
   user@host# set action asynchronous-notification
   ```

4. **Define the Maintenance Domain:**
   ```shell
   [edit protocols oam ethernet connectivity-fault-management]
   user@host# set maintenance-domain <domain-name> level <number> maintenance-association <ma-name> continuity-check interval <interval>
   ```
   For example:
   ```shell
   user@host# set maintenance-domain md6 level 6 maintenance-association ma6 continuity-check interval 1s
   ```

5. **Configure the Generation of `interface-status-tlv`:**
   ```shell
   [edit protocols oam ethernet connectivity-fault-management]
   user@host# set maintenance-domain <domain-name> level <number> maintenance-association <ma-name> continuity-check interface-status-tlv
   ```
   For example:
   ```shell
   user@host# set maintenance-domain md6 level 6 maintenance-association ma6 continuity-check interface-status-tlv
   ```

6. **Define the Maintenance Association Endpoint:**
   ```shell
   [edit protocols oam ethernet connectivity-fault-management maintenance-domain <md-name> maintenance-association <ma-name>]
   user@host# set mep <mep-id> direction up interface <interface-name>
   ```
   For example:
   ```shell
   user@host# set mep 101 direction up interface ge-0/0/0.0
   ```

7. **Set Asynchronous Notification Action Profile at the RMEP Level:**
   ```shell
   [edit protocols oam ethernet connectivity-fault-management maintenance-domain <md-name> maintenance-association <ma-name> mep <mep-id> remote-mep <mep-id>]
   user@host# set action-profile <action-profile-name>
   ```
   For example:
   ```shell
   [edit protocols oam ethernet connectivity-fault-management maintenance-domain md6 maintenance-association ma6 mep 101 remote-mep 102]
   user@host# set action-profile AP_test
   ```

**See Also:**
- No Link Title

### Understanding CFM Monitoring Between CE and PE Devices

**Single Active Multi-homing Use Case Using RDI Bit:**
- In a topology with two PE devices (PE1 and PE2) and two CE devices (CE1 and CE2), where PE1 is active and PE2 is in standby, CFM down MEP is configured between the PE and CE. CFM detects that the CCC (Continuity Check Control) is down, and the generated CCM (Continuity Check Message) includes the RDI bit. The RDI bit indicates the blocked state. When PE2 becomes active, the CCM down is cleared, and the RDI bit is removed from subsequent CCMs.

**Active/Active Multihoming Use Case Using RDI Bit:**
- In a similar topology, if CFM down MEP is not configured between the PE and CE, the generated CCMs do not include the RDI bit. When CFM down MEP is configured, and CFM detects that the CCC is down, the generated CCMs include the RDI bit. The RDI bit indicates the blocked state. When PE2 becomes active, the CCM down is cleared, and the RDI bit is removed from subsequent CCMs.

**See Also:**
- `interface-status-tlv`
- `interface-status-send-rdi`

### Configuring Port Status TLV and Interface Status TLV

**TLVs Overview:**
- Type, Length, and Value (TLVs) are defined in the IEEE 802.1ag standard for encoding variable-length and/or optional information in PDUs (Protocol Data Units). Table 7 shows the format of TLVs, indicating whether they are required or optional.

**Various TLVs for CFM PDUs:**
- Table 8 lists the type field values for various TLVs defined by IEEE 802.1ag for different CFM PDU types. Each TLV can be identified by its unique type field value.

**Support for Additional Optional TLVs:**
- **Port Status TLV:**
  - Indicates the ability of the bridge port to pass ordinary data, regardless of the MAC status. The value is driven by the MEP variable `enableRmepDefect`.
  - **Configuration:**
    - Use the `port-status-tlv` statement at the `[edit protocols oam ethernet connectivity-fault-management maintenance-domain <identifier> maintenance-association <identifier> continuity-check]` hierarchy level.
    - Example:
      ```shell
      protocols {
        oam {
          ethernet {
            connectivity-fault-management {
              maintenance-domain <identifier> {
                level <number>;
                maintenance-association <identifier> {
                  continuity-check {
                    interval <number>,
                    loss-threshold <number>;
                    hold-interval <number>;
                    port-status-tlv; # Sets Port Status TLV
                  }
                }
              }
            }
          }
        }
      }
      ```

- **Interface Status TLV:**
  - Indicates the status of the interface on which the MEP transmitting the CCM is configured, or the next-lower interface in the IETF RFC 2863 IF-MIB.
  - **Configuration:**
    - Use the `interface-status-tlv` statement at the `[edit protocols oam ethernet connectivity-fault-management maintenance-domain <identifier> maintenance-association <identifier> continuity-check]` hierarchy level.
    - Example:
      ```shell
      protocols {
        oam {
          ethernet {
            connectivity-fault-management {
              maintenance-domain <identifier> {
                level <number>;
                maintenance-association <identifier> {
                  continuity-check {
                    interval <number>,
                    loss-threshold <number>;
                    hold-interval <number>;
                    interface-status-tlv; # Sets Interface Status TLV
                  }
                }
              }
            }
          }
        }
      }
      ```

**See Also:**
- `port-status-tlv`
- `interface-status-tlv`