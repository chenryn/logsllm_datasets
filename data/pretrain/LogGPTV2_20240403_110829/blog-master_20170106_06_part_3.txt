 6 Citroen    21000  
 7 Hummer     41400  
 8 Volkswagen 21600  
 1 Audi       62300  
```  
Output.  
In the following example we will list all tables in the testdb database.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
try:  
    con = psycopg2.connect(database='testdb', user='janbodnar')   
    cur = con.cursor()   
    cur.execute("""SELECT table_name FROM information_schema.tables   
       WHERE table_schema = 'public'""")      
    rows = cur.fetchall()  
    for row in rows:  
        print row[0]  
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
The code example prints all available tables in the current database to the terminal.  
```  
cur.execute("""SELECT table_name FROM information_schema.tables   
    WHERE table_schema = 'public'""")   
```  
The table names are stored inside the system information_schema table.  
```  
$ ./list_tables.py  
cars  
images  
```  
These were the tables on our system.  
### Export and import of data  
We can export and import data using copy_to() and copy_from() methods.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
fout = None  
try:  
    con = psycopg2.connect(database='testdb', user='janbodnar')   
    cur = con.cursor()  
    fout = open('cars', 'w')  
    cur.copy_to(fout, 'cars', sep="|")                          
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
except IOError, e:      
    print 'Error %s' % e     
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
    if fout:  
        fout.close()   
```  
In the above example, we copy the data from the Cars table into the cars file.  
```  
fout = open('cars.sql','w')  
```  
We open a file where we will write the data from the Cars table.  
```  
cur.copy_to(fout, 'cars', sep="|")     
```  
The copy_to method copies data from the Cars table to the opened file. The columns are separated with a | character.  
```  
$ cat cars  
2|Mercedes|57127  
3|Skoda|9000  
4|Volvo|29000  
5|Bentley|350000  
6|Citroen|21000  
7|Hummer|41400  
8|Volkswagen|21600  
1|Audi|62300  
```  
These are the contents of the cars file.  
Now we are going to perform a reverse operation. We will import the dumped table back into the database table.  
```  
testdb=> DELETE FROM Cars;  
DELETE 8  
```  
We delete the data from the Cars table.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
f = None  
try:  
    con = psycopg2.connect(database='testdb', user='janbodnar')   
    cur = con.cursor()  
    f = open('cars', 'r')  
    cur.copy_from(f, 'cars', sep="|")                      
    con.commit()  
except psycopg2.DatabaseError, e:  
    if con:  
        con.rollback()  
    print 'Error %s' % e      
    sys.exit(1)  
except IOError, e:      
    if con:  
        con.rollback()  
    print 'Error %s' % e     
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
    if f:  
        f.close()    
```  
In this script, we read the contents of the cars file and copy it back to the cars table.  
```  
f = open('cars', 'r')  
cur.copy_from(f, 'cars', sep="|")                      
con.commit()  
```  
We open the cars file for reading and copy the contents to the Cars table. The changes are committed.  
```  
SELECT * FROM Cars;  
 id |    name    | price    
----+------------+--------  
  2 | Mercedes   |  57127  
  3 | Skoda      |   9000  
  4 | Volvo      |  29000  
  5 | Bentley    | 350000  
  6 | Citroen    |  21000  
  7 | Hummer     |  41400  
  8 | Volkswagen |  21600  
  1 | Audi       |  62300  
(8 rows)  
```  
The output shows that we have successfully recreated the saved Cars table.  
### Transactions  
A transaction is an atomic unit of database operations against the data in one or more databases. The effects of all the SQL statements in a transaction can be either all committed to the database or all rolled back.  
In psycopg2 module transactions are handled by the connection class. The first command of a connection cursor starts a transaction. (We do not need to enclose our SQL commands by BEGIN and END statements to create a transaction. This is handled automatically by psycopg2.) The following commands are executed in the context of this new transaction. In case of an error, the transaction is aborted and no further commands are executed until the rollback() method.  
The documentation to the psycopg2 module says that the connection is responsible to terminate its transaction, calling either the commit() or rollback() method. Committed changes are immediately made persistent into the database. Closing the connection using the close() method or destroying the connection object (using del or letting it fall out of scope) will result in an implicit rollback() call.  
The psycopg2 module also supports an autocommit mode, where all changes to the tables are immediately effective. To run in autocommit mode, we set the autocommit property of the connection object to True.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
try:  
    con = psycopg2.connect(database='testdb', user='janbodnar')   
    cur = con.cursor()   
    cur.execute("DROP TABLE IF EXISTS Friends")  
    cur.execute("CREATE TABLE Friends(Id serial PRIMARY KEY, Name VARCHAR(10))")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Tom')")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Rebecca')")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Jim')")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Robert')")  
    #con.commit()  
except psycopg2.DatabaseError, e:  
    if con:  
        con.rollback()  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
We create a Friends table and try to fill it with data. However, as we will see, the data will be not committed.  
```  
#con.commit()  
```  
The commit() method is commented. If we uncomment the line, the data will be written to the table.  
```  
finally:  
    if con:  
        con.close()  
```  
The finally block is always executed. If we have not committed the changes and no error occures (which would roll back the changes) the transaction is still opened. The connection is closed with the close() method and the transaction is terminated with an implicit call to the rollback() method.  
```  
testdb=> \dt  
          List of relations  
 Schema |  Name   | Type  |   Owner     
--------+---------+-------+-----------  
 public | cars    | table | janbodnar  
 public | friends | table | janbodnar  
 public | images  | table | janbodnar  
(3 rows)  
```  
Only after we have uncommented the line, the Friends table is created.  
In the autocommit mode, an SQL statement is executed immediately.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
try:  
    con = psycopg2.connect(database='testdb', user='janbodnar')   
    con.autocommit = True  
    cur = con.cursor()   
    cur.execute("DROP TABLE IF EXISTS Friends")  
    cur.execute("CREATE TABLE Friends(Id serial PRIMARY KEY, Name VARCHAR(10))")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Jane')")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Tom')")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Rebecca')")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Jim')")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Robert')")  
    cur.execute("INSERT INTO Friends(Name) VALUES ('Patrick')")  
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
In this example, we connect to the database in the autocommit mode. We do not call neither commit() nor rollback() methods.  
```  
con.autocommit = True  
```  
We set the connection to the autocommit mode.  
```  
$ ./autocommit.py  
testdb=> SELECT * FROM Friends;  
 id |  name     
----+---------  
  1 | Jane  
  2 | Tom  
  3 | Rebecca  
  4 | Jim  
  5 | Robert  
  6 | Patrick  
(6 rows)  
```  
The data was successfully committed to the Friends table.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")