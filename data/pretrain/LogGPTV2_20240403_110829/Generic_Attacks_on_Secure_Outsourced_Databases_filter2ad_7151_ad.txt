The last column represents the percentage of datasets where
the targeted domain is dense.
The attack on the PUDF datasets for the Mortality Risk
attribute ran in milliseconds. Moreover, 85% of the datasets
have dense domain, rendering the ordering suﬃcient to re-
construct the data, and thus, it only requires to observe
N 2 log N queries. For domains extracted from the age at-
tribute, the running time is similar to that for the Mortality
Risk. Recall that the age attribute has a small domain,
since the original data report the age range for each patient.
67.3% of datasets that include only the records of adults
have dense domains, where for records with age  0:
n
(cid:80)n
Hoeﬀding:
Chernoﬀ:
−2n2
−2n2
Pr[S > µ + ] ≤ e
Pr[S  (1 + )µ] ≤ e
Pr[S  0
(Azuma’s inequality). Let Xi be a mar-
Pr[|Xi − X0| ≥ ] ≤ 2e
−2/2i∆2
.
We get the following corollary:
√
Pr[|Xi − X0| ≥
i · t · ∆] ≤ 2e
−t2/2.
(4)
B. PSEUDOCODE OF THE ATTACK USING
THE ACCESS PATTERN
Figure 4 shows the pseudocode of the attack.
It ini-
tially retrieves the order of the records by calling GetOrderO
(RO:line 1). GetOrderO retrieves p1 uniformly drawn queries
(GetOrderO:line 1) from the oracle O. The latter essentially
chooses a random range query q, determines the access pat-
tern leakage, and returns it. Then, GetOrderO searches the
query results for the largest proper subset L(cid:48) of the set of
all indices [n] (GetOrderO:line 2), and sets ˆi1 as the symmet-
ric diﬀerence of the two (GetOrderO:line 3). Next, for each
subsequent record j (GetOrderO:line 4), it determines ˆij by
searching the query results for the smallest proper superset
of ˆi1, . . . ,ˆij−1 GetOrderO:lines 5-6. Finally, it returns the
ordering (GetOrderO:line 7).
After recovering the order, RO checks if there are no
empty positions in the domain (RO:line 2), and if this is
the case, the attack terminates by returning the ordering
(RO:line 3). Otherwise, it continues to recover the positions
(RO:line 5). GetDistO initially retrieves p2 uniformly drawn
queries (GetDistO:line 1) from the oracle O. Then, it de-
termines the ﬁrst value of A, i.e., number of queries that
include the record that is ﬁrst in the ordering (GetDistO:line
2), and value B, which represents the number of queries that
include the record that is last in the ordering (GetDistO:line
3). Then, it sets as ordering either the original one or its
reverse so that the record which is closest to a domain end-
point comes ﬁrst8, and it ﬁnds the position ˆskˆi1
of the ﬁrst
record up to reﬂection (GetDistO:lines 4-8). Next, it re-
samples the queries and for every other record in the or-
dering (GetDistO:line 9), it discovers the value A, i.e., the
number of queries that include the previously determined
records and the next one in the ordering (GetDistO:line 11).
Finally, after computing all the positions by utilizing A
(GetDistO:line 12), the algorithm returns the positions of
the records (GetDistO:line 13).
C. PROOF OF CLAIM 3.3
Proof. For i ≤ j ≤ m, let Ej be the event that skij is
correctly recovered; here we allow the position to be recov-
ered up to reﬂection, as long as the reﬂection is consistent
for all the positions. Our goal is to set p2 to ensure that all of
the Ej’s occur together with inverse polynomial probability.
Using a union bound
(cid:32)
Pr(cid:2) Ej | E1
(cid:3)(cid:33)(cid:33)
(5)
(cid:32) n(cid:88)
j=2
(cid:35)
(cid:34) n(cid:94)
j=1
Pr
Ej
≥ Pr [ E1 ] ·
1 −
For 1 ≤ j ≤ n, let Aj be the random variable counting