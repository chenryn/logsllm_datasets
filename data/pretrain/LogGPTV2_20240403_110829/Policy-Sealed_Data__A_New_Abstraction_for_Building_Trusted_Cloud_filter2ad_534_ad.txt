proved that whenever a customer sealed data, the result-
ing envelope could be unsealed only by a node whose
conﬁguration matched the policy. We provide the spec-
iﬁcation and proof online [35].
8.2 Performance Evaluation
To evaluate Excalibur’s performance, we ﬁrst evaluated
the monitor’s scalability by measuring its performance
overhead as well as its throughput for its three main ac-
tivities: generating CPABE decryption keys, delivering
these keys to nodes, and serving monitor attestation re-
quests. We then measured the performance overhead of
seal and unseal on the client side.
8.2.1 Setup and Methodology
We used two different experimental setups. The ﬁrst
used a two-node testbed; one node acted as a moni-
tor, and the other acted as a regular cloud node mak-
ing requests to the monitor. The second setup was used
to evaluate the monitor throughput for attesting cloud
nodes and serving customer attestation requests. For at-
testing cloud nodes, we simulated 1,000 nodes by using
one machine acting as the monitor and ﬁve machines
acting as cloud nodes, all running parallel instances of
the node attestation protocol. For monitor attestations,
we used a single machine acting as customers running
10
)
s
(
y
e
k
e
t
a
r
e
n
e
g
o
t
e
m
T
i
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
n
o
i
t
a
r
e
n
e
g
y
e
K
)
s
/
s
p
o
(
t
u
p
h
g
u
o
r
h
t
 70
 60
 50
 40
 30
 20
 10
 0
 0  10  20  30  40  50
Attributes in key (#)
 1  2  3  4  5  6  7  8
Number of cores (#)
Figure 7: Performance of decryption key generation. Time
to generate key as we vary the number of attributes (left), and
throughput for 10 attributes as we vary the number of cores
(right).
parallel instances of the monitor attestation protocol.
This number of nodes was sufﬁcient to exhaust moni-
tor resources and ensure that there were no bottlenecks
in the client nodes.
Both setups used Intel Xeon machines, each one
equipped with 2.83GHz 8-core CPUs, 1.6GB of RAM,
and TPM version 1.2 manufactured by Winbond. All
machines ran Linux 2.6.29 and were connected to a
10Gbps network. We repeated each experiment ten
times and reported median results; the standard devia-
tion was negligible.
8.2.2 Decryption Key Generation
The overhead of generating a CPABE decryption key
depends on the number of attributes embedded in the
key. We measured the time to generate a decryption key
stemming from the same master key, in which we var-
ied the number of attributes from one to 50. This range
seemed reasonable to characterize a node conﬁguration.
Figure 7 shows the results, which conﬁrm two rele-
vant ﬁndings of the original authors of CPABE. First,
the overhead of generating keys grows linearly with the
number of attributes present in the key. Second, gener-
ating CPABE keys is expensive, e.g., a key with ten at-
tributes took 0.12 seconds to create, which corresponds
to a maximum rate of 8.33 keys/sec on a single core.
Although CPABE key generation is inherently inef-
ﬁcient, we consider that its performance is acceptable
when throughput pressure on the monitor is relatively
low because large groups of machines are likely to have
the same conﬁguration. The latency to generate a key
is experienced only by the ﬁrst node that reboots with
a conﬁguration new to the monitor. Since the key is
cached, it is reused in future identical requests without
additional costs.
8.2.3 Node Attestation
The latency of the node attestation protocol took 0.82
seconds. The bulk of the attestation cost (96%) was due
to the node’s performing a TPM quote operation neces-
sary for remote attestation. This result is not surprising
since such operations are known to be inefﬁcient [31].
11
)
s
(
l
a
e
s
o
t
e
m
T
i
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 0  10  20  30  40  50
)
s
(
l
a
e
s
n
u
o
t
e
m
T
i
 0.2
 0.15
 0.1
 0.05
 0
 0  10  20  30  40  50
Leaf nodes in policy (#)
Attributes used by policy (#)
Figure 8: Performance overhead of sealing and unsealing
data as a function of the complexity of the policy, with in-
put data of constant size (1K bytes).
Most of the work required by this protocol is car-
ried out by cloud nodes. Therefore, the attestation la-
tency should not represent a bottleneck to the coordina-
tor. To conﬁrm this, we evaluated the monitor’s through-
put when running multiple parallel instances of this pro-
tocol. Results showed that the monitor could deliver up
to 632.91 keys per second, which is efﬁcient and would
allow a single monitor machine to scale to serve a large
number of nodes.
8.2.4 Monitor Attestation
We measured the performance of the monitor attesta-
tion protocol. This protocol had a latency of 1.21 sec-
onds and a throughput of approx. 4800 reqs/sec on a
single node. The quote operation performed by the
monitor’s local TPM accounted for the bulk of the la-
tency (0.82 seconds), and the remaining time was due to
cryptographic operations and network latency. The high
peak throughput we observed was enabled by batch at-
testation. When we disabled batching, the throughput
dropped sharply to 0.82 reqs/sec. Thus, this technique
is crucial to the scalability of the monitor and delivered
a throughput speedup of over 5000x.
8.2.5 Sealing and Unsealing
The performance overhead of the seal and unseal opera-
tions performed by Excalibur clients was dominated by
the two cryptographic primitives: CPABE and symmet-
ric cryptography (which uses AES with a 256-bit key
size). We study their effects in turn.
To understand the overall performance overhead of
CPABE, we set the input data to a small, constant size.
Figure 8 shows the performance overhead of sealing and
unsealing 1KB of data as a function of policy complex-
ity. On the left is the cost of a seal operation as a func-
tion of the number of tests contained in the policy. For
instance, policy A=x and (B=y or B=z) contains three
comparisons. Our ﬁndings show that the sealing cost
grows linearly with the number of attributes. The cost
of sealing for a policy with 10 attributes was about 128
milliseconds.
On the right, Figure 8 shows the cost of an unseal op-
eration. Unlike encryption, CPABE decryption depends
n
o
i
t
c
a
r
f
E
B
A
P
C
e
m
i
t
g
n
i
l
a
e
s
n
i
100%
80%
60%
40%
20%
0%
1K 10K 100K 1M 10M 100M
Figure 9: CPABE fraction in the performance overhead of
sealing, varying the size of the input data.
Data size (bytes)
n
o
i
t
c
a
r
f
e
m
i
t
E
B
A
P
C
e
m
i
t
g
n
i
l
a
e
s
n
u
n
i
100%
80%
60%
40%
20%
0%
1K 10K 100K 1M 10M 100M
Figure 10: CPABE fraction in the performance overhead
of unsealing, varying the size of the input data.
Data size (bytes)
on the number of attributes in the decryption key that
are used to satisfy the policy. For example, consider a
decryption key with attributes A:x and B:y, and policies
P1 : A=x, and P2 : A=x and B=y. Policy P1 uses one
attribute, whereas P2 uses two. As before, the perfor-
mance overhead of unseal grows linearly with the size
of the policy. The time required to unseal a policy with
10 attributes was 51 milliseconds.
To study the relative effect of CPABE on the overall
performance of Excalibur primitives, we varied the size
of the input data. Figures 9 and 10 show the fraction
of overhead due to CPABE, and Table 5 lists the abso-
lute operation times. Our ﬁndings show that CPABE ac-
counts for the most signiﬁcant fraction of performance
overhead. Sealing 1 MB of data with a policy contain-
ing 10 leaf nodes took 134 milliseconds, and 87% of
the total cost of sealing was due to CPABE encryption.
For unsealing, the fraction of CPABE was slightly lower
than for sealing, but it was still very signiﬁcant. Unseal-
ing 1 MB of data with a policy satisfying 10 attributes
of the private key took 68 milliseconds, where 68% of
the latency was due to CPABE.
In summary, our evaluation of Excalibur showed
these results:
the costs of generating decryption keys
and the node attestation protocol were reasonable when
taking into account how infrequently they are required;
the monitor scaled well with the number of cloud cus-
tomers that used the service for the ﬁrst time and with
the number of cloud nodes that were attested upon re-
boot;
the monitor could be further scaled up using
cloning, and the latency of seal and unseal was reason-
able and dominated by the cost of symmetric key en-
cryption for large data items.
12
Data
(bytes)
1K
10K
100K