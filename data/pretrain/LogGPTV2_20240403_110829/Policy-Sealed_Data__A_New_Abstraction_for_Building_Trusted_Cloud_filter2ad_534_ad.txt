### 8.2 Performance Evaluation

To evaluate Excalibur's performance, we first assessed the monitor's scalability by measuring its performance overhead and throughput for its three main activities: generating CP-ABE decryption keys, delivering these keys to nodes, and serving monitor attestation requests. We then measured the performance overhead of seal and unseal operations on the client side.

#### 8.2.1 Setup and Methodology

We used two different experimental setups. The first setup involved a two-node testbed, with one node acting as the monitor and the other as a regular cloud node making requests to the monitor. The second setup was designed to evaluate the monitor's throughput for attesting cloud nodes and serving customer attestation requests. For attesting cloud nodes, we simulated 1,000 nodes using one machine as the monitor and five machines as cloud nodes, all running parallel instances of the node attestation protocol. For monitor attestations, we used a single machine acting as customers running parallel instances of the monitor attestation protocol. This number of nodes was sufficient to exhaust the monitor's resources and ensure there were no bottlenecks in the client nodes.

Both setups used Intel Xeon machines, each equipped with 2.83 GHz 8-core CPUs, 1.6 GB of RAM, and TPM version 1.2 manufactured by Winbond. All machines ran Linux 2.6.29 and were connected to a 10 Gbps network. Each experiment was repeated ten times, and median results were reported; the standard deviation was negligible.

#### 8.2.2 Decryption Key Generation

The overhead of generating a CP-ABE decryption key depends on the number of attributes embedded in the key. We measured the time to generate a decryption key from the same master key, varying the number of attributes from one to 50. This range was chosen to reasonably characterize a node configuration.

Figure 7 shows the results, which confirm two relevant findings from the original authors of CP-ABE. First, the overhead of generating keys grows linearly with the number of attributes present in the key. Second, generating CP-ABE keys is computationally expensive; for example, a key with ten attributes took 0.12 seconds to create, corresponding to a maximum rate of 8.33 keys/sec on a single core.

Although CP-ABE key generation is inherently inefficient, its performance is acceptable when the throughput pressure on the monitor is relatively low because large groups of machines are likely to have the same configuration. The latency to generate a key is experienced only by the first node that reboots with a new configuration. Since the key is cached, it is reused in future identical requests without additional costs.

#### 8.2.3 Node Attestation

The latency of the node attestation protocol was 0.82 seconds. The bulk of the attestation cost (96%) was due to the node performing a TPM quote operation necessary for remote attestation. This result is not surprising, as such operations are known to be inefficient [31].

Most of the work required by this protocol is carried out by cloud nodes. Therefore, the attestation latency should not represent a bottleneck to the coordinator. To confirm this, we evaluated the monitor's throughput when running multiple parallel instances of this protocol. Results showed that the monitor could deliver up to 632.91 keys per second, which is efficient and would allow a single monitor machine to scale to serve a large number of nodes.

#### 8.2.4 Monitor Attestation

We measured the performance of the monitor attestation protocol. This protocol had a latency of 1.21 seconds and a throughput of approximately 4,800 reqs/sec on a single node. The quote operation performed by the monitor's local TPM accounted for the bulk of the latency (0.82 seconds), and the remaining time was due to cryptographic operations and network latency. The high peak throughput we observed was enabled by batch attestation. When batching was disabled, the throughput dropped sharply to 0.82 reqs/sec. Thus, this technique is crucial for the scalability of the monitor and delivered a throughput speedup of over 5,000x.

#### 8.2.5 Sealing and Unsealing

The performance overhead of the seal and unseal operations performed by Excalibur clients was dominated by the two cryptographic primitives: CP-ABE and symmetric cryptography (which uses AES with a 256-bit key size). We study their effects in turn.

To understand the overall performance overhead of CP-ABE, we set the input data to a small, constant size. Figure 8 shows the performance overhead of sealing and unsealing 1 KB of data as a function of policy complexity. On the left, the cost of a seal operation is shown as a function of the number of tests contained in the policy. For instance, the policy `A=x and (B=y or B=z)` contains three comparisons. Our findings show that the sealing cost grows linearly with the number of attributes. The cost of sealing for a policy with 10 attributes was about 128 milliseconds.

On the right, Figure 8 shows the cost of an unseal operation. Unlike encryption, CP-ABE decryption depends on the number of attributes in the decryption key that are used to satisfy the policy. For example, consider a decryption key with attributes `A:x` and `B:y`, and policies `P1: A=x` and `P2: A=x and B=y`. Policy `P1` uses one attribute, whereas `P2` uses two. As before, the performance overhead of unseal grows linearly with the size of the policy. The time required to unseal a policy with 10 attributes was 51 milliseconds.

To study the relative effect of CP-ABE on the overall performance of Excalibur primitives, we varied the size of the input data. Figures 9 and 10 show the fraction of overhead due to CP-ABE, and Table 5 lists the absolute operation times. Our findings show that CP-ABE accounts for the most significant fraction of performance overhead. Sealing 1 MB of data with a policy containing 10 leaf nodes took 134 milliseconds, and 87% of the total cost of sealing was due to CP-ABE encryption. For unsealing, the fraction of CP-ABE was slightly lower than for sealing, but it was still very significant. Unsealing 1 MB of data with a policy satisfying 10 attributes of the private key took 68 milliseconds, where 68% of the latency was due to CP-ABE.

In summary, our evaluation of Excalibur showed the following results:
- The costs of generating decryption keys and the node attestation protocol were reasonable, considering how infrequently they are required.
- The monitor scaled well with the number of cloud customers using the service for the first time and with the number of cloud nodes that were attested upon reboot.
- The monitor could be further scaled up using cloning, and the latency of seal and unseal was reasonable and dominated by the cost of symmetric key encryption for large data items.

---

**Figures and Tables:**

- **Figure 7:** Performance of decryption key generation. Time to generate key as we vary the number of attributes (left), and throughput for 10 attributes as we vary the number of cores (right).
- **Figure 8:** Performance overhead of sealing and unsealing data as a function of the complexity of the policy, with input data of constant size (1K bytes).
- **Figure 9:** CP-ABE fraction in the performance overhead of sealing, varying the size of the input data.
- **Figure 10:** CP-ABE fraction in the performance overhead of unsealing, varying the size of the input data.
- **Table 5:** Absolute operation times for sealing and unsealing.