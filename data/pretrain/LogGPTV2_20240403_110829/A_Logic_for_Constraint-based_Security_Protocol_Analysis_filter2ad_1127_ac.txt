Deﬁnition 15 (Concrete validity). Let φ be a closed PS-
LTL formula, tr be a ground trace and IK be an initial in-
truder knowledge. Then, (cid:7)tr, IK(cid:9) |= φ is deﬁned in Table 2.
It is easy to see that the semantics of O and H coin-
that (cid:7)tr, IK(cid:9) |= Oφ iff
cide with the intuitive ones, i.e.
∃i ∈ [0, length(tr)] : (cid:7)tri, IK(cid:9) |= φ, and (cid:7)tr, IK(cid:9) |= Hφ
iff ∀i ∈ [0, length(tr)] : (cid:7)tri, IK(cid:9) |= φ. In fact, we can
also state and prove other standard results for LTL and inﬁ-
nite traces, like the tautology Hφ → Oφ. Furthermore, we
can state some particular relations of PS-LTL, like the fol-
lowing proposition which intuitively shows that the intruder
never forgets information.
Proposition 16. For every ground trace tr, initial intruder
knowledge IK and message m:
(i) (cid:7)tr, IK(cid:9) |= learn(m) iff (cid:7)tr, IK(cid:9) |= O learn(m) iff
(cid:7)tr, IK(cid:9) |= learn(m) S learn(m); and
(ii) (cid:7)tr, IK(cid:9)
|= Y learn(m) implies (cid:7)tr, IK(cid:9)
|=
learn(m).
Proof. Straightforward from unfolding Deﬁnition 15 and
the monotonicity of F(·),
F(K(tri) ∪ IK) ⊆
i.e.
F(K(trj) ∪ IK) for each i ≤ j.
3.2 Writing Security Properties with PS-
LTL
In this section we show how to specify several secu-
rity properties in PS-LTL for the BAN Concrete Andrew
Secure RPC protocol [5], shown in Example 4.
In addi-
tion to this protocol we also have successfully used our
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
(cid:7)tr, IK(cid:9) |= true
(cid:7)tr, IK(cid:9) (cid:16)|= false
(cid:7)tr, IK(cid:9) |= p(d1, . . . , dn)
(cid:7)tr, IK(cid:9) |= learn(m)
(cid:7)tr, IK(cid:9) |= ¬ϕ
(cid:7)tr, IK(cid:9) |= ∃v.ϕ
(cid:7)tr, IK(cid:9) |= ∀v.ϕ
(cid:7)tr, IK(cid:9) |= ϕ1 ∧ ϕ2
(cid:7)tr, IK(cid:9) |= ϕ1 ∨ ϕ2
(cid:7)tr, IK(cid:9) |= Yϕ
(cid:7)tr, IK(cid:9) |= ϕ1Sϕ2
(cid:2)
q(e1, . . . , em)(cid:9) and p(d1, . . . , dn) = q(e1, . . . , em)
tr = (cid:7)tr
(cid:7)tr, IK(cid:9) (cid:16)|= ϕ
∃t ∈ T + : (cid:7)tr, IK(cid:9) |= ϕ[t/v]
∀t ∈ T + : (cid:7)tr, IK(cid:9) |= ϕ[t/v]
(cid:7)tr, IK(cid:9) |= ϕ1 and (cid:7)tr, IK(cid:9) |= ϕ2
(cid:7)tr, IK(cid:9) |= ϕ1 or (cid:7)tr, IK(cid:9) |= ϕ2
tr = (cid:7)tr
, IK(cid:9) |= ϕ
∃i ∈ [0, length(tr)] : ((cid:7)tri, IK(cid:9) |= ϕ2 ∧ ∀j ∈ [i + 1, length(tr)] : (cid:7)trj, IK(cid:9) |= ϕ1)
iff
iff m ∈ F(K(tr) ∪ IK)
iff
iff
iff
iff
iff
iff
iff
ev(cid:9) and (cid:7)tr
(cid:2)
(cid:2)
Table 2. Concrete validity (cid:7)tr, IK(cid:9) |= φ
tool properties for several other protocols, see [11] (we al-
ready analysed over twenty protocols from the Clark Jacob
library [7]).
3.2.1 Authentication
First we specify various forms of authentication as deﬁned
in [23]. We cover all the variants except injective agree-
ment, which would require counting events in a trace. (In
principle, we could extend our system to cover injective
agreement, which would result on the ability to detect some
replay attacks on which injective agreement is violated but
non-injective agreement is satisﬁed.)
We detail the case of authentication of the initiator to a
responder, and do not show here the similar converse case.
Aliveness The aliveness property is the weakest form of
authentication in Lowe’s hierarchy:
A protocol guarantees to a responder B aliveness of another
principal A if, whenever B (acting as responder) completes
a run of the protocol, apparently with initiator A, then A
has previously been running the protocol.
Notice that A may have run the protocol with a principal
other than B. The aliveness of principal A to responder B
is shown in PS-LTL in Table 3 (1).
Caveat. As usual, we prevent the attacker e from record-
ing events in a protocol execution. However, as the at-
tacker may be involved in legitimate executions, there may
be “fake” attacks in which an honest participant talks to the
attacker e, who behaves honestly. For example, it could
be that in some scenario an initiator a talks to e and issues
the event end(a, e, ...), but there is no corresponding start
event (hence violating aliveness). We currently ignore such
“fake” attacks, as we also do with unrealistic type-ﬂaw at-
tacks [20]. However, it would be easy to extend our lan-
guage to prevent such fake attacks from arising, by adding
an atomic predicate honest(X), which holds when X is not
e. Then, for example, we would write the aliveness prop-
. (end(B, A, responder, . . . ) ∧
erty as ∀A, B, . . . . ∃B
honest(A)) → O start(A, B
, R
, R
(cid:2))
(cid:2)
(cid:2)
(cid:2)
Aliveness is violated for our protocol of Example 4 on a
scenario containing at least two protocol sessions (i.e. two
initiators and two responders). We run our tool on a suit-
able scenario and found a similar attack to the one found
by Lowe [22]. Furthermore, we also checked the aliveness
property for Lowe’s ﬁxed version of BAN concrete Andrew
Secure RPC protocol [22], and found no attacks, conﬁrming
the validity of Lowe’s ﬁx.
Weak Agreement Weak agreement is slightly stronger
than aliveness:
A protocol guarantees to a responder B weak agreement
with another principal A if, whenever B (acting as respon-
der) completes a run of the protocol, apparently with ini-
tiator A, then A has previously been running the protocol,
apparently with B.
For this property, A may not necessarily have been acting
as initiator. We show this property expressed in PS-LTL in
Table 3 (2). Since weak agreement is stronger than alive-
ness, the attack mentioned above also applies.
is
Non-injective Agreement Non-injective agreement
slightly stronger than weak agreement:
A protocol guarantees to a responder B non-injective
agreement with another principal A on a set of data items
D if, whenever B (acting as responder) completes a run of
the protocol, apparently with initiator A, then A has previ-
ously been running the protocol, apparently with B, A was
acting as initiator in his run, and the two principals agreed
on the data values corresponding to all the variables in D.
The property is formalized in PS-LTL in Table 3 (3) (Our
tool also discovers the attack against this property).
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
. end(B, A, responder, D1, D2, D3) → O start(A, B
(cid:2)
(cid:2))
, R
. end(B, A, responder, D1, D2, D3) → O start(A, B, R
(cid:2)
(cid:2))
1. Aliveness: ∀A, B, D1, D2, D3. ∃B
2. Weak agreement: ∀A, B, D1, D2, D3. ∃R
3. Non-injective agreement:
, R
(cid:2)
∀A, B, D1, D2, D3. end(B, A, responder, D1, D2, D3) → O run(A, B, initiator, D1, D2, D3)
4. Perfect forward secrecy:
∀A, B, N, Klt. learn(Klt) ∧ Y(O (end(B, A, responder, N, Klt, kst) ∧ H ¬learn(kst))) → H ¬learn(kst)
5. Perfect forward secrecy (more efﬁcient form):
∀A, B, N, Klt. learn(Klt) ∧ Y(O (end(B, A, responder, N, Klt, kst) ∧ ¬learn(kst))) → ¬learn(kst)
6. Freshness:
∀A, B1, R1, N1, K1, K, B2, R2, N2, K2. Y(O end(A, B1, R1, N1, K1, K)) → ¬end(A, B2, R2, N2, K2, K)
7. Denial of service: ∀A, B, D1, D2, D3. run(B, A, responder, D1, D2, D3) → O start(A, B, initiator).
Table 3. PS-LTL properties
3.2.2 Secrecy
We focus on standard secrecy and perfect forward secrecy.
Standard secrecy We deﬁne ﬁrst the simple case of stan-
dard secrecy, which is the inability of an attacker to obtain
the value of the secret [2]. Recall scenario Sc0 of Example
6. The secrecy of the session key kst can be checked by
the PS-LTL formula ¬learn(kst), which does not ﬁnd any
secrecy attack on Sc0.
Perfect Forward Secrecy We now consider perfect for-
ward secrecy (PFS), as deﬁned by Difﬁe, et al. [16]:
An (authenticated key exchange) protocol provides perfect
forward secrecy if disclosure of long-term secret keying ma-
terial does not compromise the secrecy of the exchanged
keys from earlier runs.
the proposed Authenticated Difﬁe-
In Difﬁe et.al [16],
Hellman key exchange protocol is shown to preserve PFS,
since long term keys are only used to sign messages and are
never related to the session key derivation. This is not the
case for the RPC Andrew protocol and its variants, since the
short term session key is directly encrypted by the long term
key (see below for an example of a secure protocol).
The disclosure of long term secret keying material, e.g.
klt, can be realized by providing an additional protocol role,
which contains only one send event that leaks klt to the in-
truder 3. The speciﬁcation of PFS in PS-LTL needs to ex-
press that: (i) the leaking of the long term key klt happens
3We could easily extend the learn predicate to give extra information
to the attacker, so we do not need to modify a scenario. Thus we would
have learn(m, K) with semantics (cid:3)tr, IK(cid:4) |= learn(m, K) iff m ∈
F (IK ∪ K(tr) ∪ K).
after a protocol run has been completed, and at that time (ii)
the short term session key (kst in our example) was secret
but (iii) after the leaking of the long term key, the short term
key is learnt by the attacker. Our treatment of this property
is similar to Delicata and Schneider [14].
In Table 3 (4)
we express PFS; thanks to Proposition 16, we can rewrite
the property in a more efﬁcient form, as shown in Table 3
(5). Our tool ﬁnds the straightforward attack quickly in an
appropriate scenario.
Discussion. In the deﬁnition of Difﬁe et al.
there is a
division in time between the “present” (i.e. when the long-
term key is disclosed) and “past” (i.e. when the earlier runs
took place).
In our speciﬁcation, that moment in time is
given by the moment in which a session ﬁnishes succes-
fully, and an end event is recorded in the trace. However,
as an anonymous reviewer points out, it could be that a ses-
sion did not end succesfully, so it remains stuck without an
end event being recorded (due to some interaction with the
attacker). Then, the disclosure of the long-term key allows
the learning of a session key that would not have been pos-
sible in the normal run. It would certainly be interesting to
extend in the future our formulation to cover this case.
A secure protocol w.r.t. PFS Consider the protocol:
1. a → b
:
2. b → a :
{(pk(ra), b)}klt
({kst}→
pk(ra),{(h(kst), a)}klt
)
This protocol is a modiﬁed version of the protocol due
to Boyd and Mathuria [4] that aims to meet perfect forward
secrecy.4 Agents a and b share a long term key klt. Agent
a generates a fresh asymmetric key pair in every protocol
4Note that the protocol provides only one-way authentication, that is
authentication of b to a.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
run (indicated by a fresh ra) and discards it after the run
is completed (thus the key pair is ephemeral). In the ﬁrst
message, a encrypts the public part pk(ra) together with b’s
identity with klt and sends it to b. Upon receipt, b obtains
pk(ra) and then replies by encrypting the freshly generated
short term session key kst with pk(ra) and encrypting the
hash of kst and a’s identity with klt.
Although the disclosure of klt after a completed protocol
run allows an attacker to impersonate a or b in the subse-
quent runs, it does not provide the attacker with the ability
to recover the session key kst from the previous run. This
session key can only be recovered using a’s private key from
the completed run (which has been discarded as soon as the
protocol run completes).
Assume that when the initiator ends it emits the event
end(A, B, initiator, RA, Klt, Kst). We veriﬁed a scenario
in which the short term key chosen by the responder is kst,