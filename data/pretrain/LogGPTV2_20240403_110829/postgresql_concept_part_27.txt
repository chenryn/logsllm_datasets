inaflatfile.
Considerafileof300,000lineswithtwointegersoneachline. Theflatfileis2.4MB.Thesize
ofthePOSTGRESQLdatabasefilecontainingthisdatacanbeestimatedat14MB:
248 APPENDIXA. ADDITIONALRESOURCES
36 bytes: each row header (approximate)
+ 8 bytes: two int fields @ 4 bytes each
+ 4 bytes: pointer on page to tuple
----------------------------------------
48 bytes per row
The data page size in PostgreSQL is 8192 bytes (8 KB), so:
8192 bytes per page
------------------- = 171 rows per database page (rounded up)
48 bytes per row
300000 data rows
-------------------- = 1755 database pages
171 rows per page
1755 database pages * 8192 bytes per page = 14,376,960 bytes (14MB)
Indexesdo not require as much overhead, but do contain the datathat is beingindexed, so they
canbelargealso.
4.8) Howdo Ifind out whatindices oroperations are defined inthedatabase?
psqlhasavarietyofbackslashcommandstoshowsuchinformation. Use\? toseethem.
Alsotrythefilepgsql/src/tutorial/syscat.source. ItillustratesmanyoftheSELECTsneededtoget
informationfromthedatabasesystemtables.
4.9) My queries are slow or don’t make use of the indexes. Why?
POSTGRESQL does not automatically maintain statistics. VACUUM must be run to update the
statistics. Afterstatisticsareupdated,theoptimizerknowshowmanyrowsinthetable,andcan
betterdecideifitshoulduseindices. Notethattheoptimizerdoesnotuseindicesincaseswhen
thetableissmallbecauseasequentialscanwouldbefaster.
Forcolumn-specificoptimizationstatistics,useVACUUMANALYZE. VACUUMANALYZEisimpor-
tant for complex multijoin queries, so the optimizer can estimate the number of rows returned
from each table, and choose the proper join order. The backend does not keep track of column
statisticsonitsown,soVACUUMANALYZEmustberuntocollectthemperiodically.
IndexesareusuallynotusedforORDERBYoperations: asequentialscanfollowedbyanexplicit
sortisfasterthananindexscanofalltuplesofalargetable,becauseittakesfewerdiskaccesses.
Whenusingwild-cardoperatorssuchasLIKEor˜,indicescanonlybeusedifthebeginningof
thesearchisanchoredtothestartofthestring. So,touseindices,LIKEsearchesshouldnotbegin
with%,and˜(regularexpressionsearches)shouldstartwithˆ.
A.5. FREQUENTLYASKEDQUESTIONS(FAQS) 249
4.10) How do I see how the query optimizer is evaluating my query?
SeetheEXPLAINmanualpage.
4.11) What is an R-tree index?
An R-tree index is used for indexing spatial data. A hash index can’t handle range searches.
A B-tree index only handles range searches in a single dimension. R-tree’s can handle multi-
dimensional data. For example, if an R-tree index can be built on an attribute of type point, the
systemcanmoreefficientlyanswerqueriessuchas“selectallpointswithinaboundingrectangle.”
ThecanonicalpaperthatdescribestheoriginalR-treedesignis:
Guttman, A. “R-trees: A Dynamic Index Structure for Spatial Searching.” Proc of the 1984
ACMSIGMODInt’lConfonMgmtofData,45-57.
YoucanalsofindthispaperinStonebraker’s“ReadingsinDatabaseSystems”
Built-inR-treescanhandlepolygonsandboxes. Intheory,R-treescanbeextendedtohandle
highernumberofdimensions. Inpractice,extendingR-treesrequiresabitof workandwedon’t
currentlyhaveanydocumentationonhowtodoit.
4.12) What is Genetic Query Optimization?
The GEQO module speeds query optimization when joining many tables by means of a Genetic
Algorithm(GA).Itallowsthehandlingoflargejoinqueriesthroughnonexhaustivesearch.
4.13) How do I do regular expression searches and case-insensitive regular
expression searches?
The˜operatordoesregularexpressionmatching,and˜*doescase-insensitiveregularexpression
matching. Thereisnocase-insensitivevariantoftheLIKEoperator,butyoucangettheeffectof
case-insensitiveLIKEwiththis:
WHERE lower(textfield) LIKE lower(pattern)
4.14) In a query, how do I detect if a field is NULL?
YoutestthecolumnwithISNULLandISNOTNULL.
250 APPENDIXA. ADDITIONALRESOURCES
4.15) What is the difference between the various character types?
Type InternalName Notes
“CHAR” char 1character
CHAR(#) bpchar blankpaddedtothespecifiedfixedlength
VARCHAR(#) varchar sizespecifiesmaximumlength,nopadding
TEXT text lengthlimitedonlybymaximumrowlength
BYTEA bytea variable-lengtharrayofbytes
Youwillseetheinternalnamewhenexaminingsystemcatalogsandinsomeerrormessages.
ThelastfourtypesaboveareVARLENAtypes(i.e.,thefirstfourbytesarethelength,followed
bythedata). CHAR(#)allocatesthemaximumnumberofbytesnomatterhowmuchdataisstored
inthefield. TEXT,VARCHAR(#),andBYTEAallhavevariablelengthonthedisk,andbecauseofthis,
there is a small performance penalty for using them. Specifically, the penalty is for accessto all
columnsafterthefirstcolumnofthistype.
4.16.1) How do I create a serial/auto-incrementing field?
POSTGRESQL supportsa SERIALdatatype. It auto-creates a sequenceand index on the column.
Forexample,this:
CREATE TABLE person ( id SERIAL, name TEXT );
isautomaticallytranslatedintothis:
CREATE SEQUENCE person_id_seq;
CREATE TABLE person ( id INT4 NOT NULL DEFAULT nextval(’person_id_seq’),
name TEXT );
CREATE UNIQUE INDEX person_id_key ON person ( id );
SeetheCREATE_SEQUENCEmanualpageformoreinformationaboutsequences. Youcanalsouse
eachrow’sOIDfieldasauniquevalue. However,ifyouneedtodumpandreloadthedatabase,you
needtousepg_dump’s-ooptionorCOPYWITHOIDSoptiontopreservetheOIDs.
4.16.2) How do I get the value of a SERIAL insert?
Oneapproachistoto retrievethenextSERIALvaluefrom thesequenceobject withthenextval()
functionbeforeinsertingandtheninsertitexplicitly. Usingtheexampletablein4.16.1,thatmight
looklikethis:
$newSerialID = nextval(’person_id_seq’);
INSERT INTO person (id, name) VALUES ($newSerialID, ’Blaise Pascal’);
A.5. FREQUENTLYASKEDQUESTIONS(FAQS) 251
Youwouldthenalsohavethenewvaluestoredin$newSerialIDforuseinotherqueries(e.g.,asa
foreignkeytothepersontable). NotethatthenameoftheautomaticallycreatedSEQUENCEobject
willbenamed__seq,wheretableandserialcolumnarethenamesofyour
tableandyourSERIALcolumn,respectively.
Alternatively,you could retrievethe assignedSERIALvaluewiththecurrval()function after it
wasinsertedbydefault,e.g.,
INSERT INTO person (name) VALUES (’Blaise Pascal’);
$newID = currval(’person_id_seq’);
Finally, you could use the OID returned from the INSERT statement to look up the default value,
though this is probably the least portable approach. In Perl, using DBI with Edmund Mergl’s
DBD::Pgmodule,theOIDvalueismadeavailablevia$sth->{pg_oid_status}after$sth->execute().
4.16.3)Don’tcurrval()andnextval()leadtoaraceconditionwithotherusers?
No. Thisishandledbythebackends.
4.17) What is an OID? What is a TID?
OIDsarePOSTGRESQL’Sanswertouniquerowids. EveryrowthatiscreatedinPOSTGRESQLgets
auniqueOID. AllOIDsgeneratedduringinitdbarelessthan16384(frombackend/access/transam.h).
All user-createdOIDs are equal to or greaterthan this. By default, all these OIDs are unique not
onlywithinatableordatabase,butuniquewithintheentirePOSTGRESQLinstallation.
POSTGRESQLusesOIDsinitsinternalsystemtablestolinkrowsbetweentables. TheseOIDs
canbe usedto identifyspecificuser rows and usedin joins. It isrecommendedyou usecolumn
typeOIDtostoreOIDvalues. YoucancreateanindexontheOIDfieldforfasteraccess.
OIDsareassignedtoallnewrowsfromacentralareathatisusedbyalldatabases. Ifyouwant
tochangetheOIDto somethingelse,orifyou wanttomakeacopyofthetable, withtheoriginal
OID’s,thereisnoreasonyoucan’tdoit:
CREATE TABLE new_table(old_oid oid, mycol int);
SELECT old_oid, mycol INTO new FROM old;
COPY new TO ’/tmp/pgtable’;
DELETE FROM new;
COPY new WITH OIDS FROM ’/tmp/pgtable’;
TIDs are used to identify specific physical rows with block and offset values. TIDs change after
rowsaremodifiedorreloaded. Theyareusedbyindexentriestopointtophysicalrows.
252 APPENDIXA. ADDITIONALRESOURCES
4.18) What is the meaning of some of the terms used in POSTGRESQL?
Someofthesourcecodeandolderdocumentationusetermsthathavemorecommonusage. Here
aresome:
• table,relation,class
• row,record,tuple
• column,field,attribute
• retrieve,select
• replace,update
• append,insert
• OID,serialvalue
• portal,cursor
• rangevariable,tablename,tablealias
4.19) Why do I get the error “FATAL: pallocfailure: memory exhausted?”
It ispossibleyouhaverun outof virtualmemoryon yoursystem, oryourkernelhasalow limit
forcertainresources. Trythisbeforestartingthepostmaster:
ulimit -d 65536
limit datasize 64m
Dependingonyourshell,onlyoneofthesemaysucceed,butitwillsetyourprocessdatasegment
limitmuchhigherandperhapsallowthequerytocomplete. Thiscommandappliestothecurrent
process,andallsubprocessescreatedafterthecommandisrun. Ifyouarehavingaproblemwith
theSQLclientbecausethebackendisreturningtoomuchdata,tryitbeforestartingtheclient.
4.20) How do I tell what POSTGRESQL version I am running?
Frompsql,typeselect version();
4.21) My large-object operations get invalid largeobjdescriptor. Why?
YouneedtoputBEGINWORKandCOMMITaroundanyuseofalargeobjecthandle,thatis,surrounding
lo_open ... lo_close. CurrentLYPOSTGRESQLenforcestherulebyclosinglargeobjecthandles
attransactioncommit. So thefirstattempttodoanythingwiththehandlewilldrawinvalidlarge
obj descriptor. So code thatused to work (atleastmost of thetime) will now generatethat error
messageifyoufailtouseatransaction.
IfyouareusingaclientinterfacelikeODBCyoumayneedtosetauto-commitoff.
A.5. FREQUENTLYASKEDQUESTIONS(FAQS) 253
4.22) How do I create a column that will default to the current time?
Usenow():
CREATE TABLE test (x int, modtime timestamp DEFAULT now() );
4.23) Why are my subqueries using IN so slow?
Currently,wejoinsubqueriestoouterqueriesbysequentiallyscanningtheresultofthesubquery
foreachrowoftheouterquery. AworkaroundistoreplaceINwithEXISTS:
SELECT * FROM tab WHERE col1 IN (SELECT col2 FROM TAB2)
to:
SELECT * FROM tab WHERE EXISTS (SELECT col2 FROM TAB2 WHERE col1 = col2)
Wehopetofixthislimitationinafuturerelease.
4.24) How do I do an outer join?
POSTGRESQL does not support outer joins in the current release. They can be simulated using
UNIONandNOTIN. Forexample,whenjoiningtab1andtab2,thefollowingquerydoesanouterjoin
ofthetwotables:
SELECT tab1.col1, tab2.col2
FROM tab1, tab2
WHERE tab1.col1 = tab2.col1
UNION ALL
SELECT tab1.col1, NULL
FROM tab1
WHERE tab1.col1 NOT IN (SELECT tab2.col1 FROM tab2)
ORDER BY tab1.col1
Extending POSTGRESQL
5.1) I wrote a user-defined function. When I run it in psql, why does it dump
core?
Theproblemcouldbeanumberofthings. Trytestingyouruser-definedfunctioninastand-alone
testprogramfirst.
254 APPENDIXA. ADDITIONALRESOURCES
5.2) What does the message “NOTICE:PortalHeapMemoryFree: 0x402251d0
notinallocset!” mean?
Youarepfree’ingsomethingthatwasnotpalloc’ed. Bewareofmixingmalloc/freeandpalloc/pfree.
5.3) How can I contribute some nifty new types and functions to POST-
GRESQL?
Send your extensions to the pgsql-hackers mailing list, and they will eventually end up in the
contrib/subdirectory.
5.4) How do I write a C function to return a tuple?
Thisrequireswizardrysoextremethattheauthorshavenevertriedit,thoughinprincipleitcan
bedone.
5.5)Ihavechangedasourcefile. Whydoestherecompilenotseethechange?
TheMakefilesdonothavetheproperdependenciesforincludefiles. Youhavetodoamakeclean
andthenanothermake.
Appendix B
Installation
Getting POSTGRESQL
ThePOSTGRESQLsoftwareisdistributedinseveralformats:
• Tar-gzippedfilewithafileextensionof.tar.gz
• Prepackagedfilewithafileextensionof.rpm
• Anotherprepackagedformat
• CD-ROM
Because so many formats exist, this appendix will cover only the general steps needed to in-
stall POSTGRESQL. Each distribution comes with an INSTALL or README file with more specific
instructions.
Creating the POSTGRESQL User
ItisbesttocreateaseparateusertoownthePOSTGRESQLfilesandprocessesthatwillbeinstalled.
Theusernameistypicallypostgres.
Configuration
Manydistributionsuse aconfigure command thatallows usersto choose variousoptions before
compilingandinstallingthesoftware.
Compilation
POSTGRESQLisusuallydistributedinsourcecodeformat. Asaconsequence,Csourcecodemust
be compiled into a format that is understood by the CPU. This process is usually handled by a
255
256 APPENDIXB. INSTALLATION
compiler,oftencalledccorgcc. Severaldistributionformatsautomaticallyperformthesestepsfor
theuser.
Installation
Theinstallationprocessinvolvescopyingallcompiledprogramsintoadirectorythatwillserveas
the home of all POSTGRESQL activity. It will also contain all POSTGRESQL programs, databases,
andlogfiles. Thedirectoryistypicallycalled/usr/local/pgsql.
Initialization
Initializationcreatesadatabasecalledtemplate1inthePOSTGRESQLhomedirectory. Thisdatabase
isusedtocreateallotherdatabases. Initdbperformsthisinitializationstep.
Starting the Server
Oncetemplate1iscreated,thedatabaseservercanbestarted. Thissteptypicallyinvolvesrunning
theprogramcalledpostmaster.
Creating a Database
Once the database server is running, you can create databases by running createdb from the
operatingsystemprompt. Chapter20coversPOSTGRESQLadministrationindetail.
Appendix C
PostgreSQL Nonstandard Features
by Chapter
Thisappendixoutlinesthenonstandardfeaturescoveredinthisbook.
Chapter1 None.
Chapter2 Psqlisauniquefeatureof POSTGRESQL.
Chapter3 None.
Chapter4 Useofregularexpressions,SET,SHOW,andRESETarefeaturesuniquetoPOSTGRESQL.
Chapter5 None.
Chapter6 None.
Chapter7 OIDs,sequences,andSERIALareuniquefeaturesof POSTGRESQL.
Chapter8 FROM in UPDATE is a unique feature of POSTGRESQL. Some databases support the
creationoftablesbySELECT.
Chapter9 Most databases support only a few of the many data types, functions, and operators
includedin POSTGRESQL.Arraysare a unique featuresof POSTGRESQL. Large objects are
implementeddifferentlybyotherdatabasesystems.
Chapter10 None.
Chapter11 CLUSTER,VACUUM,andEXPLAINarefeaturesuniquetoPOSTGRESQL.
Chapter12 LIMITisimplementedbyafewotherdatabasesystems.
Chapter13 Inheritance,RULES,LISTEN,andNOTIFYarefeaturesuniquetoPOSTGRESQL.
257
258 APPENDIXC. POSTGRESQLNONSTANDARDFEATURESBYCHAPTER
Chapter14 None.
Chapter15 COPYisauniquefeatureof POSTGRESQL.
Chapter16 Psqlandpgaccessareuniquefeaturesof POSTGRESQL.
Chapter17 AlloftheprogramminginterfacesexceptECPGandJavaareimplementeddifferently
byotherdatabasesystems.
Chapter18 Server-side functions and triggers are implemented differently by other database
systems.
Chapter19 UsingCtoenhancethedatabaseisauniquePOSTGRESQLfeature.
Chapter20 TheadministrativeutilitiesareuniquetoPOSTGRESQL.
Appendix D
Reference Manual
Thefollowingisacopyofthereferencemanualpages(manpages)astheyappearedinPOSTGRESQL
7.0.2. Themostcurrentversionisavailableat:
• http://www.postgresql.org/docs/user/sql-commands.htm
• http://www.postgresql.org/docs/user/applications.htm
ThesearepartofthePOSTGRESQLUser’sGuide.
D.1 ABORT
Name
ABORT—Abortsthecurrenttransaction
ABORT[WORK|TRANSACTION]
Inputs
None.
Outputs
ROLLBACK Messagereturnedifsuccessful.
NOTICE:ROLLBACK:notransactioninprogress If there is not any transaction currently
inprogress.
259
260 APPENDIXD. REFERENCEMANUAL
Description
ABORTrollsbackthecurrenttransactionandcausesalltheupdatesmadebythetransactionto
bediscarded. ThiscommandisidenticalinbehaviortotheSQL92commandROLLBACK,andis
presentonlyforhistoricalreasons.
Notes
UseCOMMITtosuccessfullyterminateatransaction.
Usage
Toabortallchanges:
ABORT WORK;
Compatibility
SQL92