12.  退出容器退出数据库:
    ```
    \q
    ```
13.  Now, remove the `db2` container using the following command:
    ```
    $ docker container rm -f db2
    ```
    该命令将返回容器的名称:
    ```
    db2
    ```
14.  Remove the `db` volume using the following command:
    ```
    $ docker volume rm db
    ```
    该命令将返回卷的名称:
    ```
    db
    ```
在本练习中，您使用了一个命名卷来保存数据库，以保持数据的持久性。您看到，即使在移除容器之后，数据仍然存在。新容器能够赶上并访问您保存在数据库中的数据。
在下一个练习中，您将运行一个不带卷的 PostgreSQL 数据库，以将其效果与上一个练习的效果进行比较。
## 练习 7.08:运行不带卷的 PostgreSQL 容器
在本练习中，您将运行一个没有数据库卷的默认 PostgreSQL 容器。然后，您将移除容器及其匿名卷，以检查移除容器后数据是否保持不变:
1.  运行不带卷的 PostgreSQL 容器。命名容器`db1` :
    ```
    $ docker container run --name db1 -e POSTGRES_PASSWORD=password -d postgres
    ```
2.  运行`exec`命令，执行来自`bash`的命令。提示将变为`posgres=#`，表示您在`db1`容器内:
    ```
    $ docker container exec -it db1 psql -U postgres
    ```
3.  创建一个表，`PEOPLE`，有两列–`NAME`和`AGE`:T3
4.  在`PEOPLE`表中插入一些值:
    ```
    INSERT INTO PEOPLE VALUES('ENGY','41');
    INSERT INTO PEOPLE VALUES('AREEJ','12');
    ```
5.  Verify that the values are inserted correctly in the table:
    ```
    SELECT * FROM PEOPLE;
    ```
    该命令将返回两行，验证数据是否正确插入:
    ![Figure 7.6: Output of the SELECT statement ](img/B15021_07_04.jpg)
    图 7.6:SELECT 语句的输出
6.  退出容器以退出数据库。外壳提示将返回:
    ```
    \q
    ```
7.  List the volumes using the following command:
    ```
    $ docker volume ls
    ```
    Docker 为`db1`容器创建了一个匿名卷，从以下输出中可以明显看出:
    ```
    DRIVER     VOLUME NAME
    Local      6fd85fbb83aa8e2169979c99d580daf2888477c654c
    62284cea15f2fc62a42c32
    ```
8.  Remove the container with its anonymous volume using the following command:
    ```
    $ docker container rm -fv db1
    ```
    该命令将返回容器的名称:
    ```
    db1
    ```
9.  List the volumes using the `docker volume ls` command to verify that the volume is removed:
    ```
    $docker volume ls
    ```
    您会发现列表是空的:
    ```
    DRIVER     VOLUME NAME
    ```
与前面的练习相反，本练习使用匿名卷而不是命名卷。因此，该体积在容器的范围内，并从容器中移除。
因此，我们可以得出这样的结论:最佳做法是在一个命名的卷上共享数据库，以确保保存在数据库中的数据将保持不变，并且比容器的寿命更长。
到目前为止，您已经学会了如何列出卷并检查它们。但是还有其他更强大的命令来获取关于您的系统和 Docker 对象的信息，包括卷。这些将是下一节的主题。
## 其他有用的 Docker 命令
许多命令可用于诊断和检查您的系统，其中一些描述如下:
*   Use the `docker system df` command to find out the size of all the Docker objects in your system:
    ```
    $docker system df
    ```
    如以下输出所示，列出了映像、容器和卷的数量及其大小:
    ```
    TYPE            TOTAL     ACTIVE     SIZE      RECLAIMABLE
    Images          6         2          1.261GB   47.9MB (75%)
    Containers      11        2          27.78MB   27.78MB (99%)
    Local Volumes   2         2          83.26MB   OB (0%)
    Build Cache                          0B        0B
    ```
*   You can get more detailed information about the Docker objects by adding the `-v` option to the `docker system df` command:
    ```
    $docker system df -v
    ```
    它应该返回如下输出:
    ![Figure 7.7: Output of the docker system df -v command ](img/B15021_07_07.jpg)
图 7.7:Docker 系统 df -v 命令的输出
*   Run the `docker volume ls` subcommand to list all the volumes that you have on your system:
    ```
    $docker volume ls
    ```
    复制卷的名称，以便可以用来获取使用它的容器的名称:
    ```
    DRIVER    VOLUME NAME
    local     a7675380798d169d4d969e133f9c3c8ac17e733239330397ed
    ba9e0bc05e509fc
    local     db
    ```
    然后，运行`docker ps -a --filter volume=`命令获取使用该卷的容器的名称:
    ```
    $docker ps -a --filter volume=db
    ```
    您将获得容器的详细信息，如下所示:
    ```
    CONTAINER ID    IMAGE     COMMAND                 CREATED
      STATUS       PORTS         NAMES
    55c60ad38164    postgres  "docker-entrypoint.s…"  2 hours ago
      Up 2 hours   5432/tcp      db_with
    ```
到目前为止，我们一直在容器和 Docker 主机之间共享卷。这种共享类型不是 Docker 中唯一可用的类型。您还可以在容器之间共享卷。让我们在下一节中看看如何做到这一点。
# 持久和短暂卷
有两种类型的卷:持久卷和临时卷。到目前为止，我们看到的是位于主机和容器之间的持久卷。为了在容器之间共享容积，我们使用`--volumes-from`选项。该卷仅在容器使用时才存在。当使用该卷的最后一个容器退出时，该卷将消失。这种类型的卷可以从一个容器传递到下一个容器，但不会被保存。这些卷称为临时卷。
卷可用于在主机和容器之间或容器之间共享日志文件。与主机在卷上共享它们要容易得多，这样即使容器因错误而被移除，我们仍然可以在容器移除后通过检查主机上的日志文件来跟踪错误。
在实际的微服务应用中，卷的另一个常见用途是在卷上共享代码。这种做法的好处是可以实现零停机。开发团队可以动态编辑代码。团队可以增加新的功能或者改变界面。Docker 监视代码中的更新，以便执行新代码。
在下面的练习中，我们将探索数据容器，并学习一些在容器之间共享卷的新选项。
## 练习 7.09:在容器之间共享体积
有时，您需要一个数据容器来在不同的容器之间共享数据，每个容器运行不同的操作系统。在将数据发送到生产环境之前，跨不同平台测试相同的数据非常有用。在本练习中，您将使用数据容器，该容器将使用`--volume-from`在容器之间共享卷:
1.  创建一个不与主机共享的带有卷`newvol`的容器`c1`:
    ```
    $docker container run -v /newvol --name c1 -it ubuntu:14.04 bash
    ```
2.  移至`newvol`卷:
    ```
    cd newvol/
    ```
3.  在该卷内保存一个文件:
    ```
    echo hello > /newvol/file1.txt
    ```
4.  按下转义序列， *CTRL* + *P* ，然后 *CTRL* + *Q* ，使容器在后台以分离模式运行。
5.  使用`--volumes-from`选项
    ```
    $docker container run --name c2 --volumes-from c1 -it ubuntu:14.04 bash
    ```
    创建第二个容器`c2`，装载`c1`容器的体积
6.  使用`ls`命令:
    ```
    cd newvol/
    ls
    ```
    验证`c2`可以访问您从`c1`保存的`file1.txt`
7.  在`c2`里面添加另一个文件`file2.txt`:
    ```
    echo hello2 > /newvol/file2.txt
    ```
8.  Verify that `c2` can access `file1.txt` and `file2.txt`, which you saved from `c1`, using the `ls` command:
    ```
    ls
    ```
    您会看到两个文件都列出来了:
    ```
    file1.txt	file2.txt
    ```
9.  将本地标准输入、输出和误差流附加到`c1` :
    ```
    docker attach c1
    ```
10.  Check that `c1` can access the two files using the `ls` command:
    ```
    ls
    ```
    您会看到两个文件都列出来了:
    ```
    file1.txt	file2.txt
    ```
11.  使用以下命令退出【T0:
    ```
    exit
    ```
12.  List the volumes using the following command:
    ```
    $ docker volume ls
    ```
    你会发现，即使退出`c1`，音量依然存在:
    ```
    DRIVER    VOLUME NAME
    local     2d438bd751d5b7ec078e9ff84a11dbc1f11d05ed0f82257c
    4e8004ecc5d93350
    ```
13.  使用`-v`选项
    ```
    $ docker container rm -v c1
    ```
    移除`c1`
14.  List the volumes again:
    ```
    $ docker volume ls
    ```
    你会发现`c1`并没有去掉音量，因为`c2`还在用:
    ```
    DRIVER    VOLUME NAME
    local     2d438bd751d5b7ec078e9ff84a11dbc1f11d05ed0f82257c
    4e8004ecc5d93350
    ```
15.  现在，使用`-v`选项移除`c2`以移除其体积。您还必须使用`-f`选项来强制移除容器，因为它已启动并运行:
    ```
    $ docker container rm -fv c2
    ```