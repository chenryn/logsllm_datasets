### 文件保护与访问

文件的访问权限取决于其保护类别是否符合删除策略的要求。

### delfs 文件系统的目录结构

如图4所示，delfs 文件系统涉及三个主要目录：

1. **secure_dir**：包含 delfs 的主密钥，并且必须使用可擦除内存进行备份。此目录仅应由运行 delfs 的进程访问，并在操作过程中防止任何其他实体访问。实践中，它可能是一个支持物理安全删除且不进行备份的 POSIX 兼容本地文件系统。delfs 原型使用了一个在磁盘上格式化为 ext2 的小分区，该分区通过原地更新和空闲空间填充支持安全删除 [23]。
2. **raw_dir**：提供非易失性存储，例如 NAS 服务器或云存储。只有受保护的文件版本和辅助数据存储在这里。
3. **mount_dir**：用户通过此目录存储和访问受保护的文件。

### 初始化与文件删除

首次挂载 delfs 目录时，需要提供一个初始化文件，该文件指定初始删除策略及其属性。写入 mount_dir 的所有文件都将受益于安全删除。可以通过运行专用的 delfsctl 工具并指定要删除的属性来安全删除文件。这将根据删除策略安全删除文件，使得对手无法在之后恢复这些文件。即使对手获得了 secure_dir 的内容，也只能看到 raw_dir 中曾经写入的所有数据，但无法推断已删除文件的数据。

### 属性和策略规范

为了不使用户负担过多的属性设置，delfs 实现了受限的删除策略，相比于第2节中的模型更为简化。我们认为这些策略在实际应用中已经足够。

delfs 中的所有属性被划分为不同的类型，每个属性只出现在一个类型中。类型代表安全删除的相关类别，如所有者、项目、组织或过期日期。对于每种属性类型，可以通过字符串枚举或数值范围来指定多个属性值。数值范围会被扩展为枚举。初始化文件中的示例属性规范如下（使用 libConfig++ 语法）：

```plaintext
types = (
{
    name = "user";
    attributes = ["Alice", "Bob", "Charlie"];
    implementation = "simple";
},
{
    name = "project";
    attributes = ["X", "Y", "Z"];
    implementation = "simple";
},
{
    name = "expiration";
    attributes = ["2000", "2099"];
    specification = "range";
    implementation = "tree";
} );
```

### 删除策略

删除策略以逻辑表达式的形式表示，使用 AND 和 OR 运算符。通过实例化每个属性类型的所有可能值，每个策略可以映射到许多不同的保护类别。因此，确切的保护类别由策略和文件关联的属性值定义。以下是初始化文件中的示例删除策略：

```plaintext
policies = (
{
    name = "preferred";
    expr = "((user AND project) OR expiration)";
},
{
    name = "confidential";
    expr = "(expiration AND project)";
} );
```

当具有 preferred 策略的文件具有 user = Bob, project = X, 和 expiration = 2014 的属性时，这对应于图1中的保护类别 p5。

### 实现细节

delfs 实现了第3节中的构造，除了阈值门和时间树方案。主密钥结构 M 存储在 secure_dir 中，而辅助状态 S 和所有受保护的数据则存储在 raw_dir 中。每个存储在 delfs 中的文件都关联一个策略。如果需要更多的灵活性，可以扩展策略图。

delfs 属性类型有两种实现方式：
- **简单实现**：直接安全删除方案，每个属性值对应一个保护类别。
- **树实现**：通常用于属性值较多的情况，采用第3.6节中的构造。

用户可以在不影响删除策略的情况下对 delfs 中的文件执行常规文件系统操作，只要这些操作不会改变扩展属性。

### 管理工具

delfsctl 是一个管理工具，用于执行特定的删除操作：
1. 根据一个或多个给定的属性执行安全删除操作，并在此过程中更新 secure_dir。
2. 回收 raw_dir 中已被删除且不可访问的文件的空间。
3. 操纵 delfs 策略并修改现有文件的属性。但是，策略图只能扩展。每次后续策略都包含之前的策略，因此最新的策略安全性分析也涵盖了之前的状态。

### 性能评估

原型使用 AES-256 进行密钥加密，并使用 EncFS 的“标准配置”进行 AES-192 加密。对于图5中描述的策略，delfs 的主密钥由7个加密密钥组成。辅助状态存储每个边的一个密文和每个内部节点的两个密文，加上过期树的辅助数据，总共201个密文，所有密文都是256位 AES 密钥的加密。每次读写操作的开销分别为8次和12次 AES 操作。

### 致谢

感谢 Robert Haas、Alexis Hafner 和 Anıl Kurmuş 对此主题的建议和讨论。

### 参考文献

[此处列出参考文献]

---

以上是对原文的优化，使其更加清晰、连贯和专业。希望对你有帮助！