Dark-ROP, we show that the attacker can successfully
exfiltrate the secret from the enclave, bypass the SGX at-
testation, and break the data-sealing properties. We hope
that our work can encourage the community to explore the
SGX characteristic-aware defense mechanisms as well as
an efficient way to reduce the TCB in the enclave.
10 Acknowledgments
We thank the anonymous reviewers for their helpful feed-
back. This research was supported by Basic Science
Research Program through the National Research Foun-
dation of Korea (NRF) funded by the Ministry of Science,
ICT & Future Planning (NRF-2017R1A2B3006360), ICT
R&D programs MSIP/IITP [R-20150223-000167] and
MSIP/IITP [R0190-15-2010]. Jaehyuk Lee was partially
supported by internship at Microsoft Research. This re-
search was also partially supported by the NSF award
DGE-1500084, CNS-1563848, CRI-1629851, ONR un-
der grant N000141512162, DARPA TC program under
contract No. DARPA FA8650-15-C-7556, and DARPA
XD3 program under contract No. DARPA HR0011-16-C-
0059, and ETRI MSIP/IITP[B0101-15-0644].
536    26th USENIX Security Symposium
USENIX Association
References
[1] ANATI, I., GUERON, S., JOHNSON, S., AND SCARLATA, V.
Innovative technology for cpu based attestation and sealing. In
Proceedings of the 2nd international workshop on hardware and
architectural support for security and privacy (2013), vol. 13.
[2] ARM. Building a secure system ising trustzone technology, Dec.
2008. PRD29-GENC-009492C.
[3] ARNAUTOV, S., TRACH, B., GREGOR, F., KNAUTH, T.,
MARTIN, A., PRIEBE, C., LIND, J., MUTHUKUMARAN, D.,
O’KEEFFE, D., STILLWELL, M. L., ET AL. Scone: Secure linux
containers with intel sgx. In 12th USENIX Symposium on Op-
erating Systems Design and Implementation (OSDI 16) (2016),
USENIX Association.
[16] HOEKSTRA, M., LAL, R., PAPPACHAN, P., PHEGADE, V., AND
DEL CUVILLO, J. Using innovative instructions to create trust-
worthy software solutions. In Proceedings of the 2nd International
Workshop on Hardware and Architectural Support for Security
and Privacy (HASP) (Tel-Aviv, Israel, 2013), pp. 1–8.
[17] HUNT, T., ZHU, Z., XU, Y., PETER, S., AND WITCHEL, E.
Ryoan: A distributed sandbox for untrusted computation on secret
data. In 12th USENIX Symposium on Operating Systems Design
and Implementation (OSDI 16), USENIX Association.
[18] INTEL. SGX Tutorial, ISCA 2015. http://sgxisca.weebly.
com/, June 2015.
[19] INTEL CORPORATION. Intel Software Guard Extensions Program-
ming Reference (rev1), Sept. 2013. 329298-001US.
[4] BARNETT, R. Ghost gethostbyname () heap overflow in glibc
(cve-2015-0235), january 2015.
[20] INTEL CORPORATION. Intel Software Guard Extensions Program-
ming Reference (rev2), Oct. 2014. 329298-002US.
[5] BAUMAN, E., AND LIN, Z. A case for protecting computer games
with sgx. In Proceedings of the 1st Workshop on System Software
for Trusted Execution (2016), ACM, p. 4.
[6] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding ap-
plications from an untrusted cloud with haven. In Proceedings
of the 11th USENIX Symposium on Operating Systems Design
and Implementation (OSDI) (Broomfield, Colorado, Oct. 2014),
pp. 267–283.
[21] INTEL CORPORATION.
Intel SGX Enclave Writers Guide
https://software.intel.com/sites/
(rev1.02), 2015.
default/files/managed/ae/48/Software-Guard-
Extensions-Enclave-Writers-Guide.pdf.
[22] INTEL CORPORATION.
Intel SGX SDK for Windows* User
https://software.intel.com/
Guide (rev1.1.1), 2016.
sites/default/files/managed/d5/e7/Intel-SGX-SDK-
Users-Guide-for-Windows-OS.pdf.
[7] BITTAU, A., BELAY, A., MASHTIZADEH, A., MAZIÈRES, D.,
AND BONEH, D. Hacking blind. In 2014 IEEE Symposium on
Security and Privacy (2014), IEEE, pp. 227–242.
[23] JOHNSON, S., SAVAGAONKAR, U., SCARLATA, V., MCKEEN,
F., AND ROZAS, C. Technique for supporting multiple secure
enclaves, June 21 2012. US Patent App. 12/972,406.
[8] BLETSCH, T., JIANG, X., FREEH, V. W., AND LIANG, Z. Jump-
oriented programming: a new class of code-reuse attack.
In
Proceedings of the 6th ACM Symposium on Information, Computer
and Communications Security (2011), ACM, pp. 30–40.
[9] BUCHANAN, E., ROEMER, R., SHACHAM, H., AND SAVAGE,
S. When good instructions go bad: Generalizing return-oriented
programming to risc. In Proceedings of the 15th ACM conference
on Computer and communications security (2008), ACM, pp. 27–
38.
[10] CHECKOWAY, S., AND SHACHAM, H. Iago Attacks: Why the Sys-
tem Call API is a Bad Untrusted RPC Interface. In Proceedings of
the 18th ACM International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS)
(Houston, TX, Mar. 2013), pp. 253–264.
[11] CHHABRA, S., SAVAGAONKAR, U., LONG, M., BORRAYO, E.,
TRIVEDI, A., AND ORNELAS, C. Memory encryption engine
integration, June 23 2016. US Patent App. 14/581,928.
[12] DURUMERIC, Z., KASTEN, J., ADRIAN, D., HALDERMAN,
J. A., BAILEY, M., LI, F., WEAVER, N., AMANN, J., BEEKMAN,
J., PAYER, M., ET AL. The matter of heartbleed. In Proceedings of
the 2014 Conference on Internet Measurement Conference (2014),
ACM, pp. 475–488.
[13] GOOGLE. glibc getaddrinfo() stack-based buffer overflow (cve-
2015-7547), february 2016.
[14] GREENE, J. Intel trusted execution technology. Intel Technology
White Paper (2012).
[15] GUERON, S. A memory encryption engine suitable for general
purpose processors. Cryptology ePrint Archive, Report 2016/204,
2016. http://eprint.iacr.org/.
[24] JP AUMASSON, L. M. Sgx secure enclaves in practice:security
and crypto review, 2016. [Online; accessed 16-August-2016].
[25] KIM, S., SHIN, Y., HA, J., KIM, T., AND HAN, D. A First Step
Towards Leveraging Commodity Trusted Execution Environments
for Network Applications. In Proceedings of the 14th ACM Work-
shop on Hot Topics in Networks (HotNets) (Philadelphia, PA, Nov.
2015).
[26] LEE, S., SHIH, M.-W., GERA, P., KIM, T., KIM, H., AND
PEINADO, M. Inferring Fine-grained Control Flow Inside SGX
Enclaves with Branch Shadowing (to appear). In Proceedings
of the 26th USENIX Security Symposium (Security) (Vancouver,
Canada, Aug. 2017).
[27] OHRIMENKO, O., SCHUSTER, F., FOURNET, C., MEHTA, A.,
NOWOZIN, S., VASWANI, K., AND COSTA, M. Oblivious multi-
party machine learning on trusted processors. In USENIX Security
Symposium (2016), pp. 619–636.
[28] PAPPAS, V., POLYCHRONAKIS, M., AND KEROMYTIS, A. D.
Smashing the gadgets: Hindering return-oriented programming
using in-place code randomization. In 2012 IEEE Symposium on
Security and Privacy (2012), IEEE, pp. 601–615.
[29] RUTKOWSKA, J. Thoughts on Intel’s upcoming Software Guard
Extensions (Part 2), Sept. 2013. http://theinvisiblethings.
blogspot.com/2013/09/thoughts-on-intels-upcoming-
software.html.
[30] SCHUSTER, F., COSTA, M., FOURNET, C., GKANTSIDIS, C.,
PEINADO, M., MAINAR-RUIZ, G., AND RUSSINOVICH, M.
VC3: Trustworthy Data Analytics in the Cloud using SGX. In
Proceedings of the 36th IEEE Symposium on Security and Privacy
(Oakland) (San Jose, CA, May 2015).
USENIX Association
26th USENIX Security Symposium    537
[31] SEO, J., LEE, B., KIM, S., SHIH, M.-W., SHIN, I., HAN, D.,
AND KIM, T. SGX-Shield: Enabling Address Space Layout
Randomization for SGX Programs (to appear). In Proceedings
of the 2017 Annual Network and Distributed System Security
Symposium (NDSS) (San Diego, CA, Feb. 2017).
[32] SHACHAM, H. The geometry of innocent flesh on the bone:
Return-into-libc without function calls (on the x86). In Proceed-
ings of the 14th ACM conference on Computer and communica-
tions security (2007), ACM, pp. 552–561.
[33] SHINDE, S., CHUA, Z. L., NARAYANAN, V., AND SAXENA, P.
Preventing page faults from telling your secrets. In Proceedings
of the 11th ACM on Asia Conference on Computer and Communi-
cations Security (2016), ACM, pp. 317–328.
[34] SINHA, R., COSTA, M., LAL, A., LOPES, N., SESHIA, S.,
RAJAMANI, S., AND VASWANI, K. A design and verification
methodology for secure isolated regions. In Proceedings of the
36th ACM SIGPLAN Conference on Programming Language De-
sign and Implementation (2016), ACM.
[35] SINHA, R., RAJAMANI, S., SESHIA, S., AND VASWANI, K.
Moat: Verifying confidentiality of enclave programs. In Proceed-
ings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security (2015), ACM, pp. 1169–1184.
[36] TSAI, C.-C., ARORA, K. S., BANDI, N., JAIN, B., JANNEN, W.,
JOHN, J., KALODNER, H. A., KULKARNI, V., OLIVEIRA, D.,
AND PORTER, D. E. Cooperation and security isolation of library
oses for multi-process applications. In Proceedings of the Ninth
European Conference on Computer Systems (2014), ACM, p. 9.
[37] WEICHBRODT, N., KURMUS, A., PIETZUCH, P., AND KAPITZA,
R. Asyncshock: Exploiting synchronisation bugs in intel sgx
In European Symposium on Research in Computer
enclaves.
Security (2016), Springer, pp. 440–457.
[38] XU, Y., CUI, W., AND PEINADO, M. Controlled-channel attacks:
Deterministic side channels for untrusted operating systems. In
Security and Privacy (SP), 2015 IEEE Symposium on (2015),
IEEE, pp. 640–656.
[39] ZHANG, F., CECCHETTI, E., CROMAN, K., JUELS, A., AND SHI,
E. Town crier: An authenticated data feed for smart contracts. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security (2016), ACM, pp. 270–282.
538    26th USENIX Security Symposium
USENIX Association
A Dark-ROP gadgets
Table 2: Gadgets used for launching the Dark-ROP attack against the RemoteAttestation example code in the Intel SGX SDK. We
note that we found all gadgets from the standard library files, which are usually linked to the enclave program. First, the entire
objects in the libsgx_trts.a must be linked to the enclave binary because the library contains the code for controlling the enclave and
communication between the untrusted app and the enclave, which are essential to function the enclave. Finally, we found memcpy()
gadget from the standard c library for SGX (libsgx_tstdc.a).
Gadget
ENCLU Gadget
do_ereport:
enclu
pop rdx
pop rcx
pop rbx
ret
sgx_register_exception_handler:
mov rax, rbx
pop rbx
pop rbp
pop r12
ret
relocate_enclave:
pop rsi
pop r15
ret
pop rdi
ret
Memcpy Gadget
memcpy:
Description
The ENCLU gadget for invoking the leaf functions.
The gadget is followed by three pop gadgets
so that the attacker can set the
rdx, rcx, and rbx registers to arbitrary values,
which will be used for passing arguments to the leaf functions.
A gadget for manipulating the rax register.
Since the attacker can control the rbx register with the gadget above,
the attacker can set rax to be an arbitrary value.
This is for setting the index of the leaf function for
the ENCLU instruction.
A gadget for manipulating rsi and rdi registers
to set arguments for invoking memcpy
and the other library functions.
From
libsgx_trts.a
libsgx_trts.a
libsgx_trts.a
A gadget for copying enclave code and data to untrusted memory,
and for copying in the reverse direction vice versa.
libsgx_tstdc.a
Table 3: Gadgets used to launch Dark-ROP in Windows 64bit.
Gadget
GPR Modification Gadget
__intel_cpu_indicator_init:
Description
This gadget is used for manipulating GPRs
All Pop-gadgets required for launch
can be located in this one function
Dark-ROP
This function is introduced by libirc.a
which is an Intel support library for CPU dispatch
Note that this function is also available at
libsgx_tstdc.a in Linux 64bit.
pop r15
pop r14
pop r13
pop r12
pop r9
pop r8
pop rbp
pop rsi
pop rdi
pop rbx
pop rcx
pop rdx
pop rax
ret
ENCLU Gadget
do_ereport:
enclu
pop rax
ret
From
sgx_tstdc.lib
sgx_trts.lib
USENIX Association
26th USENIX Security Symposium    539