# 【技术分享】NSA武器库：CVE-2017-9073 EsteemAudit分析

#### 译文声明
本文是翻译文章，原文来源：paloaltonetworks.com。译文仅供参考，具体内容及含义以原文为准。

**翻译：WeaponX**
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

### 背景
2017年4月，一个名为“影子经纪人”的组织发布了一部分从美国国家安全局（NSA）窃取的漏洞利用工具，主要针对Windows操作系统。其中最著名的是被勒索软件WanaCryp0t利用的“EternalBlue”漏洞。另一个被放出的利用工具是针对CVE-2017-9073的“EsteemAudit”，这是一个针对Windows 2003和Windows XP上的远程桌面协议（RDP）的利用工具。由于微软已于2014年结束对XP的支持，并于2015年结束对2003的支持，因此官方并未发布该漏洞的补丁。

### EsteemAudit 总览
“EsteemAudit”是一个RDP远程利用工具，使用了inter-chunk heap overflow方法。它利用了Windows智能卡模块gpkcsp.dll中的key_set数据结构（大小为0x24a8）。在这个结构中，有一个名为key_data的数据结构（大小为0x80），用于存放智能卡相关信息。在相邻内存空间中存储着两个key_object指针。然而，在gpkcsp!MyCPAcquireContext函数中调用了memcpy函数，且未进行边界检查，从而将用户可控的数据复制到key_data中。如果攻击者控制的数据大于0x80，则相邻的key_object指针会被恶意数据覆盖。EsteemAudit通过部署一块0xb2-7大小的内存，利用memcpy拷贝恶意数据到key_data中，随后key_object被覆盖为0x080190dc地址。这个地址位于gpkcsp.dll的数据段中，接着EsteemAudit在此地址部署恶意数据。exploit会将用户控制的数据放入全局变量0x080190d8中，然后通过gpkcsp!ReleaseProvider释放C++对象call [vtable+8]，从而控制EIP。最终，通过SharedUserData技术使用syscall调用ID为0x8f的VirtualProtect函数修改shellcode内存的执行权限，完成第一阶段的shellcode执行。

### 介绍
尽管存在许多RDP远程代码执行漏洞，但在NT4/Win98之后没有公开发布的利用代码。然而，2017年4月，影子经纪人公布了从NSA窃取的工具，其中包括针对Windows XP和Windows 2003上RDP远程代码执行漏洞的利用工具EsteemAudit。本文将首先介绍RDP协议的内部机制，然后分析EsteemAudit.exe本身。接下来，我们将探讨RDP协议在用户态和内核态的工作方式、inter-chunk heap overflow的发生机制以及如何利用这一漏洞在受影响的操作系统上执行shellcode。最后，我们将讨论在没有补丁的情况下如何防御这一漏洞。

### 架构和组件
终端服务架构主要分为四个部分：
1. **多用户内核**
2. **远程桌面客户端**
3. **终端服务许可服务**
4. **会话目录服务**

下表列出了终端服务的各个组件及其说明。Nicolas Collignon在其论文《Tunneling TCP over RDP》中详细描述了这些组件之间的关系。

在内核态，相关组件位于rdpwd.sys中，负责Multipoint Communication Service (MCS)协议栈。RDP PDU（协议数据单元）在此模块中被解密并解析。

在用户态，winlogon组件负责客户端认证。例如，如果客户端请求智能卡认证，winlogon.exe会运行智能卡模块与客户端交互。

### RDP 协议
通过对远程桌面服务的简要介绍，我们可以深入了解RDP协议中被EsteemAudit利用的含有漏洞的模块。MSDN提供了关于RDP的一些文档，包括基本连接和图形重定向[[MS-RDPBCGR]](https://msdn.microsoft.com/en-us/library/cc240445.aspx)和智能卡虚拟通道扩展[[MS-RDPESC]](https://msdn.microsoft.com/en-us/library/cc242596.aspx)等。

为了深入分析，我们阅读了以下文档：
- [[MS-RDPBCGR] – Remote Desktop Protocol: Basic Connectivity and Graphics Remoting](https://msdn.microsoft.com/en-us/library/cc240445.aspx)
- [[MS-RDPESC] – Remote Desktop Protocol: Smart Card Virtual Channel Extension](https://msdn.microsoft.com/en-us/library/cc242596.aspx)
- [[MS-RDPEFS] – Remote Desktop Protocol: File System Virtual Channel Extension](https://msdn.microsoft.com/en-us/library/cc241305.aspx)
- [[MS-RPCE] – Remote Procedure Call Protocol Extensions](https://msdn.microsoft.com/en-us/library/cc243560.aspx)

MS-RDPBCGR基于ITU T.120系列协议，该系列包含许多其他标准，如X.224标准，用于阐述传输层协议如何交互。X.224标准定义了request PDU和Confirm PDU需要使用的加密方法。

在下面的示例中，X.224请求中的encryptionMethods标志位被设置为0x00000012，表示客户端请求使用128-bit RC4加密[128BIT_ENCRYPTION_FLAG 0x00000002]。服务端在X.224 confirm PDU中设置encryptionMethod标志位0x00000002（128-bit RC4）确认使用128-bit RC4加密。

本文不再详细阐述RDP连接过程的后续步骤，更多细节请参阅[[MS-RDPBCGR] – Remote Desktop Protocol: Basic Connectivity and Graphics Remoting](https://msdn.microsoft.com/en-us/library/cc240445.aspx)。

RDP连接建立后，客户端和服务器之间的PDU将使用协商的加密算法进行加密。下图显示了一个加密PDU的示例：

PDU中的数据如下：
```
64 00 04 03 eb 70 81 56 -> PER encoded (ALIGNED variant of BASIC-PER) SendDataRequest
initiator = 1005 (0x03ed)
channelId = 1003 (0x03eb)
dataPriority = high
segmentation = begin | end
userData length = 0x156 = 342 bytes
48 00 -> TS_SECURITY_HEADER::flags = 0x0048 0x0048 (SEC_INFO_PKT | SEC_ENCRYPT
00 00 -> TS_SECURITY_HEADER::flagsHi – ignored as flags field does not contain SEC_FLAGSHI_VALID (0x8000)
6f 6d 0c d5 b7 0c 5d 7e -> TS_SECURITY_HEADER1::dataSignature
以86 b8 8a a9开始，从偏移为0x51后剩余的数据TS_INFO_PACKET被加密
len
0178d254  0000014a   
                              J…
encrypted
038e3c8b  a98ab886 dabad90d d9d8f9e3 8dd5bafa  …………….
038e3c9b  1407ea51 883cb6af 21ca2bdb cab1e030  Q…..<..+.!0…
038e3cab  d6aaeccd 1c599171 1be8c40d 96d651dc  ….q.Y……Q..
038e3cbb  2d018a22 242aac0d 7b58948f 4be28b23  “..-..*$..X{#..K
038e3ccb  36cf54c6 52b70939 4064362b 9e37e989  .T.69..R+6d@..7.
038e3cdb  9ff09b06 4f862c80 1546198a ac9b03ed  …..,.O..F…..
038e3ceb  420acbdf 566591c1 7f471159 0e1d6906  …B..eVY.G..i..
038e3cfb  906474f4 476ea91e 4db2edd2 fb464bfd  .td…nG…M.KF.
plain
038e3c8b  00000000 00000133 001a0000 00000000  ….3………..
038e3c9b  00000000 00640061 0069006d 0069006e  ….a.d.m.i.n.i.
038e3cab  00740073 00610072 006f0074 00000072  s.t.r.a.t.o.r…
038e3cbb  00000000 00020000 0031001c 00320039  ……….1.9.2.
038e3ccb  0031002e 00380036 0032002e 00320034  ..1.6.8…2.4.2.
038e3cdb  0031002e 003c0000 003a0043 0057005c  ..1…<.C.:..W.
038e3ceb  004e0049 0054004e 0053005c 00730079  I.N.N.T..S.y.s.
038e3cfb  00650074 0033006d 005c0032 0073006d  t.e.m.3.2..m.s.
```

我们可以通过文档[MS-RDPBCGR]查阅协议的细节来查看TS_INFO_PACKET。

### 智能卡扩展
RDP协议支持客户端使用智能卡模式登录。根据文档[MS-RDPESC]，交互流程如下：

EsteemAudit使用SCARD_IOCTL_TRANSMIT与服务器端的智能卡模块进行交互。文档描述了服务器端响应客户端的数据包的各种类型，其中包括Transmit_Return类型。

### RDP 利用工具 (EsteemAudit.exe)
了解RDP的基础知识后，我们来看看EsteemAudit的具体实现。EsteemAudit.exe类似于RDP客户端，完成了与服务器端的RDP协议交互。EsteemAudit利用了RDP协议中的智能卡扩展，向服务器端发送智能卡认证请求。随后，RDP服务端会使用智能卡模块gpkcsp.dll处理收到的数据，从而触发漏洞。

### EsteemAudit.exe 总览
通过逆向分析EsteemAudit二进制文件，我们在地址.text:00381009处找到了名为GoRunExp的函数：
```c
GoRunExp
    à InitializeInputParameters // 获取配置信息
    à connect2Target
        à initRDPLib
        à emulateSmartCard
```

希望以上优化后的文本能够更清晰、连贯和专业地传达所需的信息。