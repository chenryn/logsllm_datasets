Figure 2: Example illustrating model of pointers
during static analysis and security debugging
Figure 2 shows an example of the write sets of pointers and
their referent objects. We can see that after static analysis,
WS(i) contains the instruction on line 1 and WS(ref(p))
contains only line 3. Note that ref(p) remains unresolved
during static analysis. During security debugging, however,
p’s value is updated on lines 2 and 4. At these points, we
can see that ref(p) is resolved to i and NULL, respectively.
During the execution of lines 2 and 3, while p points to i,
WS(i) changes to include the instructions in WS(ref(p)).
However, once p’s referent object changes to NULL on line 4,
WS(i) goes back to its original value.
Since we use the debugging agent to determine dynami-
cally when a pointer variable is updated and ﬁnd the corre-
sponding memory region, we can avoid pointer alias analysis
during static analysis. Indeed, general pointer alias analy-
sis is known to be an undecidable problem [13, 22]. Our
approach allows us to bypass it without sacriﬁcing the anal-
ysis accuracy. We will discuss the details of pointer updating
and tracking in Section 4, since it occurs during debugging.
3.1.2 Handling Chained Dereferences
Chained dereferences make it diﬃcult for the debugging
agent to track the memory writes and verify the write set
constraint. Examples of chained dereferences include **p,
array[1][2] and *(p+q). We use source code rewriting to
transform chained dereferences to simple ones so that the
techniques discussed in Section 3.1 can be applied. We per-
form this transformation only if the expression potentially
is updated. For example, x = var.arr[5]->name need not
be transformed since the modiﬁed variable x is already in a
simple form and var.arr[5]->name is not updated at all.
1 int z;
2 int *y = &z;
3 int **x = &y;
4 **x = 10;
1 int z;
2 int *y = &z;
3 int **x = &y;
4 int *temp = *x;
5 *temp = 10;
Figure 3: Example of chained dereference
Figure 3 shows an example of chained dereferencing on
the left. The static analyzer models the chained derefer-
ence on line 4 as a simple dereference, and adds line 4 to
WS(ref(x)). This is because we model variable updates as
low-level write instructions, which do not have any access to
type information. However, we cannot determine the num-
ber of dereferences that have occurred in calculating the ﬁnal
target address of a write instruction. Thus, at line 4, the
agent is unable to determine the relationship between x and
z. When it detects a write to z, it ﬁrst checks if line 4 is
in WS(z) and then WS(y). Both checks fail, since line 4 is
only in WS(ref(x)) and z is not the referent of x.
To handle such chained dereferences, we use automatic
source code rewriting. Any chained dereference can be trans-
lated into simple dereferences by introducing one or a few
temporary variables. For a chained dereference of the form
∗X, we declare a temporary variable t whose type is that of
X and assign the value of X to t. In the above example, we
can replace line 4 with lines 4 and 5 on the right in Figure 3.
After the transformation, upon executing line 4, the de-
bugging agent sets temp’s referent to z and adds temp to z’s
list of references. When line 6 attempts to write to z, the
debugging agent determines it as a legitimate write, because
temp is one of z’s references and line 6 is in WS(ref(temp)).
3.1.3 Separating struct ﬁelds
Another complication with C is in dealing with struct
constructs. Modeling a struct variable as a single memory
region can introduce false negatives. An instruction that op-
erates on one ﬁeld could illegitimately modify another ﬁeld
without being detected. This may happen since the instruc-
tion is in the struct variable’s write set and is therefore
considered as a legitimate instruction. For example, in the
code segment shown in the left part of Figure 4, strcpy
overﬂows the  str  ﬁeld and writes into the  num  ﬁeld.
typedef struct {
char str[4];
int
num;
} entry;
typedef struct {
char str[4];
int
num;
} entry;
1 int main() {
entry var;
2
3
strcpy(var.str,
"Hello");
4 }
1 int main() {
entry var;
2
char* temp;
3
4
temp = var.str;
strcpy(temp,
5
"Hello");
6 }
Figure 4: Example of struct ﬁeld dereference
In order to solve this problem, we need to treat each ﬁeld
in a struct as a separately monitored memory region. Once
again, we turn to source code rewriting to generate individ-
ual memory regions for each ﬁeld in a struct. A ﬁeld ref-
erence of a struct is considered a dereferencing itself. We
replace every ﬁeld expression with a temporary variable of
the same type. For the example shown in Figure 4, MemSh-
erlock adds a temporary variable of char * type and assigns
it var.str before line 4. Line 4 is then added to the WS
of temp. When the statement in line 5 overﬂows the buﬀer
and modiﬁes the memory region of num, the debugger can
detect the overﬂow and raise an error, since temp points to
the memory region of str and not of num.
The current implementation of MemSherlock treats an ar-
ray or a union as a single memory region. Therefore, arrays
of structs or structs within unions cannot be handled in
the same way. This prevents MemSherlock from capturing
overﬂows from one ﬁeld (or element) to another. In prac-
tice, we have not observed any false negatives due to this
limitation. We will discuss more implementation details on
structs in section 5.2, and point out the possible false pos-
itives and false negatives that may arise in Section 6.
3.2 Mapping Variables to Memory Regions
The aforementioned static analysis at the source code level
allows us to extract write sets of variables. To facilitate the
debugging process, we have to provide additional informa-
tion to the debugging agent so that it can associate the
variables with memory regions and identify the write sets of
those memory regions during debugging time.
We perform binary analysis to determine the location of
memory regions corresponding to variables. This is trivial
for global variables, since global variables are assigned static
addresses after compilation. Local variables, however, have
dynamic addresses depending on when the functions con-
taining the local variables are called. To address this issue,
we use the addresses of functions that contain the local vari-
ables and their frame pointer oﬀset values to identify local
variables. The debugging agent can use these values and
the actual function calls to calculate the real memory ad-
dresses during debugging. The binary analysis also provides
information about segment sizes and locations as well as the
addresses of functions.
3.3 Output of Pre-debugging Phase
The information gathered during the pre-debugging phase
is written to a text ﬁle and passed to the debugging agent.
The pre-debugging phase need be done only once per pro-
gram. The ﬁle contains a listing of variables along with their
write sets in the form of ﬁle name and line number pairs. It
contains additional information about variables to simplify
the debugging process. Variables are distinguished as global
or local. For local variables, we also output the variable’s en-
closing function. In addition, pointer variables and formal
parameters that are pointers are ﬂagged as such. Finally,
line numbers in a pointer’s write set are marked with a ﬂag
if the statement modiﬁes the referent instead of the pointer.
This enables the debugging agent to divide the write set of a
pointer variable into two separate write sets for the pointer
and its referent, respectively.
4. DEBUGGING VULNERABILITIES
During the debugging phase, MemSherlock monitors the
program execution to detect memory corruption and infer
vulnerability information. As discussed earlier, MemSher-
lock veriﬁes the modiﬁcations to memory regions with the
write set information, and identiﬁes an illegal write when the
updating instruction is not in the write set. To accomplish
automated vulnerability analysis, the MemSherlock debug-
ging agent needs to perform three primary tasks:
1. State Maintenance: Keep track of the memory regions
along with their write sets as program executes. This
is necessary, because the active memory regions and
their write sets change as program executes.
2. Memory Checking: Track and verify memory update
operations to detect memory corruption.
3. Vulnerability Extraction: Generate vulnerability infor-
mation once a memory corruption is detected.
In the following, we ﬁrst discuss a few key data structures,
which will be used in the later discussion, and then explain
the three primary tasks in detail.
4.1 Key Data Structures
The MemSherlock debugging agent uses several key data
structures. For each monitored memory region r, the agent
creates a MemoryRegion object m, which stores r’s address,
size and write set. Additionally, the MemoryRegion object
for each pointer p stores WS(ref(p)) and a pointer to its ref-
erent object’s MemoryRegion. At any time during debugging,
MemSherlock maintains all the active memory regions. For
the sake of presentation, we collectively refer to these mem-
ory regions as ActiveMemoryRegions, though our implemen-
tation manages global variables, local variables, and heap-
allocated variables separately for performance reasons. For
each user-deﬁned function in the executable, a Procedure
object is created to store the function’s name, its address in
the code segment, and a list of MemoryRegions correspond-
ing to its local variables. For local variables, their addresses
are stored as frame pointer oﬀsets.
Certain memory regions, such as a function’s return ad-
dress or saved registers, should never be written by source-
level instructions1. These memory regions, along with meta
data adjacent to dynamically allocated memory regions and
segments in the virtual memory that do not have write per-
missions (e.g., code segment, kernel space), are stored in
NonWritableRegions.
Since functions may be called recursively, MemSherlock
maintains a ProcedureStack, a stack of Procedures whose
1MemSherlock begins monitoring these regions after the
frame pointer is set. Therefore, they should not be updated
until the function returns
elements correspond to the user-level functions currently on
the execution stack. Maintaining this stack is necessary to
ensure that MemSherlock can monitor local variables cor-
rectly when there are several instances of the same function
on the execution stack.
These key data structures facilitate the MemSherlock de-
bugging process.
In particular, state maintenance actions
update the data structures so that the current state of exe-
cution is reﬂected accurately, while memory checking actions
ensure that only legitimate write instructions are executed.
4.2 State Maintenance
It is necessary to maintain the list of active memory re-
gions and their current write sets at any time of program ex-
ecution. MemSherlock updates its internal data structures
at certain runtime events. For example, when a function call
is made, the local variables of the function should be added
to the list of monitored memory regions and their write sets
should be generated accordingly.
We discuss the critical events and the corresponding state
maintenance in detail below:
Pointer Value Updates and Pointer-Type Function
Arguments: When an update to a pointer variable p with
the address of a MemoryRegion m is detected, the MemSher-
lock debugging agent ﬁrst determines the new referent object
by searching through ActiveMemoryRegions. The referent
pointer of m is set accordingly if m is found.
If the new
referent cannot be matched to a monitored memory region,
this implies that there could be a potential dangling pointer
or misuse of a pointer.
Function Calls and Returns: When a user-deﬁned
function is called, MemSherlock pushes a Procedure record
associated with this function onto ProcedureStack. MemSh-
erlock then calculates the real addresses of its local vari-
ables by adding their oﬀsets to the current frame pointer.
The function’s return address, the saved frame pointer, and
any padded regions between local variables are added to
NonWritableRegions, enabling MemSherlock to capture il-
legal writes to these regions. (Note that the static analysis
performed in the pre-debugging phase does not provide suf-
ﬁcient information about these memory regions.) This is
especially useful in detecting stack buﬀer overruns. When
the function returns, MemSherlock pops the corresponding
Procedure record oﬀ the ProcedureStack, and removes its
return address, the saved frame pointer, and the padded
regions from NonWritableRegions.
MemSherlock uses the knowledge of frame pointers. There-
fore, the above operations can be done once the frame pointer
is set, rather than when a call instruction is executed. A
side beneﬁt is that all the memory writes that take place
to initialize a function’s activation record on stack do not
cause alarms, since the memory regions are not added yet
to ActiveMemoryRegions. When the frame pointer is ini-
tialized, MemSherlock looks for any pointer-type formal-in
arguments.
If the procedure has any, MemSherlock reads
them and determines the referent object in the same way
as when a pointer is updated. Again, this allows the static
analysis performed in the pre-debugging phase to be fairly
simple, since the MemSherlock debugging agent takes care
of inter-procedural dependencies.
Heap Memory Management: When a heap mem-
ory region is allocated using the malloc family of func-
tions, MemSherlock creates a new MemoryRegion object and
adds it to ActiveMemoryRegions.
In addition, any mem-
ory manager meta data adjacent to the block is added to
NonWritableRegions. This not only ensures that the meta
data is protected, but also facilitates the detection of heap
buﬀer overruns.
When free is invoked on a memory region, MemSherlock
ﬁrst checks that the region is in ActiveMemoryRegions. If
so, MemSherlock frees the region, and removes the corre-
sponding MemoryRegion record from ActiveMemoryRegions.
Otherwise, MemSherlock generates an error message, indi-
cating that the program has tried to free a non-heap allo-
cated region, which might indicate a double free error.
Dynamically Linked Libraries: MemSherlock keeps
track of memory regions allocated for shared libraries. Each
shared library has an executable region and a read-only re-
gion. In some cases, libraries also have .bss sections. Shared
libraries can be loaded to arbitrary locations in the virtual
memory and their location is determined at runtime. An-
other feature is lazy binding, which loads a library only when
a function from that library is called. MemSherlock reads
the memory region information from the process map in the
proc ﬁle system, and can infer that a new library has been
loaded while performing write checks. It then checks if the
global oﬀset table (GOT) has been modiﬁed, and reads the
map ﬁle only if GOT has changed. MemSherlock groups
library regions with respect to their permissions and allows
a library to modify any writable regions of the library. We
discuss the ramiﬁcation of this simpliﬁcation in section 6.3.
4.3 Memory Checking
When a memory write to an address addr occurs, MemSh-
erlock searches through ActiveMemoryRegions to look for
a MemoryRegion that covers addr (i.e., addr falls in this
MemoryRegion). Moreover, MemSherlock also searches for
pointer-type MemoryRegions pointing to such a MemoryRegion.
Once found, MemSherlock veriﬁes that the write instruc-
tion’s address is in the WS of this MemoryRegion, or in one
of the memory regions whose pointers point to it. Note that
this implies that the memory region m for a pointer-type
variable p can be veriﬁed in two ways.
If the destination
address is in m then the membership is checked for WS(p).
If the destination address is in the referent object’s memory
region then the membership is checked for WS(ref(p)).
If MemSherlock cannot ﬁnd a MemoryRegion correspond-
ing to the write destination address addr, it will perform the
same search in NonWritableRegions. If a match is found,
this means the write instruction is trying to corrupt a non-
writable region, and MemSherlock emits an error message.
If the destination address does not match any of the en-
tries in ActiveMemoryRegions or NonWritableRegions, there
are several things that could be happening. Depending on
the program counter (PC) and the destination address, this
could be a call instruction pushing values onto the stack.
Since the frame pointer of the callee is not set, we do not
monitor its memory regions at this time. Second, it could
be a library function writing onto its stack. MemSherlock
keeps track of the lowest memory address of client function
activation records for this purpose. Third, this could be a
library function writing to dynamically allocated memory.
Because the static analyzer outputs write sets as ﬁle name
and line number pairs, the PC must be translated into a
ﬁle name and line number before performing a write check.
The translation from instruction address to ﬁle name makes
library functions a challenge. When a library function is
called, the execution jumps to the shared library memory
region where multiple function calls may occur. When this
occurs, the PC is an instruction address in the shared library
region for which no source code is available.
In order to
address this problem, the agent needs to ﬁnd the call site of
the library function in the user code. This can be done either
through a stack walk or by keeping track of the last jump
instruction. Once the original call site has been recovered,
the memory write check can proceed as describe before.
4.4 Generating Vulnerability Information
Unlike most other memory level monitoring tools, MemSh-
erlock detects memory corruption at the time of memory
write. This enables MemSherlock to pinpoint the exact
statement in the source code responsible for the corruption.
In many cases, just knowing the point of corruption is suf-
ﬁcient to determine the vulnerability. For example, most
programmers look for a buﬀer overﬂow when the problem
statement is a strcpy. However, to provide more vulnerabil-
ity information, MemSherlock incorporates the taint anal-
ysis from TaintCheck [20] to check if the value written to
the destination address during the corruption is tainted. If
so, MemSherlock performs additional analysis to report the
source of the tainted data (e.g., network packet) and a dy-
namic slice of the source code that propagated the tainted
data. The programmer can see how the tainted data is in-
troduced and causes the vulnerability to be exploited.
As described earlier, MemSherlock keeps a close watch on
memory regions and operations performed on them. In re-
turn, MemSherlock can determine the memory region being
modiﬁed and the program variable to which the memory re-
gion corresponds. It also determines if the memory region
was updated through the use of the variable or dereferenc-
ing of a pointer variable. This greatly simpliﬁes the analysis
of the vulnerability, since the programmer does not have to
iterate through the call stack and pointer aliasing to deter-