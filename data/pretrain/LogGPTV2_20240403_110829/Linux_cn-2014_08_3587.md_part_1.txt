---
author: ''
category: 技术
comments_data:
- date: '2014-08-11 18:33:01'
  message: 用不到
  postip: 198.143.130.90
  username: 微博评论
- date: '2014-08-11 20:03:01'
  message: 马克！
  postip: 60.29.248.94
  username: 微博评论
- date: '2014-08-13 15:33:01'
  message: dmesg
  postip: 113.108.131.227
  username: 微博评论
- date: '2014-08-13 20:33:02'
  message: 收下了
  postip: 110.90.30.149
  username: 微博评论
- date: '2015-09-14 15:58:28'
  message: "安装在pc上的Ubuntu运行一个段错误程序后，用dmesg可以打印出这个段错误的相关信息：\r\n[695596.585044]
    xiao[19078]: segfault at 0 ip 080483c4 sp bf815788 error 6 in xiao[8048000+1000]\r\n[710079.934715] a.out[14084]: segfault at 0 ip 080483c4 sp bff93648 error
    6 in a.out[8048000+1000]\r\n[712629.489738] xiao[28812]: segfault at 0 ip
    080483c4 sp bf965978 error 6 in xiao[8048000+1000]\r\n但我自己编了一个linux内核在ARM上面跑，相关的段错误信息不能用dmesg打印出来，请问这是需要安装什么服务、或是系统配置吗？请指教。"
  postip: 171.221.252.30
  username: zxc [Liebao|Windows 7]
- date: '2016-06-09 21:25:21'
  message: 在文中列出的情况下，没有必要用grep，直接在less中就可以。 &amp;pattern&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
    &nbsp; *&nbsp;&nbsp;Display only matching lines.&nbsp;&nbsp;-- from help page
    of less
  postip: 114.212.81.249
  username: 来自江苏南京南京大学的 Firefox 46.0|Windows 10 用户
count:
  commentnum: 6
  favtimes: 3
  likes: 0
  sharetimes: 6
  viewnum: 78102
date: '2014-08-11 18:05:47'
editorchoice: false
excerpt: ‘dmesg’命令显示linux内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM等多个运行级别的大量的系统信息。当计算机启动时，系统内核（操作系统的核心部分）将会被加载到内存中。在加载的过程中会显示很多的信息，在这些信息中我们可以看到内核检测硬件设备。
fromurl: http://www.tecmint.com/dmesg-commands/
id: 3587
islctt: true
largepic: /data/attachment/album/201408/11/180550vdreddxx16k13p2x.png
permalink: /article-3587-1.html
pic: /data/attachment/album/201408/11/180550vdreddxx16k13p2x.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: ‘dmesg’命令显示linux内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM等多个运行级别的大量的系统信息。当计算机启动时，系统内核（操作系统的核心部分）将会被加载到内存中。在加载的过程中会显示很多的信息，在这些信息中我们可以看到内核检测硬件设备。
tags:
- dmesg
- 命令
- Linux
thumb: false
title: Linux系统中‘dmesg’命令处理故障和收集系统信息的7种用法
titlepic: false
translator: cvsher
updated: '2014-08-11 18:05:47'
---
‘dmesg’命令显示linux内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM等多个运行级别的大量的系统信息。当计算机启动时，系统内核（操作系统的核心部分）将会被加载到内存中。在加载的过程中会显示很多的信息，在这些信息中我们可以看到内核检测硬件设备。
[![dmesg Command Examples](https://camo.githubusercontent.com/433d31191ed6401b5285a33a5b0a6c01d439d0fe/687474703a2f2f7777772e7465636d696e742e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031342f30372f646d6573672d436f6d6d616e642d4578616d706c65732e706e67)](https://camo.githubusercontent.com/433d31191ed6401b5285a33a5b0a6c01d439d0fe/687474703a2f2f7777772e7465636d696e742e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031342f30372f646d6573672d436f6d6d616e642d4578616d706c65732e706e67)
dmesg 命令的使用范例
‘dmesg’命令设备故障的诊断是非常重要的。在‘dmesg’命令的帮助下进行硬件的连接或断开连接操作时，我们可以看到硬件的检测或者断开连接的信息。‘dmesg’命令在多数基于**Linux**和**Unix**的操作系统中都可以使用。
下面我们展示一些最负盛名的‘dmesg’命令工具以及其实际使用举例。‘dmesg’命令的使用语法如下。
```
# dmesg [options...]
```
### 1. 列出加载到内核中的所有驱动
我们可以使用如‘**more**’。 ‘**tail**’, ‘**less** ’或者‘**grep**’文字处理工具来处理‘dmesg’命令的输出。由于dmesg日志的输出不适合在一页中完全显示，因此我们使用管道（pipe）将其输出送到more或者less命令单页显示。
```
[PI:EMAIL ~]# dmesg | more
[PI:EMAIL ~]# dmesg | less
```
### 输出
```
[    0.000000] Initializing cgroup subsys cpuset
[    0.000000] Initializing cgroup subsys cpu
[    0.000000] Initializing cgroup subsys cpuacct
[    0.000000] Linux version 3.11.0-13-generic (buildd@aatxe) (gcc version 4.8.1 (Ubuntu/Linaro 4.8.1-10ubuntu8) ) #20-Ubuntu SMP Wed Oct 23 17:26:33 UTC 2013 
(Ubuntu 3.11.0-13.20-generic 3.11.6)
[    0.000000] KERNEL supported cpus:
[    0.000000]   Intel GenuineIntel
[    0.000000]   AMD AuthenticAMD
[    0.000000]   NSC Geode by NSC
[    0.000000]   Cyrix CyrixInstead
[    0.000000]   Centaur CentaurHauls
[    0.000000]   Transmeta GenuineTMx86
[    0.000000]   Transmeta TransmetaCPU
[    0.000000]   UMC UMC UMC UMC
[    0.000000] e820: BIOS-provided physical RAM map:
[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009fbff] usable
[    0.000000] BIOS-e820: [mem 0x00000000000f0000-0x00000000000fffff] reserved
[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000007dc08bff] usable
[    0.000000] BIOS-e820: [mem 0x000000007dc08c00-0x000000007dc5cbff] ACPI NVS
[    0.000000] BIOS-e820: [mem 0x000000007dc5cc00-0x000000007dc5ebff] ACPI data
[    0.000000] BIOS-e820: [mem 0x000000007dc5ec00-0x000000007fffffff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000e0000000-0x00000000efffffff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000fec00000-0x00000000fed003ff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000fed20000-0x00000000fed9ffff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000fee00000-0x00000000feefffff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000ffb00000-0x00000000ffffffff] reserved
[    0.000000] NX (Execute Disable) protection: active
.....
```
### 2. 列出所有被检测到的硬件
要显示所有被内核检测到的硬盘设备，你可以使用‘**grep**’命令搜索‘**sda**’关键词，如下：
```
[PI:EMAIL ~]# dmesg | grep sda
[    1.280971] sd 2:0:0:0: [sda] 488281250 512-byte logical blocks: (250 GB/232 GiB)
[    1.281014] sd 2:0:0:0: [sda] Write Protect is off
[    1.281016] sd 2:0:0:0: [sda] Mode Sense: 00 3a 00 00
[    1.281039] sd 2:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    1.359585]  sda: sda1 sda2 
[    1.360052] sd 2:0:0:0: [sda] Attached SCSI disk
[    2.347887] EXT4-fs (sda1): mounted filesystem with ordered data mode. Opts: (null)
[   22.928440] Adding 3905532k swap on /dev/sda6.  Priority:-1 extents:1 across:3905532k FS
[   23.950543] EXT4-fs (sda1): re-mounted. Opts: errors=remount-ro
[   24.134016] EXT4-fs (sda5): mounted filesystem with ordered data mode. Opts: (null)
[   24.330762] EXT4-fs (sda7): mounted filesystem with ordered data mode. Opts: (null)
[   24.561015] EXT4-fs (sda8): mounted filesystem with ordered data mode. Opts: (null)
```
**注解** ‘sda’表示第一块 SATA硬盘，‘sdb’表示第二块SATA硬盘。若想查看IDE硬盘搜索‘hda’或‘hdb’关键词。
### 3. 只输出dmesg命令的前20行日志