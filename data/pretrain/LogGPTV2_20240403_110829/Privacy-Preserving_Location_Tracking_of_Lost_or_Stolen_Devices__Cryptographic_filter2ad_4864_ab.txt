When Valerie goes to lunch (which varies in time quite
a bit depending on her work), she heads across the street
to a cafe to get away from the ofﬁce. She often uses
her company laptop and the cafe’s wireless to peruse the
Internet. Since deployment of the new tracking system,
Valerie has been complaining that no matter when she
takes lunch, Irving (a member of the IT staff who is re-
puted to have an unreciprocated romantic interest in her)
almost always ends up coming by the cafe a few minutes
after she arrives.4
Because the location updates sent by Valerie’s laptop
use a static identiﬁer, it was easy for Irving (even without
access to the protected database) to infer which was hers:
he looked at identiﬁers with updates originating from the
block of IP addresses used within Valerie’s department
and those used by the cafe. After a few guesses (which he
validated by simply seeing if she was at the cafe), Irving
determined her device’s identiﬁcation number and from
then on knew whenever she went for lunch.
Discussion: The use of unchanging identiﬁers (even if
originally anonymized) allows linking attacks, in which
an adversary observing updates can associate updates
from different locations as being from the same device.
278 
17th USENIX Security Symposium 
USENIX Association
Additionally, the ﬁnely-grained timing information re-
vealed by sending updates upon each new Internet con-
nection is a side-channel that can leak information.
Summary. The sequence of scenarios depicts the wide
variety of potential users of tracking systems. Moreover,
they highlight two fundamental security goals.
• Vance was a victim of compromised device tracking.
(Scenario 1.)
• Vance, VGC, and Valerie were all victims of compro-
mised location privacy. (Scenarios 2, 3, 4, and 5.)
The threat models related to achieving location privacy
while retaining device tracking capabilities are complex
because there exist numerous adversaries with widely
varied powers and motivation:
• The unscrupulous party in possession of a device,
which we will simply call the thief. The thief might be
unsophisticated, sophisticated and intent on disabling
the tracking device, or sophisticated and wish to reveal
past locations.
• Internet-connected outsiders that might intercept up-
date trafﬁc (e.g.,
the crackers at the coffee shop).
Such adversaries call for ensuring the use of encrypted
channels.
• The remote storage provider, or the entity control-
ling the system(s) that host location updates, might
be untrustworthy, suggesting the need for location up-
dates that are anonymous, unlinkable, and encrypted,
thereby denying private information even to the re-
mote storage provider.
3 The Adeona Core: Providing Anony-
mous, Unlinkable Updates
The core module is the portion of a client primarily re-
sponsible for preparing, scheduling, and sending location
updates to the remote storage. The Adeona core is, con-
sequently, the foundation of our tracking system’s pri-
vacy properties. We treat its development ﬁrst, and men-
tion that the core stands by itself as a component that will
work in numerous deployment settings, in addition to the
setting handled by the full Adeona system (described in
the next section).
The discussion in Section 2 illustrates that the Adeona
core must provide mechanisms to
(1)
ensure content sent to the remote storage is anony-
mous and unlinkable;
ensure forward-privacy (stored data on the client
should not be sufﬁcient for revealing previous lo-
cations);
(2)
(3) mitigate timing attacks; and
(4)
allow the owner to efﬁciently search the remote
storage for updates.
Basic design. A ﬁrst approach for building a core would
be to just utilize a secure symmetric encryption scheme.
That is, the owner could install on the client a secret key
and also store a copy separately, perhaps printed on a
piece of paper or stored on a secure removable token.
For each new Internet connection, the core would en-
crypt the location data using this secret key and imme-
diately send the ciphertext to the remote storage. Goal
(1) above would be satisﬁed because (assuming one used
a standard, secure encryption scheme) these ciphertexts
would, indeed, be anonymous and unlinkable. But, the
other three goals are not met. A thief that gets access
to the device and the secret key could decrypt previous
updates. Sending the ciphertext immediately upon de-
tecting a new Internet connection also leaks ﬁne-grained
timing information. More importantly, since ciphertexts
submitted by all users are anonymous, there is no efﬁ-
cient way for the owner to search the database for his
updates.5
The Adeona core utilizes a more sophisticated ap-
proach to tackle the other goals while preserving the abil-
ity to address goal (1). Instead of a key for an encryp-
tion scheme, the owner initializes the client with a se-
cret cryptographic seed for a pseudorandom generator
(PRG) [6]. Each time the core is run it uses the PRG and
the seed to deterministically generate two fresh pseudo-
random values: an index and a secret key (for the en-
cryption scheme). The location information is encrypted
using the secret key. The core sends both the index and
the ciphertext to the remote storage. As before the ci-
phertext reveals no information, but the index is pseudo-
random as well, meaning the entire update is anonymous
and unlinkable. Thus goal (1) is satisﬁed. Goal (4) is
as well: the owner, having a copy of the original crypto-
graphic seed, can recompute all of the indices and keys
used. This allows for efﬁcient search of the remote stor-
age for his or her updates, using the indices. The indices
do not reveal decryption keys nor past or future indices.
This approach does not yet satisfy goal (2), because a
thief — or customs ofﬁcial — can also use the seed to
generate all the past indices and keys. We can rectify
this by using a forward-secure pseudorandom genera-
tor (FSPRG) [5]: instead of using a single cryptographic
seed for the lifetime of the system, the core also evolves
the seed pseudorandomly. When run, the core uses the
FSPRG and the seed to generate an index, secret key, and
a new seed. The old seed is discarded (securely erased).
The properties of the FSPRG ensure that it is computa-
tionally intractable to “go backwards” so that previous
seeds (and the associated indices and keys) remain un-
known even to a thief with access to the current seed.
Finally we can address goal (3) by randomly select-
USENIX Association  
17th USENIX Security Symposium 
279
Ti−1
Ti
E(si,2)
si
location
cache
Li,1, Li,2, . . .
Enc(Ki, cachei)
E(si,0)
E(si,3)
E(si,4)
δi
E(si,1)
Ki
Ii
Ci
Send(Ii,Ci)
E(ci,1,1)
ci,1
E(ci,1,0)
ck1
Enc(ck1, L1)
E(ci,2,1)
ci,2
ck2
Enc(ck2, L2)
Li,1
Li,2
Figure 2: (Left) The Adeona core, where E is a block cipher (e.g., AES) instantiating the FSPRG and Enc is a standard encryption
scheme. (Right) Close-up of the core’s forward-private location caching, where the cache holds 3 updates and shown are two new
locations being stored.
ing times to send updates. Using the FSPRG as a
source of randomness, we can pseudorandomly gener-
ate exponentially-distributed inter-update times.
(This
allows the owner to also recompute the inter-update
times, which will be useful for retrieval as discussed in
Section 4.) Such a distribution is memoryless, meaning
that, from the storage provider’s view, the next update
is equally likely to come from any client. We can tune
the number of updates sent by adjusting the rate of the
exponential distribution used.
Forward-private location caching. Our pseudorandom
update schedule means that we might miss locations that
are visited for only a short amount of time. However, to
provide maximal evidentiary forensic data about the tra-
jectories of a device after theft, we would like the core
to allow reporting all of the recently visited locations.
We could cache recent locations, but this breaks forward-
privacy. We therefore enhance the basic design to include
a forward-private location cache. Having a cache also
provides a simple mechanism for adding temporal redun-
dancy to updates (i.e., location data is sent multiple times
to the remote storage over time), which can increase the
ability to successfully retrieve updates.
Instead of just caching location data in the clear, we
can have the core immediately encrypt new data sent
from the location-ﬁnding module. The resulting cipher-
text can then be added to a cache; the least recent ci-
phertext is expelled. However, we cannot just utilize the
encryption key generated by the current state’s FSPRG: a
thief could decrypt any ciphertexts in the cache that were
added since the last time the FSPRG seed was refreshed
(e.g., when the previous update was sent). We therefore
use a distinct FSPRG seed, which we call the cache seed,
as the source for generating encryption keys for each lo-
cation encountered. Each time the cache seed is used to
encrypt new location data, it is also used to generate a
new cache seed and the prior one is securely erased. In
this way we guarantee forward privacy: no data in the
core allows a thief to decrypt previously generated ci-
phertexts. When its time to send an update, the entire
cache is encrypted using the secret key generated by the
FSPRG with the main seed. This (second) encryption
ensures that the data stored at the remote storage cannot
later be correlated with ciphertexts in the cache. Finally,
the core “resets” the cache seed by generating a fresh
one using the FSPRG and the main seed. This associates
a sequences of cache seeds to a particular update state.
We ensure freshness of location data by mandating that
at least one newly generated ciphertext is included with
each update submitted to the remote storage.
The owner can reconstruct all of the cache seeds for
any state (using the prior state’s main seed) and do trial
decryption to recover locations.
(The number of ex-
pected trials is the number of locations visited in between
two updates, and so this will be typically small.) Cipher-
texts in the cache that are “leftover” from a prior update
time period can also be decrypted, and this can be ren-
dered efﬁcient if plaintexts include a hint (i.e., the num-
ber of states back) that speciﬁes which state generated
the keys for the next ciphertext entry.
Implementing the design.
Implementing the Adeona
core is straightforward, given a block cipher6 such as
AES. A standard and provably secure FSPRG implemen-
tation based on AES works as follows [5]. A crypto-
graphic seed is just an AES key (16 bytes). To generate a
string of pseudorandom bits, one iteratively applies AES,
under key a seed s, to a counter: AES(s,1), AES(s,2),
etc. For Adeona, we have an initial main seed s1 and ini-
tial cache seed c1,1 (both randomly generated). The main
seed s1 is used to generate a new seed s2 = AES(s1,0),
the next state’s cache seed c2,1 = AES(s1,1), and so on
for the encryption key, index, and time offset. (The ex-
ponentially distributed time offset is generated from a
pseudorandom input using the well known method of
280 
17th USENIX Security Symposium 
USENIX Association
inverse-transform sampling [13].) A seed, after it is used,
must be securely erased. The cache seed forms a sepa-
rate branch of the FSPRG and is used to generate a se-
quence of cache seeds and intermediate encryption keys
for use within the cache. Figure 2 provides a diagram
of the core module’s operation between two successive
updates at times Ti−1 and Ti.
The encryption scheme can also be built using just
AES, via an efﬁcient block cipher mode such as
GCM [26]. Such a mode also provides authenticity. Of
added beneﬁt is that the mode can be rendered determin-
istic (i.e., no randomness needed) since we only encrypt
a single message with each key. This means that the core
(once initialized) does not require a source of true ran-
domness.
Summary. To summarize, the core uses a sequence of
secret seeds s1, s2, . . . to provide
• a sequence I1, I2, . . . of pseudorandom indices to store
ciphertexts under,
• sequences ci,1, ci,2, . . . of secret cache seeds for each
state i that are then used to encrypt data about each
location visited,
• a sequence K1, K2, . . . of secret keys for encrypting the
cache before submission to the remote storage, and
• a sequence δ1,δ2, . . . of pseudorandom inter-update
times for scheduling updates
while providing the following assurances. Given any Ii,
K j, or δl, no adversary can (under reasonable assump-
tions) compute any of the other output values above. Ad-
ditionally, even if the thief views the entire internal state
of the core, it still cannot compute any of the core’s pre-
viously used indices, cache seeds, encryption keys, or
inter-update times.
4 The Adeona System: Private Tracking
using OpenDHT
A (privacy-preserving) tracking system consists of three
main components: the device, the remote storage; and
an owner. The device component itself consists of a
location-ﬁnding component and a core component; other
components — such as a camera image capture function-
ality — can easily be incorporated. A system works in
three phases: initialization, active use, and retrieval. We
have already seen the Adeona core. In this section we
show how to construct a complete privacy-preserving de-
vice tracking system using it.
Our target is to develop an open-source, immediately
deployable system. This will allow evaluation of our
techniques during real usage (see Section 6), not to men-
tion providing to individual users an immediate (and, to
our knowledge, ﬁrst) alternative to the plethora of exist-
ing, proprietary tracking systems, none of which achieve
the level of privacy that we target and that we believe will
be important to many users. Along these lines, this sec-
tion focuses on a model for a open source software-only
client. We use the public distributed storage infrastruc-
ture OpenDHT [30] for the remote storage facility. Not
only does this obviate the need to setup dedicated remote
storage facilities, enabling immediate deployability, but
it effectively removes our system’s reliance on any single
trusted third party. This adds signiﬁcantly to the practical
privacy guarantees of the system.
We now ﬂesh out the design of the complete Adeona
system. The client consists of the Adeona core of the pre-
vious section (with a few slight modiﬁcations described
below) plus a location-ﬁnding module, described below.
First, however, we describe the other components: us-
ing OpenDHT for remote storage and how to perform
privacy-preserving retrieval. We conclude the section
with a summary of the whole system.
OpenDHT as remote storage. A distributed hash ta-
ble (DHT) allows insertion and retrieval of data values
based on hash keys. OpenDHT is an implementation of
a distributed hash table (DHT) whose nodes run on Plan-
etLab [11]. We use the indices generated by the Adeona
core as the hash keys and store the ciphertext data un-
der them. There are several beneﬁts to using a public,
open-source distributed hash table (DHT) as remote stor-
age. First, existing DHT’s such as OpenDHT are already
deployed and usable, meaning deployment of the track-
ing system only requires distribution of software for the
client and for retrieval. Second, a DHT can naturally
provide strengthened privacy and security guarantees be-
cause of the fact that updates will be stored uniformly
across all the nodes of the DHT. In decentralized DHTs,
an attacker would have to corrupt a signiﬁcant fraction of
DHT nodes in order to mount Denial-of-Service or pri-
vacy attacks as the storage provider.
On the other hand, DHT’s also have limitations. The
most fundamental is a lack of persistence guarantee:
the DHT itself provides no assurance that inserted data
can always be retrieved. Fortunately, OpenDHT ensures
that inserted data is retained for at least a week.7 An-
other limitation is temporary connectivity problems. Of-
ten nodes, even in OpenDHT, can be difﬁcult to access,
meaning our client will not be able to send an update suc-
cessfully. The traditional approaches for handling such
issues is to use client-side replication. This means that
the client submits the same data to multiple, widely dis-
tributed nodes in the DHT.
We can enhance the Adeona core to include such a
replication mechanism easily: have the core generate
several indices (as opposed to just one) for each update.
These indices, being pseudorandom already, will be dis-
tributed uniformly across the the space of all DHT nodes.
USENIX Association  
17th USENIX Security Symposium 
281
The update can then be submitted under all of these in-
dices.
Scheduling location updates. The Adeona core pro-
vides a method to search for update ciphertexts via the
deterministically generated indices. As noted, querying
the remote storage for a set of indices does not reveal
decryption keys or past or future indices. However, just
the fact that a set of indices are queried for might al-
low the remote storage provider to trivially associated
them to the same device. While the distributed nature
of OpenDHT mitigates this threat, defense-in-depth asks
that we do better. We therefore want a mechanism that
ensures the owner can precisely determine which indices
to search for when performing queries, and in particu-
lar allow him to avoid querying indices used before the
device was lost or stolen.
To enable this functionality, we have the system pre-
cisely (but still pseudorandomly) schedule updates rela-
tive to some clock. The clock could be provided, for ex-
ample, by a remote time server that the client and owner
can synchronize against. Then, when the owner initial-
izes the client, in addition to picking the cryptographic
seed it also stores the current time as the initial time
stamp T1. Each subsequent state also has a time stamp
associated with it: T2, T3, etc. These indicate the state’s
scheduled send time, and Ti+1 is computed by adding Ti
and δi (the pseudorandom inter-update delay). When the
client is run, it reads the current time from the clock and
iterates past states whose scheduled send time have al-
ready past. (In this way the core will “catch up” the state
to the schedule.) With access to a clock loosely synchro-
nized against the client’s, the owner can accurately re-
trieve updates sent at various times (e.g., last week’s up-
dates, all the updates after the device went missing, etc.).
We discuss the assumption of a clock more in our secu-
rity analysis in Section 5.
Location-ﬁnding module. Our system works modu-
larly with any known location ﬁnding technique (e.g.,
determining external IP address, trace routes to nearby
routers, GPS, nearby 802.11 or GSM beacons, etc.).