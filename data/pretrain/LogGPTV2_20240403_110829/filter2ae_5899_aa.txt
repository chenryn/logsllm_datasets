# 邮件伪造组合拳

##### 译文声明
本文为翻译文章，仅供参考。具体内容及含义请以原文为准。
作者：Imanfeng

## 0x00 前言
此前进行邮件伪造时，主要使用近似域名或通过Smtp2go来绕过验证。上个月发现了一款名为[espoofer](https://github.com/chenjj/espoofer)的邮件伪造工具。通过对该工具及相关论文的学习，本文将详细介绍涉及的相关技术。

- Black Hat USA 2020 演讲稿 (PDF): [You have No Idea Who Sent that Email: 18 Attacks on Email Sender Authentication](http://i.blackhat.com/USA-20/Thursday/us-20-Chen-You-Have-No-Idea-Who-Sent-That-Email-18-Attacks-On-Email-Sender-Authentication.pdf)
- USENIX Security 2020 论文 (PDF): [Composition Kills: A Case Study of Email Sender Authentication](https://www.usenix.org/system/files/sec20fall_chen-jianjun_prepub_0.pdf)

由于某项目的开始，月初搁置了文章整理，近日发布与大家分享学习。

## 0x01 邮件传输
SMTP协议基于TCP协议，需要进行三次握手：
1. 建立连接
2. 传输数据
3. 断开连接

在邮件传输过程中，会提到两个“From”字段：
- **MAIL FROM**：在SMTP认证中代表发件人，后文中称为 `Smtp.From`。
- **Message FROM**：定义在邮件内容Header中，呈现给收件人的From字段，在后文中称为 `Message.From`。

一个完整的发信简图如下所示。可以发现，在原生SMTP整个过程中并没有任何身份校验机制，`HELO/MAIL FROM`（`Smtp.From`）以及`From`（`Message.From`）均是可控可定义的。

## 0x02 邮服防护
### SPF
SPF的主要作用是校验发信服务器IP地址，防止发件人欺骗。假设b.com邮件服务器收到了一封邮件，发送主机的IP是1.2.3.4，并且声称自己的`Smtp.From`字段为`[PI:EMAIL]`。为了确认发件人不是伪造的，邮件服务器b.com会去查询a.com的SPF记录。如果该域不存在SPF记录，则可以随便伪造；如果存在SPF记录并且设置允许IP为1.2.3.4的主机发送邮件，则服务器认为这封邮件是合法的。否则，大多数情况会显示为代发标识。

### DKIM
DKIM的主要作用是校验邮件标头签名信息，防止邮件内容篡改。在a.com的DNS上设置DKIM公钥，假设通过a.com发送邮件，邮件服务器使用提前配置的私钥加密邮件相应内容，生成DKIM-Signature签名及相关信息插入到邮件标头中。当b.com邮件服务器收到邮件时，通过DNS查询获得此前配置的对应公钥，验证邮件DKIM签名的有效性，从而确认邮件在发送过程中是否被篡改。

DKIM签名结构如下所示：
```
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
    d=anxus.top; l=1850; s=selector; t=1452769712;
    h=date:from:to:message-id:subject:mime-version;
    bh=yCbsFBJJ9k2VYBxKGgyNILalBP3Yzn1N8cMPQr92+zw=;
    b=bnuXrH/dSnyDR/kciZauK4HTgbcDbSFzmHR78gq+8Cdm20G56Ix169SA...
```

- `a`：签名算法
- `c`：用于对标头和正文的规范化算法，如simple&relaxed
- `d`：签名的域，在DMARC检查签名中的域是否和发送者的域相匹配时用到
- `s`：在DNS中寻找RSA密钥的参数
- `h`：应该包含在签名中的邮件头字段列表
- `bh`：邮件正文的哈希值
- `b`：是签名本身的核心，包括`h`给出的字段，以及DKIM-Signature头本身（视`b=`为空）

```python
public_key = dkim_find_key(q_val, d_val, s_val)
```

### DMARC
仅靠SPF与DKIM并不能真正对邮件的发件人进行身份验证，因为SPF只能对`Smtp.From`进行来源IP的验证，DKIM只能保证邮件内容不被篡改，但收件人真正看到的字段是定义在邮件头中的`Message.From`，两者无法保证该字段是真实的。因此，在2015年3月发布的[RFC 7489](https://tools.ietf.org/html/rfc7489)文档中定义了DMARC，引入了标识符对齐机制（Identifier Alignment），确保通过SPF/DKIM校验的域名与`Message.From`发件人地址可以对齐匹配，从而保证最终用户看到的来源地址是真实可信的。

DMARC有两种对齐匹配机制：严格模式和宽松模式。
- **严格模式**：两个域必须相同才能彼此对齐。例如：
  - `Smtp.From`为`[PI:EMAIL]`
  - 邮件头内容为：
    ```
    From: [PI:EMAIL]
    Date: Fri, Feb 15 2002 16:54:30 -0800
    To: [PI:EMAIL]
    Subject: Hi!
    ```
  - DKIM标识符对齐示例：
    - `d=360.cn`
    - 邮件头内容为：
      ```
      From: [PI:EMAIL]
      Date: Fri, Feb 15 2002 16:54:30 -0800
      To: [PI:EMAIL]
      Subject: Hi!
      ```

- **宽松模式**：两个组织域（主域名）相同时两个域即对齐。例如：
  - `Smtp.From`为`[PI:EMAIL]`
  - 邮件头内容为：
    ```
    From: [PI:EMAIL]
    Date: Fri, Feb 25 2019 03:14:20 -1200
    To: [PI:EMAIL]
    Subject: Hi!
    ```
  - DKIM标识符对齐示例：
    - `d=lintonlab.360.cn`
    - 邮件头内容为：
      ```
      From: [PI:EMAIL]
      Date: Fri, Feb 25 2019 03:14:20 -1200
      To: [PI:EMAIL]
      Subject: Hi!
      ```

DMARC除了进行对齐校验外，还可以配置处理策略，如下图所示：
- `p`：告知收件方，当检测到某邮件存在伪造发件人的情况时，收件方要做出什么处理：`reject`为拒绝该邮件；`none`为不作任何处理；`quarantine`为将邮件标记为垃圾邮件。
- `sp`：规定子域的处理策略。
- `rua`：发送综合反馈的邮件地址。
- `ruf`：发送消息详细故障信息的邮件地址。
- `dkim`：要求DMARC对于DKIM的对齐标准。
- `aspf`：要求DMARC对于SPF的对齐标准。

邮件通过DMARC检测的流程如下：
1. 邮件发送
2. 接收方从邮件中取出`Message.From`的域
3. 使用域字段与SPF/DKIM的域进行对齐校验（默认为宽松对齐）
4. SPF/DKIM均通过校验并且其域通过对齐校验
5. 通过DMARC校验，收到邮件

## 0x03 邮件绕过
正常的发收件认证流程如下：
1. Alice定义内容发送邮件
2. SPF校验发送IP是否在DNS记录IP范围内【HELO & MAIL FROM】
3. DKIM查询DNS中的公钥校验邮件头签名准确性【签名校验】
4. DMARC对齐校验【域】
5. Bob收到邮件

**最核心的思想就是利用不同组件传递过程中的差异性进行绕过。**

### Ⅰ. 校验歧义性绕过
#### ① 不存在子域差异性
关于SPF以及DMARC官方有特殊定义：
1. SMTP定义了身份标识符有`HELO` 和 `MAILFROM`（`Smtp.From`）
2. SPF同时检测`HELO` 和 `MAILFROM`，有一个失败即SPF校验失败
3. DMARC校验SPF时默认使用`MAILFROM`进行对齐，当`MAILFROM`为空时会使用`HELO`进行对齐校验

利用流程（Espoofer – server_a1）：
1. `HELO`及`MAIL FROM`恶意字段如上图所示
2. `MAIL FROM`的域名字段是子域名并没有配置SPF，故进行SPF校验时是查询不到，但查询不到并不会被判断为SPF校验失败！与此同时`HELO`可以通过SPF判断，故SPF通过
3. DMARC优先使用`Smtp.From`的域与`Message.From`的域进行对齐，此时可以通过宽松模式对齐，故DMARC通过（没有强制要求严格模式对齐的情况下）

这种绕过情况下，由于`Smtp.From`与`Message.From`不一致，部分邮件接收方会进行一个代发提示。此时可利用场景为，将子域名定义为`mail`、`office`等进行官方发件的伪装，前提是子域不存在SPF记录。例如，`apple.com`的子域一直可以解析到SPF记录，故此方法是无法绕过的。

#### ② `MAIL FROM`置空差异性
该利用点在于不同校验组件对“空”的`Smtp.From`字段处理方式不同（Espoofer – server_a2）：
1. 部分SPF组件会将`([PI:EMAIL])`视为空的`Smtp.From`，那么就会转向对`HELO`进行SPF校验并且顺利通过
2. 到后面DMARC组件并不认为它是空地址，故会继续使用`Smtp.From=legitimate.com`与`Message.From=legitimate.com`进行对齐校验，故存在绕过SPF&DMARC的可能

#### ③ 解析截断差异性
该利用点在于不同校验组件会存在解析截断，从而造成差异性绕过：

利用流程（Espoofer – server_a3）：
1. 攻击者在`attack.com`解析中添加公钥，构造DKIM头通过私钥加密需要加密的信息进行发送
2. 邮件服务器原本公钥构造应该为`attack.com.\x00.any._domainkey.bank.com`（`s+[._domainkey.]+d`）
3. 由于部分语言如C在解析过程中会存在`\x00`截断，导致接收方服务器处理后获取公钥的地址直接为`attack.com`，该内容可控故存在绕过