at http://www.di.ens.fr/~ychen/research/Full_BKZ.pdf.
334  25th USENIX Security Symposium 
USENIX Association
8
6.3 Primal attack
The primal attack consists of constructing a unique-SVP
instance from the LWE problem and solving it using
BKZ. We examine how large the block dimension b is
required to be for BKZ to ﬁnd the unique solution. Given
the matrix LWE instance (A,b = As + e) one builds the
lattice Λ = {x ∈ Zm+n+1 : (A|−Im|−b)x = 0 mod q} of
dimension d = m + n + 1, volume qm, and with a unique-
SVP solution v = (s,e,1) of norm λ ≈ ς√n + m. Note
that the number of used samples m may be chosen be-
tween 0 and 2n in our case and we numerically optimize
this choice.
Success condition. We model the behavior of BKZ us-
ing the geometric series assumption (which is known
to be optimistic from the attacker’s point of view), that
ﬁnds a basis whose Gram-Schmidt norms are given
i (cid:24) = δ d−2i−1 · Vol(Λ)1/d where δ = ((πb)1/b ·
by (cid:24)b(cid:30)
b/2πe)1/2(b−1) [3, 25]. The unique short vector v will
be detected if the projection of v onto the vector space
spanned by the last b Gram-Schmidt vectors is shorter
Its projected norm is expected to be ς√b,
than b(cid:30)
that is the attack is successful if and only if
d−b.
ς√b ≤ δ 2b−d−1 · qm/d.
(1)
6.4 Dual attack
The dual attack consists of ﬁnding a short vector in the
dual lattice w∈ Λ(cid:21) ={(x,y)∈ Zm×Zn : Atx = y mod q}.
Assume we have found a vector (x,y) of length (cid:27) and
compute z = vt ·b = vtAs +vte = wts +vte mod q which
is distributed as a Gaussian of standard deviation (cid:27)ς if
(A,b) is indeed an LWE sample (otherwise it is uniform
mod q). Those two distributions have maximal vari-
ation distance bounded by6 ε = 4exp(−2π2τ2) where
τ = (cid:27)ς /q, that is, given such a vector of length (cid:27) one
has an advantage ε against decision-LWE.
The length (cid:27) of a vector given by the BKZ algorithm is
given by (cid:27) = (cid:24)b0(cid:24). Knowing that Λ(cid:21) has dimension d =
m + n and volume qn we get (cid:27) = δ d−1qn/d. Therefore,
obtaining an ε-distinguisher requires running BKZ with
block dimension b where
− 2π2τ2 ≥ ln(ε/4).
(2)
Note that small advantages ε are not relevant since the
agreed key is hashed: an attacker needs an advantage of
at least 1/2 to signiﬁcantly decrease the search space of
the agreed key. He must therefore amplify his success
6A preliminary version of this paper contained a bogus formula for
ε leading to under-estimating the cost of the dual attack. Correcting
this formula leads to better security claim, and almost similar cost for
the primal and dual attacks.
86
86
78
78
Known
Best
m
b
Known
Attack
Classical Quantum Plausible
BCNS proposal [20]: q = 232 − 1, n = 1024, ς = 3.192
Primal 1062 296
Dual
1055 296
NTRUENCRYPT [49]: q = 212, n = 743, ς ≈(cid:31)2/3
Primal
159
Dual
159
JARJAR: q = 12289, n = 512, ς = √12
119
Primal
Dual
118
NEWHOPE: q = 12289, n = 1024, ς = √8
Primal 1100 967
Dual
1099 962
623
602
256
255
131
131
282
281
603
600
449
448
613
635
176
175
61
61
125
124
93
92
200
199
Table 1: Core hardness of NEWHOPE and JARJAR and se-
lected other proposals from the literature. The value b denotes
the block dimension of BKZ, and m the number of used sam-
ples. Cost is given in log2 and is the smallest cost for all pos-
sible choices of m and b. Note that our estimation is very op-
timistic about the abilities of the attacker so that our result for
the parameter set from [20] does not indicate that it can be bro-
ken with ≈ 280 bit operations, given today’s state-of-the-art in
cryptanalysis.
probability by building about 1/ε2 many such short vec-
tors. Because the sieve algorithms provide 20.2075b vec-
tors, the attack must be repeated at least R times where
R = max(1,1/(20.2075bε2)).
This makes the conservative assumption that all the vec-
tors provided by the Sieve algorithm are as short as the
shortest one.
6.5 Security claims
According to our analysis, we claim that our proposed
parameters offer at least (and quite likely with a large
margin) a post-quantum security of 128 bits. The cost
of the primal attack and dual attacks (estimated by our
script scripts/PQsecurity.py) are given in Table 1.
For comparison we also give a lower bound on the secu-
rity of [20] and do notice a signiﬁcantly improved se-
curity in our proposal. Yet, because of the numerous
pessimistic assumption made in our analysis, we do not
claim any quantum attacks reaching those bounds.
Most other RLWE proposals achieve considerably
lower security than NEWHOPE; for example, the highest-
security parameter set used for RLWE encryption in [42]
is very similar to the parameters of JARJAR. The situ-
ation is different for NTRUENCRYPT, which has been
instantiated with parameters that achieve about 128 bits
of security according to our analysis7.
7For comparison we view the NTRU key-recovery as an homoge-
USENIX Association  
25th USENIX Security Symposium  335
9
Speciﬁcally, we refer to NTRUENCRYPT with n =
743 as suggested in [49]. A possible advantage of
NTRUENCRYPT compared to NEWHOPE is somewhat
smaller message sizes, however, this advantage becomes
very small when scaling parameters to achieve a sim-
ilar security margin as NEWHOPE. The large down-
side of using NTRUENCRYPT for ephemeral key ex-
change is the cost for key generation. The implemen-
tation of NTRUENCRYPT with n = 743 in eBACS [17]
takes about an order of magnitude longer for key gener-
ation alone than NEWHOPE takes in total. Also, unlike
our NEWHOPE software, this NTRUENCRYPT software
is not protected against timing attacks; adding such pro-
tection would presumably incur a signiﬁcant overhead.
7
Implementation
In this section we provide details on the encodings of
messages and describe our portable reference implemen-
tation written in C, as well as an optimized implementa-
tion targeting architectures with AVX vector instructions.
7.1 Encodings and generation of a
The key-exchange protocol described in Protocol 1 and
also our protocol as described in Protocol 2 exchange
messages that contain mathematical objects (in particu-
lar, polynomials in Rq). Implementations of these proto-
cols need to exchange messages in terms of byte arrays.
As we will describe in the following, the choice of en-
codings of polynomials to byte arrays has a serious im-
pact on performance. We use an encoding of messages
that is particularly well-suited for implementations that
make use of quasi-linear NTT-based polynomial multi-
plication.
Deﬁnition of NTT and NTT−1. The NTT is a tool
commonly used in implementations of ideal lattice-based
cryptography [29, 42, 63, 79]. For some background
on the NTT and the description of fast software im-
plementations we refer to [46, 68].
In general, fast
quasi-logarithmic algorithms exist for the computation
of the NTT and a polynomial multiplication can be per-
formed by computing c = NTT−1(NTT(a) ◦ NTT(b))
for a,b,c ∈ R. An NTT targeting ideal lattices deﬁned
in Rq = Zq[X]/(X n + 1) can be implemented very efﬁ-
ciently if n is a power of two and q is a prime for which
it holds that q ≡ 1 mod 2n. This way a primitive n-th
root of unity ω and its square root γ exist. By multiply-
ing coefﬁcient-wise by powers of γ = √ω mod q before
neous Ring-LWE instance. We do not take into account the combinato-
rial vulnerabilities [51] induced by the fact that secrets are ternary. We
note that NTRU is a potentially a weaker problem than Ring-LWE: it
is in principle subject to a subﬁeld-lattice attack [2], but the parameters
proposed for NTRUENCRYPT are immune.
the NTT computation and after the reverse transforma-
tion by powers of γ−1, no zero padding is required and
an n-point NTT can be used to transform a polynomial
with n coefﬁcients.
For a polynomial g = ∑1023
i=0 giX i ∈ Rq we deﬁne
NTT(g) = ˆg =
ˆgi =
1023
∑
j=0
1023
∑
i=0
ˆgiX i, with
γ jg jωi j,
where we ﬁx the n-th primitive root of unity to ω = 49
and thus γ = √ω = 7. Note that in our implementation
we use an in-place NTT algorithm which requires bit-
reversal operations. As an optimization, our implemen-
tations skips these bit-reversals for the forward transfor-
mation as all inputs are only random noise. This opti-
mization is transparent to the protocol and for simplicity
omitted in the description here.
The function NTT−1 is the inverse of the function
NTT. The computation of NTT−1 is essentially the
same as the computation of NTT, except that it uses ω−1
mod q = 1254, multiplies by powers of γ−1 mod q =
8778 after the summation, and also multiplies each coef-
ﬁcient by the scalar n−1 mod q = 12277 so that
NTT−1(ˆg) =g =
1023
∑
i=0
giX i, with
gi = n−1γ−i
1023
∑
j=0
ˆg jω−i j.
The inputs to NTT−1 are not just random noise, so in-
side NTT−1 our software has to perform the initial bit
reversal, making NTT−1 slightly more costly than NTT.
Deﬁnition of Parse. The public parameter a is generated
from a 256-bit seed through the extendable-output func-
tion SHAKE-128 [72, Sec. 6.2]. The output of SHAKE-
128 is considered as an array of 16-bit, unsigned, little-
endian integers. Each of those integers is used as a coef-
ﬁcient of a if it is smaller than 5q and rejected otherwise.
The ﬁrst such 16-bit integer is used as the coefﬁcient of
X 0, the next one as coefﬁcient of X 1 and so on. Earlier
versions of this paper described a slightly different way
of rejection sampling for coefﬁcients of a. The more ef-
ﬁcient approach adopted in this ﬁnal version was sug-
gested independently by Gueron and Schlieker in [45]
and by Yawning Angel in [5]. However, note that a re-
duction modulo q of the coefﬁcients of a as described
in [45] and [5] is not necessary; both our implementa-
tions can handle coefﬁcients of a in {0, . . . ,5q − 1}.
Due to a small probability of rejections, the amount of
output required from SHAKE-128 depends on the seed –
336  25th USENIX Security Symposium 
USENIX Association
10
what is required is n = 1024 coefﬁcients that are smaller
than 5q. The minimal amount of output is thus 2 KB; the
average amount is ≈ 2184.5 bytes. The resulting poly-
nomial a (denoted as ˆa) is considered to be in NTT do-
main. This is possible because the NTT transforms uni-
form noise to uniform noise.
Using a variable amount of output from SHAKE-128
leaks information about a through timing information.
This is not a problem for most applications, since a is
public. As pointed out by Burdges in [22], such a tim-
ing leak of public information can be a problem when
deploying NEWHOPE in anonymity networks like Tor.
Appendix F in the full version of this paper describes
an alternative approach for Parse, which is slightly more
complex and slightly slower, but does not leak any timing
information about a.
The message format of (b,seed) and (u,r). With the