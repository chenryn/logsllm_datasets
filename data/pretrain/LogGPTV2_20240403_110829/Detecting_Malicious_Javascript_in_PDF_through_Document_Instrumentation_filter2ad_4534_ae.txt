Parse &
Decompress
0.0005
0.0008
0.0007
0.0569
0.8954
3.2219
Feature
Extraction
0.0255
0.0867
0.0726
0.0210
0.4023
2.0015
Instrumen-
tation
0.0183
0.0138
0.0247
0.0236
0.0773
0.2761
Total
0.0444
0.1014
0.0981
0.1016
1.3750
5.4995
Table XI: Memory Overhead of Static Analysis &
Instrumentation.
# of Python Objects Memory Consumption
PDF Size
2 KB
9 KB
24 KB
325 KB
7.0 MB
19.7 MB
74095
74085
74112
74616
366845
1081771
5.26 MB
5.26 MB
5.28 MB
5.63 MB
42.86 MB
130.6 MB
Whereas most of the execution time is spent on feature
extraction and instrumentation for small documents,
the
dominant overhead comes from parsing and decompressing
as document size increases, which accounts for over 95%
of the total execution time. Besides, for instrumentation, the
overhead depends on the number of scripts. That is why
it took more time to instrument the 2 KB ﬁle than the 9
KB ﬁle in Table X. The overhead increase is approximately
linear. This is because during feature extraction, we have
tagged the PDF objects containing Javascript code and
our instrumentation component only needs to locate and
instrument them.
In summary, the evaluation results indicate that the com-
ponent of static analysis and instrumentation incurs minor
overhead and can be used for end-host protection.
We also proﬁled memory overhead. Table XI presents the
memory usage during static process. The memory overhead
is a little bit high. However, since the front-end component
works off-line and the RAM on modern systems can easily
accomodate such a memory demand, the overhead is accept-
able. Actually, for most documents, the memory overhead
of our system is comparable with PDF readers like Adobe
Acrobat. In the future work, we will optimize our program
and use memory more efﬁciently.
2) Runtime Detector
The runtime detector with a tiny SOAP server requires
about 19 MB memory. Although the detector maintains the
state (i.e., all features) for each unknown open document, we
found that the memory usage increases a little as the number
of monitored documents increases. Thus, the overhead of our
runtime detector is also minor.
We further evaluated the efﬁciency of our context mon-
itoring code. We manually crafted a set of documents
containing various copies of Javascript. The Javascript is
from a randomly selected malicious sample. In total, we
got 20 documents with 1 to 20 separate scripts in each
document. For each crafted document, we measured the total
110110110
execution time of Javascript before and after instrumentation.
When one script is instrumented, the additional execution
time incurred by our context monitoring code is about
0.093 seconds. Since most malicious documents in the wild
contain only one script, this overhead represents the common
case. Note that, although both benign and malicious docu-
ments can contain many scripts, in most cases these scripts
are invoked sequentially via /Names and /Next. Thus,
only one piece of the context monitoring code is inserted.
Basically, the overhead grows linearly as the number of
instrumented scripts increases. However, when there are 20
scripts, the overall overhead is still below 2 seconds. Benign
documents may contain many singly invoked scripts, but in
most cases these scripts are associated with some actions
that probably are not triggered simultaneously. Therefore,
when the overall overhead is distributed among each script,
the performance degradation is still minor. In summary,
our context monitoring code is efﬁcient enough for online
protection.
VI. LIMITATIONS AND FUTURE WORK
Although the majority of existing malicious PDFs use
Javascript to launch attacks, attackers can also have other
options like ActionScript. Our approach cannot detect those
malicious PDFs that do not use Javascript as the attack
vector.
We have also not evaluated the effectiveness of our
method for in-browser PDF viewers. The challenge lies in
two aspects. First, in-browser PDF viewers usually start to
render before a document has been completely downloaded.
This brings difﬁculty to our static analysis and instrumen-
tation. Moreover, runtime behaviors of a browser is much
more complicated than those of a PDF reader. In our future
work, we will create new runtime features for browsers and
be able to detect malicious PDF in an in-brower PDF viewer.
Finally, we have not handled embedded PDF documents.
In the future work, we will extract static features from both
embedded and host PDFs. It would be also valuable to in-
strument embedded documents, and we plan to correlate the
runtime behaviors from both embedded and host documents.
In this way, we can effectively defeat the mimicry attacks
proposed in [8].
VII. CONCLUSION
In this paper, we developed an effective and efﬁcient
hybrid approach—leveraging ﬁve novel static features and
the context-aware behavior monitoring—for detection and
conﬁnement of malicious Javascript in PDF. The static fea-
tures are designed to detect the obfuscation techniques that
are widely used by malicious PDF but usually disregarded by
benign documents. We also observed that the indispensable
operations for malicious Javascript to compromise target sys-
tems rarely occur in JS-context. Based on this observation,
we presented the static document instrumentation method
to facilitate context-aware monitoring of potential infection
attempts from malicious Javascript. The intrusive nature of
instrumentation method endows our system with immunity
to Javascript code and PDF syntax obfuscations. To validate
the efﬁcacy of our proposed approach, we conducted a
security analysis given an advanced attacker, showing that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:29:18 UTC from IEEE Xplore.  Restrictions apply. 
than existing defense.
our method is much more robust
The experimental evaluation based on over twenty thousand
benign and malicious samples shows that our system can
achieve very high detection accuracy with minor overhead.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for their
insightful and valuable comments. This work was partially
supported by ONR grant N00014-13-1-0088 and AFRL
Contract FA8650-10-C-7024.
REFERENCES
[1] “The rise in the exploitation of old pdf vulnerabilities,”
http://blogs.technet.com/b/mmpc/archive/2013/04/29/
the-rise-in-the-exploitation-of-old-pdf-vulnerabilities.aspx.
[2] “http://www.cvedetails.com/product/497/adobe-acrobat-
reader.html?vendor id=53,” accessed in June 2013.
[3] K. Selvaraj and N. F. Gutierrez, “The rise of pdf malware,”
Symantec, Tech. Rep., 2010.
[4] C. Smutz and A. Stavrou, “Malicious pdf detection using
metadata and structural features,” in Proceedings of Annual
Computer Security Applications Conference (ACSAC), 2012.
[5] N. Srndic and P. Laskov, “Detection of malicious pdf ﬁles
based on hierarchical document structure,” in NDSS, 2013.
[6] D. Maiorca, G. Giacinto, and I. Corona, “A pattern recogni-
tion system for malicious pdf ﬁles detection,” in Proceedings
of International conference on Machine Learning and Data
Mining in Pattern Recognition (MLDM), 2012.
[7] P. Laskov and N.
ˇSrndi´c, “Static detection of malicious
javascript-bearing pdf documents,” in Proceedings of Annual
Computer Security Applications Conference (ACSAC), 2011.
[8] D. Maiorca, I. Corona, and G. Giacinto, “Looking at the
bag is not enough to ﬁnd the bomb: an evasion of structural
methods for malicious pdf ﬁles detection,” in Proceedings
of ACM SIGSAC symposium on Information, computer and
communications security (AsiaCCS), 2013.
[9] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and E. P.
Markatos, “Combining static and dynamic analysis for the
detection of malicious documents,” in Proceedings of Euro-
pean Workshop on System Security (EUROSEC), 2011.
in Cansecwest, 2013.
mode,”
[12] “Protected
http://www.adobe.com/devnet-docs/
acrobatetk/tools/AppSec/protectedmode.html, 2013.
[13] C. Willems, T. Holz, and F. Freiling, “Toward automated
dynamic malware analysis using cwsandbox,” IEEE Security
and Privacy, 2007.
[14] M. Cova, C. Kruegel, and G. Vigna, “Detection and analysis
of drive-by-download attacks and malicious javascript code,”
in Proceedings of International conference on World wide
web (WWW), 2010.
[15] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert, “Zozzle:
fast and precise in-browser javascript malware detection,” in
Proceedings of USENIX Security Symposium, 2011.
[16] W.-J. Li, S. Stolfo, A. Stavrou, E. Androulaki, and A. D.
Keromytis, “A study of malcode-bearing documents,” in Pro-
ceedings of International conference on Detection of Intru-
sions and Malware, and Vulnerability Assessment (DIMVA),
2007.
[17] M. Z. Shaﬁq, S. A. Khayam, and M. Farooq, “Embedded
malware detection using markov n-grams,” in Proceedings
of International conference on Detection of Intrusions and
Malware, and Vulnerability Assessment (DIMVA), 2008.
[18] “Wepawet,” http://wepawet.cs.ucsb.edu/.
[19] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos,
“An empirical study of real-world polymorphic code injection
attacks,” in LEET, 2009.
[10] Z. Liu, “Breeding sandworms: How to fuzz your way out of
[35] A.
adobe reader x’s sandbox,” in Blackhat, 2012.
[11] P. Vreugdenhil, “Adobe sandbox when the broker is broken,”
[20] JavaScript for Acrobat API Reference, 2007.
[21] W. Xu, F. Zhang, and S. Zhu, “Jstill: mostly static detection of
obfuscated malicious javascript code,” in Proceedings of ACM
conference on Data and application security and privacy
(CODASPY), 2013.
[22] C. Yue and H. Wang, “Characterizing insecure javascript prac-
tices on the web,” in Proceedings of the 18th International
Conference on World Wide Web (WWW’09), 2009.
[23] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos,
“Comprehensive shellcode detection using runtime heuris-
tics,” in Proceedings of Annual Computer Security Applica-
tions Conference (ACSAC), 2010.
[24] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda, “Defend-
ing browsers against drive-by downloads: Mitigating heap-
spraying code injection attacks,” in Proceedings of Interna-
tional Conference on Detection of Intrusions and Malware,
and Vulnerability Assessment (DIMVA), 2009.
[25] “libemu,” http://libemu.carnivore.it/.
[26] J. Mason, S. Small, F. Monrose, and G. MacManus, “English
shellcode,” in Proceedings of ACM conference on Computer
and communications security (CCS), 2009.
[27] K. Z. Snow and F. Monrose, “Automatic hooking for forensic
analysis of document-based code injection attacks: Tech-
niques and empirical analyses,” in Proceedings of the Eu-
ropean Workshop on System Security (EuroSec), 2012.
[28] “Free pdf password remover,” http://www.4dots-software.
com/pdf-utilities/free-pdf-password-remover/.
[29] PDF Reference (sixth edition), 2006.
[30] S. Jana and V. Shmatikov, “Abusing ﬁle processing in mal-
ware detectors for fun and proﬁt,” in IEEE Symposium on
Security and Privacy (SP), 2012.
[31] S. Forrest, S. Hofmeyr, A. Somayaji, and T. Longstaff, “A
sense of self for unix processes,” in Proceedings of IEEE
Symposium on Security and Privacy, 1996.
[32] C. Kolbitsch, P. M. Comparetti, C. Kruegel, E. Kirda,
X. Zhou, and X. Wang, “Effective and efﬁcient malware
detection at the end host,” in Proceedings of USENIX Security
Symposium, 2009.
[33] A. Sotirov, “Heap feng shui in javascript,” in Blackhat Europe,
[34] PROCESS MEMORY COUNTERS EX
structure,
http://msdn.microsoft.com/en-us/library/ms684874%28v=vs.
85%29.aspx, accessed in June 2013.
Schneider,
pdf?”
“Whos
looking
in
http://labs.m86security.com/2010/11/
eggs
for
your
whos-looking-for-eggs-in-your-pdf/, 2010.
[36] skape, Safely Searching Process Virtual Address Space, 2004.
[37] “Working with the appinit dlls registry value,” http://support.
2007.
microsoft.com/kb/197571.
[38] “Loaddllviaappinit,”
23/loaddllviaappinit/.
http://blog.didierstevens.com/2009/12/
[39] “Sandboxie,” http://www.sandboxie.com/.
[40] S. Davidoff, “Cleartext passwords in linux memory,” 2008.
[41] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson,
W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum,
and E. W. Felten, “Lest we remember: cold boot attacks on
encryption keys,” in Proceedings of Usenix Security, 2008.
[42] “Contagiodump collection,” http://contagiodump.blogspot.
com/, accessed in June 2013.
[43] “Add javascript to existing pdf ﬁles (python),” http://blog.
rsmoorthy.net/2012/01/add-javascript-to-existing-pdf-ﬁles.
html, accessed in June 2013.
[44] “Cve-2009-1492,”
http://www.cvedetails.com/cve/
CVE-2009-1492/, accessed in August 2013.
[45] “The
number
of
the
beast,”
http://vinsula.com/
cve-2013-0640-adobe-pdf-zero-day-malware/, 2013.
[46] “Making malicious pdf undetectable,” http://www.signal11.
eu/en/research/articles/malicious pdf.html, 2009.
[47] “Another nasty trick in malicious pdf,” https://blog.avast.com/
2011/04/22/another-nasty-trick-in-malicious-pdf/, 2011.
111111111
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:29:18 UTC from IEEE Xplore.  Restrictions apply.