i the version of the fragment obtained through the
mixing process. In the ﬁgure, the resource is represented in
2210
0 F15
F14
0
F 0
0
F 1
0
F 2
0
F 3
0
F 4
0
F 5
0
F 6
0
0 F 8
F 7
macroblock
k
0
key
k
1
(b)
0
F 0
0
F 1
0
F 2
0
F 3
0
F 5
0
F 6
0
0 F 8
F 7
0
F 0
0
F 1
0
F 2
0
F 3
0
F 4
0
F 5
0
F 6
macroblock
0
0 F 8
F 7
(a)
0
F 0
0
F 1
0
F 2
0
F 3
0
F 5
0
F 6
0
0 F 8
F 7
0
F 9
0
F10
0
F 9
0
0 F12
F11
0
0 F12
F11
0
F13
0
F13
macroblock
k
0
key
k
1
k
2
1
F10
2
F 4
(c)
t
n
e
m
g
a
r
f
t
n
e
m
g
a
r
f
0
0 F15
F14
0
F 9
0
F 9
0
0 F12
F11
1
F10
0
0 F12
F11
0
F13
0
F13
0
0 F15
F14
0
0 F15
F14
t
n
e
m
g
a
r
f
t
n
e
m
g
a
r
f
macroblock
k
0
key
k
1
k
2
k
3
2
F 4
(d)
3
F10
Figure 6: An example of fragments evolution
a three-dimensional space, with axes corresponding to frag-
ments, macro-blocks, and keys. The re-writing of a fragment
is represented by placing it in correspondence to the new key
used for its encryption. The shadowing in correspondence to
the previous versions of the fragments denote the fact that
they are not available anymore as they are overwritten by
the new versions.
Each revoke operation requires the use of a fresh new key
and, due to policy changes, fragments of a resource might
be encrypted with diﬀerent keys. Such a situation does not
cause any complication for key management, which can be
conveniently and eﬃciently handled with a key regression
technique [10]. Key regression is an RSA-based crypto-
graphically strong technique (the generated keys appear as
pseudorandom) allowing a data owner to generate, start-
ing from a seed s0, an unlimited sequence of symmetric keys
k0, . . . , ku, so that simple knowledge of a key ki (or the com-
pact secret seed si of constant size related to it) permits to
eﬃciently derive all keys kj with j ≤ i. Only the data owner
(who knows the private key used for generation) can perform
forward derivation, that is, from ki, derive keys following it
in the sequence (i.e., kz with z ≥ i). Note instead that,
not knowing the private key, users cannot perform forward
derivation. The cost that users must pay for key derivation
is small. On a single core, the computer we used for the ex-
periments is able to process several hundred thousand key
derivations per second.
With key regression, every user authorized to access a
resource just needs to know the seed corresponding to the
most recent key used for it (s0 if the policy has not changed,
s3 in the example of Figure 6(d)). To this end, there is no
need for key distribution, rather, such a seed can be stored
in the resource descriptor and protected (encrypted) with
a key corresponding to the resource’s acl (i.e., known or
derivable by all authorized users) [2, 6]. Enforcing revoca-
tion entails then, besides re-encrypting a randomly picked
fragment with a fresh new key ki, rewriting its correspond-
ing seed si, encrypted with a key associated with the new acl
of the resource. Figure 7 illustrates the revocation process.
To access a resource, a user then ﬁrst downloads the re-
source descriptor, to retrieve the most recent seed sl, and all
the fragments. With the seed, she computes the keys nec-
essary to decrypt fragments that have been overwritten, to
retrieve their version encrypted with k0. Then, she combines
the mini-blocks in fragments to reconstruct the macro-blocks
in the resource. She then applies mixing in decrypt mode
to macro-blocks to retrieve the plaintext resource. Figure 8
illustrates the process to access a resource.
Note that the size of macro-blocks inﬂuences the perfor-
mance of both revoke and access operations. Larger macro-
blocks naturally provide greater policy update performance
as they decrease policy update cost linearly, with limited im-
pact on the eﬃciency of decryption, since its cost increases
logarithmically (Section 5).
4. EFFECTIVENESS OF THE APPROACH
In this section, we elaborate on the eﬀectiveness of our
approach for enforcing revocation. For the discussion, we
recall that msize is the size of individual mini-blocks, m is
the number of mini-blocks in a block, b is the number of
blocks in a macro-block, and M is the number of macro-
blocks. Also, we denote with f the number of fragments,
that is, f = m · b.
We consider the threat coming from a user whose access
to the resource has been revoked, and who downloads the
resource from the server. With access policy enforced by
encryption, not being authorized for an access should not
prevent downloading the resource but rather it should pre-
vent reconstruction of its plaintext representation. We then
evaluate the protection against the user’s attempts to recon-
222/* fragment to be rewritten */
/* version of the fragment stored */
i has been overwritten in a revocation */
/* derive kc using key regression */
/* retrieve the original version of the fragment */
Revoke
1: randomly select a fragment Fi of R
2: download Fc
3: if c > 0 then
4:
i from the server
/* F0
derive key kc
F0
i
:= D(kc, Fc
i )
5:
6: determine the last key kl−1 used
7: generate new key kl
8: Fl
9: upload Fl
10: encrypt sl with the key of acl(R)
11: update R’s descriptor
i overwriting Fc
i := E(kl, F0
i )
i
/* it is stored in R’s descriptor */
/* overwrite previous version */
/* limits it to authorized users */
/* including the new sl */
Figure 7: Revoke on resource R
struct the plaintext resource. In doing so, we consider the
worst case scenario, with respect to key management, where
the user has maintained memory of the last key (or the cor-
responding seed) used for the resource up to the point in
which she was authorized for the access. In other words, we
assume the user to be able to decrypt the fragments that
have been overwritten before she has been revoked access,
and hence to know the original version encrypted with k0
of the fragments that have not been overwritten since she
has been revoked access. Since seeds are compact, such a
threat is indeed realistic. To reconstruct the resource when
missing a fragment, the user would have to perform a brute
force attack attempting all possible combinations of values
of the missing bits, that is, 2msize attempts for each of the M
macro-blocks. If more fragments, let’s say fmiss, are missing,
the user would have to perform 2msize ·fmiss attempts for each
of the M macro-blocks.
The inability of the user to reconstruct a resource if some
fragments have been overwritten is because, without such
fragments, the user cannot retrieve the corresponding origi-
nal version (the one encrypted with k0) needed to correctly
reconstruct the resource plaintext. A potential threat can
then come if the user maintains a local storage with the origi-
nal version of part of the resource. We distinguish two cases,
depending on whether the user stores complete fragments or
portions of them across the whole resource.
Local storage of fragments. Suppose a user locally stores
(when authorized) some fragments of the resource. Even
if such fragments are later overwritten for revoking access
to the user, and then their most recent version stored at
the server is unintelligible to her, she has them available
for reconstructing the resource. However, the fragment to
be overwritten in a policy revocation is chosen randomly
by the owner. Therefore, the user can still reconstruct the
resource after one fragment has been overwritten if the frag-
ment that the owner has overwritten is the same fragment
that the user has also stored locally, which has probabil-
ity 1/f to occur. Generalizing the reasoning to the con-
sideration of the user locally storing more than one frag-
ment and the policy naturally changing even after the spe-
ciﬁc user revocation, we determine the probability PA of the
user’s ability to access the resource assuming local storage
of floc fragments to be PA = (floc/f)fmiss . The probability
clearly increases with the number of fragments stored lo-
cally, but quickly reaches extremely low values after a few
updates of the policy, approximating zero even for high per-
centage of fragments locally stored. The low probability
(and the high storage eﬀort requested to the user) essen-
tially makes such attack not suitable:
if the user has to
Access
1: download R’s descriptor and all its fragments
2: retrieve seed sl used for the last encryption
3: compute keys k0, . . . , kl
4: for each downloaded fragment Fx
5:
6: F0
i
7: for j = 0, . . . , M − 1 do
8: Mj := concatenation of mini-blocks F0
9:
:= D(kx, Fx
i )
if x > 0 then
decrypt Mj
i do
/* retrieve the original version of fragments */
/* reconstruct and decrypt macro-blocks */
i [j ], i = 0, . . . , (m · b) − 1
Figure 8: Access to resource R
pay a storage cost that approaches the maintenance of the
whole resource, then the user would have stored the plain-
text resource when authorized in the ﬁrst place. We note
also that a possible extension of our approach could consider
overwriting, instead of pre-deﬁned fragments, a randomly
chosen set of mini-blocks (ensuring coverage of all macro-
blocks), to enforce a revocation. In this case, the probabil-
ity of the user storing mloc mini-blocks per macro-block (also
randomly chosen) to be able to access the resource immedi-
ately after her revocation would be (mloc/(m · b))M , which
would become (mloc/(m · b))M ·mmiss , (i.e., negligible), if she
misses mmiss mini-blocks per macro-block. We note how-
ever that overwriting randomly picked mini-blocks across
the resource would considerably increase the complexity in
the management of fragments, and it would make it harder
to provide an eﬃcient physical structure for fragments (Sec-