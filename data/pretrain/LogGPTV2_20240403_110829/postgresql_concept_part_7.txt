test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dick | Gleason | Ocean City | NJ | 19
Victor | Tabor | Williamsport | PA | 22
(2 rows)
test=> -- firstname does not contain s or S
test=> SELECT * FROM friend
test-> WHERE firstname !˜* ’s’
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Dick | Gleason | Ocean City | NJ | 19
Ned | Millstone | Cedar Creek | MD | 27
Victor | Tabor | Williamsport | PA | 22
(4 rows)
Figure4.17: Regularexpressionsamplequeries
4.11. CASECLAUSE 39
test=> -- firstname ends with n
test=> SELECT * FROM friend
test-> WHERE firstname ˜ ’n *$’
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
(1 row)
test=> -- firstname contains a non-S character
test=> SELECT * FROM friend
test-> WHERE firstname ˜ ’[ˆS]’
test-> ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Dick | Gleason | Ocean City | NJ | 19
Ned | Millstone | Cedar Creek | MD | 27
Sandy | Gleason | Ocean City | NJ | 25
Sandy | Weber | Boston | MA | 33
Victor | Tabor | Williamsport | PA | 22
(6 rows)
Figure4.18: Complexregularexpressionqueries
40 CHAPTER4. CUSTOMIZINGQUERIES
test=> SELECT firstname,
test-> age,
test-> CASE
test-> WHEN age >= 21 THEN ’adult’
test-> ELSE ’minor’
test-> END
test-> FROM friend
test-> ORDER BY firstname;
firstname | age | case
-----------------+-----+-------
Dean | 24 | adult
Dick | 19 | minor
Ned | 27 | adult
Sandy | 25 | adult
Sandy | 33 | adult
Victor | 22 | adult
(6 rows)
Figure4.19: CASEexample
controloverthedatareturnedfromaquery. TheWHEREclauseusescomparisonstocontrolrow
selection. TheCASEstatementallowscomparisonsincolumnoutput. Figure 4.19showsaquery
usingCASEtocreateanewoutputcolumncontainingadultorminorasappropriate,basedonthe
agefield. Ofcourse,thevaluesadultandminordonotappearinthetablefriend. TheCASEclause
allowsthecreationofthoseconditionalstrings.
Figure 4.20 shows a more complex example. It shows a query with multiple WHEN clauses.
TheASclauseisusedtolabelthecolumnwiththeworddistance. AlthoughonlySELECTexamples
areshown,CASEcanbeusedinUPDATEandothercomplicatedsituations. CASEallowsthecreation
ofconditionalvalues,whichcanbeusedforoutputorforfurtherprocessinginthesamequery.
4.12 Distinct Rows
It is often desirable to return the results of a query with no duplicates. The keyword DISTINCT
prevents duplicates from being returned. Figure 4.21 shows the use of DISTINCT to prevent
duplicate states and duplicatecity and state combinations. Notice that DISTINCT operates only on
the columns selectedinthe query. It doesnot compare nonselectedcolumns when determining
uniqueness. Section5.2explainshowcountscanbegeneratedforeachofthedistinctvalues.
4.12. DISTINCTROWS 41
test=> SELECT firstname,
test-> state,
test-> CASE
test-> WHEN state = ’PA’ THEN ’close’
test-> WHEN state = ’NJ’ OR state = ’MD’ THEN ’far’
test-> ELSE ’very far’
test-> END AS distance
test-> FROM friend
test-> ORDER BY firstname;
firstname | state | distance
-----------------+-------+----------
Dean | MA | very far
Dick | NJ | far
Ned | MD | far
Sandy | NJ | far
Sandy | MA | very far
Victor | PA | close
(6 rows)
Figure4.20: ComplexCASEexample
42 CHAPTER4. CUSTOMIZINGQUERIES
test=> SELECT state FROM friend ORDER BY state;
state
-------
MA
MA
MD
NJ
NJ
PA
(6 rows)
test=> SELECT DISTINCT state FROM friend ORDER BY state;
state
-------
MA
MD
NJ
PA
(4 rows)
test=> SELECT DISTINCT city, state FROM friend ORDER BY state, city;
city | state
-----------------+-------
Boston | MA
Plymouth | MA
Cedar Creek | MD
Ocean City | NJ
Williamsport | PA
(5 rows)
Figure4.21: DISTINCTpreventsduplicates
4.13. FUNCTIONSANDOPERATORS 43
Function SEToption
DATESTYLE DATESTYLETO’ISO’|’POSTGRES’|’SQL’|’US’|
’NONEUROPEAN’|’EUROPEAN’|’GERMAN’
TIMEZONE TIMEZONETO’value’
Table4.7: SEToptions
4.13 Functions and Operators
ManyfunctionsandoperatorsareavailableinPOSTGRESQL.Functioncallscantakezero,one,or
more arguments and return a single value. You can list all functions and their arguments using
psql’s \df command. You can use psql’s \dd command to display comments about any specific
functionorgroupoffunctions,asshowninFigure4.22.
Operatorsdifferfromfunctionsinthefollowingways:
• Operatorsaresymbols,notnames.
• Operatorsusuallytaketwoarguments.
• Argumentsappeartotheleftandrightoftheoperatorsymbol.
Forexample,+isanoperatorthattakesoneargumentontheleftandoneontheright,andreturns
the sum of the arguments. Psql’s \do command lists all POSTGRESQL operators and their argu-
ments. Figure4.23showsalistingofoperatorsandexamplesoftheiruse. Thestandardarithmetic
operators—addition(+),subtraction(-),multiplication(*),division(/),modulo/remainder(%),and
exponentiation (ˆ)—honor the standard precedencerules. That is, exponentiation is performed
first; multiplication, division, and modulo second; and addition and subtraction last. You can use
parentheses to alter this precedence. Other operators are evaluated in a left-to-right manner,
unlessparenthesesarepresent.
4.14 SET, SHOW, and RESET
TheSETcommandallowsyoutochangevariousPOSTGRESQLparameters. Thechangesremainin
effectforthedurationofthedatabaseconnection. Table 4.7showstwocommon parametersthat
canbecontrolledwithSET.
TheSETDATESTYLEcommandcontrolstheappearanceofdateswhenprintedinpsql, asseen
in Table 4.8. It controls the format (slashes, dashes, or year first) and the display of the month
first (US) or day first (European). The command SET DATESTYLE TO ’SQL,US’ would most likely
be selected by users in the United States, while Europeans might prefer SET DATESTYLE TO
44 CHAPTER4. CUSTOMIZINGQUERIES
test=> \df
List of functions
Result | Function | Arguments
-----------+---------------------+------------------------------------------
_bpchar | _bpchar | _bpchar int4
_varchar | _varchar | _varchar int4
float4 | abs | float4
float8 | abs | float8
…
test=> \df int
List of functions
Result | Function | Arguments
----------+------------------+------------------------
int2 | int2 | float4
int2 | int2 | float8
int2 | int2 | int2
int2 | int2 | int4
…
test=> \df upper
List of functions
Result | Function | Arguments
--------+----------+-----------
text | upper | text
(1 row)
test=> \dd upper
Object descriptions
Name | Object | Description
-------+----------+-------------
upper | function | uppercase
(1 row)
test=> SELECT upper(’jacket’);
upper
--------
JACKET
(1 row)
test=> SELECT sqrt(2.0); -- square root
sqrt
-----------------
1.4142135623731
(1 row)
Figure4.22: Functionexamples
4.14. SET,SHOW,ANDRESET 45
test=> \do
List of operators
Op | Left arg | Right arg | Result | Description
-----+-------------+-------------+-----------+----------------------------------
! | int2 | | int4 |
! | int4 | | int4 | factorial
! | int8 | | int8 | factorial
!! | | int2 | int4 |
…
test=> \do /
List of operators
Op | Left arg | Right arg | Result | Description
----+----------+-----------+----------+------------------------------
/ | box | point | box | divide box by point (scale)
/ | char | char | char | divide
/ | circle | point | circle | divide
/ | float4 | float4 | float4 | divide
…
test=> \do ˆ
List of operators
Op | Left arg | Right arg | Result | Description
----+----------+-----------+--------+----------------------
ˆ | float8 | float8 | float8 | exponentiation (xˆy)
(1 row)
test=> \dd ˆ
Object descriptions
Name | Object | Description
------+----------+----------------------
ˆ | operator | exponentiation (xˆy)
(1 row)
test=> SELECT 2 + 3 ˆ 4;
?column?
----------
83
(1 row)
Figure4.23: Operatorexamples
46 CHAPTER4. CUSTOMIZINGQUERIES
Outputfor
Style OptionalOrdering February1,1983
ISO 1983-02-01
POSTGRES USorNONEUROPEAN 02-01-1983
POSTGRES EUROPEAN 01-02-1983
SQL USorNONEUROPEAN 02/01/1983
SQL EUROPEAN 01/02/1983
German 01.02.1983
Table4.8: DATESTYLEoutput
test=> SHOW DATESTYLE;
NOTICE: DateStyle is ISO with US (NonEuropean) conventions
SHOW VARIABLE
test=> SET DATESTYLE TO ’SQL, EUROPEAN’;
SET VARIABLE
test=> SHOW DATESTYLE;
NOTICE: DateStyle is SQL with European conventions
SHOW VARIABLE
test=> RESET DATESTYLE;
RESET VARIABLE
test=> SHOW DATESTYLE;
NOTICE: DateStyle is ISO with US (NonEuropean) conventions
SHOW VARIABLE
Figure4.24: SHOWandRESETexamples
’POSTGRES,EUROPEAN’. The ISO datestyle and GERMAN datestyle are not affected by any of the
otheroptions.
TheTIMEZONEdefaultstothetimezoneoftheserverorthePGTZenvironmentvariable. The
psqlclientmightbeinadifferenttimezone,soSETTIMEZONEallowsthisparametertobechanged
insidepsql. SeetheSETmanualpageforafulllistof SEToptions.
The SHOW command is used to displaythe current databasesession parameters. The RESET
commandallowsasessionparametertoberesettoitsdefaultvalue. Figure4.24showsexamples
ofthesecommands.5
5Yoursitedefaultsmaybedifferent.
4.15. SUMMARY 47
4.15 Summary
This chapter has shown how simple commands can be enhanced using features like DISTINCT,
CASE, and complex WHERE clauses. These features give users great control over the execution
of queries. They were chosen by committees as important features that should be in all SQL
databases. Althoughyoumayneveruseallofthefeaturesmentionedinthischapter,manyofthem
willprovevaluablewhensolvingreal-worldproblems.
Chapter 5
SQL Aggregates
Usersoften need to summarize databaseinformation. Insteadof seeingall rows, theywant just
acount or total. This typeof operation is calledaggregationor gatheringtogether. This chapter
focusesonPOSTGRESQL’sabilitytogeneratesummarizeddatabaseinformationusingaggregates.
5.1 Aggregates
Table5.1listsfiveaggregates. COUNToperatesonentirerows;theotherfouroperateonspecific
columns. Figure5.1showsexamplesofaggregatequeries.
Aggregates can be combined with a WHERE clause to produce more complex results. For
example, the query SELECT AVG(age) FROM friend WHERE age >= 21 computes the average age of
peopleage21orolder. ThispreventsDickGleasonfrombeingincludedintheaveragecomputation
becauseheisyoungerthan21. Thecolumnlabeldefaultstothenameoftheaggregate. Youcan
useAStochangeit,asdescribedinSection4.5.
NULLvaluesarenotprocessedbymostaggregates,suchasMAX(),SUM(),andAVG();theyare
simply ignored. However, if a column contains only NULL values, the result is NULL, not zero.
COUNT(*) is different in this respect. It does count NULL values because it looks at entire rows
Aggregate Function
COUNT(*) countofrows
SUM(colname) total
MAX(colname) maximum
MIN(colname) minimum
AVG(colname) average
Table5.1: Aggregates
49