活跃度探测器可用于确定应用是否由于某种原因(例如，由于内存错误)而失败。对于运行时间较长的应用容器，活跃度探测器可以作为一种方法派上用场，帮助 Kubernetes 回收旧的和损坏的 Pods 以获得新的。虽然探测器本身不会导致容器重启，但是其他 Kubernetes 资源和控制器会检查探测器状态，并在必要时使用它来重启 Pods。这是一个附有活性探针定义的 PodSpec:
带活性探针的 probe.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
spec:
  containers:
  - name: my-app
    image: mydockername
    command: ["run"]
    ports:
    - containerPort: 8080
    livenessProbe:
      exec:
        command:
        - cat
        - /tmp/thisfileshouldexist.txt
      initialDelaySeconds: 5
      failureThreshold: 3
      periodSeconds: 5
```
正如您所看到的，我们的活跃度探测器的指定方式与我们的就绪探测器相同，只是增加了一个–`failureThreshold`。
`failureThreshold`值将决定 Kubernetes 在采取行动之前尝试探测的次数。对于活性探测器，一旦越过`failureThreshold`，Kubernetes 将重启 Pod 。对于准备状态探测器，Kubernetes 将简单地将 Pod 标记为`Not Ready`。该阈值的默认值为`3`，但可以更改为大于或等于`1`的任何值。
在这种情况下，我们用探针使用`exec`机制。我们将很快回顾各种可用的探测机制。
### 启动探测器
最后，启动探测器是一种特殊类型的探测器，在容器启动时只会运行一次。一些(通常较旧的)应用在容器中启动需要很长时间，因此通过在容器第一次启动时提供一些额外的余地，您可以防止活动或就绪探测器失败并导致重启。这是用我们的 Pod 配置的启动探测器:
带有启动探针的 probe.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
spec:
  containers:
  - name: my-app
    image: mydockername
    command: ["run"]
    ports:
    - containerPort: 8080
    startupProbe:
      exec:
        command:
        - cat
        - /tmp/thisfileshouldexist.txt
      initialDelaySeconds: 5
      successThreshold: 2
      periodSeconds: 5
```
启动探测比简单地延长活动或就绪探测之间的时间提供了更大的好处——它们允许 Kubernetes 在解决启动后发生的问题时保持快速的反应时间，并且(更重要的是)防止缓慢启动的应用不断重启。如果您的应用需要几秒钟甚至一两分钟的时间来启动，那么您将更容易实现启动探测。
`successThreshold`正是它看起来的样子，硬币的反面为`failureThreshold`。它规定了在一个容器被标记为`Ready`之前需要连续多少次成功。对于在稳定之前启动时可以上升和下降的应用(像一些自聚类应用)，更改该值可能是有用的。默认值为`1`，对于活性探测器，唯一可能的值是`1`，但是我们可以更改就绪和启动探测器的值。
### 探针机构配置
有多个机制来指定三个探头中的任何一个:`exec`、`httpGet`和`tcpSocket`。
`exec`方法允许您指定将在容器内部运行的命令。成功执行的命令将导致探测通过，而失败的命令将导致探测失败。到目前为止，我们配置的所有探头都使用了`exec`方法，因此配置应该是不言而喻的。如果选择的命令(带有以逗号分隔的列表形式指定的任何参数)失败，探测将失败。
探测的`httpGet`方法允许您在容器上指定一个将被 HTTP `GET`请求命中的网址。如果 HTTP 请求返回一个介于`200`到`400`之间的代码，它将导致探测成功。任何其他 HTTP 代码都将导致失败。
`httpGet`的配置如下:
带探头的 Pod 
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
spec:
  containers:
  - name: my-app
    image: mydockername
    command: ["run"]
    ports:
    - containerPort: 8080
    livenessProbe:
      httpGet:
        path: /healthcheck
        port: 8001
        httpHeaders:
        - name: My-Header
          value: My-Header-Value
        initialDelaySeconds: 3
        periodSeconds: 3
```
最后，`tcpSocket`方法将尝试打开容器上的指定插座，并将使用结果来指示成功或失败。`tcpSocket`配置如下:
带有 tcp 探针的 probe.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: myApp
spec:
  containers:
  - name: my-app
    image: mydockername
    command: ["run"]
    ports:
    - containerPort: 8080
    readinessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
```
正如你看到的，这种类型的探头接收一个端口，每次检查都会被 ping 通。
### 公共 Pod 转换
Kubernetes 中的失败 PODS 倾向于在状态之间转换。对于第一次使用的用户来说，这可能会令人望而生畏，因此有必要详细说明我们前面列出的 Pod 状态如何与探测功能交互。重申一下，这里是我们的状态:
*   `Running`
*   `Succeeded`
*   `Pending`
*   `Unknown`
*   `Failed`
一个常见的流程是运行`kubectl get pods -w`(在命令中添加了`-w`标志)并看到违规的 Pods 在`Pending`和`Failed`之间转换。典型的情况是，Pod (及其容器)正在旋转并拉出映像——这是`Pending`状态，因为健康检查尚未开始。
一旦初始探测超时(正如我们在上一节中看到的，这是可配置的)过去，第一次探测就会失败。这可以持续几秒钟甚至几分钟，取决于故障阈值有多高，状态仍然固定在`Pending`。
最后，我们的故障阈值达到，我们的 Pod 状态转换到`Failed`。在这一点上，可能会发生两件事中的一件，这个决定纯粹是基于 PodSpec 上的`RestartPolicy`，它可以是`Always`、`Never`或者`OnFailure`。如果 Pod 出现故障，并且`restartPolicy`为`Never`，Pod 将保持故障状态。如果是另外两个选项之一，Pod 会自动重启，回到`Pending`，这就是我们永无止境过渡周期的根本原因。
举个不同的例子，你可能会看到 Pods 永远停留在`Pending`状态。这可能是由于无法在任何节点上调度 Pod。这可能是由于资源请求限制(我们将在本书后面的第 8 章[](08.html#_idTextAnchor186)**Pod Placement Controls*)或其他问题(如节点不可达)造成的。*
 *最后，对于`Unknown`，通常 Pod 被调度的节点由于某种原因而不可达，例如，该节点可能已经关闭，或者通过网络不可达。
### Pod 调度
Pod 调度的复杂性和 Kubernetes 让你影响和控制的方式它将被保存到我们的 [*第 8 章*](08.html#_idTextAnchor186)*Pod 放置控制*——但现在我们将回顾基础知识。
在决定在哪里安排 Pod 时，Kubernetes 会考虑许多因素，但最需要考虑的是 Pod 优先级、节点可用性和资源可用性(如果不深入研究 Kubernetes 让我们使用的更复杂的控制)。
Kubernetes 调度程序运行一个持续的控制循环，监视集群中未绑定(未调度)的 Pods。如果找到一个或多个未绑定的 Pod，调度程序将使用 Pod 优先级来决定首先调度哪个。
一旦调度器决定了要调度的 Pod，它将执行多轮和多种类型的检查，以便找到节点的本地最优点，以便在哪里调度 Pod。后几轮检查由粒度调度控制决定，我们将在 [*第 8 章*](08.html#_idTextAnchor186)*Pod 放置控制*中讨论。我们现在要担心第一批支票。
首先，Kubernetes 检查哪些节点在当前时刻甚至是可调度的。节点可能无法正常工作，或者遇到会妨碍计划新 Pods 的问题。
其次，Kubernetes 通过检查哪些节点符合 PodSpec 中规定的最低资源要求来过滤可调度节点。
此时，在没有任何其他放置控制的情况下，调度器将做出决定，并将我们的新 Pod 分配给一个节点。当该节点上的`kubelet`看到分配了一个新的 Pod 时，Pod 将旋转起来。
# 总结
在本章中，我们了解到 Pods 是我们在 Kubernetes 中必须使用的最基本的构建模块。对 Pods 及其所有微妙之处有深刻的理解是很重要的，因为 Kubernetes 上的所有计算都使用 Pods 作为构建块。这可能现在已经非常明显了，但是 PODS 是非常小的，个体的东西，不是很结实。在没有控制器的 Kubernetes 上作为单个 Pod 运行应用是一个糟糕的决定，Pod 的任何问题都会导致停机。
在下一章中，我们将看到如何通过使用 Pod 控制器一次运行一个应用的多个副本来防止这种情况。
# 问题
1.  如何使用名称空间来分隔应用环境？
2.  Pod 状态被列为`Unknown`的可能原因是什么？
3.  限制 Pod 内存资源的原因是什么？
4.  如果在 Kubernetes 上运行的应用经常在失败的探测重新启动 Pod 之前没有及时启动，您应该调整哪种探测类型？准备、活跃还是启动？
# 进一步阅读
*   Kubernetes 官方文件:[https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)
*   *硬道*:[https://github . com/keleyhightower/kubrites—硬道](https://github.com/kelseyhightower/kubernetes-the-hard-way)*