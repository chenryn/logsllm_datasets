Hello9
图2-3-17
借助沙箱逃逸，我们使能达到执行任意JavaScript代码的目的。这样的XSS是因为前端对某部分输出
进行了二次染导致的，所以没有script标签这样的特征，也就不会被浏览器随意的拦截，见图2-3-
18
图2-3-18
参考链接：https://portswigger.net/blog/XSS-without-html-client-side-template-
injection
三
去书架直看
https:/weread.qq.com/web/reader/77d32500721a485577d8eeekc7432af0210c74d97b01b1c
6/14
---
## Page 103
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
2.3.3XSS过滤和绕过
过滤的两个层为WAF层、代码层。WAF（WebApplicationFirewall，Web应用防火墙）层通常在
代码外，主机层对HTTP应用请求一个过滤拦截器。代码层则在代码中直接实现对用户输入的过滤或
者引用第三方代码对用户输入进行过滤。
JavaScript非常灵活，所以对于普通的正则匹配，字符串对比很难拦截XSS漏洞。过滤的时候一般会
面临多种场景。
1.富文本过滤
对于发送邮件和写博客的场景，标签是必不可少的，如嵌入超链接、图片需要HTML标签，如果对标
签进行黑名单过滤，必然出现遗漏的情况，那么我们可以通过寻找没有被过滤的标签进行绕过，
我们也可以尝试fuzz过滤有没有缺陷，如在直接把script替换为空的过滤方式中，可以采用双写形式
；或者在没有考虑大小写时，可以通过大小写的变换绕过script标签，见图2-3-19
rotes Stu:
图2-3-19
错误的过滤方式甚至可以帮助我们绕过浏览器的XSS过滤器。
2.输出在标签属性中
如果没有过滤“”，我们可以直接引l入新的标签，否则可以引I入标签的事件，如onload
onmousemove等。当语句被输出到标签事件的位置时，我们可以通过对payload进行HTML编码来
绕过检测，见图2-3-20
lert(1)
461cx5x7274,284x31x9]
图2-3-20
利用burpsuite对payload进行实体编码：
打开浏览器即可触发，见图2-3-21.
图2-3-21
这里能触发与浏览器染页面的顺序有关。我们的payload在标签属性中，触发事件前，浏览器已经
对payload进行了一次解码，即从实体编码转换成了常规数据。
如果对lavaScript的函数进行过滤，如过滤了“eval（”这样的字符组合，那么可以通过下面的方式
进行绕过：
三
日
去书架查看
https://weread.qq.com/web/reader/77d32500721a485577d8eeekc7432af0210c74d97b01b1c
7/14
---
## Page 104
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
正因为JavaScript非常灵活，所以通过黑名单的方式对XSS攻击进行过滤是很困难的。
3.输出在JavaScript变量中
通过闭合JavaScript语句，会使得我们的攻击语句逃逸，这时有经验的开发可能会对引号进行编码或
者转义，进而防御XSS，但是配合一些特殊的场景依然可能形成XSS。例如，对于如下双输入的注
入：
如果只过滤单引号而没考虑“”，那么我们可以转义语句中的第二个单引号，使得第一个单引号和第
三个单引号闭合，从而让攻击语句逃逸：
在XSS中也有类似的场景。例如，如下代码：
c7php
$nane = $_GET[*name′];
$name = htalentit:ies($name,ENT_QuOTES);
$address = $_GET[*addr′];
$address = htstentities(Saddress, ENT_QuoTES);
?>
I0OCTYPE htat,x
head)
s/titlex
var url = *http://nult. com/names*+*;
输入点和输出点都有两个，如果输入引|号，会被编码成HTML实体字符，但是htmlentities函数并不
会过滤\”，所以我们可以通过“”使得攻击语句逃逸，见图2-3-22。
图2-3-22
在name处末尾输入“，在addr参数处闭合前面的JavaScript语句，同时插入恶意代码。进一步可
以用eval（window.name）引l入恶意代码或者使用JavaScript中的String.fromCharCode来避免使
用引号等被过减的字符。
再介绍几个小技巧，见图2-3-23，将payload藏在location.hash中，则URL中“#”后的字符不会被
发到服务器，所以不存在被服务器过滤的情况，见图2-3-24.
图2-3-23
三
去书架直看
htps://weread.qq.com/web/reader/77d32500721a485577d8eeekc7432af0210c74d97b01b1c
8/14
---
## Page 105
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
在JavaScript中，反引号可以直接当作字符串的边界符。
4.CSP过滤及其绕过
我们引|用https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP的内容来介绍CSP
CSP（ContentSecurityPolicy，内容安全策略）是一个额外的安全层，用于检测并削弱某些特定类
型的攻击，包括跨站脚本（XSS）和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意
软件，这些攻击都是主要的手段。
CSP被设计成完全向后兼容。不支持CSP的浏览器也能与实现了CSP的服务器正常合作，反之亦然：
不支持CSP的浏览圈只会忽略它，正常运行，默认网页内容使用标准的同源策路。如果网站不提供
头部，那么浏览圈也使用标准的同源策略。
CSP
为了使CSP可用，我们需要配置网络服务器返回Content-Security-PolicyHTTP头部（有时有X-
-Security-Policy头部的提法，那是I旧版本，不需如此指定它）。除此之外，元素也可
Content
以被用来配置该策略。
从前面的一些过滤绕过也可以看出，XSS的防御绝非易事，CSP应运而生。CSP策路可以看作为了防
御XSS，额外添加的一些浏览器渲染页面、执行JavaScript的规则。这个规则是在浏览器层执行的，
只需配置服务器返回Content-Security-Policy头。例如：
merl'(etet-secetty-is: ot-er 1.s8.or?;
这段代码会规定，这个页面引用的JavaScript文件只允许来自百度的子域，其他任何方式的
avaScript
执行都会被拦截，包括页面中本身的script标签内的代码。如果引用了不可信域的JavaScript文件，
则在浏览器的控制台界面（按F12，打开console）会报错，见图2-3-25。
图2-3-25
CSP规则见表2-3-1
表2-3-1
表中的每个规则都对应了浏宽器中的某部分请求，如default-src指令定义了那些没有被更精确指令指
定的安全策略，可以理解为页面中所有请求的一个默认策略；script-src可以指定允许加载的
JavaScript
资源文件的源。其余规则的含义读者可以自行学习，不再整述。
在CSP规则的设置中，“*"可以作为通配符。例如，“baidu.com”指的是允许加载百度所有子域
名的JavaScript资源文件；还支持指定具体协议和路径，如“Content-Security-Policy：script-src
http
://*.baidu.com/js/指定了具体的协议以及路径。
除此之外，script-src还支持指定关键词，常见的关键词如下。
nnne·警止加截所有资殖
日涧
去书架查看
https://weread.qq.com/web/reader/77d32500721a485577d8eeekc7432af0210c74d97b01b1c
9/14
---
## Page 106
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
self：允许加载同源的资源文件
unsafe-inline：允许在页面内直接执行嵌入的JavaScript代码。
unsafe-eval：允许使用evall等通过字符串创建代码的方法。
所有关键词都需要用单引号包裹。如果在某条CSP规则中有多个值，则用空格隔开：如果有多条指
令。则用：隔开。比如：
5.常见的场景及其绕过
CSP规则众多，所以这里只简单举例，其他相关规则及绕过方式读者可以自行查阅相关资料。例如
对于“script-src'self”，self对应的CSP规则允许加载本地的文件，我们可以通过这个站点上可控
的链接写入恶意内容，如文件上传、JSONP接口。例如：
注意，如果是图片上传接口，即访问上传资源时返回的Content-Type是image/png之类的，则会被
浏览器拒绝执行。
假设上传了一个a.xxxx文件。通过URL的GET参数，把这个文件引I入script标签的src属性，此时返回
的Content-type为text/plain，解析结果见图2-3-26
图2-3-26
除此之外，我们可以利用JSONP命令进行绕过。假设存在JSONP接口（见图2-3-27），我们可以通
过JSONP接口引I入符合JavaScript语法的代码，见图2-3-28。
C012700.1:B88
callback(stata*:ruces8’)
图2-3-27
图2-3-28
若该JSONP接口处于白名单域下，可以通过更改callback参数向页面中注入恶意代码，在触发点页面
引入构造好的链接，见图2-3-29
图2-3-29
另一些常见的绕过方法如下：
lc./4s1114
三
去书架直看
https:/weread.qq.com/web/reader/77d32500721a485577d8eeekc7432af0210c74d97b01b1c
10/14
---
## Page 107
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
还有就是利用页面跳转，包括a标签的跳转、location变量赋值的跳转，meta标签的跳转等手法。比
如，通过跳转实现带出数据：
2.3.4XSS绕过案例
CTF中的XSS题目通常利用XSSbot从后台模拟用户访问链接，进而触发答题者构造的XSS，读到出题
者隐藏在bot浏览器中的flag。flag通常在bot浏览器的Cookie中，或者存在于只有bot的身份才可以
访问到的路径。除了CTF题目，现实中也有相关XSS漏洞的存在，在第二个例子中，笔者将阐述一个
自己普经挖到的XSS漏洞案例。
1. 0CTF 2017 Complicated XSS
题目中存在两个域名govemment.vip和admin.government.vip，见图2-3-30
XSS Book
图2-3-30
题目提示：http://admin.government.vip：8000.测试后发现，我们可以在governmentvip中
输入任意HTML让BOT触发，也就是可以让bot在government.vip域执行任意JavaScript代码。经过
进一步探测发现
需要以管理员的身份向http://admin.government.vip：8000/upload接口上传文件后，才能
得到flag
http://admin.government.vip：8000中存在一个XSS，用户Cookie中的用户名直接会被显
示在HTML内容中，见图2-3-31
←
C
admin.government.vip:8000
Hello test
Onlyadmincanuploadashell
图2-3-31
3>http://admin.government.vip：8000/页面存在过滤，删除了很多函数，需要想办法绕过才
日
去书架查看
https:/weread.qq.com/web/reader/77d32500721a485577d8eeekc7432af0210c74d97b01b1c
11/14
---
## Page 108
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
根据得到的信息可以梳理出思路，利用government.vip根域的XSS，将对admin子域攻击的代码写入
Cookie，设置Cookie有效的域为所有子域（所有子域均可访问此Cookie）。设置完Cookie后，引导
用户访问打印Cookie的页面，使bot在admin子域触发XSS，触发后利用XSS在admin子域中新建一
个iframe页面，从而绕过页面中函数的限制，并读取管理员上传页面的HTML源码，最后构造上传包
利用XSS触发上传，获得flag后发送给攻击者。
首先，在根域触发XSS的内容：
funetion setCeeke(rast, valae, secones) 
sar espires ***; s4 (sends 1+ 0 ) [
// 0里 Ceekie 生时?
nds有状基损赋信，次有为每远小年php不一样
rar date
ee Date（）:
espines**date.teHTStringC;
1 = SNd
t.k;//
99, 119, 47, 986, 97, 195, 189, 117, 97, 128, 115, 115, 96, 186, 115, 34, 59,
11,181,11,10,67,19,85,18,19,0,115,115,115,,93
1111,99,11,199,,138,116,46,,111,19,2,97,112