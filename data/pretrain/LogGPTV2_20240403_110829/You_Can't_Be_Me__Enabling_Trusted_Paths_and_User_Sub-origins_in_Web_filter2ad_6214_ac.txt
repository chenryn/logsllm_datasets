– P2: Post-initialization Security of UFrame. All sensitive data and code must be
kept isolated inside a UFrame. The rest of the application code outside UFrame
must not be able to access this data and code whatsoever.
The properties P0, P1 and P2 serve as the basis for subsequent security properties
P3, P4, and P5 described as follows.
– P3: Secure Visual and Input Channels for Users
Visual channel. We reuse the standard secure visual channel that requires display,
intent, spatio-temporal, and pointer integrity to ensure distinguishability of secure
UI elements from the non-secure ones. Secure UI elements cannot be obstructed or
tampered with by untrusted code. Its elements should be able to display conﬁdential
information to users and not be accessible to the non-UFrame code. This has been
explored in other research works [15, 16, 32] and is not part of our contributions.
Input Channel. All keyboard inputs to secure input elements go directly to the
browser. The conﬁdentiality and integrity of input action should not be violated
by untrusted scripts. The browser should be able to distinguish genuine user inter-
actions from those mimicked by JavaScript code.
Enabling Trusted Paths and User Sub-origins in Web Browsers
161
– P4: Secure Browser ↔ UFrame Channel. A privileged UFrame can communi-
cate to the browser directly in order to create secure UI elements or to read contents
in DOM objects securely with no possibility of interception from untrusted code.
The conﬁdentiality, integrity and authenticity of such communications are main-
tained by the browser.
– P5: Secure UFrame ↔ Server Channel. Web server should be able to distinguish
requests generated from the authentic user interaction, and those that are not. The
communications between the UFrame and the server are protected in their conﬁ-
dentiality and integrity.
Due to space constraints, we give a more thorough example-by-example security
analysis in our technical report [20].
3.4 Compatibility and Usability Implications
Our mechanism can be easily extended to handle authentication via Single-Sign On
(SSO). If the server O delegates authentication to an SSO provider S, a separate HTTPS
connection is established from the browser to S. Thereafter, the credential input element
uses the username and password to initiate the PAKE authentication with S. Upon suc-
cessful completion, the browser obtains a shared key Ks with S, which is also com-
municated by S to O in a separate channel. O can create a server-side representation
for Alice using Ks. The browser thus creates a UFrame with the authority of Alice@S,
which can isolate Alice@S from another user.
Usability Implications. First, we assume that web application users will always check
the background color of any credential-seeking elements, and only enter their passwords
if the color matches that of a rectangle displayed in the browser’s chrome area. Second,
we rely on prior research [15,16,32] to ensure the visual, temporal and pointer integrity
of a secure visual channel. Admittedly, the usability of such a scheme has not been fully
evaluated; a thorough user study on its usability merits separate research (c.f., [41,42]).
4 Implementation in Chromium
We summarize the high-level abstraction of our end-to-end solution and detail how it is
implemented in Chromium web browser.
Implementation Overview. We implemented UFrame and trusted path components
by modifying Chromium5, the open source version of Google Chrome. We patched
Chromium version 12 by adding roughly 475 lines of code spreading over 26 ﬁles inside
Chromium codebase. This does not include the logic for performing PAKE procotol,
which was implemented separately by us as a plug-in. Apart from the browser, we also
modiﬁed 20 PHP-based server-side applications which we discuss in Section 5.
We have released our patch to Chromium and the modiﬁed web applications on a
public repository [20]. We have also released a demo video showing how USERPATH
offers smooth user experience with our running example Elgg [21].
Authentication Step. As discussed in Section 3.2, once the browser identiﬁes credential
element on the HTML code, it renders this element and applies a random color on
the element’s background. To do so, we develop an NPAPI plug-in for the browser to
render such element and update the display color in web browser’s chrome bar. As the
5 http://www.chromium.org/
162
E. Budianto et al.
credential element is rendered and called through privileged API, this is not accessible
from web application code. To make the existing authentication process be USERPATH-
compliant, developers just need to embed the plug-in into original web application’s
login page.
src=’http://www.example.com/content.php’
sign=’8d4f9a3112e700437e5cd783cc621’
token=’qvrz-clwo-xiud-jawz’>
1 
Listing 1.1. Trusted Code Running in a UFrame. This piece of code executes under the
user’s authority OAlice to create a secure div element into the web page and secure HTTP
request to add a user as an admin. Details elided for brevity.
Subsequently, we employ the PAKE protocol to mutually authenticate user and the
backend server by integrating TLS-SRP [43] — a PAKE-based web authentication that
operates at the transport layer — into USERPATH. On the web browser, we install a
browser level TLS-SRP module that receives input from special credential box and
carries out PAKE protocol with the speciﬁc origin O speciﬁed in url property of the
UFrame code. The module consists of 381 C++ lines of code in total, which is roughly
2.6 MB in size. At the server side, we apply a patch to the Apache web server to handle
server-side TLS-SRP authentication. This patch is available online [44].
Secure Delegation. After the authentication step ﬁnishes, the browser creates a UFrame
for executing trusted JavaScript code. In this step, the browser already has a shared
key Ks that can be used to secure communications with the server. Server-side web
application then signs the content of the UFrame using the key Ks and sends it to the
browser, embedded in a custom HTML tag named . Whenever the browser
encounters the UFrame content during parsing, it checks the integrity and authenticity
of the UFrame code, and creates an iframe with a random origin OR = P RG(Ks),
where P RG(KS) is a pseudorandom generator function that takes the shared key Ks
as the seed.
We leverage existing mechanisms in the Chromium web browser to establish trusted
paths. For ease of implementation, we modify isolated worlds [36], a feature provided
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
Enabling Trusted Paths and User Sub-origins in Web Browsers
163
by Chromium to separate execution context between two JavaScript code. This abstrac-
tion offers similar isolation mechanism as what iframe-based isolation with random
origin provides.
Trusted Path Implementation. We use our running example in Section 2 to illus-
trate how we implement the trusted path execution inside a UFrame. As shown in List-
ing 1.1, UFrame code is purely written in JavaScript, and it has additional access to
secure DOM APIs. As an example, we label contact information as a sensitive ele-
ment to prevent them from being leaked to malicious code running on a web page.
In Listing 1.1 line 9, a secure DOM element is created by invoking a downcall API
createSecElement(). This API receives a JSON object jsonData as an in-
put, and creates a secure display element based on data from jsonData. The object
jsonData has user-owned contact information, which is sensitive data passed from
the backend server to the browser. In Listing 1.1 line 10-19, we create a POST re-
quest directly from the UFrame using dedicated XMLHttpRequest to protect the
client-side request to Elgg server. The data that is sent through the POST request
(e.g., username, password) is obtained from user input on the secure input elements
(Listing 1.1 line 15). As the XMLHttpRequest object is being called from UFrame,
the browser treats the request as secure resource access to the server and appends special
user interaction token for that request.
In our Chromium implementation, we make small changes in the following C++
classes: ScriptController, V8IsolatedContext and V8NodeCustom. We
add a new data structure called IsolatedContextMap to maintain the relation be-
tween code running on the web page or the UFrame, represented by a context identiﬁer.
Therefore, the system can recognize the context where a JavaScript code is running by
checking the data structure. Finally, we modify Chromium to mediate access from a
JavaScript object to a DOM Node. The logic for mediating access to sensitive DOM
element is as follows: as each element of the DOM is represented by an object, we add
a special ﬂag for every object that is created under speciﬁc privileged functions. We
then modify the logic for traversing an object in a DOM tree, so that those objects with
privileged ﬂag will not be visible to the web application code running under origin O.
5 Evaluation
We deploy USERPATH on 20 open source web applications (as Table 4 shows) from 8
different categories (as Table 5 presents) including 3 frameworks (WordPress, Joomla,
and Drupal). These web applications are statistically popular, built using PHP, and cover
a wide range of functionalities. We evaluate our solution from four aspects – scope
of vulnerabilities USERPATH can eliminate, case study of elgg, applicability to web
applications & TCB reduction, and USERPATH’s performance.
5.1 Scope of Vulnerabilities
We study a set of vulnerabilities in the web applications that can lead to PISE attacks.
Among the 20 open source web applications that we study, there are 325 vulnerabilities
on those web applications that can be exploited to launch the attacks. Most of them
have been patched and recorded in the vulnerability database, but some of them are still
unpatched.
164
E. Budianto et al.
Table 3. List of Vulnerabilities in 20 Open-source Web Applications. These vulnerabilities might
lead to PISE Attacks
App Name &
Version
Popularity Indicator
PHP # of
LOC
Sensitive User Data
# of Relevant Vulnerabilities
Elgg
v1.8.16
Friendica
v3.2.1744
Roundcube
v0.9.4
OpenEMR
v4.1.2
ownCloud
v5.0.13
HotCRP
v2.61
OpenConf
v5.30
PrestaShop
v1.5.6.0
OpenCart
v1.5.6
AstroSpaces
v1.1.1
Magento
v1.8.0.0
Zen Cart
v1.5.1
osCommerce
v2.3.3.4
StoreSprite
v7.24.4.13
CubeCart
v5.2.4
WordPress
v3.6
Joomla
v3.2.0
Drupal
v7.23
Piwigo
v2.5.3
X2CRM
v3.5.6
>2,800,000 downloads
114735
Forbes’s Top 3 social
network application
>2,400,000 downloads
Serving >30,000,000
patients
>350,000 users
Used by USENIX,
SIGCOMM, etc.
Used by ACSAC, IEEE,
W3C, ACM, etc.
Powering >150,000
online stores
>250,000 downloads
144555
109663
495987
337192
36333
17589
250660
93770
6972
95381
DZineBlog’s Top 10
open social network.
Used by >200,000
business
>3,000,000 downloads
>12,000 registered sites
with >270,000 members 60081
Incorporate 14 payment
gateways
Powering thousands of
online stores
Used by >60,000,000
websites
>35,000,000 downloads
30350
11942
928991
135540
227351
>1,000,000 downloads
Translated into 50
languages
>4,500 installations
across 135 countries
43835
143144
747261
Private proﬁle data and admin
options (set user as admin and
add new user)
Private contact, friend list, and
message data
Address book, settings and
private emails
Personal info, medical
records, and payment
Contacts, export ﬁles and user
share options
Contact information, review
and privilege settings
Contact info, review, edit
submission and role setting