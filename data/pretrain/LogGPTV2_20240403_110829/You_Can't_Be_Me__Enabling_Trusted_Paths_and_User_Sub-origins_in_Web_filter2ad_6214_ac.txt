### Post-Initialization Security of UFrame (P2)
All sensitive data and code must be isolated within a UFrame. The rest of the application code outside the UFrame should not have any access to this data and code.

### Basis for Subsequent Security Properties
Properties P0, P1, and P2 form the foundation for the following security properties: P3, P4, and P5, which are described below.

### P3: Secure Visual and Input Channels for Users
#### Visual Channel
We utilize the standard secure visual channel, which ensures display, intent, spatio-temporal, and pointer integrity to distinguish secure UI elements from non-secure ones. Secure UI elements cannot be obstructed or tampered with by untrusted code and should be capable of displaying confidential information to users without being accessible to non-UFrame code. This has been explored in other research works [15, 16, 32] and is not part of our contributions.

#### Input Channel
All keyboard inputs to secure input elements go directly to the browser. The confidentiality and integrity of these inputs should not be compromised by untrusted scripts. The browser must be able to differentiate genuine user interactions from those mimicked by JavaScript code.

### P4: Secure Browser ↔ UFrame Channel
A privileged UFrame can communicate directly with the browser to create secure UI elements or securely read contents in DOM objects without the possibility of interception by untrusted code. The confidentiality, integrity, and authenticity of such communications are maintained by the browser.

### P5: Secure UFrame ↔ Server Channel
The web server should be able to distinguish requests generated from authentic user interactions from those that are not. Communications between the UFrame and the server are protected in terms of confidentiality and integrity.

Due to space constraints, a more detailed example-by-example security analysis is provided in our technical report [20].

## 3.4 Compatibility and Usability Implications
Our mechanism can be easily extended to handle authentication via Single-Sign On (SSO). If the server O delegates authentication to an SSO provider S, a separate HTTPS connection is established from the browser to S. Thereafter, the credential input element uses the username and password to initiate PAKE authentication with S. Upon successful completion, the browser obtains a shared key Ks with S, which is also communicated by S to O in a separate channel. O can then create a server-side representation for Alice using Ks. The browser creates a UFrame with the authority of Alice@S, isolating Alice@S from another user.

### Usability Implications
First, we assume that web application users will always check the background color of any credential-seeking elements and only enter their passwords if the color matches that of a rectangle displayed in the browser’s chrome area. Second, we rely on prior research [15, 16, 32] to ensure the visual, temporal, and pointer integrity of a secure visual channel. Admittedly, the usability of such a scheme has not been fully evaluated; a thorough user study on its usability merits separate research (c.f., [41, 42]).

## 4 Implementation in Chromium
We summarize the high-level abstraction of our end-to-end solution and detail how it is implemented in the Chromium web browser.

### Implementation Overview
We implemented UFrame and trusted path components by modifying Chromium, the open-source version of Google Chrome. We patched Chromium version 12 by adding approximately 475 lines of code across 26 files in the Chromium codebase. This does not include the logic for performing the PAKE protocol, which was implemented separately as a plug-in. In addition to the browser, we modified 20 PHP-based server-side applications, which are discussed in Section 5.

We have released our patch to Chromium and the modified web applications on a public repository [20]. We have also released a demo video showing how USERPATH offers a smooth user experience with our running example, Elgg [21].

### Authentication Step
As discussed in Section 3.2, once the browser identifies a credential element in the HTML code, it renders this element and applies a random color to its background. To achieve this, we developed an NPAPI plug-in for the browser to render such elements and update the display color in the web browser’s chrome bar. Since the credential element is rendered and called through a privileged API, it is not accessible from the web application code. To make the existing authentication process USERPATH-compliant, developers need to embed the plug-in into the original web application’s login page.

```html
<iframe src='http://www.example.com/content.php'
        sign='8d4f9a3112e700437e5cd783cc621'
        token='qvrz-clwo-xiud-jawz'>
</iframe>
```

Listing 1.1: Trusted Code Running in a UFrame. This piece of code executes under the user’s authority OAlice to create a secure div element into the web page and a secure HTTP request to add a user as an admin. Details elided for brevity.

Subsequently, we employ the PAKE protocol to mutually authenticate the user and the backend server by integrating TLS-SRP [43], a PAKE-based web authentication that operates at the transport layer, into USERPATH. On the web browser, we install a browser-level TLS-SRP module that receives input from a special credential box and carries out the PAKE protocol with the specific origin O specified in the UFrame code. The module consists of 381 lines of C++ code, totaling approximately 2.6 MB in size. At the server side, we apply a patch to the Apache web server to handle server-side TLS-SRP authentication. This patch is available online [44].

### Secure Delegation
After the authentication step is complete, the browser creates a UFrame for executing trusted JavaScript code. At this point, the browser already has a shared key Ks that can be used to secure communications with the server. The server-side web application signs the content of the UFrame using the key Ks and sends it to the browser, embedded in a custom HTML tag named `<uframe>`. Whenever the browser encounters the UFrame content during parsing, it checks the integrity and authenticity of the UFrame code and creates an iframe with a random origin OR = PRG(Ks), where PRG(Ks) is a pseudorandom generator function that takes the shared key Ks as the seed.

We leverage existing mechanisms in the Chromium web browser to establish trusted paths. For ease of implementation, we modify isolated worlds [36], a feature provided by Chromium to separate execution contexts between two JavaScript codes. This abstraction offers similar isolation mechanisms as what iframe-based isolation with a random origin provides.

### Trusted Path Implementation
We use our running example in Section 2 to illustrate how we implement the trusted path execution inside a UFrame. As shown in Listing 1.1, UFrame code is purely written in JavaScript and has additional access to secure DOM APIs. For example, we label contact information as a sensitive element to prevent it from being leaked to malicious code running on a web page. In Listing 1.1, line 9, a secure DOM element is created by invoking a downcall API `createSecElement()`. This API receives a JSON object `jsonData` as input and creates a secure display element based on the data from `jsonData`. The object `jsonData` contains user-owned contact information, which is sensitive data passed from the backend server to the browser. In Listing 1.1, lines 10-19, we create a POST request directly from the UFrame using a dedicated `XMLHttpRequest` to protect the client-side request to the Elgg server. The data sent through the POST request (e.g., username, password) is obtained from user input on the secure input elements (Listing 1.1, line 15). As the `XMLHttpRequest` object is called from the UFrame, the browser treats the request as secure resource access to the server and appends a special user interaction token for that request.

In our Chromium implementation, we made small changes to the following C++ classes: `ScriptController`, `V8IsolatedContext`, and `V8NodeCustom`. We added a new data structure called `IsolatedContextMap` to maintain the relationship between code running on the web page or the UFrame, represented by a context identifier. Therefore, the system can recognize the context where a JavaScript code is running by checking the data structure. Finally, we modified Chromium to mediate access from a JavaScript object to a DOM Node. The logic for mediating access to sensitive DOM elements is as follows: as each element of the DOM is represented by an object, we add a special flag for every object created under specific privileged functions. We then modify the logic for traversing an object in a DOM tree so that those objects with the privileged flag will not be visible to the web application code running under origin O.

## 5 Evaluation
We deployed USERPATH on 20 open-source web applications (as Table 4 shows) from 8 different categories (as Table 5 presents), including 3 frameworks (WordPress, Joomla, and Drupal). These web applications are statistically popular, built using PHP, and cover a wide range of functionalities. We evaluate our solution from four aspects: the scope of vulnerabilities USERPATH can eliminate, a case study of Elgg, applicability to web applications & TCB reduction, and USERPATH’s performance.

### 5.1 Scope of Vulnerabilities
We studied a set of vulnerabilities in the web applications that can lead to PISE attacks. Among the 20 open-source web applications we studied, there are 325 vulnerabilities that can be exploited to launch such attacks. Most of them have been patched and recorded in the vulnerability database, but some remain unpatched.

| App Name & Version | Popularity Indicator | PHP # of LOC | Sensitive User Data | # of Relevant Vulnerabilities |
|--------------------|----------------------|--------------|---------------------|-------------------------------|
| Elgg v1.8.16       | >2,800,000 downloads | 114,735      | Private profile data and admin options (set user as admin and add new user) | 144,555                       |
| Friendica v3.2.1744 | >2,400,000 downloads | 109,663      | Private contact, friend list, and message data | 495,987                      |
| Roundcube v0.9.4   | Serving >30,000,000 patients | 337,192      | Address book, settings, and private emails | 363,333                      |
| OpenEMR v4.1.2     | >350,000 users       | 175,890      | Personal info, medical records, and payment | 250,660                      |
| ownCloud v5.0.13   | Used by USENIX, SIGCOMM, etc. | 93,770       | Contacts, export files, and user share options | 69,720                       |
| HotCRP v2.61       | Used by ACSAC, IEEE, W3C, ACM, etc. | 95,381       | Contact information, review, and privilege settings | 60,081                      |
| OpenConf v5.30     | Powering >150,000 online stores | 144,555      | Contact info, review, edit submission, and role setting | 119,420                     |

Table 3: List of Vulnerabilities in 20 Open-Source Web Applications. These vulnerabilities might lead to PISE Attacks.