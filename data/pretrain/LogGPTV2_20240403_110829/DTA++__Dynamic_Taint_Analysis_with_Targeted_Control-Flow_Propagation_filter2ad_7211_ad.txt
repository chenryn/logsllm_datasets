...
;%ax=0x007b (not tainted)
;%dl=0x7b (not tainted)
0x4b44dacb
;%edi=0x4b4043a0 (not t.), %ecx=0x4b4043a2 (not t.)
Figure 7. Execution trace of an implicit ﬂow in WordPad
...
0x101eb130: movsbl %bl,%eax
0x101eb133: sub
0x101eb136: je
0x101eb13c: sub
0x101eb13f: je
0x101eb20e: push
...
$0x26,%eax
0x101eb223
$0x16,%eax
0x101eb20e
$0x10281978
;%bl=0x3c (tainted)
;%eax=0x0000003c (tainted)
;%eax=0x00000016 (tainted)
Figure 8. Execution trace of an implicit ﬂow in AbiWord
However, this kind of taint propagation raises an additional
question when we use taint to create symbolic values for
path constraints: what is the correct constraint formula for
the value read from the array? If we propagate taint through
an array access with a tainted index, the value copied from
the array also should be marked symbolic. The most pre-
cise approach would be to copy the entire contents of the
array at the time of access into the constraint formula, but
this has several practical problems. First, it is often difﬁcult
to determine the bounds of an array at the binary level. Sec-
ond, large lookup-tables can make formulas too large and/or
make them take too long to solve. Instead in our implemen-
tation, we make the variables for values read from symbolic
inputs be free. In other words, we consider those tainted
values as new input values without any constraints. This
relaxation could potentially cause our tool to miss implicit
ﬂows, though this was not a problem in our experiments.
We leave for future work the problem of how to account
more accurately for such propagations in a way that is both
automatic and scalable.
Symbolic indirect jump.
It can also happen that taint
propagates to an address used in an indirect jump. Some-
what like the case of symbolic indexes above, it is difﬁcult
to symbolically represent all the possible behaviors of such
a jump, and they are also problematic in the construction of
control-ﬂow graphs. We did not encounter tainted indirect
jumps in any of our examples, but the context in which they
are most likely to occur is probably jump tables used to im-
plement switch statements. For this limited case it would
likely be feasible to implement special case recognition of
common switch statement instruction patterns.
1 // table of n special characters:
2 table = {’{’, ’}’, ’\’, ...};
3 input = get_input();
4 for (i = 0; i < n; i ++) {
if (input == table[i])
5
6
break;
7 }
8 if (i < n)
9
output = "\" + table[i];
Figure 9. A negative implicit ﬂow. Here the
branch on line 5 affects the value of i because
when the branch is taken, i is not modiﬁed.
Negative implicit ﬂows. The most subtle type of implicit
ﬂows are those in which a tainted control ﬂow affects later
data because a value is not modiﬁed. Some authors reserve
the term “implicit ﬂow” for this narrower case; instead we
distinguish them as negative implicit ﬂows. Figure 9 shows
an example of how such a ﬂow can occur in text transfor-
mation; it is modeled after code we observed in CryptEdit.
Negative implicit ﬂows can be diagnosed by our technique
just like other implicit ﬂows, but they require a more so-
phisticated approach to generate propagation rules. Rather
than just tainting locations that are written inside a branch,
we must also analyze which values might have been written
had the branch not been taken (e.g., the missing increments
of i in Figure 9) and taint those locations as well. Our cur-
rent implementation only handles such situations when, as
in the example, they appear in relation to the exit condition
of a loop. For this, we apply BitBlaze’s implementation
of loop-extended symbolic execution [28], obtained from
its authors. No other negative implicit ﬂows caused under-
tainting in our examples, but in the future we plan to extend
our implementation to handle more negative implicit ﬂows,
at least in the most common cases without nested branches,
arrays, or indirection.
Limitations of a dynamic approach. Unlike static anal-
ysis on either source code or a program binary, dynamic ap-
proaches can only diagnose under-tainting problems present
in the instances of program execution that we observe. That
is, the dynamic approaches cannot explore all the possi-
ble execution paths in the program, leaving unseen under-
tainting problems. However, static approaches are often
limited by the complexity of possible program states and
path constraints.
We believe that a dynamic approach, based on test cases
that exercise code that can suffer from under-tainting, is
practical in this domain. This is because there are rela-
tively few code locations responsible for under-tainting, and
under-tainting is caused by the structure of the code so that
complex prerequisite conditions are not required to trigger
it. These intuitions are supported by our case studies so far.
Another possibility would be to apply test-generation tech-
niques to this problem: for instance, we could use symbolic
execution or other techniques to automatically explore new
paths and check them for under-tainting.
Forward vs. backward approaches. Our diagnosis tech-
nique is based on taint propagation information originated
from input data, so, in some sense, it is a kind of forward
slicing on the execution traces. However, since we can take
the whole execution trace and know which part of the output
data should be tainted, it would also be possible to reverse
the process. When we ﬁnd an untainted output byte that
we expected to be tainted, we can attempt backward slicing
from the sink to see how it tracks back to the correspond-
ing tainted input data. However, backward slicing would
not solve the problems of implicit ﬂows that motivate this
work. The same program constructs are generally referred
to as control dependencies in the slicing literature, but they
cause the same kinds of difﬁculties there that they do in
tainting: ignoring control dependencies, as is often done in
dynamic slicing, can yield slices that are too small, while
including all control dependencies, as is common in static
slicing, often yields slices that are too big. The best way
to reconcile these tradeoffs is also the subject of research
in slicing, yielding approaches such as “thin slicing” [32].
On a more practical level, a key advantage for us of forward
rather than backward analysis is that forward taint propaga-
tion can be performed at the same time as the original for-
ward execution, so our execution traces only must record
tainted instructions. Backward slicing would require com-
plete execution traces which would be much bigger: more
than 1GB in some of our examples.
Malicious software components. Although we evaluated
our technique only with benign applications, implicit ﬂows
in malicious software components can cause under-tainting.
For instance, such under-tainting could affect the use of
malware analysis platforms such as Panorama [37]. How-
ever these problems are harder to solve, since malware writ-
ers can deliberately generate and embed lots of conditional
branches, invoking implicit ﬂows of tainted input data. At
a minimum, this means that by violating our assumption
that implicit ﬂows are relatively rare, an adversarial pro-
gram author could make the techniques we present here be
impractically slow. Other features of our current implemen-
tation could also be exploited to create false positive or false
negative errors. To our knowledge these evasion techniques
have not yet been seen in the wild, but we expect they would
not be terribly difﬁcult to implement if malware authors felt
they were needed. At a minimum, this suggests that such
systems should have a distinction between software com-
ponents into those that are known benign, and those that
might be malicious. Systems should then apply different
and more conservative taint propagation policies to the po-
tentially malicious components.
8. Conclusion
We have presented DTA++, an enhancement to dynamic
taint analysis that additionally propagates taint along a tar-
geted subset of control-ﬂow dependencies. DTA++ allows
dynamic taint analysis to avoid under-tainting when implicit
ﬂows occur in data transformations. By diagnosing culprit
implicit ﬂows and performing additional propagation only
within information-preserving transformations, DTA++ re-
solves under-tainting without causing over-tainting. We
have shown how our implementation of DTA++ applies to
off-the-shelf Windows binaries. In a case study of 8 appli-
cations, DTA++ prevented under-tainting that would other-
wise have given incorrect results, while introducing orders
of magnitude less taint than when propagating taint for all
implicit ﬂows as in previous systems such as DYTAN [10].
Acknowledgments
The authors are grateful to Kevin Chen, Daniel Reynaud,
and Aravind Iyer for their suggestions in improving the pre-
sentation of this paper.
This work was performed while Min Gyung Kang and
Pongsin Poosankam were visiting student researchers at UC
Berkeley. This material is based upon work partially sup-
ported by the National Science Foundation under Grants
No. 0311808, No. 0448452, No. 0627511, and CCF-
0424422, by the Air Force Ofﬁce of Scientiﬁc Research un-
der Grant No. 22178970-4170, by the Army Research Of-
ﬁce under grant DAAD19-02-1-0389, and by the Ofﬁce of
Naval Research under MURI Grant No. N000140911081.
Any opinions, ﬁndings, and conclusions or recommenda-
tions expressed in this material are those of the authors and
do not necessarily reﬂect the views of the National Science
Foundation, the Air Force Ofﬁce of Scientiﬁc Research, the
Army Research Ofﬁce, or the Ofﬁce of Naval Research.
References
[1] The IDA Pro disassembler and debugger. http://www.hex-
rays.com/idapro/.
[2] Abiword. http://www.abisource.com/.
[3] Angel Writer.
http://www.angelicsoftware.
com/en/angel-writer.html.
[4] Aurel RTF Editor.
http://sites.google.com/
site/aurelwwiz/aurelsoft.
[5] T. Bao, Y. Zheng, Z. Lin, X. Zhang, and D. Xu. Strict con-
trol dependence and its effect on dynamic information ﬂow
analyses. In International Symposium on Software Testing
and Analysis (ISSTA), pages 13–24, Trento, Italy, July 2010.
[6] BitBlaze: Binary analysis for computer security. http:
//bitblaze.cs.berkeley.edu/.
[7] L. Cavallaro, P. Saxena, and R. Sekar. On the limits of in-
formation ﬂow techniques for malware analysis and contain-
ment. In Detection of Intrusions and Malware and Vulnera-
bility Assessment (DIMVA), Paris, France, July 2008.
[8] J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and
M. Rosenblum. Understanding data lifetime via whole sys-
tem simulation.
In USENIX Security Symposium, pages
321–336, San Diego, CA, USA, 2004.
[9] A. Cimatti, A. Griggio, and R. Sebastiani. A simple and
ﬂexible way of computing small unsatisﬁable cores in SAT
modulo theories. In Theory and Applications of Satisﬁability
Testing (SAT), pages 334–339, Lisbon, Portugal, May 2007.
[10] J. Clause, W. Li, and R. Orso. Dytan: A generic dynamic
taint analysis framework.
In International Symposium on
Software Testing and Analysis (ISSTA), pages 196–206, Lon-
don, UK, July 2007.
[11] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou,
L. Zhang, and P. Barham. Vigilante: end-to-end contain-
ment of internet worms. In Symposium on Operating Sys-
tems Principles (SOSP), pages 133–147, Brighton, United
Kingdom, Oct. 2005.
[12] J. R. Crandall and Z. Su. On deriving unknown vulnera-
bilities from zero-day polymorphic and metamorphic worm
exploits. In Computer and Communications Security (CCS),
pages 235–248, Alexandria, VA, USA, Nov. 2005.
[13] Crypt
Edit.
http://download.cnet.com/
Crypt-Edit/3000-2079_4-10064884.html.
[14] D. E. R. Denning. Secure Information Flow in Computer
Systems. PhD thesis, Purdue University, May 1975.
[15] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dy-
namic spyware analysis. In USENIX Annual Technical Con-
ference, pages 1–14, Santa Clara, CA, USA, June 2007.
[16] A. Ermolinskiy, S. Katti, S. Shenker, L. Fowler, and
M. McCauley.
Unpub-
lished manuscript, http://www.cs.berkeley.edu/
˜andreye/pdc_submission.pdf, Nov. 2009.
Practical data conﬁnement.
[17] A. Ermolinskiy, S. Katti, S. Shenker, L. Fowler, and M. Mc-
Cauley. Towards practical taint tracking. Technical Report
UCB/EECS-2010-92, EECS Department, University of Cal-
ifornia, Berkeley, June 2010.
[18] J. S. Fenton. Information Protection Systems. PhD thesis,
University of Cambridge, Cambridge, UK, 1973.
[19] V. Ganesh and D. L. Dill. A decision procedure for bit-
vectors and arrays. In Computer Aided Veriﬁcation (CAV),
Berlin, Germany, July 2007.
[20] IntelliEdit. http://www.flashpeak.com/inted/
inted.htm.
[21] S. McCamant and M. D. Ernst. Quantitative information
ﬂow as network ﬂow capacity.
In Progamming Language
Design and Implementation (PLDI), pages 193–205, Tuc-
son, AZ, USA, June 2008.
[22] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple ex-
ecution paths for malware analysis. In IEEE Symposium on
Security and Privacy, pages 231–245, Oakland, CA, USA,
May 2007.
[23] Microsoft Word 2003.
http://msdn.microsoft.
com/en-us/office/aa905483.aspx.
[24] S. S. Muchnick. Advanced Compiler Design and Implemen-
tation. Morgan Kaufmann, 1997.
[25] F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vi-
gna. Cross-site scripting prevention with dynamic data taint-
ing and static analysis. In Network and Distributed System
Security Symposium (NDSS), San Diego, CA, USA, Feb.
2007.
[26] J. Newsome and D. X. Song. Dynamic taint analysis for au-
tomatic detection, analysis, and signaturegeneration of ex-
ploits on commodity software. In Network and Distributed
System Security Symposium (NDSS), San Diego, CA, USA,
Feb. 2005.
[27] Rich text
version 1.6.
format
(RTF)
speciﬁcation,
http://msdn.microsoft.com/en-us/
library/aa140280(office.10).aspx.
[28] P. Saxena, P. Poosankam, S. McCamant, and D. Song. Loop-
extended symbolic execution on binary programs. In Inter-
national Symposium on Software Testing and Analysis (IS-
STA), Chicago, IL, July 2009.
[29] E. J. Schwartz, T. Avgerinos, and D. Brumley. All you ever
wanted to know about dynamic taint analysis and forward
symbolic execution (but might have been afraid to ask). In
IEEE Symposium on Security and Privacy, Oakland, CA,
USA, May 2010.
[30] A. Slowinska and H. Bos. Pointless tainting?: evaluating
the practicality of pointer tainting. In European Conference
on Computer Systems (EuroSys), pages 61–74, Nuremberg,
Germany, Apr. 2009.
[31] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G.
Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena.
BitBlaze: A new approach to computer security via binary
analysis (keynote invited paper).
In International Confer-
ence on Information Systems Security (ICISS), Hyderabad,
India, Dec. 2008.
[32] M. Sridharan, S. J. Fink, and R. Bodik. Thin slicing.
In
Progamming Language Design and Implementation (PLDI),
pages 112–122, San Diego, CA, USA, June 2007.
[33] E. Stinson and J. C. Mitchell. Characterizing bots’ re-
mote control behavior. In Detection of Intrusions and Mal-
ware, and Vulnerability Assessment (DIMVA), pages 89–
108, Lucerne, Switzerland, July 2007.
[34] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure
program execution via dynamic information ﬂow tracking.
In Architectural Support for Programming Languages and
Operating Systems (ASPLOS), pages 85–96, Boston, MA,
USA, Oct. 2004.
[35] Wordpad.
http://windows.microsoft.com/
en-US/windows-vista/Using-WordPad.
[36] H. Yin, Z. Liang, and D. Song. Hookﬁnder: Identifying and
understanding malware hooking behaviors. In Network and
Distributed System Security Symposium (NDSS), San Diego,
CA, USA, Feb. 2008.
[37] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda.
Panorama: Capturing system-wide information ﬂow for
malware detection and analysis. In Computer and Commu-
nication Security (CCS), Alexandria, VA, USA, Oct. 2007.