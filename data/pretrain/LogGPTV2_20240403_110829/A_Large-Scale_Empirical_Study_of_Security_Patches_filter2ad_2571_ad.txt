than a week before public disclosure, giving attackers ample time
to develop and deploy exploits.
−104−103−102−101−1000100101102103104(Patch Commit Date - Estimated Public Disclosure Date) in Days (Log-Scaled)0.00.20.40.60.81.0CDFPer Repo MinimumPer Repo MedianPer Repo MaximumAll CVEs100101102103(Patch Commit Date - Estimated Public Disclosure Date) in Days (Log-Scaled)0.10.20.30.40.50.60.70.80.91.0CDFHigh SeverityMedium SeverityLow SeveritySession J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2209Are higher severity vulnerabilities patched quicker? All vul-
nerabilities are not equal, as they vary in exploitation complexity
and requirements, as well as security impact. One might expect
these factors to affect the patch development process, as developers
may prioritize fixing certain vulnerabilities over others. To explore
whether a vulnerability’s severity (scored using CVSS) affects patch
timeliness behavior, we cluster CVEs by their severity categories
(low, medium, and high). We find that severity significantly af-
fects whether a fix is developed before or after public disclosure.
88.1% of high severity CVEs were patched prior to public announce-
ments, compared to 78.2% of medium severity bugs and 58.8% of low
severity issues. These differences indicate that project developers
prioritize higher impact vulnerabilities when determining if and
when to address them.
While one might also expect earlier disclosures for more severe
vulnerabilities, we observe no significant differences (p > 0.12)
across severity categories when investigating the time by which
a patch precedes disclosure (for vulnerabilities fixed by disclosure
time). This fits with the common model used by many open-source
projects of rolling security patches (of all severity levels) into re-
current releases and announcements. When exploring the time
after disclosure until patching (for vulnerabilities unpatched at
disclosure), we find that highly severe vulnerabilities get patched
more quickly, as shown in Figure 9. This difference is significant
(p < 0.013), indicating project developers respond quicker to more
serious disclosed-yet-unpatched vulnerabilities.
5.1.3 Patch Reliability. The patch a developer creates to address
a vulnerability may unfortunately disrupt existing code functional-
ity or introduce new errors. Beyond the direct problems that arise
from such patches, end user trust in generally applying patches (or
in the software itself) can erode. To assess how successful develop-
ers are at producing reliable and safe security fixes, we attempted
to identify instances of multiple commits for the same CVE, and
classify the causes.
How frequently are security patches broken (e.g., incom-
plete or regressive)? In total, 11.5% of CVEs had multiple as-
sociated commits for a single repository in the NVD data. However,
if an initial patch introduced an error or was incomplete, the NVD
entry might not have been updated with the follow-on fix. After
the NVD entry is published, NVD analysts are unlikely to continue
tracking a CVE unless new updates are reported to them. Thus, we
attempted to identify further commits that may be associated with
a CVE using repository Git logs.
For each security patch commit and its commit hash H, we
searched the repository’s Git log for any other commits that had
a commit message including the CVE ID or the 7-character prefix
of the commit hash. We considered this prefix as it is used as the
Git short version of the commit hash, and matches any longer hash
prefixes. This method finds related commits which were not distinct
patches, such as merge, rebase, and cherry-pick commits. To filter
these, we ignored commits with diffs identical to an earlier one, and
commits with multiple parents (e.g., merges). Note that we could
only identify multiple patches when commit messages contained
this explicit linkage, so our analysis provides a lower bound.
Using this approach, we identified a total of 682 CVEs with
multiple commits, 22.0% of all CVEs. Not all multi-commit fixes are
CVE
Commits
Label
Num.
CVEs
Median
Num.
Follow-On
Commits
Incomplete
Regressive
Benign
26 (52%)
17 (34%)
14 (28%)
1.0
1.0
1.5
Median Fix
Inter-Arrival
Time
181.5 Days
33.0 Days
118.5 Days
Table 4: Summary of our manual investigation into 50 ran-
domly sampled CVEs with multiple commits. Note that a
CVE may have commits in multiple categories. Follow-on
commits include all commits associated with the original
patch.
necessarily problematic though, as project developers may split a
fix into multiple commits that they push to the repository in close
succession. We observed that 242 CVEs had all fixes committed
within 24 hours. Given the limited time window for potential newly
introduced problems, we designate these as piecewise fixes and
non-problematic.
We randomly sampled 50 of the remaining 440 CVEs and manu-
ally investigated if the fixes were problematic. Table 4 summarizes
our results. We identified 26 (52%) as incomplete, where the initial
fix did not fully patch the vulnerability, requiring a later patch
to complete the job. We labeled 17 (34%) as regressive, as they in-
troduced new errors that required a later commit to address. The
overlap included 4 CVEs (8%) with both incomplete and regressive
patches. Other follow-on fixes were benign, such as commits for
added documentation, testing, or code cleanup/refactoring. 11 CVEs
(22%) had only these benign additional commits (although 3 other
CVEs had both benign and problematic commits). Note that our
random sample was not biased towards any particular project, as it
spanned 42 repositories.
Extrapolating from the random sample to the remaining
440 CVEs with non-piecewise multiple commits (accounting for
14.2% of all CVEs), we estimate that about 7% of all security fixes
may be incomplete, and about 5% regressive. These findings indicate
that broken patches occur unfortunately frequently, and applying
security patches comes with non-negligible risks. In addition, these
numbers have a skew towards underestimation: we may not have
identified all existing problematic patches, and recent patches in
our dataset might not have had enough time yet to manifest as
ultimately requiring multiple commits.
We note that our observed frequency of failed security fixes is
similar to or lower than that observed by prior studies on general
bug fixes. Gu et al. [17] observed that 9% of bug fixes were bad
across three Java projects while Yin et al. [40] found that between
15%–25% of general bug patches for several Linux variants were
problematic. As our detection of problematic security fixes skews
towards underestimation, it is undetermined whether security fixes
are more or less risky than other bug fixes. However, it is clear that
security patches do suffer failures similarly to non-security bug
fixes.
How long do problematic patches remain unresolved? As
shown in Table 4, for both incomplete and regressive patches in our
sample, we find the median number of additional patches required
to rectify the original broken patches to be only one commit. The
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2210disclosure vulnerabilities. Similarly, the fix for CVE-2016-3693 in-
volved changing a project library dependency to a new version,
as the inclusion of the older versions allowed attackers to access
sensitive system information.
Thus, bug fixes are not exclusively associated with source code
modifications, although this is significantly more likely with non-
security bug fixes than with security patches. For further analysis on
commit characteristics, we focus on the cleaned versions, excluding
the commits that did not modify code.
5.2.2 Patch Complexity. How complex are security patches com-
pared to other non-security bug fixes? We can assess software com-
plexity using various metrics, although some, such as cyclomatic
complexity [22], require deep analysis of a code base. Given the
number and diversity of software projects we consider, we chose
lines of code (LOC) as a simple-albeit-rudimentary metric, as done
in prior studies [18, 26, 33, 41].
Are security patches smaller than non-security bug fixes?
In Figure 10, we plot the CDFs of the total LOC changed in cleaned
commit diffs, for all security and non-security patches, as well as the
median security fix per repository. This conservative metric sums
the LOC deleted or modified in the pre-commit code with those
modified or added post commit, providing an upper bound on the
degree of change. We see that compared to per-repository medians,
the aggregate of security commits skews towards fewer total LOC
changed. Under this metric, security commits overall are statisti-
cally significantly less complex and smaller than non-security bug
patches (p ≈ 0). The median security commit diff involved 7 LOC
compared to 16 LOC for non-security bug fixes. Approximately 20%
of non-security patches had diffs with over 100 lines changed, while
this occurred in only 6% of security commits. When considering
per-repository medians, our conclusions differ only slightly, in that
non-security bug fixes have a slightly larger portion of very small
commits with diffs less than 9 LOC, but are typically larger.
Do security patches make fewer “logical” changes than non-
security bug fixes? As an alternative to our raw LOC metric,
we can group consecutive lines changed by a commit as a single
“logical” change. Under this definition, several lines updated are
considered a single logical update, and a chunk of deleted code
counts as a single logical delete. We depict the CDFs of the number
of logical actions per commit in Figure 11, although we omit a plot
for logical updates as it closely resembles that of all logical changes.
In all cases, we observe that per-repository medians skew less
towards very small numbers of logical actions compared to security
commits in aggregate. Across all logical actions, we observe that
security commits involve significantly fewer changes (all p < 0.01).
Nearly 78% of security commits did not delete any code, compared
to 66% of non-security bug-fix commits. Between 30% to 40% of
all commits also did not add any code, indicating the majority of
logical changes were updates.
Do security patches change code base sizes less than non-
security bug fixes? Another metric for a patch’s complexity is
its impact on the code base size. The net number of lines changed
by a commit reflects the growth or decline in the associated code
base’s size. In Figure 12, we plot the CDFs of these size changes.
We observe that significantly more non-security bug patches result
Figure 10: CDFs of the total number of line changes, for all
security and non-security bug fixes, and the median of secu-
rity commits grouped by repository.
typical incomplete fix takes half a year to remedy, and patches
problematic enough to require reverting typically take a month to
repair. Thus, problematic security patches can remain unresolved
for extensive durations of time.
5.2 Patch Characteristics
While numerous works have investigated general software
patches [29, 33, 34, 42], few have considered what distinguishes
security patches from other non-security bug fixes. Intuitively, the
software conditions resulting, for example, in buffer overflow and
SQL injection vulnerabilities can differ greatly from those that
produce performance and concurrency bugs. Thus, the character-
istics of their fixes may likewise prove different. Indeed, Zama et
al. [41] conducted a case study on security and performance fixes
for Mozilla Firefox, observing differences in the remediation for the
two bug types. These characteristics are important to understand
as they may reflect our ability to expeditiously generate patches,
verify their safety, or assess their impact on applications. Here, we
compare our collection of security and non-security bug fixes to
help illuminate their differences, considering facets such as the
complexity of fixes and the locality of changes.
5.2.1 Non-Source Code Changes. Do security and non-
security bug fixes always modify source code? Given the na-
ture of bug fixes, one might expect them to universally involve
source code changes. We explore this hypothesis by contrasting our
commit data with their cleaned versions (source code comments
and non-source code files removed). We find that the hypothe-
sis does not hold: a non-trivial fraction of commits involved no
code changes. For non-security bug fixes, 6.1% involved erroneous
configurations, build scripts with broken dependencies or settings,
incorrect documentation, and other non-source code changes.
More surprising, we find that 1.3% of security fixes also did not
touch source code. In some cases, the commit added a patch file to
the repository without applying the patch to the code base. How-
ever, numerous CVE vulnerabilities do not reside in the source code.
For example, CVE-2016-7420 was assigned to the Crypto++ Library
for not documenting the security-related compile-time require-
ments, such that default production builds may suffer information
100101102103Total Number of Line Changes (Log-Scaled)0.00.20.40.60.81.0CDFSecurity FixesMedian Per RepoSecurity FixesBug FixesSession J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2211(a) All Logical Changes
(b) Logical Deletes
(c) Logical Additions
Figure 11: CDFs of the number of logical changes introduced by a commit, for all security and non-security bug fixes, and for
the median amongst security commits grouped by repository. We omit a plot for logical updates, which looks very similar to
that for all logical changes because logical updates predominate. Note the varying minimum y-axis values.
Figure 12: CDFs of the net number of line changes, for all se-
curity and non-security patches, and the median of security
commits grouped by repository.
Figure 13: CDFs of the number of files affected, for all secu-
rity and non-security bug fixes, and the median of security
fixes grouped by repository.
in a net reduction in project LOC, compared to security fixes: 18%
of non-security bug fixes reduced code base sizes compared to
9% of security patches. For all commits, approximately a quarter
resulted in no net change in project LOC, which commonly occurs
when lines are only updated. Overall, projects are more likely to
grow in size with commits, as the majority of all commits added to
the code base. However, security commits tend to contribute less
growth compared to non-security bug fixes, an observation that
accords with our earlier results.
These findings support the notion that security fixes are gener-
ally less complex than other bug fixes. We note that this generalizes
the same conclusion drawn for Mozilla Firefox by Zama et al. [41].
5.2.3 Commit Locality. Finally, we can quantify the impact of a
patch by its locality. We consider two metrics: the number of files
affected and the number of functions affected.
Do security patches affect fewer source code files than non-
security bug fixes? Figure 13 illustrates the CDFs of the number
of files touched by fixes. From this, we see that security patches
modify fewer files compared to non-security bug fixes, a statisti-
cally significant observation (p ≈ 0). In aggregate, 70% of security
patches affected one file, while 55% of non-security bug patches
were equivalently localized. Fixes typically updated, rather than
created or deleted, files. Only 4% of security fixes created new files
(vs. 13% of non-security bug fixes), and only 0.5% of security patches
deleted a file (vs. 4% of non-security bug fixes).
Do security patches affect fewer functions than non-
security bug fixes? To pinpoint the functions altered by patches,
we used the ctags utility [4] to identify the start of functions in
our source code. We determined the end of each function under
the scoping rules of the corresponding programming language,
and mapped line changes in our commit diffs to the functions they
transformed. Figure 14 shows the CDFs of the number of functions
affected by patches. We find that 5% of non-security bug fixes
affected only global code outside of function boundaries, compared
to 1% of security patches. Overall, we observe a similar trend as
with the number of affected files. Security patches are significantly
(p ≈ 0) more localized across functions: 59% of security changes
resided in a single function, compared to 42% of other bug fixes.
In summary, our metrics indicate that security fixes are more
localized in their changes than other bug fixes.
100101102103Number of Logical Code Changes(Log-Scaled)0.20.40.60.81.0CDFSecurity FixesMedian Per RepoSecurity FixesBug Fixes0100101102Number of Logical Code Deletions(Log-Scaled)0.60.70.80.91.0CDFSecurity FixesMedian Per RepoSecurity FixesBug Fixes0100101102Number of Logical Code Additions(Log-Scaled)0.20.40.60.81.0CDFSecurity FixesMedian Per RepoSecurity FixesBug Fixes−103−102−101−1000100101102103Net Number of Line Changes (Log-Scaled)0.00.20.40.60.81.0CDFSecurity FixesMedian Per RepoSecurity FixesBug Fixes100101102Total Number of Files Affected (Log-Scaled)0.50.60.70.80.91.0CDFSecurity FixesMedian Per RepoSecurity FixesBug FixesSession J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2212their testing processes by using existing tools more extensively. For
example, sanitizers such as ASan [15], TSan [15] and UBSan [9] help
detect various errors that may result in security bugs. Fuzzers (such
as AFL [1]) also assist in identifying inputs that trigger potentially
exploitable issues.
The transparency of open-source projects makes them ripe for
such testing not only by the developers, but by external researchers
and auditors as well. Community-driven initiatives, such as those
supported by the Core Infrastructure Initiative [3], have already
demonstrated that they can significantly improve the security
of open-source software. For example, the Open Crypto Audit
Project [8] audited the popular encryption software TrueCrypt,
while Google’s OSS-Fuzz program [16] offers continuous fuzzing of
critical open-source infrastructure for free, already discovering and
reporting hundreds of bugs. Further support of such efforts, and
more engagement between various project contributors and exter-
nal researchers, can help better secure the open-source ecosystem.
Need for refined bug reporting and public disclosure pro-
cesses for open-source projects: Our analysis of the timeliness
of security fixes revealed that they are poorly timed with vulnera-
bility public disclosures. Over 20% of CVEs were unpatched when
they were first announced, perhaps sometimes to the surprise of
project developers. While we observed that these were more likely
to be low-severity vulnerabilities, many were still medium- and
high-severity bugs, unfixed for days to weeks post-disclosure. This