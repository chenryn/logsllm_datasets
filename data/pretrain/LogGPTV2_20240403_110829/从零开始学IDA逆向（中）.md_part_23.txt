可以发现 0x4 偏移处的字段是根据执行的操作发生变化的，对于每一种操
作都有不同的定义。
而需要寻找的IOCTL code只是在上个例子中第二次调用DeviceIoCon
trol时使用，所以就是Parameters中的0x08字段，对于那个例子这就是I
OCTL code。如果从_IO_STACK_LOCATION结构体起点来算的话就是0xC字
段，毕竟Parameters之前还有0x4个字节。
再回到WDK查看这个结构体的定义。
图 53-9 _IO_STACK_LOCATION
393
从零开始学IDA逆向 53 IRP结构体
这和windbg中的结果是一致的。前面这部分是固定的，而union这部分
意味着接下来的部分是根据执行的编码进行变化的，根据程序是在调用Create
fIle、ReadFile等等会有不同的值，那么重要的就是DeviceIoControl读
取的时机，因为这是传递IOCTL的字段。
图 53-10 DeviceIoControl结构体
图 53-10中就是DeviceIoControl结构体，IoControlCode的类型
是ULONG，也就是4个字节。那么完整的就是
图 53-11 _IO_STACK_LOCATION
图 53-12 dt _IO_STACK_LOCATION
394
从零开始学IDA逆向 53 IRP结构体
Parameters 前面的字段是 4 个 UCHAR，每个是一个字节，所以 Parame
ters结构体的偏移是0x4，这和windbg的结果是一致的。
所以从_IO_STACK_LOCATION的起点计算，0x4就是DeviceIoContro
l 的第一个字段 OutputBufferLenght，0x8 就是 InputBufferLenght，
0xC就是IOCTL或者说IOControlCode。
53.2 调试分析
这与反汇编的结果也是一致的，因为IRP + 0x60就是_IO_STACK_LOCA
TION结构体的起点。如图 53-13，读取了该处的值。
图 53-13 读取IRP + 0x60
395
从零开始学IDA逆向 53 IRP结构体
图 53-14 转换为字段
程序将 MajorFunction 字段存入 EAX，因为这里只读取了一个字节，而
且就是这个字段。
图 53-15 MajorFunction
再查看这个值的来源。
396
从零开始学IDA逆向 53 IRP结构体
图 53-16 IRP major function code
那么第一次调用createFile时，它的值是0x0，第二次使用DeviceIo
Control时，它的值是0xE，第三次调用CloseHandle时它的值是0x02。
由于这是第一次暂停，也就是调用createFile，EAX的值就是0x0。
图 53-17 EAX=0
继续运行，直到再次触发这个断点，现在MajorFuncion的值是0xe。
图 53-18 EAX=0xE
按T键显示为字段，那么在偏移0xC处的IOCTL如图 53-19。
这里有很多的选项，例如Create、Read等等。作者寻找DeviceIoCont
rol，那么字段就是IoControlCode。
397
从零开始学IDA逆向 53 IRP结构体
图 53-19 转换为字段
图 53-20 比较IOCTL
所以目前的分析是正确的，只有MajorFunction的值是0xE的时候程序
才会运行至输出“Hello World”，而MajorFunction的值是其它值时，不
会运行到该处。
在程序的另一部分也会读取0xC字段，当它使用其它MajorFunction时，
通过T键来选择对应的操作，然后根据具体操作内容进行逆向分析。
398
从零开始学IDA逆向 54 利用Python脚本与驱动交互
54 利用 Python 脚本与驱动交互
54.1 PsSetCreateProcessNotifyRoutine函数
本章主要是在上一个练习的基础上进行一些修改，并且直接使用Python编
写一个小的用户应用程序。
为了完成这个练习，需要在目标机器也就是驱动程序运行的系统当中安装P
ython，作者安装了Python 2.7。同时也下载了pywin32安装程序，读者需
要根据自己的Python版本选择对应的pywin32。
https://sourceforge.net/projects/pywin32/files/pywin32
/Build%20214/
由于作者使用Python 2.7，所以下载的是：
图 54-1 pywin32安装程序
下载好安装程序后运行，作者打算使用 Python 脚本来代替之前的用户应
用程序。
399
从零开始学IDA逆向 54 利用Python脚本与驱动交互
图 54-2 IOCTL codes
现在驱动增加了2个新的IOCTL codes。
除了之前已经存在的IOCTL_SAYHELLO，新增的2个IOCTL codes分别
是IOCTL_HOOK和IOCTL_UNHOOK。
图 54-3 代码中新增的IOCTL codes
图 54-3中，在MajorFunction的值为IRP_MJ_DEVICE_CONTROL时，
又内嵌了一个switch语句，分别对应这3个IOCTL codes。
首先是之前的输出“Hello World”的IOCTL code。
case IOCTL_SAYHELLO:
DbgPrint("Hello World!\n");
status = STATUS_SUCCESS;
break;
400
从零开始学IDA逆向 54 利用Python脚本与驱动交互
接下来是其它2个：
case IOCTL_HOOK:
PsSetCreateProcessNotifyRoutine(DriverProcessNotifyRoutine,
FALSE);
break;
case IOCTL_UNHOOK:
PsSetCreateProcessNotifyRoutine(DriverProcessNotifyRoutine,
TRUE);
break;
代码中调用了PsSetCreateProcessNotifyRoutine函数。
图 54-4 PsSetCreateProcessNotifyRoutine函数
这个函数允许驱动程序向系统通知函数清单中添加一个自己的回调函数，这
样系统每一次启动或者停止一个程序时都会触发这个函数。第二参数如果是 FA
LSE就是激活这个回调函数，而第一个参数就是回调的函数。
回调函数的名称是 DriverProcessNotifyRoutine，这个函数会在 Cr
eate 为真值时，输出创建了一个新进程的消息，并且输出父进程和子进程的 P
ID。
VOID DriverProcessNotifyRoutine(IN HANDLE ParentId,
IN HANDLE ProcessId,IN BOOLEAN Create)
{
if (Create)
{
401
从零开始学IDA逆向 54 利用Python脚本与驱动交互
DbgPrint("Process %d created process %d\n",ParentId, Proces
sId);
}
else
{
DbgPrint("Process %d has ended\n",ProcessId);
}
}
那么当进程结束时，Create 值为 FALSE，函数输出进程的 PID 以及结束
的消息。
当然，在停止这个驱动程序之前需要解绑这个回调函数，否则驱动不运行的
时候会跳转到一个不存在的函数，这会导致蓝屏死机。
case IOCTL_UNHOOK:
PsSetCreateProcessNotifyRoutine(riverProcessNotifyRoutine, TRU
E);
break;
第二个参数设置为True的话就会解绑回调函数，系统就恢复正常了。
54.2 脚本内容
附件中提供了驱动程序的源代码，如果读者使用Visual Studio 自行编
译的话不要忘记将目标系统设置为Windows 7，同时将警报水平从4降低到1
或者2。
402
从零开始学IDA逆向 54 利用Python脚本与驱动交互
图 54-5 测试脚本
接下来的Python脚本会在驱动运行时将IOCTLs发送给驱动。
这个是比较短的脚本。首先需要导入 win32api、win32file 以及 wini
octlcon 模块，这些都在安装 pywin32 时一并安装。如果没有安装的话会报
错。
IOCTL_HOOK =winioctlcon.CTL_CODE( FILE_DEVICE_HELLOWORLD, 0x01, ME
THOD_BUFFERED, FILE_ANY_ACCESS )
IOCTL_UNHOOK =winioctlcon.CTL_CODE( FILE_DEVICE_HELLOWORLD, 0x02,
METHOD_BUFFERED, FILE_ANY_ACCESS )
IOCTL_SAYHELLO=winioctlcon.CTL_CODE( FILE_DEVICE_HELLOWORLD, 0x00,
METHOD_BUFFERED, FILE_ANY_ACCESS )
在这里同样发现了编写C++可执行程序时查找IOCTL时使用的CTL_CODE
函数，这个函数通过winioctlcon模块导出，这里也是通过这个函数查找那3
个IOCTL。
然后调用了CreateFile。
hDevice = win32file.CreateFile(r"\\.\HelloWorld",win32file.GENERIC
_READ | win32file.GENERIC_WRITE, 0, None,win32file.OPEN_EXISTING,
win32file.FILE_ATTRIBUTE_NORMAL, 0)
在这里必须在驱动名称中使用单右划线，而其余的参数是类似的，都是 wi
n32file模块中定义的一些常量。
然后在调用 DeviceIoControl 之前，脚本请求用户输入，并且根据输入
内容发送对应的IOCTL，在退出循环前必须输入0，防止蓝屏。
while 1:
print "1=HELLO\n","2=HOOK\n","3=UNHOOK\n","0=UNHOOK AND EXIT\n"
case=raw_input()
if case ==0:
break
if case==1:
win32file.DeviceIoControl(hDevice,IOCTL_SAYHELLO, None, Non
e, None)
403
从零开始学IDA逆向 54 利用Python脚本与驱动交互
if case == 2:
win32file.DeviceIoControl(hDevice,IOCTL_HOOK, None, None, N
one)
if case == 3:
win32file.DeviceIoControl(hDevice,IOCTL_UNHOOK, None, None,
None)
win32file.DeviceIoControl(hDevice,IOCTL_UNHOOK, None, None, None)
win32file.CloseHandle(hDevice)
54.3 运行脚本
那么通过这个脚本就可通过不同的 IOCTL codes 来操纵驱动。下面进行
测试。
图 54-6 启动驱动
404
从零开始学IDA逆向 54 利用Python脚本与驱动交互
图 54-7 请求输入
启动调试目标系统，然后使用OSRLOADER启动驱动，然后使用Python脚
本查看运行效果。
输出驱动句柄之后，是输入选项。
按1之后没有反应，出了什么问题？
case=raw_input()
1
case
type(case)
Out[6]: str
因为raw_input返回的是字符串，而比较的对象是数字，修改下脚本。
图 54-8 修改脚本
405
从零开始学IDA逆向 54 利用Python脚本与驱动交互
图 54-9 重新启动
重新测试。
按1键驱动输出“Hello World”。按2键查看效果。
图 54-10 按2键
在目标机器上启动一些程序。
图 54-11 执行回调函数
可以看到这些进程启动和停止的记录。在作者这里启动Internet explo
406
从零开始学IDA逆向 54 利用Python脚本与驱动交互
rer。
图 54-12 Internet explorer PID
图中 IE 进程的 PID 是 4084，而双击启动的话它的父进程就是 Explore
r。在该机器上启动或者停止的所有进程都会记录下来，现在作者关闭IE。
图 54-13 关闭IE
所以这个脚本起作用了，然后选择选项3，现在起所有启动和停止的进程就
都不会有记录了。
54.4 逆向分析
现在进行逆向分析，当然和之前的例子也差不多。
407
从零开始学IDA逆向 54 利用Python脚本与驱动交互
图 54-14 MajorFunction
在Dispatch中，EDI的值就是IRP结构体0x60偏移的内容，也就是_I
O_STACK_LOCATION结构体的地址，在该处设置一个断点，如果将LOCAL TY
PES中相应的结构体导入进来的话，这个字段就是MajorFunction。
在这里 MajorFunction 的值为 0xE，也就是正在使用 DeviceIoContr
ol，按T键显示字段选项，选择DeviceIoControl对应的项。
图 54-15 DeviceIoControl
图 54-16 Hello World
408
从零开始学IDA逆向 54 利用Python脚本与驱动交互
所以当code值为IOCTL_SAYHELLO，就会跳转到黄色代码块，输出Hel
lo World，在其他两种情况中就运行绿色代码块，当code值为IOCTL_HOOK
时，PUSH ESI中的值为0，也就是PsSetCreateProcessNotifyRoutine
@ 8的第二个参数为false，而code值为IOCTL_UNHOOK，PUSH 1也就是
参数为true。
另一个参数就是回调函数的地址。
图 54-17 回调函数
点击跳转。
图 54-18 回调函数
如果Create值为false或者说0，那么就输出PROCESS (PID) HAS
ENDED，如果是true，那么输出PROCESS (PID) CREATED PROCESS (PI
D)。
如果在这里设置断点，如果Python脚本中选择2，也就是是HOOK，那么
每次启动一个进程都会停在这里。
作者将这个任务留给读者，在这个函数中设置断点，并且从 Dispatch 部
409
从零开始学IDA逆向 54 利用Python脚本与驱动交互
分追踪运行以验证作者所说的内容。
410