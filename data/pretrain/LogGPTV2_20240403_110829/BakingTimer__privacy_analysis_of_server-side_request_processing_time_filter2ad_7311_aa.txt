title:BakingTimer: privacy analysis of server-side request processing time
author:Iskander S&apos;anchez-Rola and
Davide Balzarotti and
Igor Santos
BakingTimer: Privacy Analysis of
Server-Side Request Processing Time
Iskander Sanchez-Rola
University of Deusto
Symantec Research Labs
Davide Balzarotti
EURECOM
Igor Santos
University of Deusto
ABSTRACT
Cookies were originally introduced as a way to provide state aware-
ness to websites, and are now one of the backbones of the current
web. However, their use is not limited to store the login information
or to save the current state of user browsing. In several cases, third-
party cookies are deliberately used for web tracking, user analytics,
and for online advertisement, with the subsequent privacy loss for
the end users.
However, cookies are not the only technique capable of retrieving
the users’ browsing history. In fact, history sniffing techniques are
capable of tracking the users’ browsing history without relying
on any specific code in a third-party website, but only on code
executed within the visited site. Many sniffing techniques have
been proposed to date, but they usually have several limitations
and they are not able to differentiate between multiple possible
states within the target application.
In this paper we propose BakingTimer, a new history sniffing
technique based on timing the execution of server-side request
processing code. This method is capable of retrieving partial or
complete user browsing history, it does not require any permis-
sion, and it can be performed through both first and third-party
scripts. We studied the impact of our timing side-channel attack to
detect prior visits to websites, and discovered that it was capable
of detecting the users state in more than half of the 10K websites
analyzed, which is the largest test performed to date to test this
type of techniques. We additionally performed a manual analysis
to check the capabilities of the attack to differentiate between three
states: never accessed, accessed and logged in. Moreover, we per-
formed a set of stability tests, to verify that our time measurements
are robust with respect to changes both in the network RTT and in
the servers workload.
CCS CONCEPTS
• Security and privacy → Browser security.
KEYWORDS
user privacy; browser cookies; history sniffing
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359803
ACM Reference Format:
Iskander Sanchez-Rola, Davide Balzarotti, and Igor Santos. 2019. Baking-
Timer: Privacy Analysis of Server-Side Request Processing Time. In 2019
Annual Computer Security Applications Conference (ACSAC ’19), Decem-
ber 9–13, 2019, San Juan, PR, USA. ACM, New York, NY, USA, 11 pages.
https://doi.org/10.1145/3359789.3359803
1 INTRODUCTION
The World Wide Web (WWW) is built on top of the HyperText
Transfer Protocol (HTTP), a stateless request/response protocol
in which each request is executed independently from any other
received before. However, most web applications need to keep
track of the user’s progress from one page to another. For instance,
after a user has successfully logged into a service, she expects
the application to remember her authentication and allow her to
perform other actions in the same website accordingly.
In order to solve this problem, in 1994 Netscape Mosaic intro-
duced the use of Cookies [41]. HTTP cookies are small fragments
of data that servers can send to the users inside their responses (by
using the Set-Cookie header field) or by the use of JavaScript code
executed in a webpage in order create a cookie on the client-side (by
invoking the document.cookie function). Either way, the browser
stores the value of each cookie and includes them in every future
request made to the same server. Today, cookies are used for a
variety of different purposes, including to maintain the users’ login
status, to store different options that a user makes while browsing
a website (such as the language preference or the acceptance/re-
jection of a specific consent), or to simply keep track of previous
visits from the same user.
The cookies we described so far are called first-party cookies,
as they are created by the website the user is visiting. However,
these are not the only cookies that may be created in the browser.
Websites load different types of resources to offer their services
and the requests made to retrieve these resources may also trigger
the creation of cookies. In many cases, these third-party cookies
are used to track users among the different websites they visit. For
instance, several studies have measured that a big percentage of
websites on the Internet perform some form of user tracking [1, 13,
33, 35].
While tracking based on third-party cookies is one of the main
techniques different companies use to offer personalized advertise-
ments, other alternatives exist — for instance based on fingerprint-
ing the browser or the user’s machine by collecting either hardware
or software information [8, 26, 29, 36]. These approaches can com-
pletely bypass all the browser protections regarding basic tracking,
but their fingerprinting code needs to be executed in all the websites
the user visits. Therefore, for websites that are not part of the main
tracking networks, there is another option based on the so-called
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Iskander Sanchez-Rola, Davide Balzarotti, and Igor Santos
history sniffing. History sniffing attacks can track the user without
relying on any code executed in other third-party websites, just the
one executed in the website accessed by the user. While many meth-
ods have been proposed in this line of research [7, 16, 25, 28, 44],
most of them suffer from several severe restrictions. For instance,
previous approaches only provide a coarse-grained classification
(e.g., logged-in vs not logged-in), can be easily defeated by users
without serious side-effects (e.g., by deleting the browser cache),
and were all tested only in a handful of anecdotal cases. As an ex-
ample, the two most recent works in this area, published in 2015 at
the ACM CCS [44] and NDSS [28] conferences, were only evaluated
on, respectively, five and eight target websites.
In this paper, we present a new timing side-channel attack, called
BakingTimer, that only relies on the presence of first party cookies
set by the target websites (which are therefore considered third-
party in the context of the attacker page). Our system is based on
the analysis of the time spent by the server to process a HTTP
request, and by using this information is able to detect both if the
user previously visited the website and whether she is currently
logged in into it.
We then performed a set of experiments to measure how many
websites are vulnerable to this attack. First, we checked if our
methods was able to detect website accesses, and found that our
prototype was able to detect the access in to more than half of the
websites we analyzed. We tested our solution on over 10K websites
belonging to different categories, resulting in the largest evaluation
of a history sniffing technique performed to date. Second, we follow
a similar approach as previous work, and manually tested the login
detection capabilities in a small set of websites.
2 BACKGROUND
To ease the comprehension of our contribution, in this section we
review several aspects regarding current cookie management, as
well as different attacks presented in the literature. We then discuss
the threat model we consider for our history sniffing attacks.
2.1 Browser Cookies
Cookies were introduced by Lou Montulli [38] while working in
Netscape, and are considered the first method to track users on
the Web. Cookies allow services to remember a particular user by
storing snippets of data on the users’ computers, maintaining a
concrete browsing state for a returning visitor. After cookies were
first presented, they were rapidly embraced by the web community
because of their flexibility and the increased usability they enabled
in a broad range of websites. As a result, they are now playing a
core role as part of the Internet technology [33].
While cookies were not specifically designed to track users
across websites, the abuse of their stateful nature started shortly
after their first appearance. Since websites are composed of dif-
ferent resources that may be stored in the same domain hosting
the page as well as in other third-party servers, these external re-
source providers have the capability of including cookies along
with their provided resource. Therefore, if a third-party server
provides resources to a large number of websites, it can certainly
gather an accurate picture of a user’s browsing history and pro-
file her habits. For example, a website site.com includes an im-
age from a third-party domain called advertisement.com. The
server advertisement.com sends the image along with a HTTP
Set-Cookie header, that will be stored on her machine. When the
same user visits another website site-two.com that also utilizes
images from advertisement.com, her browser will send the pre-
viously set cookie to advertisement.com alongside the request
for the image. This allows the advertisement server to recognize
the user and collect a list of the websites she regularly visits. This
behavior, called third-party cookies, is arguably the most widespread
technique for web tracking.
However, even the most privacy-invasive third-party cookies are
an important part of the web. In fact, the most common usage of this
specific type of cookies is web advertisement or analytics. Their web
tracking capability is used to track users’ browsing history and use
this information to build a user profile for custom advertisements.
In fact, advertising companies have already stated that web tracking
is required for the web economy [39]. However, other techniques
exist that can be used for analytics and targeting while preserving
users’ privacy (e.g., [2, 4, 5, 18, 21, 43]).
However, both third-party and first-party cookies are widely
used and browsers even encourage their usage in order to ease
usability. For example, when a user of the well-known Chrome
browser decides to erase all the stored cookies, the browser warns
the user that “This will sign out of most websites”. Even more im-
portant are the settings regarding cookies. Chrome recommends to
enable the permission for websites to read and write cookie data,
and permits to block third-party cookies. Therefore, the importance
of cookies is not only acknowledged by websites, but also by the
browsers themselves albeit the privacy issues that may arise.
Even though it is not a common action among the average web
users, third-party cookies can be blocked (as detailed in Section 2.1).
However, browsers do not allow users to remove just these cookies,
leaving as only option to manually remove them one by one.
2.2 History Sniffing
A large variety of history sniffing methods exists. We can group
these techniques in two categories: CSS-based and timing-based.
CSS-based attacks. A common trick a page can use to detect if a
user has visited other websites (out of a predefined list of targets) is
to check the CSS style used to render links. For instance, by checking
the CSS:visited style of a particular link [12] it is possible to tell
if that link had been visited before (typically as it is displayed in
a different color). Similarly, it is possible to craft other CSS-based
techniques [22, 23, 40, 46] even using filters to exploit the differences
of the DOM trees [45] by using a timing side-channel attack.
Timing-based attacks. There is a broad range of history-stealing
techniques based on timing information. These approaches were
first introduced for this purpose in order to compromise users’
private data by measuring the time differences in accessing different
third-party content [16], by discovering if it had been cached by the
browser. Extracting users’ true geolocalization for the same purpose
is also possible through web timing, due to the high customization
present in current websites. It is also possible to detect if the user
BakingTimer: Privacy Analysis of Server-Side Request Processing Time
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Figure 1: Example code of a PHP server presenting the three
different possible cases of a cookie process schema.
is currently logged in into certain websites by timing of specific
requests [7], exploiting the AppCache [28], or by estimating the
size of certain resources [44]. As explained in Section 3, our own
attack belongs to the this timing-based attack category.
Countermeasures and Shortcomings Some of the attacks dis-
cussed above are already mitigated by browser vendors. For in-
stance, for the CSS:visited style check, all the corresponding
browser functions (e.g., getComputedStyle and querySelector)
have been modified to always return that the user has never visited
the link [30]. Despite these mitigations, recent work has shown that
the attack is still possible using new features available in modern
browsers. However, several possible defenses exist to avoid the
problem, such as the ones proposed by Smith et al. [40]. In fact,
one of these new techniques has already been blocked in recent
versions of Google Chrome [19].
In fact, all existing techniques fall in the classic “arms race” cate-
gory, in which attacker and researchers constantly discover new
tricks that are in turn mitigated by browser vendors, website devel-
opers, or even simply careful user settings. Therefore, we decided to
investigate if it was possible to devise a new technique that would 1)
rely only on server-side information, and 2) that could not be easily
prevented without degrading the performance or functionalities of
a web application.
2.3 Threat Model
In the timing attack presented in this paper, we adopt the same
threat model used by previous work in the area [7, 44]. In particular,
we assume an attacker can run JavaScript code on the client browser
to perform cross-origin requests. This code can be either loaded
directly by the first-party website, or by a third-party service (e.g.,
by an advertisement or analytics company).
The information collected by our technique allows an attacker
to determine which websites were previously visited by the user
and on which website the user is currently logged in. There are
multiple usages for this data that can result on serious security
Figure 2: Server cookie procress schema.
and privacy implications. The most obvious is related to adver-
tisement, as the usage of the browsing history allows to display
targeted advertisements. Moreover, an interested tracker could cre-
ate a predefined list of websites and generate a temporal fingerprint
of various users, indicating the user’s state in each of them. Even if
the fingerprint could not be used as an standalone fingerprinting
solution, it will definitely improve the fingerprinting capabilities
of other web tracking techniques. Finally, from a security point
of view, this information can be used to perform targeted attacks
against particular victims.
3 BAKINGTIMER
Out of all the requests a web server receives, some contains cookies
and some do not. The main observation behind our approach is that,