抽象工厂的客户
NYPizzaStore
reatePizza()
这是抽象的比萨原科工厂接口，它
定义了如何户生一个相美户品的家
族。这个家族包含了所有制作比萨
的原料。
Dough
>
PizzalngredientFactory
creatsDougho
creafeSauce
pateCheese0
c>
Sauce
createPepperoni()
NYPlzzalngredientFactory
>
Oufinogaieao
createDough)
Cheese
(eonegaean
rsteCheeseO
aleCheese()
createVeggies()
OseCbn@eao
crestePepperoni()
atePepperoni)
eClam()
ateClam()
Clams
这些具体比萨工厂员责
生产比萨原科，每个工厂
都知道如何户生符合旬
己区域的正确对象。
对于这个户品家族，每个工厂都
有不同的实现。
你现在的位置
157
---
## Page 194
工厂模式访谈
我注意到了，抽象工厂的每个方
法实际上系起来都像是工厂方法（例如：
createDough(）、createSource(）等）。每个方法都
被声明成抽象，而子类的方法覆盖这些方法来创
建某些对象。这不正是工厂方法吗？
工厂方法是不是潜伏在抽象工厂里面？
你的观察力很敏锐！是的，抽象工厂的方法经常以工厂方法的方式
实现，这很有道理，对吧？抽象工厂的任务是定义一个负责创建一
组产品的接口。这个接口内的每个方法都负责创建一个具体产品，
同时我们利用实现抽象工厂的子类来提供这些具体的做法。所以，
在抽象工厂中利用工厂方法实现生产方法是相当自然的做法。
模式告白
本周访问：
工厂方法和抽象工厂
HeadFirst：哇！今天很难得，同时请到了两种模式。这可是头一回啊！
工厂方法：呵！我其实不希望人们把我和抽象工厂混为一谈。虽然我们都是工厂模式，
但并不表示我们就应该被合在一起访问。
HeadFirst：别生气，我们之所以想要同时采访你们就是为了帮读者搞清楚你们之间谁是
谁。你们的确有相似的地方，听说人们常常会把你们搞混了。
抽象工厂：这是真的，有些时候我被错认为是工厂方法。嘿！工厂方法，我知道你也有
相同的困扰。我们两个在把应用程序从特定实现中解耦方面真的都很有一套，只是做法
不同而己。我能够理解为什么人们总是把我们搞混。
158
---
## Page 195
工厂模式
工厂方法：哎呀！这还是让我很不爽。毕竞，我使用工厂方法：
HeadFirst：工厂方法，能请你多做一些解释吗？
工厂方法：拜托，那可是很严重的！改变接口就意味
工厂方法：当然。抽象工厂与我都是负责创建对象，着必须深人改变每个子类的接口！听起来可是很繁重
这是我们的工作。但是我用的方法是继承….
的工作呀。
抽象工厂：…..而我是通过对象的组合。
抽象工厂：是的，但是我需要一个大的接口，因为我
工厂方法：对！所以这意味着，利用工厂方法创建对
可是被用来创建整个产品家族的。你只不过是创建一
象，需要扩展一个类，并覆盖它的工厂方法。
个产品，所以你根本不需要一个大的接口，你只需要
一个方法就可以了。
HeadFirst：那这个工厂方法是做什么的呢？
HeadFirst：抽象工厂，我听说你经常使用工厂方法来
工厂方法：当然是用来创建对象的了。其实整个工厂
实现你的具体工厂。
方法模式，只不过就是通过子类来创建对象。用这种
做法，客户只需要知道他们所使用的抽象类型就可以
抽象工厂：是的，我承认这一点，我的具体工厂经常
了，而由子类来负责决定具体类型。所以，换句话
实现工厂方法来创建他们的产品。不过对我来说，这
些具体工厂纯粹只是用来创建产品罢了
说，我只负责将客户从具体类型中解耦。
工厂方法：·而对我来说，抽象创建者（creator）
抽象工厂：这一点我也做得到，只是我的做法不同。
中所实现的代码通常会用到子类所创建的具体类型。
HeadFirst：抽象工厂，请继续…·你刚刚说了一些关
HeadFirst：听起来你们都有自己的一套。我相信人们
于对象组合的事？
喜欢有选择的余地，毕竞，工厂这么有用，大家希望
抽象工厂：我提供一个用来创建一个产品家族的抽象
叉在各种不同的情况下都可使用工厂。你们俩都能将对
以把一群相关的产品集合起来。
家族和想让制造的相关产品集合起来时，你可以使用
抽象工厂：对。
我。
HeadFirst：万一需要扩展这组相关产品（比方说新增工厂方法：而我是工厂方法，我可以把你的客户代码
一个产品），又该怎么办呢？难道这不需要改变接口从需要实例化的具体类中解耦。或者如果你目前还不
知道将来需要实例化哪些具体类时，也可以用我。我
的使用方式很简单，只要把我继承成子类，并实现我
抽象工厂：那倒是真的，如果加入新产品就必须改变
的工厂方法就可以了。
接口，我知道大家不喜欢这么做…
你现在的位置，159
---
## Page 196
模式的比较
比较工厂方法和抽象工厂
PixxaStore实现为工厂方法，因为我
们常要根据区域变化创建产品。通
提供一个抽象接口
过工厂方法，每个区域都有自己的
来创建“一个产另”
具体工厂.他们都知逻如何制作连
PizzaStore
合该区域的比萨。
createPizza ()
由每个子类来“决定”实例化哪
个“具体类”。
纽约商店
NYPizzaStore
ChicagoPlzzaStore
createPizza ()
createPizza()
芝加哥商店
7
工厂方法
王厂方法
这是比萨店的产品，
客户只依赖这个抽象
类型。
纽约比萨店子类只实例化组约风
延加哥比萨店子类只实例
味的比萨。
化芝加哥风味的比萨。
Pizza
NYStyleCh
Pizza
NYStylePepperoniPizza
子类由工厂方法实例化。
NYStyleClamPizza
NYStyleVeggiePizza
7
组约
芝加哥
createPixxa以比萨类型作为参数，所以可以返回
许多类型的比萨产品。
160
第4章
---
## Page 197
工厂模式
因为我们需要创建一个产品家族（也就是
原科），我们把PixxangtedientFactory实现为
PizzalngredientFactory
抽象工厂。每个子类都使用其区域的供货
creeteDough0
商来实现这些原料。
提供一个抽象接
ateSauoe()
gateCheese()
口用来创建一
个
0so55ep
产品家族。
patePepperoni)
每个具体子类都创建一个家
eteClamg
族的产品。
组约
NYPizzalngredientFactory
ChicagoPlzzalngre
dlentFectory
芝加哥
crealeDough0
teDough)
()eonegaean
creeteSauce(
ateChoese()
、这些负责在抽象工厂中创建户
nateVeggios0
品的方法，通常是以“工厂方
eatePepperonit)
法”来实现的。
比方说，这个子类决定面团
…或者给的类型
的类型….·
Dough
Clems
ThickC
Frozo
每个原科都代表
>
着一个户品，而这
Sauce
个户品是由抽象工
Cheese
厂的工厂方法产生
的。
这些产品子类创建了一组平行的产品家族。这里有纽约原料家
族和延加哥原科家族。
你现在的位置
161
---
## Page 198
你的设计工具箱
设计箱内的工具
要点
在本章，我们多加了两个工具到你的工具箱中：工厂方
法和抽象工厂。这两种模式都是将对象创建的过程封装
所有的工厂都是用来封装对
起来，以便将代码从具体类解耦。
象的创建
简单工厂，虽然不是真正的
00基础
设计模式，但仍不失为一个
曲象
简单的方法，可以将客户程
00原则
装
序从具体类解耦。
态
工厂方法使用继承：把对象
多用组合，少用继承
的创建委托给子类，子类实
针对提口编程，不针对实
承
现工厂方法来创建对象。
现编程
为交互对象之间的松耦合
抽象工厂使用对象组合：对
设计而努力
我们有了一个新原则，指
象的创建被实现在工厂接口
类应该对扩展开放，对修
导我们尽可能地让事情保
所暴露出来的方法中。
改关闭。
持抽象。
依赖抽象，不要依赖具体
所有工厂模式都通过减少应
类。
用程序和具体类之间的依赖
促进松耦合。
这些新的模式可以将对
工厂方法允许类将实例化延
象的创建封装起来，以
迟到子类进行。
00模式
便于得到更松耦合、更
有弹性的设计。
抽象工厂创建相关的对象家
族，而不需要依赖它们的具
抽象工厂模式—提供一个接口
体类。
用于创建相关或依赖对象的家族
依赖倒置原则，指导我们避
而不需要明确指定具体类。
免依赖具体类型，而要尽量
厂方法模式—定义了一个
依赖抽象。
创建对象的接口，但由子类决
定要实例化的类是哪一个。工厂
工厂是很有威力的技巧，帮
方法让类把实例化推迟到子类。
助我们针对抽象编程，而不
要针对具体类编程。
162
第4章
---
## Page 199
工厂模式
好长的一章呀！让我们边吃比萨边玩拼字游戏，放松片刻吧！答案都是
取自本章的英文单词。
横排提示：
竖排提示：
1. In Factory Method, each franchise is a
2. We used
in Simple Factory
and Abstract Factory and inheritance in Factory
4. In Factory Method, who decides which class
Method
to instantiate?
3. Abstract Factory creates a
of
6. Role of PizzaStore in Factory Method Pattern
products
7. All New York Style Pizzas use this kind of
5. Not a REAL factory pattern, but handy
cheese
nonetheless
8. In Abstract Factory, each ingredient factory is
10. Ethan likes this kind of pizza
9. When you use new, you are programming to
11. createPizza() is a
an
(two
12. Joel likes this kind of pizza
words)
13. In Factory Method, the PizzaStore and the
concrete Pizzas all depend on this abstraction
14. When a class instantiates an object from a
concrete class, it's
on that object
15. All factory patterns allow us to
PDG
object creation
你现在的位置
163
---
## Page 200
习题解答
习题解答
rpenyour
我们已经成功地完成了NYPizzaStore，还剩下实现两个比萨店。就可以开加盟店了。下
面是芝加哥和加州的比萨店实现：
这两个比萨店都和组约店的做法几乎一致….只
是创建不同种类的比萨。
public class ChicagoPizzaStore extends PizzaStore {
protected Pizza createPizza(String item) (
if (item.equals("cheese")){
return new ChicagoStyleCheesePizza();
}else if (item.equals("veggie"))(
个
对于运如哥比萨店，我
return new ChicagoStyleVeggiePizza();
们只要确认创建芝加哥
)else if (item.equals("clam"))(
return new ChicagoStyleClamPizza();
风味的比萨….
}else if (item.equals(pepperoni"))(
return new ChicagoStylePepperoniPizza();
}else return null;
public class CaliforniaPizzaStore extends PizzaStore
protected Pizza createPizza(String item)(
if (item.equals(*cheese")){
return new CaliforniaStyleCheesePizza();
}else if (item.equals("veggie")){
而对于加州比萨店
return new CaliforniaStyleVeggiePizza() ;
们要创建加州尼味的比
)else if （item.equals("clam")){
return new CaliforniaStyleClamPizza() ;
else if (item.equals("pepperoni"))(
return new CaliforniaStylePepperoniPizza ();
}else return null;
164
第4章