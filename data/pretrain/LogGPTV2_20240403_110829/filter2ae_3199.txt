在域内遇到瓶颈时，不妨看看域内机器开放的共享，获取有些收获。
## 0x00 前言
大多数内网渗透总结在提到使用 `WinAPI枚举系统` 只是讲述了利用 `NetSessionEnum` 来找寻`登陆 sessions`， 利用
`NetWkstaUserEnum` 来枚举登陆的用户，利用 `NetShareEnum` 来找寻共享，但却未说明其原型理论。由于前篇文章
[【域渗透】域内会话收集](\[https://rcoil.me/2019/10/【域渗透】域内会话收集/\]\(https://rcoil.me/2019/10/%E3%80%90%E5%9F%9F%E6%B8%97%E9%80%8F%E3%80%91%E5%9F%9F%E5%86%85%E4%BC%9A%E8%AF%9D%E6%94%B6%E9%9B%86/))
已经针对 `NetSessionEnum` 和 `NetWkstaUserEnum` 进行说明，所以本文是对 `NetShareEnum`
做一个概述及应用的补充。
## 0x01 NetShareEnum 函数
以当前权限检索有关服务器上每个共享资源的信息。还可以使用
[WNetEnumResource](https://docs.microsoft.com/windows/desktop/api/winnetwk/nf-winnetwk-wnetenumresourcea) 函数来检索资源信息。但是， **WNetEnumResource**
不会枚举隐藏的共享或连接到共享的用户。
该函数原型为：
它需要 7 个参数。
  * **servername：** 指向一个字符串的指针，该字符串指定要在其上执行该功能的远程服务器的DNS或NetBIOS名称。如果此参数为 **NULL** ，则使用本地计算机
  * **level：** 指定数据的信息级别。
| 值 | **含义** |  
| ---- | ---------------------------------------- |  
| 0 | 返回共享名称。所述 _bufptr_ 参数指向的数组
[SHARE_INFO_0](https://docs.microsoft.com/windows/desktop/api/lmshare/ns-lmshare-share_info_0)结构。 |  
| 1 | 返回有关共享资源的信息，包括资源的名称和类型以及与资源关联的注释。所述 _bufptr_ 参数指向的数组
[SHARE_INFO_1](https://docs.microsoft.com/windows/desktop/api/lmshare/ns-lmshare-share_info_1)结构。 |  
| 2 | 返回有关共享资源的信息，包括资源名称，类型和权限，密码以及连接数。所述 _bufptr_ 参数指向的数组
[SHARE_INFO_2](https://docs.microsoft.com/windows/desktop/api/lmshare/ns-lmshare-share_info_2)结构。 |  
| 502 | 返回有关共享资源的信息，包括资源名称，类型和权限，连接数以及其他相关信息。所述 _bufptr_ 参数指向的数组
[SHARE_INFO_502](https://docs.microsoft.com/windows/desktop/api/lmshare/ns-lmshare-share_info_502)结构。不返回来自不同范围的共享。有关范围界定的更多信息，请参见[NetServerTransportAddEx](https://docs.microsoft.com/windows/desktop/api/lmserver/nf-lmserver-netservertransportaddex)函数的文档的“备注”部分。 |  
| 503 | 返回有关共享资源的信息，包括资源名称，类型和权限，连接数以及其他相关信息。所述 _bufptr_
参数指向的数组[SHARE_INFO_503](https://docs.microsoft.com/windows/desktop/api/lmshare/ns-lmshare-share_info_503)结构。返回所有范围的共享。如果此结构的 **shi503_servername** 成员为“
*”，则没有配置的服务器名称，并且 **NetShareEnum** 函数枚举所有未作用域名称的共享。 **Windows Server
2003和Windows XP：** 不支持此信息级别。 |
  * **bufptr：** 向接收数据的缓冲区的指针。该数据的格式取决于 _level_ 参数的值。
  * **prefmaxlen：** 指定返回数据的首选最大长度，以字节为单位。如果指定 **MAX_PREFERRED_LENGTH** ，则该函数分配数据所需的内存量。如果在此参数中指定另一个值，则它可以限制函数返回的字节数。如果缓冲区大小不足以容纳所有条目，则该函数返回 **ERROR_MORE_DATA** 。
  * **entriesread：** 指向一个值的指针，该值接收实际枚举的元素数。
  * **totalentries：** 指向一个值的值，该值接收可能已经枚举的条目总数。
  * **resume_handle：** 指向包含恢复句柄的值的指针，该恢复句柄用于继续现有的共享搜索。
而此 API 的调用示例为：
    string server = "rcoil.me";
    int ret = NetShareEnum(server, 1, ref bufPtr, MAX_PREFERRED_LENGTH, ref entriesread, ref totalentries, ref resume_handle);
它会返回如下内容：
    shi1_netname - ADMIN$
    shi1_remark - Remote management
    shi1_netname - C$
    shi1_remark - Default share
    ....
关键源码如下：
    /// 
    /// 返回指定计算机所开放的共享，并返回 SHARE_INFO_1[] 数组结构
    /// https://www.pinvoke.net/default.aspx/netapi32/netshareenum.html
    /// 
    /// 
    /// 
    public static SHARE_INFO_1[] EnumNetShares(string Server)
    {
        List ShareInfos = new List();
        int entriesread = 0;
        int totalentries = 0;
        int resume_handle = 0;
        int nStructSize = Marshal.SizeOf(typeof(SHARE_INFO_1));
        IntPtr bufPtr = IntPtr.Zero;
        StringBuilder server = new StringBuilder(Server);
        int ret = NetShareEnum(server, 1, ref bufPtr, MAX_PREFERRED_LENGTH, ref entriesread, ref totalentries, ref resume_handle);
        if (ret == NERR_Success)
        {
            IntPtr currentPtr = bufPtr;
            for (int i = 0; i 
    /// 对路径进行遍历
    /// 
    /// 提供的根路径
    public static void ListFiles(FileSystemInfo info)
    {
      if (!info.Exists) return;
      DirectoryInfo dir = info as DirectoryInfo;
      //不是目录
      if (dir == null) return;
      try
      {
        FileSystemInfo[] files = dir.GetFileSystemInfos();
        for (int i = 0; i < files.Length; i++)
        {
          FileInfo file = files[i] as FileInfo;
          //是文件
          if (file != null)
            Console.WriteLine(file.FullName);
          //对于子目录，进行递归调用
          else
            ListFiles(files[i]);
        }
      }
      catch { }
    }
到此，整个过程就可以结束了。