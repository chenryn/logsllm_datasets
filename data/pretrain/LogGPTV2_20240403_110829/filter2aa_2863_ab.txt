content of your messages, but we will also discuss some other types of data and why it is important.
Here are a few common scenarios:
Privacy-concerned average citizen: You don't have anything in particular you're trying to hide in most of
your messages. You're concerned about keeping financial data, medical records, and similar information
confidential, but you don't often discuss that data over messaging clients. You might also be interested in
encrypted communications simply because you believe in privacy as a principle, or to help give legitimacy to
other crypto users.
Business users: Businesses often have employees who need to discuss confidential information such as trade
secrets or financial data.
Activists: People who do things that might draw government attention. We're going to stay away from politics
in this paper and just assume that there are causes that are both morally/ethically just and are simultaneously
oppressed by some government that can bring punishment to bear.
Harassed: People whose social or political beliefs are unpopular with specific individuals or groups or are
targeted for harassment for other reasons (celebrities or other media personalities might fall into this category).
The harassers might try to read messages to publicly air them or try to uncover a physical address or current
location.
6 | Secure Messaging for Normal People
NCC Group
People who send nude pictures: If you want to sext someone, it's likely you want that picture to only be
readable by the people you actually sent it to.
7 | Secure Messaging for Normal People
NCC Group
3 Messages without encryption
To help explain how encrypted messaging systems can and cannot protect users, first, let's examine an unen-
crypted messaging system.
Figure 1: Alice, Bob and the Evil Eavesdroppers
On the Internet, messages passed between Alice
and Bob will move from their devices to the local
network, then across an undefined set of Internet
devices, then to the receivers' local network and
onto the receiving device. If the communications
aren't encrypted, eavesdroppers in any of the
attacker groups above can read the message in
most cases.
The situation for SMS messages and phone
calls is comparable, though the technical details
vary.
For mobile networks, although these
technologies are not always encrypted in a
meaningful way, eavesdropping on them is often
more difficult than eavesdropping on IP networks.
At the time of this writing,
it is probably
safe to assume that low-resource, non-targeted
adversaries are not able to intercept SMS and mobile phone calls. Attacks against mobile phone technologies
are getting easier every day, so it's likely that these types of communications will continue to get easier.
You could also envision more esoteric architectures, like bluetooth mesh networks, that also follow this same
general pattern.
8 | Secure Messaging for Normal People
NCC Group
4 Encryption endpoints
The most common form of communications encryption on the Internet is Transport Layer Security (TLS).1 This
technology is designed to secure communications between a client and server. The diagram would look
something like this.
This is much better than before, as it shuts out most eavesdroppers at the network layer. It does highlight a
specific, powerful attacker.
Figure 2: Malicious servers can still read TLS traffic
Traffic from Alice to the server is encrypted, and
then it is encrypted again from the server to Bob.
The server is in the middle of the traffic and can
read, store, or change any messages.
Even if
you trust the operators of the server, the more
popular it becomes, the more likely it is to be
targeted by those who want to observe message
traffic.
Additionally, the server operators will
be operating under some legal jurisdiction, and
most jurisdictions require at least some level of
access to the data by law enforcement.
We also need a way to confirm that the server
we're talking to is actually the correct one, and
not just a server pretending to be the legitimate
chat server. This is handled as an integral part
of TLS. Your operating system or application has
a list of trusted certificate authorities (CAs) that
your system trusts to "vouch for" a given site's identity. This system can be abused in a few ways. Your system
trusts a huge number of CAs by default, and it trusts any of them to vouch for any website. This means that
anyone who can access or influence any CA can forge a certificate for any server, and therefore vouch for a
fake server. As mentioned above, for messaging systems that use this architecture, the encryption ends at the
server, so in this case it would end at the fake server.
Another way to abuse these systems is to add extra CAs to the list of CAs that your system trusts. Many
businesses do this automatically for their computers and networks, so that the business can monitor commu-
nications for security problems or lazy workers. Some public networks have also been known to require users
to install custom CAs. Attackers can try to convince users to add attacker-controlled CAs to the trusted list for
a given computer. Finally, sometimes software errors will simply skip the verification step, allowing any server
to claim to be any other server.
Despite all of these disadvantages, this is still a common model, and it works well in the majority of computer
communications if you're willing to allow the server to read all of your messages and you understand that the
potential exists for high resource attackers to intercept your communications (and in a few selected cases,
lower resourced attackers as well).
1Older versions were called Secure Sockets Layer (SSL). TLS and SSL are the technology behind "HTTPS" used in web pages (the
lock icon in your address bar)
9 | Secure Messaging for Normal People
NCC Group
Figure 3: End-to-end encrypted traffic is only readable
by Alice and Bob's computers.
A better solution would be to find a way to
make the encryption endpoints be Alice's device
and Bob's device, so that even if there's a central
chat server, it can't actually read the data.
This is an ideal situation, but there are implemen-
tation details that make end-to-end encryption
more complicated than the diagram makes it
seem. We'll cover several topics that are impor-
tant in encrypted messaging, and the potential
ways they are addressed in both user-to-provider
and end-to-end encrypted messaging.
10 | Secure Messaging for Normal People
NCC Group
5 Key validation
In order for end-to-end encryption to be possible, we need a way for Alice and Bob to exchange encryption
keys securely, or at least to be able to verify that the keys they see for the other party actually belong to the
other party. Unfortunately, it's not possible to just pass the keys over the Internet directly: think about the
initial key as just another kind of message and look back at the first diagram to understand why. There's an
important wrinkle here that we're mostly going to gloss over under our "cryptography is magic" clause above.
It actually doesn't matter if an attacker can read our keys, there's a special type of encryption called "public
key cryptography" that makes this happen. We do need to worry about an adversary changing keys that we
send. This means that if we go back to the original unencrypted messages case, we're not safe because any
of the eavesdroppers could replace our key with their key.
Consider another common architecture for message passing, this time using a form of end-to-end encryption,
so Alice's messages to Bob don't get decrypted on the server.
Figure 4: Alice asks Server for Bob's key, Server provides it
In the above diagram, the server has a database all of the identities. If Alice wants to talk to Bob, Alice asks
the server for Bob's key, the server sends back a key, Alice uses it to encrypt a message to Bob.
Figure 5: Server provides bad key (MITM)
Alice has just blindly trusted the server to tell
the truth and provide Bob's key, but at this point,
there's no way for her to verify that the server
provided Bob's key.
5.1 Trust on Ô¨Årst use
There are solutions to this problem, but they can
become cumbersome quickly. First, simplest, and
least secure is Trust on First Use (TOFU). The first
time Alice asks for Bob's key and gets a response,
Alice saves the key (or some representation of the
key). The next time Alice tries to send a message
to Bob, Alice either uses the saved key or checks
to see if the key received from the server matches
the one received earlier.
One weakness to TOFU lies in the first message. If the server is lying for this first response, then there is no way
to securely communicate with Bob. The server could read or modify the traffic at any time. This makes TOFU
an acceptable choice only when dealing with opportunistic attackers who aren't already actively targeting you
or your communications partner.
11 | Secure Messaging for Normal People
NCC Group
There is a further problem here. If Bob needs to change his key suddenly, there is no way for Alice to tell the
difference between Bob and an attacker claiming to be Bob. This is a huge and essentially unsolvable problem
for systems that have TOFU as their only key validation method.
5.2 Out-of-band validation
A better way to solve this problem is to find a way to validate the key so that Alice knows that the key received
is the one actually used by Bob. The easiest way to accomplish this is to validate the keys out of band. This
is usually done with either a hexadecimal string commonly called the "fingerprint", or a QR code which is a
graphical representation of the same data. The fingerprint is not a secret value you want to protect (unlike
your own, real print on your fingers)- instead, it is a public value you would want to print on your business
cards, advertise on your website, or tattoo in a handy location2
Figure 6: QR code and "fingerprint"
However, this key exchange is only as secure as the communi-
cations method used.
If the fingerprint was exchanged over the
very chat you were attempting to authenticate, if you were being
attacked, the attacker would simply replace the fingerprint with
whatever data you expect to see. Fingerprints must be exchanged
over a separate channel that you know (or at least hope!) has not
been compromised. (Hence "out-of-band".) The best assurance
is provided by physically visiting your communications partner and
verifying keys/fingerprints - but other options potentially include
a phone call, SMS, a video chat - anything where you can be
reasonably sure the attacker is unable to modify the data of.
Consider also that some types of verification are harder to forge. A
live videochat of Bob reading off his fingerprint to Alice is difficult to
intercept and modify in real time with a faked video of Bob reading
off the wrong fingerprint.
An SMS from Bob with his fingerprint
might be easier for some attackers to intercept and modify in transit,
but if the validation was ad hoc and not part of some automatic
validation scheme, it would probably require an adversary who was
already prepared and waiting to jump into the communications between two specific individuals.
This
adversary would also need access to the phone network or otherwise be able to modify or forge SMS messages
in transit.