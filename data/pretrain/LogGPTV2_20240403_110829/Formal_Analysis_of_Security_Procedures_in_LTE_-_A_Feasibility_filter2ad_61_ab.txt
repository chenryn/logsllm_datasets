### Formal Analysis of Security Procedures in LTE - A Feasibility Study

#### 3. ProVerif Overview

Before delving into the security procedures, we will first introduce ProVerif, the tool used for our analysis. We will use the Authentication and Key Agreement (AKA) protocol as an example to illustrate how protocols can be modeled and analyzed with ProVerif.

##### 3.1 ProVerif

ProVerif is a tool that takes formal models of protocols and a set of security properties as input. The input language is a typed variant of the applied pi calculus [4]. In this language, messages are represented as terms, and relationships between cryptographic primitives are defined using rewrite rules or an equational theory. For a complete specification, refer to the user manual [10].

ProVerif can verify reachability properties and correspondence assertions [7]. Reachability properties help determine what information is available to the attacker, i.e., secrecy. Correspondence properties, on the other hand, are of the form "if some event is executed, then another event has previously been executed" and are useful for checking various types of authentication [20].

##### 3.2 Input Language

Figure 3 illustrates an AKA model in the ProVerif language. Generally, a protocol model consists of three parts: declarations (lines 1-9), process macros (lines 10-31), and the main process (line 32).

- **Declarations**: Include user-defined types, functions describing cryptographic primitives, and security properties. Built-in types include `channel`, `bitstring`, and `bool`. Additional user types can be declared, and free names are introduced, such as `pubch` and `secch` (line 1). Free names are accessible to the attacker unless qualified by `[secret]`.

- **Constructors and Destructors**: Constructors are functions used to build terms, declared by specifying their names, argument types, and return value (lines 4-7). By default, these functions are one-way, meaning the attacker cannot derive the arguments from the return value unless qualified by `[data]`. Destructors (line 8) are special functions used to manipulate terms. Together, constructors and destructors capture the relationships between cryptographic primitives.

- **Process Macros**: Messages are represented by terms, which can be names, variables, tuples, or constructor/destructor applications. The language supports common Boolean functions (=, &&, ||, <>) and pattern matching for term evaluation. Processes are defined as sequences of events, including name restriction, communication, and conditional events.

- **Main Process**: Defined using the process macros. In this example, it is the parallel composition (denoted by `|`) of the unbounded replication (denoted by `!`) of three process macros representing a UE (line 10), an MME (line 18), and an HSS (line 24) node.

##### 3.3 Security Properties

Security properties are declared with the `query` keyword. For the AKA example, one goal is to establish a shared session key KASME between the MME and the UE. The following properties are considered:

- **Reachability Events** (lines 1-2): Used for sanity checks to ensure processes can be fully executed without blocking.
- **Secrecy** (lines 3-4): Checks if the established key is secret.
- **Correspondence Assertions** (lines 5-9): Ensures mutual agreement between the UE and MME on the key. These assertions use the `event` and `inj-event` keywords to check for one-to-one mappings between events.

##### 3.4 Analysis and Discussion

ProVerif successfully solves most properties, except for one reachability query and an injective correspondence assertion. The remaining queries are resolved as expected, with correspondence and secrecy properties proven to hold and reachability queries falsified.

- **Unresolved Reachability Query**: Can be solved by restricting the attacker model to passive, either by setting internal configuration parameters or declaring all communication channels as private. This reduces the number of traces and improves termination chances but may not be sound for reachability.
- **Unresolved Correspondence Assertion**: Further experimentation revealed that strengthening the claim by including an additional `id` parameter and setting the attacker model to passive allows ProVerif to find an attack trace even for non-injective assertions.

The attack trace is due to ProVerif's approximation [8].

```proverif
query i : id, k : key; event (mmeCommit(i, k)) ==> event (ueRunning(i, k)).
```

This completes the overview of ProVerif and its application to the AKA protocol in LTE.