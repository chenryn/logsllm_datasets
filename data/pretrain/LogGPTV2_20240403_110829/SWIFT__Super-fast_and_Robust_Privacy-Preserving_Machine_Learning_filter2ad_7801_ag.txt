5.40
157.11
81.46
Table 5: 4PC NN Inference. TP is given in (#queries/min).
Table 5 summarises NN inference for 4PC setting. Here,
we outperform FLASH in every aspect, with the improvement
in TP being at least 2.5× for each NN architecture. Further,
we are on par with Trident [15] because the extra rounds
required for veriﬁcation get amortized with an increase in the
number of rounds required for computing NN inference. This
establishes the practical relevance of our work.
As a ﬁnal remark, our 4PC sees roughly 3× improvement
over our 3PC for NN inference. This reﬂects improvements
brought in by the additional honest server in the system.
Acknowledgements
We thank our shepherd Guevara Noubir, and anonymous re-
viewers for their valuable feedback.
Nishat Koti would like to acknowledge ﬁnancial support
from Cisco PhD Fellowship 2020. Mahak Pancholi would like
to acknowledge ﬁnancial support from Cisco MTech Fellow-
ship 2020. Arpita Patra would like to acknowledge ﬁnancial
support from SERB MATRICS (Theoretical Sciences) Grant
2020 and Google India AI/ML Research Award 2020. Ajith
Suresh would like to acknowledge ﬁnancial support from
Google PhD Fellowship 2019. The authors would also like
to acknowledge the ﬁnancial support from Google Cloud to
perform the benchmarking.
USENIX Association
30th USENIX Security Symposium    2663
References
[1] M. Abspoel, A. P. K. Dalskov, D. Escudero, and
A. Nof. An efﬁcient passive-to-active compiler for
honest-majority MPC over rings. In ACNS, 2021.
[2] B. Alon, E. Omri, and A. Paskin-Cherniavsky. MPC
with Friends and Foes. In CRYPTO, pages 677–706,
2020.
[3] T. Araki, A. Barak, J. Furukawa, T. Lichter, Y. Lindell,
A. Nof, K. Ohara, A. Watzman, and O. Weinstein. Opti-
mized honest-majority MPC for malicious adversaries -
breaking the 1 billion-gate per second barrier. In IEEE
S&P, pages 843–862, 2017.
[4] T. Araki, J. Furukawa, Y. Lindell, A. Nof, and K. Ohara.
High-throughput semi-honest secure three-party com-
putation with an honest majority. In ACM CCS, pages
805–817, 2016.
[5] C. Baum, I. Damgård, T. Toft, and R. W. Zakarias. Better
In
preprocessing for secure multiparty computation.
ACNS, pages 327–345, 2016.
[6] D. Bogdanov, S. Laur, and J. Willemson. Sharemind: A
framework for fast privacy-preserving computations. In
ESORICS, pages 192–206, 2008.
[7] P. Bogetoft, D. L. Christensen, I. Damgård, M. Geisler,
T. Jakobsen, M. Krøigaard, J. D. Nielsen, J. B. Nielsen,
K. Nielsen, J. Pagter, et al. Secure multiparty computa-
tion goes live. In FC, pages 325–343, 2009.
[8] D. Boneh, E. Boyle, H. Corrigan-Gibbs, N. Gilboa, and
Y. Ishai. Zero-knowledge proofs on secret-shared data
via fully linear pcps. In CRYPTO, pages 67–97, 2019.
[9] E. Boyle, N. Gilboa, Y. Ishai, and A. Nof. Practical fully
secure three-party computation via sublinear distributed
zero-knowledge proofs. In ACM CCS, pages 869–886,
2019.
[10] P. Bunn and R. Ostrovsky. Secure two-party k-means
clustering. In ACM CCS, pages 486–497, 2007.
[11] M. Byali, H. Chaudhari, A. Patra, and A. Suresh.
fast and robust framework for privacy-
FLASH:
preserving machine learning. PETS, 2020.
[14] H. Chaudhari, A. Choudhury, A. Patra, and A. Suresh.
ASTRA: High Throughput 3PC over Rings with Ap-
plication to Secure Prediction. In ACM CCSW@CCS,
2019.
[15] H. Chaudhari, R. Rachuri, and A. Suresh. Trident: Efﬁ-
cient 4PC Framework for Privacy Preserving Machine
Learning. NDSS, 2020.
[16] K. Chida, D. Genkin, K. Hamada, D.
Ikarashi,
R. Kikuchi, Y. Lindell, and A. Nof. Fast large-scale
honest-majority MPC for malicious adversaries.
In
CRYPTO, pages 34–64, 2018.
[17] R. Cleve. Limits on the security of coin ﬂips when half
the processors are faulty (extended abstract). In ACM
STOC, pages 364–369, 1986.
[18] R. Cohen, I. Haitner, E. Omri, and L. Rotem. Char-
acterization of secure multiparty computation without
broadcast. J. Cryptology, pages 587–609, 2018.
[19] R. Cramer, I. Damgård, D. Escudero, P. Scholl, and
2k: Efﬁcient MPC mod 2k for dishonest
C. Xing. SpdZ
majority. In CRYPTO, pages 769–798, 2018.
[20] R. Cramer, S. Fehr, Y. Ishai, and E. Kushilevitz. Efﬁcient
multi-party computation over rings. In EUROCRYPT,
pages 596–613, 2003.
[21] Cryptography and P. E. G.
ENCRYPTO Utils.
encryptogroup/ENCRYPTO_utils.
at TU Darmstadt.
https://github.com/
[22] A. Dalskov, D. Escudero, and M. Keller. Fantastic Four:
Honest-Majority Four-Party Secure Computation With
Malicious Security. Cryptology ePrint Archive, 2020.
https://eprint.iacr.org/2020/1330.
[23] I. Damgård, D. Escudero, T. K. Frederiksen, M. Keller,
P. Scholl, and N. Volgushev. New primitives for actively-
secure MPC over rings with applications to private ma-
chine learning. IEEE S&P, 2019.
[24] I. Damgård, M. Keller, E. Larraia, V. Pastro, P. Scholl,
and N. P. Smart. Practical covertly secure MPC for
dishonest majority - or: Breaking the SPDZ limits. In
ESORICS, pages 1–18, 2013.
[12] M. Byali, C. Hazay, A. Patra, and S. Singla. Fast ac-
tively secure ﬁve-party computation with security be-
yond abort. In ACM CCS, pages 1573–1590, 2019.
[25] I. Damgård, C. Orlandi, and M. Simkin. Yet another
compiler for active security or: Efﬁcient MPC over arbi-
trary rings. In CRYPTO, pages 799–829, 2018.
[13] M. Byali, A. Joseph, A. Patra, and D. Ravi. Fast secure
computation for small population over the internet. In
ACM CCS, pages 677–694, 2018.
[26] I. Damgård, V. Pastro, N. P. Smart, and S. Zakarias.
Multiparty computation from somewhat homomorphic
encryption. In CRYPTO, pages 643–662, 2012.
2664    30th USENIX Security Symposium
USENIX Association
[27] D. Demmler, T. Schneider, and M. Zohner. ABY - A
framework for efﬁcient mixed-protocol secure two-party
computation. In NDSS, 2015.
[42] S. Mazloom, P. H. Le, S. Ranellucci, and S. D. Gordon.
Secure parallel computation on national scale volumes
of data. In USENIX, pages 2487–2504, 2020.
[28] W. Du and M. J. Atallah. Privacy-preserving cooperative
scientiﬁc computations. In IEEE CSFW-14, pages 273–
294, 2001.
[29] H. Eerikson, M. Keller, C. Orlandi, P. Pullonen, J. Puura,
and M. Simkin. Use Your Brain! Arithmetic 3PC for
Any Modulus with Active Security. In ITC, 2020.
[30] J. Furukawa, Y. Lindell, A. Nof, and O. Weinstein. High-
throughput secure three-party computation for malicious
adversaries and an honest majority. In EUROCRYPT,
pages 225–255, 2017.
[31] S. D. Gordon, S. Ranellucci, and X. Wang. Secure com-
putation with low communication from cross-checking.
In ASIACRYPT, pages 59–85, 2018.
[32] G. Jagannathan and R. N. Wright. Privacy-preserving
distributed k-means clustering over arbitrarily parti-
tioned data. In ACM SIGKDD, pages 593–599, 2005.
[33] M. Keller, E. Orsini, and P. Scholl. MASCOT: faster
malicious arithmetic secure computation with oblivious
transfer. In ACM CCS, pages 830–842, 2016.
[34] M. Keller, V. Pastro, and D. Rotaru. Overdrive: Making
SPDZ great again. In EUROCRYPT, pages 158–189,
2018.
[35] M. Keller, P. Scholl, and N. P. Smart. An architecture for
practical actively secure MPC with dishonest majority.
In ACM CCS, pages 549–560, 2013.
[36] N. Koti, M. Pancholi, A. Patra, and A. Suresh. SWIFT:
Super-fast and Robust Privacy-Preserving Machine
Learning. Cryptology ePrint Archive, 2020. https:
//eprint.iacr.org/2020/592.
[37] A. Krizhevsky, V. Nair, and G. Hinton. The CIFAR-
10 dataset. 2014. https://www.cs.toronto.edu/
~kriz/cifar.html.
[38] Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner.
Gradient-based learning applied to document recogni-
tion. Proceedings of the IEEE, pages 2278–2324, 1998.
[39] Y. LeCun and C. Cortes. MNIST handwritten digit
http://yann.lecun.com/exdb/
2010.
database.
mnist/.
[43] P. Mohassel and P. Rindal. ABY3: A mixed protocol
framework for machine learning. In ACM CCS, pages
35–52, 2018.
[44] P. Mohassel, M. Rosulek, and Y. Zhang. Fast and secure
three-party computation: The garbled circuit approach.
In ACM CCS, pages 591–602, 2015.
[45] P. Mohassel and Y. Zhang. Secureml: A system for
scalable privacy-preserving machine learning. In IEEE
S&P, pages 19–38, 2017.
[46] P. S. Nordholt and M. Veeningen. Minimising commu-
nication in honest-majority MPC by batchwise multipli-
cation veriﬁcation. In ACNS, pages 321–339, 2018.
[47] A. Patra and D. Ravi. On the exact round complexity
of secure three-party computation. In CRYPTO, pages
425–458, 2018.
[48] A. Patra and A. Suresh. BLAZE: Blazing Fast Privacy-
Preserving Machine Learning. NDSS, 2020. https:
//eprint.iacr.org/2020/042.
[49] M. C. Pease, R. E. Shostak, and L. Lamport. Reaching
agreement in the presence of faults. J. ACM, pages
228–234, 1980.
[50] M. S. Riazi, C. Weinert, O. Tkachenko, E. M. Songhori,
T. Schneider, and F. Koushanfar. Chameleon: A hybrid
secure computation framework for machine learning
applications. In AsiaCCS, pages 707–721, 2018.
[51] A. P. Sanil, A. F. Karr, X. Lin, and J. P. Reiter. Privacy
preserving regression modelling via distributed compu-
tation. In ACM SIGKDD, pages 677–682, 2004.
[52] K. Simonyan and A. Zisserman. Very deep convolu-
tional networks for large-scale image recognition. arXiv
preprint arXiv:1409.1556, 2014.
[53] A. B. Slavkovic, Y. Nardi, and M. M. Tibbits. Secure
logistic regression of horizontally and vertically parti-
tioned distributed databases. In ICDM, pages 723–728,
2007.
[40] Y. Lindell and B. Pinkas. Privacy preserving data mining.
J. Cryptology, pages 177–206, 2002.
[54] J. Vaidya, H. Yu, and X. Jiang. Privacy-preserving SVM
classiﬁcation. Knowl. Inf. Syst., pages 161–178, 2008.
[41] E. Makri, D. Rotaru, N. P. Smart, and F. Vercauteren.
EPIC: efﬁcient private image classiﬁcation (or: Learning
from the masters). In CT-RSA, pages 473–492, 2019.
[55] S. Wagh, D. Gupta, and N. Chandran. Securenn: 3-party
secure computation for neural network training. PoPETs,
pages 26–49, 2019.
USENIX Association
30th USENIX Security Symposium    2665
[56] S. Wagh, S. Tople, F. Benhamouda, E. Kushilevitz,
P. Mittal, and T. Rabin. FALCON: Honest-Majority
Maliciously Secure Framework for Private Deep Learn-
ing. PoPETS, pages 188–208, 2021. https://arxiv.
org/abs/2004.02229v1.
[57] H. Yu, J. Vaidya, and X. Jiang. Privacy-preserving SVM
classiﬁcation on vertically partitioned data. In PAKDD,
pages 647–656, 2006.
A Preliminaries
Shared Key Setup: Let F : {0,1}κ ×{0,1}κ → X be a se-
cure pseudo-random function (PRF), with co-domain X being
Z2(cid:96). Servers establish the following keys for 3PC: (i) one
key shared between every pair– k01,k02,k12 for the servers
(P0,P1), (P0,P2)and(P1,P2), respectively, (ii) one shared key
known to all the servers– kP . Suppose P0,P1 wish to sam-
ple a random value r ∈ Z2(cid:96) non-interactively. To do so they
invoke Fk01(id01) and obtain r. Here, id01 denotes a counter
maintained by the servers, and is updated after every PRF in-
vocation. The appropriate keys used to sample is implicit from
the context, from the identities of the pair that sample or from
the fact that it is sampled by all, and, hence, is omitted. The
key setup is modelled via a functionality Fsetup (Fig. 6) that
can be realised using any secure MPC protocol. Analogously,
key setup functionality for 4PC is given in Fig. 7.
Functionality Fsetup
Fsetup interacts with the servers in P and the adversary S. Fsetup
picks random keys ki j for i, j ∈ {0,1,2} and kP . Let ys denote the
keys corresponding to server Ps. Then
– ys = (k01,k02 and kP ) when Ps = P0.
– ys = (k01,k12 and kP ) when Ps = P1.
– ys = (k02,k12 and kP ) when Ps = P2.
Output: Send (Output, ys) to every Ps ∈ P .
Figure 6: 3PC: Ideal functionality for shared-key setup
Functionality Fsetup4
Fsetup4 interacts with the servers in P and the adversary S.
Fsetup4 picks random keys ki j and ki jk for i, j,k ∈ {0,1,2} and
kP . Let ys denote the keys corresponding to server Ps. Then
– ys = (k01,k02,k03,k012,k013,k023 and kP ) when Ps = P0.
– ys = (k01,k12,k13,k012,k013,k123 and kP ) when Ps = P1.
– ys = (k02,k12,k23,k012,k023,k123 and kP ) when Ps = P2.
– ys = (k03,k13,k23,k013,k023,k123 and kP ) when Ps = P3.
Output: Send (Output, ys) to every Ps ∈ P .
Figure 7: 4PC: Ideal functionality for shared-key setup
To generate a 3-out-of-3 additive sharing of 0 i.e. ζs for
s∈{0,1,2} such that Ps holds ζs, and ζ0 +ζ1 +ζ2 = 0, servers
proceed as follows. Every pair of servers, Ps,P(s+1)%3, non-
interactively generate rs, as described earlier, and each Ps sets
ζs = rs − r(s−1)%3.
B 3PC Protocols
Joint Message Passing: The ideal functionality for jmp ap-
pears in Fig. 8.
Functionality Fjmp
Fjmp interacts with the servers in P and the adversary S.
Step 1: Fjmp receives (Input, vs) from Ps for s ∈ {i, j}, while it
receives (Select, ttp) from S. Here ttp denotes the server that
S wants to choose as the TTP. Let P(cid:63) ∈ P denote the server
corrupted by S.
Step 2: If vi = v j and ttp = ⊥, then set msgi = msg j =
⊥, msgk = vi and go to Step 5.
Step 3: If ttp ∈ P \{P(cid:63)}, then set msgi = msg j = msgk = ttp.
Step 4: Else, TTP is set to be the honest server with smallest
index. Set msgi = msg j = msgk = TTP
Step 5: Send (Output, msgs) to Ps for s ∈ {0,1,2}.
Figure 8: 3PC: Ideal functionality for jmp primitive
Joint Sharing: The joint sharing protocol appears in Fig. 9.
Protocol Πjsh(Pi,Pj, v)
Preprocessing: