title:Block Oriented Programming: Automating Data-Only Attacks
author:Kyriakos K. Ispoglou and
Bader AlBassam and
Trent Jaeger and
Mathias Payer
Block Oriented Programming: Automating Data-Only Attacks
Kyriakos K. Ispoglou
PI:EMAIL
Purdue University
Trent Jaeger
PI:EMAIL
Pennsylvania State University
Bader AlBassam
PI:EMAIL
Purdue University
Mathias Payer
PI:EMAIL
EPFL and Purdue University
8
1
0
2
t
c
O
3
2
]
R
C
.
s
c
[
2
v
7
6
7
4
0
.
5
0
8
1
:
v
i
X
r
a
ABSTRACT
With the widespread deployment of Control-Flow Integrity (CFI),
control-flow hijacking attacks, and consequently code reuse at-
tacks, are significantly more difficult. CFI limits control flow to
well-known locations, severely restricting arbitrary code execution.
Assessing the remaining attack surface of an application under ad-
vanced control-flow hijack defenses such as CFI and shadow stacks
remains an open problem.
We introduce BOPC, a mechanism to automatically assess
whether an attacker can execute arbitrary code on a binary hard-
ened with CFI/shadow stack defenses. BOPC computes exploits for
a target program from payload specifications written in a Turing-
complete, high-level language called SPL that abstracts away archi-
tecture and program-specific details. SPL payloads are compiled
into a program trace that executes the desired behavior on top of
the target binary. The input for BOPC is an SPL payload, a starting
point (e.g., from a fuzzer crash) and an arbitrary memory write prim-
itive that allows application state corruption. To map SPL payloads
to a program trace, BOPC introduces Block Oriented Programming
(BOP), a new code reuse technique that utilizes entire basic blocks
as gadgets along valid execution paths in the program, i.e., without
violating CFI or shadow stack policies. We find that the problem
of mapping payloads to program traces is NP-hard, so BOPC first
reduces the search space by pruning infeasible paths and then uses
heuristics to guide the search to probable paths. BOPC encodes the
BOP payload as a set of memory writes.
We execute 13 SPL payloads applied to 10 popular applications.
BOPC successfully finds payloads and complex execution traces –
which would likely not have been found through manual analysis
– while following the target’s Control-Flow Graph under an ideal
CFI policy in 81% of the cases.
ACM Reference Format:
Kyriakos K. Ispoglou, Bader AlBassam, Trent Jaeger, and Mathias Payer.
2018. Block Oriented Programming: Automating Data-Only Attacks. In 2018
ACM SIGSAC Conference on Computer and Communications Security (CCS
’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA,
16 pages. https://doi.org/10.1145/3243734.3243739
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243739
1 INTRODUCTION
Control-flow hijacking and code reuse attacks have been challeng-
ing problems for applications written in C/C++ despite the de-
velopment and deployment of several defenses. Basic mitigations
include Data Execution Prevention (DEP) [63] to stop code injec-
tion, Stack Canaries [12] to stop stack-based buffer overflows, and
Address Space Layout Randomization (ASLR) [48] to probabilis-
tically make code reuse attacks harder. These mitigations can be
bypassed through, e.g., information leaks [28, 38, 42, 52] or code
reuse attacks [3, 37, 57, 58, 66].
Advanced control-flow hijacking defenses such as Control-Flow
Integrity (CFI) [1, 4, 41, 61] or shadow stacks/safe stacks [23, 40]
limit the set of allowed target addresses for indirect control-flow
transfers. CFI mechanisms typically rely on static analysis to recover
the Control-Flow Graph (CFG) of the application. These analyses
over-approximate the allowed targets for each indirect dispatch
location. At runtime, CFI checks determine if the observed target
for each indirect dispatch location is within the allowed target
set for that dispatch location as identified by the CFG analysis.
Modern CFI mechanisms [41, 44, 45, 61] are deployed in, e.g., Google
Chrome [51], Microsoft Windows 10, and Edge [60].
However, CFI still allows the attacker control over the execu-
tion along two dimensions: first, due to imprecision in the analysis
and CFI’s statelessness, the attacker can choose any of the targets
in the set for each dispatch; second, data-only attacks allow an
attacker to influence conditional branches arbitrarily. Existing at-
tacks against CFI leverage manual analysis to construct exploits for
specific applications along these two dimensions [6, 24, 29, 31, 54].
With CFI, exploits become highly program dependent as the set of
reachable gadgets is severely limited by the CFI policy, so exploits
must therefore follow valid paths in the CFG. Finding a path along
the CFG that achieves the exploit goals is much more complex than
simply finding the locations of gadgets. As a result, building attacks
against advanced control-flow hijacking defenses has become a
challenging, predominantly manual process.
We present BOPC (Block Oriented Programming Compiler) , an
automatic framework to evaluate a program’s remaining attack
surface under strong control-flow hijacking mitigations. BOPC au-
tomates the task of finding an execution trace through a buggy
program that executes arbitrary, attacker-specified behavior. BOPC
compiles an “exploit” into a program trace, which is executed on
top of the original program’s CFG. To express the desired exploits
flexibly, BOPC provides a Turing-complete, high-level language:
SPloit Language (SPL). To interact with the environment, SPL pro-
vides a rich API to call OS functions, direct access to memory, and
an abstraction for hardware registers. BOPC takes as input an SPL
payload and a starting point (e.g., found through fuzzing or manual
analysis) and returns a trace through the program (encoded as a set
of memory writes) that encodes the SPL payload.
The core component of BOPC is the mapping process through
a novel code reuse technique we call Block Oriented Programming
(BOP). First, BOPC translates the SPL payload into constraints for
individual statements and, for each statement, searches for basic
blocks in the target binary that satisfy these constraints (called can-
didate blocks). At this point, SPL abstracts register assignments from
the underlying architecture. Second, BOPC infers a resource (regis-
ter and state) mapping for each SPL statement, iterating through
the set of candidate blocks and turning them into functional blocks.
Functional blocks can be used to execute a concrete instantiation
of the given SPL statement. Third, BOPC constructs a trace that
connects each functional block through dispatcher blocks. Since
the mapping process is NP-hard, to find a solution in reasonable
time BOPC first prunes the set of functional blocks per statement
to constrain the search space and then uses a ranking based on
the proximity of individual functional blocks as a heuristic when
searching for dispatcher gadgets.
We evaluate BOPC on 10 popular network daemons and setuid
programs, demonstrating that BOPC can generate traces from a set
of 13 test payloads. Our test payloads are both reasonable exploit
payloads (e.g., calling execve with attacker-controlled parameters)
as well as a demonstration of the computational capabilities of SPL
(e.g., loops and conditionals). Applications of BOPC go beyond an
attack framework. We envision BOPC as a tool for defenders and
software developers to highlight the residual attack surface of a
program. For example, a developer can test whether a bug at a
particular statement enables a practical code reuse attack in the
program. Overall, we present the following contributions:
• Abstraction: We introduce SPL, a C dialect with access to
virtual registers and an API to call OS and other library
functions, suitable for writing exploit payloads. SPL enables
the necessary abstraction to scale to large applications.
• Search: Development of a trace module that allows execution
of an arbitrary payload, written in SPL, using the target
binary’s code. The trace module considers strong defenses
such as DEP, ASLR, shadow stacks, and CFI alone or in
combination. The trace module enables the discovery of
viable mappings through a search process.
• Evaluation: Evaluation of our prototype demonstrates the
generality of our mechanism and uncovers exploitable vul-
nerabilities where manual exploitation may have been infea-
sible. For 10 target programs, BOPC successfully generates
exploit payloads and program traces to implement code reuse
attacks for 13 SPL exploit payloads for 81% of the cases.
2 BACKGROUND AND RELATED WORK
Initially, exploits relied on simple code injection to execute arbitrary
code. The deployment of Data Execution Prevention (DEP) [63]
mitigated code injection and attacks moved to reusing existing code.
The first code reuse technique, return to libc [26], simply reused
existing libc functions. Return Oriented Programming (ROP) [57]
extended code reuse to a Turing-complete technique. ROP locates
small sequences of code which end with a return instruction, called
“gadgets.” Gadgets are connected by injecting the correct state, e.g.,
by preparing a set of invocation frames on the stack [57]. A number
of code reuse variations followed [3, 9, 32], extending the approach
from return instructions to arbitrary indirect control-flow transfers.
Several tools [30, 46, 53, 55] seek to automate ROP payload gen-
eration. However, the automation suffers from inherent limitations.
These tools fail to find gadgets in the target binary that do not
follow the expected form “inst1; inst2; ... retn;” as they
search for a set of hard coded gadgets that form pre-determined
gadget chains. Instead of abstracting the required computation,
they search for specific gadgets. If any gadget is not found or if a
more complex gadget chain is needed, these tools degenerate to
gadget dump tools, leaving the process of gadget chaining to the
researcher who manually creates exploits from discovered gadgets.
The invention of code reuse attacks resulted in a plethora of new
detection mechanisms based on execution anomalies and heuris-
tics [10, 25, 35, 47, 50] such as frequency of return instructions.
Such heuristics can often be bypassed [7].
While the aforementioned tools help to craft appropriate pay-
loads, finding the vulnerability is an orthogonal process. Automatic
Exploit Generation (AEG) [2] was the first attempt to automatically
find vulnerabilities and generate exploits for them. AEG is limited
in that it does not assume any defenses (such as the now basic DEP
or ASLR mitigations). The generated exploits are therefore buffer
overflows followed by static shellcode.
2.1 Control Flow Integrity
Control Flow Integrity [1, 4, 41, 61] (CFI) mitigates control-flow
hijacking to arbitrary locations (and therefore code reuse attacks).
CFI restricts the set of potential targets that are reachable from
an indirect dispatch. While CFI does not stop the initial memory
corruption, it validates the code pointer before it is used. CFI infers
an (overapproixmate) CFG of the program to determine the allowed
targets for each indirect control-flow transfer. Before each indirect
dispatch, the target address is checked to determine if it is a valid
edge in the CFG, and if not an exception is thrown. This limits the
freedom for the attacker, as she can only target a small set of targets
instead of any executable byte in memory. For example, an attacker
may overwrite a function pointer through a buffer overflow, but the
function pointer is checked before it is used. Note that CFI targets
forward edges, i.e., virtual dispatchers for C++ or indirect function
calls for C.
With CFI, code reuse attacks become harder, but not impossi-
ble [6, 29, 31, 54]. Depending on the application and strength of the
CFI mechanism, CFI can be bypassed with Turing-complete pay-
loads, which are often highly complex to comply with the CFG. So
far, these code-reuse attacks rely on manually constructed payloads.
Deployed CFI implementations [41, 44, 45, 49, 61] use a static
over-approximation of the CFG based on method prototypes and
class hierarchy. PittyPat [27] and PathArmor [64] introduce path
sensitivity that evaluates partial execution paths. Newton [65] in-
troduced a framework that reasons about the strength of defenses,
including CFI. Newton exposes indirect pointers (along with their
allowed target set) that are reachable (i.e., controllable by an ad-
versary) through given entry points. While Newton displays all
usable “gadgets,” it cannot stitch them together and effectively is a
CFI-aware ROP gadget search tool that helps an analyst to manually
construct an attack.
2.2 Shadow Stacks
While CFI protects forward edges in the CFG (i.e., function pointers
or virtual dispatch), a shadow stack orthogonally protects backward
edges (i.e., return addresses). Shadow stacks keep a protected copy
(called shadow) of all return addresses on a separate, protected
stack. Function calls store the return address both on the regular
stack and on the shadow stack. When returning from a function,
the mitigation checks for equivalence and reports an error if the
two return addresses do not match. The shadow stack itself is
assumed to be at a protected memory location to keep the adversary
from tampering with it. Shadow stacks enforce stack integrity and
protect the binary from any control-flow hijacking attack against
the backward edge.
2.3 Data-only Attacks
While CFI mitigates code-reuse attacks, CFI cannot stop data-only
attacks. Manipulating a program’s data can be enough for a success-
ful exploitation. Data-only attacks target the program’s data rather
than its control flow. E.g., having full control over the arguments to
execve() suffices for arbitrary command execution. Also, data in a
program may be sensitive: consider overwriting the uid or a vari-
able like is_admin. Data Oriented Programming (DOP) [34] is the
generalization of data-only attacks. Existing DOP attacks rely on
an analyst to identify sensitive variables for manual construction.
Similarly to CFI, it is possible to build the Data Flow Graph of the
program and apply Data Flow Integrity (DFI) [8] to it. However, to
the best of our knowledge, there are no practical DFI-based defenses
due to prohibitively high overhead of data-flow tracking.
In comparison to existing data-only attacks, BOPC automatically
generates payloads based on a high-level language. The payloads
follow the valid CFG of the program but not its Data Flow Graph.
3 ASSUMPTIONS AND THREAT MODEL
Our threat model consists of a binary with a known memory cor-
ruption vulnerability that is protected with the state-of-the-art
control-flow hijack mitigations, such as CFI along with a Shadow
Stack. Furthermore, the binary is also hardened with DEP, ASLR
and Stack Canaries.
We assume that the target binary has an arbitrary memory
write vulnerability. That is, the attacker can write any value to
any (writable) address. We call this an Arbitrary memory Write
Primitive (AWP). To bypass probabilistic defenses such as ASLR, we