您不能发布到其他用户的帐户，但是您可以用自己的帐户名标记其他用户的映像。这是一组完全有效的命令，如果我想下载特定版本的 Windows Server Core 映像，给它一个更友好的名称，并在 Hub 上以该新名称在我的帐户中使用，我可以运行这些命令:
```
docker image pull mcr.microsoft.com/windows/servercore:1809_KB4480116_amd64
docker image tag mcr.microsoft.com/windows/servercore:1809_KB4480116_amd64 `
  sixeyed/windowsservercore:2019-1811
docker image push sixeyed/windowsservercore:2019-1811
```
Microsoft have used different tagging schemes for their images at different times. Windows Server 2016 images use the full Windows version number, like `10.0.14393.2608`. Windows Server 2019 images use the release name followed by the KB identifier for the most recent Windows update included in the image, like `1809_KB4480116`.
对用户来说，将映像推送到注册表并不比这更复杂，尽管在幕后，Docker 运行着一些智能逻辑。映像分层适用于注册表以及 Docker 主机上的本地映像缓存。当您将基于 Windows Server Core 的映像推送到 Hub 时，Docker 不会上传 4 GB 的基础映像—它知道 MCR 上已经存在基础层，它只会上传目标注册表中缺失的层。
标记公共映像并将其推送到公共中心的最后一个例子是有效的，但不太可能——您更有可能标记映像并将其推送到自己的私有注册表中。
# 运行本地映像注册表
Docker 平台是可移植的，因为它是用 Go 编写的，这是一种跨平台语言。Go 应用可以编译成本机二进制文件，因此 Docker 可以在 Linux 或 Windows 上运行，而用户不必安装 Go。在 Docker Hub 上有一个官方映像，其中包含一个用 Go 编写的注册表服务器，因此您可以通过从该映像运行 Docker 容器来托管自己的映像注册表。
`registry`是一个由 Docker 团队维护的官方存储库，但是在撰写本文时，它只有 Linux 可用的映像。很可能很快就会发布一个 Windows 版本的注册表，但是在本章中，我将引导您构建自己的注册表映像，因为它演示了一些常见的 Docker 使用模式。
*Official repositories* are available on Docker Hub like other public images, but they have been curated by Docker, Inc. and are maintained either by Docker themselves or by the application owners. You can rely on them containing correctly packaged and up-to-date software. The majority of official images have Linux variants, but the number of Windows-based official images is growing.
# 构建注册表映像
Docker 的注册表服务器是一个功能齐全的映像注册表，但它只是 API 服务器——它没有 Docker Hub 那样的 Web UI。这是一个开源应用，托管在`docker/distribution`存储库中的 GitHub 上。要在本地构建应用，您需要首先安装 Go SDK。如果您已经这样做了，您可以运行一个简单的命令来编译应用:
```
go get github.com/docker/distribution/cmd/registry
```
但是如果你不是一个普通的 Go 开发人员，你不希望在你的本地机器上安装和维护 Go 工具的开销仅仅是为了在你想要更新的时候可以构建注册服务器。最好将 Go 工具打包到 Docker 映像中，并设置该映像，以便当您运行容器时，它会为您构建注册表服务器。您可以使用我在[第 3 章](03.html)*中演示的相同的多阶段构建方法来实现这一点.NET 框架和。网络核心应用*。
多阶段模式有很多优点。首先，这意味着您的应用映像可以保持尽可能的轻量级——您不需要将构建工具与运行时打包在一起。其次，这意味着您的构建代理被封装在 Docker 映像中，因此您不需要在构建服务器上安装这些工具。第三，这意味着开发人员可以使用与构建服务器完全相同的构建过程，因此您可以避免开发人员机器和构建服务器安装了不同工具集的情况，避免工具集漂移并导致构建问题的风险。
`dockeronwindows/ch04-registry:2e`的 Dockerfile 使用官方的 Go 映像，在 Docker Hub 上有一个 Windows Server Core 变体。构建器阶段使用该映像来编译注册表应用:
```
# escape=`
FROM golang:1.11-windowsservercore-1809 AS builder
ARG REGISTRY_VERSION="v2.6.2"
WORKDIR C:\gopath\src\github.com\docker
RUN git clone https://github.com/docker/distribution.git; `
    cd distribution; `
    git checkout $env:REGISTRY_VERSION; `
    go build -o C:\out\registry.exe .\cmd\registry 
```
我使用`ARG`指令来指定要构建的源代码版本 GitHub 存储库对每个发布的版本都有标签，我默认为版本 2.6.2。然后我用`git`克隆源代码，切换到代码的标签版本，用`go build`编译应用。Git 客户端和 Go 工具都在基本的`golang`映像中。输出将是`registry.exe`，一个不需要安装 Go 就能运行的原生 Windows 可执行文件。
Dockerfile 的最后阶段使用 Nano Server 作为基础，它可以很好地运行 Go 应用。以下是整个申请阶段:
```
FROM mcr.microsoft.com/windows/nanoserver:1809
ENV REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY="C:\data"
VOLUME ${REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY}
EXPOSE 5000
WORKDIR C:\registry
CMD ["registry", "serve", "config.yml"]
COPY --from=builder C:\out\registry.exe .
COPY --from=builder C:\gopath\src\github.com\docker\...\config-example.yml .\config.yml
```
这个阶段没什么复杂的。首先设置映像:
1.  `REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY`是一个环境变量，注册表使用它作为存储数据的基本路径。
2.  通过使用在环境变量中捕获的路径，为注册表数据创建一个`VOLUME`。
3.  端口`5000`暴露，是 Docker 注册表使用的常规端口。
Dockerfile 的剩余部分为容器设置入口点，并从构建器阶段复制编译后的二进制文件和默认配置文件。
Docker containers in Windows Server 2016 had a different implementation of volumes – the target directory inside the container was actually a symbolic link rather than a normal directory. That caused issues with Go, Java, and other languages. There was a workaround that was made possible by using mapped drives, but that's no longer needed. If you see any Dockerfiles that use a G: drive, they're based on Windows Server 2016 and can be simplified for Windows Server 2019 just by using the C: drive.
构建注册表映像与任何其他映像一样，但是当您使用它来运行自己的注册表时，有一些重要的因素需要考虑。
# 运行注册表容器
通过运行您自己的注册表，您可以在团队成员之间共享映像，并使用快速局域网而不是互联网连接存储所有应用构建的输出。您通常会在这样的配置中可以广泛访问的服务器上运行注册表容器:
![](img/7c1703fa-380c-4361-949b-90883f08e110.png)
注册表运行在服务器(2)上的容器(1)中。客户端机器(3)连接到服务器，以便它们可以使用本地网络上的注册表来推送和拉取私有映像。
要使注册表容器可访问，您需要将端口`5000`从容器发布到主机上的端口`5000`。注册表用户可以使用主机服务器的 IP 地址或主机名访问容器，这将是您在映像名称中使用的注册表域。您还需要从主机装载一个卷，将映像数据存储在一个已知的位置。当您用新版本替换容器时，它仍然可以使用主机的域名，并且它仍然具有由以前的容器存储的所有映像层。
在我的主机服务器上，我有一个配置为磁盘`E:`的 RAID 阵列，我将它用于我的注册表数据，这样我就可以运行我的注册表容器，为数据路径装载该卷:
```
mkdir E:\registry-data
docker container run -d -p 5000:5000 -v E:\registry-data:C:\data dockeronwindows/ch04-registry:2e
```
在我的网络中，我将在 IP 地址为`192.168.2.146`的物理机器上运行容器。我可以使用`192.168.2.146:5000`作为注册域来标记映像，但是这不是很灵活。最好使用主机的域名，这样我就可以在需要时将其指向不同的物理服务器，而不必重新标记所有映像。
对于主机名，您可以使用网络的**域名系统** ( **域名系统**)服务，或者如果您运行的是公共服务器，可以使用**规范名称** ( **CNAME** )。或者，您可以在客户机上的 hosts 文件中添加一个条目，并使用自定义域名。这是我用来为`registry.local`添加主机名条目的 PowerShell 命令，指向我的 Docker 服务器:
```
Add-Content -Path 'C:\Windows\System32\drivers\etc\hosts' -Value "`r`n192.168.2.146 registry.local"
```
现在，我的服务器在一个具有可靠存储的容器中运行一个注册服务器，我的客户端被设置为使用友好的域名访问注册主机。我可以开始从我自己的注册表中推送和提取私有映像，该注册表只对我网络上的用户可用。
# 使用本地注册表推送和拉取映像
只有当映像标签与注册表域匹配时，才能将映像推送到注册表。标记和推送的过程与 Docker Hub 相同，但是您需要在新标记中明确包含本地注册表域。这些命令从 Docker Hub 中提取我的注册表服务器映像，并添加一个新标签，使其适合推送至本地注册表:
```
docker image pull dockeronwindows/ch04-registry:2e
docker image tag dockeronwindows/ch04-registry:2e registry.local:5000/infrastructure/registry:v2.6.2
```
`docker image tag`命令先指定源标签，再指定目标标签。您可以为新的目标标签更改映像名称的每个部分。我使用了以下内容:
*   `registry.local:5000`是注册域。原始映像名称有一个隐含的域`docker.io`。
*   `infrastructure`是账户名称。原户名为`dockeronwindows`。
*   `registry`是存储库名称。原来是`ch04-registry`。
*   `v2.6.2`是映像标签。最初的标签是`2e`。
If you're wondering why all of the images for this book have the `2e` tag, it's because I've used that to identify them as working with the second edition of this book. I didn't use tags for images in the first edition, so they all have the implied tag of `latest`. They still exist on Docker Hub, but by tagging the new versions as `2e`, I can publish images to the same repositories without breaking the code samples for readers of the first edition.
我可以尝试将新的标记映像推送到本地注册表，但是 Docker 不让我使用注册表:
```
> docker image push registry.local:5000/infrastructure/registry:v2.6.2
The push refers to a repository [registry.local:5000/infrastructure/registry]
Get https://registry.local:5000/v2/: http: server gave HTTP response to HTTPS client
```
Docker 平台默认是安全的，同样的原则也适用于映像注册。Docker Engine 希望使用 HTTPS 与注册中心通信，以便对流量进行加密。我的简单注册表安装使用明文 HTTP，所以我得到一个错误，说 Docker 试图对注册表使用加密传输，但只有未加密传输可用。