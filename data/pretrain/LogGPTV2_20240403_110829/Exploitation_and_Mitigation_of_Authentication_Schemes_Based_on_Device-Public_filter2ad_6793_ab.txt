### Device-Public Identifiers and Their Accessibility

All identifiers mentioned in this document, with the exception of the Bluetooth MAC address, are considered device-public information. Applications may require specific permissions to access these identifiers, allowing a vigilant user to detect when a malicious application is attempting to access such information. However, starting with Android 6, a feature was introduced that alerts users when certain permissions are used. A malicious app can bypass this alert by lowering its "Target SDK Version," thereby reverting to an older permission model where the user is not immediately informed when an app uses a permission.

#### ANDROID_ID
- **Description**: A unique ID number set by Android upon the device's first boot or factory reset.
- **Required Permission**: None

#### IMEI
- **Description**: A hardware identifier assigned to each piece of cellular equipment, including the baseband radios of mobile phones.
- **Required Permission**: READ_PHONE_STATE

#### WiFi MAC Address
- **Description**: A unique identifier assigned to most conventional network hardware. It can be obtained using the `ACCESS_WIFI_STATE` permission and the `WifiInfo.getMacAddress()` API.
- **Required Permission**: ACCESS_WIFI_STATE
- **Note**: In Android 6 and later versions, this API always returns `02:00:00:00:00:00`. However, the `NetworkInterface.getHardwareAddress()` API can still be used to access the actual MAC address.

#### Bluetooth MAC Address
- **Description**: A persistent hardware identifier that can be queried using the `BluetoothAdapter.getAddress()` API.
- **Required Permission**: BLUETOOTH
- **Note**: Starting from Android 6, this API also returns `02:00:00:00:00:00`.

#### ADB Serial Number
- **Description**: An identifier used to identify devices on the Android Debug Bridge, which persists across factory resets.
- **Access Method**: Querying the `android.os.SystemProperties` object using the key `ro.serialno`.
- **Required Permission**: None

#### Google Account Email
- **Description**: Used for Single Sign-On in many Android devices.
- **Access Method**: Using the `AccountManager` API.
- **Required Permission**: GET_ACCOUNTS

#### Google Service Framework ID
- **Description**: Used to identify a user when accessing Google Service Framework applications.
- **Required Permission**: READ_GSERVICES

#### Google Advertising ID
- **Description**: A persistent identifier created by Google for advertising purposes, which can be reset by the user.
- **Access Method**: Using the `AdvertisingIdClient` class in the Google Play Services.
- **Required Permission**: None
- **Note**: Google's policy mandates that all advertising must use this identifier exclusively, though it is often not followed in practice.

#### Phone Number
- **Description**: The phone number associated with the SIM card in the device.
- **Access Method**: Using the `getLine1Number` API, which requires the `READ_PHONE_STATE` permission.
- **Required Permission**: READ_PHONE_STATE or READ_CALL_LOG
- **Note**: The returned value is not always reliable and depends on the SIM card manufacturer.

#### Received SMS Messages
- **Description**: Any app with the appropriate permissions can request notifications about the origin and content of new SMS messages.
- **Required Permission**: RECEIVE_SMS or READ_SMS

#### Incoming Phone Calls
- **Description**: Apps can request notifications about incoming calls, including the caller’s number, and read the call history.
- **Required Permission**: READ_CALL_LOG

#### SIM Card Serial Number
- **Description**: An identifier tied to the SIM card, accessible via the `getSimSerialNumber` API.
- **Required Permission**: READ_PHONE_STATE

#### External Storage
- **Description**: Many Android devices have external storage, typically in the form of an SD card. Apps can request the `READ_EXTERNAL_STORAGE` permission to access its contents.
- **Required Permission**: READ_EXTERNAL_STORAGE
- **Note**: Files stored here are publicly accessible and may not be deleted upon app uninstallation. Some apps store authentication cookies in this location, which can be insecure as an attacker could hijack the user’s account by reading these files.

### Proof-of-Concept Attack Implementation

The attack involves two components: the "ID Leaker" and the "ID Injector."

- **ID Leaker**: A malicious app that steals device- and user-specific information and exfiltrates it to the attacker. It requires permissions to access SMS, device call notifications, external storage contents, and static device identifiers.
- **ID Injector**: Uses the Xposed framework to hook Android API methods and spoof the results to return the leaked data. The attacker's device must be rooted to perform this operation.

### Vulnerability Detection

To understand the prevalence of device-public authentication schemes, we developed an automated system to locate vulnerable apps. The system follows these steps:

1. **Capturing Initial Behavior**:
   - Execute the app on multiple devices to collect traces of UI states.
   - Compute an Invariant representing the most common set of behaviors.

2. **Vulnerability Detection**:
   - Clear all app-private data by re-installing the app.
   - Collect new traces and compare them with the Invariant.
   - Look for behavioral differences, which indicate the app may be using device-public information for authentication.

3. **Confirmation**:
   - Transfer the device-public information to a different device.
   - Execute the app again and compare the behaviors to confirm the vulnerability.

This approach helps in identifying apps that use device-public information for authentication, allowing security researchers and developers to address these vulnerabilities.