mance penalties incurred were imperceptible. Perfor-
mance of heap zeroing is analyzed in section 7.
5.3 Results
Table 1 summarizes the results of our experiments. We
ran each application through our modiﬁed Valgrind,
recorded timings for various memory events, and com-
puted the resultant data lifetimes.
The table contains several statistics for each experi-
ment. Run Time is the time for a single run and Allo-
cated is the total amount of heap memory allocated dur-
ing the run. Written is the amount of allocated memory
that was written, and Ideal Lifetime is the ideal lifetime
of the written bytes, calculated from ﬁrst write to last
read for every byte written. Written & Freed is the allo-
cated memory that was ﬁrst written and later deallocated,
and Secure Deallocation Lifetime is the data lifetime ob-
tained by an allocator that zeros data at time of free, as
the time from ﬁrst write to deallocation. Finally, Writ-
ten, Freed, & Overwritten is the allocated bytes that were
written and deallocated and later overwritten, with Nat-
ural Lifetime the data lifetime obtained with no special
effort, as the time from ﬁrst write to overwrite.
The GUI workloads Mozilla and Thunderbird are vi-
sually separated in the table because their data lifetime
characteristics differ markedly from the other workloads,
as we will discuss further in section 5.5 below.
One thing to note about the binary instrumentation
framework Valgrind provides is that it does tend to slow
down CPU-bound programs, dilating the absolute num-
bers for the lifetime of data. However, the relative dura-
tions of the ideal, secure deallocation, and natural life-
times are still valid; and in our workloads, only the
Python experiment was CPU-bound.
5.4 Natural Lifetime is Inadequate
Our results indicate that simply waiting for applications
to overwrite data in the course of their normal execution
(i.e. natural lifetime) produces extremely long and un-
predictable lifetimes.
To begin, many of our test applications free most of
the memory that they allocate, yet never overwrite much
of the memory that they free. For example, the Mozilla
workload allocates 135 MB of heap, writes 96 MB of it,
338
14th USENIX Security Symposium
USENIX Association
Ideal
Lifetime
Secure Deallocation
Written &
Lifetime
Application
Mozilla
Thunderbird
ssh
sshd
Python
Apache
xterm
ls
Run Time
23:04
44:20
30:55
46:19
46:14
1:01:21
46:13
46:02
Allocated Written mean
11 s
135 MB
5 s
232 MB
0 s
6 MB
6 MB
0 s
24 s
352 MB
0 s
57 MB
8 MB
1 s
1 s
86 MB
96 MB
155 MB
6 MB
6 MB
232 MB
5 MB
8 MB
23 MB
stddev
68 s
86 s
0 s
0 s
53 s
0 s
2 s
13 s
Freed mean
21 s
94 MB
153 MB
10 s
0 s
6 MB
6 MB
0 s
232 MB
23 s
5 MB
0 s
1 s
0 MB
22 MB
2 s
Written,
Freed, &
Natural
Lifetime
Overwritten mean
40 s
34 s
7 s
5 s
59 s
0 s
3 s
65 s
80 MB
143 MB
6 MB
6 MB
214 MB
5 MB
0 MB
20 MB
stddev
105 s
162 s
73 s
120 s
131 s
0 s
53 s
326 s
stddev
83 s
120 s
0 s
0 s
53 s
0 s
2 s
15 s
Table 1: Data lifetime statistics for heap allocated memory. Allocated is the total amount of heap memory allocated during each run. Written is the
amount of allocated memory that was actually written, and Ideal Lifetime is the lifetime this written data would have if it were zeroed immediately
after the last time it was read. Written & Freed is allocated bytes that were written and later freed, with Secure Deallocation Lifetime the lifetime
of this data when it is zeroed at deallocation time. Finally, Written & Freed & Overwritten is allocated bytes that were written and freed, then later
reallocated and overwritten by the new owner, with Natural Lifetime the lifetime of this data.
frees about 94 MB of the data it wrote, yet 14 MB of that
freed data is never overwritten.
There are several explanations for this phenomenon.
For one, programs occasionally free data at or near the
end of their execution. Second, sometimes one phase of
execution in a program needs more memory than later
phases, so that, once freed, there is no need to reuse
memory during the run. Third, allocator fragmentation
can artiﬁcially prevent memory reuse (see 3.2 for an ex-
ample).
Our data shows that holes, that is, data that is reallo-
cated but never overwritten, are also important. Many
programs allocate much more memory than they use,
as shown most extremely in our workloads by Python,
which allocated 120 MB more memory than it used, and
Apache, which allocated over 11 times the memory it
used. This behavior can often result in the lifetime of a
block of memory extending long past its time of reallo-
cation.
The natural lifetime of data also varies greatly. In ev-
ery one of our test cases, the natural lifetime has a higher
standard deviation than either the ideal or secure deallo-
cation lifetime. In the xterm experiment, for example,
the standard deviation of the natural lifetime was over
20 times that of the secure deallocation lifetime.
Our experiments show that an appreciable percentage
of freed heap data persists for the entire lifetime of a
program. In our Mozilla experiment, up to 15% of all
freed (and written to) data was never overwritten dur-
ing the course of its execution. Even in programs where
this was not an appreciable percentage, non-overwritten
data still amounted to several hundred kilobytes or even
megabytes of data.
5.5 Secure Deallocation Approaches Ideal
We have noted that relying on overwrite (natural life-
time) to limit the life of heap data is a poor choice, often
leaving data in memory long after its last use and provid-
ing widely varying lifetimes. In contrast, secure deallo-
cation very consistently clears data almost immediately
after its last use, i.e. it very closely approximates ideal
lifetime.
Comparing the Written and Written & Freed columns
in Table 1, we can see that most programs free most of
the data that they use. Comparing Ideal Lifetime to Se-
cure Deallocation Lifetime, we can also see that most
do so promptly, within about a second of the end of the
ideal lifetime. In the same cases, the variability of the
ideal and secure deallocation lifetimes are similar.
Perhaps surprisingly, sluggish performance is not a
common issue in secure heap deallocation. Our Python
experiment allocated the most heap memory of any of the
experiments, 352 MB. If all this memory is freed and ze-
roed at 600 MB/s, the slowest zeroing rate we observed
(see section 7.1), it would take just over half a second, an
insigniﬁcant penalty for a 46-minute experiment.
GUI Programs Table 1 reveals that GUI programs of-
ten delay deallocation longer than other programs, result-
ing in a much greater secure deallocation lifetime than
others.
One reason for this is that GUI programs generally use
data for a short period of time while rendering a page of
output, and then wait while the user digests the informa-
tion. During this period of digestion, the GUI program
must retain the data it used to render the page in case the
window manager decides the application should refresh
its contents, or if the user scrolls the page.
Consequently, the in-use period for data is generally
quite small, only as much to render the page, but the deal-
location period is quite large because data is only deal-
located when, e.g., the user moves on to another web-
page. Even afterward, the data may be retained because,
for user-friendliness, GUI programs often allow users to
backtrack, e.g. via a “back” button.
USENIX Association
14th USENIX Security Symposium
339
6 Kernel Clearing: A Case Study
The previous section examined data lifetime reduction
for a single allocator, the heap, and showed it provided
a signiﬁcant quantitative reduction in lifetime for data in
general. In contrast, this section takes a more qualitative
approach, asking whether our implementation promptly
removes particular sensitive data from our entire system.
In answer, we provide an in-depth case study of data life-
time reduction in several real applications’ treatment of
passwords, as they pass through our kernel.
6.1 Identifying Sensitive Data
We used TaintBochs, our tool for measuring data life-
time, to evaluate the effectiveness of our kernel clear-
ing. TaintBochs is a whole-system simulator based on
the open source x86 simulator Bochs, version 2.0.2. We
conﬁgured Bochs to simulate a PC with an 80386 CPU,
8 GB IDE hard disk, 32 MB RAM, NE2000-compatible
Ethernet card, and VGA video.
TaintBochs provides an environment for tagging sen-
sitive data with “taint” information at the hardware level
and propagating these taints alongside data as it moves
through the system, allowing us to identify where sen-
sitive data has gone. For example, we can taint all in-
coming keystrokes used to type a password as tainted,
and then follow these taints’ propagation through kernel
tty buffers, X server event queue, and application string
buffers.
TaintBochs and its analysis framework is fully de-
scribed in our previous work [5].
6.2 Augmenting Kernel Allocators
To augment kernel allocators to provide secure deallo-
cation, we began with large, page-granular allocations,
handled by the Linux page allocator. We added a bit
to the page structure to allow pages to be individually
marked polluted, that is, containing (possibly) sensitive
data. This bit has an effect only when a page is freed, not
while it is still in use.
Whereas an unmodiﬁed Linux 2.4 kernel maintains
only one set of free pages, our modiﬁed kernel divides
free pages into three pools. The not-zeroed pool holds
pages whose contents are not sensitive but not (known to
be) zeroed. The zeroed pool holds pages that have been
cleared to zeros. The polluted pool holds free pages with
sensitive contents. The code for multiple pools was in-
spired by Christopher Lameter’s prezeroing patches for
Linux 2.6 [17].
Data lifetime is limited by introducing the zeroing
daemon, a kernel thread that wakes up periodically to
zero pages that have been in the polluted pool longer than
a conﬁgurable amount of time (by default 5 seconds).
Thus, our clearing policy is a “deadline” policy, ensuring
that polluted pages are cleared within approximately the
conﬁgured time. This policy is easy to understand: after
a polluted page is freed, we know that it will be cleaned
within a speciﬁed amount of time. It is also simple to
implement, by maintaining a linked list of freed polluted
pages ordered by time of deallocation.
Appendix A describes in detail how allocation re-
quests are satisﬁed from these page pools.
It also de-
scribes our changes to clear kernel I/O buffers as soon as
they are no longer needed.
6.3 Application Workloads
6.3.1 Apache and Perl
We tracked the lifetime of the password through the
Apache web server to a Perl subprocess. Our CGI script
uses Perl’s CGI module to prompt for and accept a pass-
word submitted by the user. The script hashes the pass-
word and compares it to a stored hash, then returns a page
that indicates whether the login was successful.
With an unmodiﬁed kernel, we found many tainted
regions in kernel and user space following the experi-
ments. The kernel contained tainted packet buffers al-
located by the NE2000 network driver and a pipe buffer
used for communication between Apache and the CGI
script. Apache had three tainted buffers: a dynamically
allocated buffer used for network input, a stack-allocated
copy of the input buffer used by Perl’s CGI module, and a
dynamically allocated output buffer used to pass it along
to the CGI subprocess. Finally, Perl has a tainted ﬁle in-
put buffer and many tainted string buffers. All of these
buffers contained the full password in cleartext (except
that some of the tainted Perl string buffers contained only
hashed copies).
Our modiﬁed kernel cleared all of the Perl taints fol-
lowing Perl’s termination. When the Apache process ter-
minated, those taints also disappeared. (Apache can be
set up to start a separate process for each connection, so
kernel-only support for limiting data lifetime may even,
in some cases, be a reasonable way to limit web server
data lifetime in the real world.)
A few tainted variables did remain even in our modi-
ﬁed kernel, such as:
• The response from the CGI process depends on the
correctness of the password, so the response itself is
tainted. Perl allocates a buffer whose size is based
on the length of the response, and the size of the
buffer factors into the amount of memory requested
from the system with the sbrk system call. There-
fore, the kernel’s accounting of the number of com-
340
14th USENIX Security Symposium
USENIX Association
mitted VM pages (vm committed space) be-
comes tainted as well.
• The Linux TCP stack, as required by TCP/IP RFCs,
tracks connections in the TIME WAIT state. The
tracking info includes ﬁnal sequence numbers. Be-
cause the sending-side sequence number is inﬂu-
enced by the length of the tainted response, it is it-
self tainted.
• Apache’s log entries are tainted because they in-
clude the length of the tainted response. Thus, one
page in Linux’s page cache was tainted.
Assuming that the length of the response is not sensi-
tive, these tainted variables cannot be used to determine
sensitive information, so we disregarded them.
6.3.2 Emacs
Our second effectiveness experiment follows the lifetime
of a password entered in Emacs’s shell mode. In shell
mode, an Emacs buffer becomes an interface to a Unix
shell, such as bash, running as an Emacs subprocess.
Shell mode recognizes password prompts and reads their
responses without echoing. We investigated the data life-
time of passwords entered into su in shell mode. We
typed the password, then closed the root shell that it
opened and the outer shell, then exited from Emacs and
logged off.
With an unmodiﬁed kernel, several regions in kernel
and user space were tainted. The kernel pseudo-random
number generator contained the entire user name and
password, used for mixing into the PRNG’s entropy pool
but never erased. Kernel tty buffers did also, in both the
interrupt-level “ﬂip” buffer and the main tty buffer, plus
a second tty buffer used by Emacs to pass keyboard input
to its shell subprocess.