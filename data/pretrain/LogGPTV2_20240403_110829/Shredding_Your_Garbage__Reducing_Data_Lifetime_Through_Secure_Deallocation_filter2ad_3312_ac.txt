### 5.3 Results

Table 1 summarizes the results of our experiments. We ran each application through our modified Valgrind, recorded timings for various memory events, and computed the resultant data lifetimes.

The table includes several statistics for each experiment:
- **Run Time**: The duration of a single run.
- **Allocated**: The total amount of heap memory allocated during the run.
- **Written**: The amount of allocated memory that was written.
- **Ideal Lifetime**: The ideal lifetime of the written bytes, calculated from the first write to the last read for every byte written.
- **Written & Freed**: The allocated memory that was first written and later deallocated.
- **Secure Deallocation Lifetime**: The data lifetime obtained by an allocator that zeros data at the time of deallocation, measured from the first write to deallocation.
- **Written, Freed, & Overwritten**: The allocated bytes that were written, deallocated, and later overwritten.
- **Natural Lifetime**: The data lifetime obtained with no special effort, measured from the first write to the overwrite.

The GUI workloads (Mozilla and Thunderbird) are visually separated in the table because their data lifetime characteristics differ significantly from the other workloads, as discussed further in Section 5.5.

It is important to note that the binary instrumentation framework provided by Valgrind tends to slow down CPU-bound programs, which can affect the absolute numbers for the lifetime of data. However, the relative durations of the ideal, secure deallocation, and natural lifetimes remain valid. In our workloads, only the Python experiment was CPU-bound.

### 5.4 Natural Lifetime is Inadequate

Our results indicate that simply waiting for applications to overwrite data in the course of their normal execution (i.e., natural lifetime) produces extremely long and unpredictable lifetimes.

Many of our test applications free most of the memory they allocate but never overwrite much of the freed memory. For example, the Mozilla workload allocates 135 MB of heap, writes 96 MB of it, and frees about 94 MB of the data it wrote, yet 14 MB of that freed data is never overwritten.

There are several explanations for this phenomenon:
1. Programs occasionally free data at or near the end of their execution.
2. One phase of execution may require more memory than subsequent phases, so once freed, there is no need to reuse the memory.
3. Allocator fragmentation can artificially prevent memory reuse (see Section 3.2 for an example).

Our data also shows that "holes" (data that is reallocated but never overwritten) are significant. Many programs allocate more memory than they use. For instance, Python allocated 120 MB more memory than it used, and Apache allocated over 11 times the memory it used. This behavior can result in the lifetime of a block of memory extending long past its time of reallocation.

The natural lifetime of data varies greatly. In all of our test cases, the natural lifetime has a higher standard deviation than either the ideal or secure deallocation lifetime. For example, in the xterm experiment, the standard deviation of the natural lifetime was over 20 times that of the secure deallocation lifetime.

Our experiments show that a significant percentage of freed heap data persists for the entire lifetime of a program. In the Mozilla experiment, up to 15% of all freed (and written to) data was never overwritten during the course of its execution. Even in programs where this was not a significant percentage, non-overwritten data still amounted to several hundred kilobytes or even megabytes of data.

### 5.5 Secure Deallocation Approaches Ideal

We have noted that relying on overwrite (natural lifetime) to limit the life of heap data is a poor choice, often leaving data in memory long after its last use and providing widely varying lifetimes. In contrast, secure deallocation consistently clears data almost immediately after its last use, closely approximating the ideal lifetime.

Comparing the "Written" and "Written & Freed" columns in Table 1, we can see that most programs free most of the data they use. Comparing the "Ideal Lifetime" to the "Secure Deallocation Lifetime," we can also see that most do so promptly, within about a second of the end of the ideal lifetime. In these cases, the variability of the ideal and secure deallocation lifetimes is similar.

Surprisingly, sluggish performance is not a common issue in secure heap deallocation. Our Python experiment, which allocated the most heap memory (352 MB), would take just over half a second to zero if all this memory is freed and zeroed at the slowest rate we observed (600 MB/s). This is an insignificant penalty for a 46-minute experiment.

**GUI Programs**: Table 1 reveals that GUI programs often delay deallocation longer than other programs, resulting in a much greater secure deallocation lifetime.

One reason for this is that GUI programs generally use data for a short period while rendering a page of output and then wait while the user digests the information. During this period, the GUI program must retain the data it used to render the page in case the window manager decides the application should refresh its contents or if the user scrolls the page.

Consequently, the in-use period for data is generally quite small, only enough to render the page, but the deallocation period is quite large because data is only deallocated when, for example, the user moves on to another webpage. Even afterward, the data may be retained for user-friendliness, as GUI programs often allow users to backtrack, e.g., via a "back" button.

### 6 Kernel Clearing: A Case Study

The previous section examined data lifetime reduction for a single allocator, the heap, and showed it provided a significant quantitative reduction in lifetime for data in general. In contrast, this section takes a more qualitative approach, asking whether our implementation promptly removes particular sensitive data from our entire system. To answer this, we provide an in-depth case study of data lifetime reduction in several real applications' treatment of passwords as they pass through our kernel.

#### 6.1 Identifying Sensitive Data

We used TaintBochs, our tool for measuring data lifetime, to evaluate the effectiveness of our kernel clearing. TaintBochs is a whole-system simulator based on the open-source x86 simulator Bochs, version 2.0.2. We configured Bochs to simulate a PC with an 80386 CPU, 8 GB IDE hard disk, 32 MB RAM, NE2000-compatible Ethernet card, and VGA video.

TaintBochs provides an environment for tagging sensitive data with "taint" information at the hardware level and propagating these taints alongside data as it moves through the system, allowing us to identify where sensitive data has gone. For example, we can taint all incoming keystrokes used to type a password and follow these taints' propagation through kernel tty buffers, X server event queues, and application string buffers.

TaintBochs and its analysis framework are fully described in our previous work [5].

#### 6.2 Augmenting Kernel Allocators

To augment kernel allocators to provide secure deallocation, we began with large, page-granular allocations, handled by the Linux page allocator. We added a bit to the page structure to allow pages to be individually marked as polluted, i.e., containing (possibly) sensitive data. This bit has an effect only when a page is freed, not while it is still in use.

Whereas an unmodified Linux 2.4 kernel maintains only one set of free pages, our modified kernel divides free pages into three pools:
- **Not-zeroed pool**: Holds pages whose contents are not sensitive but not (known to be) zeroed.
- **Zeroed pool**: Holds pages that have been cleared to zeros.
- **Polluted pool**: Holds free pages with sensitive contents.

The code for multiple pools was inspired by Christopher Lameter’s prezeroing patches for Linux 2.6 [17].

Data lifetime is limited by introducing the zeroing daemon, a kernel thread that wakes up periodically to zero pages that have been in the polluted pool longer than a configurable amount of time (by default 5 seconds). Thus, our clearing policy is a "deadline" policy, ensuring that polluted pages are cleared within approximately the configured time. This policy is easy to understand: after a polluted page is freed, we know it will be cleaned within a specified amount of time. It is also simple to implement, by maintaining a linked list of freed polluted pages ordered by time of deallocation.

Appendix A describes in detail how allocation requests are satisfied from these page pools and our changes to clear kernel I/O buffers as soon as they are no longer needed.

#### 6.3 Application Workloads

##### 6.3.1 Apache and Perl

We tracked the lifetime of the password through the Apache web server to a Perl subprocess. Our CGI script uses Perl’s CGI module to prompt for and accept a password submitted by the user. The script hashes the password and compares it to a stored hash, then returns a page indicating whether the login was successful.

With an unmodified kernel, we found many tainted regions in kernel and user space following the experiments. The kernel contained tainted packet buffers allocated by the NE2000 network driver and a pipe buffer used for communication between Apache and the CGI script. Apache had three tainted buffers: a dynamically allocated buffer used for network input, a stack-allocated copy of the input buffer used by Perl’s CGI module, and a dynamically allocated output buffer used to pass it along to the CGI subprocess. Finally, Perl had a tainted file input buffer and many tainted string buffers. All of these buffers contained the full password in cleartext (except that some of the tainted Perl string buffers contained only hashed copies).

Our modified kernel cleared all of the Perl taints following Perl’s termination. When the Apache process terminated, those taints also disappeared. (Apache can be set up to start a separate process for each connection, so kernel-only support for limiting data lifetime may even, in some cases, be a reasonable way to limit web server data lifetime in the real world.)

A few tainted variables did remain even in our modified kernel, such as:
- The response from the CGI process depends on the correctness of the password, so the response itself is tainted. Perl allocates a buffer whose size is based on the length of the response, and the size of the buffer factors into the amount of memory requested from the system with the `sbrk` system call. Therefore, the kernel’s accounting of the number of committed VM pages (vm committed space) becomes tainted as well.
- The Linux TCP stack, as required by TCP/IP RFCs, tracks connections in the TIME WAIT state. The tracking info includes final sequence numbers. Because the sending-side sequence number is influenced by the length of the tainted response, it is itself tainted.
- Apache’s log entries are tainted because they include the length of the tainted response. Thus, one page in Linux’s page cache was tainted.

Assuming that the length of the response is not sensitive, these tainted variables cannot be used to determine sensitive information, so we disregarded them.

##### 6.3.2 Emacs

Our second effectiveness experiment follows the lifetime of a password entered in Emacs’s shell mode. In shell mode, an Emacs buffer becomes an interface to a Unix shell, such as bash, running as an Emacs subprocess. Shell mode recognizes password prompts and reads their responses without echoing. We investigated the data lifetime of passwords entered into `su` in shell mode. We typed the password, then closed the root shell that it opened and the outer shell, then exited from Emacs and logged off.

With an unmodified kernel, several regions in kernel and user space were tainted. The kernel pseudo-random number generator contained the entire user name and password, used for mixing into the PRNG’s entropy pool but never erased. Kernel tty buffers did also, in both the interrupt-level "flip" buffer and the main tty buffer, plus a second tty buffer used by Emacs to pass keyboard input to its shell subprocess.