        $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
        $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
        $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        $TypeBuilder.CreateType()
    }
    function local:Get-ProcAddress {
      Param (
        [OutputType([IntPtr])]
      [Parameter( Position = 0, Mandatory = $True )]
      [String]
      $Module,
        [Parameter( Position = 1, Mandatory = $True )]
      [String]
      $Procedure
        )
        $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
      $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
        $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
        $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')
        $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
        $tmpPtr = New-Object IntPtr
        $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)
        $GetProcAddress.Invoke($null, @([Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
    }
    Start-Sleep -Seconds 10
    $GetForegroundWindowAddr = Get-ProcAddress user32.dll GetForegroundWindow
    $GetForegroundWindowDelegate = Get-DelegateType @() ([IntPtr])
    $GetForegroundWindow = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetForegroundWindowAddr, $GetForegroundWindowDelegate)
    $hWindow = $GetForegroundWindow.Invoke()
    write-host "[+]Checking Flag"
    while($hWindow -eq 0)
    {
      write-host "[+]LockScreen"
      write-host "[+]Wait 10 Seconds..."
      Start-Sleep -Seconds 10
      $GetForegroundWindowAddr = Get-ProcAddress user32.dll GetForegroundWindow
      $GetForegroundWindowDelegate = Get-DelegateType @() ([IntPtr])
      $GetForegroundWindow = [Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetForegroundWindowAddr, $GetForegroundWindowDelegate)
      $hWindow = $GetForegroundWindow.Invoke()
      write-host "[+]Checking Flag"
    }
    write-host "[!]Got Screen!"
  * 导出明文密码
在判断用户重新登录之后即可使用mimikatz导出明文密码，因为这里`UseLogonCredential`的值已经为1，能够导出明文密码
## Credential Caching
何为`Credential Caching`？
> Credntial Caching即凭证缓存。HTTP Server API 仅在用于 NTLM 身份验证的 Keep-Alive (KA)
> 连接上缓存凭据。默认情况下，HTTP Server API 缓存在 KA 连接上发送的第一个请求中获得的凭据。客户端可以在没有授权头的情况下在 KA
> 连接上发送后续请求，并根据之前建立的上下文获取身份验证。
>
> 在这种情况下，HTTP Server API
> 将基于缓存凭据的令牌发送到应用程序。代理发送的请求的凭据不会被缓存。应用程序通过在HTTP_SERVER_AUTHENTICATION_INFO
> 中设置DisableNTLMCredentialCaching标志来禁用 NTLM 凭据缓存在调用
> HttpSetServerSessionProperty 或 HttpSetUrlGroupProperty 时提供的结构。当凭据缓存被禁用时，HTTP
> Server API 会丢弃缓存的凭据并为每个请求执行身份验证
`Domain Cached
Credentials`简称`DDC`，也叫`mscache`。有两个版本，XP/2003年代的叫第⼀代，Vasta/2008之后的是第⼆代。`DDC`的发明其实是`kerberos`的衍生，因为在`kerberos`协议中会有域成员暂时访问不到域控的情况出现，而`DDC`的发明就是为了方便域成员在访问不到域控的情况下诞生的。如果暂时访问不到域控的话，windows会尝试使用本机缓存的凭证进行认证，凭证在本机上默认缓存十条。
缓存的位置在(Administrator也不能够访问)：
    HKEY_LOCAL_MACHINE\SECURITY\Cache
默认情况下为缓存10条缓存
这里首先尝试以下使用`mimikatz`抓取hash，是能够抓取到的
再尝试把缓存次数改为0
这里需要在域内的机器才能够完成实验，这里我换了一台在域内的win7系统。关掉域控再次登录时发现域成员已经限制不能够登录
使用本地administrator帐号登陆上去提权到system，发现抓取不到hash
## Protected Users Group
受保护的用户组，可以用来像本地管理员这样的高权限用户只能通过`kerberos`来认证。这个受保护的用户组是在win2012之后引进的一个安全组(win2008及以前的系统在安装了`KB2871997`补丁之后也会增加这个安全组)。这个安全组的设置就是为了防止明文存储在内存中和ntlm
hash的泄露，原因大概是因为通过`kerberos`认证会更安全。加入的方法也比较简单，只需要把需要保护的用户添加进这个受保护的用户组即可。
## Restricted Admin Mode
何为`Restricted Admin Mode`？
> Restricted Admin Mode即受限管理员模式。最初为 Windows 8.1 和 Server 2012 R2
> 引入（win2008及之前的版本需要KB2871997、KB2973351补丁），受限管理模式是一项 Windows 功能，可防止将 RDP
> 用户的凭据存储在建立 RDP 连接的计算机的内存中。实际上，这将防止用户（通常是管理员）在 RDP 进入受感染主机后从内存中读取他们的凭据。
为防止凭据存储在远程计算机上，受限管理员更改了远程桌面协议，使其使用网络登录而不是交互式登录进行身份验证。有了这种保护，建立 RDP
会话将不需要提供关联的密码；相反，用户的 NTLM Hash 或 Kerberos 票证将用于身份验证。
客户端和服务器的受限管理员已向后 移植 到 Windows 7 和 Server 2008，但在大多数标准 Windows
版本上默认情况下仍处于禁用状态，这是由于围绕其使用的一些注意事项。
`Restricted Admin Mode`的使用需要客户端和服务端相互配合，在服务端开启需要在注册表中添加如下键值
    REG ADD "HKLM\System\CurrentControlSet\Control\Lsa" /v DisableRestrictedAdmin /t REG_DWORD /d 00000000 /f
这里查看下客户端版本是否为`rdp 8.1`
首先管理员模式可以用当前登录凭证进行登录
使用`mimikatz`进行`hash传递`
    sekurlsa::pth /user: /domain: /ntlm:  "/run:mstsc.exe /restrictedadmin"
连接成功
## Summary
本来在研究的时候我以为是`KB2871997`这个补丁直接限制了pass
hash，但是在阅读许多大佬文章后发现，`KB2871997`并不能直接限制pass hash，而是通过几种措施限制：
    1、 支持“ProtectedUsers”组；
    2、 Restricted Admin RDP模式的远程桌面客户端支持；
    3、 注销后删除LSASS中的凭据；
    4、 添加两个新的SID；
    5、 LSASS中只允许wdigest存储明文密码。
其中1、2、5三点在之前都已经提到过这里就不继续延伸了，这里主要说一下3、4两点
首先是第3点，在注销后删除LSASS中的凭据，在更新之前，只要用户登录系统，Windows就会在lsass中缓存用户的凭据，包括用户的明文密码、LM/NTLM
HASH、Kerberos的TGT票据、SessionKey
再就是第4点，在补丁中会添加两个新的SID，分别为S-1-5-113、S-1-5-114
> 本地帐户，LOCAL_ACCOUNT（S-1-5-113），所有本地帐户继承自此SID；  
>
> 本地帐户和管理组成员，LOCAL_ACCOUNT_AND_MEMBER_OF_ADMINISTRATORS_GROUP（S-1-5-114），所有管理员组的本地用户继承此SID。
S-1-5-114这里在中文操作系统中提供的翻译是“NTAUTHORITY\本地帐户和管理员组成员”，但实际上是“所有本地Administrators组中的本地帐户”，即域用户即使被加入到了本地Administrators组也不继承此SID。
这个SID对于限制横向渗透的远程连接并没有任何实质的作用，它的主要作用是更方便的防止通过网络使用本地帐户登录。对于防御人员来说我们可以通过将这两个SID对应的组加入组策略中的下列选项，从而限制攻击者能够从外部访问本地系统/服务：
    拒绝从网络访问这台计算机
    拒绝通过远程桌面服务登录
## Reference