        /**
         * func_0 comment
         */
        public function func_0 ( $arg )
        {
            try
            {
                $mode   = func_1( $arg );
                switch ( $mode )
                {
                /**
                 * case 0
                 */
                case 0 :
                    func_case_0( $mode, $arg );
                    break;
                case 1 :
                    func_case_1( $mode );
                    break;
                default :
                    /**
                     * default
                     */
                    func_default( $mode, " (unexpected)\n" );
                    throw new Exception( "\$mode is invalid" );
                }
            }
            catch ( Exception $e )
            {
                print_r( $e );
                die;
            }
            finally
            {
                echo "Finally\n";
            }
        }
    }
func_0()的反汇编结果(PHP 7):
    TestClass.func_0($arg)
    [0] (11) $arg = RECV(,)
    [1] (15) = INIT_FCALL(,"func_1")
    [2] (15) = SEND_VAR($arg,)
    [3] (15) var_4 = DO_FCALL(,)
    [4] (15) = ASSIGN($mode,var_4)
    [5] (21) tmp_4 = CASE($mode,0x0)
    [6] (21) = JMPNZ(tmp_4,->9)
    [7] (24) tmp_4 = CASE($mode,0x1)
    [8] (24) = JMPZNZ(tmp_4,->18,->14)
    [9] (22) = INIT_FCALL(,"func_case_0")
    [10] (22) = SEND_VAR($mode,)
    [11] (22) = SEND_VAR($arg,)
    [12] (22) = DO_FCALL(,)
    [13] (32) = JMP(->31,)
    [14] (25) = INIT_FCALL(,"func_case_1")
    [15] (25) = SEND_VAR($mode,)
    [16] (25) = DO_FCALL(,)
    [17] (32) = JMP(->31,)
    [18] (31) = INIT_FCALL(,"func_default")
    [19] (31) = SEND_VAR($mode,)
    [20] (31) = SEND_VAL(" (unexpected)\n",)
    [21] (31) = DO_FCALL(,)
    [22] (32) var_4 = NEW("Exception",)
    [23] (32) = SEND_VAL_EX("\$mode is invalid",)
    [24] (32) = DO_FCALL(,)
    [25] (32) = THROW(var_4,)
    [26] (35) = CATCH("Exception",$e)
    [27] (37) = INIT_FCALL(,"print_r")
    [28] (37) = SEND_VAR($e,)
    [29] (37) = DO_ICALL(,)
    [30] (38) = EXIT(,)
    [31] (41) tmp_3 = FAST_CALL(->33,)
    [32] (41) = JMP(->35,)
    [33] (42) = ECHO("Finally\n",)
    [34] (42) = FAST_RET(tmp_3,)
    [35] (44) = RETURN(null,)
为了正确反编译，要设法将下面这一小段汇编指令识别、切分成一个block。
    [5] (21) tmp_4 = CASE($mode,0x0)
    [6] (21) = JMPNZ(tmp_4,->9)
    [7] (24) tmp_4 = CASE($mode,0x1)
    [8] (24) = JMPZNZ(tmp_4,->18,->14)
    [9] (22) = INIT_FCALL(,"func_case_0")
    [10] (22) = SEND_VAR($mode,)
    [11] (22) = SEND_VAR($arg,)
    [12] (22) = DO_FCALL(,)
    [13] (32) = JMP(->31,)
    [14] (25) = INIT_FCALL(,"func_case_1")
    [15] (25) = SEND_VAR($mode,)
    [16] (25) = DO_FCALL(,)
    [17] (32) = JMP(->31,)
    [18] (31) = INIT_FCALL(,"func_default")
    [19] (31) = SEND_VAR($mode,)
    [20] (31) = SEND_VAL(" (unexpected)\n",)
    [21] (31) = DO_FCALL(,)
    [22] (32) var_4 = NEW("Exception",)
    [23] (32) = SEND_VAL_EX("\$mode is invalid",)
    [24] (32) = DO_FCALL(,)[25] (32) = THROW(var_4,)
如何达此目的？学习buildJmpInfo()、recognizeAndDecompileClosedBlocks()的实现。PHP 5与PHP
7有不少差别，但原理是相通的。
recognizeAndDecompileClosedBlocks()识别、切分block之后，主要调用两个函数:
decompileBasicBlock() decompileComplexBlock()
有两种block，一种是基本block，一种是复杂block。下面是一个基本block:
    [1] (15) = INIT_FCALL(,"func_1")
    [2] (15) = SEND_VAR($arg,)
    [3] (15) var_4 = DO_FCALL(,)
    [4] (15) = ASSIGN($mode,var_4)
基本block内部没有分支跳转指令，所有Opcode依次执行，直至基本block结束。
decompileBasicBlock()负责基本block的反编译，需要处理当前PHP版本所支持的大量常见Opcode。无需一步到位支持所有Opcode，可以迭代支持。
"5-25"是复杂block，block中有很多分支跳转指令。
decompileComplexBlock()负责复杂block的反编译，对切分好的复杂block进行具体的模式识别。下面这些函数分别对应不同的控制流模式:
decompile_foreach() decompile_while() decompile_for() decompile_if()
decompile_switch() decompile_tryCatch() decompile_doWhile()
"5-25"会被识别成switch/case。模式识别没有太大难度，跟病毒特征识别、流量特征识别本质上无区别，属于经验迭代；没有难度，但很繁琐，需要足够的样本量进行测试。反编译失败时最大可能就是复杂block模式识别失败，或存在BUG。
只靠前面这些操作得不到最终反编译输出结果，还需要关注:
class Decompiler_Output
该类负责格式化输出，比如各个block的缩进、反缩进。
其他的没必要讲太细，有前述大框架的理解，再动态调试跟踪一下，不断迭代理解即可。总的来说，俄罗斯程序员的PHP
5反编译引擎实现得很有想法，大框架出来了，共性部分已经充分展示。要说不爽，就是这特么是用PHP开发的，对于我这种程序员来说，淡淡的忧伤。
若读者需要开发自己的PHP反编译引擎，可以移植俄罗斯程序员的PHP
5反编译引擎，PHP跟Python之间的移植难度不大，基本上可以行对行翻译。框架移植成功后，再针对PHP
7进行下一步开发，工程实践细节很多，要求对各种Opcode理解较深。
大多数人学PHP是正着学，看语法手册，写Hello World，我是反着来的。不断修正反编译器未处理到的Opcode，在此过程中Source
Insight查看PHP引擎源码，或放狗查询Opcode对应的源码语法、语义。我是被迫反着来的，因为我根本不会PHP编程。胡整中。
比如，我不知道"@unlink()"中这个@是干啥的，我也不知道有这种语法。但我在开发测试PHP反编译器时碰上了BEGIN_SILENCE、END_SILENCE，反查后才知道。然后在反编译引擎中增加对这两个Opcode的处理，设法输出@。
    [120] (69) tmp_16 = BEGIN_SILENCE(,)
    [121] (69) = INIT_FCALL(,"unlink")
    [122] (69) tmp_17 = FETCH_CONSTANT(,"NET_STATUS_FILE")
    [123] (69) = SEND_VAL(tmp_17,)
    [124] (69) = DO_ICALL(,)
    [125] (69) = END_SILENCE(tmp_16,)
实际对应
    @unlink(NET_STATUS_FILE);
完成一版ionCubeDecompile_x64_7.py，成功反编译经ionCube加密过的some_enc.php。前后花了5个月时间，有些偏长了。已经不是二十年前的精神小伙，各方面都在持续退化中。若注意力够集中，在我智力水平巅峰的时候，应该2个月能搞完，再快就超出我的水平了。那些3天写个OS的，都不是人，他们是神。
若是easytoyou免费给用，我绝对不想折腾这事儿。有时别人卡脖子，被迫自力更生，长远看，未尝不是一件好事。
* * *