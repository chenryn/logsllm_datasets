with sequence length n=500, Look-Up Table width ω=20, block size b=5, number of blocks t =20, number of most similar
sequences k=10, and number of sequences N . A plot is given in Figure 4 in Appendix A
N
100
200
300
400
500
[13]
25 min
50 min
80 min
105 min
135 min
Run-time (LAN)
Ours
62 ms
96 ms
132 ms
171 ms
207 ms
Improvement
24 193×
31 250×
36 363×
36 842×
39 130×
[13]
50 MB
100 MB
150 MB
200 MB
250 MB
Communication
Ours
3 MB
4 MB
5 MB
6 MB
7 MB
Improvement
16×
25×
30×
33×
35×
and 32 GB RAM. They are connected via a 1 Gbit/s network with an
average latency of 0.1 ms. All protocols are instantiated with a sym-
metric security parameter of 128 bit. We intentionally exclude the
evaluation part for the preprocessing (extensively discussed in [3])
and aggregation of the databases (extensively discussed in [42]).
Furthermore, the initialization phase (aggregation of the databases)
is a negligible one-time expense and securing the communication
channels using TLS does not add any significant overhead. Cor-
rectness and accuracy of the algorithms of Asharov et al. on real
genomic data was shown in [3, Sect. 5]. Therefore, we use artificial
data in our benchmarks because the performance of SMPC depends
only on the size of the data, but not on concrete values.
5.1 Comparison with Cheng et al. [13]
The most recent related work that covers privacy-preserving Edit
Distance (ED) computations in the outsourcing scenario is [13].
Unfortunately, the authors give the exact run-times only for the
ED computation between two sequences in Table 3 of this paper.
We compare our ED run-times in the system setting of [13], i.e.,
the outsourcing scenario, with the run-times of their most efficient
protocol. We achieve a significant run-time improvement over [13]
of 500× to 1 800× (see Table 3).
We can increase this even further when many sequences are com-
puted in parallel. For this, we (optimistically for [13]) approximate
the benchmarking results of [13, Figure 4 (a)] in Table 4 and in Fig-
ure 4 in Appendix A. As a result of the comparison, our algorithm
outperforms that of Cheng et al. [13] by more than factor 24 000×
in run-time and by more than factor 16× in communication.
5.2 Comparison with Asharov et al. [3]
Here, we compare our privacy-preserving algorithm for ED and
Similar Sequence Query (SSQ) with [3].
In Table 2 and in Figure 4 in Appendix A, we compare our algo-
rithms in the benchmark setting of [3, Table 3], where both parties,
client and server, are run on one machine (our protocol can triv-
ially be applied for direct STPC between the client and server). In
addition, we benchmark our algorithm in the LAN setting.
The authors of [3] do not detail their hardware setting, whereas
we benchmark our algorithm on commodity hardware. Our al-
gorithm outperforms that of Asharov et al. [3] by factor 5-6× in
run-time which is due to more light-weight building blocks. Fur-
thermore, our algorithm is still by factor 3× faster even on a LAN,
compared to the localhost benchmarks of [3]. The communication
Table 5: Large-scale benchmarks of our Similar Sequence
Query algorithm for N sequences of length n, LUT width
ω=30, number of data providers ψ=10, number of most sim-
ilar sequences k=10, block size b=5, and padded block size
b′=16. A plot is given in Figure 5 in Appendix A.
N
n
1 K 100
10 K 100
100 K 100
1 M 100
1 K 1 K
10 K 1 K
100 K 1 K
1 M 1 K
1 K 10 K
10 K 10 K
100 K 10 K
1 M 10 K
Run-time Communication
21.1 MB
138.9 MB
1.4 GB
14.9 GB
129.5 MB
457.8 MB
3.9 GB
38.8 GB
1.2 GB
3.5 GB
26.6 GB
257.2 GB
0.5 s
3.6 s
24.2 s
4.0 min
1.2 s
5.9 s
1.1 min
8.3 min
8.5 s
22.4 s
4.1 min
39.6 min
Table 6: Run-times and communication for Similar Se-
quence Query on whole-genome genome sequences based
on the computation of sub-sequences of smaller lengths
with the following parameters: number of sequences N ,
Look-Up Table widths ω, sequence length n=75 M, block
size b=5, padded block size b′=16, number of most simi-
lar sequences k=10, number of data providers ψ=10, num-
ber of blocks t =15 M, and bit-length of the distances
β=⌈log2(tb′)⌉=28. A plot is given in Figure 6 in Appendix A.
N
ω
10 10
100 10
1 000 10
10 000 10
10 20
100 20
1 000 20
10 000 20
Run-time Communication
2.3 TB
2.4 TB
3.5 TB
14.3 TB
4.6 TB
4.8 TB
7.0 TB
28.6 TB
2.9 h
3.2 h
6.8 h
1.2 d
5.7 h
6.3 h
12.5 h
2.4 d
of our algorithm is slightly lower. This is due to the more efficient
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand324C-OTs instead of general OTs (see Section 4.2) and a more efficient
algorithm for finding k most similar sequences (see Section 3.3.2).
5.3 Batching the Execution for Large-Scale
Benchmarks
For some of our large-scale benchmarks, we split the execution into
multiple steps (i.e., we evaluate subcircuits instead of the entire
circuit) because our STTPs ran out of RAM. We split our algorithms
in a black-box way, i.e., without modifying the primitive protocols
such as distance computation and k-Nearest Neighbors (k-NN). For
the distance computation, this only increases the number of com-
munication rounds because the computation is independent for
each SNP, whereas for the k-NN algorithm we have to perform
additional computation because the result depends on all input
elements, which, however, turns out to be very cheap in terms of
computation and does not add any significant overhead to the over-
all protocol. For example, for one million input genome sequences
in total in the k-NN protocol with k=10 and 100 000 batch size, we
have to perform 10 iterations with 100 000 input size and one itera-
tion of k-NN on the joint output of size 10 · k = 100. Since k-NN
has linear complexity in the number of inputs, the total overhead in
the circuit size is ∼ 100/1 000 000 = 0.000 1 %, which is negligible.
This also does not violate privacy, because the data and interme-
diate results all remain in secret-shared form and, hence, leak no
information.
5.4 Large-Scale Benchmarks
For our large-scale benchmarks on thousands to millions of genomes,
we define global parameters of the block size b=5, padded block
size b′=16, number of data providers ψ =10, and the width of the
LUT ω=30 (for better accuracy). The results of the benchmarks are
given in Table 5 and in Figure 5 in Appendix A. As can be seen in the
table, practical large-scale privacy-preserving SSQs on sequences of
medium lengths are possible. For the sequence lengths n=1 K–10 K
and any number of sequences, and n=100 with the number of se-
quences N =100 K, the run-times are always in the order of seconds.
For all other parameters, the run-times are in the order of min-
utes (even for databases with N =1 M sequences). A few minutes
is a reasonable delay in practice for SSQ which shows real-world
applicability of our protocol to large-scale SSQ.
5.5 Whole-Genome Benchmarks
For our whole-genome benchmarks, we set the genome sequence
length to n=75 M (the same as in [44]) and the LUT width to
ω ∈ {10, 20}. As shown in [13], a LUT width reduction slightly
reduces accuracy, but significantly reduces the communication and
computation of the protocol. The results of our benchmarks are
given in Table 6 and in Figure 6 in Appendix A.
As can be seen in the table, running our protocol on a few hun-
dred whole-genome sequences is practical. For example, a protocol
run on up to N =1 000 sequences takes just a few hours. However,
if we extrapolate the results to the dataset of [44] with N =1 M se-
quences, we would require months to execute the protocol. Thus,
we propose either to use our protocol for whole-genome runs with
relatively small databases (a few hundred sequences) or to use
high-performance hardware.
6 CONCLUSION
In this work, we designed, implemented, and evaluated EPISODE,
a scalable protocol for distributed privacy-preserving Similar Se-
quence Queries (SSQs), which outperforms the state of the art by or-
ders of magnitude. Our protocol for SSQ is based on the approxima-
tion of Edit Distance (ED) computation of [3]. SSQ is performed on
two Semi-Trusted Third Parties (STTPs) that obliviously compute in-
dices of the k most similar sequences to the client’s query. Our proto-
col is not only scalable, but it also substantially reduces the amount
of communication and computation of the client. We implement
our protocol using a mix of generic SMPC protocols and Correlated
Oblivious Transfer (C-OT), which (i) improves the efficiency of our
SSQ protocol by computing its parts using techniques that are most
efficient for the particular tasks, which gives a greater than 20 000×
speed-up compared to the most recent work of Cheng et al. [13],
and (ii) extend the protocol of Asharov et al. [3] for outsourcing
while reducing its communication and computation overhead.
Acknowledgements. This work has been co-funded by the DFG
as part of project E4 within the CRC 1119 CROSSING, and by the
German Federal Ministry of Education and Research (BMBF) and
the Hessen State Ministry for Higher Education, Research and the
Arts (HMWK) within CRISP.
REFERENCES
[1] Md Momin Al Aziz, Dima Alhadidi, and Noman Mohammed. 2017. Secure
approximation of edit distance on genomic data. In BMC Medical Genomics.
[2] Gilad Asharov, Daniel Demmler, Michael Schapira, Thomas Schneider, Gil Segev,
Scott Shenker, and Michael Zohner. 2017. Privacy-preserving interdomain routing
at Internet scale. In Privacy Enhancing Technologies Symposium (PETS).
[3] Gilad Asharov, Shai Halevi, Yehuda Lindell, and Tal Rabin. 2018. Privacy-
preserving search of similar patients in genomic data. In Privacy Enhancing
Technologies Symposium (PETS).
[4] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2013.
More efficient oblivious transfer and extensions for faster secure computation.
In ACM SIGSAG Conference on Computer and Communications Security (CCS).
[5] Mikhail J. Atallah, Florian Kerschbaum, and Wenliang Du. 2003. Secure and
private sequence comparisons. In ACM Workshop on Privacy in the Electronic
Society (WPES).
[6] Mikhail J. Atallah and Jiangtao Li. 2005. Secure outsourcing of sequence compar-
isons. In International Journal of Information Security.
[7] Erman Ayday. 2016. Cryptographic solutions for genomic privacy. In Financial
Cryptography and Data Security (FC).
[8] Donald Beaver. 1996. Correlated pseudorandomness and the complexity of private
computations. In ACM Symposium on Theory of Computing (STOC).
[9] Mihir Bellare, Viet Tung Hoang, Sriram Keelveedhi, and Philip Rogaway. 2013.
Efficient garbling from a fixed-key blockcipher. In IEEE Symposium on Security
and Privacy (S&P).
[10] Dan Bogdanov, Liina Kamm, Sven Laur, and Ville Sokk. 2018. Implementation and
evaluation of an algorithm for cryptographically private principal component
analysis on genomic data. Computational Biology and Bioinformatics (2018).
[11] Charlotte Bonte, Eleftheria Makri, Amin Ardeshirdavani, Jaak Simm, Yves Moreau,
and Frederik Vercauteren. 2018. Towards practical privacy-preserving genome-
wide association study. BMC Bioinformatics (2018).
[12] Niklas Büscher, Daniel Demmler, Stefan Katzenbeisser, David Kretzmer, and
Thomas Schneider. 2018. HyCC: Compilation of Hybrid Protocols for Practical
Secure Computation. In CCS.
[13] Ke Cheng, Yantian Hou, and Liangmin Wang. 2018. Secure similar sequence
query on outsourced genomic data. In ACM Asia Conference on Computer and
Communications Security (ASIACCS).
[14] Marco Chiesa, Daniel Demmler, Marco Canini, Michael Schapira, and Thomas
Schneider. 2017. SIXPACK: Securing internet exchange points against curious
onlookers. In International Conference on emerging Networking EXperiments and
Technologies (CoNEXT).
[15] Hyunghoon Cho, David J Wu, and Bonnie Berger. 2018. Secure genome-wide
association analysis using multiparty computation. Nature biotechnology (2018).
[16] Zoë Corbyn. 2018. How taking a home genetics test could help catch a mur-
derer. https://www.theguardian.com/science/2018/dec/01/how-home-dna-tests