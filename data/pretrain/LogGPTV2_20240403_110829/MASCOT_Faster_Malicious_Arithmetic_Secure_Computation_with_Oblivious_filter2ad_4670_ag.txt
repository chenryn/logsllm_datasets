i m(i) = x · ∆ with(cid:80)
i x(i) and input it to F(cid:74)·(cid:75).
i∈A x(i) and(cid:80)
Simulating the Check phase. Sample r $← Ft to emulate FRand and send it to the corrupted
parties. Emulating FComm, receive σi from corrupted party Pi for i ∈ A.
in HS for all i /∈ A. For i /∈ A, compute σi =(cid:80)t
j as the respective linear combination from values in CS. Fur-
j − ∆(i) · xj) and
For j ∈ [t], compute x(cid:48)
complete the emulation of FComm. If(cid:80)
thermore, look up m(i)
j
j=1 rj · (m(i)
i σi = 0, input OK to F(cid:74)·(cid:75) and ⊥ otherwise.
j and m(cid:48)
Indistinguishability. Now we argue indistinguishability. The LinComb command does not re-
quire communication, and the Initialize command only involve sending random shares and using
FCOPEe, which only outputs random information from the point of view of a single party. Therefore,
the simulation of these commands is easily seen to indistinguishable. It remains to discuss Input,
Open, and Check.
If Pj in the Input phase is not corrupted, it is easy to see that adversary only learns random
information. FCOPEe only outputs random shares, y has r0 · x0 as summand for random single-use
x0, and ΠMACCheck only reveals a random secret sharing of zero because it also contains one-time
randomness in the MAC of x0. The simulation therefore simply generates the required randomness.
More intricate is the simulation for a corrupted Pj. While it is easy to simulate all information
sent to the adversary, the simulation aborts if there is no adequate solution of (3) to be used in
˜∆(i) = 0. Clearly, there exist |F|n−|A|−1 inadequate solutions.
Since every such solution corresponds to a choice of {∆(i)}i /∈A where the MAC check succeeds, the
inexistence of an adequate solution means that the success probability of the adversary is at most
2− log |F| because there are |F|n−|A| possible choices of {∆(i)}i /∈A.
(4). A solution is inadequate if(cid:80)
In the Open procedure, corrupted parties learn the honest parties shares. Using HS ensures that
all the openings are consistent. Furthermore, the sampling constraints ensure that the simulated
honest parties’ shares and the correct corrupted parties’ shares sum up the correct value. Finally,
F(cid:74)·(cid:75) allows the adversary to determine the honest parties’ outputs, which the simulator uses with
values computed as in the real protocol.
i /∈A
The most intricate phase is the Check procedure. While it is straightforward to simulate σi sent
by an honest party Pi, the indistinguishability of the abort behavior requires further discussion.
The idea of our proof is that, once a corrupted player has passed the MAC check in the Input phase,
they only can pass the MAC check for a speciﬁc value for each of their inputs, namely xh computed
in (4). In the following, we will focus on F = F
2k. Later we will discuss F = Fp.
Generally, the sum of the honest parties’ MACs is given by
x(i) · ∆(i) +(cid:88)
m(i) =(cid:88)
(cid:88)
=(cid:88)
x(i) · ∆(i) + (cid:88)
i /∈A
i /∈A
j(cid:54)=i
i /∈A
x(i) · ∆(j)
(cid:88)
(cid:16)
q(i,j) + t(i,j)(cid:17)
i /∈A
j /∈A,i(cid:54)=j
32
Deﬁne the second summand to be Ri. If only checking the opening of this value to x, the honest
party Pi broadcasts σ(i) = m(i) − x · ∆(i). Summing up,
(cid:104)g ∗ x(i,j), ∆(i)
B (cid:105) − t(j,i) + x(i) · ∆(j,i) − q(j,i)
x(i) · ∆(j)
B (cid:105) − t(j,i) + x(i) · ∆(j,i) − q(j,i)
j /∈A,i(cid:54)=j
(cid:104)g ∗ x(i,j), ∆(i)
x(j) + g ∗(cid:88)
x(i,j), ∆(i)
B
j∈A
(cid:17)
(−t(j,i) + x(i) · ∆(j,i) − q(j,i))
.
(cid:69)
x(j) + g ∗(cid:88)
x(j) − x(cid:1) + g ∗(cid:88)
j∈A
j∈A
(cid:69)
(cid:69)
(cid:17)
(cid:17)
.
x(i,j) − g · x, ∆(i)
B
+ Ri
x(i,j), ∆(i)
B
+ Ri
i /∈A
i /∈A
i /∈A
i /∈A
j∈A
j∈A
j∈A
j /∈A
+(cid:88)
(cid:88)
x(i) · ∆(i) + (cid:88)
=(cid:88)
(cid:88)
+(cid:88)
(cid:16)(cid:68)
=(cid:88)
g ·(cid:88)
+(cid:88)
(cid:88)
g ·(cid:88)
=(cid:88)
g ·(cid:0)(cid:88)
=(cid:88)
σ(i) =(cid:88)
−(cid:88)
=(cid:88)
=(cid:88)
m(i) − x · ∆(i)
(cid:16)(cid:68)
(cid:16)(cid:68)
(cid:16)(cid:68)
j /∈A
j /∈A
σ(i)
i /∈A
i /∈A
i /∈A
i∈A
i /∈A
i /∈A
(5)
(6)
(7)
Adapting (5) to the input phase gives that, in order to pass the MAC check, the adversary has
to send {σ(i)}i∈A such that
m(i) − y · ∆(i)
g · y + g ∗(cid:88)
l(cid:88)
(cid:69)
(cid:17)
rh · x(i,j)
h
, ∆(i)
B
+ Ri
,
i /∈A
where Ri is computed as the {rh}l
h=0-weighted sum from the equivalent rest terms in (5). Assuming
that the above equality is satisﬁed for a diﬀerent { ¯∆(i)}i /∈A, we get (3) for ˜∆(i) = ∆(i) − ¯∆(i) for all
i /∈ A. This proves that the set S∆ of {∆(i)}i /∈A fulﬁlling (6) is an aﬃne subspace of Fn−|A|
h=0
.
j∈A
2
Clearly, (4) provides a solution for y =(cid:80)l
(cid:68)
g · xh − g ∗(cid:88)
(cid:69)
h=0 rhxh such that
= 0
, ˜∆(i)
x(i,j)
h
B
j∈A
holds for all h ∈ [l] and some { ˜∆(i)}i /∈A ∈ ˜S∆, where the latter denotes the linear space parallel to
S∆. We have to prove that this is the only solution for a suﬃciently large subspace of ˜S∆, otherwise
the adversary has two sets of {xh}h∈[l] to choose from later. Assume now that, for every f ∈ [l] for
some l ∈ N, there is a diﬀerent set {xf,h}h∈[l] with(cid:80)l
(cid:68)
g · xf,h − g ∗(cid:88)
x(i,j)
h
(cid:69)
i=1 rh · xf,h = y and
, ˜∆(i)
= 0
f,B
(8)
j∈A
33
for all { ˜∆(i)
f }i /∈A ∈ ˜Sf ⊂ ˜S∆ such that | ˜Sf| > 2(n−|A|−1) log |F|. The latter condition is required for
the adversary to be successful with probability more than 2− log |F| at the later opening. Since ˜Sf
clearly is a linear space for all f ∈ [l], and ˜Sf ∩ ˜Sf(cid:48) = {0} by deﬁnition, and | ˜S∆| ≤ 2(n−|A|) log |F|
by deﬁnition, l ≤ log |F|.
Let f (cid:54)= f(cid:48) ∈ [l]. Then, (cid:88)
i /∈A
for all { ˜∆(i)}i /∈A implies that
l(cid:88)
(cid:68)
g · y − g ∗ l(cid:88)
(cid:68)
g ∗(cid:88)
h=0
rh ·(cid:88)
rh ·(cid:88)
j∈A
x(i,j)
h
, ˜∆(i)
B
(cid:69)
= 0
(cid:69)
= 0
, ˜∆(i)
f,B − ˜∆(i)
f(cid:48),B
h=0
i /∈A
x(i,j)
h
j∈A
(cid:17)
˜∆(i)
f(cid:48)
= 0.
(9)
for all {∆(i)
˜∆(i)
f − xf(cid:48),h ·(cid:88)
f(cid:48) }i /∈A ∈ ˜Sf(cid:48). Using (8), we get
f }i /∈A ∈ ˜Sf and {∆(i)
rh ·(cid:16)
l(cid:88)
xf,h ·(cid:88)
f and (cid:80)
(cid:16)
f(cid:48) }i /∈A ∈ ˜Sf(cid:48). It follows that
xf,h ·(cid:88)
f − xf(cid:48),h ·(cid:88)
˜∆(i)
i /∈A
i /∈A
h=0
˜∆(i)
f(cid:48)
i /∈A
i /∈A
(cid:17) (cid:54)= 0
and { ˜∆(i)
argument shows that (cid:80)
By deﬁnition, there exists ¯h ∈ {0, . . . , l} such that xf,h (cid:54)= xf(cid:48),h. Furthermore, a simple counting
f }i /∈A ∈ ˜Sf
f(cid:48) each have at least two results for { ˜∆(i)
˜∆(i)
˜∆(i)
i /∈A
i /∈A
f }i /∈A ∈ ˜Sf and { ˜∆(i)
for some { ˜∆(i)
f(cid:48) }i /∈A ∈ ˜Sf(cid:48). Therefore, by applying the principle of deferred
decisions, the probability of (9) is 2− log |F| over the choice of {rh}l
h=0. Given that there are less than
(log |F|)2 pairs f (cid:54)= f(cid:48) ∈ [l], the overall probability is at most (log |F|)2·2− log |F| = 2− log |F|+2 log log |F|.
We have established that, for every h ∈ [l], there exists a unique xh where the adversary can
(cid:88)
(cid:10)g · xh − g ∗(cid:88)
h is equivalent to guessing(cid:80)