# 二、应用容器管理
在本课中，我们将扩展我们构建到多层设置中的一个容器。这将涉及到将应用分成不同的逻辑部分。例如，我们可以让一个应用在 Docker 容器上运行，并将应用的数据放在一个单独的数据库容器中；然而，两者应该作为一个单一的实体工作。为此，我们将使用 Docker 的工具来运行多容器应用。该工具的名称为`docker-compose`。总之，`docker-compose`是用于定义和运行多容器 Docker 应用的工具。
# 课程目标
本课结束时，您将能够:
*   获得多容器应用设置的概述
*   通过`docker-compose`文件和命令行界面工作
*   管理多个容器和分布式应用包
*   用`docker-compose`建立网络
*   处理和调试不同的应用层
# Docker 工-堆肥工具
让我们先来看看什么是多容器设置，为什么它很重要，以及 Docker 如何使用工具`docker-compose`在这种情况下像魅力一样工作。
我们最近已经了解了应用是如何工作的，以及它们各自独立的元素:前端、后端和数据库。
要使用 Docker 运行这样的多层应用，需要运行以下命令来加速不同终端会话中的容器:
```
- docker run 
- docker run 
- docker run 
```
### 注
您可以使用(`-d`)作为分离运行`docker run`，以防止我们在单独的会话中运行这三个命令，例如:`docker run  -d`
也就是说，它甚至变得特别需要连接不同的容器(网络)。
`docker-compose`进来拯救这一天。我们可以从一个文件中定义和运行多个容器- `docker-compose.yml`。在以下主题中，我们将进一步讨论这一点。首先，让我们安装它。
## 安装 Docker-化合物
如果您在*第 1 课*、*映像和容器中安装了 Docker，则* `docker-compose`很可能安装了 Docker。要确认这一点，请在您的终端中运行`docker-compose`。
如果该命令被识别，您应该有如下输出:
![Installing docker-compose](img/image02_01.jpg)
Windows 用户应该安装 Docker 社区版在旁边安装`docker-compose`。Docker 工具箱在其安装中包括`docker-compose`。
### 注
欲了解更多`docker-compose` 安装步骤，请查看位于:[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)的文档。
在这个问题上，请注意卸载它的各种方法。为了卸载该程序:
转到**程序和功能**。
查找 Docker，右键点击**卸载**。
# 多容器应用设置概述
在上一课中，我们介绍了 Docker 和容器化。我们运行了示例 Python 和 JavaScript 脚本来演示如何将应用容器化以及如何构建映像。我们现在已经准备好运行一个超出这个范围的应用。
在 Dockerfile 中，每一行都描述一个层。Docker 中使用的联合文件系统允许不同的目录透明地重叠，形成一个单一的、一致的文件系统。基础层永远是你赖以建立的形象。每增加一行命令，比如 RUN、CMD 等等，就会增加一层。图层的好处是，只要图层没有被修改，就不会麻烦构建映像的那一部分。其次，当映像从 Docker 映像注册表中拉出时，它是分层拉出的，因此减轻了在映像拉出和推入过程中的连接中断等问题。
许多应用构建在一个共同的结构下:前端**，后端**，以及**数据库**。让我们进一步分解它，并了解如何设置它。
## 前端
当您打开一个 web 应用时，您看到的页面是前端的一部分。有时，前端有控制器(逻辑端)和视图层(哑端)。布局和内容(阅读、HTML 和 CSS)的样式是视图层。这里的内容由控制器管理。
控制器基于用户的动作和/或数据库的变化来影响视图层中呈现的内容。以推特这样的应用为例:如果有人跟踪你，你的数据就会发生变化。控制器将获得这一变化，并用新数量的追随者更新视图层。
## 后端
你可能听说过“模型-视图-控制器”这个术语。T3 模型位于应用中事物的后端。以推特为例，这个模型并不关心 HTML 或它的布局。它处理应用的状态:关注者和你关注的人的数量，推文，映像，视频，等等。
### 注
这是后端层包括的内容的总结。后端主要处理应用的逻辑。这包括操作数据库的代码；这意味着所有的查询都来自后端。然而，请求来自**前端**。例如，当用户单击按钮时，就会发生这种情况。
您可能还听说过“应用编程接口”这个术语。API 是代表**应用接口**的首字母缩写。这个也坐在后端。API 公开了应用的内部工作方式。
这意味着应用编程接口也可以是应用的后端或逻辑层。
让我们用推特的例子来说明这一点。诸如发布推文和搜索推文之类的操作可以很容易地作为方法存在于一个应用编程接口中，如果该应用编程接口被公开，则可以从任何前端应用调用这些方法。
### 注
Docker 和`docker-compose` CLIs 实际上是 API 调用，例如当与外部资源或内容交互时，比如 Docker Hub。
## 数据库
数据库包含易于访问、管理和更新的组织数据(信息)。我们有基于文件的数据库和基于服务器的数据库。
基于服务器的数据库包括运行的服务器进程，接受请求和读写数据库文件本身。例如，数据库可以在云中。
### 注
基于服务器的数据库托管在虚拟主机上，大多数托管在云平台上，如谷歌云平台和亚马逊网络服务。例如亚马逊 RDS 和谷歌云 SQL for PostgreSQL。
从以下链接获取基于服务器的数据库:
*   [https://aws.amazon.com/rds/postgresql/](https://aws.amazon.com/rds/postgresql/)
*   [https://cloud.google.com/sql/docs/postgres](https://cloud.google.com/sql/docs/postgres)
简而言之，开发总是涉及构建应用层，考虑到云平台的价格以及所涉及的开发和运营(简称 DevOps)，运输一直是一件麻烦事。
Docker 和`docker-compose`帮助我们将所有的应用组件作为一个捆绑包来管理，这样更便宜、更快、更容易管理。`docker-compose`帮助我们通过一个文件和非常简单的定义来协调所有的应用层。
在我们总结这个概述时，重要的是要知道，随着时间的推移，开发人员创造了不同的栈变体来总结他们应用的前端、后端和数据库结构。以下是它们的列表及其含义(在本课程中，我们不会深入探讨):
*   PREN -邮政总局，反应，快递，节点
*   平均值-蒙古数据库，快速，角度，节点
*   vpen-vuej、postgresdb、Express、Node.js
*   LAMP - Linux、Apache、MySQL、PHP
### 注
重要的是要知道应用是以这种方式构建的，以管理关注点的分离。
有了应用结构的知识，我们就可以进入`docker-compose` CLI，将这些知识运用到工作中。
## 使用 Docker-化合物
使用`docker-compose`需要三个步骤:
1.  使用`Dockerfile`将应用的环境构建为映像。
2.  使用`docker-compose.yml`文件定义应用运行所需的服务。
3.  运行`docker-compose up`运行应用。
### 注
`docker-compose`是一个**命令行界面**就像 Docker CLI 一样。运行`docker-compose`给出了命令列表以及如何使用每个命令。
我们在上一课中浏览了映像，因此取消了步骤 1。
部分`docker-compose`版本与部分 Docker 版本不兼容。
我们将在步骤 2 上停留一段时间。
以下是`docker-compose`文件:
*   一个运行我们在上一课中创建的两个映像:
![Using docker-compose](img/image02_02.jpg)
### 注
参考放置在`Code/Lesson-2/example-docker-compose.yml`的完整代码。
前往[https://goo.gl/11rwXV](https://goo.gl/11rwXV)进入密码。
### 对接器-组合第一次运行
1.  新建一个目录并命名`py-js`；如果您愿意，可以使用不同的目录名。
2.  在目录中创建新文件并命名为`docker-compose.yml`。复制上面图片的内容或者在示例- `docker-compose.yml`上分享的示例。
3.  从目录中运行命令`docker-compose up`。
注意运行`js-docker` 和`python-docker`的输出。这也是因为我们有上一课本地构建的两个映像。
如果您没有映像，运行`docker-compose up`将导致错误或试图从 Docker Hub 中提取它(如果它在线存在的话):
![docker-compose first run](img/image02_03.jpg)
*   一个运行 **WordPress** 的`docker-compose.yml`。WordPress 是一个免费开放的源码**内容** **管理系统** **(CMS)** 基于 PHP 和 MySQL。
## 活动 1 —使用 docker-compose 运行 WordPress
让你熟悉运行`docker-compose`命令。
你被要求使用`docker-compose`建立一个 WordPress 网站。
1.  创建一个新目录并命名为`sandbox`。
2.  Create a new file and name it `docker-compose.yml.` Add the code in `wordpress-docker-compose.yml` or copy the following figure:
    ![Activity 1 — Running WordPress Using docker-compose](img/image02_04.jpg)
### 注
参考放置在`Code/Lesson-2/wordpress-docker-compose.yml`的完整代码。
前往[https://goo.gl/t7UGvy](https://goo.gl/t7UGvy)进入密码。
### 注
注意文件中的缩进。缩进行时，建议使用相等数量的制表符和空格。
在`sandbox` 目录下运行`docker-compose up`:
![Activity 1 — Running WordPress Using docker-compose](img/image02_05.jpg)
### 注
您会注意到，基于一个文件，我们有一个应用正在运行。这个例子是`docker-compose`力量的完美展示。
运行`docker ps`。您将看到容器正在运行:
![Activity 1 — Running WordPress Using docker-compose](img/image02_06.jpg)
打开您的浏览器，进入地址:`http://0.0.0.0:8000/`。我们将准备好 WordPress 网站。
继续设置，一会儿，你就有了一个 WordPress 站点。
### 对接器-构成档案:对接器-构成. yml
`docker-compose.yml`是 YAML 文件。它定义了**服务、网络**和**卷**。
### 注
服务是应用容器定义，包括与应用相关的所有组件，例如**数据库、前端**或**后端**。定义服务时真正重要的是组件，即网络、卷和环境变量。
任意`docker-compose.yml`的第一行定义了`docker-compose` 文件格式的版本。
通过运行`docker -v`，您可以知道哪个 Docker 版本正在运行，从而知道将哪个版本放在文件的第一行。
对于`docker-compose`文件格式 1.0，第一行不是必须的。每个`docker-compose`文件都引入了一个新的配置或否决了一个更早的配置。
我们将使用 3.3 版本，程序应该与 3.0 及以上版本兼容。
确保每个人都在运行版本 3，并且至少有一个 1.13.0+的 Docker。
接下来是**服务**。让我们使用这个简化的骨架:
![The docker-compose file: docker-compose.yml](img/image02_07.jpg)
### 注
注意压痕。
在上面的例子中，我们有两个服务，即`db`和`web`。这两个只缩进一次。
定义服务后的下一行定义了映像或构建映像的 Dockerfile。
第 4 行将指定`db` 服务容器将从其运行的映像。我们前面提到了一些栈；`db`映像可以是任何基于服务器的数据库。
### 注
要确认您想要使用的栈是否存在，请运行以下命令:`docker search (例如，`docker search mongo or docker search postgres`)。
第 6 行解释了 web 服务映像将从相对于`docker-compose.yml`的位置(`.`)中的 Dockerfile 构建。
我们也可以在第 6 行定义 Dockerfile 的名称。`docker-compose`将搜索具有所列名称的文件，例如在`docker-compose.yml`中:
```
Line 5| web:build: Dockerfilevolumes:
```
第 7 行到第 10 行给出了 web 服务的更多定义。
正如我们用来构建和运行 WordPress 的`docker-compose.yml`所示，有两种服务:`db`和`wordpress`。在`docker ps,`的输出中，这些是容器名称:`sandbox_wordpress_1`和`sandbox_db_1`。
下划线前的第一个单词表示保存`docker-compose.yml`的目录的名称。容器名中的第二个词是服务名，如`docker-compose.yml`中所定义的。
我们将在下面的主题中进入更多的上下文。
### Docker-复合 CLI
一安装`docker-compose`我就提到你运行`docker-compose`的时候会期待一个选项列表。奔跑`docker-compose –v`。
### 注
这两个命令，`docker-compose`和`docker-compose -v`是唯一可以从终端命令行或 Git bash 上打开的工作目录运行的命令。
否则，`docker-compose` 中的其他选项只在`docker-compose.yml` 文件存在的情况下运行。
让我们深入挖掘常见的命令:`docker-compose build`。
该命令在模板`docker-compose.ym`中构建`docker-compose line: (build: .)`中引用的映像。
建筑形象也可以通过`docker-compose up`命令实现。请注意，除非映像尚未构建，或者最近发生了影响要运行的容器的更改，否则这种情况不会发生。
### 注
该命令也适用于 WordPress 示例，即使两个服务都是从 Docker 注册表中的映像运行，而不是从目录中的 Docker 文件运行。这将是**拉**一个映像而**不构建**，因为我们是从 Dockerfile 构建的。
该命令列出了在`docker-compose.yml`中配置的服务:
*   `docker-compose config --services`
此命令列出创建的容器使用的映像: