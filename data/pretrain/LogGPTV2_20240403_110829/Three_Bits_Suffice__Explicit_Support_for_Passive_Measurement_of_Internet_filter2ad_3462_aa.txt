title:Three Bits Suffice: Explicit Support for Passive Measurement of Internet
Latency in QUIC and TCP
author:Piet De Vaere and
Tobias B&quot;uhler and
Mirja K&quot;uhlewind and
Brian Trammell
Three Bits Suffice: Explicit Support for Passive
Measurement of Internet Latency in QUIC and TCP
Piet De Vaere, Tobias Bühler, Mirja Kühlewind, and Brian Trammell
ETH Zurich, Switzerland
ABSTRACT
Passive measurement is a commonly used approach for measuring
round trip time (RTT), as it reduces bandwidth overhead com-
pared to large-scale active measurements. However, passive RTT
measurement is limited to transport-specific approaches, such as
those that utilize Transmission Control Protocol (TCP) timestamps.
Furthermore, the continuing deployment of encrypted transport
protocols such as QUIC hides the information used for passive RTT
measurement from the network.
In this work, we introduce the latency spin signal as a light-
weight, transport-independent and explicit replacement for TCP
timestamps for passive latency measurement. This signal supports
per-flow, single-point and single direction passive measurement
of end-to-end RTT using just three bits in the transport protocol
header, leveraging the existing dynamics of the vast majority of
Internet-deployed transports. We show how the signal applies to
measurement of both TCP and to QUIC through implementation
of the signal in endpoint transport stacks. We also provide a high-
performance measurement implementation for the signal using the
Vector Packet Processing (VPP) framework. Evaluation on emulated
networks and in an Internet testbed demonstrate the viability of
the signal, and show that it is resistant to even large amounts of
loss or reordering on the measured path.
CCS CONCEPTS
• Networks → Network measurement; Transport protocols;
ACM Reference Format:
Piet De Vaere, Tobias Bühler, Mirja Kühlewind, and Brian Trammell. 2018.
Three Bits Suffice: Explicit Support for Passive, Measurement of Internet
Latency in QUIC and TCP. In Proceedings of IMC ’18. ACM, New York, NY,
USA, 7 pages. https://doi.org/TBA
1 INTRODUCTION
Round Trip Time (RTT) is a key metric in Internet measurement
for network operations and research. This measurement is often
performed actively, through the venerable ping utility. However,
due to the overhead that large-scale active measurement introduces,
measuring latency at scale remains an area of active research [7].
Passive RTT measurement can reduce these overheads, but is lim-
ited to transport-specific approaches, such as those that utilize
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
© 2018 Association for Computing Machinery.
ACM ISBN TBA...$TBA
https://doi.org/TBA
Transmission Control Protocol (TCP) timestamps [15] or exploit
the properties of commonly deployed congestion and flow control
algorithms [3].
In this work, we introduce the latency spin signal as a transport-
independent, more efficient, and simpler refinement of the timing
information primitive provided by TCP timestamps. The latency
spin signal requires three bits per packet and adds negligible com-
plexity to endpoint code, but allows any on-path observer to extract
the end-to-end RTT from a flow with minimal state requirements.
Its design follows the “Principles for Measurability in Protocol
Design” proposed by Allman et al. [1], aiming to provide an ex-
plicit, visible, in-band and cooperative signal for passive two-way
latency measurement. The signal does not change transport pro-
tocol dynamics, nor does it require the transmission of packets
that would otherwise not be sent by the protocol. It additionally
allows endpoints to signal that a packet is “delayed” (e.g. because
the application protocol had no data to send), a problem that leads
to issues with existing passive RTT measurement techniques [5].
More specifically, assuming a transport protocol that generates
feedback at least once per RTT – an assumption that holds for the
vast majority of Internet traffic – an observer can extract one RTT
sample per RTT, whether observing one or both sides of the flow.
Explicit support for passive measurability is especially important
in the case of QUIC – a new, encrypted transport protocol originally
designed by Google that is currently under standardization in the
IETF. Google’s deployment of a previous version of QUIC reached
35% of its external traffic by the end of 2016 [9]. Though encap-
sulated in a UDP header for deployability reasons, QUIC provides
reliability and congestion control comparable to TCP, and adds fea-
tures such as stream multiplexing for better support of HTTP traffic.
It also integrates TLS deep into its machinery, running transport
and security handshakes simultaneously, and encrypting not only
its payload but also as much as possible of the transport control
information. This makes it fundamentally different from a passive
measurement standpoint: most of the information used by passive
measurement approaches for TCP is simply not visible to on-path
observers.
For example, while QUIC still uses acknowledgment (ACK)-
based feedback for reliability and congestion control, packets carry-
ing ACK information are indistinguishable from other packets, as
the ACK information is carried in the encrypted part of the packet.
During an active QUIC connection, packets flow in both directions
as in TCP, however, there is no way to correlate a packet in one
direction with the packet that triggered it in the opposite direction,
as it can be done with sequence and acknowledgement numbers in
TCP. The latency spin signal adds this correlation ability back to
the network-visible portion of the QUIC header [16, 17]. Though
the ACK remain invisible, the fact that QUIC produces a minimum
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
De Vaere et al.
amount of feedback during each RTT for congestion control pur-
poses ensures that that the spin signal is trigged once per RTT and
thereby exposed the flow’s current RTT to passive observers.
The latency spin signal is also useful in TCP, as the information it
exposes has comparable utility on the wire to TCP timestamps, with
much less overhead and less inadvertent information exposure. As
the spin signal is independent of the internal transport machinery,
it is less likely to lead to ossification and, in contrast to timestamps,
it does not expose enough information about each endpoint’s clock
to lend itself to fingerprinting [19]. For passive RTT measurements,
the latency spin signal therefore represents a more privacy-friendly
method than the current state of the art.
We evaluate the latency spin signal with implementations of
the signal both in QUIC and TCP. Experimentation with the QUIC
implementation focuses on an emulated environment, as QUIC’s
design and the maturity of implementation is in a state of rapid
flux due to the standardization process. Experimentation with TCP
focuses on results on the open Internet from a variety of access
networks.
With this paper, we make the following contributions:
• The definition of a novel and efficient method to signal per
flow RTT together with approaches to passively measure
this signal.
• The implementation of the latency spin signal in an open-
source QUIC library1 (implementing the draft-05 version of
QUIC) as well as in the Linux kernel’s TCP stack2.
• The implementation of a device based on the Vector Packet
Processing (VPP)3 library that uses the latency spin signal
to measure application RTT.
• The evaluation of a QUIC latency spin signal against related
approaches in a wide variety of emulated network condi-
tions.
• The evaluation of a TCP latency spin signal against TCP
timestamps in an Internet testbed.
spinnext , vecnext , tlast , PNmax ← 0, 1, 0, 0
if PN > PNmax then
if spinnext (cid:44) spinrcv then
vecnext ← min(vecrcv + 1, 3)
tlast ← tsys
1
2 Function OnPacketReceive():
3
4
5
6
7
8
9
10 Function OnPacketSend():
11
12
13
14
15
Algorithm 1: Logic of the spin signal. tsys is the current system
time, PNmax the currently highest packet number.
if is_client then spinnext ← ¬spinrcv
else spinnext ← spinrcv
PNmax ← PN
spinsnd ← spinnext
if tsys − tlast > delaymax then
vecsnd ← min(vecnext , 1)
else vecsnd ← vecnext
vecnext ← 0
(a) Client initiates connection
(b) Server echos spin
(c) Client inverts spin
(d) Packet gets reordered
2 MECHANISM
The latency spin signal is composed of two parts: a spin bit that
changes onces every RTT, and a 2-bit VEC that indicates the valid-
ity of the latency information between two spin bit toggle events
which are called edges. These three bits appear on every packet
sent by each side of a transport connection. The generation of the
signal does not require the generation of additional packets not
otherwise sent by the transport, and does not interfere with the
transport’s own transmission scheduling algortihms. The mecha-
nism is lightweight, and can be added to a transport protocol with
minimal effort4.
2.1 The spin bit
The spin bit itself is the part of the spin signal that is used to actually
monitor the RTT of a flow, as it is toggling once per RTT. A passive
on-path observer can log the period between two transitions and
thereby extract a flow’s RTT.
1https://github.com/pietdevaere/minq
2https://github.com/mami-project/three-bits-suffice
3https://fd.io/technology/
4Our addition of the signal to minq touched approximately 80 lines of code.
(e) Server echos spin
(f) Reordered packets are ignored
Figure 1: The spin bit mechanism: arrows indicate spin val-
ues, filled packets have a non-zero VEC value, and dashed
lines indicate reordered packets.
This toggling behavior is illustrated in Figures 1(a) to 1(c). When
the client initiates a connection, it will start sending packets with
spin 0 (Figure 1(a)). Once the server starts sending packets, it will
echo back the spin value it last received from the server (Figure 1(b)).
Conversely, once the client receives a packet from the server, it will
set the spin of its outgoing packets to the opposite of the spin value it
last received from the server (Figure 1(c)). This asymmetric behavior
will cause the transition point of the spin values to ‘spin’ through
the network, resulting in exactly one spin edge per RTT at any
point in the network and thereby exposing the flow’s RTT between
two edges. Furthermore, when logging the duration between two
edges on different flow directions, the delays from the observation
point up- and downstream to each of the endpoints can be measured
separately — we refer to these as component RTT. This part of the
algorithm is described in Lines 1, 7, 8 and 11 (yellow) of Algorithm 1.
Three Bits Suffice: Explicit Latency Measurement
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
was not distorted. With this mechanism, even an observers that
can only monitor one direction of a flow can also detect distortions
that occurred in the other flow direction. In Section 3.1 we compare
component and full RTT measurements in more detail.