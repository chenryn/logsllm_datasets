2.806s
1.468s
0.897s
2.927s
1.558s
0.913s
2.884s
1.572s
0.918s
(a) Function reuse detection between diﬀerent versions of zlib
Version
Fingerprint
Overall
Threshold Accuracy
1.2.8
0.6
0.65
0.7
92.5%
92.5%
92.5%
Candidate
Time
Size
3526
751
242
(per function)
2.204s
1.258s
0.95s
(b) Function reuse detection between zlib and libpng
Table 1: Results for function reuse detection
similarity; instead, two other functions that happened to
have similar code and structure were ranked ﬁrst. The true
matches were ranked #2. As we increased the ﬁngerprint
similarity threshold from 0.6 to 0.7, these two functions were
ruled out by the ﬁlter; as a result, those true matches be-
come the ones with the highest similarity. This also suggest
that though our ﬁlters are in general lossy, however do not
necessarily always decrease the accuracy.
We also conducted function reuse detection between two
diﬀerent binaries: zlib and libpng. Libpng is a library for
processing PNG image format ﬁles and is dependent on zlib
library. As a result, part of the functions from zlib library
are reused by libpng. We ﬁrst compiled zlib 1.2.8 and libpng
1.6.17 with the debugging information attached. By manu-
ally checking both libraries, we identiﬁed 40 functions that
were user functions in zlib and were reused in libpng. We
then used these 40 functions (with at least four basic blocks)
in zlib as our target functions, and searched for them in the
repository. If the corresponding function in libpng is ranked
ﬁrst, we consider it as a correct match. As shown in Ta-
ble 1b, we correctly identiﬁed 37 reused functions for all the
three diﬀerent ﬁngerprint thresholds, and the overall accu-
racy was consistently 92.5%.
5.2 Patch Analysis
The next experiment is to use BinSequence to recover the
vulnerability information. Nowadays as a result of the de-
velopment of vulnerability mining techniques, more vulner-
abilities are being discovered everyday. After a vulnerability
is reported to the software vendor, they would release a se-
curity patch to ﬁx it often without revealing the detail of the
vulnerability or the part of code they have modiﬁed to the
public. However, by comparing the patched and unpatched
versions of the binary, reverse engineers can analyze and un-
derstand the vulnerability and the patch within hours. This
kind of technique is especially useful for Microsoft’s binaries
as they release the patch regularly and the patched vulner-
ability are concentrated in small areas in the binary [23].
We take MS15-034 [6] as a case study. There is a vul-
nerability in HTTP.sys; when an attacker sends a specially
crafted HTTP request to an aﬀected system, the HTTP
protocol stack may parse it improperly. As a result, the
attacker may execute arbitrary code. Microsoft released a
patch MS15-034 to address this problem.
In order to re-
veal the information of the vulnerability and the patch, we
used BinSequence to compare the unpatched and patched
versions of HTTP.sys. Since the goal is to ﬁnd out which
functions have been patched, we only report functions whose
similarity is not 1 after being patched, as similarity 1 means
the function remains identical (after normalization) in the
patched version.
In total, BinSequence identiﬁed 11 functions, whose simi-
larity is not 1 between the patched and unpatched versions.
We manually checked these 11 function pairs and found out
that 6 functions were actually the same, but were disassem-
bled diﬀerently by IDA Pro. Table 2 lists the remaining 5
functions.
Function
UlpParseRange
UlpBuildSingleRangeMdlChainFromSlices
UlpBuildMultiRangeMdlChainFromSlices
UlpDuplicateChunkRange
UlAdjustRangesToContentSize
Table 2: Patched Functions
Similarity
0.971783
0.915530
0.849870
0.804167
0.501853
id=45
sub eax, edi
sbb ecx, edx
add eax, 1
adc ecx, 0
mov [esi], eax
mov [esi+4], ecx
id=45
push esi
push 0
sub eax, edi
push 1
sbb ecx, edx
push ecx
push eax
call RtlULongLongAdd
test eax, eax
jl loc 6F184
Figure 4: The basic block 45 before and after patching
We then take a closer look at the UlpParseRange func-
tion. Both the pathched and unpatched versions have 60
basic blocks. BinSequence successfully matched all the ba-
sic blocks. Among all these pairs, 59 pairs have a similarity
of 1, which means they remain the same after being patched
(after normalization). The only changed basic block is basic
block number 45.
Figure 4 depicts the basic block 45 before and after the
patch. We can see that the patched version is calling a func-
tion _RtlUlongLongAdd while the unpatched version does
not. We can infer that the original function might contain
an integer overﬂow vulnerability. The patched version in-
vokes the _RtlULongLongAdd to ﬁx it. Moreover, we can
see that the out-degrees of these two basic blocks have been
changed. The out-degree of the unpatched is 1 while the
patched is 2. Despite this structure change, our fuzzy struc-
ture matching approach still succeeded in matching these
two basic blocks.
5.3 Malware Analysis
Our next experiment is conducted on two well known mal-
ware, Citadel and Zeus. We know that Citedel is derived
from Zeus [20]. We also know that Zeus uses RC4 stream
cipher function, and Citadel reuses this function with a slight
modiﬁcation [25]. Given the RC4 function in Zeus, our in-
tention is to use BinSequence to identify the reused RC4
function in Citadel.
We ﬁrst disassembled Zeus using IDA Pro and extracted
the RC4 function. We then used it as our target function.
We also disassembled Citadel and then compared the tar-
get function with every function in Citadel, and ranked the
results according to the similarity score. Table 3 shows the
top 3 functions that have the largest similarity score.
Function
sub_42E92D
sub_432877
sub_430829
Similarity
0.689474
0.429091
0.423913
Table 3: The result of searching RC4 function in Citadel
We manually checked the sub_42E92D function, and con-
ﬁrmed that this is the modiﬁed RC4 function in Citadel. In
total, IDA Pro identiﬁed 794 assembly functions in Citadel.
That is to say, we successfully identiﬁed the modiﬁed RC4
function from these 794 functions. Since 794 functions is
a relatively small data set, we put the RC4 function of
Citadel into those two million functions we used in Section
5.1 and repeated the experiment. Still, BinSequence ranked
the modiﬁed RC4 function as ﬁrst, from a repository with
more than two million functions.
We also used three binary diﬃng tools namely BinDiﬀ [1],
Diaphora [3] and PatchDiﬀ2 [7] to do this experiment. Bin-
Diﬀ is the de facto standard commercial tool for comparing
binary ﬁles and both Diaphora and PatchDiﬀ2 are IDA Pro
plugins for program diﬃng. Using the RC4 function in Zeus
as target, BinDiﬀ matched it with Decrypt_String_by_Index
in Citadel, which is not correct. Diaphora reported sub_40A8B0
with a similarity of 0.22, which is also not correct. We failed
to use PatchDiﬀ2 to do this experiment.
(a) RC4 in Zeus
(b) RC4 in Citadel
Figure 5: The RC4 function
Figure 5a and Figure 5b show the RC4 function in Zeus
and Citadel respectively. Clearly we can see these two CFGs
are by no means isomorphism, yet BinSequence ranked the
modiﬁed RC4 ﬁrst with the highest similarity. Again, this
result demonstrates that our fuzzy matching approach is ef-
fective and accurate.
In fact, most of the functions in Zeus have counterparts
in Citadel with a higher similarity. More speciﬁcally, for 373
(67%) functions in Zeus, Binsequence identiﬁed matches in
Citadel with a similarity of 1, which means they are exactly
identical (after normalization) and 513 (92.1%) functions
with a similarity above 0.8. This also conﬁrms that Citadel
reused most of the Zeus’s functions (functionality). Now
when reverse engineering Citadel, the human analyst can
focus on those new components and functionality, instead of
reanalyzing these reused functions.
5.4 Bug Search
The next experiment is a bug search use case. There is
a heap-based buﬀer overﬂow in resize_context_buffers
function in libvpx library used by Firefox [2]. Our intention
is to use the resize_context_buffers function in libvpx as
our target and identify the buggy function in the repository,
if there is any. According to the vulnerability data source
[2], this bug only exists in Firefox before version 40.0.0. Ac-
cordingly, we downloaded diﬀerent versions of Firefox from
33.0.0 to 40.0.0 directly from the oﬃcial web site. We only
considered the main versions and ignore those subversions.
Firefox
40.0.0
39.0.0
38.0.0
37.0.0
36.0.0
35.0.0
34.0.0
33.0.0
Function
sub_116D3D02
sub_1165C97B
sub_1153BA02
sub_1155BD63
sub_115F7CB3
sub_100CB36B
sub_101800DA
sub_108F3DA4
Similarity
0.427699
0.657224
0.657224
0.657224
0.657224
0.268199
0.268199
0.141892
Rank
1/161,932
1/159,589
1/155,299
1/151,416
1/152,032
1/142,304
1/138,329
1/135,621
Table 4: Search results for diﬀerent versions of Firefox
In total, there are 1,196,522 functions in these 8 versions
of Firefox, and it took 0.271 seconds for BinSequence to
ﬁnish the whole comparison. As shown in Table 4, Bin-
Sequence uniquely identiﬁed the equivalent buggy function
in Firefox 36.0.0, 37.0.0, 38.0.0 and 39.0.0. We manually
checked the assembly and the source code and conﬁrmed
the found functions are indeed the buggy ones. We also
checked the sub_116D3D02 function that has the highest
similarity in Firefox 40.0.0, and found that it was actually
the patched resize_context_buffers function. For Firefox
33.0.0 through 35.0.0, BinSequence found three functions
with a relatively low similarity. We found that these three
versions of Firefox were using a diﬀerent version of libvpx.
As a result, the buggy function actually does not exist in
these three versions. Still, BinSequence reported the ones
with the highest similarity in the corresponding project.
We also used BinDiﬀ, Diaphora and PatchDiﬀ2 to do this
experiment. More speciﬁcally we apply these tools on Fire-
fox 39.0.0 and 40.0.0 since Firefox 39.0.0 contains the equiv-
alent buggy function, and Firefox 40.0.0 has the patched
buggy function. BinDiﬀ correctly identiﬁed the equivalent
buggy function in Firefox 39.0.0 and the patched function in
Firefox 40.0.0. However, we noticed that the heuristic that
BinDiﬀ used was “string references” and one identical string
exists in these functions.
If we modify this string a little
bit and redo the experiment, BinDiﬀ would fail and wrongly
match the buggy function to two other functions. For Fire-
fox 39.0.0 and 40.0.0, both Diaphora and PatchDiﬀ2 failed
to match the buggy function or the patched buggy function.
5.5 Function Matching
In this experiment, we compare BinSequence with FCata-
log [4], Diaphora [3], PatchDiﬀ2 [7] and BinDiﬀ [1] for func-
tion matching. FCatalog performs k-gram analysis and use
minhash signatures to compare two functions. All Diaphora,
PatchDiﬀ2 and BinDiﬀ are binary diﬃng tools and can cre-
ate a mapping of functions between two versions of the same
binary. BinSequence, however is not conﬁned to comparing
two binaries. In this experiment, given a target function in
one binary, we use BinSequence to compare the target with
every function in the other binary and match the target to
the function with the largest similarity score.
Throughout this experiment, we continue to use zlib 1.2.8.
However, we compile it in release mode using two diﬀerent
compilers, namely MSVC 2010 and MSVC 2013. The reason
of choosing two compilers is to introduce certain “noise” into
the code. We then use the functions in zlib 1.2.8 compiled
by MSVC 2010 as our target set, and functions compiled by
MSVC 2013 as the candidate set. For every non-empty func-