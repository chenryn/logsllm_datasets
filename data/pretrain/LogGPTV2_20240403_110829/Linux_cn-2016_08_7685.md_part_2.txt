    return Response(
        'Hello world from Pyramid!\n',
        content_type='text/plain',
    )
config = Configurator()
config.add_route('hello', '/hello')
config.add_view(hello_world, route_name='hello')
app = config.make_wsgi_app()
```
现在，你可以用你自己的 Web 服务器来运行你的 Pyramid 应用了：
```
(lsbaws) $ python webserver2.py pyramidapp:app
WSGIServer: Serving HTTP on port 8888 ...
```
你刚刚让你的服务器去加载 Python 模块 `pyramidapp` 中的可执行对象 `app`。现在你的服务器可以接收请求，并将它们转发到你的 Pyramid 应用中了。在浏览器中输入 http://localhost:8888/hello ，敲一下回车，然后看看结果：
![](/data/attachment/album/201608/15/225605psna77izlooqt9s7.png)
你也可以使用命令行工具 `curl` 来测试服务器：
```
$ curl -v http://localhost:8888/hello
...
```
看看服务器和 `curl` 向标准输出流打印的内容吧。
现在来试试 `Flask`。运行步骤跟上面的一样。
```
from flask import Flask
from flask import Response
flask_app = Flask('flaskapp')
@flask_app.route('/hello')
def hello_world():
    return Response(
        'Hello world from Flask!\n',
        mimetype='text/plain'
    )
app = flask_app.wsgi_app
```
将以上代码保存为 `flaskapp.py`，或者直接从 [Github](https://github.com/rspivak/lsbaws/blob/master/part2/flaskapp.py) 下载，然后输入以下命令运行服务器：
```
(lsbaws) $ python webserver2.py flaskapp:app
WSGIServer: Serving HTTP on port 8888 ...
```
现在在浏览器中输入 http://localhost:8888/hello ，敲一下回车：
![](/data/attachment/album/201608/15/225606t68disvs7hpm6mzy.png)
同样，尝试一下 `curl`，然后你会看到服务器返回了一条 `Flask` 应用生成的信息：
```
$ curl -v http://localhost:8888/hello
...
```
这个服务器能处理 Django 应用吗？试试看吧！不过这个任务可能有点复杂，所以我建议你将整个仓库克隆下来，然后使用 [Github](https://github.com/rspivak/lsbaws/) 仓库中的 [djangoapp.py](https://github.com/rspivak/lsbaws/blob/master/part2/flaskapp.py) 来完成这个实验。这里的源代码主要是将 Django 的 helloworld 工程（已使用 `Django` 的 `django-admin.py startproject` 命令创建完毕）添加到了当前的 Python 路径中，然后导入了这个工程的 WSGI 应用。（LCTT 译注：除了这里展示的代码，还需要一个配合的 helloworld 工程才能工作，代码可以参见 [Github](https://github.com/rspivak/lsbaws/) 仓库。）
```
import sys
sys.path.insert(0, './helloworld')
from helloworld import wsgi
app = wsgi.application
```
将以上代码保存为 `djangoapp.py`，然后用你的 Web 服务器运行这个 Django 应用：
```
(lsbaws) $ python webserver2.py djangoapp:app
WSGIServer: Serving HTTP on port 8888 ...
```
输入以下链接，敲回车：
![](/data/attachment/album/201608/15/225607c4zjg44hxhbc84j4.png)
你这次也可以在命令行中测试——你之前应该已经做过两次了——来确认 Django 应用处理了你的请求：
```
$ curl -v http://localhost:8888/hello
...
```
你试过了吗？你确定这个服务器可以与那三个框架搭配工作吗？如果没试，请去试一下。阅读固然重要，但这个系列的内容是**重新搭建**，这意味着你需要亲自动手干点活。去试一下吧。别担心，我等着你呢。不开玩笑，你真的需要试一下，亲自尝试每一步，并确保它像预期的那样工作。
好，你已经体验到了 WSGI 的威力：它可以使 Web 服务器及 Web 框架随意搭配。WSGI 在 Python Web 服务器及框架之间提供了一个微型接口。它非常简单，而且在服务器和框架端均可以轻易实现。下面的代码片段展示了 WSGI 接口的服务器及框架端实现：
```
def run_application(application):
    """服务器端代码。"""
    ### Web 应用/框架在这里存储 HTTP 状态码以及 HTTP 响应头部，
    ### 服务器会将这些信息传递给客户端
    headers_set = []
    ### 用于存储 WSGI/CGI 环境变量的字典
    environ = {}
    def start_response(status, response_headers, exc_info=None):
        headers_set[:] = [status, response_headers]
    ### 服务器唤醒可执行变量“application”，获得响应头部
    result = application(environ, start_response)
    ### 服务器组装一个 HTTP 响应，将其传送至客户端
    …
def app(environ, start_response):
    """一个空的 WSGI 应用"""
    start_response('200 OK', [('Content-Type', 'text/plain')])
    return ['Hello world!']
run_application(app)
```
这是它的工作原理：
1. Web 框架提供一个可调用对象 `application` （WSGI 规范没有规定它的实现方式）。
2. Web 服务器每次收到来自客户端的 HTTP 请求后，会唤醒可调用对象 `applition`。它会向该对象传递一个包含 WSGI/CGI 变量的环境变量字典 `environ`，以及一个可调用对象 `start_response`。
3. Web 框架或应用生成 HTTP 状态码和 HTTP 响应头部，然后将它传给 `start_response` 函数，服务器会将其存储起来。同时，Web 框架或应用也会返回 HTTP 响应正文。
4. 服务器将状态码、响应头部及响应正文组装成一个 HTTP 响应，然后将其传送至客户端（这一步并不在 WSGI 规范中，但从逻辑上讲，这一步应该包含在工作流程之中。所以为了明确这个过程，我把它写了出来）
这是这个接口规范的图形化表达：
![](/data/attachment/album/201608/15/225608kq2qdigitju2dqvi.png)
到现在为止，你已经看过了用 Pyramid、Flask 和 Django 写出的 Web 应用的代码，你也看到了一个 Web 服务器如何用代码来实现另一半（服务器端的） WSGI 规范。你甚至还看到了我们如何在不使用任何框架的情况下，使用一段代码来实现一个最简单的 WSGI Web 应用。
其实，当你使用上面的框架编写一个 Web 应用时，你只是在较高的层面工作，而不需要直接与 WSGI 打交道。但是我知道你一定也对 WSGI 接口的框架部分感兴趣，因为你在看这篇文章呀。所以，我们不用 Pyramid、Flask 或 Django，而是自己动手来创造一个最朴素的 WSGI Web 应用（或 Web 框架），然后将它和你的服务器一起运行：
```
def app(environ, start_response):
    """一个最简单的 WSGI 应用。
    这是你自己的 Web 框架的起点 ^_^
    """
    status = '200 OK'
    response_headers = [('Content-Type', 'text/plain')]
    start_response(status, response_headers)
    return ['Hello world from a simple WSGI application!\n']
```
同样，将上面的代码保存为 `wsgiapp.py` 或直接从 [Github](https://github.com/rspivak/lsbaws/blob/master/part2/wsgiapp.py) 上下载该文件，然后在 Web 服务器上运行这个应用，像这样：
```
(lsbaws) $ python webserver2.py wsgiapp:app
WSGIServer: Serving HTTP on port 8888 ...
```
在浏览器中输入下面的地址，然后按下回车。这是你应该看到的结果：
![](/data/attachment/album/201608/15/225610rhag2g994fv92zf0.png)
你刚刚在学习如何创建一个 Web 服务器的过程中自己编写了一个最朴素的 WSGI Web 框架！棒极了！
现在，我们再回来看看服务器传给客户端的那些东西。这是在使用 HTTP 客户端调用你的 Pyramid 应用时，服务器生成的 HTTP 响应内容：
![](/data/attachment/album/201608/15/225612v3l3v3a4275j4y24.png)
这个响应和你在本系列第一部分中看到的 HTTP 响应有一部分共同点，但它还多出来了一些内容。比如说，它拥有四个你曾经没见过的 [HTTP 头部](http://en.wikipedia.org/wiki/List_of_HTTP_header_fields)：`Content-Type`, `Content-Length`, `Date` 以及 `Server`。这些头部内容基本上在每个 Web 服务器返回的响应中都会出现。不过，它们都不是被严格要求出现的。这些 HTTP 请求/响应头部字段的目的在于它可以向你传递一些关于 HTTP 请求/响应的额外信息。
既然你对 WSGI 接口了解的更深了一些，那我再来展示一下上面那个 HTTP 响应中的各个部分的信息来源：
![](/data/attachment/album/201608/15/225616pfoomiqmrdswrpqz.png)
我现在还没有对上面那个 `environ` 字典做任何解释，不过基本上这个字典必须包含那些被 WSGI 规范事先定义好的 WSGI 及 CGI 变量值。服务器在解析 HTTP 请求时，会从请求中获取这些变量的值。这是 `environ` 字典应该有的样子：
![](/data/attachment/album/201608/15/225618aptoggjttuzrovvg.png)
Web 框架会利用以上字典中包含的信息，通过字典中的请求路径、请求动作等等来决定使用哪个视图来处理响应、在哪里读取请求正文、在哪里输出错误信息（如果有的话）。
现在，你已经创造了属于你自己的 WSGI Web 服务器，你也使用不同 Web 框架做了几个 Web 应用。而且，你在这个过程中也自己创造出了一个朴素的 Web 应用及框架。这个过程真是累人。现在我们来回顾一下，你的 WSGI Web 服务器在服务请求时，需要针对 WSGI 应用做些什么：
* 首先，服务器开始工作，然后会加载一个可调用对象 `application`，这个对象由你的 Web 框架或应用提供
* 然后，服务器读取一个请求
* 然后，服务器会解析这个请求
* 然后，服务器会使用请求数据来构建一个 `environ` 字典
* 然后，它会用 `environ` 字典及一个可调用对象 `start_response` 作为参数，来调用 `application`，并获取响应体内容。
* 然后，服务器会使用 `application` 返回的响应体，和 `start_response` 函数设置的状态码及响应头部内容，来构建一个 HTTP 响应。
* 最终，服务器将 HTTP 响应回送给客户端。
![](/data/attachment/album/201608/15/225622yi7gzgztyezr42z7.png)
这基本上是服务器要做的全部内容了。你现在有了一个可以正常工作的 WSGI 服务器，它可以为使用任何遵循 WSGI 规范的 Web 框架（如 Django、Flask、Pyramid，还有你刚刚自己写的那个框架）构建出的 Web 应用服务。最棒的部分在于，它可以在不用更改任何服务器代码的情况下，与多个不同的 Web 框架一起工作。真不错。
在结束之前，你可以想想这个问题：“你该如何让你的服务器在同一时间处理多个请求呢？”
敬请期待，我会在第三部分向你展示一种解决这个问题的方法。干杯！
顺便，我在撰写一本名为《搭个 Web 服务器：从头开始》的书。这本书讲解了如何从头开始编写一个基本的 Web 服务器，里面包含本文中没有的更多细节。[订阅邮件列表](https://ruslanspivak.com/lsbaws-part2/)，你就可以获取到这本书的最新进展，以及发布日期。
---
via: 
作者：[Ruslan](https://github.com/rspivak/) 译者：[StdioA](https://github.com/StdioA) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出