_RealisticSEU Sl Bit Rip -0- K-Error 
4.5 
4.5 
:.5 g w 
3  • 
2.5'0 
2  5 
I,St) 
1  .::. 
0.5 
40  ir3 0 
> 
"'20 
10 
3.5 
1.5 
1 
0.5 
adpcmc adpcmd bmath dijkstra 1ft 
ffti gsmt gsmJ jpegc jpegd mad patricia 
siring susan 
Benchmark 
adpcmc aclpcmcl bmath dijkstra fit 
flU  gsmt gsmu jpegc jpegcl  mad polricia string susan 
Benchmark 
(a) Integer register file, average error is 2.5 x 
(b) Reorder buffer, average error is 1.7x 
Figure 3. Application of a realistic SEU model reveals  further reduction i n  AVF when  compared to 
the bit-flip model. Each vertical bar corresponds to 1 000 fault i njection experiments. Each bubble 
over each pair of vertical bars shows error factor for each benchmark. 
3.5 
30 
adpcmc adpcmd bmath dijkstra III 
Iftl  gsmt gsmu jpegc jpegd mad patricia 
string susan 
Benchmarks 
till  gsm\ gsmu ]pegc  ]pegd mad patricia 
strng susan 
Benchmarks 
(a) Integer register file. Average  % difference 
is 35%, and between IBU and 2BU-vert is 85.4%. 
between 1 BU and 2BU-horz 
(b) Reorder buffer. Average  % difference 
19.8%, and between IBU and 2BU-vert is 29%. 
between IBU and 2BU-horz is 
Figure 4. Results of 2-bit u pset fault i njection experiments. 
2.5,---------------------------------------------, 
01BU-AVF 
.Total AVF (new model) 
.Residual 
AVF with SEC 
about whether to include 
or not to include 
protec­
decisions 
tion against 
reliability 
this fault model when ensuring 
that sufficient 
'l 1 
Results 
is met. 
such as those shown in Figures 
in Equation 
u. 
4(a) and 4(b), 
4 based on dis­
as described 
obtained 
For example, 
tests or high-fidelity 
60% of all single-event 
from radiation 
can be combined 
tributions 
device simulations. 
upsets may be upsets on single bits, 20% on two adjacent 
bits on the same word and the remaining 
in adjacent 
words. This case is evaluated 
mark and is shown in Figure 5. The average 
tween vulnerability 
and when assuming 
described 
over all benchmarks. 
evaluated 
the distribution 
combined 
20% on two bits 
for each bench­
single-point 
faults 
using Equation 
above and 
difference 
assuming 
4 is 24.11 % 
be­
3D 
of fault multiplicities 
Fault injection 
a random experiment 
and is 
is inherently 
of introducing 
capable 
noise in observed 
in Figure 4(a) the AVF of 2BU-harz 
therefore 
For example, 
than that of IBU for jpegc and jpegd. While counter­
intuitive 
sults), 
level and can be considered 
of fault injection. 
its value is within the noise at the 9 5% confidence 
results. 
is less 
to the clear overall 
of the random nature 
(and counter 
an artifact 
trends in the re­
5.2. Advantage of Probabilistic 
Framework 
SRAM-based microarchitectural 
structures 
(e.g. regis­
often do not have any form of ECC 
ter files, issue queues) 
because of the demand to meet performance 
However, 
ability 
of low-overhead 
scaling 
inclusion 
of SRAM-based structures, 
error correction 
as aggressive 
technology 
reduces 
the reli­
of some form 
may become necessary. 
In 
requirements. 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
484 
DSN 2010: George et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:00:46 UTC from IEEE Xplore.  Restrictions apply. 
adpcmc adpcmd bmath dijkstra fft  ffti gsm! gsmu jpegc jpegd mad patricia 
string susan 
Benchmarks 
Figu re 5. Average difference between AVF 
computed using conventional single-point 
fault model and 
ing to Equation 4 is 24. 11 %. Black bars show 
residual vulnerability of the fault model when 
a SEC code is  used. Results shown for ex­
periments on the i nteger register file. 
using the new model accord­
to single-bit 
such cases, vulnerability 
be reduced or eliminated, 
covered. 
ful in analyzing 
limited  error-correction 
capabilities. 
but multi-bit 
this residual 
faults may not be 
use­
of 
vulnerability 
transient 
faults 
in the presence 
would 
The proposed probabilistic framework 
will be 
For example, 
a commonly used light-weight 
ECC tech­
(SEC) codes. Conventional 
AVF in the presence 
of SEC 
would predict 
vulnerability 
nique is single error correcting 
ACE analyses 
codes to drop down to O. However, 
that there is a residual 
set fault 
model stemming 
ifesting 
as fault-multiplicities
that evade correction 
codes bring the term corresponding 
and the residual 
terms. The results 
vulnerability 
from spatial 
arises 
4, SEC 
to i =  1 down to 0, 
from the i =  2,3,4, 
that 
. . .  
it is clear from Figure 5 
to the single-event 
multi-bit 
up­
upsets man­
in Figure 5 are from experiments 
by SEC codes. In Equation 
> 1 (2-, 3-, 4-bit upsets etc.) 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
OI----
10 
o 
-- ----
20 
 ------
30 
 ------
40 
1% Execution 
 ----
50 
time windows 
 ------
60 
 ------
70 
 ----
80 
 ------
90 
100 
Figure 6. ACE-analysis estimate  of AVF (using residence times, according to Equation 2) compared 
to that obtained from fault i njection for various benchmarks  for the i nteger register file. Each curve 
obtai ned from fault i njection corresponds to 50,000 fault runs. Average factor of error is 6.6x. 
on the integer  register 
file assuming  that 
from four benchmarks, 
were conducted 
60% of all single-event 
20% cause horizontal 
20% faults 
cause vertical 
upsets cause I-bit upsets (i =  1), 
2-bit upsets (i =  2) and remaining 
5.3. Overestimation 
of ACE Analyses 
Wang et. a!. [15] compare ACE analysis 
estimates 
of 
of the spectrum 
gsmt and gsmu are benchmarks 
of workloads 
represen­
the results 
and the range 
are 
ure 6 shows results 
representative 
of AVF values. 
tative 
age processing 
application. 
application 
and s t ring is a text processing 
2-bit upsets (i =  2). 
of telecommunication 
applications, 
jpegd is an im­
from fault injection 
on an instruction 
6. Discussion 
and Conclusions 
between the ACE-analysis 
because the upper bound sufficiently 
AVF-approximation/prediction 
use conservative 
approaches, 
about the microarchi­
is giving rise to newer transient-fault 
that conventional 
ACE analy­
In [5], Biswas et. 
vulnerability. 
reduce the overestimation 
of AVF of an 
but tighter 
and reorder 
bounds 
can greatly 
scheduler 
to the ACE methodology 
and demonstrate 
overestimates 
buffer, 
We incorporated 
AVF to that obtained 
scheduler 
sis grossly 
a!. show that some key observations 
tecture 
instruction 
remain desirable. 
finements 
teger register 
estimate 
experiments. 
back were counted 
another 
If the register 
were not counted 
was deallocated 
as vulnerable. 
Figure 6 shows the difference 
of AVF and the estimate 
file for a fair comparison 
of AVF to that obtained 
For our ACE analysis, 
write occurred 
vulnerable 
some of these recent re­
in the context 
of the in­
of the ACE analysis 
from our fault injection 
the cycles after a write­
only if that value was read. If 
before a read, the counter 
was reset. 
before a read, those cycles 
register 
performed 
in this experi­
on the integer 
time for each benchmark 
of AVF obtained 
from 
bench­
file for various 
was divided 
time windows in terms of clock cycles. 
estimate 
fault injection 
marks. For the fault injections 
ment, the execution 
into 1 % execution 
Each 1 % window was subjected 
value of 
tion runs within that window to obtain an average 
AVF for that window. Each curve corresponding 
to fault in­
jection 
and 
each point on a curve shows the AVF estimate 
point in the execution 
corresponding 
an estimate 
is a running average, 
up to that 
a point 
time window gives 
of AVF for the first half of the workload. 
to the 50th 1 % execution 
to 500 random fault injec­
of the workload. 
experiments 
For example, 
(solid lines) 
The dashed lines correspond 
to the running average of 
AVF-estimate obtained 
dashed line gives the estimate 
that point in execution 
of that workload. 
to 
Even though Fig-
from ACE analysis. 
Each point on a 
of AVF from the beginning 
Current soft-error 
vulnerability 
estimation 
methods 
First, 
spatial 
including 
aggressive 
mechanisms, 
tech­
and 
multi-bit 
these and other effects would lead to inac­
imple­
mainly suffer from two drawbacks. 
nology scaling 
soft-error 
Not including 
curate estimation 
of vulnerability 
mented using newer technologies. 
scalable 
junction 
bility 
technologies 
to model and assess vulnera­
and future 
models. 
probabilistic 
with fault injection 
of architectures 
This paper presents 
a 
that can be used in con­
particle-induced 
of architectures 
implemented 
soft-error 
using current 
to evolving 
framework 
faults. 
of vulnerability. 
loose upper bounds. This conservatism 
has been 
acceptable 
sources 
Second, widely accepted 
methods (ACE analyses) 
yielding 
considered 
covers all possible 
able method -fault injection, 
timate but takes orders of magnitude 
though vulnerability estimation 
tistical 
as evidenced 
ses is overly conservative 
resources 
es­
longer to obtain. 
Even 
using fault injection 
is a sta­
to [15] and 
and using it can lead to wasted 
designs. 
The other avail­
a more accurate 
in this paper, the upper bound of ACE analy­
method and time consuming, 
and sub-optimal 
according 
provides 
Another argument 
in favor of ACE analysis 
is the notion 
testing. 
that a prototype 
enough is not available 
jection 
design process 
begins with development 
sized from definitions 
tecture 
development 
description 
of detailed 
of the microarchitecture 
that is complete 
at design time to perform fault in­
This is however not the case because the 
of a complex semiconductor 
microprocessor 
of functional 
of the architecture 
languages). 
This usually 
simulations 
synthe­
(e.g. using archi­
with 
follows 
RTL-simulations. 
Each simulation 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
485 
DSN 2010: George et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:00:46 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
-AVf  EsUmate  95oConIIdeoce  Intl)fVaI 
[ I ]  A. Aggarwal and M. Franklin. Energy Efficient Asymmetri­
References 
Experiment 
number 
800 
Figure 7. The AVF estimate quickly settles 
with number of experiments. The 9S%-con­
fidence i nterval at the end of 500 experi­
ments is ±2. 1 S% and after 1 000 experiments 
is ±1.S%. Result shown for benchmark gsmt. 
degrees 
of detail 
has different 
ality and timing properties, 
architectural 
rate and that makes them easily modifiable 
emulate soft errors through 
iments. 
models and simulations 
and is used to prove function­
respectively. 
Detailed 
micro­
are often cycle accu­
the use of fault injection 
exper­
to accurately 
The other feature 
of fault injection 
testing 
normally 
per­
is that it is a statistical 
As demonstrated 
to design 
in a result. 
confidence 
experiment 
where a simulation 
mode only up to the point of fault injection 
ceived as a source of impracticality 
method and that a large number of data points are required 
to obtain significant 
in [14] and [15], and in this paper, it is possible 
experiments 
in a detailed 
a finite cool-down 
ecution 
a large number of experiments. 
that as few as 1000 experiments 
sult that has a narrow confidence 
confidence 
ducted if a higher confidence 
speed up the overall 
Moreover 
are sufficient 
plus 
ex­
for 
time required 
Figure 7 shows 
more experiments 
is required. 
level. However, 
can be used to 
needs to be run 
(± 1.5%) at 9 5% 
interval 
to obtain a re­
can be con­
period before a fast simulation/native 
The experiments 
conducted 
as part of this study made 
desktop computers 
processes 
with multi­
bench­
for the various 
containing 
at least 1000 fault 
application, 
on average, 
a simulator 
runs for each benchmark 
parallel 
Each campaign 
use of high-performance 
core CPUs running 
marks tested. 
injection 
completed 
ware for running simulations, 
modifying 
tion, the overhead 
veals a more accurate 
the conservative 
can be important 
of fault tolerance 
sufficient 
reliability 
help answer the question 
can be reclaimed 
while still meeting a reliability 
with knowledge 
is achieved. 
of testing 
estimate 
Acknowledgements 
in 2-3 days. With the use of inexpensive 
and the up-front 
for achieving 
automated 
hard­
effort of 
fault injec­
time is justified 
because it re­
that is significantly 
less than 
upper bound. This piece of information 
when making decisions 
needs to be included 
about what degree 
in  a design so that 
More importantly, 
-what degree of design margin 
it can 
cally Ported Register 
pages 2-7, 2003. 
Files. Inti Can! on Computer Design, 
[2]  H. Ando, R.  Kan, Y. Tosaka, K. Takahisa, and K. Hatanaka. 
Validation of Hardware Error Recovery 
Mechanisms for the 
SPARC64 V Microprocessor. Dep. Systems & Networks, 
pages 62-69, June 2008. 
[3] J. Arlat, A. Costes, Y. Crouzet, J. C. Laprie, and D. Pow­
ell. Fault Injection 
Tolerant Systems. IEEE Trans. on Camp., 42(8):913-923, 
1 993. 
and Dependability 
Evaluation 
of Fault­
[4] A. Biswas, P. Racunas, R. Cheveresan, J. Emer, S .  Mukher­
jee, and R. Rangan. Computing Architectural 
Factors for Address-Based Structures. Inti Sym. 
Arch. , pages 532-543, June 2005. 
on Camp. 
Vulnerability 
[5] A. Biswas, P. Racunas, J. 
Emer, and S. Mukherjee. Comput­
ing Accurate AVFs using ACE Analysis on Perf. Models: a 
Rebuttal. 
IEEE Camp. Arch. Lellers, 
7 ( 1 ) : 2 1 -
24, 2008. 
[6] G. Georgakos, P. Huber, M. Ostermayr, 
of Increased 
F. Ruckerbauer. 
Rate Due to Neutron Induced SEU in Advanced Embedded 
SRAMs. IEEE Sym. on VLSI Circuits, 
pages 80-81 ,  June 
2007. 
E. Amirante, and 
Multi-Bit Failure 
Investigation 
[7]  M. Guthaus, J. Ringenberg, 
and R. Brown. MiBench:  A Free, Commercially 
tative Embedded Benchmark Suite. Inti Workshop on Work­
load Characterization, 
pages 3-14, 200 1 .  
D.  Ernst, T. Austin, T. Mudge, 
Represen­
[8] P. Hazucha, C .  Svensson, and S .  Wender. Cosmic-Ray Soft 
Error Rate Characterization 
Process. IEEE Journal of Solid-State 
1 429, October 2000. 
of a Standard 0.6-f.lM CMOS 
3 5 :  1 422-
Circuits, 
[9] J. D.  C. Little. A Proof for 
the Queuing Formula: L=A W. 
Operations Research, 9(3): 3 8 3-387,1 96 1 .  
[ 1 0] J .  Maiz, S .  Hareland, K .  Zhang, and P. Armstrong. 
Charac­
of multi-bit soft error events in advanced SRAM s. 
Electron Devices Meeting, pages 2 1 .4.1 
terization 
IEEE International 
-2 1.4.4, December 2003. 
[ I I ]  S .  S .  MukheIjee, J. Emer, T. Fossum, and S .  K. Reinhardt. 
Cache Scrubbing in Microprocessors: Myth or Necessity? 
Pacific Rim Inti Sym. 
on Dep. Camp., pages 37-42, 2004. 
[ 1 2] S .  S. Mukherjee, C. Weaver, J. Emer, S .  K. Reinhardt, 
and 
T. Austin. A Systematic Methodology to Compute the 
Architectural 
Microprocessor. Inti Symposium on Microarchitecture, 
pages 29-40, 2003. 
Factors for a High-Performance 
Vulnerability 
[ 1 3] K. Osada, K. Yamaguchi, Y. Saitoh, and T. Kawa­
hara. SRAM Immunity to Cosmic-Ray-I
Based on Analysis of an Induced Parasitic Bipolar Effect. 
IEEE Journal of Solid-State 
2004. 
39(5):827-833, May 
Circuits, 
nduced Multierrors 
[ 1 4] G. A. Reis, J. Chang, N. Vachharaj ani, R. Rangan, D. I. Au­
of reduced vulnerability 
specification
? 
gust, and S.  S. Mukherjee. Software-Controlled Fault 
erance. ACM Transactions 
2(4): 3 66-396, 2005. 
mization, 
Tol­
and Code Opti­
on Architecture 
The authors 
thank Sudhanva Gurumurthi 
The authors also acknowledge 
able feedback. 
Waterman and Jeanne Dion, of the USNRC, for their re­
views and suggestions. 
mous reviewers 
The authors 
for their comments. 
also thank the anony­
for his invalu­
Michael 
[ 1 5] N.  J. Wang, A. Mahesri , and S .  J. Patel. Examining 
ACE Analysis Reliability 
SIGARCH Camp. Arch. News, 35(2):460-469, 2007. 
Estimates 
Using Fault-Injection. 
[ 1 6]  M.  Yourst. 
PTLsim: A Cycle Accurate Full System x86-64 
on Perf. Analysis of 
Simulator. Inti  Sym. 
Microarchitectural 
Systems and Software, pages 23-34, 2007. 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
486 
DSN 2010: George et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:00:46 UTC from IEEE Xplore.  Restrictions apply.