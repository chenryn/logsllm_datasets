::: title
**在运行 bootstrap 脚本时，FreeRADIUS 不再错误地生成默认证书**
:::
每次启动 FreeRADIUS 时，bootstrap 脚本都运行。在以前的版本中，该脚本会在
`/etc/raddb/certs`{.literal} 目录中生成新的测试证书，因此 FreeRADIUS
服务器有时无法启动，因为这些测试证书无效。例如，证书可能已过期。在这个版本中，bootstrap
脚本会检查 `/etc/raddb/certs`{.literal}
目录，如果它包含任何测试或客户证书，该脚本不会运行，并且 FreeRADIUS
服务器应该可以正确启动。
请注意，测试证书只在配置 FreeRADIUS
时测试目的，不应用于实际环境中。使用用户证书后，应删除 bootstrap 脚本。
([BZ#1954521](https://bugzilla.redhat.com/show_bug.cgi?id=1954521){.link})
[]{#_bug_fixes.html#BZ-1977572}
::: title
**FreeRADIUS 不再无法创建内核转储文件**
:::
在以前的版本中，当 `allow_core_dumps`{.literal} 被设置为 `yes`{.literal}
时，FreeRADIUS
不会创建内核转储文件。因此，不会在任何进程失败时创建核心转储文件。在这个版本中，当将
`allow_core_dumps`{.literal} 设置为 `yes`{.literal} 时，FreeRADIUS
现在会在任何进程失败时创建一个核心转储文件。
([BZ#1977572](https://bugzilla.redhat.com/show_bug.cgi?id=1977572){.link})
[]{#_bug_fixes.html#BZ-1737489}
::: title
**SSSD 正确评估 /etc/krb5.conf 中 Kerberos keytab 名称的默认设置**
:::
在以前的版本中，如果您为 `krb5.keytab`{.literal}
文件定义了非标准位置，SSSD 不会使用此位置，而是使用默认的
`/etc/krb5.keytab`{.literal} 位置。因此，当您尝试登录到系统时，因为
`/etc/krb5.keytab`{.literal} 没有包含条目，登录会失败。
在这个版本中，SSSD 会评估 `/etc/krb5.conf`{.literal} 中的
`default_keytab_name`{.literal} 变量，并使用此变量指定的位置。如果未设置
default\_ `keytab _name 变量，SSSD 仅使用默认的 /etc/krb5.`{.literal}
keytab``{=html} 位置。
(BZ#1737489)
[]{#_bug_fixes.html#BZ-1879869}
::: title
**运行 sudo 命令不再导出 KRB5CCNAME 环境变量**
:::
在以前的版本中，在运行 `sudo`{.literal} 命令后，环境变量
`KRB5CCNAME`{.literal} 指向原始用户的 Kerberos
凭证缓存，目标用户可能无法访问这些缓存。因此，Kerberos
相关的操作可能会失败，因为无法访问这个缓存。在这个版本中，运行
`sudo`{.literal} 命令不再设置 `KRB5CCNAME`{.literal}
环境变量，目标用户可使用其默认的 Kerberos 凭证缓存。
(BZ#1879869)
[]{#_bug_fixes.html#BZ-2005277}
::: title
**Kerberos 现在只请求允许的加密类型**
:::
在以前的版本中，如果未设置 default\_
`tgs _enctypes 或 default_ tkt_enctypes`{.literal} 参数，则 RHEL
不会应用在 `/etc/krb5.conf`{.literal} 文件中的 allowed\_``{=html}
enctypes``{=html} 参数中指定的允许加密类型。因此，Kerberos
客户端可以请求弃用的密码套件，如
RC4，这可能会导致其他进程失败。在这个版本中，RHEL 将 allowed
`_enctypes`{.literal}
中设置的加密类型应用到默认加密类型，进程只能请求允许的加密类型。
如果您使用 Red Hat Identity Management(IdM)并希望使用 Active
Directory(AD)设置信任，请注意 RC4 密码套件（在 RHEL 8 中已弃用）是 AD
林中 AD 域的默认加密类型。您可以使用以下选项之一：
::: itemizedlist
-   （首选）：在 AD 中启用强大的 AES 加密类型。详情请查看 [AD
    DS：安全：访问可信域的资源时的 Kerberos \"Unsupported etype\"
    错误](https://support.microsoft.com/en-us/help/4492348/kerberos-unsupported-etype-error-when-authenticating-across-trust){.link}
    Microsoft 文章。
-   在 RHEL 主机上
    `使用 update-crypto-policies --set DEFAULT:AD-SUPPORT`{.literal}
    命令（应该为 AD 域的成员）启用已弃用的 RC4 加密类型，以便向后兼容
    AD。
:::
([BZ#2005277](https://bugzilla.redhat.com/show_bug.cgi?id=2005277){.link})
[]{#_bug_fixes.html#BZ-1898541}
::: title
**复制会话更新速度现已提高**
:::
在以前的版本中，当 changelog 包含较大的更新时，复制会话从 changelog
开始时启动。这会减慢会话速度。使用小缓冲区在复制会话期间存储来自
changelog
的更新会导致这一点。在这个版本中，复制会话会检查缓冲区是否足够大，以便首先存储更新。复制会话开始立即发送更新。
([BZ#1898541](https://bugzilla.redhat.com/show_bug.cgi?id=1898541){.link})
[]{#_bug_fixes.html#BZ-1951020}
::: title
**现在启用插件创建的数据库索引**
:::
在以前的版本中，当服务器插件创建自己的数据库索引时，您必须手动启用这些索引。在这个版本中，索引会在创建后立即启用。
([BZ#1951020](https://bugzilla.redhat.com/show_bug.cgi?id=1951020){.link})
:::
::: section
::: titlepage
# []{#_bug_fixes.html#bug-fix_red-hat-enterprise-linux-system-roles}Red Hat Enterprise Linux 系统角色 {.title}
:::
[]{#_bug_fixes.html#BZ-1960375}
::: title
**运行同一输出时角色任务不再更改**
:::
在以前的版本中，即使没有更改，多个角色任务会在再次运行相同的输入时报告为
`CHANGED`{.literal}。因此，该角色无法起到幂等作用。要解决这个问题，请执行以下操作：
::: itemizedlist
-   在应用配置变量前，检查是否更改了配置变量。您可以使用
    `--check`{.literal} 选项进行此验证。
-   不要在配置文件中添加 `Last Modified: $date`{.literal} 标头。
:::
因此，角色任务是幂等的。
([BZ#1960375](https://bugzilla.redhat.com/show_bug.cgi?id=1960375){.link})
[]{#_bug_fixes.html#BZ-1866544}
::: title
**Postfix 文档中的不再错误定义 `relayhost`{.literal} 参数**
:::
在以前的版本中，Postfix RHEL 系统角色的 `relayhost`{.literal} 参数在
`doc /usr/share/doc/rhel-system-roles/postfix/README.md`{.literal}
文档中定义为
`relay _host`{.literal}。``{=html}在这个版本中解决了这个问题，现在
`Postfix`{.literal} 文档中的正确定义了 `relayhost`{.literal} 参数。
([BZ#1866544](https://bugzilla.redhat.com/show_bug.cgi?id=1866544){.link})
[]{#_bug_fixes.html#BZ-1961858}
::: title
**`Postfix`{.literal} RHEL 系统角色 README.md 不再缺少\"Role
Variables\"部分下的变量**
:::
在以前的版本中，`Postfix`{.literal} RHEL 系统角色变量（如
`postfix_check`{.literal}、postfix`_backup`{.literal}、`postfix_backup_multiple）`{.literal}
在\"Role Variables\"部分下不可用。因此，用户无法参考 Postfix
角色文档。在这个版本中，在 `Postfix`{.literal} README
部分添加了角色变量文档。角色变量记录下来，供用户在
`rhel-system-roles 提供的 doc/usr/share/doc/rhel-system-roles/postfix/README.md`{.literal}
文档中的使用。``{=html}
([BZ#1961858](https://bugzilla.redhat.com/show_bug.cgi?id=1961858){.link})
[]{#_bug_fixes.html#BZ-1958963}
::: title
**`Postfix`{.literal} 角色 README 不再使用纯角色名称**
:::
在以前的版本中，`/usr/share/ansible/roles/rhel-system-roles.postfix/README.md`{.literal}
中提供的示例使用角色名称 `postfix`{.literal} 的普通版本，而不是使用
`rhel-system-roles.postfix`{.literal}。因此，用户会查阅相关文档，并错误地使用纯文本角色名称，而不是完全限定角色名称(FQRN)。在这个版本中解决了这个问题，文档中包含
FQRN、rhel- `system-roles.postfix`{.literal} 的示例，使用户能够正确编写
playbook。
([BZ#1958963](https://bugzilla.redhat.com/show_bug.cgi?id=1958963){.link})
[]{#_bug_fixes.html#BZ-1938014}
::: title
**`timesync`{.literal} 的输出日志只报告误导错误**
:::
在以前的版本中，`timesync`{.literal} RHEL 系统角色使用
`ignore_errors`{.literal}
指令，在很多任务中单独检查任务失败。因此，成功运行的角色的输出日志充满了不必要的错误。用户可以安全地忽略这些错误，但仍需要查看。在这个版本中，相关的任务被重写，不使用
`ignore_errors`{.literal}。因此，输出日志现在清理干净，只报告角色停止错误。
([BZ#1938014](https://bugzilla.redhat.com/show_bug.cgi?id=1938014){.link})
[]{#_bug_fixes.html#BZ-1954747}
::: title
**Ansible 集合中不再缺少 `requirements.txt`{.literal} 文件**
:::
在以前的版本中，Ansible 集合中缺少了负责指定 python 依赖项的
`requirements.txt`{.literal} 文件。在这个版本中，在
`/usr/share/ansible/collections/ansible_collections/redhat/rhel_system_roles/requirements.tx`{.literal}
路径中添加缺少的文件。
([BZ#1954747](https://bugzilla.redhat.com/show_bug.cgi?id=1954747){.link})
[]{#_bug_fixes.html#BZ-1854187}
::: title
**为 `storage_pools`{.literal}设置 `type: 分区`{.literal} 时不再观察到
`traceback`{.literal}**
:::
在以前的版本中，当将变量 `类型`{.literal} 设置为 playbook 中
`storage`{.literal} `_pools`{.literal} 的分区时，运行此 playbook
将失败并指示 `回溯`{.literal}。在这个版本中解决了这个问题，不再
`会出现 Traceback`{.literal} 错误。
([BZ#1854187](https://bugzilla.redhat.com/show_bug.cgi?id=1854187){.link})
[]{#_bug_fixes.html#BZ-1757869}
::: title
**`SELinux`{.literal} 角色不再执行不必要的重新加载**
:::
在以前的版本中，`SElinux`{.literal} 角色不会在重新载入
`SElinux`{.literal}
策略前检查是否实际应用了更改。因此，`SElinux`{.literal}
策略会不必要的重新加载，这会影响系统资源。在这个版本中，`SElinux`{.literal}
角色使用 ansible
处理程序和条件来确保仅在有更改时才重新加载策略。因此，`SElinux`{.literal}
角色的运行速度要快得多。
([BZ#1757869](https://bugzilla.redhat.com/show_bug.cgi?id=1757869){.link})
[]{#_bug_fixes.html#BZ-1990947}
::: title
**`sshd`{.literal} 角色不再无法使用在 RHEL6 主机上安装的
`sshd_config`{.literal} 文件启动。**
:::
在以前的版本中，当受管节点运行 RHEL6 时，OpenSSH 的版本在 Match
标准中不支持\"Match all\"，由安装任务添加。因此，sshd `无法从`{.literal}
RHEL6 主机上安装的 `sshd_config`{.literal}
文件开始。在这个版本中解决了这个问题，方法是将 RHEL6
`sshd_config`{.literal} 配置文件的 \"Match address \*\" 替换为 \"Match
address \*\"，因为 OpenSSH 版本支持这个标准。因此，sshd `RHEL`{.literal}
系统角色从 RHEL6 主机上安装的 `sshd_config`{.literal} 文件成功启动。
([BZ#1990947](https://bugzilla.redhat.com/show_bug.cgi?id=1990947){.link})
[]{#_bug_fixes.html#BZ-1952090}
::: title
**SSHD 角色名称 in `README.md`{.literal} 不再不正确**
:::
在以前的版本中，在 sshd `README.md`{.literal} 文件中，示例引用使用
`willshersystems.sshd`{.literal}
名称调用角色的示例。在这个版本中解决了这个问题，示例将角色正确地指代为
\"rhel_system_roles.sshd\"。
([BZ#1952090](https://bugzilla.redhat.com/show_bug.cgi?id=1952090){.link})
[]{#_bug_fixes.html#BZ-1994580}
::: title
**当 `tls`{.literal} 为 `false`{.literal}时，`密钥/证书源`{.literal}
文件不再被复制**
:::
在以前的版本中，在 `日志记录`{.literal} RHEL 系统角色 elasticsearch
输出中，如果控制主机上的 `key/certs`{.literal} 源文件路径已在 playbook
中配置，它们也会复制到受管主机，即使 `tls`{.literal} 被设置为
`false`{.literal}。因此，如果配置了 `密钥/证书文件`{.literal} 路径，并且
`tls`{.literal} 被设置为
`false`{.literal}，该命令将失败，因为复制源文件不存在。在这个版本中解决了这个问题，只有在
`tls`{.literal} param `被设置为 true`{.literal}
时复制密钥/``{=html} 证书才会执行。
([BZ#1994580](https://bugzilla.redhat.com/show_bug.cgi?id=1994580){.link})
[]{#_bug_fixes.html#BZ-1967335}
::: title
**为 `指标角色中的目标主机启用日志记录的任务`{.literal}
现在可以正常工作**
:::
在以前的版本中，Metric `RHEL`{.literal} 系统角色中的一个错误会在
`启用性能指标日志记录`{.literal}
任务时引用目标主机。因此，不会生成用于性能指标日志记录的控制文件。在这个版本中解决了这个问题，现在可以正确地引用目标主机。因此，控制文件被成功创建，启用性能指标日志执行。
([BZ#1967335](https://bugzilla.redhat.com/show_bug.cgi?id=1967335){.link})
[]{#_bug_fixes.html#BZ-1966711}
::: title
**`sshd_hostkey_group`{.literal} 和 `sshd_hostkey_mode`{.literal}
变量现在可在 playbook 中配置**
:::
在以前的版本中，sshd `_hostkey_group`{.literal} 和
`sshd_hostkey_mode`{.literal} 变量会在 `defaults`{.literal} 和
`vars`{.literal} 文件中被意外定义。因此，用户无法在 playbook
中配置这些变量。在这个版本中，`sshd_hostkey_group`{.literal} 被重命名为
`__sshd_hostkey_group，ssh_`{.literal} `hostkey_mode`{.literal}
则重命名为 `__sshd_hostkey_mode`{.literal}，用于在 `vars`{.literal}
文件中定义恒定值。在 `默认`{.literal}