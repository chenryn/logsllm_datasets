# 三、使用 Docker 构建、运行和测试您的服务
在前一章已经设计了一个工作的 RESTful 微服务，我们将在本章中看到如何以 Docker 方式使用它，将服务封装到一个独立的容器中，这样它就不可变，并且可以独立部署。本章非常明确地描述了服务的依赖关系及其使用方法。运行服务的主要方式是将其作为 web 服务器运行，但是其他操作也是可能的，例如运行单元测试、生成报告等。我们还将看到如何在您的本地计算机上部署该服务进行测试，以及如何通过映像存储库共享它。
本章将涵盖以下主题:
*   使用 Dockerfile 构建您的服务
*   使用不可变的容器操作
*   配置您的服务
*   在本地部署 Docker 服务
*   将 Docker 映像推送到远程注册表
到本章结束时，您将知道如何使用 Docker 操作、创建基本服务、构建映像以及运行它。您还将知道如何共享要在另一台计算机上运行的映像。
# 技术要求
对于本章，您需要安装 Docker，版本 18.09 或更高版本。请参阅官方文档([https://docs.docker.com/install/](https://docs.docker.com/install/))了解如何为您的平台执行此操作。
If you install Docker in Linux, you may have to configure the server to run for non-root access. Check the documentation at [https://docs.docker.com/install/linux/linux-postinstall/](https://docs.docker.com/install/linux/linux-postinstall/).
使用以下命令检查版本:
```
$ docker version
Client: Docker Engine - Community
 Version: 18.09.2
 API version: 1.39
 Go version: go1.10.8
 Git commit: 6247962
 Built: Sun Feb 10 04:12:39 2019
 OS/Arch: darwin/amd64
 Experimental: false
```
您还需要安装 Docker Compose 1 . 24 . 0 或更高版本。请注意，在某些安装中，例如 macOS，会自动为您安装。查看 Docker 文档([https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/))中的安装说明:
```
$ docker-compose version
docker-compose version 1.24.0, build 0aa5906
docker-py version: 3.7.2
CPython version: 3.7.3
OpenSSL version: OpenSSL 1.0.2r 26 Feb 2019
```
该代码可在 GitHub 上获得，在此目录中:[https://GitHub . com/PacktPublishing/动手-Docker-for-micro-service-with-Python/tree/master/chapter 03](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter03)。在[第 2 章](02.html)*中有一个`ThoughtsBackend`的副本，用 Python* 创建一个 REST 服务，但是代码略有不同。我们将在这一章中看看不同之处。
# 使用 Dockerfile 构建您的服务
一切都从一个容器开始。正如我们在[第 1 章](01.html)、*行动起来——设计、计划和执行*中所说，容器是一个打包的软件包，以标准方式封装。它们是可以独立运行的软件单元，因为它们是完全独立的。为了制造一个容器，我们需要建造它。
Remember our description of a container as a process surrounded by its own filesystem. Building a container constructs this filesystem.
要用 Docker 构建一个容器，我们需要它的内容的定义。文件系统是通过一层又一层的应用创建的。每个 Dockerfile，即生成容器的方法，包含生成容器的步骤的定义。
例如，让我们创建一个非常简单的 Dockerfile。创建一个名为`example.txt`的文件，其中包含一些示例文本，另一个名为`Dockerfile.simple`的文件包含以下内容:
```
# scratch is a special container that is totally empty
FROM scratch
COPY example.txt /example.txt
```
现在使用以下命令构建它:
```
$ # docker build -f  --tag  
$   docker build -f Dockerfile.simple --tag simple .
Sending build context to Docker daemon 3.072kB
Step 1/2 : FROM scratch
 --->
Step 2/2 : COPY example.txt /example.txt
 ---> Using cache
 ---> f961aef9f15c
Successfully built f961aef9f15c
Successfully tagged simple:latest
$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
simple latest f961aef9f15c 4 minutes ago 11B
```
这将创建一个只包含`example.txt`文件的 Docker 映像。它不是很有用，但是很小——只有 11 个字节。那是因为它继承了空容器`scratch`。然后，它将`example.txt`文件复制到`/example.txt`容器中的位置。
我们来看看`docker build`命令。Dockerfile 用`-f`参数定义，结果映像的标签用`--tag `定义，`context`参数定义为点(`.`)。`context`参数是对在 Dockerfile 中的步骤中定义的文件的查找位置的引用。
映像还有映像 ID `f961aef9f15c`，是自动分配的。这是文件系统内容的散列。我们稍后会看到为什么这是相关的。
# 执行命令
之前的容器不是很刺激。完全从头开始创建自己的容器是完全可能的，但是，通常情况下，您会寻找一个基线，它包含某种 Linux 发行版，允许您对容器做一些有用的事情。
正如我们在`FROM`命令中看到的，我们可以从一个先前的容器开始。我们将在整本书中使用 Alpine Linux([https://alpinelinux.org/](https://alpinelinux.org/))发行版，尽管也有其他发行版，比如 Ubuntu 和 CentOS。查看文章在[https://sweet code . io/Linux-distributions-optimized-hosting-docker/](https://sweetcode.io/linux-distributions-optimized-hosting-docker/)针对 Docker 容器的发行版。
Why Alpine Linux? It is arguably the most popular distribution for Docker systems because it has a very small footprint and it's aimed at security. It is well-maintained and regularly updated and patched. It also has a complete package management system that allows you to install most of the common tools for web services easily. The base image is only around 5 MB in size and contains a working Linux operating system.
It has a couple of quirks when working with it, such as using its own package management, called `apk`, but it's easy to use and is almost a straight-on drop replacement for common Linux distributions.
下面的 Dockerfile 将从基础`alpine`容器继承并添加`example.txt`文件:
```
FROM alpine
RUN mkdir -p /opt/
COPY example.txt /opt/example.txt
```
这个容器允许我们运行命令，因为通常的命令行工具包括:
```
$ docker build -f Dockerfile.run --tag container-run .
Sending build context to Docker daemon 4.096kB
Step 1/3 : FROM alpine
 ---> 055936d39205
Step 2/3 : RUN mkdir -p /opt/
 ---> Using cache
 ---> 4f565debb941
Step 3/3 : COPY example.txt /opt/example.txt
 ---> Using cache
 ---> d67a72454d75
Successfully built d67a72454d75
Successfully tagged container-run:latest
$ # docker run   
$   docker run container-run cat /opt/example.txt
An example file
```
注意`cat /opt/example.txt`命令行是如何执行的。这实际上发生在容器内部。我们在`stdout`控制台的`stdout`中打印结果。但是，如果创建了一个文件，当容器停止时，该文件不会保存在我们的本地文件系统中，而只会保存在容器中:
```
$ ls
Dockerfile.run example.txt
$ docker run container-run /bin/sh -c 'cat /opt/example.txt > out.txt'
$ ls
Dockerfile.run example.txt
```
文件实际上保存在一个停止的容器中。一旦容器完成了它的运行，它将一直被 Docker 停止，直到被移除。您可以使用`docker ps -a`命令看到停止的容器。停止的容器不是很有趣，尽管它的文件系统保存在磁盘上。
When running web services, the command being run won't stop; it will keep running until stopped. Remember what we said before about a container being a process with a filesystem attached. The command running is the key to the container.
您可以通过添加以下内容来添加默认命令，该命令将在没有给出命令时执行:
```
CMD cat /opt/example.txt
```
使用以下命令使其自动运行:
```
$ docker run container-run
An example file
```
定义一个标准命令使容器变得非常简单。只要运行它，它就会做它被配置要做的任何事情。请记住在容器中包含一个默认命令。
我们还可以在容器中执行一个 shell 并与之交互。记得添加`-it`标志保持连接正常打开，`-i`保持`stdin`打开，`-t`创建伪终端，可以记为交互终端:
```
$ docker run -it container-run /bin/sh
/ # cd opt/
/opt # ls
example.txt
/opt # cat example.txt
An example file
/opt # exit
$
```
这在发现问题或执行探索性测试时非常有用。
# 了解 Docker 缓存
构建映像时的一个主要困惑是理解 Docker 层是如何工作的。
Dockerfile 上的每个命令都是在前一层之上连续执行的。如果您对 Git 感到满意，您会注意到过程是相似的。每层仅存储对上一步的更改:
![](img/14605f6c-28fa-4b09-be18-960f278ac5f0.png)
这允许 Docker 相当积极地缓存，因为在改变之前的任何层都已经被计算了。例如，在这个例子中，我们用`apk update`更新可用的包，然后安装`python3`包，然后复制`example.txt`文件。对`example.txt`文件的任何更改将只在图层`be086a75fe23`上执行最后两个步骤。这加快了映像的重建。
这也意味着您需要仔细构建您的 Dockerfiles，以免缓存失效。从很少改变的操作开始，比如安装项目依赖项，然后完成更频繁改变的操作，比如添加代码。我们示例中带注释的 Dockerfile 指示了缓存的使用情况。
这也意味着映像永远不会变小，即使图层删除了数据，也会添加一个新图层，因为以前的图层仍然存储在磁盘上。如果你想从一个步骤中删除 cruft，你需要在同一个步骤中这样做。
Keeping your containers small is quite important. In any Docker system, the tendency is to have a bunch of containers and lots of images. Big images for no reason will fill up repositories quickly. They'll be slow to download and push, and also slow to start, as the container is copied around in your infrastructure.
There's another practical consideration. Containers are a great tool to simplify and reduce your service to the minimum. With a bit of investment, you'll have great results and keep small and to-the-point containers. 
有几种保持映像小的方法。除了小心不要安装额外的元素，主要的是创建一个单一的，复杂的安装和卸载层，以及多阶段的映像。多阶段 Dockerfiles 是一种引用前一个中间层并从中复制数据的方式。查看 Docker 文档([https://docs . Docker . com/develop/develop-img/multiple-build/](https://docs.docker.com/develop/develop-img/multistage-build/))。
Compilers, in particular, tend to get a lot of space. When possible, try to use precompiled binaries. You can use a multi-stage Dockerfile to compile in one container and then copy the binaries to the running one.
您可以在本文中了解到这两种策略的更多区别:[https://python speed . com/articles/small-python-docker-img/](https://pythonspeed.com/articles/smaller-python-docker-img/)。
A good tool to analyze a particular image and the layers that compose it is `dive` ([https://github.com/wagoodman/dive](https://github.com/wagoodman/dive)). It will also discover ways that an image can be reduced in size.
我们将在下一步创建一个多阶段容器。
# 构建 web 服务容器
我们有一个特定的目标，创建一个能够运行我们的微服务的容器`ThoughtsBackend`。为此，我们有几个要求:
*   我们需要将代码复制到容器中。
*   代码需要通过网络服务器提供。
因此，概括地说，我们需要创建一个带有 web 服务器的容器，添加我们的代码，配置它使它运行我们的代码，并在启动容器时提供结果。
We will store most of the configuration files inside subdirectories in the `./docker` directory.
作为一个网络服务器，我们将使用 uWSGI([https://uwsgi-docs.readthedocs.io/en/latest/](https://uwsgi-docs.readthedocs.io/en/latest/))。uWSGI 是一个网络服务器，能够通过 WSGI 协议为我们的 Flask 应用提供服务。uWSGI 是相当可配置的，有很多选项，并且能够直接服务 HTTP。
A very common configuration is to have NGINX in front of uWSGI to serve static files, as it's more efficient for that. In our specific use case, we don't serve many static files, as we're running a RESTful API, and, in our main architecture, as described in [Chapter 1](01.html), *Making the Move – Design, Plan, and Execute*, there's already a load balancer on the frontend and a dedicated static files server. This means we won't be adding an extra component for simplicity. NGINX usually communicates to uWSGI using the `uwsgi` protocol, which is a protocol specifically for the uWSGI server, but it can also do it through HTTP. Check the NGINX and uWSGI documentation.
我们来看看`docker/app/Dockerfile`文件。它有两个阶段；第一个是编译依赖项:
```
########
# This image will compile the dependencies
# It will install compilers and other packages, that won't be carried
# over to the runtime image
########
FROM alpine:3.9 AS compile-image
# Add requirements for python and pip
RUN apk add --update python3
RUN mkdir -p /opt/code
WORKDIR /opt/code
# Install dependencies
RUN apk add python3-dev build-base gcc linux-headers postgresql-dev libffi-dev
# Create a virtual environment for all the Python dependencies
RUN python3 -m venv /opt/venv
# Make sure we use the virtualenv:
ENV PATH="/opt/venv/bin:$PATH"
RUN pip3 install --upgrade pip
# Install and compile uwsgi
RUN pip3 install uwsgi==2.0.18
# Install other dependencies
COPY ThoughtsBackend/requirements.txt /opt/
RUN pip3 install -r /opt/requirements.txt
```
此阶段执行以下步骤:
1.  命名舞台`compile-image`，传承自阿尔卑斯。
2.  安装`python3`。
3.  安装构建依赖项，包括`gcc`编译器和 Python 头(`python3-dev`)。
4.  创建新的虚拟环境。我们将在这里安装所有 Python 依赖项。
5.  虚拟环境被激活。
6.  安装 uWSGI。这一步从代码中编译它。
You can also install the included uWSGI package in the Alpine distribution, but I found the compiled package to be more complete and easier to configure, as the Alpine `uwsgi` package requires you to install other packages such as `uwsgi-python3`, `uwsgi-http`, and so on, then enable the plugin in the uWSGI config. The size difference is minimal. This also allows you to use the latest uWSGI version and not depend on the one in your Alpine distribution.
7.  复制`requirements.txt`文件，安装所有依赖项。这将编译依赖项并将其复制到虚拟环境中。
第二阶段是准备运行容器。让我们来看看:
```
########
# This image is the runtime, will copy the dependencies from the other
########
FROM alpine:3.9 AS runtime-image
# Install python
RUN apk add --update python3 curl libffi postgresql-libs
# Copy uWSGI configuration
RUN mkdir -p /opt/uwsgi
ADD docker/app/uwsgi.ini /opt/uwsgi/