F ailureP rob(cid:1)
+ M T T F (cid:1)
M T T F = Texec·(1−F ailureP rob(cid:1))
= Texec+M T T F (cid:1)
F ailureP rob(cid:1) − Texec
Note that we can derive the contribution to MTTF from
a speciﬁc processor structure by assuming zero probability
for errors generated in other structures.
3 Implementation of the SoftArch Model
We have implemented the SoftArch model in the Soft-
Arch tool. There are ﬁve key components to the implemen-
tation: (1) integration with an architecture-level timing (i.e.,
performance) simulator, (2) estimation of λ, (3) estimation
of elogic, (4) implementation of the basic error set corre-
sponding to each value and the operations on these sets, and
(5) identifying the values in the failure set. The following
sections discuss each of these components.
The SoftArch model provides MTTF for a speciﬁc pro-
gram running on a processor. It requires integration with a
performance (or timing) simulator that runs the program,
and provides to the SoftArch model timing information
about the values read/written/computed in different parts of
the processor. This work uses Turandot, a trace-driven per-
formance simulator that models the timing of the various
pipeline stages of a modern out-of-order superscalar pro-
cessor in detail [6]. Table 1 summarizes the parameters for
the simulated processor; these were chosen to roughly cor-
respond to the POWER4 microarchitecture [5].
We track soft errors using the SoftArch model for most
of the important structures in the processor, including the
instruction buffer (IBUF), instruction decode unit (IDU),
integer and ﬂoating point register ﬁles (REG), integer func-
tional units (FXU), ﬂoating point units (FPU), instruction
TLB (iTLB), data TLB (dTLB), and instruction queues
(IQ). We assume the load/store queue, caches, and mem-
ory are protected using ECC, and do not consider a soft er-
ror rate for them. We also do not model soft errors for the
branch prediction unit since these do not cause processor
failures.
3.2 Estimation of λ
Irom et al. [2] and Swift et al. [11] report measured val-
ues of raw SER cross section for the TLB and ﬂoating point
registers for PowerPC processors. The raw SER cross sec-
tion is deﬁned as the number of errors per particle inﬂuence
and is related to the raw SER as follows [14]:
Raw SER for a storage structure = (SER cross section for the struc-
ture)(nucleon ﬂux)(# bits in the structure)
From [2], the raw proton SER cross section for the
TLB structure in a 200nm PowerPC processor is about
5 · 10−14cm2/bit for proton energy larger than 20Mev.
From [11], the raw proton SER cross section for the ﬂoat-
ing point register structure in a PowerPC 750 processor is
about the same value. Since protons and neutrons have sim-
ilar characteristics at higher energy range, we use the pro-
ton cross section to roughly estimate the raw neutron SER
of different structures. We do not model the alpha parti-
cle SER since Karnik et al. [3] show that in devices where
Qcrit is large, neutron SER dominates. This is the case for
the array structures we study here. Further, the detailed es-
timation of raw SERs is not the focus of this paper.
According to Ziegler [14], neutron ﬂux with sufﬁcient
energy (>20 Mev) at sea level is 105particles/cm2 · yr.
Using the above equation, we can derive the raw SER for
the register ﬁle in 200nm technology as 5.7·10−4 FIT/bit (1
FIT is one failure every 109 hours). Since we model a pro-
cessor in 90nm technology, we scale the raw SER rate us-
ing scaling data by Karnik et al. [3]. Karnik et al. show that
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
neutron SER in SRAM increases about 30% from 200nm to
90nm technology. Thus, we assume that the raw SER for
the register ﬁle in 90nm technology is 7.42 · 10−4 FIT/bit.
Assuming a 64 bit register and a 2 GHz processor, we can
derive that λ for a register value is 6.60· 10−24 errors/cycle.
Although Irom et al. [2] and Swift et al. [11] do not re-
port data for the instruction buffer, instruction queue and
integer register ﬁle, we assume the SER cross section value
for these to be similar to the reported results for TLB and
ﬂoating point registers (we could not ﬁnd any other sources
of measured data for these structures either). Using an ap-
proach similar to the above, we get λ for an instruction
buffer entry as 6.60 · 10−24 errors/cycle and for an instruc-
tion queue and a TLB entry as 1.13 · 10−23 errors/cycle.
3.3 Estimation of elogic
At 100nm, Shivakumar et al. [10] showed the raw SER
for a latch to be 3.5 · 10−5 FIT and for a 16FO4 logic chain
to be 5 · 10−6 FIT (after circuit level electrical and latch
window masking). Based on the gate and latch counts for a
logic circuit, we can therefore estimate the raw SER for that
circuit at 100nm (we use the same value for 90nm). (This
is conservative since it ignores circuit-level logical masking
which depends on the inputs and the exact logic function.)
Speciﬁcally, let #LogicChains and #Latches be the num-
ber of logic chains and latches respectively in a logic circuit
(e.g., FPU, FXU, or IDU). Then for our 2 GHz processor,
109·3600·2·109
elogic = (#LogicChains·5·10−6+#Latches·3.5·10−5)
We estimated the gate/latch count information for our
simulated processor as follows.3 We ﬁrst estimated the rel-
ative areas of each modeled structure from published ﬂoor-
plans of the POWER4. Since the total transistor count
for the processor is known, we could then assign area-
based estimates of transistor counts for each modeled struc-
ture. Reasonable assumptions about transistor density dif-
ferences between SRAM and logic dominated structures
were also factored in. We estimate 10K latches and 70K
gates for the FXU (integer ALU), 14K latches and 100K
gates for the FPU, and 7K latches and 50K gates for the
IDU. (Our implementation assumes all FXU operations
have the same elogic and all FPU operations have the same
elogic). It follows that elogic for the IDU, FXU, and FPU is
5.16 · 10−23, 7.23 · 10−23, and 3.67 · 10−23 respectively.
3.4 Tracking Basic Error Set Ei for Value vi
memory management overhead, we use a ﬁxed size FIFO
table to store the basic errors in a set (one table per set,
100 entries per table in our implementation). To further re-
duce space, the table entry only stores a sequence number
that identiﬁes the error. A common central table stores the
pertinent information for each sequence number, including
probability of the corresponding error and where it is gen-
erated. In case of overﬂow of a basic error table (i.e., > 100
basic error sources contribute to the corresponding value),
the oldest entry in the table is discarded. This loses informa-
tion about an error source for the value. We conservatively
assume that the value causes failure due to the dropped er-
ror with probability of that error and at the time the error is
dropped. In our experiments, overﬂow rarely occurs.
3.5 Identifying Values for Program Failure
Based on Section 2.3, our implementation makes the fol-
lowing assumptions about values that can lead to processor
failures and the times at which such failures occur.
Values to output devices: Our program traces are at the
user-level and do not contain output instructions. We con-
servatively assume that values that are stored in memory
are observable externally, and errors in them cause program
failure. We assume that the failure occurs when the store
instruction retires and is issued to memory.
Fields of an instruction: Errors in all ﬁelds of loads, stores,
and instructions that change control ﬂow (branches and
jumps) are propagated to the retirement queue. These errors
are assumed to cause failure when the instruction retires.
This is because these errors can change the op code, pro-
gram control ﬂow, memory addresses, or the value stored
in memory, which are assumed to be observable externally.
Waiting until retirement to ﬂag a failure ensures that mis-
speculated instructions do not ﬂag failures.
For instructions other than the above, we do not consider
errors in ﬁelds that specify source registers to cause fail-
ures. Instead, we propagate the errors in these ﬁelds into the
value in the destination register. Errors in all other ﬁelds are
considered to cause failure at retirement (similar to loads,
stores, and branch instructions).
Fields in iTLB and dTLB: Any errors in the TLBs are
propagated to the retirement queue entry of the correspond-
ing instruction, and considered to cause failure on retire-
ment of that instruction. This is because an error in these
structures can lead to memory address related failures.
The error propagation model requires tracking basic er-
ror sets, using set copy and union operations. These sets can
potentially be unbounded. To reduce space and dynamic
3Although our microarchitectural parameters were chosen to be close
to the POWER4, structure-wise gate/latch count information for such com-
mercial processors is not available. We acknowledge that our estimates of
these counts may not be close to actual values.
4 Results
We evaluate 21 SPEC CPU2000 benchmarks (9 integer
and 12 ﬂoating point) with the reference input set. We
use sampled traces with 100 million instructions per bench-
mark that were validated for acceptable representativeness
against the full trace.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
e
t
a
R
T
I
F
45
40
35
30
25
20
15
10
5
0
42
 

 

 

 

 

 

 

 

 

 

 

 

 

 
Raw_FIT
(a)
e
t
a
R
T
I
F
18
12
6
0
ibuf
 

 

idu
reg
 

 

iq
13.5
 

 

 

 

 

 

 

 

 

6
 
 
 

 

 

 

 

 
11
 

 

 

 

 

 

 

 

 

 

 

 
 

9
 
 
 

 

 

 

 

 
7.6
 

 

 

 

 

 

 

 

 

bzip
crafty
gap
gcc
gzip
4
 

 
 

 

 

 

 
(b)
dtlb
  

  

itlb
fxu
  

  

fpu
16
 
 
 

 

 

 

 

 

 

 

 

10
 

 

 

 

 

10
  

  
  

  

10
  
  

  

  

  

e
t
a
R
T
I
F
 

 

 

 

 

  

  

  

  

  

  

  

  

  

  

 
 
perlbm k
mcf
vpr
twolf
A V G
ibuf
 

 

idu
reg
 

 

iq
dtlb
 

 

itlb
fxu
 

 

fpu
18
12
7
6
  
  
  

  