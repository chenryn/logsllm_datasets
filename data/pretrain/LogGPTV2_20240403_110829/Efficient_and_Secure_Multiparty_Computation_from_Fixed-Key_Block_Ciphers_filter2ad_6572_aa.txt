# Efficient and Secure Multiparty Computation from Fixed-Key Block Ciphers

**Authors:**
- Chun Guo
- Jonathan Katz
- Xiao Wang
- Yu Yu

**Conference:**
2020 IEEE Symposium on Security and Privacy

## Abstract
Many implementations of secure computation utilize fixed-key AES (modeled as a random permutation) to achieve significant performance benefits due to existing hardware support for AES and the ability to avoid recomputing the AES key schedule. However, our survey of these implementations reveals that most use AES in a heuristic manner, which at best leaves a gap in the security proof and, in many cases, allows for explicit attacks.

Motivated by this unsatisfactory state of affairs, we initiate a comprehensive study on how to use fixed-key block ciphers for secure computation, particularly for OT extension and circuit garbling, in an efficient and secure manner. Specifically, we:
- Consider several notions of pseudorandomness for hash functions (e.g., correlation robustness) and show provably secure schemes for OT extension, garbling, and other applications based on hash functions satisfying these notions.
- Provide provably secure constructions in the (non-programmable) random-permutation model, along with concrete security bounds.

Our results provide end-to-end security proofs for implementations of secure-computation protocols based on fixed-key block ciphers (modeled as random permutations). Surprisingly, our work also results in noticeable performance improvements over the state-of-the-art.

## 1. Introduction
Over the past few years, secure computation has transitioned from theoretical research to practical implementation, with multiple software libraries, government funding, startup companies, and real-world applications. This makes it crucial to understand the security provided by these implementations. While published protocols typically come with security proofs, they often omit low-level details, and researchers may apply performance optimizations haphazardly.

In this work, we study the use of fixed-key AES (or fixed-key block ciphers more generally) in secure computation. The use of fixed-key AES can be traced back to Bellare et al. [5], who designed provably secure garbling schemes based on fixed-key AES, demonstrating significant performance improvements. Prior to their work, most garbled circuits used SHA-256 modeled as a random oracle. Bellare et al. showed that using fixed-key AES can be up to 50 times faster than using a cryptographic hash function due to hardware support. This led to fixed-key AES being widely adopted in subsequent implementations.

However, many subsequent works lack end-to-end security proofs. For example, OT-extension protocols are often proven secure by modeling a hash function H as a random oracle, but in practice, H is instantiated haphazardly from a fixed-key block cipher. This can leave gaps in security proofs or even make the protocols vulnerable to attacks.

## 2. Our Contributions
### 2.1 Deficiencies in Current Implementations
We examined state-of-the-art platforms for secure computation and found that most using fixed-key AES were doing so incorrectly, with some being vulnerable to explicit attacks. We provide details in Section II.

### 2.2 Comprehensive Study of Fixed-Key Block Ciphers
To address these issues, we initiate a comprehensive study on how to securely and efficiently use fixed-key block ciphers for secure computation. Our approach is modular:
- **Identifying Abstract Security Properties:** We consider several notions of pseudorandomness for hash functions, including correlation robustness and circular correlation robustness. We show how hash functions realizing these properties can be used in a provably secure way for various flavors of OT extension, circuit garbling, and other applications.
- **Realizations from Fixed-Key Block Ciphers:** We provide provably secure constructions in the non-programmable RPM, along with concrete security bounds. We also discuss efficient implementations utilizing existing CPU instruction sets and pipelining.

Our work provides end-to-end security proofs for secure-computation protocols based on fixed-key block ciphers, while also resulting in performance improvements of up to 3–4 times over the current state-of-the-art for OT extension and other protocols.

## 3. Alternate Approaches
One alternative is to instantiate H using a cryptographic hash function like SHA-256 or SHA-3, treating them as random oracles. However, such hash functions are 15–50 times slower than fixed-key AES. Another option is to construct H based on a fixed-key block cipher such that H is indifferentiable from a random oracle. Existing solutions, however, have drawbacks, such as impractically poor security bounds or inefficiency.

## 4. Outline of the Paper
- **Section II:** Survey of existing implementations and identification of insecure instantiations.
- **Section III:** Introduction of various security definitions for hash functions.
- **Sections IV-VI:** Applications of hash functions satisfying these definitions to OT extension, half-gates garbling, and other protocols.
- **Section VII:** Construction of hash functions from a fixed-key block cipher in the random-permutation model.
- **Section VIII:** Performance evaluation and comparison with prior work.

## 5. The Current State of Affairs
Many existing platforms for secure computation rely on fixed-key AES, but very few utilize it properly. We discuss the problems we found and contacted the authors of affected works to inform them and allow time for patches.

### 5.1 Oblivious-Transfer Extension
Oblivious transfer (OT) is a key component of secure two-party computation. Standard OT involves a sender holding two messages and a receiver learning one message without the sender knowing which. OT extension enables a small number of base OTs to be leveraged into an unbounded number of OTs using symmetric-key techniques. However, many OT-extension protocols lack end-to-end security proofs, leading to potential vulnerabilities.

## 6. Conclusion
Our work provides a comprehensive and modular approach to using fixed-key block ciphers for secure computation, ensuring both security and efficiency. By addressing the deficiencies in current implementations and providing provably secure constructions, we aim to improve the overall security and performance of secure-computation protocols.