### 6. Typing and Relational Correctness

For our main result, we assume that valid pre-assertions and relational correctness are checked soundly. The key properties of the typing system are summarized in the following lemma:

**Lemma 6.3 (Typing):**
1. **Type Preservation:** If \( \langle C, s \rangle \rightarrow \langle C', s' \rangle \) and \( C \) is typable, then \( C' \) is also typable. Furthermore, the assignment of types to the constituent commands remains consistent.
2. **Low Command Preservation:** If the active command in \( C \) is low and not a declassification, and \( \langle C, s \rangle \rightarrow \langle C', s' \rangle \), and \( t \sim s \), then there exists \( t' \) such that \( \langle C, t \rangle \rightarrow \langle C', t' \rangle \) and \( t' \sim s' \).
3. **High Command Preservation:** If the active command in \( C \) is high and \( \langle C, s \rangle \rightarrow \langle C', s' \rangle \), then \( s \sim s' \).
4. **High-Typed Commands Termination:** If \( \Gamma \vdash C : H \), then \( C \) always terminates, and every constituent command of \( C \) is also typed high.

Type checking and assertion checking can involve the entire program, but each subprogram can be checked independently using types or specifications for other program units. Relational correctness checks are modular in a stronger sense: they apply only to declassification commands.

### 7. Soundness

This section is dedicated to proving the following theorem:

**Theorem 7.1:** Suppose \( M \) is statically secure (Definition 6.2). Then it has the conditioned gradual release property (Definition 5.5).

To connect the static analysis with conditioned gradual release (CGR), we need a simulation-style characterization of the situation where an additional observed state does not increase knowledge. The main definitions (Section 5) work at the level of traces and low-observable distinctions on traces. However, to show the soundness of the enforcement regime, we need a finer analysis in terms of pre-runs.

For traces \( \sigma \) and \( \tau \) with generating pre-runs \( S \) and \( T \), indistinguishability can be characterized using a notion that resembles the instantiation of a simulation, matching up the low parts of \( S \) and \( T \).

**Supporting Definition:** If the active command of \( C \) is typed high, the L-continuation of \( C \), denoted \( \text{Lcont}(C) \), is the command \( D \) such that \( C = B ; D \) where \( B : H \) and \( D : L \). (The active command may be all or part of \( B \).) Here, \( D \) may be empty.

**Definition 7.2 (Correspondence):** Suppose \( S \) and \( T \) are pre-runs, and let \( \text{dom}(S) \) be the set of indices \( \{0, \ldots, \text{last}(S)\} \) of \( S \). A correspondence from \( S \) to \( T \) is a relation \( Q \subseteq \text{dom}(S) \times \text{dom}(T) \) such that:
1. **State Agreement:** \( \text{state}(S_i) \sim \text{state}(T_j) \)
2. **Level Agreement:** \( \text{actc}(S_i) : L \) if and only if \( \text{actc}(T_j) : L \)
3. **Code Agreement (L):** \( \text{code}(S_i) = \text{code}(T_j) \) if \( \text{actc}(S_i) : L \)
4. **Code Agreement (H):** \( \text{Lcont}(\text{code}(S_i)) = \text{Lcont}(\text{code}(T_j)) \) if \( \text{actc}(S_i) : H \)
5. **Monotonicity:** If \( i Q j \), then for all \( i' > i \) and \( j' > j \), \( i' Q j' \)

### 8. Example: Patient Records

Consider the following class definition for patient records:

```java
class PatientRecord<L> {
    int id;
    boolean committed;
    int vsn;
    String{alpha} diag;
    String{beta} notes;
    PatientRecord{L} next;
}
```

Note that the levels of `diag` and `notes` are type parameters, which allows for level polymorphism similar to Jif and other security type systems [31], [33]. Patient records are linked by the `next` field, which is explicitly labeled as low. We assume that `diag` and `notes` contain secret values. A sensible declaration and non-interferent assignment to obtain the list of records is:

```java
root := db.lookupAll();
```

where `root: PatientRecord{L}`. To declassify the diagnoses in the list, one could clone the list and iteratively perform declassifications. This cloning is done extensively in Jif case studies [3] to avoid laundering attacks where fields are updated with high information after declassification via high aliases into the data structure.

If there are no exploitable aliases, cloning is unnecessary and costly. We would like to release the entire list of patient records with a single assignment:

```java
newRoot := root;
```

where `newRoot: PatientRecord{L}`. This will be rejected by the typechecker due to the types of `root` and `newRoot`. However, it can be made a declassification subject to a flow specification like this:

```java
flow pre ISOL(root) & A(root) âˆ§ A(root.next*.diag)
mod newRoot, newRoot.next*.diag
```

The agreement precondition specifies that the `diag` field of all records is released. The state predicate `ISOL(root)` ensures that the records are reachable only via `root`. This property is well-studied in the literature on ownership for heap encapsulation [12]. For our purposes, we need transferrable ownership, which can be expressed and enforced by certain type systems and program verifiers [7], [23].

The modifies clause reflects that giving type `PatientRecord{L}` to `newRoot` effectively changes the type of all the records (due to the declared type of `next`). Thus, the relational correctness condition for static security (Definition 6.2(3)) will specify agreement on all reachable `diag` fields, which follows from the agreement precondition.

In summary, extending our enforcement regime to declassification of data structures adds a requirement on flow specifications, namely the isolation precondition, which must be proved as a valid pre-assertion.

### 9. Related Work

Sabelfeld and Sands [29] systematically analyze...