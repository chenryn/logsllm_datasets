it is therefore a matter of synchronizing the control of the
two coils with the actual turns, the real time spooﬁng of the
GPS is more challenging. As noted in the related work, there
are various systems that generate ofﬂine GPS RF signals for a
pre-determined trajectory. It is challenging when the trajectory
changes in real time as it is critical that the GPS receiver does
not lose the lock on the satellites, which would happen if a
new GPS position is abruptly spoofed.
We extended an existing open source tool [48] that spoofs
GPS RF signals to dynamically interpolate a desired trajectory
in real
independently adjusting each of the spoofed
time,
(a)
(b)
Fig. 6: a) Experimental setup used for magnetometer spooﬁng.
b) The two-coil system attached to a Google Pixel 2
(cid:2)
(cid:2)
(cid:4)N
i=1 Ci, where Ci =
between the (k − 1)th and kth intersections (Equa-
sk and s
tion (3)). The road curvature ϑ(sk) is already known in the
form of the gyroscope data. However, this curvature must be
). Given the union of
interpolated to the same length as ϑ(s
curve similarity sets for all K intersections for N sensor paths
(cid:4)K
j=1 C(sj, s
C =
(cid:2)
j), the curvature errors
ec is simply a set of absolute differences between all the
points in the two curves, i.e., ec = {|cs − ca| ∀[cs, ca] ∈ C}.
Figure 5c shows the distribution of the curve errors. Recall that
the escape paths generator algorithm deﬁnes parameters Tθ
and Tϑ to ﬁlter connections based on turn angles and curvature,
respectively (Section III-C3). Based on the 75th percentile of
the error distributions, we set the parameters to Tθ = 5.5
and
Tϑ = 2.8
◦
◦
in our evaluations.
We compute the bearing errors using the same technique
as curvature. Figure 5d shows the distribution of the bearing
errors. Note that the errors are much larger than the Gyroscope
owing to nearby magnetic ﬁelds from fans, speakers and other
electromagnetic devices. These errors are very difﬁcult
to
reduce and requires performing regular hard-iron calibration
of the device inside the vehicle.
3) Magnetometer Spooﬁng: As a proof of concept, we
built a prototype of a magnetometer spoofer for the Google
Pixel 2 smart phone. Our experimental setup is shown is
Figure 6a and consists of the following modules: (A) an ESP32
microcontroller, (B) a 8-channel relay module, (C) resistors
for controlling current ﬂow, (D) a two coils system, and (E)
a Google Pixel 2 mounted on a car mount. We ﬁrst identiﬁed
the exact location of the magnetometer which is on the top-
left of the phone (42mm from the top and 7mm from left
edge of the phone). We designed and 3D printed a two-coils
system, shown in Figure 6b, that snaps on to the phone and
allows the wrapping of enameled magnet wire. We focused on
controlling the x and y axes as they are easily reachable. Using
two coils each targeting one of the axes allows full control of
(cid:22)(cid:26)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:50:11 UTC from IEEE Xplore.  Restrictions apply. 
100
90
80
70
60
l
)
e
v
i
t
a
u
m
u
C
(
s
e
v
r
u
C
f
o
t
n
e
c
r
e
P
Atlanta
Beijing
Boston
Chicago
Frankfurt
Houston
London
Manhattan
Paris
SF
l
)
e
v
i
t
a
u
m
u
C
(
s
n
r
u
T
f
o
t
n
e
c
r
e
P
100
80
60
40
20
0
Atlanta
Beijing
Boston
Chicago
Frankfurt
Houston
London
Manhattan
Paris
SF
0
20
40
Curvature (deg)
60
50
75
100
125
150
Turn Angle (deg)
(a) Curvature Distributions
Fig. 8: Comparison of the curvature and turn distribution.
(b) Turn Distributions
satellite signals at a ﬁne grain, therefore enabling the GPS
receiver to maintain its lock and enabling a tight control loop
of the spoofed GPS signal. In order to account for trafﬁc
ﬂuidity, congestion, and lights, we spoof being at a position
that is proportionally equivalent on the physical road section.
Therefore, the spoofed position remains constant when the
vehicle is not moving and this position changes with a velocity
proportional to the real velocity when the vehicle is moving.
The paths are mapped such that when the driver turns on the
real path, the spoofed position also turns on a valid intersection
with a similar turn angle to the real turn. To the best of our
knowledge, this is the ﬁrst real time dynamic GPS spoofer.
The GPS spoofer also integrates with other sensor spooﬁng
peripherals, in this case the magnetometer.
C. Evaluation Methodology and Setup
We implemented the ESCAPE attack algorithms in PyPy.
We used two servers running Intel Xeon CPUs at 2.40GHz
with 12 cores and 20GB of RAM to execute the algorithms
and evaluate its performance i.e., how far can an attacker
escape, given a start and end point, without being detected.
Selection of cities: We evaluate the effectiveness of our
attack on the road networks of 10 major cities across the
globe. The following cities were chosen across the continents
of North America, Europe and Asia for the evaluation. The
cities were chosen to represent the entire spectrum of urban
characteristics such as major logistics and transportations hubs,
dense population, city planning (e.g., grid-like or circular),
etc. Figure 8 shows the cumulative road curvature and turn
distributions for all selected cities. Recall that the road curva-
tures are calculated using Equation (1). We can observe that
Chicago and Manhattan have mostly straight roads and right
angled turns while the road networks of London and Paris
have very unique characteristics.
Generation of spoofed and escape routes: The evaluation
was performed by running simulations for every selected city.
This simulation data comprised of 1000 randomly generated
paths in every city, such that the path distances were uniformly
distributed between 1km and 21kms. The intention was to
evaluate the potential of spooﬁng also as a function of the
path distance. The simulation paths were generated as follows:
(i) a random ‘Home’ and ‘Work’ location were chosen from
OpenStreetMap tags inside the interest area, (ii) the geographic
coordinates of the end points were retrieved, and (iii) the
coordinates were given as input to the attack algorithms to
compute the spoofed and escape paths.
Integrated system: We built an attack evaluation system
that includes a GPS receiver (ublox NEO-M8N) to obtain
the real location of the vehicle in real time, a bladeRF x40
SDR to generate the spoofed GPS signal, our magnetometer
spoofer (described earlier), all connected to a Dell XPS laptop
running the control software. On the target side, we use a
Google Pixel 2 target (ﬁtted with the magnetometer spoofer).
In order to avoid transmitting the spoofed GPS signal over
the air (and potentially interfering with other neighboring
devices), we use a second external GPS receiver with an
external antenna connected to the bladeRF using an RF coax
cable. The second GPS receiver is connected to the Pixel
phone through a USB link. The control software integrating
all the components is written in Python and leverages existing
libraries (e.g., geodesic calculations, nearest node search).
As for the attack setup, we create a mapping between the
escape and spoof paths. The mapping simpliﬁes the spooﬁng
real time execution, as each attacker’s real location corre-
sponds to a spoofed location. More speciﬁcally, we (1) split
both paths into segments such that a segment is a part of road
between two turns, (2) interpolate coordinates of the escape
path such that each coordinate is at exactly 1 meters from
previous coordinate, and (3) interpolate coordinates of spoof
path using escape paths segments, i.e., this interpolation has
exactly the same number of points and the distance is based
on its ratio with the corresponding escape segment.
Executing the Integrated Attack: Three key blocks (Figure 9)
operate in parallel handling different functions (threads). (1)
The ﬁrst block gets the real GPS location of the attacker
using a ublox NEO-M8N operating at 10 Hz. It uses the GPS
location to compute the nearest escape location on the map,
and the corresponding mapped spoof location on the map. The
spoof bearing can be estimated based on the spoof location.
The efﬁciency of calculating the spoof location is important to
avoid lags between sensor turns and the spoof GPS turns. To
compute the nearest escape location efﬁciently, we use a 2D-
Tree (a two dimensional representation of a KD-Tree) which
has an average time complexity of O(log n) with a worst-
case time complexity of O(n), where n is the count of total
coordinates in the escape path. In our experiments, using a
Dell XPS laptop (i7 Quad-Core processor with 16GB RAM),
the average time for computing the spoofed location is ≈ 4ms
with worst-case of ≈ 60ms. This is negligible delay for human
perception. (2) The second block updates the spoofed location
to the bladeRF x40 Software Deﬁned Radio (SDR) every
10ms. To avoid transmitting and disturbing the GPS signals
of neighboring vehicles, the Tx of the SDR was connected
to another ublox NEO-M8N and acted as an external antenna
for the GPS receiver. The device under test (DUT) obtained
signals from this GPS receiver using USB OTG. (3) The third
block updates the spoofed bearing to the magnetometer.
(cid:22)(cid:26)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:50:11 UTC from IEEE Xplore.  Restrictions apply. 
Integrated 
Spoofing Software 
(Laptop)
GPS Receiver
(ublox NEO-M8N)
GPS Spoofer
(bladeRF x40 SDR) 
Tx
GPS Receiver
(ublox NEO-M8N)
Mobile
Device
Magnetometer 
Spoofer
Fig. 9: Block diagram of the integrated spooﬁng system.
D. Evaluation Results
We measure the performance of our attack using the two
metrics: (i) displacement and (ii) coverage area.
Displacement from Intended Destination: We deﬁne dis-
placement from the intended destination as the farthest dis-
tance an attacker can reach for a chosen trip (i.e., given a start
and end point) without being detected. For every evaluation
route, escape and spoofed paths are generated as described
previously. We then calculate the euclidean distance between
the destinations an attacker reaches by taking the escape route
and the actual intended destination i.e., the assigned end point
for the trip. We present our results in Figure 10. Figure 10a
shows the attacker’s deviation from the intended or assigned
destination for the generated routes in all 10 cities. It can
be observed that in majority of the cities, more than 20%
of the routes allow more than 10 km deviation from the
intended destination. There are at least 10% of the routes in
all selected cities where the attacker is able to reach points
as far as 30 km away from the assigned destination. Chicago
and Manhattan perform the worst among the selected cities
with more than 40% of the routes allowing a displacement
of 15 km or above. This is due to the regular patterns that
exist in these cities’ road network. Figure 10b shows the
maximum displacement in each city for speciﬁc assigned route
lengths. It
in Manhattan and
Chicago the maximum displacement caused is independent of
the assigned route distance. This is due to the structure of the
cities itself. For example, Manhattan is a narrow strip with grid
like structures and therefore maximum displacement saturates
at some point. However, for a city like Beijing there are routes
that allow an attacker to spoof his location to as far as 40 km
away from the intended location.
to observe that
is important
Coverage Area of Spoofed Paths: The goal of this evalua-
tion is to determine the percentage of area an attacker can
cover by traveling the escape paths generated for a given
source Loc(s) and destination Loc(d) geographic coordinates.
Let A denote the total geographic area of interest
to an
attacker. For this evaluation, we deﬁne this area as a circle
of radius r = d(Loc(s), Loc(d)) with center at Loc(s) where
r is the euclidean distance between the source and destination.
The above area may comprise of water bodies which must be
accounted for more accurate coverage. Let AL denote the area
of land within the interest area. Within AL, let AC denote the
area that the attacker can cover if he is willing to walk a small
l
)
e
v
i
t
a
u
m
u
C
(
s
e
t
u
o
R
f
o
t
n
e
c
r
e
P
100
80
60
40
20
0
Atlanta
Beijing
Boston
Chicago
Frankfurt
Houston
London
Manhattan
Paris
SF
)
m