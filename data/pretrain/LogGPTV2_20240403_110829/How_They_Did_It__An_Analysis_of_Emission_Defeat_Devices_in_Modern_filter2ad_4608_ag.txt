1


+
H
L

G

I
2
E
1
)
@
@
+

H


)
2
1

E
+
H
L

G

I
2
E
1
)
@
@
+

H

+
Fig. 5: NOx regeneration release logic combining the start and release signals from the homologation and real driving logic to compute the single regeneration
release signal stRlsDNOx. Demand and release conditions are computed separately for the homologation and real driving logic . The output of the
Kind of Request block is non-zero if either of the homologation or real driving signals is true . The ﬁnal release signal stRlsDNOx is only asserted 
if either the homologation or real driving release signals is true. Blue numbers  through  added by authors. From function sheet EDC17C69 P 1264 for
Fiat 500X. Copyright Robert Bosch GmbH.
phase (lasting from 30 to 300 seconds) and purging it during
the regeneration phase (lasting 2 to 10 seconds). Regeneration
reduces fuel economy and increases the load on the DPF. By
reducing the frequency of NSC regeneration, a manufacturer
can improve fuel economy and increase DPF service life, at
the cost of increased NOx emissions.
In the Fiat 500X ECU, the logic controlling NSC regenera-
tion is divided into demand logic and release logic. The former
determines when NSC regeneration should take place, while
the latter imposes constraints on when regeneration is allowed
to start. For regeneration to start, the demand logic must re-
quest regeneration, asserting the NSCRgn stDNOxStrt signal
while the release signal NSCRgn stRlsDNOx must be asserted
by the release logic. (DNOx refers to NSC regeneration, which
purges stored NOx from the catalyst.) In the EDC17C69 func-
tion sheet we examined, both the demand and release logic was
duplicated into two parallel blocks. The ﬁrst pair of demand
and release blocks applies to a “homologation cycle” while
the second pair to “real driving.” (Homologation refers to the
process or act of granting approval by an ofﬁcial body, for
example, of a vehicle for sale in a particular jurisdiction. The
terms “homologation” and “real driving” are taken from the
EDC17C69 function sheet.) Names of signals and logic blocks
used in the homologation logic contain Hmlg in their name,
while those used in the real driving logic contain Rd in the their
name. The demand logic for the homologation and real driving
blocks are very similar, using the total estimated NOx load,
catalyst temperature, and other variables to determine when to
trigger regeneration. The homologation and real driving logic,
however, uses different calibration parameters, allowing the
manufacturer to supply completely different models for the
test cycle and real driving.
Both homologation and real driving logic blocks can request
a regeneration. Similarly, the release signal is also controlled
by two parallel logic blocks. Figure 5 shows how the signals
are joined. The homologation release signal is AND-combined
tiSnceFrstRunngRed
NSCRgn_tiCoEngMaxHmlg_C 
NSCRgn_stTiCoEngHmlg_mp 
stTiCoEngHmlg
Fig. 6: The stTiCoEngHmlg signal
logic required to set stDNOxHmlg,
allowing NOx regeneration to proceed under the “homologation” sched-
ule.
examined,
NSCRgn tiCoEngMaxHmlg C is set
to 1600 seconds. Copyright Robert
Bosch GmbH.
In the 55265162 Fiat 500X ﬁrmware
image we
with the homologation demand signal, and likewise the real
driving signal demand and release signals (marked  in
Figure 5). The homologation release signal
is delayed by
NSCRgn tiDlyRlsDNOxHmlg C, which is set to 300 seconds
in the 55265162 ﬁrmware image. The resulting release signal
out of the block is asserted if either the homologation or the
real driving signal is true.
The logic controlling the homologation regeneration release
signal is shown in Figure 12, and the corresponding logic
block for real driving in Figure 13 in the Appendix. The
important feature of the homologation release block is that
all conditions deﬁned by the blocks shown in the ﬁgure must
be met, because their outputs are AND-combined to produce
the output signal stDNOxHmlg. In particular, this means that
the stTiCoEngHmlg output of the ﬁrst sub-block must be
true. The bottom of Figure 12 shows how this signal is
computed: stTiCoEngHmlg is set if the running time since
engine start, tiSnceFrstRunngRed, is less than or equal to
the constant NSCRgn tiCoEngMaxHmlg C. In the Fiat 500X
ﬁrmware image we examined, this constant was calibrated to
1600 seconds. Thus, the homologation regeneration release
signal stDNOxHmlg will be inhibited if the engine has been
running longer than 1600 seconds. In addition, stDNOxHmlg
also requires that the total driving cycle fuel consumption be
at most NSCRgn volFlConsMaxHmlg C, which is conﬁgured
to 1.3 liters in our ﬁrmware image.
240
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:25:49 UTC from IEEE Xplore.  Restrictions apply. 
This means that regeneration requested by the homologation
demand block will only be allowed to start a regeneration
during the ﬁrst 1600 seconds (26 minutes 40 seconds) of
engine operation. After that, only NSC regeneration requested
by the “real driving” logic will be allowed to start regeneration.
We note that this coincides with the runtime of standardized
emissions test cycles.
The logic blocks described above include several switches
that may disable this dual path behavior. In the Fiat 500X
ﬁrmware image we examined, we found that both paths were
enabled (NSCRgn swt{Hmlg,Rd}HmlgActv C = true). The
homologation release delay NSCRgn tiDlyRlsDNOxHmlg C
was set
to 300 seconds, which limited the frequency of
homologation-requested regeneration to once every ﬁve min-
utes. We also examined the demand logic for homologation
and real driving.
V. DETECTING DEFEAT DEVICES
Based on the insights obtained in our case studies, we
designed a static analysis tool that helps us to identify a defeat
device in a given ﬁrmware image. We implemented a prototype
of this approach in a tool called CURVEDIFF for EDC17 ECUs
that enables us to track the evolution and behavior of such
a device across a large number of ﬁrmware images. In the
following, we discuss design considerations and the general
workﬂow together with implementation details.
A. Design Considerations
Our method aims to automatically identify potential defeat
devices which actively try to detect an ongoing emissions test
based on the car’s driving proﬁle during the test cycle. More
speciﬁcally, we try to identify code regions in a given ﬁrmware
image that attempt to determine if the car currently follows one
of the standardized test cycles and whose behavior inﬂuence
the operation of the engine. We thus focus on the type of defeat
devices implemented by Volkswagen since they represent more
sophisticated defeat devices compared to the time-based ones
implemented by FCA.
Our design decision to focus on test cycle detection is due to
two important factors. First, this approach requires relatively
little previous domain knowledge about ﬁrmware speciﬁcs and
is thus rather unlikely to be subject to syntactical changes in
the checking logic. In turn, this also means that we do not
have to rely on additional data such as .a2l ﬁles, which may
be hard to obtain for a given ﬁrmware image (even though
it would signiﬁcantly simplify the analysis). Second,
this
approach provides higher means of non-repudiation: Because
we do not rely on accurately determining ECU variables but
try to generically detect matches against well-known emissions
test cycles, the fact that the software actively checks against
the latter is hard to refute in general.
B. General Workﬂow
We use static code analysis to implement our approach
because we cannot easily execute a given ECU ﬁrmware image
in an emulator to perform a dynamic analysis. Furthermore,
static analysis enables us to obtain high code coverage by
analyzing each function individually. Our analysis framework
called CURVEDIFF is based on the IDA Pro 6.9 [13] dis-
assembler, which includes support for the Inﬁneon TriCore
processor used in Bosch’s EDC17 ECU. The framework is
fully automated and takes a binary ﬁrmware image as input.
When analyzing a ﬁrmware image, we perform the following
steps:
1) Generate and pre-process the IDA database,
2) Build core structures and lift to static single assignment
(SSA) form,
3) Analyze curve function invocations,
4) Match curve checks against test cycles.
In the following sections, we describe each step in more detail
and provide information about implementation details.
C. Preliminaries
The curve function SrvX IpoCurveS16 is a vital part of
the defeat device used by Volkswagen. It is also a core function
provided by the operating system itself and thus present in all
ﬁrmware images using the same OS. Further, we found that
it is widely used throughout the code of a ﬁrmware image.
Basically, it returns the y coordinate for a given x coordinate
on curve c, i. e., y ← SrvX IpoCurveS16(c, x). Since c
might be represented by a few data points only, the function
interpolates linearly.
Matching the current driving proﬁle against predeﬁned
emissions test cycles is performed by posing two curve queries
using SrvX IpoCurveS16: one yields the upper boundary on
y corresponding to the given x value, whereas the other yields
the lower boundary. Speciﬁcally, the boundaries ﬁt a known
test cycle that the real driving proﬁle (seconds since engine
startup x and covered distance y) is checked against.
D. Pre-Processing
For our analysis, in order to resolve memory accesses, we
need to obtain the small data regions (for global variables,
via TriCore’s system global register a0) and literal data
regions (for read-only data, via register a1) as well as the
function vector table (accessed via register a9), which stores
data associated with a certain function. The system global
registers are architecture and OS dependent and initialized
during startup, as all functions operate on them to access
the speciﬁc memory regions. Further, we need to obtain the
address of the curve function, which can be easily detected by
matching on parts of the function semantics (namely, linear
interpolation of two curve points) and verifying the result using
its call graph. Since this function is not customer-dependent
but provided by the OS, it does not change signiﬁcantly.
Note that
there are a few things we need to consider.
As the curve function may be wrapped, we need to detect
such instances to avoid having to perform inter-procedural
analyses later. In practice, wrappers can easily be detected
using the function’s call graph. In addition, we need to take
peculiarities of the architecture into account: TriCore supports
scratch pad RAM (SPRAM for short), which mirrors parts
241
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:25:49 UTC from IEEE Xplore.  Restrictions apply. 
of the ﬁrmware’s code in faster memory. As this is done on
startup (i. e., at runtime), we need to extract the mapping of
mirrored regions, as we otherwise might miss calls targeting
this memory area.
E. Lifting to Static Single Assignment Form and Optimization
In order to facilitate a robust static analysis suitable for
our task, we operate on an intermediate language (IL) in
Static Single Assignment (SSA) form. SSA was introduced
by Cytron et al. in 1991 [6] and describes the property of an
IL in which there is only one single deﬁnition for each variable
and each deﬁnition dominates its uses. This, in turn, enables
the design of efﬁcient data-ﬂow analysis algorithms.
The TriCore assembly language is expressive enough to
diminish the need for a full-ﬂedged IL, e. g., side effects are
rare and nearly all data ﬂow is explicit. Hence, rather than
developing a new IL from scratch, we modify the assembly
representation slightly in order to conform with requirements
assumed when transforming to SSA form. More precisely,
for instructions containing an operand that is both read and
written, we duplicate the operand such that use and deﬁnition
are properly distinguished. Similarly, for instructions deﬁning
more than one variable, we add one single deﬁnition (a tem-
porary register), and insert helper instructions that extract the
correct deﬁnition from the temporary register, and store them
into the target variable. For example, calls may, amongst
others, return results in both registers a2 and d2. As SSA
form does not allow multiple deﬁnitions for one instructions,
we introduce the temporary register re that stores the return
values of the call. Right after the call instruction, we add
artiﬁcial cconv.w instructions that read from re and store
the corresponding part of the return value into a2 and d2,
respectively. Further, we encode other particularities of the
TriCore calling convention explicitly. For example, we add
uses of parameter-passing registers a4 and d4 to calls and,
in a similar vein, uses of a2 and d2 to return instructions. We
transform the resulting assembly into pruned SSA form [5]
using liveness analysis. Finally, in order to coalesce memory
access via system global registers a0, a1, and a9, we optimize
each function using constant propagation.
F. Relating Curve Queries
Having transformed all functions into an intermediate rep-
resentation, each function is analyzed separately in order to
construct a list of candidates potentially checking against
emissions test cycles. To this end, we extract all invocations
of the curve function and try to group them into pairs of two,
where each call queries either the upper or lower boundary for
a given data point. This allows us to programmatically extract
the curves deﬁning both boundaries and match them to well-
known cycles in a later step. We deﬁne two such calls to the
curve function as being related.
Section V-C explained how two calls to the curve function
SrvX IpoCurveS16 are made in order to match the current
driving proﬁle against predeﬁned emissions test cycles. This
phi d11_5 [d11_1 d11_4 d11_4 d11_4]
d11_5
d11_5
d11_5
d11_5
d11_5
d11_5
d11_5
d11_5
mov16 d4_17 d11_5
80187510 mov16 d4_5 d11_5
801875d8 mov16 d4_10 d11_5
80187688 mov16 d4_15 d11_5
80187544 mov16 d4_6 d11_5
d4_5
d4_10
d4_15
8018751c call32 re_5 #800b64f0 a4_2 d4_5
801875f0 call32 re_10 #800b64f0 a4_7 d4_10
80187694 call32 re_15 #800b64f0 a4_12 d4_15
Fig. 7: Excerpt of a data-ﬂow graph used to verify property P-1. Curve calls
can be grouped by the origin of input coordinate x (passed via register d4,
originating from register d11).
801876be ld32.a a15_101 [a9_0]#9a4
a15_101
a15_101
801876ca lea a4_13 [a15_101]#368
801876d4 lea a4_14 [a15_101]#3a6
a4_13
a4_14
801876ce call32 re_16 #800b64f0 a4_13 d4_16
801876de call32 re_17 #800b64f0 a4_14 d4_17
Fig. 8: Example for data-ﬂow graph for verifying property P-2. Both calls to
the curve function are passed a different target curve via register a4.
observation allows us to identify several important properties
that must hold for two related curve queries:
P-1 Both curve queries in a related check have to take the
same variable as query point x (parameter d4). This
requirement follows from the fact that both curves use
the same axis. Concretely, x corresponds to the time since
engine start.
P-2 Both curve queries have to operate on distinct curves (pa-
rameter a4). This is because both curves encode multiple
possible driving proﬁles and allow for some deviation
from the exact test cycles due to potential imprecisions
during the emission testing.
P-3 The results ylow, yhigh (register d2) of both curves have
to be related in the sense that they implement a range
check on the actual y value (i. e., the distance driven since
engine start).
Properties P-1 and P-2. Effectively, property P-1 allows us to
group several calls to the curve function together, based on the
value provided for parameter x. In order to achieve this, for
each call, we backtrack register d4 and build a data-ﬂow graph,
where nodes are instructions and edges connect a variable’s
(necessarily unique) deﬁnition and its uses. An example for
the resulting graph can be seen in Figure 7. Evidently, all
curve calls take d115 as parameter x. Similarly, we can
backtrack register a4 in order to ﬁnd out the actual curves
the functions operate on. Figure 8 visualizes this approach.
Note that both leave nodes are connected via a15101, which
is the function vector entry holding all data associated with the
current function. However, both calls still operate on different
curves with offsets 0x368 and 0x3a6, respectively.
Property P-3. Property P-3 effectively states that the resulting
ys of two distinct curve calls are related if they end up in the
same “meaningful” expression; an expression is meaningful,
for example, if it implements an interval check by comparing
a given value with upper and lower boundaries as speciﬁed by
the curves.
In order to check P-3, we begin by building a forest
242
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:25:49 UTC from IEEE Xplore.  Restrictions apply. 
of data-ﬂow graphs by tracking forwards the return values
of all curve calls that lie in the same group, according to
property P-2. Note that in the data-ﬂow graphs, not all uses
of an instruction are considered. Each connected component
then either corresponds to the data-ﬂow graph arising from one
single curve call or it connects data-ﬂow graphs of multiple
curve calls together. While the ﬁrst case does not provide any
useful information, the latter case tells us that both curve calls
are in fact related. Even though this fact already is useful as-is,
we can further inspect how two calls are related.
Intuitively, the type of relation between two curve calls
is described by the node where the data ﬂows for each
return value meet. We call these nodes (forward) join nodes.
They can be computed by calculating the lowest common
ancestor (LCA) [2] of the vertex-induced subgraph of every
possible pair of curve calls. Figure 10 in the Appendix depicts
a part of the (single) connected component that reveals the
relations of all curve calls in the acoustic function. This
statement implements an interval check that could further be
conﬁrmed by, e. g., symbolically executing the path up to the
join node. Similarly, we can deﬁne (backward) join nodes as
the LCAs in the reverse data-ﬂow graph (more precisely, in the