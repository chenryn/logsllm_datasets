(not-access-passwd log)
;then, thepasswd access policy is satisfied
))
Using a similar method, we have proved that the speciﬁcation of the lpd
program satisﬁes the passwd ﬁle access policy with the assumption that the en-
vironment variable printerspool is not misconﬁgured. Changes to environment
variables are not monitored by SHIM, so this assumption clearly covers a prop-
erty that SHIM cannot check.
Composition of Speciﬁcations Satisﬁes the Policy. A further question is
whether the composition of diﬀerent speciﬁcations will satisfy the passwd ﬁle
access policy. In this section, we consider concurrent execution of diﬀerent priv-
ileged programs. We use ftp daemon and lpd as examples to show that the
composition of speciﬁcations of these two programs satisfying the policy.
Audit data of a system
ﬁlter
ftpd
lpd
ﬁngerd
Audit data for
specifc programs
spec of ftpd
spec of lpd
spec of ﬁngerd
Speciﬁcations for
programs
Fig. 3. Mechanism of SHIM to ﬁlter concurrent execution audit log
As shown in ﬁgure 3, in SHIM, the audit ﬁlter is used to separate the audit
trail of individual programs from the audit data of the system. We simulate the
ﬁlter using a function ﬁlter(prog, log) in ACL2, where prog is the name of the
program and log is the audit trail of the system. A question is whether the ﬁlter
will change the security property of the audit trail. If the ﬁlter maps the data
trail of a few privileged programs to the audit trail of each program and all
subsets of the data trail satisfy the passwd ﬁle access policy, does this means the
audit trail satisﬁes the policy?
292
Tao Song et al.
Suppose log is the audit trail of ftpd and lpd. We have proved that if the
audit trail of ftpd, ﬁlter(’ftpd, log), can pass the speciﬁcation check of ftpd and
if the audit trail of lpd, ﬁlter(’lpd, log), can pass the speciﬁcation check of lpd,
the audit trails of ftpd and lpd satisfy the passwd ﬁle access policy.
(defthm passwd-specs
(implies
(not (member ’(/ etc passwd) created))
;passwd file was not created by the process
(implies
(and (logp log) (consp log) (consp sys) (sys-p sys) (procsafe log)
;format checking
(passwdsafe log) (homedirsafe sys) (validuser sys log)
;assumptions for ftpd program
(validenv sys ’printerspool)
;assumptions for lpd program
(spec ftpd sys (filter ’ftpd log) created)
;the specification of ftpd is not violated by any operations
(spec lpd sys (filter ’lpd log) created))
;the specification of lpd is not violated by any operations
(not-access-passwd log)))
;then, the passwd access policy is satisfied
)
We notice that the assumptions in this veriﬁcation are the union of assump-
tions in these two veriﬁcations that have been proved priviously. All theorems
appearing in this section have been proved automatically by the ACL2 theorem
prover using rewriting and mathematical induction.
4.4 Performance
We measure the performance of ACL2 in carrying out the proofs described above.
We formalize the abstract system model, detection rules and security policies
with 174 functions and 13 data structures. We deﬁned and proved 56 lemmas
and theorems to complete the veriﬁcation. It took three weeks to develop all the
functions and complete the veriﬁcation. On a 450MHZ Pentium machine with
384 MB memory, ACL2 spent 15.21 minutes to complete the veriﬁcation. This
suggests that using ACL2 to formalize and verify security properties of IDSs is
a feasible approach.
5 Discussion
The assumptions of the veriﬁcation process may, in some cases, be guaranteed
through other tools. In the exemplary veriﬁcation, we introduced assumptions
needed to satisfy the passwd ﬁle access policy. These assumptions relate to access
permissions of target objects (e.g., the passwd ﬁle cannot be world-writable),
proper conﬁgurations (e.g., home directories of users cannot be /etc/), etc. SHIM
Formal Reasoning About Intrusion Detection Systems
293
is not capable of monitoring these static properties of the system. But these
assumptions can be checked by deploying other security tools such as Tripwire
[11] [25] .
In our veriﬁcation, the soundness and completeness of detection rules of IDSs
are not yet completely proved. If the soundness of the detection rules could be
veriﬁed, the false positive rate of IDSs would theoretically be proved to be zero.
In SHIM, the detection rules are speciﬁcations of the system. It is feasible, in
principle, to prove the soundness of speciﬁcations by comparing the speciﬁcations
with the implementation of the system. Automatic generation and veriﬁcation of
speciﬁcations can be achieved by associating formal methods with code analysis.
As an extreme but practically useless example, it is easy to prove a speciﬁcation
rejecting all possible behaviors is sound. Considering the huge false negative
rate, this speciﬁcation is clearly not an acceptable solution even with a zero
false positive rate. If the completeness of detection rules can be veriﬁed, the
false negative rate of IDSs will be zero. Similarly, a speciﬁcation accepting all
behaviors can be proved complete.
The ACL2 theorem prover is used in our veriﬁcation. It provides reliable ver-
iﬁcation by using well-accepted deduction rules, e.g., mathematical induction.
By describing properties of attacks, we can prove that all the attacks (includ-
ing known attacks and unknown attacks) with speciﬁc operations (e.g. invoking
shell) can be detected by SHIM. This veriﬁes an important and often-cited claim
of speciﬁcation-based intrusion detection: detection of unknown attacks. There
are a few limitations about mechanical theorem provers. First, proof creation
of almost any practical properties correct in theorem provers is not totally au-
tomatic. Although theorem provers help ﬁnd missing steps in proofs, it is still
impossible for a theorem prover to create proofs without human interaction.
Second, even if a proposition cannot be proved by a theorem prover, it doesn’t
indicate the proposition is wrong. Also it is diﬃcult to ﬁnd a counter-example
to show conditions under which a property is incorrect.
6 Conclusions and Future Work
In this paper, we present a formal framework that can be used to evaluate
detection rules of IDSs. ACL2 is used to formalize declarative components of the
framework and to carry out the veriﬁcations. An abstract system model is built
as the basis for veriﬁcations. Trusted ﬁle access policies are developed to deﬁne
authorized access on security-critical objects of a system. We also report on our
experience with a preliminary implementation of this framework in reasoning
about security properties of SHIM, a speciﬁcation-based IDS. We have formalized
all detection rules of SHIM, speciﬁcations for privileged programs, and addressed
two important issues about SHIM (and speciﬁcation-based IDS, in general): what
attacks can be detected by SHIM and whether abstract security policies can be
satisﬁed by SHIM. An important feature of SHIM, its ability to detect unknown
attacks, is actually veriﬁed by specifying properties of attacks.
Potential future work includes analyzing misuse detection systems (i.e. signa-
ture-based IDSs) and network IDSs; generating speciﬁcation using code analysis;
294
Tao Song et al.
verifying soundness of speciﬁcations; and developing realistic security policies for
network protocols.
Acknowlegements
We thank Steven Cheung, Jeﬀ Rowe, Poornima Balasubramanyam, Tye Stallard
and Marcus Tylutki for helpful discussion on security policy, veriﬁcation and
intrusion detection. We are grateful to Patty Graves for her valuable help. This
material is based upon work supported by the National Science Foundation under
Grant No 0341734. Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the author(s) and do not necessarily reﬂect
the views of the National Science Foundation.
References
1. R. S. Boyer and J S. Moore, A computational logic, Academic Press, New York,
1979.
2. Cert coordination center, advisory ca-1999-03,
http://www.cert.org/advisories/CA-99-03.html
3. C.C.W. Ko , “Execution Monitoring of Security-Critical Programs in a Distributed
System: A Speciﬁcation-Based Approach”, Ph.D. Thesis, August 1996
4. C. Ko, “Logic induction of valid behavior speciﬁcations for intrusion detection”,
Proc. of IEEE Symposium on Security and Privacy 2000
5. C. Ko, J. Rowe, P. Brutch, K. Levitt, “System Health and Intrusion Monitoring
Using a hierarchy of Constraints”, Proceeding of 4th International Symposium,
RAID, 2001
6. Anup K. Ghosh and Aaron Schwartzbard , “A Study in Using Neural Networks
for Anomaly and Misuse Detection”, Proc. of USENIX Security Symposium, 1999
7. C. Ko, G. Fink, and K. Levitt. “Automated detection of vulnerabilities in privi-
leged programs by execution monitoring”. In Proceedings of the Tenth Computer
Security Applications Conference, pages 134-144, Orlando, FL, Dec. 1994. IEEE
Computer Society Press.
8. C. Ko, M. Ruschitzka, and K. Levitt, “Execution Monitoring of Security-critical
Programs in Distributed Systems: A Speciﬁcation-based Approach,” Proc. of the
1997 IEEE Symposium on Security and Privacy, Oakland, California, May 1997,
pp. 134-144.
9. M. Kaufmann, P. Manolios, J S. Moore, “Computer-Aided Reasoning : An Ap-
proach”, Kluwer Academic Publishers, 2000
10. C. Ko, J. Rowe, P. Brutch, K. Levitt, “System Health and Intrusion Monitoring
Using a hierarchy of Constraints,” Proceeding of 4th International Symposium,
RAID, 2001
11. G. Kim, E. H. Spaﬀord, “The design of a system integrity monitor: Tripwire,”
Technical report CSD-TR-93-071, Purdue University, November 1993
12. Jia-Ling Lin; Wang, X.S.; Jajodia, S., “Abstraction-based misuse detection: high-
level speciﬁcations and adaptable strategies”, Proc. of IEEE Computer Security
Foundations Workshop, 2002.
Formal Reasoning About Intrusion Detection Systems
295
13. Wenke Lee; Stolfo, S.J.; Mok, K.W., “A data mining framework for building in-
trusion detection models”, Proc. of IEEE Symposium on Security and Privacy,
1999
14. Matthew A. Bishop, Computer Security: Art and Science, Addison Wesley Long-
man 2002
15. Matt Kaufmann, Panagiotis Manolios, and J Strother Moore, “Computer-Aided
Reasoning: An Approach”, Kluwer Academic Publishers, June, 2000
16. M. Roesch, “Snort: Lightweight Intrusion Detection for Networks”, Proc. of
USENIX LISA ’99, Seattle, Washington, November 1999, pp. 229-238.
17. J.P. Pouzol, M. Ducasse, “Formal specication of intrusion signatures and detection
rules”, Proc. of IEEE Computer Security Foundations Workshop, 2002.
18. P.A. Porras and P.G. Neumann, “EMERALD: Event Monitoring Enabling Re-
sponses to Anomalous Live Disturbances”, Proc. of the 20th National Information
Systems Security Conference, Baltimore, Maryland, October 1997, pp. 353-365.
19. Roger, M.; Goubault-Larrecq, J., “Log auditing through model-checking”, Page(s):
220-234, proc.of 14th IEEE Computer Security Foundations Workshop, 2001.
20. R. Sekar,Yong Cai, Mark Segal, “A Speciﬁcation-Based Approach for Building Sur-
vivable Systems,” Proc. 21st NIST-NCSC National Information Systems Security
Conference 1998
21. Schultz, M.G.; Eskin, E.; Zadok, F.; Stolfo, S.J., “Data mining methods for de-
tection of new malicious executables”, Proc. of IEEE Symposium on Security and
Privacy,2001
22. P. Uppuluri, R. Sekar, “Experiences with Speciﬁcation-based intrusion detection,”
Proc of Recent Advances in Intrusion detection, 2001
23. David Wagner, Drew Dean: Intrusion Detection via Static Analysis. IEEE Sympo-
sium on Security and Privacy 2001.
24. D. Zerkle, K. Levitt, “NetKuang-A Multi-host Conﬁguration Vulnerability
Checker,” Proc of Sixth USENIX Security Symposium, 1996
25. A. Mounji, B. Le Charlier, “Continuous Assessment of a Unix Conﬁguration: In-
tegrating Intrusion Detection and Conﬁguration Analysis,” Proc.of the ISOC’ 97
Symposium on Network and Distributed System Security. 1997.