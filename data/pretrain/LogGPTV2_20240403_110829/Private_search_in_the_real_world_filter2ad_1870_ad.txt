pared to the minimum baseline for encrypted transfer. The time
also shows linear growth, suggesting that it is dominated by ﬁle en-
cryption and transfer, rather than for the encryption and veriﬁcation
of the results vector itself.
As a point of comparison, Olumoﬁn and Goldberg [29] present
some of the best implementation performance results currently
published for multi-selection single-server PIR. In their perfor-
mance results, we see response times per retrieval ranging from 100
to 1000 seconds for retrievals of 5-10 documents on database sizes
ranging from 1 to 28 GB. Our scheme scales strictly with number
and size of documents retrieved, and not with the total database
size. They do not state the sizes of the blocks retrieved in their
scenario, but if we were to give a very high estimate of 1 MB per
block, and assume they fetched 10 blocks every time, one could
expect in our system that each query would take .7 seconds, still
orders of magnitude short of the 100s fastest time they report for a
1GB database, and it would not scale up with increasing database
size as theirs does, thus signiﬁcantly beating the 1000s time they
report for a 28GB database. Note that their system is not designed
to protect privacy of the database, only of the request. The work
of [14] presents a protocol for privacy-preserving policy-based in-
formation transfer, which achieves privacy guarantees weaker than
SPIR and similar to ours. Direct comparison between our and their
performance results is hard — they present timings only for the
computation time without communication, which grows linearly
with the size of their database. The maximum size of their database
is 900 records with 2000 ms computation per record retrieval, while
for our scheme the entire record retrieval time (computation plus
communication) for a database with 25000 records is about 40ms
(Figure 8, described in the next section).
6.6 Overall Performance
Finally, we compare the performance of the extended SADS sys-
tem with a real world DBMS, MySQL. In order to do that, we
implemented a SQL front-end for SADS that could parse simple
conjunctive and disjunctive queries. Then, we loaded the synthetic
dataset to both systems and we executed a number of queries of
variable result set size. SADS was conﬁgured to use multiple hash
functions and document retrieval was enabled. Parallel searching
was also disabled, which means that we compared using the less
efﬁcient version of the extended SADS. Figure 8 shows the total
duration of both the query and the retrieval of the data for our sys-
tem and MySQL. Our scheme performs just 30% slower on average
than MySQL, which is the price for the privacy guarantees it pro-
vides.
6.7 Case Study: Sharing of Health Records
We next examine, from a very high level, the suitability of our
scheme for a hospital’s admissions records database. (A database
for full medical record storage is vastly more complex and is not
addressed here.) A patient’s health record is very sensitive infor-
mation, usually kept by the patient’s medical institution. There are
cases, though, where such information needs to be shared among
different institutions. For example, a patient may need to visit a dif-
ferent institution due to an emergency, or to get a second opinion.
This sharing may need to be done privately for several reasons. In
an emergency, a doctor may need to query all the institutions that
share records with his without revealing the patient’s identity, es-
pecially to the institutes that do not have information about him.
If the querying is not private in that case, some institutions would
learn information about a patient that has never visited them. Or,
a patient may not want his institution to know which institution he
visits for specialized needs, such as drug rehabilitation, so again
the query for his record has to be performed privately.
A database of health records is similar to the synthetic dataset we
used in our evaluation. It contains some searchable ﬁelds like name,
date of birth, height, etc.; each record may be linked with several
medical exam results like x-rays, electrocardiographs, magnetic to-
 0.001 0.01 0.1 1 10 100 1000 10000 100000125102050100200500100020005000Time (seconds)Dataset Size (files)Doc. Ret.SSH 0 100 200 300 400 500 600 700 800 900 0 5000 10000 15000 20000 25000Time (secs)Number of Records RetrievedMySQLExtended SADSmographies, etc. In 1988, there were about ten routine tests during
the hospital’s admission process alone [20]; today, about thirty in-
dividual tests are done.1 Taking into account that some of the re-
sults can be a few tens of Mbs — for example, a head CAT scan is
about 32 MB — each health record could be a couple of hundred
megabytes. One major hospital complex admits about 117K inpa-
tients per year2; to a ﬁrst approximation, their database would thus
have several hundred thousands rows and 30–40 columns.
We have already seen, though, that the extended SADS scheme
we propose can successfully handle a database of this size. Our
evaluation demonstrated that document retrieval adds only a small
overhead compared to simple transfer, thus easily scaling with the
size of the document retrieved. Also, searching over 100K records
with 51 searchable attributes each takes less than half a second,
thus meeting real-world requirements. Finally, the support for up-
dates in health records is a requirement covered by our extended
SADS scheme. We conclude that our scheme is able to handle the
requirements of this hospital, while preserving patient privacy.
7. RELATED WORK
Most of the existing constructions providing encrypted search
capabilities aim to solve the case of database outsourcing [4–6, 8,
13,33]. In this setting a party outsources the storage of his database
to an untrusted server and wants to enable the server to execute
searches on his behalf without learning information about either the
data or the query. Unlike the data sharing scenario that we consider,
this setting does not impose privacy requirements for the data with
respect to the querier. A common technique in encrypted search
schemes [4, 33] is to use trapdoors derived from query terms that
enable the server to determine if a ciphertext matches the speciﬁc
term. This implies the search complexity will be at best linear in
the number of searchable tokens. A different approach in the set-
ting of database outsourcing is to use inverted indices, where the
search structures directly map all possible search terms to matches
[8, 13]. Search then consists of ﬁnding the appropriate entry in
the search structure for a given query’s trapdoor. Such solutions
leak the search pattern across a sequence of queries and are not
easily extendable to allow more complicated queries beyond exact
match when we need to preserve the privacy of the database from
the querier.
Protecting the search pattern imposes efﬁciency costs. Bellare et
al. [25] showed that in order to achieve sublinearity of the search
complexity over encrypted ciphertexts, deterministic encryption
is required, which leaks the search pattern. The works of [30]
and [17] combine the idea of using deterministic encryption with
Bloom ﬁlters [3] as search structures. However, the Bloom ﬁl-
ter search structures constructed in these works leak the similar-
ity of the underlying documents to the party who uses them for
search. The work of [12] offers a scheme that exchanges search
pattern leakage for efﬁciency improvement. While the suggested
approach achieves sublinearity of the search complexity in terms
of the number of searchable records, using preprocessing that trans-
forms searchable tokens occurring in multiple records with unique
tokens per record, it still requires time linear in the number of all
searchable tokens contained in the matching records. Thus this so-
lution is appropriate for scenarios with small numbers of searchable
tokens per record, its efﬁciency improvements do not sufﬁce in the
case of long documents that contain many searchable keywords.
Search capability beyond simple exact matches has been
achieved through constructions for attribute-based encryption [2,
1Private communication with a physician.
2http://nyp.org/about/facts-statistics.html
19] and predicate encryption [22]. These approaches have a sim-
ilar ﬂavor to some of the searchable encryption schemes in the
sense that they allow decryption only if the encrypted message sat-
isﬁed a certain condition, which can be expressed, for example,
as a dot product, Boolean formula or polynomial evaluation. But
this also brings the related efﬁciency overhead that requires linear-
ity in the size of all searchable tokens. Range queries are another
type of queries with important practical applications. The work of
√
[6] presents a protocol for range queries that comes with overhead
n) where n is the size of the domain of the searchable values.
O(
Shi et al. [32] incur O((log n)D) computation overhead for D di-
mensional queries. Both of these schemes require that the token for
the searchable interval is issued by the owner of the secret encryp-
tion key, which sufﬁces for data outsourcing solutions but does not
address the case of the data sharing.
If we consider the document retrieval functionality when the
querier is the data owner, the search party can return the encrypted
matching documents for which the querier has decryption keys.
However, this approach is not applicable when the data owner and
the querier are different parties and we want to hide from the data
owner which documents were returned as results to the query. If the
querier already knows the IDs of the documents of interest for his
query the functionality of a symmetric private information retrieval
(SPIR) scheme [16] when instantiated with the whole content of
the database would theoretically allow the querier to retrieve the
desired documents without the owner ﬁnding out what documents
were retrieved. However, the efﬁciency cost is quite high. The PIR
schemes that guarantee privacy for the query but do not provide
privacy for the database already incur substantial efﬁciency over-
head. Implementations of PIR were presented in [18, 29], and the
work of [28] uses PIR techniques to provide partial privacy for SQL
queries.
8. CONCLUSIONS
When we consider the question of secure search in practical set-
tings, the privacy guarantees of a scheme are no longer the only rel-
evant issue: a perfectly secure scheme that no one can use provides
no actual privacy. The efﬁciency of an approach becomes a major
factor in determining its usability given the available resources.
We adopted the relaxed security model of the SADS scheme; we
extended its functionality by constructing a document retrieval pro-
tocol that runs in time proportional to the size of the returned set
of documents and by providing range queries over integer data at
a cost comparable to simple keyword queries in the average case.
Both extensions take no advantage of any speciﬁc feature of SADS,
making them applicable to any keyword-based private search sys-
tem. Additionally, we improved SADS by: (i) providing a protocol
that facilitates database updates without requiring processing of the
whole database, (ii) using different hash functions for different BFs
which provides better privacy guarantees and (iii) developing two
implementation level optimizations, parallelization and caching.
The experimental results for the extended SADS system demon-
strate its practicality: we achieve search and document retrieval
time which is on the order of the time of ssh transfer and much
better than the results from the most recent PIR implementation
presented in [29] (note that the PIR protocol actually has weaker
privacy guarantees than what we need since it does not provide
database privacy), while we provide better privacy guarantees than
the original SADS. In other words, we have provided strong-
enough security and privacy, and at an acceptable cost.
9. REFERENCES
[1] William Aiello, Yuval Ishai, and Omer Reingold. Priced
oblivious transfer: How to sell digital goods. In Proceedings
of EUROCRYPT’01, London, UK, 2001.
[2] John Bethencourt, Amit Sahai, and Brent Waters.
Ciphertext-policy attribute-based encryption. In Proceedings
of S&P’07, Washington, DC, USA, 2007.
[3] Burton H. Bloom. Space/time trade-offs in hash coding with
allowable errors. Communications of the ACM,
13(7):422–426, 1970.
[4] Dan Boneh, Giovanni Di Crescenzo, Rafail Ostrovsky, and
Giuseppe Persiano. Public key encryption with keyword
search. In Proceedings of EUROCRYPT’04, 2004.
[5] Dan Boneh, Eyal Kushilevitz, Rafail Ostrovsky, and William
E. Skeith III. Public key encryption that allows PIR queries.
In Proceedings of CRYPTO’07, 2007.
[6] Dan Boneh and Brent Waters. Conjunctive, subset, and range
queries on encrypted data. In Proceedings of TCC. Springer,
2006.
[7] Ran Canetti. Security and composition of multiparty
cryptographic protocols. Journal of Cryptology, 13, 2000.
[8] Yan cheng Chang and Michael Mitzenmacher. Privacy
preserving keyword searches on remote encrypted data. In
Proceedings of ACNS, volume 3531, 2005.
[9] Benny Chor, Niv Gilboa, and Moni Naor. Private information
retrieval by keywords. Technical Report TR-CS0917, Dept.
of Computer Science, 1997.
[10] Benny Chor, Oded Goldreich, Eyal Kushilevitz, and Madhu
Sudan. Private information retrieval. J. ACM, 45(6):965–981,
1998.
[11] Giovanni Di Crescenzo, Tal Malkin, and Rafail Ostrovsky.
Single database private information retrieval implies
oblivious transfer. In EUROCRYPT, pages 122–138, 2000.
[12] Emiliano De Cristofaro, Yanbin Lu, and Gene Tsudik.
Efﬁcient techniques for privacy-preserving sharing of
sensitive information. In TRUST, 2011.
[13] Reza Curtmola, Juan Garay, Seny Kamara, and Rafail
Ostrovsky. Searchable symmetric encryption: improved
deﬁnitions and efﬁcient constructions. In Proceedings of
CCS’06. ACM, 2006.
[14] Emiliano De Cristofaro, Stanislaw Jarecki, Jihye Kim, and
Gene Tsudik. Privacy-preserving policy-based information
transfer. In Proceedings of PETS, 2009.
[15] Craig Gentry and Zulﬁkar Ramzan. Single-database private
information retrieval with constant communication rate. In
Proceedings of the 32nd International Colloquium on
Automata, Languages and Programming, 2005.
general medical patients. Medical Care, 26(6), 1988.
[21] Intel. Threading building blocks 2.2.
http://www.threadingbuildingblocks.org/, 2009.
[22] J. Katz, A. Sahai, and B. Waters. Predicate encryption
supporting disjunctions, polynomial equations, and inner
products. In Proceedings of EUROCRYPT. Springer, 2008.
[23] Brian W. Kernighan and Rob Pike. The Practice of
Programming. Addison-Wesley, 1999.
[24] Brian W. Kernighan and P.J. Plauger. The Elements of
Programming Style. McGraw-Hill, 1974.
[25] A. Boldyareva M. Bellare and A. O’Neill. Deterministic and
efﬁciently searchable encryption. In Proceedings of
CRYPTO’07, 2007.
[26] Michael Mitzenmacher and Salil Vadhan. Why simple hash
functions work: Exploiting the entropy in a data stream. In
Proceedings of the ACM-SIAM Symposium on Discrete
Algorithms, pages 746–755, 2008.
[27] Moni Naor and Benny Pinkas. Efﬁcient oblivious transfer
protocols. In Proceedings of the ACM-SIAM Symposium on
Discrete Algorithms, pages 448–457, Philadelphia, PA, USA,
2001.
[28] Femi Olumoﬁn and Ian Goldberg. Privacy-preserving queries
over relational databases. In Proceedings of PETS, pages
75–92, 2010.
[29] Femi Olumoﬁn and Ian Goldberg. Revisiting the
computational practicality of private information retrieval. In
Financial Cryptography, 2011.
[30] Mariana Raykova, Binh Vo, Steven Bellovin, and Tal Malkin.
Secure anonymous database search. In CCSW 2009., 2009.
[31] Jitesh Shetty and Jafar Adibi. The enron email dataset
database schema and brief statistical report. Technical report,
USC, 2004.
[32] Elaine Shi, John Bethencourt, T-H. Hubert Chan, Dawn
Song, and Adrian Perrig. Multi-dimensional range query
over encrypted data. In Proceedings of S&P’07, pages
350–364, Washington, DC, USA, 2007.
[33] Dawn Xiaodong Song, David Wagner, and Adrian Perrig.
Practical techniques for searches on encrypted data. In
Proceedings of S&P’00, Washington, DC, USA, 2000.
[34] Peter Williams and Radu Sion. Usable PIR. In NDSS, 2008.
[16] Y. Gertner, Y. Ishai, E. Kushilevitz, and T. Malkin. Protecting
data privacy in private information retrieval schemes. Journal
of Computer and System Sciences, 60(3):592–629, 2000.
[17] Eu-Jin Goh. Secure indexes. Cryptology ePrint Archive,
Report 2003/216, 2004.
http://eprint.iacr.org/2003/216/.
[18] Ian Goldberg. Improving the robustness of private
information retrieval. In Proceedings of the IEEE Symposium
on Security and Privacy, 2007.
[19] Vipul Goyal, Abhishek Jain, Omkant Pandey, and Amit
Sahai. Bounded ciphertext policy attribute based encryption.
In Proceedings of ICALP ’08, Berlin, Heidelberg, 2008.
[20] F. Allan Hubbell, Elizabeth B. Frye, Barbara V. Akin, and
Lloyd Rucker. Routine admission laboratory testing for