†: Our storage cost is asymptotically larger than others, but it can be seen from Table II that the overhead is acceptable in practice.
‡: The #Rounds here indicates the rounds of communication required for servers to receive the document ind. This setting is consistent
with the existing SSE schemes [21], [43], [12], [9], [15].
O(log aw) O(W log D)
O(W log D)
O(log2 N ) O(W log D)
O(W log D)
O(nw log2 N )
O(aw + dw)
O(aw + dw)
O(aw + log N )
O(aw + log N )
O(aw + log N )
O(aw + log N )
O(log dw)
O(nw log dw log N )
O(1)
O(1)
O(1)
O(1)
O(log N )
O(log3 N )
O(1)
O(1)
O(1)
O(W d)†
O(nw)
O(aw)
O(nwdw)
O(log2 N )
O(nw log dw log N )
O(W log D)
O(W log D)
Client
Storage
O(1)
O(1)
O(nw)
O(nw)
O(nw)
O(1)
O(1)
O(log N )
O(log3 N )
O(nw + dw log aw)
O(1)
O(1)
O(1)
O(d)
O(nwd)
O(log N )
3
2
2
2
2
1
2
1
1
from this tag. To encrypt a message along with a tag, we only
need to encrypt it with the PRF values evaluated on the entry
indices (of the Bloom ﬁlter) associated with the tag, which
is similar to the encryption method of Bloom ﬁlter encryption
[24], and the decryption can be realized by using the punctured
secret key. Thus we get a kind of revocable encryption with
compressed revocation and call it Compressed SRE.
A. Related Work
Song et al. [50] introduced the notion of SSE. After that,
extensive effort has been made to improve its security [16],
[21], [51], [7], [9], [41], functionality [17], [43], [13], [26],
[35], [39] or performance [13], [12], [14], [48], [23]. Almost all
SSE schemes allow for the leakage termed search pattern and
access pattern. To understand the realistic impacts of leakage,
the community has recently started to study how to exploit it
to break the security of SSE [11], [57], [34], [33], [5]. Most
recently, a line of work for defence [8], [41], [40] has been
presented. Concurrently, another line of important work is to
design schemes with forward and backward privacy, which
guarantees a higher level security for DSSE.
Forward and backward privacy was initialized by Ste-
fanov et al. [51] and later formalized by Bost et al. [7],
[9]. Since then, forward privacy has been studied extensively
and many efﬁcient schemes [9], [15], [46], [38], [25], [3],
[4] have been proposed following the seminal work of Bost
[7]. Backward privacy, however, has been investigated far
less. Bost et al. [9] ﬁrst proposed several constructions from
constrained cryptographic primitives, including Moneta that
can achieve the strongest (i.e., Type-I) backward privacy, Type-
II scheme Fides, and Type-III schemes Dianadel and Janus.
Subsequently, Chamani et al. [15] proposed three improved
constructions, including Type-I scheme Orion, Type-II scheme
Mitra and Type-III scheme Horus. At the same time, Sun et al.
[52] proposed a practical Type-III scheme Janus++ by making
use of their symmetric puncturable encryption. Very recently,
Demertzis et al. [22] proposed three new schemes focusing on
small client storage, namely Type-III scheme QOS, Type-II
schemes SDa and SDd. All these schemes achieve different
3
tradeoffs between security and efﬁciency. In particular, the
existing Type-I and II schemes rely on either ORAMs or
multi-round of interactions. The exceptions are Janus [9] and
Janus++ [52] that are practical and completely non-interactive
but achieving only Type-III backward privacy. In addition,
Amjad et al. [4] proposed several schemes with all types
of backward privacy by leveraging the power of Intel SGX
[20]. They are all non-interactive but depending heavily on
the security and reliability of trusted execution environments.
In this work, we will explore new approaches of designing
practical, non-interactive, and forward- and backward-private
DSSE schemes without hardware assumptions.
II. BACKGROUND
In this part, we recollect the syntax and security of the
cryptographic primitives used throughout this work.
A. Symmetric Encryption
A Symmetric Encryption (SE) scheme with message
space M, key space K and ciphertext space C consists of
three polynomial-time algorithms SE = (SE.Gen, SE.Enc,
SE.Dec) : On input a security parameter λ, SE.Gen(1λ)
outputs a secret key k ∈ K; SE.Enc(k, m) takes as input
a secret key k ∈ K and a message m ∈ M, and outputs a
ciphertext ct ∈ C; SE.Dec(k, ct) takes a secret key k ∈ K and
a ciphertext ct, and outputs m or ⊥ that indicates failure.
An SE scheme is perfectly correct if for all m ∈ M,
k ← SE.Gen(1λ) and ct ← SE.Enc(k, m), it holds that
Pr[SE.Dec(k, ct) = m] = 1.
SECURITY. The IND-CPA security of SE is deﬁned by the
following experiment ExpIND-CPA
(λ) between a challenger
and an adversary A.
SE,A
Setup: Challenger runs k ← SE.Gen(1λ) and chooses a
random bit γ ∈ {0, 1}.
Phase 1: A adaptively issues a polynomial number of
encryption queries. For each query on m ∈ M, the challenger
returns ct ← SE.Enc(k, m).
Challenge: A issues messages m0, m1 ∈ M with equal
length, and receives ciphertext ct∗ ← SE.Enc(k, mγ).
Phase 2: This is identical to Phase 1.
Guess: A outputs γ(cid:48). The experiment outputs 1 if γ(cid:48) = γ.
Deﬁnition 1 (IND-CPA Security). An SE scheme SE =
(SE.Gen, SE.Enc, SE.Dec) is IND-CPA secure if for all
λ ∈ N and probabilistic polynomial time (PPT) adversaries
A, the advantage of A winning in the experiment
(λ) = 1] − 1/2| ≤ ν(λ)
AdvIND-CPA
where the probability is taken over the randomness of the
experment and ν(λ) is negligible in λ.
SE,A (λ) = | Pr[ExpIND-CPA
SE,A
B. Bloom Filter
A Bloom Filter (BF) [6] is a probabilistic data structure.
It can be used to rapidly and space-efﬁciently perform set
membership test, at the cost of allowing for false positives. For
many applications, the space saving outweighs this drawback
when the false-positive probability is small enough. In this
work, we focus on the standard BF given in [6] that is sufﬁcient
for our applications. Next we recall
its formal deﬁnition
following the syntax of [24]. Particularly, the Bloom ﬁlter
in [6] consists of three polynomial-time algorithms BF =
(BF.Gen, BF.Upd, BF.Check):
BF.Gen(b, h): It takes as input two integers b, h ∈ N,
and samples a collection of universal hash functions H =
{Hj}j∈[h], where Hj : X → [b] is from a universe X to a
ﬁnite set [b]. Finally, it outputs H and an initial b-bit array
B = 0b with each bit B[i] for i ∈ [b] set to 0.
BF.Upd(H, B, x): It takes H = {Hj}j∈[h], B ∈ {0, 1}b
and an element x ∈ X , updates the current array B by setting
B[Hj(x)] ← 1 for all j ∈ [h], and ﬁnally outputs the updated
B. For simplicity, we use BR ← BF.Upd(H, B, R) to denote
the ﬁnal array after inserting all elements in R one-by-one.
BF.Check(H, B, x): It takes H = {Hj}j∈[h], B ∈ {0, 1}b
and an element x ∈ X , and checks if B[Hj(x)] = 1 for all
j ∈ [h]. If ture, it outputs 1, otherwise returns 0.
A Bloom ﬁlter BF is perfectly complete if for all integers
b, h ∈ N, any set R of elements in X , and (H, B) ←
BF.Gen(b, h) as well as BR ← BF.Upd(H, B, R), it holds
Pr(cid:2)BF.Check(H, BR, x) = 1(cid:3) = 1
for all x ∈ R. This means a BF with perfect completeness can
always recognize the added elements.
Next, we brieﬂy introduce the deﬁnition of false-positive
probability. Informally, it is the probability that an element not
yet added to BF is mistaken for being contained in it. Given
an upper-bound on the size of R, the probability can be made
sufﬁciently low by adjusting the parameters b, h adequately.
Formally, for a set R of n elements in X , we let (H, B) ←
BF.Gen(b, h) and BR ← BF.Upd(H, B, R). Then for any x ∈
X , we have that
Pr[BF.Check(H, BR, x) = 1 ∧ x /∈ R] ≈ (1 − e−nh/b)h,
where the probability is taken over
BF.Gen(b, h).
the randomness of
C. Puncturable Pseudorandom Function
holds that Pr[Ft.Eval(cid:0)kS, x(cid:1) (cid:54)= Ft(k, x)] ≤ ν(λ), where the
First, we introduce the syntax and security of (a variant
of) t-puncturable pseudorandom function (t-Punc-PRF) [36].
Informally, a t-Punc-PRF allows a PRF key to be punctured
at any set of inputs S s.t. |S| ≤ t, where t(·) is a ﬁxed
polynomial. Formally, a function Ft : K × X → Y is a t-
Punc-PRF with key space K if there is an additional key space
Kp and three polynomial-time algorithms (Ft.Setup, Ft.Punc,
Ft.Eval) with the following syntax:
Ft.Setup(1λ): It takes a security parameter λ and outputs
a description of a PRF key k ∈ K.
Ft.Punc(k, S): It takes a key k ∈ K and a set of elements
S ⊂ X s.t. |S| ≤ t(λ), and outputs a punctured key kS ∈ Kp.
Ft.Eval(kS, x): It takes as input a punctured key kS ∈ Kp
and x ∈ X , and outputs y ∈ Y or a symbol ⊥.
A t-Punc-PRF is correct if for all S ⊂ X s.t. |S| ≤ t(λ),
x ∈ X \ S, k ← Ft.Setup(1λ), and kS ← Ft.Punc(k, S), it
probability is taken over k ∈ K and ν(λ) is negligible.
SECURITY. In contrast to [36], a weaker security of t-Punc-
PRF Ft is sufﬁcient for our applications, where an adversary
A is only permitted to ask for a single punctured secret key
query. Precisely, the security is deﬁned by the experiment
Expt-Punc-PRF
(λ) below.
runs k ← Ft.Setup(1λ).
A, the challenger computes kS∗ ← Ft.Punc(k, S∗), y∗
F (k, x∗
returns (kS∗ ,{y∗
i }(cid:96)
outputs 1 if γ(cid:48) = γ.
Deﬁnition 2 (Weak Security). A function Ft : K × X ← Y
is a weakly secure t-Punc-PRF if for all λ and PPT adver-
saries A, its advantage deﬁned below, Advt-Punc-PRF
(λ) =
| Pr[Expt-Punc-PRF
(λ) = 1] − 1/2| ≤ ν(λ) where the proba-
bility is taken over the randomness of the experiment and ν(λ)
is negligible.
Ft,A
Setup: Challenger chooses a random bit γ ∈ {0, 1} and
Challenge: On input S∗ = {x∗
(cid:96)} ⊂ X from
i =
$←− Y for all i ∈ [(cid:96)]. If γ = 0, it
Guess: Adversary A outputs a guess γ(cid:48) and the experiment
i=1), otherwise returns (kS∗ ,{ui}(cid:96)
i ) and selects ui
i=1).
1, x∗
2, . . . , x∗
Ft,A
Ft,A
For our applications, we further require that the PRF key
can be punctured at S one-by-one and the resulted punctured
secret key for S be independent of the order of punctures. To
be more precise, it is desired that the punctured secret key kS
for S = {x1, x2, . . . , x(cid:96)} s.t. (cid:96) ≤ t(λ) can be computed in an
alternative way:
1, x(cid:48)
2, . . . , x(cid:48)
Ft.Punc(ki−1, x(cid:48)
i): On input a punctured key ki−1 for
i−1} ⊂ S, where k0 = k is a randomly
i−1 = {x(cid:48)
S(cid:48)
i ∈ S, it generates a
chosen PRF key, and a new element x(cid:48)
punctured key ki ∈ Kp for S(cid:48)
i}. Finally, it
i−1 ∪ {x(cid:48)
i = S(cid:48)
outputs k(cid:96) that is equal to kS ← Ft.Punc(k, S). Henceforth,
all multi-puncturable PRFs we use in this work refer to the
t-Punc-PRF with above property, unless stated otherwise.
D. Symmetric Searchable Encryption
A DSSE scheme Σ consists of one algorithm Setup
and two protocols Search and Update: On input a security
parameter λ and an initial database DB, Setup outputs a secret
4
key K, the state σ of the client, and an encrypted database
EDB that will be sent to the server; Search takes a query q,
the secret key K and the state σ from the client, as well as the