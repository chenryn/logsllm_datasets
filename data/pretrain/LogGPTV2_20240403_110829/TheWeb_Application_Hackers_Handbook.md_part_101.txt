should encode this as %23.
n % is used as the prefi x in the URL-encoding scheme. To insert a literal
% character, you should encode this as %25.
n Any nonprinting characters such as null bytes and newlines must, of
course, be URL-encoded using their ASCII character code — in this
case, as %00 and %0a, respectively.
n Furthermore, note that entering URL-encoded data into a form usually
causes your browser to perform another layer of encoding. For example,
cc2211..iinndddd 779933 88//1199//22001111 1122::2222::0011 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 794
794 Chapter 21 n A Web Application Hacker’s Methodology
submitting%00 in a form will probably result in a value of %2500 being
sent to the server. For this reason it is normally best to observe the fi nal
request within an intercepting proxy.
n Many tests for common web application vulnerabilities involve sending
various crafted input strings and monitoring the application’s responses
for anomalies, which indicate that a vulnerability is present. In some
cases, the application’s response to a particular request contains a signa-
ture of a particular vulnerability, regardless of whether a trigger for that
vulnerability has been submitted. In any case where specifi c crafted input
results in behavior associated with a vulnerability (such as a particular
error message), you should double-check whether submitting benign
input in the relevant parameter also causes the same behavior. If it does,
your tentative fi nding is probably a false positive.
n Applications typically accumulate an amount of state from previous requests,
which affects how they respond to further requests. Sometimes, when you
are trying to investigate a tentative vulnerability and isolate the precise
cause of a particular piece of anomalous behavior, you must remove the
effects of any accumulated state. To do so, it is usually suffi cient to begin
a fresh session with a new browser process, navigate to the location of the
observed anomaly using only benign requests, and then resubmit your
crafted input. You can often replicate this measure by adjusting the parts
of your requests containing cookies and caching information. Furthermore,
you can use a tool such as Burp Repeater to isolate a request, make specifi c
adjustments to it, and reissue it as many times as you require.
n Some applications use a load-balanced confi guration in which consecu-
tive HTTP requests may be handled by different back-end servers at the
web, presentation, data, or other tiers. Different servers may have small
differences in confi guration that affect your results. Furthermore, some
successful attacks will result in a change in the state of the specifi c server
that handles your requests — such as the creation of a new fi le within the
web root. To isolate the effects of particular actions, it may be necessary
to perform several identical requests in succession, testing the result of
each until your request is handled by the relevant server.
Assuming that you are implementing this methodology as part of a consul-
tancy engagement, you should always be sure to carry out the usual scoping
exercise to agree precisely which hostnames, URLs, and functionality are to
be included, and whether any restrictions exist on the types of testing you are
permitted to perform. You should make the application owner aware of the
inherent risks involved in performing any kind of penetration testing against
a black-box target. Advise the owner to back up any important data before you
commence your work.
cc2211..iinndddd 779944 88//1199//22001111 1122::2222::0011 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 795
Chapter 21 n A Web Application Hacker’s Methodology 795
1 Map the Application’s Content
Linked content Other content Non-standard
access methods
1.1. Explore visible 1.3. Discover 1.5. Identifier-
content hidden content specified functions
1.2. Consult public 1.4. Discover 1.6. Debug
resources default content parameters
Figure 21-2: Mapping the application’s content
1.1 Explore Visible Content
1.1.1 Confi gure your browser to use your favorite integrated proxy/spidering
tool. Both Burp and WebScarab can be used to passively spider the site
by monitoring and parsing web content processed by the proxy.
1.1.2 If you fi nd it useful, confi gure your browser to use an extension such
as IEWatch to monitor and analyze the HTTP and HTML content being
processed by the browser.
1.1.3 Browse the entire application in the normal way, visiting every link and
URL, submitting every form, and proceeding through all multistep func-
tions to completion. Try browsing with JavaScript enabled and disabled,
and with cookies enabled and disabled. Many applications can handle
various browser confi gurations, and you may reach different content
and code paths within the application.
1.1.4 If the application uses authentication, and you have or can create a login
account, use this to access the protected functionality.
1.1.5 As you browse, monitor the requests and responses passing through
your intercepting proxy to gain an understanding of the kinds of data
being submitted and the ways in which the client is used to control the
behavior of the server-side application.
1.1.6 Review the site map generated by the passive spidering, and identify any
content or functionality that you have not walked through using your
browser. From the spider results, establish where each item was discov-
ered (for example, in Burp Spider, check the Linked From details). Access
each item using your browser so that the spider parses the response from
the server to identify any further content. Continue this step recursively
until no further content or functionality is identifi ed.
cc2211..iinndddd 779955 88//1199//22001111 1122::2222::0011 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 796
796 Chapter 21 n A Web Application Hacker’s Methodology
1.1.7 When you have fi nished manually browsing and passively spidering,
you can use your spider to actively crawl the application, using the set
of discovered URLs as seeds. This may sometimes uncover additional
content that you overlooked when working manually. Before doing an
automated crawl, fi rst identify any URLs that are dangerous or likely to
break the application session, and then confi gure the spider to exclude
these from its scope.
1.2 Consult Public Resources
1.2.1 Use Internet search engines and archives (such as the Wayback Machine)
to identify what content they have indexed and stored for your target
application.
1.2.2 Use advanced search options to improve the effectiveness of your research.
For example, on Google you can use site: to retrieve all the content for
your target site and link: to retrieve other sites that link to it. If your
search identifi es content that is no longer present in the live application,
you may still be able to view this from the search engine’s cache. This
old content may contain links to additional resources that have not yet
been removed.
1.2.3 Perform searches on any names and e-mail addresses you have discov-
ered in the application’s content, such as contact information. Include
items not rendered on-screen, such as HTML comments. In addition to
web searches, perform news and group searches. Look for any technical
details posted to Internet forums regarding the target application and
its supporting infrastructure.
1.2.4 Review any published WSDL fi les to generate a list of function names
and parameter values potentially employed by the application.
1.3 Discover Hidden Content
1.3.1 Confi rm how the application handles requests for nonexistent items.
Make some manual requests for known valid and invalid resources,
and compare the server’s responses to establish an easy way to identify
when an item does not exist.
1.3.2 Obtain listings of common fi le and directory names and common fi le
extensions. Add to these lists all the items actually observed within the
applications, and also items inferred from these. Try to understand the
naming conventions used by application developers. For example, if
there are pages called AddDocument.jsp and ViewDocument.jsp, there
may also be pages called EditDocument.jsp and RemoveDocument.jsp.
cc2211..iinndddd 779966 88//1199//22001111 1122::2222::0011 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 797
Chapter 21 n A Web Application Hacker’s Methodology 797
1.3.3 Review all client-side code to identify any clues about hidden server-side
content, including HTML comments and disabled form elements.
1.3.4 Using the automation techniques described in Chapter 14, make large
numbers of requests based on your directory, fi lename, and fi le extension
lists. Monitor the server’s responses to confi rm which items are present
and accessible.
1.3.5 Perform these content-discovery exercises recursively, using new enumer-
ated content and patterns as the basis for further user-directed spidering
and further automated discovery.
1.4 Discover Default Content
1.4.1 Run Nikto against the web server to detect any default or well-known
content that is present. Use Nikto’s options to maximize its effective-
ness. For example, you can use the –root option to specify a directory
to check for default content, or -404 to specify a string that identifi es a
custom File Not Found page.
1.4.2 Verify any potentially interesting fi ndings manually to eliminate any
false positives within the results.
1.4.3 Request the server’s root directory, specifying the IP address in the
Host header, and determine if the application responds with any dif-
ferent content. If so, run a Nikto scan against the IP address as well as
the server name.
1.4.4 Make a request to the server’s root directory, specifying a range of
User-Agent headers, as shown at www.useragentstring.com/pages/
useragentstring.php.
1.5 Enumerate Identifi er-Specifi ed Functions
1.5.1 Identify any instances where specifi c application functions are accessed by
passing an identifi er of the function in a request parameter (for example,
/admin.jsp?action=editUser or /main.php?func=A21).
1.5.2 Apply the content discovery techniques used in step 1.3 to the mechanism
being used to access individual functions. For example, if the applica-
tion uses a parameter containing a function name, fi rst determine its
behavior when an invalid function is specifi ed, and try to establish an
easy way to identify when a valid function has been requested. Compile
a list of common function names or cycle through the syntactic range of
identifi ers observed to be in use. Automate the exercise to enumerate
valid functionality as quickly and easily as possible.
cc2211..iinndddd 779977 88//1199//22001111 1122::2222::0011 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 798
798 Chapter 21 n A Web Application Hacker’s Methodology
1.5.3 If applicable, compile a map of application content based on functional paths,
rather than URLs, showing all the enumerated functions and the logical
paths and dependencies between them. (See Chapter 4 for an example.)
1.6 Test for Debug Parameters
1.6.1 Choose one or more application pages or functions where hidden debug
parameters (such as debug=true) may be implemented. These are most
likely to appear in key functionality such as login, search, and fi le upload
or download.
1.6.2 Use listings of common debug parameter names (such as debug,test,
hide, and source) and common values (such as true,yes, on, and 1).
Iterate through all permutations of these, submitting each name/value
pair to each targeted function. For POST requests, supply the parameter
in both the URL query string and the request body. Use the techniques
described in Chapter 14 to automate this exercise. For example, you
can use the cluster bomb attack type in Burp Intruder to combine all
permutations of two payload lists.
1.6.3 Review the application’s responses for any anomalies that may indicate
that the added parameter has had an effect on the application’s processing.
2 Analyze the Application
2.1. Identify 2.2. Identify data 2.3. Identify
functionality entry points technologies
2.4. Map the attack surface
Figure 21-3: Analyzing the application
2.1 Identify Functionality
2.1.1 Identify the core functionality that the application was created for and
the actions that each function is designed to perform when used as
intended.
2.1.2 Identify the core security mechanisms employed by the application and
how they work. In particular, understand the key mechanisms that handle
cc2211..iinndddd 779988 88//1199//22001111 1122::2222::0011 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 799
Chapter 21 n A Web Application Hacker’s Methodology 799
authentication, session management, and access control, and the functions
that support them, such as user registration and account recovery.
2.1.3 Identify all the more peripheral functions and behavior, such as the use
of redirects, off-site links, error messages, and administrative and log-
ging functions.
2.1.4 Identify any functionality that diverges from the standard GUI appear-
ance, parameter naming, or navigation mechanism used elsewhere in
the application, and single it out for in-depth testing.
2.2 Identify Data Entry Points
2.2.1 Identify all the different entry points that exist for introducing user
input into the application’s processing, including URLs, query string
parameters,POST data, cookies, and other HTTP headers processed by
the application.
2.2.2 Examine any customized data transmission or encoding mechanisms
used by the application, such as a nonstandard query string format.
Understand whether the data being submitted encapsulates parameter
names and values, or whether an alternative means of representation
is being used.
2.2.3 Identify any out-of-band channels via which user-controllable or other
third-party data is being introduced into the application’s processing.
An example is a web mail application that processes and renders mes-
sages received via SMTP.
2.3 Identify the Technologies Used
2.3.1 Identify each of the different technologies used on the client side, such as
forms, scripts, cookies, Java applets, ActiveX controls, and Flash objects.
2.3.2 As far as possible, establish which technologies are being used on the
server side, including scripting languages, application platforms, and
interaction with back-end components such as databases and e-mail
systems.
2.3.3 Check the HTTP Server header returned in application responses, and
also check for any other software identifi ers contained within custom
HTTP headers or HTML source code comments. Note that in some cases,
different areas of the application are handled by different back-end
components, so different banners may be received.
2.3.4 Run the Httprint tool to fi ngerprint the web server.
2.3.5 Review the results of your content-mapping exercises to identify any
interesting-looking fi le extensions, directories, or other URL subsequences
cc2211..iinndddd 779999 88//1199//22001111 1122::2222::0011 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 800
800 Chapter 21 n A Web Application Hacker’s Methodology
that may provide clues about the technologies in use on the server.
Review the names of any session tokens and other cookies issued. Use
Google to search for technologies associated with these items.
2.3.6 Identify any interesting-looking script names and query string parameters
that may belong to third-party code components. Search for these on
Google using the inurl: qualifi er to fi nd any other applications using
the same scripts and parameters and that therefore may be using the
same third-party components. Perform a noninvasive review of these
sites, because this may uncover additional content and functionality that
is not explicitly linked on the application you are attacking.
2.4 Map the Attack Surface
2.4.1 Try to ascertain the likely internal structure and functionality of the
server-side application and the mechanisms it uses behind the scenes
to deliver the behavior that is visible from the client perspective. For
example, a function to retrieve customer orders is likely to be interacting
with a database.
2.4.2 For each item of functionality, identify the kinds of common vulnerabilities
that are often associated with it. For example, fi le upload functions may
be vulnerable to path traversal, inter-user messaging may be vulnerable
to XSS, and Contact Us functions may be vulnerable to SMTP injection.
See Chapter 4 for examples of vulnerabilities commonly associated with
particular functions and technologies.
2.4.3 Formulate a plan of attack, prioritizing the most interesting-looking
functionality and the most serious of the potential vulnerabilities associ-
ated with it. Use your plan to guide the amount of time and effort you
devote to each of the remaining areas of this methodology.
3 Test Client-Side Controls
3.1. Transmission of 3.2. Client-side input 3.3. Browser
data via client controls Extensions
Hidden fields Length limits Java applets
Cookies JavaScript validation ActiveX controls
Preset parameters Disabled elements Flash objects
ASP.NET ViewState Silverlight objects
Figure 21-4: Testing client-side controls
cc2211..iinndddd 880000 88//1199//22001111 1122::2222::0022 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 801
Chapter 21 n A Web Application Hacker’s Methodology 801
3.1 Test Transmission of Data Via the Client
3.1.1 Locate all instances within the application where hidden form fi elds,
cookies, and URL parameters are apparently being used to transmit
data via the client.
3.1.2 Attempt to determine the purpose that the item plays in the applica-
tion’s logic, based on the context in which it appears and on its name
and value.
3.1.3 Modify the item’s value in ways that are relevant to its role in the
application’s functionality. Determine whether the application pro-
cesses arbitrary values submitted in the fi eld and whether this fact
can be exploited to interfere with the application’s logic or subvert
any security controls.
3.1.4 If the application transmits opaque data via the client, you can attack this
in various ways. If the item is obfuscated, you may be able to decipher
the obfuscation algorithm and therefore submit arbitrary data within the
opaque item. Even if it is securely encrypted, you may be able to replay
the item in other contexts to interfere with the application’s logic. See