Each database server is fronted with multiple write and
read API service replicas deployed locally. While writes
must be forwarded to the write API service in the mas-
ter database region, client read requests can be serviced
locally to reduce latency. Read service replicas are also
deployed for the master database to support clients re-
quiring read-after-write consistency.
FBNet can recover from two common failures.
Database Failures: A database is disabled if it con-
sistently fails health-checks. In addition, a slave is also
disabled when it experiences high replication lag. When
the master goes down, the slave in the nearest data cen-
ter is promoted to master. The new master handles
all reads/writes originally destined for the old master.
When a slave fails, service replicas in the same data
center temporarily redirect their reads to the master
database until the slave recovers.
in Figure 7. Robotron also establishes the relationships
of each object, e.g., associating physical interfaces with
aggregated interfaces, circuits with physical interfaces,
preﬁxes with aggregated interfaces, and BGP sessions
with preﬁxes.
Using topology templates allows us to easily extend
Robotron to support diﬀerent network architectures.
Over the years we have built hundreds of POP and DC
clusters which have undergone several major architec-
ture changes. These templates are also used by net-
work engineers to try diﬀerent topology designs such as
adding more devices, device types, and links, forklift-
ing upgrades to newer hardwares or diﬀerent vendors.
Robotron is able to translate these designs to tens of
thousands of FBNet objects within minutes.
5.1.2 Backbone
In contrast to POP and DC networks, our backbone
network employs a constantly changing asymmetrical
architecture in order to adapt to dynamic capacity needs.
Most design changes result from incrementally adding
and deleting backbone routers, as well as adding, mi-
grating, and deleting circuits between routers to add
more redundancy and capacity. Each month, we per-
form tens of router additions and deletions, and hun-
dreds of circuit additions, migrations and deletions.
Robotron provides device and circuit design tools for
these incremental changes. The tools provide high-level
primitives to users and do complex object validation
and manipulation in the backend. For example, users
can issue the “delete” command with a router name as
parameter, and the device tool automatically handles
deleting the corresponding FBNet router object and
deleting or disassociating its related objects.
A key challenge of supporting incremental changes
is to resolve object dependency. For example, adding
and removing a backbone router requires updating the
iBGP mesh by modifying BGP session objects related
to all other routers on the edge of the backbone; mi-
grating a circuit from one router to another requires
deleting or re-associating existing interface, preﬁx, and
BGP session on one router and creating new ones on
the other.
Robotron leverages FBNet’s object relationships to
track and resolve object dependency when making de-
sign changes. When updating an object, it checks all
its related objects through relationship ﬁelds and up-
dates them accordingly. In the above circuit migration
example, Circuit model has a foreign key to Physi-
calInterface, and the latter has a reverse relationship
to V6Prefix (Figure 5, 6). When a circuit object is
disconnected by removing its association with physical
interfaces, Robotron follows the relationship to delete
the preﬁx objects associated with the old physical in-
terfaces before clearing the relationship ﬁelds.
5.1.3 Design Validation
Network design errors are a major cause of network
Figure 7: Robotron materializes a cluster template into
FBNet objects.
Service Replica Failures: When an API service
replica fails due to process crash or server failure, re-
quests are redirected to any remaining service replicas
in the same data center.
If they are also down, re-
quests are rerouted to the nearest live service replicas
in a neighboring data center.
5. MANAGEMENT LIFE CYCLE
Using FBNet as the foundation, Robotron’s manage-
ment life cycle has four stages: network design, conﬁg
generation, deployment, and monitoring.
5.1 Network Design
In this stage, Robotron consumes high-level, human-
speciﬁed network designs, which are validated against
network design rules, and translates them into Desired
FBNet objects ﬁlled with values and relationships.
5.1.1 POPs and DCs
POPs and DCs have standard fat-tree architectures
that change rarely after the initial turn-up. Such a uni-
form architecture lends itself to be captured with topol-
ogy templates. A topology template deﬁnes components
that compose a topology: network devices and groups of
links (link group) that connect them. Recall the exam-
ple POP cluster in Figure 2 that contains four PSWs,
each connecting to two PRs. Figure 7 shows the corre-
sponding topology template. It deﬁnes (1) the devices’
hardware proﬁles (e.g., vendor, linecards, interfaces re-
served for each neighboring device), (2) the number of
devices of each type, e.g., two PRs each with hardware
proﬁle Router_Vendor1, (3) how they are connected,
e.g., each (PR, PSW) pair is connected by a link bun-
dle with 2 circuits, and (4) IP addressing scheme.
Given these templated designs, Robotron creates FB-
Net objects accordingly.
In this case, Robotron con-
structs 2 BackboneRouter objects and 4 NetworkSwitch
objects, representing the PRs and PSWs, respectively.
In addition, each (PR, PSW) pair has a portmap similar
to Figure 4. In total, 94 objects of various types (e.g.,
Circuit, BgpV6Session) are created in FBNet as seen
Cluster(   devices={      PR: DeviceSpec(         hardware=“Router_Vendor1”         num_devices=2)      PSW: DeviceSpec(         hardware=“Switch_Vendor2”         num_devices=4)   },   Link_groups=[      LinkGroup(         a_device=PR,         z_device=PSW,         pifs_per_agg=2,         ip=V6)   ])Template for a POP cluster FBNet objects BackboneRouters:	2	NetworkSwitches:	4	Circuits:	16	PhysicalInterfaces:	32	AggregatedInterfaces:	16	V6Preﬁxes:	16	BgpV6Sessions:	8	struct Device {
1: list aggs,
}
struct AggregatedInterface {
1: string name,
2: i32 number,
3: string v4_prefix,
4: string v6_prefix,
5: list pifs,
}
struct PhysicalInterface {
1: string name,
}
Figure 8: A snippet of Thrift data schema for conﬁg
generation.
outage: one could specify incomplete and incorrect de-
signs like missing or incorrect device and link speciﬁca-
tion in the template, or assigning duplicate endpoints
to a circuit. Robotron takes both automatic and man-
ual validation approaches to prevent errors. First, it
embeds various rules to automatically validate objects
when translating template and tool inputs to FBNet
objects. These rules check object value and relation-
ship ﬁelds to ensure data integrity (e.g., a circuit must
be associated to two physical interfaces), and avoid du-
plicate objects. Second, Robotron displays the result-
ing design changes and requires users to visually review
and conﬁrm before committing the change to FBNet.
Third, it requires employee ID and ticket ID to track
design change history. Finally, Robotron logs all design
changes for ease of debugging and error tracking.
5.2 Conﬁg Generation
In this stage, Robotron leverages relevant FBNet ob-
jects created in the network design stage to generate
vendor-speciﬁc device conﬁgs. To address the challenge
that diﬀerent vendors use diﬀerent proprietary conﬁg-
uration languages, Robotron divides a device conﬁgu-
ration into two parts: dynamic, vendor-agnostic data
such as names and IP addresses, and static, vendor-
speciﬁc templates with special syntax and keywords.
The former is derived from FBNet objects and stored as
a Thrift [1] object per device according to a pre-deﬁned
schema while the latter is stored as ﬂat ﬁles.
Figure 8 and Figure 9 are snippets of the conﬁg’s
data schema and templates for two vendors. Figure 8
deﬁnes the structured schema for device, aggregated in-
terface, physical interface, and their attributes that will
be used in all conﬁg templates. Figure 9 shows the inter-
face conﬁg templates for our PSW and PR devices from
two diﬀerent vendors. Utilizing Django’s template lan-
guage, dynamic variables and control ﬂows are respec-
tively surrounded by {{}} and {%%}, and static content
is left as plain text. Figure 9 shows that the two vendors
use diﬀerent conﬁguration syntax to group physical in-
terfaces to aggregated interface and assign IPs, yet they
share common variables such as interface names and IP
preﬁxes, and a common control ﬂow such as they both
{% for agg in device.aggs %}
interface {{agg.name}}
{% for agg in device.aggs %}
replace: {{agg.name}} {
mtu 9192
no switchport
load-interval 30
{% if agg.v4_prefix %}
ip addr {{agg.v4_prefix}}
{% endif %}
{% if agg.v6_prefix %}
ipv6 addr {{agg.v6_prefix}}
{% endif %}
no shutdown
unit 0 {
{% if agg.v4_prefix %}
family inet {
addr {{agg.v4_prefix}};
}
{% endif %}
{% if agg.v6_prefix %}
family inet6 {
addr {{agg.v6_prefix}};
}
{% endif %}
!
{% for pif in agg.pifs %}
}
interface {{pif.name}}
mtu 9192
load-interval 30
channel-group {{agg.name}}
lacp rate fast
no shutdown
!
{% endfor %}
{% endfor %}
}
{% for pif in agg.pifs %}
replace: {{pif.name}} {
gigether-options {
802.3ad {{agg.name}};
}
}
{% endfor %}
{% endfor %}
Figure 9: Interface conﬁg templates for PSW (left) and
PR (right) from two vendors.
Figure 10: Conﬁg generation from FBNet objects.
iterate over all aggregated and physical interfaces.
As shown in Figure 10, Robotron generates conﬁgu-
ration in a few steps. First, for a given location such
as a POP or DC, Robotron fetches all related objects
from FBNet. Second, for each device, Robotron derives
relevant device-speciﬁc data from FBNet objects (e.g.,
data for a device interface depends on the FBNet cir-
cuit object the interface connects to), stores it into a
Thrift object. Finally, Robotron combines the Thrift
object with vendor-speciﬁc templates to generate the
conﬁg for the device.
Conﬁg correctness ensures healthy network operation
and Robotron takes multiple measures to minimize con-
ﬁg errors. First, it stores conﬁg data schemas and tem-
plates in Conﬁgerator [37], a source control repository,
so that all schema and template changes are peer-reviewed
and unit-tested. Second, it backs up the running con-
ﬁgs for all network devices for quick restoration during
catastrophic events. Finally, Robotron monitors run-
ning conﬁg changes and ﬁres alerts for changes that de-
viate from Robotron-generated conﬁgs (Section 5.4.3).
Vendor	1	Vendor	2	Conﬁg	Thri0	Schema	interface	template	BGP	template	MPLS	template	…	interface	template	BGP	template	MPLS	template	…	PR1	PR2	PSWa	PSWb	PSWc	PSWd	FBNet	PR1	PSWa	PSWc	PR1	conﬁg	PR2	conﬁg	PSWa	conﬁg	PSWb	conﬁg	PSWc	conﬁg	PSWd	conﬁg	PSWb	PSWd	PR2	FBNet	objects	Thri0	objects	Vendor-speciﬁc	Conﬁgs	5.3 Deployment
Once the conﬁgs are generated, network engineers de-
ploy them using a CLI. The ultimate goal is agile, scal-
able, and safe deployment while minimizing the risk of
network outages. Robotron supports two diﬀerent sce-
narios: initial provisioning and incremental updates.
Initial Provisioning
5.3.1
Initial provisioning is used when the devices are in a
clean state, such as turning up all switches in a new clus-
ter. In this case, Robotron erases old conﬁgurations (if
they exist) and copies new conﬁgurations to the devices,
followed by basic validations (e.g., checking connectiv-
ity). Initial provisioning is relatively simple. Starting
from a clean state also reduces the chance for errors.
One restriction is that network devices must be com-
pletely “drained” of any traﬃc.
Incremental Updates
5.3.2
In contrast, incremental updates occur when an on-
line device requires incremental changes, such as adding
circuits for additional capacity. In this case, Robotron
usually applies conﬁgurations to more than one live de-
vice, with only a portion of the running conﬁguration in
each device aﬀected. To minimize the impact of these
changes, Robotron employs multiple mechanisms:
Dryrun Mode: New conﬁgs are compared against
the current running conﬁgs, if natively supported by the
devices. Users receive and review a diﬀ listing all up-
dated lines from the new conﬁgurations for unexpected
changes. Dryrun can also detect most errors from in-
valid conﬁgurations and vendor bugs. For devices that
do not support native dryrun, a diﬀ will still be gener-
ated for review by comparing the running conﬁgs before
and after deployment.
Atomic Mode: Engineers often need to deploy new
conﬁgs to multiple devices (e.g., iBGP mesh updates).
For these operations, conﬁgs may need to be committed
to the devices in one atomic transaction for the network
to operate correctly. Robotron allows engineers to spec-
ify whether the deployment should be atomic. During
an atomic update, if any of the devices experiences er-
rors or cannot ﬁnish applying the conﬁg within a given
time window, Robotron rollbacks the entire transaction.
Phased Mode: To prevent errors aﬀecting opera-
tions from propagating throughout the network, some
deployments, such as ﬁrewall rule changes, require ap-
plying new conﬁgurations in multiple phases. In phased
deployments, engineers specify a permutation of per-
centage/region/role of devices to be updated in each
phase. Robotron monitors metrics to track the progress
of each phase and only continues deployment if the pre-
vious phase is successful or engineers will get a notiﬁ-