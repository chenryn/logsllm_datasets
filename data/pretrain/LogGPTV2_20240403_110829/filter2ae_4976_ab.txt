e”修饰符。在第二个参数中，我们可以看到攻击有效负载被拆分为多个字符串并与“。”运算符连接。我们还可以看到攻击者使用“ strrev”函数来反转连接字符串“
lave”的顺序，后者变成“eval”。连接后，我们得到以下有效payload：  
这里，代码不仅使用base64编码进行编码，还使用“deflate”数据格式进行压缩。解码和解压缩后，我们得到以下有效payload：
这意味着在GET或POST请求中评估“error”参数中发送的代码。
**字符串替换，连接和编码**
图6：使用字符串替换来隐藏函数名称和base64编码的后门程序
在此示例中，攻击者在变量中隐藏函数名称，并使用base64编码对后门本身进行模糊处理。唯一可见的已知关键字是第2行中的“ str_replace
”，它只使用一次。
让我们回顾一下代码，看看它是如何工作的。首先，在第2行中，参数“ tsdg ”的值为“ str_replace ”，取字符串“
bsbtbrb_rbebpblacb e”并使用str_replace函数删除所有字母“ b ”
。在这里，攻击者通过创建包含指定函数（包括附加字母）的字符串来混淆已知的PHP函数。然后，使用str_replace函数删除这些字母。
接下来，使用相同的方法，在第6和7行中，参数“ zjzy ”被赋予值“ base64_decode ”，参数“ liiy ”被赋予值“
create_function ”。请注意，不是直接使用str_replace函数，而是使用参数“ tsdg ”来逃避检测。
接下来，第1,3,4,5行中还有四个包含base64编码文本的参数。在第8行中，这四个参数的值按特定顺序连接，以形成在base64中编码的长字符串。第8行中的参数“
iuwt ”将包含以下代码行：
此代码将创建一个函数，从base64编码的文本中删除所有“ hd ”，然后解码它。在第9行中，执行此函数并将base64编码的文本解码为：
图7：解码的base64文本
这是后门本身。此后门将执行通过cookie发送到受感染服务器的代码。在第6行中，使用preg_replace函数和两个正则表达式更改通过cookie发送的值。然后，对已更改的文本进行base64解码并执行，运行攻击者发送的任意代码。
这个后门的逃避技术比我们在前一节中看到的要复杂得多。在这里，除了使用参数而不是PHP函数之外，后门本身在base64中解码。另外，为了避免简单的base64解码机制，base64文本被分成四个部分，并且字符“
hd ”被添加到随机位置以防止文本被解码。
### O和0 Catch
在下一个后门，逃避技术甚至更复杂，需要更多的步骤才能找到真正的后门：
图8：使用几种规避技术的后门程序。所有参数名称都由O和0组成
同样，只有两个可见的已知函数是“ urldecode
”，它在第1行用于解码URL，而“eval”用在第7行。解码的URL只是乱码，但在后面的步骤中用于字符连接在之前的逃避方法中看到过。
所有参数名称都由零和大写O组合而成。由于这两个字符在视觉上相似，因此很难阅读和理解代码。使用来自先前解码的URL的字符串联为每个这样的参数分配字符串。参数值为：
第3行 – ‘strtr’
第4行 – ‘substr’
5号线 – ‘52’
第2 + 6行 – 连接在一起形成’ base64_decode ‘
最后，在第7行中，在base64中编码的长文本正在被解码，然后使用先前定义的“ base64_decode ”参数执行。解码后的文字是：
图9：base64解码文本。由于存在由O和0组成的参数，代码仍然是不可读的
这不是后门本身，而只是逃避的又一步。这里，先前定义的O和0的参数再次被使用。  
第1行包含另一个用base64编码的长文本，但这次解码更复杂，不能按原样解码。将第2行中的参数替换为其值，可得到以下代码行：
图10：与之前相同的代码，用其值替换参数
其余O和0的参数是第1行的编码base64文本。此命令获取编码文本的偏移量为104的部分，然后创建一个映射到编码文本的第二个52个字符的前52个字符并使用strtr函数将字符替换为字符。然后，使用eval函数对被操纵的文本进行base64解码和执行。不使用上述地图就不可能解码文本。最后，文本被解码为实际的后门：
图11：base64解码后的后门本身。揭示了攻击者的真实意图
现在攻击者的真实意图被揭露了。此后门的目的是创建一个包含“输入”标记的新HTML表单，该标记使攻击者能够上载文件。然后，攻击者可以上传他选择的文件，后门将其移动到受攻击服务器内的攻击者指定的目录。后门还通过打印相应的消息指示文件是否已成功移动到所需的文件夹。
## 逃避技术摘要
如上例所示，攻击者正在尽最大努力隐藏其恶意代码并逃避检测。我们在攻击者使用的数据中看到的一些技术是：  
• 使用字符串操作隐藏已知的PHP函数（替换，连接，反向，移位和拆分）  
• 使用模糊的参数名称，如随机字符或字符O和0的组合，它们在视觉上相似  
• 使用base64编码对后门或其部分代码进行编码  
• 使用压缩作为隐藏后门代码的方法  
• 通过操纵文本来混淆base64编码的文本以避免简单的解码  
• 通过在输入上使用“preg_replace”函数上传后发送到后门的请求
## 缓解建议
有几个预防措施可以减轻后门攻击。
首先，在后门的上传点。这是阻止后门的最佳位置，因为它甚至在上传到受感染的服务器之前就已经发生了。通常，后门的上传是使用已知漏洞完成的，大多数时候是通过利用或未经授权的文件上传来完成的。建议使用易受RCE漏洞影响的服务器的组织使用最新的供应商补丁程序。手动修补的替代方法是虚拟修补。虚拟补丁主动保护Web应用程序免受攻击，减少暴露窗口并降低紧急补丁和修复周期的成本。
其次，在上传后门时，可以检查上传的代码本身是否有恶意内容。检查代码可能很复杂，因为攻击者会对代码进行模糊处理，因此无法理解，并且通常在查看代码时没有太多清晰的代码。使用静态安全规则和签名可能会导致成功有限。相反，其他动态规则包括分析应用程序的正常行为并警告与分析行为的任何偏差。
第三，如果后门已经上传到受感染的服务器上，则可能会阻止攻击者和后门之间的通信。此方法会阻止后门工作并向服务器管理员发出警报，因此可以删除后门。
审核人：yiwang 编辑：边边