1The step 0 in Figure 1 is an example of stack-based architecture.
In step (1), four 8-bit concrete values are concatenated together to
show the content of EAX. In step (2), the 8-bit symbolic value S 8
1 is
created to represent the value in AH. However, the 8-bit symbolic
execution do not have the capability to represent a 4-bit symbolic
value. Therefore, in step (3), it concatenates the four 8-bit values
and treats them as a 32-bit symbolic value S 32
is
used for calculating the conjunction.
3 . In step (4), S 32
3
From the simulation above, we can see that the result of single
granularity symbolic execution is a 32-bit symbolic value. However,
Figure 7(b) shows that the execution result should be a concrete
value. Therefore, single granularity symbolic execution create a
redundant symbolic value in the formula. Although the theorem
solver in the following step can prove that this symbolic value is
actually a concrete value, these redundant values unnecessarily
increase the formula size and add more burden to the solver.
The reason that single granularity symbolic execution misses the
optimization opportunity is that it lacks the capacity of handling
values on multiple granularity. Next we will show how our multiple
granularity symbolic execution is able to solve this problem. The
execution procedure is simulated as follows. First, we create a 32-bit
concrete value.
C32
1 |C 32
1
=0x12345678
The second instruction sets AH to an 8-bit symbolic value. Since
the granularity is flexible, our method can directly set the cor-
responding part to a symbolic value, leaving the remaining bits
untouched as concrete values. In our example, it splits the 32-bit
concrete value into one 16-bit value and two 8-bit values, and then
replaces one 8-bit concrete value with a 8-bit symbolic value S 8
1.
The result is shown as below.
[C16
2 ,
S 8
1 ,
C8
3]|C 16
2
=0x1234,
C 8
3
=0x78
C8
S 8
1 ,
The third instruction shift [C16
2 ,
3] to the left by 4 bits. In
multiple granularity symbolic execution, bit-level granularity is
exposed to all bitwise operations. Therefore, our method is able
to precisely interpret the semantics of bitwise operations on bit
level. The symbolic execution result of the shift operation is shown
as follows. It is an concatenation of one 12-bit concrete value, one
8-bit symbolic value and another 12-bit concrete value.
[C12
4 ,
S 8
1 ,
C12
5 ]|C 12
4
=0x234,
C 12
5
=0x780
The last instruction perform the conjunction operation. Similarly,
Multiple granularity symbolic execution engine accurately execute
the conjunction instruction on bit level as follows.
[C12
4 ∧ 0x0ff,
S 8
1 ∧ 0x00,
C12
5 ∧ 0xff0]|C 12
=0x234,
C 12
5
=0x780
4
Therefore, the final result is a concatenation of three concrete
values.
[C12
6 ,
C8
7 ,
C12
8 ]|C 12
6
=0x034,
C 8
7
=0x00,
C 12
8
=0x780
The three concrete values can be further merged to one 32-bit
concrete value. This is the same result as that shown in Figure 7(b).
C32
9 |C 32
9
=0x03400780
Advance over state-of-the-art work. Multiple granularity sym-
bolic execution is a new variant of symbolic execution to summarize
the semantics of the extracted code, and it balances the accuracy and
performance between fixed bit-level symbolic execution and tra-
ditional symbolic execution. By contrast, extending existing work
to achieve the same goal is difficult, if not impossible. In summary,
our design offers two competitive advantages.
(1) Fine-grained Analysis. Multiple granularity symbolic execu-
tion accurately interprets the semantics of bitwise operations
on bit level during execution. The fine-grained information
exposes optimization opportunities for eliminating redun-
dant symbolic values.
(2) Flexibility. The multiple granularity symbolic execution en-
gine is free to split and merge values without granularity
restriction. This feature gives multiple granularity symbolic
execution the capacity of operating on different granularity
levels, so that it can perform fine-grained analysis but still
generate concise formulas.
7 IMPLEMENTATION
We build an open source tool called VMHunt as the prototype
of our idea. The trace logger is written in C++ based on Intel’s
Pin DBI framework [38] (version 2.13). Symbolic execution on the
binary code has appealing applications in security analysis, and
many options [11, 14, 20, 22, 58, 61, 64] are available in the arsenal.
However, the fixed data type design in existing symbolic execution
engines obstructs the implementation of multiple-grained symbolic
execution. We have to redesign two fundamental components in
the symbolic execution engine: 1) a new data structure to support
multi-granularity data types; 2) a new symbolic execution rule to
decide an instruction should be translated to formula or interpreted.
It motivates us to develop our own symbolic execution engine. We
design an intermediate representation (IR), which can effectively
encode symbolic and concrete values on different granularities.
Based on this new feature, our symbolic execution engine efficiently
interprets the behavior of instructions and translates it to concise
formulas. Specifically, VMHunt consists of several components,
including the multiple granularity symbolic execution engine, a
parser for lifting a trace to the IR, the virtualized snippet boundary
detector, a forward/backward slicer, a peephole optimizer to revert
the effects of instruction-level obfuscation, and utilities for control
flow graph generation. The whole tool chain includes 17, 192 lines
of C++ code and 341 lines of Perl code.
8 EVALUATION
In this section, we evaluate VMHunt from two aspects: effectiveness
and performance. Particularly, we design and run experiments to
answer the research questions (RQs) as follows.
(1) RQ1: Is VMHunt able to correctly detect the virtualized
snippet boundary inside a virtualized program trace? (effec-
tiveness)
(2) RQ2: Is VMHunt able to effectively extract and simplify the
virtualized kernel? (effectiveness)
(3) RQ3: How many false positives can VMHunt produce? (ef-
fectiveness)
(4) RQ4: How much overhead does VMHunt introduce? (per-
formance)
As the response to RQ1, we first apply modern commercial virtual-
izers to several real open source programs and then use VMHunt
to detect the virtualized snippets. In RQ2, we compare the size of
kernel with the size of virtualized snippet. We use a theorem prover,
STP [27], to check the equivalence of the kernel and the original
trace (i.e., correctness testing). We run VMHunt on malware sam-
ples and provide a case study about a virtualized ransomware to
answer RQ1 and RQ2. In response to RQ3, we run benign programs
without virtualization to check the false positives. As the answer
to RQ4, we report the performance of the main components in
VMHunt, including the tracer, boundary detector, and symbolic
execution engine.
8.1 Open Source Programs
Typically, virtualization is used for protecting a piece of sensitive
snippet in a program. So first we evaluate VMHunt in this common
scenario. We select several open source programs as the test bed.
Next, we apply modern virtualization obfuscators to a snippet in
the program. After that, we use VMHunt to discover the virtualized
snippet and simplify it.
8.1.1 Testbed Programs. Our testbed is comprised of programs
from several open source projects. We choose them based on the
following facts. First, they are widely used open source programs
in the real world. Second, they are representative tools from dif-
ferent areas. Lastly, they inherently include a main loop that read
data and process it. For example, a web server contains a loop to
dispatch different inquire packages to the corresponding handlers
based on the package type. The main loop’s behavior is similar
to a virtual machine’s dispatch-handler behavior. This behaviors
can help us check the false positives that VMHunt produces. The
programs in our testbed are grep-2.21, bzip2-1.0.6, md5sum-8.24,
AES in OpenSSL-1.1.0-pre3, thttpd-2.26, and sqlite-2.26. The CPU
and memory of our testbed machine is Intel Core i7-3770 processor
and 8GB, with Ubuntu Linux 14.04 installed.
8.1.2 Virtualizer and Sensitive Area. We virtualize the above testbed
programs with several modern virtualization obfuscation tools and
then use VMHunt to detect and simplify the virtualized snippet.
The virtualization tools are Code Virtualizer [45], Themida [46],
VMProtect [73] and EXEcryptor [66]. We adopt the most recent
released version of each tool so as to evaluate VMHunt against the
state-of-the-art virtualization techniques2. All those virtualization
tools provide the capability to let users select a piece of sensitive
area in a program to be virtualized. The virtualization tool will con-
vert that area to virtual instructions that can only be understood
by an internal virtual machine. The remaining part of that program
will be untouched.
In order to evaluate VMHunt in the real world scenario, we im-
plement a trial/registration scheme which has two virtualized areas
in each of the test bed programs. The details of the trial/registra-
tion is shown in the Appendix A. After that we use VMHunt to
detect the boundaries of the virtualized areas. The result shows
that VMHunt correctly identifies the virtualized snippets in all
testbed programs. VMHunt is also able to extract the kernel of each
virtualized snippet. We compare the number of lines of the total
trace, virtualized snippets and kernels in Table 1. For simplicity,
2We purchased the professional editions of all testing obfuscators. They are still the
latest versions until 05/09/18.
we only present the evaluation data from Code Virtualizer [45].
The data from VMProtect [73] and EXECryptor [66] are similar.
Themida [46] shares same VMs with Code Virtualizer, so the eval-
uation data is also the same. According to Table 1, the virtualized
snippet identified by VMHunt is about 10% of the whole trace size.
The kernel of a virtualized snippet is about 10−4 of the whole trace
size. The result proves that VMHunt can significantly reduce the
number of instructions for future analysis.
Next, we run multiple granularity symbolic execution on each
kernel of the virtualized snippets. The symbolic execution generates
a simplified formula representing the semantics of the kernel. To
check whether the formula is equivalent to the original program, we
run symbolic execution on the trace of the original program without
virtualization. After that we use STP [27] to check whether the
formula from VMHunt’s output is equivalent to the unobfuscated
formula. The experiment result shows that all formulas generated
by VMHunt is equivalent to the original formula before obfuscation.
Compared to other deobfuscation work, VMHunt is the first one
that can verify the correctness of simplification result.
In order to evaluate the multiple granularity symbolic execution
in VMHunt, we compare it with two single granularity symbolic
execution engines. One is on byte-level (8 bits) and the other one is
on bit-level (1 bit). We remove the multiple granularity component
from our symbolic execution engine and modify it to a byte-level
and bit-level symbolic execution engine separately. They are used
for the comparative evaluation with VMHunt. We run the two single
granularity symbolic execution engines on the virtualized kernels
and compare the formulas with those generated by VMHunt. The
result is shown in Table 2. It shows that the size and number of
variables from formulas generated by multiple granularity symbolic
execution is significantly less than those from byte or bit level
symbolic execution engines. Moreover, we also compare the time
that a solver take to solve the formula. The formula generated
by multiple granularity symbolic execution can be solved about
10X faster than that from byte-level symbolic execution and 20X
faster than bit-level symbolic execution. The result proves that the
multiple granularity symbolic execution in VMHunt can produce
concise and efficient formulas, especially for bitwise operations.
8.2 Multiple VMs Virtualization
Some modern virtualization tools, such as Code Virtualizer [45] and
Themida [46], come with multiple custom VMs. Those custom VMs
are designed using different architectures. Users can apply different
VMs to different sensitive areas in the same program. As a result,
the execution trace of that program contains multiple virtualized
snippets of different VMs. In this scenario, reverse engineering one
sensitive area provides very little information for cracking other
sensitive areas. It raises a strong challenge to existing deobfuscation
methods and we have not found a direct response to this challenge
in the previous work.
We are curious about VMHunt’s performance in the scenario of
multiple VM virtualization. We conduct an experiment to verify
whether VMHunt is able to detect and simplify all virtualized snip-
pets of different VMs in a program. We adopt Code Virtualizer [45]
in this experiment, and it shares the same custom VM engines with
Themida [46]. The name of each VM is formed by an animal name
Table 1: The number of instructions of the whole trace, virtualized snippets, and kernels in all testbed programs. T means the
whole trace. S1 and S2 are the two virtual snippets in the trace. K1 and K2 are the kernels in S1 and S2 respectively.
Programs
T
grep
bzip2
aes
1,072,446
1,422,428
2,479,948
md5sum 2,309,826
thttpd
3,680,610
4,716,883
sqlite
S1
130,329
133,272
124,793
134,320
117,435
146,177
S2
168,857
153,537
156,019
168,163
155,262
161,073
S1+S2
299,186
286,809
280,812
302,483
272,697
307,250
K1
552
774
837
604
677
820
K2
1,061
1,444
1,173
1,271
1,389