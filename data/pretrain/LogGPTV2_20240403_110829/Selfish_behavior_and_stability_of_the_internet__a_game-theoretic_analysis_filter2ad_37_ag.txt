ﬂows. As a result, the loss penalty that an aggressive ﬂow receives
is minimal. CHOKe+, on the other hand, assigns most losses due
to a ﬂow’s rate increase to the ﬂow itself and keeps the rest of the
ﬂows mostly isolated from the aggressive ﬂow. Note that perfect
isolation, as in Fair Queueing and other similar schemes, is not
necessary. CHOKe+ must only ensure that the increase in loss
rate is suﬃcient to discourage aggressive behavior.
In a manner similar to the analysis of RED (Sections 4.3) we
7Though other forms of antisocial behavior, such as using no
congestion control at all, could lead to severe congestion collapse.
8In fact, the transmission protocol employed by the ﬂows need
not be reliable.
128e
g
a
t
n
e
c
e
P
s
s
o
L
25
20
15
10
5
0
Loss rate of flow Fn w/ CHOKe+
Loss rate of flows F1,...,Fn-1 w/ CHOKe+
Loss rate of flows F1,...,Fn w/ RED
Loss rate for flow Fn w/ CHOKe+
Loss rate of flows F1,...,Fn-1 w/ CHOKe+
Loss rate of flows F1,...,Fn w/ RED
7
6
5
4
3
2
1
e
g
a
t
n
e
c
e
P
s
s
o
L
0
5
10
20
15
35
Increase Parameter (alphan)
25
30
(a)
40
45
50
0
0.5
0.55
0.6
0.65
0.7
0.75
0.8
0.85
0.9
0.95
1
Decrease Parameter (betan)
(b)
Figure 10: Figure comparing the loss assignment of RED and CHOKe+. The loss rates for the greedy ﬂow and the
competing non-greedy ﬂows are plotted in each case. For RED buﬀers, the two curves coincide.
)
s
p
b
M
n
i
(
t
u
p
d
o
o
G
4
3.5
3
2.5
2
1.5
1
0.5
0
0
10
αE
3
α1 = 1 (α1,best = 3)
α2 = 3 (α2,best = 3)
50
60
30
40
20
Increase Parameter (α
n)
Goodput
0.97Mbps
(a)
2.74
Loss Rate
)
s
p
b
M
n
i
(
t
u
p
d
o
o
G
4
3.5
3
2.5
2
1.5
1
0.5
0
0.5
0.55
0.6
βE
0.74
β1 = 1 (β1,best = 0.74)
β2 = 0.74 (β2,best = 0.74)
0.9
0.95
1
0.65
0.8
0.7
0.75
0.85
Decrease Parameter (β
n)
Goodput
1.00Mbps
(b)
Loss Rate
2.42
Figure 11: Simulation results for Gentle ﬂows with CHOKe+ buﬀers
(cid:1)
dα(cid:1) |α(cid:1)=α for Gentle
plot the variations in pa = pα,α and Pa = dp
ﬂows when CHOKE+ buﬀers are employed in Figures 5(a) and
(b) along with the corresponding values for RED buﬀers. When
ﬂows get bursty, CHOKe+ drops packets much more aggressively
than RED buﬀers as can be seen from Figure 5(a) where the
common loss rate assigned by CHOKe+ is much higher than that
assigned by RED for the same setting of the common increase
parameter of the n ﬂows. In addition, CHOKe+ heavily penalizes
ﬂows for being even slightly more aggressive than the competing
ﬂows as is clear from Figure (b) where Pa is an order of magnitude
higher for CHOKe+ buﬀers compared to the corresponding values
for RED buﬀers. Due to these properties CHOKe+ signiﬁcantly
diminishes the goodput advantage of aggressive ﬂows. Similarly,
we plot the values of pb and Pb as functions of β in Figures 5(c)
and (d). Again, CHOKe+ does a much better job of penalizing
aggressive ﬂows then RED.
We plot the values of Fa and Fb for Gentle ﬂows as func-
tions of α and β respectively in Figures 6(a) and (b). Notice
that from these plots Fa and Fb are positive throughout imply-
ing that at the respective Nash equilibria αE grows arbitrarily
large and βE → 1. However, since CHOKe+ assigns a much
higher loss rate to ﬂows than RED for the same setting of the in-
crease or the decrease parameters of the n ﬂows (Figures 5(a) and
(c)) and since CHOKe+ induces many more bursty packet drops
than RED (this is intuitively clear from the CHOKe+ algorithm),
TCP SACK ﬂows tend to time-out occasionally when CHOKe+
buﬀers are used. In fact aggressive TCP SACK ﬂows will time-
out quite frequently under CHOKe+. The goodput equation for
Gentle ﬂows (Equation 24) does not capture this time out behav-
ior. Hence, Figures 6(a) and (b) do not correctly represent the
behavior of CHOKe+. Indeed CHOKe+ results in a much less
aggressive parameter setting at Nash equilibrium than RED, as
our simulations for the TCP Game (described below) show.
Our results for the Nash equilibrium of the TCP Game with
CHOKe+ buﬀers and TCP-SACK ﬂows are shown in Figure 11(a)
and (b). At Nash equilibrium, αE = 3 when ﬂows vary their
increase parameters and at βE = 0.74 when ﬂows vary their
decrease parameter. When both α and β are allowed to vary,
(α, β) = (3, 0.90). At this Nash equilibrium, the average per-
ﬂow goodput is 0.98Mbps and the per-ﬂow loss rate is 4%. All
the Nash equilibria have good per-ﬂow goodput and per-ﬂow loss
rate. CHOKe+ is so eﬀective that aggressive ﬂows see only a very
marginal improvement in goodput.
However, it is worth noticing that CHOKe+ cannot completely
nullify the advantage seen by aggressive ﬂows when decrease pa-
rameters are allowed to be varied. In fact, as we show in the next
section, it is impossible to eﬀectively punish greedy ﬂows varying
their decrease parameters without employing queue management
schemes that maintain explicit per-ﬂow state. In light of this re-
sult, the best we can hope for from a purely stateless mechanism
is to diminish the advantage to such a low value that it is almost
imperceptible to the aggressive ﬂow. CHOKe+ is eﬀective in do-
ing so. As can be seen from Figure 11(b), when CHOKe+ is used
there is hardly any perceptible advantage of setting β aggressively.
This also explains why βE at Nash equilibrium is signiﬁcantly
less than 1 (assuming that greedy ﬂows do not choose a more ag-
gressive parameter setting unless it yields a substantially higher
goodput with high conﬁdence). This property of CHOKe+ also
has implications on fairness. Since CHOKe+ discourages an ag-
gressive setting of β at Nash equilibrium, the window decrease is
still multiplicative. This results in a reasonable fair allocation [6].
5.2 On Multiplicative Decrease
Suppose that both the increase parameter α and the decrease
parameter β of all the ﬂows are allowed to vary. We argue below
that there can be no mechanism that does not maintain per ﬂow
state (e.g., fair queuing), that ensures a moderate value of β  0. By Equation 27 this means that
the queue management mechanism is capable of detecting relative
ﬂuctuations smaller than 
i , that is, arbitrarily small ﬂuc-
tuations, and imposing penalties whenever such ﬂuctuations oc-
cur. It can be shown by a reduction from element disjointness [4,
5] that any randomized algorithm that detects such ﬂuctuations
with high probability must use space proportional to n – that is
to say, must essentially maintain per-ﬂow state.
2 in g0
Our simpliﬁed model of queue management by penalties de-
pending on goodput rules out other schemes, such as the one
in which ﬂows are sampled for detailed analysis, and if a ﬂow is
found to have βi > β it is subject to penalties outside the realm of
queue management (such as exclusion from the network or legal
punishment). However, such schemes are even more far-fetched,
and run contrary to the end-to-end philosophy of the Internet.
6. SUMMARY
In this paper, we explore the impact of greedy TCP end-points
on the eﬃciency of the network. Our ﬁnding can be brieﬂy sum-
marized as follows:
• In certain situations, greedy end-point behavior can result
in eﬃcient network operation. In particular, the Nash equi-
libria are reasonably eﬃcient in the historically signiﬁcant
setting of TCP-Reno loss recovery in a network of drop-tail
routers.
• Unfortunately, in settings where either TCP-SACK loss re-
covery has been adopted by end-points or RED has been
deployed in routers, the Nash equilibria of the TCP game
are undesirable, having either low network goodput or high
drop rates, or both.
• However, the addition of very simple preferential dropping
algorithms, such as CHOKe+, can help restore the eﬃ-
ciency of the Nash equilibria.
The conclusions about the Nash equilibria of the TCP Game
under various scenarios imply that, while in the past, network
operators could rely on the behavior of end-users to ensure the
stable, eﬃcient operation of the network, the same cannot be
said of today’s Internet. They also suggest that there are two
possible reasons for the continued stable operation of the present-
day Internet: (1) it is too diﬃcult to modify end-hosts to behave
greedily or (2) end-users consciously choose to behave in a socially
optimal manner. However, all is not yet lost.
It is possible to
design simple, stateless queue management algorithms to ensure
that the advantage gained by aggressive ﬂows is more than oﬀset
by a high packet loss rate. These mechanisms can also ensure
reasonable, but not perfect, fairness at Nash equilibrium. This
would help make the Nash equilibrium more desirable while still
allowing the implementation of modern loss recovery mechanisms
(such as TCP-SACK) and queue management techniques (such
as RED) which have otherwise played a stellar role in keeping the
Internet of today in good stead.
7. REFERENCES
[1] The network simulator - ns-2. http://isi.edu/nsnam/ns/.
[2] A. Akella, S. Seshan, S. Shenker, and I. Stoica. Exploring
congestion control. Technical Report CMU-CS-02-139,
CMU, Pittsburgh, Pennsylvania, May 2002.
[3] M. Allman, V. Paxson, and W. Stevens. TCP congestion
control. Internet Draft, Internet Engineering Task Force,
Feb. 1999. Work in progress.
[4] Z. Bar-Yossef. Private Communication, May 2002.
[5] Z. Bar-Yossef. The complexity of massive data set
computations. PhD Dissertation, U.C. Berkeley, May 2002.
[6] D. Chiu and R. Jain. Analysis of the increase/decrease
algorithms for congestion avoidance in computer networks.
Computer Networks and ISDN Systems, 17(1):1–14, June
1989.
[7] A. Demers, S. Keshav, and S. Shenker. Analysis and
simulation of a fair queueing algorithm. In SIGCOMM
Symposium on Communications Architectures and
Protocols, pages 1–12, Austin, Texas, Sept. 1989. ACM. also
in Computer Communications Review, 19 (4), Sept. 1989.
[8] C. Douligeris and R. mazumdar. On pareto optimal ﬂow
control in a multicalss environment. In The 25th Allerton
Conference of Communication, Control and Computing,
University of Illinois at Urbana-Champaign, Oct. 1987.
[9] C. Douligeris and R. Mazumdar. A game-theoretic
approach to ﬂow conrtol in an integrated environment.
Journal of the Franklin Institute, 329(3):383–402, Mar.
1992.
[10] K. Fall and S. Floyd. Simulation-based comparisons of
tahoe, reno, and SACK TCP. ACM Computer
Communication Review, 26(3):5–21, July 1996.
[11] D. Ferguson, C. Nikolaou, and Y. Yemini. An economy for
ﬂow control in computer networks. In Proceedings of the
Conference on Computer Communications (IEEE
Infocom), 1989.
[12] S. Floyd. Questions about sack deployment.
http://www.icir.org/ﬂoyd/sack-questions.html.
[13] S. Floyd and V. Jacobson. Random early detection
gateways for congestion avoidance. IEEE/ACM
Transactions on Networking, 1(4):397–413, Aug. 1993.
[14] M.-T. Hsiao and A. Lazar. A game-theoretic approach to
decentralized ﬂow control of markovian queue networks. In
Performance, Holland, 1987.
[15] V. Jacobson. Congestion avoidance and control. ACM
Computer Communication Review, 18(4):314–329, Aug.
1988. Proceedings of the Sigcomm ’88 Symposium in
Stanford, CA, August, 1988.
[16] R. Karp, E. Koutsoupias, C. Papadimitriou, and
S. Shenker. Combinatorial optimization in congestion
control. In Proceedings of the 41th Annual Symposium on
Foundations of Computer Science, pages 66–74, Redondo
Beach, CA, 12–14 Nov. 2000.
[17] D. Lin and R. Morris. Dynamics of random early
dectection. ACM Computer Communication Review,
27(4):127–136, Oct. 1997. ACM SIGCOMM’97, Sept. 1997.
[18] R. Mahajan and S. Floyd. Controlling high-bandwidth
ﬂows at the congested router. In Proc. of ICNP’01,
Riverside, California, USA, Nov. 2001.
[19] J. Padhye, V. Firoiu, D. F. Towsley, and J. F. Kurose.
Modeling TCP reno performance: a simple model and its
empirical validation. IEEE/ACM Transactions on
Networking, 8(2):133–145, Apr. 2000.
[20] R. Pan, L. Breslau, B. Prabhakar, and S. Shenker.
Approximate fairness through diﬀerential dropping (one
page summary). ACM Computer Communication Review,
Jan. 2002.
[21] R. Pan, B. Prabhakar, and K. Psounis. CHOKE, a stateless
active queue management scheme for approximating fair
bandwidth allocation. In Proceedings of the Conference on
Computer Communications (IEEE Infocom), Mar. 2000.
[22] S. Shenker. Making greed work in networks: A
game-theoretic analysis of switch service disciplines.
IEEE/ACM Transactions on Networking, 3, 1995.
[23] Y. R. Yang and S. S. Lam. General AIMD congestion
control. Technical Report UTCS TR-2000-09, University of
Texas, Austin, Texas, May 2000.
130