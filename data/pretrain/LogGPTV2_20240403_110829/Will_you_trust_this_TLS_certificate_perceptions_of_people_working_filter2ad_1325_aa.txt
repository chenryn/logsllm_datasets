title:Will you trust this TLS certificate?: perceptions of people working
in IT
author:Martin Ukrop and
Lydia Kraus and
Vashek Matyas and
Heider Ahmad Mutleq Wahsheh
Will You Trust This TLS Certificate?
Perceptions of People Working in IT
Martin Ukrop
PI:EMAIL
CRoCS, Masaryk University
Brno, Czech Republic
Vashek Matyas
PI:EMAIL
CRoCS, Masaryk University
Brno, Czech Republic
Lydia Kraus
PI:EMAIL
CRoCS, Masaryk University
Brno, Czech Republic
Heider Ahmad Mutleq Wahsheh
PI:EMAIL
Ca’ Foscari University of Venice
Venice, Italy
ABSTRACT
Flawed TLS certificates are not uncommon on the Internet. While
they signal a potential issue, in most cases they have benign causes
(e.g., misconfiguration or even deliberate deployment). This adds
fuzziness to the decision on whether to trust a connection or not.
Little is known about perceptions of flawed certificates by IT pro-
fessionals, even though their decisions impact high numbers of end
users. Moreover, it is unclear how much does the content of error
messages and documentation influence these perceptions.
To shed light on these issues, we observed 75 attendees of an
industrial IT conference investigating different certificate validation
errors. We also analysed the influence of re-worded error messages
and redesigned documentation. We find that people working in IT
have very nuanced opinions with trust decisions being far from bi-
nary. The self-signed and the name constrained certificates seem to
be over-trusted (the latter also being poorly understood). We show
that even small changes in existing error messages can positively
influence resource use, comprehension, and trust assessment. Our re-
worded error messages and documentation can be directly adopted.
CCS CONCEPTS
• Security and privacy → Usability in security and privacy;
Authentication; • Human-centered computing;
KEYWORDS
warning design, documentation, TLS certificate, usable security
ACM Reference Format:
Martin Ukrop, Lydia Kraus, Vashek Matyas, and Heider Ahmad Mutleq
Wahsheh. 2019. Will You Trust This TLS Certificate?: Perceptions of People
Working in IT. In 2019 Annual Computer Security Applications Conference
(ACSAC ’19), December 9–13, 2019, San Juan, PR, USA. ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3359789.3359800
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
This is the author’s version of the work. It is posted here for your personal use. Not for
redistribution. The definitive Version of Record was published in 2019 Annual Computer
Security Applications Conference (ACSAC ’19), December 9–13, 2019, San Juan, PR, USA,
https://doi.org/10.1145/3359789.3359800.
1 INTRODUCTION
Nowadays, communication protected by TLS (formerly SSL) is get-
ting more and more prevalent on the Internet (in May 2019, over 80%
of page loads in Google Chrome were done over HTTPS [20]). For
the TLS infrastructure to work, end entities authenticate themselves
using X.509 certificates [13]. Certificate validation errors are quite
common [4, 5], although an error does not necessarily imply a se-
curity incident. For example, getting a self-signed certificate may be
either an attack (adversary pretending to be a trusted site) or only
a misconfiguration (the local administrator unable or unwilling to
obtain a certificate signed by a trusted certificate authority). Imagine
the developer connecting to an identity service – if they accept the
self-signed certificate presuming it is just a misconfiguration (when
it is not), they will leak authentication credentials of the end users.
Much work has been conducted to understand why system admin-
istrators have difficulties in getting TLS deployment and certificate
handling right. Usability shortcomings in the TLS deployment pro-
cess [26] and related tools [39], as well as other factors beyond the
system administrators’ control [14], seem to be common root causes.
Furthermore, it has been shown that invalid certificates are some-
times deployed deliberately [17].
Nevertheless, most of the previous work on TLS warnings focused
on the warning perceptions of end users [6, 8, 18, 32, 38], while the
perception of certificate flaws by people working in IT seems under-
researched. We, therefore, focus on people interacting with software,
systems and networks beyond the end user interface (henceforth
referred to as ‘IT professionals’1). IT professionals have a stronger
impact on the ecosystem: While the decision of end users to ignore
a warning influences only themselves, a similar decision by an IT
professional potentially puts numerous end users at risk.
WheneverITprofessionalsencounteracertificatevalidationerror,
we would want them to investigate and draw the right security con-
clusion. To gain a deeper understanding of whether they can do it, we
conducted an empirical study2 with 75 attendees of an industrial IT
conference. In the test scenario, study participants were confronted
with certificate validation errors in a command line interface, asked
to investigate the problem and subsequently assess their trust in the
certificates (methodology described in Section 2). Firstly, we look
1This includes people responsible for development, testing, deployment and admin-
istration alike. Note that we do not limit the sample to any single role since the same
errors are encountered by all.
2Study artifacts are available at https://crocs.fi.muni.cz/papers/acsac2019.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Ukrop and Kraus, et al.
into how IT professionals perceive TLS certificate flaws and examine
the online sources they use to comprehend the problem (Section 3).
Secondly, we are interested how much the content of error messages
and documentation influences their perceptions (Section 4). The
participants were thus divided into two groups: one with current
OpenSSL error messages and documentation and another with re-
wordederrormessages andredesigned documentation. Incontrast to
theworkofGorskietal.[22],weadjustjustthecontent,notthewhole
concept of the errors and documentation to ensure compatibility.
In summary, our work yields the following contributions.
(1) We provide detailed insights into the perception of different certifi-
cate flaws by IT professionals. We find that their opinions are very
nuanced. The trust in flawed certificates is far from binary. More-
over, the self-signed and name constrained certificates seem to
be over-trusted (the latter also being poorly understood). The
trust in expired certificates heavily depends on the time elapsed
from the expiry date.
(2) We propose and evaluate the influence of redesigned error mes-
sages and documentation. We find that the redesigned certificate
validation messages and documentation positively influenced
resource use, comprehension, and trust assessment.
2 METHODOLOGY
To gain insights into participants’ perception of certificate flaws,
we presented them with a scenario-based certificate validation task.
Within the task, they successively evaluated multiple server connec-
tions with flawed TLS certificates. Participants were divided into
two groups with different error messages and documentation.
2.1 Procedure
The study consisted of three parts: 1) an introductory questionnaire
on previous experience, 2) a certificate validation task with trustwor-
thiness assessment and 3) an exit semi-structured interview followed
by an educational debriefing. All parts of the experiment were in
English, except for the interview, which could optionally be in Czech.
The study had a mixed design: The participants were validating five
different certificates (the within-subjects factor) across two different
conditions (original or redesigned documentation; the between-
subjects factor). The order of the certificates was randomized and
participants were randomly assigned to one of the between-subjects
conditions. A small pilot of the whole study took place before the
experiment. It had shown no issues in the experiment design, but
uncovered some smaller technical glitches and task ambiguities.
Initial Questionnaire. At the beginning, we inquired into the
2.1.1
previous experience of the participants: the years of employment,
formal education, self-reported knowledge of computer security
and X.509 certificates in particular (5-point Likert scale from poor to
excellent for the last two questions). To make sure the sample uses
relevant tools, we asked about previous experience with OpenSSL
and other certificate manipulation utilities. Afterward, they received
16 questions of the Security Behavior Intentions Scale (SeBIS) [16].
The full questionnaire can be found in Appendix A.
2.1.2 Certificate Validation Task. Participants were asked to eval-
uate their trust in five different server certificates (in a randomized
order). The scenario stated they were implementing a patch for the
conference website to support registration using external identity
providers (Microsoft, Fedora Project, GitHub, Google and Facebook).
It was said that they had started by writing a small program establish-
ing a TLS connection to the providers’ servers. However, since some
certificatescausedvalidationerrors,theparticipantswereaskedtoin-
vestigate these and evaluate the trustworthiness of the connections.
When running the given program for each identity provider in
the command line interface, a short certificate validation message
was displayed. Apart from that, the certificate was “downloaded”
and saved next to the program binary to allow for a further (manual)
inspection. The participants were not limited in their investigation
– they could inspect the certificate, browse the Internet or use local
sources for as long as they wanted. For convenience, the printed
version of the task contained a command to view the downloaded
certificate. The complete task can be found in Appendix A.
Below, we discuss the five certificate issues used in our exper-
iment. We included three cases commonly occurring in the wild,
one extension that would allow for a fine-grained control in the
ecosystem (yet is still rarely used) and a control case.
• Hostname mismatch. The certificate that was presented by
oauth.facebook.com had the subject of oauth.facesbook.com (an ex-
tra ‘s’ in the name). Browser-based measurements show roughly
10% [4] to 18% [5] of the certificate errors due to a name mismatch.
• Self-signed. The certificate for id.fedoraproject.com was signed
by its own key (it did not chain up to a trusted root). Such errors
constitute roughly 1% of browser certificate errors [4], but their
prevalence in TLS scans can be as high as 25% [23] or 88% [11].
• Expired. The certificate was issued for login.microsoft.com and
its validity ended seven days before the experiment. Expired cer-
tificates cause from 4% [4] to 7% [5] of browser certificate errors
and are present at about 18% of the sites [23].
• Name constraints. The chain for accounts.google.com contained
an intermediate authority that was constrained (by the root au-
thority)toissuecertificatesinthedomainsubtree *.api.google.com.
Thus, the violated name constraint invalidated the certificate
chain. The name constraints extension was standardized back
in 2002 in RFC 3280 [24] and the CA/Browser forum guidelines
allow for its use on public websites since June 2012 [10]. Despite
its potential to prevent certificate misissuance, only 0.001% of the
unexpired certificates in May 2019 used this extension [15].
• OK. The certificate for auth.github.com had no validation issues.
It was included as the control case.
All the certificates (apart from the self-signed), were chained up to a
self-signed certificate for the experiment Root CA. The participants
were explicitly instructed (in the task specification) to trust this root.
After each case, the participant was asked to assess the trustwor-
thiness of the connection with such a certificate. A 7-point scale was
provided. It spanned from ‘Trust 6/6: I’m totally satisfied. If it were
my bank’s website, I would log in without worries.’ down to ‘Trust
0/6: Outright untrustworthy. It is not safe to browse or to trust any
information there.’ The full scale can be found in Appendix A.
2.1.3 Post-task Interview. After the certificate validation, a short
semi-structured interview took place. First and foremost, the par-
ticipants were asked to explain in their own words the problem
with each certificate. Retrospective evaluations help gain valuable
Will You Trust This TLS Certificate?
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
insights into participants’ reasoning, especially in the context of
usability studies with advanced users. Due to the task complexity,
this approach was more suitable than methods that foster immediate
reflection, such as think-aloud protocols [29]. After discussing the
individual certificate issues, expired certificates were talked over
in detail. The full list of base questions guiding the interview can
be found in Appendix A. To educate the IT community, the exper-
imenter clarified any misconceptions or misunderstandings in the
debriefing after the participants described their view.
2.2 Experimental Conditions
We deployed two experimental conditions differing in the error mes-
sages and documentation with each participant randomly assigned
to one condition. The fact that they may have alternative error mes-
sages was only disclosed in the debriefing after completing the task.
The first condition, henceforth referred to as the ‘original’, used
current error messages from OpenSSL 1.1.0g-fips (build from Novem-
ber 2nd, 2017) with the corresponding documentation (manual pages
and resources available on the Internet). We decided to use OpenSSL
as a base condition since it is one of the most popular crypto libraries
for generating keys/certificates [30]. The original error messages
contain several descriptive words and a textual error code that can
be looked up in the documentation. The documentation is available
in the form of manual pages and the online OpenSSL Wiki [31]. How-
ever, the descriptions in the documentation contain only little extra
information compared to the actual error message.
The second, ‘redesigned’, condition had re-worded error messages
with a link to the website containing our custom-written documenta-
tion. We expected the documentation might have room for improve-
ment due to related research on poor usability of OpenSSL [39]. To
ensure compatibility, we decided not to design a completely novel
system of errors (compared to the work by Gorski et al. [22]).
The first draft of the new error messages and documentation was
done by the principal researcher synthesizing personal experience
from open-source development of certificate-validating software,
existing documentation and designs by multiple students (asked to
create usable documentation for the chosen certificate validation er-
ror). Subsequently, the draft underwent multiple iterations between
the researcher and a usable security expert with experience from
both industry and academia. Overall, the design process followed
the principles of warning design proposed by Bauer et al. [7].
The error messages were re-worded to explain the cause in more
detail, but to still fit into a single line (including the link to the new
documentation page). We decided to keep the text codes for easy
reference and reasonable compatibility. The documentation for each
case has a consistent structure of four subsections: 1) summarizing
the problem; 2) explaining what happened; 3) giving the security
perspective (explaining the risks) and 4) proposing what steps could
be taken next. The re-worded error messages and the full documen-
tation can be seen in Appendix B.
2.3 Setting and Recruitment
The study took place in 2018 at DevConf.CZ 2018, an international
community conference for developers, admins, DevOps engineers,
testers and others interested in open source technologies such as
Linux, middleware, virtualization or storage. The conference was
organized by Red Hat Czech and had approximately 1700 attendees.
We had set up a booth offering participation in research regarding the
usability of developer tools. The booth featured three Linux work-
stations with (virtualized) Fedora 27 (a standard workstation flavor)
connected to the Internet. The operating system logged executed
commands and browsed websites as well as recorded the screen.
The participants were not primed to expect security tasks, but
beforeacceptingthem,wemadesurethattheyknewwhatTLScertifi-
cates were. We decided not to limit our sample to security profession-
als, as it turns out that the majority of developers work with security
featuresfromtimetotime[28].Thewholeexperimenttookabout30–
40 minutes per participant (pre-task questionnaire, task, post-task
interview). For completing the task, we gave participants merchan-
dise of the organizing company (i.e., no monetary compensation).
All participants were briefed about the extent of processed per-
sonal information. Participation was voluntary and the audio record-
ingoftheinterviewwasoptional.Allthedatawascollectedpseudony-
mously. As stated in the informed consent form, the subset of the data
(excluding the screen and interview recordings) were anonymized
and are published as an open dataset. The study design has been
approved by our research ethics committee.
2.4 Participants
From the 78 recruited participants,3 3 were omitted due to not
completing all the sub-tasks, resulting in the base sample count of
75 . The participants were employed in the IT sector on average for
9.55±7.064 years (median 8). In more detail, 16% of the participants
(12 ) were employed for 0–2 years, 25% (19 ) for 3–5 years, 16% (12 )
for 6–8 years, 11% (8 ) for 9–11 years and 32% (24 ) for 12 or more
years (yet nobody for more than 30 years).
The formal education levels were also diverse: 33% of the partic-
ipants (25 ) did not have a formal degree in computer science or
engineering, 25% (19 ) had a bachelor’s degree, 38% (29 ) a master’s
degree and 3% (2 ) a Ph.D. Participants’ self-reported security knowl-
edge was ‘good’ on average (mean 1.91±1.02, median 2), their expe-
rience with X.509 certificates was ‘fair’ on average (mean 1.00±1.07,
median 1). Almost all participants (91%, 68 ) had used OpenSSL