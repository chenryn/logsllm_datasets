    ?>
                任务
                上传一个webshell到服务器。
                上传区
                    请选择要上传的图片：
                    ';
                        }
                    ?>
这里采用了白名单判断，但是$img_path直接拼接，所以可以先上传一个符合白名单检测的jpg文件，之后再burpsuite中使用%00截断保存路径即可绕过检测，最后保存一个php类型的木马文件。  
首先，上传一个shell.jpg格式的文件，之后使用burpsuite抓包：  
之后在save_path处使用%00截断构造保存的文件名：  
使用菜刀连接  
#### 文件扩展名检测绕过
这种检测方式会对文件的后缀名进行检测，常见的有白名单和黑名单两种。  
假定服务器端采用黑名单检测方式，这里借助upload-labs来演示通过后缀名大小写绕过检测(其余情景还很多，例如：.htaccess攻击、空格绕过、解析绕过、双写后缀绕过等，有兴趣的可以自我研习)，以下代码取自upload-labs的Pass-06
                任务
                上传一个webshell到服务器。
                上传区
                    请选择要上传的图片：
                    ';
                        }
                    ?>
从以上代码中可以看到，这里采用了黑名单检测方法，但是在使用文件后缀名与黑名单中的后缀名进行匹配时未先转小写，导致可以使用大小写后缀的方式来绕过。  
直接上传shell.PHp文件：  
从回显结果来看成功上传：  
#### 服务器端文件内容检测绕过
文件内容检测及对上传的文件的内容进行检查，常见检查方法有：幻数检测、exif_imagetype()检测、getimagesize()检测、二次渲染等。  
这里以幻数检测绕过为例做一个简单的演示，以下代码来自upload-labs的Pass-14:
                任务
                上传图片马到服务器。
                注意：
                1.保证上传后的图片马中仍然包含完整的一句话或webshell代码。
                2.使用" target="_bank">文件包含漏洞能运行图片马中的恶意代码。
                3.图片马要.jpg,.png,.gif三种后缀都上传成功才算过关！
                上传区
                    请选择要上传的图片：
                    ';
                        }
                    ?>
从代码层面来看应该是检测的文件的幻数，那么我们在文件内容的开头增加幻数就OK!  
首先，上传shell.jpg，同时使用burpsuite抓包：  
之后在文件内容处加入幻数：  
从上面可以看到成功上传文件，该漏洞的利用还需要借助文件包含漏洞，例如：  
### 防御策略
1、严格规范文件上传处理逻辑设计，不建议先存储后判断的方式，以免引起条件竞争类漏洞。  
2、严格检查上传的文件后缀名、Content-Type、文件内容等。  
3、定时修复服务器端的解析类漏洞，以及文件包含类漏洞避免漏洞组合。