![Internet Requests](/data/attachment/album/201506/23/234153tdhl05ra0hsff0zl.png)
状态机本质上是一组指令，告诉 NGINX 如何处理一个请求。大多数 web 服务器像 NGINX 一样使用类似的状态机来实现相同的功能 - 区别在于实现。
### 调度状态机
把状态机想象成国际象棋的规则。每个 HTTP 事务是一个象棋游戏。一方面棋盘是 web 服务器 —— 一位大师可以非常迅速地做出决定。另一方面是远程客户端 —— 在一个相对较慢的网络下 web 浏览器访问网站或应用程序。
不管怎样，这个游戏规则很复杂。例如，web 服务器可能需要与各方沟通（代理一个上游的应用程序）或与身份验证服务器对话。web 服务器的第三方模块甚至可以扩展游戏规则。
#### 一个阻塞状态机
回忆我们之前的描述，一个进程或线程就像一套独立的指令集，操作系统可以在一个 CPU 核心上调度运行它。大多数 web 服务器和 web 应用使用每个连接一个进程或者每个连接一个线程的模式来玩这个“象棋游戏”。每个进程或线程都包含玩完“一个游戏”的指令。在服务器运行该进程的期间，其大部分的时间都是“阻塞的” —— 等待客户端完成它的下一步行动。
![Blocking I/O](/data/attachment/album/201506/23/234153sgd8p17djp7gqfz1.png)
1. web 服务器进程在监听套接字上监听新连接（客户端发起新“游戏”）
2. 当它获得一个新游戏，就玩这个游戏，每走一步去等待客户端响应时就阻塞了。
3. 游戏完成后，web 服务器进程可能会等待是否有客户机想要开始一个新游戏（这里指的是一个“保持的”连接）。如果这个连接关闭了（客户端断开或者发生超时），web 服务器进程会返回并监听一个新“游戏”。
要记住最重要的一点是每个活动的 HTTP 连接（每局棋）需要一个专用的进程或线程（象棋高手）。这个结构简单容并且易扩展第三方模块（“新规则”）。然而，还是有巨大的不平衡：尤其是轻量级 HTTP 连接其实就是一个文件描述符和小块内存，映射到一个单独的线程或进程，这是一个非常重量级的系统对象。这种方式易于编程，但太过浪费。
#### NGINX是一个真正的象棋大师
也许你听过[车轮表演赛](http://en.wikipedia.org/wiki/Simultaneous_exhibition)游戏，有一个象棋大师同时对战许多对手？
![Kiril Georgiev](/data/attachment/album/201506/23/234153x0m0s5mo0ohjvql5.gif)
*[列夫·吉奥吉夫在保加利亚的索非亚同时对阵360人](http://gambit.blogs.nytimes.com/2009/03/03/in-chess-records-were-made-to-be-broken/)。他的最终成绩是284胜70平6负。*
这就是 NGINX 工作进程如何“下棋”的。每个工作进程（记住 - 通常每个CPU核心上有一个工作进程）是一个可同时对战上百人（事实是，成百上千）的象棋大师。
![Event-driven Architecture](/data/attachment/album/201506/23/234154h1f77sf7sp1snz1s.png)
1. 工作进程在监听和连接套接字上等待事件。
2. 事件发生在套接字上，并且由工作进程处理它们：
	* 在监听套接字的事件意味着一个客户端已经开始了一局新棋局。工作进程创建了一个新连接套接字。
	* 在连接套接字的事件意味着客户端已经下了一步棋。工作进程及时响应。
一个工作进程在网络流量上从不阻塞，等待它的“对手”(客户端)做出反应。当它下了一步，工作进程立即继续其他的游戏，在那里工作进程正在处理下一步，或者在门口欢迎一个新玩家。
#### 为什么这个比阻塞式多进程架构更快？
NGINX 每个工作进程很好的扩展支撑了成百上千的连接。每个连接在工作进程中创建另外一个文件描述符和消耗一小部分额外内存。每个连接有很少的额外开销。NGINX 进程可以固定在某个 CPU 上。上下文交换非常罕见，一般只发生在没有工作要做时。
在阻塞方式，每个进程一个连接的方法中，每个连接需要大量额外的资源和开销，并且上下文切换（从一个进程切换到另一个）非常频繁。
更详细的解释，看看这篇关于 NGINX 架构的[文章](http://www.aosabook.org/en/nginx.html)，它由NGINX公司开发副总裁及共同创始人 Andrew Alexeev 写的。
通过适当的[系统优化](http://nginx.com/blog/tuning-nginx/)，NGINX 的每个工作进程可以扩展来处理成千上万的并发 HTTP 连接，并能脸不红心不跳的承受峰值流量(大量涌入的新“游戏”)。
### 更新配置和升级 NGINX
NGINX 的进程体系架构使用少量的工作进程，有助于有效的更新配置文件甚至 NGINX 程序本身。
![Updating Configuration](/data/attachment/album/201506/23/234154czwsi4gcihjzmnj9.png)
更新 NGINX 配置文件是非常简单、轻量、可靠的操作。典型的就是运行命令 `nginx –s reload`，所做的就是检查磁盘上的配置并发送 SIGHUP 信号给主进程。
当主进程接收到一个 SIGHUP 信号，它会做两件事：
* 重载配置文件和分支出一组新的工作进程。这些新的工作进程立即开始接受连接和处理流量（使用新的配置设置）
* 通知旧的工作进程优雅的退出。工作进程停止接受新的连接。当前的 http 请求一旦完成，工作进程就彻底关闭这个连接（那就是，没有残存的“保持”连接）。一旦所有连接关闭，这个工作进程就退出。
这个重载过程能引发一个 CPU 和内存使用的小峰值，但是跟活动连接加载的资源相比它一般不易察觉。每秒钟你可以多次重载配置（很多 NGINX 用户都这么做）。非常罕见的情况下，有很多世代的工作进程等待关闭连接时会发生问题，但即使是那样也很快被解决了。
NGINX 的程序升级过程中拿到了高可用性圣杯 —— 你可以随时更新这个软件，不会丢失连接，停机，或者中断服务。
![New Binary](/data/attachment/album/201506/23/234155ft9w3c2e39acek29.png)
程序升级过程类似于平滑重载配置的方法。一个新的 NGINX 主进程与原主进程并行运行，然后他们共享监听套接字。两个进程都是活动的，并且各自的工作进程处理流量。然后你可以通知旧的主进程和它的工作进程优雅的退出。
整个过程的详细描述在 [NGINX 管理](http://nginx.org/en/docs/control.html)。
### 结论
[深入 NGINX 信息图](http://nginx.com/resources/library/infographic-inside-nginx/)提供一个 NGINX 功能实现的高层面概览，但在这简单的解释的背后是超过十年的创新和优化，使得 NGINX 在广泛的硬件上提供尽可能最好的性能同时保持了现代 Web 应用程序所需要的安全性和可靠性。
如果你想阅读更多关于NGINX的优化，查看这些优秀的资源：
* [NGINX 安装和性能调优](http://nginx.com/resources/webinars/installing-tuning-nginx/) (webinar; Speaker Deck 上的[讲义](https://speakerdeck.com/nginx/nginx-installation-and-tuning))
* [NGINX 性能调优](http://nginx.com/blog/tuning-nginx/)
* [开源应用架构： NGINX 篇](http://www.aosabook.org/en/nginx.html)
* [NGINX 1.9.1 中的套接字分片](http://nginx.com/blog/socket-sharding-nginx-release-1-9-1/) (使用 SO\_REUSEPORT 套接字选项)
---
via: 
作者：[Owen Garrett](http://nginx.com/author/owen/) 译者：[wyangsun](https://github.com/wyangsun) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出