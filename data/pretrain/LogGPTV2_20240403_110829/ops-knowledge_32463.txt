User: How to configure and manage a large number of servers automatically with Ansible? Please provide a sample Playbook.
Assistant: It is very convenient to use Ansible to automate the configuration and management of a large number of servers. Here is an example Playbook for installing Nginx on multiple servers: ``` --- - name: Install Nginx hosts: webservers become: true tasks: - name: Add Nginx Repository apt_repository: repo: 'ppa:nginx/ stable' state: present tags: ['apt'] - name: Install Nginx apt: name: nginx state: latest tags: ['apt'] - name: Start Nginx Service service: name: nginx state: started enabled: true tags : ['nginx'] ``` is explained as follows: - `name`: Playbook name, describing what the Playbook will do. - `hosts`: Specifies the host group to operate on. - `become`: Use sudo or root privileges to run the task. - `tasks`: Specifies a list of tasks to execute on the host. Next, let's analyze the tasks of this Playbook: - The first task adds the Nginx repository via the `apt_repository` module. - The second task installs the latest version of Nginx using the `apt` module. - The third task starts the Nginx service using the `service` module and makes sure it starts automatically when the server starts. To run this playbook, use the following command: ``` ansible-playbook nginx.yml ``` where `nginx.yml` is the filename of the playbook. By running this command, Ansible will automatically install and configure Nginx on all web servers. This can be verified using the `ansible` command: ``` ansible webservers -m shell -a 'systemctl status nginx' ``` Using Ansible makes it easy to automate the configuration and management of large numbers of servers. This sample Playbook is just a simple example, you can write more complex Playbooks according to your requirements.