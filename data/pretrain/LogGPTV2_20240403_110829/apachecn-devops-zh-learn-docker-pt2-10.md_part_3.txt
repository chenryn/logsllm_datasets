如果在容器内运行`top`命令时出现`error - TERM environment variable not set`错误，请执行以下步骤解决:
运行`echo $TERM`命令。你会得到`dumb`一样的结果。然后，运行以下命令:
```
$ export TERM=dumb 
```
这将解决错误。
## docker 统计命令
`docker stats`命令为您提供了从 Docker 主机查看容器的内存、CPU 和网络使用情况的功能，如下图所示:
```
$ sudo docker stats a245253db38b
CONTAINER CPU % MEM USAGE/LIMIT MEM % NET I/O
a245253db38b 0.02% 16.37 MiB/992.5 MiB 1.65%
3.818 KiB/2.43 KiB  
```
您可以运行`stats`命令来查看多个容器的使用情况:
```
$ sudo docker stats a245253db38b f71b26cee2f1   
```
Docker 提供对容器统计数据*只读*参数的访问。这简化了容器的中央处理器、内存、网络输入输出和块输入输出。这有助于您选择资源限制，也有助于分析。Docker `stats`实用程序只为运行的容器提供这些资源使用细节。
## Docker 事件命令
Docker 容器将报告以下实时事件:`create`、`destroy`、`die`、`export`、`kill`、`omm`、`pause`、`restart`、`start`、`stop`和`unpause`。以下是几个说明如何使用这些命令的示例:
```
$ sudo docker pause a245253db38b
a245253db38b 
$ sudo docker ps -a
a245253db38b training/webapp:latest "python app.py" 
4 days ago Up 4 days (Paused) 0.0.0.0:5000->5000/tcp sad_sammet 
$ sudo docker unpause a245253db38b
a245253db38b 
$ sudo docker ps -a
a245253db38b training/webapp:latest "python app.py" 
4 days ago Up 4 days 0.0.0.0:5000->5000/tcpsad_sammet  
```
Docker 映像还将报告取消标记和删除事件。
多个过滤器的使用将作为“与”操作处理；例如，
`--filter container= a245253db38b --filter event=start`将显示容器`a245253db38b`的事件，事件类型为`start`。
目前，支持的过滤器是容器、事件和映像。
## Docker 日志命令
该命令在不登录容器的情况下获取容器的日志。它批量检索执行时出现的日志。这些日志是 stdout 和 stderr 的输出。一般用法见`docker logs [OPTIONS] CONTAINER`。
`-follow`选项将继续提供输出直到结束，`-t`将提供时间戳，`--tail= `将显示您的容器的日志消息的行数:
```
$ sudo docker logs a245253db38b
* Running on http://0.0.0.0:5000/
172.17.42.1 - - [22/Mar/2015 06:04:23] "GET / HTTP/1.1" 200 -
172.17.42.1 - - [24/Mar/2015 13:43:32] "GET / HTTP/1.1" 200 -
$ sudo docker logs -t a245253db38b
2015-03-22T05:03:16.866547111Z * Running on http://0.0.0.0:5000/
2015-03-22T06:04:23.349691099Z 172.17.42.1 - - [22/Mar/2015 06:04:23] "GET / HTTP/1.1" 200 -
2015-03-24T13:43:32.754295010Z 172.17.42.1 - - [24/Mar/2015 13:43:32] "GET / HTTP/1.1" 200 -  
```
我们还使用了[第 2 章](02.html)、*处理 Docker 容器*和[第 6 章](06.html)、*在容器中运行服务*中的`docker logs`实用程序来查看我们容器的日志。
## docker 附加命令
`docker attach`命令附加了正在运行的容器，当您想要实时查看 stdout 中写了什么时，它非常有用:
```
$ sudo docker run -d --name=newtest alpine /bin/sh -c "while true; do sleep 2; df -h; done"
Unable to find image 'alpine:latest' locally
latest: Pulling from library/alpine
3690ec4760f9: Pull complete 
Digest: sha256:1354db23ff5478120c980eca1611a51c9f2b88b61f24283ee8200bf9a54f2e5c
1825927d488bef7328a26556cfd72a54adeb3dd7deafb35e317de31e60c25d67
$ sudo docker attach newtest
Filesystem Size Used Available Use% Mounted on
none 7.7G 3.2G 4.1G 44% /
tmpfs 496.2M 0 496.2M 0% /dev
tmpfs 496.2M 0 496.2M 0% /sys/fs/cgroup
/dev/xvda1 7.7G 3.2G 4.1G 44% /etc/resolv.conf
/dev/xvda1 7.7G 3.2G 4.1G 44% /etc/hostname
/dev/xvda1 7.7G 3.2G 4.1G 44% /etc/hosts
shm 64.0M 0 64.0M 0% /dev/shm
tmpfs 496.2M 0 496.2M 0% /proc/sched_debug
Filesystem Size Used Available Use% Mounted on
none 7.7G 3.2G 4.1G 44% /
tmpfs 496.2M 0 496.2M 0% /dev
```
默认情况下，该命令将 stdin 和代理信号附加到远程进程。选项可用于控制这两种行为。若要从流程中分离，请使用默认的 *Ctrl* + *C* 序列。
## 调试文件
有时候，创建一个`Dockerfile`可能不是从一切工作开始的。一个`Dockerfile`并不总是建立映像，有时会，但是启动一个容器会在启动时崩溃。
我们在`Dockerfile`中设置的每一条指令都将被构建为另一条指令的单独的临时映像，以在前一条指令的基础上构建自身。以下示例对此进行了解释:
1.  使用您最喜欢的编辑器创建一个`Dockerfile`:
```
      FROM busybox 
      RUN ls -lh 
      CMD echo Hello world 
```
2.  现在，通过执行以下命令来构建映像:
```
 $ docker build .
 Sending build context to Docker daemon 2.048 kB
 Step 1 : FROM busybox
 latest: Pulling from library/busybox
 56bec22e3559: Pull complete 
 Digest: sha256:29f5d56d12684887bdfa50dcd29fc31eea4aaf4ad3bec43daf19026a7ce69912
 Status: Downloaded newer image for busybox:latest
 ---> e02e811dd08f
 Step 2 : RUN ls -lh
 ---> Running in 7b47d3c46cfa
 total 36
 drwxr-xr-x 2 root root 12.0K Oct 7 18:18 bin
 dr-xr-xr-x 130 root root 0 Nov 27 01:36 proc
 drwxr-xr-x 2 root root 4.0K Oct 7 18:18 root
 dr-xr-xr-x 13 root root 0 Nov 27 01:36 sys
 drwxrwxrwt 2 root root 4.0K Oct 7 18:18 tmp
 ---> ca5bea5887d6
 Removing intermediate container 7b47d3c46cfa
 Step 3 : CMD echo Hello world
 ---> Running in 490ecc3d10a9
 ---> 490d1c3eb782
 Removing intermediate container 490ecc3d10a9
 Successfully built 490d1c3eb782
 **$**  
```
注意`---> Running in 7b47d3c46cfa`线。`7b47d3c46cfa`是一个有效的映像，可以用来重试失败的指令，看看发生了什么
为了调试这个映像，我们需要创建一个容器，然后登录来分析错误。调试是一个分析正在发生的事情的过程，对于每种情况都是不同的，但是通常，我们开始调试的方式是尝试手动使失败的指令手动工作并理解错误。当我得到工作指令时，我通常会退出容器，更新我的`Dockerfile`，并重复这个过程，直到我有工作。
## 摘要
在本章中，您已经看到了使用 Linux 容器技术隔离容器，例如 LXC 和现在的 Libcontainer。Libcontainer 是 Docker 自己用 Go 编程语言实现的，用于访问内核命名空间和 cgroups。此命名空间用于进程级隔离，而 cgroups 用于限制正在运行的容器的资源使用。由于容器作为独立的进程直接在 Linux 内核上运行，**通用的** ( **GA** )调试工具并不适合在容器中调试容器化的进程。Docker 现在为您提供了一套丰富的工具来有效地调试容器以及容器内部的进程。`docker exec`命令将允许您登录容器，而无需在容器中运行 SSH 守护程序。在本章中，您已经看到了每个调试工具的细节。
`docker stats`命令提供关于容器内存和中央处理器使用的信息。`docker events`命令报告事件，如创建、销毁和杀死。类似地，`docker logs`命令从容器中获取日志，而不登录容器。
下一步，您可以尝试最新的微软 Visual Studio Docker 工具。它提供了一种在 Linux Docker 容器中开发和验证应用的一致方式。具体可参考[https://docs . Microsoft . com/en-us/azure/vs-azure-tools-docker-edit-refresh](https://docs.microsoft.com/en-us/azure/vs-azure-tools-docker-edit-and-refresh)。
另外，如果你想在 IDE (Visual Studio Code)中实时调试 Node.js 应用，试试这个博客:[https://blog.docker.com/2016/07/live-debugging-docker/](https://blog.docker.com/2016/07/live-debugging-docker/)。
下一章将阐述 Docker 容器看似合理的安全威胁，以及如何通过各种安全方法、自动化工具、最佳实践、关键准则和度量来抑制这些威胁。我们将讨论容器相对于虚拟机的安全性，以及 Docker 对第三方安全工具和实践的适应性。