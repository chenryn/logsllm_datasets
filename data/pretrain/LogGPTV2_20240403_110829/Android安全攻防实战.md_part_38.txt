显然，位于0x000084f8的BLX指令是调用printf函数的指令。若要跳过该指令，我们需要获取其后一条指令的地址，即0x000084fc。具体来说，需要向程序输入以下内容：
[16 padding chars]  \xfc\x84
鉴于目标处理器采用小端字节序，因此返回地址的字节必须以逆序方式给出。
8. 使用GDB server重新运行应用程序，并给它如下输入：

---

## 第8章 原生代码中的漏洞利用与分析

如果一切顺利，您会发现程序不再显示"you lose"的信息，而是直接退出了。

您不仅可以绕过一个简单的输出信息指令（或函数）。在某些情况下，甚至可以完全控制因执行有漏洞的程序而产生的进程。有关如何操作的更多信息，请参考扩展阅读部分的文章《面向返回的编程不返回》（Return-Oriented Programming without Returns），以及更一般的内存溢出攻击资源如《内存破坏攻击：几乎完整的历史指南》（The Memory Corruption Attacks: The (Almost) Complete History）和《粉碎栈的乐趣与收益》（Smashing the Stack for Fun and Profit）等文章链接。

### 扩展阅读
- ARM开发简短指南：http://www.exploit-db.com/wp-content/themes/exploit/docs/24493.pdf
- AlephOne撰写的《粉碎栈的乐趣与收益》：http://www.phrack.org/issues.html?issue=49&id=14#article
- Thinkst Security出版社于2010年出版的Haroon Meer所著《内存破坏攻击：几乎完整的历史指南》：http://thinkst.com/stuff/bh10/BlackHat-USA-2010-Meer-History-of-Memory-Corruption-Attacks-wp.pdf
- Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi等人发表的文章：http://cseweb.ucsd.edu/~hovav/dist/noret-ccs.pdf
- Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi, 和Marcel Winandy合著的《ARM上的面向返回编程不返回》：http://www.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_TRUST/PubsPDF/ROP-without-Retums-on-ARM.pdf

### 8.6 对Android原生代码进行自动Fuzz测试
Fuzzing是一种优秀的技术，用于发现系统应用程序中可被利用的漏洞或缺陷。通过这种方式，审计人员能够评估文件处理程序及其他应用对异常及潜在恶意输入的处理能力，从而帮助确定系统是否存在易受攻击的入口点。同时，这也是自动化安全测试的有效手段之一。

Android平台上有许多有趣的Fuzzing目标。实际上，在很多情况下，黑客能获得root权限往往是因为原生可执行文件或系统工具未能妥善处理特定输入或情况。本节将介绍如何在Android平台上使用名为Radamsa的Fuzzing工具，包括安装一些实用程序来帮助编写专为Radamsa设计的强大测试脚本。

#### 准备工作
开始之前，请先下载Radamsa Fuzzer并按以下步骤操作：
1. 确保你的Linux机器上已安装CURL或Wget。虽然仅Wget就足够了，但根据Radamsa官网建议，在Ubuntu系统上最好还是执行以下命令安装CURL：
   ```
   sudo apt-get install gcc curl
   ```
2. 安装完curl后，你可以下载Radamsa的源码：
   ```
   curl http://ouspg.googlecode.com/files/radamsa-0.3.tar.gz > radamsa-0.3.tar.gz
   ```
3. 解压Radamsa：
   ```
   tar -zxvf radamsa-0.3.tar.gz
   ```

完成以上步骤后，接下来可以设置jni目录结构并编译适用于Android版本的Radamsa。

#### 如何操作
为了交叉编译适用于Android的Radamsa，你需要按照以下步骤执行：
1. 在解压缩radamsa源码之后，你会看到一个名为`radamsa-0.3`的文件夹。在这个文件夹内创建一个名为`jni`的新目录。
2. 将“栈溢出漏洞利用”实验中使用的`Android.mk`文件复制到新创建的`jni`目录中。
3. 把包含Radamsa源码的`radamsa.c`文件也复制到`jni`目录里。
4. 再次确认`Android.mk`文件是否已正确放置在`jni`目录下。
5. 修改`Android.mk`文件内容至如下所示：
   ```
   LOCAL_PATH := $(call my-dir)
   include $(CLEAR_VARS)
   LOCAL_MODULE    := radamsa-0.3
   LOCAL_SRC_FILES := radamsa.c
   include $(BUILD_EXECUTABLE)
   ```
6. 编辑完成后，执行`ndk-build`命令尝试构建二进制可执行文件。如果遇到错误提示，则需进一步调整代码直至成功编译。
7. 打开`radamsa.c`文件（推荐使用支持行号显示的编辑器），定位到第3222行附近，检查并修正导致编译失败的问题。
8. 一旦解决了所有编译问题并且成功生成了二进制文件，即可将其传输至Android模拟器中进行测试。假设你已经设置好了一个挂载为可写状态的/system分区环境。

通过以上步骤，您可以有效地准备并运行针对Android设备的Fuzz测试案例，以发现潜在的安全弱点。