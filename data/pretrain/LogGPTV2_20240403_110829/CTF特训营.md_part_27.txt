---
## Page 341
CTF特训营：技术详解、解题方法与
11.4常见利用方法
341/1144
图11-4原始rop示意图
执行完gadget1，通过ret返回，进入gadget2，从而使得所有的
gadget得到有序执行。
为了简化rop的实现，很多时候有很多libc库函数可以直接利用
从而出现了ret2libc。在CTF比赛中，大部分情况都是直接利用已有的
很多函数来构造rop。
参照12.1.2节的传参规则，两类rop的形式分别如下
Linuxx64下rop构造示意图如图11-5所示
Linuxx86下rop构造示意图如图11-6所示。
rsp
gadget1
->poprdi;ret
低地址
argo
gadget2
->poprsi;ret
arg1
......
target_func
->target_fun(rdi,rsi,...)
高地址
......
---
## Page 342
CTF特训营：技术详解、解题方法与
11.4常见利用方法
342/1144
图11-5x64架构rop示意图
esp
func_ptr
低地址
p_ret
arg1
func_ptr(arg1,arg2,...)
arg2
func_ptr
p_ret
arg1
高地址
arg2
图11-6x86架构rop示意图
其中，func_ptr是一些要调用的函数的地址，而arg1、arg2...则
是该函数所需要的参数，p_ret是一些popret的gadget地址，gadget的
形式如popeax、popebx、ret。pop的个数和参数保持一致。rop的原
理与函数栈的实现机制有关，具体见第12章中的函数栈。其他架构
系统可根据函数调用时参数的传递规则来具体构造。
---
## Page 343
CTF特训营：技术详解、解题方法与
11.4常见利用方法
343/1144
3.Magic_Addr
Magic_Addr（又称One_gadget）是指专门通过一个地址获取
shell的地址，一般位于system函数的实现代码中（可以参考david942j
的one_gadget，GitHub上已经发布了查找one_gadget的工具），此时
需要根据具体情况进行调试。
在libc的system函数中，有多处调用了execve（"/bin/sh"，"sh"，env）
函数对应的反编译代码和反汇编代码，如图11-7和图11-8所示。
if（u7）
u25 ="sh";
u26 ="-c";
u28=0;
u27=v21;
sigaction(2);
sigaction(3);
sigprocmask（2，&u29,0）；
dword_1AA620=0;
dw0rd_1AA624=0;
execue(/bin/sh"，&u25，enuiron);
exit(127);
图11-7system调用反编译代码
---
## Page 344
CTF特训营：技术详解、解题方法与
11.4常见利用方法
344/1144
.text:0003E6A3
noU
eax,ds:（environ_ptr_0-1A9oeoh)[ebx]
.text:0003E6A9
nOU
ds:（duord_1AA620-1A900h)[ebx].0
.text:0003E6B3
ROU
ds:(duord_1AA624-1A9008h)[ebx]，0
.text:0003E6BD
ROV
eax,[eax]
text:0003E6BF
nOU
[esp+16ch+uar_164],eax
text:0003E6C3
lea
eax,[esp+16ch+uar_138]
text:0003E6C7
ROV
[esp+16ch+uar_168],eax
text:0003E6CB
lea
eax,（aBinSh -1A9oeh）[ebx];“/bin/sh
text:0003E6D1
ROU
[esp+16ch+status], eax
text:0003E6D4
call
[esp+16ch+status],7Fh; status
text:0003E6D9
ROU
.text:0003E6E0
call
_exit
图11-8
3system调用反汇编代码
关于定位，可使用one-gadget工具进行分析，也可以参考更为详
细的资料，如{HCTF-2016}5-days的官方writeup。
4.Return-to-dlresolve
核心思想是利用_dl_runtime_resolve函数解析出system函数的地
址，通常在没有提供libc库的情况下使用。
其适用情况需要满足如下三个条件
未给出libc库。
没有开启PIE保护，如果开启了PIE保护，则还需要通过泄露获
取基地址。
没有开启FULLRELRO。
---
## Page 345
CTF特训营：技术详解、解题方法与..
11.4常见利用方法
345/1144
_d_runtime_resolve函数定义在glibc源码的sysdeps/i386/dl-
trampoline.S中，其中调用了_dl_fixup；_dl_fixup函数定义在elf/dl-
runtime.c中，其代码中使用了各种宏，因此可读性较差，如图11-9所
示。
iFdef ELF MACHINERUNTIMEFIXUPARGS
dl_fixup（
ELF_MACHINE_RUNTIME_FIXUP_ARGS,
endif
struct link_map *l,Elfw(Word) reloc_arg)
=（const void *）D_PTR （1,1_info[DT_SYMTAB]）;
const PLTREL *const reloc
=（const void *）（D_PTR （1,1_info[DT_JMPREL]）+reloc_offset）;
void *const rel_addr=（void *)(1->1_addr +reloc->r_offset);
const ElfW（Sym）*aym=6symtab[ELFW（R_SYM）（reloc->r_info）];
lookup_t result;
DL_FIXUP_VALUE_TYPE value;
/*Sanity check that we're really looking at a PLT relocation.*/
asSert (ELEW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT) ;
图11-9_d_fixup函数定义
该利用方法需要用到elIf结构的动态节信息，如SYMTAB
STRTAB、JMPREL、VERSYM，可通过readelf-d./proc命令查看这几
个信息，如图11-10所示。
---
## Page 346
CTF特训营：技术详解、解题方法与
11.4常见利用方法
346/1144
Dynamicsection at offset 0x6f8 contains24entries:
标记
类型
名称/值
0x0000000000000001
(NEEDED)
共享库：[libc.so.6]
0x000000000000000c
(INIT)
0x4003a8
0x000000000000000d
(FINI)
0x4005a4
0x0000000000000019
（INIT_ARRAY)
0x6006e0
0x000000000000001b
(INIT_ARRAYSZ)
8(bytes)
0x000000000000001a
(FINI_ARRAY)
0x6006e8
0x000000000000001c
(FINI_ARRAYSZ)
8(bytes)
0x0o0o0ooo6ffffef5
(GNU_HASH)
0x400260
0x0000000000000005
(STRTAB)
0x4002e0
0x0000000000000006
(SYMTAB)
0x400280
0x000000000000000a
(STRSZ)
61(bytes)
0x00000000000000ob
(SYMENT)
24(bytes)
0x0000000000000015
(DEBUG)
0x0
0x0000000000000003
(PLTGOT)
0x6008d0
0x0000000000000002
(PLTRELSZ)
72(bytes)
0x0000000000000014
(PLTREL)
RELA
0x0000000000000017
(JMPREL)
0x400360
0x0000000000000007
(RELA)
0x400348
0x0000000000000008
(RELASZ)
24(bytes)
0x0000000000000009
(RELAENT)
24(bytes)
0x0o0ooooo6ffffffe
(VERNEED)
0x400328
0x0o0o0o0o6fffffff
(VERNEEDNUM)
1
0xoooooooo6ffffffe
(VERSYM)
0x40031e
0x0000000000000000
（NULL）
0x0
图11-10elf文件动态节信息
(1）SYMTAB
SYMTAB中为EIfSym的数组，代码如下：
classElifSym(vstruct.VStruct):
def_init（self,bits=32）:
super(EifSym,self).init()
if bits ==32:
self.st_name=v_uint32()
---
## Page 347
CTF特训营：技术详解、解题方法与
11.4常见利用方法
347/1144
self.st_value=v_uint32()
self.st_size =v_uint32()
self.stinfo=ElfStlnfo()#8bit
self.st_other =v_uint8()
self.st_shndx=V_uint16(enum=ST_NDx)
else:
self.st name=v uint32()
self.st_info=ElfStlnfo()#8bit
self.st_other = v_uint8()
self.stshndx=v_uint16（enum=ST_NDX)
self.st_value =v_uint64()
self.st_size =v_uint64()
(2)JMPREL
对应的类型可分为两种，32位通常为ElfRe类型的数组，64位通
常为ElfRela类型的数组，代码如下：
classEifRel(vstruct.VStruct):
definit（self,bits=32):
super(EifRel,self)._init()
if bits ==32:
self.r_offset = v_uint32()
self.r_info= ElfRlnfo()#32 bit
else:
self.r_offset =v_uint64()
self.r info=ElfRlnfo（)#64bit
class EifRela(vstruct.VStruct):
definit_（self，bits=32):
super(EifRela,self).init()
if bits ==32:
self.r_offset=v_uint32()
self.r info=ElfRlnfo()#32bit
self.r_append = v_uint32()
else:
self.r_offset =v_uint64()
---
## Page 348
CTF特训营：技术详解、解题方法与
11.4常见利用方法
348/1144
self.r_info = EifRlnfo()#64 bit
self.r_append = v_uint64()
(3)STRTAB
STRTAB中为具体的字符串。EIfSym中的st_name为在STRTAB
中的偏移。
(4)VERSYM
每2字节为一项，对应每个符号的版本信息，通常为0、1、2。
dfixup的伪代码（64位下的）具体如下：
def d_fixup(link_map,index):
relro=jmprel+0x18*index
r_sym=|32(relro[12:16])
sym=symtab+0x18*r_sym
assert（I8(relro[4:8])==7)/TYPE
if(18(sym[5:6])&3==0)
//aboutvernum
if (Il->l_info[VERSYMIDX(DT_VERSYM)] !=NULL)/ link_map+Ox1c8
constEifW(Half)*vernum=
（constvoid*)D_PTR（I,Iinfo[VERSYMIDX（DT_VERSYM)]);
EIfW(Half) ndx=vernum[ELFW(R_SYM)(reloc->r_info)]&Ox7fff;
_d_lookup_symbol_x(strtab+l32(sym[0:4])
当能控制程序向bss区域写任意内容时，通过index值，可以将伪
---
## Page 349
CTF特训营：技术详解、解题方法与
11.4常见利用方法
349/1144
造的relro结构放到bss上。通过设置relro中的第12～16字节，可以将
伪造的sym结构放到bss上。为了到达符号解析处，还需要满足：
(18(relro[4:8])==7)
(18(sym[5:6]&3== 0)
最后，程序要获取对应符号的vermum，大致为读取内存versym
+2*r_sym的值。在64位系统中，这个地址通常为无效内存地址，因
此会发生段错误。这里有两种办法绕过，具体如下。
1）修改link_map+0x1c8为0，使程序不进入i循环。不过这种方
法的前提是需要泄露出link_map的地址，在aslr的系统中，link_map
的地址是不固定的。
2）修改动态节中versym的值。动态节位于数据段中，动态节是
否具有写权限与编译有关。
RELROPartial动态节将位于只读内存中，不可改写。
未开启任何RELRO，具有写权限。
roputils（在GitHub上可以下载）中已经封装了对dl_resolve方法
的利用模块（ROP），主要涉及如下两个函数：
---
## Page 350
CTF特训营：技术详解、解题方法与
11.4常见利用方法
350/1144
d_resolve_callself,base,*args)
d_resolve_data(self,base,name)
其中，将要解析的libc函数名称name以及伪造的结构体位置base
传给d_resolve_data函数，将生成的数据写入base处，再调用
dl_resolve_call函数即可，其参数是伪造的结构体位置base和libc函数
参数。下面举例说明。
通过栈转移后在bss上执行rop，以下Payload存在于bss的
target_addr上，当前rsp即为target_addr，以下代码即可用于执行
system(/bin/sh"):
payload =
payload += rop.dl_resolve_calltarget_addr + 0x30, target_addr + 0x20)
payload=payload.ljust(0x20,x00)
payload += rop.string(/bin/shlx00").ljust(0x10,'a)
payload += rop.d_resolve_data(target_addr + 0x30, 'system)
具体请参见真题解析11.6。
---
## Page 351
CTF特训营：技术详解、解题方法与
11.5程序内存布局
351/1144
11.5程序内存布局
程序启动时，加载器会将程序文件数据加载到内存里，在运行过
程中，程序也会开辟部分动态内存。在程序运行的生命周期中，内存