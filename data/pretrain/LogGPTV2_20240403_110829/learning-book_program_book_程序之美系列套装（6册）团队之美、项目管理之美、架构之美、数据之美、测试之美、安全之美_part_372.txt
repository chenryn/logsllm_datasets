1.5个质量保证工程师与8个正在快速开发新特性的开发人员。像任
何其他项目一样，质量保证是绝对必要的，我们有手工测试、而自
动化测试则是我们想要的但是没有时间或资源来实现的事情之一。
2126
---
## Page 2128
我们设法做到花一小部分时间致力于一些非常简明的需求：快速高
效地编写和编辑测试、应用程序所有主要特性的覆盖率，以及用于
支持现有持续集成软件的特性和兼容性。
备注
测试用例：编辑摘要—输入第二个摘要
图21-2Windmill集成开发环境截图
测试编写速度方面的提高是和录制器紧密相关的。录制器会产生
JavaScript对象符号（JavaScriptObjectNotation,JSON）字符串然后将
之转储至一个文件。随着测试动作变得越来越复杂，我们改为使用
Python和JavaScript，并构建了一些工具以便将录制下来的动作和套
件转换成Python和JavaScript，同时也支持为其他语言增加转换器。
Python和JavaScript均在它们各自独特的优势之外提供了安装和卸载
工具，这一点在项目网站的文档中有所概述。
Windmill录制器相比于多数录制工具更鼓励另一种工作流。动作会通
过一种更鼓励编辑的方式被添加到你正在使用的套件中。一个动作
是由一个简单的可编辑表单来描述（图21-3），而其中每个不同的
2127
---
## Page 2129
选项都有一个被录制器填充过的下拉框或文本框，使得你在整个过
程中可以容易地改变和执行它们。
备注
测试用例：编辑摘要
输人第二个摘要
图21-3一个断言动作
构建一个录制工具的第一步是：要认识到有一半的几率它录制的东
西并非用户想要的，但仍需要为用户提供一些值以促使他们来纠
正。
这种不断编辑的概念同样适用于播放特性。即使你正在第50次构建
或运行测试那也没关系，你可以改变一些值并重放这些动作、套件
或整个测试，看看会发生什么。往往超过预期地，用户会在验证自
已产品的测试运行了一半的时候，发现少了一个工作流，或应用程
序中有些东西改动过了但却不是个缺陷。你只需要停止播放，录制
新的工作流，并保存到文件系统。这减少了调试、编辑和发展你测
试库的障碍。
2128
---
## Page 2130
如前所述，难题的另一部分是以一种你可以存储且以后再运行的方
式来保存这些新创建或编辑过的测试。保存它们所用的格式在
Windmill设置中是可配置的（图21-4）。
备注
测试用例：编辑摘要
输人第二个摘要
图21-4保存设置
2129
---
## Page 2131
保存测试可以通过点击套件的保存按钮
来完成。Python和JavaScript测试的例子请参看例21-1和例21-2。
虽然构建和保存测试很重要，但是编辑和调试才是你浪费大量时间
的地方。Windmill使得你能通过loadtest命令行参数将测试加载回
WindmillIDE中（例21-3）。这将会构建每一个动作但并不会执行它
们，这样你就可以逐个把它们排查一遍，看哪些动作失败了并查找
原因。
最后一个我们要解决的是在持续集成中运行的能力，像大多数工程
滩题最终都出乎意料地变得比我们预期的要复杂一样。这里的需求
包括可靠地启动和停止浏览器，从测试运行中返回正确的错误代
码，以及提供当问题出现时在运行中终止测试的特性。
知道一个测试为什么失败比知道它失败了要有用得多，并且随着时
间的推移报告功能已经变得更加完整，而用于启动浏览器的代码稳
2130
---
## Page 2132
定性也是如此。目前Windmill已经能与Buildbot和Hudson一起运行，
并有完备的文档说明如何安装。
Cosmo网页用户界面拥有丰富的拖拽功能，使得用户能够操纵自己
的日程安排，这也是我所见过的最美丽的网页演示之一。幸运的
是，这样的美足以使Windmill赢取更多青睐，让我们的质量保证人员
花更多精力来测试应用程序，进而使得许多缺陷被记录和修复。那
些专注的时间的一部分也被用来修复在Windmill中发现的很多社区缺
陷，以及编写文档。
例21-1：Python测试语法示例
#Generated by the windmill services transformer
from windmill.authoring import WindmillTestClient
def test_googletestO:
client=WindmillTestClient(__name_)
client.click(name=u'q')
client.type(text=u'test',name=u'q)
client.click(name=u'btnG)
client.waits.forPageLoad(timeout=u'20000')
client.waits.forElement(linku'Test.com Web Based Testing',timeout=u
'8000')
client.click(link=u'Test.com Web Based Testing)
client.waits.forPageLoad(timeoutu '20000")
例21-2：JavaScript测试语法示例
//Generatedby the windmillservices transformer
2131
---
## Page 2133
var test_googletest=new functionO{
this.test_actions=[
{"params": ("name":"btnG"),"method":"click"},
{"params": {"timeout":"20000"),"method":"waits.forPageLoad"},
{"params": {"link":"Test.com Web Based Testing","timeout":"8000"},
"method":"waits.forElement"},
{"params": {"link":"Test.com Web Based Testing"},"method":"click"},
{"params": {"timeout":"20000"},"method":"waits.forPageLoad"}
1
运行测试
Windmill提供了一个命令行界面（command-lineinterface,CLI）用于
加载、运行和调试测试。它还有一个可用于调试和允许更多Python与
JavaScript交互的shell界面（如图21-5）。另外，Windmill还支持从
Python调试器（PythonDebugger,PDB）进行调试。
2132
---
## Page 2134
图21-5Windmillshell截图
Python和JavaScript的测试可以以两种方式从命令行中运行。第一种
是直接通过命令行参数，第二种是通过Windmillshell。命令行（例
21-3和例21-5）多用于快速启动一次测试运行，在日常测试运行和持
续集成（continuousintegration,CI）的时候较为常用。shell模式（例
试的函数，在调试的时候非常有用。
随着测试变得越来越复杂，我们意识到对于安装和卸载层次结构的
道切需要。当你有一个应用程序需要认证而在结束时再注销的时
候，手工重复将变得难以维护。
例21-3：通过CLI来执行和加载Python测试的例子
Running:windmill'browserurl'test=test_fle.py(or a directory)
2133
---
## Page 2135
Loading:windmill'browserurl'loadtest=test_fle.py(or a directory)
Ex.windmill frefox http://www.google.com test=test_googlesearch.py
例21-4：通过shell来执行和加载Python测试的例子
windmill shell'browserurl'
Running:At the prompt,In[1]:run_test('path/to/test_fle.py)
Loading:At the prompt,In[1]:load_test('path/to/test_fle.py')
JavaScript测试是按照目录层次结构来运行的，所以你会需要创建一
个目录然后把你所有的保存的JavaScript测试都放在里面。它们既可
以从CLI（例21-5）也可以从Windmillshell（例21-6）来执行。此
外，JavaScript测试还有一些CLI可选参数，包括jsfilter和jsphase。它
们可以用来指定目录文件中需要运行的测试函数子集。
例21-5：通过CLI来执行JavaScript测试的例子
windmill'browserurl'jsdir=js_tests_dir
ex.windmill frefox http://www.google.com jsdir=js_tests_dir
例21-6：通过shell来执行JavaScript测试的例子
windmill shell'browserurl'
Running:At prompt,In[1]:run_js_tests(/path/to/js_tests_dir)
调试测试
Windmill最突出的调试功能是能够从shell直接执行Windmill动作。这
让你可以在根本不触碰浏览器的情况下仍能控制它（例21-7）。
2134
---
## Page 2136
例21-7：与浏览器交互的Shell会话示例
zsh%windmil1 shell frefox http://www.google.com
(Start the Windmill server in shell mode)
Started[/Applications/Firefox.app/Contents/MacOS/frefox-bin','-profle'
/var/folders/YO/YOAvf2hSGt0+VnBIAKulmE+++TM/-
Tmp-/tmpy0xq6y.mozrunner',
http://www.google.com/windmill-serv/start.html]
(Windmill output telling you what was launched and from where)
In[1]:fromwindmill.authoringimportWindmillTestClient
(Import the Windmill Test Client)
In[2]:client=WindmillITestClient(_name)
(Access the Windmill client)
In[3]:client.click(name=u"q")
(Click on a DOM node in the browser with a name attribute of'q")
Out[3]:{u'endtime':u'2009-3-9T18:1:3.813Z,
u'method':u'click,
uoN:ndno, n
u'params': {u'name':u′q',u'uid':u'101d4630-256b-11de-b49f-
002332da2796'}，
u'result':True,
u'starttime':u'2009-3-9T18:1:3.811Z
u'suite_name':u'windmill.bin.shell_objects',
2135
---