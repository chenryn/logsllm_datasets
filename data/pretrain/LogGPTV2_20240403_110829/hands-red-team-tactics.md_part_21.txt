# Dumb Pipe Redirection

To configure a dumb pipe redirector that will redirect to our C2 on port 8080/tcp, execute the command shown in the following image:

![](media/image710.jpeg)

Source: [https://payatu.com/wp-content/uploads/2018/08/dumb_pipe_redirection123.png](https://payatu.com/wp-content/uploads/2018/08/dumb_pipe_redirection123.png)

The following commands can be used to perform dumb pipe redirection using `iptables`:

```bash
iptables -I INPUT -p tcp -m tcp --dport 8080 -j ACCEPT
iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 54.166.109.171:8080
iptables -t nat -A POSTROUTING -j MASQUERADE
iptables -I FORWARD -j ACCEPT
iptables -P FORWARD ACCEPT
sysctl net.ipv4.ip_forward=1
```

Execute these commands, and the result is shown in the following screenshot:

![](media/image712.jpeg)

(Note: Ignore the sudo error, which occurred due to the hostname change.)

Using `socat` or `iptables`, the result would be the same: the network traffic on the redirector's interface will be forwarded to our C2.

# Filtration/Smart Redirection

Filtration redirection, also known as **smart redirection**, does not just blindly forward network traffic to the C2. Instead, it processes the network traffic based on predefined rules before forwarding it. If the C2 traffic is invalid, the traffic will either be forwarded to a legitimate website or dropped. Only valid traffic for our C2 will be redirected accordingly.

![](media/image713.jpeg)

To configure smart redirection, we need to install and configure a web service. Let's install Apache server on the redirector using the following command:

```bash
sudo apt install apache2
```

![](media/image714.jpeg)

Next, execute the following commands to enable Apache modules and SSL:

```bash
sudo apt-get install apache2
sudo a2enmod ssl rewrite proxy proxy_http
sudo a2ensite default-ssl.conf
sudo service apache2 restart
```

![](media/image715.jpeg)

We also need to configure Apache from its configuration file. Look for the `Directory` directive and change the `AllowOverride` setting from `None` to `All` to use a custom `.htaccess` file for web request filtration.

![](media/image716.jpeg)
![](media/image717.png)

Now, set up the virtual host settings and add them to `/etc/apache2/sites-enabled/default-ssl.conf`:

![](media/image718.jpeg)

After this, generate the payload with a domain such as `wwwpacktpub.tk` to get a connection.

# Domain Fronting

According to [https://resources.infosecinstitute.com/domain-fronting/](https://resources.infosecinstitute.com/domain-fronting/), domain fronting is a technique designed to circumvent censorship by using different domain names at different layers of an HTTPS request. To censors, it appears as if the communication is happening between the client and a permitted domain, but in reality, it may be happening between the client and a blocked domain.

![](media/image719.jpeg)

To start with domain fronting, we need a domain similar to our target organization. Use the `domainhunter` tool to find such domains. First, clone the repository and install the required Python packages:

```bash
pip install -r requirements.txt
python domainhunter.py
```

![](media/image720.jpeg)
![](media/image721.png)

By default, the tool fetches expired and deleted domains. Check the help option to see how to use `domainhunter`:

![](media/image723.jpeg)

Search for a keyword to find related domains. For example, use `packtpub` as the keyword:

![](media/image724.png)

Confirm the availability of the domain at domain searching websites:

![](media/image725.jpeg)
![](media/image726.jpeg)

If the domain is available, register it. For example, `wwwpacktpub.tk` is free to register:

![](media/image727.jpeg)
![](media/image728.jpeg)
![](media/image729.jpeg)

Set the redirector's IP address in the DNS field and confirm the purchase:

![](media/image730.jpeg)
![](media/image731.jpeg)
![](media/image732.jpeg)

Use the `dig` command to confirm ownership:

![](media/image733.jpeg)

With the domain confirmed, set it in the stager creation to get the back connection from `wwwpacktpub.tk`.

Domain fronting can also be done using Cloudflare and other cloud network platforms. In the next chapter, we will focus on different techniques for exfiltrating data from a target server.

# Summary

In this chapter, we introduced redirectors and the importance of obfuscating C2s. We covered how to obfuscate C2s securely to protect them from detection by the Blue team. We also discussed short-term and long-term C2s and redirectors. Additionally, we learned about dumb pipe redirection and smart redirection. Finally, we saw how to obtain a domain similar to `http://packtpub.com` and use it for further anonymity.

# Questions

1. Can we use a Microsoft Windows-based redirector instead of a Linux-based one?
2. Why should we configure and install our own redirector when we can use a compromised server for the same job?
3. Is it mandatory to use the Apache Web server for smart redirection?
4. Is it legal to buy a domain similar to an organization's domain for an engagement?
5. Can we set up redirectors on AWS?

# Further Reading

For more information on the topics discussed in this chapter, please visit the following links:
- [https://www.securityartwork.es/2017/01/31/simple-domain-fronting-poc-with-gae-c2-server/](https://www.securityartwork.es/2017/01/31/simple-domain-fronting-poc-with-gae-c2-server/)
- [https://theobsidiantower.com/2017/07/24/d0a7cfceedc42bdf3a36f2926bd52863ef28befc.html](https://theobsidiantower.com/2017/07/24/d0a7cfceedc42bdf3a36f2926bd52863ef28befc.html)

# Achieving Persistence

In the previous chapters, we looked at different ways to gain a reverse shell on a system and tools like Empire for privilege escalation. The next step is achieving and maintaining persistent access to systems. This is especially important when there is a Blue team trying to detect and prevent red team attacks.

Persistence can be achieved in two major ways:
- **Disk persistence**: This involves writing files to the victim's physical drive, which is less recommended due to the risk of detection.
- **In-memory or fileless persistence**: This technique executes payloads without writing anything to the disk, making it harder to detect.

In this chapter, we will cover:
- Persistence via Armitage
- Persistence via Empire
- Persistence using Cobalt Strike

# Technical Requirements

- Metasploit Framework (MSF)
- PGSQL (Postgres)
- Oracle Java 1.7 or above
- Cobalt Strike
- Empire
- Armitage

# Persistence via Armitage

We have already covered some Windows exploitation scripts in previous chapters. To find available exploits, search for the keyword "persistence" in Armitage. Some of the available exploits include:
- `cron_persistence`: Works on *nix-based systems and creates a cron job.
- `registry_persistence`: Creates a payload that runs on user logon or system startup.
- `vss_persistence`: Creates a persistent payload in a new volume shadow copy.
- `wmi_persistence`: Creates a WMI event subscription for fileless persistence.

![](media/image735.jpeg)

Let's try using `wmi_persistence`. This module uses one of the following methods for persistence:
- **EVENT method**: Triggers the payload on a specific event ID.
- **INTERVAL method**: Executes the payload after a specified interval.
- **LOGON method**: Runs the payload after a successful uptime.
- **PROCESS method**: Triggers the payload when a specified process starts.
- **WAITFOR method**: Uses `waitfor.exe` to wait for a signal before executing the payload.

![](media/image736.jpeg)

When we double-click on the `wmi_persistence` option, it opens a new window. Change the persistence method to `PROCESS` and set the process trigger to `CALC.exe`. Whenever the calculator is opened, we will get a reverse connection on our Armitage server.

![](media/image737.jpeg)
![](media/image738.jpeg)
![](media/image739.jpeg)

# Persistence via Empire

Empire has many inbuilt modules for persistence, divided into four main areas:
- **PowerBreach**: In-memory PowerShell backdoors.
- **userland**: Backdoors that execute on reboot without admin rights.
- **elevated**: Backdoors that execute on reboot with admin rights.
- **debugger triggers**: Backdoors that execute on a specific trigger.

## For Windows

Assuming we have an agent connected on our Empire from a Windows machine:

![](media/image740.jpeg)

To view available persistence modules, interact with the agent using the `interact` command and type `usemodule persistence` followed by `Tab` to list all available modules.

![](media/image741.jpeg)
![](media/image742.jpeg)
![](media/image743.jpeg)

Let's use the `backdoor_lnk` module. Set the listener name and the path of any shortcut icon on the victim's system.

![](media/image744.jpeg)
![](media/image745.jpeg)

On the victim's computer, the shortcut icon's properties will show the target value changed to a PowerShell payload. When the victim opens Chrome from this shortcut, our payload will be executed alongside it.

![](media/image746.jpeg)
![](media/image747.jpeg)

Another example is the `schtasks` module, which requires system-level privileges and creates a scheduled task to run the payload periodically.

![](media/image748.jpeg)
![](media/image749.jpeg)

## For macOS

Just as we did for Windows, we have persistence modules for macOS. Assuming we have a macOS agent connected:

![](media/image750.jpeg)
![](media/image751.jpeg)

Run the `usemodule persistence` command and press `Tab` to see all available modules. Let's use the `osx/loginhook` command.