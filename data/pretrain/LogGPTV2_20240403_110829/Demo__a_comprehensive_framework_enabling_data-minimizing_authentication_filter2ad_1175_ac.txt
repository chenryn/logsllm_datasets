the ‘where’ keyword in terms of a Boolean expression. Beside the
standard operators of logics (∧, ∨ and ¬), also equality, inequal-
ity (6=, >, etc.) and arithmetic operators may be applied to ex-
pressions. Expressions may further be (1) attributes qualiﬁed with
the ID of a previously declared credential (e.g., dl.issueDate),
(2) constants of data type String, Boolean, Date (e.g., 1984/01/01),
Float and Duration (e.g., P3Y represents a period of three years),
as well as (3) function calls with expressions as arguments. A type
system equivalent to the one of CARL [9, Appendix C] ensures that
the predicates are type correct w.r.t. the data types deﬁned in the
credentials’ types and the function deﬁnitions. The message to sign
is given after the ‘i sign’ keyword. It must be a constant expression
that evaluates to data type string. To disclose a list of terms to a
third party, the ‘i reveal’ keyword is used. Although CARL also
provides syntax to address limited credential spending, we do not
consider this concept here. Consider the following example claim:
01: i own dl ::DriversLicense issued-by DeptMotorVehicles
02: i own mc::MemberShipCard issued-by CarRentalCo
03: i own cc::CreditCard issued-by Visa
04: i own li ::LiabilityInsurance issued-by InsuranceCo
05: where dl.issueDate ≤ dateSubtrDuration (today (), P 3Y ) ∧
06:
li.guaranteedAmoutUSD ≥ 30.000 ∧
mc.status == ‘silver’ ∧ dl.name == li.name ∧
cc.number == ‘1234 5678 9012 3456’
07:
08:
09: i reveal li .pNo to EscrowAgent under ‘in case of damage’
10: i sign ‘I agree with the general terms and conditions.’
This claim is one possible counterpart to the policy given in Sec-
tion 3.1. Its intent is to fulﬁll the choices given in the policy with a
visa credit card and a membership card of silver status. Addition-
ally, a concrete credit card number is revealed. The functions and
their interpretations are speciﬁed in an ontology that is commonly
agreed upon by the user and the server.
Note that the example claim reveals that the membership status
is silver, rather than just saying that it is silver or gold. In general,
the latter would be preferable, however, current implementations
do not yet allow to prove disjunctive statements (cf. Section 5).
Further note that the user may be involved in the selection of the
most desirable claim in case (1) multiple credentials are possible to
use according to policy (e.g., multiple credit cards), or (2) multiple
claims result from one assertion, e.g., because a credential technol-
ogy does not support disjunctive statements.
4.3 Claim Generation
When a user u receives the policy applicable to her authentica-
tion request (cf. Step 2 in Figure 1), is has to be determined which
claims can be made w.r.t. her credential portfolio Pu. To do so,
the possible options of assigning credentials from Pu to all of the
credential variables occurring in the policy are calculated. We call
one such option a credential assignment. An important aspect of
the claim generation component is to determine all possible cre-
dential assignments of a user for a given policy. This is to enable
the user to select the most privacy-preserving assignment. In case
Claim = PrfOfOs+ [‘where‘ Exp] Discl∗ [‘i sign‘ Exp] ;
PrfOfOs = ‘i own‘ CredVar ‘::‘ URI ‘issued-by‘ URI ;
Discl = ‘i reveal‘ Term (‘, ‘ Term)∗ ‘to‘ URI ;
CredVar = ID ;
AttrVar = CredVar ‘.‘ ID ;
Term = AttrVar
| String | Float | Date | Bool | Duration ;
Exp = DisjExp ;
DisjExp = ConjExp (‘∨‘ ConjExp)∗ ;
ConjExp = EquExp (‘∧‘ EquExp)∗ ;
EquExp = InEquExp (‘ == ‘ InEquExp)∗ ;
InEquExp = AddExp ((‘6=‘ | ‘‘ | ‘≤‘ | ‘≥‘) AddExp)∗;
AddExp = MultExp ((‘+‘ | ‘−‘) MultExp)∗ ;
MultExp = NegExp ((‘·‘ | ‘÷‘) NegExp)∗ ;
NegExp = [‘¬‘] SigExp ;
SigExp = [‘+‘ | ‘−‘] PrimExp ;
PrimExp = ‘(‘ Exp ‘)‘
| Term
|
ID ‘(‘ [Exp (‘, ‘ Exp)∗] ‘)‘ ;
ID = Alpha Alphanum∗ ;
Alpha and Alphanum are alphabetic and alphanumeric characters.
The URI after the ‘issued-by’ keyword must map to a identiﬁer that
the underlying credential technology can resolve. The URI ater the
‘::’ keyword must map to a credential type. IDs must be different
from the used keywords.
Figure 3: Claim Language Grammar
no credential assignments are found, the user’s credentials are not
sufﬁcient to fulﬁll the policy.
Every credential assignment found by above mentioned algo-
rithm is then transformed into a claim. The transformation, how-
ever, is dependent on the technologies of the assignment’s creden-
tials. This is due to the varying capabilities the different credential
technologies have (cf. Section 3.3). In case all credentials in the as-
signment are of the same technology, the assignment is transformed
to a technology-speciﬁc claim according to the idemix and U-Prove
restrictions given in the following subsections, respectively. In gen-
eral it is possible to also support the case where the assignment’s
credentials are of different technologies. However, in this work this
is out of scope.
4.3.1 Idemix Claim Restrictions
To generate the claims for which evidence shall be generated
with idemix, one has to account for its capabilities. The current
implementation of idemix supports most of the possible claim state-
ments. With the extension to the proof speciﬁcation we discuss in
this paper, we are able to support all statements except those that
contain disjunctive expressions (cf. Tables 1 and 2). Thus, when
generating a claim for which evidence with idemix shall be gener-
ated, one has to proceed as follows. The policy’s predicate is ﬁrst
transformed to disjunctive normal form (DNF) and separate claims
are generated for all monomials (also called conjunctive clauses,
or conjunctions of literals) of the DNF that (a) hold with respect
to the given credential assignment, and (b) resemble the given pol-
icy (apart from the predicate being only the monomial, not the full
predicate).
It can assumed that at least one of those monomials
holds, otherwise the assignment ﬁnder component would not have
produced this assignment. Clearly, using a monomial of the predi-
18cate’s DNF as predicate in the claim is less privacy-preserving than
stating the full predicate as it is disclosed which disjunct is proven.
For creating a claim that resembles a policy, put simply, a ‘copy’
of the policy is used as claim and the constraints on the claim lan-
guage as deﬁned in Section 4.2 are enforced. According to those
constraints, every credential declaration must have exactly one is-
suer. This issuer is unambiguously deﬁned as the issuer of the cre-
dential that is assigned to the corresponding credential variable via
the credential assignment. Further, all attributes, for which a disclo-
sure request exists in the policy, are disclosed by adding an equality
expression between the corresponding attribute and its value as ad-
ditional conjunct to the monomial.
4.3.2 U-Prove Claim Restrictions
The latest speciﬁcation of U-Prove [16] allows for selective dis-
closure of attributes, signing messages, and proof of ownership, but
does not support features such as predicate proofs and disclosure to
third parties (cf. Tables 1 and 2). A policy that includes predicates
over attributes or disclosure to third parties, can be fulﬁlled if all
these attributes are fully disclosed to the relying party. To this end,
one needs to process the policy’s predicate and transform it into a
claim predicate in which all attributes occurring in the predicate are
selectively disclosed. Claims including cross-credential statements
and limited spending cannot be fulﬁlled with the current speciﬁca-
tion of U-Prove.
4.4 Claim Veriﬁcation
A server receiving a claim with accompanying evidence from
a user veriﬁes whether this claim indeed implies the initially pro-
vided policy (cf. Step 3a in Figure 1). A claim implies a policy if
all of the following ﬁve conditions hold.
(1) For each disclosure request in the policy there is a corre-
sponding attribute – with the same credential variable and the same
attribute variable – disclosed in the claim. (2) The predicate of the
policy implies the predicate of the claim’s statement. To account
for technologies that fulﬁll the policy’s predicate by disclosing all
attributes occurring in it (e.g., U-Prove), all the attributes of the pol-
icy’s predicate that are disclosed in the claim are substituted with
the revealed values. Then, if the resulting predicate is constant, it is
veriﬁed whether it evaluates to true. If so, the predicate is fulﬁlled.
Otherwise the claim does not imply the policy.
(3) The creden-
tial declarations of the claim’s statement imply those of the policy.
A claim’s credential declaration implies a policy’s declaration if
(a) their credential variables are equal, and (b) their credential types
are equal (for hierarchical credential types, this might be extended
to checking whether the claim’s credential type is a subtype of the
policy’s credential type), and (c) the issuer of the claim’s declara-
tion is contained in the list of issuers of the policy’s declaration.
(4) In case the policy requires the signature of a message m, the
claim must also contain an ‘i sign’ statement for m. (5) The set of
terms disclosed to third party S1 in the claim must be a superset of
the set of terms that is required to be disclosed to S1 in the policy.
5. EVIDENCE HANDLING
In this section we show how idemix and U-Prove evidence is
generated and veriﬁed for a given claim. In particular, this section
elaborates on the components (2c) and (3b) of Figure 1. Note that
in the evidence veriﬁcation we only handle claims that have previ-
ously been generated (cf. Section 4.3) and we assume that claims
adhere to the restrictions of the respective technology.
For transforming the claim to semantically equivalent evidence,
we break our claim language syntax down to a set of building
blocks. We therefore only need to show how evidence is generated
for those building blocks.
5.1 Claim Building Blocks
In Table 2 we show the building blocks of our claim language
and detail which are supported by the current implementations of
idemix and U-Prove. For idemix, we distinguish between exist-
ing support and support introduced through extensions we propose
in Section 6. Of particular interest are the building blocks for at-
tribute predicates. We show how every attribute predicate can be
rewritten in terms of building blocks. In particular, any attribute
predicate with arbitrary logical nesting and negations can be trans-
formed to disjunctive normal form (DNF), i.e., Wi Vj ℓij, where
ℓij is an atomic expression (AtomicExp in Table 2) with no fur-
ther logical structure. In DNF negations occur only immediately
before atomic expressions. Such negations are eliminated by in-
verting the respective operators (e.g, ¬(a  25
X+
a.b 6= 7; a.b 6= ‘male’; a.b 6= 1984/01/01 X+
(a.b + 2·c.d ) 6= 7
X+
a.b  8, a.b > 1984/01/01
X
X
X
X+
X
X
X+
15 FunctionCall
f (NonConstExp, . . .)
charAt (2, a.b)
Func.-Dep. Func.-Dep.
Table 2: Claim Building Blocks. X: Supported in current implementation. X+: Supported with the extensions described in Section 6.
AtomicExp: Any of the building blocks 6 – 15. ConstExp: Expression not containing attribute variables. NonConstExp: Expression
containing at least one attribute variable.
deﬁne equalities among attributes, which is possible even if they
are encoded into different credentials. Thus, we have to use the
same attribute identiﬁer for all attributes that the claim states to be
equal, where attribute equality can only be proven if the types of
the attributes match.