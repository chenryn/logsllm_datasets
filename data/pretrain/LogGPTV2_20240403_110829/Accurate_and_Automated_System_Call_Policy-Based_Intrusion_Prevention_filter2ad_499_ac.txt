α1 ≠ α2
D
if 
Meet
May be dynamic/static constant
Not dynamic/static constant
A constant value or a dynamic constant 
D
αi
Figure 6. Thethree-levellatticeandnewrules
forthemeetoperatorusedin PAID’ssymbolic
constantpropagationalgorithm.
For scalar variables, the PAID compiler directly prop-
agates the values along all execution paths. For dynamic
constants, it performs symbolic execution instead so that
it could trace the variable dependencies. Finally, PAID’s
constant propagation algorithm understands the seman-
tics of common string manipulation library calls such as
strcat, strcpy, etc., and treats them as atomic operations.
As a result, the algorithm can propagate values across
these functions as if they are primitive arithmetic oper-
ators such as add or subtract. For inter-procedural con-
stant propagation, PAID pre-computes the jump func-
tions [7] for each procedure during the intra-procedural
constant propagation phase. Armed with the knowledge
of semantic relations among variables or expressions,
PAID builds these jump functions to help propagate val-
ues downward, which include not only the direct param-
eters passed through relations but also abstract relation
functions.
A shortcoming of the standard constant propagation
algorithm is that the meet-over-all-paths attribute re-
quires a MUST attribute over all paths.
In some in-
stances, this would lose useful information. For ex-
ample, assume a system call within a function call has
the same parameters as the function call. If the func-
tion is called from two sites, one using a static con-
stant, the other using a dynamic variable, the standard
constant propagation algorithm would conclude that the
system call argument is a dynamic variable. To miti-
gate this problem, PAID back-traces to the ﬁrst diverg-
ing point and examines the system call argument value
at this point. If any path before a diverging point carries
a static constant or dynamic constant value, PAID inserts
a notify call into all paths before the diverging point
to inform the run-time veriﬁer at run time.
If a system call argument is a dynamic variable, its
value cannot be determined at the compile time or after
program initialization. PAID uses two techniques to pro-
tect system calls that use such arguments. First, PAID
tries to derive partial constraints on a dynamic variable,
e.g., preﬁx or sufﬁx such as ”/home/httpd/html”. Sec-
ond, PAID forces the code for computing the value of
a dynamic-variable system call argument to be executed
faithfully by random insertion of null system calls.
A null system call is a system call that does not per-
form any operation. If an execution path spanning from
one system call instance to the next contains calls to
functions that do not lead to any system call and that
are involved in system call argument computation, PAID
randomly chooses up to 3 of these functions to insert a
null system call in their function prologue. PAID never
inserts more than one null system call into a function,
and it always makes sure that a null system call is in-
serted outside any loop. Inserting null system calls pro-
vides the run-time veriﬁer more observation points to
monitor a network application’s execution. Together
with stack transition checks, it also forces attack code
to follow more closely the application’s original execu-
tion ﬂow. To prevent an attacker from discovering the
positions of these null system calls, PAID implements
these null system calls through instructions with invalid
op code or unmapped operands, which are difﬁcult to
identify through binary disassembling.
3.3 Run-time Veriﬁer
For an incoming system call, the veriﬁer maintains
two stacks. The saved stack contains the return
addresses on the user stack when the previous sys-
tem call was made. The new stack contains the re-
turn addresses currently on the user stack. To verify
if there is a legal transition from the saved stack
to the new stack, the CSFG traversal algorithm sim-
ulates the calls/returns made by the application using
three mechanisms, move forward, move backward, and
rewind. The most important task of the veriﬁer is to
decide when to simulate returns and when to simulate
calls, and how to use the return addresses from the two
stacks. Our algorithm is a combination of the standard
DFA traversing algorithm among functions and a depth-
ﬁrst search algorithm within each function. The depth-
ﬁrst search algorithm incurs modest overhead because it
is conﬁned within a local CSFG.
We use the example in Figure 7 to illustrate the pro-
posed CSFG traversal algorithm. Assume the previous
system call sys1 in Figure 7 is legitimate and the cur-
rent state is at the node sys1 r7 t1. When sys2
is called at r9 t2, PAID’s run-time veriﬁer needs to
ﬁnd a path from the node sys1 r7 t1 to the node
sys2 r9 t2, and declares that sys2 is legitimate
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:46 UTC from IEEE Xplore.  Restrictions apply. 
entry(foo2)
entry(foo4)
entry(foo6)
entry(foo1)
call_r5
r5
sys1_r7_t1
call_r2
r1
entry(main)
call_r1
ret_r1
r1
ret_r2
call_r3
ret_r3
r2
r2
ret_r5
exit(foo2)
r3
entry(foo3)
r8
sys3_r10_t3
r8
exit(foo6)
call_r8
r5
ret_r8
exit(foo4)
entry(foo7)
r3
sys4_r11_t4
exit(main)
call_r4
r4
call_r6
r6
entry(foo5)
exit(foo7)
ret_r4
ret_r6
sys2_r9_t2
r4
r6
exit(foo1)
exit(foo3)
exit(foo5)
Figure 7. Forthesystemcallsequence{sys1,
sys2},whensys2ismade,the saved stack
is {r1, r2, r5}, the new stack is {r1,
r4, r6},andthecommonpreﬁxis{r1}.The
veriﬁer needs to perform the move backward
and the move forward operation to simulate
thereturnsandcalls.
if this path contains no other system call. Assume
the saved stack of sys1 is {r1, r2, r5}, and
the new stack of sys2 is {r1, r4, r6}. The
CSFG traversal algorithm ﬁrst computes the preﬁx of
the saved stack and the new stack, in this case
{r1}. Since the saved stack is longer than the pre-
ﬁx, the algorithm concludes that the program has re-
turned back to the function (foo1) after the system
call sys1. Therefore, the algorithm ﬁrst needs to use
the move backward operation to return back to foo1.
The move backward operation always uses the depth-
ﬁrst search algorithm to look for the exit node of the
current function for intra-function traversing. This oper-
ation is deterministic because each function only has a
single exit node. The depth-ﬁrst search algorithm works
correctly even when the CSFG contains may calls, such
as the call r8 node in foo4. The return addresses af-
ter the preﬁx in the saved stack is {r2, r5}. Us-
ing the sequence {r5, r2}, the move backward oper-
ation for the current example works as follows:
1. Find exit(foo4) using depth-ﬁrst search
2. Consume r5 using DFA traversal, and move to
ret r5
3. Find exit(foo2) using depth-ﬁrst search
4. Consume r2 using DFA traversal, and move to
ret r2
After the above operations,
the traversal reaches
(foo1). Since the new stack is longer than the preﬁx,
the algorithm concludes that additional function calls
have been made before the system call sys2, and it
needs to perform the move forward operation to sim-
ulate these call operations. The move forward opera-
tion always uses depth-ﬁrst search to look for the call
node labeled with the current stack symbol. This opera-
tion is deterministic because each call node is uniquely
labeled by its return address. The return addresses af-
ter the preﬁx in the new stack is {r4, r6}. Using
the sequence {r4, r6}, the move forward operation
works as follows:
1. Find the call node labeled with r4 using depth-ﬁrst
search, which is call r4
2. Consume r4 using DFA traversal, and move to the
callee of call r4, which is entry(foo3)
3. Find call r6
4. Consume r6 and move to entry(foo5)
After
the move backward operation and the
move forward operation, the algorithm completes the
simulation of the return and call operations, and once
it locates the node sys2 r9 t2, it declares that the
incoming system call is legitimate.
The move backward and move forward oper-
ations cannot cover all cases since a function may be
called in a loop and the return addresses information
in the saved stack and new stack cannot cap-
ture the loop operations, as shown in Figure 5. The
call sequence {sys2, sys1} is possible since foo is
called in a loop from the main function. At the time
sys1 is called, the saved stack is {r3, r6} and the
new stack is {r3, r5}. After the move backward
operation, the veriﬁer is at ret r6, and it cannot per-
form the move forward operation as there is no call
node that is labeled by r5 between ret r6 and the
exit node. The solution to this problem is to rewind the
saved stack further to ﬁnd a loop from which to per-
form further move forward operations. In this case,
the veriﬁer rewinds the stack until it reaches ret r3,
at which it ﬁnds the loop where the function with the
same return address r3 is called. A rewind operation
behaves the same as move backward using the input
{r3}, except when it reaches a return node, it needs to
perform an extra check to detect a loop. After the veriﬁer
locates the loop, it performs the normal move forward
operation using {r3, r5}.
For an incoming system call sn rx tx, assume the
saved stack is {a1, a2,· · ·, al, b1, b2,· · ·, bm}, the
new stack is {a1, a2,· · ·, al, c1, c2,· · ·, cn}, and the
prefix of these two stacks is {a1, a2,· · ·, al}. Let Lp,
Ls and Ln be the length of the preﬁx, saved stack,
and the new stack, respectively. The CSFG traversing
algorithm can be described more formally as:
1. If Ls > Lp, the veriﬁer moves backward to the
preﬁx using the input symbols {bm, bm−1,· · ·, b1}.
2. If Ln > Lp, the veriﬁer moves forward using the
input symbols {c1, c2,· · ·, cn}.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:46 UTC from IEEE Xplore.  Restrictions apply. 
Program Name
Qpopper-4.0
Apache-1.3.20
Wu-ftpd-2.6.0
Proftpd-1.2.8
pure-ftpd-1.0.14
Lines
of
Code
32104
51974
28055
58620
28182
Brief
Description
Pop3 server
Web server
Ftp server
Ftp server
Ftp server
Plain PAID
Binary Size
Overhead
61.21%
65.10%
83.62%
109.10%
59.78%
Plain PAID
CSFGs
Size (bytes)
374,764
642,780
586.656
920,736
336,532
Plain PAID
Compile Time
Overhead
105.23%
212.96%
134.16%
151.83%
90.10%
Arg/Rand PAID
Binary size
Overhead
61.52%
66.48%
84.36%
110.54%
60.01%
Arg/Rand PAID
CSFGs
Size (bytes)
376,780
656,756
592,068
935,440
337,856
Arg/Rand PAID
Compile Time
Overhead
111.20%
229.89%
152.23%
174.19%
110.35%
Table 1. Characteristicsofasetofnetworkapplications,and theirbinaryimagesizeand compilation
timeoverheadofPAID comparedwithGCC.Thesourcecodelinecountincludesallthelibrariesusedin
theprograms,excludinglibc.
3. After the move backward operation, if the veri-
ﬁer cannot perform the move forward opera-
tion or cannot ﬁnd a path to the incoming system
call, the algorithm tries a rewind operation using
{al, al−1,· · ·, a1}.
4. After the above operations, the veriﬁer uses depth-
ﬁrst search to check if it can locate a node labeled
with sn rx tx, where sn is the current system
call number, rx is the return address of its call stub,
and tx is the return address of its trap instruction.
Finally it checks all constraints on the system call
arguments whenever applicable.
5. Finally, the veriﬁer copies the new stack to the
saved stack and passes the system call to the
kernel for execution if the system call is legitimate.
PAID borrows similar solutions from the Previous
PAID [9] to solve the issues such as function pointer,
setjmp/longjmp, signal, shared library, and thread sup-
port. For example, PAID inserts a notify system call be-
fore each function call whose target is a pointer to in-
form the run-time veriﬁer where the control will go.
3.4 Eﬀectiveness and Attack Analysis
PAID has successfully detected the attacks such as
stack and heap overﬂow attacks, format string attacks,
”double free” attacks, and all mimicry attacks that need
more than one system calls. It can even prevent attacks
whose target system call immediately follows a buffer
overﬂow vulnerability, as well as most data attacks that
involve system call argument manipulation. The only
mimicry attacks that may evade PAID are the attacks
that only need one system call such as exec and do not