## PostgreSQL 源码性能诊断(perf profiling)指南(含火焰图生成分析FlameGraph) - 珍藏级
### 作者                                                         
digoal                                                          
### 日期                                                         
2016-11-28                                                              
### 标签                                                        
PostgreSQL , Linux , perf , 性能诊断 , stap , systemtap , strace , dtrace , dwarf , profiler , perf_events , probe , dynamic probe , tracepoint                                                                                                           
----                                                        
## 背景    
数据库的性能优化是一个非常经典的话题，数据库的优化手段以及优化的角度也各不相同。  
例如，可以从OS内核、网络、块设备、编译器、文件系统、SQL、数据库参数、业务逻辑、源码等各个方面去进行优化。  
但是如果在优化前了解瓶颈在什么地方，可以向打鼹鼠一样，先打大的，起到事半功倍的效果。   
本文将针对Linux平台下的PostgreSQL服务，讲解如何诊断PostgreSQL 数据库服务的瓶颈，了解瓶颈在哪个方面，甚至可以了解到瓶颈在哪段代码？     
有了比较详细的性能诊断报告，可以给出比较好的指导优化建议。    
我们要用到的工具是 [《Linux 性能诊断(profiling) perf使用指南》](20161127_01.md)   
## 使用perf跟踪PostgreSQL的前提
要输出完备的跟踪信息，如符号表，call stack traces, 汇编指令。必须在编译PostgreSQL时设置相应的编译开关，例如GCC需要开启如下    
```
CFLAGS="-g -ggdb -fno-omit-frame-pointer"  
```
建议Linux内核编译时加上    
```
CONFIG_KALLSYMS=y
CONFIG_FRAME_POINTER=y 
```
编译perf时需要支持libunwind, 并加上  
```
gcc -g dwarf
man gcc
       -gdwarf-version
           Produce debugging information in DWARF format (if that is supported).  This is the format used by DBX on IRIX 6.  The value of version may be either 2 or 3; the default version is 3.
           Note that with DWARF version 2 some ports require, and will always use, some non-conflicting DWARF 3 extensions in the unwind tables.
```
如果是yum安装的软件，可以安装对应的debuginfo包。  
例子  
```
wget https://ftp.postgresql.org/pub/source/v9.6.1/postgresql-9.6.1.tar.bz2 
tar -jxvf postgresql-9.6.1.tar.bz2 
cd postgresql-9.6.1
LIBS=-lpthread CC="/home/digoal/gcc6.2.0/bin/gcc" CFLAGS="-O3 -flto -g -ggdb -fno-omit-frame-pointer" ./configure --prefix=/home/digoal/pgsql9.6
LIBS=-lpthread CC="/home/digoal/gcc6.2.0/bin/gcc" CFLAGS="-O3 -flto -g -ggdb -fno-omit-frame-pointer" make world -j 64
LIBS=-lpthread CC="/home/digoal/gcc6.2.0/bin/gcc" CFLAGS="-O3 -flto -g -ggdb -fno-omit-frame-pointer" make install-world
```
## 常用跟踪手段
### 1. benchmark
首先，需要定一个目标，比如insert only的场景，如何找到其瓶颈。  
创建测试表  
```
postgres=# create table perf_test_ins(id serial8 primary key, info text, crt_time timestamp);
alCREATE TABLE
postgres=# alter sequence perf_test_ins_id_seq cache 10000;
ALTER SEQUENCE
```
创建测试脚本，不停插入  
```
vi test.sql
insert into perf_test_ins(info,crt_time) values ('test',now());
```
疲劳压测开始  
```
pgbench -M prepared -n -r -P 1 -f ./test.sql -h $PGDATA -c 32 -j 32 -T 600
```
### 2. 实时跟踪
pgbench压测的同时，实时观测。  
```
su - root
perf top -agv -F 1000
解释
perf top --help
NAME
       perf-top - System profiling tool.
SYNOPSIS
       perf top [-e  | --event=EVENT] []
DESCRIPTION
       This command generates and displays a performance counter profile in real time.
       -F , --freq=
           Profile at this frequency.
       -a, --all-cpus
           System-wide collection. (default)
       -g, --group
           Put the counters into a counter group.
       -K, --hide_kernel_symbols
           Hide kernel symbols.
       -U, --hide_user_symbols
           Hide user symbols.
       -v, --verbose
           Be more verbose (show counter open errors, etc).
```
输出  
```
   PerfTop:   23287 irqs/sec  kernel:31.2%  exact:  0.0% [1000Hz cycles],  (all, 24 CPUs)
--------------------------------------------------------------------------------------------------------------
samples  pcnt         RIP        function                                  DSO
_______ _____ ________________ _________________________________________ _____________________________________
4179.00  1.6% 0000000000524e10 AllocSetAlloc.lto_priv.1186               /home/digoal/pgsql9.6/bin/postgres 
3966.00  1.5% 0000000000043d10 __GI_vfprintf                             /lib64/libc-2.12.so                  
3822.00  1.5% ffffffff8150bb50 schedule                                  [kernel.kallsyms]                    
3659.00  1.4% 0000000000082e10 __memset_sse2                             /lib64/libc-2.12.so                  
3523.00  1.4% 00000000005782d0 LWLockAcquire.constprop.931               /home/digoal/pgsql9.6/bin/postgres 
3219.00  1.2% 00000000002c9390 LWLockRelease                             /home/digoal/pgsql9.6/bin/postgres 
3114.00  1.2% 0000000000332e10 PostgresMain                              /home/digoal/pgsql9.6/bin/postgres 
3042.00  1.2% ffffffff8150e8b0 _spin_lock                                [kernel.kallsyms]                    
2948.00  1.1% 0000000000573fe0 hash_search_with_hash_value.constprop.930 /home/digoal/pgsql9.6/bin/postgres 
2901.00  1.1% 00000000005746d0 hash_search_with_hash_value.constprop.928 /home/digoal/pgsql9.6/bin/postgres 
2848.00  1.1% 00000000002db5f0 GetSnapshotData                           /home/digoal/pgsql9.6/bin/postgres 
2471.00  1.0% 00000000005338b0 hash_seq_search                           /home/digoal/pgsql9.6/bin/postgres 
2275.00  0.9% 0000000000579ad0 LWLockAcquire.constprop.932               /home/digoal/pgsql9.6/bin/postgres 
2244.00  0.9% 0000000000078460 _int_malloc                               /lib64/libc-2.12.so                  
2215.00  0.9% 0000000000088aa0 memcpy                                    /lib64/libc-2.12.so                  
2163.00  0.8% 00000000002df050 LockAcquireExtended                       /home/digoal/pgsql9.6/bin/postgres 
2057.00  0.8% 0000000000131a70 __strlen_sse42                            /lib64/libc-2.12.so                  
2017.00  0.8% 00000000002ba2d0 _bt_compare                               /home/digoal/pgsql9.6/bin/postgres 
1977.00  0.8% 0000000000006e40 doCustom.lto_priv.13                      /home/digoal/pgsql9.6/bin/pgbench  
1951.00  0.8% ffffffff8100a630 __switch_to                               [kernel.kallsyms]                    
1855.00  0.7% 000000000053d5e0 hash_search_with_hash_value               /home/digoal/pgsql9.6/bin/postgres 
1767.00  0.7% 00000000001c6670 hash_any                                  /home/digoal/pgsql9.6/bin/postgres 
1726.00  0.7% 00000000002c8310 PinBuffer.isra.3.lto_priv.2340            /home/digoal/pgsql9.6/bin/postgres 
1668.00  0.6% 00000000000ee570 XLogInsertRecord                          /home/digoal/pgsql9.6/bin/postgres 
1604.00  0.6% 0000000000250500 pgstat_report_activity                    /home/digoal/pgsql9.6/bin/postgres 
1572.00  0.6% ffffffff81189c00 fget_light                                [kernel.kallsyms]                    
1565.00  0.6% 0000000000426970 SearchCatCache                            /home/digoal/pgsql9.6/bin/postgres 
1460.00  0.6% ffffffff810e03a0 __audit_syscall_exit                      [kernel.kallsyms]                    
1415.00  0.5% ffffffff81057e80 update_curr                               [kernel.kallsyms]                    
1409.00  0.5% 00000000000777f0 _int_free                                 /lib64/libc-2.12.so                  
1386.00  0.5% 00000000000fbc10 CommitTransaction.lto_priv.2946           /home/digoal/pgsql9.6/bin/postgres 
1296.00  0.5% ffffffff8119f6d0 do_select                                 [kernel.kallsyms]                    
1285.00  0.5% 00000000002c8690 LWLockWaitListLock.lto_priv.1265          /home/digoal/pgsql9.6/bin/postgres 
1268.00  0.5% ffffffff8150e790 _spin_lock_irqsave                        [kernel.kallsyms]                    
1247.00  0.5% 0000000000577650 hash_search_with_hash_value.constprop.929 /home/digoal/pgsql9.6/bin/postgres 
1220.00  0.5% 0000000000538a10 AllocSetFree.lto_priv.1187                /home/digoal/pgsql9.6/bin/postgres 
1201.00  0.5% 0000000000389660 ExecModifyTable                           /home/digoal/pgsql9.6/bin/postgres 
1185.00  0.5% 000000000009b6d0 gettimeofday                              /lib64/libc-2.12.so                  
1171.00  0.5% ffffffff81278a60 copy_user_generic_string                  [kernel.kallsyms]                    
1142.00  0.4% 000000000013cb10 __memcmp_sse4_1                           /lib64/libc-2.12.so                  
1124.00  0.4% 0000000000032620 __GI___sigsetjmp                          /lib64/libc-2.12.so                  
1123.00  0.4% 00000000000ef2b0 XLogInsert                                /home/digoal/pgsql9.6/bin/postgres 
1112.00  0.4% 00000000002d29e0 LockReleaseAll                            /home/digoal/pgsql9.6/bin/postgres 
1108.00  0.4% 00000000003c7620 ExecInitExpr                              /home/digoal/pgsql9.6/bin/postgres 
1056.00  0.4% 000000000000ac80 threadRun.lto_priv.20                     /home/digoal/pgsql9.6/bin/pgbench  
1052.00  0.4% ffffffff81062a40 select_task_rq_fair                       [kernel.kallsyms]                    
1033.00  0.4% 0000000000017710 pqParseInput3                             /home/digoal/pgsql9.6/lib/libpq.so.5.9
```
按Enter键弹出可以配置的选项以及当前状态。   
```
Mapped keys:
        [d]     display refresh delay.                  (2)
        [e]     display entries (lines).                (47)
        [f]     profile display filter (count).         (5)
        [F]     annotate display filter (percent).      (5%)
        [s]     annotate symbol.                        (NULL)
        [S]     stop annotation.
        [K]     hide kernel_symbols symbols.            (no)   是否显示kernel symbols
        [U]     hide user symbols.                      (no)   是否显示user symbols
        [z]     toggle sample zeroing.                  (0)
        [qQ]    quit.
```
调整压测命令，连接回环地址，(前面连接的是unix socket)     
```
pgbench -M prepared -n -r -P 1 -f ./test.sql -h 127.0.0.1 -c 32 -j 32 -T 600
```
再次观测perf top结果, 采样消耗排名第一的变成了这条，找到了一个瓶颈，关闭iptables，这条就消失了，TPS也提升了。     
```
5871.00  1.7% 0000000000002e40 ipt_do_table                              /lib/modules/2.6.32-358.23.2.ali1195.el6.x86_64/kernel/net/ipv4/netfilter/ip_tables.ko
```
### 3. 跟踪事件计数（指定事件）
指定命令进行跟踪，或者指定PID进行跟踪。  
```
NAME
       perf-stat - Run a command and gather performance counter statistics
SYNOPSIS
       perf stat [-e  | --event=EVENT] [-a] 
       perf stat [-e  | --event=EVENT] [-a] —  []
DESCRIPTION
       This command runs a command and gathers performance counter statistics from it.
       -a, --all-cpus
           system-wide collection from all CPUs
       -c, --scale
           scale/normalize counter values
       -B, --big-num
           print large numbers with thousands′ separators according to locale
       -v, --verbose
           be more verbose (show counter open errors, etc)
       -p, --pid=
           stat events on existing process id
       -t, --tid=
           stat events on existing thread id
       -r, --repeat=
           repeat command and print average + stddev (max: 100)
```
跟踪批量插入一批记录的事件调用统计  
```
event来自perf list的输出
perf stat -e block:*,syscalls:*,xfs:* -a -B -v -c -- /home/digoal/pgsql9.6/bin/psql -h 127.0.0.1 -p 5288 -q -U postgres postgres -c "drop table if exists x; create table x as select a FROM generate_series(1,1000000) a;";
```
输出  
```
                 0 block:block_rq_abort                                         [98.79%]
                 0 block:block_rq_requeue                                       [98.79%]
               995 block:block_rq_complete                                      [98.79%]
               993 block:block_rq_insert                                        [98.79%]
               997 block:block_rq_issue                                         [98.79%]
                 0 block:block_bio_bounce                                       [98.79%]
                 0 block:block_bio_complete                                     [98.79%]
                18 block:block_bio_backmerge                                    [98.79%]
                 1 block:block_bio_frontmerge                                    [98.79%]
             1,011 block:block_bio_queue                                        [98.79%]
               992 block:block_getrq                                            [98.79%]
                 2 block:block_sleeprq                                          [98.79%]
               250 block:block_plug                                             [98.79%]
                 2 block:block_unplug_timer                                     [98.79%]
               361 block:block_unplug_io                                        [98.79%]
                 0 block:block_split                                            [98.79%]
             1,011 block:block_remap                                            [98.79%]
                 0 block:block_rq_remap                                         [98.79%]
                 5 syscalls:sys_enter_socket                                    [98.79%]
                 5 syscalls:sys_exit_socket                                     [98.79%]
                 0 syscalls:sys_enter_socketpair                                    [98.79%]
                 0 syscalls:sys_exit_socketpair                                    [98.79%]
... 略 ...
```
计数例子    
```
perf stat -a -B -v -c -- /home/digoal/pgsql9.6/bin/psql -h 127.0.0.1 -p 5288 -q -U postgres postgres -c "drop table if exists x; create table x as select a FROM generate_series(1,1000000) a;";
      22433.920027 task-clock                #   24.042 CPUs utilized           [100.00%]
             4,275 context-switches          #    0.000 M/sec                   [100.00%]
                98 CPU-migrations            #    0.000 M/sec                   [100.00%]
            56,484 page-faults               #    0.003 M/sec                  
     2,687,623,473 cycles                    #    0.120 GHz                     [80.73%]
     2,747,044,652 stalled-cycles-frontend   #  102.21% frontend cycles idle    [92.42%]