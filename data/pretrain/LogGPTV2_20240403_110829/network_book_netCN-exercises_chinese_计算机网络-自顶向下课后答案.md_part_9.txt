由于在两个连续的分组丢失之间，由TCP发送的1/L分组因此，发送方T=(1/L)*MSS/B。因此，我们发现T=B*RTT22/(1.222*ms)，即T是AB.
P50、C1与C2的主要区别在于C1的RTT仅为C2的一半。因此，C1在50毫秒后调整其窗口大小，而C2在100毫秒后调整其窗口大小。假设无论何时发生丢失事件，C1在50毫秒后接收，C2在100毫秒后接收。我们还得到了以下TCP简化模型。在每个RTT之后，连接决定是否应该增加窗口大小。对于C1，我们计算前50毫秒链路中的平均总发送速率。如果该速率超过链路容量，则假设C1检测丢失并缩小其窗口大小。但是对于C2，我们计算了前100毫秒链路中的平均总发送速率。如果该速率超过链路容量，则假设C2检测丢失并缩小其窗口大小。请注意，在最后50毫秒内的平均发送速率可能高于链路容量，但最后100毫秒内的平均发送速率小于或等于链路容量，那么在这种情况下，我们假设C1将经历丢失事件，而C2不会。
下表描述了基于上述假设的窗口大小和发送速率的演变。
|   |C1||C2||
|---|---|---|---|---|
|时间（秒）|窗口大小（在下一个50毫秒内发送的段数）|平均数据发送速率（每个段）第二=窗口/0.05）|窗口尺寸（编号。第页的分段在下一个发送下100毫秒）|平均数据发送速率(段每秒，=Window/0.1)|
|0|10|200（在[0-50]秒内）|10|100（在[0-50]秒内）|
|50|5(减小窗口大小作为avg。在最后50毫秒内向链路发送的总速率为300=200 100)|100（在[50-5100]秒内）||100（在[50-5100]秒内）|
|100|2（减少了窗口大小作为AVG。总发送至最后链接50毫秒为200=100100）|40|5（减少了窗口大小作为AVG。总发送至最后链接100毫秒为250==(200100)/2+(100+100)/2|50|
|150|1（减少了窗口大小作为AVG。总发送至最后链接50毫秒为90=(4050)|20||50|
|200|1(不再减少，因为窗口大小已经是1)|20|2 （减少窗口大小作为AVG。发送总数截至2008年12月31日的链接在最后 100毫秒 80= （4020）/2 （5050）/2）|20|
|250|1(不再减少，因为窗口大小已经是1)|20||20|
|300|1(不再减少，因为窗口大小已经是1)|20|1（减少了窗口大小作为AVG。总发送至最后链接100毫秒为40==(2020)/2(2020)/2)|10|
|350|2|40||10|
|400|1|20|1|10|
|450|2|40||10|
|500|1（减少了窗口大小作为AVG。总发送上次连接到链接的速率50毫秒为50=(4010)|20|1|10|
|550| 2| 40 |10 |
|600 |1 |20| 1 |10 |
|650| 2| 40 |10 |
|700 |1| 20| 1 |10 |
|750 |2 |40 |10 |
|800 |1| 20 |1| 10 |
|850 |2 |40 |10 |
|900 |1| 20 |1| 10 |
|950 |2 |40| 10 |
|1000| 1| 20| 1| 10 |
基于上表，我们发现，在1000msec后，C1"s和C2"的窗口大小均为1段。
b)在长期运行中，C1的带宽份额大约是C2的两倍，因为C1具有较短的RTT，仅是C2的一半，因此C1可以将其窗口大小调整两次，快速ASC2。如果我们看上面的表，我们可以每隔200毫秒看到一个周期，例如，850msec至1000msec（含）。在一个周期内,C1的发送速率(40204020)＝120，它是由发送C2给出的三倍大（10101010）=40。
P51、
a)类似于上一个问题，我们可以在下表中计算它们随时间变化的窗口大小。在2200毫秒后，C1和C2的窗口大小都是相同的。
||C1||C2||
|-|-|-|-|-|
|时间（秒）|窗口大小在下一个100毫秒内发送的段数量|数据发送速度(每秒分段=Window/0.1)|窗口大小在下一个100毫秒内发送的段)|数据发送速度(每秒分段，=Window/0.1)|
|0| 15 |150 (in [0-100]msec]| 10 |100 (in [0-100]msec) |
|100 |7| 70| 5| 50 |
|200| 3| 30| 2 |20 |
|300| 1 |10| 1 |10 |
|400 |2| 20 |2 |20 |
|500| 1 |10 |1| 10 |
|600 |2 |20 |2| 20 |
|700 |1 |10 |1 |10 |
|800 |2 |20 |2 |20 |
|900 |1 |10 |1 |10 |
|1000 |2| 20 |2| 20 |
|1100 |1 |10 |1 |10 |
|1200 |2 |20 |2| 20 |
|1300| 1 |10 |1 |10 |
|1400 |2 |20 |2| 20 |
|1500 |1 |10 |1| 10 |
|1600 |2 |20| 2 |20 |
|1700 |1 |10 |1 |10 |
|1800 |2 |20| 2 |20 |
|1900 |1 |10 |1 |10 |
|2000 |2 |20 |2| 20 |
|2100 |1| 10 |1 |10 |
|2200| 2 |20| 2| 20 |
b)是的，这是由于TCP的AIMD算法，而且这两个连接具有相同的RTT。
c)是的，从上表可以清楚地看出这一点。它们的最大窗口大小为2.
d)不，这种同步将无助于提高链路利用率，因为这两个连接在最小窗口和最大窗口大小之间充当一个单一连接振荡。因此，该链接没有得到充分利用(回想一下，我们假设这个链接没有缓冲区)。中断同步的一种可能方法是在链路中添加一个有限的缓冲区，并在缓冲区溢出之前将数据包随机丢弃到缓冲区中。这将导致不同的连接在不同的时间削减其窗口大小。主动队列管理(AQM)技术有很多种，如RED(随机早期检测)、PI(比例积分AQM)、AVQ(AdaptiveVirtualQueue)和REM(随机指数标记)等。
P52、请注意，W表示最大窗口大小。首先，我们可以找到在TCP期间间隔期间发送的段总数将其窗口大小从W/2更改为并包括W。这通过以下方式给出：S=W/2（W/2）*（1个单位）（W/2）*（1个单位）2(w/2)*(1%)3(&C)..(w/2)*(1%)kK我们发现K=log(1%)2，然后S=w*(2/1)/(2))。损耗率L由下式给出：L=1/s=(2%)/(w*(2/1))。TCP用于将其窗口大小从W/2增加到W的时间由下式给出：k*RTT＝(log(1％)2)*RTT，这显然与TCP的平均吞吐量无关。注意，TCP的平均吞吐量由下式给出：b=MSS*S/((k1)*RTT)=MSS/(L*(k1)*RTT)。
请注意，这与具有平均吞吐量的tcp不同：$B=\frac{1.22 \cdot MSS}{RTT \cdot \sqrt{L}}$，其中L的平方根出现在分母中。
P53、让我们假设1500字节的数据包和100ms的往返时间。从TCP吞吐量方程$B=\frac{1.22 \cdot MSS}{RTT \cdot \sqrt{L}}$
我们已经有了10Gbps=22*(1500*8位)/(.1秒*SRQT(L))，或sqrt(l)=14640位/(10，9位)=0.00001464，或L=2.14*10（-10）
P54、在t2使用cwnd和ss阈值的早期值的一个优点是，tcp将不必经历缓慢的启动和拥塞避免以提高在t1处获得的吞吐量值。使用这些值的一个缺点是它们可能不再准确。特别是，如果路径在T1和T2之间变得更加拥挤，发送方将向已经(更多)拥挤的路径发送一个大窗口的段值。
P55、
a)服务器将其对y的响应。
b)服务器可以确定客户端确实在Y上。如果是在某个其他服务器上地址欺骗Y，SYNACK将被发送到地址Y，并且主机中的TCP将不发送TCPACK段。即使攻击者要发送适当定时的TCPACK段，它将不知道正确的服务器序列号（因为服务器使用随机初始序列数字。
P56、
a)参考下图，我们认为总延迟是
RTTRTTS/RRTTS/RRTT12S/R=4RTT14S/R
b)类似地，在这种情况下的延迟是：RTTRTTS/RRTTS/RRTTS/RRTT8S/R=5RTT11S/R
c)类似地，在这种情况下的延迟是：RTTRTTs/rRTT14s/r=3RTT15s
![avater](./img/29.png)
[Back to Index](#目录)
# 第四章
## 复习题4 
R1、网络层数据包是一种数据报.路由器根据数据包的IP(第3层)地址转发数据包。链路层交换机根据分组的MAC(第2层)地址转发分组.
R2、数据平面的主要功能是转发数据包，转发数据报从它们的输入链路到它们的输出链路。例如,数据平面S输入端口执行终止传入物理链路的物理层功能在路由器处，执行链路层功能以在另一个路由器上与链路层互操作传入链路的一侧，并在输入端口上执行查找功能。
控制平面的主要功能是路由，即确定数据包从源到目的地的路径。控制平面负责执行路由协议，响应连接的上下链路，与远程控制器通信，并执行管理功能。
R3、路由和转发之间的主要区别在于转发是路由器S将分组从其输入接口传送到其输出接口的本地动作，和转发发生在非常短的时标(通常为几纳秒),并且因此通常以硬件实现。路由是指网络范围确定数据包从来源接收到的端到端路径的过程目的地。路由发生在更长时间的时标上(通常是秒)，以及通常用软件实现。
R4、路由器内的转发表的作用是保存条目以确定即将通过切换转发到达数据包的输出链路接口织物。
R5、Internet网络层的服务模式是尽力而为的服务.使用该服务模型，无法保证按发送顺序接收数据包，无法保证其最终交付，不能保证端到端的延迟，也没有最小的带宽保证。
R6、输入端口、交换结构和输出端口在硬件中实现，因为它们的数据报处理功能对于软件实现来说太快了。传统路由器内部的路由处理器使用软件来执行路由协议，维护路由表和附加的链路状态信息，并计算路由器的转发表。此外，SDN路由器中的路由处理器还依赖于与远程控制器通信的软件，以便接收转发表条目并将它们安装在路由器的输入端口中。
数据平面通常由于需要快速而在硬件中实现例如以纳秒时标处理。控制平面通常在软件并以毫秒或秒时间工作,例如用于执行路由协议、响应向上或向下的附加链路,与远程控制器通信，并执行管理功能。
R7、利用阴影复制,在每个输入端口处本地地进行转发查找,而无需调用集中式路由处理器。这种分散的方法避免在路由器内的单个点创建查找处理瓶颈。
R8、基于目的地的转发意味着到达路由器的数据报将仅基于数据报的最终目的地转发到输出接口。广义转发意味着除了它的最终目的地之外，其他因素当路由器确定输出时，还考虑与数据报关联数据报的接口。软件定义的网络采用广义转发，例如，转发决策可以基于数据报的TCP/UDP源或目的端口号，除了其目的IP地址之外。
R9、路由器使用最长的前缀匹配来确定如果数据包的目标地址与转发表中的两个或多个条目匹配，数据包将被转发到哪个链路接口。也就是说，数据包将被转发到与数据包的目的地具有最长前缀匹配的链路接口。
R10、通过存储器进行切换；通过总线进行切换；通过互连网络进行切换。只要所有分组都被转发到不同的输出端口，互连网络就可以并行地转发分组。
R11、如果数据包到达交换矩阵的速率超过交换矩阵速率，则数据包需要在输入端口排队。如果此速率不匹配仍然存在，队列会变得更大和更大，并最终溢出输入端口缓冲区，从而导致数据包丢失。如果交换结构速度至少为N，则可以消除分组丢失输入线速度快，其中N为输入端口的数量。
R12、假设输入和输出线路速度相同，如果数据包到达单个输出端口的速率超过线路速度，则仍可能发生丢包。如果这种速率不匹配仍然存在，队列将变得越来越大，并最终溢出输出端口缓冲区，从而导致数据包丢失。请注意，提高开关结构的速度并不能防止此问题的发生。
R13、HOL阻塞：有时在输入端口队列中首先排队的数据包必须必须等待，因为它想要的输出端口没有可用的缓冲区空间被转发。当发生这种情况时,第一分组后面的所有分组被阻塞,即使它们的输出队列具有容纳它们的空间。发生HOL阻塞发生在输入端口处。
R14、(本问题中的一个错误：第一个问号应改为句号)。只有FIFO才能确保所有数据包按照到达的顺序离开。
R15、例如，携带网络管理信息的分组应当接收优先于常规用户流量。另一个示例是实时语音IP分组可能需要在非实时流量（如电子邮件）上接收优先级。
R16、(问题中的一个错误：不同的→差异)
与RR，所有服务类被同等对待，也就是说，没有任何服务类比任何其他服务类具有优先级。对于WFQ，服务类被不同的对待，也就是说，每个类在任何时间间隔内都可以接收到不同的服务量。当WFQ的所有类都具有相同的服务权重时，WFQ与RR是相同的。
R17、IP数据报中的8位协议字段包含关于目的地主机应该将段传递给哪个传输层协议的信息。
R18、生存时间。
R19、没有。IP报头校验和只计算IP数据包的IP报头字段的校验和，这些字段与IP数据报的传输层段部分不共享公共字节。
R20、IP数据报片段的重新组装是在数据报的目标主机中完成的。
R21、是。每个接口都有一个地址。
R22、11011111 00000001 00000011 00011100. 
R23、略
R24、8接口；3个转发表。
R25、50%的间接费用。
R26、通常，无线路由器包括DHCP服务器。DHCP用于为5台PC和路由器接口分配IP地址。是的，无线路由器也使用NAT，因为它只从ISP获得一个IP地址。
R27、路由聚合意味着ISP使用单个前缀为多个网络做广告。路由聚合很有用，因为ISP可以使用这种技术向Internet的其他部分宣传ISP拥有的多个网络的单一前缀地址。
R28、即插即用或Zeroconf协议意味着该协议能够自动配置主机的网络相关方面，以便将主机连接到网络中。
R29、网络中的设备的私有网络地址指的是仅对该网络内的那些设备有意义。具有私有数据的数据报网络地址不应存在于较大的公共Internet中，因为私有网络地址可能由他们自己的许多网络设备使用专用网络。
R30、IPv6具有固定长度的报头，其中不包括IPv4的大部分选项标题可以包括。即使IPv6报头包含两个128位地址（源和目标IP地址）整个报头的固定长度为40字节只有。几个领域在精神上是相似的。流量等级，有效载荷长度，下一个 IPv6的报头和跳限分别与服务类型、数据报相似长度，上层协议和在IPv4中生活的时间。
R31、是的，因为整个IPv6数据报(包括头字段)都封装在IPv4数据报中。
R32、转发有两个主要操作：匹配和操作。通过基于目的地的转发，路由器的匹配操作只查找待转发数据报的目标IP地址，路由器的操作操作包括将数据包发送到交换结构到指定的输出端口。使用广义转发，可以在协议栈中不同层上与不同协议相关联的多个报头字段上进行匹配，该操作可以包括将包转发到一个或多个输出端口，跨多个输出接口进行负载均衡，重写报头值(如NAT)，故意阻塞/丢弃数据包(如防火墙)，将数据包发送到特殊服务器以供进一步处理和操作，等等。
R33、基于目的地的转发的转发表中的每个条目仅包含IP报头字段值和数据包的输出链路接口（匹配IP报头字段值)将被转发。流表的每个条目OpenFlow包括一组报头字段值,输入分组将匹配的一组计数器，这些计数器被更新为数据包与流表匹配条目，以及数据包与流表条目匹配时要采取的一组操作。
R34、“匹配加动作”是指路由器或交换机试图在流表中有某些条目的包的一些报头值之间找到匹配，然后根据该匹配，路由器决定将该数据包转发到哪个接口，甚至决定对该分组进行更多的操作。在基于目的地的转发分组交换机的情况下，路由器只尝试在流表条目与到达数据包的目标IP地址之间找到匹配，并且决定将该数据包转发到哪个接口。在SDN的情况下，可以匹配许多字段，例如IP源地址、TCP源端口和源MAC地址；还可以采取许多操作，例如转发、删除和修改字段值。
R35、可以在OpenFlow 1.0通用转发中匹配的IP数据报中的三个示例头字段是IP源地址、TCP源端口和源MAC地址。三个无法匹配的字段是：TTL字段、数据报长度字段、标头校验和(依赖于TTL字段)。
[Back to Index](#目录)
## 问题4 
P1、
(A)发送给主机H3的数据是通过接口3转发的
|目标地址|链接接口|
|--|--|
|H3 |3|
b)否，因为转发规则仅基于目标地址。
P2、
a)否，您只能在共享总线上一次发送一个数据包。
b)否，如文本中所述，一次只能进行一次内存读取/写入。共享系统总线。