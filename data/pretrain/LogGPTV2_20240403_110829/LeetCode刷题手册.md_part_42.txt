Input: [3,1,3,4,2]
Output:2
Input: [1,3,4,2,2]
Your runtime complexity should be less than O(n^2). 
You must use only constant, O(1) extra space.
for i := O; i>1, 0 
错误）：
开始，每次走一步，再次遇见的时候就是成环的交点处，也即是重复数字所在的地方。
成环。所以用快慢指针的方法，快指针一次走2步，慢指针一次走1步，相交以后，快指针从头
标。找重复的数字就是找链表中成环的那个点。由于题目保证了一定会有重复的数字，所以一定会
 slow = nums[slow] 
walker = nums [walker]
fast = nums[nums[fast]]
slow = nums[slow] 
5.整数low就是要找的重复的数
1．假设有 n+1 个数，则可能重复的数位于区间[1,n] 中。记该区间最小值、最大值和中间值为
4.
2.
缩小区间，继续重复步骤 2、3，直到区间变成1 个整数，即 low == high 
于区间(mid,high］（左开右闭）中
如果超过 mid个就说明重复的数存在于区间[low,mid]（闭区间）中；否则，重复的数存在
遍历整个数组，统计小于等于mid 的整数的个数，至多为 mid 个
low、high、mid 
，下标变大，差值应该比前一个数字小，出现了这
---
## Page 408
 Example 2:
Example 1: 
non-empty word in str.
Here follow means a full match, such that there is a bijection between a letter in pattern and a 
uad aes au sollio ls j pu 's us e pue uaed e uas 
题目
290. Word Pattern
Output: true 
Input: pattern = "abba", str = "dog cat cat dog"
func findDuplicate2(nums []int) int
//解法三
if len(nums) == 0 {
return 
for i := O; i = diff {
 return 0
} else{ 
if count > mid { 
 diff = nums[i] - i - 1
return nums[i]
high = mid 
low = mid + 1
 count++
0
---
## Page 409
代码
应 dog 是错误的，所以这里需要从 dog 查询它是否已经和某个模式匹配过了。所以需要双向的关系。
这道题用 2个 map 即可。1个 map 记录模式与字符串的匹配关系，另外一个 map 记录字符串和模式
解题思路
给定一个模式串，判断字符串是否和给定的模式串，是一样的模式。
题目大意
separated by a single space.
You may assume pattern contains only lowercase letters, and str contains lowercase letters
Note:
Example 4: 
Example 3: 
func wordPattern(pattern string, str string) bool
import "strings"
package leetcode
Output: false
Input: pattern = "abba", str = "dog dog dog dog"
Output: false
Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false
"usl4 reo reo bop. = uas ‘eqqe. = uuazzed:anduI
patternByte := []byte(pattern)
strList := strings.Split(str,
---
## Page 410
题目大意
Note:
uanbasans usseau asauol yo yua au pu 'saaus yo ree paosun ue ua 
300. Longest Increasing Subsequence
Follow up: Could you improve it to O(n log n) time complexity?
Example:
题目
● Your algorithm should run in O(n^2) complexity.
● There may be more than one LIS combination, it is only necessary for you to return the 
length is 4.
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the
Output: 4 
Input: [10,9,2,5,3,7,101,18]
length.
return true
sMap := map[string]byte{}
pMap := map[byte]string{}
if pattern == "" Il len(patternByte) != len(strList)
for index, b := range patternByte { 
return false 
if pMap[b] != strList[index]{
else {
}else{ 
if.
return false 
if sMap[strList[index]] !=b {
sMap[strList[index]] = b
pMap[b]= strList[index] 
 return false 
 ok = sMap[strList[index]]; !ok {
---
## Page 411
代码
解题思路
给定一个无序的整数数组，找到其中最长上升子序列的长度。
package leetcode
·其中 tails[i] 中存储的是所有长度为i+1的上升子序列中末尾最小的值。也很容易证明
·给定一个整数序列，求其中的最长上升子序列的长度。这一题就是经典的最长上升子序列的问题。
func lengthofLIS(nums []int) int {
//解法—O（n^2）DP
import "sort"
）这道题还有一种更快的解法。考虑这样一个问题，我们是否能用一个数组，记录上升子序列的最末
for i := l; i  nums [i] ，取所有满足条件的最大值。时间复杂度
dp[i] 代表为第i个数字为结尾的最长上升子序列的长度。换种表述，dp[i] 代表[0,] 范围内，选
return res
 tails[0] =
tails[2] =
 tails[1]
=
6
5
3
---
## Page 412
给定一个整数数组 nums，求出数组从索引li到j(i≤j) 范围内元素的总和，包含i,j两点。
题目大意
Given an integer array nums, find the sum of the elements between indices i and j (i ≤j), inclusive
303. Range Sum Query - Immutable
示例：
Note:
Example:
1. You may assume that the array does not change.
题目
给定 nums=[-2，0，3，-5，2，-1］，求和函数为 sumRange()
 2. There are many calls to sumRange function.
sumRange(0, 5) -> -3
sumRange(2,
sumRange(0,2) -> 1 
Given nums =[-2,0,3，-5，2，-1]
sumRange(0,2) -> 1
sumRange(2,
func lengthofLIS1(nums []int) int {
//解法二 o(n log n）DP
return len(dp)
dp := []int{} 
For
if i == len(dp) { 
i := sort.SearchInts(dp, num)
dp[i] = num
else {
dp = append(dp, num)
-, num := range nums { 
5）->
 5） -> -1
-1
---
## Page 413
代码
解题思路
说明：
·会多次调用 sumRange 方法。
// type NumArray struct 
//解法二 prefixsum，sumRange 时间复杂度 o(1)
·这一题由于数组里面的元素都是**不可变**的，所以可以用2种方式来解答，第一种解法是用
·你可以假设数组不可变。
// // NumArray define 
func (ma *NumArray) SumRange(i int, j int) int {
// SumRange define
func Constructor303(nums []int) NumArray {
// Constructor303 define
type NumArray struct {
// NumArray define 
//解法— 线段树，sumRange 时间复杂度 o(1)
import （
package leetcode
 return ma.st.Query(i, j) 
st.Init(nums, func(i,j int) int {
st := template.SegmentTree{} 
 St *template.SegmentTree
"github.com/halfrost/LeetCode-Go/template"
内元素的和。
return NumArray{st: &st}
}）
n)。
是两个子结点的和，初始化建树的时间复杂度是 O(log n)，查询区间元素和的时间复杂度是 O(log
询区间元素和的时间复杂度是O(1)。第二种解法是利用线段树，构建一颗线段树，父结点内存的 
prefixSum，通过累计和相减的办法来计算区间内的元素和，初始化的时间复杂度是 O(n)，但是查
 return i + j 
---
## Page 414
Example 2: 
Example 1:
Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 
Given a string containing only digits 'o'-'9', write a function to determine if it's an additive
 numbers, each subsequent number in the sequence must be the sum of the preceding two.
1, 02, 3 is invalid.
A valid additive sequence should contain at least three numbers. Except for the first two 
Additive number is a string whose digits can form additive sequence.
题目
306. Additive Number
number.
 ' ' '       1  
Output: true 
Input: "112358"
{//
// func (this *NumArray) SumRange(i int, j int) int {
// // SumRange define 
二
// // Constructor303 define
// 
// prefixsum []int
* Your NumArray object will be instantiated and called as such:
 param_l := obj.SumRange(i,j);
obj := Constructor(nums);
ifｉ> 
return this.prefixsum[j]
return NumArray{prefixSum: nums}
for i := l; i  O { 
 return false
first, - := strconv.Atoi(num[:firstend+1]) 
 break
1 + 99 = 100， 99 + 100 = 199 
---
## Page 416
给定一个整数数组 nums，求出数组从索引li到j (i≤j)范围内元素的总和，包含i,j两点。
题目大意
Note:
Example:
The update(i, val) function modifies nums by updating the element at index i to val.
 Given an integer array nums, find the sum of the elements between indices i and j(i ≤ j), inclusive.
题目
307. Range Sum Query - Mutable
 2. You may assume the number of calls to update and sumRange function is distributed
1. The array is only modifiable by the update function.
sumRange(0, 2) -> 8 
update(1，2)
sumRange(0, 2) -> 9 
Given nums = [1, 3, 5] 
func recursivecheck(num string, xl int, x2 int, left int) bool {
//Propagate for rest of the string
 evenly.
return false
if strings.HasPrefix(num[left:], strconv.Itoa(xl+x2)) {
if left == len(num) 
return false
 return recursivecheck(num, x2, xl+x2, left+len(strconv.Itoa(x1+x2)))
 return true
if num[firstEnd+1] == '0′ && secondEnd-firstEnd > 1 {
second，
 return true
 break 
. := strconv.Atoi(num[firstEnd+l : secondEnd+1])
---
## Page 417
代码
解题思路
说明：
示例：
update(i,val）函数可以通过将下标为i的数值更新为val，从而对数列进行修改。
·给出一个数组，数组里面的数都是**可变**的，设计一个数据结构能够满足查询数组任意区间内
·数组仅可以在 update 函数下进行修改。
func (this *NumArray) Update(i int, val int) {
func Constructor307(nums []int) NumArray {
sumRange(0,2) -> 8 
sumRange(0,2) -> 9 
Given nums = [1, 3, 5] 
// Update define
// Constructor307 define
import （
package leetcode
·你可以假设 update 函数与 sumRange 函数的调用次数是均匀分布的。
update(1,2) 