bit shift gadget. Writing to the memory location from which %ecx is loaded would give a
rotation by a variable amount.
A.2.2 Exclusive Ors. Figure 35 gives the details for a (one-time) xor operation. To
make this operation repeatable, we would need to restore the values modiﬁed by the push
instructions, as we do for the repeatable add gadget given in Figure 11 on page 16.
A.2.3 Perturbing the Stack Pointer for Conditional Jumps. Figure 36 shows a gad-
get to perturb %esp depending on a value in memory. This completes the description of
conditional branch begun in Section 5.3.2.
B. SPARC IMPLEMENTATION DETAILS
B.1 Additional SPARC Gadgets
B.1.1 Increment, Decrement. The increment gadget (v1++) uses a single instruction
sequence for a straightforward load-increment-store, as shown in Figure 37. The decrement
gadget (v1--) consists of a single analogous load-decrement-store instruction sequence.
B.1.2 Logical And. The bitwise and gadget (v1 = v2 & v3) is described in Figure 38.
The ﬁrst two instruction sequences write the values of gadget variables v2 and v3 to the
third instruction sequence frame. The third sequence restores these source values, performs
the bitwise and, then writes the results to the memory location of gadget variable v1.
Permission to make digital/hard copy of all or part of this material without fee for personal or classroom use
provided that the copies are not made or distributed for proﬁt or commercial advantage, the ACM copyright/server
notice, the title of the publication, and its date appear, and notice is given that copying is by permission of the
ACM, Inc. To copy otherwise, to republish, to post on servers, or to redistribute to lists requires prior speciﬁc
permission and/or a fee.
c(cid:13) 20YY ACM 0000-0000/20YY/0000-0001 $5.00
ACM Journal Name, Vol. V, No. N, Month 20YY.
App–2
·
Ryan Roemer et al.
Algorithm GALILEO:
create a node, root, representing the ret instruction;
place root in the trie;
for pos from 1 to textseg len do:
if the byte at pos is c3, i.e., a ret instruction, then:
call BUILDFROM(pos,root).
Procedure BUILDFROM(index pos,instruction parent insn):
for step from 1 to max insn len do:
if bytes(cid:2)(pos − step) . . . (pos − 1)(cid:3) decode as a valid instruction insn then:
ensure insn is in the trie as a child of parent insn;
if insn isn’t boring then:
call BUILDFROM(pos − step,insn).
Fig. 33. The GALILEO Algorithm.
Fig. 34. Rotate 4 bits leftward of memory word.
B.2 Gadget API
Our SPARC gadget application programming interface allows a C programmer to develop
an exploit consisting of fake exploit stack frames for gadgets, gadget variables, gadget
branch labels, and assemble the entire exploit payload using a well-deﬁned (and fully doc-
umented) interface. With the API, an attacker only need deﬁne four setup parameters, call
an initialization function, then insert as many gadget variables, labels and operations as
desired (using our gadget functions), call an epilogue exploit payload “packing” function,
and exec() the vulnerable application to run a custom return-oriented exploit. The API
takes care of all other details, including verifying and adjusting the ﬁnal exploit payload to
guarantee that no zero-bytes are present in the string buffer overﬂow.
For example, an attacker wishing to invoke a direct system call to execve looking some-
thing like “execve("/bin/sh", {"/bin/sh", NULL}, NULL)” could use 13 gadget
API functions to create an exploit as shown in Figure 39.
ACM Journal Name, Vol. V, No. N, Month 20YY.
%esppop%ebxret+0x017383f8pop%ecxpop%edxret0x00000004(arbitrary)roll%cl,0x017383f8(%ebx)ret(arbitrary)Return-Oriented Programming
App–3
·
Fig. 35. Exclusive or from %eax.
The API functions create an array of two pointers to “/bin/sh” and NULL and call
execve with the necessary arguments. Note that the NULLs in g syscall function mean
optional gadget variable arguments are unused. The “prog” data structure is an internal
abstraction of the exploit program passed to all API functions. The standard API packing
prologue and epilogue functions (not shown) translate the prog data structure into a string
buffer-overﬂow payload and invoke a vulnerable application with the exploit payload.
This return-oriented program uses seven SPARC gadgets with 20 total instruction se-
quences, comprising 1,280 bytes for the buffer exploit frame payload (plus 336 bytes for
the initial overﬂow control hijack).
ACM Journal Name, Vol. V, No. N, Month 20YY.
%esppop%ebpretretpop%ebxret+0x48908c0xorb%al,0x48908c0(%ebx)and$0xﬀ,%alpush%ebpor$0xc9,%alretror$0x08,%eaxretpop%ebxret+0x48908c0xorb%al,0x48908c0(%ebx)and$0xﬀ,%alpush%ebpor$0xc9,%alretror$0x08,%eaxretpop%ebxret+0x48908c0xorb%al,0x48908c0(%ebx)and$0xﬀ,%alpush%ebpor$0xc9,%alretror$0x08,%eaxretpop%ebxret+0x48908c0xorb%al,0x48908c0(%ebx)and$0xﬀ,%alpush%ebpor$0xc9,%alretror$0x08,%eaxret(arbitrary)App–4
·
Ryan Roemer et al.
Fig. 36. Conditional jumps, task three, part two: Apply the perturbation in the word labeled “perturbation here”
to the stack pointer. The perturbation is relative to the end of the gadget.
Inst. Seq. Preset
Assembly
%i1 = &v1 ld [%i1], %i0
v1++
add %i0, 0x1, %o7
st %o7, [%i1]
ret
restore
Fig. 37.
Increment (v1++)
Inst. Seq.
Preset
%l7 = &%l3
m[&%l3] = v2
(+2 Frames )
%i0 = &v2
m[&%l4] = v3
%l7 = &%l4
(+1 Frame )
%i0 = &v3
Assembly
ld [%i0], %l6
st %l6, [%l7]
ret
restore
ld [%i0], %l6
st %l6, [%l7]
ret
restore
v1 = v2 & v3
%l3 = v2 (stored ) and %l3,%l4,%l2
%l4 = v3 (stored ) st %l2,[%l1+%i0]
%l1 = &v1 + 1
%i0 = -1
ret
restore
Fig. 38. And (v1 = v2 & v3)
B.3 Instruction Sequence Address Lookup
Return-oriented exploits require speciﬁc instruction sequences to be present at speciﬁc
addresses.
If libc changes, or is loaded at a different offset, then the exploit will fail.
(See Section 2.2 for more details.) Our initial system hard-coded the addresses of the
instruction sequences it relied on. Our deployed system generalizes this somewhat, by
searching the libc binary for each sequence as part of exploit compilation. This makes
our system robust against a limited class of changes to libc, for example those that add or
remove strings without changing the code itself. This search is implemented by running
instruction sequence address lookups as part of the make process.
ACM Journal Name, Vol. V, No. N, Month 20YY.
%esp(perturbationhere)pop%eaxretaddl(%eax),%espaddb%al,(%eax)addb%cl,0(%eax)addb%al,(%eax)retReturn-Oriented Programming
App–5
·
/* Gadget variable declarations */
g_var_t *num
g_var_t *arg0a
g_var_t *arg0b
g_var_t *arg0Ptr = g_create_var(&prog, "arg0Ptr");
g_var_t *arg1Ptr = g_create_var(&prog, "arg1Ptr");
g_var_t *argvPtr = g_create_var(&prog, "argvPtr");
= g_create_var(&prog, "num");
= g_create_var(&prog, "arg0a");
= g_create_var(&prog, "arg0b");
/* Gadget variable assignments (SYS_execve = 59)*/
g_assign_const(&prog, num,
g_assign_const(&prog, arg0a,
g_assign_const(&prog, arg0b,
g_assign_addr( &prog, arg0Ptr, arg0a);
g_assign_const(&prog, arg1Ptr, 0x0); /* Null */
g_assign_addr( &prog, argvPtr, arg0Ptr);
59);
strToBytes("/bin"));
strToBytes("/sh"));
/* Trap to execve */
g_syscall(&prog, num, arg0Ptr, argvPtr, arg1Ptr,
NULL, NULL, NULL);
Fig. 39. API Exploit
Our make rules take byte sequences that uniquely identify instruction sequences, dis-
assemble a live target Solaris libc, match symbols to instruction sequences, and look up
libc runtime addresses for each instruction sequence symbol. Thus, even if instruction
sequence addresses vary in a target libc from our original version, our dynamic address
lookup rules can ﬁnd suitable replacements (with a single make command), provided the
actual instruction bytes are available anywhere in a given target library at runtime.
Note that this system still requires that the exact instruction sequence be found some-
where in the target libc. In subsequent work [Roemer 2009], we generalized this to allow
gadgets to be constructed from any instruction sequence that matches a certain pattern.
Later work by others has provided for even more general gadget search [Hund et al. 2009;
Dullien et al. 2010].
B.4 Exploit Memory Layout
The memory layout of the safe call stack frame, gadget variable area, and exploit frame
collection, as set up by our compiler, is shown in Figure 40.
B.5 Example Exploit: Matrix Addition
Figure 41 shows an exploit language program (“MatrixAddition.rc”) that allocates two
4x4 matrices, ﬁlls them with random values 0-511, and performs matrix addition. Our
compiler produces a C language ﬁle (“MatrixAddition.c”), that when compiled (to “Ma-
trixAddition”), exec()’s the vulnerable application from Figure 29 with the program ex-
ploit payload. The exploit program prints out the two matrices and their sum, as shown
in Figure 42. The exploit payload for the matrix program is 24 kilobytes, using 31 gadget
variables, 145 gadgets, and 376 instruction sequences (including compiler-added variables
and gadgets).
ACM Journal Name, Vol. V, No. N, Month 20YY.
App–6
·
Ryan Roemer et al.
Fig. 40. Function Call Gadget Stack Layout
ACM Journal Name, Vol. V, No. N, Month 20YY.
Return-Oriented Programming
App–7
·
var n = 4;
var* mem, p1, p2;
var matrix, row, col;
// 4x4 matrices
// Pointers
srandom(time(0));
mem = malloc(128);
p1 = mem;
for (matrix = 1; matrix <= 2; ++matrix) {
// Seed random()
// 2 4x4 matrices
printf(&("\nMatrix %d:\n\t"), matrix);
for (row = 0; row < n; ++row) {
for (col = 0; col < n; ++col) {
// Init. to small random values
*p1 = random() & 511;
printf(&("%4d "), *p1);
p1 = p1 + 4;
// p1++
}
printf(&("\n\t"));
}
}
// Print the sum of the matrices
printf(&("\nMatrix 1 + Matrix 2:\n\t"));
p1 = mem;
p2 = mem + 64;
for (row = 0; row < n; ++row) {
for (col = 0; col < n; ++col) {
// Print the sum
printf(&("%4d "), *p1 + *p2);
p1 = p1 + 4;
p2 = p2 + 4;
// p1++
// p2++
}
printf(&("\n\t"));
}
free(mem);
// Free memory
sparc@sparc # ./MatrixAddition
Matrix 1:
493
369
Matrix 2:
98 299
94
502 427
299 219
47
31 481
95 238
16 447
27 202
312 129
223 201
27
6
136
38
162 420
345 107
499
76
Matrix 1 + Matrix 2:
520 300
343 610
318 439
375
435 132
664 847
644 326
546
43 523
Fig. 41. Matrix Addition Exploit Code
Fig. 42. Matrix Addition Output
ACM Journal Name, Vol. V, No. N, Month 20YY.