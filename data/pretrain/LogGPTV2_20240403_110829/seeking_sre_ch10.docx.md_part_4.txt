达到目标条件时，重复步骤 1（"目标是否仍然有效？"），然后执行步骤 2 到
4。    
# 尽可能多地摆脱交接
  如本章前面所述，孤岛及其伴随的有问题的越区切换和昂贵的请求队列会对组织造成相当大的损害。因此，很显然，解决此问题的第一个策略是消除尽可能多的孤岛和交接。
前瞻性组织正在从由职能技能排列的传统"垂直"结构转变为由价值流或产品对齐的"水平"结构。垂直结构是典型的按功能划分策略（开发、QA、操作、网络、安全等）。  水平结构由跨职能团队组成，这些团队可以拥有服务的整个端到端生命周期。
跨职能团队背后的理念是，他们将处理尽可能多的生命周期，而无需将工作交给其他团队。上下文中没有重大的交接或中断，每个人的工作都来自由共同优先级对齐的单个积压工作。瓶颈在很大程度上被避免，反馈循环更短，周期时间更快。如果确实出现问题，跨职能团队更容易响应和纠正问题，如[#cross_functional_teams_alleviate_the_need](#cross_functional_teams_alleviate_the_need)所示。
![跨职能团队减轻了许多交接的需要。](media/rId40.png){width="4.816053149606299in"
height="2.2608694225721786in"}
跨职能团队减轻了许多交接的需要
   跨职能团队通常也称为*面向服务的团队*，*面向产品的团队*或*面向市场的团队*。
这些标签强调，这些团队的目标是朝着业务可识别的价值交付给客户（即特定的客户可识别的服务）进行调整。
这种一致性使团队成员能够了解他们的工作如何影响业务，然后优化团队以最大化客户价值（而不是功能效率）。
虽然跨职能团队的概念看似简单，但实施是企业的重大结构和文化变革。
要理解为什么这是企业的重大转变，只要看看公司的会计规则。无可否认，这是一个大多数工程师认为他们永远不必去探索的领域。但是，一些基本概念提供了一个窗口，了解塑造企业的一些最基本的力量。
 来源于项目的资金通常是企业 IT
中的主要资金流。确定业务需求后，有一个流程来定义项目，并用特定预算为项目提供资金。融资后，项目将通过
IT
组织的各个功能孤岛进行，直到项目投入生产并被视为已完成。下一次迭代通常被视为具有不同预算的新项目。
基于项目的资金从几个方面增加了运营压力：
-   首先，服务和定制基础设施的激增为运营带来了大量辛劳。当组织以项目为导向时，团队会从一个项目转移到一个项目，通常会留下一些新软件和新基础架构的痕迹。团队转移到新项目使团队无法获得从运维反馈中学习。此外，正如本章前面所述，不断创建新网络新软件和基础结构（即使按照文档化的模式构建）会从未知条件中产生新的技术债务和错误。这些行为是放弃运维责任的团队的持续琐事来源。
-   其次，在推动项目到达终点时，运维问题在投入生产之前并不总是得到充分解决。在预算或预算下交付项目是交付团队所评判的。运维问题（如稳定性、可扩展性、可部署性、可配置性、可观察性和可管理性）往往得到肤浅的处理，或者往往是时间紧要关头的第一件事，这属于人的本性。在最坏的情况下，根本不考虑这些业务问题。尽管高价值开发资源能够快速回收并重新附加到项目，但运维团队必须抓住每个项目，并拥有自己的可靠性和规模。在传统模型中，这是一个连续的琐事流，通常需要增加员工人数。但是，即使假设运维团队具备在
    SRE
    模型中完成工程工作的技能，这些团队仍然处于永久追赶模式，如果工作水平过高，工程破产始终是一个风险。
-   第三，由于项目是主要融资工具，运维预算主要 被视为运维费用，或会计语言中的*运营支出（OpEx）*。OpEx
    是获得最严格审查和成本控制的预算类别，因为它直接影响本年度的盈利能力。其资金主要来自运维部的团队，它们自然容易受到按职能和效率授权的管理冲动的影响，这两种任务都鼓励孤立地工作。
琐事主要出现在运维工作，即
OpEx。 通常，所有基于项目的资金都是*CapEx*（资本支出）。构建或改进系统的工程工作通常是
CapEx，因为它正在改善资产（并且可以在几年内摊销，因此对当年度利润的负面影响较小）。由运维支出预算供资并进行效率管理的团队通常没有预算（或日程）来从事重要的工程工作。
要迁移到 SRE
模型，你不需要是会计专家。然而，它确实能让个人敏锐地感知资金如何在你的公司流动。如果你希望迁移到
SRE 不仅仅是职位的变更，则需要证明 SRE
团队应获得资金用于工程工作，并附加到拥有服务生命周期的团队，从开始到退役。从基于项目的资助到基于产品的资助（跨职能团队）的转移已经在敏捷和
DevOps讨论中受到重视。如果此想法在组织中取得进展，请尝试将其用于 SRE
转型。
在尝试跨职能团队和 SRE 的企业中，两种常见的模式正在形成。首先是让
SRE（和其他职能角色）加入专门的产品团队。这将创建跨职能团队，从开始到停用都可以拥有服务。开发和持续运维都发生在这些跨职能团队内部。从企业的角度来看，这通常被视为与传统组织模式的彻底背离。 有时，你可能会听到这称为
Netflix 模型。
第二种模式是让 SRE 保持一个不同的组织。开发团队具有 SRE
技能，最初将拥有服务的完整生命周期。当服务达到一定的性能和稳定性时，将正式移交给具有嵌入式开发技能的
SRE 团队。此 SRE
团队根据与开发团队达成的性能协议管理服务的可用性和可伸缩性。
如果开发团队所做的进一步更改将服务的性能降低到商定的级别以下，则有一种机制将更多的运维责任返回给开发团队。从企业的角度来看，这种模式的一般形状似乎最熟悉。然而，在这种模型中，工作是如何发生的，这仍然与传统的运维模式大相径庭。 有时这被称为*谷歌模式*。
当然，Netflix
和谷歌的员工都会很快指出，这两种模式都有很多细微差别。但是，这些描述为思考如何设计最适合公司独特条件的模型提供了一个可能的高级起点。
可用的选项可能会受到公司其他部门可接受的运维方式的限制。例如，改变组织结构以完全迁移到产品一致团队，至少需要开发和产品管理（这可能需要更广泛的业务讨论）。保持传统的发展和运作组织鸿沟的好处是，不会颠覆公司内根深蒂固的政治结构，但与此同时，这些政治结构可以强化旧的工作方法和无意间破坏改进工作。
Kata 流程步骤 2
中描述的可视化技术（掌握当前条件）有助于讨论组织结构变化。可视化不仅帮助人们了解工作流，还帮助他们了解组织结构如何影响工作流。
在你选择的任何模型中，当传统的仅开发团队和仅运维团队之间的墙壁被打破时，必然会受到文化冲击。SRE
在将运维技能和经验引入以前仅开发的团队方面发挥着至关重要的作用。在健身世界中，有一种说法是，"伟大的腹肌是在厨房，而不是在健身房。"同样，"大运维从开发开始，而不是从生产开始。"SRE
在将运维技能和纪律引入以前仅开发的团队方面发挥着关键作用。    
# 将剩余的移交替换为自助服务
   在企业中，总是存在无法将所有必需的技能和知识投入跨职能团队的情况。出于实际，财务或政治方面的原因，大多数大规模运维的公司都不可避免地要拥有职能专业的团队。
网络、平台、安全性和数据管理是企业依赖集中团队的常见领域，因为他们没有足够的专家来解决问题，或者需要（感知的或真实的）集中控制。
这些专业团队的存在意味着在组织的正常工作流程中无法避免移交。要么你需要其中一人的东西来完成你的工作，要么你在这些专业团队中，每个人都需要你的东西。
服务之间的依赖关系（企业中的生活事实）要求团队使用其他团队的服务，并对这些团队提出操作请求（例如，配置更改、运行状况检查、性能调优、部署协调和添加帐户）。这就产生了另一组不可避免的移交。
如前所述，每当存在移交点，并且工作必须从一个团队的上下文移动到另一个团队的上下文时，孤岛效应就有机会占据上风并产生问题。
由于无法摆脱所有移交，因此你需要应用技术和工具来减轻这些移交的负面影响。部署工单驱动请求队列的传统解决方案成本高昂，对组织有害，并且应该只是最后的手段。
相反，最佳解决方案应该是在这些移交点部署自助服务功能。这些自助服务功能应提供基于拉取的接口，以提供请求队列另一端的人以前需要执行的任何运维操作（调查性能问题、更改网络/防火墙设置、添加容量、更新数据库架构、重新启动等）。
自助服务的要点是远离需要完成运维任务的人员。与其让某人填写工单在请求队列中排队，不如在需要他们填写时，为他们提供
GUI、API
或命令行工具来自己执行此操作。此功能消除了等待时间，缩短了反馈循环，避免了沟通错误，并提高了以前必须提出这些请求的团队的劳动能力，从而将他们从重复请求中释放，从而专注于增值工程工作。
## 自助服务不仅仅是一个按钮
自助服务的概念并不新鲜。但是，传统的自助服务方法是让特权操作团队创建一些静态的"按钮"，让特权较低的团队推送（例如，为新*.war*文件进行部署的按钮）。此静态方法在少数情况下有效。此外，它仍然将高特权团队作为瓶颈，因为他们需要构建和维护按钮和底层自动化。仅此维护负担就限制了运维组织可能公开的静态自助服务功能数量。
 为了最大限度地提高自助服务的有效性，需要提供定义和执行自动化过程的能力，如[#traditional_ticket_driven_request_fulfill](#traditional_ticket_driven_request_fulfill)所示。当然，需要建立约束以强制实施安全边界并有助于防止错误，但提供定义*和*执行的能力确实可以提供最大的价值。
![传统的工单驱动请求履行与完全自助服务。](media/rId43.png){width="4.775919728783902in"
height="1.9397987751531058in"}
传统的工单驱动请求履行与完全自助服务
  例如，考虑来自 Amazon Web 服务 （AWS）
的[弹性计算云（EC2）](https://aws.amazon.com/ec2/)服务。按下按钮即可获取正在运行的虚拟机，这样的能力很有趣。但是，通过制作自己的计算机映像（AMI）和配置来控制自己命运的能力是革命性的。它赋予个人权力，并允许团队按照自己的节奏脱钩和移动。但是，它不是不受限制的访问。由于安全原因，用户受到[AWS
及其自选安全策略](https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html)的限制。用户的选择也受到限制，提供"护栏"，以防止系统用户犯某些类型的错误，或影响其他用户的性能。在此示例中，定义和执行自动化的能力推送给最终用户，并且由运维人员（本例中为
AWS）和最终用户共享治理。