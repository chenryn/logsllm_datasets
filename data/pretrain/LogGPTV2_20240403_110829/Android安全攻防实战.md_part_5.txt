拓展阅读
在使用模拟器时，你还能用到许多其他参数。如果你想再多学一点的话，请进
一步阅读以下链接中提供的文档。
● http://developer,android, com/tools/devices/managing-avdscndline ,htm1 
● http:/ /developer android.com/tools/help/android.htn1 .
①请不要被参数 partition 误导了。在*nix 系统中没有分区（partition）这一概念。这个partition 是
指安装了Android 操作系统的那个闪存。在Android 系统中点击设置→存储→内部存储空间看
到的就是这个东西。也就是手机在没有插外部扩展卡时的存储大小。—译者注
②如果你在创建这个AVD时已经设好了系统分区的大小，那么这个参数将不会发生任何作用。
译者注
20
---
## Page 39
第1章Android开发工具
1.9使用Android调试桥（ADB）与AVD交互
对于开发者或Android 安全工程师/审计人员来说，与虚拟Android设备进行交互
操作是最为重要的技能之一。Android 调试桥（Android Debug Bridge，ADB）提供了
与Android设备中原生级的（native-level）组件进行交互所必需的功能。它让开发者
或安全工程师能够读取文件系统目录，与包管理器，应用管理器，内核驱动接口以
及初始化脚本等进行交互。
怎么做
使用ADB与虚拟设备交互的方法如下。
1.首先，你需要先启动一个AVD，或者也可以把你自己的Android设备通过
USB线连接到你使用的计算机上—这台计算机上应该已经安装了SDK.用
下面这条命令可以启动指定的AVD：
[eueu]  pae-xogetne
2.在Windows 计算机上，我们可以使用下面这条命令列出所有已经连上来了的
Android 设备：
C;\\[sdk 的安浆鸡径]\platfomm-tools\adb devices
或者，如果你用的是一台Linux计算机，可以使用下面这条命令：
[sdk 的安第路径]/platform-tools/adb devices
这条命令将会列出所有已经连上的设备，这些基本上也就是你能够用ADB
连接的设备了，你需要注意列表中的设备名，在用ADB对它们进行连接时，
你需要用它来标识出你要连的设备。
3.使用下面这条命令，你可以运行一个连到你的Android设备的 shell：
/sdk/platform-tools/abd shel1 -s[指定的设条]
或者，如果你正好知道，你所要连接的Android设备是唯一的一个虚拟设备，
你也可以使用下面这条命令：
/sdk/platform-tools/adb shel1 -e
或者，如果该设备是唯一的一台通过USB连接的设备。你也可以使用下面这
条命令：
/sdk/platform-tools/adb shel1 -d
-d，-e和-p参数也可以用在其他ADB 命令中的，并非只能用在连接shell这
21
---
## Page 40
Android安全攻防实战
一场景中。如果一切正常，你应该能看到类似下面这串东西的一个提示字符
串一这个字符串表示命令行shell已经可以使用了：
rootlandroid$
你现在已经有了一个功能完整的shell了，用你的指尖已经能执行一些传统的
UNIX/Linux命令和实用程序了。探索一下文件系统，对什么东西放在哪儿有
个初步印象吧。
再说两句
现在我们已经连上了一台设备。我们现在需要了解一些与浏览和使用Android
文件系统有关的命令。下面这张小小的列表算是开胃菜。
。Is{path)：这条命令将列出path目录下的所有文件或文件夹。
·cat{file)：这条命令将在屏幕上打印出文件（file）的文本内容。
·cd{path)：这条命令将把当前的工作目录切换到path 指定的目录上去。
·cd./：这条命令将把当前的工作目录切换到上一级目录上去。
。pwd这条命令将输出当前工作目录。
·id：这条命令将会显示你的用户ID。
拓展阅读
● http://developer android.com/tools/he1p/adb .html .
1.10从AVD上复制出/复制入文件
在即将开始的Android平台的探险中，某些情况下，你或许想要从Android设备
（无论它是个虚拟设备还是个真实的设备）上复制出一些文件来。复制文件的操作很
简单，你所需不过是如下。
·连上相关设备。
·明确你要复制出/复制入的文件在AVD中的位置。
。明确复制出/复制入的文件在你本地计算机上的位置。
怎么做·.
只需如此操作，你就能通过ADB访问你Android设备上的文件。
1.要完成这一任务很简单，你只需从你的命令行接口输入下面这条命令。
adb（参数}pul1[要复制的文件的路径][存放复制出来的文件的本地路径]
22
---
## Page 41
第1章Android开发工具
2.要把文件复制到AVD里去，你只需执行下面这条命令。
adb（参数}push[要复制的文件在本地的路径][该文件在avd 中的存放路径]
1.11通过ADB在AVD中安装apP
在许多情况下，你需要把你本地文件系统中的一个app的安装包（Application
Packages，APK）安装到一个虚拟Android设备/你自己的Android设备上去。一般情
况下，基本的Android安全工具在Google应用商店里是找不到的一因为它们会给
不守规矩的用户带来更多危险，也有可能会被恶意软件滥用一而需要手工安装。此
外，你以后也可能会要开发app或Android原生二进制程序来演示或验证某些漏洞利
用的方法。
怎么做
使用ADB安装一个APK的步骤如下。
1.你必须知道APK在你的计算机上的准确位置。找到它之后，用下面这条命
令把它提交上去。
adb（参数)instal1[apk 的存放路径]
2.你也可以使用指定设备的命令，缩小要安装APK的设备的范围。如下面这
条命令所示。
adb(-e 1 -d 1-p }Lnsta11[apk 的存路征]
23
---
## Page 42
第2章实践app安全
在这一章里，我们将做这些实验：
·检查app 的证书和签名；
·对 Android app 签名：
·验证app 的签名：
·探索AndroidManifest.xml文件：
·通过ADB与activity管理器交互：
·通过ADB 提取app里的资源。
2.1简介
在这一章中，我们将开始在实践中通过实际运用，来理解Android安全架构中的
一些组件一特别是与app保护相关的部分。“不论是什么，在把手弄脏之前，你都
没法真正理解它。”这就是这一章企图启发你去做的。静下心来，动手实践一些安全
机制，剖析它们，真正了解它们是怎么回事。
我们在此只会阐述最基本的一些技巧和技能：你可能想逆向一个app或对
Android app做些人工的安全评估，或者你仅仅是对app 安全感兴趣面已，那么，它
们可以让你从一个app中挖掘到信息。
2.2检查aPp的证书和签名
app的证书是在被推送到app市场的app中，表示开发者身份的，它是以把开发
者的id和他们的app以密码学的方式关联起来的方式实现的。通过提供一个简单面
---
## Page 43
第2章实践app安全
app会被其他app所冒充。所有的app在被安装之前，都必须要经过签名。
Android app 的签名实际上是对JAR签名的重新利用。它的工作原理是用一个密
码学意义上的hash 函数计算app 的内容。我们马上就会看到，APK文件的内容确实
是会被计算hash的。这个hash随后会与一张表示开发者身份的证书绑定在一起并发
布出来，即把它与开发者的公钥，实际上也就是和他/她的私钥（因为它们语义上是
相关的）联系在一起。证书通常是由开发者的私钥加密的，这也就意味着，它是白
签名的证书。没有可信第三方来保证，开发者确实拥有给定的公钥这一事实。这一
过程产生了一个签名，并随着这个公钥一起被发布或公开出来。
每一个app的签名都是唯一的，找出app的证书和签名是一个重要的技能，你可
能会需要在一个设备上找出恶意app的签名，或者你也有可能需要把使用同一个公钥
签名的 app 全部列出来。
准备工作
在开始之前，你必须在机器上预先装上以下这些软件。
·Java JDK：它既可以装在UNIX/Linux 的发布版本上也可以装在微软的
Windows系统上，详见第1章中的介绍。
·Android SDK：它可以装在你的 Linux Debian 或者微软的 Windows 系统上，第
1章中也讨论过了。
·WinZip（如果你用Windows 系统）：可以从http://www.winzip.com下载到它，
如果你用的是Windows7，甚至都不需要特意去安装它。
·Unzip（如果你用Debian/UbuntuLinux系统）：在终端里输入下列命令即可完
成安装。
dtzun Tteasug 4e6de opns
假设我们还没有选好要检查其证书的apP一同时假设你就是想完全替换掉演
示app 中的证书。那么我们只需从一台Android虚拟设备中随便找个app复制出来。
这一节还将一步一步地教你如何创建一个实验用的Android虚拟设备。
请用下面给出的方法创建一个Android虚拟设备，这样可以确保你能访问到（与
作者）一样的app、一样的虚拟设备，以及最重要的—一样的证书。这样就能很方
便地检查你的操作是否正确了。在创建Android虚拟设备之前，应该确认一下，Android
SDK工具是不是已经更新到了最新的APIlevel和模拟器镜像了。如果你对如何升级
Android SDK还有什么疑问，请再看一遍第1章。
25
---
## Page 44
Android安全攻防实战
好了，现在就开始吧。我们先用下面这条命令来创建一个Android虚拟设备
(AVD)。
1.打开一个命令行窗口，执行下面这条命令，如图2.1所示。
[你安装 sdk 的路径]/android cxeate avd -n[你的 avd 的名宇]-t[系统镜像的 id]
图 2.1
或者，如果你使用的是Windows计算机，请输入：
C:\[你 sdk 的安累路径]\android create avd n[你的 avd 的名字] -t [系统镜像的 id]
2.如果一切正常，你就已经创建好了一个AVD了。现在可以开始了，用下面
这条命令运行这个AVD，如图2.2所示。
[你 sdk 的安第鸡径] /emulator avd [你的 avd 的.名字]no-bootanim
图2.2
3.你将看到一个模拟器几乎是立马就弹了出来，得让它启动一会儿。当它完全
启动完毕之后，你会看到一个锁屏界面。这意味着你可以使用ADB，复制几个
APK文件出来供我们分析了。你可以输入下面这条命令复制一个APK文件。
26
---
## Page 45
第2章实践app安全
adb pu11 /system/app/Contact8.apk
图2.3就是这张实际操作时的截图。
2129149
图2.3
如果你还想找其他app分析的话，列出 system/app/目录下的所有文件/文件夹，
你可以发现Contact和其他一些app，如图2.4所示。
XA98
图 2.4
你只要把Contact这个app复制出来就可以了。如果还有什么不明白的地方，请
再读一遍第1章，里面详细介绍了如何创建一个Android虚拟设备，并从中复制文件。
怎么做
现在你的硬盘上就有了要分析的APK文件的本地拷贝了。我们现在可以开始检
查app证书了。要检查app的公钥证书和签名，你首先要解压APK文件。如果你知
道怎么解压压缩文件的话，这简直就是小菜一碟。因为APK文件实际上就是一个ZIP
文档—只不过是被改了名而已。我们可以通过以下几个步骤解压。
1.如果你是在Windows系统中，或许需要确认一下是不是已经安装了WinZip。
你要做的就是用WinZip打开这个APK文件，它应该能像其他ZIP文件一样
被打开。在Linux Debian系统中，你需要把这个文件复制到一个扩展名为zip
27
---
## Page 46
Android安全攻防实战
的文件中去，这样WinZip就会很高兴地把它解压出来。
cp Contacts.apk Contacts zip
2.把文件解压到适当的位置上去。你可以用下面这条指令完成这一任务，如图
2.5所示。
unzip Contacts.zip
1e-1ssd6eAa/-1ApTr31qi
2k3176makank3170makan
40 2013-0-13 33
1k3170makan k3170makan 2120149 2013-05-13 23:32 Contacts.apk
k3170nakangb14ckvidow:-/myappssunzip Contacts.zip
Contacts.zip
res/color/dialer_button_text.xml
oManifest.xnl
res/drauable-hdp1/ab solid custom_blueinve
ry_text _color.xnl
res/drawable-hdpi/ab stacked op
darkholo.9.
rse_holo.9.png
ei/has
ge action sns.p
res,
star
dates
res,
res,
res/drawal
dpi/btn staroffnorsal
res/drawab
res/draval
hdpi/dial back
tacts widget preview.p
.previer.n
res/drawable-
图 2.5
解压文件之后，你的目录应该看上去是，如图2.6这个样子的。
3170
5476
Daakan
omakar
2128149
2013-5-1323:32Contacts.apk
2126149
PETA-IMF
图 2.6
①显然，此处的“WinZip”应为“UnZip 之误”。译者注
28
---
## Page 47
第2章实践app安全
3.找到名为"META-INF”的那个文件夹，其中含有签名文件和真正的CERT.RSA