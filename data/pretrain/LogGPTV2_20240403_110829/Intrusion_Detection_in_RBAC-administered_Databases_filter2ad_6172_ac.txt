R
 2
 3
 4
Number of Roles
 5
 6
 0
 1
 2
 3
 4
Number of Roles
 5
 6
Figure 4. Test Case 3: Precision and Recall statistics
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:10:32 UTC from IEEE Xplore.  Restrictions apply. 
Overall, the experimental evaluation reveals that in most
cases m and f-triplets capture the behavior of the data much
better than the c-triplets.
Triplet type
c-triplet
m-triplet
f-triplet
False Negatives(%)
2
2
3.4
False Positives(%)
18
15
16
Table 2. Real data, False negatives/positives
statistics
Triplet type
c-triplet
m-triplet
f-triplet
Recall(%)
82
85
84
Precision(%)
97.62
97.7
96.1
Table 3. Real data, Precision and Recall sta-
tistics
4.4. Performance
One of the many desirable properties of Naive Bayes
Classiﬁer is its low computational cost. This is due to the
simple underlying probability model that assumes condi-
tional independence among the attributes. Due to this, the
role proﬁles can be built by the classiﬁer in just one pass
over the training data.
In this section we present results
demonstrating the low execution time of our approach, for
both the training phase and the intrusion detection phase.
Figure 5 shows the training time as a function of the
number of tuples in the training data, for the three proposed
triplet representations. As expected, the training time in-
creases linearly with the number of tuples in the training
data. Moreover, the training time for c-triplets is negligible,
since c-triplets need just three attributes to be represented.
One notable observation is that the training time for both m
and f-triplets is of the same order of magnitude. This is be-
cause both m and f-triplet representations contain the same
number of attributes. Still, the time for f-triplets is higher
than m-triplets approximately by a factor of 3. The reason
for this difference is the vectors of vectors representation of
f-triplets which makes their attribute-domain values much
larger than that of m-triplets. Figure 6 shows the training
time as a function of the number of attributes in the under-
lying database tables. Not surprisingly, the training time
increases with the number of attributes for both m and f-
triplets. Again, the order of magnitude of training time is
same for both of them.
The time complexity of the detection algorithm for our
classiﬁer is in O(R × A) where R is the number of roles
c-triplet
m-triplet
f-triplet
 2000
 1500
 1000
 500
 0
 1000  2000  3000  4000  5000  6000  7000  8000  9000  10000
Number of training tuples
Figure 5. Training Time vs Training Data
 2000
 1500
 1000
 500
 0
 10
 20
 30
m-triplet
f-triplet
 50
 70
 40
Number of Attributes
 60
 80
 90
 100
)
s
m
n
i
(
i
e
m
T
g
n
n
a
r
T
i
i
l
i
)
s
m
n
i
(
s
e
p
u
t
0
0
0
5
r
o
f
e
m
T
g
n
n
a
r
T
i
i
Figure 6. Training Time vs Number of At-
tributes
present in the database and A is the number of attributes
considered by the classiﬁer. Figure 7 gives the variation of
the detection time per query for databases with different to-
tal number of attributes. As expected, the detection time
increases almost linearly for increasing values in the num-
ber of attributes for both m and f-triplet types. However,
the worst-case scenario is still 1.54 milliseconds per query
(f-triplets, 100 attributes), which is negligible.
Overall, the performance experiments conﬁrm the low
overhead associated with our approach. This gives us an
opportunity to explore the possibility of integrating our ap-
proach with other query processing features of a database
for an integrated online ID mechanism embedded inside a
database.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:10:32 UTC from IEEE Xplore.  Restrictions apply. 
m-triplet
f-triplet
tained in them.
6. Acknowledgments
)
s
m
n
i
(
l
e
p
u
t
r
e
p
i
e
m
T
n
o
i
t
c
e
t
e
D
 2.5
 2
 1.5
 1
 0.5
 0
 10
 20
 30
The authors would like to thank the anonymous refer-
ees for the many invaluable suggestions that lead to a much
improved version of this paper.
References
[1] K. H. A. Hoglund and A. Sorvari. A computer host-based
user anomaly detection using the self-organizing map.
In
Proceedings of the IEEE-INNS-ENNS International Joint
Conference on Neural Networks (IJCNN), 2000.
[2] R. Agrawal, R. J. B. Jr., C. Faloutsos, J. Kiernan, R. Rantzau,
and R. Srikant. Auditing compliance with a hippocratic data-
base. In Proceedings of the 30th international conference on
Very Large Data Bases (VLDB), pages 516–527, 2004.
[3] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Hippocratic
databases. In Proceedings of the 28th international confer-
ence on Very Large Data Bases (VLDB), pages 143–154.
Morgan-Kaufmann, 2002.
[4] A. Anton, E.Bertino, N.Li, and T.Yu. A roadmap for com-
prehensive online privacy policies. In CERIAS Technical Re-
port, 2004-47, 2004.
[5] S. Axelsson. Intrusion detection systems: A survey and tax-
onomy. Technical Report 99-15, Chalmers Univ., Mar. 2000.
[6] C. Chung, M. Gertz, and K. Levitt. Demids: a misuse detec-
tion system for database systems. In Proceedings of Integrity
and Internal Control in Information Systems: Strategic Views
on the Need for Control. IFIP TC11 WG11.5 Third Working
Conference, 2000.
[7] P. Domingos and M. J. Pazzani. On the optimality of the sim-
ple bayesian classiﬁer under zero-one loss. Machine Learn-
ing, 29(2-3):103–130, 1997.
[8] Y. Hu and B. Panda.
Identiﬁcation of malicious transac-
tions in database systems.
In Proceedings of the Interna-
tional Database Engineering and Applications Symposium
(IDEAS), 2003.
[9] Z. Jian-ming and M. Jiang-feng. Intrusion-tolerant based ar-
chitecture for database system security. Journal of Xidian
University, 3(1), February 2003.
[10] J. B. Joshi, R. Bhatti, E. Bertino, and A. Ghafoor. Access-
control language for multidomain environments. IEEE Inter-
net Computing, 8(6):40–50, 2004.
[11] J.Vaidya and C. Clifton. Privacy-preserving data mining:
Why, how, and when. IEEE Security and Privacy, 2(6):19–
27, 2004.
[12] G. Karjoth. Access control with ibm tivoli access man-
ager. ACM Transactions on Information and Systems Secu-
rity (TISSEC), 6(2):232–257, 2003.
 50
 70
 40
Number of Attributes
 60
 80
 90
 100
Figure 7. Detection Time vs Number of At-
tributes
5. Conclusions and Future Work
In this paper we investigated incorporating an intrusion
detection mechanism inside a DBMS. We considered three
models, of different granularity, to represent the log records
appearing in the database log ﬁles. In that way, we managed
to extract useful information from the log records regarding
the access patterns of the users. Since role information was
available in the log records, we used it for training a clas-
siﬁer that was then used as the basic component for our in-
trusion detection mechanism. Experimental results for both
real and synthetic data sets showed that our methods per-
form reasonably well.
As part of future work, we will investigate the case when
role information is not present in the log records. The prob-
lem of forming user proﬁles is then clearly unsupervised
and thus can be treated similarly to a clustering problem. In
this case, standard clustering algorithms can be employed
for constructing groups of users that seem to behave simi-
larly. These groups may also help the Database Adminis-
trator (DBA) to decide which roles to deﬁne. The intrusion
detection phase can then be addressed as an outlier detec-
tion problem. Another direction for future research is to
maintain sub-proﬁles within a role proﬁle to capture the nor-
mal user behavior in a more intuitive sense. For example,
consider the behavior of a reservation agent that needs to
add bookings, modify bookings, cancel bookings, forward
bookings, run statistics on bookings, etc..Each of these can
be a separate class of behavior within the proﬁle of a reser-
vation agent role. The intrusion detection task can then be
carried out as a combination of supervised and anomaly de-
tection approaches. In addition to this, we will also explore
better representations of SQL queries so as to capture not
only the syntactic but also the semantic information con-
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:10:32 UTC from IEEE Xplore.  Restrictions apply. 
[13] T. Lane and C. E. Brodley. Temporal sequence learning and
data reduction for anomaly detection. ACM Transactions on
Information and Systems Security (TISSEC), 2(3):295–331,
1999.
[14] V. Lee, J. Stankovic, and S. Son. Intrusion detection in real-
time databases via time signatures.
In Proceedings of the
Sixth IEEE Real-Time Technology and Applications Sympo-
sium (RTAS), 2000.
[15] K. LeFevre, R. Agrawal, V. Ercegovac, R. Ramakrishnan,
Y. Xu, and D. J. DeWitt. Limiting disclosure in hippocratic
databases. In Proceedings of the 30th international confer-
ence on Very Large Data Bases (VLDB), pages 108–119,
2004.
[16] P. Liu. Architectures for intrusion tolerant database systems.
In Proceedings of the 18th Annual Computer Security Appli-
cations Conference (ACSAC), 2002.
[17] T. Lunt, A. Tamaru, F. Gilham, R. Jagannathan, P. Neumann,
H. Javitz, A. Valdes, and T. Garvey. A real - time intrusion
detection expert system (ides) - ﬁnal technical report. Techni-
cal Report, Computer Science Laboratory, SRI International,
1992.
[18] T. M. Mitchell. Machine Learning. McGraw-Hill, 1997.
[19] R. Sandhu, D. Ferraiolo, and R. Kuhn. The nist model for
role based access control: Towards a uniﬁed standard.
In
Proceedings of the 5th ACM Workshop on Role Based Access
Control, 2000.
[20] R. Shariq, M. Alberto, S. S., and R. Prasan. Extending
query rewriting techniques for ﬁne-grained access control.
In Proceedings of ACM SIGMOD, International Conference
on Management of Data, 2004.
[21] L. Sweeney. Achieving k-anonymity privacy protection us-
ing generalization and suppression.
International Journal
on Uncertainty, Fuzziness and Knowledge-based Systems,
10(5):571–588, 2002.
[22] R. Talpade, G. Kim, and S. Khurana. Nomad: Trafﬁc-based
network monitoring framework for anomaly detection.
In
Proceedings of the 4th IEEE Symposium on Computers and
Communications, 1999.
[23] V. S. Verykios, E. Bertino, I.Nai-Fovino, L. P. Provenza,
Y. Saygin, and Y.Theodoridis. State-of-the-art in privacy pre-
serving data mining. SIGMOD Record, 33(1):50–57, 2004.
[24] S. Wenhui and T. Tan. A novel intrusion detection system
model for securing web-based database systems.
In Pro-
ceedings of the 25th Annual International Computer Soft-
ware and Applications Conference (COMPSAC), 2001.
[25] Q. Yao, A. An, and X. Huang. Finding and analyzing data-
base user sessions. In Proceedings of the 10th International
Conference on Database Systems for Advanced Applications
(DASFAA), 2005.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:10:32 UTC from IEEE Xplore.  Restrictions apply.