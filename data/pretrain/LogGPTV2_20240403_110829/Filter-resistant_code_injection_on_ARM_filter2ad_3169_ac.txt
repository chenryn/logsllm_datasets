trick explained in Section 4.2, the code above starts by setting reg-
ister r7 to -1 and sets register r3 to 0. One is added to the value
in register r5 by subtracting the value -1 from it and rotating this
value by 0 bits.
r3 , #57
r3 , #56
r5 ,
r 7 ROR r 3
r7 ,
r3 ,
r5 ,
Subtract works in a similar fashion except a positive value is used
r7 ,
r3 ,
r5 ,
r 7 ROR r 3
r3 , #55
r3 , #56
r5 ,
as argument.
SUBPL
SUBPL
SUBPL
The above examples show the +1 and −1 operations respec-
tively. While these would be enough to calculate arbitrary values
given enough applications, it is possible to use larger values by set-
ting r7 to a larger positive or negative value. However, for even
larger values it is also possible to set r3 to a nonzero value. For
example, if r3 is set to 20, then the last instruction will not subtract
one, but will instead subtract 4096.
As can be seen from the example above, we can also subtract
and add registers to and from each other (for addition, we of course
need to subtract the register from 0 ﬁrst).
Multiplication and division follow from repeated application of
addition and subtraction.
4.4 Bitwise operations
This section discusses the different bitwise operations.
4.4.1 Rotating and shifting
Instructions on ARM that use the arithmetic addressing mode,
explained in Section 2.2.2, can perform all kinds of shifts and rota-
tions on the last operand prior to using it in a calculation. However,
not all variants can be used in alphanumeric instructions. In partic-
ular, none of the left shift and left rotate variants can be used. Of
course, left shifting can be emulated by multiplying by a power of
2, and left rotates can be emulated with right rotates.
4.4.2 Exclusive OR
The representation of the Exclusive OR (EOR) instruction is al-
phanumeric and is thus one of the instructions that can be used in
our shellcode. However the same restrictions apply as for subtract.
4.4.3 Complement
By applying an Exclusive OR with the value -1 we can achieve
a NOT operation.
4.4.4 Conjunction and disjunction
Conjunction can be emulated as follows: for every bit of the
two registers being conjoined, ﬁrst shift both registers left2 by 31
minus the location of the current bit, then shift the results to the
right so the current bit becomes the least signiﬁcant bit. We can
now multiply the registers. We have now performed an AND over
those bits. Shifting the result left by the amount of bits we shifted
right will place the bit in the correct location. We can now add this
result to the register that will contain the ﬁnal result (this register
is initialized to 0 before performing the AND operation). This is a
rather complex operation, which turns out not to be necessary for
proving Turing completeness or for implementing shell-spawning
shellcode, but it can be useful if an attacker must perform an AND
operation.
Given this implementation of AND and the previously discussed
NOT operation, OR follows from the application of De Morgan’s
law.
4.5 Memory access
Arbitrary values can be read from memory by using the LDR or
LDRB instruction with a register which points 48 bytes further than
the memory we wish to access:
LDRPL
LDRPLB
r5 ,
r3 ,
[ r3 , #−48]!
[ r3 , #−48]
The ﬁrst instruction will load the four bytes stored at memory
location r3 minus 48 into r5. The offset calculation is written
back into r3 in order to make the instruction alphanumeric. The
second instruction will load the byte pointed to by r3 minus 48
into r3.
Storing bytes to memory can be done with the STRB instruction:
STRPLB
r5 ,
[ r3 , #−48]
In the above example, STRB will store the least signiﬁcant byte
of r5 at the memory location pointed to by r3 minus 48.
The STR instruction cannot be used alphanumerically. An alter-
native to using STR is to use the STM instruction, which stores mul-
tiple registers to memory. This instruction stores the full contents
of the registers to memory, but it cannot be used to store a single
register to memory, as this would result in non-alphanumeric code.
Another possibility to store the entire register to memory is to
use multiple STRB instructions and use the shift right capability
that was discussed earlier to get each byte into the correct location
r7 , ROR r 3
r3 , ROR r 5
r5 , #0
MOV
r3 , #16
MOV
r5 ,
r3 ,
SUBPL
SUBPL
r3 ,
r5 ,
[ r13 , #−50]
STRPLB r3 ,
MOV
SUBPL
SUBPL
2Left shifting is done by multiplying by the correct power of 2, as
discussed in 4.4.1.
r3 , #24
r3 ,
r5 ,
r5 ,
r3 ,
r7 , ROR r 3
r3 , ROR r 5
16STRPLB r3 ,
[ r13 , #−49]
The code above shows how to store the 2 most signiﬁcant bytes
of r73 to r13 minus 49 and r13 minus 50 respectively.
4.6 Control ﬂow
This section discussed unconditional and conditional branches.
4.6.1 Unconditional branches
As discussed in Section 3.1, the branch instruction requires a 24
bit offset from pc as argument, which is shifted two bits to the left
and sign extended to a 32 bit value. The smallest alphanumeric
offset that can be provided to branch corresponds to an offset of
12MB. In the context of shellcode, this offset is clearly not very
useful. Instead, we will use self-modifying code to rewrite the ar-
gument to the branch before reaching this branching instruction.
This is done by calculating each byte of the argument separately
and using STRB with an offset to pc to overwrite the correct in-
struction.
SUBPL r3 , pc , #48
r8 , #56
SUBPL r5 ,
SUBPL r7 ,
r8 , #108
r3 ,
SUBPL r3 ,
r3 ,
SUBPL r3 ,
SUBPL r3 ,
r3 ,
r7 , ROR r 5
r7 , ROR r 5
r7 , ROR r 5
SUBPL r7 ,
STRPLB r7 ,
r8 , #54
[ r3 , #−48]
. b y t e
0x30 , 0 x30 , 0 x30 , 0 x90
The above code copies pc minus 48 to r3 and sets r5 to 0 (we
assume r8 contains 56). It then sets r7 to -52, subtracts this 3
times from r3. This will result in r3 containing the value pc plus
108. When we subsequently write the value r7 to r3 minus 48 we
will in effect be writing to pc plus 60. Using this technique we can
rewrite the arguments to the branch instruction (0x30 in the above
example).
This must be done for every branch in the program before the
branch is reached. However as discussed in section 3.3 we can’t
simply write self-modifying code for ARM due to the instruction
cache: this cache will prevent the processor from seeing our modi-
ﬁcations. In section 4.7 we discuss how we were still able to ﬂush
the cache to allow our self-modiﬁcations to be seen by the proces-
sor once all branches have been rewritten.
4.6.2 Conditional branches
In order to restrict the different types of instructions that should
be rewritten, compare instructions and the corresponding condi-
tional branch are replaced with a sequence of two branches that use
only the PL and MI condition codes. Some additional instructions
must be added to simulate the conditional behavior that is expected.
As an example, imagine we want to execute the following in-
structions which will branch to the endinter label if r5 is equal
to 0:
CMP
BEQ
r5 , #0
e n d i n t e r
These two instructions can be rewritten as (r8 contains 56):
r3 ,
r8 , #52
SUBPL
3The code is slightly simpliﬁed for better readability in that we use
MOV, which is not alphanumeric, to load the values to r3 and r5
r3 , ROR #2
r5 , ROR #2
SUBPLS
BPL
SUBMI
SUBMIS
SUBPLS
BPL
SUBMIS
n o t n u l l :
r3 ,
r5 ,
n o t n u l l
r5 ,
r7 ,
r5 ,
e n d i n t e r
r7 ,
r8 , #57
r8 , #56
r3 ,
r8 , #56
By observing whether the processor changes condition state af-
ter subtracting and adding one to the original value, we can deduce
whether the original value was equal to zero or not. If we subtract
one, and the state of the processor remains positive, the value must
be greater than zero. If the processor changes state, the value was
either zero or a negative number. By adding one again, and verify-
ing that the processor state changes to positive again, we can ensure
that the original value was indeed zero.
As with the unconditional branch, the actual branching instruc-
tion is not available in alphanumeric code, so again we must over-
write the actual branch instruction in the code above.
4.7 System calls
As described in Section 3.3, the instruction cache of the ARM
processor will hamper self-modifying code. One way of ensuring
that this cache can be bypassed, is by turning it off programmati-
cally. This can be done by using the alphanumeric MRC instruction,
and specifying the correct operand that turns the cache off. How-
ever, as this instruction is privileged before ARMv6, we will not
use this approach in our shellcode.
Another option is to execute a system call that ﬂushes the cache.
This can be done using the SWI instruction, given the correct oper-
and. The ﬁrst byte of a SWI instruction encodes the condition code
and the opcode of the instruction. The other three bytes encode the
number of the system call that needs to be executed. Fortunately,
the ﬁrst byte can be made alphanumeric by choosing the MI condi-
tion code for the SWI instruction.
On ARM/Linux, the system call for a cache ﬂush is 0x9F0002.
None of these bytes are alphanumeric and since they are issued as
part of an instruction this could mean that they cannot be rewritten
with self-modifying code. However, SWI generates a software in-
terrupt and to the interrupt handler 0x9F0002 is actually data. As
a result, it will not be read via the instruction cache, so any modi-
ﬁcations made to it prior to the SWI call will be reﬂected correctly,
since these modiﬁcations will have been done via the data cache
(any write or read to/from memory goes via the data cache, only
instruction execution goes via the instruction cache).
In non-alphanumeric code, the instruction cache would be ﬂushed
with this sequence of operations:
MOV r0 , #0
MOV r1 , #−1
MOV r2 , #0
SWI
0 x9F0002
Since these instructions generate a number of non-alphanumeric
characters, the previously mentioned code techniques will have to
be applied to make this alphanumeric (i.e., writing to r0 to r2
via LDM and STM and rewriting the argument to SWI via self-
modifying code). Given that the SWI instruction’s argument is seen
as data, overwriting the argument can be done via self-modiﬁcation.
If we also overwrite all the branches in the program prior to per-
forming the SWI, then all self-modiﬁed code will now be seen cor-
rectly by the processor and our program can continue.
174.8 Thumb mode
Although the Thumb instruction set is not used to prove that al-
phanumeric ARM code is Turing complete, it might nevertheless
be interesting to know that it is possible to switch between the two
modes in an alphanumeric way.
Entering Thumb mode.
Changing the processor state from ARM mode to Thumb mode
is done by calling the branch and exchange instruction BX. ARM
instructions are always exactly four bytes and Thumb instructions
are exactly two bytes. Hence, all instructions are aligned on either
a two or four byte alignment. Consequently, the least-signiﬁcant
bit of a code address will never be set in either mode. It is this bit
that is used to indicate to which mode the processor must switch.
If the least signiﬁcant bit of a code address is set, the processor
will switch to Thumb mode, clear the bit and jump to the resulting
address.
If the bit is not set, the processor will switch to ARM
mode. Below is an example that switches the processor from ARM
to Thumb state.
SUBPL
BX
In ARM mode, pc points to the address of the current instruction
plus 8. The BX instruction is not alphanumeric, so it must be over-
written in order to execute the correct instruction. The techniques
presented in Section 4.7 can be used to accomplish this.
r6 , pc , #−1
r 6
Table 1: The BF language
increases the memory pointer to point to
the next memory location.
decreases the memory pointer to point to
the previous memory location.
increases the value of the memory loca-
tion that the memory pointer is pointing
to by one.
decreases the value of the memory loca-
tion that the memory pointer is pointing
to by one.
write the memory location that
memory pointer is pointing to stdout.
read from stdin and store the value in
the memory location that the pointer is
pointing to.
starts a loop if the memory pointed to
by the memory pointer is not 0. If it is
0, execution continues after the match-