ways to compromise the targeted user:
n Depending on the application, setting a specifi c cookie may interfere
with the application’s logic to the user’s disadvantage (for example,
UseHttps=false).
n Since cookies usually are set only by the application itself, they may be
trusted by client-side code. This code may process cookie values in ways
that are dangerous for attacker-controllable data, leading to DOM-based
XSS or JavaScript injection.
n Instead of tying anti-CSRF tokens to a user’s session, some applications
work by placing the token into both a cookie and a request parameter and
then comparing these values to prevent CSRF attacks. If the attacker controls
both the cookie and the parameter value, this defense can be bypassed.
n As was described earlier in this chapter, some same-user persistent XSS
can be exploited via a CSRF attack against the login function to log the user
in to the attacker’s account and therefore access the XSS payload. If the
login page is robustly protected against CSRF, this attack fails. However,
if the attacker can set an arbitrary cookie in the user’s browser, he can
perform the same attack by passing his own session token directly to the
user, bypassing the need for a CSRF attack against the login function.
n Setting arbitrary cookies can allow session fi xation vulnerabilities to be
exploited, as described in the next section.
Session Fixation
Session fi xation vulnerabilities typically arise when an application creates an
anonymous session for each user when she fi rst accesses the application. If the
application contains a login function, this anonymous session is created prior
to login and then is upgraded to an authenticated session after the user logs in.
The same token that initially confers no special access later allows privileged
access within the security context of the authenticated user.
In a standard session hijacking attack, the attacker must use some means to
capture the session token of an application user. In a session fi xation attack, on
the other hand, the attacker fi rst obtains an anonymous token directly from
the application and then uses some means to fi x this token within a victim’s
browser. After the user has logged in, the attacker can use the token to hijack
the user’s session.
Figure 13-4 shows the steps involved in a successful session fi xation attack.
cc1133..iinndddd 553377 88//1199//22001111 1122::1144::0011 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 538
538 Chapter 13 n Attacking Users: Other Techniques
Application
fru osi mn tg ht eh e a tt to ak ce kn er usin4 g. A tha ttn ea d c s k ais1 e r. i esA h s tit u j ot aa e kcc d ekk nswe r aui t sr she q ha r’u esse uss set ss rso/l
Use rr l co eig vs e i d n m e e s esi ino g ntoin k. ep nhp
3. e t
o
2. Attacker feeds the session token to the user
User Attacker
Figure 13-4: The steps involved in a session fixation attack
The key stage in this attack is, of course, the point at which the attacker feeds
to the victim the session token he has acquired, thereby causing the victim’s
browser to use it. The ways in which this can be done depend on the mechanism
used to transmit session tokens:
n If HTTP cookies are used, the attacker can try to use one of the cookie
injection techniques, as described in the preceding section.
n If session tokens are transmitted within a URL parameter, the attacker can
simply feed the victim the same URL that the application issued to him:
https://wahh-app.com/login.php?SessId=12d1a1f856ef224ab424c2454208
n Several application servers accept use of their session tokens within the
URL, delimited by a semicolon. In some applications this is done by default,
and in others, the application tolerates explicit use in this manner even if
the servers don’t behave in this way by default:
http://wahh-app.com/store/product.do;jsessionid=739105723F7AEE6ABC2
13F812C184204.ASTPESD2
n If the application uses hidden fi elds in HTML forms to transmit session
tokens, the attacker may be able to use a CSRF attack to introduce his
token into the user’s browser.
Session fi xation vulnerabilities can also exist in applications that do not
contain login functionality. For example, an application may allow anonymous
cc1133..iinndddd 553388 88//1199//22001111 1122::1144::0011 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 539
Chapter 13 n Attacking Users: Other Techniques 539
users to browse a catalog of products, place items into a shopping cart, check
out by submitting personal data and payment details, and then review all this
information on a Confi rm Order page. In this situation, an attacker may fi x an
anonymous session token with a victim’s browser, wait for that user to place
an order and submit sensitive information, and then access the Confi rm Order
page using the token to capture the user’s details.
Some web applications and web servers accept arbitrary tokens submitted
by users, even if these were not previously issued by the server itself. When
an unrecognized token is received, the server simply creates a new session
for it and handles it exactly as if it were a new token generated by the server.
Microsoft IIS and Allaire ColdFusion servers have been vulnerable to this
weakness in the past.
When an application or server behaves in this way, attacks based on ses-
sion fi xation are made considerably easier because the attacker does not need
to take any steps to ensure that the tokens fi xed in target users’ browsers are
currently valid. The attacker can simply choose an arbitrary token and dis-
tribute it as widely as possible (for example, by e-mailing a URL containing
the token to individual users, mailing lists, and so on). Then the attacker can
periodically poll a protected page within the application (such as My Details)
to detect when a victim has used the token to log in. Even if a targeted user
does not follow the URL for several months, a determined attacker may still
be able hijack her session.
Finding and Exploiting Session Fixation Vulnerabilities
If the application supports authentication, you should review how it handles session
tokens in relation to the login. The application may be vulnerable in two ways:
n The application issues an anonymous session token to each unauthenti-
cated user. When the user logs in, no new token is issued. Instead, her
existing session is upgraded to an authenticated session. This behavior
is common when the application uses the application server’s default
session-handling mechanism.
n The application does not issue tokens to anonymous users, and a token
is issued only following a successful login. However, if a user accesses
the login function using an authenticated token and logs in using dif-
ferent credentials, no new token is issued. Instead, the user associated
with the previously authenticated session is changed to the identity of
the second user.
In both of these cases, an attacker can obtain a valid session token (either by
simply requesting the login page or by performing a login with his own cre-
dentials) and feed this to a target user. When that user logs in using the token,
the attacker can hijack the user’s session.
cc1133..iinndddd 553399 88//1199//22001111 1122::1144::0011 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 540
540 Chapter 13 n Attacking Users: Other Techniques
HACK STEPS
1. Obtain a valid token by whatever means the application enables you to
obtain one.
2. Access the login form, and perform a login using this token.
3. If the login is successful and the application does not issue a new token,
it is vulnerable to session fixation.
If the application does not support authentication but does allow users to submit
and then review sensitive information, you should verify whether the same session
token is used before and after the initial submission of user-specifi c information. If
it is, an attacker can obtain a token and feed it to a target user. When the user sub-
mits sensitive details, the attacker can use the token to view the user’s information.
HACK STEPS
1. Obtain a session token as a completely anonymous user, and then walk
through the process of submitting sensitive data, up until any page at
which the sensitive data is displayed back.
2. If the same token originally obtained can now be used to retrieve the sen-
sitive data, the application is vulnerable to session fixation.
3. If any type of session fixation is identified, verify whether the server
accepts arbitrary tokens it has not previously issued. If it does, the vulner-
ability is considerably easier to exploit over an extended period.
Preventing Session Fixation Vulnerabilities
At any point when a user interacting with the application transitions from being
anonymous to being identifi ed, the application should issue a fresh session token.
This applies both to a successful login and to cases in which an anonymous
user fi rst submits personal or other sensitive information.
As a defense-in-depth measure to further protect against session fi xation
attacks, many security-critical applications employ per-page tokens to supple-
ment the main session token. This technique can frustrate most kinds of session
hijacking attacks. See Chapter 7 for further details.
The application should not accept arbitrary session tokens that it does not
recognize as having issued itself. The token should be immediately canceled
within the browser, and the user should be returned to the application’s start page.
Open Redirection Vulnerabilities
Open redirection vulnerabilities arise when an application takes user-controllable
input and uses it to perform a redirection, instructing the user’s browser to
cc1133..iinndddd 554400 88//1199//22001111 1122::1144::0011 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 541
Chapter 13 n Attacking Users: Other Techniques 541
visit a different URL than the one requested. These vulnerabilities usually are
of much less interest to an attacker than cross-site scripting, which can be used
to perform a much wider range of malicious actions. Open redirection bugs
are primarily of use in phishing attacks in which an attacker seeks to induce a
victim to visit a spoofed website and enter sensitive details. A redirection vul-
nerability can lend credibility to the attacker’s overtures to potential victims,
because it enables him to construct a URL that points to the authentic website
he is targeting. Therefore, this URL is more convincing, and anyone who visits
it is redirected silently to a website that the attacker controls.
That said, the majority of real-world phishing-style attacks use other techniques
to gain credibility that are outside the control of the application being targeted.
Examples include registering similar domain names, using offi cial-sounding sub-
domains, and creating a simple mismatch between the anchor text and the target
URLs of links in HTML e-mails. Research has indicated that most users cannot
or are not inclined to make security decisions based on URL structure. For these
reasons, the value to phishermen of a typical open redirection bug is fairly marginal.
In recent years, open redirection vulnerabilities have been used in a relatively
benign way to perform “rickrolling” attacks, in which victims are unwittingly
redirected to a video of British pop legend Rick Astley, as illustrated in Figure 13-5.
Figure 13-5: The result of a rickrolling attack
cc1133..iinndddd 554411 88//1199//22001111 1122::1144::0011 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 542
542 Chapter 13 n Attacking Users: Other Techniques
Finding and Exploiting Open Redirection Vulnerabilities
The fi rst step in locating open redirection vulnerabilities is to identify every
instance within the application where a redirect occurs. An application can
cause the user’s browser to redirect to a different URL in several ways:
n An HTTP redirect uses a message with a 3xx status code and a Location
header specifying the target of the redirect:
HTTP/1.1 302 Object moved
Location: http://mdsec.net/updates/update29.html
n The HTTP Refresh header can be used to reload a page with an arbitrary
URL after a fi xed interval, which may be 0 to trigger an immediate redirect:
HTTP/1.1 200 OK
Refresh: 0; url=http://mdsec.net/updates/update29.html
n The HTML  tag can be used to replicate the behavior of any HTTP
header and therefore can be used for redirection:
HTTP/1.1 200 OK
Content-Length: 125
n Various APIs exist within JavaScript that can be used to redirect the browser
to an arbitrary URL:
HTTP/1.1 200 OK
Content-Length: 120
In each of these cases, an absolute or relative URL may be specifi ed.
cc1133..iinndddd 554422 88//1199//22001111 1122::1144::0011 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 543
Chapter 13 n Attacking Users: Other Techniques 543
HACK STEPS
1. Identify every instance within the application where a redirect occurs.
2. An effective way to do this is to walk through the application using an
intercepting proxy and monitor the requests made for actual pages (as
opposed to other resources, such as images, stylesheets, and script files).
3. If a single navigation action results in more than one request in succes-
sion, investigate what means of performing the redirect is being used.
The majority of redirects are not user-controllable. For example, in a typical
login mechanism, submitting valid credentials to /login.jsp might return an
HTTP redirect to /myhome.jsp. The target of the redirect is always the same, so
it is not subject to any vulnerabilities involving redirection.
However, in other cases, data supplied by the user is used in some way to
set the target of the redirect. A common instance of this is when an applica-
tion forces users whose sessions have expired to return to the login page and
then redirects them to the original URL following successful reauthentication.
If you encounter this type of behavior, the application may be vulnerable to a
redirection attack, and you should investigate further to determine whether
the behavior is exploitable.
HACK STEPS
1. If the user data being processed in a redirect contains an absolute URL,
modify the domain name within the URL, and test whether the application
redirects you to the different domain.
2. If the user data being processed contains a relative URL, modify this into
an absolute URL for a different domain, and test whether the application
redirects you to this domain.
3. In both cases, if you see behavior like the following, the application is cer-
tainly vulnerable to an arbitrary redirection attack:
GET /updates/8/?redir=http://mdattacker.net/ HTTP/1.1
Host: mdsec.net
HTTP/1.1 302 Object moved
Location: http://mdattacker.net/
cc1133..iinndddd 554433 88//1199//22001111 1122::1144::0022 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 544
544 Chapter 13 n Attacking Users: Other Techniques
TRY IT!
http://mdsec.net/updates/8/
http://mdsec.net/updates/14/
http://mdsec.net/updates/18/
http://mdsec.net/updates/23/
http://mdsec.net/updates/48/
NOTE A related phenomenon, which is not quite the same as redirection,
occurs when an application specifi es the target URL for a frame using user-
controllable data. If you can construct a URL that causes content from an
external URL to be loaded into a child frame, you can perform a fairly stealthy
redirection-style attack. You can replace only part of an application’s existing
interface with different content and leave the domain of the browser address
bar unmodifi ed.
It is common to encounter situations in which user-controllable data is being
used to form the target of a redirect but is being fi ltered or sanitized in some
way by the application, usually in an attempt to block redirection attacks. In
this situation, the application may or may not be vulnerable, and your next task
should be to probe the defenses in place to determine whether they can be cir-
cumvented to perform arbitrary redirection. The two general types of defenses
you may encounter are attempts to block absolute URLs and the addition of a
specifi c absolute URL prefi x.
Blocking of Absolute URLs
The application may check whether the user-supplied string starts with http://
and, if so, block the request. In this situation, the following tricks may succeed
in causing a redirect to an external website (note the leading space at the begin-
ning of the third line):
HtTp://mdattacker.net
%00http://mdattacker.net
http://mdattacker.net
//mdattacker.net
%68%74%74%70%3a%2f%2fmdattacker.net
%2568%2574%2574%2570%253a%252f%252fmdattacker.net
https://mdattacker.net
http:\\mdattacker.net
http:///mdattacker.net
Alternatively, the application may attempt to sanitize absolute URLs by remov-
ing http:// and any external domain specifi ed. In this situation, any of the
cc1133..iinndddd 554444 88//1199//22001111 1122::1144::0022 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 545
Chapter 13 n Attacking Users: Other Techniques 545
preceding bypasses may be successful, and the following attacks should also
be tested:
http://http://mdattacker.net
http://mdattacker.net/http://mdattacker.net
hthttp://tp://mdattacker.net
Sometimes, the application may verify that the user-supplied string either
starts with or contains an absolute URL to its own domain name. In this situa-
tion, the following bypasses may be effective:
http://mdsec.net.mdattacker.net
http://mdattacker.net/?http://mdsec.net
http://mdattacker.net/%23http://mdsec.net
TRY IT!
http://mdsec.net/updates/52/