# Fo1lowed by:
9.10 Find Words WithinXML-Style Comments | 559
---
## Page 576
(?:
Group but don’t capture:
(?!
Match the characters "-->*
Regex options: Dot matches line breaks, free-spacing
Regexflavers: NET, Java, XRegExp, PCRE, Perl, Python, Ruby
This commented version of the regex doesn’t work in JavaScript unless you use the
XRegExp library, since standard JavaScript lacks both *free-spacing" and “dot matches
line breaks” modes.
Notice that the regex contains a negative lookahead nested within an outer, positive
lookahead. That lets you require that any match of Tooo is followed by -> and that
. That gives us the regex ) (with “dot matches line breaks” enabled), which matches the underlined text
in  just fine. We need the ,*?> at the beginning of the lookahead, because
otherwise the regex would match only when Tooo is immediately followed by >, with
no characters in between. The .
As an aside, the regex so far could be rewritten as )\b)with the
second  moved after the lookaheadwithout any affect on the text that is matched.
That's because both the word boundary and the lookahead are zero-length assertions
(see *Lookaround* on page 84). However, it's better to place the word boundary first
for readability and efficiency. In the middle of a partial match, the regex engine can
more quickly test a word boundary, fail, and move forward to try the regex again at the
next character in the string without having to spend time testing the lookahead when
it isn't necessary.
OK, so the regex ) seems to work fine so far, but what about when
it's applied to the subject string Tooo  The regex still matches
IOD0 since it'’s followed by -->, even though tooo is not within a comment this time
We therforeneed to change the dot within the lookahead from matching any character
to matching any character that is not part of the string ):)> se dno8Suudeuou 
the lazy *?> quantifier we’d previously applied to just the dot.
Puting it all together, we get the final regex that was listed as the solution for
 a sx m dgeae u )=)=）oo> qod s
essary “dot matches line breaks” option, )> is
equivalent.
Variations
Although the “*single-step approach" regex ensures that any match of Topo is followed
by --> without  in between. There are several reasons we left
that rule out:
•You can usually get away with not doing this double-check, especially since the
single-step regex is meant to be used with text editors and the like, where you can
visually verify your results.
• Having less to verify means less time spent performing the verification. In other
words, the regex is faster when the extra check is left out.
• Most importantly, since you don’t know how far back the comment may have
started, looking backward like this requires infinite-length lookbehind, which is
supported by the .NET regex flavor only.
If you're working with .NET and want to include this added check, use the following
regex:
(?) .)*?)\bT0oo\b(?=(?: (?!)
Regexoptions: Case insensitive, dot matches line breaks
Regex flaver: .NET
This stricter, .NET-only regex adds a positive lookbehind at the front, which works
just like the lookahead at the end but in reverse. Because the lookbehind works forward
from the position where it finds .
Since the leading lookahead and trailing lookbehind are both zero-length assertions,
the final match is just the word Topo. The strings matched within the lookarounds do
not become a part of the final matched text.
See Also
Recipe 9.9 includes a detailed discussion of how to match XML-style comments.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.4 explains that the dot matches any
9.10 Find Words Within XML-Style Comments | 561
---
## Page 578
character. Recipe 2.6 explains word boundaries. Recipe 2.9 explains grouping.
Recipe 2.12 explains repetition. Recipe 2.13 explains how greedy and lazy quantifiers
backtrack. Recipe 2.16 explains lookaround.
9.11Change theDelimiterUsedinCSVFiles
Problem
You want to change all field-delimiting commas in a CSV file to tabs. Commas that
occur within double-quoted values should be left alone.
Solution
The following regular expression matches an individual CSV field along with its pre-
ceding delimiter, if any. The preceding delimiter is usually a comma, but can also be
an empry string (i.e., nothing) when matching the first field of the first record, or a line
break when matching the first field of any subsequent record. Every time a match is
found, the field itself, including the double quotes that may surround it, is captured to
backreference 2, and its preceding delimiter is captured to backreference 1.
The regular expressions in this recipe are designed to work correctly
with valid CSV files only, according to the format rules discussed in
G1\r?\n|)([^",\rn]+|°(?:[^"]|**)*")？
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Here is the same regular expression again in free-spacing mode:
（,1\r?\n |^ )
# Capture the leading field delimiter to backref 1
# Capture a single field to backref 2:
[^",\r\n]+
Unquoted field
#0r:
*(..1]:)
# Quoted field (nay contain escaped double quotes)
)?
# The group is optional because fields may be enpty
Regex options: Free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Using this regex and the code in Recipe 3.11, you can iterate over your CSV file and
check the value of backreference 1 after each match. The necessary replacement string
for each match depends on the value of this backreference. If it's a comma, replace it
with a tab character. If the backreference is empty or contains a line break, leave the
value in place (ie., do nothing, or put it back as part of a replacement string). Since
CSV fields are captured to backreference 2 as part of each match, you'll also have to
562 I Chapter 9: Markup and Data Fermats
---
## Page 579
put that back as part of each replacement string. The only things you're actually re-
placing are the commas that are captured to backreference 1.
Example web page with JavaScript
The following code is a complete web page that includes two multiline text input fields,
with a buton labeled Replace berween them. Clicking the button takes whatever string
you put into the first text box (labeled Inpxt), converts any comma delimiters to tabs
with the help of the regular expression just shown, then puts the new string into the
second text box (labeled Outpar). If you use valid CSV content as your input, it should
show up in the second text box with all comma delimiters replaced with tabs. To test
it, save this code into a file with the .hzml extension and open it in your favorite web
browser:
Change CSV delimiters from commas to tabsc/title>
Input:
Output:
function cormasToTabs() {
var input = docunent.getElementById("input*),
output = docunent.getElementById("output”),
regex
8/
Discussion
The approach prescribed by this recipe allows you to pass over each complete CSV field
(including any embedded line breaks, escaped double quotes, and commas) one at a
time. Each match then starts just before the next field delimiter.
The first capturing group in the regex,  anchor can match once. The value matched by this
first capturing group must be checked in the code outside of the regex that replaces
commas with your substitute delimiters (in this case, tabs).
We haven’t yet gotten through the entire regex, but the approach described so far is
already somewhat convoluted. You might be wondering why the regex is not written
to match only the commas that should be replaced with tabs. If you could do that, a
simple substitution of all matched text would avoid the need for code outside of the
regex to check whether capruring group 1 matched a comma or some other string, After
all, it should be possible to use lookahead and lookbehind to determine whether a
comma is inside or outside a quoted CSV field, right?
Unfortunately, in order for such an approach to accurately determine which commas
are outside of double-quoted fields, you’d need infinite-length lookbehind
which is available in the .NET regex flavor only (see “Different levels of lookbe-
hind on page 85 for a discussion of the varying lookbehind limitations). Even _NET
developers should avoid a lookaround-based approach since it would add significant
complexity and also make the regex slower.
Getting back to how the regex works, most of the patterm appears within the next set
of parentheses: capturing group 2. This second group matches a single CSV field, in-
cluding any surrounding double quotes. Unlike the previous capruring group, this one
is optional in order to allow matching empty fields.
564 | Chapter 9: Markup and Data Fermats
---
## Page 581
Note that group 2 within the regex contains two alternative patterns separated by the
|> metacharacter. The first alternative, [^*,\r\n]+), is a negated character class fol
lowed by a one-or-more quantifier (
Extract the third column fron a CSV string
Input:
0utput:
566 I Chapter 9: Markup and Data Fermats
---
## Page 583
function displayCsvColunn(index){
var input = document.getElementById("input"),
(ndno,)guauaauaup =ndno
columnFields = getCsvColunn(input.value, index);
1f (columnFields.length > 0) {
// Show each record on its own line, separated by a line feed (\n)
output.value = columnFields-join("\n");
}else {
output.value = “[No data found to extract]°;
// Return an array of CSv fields at the provided, zero-based index