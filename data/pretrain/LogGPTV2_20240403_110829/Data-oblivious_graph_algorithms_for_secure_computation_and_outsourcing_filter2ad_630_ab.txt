cutes the same sequence of instructions and access patterns
A(d) and A(d(cid:48)) are indistinguishable to each party carrying
out the computation.
Without loss of generality, in the description that follows, we
use arithmetic operations to implement Boolean operations.
In particular, we write a · b to implement conjunction a ∧ b
and we write (1−a) to implement complement a for Boolean
?
a. We also use notation (a ?= b) and (a
 [max])
i.key] + (1 − [cond])[max]
i.value] + (1 − [cond])[imax]
8.
9.
10. [max] = 0
11. [imax] = 0
12. for i = 1 to |V | do
[cond] = ([C(cid:48)
13.
i.key]
[max] = [cond][C(cid:48)
14.
[imax] = [cond][C(cid:48)
15.
16. imax = open([imax])
17. v = open([C(cid:48)
In the above, π : [1,|V |] → [1,|V |] is a random per-
mutation of node indices and open(·) corresponds to
revealing (or opening) its argument. For eﬃciency rea-
sons, we can skip all previously processed (i.e., black)
nodes as we know that they no longer will be selected.
6. Use chosen node v to retrieve row Mv of M , and repeat
steps 4–6 of the algorithm |V | − 1 times.
Because our algorithm always selects a gray node with the
shortest distance from the source for the next iteration, it
correctly implements the BFS queue.
3.2 Supporting general graphs
Algorithm 1 described in the previous section works as
long as the graph G is connected, i.e., there is at least a single
gray node to choose from at each iteration of the algorithm.
In general, however, the input graph is not guaranteed to be
connected and we next show how to modify the algorithm
to ensure that it is suitable for arbitrary graphs.
The main idea behind the change is that we introduce
fake nodes that will be chosen by the algorithm once there
are no gray nodes to process in one of the algorithm itera-
tions. In general, the algorithm may terminate after as few
as only a single iteration, which means that we need extra
|V |− 1 nodes to simulate the remaining algorithm steps. We
therefore modify the adjacency matrix M to include |V |− 1
extra rows and columns corresponding to fake nodes which
are placed at random indices within the matrix. Every fake
node is made adjacent to all other fake nodes, but none of
them are adjacent to the original nodes of the graph.
The modiﬁed matrix M can be formed by appending |V |−
1 rows and columns to the original matrix and randomly
and consistently permuting its rows and columns. The new
location of the source node s then needs to be revealed. For
the purposes of our algorithm we also store a bit vector F
of size 2|V | − 1 with the nodes ordered in the same way
as in the matrix in which the element at location v is set
iﬀ node v is fake. This vector is formed by initializing its
ﬁrst |V | elements to 0 and the remaining elements to 1 and
permuting it using the same permutation as in the matrix.
With this modiﬁed setup information, we are ready to
proceed with the BFS algorithm. The basic structure of Al-
gorithm 1 and most of its steps remain unchanged, and the
only modiﬁcation that we introduce is the way a node is cho-
sen for the next algorithm iteration. That is, the algorithm
must account for the fact that there might be no gray nodes
to choose from at any given iteration and it should proceed
with choosing a fake node.
5. Create vector C(cid:48) as before, but now before choosing
one element from it, we check whether it contains at
least one element to choose from. If it does, we leave
it unmodiﬁed; otherwise, we mark all fake nodes as
gray using vector F . One of the qualifying nodes of
C(cid:48) is chosen as before as the node to be processed in
the next iteration. To test whether there is a least one
node to choose from, we can simply test whether the
value of [min] has not been updated (i.e., it is still |V |).
More precisely, we execute the following code between
lines of 9 and 10 of the original code of step 5:
1. [cond] = ([min] ?= |V |)
2. for i = 1 to 2|V | − 1 do
3.
4.
The remaining code remains unchanged with the ex-
ception that all for-loops now range from 1 to 2|V |− 1.
i.value] + [cond][Fi] · i
i.key] + [cond][Fi] · [π(i)]
i.value] = [C(cid:48)
i.key] = [C(cid:48)
[C(cid:48)
[C(cid:48)
3.3 SSSD shortest path
The above algorithm already computes the distance from
the source node to all other nodes in the graph. In certain
problems, however, the knowledge of the shortest path it-
self is required.
In this section we therefore show how to
obliviously reconstruct the shortest path from the source s
to a given destination node t. Both BFS and shortest path
computation are used as the building blocks in our solution
to the maximum ﬂow problem.
For the ease of exposition, we divide our description in two
parts: we ﬁrst present a solution that reconstructs the path,
where the information about the path itself is protected,
but the length of the path is revealed. We then show how
to modify this solution to also hide the length of the path.
3.3.1 Basic solution
On input G = (V, E) described by its adjacency matrix
M , source node s ∈ V , and destination node t ∈ V , our
solution ﬁrst uses BFS to compute the distances from s to all
other nodes and then starts from node t and retrieves parent
node information from vector C. A simple oblivious solution
to the path reconstruction problem can be implemented in
O(|V |2) time. In particular, we can scan the vector C up
to |V | times, each time retrieving and storing the parent of
the current node on the path. Then because in each round
we touch all |V | nodes (or all 2|V | − 1 nodes when fake
nodes are used), no information about the node added to the
path is revealed. Also note that because the BFS algorithm
requires Ω(|V |2) time, this solution would not increase the
asymptotic complexity of the overall solution.
An asymptotically more eﬃcient solution would be to re-
trieve one element of C at a time, where each consecutive
element is set to the parent node of the previously retrieved
node, and use ORAM techniques to hide information about
the elements of C that have been accessed. This increases
both the storage necessary to maintain ORAM for C as well
as adds polylogarithmic computational overhead for each
memory access. Because of the complexity of ORAM tech-
niques and their simulation in a privacy-preserving frame-
work in particular, this approach would provide computa-
tional advantage only for very large graphs.
Also note that logic similar to what we have previously
used for BFS does not work here. That is, suppose we ran-