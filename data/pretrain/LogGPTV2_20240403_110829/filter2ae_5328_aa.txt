**作者：Longofo@知道创宇404实验室  
日期：2022年11月8日**
SAML始于2001年，最终的SAML 2.0版本发布于2005年，此后也没有发布大版本，SAML
2.0一直延续到了现在。SAML已经是老古董了，现在SSO里面使用更多的是OAuth。在某些漏洞平台看到过一些SAML漏洞报告，一些大型应用依然出现过它的身影，最近看到的一个议题《Hacking
the Cloud With
SAML》[[1]](https://drive.google.com/file/d/1p1tTTIjg3RoJecYSU3CetvNw6-ZZdMXn/view)也提到了，考考古学学也不亏，至少它的一些概念现在仍在延用。
## SAML 2.0
**SAML** : Security Assertion Markup Language，一种用于安全性断言标记的语言。
SAML的用途：
  * 单点登录（SSO Single Sign-ON）
  * 联合认证（Federated Identity）
  * 在其他架构内使用SAML，例如WS-Security
后续的内容主要是SAML SSO的部分。
SAML协议中的三方：浏览器，身份鉴别服务器(IDP，Identity Provider)，服务提供者(SP，Service
provider)，以及这三方相互的通讯次序，加密方法，传输数据格式。
可能大家在网络上看到的一些流程图会多一两个步骤或少一两个步骤，那只是开发人员在具体选择和实现SAML传输时存在的一些差异，对于我们了解整个SAML认证流程问题不大，知一反三就行。基本的认证流程如下：
图先大概浏览下，后续会在OpenSAML的案例中看到每个环节的细节。
## 通过OpenSAML请求包看SAML SSO
**OpenSAML** 是SAML协议的一个开源实现，在github找了一个用OpenSAML实现的SSO
[demo](https://github.com/OpenConext/Mujina)，使用的是HTTP-POST传输SAML，有几百个star。将项目跑起来，正常的登录一遍看下完整的通信包过程，9090端口是SP，8080端口是IDP
### 用户访问SP服务
request:
    GET /user.html?force-authn=true HTTP/1.1
    Host: 192.168.0.104:9090
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Referer: http://192.168.0.104:9090/
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,vi;q=0.7
    Cookie: mujinaSpSessionId=2E15F753B56E4646FA4CACCE4DD2ED6D; mujinaIdpSessionId=6203026E878EFB44F90769F285FB05D9
    Connection: close
response:
    HTTP/1.1 200 
    X-Content-Type-Options: nosniff
    X-XSS-Protection: 1; mode=block
    Cache-Control: no-cache, no-store, max-age=0, must-revalidate
    Pragma: no-cache
    Expires: 0
    X-Frame-Options: DENY
    Content-Type: text/html;charset=UTF-8
    Content-Language: zh-CN
    Date: Sat, 22 Oct 2022 10:29:57 GMT
    Connection: close
    Content-Length: 889
        Mujina Service Provider