by Gledger to the format used by Fledger (e.g., from a blockchain to a
list of transactions). It also handles the fact that Fledger does not in-
clude certain operations on the I/O interface by instead allowing the
adversary A to run the maintenance operation MaintainLedger
and perform clock updates in Gclock even in the name of honest
parties. That is, Wledger models real world behavior, using A as a
scheduler, where blockchain participants perform mining based on
external events, such as incoming network messages, without first
waiting to receive an explicit instruction from a higher-level proto-
col to do so (see also the remarks following Corollary 3.2). Issue (ii)
is addressed via a suitable instantiation of the parameters of Fledger
coming transactions.
Figure 3: Realization relation of Gledger and F Gledger
as stated
ledger
in Theorem 3.1. The system E denotes the environment,
modeling arbitrary higher level protocols. All machines are
additionally connected to the network adversary.
in order to capture the same (blockchain) properties provided by
Gledger respectively the parameterized algorithms of Gledger. This
instantiation roughly works as follows, with full definitions and
details provided in our technical report [22]:
‚Ä¢ Finit is defined to run the extendPolicy algorithm to generate
the initial transaction list (that is read from the blocks output
by the algorithm). This is because extendPolicy might already
generate a genesis block during the preprocessing of the first
activation of the functionality before any transactions have even
been submitted.
‚Ä¢ Fsubmit executes the validate algorithm to check validity of in-
‚Ä¢ Fupdate executes the extendPolicy and Blockify algorithms to
generate new blocks from the update proposed by the adversary.
These blocks are transformed into individual transactions which
are appended to the global transaction list of Fledger together
with a special meta transaction that indicates a block bound-
ary. Additionally, the validate algorithm is used to decide which
transactions are removed from the transaction buffer.
‚Ä¢ Fread checks whether a party has already been registered for
an amount of time larger than ùõø and then either requests the
adversary to provide a pointer to a transaction within the last
windowSize blocks or lets the adversary determine the full output
of the party. We note that Fread has to always use non-local reads:
this is because a read operation in Gledger might change the global
state during the preprocessing phase and before generating an
output, i.e., read operations are generally not immediate (in the
sense defined in Section 2).
‚Ä¢ If the parameters of Gledger are such that they guarantee the prop-
erty of liveness, then FupdRnd can be defined to also encode this
property (cf. Section 2); similarly for the time dependent security
property of chain-growth and other time-related properties.
‚Ä¢ Fleak does not leak (additional) information as all information is
leaked during submitting and reading.
Let F Gledger
be the protocol stack consisting of Fledger with all of
ledger
its subroutines instantiated as sketched above. Then we can indeed
show that Gledger (with the wrapper Wledger) realizes F Gledger
(cf.
ledger
Figure 3).
Theorem 3.1 (informal). Let F Gledger
be as above and letWledger
ledger
be the wrapper for Gledger and its subroutine clock Gclock. Then,
(Wledger | Gledger, Gclock) ‚â§ F Gledger
ledger
We formalize this theorem and provide precise specifications of
F Gledger
, Wledger, Gledger, and Gclock as well as a full proof in the
ledger
.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1050ledger
full version of this paper [22]. As explained above, the additional
component Wledger merely aligns the syntax of Gledger and Fledger,
and makes explicit that maintenance operations and clock updates
are performed automatically based on external events. In fact, all
existing higher-level protocols we are aware of do not trigger main-
tenance operations and do not update the clock themselves (see,
e.g., [27]). They rather leave this to the adversary/environment, as
one might expect. Hence, from the point of view of a higher-level
protocol, typically it does not matter whether it uses Gledger or
F Gledger
; there are only slight syntactical alignments necessary.
ledger
From Theorem 3.1, transitivity of the realization relation, and
the composition theorem of the iUC framework we immediately
obtain that existing realizations of Gledger also apply to and can be
re-used with Fledger.
Corollary 3.2 (informal). Let Pblockchain be a realization of
Gledger, e.g., Bitcoin or Ouroboros Genesis. Furthermore, let QFGledger
be a higher-level protocol using F Gledger
and let QP be the same
ledger
protocol as Q but using Pblockchain (plus the wrapper Wledger and
Gclock) instead of F Gledger
ledger
The corollary intuitively states that if we have analyzed and proven
secure a higher-level protocol Q based on F Gledger
, then Q remains
ledger
secure even if we run it with an actual blockchain Pblockchain that
realizes Gledger.
GPL and other ideal blockchain functionalities. Similarly to
the above result, we provide a proof sketch showing that Gledger‚Äôs
privacy preserving variant GPL [26] (plus a wrapper aligning syntax
and mapping abstraction levels) also realizes a suitable instantiation
of Fledger in our technical report [22]. Hence, the famous privacy
preserving blockchain protocol Ouroboros Crypsinous [26], which
has been proven to realize GPL, also realizes Fledger with slight
adjustments to the interface as described above. Besides GPL, we
also discuss further ideal ledger functionalities [17, 18, 29] in our
technical report [22] which so far have only been used to model
setup assumptions for higher-level protocols and which have not
been realized yet. We show that Fledger can be instantiated to model
the same security properties as those ideal functionalities and hence
can be used as an alternative within higher-level protocols.
. Then, QP realizes QFGledger
ledger
.
4 CASE STUDY: SECURITY AND PRIVACY OF
THE CORDA LEDGER
Corda is one of the most widely employed distributed ledgers. It is
a privacy-preserving distributed ledger where parties share some
information about the ledger but not the full view. It is mainly
used to model business processes within the financial sector. In
this section, we first give a description of Corda. We then provide
a detailed security and privacy analysis by proving that Corda
realizes a carefully designed instantiation of Fledger.
4.1 Description of the Corda Protocol
There are two types of participants/roles in Corda: (i) Nodes or
clients, who can submit transactions to and read from the ledger, and
(ii) notary services (called just notaries in what follows) which are
trusted services that are responsible for preventing double spending.
Each participant is identified via its public signing key, which is cer-
tified via one or more certificate agencies and then distributed via a
so-called network service provider to all participants. All participants
communicate via secure authenticated channels.
Clients own states (sometimes also called facts) in Corda. A state
typically represents an asset that the party owns in reality, e.g.,
money, bonds, or physical goods, like a car. States can be ‚Äúspent‚Äù
via a transaction, which consumes a set of input states and creates
a set of new output states. These transactions are validated by
notaries to prevent double spending of states.
States, transactions, attachments. On a technical level, a state
is represented via a tuple consisting of at least one owner of the
state (identified via public signature keys) and an arbitrary bit
string that encodes the asset. States are stored as the outputs of
transactions in Corda, similar to how Bitcoin stores ownership
of currency as an output of a transaction. Transactions in Corda
consist of a (potentially empty) set of pointers to input states, a
(potentially empty) set of pointers to reference states (see below), a
set of output states, a non-empty set of participants (clients), a notary
that is responsible for validating this transaction and for preventing
double spending of its inputs, a (potentially empty) set of pointers to
smart contracts, an arbitrary bit string that can encode parameters
for the transaction, and an ID that is computed as a hash over the
transaction. The participants contain at least all owners of input
states, who are expected to confirm the transaction by a signature.
One of the participants takes the role of an initiator, who starts and
processes the transaction, while the other participants, if any, act
as so-called signees who, if they agree with the transaction, only
add their signatures to confirm the transaction. The set of input
states can be empty, which allows for adding new assets to Corda
by creating new output states. The referenced smart contracts are
stored in so-called attachments with a unique ID (computed via
the hash of the attachment) and can be used to impose further
conditions for the transaction to be performed. These conditions
may in particular depend on reference states, which, unlike input
states, are not consumed by the transaction but rather only provide
some additional information for the smart contracts. For example,
a smart contract might state that an initiator‚Äôs car is bought by
a signee only if its age is below a certain threshold. A reference
state might contain the manufacturing date of the car, including a
signature of the manufacturer, which can then be validated.4
In the following, we call the set of input states, reference states,
and smart contracts the direct dependencies of a transaction. The set
of (full) dependencies of a transaction is a set of all direct dependen-
cies, their respective direct dependencies, and so on. A transaction
is called valid if the format of the transaction is correct, the set
of participants includes all owners of input states, and all smart
contracts referenced by the transaction allow the transaction.
Partial views. In a Corda instance, the set of all transactions
and attachments used by those transactions forms a global directed
graph (which is not necessarily a tree or a forest). However, clients
do not obtain a full view of this graph. Instead, each client has only
a partial view of the global graph consisting of those transactions it
is involved in as an initiator/signee as well as the full dependencies
4In addition to reference states, smart contracts can also access so-called oracles, which
are trusted third parties, to provide data points. Since the same can also be achieved
by reference states, we did not explicitly include oracles in our analysis.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1051of those transactions. Generally speaking, a client forwards one
of its known transactions ùë°ùë• (or one of its known attachments) to
another client only if both clients are involved in a transaction
(cid:98)ùë°ùë• that (directly or also indirectly) depends on ùë°ùë•, i.e., where both
clients are allowed to and need to learn ùë°ùë• in order to validate(cid:98)ùë°ùë•.
This decentralized graph structure, where clients are supposed to
learn only those parts that they actually are involved in, facilitates
privacy but makes it impossible for an individual client to detect
and protect itself against double spending attacks: Assume Alice
has an input state representing a car and she uses this state in a
transaction with Bob. Now, Alice might use the same state again in
a transaction with Carol. Both Bob and Carol would assume that
they now own Alice‚Äôs car, however, neither of them can detect that
Alice has sold her car twice since neither of them is able to see
both transactions. To solve this problem, Corda, as already briefly
mentioned, introduces the concept of notaries, which are trustees
that are responsible for validating transactions and preventing
double spending, as discussed in more detail in what follows.
Each transaction ùë°ùë• is assigned one notary N who is responsible
for this transaction; N, just as the participants, also learns the
full dependencies of ùë°ùë•. To be able to detect double spending of
input states, it is required that ùë°ùë• only uses inputs for which N
is also responsible for, i. e., the input state was produced as an
output for which N is responsible. The notary then checks that ùë°ùë•
is valid (which entails checking that the set of participants of ùë°ùë•
contains all owners of input states), there are valid signatures of all
participants, and also that no input state has already been used by
another transaction. If this is the case, the notary signs ùë°ùë•, which
effectively adds ùë°ùë• to the global graph of Corda. To change the
notary N responsible for a certain state to a different one, say N‚Ä≤,
Corda offers a special notary change transaction. This transaction
takes a single input state, generates a single output state that is
identical to the input, and is validated by the notary N who is
responsible for the input state. The responsibility for the output is
then transferred to N‚Ä≤, i.e., future transactions need to rely on that
notary instead.
Submitting transactions. A new transaction is first signed by
the initiator, who then forwards the transaction to all signees to
collect their signatures. The initiator then sends the transaction
together with the signatures to the notary, who adds his own sig-
nature to confirm validity of the transaction. The initiator finally
informs all signees that the transaction was successful. The initiator
is required to know the full dependencies of the transaction such
that he can distribute this information to signees and the notary.
To obtain this knowledge in the first place, which might include
input states known only to, say, one of the signees, clients/signees
can proactively send known transactions to other clients. In what
follows, we say that a client pushes a transaction .
Customization and security goals. All protocol operations
in Corda, such as the process of submitting a transaction, can be
customized and tailored towards the specific needs of a deployment
of Corda. For example, one could decide to simply accept transac-
tions without signatures of a notary, with all of its implications for
security and double spending. Our description given above (and
our analysis carried out below) of Corda follows the predefined
standard behavior which captures the most typical deployment as
Figure 4: Corda protocol Pc and realization statement.
specified by the documentation [41]. The white paper of Corda [9]
states three major security goals:
Partial consistency: Whenever parties share some transaction,
they agree on the content of the transaction as well as on (contents
of) all dependencies. In this work we propose and formalize the
novel notion of partial consistency to capture this goal, which is
stated only on an intuitive level in the white paper.
Double spending protection: Transaction‚Äôs output states can-
not be spent twice.
Privacy: A transaction between a group of parties is only visible
to them and all parties that need to validate this transaction as part
of validating another (dependent) transaction in the future.
According to the Corda white paper, these goals should be achieved
under the assumption that all notaries behave honestly. Jumping
slightly ahead, while some level of trust into notaries is clearly
necessary, our analysis refines this requirement by showing that