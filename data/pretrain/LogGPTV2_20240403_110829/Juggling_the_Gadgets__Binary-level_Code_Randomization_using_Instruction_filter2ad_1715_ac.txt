within a new .ropf section of the binary (detailed in the following
section). All remaining original instructions are overwritten with
int3 instructions. The only option that is now left for an attacker
is to use the code of the whole basic block, starting with the push
instruction. This might not be desirable, as it involves the execution
of another function, which may have disastrous side effects. All
other (intended and unintended) gadget starting locations within the
basic block become unpredictable.
This example illustrates a common case in which the ending
instruction of a gadget is also the ﬁnal instruction of a basic block.
We can exploit this fact to reduce the number of indirections needed
due to instruction displacement. Depending on the type of branch
at the end of a basic block, a jmp back to the original location
may not be needed at all. As the most common case, all indirect
branch instructions (i.e., those that can be the ending instructions
of gadgets), will transfer control to the intended target no matter
whether they have been displaced or not. In this example, the ret
instruction will always transfer control to the return address that
will be read from the stack, irrespectively of the actual location
of the ret. Consequently, an extra jmp for transferring control
back to the original location is not needed. The same is true for
any unconditional branches, but care must be taken to adjust any
relative displacement operands accordingly. Unfortunately, the same
strategy cannot be applied for conditional branches, as we do not
have control of the fall-through target.
Any other instructions that involve relative address operands must
also be adjusted accordingly after the randomly chosen location of
the displaced code region is picked. Besides relative call instruc-
tions and the like, this includes PC-relative memory accesses for
64-bit programs.
4.
IMPLEMENTATION
To demonstrate the effectiveness of instruction displacement, we
have developed a prototype implementation for Windows binaries.
Our prototype supports 32-bit PE binaries (both main executables
and dynamic link libraries), without relying on any debug or sym-
bolic information (e.g., PDB ﬁles). To randomize a binary, a three-
phase process is followed: i) identiﬁcation of candidate gadgets for
displacement, ii) modiﬁcation of the PE executable to add a new
code section for the displaced instructions, and iii) binary instrumen-
tation for actually displacing the selected gadgets. In the following,
we discuss these three phases in detail.
4.1 Gadget Identiﬁcation
The ﬁrst phase aims to identify the code regions that will be
displaced. A necessary condition for any candidate region is to fall
within the boundaries of a basic block, and thus a ﬁrst necessary
step is to extract the code and identify as many functions and basic
blocks as possible. This is achieved using IDA Pro [29], a state-
of-the-art code disassembler that achieves decent accuracy when
dealing with regular (non-obfuscated) PE executables. IDA Pro
leverages the relocation information present in Windows DLLs,
27Figure 2: A real example of gadget displacement taken from Adobe Reader’s BIB.dll module.
and identiﬁes compiler-speciﬁc code constructs and optimizations,
such as basic block sharing [31]. We should note, however, that
as in previous works [41], we do not take into account IDA Pro’s
speculative disassembly results, e.g., for embedded data and code
regions that are reached only through computed jumps or which
are part of signal handling routines. These rely on heuristics that
are prone to errors, and thus we follow a conservative approach to
prevent any correctness issues with the instrumented code due to
falsely identiﬁed code regions.
Our code extraction module is based on the open-source imple-
mentation of in-place code randomization [2], which we also use
to pinpoint all remaining gadgets after the application of IPR. We
have extended the implementation to consider gadgets comprising
up to 15 instructions, from the just ﬁve instructions in the original
implementation. We use IPR with maximum coverage settings, so
as to reduce the number of displacements. An analysis pass then
identiﬁes all remaining unmodiﬁed gadgets and calculates the appro-
priate code regions to displace as many gadgets as possible. Gadgets
contained in basic blocks smaller than ﬁve bytes are left intact, as
they cannot be safely patched. Depending on the proximity of dif-
ferent gadgets (ending with different indirect branch instructions)
within the same basic block, separate candidate regions are merged
to minimize the required instrumentation in terms of additional jmp
instructions. The ﬁnal boundaries of each region are computed
based on the strategy described in Section 3.2.
4.2 PE File Layout Modiﬁcation
Once all to-be-displaced code regions have been identiﬁed, the PE
ﬁle is augmented with a new code section, named .ropf, in which
the displaced regions will be moved. The executable is modiﬁed
using the pefile python library [17]. First, we deﬁne a new sec-
tion header in accordance with the IMAGE_SECTION_HEADER
structure, which is inserted into the section headers array, between
the last existing header and the ﬁrst data section. For simplicity, the
new section is appended at the end of the ﬁle, so that the rest of the
sections remain intact. Although more complex layouts could be
studied to keep displaced instructions closer to their original loca-
tions and facilitate patching using two-byte jmp instructions (e.g.,
by identifying and reusing any unused regions within existing code
segments), the resulting increase in coverage would still be minimal
(due to the small percentage of less-than-5-byte basic blocks, as
well as the limited reach of the 8-bit displacement), so the added
complexity is not justiﬁed.
Besides the addition of the above entry, some existing information
related to the overall PE image must be updated accordingly. Specif-
ically, the following entries in the IMAGE_OPTIONAL_HEADER
structure need to be updated: size of code and image, size of ini-
tialized data and uninitialized data, and the checksum of the binary.
The size of the .ropf section is calculated based on the identiﬁed
code regions, and by provisioning some extra room for the added
jmp instructions for transferring control back to the original code,
as well as some padding space.
4.3 Binary Instrumentation
With the .ropf section ready to host the displaced instructions,
the actual patching of the original code and the copying of the
displaced instructions can begin. The identiﬁed code regions are
copied and placed in the .ropf section in a randomly chosen order
(an additional small random gap can be added between successive
regions if needed). As regions located within the same basic block
or function of the original code end up in close proximity after dis-
placement, this some times has a positive impact in terms of runtime
overhead due to code locality, as discussed in Section 5.4. More
sophisticated ordering schemes could also be explored, especially
when taking into consideration hot spots and code locality, e.g.,
based on prior proﬁling information. To diversify the locations of
gadgets even further, a large padding area of a randomly selected
size is allocated at the beginning of the .ropf section.
For the code disassembly and reassembly operations needed to
patch the original code locations, adjust the operands of displaced
instructions, and insert additional jmp instructions at the end of
displaced regions (whenever necessary), we use the Capstone frame-
work [46]. We have also employed several optimizations using
bit-level operations to speed up the instrumentation phase. Care
must be taken while generating the jmp instructions for patching
the original code so that any immediate operands do not result in
accidental generation of new potentially useful gadgets (e.g., due
to embedded 0xC3 bytes). This is avoided by adjusting the destina-
tion address of the displaced instructions by a few bytes in case an
immediate contains an indirect branch opcode.
Finally, a ﬁnal important step for ensuring the correct operation of
the resulting binary is to update the PE ﬁle’s relocation information
for all affected code locations. To enable loading of modules at
arbitrary addresses, PE ﬁles contain a .reloc section that contains
a list of offsets (relative to each PE section), known as “ﬁxups” [45,
51]. At load time, these entries specify the absolute code or data
07002806  E91CA00100    jmp  loc_0701C8270700280B  CC            int3...07002813  CC            int30701C827  53            push  ebx0701C828  FF1504000107  call  ds:LeaveCriticalSection0701C82E  8D4704        lea  eax,[edi+0x4]0701C831  5F            pop  edi0701C832  5E            pop  esi0701C833  5B            pop  ebx0701C834  C3            ret.text  section.text  section.ropf  sectionOriginalDisplaced07002806  53            push  ebx07002807  FF1504000107  call  ds:LeaveCriticalSection0700280D  8D4704        lea  eax,[edi+0x4]07002810  5F            pop  edi07002811  5E            pop  esi07002812  5B            pop  ebx07002813  C3            ret28Figure 3: Rewriting the relocation section of a PE ﬁle for both the original (.text) and the new (.ropf) code sections.
addresses within the module that must be adjusted according to the
module’s load address (which is usually randomly selected, due to
ASLR).
As Figure 3 shows, the relocation table consists of a series of
blocks grouped according to their relative virtual address (RVA).
Each block begins with the RVA, the size of the block, the actual
relocation entries, and some padding bytes for alignment. Each
relocation entry consists of two bytes. The ﬁrst four bits of the entry
are set to 0x3, which represents the most common type of ﬁxup
transformation (IMAGE_REL_BASED_HIGHLOW). The following
12 bits represent the offset from the RVA of the corresponding block.
The relocatable address can be calculated by adding the RVA and
the offset, making it relative to the new base address of the segment
instead of its original (preferred) one [51].
A crucial detail here is that any relocation entries regarding lo-
cations in the original code regions (that have now been displaced)
must be removed from the respective block. The reason for this is
that any stale entries can lead to corruption of the inserted jmp in-
structions, e.g., in case any of the overwritten instructions happened
to involve RVAs with corresponding .reloc entries. Thus, not
only new entries for the .ropf section must be created, but also
the corresponding entries for the .text section must be removed,
resulting in a total number of relocation entries equal to the number
of entries in the original binary.
5. EXPERIMENTAL EVALUATION
In this section we present the results of the experimental evalu-
ation of our prototype implementation in terms of randomization
coverage, ﬁle size increase, correct execution, and performance
overhead. Our tests were performed on a 64-bit Windows 10 system
equipped with an Intel Core i5-4590 3.3GHz processor and 16GB
of RAM. For the evaluation of randomization coverage, we used
a set of 2,695 PE ﬁles (both main executables and DLLs) from
two different versions of Adobe Reader (Reader v9.3 and Acrobat
Reader DC), Microsoft Ofﬁce 2013, two Windows 7 and Windows
8.1 installations, and other programs and utilities, as detailed in
Table 1. For correctness and performance evaluation, we used a
set of core Windows DLLs, as well as the Windows version of the
SPEC CPU2006 benchmark suite.
5.1 Randomization Coverage
We begin our evaluation with the goal of assessing the improve-
ment in terms of randomization coverage that instruction displace-
Figure 4: Randomized gadgets per PE ﬁle due to in-place code
randomization, instruction displacement, and the combination
of both techniques.
ment can achieve. To that end, we compare the randomization
coverage of in-place code randomization [41], instruction displace-
ment, and the combination of the two techniques, as described in
Section 3.2.3. In our initial experiments we use a maximum gad-
get length of ﬁve instructions, so that our results are comparable
with the results reported by Pappas et al. [41]. In Section 5.1.3, we
present further results when considering gadgets of size up to 10
and 15 instructions.
Table 1 summarizes key statistics about the distribution of gadgets
in the tested binaries, and the randomization coverage of the two
techniques. The 2,695 executables contain a total of approximately
13 million gadgets, 58.52% of which are unintended. The “unreach-
able” column refers to gadgets located in regions that cannot be
properly disassembled, and thus are left untouched (by both tech-
niques). These amount to 6.37% of all gadgets on average. In the
rest of this section, unless speciﬁed otherwise, percentages of ran-
domized gadgets are calculated over the number of gadgets located
only within the properly disassembled code regions.
5.1.1 Coverage Improvement
Figure 4 shows the percentage of randomized gadgets in each PE
ﬁle achieved by in-place code randomization, instruction displace-
ment, and the combination of both techniques, as a cumulative frac-
.ropf.relocNT_HEADERSECTION_HEADERS….text…DOS_HEADER……PaddingBlock Size0x1C000 + (0x304C AND 0x0FFF)3FC73FE50000Type RVAType RVAType RVA00001FC7 IMAGE_REL_BASED_HIGHLOW00001FE5 IMAGE_REL_BASED_HIGHLOW00002000000000D83046306630713076RVA ofBlockSize of BlockType RVAType RVAType RVAType RVA00002046IMAGE_REL_BASED_HIGHLOW00002066 IMAGE_REL_BASED_HIGHLOW00002071 IMAGE_REL_BASED_HIGHLOW00002076IMAGE_REL_BASED_HIGHLOW3870Type RVA00018870 IMAGE_REL_BASED_HIGHLOW0001C000000000B43002304CRVA ofBlockSize of BlockType RVAType RVA0001C002IMAGE_REL_BASED_HIGHLOW0001C04C IMAGE_REL_BASED_HIGHLOWCumulative fraction of PE files00.20.40.60.81Randomized gadgets (%)0102030405060708090100In−place randomizationInstruction displacementBoth29Applications
Gadget Distribution
Total Unintended Unreachable
Name
Adobe Reader
MS Ofﬁce 2013
Windows 7
Windows 8.1
Various
Total
Files
50
18
1,224
1,341
62
2,695
677,689
195,774
5,595,031
6,077,543
496,749
13,042,786
55.24%
55.04%
53.97%
63.46%
55.15%
58.52%
Randomized Gadgets
IPR
Disp.
Both
4.61% 82.16% 88.98% 96.69%
4.93% 83.02% 88.71% 97.25%
6.11% 83.95% 89.11% 97.41%
6.90% 86.43% 91.14% 97.15%
5.79% 83.23% 89.21% 96.83%
6.37% 84.96% 90.04% 97.23%
Other
File Increase
2.18%
2.98%
1.94%
1.42%
1.79%
1.68%