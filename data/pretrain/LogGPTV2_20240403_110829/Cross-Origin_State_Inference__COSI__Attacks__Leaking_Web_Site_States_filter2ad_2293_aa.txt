title:Cross-Origin State Inference (COSI) Attacks: Leaking Web Site States
through XS-Leaks
author:Avinash Sudhodanan and
Soheil Khodayari and
Juan Caballero
Cross-Origin State Inference (COSI) Attacks:
Leaking Web Site States through XS-Leaks
Avinash Sudhodanan
IMDEA Software Institute
PI:EMAIL
Soheil Khodayari
CISPA Helmholtz Center for Information Security
soheil.khodayari@cispa.saarland
Juan Caballero
IMDEA Software Institute
PI:EMAIL
Abstract—In a Cross-Origin State Inference (COSI) attack, an
attacker convinces a victim into visiting an attack web page, which
leverages the cross-origin interaction features of the victim’s web
browser to infer the victim’s state at a target web site. Multiple
instances of COSI attacks have been found in the past under
different names such as login detection or access detection attacks.
But, those attacks only consider two states (e.g., logged in or not)
and focus on a speciﬁc browser leak method (or XS-Leak).
This work shows that mounting more complex COSI attacks
such as deanonymizing the owner of an account, determining if
the victim owns sensitive content, and determining the victim’s
account type often requires considering more than two states. Fur-
thermore, robust attacks require supporting a variety of browsers
since the victim’s browser cannot be predicted apriori. To address
these issues, we present a novel approach to identify and build
complex COSI attacks that differentiate more than two states and
support multiple browsers by combining multiple attack vectors,
possibly using different XS-Leaks. To enable our approach, we
introduce the concept of a COSI attack class. We propose two
novel techniques to generalize existing COSI attack instances into
COSI attack classes and to discover new COSI attack classes. We
systematically apply our techniques to existing attacks, identifying
40 COSI attack classes. As part of this process, we discover
a novel XS-Leak based on window.postMessage. We implement
our approach into Basta-COSI, a tool to ﬁnd COSI attacks in
a target web site. We apply Basta-COSI to test four stand-alone
web applications and 58 popular web sites, ﬁnding COSI attacks
against each of them.
I.
INTRODUCTION
In a Cross-Origin State Inference (COSI) attack, the at-
tacker’s goal is to determine the state of a victim visiting an
attack page (e.g., attack.com/index.html), in a target web site
not controlled by the attacker (e.g., linkedin.com). The state
of the victim in a target web site is deﬁned, among others,
by login status, account, and content properties. Determining
the victim’s state can have important security implications.
For example, determining that a victim is logged into a
target web site implies that the victim owns an account in
that site. This is problematic for privacy-sensitive web sites
such as those related to post-marital affairs and pornography.
Determining content ownership can be used to establish if
a program committee member is reviewing a speciﬁc paper
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24278
www.ndss-symposium.org
in a conference management system, or if the victim has
uploaded some copyrighted content
to an anonymous ﬁle
sharing site. Determining if the victim owns a speciﬁc account,
i.e., deanonymizing the account owner, enables identifying
which company employee runs an anonymous blog criticizing
the company’s management. Such state inferences are even
more critical when the attacker is a nation state that performs
censorship and can determine if the victim has an account in, or
is the administrator of, some prohibited web site. The problem
is aggravated by COSI attacks being web attacks, which can
be performed even when the victim employs anonymization
tools such as a virtual private network.
In a COSI attack, the attacker convinces the victim to visit
an attack page. The attack page includes at least one state-
dependent URL (SD-URL) from the target web site, whose
response depends on the state of the visitor. For example, a
SD-URL may point to some content in the target web site
only accessible when the victim has a speciﬁc state such as
being authenticated. The inclusion forces the victim’s browser
to send a cross-origin request to the target web site. Since the
request is cross-origin, the same-origin policy (SOP) prevents
the attack page from directly reading the response. However,
the attacker can leverage a browser leak method (also known as
XS-Leak) to infer, from the cross-origin response, the victim’s
state at the target web site.
Multiple instances of COSI attacks have been found in the
last 13 years by both security analysts (e.g., [26], [27], [33],
[36], [40], [51]) and academics (e.g., [21], [31], [38], [56],
[64]), with roughly half of them being presented in the last
four years, and several in 2019 (e.g., [55], [56], [61]). However,
they have previously been considered as sparse attacks under
different names such as login detection attacks [34], [35],
[51], [56], login oracle attacks [50], [57], cross-site search
attacks [31], URL status identiﬁcation attacks [47], and cross-
site frame leakage attacks [55]. As far as we know, we are
the ﬁrst to systematically study these attacks and group them
under the same COSI attack denomination.
Previous works have several limitations. First, they con-
sider two states. For example, login detection attacks differenti-
ate if the victim is logged in or not, and access detection attacks
if the victim has previously accessed a site or not. However,
sites typically have more than two states. Considering only
two states limits the type of attacks that can be launched, and
can introduce false positives, e.g., determining that a victim
is logged in when he is not. A second limitation is that they
often test attacks only on one browser, thus the attack may not
work on other browsers. To address both issues, we present a
novel approach to identify and build complex COSI attacks by
combining multiple attack vectors in order to handle more than
two states and multiple browsers. For example, our approach
identiﬁes a COSI attack against HotCRP that determines if
the victim, i.e., a program committee member using Chrome,
Firefox, or Edge is the reviewer of a submitted paper. This
attack involves multiple states (e.g., author, reviewer, logged
out) and requires two COSI attack vectors: one to determine
if the victim is logged in and another to determine if a logged
victim is reviewing the paper.
A third limitation is that they focus on a speciﬁc XS-Leak.
Instead, our approach is generic; it supports all known XS-
Leaks and can easily accommodate new ones. For example,
it incorporates a novel XS-Leak we have discovered based
on window.postMessage, which affects popular sites such as
blogger.com, ebay.com, reddit.com, and youtube.com. At
the core of our generic approach is the concept of a COSI
attack class, which deﬁnes the SD-URLs that can be attacked
using a speciﬁc XS-Leak, the affected browsers, and the set
of inclusion methods (i.e., HTML tags and DOM methods)
that can be used to include the SD-URL in the attack page.
To identify attack classes we propose a novel generalization
technique that given a previously known COSI attack, gen-
eralizes it into an attack class that covers many other attack
variants. We also propose an ampliﬁcation technique that iden-
tiﬁes previously unknown variations, e.g., attack classes using
different
inclusion methods. We systematically explore the
literature to identify previously known COSI attack instances
and apply our generalization and ampliﬁcation techniques on
them. This process identiﬁes 40 COSI attack classes, of which
19 generalize prior attacks and 21 are new variations.
We implement our approach into a tool called Basta-
COSI, publicly available as part of the open-source ElasTest
platform [4]. Given as input a target web site and state scripts
deﬁning the user states at the target web site, Basta-COSI
identiﬁes SD-URLs in the target web site, tests if those SD-
URLs can be attacked using any of the 40 attack classes, and
produces attack pages that combine multiple attack vectors to
uniquely identify a state. We have applied Basta-COSI to 62
targets: four stand-alone web applications (HotCRP, GitLab,
GitHub, and OpenCart) and 58 popular web sites. Basta-COSI
discovers at least one COSI attack against all of them; it
ﬁnds login detection attacks against all 62 targets, account
deanonymization attacks in 36, account type detection attacks
in 5, SSO status attacks in 12, and access detection attacks
in 5. The attacks include, among others, deanonymization
attacks for determining if the victim is the reviewer of a
paper in HotCRP, owns a blog in blogger.com, an account
in pornhub.com, or a GitLab/GitHub repository.
The following are the main contributions of this paper:
• We present a novel approach to identify and build
complex COSI attacks that differentiate more than
two states and support multiple browsers. To enable
our approach we propose COSI attack classes, which
deﬁne the SD-URLs and browsers that can be attacked
using an XS-Leak and a set of inclusion methods.
• We discover a novel XS-Leak based on win-
dow.postMessage that affects the three major browsers
and can be leveraged to attack popular web sites.
State Attribute
Login Status
Single Sign-On Status
Access Status
Account Type
Account Age Category
Account Ownership
Content Ownership
Possible Values
(a) Logged in
(b) Not logged in
(a) Logs in via a speciﬁc SSO service
(b) Logs in via another SSO service
(a) Has previously accessed
(b) Has not previously accessed
(a) Has a premium account
(b) Has a regular account
(a) Age above a certain threshold
(b) Age below a certain threshold
(a) Owner of a speciﬁc account
(b) Not the owner of an account
(a) Owner of a speciﬁc content
(b) Not the owner of a content
TABLE I: Examples of user states in a target web site.
• We propose two techniques to generalize known COSI
attack instances into COSI attack classes and to dis-
cover new variations. We perform the ﬁrst systematic
study of COSI attacks and apply our techniques to
them, identifying 40 attack classes, of which 19 gen-
eralize prior attacks and 21 are new variations.
• We implement our approach into Basta-COSI, a tool
to ﬁnd COSI attacks in a target web site. We ap-
ply Basta-COSI to 62 targets including stand-alone
web applications and popular live sites. We ﬁnd
COSI attacks against all of them, enabling account
deanonymization, account type inference, SSO status,
login detection, and access detection.
• We have released Basta-COSI as part of the security
service of the ElasTest open-source platform for test-
ing cloud applications [4].
II. OVERVIEW
This Section provides an overview of COSI attacks. Sec-
tion II-A details the user state at a target web site. Section II-B
describes the two phases of a COSI attack. Section II-C
discusses handling more than two states. Finally, Section II-D
presents the COSI attack threat model.
A. User State
Most web sites have accounts owned by a user and identi-
ﬁed by a username. In this paper a user is a person who visits
a target web site and may or may not own an account in that
site; it should not be confused with a username that identiﬁes
an account. Accounts are often anonymous, i.e., the person
that owns the account is unknown. Deanonymizing an account
means linking its username to the person owning the account.
Web sites that do not have accounts often deﬁne sessions to
identify users that visit them repeatedly. In those sites a session
acts as an account for our purposes.
In a COSI attack, the attacker’s goal is to infer the state of a
victim user with respect to a target web site, not controlled by
the attacker. The state of a user at a target web site is deﬁned
by the values of status, account, and ownership state attributes.
Example state attributes are provided in Table I. The values
of those state attributes deﬁne, at a given time, what content
the user can access (or receives) from the target site. Status
attributes include whether the user is logged in, logged out,
logged in using a speciﬁc single sign-on (SSO) service, or
2
has an ongoing session (i.e., in sites without user accounts).
Account attributes include the account
type (e.g., regular,
premium, administrator), the account age category (e.g., under-
age user with restricted access). Ownership attributes include
whether the user is the owner of some speciﬁc account and
whether he owns some content stored in the site (e.g., a PDF
paper in a conference management system).
The attributes that deﬁne the user’s state are speciﬁc to
each target site. Any of those attributes may be targeted by
an attacker with different, often critical, security implications.
For example, COSI attacks targeting the login status can be
used by an oppressive regime to determine if the victim is
logged in (and thus owns an account) in a censored site [22],
despite the victim using a VPN. They can also be used to
blackmail users owning accounts in privacy-sensitive sites
such as those related to pornography [24] and post-marital
affairs [39]. Furthermore, they may be used as an initial step
for Cross-Site Request Forgery (CSRF) [20] or Cross-Site
Scripting (XSS) [49] attacks. Attacks on access status have
similar implications than those on login status for sites without
user accounts. For example, they could be used to determine
if a user previously visited a forbidden site [56].
COSI attacks targeting ownership are highly impactful.
Content ownership can be used to determine if a program
committee member is reviewing a speciﬁc paper, or if a user
has uploaded some copyrighted content to an anonymous ﬁle
sharing site. Account ownership can be used for deanonymiz-
ing the account in a closed-world setting, i.e., determining
which of n known persons owns a speciﬁc account. Such
closed-world deanonymization can be used to determine which
company employee is the owner of an anonymous blog highly
critical with the company’s management.
Attacks that target account type, account age category, and
login status can be used to ﬁngerprint the victim [41], [71],
and applied for targeted advertising by a malicious publisher
in an open-world setting (where the set of users is unknown).
Finally, knowledge of the SSO service used by the victim can
be used to exploit a vulnerability in that SSO [16], [17], [66].
State scripts. In this work, we capture states at a target
site using state scripts that can be executed to automatically
log into the target site using a conﬁgurable browser and the
credentials of an account with a speciﬁc conﬁguration. For
example, we may create multiple user accounts with different
conﬁgurations, e.g., premium and free accounts, two users that
own different blogs, or authors that have submitted different
papers to a conference management system. We also create a
state script for the logged out state.
B. COSI Attack Overview
In a COSI attack, the attacker convinces a victim to visit
an attack page. The attack page leverages the cross-origin
functionalities of the victim’s web browser to infer the victim’s
state at a target web site. A COSI attack comprises of two
phases: preparation and attack.
Preparation. The goal of the preparation phase is to create
an attack page that when visited by a victim will leak the
victim’s state at the target web site. An attack page implements
at least one, possibly more, attack vectors. Each attack vector
is a triplet of a state-dependent URL from the target web
site, an inclusion method to embed the SD-URL in the attack
page, and an attack class that deﬁnes, among others, a leak
method (or XS-Leak) that interacts with the victim’s browser
to disclose a victim’s state at the target site. An attack page
may contain multiple attack vectors. For example, it may need
to chain attack vectors to uniquely distinguish a state, e.g., one
to identify if the victim is logged in, and another to identify
if a logged victim has a premium account.
We say that a URL is state-dependent if, when requested
through HTTP(S), it returns different responses depending on
the state it is visited from. Note that it is not needed that
each state returns a different response. For example, if there
are 6 states and two different responses, each for three states,
the URL is still state-dependent. The SD-URL is included
by the attack page using an inclusion method such as an
img, script) or a browser DOM method
HTML tag (e.g.,
(e.g., window.open). When the attack page is visited by the
victim, the inclusion method forces the victim’s browser to
automatically request the SD-URL from the target site. The
speciﬁc response received depends on the victim’s current
state. SD-URLs are very common in web applications. For
example, in many web applications, sending a request for a
proﬁle’s picture will return an image if the user is logged in,
and an error page, or a redirection to the login page, otherwise.
Similarly, in a blog application, a new post can only be added
if the user is both logged in and the owner of the blog.
The request induced by the attack page for a SD-URL
the target site is cross-origin, and thus controlled by
at
the Same-Origin Policy (SOP) [72]. The SOP prevents the
attack page from directly reading the contents of a cross-
origin response [18]. However, there exist XS-Leaks that allow
bypassing a browser’s SOP to disclose information about
cross-origin responses. For example, the EventsFired XS-Leak
distinguishes responses to SD-URLs that trigger a callback in
one state (e.g., onload) and another callback (e.g., onerror), or
no callback, in another state [36].
While a target site may contain many SD-URLs, only
a subset of those may be useful to mount a COSI attack.
One main challenge with XS-Leaks is that their behavior may
depend on the target browser and the inclusion method used.
Unfortunately, this key concept is missing from prior works
presenting COSI attack instances. In this work, we introduce
the concept of a COSI attack class, which deﬁnes the two
different responses to a SD-URL that can be distinguished
using a XS-Leak, the possible inclusion methods that can
be used in conjunction with the XS-Leak, and the browsers
affected. Attacks classes are independent of the target site
states and thus can be used to mount attacks against different
targets. Section III describes our approach to identify attack
classes and the 40 COSI attack classes we identiﬁed.
Based on the attack classes, we propose a novel approach to
detect COSI attacks. Our approach ﬁrst collects the responses
to the same URL from different states. SD-URLs will be the
ones that produce different responses in some states. Each pair
of different responses coming from distinct states is matched
with the list of known attack classes. If a matching attack
class is found, then an attack vector can be built to distinguish
the responses (and thus the states that produce them) that
uses that SD-URL, the XS-Leak in the attack class, and one
3
of the inclusion methods deﬁned by the attack class. Since
there may be n > 2 states that need to be distinguished, the
process repeats until sufﬁcient attack vectors are identiﬁed to
uniquely distinguish the target state to be attacked. We have
implemented this approach into Basta-COSI, a tool to detect
COSI attacks, detailed in Section IV.
Attack. In the attack phase, the attacker convinces the victim
into visiting the attack page. This can be achieved in multiple
ways. One possibility is sending an email with the attack