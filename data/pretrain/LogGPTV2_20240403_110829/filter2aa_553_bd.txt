行示例：
To enter the triskaidekaphobia therapy club,
please enter the secret code number: 12
To enter the triskaidekaphobia therapy club,
please enter the secret code number: 14
To enter the triskaidekaphobia therapy club,
please enter the secret code number: 13
Congratulations! You are cured!
使用while循环也能写出等价的程序，但是长一些，如程序清单6.16所
示。
程序清单6.16 entry.c程序
/* entry.c -- 出口条件循环 */
#include 
int main(void)
{
const int secret_code = 13;
int code_entered;
367
printf("To enter the triskaidekaphobia therapy club,\n");
printf("please enter the secret code number: ");
scanf("%d", &code_entered);
while (code_entered != secret_code)
{
printf("To enter the triskaidekaphobia therapy club,\n");
printf("please enter the secret code number: ");
scanf("%d", &code_entered);
}
printf("Congratulations! You are cured!\n");
return 0;
}
下面是do while循环的通用形式：
do
statement
while ( expression );
statement可以是一条简单语句或复合语句。注意，do 
while循环以分号
结尾，其结构见图6.5。
do while循环在执行完循环体后才执行测试条件，所以至少执行循环体
一次；而for循环或while循环都是在执行循环体之前先执行测试条件。do
368
while循环适用于那些至少要迭代一次的循环。例如，下面是一个包含do
while循环的密码程序伪代码：
图6.5 do while循环的结构
do
{
提示用户输入密码
读取用户输入的密码
} while (用户输入的密码不等于密码);
避免使用这种形式的do while结构：
do
{
询问用户是否继续
369
其他行为
} while (回答是yes);
这样的结构导致用户在回答“no”之后，仍然执行“其他行为”部分，因为
测试条件执行晚了。
小结：do while语句
关键字：do while
一般注解：
do while 语句创建一个循环，在 expression 为假或 0 之前重复执行循环
体中的内容。do while语句是一种出口条件循环，即在执行完循环体后才根
据测试条件决定是否再次执行循环。因此，该循环至少必须执行一次。
statement部分可是一条简单语句或复合语句。
形式：
do
statement
while ( expression );
在test为假或0之前，重复执行statement部分。
示例：
do
scanf("%d", &number);
while (number != 20);
370
6.9 如何选择循环
如何选择使用哪一种循环？首先，确定是需要入口条件循环还是出口条
件循环。通常，入口条件循环用得比较多，有几个原因。其一，一般原则是
在执行循环之前测试条件比较好。其二，测试放在循环的开头，程序的可读
性更高。另外，在许多应用中，要求在一开始不满足测试条件时就直接跳过
整个循环。
那么，假设需要一个入口条件循环，用for循环还是while循环？这取决
于个人喜好，因为二者皆可。要让for循环看起来像while循环，可以省略第1
个和第3个表达式。例如：
for ( ; test ; )
与下面的while效果相同：
while ( test )
要让while循环看起来像for循环，可以在while循环的前面初始化变量，
并在while循环体中包含更新语句。例如：
初始化;
while ( 测试 )
{
其他语句
更新语句
}
与下面的for循环效果相同：
371
for ( 初始化 ;测试 ; 更新 )
其他语句
一般而言，当循环涉及初始化和更新变量时，用for循环比较合适，而
在其他情况下用while循环更好。对于下面这种条件，用while循环就很合
适：
while (scanf("%ld", &num) == 1)
对于涉及索引计数的循环，用for循环更适合。例如：
for (count = 1; count 
#define ROWS  6
#define CHARS 10
int main(void)
{
int row;
char ch;
for (row = 0; row 
int main(void)
{
const int ROWS = 6;
const int CHARS = 6;
int row;
char ch;
for (row = 0; row 
#define SIZE 10
#define PAR 72
int main(void)
{
int index, score[SIZE];
379
int sum = 0;
float average;
printf("Enter %d golf scores:\n", SIZE);
for (index = 0; index < SIZE; index++)
scanf("%d", &score[index]);   // 读取10个分数
printf("The scores read in are as follows:\n");
for (index = 0; index < SIZE; index++)
printf("%5d", score[index]);  // 验证输入
printf("\n");
for (index = 0; index < SIZE; index++)
sum += score[index];       // 求总分数
average = (float) sum / SIZE;    // 求平均分
printf("Sum of scores = %d, average = %.2f\n", sum, 
average);
printf("That's a handicap of %.0f.\n", average - PAR);
return 0;
}
先看看程序清单6.19是否能正常工作，接下来再做一些解释。下面是程
序的输出：
Enter 10 golf scores:
380
99 95 109 105 100