    AutomaticUpdates: stage; rpm-ostreed-automatic.service: running
    Transaction: automatic (stage)
    ```
    更新完成后，部署列表中会暂存新的部署，原始引导的部署将保持不变。您可以决定您是否要使用新部署引导系统，或者可以等待下一次更新。
    要查看部署列表，请运行 `rpm-ostree status`{.literal} 命令。
    以下是输出示例：
    ``` screen
    # rpm-ostree status
    State: idle
    AutomaticUpdates: stage; rpm-ostreed-automatic.timer: last run  ago
    Deployments:
    ```
    要使用更新的软件包详情查看部署列表，请运行
    `rpm-ostree status -v`{.literal} 命令。
:::
:::
:::
::: section
::: titlepage
# []{#managing-rhel-for-edge-images_composing-installing-managing-rhel-for-edge-images.html#_rolling_back_rhel_for_edge_images}为 Edge 镜像回滚 RHEL {.title}
:::
您可以验证更新的镜像是否已成功部署。如果部署不成功，您可以回滚到以前的版本（提交）。要回滚到以前的功能状态，您可以手动执行这些步骤，也可以使用自动流程。
::: section
::: titlepage
## []{#managing-rhel-for-edge-images_composing-installing-managing-rhel-for-edge-images.html#how-are-rhel-for-edge-images-restored_managing-rhel-for-edge-images}RHEL for Edge 镜像如何回滚 {.title}
:::
对于 RHEL for Edge
镜像，仅将事务更新应用到操作系统。通过事务更新，您可以轻松地将失败的更新回滚到最后已知的良好状态，从而防止更新期间系统失败。
您可以在 Greenboot
中使用智能回滚，从而消除在应用程序稳定性和安全更新应用程序之间进行选择的问题。
Greenboot 利用
rpm-ostree，并运行在系统启动时运行的自定义健康检查。如果出现问题，系统将回滚更改并保留最后一个工作状态。
下图演示了 RHEL for Edge 镜像回滚过程。
::: informalfigure
::: mediaobject
![镜像恢复过程](images/edge-image-restore.png)
:::
:::
:::
::: section
::: titlepage
## []{#managing-rhel-for-edge-images_composing-installing-managing-rhel-for-edge-images.html#restoring-rhel-for-edge-images-manually_managing-rhel-for-edge-images}手动回滚 RHEL for Edge 镜像 {.title}
:::
如果 RHEL for Edge
镜像更新部署失败，或者更新无法成功完成，您可以手动回滚到以前的部署版本。
要回滚到以前的版本，请执行以下步骤：
::: orderedlist
**流程**
1.  运行 `回滚`{.literal} 命令：
    ``` screen
    # rpm-ostree rollback
    ```
    命令输出提供有关正在移动的提交 ID
    的详细信息，并指示与正在删除的软件包的详细信息相关的已完成事务。
2.  重启系统。
    ``` screen
    # systemctl reboot
    ```
    命令将激活上一个带有 stable 内容的提交。应用更改并恢复之前的版本。
:::
:::
::: section
::: titlepage
## []{#managing-rhel-for-edge-images_composing-installing-managing-rhel-for-edge-images.html#restoring-rhel-for-edge-images-using-an-automated-process_managing-rhel-for-edge-images}使用自动化流程回滚 RHEL for Edge 镜像 {.title}
:::
Greenboot
检查提供了一个框架，它集成到引导过程中，并可在健康检查失败时触发
`rpm-ostree`{.literal}
回滚。对于健康检查，您可以创建一个自定义脚本来指示健康检查是否通过或失败。根据结果，您可以决定何时触发回滚。
要创建健康检查脚本，请执行以下步骤：
::: orderedlist
**流程**
1.  创建返回标准退出代码 `0`{.literal} 的脚本。
    例如，以下脚本确保配置的 DNS 服务器可用：
    ::: informalexample
    ``` screen
    #!/bin/bash
    DNS_SERVER=$(grep ^nameserver /etc/resolv.conf | head -n 1 | cut -f2 -d" ")
    COUNT=0
    # check DNS server is available
    ping -c1 $DNS_SERVER
    while [ $? != '0' ] && [ $COUNT -lt 10 ]; do
    ((COUNT++))
    echo "Checking for DNS: Attempt $COUNT ."
    sleep 10
    ping -c 1 $DNS_SERVER
    done
    ```
    :::
2.  在 `/etc/greenboot/check/required.d/ 中包括`{.literal}
    健康检查的可执行文件。
    ::: informalexample
    ``` screen
    chmod +x check-dns.sh
    ```
    :::
    在下一次重启期间，将在系统进入 boot-complete.target
    之前，作为引导过程的一部分来执行
    脚本。如果健康检查成功，则不执行任何操作。如果健康检查失败，系统会在将更新标记为失败并回滚到上一更新之前多次重启。
:::
::: title
**验证步骤**
:::
要检查默认网关是否可访问，请运行以下健康检查脚本：
::: orderedlist
1.  创建返回标准退出代码 `0`{.literal} 的脚本。
    ::: informalexample
    ``` screen
    #!/bin/bash
    DEF_GW=$(ip r | awk '/^default/ {print $3}')
    SCRIPT=$(basename $0)
    count=10
    connected=0
    ping_timeout=5
    interval=5
    while [ $count -gt 0 -a $connected -eq 0 ]; do
      echo "$SCRIPT: Pinging default gateway $DEF_GW"
      ping -c 1 -q -W $ping_timeout $DEF_GW > /dev/null 2>&1 && connected=1 || sleep $interval
      ((--count))
    done
    if [ $connected -eq 1 ]; then
      echo "$SCRIPT: Default gateway $DEF_GW is reachable."
      exit 0
    else
      echo "$SCRIPT: Failed to ping default gateway $DEF_GW!" 1>&2
      exit 1
    fi
    ```
    :::
2.  在 `/etc/greenboot/check/required.d/`{.literal}
    目录中包括健康检查的可执行文件。
    ::: informalexample
    ``` screen
    chmod +x check-gw.sh
    ```
    :::
:::
:::
:::
:::
[]{#edge-terminology-and-commands_composing-installing-managing-rhel-for-edge-images.html}
::: appendix
::: titlepage
# []{#edge-terminology-and-commands_composing-installing-managing-rhel-for-edge-images.html#edge-terminology-and-commands_composing-installing-managing-rhel-for-edge-images}附录 A. 术语和命令 {.title}
:::
本节提供 rpmostree 术语和命令。
::: section
::: titlepage
# []{#edge-terminology-and-commands_composing-installing-managing-rhel-for-edge-images.html#edge-rpmostree-terminology_edge-terminology-and-commands}ostree 和 rpm-ostree 术语 {.title}
:::
以下是一些用于 OSTree 和 rpm-ostree 镜像的有用术语。
::: table
[]{#edge-terminology-and-commands_composing-installing-managing-rhel-for-edge-images.html#idm139815575065888}
**表 A.1. ostree 和 rpm-ostree 术语**
::: table-contents
  -------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  术语           定义
  OSTree         此工具用于管理基于 Linux 的操作系统版本。OSTree 树视图与 Git 类似，它基于相似的概念。
  rpm-ostree     托管操作系统更新的混合镜像或系统软件包。
  commit         操作系统的发行版本或镜像版本。镜像构建器为 RHEL for Edge 镜像生成 ostree 提交。您可以使用这些镜像在 Edge 服务器上安装或更新 RHEL。
  refs           代表 ostree 中的分支。refs 始终解析为最新的提交。例如，rhel `/8/x86_64/edge`{.literal}。
  修订(Rev)      特定提交的 SHA-256。
  远程           托管 ostree 内容的 http 或 https 端点。这与 yum 存储库的 baseurl 类似。
  static-delta   对 ostree 镜像的更新始终是 delta 更新。如果 RHEL for Edge 镜像，则 TCP 开销可能高于预期值，因为更新了文件的数量。为避免 TCP 开销，您可以在特定提交之间生成 static-delta，并在单个连接中发送更新。这种优化有助于连接受限的大型部署。
  -------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::
:::
:::
::: section
::: titlepage
# []{#edge-terminology-and-commands_composing-installing-managing-rhel-for-edge-images.html#edge-ostree-commands_edge-terminology-and-commands}ostree 命令 {.title}
:::
本节提供一些在安装或管理 ostree 镜像时可以使用的 ostree 命令。
::: table
[]{#edge-terminology-and-commands_composing-installing-managing-rhel-for-edge-images.html#idm139815476222848}
**表 A.2. ostree 命令**
::: table-contents
+:---------------------------------+:---------------------------------+
| ostree pull                      | `ostree pull-lo                  |
|                                  | cal --repo [path] src`{.literal} |
|                                  |                                  |
|                                  | `ostree pull-local   --repo=`{.literal} |
|                                  |                                  |
|                                  | `ostree pull   --repo=`{.literal} |
+----------------------------------+----------------------------------+
| ostree summary                   | `ostree summary                  |
|                                  | -u --repo=`{.literal} |
+----------------------------------+----------------------------------+
| 查看 refs                        | `ostree                          |
|                                  | refs --repo ~/Code/src/osbuild-i |
|                                  | ot/build/repo/ --list`{.literal} |
+----------------------------------+----------------------------------+
| 查看 repo 中的提交               | `ostree log --re                 |
|                                  | po=/home/gicmo/Code/src/osbuild- |
|                                  | iot/build/repo/ `{.literal} |
+----------------------------------+----------------------------------+
| 检查提交                         | `ostree show --                  |
|                                  | repo build/repo `{.literal} |
+----------------------------------+----------------------------------+
| 列出 repo 的远程                 | `ostree remote li                |
|                                  | st --repo `{.literal} |
+----------------------------------+----------------------------------+
| 解决 REV                         | `ostree rev-parse --repo ~/Code/ |
|                                  | src/osbuild-iot/build/repo fedor |
|                                  | a/x86_64/osbuild-demo`{.literal} |
|                                  |                                  |
|                                  | `ostree rev-parse --rep          |
|                                  | o ~/Code/src/osbuild-iot/build/r |
|                                  | epo b3a008eceeddd0cfd`{.literal} |
+----------------------------------+----------------------------------+
| 创建 static-delta                | `ostree st                       |
|                                  | atic-delta generate --repo=[path |
|                                  | ] --from=REV --to=REV`{.literal} |
+----------------------------------+----------------------------------+
| 使用 GPG 密钥签署                | `ostree gpg-sign --rep           |
| `现有`{.literal} ostree 提交     | o= --gpg-homedir  COMMIT KEY-ID…`{.literal} |
+----------------------------------+----------------------------------+
:::
:::
:::
::: section
::: titlepage
# []{#edge-terminology-and-commands_composing-installing-managing-rhel-for-edge-images.html#rpm-ostree-commands_edge-terminology-and-commands}rpm-ostree commands {.title}
:::
本节提供一些 `rpm-ostree`{.literal} 命令，您可以在安装或管理 ostree
镜像时使用它们。
::: table
[]{#edge-terminology-and-commands_composing-installing-managing-rhel-for-edge-images.html#idm139815572710272}
**表 A.3. rpm-ostree commands**
::: table-contents
  命令                                                                                       描述
  ------------------------------------------------------------------------------------------ ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `rpm-ostree --repo=/home/gicmo/Code/src/osbuild-iot/build/repo/ db list `{.literal}   此命令会列出 \ 提交到存储库中的现有软件包。
  `rpm-ostree rollback`{.literal}                                                            ostree 管理一个有序的引导加载器条目列表，称为 `deployments`{.literal}。index 0 的条目是默认的启动加载器条目。每个条目都有一个单独的 `/etc`{.literal} 目录，但所有条目共享单个 `/var`{.literal} 目录。您可以通过按 Tab 键中断启动，使用引导加载器在条目之间进行选择。这会回滚到以前的状态，即默认部署更改以非默认状态进行。
  `rpm-ostree status`{.literal}                                                              此命令提供有关当前正在使用的部署的信息。按顺序列出所有可能部署的名称和 refspec，使得列表中的第一个部署是启动时的默认部署。标记为 \* 的部署是当前的引导部署，使用 \'r\' 标记代表最新的升级。
  `rpm-ostree db list`{.literal}                                                             使用此命令查看提交或提交中的软件包。您必须至少指定一个提交，但多个提交也起作用。
  `rpm-ostree db diff`{.literal}                                                             使用此命令显示两个 rev（修订）中的树之间的软件包如何不同。如果没有提供 revs，则引导的提交将与待处理提交进行比较。如果只提供单个 rev，则引导的提交将与该 rev 进行比较。
  `rpm-ostree upgrade`{.literal}                                                             此命令将下载当前树的最新版本并进行部署，将当前树设置为下一次启动的默认树。这不会影响运行的文件系统树。您必须重启才能使任何更改生效。
:::
:::
::: itemizedlist
**其它资源**
-   如需更多信息，请参阅 `rpm-ostree`{.literal} man page。
:::
:::
:::