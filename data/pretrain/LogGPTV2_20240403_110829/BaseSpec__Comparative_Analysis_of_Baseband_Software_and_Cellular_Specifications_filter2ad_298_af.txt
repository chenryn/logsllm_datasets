### Symbolic Execution Limitations in BASESPEC

The symbolic execution engine used by BASESPEC, which forms the foundation of its semantic analysis (§VI), has certain limitations. Specifically, many ARM instructions support conditional execution, indicated by special suffixes in their mnemonics, such as `ADDEQ` and `CMPEQ`. However, angr, the symbolic execution engine, does not fully support these instructions when the condition is symbolic. This results in errors at those instructions, leading to incorrect identification of IEs and, consequently, missing IEs.

### Exceptional Binary-Embedded Messages

We also identified a few binary-embedded messages with unusual structures. For example, the CC-ESTABLISHMENT message, according to the specification, should only contain the Setup container IE, excluding headers. However, BASESPEC reports multiple unknown mismatches, as the message includes suspicious IEs not defined in the specification. Upon further investigation, we found that the Setup container IE is a placeholder for the contents of a SETUP message, which consists of multiple IEs. Additionally, the SECURITY MODE COMMAND message contained four unknown imperative IEs. This message is designed to set up security parameters for encryption and integrity checks [6]. The decoder handles this message exceptionally due to its special purpose. Although these mismatches are false positives, they highlight the need for manual analysis of such special messages, as they often involve critical vulnerabilities (§VIII).

### Discovering Bugs with Mismatches

By analyzing mismatches identified by BASESPEC, we discovered nine erroneous cases (E1–E9) affecting 33 distinct messages. These errors were categorized into functional errors (E1–E5) and memory-related errors (E6–E9). Functional errors make the baseband firmware non-compliant with the specification, such as rejecting valid messages. Memory-related errors can lead to denial of service or even remote code execution. Except for E7, all other cases are newly discovered (i.e., 0-days). We responsibly disclosed all findings to the manufacturer.

#### Functional Errors from Missing and Unknown Mismatches (E1–E5)

As noted in §V-E, BASESPEC's mismatches are closely related to various types of bugs in baseband firmware. Missing imperative IEs and unknown IEs are strong indicators of functional errors. Table V summarizes the mismatches originating from these functional errors, except for false positives. One bug can cause multiple mismatches; for instance, E1, which involves incorrectly ordered six IEs, causes 22 mismatches. Table V also highlights the importance of both syntactic and semantic comparisons. E3 was identified only through syntactic comparison, while E5 was identified only through semantic comparison. Although these bugs do not have severe security implications, they can affect service quality by disrupting the processing of benign messages. Notably, E5 affects the ATTACH ACCEPT and ROUTING AREA UPDATE messages, which are critical for network connection.

#### Memory Corruptions from Invalid Mismatches (E6–E7)

By examining invalid mismatches and related handlers, we discovered two memory corruption vulnerabilities (E6–E7). Unlike functional errors, memory corruption vulnerabilities require more manual effort to understand the security issues in handler functions. Invalid mismatches can be harmless in terms of security if the handlers have additional checks. However, they help in discovering bugs by focusing on the effects of the mismatches rather than analyzing every handler logic, which is complex [25], [15], [64]. For example, E6 was discovered by focusing on an IE's length, which can be much larger than specified (5 bytes in the specification, but up to 225 bytes in the firmware).

#### Other Memory Corruptions from Failures (E8–E9)

By analyzing two failure cases of BASESPEC, we discovered two more memory corruption vulnerabilities (E8–E9). BASESPEC produced false positives for a few messages, and it stopped running its semantic analysis for one message. This indicates that the message is handled specially with a dedicated routine, which is error-prone. Further analysis revealed E8, which could be exploited for remote code execution (RCE), and E9, which involved a memory access violation error for the START DTMF ACKNOWLEDGE message. This vulnerability dereferences an improperly initialized pointer variable, causing a crash.

### Applying BASESPEC to Various Firmware Images

To test the applicability and scalability of BASESPEC, we analyzed all collected firmware images from Vendor1. BASESPEC effectively identified mismatches in all tested images, as summarized in Table IV. The build dates of the latest images span a two-month period, while the oldest ones span four years. The average time spent on analyzing bare-metal firmware was 3,156 seconds, with 2,557 seconds (≈ 81%) spent on preprocessing (§IV-B). To quickly analyze detected buggy cases, we extended BASESPEC’s L3 decoder identification (§IV-C) to find the erroneous functions discovered in §VII-C. Key observations include:

- Most identified cases have existed since the older firmware versions. For example, E8 and E9 are long-lived vulnerabilities.
- Some device models share the same mismatches and vulnerabilities, suggesting a shared codebase.
- There have been at least two security changes in the baseband implementation, with E6 appearing between April 2016 and April 2017, and E7 disappearing between March 2018 and February 2018.

### Applying BASESPEC to Other Vendors

To demonstrate BASESPEC's applicability to other vendors, we analyzed three firmware images from Vendor2, another top 3 baseband chipset vendor. We applied only the syntactic analysis part (§V-C) of BASESPEC, which is sufficient to show its applicability. The semantic analysis is left for future work due to angr's current limitations. Despite applying only the syntactic part, we discovered numerous mismatches and a previously unknown buffer overflow bug, which we reported to the vendor.

#### Firmware Acquisition

For Vendor2, there is no third-party website providing a well-structured list of firmware images. We collected firmware images using web searches and selected three based on the ARM architecture. Vendor2 adopted MIPS architecture in recent devices, so we used older ARM-based images. We verified that the latest firmware still contains the buffer overflow found in the old images.

#### Firmware Analysis

We followed similar steps to uncover the obscurity of Vendor2’s firmware. Unlike Vendor1, the firmware image includes a file with debug symbols, allowing us to recover function symbols. We identified a decoder function and figured out the binary-embedded message structures. Vendor2’s firmware has a machine-friendly message structure, different from Vendor1’s, but still meets our key intuitions (§III-B). We implemented an interpreter for syntactic comparison and reused other specification-related components.

#### Identifying Mismatches

Table VI shows the number of mismatches found by BASESPEC's syntactic comparison from three firmware images from Vendor2. Model X and Model Y showed the same result, with 8 unknown mismatches, which were false positives. BASESPEC correctly reported 37 invalid mismatches from both Model X and Y, and 48 invalid mismatches from Model Z, with 10 false positives in each model.

#### Discovering Bugs

By checking the invalid mismatches, we found a buffer overflow vulnerability in all three models. This bug, previously unknown, was caused by swapped lengths of IE1 and IE2 in the CS protocol. According to the specification, IE1 can be 14 bytes long, and IE2 can be 30 bytes long. However, the decoder accepts IE1 with 30 bytes and IE2 with 14 bytes, causing a buffer overflow in a handler function. This issue can lead to other security issues, such as denial of service. Other invalid mismatches revealed minor mistakes, such as one or two-byte differences in lengths, which can cause functional errors.

### Security Analysis and Case Study

This section details interesting cases from the nine erroneous cases (E1–E9). For more details on other bugs, please see §A.

**E1: Incorrect Indices in Global IE List**

By analyzing mismatches from BASESPEC, we discovered that the baseband firmware is not compliant with the specification because its Global IE List has incorrect indices for several IEs in ESM messages. The baseband manages IE information in the Global IE List to reuse it for multiple messages. Each IE has a unique index, and incorrect indices can lead to functional errors.