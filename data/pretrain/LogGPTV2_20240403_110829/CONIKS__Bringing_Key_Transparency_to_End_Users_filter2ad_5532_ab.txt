keys. This directory is constructed as a Merkle preﬁx tree
of all registered bindings in the provider’s namespace.
At regular time intervals, or epochs, the identity pro-
vider generates a non-repudiable “snapshot” of the di-
rectory by digitally signing the root of the Merkle tree.
We call this snapshot a signed tree root (STR) (see §3.3).
Clients can use these STRs to check the consistency of
key bindings in an efﬁcient manner, obviating the need
for clients to have access to the entire contents of the key
directory. Each STR includes the hash of the previous
STR, committing to a linear history of the directory.
To make the directory privacy-preserving, CONIKS
employs two cryptographic primitives. First, a private
index is computed for each username via a veriﬁable
unpredictable function (described in §3.4). Each user’s
keys are stored at the associated private index rather than
his or her username (or a hash of it). This prevents the
data structure from leaking information about usernames.
Second, to ensure that it is not possible to test if a users’
USENIX Association  
3
24th USENIX Security Symposium  385
key data is equal to some known value even given this
user’s lookup index, a cryptographic commitment3 to each
user’s key data is stored at the private index, rather than
the public keys themselves.
3.1 Merkle Preﬁx Tree
CONIKS directories are constructed as Merkle binary
preﬁx trees. Each node in the tree represents a unique
preﬁx i. Each branch of the tree adds either a 0 or a 1
to the preﬁx of the parent node. There are three types of
nodes, each of which is hashed slightly differently into a
representative value using a collision-resistant hash H():
Interior nodes exist for any preﬁx which is shared by
more than one index present in the tree. An interior node
is hashed as follows, committing to its two children:
hinterior = H (hchild.0||hchild.1)
Empty nodes represent a preﬁx i of length (cid:31) (depth (cid:31) in
the tree) which is not a preﬁx of any index included in the
tree. Empty nodes are hashed as:
hempty = H(cid:31)kempty||kn||i||(cid:31)(cid:30)
Leaf nodes represent exactly one complete index i
present in the tree at depth (cid:31) (meaning its ﬁrst (cid:31) bits form
a unique preﬁx). Leaf nodes are hashed as follows:
hleaf = H (kleaf||kn||i||(cid:31)||commit(namei||keysi))
where commit(namei||keysi) is a cryptographic commit-
ment to the name and the associated key data. Committing
to the name, rather than the index i, protects against colli-
sions in the VUF used to generate i (see §3.4).
Collision attacks. While arbitrary collisions in the hash
function are not useful, a malicious provider can mount
a birthday attack to try to ﬁnd two nodes with the same
hash (for example by varying the randomness used in the
key data commitment). Therefore, for t-bit security our
hash function must produce at least 2t bits of output.
The inclusion of depths (cid:31) and preﬁxes i in leaf and
empty nodes (as well as constants kempty and kleaf to dis-
tinguish the two) ensures that no node’s pre-image can be
valid at more than one location in the tree (including inte-
rior nodes, whose location is implicit given the embedded
locations of all of its descendants). The use of a tree-wide
nonce kn ensures that no node’s pre-image can be valid at
the same location between two distinct trees which have
chosen different nonces. Both are countermeasures for
the multi-instance setting of an attacker attempting to ﬁnd
3Commitments are a basic cryptographic primitive. A simple imple-
mentation computes a collision-resistant hash of the input data and a
random nonce.
root	
H(child0)	
   H(child1)	
0	
1	
H(child0)	
   H(child1)	
1	
0	
H(child0)	
   H(child1)	
…	
H(child0)	
   H(child1)	
0	
1	
kleaf||kn||iBob||l||
commit(bob,	
  PKBob)	
…	
H(child0)	
   H(child1)	
…	
Figure 1: An authentication path from Bob’s key en-
try to the root node of the Merkle preﬁx tree. Bob’s
index, iBob, has the preﬁx “000”. Dotted nodes are not
included in the proof’s authentication path.
a collision at more than one location simultaneously.4.
Uniquely encoding the location requires the attacker to
target a speciﬁc epoch and location in the tree and ensures
full t-bit security.
If the tree-wide nonce kn is re-used between epochs, a
parallel birthday attack is possible against each version of
the tree. However, choosing a new kn each epoch means
that every node in the tree will change.
3.2 Proofs of Inclusion
Since clients no longer have a direct view on the contents
of the key directory, CONIKS needs to be able to prove
that a particular index exists in the tree. This is done
by providing a proof of inclusion which consists of the
complete authentication path between the corresponding
leaf node and the root. This is a pruned tree containing the
preﬁx path to the requested index, as shown in Figure 1.
By itself, this path only reveals that an index exists in
the directory, because the commitment hides the key data
mapped to an index. To prove inclusion of the full binding,
the server provides an opening of the commitment in
addition to the authentication path.
Proofs of Absence. To prove that a given index j has no
key data mapped to it, an authentication path is provided
to the longest preﬁx match of j currently in the directory.
That node will either be a leaf node at depth (cid:31) with an
index i (cid:30)= j which matches j in the ﬁrst (cid:31) bits, or an empty
node whose index i is a preﬁx of j.
3.3 Signed Tree Roots
At each epoch, the provider signs the root of the direc-
tory tree, as well as some metadata, using their directory-
signing key SKd. Speciﬁcally, an STR consists of
STR = SignSKd (t||tprev||roott||H(STRprev)||P)
4This is inspired by Katz’ analysis [33] of hash-based signature trees
386  24th USENIX Security Symposium 
4
USENIX Association
0	
STR0	
root0	
P	
H(seed)	
STRprev	
tprev-­‐1	
tprev	
H(STRprev-­‐1)	
rootprev	
P	
…	
.	
STRt	
tprev	
t	
H(STRprev)	
roott	
P	
Figure 2: The directory’s history is published as a lin-
ear hash chain of signed tree roots.
where t is the epoch number and P is a summary of this
provider’s current security policies. P may include, for
example, the key KVUF used to generate private indices,
an expected time the next epoch will be published, as well
as the cryptographic algorithms in use, protocol version
numbers, and so forth. The previous epoch number tprev
must be included because epoch numbers need not be
sequential (only increasing). In practice, our implementa-
tion uses UNIX timestamps.
By including the hash of the previous epoch’s STR,
the STRs form a hash chain committing to the entire
history, as shown in Figure 2. This hash chain is used
to ensure that if an identity provider ever equivocates by
creating a fork in its history, the provider must maintain
these forked hash chains for the rest of time (i.e. it must
maintain fork consistency [41]). Otherwise, clients will
immediately detect the equivocation when presented with
an STR belonging to a different branch of the hash chain.
3.4 Private Index Calculation
A key design goal is to ensure that each authentication
path reveals no information about whether any other
names are present in the directory. If indices were com-
puted using any publicly computable function of the user-
name (such as a simple hash), each user’s authentication
path would reveal information about the presence of other
users with preﬁxes “close” to that user.
For example, if a user PI:EMAIL’s shortest unique
preﬁx in the tree is i and her immediate neighbor in the
tree is a non-empty node, this reveals that at least one
users exists with the same preﬁx i. An attacker could hash
a large number of potential usernames ofﬂine, searching
for a potential username whose index shares this preﬁx i.
Private Indices. To prevent such leakage, we compute
private indices using a veriﬁable unpredictable function,
which is a function that requires a private key to compute
but can then be publicly veriﬁed. VUFs are a simpler form
of a stronger cryptographic construction called veriﬁable
random functions (VRFs) [47]. In our application, we
only need to ensure that a user’s location in the tree is not
predictable and do not need pseudorandomness (although
statistical randomness helps to produce a balanced tree).
Given such a function VUF(), we generate the index i
for a user u as:
KVUF is a public key belonging to the provider, and it is
speciﬁed in the policy ﬁeld of each STR. A hash function
is used because indices are considered public and VUFs
are not guaranteed to be one-way. A full proof of inclu-
sion for user u therefore requires the value of VUF(u) in
addition to the authentication path and an opening of the
commitment to the user’s key data.
We can implement a VUF using any deterministic, ex-
istentially unforgeable signature scheme [47]. The sig-
nature scheme must be deterministic or else the identity
provider could insert multiple bindings for a user at dif-
ferent locations each with a valid authentication path. We
discuss our choice for this primitive in §5.2.
Note that we might like our VUF to be collision-
resistant to ensure that a malicious provider cannot pro-
duce two usernames u,u(cid:31) which map to the same in-
dex. However, VUFs are not guaranteed to be collision-
resistant given knowledge of the private key (and the
ability to pick this key maliciously). To prevent any po-
tential problems we commit to the username u in each
leaf node. This ensures that only one of u or u(cid:31) can be
validly included in the tree even if the provider has crafted
them to share an index.
4 CONIKS Operation
With the properties of key directories outlined in §3, CON-
IKS provides four efﬁcient protocols that together allow
end users to verify each other’s keys to communicate se-
curely: registration, lookup, monitoring and auditing. In
these protocols, providers, clients and auditors collaborate
to ensure that identity providers do not publish spurious
keys, and maintain a single linear history of STRs.
4.1 Protocols
4.1.1 Registration and Temporary Bindings
CONIKS provides a registration protocol, which clients
use to register a new name-to-key binding with an identity
provider on behalf of its user, or to update the public key
of the user’s existing binding when revoking her key. An
important deployability goal is for users to be able to
communicate immediately after enrollment. This means
users must be able to use new keys before they can be
added to the key directory. An alternate approach would
be to reduce the epoch time to a very short interval (on the
order of seconds). However, we consider this undesirable
both on the server end and in terms of client overhead.
CONIKS providers may issue temporary bindings with-
out writing any data to the Merkle preﬁx tree. A tempo-
rary binding consists of:
i = H (VUFKVUF (u))
TB = SignKd (ST Rt ,i,k)
USENIX Association  
5
24th USENIX Security Symposium  387
The binding includes the most recent signed tree root
ST Rt, the index i for the user’s binding, and the user’s
new key information k. The binding is signed by the
identity provider, creating a non-repudiable promise to
add this data to the next version of the tree.
To register a user’s key binding with a CONIKS iden-
tity provider, her client now participates in the following
protocol. First, the client generates a key pair for the user
and stores it in some secure storage on the device. Next,
the client sends a registration request to the provider to the
bind the public key to the user’s online name, and if this
name is not already taken in the provider’s namespace,
it returns a temporary binding for this key. The client
then needs to wait for the next epoch and ensure that the
provider has kept its promise of inserting Alice’s binding
into its key directory by the next epoch.
4.1.2 Key Lookups
Since CONIKS clients only regularly check directory
roots for consistency, they need to ensure that public keys
retrieved from the provider are contained in the most
recently validated directory. Thus, whenever a CONIKS
client looks up a user’s public key to contact her client, the
provider also returns a proof of inclusion showing that the
retrieved binding is consistent with a speciﬁc STR. This
way, if a malicious identity provider attempts to distribute
a spurious key for a user, it is not able to do so without
leaving evidence of the misbehavior. Any client that looks
up this user’s key and veriﬁes that the binding is included
in the presented STR will then promptly detect the attack.
In more detail, CONIKS’s lookup protocol achieves
this goal in three steps (summarized in Fig. 3). When
a user wants to send a secure message to another user,
her client ﬁrst requests the recipient’s public key at her
provider. To allow the client to check whether the recipi-
ent’s binding is included in the STR for the current epoch,
the identity provider returns the full authentication path
for the recipient’s binding in the Merkle preﬁx tree along
with the current STR. In the ﬁnal step, the client recom-
putes the root of the tree using the authentication path and
checks that this root is consistent with the presented STR.
Note that, if the recipient has not registered a binding with
the identity provider, it returns an authentication path as
a proof of absence allowing the client to verify that the
binding is indeed absent in the tree and consistent with
the current STR.
(cid:5)(cid:17)(cid:18)(cid:24)(cid:30)(cid:29)(cid:34)(cid:1)
(cid:8)(cid:27)(cid:25)(cid:33)(cid:21)(cid:17)(cid:18)(cid:27)(cid:1)
(cid:4)(cid:6)(cid:6)(cid:7)(cid:3)(cid:6)(cid:5)(cid:1)