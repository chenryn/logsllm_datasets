# 序列化
---
使用 Java 对象序列化，在保存对象时，会把其状态保存为一组字节，在未来，再将这些字节组装成对象。必须注意地是，对象序列化保存的是对象的”状态”，即它的成员变量。由此可知，对象序列化不会关注类中的静态变量。
序列化（serialize） - 序列化是将对象转换为字节流。
反序列化（deserialize） - 反序列化是将字节流转换为对象。
序列化用途
* 序列化可以将对象的字节序列持久化——保存在内存、文件、数据库中。
* 在网络上传送对象的字节序列。
* RMI(远程方法调用)
![](../../../../../assets/img/Develop/Java/笔记/格式处理/序列化/1.png)
Java 序列化和反序列化
Java 通过对象输入输出流来实现序列化和反序列化：
* `java.io.ObjectOutputStream` 类的 `writeObject()` 方法可以实现序列化；
* `java.io.ObjectInputStream` 类的 `readObject()` 方法用于实现反序列化。
序列化和反序列化示例：
```java
import java.io.*;
public class SerializeDemo01 {
    enum Sex {
        MALE,
        FEMALE
    }
    static class Person implements Serializable {
        private static final long serialVersionUID = 1L;
        private String name = null;
        private Integer age = null;
        private Sex sex;
        public Person() { }
        public Person(String name, Integer age, Sex sex) {
            this.name = name;
            this.age = age;
            this.sex = sex;
        }
        @Override
        public String toString() {
            return "Person{" + "name='" + name + '\'' + ", age=" + age + ", sex=" + sex + '}';
        }
    }
    /**
     * 序列化
     */
    private static void serialize(String filename) throws IOException {
        File f = new File(filename); // 定义保存路径
        OutputStream out = new FileOutputStream(f); // 文件输出流
        ObjectOutputStream oos = new ObjectOutputStream(out); // 对象输出流
        oos.writeObject(new Person("Jack", 30, Sex.MALE)); // 保存对象
        oos.close();
        out.close();
    }
    /**
     * 反序列化
     */
    private static void deserialize(String filename) throws IOException, ClassNotFoundException {
        File f = new File(filename); // 定义保存路径
        InputStream in = new FileInputStream(f); // 文件输入流
        ObjectInputStream ois = new ObjectInputStream(in); // 对象输入流
        Object obj = ois.readObject(); // 读取对象
        ois.close();
        in.close();
        System.out.println(obj);
    }
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        final String filename = "d:/text.dat";
        serialize(filename);
        deserialize(filename);
    }
}
// Output:
// Person{name='Jack', age=30, sex=MALE}
```
---
## Serializable 接口
被序列化的类必须属于 Enum、Array 和 Serializable 类型其中的任何一种，否则将抛出 `NotSerializableException` 异常。这是因为：在序列化操作过程中会对类型进行检查，如果不满足序列化类型要求，就会抛出异常。
```java
public class UnSerializeDemo {
    static class Person { // 其他内容略 }
    // 其他内容略
}
// Output:
// Exception in thread "main" java.io.NotSerializableException:
```
### serialVersionUID
请注意 `serialVersionUID` 字段，你可以在 Java 世界的无数类中看到这个字段。
`serialVersionUID` 有什么作用，如何使用 `serialVersionUID`？
`serialVersionUID` 是 Java 为每个序列化类产生的版本标识。它可以用来保证在反序列时，发送方发送的和接受方接收的是可兼容的对象。如果接收方接收的类的 `serialVersionUID` 与发送方发送的 `serialVersionUID` 不一致，会抛出 `InvalidClassException`。
如果可序列化类没有显式声明 `serialVersionUID`，则序列化运行时将基于该类的各个方面计算该类的默认 `serialVersionUID` 值。尽管这样，还是建议在每一个序列化的类中显式指定 `serialVersionUID` 的值。因为不同的 jdk 编译很可能会生成不同的 `serialVersionUID` 默认值，从而导致在反序列化时抛出 `InvalidClassExceptions` 异常。
`serialVersionUID` 字段必须是 `static final long` 类型。
举个例子,有一个可序列化类 Person
```java
public class Person implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private Integer age;
    private String address;
    // 构造方法、get、set 方法略
}
```
开发过程中，对 Person 做了修改，增加了一个字段 email，如下：
```java
public class Person implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private Integer age;
    private String address;
    private String email;
    // 构造方法、get、set 方法略
}
```
由于这个类和老版本不兼容，我们需要修改版本号：
```java
private static final long serialVersionUID = 2L;
```
再次进行反序列化，则会抛出 `InvalidClassException` 异常。
综上所述，我们大概可以清楚：`serialVersionUID` 用于控制序列化版本是否兼容。若我们认为修改的可序列化类是向后兼容的，则不修改 `serialVersionUID`。
### 默认序列化机制
如果仅仅只是让某个类实现 `Serializable` 接口，而没有其它任何处理的话，那么就会使用默认序列化机制。
使用默认机制，在序列化对象时，不仅会序列化当前对象本身，还会对其父类的字段以及该对象引用的其它对象也进行序列化。同样地，这些其它对象引用的另外对象也将被序列化，以此类推。所以，如果一个对象包含的成员变量是容器类对象，而这些容器所含有的元素也是容器类对象，那么这个序列化的过程就会较复杂，开销也较大。
### transient
在现实应用中，有些时候不能使用默认序列化机制。比如，希望在序列化过程中忽略掉敏感数据，或者简化序列化过程。下面将介绍若干影响序列化的方法。
当某个字段被声明为 `transient` 后，默认序列化机制就会忽略该字段的内容,该字段的内容在序列化后无法获得访问。
我们将 SerializeDemo01 示例中的内部类 Person 的 age 字段声明为 `transient`，如下所示：
```java
public class SerializeDemo02 {
    static class Person implements Serializable {
        transient private Integer age = null;
        // 其他内容略
    }
    // 其他内容略
}
// Output:
// name: Jack, age: null, sex: MALE
```
从输出结果可以看出，age 字段没有被序列化。
---
## Externalizable 接口
无论是使用 `transient` 关键字，还是使用 `writeObject()` 和 `readObject()` 方法，其实都是基于 `Serializable` 接口的序列化。
JDK 中提供了另一个序列化接口 -- `Externalizable`。
可序列化类实现 `Externalizable` 接口之后，基于 `Serializable` 接口的默认序列化机制就会失效。
我们来基于 SerializeDemo02 再次做一些改动，代码如下：
```java
public class ExternalizeDemo01 {
    static class Person implements Externalizable {
        transient private Integer age = null;
        // 其他内容略
        private void writeObject(ObjectOutputStream out) throws IOException {
            out.defaultWriteObject();
            out.writeInt(age);
        }
        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            in.defaultReadObject();
            age = in.readInt();
        }
        @Override
        public void writeExternal(ObjectOutput out) throws IOException { }
        @Override
        public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { }
    }
     // 其他内容略
}
// Output:
// call Person()
// name: null, age: null, sex: null
```