# 2017年度安全报告––应用漏洞
##### 译文声明
本文是翻译文章
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 摘要
应用程序作为计算机服务的直接提供者，其存在是必不可缺的。除了传统的CS应用之外还出现了各种的web应用，相应的还有提供web服务的各类web容器。应用是广泛的存在于我们的日常生活中的，如若其中出现了安全问题，将可能直接影响业务的正常运作。本文是360CERT对2017年应用安全的总结。
## 漏洞情况
将2017年所有披露的漏洞进行数据分析，统计出漏洞数top50的产品。其中系统类20个产品，应用类30个产品。可以看到漏洞最多的是Android，Linux
Kernel，Iphone OS，分别841，435，387枚漏洞。
筛选出应用类产品漏洞top10，大多来自Adobe，Microsoft，Apple和Google的产品。排在首位的是ImageMagick，他是一个免费的创建、编辑、合成图片的软件。查阅具体漏洞发现，其大多数都是文件解析及编辑器方面的问题，这种漏洞可以在短期内fuzz出来。不知为何2017年漏洞剧增，难道因为破窗效应？
像ImageMagick，2017年漏洞多达357枚，但是大部分是本地DOS和溢出，危害低且利用难度大。这也反映了整体现象：漏洞多，但是价值高的可利用漏洞太少。那么，接下来对2017年披露的有价值应用漏洞进行梳理：
### Struts2 S2-045/S2-046漏洞
2017年3月6日，Struts2发布了关于S2-045的漏洞公告，提及到可以通过构造好的Content-Type值来实现远程代码执行攻击，影响的版本为Struts2 2.3.5 – Struts2 2.3.31，Struts2 2.5 – Struts2
2.5.10。由于在默认的情况下便可触发漏洞，并且有人发出了可以实现命令执行的Payload导致该漏洞的影响不仅广而且利用成本低，从一些SRC平台上对该漏洞的提交情况也可以看出这一点。随后在20日出来的S2-046是在S2-045的基础上还存在其它的触发点。由于该漏洞造成的影响非常广，在这里进行回顾。
#### Struts2 及漏洞相关背景
Apache Struts2是一个用于开发Java EE网络应用程序的开放源代码网页应用程序架构。它利用并延伸了 Java Servlet
API，鼓励开发者采用MVC架构。缘起于Apache Struts的 WebWork框架，旨在提供相对于 Struts
框架的增强和改进，同时保留与Struts框架类似的结构。2005 年 12 月，WebWork宣布WebWork 2.2以Apache
Struts2的名义合并至 Struts。
由于Struts2中的OGNL引擎功能比较强大，可通过其来访问Java对象的成员变量或方法，如果输入点可控便会造成安全问题。尽管Struts2也有安全管理器来避免通过OGNL来执行命令等一些危险的操作，但是该安全管理器也是一次又一次的被绕过。
#### 漏洞细节
借助JavaAgent来查看漏洞利用过程的调用栈
可以看到大体的流程为:
    FileUploadInterceptor.intercept() --> LocalizedTextUtil.findText() --> LocalizedTextUtil.getDefaultMessage() --> TextParseUtil.translateVariables() --> OgnlTextParser.evaluate()
使用JavaAgent来查看调用栈的好处在于只有payload和漏洞环境的情况下就可以大致知道漏洞的利用过程，方便接下来做动态分析。下面再使用动态分析的方式来跟一下漏洞利用的整个过程，struts2会在StrutsPrepareFilter过滤器中将HttpServletRequest请求封装成StrutsRequestWrapper或是MultiPartRequestWrapper。而这个漏洞就是发生在对MultiPart请求的处理上，在StrutsPrepareFilter类中的doFilter方法中下断点即可。对于这里Get或是Post请求都是一样的
往下跟会进入wrapRequest方法
在这个方法中可以看到它是通过请求头中Content-Type的值中是否包含“multipart/form-data”来决定该请求是否为MultiPart请求，这也是为什么payload在Content-Type中需要包含“multipart/form-data”的原因，同时也说明了在利用的时候并不需要去构造一个上传文件的包了，只需要在请求中修改Content-Type的值包含“multipart/form-data”就行。接着通过getMultiPartRequest方法来获取MultiPart请求的处理类。
可以看到该方法从容器中获取了名字为multipartHandlerName的值的一个实例来作为处理器。而multipartHandlerName的值来自于配置中的struts.multipart.parser的值，该值默认为”jakarta“，也就是说最终获取到的是一个JakartaMultiPartRequest类的实例，而问题就是出现在该类中，这也解释了为啥这个漏洞能影响这么大，因为在默认的情况下就可以被利用。
继续往下跟的时候会进入JakartaMultiPartRequest类中的parseRequest方法，再跟入FileItemIteratorImpl类中的构造方法。
可以看到这里有一个对ContentType的值得判断，要不是以“multipart/”开头的话便会抛出一个InvalidContentTypeException的异常，跟下去看它对这里的异常信息是如何处理的，因为这个异常信息里是包含着Content-Type的值的，也就是说里面包含着payload中构造好的OGNL表达式。再往下跟直到OGNL表达式执行就是一开始通过JavaAgent看到的调用栈中的过程了，看一下translateVariables方法：
会通过以$或是%字符开头来提取出真正的表达式，所以在payload中使用${}来写一样是可以的。
S2-046是在S2-045的基础上的，触发流程一样，触发点不一样了。在Streams类中的checkFileName方法会对文件名进行检查，若是包含空字节的话会抛出InvalidFileNameException异常。
其中异常信息含有完整的文件名，这里的异常信息也经过了和S2-045一样的处理，也就是说文件名中的OGNL表达式也会被执行。针对该漏洞的利用只需要在模拟文件上传时在Content-Disposition的filename中加入空字节，并将OGNL表达式写到filename就好S2-046还有一个触发方式是Content-Length长度超过 2M，但是这种触发需要配置struts.multipart.parser为jakarta-stream才行。
#### 总结
Struts2的安全问题层出不穷，它的漏洞往往影响比较大，同时漏洞点也经常会别人吐槽。若不是业务必要应该使用安全性更好的框架来替代它。同时也可以由此去考虑一些别的框架在使用语言表达式的时候是否会存在一些类似的安全性问题。
### Struts2 S2-052漏洞
2017年9月5日，Apache Struts发布最新安全公告，Apache
Struts2的REST插件存在远程代码执行的高危漏洞，该漏洞由lgtm.com的安全研究员汇报，漏洞编号为CVE-2017-9805（S2-052）。Struts2
REST插件的XStream组件存在反序列化漏洞，使用XStream组件对XML格式的数据包进行反序列化操作时，未对数据内容进行有效验证，存在安全隐患，可被远程攻击。
#### 漏洞相关背景
Xstream是一个Java类库，用来将对象序列化成XML或者通过XML反序列化为对象。Struts2启用了rest-plugin后接收到XML格式数据时会使用XStreamHandler来处理，也就是通过XML反序列化为对象。若XML为利用Gadget构造好的恶意数据，在反序列化的过程中可以导致远程代码执行。
#### 漏洞细节
文件/org/apache/struts2/rest/ContentTypeInterceptor.java
在struts2 rest-plugin 中的处理逻辑里接受到对应格式的消息时，会调用已经注册的对应handler的
handler.toObject方法对其进行实例化，在这里传入的xml消息，所以就会跳转到已经定义的XStreamHandler的toObject方法
在经过此处的fromXML方法后导致实例化的恶意对象被执行，导致恶意代码执行
随即看到计算器被成功弹出
#### 总结
这个漏洞应该是s2的官方插件中首次受到xml序列化的影响，而反观之前早已有许多的php反序列化和python反序列化以及java自身的反序列化的问题存在，而过去的这些漏洞应该早已为我们敲响了序列化这个行为的警钟，对数据进行序列化，势必需要完整且严密的校验，而这个插件中对传入数据直接进行操作的，明显开发者没有对这块数据的安全性和合法性产生过重视行为，我们建议开发者子在开发的时候要基于一切用户输入都是不可信的原则进行过滤和相应的校验，这样才能有效的避免一些明显的安全问题。
### DotNetNuke CVE-2017-9822 漏洞
2017年7月份的BlackHat上Alvaro Muñoz (@pwntester)和Oleksandr
Mirosh的议题中讲述了在.net中使用JSON来进行序列化和反序列存在的一些安全问题，同时也提及到了另外的一种格式XML，用到了DotNetNuke中的一处反序列漏洞来做例子。通过对该漏洞的分析来了解针对XML格式反序列化在.net中的利用方式。
#### 漏洞相关背景
XmlSerializer是.net中用于在对象和XML文档之间进行序列化和反序列化操作的类，其功能和Java中的Xstream是一样的，但是由于语言的特性不一样，它们对序列化和反序列化的实现方式也是不一样的。所以即使是同样的对XML数据反序列化利用，它们的自动触发和利用方式是不一样的。
#### 漏洞细节
PersonalizationController.cs 66-72行：
从Cookie中获取到DNNPersonalization的值后再传给Globals中的DeserializeHashTableXml方法。
Globals.cs 3687-3690行：
再跟进XmlUtils中的DeSerializeHashtable方法。
XmlUtils.cs 184-218行：
这个方法会使用item元素中的type属性值来设置类型，并且会在208行这里将该元素的内容进行反序列化，这里便是漏洞的触发点了。漏洞代码中从可控输入点到最终可利用处的这个过程还是比较直观的，接下来是针对像这样使用了XmlSerializer来反序列化的漏洞点进行攻击利用分析。
#### 利用分析
XmlSerializer在对一个类进行序列化或者反序列化的时候都需要传入该类的类型信息。
先修改下上面的TestClass类，对其中的成员变量test进行封装。
这时候再去观察代码在反序列化时的输出，可以明显知道setter被自动调用了，因此setter便可以作为利用链的第一步。接下来就是要去找一些可以被用作攻击使用的类了。
System.Windows.Data.ObjectDataProvider可以调用任意在运行时被引用的类的任意方法。一个例子：
相当于调用了TestClass.FuncExample(“JustATest!”)，ObjectDataProvider中的成员变量都进行了封装的，并且每次调用了setter后都会检测参数是否足够，足够了的话便会自动去调用传入的方法。其中的过程借用BlackHat议题中的一张图来展示。
如此一来要是被序列化的是一个ObjectDataProvider类，那么在反序列的时候便可以做到任意方法调用的效果。再找一个存在能达到想要的利用效果的方法的类就行了，例如DNN中的就存在一个可以做到任意文件上传效果的类，DotNetNuke.Common.Utilities.FileSystemUtils中的PullFile方法：
#### 总结
在2015年和2016年间Java反序列化漏洞造成的影响非常广而且威力大引起了人们对该类型漏洞的重视，相对于常见的字符串和二进制的序列化数据格式，同样我们亦应该关注其它格式的序列化和反序列化会存在的安全问题，不一样的处理方式意味着可能存在不一样的利用方法。值得一提的是今年F5威胁研究人员发现该漏洞同S2-045/046一起被用到名为Zealot的攻击中去。
### IIS 6.0 WebDAV CVE-2017-7269漏洞
2017年3月27日，来自华南理工的zhiniang Peng和Chen Wu在Github
上公开了一份对开启了WebDAV服务的IIS6.0的攻击代码，漏洞编号为CVE-2017-7269。并表示在2016年7月和8月份发现该漏洞在野外利用。
#### 漏洞相关背景
虽然微软于2015年7月14日停止了对IIS6.0的更新支持，但在国内仍然有大量用户，微软在2017年6月13推出了相关Windows Server
2003补丁。在2017年4月14日 ShadowBrokers
更新的NSA黑客工具中，Explodingcan便是相关开启了WebDAV服务的Windows 2003 IIS 6.0攻击程序。
WebDAV是一种基于HTTP
1.1的通信协议。扩展了HTTP1.1，添加了新的方法，使应用程序可对WebServer直接读写，攻击关键使用的方法PROFIND，用于返回指定目录的内容。
#### 漏洞细节
漏洞点：
qmemcpy在进行拷贝处理时，没有对长度进行检查，导致溢出
漏洞触发流程：
对漏洞函数ScStoragePathFromURL打断点，并查看栈回溯。可以发现调用栈中的DAVPropFind。对Execute成员函数进行分析，调用了HrCheckStateHeaders，进而调用HrCheckIfHeader
在qmemcpy(&v35[v22], v29, 2 * v28 + 2)函数中
// v28 = v7 – v27 , v7为url长度值
// 而&v35[v22] 的地址，是在栈中，
可以看到因为对复制长度没有做限制，目标地址在ebp-450h上，在这里造成了栈溢出发生。如果想通过覆盖返回地址执行任意代码，会看到起用了栈保护机制，想要攻击成功会破坏security_cookie。
ScStoragePathFromURL的调用者ScStoragePathFromURL会使用IFITER::PszNextToken，对httpurl进行处理，连续获取<>中的值，直至跳出循环。
  1. 第一次处理http url过程中，没有直接覆盖返回地址，而是覆盖stackbuffer(stackbuffer通过VStackBuffer获取，存在栈中，所以会被覆盖)，使用地址0x680312c0（这个地址是一个堆地址）覆盖。
  2. 第二次获得，qmemcpy拷贝目的地址应该是栈地址，但是由于第一次栈溢出，覆盖了stack buffer的地址，变成了堆地址，所以不需要控制长度，溢出到堆地址了。
  3. 在这个堆地址的偏移中，存放着IEcb的vftable，通过覆盖虚表函数达到代码执行。
  4. 控制EIP后，使用了alpha shellcode和shareduserdata，做到任意代码执行