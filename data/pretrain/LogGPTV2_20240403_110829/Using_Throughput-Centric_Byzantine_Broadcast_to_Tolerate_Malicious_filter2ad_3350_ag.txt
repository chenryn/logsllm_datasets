era,” in Cryptographers’ Track at the RSA Conference, 2020.
[11] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand:
Scaling byzantine agreements for cryptocurrencies,” in SOSP, 2017.
[12] S. Haig, “Bitcoin cash could face 51% attack for $10,000 in
rented hashpower,” https://cointelegraph.com/news/bitcoin-cash-could-
face-51-attack-for-10-000-in-rented-hashpower, 2020.
[13] E. Heilman, A. Kendler, A. Zohar, and S. Goldberg, “Eclipse attacks on
bitcoin’s peer-to-peer network,” in USENIX Security Symposium, 2015.
[14] M. Hirt and P. Raykov, “Multi-valued byzantine broadcast: The t  0.9, then conditioned upon Zλ(j−1),
we must have:9
Pr[Zλ(j)] ≥ 1−
0.9(0.86−f τ ) − Pois(807, λ)
0.9(0.86−f τ ) −
λf m
λf τ
= 1 − λe−Ω(m) − λe−Ω(τ ) − e−Ω(λ)
ρ(cid:101) (cid:54)= (cid:100) j+1
ρ (cid:101) − 1. We deﬁne several random events:
Here Pois(807, λ) is deﬁned to be Pr[X > λ], where X
follows a Poisson distribution with mean 807.
Proof. All probabilities in this proof, unless otherwise men-
tioned, are conditioned upon Zλ(j − 1). We only prove the
ρ (cid:101). (In other cases,
harder case where j ≥ 2 and (cid:100) j
the second part in Zλ(j) trivially follows from the second part
in Zλ(j − 1), and hence the proof is similar but easier.) Let
i = (cid:100) j+1
• W1: The committee for slot j contains at least one honest
• W2: Among the ﬁrst τ slots of epoch i, where each
slot has a corresponding committee and broadcaster, there
exists at least one slot whose broadcaster is honest.
• W3: From time T1 through T5 in epoch i, the honest
nodes and the adversary combined ﬁnd no more than
λ PoW solutions. (This does not include PoW solutions
found by the adversary prior to T1, for example, when
the PoW challenge is not fresh.)
member.
We will later prove that:
0.9 × (0.86 − f τ )
λf m
Pr[W1] ≥ 1 −
Pr[W2] ≥ 1 −
Pr[W3] ≥ 1 − Pois(807, λ)
λf τ
0.9 × (0.86 − f τ )
(1)
(2)
(3)
0.9(0.86−f τ )−
Hence with probability at least 1−
Pois(807, λ), all three events occur. Recall that the PoW
challenge in epoch i is the concatenation of all the nonces in
0.9(0.86−f τ )−
λf m
λf τ
9We use Poisson distribution to approximate binomial distributions here.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
141276
the ﬁrst τ slots. By events Zλ(j−1), W1, W2, and Theorem 1,
we have that i) all honest nodes agree on the PoW challenge
in epoch i, and ii) the PoW challenge in epoch i is fresh in
the sense that the adversary does not see the challenge before
T1. Together with event W3, this means that no more than λ
PoW solutions are seen by honest nodes in epoch i, which we
deﬁne as event W4. Finally, Zλ(j) follows directly from W1,
W4, and Zλ(j − 1).
In the following, we analyze Pr[W1], Pr[W2], and Pr[W3].
We start with Pr[W1]. Consider any given i(cid:48) where 1 ≤ i(cid:48) ≤
i− 1, and PoW solution x seen by some honest node in epoch
i(cid:48). Let y = hash2(challenge|x), where challenge is the
PoW challenge corresponding to x. Essentially, y is a potential
beacon value for epoch i(cid:48) + 1, and may potentially further be
reused later in epoch i. If we choose the committee by using
hash1(slot number|y) as randomness, then the probability of
the committee containing no honest member is at most f m.
Next, we upper bound the probability that y is used/reused
as the beacon in epoch i. Deﬁne Z1 = Zλ(i(cid:48)ρ) and Z2 =
Zλ(j − 1). Conditioned upon Z1 only, deﬁne Ai(cid:48) to be the
random event where for every g ∈ [i(cid:48) + 1, i − 1], epoch g sat-
isﬁes at least one of the following two conditions: i) no honest
node ﬁnds any PoW solution in epoch g, or ii) if y were used
as the beacon in epoch g, then none of the τ broadcasters in the
τ candidate-holding blocks in epoch g would be honest. Note
that Ai(cid:48) is well-deﬁned, even if Z2 does not happen, and even
if the honest nodes do not agree on the PoW challenge in epoch
g: In those cases, the ﬁrst condition in Ai(cid:48) simply means that
no honest node solves the PoW, based on whatever each honest
node individually believes to be the PoW challenge. Deﬁne
p(i(cid:48)) to be the probability of Ai(cid:48) happening, conditioned upon
Z1 only. Deﬁne q(i(cid:48)) to be the probability of Ai(cid:48) happening,
conditioned upon Z2. With a Poisson approximation and since
the honest nodes on expectation ﬁnd two PoW solutions in
each epoch, we have p(i(cid:48)) ≤ (f τ + 0.14)i−i(cid:48)−1. In turn, by
Bayes’ formula and since Z2 implies Z1, we have q(i(cid:48)) =
≤
Pr[Z2] = Pr[Ai(cid:48) Z1Z2]
Pr[Ai(cid:48) Z2]
Pr[Ai(cid:48)|Z1]
. Now conditioned
Pr[Z2] =
upon Zλ(j − 1), in order for y to be used as the beacon in
epoch i, the event Ai(cid:48) must happen. Hence the probability of y
being used as the beacon in epoch i is at most (f τ +0.14)i−i(cid:48)−1
.
The probability of y being used as the beacon in epoch i
and further causing the committee for slot j to not contain any
honest member is then at most f m × (f τ +0.14)i−i(cid:48)−1
. Finally,
there are at most λ different y values in each epoch i(cid:48) ∈
[1, i − 1], and we need to take a union bound over all those.
) ≥
1 −
0.9(0.86−f τ ).
We move on to Pr[W2]. Each of the ﬁrst τ slots in
epoch i has a corresponding broadcaster. W2 essentially is
the event that at least one of these τ broadcasters is honest.
Following similar reasoning as above, we have Pr[W2] ≥
Hence we have Pr[W1] ≥ 1 −(cid:80)i−1
Pr[Zλ(j−1)] ≤ (f τ +0.14)i−i(cid:48)−1
i(cid:48)=1(λf m (f τ +0.14)i−i(cid:48)−1
≤ Pr[Ai(cid:48) Z1]
Pr[Z2] = Pr[Ai(cid:48)|Z1] Pr[Z1]
Pr[Z2]
p(i(cid:48))
Pr[Z2]
λf m
0.9
0.9
0.9
0.9
1 −(cid:80)i−1
i(cid:48)=1(λf τ (f τ +0.14)i−i(cid:48)−1
) ≥ 1 −
λf τ
0.9(0.86−f τ ).
Finally we consider Pr[W3]. Since the adversary has at most
0.9
100 times the computational power as honest nodes, and since
the honest nodes on expectation ﬁnd 2 PoW solutions from T2
to T3, one can verify that on expectation the adversary ﬁnds
no more than 805 solutions from T1 to T5. Hence Pr[W3] ≥
1 − Pois(2 + 805, λ) = 1 − Pois(807, λ).
Remark. Theorem 3 assumes that the adversary cannot adap-
tively corrupt honest nodes. If adaptive corruption is possible,
then the adversary may corrupt the committee members after
seeing the beacon and before the committee has done its work.
Assume that the adversary takes at least x epochs to adaptively
corrupt nodes. Then for a given slot in epoch i and following
a similar reasoning as in the proof of Theorem 3, the prob-
ability of the adversary adaptively corrupting the committee
) ≤
λ(f τ +0.14)x−2
0.9(0.86−f τ ) ≈ λ · 0.14x−2, which drops exponentially with
x. If needed, the constant 0.14 can be further decreased as
well, by setting the PoW easier (and increasing m, τ, and λ
accordingly).
members in that slot is at most(cid:80)i−x+1
(λ (f τ +0.14)i−i(cid:48)−1
i(cid:48)=1
0.9
APPENDIX II: THROUGHPUT ANALYSIS OF BCUBE
This section analyzes the throughput of BCUBE. The
throughput of BCUBE follows from the throughput of all
the OVERLAYBB invocations. For any given OVERLAYBB
invocation, deﬁne Y to be the maximum number of bits that
an honest node needs to send in a round, with the maximum
taken across all honest nodes, all rounds, all possible strategies
of the adversary, and all possible randomness. Intuitively, Y
is the very worst-case number of bits a node needs to send in
a round. We derive Y ﬁrst, and then derive throughput.
From the pseudo-code of Algorithm 1 through 3, one can
easily see that in each round, an honest node only sends
messages at Line 44, 54, and 67, regardless of the attack
strategy of the adversary and regardless of the randomness.
Furthermore, all these messages are always of ﬁxed size. Let
lnonce, lhash, and lsig be the size of a nonce, a hash, and an
aggregate signature in Algorithm 1, respectively. Also recall
that each message is sent to all the neighbors of the node, and
each node has at most w neighbors. Straight-forward counting
shows that the total number of bits sent by each honest node
in each round in one OVERLAYBB invocation is at most
Y = w × (2 × (lhash + lsig + m) + max((cid:100) l
s−1(cid:101) + (lhash +
1)·(cid:100)log2 s(cid:101), lnonce + (lhash + 1)·(cid:100)log2 s(cid:101) + lsig + m)), since:
• At Line 44, the total size of r and σ(r) is at most lhash +
• At Line 54, the size of xi (including the Merkle proof
lsig + m.
and the index i) is (cid:100) l
lnonce + (lhash + 1) · (cid:100)log2 s(cid:101) + lsig + m.
s−1(cid:101) + (lhash + 1) · (cid:100)log2 s(cid:101).
• At Line 67, the total size of xs and σ(xs) is at most
Under practical settings, including our experimental settings
s−1(cid:101) is usually signiﬁcantly (e.g., 10 times)
later, the term (cid:100) l
larger than the other terms, and the value s is usually not too
small (e.g., ≥ 20). In such cases, we simply have Y ≈ wl
s .
We now derive throughput. Let B be the available bandwidth
on each node. Recall that δ is the round duration, and let γ
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
151277
s
γl0
γsBδ
denote the number of pipelined invocations of OVERLAYBB
that each node has at any point of time. Let l = l0 be the
solution for the equation Y×γ = B×δ (namely, the bandwidth
needed in each round equals the bandwidth available). Each
OVERLAYBB invocation can thus conﬁrm a block of size l0
every (2dm + s)δ time. The total throughput is then T =
(2dm+s)δ . Under the approximation of Y ≈ wl
s , we have l0 ≈
wγ and T/B ≈
sBδ
(2dm+s)w . Setting s = 2dm
gives R = T/B ≈ 1
(2dm+s)δwγ /B =
w ) and T ≈ B
2w .
2w = Θ( 1
Note that the above ﬁnal throughput and TTB ratio is inde-
pendent of γ, since eventually the γ term gets cancelled out.
Hence our ﬁnal results hold regardless of whether pipelined