Table II and present in Fig. 4 the statistics of each individual
market included by our dataset. The decomposed results are
grouped by the size of each market.
Overall, the quantities of detected libraries are mostly stable
when the threshold is no less than 25, for all sizes of markets.
After threshold drops below 25, there is a sharp increase of
the numbers of positives for many markets. This phenomenon
occurs in most size groups, indicating that the sensitivity of
threshold values is unlikely to be dependent on the total counts
of analyzed apps, as long as the sample size is of a market
scale. Additionally, Fig. 4f compares the sum of numbers of
detected libraries found in each market with the total count
of positives found when processing all samples as a whole
dataset. As can be seen, LibD reported signiﬁcantly fewer li-
braries when analyzing the entire dataset, suggesting that many
TABLE III: The number of libraries reported in the whitelist but not
found in LibD’s outputs.
TABLE IV: Comparison with LibRadar. Results validated with the
ground truth (2,613 libraries).
Threshold
# of neglected libraries
Threshold
# of neglected libraries
45, 50
40
35
25, 30
16
13
8
7
20
15
10
4
1
0
# of detected
libraries
# of true positive
false positive
false negative
rate (%)
rate (%)
LibRadar
LibD
670
1,954
264
1,465
60.6
25.0
89.9
43.9
libraries are shared across different markets. This is another
indicator showing that the threshold is likely independent of
the analyzed market and may be determined with a set of
universally effective criteria.
According to the analysis above, we propose a method to
determine the threshold with the goal of minimizing false
positives. In previous work, Chen et al. [4] released a whitelist
including 72 commonly used third-party Android libraries.
We matched this list with libraries detected with different
thresholds (Table II), recording the count of missed libraries
in Table III. We found that until the threshold decreases to 10,
LibD can exhaust all libraries in the whitelist. Consequently,
our subsequent experiments used 10 as the threshold value
unless otherwise noted.
In theory, applying obfuscation to the dataset is likely to
have an impact on the determination of an optimal threshold, if
this cannot be effectively nulliﬁed by the detection technique.
Take the whitelist-based detection for example. When the
names of some library instances are turned into random
strings, they are no longer on the whitelist, shrinking the sizes
of the clusters they should have belonged to. Consequently,
some clusters may no longer be large enough to be recognized
as a library. However, simply raising the threshold does not
completely solve the problem, because it may lead to increased
false positives. In general, tuning the clustering threshold only
is not sound enough to achieve obfuscation-proof detection.
D. Comparison with Other Work
1) Comparing with LibRadar: To test
the effectiveness
of LibD, we setup an in-lab examination by comparing Li-
bRadar [8] and LibD. LibRadar is the successor of the library
identiﬁcation component of WuKong [7], a Android clone
detection tool. In the original publication introducing WuKong,
the authors reported that they detected more than 10,000 third-
party library variants among 105,299 applications crawled
from 5 different markets, using 32 as the clustering threshold.
With the same threshold, LibD detected 16,074 variants in our
dataset. Since the two datasets are different, the results are not
directly comparable. Therefore, we designed new experiments
to compare LibD with LibRadar, which is now accessible as an
online service. Different from LibD, which takes the opcode
sequences of basic blocks as the primary feature to build the
proﬁle of a library candidate, LibRadar uses a more coarse-
grained feature, i.e., the frequency of different Android API
calls. Also, LibRadar only considers the package inclusion
relation when constructing library candidates, while LibD
takes into account additional relations based on code semantics
(§III-B).
To our best knowledge, there is no systematic approach to
acquiring the ground truth about the presence of third-party
libraries in Android apps, since the boundary of a library is
essentially only known to developers. To obtain results that
are close to ground truth, manual inspection on the samples
is necessary.
For a convincing and feasible evaluation, we randomly
collected 1,000 apps from our dataset as a subset and manually
investigated the subset to get the ground truth. We identify
third-party libraries according to the following conditions.
• If the library name represents a legal domain name, then
it is considered to be a third-party library.
• If the package name is a subdomain of a legal domain
name, we will then query search engines (e.g., Google)
with the complete name and see whether the query leads
to some Android library vendor. If so, we conclude that
a new library instance is found.
Following the strategy above , we acquired 2,613 libraries
as the ground truth from the 1,000 apps. We then run LibD and
LibRadar [8] over these apps. LibRadar [8] provides an online
service to detect libraries. This enables convenient comparison
with LibD. Note that LibRadar only provides the names of the
detected libraries.
Table IV presents the performance of LibRadar and LibD.
We also validate the detected libraries according to the ground
truth. Overall, LibD identiﬁed 1,954 libraries, among which
1,456 libraries are true positives. LibRadar found 670 different
libraries in total and 264 of them are true positives. In terms of
false positive and negative rates, LibD can notably outperform
LibRadar.
2) Comparing with Li et al. [9].: To avoid confusion caused
by package and symbol name obfuscation, LibD relies on
low-level program features like type hierarchies and opcode
sequences to ﬁnd and match similar app components. This may
lead to overly restrictive similarity matching, leading to more
false negatives. We therefore compare LibD with methods
based on less ﬁne-grained features of the apps.
The research conducted by Li et al. detected 1,113 libraries
from about 1.5 million apps in Google Play [9]. Their approach
operates at the package level and relies on package names
to cluster library candidates in the ﬁrst place. To counter
the package name obfuscation problem,
they excluded all
packages with single character names from their detection. To
discriminate libraries that happen to posses the same name,
they reﬁned each cluster by comparing the prototypes of
methods in a package.
The implementation of the method developed by Li et
al. is not available. The authors provided the names of the
detected libraries which are veriﬁed through manual inspec-
tion. It is unclear what results their method would produce
given our dataset. Therefore, we cannot assess the accuracy
of the method in terms of false positive and false negative
rates, meaning a comprehensive comparison like we did for
LibRadar is not feasible. We hereby present a best-effort
comparison by inspecting the difference between their results
7
TABLE V: Library Detection for 100 F-Droid Apps
Unobfuscated Obfuscated
# of library instances
# of reported library instances
# of false positives
# of false negatives
159
152
6
13
159
154
8
13
an F-Droid app contains only 1.6 libraries, while apps in
the original dataset contains over three libraries. Nevertheless,
LibD accurately captured this difference and reported very
small proportions of false positives and false negatives when
the apps were free of obfuscation. After obfuscation,
the
number of reported false positives slightly increased, while
the number of false negatives remained the same. Overall,
the accuracy of LibD is not signiﬁcantly affected by the
obfuscation from ProGuard, showing its resilience to common
Android anti-analysis techniques.
To additionally show that our tool is proﬁcient at handling
obfuscated Android apps, we compared LibD with LibRadar,
which is also designed to be resilient
to renaming-based
obfuscation to a certain extent.
We randomly sampled 100 obfuscated apps from the orig-
inal dataset (Table I) and the performance of LibD and
LibRadar regarding this subset of apps. Among these 100
apps, LibRadar found 13 obfuscated libraries, while LibD
found 14. Both LibRadar and LibD are able to cluster the
obfuscated and obfuscated versions of the same libraries into
the same clusters. The difference between the results are due
to different features used for determining library similarity,
which is not directly related to obfuscation resilience. Our
manual investigation on the outputs of LibRadar shows ﬁve
false positive. For example, LibRadar incorrectly considers
library com/avos/avospush as an obfuscation version of
the Android ofﬁcial library android/support/v4. Note
that
the implementations of these two libraries are quite
different. On the other hand, no error is reported when we
manually correlate the obfuscated libraries detected by LibD
with their original instances. We interpret the main reason
for LibRadar’s high false positive rate is that it build library
signatures using the set of system APIs used by the code,
which is not ﬁne-grained enough to distinguish some similar
but different libraries. Overall, the results indicate that the
LibD’s resilience to renaming-based obfuscation is at least as
strong as LibRadar.
F. Processing Time
Our system is deployed on top of OpenStack, including ten
virtual machines. All the virtual machines are conﬁgured with
a Xeon E3-1230 CPU and 2GB RAM. The operating system
is Ubuntu 14.04 LTS x64.
We report that LibD takes no more than 10 seconds to ana-
lyze an app. App decompilation (§III-B), including intermedi-
ate representation recovery and package relation construction,
takes around 6 seconds. Library instance recovery (§III-C)
takes around 2 seconds. Average clustering time of one library
instance is less than 12 milliseconds, and we report on average
it takes 100 milliseconds to cluster all the library instances in
an app.
Fig. 5: Distribution of different multi-package library instances re-
garding the number of packages.
Comparing with LibRadar, we report LibD’s average pro-
cessing time for one app is around 2 seconds longer. Naturally,
as LibD undertakes much ﬁner-grained analysis, it can cost
more time. Overall, LibD is quite efﬁcient and scalable.
G. Further Investigation
In the following subsections, we study three typical chal-
lenges in Android library detections, i.e., multi-package li-
braries, obfuscated libraries, and library mutations. Note that
as we conﬁrm a library (mutation) according to the number of
instances in a cluster (§III-E), some instances—even if they
are multi-package, obfuscated or library mutations—would be
ignored if the total number of their appearances is less than the
threshold. To present a thorough study, we use all the different
instances of potential libraries, in the whole set of 1,427,395
apps, for multiple evaluations in the following subsections
(i.e., data reported in the “# of different instances” columns
in Table II).
1) Multi-Package Libraries: A third-party library may con-
tain more than one package. Beneﬁted from our novel library
boundary identiﬁcation technique, LibD discovers many multi-
package libraries. In particular, when setting the threshold as
10, we report to ﬁnd 5,141 multi-package libraries (8.4% of
all the detected libraries in total).
We also use all the different library instances for evaluation,
as they can reveal potential rare changes on the third-party
libraries. Fig. 5 presents the distribution of different multi-
package library instances. The number of library instances
decreases quickly with the increase of the packages each
instance contains. Most of the multi-package instances contain
two packages; there are 63,948 two-package instances (58.8%
of all the multi-package instances). We manually analyzed 10
frequently occurred instances (e.g., /com/tencent/wap)
and the result shows that the library boundaries are reasonable.
We also ﬁnd that multi-package library instances can have
different
library /fly/
fish/adil has three different structures; each of which con-
tains two, three and four packages, respectively. We consider
two library instances have different structures if their internal
package names or the number of packages are different. We
also report the distribution of different multi-package instances
regarding the number of structures. As shown in Fig. 6, while
there are 51,099 instances with only one structure, 67,147
instances actually contain more than two different structures
internal structures. For example,
9
TABLE VII: Top ten most commonly encountered initial segments
of package names.
Directory
/org/fmod
/twitter4j/util
/LBSAPIProtocol/a
/twitter4j/management
//com/unionpay
/twitter4j/json
/com/tencent
/roboguice/content
/com/umeng
/com/facebook
# of libraries
2,613
2,480
2,217
2,184
2,167
1,723
1,192
1,109
1,308
764
TABLE VIII: Distributions of the obfuscated library instances.
# of obfuscated
names
1,000
Total
# of instances
Percentage (%)
14,931
2,238
1,736
258
340
37
19,540
76.41
11.45
8.88
1.32
1.74
0.20
100
to get any useful information by only analyzing the name.
The second obfuscation partially changes the library names
(e.g., the last segment of the library name /com/tencent/
t is obfuscated). Libraries with such partial obfuscation can
usually provide some information of their functionalities or
developers.
As shown in Table II, by setting the threshold as 10, LibD
can detect 11,458 different libraries in total. With our manual
effort, we report that there are about 5,000 obfuscated library
instances in our dataset, among which 1,453 are completely
renamed, while the rest (around 3,500) are partially renamed.
According to our best knowledge, there is no well-developed
automatic approach to distinguishing a (partially) renamed
library from the others. In other words, our manual veriﬁcation
of library obfuscation is already the best effort.
In total, we have found that 19,540 different library in-
stances (i.e.,
library instances with different features) are
obfuscated. Table VIII presents six groups of obfuscated
instances; instances in each group have different number of
obfuscated names. In general, around 24.5% library instances
have equal or greater than 5 different obfuscated names. We
interpret that obfuscations are quite common in real-world
Android applications.
3) Library Mutations: In this section we study the library
mutations. In general, our experiment results report plenty of
libraries with more than 100 mutations. For example, /com/
google/gson has 421 different mutations, while /com/
baidu/android has 197 mutations.
TABLE IX: Libraries with the top ten number of mutations.
Rank
Library name
1
2
3
4
5
6