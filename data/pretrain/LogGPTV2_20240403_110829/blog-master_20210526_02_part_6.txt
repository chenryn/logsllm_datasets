PG 解决方案:
语法简单, 同时只需要扫描一次table, 而且结果不存在语意问题.
- agg filter
- window filter
视频回放: https://www.bilibili.com/video/BV1K3411B7p9/  
#### 49、重新发现PostgreSQL之美 - 49 热启动  
视频回放: https://www.bilibili.com/video/BV11Q4y1h7Qw/         
场景:         
- 业务正常使用期间发生HA, 或者数据库崩溃重启, 或者业务计划性重启.     
挑战:         
- 数据库重启后原来在shared buffer中的热数据将需要重磁盘读取, 在此前开放给业务访问, 可能导致原有的SQL响应变慢, 高峰期可能导致雪崩效应影响业务.     
PG 解决方案:      
- 使用pg_buffercache插件记录buffer快照    
- pg_cron 定期打buffer id快照     
- 使用pg_prewarm预热后再开放给业务访问    
- https://www.postgresql.org/docs/14/pgbuffercache.html    
- https://www.postgresql.org/docs/14/pgprewarm.html    
[《重新发现PostgreSQL之美 - 49 热启动》](../202108/20210827_02.md)   
#### 50、重新发现PostgreSQL之美 - 50 一粒老鼠屎  
视频回放: https://www.bilibili.com/video/BV1aq4y1U7Rm/          
场景:           
- 在正常业务使用期间, DBA、开发者、分析师在数据库中跑大查询, 某些大表采用了全表扫描.      
挑战:           
- 大表的全表扫描会占用buffer pool, 从而将shared buffer中的热数据挤出去, 导致其他业务的SQL变慢, 严重的导致雪崩.       
PG 解决方案:        
- [《PostgreSQL 大表扫描策略 - BAS_BULKREAD , synchronize_seqscans , ring buffer 代替 buffer pool》](../201804/20180414_02.md)      
- 超过1/4 shared buffer的table , 全表扫描会使用ring buffer (256KB)代替buffer pool    
- page 标记为BAS_BULKREAD, 优先淘汰出buffer.     
除了全表扫描, PG的bulk - write, vacuum都有类似机制:     
bulk - write 16MB ring buffer    
COPY FROM command.    
CREATE TABLE AS command.    
CREATE MATERIALIZED VIEW or REFRESH MATERIALIZED VIEW command.    
ALTER TABLE command.    
vacuum 256KB ring buffer.    
[《重新发现PostgreSQL之美 - 50 一粒老鼠屎》](../202108/20210827_03.md)    
#### 51、重新发现PostgreSQL之美 - 51 删表跑路  
视频回放: https://www.bilibili.com/video/BV11M4y137oL/           
场景:             
- drop table, drop database等危险操作无力回天.       
挑战:             
- 误删除或被黑客攻击后发生了drop table, drop database操作, 在没有备份的情况下无力回天. 在有备份的情况下, 恢复慢, 影响业务.        
PG 解决方案:          
- event trigger 增加回收站, 支持drop table快速恢复    
- drop database 通过权限控制, 或者使用HOOK增加database 回收站功能. 例如 ProcessUtility_hook      
- truncate table 使用trigger可以实现回收站功能.    
[《PostgreSQL Oracle 兼容性之 - 事件触发器实现类似Oracle的回收站功能》](../201504/20150429_01.md)      
[《PostgreSQL 回收站功能 - 基于HOOK的recycle bin pgtrashcan》](../201404/20140403_01.md)      
[《重新发现PostgreSQL之美 - 51 删表跑路》](../202108/20210827_04.md)    
#### 52、重新发现PostgreSQL之美 - 52 跨越鸿沟  
视频回放: https://www.bilibili.com/video/BV1TL4y1Y7EE/            
场景:               
- PG 每年发布一个大版本, 每个大版本社区支持FIX BUG 5-6年, 用户使用的版本可能已经不再支持, 那么需要升级大版本    
- 每个大版本在性能、安全、功能等方面都有大幅度提升, 用户希望升级到大版本    
挑战:               
- 升级大版本通常需要迁移数据, 时间漫长. 使用逻辑倒出导入耗时长, 影响业务长.    
- 使用逻辑增量复制有前置依赖: 必须9.4以上版本, 必须有主键或UK. 而且不支持DDL迁移, 序列迁移等. 配置相对来说也比较复杂, 还需要数据一致性验证等. 一般用户搞不定.        
PG 解决方案:            
- pg_upgrade 仅仅需要迁移元数据(例如表结构, 视图、序列、索引、函数的定义), 通常可以分钟左右完成. 而且配置简单.     
    - [《PostgreSQL pg_upgrade 9.3 improve and example》](../201305/20130520_01.md)      
    - 注意: [《PostgreSQL pg_upgrade will destroy all replication slots》](../202107/20210714_02.md)      
[《重新发现PostgreSQL之美 - 52 跨越鸿沟》](../202108/20210827_05.md)    
#### 53、重新发现PostgreSQL之美 - 53 共同富裕
视频回放: https://www.bilibili.com/video/BV1ZU4y1w7Xi/   
场景:    
- 国产化、二次开发、发型版、云服务、DBaaS、私有化.     
挑战:    
- 轮子  
- 门槛  
- ROI  
- 法律  
PG解决方案:     
- 开源许可: 类BSD, 可商用, 可售卖, 可开源, 可闭源, 非常自由.  
- 开放架构:  
    - [《云、商业、开源数据库终局之战 - 商业角度解读PG如何破局 - openapi 、 扩展能力、插件开源协议》](../202007/20200727_04.md)      
    - [《未来数据库方向 - 以及PostgreSQL 有价值的插件、可改进功能、开放接口 (202005)》](../202005/20200527_06.md)      
基于PG的成功产品:   
- 云厂商的RDS, 以及基于PG的高度自研产品例如阿里云存储计算分离产品PolarDB(已开源)  
- aws aurora for pg  
- tbase  
- gauss  
- 瀚高  
- greenplum  
- antdb  
- pg-xc  
- 等等  
#### 54、重新发现PostgreSQL之美 - 54 绑定变量缓存控制 
视频回放: https://www.bilibili.com/video/BV1n341147vm/   
场景:      
- 在使用绑定变量的情况下, 每次SQL调用, 可能使用缓存的plantree, 也可能重新生成执行计划. 取决于根据传入参数和plantree估算出来的cost是否大于custom plan的平均值. 大于就使用custom plan.  
    - [《执行计划选择算法 与 绑定变量 - PostgreSQL prepared statement: SPI_prepare, prepare|execute COMMAND, PL/pgsql STYLE: custom & generic plan cache》](../201212/20121224_01.md)    
挑战:      
- 可能导致执行计划错误, 性能抖动很严重. 甚至雪崩.  例如:    
- 绑定变量的优势是避免每次SQL请求时都需要评估SQL plan带来的cpu开销, 在高并发的场景, 这个非常好可以节省cpu.    
     - 在存储过程中, 一个SQL需要LOOP调用, 而且每次调用前数据都发生了重大变更, 而且这种在一个事务中的多次调用, pg_stats无法及时的反映出来, 从而机制上就无法保障它能从plan cache变到custom plan.   
     - 在OLAP类的业务场景中, SQL相对来说比较复杂, plan带来的开销占整个SQL执行时长的比例很低, 所以即使客户端使用了prepared statement(很多时候程序员并不知道他们用了prepared statement)依旧建议用custom plan来应对变化的数据, 使得每次可以得到可靠的执行计划.   
什么时候会用到绑定变量模式呢?     
一种为隐式使用, 例如PL/pgSQL函数或存储过程中.    
一种为显示使用, 例如驱动层的prepare statement.    
PG解决方案:       plan_cache_mode    
#### 55、重新发现PostgreSQL之美 - 55 代码搬运工  
视频回放: https://www.bilibili.com/video/BV1p14y1a7Xc/      
场景:     
- 业务层逻辑流程长, 与数据库交互次数多  
- 计算和渲染场景, 需要拖取大量数据到本地进行计算, 少量结果进行渲染  
- CS结构的应用, 需要将数据从集中数据库存储拖取到本地后进行计算得到少量结果. 例如气象、地震分析.   
总结起来就是2种场景:  
- 频繁交互  
- 计算要的数据量大, 结果数据集少.   
挑战:        
- 频繁的网络交互导致网络延迟在整个过程的占比变高, 处理吞吐必然降低.   
- 每次计算都要拖取大量数据, 容易触发网络带宽瓶颈, 同时拖拽耗时也很长. 变化条件又要重新拖取数据,效率低.   
PG解决方案:         
- PL接口, 可以在PG内安装编程语言, 例如java, python, C, lua, perl, julia, rust ... 支持很多语言.   
    - https://www.postgresql.org/docs/current/xplang.html
通过搬运代码而不是搬运数据的形式, 提高整体运行效率.   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")  
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").    
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")  
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")  
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")  
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")  
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")