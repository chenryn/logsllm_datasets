:
where OSign(., .) is an oracle taking as input a
message and an index i ∈ {1, . . . , N} to return
a ﬁrst level signature σ ← Sign(1, ski, m) and Q
stands for the set of messages m queried to the
signing oracle.
2. Delegatee Security: informally, this notion pro-
tects the delegatee from a colluding delegator and
proxy. Namely, the delegatee is assigned the in-
dex 0. The adversary is provided with an ora-
cle returning ﬁrst level signatures on behalf of 0.
Knowing corrupt users’ private keys, she can com-
pute re-signature keys {Rij}i∈{0,...,N},j∈{1,...,N}
on her own1 from pki and skj , with j (cid:5)= 0. Ob-
viously, she is not granted access to Ri0 for any
i (cid:5)= 0. Her probability of success
(cid:2) {(pki, ski) ← Keygen(λ)}i∈[0,N],
(L, m(cid:2), σ(cid:2)) ← AOSign (0,.)(cid:3)
Pr
Verify(L, m(cid:2), σ(cid:2), pk0) ∧ m(cid:2) (cid:5)∈ Q
pk0, {pki, ski}i∈[1,N]
(cid:5)
,
where Q is the set of messages queried to OSign(0, .),
should be negligible.
(cid:4)
:
3. Delegator Security: this notion captures that
a collusion between the delegatee and the proxy
should be harmless for the honest delegator. More
1This is true in in non-interactive schemes, which we are
focusing on. In the general case, those keys should be gen-
erated by the challenger and explicitly provided as input to
the adversary.
precisely, we consider a target delegator with in-
dex 0. The adversary is given private keys of
all other signers i ∈ {1, . . . , N} as well as all
re-signature keys including Ri0 and R0i for i ∈
{1, . . . , N}. A signing oracle OSign(0, .) also pro-
vides her with ﬁrst level signatures for 0. Yet, the
following probability should be negligible,
Pr
(cid:2) {(pki, ski) ← Keygen(λ)}i∈[0,N],
{Rij ← ReKeygen(pki, skj)}i,j∈[0,N],
(1, m(cid:2), σ(cid:2)) ← AOSign (0,.)
(cid:4)
{pki, ski}i∈[1,N],{Rij}i,j∈[0,N],
pk0,
(cid:3)
Verify(1, m(cid:2), σ(cid:2), pk0) ∧ m(cid:2) (cid:5)∈ Q
(cid:5)
,
:
meaning she has little chance of framing user 0 at
the ﬁrst level.
An important diﬀerence between external and limited proxy
security should be underlined. In the former, the attacker
is allowed to obtain signatures on the target message m(cid:2)
for signers other than i(cid:2). In the latter, the target message
cannot be queried for signature at all (knowing all proxy
keys, the attacker would trivially win the game otherwise).
Chosen-Key Model Security. As in other papers on
proxy re-cryptography [3, 4, 14], the above model assumes
that users only publicize a public key if they hold the un-
derlying private key. This actually amounts to use a trusted
key generation model or the so-called knowledge-of-secret-
key model (KOSK), introduced in [11], that demands at-
tackers to reveal the associated private key whenever they
create a public key for themselves. This model (sometimes
referred to as the registered key model) mirrors the fact that,
in a PKI, users should prove knowledge of their private key
upon certiﬁcation of their public key.
As argued by Bellare and Neven in a diﬀerent context [6],
relying on the registered key model can be quite burdensome
in real world applications if one is willing to actually imple-
ment the requirements of that model. Although some kinds
of proof of private key possession [28] are implemented by
VeriSign and other security infrastructures, they are far from
suﬃcing to satisfy assumptions that are implicitly made by
the KOSK model. To do so, CAs should implement complex
proofs of knowledge that allow for the online extraction of
adversarial secrets so as to remain secure in a concurrent
setting like the Internet, where many users may be willing
to register at the same time. Hence, whenever it is possi-
ble, one should preferably work in a model called chosen-key
model (a.k.a. plain public key model) that leaves adversaries
choose their public key as they like (possibly as a function
of honest parties’ public keys and without having to know
or reveal the underlying secret whatsoever).
If we place ourselves in the chosen-key model, the notions
of external security and limited proxy security are not al-
tered as they do not involve corrupt users. On the other
hand, we need to recast the deﬁnitions of delegatee and del-
egator security and take adversarially-generated public keys
into account. As to the delegatee security, the only modiﬁca-
tion is that the adversary is challenged on a single public key.
No other change is needed since A can generate re-signature
keys on her own. In the notion of delegator security, A is
also challenged on a single public key pk0 for which she is
granted access to a ﬁrst level signing oracle. In addition, we
introduce a delegation oracle Odlg(.) that delegates on behalf
of user 0. When queried on a public key pki supplied by the
adversary, Odlg(.) responds with Ri0 = ReKeygen(pki, sk0).
We stress that we are not claiming that the schemes of
[5] are insecure in such a model. However, their security
is not guaranteed any longer with currently known security
proofs. In section 6, we will explain how to simply modify
the single-hop versions of our schemes so as to prove them
secure without making the KOSK assumption.
3. BILINEAR MAPS AND COMPLEXITY
ASSUMPTIONS
Bilinear groups. Groups (G, GT ) of prime order p are
called bilinear map groups if there is an eﬃciently com-
putable mapping e : G × G → GT with these properties:
1. bilinearity: e(ga, hb) = e(g, h)ab for any (g, h) ∈ G× G
2. non-degeneracy: e(g, h) (cid:5)= 1GT whenever g, h (cid:5)= 1G.
and a, b ∈ Z;
Flexible Diffie-Hellman problems. Our signatures rely
on new generalizations of the Computational Diﬃe-Hellman
(CDH) problem which is to compute gab given (ga, gb) in
a group G = (cid:7)g(cid:8). To motivate them, let us ﬁrst recall the
deﬁnition of the 2-out-of-3 Diﬃe-Hellman problem [23].
Definition 2. In a prime order group G, the 2-out-of-
3 Diﬃe-Hellman problem (2-3-CDH) is, given (g, ga, gb),
to ﬁnd a pair (C, C ab) ∈ G × G with C (cid:5)= 1G.
We introduce a potentially harder version of this problem
that we call 1-Flexible Diﬃe-Hellman problem:
Definition 3. The 1-Flexible Diﬃe-Hellman problem
3, to ﬁnd a
(1-FlexDH) is, given (g, A = ga, B = gb) ∈ G
triple (C, C a, C ab) ∈ (G\{1G})3.
We shall rely on a relaxed variant of this problem where
more ﬂexibility is permitted in the choice of the base C for
the Diﬃe-Hellman computation.
Definition 4. The (cid:2)-Flexible Diﬃe-Hellman problem
3, to ﬁnd a
((cid:2)-FlexDH) is, given (g, A = ga, B = gb) ∈ G
(2(cid:2) + 1)-uple
(C1, . . . , C(cid:3), Da
1 , . . . , Da
(cid:3) , Dab
(cid:3) ) ∈ G
2(cid:3)+1
where logg(Dj ) =
j
i=1 logg(Ci) (cid:5)= 0 for j ∈ {1, . . . (cid:2)}.
(cid:6)
A given instance has many publicly veriﬁable solutions: a
(cid:2)
(cid:2)
(cid:3), T ) is accept-
1, . . . , D
candidate 2(cid:2) + 1-tuple (C1, . . . , C(cid:3), D
(cid:2)
j−1, Cj ) for j =
able if e(C1, A) = e(D
(cid:2)
2, . . . , (cid:2) and e(D
(cid:3), B) = e(T, g). The (cid:2)-FlexDH assumption
is thus falsiﬁable according to Naor’s classiﬁcation [27].
(cid:2)
j , g) = e(D
(cid:2)
1, g), e(D
In generic groups, the general intractability result given
by theorem 1 of [23] by Kunz-Jacques and Pointcheval im-
plies the generic hardness of (cid:2)-FlexDH. Section 8 gives an
adaptation of this result in generic bilinear groups.
Remark. The knowledge-of-exponent assumption (KEA1)
[7] was introduced by Damg˚ard [16]. Roughly speaking, it
captures the intuition that any algorithm A which, given
elements (g, gx) ∈ G
2 must
“know” logg(h). Hence, it must be feasible to recover the
latter value using A’s random coins.
In [8], Bellare and
2, computes a pair (h, hx) ∈ G
Palacio deﬁned a slightly stronger variant (dubbed DHK1
as a shorthand for “Diﬃe-Hellman knowledge”) of this as-
sumption. DHK1 essentially says that, given a pair (g, gx),
for any adversary A that outputs pairs (hi, hx
i ), there ex-
ists an extractor that can always recover logg(hi) using A’s
random coins. The latter is allowed to query the extrac-
tor on polynomially-many pairs (hi, hx
i ). For each query,
A ﬁrst obtains logg(hi) from the extractor before issuing
the next query. Under DHK1, the intractability of the (cid:2)-
Flexible Diﬃe-Hellman problem is easily seen to boil down
to the Diﬃe-Hellman assumption. Given a pair (g, ga), a
polynomial adversary that outputs (C1, Da
1 ) nec-
essarily “knows” t1 = logg C1 and thus also (C2, C a
2 ) =
2 )1/t1 ) as well as t2 = logg C2, which in turn suc-
(C2, (Da
cessively yields logarithms of C3, . . . , C(cid:3). Although DHK1-
like assumptions are inherently non-falsiﬁable, they hold in
generic groups [17, 1] and our results can be seen as resting
on the combination CDH+DHK1.
1 ) = (C1, C a
Modified Diffie-Hellman problem. The second assump-
tion that we need is that the CDH problem (ga, gb) remains
hard even when g(a
2) is available.
Definition 5. The modiﬁed Computational Diﬃe-
2), gb) ∈ G
4,
Hellman problem (mCDH) is, given (g, ga, g(a
to compute gab ∈ G.
In fact, we use an equivalent formulation of the problem
which is to ﬁnd hxy given (h, hx, h1/x, hy) (where we set
g = h1/x, x = a, y = b/a).
4. A MULTI-HOP SCHEME IN THE RAN-
DOM ORACLE MODEL
To provide a better intuition of the underlying idea of our
scheme, we ﬁrst describe its single-hop version before ex-
tending it into a multi-hop system.
Our approach slightly diﬀers from the one in [5] where
signers have a “strong” secret and a “weak” secret that are
respectively used to produce ﬁrst and second level signa-
tures.
In our scheme, users have a single secret but ﬁrst
and second level signatures retain diﬀerent shapes. Another
diﬀerence is that our re-signature algorithm is probabilistic.
We exploit the idea that, given gb ∈ G = (cid:7)g(cid:8) for some b ∈
Z, one can hardly generate a Diﬃe-Hellman triple (ga, gb, gab)
without knowing the corresponding exponent a [16]. A valid
BLS signature [13] (σ = H(m)x, X = gx) can be blinded
(cid:2)
2) = (σt, X t) using a random exponent t. An ex-
into (σ
(cid:2)
tra element gt then serves as evidence that (σ
2) actually
hides a valid pair. This technique can be iterated several
times by adding two group elements at each step. To trans-
late signatures from signer i to signer j, the key idea is to
have the proxy perform an appropriate change of variable
involving the translation key during the blinding.
(cid:2)
1, σ
(cid:2)
1, σ
The scheme is obviously not strongly unforgeable in the
sense of [2] (since all but ﬁrst level signatures can be publicly
re-randomized) but this “malleability” of signatures is not
a weakness whatsoever. It even turns out to be a desirable
feature allowing for the unlinkability of translated signatures
w.r.t. original ones.
4.1 The Single Hop Version
In this scheme, signers’ public keys consist of a single
group element X = gx ∈ G. Their well-formedness is thus
eﬃciently veriﬁable by the certiﬁcation authority that just
has to check their membership in G. This already improves
[5] where public keys (X1, X2) = (gx, h1/x) ∈ G
2 (g and
h being common parameters) must be validated by testing
whether e(X1, X2) = e(g, h).
Global-setup(λ): this algorithm chooses bilinear map groups
(G, GT ) of prime order p > 2λ. A generator g ∈ G
and a hash function H : {0, 1}∗ → G (modeled as a
random oracle in the security proof) are also chosen.
Public parameters only consist of cp := {G, GT , g, H}.
Keygen(λ): user i’s public key is set as Xi = gxi for a ran-
dom xi
R← Z
∗
p.
ReKeygen(xj , Xi): this algorithm outputs the re-signature
= gxi/xj which allows turning signa-
1/xj
key Rij = X
i
tures from i into signatures from j.
H(m)xi ∈ G.
Sign(1, xi, m): to sign m ∈ {0, 1}∗
Sign(2, xi, m): to sign m ∈ {0, 1}∗
at level 1, compute σ(1) =
at level 2, choose t R← Z
∗
p
and compute
(2)
σ
i , gt).
= (σ0, σ1, σ2) = (H(m)xit, X t
(1)
Re-Sign(1, m, σ(1), Rij , Xi, Xj ): on input of m ∈ {0, 1}∗
,
the re-signature key Rij = gxi/xj , a signature σ(1) ∈ G
and public keys Xi, Xj , check the validity of σ(1) w.r.t
signer i by testing e(σ(1), g) = e(H(m), Xi). If valid,
σ(1) is turned into a signature on behalf of j by choos-
ing t R← Z
∗
p and computing
(2)
σ
= (σ
(cid:2)
0, σ
(cid:2)
1, σ
(cid:2)
2) = (σ
(1)t
, X t
i , Rt
= (H(m)xit, X t
ij )
i , gtxi/xj )
If we set ˜t = txi/xj , we have
(2)
σ
= (σ
(cid:2)
0, σ
(cid:2)
1, σ
(cid:2)
2) = (H(m)xj