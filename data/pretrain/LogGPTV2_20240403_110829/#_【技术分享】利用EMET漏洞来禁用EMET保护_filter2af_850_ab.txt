### 优化后的文本

#### 汇编代码示例
```assembly
ADD ECX, EDX
ADD EAX, ECX
RETN // EAX = EMET_BASE_ADDRESS + DllMain
CALL EAX // CALL DllMain(GetModuleHandleA("EMET.dll"), DLL_PROCESS_DETACH, NULL)
0x42424242 // hinstDLL = GetModuleHandleA("EMET.dll") (TO BE PATCHED)
0x00000000 // fdwReason = DLL_PROCESS_DETACH
0x00000000 // lpvReserved = 0x00000000
```

#### 早期的EMET绕过技术
先前绕过EMET保护的方法主要依赖于设计或代码实现中的缺陷。EMET之所以可能被绕过，是因为某些模块或API在设计时未得到充分考虑，并且这些模块和API存在安全漏洞。以下是一些具体的绕过技术：

1. **LoadLibrary API绕过**：
   - EMET 4.1会监控`LoadLibrary` API调用，如果通过`ret`或`jmp`指令调用，则会引发异常。
   - Jared DeMott发现，通过`call`指令调用`LoadLibrary`可以绕过这种保护。

2. **UNC路径加载绕过**：
   - EMET会阻止通过UNC路径（如`\evil\bad.dll`）加载DLL文件。
   - Aaron Portnoy展示了如何使用`MoveFile` API下载DLL文件，然后通过`LoadLibrary`加载，从而绕过EMET的保护。

3. **调用者保护绕过**：
   - EMET 4.1检查关键API函数是否通过`call`、`ret`或`jmp`指令调用，以防止ROP攻击。
   - DeMott展示了通过合法的`call`指令调用关键API函数（如`VirtualAlloc`）来绕过这种保护。

4. **Kernelbase.dll绕过**：
   - EMET 3.5仅Hook了`kernel32.dll`和`ntdll.dll`中的导出函数，而忽略了`kernelbase.dll`。
   - Shahriyar Jalayeri利用这一点执行了`kernelbase.dll`中的`VirtualProtect` API，使内存变得可写和可执行。

5. **_KUSER_SHARED_DATA结构绕过**：
   - Jalayeri还利用位于固定地址`0x7ffe0000`的_KUSER_SHARED_DATA结构，该结构中包含指向`KiFastSystemCall`的指针。
   - 通过这种方式，他能够通过修改EAX寄存器中的值来调用任何系统调用（例如，`ZwProtectVirtualMemory`是`0x0D7`）。

6. **EAF保护绕过**：
   - EAF保护使用调试寄存器在访问指定模块（如`kernel32.dll`、`ntdll.dll`和`kernelbase.dll`）中的导出函数时设置断点。
   - 可以通过访问导入表的shellcode绕过这些断点保护，因为此保护仅覆盖导出表。

#### EMET禁用技术
与绕过技术不同，禁用EMET会完全关闭其所有保护。以下是几种禁用EMET的方法：

1. **清除硬件断点**：
   - Piotr Bania使用未公开的Windows API `NtSetContextThread` 和 `NtContinue` 来清除硬件断点（即清零调试寄存器），从而禁用EAF保护。
   - 由于`NtSetContextThread`已被EMET钩住，因此需要先禁用其他EMET保护。

2. **全局变量绕过**：
   - Offensive Security发现大多数EMET 4.1保护会检查`emet.dll`模块中偏移为`0x0007E220`的全局变量值。
   - 如果该变量的值为零，则保护主体继续运行但不会干涉攻击者执行代码。这个全局变量是一个用于打开/关闭EMET保护的开关，并且处于可写数据段中，攻击者可以通过创建ROP gadgets轻松地清零该变量。

3. **EMET 5.0及以后版本的禁用方法**：
   - 在EMET 5.0中，微软将全局变量放在一个大型堆结构体（`CONFIG_STRUCT`）上，大小为`0x560`字节。
   - 该结构体的指针位于固定偏移`0x0AA84C`处，并使用`EncodePointer`和`DecodePointer`函数进行编码和解码。
   - 清零`CONFIG_STRUCT + 0x558`将关闭大多数EMET保护。此外，要关闭EAF和EAF+，可以使用存储在`CONFIG_STRUCT + 0x518`处的未钩指针指向`NtSetContextThread`。

4. **EMET 5.1的禁用方法**：
   - 在EMET 5.1中，全局变量保存在一个名为`EMETd`的结构中，该结构存储在偏移`0xF2A30`处。
   - `EMETd`结构具有指向`CONFIG_STRUCT`结构的指针字段，该指针字段进一步编码。
   - 攻击者可以通过修改`CONFIG_STRUCT + 0x558`处的全局开关来禁用EMET保护，并使用`ntdll!NtProtectVirtualMemory`指针将内存页标记为可写。

#### 结论
这种新技术利用EMET本身来卸载其保护，比以前发布的任何EMET禁用或绕过技术更加可靠且易于实现。整个技术适用于简单的ROP链，只需要通过调用`GetModuleHandleA`泄漏一个DLL的基地址（如`mozcrt19.dll`）。由于`emet.dll`的`DllMain`函数被导出，因此该技术不需要针对特定版本的硬编码，并且适用于所有测试版本的EMET（4.1, 5.1, 5.2, 5.2.0.1）。

通过EMET来禁用EMET的代码提供了一个重要的新的攻击向量。找到`DllMain`并调用它关闭所有的EMET保护显然比绕过每个EMET保护更加容易。

#### 特别感谢
- Michael Sikorski
- Dan Caselden
- Corbin Souffrant
- Genwei Jiang
- Matthew Graeber

#### 附录
#### EMET保护概述
近年来，EMET经历了逐步的发展。以下是各个版本的主要功能：

- **EMET 1.x (2009年10月27日发布)**
  - SEHOP：防止结构化异常处理SEH被覆盖和篡改。
  - DEP：强制的DEP，使得栈和堆等数据段不再有执行权限。
  - 空页面保护：预分配空页面，防止攻击者对空页面进行利用。
  - 堆喷射保护：防止进行堆喷射（实际上是预先分配常用的堆喷射内存区域）。

- **EMET 2.x (2010年9月2日发布)**
  - 强制ASLR：强制执行ASLR，即使是不支持ASLR的老旧DLL模块也会被强制启用ASLR。
  - 导出表访问过滤：防止遍历模块的导出函数，以解析如`kernel32.dll`、`ntdll.dll`和`kernelbase.dll`等模块导出的重要函数。

- **EMET 3.x (2012年5月25日发布)**
  - ROPGuard：使用ROPGuard来阻止ROP。
  - 加载库检查：阻止通过通用命名约定（UNC）路径加载DLL文件。
  - ROP缓解措施 – 内存保护检查：保护关键Windows API（如`VirtualProtect`），这些API可能被用于将堆栈标记为可执行。
  - ROP缓解措施 – 调用者检查：防止使用跳转或返回指令调用关键Windows API。
  - ROP缓解措施 – 堆栈翻转：检测堆栈是否已被翻转。
  - ROP缓解措施 – 模拟执行流程：通过操纵和跟踪堆栈寄存器，在调用关键Windows API后检测ROP Gadgets。
  - 自底向上的ASLR：将随机化8位的熵添加到自底向上分配（包括堆、堆栈和其他内存分配）的基址。

- **EMET 4.x (2013年4月18日发布)**
  - 深度Hook：启用此功能后，EMET不仅挂钩上层的API函数，还会挂钩那些上层API调用的底层函数。
  - 反绕道：防止攻击者制作返回到绕行跳转指令之后的指令的ROP。
  - 禁止重要函数调用：默认情况下，不允许调用`ntdll!LdrHotpatchRoutine`以防止DEP/ASLR被绕过。
  - 证书信任（可配置证书锁定）：在证书链信任验证过程中提供更多检查和验证，默认支持Internet Explorer。

- **EMET 5.x (2014年7月31日发布)**
  - 攻击面减少（ASR）：允许配置在某些应用程序中阻止加载模块的列表。
  - EAF+：与EAF类似，提供了额外的功能来保护`kernel32.dll`、`ntdll.dll`和`kernelbase.dll`的导出表。还检测MZ/PE读取以及堆栈指针是否指向堆栈边界之外的某处或者是否与堆栈指针之间不匹配。

#### 参考链接
- [1] “Inside EMET 4.0” by Elias Bachaalany
- [2] “Bypassing EMET 4.1” by Jared DeMott
- [3] “Bypassing All of The Things” by Aaron Portnoy
- [4] "Bypassing EMET 3.5's ROP Mitigations" by Shahriyar Jalayeri
- [5] "Bypassing EMET Export Address Table Access Filtering feature" by Piotr Bania
- [6] "Disarming Enhanced Mitigation Experience Toolkit (EMET)" by Offensive-Security
- [7] "Disarming EMET v5.0" by Offensive-Security
- [8] "Disarming and Bypassing EMET 5.1" by Offensive-Security