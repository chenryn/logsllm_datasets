Auditing 6LoWPAN Networks 
Using Standard Penetration Testing Tools
Adam Reziouk 
Airbus Defence and Space 
PI:EMAIL 
Arnaud Lebrun 
Airbus Defence and Space 
PI:EMAIL 
Jonathan-Christofer Demay 
Airbus Defence and Space 
PI:EMAIL 
ABSTRACT 
The Internet of Things is expected to be involved in the near future in all major aspects of our modern society. On that front, we argue that 
6LoWPAN is a protocol that will be a dominant player as it is the only IoT-capable protocol that brings a full IP stack to the smallest 
devices. As evidence of this, we can highlight the fact that even the latest ZigBee Smart Energy standard is based on ZigBee IP which itself 
relies on 6LoWPAN, a competitor of the initial ZigBee protocol. Efficient IP-based penetration testing tools have been available to security 
auditors for years now. However, it is not that easy to use them in the context of a 6LoWPAN network since you need to be able to join it 
first. In fact, the difficult part is to associate with the underlying IEEE 802.15.4 infrastructure. 
Indeed, this standard already has two iterations since its release in 2003 and it provides with several possibilities regarding network 
topology, data transfer model and security suite. Unfortunately, there is no off-the-shelf component that provides, out of the box, with such 
a wide range of capabilities. Worst still, some of them deviate from the standard and can only communicate with components from the 
same manufacturer. In this paper, we present the ARSEN project: Advanced Routing for 6LoWPAN and Ethernet Networks. It provides 
security auditors with two new tools. First, a radio scanner that is capable of identifying IEEE 802.15.4 networks and their specificities, 
including several deviations from the standard that we encountered in actual security audits. Secondly, a border router capable of routing 
IPv6 frames between Ethernet and 6LoWPAN networks while adapting to the specificities identified by the scanner. The combination of 
both effectively allows security auditors to use available IP-based penetration testing tools on different 6LoWPAN networks. 
CCS Concepts 
• Networks➝Mobile and wireless security   • Security and privacy➝Security protocols.  
Keywords 
IEEE 802.15.4; 6LoWPAN; Network Security; Wireless Security; Penetration Testing, Security Audit, Smart metering. 
1. INTRODUCTION 
The Internet of Things (IoT) is expected to encompass all major aspects of modern societies in the near future. As of today, there already 
are applications in a great variety of fields, such as personal health and fitness monitoring, home and building automation, metering 
infrastructure, etc. It is the so-called smart approach: smart homes, smart buildings, smart cities, smart grids, smart wearables, etc. All these 
approaches need, at least to some extent, to rely on Low-Rate Wireless Personal Area Networks (LR-WPANs). Among them, the 
6LoWPAN protocol, relying on the IEEE 802.15.4 standard, is the only one that brings a full IP stack to the smallest devices. We thus 
argue that it will certainly play a major role in supporting the growth of IoT technologies. 
Auditing a 6LoWPAN network could be perceived as an easy task: you only need to use an appropriate adapter that connects you to the 
network, just like you would do with a Wi-Fi network, and then, since the communications are IP-based, you could just rely on standard 
penetration testing tools. This view could not be further from the truth. As previously stated, the 6LoWPAN protocol relies on the IEEE 
802.15.4 standard for the PHY layer and the MAC sublayer. However, the IEEE 802.15.4 standard provides IoT architects with a range of 
possibilities regarding network topology, data transfer model and security suite. Moreover, it has rapidly evolved since its release in 2003 
[1] with already two revisions of the standard, in 2006 [2] and in 2011 [3], which are incompatible with the initial version.  
Consequently, to be usable in any situation, the aforementioned adapter must be able to support all of these configurations. Unfortunately, 
there is no off-the-shelf component that provides such a wide range of capabilities. Then, we might want to consider using a different 
specific adapter for each encountered 6LoWPAN network. However, from an auditing point of view, without prior access to the RF module 
the network relies on, this may not be an easy task either to guess the specificities of the IEEE 802.15.4 underlying infrastructure and thus 
to identify an appropriate adapter. That is essentially the goal of the ARSEN project or Advanced Routing for 6LoWPAN and Ethernet 
Networks: to provide security auditors with the means to connect to any existing 6LoWPAN networks by supporting a wide range of IEEE 
802.15.4 configurations and MAC-sublayer attacks. Featured later on in this paper are the design of ARSEN tools and a typical use case. 
2. REVIEW OF COMPONENTS 
In order to join a 6LoWPAN network, the first challenge resides in the successful association with the underlying IEEE 802.15.4 
infrastructure. That is why the first component of the ARSEN project is an IEEE 802.15.4 scanner capable of identifying and inferring all 
the required information that is needed to forge valid IEEE 802.15.4 frames (see section 3 for details). Once associated with a particular 
IEEE 802.15.4 infrastructure, the second challenge resides in the successful translation of frames from the IPv6 format to the 6LoWPAN 
format and vice-versa. That is why the second component of the ARSEN project is a border router capable of adapting to the specificities 
of different IEEE 802.15.4 networks, based on the information provided by the scanner (see section 4 for details). 
Before digging into the details of both of these tools, we first here briefly present Scapy-radio [7], the underlying component on which they 
both rely. Basically, Scapy-radio [7] is a wireless packet manipulation framework not confined to a specific protocol: it can deal with 
multiple bands, multiple modulations, multiple bitrates and multiple types of network frames. Such versatility is achieved by combined two 
well-known tools: GNU Radio [8], a signal-processing development toolkit and Scapy [9], a framework already widely used by the 
penetration testing community. They are described hereafter. 
2.1 GNU RADIO 
A radio communication system where the signal-capturing components are software-configurable and the signal-processing components 
are software-implemented is called a Software Defined Radio (SDR). GNU Radio [8] is an opensource software development kit that 
provides a great number of signal processing blocks to implement SDRs. While performance-critical signal-processing blocks are written 
using C++, GNU Radio is designed to write radio applications using Python. More specifically, radio applications can be prototyped with a 
graphical UI, the GNU Radio Companion (GRC). 
In the previous release of Scapy-radio [7], a GRC flow graph to modulate and demodulate the IEEE 802.15.4 PHY layer was already 
provided. Therefore, there was nothing further to be implemented on that front. 
2.2 SCAPY 
Scapy [9] is an interactive packet manipulation framework written using Python. It can capture, decode, forge and inject packets while 
matching requests and replies for a broad range of network protocols. It can also handle various network tasks such as probing, scanning, 
tracerouting, fuzzing, etc. Because it makes it possible to quickly prototype new networking tools, it was the perfect basis on which to build 
both the scanner and the border router. 
In the previous release of Scapy-radio [7], publicly available IEEE 802.15.4 and 6LoWPAN layers were included. However, these layers 
were incomplete and failed to cover many possibilities offered by both standards. That is why they both have been completely rewritten 
from scratch in order the meet our requirements. 
3. THE IEEE 802.15.4 SCANNER 
The role of the scanner is to maintain an IEEE 802.15.4 network database in which are stored and organized every captured frames as well 
as all the information it has been able to infer from. At the end of a scan, the user is provided with all the determining information which, 
when combined together, should let him know about: 
Which devices are running on a given channel; 
Which devices are communicating with each other; 
Which types of frames are exchanged between devices (and the parameters that are used to transmit these frames); 
To that end, the network database is used to maintain a list of devices the scanner was able to detect. For each device, the following 
attributes are stored: id, several addressing information, parameters related to the device type and a list of recipients. A recipient is a device 
which has been receiving one or more frames from an originator. Similarly, for each recipient, the following attributes are stored: the id of 
the corresponding device and a list of transmissions. A transmission is a set of parameters describing the type of the frame and the 
mechanism by which it has been sent by the originator device,  a frame counter, and a buffer in which are stored every frame sent with the 
same unique parameters. Figure 1 is showing diagrams summarizing the relational model used to store information within the database. 
Figure 1. The relational model of the IEEE 802.15.4 database
In the next subsections, we focus on describing each key element the scanner is intended to retrieve, how the scanner is actually retrieving 
this information and how it could be useful for a security auditor. It is worth noting that for each following section, when talking about 
captured frames, we excluded the acknowledgement frames. 
3.1 DEVICES THAT ARE RUNNING ON A GIVEN CHANNEL 
For the scanner, the very first step is to detect a maximum of devices running on the given IEEE 802.15.4 channel by analyzing captured 
frames using several approaches that are described hereafter. 
Device
+id: integer
+addr16: integer
+addr64: integer
+panid: integer
+coord: bool
+pancoord: bool
+beacon_enabled: bool
+recipients: List of Recipient instances
Device
+id: integer
+addr16: integer
+addr64: integer
+panid: integer
+coord: bool
+pancoord: bool
+beacon_enabled: bool
+recipients: List of Recipient instances
NetworkDataBase
+devices: List of Device instances
Device
+id: integer
+addr16: integer
+addr64: integer
+panid: integer
+coord: bool
+pancoord: bool
+beacon_enabled: bool
+recipients: List of Recipient instances
Recipient
+device_id: integer
+transmissions: List of Transmission instances
Recipient
+device_id: integer
+transmissions: List of Transmission instances
Device
+id: integer
+addr16: integer
+addr64: integer
+panid: integer
+coord: bool
+pancoord: bool
+beacon_enabled: bool
+recipients: List of Recipient instances
Recipient
+device_id: integer
+transmissions: List of Transmission instances
Transmission
+frame_type: integer
+frame_subtype: integer
+security_enabled: bool
+security_level: integer
+version: integer
+srcaddrmode: integer
+destaddrmode: integer
+transmission_scheme: integer
+timing_information: timing info about transfer
+frame_counter: integer
+packets_buffer: List of packets (scapy instances)
Transmission
+frame_type: integer
+frame_subtype: integer
+security_enabled: bool
+security_level: integer
+version: integer
+srcaddrmode: integer
+destaddrmode: integer
+transmission_scheme: integer
+timing_information: timing info about transfer
+frame_counter: integer
+packets_buffer: List of packets (scapy instances)
Recipient
+device_id: integer
+transmissions: List of Transmission instances
Transmission
+frame_type: integer
+frame_subtype: integer
+security_enabled: bool
+security_level: integer
+version: integer
+srcaddrmode: integer
+destaddrmode: integer
+transmission_scheme: integer
+timing_information: timing info about transfer
+frame_counter: integer
+packets_buffer: List of packets (scapy instances)
3.1.1 THE ORIGINATOR 
The scanner checks if it can find in the database a device sharing the same addressing information than the source addressing information 
of the captured frame. Note that addressing information includes the source PANId and, depending of the source address mode, the source 
address. When source address is missing, that means that the frame has originated from the PAN Coordinator. In this case, rather than 
looking for a device using its address and its PANId as an entry key, the database is requested to look for a PAN coordinator with a given 
PANId. If such device does not exist, a new one is registered with the appropriate information: either the couple PANId/Address or the 