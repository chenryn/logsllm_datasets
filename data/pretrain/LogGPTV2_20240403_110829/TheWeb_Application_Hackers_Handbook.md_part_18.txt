one area and apply it to other areas where errors are handled gracefully. For
example, by manipulating request parameters in systematic ways and monitor-
ing the error messages received, it may be possible to determine the internal
structure and logic of the application component. If you are lucky, aspects of
this structure may be replicated in other areas.
HACK STEPS
1. Try to identify any locations within the application that may contain clues
about the internal structure and functionality of other areas.
2. It may not be possible to draw any firm conclusions here; however, the
cases identified may prove useful at a later stage of the attack when
you’re attempting to exploit any potential vulnerabilities.
Isolating Unique Application Behavior
Sometimes the situation is the opposite of that just described. In many well-
secured or mature applications, a consistent framework is employed that pre-
vents numerous types of attacks, such as cross-site scripting, SQL injection,
and unauthorized access. In these cases, the most fruitful areas for hunting
vulnerabilities generally are the portions of the application that have been added
retrospectively, or “bolted on,” and hence are not handled by the application’s
general security framework. Additionally, they may not be correctly tied into
the application through authentication, session management, and access control.
These are often identifi able through differences in GUI appearance, parameter
naming conventions, or explicitly through comments in source code.
HACK STEPS
1. Make a note of any functionality that diverges from the standard GUI
appearance, parameter naming, or navigation mechanism used within the
rest of the application.
2. Also make a note of functionality that is likely to have been added retro-
spectively. Examples include debug functions, CAPTCHA controls, usage
tracking, and third-party code.
3. Perform a full review of these areas, and do not assume that the standard
defenses used elsewhere in the application apply.
cc0044..iinndddd 111100 88//1199//22001111 1122::0044::4466 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 111
Chapter 4 n Mapping the Application 111
Mapping the Attack Surface
The fi nal stage of the mapping process is to identify the various attack surfaces
exposed by the application and the potential vulnerabilities that are commonly
associated with each one. The following is a rough guide to some key types
of behavior and functionality that you may identify, and the kinds of vulner-
abilities that are most commonly found within each one. The remainder of this
book is concerned with the practical details of how you can detect and exploit
each of these problems:
n Client-side validation — Checks may not be replicated on the server
n Database interaction — SQL injection
n File uploading and downloading — Path traversal vulnerabilities, stored
cross-site scripting
n Display of user-supplied data — Cross-site scripting
n Dynamic redirects — Redirection and header injection attacks
n Social networking features — username enumeration, stored cross-site
scripting
n Login — Username enumeration, weak passwords, ability to use brute
force
n Multistage login — Logic fl aws
n Session state — Predictable tokens, insecure handling of tokens
n Access controls — Horizontal and vertical privilege escalation
n User impersonation functions — Privilege escalation
n Use of cleartext communications — Session hijacking, capture of creden-
tials and other sensitive data
n Off-site links — Leakage of query string parameters in the Referer
header
n Interfaces to external systems — Shortcuts in the handling of sessions
and/or access controls
n Error messages — Information leakage
n E-mail interaction — E-mail and/or command injection
n Native code components or interaction — Buffer overfl ows
n Use of third-party application components — Known vulnerabilities
n Identifi able web server software — Common confi guration weaknesses,
known software bugs
cc0044..iinndddd 111111 88//1199//22001111 1122::0044::4466 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 112
112 Chapter 4 n Mapping the Application
Mapping the Extreme Internet Shopping Application
Having mapped the content and functionality of the EIS application, many paths
could be followed to attack the application, as shown in Figure 4-15.
Figure 4-15: The attack surface exposed by the EIS application
The /auth directory contains authentication functionality. A full review of
all authentication functions, session handling, and access control is worthwhile,
including further content discovery attacks.
Within the /core path, the sitestats page appears to accept an array of param-
eters delimited by the pipe character (|). As well as conventional input-based
attacks, other values could be brute-forcible, such as source, location, and
IP, in an attempt to reveal more information about other users or about the
page specifi ed in pageID. It may also be possible to fi nd out information about
cc0044..iinndddd 111122 88//1199//22001111 1122::0044::4466 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 113
Chapter 4 n Mapping the Application 113
inaccessible resources or to try a wildcard option in pageID, such as pageID=all
or pageID=*. Finally, because the observed pageID value contains a slash, it may
indicate a resource being retrieved from the fi le system, in which case path
traversal attacks may be a possibility.
The /gb path contains the site’s guestbook. Visiting this page suggests it is
used as a discussion forum, moderated by an administrator. Messages are mod-
erated, but the login bypass login=true means that an attacker can attempt to
approve malicious messages (to deliver cross-site scripting attacks, for example)
and read other users’ private messages to the administrator.
The /home path appears to hold authenticated user content. This could make
a good basis for attempts to launch a horizontal privilege escalation attack to
access another user’s personal information and to ensure that access controls
are present and enforced on every page.
A quick review shows that the /icons and /images paths hold static content.
It may be worth brute-forcing for icon names that could indicate third-party
software, and checking for directory indexing on these directories, but they are
unlikely to be worth signifi cant effort.
The /pub path contains REST-style resources under /pub/media and /pub/
user. A brute-force attack could be used to fi nd the profi le pages of other appli-
cation users by targeting the numeric value in /pub/user/11. Social networking
functionality such as this can reveal user information, usernames, and other
users’ logon status.
The /shop path contains the online shopping site and has a large number of
URLs. However, they all have a similar structure, and an attacker could probably
probe all of the relevant attack surface by looking at just one or two items. The
purchasing process may contain interesting logic fl aws that could be exploited
to obtain unauthorized discounts or avoid payment.
HACK STEPS
1. Understand the core functionality implemented within the application and
the main security mechanisms in use.
2. Identify all features of the application’s functionality and behavior that
are often associated with common vulnerabilities.
3. Check any third-party code against public vulnerability databases such as
www.osvdb.org to determine any known issues.
4. Formulate a plan of attack, prioritizing the most interesting-looking func-
tionality and the most serious of the associated potential vulnerabilities.
cc0044..iinndddd 111133 88//1199//22001111 1122::0044::4466 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 114
114 Chapter 4 n Mapping the Application
Summary
Mapping the application is a key prerequisite to attacking it. It may be tempting
to dive in and start probing for bugs, but taking time to gain a sound under-
standing of the application’s functionality, technologies, and attack surface will
pay dividends down the line.
As with almost all of web application hacking, the most effective approach
is to use manual techniques supplemented where appropriate by controlled
automation. No fully automated tool can carry out a thorough mapping of the
application in a safe way. To do this, you need to use your hands and draw on
your own experience. The core methodology we have outlined involves the
following:
n Manual browsing and user-directed spidering to enumerate the applica-
tion’s visible content and functionality
n Use of brute force combined with human inference and intuition to dis-
cover as much hidden content as possible
n An intelligent analysis of the application to identify its key functionality,
behavior, security mechanisms, and technologies
n An assessment of the application’s attack surface, highlighting the most
promising functions and behavior for more focused probing into exploit-
able vulnerabilities
Questions
Answers can be found at http://mdsec.net/wahh.
1. While mapping an application, you encounter the following URL:
https://wahh-app.com/CookieAuth.dll?GetLogon?curl=Z2Fdefault.
aspx
What information can you deduce about the technologies employed on
the server and how it is likely to behave?
2. The application you are targeting implements web forum functionality.
Here is the only URL you have discovered:
http://wahh-app.com/forums/ucp.php?mode=register
How might you obtain a listing of forum members?
cc0044..iinndddd 111144 88//1199//22001111 1122::0044::4466 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 115
Chapter 4 n Mapping the Application 115
3. While mapping an application, you encounter the following URL:
https://wahh-app.com/public/profile/Address.
asp?action=view&location
=default
What information can you infer about server-side technologies? What
can you conjecture about other content and functionality that may exist?
4. A web server’s responses include the following header:
Server: Apache-Coyote/1.1
What does this indicate about the technologies in use on the server?
5. You are mapping two different web applications, and you request the URL
/admin.cpf from each application. The response headers returned by each
request are shown here. From these headers alone, what can you deduce
about the presence of the requested resource within each application?
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Expires: Mon, 20 Jun 2011 14:59:21 GMT
Content-Location: http://wahh-
app.com/includes/error.htm?404;http://wahh-app.com/admin.cpf
Date: Mon, 20 Jun 2011 14:59:21 GMT
Content-Type: text/html
Accept-Ranges: bytes
Content-Length: 2117
HTTP/1.1 401 Unauthorized
Server: Apache-Coyote/1.1
WWW-Authenticate: Basic realm=”Wahh Administration Site”
Content-Type: text/html;charset=utf-8
Content-Length: 954
Date: Mon, 20 Jun 2011 15:07:27 GMT
Connection: close
cc0044..iinndddd 111155 88//1199//22001111 1122::0044::4477 PPMM
Stuttard c04.indd V3 - 07/22/2011 Page 116
cc0044..iinndddd 111166 88//1199//22001111 1122::0044::4477 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 117
CHAPTER
5
Bypassing Client-Side Controls
Chapter 1 described how the core security problem with web applications arises
because clients can submit arbitrary input. Despite this fact, a large proportion
of web applications, nevertheless, rely on various measures implemented on
the client side to control the data that they submit to the server. In general, this
represents a fundamental security fl aw: the user has full control over the client
and the data it submits and can bypass any controls that are implemented on
the client side and are not replicated on the server.
An application may rely on client-side controls to restrict user input in two
broad ways. First, an application may transmit data via the client component
using a mechanism that it assumes will prevent the user from modifying that
data when the application later reads it. Second, an application may implement
measures on the client side that control the user’s interaction with his or her
own client, with the aim of restricting functionality and/or applying controls
around user input before it is submitted. This may be achieved using HTML
form features, client-side scripts, or browser extension technologies.
This chapter looks at examples of each kind of client-side control and describes
ways in which they can be bypassed.
117
cc0055..iinndddd 111177 88//1199//22001111 1122::0055::4400 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 118
118 Chapter 5 n Bypassing Client-Side Controls
Transmitting Data Via the Client
It is common to see an application passing data to the client in a form that the
end user cannot directly see or modify, with the expectation that this data
will be sent back to the server in a subsequent request. Often, the application’s
developers simply assume that the transmission mechanism used will ensure
that the data transmitted via the client will not be modifi ed along the way.
Because everything submitted from the client to the server is within the
user’s control, the assumption that data transmitted via the client will not be
modifi ed is usually false and often leaves the application vulnerable to one or
more attacks.
You may reasonably wonder why, if the server knows and specifi es a particular
item of data, the application would ever need to transmit this value to the client
and then read it back. In fact, writing applications in this way is often easier for
developers for various reasons:
n It removes the need to keep track of all kinds of data within the user’s
session. Reducing the amount of per-session data being stored on the
server can also improve the application’s performance.
n If the application is deployed on several distinct servers, with users poten-
tially interacting with more than one server to perform a multistep action,
it may not be straightforward to share server-side data between the hosts
that may handle the same user’s requests. Using the client to transmit data
can be a tempting solution to the problem.
n If the application employs any third-party components on the server,
such as shopping carts, modifying these may be diffi cult or impossible, so
transmitting data via the client may be the easiest way of integrating these.
n In some situations, tracking a new piece of data on the server may entail
updating a core server-side API, thereby triggering a full-blown formal
change-management process and regression testing. Implementing a more
piecemeal solution involving client-side data transmission may avoid this,
allowing tight deadlines to be met.
However, transmitting sensitive data in this way is usually unsafe and has
been the cause of countless vulnerabilities in applications.
Hidden Form Fields
Hidden HTML form fi elds are a common mechanism for transmitting data via
the client in a superfi cially unmodifi able way. If a fi eld is fl agged as hidden,
it is not displayed on-screen. However, the fi eld’s name and value are stored
within the form and are sent back to the application when the user submits
the form.
cc0055..iinndddd 111188 88//1199//22001111 1122::0055::4400 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 119
Chapter 5 n Bypassing Client-Side Controls 119
The classic example of this security fl aw is a retailing application that stores
the prices of products within hidden form fi elds. In the early days of web appli-
cations, this vulnerability was extremely widespread, and by no means has it
been eliminated today. Figure 5-1 shows a typical form.
Figure 5-1: A typical HTML form
The code behind this form is as follows:
Product: iPhone 5 
Price: 449 
Quantity:  (Maximum quantity is 50)
Notice the form fi eld called price, which is fl agged as hidden. This fi eld is sent
to the server when the user submits the form:
POST /shop/28/Shop.aspx?prod=1 HTTP/1.1
Host: mdsec.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 20
quantity=1&price=449
TRY IT!
http://mdsec.net/shop/28/
Although the price fi eld is not displayed on-screen, and the user cannot edit
it, this is solely because the application has instructed the browser to hide the
fi eld. Because everything that occurs on the client side is ultimately within
the user’s control, this restriction can be circumvented to edit the price.
One way to achieve this is to save the source code for the HTML page, edit
the fi eld’s value, reload the source into a browser, and click the Buy button.
However, an easier and more elegant method is to use an intercepting proxy to
modify the desired data on-the-fl y.
cc0055..iinndddd 111199 88//1199//22001111 1122::0055::4400 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 120
120 Chapter 5 n Bypassing Client-Side Controls
An intercepting proxy is tremendously useful when attacking a web applica-
tion and is the one truly indispensable tool you need. Numerous such tools are
available. We will use Burp Suite, which was written by one of this book’s authors.
The proxy sits between your web browser and the target application. It inter-