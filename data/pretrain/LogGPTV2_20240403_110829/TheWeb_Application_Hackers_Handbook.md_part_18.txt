### Graceful Error Handling and Application Structure

One effective method for understanding the internal structure and logic of an application is to manipulate request parameters in a systematic manner and observe the resulting error messages. By doing so, it may be possible to infer the underlying architecture and functionality of the application component. If successful, this knowledge can be applied to other parts of the application, as similar structures and patterns often exist across different areas.

#### Hack Steps:
1. **Identify Clues**: Look for any locations within the application that might provide insights into the internal structure and functionality of other areas.
2. **Document Observations**: While firm conclusions may not always be possible, the identified cases can be valuable during later stages of the attack, especially when attempting to exploit potential vulnerabilities.

### Isolating Unique Application Behavior

In some well-secured or mature applications, a consistent security framework is used to prevent common attacks such as cross-site scripting (XSS), SQL injection, and unauthorized access. In these cases, the most promising areas for vulnerability hunting are often the portions of the application that have been added retrospectively or "bolted on." These areas may not be fully integrated with the application's general security framework, leading to potential weaknesses in authentication, session management, and access control. Such areas can often be identified by differences in GUI appearance, parameter naming conventions, or explicit comments in the source code.

#### Hack Steps:
1. **Note Divergences**: Record any functionality that deviates from the standard GUI appearance, parameter naming, or navigation mechanisms used in the rest of the application.
2. **Identify Retroactive Additions**: Make a note of functionalities that are likely to have been added retrospectively, such as debug functions, CAPTCHA controls, usage tracking, and third-party code.
3. **Thorough Review**: Conduct a comprehensive review of these areas, without assuming that the standard defenses used elsewhere in the application apply.

### Mapping the Attack Surface

The final stage of the mapping process involves identifying the various attack surfaces exposed by the application and the potential vulnerabilities associated with each. Here is a guide to key types of behavior and functionality, along with the common vulnerabilities found within them:

- **Client-Side Validation**: Checks may not be replicated on the server.
- **Database Interaction**: SQL injection.
- **File Uploading and Downloading**: Path traversal vulnerabilities, stored XSS.
- **Display of User-Supplied Data**: Cross-site scripting.
- **Dynamic Redirects**: Redirection and header injection attacks.
- **Social Networking Features**: Username enumeration, stored XSS.
- **Login**: Username enumeration, weak passwords, brute force attacks.
- **Multistage Login**: Logic flaws.
- **Session State**: Predictable tokens, insecure handling of tokens.
- **Access Controls**: Horizontal and vertical privilege escalation.
- **User Impersonation Functions**: Privilege escalation.
- **Cleartext Communications**: Session hijacking, capture of credentials and sensitive data.
- **Off-Site Links**: Leakage of query string parameters in the Referer header.
- **Interfaces to External Systems**: Weaknesses in session and access control handling.
- **Error Messages**: Information leakage.
- **Email Interaction**: Email and/or command injection.
- **Native Code Components or Interaction**: Buffer overflows.
- **Third-Party Application Components**: Known vulnerabilities.
- **Identifiable Web Server Software**: Common configuration weaknesses, known software bugs.

### Mapping the Extreme Internet Shopping Application

After mapping the content and functionality of the EIS application, several paths can be followed to attack the application, as shown in Figure 4-15.

#### Key Paths and Potential Vulnerabilities:
- **/auth Directory**: Contains authentication functionality. A full review of all authentication functions, session handling, and access control is recommended.
- **/core Path**: The `sitestats` page accepts parameters delimited by the pipe character (`|`). Consider input-based attacks and brute-forcing parameters like `source`, `location`, and `IP` to reveal more information about users or inaccessible resources.
- **/gb Path**: Contains the site’s guestbook, which is used as a discussion forum. The `login=true` bypass means an attacker can approve malicious messages and read private messages.
- **/home Path**: Holds authenticated user content. This could be a basis for horizontal privilege escalation attacks.
- **/icons and /images Paths**: Hold static content. Brute-forcing icon names and checking for directory indexing may be useful but not high priority.
- **/pub Path**: Contains REST-style resources. Brute-force attacks can reveal profile pages and user information.
- **/shop Path**: Contains the online shopping site. Probing the purchasing process may uncover logic flaws for unauthorized discounts or avoiding payment.

#### Hack Steps:
1. **Understand Core Functionality**: Gain a thorough understanding of the application’s core functionality and main security mechanisms.
2. **Identify Vulnerable Features**: Identify features often associated with common vulnerabilities.
3. **Check Third-Party Code**: Use public vulnerability databases to check for known issues in third-party code.
4. **Formulate Attack Plan**: Prioritize the most interesting functionality and the most serious potential vulnerabilities.

### Summary

Mapping the application is a critical prerequisite for attacking it. While it may be tempting to start probing for bugs immediately, taking the time to understand the application’s functionality, technologies, and attack surface will yield better results. The most effective approach is to use manual techniques supplemented by controlled automation. The core methodology includes:

- **Manual Browsing and Spidering**: To enumerate visible content and functionality.
- **Brute Force and Human Inference**: To discover hidden content.
- **Intelligent Analysis**: To identify key functionality, behavior, security mechanisms, and technologies.
- **Attack Surface Assessment**: To highlight the most promising areas for focused probing.

### Questions

1. **Technologies and Behavior**:
   - URL: `https://wahh-app.com/CookieAuth.dll?GetLogon?curl=Z2Fdefault.aspx`
   - What can you deduce about the server's technologies and behavior?

2. **Forum Member Listing**:
   - URL: `http://wahh-app.com/forums/ucp.php?mode=register`
   - How can you obtain a listing of forum members?

3. **Server-Side Technologies**:
   - URL: `https://wahh-app.com/public/profile/Address.asp?action=view&location=default`
   - What can you infer about the server-side technologies and other content?

4. **Web Server Technologies**:
   - Header: `Server: Apache-Coyote/1.1`
   - What does this indicate about the server's technologies?

5. **Resource Presence**:
   - Response Headers for `/admin.cpf` from two different applications.
   - What can you deduce about the presence of the requested resource in each application?

### Chapter 5: Bypassing Client-Side Controls

#### Transmitting Data Via the Client

It is common for applications to pass data to the client in a form that the end user cannot directly see or modify, expecting it to be sent back to the server in a subsequent request. However, because everything submitted from the client to the server is under the user's control, this assumption is often false and can leave the application vulnerable to attacks.

#### Why Use Client-Side Transmission?

Developers may use this approach for several reasons:
- **Reduced Session Data**: Minimizes the amount of per-session data stored on the server, improving performance.
- **Multi-Host Deployment**: Simplifies sharing data between multiple servers.
- **Third-Party Integration**: Easier integration with third-party components.
- **Change Management**: Avoids triggering formal change-management processes.

However, transmitting sensitive data in this way is usually unsafe and has led to many vulnerabilities.

#### Hidden Form Fields

Hidden HTML form fields are a common mechanism for transmitting data via the client. While these fields are not displayed on-screen, their values are still sent to the server when the form is submitted.

##### Example
- **Product**: iPhone 5
- **Price**: 449
- **Quantity**: (Maximum quantity is 50)

HTML Form:
```html
<form action="/shop/28/Shop.aspx?prod=1" method="POST">
  <input type="hidden" name="price" value="449">
  <input type="text" name="quantity" value="1">
  <button type="submit">Buy</button>
</form>
```

Request:
```http
POST /shop/28/Shop.aspx?prod=1 HTTP/1.1
Host: mdsec.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 20

quantity=1&price=449
```

##### Try It!
- **URL**: [http://mdsec.net/shop/28/](http://mdsec.net/shop/28/)

Although the price field is hidden, it can be modified by saving the HTML source, editing the field's value, reloading the source, and submitting the form. Alternatively, an intercepting proxy can be used to modify the data on-the-fly.

#### Intercepting Proxy

An intercepting proxy, such as Burp Suite, is essential for web application attacks. It sits between your browser and the target application, allowing you to intercept and modify requests and responses.