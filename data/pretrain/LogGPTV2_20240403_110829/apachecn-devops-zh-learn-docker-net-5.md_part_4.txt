    Name = "nginx-sample"
    [Filesystem]
    # read only paths for the container
    ReadOnlyPaths = [
     "/bin/**",
     "/boot/**",
     "/dev/**",
     "/etc/**",
     …
    ]
    AllowExec = [
     "/usr/sbin/nginx"
    ]
    # denied executable files
    DenyExec = [
     "/bin/dash",
     "/bin/sh",
     "/usr/bin/top"
    ]
    ```
6.  Execute bane to load the profile. `sample.toml` is a file in the directory `/home/Ubuntu/go/src/github.com/jfrazelle/bane`:
    ```
    $ sudo bane sample.toml
    # Profile installed successfully you can now run the profile with # `docker run --security-opt="apparmor:docker-nginx-sample"`
    ```
    这个概要文件将使很多路径成为只读的，并且只允许在我们将要创建的容器中执行 nginx。它禁用 TOP、PING 等。
7.  Once the profile is loaded you can create a nginx container:
    ```
    $ docker run --security-opt="apparmor:docker-nginx-sample" -p 80:80 --rm -it nginx bash
    ```
    注意，如果 AppArmor 是找不到文件，将文件复制到`/etc/apparmor.d`目录并重新加载 AppArmor 配置文件:
    ```
    $ sudo invoke-rc.d apparmor reload
    ```
    使用 AppArmor 配置文件创建 nginx 容器:
    ```
    ubuntu@ubuntu:~/go/src/github.com$ docker run --security-opt="apparmor:docker-nginx-sample" -p 80:80 --rm -it nginx bash
    root@84d617972e04:/# ping 8.8.8.8
    ping: Lacking privilege for raw socket.
    ```
下图显示了在容器中运行的 nginx 应用如何使用 AppArmour 应用配置文件:
![AppArmor and Docker](img/00045.jpeg)
## Docker 安全基准
下面的教程展示了在安全和生产环境中运行 Docker 容器应该遵循的一些重要准则。参考自 CIS Docker 安全基准[https://Benchmark . cisecurity . org/tools 2/Docker/CIS _ Docker _ 1.6 _ Benchmark _ v 1 . 0 . 0 . pdf](https://benchmarks.cisecurity.org/tools2/docker/CIS_Docker_1.6_Benchmark_v1.0.0.pdf)。
### 定期审核 Docker 守护程序
除了审核您的常规 Linux 文件系统和系统调用，还要审核 Docker 守护程序。Docker 守护程序以 root 权限运行。因此，有必要审核其活动和使用情况:
```
$ apt-get install auditd
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following extra packages will be installed:
 libauparse0
Suggested packages:
 audispd-plugins
The following NEW packages will be installed:
 auditd libauparse0
0 upgraded, 2 newly installed, 0 to remove and 50 not upgraded.
Processing triggers for libc-bin (2.21-0ubuntu4) ...
Processing triggers for ureadahead (0.100.0-19) ...
Processing triggers for systemd (225-1ubuntu9) ...
```
删除审核日志文件(如果存在):
```
$ cd /etc/audit/
$ ls
audit.log
$ nano audit.log
$ rm -rf audit.log
```
添加 Docker 服务的审核规则并审核 Docker 服务:
```
$ nano audit.rules
-w /usr/bin/docker -k docker
$ service auditd restart
$ ausearch -k docker
$ docker ps
CONTAINER ID    IMAGE      COMMAND    CREATED    STATUS   PORTS     NAMES
$ ausearch -k docker
----
time->Fri Nov 27 02:29:50 2015
type=PROCTITLE msg=audit(1448620190.716:79): proctitle=646F636B6572007073
type=PATH msg=audit(1448620190.716:79): item=1 name="/lib64/ld-linux-x86-64.so.2" inode=398512 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL
type=PATH msg=audit(1448620190.716:79): item=0 name="/usr/bin/docker" inode=941134 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL
type=CWD msg=audit(1448620190.716:79):  cwd="/etc/audit"
type=EXECVE msg=audit(1448620190.716:79): argc=2 a0="docker" a1="ps"
type=SYSCALL msg=audit(1448620190.716:79): arch=c000003e syscall=59 success=yes exit=0 a0=ca1208 a1=c958c8 a2=c8
```
### 为容器创建用户
目前，Docker 不支持将容器的根用户映射到主机上的非根用户。对用户命名空间的支持将在未来的版本中提供。这造成了严重的用户隔离问题。因此，强烈建议确保为容器创建了一个非根用户，并且使用该用户运行容器。
正如我们在下面的代码片段中看到的，默认情况下，`centos` Docker 映像的`user`字段为空，这意味着默认情况下，容器将在运行时获得一个根用户，这应该避免:
```
$ docker inspect centos
[
 {
 "Id": "e9fa5d3a0d0e19519e66af2dd8ad6903a7288de0e995b6eafbcb38aebf2b606d",
 "RepoTags": [
 "centos:latest"
 ],
 "RepoDigests": [],
 "Parent": "c9853740aa059d078b868c4a91a069a0975fb2652e94cc1e237ef9b961afa572",
 "Comment": "",
 "Created": "2015-10-13T23:29:04.138328589Z",
 "Container": "eaa200e2e187340f0707085b9b4eab5658b13fd190af68c71a60f6283578172f",
 "ContainerConfig": {
 "Hostname": "7aa5783a47d5",
 "Domainname": "",
 "User": "",
 contd
```
在构建 Docker 映像时，我们可以在 Dockerfile 中提供`test`用户，即权限较低的用户，如以下代码片段所示:
```
$ cd
$ mkdir test-container
$ cd test-container/
$ cat Dockerfile
FROM centos:latest
RUN useradd test
USER test
root@ubuntu:~/test-container# docker build -t vkohli .
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM centos:latest
 ---> e9fa5d3a0d0e
Step 2 : RUN useradd test
 ---> Running in 0c726d186658
 ---> 12041ebdfd3f
Removing intermediate container 0c726d186658
Step 3 : USER test
 ---> Running in 86c5e0599c72
 ---> af4ba8a0fec5
Removing intermediate container 86c5e0599c72
Successfully built af4ba8a0fec5
$ docker images | grep vkohli
vkohli    latest     af4ba8a0fec5      9 seconds ago     172.6 MB
```
当我们启动 Docker 容器时，我们可以看到它获得了一个`test`用户，`docker inspect`命令也显示默认用户为`test`:
```
$ docker run -it vkohli /bin/bash
[test@2ff11ee54c5f /]$ whoami
test
[test@2ff11ee54c5f /]$ exit
$ docker inspect vkohli
[
 {
 "Id": "af4ba8a0fec558d68b4873e2a1a6d8a5ca05797e0bfbab0772bcedced15683ea",
 "RepoTags": [
 "vkohli:latest"
 ],
 "RepoDigests": [],
 "Parent": "12041ebdfd3f38df3397a8961f82c225bddc56588e348761d3e252eec868d129",
 "Comment": "",
 "Created": "2015-11-27T14:10:49.206969614Z",
 "Container": "86c5e0599c72285983f3c5511fdec940f70cde171f1bfb53fab08854fe6d7b12",
 "ContainerConfig": {
 "Hostname": "7aa5783a47d5",
 "Domainname": "",
 "User": "test",
 Contd..
```
### 不要在容器上装载敏感的主机系统目录
如果以读写模式装载敏感目录，则有可能对这些敏感目录中的文件进行更改。这些更改可能会带来安全隐患或不必要的更改，从而使 Docker 主机处于受损状态。
如果`/run/systemd`敏感目录安装在容器中，那么我们实际上可以从容器本身关闭主机:
```
$ docker run -ti -v /run/systemd:/run/systemd centos /bin/bash
[root@1aca7fe47882 /]# systemctl status docker
docker.service - Docker Application Container Engine
 Loaded: loaded (/lib/systemd/system/docker.service; enabled)
 Active: active (running) since Sun 2015-11-29 12:22:50 UTC; 21min ago
 Docs: https://docs.docker.com
 Main PID: 758
 CGroup: /system.slice/docker.service
[root@1aca7fe47882 /]# shutdown
```
可以使用以下命令对其进行审核，该命令返回当前映射目录的列表，以及它们是否以读写模式装载到每个容器实例中:
```
$ docker ps -q | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Volumes }} VolumesRW={{ .VolumesRW }}'
```
### 不要使用权限容器
Docker 支持添加和删除功能，允许使用非默认配置文件。这可能会通过移除功能使 Docker 更安全，或者通过添加功能使 Docker 更不安全。因此，建议删除除容器进程明确需要的功能之外的所有功能。
如下图所示，当我们在没有权限模式下运行容器时，我们无法更改内核参数，但是当我们在权限模式下使用`--privileged`标志运行容器时，很容易更改内核参数，这可能会导致安全漏洞:
```
$ docker run -it centos /bin/bash
[root@7e1b1fa4fb89 /]#  sysctl -w net.ipv4.ip_forward=0
sysctl: setting key "net.ipv4.ip_forward": Read-only file system
$ docker run --privileged -it centos /bin/bash
[root@930aaa93b4e4 /]#  sysctl -a | wc -l
sysctl: reading key "net.ipv6.conf.all.stable_secret"
sysctl: reading key "net.ipv6.conf.default.stable_secret"
sysctl: reading key "net.ipv6.conf.eth0.stable_secret"
sysctl: reading key "net.ipv6.conf.lo.stable_secret"
638
[root@930aaa93b4e4 /]# sysctl -w net.ipv4.ip_forward=0
net.ipv4.ip_forward = 0
```
因此，在审核时，应确保所有容器不应将权限模式设置为`true`:
```
$ docker ps -q | xargs docker inspect --format '{{ .Id }}: Privileged={{ .HostConfig.Privileged }}'
930aaa93b4e44c0f647b53b3e934ce162fbd9ef1fd4ec82b826f55357f6fdf3a: Privileged=true
```
# 总结
在这一章中，我们通过对 cgroups 和内核名称空间的概述深入探讨了 Docker 安全性。我们还讨论了文件系统和 Linux 功能的一些方面，容器利用这些方面来提供更多功能，例如权限容器，但代价是在威胁方面暴露得更多。我们还看到了如何使用代理容器来限制易受攻击的流量，从而在 AWS ECS (EC2 容器服务)中的安全环境中部署容器。AppArmor 还提供内核增强特性，以便将应用限制在有限的资源集内。利用 Docker 容器的优势有助于我们在安全的环境中部署它们。最后，我们快速深入了解了 Docker 安全基准以及在生产环境中进行审计和 Docker 部署时可以遵循的一些重要建议。
在下一章中，我们将学习使用各种工具在 Docker 网络中进行调优和故障排除。