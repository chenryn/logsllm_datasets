### 优化后的文本

#### 代码片段及注释
```c
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
```

- **说明**：将链表节点的 `next` 和 `prev` 指针设置为毒化值，以防止在删除后被误用。

```c
B 
A 
control_ports 
C 
LIST_POISON 
entry = A 
next = B 
prev = control_ports 
A->prev = A->next = POISON 
```

- **说明**：定义了几个关键变量，并将 `A` 的 `prev` 和 `next` 指针设置为毒化值。

```c
• Two following objects are deleted 
– Simultaneously! 
• control_ports points to a FREE data 
– LIST_POISON worked – No longer mappable 
– Spraying af_unix_dgram works 
• Iterations on control_ports? 
– Just close a client_port! 
– Notification to all control_ports with post_pkt_to_port
```

- **说明**：描述了两个对象同时被删除的情况，并指出 `control_ports` 指向一个空闲数据。使用 `af_unix_dgram` 喷射可以成功，遍历 `control_ports` 时只需关闭 `client_port` 并通知所有 `control_ports`。

#### 函数 `post_pkt_to_port`
```c
static int post_pkt_to_port(struct msm_ipc_port *UAF_OBJECT, 
    struct rr_packet *pkt, int clone) 
{ 
    struct rr_packet *temp_pkt = pkt; 
    void (*notify)(unsigned event, void *oob_data, 
                   size_t oob_data_len, void *priv); 
    void (*data_ready)(struct sock *sk, int bytes) = NULL; 
    struct sock *sk; 

    mutex_lock(&UAF_OBJECT->port_rx_q_lock_lhc3); 
    __pm_stay_awake(UAF_OBJECT->port_rx_ws); 
    list_add_tail(&temp_pkt->list, &UAF_OBJECT->port_rx_q); 
    wake_up(&UAF_OBJECT->port_rx_wait_q); 

    notify = UAF_OBJECT->notify; 
    sk = (struct sock *)UAF_OBJECT->endpoint; 
    if (sk) { 
        read_lock(&sk->sk_callback_lock); 
        data_ready = sk->sk_data_ready; 
        read_unlock(&sk->sk_callback_lock); 
    } 

    mutex_unlock(&UAF_OBJECT->port_rx_q_lock_lhc3); 
    if (notify) 
        notify(pkt->hdr.type, NULL, 0, UAF_OBJECT->priv); 
    else if (sk && data_ready) 
        data_ready(sk, pkt->hdr.size); 

    return 0; 
}
```

- **说明**：该函数用于将数据包添加到接收队列并唤醒等待队列中的任务。根据需要调用通知函数或数据就绪回调。

#### 函数 `__wake_up_common`
```c
static void __wake_up_common(wait_queue_head_t *q, ...) 
{ 
    wait_queue_t *curr, *next; 
    list_for_each_entry_safe(curr, next, &q->task_list, task_list) { 
        ... 
        if (curr->func(curr, mode, wake_flags, key)) 
            break; 
    } 
}
```

- **说明**：该函数用于唤醒等待队列中的任务。通过遍历任务列表并调用每个任务的回调函数来实现。

#### 利用漏洞创建UAF情况
1. **创建UAF情况**：
   - 使用漏洞创建UAF（Use After Free）情况。
   - 喷射 `af_unix_dgram` 来捕获UAF。
   - 触发链表迭代。

2. **触发链表迭代**：
   - 通过触发 `__wake_up_common` 来遍历 `UAF->port_rx_wait_q->task_list`。
   - 利用 `usb_read_done_work_fn` 调用任意函数。

3. **利用 `usb_read_done_work_fn`**：
   - 该函数接收一个函数指针和参数，可以在其中调用任意函数。
   - 通过链式调用 `__wake_up_common`、`usb_read_done_work_fn` 和任意函数来实现控制流劫持。

#### CVE-2016-2503
- **SyncSource 对象**：
  - 用于同步GPU和应用程序之间的活动。
  - 可以通过GPU的IOCTL创建和销毁。
  - 使用IDR机制引用。

- **漏洞利用**：
  - 创建一个SyncSource对象，并分配一个可预测的IDR号。
  - 创建两个线程不断销毁同一个IDR号，使引用计数减少到-1。
  - 在引用计数归零后，可以喷射对象。

#### CVE-2016-2504
- **GPU内存映射**：
  - 通过 `IOCTL_KGSL_MAP_USER_MEM` 和 `IOCTL_KGSL_GPUMEM_FREE_ID` 映射用户内存到GPU。
  - 使用IDR机制引用。

- **漏洞利用**：
  - 映射内存并保存IDR。
  - 另一个线程在第一个线程返回前释放IDR。
  - 在 `kgsl_mem_entry_attach_process` 中产生UAF。

#### 时间线
- **Syncockaroot (CVE-2016-2503)**：
  - 2016年4月4日：向Qualcomm披露漏洞。
  - 2016年5月2日：Qualcomm确认漏洞。
  - 2016年7月6日：Qualcomm发布公开补丁。
  - 2016年7月6日：Google部署补丁。

- **Kangaroot (CVE-2016-2504)**：
  - 2016年4月4日：向Qualcomm披露漏洞。
  - 2016年5月2日：Qualcomm确认漏洞。
  - 2016年7月6日：Qualcomm发布公开补丁。
  - 2016年8月1日：Google部署补丁。

- **ASHmenian Devil (CVE-2016-5340)**：
  - 2016年4月10日：向Qualcomm披露漏洞。
  - 2016年5月2日：Qualcomm确认漏洞。
  - 2016年7月28日：Qualcomm发布公开补丁。
  - 待定：Google部署补丁。

- **Qualaroot (CVE-2016-2059)**：
  - 2016年2月2日：向Qualcomm披露漏洞。
  - 2016年2月10日：Qualcomm确认漏洞。
  - 2016年4月29日：Qualcomm发布公开补丁。
  - 待定：Google部署补丁。

#### 感谢
- **SELinux**：允许访问如Qualcomm IPC等机制。
- **commit_creds**：始终可用。
- **kASLR**：未启用，使得攻击更容易。
- **Google Play**：提供QuadRooter Scanner工具。
- **Adam Donenfeld**：感谢其贡献。