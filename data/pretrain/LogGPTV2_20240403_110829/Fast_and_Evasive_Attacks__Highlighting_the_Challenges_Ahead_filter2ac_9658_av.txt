RIDES focuses on anomaly detection in categorical data, and consists of four
main processes:
1. modeling the short-term and long-term behavior of the incoming stream of
categorical data;
2. updating the models to adapt to drift;
3. measuring the similarity between the two models; and
4. producing an anomaly signal when the diﬀerence between the two models
exceeds a threshold.
The following is a description of RIDES according to the four elements listed
above. The implementation is intended to be as faithful as possible to the NIDES
algorithms described in [9].
4.1 Modeling the Incoming Stream of Categorical Data
RIDES receives data in the form of a symbol stream. In the NIDES terminol-
ogy this would be called a categorical measure. A measure is the data from a
single monitored object, for example, the sequence of system calls made by an
application, or the sequence of user commands typed into an xterm window.
While NIDES supports multiple measures, we focus on the single-measure case
for simplicity.
For each measure, RIDES maintains a model of the measure’s short-term and
long-term behaviors. The short-term model reﬂects symbols that have arrived
Anomaly Detector Performance Evaluation
111
over the period of the last few records, while the long-term model reﬂects be-
havior over the past few days. RIDES models categorical data in terms of the
relative frequencies of each symbol in the alphabet of any given data set.
The short-term model is a probability distribution contained in the vector
g, reﬂecting the behavior in an exponential sliding window. A user-deﬁned pa-
rameter, the short-term half-life Hst, denotes the decay rate of the exponential
sliding window. The short-term half-life is the number of records after which
a symbol’s eﬀect on g will be reduced by one half. The relative frequencies for
the symbols contained in the vector g are subject to exponential smoothing
that is applied to the vector during the updating process described in the next
section.
The long-term model is a probability distribution contained in the vector
f, which also reﬂects behavior in an exponential sliding window, but over a
much longer time scale. Another user-deﬁned parameter, the long-term-life Hlt,
denotes the decay rate of this exponential sliding window. The long-term half-life
is the number of days after which a symbol’s eﬀect on f will be reduced by one
half. The relative frequencies for the symbols that are contained in the vector
f are subject to exponential smoothing that is applied to the vector during the
updating process described in the next section.
4.2 Updating the Models
RIDES learns new behaviors and “forgets” old behaviors by a process of updating
its short-term and long-term models. The short-term model is updated with each
symbol presented to the detector from the input data stream. The long-term
model is updated at the end of a day.
The long-term model f is updated by exponentially aging the current long-
term model by 2−1/Hlt, and then adding in a vector (1− 2−1/Hlt)P where P is a
vector representing the probability distribution for symbol types observed over
the most recent day.
4.3 Measuring Similarity Between Short- and Long-Term Models
The ﬁrst step in comparing the short- and long-term models is to compute a
statistic called Q. The Q statistic represents the unnormalized diﬀerence between
the short- and long-term models, and is loosely based on the chi-squared formula.
Q is computed as follows. Each time the short-term distribution vector g is
updated after receiving a new symbol, Q is calculated according to the following
equation:
N(cid:2)
(gi − fi)2
Q =
i=1
Vi
(1)
where N is the alphabet size and Vi is the approximate variance of gi. In [9],
this variance Vi is reported as being fi(1 − fi)(1 − 2−1/Hst).
112
J.P. Hansen, K.M.C. Tan, and R.A. Maxion
4.4 Producing the Anomaly Signal
After computing the Q statistic, representing the unnormalized diﬀerence be-
tween the short- and long-term models, RIDES converts Q into a normalized
diﬀerence statistic called S. This is done by building an empirical Cumulative
Distribution Function (CDF) from observed Q values. The S statistic is then
obtained by the formula:
−1
HN (FQ(Q)), 4)
S = min(F
(2)
−1
where F
HN (x) is the inverse CDF of a half-normal distribution. Informally, the
S statistic can be thought of as the number of standard deviations from normal
behavior, where a value of 0 indicates that the short-term and long-term model
are identical, and a value of 4 is the maximum diﬀerence modeled.
NIDES also deﬁnes a top-level T 2 score that is deﬁned as the mean of the
squares of the S scores for each “measure.” In NIDES an alarm is produced when
T 2 falls above a threshold value. However, since we limit our scope to a single
measure, RIDES produces an alarm when S falls above a detection threshold.
4.5 Special Categories
In addition to categories for regular symbols, NIDES also has two special symbol
types [9,1,2] that we include in our implementation: rare and new.
– Rare – Symbols that are very infrequent can have an excessive impact on the
Q statistic. NIDES lumps all occurrences of these infrequent symbols into
a single category called “Rare.” The point at which symbols are considered
rare enough to be classiﬁed as a “Rare” symbol is controlled by a param-
eter MAXSUMRAREPROB [1,2]. After sorting all of the symbols by their
occurrence frequency, we mark symbols as rare starting with the least fre-
quent until the total probability sums to MAXSUMRAREPROB. We use a
MAXSUMRAREPROB of 5% in RIDES. This is within the suggested range
of 1% to 10% used in [1,2].
– New – When a foreign symbol arrives, there is no probability data for it in
the long-term model. This makes it diﬃcult to directly compare the short-
and long-term models in the presence of foreign symbols. To deal with this
case NIDES creates a “New” [9] category. This category collectively contains
the probability of seeing a foreign symbol. The “New” category probability
in the long-term model is computed from the total number of foreign symbols
seen in a day, divided by the total number of symbols for that day. In the
short-term model all foreign symbols are lumped together in the category
“New” and are treated exactly like any other category for the purposes of
computing the Q statistic.
5 Methodology
All of the experimental results shown in this paper are generated from a series of
basic experiments. A basic experiment consists of generating synthetic training
Anomaly Detector Performance Evaluation
113
and test data, and then running RIDES on this data for one ﬁxed set of parameter
values. This is performed in the following ﬁve steps:
1. Generate three sets of training data, using a diﬀerent random number seed
for each set. Three sets of data are required to allow RIDES to build both
the long-term proﬁle and the Q-statistic histogram.
2. Run RIDES on each of the training data sets sequentially. The history ﬁle
generated by each invocation is used as the input for the next invocation.
3. Generate the test data and the ground-truth data.
4. Invoke RIDES on the test data; generate an output (alarm or no-alarm)
for each symbol encountered; compare this output to ground-truth data to
produce a result in terms of hit, miss, false alarm or correct rejection.
5. Record in a database the number of hits, misses, false alarms and correct
rejections for the parameter settings that yielded the aforementioned result.
5.1 Generation of Synthetic Data
The data generated for the experiments is in the form of a symbol stream rep-
resenting system calls as they might be collected using a tool such as strace or
some other monitor in the operating system. All generated data sets are com-
prised of a sequence of 100,000 symbols. It is assumed that the monitored stream
is representative of the composite activity on the system, and can include sys-
tem calls made by both normal and (potentially) intruder tasks. The parameters
that aﬀect data synthesis (see Table 1) will be discussed in detail in the following
sections. It is important to note that we have focused on varying only a subset
of all the possible parameters that can be used to characterize a data set. This
is because the number of experiments needed to explore the space increases ex-
ponentially with the number of parameters varied. As a consequence, we have
concentrated on the parameters that we feel have the greatest impact on the
performance of RIDES.
Table 1. Parameters for generating data
Name Description
N
σ
λa
B
Background alphabet size
Distribution standard deviation
Saturation of anomalous symbols
Experiment block size
Data Generation. The training and test data for our experiments were gener-
ated by randomly drawing symbols from an alphabet of N = 250 symbol types.
The symbol types are numbered from 0 to 249 in the order of the most frequently
occurring symbol to the least frequently occurring symbol. An alphabet size of
250 was chosen because it is typical of the number of system calls supported in
typical Unix-like operating systems.
114
J.P. Hansen, K.M.C. Tan, and R.A. Maxion
The frequency with which a symbol occurs in a stream of data is determined
by the “half-bell shaped” distribution curve shown in Figure 1. Each point on the
curve shows the probability that a generated symbol will be of the type shown on
the x-axis. The shape of the curve is controlled by the standard deviation, which
determines how rapidly the probabilities of the symbol types will decrease as we
move from 0 to 249 on the x-axis. When the standard deviation is small, the
symbol-type probabilities will start high, rapidly decaying to near zero. When the
standard deviation is large, the symbol-type probabilities will be nearly identical
(approximately 1
N ) with only a small diﬀerence in probability between the most
likely and least likely symbol types. In our experiments the standard deviation is
σ = 0.15 to mimic the behavior typically exhibited by many systems in which a
small number of system calls is frequently used, while many other calls are used
only rarely. (Note that for clarity of exposition the term “data distribution” will
be used to refer to the symbol-type distribution shown in Figure 1.)
The probability px of generating symbol-type x is deﬁned in terms of N (the
alphabet-size, numbered from 0 to N − 1) and σ (the standard deviation) as:
(3)
(4)
N−1(cid:1)
px = qx
qi
i=0
where qi is the unnormalized probability:
√
2πσ
qx = e
−(x/N)2/(2σ)2
The symbols generated in the sequence are independent and identically dis-
tributed (i.i.d.). The formula for unnormalized probability (4) is taken from the
probability density function (pdf) of a normal distribution. To compute the prob-
ability for each of the symbol types, we divided the unnormalized probability
by the sum of all the normalized probabilities. This is done to ensure that the
probabilities for the symbol types, px, sum to one.
The dashed vertical lines in Figure 1 indicate the speciﬁc regions, from 0
through 249, from which we draw symbols identiﬁed as common, uncommon,
rare and foreign. Common symbols occur frequently in the training and test
data, whereas foreign symbols do not appear at all in the training data (they
occur as foreign-symbol anomalies in the test data). The two seemingly similar
categories, uncommon and rare, were created in accordance with the design
of the NIDES detector. As described in [1,2], NIDES sets a threshold on the
frequencies of symbols (the parameter “MAXSUMRAREPROB”). Intuitively,
the symbols whose frequencies fall below this threshold are described as “rare.”
To evaluate the detector, we deﬁned the class of rare symbols to represent the
kind of rare symbols that NIDES processes. Deﬁning these rare symbols however,
brought consideration of the symbols occurring in the border region between
rare and common. These “border” symbols were not rare enough to fall into
the detector’s deﬁnition of rare, but neither did they occur frequently enough
to be called common symbols. To accommodate this situation, the “uncommon”
Anomaly Detector Performance Evaluation
115
Uncommon
Foreign
Rare
0
50
100
150
200
250
300
Symbol Type
y
t
i
l
i
b
a
b
o
r
P
e
p
y
T
l
o
b
m
y
S
2.5%
2.0%
1.5%
1.0%
0.5%
0.0%
Fig. 1. Symbol-type distribution
category of symbols was created. Uncommon, rare and foreign symbols are used
as anomalies in the generation of test data. A more detailed description of these
classes can be found in the subsequent section on test-data generation.
Training-Data Generation. Training data is generated using the data distri-
bution described above. First, a sample size for the training data is selected (in
our experiments we chose the sample sizes to be 100,000). Then, a uniformly-
distributed, ﬂoating-point number from 0 to 1 is randomly selected to generate
each element of the given sample size. These numbers are used to “look up”
the appropriate symbol type in the data distribution shown in Figure 1. The
training data are therefore composed of a mixture of common, uncommon and
rare symbols, where each symbol type occurs with the frequency determined by
the data distribution.
Test-Data Generation. Test data are generated in alternating blocks of “nor-
mal” and “anomalous” data. The alternating blocks are intended to test the
ability of the detector to tolerate transitions between normal and anomalous
regions. The “normal” blocks are generated in exactly the same manner as the
training data, using the same data distribution. The parameter B speciﬁes the
number of symbols in each of the alternating normal and anomalous blocks. The
smaller the block size B, the greater the number of transitions that will occur in
a generated data set of a constant number of symbols, in this case 100,000. In
general, we expect that a high number of transitions will have a negative impact
on performance, because detection is always harder in the transition from one
type of block to another (as it would be in any window-based detector). The
“anomalous” blocks are generated by mixing symbols from the data distribution
with speciﬁc quantities (determined by the saturation parameter, λa, deﬁned
below) of symbols generated from one of the following three anomaly types:
– Foreign – Foreign anomalies are comprised of 10 equally-likely symbol types
that are not part of the 250 symbols in the alphabet of the data distribution.
The number 10 was chosen arbitrarily, and is not expected to have any
116
J.P. Hansen, K.M.C. Tan, and R.A. Maxion
eﬀect on the results, because RIDES groups all foreign symbols together
without distinguishing among them. The range of foreign symbols is shown
in Figure 1 between the rightmost pair of vertical dashed lines.
– Rare – Rare anomalies include the symbol types found at the tail of the
data distribution. Rare anomalies are selected in the following way:
1. A threshold deﬁning “rare” is ﬁrst selected. This threshold is simply a
value between 0 and 1, and is referred to as the “maximum sum of rare
probabilities.” Note that this rare threshold is diﬀerent from the rare
threshold “MAXSUMRAREPROB” used by the detector.
2. The symbol type with the lowest probability in the data distribution
is selected as the ﬁrst rare symbol type; then the symbol type with
the next lowest probability is selected, and so forth. The probabilities
associated with these symbols are summed up over the course of this
selection process. Thus the probability of the “rarest” symbol is added
to the probability of the next “rarest” symbol and so on.
3. When the addition of a symbol causes the sum of the probabilities to
exceed the rare threshold (see item 1 immediately above) we stop adding