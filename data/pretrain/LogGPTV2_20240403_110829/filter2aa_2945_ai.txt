wondering why on earth the designers of a neat language such as C# should
allow a feature such as var to creep in. After all, it sounds like an excuse for
extreme laziness on the part of programmers and can make it more difficult to
understand what a program is doing or track down bugs (and it can even
easily introduce new bugs into your code). However, trust me that var has a
very valid place in C#, as you will see when you work through many of the
following chapters. However, for the time being, we will stick to using
explicitly typed variables except for when implicit typing becomes a
necessity.
Summary
In this chapter, you saw how to create and use variables and learned about
some of the common data types available for variables in C#. You also
learned about identifiers. Also, you used a number of operators to build
expressions, and you learned how the precedence and associativity of
operators determine how expressions are evaluated.
Download from finelybook PI:EMAIL
121
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 3.
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Declare a
variable
Write the name of the data type, followed by the name
of the variable, followed by a semicolon. For example:
int outcome;
Declare a
variable and give
it an initial value
Write the name of the data type, followed by the name
of the variable, followed by the assignment operator and
the initial value. Finish with a semicolon. For example:
int outcome = 99;
Change the value
of a variable
Write the name of the variable on the left, followed by
the assignment operator, followed by the expression
calculating the new value, followed by a semicolon. For
example:
outcome = 42;
Generate a string
representation of
the value in a
variable
Call the ToString method of the variable. For example:
int intVar = 42; string stringVar =
intVar.ToString();
Convert a string
to an int
Call the System.Int32.Parse method. For example:
string stringVar = "42"; int intVar
=  System.Int32.Parse(stringVar);
Override the
precedence of an
operator
Use parentheses in the expression to force the order of
evaluation. For example:
Download from finelybook PI:EMAIL
122
(3 + 4) * 5
Assign the same
value to several
variables
Use an assignment statement that lists all the variables.
For example:
myInt4 = myInt3 = myInt2 = myInt = 10;
Increment or
decrement a
variable
Use the ++ or -- operator. For example:
count++;
Download from finelybook PI:EMAIL
123
CHAPTER 3
Writing methods and applying
scope
After completing this chapter, you will be able to:
Declare and call methods.
Pass information to a method.
Return information from a method.
Define local and class scope.
Use the integrated debugger to step into and out of methods as they
run.
In Chapter 2, “Working with variables, operators, and expressions,” you
learned how to declare variables, how to create expressions using operators,
and how precedence and associativity control the way in which expressions
containing multiple operators are evaluated. In this chapter, you’ll learn about
methods. You’ll see how to declare and call methods, how to use arguments
and parameters to pass information to a method, and how to return
information from a method by using a return statement. You’ll also see how
to step into and out of methods by using the Microsoft Visual Studio 2017
integrated debugger. This information is useful when you need to trace the
execution of your methods because they do not work quite as you expect.
Finally, you’ll learn how to declare methods that take optional parameters
and how to invoke methods by using named arguments.
Download from finelybook PI:EMAIL
124
Creating methods
A method is a named sequence of statements. If you have previously
programmed by using a language such as C, C++, or Microsoft Visual Basic,
you will see that a method is similar to a function or a subroutine. A method
has a name and a body. The method name should be a meaningful identifier
that indicates the overall purpose of the method (calculateIncomeTax, for
example). The method body contains the actual statements to be run when the
method is called. Additionally, methods can be given some data for
processing and can return information, which is usually the result of the
processing. Methods are a fundamental and powerful mechanism.
Declaring a method
The syntax for declaring a C# method is as follows:
Click here to view code image
returnType methodName ( parameterList )
{
    // method body statements go here
}
The following is a description of the elements that make up a declaration:
The returnType is the name of a type and specifies the kind of
information the method returns as a result of its processing. This can be
any type, such as int or string. If you’re writing a method that does not
return a value, you must use the keyword void in place of the return
type.
The methodName is the name used to call the method. Method names
follow the same identifier rules as variable names. For example,
addValues is a valid method name, whereas add$Values is not. For
now, you should follow the camelCase convention for method names;
for example, displayCustomer.
The parameterList is optional and describes the types and names of the
information that you can pass into the method for it to process. You
write the parameters between opening and closing parentheses, ( ), as
though you’re declaring variables, with the name of the type followed
by the name of the parameter. If the method you’re writing has two or
Download from finelybook PI:EMAIL
125
more parameters, you must separate them with commas.
The method body statements are the lines of code that are run when the
method is called. They are enclosed between opening and closing
braces, { }.
Important If you program in C, C++, and Visual Basic, you should
note that C# does not support global methods. You must write all your
methods inside a class; otherwise, your code will not compile.
Here’s the definition of a method called addValues that returns an int
result and has two int parameters, leftHandSide and rightHandSide:
Click here to view code image
int addValues(int leftHandSide, int rightHandSide)
{
    // ...
    // method body statements go here
    // ...
}
Note You must explicitly specify the types of any parameters and the
return type of a method. You cannot use the var keyword.
Here’s the definition of a method called showResult that does not return a
value and has a single int parameter called answer:
Click here to view code image
void showResult(int answer)
{
    // ...
}
Notice the use of the keyword void to indicate that the method does not
Download from finelybook PI:EMAIL
126
return anything.
Important If you’re familiar with Visual Basic, notice that C# does not
use different keywords to distinguish between a method that returns a
value (a function) and a method that does not return a value (a
procedure or subroutine). You must always specify either a return type
or void.
Returning data from a method
If you want a method to return information (that is, its return type is not
void), you must include a return statement at the end of the processing in the
method body. A return statement consists of the keyword return followed by
an expression that specifies the returned value and a semicolon. The type of
the expression must be the same as the type specified by the method
declaration. For example, if a method returns an int, the return statement
must return an int; otherwise, your program will not compile. Here is an
example of a method with a return statement:
Click here to view code image
int addValues(int leftHandSide, int rightHandSide)
{
    // ...
    return leftHandSide + rightHandSide;
}
The return statement is usually positioned at the end of the method
because it causes the method to finish, and control returns to the statement
that called the method, as described later in this chapter. Any statements that
occur after the return statement are not executed (although the compiler
warns you about this problem if you place statements after the return
statement).
If you don’t want your method to return information (that is, its return
type is void), you can use a variation of the return statement to cause an
immediate exit from the method. You write the keyword return and follow it
Download from finelybook PI:EMAIL
127
immediately with a semicolon. For example:
Click here to view code image
void showResult(int answer)
{
    // display the answer
    Console.WriteLine($"The answer is ");
    return;
}
If your method does not return anything, you can also omit the return
statement because the method finishes automatically when execution arrives
at the closing brace at the end of the method. Although this practice is
common, it is not always considered good style.
Using expression-bodied methods
Some methods can be very simple, performing a single task or returning the
results of a calculation without involving any additional logic. C# supports a
simplified form for methods that comprise a single expression. These
methods can still take parameters and return values, and they operate in the
same way as the methods that you have seen so far. The following code
examples show simplified versions of the addValues and showResult methods
written as expression-bodied methods:
Click here to view code image
int addValues(int leftHandSide, int rightHandSide) => leftHandSide +
rightHandSide;
void showResult(int answer) => Console.WriteLine($"The answer is ");
The main differences are the use of the => operator to reference the
expression that forms the body of the method and the absence of a return
statement. The value of the expression is used as the return value; if the
expression does not return a value, then the method is void.
There is actually no difference in functionality between using an ordinary
method and an expression-bodied method; an expression-bodied method is
merely a syntactic convenience. However, you will see examples later in the
book where expression-bodied methods can clarify a program by removing
lots of extraneous { and } characters, making the code easier to read.
In the following exercise, you will examine another version of the
Download from finelybook PI:EMAIL
128
MathsOperators project from Chapter 2. This version has been improved by
the careful use of some small methods. Dividing code in this way helps to
make it easier to understand and more maintainable.
Examine method definitions
1. Start Visual Studio 2017, if it is not already running.
2. Open the Methods solution, which is in the \Microsoft
Press\VCSBS\Chapter 3\Methods folder in your Documents folder.
3. On the Debug menu, click Start Debugging.
4. Visual Studio 2017 builds and runs the application. It should look the
same as the application from Chapter 2. Refamiliarize yourself with the
application and how it works and then return to Visual Studio. On the
Debug menu, click Stop Debugging.
5. Display the code for MainPage.xaml.cs in the Code and Text Editor
window (in Solution Explorer, expand the MainPage.xaml file and then
double-click MainPage.xaml.cs).
6. In the Code and Text Editor window, locate the addValues method,
which looks like this:
Click here to view code image
private int addValues(int leftHandSide, int rightHandSide)
{
    expression.Text = $" + ";
    return leftHandSide + rightHandSide;
}
Note For the moment, don’t worry about the private keyword at
the start of the definition of this method; you will learn what this
keyword means in Chapter 7, “Creating and managing classes and
objects.”
The addValues method contains two statements. The first statement
Download from finelybook PI:EMAIL
129
displays the calculation being performed in the expression box on the
form.
The second statement uses the int version of the + operator to add the
values of the leftHandSide and rightHandSide int variables, and then
returns the result of this operation. Remember that adding two int values
together creates another int value, so the return type of the addValues
method is int.
If you look at the methods subtractValues, multiplyValues, divideValues,
and remainderValues, you will see that they follow a similar pattern.
7. In the Code and Text Editor window, locate the showResult method,
which looks like this:
Click here to view code image
private void showResult(int answer) =>
result.Text = answer.ToString();
This is an expression-bodied method that displays a string representation
of the answer parameter in the result box. It does not return a value, so
the type of this method is void.
Tip There is no minimum length for a method. If a method helps to
avoid repetition and makes your program easier to understand, the
method is useful regardless of how small it is.
There is also no maximum length for a method, but usually, you
want to keep your method code small enough to get the job done. If
your method is more than one screen in length, consider breaking it into
smaller methods for readability.
Calling methods
Methods exist to be called! You call a method by name to ask it to perform
Download from finelybook PI:EMAIL
130
its task. If the method requires information (as specified by its parameters),
you must supply the information requested. If the method returns information
(as specified by its return type), you should arrange to capture this
information somehow.
Specifying the method call syntax
The syntax of a C# method call is as follows:
Click here to view code image
result = methodName ( argumentList )
The following is a description of the elements that make up a method call:
The methodName must exactly match the name of the method you’re
calling. Remember, C# is a case-sensitive language.
The result = clause is optional. If specified, the variable identified by
result contains the value returned by the method. If the method is void
(that is, it does not return a value), you must omit the result = clause of
the statement. If you don’t specify the result = clause and the method
does return a value, the method runs, but the return value is discarded.
The argumentList supplies the information that the method accepts.
You must supply an argument for each parameter, and the value of
each argument must be compatible with the type of its corresponding
parameter. If the method you’re calling has two or more parameters,
you must separate the arguments with commas.
Important You must include the parentheses in every method call,
even when calling a method that has no arguments.
To clarify these points, take a look at the addValues method again:
Click here to view code image
int addValues(int leftHandSide, int rightHandSide)
{
Download from finelybook PI:EMAIL
131
    // ...
}
The addValues method has two int parameters, so you must call it with
two comma-separated int arguments, such as this:
addValues(39, 3); // okay
You can also replace the literal values 39 and 3 with the names of int
variables. The values in those variables are then passed to the method as its
arguments, like this:
int arg1 = 99;
int arg2 = 1;
addValues(arg1, arg2);
If you try to call addValues in some other way, you will probably not
succeed for the reasons described in the following examples:
Click here to view code image
addValues;            // compile-time error, no parentheses
addValues();          // compile-time error, not enough arguments
addValues(39);        // compile-time error, not enough arguments
addValues("39", "3"); // compile-time error, wrong types for
arguments
The addValues method returns an int value. You can use this int value
wherever an int value can be used. Consider these examples:
Click here to view code image
int result = addValues(39, 3);    // on right-hand side of an
assignment
showResult(addValues(39, 3));     // as argument to another method
call
The following exercise continues with the Methods application. This time,
you will examine some method calls.
Examine method calls
1. Return to the Methods project. (This project is already open in Visual
Studio 2017 if you’re continuing from the previous exercise. If you are
not, open it from the \Microsoft Press\ VCSBS\Chapter 3\Methods
folder in your Documents folder.)
2. Display the code for MainPage.xaml.cs in the Code and Text Editor
Download from finelybook PI:EMAIL
132
window.
3. Locate the calculateClick method, and look at the first two statements of
this method after the try statement and opening brace. (You will learn
about try statements in Chapter 6, “Managing errors and exceptions.”)
These statements look like this:
Click here to view code image
int leftHandSide = System.Int32.Parse(lhsOperand.Text);
int rightHandSide = System.Int32.Parse(rhsOperand.Text);
These two statements declare two int variables, called leftHandSide and
rightHandSide. Notice the way in which the variables are initialized. In
both cases, the Parse method of the System.Int32 struct is called.
(System is a namespace, and Int32 is the name of the struct in this
namespace. You will learn about structs in Chapter 9, “Creating value
types with enumerations and structures.”) You have seen this method
before; it takes a single string parameter and converts it to an int value.
These two lines of code take what the user has typed into the
lhsOperand and rhsOperand text box controls on the form and converts
it to int values.
4. Look at the fourth statement in the calculateClick method (after the if
statement and another opening brace):
Click here to view code image
calculatedValue = addValues(leftHandSide,
rightHandSide);
This statement calls the addValues method, passing the values of the
leftHandSide and rightHandSide variables as its arguments. The value
returned by the addValues method is stored in the calculatedValue
variable.
5. Look at the next statement:
showResult(calculatedValue);
This statement calls the showResult method passing the value in the
calculatedValue variable as its argument. The showResult method does
Download from finelybook PI:EMAIL
133
not return a value.
6. In the Code and Text Editor window, find the showResult method you
looked at earlier.
The only statement of this method is this:
Click here to view code image
result.Text = answer.ToString();
Notice that the ToString method call uses parentheses even though there
are no arguments.
Tip You can call methods belonging to other objects by prefixing the
method with the name of the object. In the preceding example, the
expression answer.ToString() calls the method named ToString
belonging to the object called answer.
Returning multiple values from a method
There may be occasions when you want to return more than one value from a
method. For example, in the Methods project, you might want to combine the
effects of the divideValues and remainderValues operations into a single
method that returns the results of dividing the two operands together with the
remainder. You can achieve this by returning a tuple.
A tuple is simply a small collection of values (strictly speaking, a tuple
contains two values, but C# tuples can comprise bigger sets than this). You
indicate that a method returns a tuple by specifying a list of types as part of
the method definition; one type for each value returned. The return statement
in the method returns a list of values, as shown by the following example:
Click here to view code image
(int, int) returnMultipleValues(...)
{
Download from finelybook PI:EMAIL
134
    int val1;
    int val2;
    ... // Calculate values for val1 and val2
    return(val1, val2);
}
When you call the method, you provide an equivalent list of variables for
holding the results:
Click here to view code image
int retVal1, retVal2;
(retVal1, retVal2) = returnMultipleValues(...);
The following exercise illustrates how to create and call a method that
returns a tuple.