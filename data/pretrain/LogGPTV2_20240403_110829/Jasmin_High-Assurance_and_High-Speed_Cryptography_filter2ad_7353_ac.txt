z3 = set_int(1);
x3 = xr;
prevbit = 0;
j = 62;
i = 3;
while (i >=s 0) {
is = i; tmp1 = [sp + 8 * i]; s = tmp1;
while (j >=s 0) {
js = j; tmp2 = s;
bit = tmp2 >> j;
bit = bit & 1;
swap = prevbit;
swap ^= bit;
prevbit = bit;
x2, z2, x3, z3 = cswap(x2, z2, x3, z3, swap);
x2, z2, x3, z3 = ladderstep(x1, x2, z2, x3, z3);
j = js; j -= 1;
}
j = 63; i = is; i -= 1;
}
return x2, z2;
}
programmer would unroll such a loop by hand using error-prone
“copy-and-paste” (or write the code in C).
3.2 Language specification
This paragraph outlines the syntax of the Jasmin language. A formal
description using BNF notation is available as Appendix A.
Types. Jasmin features a simple type system, including types
bi and bi[n] for i-bit values and for n-dimensional arrays of i-bit
values, with i ∈ {1, 8, 16, 32, 64} and n ∈ N, and int for unbounded
integers. Unbounded integers are used only for compile-time ex-
pressions. The type b1 is used to represent booleans. The choice of
the type system ensures that Jasmin values match the machine in-
terpretation: types only distinguish between sizes, whereas signed
and unsigned interpretations are associated with the semantics
of operators. This is visible in the condition of the while loop in
Figure 3.
Storage types. Storage types are used by the compiler to fix how
values are stored in memory. Storage types are: store in stack stack,
store in register reg, resolve at compile-time inline. Integers are re-
solved at compile-time by default. Storage types are used in variable
and function declarations; see Figure 3. For instance, the declaration
reg bool cf introduces a boolean variable cf that will be stored in a
register. The type of mladder indicates that the function will read
and return from/to the stack two b64 arrays of size 4.
Expressions. Expressions are built from variables using constants,
operators, accessors for arrays and memory, casts from integers to
b64, and conditionals. Operators include integer constants, arith-
metic (+,−,∗, /), comparison (, ≤, ≥, =), and logical (∧,∨,¬)
operators and a rich set of generic and platform-specific assembly-
level operations: conditional move, signed/unsigned addition, add
with carry, exact/truncated multiplication, increment/decrement,
shifts, etc. Operators have a type which reflects their effect on flags;
e.g. the type of shift operators is b64×b64 → b64×b1×b1×b1×b1×b1,
where the five booleans in the return type correspond to the flags
modified by the instruction.5 Syntactic sugar is used to offer a sim-
plified syntax for common cases such as when only the carry flag
is used at the operator output. Memory accesses are of the form
[x + e], where x is variable of type b64 representing the pointer and
e is an expression of type b64 representing the offset. Array accesses
are of the form x[e], where x is a variable and e is an expression of
type b64. A simple type system is used to ensure that expressions
are well-typed.
Statements. Statements of the language are built from assign-
ments, function calls, conditionals, for and (some mild general-
ization of) while loops, and the usual sequencing of statement “;”.
Assignments are of one of the following form: d = e, or d1, . . . , dk =
op(e1, . . . , eℓ ), where d, d1, ..., dk are destinations and e, e1, . . . , eℓ
are expressions. A destination is either a variable x, an array desti-
nation x[e], a memory destination [x + e] or an underscore _ when
the result can be discarded. Note that operator calls can have multi-
ple destinations, according to their type. Function calls are also of
the form d1, . . . , dk = f (e1, . . . , eℓ ), where the number and nature
of arguments and destinations is determined by the type of the func-
tion. The for loops have a body, a range of the form (e1..e2) and an
iteration flag indicating if the loop ranges over e1, e1 + 1, . . . , e2 or
e1, e1−1, . . . , e2. More interestingly, the syntax of the while loops is
of the form while c1 (e) c2, where c1 is a statement that is executed
before testing the expression e, and c2 is the loop body. This ex-
tended syntax is useful to capture different control-flow structures,
including do-while and while-do loops. It also enables the use of
arbitrary programs to express the loop guards. Statements must be
well-typed; for instance, assigned expressions must match the type
of their destination and loop guards must be boolean.
Programs. Programs p are mappings from function names f
to function declarations p( f ), comprising a command p( f )c and
two lists of variables p( f )param and p( f )res describing, from the
callee point of view, the variables in which the arguments will be
stored and from which the return values will be fetched. Programs
must be well-typed, following a typing discipline similar to that of
statements.
Each function declaration is annotated with either export or in-
line (the default). Only the first ones are compiled down to assembly.
Calls to the second ones are meant to be fully inlined in the caller’s
body; in that sense, these functions are a zero-cost abstraction
provided to the programmer to structure the code.
5We currently do not model some infrequently used flags such as AF since they are
not used in our examples.
Session H4:  Formal VerificationCCS’17, October 30-November 3, 2017, Dallas, TX, USA18123.3 Semantics
The behavior of Jasmin programs is given by a big-step operational
semantics relating initial and final states. The semantics defines a
partial function: for every initial state, there is at most one final
state, reflecting that Jasmin programs have a deterministic behavior.
Determinism of Jasmin programs is essential for predictability, and
considerably simplifies the proof of correctness of the compiler, as
discussed in Section 5. The semantics is fully formalized in the Coq
proof assistant and is used as the basis for justifying the correctness
of the compiler and of the source-level analyses (formally using the
Coq proof assistant in the first case, and on paper in the second
case). The semantics is defined in the context of a program, which
is used to resolve function calls. To keep our notation readable, this
ambient program is only shown when defining the semantics of
function calls, which must resolve the called function.
Values. Booleans are interpreted by the set {0, 1,⊥}, where ⊥
is used to model the behavior of some operations, e.g. shifts, on
flags. Other types have the intended semantics. For instance, the
type bi is interpreted as {0, 1}i, and the type bi[n] is interpreted
as {0, 1}i[n], for i ∈ {8, 16, 32, 64}. The set of values is obtained by
taking the union of the interpretation of types.
States. States are pairs (m, ρ) consisting of a global memory m,
shared between all functions, which maps addresses to bi values,
and a local environment ρ, specific to each function, mapping vari-
ables to values.
The environment is a functional map which associates to a vari-
able (with a given type and identifier) a value (or an error). We use
the usual notations ·[·] for map access and ·[· := ·] for map update.
Memory. We use an axiomatic type for memories. This type is
equipped with operations for reading and writing, which take a size
i and an address of type b64, and read or store a bi value (possibly
returning errors). We use ·[·] for reading and ·[· ← ·] for writing:
m[e]i = v means that in memory m, reading a value of type bi from
address e successfully returns the value v; m[e ← v]i = m′ means
that in memory m, writing the value v with type bi successfully
results in the memory m′. In both cases, the optional subscript
corresponds to the size of the value in memory (default is 64).
Which addresses can or cannot be used by a Jasmin program
is expressed through a predicate, validi (m, p), that states that in
memory m, pointer p can be safely used for accesses of size i. This
predicate is under-specified; it is supposed to capture various archi-
tectural and system-specific constraints such as alignment require-
ments. The memory thus enjoys the following laws, which express
the usual properties of memories:
• valid addresses can be read:
(∃v, m[p]i = v) ⇐⇒ validi (m, p);
• valid addresses can be written:
′
(∃m
, m[p ← v]i = m
′
) ⇐⇒ validi (m, p);
• a written value can be read back:
′ =⇒ m
m[p ← v]i = m
′[p]i = v;
• a memory write leaves the remainder of the memory un-
changed:
m[p ← v]i = m
′ =⇒
disjoint(p, i, p
′
, i
′
) =⇒ m
′[p
′]i′ = m[p
′]i′
where disjoint expresses that two address ranges do not
overlap.
In addition to reading and writing, the Jasmin memory features a
restricted form of dynamic allocation to model the life span of local
variables: fresh memory is allocated on function entry, and released
on function exit. This is modeled by means of two operations:
alloc-stack(m, n) allocates a region of size n in memory m and
free-stack(m, n) frees the top-most region in memory m, of size n.
Such stack-allocated memory regions are handled through their
base pointer. This stack is specified through three intermediate
operators:
region of memory m;
• top-stack(m) returns the base pointer of the top-most stack
• caller(m, p) returns, if any, the previous region, in the stack,
• frame-size(m, p) returns the size of the memory region
starting at p, or nothing if it is not the base pointer of such
a region in memory m.
of region starting at p in memory m;
Writing to memory leaves these three properties unchanged;
allocating and freeing update these properties to maintain the stack
structure. The frame-size property enables us to implement alloca-
tion and freeing through addition and subtraction on a global stack
pointer, without explicitly building a linked-list of frames.
Finally, since the compiler needs to emit valid memory accesses,
the memory model features an operation is-align(n, i) that tells
whether a pointer with offset n is correctly aligned for memory
access of size bi. The axiomatization of this operation mandates
that, for stack memory regions, deciding whether a pointer is valid
amounts to checking whether its relative offset (within this region)
is aligned and in bounds.
Expressions. The semantics of expressions is defined in the usual
way, and is parametrized by a state s = (m, ρ) as described above.
The evaluation of the expression e in the state s is noted(cid:74)e(cid:75)(s), and
is defined in the usual way.
Even though we denote the evaluation of expressions as a func-
tion, their semantics is partial: ill-typed expressions never evaluate;
out-of-bounds array accesses are not defined, as well as invalid
memory accesses.
Destinations. We will use the s[· := ·] notation for storing values
in both the memory and environment, depending on the destina-
tion. Most of the rules are standard; the ones used for writing into
memory and arrays are described in Figure 4.
Statements. Formally, the semantics is captured by judgments of
the form c, s ⇓ s′, stating that executing command c on initial state
s terminates in final state s′. The rules, which are mostly standard,
to the exception of the rules for functional arrays and procedure
calls, are described in Figure 4. Sequences are defined in a standard
way, with skip the empty command.
Session H4:  Formal VerificationCCS’17, October 30-November 3, 2017, Dallas, TX, USA1813Figure 4: Semantics of the Jasmin language
(m, ρ)[[x + e] := v] = (m[ρ[x] +(cid:74)e(cid:75)(m, ρ) ← v], ρ)
(m, ρ)[x[e] := v] = (m, ρ[x := ρ[x][(cid:74)e(cid:75)(m, ρ) := v])
d = e, s ⇓ s[d :=(cid:74)e(cid:75)(s)]
op((cid:74)e1(cid:75)(s), . . . ,(cid:74)eℓ(cid:75)(s)) = (v
′
′
k )
1, . . . , v
d1, . . . , dk = op(e1, . . . , eℓ ), s ⇓ s[dj := v
′
i, s ⇓ s1
c, s1 ⇓ s
′
j]
′
skip, s ⇓ s
(cid:74)e(cid:75)(s) = true
c1, s ⇓ s
if (e) then c1 else c2, s ⇓ s
(cid:74)e(cid:75)(s2) = true
c1, s1 ⇓ s2
(cid:74)e(cid:75)(s2) = false
c1, s1 ⇓ s2
while c1 (e) c2, s1 ⇓ s2
′
′
i; c, s ⇓ s
(cid:74)e(cid:75)(s) = false
c2, s ⇓ s
′
′
if (e) then c1 else c2, s ⇓ s
c2, s2 ⇓ s3 while c1 (e) c2, s3 ⇓ s4
c, s ⇓i∈range((cid:74)elo(cid:75)(s ),(cid:74)ehi(cid:75)(s ))
for(i = elo to ehi)c, s ⇓ s
for
′
′
s
while c1 (e) c2, s1 ⇓ s4
s[i := w], c ⇓ s2
c, s2 ⇓i∈ws
for
′
s
c, s ⇓i∈[]
for
s
′
s
c, s ⇓i∈w::ws
f , va, m ⇓p
for
′
call vr , m
, ρ[r := vr ])
′
p( f )c , (m,∅[p( f )param := va]) ⇓ (m
, ρ
′
), m
a, (m, ρ) ⇓ va
r = f (a), (m, ρ) ⇓ (m
call(cid:74)p( f )res(cid:75)(m
f , va, m ⇓p
, ρ
′
′
′
′
)
Loops use two blocks of instructions, allowing to handle both
do-while and while-do constructions at the same time: first the first
block is executed, then the condition is evaluated: if it’s false we
leave the loop, otherwise we execute the second block and then
repeat from the first block.
The semantics of for loops use another judgement ⇓for, where
s′ describes the execution of the command c from the
c, s ⇓i∈ℓ
for
state s to the state s′ with the i integer variable taking all the values
in ℓ. If the list ℓ is the empty list [], then the resulting state is the
original state s. Otherwise, if the list ℓ has a head w and tail ws, the