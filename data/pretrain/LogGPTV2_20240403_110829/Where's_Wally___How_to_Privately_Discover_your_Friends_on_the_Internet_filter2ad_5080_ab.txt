network. Beginning with a straw-man design, below, we describe
the basic functionalities of PROUD.
To bootstrap PROUD, we assume that (i) each user is able to
create and store locally her personal asymmetric key-pair and that
(ii) there is an out-of-band channel, through which (similar to other
systems in the literature [2, 4, 14, 36]) users can initially exchange in-
formation and public keys with their friends. The above asymmetric
key-pair is stored encrypted on the user’s device using symmetric
cryptography and a password as key that the user can memorize.
A. User registration. Every user of our system is able to follow
other users without any further requirements. In order to have
followers of her own, a user, through PROUD, acquires a DNS zone
in a domain4,5. This zone is maintained by the authoritative name-
server, which is responsible for adding, updating, and publishing
information about this particular zone. Every zone includes multi-
ple records. Each record has an index token (a subdomain) and a
payload. In PROUD, every pair of friends (i.e., followee and follower)
has its own record (namely friendship record), which includes as
payload the current address of the followee.
B. New friendship. In every real-time MIM application (e.g.,
Viber, WhatsApp), whenever Bob wants to follow Alice, he just
chooses her from his contact-list, and the application sends her
a follow request. In PROUD, as soon as Alice accepts the follow
request, she creates a new friendship record in her authoritative
server (step 1 in Figure 1). This new friendship record represents
their directional friendship and contains the concatenated UIDs of
both Alice and Bob as an index token they both know, along with
her current network address. Hence, assuming that Alice’s DNS
zone is in the example.com domain and her current IP address is
IPA =>10.1.0.52, the mapping of the created friendship record
will be the following:
key : ⟨U I DB |U I DA⟩.example .com
value : 10.1.0.52
2Bidirectional friendships are implemented in a similar way.
3Of course, in practice, all parties participate in both registration and query
functions, while at the same time they have multiple followees and followers.
4The user does not need to register a new domain: we utilize free services (e.g.,
https://pointhq.com/), which provide DNS hosting and DNS zones.
5User’s domain is transmitted together with the public key during bootstrapping.
Figure 1: High level overview of PROUD. Alice place her friend-
ship records to an authoritative server, while Bob assigns his local
resolver to retrieve her friendship record from the DNS network.
As we can see, the friendship record, in this first straw-man pro-
posal, consists of two fields: (i) the index token, which contains
the concatenated UIDs of both follower and followee, and (ii) the
current IP address of the followee.
Of course Alice needs to ensure Bob that this particular friend-
ship record is created by her, therefore before uploading her new
friendship record to the authoritative server, she signs her friend-
ship record’s payload using her private key. In this way, she prevents
adversaries from impersonating her by creating rogue friendship
records, tricking Bob to miss-follow a malicious user instead of her.
Apart from providing authenticity to Bob, Alice also needs to
ensure that the information destined for Bob will be accessible
only by him. Thus, whenever she creates or updates a friendship
record, apart from signing the payload, she also encrypts it with
a fresh symmetric key that only Bob can access. This way, she
can guarantee the confidentiality of the query response, allowing
only Bob to decrypt the friendship record’s payload, and learn her
current network address. As a consequence, up to this point, the
friendship record of Alice and Bob is the following:
key : ⟨U I DB |U I DA⟩.example .com
value : EPubB (K ), EK (I PA, T ), SP r ivA (H (EK (I PA, T )))
where K is a fresh symmetric cryptographic key6, the functions E
and S are encryption and signing respectively, while H is the SHA
secure hash algorithm to ensure the integrity of the cyphertext. As
we see, the payload now is three-fold, since it includes: (i) the IP
address of Alice (IPA) together with a timestamp T encrypted with
the unique to this record version symmetric key K, (ii) the key K,
encrypted with Bob’s public key PubB, and (iii) the SHA digest of
the ciphertext signed by Alice, so an adversary will not be able to
tamper, replay or alter the encrypted IP address. Note at this point,
that symmetric keys K are used only once. This way, they are not
needed to be stored in the user device. Symmetric encryption, at
this point, allows us to easily encrypt messages of arbitrary size.
Using UIDs in plaintext as an index token, obviously causes a se-
rious privacy leak. To avoid that, Alice could hash the concatenation
of both UIDs: ⟨h(U IDB|U IDA)⟩. Since Bob and Alice know the UID
6Depending on the cryptographic algorithm, K can be the key and the Initializa-
tion Vector (IV), or just the key.
3
DNS network(1) New Friend(3) Recursive DNS Query (4) Authoritative Response(6) Connection Establishment Local Recursive ResolverAuthoritative serverBob(2) Contact Query (5) Record ResponsePROUDCommunication ApplicationAliceFigure 3: Followers-list update
time as a function of its size. It
takes less than 1.8 sec on average
to update as many as 200 friend-
ship records with the new IP.
Figure 2: Execution time per set-
friendship operation. There is an
additional delay of less than 0.35
sec on average per operation due
to cryptographic computations.
of each other, they can easily produce this index token and query
a DNS resolver for the record representing their particular friend-
ship. But again, using an unsalted hash means that anyone able to
enumerate both UIDs may reconstruct this index token, and hence
query for it. Obviously even by performing such query they will
not manage to learn Alice’s network address, since they could not
decrypt the response. Yet, they will be able to detect the existence of
an association between Alice and Bob. To remedy this, and provide
Perfect Forward Secrecy (PFS), in PROUD we periodically gener-
ate a new random index token through a pseudorandom number
generator (PRNG). To achieve this, upon friendship bootstrapping,
Alice and Bob feed their pseudorandom number generator with the
7 and change this index token periodically (e.g.,
same seed SEAB
once per day). This way, it is guaranteed that (i) Alice and Bob are
the only parties able to reproduce and query this index token, and
(ii) that the record queries that Bob performed in the past cannot
be linked with the ones he performs now. The final format of the
friendship record that Alice creates in PROUD is the following:
type : TXT
key : R (SEAB ).example .com
value : EPubB (K ), EK (I PA, T ), SP r ivA (H (EK (I PA, T )))
where R is the output of the PRNG function that uses SEAB as input.
As one can observe, we use the TXT type of DNS records, which
allows us to add arbitrary data in our friendship records.
C. Friendship update. When Alice connects to the network, she
may roam across Access Points, from WiFi to a Mobile Network.
This makes her device pass to new network state, which from now
on we will call a new epoch. Each epoch of a user includes her move
to a new network address. At the beginning of each new epoch, the
user has to publish her new IP address immediately, in order for her
followers to remain updated. Hence, the device must monitor for IP
address changes and then promptly update all friendship records
in PROUD. To perform such network state update, Alice pushes
the updated friendship records to her authoritative nameserver. All
new recursive queries after that will fetch the updated friendship
records. Note that as described above, this record update may not
take place only every epoch but also periodically, as frequently as
the participants have decided to change the index token of their
friendship record.
7This shared seed is transmitted as a tuple during friendship bootstrapping to-
gether with public keys and the followee’s domain.
4
Figure 4: Total traffic volume dur-
ing followers-list update. Even for
users with large list of followers,
updating all friendship records
takes less than 1 MByte.
Figure 5: Total generated band-
width during followers-list update.
It takes less than 0.22 KBps on
average to simultaneously update
200 friendship records.
D. Friendship revocation. There may be cases, where Alice
needs to remove Bob from her followers. In such case, Alice just
removes from the authoritative nameserver the friendship record
that represents her friendship with Bob. In case she remains in the
same epoch, she also has to deny any future connections from Bob,
until she moves to a new epoch. After this point, Bob cannot obtain
the new IP address and thus he cannot relocate her in the network.
E. User discovery. In order for Bob to remain connected with
Alice, he needs to be up-to-date with her latest epoch before attempt-
ing to establish any connection. Therefore, he needs to periodically
query PROUD for Alice’s current network address. Hence, every
N seconds, Bob makes a simple query to his local resolver (steps
2-5 in Figure 1), asking for the record with the index token that
represents his friendship with Alice. As soon as he retrieves the
response, he uses (i) his private key to recover the key and decrypt
the payload, and (ii) Alice’s public key to verify that this payload
was indeed created by her. In case the timestamp is obsolete he
immediately discards the record, otherwise he can recover the IP
address and open a communication channel with Alice.
4 SYSTEM EVALUATION
We implemented PROUD as a library to facilitate easy integration
in any application. The library is written in Java, the cryptographic
module uses the Bouncy Castle’s Crypto APIs [16]. For authentica-
tion, we use RSA asymmetric cryptography with PKCS1Padding
and 1024-bit keys. For encryption, we use AES symmetric cryptog-
raphy with PKCS5Padding and 256-bit keys. AES in CBC mode is
also used for encrypting the local stored lists and keypairs. Each
IV is also encrypted with AES-ECB mode in one block. Addition-
ally, we use SHA256 for integrity verification and SHA2-PRNG for
our cryptographically secure pseudorandom number generation
(CSPRNG). For the communication with the authoritative server,
we used the dnsjava library [38]. For our experiments, we imple-
mented a simple IM application which outsources its User Discov-
ery functionality to PROUD. For our measurements, we used a PC
equipped with an Intel Core i7-4790 Processor, 3.60GHz with 8MB
L2 cache, 8GB RAM, and an Intel 82567 1GbE network interface.
Experimental Evaluation: First, we study the execution time
of set-friendship operations. Specifically, we measure the execution
time of friendship record create and update requests in PROUD.
In addition, we build a simple DDNS client (vanilla case) in Java
to compare our results with the vanilla DNS record operations.
 0 0.2 0.4 0.6 0.8 1createupdateLatency (sec)Friendship record operationsvanillaPROUD 0 0.5 1 1.5 2 2.5 3 3.5 1 10 100 500Execution time (sec)Followers-list size 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1 10 100 500Total volume of traffic (MBytes)Followers-list size 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 1 10 100 500Consumed Bandwidth (KBps)Followers-list Sizeload on the authoritative server, but very high TTL values may let
the resolver respond with an obsolete friendship record of Alice
causing a service hiccup to Bob’s application. In PROUD, we follow
an adaptive approach tuning the TTL according to Alice’s moving
frequency patterns. Particularly, we vary the TTL of her records
based on the frequency of new epoch production. Hence, the more
frequently Alice moves to new epochs the lower the TTL will be
assigned in her next record updates. In a similar way, the TTL of a
sporadically moving Alice are increased reducing the number of
queries at the authoritative server, letting the resolvers respond to
followers’ periodic queries from their cache.
5 RELATED WORK
Ben Laurie in [14] proposes Apres: a system to allow Alice know
when Bob is online along with his network address without let-
ting anyone else know about it. Unlike PROUD, Apres assumes a
dedicated server working as a hub to store and forward messages
and requires the use of Tor in order to access the server anony-
mously. DP5 [4] aims to provide privacy of presence to real-time
communications. Unlike PROUD, it requires special infrastructure
consisting of a registration server and a set of PIR servers. DP5
imposes high network overhead: users, during their communication
with PIR servers, need to download or upload their full friends-list
for each operation. Moreover, DP5 is less scalable than PROUD: it
requires an increasing management complexity for the additional
PIR servers, considering the ever-increasing number of users.
Vuvuzela [36] is a system for private communication under
heavy surveillance. It uses a dedicated infrastructure containing
a Tor-like chain of servers which utilize onions, along with cover
traffic to conceal the users message exchanges. Although Vuvuzela
is able to adequately preserve the privacy of the user’s social graph,
its a heavyweight approach that requires the users to have their
devices constantly online to send no-op messages even during idle
times of the user. This results to a large bandwidth requirement per
user (around 12 KB/sec per round or 12 GB/sec in total).
Pung [2] provides private communication based on a computa-
tional PIR model. Similar to Vuvuzela, Pung, assumes an untrusted
ISP, however it further assumes all of its servers as untrusted. To
improve its performance, Pung uses a probabilistic multi-retrieval
scheme, which allows its server to efficiently process multiple re-
trievals from the same user. Although this scheme allows Pung to
reduce computational costs by up to 11x, its applicability is still
questionable since the network costs are significantly increased.
Signal [19] is a commercial approach, which protects the privacy
of the user’s address-book during contact discovery by leveraging
architectural support, and specifically Intel’s Software Guard Ex-
tensions (SGX). Technically, the user performs remote attestation
to query a directory service which runs in a trusted enclave at the
remote server. The mayor drawback of the proposed approach is
the current limited support of SGX enclaves in mobile devices.