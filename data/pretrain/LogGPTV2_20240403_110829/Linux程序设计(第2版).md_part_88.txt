服务器可以把select同时用在监听套接字和客户连接套接字两个地方。只要select指示有动作
发生，我们就可以用FD_ISSET遍历所有可能的文件描述符，查明动作到底是发生在哪一个描述
符上的。
如果是监听套接字处于读操作就绪状态，就说明正有一个客户在试图建立连接，我们就可
以在无阻塞风险的前提下调用accept。如果某个客户描述符被指示为处于就绪状态，就说明那里
有一个客户请求需要我们读取和处理。如果读操作读到的是零字节，就表示有一个客户进程已
经结束了，而我们也就可以关闭那个套接字并把它从我们的描述符集合里删除掉。
动手试试：一个改进的多客户/服务器系统
1)server5.c是本章最后一个例子，我们在这个最后的程序里要用sys/time.h和/sys/ioctl.h头文
件替换掉signal.h文件，并且要为select调用额外定义一些变量。
include 
include 
#include 
include 
#include 
#include 
#include 
int main()
int server_sockfd, client_sockfd;
struct sockaddr_in server_address;
int server_len.client_len;
struct sockaddr_in client_address:
fd_set readfds,testfds;
int result;
2）为服务器创建并命名一个套接字。
加入jaVa编程群：524621833
---
## Page 464
446
Linux程序设计
server_sockfd = socket (AF_INET. SOCK_STREAM, 0) :
server_address.sin_family = AF_INET:
server_aGdress .sin_aGdr .s_addr = htonl (INADDR_ANY) ;
server_len = sizeof (server_address):
server_address.sin_port = htons (9734):
bind(server_sockfd, (struct sockaddr *)&server_address, server_len);
3）创建一个连接队列，初始化readfds集合，为处理来自server_sockfd套接字的输入做好准备。
listen(server_sockfd, 5);
FD_ZERO(&readfds);
FD_SET(server_sockfd, &readfGs1;
4）现在开始等待客户和请求。我们给timeout参数传递了一个空指针，所以将不会出现倒计
时时间到的问题。如果sclect调用的返回值小于“1”，程序将退出执行并报告出现了一个错误。
hile(1)(
char ch:
int nread;
int fd;
testfds = readfds;
result =select（FD_SETSIzE,&testfds,(fd_set *)0,
printf:*server waiting\n°1;
（fd_set *)0.(struct timeval *) 0):
if(result <1)（
perror(*server5′);
exit(1) ;
5）一旦得知有动作发生，我们就将用FD_ISSET依次检查每一个描述符，看看动作是发生在
哪一个套接字上面的。
for（fd=0:fd<FD_sETsIzE:fd++){
if (FD_IssET(fd.&testfds)){
6)如果动作发生在套接字server_sockfd上面，它肯定是一个新的连接请求，我们就把相关的
client_sockfd添加到我们的描述符集合里去。
if [fd s server_sockfd) (
client_len = sizeof(client_address):
client_sockfdaccept(server_sockfd,
[struct sockaddr*)&client_address,6client_len):
FD_SET(client_sockfa.&readfds):
printf("adding client on fd ed\n*. client_sockfd);
7）如果动作不是发生在服务器方面，那它肯定是客户方面的动作。如果接收到的动作是
close，就说明客户已经离开，我们就要把它从描述符集合里删除掉。如果是其他动作，我们就
象前面的例子里那样对该客户进行“服务”。
else (
1octl(fd, FIONREAD.&nread):
if(nread se 0){
FD_CLR(fd,kreadfds);
close(fd);
加入jaVa编程群：524621833
---
## Page 465
第14章套接字
printf (*removing client on fd ed\n*. fd):
else(
read(fd,&ch, 1):
printf(*serving client on fd d\n°, fd):
ch++:
write(fd, &ch, 1) :
在实际工作中，最好给程序添上一个专门用来保存已连接套接字最大编号（它可不
一定是最新连接的套接字的编号）的变量。这可以避免循环检资可能多达几千个其实并
没有被连接的套接字，它们根本不可能处于什么读操作就绪状态。出于简洁方面的考虑，
又为了使代码比较客易阅读和理解，我们没有在此这样做。
在运行服务器的这个版本的时候，它将在一个进程里对多个客户顺序进行处理。如下所示：
S server5 &
S server waiting
17] 1670
client3&client3&cllent3&pa-ax
[8] 1671
[9]1672
691[01]
server waiting
adding client on fd 4
adding client on fd 5
adding client on fd 6
setver waiting
scrver waiting
PID 7TY STAT
TINE COMNAND
1670 pp0 s
1672 pp0 S
1671 pp0 s
0:00 client3
1673 pp0 S
0:00client3
0:00 cl1ent3
1674pp0 R
0:00ps-ax
S serving client on fd 4
char from server s B
server waiting
servang client on fd 5
char fiom server = B
serving client on fd 6
server waiting
removing client on fd 5
removing client
on fd 4
removing client on fd 6
char from scrver = B
server waiting
[8]
Done
Done
client3
{101+Done
[9]-
client3
client3
14.6本章总结
在这一章里，我们讨论了进程间通信的又一种方法：套接字。这使我们能够开发出真正的
加入jaVa编程群：524621833
---
## Page 466
448
Linux程序设计
分布式客户/服务器软件—它们能够跨网络运行。我们简要地介绍几个主机数据库消息函数，
以及UNIX如何通过因特网守护进程对标准的系统服务进行处理。我们开发了好几个客户/服务器
方面的示例程序，对组网和多客户处理做了比较细致的演示。
最后，我们学习了select系统调用，它允许一个程序同时在几个打开的文件描述符和套接字
上等待输人/输出活动的发生。
为了让本章开头的比喻更完整，我们表14-6里对套接字连接和电话线路进行了对比。
表14-6
电话
网络套接字
给公司打电话，号码是555-0828
连接到IP地址127.0.0.1
公司总机接线员章起电话
建立起到远程主机的连接
要求转到财务部
安择使用指定的端口（如9734）
财务部总机接线员拿起电话
服务器从select调用返回
电话转到某个财务经理
服务器调用accept，在分支456号上创建新的套接字
加入jaVva编程群：524621833
---
## Page 467
第15章工具命令语言Tcl
在这一章里，我们要去看看UNIX世界一个激动人心的开发成果，那是一个可扩展的和可嵌
人的程序设计语言，它的影响巨大而又深远。Tel（读做“tickle”，Tool CommandLanguage）语
言是JohnOusterhout等人多年开发的成果，现在由Scriptics公司（http://www.scriptics.com）负
资着它的维护工作。从快速建模工具到扩展语言再到工业控制软件，许多不同领域的应用程序
现在都把Tcl当作一种时髦的程序设计语言选择：Tci还可以在其他平台使用，包括微软的
Windows和苹果公司的MacOS等在内
我们将对Tcl语言的主要功能进行学习，主要内容包括Tcl语言的可扩展性和它在新软件交
式操作接口方面的用途用法，再向大家介绍几个比较成熟的Tcl语言扩展和用这种语言编写出来
的应用软件。我们这一章的讨论范围包括：
·Tcl语言的命令和控制结构。
·引号、括号和替换。
·Tci语言中的字符串和列表。
·输人和输出。
·Tel语言的扩展和应用软件。
15.1Tcl语言概述
我们先来学习Tel语言的基本元素：如何编写和执行Tcl程序以及这种程序设计语言的功能
特点。
15.1.1第一个Tcl程序
我们来编写一个非常简单的“HelloWorld”程序hello.tcl，看看Tcl程序是如何被编写出来的，
又是如何被执行的。下面就是这个程序的源代码：
set s *Hello Wor1d*
puts $6
Tcl是一种解释型语言，Tcl程序通常被称为脚本（script）。从这方面看，Tel和UNIX操作系
统的shell有很多的相似之处。事实上，Tcl卿本需要有一个Tcl专用的shell才能执行、这个shcll也
因此得名为tclsh。
我们在tclsh下运行我们的脚本程序示例。请记住，用这种办法来执行一个Tci程序时只要求
有文件的读权限就足够了：
tclsh hello.tel
Hello Wor1d
加入jaVa编程群：524621833
---
## Page 468
450Linux程序设计
类似于其他的UNIX命令解释器，我们可以直接运行tclsh，再由它来提示我们输人立刻执行
的Tcl命令。也就是说，我们可以象下面这样直接敲人这两行语句：
S tclsh
Heilo wor1d
He1lo wor1d
pute $e
注意tclsh的命令行提示符是“%”字符，我们的命令在敲人后立刻得到了执行。如果一条命
令有多个输入行，解释器就会一直读到该命令输入完成才开始执行它。我们还可以使用source命
令让tclsh从一个文件里取得命令。我们再用这个办法让Tcl另外读一次我们的程序：
source hello.tcl
exit
Hello Wor1d
exit命令的作用是结束Tclshel1并返回到我们原来UNIXshell去。下面这个办法可以把我们的
Tel脚本转换为一个UNIX程序：在代码的第一行指定用来执行这个脚本的解释器，就象我们在
UNIX的shell脚本程序里做的那样。我们把新程序保存在hello2.tcl文件里：
#:/vsr/bin/tclsh
Set s*He1lo Wor1d -2*
puts $8
现在，如果我们设置上这个脚本的可执行属性，就可以用平常的办法运行它厂。Tel语言的
shell，即tclsh程序的存放位置会随系统的不同而发生变化，在我们的例子里，它被安装在
/usr/bin子目录里了。
通常，用whereis和which命令就可以在系统的搜索路径里找出tclsh的存身之处：
5chmod+x hello2.tcl
S./hollo2.tcl
15.1.2Tcl命令
总的说来，所有Tcl命令的格式都是一样的。它们都以一个关键字（命令的名字）开始，有
的命令后面没有参数，有的命令后面会有几个参数。一条命令通常只占用一行，但如果在行尾
加上一个反斜线字符（\），就可以让一条长命令占据多个文本行。
引号、括号和变量的替换（我们马上就要讲到）会首先进行，替换后得到的结果才是最终
将要执行的命令。这些命令有些会产生-个结果，有些还需要多保存几条命令才能开始执行-
比如遇到函数定义或循环语句等时候就会如此。
Tcl语言的语法相当简单易学，扩展起来也比较简单。但某些操作，比如赋值和计算等，乍
看上去还是提吓人的。
我们也可以把多条命令放在同一行上，但必须用分号把它们隔开。
加入jaVa编程群：524621833
---
## Page 469
第15章工具命令语言Tcl
451
在这一章里，当我们介绍Tcl命令的语法时，我们将使用如下所示的表达方式：
1.面这个语法表示命令command有两个不可缺少的参数，还有几个可选用的参数，可选参
数的作用一般是改变命令的操作行为。在正式的Tci/Tk文档里使用的也是这样的语法表达方式。
15.1.3变量和值
理，但Tcl会在必要时自动完成类型的转换，比如对数字进行计算的时候。给变量赋值要使用set
命令，如果变量不存在，就创建它。读者可以把这一小节后面的内容当作是在Tclshell里的次
旅行。
5 tclsh