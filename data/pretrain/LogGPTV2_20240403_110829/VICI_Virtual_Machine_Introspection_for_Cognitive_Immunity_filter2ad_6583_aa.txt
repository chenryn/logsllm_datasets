title:VICI Virtual Machine Introspection for Cognitive Immunity
author:Timothy Fraser and
Matthew R. Evenson and
William A. Arbaugh
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
VICI–Virtual Machine Introspection for Cognitive Immunity
The Microsoft Corporation PI:EMAIL
Timothy Fraser
Matthew R. Evenson
The Microsoft Corporation PI:EMAIL
The Microsoft Corporation PI:EMAIL
William A. Arbaugh
Abstract
When systems are under constant attack, there is
no time to restore those infected with malware to health
manually—repair of infected systems must be fully au-
tomated and must occur within milliseconds. After de-
tecting kernel-modifying rootkit infections using Virtual
Machine Introspection, the VICI Agent applies a collec-
tion of novel repair techniques to automatically restore
infected kernels to a healthy state. The VICI Agent oper-
ates without manual intervention and uses a form of au-
tomated reasoning borrowed from robotics to choose its
best repair technique based on its assessment of the cur-
rent situation, its memory of past engagements, and the
potential cost of each technique. Its repairs have proven
effective in tests against a collection of common kernel-
modifying rootkit techniques. Virtualized systems moni-
tored by the VICI Agent experience a decrease in appli-
cation performance of roughly 5%.
1. Introduction
Today’s Internet-facing systems are under constant
attack. Upon gaining full administrative control of a
compromised system, sophisticated adversaries install
kernel-modifying rootkits, a form of malware that en-
ables adversaries to hide their presence from a sys-
tem’s legitimate users and remain in clandestine control
for days, weeks, or months [7, 14]. Kernel-modifying
rootkits change the behavior of kernels by modifying
their instructions and run-time state, forcing them to
actively conceal the adversary’s presence. Traditional
user-mode intrusion detection programs that depend
on correct kernel behavior cannot cope with kernel-
modifying rootkits. New methods must be found to deal
such
as
XenKIMONO
with them.
[22],
Efforts
VMwatcher
[16], Lycosid [17], and others have
explored the use of Virtual Machine Introspection [11]
to detect kernel-modifying rootkits and have shown
promising results. However, detection is only half the
battle—we must also develop repair techniques capable
of disabling kernel-modifying rootkits and restoring
infected kernels to health. XenKIMONO can call for
manual intervention upon detecting a kernel-modifying
rootkit, but in an environment where systems are under
constant attack only fully-automated repair techniques
capable of restoring kernels to health within millisec-
onds of infection can hope to keep mission-critical
systems running for any useful length of time.
We present the Virtual-machine Introspection for
Cognitive Immunity (VICI) Agent prototype, the ﬁrst
introspection-based system to follow rootkit detection
with completely automated repair functionality de-
signed to restore infected kernels to health within mil-
liseconds. The VICI Agent periodically examines the
state of a running kernel using a collection of diagnos-
tic functions designed to detect the kinds of modiﬁca-
tions rootkits typically make to change kernel behavior.
Upon detecting such a modiﬁcation, the VICI Agent
chooses one of several repair actions to undo it, disable
the rootkit, and restore proper kernel behavior.
Different kernel-modifying rootkits may require
different repair actions. Some kernel-modifying rootk-
its may actively attempt to overcome repairs, and may
require extreme measures to eradicate. Extreme mea-
sures may come with some cost in terms of lost useful
state and availability. In order to enable infected sys-
tems to keep performing their mission to the greatest
extent possible, autonomous repair agents like the VICI
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.33
DOI 10.1109/ACSAC.2008.33
77
87
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:01:14 UTC from IEEE Xplore.  Restrictions apply. 
Agent must reason about tradeoffs between repair effec-
tiveness and cost.
The VICI Agent has a collection of repair ac-
tions, some designed to deal with simple rootkits, oth-
ers geared towards tackling more complex examples.
Upon detecting an infection, the VICI Agent must au-
tonomously choose the cheapest relevant repair action
that seems likely to defeat the rootkit based on its mem-
ory of recent engagements. We have adapted the Sub-
sumption architecture from robotics [4, 5, 6] to provide
the VICI Agent with the automated reasoning capability
it needs to make these choices.
In order to control cost, the VICI Agent begins by
choosing its least expensive relevant repair action.
If
the infection persists, the VICI Agent escalates through
a series of increasingly expensive repair actions until it
either ﬁnds one that removes the infection or runs out
of choices. Once found, the VICI Agent remembers
which repair action did the trick for an interval of time.
If a rootkit re-infects the kernel during that interval,
the VICI Agent saves time by applying the previously-
effective repair action immediately rather than escalat-
ing to ﬁnd it again. A complimentary de-escalation be-
havior allows VICI to gradually return to cheaper repair
actions if infections decrease in complexity or cease.
In our experiments, the VICI Agent’s simplest re-
pair actions have proven sufﬁcient to undo modiﬁca-
tions of the kind made by the well-known Adore-ng,
Override, and SuKIT rootkits. When conﬁgured to run
its diagnostics once every 50 milliseconds, our bench-
marks indicate that the VICI Agent reduces overall ap-
plication performance on the monitored virtual machine
by slightly more than 5% in comparison to an identical
virtual machine without the VICI Agent.
The remainder of this paper is organized as follows:
Section 2 explains how rootkits modify kernels in or-
der to change their behavior. Section 3 describes the
architecture of the VICI Agent and explains its basic
operation. It is followed by three sections that focus in
greater detail on what the VICI Agent’s diagnostics and
repair actions do (Section 4), how it uses automated rea-
soning to decide which repair to use when (Section 5),
and how it uses the subsumption architecture to imple-
ment its automated reasoning (Section 6). Section 7
discusses related work. Section 8 presents benchmark
results measuring how much virtualization and the op-
eration of the VICI Agent reduces the performance of
applications on the virtualized system. In section 9 we
discuss the limitations of our approach and how they
might be addressed by future work, and in section 10
we present our conclusions.
Figure 1. Some ways rootkits modify kernels.
2. Kernel-modifying rootkits
Kernel-modifying rootkits modify the behavior of
the infected system’s kernel, causing it to lie to the sys-
tem’s authorized users and administrators. Whenever
an authorized user asks the kernel to produce a list of
presently-existing objects such as ﬁles, processes, sock-
ets, or dynamically loaded kernel modules, the kernel-
modifying rootkit will carefully remove those objects
belonging to the adversary from the lists, thereby hid-
ing the adversary’s presence. Some rootkits also pro-
vide secondary functionality to the adversary, such as
backdoors or keyboard sniffers.
The diagram in Figure 1 shows some of the ways
in which kernel-modifying rootkits change the kernel’s
behavior. The arrows in the diagram approximate the
control ﬂow of two user processes (ovals) asking the
kernel for service through system calls. White rectan-
gles represent aspects of kernel state, shading indicates
modiﬁcations made by rootkits.
In a healthy kernel, the system call interrupt han-
dler looks up the address of the kernel function intended
to handle a given call in an array of function pointers
called the system call vector, and jumps there. Some
rootkits replace the addresses of kernel functions in this
vector (1) with the addresses of their own functions (2),
diverting kernel control ﬂow through their own mali-
cious code that ﬁlters the results returned to the user
process. Other rootkits directly modify the kernel’s be-
7888
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:01:14 UTC from IEEE Xplore.  Restrictions apply. 
UserapplicationsFn pointersin data segmentFn pointers,data in heapRegistersRootkitKernel text(1)(2)(3)(4)(5)havior by tampering with its text (executable instruc-
tions, 3). There are many function pointers for rootkits
to modify, some in the kernel’s data segments and some
in the heap (4). Rootkits may also modify register val-
ues (5) or kernel or process virtual address translation
tables to achieve their ends.
We focus on kernel-modifying rootkits because
they are hard to detect with traditional sensors imple-
mented as user programs that depend on the kernel
telling the truth. Even sensors implemented as kernel-
mode drivers face an arms race against rootkits designed
to seek them out and disable them. Sensors must be iso-
lated from the kernel they defend, perhaps by virtualiza-
tion as the VICI Agent is.
3. Architecture and assumptions
The diagram in Figure 2 shows the architecture of
the VICI Agent and its place in a deployed system. On
the right side of the diagram is a virtual machine sup-
ported by the Xen hypervisor using its Hardware Vir-
tual Machine mode, not paravirtualization [10]. This
virtual machine runs an unmodiﬁed Commercial Off-
The-Shelf GNU/Linux operating system and supports
the overall system’s mission applications. It deals with
clients over the network, making it vulnerable to rootkit
infection.
On the left side of the diagram is Xen’s “Domain 0”
administrative operating system that provides adminis-
trators with control of the “real” machine and all of its
virtual machines. The VICI Agent runs as a privileged
user process on this operating system.
It uses hyper-
calls provided by the Xen hypervisor to pause the vir-
tual machine for examination and later unpause it, read
and write the virtual machine’s registers, and memory-
map the virtual machine’s “physical” memory into the
VICI Agent’s address space where the VICI Agent can
then read and write it. Most of this functionality was
provided by Xen; a small patch added the rest.
Xen is designed to isolate Domain 0 from the vir-
tual machine. To the extent that this isolation is effective
and to the extent that the VICI Agent is careful in its in-
teractions with the virtual machine, the VICI Agent can
be expected to continue to operate correctly even if the
virtual machine’s kernel is thoroughly compromised by
a rootkit.
The VICI Agent runs in a loop, making a single
“scan” on each iteration. At the beginning of each scan,
the VICI Agent runs its diagnostics to examine the vir-
tual machine’s kernel (1). These diagnostics are de-
signed to detect many of the kinds of tampering shown
in Figure 1, and enable the VICI Agent to detect the
presence of kernel-modifying rootkits. At the end of
each scan, if the diagnostics found any problems, the
VICI Agent attempts to modify the state of the virtual
machine and/or its kernel in a way that will restore the
kernel to health (3). The arrows in the diagram em-
phasize that the VICI Agent’s code runs in Domain 0,
outside of the virtual machine, and gains access to the
virtual machine’s memory and register state using hy-
percalls provided by Xen. This access is one-way; it is
not available to processes on the virtual machine. The
VICI Agent neither runs code nor stores state on the
virtual machine.
In the middle of each scan, the VICI Agent consid-
ers both the results of the present scan’s diagnostics and
those of the previous scan (2). If the VICI Agent sees
that problems were found in both scans, it decides the
previous scan’s repairs failed, and learns from this fail-
ure by escalating: that is, by biasing its future choices
towards more expensive repair actions.
The VICI Agent is concerned only with kernel-
modifying rootkits. However, it could be used in con-
junction with user-mode malware detection programs.
This arrangement could be mutually beneﬁcial:
the
VICI Agent could give the user-mode programs greater
assurance that their kernel is not lying to them, and the
user-mode programs could examine high-level ﬁlesys-
tem state and network trafﬁc that is difﬁcult to decipher
from VICI’s relatively low level of abstraction.
The VICI Agent is a research prototype. In order to
direct more of our development resources towards pro-
totyping novel features, we made several labor-saving
assumptions: First we did not harden Xen or the Do-
main 0 operating system.
In a real deployment, one
might choose to use a custom special-purpose hyper-
visor and Domain 0 operating system rather than the
general-purpose Xen Hypervisor. By implementing
only those features speciﬁcally needed by the VICI
Agent, it would be easier to harden.
Second, we assume that the virtual machine’s ker-
nel remains uninfected long enough for the VICI Agent
to take a snapshot of it in its healthy state shortly after
boot. In a real deployment, one might prefer to examine
binaries off of known-good read-only installation media
and emulate the loading process in order to determine
what a healthy kernel looks like, instead. This would be
an effective defense against rootkits that use modiﬁed
Master Boot Records to install themselves before any
snapshot could be taken.
Note that the VICI Agent doesn’t care how the
rootkit is installed. We assume the adversaries have full
administrative control of the virtual machine’s operat-
ing system and can install as they please. The VICI
Agent’s diagnostics look for the modiﬁcations rootkits
make to kernel state after installation.
7989
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:01:14 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2. The VICI Agent protects a kernel running in a virtual machine.
4. Diagnosis and repair
The VICI Agent uses a form of Virtual Machine
Introspection [11] to run its diagnostics on the virtual
machine’s kernel. To detect tampering with the ker-
nel’s instructions, it computes an MD5 checksum [24]
of the kernel’s text and compares the result against the
expected value for a healthy kernel. It performs similar
checksum comparisons for pages of Loadable Kernel
Module text. To detect changes to important function
pointers, registers, and constants, the VICI Agent com-
pares the values observed in kernel memory with the
values expected for a healthy kernel.
The VICI Agent’s diagnostics cover some of the as-
pects of kernel state listed in ﬁgure 1, speciﬁcally kernel
and module text, over 9000 kernel and module function
pointers, and a few commonly-targeted registers. There
are also diagnostics designed to detect the introduction
of unapproved packet handlers and a tampering attack
on the Linux kernel’s pseudo-random number genera-
tor described by Baliga and others [3]. We do not claim
this coverage is complete, as explained in section 9.
The VICI Agent has a ﬁxed collection of repair ac-
tions. The simplest repair action is “Surgical” repair,
so-called because it is capable of repairing the most
common forms of rootkit tampering without harming
the repaired kernel. The rest of the repair actions rep-
resent stronger medicine with correspondingly greater
costs. The VICI Agent tries to hold these more costly
repair actions in reserve until faced with a rootkit that
the less-costly repair actions cannot handle. Each re-
pair action is described below:
The Surgical repair action simply writes correct val-
ues to text locations, variables, and registers that the di-
agnostics have found incorrect.
In practice, this sim-
ple low-cost strategy has proven sufﬁcient to defeat the
malicious techniques used by the rootkits we have col-
lected from the Internet. However, we have developed
a series of more complex test rootkits that require more
extreme repairs.
The Core War repair action is designed to handle
more complex rootkits that borrow the VICI Agent’s