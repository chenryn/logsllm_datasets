Constraint description. The constraint first guides the pro-
gram to  that represents the changed loca-
tions. When  is reached, it attempts to gener-
ate the cause by satisfying  that represents the
changed data conditions.
Determining constraint. To find a proper constraint, a given
patch changelog is matched with a series of pre-defined cases,
earlier cases being potentially more direct to the cause of
the bug. The following describe the case matching, which is
algorithmically described in Appendix C.
3566    30th USENIX Security Symposium
USENIX Association
Figure 9: System overview of CAFL.
• C1. If any new exception checks are introduced, it sets
 to their source locations and creates
 with newly introduced exception condi-
tions. We assume the conditions that lead to a return state-
ment or a function call with a keyword such as "throw"
or "error" suggest exception checks.
• C2. If any branch condition is changed, it sets
 to the changed conditions and creates
 where the pre- and post-patched condi-
tions are mutually exclusive to each other. In other words,
if Cpre and Cpost are the pre- and post-patch conditions,
 = (Cpre && !Cpost) || (!Cpre && Cpost).
• C3. If any variables are replaced, it sets 
to the replaced variable and creates  that
tests if the value of the pre-patched variable is not equal
to the post-patched one.
• C4. If all the preceding cases are not applicable, it
falls back to the data-condition-free constraint, setting
 to all the changed program locations.
Multiple target sites. If the changed locations are more than
one, it ties all changed locations with a sentinel function that
represents a single unified target site, and sets  to the sentinel function. Specifically, it inserts a sen-
tinel function call to each of change locations, so that the
program calls the sentinel function whenever it reaches them.
6 Implementation
We implemented CAFL, the prototype fuzzing system of
CDGF based on AFL 2.52b [46]. In this section, we first
describe a brief system overview in §6.1, and explain the
operation of the CAFL components in §6.2 to §6.4.
6.1 System Overview
Figure 9 shows the system overview of CAFL. First, the
CAFL compiler accepts the source code and the constraints
such as Figure 4, and instruments both edge coverage and the
target site distances. The target site distances are instrumented
by installing the checkpoint API calls provided by the CAFL
runtime. Then, the CAFL fuzzer fuzzes the binary and re-
ceives the seed distance from the CAFL runtime, prioritizing
the seeds with shorter total distances.
6.2 CAFL Compiler
Coverage instrumentation. The CAFL compiler generates
the LLVM [17, 28] IR bitcode and annotates the target sites
to prevent them optimized out. It then instruments the edge
coverage using the AFL [46] instrumentation compiler with
optimizations enabled.
Call graph construction. To calculate the target site dis-
tance, the CAFL compiler first constructs the program-wide
call graph. When it comes to the function pointers, the CAFL
compiler assumes all the functions whose prototypes are ex-
actly matching as the potential callees. If such a function is
not found, the CAFL compiler alternatively assumes the func-
tions with partially matching prototypes at the earlier part as
the potential callees.
Target site distance instrumentation. Starting from each
target site, the CAFL compiler calculates the target site dis-
tance of the basic blocks and inserts the checkpoint calls,
while recursively crawling up the control-flow graph and the
call graph until it reaches the main function. As a special
case, the CAFL compiler attaches the captured variables to
the checkpoint call at the target site and forwards them to the
CAFL runtime.
6.3 CAFL Runtime
Seed distance tracking. At fuzzing time, the CAFL runtime
keeps track of the seed distance using the target site distance
feedback through the checkpoints. The instrumented binary
forwards the tuple of [τ,d(Bn, B∗
τ)] through the checkpoints,
where τ is the index of the constraint and d(Bn, B∗
τ) is the
target site distance of the τth constraint. The CAFL runtime
selectively accepts the target site distance of the first unsatis-
fied constraint, and updates the current seed distance.
At the target site, the CAFL runtime receives the captured
variables through the checkpoint call and calculates the data
condition distances. To prevent the released memory from
disrupting distance measurement, the CAFL runtime also
disposes a captured variable if i) it is a memory pointer and ii)
released by free/realloc (heap objects) or stack unwinding
(stack objects). If the distance of the current constraint gets 0,
the CAFL runtime advances to the next constraint.
Seed distance reporting. While tracking the seed distance,
the CAFL runtime reports the distance of the current seed to
the CAFL fuzzer via a dedicated shared memory interface.
USENIX Association
30th USENIX Security Symposium    3567
afl-clang-fastCONSTRAINT %cause:
site 
cond "none"
CONSTRAINT %crash:
site :
cond " "
Figure 10: Constraint template for LAVA-1 crashes.
To facilitate monitoring the fuzzing status, the CAFL runtime
also reports additional runtime statistics, such as at which
constraint a seed is stuck.
6.4 CAFL Fuzzer
Seed scoring. As the seeds with shorter total distances are
generally deemed as desirable, the CAFL fuzzer first scores
each seed negative-proportionally to its total distance, giving a
bigger score to a shorter total distance. Meanwhile, some may
be the local minima whose total distance cannot be shortened
further. To avoid such local minimum seeds, the CAFL fuzzer
exponentially scales down the seed score with respect to the
fuzzed times and the stuck depth, the seed depth during which
a seed fails to reduce the total distance shorter than the shortest
seed distance of all the parent seeds. Formally, given a seed s
with the total distance of D(s), the score of the seed S(s) is
S(s) = (Dmax − D(s))· pow(c f uzz, NumFuzzed(s))·
pow(cstuck,S tuckDepth(s)),
(7)
where Dmax = ccon · N( ⃗B∗) is the maximum total distance, and
NumFuzzed(s) and S tuckDepth(s) is the fuzzed times and
the stuck depth of the seed s, respectively. c f uzz and cstuck are
the scale-down factors, which we set to 0.95 and 0.85.
Seed creation. The CAFL fuzzer creates a new seed when-
ever it observes a seed whose score is bigger than the current
biggest. The CAFL fuzzer also creates seeds in a conventional
way, namely when a seed covers new control-flow edges, to
diversify the data context of seeds.
Seed prioritization. The CAFL fuzzer modifies the seed
scheduling algorithm of AFL by regulating the selection prob-
ability of each seed based on its score. Specifically, the CAFL
fuzzer ranks each seed in an increasing order of its score, and
gives an exponentially higher probability of being chosen. We
give the probabilities with respect to the ranks rather than the
scores, as the total distance is a combination of two different
distance metrics whose numerical scales are not compatible.
Formally, if R(s) is the rank of the seed s, the probability of
choosing the seed s is defined as P(s) = 1/exp(R(s)).
7 Evaluation
Since the state-of-the-art DGF system Hawkeye [22] is not
publicly available, we compare CAFL with AFLGo [21] that
ID
4961
7002
13796
292
660
3089
4383
7700
14324
2543
4049
1199
2285
9763
16689
17222
357
3377
Buggy
Range Size
0x10000000
0x10000000
0x10000000
0x200000
0x200000
0x200000
0x200000
0x200000
0x200000
0x4000
0x4000
0x80
0x80
0x80
0x80
0x80
0x1
0x1
AFLGo
>1000.0 m
CAFL
2T
0.9 m
4.3 m >1000.0 m
2T+D
0.2 m
0.1 m
459.3 m 121.5 m
0.6 m
0.6 m
0.8 m
0.2 m
0.3 m
0.9 m
0.3 m
0.6 m
0.3 m
0.7 m
0.3 m
0.7 m
1.2 m
1.3 m
0.7 m
>1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
>1000.0 m >1000.0 m
Table 2: LAVA-1 crash reproduction time comparison. All repro-
duction times are cut off at 1000 minutes. T stands for target sites,
and D stands for data conditions.
Hawkeye is built upon. We evaluate both on a server node with
20-core Intel Xeon Gold 6209U CPU @ 2.10GHz and 502 GB
of DDR4 main memory. We run CAFL on Ubuntu 18.04 and
AFLGo on Ubuntu 16.04, due to the OS compatibility issue
in AFLGo. We repeat each evaluation 3 times and average
them, except when AFLGo exceeds the timeout. We configure
AFLGo with the default parameters described in the official
repository (-z exp -c 45m) [1].
In this section, we first present the microbenchmark results
using LAVA-1 [25] in §7.1, and present the crash reproduc-
tion time upon 47 real-world crashes in §7.2. Finally, we
present the PoC generation time upon 12 crashes in §7.3. All
constraints are automatically generated.
7.1 Microbenchmark: LAVA-1
We compare the crash reproduction time with 18 crashes
from LAVA-1 [25] by measuring the time taken to reproduce
the crash injected to the Linux file command [8]. Figure 10
shows the constraint template used to reproduce the crashes in
LAVA-1. Since LAVA-1 provides the detail crash information
including i) the program location involved in the cause of the
crash, ii) the program location where the program crashes,
and iii) the buggy variable and its data range where it causes
the crash, we utilize the information to fill the placeholders in
the constraint template. Specifically, we set the cause location
and the crash location to  and 
respectively, and the begin and end value of the buggy range to
 and . Setting this constraints
as 2T+D, we construct the constraints for 2T by disabling the
data condition to "none". We set the targets sites for AFLGo
to the same as in 2T.
3568    30th USENIX Security Symposium
USENIX Association
Program
Bug Location
Bug Type
Template
AFLGo
nT
1T
gifsicle 1.90
gifsicle 1.90
ImageM 7.0.6-5
libming 0.4.8
libtiff 4.0.3
libtiff 4.0.9
libzip 1.2.0
mJS 1.21
nasm 2.14rc0
nasm 2.14rc16
yasm 1.3.0
jbig2dec 0.16
jbig2dec 0.16
jasper 1.900.12
jasper 1.900.13
jasper 1.900.13
jasper 1.900.13
jasper 1.900.17
libsixel 1.8.3
libtiff 4.0.7
GraphicsM 1.3.28
imagew 1.3.1
lame 3.99.5
libtiff 4.0.7
Average
fmalloc.c:19
giffunc.c:185
mat.c:1374
decompile.c:398
tiff2pdf.c:394
tiff2pdf.c:405
zip_buffer.c:53
mjs_string.c:524
preproc.c:1290
preproc.c:5055
intnum.c:415
jbig2_arith.c:264
jbig2_mmr.c:88
jas_seq.c:90
jpc_dec.c:1817
jpc_bs.c:197
jpc_t2cod.c:297
jpc_math.c:94
stb_image.h:5052
tif_dirwrite.c:2098
png.c:4638
imagew-cmd.c:850
get_audio.c:1454
tif_read.c:351
Double free
Use after free
Use after free
Use after free
Use after free
Use after free
Use after free
Use after free
Use after free
Use after free
Use after free
Uninitialized value
Uninitialized value
Assertion failure
Assertion failure
Assertion failure
Assertion failure
Assertion failure
Assertion failure
Assertion failure
Divide by zero
Divide by zero
Divide by zero
Divide by zero
nT
nT
nT
nT
nT
nT
nT
nT
nT
nT
nT
nT
nT
1T+D
1T+D
1T+D
1T+D
1T+D
1T+D
1T+D
1T+D
1T+D
1T+D
1T+D
8.0 m
15.2 m
180.1 m
103.8 m
>6000.0 m
>6000.0 m
>2000.0 m
32.4 m
*
*
>2000.0 m
168.9 m
>2000.0 m
2.4 m
136.1 m
16.7 m
>2000.0 m
130.1 m
*
58.1 m
*
1.0 m
3.4 m
>9000.0 m
7.0 m
27.6 m