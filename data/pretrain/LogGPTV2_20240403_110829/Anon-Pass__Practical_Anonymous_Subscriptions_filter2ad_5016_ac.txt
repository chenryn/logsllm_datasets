to prove that ˜
ZB is formed correctly. Removing this element
eliminates two pairing operations – the check that this element
is properly formed – from server veriﬁcation of logins. Pairing
operations dominate the computational cost of login, so this
change is signiﬁcant. A login operation on the server consists
of 8 pairings and 6 exponentiations in GT . We measure that
a pairing operation takes an average of 1950 μs, while a GT
exponentiation takes 232 μs. (See §VI for a full description
of the settings used to acquire the timing of pairing and expo-
nentiation operations.) Thus, we expect this change improves
efﬁciency of login on the server by a factor of 1.2.
Simultaneous login and linking: Some of our applications
(§IV-E) involve linking for the next epoch immediately upon
logging in for the current epoch. We modify the protocol to
improve efﬁciency in this case. We are able to eliminate the
repeated computation of exponentiated Y (t) values that occur
for separate links: A login using Y (t) and sequence of links
Y (t) to Y (t + 1), Y (t + 1) to Y (t + 2), . . . , Y (t + (n − 1))
to Y (t + n) with separate login and link operations would
duplicate exponentiations of Y (t + 1), . . . , Y (t + (n− 1)). By
eliminating these repeated exponentiations, the time for two
link operations is reduced from 2566 μs to 1392 μs on the
client and from 1412 μs to 921 μs on the server. This is an
improvement of 1.8× and 1.5×, respectively. However, the
overall time is still dominated by the cost of login.
D. Zero-knowledge proofs of knowledge
We present non-interactive zero knowledge proofs of knowl-
edge that are secure in the random oracle model; these are the
protocols as implemented in Anon-Pass.
Registration PoK: PoK{(d, r) | M = gdZ r}
Prover:
1) Choose rd, rr ← Zq, calculate R = grd Z rr.
2) Set c = H(g, Z, M, R).
3) Send (R, ad = cd + rd, ar = cr + rr) to the veriﬁer.
Veriﬁer:
1) Calculate c = H(g, Z, M, R).
2) Check that M cR = gad Z ar.
Login PoK: PoK{(d, r, r
(cid:2)) | v
r(cid:2)
= vxv
xy ∧
(cid:2)r
d
xyv
Y (t) = gT
1/(d+t)}
We rewrite this as
PoK{(d, r, r
(cid:2)) | v
r(cid:2)
= vxv
d
xyv
xy ∧ Y (t)d = gT Y (t)−t}
(cid:2)r
Prover:
1) Choose rd, rr, rr(cid:2) ← Zq, and then compute R1 =
vrr(cid:2)
vrd
xyv
(cid:2)rr
xy and R2 = Y (t)rd.
2) Set c = H(v, vx, vxy, v
3) Send (R1, ar(cid:2) = cr
xy, R1, gT , Y (t), R2).
(cid:2) + rr(cid:2) , ad = −cd + rd, ar = −cr +
(cid:2)
rr, R2) to the veriﬁer.
Veriﬁer:
1) Calculate c = H(v, vx, vxy, v
2) Check whether
(gT Y (t)−t)−cR2 = Y (t)ad.
vc
xR1
(cid:2)
xy, R1, gT , Y (t), R2).
ar
=
(cid:2)
var(cid:2)
ad v
vxy
xy
Link PoK: PoK{d | Y (t) = g
1/(d+t)
T
∧
Y (t + 1) = g
1/(d+(t+1))
T
and
}
We rewrite this as
PoK{d | Y (t)d = gT Y (t)−t∧Y (t+1)d = gT Y (t+1)−(t+1)}
Prover:
1) Choose r ← Zq, set Rt = Y (t)r and Rt+1 = Y (t + 1)r.
2) Set c = H(gT , Y (t), Y (t + 1), Rt, Rt+1).
3) Send (a = cd + r) to the veriﬁer.
Veriﬁer:
1) Calculate c = H(gT , Y (t), Y (t + 1), Rt, Rt+1).
2) Check whether (gT Y (t)−t)cRt = Y (t)a and (gT Y (t +
1)−(t+1))cRt+1 = Y (t + 1)a.
IV. DESIGN
This section describes the design of the Anon-Pass system.
The system is intended to instantiate our protocol in a way
that
is practical for deployment. We present a conceptual
framework for the system in which the various functionalities
of the system are separated.
There are three major pieces of Anon-Pass functional-
ity: client authentication management, server authentication
management, and service provider admission control. In our
design, we call the these pieces the client user agent, the
authentication server, and the resource gateway. The client
user agent and the authentication server correspond to the
client and server in the cryptographic protocol. The resource
gateway enforces access to the underlying service, denying
service to users who are not properly authenticated. A session
in Anon-Pass is a sequence of epochs beginning when a user
logs in and ending when the user stops re-upping.
Figure 1 shows the major components of the Anon-Pass
system. We depict the most distributed setting, where each of
the three functions is implemented separately from existing
services, though a deployment might merge functionality. For
example, the resource gateway might be folded into an already
existing component for session management.
Our system supports internal and external authentication
servers. An internal authentication server corresponds to a
service provider offering anonymous access themselves, e.g.,
the New York Times website might offer anonymous access
at a premium. An external authentication server corresponds
324
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
Client
Application Service
Client 
Application
5
8
Gateway
7
6
Application 
Server
4
3
User Agent
1
2
Authentication
Server
Authentication Service
The communication between the authentication server, resource
Fig. 1.
gateway, and user agent with respect to the client and the service.  Com-
munication is initiated by the user agent and the authentication server veriﬁes
the credentials.  The authentication server veriﬁes the credentials and returns
a sign-in token to the user agent.  The user agent communicates this sign-
in token to the gateway and, afterward,  passes this information to the
client application for use.  The client application includes the token as a
cookie along with its normal request.  The gateway checks that the sign-in
token has not already been used in the current epoch and then proxies the
connection to the application server.  The application server returns the
requested content and  the gateway veriﬁes that the connection is still valid
before returning the response to the client.
to an entity providing anonymous access to already existing
web services. For example, a commercial anonymous web
proxy (like proxify.com or zend2.com) might offer anonymous
services.
Our system implements registration, though it is not de-
picted in the ﬁgure. We do not discuss the payment portion
of the registration protocol. Anonymous payment is a separate
and orthogonal problem. Possible solutions include paying in
some form of e-cash [10] or BitCoins [25].
A service might allow multiple re-ups within a single epoch.
If a user application knows it will not need to disassociate its
current actions from prior actions for a while, it could batch
several epochs worth of re-up operations. The server would
have to allow such batching, but might put the requests in a
queue to remain responsive to requests for the next epoch.
We want to allow services to use our authentication scheme
without much modiﬁcation, so we provide a simple interface:
authorized clients during a time period are allowed to contact
the service and are cut off as soon as the session is no
longer valid. Services might have to accommodate Anon-
Pass’s access control limitations. For example, a streaming
media service might want to limit how much data can be
buffered within a given epoch. The service provider loses the
ability to enforce any access control for buffered data.
A. Timing
Anon-Pass requires some time synchronization between
clients and servers because both client and server must agree
on epoch boundaries, and Anon-Pass supports short epochs.
To support a 15 second epoch, clients and servers should
be synchronized within about a second. The network time
protocol (NTP) is sufﬁcient, available and scalable for this
task. The pool.ntp.org organization3 runs a pool of NTP
servers that keep the clocks of 5–15 million machines on the
Internet synchronized to within about 100 ms.
The server response to a login request includes a timestamp.
Clients verify that they agree with the server on the current
epoch. Client anonymity could be violated4 if the epoch num-
ber ever decreases, so clients must track the latest timestamp
from every server they use and refuse to authenticate to a
server that returns a timestamp that is earlier than a prior
timestamp from that server. This ensures that regardless of
any time difference between server and client, anonymity is
preserved.
Clients who will re-up choose a random time during the
epoch to send the re-up request in order to prevent repetitive
behavior that becomes identifying. However, clients avoid re-
upping at the end of the epoch to avoid service interruption
(e.g., in our prototype, clients re-up in the ﬁrst 4
5 of the epoch).
Randomizing the re-up request time also has the beneﬁt of
spreading the computational load of re-ups on the server across
the entire epoch.
B. Client user agent
The client user agent is responsible for establishing the
client secret, communicating with the authentication server,
and maintaining a session for the client. Separating it from the
client application achieves two goals: it minimizes the amount
of code that needs to be trusted by the user to handle her
secrets and and it lowers the amount of modiﬁcation necessary
to support new client applications.
Once the user agent establishes a connection with the
authentication server, it runs our login protocol, and the user
agent receives a (standard, public-key) signature on the PRF
value and the current epoch. The user agent sends this certiﬁ-
cate to the resource gateway as proof that it is authenticated
for the current epoch. The resource gateway uses the signature
to determine token validity. The user agent cannot use this
certiﬁcate in a later epoch.
When the user agent and authentication server run our re-
up protocol, the user agent receives a signature that includes
both the current epoch and the next epoch, as well as the
two corresponding PRF values. These additional values allow
the resource gateway to link the re-up operations back to the
original request.
The user agent handles almost all of the protocol state,
but the original client application still needs to identify itself
as authenticated. Thus, the user agent transforms the signed
certiﬁcate from a login, into a per-session user credential (e.g.,
a cookie for HTTP-based services). The only operation most
client applications need to support is the ability to send this
credential along with its request. The client application does
not need to make any changes as the user agent re-ups; the
3http://www.ntp.org/ntpfaq/NTP-s-algo.htm
4Anonymity would not necessarily be completely broken, but the server
could link the current session of a client with a prior one.
325
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
user agent’s actions ensure that the same session credential
remains valid for the session’s duration.
C. Authentication Server
The authentication server is separated from the service to
provide greater ﬂexibility for service providers. The server’s
primary task is to run the authentication protocols and ensure
that users are not authenticating more than once per epoch.
Since the protocol’s cryptographic operations use a lot of
computational resources, Anon-Pass was designed so that an
authentication service provider can distribute the work among
multiple machines. The only information that needs to be
shared between processes are the PRF values and the epoch
of currently authenticated users (e.g., by using a distributed
hash table (DHT)). Only storing information about currently
authenticated users relieves a service provider from having to
store all spent tokens, which requires unbounded storage.
D. Resource Gateway
The resource gateway is designed to perform a lightweight
access check before sending data back to a client. Only if a
client is authenticated for an epoch can it receive data during
that epoch. Therefore the epoch length (which is determined
by the service provider) bounds how much data can go to a
client before the client must reauthenticate (login or re-up).
When the authentication server is external to the service,
the authentication server never talks directly to the resource
gateway. User misbehavior (i.e., a double authentication at-
tempt) will not cause the user to be immediately disconnected.
The authentication server will refuse any re-up request from a
misbehaving client, disconnecting them at the start of the next
epoch.
A resource gateway is composed of two logical parts – one
handles the user agent updates, the other part handles the client
request. In a large distributed system, a service provider might
split these into different parts to place access control on the
outer perimeters and the user agent update handler off the
critical processing and request path.
E. Multi-epoch login
As we discuss in Section III-C, we can combine a login with
multiple re-up operations. Allowing re-up with login provides
the beneﬁts of long epochs that start on demand and can
provide request rate limiting by preventing reauthentication
for at least a known period of time. It also reduces the total
computation done by the server.
Multi-epoch logins allows Anon-Pass to be used for unlink-
able resource reservation of digital and even physical goods,
for example, to reserve computer access at an Internet cafe.
Users can reserve a resource for a variable number of epochs,
without needing to periodically extend access.
Consider a subway system that supports month-long sub-
scription passes. Because the transit authority does not want
riders to all enter with one pass, it limits the access that each
pass can grant. The New York City MTA lists 18 minutes as
Operation
Baseline
Client Login
Server Login
19.9
16.0
Pairing
Preprocessing
15.8
7.9
Signature
Precompute
13.5
7.9
PAIRING AND SIGNATURE PREPROCESSING DIFFERENCES. ALL TIMES ARE
TABLE I
IN MILLISECONDS.