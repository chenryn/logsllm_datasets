8. 参见http://www.symantec.com/connect/articles/windows-anti-debug-reference
 。
9. 参见http://pferrie.tripod.com/papers/unpackers.pdf/
 （作者：Peter Ferrie ）。
21.2.4 防止调试
如果一个调试器设法保持住了隐秘状态（不可检测），仍然有许多技巧可以阻止它运行。这些其他的技巧尝试通过引入伪造的断点、清除硬件断点、阻碍反汇编，使选择合适的断点地址变得困难，或者通过阻止调试器依附到一个进程上，令调试器“不知所措”。Nicolas Falliere的文章中讨论的许多技巧适用于阻止调试器正常运行。
程序可以通过有意生成异常来阻止调试。许多时候，附加的调试器将捕获这个异常，而调试器的用户则面临着两个任务：分析异常为何发生，决定是否将异常传递给被调试的程序。对于x86 int 3
 之类的软件断点，你将很难区分由基础程序生成的软件中断与由真正的调试器断点生成的软件中断。这正是模糊程序创建者希望看到的结果。在这类情况下，你可以通过仔细分析反汇编代码清单来了解程序的真正控制流，但在静态分析时，你需要付出更大的努力。
对程序的一些组成部分以某种方式编码会有双重效果：一方面，编码可以防止静态分析，因为这时反汇编并不可行；另一方面，编码可以阻止调试，因为这时很难设置断点。即使每条指令的起始地址已知，但软件断点只有在指令被完全解码后才能设置，因为以插入一个软件断点的方式来修改指令，可能会导致对模糊代码的加密失败；如果执行到这个断点，可能会导致程序崩溃。
此外，一些去模糊实用程序对进程内的字节范围计算样验和。如果在正对其计算校验和的字节范围内设置一个或多个软件断点，将会生成错误的校验和，程序也可能会终止。
Linux平台上的 Shiva ELF 模糊工具利用一种叫做“进程互相跟踪”（mutual ptrace）的方法防止他人使用调试器分析 Shiva的行为。
进程跟踪
进程跟踪（ptrace 或process tracing）API 可用在许多 Unix 类型的系统中，它提供一种机制，让一个进程监视和控制另一个进程的执行。GNU调试器（gdb）是一种利用进程跟踪 API的常见应用程序。使用进程跟踪API，一个进程跟踪父进程可以依附到一个进程跟踪子进程上，并控制子进程的执行。为了控制一个进程，父进程必须首先依附到它想要控制的子进程上。随后，只要收到信号，子进程就会停止运行，而父进程则通过POSIX wait
 函数得到通知，这时，它可以选择修改或检查子进程的状态，然后指示子进程继续执行。只要一个父进程已经依附一个子进程，其他进程将无法依附这个子进程，除非进程跟踪父进程脱离这个子进程。
Shiva利用了这一点：任何时候，一个进程只能依附一个其他进程。在执行早期，Shiva进程会进行分支，创建自己的一个副本。然后，原始的 Shiva进程立即对新分支的子进程执行进程跟踪依附操作。反过来，新分支的子进程也立即依附到它的父进程上。如果其中的一个依附操作失败，Shiva 会认为另一个调试器被用于监控它的进程，它会立即终止。如果这两个依附操作都取得成功，则说明没有其他调试器能够依附到正在运行的 Shiva 进程对上，Shiva 将继续运行，而不用担心被监视。以这种方式运行时，任何一个Shiva进程都可以修改另一个进程的状态，因此，使用静态分析技巧很难确定 Shiva二进制文件的真实控制流路径。
21.3 使用IDA 对二进制文件进行“静态去模糊”
到现在为止，你可能会感到困惑，有了所有这些反逆向工程技巧，我们该如何分析程序员希望使其保持隐秘的软件呢？由于这些技巧同时针对静态分析工具和动态分析工具，要揭示一个程序的隐藏行为，什么才是最佳办法呢？遗憾的是，能够满足一切需求的解决方案并不存在。许多时候，解决方案取决于你掌握的技能以及你使用的工具。如果你选择的分析工具是调试器，那么你需要制订策略，避开调试器检测和预防保护。如果你的首选分析工具是反汇编器，那么你需要制订策略，获得一个准确的反汇编代码清单；如果遇到自修改代码，你还需要模拟这段代码的行为，以便正确更新反汇编代码清单。
在这一节中，我们将讨论两种在静态分析环境（也就是说，不运行代码）中处理自修改代码的技巧。在使用调试器控制一个程序时，如果你不愿（因为恶意代码）或无法（因为缺少硬件）分析这个程序，这时静态分析可能是你的唯一选择。
21.3.1 面向脚本的去模糊
因为IDA 可用于反汇编为各种 CPU 开发的二进制文件，因此，你常常需要分析一个为截然不同的平台（而非你运行 IDA 的平台）开发的二进制文件。例如，你可能需要分析一个Linux x86二进制文件，即使你碰巧运行的是Windows 版本的IDA ，或者你可能需要分析一个 MIPS或ARM二进制文件，即使 IDA 仅在 x86 平台上运行。这时候，你也许无法获得适合对提供给你的二进制文件执行动态分析的动态分析工具，如调试器。而且，如果通过对程序的组成部分进行编码来模糊处理这个二进制文件，那么你可能别无选择，只有创建一个 IDA 脚本，模拟程序的去模糊过程，以正确对程序进行解码，并正确反汇编解码后的指令和数据。
这似乎是一个烦琐的任务，但许多时候，在模糊程序的解码阶段，你只需要利用处理器的一小部分指令集。因此，掌握必要的操作，并不要求你理解目标 CPU 的整个指令集。
在第15 章中，我们提供了一个算法，用于开发脚本，模拟一个程序各种部分的行为。在下面的例子中，我们将利用那些步骤开发一个简单的 IDC 脚本，解码一个已经使用 Burneye ELF加密工具加密的程序。示例程序从代码清单 21-2 中的指令开始执行。
代码清单 21-2 Burneye启动顺序和模糊代码
  LOAD:05371035 start           proc near  
  LOAD:05371035  
➊  LOAD:05371035                 push    off_5371008  
➋  LOAD:0537103B                 pushf  
➌  LOAD:0537103C                 pusha  
➍  LOAD:0537103D                 mov     ecx, dword_5371000  
  LOAD:05371043                 jmp     loc_5371082  
  ...  
  LOAD:05371082 loc_5371082:                             ; CODE XREF: start+E ↑ j  
➎  LOAD:05371082                 call    sub_5371048  
  LOAD:05371087                 sal     byte ptr [ebx-2Bh], 1  
  LOAD:0537108A                 pushf  
  LOAD:0537108B                 xchg    al, [edx-11h]  
  LOAD:0537108E                 pop     ss  
  LOAD:0537108F                 xchg    eax, esp  
  LOAD:05371090                 cwde  
  LOAD:05371091                 aad     8Eh  
  LOAD:05371093                 push    ecx  
➏  LOAD:05371094                 out     dx, eax  
  LOAD:05371095                 add     [edx-57E411A0h], bh  
  LOAD:0537109B                 push    ss  
  LOAD:0537109C                 rcr     dword ptr [esi+0Ch], cl  
  LOAD:0537109F                 push    cs  
  LOAD:053710A0                 sub     al, 70h  
  LOAD:053710A2                 cmp     ch, [eax+6Eh]  
  LOAD:053710A5                 cmp     dword ptr ds:0CBD35372h, 9C38A8BCh  
  LOAD:053710AF                 and     al, 0F4h  
➐  LOAD:053710B1                 db      67h
这个程序首先将内存位置 05371008h
 的内容压入栈（➊），然后压入 CPU 标志（➋），接下来压入所有 CPU 寄存器（➌）。起初，这些指令的目的并不明显，因此，我们把这些信息记录下来以备后用。下一步，ECX 寄存器将与内存位置 5371000h
 的内容一同加载（➍）。根据在第 15 章中介绍的算法，这时我们需要声明一个名为 ecx
 的变量，并使用 IDC 的Dword
 函数对它进行初始化，如下所示：
auto ecx;  
ecx = Dword(0x5371000);    //from instruction 0537103D
在一个绝对跳转之后，程序调用函数 sub_5371048
 （➎），这个操作会产生一个副作用：将地址05371087h
 （返回地址）压入栈。注意，call
 指令之后经过反汇编的指令变得越来越没有意义。通常，在用户空间代码中并不会看到 out
 指令（➏），而 IDA 也无法反汇编地址 053710B1h
 （➐）处的一条指令。这些都说明这个二进制文件存在问题（而且事实上“函数”窗口中仅列出两个函数）。
这时，分析需要从函数 sub_5371048
 处继续进行，如代码清单 21-3 所示。
代码清单 21-3 主要的 Burneye解码函数
  LOAD:05371048 sub_5371048     proc near    ; CODE XREF: start:loc_5371082↓p
➊  LOAD:05371048                 pop     esi  
➋  LOAD:05371049                 mov     edi, esi  
➌  LOAD:0537104B                 mov     ebx, dword_5371004  
  LOAD:05371051                 or      ebx, ebx  
➍  LOAD:05371053                 jz      loc_537107F  
➎  LOAD:05371059                 xor     edx, edx  
➏  LOAD:0537105B loc_537105B:                 ; CODE XREF: sub_5371048+35↓j  
  LOAD:0537105B                 mov     eax, 8  
➐  LOAD:05371060 loc_5371060:                 ; CODE XREF: sub_5371048+2B↓j  
  LOAD:05371060                 shrd    edx, ebx, 1  
  LOAD:05371064                 shr     ebx, 1  
  LOAD:05371066                 jnb     loc_5371072  
  LOAD:0537106C                 xor     ebx, 0C0000057h  
  LOAD:05371072 loc_5371072:                 ; CODE XREF: sub_5371048+1E ↑j
  LOAD:05371072                 dec     eax  
  LOAD:05371073                 jnz     short loc_5371060  
  LOAD:05371075                 shr     edx, 18h  
  LOAD:05371078                 lodsb  
  LOAD:05371079                 xor     al, dl  
  LOAD:0537107B                 stosb  
  LOAD:0537107C                 dec     ecx  
  LOAD:0537107D                 jnz     short loc_537105B  
  LOAD:0537107F loc_537107F:                  ; CODE XREF: sub_5371048+B↑j  
  LOAD:0537107F                 popa  
  LOAD:05371080                 popf  
  LOAD:05371081                 retn
经过仔细分析，我们发现，这并不是一个常见的函数，因为它一开始就将返回地址弹出栈，放入ESI 寄存器中（➊）。如前所述，保存的返回地址为05371087h
 ，考虑到 EDI（➋）、EBX （➌）和EDX（➍）的初始化，我们得到如下脚本：
auto ecx, esi, edi, ebx, edx;  
ecx = Dword(0x5371000);   //from instruction 0537103D  
esi = 0x05371087;         //from instruction 05371048  
edi = esi;                //from instruction 05371049  
ebx = Dword(0x5371004);   //from instruction 0537104B  
edx = 0;                  //from instruction 05371059
在这些初始化之后，函数对包含在 EBX 寄存器中的值进行测试（➎），然后进入一个外层循环（➏）和一个内层循环（➐）。这个函数的剩余逻辑包含在下面的完整脚本中。在这段脚本内，注释用于将脚本操作与前面一个反汇编代码清单中对应的操作关联起来。
    auto ecx, esi, edi, ebx, edx, eax, cf;  
    ecx = Dword(0x5371000);   //from instruction 0537103D  
    esi = 0x05371087;         //from instruction 05371048  
    edi = esi;                //from instruction 05371049  
    ebx = Dword(0x5371004);   //from instruction 0537104B  
    if (ebx != 0) {           //from instructions 05371051 and 05371053  
       edx = 0;               //from instruction 05371059  
       do {  
       eax = 8;            //from instruction 0537105B  
       do {  
          //IDC does not offer an equivalent of the x86 shrd instruction so we  
          //need to derive the behavior using several operations  
➊        edx = (edx >> 1) & 0x7FFFFFFF;   //perform unsigned shift right one bit  
          cf = ebx & 1;                    //remember the low bit of ebx  
          if (cf == 1) {                   //cf represents the x86 carry flag  
              edx = edx | 0x80000000;       //shift in the low bit of ebx if it is 1  
          }  
          ebx = (ebx >> 1) & 0x7FFFFFFF;   //perform unsigned shift right one bit  
          if (cf == 1) {           //from instruction 05371066  
             ebx = ebx ^ 0xC0000057;       //from instruction 0537106C  
          }  
          eax--;                  //from instruction 05371072  
       } while (eax != 0);        //from instruction 05371073  
➋     edx = (edx >> 24) & 0xFF;  //perform unsigned shift right 24 bits  
➌     eax = Byte(esi++);         //from instruction 05371078  
     eax = eax ^ edx;           //from instruction 05371079  
➍     PatchByte(edi++, eax);     //from instruction 0537107B  
     ecx--;                     //from instruction 0537107C  
  } while (ecx != 0);           //from instruction 0537107D  
  }
这个例子有两个细微的变化。首先，IDC 中的右移位运算符（>>）执行有符号移位（表示符号位被复制到最高有效位中），而 x86 shr
 和shrd
 指令执行无符号移位。为了模拟 IDC 中的一个无符号右移位，我们必须清除从左边移入的所有位，如➊和➋所示。其次，为了正确执行 x86 lodsb
 （加载字符串字节）和 stosb
 （存储字符串字节）指令，我们需要选择合适的数据大小和变量。这些指令在 EAX寄存器的低 8 位1
 中读取（lodsb