{
new Param(“SessionId”, “0947F6DC9A66D29F15362D031B337797”,
Param.Type.COOKIE, false),
new Param(“uid”, “198”, Param.Type.URL, true),
};
PayloadSource payloads = new PSNumbers(190, 200, 1);
cc1144..iinndddd 558855 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 586
586 Chapter 14 n Automating Customized Attacks
This confi guration instructs JAttack to make requests to the relevant URL
containing the two required parameters: the cookie containing our current ses-
sion token, and the vulnerable user identifi er. Only one of these will actually
be modifi ed, using the range of potential uid numbers specifi ed.
When we now run JAttack, we obtain the following output:
uid 190 500 300
uid 191 200 27489 Adam Matthews sixpack b4dl1ght
uid 192 200 28991 Pablina S pablo puntita5th
uid 193 200 29430 Shawn fattysh gr3ggslu7
uid 194 500 300
uid 195 200 28224 Ruth House ruth_h lonelypu55
uid 196 500 300
uid 197 200 28171 Chardonnay vegasc dangermou5e
uid 198 200 27880 Phill Bellend phillb b3ll3nd
uid 199 200 28901 Paul Byrne byrnsey l33tfuzz
uid 200 200 27388 Peter Weiner weiner skinth1rd
As you can see, the attack was successful and captured the details of some
users. By widening the numeric range used in the attack, we could extract the
login information of every user in the application, hopefully including some
application administrators.
TRY IT!
http://mdsec.net/auth/498/
Note that if you are running the sample JAttack code against this lab example,
you need to adjust the URL, session cookie, and user ID parameter used
in your attack confi guration, according to the values you are issued by the
application.
TIP Data output in tab-delimited format can be easily loaded into spread-
sheet software such as Excel for further manipulation or tidying up. In many
situations, the output from a data-harvesting exercise can be used as the
input for another automated attack.
Fuzzing for Common Vulnerabilities
The third main use of customized automation does not involve targeting any
known vulnerability to enumerate or extract information. Rather, your objective
is to probe the application with various crafted attack strings designed to cause
anomalous behavior within the application if particular common vulnerabilities
cc1144..iinndddd 558866 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 587
Chapter 14 n Automating Customized Attacks 587
are present. This type of attack is much less focused than the ones previously
described, for the following reasons:
n It generally involves submitting the same set of attack payloads as every
parameter to every page of the application, regardless of the normal
function of each parameter or the type of data the application expects to
receive. These payloads are sometimes called fuzzstrings.
n You do not know in advance precisely how to identify hits. Rather than
monitoring the application’s responses for a specifi c indicator of success,
you generally need to capture as much detail as possible in a clear form.
Then you can easily review this information to identify cases where your
attack string has triggered some anomalous behavior within the applica-
tion that merits further investigation.
As you have seen when examining various common web application fl aws,
some vulnerabilities manifest themselves in the application’s behavior in
particular recognizable ways, such as a specifi c error message or HTTP status
codes. These vulnerability signatures can sometimes be relied on to detect
common defects, and they are the means by which automated application
vulnerability scanners identify the majority of their fi ndings (see Chapter 20).
However, in principle, any test string you submit to the application may give
rise to any expected behavior that, in its particular context, points toward the
presence of a vulnerability. For this reason, an experienced attacker using
customized automated techniques is usually much more effective than any
fully automated tool can ever be. Such an attacker can perform an intelligent
analysis of every pertinent detail of the application’s responses. He can think
like an application designer and developer. And he can spot and investigate
unusual connections between requests and responses in a way that no cur-
rent tool can.
Using automation to facilitate vulnerability discovery is of particular benefi t
in a large and complex application containing dozens of dynamic pages, each
of which accepts numerous parameters. Testing every request manually, and
tracking the pertinent details of the application’s responses to related requests,
is nearly impossible. The only practical way to probe such an application is to
leverage automation to replicate many of the laborious tasks that you would
otherwise need to perform manually.
Having identifi ed and exploited the broken access controls in the preceding
example, we could also perform a fuzzing attack to check for various input-
based vulnerabilities. As an initial exploration of the attack surface, we decide
to submit the following strings in turn within each parameter:
n ‘ — This generates an error in some instances of SQL injection.
n ;/bin/ls — This string causes unexpected behavior in some cases of
command injection.
cc1144..iinndddd 558877 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 588
588 Chapter 14 n Automating Customized Attacks
n ../../../../../etc/passwd — This string causes a different response
in some cases where a path traversal fl aw exists.
n xsstest — If this string is copied into the server’s response, the applica-
tion may be vulnerable to cross-site scripting.
We can extend the JAttack tool to generate these payloads by creating a new
payload source:
class PSFuzzStrings implements PayloadSource
{
static final String[] fuzzStrings = new String[]
{
“’”, “;/bin/ls”, “../../../../../etc/passwd”, “xsstest”
};
int current = -1;
public boolean nextPayload()
{
current++;
return current < fuzzStrings.length;
}
public void reset()
{
current = -1;
}
public String getPayload()
{
return fuzzStrings[current];
}
}
NOTE Any serious attack to probe the application for security fl aws would
need to employ many other attack strings to identify other weaknesses and
other variations on the defects previously mentioned. See Chapter 21 for a
more comprehensive list of the strings that are effective when fuzzing a web
application.
To use JAttack for fuzzing, we also need to extend its response analysis code
to provide more information about each response received from the applica-
tion. A simple way to greatly enhance this analysis is to search each response
for a number of common strings and error messages that may indicate that
some anomalous behavior has occurred, and record any appearance within
the tool’s output.
cc1144..iinndddd 558888 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 589
Chapter 14 n Automating Customized Attacks 589
First, we can add to the attack confi guration data a list of the strings we want
to search for:
static final String[] grepStrings = new String[]
{
“error”, “exception”, “illegal”, “quotation”, “not found”, “xsstest”
};
Second, we can add the following to the parseResponse method to search
each response for the preceding strings and log any that are found:
for (String grep : grepStrings)
if (response.indexOf(grep) != -1)
output.append(grep + “\t”);
TIP Incorporating this search functionality into JAttack frequently proves
useful when enumerating identifi ers within the application. It is common to
fi nd that the most reliable indicator of a hit is the presence or absence of a
specifi c expression within the application’s response.
This is all we need to do to create a basic web application fuzzer. To deliver
the actual attack, we simply need to update our JAttack confi guration to attack
both parameters to the request and use our fuzz strings as payloads:
String host = “mdsec.net”;
int port = 80;
String method = “GET”;
String url = “/auth/498/YourDetails.ashx”;
Param[] params = new Param[]
{
new Param(“SessionId”, “C1F5AFDD7DF969BD1CD2CE40A2E07D19”,
Param.Type.COOKIE, true),
new Param(“uid”, “198”, Param.Type.URL, true),
};
PayloadSource payloads = new PSFuzzStrings();
With this confi guration in place, we can launch our attack. Within a few sec-
onds, JAttack has submitted each attack payload within each parameter of the
request, which would have taken several minutes at least to issue manually. It also
would have taken far longer to review and analyze the raw responses received.
The next task is to manually inspect the output from JAttack and attempt to
identify any anomalous results that may indicate the presence of a vulnerability:
param payload status length
SessionId ‘ 302 502
SessionId ;/bin/ls 302 502
cc1144..iinndddd 558899 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 590
590 Chapter 14 n Automating Customized Attacks
SessionId ../../../../../../etc/passwd 302 502
SessionId xsstest 302 502
uid ‘ 200 2941 exception quotation
uid ;/bin/ls 200 2895 exception
uid ../../../../../../etc/passwd 200 2915 exception
uid xsstest 200 2898 exception xsstest
In requests that modify the SessionId parameter, the application responds
with a redirection response that always has the same length. This behavior does
not indicate any vulnerability. This is unsurprising, since modifying the ses-
sion token while logged in typically invalidates the current session and causes
a redirection to the login.
The uid parameter is more interesting. All the modifi cations to this parameter
cause a response containing the string exception. The responses are variable
in length, indicating that the different payloads result in different responses, so
this is probably not just a generic error message. Going further, we can see that
when a single quotation mark is submitted, the application’s response contains
the string quotation, which is likely to be part of a SQL error message. This
could be a SQL injection fl aw, and we should manually investigate to confi rm
this (see Chapter 9). In addition, we can see that the payload xsstest is being
echoed in the application’s response. We should probe this behavior further to
determine whether the error message can be leveraged to perform a cross-site
scripting attack (see Chapter 12).
TRY IT!
http://mdsec.net/auth/498/
Putting It All Together: Burp Intruder
The JAttack tool consists of fewer than 250 lines of simple code, yet in a few
seconds, it uncovered at least two potentially serious security vulnerabilities
while fuzzing a single request to an application.
Nevertheless, despite its power, as soon as you start to use a tool such as
JAttack to deliver automated customized attacks, you will quickly identify
additional functionality that would make it even more helpful. As it stands, you
need to confi gure every targeted request within the tool’s source code and then
recompile it. It would be better to read this information from a confi guration
fi le and dynamically construct the attack at runtime. In fact, it would be much
cc1144..iinndddd 559900 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 591
Chapter 14 n Automating Customized Attacks 591
better to have a nice user interface that lets you confi gure each of the attacks
described in a few seconds.
There are many situations in which you need more fl exibility in how payloads
are generated, requiring many more advanced payload sources than the ones
we have created. You will also often need support for SSL, HTTP authentica-
tion, multithreaded requests, automatic following of redirections, and automatic
encoding of unusual characters within payloads. There are situations in which
modifying a single parameter at a time would be too restrictive. You will want
to inject one payload source into one parameter and a different source into
another. It would be good to store all the application’s responses for easy refer-
ence so that you can immediately inspect an interesting response to understand
what is happening, and even tinker with the corresponding request manually
and reissue it. As well as modifying and issuing a single request repeatedly, in
some situations you need to handle multistage processes, application sessions,
and per-request tokens. It would also be nice to integrate the tool with other
useful tools such as a proxy and a spider, avoiding the need to cut and paste
information back and forth.
Burp Intruder is a unique tool that implements all this functionality. It is
designed specifi cally to enable you to perform all kinds of customized auto-
mated attacks with a minimum of confi guration and to present the results
in a rich amount of detail, enabling you to quickly hone in on hits and other
anomalous test cases. It is also fully integrated with the other Burp Suite
tools. For example, you can trap a request in the proxy, pass this to Intruder
to be fuzzed, and pass interesting results to Repeater to confi rm and exploit
all kinds of vulnerabilities.
We will describe the basic functions and confi guration of Burp Intruder and
then look at some examples of its use in performing customized automated
attacks.
Positioning Payloads
Burp Intruder uses a conceptual model similar to the one JAttack uses, based
on positioning payloads at specifi c points within a request, and one or more
payload sources. However, Intruder is not restricted to inserting payload strings
into the values of the actual request parameters. Payloads can be positioned at
a subpart of a parameter’s value, or at a parameter’s name, or indeed anywhere
at all within a request’s headers or body.
Having identifi ed a particular request to use as the basis for the attack, each
payload position is defi ned using a pair of markers to indicate the start and end
of the payload’s insertion point, as shown in Figure 14-1.
cc1144..iinndddd 559911 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 592
592 Chapter 14 n Automating Customized Attacks
Figure 14-1: Positioning payloads
When a payload is inserted at a particular position, any text between the
markers is overwritten with the payload. When a payload is not being inserted,
the text between the markers is submitted instead. This is necessary in order to
test one parameter at a time, leaving others unmodifi ed, as when performing
application fuzzing. Clicking the Auto button makes Intruder set payload posi-
tions at the values of all URL, cookie, and body parameters, thereby automating
a tedious task that was done manually in JAttack.
The sniper attack type is the one you will need most frequently. It functions
in the same way as JAttack’s request engine, targeting one payload position at
a time, submitting all payloads at that position, and then moving to the next
position. Other attack types enable you to target multiple positions simultane-
ously in different ways, using multiple payload sets.
Choosing Payloads
The next step in preparing an attack is to choose the set of payloads to be
inserted at the defi ned positions. Intruder contains numerous built-in functions
for generating attack payloads, including the following:
cc1144..iinndddd 559922 88//1199//22001111 1122::1155::2222 PPMM
Stuttard c14.indd V3 - 08/11/2011 Page 593
Chapter 14 n Automating Customized Attacks 593
n Lists of preset and confi gurable items.
n Custom iteration of payloads based on any syntactic scheme. For example,
if the application uses usernames of the form ABC45D, the custom iterator
can be used to cycle through the range of all possible usernames.
n Character and case substitution. From a starting list of payloads, Intruder
can modify individual characters and their case to generate variations.
This can be useful when brute-forcing passwords. For example, the string
password can be modifi ed to become p4ssword, passw0rd, Password,
PASSWORD, and so on.
n Numbers, which can be used to cycle through document IDs, session
tokens, and so on. Numbers can be created in decimal or hexadecimal, as
integers or fractions, sequentially, in stepped increments, or randomly.
Producing random numbers within a defi ned range can be useful when
searching for hits when you have an idea of how large some valid values
are but have not identifi ed any reliable pattern for extrapolating these.
n Dates, which can be used in the same way as numbers in some situations.
For example, if a login form requires a date of birth to be entered, this func-
tion can be used to brute-force all the valid dates within a specifi ed range.
n Illegal Unicode encodings, which can be used to bypass some input fi lters
by submitting alternative encodings of malicious characters.
n Character blocks, which can be used to probe for buffer overfl ow vulner-
abilities (see Chapter 16).
n A brute-forcer function, which can be used to generate all the permuta-
tions of a particular character set in a specifi c range of lengths. Using this
function is a last resort in most situations because of the huge number
of requests it generates. For example, brute-forcing all possible six-digit