title:TRESOR-HUNT: attacking CPU-bound encryption
author:Erik-Oliver Blass and
William Robertson
TRESOR-HUNT: Attacking CPU-Bound Encryption
Erik-Oliver Blass
Northeastern University
PI:EMAIL
William Robertson
Northeastern University
PI:EMAIL
ABSTRACT
Hard disk encryption is known to be vulnerable to a num-
ber of attacks that aim to directly extract cryptographic key
material from system memory. Several approaches to pre-
venting this class of attacks have been proposed, including
Tresor [18] and LoopAmnesia [25]. The common goal of
these systems is to conﬁne the encryption key and encryp-
tion process itself to the CPU, such that sensitive key ma-
terial is never released into system memory where it could
be accessed by a DMA attack.
In this work, we demonstrate that these systems are never-
theless vulnerable to such DMA attacks. Our attack, which
we call Tresor-Hunt, relies on the insight that DMA-capable
adversaries are not restricted to simply reading physical
memory, but can write arbitrary values to memory as well.
Tresor-Hunt leverages this insight to inject a ring 0 attack
payload that extracts disk encryption keys from the CPU
into the target system’s memory, from which it can be re-
trieved using a normal DMA transfer.
Our implementation of this attack demonstrates that it
can be constructed in a reliable and OS-independent manner
that is applicable to any CPU-bound encryption technique,
IA32-based system, and DMA-capable peripheral bus. Fur-
thermore, it does not crash the target system or otherwise
signiﬁcantly compromise its integrity. Our evaluation sup-
ports the OS-independent nature of the attack, as well as its
feasibility in real-world scenarios. Finally, we discuss several
countermeasures that might be adopted to mitigate this at-
tack and render CPU-bound encryption systems viable.
1.
INTRODUCTION
Hard disk encryption is an increasingly popular set of tech-
niques for preserving the conﬁdentiality of persistent data.
In such approaches, each block is encrypted before writing
it to disk, and blocks are decrypted after reading them from
disk. Disk encryption is completely transparent from the
user’s perspective, and virtually all major operating sys-
tems support this security mechanism—e.g., BitLocker [16]
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
for Microsoft Windows, FileVault [1] for Mac OS X, and dm-
crypt [4] for Linux. A similar functionality is provided by
prominent third-party applications such as TrueCrypt [28]
and PGP [26].
However, it has been shown previously that an adver-
sary with physical access to a machine can circumvent disk
encryption and access sensitive data. For instance, by at-
taching a malicious device to a running target machine, the
adversary can perform a so-called DMA attack [5, 2, 13,
3, 20, 12].1 Certain peripheral hardware busses—such as
FireWire, Thunderbolt, or ExpressCard—give direct, un-
fettered access to a system’s main memory. As such, the
malicious device simply reads out the encryption key used
to encrypt the hard disk using a DMA transfer. Know-
ing the secret key, the adversary can decrypt the hard disk
and access data. Such DMA attacks are not only academic,
but have already been seen in the real world [22]. As of
today, there are password-recovery toolkits available that
render DMA attacks accessible to everyone [21]. In conclu-
sion, DMA attacks pose a major threat to any unattended
machine.
To mitigate the problem of DMA attacks, recent work [18,
25] has suggested moving the encryption key from RAM to
the CPU, which is inaccessible via DMA. Additionally, en-
cryption is solely performed using CPU registers, thwarting
any attempts to reveal sensitive key material using DMA
transfers. We refer to cryptographic systems with this prop-
erty as CPU-bound.
In this paper, we show that CPU-bound hard disk en-
cryption is insecure as presented in prior work. We present
a novel, realistic, and concrete attack, where an adversary
with access to a DMA-capable hardware bus can access en-
cryption keys of a CPU-bound encryption system. The crit-
ical observation underlying our work is that attackers are
not only able to read from a system’s memory, but are also
able to write arbitrary code and data into memory. Using
this capability, we demonstrate that an attacker can expose
a CPU-bound encryption key by injecting a small piece of
code into the operating system kernel. This code transfers
the encryption key from the CPU into RAM, from which it
can be accessed using a standard DMA transfer.
To summarize, our contributions are the following:
• We demonstrate that by leveraging the write capability
1DMA, or Direct Memory Access, refers to the capability of
peripheral system hardware to transfer data to or from main
memory without the involvement of the CPU. This feature
is intended to improve system performance, but comes at
the expense of centralized memory access enforcement.
71
of DMA transfers, an attacker can bypass the protec-
tions aﬀorded by CPU-bound disk encryption systems
such as Tresor [18] and LoopAmnesia [25].
• We experimentally validate the feasibility of the at-
tack by implementing it against Tresor in an OS-
independent way that only depends upon details of the
IA32(e) architecture. The resulting attack is capable
of circumventing Tresor in a matter of seconds with-
out crashing or otherwise signiﬁcantly compromising
the integrity of the target system.
We note that while we concretely focus on Tresor and
FireWire-based DMA, our attack is directly applicable
to all CPU-bound disk encryption systems, all IA32(e)-
based systems, and all peripheral busses with DMA
capabilities such as Thunderbolt or ExpressCard.
• We discuss potential mitigation strategies for our at-
tack that improve the security of CPU-bound disk en-
cryption.
The remainder of this paper is structured as follows. In
Section 2, we present relevant background information on
CPU-bound disk encryption, and on Tresor in particular.
We present our speciﬁc attack on Tresor in Section 3, and
evaluate its eﬃcacy in Section 4. We discuss the feasibility
of our attack and of CPU-bound encryption in Section 5.
Finally, we present related work and brieﬂy conclude in Sec-
tions 6 and 7.
2. BACKGROUND
CPU-bound disk encryption systems are intended to ren-
der normal disk encryption systems resilient to evil maid at-
tacks [23], cold boot attacks [7], and other scenarios where
attackers might gain physical access to a running target
system. In this section, we describe the threat model, as-
sumptions, and implementation of Tresor [18], a recent,
representative example of CPU-bound disk encryption. We
stress, however, that while we ground our discussion in the
example of Tresor, the main ideas directly carry over to
similar proposals such as LoopAmnesia. Where appropri-
ate, we highlight details speciﬁc to Tresor.
2.1 Threat Model
Tresor adopts a strong adversarial model, in which at-
tackers can execute arbitrary code in ring 3 on IA32 systems.
Therefore, attackers can execute code with root privileges on
UNIX-like systems, or as ADMINISTRATOR or SYSTEM
on Windows-based systems. However, attackers should not
be able to execute code in ring 0, and Tresor takes several
steps to prevent this from occurring—even when such execu-
tion would normally be allowed—that are described below.
Similarly, attackers should not be able to access kernel mem-
ory.
Tresor assumes that it is run directly on the hardware,
and not as a virtualized guest that could be introspected by
a privileged host operating system.
Tresor does not guarantee that legitimate ring 0 code
will not leak information about the encryption key from the
CPU, e.g., by copying values from debug registers or exe-
cuting program paths that are dependent on debug register
values.
As Tresor is intended to prevent most realistic physical
attacks against hard disk encryption, attackers can exam-
ine the contents of memory using a number of techniques,
including hardware bus inspection, cold boot attacks, and
DMA transfers initiated by peripheral devices. It is assumed
that directly inspecting CPU state is diﬃcult, for instance by
attaching JTAG debuggers or specialized hardware probes.
2.2 Implementation
Tresor, and other CPU-bound disk encryption systems,
maintains the conﬁdentiality of the encryption key by con-
ﬁning it and the encryption process to the CPU. In the fol-
lowing, we discuss the speciﬁcs of how Tresor accomplishes
this.
Key Storage.
Because CPU registers are not directly accessible by DMA
transfers, Tresor uses them to store the encryption key.
However, even though CPU registers cannot be directly ac-
cessed through DMA, they could be indirectly read without
taking extra precautions. Software running in user space can
be preempted, and user space registers will automatically be
persisted to memory as part of a context switch. Using user
space registers would therefore be prone against a well-timed
DMA attack against the process control blocks of the ker-
nel. This automatically disqualiﬁes pure user space-based
approaches.
Therefore, Tresor uses the debug registers dr0, dr1, dr2,
and dr3, giving a total of 4 · 32 = 128 bits of storage for 32-
bit machines, or 4 · 64 = 256 bits of storage for 64-bit ma-
chines. This is enough to accommodate AES-128 or AES-
256, respectively. In addition, the IA32 hardware speciﬁca-
tion ensures that the debug registers are inaccessible outside
of ring 0 code.
An ASCII passphrase is initially entered at system boot
time. The kernel then derives an AES key from the user’s
input using SHA-256 applied a number of times, and stores
the resulting key into the debug registers. The kernel im-
mediately wipes the memory used for the initial passphrase
and AES key derivation. On multi-core machines, the same
key is written in the debug registers of all cores.
Other CPU-bound encryption schemes use diﬀerent regis-
ters for the same purpose. For instance, LoopAmnesia uses
Intel Machine Speciﬁc Registers (MSRs), and the previous
version of Tresor uses the Intel Streaming SIMD Exten-
sion (SSE) registers [17].
AES Implementation.
Tresor relies upon the Intel AES-NI instruction set to
perform AES encryption. Recent Intel CPUs—e.g., Core i5
and Core i7—implement this instruction set to support AES
encryption and decryption in hardware. The aesenc(x,y)
CPU instruction performs one round of AES encryption
(SubBytes, ShiftRows, MixColumns, and AddRoundKey) in
one CPU cycle. Here, (x,y) are drawn from the set of
sixteen SSE registers xmm0 to xmm15. The ﬁrst register x
contains the current round key, and the second register y
contains the current state of the AES encryption. The out-
put of aesenc, the AES state, is written into the destination
register y. Therewith, Tresor encrypts one plaintext block
completely outside of RAM.
To generate the diﬀerent round keys completely outside of
RAM, Tresor uses the aeskeygenassist instruction. The
72
IDT Entry
Interrupt
Handler
Target Memory
Attack
Payload
Enc. Key
FireWire
Attacker
Figure 1: Overview of Tresor-Hunt. The attacker overwrites physical memory in the target system to hook an interrupt
handler. Then, an attack payload is executed that extracts the disk encryption key from the CPU into memory. The attacker
can then initiate a DMA transfer to obtain the key.
AES key is copied from the debug registers into the ﬁrst SSE
register xmm0. Using aeskeygenassist, the 13 subsequent
round keys can be derived from xmm0 and are written into
xmm1 to xmm13.
To enable access to SSE registers during encryption, Tre-
sor deﬁnes the complete 14 round AES encryption within
an atomic block in the kernel. This block cannot be in-
terrupted, and SSE registers are saved while entering this
block and restored before leaving. Being atomic, neither
preemption by scheduling nor interrupts can disturb AES
encryption and potentially leak the content of the registers
to RAM.
Finally, Tresor exports its AES interface to the Linux
Crypto-API. This makes it available to standard Linux disk
encryption software such as dm-crypt.
Kernel Integrity.
As dictated by the threat model, Tresor assumes that at-
tackers cannot run arbitrary code in ring 0. To enforce this,
Tresor takes additional steps to prevent the otherwise-
allowed execution of attacker-controlled code in a kernel con-
text.
1) The ptrace system call is modiﬁed to disallow access
to the debug registers. Normally, ptrace allows user
space programs such as debuggers to read and write
debug registers, e.g., to set hardware breakpoints.
2) Kernel memory introspection from user space, enabled
by special devices such as /dev/kmem, is disallowed.
Otherwise, an attacker with suﬃcient ring 3 privileges
could trivially read and write into kernel space, modi-
fying, e.g., the atomic block within the kernel to read
out debug registers.
3) Similarly, support for loadable kernel modules (LKMs)
is removed. Otherwise, an attacker can insert a kernel
module that reads out the debug registers.
These assumptions can be generalized to a kernel integrity
property. Essentially, any CPU-bound encryption system
depends on the integrity of kernel code, which is diﬃcult to
guarantee in general. We will now demonstrate that, even
73
if the above assumptions hold and kernel integrity can be
guaranteed against any local attacker with full user space
privileges, DMA-based attacks are powerful enough to cir-
cumvent all of the above protection mechanisms.
3. A CPU-BOUND ENCRYPTION ATTACK
While CPU-bound disk encryption systems like Tresor
increase the diﬃculty for an adversary to compromise disk
encryption keys, they are not impervious to attack under
the threat model discussed in Section 2. In this section, we
present an end-to-end attack against Tresor, which we call
Tresor-Hunt. Note that while we focus on Tresor as a
case study, the techniques we employ generalize to any com-
bination of CPU-bound disk encryption scheme, IA32-based
OS, and DMA-capable hardware bus. In particular, while
incorporating OS-speciﬁc knowledge would greatly simplify
the attack—and would clearly be desirable should this infor-
mation be conﬁrmed for a particular target—we show that
OS-speciﬁc details are not required, and that the attack is
equally applicable to Windows, Mac OS X, and Linux with-
out a priori knowledge of which OS is deployed on the tar-
get.
3.1 Attack Overview
Figure 1 presents a graphical overview of the attack. We
outline the individual steps here.
1) First, the attacker gains physical access to the running
IA32-based target system and attaches a device to a