title:CFIMon: Detecting violation of control flow integrity using performance
counters
author:Yubin Xia and
Yutao Liu and
Haibo Chen and
Binyu Zang
CFIMon: Detecting Violation of Control Flow Integrity using
Performance Counters
Yubin Xia† ‡, Yutao Liu† ‡, Haibo Chen†, Binyu Zang‡
†Institute of Parallel and Distributed Systems, Shanghai Jiao Tong University
‡School of Computer Science, Fudan University
Abstract
Many classic and emerging security attacks usually
introduce illegal control ﬂow to victim programs. This
paper proposes an approach to detecting violation of
control ﬂow integrity based on hardware support for
performance monitoring in modern processors. The key
observation is that the abnormal control ﬂow in security
breaches can be precisely captured by performance
monitoring units. Based on this observation, we design
and implement a system called CFIMon, which is the
ﬁrst non-intrusive system that can detect and reason
about a variety of attacks violating control ﬂow integrity
without any changes to applications (either source or
binary code) or requiring special-purpose hardware.
CFIMon combines static analysis and runtime training
to collect legal control ﬂow transfers, and leverages
the branch tracing store mechanism in commodity
processors to collect and analyze runtime traces on-the-
ﬂy to detect violation of control ﬂow integrity. Security
evaluation shows that CFIMon has low false positives or
false negatives when detecting several realistic security
attacks. Performance results show that CFIMon incurs
only 6.1% performance overhead on average for a set
of typical server applications.
1. Introduction
Security breaches have been a major threat to the de-
pendability of networked systems, due to the inevitable
security vulnerabilities in many software systems.
Viruses exploiting such vulnerabilities have caused loss
in millions of dollars
[1], [2], [3], resulting in not
only economic problems, but also signiﬁcant social
impact [4], [3].
Currently, many classes of security exploits usually
involve introducing abnormal control ﬂow transfers. For
example, the code-injection attack leverages security
vulnerabilities to inject malicious code to a program and
then redirects control ﬂow to the injected code to gain
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
control. To bypass protection from processor and OS
support for non-executable stack, sophisticated attack-
ers switch to code-reuse attack that leverages existing
code to form malicious gadgets. There are currently
multiple classes of code-reuse attacks: 1) return-to-libc
attack [5], which overwrites stack to redirect the control
to library functions in libc; 2) return-oriented pro-
gramming [6], which injects a forged stack containing
instruction addresses in existing binary and leverages
ret-like instructions to transfer control ﬂow among these
instructions to form malicious gadgets; 3) jump-oriented
programming [7], which uses indirect branches instead
of “ret” and a dispatcher gadget to transfer control ﬂow
among existing binary to form malicious gadgets.
There are current many countermeasures to defeat
against these attacking means. Some approaches de-
fend against code-injection attacks,
including Stack-
Guard [8], FormatGuard [9] and non-executable stacks.
Some systems defend return-oriented programming by
leveraging either heuristic characteristics [10] and elim-
inated all “ret” instructions [11], [12]. However, these
approaches are usually ad-hoc to a speciﬁc protection
means. For jump-oriented programming, there are cur-
rently few effective means to defend against it.
There are also several general approaches that may
defeat against these attacks. For example, control ﬂow
integrity [13] statically rewrites a program and uses
dynamic inlined guards to check the integrity of control
ﬂow. However, this approach may suffer from the cov-
erage problems as static analysis along can easily either
overlook legal or tolerate illegal control ﬂow transfers.
Control ﬂow locking [14] recompiles a program to limit
the number of abnormal control ﬂow transfer, which is
thus difﬁcult to be applied to legacy applications.
To improve the efﬁciency and/or coverage of detec-
tion of control ﬂow violation, researchers have also
proposed architectural support to validate or enforce
control ﬂow integrity [15], [16], [17]. For example,
Shi et al. [17] enhance the branch target buffer with
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:22 UTC from IEEE Xplore.  Restrictions apply. 
a bloom-ﬁlter like signature table to abnormal control
ﬂow. However, these proposals need to change existing
processors, thus are not readily deployable in stock
systems.
In this paper, we propose a non-intrusive approach to
detecting a set of attacks that cause abnormal control
ﬂow transfers, without changes to existing hardware,
source code or binaries. The approach we propose,
namely CFIMon,
leverages the pervasively available
hardware support for performance monitoring in com-
mercial processors, to collect the legal sets of control
transfers and monitor control ﬂow deviation of a running
application to detect possible attacks. The key observa-
tion of CFIMon is that security breaches causing abnor-
mal control ﬂow that can be precisely captured by the
branch tracing mechanisms in performance monitoring
units in commodity processors.
Performance monitoring units have been standard
components in almost all commercial processors. They
provide non-intrusive and low-overhead ways of online
performance monitoring and optimization. To improve
monitoring precision [18], [19] and lower performance
overhead, commercial processors have been integrated
with support for precise monitoring mode, including
Intel’s Precise Event Based Sampling (PEBS) [20],
AMD’s Instruction-based Sampling (IBS) [21] and Pow-
erPC’s Instruction Marking. To analyze control ﬂow be-
havior of a program, commercial processors have been
integrated with support for Branch Tracing, including
Intel’s Branch Trace Store (BTS) and Itanium2’s Branch
Trace Buffer (BTB). These features allow collecting
all branch instructions in a predeﬁned buffer for future
analysis.
We leverage hardware support for performance mon-
itoring, which is originally designed for tuning the
performance of both applications and system software,
to collect legal control transfers and detect violation of
control ﬂow integrity. To detect such attacks, we use
both static analysis and runtime training to collect the
legal set of control ﬂow transfers. During the training
phase, CFIMon continuously monitors the performance
samples using the BTS mechanism and correlates the
traces with the set obtained from static analysis to
generate a high-precise set of control transfers. During
normal execution, CFIMon also uses the BTS mecha-
nism to collect and analyze in-ﬂight control transfers.
Any deviation in performance samples can be used as
signs of possible attacks. Upon the detection of an
attack, the recorded branch traces can be used to locate
the exploited security vulnerability and reason how the
vulnerability is exploited.
on perf events [22] supports in Linux kernel 2.6.34 1,
to detect possible attacks. CFIMon currently supports
x86 architecture, including Intel Core Duo, Core i5 and
i7, using the PEBS and branch trace store mechanism
in these processors.
To measure the effectiveness of CFIMon, we have
conducted a variety of security tests using real-world
vulnerabilities,
including heap/stack/integer overﬂow,
format string vulnerabilities and dangling pointers. Our
evaluation results indicate that CFIMon can precisely
detect the attacks at the ﬁrst time it happens. We also
show that it is very easy to reason about the attacks us-
ing the branch traces collected by CFIMon. Performance
evaluation results show that CFIMon incurs modest
performance overhead for real-world applications.
Based on our experience, we further propose several
enhancements to existing performance monitoring units
(PMUs) for both performance and detection ability. To
further lower performance overhead, we propose adding
event ﬁltering mechanism in Branch Trace Store to se-
lectively record a few branches instead of recording all
branching instructions. To further enhance the detection
ability of CFIMon, such as detecting non-control-data
attacks [23], current PMUs can be enhanced to support
collecting precise linear address of each memory opera-
tions. Finally, current PMUs can be enhanced to support
simultaneously monitoring of multiple events precisely,
so that multiple events could be used to simultaneously
detect a variety of attacks (e.g., control and non-control
data attacks).
In summary, this paper makes the following contri-
butions:
• The key observation that abnormal control transfers
in security breaches can be precisely captured in
performance samples of the Branch Trace Store
mechanism.
• The CFIMon system for detecting security
breaches, which is the ﬁrst system that leverages
the hardware support for performance counters to
precisely detect and analyze attacks.
• A working implementation of the above techniques
on commercial processors, as well as security and
performance evaluation to demonstrate the effec-
tiveness of our approach.
The rest of the paper is organized as follows: The
next section provides some background information on
existing hardware support for performance monitoring.
Section 3 illustrates the idea and design of CFIMon, fol-
lowed by the implementation issues in section 4. After
describing the experimental setup, the security analysis
of CFIMon and its incurred performance overhead are
We have designed and implemented a prototype based
and FreeBSD, which will be our future work.
1. It should be easy to port CFIMon to other OSes such as Windows
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:22 UTC from IEEE Xplore.  Restrictions apply. 
evaluated in section 5.1 and section 5.2 accordingly.
Section 6 discusses some implications on hardware
enhancement for further enhancing performance and
detection ability in CFIMon. Finally, we review pre-
vious literature in section 7 and conclude the paper in
section 8.
2. Performance Monitoring Units
There are generally two working modes of PMUs:
interrupt-based mode and precision mode. In the ﬁrst
mode, a counter will automatically increase and gen-
erate an interrupt when it has reached a predeﬁned
threshold (i.e., event-based sampling) or predeﬁned time
has elapsed (i.e.,
time-based sampling). This is the
basic performance counter mode, which supports most
types of events, but lacks precise instruction pointer
information, resulting in that the reported IP (instruction
pointer) is up to tens of instructions away from the
instruction causing the event, due to the out-of-order
execution in modern processors. For example, according
to AMD’s manual, the reported IP may be up to 72
instructions away from the actual IP [21] causing the
event.
To improve the precision and ﬂexibility of PMUs,
most commodity processors also support a precise mode
of performance monitoring, including the Precise Event-
Based Sampling (PEBS), Branch Trace Store (BTS),
Last Branch Record (LBR) and Event Filtering (EF).
Currently, most existing commodity processors support
parts of the features mentioned above.
Precise Performance Counter: In PEBS, the sam-
ples of performance counters are written into a pre-
registered memory region. When the memory region
is nearly full, an interrupt is generated to trigger the
handler. By batching the samples and processing them
together,
this mechanism improves the performance
of monitoring signiﬁcantly. Meanwhile, thanks to the
atomic-freeze feature,
the IP addresses recorded in
traces are exactly the ones causing the event. However,
only a few events are PEBS events in Intel Core and i7
processors.
Branch Trace Store: Intel’s BTS mechanism pro-
vides the capability of capturing all control transfer
events and saving the events in a memory-resident BTS
buffer. The events include all types of jump, call, return,
interrupt and exception. The recorded information in-
cludes the addresses of branch source and target. Thus,
it enables the monitoring of the whole control ﬂow of
an application. Similar as PEBS, the branch trace is
also recorded in a pre-registered memory region, which
makes the batching processing possible.
Last Branch Record: LBR in Intel Core and Core
i7, as well as Branch Trace Buffer (BTB) in Itanium2,
records the most recent branches into a register stack.
This mechanism records similar data as in BTS. It
records the source address and target address of each
branch, thus provides the ability to trace the control
ﬂow of a program as well. However, due to the small
size of the register stack (e.g., Intel Core has 4 pairs,
Core i7 has 16 pairs, Itanium2 has 8 PMD registers),
previous samples may be overwritten by upcoming
samples during monitoring.
Event Filtering: The Event Filtering mechanism pro-
vides additional constraints to record events. It is used
to ﬁlter events not concerned with. For example, latency
constraints can be applied in Itanium2’s cache related
events, which only count on high latency cache misses.
Further, constraints such as “do not capture conditional
branches”, “do not capture near return branches” are
generally available on recent processors, which support
LBR/BTB such as Intel Core i7 and Itanium2. However,
this mechanism is currently only available in LBR/BTB,
control
transfers recorded in BTS lack this type of
ﬁltering support.
Conditional Counting: To separate user-level events
from kernel-level ones, PMUs also support conditional
event counting: they only increment counter while the
processor is running at a speciﬁc privilege level (e.g.
user, kernel or both). Further, to isolate possible inter-
ferences in performance counters among multiple pro-
cesses/threads, operating systems are usually enhanced
by saving and restoring performance counters during
context switches.
3. CFI Enforcement by CFIMon
CFIMon adopts two phases: ofﬂine phase and online
phase. During the ofﬂine phase, CFIMon builds a legal
set of target addresses for each branch instruction.
During the online phase, CFIMon collects branch traces
from applications and diagnoses possible attacks with
legal sets following a number of rules. A rule can be
applied to a portion or all of branch traces, and can
determine the status of the branch as legal, illegal or
suspicious. Further decision will be made depending on
the status of the branch and context.
This section ﬁrst describes the requirements of dif-
ferent branch types for enforcing control ﬂow integrity,
and then presents the reasons of choosing the BTS
(Branch Trace Store) among all the performance coun-
ters to monitor the control ﬂow. Finally, we describe our
approaches to detecting typical attacks and use several
real-world vulnerabilities to show how to detect control
ﬂow violation when the vulnerabilities are exploited,
and discuss possible issues with CFIMon.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:22 UTC from IEEE Xplore.  Restrictions apply. 
Branch Type
Branch Example
Target Instruction
Target Set
In Binary Run-time
Direct call
Direct jump
Return
Indirect call
Indirect jump
callq 34df0  1: taken
jnz c2ef0  1 or 2: taken or fallthrough
Limited: insn. next to a call
retq
Limited: 1st insn. of a function
callq *%rax
jmpq *%rdx
Unlimited: potentially any insn.
/
/
ret set
call set
train set
16.8%
74.3%
6.3%
2.1%
0.5%
14.5%
0.8%
16.3%
0.2%
68.3%
TABLE 1. Branch Classiﬁcation. The distribution is from Apache and libraries it uses.
3.1. Branch Classiﬁcation
The control ﬂow integrity of an application can be
maintained if we can 1) get a legal set of branch target
addresses for every branch, and 2) check whether the
target address of every branch is within the correspond-
ing legal set at runtime. There are ﬁve types of branches
in x86 ISA, including direct jump, direct call, indirect
jump, indirect call, and return. Table 1 shows examples
for each branch type.
A direct jump has only one target address if it is an
unconditional jump, or two target addresses if it is a con-
ditional jump. For example, instruction “0x403291: jnz
0x403200” has two possible target addresses: 0x403200
if the branch is taken, and the address of the next
instruction if the branch falls through. Similarly, a direct
call also has only one target address. Since the code
is read-only and cannot be modiﬁed during runtime, a
direct branch, either a direct jump or call, is always
considered as a safe one.
However, not all branch instructions have determin-
istic target address set. An indirect jump, e.g., “jmp
%eax”, may theoretically branch to any instruction in
the memory space. It is not possible to gain the whole
legal target address set of indirect jump just by statically
scanning the binary.
Unlike indirect jump, the legal target set of an indirect
call is limited. A call can only transfer control to the