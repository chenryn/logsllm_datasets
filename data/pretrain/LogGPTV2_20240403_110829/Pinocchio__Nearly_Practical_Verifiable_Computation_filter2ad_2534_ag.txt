[59] B. Kreuter, abhi shelat, and C.-H. Shen, “Billion-gate secure computa-
tion with malicious adversaries,” in Proc. of USENIX Security, 2012.
[60] S. Setty, B. Braun, V. Vu, A. J. Blumberg, B. Parno, and M. Walﬁsh,
“Resolving the conﬂict between generality and plausibility in veriﬁed
computation,” in Proc. of the ACM European Conference on Computer
Systems (EuroSys), Apr. 2013.
[61] V. Vu, S. Setty, A. J. Blumberg, and M. Walﬁsh, “A hybrid architecture
for interactive veriﬁable computation,” in IEEE Symposium on Security
and Privacy, May 2013.
[62] J. B. Almeida, E. Bangerter, M. Barbosa, S. Krenn, A.-R. Sadeghi,
and T. Schneider, “A certifying compiler for zero-knowledge proofs of
knowledge based on σ-protocols,” in Proc. of ESORICS, 2010.
[63] S. Meiklejohn, C. C. Erway, A. K¨upc¸ ¨u, T. Hinkle, and A. Lysyanskaya,
“ZKPDL: A language-based system for efﬁcient zero-knowledge
proofs and electronic cash,” in Proc. of USENIX, 2010.
[64] M. Backes, M. Maffe, and K. Pecina, “Automated synthesis of privacy-
preserving distributed applications,” in Proc. of ISOC NDSS, 2012.
[65] R. Cramer, I. Damg˚ard, and B. Schoenmakers, “Proofs of partial
knowledge and simpliﬁed design of witness hiding protocols,” in Proc.
of CRYPTO, 1994.
[66] J. Groth and A. Sahai, “Efﬁcient non-interactive proof systems for bi-
linear groups,” in Proc. of EUROCRYPT, 2008.
[67] D. Boneh and X. Boyen, “Short signatures without random oracles,” in
EUROCRYPT, 2004.
[68] R. Gennaro, “Multi-trapdoor commitments and their applications to
proofs of knowledge secure under concurrent man-in-the-middle at-
tacks,” in CRYPTO, 2004.
A Cryptographic Assumptions
We deﬁne the hardness assumptions that we use in the secu-
rity proof of our optimized VC construction from Section 3.1.
Suppose (p,G,GT ,e) ← G(1κ) outputs a description of a
cyclic bilinear group [34] of order p, a κ-bit prime, where
e : G× G → GT is the usual pairing (bilinear map) function.
Below, let κ be a security parameter, q = poly(κ), and let A
be a non-uniform probabilistic polynomial time adversary.
Assumption 1 (q-PDH [21]) The q-power Difﬁe-Hellman
(q-PDH) assumption holds for G if for all A we have
(p,G,GT ,e) ← G(1κ) ; g ← G\{1} ; s ← Z∗
p ;
σ ← (p,G,GT ,e,g,gs, . . . ,gsq
, . . . ,gs2q
) ;
y ← A(σ) : y = gsq+1
,gsq+2
] = negl(κ).
Pr[
Assumption 2 (q-PKE [21]) The q-power knowledge of ex-
ponent assumption holds for G if for all A there exists a non-
uniform probabilistic polynomial time extractor χA such that
Pr[
(p,G,GT ,e) ← G(1κ) ; g ← G\{1} ; α,s ← Z∗
p ;
σ ← (p,G,GT ,e,g,gs, . . . ,gsq
,gα,gαs, . . . ,gαsq
) ;
(c, ˆc ; a0, . . . ,aq) ← (A (cid:107) χA)(σ,z) :
ˆc = cα ∧ c (cid:54)= ∏q
] = negl(κ)
i=0 gaisi
for any auxiliary information z ∈ {0,1}poly(κ) that is gener-
ated independently of α. Note that (y;z) ← (A (cid:107) χA)(x) sig-
niﬁes that on input x, A outputs y, and that χA, given the same
input x and A’s random tape, produces z.
Assumption 3 (q-SDH [67, 68]) The
Difﬁe-
Hellman (q-SDH) assumption holds for G if for all A:
q-strong
Pr[
(p,G,GT ,e) ← G(1κ) ; g ← G\{1} ; s ← Z∗
p ;
σ ← (p,G,GT ,e,g,gs, . . . ,gsq
) ;
y ← A(σ) : y = e(g,g)
1
s+c ,c ∈ Z∗
p] = negl(κ).
B Security Proof for Our VC Scheme
To prove Theorem 1, we assume there exists an adversary Avc
who returns a cheating proof, and we show how to construct
an adversary B that uses Avc and a d-PKE assumption knowl-
edge extractor [21] to break either the q-PDH assumption [21]
or the 2q-SDH assumption [67, 68], where q = 4d + 4. These
assumptions are deﬁned in Appendix A.
,gsq+2
Let B be given a challenge g,gs, . . . ,gsq
, . . . ,gs2q.
(This challenge can be interpreted as either a q-PDH in-
stance, or a subset (missing gsq+1) of a 2q-SDH instance.)
Avc generates a function f with N input/output wires that has
a QAP Q f = (t(x),V ,W ,Y ) of size m and degree d. (So
that this proof covers the zero-knowledge variant of the VC
scheme, we include t(x) in each of the sets V ,W ,Y .) Let
Imid = {N + 1, ...,m}, i.e., the non-IO-related indices.
v
y
v
w
B provides evaluation and veriﬁcation keys to Avc, using
}k∈[m],
}k∈[m],
the same structure as in Protocol 2:
}k∈Imid ,
EK = ( {gvk(s)
{gwk(s)
}k∈Imid , {gαwwk(s)
{gαvvk(s)
{gβvk(s)
{gsi}i∈[d],
V KF = (g,gαv ,gαw ,gαy ,gγ,gβγ,{gvk(s)
v
where r(cid:48)
v, r(cid:48)
w, gv = gr(cid:48)
r(cid:48)
vr(cid:48)
y = r(cid:48)
and the values β and γ are set as described next.
Regarding β, write the ﬁnal proof term with g as the base:
,gy0(s)
w, αv, αw, and αy are chosen uniformly at random,
ys3(d+1),
{gyk(s)
}k∈[m],
}k∈[m], {gαyyk(s)
}k∈[m]
gβwk(s)
w
}k∈{0}∪Iin ,gw0(s)
ws2(d+1), and gy = gr(cid:48)
vsd+1, gw = gr(cid:48)
y
gβyk(s))
y
w
w
v
y
),
,gt(s)
y
),
gβv(s)
v
gβw(s)
w
y = gβ(r(cid:48)
gβy(s)
vsd+1v(s)+r(cid:48)
ws2(d+1)w(s)+r(cid:48)
ys3(d+1)y(s)).
(1)
That is, in the exponent, β is multiplied with a certain poly-
nomial that is evaluated at s. B also generates β as a polyno-
mial evaluated at s. In particular, it sets β = sq−(4d+3)βpoly(s),
where βpoly(x) is a polynomial of degree at most 3d + 3
251
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:11 UTC from IEEE Xplore.  Restrictions apply. 
sampled uniformly at random such that βpoly(x)· (r(cid:48)
vvk(x) +
r(cid:48)
wxd+1wk(x) + r(cid:48)
yx2(d+1)yk(x)) has a zero coefﬁcient in front
of x3d+3 for all k. We know that such a polynomial βpoly(x)
exists by Lemma 10 of GGPR [30], which says (roughly)
that, given a set of polynomials {uk(x) ∈ F[x]} of degree at
most D, then there exists a nonzero polynomial a(x) of de-
gree D + 1 such that all of the polynomials a(x)uk(x) have a
nonzero coefﬁcient for xD+1, and moreover for any polyno-
mial u(x) not in the linear span of {uk(x)}, the coefﬁcient of
xD+1 in a(x)u(x) is uniformly random in F (when sampling
a(x) uniformly subject to the above restriction). By inspec-
tion, when we now write out β in terms of s, we see that the
exponent in Equation 1 has a zero in front of sq+1, and also
the powers of s only go up to degree q + 3d + 3 ≤ 2q. There-
fore, B can efﬁciently generate the terms in the evaluation
key that contain β using the elements given in his challenge.
Regarding γ, B generates γ(cid:48) uniformly at random from
F and sets γ = γ(cid:48)sq+2.
B can generate gγ efﬁciently
from its challenge, since gsq+2
is given. Also, βγ =
sq−(4d+3)βpoly(s)γ(cid:48)sq+2 does not have a term sq+1 and has de-
gree at most q− (4d + 3) + (3d + 3) + (q + 2) ≤ 2q, and so B
can generate gβγ from the elements in its challenge.
Similarly none of the other elements in the CRS contains a
term sq+1 in the exponent, since all of the polynomials vk(x),
wk(x) and yk(x) are of degree d and q ≥ 4d +4. Hence, B can
generate them using the terms from its challenge.
Thus, the evaluation and veriﬁcations keys generated by B
have a distribution statistically identical to the real scheme.
Given EKF and V KF, Avc can run the Compute and Verify
w , gY(cid:48)
, gW(cid:48)
algorithms on its own. Let gVmidv
y ,
and gZ be a cheating proof that Avc provides for the result of
the computation of f with input and output {ck}k∈[N].
y , gH, gV(cid:48)
midv
w , gY
, gW
)αv = gV(cid:48)
v }i∈[0,d],{gαvsi
Since the veriﬁcation holds, we have that (gVmidv
mid .
We claim that B can run the d-PKE extractor χA to re-
cover a polynomial Vmid(x) of degree at most d such that
Vmid = Vmid(s). Though it may not be immediately recog-
nizable as such, the parameters received by Avc are a valid
input (σ,z) for the d-PKE assumption. In particular, a valid
input consists of σ = ({gsi
}i∈[0,d]) and z, where
the auxiliary information z is independent of αv, and other
terms in the CRS can be generated efﬁciently from (σ,z).
The terms {gvk(s)
} can indeed be efﬁciently generated from
{gsi
v }, and the auxiliary information z that Avc receives is in-
deed independent of αv. Therefore, B can invoke the d-PKE
extractor χA to recover Vmid(x), which must be a polyno-
mial of degree at most d. Similarly, B recovers W (x), Y (x)
such that W = W (s) and Y = Y (s). Then, it sets H(x) =
((v0(x) +V (x))(w0(x) +W (x))− (y0(x) +Y (x)))/t(x), where
V (x) = ∑k∈[N] ckvk(x) +Vmid(x).
v
v
Since the proof veriﬁes, but the statement is false (and
therefore the extracted polynomials cannot actually be a QAP
solution), there are two possible cases: (1) H(x) has a non-
trivial denominator, or (2) The polynomial r(cid:48)
vxd+1V (x) +
vxd+1vk(x) + r(cid:48)
vxd+1V †(x) + r(cid:48)
yx3(d+1)Y (x) is not in the space gener-
wx2(d+1)wk(x) +
r(cid:48)
wx2(d+1)W (x) + r(cid:48)
ated by the polynomials {r(cid:48)
yx3(d+1)yk(x)}k∈[m].
r(cid:48)
First, we show that these are the only two cases, if the
proof veriﬁes but the statement is false. Let S be the linear
subspace generated by linear combinations of {r(cid:48)
vxd+1vk(x) +
yx3(d+1)yk(x)}k∈[m]. For any polynomial in
r(cid:48)
wx2(d+1)wk(x) + r(cid:48)
this subspace, there exists a linear combination {ck}k∈[m] such
that the polynomial equals r(cid:48)
wx2(d+1)W †(x) +
r(cid:48)
yx3(d+1)Y †(x), where V †(x) = ∑k∈[m] ckvk(x), W †(x) =
∑k∈[m] ckwk(x), Y †(x) = ∑k∈[m] ckyk(x). Each of the polyno-
mials V †(x),W †(x),Y †(x) has degree at most d because they
are in the spans of {vk(x)k∈[m]}, {wk(x)k∈[m]} and {yk(x)k∈[m]}
Since V (x), W (x) and Y (x) also have de-
respectively.
gree d, and since the linear subspaces {xd+1+i|i ∈ [0,d]},
{x2(d+1)+i|i ∈ [0,d]}, and {x3(d+1)+i|i ∈ [0,d]} are disjoint
(except at the origin), we conclude that if r(cid:48)
vxd+1V (x) +
r(cid:48)
wx2(d+1)W (x) + r(cid:48)
yx3(d+1)Y (x) is in S, then it must be true
that V (x) = V †(x), W (x) = W †(x) , Y (x) = Y †(x). Therefore,
V (x), W (x), and Y (x) indeed use the same linear combination
{ck}k∈[m] of their polynomial sets, as required in a QAP. If,
moreover, t(x) evenly divides V (x)W (x)−Y (x) (so that H(x)
has no nontrivial denominator), then V (x), W (x), and Y (x)
constitute a QAP solution: a true proof (contradiction).
In Case 1,
t(x) does not divide Z(x) := (v0(x) +V (x))(w0(x) +W (x))−
(y0(x) + Y (x)). Let (x − r) be a polynomial that divides
t(x) but not Z(x), and let T (x) = t(x)/(x − r). Let d(x) =
gcd(t(x),Z(x)). Since t(x) and Z(x) have degrees at most d
and 2d respectively, B can use the extended Euclidean algo-
rithm for polynomials to ﬁnd polynomials a(x) and b(x) of
degrees 2d − 1 and d − 1 respectively such that a(x)t(x) +
b(x)Z(x) = d(x). Set A(x) = a(x)· (T (x)/d(x)) and B(x) =
b(x) · (T (x)/d(x)); these polynomials have no denominator
since d(x) divides T (x). Then A(x)t(x) + B(x)Z(x) = T (x).
Dividing by t(x), we have A(x)+B(x)H(x) = 1/(x−r). Since
A(x) and B(x) have degree at most 2d − 1 ≤ q, B can use
the terms in its challenge to compute e(gA(s),g)e(gB(s),gH ) =
e(g,g)1/(s−r), and thus solve 2q-SDH.
there does not exist {ck}k∈[m] such that
V (x) = ∑k∈[m] ckvk(x), W (x) = ∑k∈[m] ckwk(x) and Y (x) =
∑k∈[m] ckyk(x).
By Lemma 10 [30], we have that
with high probability xq−(4d+3)βpoly(x) · (r(cid:48)
vxd+1vk(x) +
r(cid:48)
wx2(d+1)wk(x) + r(cid:48)
yx3(d+1)yk(x)) has a non-zero coefﬁ-
Now B can use gZ =
cient
gsq−(4d+3)βpoly(s)(sd+1V (s)+s2(d+1)W (s)+s3(d+1)Y (s)) to subtract off
all elements of the form gs j where j (cid:54)= q + 1 and to obtain
gsq+1. This breaks the q-PDH assumption.
Next we address the two cases from above.
the term xq+1.
In Case 2,
for
252
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:11 UTC from IEEE Xplore.  Restrictions apply.