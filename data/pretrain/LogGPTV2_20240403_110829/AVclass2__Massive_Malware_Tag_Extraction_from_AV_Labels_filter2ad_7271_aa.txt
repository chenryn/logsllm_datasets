title:AVclass2: Massive Malware Tag Extraction from AV Labels
author:Silvia Sebasti&apos;an and
Juan Caballero
AVclass2: Massive Malware Tag Extraction
from AV Labels
Silvia Sebastián
IMDEA Software Institute
Universidad Politécnica de Madrid
PI:EMAIL
Juan Caballero
IMDEA Software Institute
Madrid, Spain
PI:EMAIL
0
2
0
2
t
c
O
8
2
]
R
C
.
s
c
[
2
v
5
1
6
0
1
.
6
0
0
2
:
v
i
X
r
a
ABSTRACT
Tags can be used by malware repositories and analysis services to
enable searches for samples of interest across different dimensions.
Automatically extracting tags from AV labels is an efficient approach
to categorize and index massive amounts of samples. Recent tools
like AVclass and Euphony have demonstrated that, despite their
noisy nature, it is possible to extract family names from AV labels.
However, beyond the family name, AV labels contain much valuable
information such as malware classes, file properties, and behaviors.
This work presents AVclass2, an automatic malware tagging
tool that given the AV labels for a potentially massive number of
samples, extracts clean tags that categorize the samples. AVclass2
uses, and helps building, an open taxonomy that organizes concepts
in AV labels, but is not constrained to a predefined set of tags. To
keep itself updated as AV vendors introduce new tags, it provides
an update module that automatically identifies new taxonomy en-
tries, as well as tagging and expansion rules that capture relations
between tags. We have evaluated AVclass2 on 42M samples and
showed how it enables advanced malware searches and to maintain
an updated knowledge base of malware concepts in AV labels.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation.
KEYWORDS
AV Labels; Tag; Malware; Taxonomy
ACM Reference Format:
Silvia Sebastián and Juan Caballero. 2020. AVclass2: Massive Malware
Tag Extraction from AV Labels. In Annual Computer Security Applications
Conference (ACSAC 2020), December 7–11, 2020, Austin, USA. ACM, New
York, NY, USA, 12 pages. https://doi.org/10.1145/3427228.3427261
1 INTRODUCTION
Tags are keywords assigned to data objects (e.g., documents, videos,
images) to categorize them and to enable efficient searches along
different dimensions such as properties, ownership, and origin.
Tags can be used by malware repositories and malware analysis
services (e.g., [16, 36]) for enabling searches for samples of interest.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427261
Malware tags can be manually produced by analysts, e.g., during
reverse engineering of a malware sample, or output by analysis
tools such as sandboxes and signature-matching engines. In both
cases, each analyst and tool developer may use its own vocabulary,
i.e., their own custom set of tags. This is similar to user tagging, or
folksonomies, in Web services [11, 18], which are known to lead to
issues such as tags produced by different entities being aliases (or
synonyms) for the same concept, some tags being highly specific
to the entity producing them, and a tag from an entity correspond-
ing to multiple tags from another entity. To address these issues,
standards such as Malware Attribute Enumeration and Characteri-
zation (MAEC) [24] define a language for sharing malware analysis
results. However, they have low adoption due to their use of rigid
controlled vocabularies (i.e., predefined tags) that may not always
match analyst needs, require frequent updates, and are necessarily
incomplete, e.g., MAEC does not include malware families.
Detection labels by anti-virus engines (i.e., AV labels) are an
instance of the above problem. An AV label can be seen as a serial-
ization of the tags an AV engine assigns to the sample. Since tags are
selected by each AV vendor rather independently, inconsistencies
among labels from different vendors are widespread, as frequently
observed in malware family names [2, 5, 9, 25, 28, 35]. Recent tools
like AVclass [35] and Euphony [9] demonstrate that, despite their
noisy nature, it is possible to extract accurate family tags from
AV labels. However, beyond the family name, AV labels may also
contain much valuable information such as the class of malware
(e.g., ransomware, downloader, adware), file properties (e.g., packed,
themida, bundle, nsis) and behaviors (e.g., spam, ddos, infosteal).
Automatically extracting malware tags from AV labels enables to
cheaply categorize and index massive amounts of samples without
waiting for those samples to be statically analyzed or executed in a
sandbox. And, since different AV vendors may execute a sample, the
extracted tags may accumulate behaviors observed under different
conditions. Furthermore, AV labels may encode domain knowledge
from human analysts that is not produced by automated tools. Once
obtained, the tags can be used to enable efficient search of samples
of a specific class, type, family, or with a specific behavior. And, the
identified samples can then be used as ground truth for machine
learning approaches [1, 3, 31, 34].
Unfortunately, extracting useful tags from AV labels is challeng-
ing due to different vocabularies used by AV engines. For example,
Engine1 may include multiplug in its label for Sample1, while En-
gine2 includes brappware in its label for Sample2, which is not
detected by Engine1. Both tags refer to samples that modify the
browser by installing plugins. Thus, when an analyst searches for
behavior browsermodify, both samples should appear as results.
ACSAC 2020, December 7–11, 2020, Austin, USA
Silvia Sebastián and Juan Caballero
This work presents AVclass2, an automatic malware tagging
tool that given the AV labels for a potentially massive number of
samples, extracts for each input sample a clean set of tags that
capture properties such as the malware class, family, file properties,
and behaviors. AVclass2 ships with a default open taxonomy that
classifies concepts in AV labels into categories, as well as default
tagging rules and expansion rules that capture relations between
tags. In contrast to closed taxonomies, AVclass2 does not mandate
a predefined set of tags. Instead, unknown tags in AV labels, e.g., a
new behavior or family name, are also considered. AVclass2 has
an update module that uses tag co-occurrence to identify relations
between tags. Those relations are a form of generalized knowledge
that the update module uses to automatically generate taxonomy
updates, tagging, and expansion rules to keep the tool updated as
AV vendors introduce new tags. Thus, AVclass2 can maintain an
updated knowledge base of malware concepts in AV labels.
AVclass2 builds on AVclass [35]. The goal is to perform the
minimum needed changes to AVclass that allow it to evolve from a
malware labeling tool, focused exclusively on malware families, to a
malware tag extraction tool that provides rich threat intelligence by
extracting and structuring all useful information in AV labels. Thus,
AVClass2 inherits AVClass major properties: scalability, AV engine
independence, platform-agnostic, no access to samples required
(only to their labels), and open source.
We have evaluated AVclass2 on 42M samples and compared
it with AVclass and Euphony, the two state-of-the-art malware
family labeling tools. We show how the tags AVclass2 extract
enable rich searches on malware samples, not possibly with existing
tools, how the extracted tags are complementary to those already
in use by popular malware repositories such as VirusTotal [36],
and how the update module can be used to maintain an updated
knowledge base of malware concepts in AV labels.
The main properties of AVclass2 are:
• Automatically extracts tags from AV labels that categorize
malware samples according to their malware class, family,
behaviors, and file properties.
• Uses and builds an open taxonomy that does not use a closed
set of tags, and thus can handle new tags introduced over
time by AV vendors.
• Can expand the input taxonomy, tagging rules, and expan-
sion rules, by generalizing relations found in AV labels, al-
lowing to maintain over time an up-to-date knowledge base
of malware concepts in AV labels.
• Evaluated on 42M samples and compared with the two state-
• Open source1.
of-the-art malware family labeling tools [9, 35].
2 OVERVIEW
When an AV engine flags a sample as malicious it returns an AV
label (or simply a label for short), i.e., a string with information
about the malicious sample. An AV label can be seen as a sequence
of tags separated by delimiters. Those tags are engine-specific as
they are selected rather independently by the AV vendor. For clarity,
we will use tokens to refer to engine-specific tags in AV labels and
tags to refer to entries in the taxonomy. Some tokens in AV labels
1https://github.com/malicialab/avclass.
Figure 1: AVclass2 architecture.
contain useful information such as the malware class (e.g., virus,
worm), malware family (e.g., zbot, virut), file properties (e.g., pdf,
toolbar), and behaviors usually retrieved dynamically (e.g., ddos,
proxy). Other tokens do not provide useful information because
they are generic (e.g., malicious, application) or very specific to
the AV vendor, and thus of little use for external analysts, such
as the detection technology (e.g., deepscan, cloud) or the specific
variant of a malware family (e.g., aghr, bcx). At a high level, the
goal of AVclass2 is to distinguish the tokens that provide useful
information, identify relations between tokens from different AV
engines, and convert them into tags in the taxonomy.
The architecture of AVclass2 is shown in Figure 1. It comprises
of two modules: labeling and update. The labeling module takes
as input the AV labels assigned by multiple AV engines to the
same samples, an optional list of AV engines whose labels to use
(if not provided, all AV labels are used), a set of tagging rules, an
optional set of expansion rules, and a taxonomy that classifies tags
into categories and captures parent-child relationships between
tags in the same category. For each input sample, it outputs a set
of tags ranked by the number of AV engines including the tag’s
concept in their label. AVclass2 ships with default tagging rules,
default expansion rules, and a default taxonomy. Thus, AVclass2
can be used out-of-the-box without the need for any configuration.
However, AVclass2 is fully configurable, so the analyst can easily
plug-in its own tagging rules, expansion rules, and taxonomy.
The update module takes as input the co-occurrence statistics,
tagging rules, expansion rules, and taxonomy. It first identifies
strong relations between tags, which generalize knowledge be-
yond individual samples, e.g., that a family is ransomware or sends
SMS. Then, it uses inference rules on the relations to automatically
propose new tagging rules, new expansion rules, and taxonomy
updates, which are then fed back to the labeling.
The remainder of this section introduces the labeling module
in Section 2.1, describes the input taxonomy in Section 2.2, and
introduces the update module in Section 2.3.
2.1 Labeling Module Overview
The labeling module comprises of three steps: tokenization, tagging,
and expansion. We detail them next.
Tokenization. The first step is to split each label into a list of
tokens. The key property of the tokenization is that it aims to be
vendor-agnostic, i.e., it does not attempt to infer the structure of
the labels used by each AV vendor. The reasons for this design
decision are that the number of AV vendors is very large (e.g., over
AVclass2: Massive Malware Tag Extraction from AV Labels
ACSAC 2020, December 7–11, 2020, Austin, USA
a hundred AV engines have been used by VirusTotal over time),
that each vendor provides different information in their AV labels,
and that AV vendors are not very consistent in the format of their
labels, often modifying them over time. If we were to try to define,
or automatically infer, templates for each label format, we would
end up with hundreds of templates. This would make selecting the
right template for a label challenging. Worse, whenever a label was
observed using a previously unknown label format, tokenization
errors could be introduced.
Tagging. The main step in AVclass2 is replacing a token in an
AV label with a set of tags in the taxonomy. Such tagging converts
the unstructured information in the AV labels into well-defined
concepts in the taxonomy. It also identifies potentially useful tokens
not yet tagged. Tagging uses a set of input tagging rules that specify
the set of tags that a token will be replaced with, i.e., a tagging rule
maps an input token to an output set of tags. Most tagging rules map
a token to a single tag. For example, a tagging rule maps the downldr
token to the downloader tag. In this case, we say that that the token
is an alias for the tag, since it captures the same concept as the
tag. Multiple tokens may be aliases for the same tag. For instance,
another tagging rule maps the dloader token also to the downloader
tag. Thus, tokens downldr and dloader are both downloader aliases.
Similarly, tokens finloski and fynloski are aliases for the darkkomet