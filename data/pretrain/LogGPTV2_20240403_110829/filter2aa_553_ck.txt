行的时间也更长（但是你觉察不到）。然而，使用 
printf()打印多个字符串
更加简单。例如，下面的语句把 
Well、用户名和一个#define定义的字符串
打印在一行：
printf("Well, %s, %s\n", name, MSG);
779
11.4 自定义输入/输出函数
不一定非要使用C库中的标准函数，如果无法使用这些函数或者不想用
它们，完全可以在getchar()和putchar()的基础上自定义所需的函数。假设你
需要一个类似puts()但是不会自动添加换行符的函数。程序清单11.14给出了
一个这样的函数。
程序清单11.14 put1()函数
/* put1.c -- 打印字符串，不添加\n */
#include 
void put1(const char * string)/* 不会改变字符串 */
{
while (*string != '\0')
putchar(*string++);
}
指向char的指针string最初指向传入参数的首元素。因为该函数不会改变
传入的字符串，所以形参使用了const限定符。打印了首元素的内容后，指
针递增1，指向下一个元素。while循环重复这一过程，直到指针指向包含空
字符的元素。记住，++的优先级高于*，因此putchar(*string++)打印string指
向的值，递增的是string本身，而不是递增它所指向的字符。
可以把 put1.c 程序作为编写字符串处理函数的模型。因为每个字符串都
以空字符结尾，所以不用给函数传递字符串的大小。函数依次处理每个字
符，直至遇到空字符。
用数组表示法编写这个函数稍微复杂些：
780
int i = 0;
while (string[i]!= '\0')
putchar(string[i++]);
要为数组索引创建一个额外的变量。
许多C程序员会在while循环中使用下面的测试条件：
while (*string)
当string指向空字符时，*string的值是0，即测试条件为假，while循环结
束。这种方法比上面两种方法简洁。但是，如果不熟悉C语言，可能觉察不
出来。这种处理方法很普遍，作为C程序员应该熟悉这种写法。
注意
为什么程序清单11.14中的形式参数是const char * string，而不是const
char sting[]？从技术方面看，两者等价且都有效。使用带方括号的写法是为
了提醒用户：该函数处理的是数组。然而，如果要处理字符串，实际参数可
以是数组名、用双引号括起来的字符串，或声明为 char *类型的变量。用
const char * string可以提醒用户：实际参数不一定是数组。
假设要设计一个类似puts()的函数，而且该函数还给出待打印字符的个
数。如程序清单11.15所示，添加一个功能很简单。
程序清单11.15 put2.c程序
/* put2.c -- 打印一个字符串，并统计打印的字符数 */
#include 
int put2(const char * string)
{
781
int count = 0;
while (*string)  /* 常规用法 */
{
putchar(*string++);
count++;
}
putchar('\n');  /* 不统计换行符 */
return(count);
}
下面的函数调用将打印字符串pizza：
put1("pizza");
下面的调用将返回统计的字符数，并将其赋给num（该例中，num的值
是5）：
num = put2("pizza");
程序清单11.16使用一个简单的驱动程序测试put1()和put2()，并演示了嵌
套函数的调用。
程序清单11.16 .c程序
//put_put.c -- 用户自定义输出函数
#include 
void put1(const char *);
782
int put2(const char *);
int main(void)
{
put1("If I'd as much money");
put1(" as I could spend,\n");
printf("I count %d characters.\n",
put2("I never would cry old chairs to mend."));
return 0;
}
void put1(const char * string)
{
while (*string) /* 与 *string != '\0' 相同 */
putchar(*string++);
}
int put2(const char * string)
{
int count = 0;
while (*string)
{
783
putchar(*string++);
count++;
}
putchar('\n');
return(count);
}
程序中使用 printf()打印 put2()的值，但是为了获得 put2()的返回值，计
算机必须先执行put2()，因此在打印字符数之前先打印了传递给该函数的字
符串。下面是该程序的输出：
If I'd as much money as I could spend,
I never would cry old chairs to mend.
I count 37 characters.
784
11.5 字符串函数
C库提供了多个处理字符串的函数，ANSI 
C把这些函数的原型放在
string.h头文件中。其中最常用的函数有 
strlen()、strcat()、strcmp()、
strncmp()、strcpy()和 strncpy()。另外，还有sprintf()函数，其原型在stdio.h头
文件中。欲了解string.h系列函数的完整列表，请查阅附录B中的参考资料
V“新增C99和C11的标准ANSI C库”。
11.5.1 strlen()函数
strlen()函数用于统计字符串的长度。下面的函数可以缩短字符串的长
度，其中用到了strlen()：
void fit(char *string, unsigned int size)
{
if (strlen(string) > size)
string[size] = '\0';
}
该函数要改变字符串，所以函数头在声明形式参数string时没有使用
const限定符。
程序清单11.17中的程序测试了fit()函数。注意代码中使用了C字符串常
量的串联特性。
程序清单11.17 test_fit.c程序
/* test_fit.c -- 使用缩短字符串长度的函数 */
#include 
785
#include   /* 内含字符串函数原型 */
void fit(char *, unsigned int);
int main(void)
{
char mesg [] = "Things should be as simple as possible,"
" but not simpler.";
puts(mesg);
fit(mesg, 38);
puts(mesg);
puts("Let's look at some more of the string.");
puts(mesg + 39);
return 0;
}
void fit(char *string, unsigned int size)
{
if (strlen(string) > size)
string[size] = '\0';
}
下面是该程序的输出：
786
Things should be as simple as possible, but not simpler.
Things should be as simple as possible
Let's look at some more of the string.
but not simpler.
fit()函数把第39个元素的逗号替换成'\0'字符。puts()函数在空字符处停止
输出，并忽略其余字符。然而，这些字符还在缓冲区中，下面的函数调用把
这些字符打印了出来：
puts(mesg + 8);
表达式mesg + 39是mesg[39]的地址，该地址上储存的是空格字符。所以
put()显示该字符并继续输出直至遇到原来字符串中的空字符。图11.4演示了
这一过程。
图11.4 puts()函数和空字符
注意
一些ANSI之前的系统使用strings.h头文件，而有些系统可能根本没有字
787
符串头文件。
string.h头文件中包含了C字符串函数系列的原型，因此程序清单11.17要
包含该头文件。
11.5.2 strcat()函数
strcat()（用于拼接字符串）函数接受两个字符串作为参数。该函数把第
2个字符串的备份附加在第1个字符串末尾，并把拼接后形成的新字符串作为
第1个字符串，第2个字符串不变。strcat()函数的类型是char *（即，指向char
的指针）。strcat()函数返回第1个参数，即拼接第2个字符串后的第1个字符
串的地址。
程序清单11.18演示了strcat()的用法。该程序还使用了程序清单11.10的
s_gets()函数。回忆一下，该函数使用fgets()读取一整行，如果有换行符，将
其替换成空字符。
程序清单11.18 str_cat.c程序
/* str_cat.c -- 拼接两个字符串 */
#include 
#include  /* strcat()函数的原型在该头文件中 */
#define SIZE 80
char * s_gets(char * st, int n);
int main(void)
{
char flower[SIZE];
char addon [] = "s smell like old shoes.";
788
puts("What is your favorite flower?");
if (s_gets(flower, SIZE))
{
strcat(flower, addon);
puts(flower);
puts(addon);
}
else
puts("End of file encountered!");
puts("bye");
return 0;
}
char * s_gets(char * st, int n)
{
char * ret_val;
int i = 0;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
789
while (st[i] != '\n' && st[i] != '\0')
i++;
if (st[i] == '\n')
st[i] = '\0';
else
while (getchar() != '\n')
continue;
}
return ret_val;
}
该程序的输出示例如下：
What is your favorite flower?
wonderflower
wonderflowers smell like old shoes.
s smell like old shoes.
bye
从以上输出可以看出，flower改变了，而addon保持不变。
11.5.3 strncat()函数
strcat()函数无法检查第1个数组是否能容纳第2个字符串。如果分配给第
790
1个数组的空间不够大，多出来的字符溢出到相邻存储单元时就会出问题。
当然，可以像程序清单11.15那样，用strlen()查看第1个数组的长度。注意，
要给拼接后的字符串长度加1才够空间存放末尾的空字符。或者，用
strncat()，该函数的第3 
个参数指定了最大添加字符数。例如，strncat(bugs,
addon, 13)将把 addon字符串的内容附加给bugs，在加到第13个字符或遇到空
字符时停止。因此，算上空字符（无论哪种情况都要添加空字符），bugs数
组应该足够大，以容纳原始字符串（不包含空字符）、添加原始字符串在后
面的13个字符和末尾的空字符。程序清单11.19使用这种方法，计算avaiable
变量的值，用于表示允许添加的最大字符数。
程序清单11.19 join_chk.c程序
/* join_chk.c -- 拼接两个字符串，检查第1个数组的大小 */
#include 
#include 
#define SIZE 30
#define BUGSIZE 13
char * s_gets(char * st, int n);
int main(void)
{
char flower[SIZE];
char addon [] = "s smell like old shoes.";
char bug[BUGSIZE];
int available;
791
puts("What is your favorite flower?");
s_gets(flower, SIZE);