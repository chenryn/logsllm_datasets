14:49:7(0,5
Process10070attached-interrupt toquit
#strace-t-ppidofdd
第5章实践内核调试
查更好。
的可能性更大，因此可以跳过GDB或strace这一步，直接用下面的crash进行调
无法执行的状态，因此无论多久也无法进入跟踪状态。此时，内核内部引发问题
被attach的进程进入跟踪状态，但进程由于在内核内部发生死锁等原因，已处于
有可能发生GDB或strace似乎停止响应的状况，这是因为这些命令启动后会等待
进程处于D状态（禁止中断的睡眠状态）时，如上例用GDB或straceattach之后
www.TopSage.com
江网
直
---
## Page 261
调查源代码
算法等待写入完成。
入完成。另外，调查内核 2.6.9的相应部分后发现并不存在该函数，而是用其他
oneword()函数中写入一个字（该芯片下一个字为两个字节）之后被调用，等待写
operation()的函数调用的。inval_cache_and_wait_for_operation()函数在 do_write_
要阅读代码。阅读代码后发现，这个 msleep()是由名为 inval_cache_and_wait_for_
继续往下看会发现，(A)的 msleep()执行了睡眠操作。要想了解这里为何睡眠，就
for (;){
[ffff81021b073f80] system_ call at ffff8005c116
[ffff81021b073f40] sys_write at ffffff80016b00
[ffff81021b073f10] vfs_write at ffff80016233
ffff81021b073eb0] do_mmap_pgoff at ffffffff8000dc60
fff81021b073e80] mtd_ write at ffffffff883b34ef -
ffff81021b073e30] cfi_intelext_write_words at ffffffff883d6e05
ffff81021b073de0] d
ffff81021b073d88] default_wake_function at ffffffff8008986e
ffff81021b073d50] inval_cache_and_wait_for_operation at ffff883d3332
ffff81021b073d40] msleep at ffffffff80094768
ffff81021b073d28] inval_cache_and_wait_for_operation at fffff883d31d6
ffff81021b073d10] process_timeout at ffffffff8009409f
[ffff81021b073cf0] schedule_timeout at fffff80062839
/* OK Still waiting. Drop the lock, wait a while and retry. */
if (!timeo){一
if (map_word_andequal(map, status, status.oK, status_OK)
status = map_read(map, cmd_adr); 
return -ETIME;
chip->state = FL_STATUS;
map_write(map, CMD(0x70), cmd_adr);
break;
 START: thread_return (schedule) at fffffff80061f29
do_write_oneword at ffffffff883d5ad8
www.TopSage.com
HACK#41 运行缓慢的故障| 243
——(A)
?
①②
250
---
## Page 262
那么，这里 sleep_time 被设置为多少呢？如上述代码开头所示，它被设置为
就只能用busy loop函数和udelay()等调整时间。
秒，用 msleep()等基本上能在经过了指定的时间后唤醒进程。但如果不足1毫秒，
睡眠（定时器）的精确度就是1000微秒（1毫秒)。也就是说，睡眠时间超过1毫
处的 sleep_time 判断是否在1000 微秒以上。根据睡眠时间进行分支的原因是Linux
sleep_time 传递的睡眠时间应该是以微秒为单位的。该系统中 HZ为1000，因此④
值决定的。sleep_time 在③处除以 1000，并作为 msleep()的参数使用，因此给
④和的代码块是等待写入完成的处理，执行④还是执行是由 sleep_time 变量的
不可能超时。
会显示内核信息。而 dd 命令执行过程中并没有显示这种内核信息，可以认为这里
并结束函数。查看源代码后发现，该函数调用的 do_write_oneword()在发生错误时
就离开for循环并返回。③是超时判断，如果等待很长时间也没写完，就返回错误
①读取闪存设备写入是否完成的信息，再由②判断写入是否完成。如果写入完成，
244
if (chip->state != chip_state) {
spin_lock(chip->mutex);
}else {-
if (sleep_time >= 100000/HZ) { --
spin_unlock(chip->mutex);
第5章实践内核调试
/* Someone's suspended the operation: sleep */
timeo--;
cond_resched();
udelay(1);
 sleep_time = 1000000/HZ;
“省略”
timeo "= sleep_time;
msleep(sleep_time/1000);
* of busy waiting.
 * can be performed with a sleeping delay instead
 * Half of the normal delay still remaining
*/
*
www.TopSage.com
?
?
?
---
## Page 263
C
Intel 的网络设备拥有计算 TCP 包的校验和的功能，以降低 CPU 的负载。Linux 内
#42
本 hack 介绍了内核版本升级时发生的 MTD 设备写入速度降低的调试案例。
是等待时间的初始值过长。
用 dd命令写入时，只需几秒钟就可以写完，与内核2.6.9基本相同。因此，原因就
即 256 微秒（sleep_time 就是其 1/2，为 128 微秒）并编译内核。编译后的内核中
为验证这个假说，我们将 word_write_time 的初始值设置为比最大写入时间稍长
之后却要等待25 毫秒后才会确认它是否写入完成。
因此等待时间再短些应该也没问题。从闪存设备的 datasheet 来看，1个字的平均写
那么，这里真的有必要等待25毫秒吗？说起来，在内核2.6.9中瞬间就能完成写入，
64×1024次，折合成时间大约为20分钟，这与几分钟都写不完的事实是吻合的。
因此③处执行睡眠 25 毫秒。每次的睡眠时间非常短，但写入128KB 却需要睡眠
可以考虑的是，1个字（2B）的数据写完之后，①处设备返回的讯息仍在写入，
假说提出和验证
总结
入时间为10微秒，最多只需200微秒，这样看来，写入1个字只需花费10微秒，
就是它的1/2，25 毫秒。
成员的初始值为 50000（单位为微秒）。也就是说，sleep_time 的值（即睡眠时间）
构 struct flchip 中的 word_write_time 成员，进一步调查代码发现，word_write_time
chip_op_time 的 1/2。调查代码后发现，chip_op_time 来源于保存闪存芯片信息的结
我们曾经遇到过一个故障，一旦在使用VLAN 的网络上进行TCP 通信，
CPU负载过高的故障
此外，包括此设备在内的许多闪存设备的 datasheet 都可以在厂商主页上找到。
试方法。
kernel: Found: ST M50Fw080
另外,从MTD设备初始化时显示的内核信息可知,闪存设备的型号为M50FW080。
网卡利用硬件计算校验和的功能就无法正常工作。以此为例介绍一下调
www.TopSage.com
HACK#42 CPU 负载过高的故障|  245
253
252
---
## Page 264
用于接收的 receiver。环境配置如图 5-15 所示。
为了评测网络性能，我们准备了两台机器，一台用于发送 TCP 包的 sender，一台
务必与 eth3 放在不同的网段中。
了配置文件，以便能在系统启动时建立。
首先建立 VLAN 设备，此处为 eth3.510。用vconfig 命令也可以建立，但这里修改
故障复现的准备
本 hack 介绍了发现和修正方法。使用的是 Red Hat 家族的发行版，内核为 2.6.18。
现的问题。
设备上进行 TCP 通信时，内核不会进行校验和计算。这是从实际的客户咨询中发
就不再计算。我们发现，一般的网络通信可以正常使用硬件校验和计算，但在VLAN
核首先判断网络设备是否支持此功能，支持则通过硬件计算校验和，内核（软件)
246 1
# ifconfig
eth3.510 Link encap:Ethernet Hwaddr 00:15:17:3A:61:09
VLAN=yes
DEVICE=eth3.510
# vi /etc/sysconfig/network-scripts/ifcfg-eth3.510
#
eth3
***
第5章实践内核调试
inet addr:192.168.0.200 Bcast:192.168.0.255 Mask:255.255.255.0
inet addr:192.168.1.200 Bcast:192.168.1.255 Mask:255.255.255.0
Link encap:Ethernet HWaddr 00:15:17:3A:61:09
www.TopSage.com
---
## Page 265
需的时间，接下来是吞吐量（Mbps）。VLAN网络的吞吐量稍稍低一些。此外，%TX
开头的数据为发送的数据大小，通过选项设置成发送1GB。下一个值是发送数据所
据包分段，可以通过-1选项设置数据写入长度为1500字节。
同样在sender上执行nuttcp发包，用-n选项设置发送的总数据量为1GB。为使数
在receiver上通过以下选项启动nuttcp服务器。
TCP/UDP网络测试工具，可以测量吞吐量。
下面测量普通的网络设备和VLAN设备的吞吐量，这里使用nuttcp。nuttcp是个
使用nuttcp测量吞吐量
常通信。
设置好eth3和eth3.510之后，通过ping 命令等确认receiver和 sender之间能够正
图5-15网络性能评测的环境
[sender]#./nuttcp -n1G -L1500 192.168.1.100
[receiver]#./nuttcp -S
#gcc-02-o nuttcp nuttcp-5.5.5.c
#
#wget-t0-chttp://ww.lcp.nrl.navy.mil/nuttcp/nuttcp-5.5.5.tar.bz2
1023.9987MB/9.15seC=938.5309Mbps22%TX19%RX
[sender]#./nuttcp-n1G-L1500192.168.0.100
1023.9987MB/9.12seC=941.3975Mbps12%TX18%RX
cdnuttcp-5.5.5
tar jxvf nuttcp-5.5.5.tar.bz2
网络
VLAN
网络
e1000
192.168.0.100
eth3.510
192.168.1.100
eth3
www.TopSage.com
包发送方向
/*VLAN网络*/
/*影—*/
192.168.0.200
eth3.510
192.168.1.200
eth3
sender
255
---
## Page 266
256
看出，内核运行得最多，其次是e1000e。
首先对 VLAN 网络进行测量，用 opreport 命令可以看到简单的结果。从下面可以
在 nuttcp 发送信息的状态下，执行 opcontrol命令（实际上要用脚本执行）。
2.6.18/vmlinux，将它用到opcontrol命令上。
kernel-debuginfo 这个 RPM 包之后，vmlinux 就位于/usr/Lib/debug/Llib/modules/
使用oprofile 时，需要用到vmlinux 来解析（resolve）符号（symbol）。安装
使用oprofile 确认额外开销
接下来使用oprofile，比较一下究竟哪里产生了额外开销。
VLAN网络中该值为22%。尽管吞吐量没有太大差异，但CPU使用率却增加了10%
息之前到发送接收信息完成之后的时间段中，所用的CPU时间（用户时间+内核时
CPU使用率是进程生存期间使用的 CPU 时间百分比，但 nuttcp 是根据发送接收信
和%RX为发送进程（sender）和接收进程（receiver）的 CPU使用率。ps 等命令中的
248|第5章实践内核调试
间）计算的百分比。可见，一般网络中发送进程的CPU使用率（%TX）为12%，而
--..-- .-. - - - - - - - -
 samplesl
[sender]# opreport 
[sender]# opcontrol --stop
[sender]# sleep 10
[sender]# ./nuttcp -T20s -l1500 192.168.0.100 &
[sender]# opcontrol --start --vmlinux=/boot/vmlinux-2.6.18
[sender]# opcontrol --init 
10712 14.8158 e1000e
59056 81.6808 vmlinux-2.6.18
119 0.1646 bash
243
869 1.2019 libc-2.5.so
1053 1.4564 nuttcp
50 0.0692 oprofile
87 0.1203 8021q
0.336l oprofiled
%
www.TopSage.com
/*VLAN 网络*/
---
## Page 267
显示警告信息，但本例中没什么问题。
①的符号名为(no symbols)，因此要指定-p 选项以解析符号。下面的命令执行后会
用 opreport 命令也可以看到详细点的信息。
2627
2800
3093
11049
samples
[sender]# opreport -l -p /lib/modules/2.6.18/kernel/
6
00
.3
10712
11049
samples %
[sender]# opreport -l 
15.2819 vmlinux-2.6.18 vmlinux-2.6.18 csum_partial_copy_generic
15.2819
2.9806
3.0013
3.6334
3.8727
4.2779
1.3126
1.3886
1.4481
1.4827
1.5754
1.6127
1.9115
1.9128
2.0373
2.1286
2.1493
2.4965
2.5809
2.9502
2.9598
3.6334
3.8727
4.2779
14.8158
e1000e.ko
3e1000e.ko
4 vmlinux-2.6.18 vmlinux-2.6.18 tcp_init_tso_segs
9 vmlinux-2.6.18 vmlinux-2.6.18 tcp_sendmsg
5 vmlinux-2,6.18 system_call
一
一
n
app name
vmlinux-2.6.18 vmlinux-2.6.18 kfree
vmlinux-2.6.18 tcp_v4_send_check
vmlinux-2.6.18 ip_queue_xmit
vmlinux-2.6,18 (
vmlinux-2.6.18 0
vmlinux-2.6.18
vmlinux-2.6.18 eth_header
vmlinux-2.6.18
vmlinux-2.6.18 t
vmlinux-2.6.18 t
vmlinux-2.6.18n
vmlinux-2.6.18 cache_grow
vmlinux-2.6.18 t
vmlinux-2.6.18 k
vmlinux-2.6.18
vmlinux-2.6.18 t
vmlinux-2.6.18 kfree
vmlinux-2.6.18 tcp_sendmsg
e1000e
vmlinux-2.6.18 csum_partial_copy_generic
image name
www.TopSage.com
(no symbols)
e1000e
e1000e
cache_alloc_refill
dev_queue_xmit 
tcp_transmit_skb
tcp_v4_rcv
mwait_idle
tcp_ack
kmem_cache_free
skb_clone
tcp_init_tso_segs