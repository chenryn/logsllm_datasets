clang-3.7.0 x86
clang-3.7.0 x64
Visual Studio '15 x86
Visual Studio '15 x64
angr 4.6.1.4
BAP 0.9.9
ByteWeight 0.9.9
Dyninst 9.1.0
Hopper 3.11.5
IDA Pro 6.7
Jakstab 0.8.4
Linear
SPEC (C)
SPEC (C++)
O0
O1
O2
O3
gcc-5.1.1 x86
O0
O1
O2
O3
gcc-5.1.1 x86
 100
)
n
a
e
m
c
i
r
t
e
m
o
e
g
(
t
c
e
r
r
o
c
%
 90
 80
 70
 60
 50
 40
 30
 20
 100
)
n
a
e
m
c
i
r
t
e
m
o
e
g
(
t
c
e
r
r
o
c
%
 80
 60
 40
 20
 0
 100
)
n
a
e
m
c
i
r
t
e
m
o
e
g
(
t
c
e
r
r
o
c
%
 80
 60
 40
 20
 0
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
(a) Correctly disassembled instructions.
gcc-5.1.1 x64
clang-3.7.0 x86
clang-3.7.0 x64
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
(b) Correctly detected function start addresses.
gcc-5.1.1 x64
clang-3.7.0 x86
clang-3.7.0 x64
O0
O1
O2
O3
Visual Studio '15 x86
O0
O1
O2
O3
Visual Studio '15 x86
O0
O1
O2
O3
Visual Studio '15 x64
O0
O1
O2
O3
Visual Studio '15 x64
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
(c) Correctly detected non-empty function argument lists (IDA Pro only).
USENIX Association  
25th USENIX Security Symposium  587
5
gcc-5.1.1 x86
gcc-5.1.1 x64
clang-3.7.0 x86
clang-3.7.0 x64
Visual Studio '15 x86
Visual Studio '15 x64
 100
)
n
a
e
m
c
i
r
t
e
m
o
e
g
(
t
c
e
r
r
o
c
%
 80
 60
 40
 20
 0
 100
)
n
a
e
m
c
i
r
t
e
m
o
e
g
(
t
c
e
r
r
o
c
%
 90
 80
 70
 60
 50
 40
 30
 20
O0
O1
O2
O3
gcc-5.1.1 x86
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
(d) Correct and complete basic blocks for the ICFG.
gcc-5.1.1 x64
clang-3.7.0 x86
clang-3.7.0 x64
O0
O1
O2
O3
Visual Studio '15 x86
O0
O1
O2
O3
Visual Studio '15 x64
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
(e) Correctly resolved direct function calls (indirect calls discussed separately).
Recursive disassembly. The most accurate recursive
disassembler in terms of instruction recovery is IDA Pro
6.7, which closely follows linear disassembly with an
instruction coverage exceeding 99% at optimization lev-
els O0 and O1, dropping to a worst case mean of 96%
for higher optimization levels. The majority of missed in-
structions at higher optimization levels are alignment code
for functions and basic blocks, which is quite common in
optimized binaries. It consists of various (long) nop in-
structions for gcc and clang, and of int 3 instructions
for Visual Studio, and accounts for up to 3% of all code
at O2 and O3. Missing these instructions is not harmful
to common binary analysis operations, such as binary
instrumentation, manual analysis or decompilation.
False positives in IDA Pro are less prevalent than in lin-
ear disassembly. On gcc and clang, they are extremely
rare, amounting to 14 false positives in the worst test
case, with a mean of 0. Visual Studio binaries produce
more false positives, peaking at 0.16% of all recovered in-
structions. Overall, linear disassembly provides the most
complete instruction listing, but at a relatively high false
positive rate for Visual Studio. IDA Pro ﬁnds only slightly
fewer instructions, with signiﬁcantly fewer false positives.
These numbers were no better for binaries with symbols.
Dyninst and Hopper achieve best case accuracy com-
parable to IDA, but not quite as consistently. Some disas-
semblers, notably BAP, appear to be optimized for gcc,
and show large performance drops when used on clang.
The BAP authors informed us that BAP’s results depend
strongly on the disassembly starting points (i.e., function
starts), provided by ByteWeight. We used the default ELF
and PE signature ﬁles shipped with ByteWeight v0.9.9.
Our angr results are based on the CFGFast analysis rec-
ommended to us by the angr authors.
Overall, IDA Pro, Hopper, Dyninst and linear disas-
sembly show arithmetic mean results which are extremely
close to the geometric means, exhibiting standard devia-
tions below 1%. Other disassemblers have larger standard
deviations, typically around 15%, with outliers up to 36%
(for BAP on clang x86, as visible in Figure 2a).
588  25th USENIX Security Symposium 
USENIX Association
6
6caf10 :
6caf10:
6caf16:
6caf19:
6caf1c:
6caf1e:
6caf21:
mov
and
cmp
sbb
add
retq
0x3f0dde(%rip),%eax
$0x10,%eax
$0x1,%eax
%eax,%eax
$0x3a,%eax
Listing 1: False negative indirectly called function for
IDA Pro in gcc, compiled with gcc at O3 for x64 ELF.
480970 :
480970:
480971:
480973:
480975:
480976:
push
push
push
push
push
%rbp
%r15
%r14
%rbx
%rax
Listing 2: False positive function (shaded) for Dyninst,
due to misapplied prologue signature, gobmk compiled
with clang at O1 for x64 ELF.
C versus C++. Accuracy between C and C++ differs
most in the lower scoring disassemblers, but the difference
largely disappears in the best performing disassemblers.
The largest relative difference appears for clang.
3.1.1.2 Function starts
The results for function start detection are far more diffuse
than those for instruction recovery. Consider Figure 2b,
which shows the mean percentage of correctly recovered
function start addresses. No one disassembler consistently
dominates these results, though Hopper is at the upper
end of the spectrum for most compiler conﬁgurations
in terms of true positives. Dyninst also provides high
true positive rates, though not as consistently as Hopper.
However, as shown in Figure 3, both Hopper and Dyninst
suffer from high false positive rates, with worst case mean
false positive rates of 28% and 19%, respectively. IDA
Pro provides lower false positive rates of under 5% in
most cases (except for x86 Visual Studio, where it peaks
at 20%). However, its true positive rate is substantially
lower than those of Hopper and Dyninst, regularly miss-
ing 20% or more of functions even at low optimization
levels. As with instruction recovery, the results for BAP
and ByteWeight depend heavily on the compiler conﬁg-
uration, ranging from over 90% accuracy on gcc x86 at
O0, to under 20% on clang x64.
Even for the best performing disassemblers, function
start identiﬁcation is far more challenging than instruction
recovery. Accuracy drops particularly as the optimization