access control policy, it invalidates the back references by
setting them to an invalid value, such as NULL, and thus
denying the oﬀending process any future accesses to sensi-
tive resources. We next discuss mechanisms for verifying the
cred back references.
3.2.2 Dual Reference Monitor
Having established the secure link between process cre-
dentials and its usage contexts, PrivWatcher uses a dual
reference monitor to enforce integrity veriﬁcation as well as
TOCTTOU consistency of process credentials, as shown in
Figure 4. PrivWatcher interposes security checks at two dif-
ferent points: 1) when the privileges of a process are being
set, and 2) when the kernel performs security checks for a
process to access sensitive resources. In the former, process
privilege changes are requested by the kernel and are veri-
ﬁed in the isolated environment. We present details of this
veriﬁcation in Section 3.3. The latter is carried out in the
kernel, and it enforces TOCTTOU consistency of process
credentials by augmenting all access control calculations in
the kernel to verify the following conditions:
• The process credential actually belongs to the safe
region, which guarantees that it has been previously
checked by PrivWatcher’s reference monitor in the iso-
lated execution environment.
171sumption of code integrity protection; they are secure from
memory corruption. The kernel can then carry out the range
check with simple arithmetic operations. Figure 5 shows
an example ARM assembly instructions resulting from the
veriﬁcation function. It shows that the veriﬁcation is done
without relying on corruptible data ﬁelds.
The kernel typically needs to traverse a chain of memory
dereferences in order to retrieve the current task_struct.
Attackers could therefore interfere with any link in this chain
to inﬂuence the ﬁnal result. To prevent this, we adopt the
following strategy: we maintain a secure mapping between
the CPU core and its current task_struct. On process
switches, PrivWatcher is invoked to synchronize this secure
mapping, which, just like the safe region, is guaranteed to be
tamper-proof against the kernel. The secure mapping can
be implemented as an array that maps CPU core number
to its current task_struct (core number can be obtained
using hardware-speciﬁc instructions that doesn’t depend on
memory contents, e.g., x86’s cpuid [36]). Note that since we
assume kernel control data to be protected, attackers cannot
divert the kernel control ﬂow to reuse this update operation.
3.3 Enforcing Integrity Protection
Up to this point, we have established PrivWatcher’s secure
allocation of protected data and its non-bypassable moni-
toring techniques. This framework allows PrivWatcher to
enforce policies that preserve the kernel’s original seman-
tics of its runtime operations. PrivWatcher can adapt any
type of policy that deﬁnes the credential of user processes.
Hence, PrivWatcher is a very useful tool for high security
systems where each process is linked to a predeﬁned task
at a particular privilege. In addition, PrivWatcher can be
perfectly adapted to app-based systems like Android, where
a predeﬁned set of processes run as root and system priv-
ilege levels; each has its deﬁned uid and gid. Meanwhile,
all apps run with less privileged credentials.
In the case
of Android, a straightforward policy would be to prevent
unprivileged apps from using credentials that grant root or
system privileges. This should in fact be the preferred pol-
icy since normal operations of Android does not require its
users to exercise administrator privileges [17].
In this section, we present a sample policy that targets
general-purpose Linux systems. Our sample policy prevents
generic privilege escalation attacks. PrivWatcher enforces
that process privileges as deﬁned by the DAC uid/gid can-
not be escalated (i.e., non-root → root), except for pro-
cesses that have exec’d whitelisted root-setuid binaries (e.g.,
passwd). This policy can be easily extended, e.g., to protect
the range of uid/gid values reserved for privileged Android
system daemons. Our approach described next can also be
adapted to other access control models (e.g., SELinux [51]),
and we will discuss more in Section 3.4 about this.
3.3.1 Monitoring for Privilege Escalation
PrivWatcher monitors for privilege escalation, which hap-
pens when an unprivileged process attempts to manipulate
its cred structure to get elevated privilege. We therefore
need a precise notion of a “privileged” cred structure that
correctly reﬂects the DAC model enforced by the kernel.
As mentioned, the Linux cred structure includes four user
identiﬁers: uid, euid, suid, and fsuid. The group identi-
ﬁers are similar in concept and we omit their description for
brevity. We view a cred structure as privileged if any one
Figure 5: Deterministic veriﬁcation of input address
without relying on data ﬁelds. 1-The start and end
address of the read-only memory is encoded within
the code section. 2&3-The read-only data is read
into registers. 4&5-The comparison is done between
the input in r3 and values read from the read-only
data ﬁelds.
• The process credentials correctly back reference the
current task_struct and that the current hardware
page tables base address (e.g., given by registers cr3
on Intel x86 and ttbr0 on ARM) also matches the
back-referenced value.
If either of these conditions fail, then the access control
calculation would return error status (e.g., no permission),
thus denying any sensitive accesses.
One technicality needs to be addressed in order to adapt
the Linux kernel to using this strategy. In the Linux ker-
nel, access control calculations are not performed at a cen-
tralized location but rather scattered throughout the ker-
nel source code. Manually identifying and patching all of
them would prove to be infeasible. Instead, we leverage the
Linux Security Modules (LSM) framework [55, 57]. LSM
places a set of hooks in the kernel code right before sensi-
tive resources are accessed, so that customized access con-
trol checks can be implemented. For example, Security En-
hanced Linux (SELinux) is implemented on top of the LSM
framework [51].
In PrivWatcher, we augmented all LSM
hooks to implement the kernel-side reference monitor. We
note that on kernel versions without LSM, as an alterna-
tive one could also augment all system calls. This still pro-
vides strong security guarantees since no action will be per-
formed on behalf of userspace if the process credentials vio-
late TOCTTOU consistency.
3.2.3 Deterministic Data Veriﬁcation
To guarantee the security of the kernel-side security checks,
they have to be conducted without relying on any data ﬁelds
that can be subjected to memory corruption.
Validating that process credentials belong to the safe re-
gion requires PrivWatcher to communicate the memory ad-
dress ranges of the safe region securely to the kernel. This
can be achieved by allocating the safe region from a ﬁxed
memory range and exporting the start and end addresses
of these pages as symbols to the kernel. These symbols are
embedded in the kernel’s code sections, and given our as-
172of the uid, euid, or suid ﬁelds is equal to the root user ID
(i.e., zero). This is also the same semantics as deﬁned by the
Linux kernel [24]. For simplicity, we do not include checks
to the capability ﬁelds deﬁned in the cred structure. We
make a straightforward assumption that unprivileged pro-
cesses does not have the setuid capability and hence are
not allowed to escalate their privilege.
3.3.2 Legitimate Privilege Escalation
Given the description of a cred structure that grants ele-
vated privileges, it is easy to enforce a strict policy that only
allows process privileges to be dropped (i.e., root → non-
root) but not the other way around (i.e., non-root → root).
This prevents all privilege escalation exploits that manipu-
late process credentials. As mentioned, this should be the
preferred policy on systems such as Android. On the other
hand, the DAC model does indeed allow for, but needs to
strictly control, privilege escalation from non-root to root.
This is done by using root-setuid binaries [24]. They are
useful in exporting to unprivileged users a small, ﬁxed set of
functionalities that require elevated privileges to complete
(e.g., the password-setting program passwd).
Allowing for legitimate root-setuid binaries essentially re-
quires PrivWatcher to authenticate processes based on the
binaries they are executing, which is in turn determined
by their physical address spaces. Our three-way intercon-
nection among the cred structure, the task_struct struc-
ture, and the process address space (Section 3.2.1) readily
allows this authentication to take place. Previous works
(e.g., [18, 42]) have already provided detailed techniques on
authenticating process binaries based on their physical ad-
dress spaces. We only remark that to support legitimate
privilege escalation via root-setuid binaries, only the initial
process that performed the escalation needs to be authen-
ticated. Afterwards, its descendant processes inherit privi-
leges from it. In particular, this allows root-setuid binaries
such as sudo to function properly (the command “sudo cmd”
allows cmd to inherit privileges from sudo and run as root).
3.4 Security Analysis
PrivWatcher’s design allows it to address the attack vec-
tors identiﬁed in Section 2. Firstly, the read-only mapping
of the safe region prevents validated credentials from be-
ing modiﬁed directly by the kernel (overwrite attack). The
unique interconnection linking together the cred structure,
the task_struct structure, and process address space al-
lows PrivWatcher to achieve TOCTTOU consistency.
In
particular, preventing the use of forged credentials can be
achieved by conﬁrming that the credentials indeed belong to
the safe region (forging attack); also, attackers cannot reuse
existing privileged credentials because the back-referenced
task_struct would be diﬀerent (reuse attack); ﬁnally, re-
placing the address space of a privileged process can be de-
tected by verifying that the back-referenced pgd matches the
value given by the hardware registers, such as cr3 on Intel
and ttbr0 on ARM (address space injection attack).
In the rest of this section, we examine the security guar-
antees provided by PrivWatcher. Afterwards, we discuss
the current state of OS kernel security solutions and how
PrivWatcher can advance real world systems security. We
then discuss the eﬀectiveness of PrivWatcher against exist-
ing kernel attacks. Finally, we present a plan for future work
to enhance and generalize PrivWatcher’s protection.
Security Guarantees
3.4.1
Security researchers predominantly agree that protecting
the security of the kernel requires a reference monitor that
runs in isolation from the kernel itself. The goal is to pre-
vent potential memory corruption vulnerabilities in the ker-
nel from compromising the reference monitor, which has its
own memory address space.
PrivWatcher introduces a set of novel techniques that ex-
clusively relies on the fact that the kernel code section is
integrity protected. Thus, it guarantees that access control
checks performed at the kernel side cannot be circumvented.
This ensures strict enforcement of TOCTTOU consistency
so that the context in which protected data ﬁelds are veriﬁed
is the same where they are used.
Utilizing existing reference monitor and kernel code in-
tegrity techniques allows PrivWatcher to raise the bar of
kernel security protection. Nevertheless, it tied the security
of PrivWatcher to the underlying tool that provides the as-
sumed security properties. If the isolated domain that hosts
PrivWatcher is compromised, then PrivWatcher will be as
well. Similarly, PrivWatcher will be bypassed if kernel code
integrity protection is compromised, allowing an attacker to
nullify the kernel side TOCTTOU consistency checks.
Enforcement of the DAC policy semantics, presented in
Section 3.3, relies on the amount of control the reference
monitor has over the kernel. The presented policy assumes
the reference monitor is aware of which applications are al-
lowed to raise their privileges and that it can detect mali-
cious binaries injected in userspace code using any of the
plentiful existing research in this direction [18, 42, 46, 37].
These proposals often rely on techniques that monitor and
protect the entire page tables’ hierarchy of the system. Hence,
it is reasonable to assume that tying the credential informa-
tion to the base of the process page tables, as described in
Section 3.3, is suﬃcient to identify the binary that a process
is executing.
It is important to note that adopting an orthogonal system
to identify running processes is a requirement of the sample
policy, but not a requirement of PrivWatcher. This policy
was selected to support the argument that PrivWatcher can
be adaptable to any general-purpose system. We anticipate
that app-based systems should require a simpler policy. For
instance, Android typically assigns ﬁxed uid values between
0 and 10,000 to its root and system processes and uid val-
ues greater than 10,000 for regular apps. Hence, an Android
privilege escalation prevention policy can state that regular
apps, identiﬁable by process uid greater than 10,000, cannot
change their uid to a value reserved for privileged applica-
tions. This policy will be eﬀective in preventing privilege
escalation assuming that app processes (including attacker-
controlled ones) are assigned the proper unprivileged uids
by an uncompromised system.
3.4.2 Kernel Security Landscape
The majority of existing kernel security solutions focused
on two problems: preventing kernel code modiﬁcation and
injection, and preventing corruption of control data. The
landscape of existing solutions made it critical to adopt a
solution like PrivWatcher for the following reasons:
First, the is an absence of solutions that provide non-
control data protection for the kernel. There are few ex-
ceptions to this absence, with the most notable being Ke-
nali [52], which adopts data ﬂow integrity techniques to pro-
173tect non-control data ﬁelds. Nevertheless, Kenali lacks the
notion of preserving TOCTTOU consistency of the kernel’s
non-control data, particularly regarding the context of use.
Section 6 presents a more detailed discussion about the dif-
ference between PrivWatcher and Kenali.
Second, existing solutions that target either code or control-
data integrity have critical limitations:
Existing kernel code integrity solutions [18, 42, 46, 37,
28, 50] can be deemed irrelevant if an attack escalates the
privilege of a malicious process. The malicious process can
then have access to all system resources despite the fact
that the kernel maintains its code integrity. Unfortunately,
existing tools cannot be easily adaptable to prevent such
attacks because they lack the required semantic knowledge
about the location, context of use, and proper veriﬁcation
techniques of credentials data. PrivWatcher extends these
tools to prevent privilege escalation, which is a great threat
to systems protected by these existing techniques.
Existing control-data integrity solutions [27, 26, 45, 40, 15,
44, 31] focus on coarse grained rather ﬁne grained control-
ﬂow integrity. As a result, their eﬀectiveness is limited to
preventing sophisticated code reuse attacks, which opens the
door to simpler form of code reuse, such as passing malicious
arguments to legitimate function entry point to corrupt non-
control data. Davi et al. [29] proved that many of the exist-
ing control-data protection techniques can be bypassed by
a Turing complete attack, which testiﬁes to the imperfect
status of these solutions and how far they are from stopping
simple code-reuse attacks. A Turing complete code reuse
attack could be as powerful as privilege escalation. Never-
theless, improving existing control-data integrity solutions
to eliminate that threat is out of the scope of this paper.
3.4.3 Effectiveness Against Attacks
In this section, we argue that recent kernel attacks neces-
sitates the adoption of a privilege escalation prevention tool
like PrivWatcher. They also emphasize the gap in existing
solutions discussed in the previous section.
PingPong Root [11, 56], which relies on CVE-2015-3636,
uses a typical use-after-free kernel bug to control a dan-
gling ﬁle descriptor. After the exploit, the attacker controls
the function pointer that closes the ﬁle and can use it to
jump to arbitrary location in the kernel. Privileged Execute
Never (PXN) protection limits the attack from returning to
userspace code, so attackers resolve to jump-oriented pro-
gramming to overwrite the addr_limit kernel data ﬁeld so
they can have access to and overwrite process credentials.
QuadRooter [12] uses a similar approach.