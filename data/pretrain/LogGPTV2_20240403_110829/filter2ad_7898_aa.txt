# 0x00 前言
影响范围：whatsapp originalWidth * originalHeight
    * width - originalWidth > 0
    * height - originalHeight > 0
re-allocation 是 free 和 malloc的组合。如果 re-allocation 的size为0.那么就仅仅 free掉。  
假设我们有一个GIF，有3帧 size 分别为 '100,0,0'
    1 第一次 re-allocation, size(info->rasterBits )=100 
    2 第二次 re-allocation, size(info->rasterBits) free    
    3 第三次 re-allocation, size(info->rasterBits) 再次free
触发的位置在 decoding.c里
    int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;
    int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;
    const uint_fast32_t newRasterSize =
        gifFilePtr->Image.Width * gifFilePtr->Image.Height;
    if (newRasterSize > info->rasterSize || widthOverflow > 0 ||
    heightOverflow > 0) {
    void *tmpRasterBits = reallocarray(info->rasterBits, newRasterSize,     Error = D_GIF_ERR_NOT_ENOUGH_MEM;
        break;
    }
    info->rasterBits = tmpRasterBits;
    info->rasterSize = newRasterSize;
    }
在Android里面，memory 的 double-free with size N
会导致两个后续的大小为N的内存分配返回相同的地址(Linux下也会有相同的情况)。  
此处是我写的test代码
    #include 
    size_t SIZE = 0x100;
    size_t COUNT =4;
    void triple_free(){
        void *p;
        p = malloc(SIZE);
        printf("target == %p\n",p);
        for(int i = 0;i<COUNT;++i){
            free(p);
        }
        for(int i = 0;i<COUNT;++i){
            printf("malloc(0x%x) == %p\n", SIZE, malloc(SIZE));
        }
        printf("next malloc(0x%x) == %p\n", SIZE, malloc(SIZE));
    }
    int main(void){
        triple_free();
        return 0;
    }
p 被释放了4次，在接下来的malloc里返回的地址相同。背景知识传送门《a tale of two mallocs》[3]
接着让我们开始愉快的构造exp
首先看 gif.h里的GifInfo
    struct GifInfo {
    void (*destructor)(GifInfo *, JNIEnv *);  <<-- there's a function pointer here
    GifFileType *gifFilePtr;
    GifWord originalWidth, originalHeight;
    uint_fast16_t sampleSize;
    long long lastFrameRemainder;
    long long nextStartTime;
    uint_fast32_t currentIndex;
    GraphicsControlBlock *controlBlock;
    argb *backupPtr;
    long long startPos;
    unsigned char *rasterBits;
    uint_fast32_t rasterSize;
    char *comment;
    uint_fast16_t loopCount;
    uint_fast16_t currentLoop;
    RewindFunc rewindFunction;   <<-- there's another function pointer here
    jfloat speedFactor;
    uint32_t stride;
    jlong sourceLength;
    bool isOpaque;
    void *frameBufferDescriptor;
    };
## 64-bits OS (x86-64/ARM64)
在64位里的所占字节如下所示
    struct GifInfo
    {
      0------1--------2--------3--------4--------5--------6--------7--------8
     0|               void (*destructor)(GifInfo *, JNIEnv *);                                                          |
       ----------------------------------------------------------------------     1|               GifFileType *gifFilePtr;                                                                                 |
        ----------------------------------------------------------------------     2|               GifWord originalWidth;                                                                                |
      -----------------------------------------------------------------------     3|               GifWord originalHeight;                                                                               |
      -----------------------------------------------------------------------     4|               uint_fast16_t sampleSize;                                                                            |
      -----------------------------------------------------------------------     5|               long long lastFrameRemainder;                                                                    |
      -----------------------------------------------------------------------     6|               long long nextStartTime;                                                                             |
      -----------------------------------------------------------------------     7|               uint_fast32_t currentIndex;                                                                          |
      -----------------------------------------------------------------------     8|               GraphicsControlBlock *controlBlock;                                                            |
      -----------------------------------------------------------------------     9|               argb *backupPtr;                                                                                        |
      -----------------------------------------------------------------------     A|               long long startPos;                                                                                     |