[root@centos8 ~]#fi1e=(.sh )
[root@centos8 ~]#declare -A file
-bash: declare: file: cannot convert indexed to associative array
---
## Page 62
7.4显示所有数组
显示所有数组：
declare
-a
范例：
[root@centos8 ~]#declare
declare -a BASH_ARGC=()
declare -a BASH_ARGV=()
dec1are -a BASH_COMPLETION_VERSINFO=([O]="2" [1]="7")
declare =a BASH_LINENO=()
declare -ar BASH_REMATCH=()
declare -a BASH_SOURCE=()
declare -ar BASH_VERSINFO=([O]="4" [1]="4" [2]="19" [3]="1" [4]="release"
[5]="x86_64-redhat-1inux-gnu")
declare -a DIRSTACK=()
declare =a FUNCNAME
declare -a GROUPS=()
declare -a PIPESTATUS=([O]="0")
7.5引用数组
引用数组元素
${ARRAY_NAME[INDEX]}
*如果省略[INDEX]表示引用下标为O的元素
范例：
[root@centos8 ~]#declare -a title=([0]="ceo" [1]="coo" [2]="cto")
[root@centos8~]#echo S{title[1]}
CO0
[root@centos8 ~]#echo S{tit]e}
ceo
[root@centos8 ~]#echo s{title[2]}
cto
[root@centos8 ~]#echo S{tit]e[3]}
引用数组所有元素
${ARRAY_NAME[]}
${ARRAY_NAME[0]}
范例：
[root@centos8 ~]#echo S{title[θ]}
ceo coo cto
[root@centos8 ~]#echo S{title[]}
ceo coo cto
数组的长度，即数组中元素的个数
---
## Page 63
${#ARRAY_NAME[]]
${#ARRAY_NAME[@]]
范例：
[root@centos8 ~]#echo S{#title[*]]
7.6删除数组
删除数组中的某元素，会导致稀疏格式
unSet ARRAY[INDEX]
[root@centos8 ~]#echo S{title[]}
ceo coo cto
[root@centos8 ~]#unset title[1]
[root@centos8 ~]#echo S{title[°]}
ceo cto
删除整个数组
unset ARRAY
马哥教育
范例：
IT人的高薪职业学院
[root@centos8~]#unset title
[root@centos8 ~]#echo S{title[]}
[root@centos8 ~]#
7.7数组数据处理
数组切片：
${ARRAY[@]:offset:number]
offset
要跳过的元素个数
number
要取出的元素个数
取偏移量之后的所有元素
{ARRAY[@]:offset]
范例：
[root@centos8 ~]#num=({0. .10})
[root@centos8 ~]#echo S{num[]:2:3]
234
[root@centos8 ~]#echo S{num[]:6}
6 7 8 9 10
---
## Page 64
向数组中追加元素：
ARRAY[${#ARRAY[]}]=Value
ARRAY[${#ARRAY[@]}]=Value
范例：
[root@centos8~]#num[${#num[@]3]=11
[root@centos8 ~]#echo S{#num[@]]
12
[root@centos8 ~]#echo S{num[@]]
0 1 2 3 4 5 6 7 8 9 10 11
7.8关联数组
declare -A ARRAY_NAME
ARRAY_NAME=([idx_name1]=′va11*[idx_name2]=*va12* .. )
注意：关联数组必须先声明再调用
范例：
[root@centos8 ~]#name[ceo]=mage
[root@centos8 ~]#name[cto]=wang
[root@centos8 ~]#name[coo]=zhang
[root@centos8 ~]#echo S{name[ceo]]
zhang
[root@centos8 ~]wecho s{name[cto]]
zhang
[root@centos8 ~]#echo s{name[coo]]
zhang
[root@centos8 ~]#echo S{name}
zhang
[root@centos8 ~]#declare -A name
-bash: declare: name: cannot convert indexed to associative array
[root@centos8 ~]#unset name
[root@centos8 ~]#declare -A name
[root@centos8 ~]#name[ceo]=mage
[root@centos8 ~]#name[cto]=wang
[root@centos8 ~]#name[coo]=zhang
[root@centos8 ~]#echo S{name[coo]]
zhang
[root@centos8 ~]#echo S{name[ceo]]
mage
[root@centos8 ~]#echo S{name[cto]]
wang
[root@centos8 ~]#echo S{name[*]]
mage wang zhang
7.9范例
范例：生成10个随机数保存于数组中，并找出其最大值和最小值
---
## Page 65
#!/bin/bash
declare -1 min max
declare -a nums
for ((i=0;1
2 5 8
7 8 9
6 9 E
3.打印杨辉三角形
8字符串处理
8.1字符串切片
基于偏移量取字符串
*返回字符中变量var的长度
${#var]
*返回字符串变量var中从第offset个字符后（不包括第offset个字符）的字符开始，到最后的部分，
offset的取值在0到${#var}-1之间（bash4.2后，允许为负值）
$[var:offset}
返回字符串变量var中从第offset个字符后（不包括第offset个字符）的字符开始，长度为number的部
分
${var:offset:number}
*取字符中的最右侧几个字符，取字符中的最右侧几个字符，注意：冒号后必须有一空白字符
---
## Page 66
$fvar:
-1ength}
*从最左侧跳过offset字符，
一直向右取到距离最右侧lengh个字符之前的内容，即：拍头去尾
${var:offset:-length]
*先从最右侧向左取到length个字符开始，再向右取到距离最右侧offset个字符之间的内容，注意：·
length前空格
$[var:
-length:-offset}
范例：
[root@centos8 script40]#str=abcdef我你他
[root@centos8 script40]#echo S{#str}
6
[root@centos8 script40]#echo S{str:2}
cdef我你他
[root@centos8 script40]#echo S{str:2:3]
cde
[root@centos8 script40]#echo S{str:-3]
abcdef我你他
[root@centos8 script40]#echo S{str: -3]
我你他
[root@centos8 script40]#echo S{str:2:-3}
cdef
[root@centos8 script40]#echo S{str: -2:-3]
-bash: -3: substring expression < 0
[root@centos8 script40]#echo S{str: -3:-2}
[root@centos8 script40]#echo S{str:-3:-2]
我
abcdef我你他
[root@centos8 script40]wecho s{str:-3:-2]
[root@centos8 script40]#echo S{str: -5:-2]
ef我
基于模式取子串
*其中word可以是指定的任意字符，自左而右，查找var变量所存储的字符中中，第一次出现的word，删除
字符申开头至第一次出现word字符串（含）之间的所有字符
${var#*word}:
*同上，负荧模式，不同的是，删除的是字符串开头至最后一次由word指定的字符之间的所有内容
$[var##*word}:
范例：
[root@centos8 ~]#fi1e="var/log/messages"
[root@centos8 ~]#echo S{file#*/}
1og/messages
[root@centos8 ~]#echo S{file##/}
messages
---
## Page 67
其中word可以是指定的任意字符，功能：自右面左，查找var变量所存储的字符中中，第一次出现的word，
删除字符申最后一个字符向左至第一次出现word字符串（含）之间的所有字符
{pJOMEA]S
*同上，只不过删除字符串最右侧的字符向左至最后一次出现word字符之间的所有字符
PJOMEA]S
范例：
[root@centos8 ~]#fi1e="/var/log/messages"
[root@centos8 ~]#echo S{file%/]
var/1og
[root@centos8 ~]#echo S{file%%/]
var
范例：
[root@centos8 ~]#ur1=http://www.magedu. com:8080
[root@centos8 ~]#echo S{ur]##*:}
8080
[root@centos8 ~]#echo S{ur1%%:*]
http
8.2查找替换
*查找var所表示的字符串中，第一次被pattern所匹配到的字符中，以substr替换之
${var/pattern/substr}
#查找var所表示的字符中中，
所有能鼓pattern所匹配到的字符中，以substr替换之
$[var//pattern/substr}
查找var所表示的字符串中，行首被pattern所匹配到的字符中，以substr替换之
${var/#pattern/substr}
查找var所表示的字符中中，行尾被pattern所匹配到的字符中，以substr替换之
$[var/%pattern/substr}
8.3查找并删除
*删除var表示的字符串中第一次被pattern匹配到的字符串
${var/pattern]
删除var表示的字符申中所有被pattern匹配到的字符串
$[var//pattern}
删除var表示的字符串中所有以pattern为行首匹配到的字符串
${var/#pattern}
删除var所表示的字符申中所有以pattern为行尾所匹配到的字符串
$[var/%pattern}
8.4字符大小写转换
---
## Page 68
*把var中的所有小写字母转换为大写
[vvdEA]s
*把var中的所有大写字母转换为小写
${var,,}
9高级变量
9.1高级变量赋值
变量配置方式
str没有配置
str为空字符串
str已配置非为空字符中
var=${str-expr}
var=expr
var=
var=$str
var=${str:-expr}
var=expr
var=expr
var=$str
var=${str+expr}
var=
var=expr
var=expr
var=${str:+expr}
var=
var=
var=expr
var=${str=expr}
str=expr
str不变
str不变
var=expr
var=
var=$str
var=${str:=expr}
str=expr
str=expr
实不变
var=expr
var=expr
var=$str
var=${str?expr}
expr 输出至 stderr
/ar=
var=$str
var=${str:?expr}
expr 输出至 stderr
var=$str
范例：
[root@centos8 ~]#title=ceo
[root@centos8 ~]#name=s{tit]e-
qer
[root@centos8 ~]#echo Sname
ceo
[root@centos8 ~]#tit1e=
[root@centos8 ~]#name=S{title-mage]
[root@centos8 ~]#echo Sname
[root@centos8~]#unset title
[root@centos8 ~]#name=S{title-mage}
[root@centos8 ~]#echo Sname
mage
范例：
[root@centos8 ~]#title=ceo
[root@centos8 ~]#name=S{tit]e:-mage}
[root@centos8 ~]#echo Sname
ceo
[root@centos8 ~]#title=
[root@centos8 ~]#name=S{title:-mage}
[root@centos8 ~]#echo Sname
mage
[root@centos8 ~]#unset title
[root@centos8 ~]#name=S{title:-mage}
[root@centos8 ~]#echo Sname
mage
---
## Page 69
9.2高级变量用法-有类型变量
Shell变量一般是无类型的，但是bashShell提供了declare和typeset两个命令用于指定变量的类型，两
个命令是等价的
declare[选项]变量名
-r声明或显示只读变量
-i将变量定义为整型数
-a将变量定义为数组
-A将变量定义为关联数组
-f显示已定义的所有函数名及其内容
-F仅显示已定义的所有函数名
-x声明或显示环境变量和函数相当于export
-声明变量为小写字母declare-Ivar=UPPER
-u声明变量为大写字母declare-uvar=lower
9.3变量间接引用
9.3.1eval命令
eval命令将会首先扫描命令行进行所有的置换，然后再执行该命令。该命令适用于那些一次扫描无法实
现其功能的变量，该命令对变量进行两次扫描
范例：
[root@server ~]# CMD=whoami
高教育
[root@server ~]# echo $CMD
whoam1
[root@server ~]# eva1 SCMD
root
[root@server ~]# n=10
[root@server ~]# echo {0..$n]
{0..10}
[root@server ~]# eval echo {0..$n}
0 1 2 3 4 5 6 7 8 9 10
9.3.2间接变量引用
variable1的值是variable2，而variable2又是变量名，variable2的值为value，间接变量引|用是指通过
variable1获得变量值value的行为
variable1=vari ab1e2
variable2=value
bashShel提供了两种格式实现间接变量引用
eval  tempvar=\$Svariab1e1
tempvar=§{!variab1e1}
范例：
[root@centos8 ~]#ceo=name
---
## Page 70
[root@centos8 ~]#name=mage
[root@centos8 ~]#echo Sceo
nafe
[root@centos8 ~]#echo S$ceo
33722ceo
[root@centos8 ~]#echo SBASHPID
33722
[root@centos8~]#echo\$$ce0
$name
[root@centos8 ~]#eva] tmp=\$$ceo
[root@centos8 ~]#echo Stmp
mage
[root@centos8 ~]#echo S{!ceo}
mage
[root@server ~]# NAME=wangxiaochun
[root@server ~]# N=NAME
[root@server ~]# N1=${!N]
[root@server ~]# echo SN1
wangx1aochun
[root@server ~]# eva] N2=\S$N
[root@server ~]# echo SN2
wangxiaochun
马哥教育
---