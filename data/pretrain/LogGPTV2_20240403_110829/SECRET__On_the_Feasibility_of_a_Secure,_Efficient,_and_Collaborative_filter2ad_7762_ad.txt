other users to the client.
Local Edits. For local edits, SECRET uses a combination
of editable HTML elements (i. e. contenteditable is set to
true) and Mutation Observers [36]. Every second the editor
checks whether the user modiﬁed text contents. If that is the
case, the implementation fetches the XML element in which
the edit took place and extracts the modiﬁcation. Then, this
modiﬁcation is forwarded to the Controller which handles
the rest of the processing (see below).
External Edits. Whenever an operation sent by the un-
trusted storage server is ready to be displayed, the Con-
troller forwards it to the editor. The editor is then respon-
sible for identifying the corresponding UI component and
applying the operation to it. There have been some tech-
nical challenges in the implementation, which we outline in
Section 8.3.6.
8.3.2
The Controller module has several interfaces to the other
modules of SECRET in the browser, which are explained in
the following sections. The job of the Controller is to route
edit events and messages from the untrusted storage server
to the responsible modules.
SECRET Controller
Initially, the browser receives a document snapshot, which
can contain multiple Unencrypted Blocks (UBs) and En-
crypted Blocks (EBs) as shown in Figure 4. Note that
SECRET supports any mix of UBs and EBs. Particularly,
a snapshot may contain only a single EB for protecting the
whole document as well as only UBs leaving the document
unprotected. The UBs can be directly displayed in the ed-
itor, but the EBs have to be further processed: Next to
the required key, an EB contains multiple Encrypted Datas
(EDs) (see Figure 3).
An ED element contains an XML tree compatible to the
XML Encryption speciﬁcation [16]. Thus, it contains meta-
data information like key references, information about the
used cryptographic algorithms, etc. Usually, there are mul-
tiple ED elements within one block, which we added for
performance reasons. Further details on this are presented
DocumentEncrypted Block (EB)Unencrypted Block (UB)Encrypted Block (EB)Unencrypted Block (UB)842in Section 8.3.4. Once the ED is decrypted, the browser
puts all blocks together and hands them over to the editor
displaying the content.
If the Controller receives a modiﬁcation from the editor,
it forwards the modiﬁcation to the other modules, which
are explained below. Lastly, after the local processing is
completed, the Controller triggers the creation of a ShareJS
operation that is sent to the untrusted storage server.
8.3.3 Synchronization Module
Our system stores three diﬀerent document views in the
browser: the encrypted document, the decrypted document,
and the content displayed in the editor. Edit events in the
editor trigger modiﬁcations in the decrypted document as
well as in the encrypted one. An edit may have happened in
either an UB or an EB. Therefore, the synchronization mod-
ule keeps track of whether a block is an UB or EB. This is
used in order to recognize which block is aﬀected and prob-
ably needs to be re-encrypted. A similar problem arises in
the opposite direction: Since an operation that modiﬁes a ci-
phertext does not tell any information about the underlying
edit (i. e. the plaintext element that was edited), it is diﬃ-
cult to tell where to update the user interface. This problem
is solved by the synchronization module which artiﬁcially
creates a one to one correlation between plain elements and
their encrypted counterparts.
8.3.4 Splitter Module
If an encrypted document contains large blocks of text
without any further structure, AES-GCM becomes ineﬃ-
cient as outlined in Section 7.5. To prevent this ineﬃciency,
the splitter module artiﬁcially splits such text blocks in
smaller parts (by using multiple ... elements)
that are encrypted individually. Each encrypted  is
stored in a separate Encrypted Data element, see Figure 3.
The splitter module also removes  elements if the user
deletes their content. However, it is unclear how big or small
these parts of a document have to be to have an optimal bal-
ance between network and storage overhead. This problem
is evaluated in detail in Section 10.
8.3.5 XMLSec.js
Our XMLSec library creates the necessary XML Encryp-
tion data structures.
It uses our SECRET crypto mod-
ule as cryptographic oracle. The communication between
the crypto module and the XMLSec library is done via the
PostMessage API. In the end, the XMLSec library makes
use of the WebCrypto API to provide encryption and de-
cryption functionality.
8.3.6 Implementation Challenges
During the development of SECRET we stumbled upon
interesting implementation challenges. We outline three of
these here to highlight the gap between specifying the archi-
tecture of a system and implementing it. This might help
developers and researchers in their future projects.
Cursor Placement with Splitting. Consider the user
having entered the string 1234, resulting in the following
document fragment: 1234. The cursor is
placed within the  behind the 4. If we assume that the
implementation is conﬁgured to use a split size of 4, then en-
tering one more character (e. g., 5) creates the following doc-
ument fragment: 12345 which
is displayed to the user as 12345. However, the browser
keeps the cursor in the ﬁrst  element, so that en-
tering a new character is prepended (instead of appended)
to the 5. The editor displays 12346 5. We solved this by
programmatically moving the cursor after splitting into the
correct  element by using the JavaScript Range API
(createRange(), setStart(), . . . ).
Synchronization and Deletion. Another problem be-
comes apparent if a user deletes text in a  element with
contenteditable set to true. Consider a user editing the
document
fragment 12345,
placing the cursor behind the 5, and pressing backspace to
delete a character. Intuitively one would expect the second
 to be empty and the cursor being placed in it. But
this is not the case. Instead, Google Chrome removes the
second  completely and places the cursor at the end
of the previous span. This is a huge problem since SECRET
is unable to detect a Local Edit, because the second 
is deleted. To solve this problem, we use Mutation Ob-
servers [36]. They allow – besides other operations – to get
notiﬁed if an object is deleted (e. g., the respective 
element), and we are thus notiﬁed that an edit appears.
Preventing Edit Loops. A technical challenge is to make
sure that applying an external edit to the editor is not mis-
taken for a local edit: suppose that user A receives an edit
operation executed by user B. If it is accidentally handled as
a Local Edit, it is executed and then again send to the un-
trusted storage server, which then sends the operation back
to user B and so forth. This will result in an endless loop of
edit events and render the system unusable.
To resolve this, our editor caches the content that an ele-
ment is supposed to contain (based on the decrypted docu-
ment maintained by the Synchronization Module) in a cus-
tom cache property in the DOM object. If this cache and
the actual content diﬀer, then the user must have edited
the content. If an external edit deleted an element, we set
a custom ﬂag on the corresponding HTML element before
deleting it. This helps discarding the mutation event that is
ﬁred after the deletion.
9. SECURITY DISCUSSION
In this section, we analyze SECRET in three models.
Honest-But-Curious Cloud Server. A cloud server
j for any session σj = (∗, S,∗).
S – the adversary – only sees ct
He is able to learn the structure of the document, consist-
ing of plaintext and ciphertext nodes, but he learns nothing
about the plaintext contents of a ciphertext node. A client
may simply exchange such a node with a totally diﬀerent ci-
phertext node of equal length, and the adversary is not able
(due to the IND-CPA property of the used encryption mode
AES128-GCM) to distinguish between these two nodes.
Passive Man-in-the-Middle. For a passive Man-in-the-
Middle attacker, the same argument holds: by passively ob-
serving all network traﬃc, this adversary may be able to re-
construct the document structure, but due to the IND-CPA
property of the encryption, he is not able to learn the con-
tent of the ciphertext nodes.
Web Attacker Model.
It is not possible to ”prove” a
complex web application like SECRET secure in the web at-
tacker model – even Google and Facebook suﬀer from time
843to time from vulnerabilities under this attacker model. How-
ever, the design rationales for SECRET can be given here.
The client application of SECRET is conceptually divided
into two components, loaded from diﬀerent web origins (cf.
Figure 1). We assume that the session key kj is only avail-
able in the SECRET Crypto component (right). This com-
ponent is conﬁgured to accept PostMessageAPI calls only
from a well-known web origin. Thus if the adversary simply
copies the left component to his own malicious server, this
copy is unable to establish a connection to the SECRET
crypto component, and thus remains unable to decrypt ci-
phertext.
Attack on Web Origins.
If we allow the adversary to
manipulate web origins [2], SECRET is, like any other web
application, no longer secure.
1. The attacker builds his own malicious web application, by
simply copying the left part (cf. Figure 1) of the SECRET
code (this part is public and does not contain the session
key) and adding a new function transferCleartext().
2. The attacker tricks the victim to access this malicious
application, e. g., by DNS Spooﬁng, and forges the web
origin with the same techniques. He loads the right part
of the code (including the secure key management) from
the original web origin.
3. The malicious application can now systematically load
encrypted documents for all sessions in which the user
participates, decrypt them, and send the plaintexts to
the adversary. SECRET’s crypto module will cooperate
with the malicious application, since it has the correct
(but forged) web origin.
The same attack holds for Cross-Site-Scripting (XSS). Here,
the attacker can inject and execute a malicious JavaScript
into so benign SECRET editor. This script then runs in the
web origin of the original editor. The security of SECRET
can be increased against XSS by using further techniques
(e. g., Content-Security-Policy), which is out-of-scope.
Information Leakage. Information about the structure of
a document may leak. We are aware of this issue, and have
included it in the formal model (cf. Section 3). We consider
it a design feature that is appreciated by applications.
10. PERFORMANCE EVALUATION
Using encryption for collaborative editing leads to two
problems: storage overhead and network overhead. Con-
sequentially, the question rises how large this overhead is
for SECRET and if our system is usable despite these over-
heads. Additionally, the splitter module SECRET provides
is meant to optimize the performance and reduce the over-
heads. This is evaluated in the following in order to ﬁnd a
reasonable boundary deﬁning when to split.
10.1 Evaluation Setup
To simulate real edits, we used Google Chrome 50 with
Selenium 2.49.13. This enables the automated invocation of
URLs, webpage navigation and performance measurement
in the browser. We use Selenium’s WebDriver API to start
a browser and to navigate to the untrusted storage server
and start SECRET.
3http://docs.seleniumhq.org/
Tests. Once the editor is loaded we generate random strings
with diﬀerent lengths (64, 128, 512, 1024, 2048, and 4096
bytes) and simulate keystrokes typing each string. We insert
a character every 300 milliseconds, which results in 200 key
strokes per minute. This is a typical speed of an experienced
typist, for example, an oﬃce assistant.
During the tests we use two typing areas: one ends up in
an encrypted block, the other one in an unencrypted block.
We issue the same key strokes to each area. The splitting
into separate parts is carried out in both areas. We repeat
all tests for diﬀerent split sizes (32, 64, 128, 256, and 512
bytes).
Measurement. Selenium allows injecting JavaScript code
into a loaded website and accessing deﬁned variables. Thus,
we are able to get the size of the encrypted and unencrypted
document during testing. In addition, we get access to the
operations sent to the server. Thus, we can measure the
network traﬃc triggered by editing the document.
10.2 Storage Overhead
In Figure 5a, the document size of an unencrypted doc-
ument with random characters in dependence on the con-
tent length is presented. Independent from the fact that the
content is not encrypted, the content is split. This split-
ting leads to an overhead since each part of the content is
encapsulated in a ... element. As a result,
the more the content gets split, the more  elements
are added causing storage overhead. Observing Figure 5a,
one can see that compression is very eﬀective for our struc-
ture. Comparing the same document with split size 32 and
with split size 512 after compression shows only 5.7% size
increase despite it contains 16 times the number of 
elements.
Figure 5b shows the same comparison for an encrypted
document. The values in this case are much larger than
in the unencrypted case. This has several reasons: First,
the ciphertext is binary data that has to be Base64 encoded
before it can be stored in XML, This alone results in an ex-
pansion factor of 1.33. Second, each split operation leads to
the creation of a new ED element. Since an ED element con-
tains metadata information like a random ID, the resulting
encrypted document’s size is further increased.
Split size
32
Storage expansion 3.50
64
2.46
128
1.92
256
1.66
512
1.53
Table 2: Ciphertext expansion of a 4096 byte document.
As Table 2 shows, avoiding small split sizes alleviates the
overhead. For example, a document with 4096 bytes of plain
content with a split size of 128 byte has an encryption over-
head factor of 1.92 (= 92% overhead). This number look
high, but in fact it is three times better in comparison to
previous work. For example, Clear et al. [8] achieve an
expansion factor of 4.82 (= 382% overhead), Huang and
Evans [17] get 3.75 (= 275% overhead).
Summarized, the larger the split size gets, the less stor-
age overhead it becomes. This is an obvious result since
each split operation leads to additional overhead. However,
another side eﬀect needs consideration: the communication
overhead. This overhead is directly related to the content,
which has to be synchronized.
844(a) Storage requirements for un-
encrypted documents.
(b) Storage requirements for en-
crypted documents.
(c) Network overhead in an unen-
crypted document.
(d) Network overhead in the en-
crypted document.
Figure 5: SECRET evaluation results. Larger pictures can be found in Figure 8 (Appendix).
10.3 Network Overhead
We evaluated the network communication overhead by in-
serting the same text with diﬀerent lengths in the unen-
crypted and encrypted area. During typing, we collected
all operations transmitted to the untrusted storage server
and measured the transmitted bytes. In order to compare
SECRET with a well-spread collaboration platform, we re-
peated the same edits on Google Docs and measured the
network overhead.
10.3.1 Unencrypted Network Overhead
Figure 5c shows the network communication (in bytes)
caused by edits in an unencrypted document in dependence
on the appended text length and chosen split size. There
is a linear relation between the inserted amount of text and
the network traﬃc. The reason for the growth in traﬃc
is the addition of new  elements and the protocol