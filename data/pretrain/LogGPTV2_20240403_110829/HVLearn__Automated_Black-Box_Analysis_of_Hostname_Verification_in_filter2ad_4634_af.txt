We conducted a comprehensive evaluation of the defense mechanisms implemented in various SSL/TLS libraries. The results are summarized in Table VII. The second column indicates whether the library permits embedded NULL bytes, the third column lists the corresponding API function used to retrieve the CN (Common Name) or SAN (Subject Alternative Name) identifier, and the fourth column specifies whether the API call also returns the length of the CN/SAN identifier. This feature is crucial because, without it, the application using the SSL/TLS library cannot determine the termination point of the identifier string. Our analysis reveals that all libraries, with the exception of JSSE, implement this important feature. Although JSSE does not return the length of the identifier, it is not vulnerable to embedded NULL byte attacks due to the nature of Java strings, which do not use NULL terminators.

| SSL Libraries | Allows Embedded NULL? | Function / Structure Name | Returns Length? |
|--------------|-----------------------|--------------------------|-----------------|
| OpenSSL      | No                    | X509_NAME_get_text_by_NID(), X509_NAME_get_text_by_OBJ(), X509_NAME_get_index_by_NID(), X509_NAME_get_index_by_OBJ(), X509_get_ext_d2i() | Yes             |
| GnuTLS       | No                    | gnutls_x509_crt_get_dn_by_oid(), gnutls_x509_crt_get_subject_alt_name() | Yes             |
| MbedTLS      | No                    | mbedtls_x509_name, mbedtls_x509_sequence | Yes             |
| MatrixSSL    | No                    | x509DNattributes_t, x509GeneralName_t | Yes             |
| JSSE         | No                    | getSubjectX500Principal(), getSubjectAlternativeNames() | No              |

**Notes:**
1. For OpenSSL, the functions `X509_NAME_get_index_by_NID()` and `X509_NAME_get_index_by_OBJ()` are followed by `X509_NAME_get_entry()`.
2. For OpenSSL, `X509_get_ext_d2i()` is followed by `sk_GENERAL_NAME_value()`.

Despite the precautions taken by SSL/TLS implementations against embedded NULL byte attacks, this does not guarantee that applications using these libraries are secure. Applications that implement hostname verification must ensure they do not use vulnerable functions, such as standard string comparison functions from libc (e.g., `strcmp`, `strcasecmp`, `fnmatch`), which rely on NULL-terminated strings.

To evaluate the security of applications using SSL/TLS libraries against embedded NULL byte attacks, we performed a manual audit of several applications. Unfortunately, we found that several popular applications remain vulnerable to man-in-the-middle attacks using embedded NULL byte certificates. Examples include:
- FreeRADIUS server [8], a widely deployed RADIUS (Remote Authentication Dial-In User Service) server.
- OpenSIPS [12], a popular open-source SIP server.
- Proxytunnel [13], a stealth tunneling proxy.
- Telex Anticensorship system [15], an open-source censorship-circumventing software.

The key takeaway from this section is that embedded NULL byte attacks, even though addressed at the SSL/TLS library level, still pose a significant and often overlooked threat to applications using these libraries.

### VII. Related Work

#### A. Securing SSL/TLS Implementations

Numerous projects have analyzed the security of different components of SSL/TLS implementations. We summarize the most relevant ones below. The primary difference between these projects and ours is that none of them focused on automatically analyzing the correctness of the hostname verification part of SSL/TLS certificate validation implementations. Prior works did not cover hostname verification in detail, primarily due to the difficulty in accurately modeling the implementations. In this paper, we address this problem by using automata learning techniques, demonstrating that they can accurately and efficiently infer DFA models of hostname verification implementations in a black-box manner.

- **Automated Analysis of SSL/TLS Implementations:**
  - Brubaker et al. [36] and Chen et al. [39] used mutation-based differential testing to find certificate validation issues. However, they disabled the hostname verification functionality to discover other certificate validation issues, thus missing the bugs our work uncovers.
  - He et al. [52] used static analysis to detect incorrect usage of SSL/TLS library APIs.
  - Somorovsky [61] created TLS-Attacker, a tool for systematically fuzzing TLS implementations. However, TLS-Attacker focused on finding protocol-level bugs and did not analyze hostname verification functionalities.
  - de Ruiter and Poll [41] used automata learning algorithms to infer models of the TLS protocol and manually inspected the machines to find bugs. Unlike our approach, which focuses on hostname verification, their work concentrated on the TLS state machine induced by the messages exchanged during the TLS handshake.

- **Certificate Validation:**
  - Georgiev et al. [50] studied how SSL/TLS APIs were misused in non-browser software, identifying pervasive incorrect certificate validation in critical software.
  - Fahl et al. [45] investigated the incorrect usage of SSL/TLS APIs in Android apps. Unlike HVLearn, these projects did not look into the implementations of the API functions.

- **Parsing X.509 Certificates with Embedded NULL Characters:**
  - Kaminsky et al. [53] demonstrated that several hostname verification implementations mishandled embedded NULL characters in X.509 certificates, allowing CAs to issue valid leaf certificates with the wrong subject name. They found these issues manually and did not have automated techniques for analyzing hostname verification implementations. Despite fixes in SSL/TLS implementations, we found that several applications using incorrect APIs for extracting identifiers from certificates still suffer from these vulnerabilities, as described in Section VI.

- **Cryptographic Attacks and Implementation Bugs:**
  - There is extensive research on cryptographic attacks on SSL/TLS protocol implementations, including protocol-based attacks, timing attacks, and flaws in pseudo-random number generators [40]. Implementation bugs can also cause severe security vulnerabilities, as demonstrated by recent attacks [26, 56].

#### B. Automata Inference and Applications

- **Automata Learning Algorithms:**
  - Angluin [31] introduced the L* algorithm for learning deterministic finite automata (DFA) from membership and equivalence queries. Variations and optimizations, such as the Kearns-Vazirani algorithm used in HVLearn [54], have been developed. Balcazzar et al. [34] provide a unified presentation of popular algorithms.
  - Automata learning algorithms have been applied to infer models for various protocols, including EMV bank cards [29], electronic passports [30], TLS protocols [41], and TCP/IP implementations [47, 48].
  - Argyros et al. [33] used symbolic finite automata learning algorithms to create a differential testing framework and discovered bugs in web application firewalls. Our approach is similar but addresses the problem of large alphabets by using only necessary symbols and employs an optimized version of the Wp-method for stronger correctness guarantees.

### VIII. Conclusion

We designed, implemented, and extensively evaluated HVLearn, an automated black-box automata learning framework for analyzing different hostname verification implementations. HVLearn supports the automated extraction of DFA models from multiple implementations and efficient differential testing of the inferred DFA models. Our evaluation on a broad spectrum of hostname verification implementations identified 8 RFC violations with serious security implications, several of which could enable active man-in-the-middle attacks. We also discovered an average of 121 unique differences between each pair of inferred DFA models. Given the ambiguity in RFC specifications regarding corner cases, the models inferred by HVLearn will be valuable for developers to check their hostname verification implementations against the RFC specifications, thereby reducing the risk of undetected security flaws. HVLearn is open-source and can be accessed at https://github.com/HVLearn.

### IX. Acknowledgments

We would like to thank the anonymous reviewers for their feedback. This work was supported by the NSF under grants CNS-13-18415 and CNS-16-17670. Author Suphannee Sivakorn is also partially supported by the Ministry of Science and Technology of the Royal Thai Government. Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect those of the US Government or the NSF.

### References

[References listed as provided in the original text]

### X. Appendix

#### A. Details of Test Hostname Verification Implementations

- **OpenSSL:**
  - OpenSSL has separate checking functions for each type of identifier, as shown in Table I. In our testing, we used the default setup that supports matching wildcards. OpenSSL also provides functions for applications to enable or disable some of these hostname verification functions (e.g., `X509_VERIFY_PARAM_set1_host` and `X509_VERIFY_PARAM_set1_email`).

- **GnuTLS:**
  - The GnuTLS check hostname function is designed for certificate verification in HTTPS, supporting domain names, IPv4, and IPv6. Like OpenSSL, GnuTLS allows applications to choose whether to verify hostnames with wildcards. By default, wildcard matching is enabled, and we used the default setting for our experiments.

- **MbedTLS:**
  - MbedTLS only supports hostname verification for domain names. The verification functions in MbedTLS are limited to this scope.

- **MatrixSSL:**
  - A single function, `matrixValidateCerts`, is responsible for checking all different types of identifiers in MatrixSSL.