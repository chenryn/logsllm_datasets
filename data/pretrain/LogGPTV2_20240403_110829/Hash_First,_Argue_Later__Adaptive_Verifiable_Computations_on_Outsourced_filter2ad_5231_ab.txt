sumption holds if, for every p.p.t. adversary A, there exists a p.p.t. extractor E such that for all
large enough λ and ‘benign’ auxiliary input aux ∈ {0, 1}poly(λ)
pp = Gλ; Hi
$←− G1; ω $←− Zp; (A, B ;(x1, . . . , xn)) ← (A(cid:107)E) (pp,{Hi, H ω
Pr
(cid:20)
Aω = B ∧ A (cid:54)=
i=1, aux) :
H xi
i
≈ 0
i }n
n(cid:89)
(cid:21)
In the game above, (u; w) ← (A(cid:107)E) indicates running both algorithms on the same inputs and
random tape, and assigning their results to u and to w, respectively. This assumption can been
seen as an n-Knowledge of Exponent Assumption [11] but for the general group model. Indeed
the authors of [11] use the argument by Groth [30] to conjecture that their assumption must hold
independently of the bilinear structure. Auxiliary input is required to be drawn from a ‘benign
distribution’ to avoid impossibility of certain knowledge assumptions [12, 10].
i=1
5
2.1 Online-Oﬄine SNARKs
We recall the deﬁnition of succinct non-interactive arguments (SNARG) and arguments of knowl-
edge (SNARK) as used by our constructions.
Let {Rλ}λ be a sequence of families of eﬃciently decidable relations R ∈ Rλ, with R ⊂ UR×WR.
For pairs (u ; w) ∈ R, we call u the instance and w the witness; we are interested in producing and
verifying arguments that ∃w.R(u ; w) holds. We require that all instances include some data in
a ﬁxed format. That is, for each R ∈ Rλ, we have UR = X × VR and instances are of the form
u = (x, v). For example, u may consist of the input x and output y of a function with domain X,
i.e., y = f (x). More generally, u may consist of the inputs x, y and output z of functions whose
domains include X, i.e., z = f (x, y).
For any sequence of families of eﬃciently decidable relations {Rλ}λ as deﬁned above, SNARGs
and SNARKs consist of 3 algorithms VC = (KeyGen, Prove, Verify), as follows.
(EK, VK) ← KeyGen(1λ, R) takes the security parameter and a relation R ∈ Rλ and computes
evaluation and veriﬁcation keys.
Π ← Prove(EK, u ; w) takes an evaluation key for R, an instance u, and a witness w such that
R(u ; w) holds, and returns a proof.
b ← Verify(VK, u, Π) takes a veriﬁcation key and an instance u, and either accepts (b = 1) or rejects
(b = 0) the proof Π.
(EK, VK) are also referred to as the common reference string.
Deﬁnition 2.1 (Soundness). A VC scheme is sound if, for all sequences {Rλ}λ∈N in {Rλ}λ∈N and
for all p.p.t. adversaries A, we have
 EK, VK ← KeyGen(1λ, Rλ);
u, Π ← A(EK, VK, Rλ);
Verify(VK, u, Π) ∧ ¬∃w.Rλ(u ; w)
 ≈ 0.
Pr
Online-Oﬄine Veriﬁcation 1 The veriﬁcation algorithm of many SNARG constructions can be
split into oﬄine and online computations. Speciﬁcally, for many SNARGs, there exists algorithms
(Online, Oﬄine) such that:
Verify(VK, u, Π) = Online(VK, Oﬄine(VK, x), v, Π).
The oﬄine phase can be seen as the computation of one or more Pedersen-like commitments cx
(here, cx = Oﬄine(VK, x)), some of which may be computed by the prover, and possibly never
opened by the veriﬁer. On their own, such commitments are not perfectly binding, so this involves
modelling adversaries that do not output (u, w) but still must ‘know’ the value they are committing
to. For such cases, we require the existence of an algorithm E that can extract x and w from a
verifying proof.
Deﬁnition 2.2 (Online Knowledge Soundness). A VC scheme is online knowledge sound if, for all
sequences {Rλ}λ∈N in {Rλ}λ∈N and all p.p.t. adversaries A, there exists a p.p.t. extractor E such
that
 EK, VK ← KeyGen(1λ, Rλ);
(cx, v, Π; x, w) ← (A||E)(EK, VK, Rλ);
Online(VK, cx, v, Π) = 1 ∧ ¬Rλ(x, v; w)
 ≈ 0
Pr
1The oﬄine phase is not to be confused with input-independent precomputation steps of the veriﬁer in [8, 9].
6
Instantiations of Online-Oﬄine SNARKs Many succinct veriﬁable-computation construc-
tions [21, 7, 9, 31] can be presented in a style that make more apparent their reliance on commit-
ments on their inputs, outputs, and internal witnesses. We may instantiate VC using, for example,
the Geppetto construction [20], which explicitly separates (oﬄine) commitments and (online) proofs
and provides online knowledge soundness.
Instantiation of Oﬄine Veriﬁcation In our work, we consider schemes where the oﬄine com-
putations consist purely of multi-exponentiations in G1 over the instance u, followed by online
computations that accept or reject the proof. As mentioned above, we consider the case when UR
splits into X, VR. More speciﬁcally, we assume that X = Zn
from X to
G1, where the group elements (F1, F2, . . . , Fn) ∈ Gn
1 are part of the keys. The VC schemes discussed
above follow this format.
p and Oﬄine(VK, x) =(cid:81) F xi
i
3 Multi-Relation Hash & Prove Schemes (HP)
We deﬁne our schemes for eﬃciently decidable relations R ∈ Rλ, with R ⊂ UR × WR. Recall that
we are interested in producing and verifying arguments that ∃w.R(u ; w) holds for pairs (u ; w) ∈ R,
where u is the instance and w the witness. The witness can often speed up veriﬁcation by providing
a non-deterministic hint, as veriﬁcation is often more eﬃcient than computation, notably in the case
of relations for NP complete languages. We keep the witness implicit when they can be eﬃciently
computed from the instance. As in Section 2.1, we consider relations where UR splits into X, VR.
A multi-relation hash & prove scheme consists of 5 algorithms HP = (Setup, Hash, KeyGen, Prove, Verify),
as follows.
pp ← Setup(1λ) takes the security parameter and generates the public parameter for the scheme;
σx ← Hash(pp, x) produces a hash given some data x ∈ X;
EKR, VKR ← KeyGen(pp, R) generates evaluation key EKR and veriﬁcation key VKR given a relation
R ∈ Rλ;
ΠR ← Prove(EKR, x, v ; w) produces a proof of R(x, v ; w) given an instance and witness that satisfy
the relation.
b ← Verify(VKR, σx, v, ΠR) either accepts (b = 1) or rejects (b = 0) a proof of R given a hash of x
and the rest of its instance v.
Note that hashes of inputs and the keys of a relation can be computed independently. In particular,
σx can be computed ‘oﬄine’, before generating keys, proving, or verifying instances of relations;
and can be shared between all these operations.
3.1 Adaptive Soundness
We describe our intended security properties for an HP scheme, distinguishing two cases. We ﬁrst
deﬁne adaptive soundness with multiple relations and public veriﬁability, then describe a variant
with a single relation.
Deﬁnition 3.1 (Adaptive Soundness). A multi-relation hash & prove scheme HP is adaptively
sound if every p.p.t. adversary with access to oracle KEYGEN wins the game below with negligible
7
probability.
Adaptive Forgery Game
pp ← Setup(1λ)
R, x, v, Π ← AKEYGEN(1λ, pp)
A wins if VERIFY(R, x, v, Π) = 1 and ¬∃w.R(x, v ; w)
KEYGEN(R)
if VK(R) exists, return ⊥
EK, VK ← KeyGen(pp, R)
VK(R) := VK;
return (EK, VK)
VERIFY(R, x, v, Π)
if VK(R) undeﬁned, return 0
σ ← Hash(pp, x)
return Verify(VK(R), σ, v, Π)
The designated-veriﬁer variant of adaptive soundness is obtained by having KEYGEN return only EK,
and giving A oracle access to VERIFY. The single-relation variant is obtained by requesting that
the adversary calls KEYGEN once.
Informally, adaptive soundness means that an adversary that interacts with a veriﬁer on any
number of chosen instances of relations supported by HP cannot forge any argument. Although
the VERIFY procedure in the experiment always recomputes σx, this hash can of course be shared
between veriﬁcations of multiple instances that use the same x.
Unfolding the deﬁnition, the single-relation, public veriﬁability game is deﬁned by
Adaptive Forgery Game (single relation, public veriﬁability)
pp ← Setup(1λ)
R, state ← A0(1λ, pp)
EK, VK ← KeyGen(pp, R)
x, v, Π ← A1(state, EK, VK)
A wins if Verify(VK, Hash(pp, x), v, Π) = 1 and ¬∃w.R(x, v ; w)
This simpler, single-relation game is still adaptive, in the sense that the relation R can be chosen
by A with knowledge of pp, and the instance x, v can depend on EK, VK. Using a standard hybrid
argument, we conﬁrm that adaptive single-relation soundness implies adaptive soundness.
Theorem 3.1 (Security of multi-relation HP). A HP scheme that is -secure as per Deﬁni-
tion 3.1 for a single relation is q-secure for multiple relations, where q bounds the number of
calls to KEYGEN made by the adversary.
The proof is in Appendix D.1.
3.2 Accepting Hashes from the Adversary
In the deﬁnition of adaptive soundness, all hash outputs need to be trusted: at some point, the
veriﬁer is given x and honestly computes its hash σx, or (equivalently) receives σx from a trusted
party. However, there are cases where the veriﬁer may be given σx but not x. As an example, a
composite argument that there exists an intermediate x ∈ X such that f (z) = x and g(x) = r may
consist of z, σx, r, Πf , Πg where Πf and Πg prove the two functional relations above. Passing an
‘opaque’ hash σx may be more eﬃcient than passing x, and may enable the prover to keep x secret.
Similarly, one may see σx as a binding commitment to some x, received from the adversary, then
later used in arguments that disclose some of its contents. Deﬁnition 3.1 does not account for such
arguments.
8
In order for HP to support arguments on hashes provided by the adversary, we further require
that its Hash algorithm is an extractable collision-resistant hash function. The extractability prop-
erty guarantees that σx was indeed produced by Hash on some input x. The collision-resistance
property guarantees that it is hard to produce two inputs for which Hash produces the same output.
Deﬁnition 3.2 (Hash Extractability [11]). A hash function Hash is extractable when, for any p.p.t.
adversary A, there exists a p.p.t. extractor E such that, for a large enough security parameter λ
and ‘benign’ auxiliary input aux ∈ {0, 1}poly(λ), the adversary wins the game below with negligible
probability.
Hash Extraction Game
pp ← Setup(1λ)
(σ; xe) ← (A(cid:107)E) (pp, aux)
A wins if ∃x.Hash(pp, x) = σ ∧ σ (cid:54)= Hash(pp, xe)
and there is a p.p.t. algorithm Check(pp, σ) that returns 1 if ∃x.Hash(pp, x) = σ and 0 otherwise.
(In the game above, (A(cid:107)E) indicates running both algorithms on the same inputs and random tape,
and assigning their results to σ and to xe, respectively.) In contrast with the original deﬁnition of
[11], we require the existence of Check so that our veriﬁers can check the well-formedness of hashes
received from the adversary.
Adaptive soundness for HP schemes guarantees collision-resistance for Hash as long as, for all
x0 (cid:54)= x1, there exists a relation R ∈ Rλ and v ∈ VR to separate them, that is, ∃w.R(x1, v; w) ∧
¬∃w.R(x0, v; w). On the other hand, adaptive soundness does not guarantee that σ is unique, nor
does it exclude adversaries able to forge σ that pass veriﬁcation.
Complementarily, hash extraction enables us to verify arguments that include opaque hashes
provided by the adversary by ﬁrst extracting their content then applying adaptive soundness. To
formalize this idea, we complete our deﬁnitions with a more generally useful notion of soundness,
called adaptive hash soundness.
At a high level, an adaptively hash sound HP scheme allows us to verify a composite argument
whose instances mix plaintext values x ∈ X and opaque hashes σ ∈ Σ, where Σ is a ﬁnite set
of hashes; importantly, the same σ can occur in multiple instances. To verify the argument, the
veriﬁer checks each proof using hashes that are either recomputed from x ∈ X (once for each x,
similar to Deﬁnition 3.1), or checked for well-formedness.
Our main result for this property is that any scheme HP that is both adaptively sound and hash
extractable is also adaptively hash sound. This result relies on soundness of HP, provided that one
has access to preimages of the hash values σ ∈ Σ; in turn, this requirement is guaranteed by the
hash extractability property.
We provide a formal deﬁnition as well as the proof of the result above in Appendix A.
Stronger Security Notions for HP Our security deﬁnitions for HP schemes model adaptive
soundness and extractability of hash inputs, but not extractability of witnesses, i.e., an equivalent of
knowledge soundness for HP schemes. While adaptive soundness is suﬃcient for applications such
as veriﬁable computation in which the input data is supplied by the veriﬁer, knowledge soundness
can be useful when using HP schemes in larger cryptographic protocols and in applications where
the prover also provides some input. Elaborating such a deﬁnition of knowledge soundness for HP
schemes (and proving a construction using it) raises subtleties related to deﬁning an extractor for
an adversary that has adaptive access to the KEYGEN oracle. We believe this is an interesting
direction, which we leave for future work. Another useful security notion that may be considered is
zero-knowledge, which intuitively guarantees that proofs do not reveal any non-trivial information
about the witnesses. A zero-knowledge deﬁnition for HP schemes is provided in Appendix B.
9
3.3 Hash & Prove Scheme via Inner Encoding
In the introduction, we distinguished between two ways of embedding data representation inside
VC schemes: inner and outer encodings. Here we describe a construction proposed in [11, 26, 5, 16]
which serves as an example of inner encoding. We call this scheme HPinn. The construction is
presented for completeness (to show that it formally adheres our new deﬁnitions), and to facilitate
the comparison with our new constructions of Section 4.
The construction uses a keyed, collision-resistant hash scheme with domain X, consisting of two
algorithms k ← keygen(1λ) and σ ← hashk(x), together with a succinct argument VC for a family
of relations R(cid:48), deﬁned next.
relation R in HPinn, our construction uses VC on a relation R(cid:48):
Intuitively, we check the computation σ = hashk(x) within the proof system: to argue on a
R(cid:48)(σx, v ; x, w) = R(x, v ; w) ∧ (σx = hashk(x)).
Compared with R, the relation R(cid:48) uses σx instead of x in the instance, and takes x as an additional
witness. (Presumably, σx is smaller than x and easier to process in proof veriﬁcations.) We deﬁne
HPinn as follows:
Setup(1λ) samples k ← keygen(1λ) and returns k as pp;
Hash(pp, x) computes σx ← hashpp(x);
KeyGen(pp, R) generates (EKR, VKR) ← VC.KeyGen(1λ, R(cid:48));
Prove(EKR, x, v ; w) returns Π ← VC.Prove(EKR, v, σx ; x, w) for σx = hashpp(x);
Verify(VKR, σx, v, Π) returns VC.Verify(VKR, σx, v, Π).
Theorem 3.2. If VC is knowledge-sound and hash is collision-resistant, then HPinn is adaptively
sound (Deﬁnition 3.1 for multiple relations).
The proof can be found in Appendix D.2.
Hash Extractability. The construction above naturally extends to extractable hashes, by ap-
plying VC to the relation that checks the hash computation, deﬁned by
Rk(σ ; x) = (σ = hashk(x)).
We write HPE for the resulting scheme, obtained from HPinn above by extending the Setup and
Hash algorithms and adding a Check algorithm:
SetupE (1λ) samples k ← keygen(1λ); generates EKpp, VKpp ← VC.KeyGen(pp, Rk); and returns