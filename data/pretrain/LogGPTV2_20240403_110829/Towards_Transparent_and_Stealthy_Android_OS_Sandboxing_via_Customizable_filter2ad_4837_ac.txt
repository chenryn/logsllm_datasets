### ADB Virtualization and VPBox Enhancements

We have introduced a control center application for VPBox users, enabling them to start and switch virtual profiles (VPs) swiftly. More importantly, we have improved the Cells framework in four significant ways to meet our requirements for transparency and stealthiness:

1. **Kernel-Level Device Virtualization**: We have designed kernel-level device virtualization to be compatible with device changes in new Android systems. This method eliminates the need for in-guest virtualization components for user-level device virtualization (§4).

2. **User-Level Virtualization Mechanism**: We propose a novel user-level virtualization mechanism that provides a flexible and stealthy solution for virtualizing new hardware devices without compromising transparency (§5).

3. **Memory Consumption and SELinux Settings**: We have implemented new measures to reduce memory consumption and enable SELinux settings for each VP (§6).

4. **Customization of VP Device Attributes**: We offer a wide range of options to customize the VP’s device attributes stealthily, allowing for the simulation of more diversified VPs on a single device (§7).

### 4. Kernel-Level Device Virtualization

Kernel-level device virtualization ensures efficient hardware resource multiplexing and is transparent to user-mode apps running in VPs. Our mechanism enables the virtualization of Binder, power management, core network resources, and GPS on mainstream Android versions. The key method involves rewriting the source code of kernel drivers to be aware of the device namespace.

#### Binder
Binder allows high-level framework APIs to cross process boundaries and interact with Android system services. The Binder driver consists of three pseudo-device drivers: “/dev/binder”, “/dev/hwbinder”, and “/dev/vndbinder”. Without Binder virtualization, IPC features can be abused, violating system isolation between containers. In VPBox, we have modified all Binder drivers’ data structures to enable IPC between processes sharing the same device namespace. This forms the foundation of our new user-level device virtualization technique, allowing a service process in the VP to share the corresponding service in the host system without any virtualization component in the VP’s userspace.

#### GPS
GPS provides more accurate positioning than network-based methods, but existing Android containers do not support GPS virtualization. GPS relies on a physical chip, and the Android framework interacts with it via the “/dev/gss” driver. The GPS chip supports only one connection, so our virtualization rewrites the “/dev/gss” driver to support multiple connections. We modify the “gss_open” and “gss_event_output” functions to forward location information to multiple clients simultaneously, ensuring that the location information reaches both the host and virtual phones.

### 5. User-Level Device Virtualization

User-level device virtualization is necessary for proprietary software stacks that are closed-source. VPBox achieves this by developing two new methods:

#### 1. Binder Service Sharing
For system services registered in ServiceManager (e.g., WifiService, SurfaceFlinger), we use a new virtualization technique via Binder service sharing. We modify the Binder-driver data structure to ensure each VP has its own instance. We then create a handler in Binder’s data structure to point to the host’s context_mgr_node, allowing the VP to access the host’s ServiceManager. This mechanism enables a VP’s service process to share the corresponding service in the host system. We use SELinux to enforce which services the VP can share. In VPBox, we use this for WiFi configuration, Display, GPU, Audio, and Camera.

#### 2. Device Namespace Proxy
For anonymous services not registered in ServiceManager (e.g., telephone, Bluetooth), we develop a device namespace proxy. This proxy virtualizes these services without leaving any in-guest virtualization component. Unlike Cells, which creates a proxy layer at the VP’s application framework layer, our proxy operates in the host’s userspace, making it stealthier and harder to detect.

### 5.1 WiFi Configuration
WiFi configuration and status notifications occur in the userspace. We use Binder service sharing for virtualization. Compared to Cells, our approach is simpler and leaves no virtualization component in the VP’s userspace. Figure 2 illustrates the design, showing how WiFi-connection information is managed and forwarded between the host and VP.

### 5.2 Display, GPU, Audio, and Camera
Display, GPU, Audio, and Camera are virtualized using the Binder service sharing mechanism. For example, SurfaceFlinger, responsible for compositing application and system surfaces, is shared between the VP and host. We add system tags to identify layers and manage screen switching, ensuring proper foreground-background usage.

### 5.3 Bluetooth
Existing Android emulators and containers cannot virtualize Bluetooth due to closed-source vendor code. Figure 3 shows the Android Bluetooth architecture. To virtualize Bluetooth, we use a device namespace proxy, allowing the VP to interact with the host’s Bluetooth stack without additional in-guest components.

This comprehensive approach ensures that VPBox provides a robust, transparent, and stealthy virtualization solution for a wide range of hardware and software components.