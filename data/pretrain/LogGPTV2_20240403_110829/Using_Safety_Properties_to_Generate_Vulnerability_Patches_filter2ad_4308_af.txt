### Network Filters and Malicious Input Handling

Network filters, as described in [53], are commonly used to identify and block malicious inputs. Most of these techniques rely on the semantics or syntax of the inputs to detect malicious content. However, some methods focus on the semantics of vulnerabilities [4], [28]. Senx, similar to these techniques, uses the semantics of vulnerabilities to synthesize patches. However, its primary goal is to generate patches to fix vulnerabilities, rather than just identifying them.

#### Rectifying Inputs

An alternative approach to filtering inputs is to rectify malicious inputs to prevent them from triggering vulnerabilities. For example, SOAP uses taint analysis to learn constraints on input by observing program executions with benign inputs. It then identifies inputs that violate these constraints and attempts to modify them to satisfy the constraints, thereby rendering the input harmless and ensuring that the desired data in the rectified input can be correctly processed [25].

Another method, A2C, encodes inputs with a one-time dictionary and decodes them only when the program execution goes beyond paths likely to have vulnerabilities. This approach aims to disable any embedded exploit code by making it fragile to slight changes [21].

### Conclusion

This paper presents the design and implementation of Senx, a system that generates patches for buffer overflow, bad cast, and integer overflow vulnerabilities using human-specified safety properties. Senx leverages three novel program analysis techniques: loop cloning, access range analysis, and expression translation. Additionally, it utilizes an expression representation that facilitates translating expressions extracted from symbolic execution back into C/C++ source code. These techniques enable Senx to generate correct patches for 76% of the 42 real-world vulnerabilities tested. The main limitations of Senx include limited precision in alias analysis for loop cloning and the inability to converge expressions to find a location in the program where all necessary variables are in scope.

### Acknowledgements

This research was supported in part by an NSERC Discovery Grant (RGPIN 2018-05931) and a Canada Research Chair (950-228402).

### References

[1] GiNaC is Not a CAS. http://www.ginac.de/, 2018. Accessed: May, 2018.
[2] http://blogs.gentoo.org/ago, 2018. Accessed: May, 2018.
[3] http://github.com/asarubbo/poc, 2018. Accessed: May, 2018.
[4] BRUMLEY, D., NEWSOME, J., SONG, D., WANG, H., AND JHA, S. Towards automatic generation of vulnerability-based signatures. In Proceedings of the 2006 IEEE Symposium on Security and Privacy (Washington, DC, USA, 2006), SP ’06, IEEE Computer Society, pp. 2–16.
[5] http://lists.gnu.org/archive/html/bug-coreutils/, 2018. Accessed: May, 2018.
[6] http://bugzilla.maptools.org/, 2018. Accessed: May, 2018.
[7] CADAR, C., DUNBAR, D., AND ENGLER, D. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation (Berkeley, CA, USA, 2008), OSDI’08, USENIX Association, pp. 209–224.
[8] http://llvm.org/docs/Passes.html#loop-simplify-canonicalize-natural-loops, 2018. Accessed: May, 2018.
[9] CHEN, P., XU, J., HU, Z., XING, X., ZHU, M., MAO, B., AND LIU, P. What you see is not what you get! thwarting just-in-time rop with chameleon. In 2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN) (June 2017), pp. 451–462.
[10] http://cve.mitre.org, 2018. Accessed: May, 2018.
[11] COSTA, M., CASTRO, M., ZHOU, L., ZHANG, L., AND PEINADO, M. Bouncer: Securing software by blocking bad input. In Proceedings of Twenty-first ACM SIGOPS Symposium on Operating Systems Principles (New York, NY, USA, 2007), SOSP ’07, ACM, pp. 117–130.
[12] COWAN, C., PU, C., MAIER, D., WALPOLE, J., BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., ZHANG, Q., AND HINTON, H. StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In Proc. of the 7th USENIX Security Symposium (Jan. 1998), pp. 63–78.
[13] CRISWELL, J., DAUTENHAHN, N., AND ADVE, V. KCoFI: Complete Control-Flow Integrity for Commodity Operating System Kernels. In Proceedings of the 2014 IEEE Symposium on Security and Privacy (Washington, DC, USA, 2014), SP ’14, IEEE Computer Society, pp. 292–307.
[14] CULLMANN, C., AND MARTIN, F. Data-Flow Based Detection of Loop Bounds. In Workshop on Worst-Case Execution Time (2007).
[15] http://www.cvedetails.com, 2018. Accessed: May, 2018.
[16] GAO, Q., XIONG, Y., MI, Y., ZHANG, L., YANG, W., ZHOU, Z., XIE, B., AND MEI, H. Safe memory-leak fixing for c programs. In Proceedings of the 37th International Conference on Software Engineering - Volume 1 (Piscataway, NJ, USA, 2015), ICSE ’15, IEEE Press, pp. 459–470.
[17] GOPAN, D., AND REPS, T. Low-level library analysis and summarization. In Computer Aided Verification (Berlin, Heidelberg, 2007), W. Damm and H. Hermanns, Eds., Springer Berlin Heidelberg, pp. 68–81.
[18] HUANG, W., HUANG, Z., MIYANI, D., AND LIE, D. Lmp: Lightweighted memory protection with hardware assistance. In Proceedings of the 32nd Annual Conference on Computer Security Applications (New York, NY, USA, 2016), ACSAC ’16, ACM, pp. 460–470.
[19] HUANG, Z., D’ANGELO, M., MIYANI, D., AND LIE, D. Talos: Neutralizing vulnerabilities with security workarounds for rapid response. In 2016 IEEE Symposium on Security and Privacy (SP) (May 2016), pp. 618–635.
[20] KIM, D., NAM, J., SONG, J., AND KIM, S. Automatic patch generation learned from human-written patches. In Proceedings of the 2013 International Conference on Software Engineering (Piscataway, NJ, USA, 2013), ICSE ’13, IEEE Press, pp. 802–811.
[21] KWON, Y., SALTAFORMAGGIO, B., KIM, I. L., LEE, K. H., ZHANG, X., AND XU, D. A2C: Self-destructing exploit executions via input perturbation. In Proceedings of NDSS’17 (2017), Internet Society.
[22] LATTNER, C., LENHARTH, A., AND ADVE, V. Making context-sensitive points-to analysis with heap cloning practical for the real world. In Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation (New York, NY, USA, 2007), PLDI ’07, ACM, pp. 278–289.
[23] LE GOUES, C., DEWEY-VOGT, M., FORREST, S., AND WEIMER, W. A systematic study of automated program repair: Fixing 55 out of 105 bugs for $8 each. In Proceedings of the 2012 International Conference on Software Engineering (June 2012), pp. 3–13.
[24] LIN, Z., JIANG, X., XU, D., MAO, B., AND XIE, L. AutoPaG: Towards Automated Software Patch Generation with Source Code Root Cause Identification and Repair. In Proceedings of the 2nd ACM Symposium on Information, Computer and Communications Security (New York, NY, USA, 2007), ASIACCS ’07, ACM, pp. 329–340.
[25] LONG, F., GANESH, V., CARBIN, M., SIDIROGLOU, S., AND RINARD, M. Automatic input rectification. In Proceedings of the 34th International Conference on Software Engineering (Piscataway, NJ, USA, 2012), ICSE ’12, IEEE Press, pp. 80–90.
[26] LONG, F., AND RINARD, M. Staged program repair with condition synthesis. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering (New York, NY, USA, 2015), ESEC/FSE 2015, ACM, pp. 166–178.
[27] LONG, F., AND RINARD, M. Automatic Patch Generation by Learning Correct Code. In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (New York, NY, USA, 2016), POPL ’16, ACM, pp. 298–312.
[28] LONG, F., SIDIROGLOU-DOUSKOS, S., KIM, D., AND RINARD, M. Sound input filter generation for integer overflow errors. In Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (New York, NY, USA, 2014), POPL ’14, ACM, pp. 439–452.
[29] MECHTAEV, S., YI, J., AND ROYCHOUDHURY, A. DirectFix: Looking for simple program repairs. In Proceedings of the 37th International Conference on Software Engineering - Volume 1 (Piscataway, NJ, USA, 2015), ICSE ’15, IEEE Press, pp. 448–458.
[30] MECHTAEV, S., YI, J., AND ROYCHOUDHURY, A. Angelix: Scalable multiline program patch synthesis via symbolic analysis. In Proceedings of the 38th International Conference on Software Engineering (New York, NY, USA, 2016), ICSE ’16, ACM, pp. 691–701.
[31] MORRISETT, G., TAN, G., TASSAROTTI, J., TRISTAN, J.-B., AND GAN, E. RockSalt: better, faster, stronger SFI for the x86. In Proceedings of the 2012 ACM SIGPLAN conference on Programming Language Design and Implementation (PLDI) (New York, NY, USA, 2012), PLDI ’12, ACM, pp. 395–404.
[32] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M. K., AND ZDANCEWIC, S. Softbound: highly compatible and complete spatial memory safety for C. In ACM SIGPLAN conference on Programming Language Design and Implementation (PLDI) (2009), pp. 245–258.
[33] http://nvd.nist.gov, 2018. Accessed: May, 2018.
[34] NGUYEN, H. D. T., QI, D., ROYCHOUDHURY, A., AND CHANDRA, S. SemFix: Program repair via semantic analysis. In Proceedings of the 2013 International Conference on Software Engineering (Piscataway, NJ, USA, 2013), ICSE ’13, IEEE Press, pp. 772–781.
[35] http://www.exploit-db.com, 2018. Accessed: May, 2018.
[36] PERKINS, J. H., KIM, S., LARSEN, S., AMARASINGHE, S., BACHRACH, J., CARBIN, M., PACHECO, C., SHERWOOD, F., SIDIROGLOU, S., SULLIVAN, G., WONG, W.-F., ZIBIN, Y., ERNST, M. D., AND RINARD, M. Automatically patching errors in deployed software. In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles (New York, NY, USA, 2009), SOSP ’09, ACM, pp. 87–102.
[37] http://bugs.php.net, 2018. Accessed: May, 2018.
[38] http://www.php-security.org/MOPB/MOPB-41-2007.html, 2018. Accessed: May, 2018.
[39] QI, Y., MAO, X., LEI, Y., DAI, Z., AND WANG, C. The strength of random search on automated program repair. In Proceedings of the 36th International Conference on Software Engineering (New York, NY, USA, 2014), ICSE 2014, ACM, pp. 254–265.
[40] QI, Z., LONG, F., ACHOUR, S., AND RINARD, M. An analysis of patch plausibility and correctness for generate-and-validate patch generation systems. In Proceedings of the 2015 International Symposium on Software Testing and Analysis (New York, NY, USA, 2015), ISSTA 2015, ACM, pp. 24–36.
[41] http://bugzilla.redhat.com, 2018. Accessed: May, 2018.
[42] http://www.openwall.com/lists/oss-security/2012/05/03/4, 2018.
[43] SHACHAM, H., PAGE, M., PFAFF, B., GOH, E.-J., MODADUGU, N., AND BONEH, D. On the Effectiveness of Address-Space Randomization. In Proceedings of the 11th ACM Conference on Computer and Communications Security (CCS) (Oct. 2004), pp. 298–307.
[44] http://www.mail-archive.com/PI:EMAIL/, 2018.
[45] http://www.angelfire.com/sk/stackshield, 2018.
[46] http://github.com/jirislaby/LLVMSlicer, 2018.
[47] SÜSSKRAUT, M., AND FETZER, C. Robustness and security hardening of COTS software libraries. In The 37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2007, 25-28 June 2007, Edinburgh, UK, Proceedings (2007), pp. 61–71.
[48] http://llvm.org/, 2018.
[49] http://pax.grsecurity.net/, 2018.
[50] TIAN, D., ZENG, Q., WU, D., LIU, P., AND HU, C. Kruiser: Semi-synchronized non-blocking concurrent kernel heap buffer overflow monitoring. In 19th Annual Network and Distributed System Security Symposium, NDSS 2012, San Diego, California, USA, February 5-8, 2012 (2012).
[51] TICE, C., ROEDER, T., COLLINGBOURNE, P., CHECKOWAY, S., ERLINGSSON, Ú., LOZANO, L., AND PIKE, G. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In 23rd USENIX Security Symposium (USENIX Security 14) (San Diego, CA, Aug. 2014), USENIX Association, pp. 941–955.
[52] WAHBE, R., LUCCO, S., ANDERSON, T. E., AND GRAHAM, S. L. Efficient software-based fault isolation. In ACM SIGOPS Operating Systems Review (1994), vol. 27, pp. 203–216.
[53] WANG, H. J., GUO, C., SIMON, D. R., AND ZUGENMAIER, A. Shield: Vulnerability-driven network filters for preventing known vulnerability exploits. In Proceedings of the 2004 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications (New York, NY, USA, 2004), SIGCOMM ’04, ACM, pp. 193–204.
[54] WEIMER, W., FRY, Z. P., AND FORREST, S. Leveraging program equivalence for adaptive program repair: Models and first results. In Proceedings of the 28th IEEE/ACM International Conference on Automated Software Engineering (Piscataway, NJ, USA, 2013), ASE’13, IEEE Press, pp. 356–366.
[55] WEIMER, W., NGUYEN, T., LE GOUES, C., AND FORREST, S. Automatically Finding Patches Using Genetic Programming. In Proceedings of the 31st International Conference on Software Engineering (Washington, DC, USA, 2009), ICSE ’09, IEEE Computer Society, pp. 364–374.
[56] http://sourceware.org/bugzilla/, 2018. Accessed: May, 2018.
[57] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R., ORMANDY, T., OKASAKA, S., NARULA, N., AND FULLAGAR, N. Native Client: A sandbox for portable, untrusted x86 native code. In Security and Privacy, 2009 30th IEEE Symposium on (2009), pp. 79–93.
[58] ZHANG, M., AND SEKAR, R. Control Flow Integrity for COTS Binaries. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13) (Washington, D.C., 2013), USENIX, pp. 337–352.

### Appendix

We measured how often expression translation could converge the memory access range and buffer allocation size into a single function scope. The results show that it was able to do so in 85% of the cases.

To evaluate the applicability of our analysis techniques, we used 11 programs from the GNU Coreutils, as listed in Table IV. The most common reason for Senx’s access range analysis to be aborted is that loops cannot be normalized by LLVM. For instance, the number of iterations in a loop that parses string input depends on the content of the string, which cannot be symbolically analyzed by access range analysis.

To understand the reasons that can cause expression translation to abort, we attempted to converge the buffer size and memory access range for the loops that we could successfully analyze and tabulated the results in Table V. The "Access Range" column shows the average percentage of functions in the loop's call stack that expression translation could translate the memory access range into, while the "Buffer Range" column shows the average percentage of functions in the buffer allocation's call stack that expression translation could translate the buffer allocation size into. Finally, the "Converged" column indicates the percentage of loops for which expression translation could find a common function scope in which to place the patch. As seen, the buffer allocation size frequently takes parameters calculated close to the allocation point, limiting the convergence to higher-up functions in the call chain.

| **Type** | **Program** | **SLOC** | **LLVM Bitcode** |
|----------|-------------|----------|------------------|
| sha512sum | data checksum | 581 | 135KB |
| pr | text formatting | 1,723 | 194KB |
| tr | text manipulation | 761 | 109KB |
| head | directory listing | 3,388 | 418KB |
| od | file dumping | 1,368 | 237KB |
| dir | directory listing | 3,388 | 418KB |
| ls | directory listing | 238 | 91KB |
| base64 | data encoding | 784 | 120KB |
| wc | text processing | 495 | 182KB |
| cat | file concatenating | 3,251 | 433KB |
| sort | data sorting | 694 | 198KB |
| printf | format and print data | 1,516 | 230KB |

| **Program** | **Access Range** | **Buffer Range** | **Converged** |
|-------------|------------------|------------------|---------------|
| pr | 100% | 10% | 100% |
| head | 100% | 25% | 100% |
| tr | 86% | 36% | 100% |
| od | 54% | 16% | 58% |
| cat | 100% | 33% | 100% |
| dir | 71% | 14% | 57% |
| ls | 42% | 33% | 34% |
| base64 | 100% | 33% | 100% |
| md5sum | 100% | 33% | 100% |
| sha512sum | 97% | 80% | 97% |
| sort | 91% | 10% | 90% |
| AVG | 85% | 29% | 85% |

In summary, the buffer allocation size frequently involves parameters calculated close to the allocation point, limiting the convergence to higher-up functions in the call chain.