network ﬁlters based on it [53].
While most of these techniques identify malicious inputs
by the semantics or syntax of the malicious inputs, some
of them focus on the semantics of vulnerabilities [4], [28].
Similar to these techniques, Senx also uses the semantics of
vulnerabilities to synthesize patches. However, Senx has a
different goal of generating patches to ﬁx vulnerabilities.
Rectifying Inputs. Alternative to ﬁltering inputs, some tech-
niques rectify malicious inputs to prevent them from triggering
vulnerabilities. With taint analysis, SOAP learns constraints
on input by observing program executions with benign inputs.
From the constraints that it has learned, it identiﬁes input that
violates the constraints and tries to change the input to make
it satisfy the constraints. By doing so, it not only renders the
input harmless but also allows the desired data in the rectiﬁed
input to be correctly processed [25].
Based on the observation that exploit code embedded in
inputs is often fragile to any slight changes, A2C encodes
inputs with a one-time dictionary and decodes them only
when the program execution goes beyond the paths likely to
have vulnerabilities in order to disable the embedded exploit
code [21].
IX. CONCLUSION
This paper presents the design and implementation of
Senx, a system that uses human-speciﬁed safety properties
to generates patches for buffer overﬂow, bad cast, and inte-
ger overﬂow vulnerabilities. Senx uses three novel program
analysis techniques introduced in this paper: loop cloning,
access range analysis and expression translation. In addition,
Senx utilizes an expression representation that facilitates the
translation of expressions extracted from symbolic execution
back into C/C++ source code. Enabled by these techniques,
Senx generates patches correctly for 76% of the 42 real-world
vulnerabilities. Senx’s main limitations are limited precision in
alias analysis for loop cloning, and the inability to converge
expressions to ﬁnd a location in the program where all
necessary variables are in scope.
ACKNOWLEDGEMENT
This research was supported in part by an NSERC Discov-
ery Grant (RGPIN 2018-05931) and a Canada Research Chair
(950-228402).
REFERENCES
[1] GiNaC is Not a CAS. http://www.ginac.de/, 2018. Accessed: May, 2018.
[2] http://blogs.gentoo.org/ago, 2018. Accessed: May, 2018.
[3] http://github.com/asarubbo/poc, 2018. Accessed: May, 2018.
[4] BRUMLEY, D., NEWSOME, J., SONG, D., WANG, H., AND JHA, S.
Towards automatic generation of vulnerability-based signatures.
In
Proceedings of the 2006 IEEE Symposium on Security and Privacy
(Washington, DC, USA, 2006), SP ’06, IEEE Computer Society, pp. 2–
16.
[5] http://lists.gnu.org/archive/html/bug-coreutils/, 2018. Accessed: May,
2018.
[6] http://bugzilla.maptools.org/, 2018. Accessed: May, 2018.
[7] CADAR, C., DUNBAR, D., AND ENGLER, D. Klee: Unassisted and auto-
matic generation of high-coverage tests for complex systems programs.
In Proceedings of the 8th USENIX Conference on Operating Systems
Design and Implementation (Berkeley, CA, USA, 2008), OSDI’08,
USENIX Association, pp. 209–224.
[8] http://llvm.org/docs/Passes.html#loop-simplify-canonicalize-natural-
loops, 2018. Accessed: May, 2018.
[9] CHEN, P., XU, J., HU, Z., XING, X., ZHU, M., MAO, B., AND LIU,
P. What you see is not what you get! thwarting just-in-time rop with
chameleon. In 2017 47th Annual IEEE/IFIP International Conference
on Dependable Systems and Networks (DSN) (June 2017), pp. 451–462.
[10] http://cve.mitre.org, 2018. Accessed: May, 2018.
[11] COSTA, M., CASTRO, M., ZHOU, L., ZHANG, L., AND PEINADO, M.
Bouncer: Securing software by blocking bad input. In Proceedings of
Twenty-ﬁrst ACM SIGOPS Symposium on Operating Systems Principles
(New York, NY, USA, 2007), SOSP ’07, ACM, pp. 117–130.
[12] COWAN, C., PU, C., MAIER, D., WALPOLE, J., BAKKE, P., BEATTIE,
S., GRIER, A., WAGLE, P., ZHANG, Q., AND HINTON, H. StackGuard:
Automatic adaptive detection and prevention of buffer-overﬂow attacks.
In Proc. of the 7th USENIX Security Symposium (Jan. 1998), pp. 63–78.
[13] CRISWELL, J., DAUTENHAHN, N., AND ADVE, V. KCoFI: Complete
Control-Flow Integrity for Commodity Operating System Kernels.
In
Proceedings of the 2014 IEEE Symposium on Security and Privacy
(Washington, DC, USA, 2014), SP ’14,
IEEE Computer Society,
pp. 292–307.
[14] CULLMANN, C., AND MARTIN, F. Data-Flow Based Detection of Loop
Bounds. In Workshop on Worst-Case Execution Time (2007).
[15] http://www.cvedetails.com, 2018. Accessed: May, 2018.
[16] GAO, Q., XIONG, Y., MI, Y., ZHANG, L., YANG, W., ZHOU, Z., XIE,
B., AND MEI, H. Safe memory-leak ﬁxing for c programs. In Proceed-
ings of the 37th International Conference on Software Engineering -
Volume 1 (Piscataway, NJ, USA, 2015), ICSE ’15, IEEE Press, pp. 459–
470.
[17] GOPAN, D., AND REPS, T. Low-level library analysis and summa-
In Computer Aided Veriﬁcation (Berlin, Heidelberg, 2007),
rization.
W. Damm and H. Hermanns, Eds., Springer Berlin Heidelberg, pp. 68–
81.
[18] HUANG, W., HUANG, Z., MIYANI, D., AND LIE, D. Lmp: Light-
weighted memory protection with hardware assistance. In Proceedings
of the 32Nd Annual Conference on Computer Security Applications
(New York, NY, USA, 2016), ACSAC ’16, ACM, pp. 460–470.
[19] HUANG, Z., D’ANGELO, M., MIYANI, D., AND LIE, D. Talos: Neu-
tralizing vulnerabilities with security workarounds for rapid response.
In 2016 IEEE Symposium on Security and Privacy (SP) (May 2016),
pp. 618–635.
[20] KIM, D., NAM, J., SONG, J., AND KIM, S. Automatic patch generation
the 2013
learned from human-written patches.
International Conference on Software Engineering (Piscataway, NJ,
USA, 2013), ICSE ’13, IEEE Press, pp. 802–811.
In Proceedings of
[21] KWON, Y., SALTAFORMAGGIO, B., KIM, I. L., LEE, K. H., ZHANG,
X., AND XU, D. A2c: Self destructing exploit executions via input
perturbation. In Proceedings of NDSS’17 (2017), Internet Society.
[22] LATTNER, C., LENHARTH, A., AND ADVE, V. Making context-
sensitive points-to analysis with heap cloning practical for the real world.
In Proceedings of the 28th ACM SIGPLAN Conference on Programming
Language Design and Implementation (New York, NY, USA, 2007),
PLDI ’07, ACM, pp. 278–289.
[23] LE GOUES, C., DEWEY-VOGT, M., FORREST, S., AND WEIMER, W.
A systematic study of automated program repair: Fixing 55 out of 105
bugs for $8 each. In Proceedings of the 2012 International Conference
on Software Engineering (June 2012), pp. 3–13.
552
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:21 UTC from IEEE Xplore.  Restrictions apply. 
[24] LIN, Z., JIANG, X., XU, D., MAO, B., AND XIE, L. AutoPaG: Towards
Automated Software Patch Generation with Source Code Root Cause
Identiﬁcation and Repair. In Proceedings of the 2Nd ACM Symposium
on Information, Computer and Communications Security (New York,
NY, USA, 2007), ASIACCS ’07, ACM, pp. 329–340.
[25] LONG, F., GANESH, V., CARBIN, M., SIDIROGLOU, S., AND RINARD,
In Proceedings of the 34th Inter-
M. Automatic input rectiﬁcation.
national Conference on Software Engineering (Piscataway, NJ, USA,
2012), ICSE ’12, IEEE Press, pp. 80–90.
[26] LONG, F., AND RINARD, M. Staged program repair with condition
synthesis. In Proceedings of the 2015 10th Joint Meeting on Foundations
of Software Engineering (New York, NY, USA, 2015), ESEC/FSE 2015,
ACM, pp. 166–178.
[27] LONG, F., AND RINARD, M. Automatic Patch Generation by Learning
In Proceedings of the 43rd Annual ACM SIGPLAN-
Correct Code.
SIGACT Symposium on Principles of Programming Languages (New
York, NY, USA, 2016), POPL ’16, ACM, pp. 298–312.
[28] LONG, F., SIDIROGLOU-DOUSKOS, S., KIM, D., AND RINARD, M.
Sound input ﬁlter generation for integer overﬂow errors. In Proceedings
of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Pro-
gramming Languages (New York, NY, USA, 2014), POPL ’14, ACM,
pp. 439–452.
[29] MECHTAEV, S., YI, J., AND ROYCHOUDHURY, A. Directﬁx: Looking
In Proceedings of the 37th International
for simple program repairs.
Conference on Software Engineering - Volume 1 (Piscataway, NJ, USA,
2015), ICSE ’15, IEEE Press, pp. 448–458.
[30] MECHTAEV, S., YI, J., AND ROYCHOUDHURY, A. Angelix: Scalable
multiline program patch synthesis via symbolic analysis. In Proceedings
of the 38th International Conference on Software Engineering (New
York, NY, USA, 2016), ICSE ’16, ACM, pp. 691–701.
[31] MORRISETT, G., TAN, G., TASSAROTTI, J., TRISTAN, J.-B., AND
GAN, E. RockSalt: better, faster, stronger SFI for the x86.
In
Proceedings of the 2012 ACM SIGPLAN conference on Programming
Language Design and Implementation (PLDI) (New York, NY, USA,
2012), PLDI ’12, ACM, pp. 395–404.
[32] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M. K., AND ZDANCEWIC,
S. Softbound: highly compatible and complete spatial memory safety
for C. In ACM SIGPLAN conference on Programming Language Design
and Implementation (PLDI) (2009), pp. 245–258.
[33] http://nvd.nist.gov, 2018. Accessed: May, 2018.
[34] NGUYEN, H. D. T., QI, D., ROYCHOUDHURY, A., AND CHANDRA, S.
In Proceedings of the
Semﬁx: Program repair via semantic analysis.
2013 International Conference on Software Engineering (Piscataway,
NJ, USA, 2013), ICSE ’13, IEEE Press, pp. 772–781.
[35] http://www.exploit-db.com, 2018. Accessed: May, 2018.
[36] PERKINS,
J. H., KIM, S., LARSEN, S., AMARASINGHE, S.,
BACHRACH,
J., CARBIN, M., PACHECO, C., SHERWOOD, F.,
SIDIROGLOU, S., SULLIVAN, G., WONG, W.-F., ZIBIN, Y., ERNST,
M. D., AND RINARD, M. Automatically patching errors in deployed
In Proceedings of the ACM SIGOPS 22Nd Symposium on
software.
Operating Systems Principles (New York, NY, USA, 2009), SOSP ’09,
ACM, pp. 87–102.
[37] http://bugs.php.net, 2018. Accessed: May, 2018.
[38] http://www.php-security.org/MOPB/MOPB-41-2007.html, 2018. Ac-
cessed: May, 2018.
[39] QI, Y., MAO, X., LEI, Y., DAI, Z., AND WANG, C. The strength of
In Proceedings of the
random search on automated program repair.
36th International Conference on Software Engineering (New York, NY,
USA, 2014), ICSE 2014, ACM, pp. 254–265.
[40] QI, Z., LONG, F., ACHOUR, S., AND RINARD, M. An analysis of patch
plausibility and correctness for generate-and-validate patch generation
the 2015 International Symposium on
systems.
Software Testing and Analysis (New York, NY, USA, 2015), ISSTA
2015, ACM, pp. 24–36.
In Proceedings of
[41] http://bugzilla.redhat.com, 2018. Accessed: May, 2018.
[42] http://www.openwall.com/lists/oss-security/2012/05/03/4, 2018.
[43] SHACHAM, H., PAGE, M., PFAFF, B., GOH, E.-J., MODADUGU, N.,
AND BONEH, D. On the Effectiveness of Address-Space Randomiza-
In Proceedings of the 11th ACM Conference on Computer and
tion.
Communications Security (CCS) (Oct. 2004), pp. 298–307.
[44] http://www.mail-archive.com/PI:EMAIL/,
2018.
[45] http://www.angelﬁre.com/sk/stackshield, 2018.
[46] http://github.com/jirislaby/LLVMSlicer, 2018.
[47] SÜSSKRAUT, M., AND FETZER, C. Robustness and security hardening
of COTS software libraries. In The 37th Annual IEEE/IFIP International
Conference on Dependable Systems and Networks, DSN 2007, 25-28
June 2007, Edinburgh, UK, Proceedings (2007), pp. 61–71.
[48] http://llvm.org/, 2018.
[49] http://pax.grsecurity.net/, 2018.
[50] TIAN, D., ZENG, Q., WU, D., LIU, P., AND HU, C. Kruiser: Semi-
synchronized non-blocking concurrent kernel heap buffer overﬂow mon-
In 19th Annual Network and Distributed System Security
itoring.
Symposium, NDSS 2012, San Diego, California, USA, February 5-8,
2012 (2012).
[51] TICE, C., ROEDER, T., COLLINGBOURNE, P., CHECKOWAY, S., ER-
LINGSSON, Ú., LOZANO, L., AND PIKE, G.
Enforcing Forward-
In 23rd USENIX
Edge Control-Flow Integrity in GCC & LLVM.
Security Symposium (USENIX Security 14) (San Diego, CA, Aug. 2014),
USENIX Association, pp. 941–955.
[52] WAHBE, R., LUCCO, S., ANDERSON, T. E., AND GRAHAM, S. L.
In ACM SIGOPS Operating
Efﬁcient software-based fault isolation.
Systems Review (1994), vol. 27, pp. 203–216.
[53] WANG, H. J., GUO, C., SIMON, D. R., AND ZUGENMAIER, A. Shield:
Vulnerability-driven network ﬁlters for preventing known vulnerability
exploits. In Proceedings of the 2004 Conference on Applications, Tech-
nologies, Architectures, and Protocols for Computer Communications
(New York, NY, USA, 2004), SIGCOMM ’04, ACM, pp. 193–204.
[54] WEIMER, W., FRY, Z. P., AND FORREST, S. Leveraging program
equivalence for adaptive program repair: Models and ﬁrst results.
In
Proceedings of the 28th IEEE/ACM International Conference on Au-
tomated Software Engineering (Piscataway, NJ, USA, 2013), ASE’13,
IEEE Press, pp. 356–366.
[55] WEIMER, W., NGUYEN, T., LE GOUES, C., AND FORREST, S. Auto-
matically Finding Patches Using Genetic Programming. In Proceedings
of the 31st International Conference on Software Engineering (Washing-
ton, DC, USA, 2009), ICSE ’09, IEEE Computer Society, pp. 364–374.
[56] http://sourceware.org/bugzilla/, 2018. Accessed: May, 2018.
[57] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R., ORMANDY,
T., OKASAKA, S., NARULA, N., AND FULLAGAR, N. Native client: A
sandbox for portable, untrusted x86 native code. In Security and Privacy,
2009 30th IEEE Symposium on (2009), pp. 79–93.
[58] ZHANG, M., AND SEKAR, R. Control Flow Integrity for COTS Binaries.
In Presented as part of the 22nd USENIX Security Symposium (USENIX
Security 13) (Washington, D.C., 2013), USENIX, pp. 337–352.
APPENDIX
We measure how often expression translation is able to
converge the memory access range and buffer allocation size
into a single function scope, and ﬁnd that it is able to do so
in 85% of the cases.
We use 11 programs from the GNU Coreutils as listed
in Table IV to evaluate the applicability of our analysis
techniques. The most common reasons for Senx’s access range
analysis to be aborted is that loops cannot be normalized by
LLVM. For example, the number of times a loop that parses
string input iterates depends on the content of the string. Such
a string cannot be symbolically analyzed by access range
analysis.
To understand the reasons that can cause expression trans-
lation to abort, we try to converge the buffer size and memory
access range for the loops that we could successfully analyze
and tabulate the results in Table V. The “Access Range”
column tabulates the average percentage of functions in the
loop’s call stack that expression translation could translate
the memory access range into and “Buffer Range” tabulates
the average percentage of functions in the buffer allocation’s
call stack that expression translation could translate the buffer
allocation size into. Finally “Converged” indicates out of all
loops, what percentage could expression translation ﬁnd a
553
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:21 UTC from IEEE Xplore.  Restrictions apply. 
Type
Program
sha512sum data checksum
text formatting
pr
text manipulation
head
directory listing
dir
ﬁle dumping
od
ls
directory listing
data encoding
base64
text processing
wc
ﬁle concatenating
cat
data sorting
sort
format and print data
printf
AVG
N/A
SLOC
581
1,723
761
3,388
1,368
3,388
238
784
495
3,251
694
1,516
LLVM bitcode
135KB
194KB
109KB
418KB
237KB
418KB
91KB
120KB
182KB
433KB
198KB
230KB
TABLE IV: Programs for evaluating applicability.
Program
pr
head
tr
od
cat
dir
ls
base64
md5sum
sha512sum
sort
AVG.
Access Range
100%
100%
86%
54%
100%
71%
42%
100%
100%
97%
91%
85%
Buffer Range
10%
25%
36%
16%
33%
14%
33%
33%
33%
80%
10%
29%
Converged
100%
100%
100%
58%
100%
57%
34%
100%
100%
97%
90%
85%
TABLE V: Convergence of expression translation.
common function scope in which to place the patch. As we
can see, it seems that the buffer allocation size frequently takes
parameters that are calculated fairly close in the call stack to
the allocation point, and those values are not available higher
up in the call chain, thus limiting the functions scopes many
of these cases could be converged to.
554
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:21 UTC from IEEE Xplore.  Restrictions apply.