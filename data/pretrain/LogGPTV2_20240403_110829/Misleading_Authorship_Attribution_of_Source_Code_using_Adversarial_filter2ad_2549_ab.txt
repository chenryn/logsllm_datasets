sary has access to two ﬁles of source code from the target
developer. Both ﬁles are not part of the training- or test set
and act as external source for extracting template information,
such as recurring custom variable names.
In addition, we test a scenario where the targeted attack solely
rests on a separate training set, without access to the output of
the original classiﬁer. This might be the case, for instance, if
the attribution method is secretly deployed, but code samples
are available from public code repositories. In this scenario,
the adversary can learn a substitute model with the aim that
her adversarial example—calculated on the substitute—also
transfers to the original classiﬁer.
3.2 Attack Constraints
Misleading the attribution of an author can be achieved with
different levels of sophistication. For example, an adversary
may simply copy code snippets from one developer for imper-
sonation or heavily obfuscate source code for dodging. These
trivial attacks, however, generate implausible code and are
easy to detect. As a consequence, we deﬁne a set of con-
straints for our attack that should make it hard to identify
manipulated source code.
Preserved semantics. We require that source code gener-
ated by our attack is semantically equivalent to the original
code. That is, the two codes produce identical outputs given
the same input. As it is undecidable whether two programs
are semantically equivalent, we take care of this constraint
during the design of our code transformations and ensure that
each transformation is as semantics-preserving as possible.
Plausible code. We require that all transformations change
the source code, such that the result is syntactically correct,
readable and plausible. The latter constraint corresponds to
the aspect of imperceptibility when adversarial examples are
generated in the image domain [11]. In our context, plau-
sibility is important whenever the adversary wants to hide
the modiﬁcation of a source ﬁle, for instance, when blaming
another developer. For this reason, we do not include junk
code or unusual syntax that normal developers would not use.
No layout changes. Layout features such as the tendency to
start lines with spaces or tabs are trivial to change with tools
for code formatting (see Section 6.4). Therefore, we restrict
our attack to the forgery of lexical and syntactic features of
source code. In this way, we examine our approach under
a more difﬁcult scenario for the attacker where no layout
features are exploitable to mislead the attribution.
3.3 Problem-Feature Space Dilemma
The described threat model and attack constraints pose unique
challenges to the design of our attack. Our attack jointly op-
erates in two domains: On the one hand, we aim at attacking
a classiﬁer in the feature space F. On the other hand, we
require the source code to be semantically equivalent and
plausible in the problem space X . For most feature maps φ, a
one-to-one correspondence, however, does not exist between
the two spaces and thus we encounter a dilemma.
Problem space (cid:32) feature space. Each change in the source
code x may impact a set of features in φ (x). The exact amount
of change is generally not controllable. The correlation of
features and post-processing steps in φ, such as a TF-IDF
weighting, may alter several features, even if only a single
statement is changed in the source code. This renders target-
oriented modiﬁcation of the source code difﬁcult.
For example, if the declaration of the variable b in line 2 of
Figure 2 is moved to line 5, a series of lexical and syntactic
features change, such as the frequency of the lexem b or the
subtree under the node assign in Figure 3.
482    28th USENIX Security Symposium
USENIX Association
4 Code Transformations
The automatic modiﬁcation of code is a well-studied problem
in compiler engineering and source-to-source compilation [2].
Consequently, we build our code transformations on top of
the compiler frontend Clang [28], which provides all neces-
sary primitives for parsing, transforming and synthesizing
C/C++ source code. Note that we do not use code obfusca-
tion methods, since their changes are (a) clearly visible, and
(b) cannot mislead a classiﬁer to a targeted author. Before
presenting ﬁve families of transformations, we formally de-
ﬁne the task of code transformation and introduce additional
program representations.
Deﬁnition 1. A code transformation T : X −→ X , x (cid:55)→ x(cid:48)
takes a source code x and generates a transformed version x(cid:48),
such that x and x(cid:48) are semantically equivalent.
While code transformations can serve various purposes
in general [2], we focus on targeted transformations that
modify only minimal aspects of source code. If multiple
source locations are applicable for a transformation, we use a
pseudo-random seed to select one location. To chain together
targeted transformations, we deﬁne transformation sequences
as follows:
Deﬁnition 2. A transformation sequence T = T1◦T2◦···◦Tn
is the subsequent application of multiple code transformations
to a source code x.
To efﬁciently perform transformations, we make use of
different program representations, where the AST is the most
important one. To ease the realization of involved transforma-
tions, however, we employ two additional program represen-
tations that augment our view on the source code.
Control-ﬂow graph with use-deﬁne chains. The control
ﬂow of a program is typically represented by a control-ﬂow
graph (CFG) where nodes represent statements and edges the
ﬂow of control. Using the CFG, it is convenient to analyze
the execution order of statements. We further extend the CFG
provided by Clang with use-deﬁne chains (UDCs). These
chains unveil dependencies between usages and the deﬁni-
tions of a variable. With the aid of UDCs, we can trace the
ﬂow of data through the program and identify data dependen-
cies between local variables and function arguments. Figure 5
shows a CFG with use-deﬁne chains.
Declaration-reference mapping. We additionally intro-
duce a declaration-reference mapping (DRM) that extends
the AST and links each declaration to all usages of the de-
clared variable. As an example, Figure 6 shows a part of the
AST together with the respective DRM for the code sample
from Figure 2. This code representation enables navigation
between declarations and variables, which allows us to efﬁ-
ciently rename variables or check for the sound transforma-
tion of data types. Note the difference between use-deﬁne
Figure 4: Schematic depiction of our approach. The attack is realized by
moving in the problem space using code transformations while being guided
by Monte-Carlo tree search in the feature space.
Feature space (cid:32) problem space. Any change to a feature
vector φ (x) must ensure that there exists a plausible source
code x in the problem space. Unfortunately, determining x
from φ (x) is not tractable for non-bijective feature maps, and
it is impossible to directly apply techniques from adversarial
learning that operate in the feature space.
For example, if we calculate the difference of two vectors
φ (z) = φ (x)− φ (x(cid:48)), we have no means for determining the
resulting source code z. Even worse, it might be impossible to
construct z, as the features in φ (z) can violate the underlying
programming language speciﬁcation, for example, due to
feature combinations inducing impossible AST edges.
This dilemma has received little attention in the literature
on adversarial learning so far, and it is often assumed that
an adversary can change features almost arbitrarily [e.g. 6,
11, 18]. Consequently, our attack does not only pinpoint
weaknesses in authorship attribution but also illustrates how
adversarial learning can be conducted when the problem and
feature space are disconnected.
3.4 Our Attack Strategy
To tackle this challenge, we adopt a mixed attack strategy
that combines concepts from compiler engineering and ad-
versarial learning. For the problem space, we develop code
transformations (source-to-source compilations) that enable
us to maneuver in the problem space and alter stylistic pat-
terns without changing the semantics. For the feature space,
we devise a variant of Monte-Carlo tree search that guides the
transformations towards a target. This variant considers the
attack as a game against the attribution method and aims at
reaching a desired output with few transformations.
An overview of our attack strategy is illustrated in Figure 4.
As the building blocks of our approach originate from dif-
ferent areas of computer science, we discuss their technical
details in separate sections. First, we introduce the concept
of semantics-preserving code transformations and present
ﬁve families of source-to-source transformations (Section 4).
Then, we introduce Monte-Carlo tree search as a generic
black-box attack for chaining transformations together such
that a target in the feature space is reached (Section 5).
USENIX Association
28th USENIX Security Symposium    483
Feature space(Vectors)Problem space(Source code)xx0 (x) (x0)Code transformationsT(x)f(T(x))=y⇤Figure 5: Control-ﬂow graph with use-deﬁne chains for the code snippet
from Figure 2. The control ﬂow is shown in red (solid), use-deﬁne chains in
blue (dashed).
Figure 6: Abstract syntax tree with declaration-reference mapping for the
code snippet from Figure 2. Declaration references are shown in green
(dashed).
Table 1: Implemented families of transformations.
Transformation family
Control transformations
Declaration transformations
API transformations
Template transformations
Miscellaneous transformations
# AST
•
•
•
•
•
5
14
9
4
4
CFG UDC
•
•
•
DRM
•
•
•
chains and declaration-reference mappings. The former con-
nects variable usages to variable deﬁnitions, while the latter
links variable usages to variable declarations.
Based on these program representations, we develop a set
of generic code transformations that are suitable for chang-
ing different stylistic patterns. In particular, we implement
36 transformers that are organized into ﬁve families. Table 1
provides an overview of each family together with the pro-
gram representation used by the contained transformers.
In the following, we brieﬂy introduce each of the ﬁve fami-
lies. For a detailed listing of all 36 transformations, we refer
the reader to Table 8 in Appendix C.
Control transformations.
The ﬁrst family of source-to-
source transformations rewrites control-ﬂow statements or
modiﬁes the control ﬂow between functions. In total, the fam-
ily contains 5 transformations. For example, the control-ﬂow
statements while and for can be mutually interchanged by two
transformers. These transformations address a developer’s
preference to use a particular iteration type. As another exam-
ple, Figure 7 shows the automatic creation of a function. The
transformer moves the inner block of the for-statement to a
newly created function. This transformation involves passing
variables as function arguments, updating their values and
changing the control ﬂow of the caller and callee.
Declaration transformations.
This family consists of
14 transformers that modify, add or remove declarations in
source code. For example, in a widening conversion, the
type of a variable is changed to a larger type, for example,
int to long. This rewriting mimics a programmer’s prefer-
ence for particular data types. Declaration transformations
make it necessary to update all usages of variables which
for ( int j = i ; j > s ;
for ( int i = 0; i > s ;
for ( int i = 0; i < strlen ( s ) ; i ++) {

if ( s [ i ] == ’+ ’)

Figure 8: Example of a declaration transformation.  replaces the declaration
of the C++ string object with a char array,  adapts all uses of the object.
484    28th USENIX Security Symposium
USENIX Association
return 1int bb = foo(a - 1)return a * bif (a < 2)foo(int a)baint bb = foo(a - 1)return a * bif (a < 2)truefalseaafoo(int a)return 1func fooarg intabodydecl intbifoper <a2returnassignreturnacall foofunc fooarg intabodydecl intbifoper <a2…assign……bcout << fixed << s e t p r e c i s i o n (10) ;
[...]
for ( long long t = 0;
t < ( long long ) ( T ) ; t ++) {
[...]
cout << " Case # " << t + 1 << " : "
<< d / l << ’\ n ’;
}
for ( long long t = 0;
t < ( long long ) ( T ) ; t ++) {
[...]
printf ( " Case #% lld : %.10 f \ n " ,
t + 1 , d / l ) ;
}


Figure 9: Example of an API transformation.  determines the current
precision for output;  replaces the C++ API with a C-style printf. The
format speciﬁer respects the precision and the data type of the variable.
to solve the same problem. Programmers are known to favor
different APIs and thus tampering with API usage is an ef-
fective strategy for changing stylistic patterns. For instance,
we can choose between various ways to output information
in C++, such as printf, cout, or ofstream.
As an example, Figure 9 depicts the replacement of the ob-
ject cout by a call to printf. To this end, the transformer ﬁrst
checks for the decimal precision of ﬂoating-point values that
cout employs, that is, we use the CFG to ﬁnd the last executed
fixed and setprecision statement. Next, the transformer uses
the AST to resolve the ﬁnal data type of each cout entry and
creates a respective format string for printf.
Template transformations.
The fourth family contains
4 transformations that insert or change code patterns based on
a give template. For example, authors tend to reuse speciﬁc
variable names, constants, and type deﬁnitions. If a template
ﬁle is given for a target developer, these information are
extracted and used for transformations. Otherwise, default
values that represent general style patterns are employed.
For instance, variable names can be iteratively renamed into
default names like i, j, or k until a developer’s tendency to
declare control statement variables is lost (dodging attack) or
gets matched (impersonation attack).
Miscellaneous transformations.
The last family covers
4 transformations that conduct generic changes of code state-
ments. For example, the use of curly braces around compound
statements is a naive but effective stylistic pattern for identify-
ing programmers. The compound statement transformer thus
checks if the body of a control statement can be enclosed by
curly braces or the other way round. In this way, we can add
or remove a compound statement in the AST.
Another rather simple stylistic pattern is the use of return
statements, where some programmers omit these statements
in the main function and others differ in whether they return
a constant, integer or variable. Consequently, we design a
transformer that manipulates return statements.
5 Monte-Carlo Tree Search