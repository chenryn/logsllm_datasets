N
N
N
N
N
N
N
Volatility
(scan)
H
H
H
H
H
H
H
H
H
H
H
H
H
H
N
N
N
N
N
N
N
N
Proc
Exp
H
H
-
-
H
H
H
-
H
H
H
H
H
H
H
-
H
H
H
-
H
H
Sig
Graph
N
N
N
N
N
N
N
N
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Robust
Sign
H
H
H
H
H
H
H
H
-
-
-
-
-
-
-
-
-
-
-
-
-
-
VMI
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
Volatility memory forensic tools (including both traversal and
scan versions), Sig-Graph [4]1 and Robust-Signature [3]. To
further complete the list of security tools, we also included
an in-house VMI tool that we implemented for inspecting
guest execution from QEMU. This VMI tool retrieves semantic
information from a guest operating system by ﬁrst locating
the global data structures in the guest memory and traversing
them. Speciﬁcally, it can retrieve process, thread and module
information from the guest operating system. We kept TDSS
running for over 3 hours before recording the outputs of
various security tools, to ensure that neither the system nor
the program crashed because of the SVM rootkit.
Table VIII lists the impact of the SVM rootkit on the
selected security tools. It presents what primary semantic ﬁelds
are manipulated and the mutation impacts on the security tools.
We can see that there are mainly two kinds of symptoms:
either the OS entities become hidden (H), or the misleading
new values are fetched and displayed (N). Volatility traversal
tools (i.e., pslist, threads, modules) are misled to show
meaningless values. For scan tools, whereas the process and
thread information is hidden from psscan and thrdscan,
modscan can still identify the module information, which
unfortunately has been manipulated and thus has become
meaningless. The reason why process and thread objects are
hidden is because their pool tags have been manipulated and
psscan and thrdscan rely on these pool tags to identify
these objects. The two robust signature schemes are also misled
or evaded. The graph signature [4] for EPROCESS is reliable
enough to ﬁnd malware’s process, but the obtained process
information is all invalid. The value-invariant signature [3] is
even worse. It failed to identify the malware process because
the ExitTime of the malware process has been manipulated
and the signature checks this value to remove noisy and dead
process objects. The result of our VMI tool
is similar to
that of the Volatility traversal tools. Although the information
about the malware execution can be extracted, it is incorrect.
1We implemented SigGraph as a plugin to Volatility and created a signature
for EPROCESS
Consequently, we cannot
from this VMI tool
execution.
leverage the knowledge obtained
to perform analysis on the malware
V. DISCUSSION
SVM attack space is vast. Our experiments show that several
OS semantic ﬁelds can be mutated without hurting the system
stability. Once the kernel has been inﬁltrated, an attacker
can arbitrarily manipulate any semantic value in general to
accomplish her malicious goals. In our experiments, we have
limited our changes to single value mutations and duplicate
set mutations, but an attacker is not restricted to making these
changes.
In general, we did not attempt to test multiple mutations,
since it leads to a very large number of combinations, which
are infeasible to test. However, our current
testing infras-
tructure does support multi-mutation based tests and can be
extended in future. The key focus of our tests are to highlight
the seriousness of single value and duplicate set mutations,
which we believe is a large attack space in itself.
Memory forensics may fail. Memory forensic involves obtain-
ing digital evidence from the live system. Our study shows that
the digital evidence (particularly the OS semantics) obtained
from a memory snapshot cannot be assumed correct, given the
possibility of SVM attacks. Recent effort in robust signature
schemes [3], [4] can help detect hidden kernel objects, but
the extracted semantic information can still be completely
misleading.
We need more trustworthy VMI techniques. The current
VMI techniques [20]–[23] more or less rely on memory
analysis, and can therefore be incorrect. Triggered by certain
events (e.g., system calls) or demanded by the administrator,
the current VMI techniques traverse important kernel data
structures of the guest system, and then extract the operating
system semantics. Virtuoso [22], VMST [23], and Exterior [24]
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
have greatly narrowed the semantic gap and improved the
usability of VMI, but these new approaches do not change the
fact that they directly read from the virtual machine memory,
disregard of other runtime events. Once the guest kernel is
compromised by DKOM attacks, the current VMI techniques
will fail, just like the memory forensics.
VI. RELATED WORK
Fuzz Testing. Plenty of
research (such as SAGE [18],
KLEE [25], and S2E [26]) has gone into performing fuzz
testing to explore program execution space and discover bugs
and security vulnerabilities. The purpose of our fuzz testing
is different. Our fuzz testing targets the OS semantic ﬁelds.
By mutating the values in these semantic ﬁelds as wells their
duplicates, we aim to evaluate the mutability of OS semantic
ﬁelds. Dolan-Gavitt et al. proposed a fuzz testing technique to
detect value invariants in the kernel data structures, and use
these invariants to construct more robust signatures for kernel
objects [3]. Although our fuzz testing is also targeting at the
kernel data structures, it is different in several ways: 1) our
focus is OS semantic ﬁelds, so our system can automatically
identify not only the semantic ﬁelds but also their duplicates
and then perform fuzzing on these ﬁelds; and 2) our test cases
and mutation rules are also designed differently as our goal is
not to crash the system but to explore the potential attacks.
Dynamic Dataﬂow Analysis. In this paper, we devise a new
dynamic dataﬂow analysis algorithm to track duplicate values.
At some level, this algorithm is related to the abstract variable
binding technique for automatically reverse engineering mal-
ware emulators [27], in which two kinds of dataﬂow algorithms
(i.e., forward binding and backward binding) are proposed.
This algorithm also shares some similarity with dynamic
type inference [28] and data structure reverse engineering [29],
[30]. In these systems, the identiﬁed type for one variable is
propagated to the other variables, whereas in MOSS we need
to update the membership information to all the variables in
the duplicate value set.
Virtual Machine Introspection. Introspecting a virtual ma-
chine often requires interpreting the low level bits and bytes
of guest OS kernel to high level semantic state. This is a non-
trivial task, because of the semantic-gap [31]. Early approaches
(e.g., [8], [21], [32], [33]) have been using manual efforts to
locate the kernel objects by traversing from the exported kernel
symbols or searching for invariant numbers. Recent advances
show that we can largely automate this process [22]–[24]. Our
work sheds some light on the VMI techniques. We show that
most of the semantic knowledge extracted by VMI cannot be
trusted, and we call for more trustworthy VMI techniques.
VII. LIMITATIONS AND FUTURE WORK
In this paper, we attempt to identify the semantic ﬁelds
susceptible to mutation by an attacker. Though we identify
several ﬁelds that are mutable both in Windows and Linux
OSes, the list of such mutable semantics is not close to being
complete. A thorough and complete analysis of all the semantic
ﬁelds and their mutability is needed. Moreover, while most
semantic ﬁelds have a direct correlation with the kernel data
it
is not always the case. It
structures,
is possible that a
semantic ﬁeld is derived as a result of one or more operations
on multiple data structures. We intend to address such cases in
future work. Furthermore, we have considered freely and easily
available security tools in our experiments to detect the impacts
of DKOM. However, a more complete result will include the
impact on anti-virus software. We intend to include some AV
software in our future experiments.
Trustworthy VMI needs to be dynamic in nature and
be more involved with the guest kernel execution. Instead
of querying semantic values that are statically available in
memory, a more trustworthy VMI should capture the moment
when semantic values are created, modiﬁed, and deleted, and
make sure these operations on these semantic values are not
from attackers. We aim to explore this direction as our future
work.
Certain attacks on kernel code modify the interpretation of
different kernel data structures. Such modiﬁcations will alter
the mapping between the semantic meaning and the kernel data
structures. MOSS does not address such attacks.
VIII. CONCLUSION
In this paper, we conducted a systematic assessment on
Semantic Value Manipulation attacks in two widely-used oper-
ating systems, Windows XP and Ubuntu Linux. In a prototype
system MOSS, we implemented a new fuzz testing technique
- duplicate-value directed semantic ﬁeld fuzzing to explore
space of SVM attacks. We evaluated 45 semantic ﬁelds for
Windows and 41 ﬁelds for Ubuntu Linux and conducted a
total of 258 tests. Our results demonstrate that most of the
security sensitive semantic ﬁelds can be freely mutated for
both operating systems. Furthermore we found that consistency
checking for duplicate values only help in some cases but not
all. We also implemented a proof-of-concept SVM rootkit,
which manipulated all mutable semantic values regarding a
realworld bot sample TDSS. The selected security tools have
been misled or worse - completely bypassed.
Our study implies that memory forensics and the current
VMI techniques will completely fail if attackers fully exploit
the power of SVM attacks. We call for revisiting of the
existing security solutions and motivate serious research study
for effective SVM attack mitigation.
ACKNOWLEDGEMENT
We would like to thank anonymous reviewers for their
comments. This research was supported in part by NSF grant
#1018217, NSF grant #1054605, McAfee Inc, and VMware
Inc. Any opinion, ﬁndings, conclusions, or recommendations
are those of the authors and not necessarily of the funding
agencies.
REFERENCES
“FU Rootkit,” http://www.rootkit.com/project.php?id=12, 2005.
[1]
[2] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and X. Jiang,
“Mapping kernel objects to enable systematic integrity checking,” in
Proceedings of ACM CCS, 2009.
[3] B. Dolan-Gavitt, A. Srivastava, P. Traynor, and J. Gifﬁn, “Robust
signatures for kernel data structures,” in Proceedings of ACM CCS
conference, 2009.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
generation of high-coverage tests for complex systems programs,” in
Proceedings of OSDI 2008, 2008.
[26] V. Chipounov, V. Kuznetsov, and G. Candea, “S2E: a platform for
in-vivo multi-path analysis of software systems,” in Proceedings of
the sixteenth international conference on Architectural support
for
programming languages and operating systems, ser. ASPLOS ’11. New
York, NY, USA: ACM, 2011, pp. 265–278.
[27] M. Sharif, A. Lanzi, J. Gifﬁn, and W. Lee, “Automatic reverse engineer-
ing of malware emulators,” in Proceedings of the 30th IEEE Symposium
on Security and Privacy, 2009, pp. 94–109.
[28] M. Zhang, A. Prakash, X. Li, Z. Liang, and H. Yin, “Identifying and
analyzing pointer misuses for sophisticated memory-corruption exploit
diagnosis,” in In Proceedings of 19th Annual Network & Distributed
System Security Symposium, 2012.
[29] Z. Lin, X. Zhang, and D. Xu, “Automatic reverse engineering of data
structures from binary execution,” in Proceedings of the 17th Annual
Network and Distributed System Security Symposium (NDSS’10), Febru-
ary 2010.
[30] A. Slowinska, T. Stancescu, and H. Bos, “Howard: a dynamic excavator
for reverse engineering data structures,” in Proceedings of NDSS 2011,
San Diego, CA, 2011.
[31] P. M. Chen and B. D. Noble, “When virtual
is better than real,”
in Proceedings of the Eighth Workshop on Hot Topics in Operating
Systems, 2001.
[32] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh, “Copilot -
a coprocessor-based kernel runtime integrity monitor,” in Proceedings
of the 13th USENIX Security Symposium, 2004.
[33] F. Baiardi and D. Sgandurra, “Building trustworthy intrusion detection
through vm introspection,” in Proceedings of the Third International
Symposium on Information Assurance and Security.
IEEE Computer
Society, 2007, pp. 209–214.
[4] Z. Lin, J. Rhee, X. Zhang, D. Xu, and X. Jiang, “Siggraph: Brute
force scanning of kernel data structure instances using graph-based
signatures,” in Proceedings of NDSS, 2011.
[5] W. Cui, M. Peinado, Z. Xu, and E. Chan, “Tracking rootkit footprints
with a practical memory analysis system,” in Proceedings of USENIX
Security Symposium, Aug. 2012.
[6] S. Golovanov, “Analysis of tdss rootkit technologies,” Securelist, Tech.
Rep., Aug 2010. [Online]. Available: http://www.securelist.com/en/
analysis/204792131
[7] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: a tiny hypervisor
to provide lifetime kernel code integrity for commodity oses,” in
Proceedings of SOSP, 2007.
[8] R. Riley, X. Jiang, and D. Xu, “Guest-transparent prevention of kernel
rootkits with VMM-based memory shadowing,” in Proceedings of
the 11th international symposium on Recent Advances in Intrusion
Detection, 2008, pp. 1–20.
[9] M. C. Grace, Z. Wang, D. Srinivasan, J. Li, X. Jiang, Z. Liang,
and S. Liakh, “Transparent protection of commodity os kernels using
hardware virtualization,” in Conference on Security and Privacy in
Communication Networks (SecureComm), 2010.
J. Nick L. Petroni and M. Hicks, “Automated detection of persistent
kernel control-ﬂow attacks,” in Proceedings of ACM CCS, 2007.
[10]
[11] Z. Wang and X. Jiang, “Countering persistent kernel rootkits through
systematic hook discovery,” in Proceedings of the 14th International
Symposium on Recent Advances in Intrusion Detection (RAID’08),
September 2008.
[12] Z. Wang, X. Jiang, W. Cui, and P. Ning, “Countering kernel rootkits
with lightweight hook prevention,” in Proceedings of ACM CCS, 2009.
[13] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang,
Z. Liang, J. Newsome, P. Poosankam, and P. Saxena, “BitBlaze: A
new approach to computer security via binary analysis,” in Proceedings
of the 4th International Conference on Information Systems Security,
Hyderabad, India, Dec. 2008.
“TEMU: The BitBlaze dynamic analysis component,” http://bitblaze.cs.
berkeley.edu/temu.html.
“Volatility: Memory Forencis System,” https://www.volatilesystems.
com/default/volatility/.
J. Newsome and D. Song, “Dynamic taint analysis for automatic
detection, analysis, and signature generation of exploits on commodity
software,” in Proceedings of 12th Annual NDSS conference, 2005.
[14]
[15]
[16]
[17] H. Agrawal and J. R. Horgan, “Dynamic program slicing,” in Pro-
ceedings of ACM SIGPLAN’90 Conference on Programming Language
Design and Implementation, 1990.
[18] P. Godfroid, M. Y. Levin, and D. Molnar, “Automated whitebox fuzz
testing,” in Proceedings of the 15th Annual Network and Distributed
System Security Symposium (NDSS’08), February 2008.
sysinternals
Russinovich,
“Windows
[19] M.
http://technet.microsoft.com/en-us/sysinternals.
utilities,”
[20] T. Garﬁnkel and M. Rosenblum, “A virtual machine introspection based
architecture for intrusion detection,” in Proceedings of Network and
Distributed Systems Security Symposium (NDSS’03), February 2003.
[21] X. Jiang, X. Wang, and D. Xu, “Stealthy malware detection through
VMM-based ”out-of-the-box” semantic view reconstruction,” in Pro-
ceedings of the 14th ACM conference on Computer and Communica-
tions Security (CCS’07), October 2007.
[22] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Gifﬁn, and W. Lee, “Virtuoso:
Narrowing the semantic gap in virtual machine introspection,” in Pro-
ceedings of the IEEE Symposium on Security and Privacy (Oakland),
May 2011.
[23] Y. Fu and Z. Lin, “Space traveling across vm: Automatically bridging
the semantic-gap in virtual machine introspection via online kernel data
redirection,” in Proceedings of the 2012 IEEE Symposium on Security
and Privacy, San Francisco, CA, May 2012.
[24] ——, “Exterior: Using a dual-vm based external shell for guest-os
introspection, conﬁguration, and recovery,” in Proceedings of the 9th
Annual International Conference on Virtual Execution Environments,
Houston, TX, March 2013.
[25] C. Cadar, D. Dunbar, and D. Engler, “Klee: Unassisted and automatic
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply.