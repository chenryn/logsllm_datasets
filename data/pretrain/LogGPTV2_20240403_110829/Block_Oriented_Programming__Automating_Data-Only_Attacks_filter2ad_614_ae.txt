Finally, it is possible for registers or external symbolic variables
(e.g., data from stdin, sockets or file descriptors) to be part of the
constraints. BOPC executes a similar translation for the registers
and any external input, as these are inputs to the program that are
usually also controlled by the attacker.
6 EVALUATION
To evaluate BOPC, we leverage a set of 10 applications with known
memory corruption CVEs, listed in Table 4. These CVEs correspond
to arbitrary memory writes [6, 33, 34], fulfilling our AWP primitive
requirement. Table 4 contains the total number of all functional
blocks for each application. Although there are many functional
blocks, the difficulty of finding stitchable dispatcher blocks makes
a significant fraction of them unusable.
Basic block abstraction is a time consuming process – espe-
cially for applications with large CFGs – but these results may
be reused across iterations. Thus, as a performance optimization,
BOPC caches the resulting abstractions of the Binary Frontend
(Figure 5) to a file and loads them for each search, thus avoiding
the startup overhead listed in Table 4.
To demonstrate the effectiveness of our algorithm, we chose
a set of 13 representative SPL payloads 2 shown in Table 5. Our
goal is to “map and run” each of these payloads on top each of the
vulnerable applications. Table 6 shows the results of running each
payload. BOPC successfully finds a mapping of memory writes to
encode an SPL payload as a set of side effects executed on top of the
applications for 105 out of 130 cases, approximately 81%. In each
case, the memory writes are sufficient to reconstruct the payload
execution by strictly following the CFG without violating a strict
CFI policy or stack integrity.
Table 6 shows that applications with large CFGs result in higher
success rates, as they encapsulate a “richer” set of BOP gadgets.
Achieving truly infinite loops is hard in practice, as most of the
loops in our experiments involve some loop counter that is modified
in each iteration. This iterator serves as an index to dereference
an array. By falsifying the exit condition through modifying loop
2Results depend on the SPL payloads and the vulnerable applications. We chose the
SPL payloads to showcase all SPL features, other payloads or combination of payloads
are possible. We encourage the reader to play with the open-source prototype.
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
SPL payload
execve
ifelse
regset4
regref4
regset5
regref5
regmod memrd memwr
Program
ProFTPd
nginx
sudo
orzhttpd
wuftdp
nullhttpd
opensshd
wireshark
apache
smbclient
Table 6: Feasibility of executing various SPL payloads for each of the vulnerable applications. An ✓ means that the SPL payload
was successfully executed on the target binary while a ✗ indicates a failure, with the subscript denoting the type of failure
(✗1 = Not enough candidate blocks, ✗2 = No valid register/variable mappings, ✗3 = No valid paths between functional blocks
and ✗4 = Un-satisfiable constraints or solver timeout). Note that in the first two cases (✗1 and ✗2), we know that there is no
solution while, in the last two (✗3 and ✗4), a solution might exists, but BOPC cannot find it, either due to over-approximation
or timeouts. The numbers next to the ✓ in abloop, infloop, and loop columns indicate the maximum number of iterations. The
number next to the print column indicates the number of character successfully printed to the stdout.
abloop
infloop
✓ 128+ ✓ ∞
✓ 128+ ✓ ∞
✓ 128+
✓ 128+
✓ 128+ ✓ 128+
✓ ∞
✓ 30
✓ 512 ✓ 128+
✓ 128+
✓ 7
✓ ∞ ✓ 128+
✓ 1057 ✓ 128+
print
✓ 32
✗4
✓
✗4
✓
✗3
✗4
✓ 4
✗4
✓ 1
✗1
✓
✓
✗1
✗1
✓
✗4
✗1
✗4
✗1
✓ 99
✓ 8
✗4
✓ 256
✓
✓
✓
✓
✓
✗3
✗4
✓
✓
✓
✓
✓
✗4
✗4
✗4
✗4
✓
✓
✓
✓
loop
✓ 3
✓ 128
✗4
✗3
✗3
✗3
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✗4
✗4
variables (i.e., the loop becomes infinite), the program eventually
terminates with a segmentation fault, as it tries to access memory
outside of the current segment. Therefore, even though the loop
would run forever, an external factor (segmentation fault) causes
it to stop. BOPC aims to address this issue by simulating the same
loop multiple times. However, finding a truly infinite loop requires
BOPC to simulate it an infinite number of times, which is infeasible.
For some cases, we managed to verify that the accessed memory
inside the loop is bounded and therefore the solution truly is an
infinite loop. Otherwise, the loop is arbitrarily bounded with the
upper bound set by an external factor.
For some payloads, BOPC was unable to find an exploit trace.
This is is either due to imprecision of our algorithm, or because no
solution exists for the written SPL payload. We can alleviate the
first failure by increasing the upper bounds and the timeouts in our
configuration. Doing so, makes BOPC search more exhaustively at
the cost of search time.
The failure to find a solution exposes the limitations of the vul-
nerable application. This type of failure is due to the “structure” of
the application’s CFG, which prevents BOPC from finding a trace
for an SPL payload. Hence, a solution may not exist due to one the
following:
(1) There are not enough candidate blocks or functional blocks.
(2) There are no valid register / variable mappings.
(3) There are no valid paths between functional blocks.
(4) The constraints between blocks are unsatisfiable or symbolic
execution raised a timeout.
For instance, if an application (e.g., ProFTPd) never invokes
execve then there are no candidate blocks for execve SPL sate-
ments. Thus, we can infer from the execve column in Table 6 that
all applications with a ✗1 never invoke execve.
In Section 3 we mention that the determination of the entry point
is part of the vulnerability discovery process. Therefore, BOPC as-
sumes that the entry point is given. Without having access to actual
exploits (or crashes), the locations of entry points are ambiguous.
Hence, we have selected arbitrary locations as the entry points. This
allows BOPC to find payloads for the evaluation without having
access to concrete exploits. In practice, BOPC would leverage the
given entry points as starting points. We demonstrate several test
cases where the entry points are precisely at the start of functions,
deep in the Call Graph, to show the power of our approach. Or-
thogonally, we allow for vulnerabilities to exist in the middle of a
function. In such situations, BOPC would set our entry point to the
location after the return of the function.
The lack of the exact entry point complicates the verification
of our solutions. We leverage a debugger to “simulate” the AWP
and modify the memory on the fly, as we reach the given entry
point. We ensure as we step through our trace that we maintain the
properties of the SPL payload expressed. That is, blocks between
the statements are non-clobbering in terms of register allocation
and memory assignment.
7 CASE STUDY: NGINX
We utilize a version of the nginx web server with a known memory
corruption vulnerability [14] that has been exploited in the wild to
further study BOPC. When an HTTP header contains the “Transfer-
Encoding: chunked” attribute, nginx fails to properly bounds check
the received packet chunks, resulting in stack buffer overflow. This
buffer overflow [6] results in an arbitrary memory write, fulfilling
the AWP requirement. For our case study we select three of the
most interesting payloads: spawning a shell, an infinite loop, and
a conditional branch. Table 7 shows metrics collected during the
BOPC execution for these cases.
Payload
execve
infloop
ifelse
Time
0m:55s
4m:45s
1m:47s
|CB| Mappings
142,355
10,407
9,909
14
182
10,782
|δG|
1
1
4
|Hk |
1
1
2
Table 7: Performance metrics (run on Ubuntu 64-bit with an
i7 processor) for BOPC on nginx. Time = time to synthesize
exploit, |CB| = # candidate blocks, Mappings = # concrete regis-
ter and variable mappings, |δG| = # delta graphs created, |Hk |
= # of induced subgraphs tried.
7.1 Spawning a shell
Function ngx_execute_proc is invoked through a function pointer,
with the second argument (passed to rsi, according to x64 calling
convention), being a void pointer that is interpreted as a struct
to initialize all arguments of execve:
mov
mov
mov
mov
call
rbx, rsi
rdx, QWORD PTR [rsi+0x18]
rsi, QWORD PTR [rsi+0x10]
rdi, QWORD PTR [rbx]
0x402500 
BOPC leverages this function to successfully synthesize the