:::
::: section
::: titlepage
# []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#displaying-various-indicators-in-the-crash-utility_analyzing-a-core-dump}在 crash 工具中显示各种指示符 {.title}
:::
以下流程描述了如何使用崩溃实用程序并显示各种指标，如内核消息缓冲、后端、进程状态、虚拟内存信息和打开文件。
::: variablelist
[显示消息缓冲]{.term}
:   ::: itemizedlist
    -   要显示内核消息缓冲，在互动提示符下输入 `log`{.literal}
        命令，如下例所示：
    :::
    ``` screen
    crash> log
    ... several lines omitted ...
    EIP: 0060:[] EFLAGS: 00010096 CPU: 2
    EIP is at sysrq_handle_crash+0xf/0x20
    EAX: 00000063 EBX: 00000063 ECX: c09e1c8c EDX: 00000000
    ESI: c0a09ca0 EDI: 00000286 EBP: 00000000 ESP: ef4dbf24
     DS: 007b ES: 007b FS: 00d8 GS: 00e0 SS: 0068
    Process bash (pid: 5591, ti=ef4da000 task=f196d560 task.ti=ef4da000)
    Stack:
     c068146b c0960891 c0968653 00000003 00000000 00000002 efade5c0 c06814d0
     fffffffb c068150f b7776000 f2600c40 c0569ec4 ef4dbf9c 00000002 b7776000
     efade5c0 00000002 b7776000 c0569e60 c051de50 ef4dbf9c f196d560 ef4dbfb4
    Call Trace:
     [] ? __handle_sysrq+0xfb/0x160
     [] ? write_sysrq_trigger+0x0/0x50
     [] ? write_sysrq_trigger+0x3f/0x50
     [] ? proc_reg_write+0x64/0xa0
     [] ? proc_reg_write+0x0/0xa0
     [] ? vfs_write+0xa0/0x190
     [] ? sys_write+0x41/0x70
     [] ? syscall_call+0x7/0xb
    Code: a0 c0 01 0f b6 41 03 19 d2 f7 d2 83 e2 03 83 e0 cf c1 e2 04 09 d0 88 41 03 f3 c3 90 c7 05 c8 1b 9e c0 01 00 00 00 0f ae f8 89 f6  05 00 00 00 00 01 c3 89 f6 8d bc 27 00 00 00 00 8d 50 d0 83
    EIP: [] sysrq_handle_crash+0xf/0x20 SS:ESP 0068:ef4dbf24
    CR2: 0000000000000000
    ```
    键入 `help log`{.literal} 以了解有关命令用法的更多信息。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    内核消息缓冲区包含有关系统崩溃的最重要信息，因此始终先转储到
    `vmcore-dmesg.txt`{.literal} 文件。当尝试使完整的 `vmcore`{.literal}
    文件失败时（例如，目标位置上缺少空间），这很有用。默认情况下，`vmcore-dmesg.txt`{.literal}
    位于 `/var/crash/`{.literal} 目录中。
    :::
[显示后端]{.term}
:   ::: itemizedlist
    -   若要显示内核堆栈跟踪，可使用 `bt`{.literal} 命令。
    :::
    ``` screen
    crash> bt
    PID: 5591   TASK: f196d560  CPU: 2   COMMAND: "bash"
     #0 [ef4dbdcc] crash_kexec at c0494922
     #1 [ef4dbe20] oops_end at c080e402
     #2 [ef4dbe34] no_context at c043089d
     #3 [ef4dbe58] bad_area at c0430b26
     #4 [ef4dbe6c] do_page_fault at c080fb9b
     #5 [ef4dbee4] error_code (via page_fault) at c080d809
        EAX: 00000063  EBX: 00000063  ECX: c09e1c8c  EDX: 00000000  EBP: 00000000
        DS:  007b      ESI: c0a09ca0  ES:  007b      EDI: 00000286  GS:  00e0
        CS:  0060      EIP: c068124f  ERR: ffffffff  EFLAGS: 00010096
     #6 [ef4dbf18] sysrq_handle_crash at c068124f
     #7 [ef4dbf24] __handle_sysrq at c0681469
     #8 [ef4dbf48] write_sysrq_trigger at c068150a
     #9 [ef4dbf54] proc_reg_write at c0569ec2
    #10 [ef4dbf74] vfs_write at c051de4e
    #11 [ef4dbf94] sys_write at c051e8cc
    #12 [ef4dbfb0] system_call at c0409ad5
        EAX: ffffffda  EBX: 00000001  ECX: b7776000  EDX: 00000002
        DS:  007b      ESI: 00000002  ES:  007b      EDI: b7776000
        SS:  007b      ESP: bfcb2088  EBP: bfcb20b4  GS:  0033
        CS:  0073      EIP: 00edc416  ERR: 00000004  EFLAGS: 00000246
    ```
    键入 `bt `{.literal} 以显示特定进程的后端追踪或输入
    `help bt`{.literal} 以获得有关 `bt`{.literal} 用法的更多信息。
[显示进程状态]{.term}
:   ::: itemizedlist
    -   若要显示系统中进程的状态，可使用 `ps`{.literal} 命令。
    :::
    ``` screen
    crash> ps
       PID    PPID  CPU   TASK    ST  %MEM     VSZ    RSS  COMM
    >     0      0   0  c09dc560  RU   0.0       0      0  [swapper]
    >     0      0   1  f7072030  RU   0.0       0      0  [swapper]
          0      0   2  f70a3a90  RU   0.0       0      0  [swapper]
    >     0      0   3  f70ac560  RU   0.0       0      0  [swapper]
          1      0   1  f705ba90  IN   0.0    2828   1424  init
    ... several lines omitted ...
       5566      1   1  f2592560  IN   0.0   12876    784  auditd
       5567      1   2  ef427560  IN   0.0   12876    784  auditd
       5587   5132   0  f196d030  IN   0.0   11064   3184  sshd
    >  5591   5587   2  f196d560  RU   0.0    5084   1648  bash
    ```
    使用 `ps `{.literal} 显示单个进程的状态。使用 [*help
    ps*]{.emphasis} 了解有关 `ps`{.literal} 用法的更多信息。
[显示虚拟内存信息]{.term}
:   ::: itemizedlist
    -   要显示基本虚拟内存信息，请在交互式提示符下键入 `vm`{.literal}
        命令。
    :::
    ``` screen
    crash> vm
    PID: 5591   TASK: f196d560  CPU: 2   COMMAND: "bash"
       MM       PGD      RSS    TOTAL_VM
    f19b5900  ef9c6000  1648k    5084k
      VMA       START      END    FLAGS  FILE
    f1bb0310    242000    260000 8000875  /lib/ld-2.12.so
    f26af0b8    260000    261000 8100871  /lib/ld-2.12.so
    efbc275c    261000    262000 8100873  /lib/ld-2.12.so
    efbc2a18    268000    3ed000 8000075  /lib/libc-2.12.so
    efbc23d8    3ed000    3ee000 8000070  /lib/libc-2.12.so
    efbc2888    3ee000    3f0000 8100071  /lib/libc-2.12.so
    efbc2cd4    3f0000    3f1000 8100073  /lib/libc-2.12.so
    efbc243c    3f1000    3f4000 100073
    efbc28ec    3f6000    3f9000 8000075  /lib/libdl-2.12.so
    efbc2568    3f9000    3fa000 8100071  /lib/libdl-2.12.so
    efbc2f2c    3fa000    3fb000 8100073  /lib/libdl-2.12.so
    f26af888    7e6000    7fc000 8000075  /lib/libtinfo.so.5.7
    f26aff2c    7fc000    7ff000 8100073  /lib/libtinfo.so.5.7
    efbc211c    d83000    d8f000 8000075  /lib/libnss_files-2.12.so
    efbc2504    d8f000    d90000 8100071  /lib/libnss_files-2.12.so
    efbc2950    d90000    d91000 8100073  /lib/libnss_files-2.12.so
    f26afe00    edc000    edd000 4040075
    f1bb0a18   8047000   8118000 8001875  /bin/bash
    f1bb01e4   8118000   811d000 8101873  /bin/bash
    f1bb0c70   811d000   8122000 100073
    f26afae0   9fd9000   9ffa000 100073
    ... several lines omitted ...
    ```
    使用 `vm `{.literal} 显示单个特定进程的信息，或者使用
    `help vm`{.literal} 来了解有关 `vm`{.literal} 使用情况的更多信息。
[显示打开的文件]{.term}
:   ::: itemizedlist
    -   要显示有关打开文件的信息，请使用 `files`{.literal} 命令。
    :::
    ``` screen
    crash> files
    PID: 5591   TASK: f196d560  CPU: 2   COMMAND: "bash"
    ROOT: /    CWD: /root
     FD    FILE     DENTRY    INODE    TYPE  PATH
      0  f734f640  eedc2c6c  eecd6048  CHR   /pts/0
      1  efade5c0  eee14090  f00431d4  REG   /proc/sysrq-trigger
      2  f734f640  eedc2c6c  eecd6048  CHR   /pts/0
     10  f734f640  eedc2c6c  eecd6048  CHR   /pts/0
    255  f734f640  eedc2c6c  eecd6048  CHR   /pts/0
    ```
    使用 `files `{.literal} 仅显示一个选定进程打开的文件，或者使用
    `help files`{.literal} 了解有关 `files`{.literal} 使用的更多信息。
:::
:::
::: section
::: titlepage
# []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#using-kernel-oops-analyzer_analyzing-a-core-dump}使用 Kernel Oops Analyzer {.title}
:::
Kernel Oops Analyzer 工具通过将 oops
消息与知识库中已知问题进行比较，分析崩溃转储。
::: itemizedlist
**先决条件**
-   保护用于馈送内核 Oops 分析器的 oops 消息。
:::
::: orderedlist
**流程**
1.  访问内核 Oops 分析器工具.
2.  要诊断内核崩溃问题，请上传 `vmcore`{.literal} 中生成的内核oops
    日志。
    ::: itemizedlist
    -   或者，您也可以通过提供文本消息或 `vmcore-dmesg.txt`{.literal}
        作为输入来诊断内核崩溃问题。
        ::: informalfigure
        ::: mediaobject
        ![Kernel oops analyzer](images/2KernelOopsAnalyzer.png)
        :::
        :::
    :::
3.  点 `DETECT`{.literal}，基于 `makedumpfile`{.literal}
    中的信息与已知解决方案比较 oops 消息。
:::
::: itemizedlist
**其它资源**
-   [红帽客户门户网站
    Labs](https://access.redhat.com/labs/kerneloopsanalyzer/#instruction){.link}
-   [Kernel Oops
    Analyzer](https://access.redhat.com/labs/kerneloopsanalyzer/){.link}
-   [预期系统重启指南](https://access.redhat.com/articles/206873){.link}
:::
:::
::: section
::: titlepage
# []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#the-kdump-helper-tool_analyzing-a-core-dump}Kdump Helper 工具 {.title}
:::
Kdump Helper 工具有助于使用提供的信息设置 `kdump`{.literal}。kdump
帮助程序根据您的偏好生成配置脚本。在服务器中启动并运行该脚本可设置
`kdump`{.literal} 服务。
::: itemizedlist
**其它资源**
-   [kdump
    Helper](https://access.redhat.com/labs/kdumphelper/wizard){.link}
:::
:::
:::
[]{#using-early-kdump-to-capture-boot-time-crashes_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#using-early-kdump-to-capture-boot-time-crashes_managing-monitoring-and-updating-the-kernel.html#using-early-kdump-to-capture-boot-time-crashes_managing-monitoring-and-updating-the-kernel}第 16 章 使用早期 kdump 来捕获引导时间崩溃 {.title}
:::
作为系统管理员，您可以使用 `kdump`{.literal} 的 `early kdump`{.literal}
支持在引导过程的早期阶段捕获崩溃内核的 vmcore 文件。这部分论述了
`early kdump`{.literal} 是什么、如何配置它以及如何检查这个机制的状态。
::: section
::: titlepage
# []{#using-early-kdump-to-capture-boot-time-crashes_managing-monitoring-and-updating-the-kernel.html#what-is-early-kdump_using-early-kdump-to-capture-boot-time-crashes}什么是早期 kdump（early kdump） {.title}
:::
当 `kdump`{.literal}
服务尚未启动且无法帮助捕获和保存崩溃内核内存内容时，内核会在引导阶段崩溃。因此，故障排除的重要信息将丢失。
要解决这个问题，RHEL 8 引进了 `early kdump`{.literal} 功能作为
`kdump`{.literal} 服务的一部分。
:::
::: section
::: titlepage
# []{#using-early-kdump-to-capture-boot-time-crashes_managing-monitoring-and-updating-the-kernel.html#enabling-early-kdump_using-early-kdump-to-capture-boot-time-crashes}启用早期 kdump {.title}
:::
这部分论述了如何启用 `早期 kdump`{.literal}
功能来消除丢失早期引导内核崩溃信息的风险。
::: itemizedlist
**先决条件**
-   一个有效的 Red Hat Enterprise Linux 订阅。
-   包含用于您的系统 CPU 架构的 `kexec-tools`{.literal} 软件包的软件仓库
-   实现了 `kdump`{.literal} 配置和目标要求。
:::
::: orderedlist
**流程**
1.  验证 `kdump`{.literal} 服务是否已启用并活跃：
    ``` literallayout
    # systemctl is-enabled kdump.service && systemctl is-active kdump.service enabled active
    ```
    如果没有启用并运行
    `kdump`{.literal}，请设置所有必要的配置，并验证是否已启用
    `kdump`{.literal} 服务。
2.  使用 `早期 kdump`{.literal} 功能重建引导内核的 `initramfs`{.literal}
    镜像：
    ``` literallayout
    dracut -f --add earlykdump
    ```
3.  添加 `rd.earlykdump`{.literal} 内核命令行参数：
    ``` literallayout
    grubby --update-kernel=/boot/vmlinuz-$(uname -r) --args="rd.earlykdump"
    ```
4.  重启系统以反应更改
    ``` screen
    reboot
    ```
5.  另外，还可验证 `rd.earlykdump`{.literal} 是否已成功添加并启用