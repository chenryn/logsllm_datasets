Solidity 语言更新活跃、文档完备，具有良好的一致性和事务性，功能足够实现中型的商业应用。
当然，它在实时调试、第三库支持、运行速度等方面还比不上成熟的语言，如果开发者想要用 C++ 等语言编写智能合约，那就要对区块链上的计算范式进行深入了解，避免写出无法共识的智能合约来，一般是建议有深入的了解后再采用 Solidity 之外的其他语言编写合约。 
要掌握 Solidity 合约，当然是通读文档，并动手尝试。具体参考[该文档](https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/smart_contract.html)。
#### ABI 接口原理
在采用 EVM 作为虚拟机的区块链上，EVM 执行的是 Solidity 语言的合约。合约编译会生成后缀名为 ABI 的文件，其实里面就是该合约接口定义的 JSON 文本，可以用文本查看器查阅，了解你写的合约如何翻译成 ABI 里的接口，接口返回类型，参数列表，参数类型等，只要有合约的 ABI 文件，就可以调用区块链 SDK 的接口，解析这个合约相关的交易、返回值、回执等。
#### 区块数据结构
 区块   （    Block    ） 有区块头和区块体。区块体有交易列表，交易列表里的每个 交易   （    Transaction    ） （Tx）有发起方、目标地址、调用方法和参数，以及发送者签名。交易的结果会生成一个“ 回执   （    Receipt    ） ”，回执里包含被调用方法的返回值、运行过程生成的 EventLog 等……
了解这些，基本上就掌握了区块链数据的脉络，还可以继续深究数据结构里的梅克尔根以及对应的梅克尔树是如何生成的，有什么作用（如用于 SPV：Simplified PaymentVerification）。具体参考[该文档](https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/protocol_description.html)。
#### RPC 接口
这里把区块链节点暴露的功能接口统称为“RPC 接口”。查看链上数据，包括区块、交易、回执、系统信息、配置信息，向链上发起交易，以调用智能合约、修改系统配置等，或者通过 AMOP 协议发送消息、监听事件，都是通过 RPC 接口。 
几十个 RPC 接口建议一一走读，或善用搜索，以发现自己想要的接口。
接口通信采用的协议可能是 JSON RPC，或者是 FISCO BCOS 独创的通道协议，SDK 基本上已经对接口和协议进行了良好的包装，也可以在深入理解 ABI 和 RLP 等编码模式前提下自行开发接口客户端。具体参考[该文档](https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/api.html)。
#### 准入和权限模型
联盟链强调安全可控，节点准入是第一步，在链初始化后，其他节点或者 SDK 配置了相应的证书，才能接入到既有的联盟链上。
链上的角色用权限模型控制，包括管理员权限、发布合约的权限、创建表的权限、参数配置权限等，以避免角色之间操作混淆，某些角色既当运动员又当裁判员。
初学者需要仔细阅读区块链平台提供的技术文档了解原理，遵循操作手册的步骤进行操作。具体参考[该文档](https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/permission_control.html)。
#### 数据存储模型
区块链节点会采用文件数据库（LevelDB 或 RocksDB），或者关系型数据库如 MySQL 保存数据，所以，链上是真的有“数据库”的。 
写入数据库的数据包括区块、交易、回执、合约产生的状态数据等，是否写入“调用合约产生的历史数据”根据不同的平台而定， FISCO BCOS 默认只保存最新的状态值，可以选择性地将修改记录写入“回执”或“历史表”里进行追踪。
FISCO BCOS 还提供方案，将历史数据导出到链下数据库进行关联分析。具体参考[该文档](https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/storage/index.html)。
#### 共识机制原理
联盟链通常采用插件化共识机制实现，FISCO BCOS 提供 PBFT 和 RAFT 两种高效共识算法，而不会采用“挖矿”这些高耗能低效率的共识。 
共识机制是区块链的灵魂，对共识机制进行深入学习，才可以深入理解区块链通过多方协作、达成高度一致性、支持交易事务性、防篡改防作恶的功效。具体参考[该文档](https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/consensus/index.html)。
区块链的知识包罗万象，更深层次的知识还有分布式系统理论、博弈论、前沿密码学、经济学、社会学等，掌握以上的基础知识，再深入学习，举一反三，用场景去验证和探索创新式应用，方可发挥技术的潜力，感受分布式商业的魅力。 
### 三、做一个怎样的学习者
在这个过程中，希望学习者做到： 
#### 读文档的耐心
我们的开源项目文档足有 20 万字以上的篇幅，公众号里还有大量的技术解析和科普文章，这都是程序员们在编码之外，用尽自己仅有的语文储备，码出的海量文字，是一笔巨大的技术财富，涵盖了相关开源项目的方方面面。如果能通读，或者记住文档结构和标题，需要时快速打开，足以解惑且深入。
#### 搜资料的能力
文档、公众号都有搜索功能，当想起和开源社区有关的问题时，可以随手用关键字搜索，一般都能找到答案。如果有语言不详之处，可以向开源项目团队提出，或者根据自己的理解进行补充。通用的知识点，如操作系统、网络等，通过公网搜索引擎，一般都能找到答案。 
#### 排查环境和依赖问题的能力
开源软件牵涉的系统环境、第三方软件、软件的版本等常常有错综复杂的依赖关系，太高或太低的版本都可能会有一些问题，请注意阅读项目文档对软硬件环境和依赖的描述，保证自己的环境符合要求，并善用配置管理工具、软件安装工具获取和设置合适的版本。
#### 调试能力
如上所述，Solidity 语言的调试工具完善程度尚未达到完美，但可以善用合约的返回值、EventLog 等方式，通过 WeBASE、控制台等趁手的工具进行调试，并查阅 Solidity 文档，了解问题可能出在哪里。
区块链节点的日志开启 debug 级别后，也会打印详细的信息，可以查阅运行日志，获取运行信息和可能的错误信息，将这些信息与自己所做的操作比如发交易的流程结合起来进行分析，提高调试效率。 
同时，目前的开源软件通常会在屏幕上打印错误原因和解决问题的提示，仔细查看操作反馈，大概率能了解错误原因和解决方案。
#### 代码阅读能力
开源软件的最大效能是把代码毫无遗漏的摊到了开发者和学习者面前，了解代码结构，查阅代码里的关键流程，用关键字去搜索代码里的对应实现，都可以深入系统细节，挖掘设计思想，定位问题，寻找优化方法。一个好学且硬核的程序员，足可通过代码，和世界对话。 
#### 问问题的方式方法
“一个好问题，比答案还重要”。我们的社区非常活跃，大家都很热情地答复和解决问题。我们鼓励在社区里公开提出问题，一方面使大家都可以分享问题，找到解决方案，另一方面提问者也可以得到更多人的帮助。同时，希望提问者提出问题时，一次性描述详尽，把相关的操作步骤、系统环境、软件版本、出错提示以及希望得到的解决方案都提出来。 
如果是通用性的问题，可以先搜索再提问，有利于培养独立解决问题的能力。希望提问者能向社区反馈更深层次的问题，以帮助社区快速优化。对很多典型问题，社区也积累了一些行之有效的解决方案，我们会整理和公布出来，以便查阅。
从新人到老鸟的路也许漫漫，如果能参考这篇小文的一些方法，可以少踩许多坑，多写一些应用。Enjoy blockchain，社区与你共同进步。
### 资源链接
* 各项开源组件索引： 
* FISCO BCOS 开源文档： 
* 关键概念：
* 以及使用手册：