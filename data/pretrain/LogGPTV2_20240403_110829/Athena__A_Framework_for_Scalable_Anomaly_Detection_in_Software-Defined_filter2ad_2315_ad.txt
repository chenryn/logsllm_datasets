tion projects [26], [6], [9], [5], [39] have successfully leveraged
volume-based network features available through monitoring
the OpenFlow protocol to detect network anomalies, such as
DDoS attacks and switch anomalies. Mehdi et.al. [8] explored
the feasibility of adopting traditional anomaly detection tech-
niques with OpenFlow‘s monitoring capabilities, and Braga
200400600800100012001400Total testing time (s)Athena applicationSpark application123456Number of computing nodes 02002 4 6 8 101214Total number of flows (x10K)020406080100CPU usage (%)ONOS with AthenaONOS baselineTABLE X.
COMPARISON OF Athena WITH RELATED WORK FROM NETWORK ANOMALY DETECTION AND NETWORK MONITORING WITH DIVERSE
PERSPECTIVES. (V: VOLUME-BASED, S: STATEFUL, SP: SAMPLING, D: DPI, SS: SDN-SPECIFIC)
Purpose
Architecture
Network Anomaly detection
NB Interface
SB Interface
Feature
Management


Network Features
D
SP

SS


S




V







Custom Switch
Resource
Optimization
Data
Persistency
Query
















Athena
[37]
[8], [10]
[5], [9]
[6]
[16]
[26]
[39]
Framework for anomaly detection
Framework for security apps
General anomaly detection
Malicious switch detection
NFV optimization
General anomaly detection
LFA detection
Framework for anomaly detection
Distributed
Distributed
Single
Single
Single
Single
Single
Single
Ad-hoc API
Script
OpenFlow
OpenFlow
OpenFlow
OpenFlow
OpenFlow
OpenFlow, sFlow
OpenFlow, SNMP
OpenFlow
Purpose
Architecture
NB Interface
SB Interface
Network Monitoring
Athena
[40]
[17]
[18]
[4]
[3]
[2]
[7], [19]
[20]
[41]
[42]
Framework for anomaly detection
Framework for network monitoring
Distributed network analysis
Distributed network monitoring
Scalable ﬂow counter monitoring
Scalable ﬂow counter monitoring
Resource allocation for measurement
Efﬁcient ﬂow counter monitoring
Low latency ﬂow counter monitoring
Network monitoring with NFV
Framework for network monitoring
Distributed
Single
Distributed
Distributed
Distributed
Single
Single
Single
Single
Single
Single
Ad-hoc API
RESTful API
NetConf
Ad-hoc API
Ad-hoc API
Ad-hoc API
Netﬂow, SNMP, IPSLA
OpenFlow
OpenFlow
OpenFlow
OpenSketch
OpenFlow
-
OpenFlow
sFlow
OpenFlow
Policy Language
Policy Language
Various sources
-
-
-
-
-
-
-
-
-
et.al. [10] leveraged OpenFlow statistics to demonstrate low-
cost detection of DDoS ﬂooding attacks. FRESCO [37] ex-
ports a script-based development environment that facilitates
the creation of security applications that monitor well-known
network features (e.g., TCP session). However, these efforts
do not consider how to fully utilize network features derived
from an SDN environment to monitor it for behavioral and
operational stability.
From the perspective of detection strategies, most related
efforts [26], [6], [9], [5], [39], [8], [10] focus on ﬁxed detection
algorithms against speciﬁc attacks, not general purpose algo-
rithms. While FRESCO [37] and ATLANTIC [39] provide a
set of libraries that aim to facilitate attack detection (e.g., port
scanning), only the former provides well-structured mitigation
actions and it does not support multi-instance controller envi-
ronments.
Scalable SDN monitoring: Several prior projects have ex-
plored various ways to reduce the overhead of gathering
volume-based network features [20], [19], [7], [3], [2], [4],
[18]. In fact, there have been prior efforts to incorporate a
distributed architecture that allows operators to scalably gather
network features, such as [17], [2], [18]. However,
those
projects have not proposed detection strategies for tracking ma-
licious network behaviors. Furthermore, most of these project
have assumed the adoption of additional customized switches
to perform their scalable network monitoring [17], [18], [4],
[3], [2].
Bohatei [16] proposed a scalable DDoS detection and
mitigation solution, leveraging an optimization technique that
distributes jobs to NFV machines to increase data process-
ing throughput. Bohatei
leverages additional NFV devices
to perform network functions, and does not directly im-
plement the anomaly detection algorithms. There have also
been sampling-based SDN monitoring approaches to reduce
collection overhead when collecting statistics from OpenFlow
environments [9], [5]. These techniques rely on the adoption
of sFlow sampling. Spiffy [26] has demonstrated strategies for
Link Flooding Attacks mitigation [25], relying on the SDN’s
centralized management to insert ﬂow mitigation. A limitation
of Spiffy is that it requires a customized switch to measure the
network behavior. Finally, there are several additional projects
that have explored the feasibility of anomaly detection in
SDNs: [37], [10], [8], [6], [39]. Unlike Athena, none of these
projects address our scalability requirements.
Improving SDN usability: Several prior projects have intro-
duced northbound APIs that allow operators to conduct various
forms of network monitoring [42], [41], [2], [3], [4]. Pay-
less [40] provides a semantical monitoring capability that helps
operators monitor networks by calling well-structured RESTful
APIs that reﬂect a high-level set of monitoring requirements.
DNA [17] introduces a scalable network monitoring function
to examine telemetry data sources. Although these previous
projects enhance usability by exporting well-structured APIs
to operators, they do not provide a detection algorithm to ﬁnd
network anomalies.
IX. CONCLUSION
We explore several challenges in designing scalable
anomaly detection services in large-scale SDN environments.
We evaluate an initial prototype implementation of our so-
lution, Athena, over the open-source ONOS distributed SDN
controller. We discuss how Athena enables security researchers
and developers to make anomaly detection applications with
a minimum of programming effort through its API abstrac-
tion layer. We also discuss generalized use of off-the-shelf
strategies for driving network anomaly detection algorithm
development and introduce a new SDN-speciﬁc anomaly.
Athena employs a distributed database and a clustered
computing platform, which can deploy these detection al-
gorithms across a large-scale distributed control plane. The
Athena framework is designed to operate on existing SDN in-
frastructures, enabling operators to deploy it in a cost efﬁcient
11
manner. Our evaluations demonstrate that Athena can support
well-known network anomaly detection services in an efﬁcient
manner, by scaling to a large-scale dataset from a large-scale
datacenter-like physical network environment. Athena has been
publicly released as an open-source project to the academic and
SDN research community.
[17] A. Clemm, M. Chandramouli, and S. Krishnamurthy, “Dna: An sdn
framework for distributed network analytics,” in IFIP/IEEE Interna-
tional Symposium on Integrated Network Management (INM), 2015.
[18] Y. Yu, C. Qian, and X. Li, “Distributed and collaborative trafﬁc
monitoring in software deﬁned networks,” in Proceedings of ACM
HotSDN, 2014.
[19] L. Jose, M. Yu, and J. Rexford, “Online measurement of large trafﬁc
ACKNOWLEDGMENT
[20]
This work was supported by the ICT R&D program of
MSIP/IITP, Republic of Korea [No. B0190-16-2011, Korea-
US Collaborative Research on SDN/NFV Security/Network
Management and Testbed Build]. This material is based upon
work supported by the National Science Foundation under
Grant Numbers 1446426 and 1642150. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this material
are those of the author(s) and do not necessarily reﬂect the
views of the National Science Foundation.
REFERENCES
[1] S. Subashini and V. Kavitha, “A survey on security issues in service
delivery models of cloud computing,” Journal of network and computer
applications, vol. 34, no. 1, pp. 1–11, 2011.
[2] M. Moshref, M. Yu, R. Govindan, and A. Vahdat, “Scream: Sketch
resource allocation for software-deﬁned measurement,” in CoNEXT,
Heidelberg, Germany, 2015.
[3] ——, “Dream: dynamic resource allocation for software-deﬁned mea-
surement,” in Proceedings of ACM SIGCOMM 2014.
[4] M. Yu, L. Jose, and R. Miao, “Software deﬁned trafﬁc measurement
with opensketch,” in USENIX Symposium on Networked Systems Design
and Implementation (NSDI 2013).
[5] K. Giotis, C. Argyropoulos, G. Androulidakis, D. Kalogeras, and
V. Maglaris, “Combining openﬂow and sﬂow for an effective and
scalable anomaly detection and mitigation mechanism on sdn environ-
ments,” Computer Networks, vol. 62, pp. 122–136, 2014.
[6] A. Kamisi´nski and C. Fung, “Flowmon: Detecting malicious switches
in software-deﬁned networks,” in Proceedings of the ACM Workshop
on Automated Decision Making for Active Cyber Defense, 2015.
[7] C. Yu, C. Lumezanu, Y. Zhang, V. Singh, G. Jiang, and H. V.
Madhyastha, “Flowsense: Monitoring network utilization with zero
measurement cost,” in Passive and Active Measurement, 2013.
[8] S. A. Mehdi, J. Khalid, and S. A. Khayam, “Revisiting trafﬁc anomaly
detection using software deﬁned networking,” in Recent Advances in
Intrusion Detection, 2011.
[9] K. Giotis, G. Androulidakis, and V. Maglaris, “Leveraging sdn for
efﬁcient anomaly detection and mitigation on legacy networks,” in Third
European Workshop on Software Deﬁned Networks (EWSDN), 2014.
[10] R. Braga, E. Mota, and A. Passito, “Lightweight ddos ﬂooding attack
detection using nox/openﬂow,” in IEEE Local Computer Networks
(LCN), 2010.
[11] SDNSecurity, http://www.sdnsecurity.org/.
[12] M. H. Bhuyan, D. K. Bhattacharyya, and J. K. Kalita, “Network
anomaly detection: methods, systems and tools,” IEEE Communications
Surveys & Tutorials, vol. 16, no. 1, 2014.
[13] M. Vallentin, V. Paxson, and R. Sommer, “Vast: a uniﬁed platform for
interactive network forensics,” in USENIX Symposium on Networked
Systems Design and Implementation (NSDI 2016).
[14] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide,
B. Lantz, B. O’Connor, P. Radoslavov, W. Snow et al., “ONOS: towards
an open, distributed SDN OS,” in Proceedings of ACM HotSDN 2014.
[15] T. Koponen, M. Casado, N. Gude, J. Stribling, L. Poutievski, M. Zhu,
R. Ramanathan, Y. Iwata, H. Inoue, T. Hama et al., “Onix: A distributed
control platform for large-scale production networks.” in Proceedings
of OSDI, 2010.
[16] S. K. Fayaz, Y. Tobioka, V. Sekar, and M. Bailey, “Bohatei: ﬂexible and
elastic ddos defense,” in Proceedings of the 24th USENIX Conference
on Security Symposium. USENIX Association, 2015, pp. 817–832.
aggregates on commodity switches.” in Hot-ICE, 2011.
J. Suh, T. T. Kwon, C. Dixon, W. Felter, and J. Carter, “Opensample:
A low-latency, sampling-based measurement platform for commodity
sdn,” in International Conference on Distributed Computing Systems
(ICDCS), 2014.
“Python
http://www.noxrepo.org/pox/
network
controller,”
[21] POX,
about-pox/.
[22] N. Gude, T. Koponen, J. Pettit, B. Pfaff, M. Casado, N. McKeown,
and S. Shenker, “NOX: Towards an Operating System for Networks,”
in Proceedings of ACM SIGCOMM Computer Communication Review,
July 2008.
J. Medved, R. Varga, A. Tkacik, and K. Gray, “Opendaylight: Towards
a model-driven sdn controller architecture,” in 2014 IEEE 15th Inter-
national Symposium on WoWMoM, 2014.
[23]
[24] FloodLight, “Open sdn controller,” http://ﬂoodlight.openﬂowhub.org/.
[25] M. S. Kang, S. B. Lee, and V. D. Gligor, “The crossﬁre attack,” in
IEEE Symposium on Security and Privacy, 2013.
[26] M. S. Kang, V. D. Gligor, and V. Sekar, “Spiffy: Inducing cost-
detectability tradeoffs for persistent link-ﬂooding attacks,” 2016.
[27] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey, “Veriﬂow:
Verifying network-wide invariants in real time,” in USENIX Symposium
on Networked Systems Design and Implementation (NSDI 2013).
[28] P. Kazemian, G. Varghese, and N. McKeown, “Header space analysis:
Static checking for networks,” in USENIX Symposium on Networked
Systems Design and Implementation (NSDI 2012).
[29] M. Canini, D. Venzano, P. Perešíni, D. Kosti´c, and J. Rexford, “A
nice way to test openﬂow applications,” in USENIX Symposium on
Networked Systems Design and Implementation (NSDI 2012).
[30] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu, “A
security enforcement kernel for openﬂow networks,” in Proceedings of
ACM HotSDN 2012.
[31] MongoDB, https://www.mongodb.com.
[32] M. Zaharia, M. Chowdhury, M. J. Franklin, S. Shenker, and I. Stoica,
“Spark: Cluster computing with working sets.” HotCloud, 2010.
[33] X. Meng, J. Bradley, B. Yavuz, E. Sparks, S. Venkataraman, D. Liu,
J. Freeman, D. Tsai, M. Amde, S. Owen et al., “Mllib: Machine learning
in apache spark,” arXiv preprint arXiv:1505.06807, 2015.
[34]
Jfreechart, http://www.jfree.org/jfreechart/.
[35] Apache, “Hama,” https://hama.apache.org/.
[36] S. K. Fayazbakhsh, L. Chiang, V. Sekar, M. Yu, and J. C. Mogul, “En-
forcing network-wide policies in the presence of dynamic middlebox
actions using ﬂowtags,” in USENIX Symposium on Networked Systems
Design and Implementation (NSDI 2014).
[37] S. Shin, P. A. Porras, V. Yegneswaran, M. W. Fong, G. Gu, and
M. Tyson, “Fresco: Modular composable security services for software-
deﬁned networks.” in NDSS, 2013.
[38] OnLab, “Master-performance and scale-out,” https://wiki.onosproject.
org/display/ONOS/Master-Performance+and+Scale-out.
[39] A. S. da Silva, J. A. Wickboldt, L. Z. Granville, and A. Schaeffer-Filho,
“Atlantic: A framework for anomaly trafﬁc detection, classiﬁcation, and
mitigation in sdn,” in NOMS 2016-2016 IEEE/IFIP Network Operations
and Management Symposium.
[40] S. R. Chowdhury, M. F. Bari, R. Ahmed, and R. Boutaba, “Payless: A
low cost network monitoring framework for software deﬁned networks,”
in IEEE Network Operations and Management Symposium (NOMS)
2014.
J. R. Ballard, I. Rae, and A. Akella, “Extensible and scalable network
monitoring using opensafe.” in INM/WREN, 2008.
[41]
[42] H. Kim and N. Feamster, “Improving network management with soft-
ware deﬁned networking,” IEEE Communications Magazine, vol. 51,
no. 2, pp. 114–119, 2013.
[43] Apache, “Cassandra,” http://cassandra.apache.org/.
12