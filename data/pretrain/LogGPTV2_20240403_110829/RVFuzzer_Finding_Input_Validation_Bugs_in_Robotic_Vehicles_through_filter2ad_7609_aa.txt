title:RVFuzzer: Finding Input Validation Bugs in Robotic Vehicles through
Control-Guided Testing
author:Taegyu Kim and
Chung Hwan Kim and
Junghwan Rhee and
Fan Fei and
Zhan Tu and
Gregory Walkup and
Xiangyu Zhang and
Xinyan Deng and
Dongyan Xu
RVFuzzer: Finding Input Validation Bugs in 
Robotic Vehicles through Control-Guided Testing
Taegyu Kim, Purdue University; Chung Hwan Kim and Junghwan Rhee,  
NEC Laboratories America; Fan Fei, Zhan Tu, Gregory Walkup, Xiangyu Zhang,  
Xinyan Deng, and Dongyan Xu, Purdue University
https://www.usenix.org/conference/usenixsecurity19/presentation/kim
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.RVFUZZER: Finding Input Validation Bugs in Robotic Vehicles Through
Control-Guided Testing
Taegyu Kim†, Chung Hwan Kim∗, Junghwan Rhee∗, Fan Fei†, Zhan Tu†, Gregory Walkup†
Xiangyu Zhang†, Xinyan Deng†, Dongyan Xu†
†Purdue University, {tgkim, feif, tu17, gwalkup, xyzhang, xdeng, dxu}@purdue.edu
∗NEC Laboratories America, {chungkim, rhee}@nec-labs.com
Abstract
Robotic vehicles (RVs) are being adopted in a variety of
application domains. Despite their increasing deployment,
many security issues with RVs have emerged, limiting their
wider deployment. In this paper, we address a new type of
vulnerability in RV control programs, called input validation
bugs, which involve missing or incorrect validation checks
on control parameter inputs. Such bugs can be exploited to
cause physical disruptions to RVs which may result in mis-
sion failures and vehicle damages or crashes. Furthermore,
attacks exploiting such bugs have a very small footprint: just
one innocent-looking ground control command, requiring no
code injection, control ﬂow hijacking or sensor spooﬁng. To
prevent such attacks, we propose RVFUZZER, a vetting sys-
tem for ﬁnding input validation bugs in RV control programs
through control-guided input mutation. The key insight be-
hind RVFUZZER is that the RV control model, which is the
generic theoretical model for a broad range of RVs, provides
helpful semantic guidance to improve bug-discovery accuracy
and efﬁciency. Speciﬁcally, RVFUZZER involves a control
instability detector that detects control program misbehavior,
by observing (simulated) physical operations of the RV based
on the control model. In addition, RVFUZZER steers the input
generation for ﬁnding input validation bugs more efﬁciently,
by leveraging results from the control instability detector as
feedback. In our evaluation of RVFUZZER on two popular
RV control programs, a total of 89 input validation bugs are
found, with 87 of them being zero-day bugs.
1 Introduction
Robotic vehicles (RVs), such as commodity drones, are a
type of cyber-physical system for autonomous transportation.
They are typically equipped with a computing board with
control hardware (e.g., micro-controller) and software (e.g.,
real-time control program). The on-board control program
continuously senses the vehicle’s physical state (e.g., position
and velocity) and actuates the motors to control the vehicle’s
movement to accomplish a given mission. RVs have emerged
in various application domains such as commercial, industrial,
entertainment, and law enforcement. For instance, logistics
companies (e.g., USPS, DHL, and Amazon) have introduced
drone delivery services to meet the rapidly growing demand
in e-commerce [6, 10, 13, 27].
With their increasing adoption in real-world applications,
RVs are facing threats of cyber and cyber-physical attacks that
exploit their attack surface. More speciﬁcally, an RV’s attack
surface spans multiple aspects, such as (1) physical vulnerabil-
ities of its sensors that enable external sensor spooﬁng attacks
[72, 77, 80]; (2) traditional “syntactic” bugs in its control pro-
gram (e.g., memory corruption bugs) that enable remote or tro-
janed exploits [75]; and (3) control-semantic bugs in its con-
trol program that enable attacks via remote control commands.
For attacks exploiting (1) and (2), there have been research
efforts in defending against them [30, 38, 40, 50, 52, 70, 76];
whereas those exploiting (3) have not received sufﬁcient atten-
tion. As a result, the RV’s attack surface in the aspects of (1)
and (2) is expected to get smaller, which may prompt attackers
to increasingly look at the control-semantic vulnerabilities for
new exploits.
In this paper, we focus on an important type of control-
semantic bugs in RV control programs, called input validation
bugs. An input validation bug involves an incorrect or missing
validity check on a control parameter-change input. Such an
input is provided to the control program via a remote control
command, which could trigger RV controller malfunction and
ultimately lead to physical impacts on the vehicle, such as
mission disruption, vehicle instability, or even vehicle dam-
age/crash. Finding input validation bugs is a new research
problem because they are largely orthogonal to the traditional
“syntactic” bugs (e.g., buffer overﬂow and use-after-free bugs)
which can be detected by existing software testing/fuzzing
techniques.
Input validation bugs, on the other hand, are created se-
mantically via incorrect setting of control parameters. In an
RV, the control program can be conﬁgured through control
parameters, which are adjustable numerical inputs that de-
USENIX Association
28th USENIX Security Symposium    425
termine certain aspects of the control function’s behavior
(e.g., controller gain and default ﬂight speed). We can further
categorize input validation bugs into two sub-categories: (1)
Incorrect or missing parameter range checks in the control
program, which would accept illegitimate setting of control
parameter values, are called range implementation bugs. (2)
Incorrect speciﬁcation of control parameter ranges, even if
correctly implemented, may cause RV controller malfunction.
We call such speciﬁcation-level errors (implemented in the
control program) range speciﬁcation bugs.
Most RVs have a remote control interface [21] for opera-
tors to set or adjust control parameters during a ﬂight. Un-
fortunately, such an interface can be leveraged by attackers
[9, 55, 67,68] to exploit input validation bugs and deliberately
mis-conﬁgure certain control parameters. As an example (de-
tails in Section 6.3.3), an RV control program allows operators
to dynamically adjust a parameter for the vehicle’s angular
control and suggests a range of valid values in its speciﬁ-
cation. However, the range is erroneously determined and
implemented. Knowing this bug, an attacker can issue a mali-
cious command to reset the parameter using an illegitimate
value that falls into the “valid” range, consequently crashing
the vehicle.
Testing RV control programs to ﬁnd input validation bugs
is challenging. Popular RV control software (e.g., ArduPi-
lot [15], PX4 [24], and Paparazzi [23]) supports many differ-
ent RV models (e.g., quadcopters and ground rovers) with a
large number of hardware, software and control conﬁguration
options. Generating accurate control parameter value ranges
requires thorough testing of hundreds of control parameters
for each RV model. With the growing number of RV models
supported by control software, such testing is increasingly dif-
ﬁcult to scale and automate. To overcome this challenge, espe-
cially without assuming source code access, one might think
of leveraging automated black-box software testing methods,
such as fuzzing [14, 17, 19, 71]. However, traditional software
fuzzing techniques are not directly applicable to RV control
programs because: (1) With hundreds of conﬁgurable param-
eters, the control program has an extremely large input space
to explore and (2) there is no uniform and obvious condition
to automatically decide that a control program is malfunction-
ing. Many input validation bugs do not exhibit system-level
symptoms until certain control and physical conditions are
met at run-time.
Our solution to ﬁnding input validation bugs – without
control program source code – is motivated by the following
ideas: (1) The impacts of attacks exploiting input validation
bugs can be manifested by the victim vehicle’s control state;
and (2) such state can be efﬁciently reproduced by combining
the RV control program and a high-ﬁdelity RV simulation
framework, which is readily available [7, 8].
Based on these ideas, we develop RVFUZZER, an auto-
mated RV control program testing system to ﬁnd input val-
idation bugs. RVFUZZER supports input-driven testing of a
subject control program’s binary, which runs in an RV simu-
lator – for safety and efﬁciency. Unlike a traditional program
bug (e.g., a memory corruption or divide-by-zero bug) that
can result in an obvious program execution failure, automati-
cally determining if the control program is ill-behaving based
on the simulated vehicle’s physical state is not straightfor-
ward. To address the problem, RVFUZZER involves a control
instability detector based on a standard control stability mea-
surement formula [47] to detect vehicle control malfunction.
More importantly, RVFUZZER leverages this detector to quan-
tify control (in)stability as feedback to guide input mutation,
so that bugs can be found more efﬁciently by covering a large
portion of the input space in a reasonable number of test
runs. Our control-guided input mutation method is based on
the following control property: When RV control instability
starts to be observed while increasing (decreasing) the value
of a control parameter, further increase (decrease) of the pa-
rameter value will only maintain or intensify such instability
(Section 4.3.2). Finally, RVFUZZER mutates environmental
factors such as trajectory curve or wind condition during
testing, as attackers may leverage predictable environmental
factors as probabilistic attack-triggering conditions.
We have implemented a prototype of RVFUZZER and ap-
plied it to ArduPilot [15] and PX4 [24], which are two pop-
ular RV control software suites used in many commodity
RVs [32,45,58,69]. RVFUZZER ﬁnds a total of 89 input vali-
dation bugs that can cause RV control malfunction: Two of
them are known input validation bugs that were previously
patched by developers; whereas the remaining 87 bugs are
zero-day bugs which we have reported to the developers. In
response to our report, eight bugs have been conﬁrmed and
seven of them have been patched. The contributions of our
work are as follows:
• We introduce input validation bugs, a new type of RV
control-semantic vulnerability that can be exploited by at-
tackers.
• We develop RVFUZZER, a control-guided program vetting
system to discover input validation bugs with safety, efﬁ-
ciency, and automation.
• We apply RVFUZZER to two popular RV control software
suites and ﬁnd 89 input validation bugs including 87 zero-
day bugs.
2 Background
RV Control Model The RV control model is the generic the-
oretical underpinnings that control the vehicle’s movements
and operations during its missions (e.g., ﬂying in a trajectory
with multiple waypoints). The RV’s movements are along its
six degrees of freedom (6DoF), which include the x, y, and
z-axes for movement and the roll, pitch, and yaw for rotation
(Fig. 1). The control model consists of multiple controllers,
each for a speciﬁc degree of the 6DoF. For example, the x-axis
426    28th USENIX Security Symposium
USENIX Association
Figure 1: An RV’s six degrees of freedom (6DoF).
Figure 2: The x-axis controller (with three primitive controllers).
controller is shown in Fig. 2.
Inside the x-axis controller, there are three primitive con-
trollers in a cascade, which are responsible for controlling the
vehicle’s position, velocity, and acceleration along the x-axis,
respectively. Each primitive controller takes two state inputs:
a reference state (r(t)) computed by its upstream primitive
controller; and an observed state (x(t)) reported by sensors.
The goal of the controller is to keep the observed state close
to the reference state, via its core function of control state sta-
bilization. The output of the function is the reference state for
its downstream primitive controller. Each primitive controller
has multiple adjustable parameters and accepts high-level
mission directives (e.g., change of target location or speed).
Overall the RV control model involves complex depen-
dencies between the 6DoF controllers, each having multiple
parameters and accepting mission directives. Moreover, the
controllers, sensors, and the vehicle’s physical operations (e.g.,
those of motors) create a feedback loop, which enables the
periodic, iterative working of the controllers.
RV Control Program An RV control program implements
the RV control model. Correspondingly, it involves the fol-
lowing main modules: (1) a sensor module to collect sensor
inputs (e.g., from GPS, inertial measurement unit, etc.) for
periodic vehicle state observation, (2) a controller module to
generate control output based on current mission, reference
state, and sensor input, and (3) a mission module to interpret
mission directives and execute them. These modules execute
iteratively in the periodic control epochs.
During a ﬂight, the RV communicates with a ground control
station (GCS), which may issue a variety of GCS commands
to the control program. Many of those commands allow RV
operators to dynamically adjust the controller and mission
parameters. We note that such a dynamic parameter change
may be necessary to improve vehicle control performance
(e.g., enhancing stability), in response to mission dynamics
such as payload change and non-trivial external disturbances.
In addition to the control and communication functions,
most RV control programs have a run-time control state log-
ging function, for record-keeping and troubleshooting pur-
poses. Real-world commodity RVs (e.g., Intel Aero [18],
3DR IRIS+ [12], and DJI drone series [16]), as well as their
simulators, log in-ﬂight control states in persistent storage.
RVFUZZER leverages such logs for automatic determination
of controller malfunction.
Control Parameters Because of the complexity and gen-
erality of RV control model and program, a large number
(hundreds) of conﬁgurable parameters exist in the control
program. Many of them are dynamically adjustable at run-
time via the GCS command interface. For example, in the
ArduPilot software suite [15], there are 247 conﬁgurable con-
trol parameters, including 111 parameters for the x-, y-axis
controller, 119 for the z-axis controller, 29 for the roll con-
troller, 29 for the pitch controller, 30 for the yaw controller,
103 for motor control, and 40 for mission speciﬁcation. We
note that, while the total number of the parameters is 247,
some of the parameters are shared by multiple controllers.
When receiving a GCS command to adjust one of these pa-
rameters, the control program is supposed to perform an input
validity check to determine if the new value is within the safe
range of that parameter. Unfortunately, such a check may be
missing or based on an erroneous value range.
3 Attack Model
Attack Model and Assumptions Attacks that exploit input
validation bugs are characterized as follows: Knowing an ad-
justable control parameter with incorrect or missing range
check logic in the control program1, the attacker concocts
and issues a seemingly innocent – but actually malicious –
parameter-change GCS command to the victim RV. With-
out correct input validation, the illegitimate parameter value
will be accepted by the control program and cause at least
one of the RV’s 6DoF controllers to malfunction – either im-
mediately or at a later juncture, inﬂicting physical impacts
on the RV. When planning an attack, the attacker may also
opportunistically exploit a certain environmental condition
(e.g., strong wind) under which a parameter-change command
would become dangerous. For example, he/she might wait for
the right wind condition (e.g., by following weather forecast)
to launch an attack with high success probability. Such a case
will be presented in Section 6.3.3.
The attacker can be either an external attacker or an insider
threat. In the case of an external attacker, we assume that
he/she is able to perform GCS spooﬁng to issue the malicious
command, which is justiﬁed by the known vulnerabilities
in the wireless/radio communication protocols between RV