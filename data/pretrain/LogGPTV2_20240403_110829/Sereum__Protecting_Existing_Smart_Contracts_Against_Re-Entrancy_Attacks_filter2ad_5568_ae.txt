re-entrancy vulnerability. Apart from the 6 false positives in
our test set, the analysis performed by previous work [20],
[42] demonstrated that re-entrancy detection in Oyente suffers
from false positive issues.
With respect to Securify, the latest version of Securify
requires the source code of a contract thereby impeding us
from evaluating all contracts. We therefore have only examined
the contracts whose source code is available. Securify deﬁnes
a very conservative violation pattern for re-entrancy detection
that forbids any state update after an external call. As such,
5.8% out of 24,594 tested contracts in the authors’ experiment
(around 1,426 contracts) are ﬂagged as vulnerable to re-
11
1101001,00010,000100,000#Transactions(Sereum)False Positive (FP)True Positive (TP)CCRBDAO0x7484a1(proxyCC)DAC(DSEthToken)0x695d73(EZC)0x98D8A6(WEI)0xbD7CeC0xF4ee93Alarm0x771500KissBTCLotteryGameLogicFP TypeIIIIIIIIIIIIIVVVVVUUOyenteSecurifyVulnerable Contractsentrancy, which consequently results in a very high false
positive rate.
Lastly, we evaluated our new re-entrancy attack patterns
(Section III). For each contract, we crafted one attack trans-
action for Sereum to perform the check: Sereum success-
fully detects all attack transactions to the three vulnerable
contracts. Table I shows an overview of various tools tested
against the vulnerable contracts for the new re-entrancy attacks
patterns. As discussed earlier, neither Oyente, Securify nor
Manticore were able to detect delegated and create-based re-
entrancy vulnerabilities. While Oyente does not detect the
cross-function re-entrancy attack, Securify is able to detect
it due to its conservative policy. Similarly, Mythril detects
cross-function and create-based re-entrancy, because it utilizes
a similar policy to Securify, which is extremely conservative
and therefore also results in a high number of false positives.
ECFChecker detects the cross-function re-entrancy attack.
However, during our evaluation, we crafted another contract,
which is vulnerable to cross-function re-entrancy, but was not
detected by ECFChecker. Recall that the delegated re-entrancy
attack cannot be detected by any existing static off-line tool
as it exploits a dynamic library which is either not available
at analysis time or might be updated in the future. However,
a dynamic tool, such as ECFChecker, can detect the delegated
re-entrancy. The create-based re-entrancy attack is not detected
by any of the existing analysis tools, as the instruction CREATE
is currently not considered as an external call by none of the
existing analysis tools.
In general, we argue that Sereum offers the advantage of
detecting actual re-entrancy attacks and not possible vulnera-
bilities. As such, we can evaluate on a reduced set of only
16 contracts rather than 185 (Oyente) or 1,426 (Securify)
contracts. In contrast to previous work [29], [42], this makes
it feasible for us to exactly determine whether an alarm is
a true or false positive. Moreover, some of the contracts are
not ﬂagged by Oyente and Securify as these do not cover the
full space of re-entrancy attacks. As such, they naturally do
not raise false positives for contracts that violate re-entrancy
patterns that are closely related to the delegated and create-
based re-entrancy (i.e., Type III and IV).
B. False Positive Analysis
While investigating the 16 contracts which triggered the
re-entrancy detection of Sereum, we discovered code patterns
in deployed contracts (see Figure 10), which are challenging to
accurately handle for any off-line or run-time bytecode analysis
Table I.
COMPARISON OF RE-ENTRANCY DETECTION TOOLS SUBJECT
TO OUR TESTCASES FOR THE ADVANCED RE-ENTRANCY ATTACK
PATTERNS. TOOLS MARKED WITH (cid:32) SUPPORT DETECTING THIS TYPE OF
RE-ENTRANCY, WHILE TOOLS MARKED WITH (cid:35) DO NOT SUPPORT
DETECTING THIS TYPE OF RE-ENTRANCY. TOOLS WITH AN OVERLY
Tool
Oyente
Mythril
Securify
Manticore
ECFChecker
Sereum
RESTRICTIVE POLICY ARE MARKED WITH (cid:71)(cid:35).
Version
Cross-Function
Delegated
Create-based
0.2.7
0.19.9
2018-08-01
0.2.2
geth1.8port
-
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
12
1
2
3
4
struct S {
int128 a;
int128 b;
}
// 16 bytes
// 16 bytes
// total: 32 bytes (one word in storage)
Figure 11. Solidity struct, where both a and b are at the same storage address.
Therefore, any update to a or b includes loading and writing also the other.
tool. These patterns are the root cause for the rare false positive
cases we encountered during our evaluation of Sereum.
However, since these code patterns are not only challenging
for Sereum, but for other existing analysis tools such as
Oyente [34], Mythril [31], Securify [42], or any reverse-
engineering tools operating at EVM bytecode level [3], [45],
we believe that a detailed investigation of these cases is highly
valuable for future research in this area. Our investigation also
reveals for the ﬁrst time why existing tools suffer from false
alarms when searching for re-entrancy vulnerabilities. In what
follows, we reﬂect on the investigation of the false positives
that we encountered.
I. Lack of Field-Sensitivity on the EVM Level. Some
false positives are caused by lack of information on ﬁelds
at bytecode level for data structures. Solidity supports the
keyword struct to deﬁne a data structure that is composed
of multiple types, e.g., Figure 11 shows a sample deﬁnition
of a struct S of size 32 bytes. Since the whole type can
be stored within one single word in the EVM storage area,
accessing either of the ﬁelds a or b ends up accessing the
same storage address. In other words, on the EVM bytecode
level, the taint-tracking engine of Sereum cannot differentiate
the access to ﬁelds a and b. This leads to a problem called
over-tainting, where taints spread to unrelated values and in
turn causes false positives. Notice that this problem affects
all analysis tools working on the EVM bytecode level. Some
static analysis tools [38] use heuristics to detect the high-level
types in Ethereum bytecode. The same approach could be used
to infer the types of different ﬁelds of a packed data struc-
ture. However, for a run-time monitoring solution, heuristic
approaches often incur unacceptable runtime overhead without
guarantee of successful identiﬁcation. To address this type of
false positive, one would either require the source code of the
contract or additional type information on the bytecode level.
II. Storage Deallocation. Recall that the EVM storage area
is basically a key-value store that maps 256-bit words to 256-
bit words. The EVM architecture guarantees that the whole
storage area is initialized with all-zero values and is always
available upon request. More speciﬁcally, no explicit memory
allocation is required, while memory deallocation simply resets
the value to zero. This poses a problem at the bytecode level:
a memory deallocation is no different from a state update to
value 0, though the semantics differ; especially when applying
the re-entrancy detection logic. Consider the example of a map
M in Figure 12. When the contract deallocates the element
indexed by id from M (delete from a map), it basically has
the same effect as setting the value of M[id] to 0 at the
bytecode level. Here, the Solidity compiler will emit nearly
identical bytecode for both cases. We encountered a contract4
4Contract address: 0x6777c314b412f0196aca852632969f63e7971340
1
2
3
4
5
mapping (uint => uint) M; // a hash map
// delete entry from mapping
delete M[id];
// on the EVM level this is equivalent to
M[id] = 0;
Figure 12. Solidity storage delete is equivalent to storing zero.
presenting this case which leads to a false alarm. Similar to
ﬁeld-sensitivity issues, correctly handling such cases requires
the source code or an explicit EVM deallocation instruction.
III. Constructor Callbacks. Sereum considers calls to the
constructor of contracts to be the same as calls to any other
external contract. This allows Sereum to detect create-based re-
entrancy attacks (cf. Section III-C). However, detecting create-
based re-entrancy comes at the cost of some false positives.
During our evaluation5, we noticed that sub-contracts created
by other contracts, tend to call back into their parent contracts.
Usually, this is used to retrieve additional information from
the parent contract: the parent creates the sub-contract, the
sub-contract re-enters the parent contract to retrieve the value
of a storage variable, and that same variable is then updated
later by the parent. Consider the example in Figure 13, where
contract A creates a sub-contract B. While the constructor
executes, B re-enters the parent contract A, which performs
a control-ﬂow decision on the funds variable. This results in
Sereum locking the variable funds. Since no call to another
potentially malicious external contract is involved this example
is not exploitable via re-entrancy. However, Sereum detects that
the funds variable is possibly inconsistent due to the deferred
state update. A malicious contract B could have re-entered A
and modiﬁed the funds variable in the meantime.
We argue that this constructor callback pattern should be
avoided by contract developers. All necessary information
should be passed to the sub-contract’s constructor, such that no
re-entrancy into the parent contract is needed. This does not
only avoid false positives in Sereum, but also decreases the gas
costs. External calls are one of the most expensive instructions
in terms of gas requirements, which must be payed for in Ether
and as such should be avoided as much as possible.
IV. Tight Contract Coupling. During our evaluation, we no-
ticed a few cases where multiple contracts are tightly coupled
with each other resulting in overly complex transactions, i.e.,
transactions that cause the contracts to be re-entered multiple
times into various functions. This suggests that these contracts
have a strong interdependency. Since Sereum introduces locks
for variables that can be potentially exploited for re-entrancy
and is not aware of the underlying trust relations among
contracts,
it reports a false alarm when a locked variable
is updated. We consider these cases as an example for bad
contract development practice since performing external calls
is relatively expensive in terms of gas, and such also Ether, and
could be easily avoided in these contracts. That is, if trusted
contracts have internal state that depends on the state of other
trusted contracts, we suggest developers to keep the whole
state in one contract and use safe library calls instead.
5Contract address 0xFBe1C2a693746Ccfa2755bD408986da5281c689F
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
contract A {
mapping (address => uint) funds;
// ...
function hasFunds(address a) public returns(bool) {
// funds is used for control-flow decision
if (funds[a] >= 1) { return true; }
else { return false; }
}
function createB() {
B b = new B(this, msg.sender);
// ...
// update state (locked due to call to hasFunds)
funds[msg.sender] -= 1;
}
}
contract B {
constructor(A parent, address x) {
// call back into parent
if (parent.hasfunds(x)) { /* ... */ }
}
}
Figure 13. Constructor callback. The sub-contract B calls back (re-enters)
into the hasFunds function of the parent contract A. This type of false positive
is similar to the create-based re-entrancy attack pattern.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
mapping (address => uint) private balances;
mapping (address => bool) private disableWithdraw;
// ...
function withdraw() public {
1 if (disableWithdraw[msg.sender] == true) {
// abort immediately and return error to caller
revert();
}
uint amountToWithdraw = balances[msg.sender];
2 disableWithdraw[msg.sender] = true;
3 msg.sender.call.value(amountToWithdraw)();
4 disableWithdraw[msg.sender] = false;
// state update after call
userBalances[msg.sender] = 0;
}
Figure 14. Manual locking to guard against re-entrancy.
V. Manual Re-Entrancy Locking. To allow expected and
safe re-entrancy, a smart contract can manually introduce lock
variables (i.e., a mutex) to guard the entry of the function. In
Figure 14), disableWithdraw enables a lock at  before making
an external call at . The lock is reset after the call at . This
prevents any potential re-entrance at . Hence, even though