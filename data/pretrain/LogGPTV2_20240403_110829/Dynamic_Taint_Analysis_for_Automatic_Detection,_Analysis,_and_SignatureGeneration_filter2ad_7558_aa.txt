title:Dynamic Taint Analysis for Automatic Detection, Analysis, and SignatureGeneration
of Exploits on Commodity Software
author:James Newsome and
Dawn Xiaodong Song
Dynamic Taint Analysis for Automatic Detection, Analysis,
and Signature Generation of Exploits on Commodity Software
James Newsome
PI:EMAIL
Carnegie Mellon University
Dawn Song
PI:EMAIL
Carnegie Mellon University
Abstract
Software vulnerabilities have had a devastating effect
on the Internet. Worms such as CodeRed and Slammer
can compromise hundreds of thousands of hosts within
hours or even minutes, and cause millions of dollars of
damage [25, 42]. To successfully combat these fast auto-
matic Internet attacks, we need fast automatic attack de-
tection and ﬁltering mechanisms.
In this paper we propose dynamic taint analysis for au-
tomatic detection of overwrite attacks, which include most
types of exploits. This approach does not need source code
or special compilation for the monitored program, and
hence works on commodity software. To demonstrate this
idea, we have implemented TaintCheck, a mechanism that
can perform dynamic taint analysis by performing binary
rewriting at run time. We show that TaintCheck reliably
detects most types of exploits. We found that TaintCheck
produced no false positives for any of the many different
programs that we tested. Further, we describe how Taint-
Check could improve automatic signature generation in
several ways.
1. Introduction
Software vulnerabilities such as buffer overruns and for-
mat string vulnerabilities have had a devastating effect on
the Internet. Worms such as CodeRed and Slammer ex-
ploit software vulnerabilities and can compromise hun-
dreds of thousands of hosts within hours or even min-
utes, and cause millions of dollars of damage [25, 42]. To
successfully combat fast Internet worm attacks, we need
automatic detection and defense mechanisms. First, we
need automatic detection mechanisms that can detect new
attacks for previously unknown vulnerabilities. A detec-
tion mechanism should be easy to deploy, result in few
false positives and few false negatives, and detect attacks
early, before a signiﬁcant fraction of vulnerable systems
are compromised. Second, once a new exploit attack is
detected, we must quickly develop ﬁlters (a.k.a. attack
signatures) that can be used to ﬁlter out attack packets ef-
ﬁciently, and hence protect vulnerable hosts from compro-
mise until the vulnerability can be patched. Because a new
worm can spread quickly, signature generation must be
automatic—no manual intervention can respond quickly
enough to prevent a large number of vulnerable hosts from
being infected by a new fast-spreading worm.
We need ﬁne-grained attack detectors for commodity
software. Many approaches have been proposed to de-
tect new attacks. These approaches roughly fall into two
categories: coarse-grained detectors, that detect anoma-
lous behavior, such as scanning or unusual activity at a
certain port; and ﬁne-grained detectors, that detect attacks
on a program’s vulnerabilities. Coarse-grained detectors
may result in frequent false positives, and do not provide
detailed information about the vulnerability and how it is
exploited. Thus, it is desirable to develop ﬁne-grained de-
tectors that produce fewer false positives, and provide de-
tailed information about the vulnerability and exploit.
Several approaches for ﬁne-grained detectors have been
proposed that detect when a program is exploited. Most of
these previous mechanisms require source code or special
recompilation of the program, such as StackGuard [14],
PointGuard [13], full-bounds check [19, 37], Libsafe-
Plus [5], FormatGuard [12], and CCured [27]. Some of
them also require recompiling the libraries [19, 37], or
modifying the original source code, or are not compatible
with some programs [27, 13]. These constraints hinder the
deployment and applicability of these methods, especially
for commodity software, because source code or specially
recompiled binaries are often unavailable, and the addi-
tional work required (such as recompiling the libraries and
modifying the original source code) makes it inconvenient
to apply these methods to a broad range of applications.
Note that most of the large-scale worm attacks to date are
attacks on commodity software.
Thus, it is important to design ﬁne-grained detectors
that work on commodity software, i.e., work on arbitrary
binaries without requiring source code or specially re-
compiled binaries. This goal is difﬁcult to achieve be-
cause important information, such as type information,
is not generally available in binaries. As a result, exist-
ing exploit detection mechanisms that do not use source
code or specially compiled binary programs, such as Lib-
Safe [6], LibFormat [36], Program Shepherding [22], and
the Nethercote-Fitzhardinge bounds check [28], are typi-
cally tailored for narrow types of attacks and fail to detect
many important types of common attacks (see Section 7
for details).
We need automatic tools for exploit analysis and sig-
nature generation. Because ﬁne-grained detectors are
expensive and may not be deployed on every vulnerable
host, once a new exploit attack is detected, it is desir-
able to generate faster ﬁlters that can be widely deployed
to ﬁlter out exploit requests before they reach vulnera-
ble hosts/programs. One important mechanism is content-
based ﬁltering, where content-based signatures are used to
pattern-match packet payloads to determine whether they
are a particular attack. Content-based ﬁltering is widely
used in intrusion detection systems such as Snort [32],
Bro [31], and Cisco’s NBAR system [43], and has been
shown to be more effective than other mechanisms, such
as source-based ﬁltering for worm quarantine [26]. How-
ever, these systems all use manually generated databases
of signatures. Manual signature generation is clearly too
slow to react to a worm that infects hundreds of thousands
of machines in a matter of hours or minutes. We need to
have automatic exploit analysis and signature generation
to quickly generate signatures for attack ﬁltering after an
exploit attack has been detected.
Our contributions.
In this paper, we propose a new
approach, dynamic taint analysis, for the automatic de-
tection, analysis, and signature generation of exploits on
commodity software. In dynamic taint analysis, we label
data originating from or arithmetically derived from un-
trusted sources such as the network as tainted. We keep
track of the propagation of tainted data as the program ex-
ecutes (i.e., what data in memory is tainted), and detect
when tainted data is used in dangerous ways that could
indicate an attack. This approach allows us to detect over-
write attacks, attacks that cause a sensitive value (such as
return addresses, function pointers, format strings, etc.) to
be overwritten with the attacker’s data. Most commonly
occurring exploits fall into this class of attacks. After an
attack has been detected, our dynamic taint analysis can
automatically provide information about the vulnerability,
how the vulnerability was exploited, and which part of the
payload led to the exploit of the vulnerability. We show
how this information could be used to automatically gen-
erate signatures for attack ﬁltering. We have developed an
automatic tool, TaintCheck, to demonstrate our dynamic
taint analysis approach. TaintCheck offers several unique
beneﬁts:
(cid:15) Does not require source code or specially com-
piled binaries. TaintCheck operates on a normally
compiled binary program. This makes TaintCheck
simple and practical to use for a wide variety of pro-
grams, including proprietary programs and commod-
ity programs for which no source code is available.
(cid:15) Reliably detects most overwrite attacks. Taint-
Check’s default policy detects format string attacks,
and overwrite attacks that attempt to modify a pointer
used as a return address, function pointer, or func-
tion pointer offset. Its policy can also be extended
to detect other overwrite attacks, such as those that
attempt to overwrite data used in system calls or
security-sensitive variables.
(cid:15) Has no known false positives. In our experiments,
TaintCheck gave no false positives in its default con-
ﬁguration. As we discuss in Section 3, in many
cases when a false positive could occur, it is a symp-
tom of a potentially exploitable bug in the monitored
program. For programs where the default policy of
TaintCheck could generate a false positive, we show
in Section 3 that it is straightforward to conﬁgure
TaintCheck to reduce or eliminate those false posi-
tives.
(cid:15) Enables automatic semantic analysis based signa-
ture generation.
We propose a new approach for automatic signature
generation: using automatic semantic analysis of at-
tack payloads to identify which parts of the payload
could be useful in an attack signature. Previous work
in automatic signature generation uses content pat-
tern extraction to generate signatures [21, 24, 41].
The information provided by semantic analysis could
be used to generate a signature directly, or as hints to
content pattern extraction techniques. Because se-
mantic analysis provides information about the vul-
nerability and how it is exploited, it could potentially
allow an accurate signature to be automatically gen-
erated using fewer payloads than would be necessary
using content pattern extraction alone. By requir-
ing fewer attack payloads, semantic analysis could
generate a signature at an earlier stage of a worm
epidemic, thus minimizing damage caused by a new
worm.
TaintCheck could be used to perform automatic se-
mantic analysis of attack payloads, because it moni-
tors how each byte of each attack payload is used by
the vulnerable program at the processor-instruction
level. As a ﬁrst step, we show that TaintCheck can
be used to identify the value used to overwrite a re-
turn address or function pointer. The most signiﬁcant
bytes of this value can be used as part of a signature.
We also show that for text-based protocols such as
HTTP, it can be used as a signature by itself, with
only a small false positive rate.
Moreover, we show how TaintCheck can be used as
an accurate classiﬁer both in existing automatic sig-
nature generation systems, and in an automatic se-
mantic analysis signature generation system. As an
accurate classiﬁer, TaintCheck can be used to accu-
rately identify new attacks.
It can also be used to
verify the quality of generated signatures by deter-
mining whether requests that match a new signature
actually contain an attack.
TaintCheck adds a new point in the design space of au-
tomatic detection and defense, and is the ﬁrst approach
that achieves all the above properties.
The current implementation of TaintCheck slows server
execution between 1.5 and 40 times. However, our proto-
type has not been optimized. Several techniques described
in Section 4 will lead to a more efﬁcient implementation.
Additionally, we show in Section 5 that monitoring even
a small fraction of incoming requests with TaintCheck
could help to detect a new worm in the early stages of
an epidemic.
The rest of the paper is organized as follows. We de-
scribe TaintCheck’s design and implementation, and how
it detects various attacks, in Section 2. We show Taint-
Check is able to detect a wide variety of attacks with few
false positives and negatives in Section 3. We evaluate the
effectiveness and performance of TaintCheck in Section 4.
We discuss how TaintCheck can be applied to detection of
new attacks in Section 5, and to automatic signature gen-
eration in Section 6. We present related work in Section 7,
and our conclusions in Section 8.
2. TaintCheck design and implementation
TaintCheck is a novel mechanism that uses dynamic
taint analysis to detect when a vulnerability such as a
buffer overrun or format string vulnerability is exploited.
We ﬁrst give an overview of our dynamic taint analysis
approach, and then describe how we use this approach in
the design and implementation of TaintCheck.
Dynamic taint analysis Our technique is based on the
observation that in order for an attacker to change the ex-
ecution of a program illegitimately, he must cause a value
that is normally derived from a trusted source to instead be
derived from his own input. For example, values such as
jump addresses and format strings should usually be sup-
plied by the code itself, not from external untrusted inputs.
However, an attacker may attempt to exploit a program by
overwriting these values with his own data.
We refer to data that originates or is derived arithmeti-
cally from an untrusted input as being tainted. In our dy-
namic taint analysis, we ﬁrst mark input data from un-
trusted sources tainted, then monitor program execution to
track how the tainted attribute propagates (i.e., what other
data becomes tainted) and to check when tainted data is
used in dangerous ways. For example, use of tainted data
as jump addresses or format strings often indicates an ex-
ploit of a vulnerability such as a buffer overrun or format
string vulnerability.
Note that our approach detects attacks at the time of
use, i.e., when tainted data is used in dangerous ways.
This signiﬁcantly differs from many previous approaches
which attempt to detect when a certain part of memory
is illegitimately overwritten by an attacker at the time of
the write. It is not always possible at the time of a write
to detect that the overwrite is illegitimate, especially for
approaches not using source code or specially recompiled
binaries. In contrast, our approach does not rely on de-
tection at the time of overwrite and is independent of the
overwriting method, and thus can detect a wide range of
attacks.
Design and implementation overview TaintCheck per-
forms dynamic taint analysis on a program by running
the program in its own emulation environment. This al-
lows TaintCheck to monitor and control the program’s ex-
ecution at a ﬁne-grained level. Speciﬁcally, we imple-
mented TaintCheck using Valgrind [29]. Valgrind is an
open source x86 emulator that supports extensions, called
skins, which can instrument a program as it is run.1
Whenever program control reaches a new basic block,
Valgrind ﬁrst translates the block of x86 instructions into
its own RISC-like instruction set, called UCode. It then
passes the UCode block to TaintCheck, which instruments
the UCode block to incorporate its taint analysis code.
TaintCheck then passes the rewritten UCode block back
to Valgrind, which translates the block back to x86 code
so that it may be executed. Once a block has been instru-
mented, it is kept in Valgrind’s cache so that it does not
need to be reinstrumented every time it is executed.
1Note that while Memcheck, a commonly used Valgrind extension,
is able to assist in debugging memory errors, it is not designed to detect
attacks. It can detect some conditions relevant to vulnerabilities and at-
tacks, such as when unallocated memory is used, when memory is freed
twice, and when a memory write passes the boundary of a malloc-
allocated block. However, it does not detect other attacks, such as over-
ﬂows within an area allocated by one malloc call (such as a buffer ﬁeld
of a struct), format string attacks, or stack-allocated buffer overruns.
TaintSeed
TaintTracker
TaintAssert
Add
Copy
(via double−free)
Data from
Socket
Malloc’d
Buffer
Untainted Data
Use as
Fn Pointer
Attack
Detected!
Figure 1. TaintCheck detection of an attack. (Exploit Analyzer not shown).
To use dynamic taint analysis for attack detection, we
need to answer three questions: (1) What inputs should
be tainted? (2) How should the taint attribute propagate?
(3) What usage of tainted data should raise an alarm as
an attack? To make TaintCheck ﬂexible and extensible,
we have designed three components: TaintSeed, Taint-
Tracker, and TaintAssert to address each of these three
questions in turn. Figure 1 shows how these three com-
ponents work together to track the ﬂow of tainted data