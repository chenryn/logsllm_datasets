with remote clouds.
• Real-time augmented/virtual reality (AR/VR): Typical dis-
plays on AR/VR devices have a refresh rate of between 60 Hz and
90 Hz which translates into delay budgets of 11.1 ms and 16.7 ms,
respectively. To enable real-time AR/VR, Verizon now provides
support for offloading mobile headsets’ graphical computations
to Verizon’s 5G wireless edge [34].
4Termed as tracking/registration area in 4G/5G.
55G base stations are expected to also support millimeter-wave and underutilized UHF
frequencies between 300 MHz and 3 GHz, leading to smaller cell sizes.
6This is referred in the 5G world as Multi-access Edge Computing (MEC).
Figure 2: An example scenario resulting in inconsistent user
state between the UE and core network.
To support edge applications, cellular core functions also need to be
provisioned at the edge. We consider a deployment model (details
provided in §4.3) where cellular core functions are hosted on the
edge: cell towers or central offices.7
3 CHALLENGES
In this section, we discuss the key challenges in providing low
latency and reliable access in an edge-based cellular control plane.
3.1 User State Inconsistency
A common strategy to provide fault tolerance in the cellular control
plane is to replicate the UE state across multiple CPFs [14]. With
partition tolerance, this replication strategy makes it impossible to
simultaneously provide availability and state consistency across
replicas (CAP Theorem). Given this fundamental constraint, recent
proposals [14, 43] on cellular control plane simply do not provide
any consistency guarantees. For example, SCALE [14] updates the
UE state on the replicas asynchronously, only when a UE transitions
from the connected state to an idle state. Between these transitions,
there can be many UE state changes, and, therefore, SCALE cannot
guarantee that a replica will always have the updated UE state. 5G
core system architecture as proposed in 3GPP also does not provide
any protocol to keep CPFs consistent [8].
Sacrificing consistency in UE state across replicas leads to an in-
consistent user state between the UE and the core network, causing
major delays [46, 56]. We use Figure 2 and illustrate this through
the following example:
(1) UE attaches to the network by executing an Initial Attach pro-
cedure8 on the CPF through the base station.
(2) After the completion of the Initial Attach procedure, and before
updating the UE state at the replica, the CPF fails.
(3) At this stage, the user state at the UE is Attached whereas it is
Not Attached at the core network.
(4) At the stage, if the user receives a voice call or downlink data,
the core network will not be able to send it to the UE.
(5) The UE will get the connectivity back when it either re-executes
Attach or sends a location update message and it fails.
A similar case in the context of 4G/LTE networks was observed
in [46] leading to the UE not having data access for several minutes.
An important point to note is that in case of a CPF failure, a UE
7Telecom providers have many small central offices that were traditionally used to host
switching equipment and serve as aggregation points. These are now being considered
to host edge applications and core functions [38, 39].
8Refers to a sequence of request/response control messages between the UE/BS and
CPF to create necessary UE control state.
650
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Mukhtiar et al.
that provides reliable state access by guaranteeing Read your Writes
to every mobile user, while incurring little overhead (§4.2), (ii) the
design of a proactive geo-replication scheme that helps in reduc-
ing the delay in control handovers (§4.3), and (iii) the design of a
serialization scheme that speeds up user state updates (§4.4).
Figure 3: Page load time and video startup delay.
can be used to recreate a consistent UE state at the core network
by issuing a Re-Attach request [37].
3.2 Slow State Updates
We show that one key reason for the slow processing of state up-
dates between a user device, base station, and cellular control plane
in 5G and existing 4G/LTE is the slow serialization of control mes-
sages. Control messages between the UE/BS and CPF are serialized
using ASN.1 [11]. Our experiments on real control traffic traces
show that ASN.1 serializing can become a potential source of a bot-
tleneck in edge-based cellular core deployments.9 Figure 3 shows
the impact of using a faster serialization on video startup delay and
page load times. We observe that by changing the serialization, we
could significantly improve page video startup delay (up to 37×)
and page load time (up to 3.2×).10
ASN.1 is used in cellular networks because it provides (i) back-
ward compatibility with existing cellular networks and (ii) small
encoded message size, however, it is very slow at encoding/decoding
cellular control messages. Our analysis of cellular control messages
based on 3GPP standard [11] and real control traces [45] shows that
a single control message can consist of multiple elements and the
data in these messages is organized hierarchically, with potentially
multiple nested elements. When decoding these messages, ASN.1
has to (i) traverse all the previous bytes before accessing a field
and (ii) perform additional memory allocations during decoding,
increasing the overall processing time.
3.3 Frequent Control Plane Handovers
An edge-based cellular deployment will be highly geo-distributed.
As UEs can be mobile, one challenge is to ensure that the UEs are
mapped to close-by edge nodes to ensure low latency. However,
if done naively,11 this can also introduce frequent CPF handovers,
causing extra delays in the processing of control traffic. Control
handovers are known to cause significant delays in data access [37],
often unacceptable for latency sensitive applications. In our experi-
ments with a self driving car application, we observe that during
control handovers, up to 90% of the application deadlines can be
missed (§6.6).
4 DESIGN
To address the challenges in section §3, we design, Neutrino, a new
cellular control plane. In this section, we first describe our goals
in designing Neutrino and the resulting approach (§4.1). We then
describe in detail (i) the design of Neutrino’s consistency protocol
9We used Packed Encoding Rules (PER) of ASN.1 in our experiments.
10For details regarding the experimental setup, please refer to §6.
11For example, always mapping the UE to the closest edge node.
651
4.1 Design Goals and Approach
The primary goal driving the design of Neutrino is to provide low
control plane latency to support latency-sensitive applications
in an edge-based cellular core. Neutrino aims to provide low la-
tency under (i) normal scenarios without any failures, (ii) with CPF
failures, and (iii) in scenarios with frequent control handovers. Neu-
trino aims to provide the UEs with consistent processing under
failures: any CPF replica processing a UE traffic, always operates on
the latest UE state, guaranteeing “Read your Writes” consistency to
the mobile client. Also, Neutrino’s performance should scale well
with the number of devices and the volume of the signaling traffic.
Below, we provide an overview of the key ideas behind Neu-
trino’s design:
• Replication with Two-levels of Failure Recovery:
– Replicated UE State Store: In Neutrino, UE control state is repli-
cated to provide fault tolerance. We use a primary-backup
scheme. The replicas are updated asynchronously, resulting
in non-blocking, thus fast execution of control updates in the
non-failure case. The motivation is to add minimal delay on the
critical path of control traffic processing. Replicas are updated
after the completion of every control procedure. However, as
our synchronization protocol is non-blocking it does not ensure
that replicas are always consistent.
– Two-level Failure Recovery: To ensure consistent processing of
UE traffic, we provide two levels of failure recovery. We keep
an in-memory log of control messages at the control traffic
aggregator node, and in the event of a CPF failure, if a replica
CPF is not up to date, we replay these messages at the replica
CPF to reconstruct the lost state. In the event of a CTA failure,
the UE Re-Attaches to the network through a new CTA and
recreates a consistent UE state at a new CPF.
• Proactive Geo-Replication: To minimize overheads of control
handovers, we use proactive structured geo-replication, building
on the idea of Geographical Hash Tables [52]. The key idea is
to proactively replicate user state in a wider geographical area,
to reduce the overhead of a UE moving from one geographical
region to another. Neutrino implements this idea by using mul-
tiple consistent hash rings; these rings represent progressively
larger geographical regions, and proactively replicates UE state
in a CPF in a larger region to minimize control handover delays.
We describe the detailed procedure in §4.3.
• Fast Serialization Engine: In §3, we showed that slow control
updates can become a bottleneck in enabling latency-sensitive ap-
plications in an edge-based cellular core deployment. We show in
§6.7.4, multiple existing serialization schemes provide faster con-
trol message processing than ASN.1; we evaluate FlexBuffer [26],
Protocol Buffers [27], Fast-CDR [3], LCM [5], and FlatBuffers [28]
with ASN.1 [1]. We observe that FlatBuffers provides the best
trade-off in terms of performance and expressiveness. It signif-
icantly speeds-up message processing time and can be used to
A Low Latency and Consistent Cellular Control Plane
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
in the form of request/response message patterns. Control proce-
dures such as service establishment and handover to another BS are
composed of several control messages.
4.2.1 UE State Consistency. The UE state between the UE and
CPF needs to be consistent (see section 3.1). For example, UE and
CPF should have the same copy of the tracking area list [11], oth-
erwise, the core network (CN) may not be able to page or deliver
downlink data to the UE. This state consistency requirement for a
UE in a cellular system maps to Read your Writes consistency: The
effect of an update operation by a process (UE) on a data item 𝑥 (UE
state) will always be seen by a successive read operation on 𝑥 by the
same process (same UE) [15, 16, 19, 58, 59].
If the state of a UE is maintained at just one CPF, the Read your
Writes consistency is readily maintained. This is because, even if
the CPF fails, the control messages never have to operate on stale
data. In this case, the CPF failure event forces the UE to Re-Attach
and recreate a consistent UE state [37]. It may be noted that even
though Re-Attach is a valid option in the existing cellular systems
to maintain consistency, it can lead to long delays in data access.
4.2.2 Consistency versus Availability. To increase the availability,
our design allows replication of the UE state from the primary CPF
onto 𝑁 backup CPFs. A backup CPF takes over when the primary
CPF fails and, therefore, the replicated UE state on the backup CPFs
should remain consistent with that on the primary CPF.
If the state replication amongst the CPFs (from primary to back-
ups) is done synchronously, it will lead to failure-free overheads (in
terms of extra delays12) in the control plane, undermining the origi-
nal design goal. Therefore, Neutrino chooses asynchronous updates
of the UE state. Whenever a control procedure completes at the
primary CPF, we replicate the user state onto the backup CPFs. We
pick per-procedure state synchronization because it adds a smaller
delay in the Procedure Completion Times (PCT) as compared to
per-message synchronization (depicted in Figure15).
4.2.3 The CTA Message Log. Since the UE state updates from
the primary CPF to the backup CPFs are asynchronous, there is
no inherent consistency guarantee (similar to SCALE [14], also
see section 3.1). Thus, there may be a case that on the failure of a
primary CPF, none of the backup CPFs are up-to-date. In such a
situation, Read your Writes consistency is ensured by maintaining
a temporary message log at the control traffic aggregator (CTA).
The complete process is as follows:
(1) On receiving each control message, the CTA associates with
it a logical clock (for tracking all messages and keeping those
in order) and writes it to volatile memory. After appending
the logical clock to the message, it is also forwarded to the
primary CPF.
(2) When a control procedure completes, the primary CPF sends
state updates, for the particular UE, to all the backup CPFs
along with the logical clock of the last message of the pro-
cedure; this logical clock is used to identify the end of a
particular procedure in the log.
(3) Every replica node (backup CPFs) sends an ACK to the CTA
after successful state synchronization. Reception of the ACK
12The primary CPF would block the state write acknowledgement and, therefore, will
not be able to timely respond to the control plane messages from the UE/BS.
Figure 4: Neutrino’s system architecture diagram.
express different types of control messages, e.g., cellular control
message widely use unions and unsigned data types which are
not supported by LCM. However, for cellular control messages,
the encoded message sizes in FlatBuffers can be significantly
larger than ASN.1 messages. To address this issue, we optimize
FlatBuffers for cellular control traffic, resulting in lower encoded
message sizes and slightly faster message processing times. We
describe these optimizations in §4.4.
Resultant Architecture: Neutrino is an edge-based cellular core
design, which re-architects the implementation of the key cellular
control plane entity; referred to as Mobility Management Entity
in 4G/LTE packet core [10], and Access and Mobility Management
Function (AMF) and Session Management Function (SMF) in 5G [8].
We introduce Control Traffic Aggregator (CTA), a new addition in
our design, which is similar to a front-end load balancer between
the BS and control plane. Besides acting as a load balancer, the CTA,
in addition, helps in maintaining the state consistency. In existing
architectures, either front-end load balancers [14, 43] or the BS
itself implements load balancing [7] for control traffic, however
there is no support for state consistency.
BSs directly connect to the CTA. The CTA is responsible for (i)
message logging, (ii) forwarding traffic to/from appropriate CPF,
and (iii) CPF failure detection and recovery. CPF is the key con-
trol plane entity which (i) stores and updates user state based on
requests from the UE/BS, (ii) creates, deletes and modifies data
sessions on the key data plane entity UPF (User Plane Function),
(iii) handles UE registration and mobility across the BSs and (iv)
check-points user state on the replica CPF(s) upon procedure com-
pletion. UE’s requests are served by one CPF at a time which is
called primary CPF. An up-to-date CPF replica becomes primary
in case the primary CPF fails. Figure 4 shows the overall flow of
control traffic in Neutrino. BSs route control traffic to a nearby CTA.
CTAs are responsible for mapping requests from UEs to a CPF, and
routing responses back to the UE.
4.2 Consistency Protocol
User equipment (UE) is served by a single CPF at a time. This CPF
is responsible for updating and storing the UE state (which includes
the BS ID, data plane endpoint identifiers, and user tracking area).
UE state updates are mainly originated from the UE (or a BS on
behalf of the UE) and executed by the CPF and propagated to the