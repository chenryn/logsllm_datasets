# Obfuscation Techniques and Tools

## Data Obfuscation
- **Binary Obfuscation**: This involves altering the binary code to make it difficult to understand, while still maintaining its functionality.
- **Layout Obfuscation**: This technique scrambles the program at the source level, making it hard to follow the original logic. The International Obfuscated C Contest (ioccc.org) is a prime example of this.

### Example of Layout Obfuscation
```c
X=1024; Y=768; A=3;
J=0; K=-10; L=-7; M=1296; N=36; O=255; P=9; _=1>>BBBGGIIKK"[b]-64;C="C@=::C@@==@=:C@=:C@=:C5""31/513/5131/"
"31/531/53"[b ]-64;S=bx?(X^=Y):0,  I (x,Y/2,X)):(E=X);      }H(x){I(x,    _,0);}p;q(        c,x,y,z,k,l,m,a,          b){F(c
);x-=E*M     ;y-=S*M           ;z-=C*M         ;b=x*       x/M+         y*y/M+z
*z/M-D*D    *M;a=-x              *k/M     -y*l/M-z        *m/M;    p=((b=a*a/M-
b)>=0?(I    (b*M,_      ,0),b    =E,      a+(a>b      ?-b:b)):     -1.0);}Z;W;o
(c,x,y,     z,k,l,    m,a){Z=!    c?      -1:Z;c           0&&c!=     a&&        (p0
&&Z>=0? (e+=h*W/M,f+=i*W/M,g+=j*W/M,F(Z),u=e-E*M,v=f-S*M,w=g-C*M,b=(-2*u-2*v+w)
/3,H(u*u+v*v+w*w),b/=D,b*=b,b*=200,b/=(M*M),V=Z,E!=0?(u=-u*M/E,v=-v*M/E,w=-w*M/
E):0,E=(h*u+i*v+j*w)/M,h-=u*E/(M/2),i-=v*E/(M/2),j-=w*E/(M/2),n(e,f,g,h,i,j,d-1
,Z,0,0),Q/=2,T/=2,       U/=2,V=V0?g/8:g/     20):0,j    >0?(U=     j    *j/M,Q      =255-    250*U/M,T=255
-150*U/M,U=255    -100    *U/M):(U    =j*j     /M,UO?     O:          Q;T=TO?O:T;U=UO?O:U;}R;G;B    ;t(x,y     ,a,    b){n(M*J+M    *40*(A*x   +a)/X/A-M*20,M*K,M
*L-M*30*(A*y+b)/Y/A+M*15,0,M,0,P,  -1,0,0);R+=Q    ;G+=T;B   +=U;++a 0)
{
   puts("yes");
   exit(0);
}
puts("no");
```

## Control-Flow Obfuscation
- **Control-Flow Flattening**: This technique flattens the graphical representation of the program, causing a central piece of code to control the flow. This makes the program harder to optimize and reverse engineer.
- **Example**:
  ```c
  int x=2;
  sw: switch(x) {
     case 0: doThat();
             x = 1;
             goto sw;
     case 1: doMore();
             break; 
     case 2: doThis();
             x = 0;
             goto sw;
  }
  ```

- **Raising Bogus Exceptions**: Malware often uses this technique to obfuscate and frustrate reverse engineering. It involves setting up a try block, intentionally triggering an exception, and then resuming at the caught section.
  ```c
  try {
     volatile int trigger=20;
     doThis();
     doThat();
     /* trigger divide-by-zero exception */
     trigger=trigger/(trigger-trigger);
     neverExecutes();
  } catch (...) {
     doMore();
     doTonsMore();
  }
  ```

## Data Obfuscation
- **String Encryption**: Encrypting strings can help prevent reverse-engineering, even though strings don't directly reveal the program's logic.
- **Data Aggregation**: This technique can be used to make dead-code analysis confusing by aggregating data in a non-obvious way.
  ```c
  char aggr[7] = "fboaor";
  char foo[3], bar[3];
  int i;
  for (i=0;i<3;++i) {
     foo[i]=aggr[i*2];
     bar[i]=aggr[i*2+1];
  }
  /* foo = "foo" / bar = "bar" */
  ```

- **Dynamic Function Loading**: To prevent dead-code analysis from discovering library calls, you can use system calls like `LoadLibrary` and `GetProcAddress` on Windows, or `dlopen` and `dlsym` on Linux.

## Poor Manâ€™s Packer
- **Concept**: Combines control-flow and data obfuscation to create a simple packer.
- **Steps**:
  1. Compile the code.
  2. Disassemble the binary.
  3. Copy bytes of functions into arrays.
  4. Apply encryption, aggregation, etc.
  5. Recompile the code.
  6. Decipher at runtime.
  7. Cast as function pointers and execute.

- **Challenges**:
  - Functions are no longer in the PLT/IAT.
  - Data offsets are messed up.
  - C++ objects cause segmentation faults due to broken `thiscall`.
  - Calling conventions might change.

- **Solutions**:
  - Pass data structures containing required data.
  - Ensure calling conventions match after each step.

- **Benefits**:
  - Ultimate control over all data.
  - Code remains portable and executable.
  - Adds a layer of obfuscation.

- **Drawbacks**:
  - Increases binary size.
  - Requires significant effort.
  - Can be frustrating to craft optimized code.

## Additional Information
- **Tools**:
  - **TXL (txl.ca)**: Used for transforming source code using regular expressions.
  - **SUIF (suif.stanford.edu)**: Another tool for source code transformation.

- **Sources**:
  - M. Madou, B. Anckaert, B. De Bus, K. De Bosschere, J. Cappaert, and B. Preneel, "On the Effectiveness of Source Code Transformations for Binary Obfuscation"
  - B. M. Prasad, T. Chiueh, "A Binary Rewriting Defense against Stack Based Buffer Overflows"
  - C. I. Popov, S. Debray, G. Andrews, "Binary Obfuscation Using Signals"

---

This document provides a comprehensive overview of various obfuscation techniques, their implementation, and the tools and sources available for further study.