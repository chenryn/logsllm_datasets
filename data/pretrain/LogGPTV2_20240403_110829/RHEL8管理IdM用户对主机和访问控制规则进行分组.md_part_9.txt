    SASL SSF: 256
    SASL data security layer installed.
    ```
3.  输入 `您要`{.literal} 保留的用户的文章：
    ``` literallayout
    dn: uid=user1,cn=users,cn=accounts,dc=idm,dc=example,dc=com
    ```
4.  输入 [**modrdn**]{.strong} 作为您要执行的更改类型：
    ``` literallayout
    changetype: modrdn
    ```
5.  为用户指定 [**newrdn**]{.strong} ：
    ``` literallayout
    newrdn: uid=user1
    ```
6.  表示您要保留用户：
    ``` literallayout
    deleteoldrdn: 0
    ```
7.  [**指定新的高级 DN**]{.strong}:
    ``` literallayout
    newsuperior: cn=deleted users,cn=accounts,cn=provisioning,dc=idm,dc=example,dc=com
    ```
    保存用户会将条目移到目录信息树(DIT)中的新位置。因此，您必须将新父条目的
    DN 指定为新的高级 DN。
8.  再次按 `Enter`{.literal} 键确认这是条目的末尾：
    ``` literallayout
    [Enter]
    modifying rdn of entry "uid=user1,cn=users,cn=accounts,dc=idm,dc=example,dc=com"
    ```
9.  使用 [**Ctrl**]{.strong} + [**C**]{.strong} 退出连接。
:::
::: itemizedlist
**验证步骤**
-   通过列出所有保留的用户来验证用户是否已保留：
    ``` literallayout
    $ ipa user-find --preserved=true
    --------------
    1 user matched
    --------------
      User login: user1
      First name: First 1
      Last name: Last 1
      Home directory: /home/user1
      Login shell: /bin/sh
      Principal name: PI:EMAIL
      Principal alias: PI:EMAIL
      Email address: PI:EMAIL
      UID: 1997010003
      GID: 1997010003
      Account disabled: True
      Preserved user: True
    ----------------------------
    Number of entries returned 1
    ----------------------------
    ```
:::
:::
:::
[]{#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html}
::: chapter
::: titlepage
# []{#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts}第 6 章 为外部置备用户配置 IdM {.title}
:::
作为系统管理员，您可以配置 Identity
Management(IdM)，以支持通过外部解决方案调配用户来管理身份。
外部置备系统的管理员不必使用 `ipa`{.literal} 实用程序，而是可以使用
`ldapmodify`{.literal} 实用程序访问 IdM LDAP。[管理员可以使用 ldapmodify
或 LDIF 文件从
CLI](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#adding-an-IdM-stage-user-directly-from-the-CLI-using-ldapmodify_configuring-IdM-for-external-provisioning-of-users "使用 ldapmodify 直接从 CLI 添加 IdM 暂存用户"){.link}
添加个别阶段用户。
假设您作为 IdM
管理员完全信任外部调配系统，以仅添加经过验证的用户。但是，您不想为外部调配系统的管理员分配
`用户管理员`{.literal} 的 IdM 角色，以便他们能够直接添加新的活动用户。
[您可以配置脚本，以自动将外部调配系统创建的暂存用户移到活动用户](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#configuring-automatic-activation-of-IdM-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users "配置 IdM 阶段用户帐户的自动激活"){.link}。
本章包含以下部分：
::: orderedlist
1.  [准备身份管理(IdM)以使用外部调配系统向](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#preparing-IdM-accounts-for-automatic-activation-of-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users "准备 IdM 帐户以自动激活暂存用户帐户"){.link}
    IdM 添加暂存用户。
2.  [创建脚本](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#configuring-automatic-activation-of-IdM-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users "配置 IdM 阶段用户帐户的自动激活"){.link}，以将外部调配系统添加的用户从暂存移动到活动用户。
3.  使用外部调配系统添加 IdM 暂存用户。您可以通过两种方式完成此操作：
    ::: itemizedlist
    -   [使用 LDIF 文件添加 IdM
        阶段用户](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#adding-an-IdM-stage-user-defined-in-an-LDIF-file_configuring-IdM-for-external-provisioning-of-users "添加 LDIF 文件中定义的 IdM 阶段用户"){.link}
    -   [使用 ldapmodify 直接从 CLI 添加 IdM
        暂存用户](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#adding-an-IdM-stage-user-directly-from-the-CLI-using-ldapmodify_configuring-IdM-for-external-provisioning-of-users "使用 ldapmodify 直接从 CLI 添加 IdM 暂存用户"){.link}
    :::
:::
::: title
**其它材料**
:::
有关将 `ldapmodify`{.literal} 用作完整 IdM
管理员的示例和模板，请执行需要较高特权的用户和组管理操作，[请参阅使用
ldapmodify 在外部管理 IdM
用户](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_identity_management/using-ldapmodify-to-manage-idm-users-externally_configuring-and-managing-idm){.link}。
::: section
::: titlepage
# []{#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#preparing-IdM-accounts-for-automatic-activation-of-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users}准备 IdM 帐户以自动激活暂存用户帐户 {.title}
:::
此流程演示了如何配置供外部置备系统使用的两个 IdM
用户帐户。通过将帐户添加到具有适当密码策略的组中，您可以启用外部调配系统来管理
IdM 中的用户调配。在以下部分中，外部系统用于添加暂存用户的用户帐户命名为
[**provisionator**]{.strong}。用于自动激活暂存用户的用户帐户命名为
[**Activator**]{.strong}。
::: itemizedlist
**先决条件**
-   执行该步骤的主机已注册到 IdM 中。
:::
::: orderedlist
**流程**
1.  以 IdM 管理员身份登录：
    ``` literallayout
    $ kinit admin
    ```
2.  创建名为 [**provisionator**]{.strong}
    的用户，该用户具有用于添加暂存用户的特权。
    ::: orderedlist
    1.  添加置备程序用户帐户：
    :::
    ``` literallayout
    $ ipa user-add provisionator --first=provisioning --last=account --password
    ```
    ::: orderedlist
    1.  为调配器用户授予所需的特权。
        ::: orderedlist
        1.  创建自定义角色 `System Provisioning`{.literal}
            以管理添加阶段用户：
            ``` literallayout
            $ ipa role-add --desc "Responsible for provisioning stage users" "System Provisioning"
            ```
        2.  添加 `Stage User Provisioning`{.literal}
            特权到该角色。这个权限提供了添加阶段用户的功能：
            ``` literallayout
            $ ipa role-add-privilege "System Provisioning" --privileges="Stage User Provisioning"
            ```
        3.  将置备程序用户添加到角色中：
            ``` literallayout
            $ ipa role-add-member --users=provisionator "System Provisioning"
            ```
        4.  验证 IdM 中是否存在置备程序：
        :::
        ``` literallayout
        $ ipa user-find provisionator --all --raw
        --------------
        1 user matched
        --------------
          dn: uid=provisionator,cn=users,cn=accounts,dc=idm,dc=example,dc=com
          uid: provisionator
          [...]
        ```
    :::
3.  创建用户 [**Activator**]{.strong}，该用户具有管理用户帐户的特权。
    ::: orderedlist
    1.  添加激活器用户帐户：
        ``` literallayout
        $ ipa user-add activator --first=activation --last=account --password
        ```
    2.  通过将用户添加到默认 `User Administrator`{.literal}
        角色来授予活动器用户所需的权限：
        ``` literallayout
        $ ipa role-add-member --users=activator "User Administrator"
        ```
    :::
4.  为应用程序帐户创建用户组：
    ``` literallayout
    $ ipa group-add application-accounts
    ```
5.  更新组的密码策略。以下策略可防止帐户的密码过期和锁定，但通过要求复杂的密码来弥补潜在的风险：
    ``` literallayout
    $ ipa pwpolicy-add application-accounts --maxlife=10000 --minlife=0 --history=0 --minclasses=4 --minlength=8 --priority=1 --maxfail=0 --failinterval=1 --lockouttime=0
    ```
6.  （可选）验证 IdM 中是否存在密码策略：
    ``` literallayout
    $ ipa pwpolicy-show application-accounts
      Group: application-accounts
      Max lifetime (days): 10000
      Min lifetime (hours): 0
      History size: 0
    [...]
    ```
7.  将置备和激活帐户添加到应用程序帐户的组中：
    ``` literallayout
    $ ipa group-add-member application-accounts --users={provisionator,activator}
    ```
8.  更改用户帐户的密码：
    ``` literallayout
    $ kpasswd provisionator
    $ kpasswd activator
    ```
    需要更改密码，因为新的 IdM 用户密码会立即过期。
:::
::: itemizedlist
**其他资源：**
-   [有关添加新用户的详情，请参阅使用命令行管理用户帐户](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_identity_management/index#managing-user-accounts-using-the-command-line_configuring-and-managing-idm){.link}。
-   [有关授予用户管理其他用户帐户所需的特权的详情，请参阅针对用户委派权限](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/linux_domain_identity_authentication_and_policy_guide/index#delegating-users){.link}。
-   有关管理 IdM [密码策略的详情，请参阅定义 IdM
    密码策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_identity_management/index#defining-idm-password-policies_configuring-and-managing-idm){.link}。
:::
:::
::: section
::: titlepage
# []{#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#configuring-automatic-activation-of-IdM-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users}配置 IdM 阶段用户帐户的自动激活 {.title}
:::
此流程演示了如何创建用于激活阶段用户的脚本。系统在指定的时间间隔内自动运行
脚本。这样可确保新用户帐户自动激活并在创建后不久可用。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
该程序假定外部调配系统的所有者已经验证了用户，并且他们不需要在 IdM
侧进行额外验证，然后脚本将它们添加到 IdM。
:::
仅在一个 IdM 服务器中启用激活过程就足够了。
::: itemizedlist
**先决条件**
-   [**置备程序和 []{.strong} 激活器帐户存在于**]{.strong} IdM
    中。[详情请参阅为自动激活暂存用户帐户准备 IdM
    帐户](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#preparing-IdM-accounts-for-automatic-activation-of-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users "准备 IdM 帐户以自动激活暂存用户帐户"){.link}。
-   在运行该流程的 IdM 服务器上有 root 权限。
-   以 IdM 管理员身份登录。
-   您信任外部置备系统。
:::
::: orderedlist
**流程**
1.  为激活帐户生成 keytab 文件：
    ``` literallayout
    # ipa-getkeytab -s server.idm.example.com -p "activator" -k /etc/krb5.ipa-activation.keytab
    ```
    如果您要在多个 IdM 服务器中启用激活过程，则仅在一个服务器上生成
    keytab 文件。然后，将 keytab 文件复制到其他服务器。
2.  创建一个脚本
    `/usr/local/sbin/ipa-activate-all`{.literal}，包含以下内容以激活所有用户：
    ``` literallayout
    #!/bin/bash
    kinit -k -i activator
    ipa stageuser-find --all --raw | grep "  uid:" | cut -d ":" -f 2 | while read uid; do ipa stageuser-activate ${uid}; done
    ```
3.  编辑 `ipa-activate-all`{.literal} 脚本的权限和所有权，使其可执行：
    ``` literallayout
    # chmod 755 /usr/local/sbin/ipa-activate-all
    # chown root:root /usr/local/sbin/ipa-activate-all
    ```
4.  创建一个 systemd 单元文件
    `/etc/systemd/system/ipa-activate-all.service`{.literal}，内容如下：
    ``` literallayout
    [Unit]
    Description=Scan IdM every minute for any stage users that must be activated
    [Service]
    Environment=KRB5_CLIENT_KTNAME=/etc/krb5.ipa-activation.keytab
    Environment=KRB5CCNAME=FILE:/tmp/krb5cc_ipa-activate-all
    ExecStart=/usr/local/sbin/ipa-activate-all
    ```
5.  创建一个 systemd 计时器
    `/etc/systemd/system/ipa-activate-all.timer`{.literal}，内容如下：
    ``` literallayout
    [Unit]
    Description=Scan IdM every minute for any stage users that must be activated
    [Timer]
    OnBootSec=15min
    OnUnitActiveSec=1min
    [Install]
    WantedBy=multi-user.target
    ```
6.  重新载入新配置：