# Efficient Policy Analysis for Administrative Role-Based Access Control

## Authors
Scott D. Stoller, Ping Yang†, C.R. Ramakrishnan, and Mikhail I. Gofman†

**Affiliations:**
- Computer Science Department, Stony Brook University
- Department of Computer Science, Binghamton University

**Contact:**
- {stoller, cram}@cs.stonybrook.edu
- {pyang, mgofman1}@binghamton.edu

## Abstract
Administrative Role-Based Access Control (ARBAC) policies specify how Role-Based Access Control (RBAC) policies can be modified by administrators. Understanding the full impact of an ARBAC policy through simple inspection is challenging due to the complex interactions that can arise from sequences of changes made by different administrators. This paper introduces efficient analysis algorithms for classes of ARBAC policies that are of practical interest. We focus on user-role reachability, which determines whether a given user can be assigned to specific roles by certain administrators. Although this problem is generally intractable, we identify parameterized complexity results that show our algorithms have high complexity with respect to a small parameter \( k \) but polynomial complexity in terms of the overall input size when \( k \) is fixed.

## Categories and Subject Descriptors
- K.6.5 [Management of Computing and Information Systems]: Security
- D.4.6 [Operating Systems]: Security and Protection—Access Controls

## General Terms
- Security

## 1. Introduction
Role-Based Access Control (RBAC) is a widely used framework for managing access control [26]. It simplifies the association of permissions with users by decomposing it into two relations: user-role assignment and role-permission assignment. Additionally, role hierarchies can be defined to represent inheritance relationships.

Administrative RBAC (ARBAC) policies specify how RBAC policies can be changed by each administrator. These policies are crucial for security in organizations with multiple administrators. Several ARBAC models have been proposed [25, 23, 5, 18], and this paper focuses on the classic ARBAC97 model [25], though many of our results can be adapted to other ARBAC models.

### Importance of ARBAC Policy Analysis
Correct understanding of the current RBAC policy and the implications of its ARBAC policy is critical for system security. While ARBAC policies are specified using relatively simple rule languages, their effects can be difficult to understand without systematic analysis. Policy analysis helps by answering questions such as user-role reachability, which asks whether a given user can be assigned to specific roles by certain administrators. Unfortunately, many policy analysis problems, including user-role reachability, are intractable under various restrictions on the ARBAC policy [20, 27].

### Main Contributions
We address the challenge of analyzing useful classes of ARBAC policies despite intractability results by:
1. **General Algorithm for User-Role Reachability:** We present a general algorithm for user-role reachability analysis of miniARBAC policies, showing it is fixed-parameter tractable with respect to the number of mixed roles. The algorithm uses forward search optimized with a reduction that exploits left-commutativity of transitions.
2. **Efficient Backward-Search Algorithm:** We introduce an efficient backward-search algorithm for user-role reachability analysis for miniARBAC policies with at most one positive precondition per rule. This algorithm is fixed-parameter tractable with respect to the number of irrevocable roles and has similar tractability properties with respect to the goal size.
3. **Handling Separate Administration:** We explore two approaches to policy analysis in settings where administrative and regular roles are not disjoint, by identifying conditions under which the general problem can be reduced to policy analysis with separate administration and by extending our forward analysis algorithm.
4. **Case Studies:** We describe case studies of ARBAC policies for a university and a healthcare institution, observing structural properties and relating them to the assumptions and complexity parameters of our algorithms.
5. **Performance Evaluation:** We measure the performance of our analysis algorithms on synthetic policies to validate our parameterized complexity results and compare the performance of forward and backward analysis algorithms.
6. **Other Analysis Problems:** We consider additional analysis problems, including role containment and weakest preconditions.

## 2. Preliminaries

### 2.1 Role-Based Access Control (RBAC)
The core idea of RBAC is to assign users to appropriate roles and roles to appropriate permissions. We study policy analysis for models based on [1] and adopt a simplified model called miniRBAC, which does not support sessions.

#### miniRBAC
A miniRBAC policy \(\gamma\) is a tuple \((U, R, P, UA, PA)\) where:
- \(U\), \(R\), and \(P\) are finite sets of users, roles, and permissions, respectively.
- \(UA \subseteq U \times R\) is the user-role assignment relation.
- \(PA \subseteq P \times R\) is the permission-role assignment relation.

#### miniHRBAC
A miniHRBAC policy \(\gamma_h\) extends miniRBAC with a role hierarchy \((U, R, P, UA, PA, \leq)\) where \(\leq \subseteq R \times R\) is a partial order on roles. A user \(u\) is an explicit member of a role \(r\) if \((u, r) \in UA\). A user \(u\) is an implicit member of a role \(r\) if there exists \(r' \in R\) such that \((u, r') \in UA\) and \(r' \leq r\).

### 2.2 Administrative Role-Based Access Control (ARBAC)
ARBAC97 is a classic model for decentralized administration of RBAC policies [25]. We consider a modified version called miniARBAC, which includes only the user-role administration (URA) component. Permission to assign or revoke users from roles is specified by the relations \(can\_assign \subseteq R \times C \times R\) and \(can\_revoke \subseteq R \times R\), respectively.

#### miniARBAC
A miniARBAC policy \(\psi = (can\_assign, can\_revoke)\) specifies a transition relation between miniRBAC (or miniHRBAC) policies. Transitions are denoted by \(\gamma \xrightarrow{a} \psi \gamma'\), where \(a\) is an administrative action.

#### SMER Constraints
Static Mutually Exclusive Roles (SMER) constraints ensure that the memberships of certain pairs of roles are disjoint. These constraints are treated as negative preconditions in the \(can\_assign\) rules.

#### Separate Administration
A role \(r\) is an administrative role if it has an administrative permission, and a regular role if it has a regular permission. Our framework allows a role to be both administrative and regular, unlike earlier models that required separate administration.

### Other ARBAC Frameworks
Our focus on ARBAC97-like user-role administration is not a fundamental limitation. The ideas underlying our algorithms can be adapted to analyze other ARBAC frameworks, with some extensions needed for more complex conditions.

This structured and refined version aims to make the text more clear, coherent, and professional.