### 优化后的文本

#### 警告代码
```python
if response["auto_delete"] != auto_delete:
    print("WARN: Queue '%s' - auto_delete flag is NOT %s." % (queue_name, auto_delete))
    exit(EXIT_WARNING)

if response["durable"] != durable:
    print("WARN: Queue '%s' - durable flag is NOT %s." % (queue_name, durable))
    exit(EXIT_WARNING)
```

如果队列存在且所有标志都正确，返回 `EXIT_OK`：
```python
exit(EXIT_OK)
```

如同之前的基于 API 的健康检测程序一样，你需要通过 HTTP 连接到 API 服务器，并使用 Base64 编码的头来发送凭证。不同之处在于，该健康检测程序将请求发送到 `/api/nodes`。在发送请求后，你将处理 API 服务器的响应，如以下代码所示。你需要检查节点成员是否存在以及每个节点的内存使用情况，因此需要对包含数据和配置的节点字典进行两次遍历。

#### 清单 10.7 cluster_health_check.py：处理节点列表
```python
response = json.loads(response.read())

for node in response:
    if node["mem_used"] > mem_critical:
        print("CRITICAL: Node %s memory usage is %d." % (node["name"], node["mem_used"]))
        exit(EXIT_CRITICAL)
    elif node["mem_used"] > mem_warning:
        print("WARNING: Node %s memory usage is %d." % (node["name"], node["mem_used"]))
        exit(EXIT_WARNING)

print("OK: %d nodes. All memory usage below %d." % (len(response), mem_warning))
exit(EXIT_OK)
```

#### 第 227 页
**10.1 监控 RabbitMQ：密切关注你的集群**

在用 JSON 解码节点字典数组为对应的 Python 变量之后，你尝试将字典中的每个节点 `name` 元素与从命令行传入的期望成员的节点名称相匹配。随着迭代节点字典数组，如果字典中的 `name` 元素和期望的节点名称相匹配（并且该节点处于运行状态），则从期望节点列表中移除该名称。结果是，如果所有期望的节点都存在，则在结束遍历节点字典时，期望节点列表将为空。另一方面，如果期望节点列表中仍然有条目，则根据 `/api/nodes`，你可以知道这些节点不存在或没有运行。如果检测程序确定集群中缺失了节点，那么将退出代码设置为 `EXIT_WARNING` 并退出，不再进行其他分析。将状态设置为警告的原因在于，缺失的节点虽然会导致集群性能下降，但不会使集群无法正常工作。如果你认为缺失节点非常严重，可以将退出代码设置为 `EXIT_CRITICAL`。

一旦确认所有期望节点都存在于集群中，你将再次迭代每个节点字典，计算每个节点使用的内存大小。如果任何节点字典中的 `mem_used` 元素大于通过命令行设置的临界内存使用阈值，则将状态代码设置为 `EXIT_CRITICAL` 并退出，同时输出受影响节点当前的内存使用数据（以字节表示）。如果节点的 `mem_used` 元素未超过临界阈值但超过了警告阈值，则将以 `EXIT_WARNING` 状态代码退出，并输出受影响节点的当前内存使用情况。最后，如果所有期望的集群成员都存在，并且没有一个超过警告或临界内存使用阈值，则以 `EXIT_OK` 状态代码退出，并输出所有节点内存使用均低于警告阈值数值。

让我们运行健康检测程序，看看会发生什么：

```sh
$ python cluster_health_check.py localhost:55672 guest guest rabbit@Phantome,rabbit2@Phantome 34000000 33000000
OK: 2 nodes. All memory usage below 33000000.
$ echo $?
0
```

太棒了，你的健康检测程序确认了 `rabbit@Phantome` 和 `rabbit2@Phantome` 节点是集群中的成员，并且两者的内存使用情况均低于临界（34MB）和警告（33MB）阈值。现在，让我们来看看你的检测程序如何处理其中一个集群节点消失的情况：

```sh
$ rabbitmqctl -n rabbit2@Phantome stop_app
Stopping node rabbit2@Phantome ...
...done.

$ python cluster_health_check.py localhost:55672 guest guest rabbit@Phantome,rabbit2@Phantome 34000000 33000000
WARNING: Cluster missing nodes: ['rabbit2@Phantome']
$ echo $?
1
```

到目前为止一切顺利；你的健康检测程序不仅检测到了集群中有节点缺失，还能告诉你哪个节点缺失了。最后，你需要确定检测程序能够正确地对节点进行警告和临界内存阈值检测：

```sh
$ python cluster_health_check.py localhost:55672 guest guest rabbit@Phantome,rabbit2@Phantome 32000000 31000000
WARNING: Node rabbit2@Phantome memory usage is 31785552.
$ echo $?
1

$ python cluster_health_check.py localhost:55672 guest guest rabbit@Phantome,rabbit2@Phantome 31000000 30000000
CRITICAL: Node rabbit2@Phantome memory usage is 31834792.
$ echo $?
```

通过将临界/警告内存阈值在 32MB/31MB 和 31MB/30MB 之间切换，你可以看到当 RabbitMQ 使用超出限定的内存时，你的新检测程序能够正确检测并报告。现在你拥有一套完整的面向 Rabbit 的健康检测。它不仅能在单台 RabbitMQ 服务器不可用时告知你，还能在 Rabbit 集群缺失节点或任何成员节点快要耗尽内存时及时通知你。

但如果问题不在于 Rabbit 是否正常运作，而是在于你的应用程序是否能像预期那样正确消费消息呢？集群健康检测可以让你知道内存是否耗尽，但如果问题在于你的遛狗应用未能正确消费订单队列中的订单，在内存耗尽成为问题之前就能知道，这不是很好吗？如果你的消息容量（或大小）很低，监控特定队列中的消息数量显得更为重要，因为这可以帮助你及时发现潜在的问题。