lated when no such action occurs. The rules for fulﬁlled and
violated use cease obl as a subsidiary predicate, deﬁned by
the following rules:
cease obl(Sub, Tar, Act, Tinit, Ts, Te, T ) ←
do(Sub, Tar, Act, T ′), Ts 6 T ′ < T 6 Te.
cease obl(Sub, Tar, Act, Tinit, Ts, Te, T ) ←
do(Sub′, Sub, revoke(Sub, Tar, Act, Ts, Te), T ′),
Tinit 6 T ′ < T 6 Te.
cease obl denotes the fact that an obligation has either been
fulﬁlled or revoked. There are therefore two clauses deﬁning
cease obl. The cease obl rule for revocation makes use of the
revoke members of the sort Action, mentioned in Section 3.1;
revocation occurs when the PDP has authorized the request
for a revocation action. The subject requesting a revoca-
tion might be the one bound by the obligation, a central
administrator in the system, or an entirely diﬀerent agent
and may also be constrained by authorization policies. The
parameters of the revoke argument identify the obligation to
be revoked.
Example 3 “A connecting node should re-indentify itself
within ﬁve minutes of making a connection to a server, or
the server must drop the connection within one second.” y
This example in fact includes two obligations: one on the
node making the connection, and one on the server, which
must drop the connection if the node does not fulﬁl its obli-
gation. They can be formalized as follows:
obl(U, serv, sub2ID(U, serv), T +ǫ, T +300, T +ǫ) ←
holdsAt(node(U ), T ), do(U, serv, connect(U, serv), T ).
obl(serv, serv, disconnect(U, serv), Te, Te+1, Te) ←
violated(U, serv, sub2ID(U, serv), Ts, Te, Te).
The EC predicate holdsAt is used to represent dynamic prop-
erties of the system: in this case, which nodes are registered.
The obligation begins just (ǫ seconds) after the server con-
nects to the node.
Deﬁnition 6 An obligation policy Π is a set of obligation
rules, with the ‘fulﬁlment’, ‘violation’ and ‘cease obl’ rules,
such that Π is locally stratiﬁed.
y
Deﬁnition 7 A security policy Π = Πa ∪ Πo is any union
of an authorization policy Πa and an obligation policy Πo. y
3.4 Domain Models
We use the Event Calculus (EC) to represent and rea-
son about changing properties of the domains regulated by
policies. The EC is a well-studied, logic-based formalism,
variants of which exist both as logic programs and in ﬁrst-
order logical axioms (using a second-order axiom to enforce
a circumscriptive semantic). It has the ability to represent
concisely the eﬀect of actions on properties of a system, and
built-in support for the default persistence of ﬂuents. The
EC is used to model, analyse and implement many dynamic
systems (see [1] for a recent example, or [28] for general ref-
erences).
In the EC, eﬀects of events or occurrences are deﬁned by
two predicates initiates and terminates. initiates describes
which state properties are caused hold due to an event; and
terminates describes which properties cease holding after an
event. The rules which deﬁne the two predicates can have
conditions. Users may also deﬁne a number of state con-
straints, which have atoms of the predicate holdsAt in the
head, and which represent that a state has a given property,
if the same state has certain other properties. Core axioms
are then added, common to any EC formalization, to relate
the behaviour speciﬁcations of the initiates and terminates
axioms to state properties. These core axioms, the set EC,
are shown below.
holdsAt(F, T ) ←
initially(F ), not broken(F, 0, T ).
(3)
holdsAt(F, T ) ←
broken(F, Ts, T ) ←
terminates(Event, F, T ′),
happens(Event, T ′), Ts < T ′ < T.
(7)
The ﬁrst clause (3) speciﬁes that a changeable property of
the system holds at time T , if that property held at time 0
and nothing disturbed its default persistence. The next two
clauses (4 and 5) deﬁne how a ﬂuent representing a change-
able property comes to be true: by being initiated, either
as a consequence of an action enforced by the PDP/PEP,
or by being the result of an unregulated event occurring
in the system. The ﬁnal two clauses (6 and 7) represent
how an event disturbs the persistence of a ﬂuent, preventing
its truth from persisting over time; again, there is a clause
for disturbance caused by enforced regulated actions, and
another for disturbance caused by unregulated events. For
more details see the original formulation in [25], or for recent
approaches, [28].
To improve the analysis algorithm, we separate the predi-
cates used to represent the static portion of the system from
the predicates concerning the changing properties. The for-
mer are contained in LD
stat. As these static properties either
hold for all times or none, there is no need to model the
eﬀects of actions on their holding, and thus no need to use
the EC to reason about them.
Deﬁnition 8 A domain description D = EC ∪ D′ contains
the core axioms EC and a set D′ of formulas of any of the
three forms: a static domain axiom
A ← L1, . . . , Ln.
such that A is an atom and L1, . . . , Ln are literals of predi-
cates in LD
stat; a state constraint
holdsAt(F, T ) ← L1, . . . , Ln.
in which the L1, . . . , Ln are literals of predicates in LD
stat ∪
{holdsAt} and all Time variables in the Li are equal to T ;
or an initiates or terminates axiom
initiates(X, F, T ) ← L1, . . . , Lm, C1, . . . , Cn.
terminates(X, F, T ) ← L1, . . . , Lm, C1, . . . , Cn.
such that:
• initiates(X, F, T ), terminates(X, F, T ) ∈ LD
EC.
• Each Li is a literal of an atom in LD
stat, or else a literal
of the predicate holdsAt; each Ci is a time constraint.
initiates(Sub:Tar:Act, F, Ts), Ts < T,
do(Sub, Tar, Act, Ts), not broken(F, Ts, T ).
(4)
• Each variable appearing in a time constraint must also
appear somewhere other than in a time constraint.
holdsAt(F, T ) ←
initiates(Event, F, Ts), Ts < T,
happens(Event, Ts), not broken(F, Ts, T ).
broken(F, Ts, T ) ←
terminates(Sub:Tar:Act, F, T ′),
do(Sub, Tar, Act, T ′), Ts < T ′ < T.
• For any time argument Ti of an Li, we must have C1 ∧
· · · ∧ Cn |= Ti 6 T .
Domain descriptions must be locally stratiﬁed.
y
As an example of a common system description in policy
representation, we consider a simple subset of the RBAC
model [16]. We represent user-to-role assignment by the
ﬂuent hasRole(Subject, Role) and permission-to-role assign-
ment by hasPerm(Role, Resource, Action). The access con-
(5)
(6)
trol can then be expressed by the following axiom:
permitted(Sub, Resource, Act, T ) ←
holdsAt(hasRole(Sub, Role), T ),
holdsAt(hasPerm(Role, Resource, Act), T ).
The following axioms capture the role hierarchy inheritance:
holdsAt(subrole(R, R′), T ) ←
holdsAt(contains(R′, R), T ).
holdsAt(subrole(R, R′), T ) ←
holdsAt(contains(R′′, R), T ),
holdsAt(subrole(R′′, R′), T ).
holdsAt(hasRole(U, R), T ) ←
holdsAt(hasUser(R, U ), T ).
holdsAt(hasRole(U, R), T ) ←
holdsAt(hasUser(R′, U ), T ),
holdsAt(subrole(R′, R), T ).
One advantage of the EC is that using the same formalism
we can also express the administration of RBAC (ARBAC—
see e.g. [32]). First, we use EC rules to model the eﬀects of
user-role assignments (i.e. adding or removing assignments):
initiates(S:R:assignUser(U ), hasUser(R, U ), T ).
terminates(S:R:unassignUser(U ), hasUser(R, U ), T ).
Then we model the eﬀects of the role-permission assign-
ments:
initiates(S:R:assignPerm(T, A), hasPerm(R, T, A), T ).
terminates(S:R:unassignPerm(T, A), hasPerm(R, T, A), T ).
And ﬁnally, operations to the role hierachy:
initiates(Admin:R:addRole(R′), contains(R, R′), T ).
terminates(Admin:R:removeRole(R′), contains(R, R′), T ).
When modeling an instance of an ARBAC system, we
need to deﬁne roles, user-to-role assignment and permission-
to-role assignment for administrators to perform operations
on the RBAC system. This can be done by creating the
correct role hierarchy, user-role assignments and role per-
missions. For example,
initially(hasUser(admin, alice)).
initially(hasPerm(admin, R, assignUser(U ))).
initially(hasPerm(admin, R, unassignUser(U ))).
initially(hasPerm(admin, R, assignPerm(T, A))).
initially(hasPerm(admin, R, unassignPerm(T, A))).
initially(hasPerm(admin, R, addRole(R′))).
initially(hasPerm(admin, R, removeRole(R′))).
We now show a system trace.
In general, these are se-
quences of actions, which determine the changes in state
properties. The actions can be either policy-governed (as in
the present case), or outside the control of the policy system
(for example, a human pressing a button). The following is
an example of a system trace in which we assume there are
two roles (Medical Aid and Field Surgeon) present in the sys-
tem, but not yet in any hierarchical relationship with each
other.
do(alice:medical aid:addRole(ﬁeld surgeon, 0)
do(alice:medical aid:assignPerm(S, initialExamine), 1)
do(alice:ﬁeld surgeon:assignUser(daneeka), 2)
do(alice:ﬁeld surgeon:assignPerm(S, operate), 3)
do(alice:medical aid:assignUser(duckett), 4)
In this trace, the administrator Alice adds the role Field
Surgeon to be a sub-role to that of Medical Aid. The latter
role is then assigned the permission to perform the initial
examination of any soldier. Doctor Daneeka is assigned the
role of ﬁeld surgeon, and the role of ﬁeld surgeon is assigned
permission to operate. Finally, Nurse Duckett is assigned to
the role of medical aid. Here, as the ﬁeld surgeon role is a
sub-role of that of medical aid, the permission of perform-
ing the initial examination is inherited by the role of ﬁeld
surgeon (according to the logic of the axioms expressing in-
heritance given previously) and thus conferred on Doctor
Daneeka.
Below is a simple example of SOD in this RBAC model,
between users assiged to the roles of Medical Aid and Secu-
rity Oﬃcer.
denied(Admin, sec oﬃcer, assignUser(U ), T ) ←
holdsAt(hasUser(medical aid, U ), T ).
denied(Admin, medical aid, assignUser(U ), T ) ←
holdsAt(hasUser(sec oﬃcer, U ), T ).
Axioms for constraints and sessions and other administra-
tive operations in RBAC and ARBAC can also be expressed
in our domain description model.
3.5 Domain-constrainted Policies
We bring all the previous deﬁnitions together, to describe
our complete models of systems constrained by policies.
Deﬁnition 9 A domain-constrained policy P = Π ∪ D is
the union of a security policy Π and a domain description
D, such that P is locally stratiﬁed.
y
We use the standard stable model semantics [18] of logic
programs. To capture the operational model we start with
any set ∆D of ground instances of non-regulatory predi-
cates from the set {initially, happens} ∪ LD
stat and any set
∆π of ground instances of the regulatory predicate req. The
sets ∆D and ∆π represent information about the inputs to
the system, about events which are not controlled by the
PDP/PEP, and information about the system’s initial state,
together with facts about the unchanging (static) properties
of the regulated system. In general, diﬀerent sets ∆D, ∆π
can be thought of as representing diﬀerent initial conﬁgura-
tions and runs through the system which is governed by our
policy mechanism.
Deﬁnition 10 Let P be a domain-constrained policy (see
Deﬁnition 9). Then, a policy-regulated trace is the stable
model of ground(P ∪ ∆D ∪ ∆π).5
5Where X is a set of formulas, ground(X) is the set of ground
instances of members of X.
We let model(P ∪∆D ∪∆π) refer to the (unique) stable model
of ground(P ∪ ∆D ∪ ∆π).
y
4. POLICY ANALYSIS
4.1 Types and Examples
In this section we illustrate a number of diﬀerent analysis
tasks which can be performed within our framework.
(i) Modality Conﬂicts. A task of analysing a domain-
constrained policy P = Π ∪ D to see whether there are no
modality conﬂicts (e.g. permits and denials over the same
resource, or obligations over resources for which a subject
has no authorizations), is an instance of the more general
task of determining whether (stable) models of the domain-
constrained policy verify a number of properties. For in-
stance, we may wish to prove the following freedom from a
particular kind of modality conﬂict:
∀T (¬(permitted(sub, tar, act, T )
∧ denied(sub, tar, act, T )))
(8)
This formula states that for all times, it is not true that an
action is both permitted and denied.
If we cannot prove
this, then we wish to have diagnostic information about
the circumstances in which it fails to be true. Checking
whether the system veriﬁes this property is the task of check-
ing whether there are inputs ∆D and ∆π (see Section 3.5)
such that the property is not true, i.e. whether:
model(P ∪ ∆D ∪ ∆π) |=∃T (permitted(sub, tar, act, T )
∧ denied(sub, tar, act, T ))
This is equivalent to showing that the previous formula (8) is
false, and can be solved using Abductive Logic Programming
(with constraints—ACLP), which computes the sets ∆D and
∆π. The output of the algorithm will be these sets together
with a number of constraints (expressed as equalities and
inequalities) on the possible values of the time-arguments
appearing in the answers.