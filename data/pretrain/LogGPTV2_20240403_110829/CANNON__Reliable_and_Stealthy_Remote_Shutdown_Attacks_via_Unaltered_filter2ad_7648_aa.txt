title:CANNON: Reliable and Stealthy Remote Shutdown Attacks via Unaltered
Automotive Microcontrollers
author:Sekar Kulandaivel and
Shalabh Jain and
Jorge Guajardo and
Vyas Sekar
2021 IEEE Symposium on Security and Privacy
CANNON: Reliable and Stealthy Remote Shutdown
Attacks via Unaltered Automotive Microcontrollers
Sekar Kulandaivel,∗ Shalabh Jain,† Jorge Guajardo,† and Vyas Sekar∗
∗Carnegie Mellon University, †Research and Technology Center, Robert Bosch LLC, USA
{skulanda, vsekar}@andrew.cmu.edu, {shalabh.jain, jorge.guajardomerchan}@us.bosch.com
Abstract—Electronic Control Units (ECUs) in modern vehicles
have recently been targets for shutdown attacks, which can
disable safety-critical vehicle functions and be used as means to
launch more dangerous attacks. Existing attacks operate either
by physical manipulation of the bus signals or message injection.
However, we argue that these cannot simultaneously be remote,
stealthy, and reliable. For instance, message injection is detected
by modern Intrusion Detection System (IDS) proposals and
requires strict synchronization that cannot be realized remotely.
In this work, we introduce a new class of attacks that leverage
the peripheral clock gating feature in modern automotive mi-
crocontroller units (MCUs). By using this capability, a remote
adversary with purely software control can reliably “freeze” the
output of a compromised ECU to insert arbitrary bits at any
time instance. Utilizing on this insight, we develop the CANnon
attack for remote shutdown. Since the CANnon attack produces
error patterns indistinguishable from natural errors and does not
require message insertion, detecting it with current techniques is
difﬁcult. We demonstrate this attack on two automotive MCUs
used in modern passenger vehicle ECUs. We discuss potential
mitigation strategies and countermeasures for such attacks.
Index Terms—Automotive security, CAN bus attack, Fault
attacks, Glitching attacks
I. INTRODUCTION
Modern in-vehicle networks contain tens of Electronic Con-
trol Units (ECUs) that communicate over a shared medium
known as the Controller Area Network (CAN) bus. Some
of these ECUs that introduce new wireless connectivity (e.g.
Bluetooth, cellular, Wi-Fi), which provide a variety of services
to vehicle owners, have exposed the in-vehicle network to
external network attacks. The feasibility and ease of launching
attacks against
the CAN bus have been demonstrated by
several researchers over the past few years [1]–[4].
The lack of security in in-vehicle networks allows an
adversary with access to the CAN bus to arbitrarily insert,
modify, and delete messages, allowing an attacker to ma-
nipulate the functionality of safety-critical ECUs [1] or limit
communication over the bus [5], [6]. While traditional attacks
utilize physical interfaces to gain bus access, researchers have
demonstrated the ability to gain access remotely [4]. This
demonstration caused the recall of 1.4 million vehicles and
attracted the attention of automotive manufacturers, suppliers,
and global regulatory bodies.
As a defense against an evolving threat landscape, aca-
demic and industry researchers have proposed a variety of
techniques, such as message authentication [7], [8], intrusion
detection systems (IDSes) [9]–[12], and secure CAN hardware
solutions [13]. Considering the potential societal impact of
automotive attacks, regulatory bodies have proposed intro-
ducing legal mandates to equip future vehicles with security
features, e.g. IDSes [14]. Even hardware defenses in the form
of secure transceiver concepts [13] have been proposed to
increase security of the in-vehicle CAN bus.
Despite efforts to increase the security of automotive net-
works, a recent class of attacks demonstrates signiﬁcant ad-
versarial potential by utilizing the inherent CAN protocol
framework to shut down safety-critical ECUs. Such attacks in-
troduced by prior work [5], [6], [15] are particularly dangerous
due to their ability to disable critical vehicle functionality by
shutting down several ECUs from just a single compromised
ECU. Additionally, an adversary could use shutdown attacks to
launch advanced attacks, e.g. stealthy masquerade attacks [16],
[17]. Current shutdown attacks repeatedly trigger the error-
handling mechanism on a victim ECU, causing it to enter the
bus-off error-handling state that shuts down the ECU’s CAN
communication. This attack is achieved by either physical
manipulation of the bus [5], [6] or carefully synchronized
and crafted transmissions [15]. However, these proposals either
lack stealthiness against existing security proposals [10], [11],
[13], require physical access [5], [6], or require strict control
(e.g. synchronization) that cannot be achieved in practical
remote settings [15].
In this paper, we introduce a fundamentally different ap-
proach towards mounting shutdown attacks that, to the best
of our knowledge, can evade all existing known defenses.
Our attack is facilitated by architectural choices made to
improve the integration and efﬁciency of automotive ECUs and
their microcontroller units (MCUs). Modern MCUs typically
integrate the CAN interface controller as an on-chip (CAN)
peripheral in the same package. This design allows new inputs
to the CAN peripheral to be accessible to the application-
layer software via an application programming interface (API)
and, thus, accessible to a remote adversary that successfully
compromises an ECU.
We develop CANnon, a method to maliciously exploit one
such input, namely the peripheral clock gating functionality.
This particular API is accessible via software control in most
modern automotive MCUs, often included as a valuable feature
for performance optimization. We demonstrate how a remote
software adversary can employ CANnon to utilize the CAN
peripheral’s clock to bypass the hardware-based CAN protocol
compliance and manipulate the ECU output. This capability
DOI 10.1109/SP40001.2021.00122
195
enables the adversary to inject arbitrary bits and signals
(as compared to only being able to inject complete CAN-
compliant frames) and gain the ability to precisely shape
the signals on the CAN bus with bit-level accuracy. We
demonstrate that this capability can be used to perform reliable
and stealthy shutdown attacks. In other words, the modern
MCU design has inadvertently strengthened the capabilities
of a remote adversary, who is no longer constrained by CAN
protocol compliance.
Our main insight here is the ability to control
the pe-
to “pause” the ECU state in the
ripheral’s clock signal
middle of a transmission (or between state transitions). By
exercising this control to selectively pause and resume an
ECU’s transmission, we can insert an arbitrary bit for a
duration and at a time instance of our choice. This bit can
be used to overwrite a victim’s message and cause it to detect
transmission errors. We also illustrate that the pattern of errors
produced by CANnon is difﬁcult to distinguish from legitimate
errors on the CAN bus. Our ﬁne control over malicious bit
insertion (rather than message insertion) makes the detection
of CANnon attacks difﬁcult for currently proposed IDSes,
as current techniques typically analyze entire messages for
signs of malicious activity. Additionally, as CANnon does
not
involve spooﬁng IDs or overwriting the content of a
message, even ID-based ﬁltering at the data link layer [13]
seems incapable of detecting our attack.1 Preventing CANnon-
based attacks require either architectural-level changes, such as
isolation or removal of the clock control, or modifying existing
approaches to speciﬁcally detect CANnon-like patterns. In
Table I, we summarize existing works and contrast them with
CANnon, which we further detail in Sec. II-B.
Contributions: In summary, we contribute the following:
• We introduce new methods to exploit the peripheral clock
gating API of automotive MCUs to bypass hardware-
based CAN protocol compliance and inject arbitrary bits
on the bus. In contrast to previous work, we do not exploit
diagnostic messages [4], [18], [19] and do not have tight
synchronization requirements [15].
• We present three stealthy versions of CANnon and discuss
modiﬁcations to make CANnon stealthy against future
defenses.
• We illustrate both a basic denial-of-service (DoS) attack
and a targeted victim shutdown attack atop two mod-
ern automotive MCUs used in passenger vehicles: the
Microchip SAM V71 MCU and the STMicro SPC58
MCU. We validate the feasibility of this attack against
a 2017 Ford Focus and a 2009 Toyota Prius and achieve
a shutdown in less than 2ms.
• We propose several countermeasures to detect/prevent
CANnon attacks for legacy and future vehicles.
Organization: The remainder of this paper is organized as
follows. We provide relevant background on the CAN protocol
1Some recently proposed secure transceiver architectures use such ﬁltering,
but it is unclear from publicly available information whether they implement
additional countermeasures. We have not evaluated any such products in the
market to check their resistance against the CANnon attack.
TABLE I: Characteristics of shutdown attacks
Source
[5], [6]
[1], [2], [4]
[15]
Remote
Attack type
Direct bit injection
Diagnostic message (cid:88)
(cid:88)
Message overwrite
(cid:88)
CANnon
Reliable
(cid:88)
(cid:88)
Stealthy
(cid:88)
(cid:88)
(cid:88)
and discuss existing shutdown work in Sec. II. In Sec. III, we
detail our attack insight, and we then demonstrate two practical
applications of the attack in Sec. IV and V. We demonstrate the
attack on production ECUs against real vehicles in Sec. VI and
illustrate the stealth properties of CANnon in Sec. VII. Finally,
we propose some countermeasures in Sec. VIII, identify other
related work in Sec. IX, and discuss future directions and
conclusions in Sec. X.
Disclosure and availability: We disclosed this vulnerability
to several automotive stakeholders.2 Our conversations with
the MCU manufacturers (Tier-2 automotive suppliers) reveal
their emphasis on software hardening to prevent the adversarial
scenario required here; thus, obligations lie with the ECU
integrators (Tier-1 automotive suppliers). We have also made
the CANnon implementation using an Arduino Due board
available [20] to encourage further designs using CANnon and
to test defense strategies.
II. CAN PRELIMINARIES
We start with background on the CAN protocol and high-
light characteristics that render CAN nodes vulnerable to
shutdown attacks and discuss prior work on such attacks.
A. CAN background
Fig. 1: CAN communication stack
The CAN protocol stack as shown in Fig. 1 is composed
of the application layer, data link layer, and the physical
layer. The functionality of an ECU (e.g. engine control, driver
assistance) is described via high-level software running at
the application layer. For actuation and sensing functionality,
messages are transmitted and received by the application layer
through the lower layers of the communication stack. To send
data to another ECU, the application layer creates a CAN
message with a priority tag (also referred to as message or
arbitration ID) and its payload. The application transfers this
2We disclosed the vulnerability to the two MCU manufacturers discussed
in this paper. We also performed a broader disclosure via an industry forum.
196
ECUApplication LayerSW App.Data Link LayerCAN HWPhysical LayerCAN BusMessagesFramesBitsmessage to the CAN data link layer, where various control
and integrity ﬁelds are appended to generate a frame, which
is transmitted serially via the CAN physical layer. To receive
a message, a recipient ECU’s data link layer interprets and
validates the CAN frame prior to delivery of the message (ID
and payload) to the application layer.
a single ECU with the highest-priority frame wins access to
the bus and continues transmitting. The bus winner transmits
the rest of its frame and, for each transmitted bit, monitors that
the bus state matches the transmitted bit. During the ACK slot,
the transmitter asserts a recessive bit while all receiving ECUs
transmit a dominant bit to indicate correct reception. Finally,
the sender transmits recessive EOF and IFS bits, where the
IFS is the minimum space between two frames on the bus.
After the IFS, the bus is idle and holds a recessive state until
the next transmission. Each ECU can transmit multiple IDs,
but each ID should only originate from a single ECU.
Fig. 2: CAN physical layer
The physical
i.e.
layer of the stack,
the physical CAN
bus, consists of a broadcast communication medium between
multiple ECUs. The bus has two logical states: the dominant
(logical-0) state, where the bus is driven by a voltage from the
transmitting ECU, and the recessive (logical-1) state, where the
bus is passively set. The effective bus state is the logical-AND
of all transmitting ECUs’ outputs as illustrated in Fig. 2. ECUs
connected to the CAN bus communicate at a pre-determined
bus speed set by design based on the physical limitations of
the bus. The length of each bit is directly determined by the
set speed. For example, an ECU communicating at 500Kbps
transmits the dominant signal for 2µs to assert a logical-0.
Similar to other asynchronous protocols (e.g. Ethernet), CAN
nodes rely on frame delimiters for interpreting the start and
stop of CAN frames. Each ECU (re)synchronizes its internal
clock based on observed transitions on the bus.
Fig. 3: CAN frame format
The CAN data frame illustrated in Fig. 3 has four logical
sections: (1) arbitration, (2) data transmission, (3) acknowl-
edgement (ACK), and (4) end-of-frame (EOF) and inter-frame
spacing (IFS). Upon detection of an idle bus, an ECU initiates
the frame transmission with a dominant start-of-frame (SOF)
bit followed by the arbitration ID. Due to CAN’s asynchronous
nature, multiple ECUs may begin transmission at the same
time. While transmitting the ID, an ECU monitors the bus
state and stops transmitting if it observes a bit different from
the one transmitted. A received dominant bit during a recessive
transmission by a node indicates the transmission of a higher-
priority message by a different ECU. By the end of arbitration,
Fig. 4: Three states of error-handling mechanism
Error handling and bus-off state: Error handling is an
essential feature of the CAN protocol, providing robustness in
automotive environments. The CAN protocol deﬁnes several
types of errors; we detail two relevant error types, namely
the bit error and stuff error. A bit error occurs when the
transmitting node detects a mismatch between a transmitted
bit and the bus state (outside of the arbitration and ACK
ﬁelds). A stuff error occurs in the absence of a stuff bit,
which is a bit of opposite polarity intentionally added after
every ﬁve consecutive bits of the same polarity. When an ECU
detects an error, it transmits a 6-bit error ﬂag on the bus that
can destroy the contents of the current frame. Depending on
the error state of the ECU, the ﬂag may be a sequence of
recessive or dominant bits. Each ECU maintains error counters
that are incremented upon a transmission error3 detection and