To reduce this number we run the update module on the current
taxonomy and without any expansion rules. The updated taxonomy,
tagging rules, and expansion rules reduced the samples with an
unknown tag from 65% to the 16% shown in Table 4.
Table 6 summarizes the update module results. Since we only
have the same family ground truth used in AVclass, we use the
default values suggested in that work of ùëõ = 20 and ùëá = 0.94 [35].
The co-occurrence statistics output by the labeler contain 30,107
relations, of which 968 are strong. Those 968 relations belong to
11 category pairs, the most popular being UNK ‚áí CLASS (61%),
UNK ‚áí UNK (17%), UNK ‚áí BEH (9%), UNK ‚áí FAM (7%), FAM
‚áí CLASS (2%), and UNK ‚áí FILE (2%). The other five category
pairs had at most 0.3% relations each. Overall, 96% of the strong
relations involve an unknown token.
From those 968 strong relations, the update module automati-
cally identified 486 new taxonomy entries, 216 new tagging rules,
and 461 expansion rules. Of the new taxonomy entries, 97% cor-
respond to new families. The other 3% are file properties, mostly
Android exploits, e.g., FILE:exploit:asroot, FILE:exploit:exploid, and
FILE:exploit:gingerbreak. The new expansion rules link families to
their class or behavior. The most popular destination tags are: gray-
ware (46%), adware (26%), infosteal (8%), and downloader (6%).
At the end of the update module processing, there remain only
three strong relations (0.3%) for which no updates are generated
because they lack a processing rule. For these relations the analyst
would have to manually decide how to handle them. The first is
FILE:patch ‚áí CLASS:grayware. This is an example of an homonym,
i.e., a token with two possible meanings. In our seed taxonomy, ob-
tained from the AVclass generics, we manually (incorrectly) classi-
fied patch as a file type. But, this relation automatically extracted by
the update module allowed us to understand that the tag is used for
modding apps (e.g., Lucky Patcher2) that patch other apps for unlim-
ited access, no ads, etc. This allowed us to correct our error making
patch an alias for BEH:filemodify. Another homonym we incorrectly
classified in our seed taxonomy is fakedoc, which we though meant
a fake document, but the update module identified that battery-
doctor ‚áí FILE:fakedoc, indicating fakedoc is instead a rogueware
family (fakedoctor). The other two unhandled relations are due to
over-fitting of a particular family. Relation FILE:proglang:powershell
‚áí CLASS:keylogger is due to a keylogging family that uses Pow-
ershell scripts and relation BEH:inject ‚áí CLASS:downloader to a
downloader family that injects in other processes. Since they are
not general enough, we ignore both relations.
Update quality. To evaluate the quality of the generated updates,
we manually examine the resulting taxonomy, tagging, and expan-
sion rules looking for errors based on our domain knowledge and
Web searches. We acknowledge that this process is subjective and
may not spot all errors, but it is the best ground truth we were able
to obtain. We identify 11 cases were we would have done things dif-
ferently than the update module. First, five family tags should likely
be classes/subclasses (bankbot, clickfraud, fakeantivirus, locker, re-
moteadmin). In addition, trojandldr was marked as a family tag with
an expansion rule trojandldr ‚áí downloader, but making the expan-
sion rule a tagging rule would have been cleaner. One challenge is
distinguishing the name of an exploit (file property) from a family
that uses an exploit. In most cases the update module is correct,
but FILE:exploit:rootmaster should likely be FAM:rootmaster with
an expansion rule rootmaster ‚áí exploit. There is also one tagging
rule cryptominer ‚áí coinhive where cryptominer should likely be
an alias for CLASS:miner. One new file property in the taxonomy
2https://www.luckypatchers.com/
AVclass2: Massive Malware Tag Extraction from AV Labels
ACSAC 2020, December 7‚Äì11, 2020, Austin, USA
Table 6: Update module evaluation results with ùëõ = 20 and ùëá = 0.94.
Relations
Taxonomy Entries Tagging Rules
Dataset
Andropup
All
30,107
Strong Out Added
486
968
3
Rem. Added Rem. Added
461
216
10
2
Expansion Rules
Rem.
0
FILE:proglang:java:genericgba is likely a generic token. And, an-
other file property FILE:packed:decrypter does not look like any
known packer, so we are not sure what it exactly represents. Fi-
nally, FILE:testvirus:testfile would be better as a tagging rule testfile
‚áí testvirus.
In summary, out of 1,163 updates to the taxonomy and rules,
only 11 (0.9%) required adjustments. Additionally, three relations
had to be checked, allowing us to correct errors with homonyms
introduced in the manual creation of the seed taxonomy.
5.4 Beyond Family Labeling
The main benefits of AVclass2 over prior family labeling tools are
that it enables tag-based searches beyond families, and it builds
malware knowledge generalizing beyond individual samples.
Search. The tags output by AVclass2 enable advanced searches
on a malware repository. The 975 tags identified in the Superset,
can be used, among others, to identify samples that are grayware,
belong to a specific class (e.g., ransomware, information stealers),
send SMS, launch DoS attacks, use a specific packer (e.g., themida,
asroot), or installer software (e.g., nsis, wiseinstaller) software. Those
samples can then be used to build classifiers.
We examine how the extracted tags compare with those already
used by VirusTotal. The VT documentation mentions 335 tags,
mostly corresponding to file properties and behaviors [37]. Those
335 tags do not include family names or classes (save for worm and
emailworm). Of those 335 tags, we observe 259 in the reports of
samples in the Superset. Of those VT tags, 49 are identical to tags
in our default taxonomy with the largest types being 30 packers, 4
programming languages, and 4 file types. Thus, the tags output by
AVclass2 nicely complement the ones already in use by VT. Since
AVclass2 already operates on VT reports, adding AVclass2‚Äôs tags
to VT would be straightforward and would enable new searches not
currently possible such as those for samples of a particular malware
class or family, as well as searches for a richer set of file properties
and behaviors. This highlights the benefit of AVclass2‚Äôs automatic
tag extraction to popular malware repositories.
Knowledge base. AVclass2 taxonomy, tagging rules, and expan-
sion rules form a malware knowledge base that capture relations
beyond individual samples such as which families are ransomware
or information stealers. Compared to existing online malware en-
cyclopedias, its contents have been obtained using a well-defined
methodology; are not specific to one vendor; and since they are
publicly available, can be discussed and evolved collaboratively.
Furthermore, AVclass2‚Äôs update module allows to refine the knowl-
edge base over time keeping it up-to-date.
5.5 Family Labeling Comparison
This section compares AVclass2 with AVclass and Euphony for
family labeling. The goal is not to evaluate AVclass2 for family
labeling, as an analyst that only requires family labeling, but not
the additional malware and threat intelligence AVclass2 provides,
does not need to use AVclass2, as it does not significantly differ
from AVclass for that task. Instead, the comparison allow us to (1)
evaluate AVclass versus Euphony (not done in the original works),
(2) highlight the importance of the update module, and (3) show
our vision for using AVclass2 and AVclass.
For the comparison, we use the most recent versions of Eu-
phony and AVclass at the time of writing. and the Windows and
Android datasets with ground truth. While Euphony was only eval-
uated on labels of Android samples, its processing is equally valid
for Windows. For AVclass2, we use its AVclass compatibility op-
tion, which selects as the sample‚Äôs family the highest ranked family
tag or unknown token. For AVclass, we use the most recent aliases
and generics in its repository. We also include in the comparison
AVclass*, a modified version of AVclass that takes as input the
taxonomy and tagging rules from AVclass2, instead of the alias and
generic files in the AVclass repository. AVclass* extracts from the
taxonomy and tagging rules the list of aliases and generic tokens
AVclass needs. The reason to include AVclass* is to compare AV-
class2 and AVclass on the same input knowledge base, ignoring
any differences due to the knowledge base of AVclass2 being more
up-to-date.
Results of the four tools, run on the same server, are in Table 7.
For each tool and dataset it shows the runtime in seconds, the
percentage of samples with a family, and the accuracy (precision,
recall, F1 score) when the results are compared with the available
ground truth. Given that these are old datasets with large average
number of detections per sample, all tools output a label for almost
all samples. AVclass2 and AVclass* achieve the highest F1 score
on four of the five datasets, while AVclass ranks first on Malheur.
Euphony‚Äôs accuracy drops significantly on the larger datasets from
89%-91% on Malheur and Drebin down to 59%-73% on Malsign,
Malicia, and AMD. AVclass2 and AVclass do not show such drop.
AVclass is the fastest, followed by AVclass2, with Euphony being
from 7 to 34 times slower than AVclass. Furthermore, we tested
Euphony on the larger datasets without ground truth and for those
larger than 1M samples, it did not terminate in 48 hours or crashed
with an out of memory exception (on a server with 126 GB RAM).
In summary, AVclass is more accurate and 7x‚Äì34x faster than
Euphony. Furthermore, Euphony does not scale to large datasets
due to its large memory usage. AVclass* and AVclass2 have the
same accuracy, but AVclass2 is slower due to the extra processing
to extract more tags. Thus, there is no reason to use AVclass2
over AVclass for family labeling, as long as both tools use the
same input knowledge. Without providing updated data files to
AVclass, AVclass2 would outperform it, despite the family labeling
functionality being identical. This highlights the importance of the
update module.
ACSAC 2020, December 7‚Äì11, 2020, Austin, USA
Silvia Sebasti√°n and Juan Caballero
Table 7: Family labeling comparison between AVclass2, AVclass, and Euphony on datasets with ground truth. T is in seconds.
Dataset
Malsign
AMD
Malicia
Malheur
Drebin
T
205
44
20
2
5
AVclass2
Fam Prec Rec
99%
100%
100%
100%
100%
F1
92% 92%
80% 86%
60% 74%
94% 92%
96% 95%
91%
92%
95%
91%
94%
AVclass *
Fam Prec Rec
99%
100%
100%
100%
100%
F1
92% 92%
80% 86%
60% 74%
94% 92%
96% 95%
91%
92%
95%
91%
94%
T
139
50
14
1
8
AVclass
Fam Prec Rec
100%
100%
100%
100%
100%
F1
90% 90%
76% 83%
61% 74%
98% 94%
89% 92%
90%
92%
95%
91%
96%
T
139
50
14
1
8
Euphony
Fam Prec Rec
97%
100%
100%
100%