title:COPE: traffic engineering in dynamic networks
author:Hao Wang and
Haiyong Xie and
Lili Qiu and
Yang Richard Yang and
Yin Zhang and
Albert G. Greenberg
COPE: Trafﬁc Engineering in Dynamic Networks
Hao Wang(cid:2) Haiyong Xie(cid:2) Lili Qiu†
Yang Richard Yang(cid:2) Yin Zhang† Albert Greenberg§
AT&T Labs – Research§ Univ. of Texas at Austin† Yale University(cid:2)
{hao.wang,haiyong.xie,yang.r.yang}@yale.edu
{lili,yzhang}@cs.utexas.edu
PI:EMAIL
ABSTRACT
Trafﬁc engineering plays a critical role in determining the perfor-
mance and reliability of a network. A major challenge in trafﬁc en-
gineering is how to cope with dynamic and unpredictable changes
in trafﬁc demand. In this paper, we propose COPE, a class of traf-
ﬁc engineering algorithms that optimize for the expected scenarios
while providing a worst-case guarantee for unexpected scenarios.
Using extensive evaluations based on real topologies and trafﬁc
traces, we show that COPE can achieve efﬁcient resource utiliza-
tion and avoid network congestion in a wide variety of scenarios.
Categories and Subject Descriptors: C.2.2 [Computer Commu-
nication Networks]: Network Protocols; C.2.3 [Computer Commu-
nication Networks]: Network Operations—Network Management
General Terms: Algorithms, Design, Management, Performance,
Reliability.
Keywords: COPE, Trafﬁc Engineering, Unpredictable Trafﬁc, Op-
timization, Oblivious Routing.
1.
INTRODUCTION
Trafﬁc engineering (TE) has become an indispensable tool used
by many autonomous systems (ASes) to select routes which effec-
tively utilize their network resources. This is particularly important
given the high cost of network assets and the highly competitive na-
ture of the Internet ISP market [8, 9, 46]. The importance of trafﬁc
engineering has motivated many studies in the last few years, and
quite a few trafﬁc engineering algorithms were recently proposed
(e.g., [4, 6, 7, 19, 22, 23, 24, 25, 26, 27, 34, 36, 44, 48, 49, 50, 54]).
Trafﬁc characteristics are a major factor affecting the design of
trafﬁc engineering algorithms. Unfortunately, for many ASes, al-
though their trafﬁc demand can be relatively stable most of the
time, there exist time periods during which trafﬁc can be highly
dynamic, containing unpredictable trafﬁc spikes that ramp up ex-
tremely quickly, leaving no time for a trafﬁc engineering algorithm
to re-compute or adjust. We recently examined the trafﬁc traces
of several backbone networks and found that there exist short time
periods during which trafﬁc demand can increase by at least one
order of magnitude. Highly unpredictable trafﬁc variations have
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’06, September 11–15, 2006, Pisa, Italy.
Copyright 2006 ACM 1-59593-308-5/06/0009 ...$5.00.
also been observed and studied recently by other researchers (e.g.,
[27, 37, 38, 41, 47, 54]). To further conﬁrm the likelihood of ob-
serving highly unpredictable trafﬁc spikes in real-life, we surveyed
the operators of some large ASes and received reports of highly un-
predictable trafﬁc patterns in their daily operations. Many factors
contribute to the highly unpredictable nature of Internet trafﬁc: out-
breaks of worms/viruses, outages or routing changes of major ISPs,
the occurrence of natural disasters, denial-of-service attacks, and
ﬂash-crowd effects due to major news events. For many cases, traf-
ﬁc spikes occur exactly when the networking service is most valu-
able! In addition, with more bursty UDP-based multimedia traf-
ﬁc, more dynamic trafﬁc such as that from overlay networks [30],
and more networks adopting trafﬁc engineering, variability in traf-
ﬁc could increase further.
It is important that trafﬁc engineering handle sudden trafﬁc spikes.
If a trafﬁc engineering algorithm is not prepared for them, it may
cause network links and routers to be unnecessarily overloaded.
Overloaded links and routers can cause long delay, high packet loss
rates, reduced network throughput (e.g., TCP ﬂows), BGP session
reset, and even router crashes. These reduce network reliability
and efﬁciency, and may violate increasingly stringent service level
agreements (SLAs), leading to potential ﬁnancial penalties.
Despite the importance of handling trafﬁc spikes, most of the
proposed trafﬁc engineering algorithms belong to a type of algo-
rithms which we call prediction-based TE, and these algorithms
optimize their routing without preparing for unpredictable trafﬁc
spikes. Such an algorithm ﬁrst collects a set of sample trafﬁc ma-
trices, and then computes a routing to optimize the performance,
based only on these samples. For instance, the algorithm can op-
timize for the average or the worst-case cost over these samples.
An advantage of this type of algorithms is their potential perfor-
mance gain. When the network trafﬁc is relatively stable and the
real trafﬁc is similar to the samples based on which the routing is
computed, these algorithms can achieve near-optimal performance.
However, since these algorithms optimize routing speciﬁcally for
these samples, when the real trafﬁc deviates substantially from the
samples (e.g., during the presence of trafﬁc spikes), the computed
routing may perform poorly. An extreme case of prediction-based
TE is online adaptation. An advantage of this scheme is that if it
can converge quickly, it does not need to collect many samples or
make prediction. However, when there are signiﬁcant and fast traf-
ﬁc changes, such a scheme can experience a large transient penalty.
As motivation, we show using real trafﬁc traces that when ISPs
use prediction-based TE and unexpected trafﬁc spikes occur, the
trafﬁc intensity of some links may well exceed their link capacities.
For example, using the real Abilene topology and trafﬁc traces, we
show that for bottleneck links, the trafﬁc intensity generated by all
three prediction-based algorithms we evaluated exceeds link capac-
ity during trafﬁc spikes, and some reaches 2.44 times link capacity,
while for an optimal algorithm, no link receives trafﬁc above 50%
of its capacity. Such large performance penalties arise when actual
trafﬁc demands deviate signiﬁcantly from prediction. Therefore, it
is important that a trafﬁc engineering algorithm is robust when such
deviations occur.
One way to deal with unpredictable trafﬁc spikes is oblivious
routing (e.g., [6, 7, 27, 42, 54]). In oblivious routing, a routing
that is independent of the trafﬁc matrix is computed, and thus has
the potential to handle trafﬁc spikes well. A potential drawback
of oblivious routing, however, is its sub-optimal performance for
normal trafﬁc, which may account for the vast majority of time
periods. For example, the optimal oblivious ratio of arbitrary sym-
metric networks can grow logarithmically as they scale up [7]. Re-
cently, Applegate and Cohen [7] computed the oblivious ratio of
several real network topologies. Although they discovered that the
ratio is typically only around 2, they also commented that overhead
at this level “is far from being negligible to working ISPs.”
Besides rapid trafﬁc ﬂuctuations, interdomain routing poses an-
other set of challenges to trafﬁc engineering. First, interdomain
routing introduces point-to-multipoint demand; that is, there can be
multiple equally-good egress points for some external destinations
in the BGP decision process [17]. Thus, it is up to the intrado-
main routing determined by trafﬁc engineering to break the tie.
Since egress links may become the bottlenecks of the network [16],
this tie-breaking can affect the congestion of the network. Second,
although interdomain routes for most trafﬁc volumes can be sta-
ble [32, 51], there are BGP routing changes that can cause signiﬁ-
cant shifts of trafﬁc [37]. In particular, with the dynamic nature of
the global Internet, the available interdomain routes of an AS can
ﬂuctuate as its peers announce and withdraw interdomain routes,
or even reset their eBGP sessions. Thus, the intradomain routing
determined by trafﬁc engineering should be robust against such in-
terdomain route changes.
In this paper, we propose novel trafﬁc engineering algorithms
to handle both dynamic trafﬁc and interdomain routing. Our key
insight is that we can use an efﬁcient and easily implementable
technique to guarantee worst-case performance under all trafﬁc de-
mands. By choosing a worst-case guarantee that is just a small
percentage above lowest possible, we can optimize routing for pre-
dicted demands, and signiﬁcantly improve common-case perfor-
mance.
Based on this insight, we design a new class of trafﬁc engineer-
ing algorithms, called Common-case Optimization with Penalty En-
velope (COPE). Our algorithms combine the best of oblivious rout-
ing and prediction-based optimal routing. The penalty bound com-
ponent of COPE is inspired by the pioneering work of oblivious
routing [7]. Thus, COPE can bound the worst-case performance
penalty to ensure acceptable performance when the network expe-
riences unpredictable changes. But unlike oblivious routing, COPE
optimizes routing for predicted demands to achieve high efﬁciency
under normal network conditions. Therefore COPE can achieve
close-to-optimal performance in the common case in our real traf-
ﬁc traces, whereas oblivious routing can be 30% - 90% worse than
optimal.
We extend COPE to deal with interdomain routing. To handle
the point-to-multipoint nature of interdomain demands and the dy-
namics of interdomain routes, we compute routing that is robust to
changes in interdomain routes and yet responsive to trafﬁc patterns.
The rest of the paper is organized as follows. In Section 2, we
overview the related work. In Section 3, we present common-case
optimization with penalty envelope (COPE). In Section 4, we com-
pare the performance of COPE with the state-of-art approaches us-
ing real trafﬁc traces and network topologies. We further extend
COPE to handle interdomain routing, and describe our preliminary
results in Section 5. We conclude in Section 6.
2. RELATED WORK
There is a large body of literature on trafﬁc engineering. In the
interest of brevity, we review only the most related work.
Intradomain trafﬁc engineering has received signiﬁcant attention
in the research community. Many interesting trafﬁc engineering
algorithms and mechanisms have been proposed. Due to the ﬂexi-
bility and increasing popularity of MPLS [46], many recent studies
focus on MPLS-based trafﬁc engineering. We broadly classify this
work into the following two categories: (i) trafﬁc engineering for
predicted trafﬁc demands, and (ii) oblivious routing.
The algorithms in the ﬁrst category share the following features:
they maintain a history of observed trafﬁc demand matrices, and
they optimize for the representative trafﬁc demand matrices ex-
tracted from the observed trafﬁc during a certain history window.
For example, Sharad et al. [4] use a trafﬁc matrix in a one-hour
window during daily peaks as the representative demand. Zhang et
al. [49, 50] consider multiple representative trafﬁc matrices and
ﬁnd an optimal set of routes to minimize expected or worst-case
cost for these representative matrices. Note that in their approach,
the worst case is only among the samples, not all possible traf-
ﬁc matrices. In [52], Zhang and Ge try to identify critical matri-
ces from past history, and then conduct trafﬁc engineering based
on these matrices. It might be possible to extend prediction-based
optimization using robust optimization (e.g.,
[14]), but it will be
challenging to estimate the variation set of parameters. MATE [19]
and TeXCP [26] conduct online trafﬁc engineering and react to in-
stantaneous trafﬁc demands. An advantage of these dynamic al-
gorithms is that if they can converge quickly, they do not need to
collect many samples or make prediction. However, when there are
signiﬁcant and fast trafﬁc changes, these algorithms can experience
a large transient penalty, as we will show in Section 4.
The second category of algorithms is oblivious routing (e.g., [6,
7, 10, 11, 27, 28, 31, 42, 54]).
In oblivious routing, routes are
computed to optimize the worst-case performance over all trafﬁc
demands. Therefore the computed routes are prepared for dynamic
changes in trafﬁc demands. In their pioneering work [7], Applegate
and Cohen propose an efﬁcient algorithm to compute the worst-
case oblivious routing for real networks. They also extend oblivi-
ous routing to compute failure scenarios [6]. They found that the
oblivious ratio is typically around a factor of 2. A penalty as high as
100% may be acceptable when trafﬁc demands are completely un-
predictable, but it is a high cost to pay under predictable demands.
In other words, oblivious routing takes a pessimistic point of view
and may not be appropriate in relatively stable periods or stable
networks.
Our approach is inspired by both prediction-based routing and
oblivious routing, and combines the best of both approaches.
It
optimizes routing for predicted demands to achieve high efﬁciency
under normal network conditions; in the meantime it also bounds
the worst-case performance penalty to ensure acceptable perfor-
mance when the network experiences unpredictable changes.
There are also recent studies on the interaction of intradomain
trafﬁc engineering with interdomain routes and trafﬁc. Examples
include evaluation (e.g., [3, 37, 39, 40, 45]) and design (e.g., [16,
20, 21, 22]). Recently, researchers observed that intradomain trafﬁc
engineering within an AS can cause substantial trafﬁc changes out-
side the AS (e.g., [4, 15, 37]). For example, Agarwal et al. report
in [4] that for an operational tier-1 ISP, intradomain trafﬁc engineer-
ing can cause up to 25% of its trafﬁc to a neighboring AS to shift
the exit point. Such trafﬁc changes could trigger routing changes
at the neighboring AS, and result in network instability. Motivated
by these studies, we further extend COPE to handle interdomain
routing.
3. OPTIMAL TE WITH TOLERANCE
In this section, we focus on a single AS. We assume that the
egress point of each external destination is known and ﬁxed. We
will extend to the case of interdomain routing in Section 5.
3.1 Background Deﬁnitions
One major objective of the trafﬁc engineering of an AS is to de-
termine routing so as to minimize congestion. For concreteness, in
this paper we measure network congestion using metrics based on
maximum link utilization (MLU), as it is a commonly used metric
in many studies (e.g., [4, 6, 7, 26]). Another possibility would be
to use network cost [24, 25] to measure congestion. Our scheme
is directly applicable to optimizing for this alternative metric. We
will discuss generalization in Section 3.3.
An AS is represented by a graph G = (V, E), where V is the set of
routers, and E is the set of network links. The capacity of link (i, j)
from node i to node j is denoted by c(i, j). For intradomain routing,
we assume that the graph is stable during the operation. When
the network topology changes (e.g., a link that carries substantial
amount of trafﬁc fails), the routing computed by trafﬁc engineering
is no longer valid and has to be updated. For important intradomain
links, a good recovery strategy is to pre-compute routing for each
failure scenario [6]. Our COPE algorithms can be extended to deal
with such scenarios.
The input to trafﬁc engineering is trafﬁc demand matrices (TM).
We represent a TM as a set of trafﬁc demands D = {dab|a, b ∈ V},
where dab is the demand for the origin-destination (OD) pair a → b.
The output of trafﬁc engineering is routing. Since around half
of the ISPs run MPLS in their core [26], and more ASes are start-
ing to deploy MPLS, we focus our study on MPLS-based routing.
Slightly different from MPLS-style path routing, we use link-based
routing [7, 13]. A link-based routing f is speciﬁed by a set of val-
ues f = { fab(i, j)|a, b, i, j ∈ V}, where fab(i, j) speciﬁes the frac-
tion of demand from a to b that is routed over the link (i, j). One
can convert link-based routing to standard MPLS path-based rout-
ing [5, 29], to shortest-path implementable routing [44], and to
OSPF equal weight-split routing [36]. As we show in Appendix,
we can incorporate shortest-path implementation considerations by
adding penalty terms into performance metrics. Unless otherwise
stated, routing refers to link-based routing in this paper.
For f to be a routing, the values of fab(i, j) for the OD pair a → b
should specify a ﬂow of value 1 from a to b. For an actual demand
dab for the OD pair a → b, the contribution of this demand to the
ﬂow on a link (i, j) is dab fab(i, j). The constraints on the rout-
ing variables { fab(i, j)} are ﬂow conservation and non-negativity,
which can be deﬁned by the following equations:
⎧⎨
⎩
∀a (cid:5)= b,∀i (cid:5)= a, b : ∑(i, j)∈E fab(i, j)− ∑( j,i)∈E fab( j, i) = 0;
∑(a, j)∈E fab(a, j)− ∑( j,a)∈E fab( j, a) = 1;
∀a (cid:5)= b :
∀(i, j) ∈ E :
fab(i, j) ≥ 0.
(1)
The maximum link utilization (MLU) of a routing f on a TM D
is deﬁned as the maximum of trafﬁc to capacity ratios of all links:
U( f , D) = max
(i, j)∈E
dab fab(i, j)
c(i, j)
.
∑
a,b
(2)
An optimal routing for a given TM D is a routing that minimizes
the maximum link utilization. Formally, the optimal utilization for
a TM D is given by
OU(D) = min
f is a routing
U( f , D).
(3)
The performance ratio of a given routing f on a given TM D is
deﬁned as
P( f , D) = U( f , D)
OU(D) .
(4)
It measures how far the routing f is from being optimal on TM D.
P( f , D) = 1 indicates that the routing f is optimal. A higher ratio
indicates that the performance is farther away from the optimal.
To account for ﬂuctuations in network trafﬁc, we may consider
multiple trafﬁc demand matrices. Given a set of TMs D, there are
multiple ways to extend a performance metric deﬁned on a single
TM D to the set D. Since our objective is on robustness, we con-
sider the worst case extension of U( f , D) and P( f , D).
Extending U( f , D), we deﬁne the maximum MLU of a routing f
on the set D as
U( f ,D) = max
D∈D
U( f , D).
(5)
We refer to a routing that minimizes the maximum MLU on D as
an MLU optimal routing on D, and the corresponding maximum
MLU as the optimal MLU on D.
Extending P( f , D), we deﬁne the maximum performance ratio
of a routing f on the set D as
P( f ,D) = max
D∈D
P( f , D).
(6)
We refer to a routing that minimizes the maximum performance
ratio on D as a performance-ratio optimal routing on D, and the
corresponding maximum performance ratio as the optimal perfor-
mance ratio on D. When D is the complete trafﬁc demand space
containing all non-negative trafﬁc demands, the performance-ratio
optimal routing is referred to as the oblivious routing, and the opti-
mal performance ratio is referred to as the oblivious ratio.
3.2 Optimal TE with Convex-Hull Prediction
We start with a type of robust prediction-based TE algorithms.
Assume that a trafﬁc engineering system has collected a set of TMs
{D1, . . . , DH} during some time interval, where H is the number of
TMs collected. To compute the routing for the next interval, the
TE system needs to predict the TM that may appear during the next
interval. There can be many predictors. A large class of predictors
(e.g., exponential moving average) essentially estimate the TM of
the next interval as a convex combination of the previously seen
TMs. Aggregating the predictions of all such predictors, we obtain
the convex hull of {D1, . . . , DH}.
Let D be the convex hull of the set of TMs {D1, . . . , DH}. More
speciﬁcally, the convex hull can be constructed using convex com-
binations of the TMs in D, namely, ∑thDh, where th is a coefﬁcient
between 0 and 1, ∑h th = 1, and Dh is the h-th trafﬁc matrix. Then
the problem of optimal TE with convex-hull prediction is to com-
pute the MLU or performance-ratio optimal routing over the set D.
One advantage of a convex-hull-based predictor is its monotonic-
ity (i.e., if the convex hull is continuously maintained, it will always
grow). Speciﬁcally, the monotonicity property leads to the follow-
ing stability result:
PROPOSITION 1. If interdomain BGP stability condition (e.g.,
[43]) is satisﬁed, then intradomain trafﬁc engineering using convex
hull eventually converges.
3.3 Common-Case Optimization with Penalty
Envelope (COPE)
The convex-hull-based TE is effective when future demands fall
into the convex hull. However, trafﬁc ﬂuctuation may make fu-
ture demands fall outside the convex hull.
In this case, the per-