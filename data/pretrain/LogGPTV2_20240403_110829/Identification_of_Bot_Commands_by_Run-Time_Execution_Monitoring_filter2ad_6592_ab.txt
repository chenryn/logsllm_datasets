### Windows OS and Bot Analysis

Bots interact with the Windows operating system by invoking functions through the Application Programming Interface (API), which is available to applications in the form of dynamically-linked libraries (DLLs). For analysis, both the sequence and timing of API calls are crucial. Each intercepted API call is recorded along with the time it was intercepted during the program's execution.

#### Interception of API Calls

Intercepting all API calls could significantly impact performance, potentially interfering with bot execution. A more practical approach is to intercept only a subset of system calls that are critical for bot command analysis. K. Jain and R. Sekar [13] developed a user-level system call interposition infrastructure for Linux, suggesting the monitoring of a limited set of system calls for intrusion detection, demonstrating significant performance benefits. Similarly, we propose to hook only a specific set of Windows API calls, referred to as ComAPI ("Common API" in Figure 1).

The ComAPI set was derived through static analysis of actual bot binaries using the method described in [11]. This analysis identified approximately 300 commonly-used API functions from 50 real bot instances. Of these, 153 APIs were found in `kernel32.dll`, while the rest were in `user32.dll`, `advapi32.dll`, `ws2_32.dll` (or `Wsock32.dll`), and other DLLs. It is important to note that a single user-level API call can result in zero, one, or multiple native API or core system service calls. For example, the `DeleteFile` call in `kernel32.dll` invokes several system service calls, such as `NtOpenFile`, `NtSetInfoFile`, and `NtCloseFile`.

### Statistical Correlation

The motivation for this approach is based on two key insights from the investigation of real bot instances:
1. **Similar Purpose, Similar API Calls**: Despite superficial differences, if two bot commands have the same purpose, their API calls and execution timing will be very similar.
2. **Consistent Execution Patterns**: The API function calls executed by the same bot command, regardless of the bot family, typically show little variation. This consistency may be due to code reuse, imitation of functionality, the popularity of widely used compilers and libraries, and the desire for efficient coding.

Let \( X \) and \( Y \) be different bots executing two bot commands with the same purpose. During the execution of each command, many API calls in ComAPI will be intercepted from both bots. Suppose the command identifier produces two semantic units \( W \) from many execution traces (for a specified value of \( \gamma \)) for \( X \) and \( Y \). Let the \( i \)-th execution trace (semantic unit) for \( X \) be denoted \( S_i(X) \), and the \( j \)-th execution trace for \( Y \) be denoted \( S_j(Y) \). For each pair \( S_i(X) \) and \( S_j(Y) \), a standard algorithm [14] is used to find the longest common subsequence (LCS) of the two call traces. This LCS, termed the common API call trace (CACT) for the pair, is denoted \( L_{i,j} \) with length \( k_{i,j} \).

For each intercepted ComAPI call, the time at which the function was executed is recorded. Let the timing vector for the CACT \( L_{i,j} \) for \( X \) be denoted \( T_{i,j}(X) \), with length \( k_{i,j} - 1 \). The \( t \)-th element in this vector represents the time interval between the execution of the \( t \)-th and the \( (t + 1) \)-th system calls in the portion of \( S_i(X) \) corresponding to \( L_{i,j} \). Similarly, the timing vector \( T_{i,j}(Y) \) corresponds to the intervals between successive API calls in the portion of \( S_j(Y) \) corresponding to \( L_{i,j} \).

Let the mean and standard deviation for the elements in \( T_{i,j}(X) \) be denoted \( \mu_{i,j}(X) \) and \( \sigma_{i,j}(X) \), and similarly for \( T_{i,j}(Y) \). The correlation coefficient \( \rho_{i,j} \) of these two timing vectors is computed as:

\[
\rho_{i,j} = \frac{1}{k_{i,j} - 1} \sum_{t=1}^{k_{i,j}} \frac{(T_{i,j}(X)[t] - \mu_{i,j}(X))(T_{i,j}(Y)[t] - \mu_{i,j}(Y))}{\sigma_{i,j}(X)\sigma_{i,j}(Y)}
\]

The correlation coefficient has a maximum value of 1, indicating perfect correlation.

Let \( H_1 \) be the hypothesis that the two commands from bots \( X \) and \( Y \) being compared are semantically the same (i.e., have the same function or purpose). Define \( \theta_1 \) as \( P(\rho_{i,j} > \delta | H_1) \), the probability that the two commands will have a sufficiently high correlation coefficient when \( H_1 \) is true. To decide that the two commands are the same, we require that \( \theta_1 \) must be greater than 0.95, with a confidence level of 0.05, for an appropriately chosen value of \( \delta \).

When two bots using similar techniques execute the same bot command, the correlation value of their timing vectors will be very high (close to 1). Even though attackers may inject delays for timing obfuscation, they are unlikely to tolerate excessive delays in achieving their objectives. The injection of extraneous system calls to obfuscate command execution is also possible and is further investigated in section III-F.

### Template Construction and Real-time Matching

The above scheme applies to pairs of bots and can be extended to the analysis of any number of bots. Because the number of sequences in all execution traces for many bots is constant, the LCS problem is solvable in polynomial time using dynamic programming [14]. If bot commands with the same function are executed by many different bots, the CACT will be the longest common subsequence occurring in all execution traces for that command from all bots. The use of the common subsequence makes our scheme robust even if the execution traces are obfuscated. The timings for the CACT for all bot traces from which the template is created are also saved as part of the template.

Template construction is an offline process conducted on previously detected bots. These bots are controlled and monitored in a restricted environment, where commands are issued, and their system call traces are captured. Therefore, the commands issued to the bots are known. It is further assumed that manual inspection has revealed which bot commands have the same purpose. The system call execution traces for such commands should be considered for pairing in the construction of a template.

The template database, as shown in Figure 1, stores the semantic templates derived by the correlation engine. For each bot command that occurs in more than one bot, there is one template. The templates include the CACT for that command and the timing vector for every execution trace for every bot that executes that command. The set of templates is used to identify individual bot behaviors in real time.

### Real-time Semantic Behavior Matcher

The previous section described how bot system call execution is hooked and how the results are used to create a set of templates, each corresponding to a unique bot command. A currently executing bot can also be hooked, and its call execution traces can be compared with the set of templates to identify the bot commands being executed.

When a bot executes a command in real time, the behavior matcher attempts to match the command with an entry in the template database. The method of searching for a matching template uses the same techniques employed for constructing templates.

Suppose the API calls in ComAPI are intercepted during the execution of a suspected bot program. The trace of these calls, denoted \( S \), is processed to identify the start and stop of possible bot commands, resulting in a set of semantic units for this program. For each semantic unit, duplicate consecutive system calls are removed, controlled by the user-specified repetition parameter \( \gamma \).

The resulting reduced trace for one semantic unit \( U \) is then compared to all the templates of bot commands. The comparison starts by computing the CACT between \( U \) and a template using a longest common subsequence algorithm.

To identify a bot command in the execution trace \( S \) of a bot, using a set of previously-derived templates, a candidate template must be identified. We propose selecting the candidate template that has the longest common API call trace (CACT) with \( U \), from among all templates. In the event of ties, the candidate template is the one with the smallest difference with the CACT. The difference between a template and the CACT with \( U \) is calculated as the difference between the length of this CACT with \( U \) and the length of the template.

When a candidate template is identified, the timing vectors of the CACT for \( U \) and this template are created and correlated. The result is a correlation coefficient \( \rho \), calculated as follows. The correlation of \( U \)'s timing vector with each timing vector in the template is computed according to Equation 1. \( \rho \) is chosen to be the maximum of these individual correlations. If the highest \( \rho \) exceeds a user-specified threshold \( \delta \) with high probability (i.e., \( \theta_1 \geq 95\% \)), the semantic unit \( U \) is declared to be an execution of the bot command represented by the template.

An exception to the above matching process occurs if \( U \) consists solely of routine API calls. Bots installed on a host and prepared for interaction typically make continuous API calls while waiting for commands from the master. These routine calls are easily identified during the first few seconds of bot execution. For instance, for SDbot, the routine API calls were found to be `InterlockedDecrement`, `InterlockedIncrement`, and `GetLocalTime`. If the system calls in a captured semantic unit are exclusively taken from this set of routine API calls, that semantic unit is regarded as being of lower importance and classified simply as belonging to the general command group (see Table I), with no further attempt made to identify its function more precisely. Examples of such commands include 'alias', 'nick', etc.

### Information Logging

If desired, additional information can be recorded about the arguments of API calls that are hooked for selected bot commands (e.g., denial of service, spam, etc.). This information may be useful for detecting the victims targeted by an attacker without requiring network traffic monitoring. For example, if a bot is identified as executing a SYN flood attack, the arguments of the intercepted system calls will identify the victim, or the C&C server IP address and port number can be recovered when the bot connects to the master. Previous research [15], [16] suggested recording such information, but BotTee logs and reports valuable information only when malicious behavior (bot command) of particular interest is identified, rather than for all system calls executed.

### Experimental Evaluation

The proposed method was evaluated experimentally. The conditions of the experiment, and the results (measurements of overhead, ability to identify bot commands, and robustness to call obfuscation) are presented in this section. The results demonstrate that BotTee can recognize the execution of specific bot commands in real time.

#### Implementation and Experiments

We implemented a prototype of BotTee using the Deviare API [12] for intercepting Windows API calls on the fly. Deviare provides hook libraries to intercept any Windows API calls during runtime. BotTee uses this to obtain API call traces and record the arguments of those system calls. For accurate timing analysis, BotTee uses a timer function with a 1 microsecond accuracy, employing performance counter information [17].

A botnet in a private network was deployed, as shown in Figure 2. All machines ran the Windows OS, which is the main target of botnets. As shown in Figure 2, the first host was used as a C&C server, for instance, by installing an IRC server like UnrealIRCd. The second host was configured as a vulnerable host or honeypot, which could be exploited for bot recruitment purposes. The third host served as an alternative host or as a target for an attack. A bot on the second machine immediately connects to the C&C server and joins a predefined channel. When the botmaster issues a command through the C&C server, the bot executes the bot command. BotTee monitors the system call behavior of the bot as it executes bot commands.

Bots from the families Agobot, Sdbot, Spybot, Jrbot, Akbot, Dbot, Rbot, and Hellbot were evaluated to validate BotTee. We used current bot source codes from http://securitydot.net. Each of the bot instances came from a different bot family when possible, and we selected one bot from each different bot family. Among 167 available bot source codes, there were 103 variants, including the bots we evaluated. Among them, Agobot, Spybot, Sdbot, and Jrbot are the most popular bot families, as explained in [3].