XSS Bypass Cookbook ver 3.0
XSS Bypass Cookbook
[+] Author: math1as
[+] Team: L team
#1 引言
在目前的web安全漏洞中,xss一直属于热门的一类,而它对用户造成的危害较大。
因此也引发了不少安全爱好者和专业工程师的研究。
而html5等新技术的使用和具体业务场景中复杂的环境带给了xss更大的生存空间。
而且不同xss向量也因为浏览器的特性会有所区别
比如chrome在加载资源时会校验服务器返回的mimeType
而firefox则根据标签自己设定的type来做出处理
本文在目前较为常见的几种过滤条件下,简单的探讨了xss这一技术的应用以及绕过
相对于上一版,新增了一个chrome auditor bypass和部分js特性,以及ie下的trick
#1.1 研究范围
XSS在各种具体业务场景下的应用和绕过
#1.2 测试环境
在本文所叙述的测试环境中,用到的浏览器版本如下:
chrome 54.0 / firefox 50.0 均为当前的最新发行版本
ie系列由于精力有限未能进行测试
正文中所有以x=开头的payload,均是在这个输出环境下测试的,代码如下
" />
输出在了input的value属性里
而对于直接输出在上下文或者其他位置的情况,则做了额外的探讨
#2 Bypass Chrome XSS Auditor
反射型XSS作为最容易发现和挖掘的一种XSS,活跃了非常久的时间。
但是到现在它的作用已经被逐步的弱化
特别是浏览器,比如chrome自身的xss auditor在其中扮演了非常重要的角色
它通过直接检查了输入的内容,判断其是否在输出中出现。
(当然,基本是针对'危险标签'和可能导致javascript执行的地方)
如果符合其过滤条件,那么将直接阻止脚本的执行,比如给出这样的提示
因此给反射XSS带来了不小的难度,但是它就真的那么坚固而不可挑战么?
让我们来从各个方面对它进行逐步的分析吧
本文里所提到的auditor bypass
大部分是输出在属性里的情况,直接输出而被绕过的情况已经很少见了。
#2.1 字符集问题产生的bypass
由于chrome浏览器对ISO-2022-JP等编码的处理不当
比如在页面没有设置默认的charset时,使用了这个日语字符集
在会被auditor检查的部分添加%0f字符,就可以绕过了
比如如下payload
这其实是利用了浏览器处理字符集时产生的问题。
目前的chrome 54/55仍然没有进行修复
随着以后字符集的更新,这种问题仍然有可能出现。
#2.2 过滤关键字造成的bypass 
在我们的xss测试过程中,可能最不喜欢的就是各类过滤了,它给我们xss带来了很大的难度
但是在特定场合,它却能起到让我们绕过auditor的作用
chrome的xss auditor主要基于如下规则(这种描述也许比较粗糙)
(1)输入的内容是否直接在输出中出现
(2)输入是否有敏感标签,或者造成脚本执行的事件
那么聪明的你可能就想到了,如果替换掉了敏感关键字,比如开发者如果替换掉了标签
那么对于这样的一个输出在属性里的例子
while(1)
{
 if(stripos($content,"")===false) break;
 $content=str_replace("","",$content);
}
">
如果我们用分割掉敏感的事件,那么我们的输入在经过auditor检查的时候,就被放行了。
而真正打印内容进行渲染的时候,由于$content中的被过滤,因此我们的xss脚本成功的执行了
用这种方法,成功的绕过了xss auditor
那么它是否可以被用在直接输出的反射XSS中呢?
我们把这个输出点的代码改成如下:
")===false) break;
 $content=str_replace("","",$content);
}
echo $content;
?>
事实证明,这种方法是完全可行的
#2.3 协议理解产生的bypass
chrome的xss auditor 在检查加载脚本的路径时,有一个比较有趣的地方
如果加载的脚本在自身目录下,那么如果xss的输出点在html属性中
auditor是不会对其进行拦截的
但是如果检测到了 // 这样的外部链接的话,就会触发auditor无法加载外部脚本
这时就有一个小细节了,在加载其他脚本时 如果我们输入了的链接使用了http: 而没有带上 // 的话
它会仍然被视为在这个目录下,比如我们构造payload
x=1">或者"进行闭合,否则就会触发auditor的标签完整性检测
因此,像 这样需要闭合的脚本就不能使用了
接下来的问题就是,既然不能用"闭合,也就意味着我们的链接最后始终会带有一个"
并且,由于加载外部文档会触发CROS,所以我们需要设置其header来允许访问
因此,我们在.htaccess新建一条url转发
RewriteRule 1.\"$ /xss/t1.php
并在t1.php中写入如下代码
这样我们使用如下payload,就可以成功的把xss脚本给加载过来了
x=1">
这时我们使用如下payload
x=来加载一个外部flash产生xss是不是也可以呢?
首先我们需要让这个带有"结尾的后缀能被成功的响应为一个flash文件
在apache的mime.types配置文件中添加了s"的后缀名
可以看到返回了application/x-shockwave-flash
资源也成功加载了,但是我们的chrome并不领情
当然这里需要说明是的对于firefox来说它是不会分辨mimetype的,但是chrome就会进行校验。
因此,很遗憾的,我们的不能使用在这里。
#2.4 标签导致的绕过
在chrome的源码HTMLObjectElement.cpp 文件中,有如下的定义
if (url.isEmpty() && urlParameter.isEmpty() &&
    (equalIgnoringCase(name, "src") || equalIgnoringCase(name, "movie") ||
     equalIgnoringCase(name, "code") || equalIgnoringCase(name, "url")))
  urlParameter = stripLeadingAndTrailingHTMLSpaces(p->value());
所以当我们输入这几个name的时候,它就会加载外来的flash文件
这时候我们需要object标签来始终允许脚本运行,并使用如下payload
成功绕过
而且这也是一个universal bypass
#2.5 上传swf导致flash-xss所产生的bypass
根据2.3中的思路,如果存在任意一个可以上传swf文件的上传点,就可以对chrome的auditor进行绕过。
所用的payload如下
x=1"><embed+type="application/x-shockwave-flash"+allowscriptaccess=always+src=/a/1.swf"
但是这种方法一般比较鸡肋
因为允许上传swf文件的话,一般也允许在富文本编辑器中直接加载这个swf了
#2.6 crlf产生的bypass
由于chrome的auditor默认是开启的,但是仍然会受到http头的影响
如果X-XSS-Protection被赋值为0,那么chrome自身的filter就会关闭
因此,如果在一个302跳转页面我们注入了%0d%0a然后在新一行中
写入X-XSS-Protection:0,那么接下来的XSS内容就不会受到auditor的阻止了
如何在这个页面构造一个反射型XSS呢?