### 9.4.3 `ps` 命令
- `BSD ps aux` 显示 `%CPU` 和 `%MEM`。
- `SystemV ps -efH` 显示 `PPID`。

**表 9.10: `ps` 命令样式列表**

通过检查“PPID”字段中的父进程ID，可以识别并终止僵尸（已死）子进程。使用 `pstree(1)` 命令以树状结构显示进程关系。

### 9.4.4 `top` 命令
Debian系统上的 `top(1)` 提供了丰富的功能，有助于监控和分析进程的动态行为。它是一个交互式的全屏程序。在运行时，按 `h` 键可获取帮助信息，按 `q` 键退出程序。

### 9.4.5 列出被一个进程打开的文件
可以通过指定进程ID (PID) 来查看该进程所打开的所有文件。例如，对于 PID 为 1 的进程（通常是 init 程序），使用以下命令：
```bash
$ sudo lsof -p 1
```

### 9.4.6 跟踪程序活动
可以使用 `strace(1)`, `ltrace(1)`, 和 `xtrace(1)` 来跟踪程序的系统调用、库调用以及 X11 客户端与服务器之间的通信。例如，要跟踪 `ls` 命令的系统调用，执行：
```bash
$ sudo strace ls
```
提示：使用位于 `/usr/share/doc/strace/examples/` 目录下的 `strace-graph` 脚本来生成可视化的调用树。

### 9.4.7 识别使用文件和套接字的进程
利用 `fuser(1)` 可以确定哪些进程正在访问特定文件或套接字。例如，要查找哪个进程打开了 `/var/log/mail.log` 文件：
```bash
$ sudo fuser -v /var/log/mail.log
```
输出示例：
```
USER   PID ACCESS COMMAND
/var/log/mail.log: root 2946 F.... rsyslogd
```
这表明 `rsyslogd(8)` 正在写入该日志文件。同样地，要找出哪个进程占用了 `smtp/tcp` 套接字：
```bash
$ sudo fuser -v smtp/tcp
```
输出示例：
```
USER   PID ACCESS COMMAND
smtp/tcp: Debian-exim 3379 F.... exim4
```
这意味着 `exim4(8)` 在处理 SMTP 端口 (25) 上的 TCP 连接。

### 9.4.8 使用固定间隔重复一个命令
`watch(1)` 允许用户以固定的时间间隔重新执行一个命令，并将结果全屏显示。例如，每两秒更新一次登录用户的列表：
```bash
$ watch w
```

### 9.4.9 使用文件循环来重复一个命令
有多种方法可以基于匹配某些条件的文件来重复执行一个命令，比如全局模式 `*.ext`：
- Shell 循环方式（参见第 12.1.4 节）:
  ```bash
  for x in *.ext; do if [ -f "$x" ]; then command "$x"; fi; done
  ```
- 结合 `find(1)` 与 `xargs(1)`:
  ```bash
  find . -type f -maxdepth 1 -name '*.ext' -print0 | xargs -0 -n 1 command
  ```
- 使用 `find(1)` 的 `-exec` 选项直接执行命令:
  ```bash
  find . -type f -maxdepth 1 -name '*.ext' -exec command '{}' \;
  ```
- 使用 `find(1)` 的 `-exec` 选项执行简短的 shell 脚本:
  ```bash
  find . -type f -maxdepth 1 -name '*.ext' -exec sh -c "command '{}' && echo 'successful'" \;
  ```

这些例子确保了即使遇到包含特殊字符（如空格）的文件名也能正确处理。更多关于 `find(1)` 的高级用法，请参考第 10.1.5 节。

### 9.4.10 从 GUI 启动一个程序
- **命令行界面 (CLI)**: `$PATH` 环境变量中第一个匹配给定名称的可执行文件会被执行。详情请参阅第 1.5.3 节。
- **图形用户界面 (GUI)**: 遵循 freedesktop.org 标准的应用程序会在 `/usr/share/applications/` 目录下创建 `.desktop` 文件，定义其在菜单中的显示属性。现代桌面环境依据这些数据自动生成菜单项。有关详细信息，请查阅 `/usr/share/doc/xdg-utils/README`。

例如，`chromium.desktop` 文件定义了 Chromium 浏览器的相关配置，包括名称 (`Name`)、执行路径及参数 (`Exec`) 和图标 (`Icon`) 等：
```ini
[Desktop Entry]
Version=1.0
Name=Chromium Web Browser
GenericName=Web Browser
Comment=Access the Internet
Comment[fr]=Explorer le Web
Exec=/usr/bin/chromium %U
Terminal=false
X-MultipleArgs=false
Type=Application
Icon=chromium
Categories=Network;WebBrowser;
MimeType=text/html;text/xml;application/xhtml_xml;x-scheme-handler/http;x-scheme-handler/https;
StartupWMClass=Chromium
StartupNotify=true
```

### 9.4.11 自定义启动程序
某些程序可能由其他应用程序自动启动。以下是一些自定义此过程的方法：
- **应用程序配置菜单**:
  - GNOME 3: “设置” → “系统” → “详细信息” → “默认应用程序”
  - KDE: “K” → “控制中心” → “KDE 组件” → “组件选择器”
  - Iceweasel: “编辑” → “首选项” → “应用程序”
  - `mc(1)`: 编辑 `/etc/mc/mc.ext` 文件
- **环境变量**: 如 `$BROWSER`, `$EDITOR`, `$VISUAL`, 和 `$PAGER` （参见 `environ(7)`）
- **替代方案系统**: 对于诸如 `editor`, `view`, `x-www-browser`, `gnome-www-browser`, 和 `www-browser` 等程序，使用 `update-alternatives(1)` 系统（参见第 1.4.7 节）
- **MIME 类型关联**:
  - `~/.mailcap` 和 `/etc/mailcap` 文件关联 MIME 类型与程序（参见 `mailcap(5)`）
  - `~/.mime.types` 和 `/etc/mime.types` 文件关联 MIME 类型与文件扩展名（参见 `run-mailcap(1)`）

### 9.4.12 终止进程
- 使用 `kill(1)` 通过进程 ID 发送信号给进程。
- 使用 `killall(1)` 或 `pkill(1)` 根据进程名或其他属性发送信号。

**表 9.11: `kill` 命令常用信号列表**
| 信号值 | 信号名 | 操作 | 注释 |
| --- | --- | --- | --- |
| 0 | --- | 发送 | 检查进程是否运行（参见 `kill(2)`）|
| 1 | SIGHUP | 终止 | 从终端断开连接 |
| 2 | SIGINT | 终止 | 从键盘中断 (Ctrl+C) |
| 3 | SIGQUIT | 终止并触发 core dump | 从键盘退出 (Ctrl+\) |
| 9 | SIGKILL | 强制终止 | 不可阻塞的 kill 信号 |
| 15 | SIGTERM | 终止 | 可被阻塞的终止信号 |

### 9.4.13 单次任务时间安排
使用 `at(1)` 命令来安排一次性任务。例如，在周一 3:40 执行某个命令：
```bash
$ echo 'command -args' | at 3:40 monday
```

### 9.4.14 定时任务安排
使用 `cron(8)` 来定期执行任务。详情请参阅 `crontab(1)` 和 `crontab(5)`。普通用户可以使用 `crontab -e` 创建自己的定时任务文件，例如，用户 `foo` 的定时任务文件位于 `/var/spool/cron/crontabs/foo`。

以下是一个 `crontab(5)` 文件的例子：
```sh
# 使用 /bin/sh 运行命令，无论 /etc/passwd 中如何设置
SHELL=/bin/sh
```