third of the full set, marking user complaints as relevant if
they focused on the PWM’s interaction with a website (cf.
Figure 1). This ﬁrst pass was also used to assign initial codes to
the complaints (Figure 2, step 1). We aimed to identify both the
broken functionality as well as the underlying technical cause.
To obtain a more diverse view, we then repeated the process
with a different third of the data set (step 2). Therefore, two
researchers reviewed each feedback item for relevancy and the
initial codes. After coding all items we regrouped and merged
our ﬁndings (step 3), resulting in 150 relevant user complaints.
Since all researchers discussed and agreed on the ﬁnal codes,
we did not calculate the inter-rater reliability [54]. Using the
merged initial codes, we iteratively developed themes covering
issues and areas suitable for the later problem cases. This
resulted in a ﬁnal code book consisting of 59 codes divided
into a end-user oriented and a more technical perspective
(step 4). We ﬁrst evaluated the ﬁnal code book by coding
20% of the items together, before splitting the remaining
80% between three researchers to reassess the entire data
set with (step 5). Using the coded data set, we were able
to identify complaints that described the same problem even
across multiple PWMs. Based on this, we developed the ﬁnal
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
1371
Data SliceFull Dataset(1/3 per  Author)Full DatasetInteractionsRelevantUser Complaints(N=152)Analyst3 AuthorsIndependentAll AuthorsAll Authors3 AuthorsTogetherAnalysis Step1. Screening & Loose Coding2. Repeat with Different Data SliceGithub Issues (If Available, N=398)Chrome WebstoreReviews (N=1352)Chrome WebstoreSupport Requests(If Avaliable, N=729)Dataset (2479 Feedback Items)3. Merge Screening and Codes4. Evaluate Themes and Codebook5. Re-evaluate Dataset6. Group Issues to Interactions7. Evaluate Interaction Descriptionsinteractions, which describe technical problems of one or more
PWMs with common practices in web development (step 6). In
this step, we also decided to ﬁlter out 40 reviews we previously
considered relevant because they either contained not enough
details to be reproducible. While these ﬁt our criteria for
relevancy and coding, they where unﬁt for the MWEs we
attempted to build. Finally, three researchers discussed the
resulting valid interactions and categories, reviewing and reﬁn-
ing the description for each interaction (step 7). In this step,
we used the technical codes of the code book to categorize
the interactions and the end user oriented side to determine
fulﬁllment criteria, e. g. the requirements a PWM has to pass in
order to obtain a positive rating for the respective interaction.
We also reviewed the feedback items our further analysis is
based on to reﬁne these fulﬁllment criteria. See Table V-C for
the ﬁnal list of interactions and their descriptions.
D. Limitations
Due to the qualitative nature of our user feedback analysis,
this work is not without limitations. First, we only review
PWMs that are available as web browser extensions. However,
since Chrome has by far the largest market share over all
browsers, and most extensions can also be used on e. g.
Firefox, we are conﬁdent that our selection covers most if not
all relevant PWMs. We can only provide limited insight into
closed source PWMs and possible causes for their behavior as
these are not available publicly. In these cases, we could only
review Chrome Web Store reviews and support requests.
through a ticket system,
While we are conﬁdent that we reached saturation during
our analysis, we only reviewed a limited number of user
feedback sources. Depending on the PWMs popularity and
whether or not they provide third party feedback collection
e. g.
the number and age of re-
views feedback items varies per PWMs. Popular extensions
sometimes provided thousands of reviews for which we only
sighted the ﬁrst 100 with all comments, while less widespread
ones only had few comments that could span until November
2013. Furthermore, reviews are related to multiple extension
versions. We did not review any new versions or feedback
items after July 2020, since after that time frame we started
coding. Additionally, reviews are subject to a self-reporting
bias and the sample of users who report issues is much smaller
than the number of downloads and therefore possibly not
representative to the user base at large. As described in Section
IV-E, we found several issues that were only rarely reported.
However, since we aimed for issue diversity, we argue that
for the purpose of this work, knowing that an issue exists is
sufﬁcient. If a problem description only occurs seldom or if
it is related to an outdated extension version, it might still be
relevant for other PWMs. Overall, we based all examples of
interaction problems between PWMs and websites on our data
for issues, reviews and support requests and tested all examples
with all 30 PWMs in our list. Finally, our approach is not
suitable to investigate the prevalence of these issues, as they
are dependent on e. g. users that report them, the popularity of
the PWM and potentially private issue trackers we could not
access.
E. Interaction Problems
In the following, we present and discuss our ﬁndings in
alphabetical order, highlighting their relevance and describing
the set of interactions they are composed of.
Additional Elements (Auth). When a website contains more
input ﬁelds than necessary for the current authentication task,
even if they were declared correctly and explicitly, PWMs
can struggle locating relevant input ﬁelds. Examples for this
include websites with username and password ﬁelds for both
account creation and login, or cases in which multiple single-
digit ﬁelds instead of only one input ﬁeld are used for e. g.
TOTP codes, in which users complained about not being able
to auto-ﬁll this additional information:
“Great application and extension. Pity it can’t detect
more than 2 ﬁelds on a screen. In case (such as
banks etc.) you need to enter 3 different strings
for identiﬁcation, the app / extension will grab and
use only 2, while you’ll have to add the 3rd one
manually. [...]” (AA-04, User 1)
Overall, this category requires the additional input ﬁelds to
be related to the authentication process in some way. In these
four cases, the desired authentication process fails.
Additional Elements (Non-Auth). While similar to the pre-
vious category, this focuses on input ﬁelds that are not related
to authentication purposes. This includes unrelated text ﬁelds
on e. g. CMS that are incorrectly ﬁlled with credentials as
well as other types of elements such as drop-downs and check
boxes. Here, undesired behavior might expose passwords in
plain text or even break websites. We identiﬁed four cases
where additional elements were problematic.
Domain Matching. Before a PWM can perform any detection
or interaction on the website, it has to compare the given URL
to all stored credentials and their associated service URLs.
This is a necessary step to recognize and autoﬁll known cre-
dentials as otherwise, authentication-related information might
be leaked to unrelated or untrustworthy services. Overall, we
identiﬁed seven sources of service mismatching. For example,
we identiﬁed cases where services were not recognized due to
e. g. no or wrong differentiation between subdomains or paths
on a website, or because the website incorporates redirects or
iframes with different origins, all of which complicates the
service matching process.
Input Fields. After identifying the website, a PWM needs
to locate all input ﬁelds that are relevant for the current au-
thentication task. This usually comprises ﬁelds for an identiﬁer
such as a username and a password, but can also require further
personal information or TOTP codes. To ﬁnd all relevant ﬁelds,
PWMs usually rely on their declaration, using attributes such
as name, type or id to decide whether or not an input ﬁeld
should be ﬁlled. In this category, we collect nine interactions
where the detection is difﬁcult, e. g. because not all or no
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
1372
relevant attributes are present, or because the attributes used
ambiguous or misleading values such as “IDToken1” for
username inputs. This was a problem we found frequently
within user reviews:
“[...] Some websites don’t deﬁne a type attribute for
their inputs, while LastPass seems to blindly trust
any input element to have a deﬁned type. I think
maybe the best solution is to assume that if a type
is not set, that the type is then “text”” (I-07, User 1)
Non-Standard Forms. This category includes ﬁve in which
the form element containing the relevant input ﬁeld diverged
from standards by e. g. omitting a form tag or locating submit
buttons in website elements different from the associated form.
JavaScript. We found six problem cases related to scripts on
the website that in some way manipulate form elements or
user input, as was e. g. described in the following issue:
“[...] I guess this is because citi.com actually dis-
plays 5 different password ﬁelds before the password
ﬁeld used by the user. While they’re not speciﬁcly
hidden and just moved out of the viewport, I imagine
it to be kind of tricky to add detection for something
like this.” (J-05, User 3)
This category also includes cases in which relevant input
ﬁelds are shown one after another, are hidden until the user
interacts with other website elements or when pseudo security
measures are in place to disrupt automated inputs by e. g.
enforcing a keypress event before enabling submit buttons.
In all of these cases, JavaScript impedes the work of PWMs,
therefore reducing their usability.
Timing. We collected two interactions in which some kind of
delay disrupts the PWM workﬂow. Such problems can occur
when scripts on the website cause relevant elements to appear
after the initial scan for input ﬁelds, or when a PWM generates
TOTP codes only once - here, the code can be outdated if there
is a delay before submitting the credentials, causing the login
to fail.
Web Standards. Finally, we identiﬁed two in which PWMs
struggle to correctly work with HTTP Basic Authentiﬁca-
tion [44]. This falls outside of the realm of our previous
categories since it does not require extensions to interact
with the website, but simply implements a callback to the
onAuthRequired event [6], [31]. Issues with HTTP Basic
Authentication were noteworthy as they were reported multiple
times. For example, ten different users showed frustration and
complained about the lacking support for basic authentication.
Further Findings. The reported issues in our coding impli-
cate vastly different approaches to automatic storage, ﬁlling
or full on logging in on websites. These approaches included
automatically ﬁlling the page when accessing a website, but
also the possibility to choose an account when clicking on
the input ﬁeld or having to interact with buttons provided on
the browser user interface, not including any convenience. We
need to consider these different approaches when testing the
PWMs in our next study in order to discover how each of
them performs on the different categories of MWEs we test.
This way we hope to discover recommendable approaches
that solve some of the issues fully automatic PWMs have
compared to the ones that require more user interaction.
Finally, while we think the interactions we discovered reach
saturation concerning the interactions users report, some of
them were found for only one or two PWMs, which inhibits
reliably reports on their prevalence and how other PWMs
might solve them. In a follow-up study described in section V,
we test common PWM approaches for these interactions to
both obtain a picture of problem frequency and to investigate
how different PWMs try to solve them. We further discuss how
problematic interactions could be mitigated in the future.
V. INTERACTION PROBLEM EVALUATION
In the second study, we investigate the interactions between
15 PWM browser extensions with previously identiﬁed 39 in-
teractions. Since the user feedback we analyzed in Section IV
was speciﬁc for single PWMs, we aim to investigate how other
PWMs deal with the problems we found and provide recom-
mendations to help future PWM and website development. We
will detail our methodology and considerations below and then
present and discuss the results.
A. Methodology
To test the 15 PWMs, we implemented all problem cases we
found in the form of 39 minimal working samples (MWEs).
With this, the problems can be presented easily and it is further
possible to remove e. g. dependencies as external causes. We
therefore chose this form to build working examples from our
list of interactions, using a ﬂask web application that simulated
logins in different scenarios [11]. In total, we conducted 585
distinct tests. The application spans three domains and two
subdomains (D01-D04), using the third domain to simulate the
HTTP protocol interaction (D-04). This was necessary as our
other domains use HSTS, which prevents an accidental proto-
col changes on other interactions (D01-D03). We implemented
the MWEs as basic websites, consisting of minimal styling
for readability, the JavaScript and HTML elements required
to reconstruct the interaction and in most cases some basic
form of validation checking that allows us to verify correct
username and password input by the PWM. They all work
on a template, for which we included an example in Figure 3
and each page includes a description of the interaction and
instructions on the requirements to pass the interaction. We
provide the web applications as part of our replication package
in subsection V-D.
Evaluating PWM Interactions. For this analysis, we limited
ourselves to the top ten PWMs, mainly because these cover
97.9% of users according to download counts. We added
KeePassXC and Passbolt since their open source nature allows
for investigation of interactions, bringing our total coverage
up to 98.4%. We further added the default browser PWMs
for Chrome, Firefox and Edge, since due to their immense
user base, their PWMs likely have a larger count of users
than any of the top ten PWMs mentioned previously. Other
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
1373
PASSWORD MANAGER APPROACHES TO IMPLEMENT AUTOSAVE, AUTOFILL
TABLE II
AND AUTOLOGIN.
Password Manager
Lastpass
Norton
Avira
Dashlane
1Password X
Bitwarden
RoboForm
Keeper
Blur
Enpass
KeePassXC
Passbolt
Chrome
Firefox
Edge
Fig. 3. Our minimal working examples (MWEs). Consist of the interaction
that we modeled, a short description and instructions on what is considered
a successful interaction. Layout aspect ratio adapted for paper.
Autosave
Ask
Setting
Manual
Ask
Ask
Ask
Ask
Ask
Setting
Ask
Ask
None
Ask
Ask
Ask
Autoﬁll
On Load
Manual
On Load
On Load
Manual
Manual
Manual
Ask
On Load
Manual
Manual
Manual
On Load
On Load
On Load
Autologin
Setting
None
None
Seamless
None
None
Seamless
Seamless
None
Seamless
Setting
None
None
None
None
browsers, such as Safari, were not reviewed due to a smaller
marketshare at the time our tests took place. Overall, we tested
15 PWMs. For all of them we used the premium trial version
where available.
We test all PWMs against all 39 problems and distinguish
the following test outcomes:
• Seamless: The PWM behaves as expected without any
manual interaction (e. g. it intuitively autosaves and au-
tocompletes). Expected behavior is deﬁned per minimal
working example on the page.
• Manual: The PWM does not behave as expected, but
manual intervention or workarounds lead to the expected
result. This includes e. g. using context menus to ﬁll
credentials or settings that make the case possible.
• No Solution Found: The PWM is not able to solve the
task without additional interaction. Manual interaction
with the website or searches on e. g. the respective support
pages lead to no solution, which suggests that the case is
not supported or malfunctioning.
• Not Applicable: The PWM does not support a required
feature such as autosave or multi-factor authentication. It
cannot be evaluated for these cases.
Each MWE includes a description how to proceed with the
example and which conditions deﬁne success or failure. The