1
jboss
jboss RPC RCE
分析
JDNI
2022年4⽉27⽇13:28:14 
看到⼀个帖⼦提到jboss 漏洞，就去Twitter找了链接 
https://jspin.re/jboss-eap-as-6-rce-a-little-bit-beyond-xac-xed/ 
https://s3.amazonaws.com/files.joaomatosf.com/slides/alligator_slides.pdf 
简单分析了下pdf的内容，漏洞不是传统的http漏洞，是jboss⾥的remoting3存在问题，可参考
weblogic的T3，只是jboss是跑在独⽴的端⼝上。 
4446: JBoss Remoting Unified Invoker 
3873: EJB Remoting Connector 
早期版本端⼝是4445，存在cve-2016-3690 反序列化漏洞（versions 
    org.jboss.remoting
    jboss-remoting
    2.4.0.GA
    org.jboss.logging
    jboss-logging
    3.3.0.Final
    org.jboss
    jboss-common-core
    2.5.0.Final
            org.jboss.logging
            jboss-logging-spi
    concurrent
    concurrent
    1.3.4
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
Java
复制代码
        InvokerLocator locator = new 
InvokerLocator("socket://30.1.20.3:4446");
        Client remotingClient = new Client(locator, "ALLIGATOR");
        remotingClient.connect();
        System.out.println(remotingClient.invoke("RECIFE"));
1
2
3
4
4
看到ACED就很亲切了，通过ACED0005交互，然后Client发送payload，这个和我们⼀般发送的反序列
化payload格式有所区别，没有ACED头。⽂章中解释了头部字段含义，这个之前做反序列化脏数据也涉
及到过。（PS: 这⾥可以看到，建⽴连接后，server端会主动发送ACED0005，然后client交互
ACED0005，在发送payload） 
0x77011679 
参考java/io/ObjectStreamConstants.java 
Java
复制代码
0x77: TC_BLOCKDATA
0x01: Length of TC_BLOCKDATA
0x16: Protocol version 22
0x79: TC_RESET (??)
1
2
3
4
5
然后和yso⽣成的payload可以对⽐下，其实就是前4字节不同。后续应该就是序列化数据，所以我们可
以尝试替换前四字节然后发送利⽤。 
6
这⾥就⽤yso⽣成⼀个，然后发送利⽤，数据包如下。 
7
这个接⼝应该是RPC，那么应该可以像T3那样注册⽅法，然后invoke调⽤，待后续，不过漏洞验证还可
以⽤sleep来测试。 
8
PS:4446和3873端⼝均可利⽤ 
⽂中还提到了⼀条jboss原⽣的反序列化利⽤链，ProducerManagerImpl，很直观的⼀条JNDI利⽤链 
编写构造如下，本地测试可成功 
JDNI 
9
进⼀步针对spring测试，也可利⽤。