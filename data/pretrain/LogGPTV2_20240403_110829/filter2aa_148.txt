### JBoss RPC RCE漏洞分析

#### 概述
2022年4月27日13:28:14，我在一个帖子中看到关于JBoss漏洞的讨论。随后，我在Twitter上找到了相关链接：
- [JBoss EAP/AS 6 RCE漏洞](https://jspin.re/jboss-eap-as-6-rce-a-little-bit-beyond-xac-xed/)
- [Alligator Slides](https://s3.amazonaws.com/files.joaomatosf.com/slides/alligator_slides.pdf)

经过初步分析，该漏洞并不是传统的HTTP漏洞，而是JBoss中的Remoting3组件存在问题。这个漏洞类似于WebLogic的T3协议，但JBoss运行在独立的端口上。

#### 端口信息
- **4446**: JBoss Remoting Unified Invoker
- **3873**: EJB Remoting Connector

早期版本的端口是4445，并且存在CVE-2016-3690反序列化漏洞。受影响的版本包括：
- `org.jboss.remoting:jboss-remoting:2.4.0.GA`
- `org.jboss.logging:jboss-logging:3.3.0.Final`
- `org.jboss:jboss-common-core:2.5.0.Final`
- `org.jboss.logging:jboss-logging-spi`
- `concurrent:concurrent:1.3.4`

#### 漏洞利用示例
以下是一个简单的Java代码示例，展示了如何通过Remoting3进行连接和调用：

```java
InvokerLocator locator = new InvokerLocator("socket://30.1.20.3:4446");
Client remotingClient = new Client(locator, "ALLIGATOR");
remotingClient.connect();
System.out.println(remotingClient.invoke("RECIFE"));
```

#### ACED头解析
看到`ACED`头感到很熟悉，因为这是反序列化数据的一部分。通过`ACED0005`进行交互，客户端发送payload。这种格式与我们通常使用的反序列化payload有所不同，因为它没有`ACED`头。文章中解释了头部字段的含义，这在之前的反序列化脏数据研究中也涉及过。建立连接后，服务器会主动发送`ACED0005`，然后客户端响应`ACED0005`并发送payload。

参考`java/io/ObjectStreamConstants.java`，字段解释如下：
- `0x77`: TC_BLOCKDATA
- `0x01`: Length of TC_BLOCKDATA
- `0x16`: Protocol version 22
- `0x79`: TC_RESET (未知)

#### 漏洞验证
可以将yso生成的payload与上述格式进行对比，发现前4字节不同。后续应该是序列化数据，因此可以尝试替换前四字节并发送利用。

使用yso生成一个payload并发送，数据包如下。此接口应该是RPC，可以像T3那样注册方法并通过`invoke`调用。可以通过sleep测试来验证漏洞。

**注意**：4446和3873端口均可被利用。

#### JNDI利用链
文中还提到了一条JBoss原生的反序列化利用链`ProducerManagerImpl`，这是一个直观的JNDI利用链。本地测试成功。

进一步针对Spring进行测试，也可以利用。

希望以上内容对你有所帮助。