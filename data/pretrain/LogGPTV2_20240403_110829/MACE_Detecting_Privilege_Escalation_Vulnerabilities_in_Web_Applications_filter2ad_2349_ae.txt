inconsistencies between various types of query pairs (insert-insert,
insert-update and insert-delete). Together with table 3, we see that
MACE is precise and produces no false positives. This low FP
rate is due to the use of authorization 4-tuple to model the autho-
rization state of sessions at the server. Using the reports generated
by the tool (including the locations of the queries and the missing
authorization), a developer can proceed to ﬁx the application.
5.3 Performance & Scalability
We evaluated MACE on a suite of Web applications with differ-
ent sizes ranging from 1K to 90K. Columns 2-3 in Table 2 show
the size and number of php ﬁles in the applications, and column 4
gives an estimation of the number of query (insert-update-delete)
locations (in source).
Table 2 (column 6) shows the total analysis time for each Web
application ranging from 35 seconds to 35093 seconds. About %95
of the analysis time has been spent to create the dependency graphs
and enumerate execution paths.
The increase in the number of possible paths increases the num-
ber of created symbolic queries. However, the number of distinct
symbolic queries may still remain relatively low as shown in the
last column of table 5, where we present the number of unique
symbolic queries and their authorization information 4-tuple. Cur-
rently, MACE analyzes each ﬁle separately and builds the aggre-
gated contexts when all the queries are gathered. The performance
of MACE can be improved, especially if we summarize recurring
contexts for basic user-deﬁned functions. Since MACE is a static
tool, the analysis times are quite acceptable for the beneﬁts pro-
vided by the tool.
5.4 Annotation Effort
To run MACE, we manually identify the 4-tuple variables for
each of the applications as hints for our tool. Developers typi-
cally use global and super-global variables (e.g.
in SESSION or
COOKIE) to represent user roles, user IDs, and the possible per-
missions for the logged-in users. These variables are further used
to hold the authentication and authorization-related values through-
out the program. Table 6 in Appendix A shows the variables we
identiﬁed as hints for our programs.
The manual annotations are developed by observing the session
management functions in login procedures. In our experience, de-
veloping these annotations is not hard for users familiar with the
application, and certainly for developers who coded the applica-
tion. To objectively measure the annotation effort, we performed
a user-study experiment. To assist this experiment, MACE was
extended to automatically generate a list of global and superglobal
variables, which are used in if-statements, which is a superset of au-
thorization variables. This list is then reﬁned to exclude user input
variables (such as GET and POST superglobals), and is provided as
a starting point to the user.
To measure the effort needed to identify the 4-tuple, we asked a
graduate student who had basic knowledge about Web applications
to develop these annotations. We provided the application sources
and the globals list generated by MACE. The student was provided
the mybloggie and phpns applications, which are mid-tier ap-
plications in our benchmark suite. She was able to produce anno-
tations that matched our own annotations for both the applications,
and took about 50 minutes for generating and verifying the anno-
tations. This experiment lends evidence that only modest efforts
are required in providing annotations. We also note that our experi-
ence with providing such annotations is consistent with prior work
in web access control that makes use of similar annotations [11,
29]. Given the number of unknown vulnerabilities identiﬁed by
MACE, we believe such annotation-assisted automated bug ﬁnd-
ing is an attractive alternative to weeks of human effort and manual
code inspection.
6. Previous work
We summarize related work in three broad categories: research
focused on prevention of access control vulnerabilities, research
aimed at detecting access control bugs in legacy web applications,
and general program analysis techniques to ﬁnd vulnerabilities in
software. We contrast how MACE differs from many of these ap-
proaches, while uses some techniques in common.
Prevention of Authorization Vulnerabilities Nemesis [11] uses
Dynamic Information Flow Tracking (DIFT) to establish a shadow
authentication system that tracks user authentication state. Access
control lists can be speciﬁed by programmers, which help the sys-
tem enforce authorization properties at run-time. CLAMP [21]
uses virtual web servers to prevent authorization vulnerabilities in
web applications: by migrating the user authentication module of a
web application into a separate, trusted virtual machine (VM). All
database access requests (queries) are mediated by a trusted VM
that enforces deﬁned access control rules and restricts the queries
if necessary. Diesel [15] provides a proxy-based framework to
limit database accesses at run-time. It uses the principle of least-
privilege to secure the database through developer-deﬁned policies.
Capsules [20] develops a language based technique which uses
Object-Capability languages to isolate objects from each other, in
order to separate web applications into components. While these
works are focused on dynamic prevention of access control errors,
MACE is focused on static detection of access control vulnerabil-
ities.
Swaddler [10] is an dynamic anomaly detection tool which is
able to detect several types of bugs including workﬂow bugs.
Swaddler has a Daikon-based invariant learning phase followed by
an analysis phase which checks the invariants against the applica-
tion state model. Although the Swaddler tool uses the notion of
session and checks for the presence of session variables in execu-
tion paths, it does not take into account the access control model of
the application with respect to various resources.
Finding Authorization Bugs in Legacy Web Applications Gana-
pathy et al. [17], where they add checks to enforce authorization
rules in legacy software systems, such as X SERVER. They use
a reference monitor for enforcing deﬁned authorization policies at
run-time.
RoleCast [24] uses common software engineering patterns to
model authorization requirements and develops techniques to
check if any sensitive operation is performed after authorization.
While the advantage of using patterns is that it frees the need for
developer annotations, we have noticed that the RoleCast patterns
do not hold consistently across all web applications. The approach
proposed by Sun et al. [26] detects vertical escalation vulnerabil-
ities using static analysis. This approach builds a sitemap of the
Web application, modeling the accesses to privileged webpages per
role. It then checks if forced browsing cause the privileged pages
to be accessed. Both approaches ([24] and [26]) use course-grained
modeling of authorization requirements through grouping the roles.
They only accommodate detection of vertical escalation vulnera-
bilities. In contrast, MACE employs a precise and ﬁne-grained au-
thorization model that is supported by user annotations of modest
effort, giving it the ability to detect a larger class of vulnerabilities,
including horizontal privilege escalation.
Doupe et al. [12] present an analysis of Execution after Redirect
(EAR) vulnerabilities in web applications. They discuss a static
control ﬂow analysis for web applications that detect EAR attacks.
While MACE is not built to detect EARs, the analysis infrastruc-
ture of MACE could be extended in a straightforward way to detect
EAR vulnerabilities. In addition, the context inference for sinks in
MACE could form the basis for automatically distinguishing be-
nign EARs from vulnerable EARs.
Vulnerability Analysis in Applications Waler [14] uses a combi-
nation of static and dynamic analysis techniques to extract program
speciﬁcations in terms of likely invariants and then uses model
checking to verify the extracted invariants. MACE is similar in
its objectives to Waler as both approaches aim to work with source
code as the only speciﬁcation. However, being focused on logic
errors, Waler is not built to precisely compute authorization con-
texts. This limits its ability to identify access control discrepancies
that require global reasoning across the entire web application, es-
pecially related to how a particular resource is accessed in various
operations.
Engler et al.
[13] also try to extract program speciﬁcations,
through behavioral patterns called beliefs. They use static analy-
sis techniques to infer these patterns and rank them using statistical
analysis of the patterns. The patterns speciﬁed can be used to detect
certain types of vulnerabilities caused by inconsistency in the pro-
grams, such as pointer dereference and use of locks on resources.
Srivastava et al. [25] detect security vulnerabilities through com-
paring different implementations of the same API. They use secu-
rity policies as input to their analysis. Any inconsistency between
the security policy and any of the implementations or any inconsis-
tency between different implementations are being reported as er-
rors. AutoISES [27] can detect bugs in standard C libraries through
mining for common security-related patterns and identifying devi-
ations from these as vulnerabilities.
Blackbox approaches (NoTamper [7] and the approach proposed
by Pellegrino et al.
[22]) have some potential to reason about ac-
cess control vulnerabilities in an application, but they are inher-
ently limited in their ability to reason about authorization errors that
manifest as a result of missing checks along speciﬁc paths present
in source code which can only effectively gleaned through access
to the application source code.
7. Conclusion
We present MACE, a program analysis tool for automatic detec-
tion of authorization vulnerabilities in Web applications. The tool
is based on our study and characterization of different authorization
attacks and the underlying vulnerabilities. We ﬁnd privilege escala-
tion vulnerabilities by ﬁnding inconsistencies in the authorization
contexts at access request points without knowing the correct ac-
cess control policies. While the analysis is best effort, the greatest
value of MACE is in identifying ﬂaws in these applications using
fundamental abstractions, in the absence of any policy speciﬁca-
tions, with the beneﬁt of ﬁnding important vulnerabilities that were
not discovered earlier.
Acknowledgment
The authors would like to thank the anonymous reviewers for their
constructive comments. We would also like to thank Kalpana
Gondi, Abeer Alhuzali and Ivan Brugere who helped us with the
annotation experiments.
This material is based upon work supported in part by the Na-
tional Science Foundation under Grant Nos. 0845894, 1069311
and 1065537. Any opinions, ﬁndings, and conclusions or recom-
mendations expressed in this material are those of the author(s) and
do not necessarily reﬂect the views of the National Science Foun-
dation or the U.S. government.
8. References
[1] Citi breach: 360k card accounts affected.
http://www.bankinfosecurity.com/
citi-breach-360k-card-accounts-affected-a-3760.
[2] Cwe-639. http://cwe.mitre.org/data/deﬁnitions/639.html.
[3] Mitre top 25. http://cwe.mitre.org/top25/.
[4] OWASP: Testing for privilege escalation.
https://www.owasp.org/index.php/Testing\_for\
_Privilege\_escalation\_(OWASP-AZ-003).
[5] Virtual private database. http://www.oracle.com/technetwork/
database/security/index-088277.html.
[6] Application vulnerability report. Tech. rep., http://www.cenzic.com/
downloads/Cenzic_Vulnerability_Report_2014.pdf, 2014.
[7] BISHT, P., HINRICHS, T., SKRUPSKY, N., BOBROWICZ, R., AND
VENKATAKRISHNAN, V. N. Notamper: Automatic blackbox detection of
parameter tampering opportunities in web applications. In Proceedings of the
17th ACM Conference on Computer and Communications Security (New York,
NY, USA, 2010), CCS ’10, ACM, pp. 607–618.
[8] BISHT, P., HINRICHS, T., SKRUPSKY, N., AND VENKATAKRISHNAN, V. N.
Waptec: Whitebox analysis of web applications for parameter tampering exploit
construction. In Proceedings of the 18th ACM Conference on Computer and
Communications Security (New York, NY, USA, 2011), CCS ’11, ACM,
pp. 575–586.
[9] BISHT, P., SISTLA, A. P., AND VENKATAKRISHNAN, V. N. Taps:
Automatically preparing safe sql queries. In Proceedings of the 17th ACM
Conference on Computer and Communications Security (New York, NY, USA,
2010), CCS ’10, ACM, pp. 645–647.
[10] COVA, M., BALZAROTTI, D., FELMETSGER, V., AND VIGNA, G. Swaddler:
An approach for the anomaly-based detection of state violations in web
applications. In Proceedings of the 10th International Conference on Recent
Advances in Intrusion Detection (Berlin, Heidelberg, 2007), RAID’07,
Springer-Verlag, pp. 63–86.
[11] DALTON, M., KOZYRAKIS, C., AND ZELDOVICH, N. Nemesis: Preventing
authentication & access control vulnerabilities in web applications. In USENIX
Security Symposium (2009), USENIX Association, pp. 267–282.
[12] DOUPÉ, A., BOE, B., KRUEGEL, C., AND VIGNA, G. Fear the ear:
Discovering and mitigating execution after redirect vulnerabilities. In
Proceedings of the 18th ACM Conference on Computer and Communications
Security (New York, NY, USA, 2011), CCS ’11, ACM, pp. 251–262.
[13] ENGLER, D., CHEN, D. Y., HALLEM, S., CHOU, A., AND CHELF, B. Bugs
as deviant behavior: A general approach to inferring errors in systems code. In
Proceedings of the Eighteenth ACM Symposium on Operating Systems
Principles (New York, NY, USA, 2001), SOSP ’01, ACM, pp. 57–72.
[14] FELMETSGER, V., CAVEDON, L., KRUEGEL, C., AND VIGNA, G. Toward
automated detection of logic vulnerabilities in web applications. In Proceedings
of the 19th USENIX Conference on Security (Berkeley, CA, USA, 2010),
USENIX Security’10, USENIX Association, pp. 10–10.
[15] FELT, A. P., FINIFTER, M., WEINBERGER, J., AND WAGNER, D. Diesel:
Applying privilege separation to database access. In Proceedings of the 6th
ACM Symposium on Information, Computer and Communications Security
(New York, NY, USA, 2011), ASIACCS ’11, ACM, pp. 416–422.
[16] FERRAIOLO, D. F., SANDHU, R., GAVRILA, S., KUHN, D. R., AND
CHANDRAMOULI, R. Proposed nist standard for role-based access control.
ACM Trans. Inf. Syst. Secur. 4, 3 (Aug. 2001), 224–274.
[17] GANAPATHY, V., KING, D., JAEGER, T., AND JHA, S. Mining
security-sensitive operations in legacy code using concept analysis. In
Proceedings of the 29th International Conference on Software Engineering
(Washington, DC, USA, 2007), ICSE ’07, IEEE Computer Society,
pp. 458–467.
[18] HORWITZ, S., REPS, T., AND BINKLEY, D. Interprocedural slicing using
dependence graphs. In Proceedings of the ACM SIGPLAN 1988 Conference on
Programming Language Design and Implementation (New York, NY, USA,
1988), PLDI ’88, ACM, pp. 35–46.
[19] JOVANOVIC, N., KRUEGEL, C., AND KIRDA, E. Pixy: A static analysis tool
for detecting web application vulnerabilities (short paper). In IN 2006 IEEE
SYMPOSIUM ON SECURITY AND PRIVACY (2006), pp. 258–263.
[20] KRISHNAMURTHY, A., METTLER, A., AND WAGNER, D. Fine-grained
privilege separation for web applications. In Proceedings of the 19th
international conference on World wide web (New York, NY, USA, 2010),
WWW ’10, ACM, pp. 551–560.
[28] XIE, Y., AND AIKEN, A. Static detection of security vulnerabilities in scripting
languages. In Proceedings of the 15th Conference on USENIX Security
Symposium - Volume 15 (Berkeley, CA, USA, 2006), USENIX-SS’06, USENIX
Association.
[29] YIP, A., WANG, X., ZELDOVICH, N., AND KAASHOEK, M. F. Improving
application security with data ﬂow assertions. In Proceedings of the ACM
SIGOPS 22Nd Symposium on Operating Systems Principles (New York, NY,
USA, 2009), SOSP ’09, ACM, pp. 291–304.
APPENDIX
A. Appendix
Table 6 shows the set of input information (hints) we provided
for our tool MACE. Gathering this information about each appli-
cation requires minimal effort and some familiarity with the appli-
cations, as discussed in Section 5.4.
Table 6: Provided Annotations to MACE
Application
phpns
DCPPortal
DNScript
myBloggie
miniBloggie
SCARF
WeBid
Input Variables
$globalvars[’rank’],
$_COOKIE[’cookie_auth’],
$_SESSION[’auth’],
$_SESSION[’username’],
$_SESSION[’userID’],
$_SESSION[’permissions’],
$_SESSION[’path’]
$_COOKIE["dcp5_member_id"],
$_COOKIE["dcp5_member_admin"],
$HTTP_COOKIE_VARS-
-["dcp5_member_admin"]
$_SESSION[’admin’],
$_SESSION[’member’]
$_SESSION[’username’],
$userid[’level’],
$_SESSION[’user_id’]
$_SESSION[’user’]
$_SESSION[’privlege’],
$_SESSION[’user_id’]
$_SESSION[’WEBID_LOGGED_IN’],
$user_data[’groups’],
$_SESSION[’WEBID_ADMIN_USER’],
$_SESSION[’WEBID_ADMIN_IN’],
$group[’can_sell’],
$group[’can_sell’],
$group[’auto_join’]
Role Values
(dynamic)
(dynamic)
1for admin,
0 for non-admin
1(for admin),
2 (for normal)
-
’admin’, ’user’
admin
role ﬂag,
user groups have
dynamic values
[21] PARNO, B., MCCUNE, J. M., WENDLANDT, D., ANDERSEN, D. G., AND
PERRIG, A. Clamp: Practical prevention of large-scale data leaks. In
Proceedings of the 2009 30th IEEE Symposium on Security and Privacy
(Washington, DC, USA, 2009), SP ’09, IEEE Computer Society, pp. 154–169.
[22] PELLEGRINO, G., AND BALZAROTTI, D. Toward black-box detection of logic
ﬂaws in web applications. In NDSS 2014, Network and Distributed System
Security Symposium, 23-26 February 2014, San Diego, USA (San Diego,
UNITED STATES, 02 2014).
[23] Ruby on rails website. http://rubyonrails.org/, 2011.
[24] SON, S., MCKINLEY, K. S., AND SHMATIKOV, V. Rolecast: ﬁnding missing
security checks when you do not know what checks are. In Proceedings of the
2011 ACM international conference on Object oriented programming systems
languages and applications (New York, NY, USA, 2011), OOPSLA ’11, ACM,
pp. 1069–1084.
[25] SRIVASTAVA, V., BOND, M. D., MCKINLEY, K. S., AND SHMATIKOV, V. A
Security Policy Oracle: Detecting Security Holes using Multiple API
Implementations. In PLDI’11: Proceedings of the 2011 ACM SIGPLAN
Conference on Programming Language Design and Implementation (San Jose,
CA, USA, 2011).
[26] SUN, F., XU, L., AND SU, Z. Static detection of access control vulnerabilities
in web applications. In Proceedings of the 20th USENIX conference on Security
(Berkeley, CA, USA, 2011), SEC’11, USENIX Association, pp. 11–11.
[27] TAN, L., ZHANG, X., MA, X., XIONG, W., AND ZHOU, Y. Autoises:
Automatically inferring security speciﬁcations and detecting violations. In
Proceedings of the 17th Conference on Security Symposium (Berkeley, CA,
USA, 2008), SS’08, USENIX Association, pp. 379–394.