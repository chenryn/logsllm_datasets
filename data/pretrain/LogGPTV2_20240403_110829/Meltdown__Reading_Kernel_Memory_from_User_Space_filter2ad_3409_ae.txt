7 Countermeasures
In this section, we discuss countermeasures against the
Meltdown attack. At ﬁrst, as the issue is rooted in the
hardware itself, we discuss possible microcode updates
and general changes in the hardware design. Second, we
discuss the KAISER countermeasure that has been de-
veloped to mitigate side-channel attacks against KASLR
which inadvertently also protects against Meltdown.
USENIX Association
27th USENIX Security Symposium    985
7.1 Hardware
Meltdown bypasses the hardware-enforced isolation of
security domains. There is no software vulnerabil-
ity involved in Meltdown. Any software patch (e.g.,
KAISER [20]) will leave small amounts of memory ex-
posed (cf. Section 7.2). There is no documentation
whether a ﬁx requires the development of completely
new hardware, or can be ﬁxed using a microcode update.
As Meltdown exploits out-of-order execution, a trivial
countermeasure is to disable out-of-order execution com-
pletely. However, performance impacts would be devas-
tating, as the parallelism of modern CPUs could not be
leveraged anymore. Thus, this is not a viable solution.
Meltdown is some form of race condition between the
fetch of a memory address and the corresponding per-
mission check for this address. Serializing the permis-
sion check and the register fetch can prevent Meltdown,
as the memory address is never fetched if the permission
check fails. However, this involves a signiﬁcant overhead
to every memory fetch, as the memory fetch has to stall
until the permission check is completed.
A more realistic solution would be to introduce a hard
split of user space and kernel space. This could be en-
abled optionally by modern kernels using a new hard-
split bit in a CPU control register, e.g., CR4. If the hard-
split bit is set, the kernel has to reside in the upper half
of the address space, and the user space has to reside in
the lower half of the address space. With this hard split,
a memory fetch can immediately identify whether such a
fetch of the destination would violate a security bound-
ary, as the privilege level can be directly derived from
the virtual address without any further lookups. We ex-
pect the performance impacts of such a solution to be
minimal. Furthermore, the backwards compatibility is
ensured, since the hard-split bit is not set by default and
the kernel only sets it if it supports the hard-split feature.
Note that these countermeasures only prevent Melt-
down, and not the class of Spectre attacks described by
Kocher et al. [40]. Likewise, their presented countermea-
sures [40] do not affect Meltdown. We stress that it is im-
portant to deploy countermeasures against both attacks.
7.2 KAISER
As existing hardware is not as easy to patch, there is a
need for software workarounds until new hardware can
be deployed. Gruss et al. [20] proposed KAISER, a
kernel modiﬁcation to not have the kernel mapped in
the user space. This modiﬁcation was intended to pre-
vent side-channel attacks breaking KASLR [29, 21, 37].
However, it also prevents Meltdown, as it ensures that
there is no valid mapping to kernel space or physical
memory available in user space.
In concurrent work
to KAISER, Gens et al. [14] proposed LAZARUS as a
modiﬁcation to the Linux kernel to thwart side-channel
attacks breaking KASLR by separating address spaces
similar to KAISER. As the Linux kernel continued the
development of the original KAISER patch and Win-
dows [53] and macOS [34] based their implementation
on the concept of KAISER to defeat Meltdown, we will
discuss KAISER in more depth.
Although KAISER provides basic protection against
Meltdown, it still has some limitations. Due to the design
of the x86 architecture, several privileged memory loca-
tions are still required to be mapped in user space [20],
leaving a residual attack surface for Meltdown, i.e., these
memory locations can still be read from user space. Even
though these memory locations do not contain any se-
crets, e.g., credentials, they might still contain pointers.
Leaking one pointer can sufﬁce to break KASLR, as the
randomization can be computed from the pointer value.
Still, KAISER is the best short-time solution currently
available and should therefore be deployed on all sys-
tems immediately. Even with Meltdown, KAISER can
avoid having any kernel pointers on memory locations
that are mapped in the user space which would leak in-
formation about the randomized offsets. This would re-
quire trampoline locations for every kernel pointer, i.e.,
the interrupt handler would not call into kernel code di-
rectly, but through a trampoline function. The trampo-
line function must only be mapped in the kernel. It must
be randomized with a different offset than the remaining
kernel. Consequently, an attacker can only leak pointers
to the trampoline code, but not the randomized offsets of
the remaining kernel. Such trampoline code is required
for every kernel memory that still has to be mapped in
user space and contains kernel addresses. This approach
is a trade-off between performance and security which
has to be assessed in future work.
The original KAISER patch [18] for the Linux kernel
has been improved [24, 25, 26, 27] with various opti-
mizations, e.g., support for PCIDs. Afterwards, before
merging it into the mainline kernel, it has been renamed
to kernel page-table isolation (KPTI) [49, 15]. KPTI is
active in recent releases of the Linux kernel and has been
backported to older versions as well [30, 43, 44, 42].
Microsoft implemented a similar patch inspired by
KAISER [53] named KVA Shadow [39]. While KVA
Shadow only maps a minimum of kernel
transition
code and data pages required to switch between address
spaces, it does not protect against side-channel attacks
against KASLR [39].
Apple released updates in iOS 11.2, macOS 10.13.2
and tvOS 11.2 to mitigate Meltdown. Similar to Linux
and Windows, macOS shared the kernel and user address
spaces in 64-bit mode unless the -no-shared-cr3 boot
option was set [46]. This option unmaps the user space
986    27th USENIX Security Symposium
USENIX Association
while running in kernel mode but does not unmap the
kernel while running in user mode [51]. Hence, it has
no effect on Meltdown. Consequently, Apple introduced
Double Map [34] following the principles of KAISER to
mitigate Meltdown.
8 Discussion
Meltdown fundamentally changes our perspective on the
security of hardware optimizations that manipulate the
state of microarchitectural elements. The fact that hard-
ware optimizations can change the state of microar-
chitectural elements, and thereby imperil secure soft-
ware implementations,
is known since more than 20
years [41]. Both industry and the scientiﬁc community
so far accepted this as a necessary evil for efﬁcient com-
puting. Today it is considered a bug when a crypto-
graphic algorithm is not protected against the microar-
chitectural leakage introduced by the hardware optimiza-
tions. Meltdown changes the situation entirely. Melt-
down shifts the granularity from a comparably low spa-
tial and temporal granularity, e.g., 64-bytes every few
hundred cycles for cache attacks, to an arbitrary granu-
larity, allowing an attacker to read every single bit. This
is nothing any (cryptographic) algorithm can protect it-
self against. KAISER is a short-term software ﬁx, but the
problem we have uncovered is much more signiﬁcant.
We expect several more performance optimizations in
modern CPUs which affect the microarchitectural state
in some way, not even necessarily through the cache.
Thus, hardware which is designed to provide certain se-
curity guarantees, e.g., CPUs running untrusted code, re-
quires a redesign to avoid Meltdown- and Spectre-like
attacks. Meltdown also shows that even error-free soft-
ware, which is explicitly written to thwart side-channel
attacks, is not secure if the design of the underlying hard-
ware is not taken into account.
With the integration of KAISER into all major oper-
ating systems, an important step has already been done
to prevent Meltdown. KAISER is a fundamental change
in operating system design. Instead of always mapping
everything into the address space, mapping only the min-
imally required memory locations appears to be a ﬁrst
step in reducing the attack surface. However, it might not
be enough, and even stronger isolation may be required.
In this case, we can trade ﬂexibility for performance and
security, by e.g., enforcing a certain virtual memory lay-
out for every operating system. As most modern oper-
ating systems already use a similar memory layout, this
might be a promising approach.
Meltdown also heavily affects cloud providers, espe-
cially if the guests are not fully virtualized. For per-
formance reasons, many hosting or cloud providers do
not have an abstraction layer for virtual memory.
In
such environments, which typically use containers, such
as Docker or OpenVZ, the kernel is shared among all
guests. Thus, the isolation between guests can simply be
circumvented with Meltdown, fully exposing the data of
all other guests on the same host. For these providers,
changing their infrastructure to full virtualization or us-
ing software workarounds such as KAISER would both
increase the costs signiﬁcantly.
Concurrent work has investigated the possibility to
read kernel memory via out-of-order or speculative ex-
ecution, but has not succeeded [13, 50]. We are the ﬁrst
to demonstrate that it is possible. Even if Meltdown is
ﬁxed, Spectre [40] will remain an issue, requiring differ-
ent defenses. Mitigating only one of them will leave the
security of the entire system at risk. Meltdown and Spec-
tre open a new ﬁeld of research to investigate to what ex-
tent performance optimizations change the microarchi-
tectural state, how this state can be translated into an ar-
chitectural state, and how such attacks can be prevented.
9 Conclusion
In this paper, we presented Meltdown, a novel software-
based attack exploiting out-of-order execution and side
channels on modern processors to read arbitrary ker-
nel memory from an unprivileged user space program.
Without requiring any software vulnerability and inde-
pendent of the operating system, Meltdown enables an
adversary to read sensitive data of other processes or vir-
tual machines in the cloud with up to 503 KB/s, affect-
ing millions of devices. We showed that the counter-
measure KAISER, originally proposed to protect from
side-channel attacks against KASLR, inadvertently im-
pedes Meltdown as well. We stress that KAISER needs
to be deployed on every operating system as a short-term
workaround, until Meltdown is ﬁxed in hardware, to pre-
vent large-scale exploitation of Meltdown.
Acknowledgments
Several authors of this paper found Meltdown indepen-
dently, ultimately leading to this collaboration. We want
to thank everyone who helped us in making this collabo-
ration possible, especially Intel who handled our respon-
sible disclosure professionally, comunicated a clear time-
line and connected all involved researchers. We thank
Mark Brand from Google Project Zero for contributing
ideas and Peter Cordes and Henry Wong for valuable
feedback. We would like to thank our anonymous re-
viewers for their valuable feedback. Furthermore, we
would like to thank Intel, ARM, Qualcomm, and Mi-
crosoft for feedback on an early draft.
USENIX Association
27th USENIX Security Symposium    987
Daniel Gruss, Moritz Lipp, Stefan Mangard and
Michael Schwarz were supported by the European Re-
search Council (ERC) under the European Union’s Hori-
zon 2020 research and innovation programme (grant
agreement No 681402).
Daniel Genkin was
supported by NSF awards
#1514261 and #1652259, ﬁnancial assistance award
70NANB15H328 from the U.S. Department of Com-
merce, National Institute of Standards and Technol-
ogy, the 2017-2018 Rothschild Postdoctoral Fellowship,
and the Defense Advanced Research Project Agency
(DARPA) under Contract #FA8650-16-C-7622.
References
[1] AMD. Software techniques for managing speculation on AMD
processors, 2018.
[2] ARM.
AArch64 Linux
kernel
port
(KPTI
base),
https://git.kernel.org/pub/scm/linux/kernel/
git/arm64/linux.git/log/?h=kpti 2018.
[3] ARM LIMITED. ARM CoreLink CCI-400 Cache Coherent In-
terconnect Technical Reference Manual, r1p5 ed. ARM Limited,
2015.
[4] BENGER, N., VAN DE POL, J., SMART, N. P., AND YAROM, Y.
“Ooh Aah... Just a Little Bit”: A small amount of side channel
can go a long way. In CHES’14 (2014).
[5] BOLDIN, P. Meltdown reading other process’s memory, https:
//www.youtube.com/watch?v=EMBGXswJC4s Jan 2018.
[6] BURGESS, B. Samsung Exynos M1 Processor.
Chips (2016).
In IEEE Hot
[7] CARVALHO, R.
Twitter: Meltdown with uncached mem-
https://twitter.com/raphael_scarv/status/
ory,
952078140028964864 Jan 2018.
[8] CHENG, C.-C. The schemes and performances of dynamic
branch predictors. Berkeley Wireless Research Center, Tech. Rep
(2000).
[9] DEVIES, A. M. AMD Takes Computing to a New Hori-
zon with RyzenTMProcessors, https://www.amd.com/en-
us/press-releases/Pages/amd-takes-computing-
2016dec13.aspx 2016.
[10] ECLYPSIUM. System Management Mode Speculative Execution
https://blog.eclypsium.com/2018/05/17/
Attacks,
system-management-mode-speculative-execution-
attacks/ May 2018.
[11] EDGE, J. Kernel address space layout randomization, https:
//lwn.net/Articles/569635/ 2013.
[12] EICKEMEYER, R., LE, H., NGUYEN, D., STOLT, B., AND
Load lookahead prefetch for microproces-
https://encrypted.google.com/patents/
THOMPTO, B.
sors, 2006.
US20060149935 US Patent App. 11/016,236.
[13] FOGH, A. Negative Result: Reading Kernel Memory From
User Mode, https://cyber.wtf/2017/07/28/negative-
result-reading-kernel-memory-from-user-mode/
2017.
[14] GENS, D., ARIAS, O., SULLIVAN, D., LIEBCHEN, C., JIN, Y.,
AND SADEGHI, A.-R. Lazarus: Practical side-channel resilient
kernel-space randomization. In International Symposium on Re-
search in Attacks, Intrusions, and Defenses (2017).
[15] GLEIXNER, T.
x86/kpti: Kernel Page Table Isolation
(was KAISER), https://lkml.org/lkml/2017/12/4/709
Dec 2017.
[16] GRAS, B., RAZAVI, K., BOSMAN, E., BOS, H., AND GIUF-
FRIDA, C. ASLR on the Line: Practical Cache Attacks on the
MMU. In NDSS (2017).
[17] GRISENTHWAITE, R. Cache Speculation Side-channels, 2018.
[18] GRUSS, D. [RFC, PATCH] x86 64: KAISER - do not map kernel
in user mode, https://lkml.org/lkml/2017/5/4/220 May
2017.
[19] GRUSS, D., LETTNER, J., SCHUSTER, F., OHRIMENKO, O.,
HALLER, I., AND COSTA, M. Strong and Efﬁcient Cache Side-
Channel Protection using Hardware Transactional Memory.
In
USENIX Security Symposium (2017).
[20] GRUSS, D., LIPP, M., SCHWARZ, M., FELLNER, R., MAU-
RICE, C., AND MANGARD, S. KASLR is Dead: Long Live
In International Symposium on Engineering Secure
KASLR.
Software and Systems (2017), Springer, pp. 161–176.
[21] GRUSS, D., MAURICE, C., FOGH, A., LIPP, M., AND MAN-
GARD, S. Prefetch Side-Channel Attacks: Bypassing SMAP and
Kernel ASLR. In CCS (2016).
[22] GRUSS, D., MAURICE, C., WAGNER, K., AND MANGARD,
S. Flush+Flush: A Fast and Stealthy Cache Attack. In DIMVA
(2016).
[23] GRUSS, D., SPREITZER, R., AND MANGARD, S. Cache
Template Attacks: Automating Attacks on Inclusive Last-Level
Caches. In USENIX Security Symposium (2015).
[24] HANSEN, D. [PATCH 00/23] KAISER: unmap most of the kernel
from userspace page tables, https://lkml.org/lkml/2017/
10/31/884 Oct 2017.
[25] HANSEN, D.
[v2] KAISER: unmap most of the kernel from
userspace page tables, https://lkml.org/lkml/2017/11/
8/752 Nov 2017.