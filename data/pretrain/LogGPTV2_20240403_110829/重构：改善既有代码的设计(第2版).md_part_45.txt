顶层作用域..
调用方..
get charge()
get charge()f
get basecharge() {
function charge(customer
monthcharge = charge(customer, usage, provider);
中。
monthcharge = new Chargecalculator(customer, usage, provider).charge;
return basecharge + this._provider.connectioncharge;
const
return new Chargecalculator(customer, usage, provider).charge;
现在所有逻辑处理都集中到一个函数了，
然后对支持函数使用内联函数（115）
接下来要考虑如何处理支持函数（也就是这里的basecharge函数）。对于有
首先，我用提炼函数（106）把命令对象的创建与调用过程包装到一个函数
命令类足够小、足够简单，
seCharge = this.basecharge;
usage,
 provider）
变成函数更合适。
下一步是把构造函数传入的数据移
---
## Page 423
charge(customer, usage, provider） {
class ChargeCalculator...
误而测试没有失败，我就应该考虑增加测试了。
中漏掉了一处对字段的使用没有修改，
用这个字段。但我更愿意去掉这条赋值语句，因为去掉它以后，
charge(customer,
class ChargeCalculator...
行，
function charge(customer, 
顶层作用域...
constructor (customer,
class ChargeCalculator...
constructor (customer,
this._usage 
this._customer
return new ChargeCalculator(
this._provider
this..
每次使用一个参数。
构造函数中对this.
然后修改charge函数的实现，改为使用传入的参数。这个修改可以小步进
其他参数也如法炮制，
abesn-
= usage;
= usage;
，usage,provider）{
= provider;
 provider;
 usage, provider){
.charge(customer, usage, 
tusage, provider){
 usage,
_customer字段的赋值不删除也没关系，
，直到charge函数不再使用任何字段:
provider）{
eRate
 usage,
测试就会失败。
，provider)
 provider)
（如果我真的犯了这个错
，如果在函数实现
因为反正没人使
---
## Page 424
function charge(customer,
顶层作用域...
（115）的一种特殊情况，我需要把构造函数和执行函数一并内联。
const baseCharge = customer.baseRate *
return basecharge
现在命令类已经是死代码了，可以用移除死代码（237）给它一个体面的葬
const baseCharge = customer.baseRate
现在我就可以把所有逻辑都内联到顶层的charge函数中。这是内联函数
usage,
provider)
*nusage;
---
## Page 425
来适合使用继承的场景变得不再合适-
么我会通过以子类取代类型码（362）
删除旧类。
专门用来处理此类调整：函数上移（350）
等你用上一段时间，遇见了痛点，才能察觉误用所在。
（381）或以委托取代超类（399）将继承体系转化成委托调用。
（375）
（355）
继承本身是一个强有力的工具，
特性（主要是函数和字段）经常需要在继承体系里上下调整。我有一组手法
，与任何强有力的特性一样，继承机制十分实用，
在最后一章里，
：移除子类（369）以及折叠继承体系（380）来为继承体系添加新类或
、函数下移（359）以及字段下移（361）。
，如果一个字段仅仅作为类型码使用，
，我将介绍面向对象编程技术里最为人熟知的一个特性：继
第12章处理继承关系
，但有时它也可能被用于错误的地方，
，用一个子类来取代这样的字段。
一若果真如此，我就会用以委托取代子类
字段上移（353）、构造函数本体上
 根据其值来触发不同的行为，那
，却也经常被误用，而且常得
我可以使用提炼超类 
，有时本
---
## Page 426
lass Salesman extends Employee {...
class Engineer extends Employee
class Salesman extends Employee 
class Employee {...}
getname(）{..
12.1
assEmployee
getna
反向重构：函数下移（359)
函数上移（Pull UpMethod)
---
## Page 427
·如果待提升函数的签名不同，
·检查函数体内引用的所有函数调用和字段都能从超类中调用到。
·检查待提升函数，确定它们是完全一致的。
它们。
特性（类或者函数）提升到超类。
而不出现于超类的特性。此时，
单的办法就是先分别对这些函数应用函数参数化（310），然后应用函数上移。
的函数，而它们又可以通过某种形式的参数调整成为相同的函数。
获：它们经常会向我展示那些我忘记测试的行为。
的测试有充分的信心。我发现，观察这些可能重复的函数之间的差异往往大有收
显。我也可以只管放心地重构，
到的），这就是最显而易见的函数上移适用场合。
临“修改其中一个却未能修改另一
时日却只会成为滋生bug的温床。
class Engineer extends Employee {...}
构，直到其函数体完全一致。
做法
动机
你想要在超类中使用的签名。
 如果两个函数工作流程大体相似，但实现细节略有差异，那么我会考虑先借
 函数上移过程中最麻烦的一点就是，
函数上移常常紧随其他重构而被使用。
避免重复代码是很重要的。
如果它们做了相同的事情，但函数体并不完全一致，那就先对它们进行重
，使用改变函数声明（124）将那些签名都修改为
我就得用字段上移（353）和函数上移先将这些
再看看测试程序会不会发牢骚，但这就需要对我
一个"的风险。通常，找出重复也有一定的难度
。无论何时，
重复的两个函数现在也许能够正常工作，
，被提升的函数可能会引用只出现于子类
，也许我能找出若干个身处不同子类内
只要系统内出现重复，
当然，情况并不总是如此明
，这时候，最简
你就会面
，但假以
---
## Page 428
class Party...
class Department...
的函数名。
明为Party类上的抽象函数，否则编译器就会报错。
语言，这样做没有问题；但如果是在一门静态语言里，我就必须将monthlycost声
未在超类中定义，而是在两个子类中各自定义了一份实现。因为JavaScript是动态
get totalAnnualcost()
class Department extends Party...
class Employee extends Party..
get annualcost(） {
·在超类中新建一个函数，将某一个待提升函数的代码复制到其中。
范例
逐一移除待提升的子类函数，直到只剩下超类中的函数为止。
1
移除一个待提升的子类函数。
执行静态检查。
测试。
两个函数各有不同的名字，
 检查两个类的函数时我发现，两个函数都引用了monthlycost属性，但后者并
然后，我从其中一个子类中将annualcost函数复制到超类。
我手上有两个子类，它们之中各有一个函数做了相同的事情:
因此第一步是用改变函数声明（124）统一它们
---
## Page 429
的名字。
class Party...
方式是添加一个如下的陷阱（trap）函数。
无疑也有很大的价值，特别是对日后需要添加子类的后来者。其中一种好的传达
工作，这得益于JavaScript是动态语言，它能自动帮你调用子类上的同名函数。但
数中调用了monthlycost，但后者并未在Party类中显式声明。
Employee中移除annualcost函数，测试，接着移除Department类中的annualcost函
get monthlycost(）{
数。
能正常工作。但这是在JavaScript里，编译显然帮不上什么忙，因此我直接先从 
get annualcost() {
 throw new SubciassResponsibilityError();
return this.monthlyCost * 12;
 我称上述抛出的错误为一个“子类未履行职责错误"，这是从Smalltalk借鉴来
这项重构手法至此即告完成，
 在静态语言里，做完这一步我就可以编译一次，确保超类函数的所有引用都
但还有一个遗留问题需要解决：annualcost函
 当然代码仍能正常
---
## Page 430
们拥有重复特性，特别是字段更容易重复。这样的字段有时拥有近似的名字，但
class Engineer extends Employee {
class Employee {...} // Java
动机
, protected String name;
12.2字段上移（Pull UpField)
如果各子类是分别开发的，
反向重构：字段下移（361)
 或者是在重构过程中组合起来的，
你常会发现它
---
## Page 431
·测试。
·移除子类中的字段。
·如果这些字段的名称不同，先使用变量改名（137）为它们取个相同的名字。
同时完成声明。
可以将使用该字段的行为从子类移至超类，
（355）后的必然结果。
们。如果它们被使用的方式很相似，我就可以将它们提升到超类中去。
也并非绝对如此。
够）。
做法
在超类中新建一
针对待提升之字段，
许多动态语言不需要在类定义中定义字段，
本项重构可从两方面减少重复：
新字段需要对所有子类可见（在大多数语言中protected权限便已足
。在这种情况下，字段上移基本上是应用构造函数本体上移 
一个字段。
，判断若干字段是否重复，
，检查它们的所有使用点，确认它们以同样的方式被使用。
首先它去除了重复的数据声明；其次它使我
，唯一的办法就是观察函数如何使用它
从而去除重复的行为。
相反，
 字段是在第一次被赋值的
---
## Page 432
到更多的限制。
动机
class Employee extends Party {
class Party {
class Party {...}
12.3构造函数本体上移（Pull Up Constructor Body）
this
this._monthlyCost = monthlycost;
this
构造函数是很奇妙的东西。
monthlycost = monthlycost;
name
id;
name;
，id，monthlycost）{
constructor
，它们不是普通函数，使用它们比使用普通函数受
constructor
4
constructor
---
## Page 433
移动语句（223）将Employee中的这行赋值语句移动到super（）调用后面：
·如果超类还不存在构造函数，首先为其定义一个。确保让子类调用超类的构造
对一些做法与函数的调用次序有所限制。要对付它们，我需要略微不同的做法
class Employee extends Party {
class Party {}
提升至超类。但构造函数的出现打乱了我的算盘，因为它们附加了特殊的规则,
数（106）将它们提炼到一个独立函数中，然后使用函数上移（350）将这个函数
// rest of class.
范例
做法
（334）。
// rest of class.
函数上移（350）提升之。
如果存在无法简单提升至超类的公共代码，先应用提炼函数（106），再利用
测试。
用到的变量，将其作为参数传递给超类的构造函数。
逐一移除子类间的公共代码，将其提升至超类构造函数中。对于公共代码中引
调用语句之后。
使用移动语句（223）将子类中构造函数中的公共语句移动到超类的构造函数
函数。
Party的两个子类间存在公共代码，也即是对名字（name）的赋值。我先用
this._staff = staff;
thi
super()
this._monthlycost = monthlycost;
this
thi
super();
 如果重构过程过于复杂，我会考虑转而使用以工厂函数取代构造函数
我以下列“雇员"的例子开始：
 如果我看见各个子类中的函数有共同行为，我的第一个念头就是使用提炼函
name
name = name;
 name;
extends Party {
---
## Page 434
class Employee...
初始化提升至超类，这时问题便来了。
class Department...
class Employee...
constructor (name) {...}
化共用的数据，
constructor(name, staff){
class Party...
constructor(name, id， monthlycost） {
constructor(name){
个子类构造函数传入的参数name，于是我将该参数一并传给超类构造函数。
class Employee extends Party {
 super(name);
 this._name = name;