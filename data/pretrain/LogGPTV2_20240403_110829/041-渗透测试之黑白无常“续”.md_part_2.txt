2020/7/27 渗透测试之⿊⽩⽆常“续”
上 ⾯ 都 是 进 ⾏ 参 数 拼 装 ， 将 所 有 的 参 数 给 拼 装 到 $params 变 量 中 ， 跟 踪
get_rows_data⽅法查看。
根据上图可以看出来这⾥的SQL语句拼装的，直接将album_id放⼊了SQL语句进⾏执
⾏，调⽤WordPress的DB进⾏数据库查询。也就是说如果我们不使⽤前⾯过滤掉的特
殊符号就可以进⾏SQL注⼊。
基本的漏洞点应该已经存在了，但是该处的URL地址还不清楚，所以还需要查找利⽤
点，查看如何访问这个⽂件的，搜索该⽂件类名Albumsgalleries。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 12/21
2020/7/27 渗透测试之⿊⽩⽆常“续”
进⼊查看。
WordPress中的add_action是添加动作的，也就是添加到admin_ajax⽂件的，后⾯
还拼装了⼀个$this->prefix参数，查看该参数的值。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 13/21
2020/7/27 渗透测试之⿊⽩⽆常“续”
默认值为bwg，所以根据WordPress的规则这⾥拼出的URL应该就是：
1 http://localhost/wordpress-5.2.3/wp-admin/admin-ajax.php?action=albumsgal
本地使⽤SQLMap进⾏测试，是否存在注⼊：
1 python sqlmap.py -u "http://localhost/wordpress-5.2.3/wp-admin/admin-ajax
注⼊成功，配图为本地配图，实际当时只有时间盲注。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 14/21
2020/7/27 渗透测试之⿊⽩⽆常“续”
漏漏漏漏漏漏漏漏漏漏漏漏漏漏漏洞洞洞洞洞洞洞洞洞洞洞洞洞洞洞利利利利利利利利利利利利利利利⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤⽤之之之之之之之之之之之之之之之过过过过过过过过过过过过过过过狗狗狗狗狗狗狗狗狗狗狗狗狗狗狗
通过以上分析，我们已经可以针对⽬标系统进⾏SQL注⼊，但是在代码审计后使⽤相同
⽅法对⽬标站进⾏测试的时候，发现其⽹站安装了安全防护软件“安全狗”。
遇到安全狗，突然想到前⾯有⼀个stripslashes函数，该函数可以删除反斜杠，这样可
以将payload：
1 1 AND (SELECT 5603 FROM (SELECT(SLEEP(5)))yBYg)
结构造成：
1 1 AN\D (SELE\CT 5603 FR\OM (SEL\ECT(SL\EEP(5)))yBYg)
这样理论上就可以绕过安全检测，可是想法很美好，现实很⻣感，WordPress所有的
GET参数符号都会⾃带\，这⾥的删除反斜杠后，还是会留⼀个，所以该⽅法未利⽤成
功。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 15/21
2020/7/27 渗透测试之⿊⽩⽆常“续”
除了程序⾃带的特殊符号过滤以外，还存在安全狗的防护，可是安全狗的规则是⽐较好
绕过的，⽐如：编码转换，内联注释等等。
⽐如该注⼊点基于时间的盲注payload是如下格式：
1 admin-ajax.php?action=albumsgalleries_bwg&album_id=1 AND (SELECT 4072 FRO
但是直接使⽤该payload进⾏访问会直接被安全狗拦截。
但是如果使⽤：
1 admin-ajax.php?action=albumsgalleries_bwg&album_id=1 AND (/*!SELECT/*!/*/
就不会被拦截，将SELECT和SLEEP等关键词使⽤内联注释的⽅式给包裹起来，就可以
绕过安全狗的检测。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 16/21
2020/7/27 渗透测试之⿊⽩⽆常“续”
但是⼀般基于时间的盲注都是将字⺟转为ASCII码值进⾏⽐对，使⽤⼤于或者⼩于号可
以快速锁定⽬标字⺟的ASCII码值，⽐如：
1 select if(ascii(substr(database(),1,1))>100,sleep(10),1)
如果当前数据库第⼀个字⺟或数字的ASCII码值⼤于100就会延迟10秒返回，如果ASCII
码值⼩于100就会直接返回，通过这样的⽅式可以快速定位到数据库名的第⼀个字符，
但是该⽬标⽹站除了有安全狗以外，还有程序本身的过滤。
WordPress⾃带的esc_html函数将  & " '（⼩于号，⼤于号，&，双引号，单引
号）编码，转成HTML 实体，已经是实体的并不转换，所以本次SQL注⼊全程的SQL语
句不能使⽤上诉符号，但是可以使⽤等号，也就是只能⼀个ASCII码值⼀个ASCII码值的
对⽐，来进⾏SQL注⼊。最后拼接出来的payload如下：
1 http://192.168.121.128/wordpress-5.2.3/wp-admin/admin-ajax.php?action=alb
但是在实际运⾏中该payload还是被安全狗拦截，怀疑应该是and这个关键词被过滤
了，使⽤编码的⽅式将and换为%26%26重新拼装payload：
1 http://192.168.121.128/wordpress-5.2.3/wp-admin/admin-ajax.php?action=alb
这个payload虽然安全狗不拦截了，但是程序报错，提示SQL语法错误。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 17/21
2020/7/27 渗透测试之⿊⽩⽆常“续”
%26转换为实体就是符号“&”，这样虽然过了安全狗的规则，但是程序使⽤esc_html
将“&”符号给转换为实体了，所以导致SQL语句报错。这⾥就使⽤内联注释来处理
and，最终的payload如下：
1 http://192.168.121.128/wordpress-5.2.3/wp-admin/admin-ajax.php?action=alb
当ASCII码值⼀致的时候，程序将延⻓10秒返回。
当ASCII码值不⼀致的时候，程序直接返回。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 18/21
2020/7/27 渗透测试之⿊⽩⽆常“续”
⼀个⼀个的⼿⼯测试实在麻烦，⼜不想去写脚本，怎么办呢？可以直接丢到Burp Suite
的Intruder模块进⾏遍历处理。
将118那个位置添加为变量。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 19/21
2020/7/27 渗透测试之⿊⽩⽆常“续”
ASCII码写48-126就⾏，前⾯的都是⼀些符号什么的基本可以过滤掉，因为我这⾥是延
迟函数，并且设置的10秒延迟，所以不出意外的情况爆破出来的结果那个在最后哪个就
是正确的。
通过此⽅法即可进⾏查询表和数据了，⽅法都类似。
本次测试到这⾥就结束了，由于本次项⽬的⽬的是发现漏洞为主，所以没有进⾏后续操
作。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 20/21
2020/7/27 渗透测试之⿊⽩⽆常“续”
结结结结结结结结结结结结结结结语语语语语语语语语语语语语语语
本⽂主要是通过信息收集进⼊到后台，⼜针对WoedPress的Photo Galler插件进⾏代
码审计，找到漏洞后却在实际利⽤过程中遇到了安全防护，在绕过安全防护后成功利⽤
系统漏洞。
在本次项⽬中其实⾛过很过弯路，趟过很多坑，期间IP也被封了好多次，后来在本地搭
建相同环境进⾏测试，才得以绕过，如果遇到有安全设备拦截的情况，最好不要直接去
线上环境进⾏测试，在本地复现，测试通过后再去线上环境测试，可以减少很多⻛险。
https://mp.weixin.qq.com/s/J0IEU27yIPycIoPvJo1OaA 21/21