### 6.4 Coverage-Guided Kernel Fuzzers

A project called syzkaller, developed by Vyukov, is the first publicly available gray-box coverage-guided kernel fuzzer [10]. Nossum and Casanovas demonstrated that most Linux file system drivers are vulnerable to feedback-driven fuzzing using a modified version of AFL [34]. This modified AFL version includes glue code for the kernel, providing a driver interface to measure feedback during the fuzzing of file system drivers and expose this data to user space. The fuzzer runs inside the targeted operating system, and a crash terminates the fuzzing session.

In 2016, Hertz and Newsham released TriforceAFL, a modified version of AFL [7]. Their work modifies QEMU to use its emulation backend to measure fuzzing progress by determining the current instruction pointer after a control flow-altering instruction has been executed. In theory, their fuzzer can fuzz any OS emulated in QEMU. However, in practice, it is limited to operating systems that can boot from read-only file systems, such as classic UNIX-like systems like Linux, FreeBSD, NetBSD, or OpenBSD. Consequently, TriforceAFL cannot currently fuzz closed-source operating systems like macOS or Windows.

### 7 Discussion

Although our approach is general, fast, and largely independent of the underlying OS, there are some limitations worth discussing.

#### OS-Specific Code
We use a small amount (typically less than 150 lines) of OS-dependent ring 3 code to perform three tasks:
1. Interact with the OS to translate inputs from the fuzzing engine into interactions with the OS (e.g., mounting the data as a partition).
2. Obtain the address of the OS's crash handler to detect crashes more quickly than waiting for a timeout.
3. Return the addresses of certain drivers to limit tracing to the activity of these drivers, improving performance when fuzzing individual drivers.

These functions, while not strictly necessary, can improve performance in some cases. The first use case can be avoided by using generic syscall fuzzing, where a single standard C program without platform-specific APIs would suffice to trigger sysenter/syscall instructions. We do not need the address of the crash handler, as there are other ways to detect VM crashes. It is also possible to dynamically obtain crash handlers by introducing faults and analyzing the traces. Finally, we can trace the entire kernel, albeit with a slight performance hit due to increased non-determinism. In summary, this is the first approach that can fuzz arbitrary x86-64 kernels without customization and with near-native performance.

#### Supported CPUs
Our approach is limited to Intel CPUs supporting Intel PT and Intel VT-x. Most modern Intel CPUs support Intel VT-x, but Intel is vague about which CPUs support process tracing within VMs and other extensions like IP filtering and multi-entry ToPA. We tested our system on the following CPU models: Intel Core i5-6500, Intel Core i7-6700HQ, and Intel Core i5-6600. At the time of writing, most Skylake and Kaby Lake CPUs have the necessary hardware support.

#### Just-In-Time Code
Intel PT does not provide a complete list of executed instruction pointers; instead, it generates minimal information to reduce the amount of data produced. The Intel PT software decoder requires both control flow information and the program executed during tracing to reconstruct the control flow. If the program is modified at runtime, as often happens with just-in-time (JIT) compilers in user and kernel modes, the decoder cannot accurately restore the runtime control flow. To bypass this, the decoder needs information about all modifications applied to the program. As shown by Deng et al. [18], this can be achieved by using EPT violations when executing written pages or shadow page tables [19]. Reimplementing this technique was out of the scope of this work. Fuzzing kernel JIT code is an interesting topic, as kernel JIT components, such as the BPF JIT in Linux, have often been part of serious vulnerabilities.

#### Multibyte Compares
Similar to AFL, we struggle to effectively bypass checks for large magic values in inputs. However, we support specifying dictionaries of interesting constants to improve performance if such magic values are known in advance (e.g., from RFCs, source code, or disassembly). Techniques like concolic execution (e.g., Driller [37]) or taint tracking (e.g., Vuzzer [35]) have been proposed, but they are difficult to adapt to closed-source operating system kernels. Thus, dealing with these situations at the kernel level remains an open research problem.

#### Ring 3 Fuzzing
We have demonstrated this technique against kernel-level code, but it can also be used to fuzz closed-source ring 3 code. Given our approach's low tracing overhead, we expect it to outperform current dynamic binary instrumentation-based techniques for feedback fuzzing of closed-source ring 3 programs, such as winAFL [20].

### 8 Conclusion

The latest generation of feedback-driven fuzzing methods has proven effective in finding vulnerabilities in an automated and comprehensive manner. Recent work has shown that these techniques can be applied to kernel space. While previous feedback-driven kernel fuzzers found many security flaws in certain operating systems, their benefits were limited by poor performance due to CPU emulation or a lack of portability due to compile-time instrumentation requirements.

In this paper, we presented a novel mechanism to utilize the latest CPU features for a feedback-driven kernel fuzzer. Our evaluation shows that combining all components provides the ability to apply kernel fuzz testing to any target OS with significantly better performance than alternative approaches.

### Acknowledgment

This work was supported by the German Federal Ministry of Education and Research (BMBF Grant 16KIS0592K HWSec). We thank our shepherd Suman Jana for his support in finalizing this paper and the anonymous reviewers for their constructive and valuable comments. We also thank Ralf Spenneberg and Hendrik Schwartke from OpenSource Security for their support. Finally, we thank Ali Abbasi, Tim Blazytko, Teemu Rytilahti, and Christine Utz for their valuable feedback.

### References

[1] Announcing oss-fuzz: Continuous fuzzing for open source software. https://testing.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html. Accessed: 2017-06-29.

[2] Capstone disassembly framework. http://www.capstone-engine.org/. Accessed: 2017-06-29.

[3] A general-purpose fuzzer. https://github.com/aoh/radamsa. Accessed: 2017-06-29.

[4] Intel Processor Trace Decoder Library. https://github.com/01org/processor-trace. Accessed: 2017-06-29.

[5] Linux 4.8, perf Documentation. https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/tools/perf/Documentation/intel-pt.txt?id=refs/tags/v4.8. Accessed: 2017-06-29.

[6] Peach. http://www.peachfuzzer.com/. Accessed: 2017-06-29.

[7] Project Triforce: Run AFL on Everything! https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2016/june/project-triforce-run-afl-on-everything/. Accessed: 2017-06-29.

[8] Security-oriented fuzzer with powerful analysis options. https://github.com/google/honggfuzz. Accessed: 2017-06-29.

[9] Sulley. https://github.com/OpenRCE/sulley. Accessed: 2017-06-29.

[10] syzkaller: Linux syscall fuzzer. https://github.com/google/syzkaller. Accessed: 2017-06-29.

[11] Trinity: Linux system call fuzzer. https://github.com/kernelslacker/trinity. Accessed: 2017-06-29.

[12] zzuf. https://github.com/samhocevar/zzuf. Accessed: 2017-06-29.

[13] O. Bastani, R. Sharma, A. Aiken, and P. Liang. Synthesizing program input grammars. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2017.

[14] M. Böhme, V.-T. Pham, and A. Roychoudhury. Coverage-based greybox fuzzing as Markov chain. In ACM Conference on Computer and Communications Security (CCS), 2016.

[15] C. Cadar, D. Dunbar, and D. R. Engler. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Symposium on Operating Systems Design and Implementation (OSDI), 2008.

[16] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley. Unleashing Mayhem on Binary Code. In IEEE Symposium on Security and Privacy, 2012.

[17] S. K. Cha, M. Woo, and D. Brumley. Program-adaptive mutational fuzzing. In IEEE Symposium on Security and Privacy, 2015.

[18] Z. Deng, X. Zhang, and D. Xu. Spider: Stealthy binary program instrumentation and debugging via hardware virtualization. In Annual Computer Security Applications Conference (ACSAC), 2013.

[19] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: malware analysis via hardware virtualization extensions. In ACM Conference on Computer and Communications Security (CCS), 2008.

[33] D. Molnar, X. C. Li, and D. Wagner. Dynamic Test Generation to Find Integer Bugs in x86 Binary Linux Programs. In USENIX Security Symposium, 2009.

[34] V. Nossum and Q. Casasnovas. Filesystem Fuzzing with American Fuzzy Lop. Vault 2016, 2016.

[35] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos. Vuzzer: Application-aware evolutionary fuzzing. In Symposium on Network and Distributed System Security (NDSS), 2017.

[36] A. Rebert, S. K. Cha, T. Avgerinos, J. M. Foote, D. Warren, G. Grieco, and D. Brumley. Optimizing seed selection for fuzzing. In USENIX Security Symposium, 2014.

[37] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna. Driller: Augmenting fuzzing through selective symbolic execution. In Symposium on Network and Distributed System Security (NDSS), 2016.

[38] J. Viide, A. Helin, M. Laakso, P. Pietikäinen, M. Seppänen, K. Halunen, R. Puuperä, and J. Röning. Experiences with model inference assisted fuzzing. In USENIX Workshop on Offensive Technologies (WOOT), 2008.

[39] T. Wang, T. Wei, G. Gu, and W. Zou. TaintScope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection. In IEEE Symposium on Security and Privacy, 2010.

[40] M. Woo, S. K. Cha, S. Gottlieb, and D. Brumley. Scheduling black-box mutational fuzzing. In ACM Conference on Computer and Communications Security (CCS), 2013.

[20] Fratric, Ivan. WinAFL: A fork of AFL for fuzzing Windows binaries. https://github.com/ivanfratric/winafl, 2017.

[21] V. Ganesh, T. Leek, and M. Rinard. Taint-based directed whitebox fuzzing. In International Conference on Software Engineering (ICSE), 2009.

[22] P. Godefroid, N. Klarlund, and K. Sen. DART: Directed Automated Random Testing. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2005.

[23] P. Godefroid, M. Y. Levin, and D. Molnar. SAGE: Whitebox Fuzzing for Security Testing. Queue, 10(1):20, 2012.

[24] P. Godefroid, H. Peleg, and R. Singh. Learn&fuzz: Machine learning for input fuzzing. Technical report, January 2017.

[25] P. Goodman. Shin GRR: Make Fuzzing Fast Again. https://blog.trailofbits.com/2016/11/02/shin-grr-make-fuzzing-fast-again/. Accessed: 2017-06-29.

[26] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos. Dowsing for overflows: A guided fuzzer to find buffer boundary violations. In USENIX Security Symposium, 2013.

[27] C. Holler, K. Herzig, and A. Zeller. Fuzzing with code fragments. In USENIX Security Symposium, 2012.

[28] Intel. Intel® 64 and IA-32 Architectures Software Developer’s Manual (Order number: 325384-058US, April 2016).

[29] A. Kleen. simple-pt: Simple Intel CPU processor tracing on Linux. https://github.com/andikleen/simple-pt.

[30] A. Kleen and B. Strong. Intel Processor Trace on Linux. Tracing Summit 2015, 2015.

[31] Microsoft. FSCTL_DISMOUNT_VOLUME. https://msdn.microsoft.com/en-us/library/windows/desktop/aa364562(v=vs.85).aspx, 2017.

[32] Microsoft. VHD Reference. https://msdn.microsoft.com/en-us/library/windows/desktop/dd323700(v=vs.85).aspx, 2017.