title:An experimental study of home gateway characteristics
author:Seppo H&quot;at&quot;onen and
Aki Nyrhinen and
Lars Eggert and
Stephen D. Strowes and
Pasi Sarolahti and
Markku Kojo
An Experimental Study of Home Gateway Characteristics
Seppo Hätönen
University of Helsinki
shatonen@cs.helsinki.ﬁ
Stephen Strowes
University of Glasgow
PI:EMAIL
Aki Nyrhinen
University of Helsinki
anyrhine@cs.helsinki.ﬁ
Lars Eggert
Nokia Research Center
PI:EMAIL
Pasi Sarolahti
HIIT / Aalto University
pasi.sarolahti@iki.ﬁ
Markku Kojo
University of Helsinki
kojo@cs.helsinki.ﬁ
ABSTRACT
Many residential and small business users connect to the Internet
via home gateways, such as DSL and cable modems. The charac-
teristics of these devices heavily inﬂuence the quality and perfor-
mance of the Internet service that these users receive. Anecdotal
evidence suggests that an extremely diverse set of behaviors ex-
ists in the deployed base, forcing application developers to design
for the lowest common denominator. This paper experimentally
analyzes some characteristics of a substantial number of differ-
ent home gateways: binding timeouts, queuing delays, throughput,
protocol support and others.
Categories and Subject Descriptors
C.4 [Performance of Systems]: Performance Attributes; C.2.6
[Computer Communication Networks]: Internetworking
General Terms
Experimentation, Measurement, Performance
Keywords
Home Gateways, Behavior, Characteristics, Measurements
1.
INTRODUCTION
Many residential and small business users connect to the Inter-
net through “home gateways” – a colloquial term for customer-
premises equipment (CPE) that includes DSL and cable modems,
WLAN access points and even some kinds of (wired) Ethernet
switches. The common deﬁning characteristic of home gateways
is that they do not just perform Ethernet switching or basic IP for-
warding over various link-layer technologies. They also perform
higher-layer operations, such as network address translation (NAT)
or, more often, network address and port translation (NAPT). Usu-
ally, they include trafﬁc ﬁltering “ﬁrewall” functions, act as DHCP
servers, and proxy DNS trafﬁc. Many models offer other advanced
features, including trafﬁc prioritization, shaping, web and email
virus and “phishing” protection, etc.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’10, November 1–3, 2010, Melbourne, Australia.
Copyright 2010 ACM 978-1-4503-0057-5/10/11 ...$10.00.
Despite their wide deployment, few standards exist that regu-
late what functions home gateways should perform and how they
should perform them. The relevant standards bodies have ignored
home gateways in the past, and only recently begun to document
best current practices for some of the functions they perform, such
as translating various protocols [3, 11, 29] or DNS proxying [4].
The result is that the performance and the behavior of the net-
work service that applications in residential and small-business de-
ployments experience depends signiﬁcantly on the speciﬁc home
gateway model that provides Internet connectivity. Different home
gateway models differ in many application-observable aspect, in-
cluding NAT schemes [28], NAT binding timeouts, ICMP [23] han-
dling, trafﬁc ﬁltering, queuing, buffer sizes, etc. Incomplete sup-
port – or buggy implementation – of common functions, e.g., DNS
or DHCP, is another signiﬁcant source of behavioral variability.
The experimental study in this paper measures and analyzes the
behavior of a substantial number of home gateways, including NAT
binding timeouts, queuing delay, throughput, and protocol sup-
port, to characterize typical behaviors found in many home gate-
way models. This allows applications to understand the kinds of
practices they can expect to encounter in the deployed base.
2. RELATED WORK
A few previous studies have focused on measuring NAT bind-
ing timeouts. In a study of UDP binding timeouts in a peer-to-peer
network of ca. 3,500 peers, the majority (62%) of bindings were
found to time out between 2 and 2.5 min [7]. In the context of in-
vestigating energy efﬁciency of mobile handsets, timeout behavior
is important to throttle keepalives and minimize battery usage. The
default connection timeout values documented by vendors [13] are
approximately in line with these observations.
Other studies have looked at the inbound packet ﬁltering behav-
ior of NATs in the presence of valid bindings created by outbound
trafﬁc. An experimental analysis of this behavior on a small set of
NATs is documented in [14] using the terminology deﬁned in [28];
other tests focus on hair-pinning and ICMP forwarding. The memo
highlights that NAT behavior depends on whether a NAT attempts
to preserve port numbers for external mappings: a NAT can exhibit
different behaviors for different mappings. Also highlighted are
techniques to systematically investigate binding timeout behavior,
but no binding timeout results are presented.
Peer-to-peer NAT traversal for UDP and TCP is covered in [10],
with a focus on “hole-punching” techniques to make peer-to-peer
applications work through NATs. The paper gives a useful charac-
terization of different types of NATs, and describes the properties
of a “well-behaving” NAT that supports hole-punching.
The success rates of various NAT traversal techniques for es-
tablishing direct TCP connections between two hosts located be-
260hind NATs are not as good as those for UDP [12]. The study per-
formed in [12] looks at only a small set of NATs, but none of the
techniques presented guarantee the successful creation of an opera-
tional TCP connection, the best was a variant of STUNT [21] with a
success rate of 89%. Some of the traversal techniques would bene-
ﬁt from a better understanding of how NATs handle unusual packet
sequences (for TCP connection negotiation) or ICMP packets.
Another measurement study on NAT behavior [19] determines
the applicability of primarily TCP-based NAT traversal techniques
to cellular networks. The study treats the network as a “black box”
and does not identify NAT manufacturers and models, or if routing
policies for different classes of subscribers were in place, which
leaves it open whether the reported behaviors are only due to NATs.
Various aspects of TCP interactions with the network are mea-
sured in [21]. The results suggest that different TCP options do not
appear to cause problems for a TCP connection, except in certain
rare cases. One example is middleboxes that shift TCP sequence
numbers in the header without considering that certain TCP op-
tions also contain them (e.g., SACK [20].) Slightly more problem-
atic are the use of ECN [24] or PMTU discovery [22], which may
cause loss of TCP SYN segments and therefore failed connection
attempts. The results also indicate that the use of IP options leads
to failure in most cases. Because the experiments were conducted
end-to-end, the results do not identify whether buggy host imple-
mentations or intermediaries along the path caused these issues.
Our study does not currently replicate these measurements, but we
plan to expand it in the future to conﬁrm their results.
Several studies evaluate the support of DNSSEC [2] in home
gateways [1, 5, 9]. This includes testing for support of DNS over
TCP, which our study also measures, but we do not currently per-
form exhaustive tests for DNSSEC support.
3. EXPERIMENTAL METHODOLOGY
This section describes the testbed used for the experiments pre-
sented in this paper and describes how each measurement result
presented in Section 4 was obtained.
3.1 Testbed Setup
Figure 1 illustrates the experimental testbed used for this study,
which consists of a test server and a test client, both running
the hiit.ﬁ DNS server, several HP-2524
Linux 2.6.26 kernels,
VLAN switches and the different home gateway models listed
in Table 1. Table 1 also deﬁnes a unique “tag” for each home
gateway, which is used in the remainder of this paper as a short-
hand to identify each speciﬁc device. All network links are using
100Mb/sec Ethernet.
The “WAN” uplink port of each home gateway connects to the
test server through a switch on a separate VLAN. The test server
runs a DHCP service that provides information about the global
DNS server and leases a different private address block [25] on
each VLAN, which the home gateways use to conﬁgure their uplink
“WAN” interfaces and DNS proxies.
The “LAN” port of each home gateway connects to the test client
through a second switch, again on a separate VLAN. The test client
runs a separate DHCP client to set up each VLAN interface with the
information that each home gateway provides via its DHCP server.
The DHCP client is modiﬁed to conﬁgure only interface-speciﬁc
routes.
The test server and test client are also directly connected through
a management link, which is used to coordinate the measurements.
Client and server run an instance of the testrund daemon, which
is responsible for setting up and performing each measurement,
as well as exporting all captured measurement data afterwards. A
D-Link
Edimax
Jensen
Vendor
A-Link
Apple
Asus
Belkin
Buffalo
Model
WNAP
Airport Express
RT-N15
Wireless N Router
Enhanced N150
WZR-AGL300NH
DIR-300
DIR-300
DI-524up
DI-524
DIR-100
DIR-600
DIR-615
DIR-635
DI-604
DI-713P
6104WG
Air:Link 59300
BEFSR41c2
WR54G
WRT54GL v1.1
WRT54GL-EU
WRT54G
WRT54GL v1.1
RP614 v4
WGR614 v7
WGR614 v9
WNR2000-100PES
WGR614 v4
54M
SMC7004VBR
TW-3G
Wireless N Router
P-335U
Tag
al
ap
as1
be1
be2
bu1
dl1
dl2
dl3
dl4
dl5
dl6
dl7
dl8
dl9
dl10
ed
je
ls1
ls2
ls3
ls5
owrt
to
ng1
ng2
ng3
ng4
ng5
nw1
Netwjork
smc
SMC Barricade
te
Telewell
we
Webee
zy1
ZyXel
Table 1: Home gateway models included in the study, with the
shorthand “tags” used throughout this paper.
Firmware
e2.0.9A
7.4.2
2.0.1.1
F5D8236-4_WW_3.00.02
F6D4230-4_WW_1.00.03
R1.06/B1.05
1.03
1.04
v1.06
v2.0.4
v1.12
v2.01
v4.00
v2.33EU
v3.09
2.60 build 6a
2.63
1.15
1.45.11
v7.00.1
v4.30.7
v4.30.7
OpenWRT RC5
tomato 1.27
V1.0.2_06.29
(1.0.13_1.0.13)
V1.2.6_18.0.17
v.1.0.0.34_29.0.45
V5.0_07
Ver 1.2.6
R1.07
V7.04b3
e2.0.9D
V3.60(AMB.2)C0
Linksys
Netgear
given measurement is run in parallel across all home gateways in
the testbed, except for the throughput test, which measures each
home gateway separately to avoid overloading the test network.
3.2 Measurement Methodology
Using the testbed described above, several different measure-
ments were performed across the set of home gateways listed in
Table 1, including determining the timeout values used for UDP
and TCP bindings under various conditions, testing TCP through-
put, and determining whether UDP- and TCP-related ICMP mes-
sages are translated correctly, among other measurements.
Figure 1: Setup of the experimental testbed.
NAT 1NAT 2...NAT nVLAN SwitchVLAN SwitchDHCP ServerDNS ProxyDHCP ServerDNS ProxyDHCP ServerDNS Proxy10.0.1.0/24VLAN 100110.0.2.0/24VLAN 100210.0.n.0/24VLAN 1000+n192.168.1.0/24VLAN 2001192.168.2.0/24VLAN 2002192.168.n.0/24VLAN 2000+nTest ClientManagement Linkdhcpclienttestrundvlan-ifndhcpclienttestrundvlan-if2dhcpclienttestrundvlan-if1...Test Serverdhcpdtestrundvlan-ifndhcpdtestrundvlan-if2dhcpdtestrundvlan-if1...DNSServer......"LAN""LAN""LAN""WAN""WAN""WAN"2613.2.1 UDP Binding Timeouts
UDP is a connectionless protocol without explicit connection
startup or teardown handshakes. NATs therefore create UDP bind-
ings when they observe a packet exchange, and remove bindings
some period of time after the last observed packet on a ﬂow – the
binding timeout. A few critical services such as DNS use UDP, and
it is becoming increasingly common to encapsulate other trafﬁc in-
side UDP. Consequently, understanding the binding timeouts home
gateways apply to UDP trafﬁc is important, e.g., to determine at
which rate keepalives need to be sent.
To explore this question, we deﬁne several experiments to mea-
In each
sure UDP binding timeouts under different conditions.
case, the client sends UDP packets on a speciﬁc source/destination
port pair to the server to create a binding, and has a modiﬁable
“sleep timer”. When the sleep timer expires, the client uses the
management link to instruct the server to send a response packet
back via the home gateway. Depending on whether the client re-
ceives this response packet, it knows whether the NAT binding is
still active or not. Binding timeouts are determined through a mod-
iﬁed binary search: The client retains the longest observed binding
lifetime and shortest binding expiration, and on the next iteration
sets the sleep timer to be their midpoint. The modiﬁcation to the
binary search allows the start of each search iteration to be identical
to the ﬁrst search. The test stops when it has converged to within
one second. We deﬁne the following ﬁve UDP tests:
UDP-1: Solitary outbound packet. This test measures how long
a NAT maintains a UDP binding after the test client sends a single
UDP packet to the server. The server does not send trafﬁc to the
client, apart from the packet triggered by the sleep timer, and the
client does not send any further trafﬁc.
UDP-2: Solitary outbound packet, multiple inbound packets.
The intent of this test is to determine if inbound trafﬁc refreshes a
binding, compared to UDP-1. The test client sends a solitary UDP
packet to the test server and then remains silent. The server sends
a stream of responses across the binding, and increases the delay
between each response packet until the binding times out.
UDP-3: Multiple outbound and inbound packets. The intent is
to determine whether outbound trafﬁc refreshes a binding. This test
is similar to UDP-2, except that the client sends another packet to
the server whenever it receives a response packet from it.
UDP-4: Binding and port-pair reuse behavior. This test deter-
mines if a home gateway prefers to use the original source port as
the external port for a binding, and if it waits before it reuses an
expired binding for the same ﬂow (i.e., the same 5-tuple). This
is observed from the UDP-1 test. The port-pair reuse behavior is
determined from the behavior of the binding created in the binary
search iteration that follows immediately after a previous binding
expires.
If the device creates a new binding, as indicated by a
changed source port, it is likely that the device prevents immedi-
ate binding reuse for the same ﬂow.
UDP-5: Binding timeout variations for different services. A
NAT might use different binding timeouts for different services,
i.e., different well-known destination port numbers. This test is
identical to UDP-2, but tests different well-known server ports.
3.2.2 TCP Handling
TCP connections involve an explicit creation and tear-down
phase, and NATs can observe the tear-down handshake to remove
bindings immediately. However, TCP connections may idle for
long periods of time (if no TCP or application keepalives are used)
and endpoints may silently fail. A NAT therefore cannot assume
that it will always be able to observe a tear-down handshake. Also,
the number of bindings on a NAT is limited by the available ports.
The following TCP tests are carried out using Linux 2.6.26 on
both the client and server, with the congestion control algorithm set
to Reno and the Linux TCP options – SACK, timestamps, window
scaling, F-RTO, D-SACK and control block interdependence (CBI)
– disabled.
TCP-1: TCP binding timeouts. Although a NAT does not neces-
sarily need to remove TCP bindings before it becomes overloaded,
anecdotal evidence suggests that many devices time out idle bind-
ings after a certain amount of time. This test determines the ex-
istence of a static timeout similar to UDP-1, except that the client
opens a TCP connection with the server. The connection is left
idle with no TCP keepalives in use. TCP binding timeouts are of-
ten much longer than UDP ones. To speed up the test, the binary
search technique therefore uses multiple parallel connections, and
stops if binding timeouts are longer than 24 hours.
TCP-2: TCP throughput. To test if home gateways can limit
TCP throughput, we measure the performance of a 100 MB bulk
transfer. A ﬁrst test measures client-to-server upload throughput, a
second measures server-to-client download throughput, and a third
measures the throughputs of simultaneous up- and downloads.
TCP-3: Queuing and processing delay. Anecdotal evidence sug-
gests that many home gateways have over-dimensioned transmis-
sion buffers, which can add signiﬁcantly to the end-to-end delay
experienced by TCP. We measure this delay by embedding evenly
spaced timestamps (every 2 KB) into the payload of the through-
put tests in TCP-2. Delay is determined by the difference between
the received timestamps and the local system clock. Clocks are
synchronized using NTP and the tests are short enough that any er-
ror introduced by clock drift stays well below 1 msec. The output
is normalized, so that the minimum difference is zero. The maxi-
mum delay is the median of the normalized differences, to prevent
TCP retransmissions from skewing the results. Since the measured
round-trip delay across each device is below 2 msec, it is safe to
assume that the results are accurate to about 1 msec.
TCP-4: Maximum number of TCP bindings. The recommended
behavior for a NAT is to retain a TCP binding for 124 min [11]
in the absence of an explicit connection tear-down. When serv-
ing many connections, it is likely that a NAT reaches its maximum
number of bindings. This test measures the maximum number of
TCP bindings a NAT supports, by systematically creating connec-
tions to the same server port and periodically passing messages
over each, to prevent binding timeouts. When a new connection
fails to be created or messages can no longer be passed on an exist-
ing one, the maximum number of bindings has been reached.
3.2.3 Other Tests