• Mapping device: To interface with a CAN bus, our map-
ping device consists of three components: an Arduino Due
microcontroller with an 84 MHz clock and an on-board
CAN controller, a TI VP232 CAN transceiver, and a 120Ω
resistor. To gain direct write access to the bus for destina-
tion mapping, we connect a digital I/O pin to the driver
input pin of the transceiver.
• ‘09 Toyota Prius and ‘17 Ford Focus: The Prius contains
eight original ECUs that transmit on a single CAN bus at
500 kbps. The Focus contains eleven original ECUs that
transmit on three CAN buses at varying speeds; as our
model of the Focus is the standard edition, only the high-
speed 500 kbps bus has more than one active ECU. We
obtain ground truth for our experiments by physically tak-
ing apart the car and gaining direct access to the ECUs by
splicing directly into the CAN wires as seen in Figure 13.
We use a paid subscription to both Toyota and Ford’s me-
chanics’ manuals [3, 6] for guidance on disassembly of
vehicle components. Due to the non-destructive design of
CANvas, our interaction does not impose any permanent
errors to the vehicle.
• ’08 Ford Escape, ’10 Toyota Prius and ’15 Ford Fiesta
We obtain CAN trafﬁc from three additional vehicles for
testing only our source mapper, as we did not have per-
mission to inject data. We use data from the ‘09 Prius and
‘17 Focus to partially conﬁrm our source mapping output
without disassembling these vehicles.
• Synthetic networks: To further validate the capability of
our mapper, we perform additional experiments on three
real engine ECUs extracted from a ‘12 Ford Focus, ‘13
Ford Escape and ‘14 Ford Escape.
7.1 Discovering an unexpected ECU
We now describe a real scenario where, in the process of
designing CANvas, we discovered an unexpected ECU in our
Prius. Using the results of our source mapping on the ‘09 Prius
as seen in Table 2, we noticed that there were a total of nine
ECUs when only eight were expected. Even after manually
disconnecting all eight known ECUs, we still observed CAN
trafﬁc, speciﬁcally IDs I570−572, coming from a single ECU.
By looking at the history of the vehicle and systematically
disconnecting various systems, we discovered that this ECU
was installed as part of a modiﬁcation from several years
ago. The Prius had an additional battery installed to grant
it all-electric capabilities, and with the use of the network
mapper, we now know that a new CAN-enabled device was
added. If we took a network map of the vehicle when ﬁrst
purchased or used an online database as mentioned in §2, we
could easily compare our results with published results and
identify the unexpected ECU. We conﬁrm that these IDs are
new by comparing our IDs to a same-generation Prius [23].
7.2
As detailed in §2, a real concern for network security is the
ability to shut-down an ECU by simply receiving the target’s
CAN messages. Using the results of CANvas’ destination
mapping, we can identify several instances where an ECU
is expected to only receive messages from a subset of other
ECUs but still receives all other messages. We have found that
all ECUs in the Focus and Prius do not employ any ﬁlter on the
receipt of incoming messages. In Ford’s Motorcraft TechInfo
Identifying lenient ﬁlters
400    28th USENIX Security Symposium
USENIX Association
Figure 13: Images of the vehicles we used for ground truth: the 2009 Toyota Prius and the 2017 Ford Focus.
ECU #
A
B
C
D
E
F
G
H
I
Source message IDs
020, 030, 0B1, 0B3, 0B4, 230, 4C3, 591
022, 023
025, 4C6
Actual ECU
Skid control ECU
Yaw rate sensor
Steering sensor
038, 03A, 03E, 120, 244, 348, 527, 528, 529, 540, 5B2, 5C8, 5EC, 602 Hybrid vehicle control ECU
039, 3C8, 3CF, 526, 52C, 5CC, 5D4, 5F8
262, 4C8, 521
3C9, 3CB, 3CD
553, 554, 57F, 5B6
570, 571, 572
Engine control module
Power steering ECU
Battery ECU
Gateway ECU
Unknown ECU
Table 2: 2009 Toyota Prius source mapping output
Service [3], we can see simple diagrams of how the ECUs
communicate as part of the vehicle’s systems. For example,
the Focus’ braking system involves communication between
the instrument panel cluster, the transmission ECU, the body
control ECU and the engine ECU. Now suppose an attacker
takes over the infotainment unit of the Focus, has complete
access to rewrite the ECU’s code and gains the ability to inject
CAN messages as described in §2. The attacker can launch a
bus-off attack and shut-down the transmission ECU simply
because the infotainment ECU receives its messages. It is
evident that these devices need ﬁlters on what messages are
received by their CAN controllers.
7.3 Mapping our test vehicles
We now present results and observations from mapping both
the Prius and Focus.
Source mapping results: Using a threshold of 1ms and 30
minutes of trafﬁc collection, we get a false positive rate of
0% for both vehicles, permitting us to get a sound source
mapping output. Out of a total of 59 unique message IDs, our
pairwise timing comparison resulted in 102 matching pairs
for the Prius. By performing a simple grouping of these pairs
as detailed in §5, we get the output as seen in Table 2. While
the majority of the IDs observed on the Prius have a strong
periodic characteristic, we discuss some special cases we
encountered. Most of the messages were under ﬁve seconds
except for I57F with a period of 5 seconds and I602 with a
period of 60 seconds. The majority of our messages matched
with multiple IDs from the same ECUs but due to the large
period of I57F and I602, they only had a single match. However,
due to our pairwise approach, we can still map these two
IDs using a shared matching pair as discussed in §5. We
also encounter a few examples of messages that miss their
deadline and wait until the next cycle to re-transmit. For the
Focus, we observe messages that miss their deadlines and
either transmit two messages on the next cycle or drop the
missed message and wait for the next cycle. In these cases,
we simply remove the inter-arrival times that exceed two
standard deviations from the average period and interpolate
for the removed timestamps as discussed in §5.
Destination mapping results: With a CAN bus running
at 500 kbps, we discover that all of the ECUs in the Prius
do not implement any ﬁltering between the network and the
CAN controller. When each ECU is isolated, we see that
all IDs are properly acknowledged by the receiving ECU.
We do observe two ECUs that recover quickly from the bus-
off method, speciﬁcally the engine control module and the
skid control ECU. With the other ECUs in the vehicle, it was
sufﬁcient to perform our bus-off once and the ECU would stop
transmitting. For these two ECUs, we selected the smallest
period ID and held the bus open by injecting false messages
to keep the two ECUs from auto-recovering. Additionally,
we discovered that the Focus also do not implement any sort
of ﬁltering for the IDs we observe on the CAN. From these
USENIX Association
28th USENIX Security Symposium    401
ﬁndings, we can conclude that attacking via the reception of a
message for these vehicles could prove trivial due to the lack
of ﬁltering between the network and the controller. In general,
the maximum number of manual transitions of the ignition
switch is equal to the number of detected CAN-enabled ECUs
in the vehicle. For the keyless ignition of the 2009 Prius, we
transition the ignition 7 times as two ECUs recover on their
own (the Prius has 9 total CAN-enabled ECUs). For the keyed
ignition of the 2017 Focus, we transition the ignition 7 times
as two ECUs recover on their own (the Focus has 9 total
CAN-enabled ECUs).
7.4 Mapping additional vehicles
Mapping real extracted Ford ECUs: We also obtained
three Ford engine ECUs from a ‘12 Focus, ‘13 Escape and
‘14 Escape. By collecting data from these three ECUs, we
found that they shared the many of the same message IDs and
conclude that they are based off of the same engine controller
conﬁguration. As they all auto-recover, they were prime can-
didates for testing our forced ECU isolation technique.
We use CANvas on three other vehicles to look for data that
seems logical to our ﬁndings from the test cars. For the Ford
vehicles, we look for similarities with our extracted engine
ECUs. For the ‘08 Escape, we found a set of IDs that we
believe is the engine ECU and only has a subset of those
found on our extracted ECU. For the ‘15 Fiesta, we also found
a likely candidate for an engine ECU that has more IDs than
our extracted ECUs. Since these vehicles range over three
different Ford generations, it seems logical that the newer
engine ECUs transmit more IDs. Additionally, we ﬁnd a few
similarities between the ‘09 and ‘10 Prius. We found an ECU
on the ‘10 that is likely to be the skid control ECU, which
has similar IDs to the ’09 Prius. These ﬁndings potentially
demonstrate CANvas’ source mapping capabilities.
8 Discussion
Adversarial evasion: For CANvas’ source mapping, an ad-
versary could attempt to modify the timestamps to trick CAN-
vas into thinking that a pair of IDs originate from the same
ECU when in fact the opposite is true, and vice versa. We
acknowledge that an attacker who aims to spoof IDs from an
implanted or compromised ECU breaks the assumption for
message-source analysis. If the attacker performs an active at-
tack (i.e. attack occurs during data capture) or simultaneously
transmits with the spoofed ECU, then IDSes from several pre-
vious works could detect such an attack and thus we did not
perform such experiments. CANvas instead could discover
ECUs that do not actively inject messages but rather change
the ID-ECU source mapping (a new ECU or existing ECU
that sends different IDs). We also make the assumption that
ECUs do not intentionally alter their timing due to the chal-
lenges that arise from scheduling real-time embedded systems.
There are numerous challenges that automakers already face
in achieving reliable and robust scheduling for their vehicles
and any modiﬁcation to the timing of CAN messages would
add a great amount of complexity to the already complex chal-
lenge of scheduling. Additionally, as our destination mapping
approach deals with the error-handling mechanism, it would
also not be practical to change these basics of CAN.
Avoiding permanent damage: We take care to avoid any
damage to our test vehicles. Even with our active interaction
with the bus in destination mapping, most dash lights that turn
on are simply reset by power cycling the car; it may some-
times be necessary to drive the car for a few minutes so the
ECUs can identify the absence of a real error. After mapping,
all of our vehicles operate with no error codes once the above
steps have been followed. Sometimes, a persistent Diagnos-
tic Trouble Code may exist in the network as indicated by
the Malfunction Indicator Light (MIL, commonly known as
a “check engine light”). To remedy this, a simple OBD-II
scan tool can be used to reset these lights with no harm to
the vehicle. In the event of network communication failure
(e.g. bus-off), manufacturers implement a "limp-home" mode
where ECUs will default to secondary programming and al-
low the vehicle to operate with limited capabilities [7]. It is
possible for the CAN bus to be shorted (effectively causing a
bus-off on all ECUs) during faults, repairs, etc. so this mode
protects the vehicle from our methods. In our experiments,
the engine did not need to be running as all ECUs became
active with the ignition at ACC. However, this may not apply
to all vehicles so it is possible that the ignition will need to
be ON.
Multiple CAN buses: For the typical OBD-II port, the CAN
bus uses pins 6 and 14 on the connector. While many vehicles
only have one CAN bus using these pins, it is possible for
additional CANs to exist. These CAN buses may not be con-
nected and they may employ different bus speeds. Sometimes,
vehicles may also employ a gateway which handles how and
which messages are passed between the various buses for rea-
sons of fault conﬁnement and network security. These CAN
buses are often accessible at the OBD-II port but on different
pins that are vendor optional: pins 3 and 11 and pins 1 and
8/9. In the case that a CAN bus is not exposed to the OBD-II,
it is possible to access this bus by simply removing the door
panel of a car and accessing the connector between the door
assembly and the car body. This connector will likely contain
the unexposed bus, which can be discovered as suggested by
others [30].
Message acceptance ﬁltering: CAN controllers have the
option to employ a programmable acceptance ﬁlter where a
message that is received by the controller can either be sent to
the application layer or dropped after the message is received.
It is possible to deﬁne message destination as a message that
is “accepted” by an ECU rather than correctly received. This
deﬁnition provides ﬁner granularity on message destination
and can prove useful for many other security scenarios; how-
ever, to identify what messages are accepted by an ECU, this
402    28th USENIX Security Symposium
USENIX Association
may require vendor-speciﬁc methods. For example, in our
experimental setup, we enable a CAN protocol feature called
the overload frame [32]. If a vendor chooses to enable this
feature, an accepted message can be determined by ﬂooding
the bus as fast as possible with a given message ID. When
the receiving ECU gets behind on processing these messages,
it will transmit an overload frame, indicating its acceptance
ﬁlter allows the injected message ID; if the ID is dropped,
then no overload frame will be present.
Non-transmitting ECUs: CANvas expects ECUs to transmit
their messages periodically, but it is possible for ECUs to
only activate under certain conditions or simply read from
the network. As all ECUs that receive messages but have the
ability to write to the network must participate in the ACK
process, CANvas’ forced ECU isolation technique can be used
to identify the presence of a non-transmitting ECU. CANvas
should detect these ECUs prior to starting to ensure that the
detected ECUs do not interfere with destination mapping.
9 Related Work
We already discussed several of the key related work with