```py
# -*- coding: utf-8 -*-
from django.http import HttpResponse
from TestModel.models import Test
# 数据库操作
def testdb(request):
    # 初始化
    response = ""
    response1 = ""
    # 通过objects这个模型管理器的all()获得所有数据行,相当于SQL中的SELECT * FROM
    list = Test.objects.all()
    # filter相当于SQL中的WHERE,可设置条件过滤结果
    response2 = Test.objects.filter(id=1)
    # 获取单个对象
    response3 = Test.objects.get(id=1)
    # 限制返回的数据 相当于 SQL 中的 OFFSET 0 LIMIT 2;
    Test.objects.order_by('name')[0:2]
    #数据排序
    Test.objects.order_by("id")
    # 上面的方法可以连锁使用
    Test.objects.filter(name="ffffffff0x").order_by("id")
    # 输出所有数据
    for var in list:
        response1 += var.name + " "
    response = response1
    return HttpResponse("" + response + "")
```
### 更新数据
修改数据可以使用 `save()` 或 `update()`:
```py
# -*- coding: utf-8 -*-
from django.http import HttpResponse
from TestModel.models import Test
# 数据库操作
def testdb(request):
    # 修改其中一个id=1的name字段,再save,相当于SQL中的UPDATE
    test1 = Test.objects.get(id=1)
    test1.name = 'Google'
    test1.save()
    # 另外一种方式
    #Test.objects.filter(id=1).update(name='Google')
    # 修改所有的列
    # Test.objects.all().update(name='Google')
    return HttpResponse("修改成功")
```
### 删除数据
删除数据库中的对象只需调用该对象的 `delete()` 方法即可：
```py
# -*- coding: utf-8 -*-
from django.http import HttpResponse
from TestModel.models import Test
# 数据库操作
def testdb(request):
    # 删除id=1的数据
    test1 = Test.objects.get(id=1)
    test1.delete()
    # 另外一种方式
    # Test.objects.filter(id=1).delete()
    # 删除所有数据
    # Test.objects.all().delete()
    return HttpResponse("删除成功")
```
---
## 表单
### HTTP 请求
HTTP协议以"请求－回复"的方式工作。客户发送请求时,可以在请求中附加数据。服务器通过解析请求,就可以获得客户传来的数据,并根据URL来提供特定的服务。
#### GET 方法
testweb 目录中添加 search.py 文件,用于接收用户的请求：
```py
from django.http import HttpResponse
from django.shortcuts import render
# 表单
def search_form(request):
    return render(request, 'search_form.html')
# 接收请求数据
def search(request):
    request.encoding='utf-8'
    if 'q' in request.GET and request.GET['q']:
        message = '你搜索的内容为: ' + request.GET['q']
    else:
        message = '你提交了空表单'
    return HttpResponse(message)
```
在模板目录 templates 中添加 search_form.html 表单：
```html
ffffffff0x(ffffffff0x.com)
```
修改 urls.py
```py
from django.conf.urls import url
from . import views,testdb,search
urlpatterns = [
    url(r'^hello/$', views.ffffffff0x),
    url(r'^testdb/$', testdb.testdb),
    url(r'^search-form/$', search.search_form),
    url(r'^search/$', search.search),
]
```
#### POST 方法
提交数据时更常用 POST 方法。
用一个 URL 和处理函数,同时显示视图和处理请求。
在 templates 创建 post.html
```html
ffffffff0x(ffffffff0x.com)
        {% csrf_token %}
    {{ rlt }}
```
在模板的末尾,我们增加一个 rlt 记号,为表格处理结果预留位置。
表格后面还有一个 {% csrf_token %} 的标签。csrf 全称是 Cross Site Request Forgery。这是 Django 提供的防止伪装提交请求的功能。POST 方法提交的表格,必须有此标签。
在 testweb 目录下新建 search2.py 文件并使用 search_post 函数来处理 POST 请求：
```py
# -*- coding: utf-8 -*-
from django.shortcuts import render
from django.views.decorators import csrf
# 接收POST请求数据
def search_post(request):
    ctx ={}
    if request.POST:
        ctx['rlt'] = request.POST['q']
    return render(request, "post.html", ctx)
```
修改 urls.py
```py
from django.conf.urls import url
from . import views,testdb,search,search2
urlpatterns = [
    url(r'^hello/$', views.hello),
    url(r'^testdb/$', testdb.testdb),
    url(r'^search-form/$', search.search_form),
    url(r'^search/$', search.search),
    url(r'^search-post/$', search2.search_post),
]
```
#### Request 对象
每个视图函数的第一个参数是一个 HttpRequest 对象,就像下面这个 ffffffff0x() 函数:
```py
from django.http import HttpResponse
def ffffffff0x(request):
    return HttpResponse("Hello world")
```
HttpRequest对象包含当前请求URL的一些信息：
- path
    请求页面的全路径,不包括域名—例如, "/hello/"。
- method
    请求中使用的HTTP方法的字符串表示。全大写表示。例如:
    ```py
    if request.method == 'GET':
        do_something()
    elif request.method == 'POST':
        do_something_else()
    ```
- GET
    包含所有 HTTP GET 参数的类字典对象。参见 QueryDict 文档。
- POST
    包含所有 HTTP POST 参数的类字典对象。参见 QueryDict 文档。
    服务器收到空的 POST 请求的情况也是有可能发生的。也就是说,表单 form 通过 HTTP POST 方法提交请求,但是表单中可以没有数据。因此,不能使用语句 if request.POST 来判断是否使用 HTTP POST 方法；应该使用 if request.method == "POST" (参见本表的 method 属性)。
    注意: POST 不包括 file-upload 信息。参见 FILES 属性。
- REQUEST
    为了方便,该属性是 POST 和 GET 属性的集合体,但是有特殊性,先查找 POST 属性,然后再查找 GET 属性。借鉴 PHP's $_REQUEST。
    例如,如果 `GET = {"name": "john"}` 和 `POST = {"age": '34'}` ,则 `REQUEST["name"]` 的值是"john", `REQUEST["age"]` 的值是"34".
    强烈建议使用GET and POST,因为这两个属性更加显式化,写出的代码也更易理解。
- COOKIES
    包含所有cookies的标准Python字典对象。Keys和values都是字符串。
- FILES
    包含所有上传文件的类字典对象。FILES 中的每个 Key 都是 `` 标签中 name 属性的值. FILES 中的每个 value 同时也是一个标准 Python 字典对象,包含下面三个 Keys:
    - filename: 上传文件名, 用 Python 字符串表示
    - content-type: 上传文件的 Content type
    - content: 上传文件的原始内容
    注意：只有在请求方法是 POST,并且请求页面中 `` 有 `enctype="multipart/form-data"` 属性时 FILES 才拥有数据。否则,FILES 是一个空字典。
- META
    包含所有可用 HTTP 头部信息的字典。 例如:
    - CONTENT_LENGTH
    - CONTENT_TYPE
    - QUERY_STRING: 未解析的原始查询字符串
    - REMOTE_ADDR: 客户端 IP 地址
    - REMOTE_HOST: 客户端主机名
    - SERVER_NAME: 服务器主机名
    - SERVER_PORT: 服务器端口
    META 中这些头加上前缀 HTTP_ 为 Key, 冒号 (:) 后面的为 Value, 例如:
    - HTTP_ACCEPT_ENCODING
    - HTTP_ACCEPT_LANGUAGE
    - HTTP_HOST: 客户发送的 HTTP 主机头信息
    - HTTP_REFERER: referring 页
    - HTTP_USER_AGENT: 客户端的 user-agent 字符串
    - HTTP_X_BENDER: X-Bender 头信息
- user
    是一个 django.contrib.auth.models.User 对象,代表当前登录的用户。
    如果访问用户当前没有登录,user 将被初始化为 django.contrib.auth.models.AnonymousUser 的实例。
    你可以通过 user 的 is_authenticated() 方法来辨别用户是否登录：
    ```py
    if request.user.is_authenticated():
        # Do something for logged-in users.
    else:
        # Do something for anonymous users.
    ```
    只有激活 Django 中的 AuthenticationMiddleware 时该属性才可用
- session
    唯一可读写的属性,代表当前会话的字典对象。只有激活 Django 中的 session 支持时该属性才可用。
- raw_post_data
    原始 HTTP POST 数据,未解析过。 高级处理时会有用处。
Request 对象也有一些有用的方法：
- __getitem__(key)
    返回 GET/POST 的键值, 先取 POST, 后取 GET。如果键不存在抛出 KeyError。
    这是我们可以使用字典语法访问 HttpRequest 对象。
    例如, request["foo"] 等同于先 request.POST["foo"] 然后 request.GET["foo"] 的操作。
- has_key()
    检查 request.GET or request.POST 中是否包含参数指定的 Key。
- get_full_path()
    返回包含查询字符串的请求路径。例如, "/music/bands/the_beatles/?print=true"
- is_secure()
    如果请求是安全的,返回 True,就是说,发出的是 HTTPS 请求。
#### QueryDict对象
在 HttpRequest 对象中, GET 和 POST 属性是 django.http.QueryDict 类的实例。
QueryDict 类似字典的自定义类,用来处理单键对应多值的情况。
QueryDict 实现所有标准的词典方法。还包括一些特有的方法：
- __getitem__
    和标准字典的处理有一点不同,就是,如果 Key 对应多个 Value,__getitem__() 返回最后一个 value。
- __setitem__
    设置参数指定 key 的 value 列表 (一个 Python list)。注意：它只能在一个 mutable QueryDict 对象上被调用(就是通过 copy() 产生的一个 QueryDict 对象的拷贝).
- get()
    如果 key 对应多个 value,get()返回最后一个 value。
- update()
    参数可以是 QueryDict,也可以是标准字典。和标准字典的 update 方法不同,该方法添加字典 items,而不是替换它们:
    ```
    >>> q = QueryDict('a=1')
    >>> q = q.copy() # to make it mutable
    >>> q.update({'a': '2'})
    >>> q.getlist('a')
    ['1', '2']
    >>> q['a'] # returns the last
    ['2']
    ```
- items()
    和标准字典的 items() 方法有一点不同, 该方法使用单值逻辑的__getitem__():
    ```
    >>> q = QueryDict('a=1&a=2&a=3')
    >>> q.items()
    [('a', '3')]
    ```
- values()
    和标准字典的 values() 方法有一点不同, 该方法使用单值逻辑的__getitem__():
---
## 视图
一个视图函数,简称视图,是一个简单的 Python 函数,它接受 Web 请求并且返回 Web 响应。
响应可以是一个 HTML 页面、一个 404 错误页面、重定向页面、XML 文档、或者一张图片...
无论视图本身包含什么逻辑,都要返回响应。代码写在哪里都可以,只要在 Python 目录下面,一般放在项目的 views.py 文件中。
每个视图函数都负责返回一个 HttpResponse 对象,对象中包含生成的响应。
视图层中有两个重要的对象：请求对象(request)与响应对象(HttpResponse)。
### 请求对象: HttpRequest 对象（简称 request 对象）
#### GET
数据类型是 QueryDict,一个类似于字典的对象,包含 HTTP GET 的所有参数。
有相同的键,就把所有的值放到对应的列表里。
取值格式：对象.方法。
get()：返回字符串,如果该键对应有多个值,取出该键的最后一个值。
```py
from django.http import HttpResponse
def ffffffff0x(request):
    name = request.GET.get("name")
    return HttpResponse('姓名：{}'.format(name))
```
#### POST
数据类型是 QueryDict,一个类似于字典的对象,包含 HTTP POST 的所有参数。
常用于 form 表单,form 表单里的标签 name 属性对应参数的键,value 属性对应参数的值。
取值格式： 对象.方法。
get()：返回字符串,如果该键对应有多个值,取出该键的最后一个值。
```py
from django.http import HttpResponse
def ffffffff0x(request):
    name = request.POST.get("name")
    return HttpResponse('姓名：{}'.format(name))
```
**post 请求返回 403**
```py
from django.views.decorators.csrf import csrf_exempt
@csrf_exempt
def ffffffff0x(request):