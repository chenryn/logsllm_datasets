      if (trace_bits == (void *)-1) PFATAL("shmat() failed");
    }
这里通过 `trace_bits` 和 `virgin_bits` 两个 bitmap 来分别记录当前的 tuple 信息及整体 tuple 信息，其中
`trace_bits` 位于共享内存上，便于进行进程间通信。通过 `virgin_tmout` 和 `virgin_crash` 两个 bitmap
来记录 fuzz 过程中出现的所有目标程序超时以及崩溃的 tuple 信息。
##### 1.9 setup_dirs_fds 函数
该函数用于准备输出文件夹和文件描述符，结合源码进行解析：
    EXP_ST void setup_dirs_fds(void) {
      u8* tmp;
      s32 fd;
      ACTF("Setting up output directories...");
      if (sync_id && mkdir(sync_dir, 0700) && errno != EEXIST)
          PFATAL("Unable to create '%s'", sync_dir);
      /* 如果sync_id，且创建sync_dir文件夹并设置权限为0700，如果报错单errno不是 EEXIST ，抛出异常 */
      if (mkdir(out_dir, 0700)) { // 创建out_dir， 权限为0700
        if (errno != EEXIST) PFATAL("Unable to create '%s'", out_dir); 
        maybe_delete_out_dir();
      } else {
        if (in_place_resume) // 创建成功
          FATAL("Resume attempted but old output directory not found");
        out_dir_fd = open(out_dir, O_RDONLY); // 以只读模式打开，返回fd：out_dir_fd
    #ifndef __sun
        if (out_dir_fd fname        = fname;
      q->len          = len;
      q->depth        = cur_depth + 1;
      q->passed_det   = passed_det;
      if (q->depth > max_depth) max_depth = q->depth;
      if (queue_top) {
        queue_top->next = q;
        queue_top = q;
      } else q_prev100 = queue = queue_top = q;
      queued_paths++; // queue计数器加1
      pending_not_fuzzed++; // 待fuzz的样例计数器加1
      cycles_wo_finds = 0;
      /* Set next_100 pointer for every 100th element (index 0, 100, etc) to allow faster iteration. */
      if ((queued_paths - 1) % 100 == 0 && queued_paths > 1) {
        q_prev100->next_100 = q;
        q_prev100 = q;
      }
      last_path_time = get_cur_time();
    }
##### 1.12 pivot_inputs 函数
在输出目录中为输入测试用例创建硬链接。
##### 1\. 13 find_timeout 函数
变量 `timeout_given` 没有被设置时，会调用到该函数。该函数主要是在没有指定 `-t` 选项进行 resuming session
时，避免一次次地自动调整超时时间。
##### 1.14 detect_file_args
识别参数中是否有“@@”，如果有，则替换为 `out_dir/.cur_input` ，没有则返回：
    /* Detect @@ in args. */
    EXP_ST void detect_file_args(char** argv) {
      u32 i = 0;
      u8* cwd = getcwd(NULL, 0);
      if (!cwd) PFATAL("getcwd() failed");
      while (argv[i]) {
        u8* aa_loc = strstr(argv[i], "@@"); // 查找@@
        if (aa_loc) {
          u8 *aa_subst, *n_arg;
          /* If we don't have a file name chosen yet, use a safe default. */
          if (!out_file)
            out_file = alloc_printf("%s/.cur_input", out_dir);
          /* Be sure that we're always using fully-qualified paths. */
          if (out_file[0] == '/') aa_subst = out_file;
          else aa_subst = alloc_printf("%s/%s", cwd, out_file); 
          /* Construct a replacement argv value. */
          *aa_loc = 0;
          n_arg = alloc_printf("%s%s%s", argv[i], aa_subst, aa_loc + 2);
          argv[i] = n_arg;
          *aa_loc = '@';
          if (out_file[0] != '/') ck_free(aa_subst);
        }
        i++;
      }
      free(cwd); /* not tracked */
    }
##### 1.15 check_binary 函数
检查指定路径要执行的程序是否存在，是否为shell脚本，同时检查elf文件头是否合法及程序是否被插桩。
#### 2\. 第一遍fuzz
##### 2.1 检查
调用 `get_cur_time()` 函数获取开始时间，检查是否处于 `qemu_mode`。
##### 2.2 perform_dry_run 函数
该函数是AFL中的一个关键函数，它会执行 `input` 文件夹下的预先准备的所有测试用例，生成初始化的 queue 和
bitmap，只对初始输入执行一次。函数控制流程图如下：
下面将结合函数源码进行解析（删除部分非关键代码）：
    /* Perform dry run of all test cases to confirm that the app is working as
       expected. This is done only for the initial inputs, and only once. */
    static void perform_dry_run(char** argv) {
      struct queue_entry* q = queue; // 创建queue_entry结构体
      u32 cal_failures = 0;
      u8* skip_crashes = getenv("AFL_SKIP_CRASHES"); // 读取环境变量 AFL_SKIP_CRASHES
      while (q) { // 遍历队列
        u8* use_mem;
        u8  res;
        s32 fd;
        u8* fn = strrchr(q->fname, '/') + 1;
        ACTF("Attempting dry run with '%s'...", fn);
        fd = open(q->fname, O_RDONLY);
        if (fd fname);
        use_mem = ck_alloc_nozero(q->len); 
        if (read(fd, use_mem, q->len) != q->len)
          FATAL("Short read from '%s'", q->fname); // 打开q->fname，读取到分配的内存中
        close(fd);
        res = calibrate_case(argv, q, use_mem, 0, 1); // 调用函数calibrate_case校准测试用例
        ck_free(use_mem);
        if (stop_soon) return;
        if (res == crash_mode || res == FAULT_NOBITS) 
          SAYF(cGRA "    len = %u, map size = %u, exec speed = %llu us\n" cRST, 
               q->len, q->bitmap_size, q->exec_us);