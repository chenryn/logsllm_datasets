∪ ANALYZE FUNCTION(f , Entrypoint(Bf alse), p ∧ ¬q)
case Call g(a1, a2, . . ., an)
G := Summary(g)
foreach (hqi k OPii ∈ G) do
ri := qi specialized with a1, a2, . . ., an
R := R ∪ {h(p ∧ ri) k OPii}
R := R ∪ ANALYZE FUNCTION(f , ControlFlowSucc(f , s), p)
otherwise
if (s authorizes conceptual operation OP) then R := {hp k OPi}
Update p appropriately
R := R ∪ ANALYZE FUNCTION(f , ControlFlowSucc(f , s), p)
foreach (hp k OPi ∈ R) do
Existentially quantify-out any local variables of f appearing in p
return R
Algorithm 2: Producing the summary of a function.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
tual operations. Thus, for LSM-SELinux we use the occurrence of
an access vector (e.g., reading its value) in a statement to determine
if the statement authorizes a conceptual operation.
Where possible, the predicate p is also updated appropriately
based upon the action of statement s. For instance, if the statement
in question is j := i, and predicate p propagated to this statement
is (i == 3), then the predicate p is updated to (j == i) ∧ (i == 3). In
cases where the effect of s on p cannot be determined, the new
value of p is set to Unknown, a special value denoting that the value
of p cannot be determined precisely.
For functions with a formal parameter of type access vector t,
but do not refer to any particular access vector (such as DIR READ,
DIR WRITE, or DIR SEARCH), the analysis returns {htrue k λx.xi}
(not shown in Algorithm 2 for brevity), which says that the function
potentially authorizes any conceptual operation, based upon the ac-
cess vector it is invoked with (the variable x in λx.x denotes the
access vector).
After processing a statement s in f, the analysis continues by
processing the control-ﬂow-successors of s. The analysis termi-
nates when all the statements reachable from Entrypoint(f) have
been analyzed. To keep the analysis tractable, Algorithm 2 ana-
lyzes loop bodies exactly once. That is, it ignores back-edges of
loops. As a result, loops are treated conceptually equivalent to
if-then-else statements.
Finally, any local variables of f appearing in predicates p (for
each hp k OPi in the summary of f) are quantiﬁed-out. As a re-
sult, predicates appearing in the summary of f only contain formal
parameters of f.
We illustrate Algorithm 1 using Figure 4(A). For the function
file mask to av, Algorithm 2 returns the output:
hmode isdir ∧ (mask & MAY EXEC) k DIR SEARCHi
hmode isdir ∧ (mask & MAY WRITE) k DIR WRITEi
hmode isdir ∧ (mask & MAY READ) k DIR READi
where ‘mode isdir’ denotes ‘mode & S IFMT == S IFDIR’.
Observe that the summary only contains formal parameters of
file mask to av. When this summary is specialized to the call on
line (S3), formal parameters are replaced with the actual parameters
(e.g., mode by inode->i mode), thus specializing the summary to
the call-site, producing:
hinode isdir ∧ (mask & MAY EXEC) k DIR SEARCHi
hinode isdir ∧ (mask & MAY WRITE) k DIR WRITEi
hinode isdir ∧ (mask & MAY READ) k DIR READi
where ‘inode isdir’ denotes ‘inode->i mode & S IFMT == S IFDIR’.
For inode has perm, Algorithm 2 returns {htrue k λx.xi}, which
intuitively means that the function authorizes a conceptual opera-
tion based upon the access vector (x) passed to it. Thus, when this
call to inode has perm is specialized to the call on line (S3), the
summary obtained is the same shown above. Because line (S3) in
selinux inode permission is reached when (mask 6= 0), this
predicate is combined with predicates in the summary of the func-
tion inode has perm to produce the result shown in Figure 4(B).
Handling Recursion: Recursion in the kernel module introduces
strongly-connected components in its call-graph. Note that Al-
gorithm 1 requires the call-graph to be a directed acyclic graph
(DAG). To handle recursion, we consider the functions in a strongly-
connected component together. That is, we produce a consolidated
summary for each strongly-connected component. Intuitively, this
summary is the set of conceptual operations (and the associated
conditions) that could potentially be authorized if any function in
the strongly-connected component is called. Observe that handling
recursion also requires a small change to lines (7)-(11) of Algo-
rithm 2. Because of recursion, the summary of a function g that
is called by a function f may no longer be available in line (7), in
which case we skip forward to line (11).
3.1.2 Precision of Hook Analysis
Observe that Algorithm 2 analyzes all reachable statements of
each function. Thus, if a function f authorizes operation OP, then
hq k OPi ∈ Summary(f), for some predicate q. However, because
of the approximations employed by Algorithm 1 and Algorithm 2
to keep the analysis tractable, the predicate q may not accurately
describe the condition under which OP is authorized.
If a kernel module M is recursion-free, all functions in M are
loop-free, and updates to predicates can be determined precisely
(i.e., predicates are not set to Unknown), then Algorithm 2 propa-
gates predicates precisely. That is, the predicate at statement s is p
if and only if s is reached under condition p.
Because Algorithm 2 ignores back-edges on loops, loop bod-
ies are analyzed exactly once, and the predicates retrieved will be
imprecise. Similarly, because Algorithm 2 employs a heuristic to
handle recursion, the predicates retrieved will be imprecise. These
predicates are used during hook placement to determine the argu-
ments that the hook must be invoked with. Thus, imprecision in the
results of the analysis will mean manual intervention to determine
how hooks must be invoked. Fortunately, the code of hooks, even
in complex kernel modules such as LSM-SELinux is relatively sim-
ple, and we were able to retrieve the conditions precisely in most
cases. For instance, there were no loops in any of the hooks from
LSM-SELinux that we analyzed.
3.2 Analysis of the Linux kernel
TAHOE’s kernel analysis complements its hook analysis by de-
termining the set of conceptual operations performed by each func-
tion in the kernel. For instance, TAHOE’s kernel analysis infers that
vfs rmdir, the virtual ﬁle system function for directory removal
(Figure 3(A)), performs the conceptual operations DIR RMDIR,
DIR SEARCH, and DIR WRITE, corresponding, respectively, to
removing, searching within, and writing to a directory. Observe
that line (V5) of vfs rmdir is a call through a function pointer.
Its targets are physical ﬁle system-speciﬁc functions for directory
removal, such as ext2 rmdir in the ext2 ﬁle system.
Figure 5(A) shows a portion of the call-graph of ext2 rmdir.
Note that the functions shown in the call-graph (ext2 unlink,
ext2 dec count, etc.) can also be called by other functions in the
kernel; these edges are not shown in Figure 5(A). When a request is
received to remove directory bar from directory foo, ext2 rmdir
checks to see that bar is empty via a call to ext2 rmdir empty
(not shown in Figure 5(A)). It then calls ext2 unlink, which mod-
iﬁes ext2-speciﬁc data structures and removes the entry of bar
from the inode of foo. Finally, it calls ext2 dec count to decre-
ment the ﬁeld i nlink on the inodes of both foo and bar. Fig-
ure 5(B) shows the relevant snippet of TAHOE’s analysis on the
Linux kernel. It infers that ext2 rmdir performs the conceptual
operations DIR RMDIR, DIR SEARCH and DIR WRITE. Because
ext2 rmdir is pointed to by dir->i op->rmdir (as determined
by pointer analysis algorithms employed by CIL [18], the tool that
TAHOE is built upon), it is called indirectly from vfs rmdir, and
TAHOE infers that vfs rmdir performs these conceptual opera-
tions as well. We now examine the analysis in detail.
(A) Portion of the call-graph of the Linux kernel, showing
ext2 rmdir. Relevant code snippets from each function are shown
in boxes.
ext2 delete entry: DIR WRITE
ext2 get page: DIR SEARCH
ext2 find entry: DIR SEARCH
ext2 dec count: FILE UNLINK
ext2 unlink: FILE UNLINK, DIR WRITE, DIR SEARCH
ext2 rmdir: DIR RMDIR, DIR WRITE, DIR SEARCH
(B) Portion of kernel analysis results relevant to (A).
Figure 5: Example to illustrate TAHOE’s kernel analysis.
3.2.1 The Kernel Analysis Algorithm
Like hook analysis, TAHOE’s kernel analysis recovers the set of
conceptual operations performed by each kernel function. How-
ever, unlike hook analysis, it does not recover the conditions under
which a conceptual operation is performed. Several hooks, includ-
ing selinux inode permission (Figure 4(A)), authorize differ-
ent conceptual operations based upon the arguments they are in-
voked with. Consequently, the conditions recovered by hook anal-
ysis can be used to infer arguments during hook placement. On the
other hand, for kernel functions, we only need to infer if there exist
arguments such that the kernel function performs a conceptual op-
eration. For instance, suppose ext2 rmdir is invoked in response
to a request to remove directory bar from directory foo. As men-
tioned earlier, ext2 rmdir ﬁrst checks to see that bar is empty; if
not, directory removal fails, and bar is not removed. However, it
is important to note that if bar was empty (and certain other con-
ditions satisﬁed), then it would have been removed. That is, there
exists some argument such that ext2 rmdir performs the concep-
tual operations shown in Figure 5(B). Thus, it sufﬁces to recover
the conceptual operations performed by a kernel function irrespec-
tive of the conditions under which they are performed.
The kernel analysis algorithm is shown in Algorithm 3. It pro-
cesses the call-graph of the kernel in a bottom-up fashion, analyz-
ing a function after all its callees have been analyzed. Recursion,
which leads to strongly-connected components in the call-graph, is
dealt with by consolidating the results for each strongly-connected
component, as described in Section 3.1.1 for hook analysis.
Algorithm : ANALYZE KERNEL
Input
Output
: Linux kernel.
: For each function in the kernel, a set {OP} of operations that it
may perform.
1
2
3
4
5
6
7
8
9
Construct the call-graph G of the kernel
L := List of vertices of G, reverse topologically sorted
foreach f ∈ L do
R := ANALYZE KERNEL FUNCTION(f )
foreach g such that f calls g do
R := R ∪ CodePatterns(g)
CodePatterns(f ) := R
OPS := SEARCH IDIOMS(R) /* Described in Section 3.2.2 */
KernelSummary(f ) := OPS
Algorithm 3: TAHOE’s algorithm for kernel analysis.
Informally, Algorithm 3 searches for combinations of code pat-
terns in each kernel function. It then searches through a set of id-
ioms (on line 8) for these code-patterns to determine if the func-
tion performs a conceptual operation. An idiom is a rule that re-
lates a combination of code-patterns to conceptual operations. In-
tuitively, these code-patterns correspond to manipulations of kernel
data structures that typically happen when a conceptual operation is
performed by the kernel. For instance, removal of a directory bar
from foo (conceptual operation DIR RMDIR) usually involves set-
ting the ﬁeld i size of the inode of bar to 0, and decrementing the
ﬁeld i nlinks of the inodes corresponding to bar and foo. Sim-
ilarly, reading from a directory (conceptual operation DIR READ)
usually involves modifying its access time (ﬁeld i atime of the in-
ode). We describe the expressive power of, and the methodology
used to write idioms in Section 3.2.2.
Algorithm : ANALYZE KERNEL FUNCTION(f )
Input
Output
R := φ
foreach statement s of f do
: f : A kernel function.
: A set of code patterns that appear in f .
if (s matches an entry P in IdiomCodePatterns) then R := R ∪ {P}
return R
Algorithm 4: Searching for code patterns that appear in
idioms.
1
2
3
4
Algorithm 3 ﬁrst gathers the set of code patterns that appear in
its body, as well as those that appear in its callees. Code patterns
are gathered as described in Algorithm 4, which scans the code
of a kernel function, and searches for code-patterns from the set
IdiomCodePatterns. This set contains code-patterns that appear
in the idioms used by TAHOE. Algorithm 3 then searches through
the set of idioms (line 8) to determine the set of operations that are
potentially performed by the kernel function.
For instance, consider Figure 5(A): the lines inode->i size
= 0 and inode->i nlink-- appear in the functions ext2 rmdir
and ext2 dec count, respectively. As Figure 6(B) shows, one of
the idioms TAHOE uses is “DIR RMDIR :- SET inode->i size
TO 0 ∧ DECR inode->i nlink”. Both these code patterns ap-
pear in the set CodePatterns(ext2 rmdir) after line (7) on Al-
gorithm 3 when ext2 rmdir is processed. Because these pat-
terns also appear in the idiom above, the operation DIR RMDIR
is added to the set OPS on line (8), and consequently to Kernel-
Summary(ext2 rmdir), which denotes the set of conceptual op-
erations performed by ext2 rmdir.
Observe that code patterns that appear in an idiom can be drawn