0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
3
0
0
6
0
0
8
0
0
8
0
0
6
0
0
7
0
0
0
0
0
5
0
0
0
0
0
0
0
0
0
0
3
0
0
11
0
1
22
0
2
22
0
2
18
0
2
23
1
2
24
0
0
55
0
0
0
0
0
1
0
0
0
0
135
141
141
100
116
116
86
115
114
86
115
114
95
118
117
86
114
114
82
106
106
46
106
106
106
106
106
105
106
106
106
106
141
117
116
116
119
116
106
106
106
106
106
106
95.74%
100%
100%
85.47%
99.15%
99.15%
74.14%
99.14%
98.28%
74.14%
99.14%
98.28%
79.83%
99.16%
98.32%
74.14%
98.28%
98.28%
77.36%
100%
100%
43.39%
100%
100%
100%
100%
100%
99.05%
100%
100%
100%
100%
TABLE V: The successes and failures of reassembling binaries, with six different optimization levels. The datasets used were
the Coreutils binaries, compiled in 32-bit (due to limitations of the original Uroboros prototype), and the CGC binaries, which
are all 32-bit. The column “Safety Opt-outs” represents the number of binaries for which the tool detected that functionality
would be broken and opted out, “Generation Failures” refers to instances of the tool itself crashing during binary generation,
and “Test Failures” conveys the number of reassembled binaries that failed functionality testing.
Binary
Opt. Level
CROMU 00043
NRFIN 00004
EAGLE 00005
NRFIN 00007
KPRCA 00007
NRFIN 00026
Os
Os
Os
O3
Os
O0
Size
93 KB
344 KB
5,408 KB
233 KB
91 KB
10,768 KB
Code Size
7.6 KB
223 KB
9.4 KB
10 KB
7.5 KB
10,600 KB
Time
35s
37s
75s
73s
93s
525s
Time (Fast)
4s
20s
20s
35s
70s
410s
TABLE VI: A comparison between the analysis runtimes of
Ramblr and Ramblr Fast on some binaries in the CGC
dataset.
a percent). We evaluated the binaries produced by Ramblr,
but identiﬁed no execution overhead. For most purposes, the
binaries are perfect replacements for the originals.
Likewise, Uroboros introduced a small increase in size
for their Coreutils dataset. Since unimportant sections (like
.comment) are removed by Ramblr during reassembling,
our binaries are usually smaller than the originals. Compensat-
ing for this removal, the resulting size is practically identical.
F. Ramblr Runtime
Ramblr Fast trades functionality guarantees of the re-
sulting binaries for improved speed of the reassembling pro-
cess. For most binaries in our dataset, this is irrelevant. In fact,
the median runtime of Ramblr Fast in the CGC dataset is
2.8 seconds, compared to 3.0 seconds for Ramblr. However,
Ramblr Fast scales considerably better for large binaries.
In Table VI, we discuss the relative runtime of Ramblr
versus Ramblr Fast for the biggest CGC binaries in our
dataset. Our fast workarounds signiﬁcantly decrease runtime
in all cases, but it is important to note that runtime is not
completely contingent on binary size, but rather, on the amount
of code that must be analyzed by the data classiﬁcation and
symbolization steps of the systematic Ramblr approach.
G. Execution Overhead and Binary Size
XI. DISCUSSION
While our approach improves the feasibility of real-world
binary reassembly, it is a long way from “solving” the general
issue. To focus the community’s attention on potential future
work in this ﬁeld, we detail what we feel are the biggest
limitations of our technique in this section.
The infeasibility of static content classiﬁcation. We
admit, and would like to stress again, that as Horspool, et al.
maintained, static content classiﬁcation is infeasible [11]. Our
reassembling approach is an empirical solution that works on
many binaries whose integer distributions roughly follow the
pattern as presented in Section VII. Obviously, an easy way for
anti-reassembling is basing the binary to another base address
during linking, so immediate values belonging to memory
region of binaries collide with normal immediate values in
the binary. In that case, our approach will most likely fail and
result in broken binaries.
In Section 6.2.1 of the Uroboros paper, the authors re-
port that binaries produced by Uroboros have execution time
overheads of up to 7 percent (although the average was under
CFG recovery. The performance of CFG recovery may
work differently on binaries holding different features. The
technique on which our CFG recovery is based works well
14
on our tested Linux binaries compiled with GCC or Clang,
which do not generate any inline data [1]. Some compilers (like
MSVC) puts inline data into executable regions of binaries,
most notably, jump tables. While we believe our CFG recovery
and disassembly technique will work on such binaries with
the help of content classiﬁcation, more work is needed in that
direction.
XII. CONCLUSION
We presented Ramblr, a tool for the disassembly, mod-
iﬁcation, and reassembly of binaries. The proposed approach
extends previous approaches to the problem of reassembling
binaries, making it possible to apply static binary modiﬁcations
to real-world binaries, even when compiler optimizations are
used. Ramblr uses a novel composition of static analyses
to characterize data contained in a binary, allowing for an
improved symbolization. In addition, the reassembly process
introduces no execution overhead in the resulting binary. The
ability to modify binaries without affecting their performance
opens a number of applications, ranging from efﬁcient instru-
mentation to binary hardening.
ACKNOWLEDGEMENTS
We would like to thank all contributors to the DARPA Cy-
ber Grand Challenge organization (for providing an excellent
testing dataset for Ramblr), the contributors of angr, and all
our fellow Shellphish CGC team members. This material is
based on research sponsored by the Ofﬁce of Naval Research
under grant number N00014-15-1-2948 and by DARPA under
agreement number N66001-13-2-4039. The U.S. Government
is authorized to reproduce and distribute reprints for Gov-
ernmental purposes notwithstanding any copyright notation
thereon. This work is also sponsored by a gift from Google’s
Anti-Abuse group.
The views and conclusions contained herein are those of
the authors and should not be interpreted as necessarily repre-
senting the ofﬁcial policies or endorsements, either expressed
or implied, of DARPA or the U.S. Government.
REFERENCES
[1] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos, “An
In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries,” in
25th USENIX Security Symposium (USENIX Security ’16). Austin,
TX: USENIX Association, 2016, pp. 583–600.
[2] G. Balakrishnan and T. Reps, “Analyzing Memory Accesses in x86
Executables,” in International Conference on Compiler Construction,
2004, pp. 5–23.
[3] A. R. Bernat and B. P. Miller, “Anywhere, Any-Time Binary Instrumen-
tation,” in Proceedings of the 10th ACM SIGPLAN-SIGSOFT Workshop
on Program Analysis for Software Tools (PASTE ’11), 2011, pp. 9–16.
[4] D. L. Bruening, “Efﬁcient, Transparent, and Comprehensive Runtime
Code Manipulation,” Ph.D. dissertation, Massachusetts Institute of
Technology, 2004.
[5] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “BAP: A Binary
Analysis Platform,” in International Conference on Computer Aided
Veriﬁcation, vol. 6806 LNCS. Springer, 2011, pp. 463–469.
[6] Cryptic Apps, “Hopper,” https://www.hopperapp.com/.
[7] B. De Sutter, B. De Bus, K. De Bosschere, P. Keyngnaert, and
B. Demoen, “On the Static Analysis of Indirect Control Flow Transfers
in Binaries,” in Proceedings of the International Conference on Parallel
and Distributed Processing Techniques and Application, 2000, pp.
1013–1019.
[8] M. Egele, M. Woo, and D. Brumley, “Blanket Execution: Dynamic
Similarity Testing for Program Binaries and Components,” in 23rd
USENIX Security Symposium (USENIX Security ’14). San Diego, CA:
USENIX Association, 2014, pp. 303–317.
[9] GCC, “GCC 5 Release Notes,” https://gcc.gnu.org/gcc-5/changes.html.
[10] L. C. Harris and B. P. Miller, “Practical Analysis of Stripped Binary
Code,” ACM SIGARCH Computer Architecture News, vol. 33, no. 5,
pp. 63–68, 2005.
[11] R. N. Horspool and N. Marovac, “An Approach to the Problem of
Detranslation of Computer Programs,” Computer Journal, vol. 23, no. 3,
pp. 223–229, 1980.
J. Kinder, “Static Analysis of x86 Executables,” Ph.D. dissertation,
2010.
[12]
[13] N. Nethercote and J. Seward, “Valgrind: A Framework for Heavyweight
Dynamic Binary Instrumentation,” in Proceedings of the 2007 ACM
SIGPLAN Conference on Programming Language Design and Imple-
mentation (PLDI ’07), 2007, p. 89.
[14] P. O’Sullivan, K. Anand, A. Kotha, M. Smithson, R. Barua, and
A. D. Keromytis, “Retroﬁtting Security in COTS Software with Bi-
nary Rewriting,” IFIP Advances in Information and Communication
Technology, vol. 354, pp. 154–172, 2011.
[15] R. Paleari, L. Martignoni, G. Fresi Roglia, and D. Bruschi, “N-
version Disassembly: Differential Testing of x86 Disassemblers,” in
Proceedings of the 19th International Symposium on Software Testing
and Analysis (ISSTA ’10), 2010, p. 265.
pancake, “radare,” http://www.radare.org/r/.
[16]
[17] N. A. Quynh. (2016) The Ultimate Disassembly Framework Capstone.
[Online]. Available: http://capstone-engine.org
[18] T. Reps and G. Balakrishnan, “Improved Memory-Access Analysis for
x86 Executables,” International Conference on Compiler Construction,
vol. 4959 LNCS, no. i, pp. 16–35, 2008.
s3team. (2015) s3team/uroboros: Infrastructure for Reassembleable
Disassembling and Transformation (v 0.1).
[Online]. Available:
https://github.com/s3team/uroboros
[19]
[20] Shellphish, “DARPA CGC,” http://shellphish.net/cgc/.
[21] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna,
“(State of) The Art of War: Offensive Techniques in Binary Analysis,”
in Proceedings of the IEEE Security and Privacy, 2016, pp. 138–157.
[22] M. Smithson, K. Elwazeer, K. Anand, A. Kotha, and R. Barua,
“Static Binary Rewriting without Supplemental Information: Overcom-
ing the Tradeoff between Coverage and Correctness,” in Proceedings
- 20th Working Conference on Reverse Engineering (WCRE 2013),
R. L¨ammel, R. Oliveto, and R. Robbes, Eds.
Koblenz, Germany:
IEEE, 2013, pp. 52–61.
[23] Vector 35, “binary.ninja : a reversing engineering platform,” https://
binary.ninja/.
[24] M. Wang, H. Yin, A. V. Bhaskar, P. Su, and D. Feng, “Binary Code
Continent: Finer-Grained Control Flow Integrity for Stripped Binaries,”
in Proceedings of 2015 Annual Computer Security Applications Con-
ference (ACSAC ’15), 2015, pp. 331–340.
[25] S. Wang, P. Wang, and D. Wu, “Reassembleable Disassembling,” in
24th USENIX Security Symposium (USENIX Security ’15). USENIX
Association, 2015, pp. 627–642.
[26] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Securing Untrusted
Code via Compiler-Agnostic Binary Rewriting,” in Proceedings of the
28th Annual Computer Security Applications Conference (ACSAC ’12),
2012, p. 299.
[27] R. Wartell, V. Mohan, K. W. Hamlen, Z. Lin, and W. C. Rd, “Binary
Stirring: Self-randomizing Instruction Addresses of Legacy x86 Binary
Code,” in Proceedings of the 2012 ACM Conference on Computer and
Communications Security (CCS ’12), 2012, pp. 157–168.
J. Zeng, Y. Fu, K. a. Miller, Z. Lin, X. Zhang, and D. Xu, “Obfuscation
Resilient Binary Code Reuse through Trace-oriented Programming,” in
Proceedings of the 2013 ACM SIGSAC Conference on Computer &
Communications Security (CCS ’13), 2013, pp. 487–498.
[28]
[29] M. Zhang and R. Sekar, “Control Flow Integrity for COTS Binaries,”
in Proceedings of the 22nd USENIX Conference on Security (USENIX
Security ’13), 2013, pp. 337–352.
15