25.81
76.5
26.38
62.8
37.13
Figure 6: Operation sequences in the branchless Mont-
gomery ladder multiplication (Algorithm 2) on two different
scalars
5.1 Measurement on a 1-bit processing
sequence
, Zci
and Zci
, Zci
), and the Mdouble operation takes two arguments (Xci
In the branchless Montgomery ladder algorithm (Algorithm 2),
,
, Xci
the Madd operation takes a list of four arguments (Xci
, Zci
)
Zci
at sequence i, where ci = ki + 1 and ci = ki + 1 (ki is the value of
the i-th scalar bit).
While the algorithm is running, the GF2m_Sqare function is
invoked on every sequence of the Madd and Mdouble operations.
For the Madd operation, the squaring function is called with an
input derived from Xci
(see Algorithm 4). For
, Xci
Mdouble operation, the function is invoked four times with inputs
derived from Xci
and Zci
(see Algorithm 3). Note that when exe-
cuting the GF2m_Sqare function, all the indices used for lookups
to SQR_tb are taken from the input of the function. Hence, the
behavior of the stride prefetcher at the i-th sequence of the 1-bit
processing in the Montgomery ladder multiplication is dependent
on an ordered list of inputs (Xci
), which is determined
by the scalar bit ki.
We can measure the prefetching activities by probing the cache
status resulting from the executions of the GF2m_Sqare function
at every sequence. As illustrated in Fig. 5, each iteration of the
Montgomery ladder multiplication makes a total of five invocations
of the GF2m_Sqare function. Due to the limited resolution of the
Flush+Reload probing technique, it is difficult to observe all the
prefetching activities separately. Instead, the probing is performed
once for each sequence, which will result in measurements on the
aggregated activities by a series of GF2m_Sqare invocations. In
order to make the measurement results of consecutive sequences
distinguishable, the probing is done at the end of the Mdouble
execution (i.e., the time after t5 in Fig.5). The timing information
can be obtained by probing another memory line containing the
epilogue stub of the Mdouble function. Owing to the constant-
time execution of the Montgomery ladder multiplication, repeated
probings at every fixed time slot allow consistent measurements
on the cache activity at that time of every iteration.
, Zci
, Xci
, Zci
Table 4 shows an example of measurements on prefetching ac-
tivities for the first 20 iterations (i.e., time slots) of the Montgomery
ladder multiplication. We use the metric of cache hit ratio (œÅ), which
is defined as the number of observed cache hits divided by the total
number of measurements. Each slot shows distinguishable values of
œÅ on both cache lines (note that prefetching activities on Line#1 and
Line#2 are independent of each other). A low ratio (œÅ  70) is a strong indication that
at least one of the invocations during times t1 to t5 has triggered
the stride prefetching. In addition, we observe the other cases with
20 < œÅ < 70 in the remaining measurement results. From the results
of an empirical analysis with memory access patterns on them, we
conclude that they happened as a result of the dynamic behavior
of the stride prefetcher, as noted in the previous section.
5.2 Distinguishability between two scalars
The measurement of the prefetching activity on the i-th iteration
of the Montgomery ladder algorithm can be modeled as a map M
(1)
where œÅ1 and œÅ2 refer to the cache hit ratio on Line#1 and Line#2,
respectively. M is defined such that given an input vector ai of
sequence i, it outputs a tuple of the values of two cache hit ratios.
By using the map, we can distinguish between two executions
of the branchless implementation of Montgomery ladder multipli-
cation on different scalars. We consider an example of multipli-
cations with two 4-bit scalars k = 10112 and k‚Ä≤ = 10012. Fig. 6
shows the sequences of the Madd and Mdouble operations when
running Algorithm 2 with inputs of those scalars. Suppose that
the iteration begins with the initial values (X1, Z1) = (x1, z1) and
(X2, Z2) = (x2, z2). Since k and k‚Ä≤ share the same values for the two
leftmost bits, they both take the same inputs a1 = (x1, z1, x2, z2)
and a2 = (2x2, 2z2, x1 + x2, z1 + z2) in the first two iterations. This
leads to the same prefetching activities on them. On the other
hand, they differ in the value of the third bit, thereby having the
input a3 = (2x1 + 2x2, 2z1 + 2z2, x1 + 3x2, z1 + 3z2) for k and
a3 = (x1 +3x2, z1 +3z2, 2x1 +2x2, 2z1 +2z2) for k‚Ä≤, which results in
(œÅ1, œÅ2) ‚Üê M(ai), ai =(cid:0)Xci , Zci , Xci , Zci
(cid:1) ,
‚äï‚äï‚äï‚äï1011(ùë•#	,ùëß#	)(ùë•(	,ùëß(	)‚äï‚äï‚äï‚äï1001‚ë†Madd(ùë•#,ùëß#,ùë•(,ùëß()Mdouble(ùë•(,ùëß()[ùëò‚Ä≤=1001(][ùëò=1011(]‚ë¢Madd(2ùë•#	+2ùë•(	,2ùëß#	+2ùëß(	,ùë•#	+3ùë•(	,ùëß#	+3ùëß(	)Mdouble(ùë•#	+3ùë•(	,ùëß#	+3ùëß(	)‚ë£Madd(3x#	+5x(	,3ùëß#	+5ùëß(	,2ùë•#	+6ùë•(	,2ùëß#	+6ùëß(	)Mdouble(2x#	+6x(	,2ùëß#	+6ùëß(	)‚ë°Madd(2ùë•(	,2ùëß(	,ùë•#	+ùë•(	,ùëß#	+ùëß(	)Mdouble(ùë•#	+ùë•(	,ùëß#	+ùëß(	)‚ë¢Madd(x#	+3x(	,ùëß#	+3ùëß(	,2ùë•#	+2ùë•(	,2ùëß#	+2ùëß(	)Mdouble(2x#	+2x(	,2ùëß#	+2ùëß(	)‚ë£Madd(4x#	+4x(	,4ùëß#	+4ùëß(	,3ùë•#	+5ùë•(		,3ùëß#	+5ùëß(	)Mdouble(3ùë•#	+5ùë•(	,3ùëß#	+5ùëß(	)(ùë•#	,ùëß#	)(ùë•(	,ùëß(	)‚ë†Madd(ùë•#	,ùëß#	,ùë•(	,ùëß(	)Mdouble(ùë•(	,z(	)‚ë°Madd(2ùë•(	,2ùëß(	,ùë•#	+ùë•(	,ùëß#	+ùëß(	)Mdouble(ùë•#	+ùë•(	,ùëß#	+ùëß(	)Session 2A: Side Channel 1 CCS‚Äô18, October 15-19, 2018, Toronto, ON, Canada140Figure 7: Differences of œÅ1 and œÅ2 between two scalars that share the Dpos leftmost bits
different prefetching activities. At the fourth bit, those scalars have
the same value. In this case, however, they result in different be-
haviors since the arguments of the Madd and Mdouble functions
have been accumulated from the results of previous iterations.
The above example suggests a crucial aspect of the prefetching
activities in the branchless Montgomery ladder multiplication. That
is, by comparing the sequences of M(a1),M(a2), ... between two
executions, we can learn the following:
‚Ä¢ Whether two scalars k and k‚Ä≤ have the same leftmost bits.
‚Ä¢ If so, how many bits are actually shared between them.
Another example illustrated in Fig.7 supports these findings. Let
us consider two scalars k and k‚Ä≤ that share the Dpos leftmost bits
(Dpos ‚â• 0). Fig.7 shows the differences of œÅ1 (as well as œÅ2) between
the two scalars at each 1-bit processing sequence of the branchless
Montgomery ladder multiplication. Measurements on the (i + 1)-th
scalar bit are shown at a time slot of number i in the graph. Bright
color shows that there is almost no difference between the values
at that time slot, while significant difference is marked with dark
color. It is noticeable that for all the four cases, the Dpos leftmost
slots show no difference in both œÅ1 and œÅ2, compared to that shown
by the remaining slots.
6 EXPLOITATION
6.1 Recovering unknown scalar bits
The value of the scalar used for the scalar point multiplication is
treated as a secret in most cryptographic algorithms. The distin-
guishability given by the map M can be exploited by an attacker
who attempts to reveal unknown bits of the secret scalar used in the
branchless implementation of Montgomery ladder multiplication.
In this section, we demonstrate how an attacker can recover
unknown scalar bits by utilizing information leakage from the
prefetcher.
Method. The basic idea of our method is to try to recover the left-
most bits by bits of the unknown scalar through iterations. Before
giving details of the method, we present some notations. Let k be a
bit string of the secret scalar to be recovered by our attack and nk
be the length of k in bits. Let œÉ be a substring of k with length nœÉ
starting from the leftmost bit. In other words, we denote by œÉ the
recovered substring from k after iterations of our attack. Initially,
we set œÉ = nil and nœÉ = 0. In each iteration of the attack, we try to
recover a substring of length nc (0 < nc ‚â§ nk) from k. The length
nc may be chosen as an attack parameter.
The attack proceeds through the following steps.
Step 1: Measure prefetching activities (i.e., cache usages on Line#1
and Line#2) yielded during the victim‚Äôs execution of the
scalar point multiplication. As a result, the attacker obtains
a list V =(cid:0)M(a1), ...,M(ank)(cid:1).
Step 2: Construct a list of candidate scalar k‚Ä≤ as follows
(a) Initialize D ‚Üê {}.
(b) For each substring c ‚àà {0, 1}nc , construct a candidate bit
string k‚Ä≤ = œÉ‚à•c‚à•r, where r is an arbitrary bit string of
length nr = nk ‚àí nœÉ ‚àí nc, and insert k‚Ä≤ into D.
Step 3: For each k‚Ä≤ ‚àà D
(a) Execute the multiplication with k‚Ä≤ on the attacker‚Äôs ma-
)(cid:17).
1), ...,M(a‚Ä≤
nk
(cid:16)M(a‚Ä≤
(cid:12)(cid:12)M(ai) ‚àí M(a‚Ä≤
i)(cid:12)(cid:12).
chine and obtain a list A =
(b) Compute the differences
nœÉ +nc
i =nœÉ +1
(‚àÜ1, ‚àÜ2) ‚Üê 1
nc
Step 4: Select k‚Ä≤(= œÉ‚à•c‚à•r) in D such that both ‚àÜ1 and ‚àÜ2 are the
least values among the candidates in D, and update œÉ and
nœÉ as follows
œÉ ‚Üê œÉ‚à•c,
nœÉ ‚Üê nœÉ + nc .
Step 5: Repeat Step 2 until nœÉ = nk.
Step 6: Output œÉ as a result of the recovery of the secret scalar.
Slot 0ùê∑"#$=0ùê∑"#$=8ùê∑"#$=16ùê∑"#$=24Slot 8Slot 16Slot 24Œîùúå.Œîùúå/Œîùúå.Œîùúå/Œîùúå.Œîùúå/Œîùúå.Œîùúå/Session 2A: Side Channel 1 CCS‚Äô18, October 15-19, 2018, Toronto, ON, Canada141Figure 8: Evaluation of the difference in prefetching activities for all possible 8-bit substrings of k
Error handling. In the ideal case of performing Step 4 in the above
method, the attacker will always find out a unique k‚Ä≤ in D that has
the least values of both ‚àÜ1 and ‚àÜ2. In most practical cases, however,
system noise is inevitably introduced during the measurement
of prefetching activities due to a variety of unexpected system
behaviors. This may lead to an error in selecting the correct scalar
in D. For instance, it would be possible to have two candidates k‚Ä≤
and k‚Ä≤‚Ä≤ such that k‚Ä≤ has the least value of ‚àÜ1 while k‚Ä≤‚Ä≤ also has the
least value of ‚àÜ2, which makes it infeasible to determine the correct
one.
Such errors can be handled by reducing the noise. Specifically,
the attacker repeats the process of Step 3 and Step 4 and counts a
candidate that has the least value of ‚àÜ1 or ‚àÜ2. After that, by using
a simple majority rule, the attacker chooses the candidate that has
been counted the most number of times.
6.2 Attacking ECDH
In this section, we deliver an attack against the ECDH key agree-
ment protocol implemented in the OpenSSL library.
ECDH. Elliptic Curve Diffie-Hellman (ECDH) is a variant of the
Diffie-Hellman algorithm using Elliptic curve cryptography. In gen-
eral case ECDH is used for the purpose of key agreement between
two entities. Suppose that users A and B want to establish a shared
secret with each other. A and B have private keys PriA = kA and
PriB = kB, and public keys PubA = kAP and PubB = kBP, respec-
tively, where P is the generator for the curve. By exchanging their
public keys with each other, they can compute the shared secret
key s = kAPubB = kBPubA = kAkBP.
Experimental setup. We target the OpenSSL that implements
the branchless Montgomery ladder multiplication algorithm. As
described in Section 1, we conducted experiments on OpenSSL
1.1.0g, which is the latest version of OpenSSL at the time of writing
this paper. All the experiments were performed on a server equipped
with a Xeon E5-2620v4 Broadwell processor and 16GB of memory,
running 64-bit Ubuntu 16.04.4 LTS. Each CPU core has an 8-way
32KB L1 data/instruction cache, an 8-way 256KB L2 unified cache,
and a 20-way 20MB unified LLC cache shared by all cores across
the CPU.
Since OpenSSL 1.1.0g is not contained as a bundle in Ubuntu
16.04, we built the library by downloading it from the official web-
site of OpenSSL. The library was built with debugging symbols
on the executable for the purpose of identifying locations of the
Flush+Reload probing. Note that debugging symbols are not loaded
during run time, thus they do not affect the feasibility of the attack
as well as the performance of the victim application.
Victim application. For the experiment, we built our own victim
application that performs the ECDH algorithm. It is implemented in
C with OpenSSL 1.1.0g being linked to the executable. For the ECDH
key generation, we used the ECDH_compute_key function in the
library. This function internally makes a call to the EC_POINT_mul
function by passing a private key as a scalar k, through which our
targeted function is consequentially invoked. The victim application
uses sect571r1 elliptic curve for the multiplication. We generated a
pair of public and private key for the victim by using the OpenSSL
command line tool. The private key, i.e., a scalar k that we try to
recover, is 568 bits in length.
The victim application waits for key generation requests from a
spying process. Upon receipt of the request as well as the attacker‚Äôs
public key, it performs ECDH key generation, i.e., the scalar point
multiplication, then responds to the attacker with the result. We
consider an attack scenario where an attacker‚Äôs spying process is
co-located with the victim process, but on different physical cores.
The communication between the spying process and the victim is
carried out through socket communications.
Results. We implemented the attack described in the previous
section and evaluated it against the victim application. In the exper-
iment, we chose the attack parameter nc = 8. That is, the spying
process attempted to recover 8 bits of the scalar k from the leftmost
bit for each iteration. We performed the attack through 71 iterations
of Steps 2-5 in the above method to recover all the bits of k. In each
iteration, prefetching activities were measured for all 256 possible
Difference (Œî)Candidate ùëêfor a substring of ùëò(ùëõ&=8)ùëê=0xùëéùëéSession 2A: Side Channel 1 CCS‚Äô18, October 15-19, 2018, Toronto, ON, Canada142candidates of the scalar. To measure the cache hit ratio on both
Line#1 and Line#2, i.e., evaluate M(¬∑), we captured 1,000 traces for
each 1-bit processing sequence of the scalar point multiplication.
Fig.8 shows the experimental result of recovering an 8-bit sub-
string of the scalar, which has a value of 0xaa. After processing
Step 3, we found that a candidate c=0xaa has the least values of
both ‚àÜ1 and ‚àÜ2 among 256 candidates, which is the correct answer
for the unknown scalar bits.
In the case where no measurement error occurred, it took around
15 min to recover 8-bit data from the scalar. While conducting the
attack experiments, we experienced a total of two measurement
errors over 71 iterations of the recovering process. For the overall
process, the attack took around 19 CPU hours to recover all the bits
of k. This includes the elapsed time to conduct the process of Step
1, which took only around 3 min to obtain the trace of the victim‚Äôs
prefetching activities.
We emphasize that Step 1 has been processed only once during
the entire attack execution. That is, our attack does not require any
involvement of the victim application when proceeding with the
recovery process (i.e., Steps 2-6). This makes our method a more
pragmatic attack on real-world applications.
6.3 Impact on the other algorithms
We demonstrated that our attack is able to successfully recover
private keys in ECDH algorithm. However, the presented attack
is not only limited to this specific algorithm. Now we discuss the
impact of our attack on the other cryptographic algorithms.
In elliptic curve-based cryptography, the scalar point multiplica-
tion algorithm is a core component for constructing cryptographic
functions. As described in the previous section, the attack we pre-
sented targets the scalar point multiplication, thus it can be applied
to the other EC-based cryptographic algorithms including both
signature (e.g., ECDSA) and encryption (e.g., ECIES).
Many RSA implementations also make good use of a lookup
table. The main operation performed during RSA decryption is the
modular exponentiation, which is implemented to repeatedly access
precomputed multipliers on the table according to the chunks of
the exponent. Since the access pattern for multipliers is dependent