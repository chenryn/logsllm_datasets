### 第二步：获取资源的实际URL

获取 `http://www.joes-hardware.com/` 的实际URL。

**因特网客户端**
- 访问 `www.joes-hardware.com`

**图2-6 PURL通过资源定位符服务器来命名资源的当前位置**

如果不是现在，那是什么时候呢？

### URN（统一资源名）的概念及其发展

URN背后的思想已经提出了一段时间。实际上，如果你查看某些相关规范的发布日期，你可能会问为什么它们还没有广泛应用。从URL转换到URN是一项巨大的工程。标准化工作的进程非常缓慢，而且通常都有充分的理由。支持URN需要进行很多改动——包括标准的一致性、对各种HTTP URL和应用程序的修改等。这些改动需要大量的工作，而且不幸的是（或者可能是幸运），URL仍然具有很大的实用价值，因此目前还不是进行这种转换的最佳时机。

在Web爆炸性增长的过程中，互联网用户——从计算机科学家到普通用户——都已经学会了使用URL。尽管URL的语法对于新手来说可能显得笨拙，并且存在一些顽固的问题，但人们已经学会了如何使用URL以及如何应对其中的一些缺陷。虽然URL有一些限制，但这并不是Web开发社区面临的最紧迫问题。

目前看来，在可预见的未来，互联网资源仍将以URL来命名。URL无处不在，是Web成功的重要组成部分。其他命名方案要想取代URL还需要一段时间。然而，URL确实有其局限性，可能会出现新的标准（如URN），部署这种新标准将有助于解决现有的一些问题。

### 2.7 更多信息

更多有关URL的信息，请参考以下资源：

- [W3C URI和URL命名及寻址](http://www.w3.org/Addressing/)
- [RFC 1738: Uniform Resource Locators (URL)](http://www.ietf.org/rfc/rfc1738)
- [RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax](http://www.ietf.org/rfc/rfc2396.txt)
- [RFC 2141: URN Syntax](http://www.ietf.org/rfc/rfc2141.txt)
- [永久统一资源定位符的网站](http://purl.oclc.org)
- [RFC 1808: Relative Uniform Resource Locators](http://www.ietf.org/rfc/rfc1808.txt)

### 第3章 报文

如果说HTTP是互联网的信使，那么HTTP报文就是它用来传递信息的包裹。第一章介绍了HTTP程序是如何通过发送报文来完成工作的。本章将详细介绍所有与HTTP报文相关的内容——如何创建报文以及如何理解它们。通过阅读本章，你将能够了解编写自己的HTTP应用程序所需的大部分知识。具体来说，你将理解以下概念：

- 报文是如何流动的
- HTTP报文的三个组成部分（起始行、首部和实体主体）
- 请求报文和响应报文之间的区别
- 请求报文支持的各种功能（方法）
- 响应报文返回的各种状态码
- 各种HTTP首部的作用

#### 3.1 报文流

HTTP报文是在HTTP应用程序之间发送的数据块。这些数据块以一些文本形式的元信息开头，描述了报文的内容及含义，后面跟着可选的数据部分。这些报文在客户端、服务器和代理之间流动。术语“流入”、“流出”、“上游”和“下游”用于描述报文的方向。

##### 3.1.1 报文流入源端服务器

HTTP使用术语“流入”和“流出”来描述事务处理的方向。报文流入源端服务器，完成工作后，会流回用户的代理中（参见图3-1）。

**图3-1 报文流入源端服务器并流回到客户端**

```
流入（流向服务器） GET /index.html HTTP/1.0
代理1 代理2 代理3
客户端 服务器
HTTP/1.0 200 OK 流出（流向用户代理）
Content-type: text/html
...
```

##### 3.1.2 报文向下游流动

HTTP报文像河水一样流动。无论是请求报文还是响应报文，所有报文都向下游流动（参见图3-2）。所有报文的发送者都在接收者的上游。在图3-2中，对于请求报文来说，代理1位于代理3的上游，但对于响应报文来说，代理1则位于代理3的下游。

**图3-2 所有报文都向下游流动**

```
请求（流向下游）
客户端
代理1
代理2
代理3
没有报文会向上游流动
服务器
代理3
代理2
代理1
响应（流向下游）
客户端
```

#### 3.2 报文的组成部分

HTTP报文是简单的格式化数据块。每条报文都包含一条来自客户端的请求或一条来自服务器的响应。它们由三个部分组成：描述报文的起始行、包含属性的首部块，以及可选的、包含数据的主体部分。

**图3-3 HTTP报文的三个部分**

```
起始行 HTTP/1.0 200 OK
Content-type: text/plain
首部
Content-length: 19
客户端 主体 Hi! I’m a message! 服务器
```

起始行和首部是由行分隔的ASCII文本。每行都以一个由两个字符组成的行终止序列作为结束，其中包括一个回车符（ASCII码13）和一个换行符（ASCII码10）。这个行终止序列可以写为CRLF。需要注意的是，尽管HTTP规范中说明应该用CRLF来表示行终止，但稳健的应用程序也应该接受单个换行符作为行的终止。有些老的或不完整的HTTP应用程序并不总是既发送回车符又发送换行符。

实体主体或报文主体（或简称为主体）是一个可选的数据块。与起始行和首部不同，主体中可以包含文本或二进制数据，也可以为空。

在图3-3的例子中，首部给出了一些与主体有关的信息。Content-Type行说明了主体的内容类型——在这个例子中，是一个纯文本文档。Content-Length行说明了主体的大小，在这里只有19个字节。

##### 3.2.1 报文的语法

所有的HTTP报文都可以分为两类：请求报文和响应报文。请求报文会向Web服务器请求一个动作。响应报文会将请求的结果返回给客户端。请求和响应报文的基本结构相同。图3-4显示了获取一张GIF图片所需的请求和响应报文。

**图3-4 包含请求和响应报文的HTTP事务**

```
HTTP请求报文中
包含命令和URL
GET /specials/saw-blade.gif HTTP/1.0
Host: www.joes-hardware.com
因特网
HTTP/1.0 200 OK
客户端 www.joes-hardware.com
Content-Type: image/gif
Content-Length: 8572
HTTP响应报文中
包含了事务的结果
```

**请求报文的格式：**

```
<method> <request-URL> <version>
<headers>
<entity-body>
```

**响应报文的格式（注意，只有起始行的语法有所不同）：**

```
<version> <status-code> <reason-phrase>
<headers>
<entity-body>
```

以下是各部分的简要描述：

- **方法（method）**：客户端希望服务器对资源执行的动作，例如GET、HEAD或POST。
- **请求URL（request-URL）**：命名所请求资源的完整URL或URL路径组件。
- **版本（version）**：报文使用的HTTP版本，格式为`HTTP/<major>.<minor>`。
- **状态码（status-code）**：三位数字，描述请求过程中发生的情况。
- **原因短语（reason-phrase）**：数字状态码的可读版本，只对人类有意义。
- **首部（header）**：零个或多个首部，每个首部包含一个名字、冒号、可选的空格、值，最后是一个CRLF。
- **实体主体部分（entity-body）**：包含任意数据的数据块，不是所有报文都包含实体主体部分。

**图3-5 请求和响应报文示例**

```
(a) 请求报文
GET /test/hi-there.txt HTTP/1.1
Accept: text/*
Host: www.joes-hardware.com

(b) 响应报文
HTTP/1.0 200 OK
Content-type: text/plain
Content-length: 19

Hi! I’m a message!
```

注意，一组HTTP首部总是应该以一个空行（仅有CRLF）结束，即使没有首部和实体主体部分也应如此。但由于历史原因，许多客户端和服务器在没有实体主体部分时会省略最后的CRLF。为了与这些流行但不符合规则的实现互通，客户端和服务器都应该接受那些没有最后那个CRLF的报文。

##### 3.2.2 起始行

所有HTTP报文都以一个起始行开始。请求报文的起始行说明了要做些什么。响应报文的起始行说明发生了什么。

**1. 请求行**

请求报文请求服务器对资源进行一些操作。请求报文的起始行，或称为请求行，包含了一个方法和一个请求URL，这个方法描述了服务器应该执行的操作，请求URL描述了要对哪个资源执行这个方法。请求行中还包含HTTP的版本，用来告知服务器客户端使用的是哪种HTTP。

所有这些字段都由空格符分隔。在图3-5a中，请求方法为GET，请求URL为/test/hi-there.txt，版本为HTTP/1.1。在HTTP/1.0之前，并不要求请求行中包含HTTP版本号。

**2. 响应行**

响应报文承载了状态信息和操作产生的所有结果数据，将其返回给客户端。响应报文的起始行，或称为响应行，包含了响应报文使用的HTTP版本、数字状态码，以及描述操作状态的文本形式的原因短语。

所有这些字段都由空格符分隔。在图3-5b中，HTTP版本为HTTP/1.0，状态码为200（表示成功），原因短语为OK，表示文档已经被成功返回。在HTTP/1.0之前，并不要求在响应中包含响应行。

**3. 方法**

请求的起始行以方法作为开始，方法用来告知服务器要做些什么。例如，在行中，请求方法为GET，请求URL为/test/hi-there.txt，版本为HTTP/1.1。