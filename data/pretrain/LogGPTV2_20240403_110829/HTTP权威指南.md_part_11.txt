第二步：获取资源实际的URL。 获取 http://www.joes-hardware.com/
因特网
客户端 www.joes-hardware.com
图2-6 PURL通过资源定位符服务器来命名资源的当前位置
如果不是现在，那是什么时候
URN背后的思想已经提出一段时间了。实际上，如果去看看某些相关规范的发布日
期，你可能会问，为什么它们现在都还没有投入使用。 40
从URL转换成URN是一项巨大的工程。标准化工作的进程很缓慢，而且通常都有
很充分的理由。支持URN需要进行很多改动——标准主体的一致性，对各种HTTP
URL与资源 ｜ 43
应用程序的修改等。做这种改动需要进行大量的工作，而且很不幸（或者可能很幸
运）的是URL还有很大的能量，还要等待更合适的时机才能进行这种转换。
在Web爆炸性增长的过程中，因特网用户——包括从计算机科学家到普通因特网用
户的每一个人——都已经学会使用URL了。在备受笨拙语法（对新手来说）和顽固
问题困扰的同时，人们已经学会了如何使用URL，以及如何对付它们的一些缺陷。
URL有一些限制，但这并不是Web开发社区所面临的最紧迫的问题。
目前看来，在可预见的未来，因特网资源仍然会以URL来命名。它们无处不在，而
且是Web的成功过程中一个非常重要的部分。其他命名方案想要取代URL还要一
段时间。但是，URL确实有其局限型，可能会出现新的标准（可能就是URN），对
这种标准进行部署会解决其中的某些问题。
2.7 更多信息
更多有关URL的信息，请参考以下资源。
• http://www.w3.org/Addressing/
这是W3C有关URI和URL命名及寻址的Web页面。
• http://www.ietf.org/rfc/rfc1738
RFC 1738，T. Berners-Lee、L. Masinter和M. McCahill编写的“Uniform Resource
41 Locators（URL）”（“统一资源定位符”）。
• http://www.ietf.org/rfc/rfc2396.txt
RFC 2396，T. Berners-Lee、R. Fielding和L. Masinter编写的“Uniform Resource
Identifiers（URI）：Generic Syntax”（“URI：通用语法”）。
• http://www.ietf.org/rfc/rfc2141.txt
RFC 2141，R. Moats编写的“URN Syntax”（“URN语法”）。
• http://purl.oclc.org
永久统一资源定位符的Web站点。
• http://www.ietf.org/rfc/rfc1808.txt
RFC 1808，R. Fielding编写的“Relative Uniform Resource Locators”（“相对统
42 一资源定位符”）。
44 ｜ 第2章
第3章
报文
HTTP
45
如果说HTTP是因特网的信使，那么HTTP报文就是它用来搬东西的包裹了。第
1章说明了HTTP程序是怎样互相发送报文来完成工作的。本章则会介绍所有与
HTTP报文有关的事情——如何创建报文，以及如何理解它们。通过阅读本章，就
可以了解编写自己的HTTP应用程序所需掌握的大部分内容。具体来说，你会理解
下列概念：
• 报文是如何流动的；
• HTTP报文的三个组成部分（起始行、首部和实体的主体部分）；
• 请求和响应报文之间的区别；
• 请求报文支持的各种功能（方法）；
• 和响应报文一起返回的各种状态码；
• 各种各样的HTTP首部都是用来做什么的。
3.1 报文流
HTTP报文是在HTTP应用程序之间发送的数据块。这些数据块以一些文本形式的
元信息（meta-information）开头，这些信息描述了报文的内容及含义，后面跟着
可选的数据部分。这些报文在客户端、服务器和代理之间流动。术语“流入”、“流
出”、“上游”及“下游”都是用来描述报文方向的。
3.1.1 报文流入源端服务器
HTTP使用术语流入（inbound）和流出（outbound）来描述事务处理（transaction）
的方向。报文流入源端服务器，工作完成之后，会流回用户的Agent代理中（参见
43 图3-1）。
流入（流向服务器） GET /index.html HTTP/1.0
代理1 代理2 代理3
客户端 服务器
HTTP/1.0 200 OK 流出（流向用户Agent代理）
Content-type: text/html
...
图3-1 报文流入源端服务器并流回到客户端
46 ｜ 第3章
3.1.2 报文向下游流动
HTTP报文会像河水一样流动。不管是请求报文还是响应报文，所有报文都会向
下游（downstream）流动（参见图 3-2）。所有报文的发送者都在接收者的上游
（upstream）。在图3-2中，对请求报文来说，代理1位于代理3的上游，但对响应
报文来说，它就位于代理3的下游1。
请求（流向下游）
客户端
代理1
代理2
代理3
没有报文会向上游流动
服务器
代理 3
代理2
代理 1 响应（流向下游）
客户端
图3-2 所有报文都向下游流动
3.2 报文的组成部分
HTTP报文是简单的格式化数据块。看一下图3-3给出的例子。每条报文都包含一
条来自客户端的请求，或者一条来自服务器的响应。它们由三个部分组成：对报文
进行描述的起始行（start line）、包含属性的首部（header）块，以及可选的、包含
数据的主体（body）部分。
注1： 术语“上游”和“下游”都只与发送者和接收者有关。我们无法区分报文是发送给源端服务器的还是
发送给客户端的，因为两者都是下游节点。
HTTP报文 ｜ 47
起始行 HTTP/1.0 200 OK
Content-type: text/plain
首部
Content-length: 19
客户端 主体 Hi! I’m a message! 服务器
图3-3 HTTP报文的三个部分
起始行和首部就是由行分隔的ASCII文本。每行都以一个由两个字符组成的行终止
序列作为结束，其中包括一个回车符（ASCII码13）和一个换行符（ASCII码10）。
这个行终止序列可以写做CRLF。需要指出的是，尽管HTTP规范中说明应该用
CRLF来表示行终止，但稳健的应用程序也应该接受单个换行符作为行的终止。有
些老的，或不完整的HTTP应用程序并不总是既发送回车符，又发送换行符。
实体的主体或报文的主体（或者就称为主体）是一个可选的数据块。与起始行和首
部不同的是，主体中可以包含文本或二进制数据，也可以为空。
在图3-3的例子中，首部给出了一些与主体有关的信息。Content-Type行说明了
主体是什么——在这个例子中，就是纯文本文档。Content-Length行说明了主体
44 有多大，在这里就只有19个字节。
3.2.1 报文的语法
所有的 HTTP 报文都可以分为两类：请求报文（request message）和响应报文
（response message）。请求报文会向Web服务器请求一个动作。响应报文会将请求
的结果返回给客户端。请求和响应报文的基本报文结构相同。图3-4显示了获取一
张GIF图片所需的请求和响应报文。
HTTP请求报文中
包含命令和URL
GET /specials/saw-blade.gif HTTP/1.0
Host: www.joes-hardware.com
因特网
HTTP/1.0 200 OK
客户端 www.joes-hardware.com
Content-Type: image/gif
Content-Length: 8572
HTTP响应报文中
包含了事务的结果
图3-4 包含请求和响应报文的HTTP事务
48 ｜ 第3章
这是请求报文的格式： 45
这是响应报文的格式（注意，只有起始行的语法有所不同）：
下面是对各部分的简要描述。
• 方法（method）
客户端希望服务器对资源执行的动作。是一个单独的词，比如GET、HEAD或
POST。本章稍后将详细介绍方法。
• 请求URL（request-URL）
命名了所请求资源，或者URL路径组件的完整URL。如果直接与服务器进行对
话，只要URL的路径组件是资源的绝对路径，通常就不会有什么问题——服务
器可以假定自己是URL的主机/端口。第2章详细地介绍了URL的语法。
• 版本（version）
报文所使用的HTTP版本，其格式看起来是这样的：
HTTP/.
其中主要版本号（major）和次要版本号（minor）都是整数。本章稍后会详细说
明HTTP的版本问题。
• 状态码（status-code）
这三位数字描述了请求过程中所发生的情况。每个状态码的第一位数字都用于描
述状态的一般类别（“成功”、“出错”等）。本章稍后提供了HTTP规范定义的状
态码及其含义的完整列表。 46
• 原因短语（reason-phrase）
数字状态码的可读版本，包含行终止序列之前的所有文本。本章稍后提供了
HTTP规范定义的所有状态码的原因短语示例。原因短语只对人类有意义，因
此，比如说，尽管响应行HTTP/1.0 200 NOT OK和 HTTP/1.0 200 OK中原因短
语的含义不同，但同样都会被当作成功指示处理。
HTTP报文 ｜ 49
• 首部（header）
可以有零个或多个首部，每个首部都包含一个名字，后面跟着一个冒号（:），然
后是一个可选的空格，接着是一个值，最后是一个CRLF。首部是由一个空行
（CRLF）结束的，表示了首部列表的结束和实体主体部分的开始。有些HTTP版
本，比如HTTP/1.1，要求有效的请求或响应报文中必须包含特定的首部。本章
稍后会探讨各种HTTP首部。
• 实体的主体部分（entity-body）
实体的主体部分包含一个由任意数据组成的数据块。并不是所有的报文都包含实
体的主体部分，有时，报文只是以一个CRLF结束。第15章详述了实体。
图3-5展示了一些假想的请求和响应报文。
（a）请求报文 （b）响应报文
GET /test/hi-there.txt HTTP/1.1 起始行 HTTP/1.0 200 OK
Accept: text/* Content-type: text/plain
Host: www.joes-hardware.com 首部
Content-length: 19
主体
Hi! I’m a message!
图3-5 请求和响应报文示例
注意，一组HTTP首部总是应该以一个空行（仅有CRLF）结束，甚至即使没有首
部和实体的主体部分也应如此。但由于历史原因，很多客户端和服务器都在没有实
体的主体部分时，（错误地）省略了最后的CRLF。为了与这些流行但不符合规则的
实现进行互通，客户端和服务器都应该接受那些没有最后那个CRLF的报文。
3.2.2 起始行
所有的HTTP报文都以一个起始行作为开始。请求报文的起始行说明了要做些什么。
47 响应报文的起始行说明发生了什么。
1. 请求行
请求报文请求服务器对资源进行一些操作。请求报文的起始行，或称为请求行，包
含了一个方法和一个请求URL，这个方法描述了服务器应该执行的操作，请求URL
描述了要对哪个资源执行这个方法。请求行中还包含HTTP的版本，用来告知服务
器，客户端使用的是哪种HTTP。
所有这些字段都由空格符分隔。在图 3-5a 中，请求方法为 GET，请求 URL 为
50 ｜ 第3章
/test/hi-there.txt，版本为 HTTP/1.1。在 HTTP/1.0 之前，并不要求请求行中包含
HTTP版本号。
2. 响应行
响应报文承载了状态信息和操作产生的所有结果数据，将其返回给客户端。响应报
文的起始行，或称为响应行，包含了响应报文使用的HTTP版本、数字状态码，以
及描述操作状态的文本形式的原因短语。
所有这些字段都由空格符进行分隔。在图3-5b中，HTTP版本为HTTP/1.0，状态
码为200（表示成功），原因短语为OK，表示文档已经被成功返回了。在HTTP/1.0
之前，并不要求在响应中包含响应行。
3. 方法
请求的起始行以方法作为开始，方法用来告知服务器要做些什么。比如，在行