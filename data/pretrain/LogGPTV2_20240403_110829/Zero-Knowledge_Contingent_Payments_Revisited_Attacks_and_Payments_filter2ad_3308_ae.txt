which outputs a string ˆs such that f (ˆs) = 1;
Zero-Knowledge For any possibly malicious efficient ˆB, there
exists an efficient simulator Sim ˆB
which on input f outputs
a distribution which is computationally indistinguishable
from V iew ˆB (s, f );
4.2 A ZKCSP Protocol
Given that s is basically the witness of an NP statement, it is possible
to construct NIZK proofs of knowledge for it ([41] and the more
recent literature on SNARKs [11, 29, 40]). If V is the program that
verifies this NIZK proof (using a trusted CRS) then it is easy to
implement a ZKCSP over any blockchain with sufficiently rich
scripting languages such as Ethereum. The client B will post the
transaction
Transfer m of my coins to a party who publishes a
proof π such that V (π ) = 1
Once A publishes π she will get paid and B has confidence that
A really knows s (with the simulation and extraction procedures
being guaranteed by the simulation and extraction procedure of the
NIZK used in the protocol). The question then is how to implement
this over more limited scripting languages, including Bitcoin. What
follows is a protocol where the program P associated with “payment
transactions” can only be of the form “find a SHA256 preimage of a
specified value”, i.e. hash-locked transactions.
Let H be a function H{0, 1}∗ → {0, 1}256 (i.e. like SHA256). Con-
sider the following function
defined as follows
Ff ,H(s, r ) =
Ff ,H : {0, 1}∗ × {0, 1}∗ → {0, 1}256
SHA256(r ) if f (s) = 1
H(r ) otherwise.
(1)
We are going to use F to design our new ZKCSP protocol as
follows. Informally, the server/seller will choose a random r and
send to the client/buyer the value y = Ff ,H (s, r ) and proves using
a WI protocol that he knows inputs (s, r ) such that y = Ff ,H(s, r ).
Note that if f (s) = 1 then y = SHA256(r ), otherwise y = H(r ).
Moreover, if the output of H “looks like” the output of SHA256, the
client/buyer cannot tell at this point if the server actually knows
a “good” s (i.e. f (s) = 1) or not. To detect if this is the case or not
should be contingent to a payment by the buyer who therefore
publishes the following transaction:
Transfer m Bitcoins to the party who presents a SHA256
preimage of y
If f (s) = 1 then the server/seller knows such a preimage (which
is r), and can publish it to redeem the payment. Moreover, if we
assume that finding a SHA256 preimage of H(r ) is hard, then the
seller cannot redeem payment when f (s) (cid:44) 1.
More formally, let A denote the seller, B denote the buyer and T
denote the blockchain:
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA238Protocol 1
(1) A on input s, chooses r at random in {0, 1}256 and com-
putes y = Ff ,H (s, r )
(2) A sends y to B and the two parties engage in a WI proof
that the seller knows r , s such that y = Ff ,H (s, r ). If the
proof fails, the buyer rejects and stops.
(3) B posts a transaction to the Bitcoin blockchain to
pay m Bitcoins to the party who presents x such that
SHA256(x ) = y
(4) A presents z to T . If SHA256(z) = y then T posts it and
the seller redeems the Bitcoins, otherwise the Bitcoins
are returned to the buyer.
We can prove the following6:
Theorem 4.1. Assume that
• SHA256 and H are a claw-free pair
• the distributions SHA256(r ) and H(r ) for r chosen at random
in {0, 1}256 are computationally indistinguishable
then Protocol 1 is a secure ZKCSP protocol.
Proof. (Sketch).
Extraction: Let ˆA be an efficient, possibly malicious seller. In
step 2, ˆA runs a ZK proof of knowledge of the values s, r which can
therefore be extracted if the proof is successful. Assume for sake
of contradiction that f (s) (cid:44) 1 and ˆA gets paid. By the correctness
of the NIZK we know that since f (s) (cid:44) 1, then y = H(r ). In Step
4 ˆA gets paid only if she produces z such that y = SHA256(z).
Therefore we have found a claw (r , z) for SHA256 and H, since
SHA256(z) = H(r ) = y.
Zero-Knowledge is a consequence of the witness indistinguisha-
bility of the proof in step 2, and the computational indistinguisha-
bility of the output distributions of SHA256 and H. A bit more for-
mally, For step 1, Sim ˆB
will choose r , s at random and compute
y = Ff ,H (s, r ). Note that the message in step 1 is computationally
indistinguishable from the message sent by the real A due to the
computational indistinguishability of the output distributions of
SHA256 and H. For step 2, Sim ˆB
will just run a "real" proof that
y = Ff ,H (s, r ): note that due to witness indistinguishability, this
proof is indistinguishable from a proof of a "correct" proof when
the witness is such that f (s) = 1.
□
Letting B choose the CRS. Note that we only require the proof
to be WI. If we were to use a QSP-based SNARK, such as Libsnark,
then (as already pointed out in [29]) the verifier B can be allowed
to select the CRS, provided the prover A performs some minimal
correctness checks (described in detail in Section 3.3).
4.3 An alternative ZKCP construction
The idea behind our ZKCSP can be used to build an alternative
ZKCP protocol. Recall (using the notation in Section 2.5) that in
6 The assumptions underlying Theorem 4.1 are expressed in asymptotic terms but
for sake of simplicity we are using concrete security parameters and functions used
by Bitcoin (e.g. SHA256, with 256 bits output etc). It is easy to reframe the protocol
description and the theorem using a security parameter
this case, Alice (the seller) wants to sell to Bob (the buyer) a string
fA that satisfies some verification procedure VB.
The basic idea remains the same: Alice encrypts the string fA
with a key k (using any symmetric encryption scheme E, i.e. AES)
and publishes ˆf = Ek ( fA) and y = SHA256(k ). She then proves
(using a WI proof) that
SHA256(k ) if VB (Dk ( ˆf )) = 1
H(k ) otherwise.
(2)
y = GVB, ˆf ,H (k ) =
Note that in this case WI is sufficient since at the end of the
protocol, Bob does not know if Alice encrypted a valid string or
garbage, and this guarantees that he learns no information about fA.
At the same time, he is guaranteed that if Alice presents a SHA256
preimage of y, then the encrypted string must be valid and he will
be able to recover it. Again relying simply on WI, removes the need
for a trusted party to generate the CRS, since Bob can be allowed
to generate it, provided that Alice performs the minimal checks
to guarantee WI (described in Section 3.3) and without having to
resort to the heavy tests required by subversion-ZK.
4.4 A Protocol with private verification
In the protocol above we assumed a scenario in which anybody
can verify that s is “correct” (i.e. f (s) = 1). There are however
situations in which the buyer is the only one who can verify the
correctness of s. In other words the buyer is only interested in s
such that f (k, s) = 1 where k is a secret “key” held by the buyer. In
this case we modify the protocol to have the parties jointly compute
the following function
SHA256(r ) if f (k, s) = 1
H(r ) otherwise.
F ′
f ,H(k, s, r ) =
Because both buyer and seller want to keep k and s secret respec-
tively, they will have to use a secure two-party computation proto-
col, such as Yao’s garbled circuit [51] to compute F ′. It is important
to use a two-party computation protocol which is secure against
malicious players. The protocol is described below
(3)
Protocol 2
(1) A on input s, chooses r at random in {0, 1}256
(2) Using a 2-party computation protocol, secure against
malicious players, A and B jointly compute y =
F ′
f ,H(k, s, r ) where k is B’s private input.
(3) B posts a transaction to the Bitcoin blockchain to
pay m Bitcoins to the party who presents x such that
SHA256(x ) = y
(4) A presents z to T . If SHA256(z) = y then T posts it and
the seller redeems the Bitcoins, otherwise the Bitcoins
are returned to the buyer.
Theorem 4.2. Assume that
• SHA256 and H are a claw-free pair
• the distributions SHA256(r ) and H(r ) for r chosen at random
in {0, 1}256 are computationally indistinguishable
then Protocol 2 is a secure ZKCSP protocol.
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA239Proof. (Sketch).
Extraction: Let ˆA be an efficient, possibly malicious seller. In
step 2, ˆA runs two-party computation protocol which is secure
against a malicious adversary. Such protocols require the ability to
extract the input during the simulation [36], so we use the simulator
of the two-party protocol to extract r , s. Now the proof continues
as in the proof of Theorem 4.1. Assume for sake of contradiction
tha f (k, s) (cid:44) 1 and ˆA gets paid. By the correctness of the two-
party computation protocol we know that since f (k, s) (cid:44) 1, then
y = H(r ). In Step 4 ˆA gets paid only if she produces z such that
y = SHA256(z). Therefore we have found a claw (r , z) for SHA256
and H, since SHA256(z) = H(r ) = y.
Zero-Knowledge is a consequence of the simulatability of the
two-party protocol in step 2, and the computational indistinguisha-
bility of the output distributions of SHA256 and H. A bit more for-
mally, For steps 1 and 2, Sim ˆB
will choose r at random and compute
y = SHA256(r ) and simulate the two-party computation with y as
output. Now if A has a correct s then step 4 will be executed and the
simulator will simulate it perfectly by releasing a SHA256 preimage
of y. If A did not have a correct s, then step 4 is a message between
A and T but is not posted to the blockchain and therefore does not
belong to the view of ˆB and the simulator does not have to simulate
it.
□
5 IMPLEMENTATION
In this section we discuss our implementation work on: the attack
against Maxwell’s ZKCP; a proof of concept of our protocol for
ZKCP for Services; a more efficient SHA256 circuit implementation
(used in Protocol 2). The code is available at [21, 22]. All bench-
marks in this section were evaluated on a Debian 3.16.39-1 x86_64
GNU/Linux Virtual Machine (virtual CPU and RAM respectively
2.4 GhZ and 3.5 GB).
5.1 Pay-to-Sudoku
Attack. We modified the Pay-to-Sudoku’s code [18] in a way
that allows a malicious buyer to learn information about the value
of a cell of the Sudoku solution without paying for it. To do that
we created a modified version of libsnark that implements the
attack described in Section 3 (under “Setting all the pk equal to the
identity except for one wire”). The malicious buyer can generate a
CRS running this code and find out the exact value of a cell with
probability at least 1/9 from the proof received by the seller. Note
that the seller in [18] does not find out the CRS was generated
maliciously and that we did not modify any code involving the
Sudoku solution seller or the prover in libsnark.
Alternative Pay-to-Sudoku. We also implemented our alterna-
tive ZKCP protocol using only WI proofs (described in Section 4.3)
for the case of Pay-to-Sudoku. In our protocol the prover runs a
bit slower than the insecure original protocol due to the fact that
the proof is run over a larger circuit (verification time is basically
unchanged as to be expected in the case of QSP-based protocols).
On the other hand, the cost of the expensive subversion-ZK CRS
checks to the original Pay-to-Sudoku protocol dominates the over-
head of the larger circuit in our protocol (which does not require
such expensive checks). In particular, our results suggest that
ZKCSP for Su-
doku with WI
checks
Key Generation 54 s
Proof
10900 ms
Pay-to-
Sudoku with
Subversion-
ZK
22s
> 1 hour (5500
ms
without
checks)
24 ms
Verification
25 ms
Table 1: Estimated Running Time for Contingent Payment
for Sudoku with checked CRS
the proving process would require more than an hour in to-
tal (instead of a few seconds without the ZK-subversion checks).
This time has been obtained by computing tP · nP , where tP is the
experimental estimate for the the average time per pairing check
(i.e. 4.50 ms) and nP is the number of pairing checks for subversion-
ZK in [28]. A lower bound on nP is 7m where m is the number
of constraints. The quantity m is sligthly greater than 115K for
Pay-to-Sudoku. In these benchmarks we used curve ALT_BN128,
the same originally used in Pay-to-Sudoku. Table 1 summarizes the
performance comparison.
5.2 Proofs of Retrievability (PoR) over Bitcoin
As a proof of concept, we provide an implementation for a ZKCSP
for Auditing of Proofs of Retrievability (PoR). Our implementation
is based on the PoR scheme in [44] (See Appendix for details of the
the scheme). In the context of PoR, a party delegates storage of her
data to a server. A PoR scheme consists of an (efficient) protocol by
which the delegator can verify at any time whether the server is
still keeping her data intact. Our protocol allows the client to pay
the server if such verification procedure succeeds. The PoR scheme
in [44] can be instantiated both as privately and publicly verifiable
(see appendix for details). For this application, the curve we used
in libsnark was MNT6. Although less efficient than BN128 or
ALT_BN128, this curve was one of the few ones which offered
verification gadgets for pairings.
Private Verification. In this case the PoR scheme in [44] reduces
to the verification of a (linearly homomorphic) MAC jointly by the
server and the client. Here the PoR is successful if the server proves
to the client that it knows s = (m, t ) such that t = MACk (m) where
k is the secret authentication key of the client.
We used Protocol 2 described in Section 4.4 where f (k, s) = 1
if and only if s = (m, t ) and t = MACk (m). We implemented a
two-party protocol for the computation of the associated function
F ′ using the SCAPI library [26] following [48]. We used λ = 128
bits of computational security and ρ = 80 bits of statistical security.
We chose a Carter-Wegman [49] style MAC, specifically the one in
[34]. The circuit has 150441 gates and 151017 wires. The number of
input wires for the two parties, seller and buyer, are respectively
416 and 160. The output of the circuit is 256 bits. See Table 2 for
evaluation of running time and bandwidth.
Public Verification. In this case the PoR scheme in [44] reduces
to the verification of a (linearly homomorphic) signature scheme,
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA240Garbler
Evaluator
Bandwidth (KB) Time (ms)
38879
51
155
159
Table 2: Stats for Fair Auditing of Privately Verifiable PoR
with Secure Two Party Computation.
Total gates
AND gates
XOR gates