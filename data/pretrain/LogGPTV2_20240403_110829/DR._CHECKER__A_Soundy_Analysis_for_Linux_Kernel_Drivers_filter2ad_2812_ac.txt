### 优化后的文本

#### 指令和操作
1. **Store 指令**：将值 `v` 存储到由 `op` 表示的地址中（例如，`store i8 %frombool1, %y.addr`）。
2. **GetElementPtr (GEP) 指令**：用于表示结构体和数组访问，具有复杂的语义 [53]。简化表示为 `v = getelementptr typename ob, off`，它将获取类型为 `typename` 的对象 `ob` 中索引为 `off` 的字段的地址，并将引用值存储在 `v` 中（例如，`%val = getelementptr %struct.point %my_point, 0`）。

我们的指针分析和污点分析基于这五条指令实现了转移函数。

---

### 算法 2：指针分析转移函数
```plaintext
function updatePtoAlloca (φc, τc, δ, I, v, locx)
    mappt ← φc(δ)
    locx ← (x, ∅, ∅)
    mappt(v) ← (0, locx)

function updatePtoBinOp (φc, τc, δ, I, v, op1, op2)
    mappt ← φc(δ)
    pto1 ← mappt(op1)
    pto2 ← mappt(op2)
    set1 ← {(0, ob) | ∀(n, ob) ∈ pto1}
    set2 ← {(0, ob) | ∀(n, ob) ∈ pto2}
    mappt(v) ← mappt(v) ∪ set1 ∪ set2

function updatePtoLoad (φc, τc, δ, I, v, op)
    mappt ← φc(δ)
    ptoop ← mappt(op)
    set1 ← {ob(n) | ∀(n, ob) ∈ ptoop}
    set2 ← {(0, ob) | ∀ob ∈ set1}
    mappt(v) ← mappt(v) ∪ set2

function updatePtoStore (φc, τc, δ, I, v, op)
    mappt ← φc(δ)
    ptoop ← mappt(op)
    ptov ← mappt(v)
    setv ← {ob | ∀(n, ob) ∈ ptov}
    ∀(n, ob) ∈ ptoop do ob(n) ← ob(n) ∪ setv

function updatePtoGEP (φc, τc, δ, I, v, op, off)
    mappt ← φc(δ)
    ptoop ← mappt(op)
    setop ← {ob(n) | ∀(n, ob) ∈ ptoop}
    setv ← {(off, ob) | ∀ob ∈ setop}
    mappt(v) ← mappt(v) ∪ setv
```

#### 3.3 指针分析
我们的指针分析结果是一组值及其可能指向的所有对象和偏移量。通过构建别名位置对象和转移函数，我们确保了指针分析结果对字段敏感。也就是说，我们可以区分同一个对象的不同字段所指向的对象（例如，结构体中的不同元素）。因此，在 SDT 中实现时，我们能够获得流、上下文和字段敏感的指针分析结果。

**动态分配**：为了处理动态分配，我们在指针分析中维护了一个内核函数列表，这些函数用于在堆上分配内存（例如，`kmalloc`, `kmem_cache_alloc`, `get_free_page`）。对于每个调用点，我们创建一个唯一的别名对象。因此，对于给定的函数上下文，每个分配指令只有一个别名位置，无论它被访问多少次。例如，如果在一个循环的基本块中有一个对 `kmalloc` 的调用，我们只会为它创建一个别名位置。

---

### 算法 3：污点分析转移函数
```plaintext
function updateTaintAlloca (φc, τc, δ, I, v, locx)
    Nothing to do

function updateTaintBinOp (φc, τc, δ, I, v, op1, op2)
    mapt ← τc(δ)
    setv ← mapt(op1) ∪ mapt(op2)
    mapt(v) ← setv || I

function updateTaintLoad (φc, τc, δ, I, v, op)
    mappt ← φc(δ)
    ptoop ← mappt(op)
    setop ← {obt(n) || I | ∀(n, ob) ∈ ptoop}
    mapt ← τc(δ)
    mapt(v) ← mapt(v) ∪ setop

function updateTaintStore (φc, τc, δ, I, v, op)
    mappt ← φc(δ)
    ptoop ← mappt(op)
    mapt ← τc(δ)
    trv ← mapt(v)
    ∀(n, ob) ∈ ptoop do obt(n) ← obt(n) ∪ (trv || I)

function updateTaintGEP (φc, τc, δ, I, v, op, off)
    UPDATETAINTBINOP(φc, τc, δ, I, v, op, off)
```

**内部内核函数**：除了少数可以轻松处理的内核 API 函数（例如，`memcpy`, `strcpy`, `memset`），我们忽略所有其他内核 API 和核心内核函数。例如，如果调用指令的目标是核心内核的一部分 `i2c_master_send` 函数，我们不会跟踪该调用。与检查内核 API 函数有效使用情况的其他工作不同 [12,64]，我们假设所有这些函数的使用都是有效的，因为我们只关注分析更容易出错的驱动代码。因此，我们不跟踪任何进入核心内核代码的函数调用。虽然这可能会导致丢失一些指针信息，但这种假设使我们能够在驱动程序中更加精确地进行分析并扩展我们的分析规模。

---

### 3.4 污点分析
污点分析是我们系统的关键组成部分，几乎所有漏洞检测器都使用其结果。类似于我们的指针分析，污点分析的结果也是流、上下文和字段敏感的。

**污点源**：在我们的分析中，污点源是入口函数的参数。第 5.3 节解释了不同类型的入口函数及其相应的受污染参数。我们还将从用户空间复制数据的特殊内核函数（例如，`copy_from_user`, `simple_write_to_buffer`）视为污点源，并污染指针映射中别名位置的所有字段。

---

### 4 漏洞检测器
本节描述了我们在分析中使用的各种漏洞检测器。这些检测器高度可配置，能够根据我们的指针和污点分析结果进行操作。它们作为插件运行，在代码分析过程中持续运行，并对我们的分析客户端（即污点和指针分析）的结果进行操作。我们的架构使我们能够非常快速地实现新的分析以探索新的漏洞类别。实际上，在为本文分析结果的过程中，我们能够在不到 30 分钟的时间内创建并部署全局变量竞争检测器（GVRD）。

几乎所有的检测器都使用污点分析结果来验证易受攻击的条件，并在其发出的警告中生成污点跟踪。警告还提供了与跟踪相关的行号，以便于分类。DR. CHECKER 在我们的分析中使用的各种 bug 检测器如下：

- **Improper Tainted-Data Use Detector (ITDUD)**：检查在风险函数（例如，`strc*`, `strt*`, `sscanf`, `kstrto`, `simple_strto`）中使用的受污染数据。

---

### 示例代码

#### 列表 2：在 Mediatek 的 Accdet 驱动程序中发现的缓冲区溢出错误
```c
static accdet_store_call_state(struct device_driver *ddr,
                               const char *buf,
                               tainted_data **status,
                               ssize_t count)
{
    int ret = sscanf(buf, "%s", &call_status);
    
    if (ret != 1) {
        ACCDET_DEBUG("accdet: Invalid values\n");
        return -EINVAL;
    }

    switch (call_status) {
        case CALL_IDLE:
            // ...
    }
}
```
注释：
- `buf` 假设是一个单字符，但使用 `"%s"` 将继续读取缓冲区直到找到空字节。

#### 列表 3：在 Mediatek 的 mlog 驱动程序中发现的零日漏洞
```c
static int mlog_func(const char *buf, size_t len)
{
    unsigned i;
    int error = -EINVAL;
    char mlog_str[MLOG_STR_LEN];
    // ...

    if (!buf || len < 0 || !access_ok(VERIFY_WRITE, buf, len)) {
        error = -EFAULT;
        goto out;
    }

    error = 0;

    if (!len) {
        goto out;
    }

    i = 0;
    while (!error && (mlog_start && i < len - MLOG_STR_LEN)) {
        size_t size = snprintf(mlog_str, MLOG_STR_LEN, strfmt_list[strfmt_idx++], v);
        // ...
    }
}
```
注释：
- TAD 首先识别整数溢出错误 (`len - MLOG_STR_LEN`)。
- TLBD 然后识别这个受污染的长度被用作 while 循环的数据复制边界条件。