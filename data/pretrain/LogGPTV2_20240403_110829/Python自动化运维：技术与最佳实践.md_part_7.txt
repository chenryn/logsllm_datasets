try:
=[]6su
msg['From']=FROM
msg['Subject']
msg.attach(addimg("img/bytes_io.png","io"))
msg.attach (msgtext)
msgtext=MIMEText（"""
msg=MIMEMultipart('related')
def addimg(src,imgid):
FROM="PI:EMAIL"
TO
SUBJECT=u”业务性能数据报表”
from
from
from email.mime.multipart import MIMEMultipart
#coding:utf-8
【/home/test/smtplib/simple3.py】
""","html","utf-8")
return msgImage
msgImage.add_header('Content-ID', imgid)
fp.close()
msgImage=MIMEImage（fp.read())
fp =open(src,
email.mime.image import MIMEImage
email.mime.text import MIMEText
*官网性能数据
Linux公社 www.linuxidc.com
#邮件收件人，邮件头部可见
=SUBJECT
#关闭文件
#邮件发件人，邮件头部可见
(.q
#MIMEMultipart 对象附加 MIMEText 的内容
#返回msgImage对象
#创建一个MIMEText对象，HTML元素包括表格及图片
#添加图片函数，参数1：图片路径，参数2：图片id
#定义邮件收件
#定义smtp主机
#邮件主题
#打开文件
#定义邮件发件人
#定义邮件主题
#的邮件体
#创建MIMEMultipart对象，采用related定义内嵌资源
#标签的src属性是通过Content-ID来引用的
 更多 >>
"swap"))
人
#创建MIMEImage 对象，读取图片内容并作为参数
#导入MIMEText类
#导入MIMEImage类
#的内容
#使用MIMEMultipart 对象附加MIMEImage
#标签src用到
#指定图片文件的 Content-ID,
#导入MIMEMultipart类
第2章
业务服务监控详解
---
## Page 56
的特性来定制周报邮件，如业务服务质量周报。实现代码如下：
MIMEText类再定义Content-Disposition属性来实现带附件的邮件。我们可以利用这些丰富
理员了解业务的服务情况。
32第一部分基础篇
【/home/test/smtplib/simple4.py 】
本示例通过MIMEText与MIMEImage类的组合，实现图文邮件格式。另通过
示例3：实现带附件格式的业务服务质量周报邮件。
代码运行结果如图2-7所示，
from email.mime.image import MIMEImage
from email.mime.text import MIMEText
fromemail.mime.multipart importMIMEMultipart
#coding:utf-8
except Exception, e:
importsmtplib
print“失败："+str(e)
print"邮件发送成功！
server.quit()
server.sendmail（FRoM,TO,msg.as_string())
server.login("PI:EMAIL","mypassword")
server.starttls()
server.connect(HosT,"25")
server=Smtplib.SMTP()
“官网性能数重务
业务性能数据报表☆
Linux公社 www.linuxidc.com
mega
8:00
Lt24r:Nov9,550-Nov0,0550
Latest 24 hours:
Nov 9.05:50-Nov10.0550
10:00
#断开smtp连接
20:00
#启动安全传输模式
，我们将业务服务器性能数据定期推送给管理员，以方便管
#定义smtp主机
图2-7示例2运行结果
#创建一个SMTP（）对象
#通过connect 方法连接 smtp 主机
#导入MIMEText类
#导入MIMEImage类
Le24ouov905:50Nov10,05:50
Laest24our:Nov9.05:50Nov10,05:50
2.00
#导入 MIMEMultipart 类
#邮件发送
#邮箱账号登录校验
---
## Page 57
代码运行结果如图2-8所示，
except Exception, e:
try:
msg['To']=TO
msg.attach(attach)
attach["Content-Disposition"]="attachment；filename=\"业务服务质量周报（12周）.xlsx\""
#由于qgmai1使用gb18030页面编码，为保证中文文件名不出现乱码，对文件名进行编码转换
#ilename指定
#指定Content-Disposition值为attachment则出现下载保存对话框，保存的默认文件名使用
attach["Content-Type"]="application/octet-stream"
attach=MIMEText(open("doc/week_report.xlsx",
#创建一个MIMEText对象，附加week_report.xlsx文档
msg.attach(addimg("img/weekly.png","weekly"))
msg.attach(msgtext)
border=\"1\">详细内容见附件。"，"htm1","utf-8")
#创建一个MIMEText对象，HTML元素包括文字与图片
msg = MIMEMultipart('related')
def addimg(src,imgid):
TO="PI:EMAIL"
SUBJECT=u”官网业务服务质量周报"
print"失败："+str(e)
server.quit()
server.sendmail（FROM,To,msg.as_string())
server.login("PI:EMAIL","mypassword")
server.starttls()
server.connect（HosT,"25")
server
return msgImage
msgImage.add_header('Content-ID',imgid)
fp.close()
msgImage=MIMEImage(fp.read())
fp=open(src，'rb')
Linux公社
=Smtplib.SMTP()
=SUBJECT
#邮件收件人，邮件头部可见
#关闭文件
#邮件发件人
#断开smtp连接
#MIMEMultipart对象附加MIMEText附件内容
#MIMEMultipart 对象附加MIMEText的内容
#返回msgImage对象
，实现了发送业务服务质量周报的邮件功能。
#启动安全传输模式
#添加图片函数，参数1：图片路径，参数2：图片id
#定义邮件接收人
#邮件主题
#打开文件
www.linuxidc.com
#定义邮件发件人
#创建一个SMTP（）对象
，邮件头部可见
#通过connect方法连接smtp主机
#创建MIMEMultipart对象，采用related定义内嵌资源
#
定义邮件主题
件体
#创建MIMEImage 对象，读取图片内容作为参数
"rb").read(),
#
#指定图片文件的Content-ID，
#邮件发送
标签src用到
第2章
#邮箱账号登录校验
：>>importpycurl
校验安装结果如下：
Curl对象。
cd pycur1-7.19.3.1
make && make install
要求curl-config 包支持，需要源码方式重新安装curl
源码安装方法
长整型、文件对象、列表或函数等。下面列举常用的常量列表：
过 libcurl的常量来指定的，参数value的值会依赖option，可以是一个字符串、整型
setopt(option,value)方法，对应 libcurl包中的curl_easy_setopt方法，参数option是通
请求的提交。
模块常用方法说明
no-check-certificate
export LD_LIBRARY_PATH=/usr/local/lib
cd cur1-7.36.0
wget http://curl.haxx.se/download/curl-7.36.0.tar.gz
/configure
Linux公社 www.linuxidc.com
#创建一个curl对象
5）
#请求超时时间
#指定HTTP重定向的最大数
#是否屏蔽下载进度条，非0则屏蔽
#强制获取新的连接，
#连接的等待时间，设置为0则不等待
#将返回的HTTPHEADER定向到回调函数getheader
#设置保存DNS信息的时间，默认为120秒
#指定请求的URL
#配置请求HTTP头的User-Agent
第2章
MSIE 6.0;Windows NT 5.1;
即替代缓存中
业务服务监控详解
不重用
中的连接
5
---
## Page 60
的HTTP响应头部及页面内容。实现源码如下：
R等常量来实现。另外通过pycurl.WRITEHEADER、pycurl.WRITEDATA常量得到目标URL
NAMELOOKUP_TIME、pycurl.CONNECT_TIME、pycurl.PRETRANSFER_TIME、pycurl.
HTTP_CODE 常量得到，以及从 HTTP请求到完成下载期间各环节的响应时间，通过pycurl.
现HTTP服务质量的探测，
下载时间都控制在毫秒级，动态CGI为秒级。本示例使用pycurl 的setopt与 getinfo方法实
运营服务水平，最常用的有两个标准，一为服务的可用性，比如是否处于正常提供服务状
2.4.2实践：实现探测Web服务质量
态，而不是出现404页面未找到或500页面错误等；二为服务的响应速度，比如静态类文件
36第一部分基础篇
【/home/test/pycurl/simple1.py 】
HTTP服务是最流行的互联网应用之一，服务质量的好坏关系到用户体验以及网站的
c=pycurl.Curl()
URL="http://www.google.com.hk"
我们利用libcurl包提供的这些常量值来达到探测Web服务质量的目的。
c.getinfo(pycurl.HEADER_SIZE)
C.getinfo(pycurl.SPEED_UPLOAD)
c.getinfo(pycurl.SPEED_DOWNLOAD)
c.getinfo(pycurl.SIZE_UPLOAD)
C.getinfo(pycurl.REDIRECT_TIME)
c.getinfo(pycurl.
c.getinfo(pycurl.
C.getinfo(pycurl.CONNECT_TIME)
c.getinfo(pycurl.NAMELOOKUP_TIME)
C.getinfo(pycurl.TOTAL_TIME)
c.getinfo(pycurl.HTTP_CODE)
C=pycurl.Curl()
getinfo(option)方法，对应 libcurl包中的 curl_easy_getinfo方法，参数 option是通过
import pycurl
importtime
import os,sys
c.getinfo(pycurl.SIZE_DOWNLOAD)
C.setopt(pycurl.WRITEDATA,fileobj)
C.setopt(pycurl.WRITEHEADER,fileobj)
c.setopt(pycurl.WRITEFUNCTION,getbody)
import
libcurl 的常量来指定的。下面列举常用的常量列表：
coding:utf-8-*-
sys
Linux公社 www.linuxidc.com
.STARTTRANSFER_TIME)
PRETRANSFER_TIME)
，获取监控URL 返回的 HTTP 状态码，HTTP 状态码采用pycurl.
#创建一个Curl对象
#创建一个curl对象
#返回的HTTP状态码
#传输结束所消耗的总时间
#探测的目标URL
#HTTP头部大小
#上传数据包大小
#平均上传速度
#建立连接所消耗的时间
#下载数据包大小
#重定向所消耗的时间
#平均下载速度
#从建立连接到准备传输所消耗的时间
#DNS解析所消耗的时间
#将返回的HTML 内容定向到fileobj文件对象
#将返回的HTTPHEADER定向到fileobj文件对象
#将返回的内容定向到回调函数getbody
---
## Page 61
"wb")
代码的执行结果如图 2-9 所示。
c.close()
#关闭文件及Curl对象
print“平均下载速度：%dbytes/s”（SPEED_DOWNLOAD)
print
SPEED_DOWNLOAD=C.getinfo(c.SPEED_DOWNLOAD)
HEADER_SIZE
SIZE_DOWNLOAD =
TOTAL_TIME =C.getinfo(c.TOTAL_TIME)
STARTTRANSFER_TIME = C.getinfo(c.STARTTRANSFER_TIME)
PRETRANSFER_TIME=
CONNECT_TIME =
except Exception,e:
C.setopt (pycurl.WRITEDATA, indexfile)
C.setopt (pycurl.WRITEHEADER,
indexfile.close()
print
print
print
print
print
print
#打印输出相关数据
HTTP_CODE=
NAMELOOKUP_TIME=
try:
#创建一个文件对象，以”
C.setopt(pycurl.DNS_CACHE_TIMEoUT,30)
C.setopt(pycurl.MAxREDIRS,1)
C.setopt(pycurl,FORBID_REUSE,1)