product_type regist_date sum_price
-------------- ------------ ----------
商品种类 合计 登记日期 合计 16780
厨房用具 登记日期 合计 11180
厨房用具 2008-04-28 880
厨房用具 2009-01-15 6800
厨房用具 2009-09-20 3500
办公用品 登记日期 合计 600
办公用品 2009-09-11 500
办公用品 2009-11-11 100
将超级分组记录中的NULL
衣服 登记日期 合计 5000 ←
替换为“登记日期 合计”
衣服 2009-09-20 1000
原始数据中的NULL保持
衣服 4000 ←
不变
在实际业务中需要获取包含合计或者小计的汇总结果（这种情况是最
多的）时，就可以使用ROLLUP和GROUPING函数来实现了。
CAST(regist_date AS VARCHAR(16))
那为什么还要将SELECT子句中的regist_date列转换为CAST
（regist_date AS VARCHAR（16））形式的字符串呢？这是为了满足
CASE表达式所有分支的返回值必须一致的条件。如果不这样的话，那么各
个分支会分别返回日期类型和字符串类型的值，执行时就会发生语法错误。
法则8-8
使用GROUPING函数能够简单地分辨出原始数据中的NULL和超级分组记录中的NULL。
8-2 GROUPING运算符 279 ●
——用数据来搭积木
CUBE
KEYWORD ROLLUP之后我们来介绍另一个常用的GROUPING运算符——
●CUBE运算符
CUBE。CUBE是“立方体”的意思，这个名字和ROLLUP一样，都能形
象地说明函数的动作。那么究竟是什么样的动作呢？还是让我们通过一个
列子来看一看吧。
CUBE的语法和ROLLUP相同，只需要将ROLLUP替换为CUBE就
可以了。下面我们就把代码清单8-16中的SELECT语句替换为CUBE试
试看吧（代码清单8-17）。
代码清单8-17 使用CUBE取得全部组合的结果
Oracle SQL Server DB2 PostgreSQL
SELECT CASE WHEN GROUPING(product_type) = 1
THEN '商品种类 合计'
ELSE product_type END AS product_type,
CASE WHEN GROUPING(regist_date) = 1
THEN '登记日期 合计'
ELSE CAST(regist_date AS VARCHAR(16)) END AS regist_date,
SUM(sale_price) AS sum_price
FROM Product
GROUP BY CUBE(product_type, regist_date);
执行结果（在DB2中执行）
product_type regist_date sum_price
-------------- ------------ ----------
商品种类 合计 登记日期 合计 16780
商品种类 合计 2008-04-28 880 ←追加
商品种类 合计 2009-01-15 6800 ←追加
商品种类 合计 2009-09-11 500 ←追加
商品种类 合计 2009-09-20 4500 ←追加
商品种类 合计 2009-11-11 100 ←追加
商品种类 合计 4000 ←追加
厨房用具 登记日期 合计 11180
厨房用具 2008-04-28 880
厨房用具 2009-01-15 6800
厨房用具 2009-09-20 3500
办公用品 登记日期 合计 600
办公用品 2009-09-11 500
办公用品 2009-11-11 100
衣服 登记日期 合计 5000
衣服 2009-09-20 1000
衣服 4000
与ROLLUP的结果相比，CUBE的结果中多出了几行记录。大家看
一下应该就明白了，多出来的记录就是只把regist_date作为聚合键
● 280 第8章 SQL高级处理
所得到的汇总结果。
① GROUP BY ()
② GROUP BY (product_type)
③ GROUP BY (regist_date) ←添加的组合
④ GROUP BY (product_type, regist_date)
所谓CUBE，就是将GROUP BY子句中聚合键的“所有可能的组合”
的汇总结果集中到一个结果中。因此，组合的个数就是2n（n是聚合键的
个数）。本例中聚合键有2个，所以22 = 4。如果再添加1个变为3个聚合
注A 键的话，就是23 = 8A。
使用ROLLUP时组合的个数是 读到这里，可能很多读者都会觉得奇怪，究竟CUBE运算符和立方
n + 1。随着组合个数的增加，结
果的行数也会增加，因此如果使 体有什么关系呢？
用CUBE时不加以注意的话，往
往会得到意想不到的巨大结果。 众所周知，立方体由长、宽、高3个轴构成。对于CUBE来说，一个
顺带说一下，ROLLUP的结果一
定包含在CUBE的结果之中。 聚合键就相当于其中的一个轴，而结果就是将数据像积木那样堆积起来
（图8-6）。
图8-6 CUBE的执行图示
08-04-28 880
09-01-15 6800
登记日期 09-09-11 500
09-09-20 3500 1000
09-11-11 100
厨房用具 办公用品 衣服
商品种类
由于本例中只有商品种类（product_type）和登记日期（regist_
date）2个轴，所以我们看到的其实是一个正方形，请大家把它看作缺
了1个轴的立方体。通过CUBE当然也可以指定4个以上的轴，但那已经
属于4维空间的范畴了，是无法用图形来表示的。
8-2 GROUPING运算符 281 ●
法则8-9
可以把CUBE理解为将使用聚合键进行切割的模块堆积成一个立方体。
——取得期望的积木
GROUPING SETS
KEYWORD 最后要介绍给大家的GROUPING运算符是GROUPING SETS。该
●GROUPING SETS运算符
运算符可以用于从ROLLUP或者CUBE的结果中取出部分记录。
例如，之前的CUBE的结果就是根据聚合键的所有可能的组合计算
而来的。如果希望从中选取出将“商品种类”和“登记日期”各自作为聚
合键的结果，或者不想得到“合计记录和使用2个聚合键的记录”时，可
以使用GROUPING SETS（代码清单8-18）。
代码清单8-18 使用GROUPING SETS取得部分组合的结果
Oracle SQL Server DB2 PostgreSQL
SELECT CASE WHEN GROUPING(product_type) = 1
THEN '商品种类 合计'
ELSE product_type END AS product_type,
CASE WHEN GROUPING(regist_date) = 1
THEN '登记日期 合计'
ELSE CAST(regist_date AS VARCHAR(16)) END AS regist_date,
SUM(sale_price) AS sum_price
FROM Product
GROUP BY GROUPING SETS (product_type, regist_date);
执行结果（在DB2中执行）
product_type regist_date sum_price
-------------- ------------ ----------
商品种类 合计 2008-04-28 880
商品种类 合计 2009-01-15 6800
商品种类 合计 2009-09-11 500
商品种类 合计 2009-09-20 4500
商品种类 合计 2009-11-11 100
商品种类 合计 4000
厨房用具 登记日期 合计 11180
办公用品 登记日期 合计 600
衣服 登记日期 合计 5000
上述结果中也没有全体的合计行（16780日元）。与ROLLUP或者
CUBE能够得到规定的结果相对，GROUPING SETS用于从中取出个别
条件对应的不固定的结果。然而，由于期望获得不固定结果的情况少之又
● 282 第8章 SQL高级处理
少，因此与ROLLUP或者CUBE比起来，使用GROUPING SETS的机
会也就很少了。
9
练习题
8.1 请说出针对本章中使用的Product（商品）表执行如下SELECT语句所
能得到的结果。
SELECT product_id, product_name, sale_price,
MAX (sale_price) OVER (ORDER BY product_id) AS
current_max_price
FROM Product;
表示下一行接续本行，只是由于版面所限而换行。
8.2 继续使用Product表，计算出按照登记日期（regist_date）升序进行排
列的各日期的销售单价（sale_price）的总额。排序是需要将登记日期为
NULL的“运动T恤”记录排在第1位（也就是将其看作比其他日期都早）。
第9章 通过应用程序连接数据库
数据库世界和应用程序世界的连接
9
Java的基础知识
通过Java连接PostgreSQL
本章重点
截止到第8章，关于使用SQL语句处理数据的基础知识的学习就告一段落了。
本章将会转换一下视角，带领大家了解如何通过应用程序执行SQL语句来处理
数据。
本章将使用Java语言来编写应用程序连接数据库。Java是现在非常流行的
应用程序开发语言。为了执行Java程序，大家需要在自己的电脑中安装Java开
发工具JDK（Java Development Kit）。JDK可以从Oracle公司的网站下载，下载
和安装步骤请参考“JDK下载安装手册”文件，该文件可以从以下网站下载。
http://www.ituring.com.cn/book/1880
此外，本章假定大家已经按照第0章的步骤完成了PostgreSQL的安装。没
有安装PostgreSQL的读者，请按照第0章的步骤提前安装好PostgreSQL。
9-1 数据库世界和应用程序世界的连接
■数据库和应用程序之间的关系
■驱动——两个世界之间的桥梁
■驱动的种类
9-2 Java基础知识
■第一个程序Hello，World
■编译和程序执行
■常见错误
9-2 通过Java连接PostgreSQL
■执行SQL语句的Java程序
■Java是如何从数据库中获取数据的呢
■执行连接数据库的程序
■选取表中的数据
■更新表中的数据
■小结
9-1 数据库世界和应用程序世界的连接 285 ●
第9章 通过应用程序连接数据库
9-1
数据库世界和应用程序世界的连接
● 在实际的系统中是通过应用程序向数据库发送SQL语句的。
学习重点
● 此时，需要通过“驱动”这座桥梁来连接应用程序世界和数据库世界。如
果没有驱动，应用程序就无法连接数据库。
● 数据库和编程语言之间的驱动有很多种，如果不注意的话就会发生驱动不
匹配的情况。
数据库和应用程序之间的关系
无论大家是搭建自己的网站，还是从事系统开发工作，都无法只通过
数据库来实现。数据库作为保存数据的重要手段，在系统开发中是不可或
缺的，但这并不意味着它可以覆盖系统开发所需的所有功能。在画面上呈
现炫酷的动画、根据查询结果数据变换用户界面等复杂的处理（业务逻辑）
单靠数据库和SQL语句是无法实现的。
这时就需要通过一些应用程序和数据库的组合来搭建系统了。这些应
用程序可以使用各种各样的编程语言来编写，代表性的语言有Java、C#、
Python和Perl等。就连C语言和COBOL这些很早就有的语言，目前仍
KEYWORD 在某些领域发挥着作用。使用这些语言编写的程序就称为应用程序，简称
●应用程序（应用、App）
为应用或者App。想必大家在自己的电脑和智能手机中都安装过很多应用
程序吧A？
注A
iPhone、iPad的应用程序下载服 简而言之，系统其实就是由应用和数据库组合而成的，如图9-1所示。
务称为“应用商店”（AppStore），
这里的“App”就是来源于苹果公
司的名称“Apple”和应用程序
“Application”这两个词吧。
● 286 第9章 通过应用程序连接数据库
图9-1 系统就是应用和数据库的组合
系统=应用+数据库
通过电脑或者智能手机
访问网站 SQL语句
应用 数据库
（Java、C#、Perl、 （Oracle Databese、
显示整理后的 Python、etc.） SQL Server、DB2、
查询结果 结果数据 etc.）
用户
当然，这仅仅是一个极简的模型而已，实际的系统其实是由许许多多
的组件构成的（例如：防止外部攻击的防火墙、接收Web浏览器发送的
请求的Web服务器等）。但不管怎样，只要理解了系统主要的构成元素是
应用和数据库两部分就足够了。
驱动——两个世界之间的桥梁
应用和数据库组合使用时会产生一个很大的问题。因为应用是由各种
各样的语言编写的，所以语法和功能都不尽相同。数据库也是如此，不同
的DBMS的功能和SQL语法也有很大区别（正如我们在第1章介绍的那样，
光是具有代表性的DBMS就有5种之多）。因此，在应用和数据库之间发
送SQL语句和接收结果数据的方法也就变得五花八门了。一旦编程语言
或者DBMS发生变化，就不得不从头开始修改应用和SQL语句，而这种
KEYWORD 情况是大家都不愿看到的。
●驱动
解决这个问题的方法就是在两个世界之间导入一个称为驱动
注A （driverA）的中介程序。驱动就是一个用来连接应用和数据库的非常小的
说到“driver”这个词，大家可能
特殊程序（大概只有几百KB）。在两者之间插入驱动程序之后，应用方面
会一下子想到螺丝刀。英语中这
两者确实是同一个单词。实际上， 就可以只针对应用进行特别处理，数据库方面也可以只针对数据库进行特
螺丝刀也是用来把两个部件连接
在一起的，从广义上来说也能叫 别处理了。不管哪一方发生版本升级或产品变更，都只需要对驱动的连接
桥梁。在计算机的世界里，那些
用来将打印机、键盘和鼠标等连 部分进行很小的修改就可以了。
接到电脑上的程序也被称为“驱
动”，它同样肩负着“连接不同机 换言之，驱动就是应用和数据库这两个世界之间的桥梁（图9-2）。
器”的使命。
9-1 数据库世界和应用程序世界的连接 287 ●
图9-2 驱动就是应用和数据库之间的桥梁
应用世界 驱动 数据库世界
（Java、C#、Perl、Python、etc.） （Oracle Databese、SQL Server、DB2、
PostgreSQL、MySQL、etc.）
public class Test{ SELECT col_1, col_2, ・・・
public static void main( ➡ FROM TestTable
string[] args)} ・・・