sendWRemoteTFD()
endDistAction()
Figure 3. Avoiding the contamination effect.
When the update is initiated by process , at a, the TCB
of  is informed of a new timed action that must termi-
nate within a certain TT F D interval, to guarantee the tim-
ing speciﬁcation TA  (as per the error-cancellation rule).
The TCB of  disseminates the TT F D speciﬁcation among
all other TCBs. At the same time, replicas RA and RB re-
ceive the update request and process it. When RB ﬁnishes
the write operation it issues a endDistAction() (not
shown in the ﬁgure), still before the deadline. The handler
in RB will not be executed. But replica RA does not ﬁn-
ish within the speciﬁed bound, yielding a timing failure at
e. The timed completeness property guarantees that this
failure will be detected by all TCBs within TT F Dax of
e, which means within the interval TA  assumed by the
application.
The guaranteed and timely execution of the handler is the
last step required to timely disable the inconsistent replica
RA. Note that, without loss of generality, we can include
the time necessary to execute the handler in TT F Dax. The
handler can do something as simple as changing the state
of some variable in the server, which disables queries to be
replied. When the query of process  is received by replica
RA, it will no longer be replied. Only one reply, from the
correct replica RB, will arrive at .
Before we conclude this section, we must mention that
in this paper we explicitly avoided to focus on implemen-
tation issues, or on the description of concrete protocols to
be used in the TCB, since this is not required to understand
the generic approach for timing fault tolerance that we in-
troduced. Nevertheless, the interested reader can refer to a
number of papers where these practical or concrete issues
are dealt [6, 4, 5].
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply. 
5.5. Reintegration of Failed Replicas
To prevent the possible contamination of the system, a
late replica has to be removed from the set of available
replicas. However, provided that the faulty write interac-
tion ﬁnally terminates, the state of the affected replica will
be consistent, at some point, with the state of the other repli-
cas [1]. This requires disabled replicas to continue receiv-
ing and processing updates, until they become temporally
consistent again.
Figure 4. Generic replica management using
the TFD service interface.
We argue that this reintegration procedure can be gener-
alized with the availability of a timing failure detector. In
fact, what triggers the passage from a temporally consistent
to an inconsistent state is the detection of a timing failure.
This is illustrated in Figure 4, where it is possible to ob-
serve the execution of two timed actions, corresponding to
write interactions performed by two processes,  and , on
a replica R. In this example both actions incur in timing
failures (detected before TA  ), which imply the existence
of two periods of inconsistency until the actions ﬁnally ter-
minate. Note that the second write operation (W ie) is
delayed by the ﬁrst one, which produces a cascading incon-
sistency effect. What triggers the passage back to a consis-
tent state is the indication of termination of the action (for
instance, with the TCB endDistAction() TFD inter-
face function).
6. Reviewing Related Work
There exist a number of works dealing with the several
facets of timing fault tolerance. We make a clear distinc-
tion between the use of techniques to prevent or avoid tim-
ing failures, and approaches which let these failures hap-
pen and provide the means to detect and possibly tolerate
them. The former have mostly to do with resource availabil-
ity, scheduling, allocation and execution control strategies,
which fall in the domain of synchronous system models.
However, our interest is in the latter, which require alterna-
tive partially synchronous models to be considered. In the
remainder of this section we essentially focus on the works
that we are aware of, which follow this line of reasoning.
From a system model perspective the problem of tim-
ing fault tolerance requires timing failures to be explicitly
considered in the fault model, so that proper solutions can
be devised thereof. The fail-awareness concept [12] intro-
duced in the framework of the Timed Asynchronous sys-
tem model [10], is useful for the design of timed services
that are at all times aware of their timeliness, and thus can
switch to a safe or a degraded mode when a timing fail-
ure occurs. In this framework, the actual means to enforce
this timely detection is by extending the model with a syn-
chronous device, such as an hardware whatchdog, on which
the applications can rely. Applying the proposed paradigm
in the context of this model would raise some potentially
difﬁcult, or even unsolvable problems. In fact, and besides
the problem of timely reaction upon failure detection, it is
not obvious whether it would be possible to construct any
useful timing failure detector, for the purpose of enforcing
temporal consistency and coverage stability for the overall
replica set. We consider this an open problem.
To the best of our knowledge, the ﬁrst work that has ex-
plicitly focused on the problem of timing fault tolerance
using a replication technique has been presented in [1].
This work proposes a speciﬁc solution in the context of
the Quasi-Synchronous system model [22]. It is based on
the existence of a TFD service highly integrated with a
group management system. The infrastructure supporting
the TFD and the group management system is assumed to
be synchronous. The TFD service is designed to observe
messages transmitted among group members and to detect
timing failures occurring during the transmission of these
messages. The group management system receives timely
information from the TFD when it is necessary to remove a
faulty replica from the group of active replicas. This inte-
grated approach, although not being generic, presents some
advantages over a generic solution. In fact, since the knowl-
edge of the required communication semantics can be em-
bedded in the TFD/group management protocols, it is pos-
sible to construct more efﬁcient timed solutions.
In contrast with the work of Almeida, where the prob-
lem of decreased coverage is not explicitly addressed in
the solution, the work presented in [16] is speciﬁcally con-
cerned with achieving an adequate coverage for assumed
timing bounds, using a replicated server. While the solu-
tion in [16] does not tackle the problem of handling server
updates, the work now presented in [17] already considers
that case, allowing consistency requirements to be speciﬁed
when performing the operation. However, the solution still
does not consider the possibility of specifying timeliness
constraints for update operations. In this sense our work is
more generic since we address the timeliness problem for
both read and write interactions and we show how to main-
tain temporally consistent replicas despite timing failures.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply. 
7. Conclusions
This paper contributes with a paradigm for generic tim-
ing fault tolerance with a replicated state machine. Existing
related work only deal with the problem in a partial way or
using ad-hoc techniques. In contrast, we reason in generic
terms and we identify the fundamental requirements that
must be fulﬁlled by any complete solution to the problem.
We show how the TCB model can provide an adequate
framework to deal with timing fault tolerance issues, and
we provide a description of the interface functions that may
be used to solve the problem of contamination and cov-
erage stability. A particularly relevant aspect of the work
we present here is the deﬁnition of timed completeness and
accuracy properties, which are used to characterize in a
generic way the TCB timing failure detector.
We believe that our work may constitute an important
reference to other works in the area of timing fault toler-
ance, namely to works requiring the use of timing failure
detectors.
References
[1] C. Almeida and P. Ver´ıssimo. Using light-weight groups
to handle timing failures in quasi-synchronous systems. In
Proceedings of the 19th IEEE Real-Time Systems Sympo-
sium, pages 430–439, Madrid, Spain, Dec. 1998.
[2] K. P. Birman. Replication and fault tolerance in the ISIS
system. In Proceedings of the 10th ACM Symposium on Op-
erating Systems Principles, pages 79–86, Dec. 1985.
[3] A. Burns. A Framework for Building Real-time Responsive
Systems. In Proceedings of the 1st International Workshop
on Responsive Computer Systems, pages 6–9, Golfe-Juan,
France, Oct. 1991. ONR/INRIA.
[4] A. Casimiro, P. Martins, and P. Ver´ıssimo. How to Build a
Timely Computing Base using Real-Time Linux. In Proc. of
the 2000 IEEE Workshop on Factory Communication Sys-
tems, pages 127–134, Porto, Portugal, Sept. 2000.
[5] A. Casimiro, P. Martins, P. Ver´ıssimo, and L. Rodrigues.
Measuring distributed durations with stable errors. In Pro-
ceedings of the 22nd IEEE Real-Time Systems Symposium,
pages 310–319, London, UK, Dec. 2001.
[6] A. Casimiro and P. Ver´ıssimo. Timing failure detection with
a Timely Computing Base.
In Proceedings of the Euro-
pean Research Seminar on Advances in Distributed Systems,
Madeira Island, Portugal, Apr. 1999.
[7] A. Casimiro and P. Ver´ıssimo. Using the Timely Comput-
ing Base for dependable QoS adaptation. In Proceedings of
the 20th IEEE Symposium on Reliable Distributed Systems,
pages 208–217, New Orleans, USA, Oct. 2001.
[8] T. Chandra and S. Toueg. Unreliable failure detectors for
reliable distributed systems. Journal of the ACM, 43(2):225–
267, Mar. 1996.
[9] F. Cristian, H. Aghili, R. Strong, and D. Dolev. Atomic
broadcast: From simple message diffusion to Byzantine
agreement. Information and Computation, 118(1):158–179,
Apr. 1995.
[10] F. Cristian and C. Fetzer. The timed asynchronous dis-
tributed system model. IEEE Transactions on Parallel and
Distributed Systems, pages 642–657, June 1999.
[11] C. Fetzer and F. Cristian. A fail-aware datagram service. In
Proc. of the 2nd Workshop on Fault-Tolerant Parallel and
Distributed Systems, Geneva, Switzerland, Apr. 1997.
[12] C. Fetzer and F. Cristian. Fail-awareness: An approach
to construct fail-safe applications.
In Digest of Papers,
The 27th Annual International Symposium on Fault-Tolerant
Computing, pages 282–291, Seattle, Washington, USA,
June 1997.
[13] F. Jahanian. Fault tolerance in embedded real-time systems.
Lecture Notes in Computer Science, 774:237–249, 1994.
[14] H. Kopetz. Real-Time Systems. Kluwer Academic Publish-
ers, 1997.
[15] H. Kopetz, R. Zainlinger, G. Fohler, H. Kantz, P. Puschner,
and W. Schutz. An engineering approach towards hard real-
time system design. Lecture Notes in Computer Science,
550:166–188, 1991.
[16] S. Krishnamurthy, W. Sanders, and M. Cukier. A dynamic
replica selection algorithm for tolerating time faults in a
replicated service. In Proceedings of the International Con-
ference on Dependable Systems and Networks, pages 107–
116, Goteborg, Sweden, June 2001.
[17] S. Krishnamurthy, W. Sanders, and M. Cukier. An adap-
tive framework for tunable consistency and timeliness us-
ing replication.
In Proceedings of the International Con-
ference on Dependable Systems and Networks, Washington
D.C., USA, June 2002.
[18] D. Powell. Failure mode assumptions and assumption cov-
erage. In Digest of Papers, The 22nd Annual International
Symposium on Fault-Tolerant Computing, pages 386–395,
Boston, USA, July 1992.
[19] F. B. Schneider. The state machine approach: A tutorial.
In Fault–Tolerant Distributed Computing, Lecture Notes in
Computer Science, pages 18–41, 1987.
[20] F. Torres-Rojas, M. Ahamad, and M. Raynal. Timed consis-
tency for shared distributed objects. In Proceedings of the
18th Annual ACM Symposium on Principles of Distributed
Computing, pages 163–172, Atlanta, Georgia, USA, 1999.
[21] P. Ver´ıssimo. Ordering and timeliness requirements of de-
pendable real-time programs. Journal of Real-Time Systems,
7(2):105–128, Sept. 1994.
[22] P. Ver´ıssimo and C. Almeida. Quasi-synchronism: a step
away from the traditional fault-tolerant real-time system
models. Bulletin of the TCOS, 7(4):35–39, Winter 1995.
[23] P. Ver´ıssimo and A. Casimiro. The Timely Computing Base
model and architecture. Transactions on Computers - Spe-
cial Issue on Asynchronous Real-Time Systems, 2002, To ap-
pear. A preliminary version of this document appeared as
Technical Report DI/FCUL TR 99-2, Department of Com-
puter Science, University of Lisboa, Apr 1999.
[24] P. Ver´ıssimo, A. Casimiro, and C. Fetzer. The Timely Com-
puting Base: Timely actions in the presence of uncertain
timeliness. In Proceedings of the International Conference
on Dependable Systems and Networks, pages 533–542, New
York, USA, June 2000.
[25] P. Ver´ıssimo and L. Rodrigues. Distributed Systems for Sys-
tem Architects. Kluwer Academic Publishers, 2001.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply.