 T.  Also, as mentioned above the definition of SIF is more
  >,
high and low level events.  However, all these extensions can be handled in much the same
way as above.
The  above  result  demonstrates  that  all  security  properties  that  SIFs  can  express
can also be expressed in our framework.  We will demonstrate that there are other security
properties  that  cannot  be  expressed  using  SIFs  but  can  be  using  our  framework.    The
argument that all “interesting” security properties can be expressed is naïve.  First, we will
show that SIFs cannot represent all security properties presented in the literature. What is
considered interesting today may not be interesting the future.  A framework should not
place limits on what types of properties can be expressed.
Consider Guttman and Nadal’s Output Non-Deductibility (section 4.4.3, page 36)
reproduced here:
:traces(S)|L(cid:215)
(cid:215) NDO(Blow(t ))
- 74 -
"
t
"
t
˘
NDO(B) ”
 "
t:traces(S)(cid:215) t|LI=t
low|LI(cid:222)
s:B(cid:215) s|(H¨ LI)=t|(H¨ LI)
Informally, for every pair of valid traces a,p ˛ T, if event sequence s ˛
 E*  satisfies
then s is a trace.
s|L = a|L
s|(H¨ LI) = p|(H¨ LI)
This property appears that it should be possible to fit into the SIF format since the
final trace s has all low level events from one trace and all high level events from the other.
A  problem,  however,  is  that  the  interleaving  is  dependent  on  the  position  of  low  level
input events.  This type of condition cannot be expressed in SIFs.
Another example of a property that can be expressed in our formalism but cannot
using  SIFs  is  the  PSP  property  presented  in  section  4.3.1,  page  30.    Recall  that  PSP  is
similar to Separability but allows high level outputs to be dependent on low level events.
This type of dependency is not expressible using SIFs.
6.3.  Comparison of Results
McLean examines three types of composition.  Product, cascade and feedback.  In
this  work  we  consider  product  composition  a  special  case  of  our  definition  of  cascade
composition.  McLean’s definition of cascade composition is different  than  ours.    In  his
definition of cascade composition all of the output events of the first component and all
input  events  of  the  second  are  involved  in  the  composition.    In  this  definition  the  only
inputs  to  the  system  are  the  inputs  to  the first  component  and  the  only  outputs  are  the
outputs from the second component.  To achieve the type of cascade composition that we
describe,  identity  components  must  be  introduced  by  McLean.    An  identity  component
copies  its  inputs  to  its  outputs.    Figure  6.1  demonstrates  this  type  of  composition.
McLean calls this type of composition general cascade composition.
- 75 -
$
I
S1
S2
I
Figure 6.1: General Composition
The  two  identity  components  (I)  are  first  composed  with  S1  and  S2  using
product  composition.    Then  cascade  composition  is  used  to  connect  the
composed  S1  and  S2  components.    In  this  fashion  general  cascade
composition can be achieved.
McLean’s results on product and cascade composition are, not surprisingly, similar
to our own.  The main difference is our assumption of input totality.  McLean requires the
a  priori  knowledge  of  compatible traces  for  the  composition.    Our  assumption  of  input
totality  removes  this  requirement.    See  section  5.3.1  for  further  discussion  of  the  input
totality assumption.
Next McLean considers Feedback composition.  McLean’s definition of feedback
is more restrictive than ours.  McLean defines an interface condition which is essentially
the requirement that both components involved in the feedback agree on the timing of the
events.  We feel that this requirement is overly restrictive and requires work by the system
designer to determine if the required condition exists.
6.4.  Summary
McLean’s  SIFs  were  a  step  forward  in  defining  a  general  framework  for  the
expression and analysis of security properties.  However, they can only be used to analyze
a subset of possible security properties.  One of the greatest weakness, however, is that if
the  application  of  the  theorem  yields  that  the  composition  of  two  components  will  not
satisfy the desired property, the result yields no information as to why.
- 76 -
7.  Implementation Issues
All theory, dear friend, is gray but the golden tree of actual life sprints
evergreen.
Johann Wolfgang von Goethe (1749-1832)
German poet, novelist and playwright.
7.1. 
Introduction
The  previous  chapters  dealt  with  the  issue  of  composability.    With  the  tools
provided the system designer can quickly determine if a property is composable.  If it is
not composable then he can determine why.  What is missing is a procedure or mechanism
for the system designer to determine if a component satisfies a particular property.
The  framework  we  presented  in  chapter  3  was  a  trace  based  formalism  for
components.    This  formalism  allows  for  the  easy  expression  of  security  properties  but
makes the procedure of validating a component more difficult.  While some systems may
be  specified  directly  in  terms  of  their  possible  traces  (see  [Zwiers  &  Roever89]  or
[McLean92a]  for  an  example),  program  code  and  other  formal  specification  approaches
assume  a  state-transition  model  and  specify  individual  state  transitions  [Millen94].
Therefore, it would be helpful if we could transform our trace based approach to security
to  a  condition  on  individual  states.    A  theorem  stating  the  equivalence  of  a  trace-based
security  condition  with  a  transition-based  security  condition  is  called  an  unwinding
theorem.
To  date  unwinding  theorems  have  only  dealt  with  specific  trace  based  security
specifications [Goguen & Meseguer84] [McCullough90] [Bevier & Young94] [Millen94].
No general approach to constructing an unwinding theorem has been presented.   In  this
chapter  we  will  present  an  approach  to  construct  an  unwinding  theorem  for  a  class  of
security properties.
- 77 -
7.2.  Event System Acceptors
In  this  work  we  have  not  relied  on  any  model  of  computation  to  generate  or
recognize the traces of an event system.  Thus our composition theorems can be applied to
any model of computation.  In presenting an unwinding theorem we need to fix the model
of computation.  All unwinding theorems in the literature have  used  some  form  of  state
machine.  The differences between the various models are whether the machines are non-
deterministic and whether they must have a finite number of states.  A state machine with
an infinite number of states may be of theoretical interest but analyzing such a machine is
often  impractical.    Therefore,  we  have  chosen  to  use  non-deterministic  finite  state
automata (NFA) for our model of computation.  Using NFAs as the model of computation
does limit the class of machines that can be analyzed but we believe that the usefulness of
having an understanding of unwinding theorems out weighs any limitation.  The analysis of
more general models might be possible.
Millen  [Millen94]  has  shown  the  equivalence  of  an  infinite  state  machine  and  an
event system as defined in chapter 3.  We will also show this equivalence and as corollary
how  a  NFA  can  be  used  to  represent  event  systems.    The  main  difference  between  our
construction of the  state  machine  and  Millen’s  is  that  Millen’s  machines  may  require  an
infinite  number  of  states  even  though  our  construction  may  not.    Our  construction  will
never require more states than Millen’s.  The difference in number of states is a result of
Millen’s desire to prove the existence of the state machine rather than finding a compact
representation.
A NFA defines a language over its symbols.  We will interpret this language as the
set of traces of a system.  To be able to use NFAs as a model of computation we must
demonstrate their equivalence to a class of event systems.
We begin by showing how to construct a possibly infinite state machine for a given
event  system.    Given  an  event  system  S={E,I,O,T}  consider  the  following  equivalence
relation (see Appendix B for a proof that it is an equivalence relation) on the set of traces
T.
s˛ T, t˛ T  s” t iff "
r:E*(cid:215)  s^ r˛ T(cid:219)
 t^ r˛ T
(7.1)
- 78 -
The above relation partitions the set T into equivalence classes such that two traces
are in the same class if and only if they share the same possible futures.  These equivalence
classes correspond to the states of the event system. An informal argument for this is as
follows:    Assume  the  execution  of  all  the  traces  of  an  equivalence  class  arrive  at  m
different states such that all possible futures are the same.  Since all m states have the same
possible  futures  they  are  indistinguishable  and  can  be  considered  one  state  [Wood87,
pg128].    The  above  relation  will  result  in  a  finite  number  of  equivalence  classes  if  T  is
finite. If T is infinite then the number of equivalence classes may be infinite. The number of
equivalence classes is finite for the class of machines in which we are interested12.
The events of an event system are partitioned into two classes.  These are the high
level  events  and  the  low  level  events.    Security  policy  typically  requires  that  low  level
users  can  see  only  low  level  events,  while  high  level  users  can  see  all  events.    This
classification can be applied to the set S
we can also define the views of each user level.
 of the NFA.  When such a classification is used
A  user’s  view  of  the  system  is  that  portion  of  the  system  state  that  could
potentially  influence  his  activities  [Bevier  &  Young94].    The  unwinding  technique
presented below constructs the view of the low level user and the unwinding  conditions
give  the  conditions  on  how  high  level  activity  can  influence  the  low  level  view.    An
unwinding  theorem  can  be  thought  of  as  giving  conditions  on  how  high  level  users  can
influence a low level user’s view.
The following definitions will be central to our presentation of a a state machine
that can be used to represent certain classes of event systems.
The projection operator is used to determine the possible low level futures from a
state.  There are two versions of this operator.  The one in Definition 7.1 will be used in
those properties where high level outputs can be inserted to ensure that a correction for a
perturbation exists (see section 7.3).  The version given in Definition 7.2 will be use for
those properties were high level outputs cannot be inserted to ensure a correction exists.
12 
The existence of event systems that require an infinite number of states follows immediatly from
the existstance of languages that can not be recognized by a NFA.
- 79 -
An  algorithmic  approach  to  determining  the  projection  of  an  NFA  can  be  found  in
[Ginzburg68].
Definition 7.1: Projection Operator.
The projection of a state13, q, where high level outputs do not affect the
projection written p (q) is the set of possible low level futures from q :
p (q) = { t | s˛ q (cid:217)
 s^t˛ T (cid:217)
 t|HI=<>}|L
Definition 7.2: Projection Operator II.
The projection of a state, q, written p ’(q) is the set of possible low level
futures from q:
p ’(q) = { t | s˛ q (cid:217)
 s^t˛ T (cid:217)
 t|H=<>}|L
Definition 7.3: The After Operator.
The  after  operator  returns  the  tail  of  a  trace  after  the  execution  of  its
prefix.  Formally, If r˝ E* is a set of event sequences and s
E*
r/s  = { p | s ^p˛
r }
Definition 7.4: l
 Events
 is an event with the following behaviour:
r/l
 = r
For all r.
The following definition describes the equivalence between event systems and an
non-deterministic  infinite  state  automata.    For  the  purposes  of  this  work  we  will  only
consider state machines that have a finite number of states.
Definition 7.5: Event System Acceptor.
An event system acceptor for an event system S={E,I,O,T} is a quintuple
M={Q,S
,d ,s,F} where:
Q
is an alphabet of the state symbols.  Each state will correspond to a different
equivalence class generated by relation 7.1.
13 
By state we mean an equivalence class.  This is formalized in Definition 7.5.
- 80 -
˛
l
is an alphabet of symbols for the NFA.  This corresponds to the set of events
E.  Therefore, for each member of S
of E.
 there is a corresponding unique member
˝ Q·(S
l)·
Q
is a transition relation such that (q,e,q’) if and only if p (q)/e = p (q’).
The transitions are called moves of the state machine.
s
F˝ Q
in Q is the start state
is the set of final states.
In  this  work  the  set  of  final  states  F  will  be  equal  to  the  set  of  states  Q.    This
implies that the set of traces is prefix closed.  The prefix-closedness is consistent with the
intuitive interpretation of an event sequence as a temporal ordering of events [Lee et al.
92].  The implication of this is that there are no inseparable events.  That is, there is never
a  state  where  the  system  must  wait  exclusively  for  a  particular  event  to  occur.    The
assumption of prefix-closure simplifies the presentation of the results.  The extension to a
non prefix-closed set of traces is straightforward.
Theorem 7.1 If M is the event system acceptor for S, M accepts s
 iff s
T.
Proof:
 M accepts s
 if s
T
We will prove this by induction on the length of sequences produced by the state machine.
Base Case:
The zero length sequence corresponds to the empty trace.  The  empty  trace  is  a
trace of all event systems.
Induction Hypothesis:
A sequence s
 of length n is a trace of S.
Induction Step:
Consider a  sequence s e  where s
  is  a  sequence  of  n  symbols  and  e  is  a  possible
 is a trace of S the relation 7.1 above places s
  in  an  equivalence
.  Since s
event after s
class.  The event e is possible iff there is a trace s
Therefore, by induction if M accepts s
T
 then s
' such that s e”
'.
- 81 -
S
d
¨
˛
(cid:222)
˛
s
˛
(cid:220)  
if s
T then M accepts s
The proof is similar to the above and follows from the construction of M. G
7.3.  Security Properties
The definition of a security property given in Chapter 4 imposes few restrictions on
the form of a property.  This lack of structure makes providing a general transformation
routine  from  security  property  to  unwinding  theorem  difficult.    In  this  work  we  will
provide  a  set  of  rules  that  can  be  used  to  transform  a  class  of  security  properties  into
unwinding conditions.
To  simplify  the  presentation  of  the  results  we  will  split  the  unwinding  theorems
into three classes.  The first class we will consider are those expressible in the N-Forward
Correctable  Hierarchy  and  Generalized  Noninterference.    We  will  define  N-Forward
Correctability  below.    We  will  then  show  how  the  unwinding  theorem  for  N-Forward
Correctability can be applied to PSP.  Finally, we will demonstrate that a special case of
the  unwinding 
theorem  can  be  used 
to  handle  Noninference  and  Generalized
Noninference.  The unshaded area of Figure 7.1 shows the classes of security properties
we will provide unwinding theorems for.