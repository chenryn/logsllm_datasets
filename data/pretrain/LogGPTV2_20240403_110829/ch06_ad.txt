共享组件可以大有作为，使团队在通常由提供其服务的专用团队保护的区域中自主。你想走多远，这要由你决定。对于 SoundCloud，ProdEng 为所有团队提供部署平台作为服务。但是，使用它不是强制性的，确实有一些应用程序位于它之外，这由维护它们的团队选择。获得支持者
 Google 确保遵循 SRE 实践的方式有一个共同的主题。 与其执行“黄金规则”，首选方法是创建一个激励结构，使遵循最佳实践与工程师提高自身效率和生产力的自然愿望保持一致。结果是低开销的自我调节。众所周知的例子是引入错误预算网站可靠性工程：谷歌如何运行生产系统，第1章和第3章，而不是 SRE 规定的发布停止间隙。如果自我监管不够，Google SRE 团队不需要上级管理层的干预，只需威胁不再轮值即可。SRE 支持的特权超过了以下规则的负担。
这是否意味着根本不需要管理曾支持？恰恰相反。虽然错误预算或归还轮值责任的“核按钮”可以促进自我监管，但建立这些机制并使其发挥作用需要非常强大的管理支持，在需要时能够强制自上而下做出决策。网站可靠性工程：谷歌如何运行生产系统，第1章（第7页）。
将 SRE 原则引入已建立的组织将首先面临如何获得各级管理层支持的挑战，然后再讨论如何激励单个工程师的问题。在 SoundCloud，情况再次有点特殊。各个团队的自主性从一开始就深深植根于我们的工程文化之中。 康威定律经常被引用，用它来指引我们转向微服务架构，但它也被用来反向证明团队自主性，作为一个很好的适合我们的工程方法。我们的工程文化的这一方面对 SRE 原则的引入有好有坏。好的一面是，几乎没有阻力可以克服。总体而言，高级管理层对实验持开放态度，并欢迎任何解决我们日益增加的可靠性问题的努力。糟糕的是，集中引入和执行任何规则，甚至像错误预算这样的框架是困难的。从那些珍惜自主权的团队领导那里获得支持是很困难的，更不用说个别工程师了。此问题并不仅限于 SRE 实践。
执行任何与你的工程文化相悖的东西通常是一个坏主意，不仅仅是因为你（可能）喜欢你自己的文化。如果你能改变你的方法，使他们与现有的文化很好地融合，甚至轻轻地鼓励有机的文化向一个更成熟的组织进化，这是最好的。我们前面描述的嵌入式 SRE 的情节是一个完美的案例研究。没有人真正反对这个主意。但是，有一种隐含的期望，即每个团队都会独立地改变其经验证的习惯，以充分利用其嵌入式 SRE。事后看来，这是过于乐观的。即使在平台团队的时代，团队中的工程师也经常抱怨他们的建议被忽略了，甚至就没有人征求他们的意见。这两种情况都证明，如果没有激励结构来推动变革，变革是不可能的。
与谷歌 SRE 类似，我们需要建立一个激励结构和自我监管，而不是强制要求严格的规则。然而，在这样做时，我们不能依靠集中的决定和指导；相反，我们必须接受一个文化环境，这种环境非常开放，可以进行实验和创新，并高度重视团队自主性。在本章中我们介绍的成功案例中，可以看到团队通过遵循新方式获得更多的自主性模式：通过自己接管轮值责任，他们将事情掌握在自己手中。随后，它们可以在功能和稳定性之间进行更好的权衡。通过采用通用部署平台，他们可以更快地推动更新，同时减少操作开销。引入现代监视实践不仅有助于检测和解决故障，还启用了全新的调试和优化代码的方法。在许多地方，监测被视为一种必要的罪恶。在 SoundCloud，现在几乎可以将 Prometheus 等工具很好地集成到基础架构中，并由 ProdEng 团队中的相关专家直接提供支持，这已被视为一种特权。
随着时间的推移，我们工程文化的其他一些有用方面也发生了变化：
有一种强烈的“相互学习”的概念，它有时抵消甚至取代对自主的渴望。向他人寻求帮助和接受帮助一直是 SoundCloud 体验的重要组成部分，但随着时间的推移，这一点变得更加重要。学习的机会，如内部技术讲座或故障审查，都受到欢迎，即使没有管理层的胁迫。也许与前一点有关，“以身作则”在成功被证明后往往行之有效。例如，采用 Prometheus 最初需要很多艰苦的说服。只有在实施了之后，它才获得了垂青，因为 Dickerson 的可靠性等级的基础已经足够建立，可以明显改善我们的可用性。
在回顾期间，团队之间缺乏协调与合作成为人们经常抱怨的话题。在某个时候，公司的集体意识获得了一种认识，即对常见做法的某种同意是绝对必要的。更强有力的一致性不止有助于我们实施 SRE，还对 SoundCloud 的工程的许多方面产生了更广泛的影响。  
结论
对于 Google 的开发人员来说，获得 SRE 支持最有吸引力的方面之一是摆脱运维负担。乍一看，我们做的正好相反：我们不是减轻了开发人员的运维负担，而是放手让他们负责。然而，在这样做时，我们更加接受了SRE 的基本原则：“SRE 是当你要求软件工程师设计运维团队时发生的情况。”Ben Treynor 在网站可靠性工程：谷歌如何运行生产系统，第1章底线是，在 SoundCloud 的中型工程组织中，负责相对广泛和多样化的功能，专用的 SRE 团队可能无法按预期工作。但是，即使没有专门的 SRE 团队，你也可以（而且实际上必须）应用 SRE 原则，正是因为你的软件工程师在大量工作中必须戴上 SRE 帽子。全面的监控、低噪音告警和体面的运维文档可减少工作负载，以便功能无需其他团队的运维即可发布；倾向于某些平台和共同的故障报告过程，能促进凝聚力和知识交流；处于协商角色的一个良好团队不需要否决权来维持可用性。
延伸阅读
这些发展的最初冲动来自前谷歌公司，其中许多是 SRE。它们的背景在《网站可靠性工程：谷歌如何运行生产系统》中得到了很好的解释。
我们的故障报告过程基于 2010 年代早期在 Etsy 开发的流程。一个好的出发点是推广它的博客文章。更进一步，Etsy 还出版了《故障汇报指南》。我们在这一流程上的一个显著区别是，我们并非针对每个事件单独举行会议。将生产就绪性审查与功能脱钩的初始版本，灵感来自 Susan Fowler 的生产就绪微服务（O'Reilly，2016）。在此书发布之前，我们一直在努力提出“良好”服务的定义，但又不希望给自己带来负担。尽管我们不太重视标准化，但本书为构建或拥有服务时要考虑的问题提供了一个良好的起点。   
编者介绍
Björn Rabenstein 是 SoundCloud 的产品工程师和 Prometheus 的开发人员。此前，Björn 是谷歌网站可靠性工程师，也是科学数字计算方面的爱好者。
Matthias Rampke 于 2011 年加入 SoundCloud，帮助处理内部 IT。作为系统和生产工程团队的一员，他自 2013 年以来一直在运维、调试并频繁重新启动将 SoundCloud 组合在一起的粘合器。