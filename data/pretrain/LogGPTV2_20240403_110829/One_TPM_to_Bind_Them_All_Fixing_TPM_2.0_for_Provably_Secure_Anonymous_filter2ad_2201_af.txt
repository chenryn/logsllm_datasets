A, A
set
←
, 1G1 , 1G1 ),
, h0, 1G1 , 1G1 )} ∪ {(ai, hi, 1G1 , 1G1 )}i∈ ¯D. The host then
←
with
of
{(−e, 1G1 , 1G1 , A
(cid:3)
(s
sets πcred ← ( ¯
) w.r.t.
VERIFY:
(ipk , σ, m, bsn, (D, I), RL, SRL) and nym, parse ipk =
(h0, . . . , hL, X, X
and
(cid:3)
(cid:3)
, X) = e( ¯
e(A
cred with respect to mes-
sage m, basename bsn, attribute disclosure (D, I), signature
(cid:3)), and
revocation list SRL, randomized credential ( ¯
, b
pseudonym nym.
To verify πcred = ( ¯
, πipk ), check that A
, π
(cid:4)= 1G1
A, g2), and verify π
(cid:3)
A, A
(cid:3)
(cid:3)
A, A
(cid:3)
cred
(cid:3)
cred
(cid:3)
, b
(cid:3)
, b
, π
).
(cid:3)
5.2.2 LRSW-based DAA Instantiation
We now demonstrate that an LRSW-based DAA scheme
can be built on top of the new TPM interface. Our scheme
is similar to the scheme by Chen, Page, and Smart [23],
standardized as mechanism 4 of ISO/IEC 20008-2 [31], but
includes the ﬁxes to ﬂaws pointed out by Bernhard et al. [33]
and Camenisch et al. [9].
Note, for the sake of efﬁciency we do not include attributes
in this scheme. Selective attribute disclosure can be supported
using the extension by Chen and Urian [32], but it comes with
a signiﬁcant loss in efﬁciency. When attributes are required,
the q-SDH-based scheme should be used.
A New Approach to Issue CL-Signatures. The main differ-
ence to the schemes by Bernhard et al. [33] and Camenisch
et al. [9] is the way we prevent a static DH oracle when
the membership credentials are generated. In LRSW-based
schemes, cred is a CL-signature (a, b, c, d) on gsk, where for
blind signing the issuer chooses α ←$ Z
∗
p and sets
, d ← gpk
α·xy
, c ← a
, b ← a
x · gpk
a ← ¯g
α·y
α
y
,
with (x, y) denoting the issuer’s signing key and gpk = ¯ggsk
the platform public key. The DH oracle arises as the TPM
must later prove knowledge of d = bgsk , and b is a value
chosen by the issuer.
The schemes by Bernhard et al. [33] and Camenisch et
al. [9] avoid such an oracle by letting the issuer prove
π ←$ SPK{(α · y) : b = ¯gα·y ∧ d = gpk
α·y}. Thus, the issuer
proves that it correctly computed d = bgsk , which shows the
TPM that it can use b as a generator without forming a static
DH oracle (as the issuer already knows d). The TPM must
therefore verify π, store (b, d) along with its key, and only
use these values in the subsequent SPKs.
While allowing for a security proof under the standard DL
assumption, realizing this approach would require signiﬁcant
changes to the TPM interface to verify and store the additional
key material. Further, the TPM 2.0 speciﬁcation aimed to
provide a generic interface for a number of protocols, and
adding LRSW-DAA speciﬁc changes would thwart this effort.
Our goal is to keep the TPM protocol as generic and simple
as possible, and we propose a novel and more elegant solution
that avoids the DH oracle without requiring the TPM to verify
a zero-knowledge proof. For the sake of simplicity we assume
gsk = tsk for the exposition of our core idea, and only include
the split-key approach gsk = tsk + hsk in the full protocol
speciﬁcation.
The issuer chooses a random nonce n and we derive b ←
HG1 (0||n). The TPM receives n, derives b and sends d = bgsk
to the issuer. Note that d does not leak information about
gsk when we model HG1 as a random oracle. The issuer then
completes the credential by computing
a ← b
1/y
,
c ← (a · d)x
.
It is easy to see that the values (a, b, c, d) derived in that
way, form a standard CL signature on gsk as in the existing
schemes. Note that we now use HG1 in both the join protocol
912
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:02 UTC from IEEE Xplore.  Restrictions apply. 
and to create pseudonyms while signing. We preﬁx the hash
computation with a bit to distinguish these cases, to prevent
losing privacy when signing with a basename bsn equal to
nonce n.
This new blind issuance protocol is provably secure under
the generalized LRSW assumption as introduced in Sec. 2,
which we prove as one step in our full security proof in the
full version of this paper. We need the generalized LRSW
assumption, as the issuer already commits to values a and b
before getting the d value and computing c based on d. One
can easily modify the issuance scheme to be secure under the
standard LRSW assumption though, one needs to prepend one
extra round between the TPM and the issuer before running
the issuance as described above. Therein, the issuer sends a
(cid:3) to the TPM, and the TPM responds with a proof
nonce n
∗{gsk : gpk = ¯ggsk }(n
π ← SPK
(cid:3)). The issuer veriﬁes π
and then continues with the issuance as described above. In
the security proof this allows to extract gsk from π and we
can obtain the full signature (a, b, c) on gsk from the LRSW
oracle. Note that this extra round can be implemented with
our revised TPM interface as well, but slightly reduces the
efﬁciency of the overall JOIN protocol.
y
2 ∧ Y = g
2}(“setup”).
p, set X ← gx
∗
We now describe how this new issuance protocol is used
in the LRSW-based instantiation of our DAA protocol. We
denote the DAA protocol given in Fig. 4 instantiated with the
LRSW-based membership credential and the proofs described
below as ΠLRSW−DAA.
SETUP: The issuer generates its key pair (ipk , isk ) as follows:
• Choose x, y ←$ Z
2 , Y ← g
y
2, and compute
πipk ←$ SPK{(x, y) : X = gx
• Set ipk ← (X, Y, πipk ), and isk ← (x, y).
When ﬁrst getting the issuer public key, protocol participants
will check Y (cid:4)= 1G2 and verify πipk .
JOIN: Opposed to the q-SDH-based protocol, we make use of
the ﬂexibility for the generator of the platform’s key. That is,
instead of using ¯g we will use ˜g = HG1 (0||n) which will also
serve as the b-value in the improved issuance of CL credentials
as described above.
• First, upon receiving n from the issuer, the host and TPM
(0||n).
create gpk , tpk
Recall that the TPM authenticates only the value tpk = ¯gtsk ,
(cid:3) = ˜gtsk uses the same tsk
so the TPM must prove that tpk
as in its authenticated public key tpk:
∗{tsk : tpk = ¯gtsk ∧ tpk
πtpk ← SPK
(cid:3)
The TPM’s key contribution tpk
created via the Prove protocol for the following input:
(cid:3) = ˜gtsk}(“join”, n)
and the proof πtpk are
, πtpk , πgpk based on ˜g = b = HG1
(cid:3)
(tpk
(cid:3)
, πtpk ) ← Prove(0, tpk ,⊥, 1,⊥, 1, (0||n),
⊥,∅,⊥, (“join”, n))
(cid:3) ·
The host then picks a key hsk, computes gpk = tpk
˜ghsk and πgpk (as described in Fig. 4) and ﬁnally sends
tpk , tpk
, πtpk , πgpk , gpk to the issuer.
(cid:3)
• Then, the issuer blindly completes the CL signature on
gsk = tsk + hsk as described above: the issuer computes
a ← ˜g1/y, c ← (a · gpk )x, and sets cred ← (a, c). Note
that gpk = ˜ggsk = bgsk , so we can use this as the d-value
of the credential.
• The host upon receiving cred = (a, c) from the issuer
veriﬁes that a (cid:4)= 1G1, e(a, Y ) = e(˜g, g2), and e(c, g2) =
e(a· gpk , X). Finally, the host sets cred
(cid:3) = (a, ˜g, c, gpk , n).
SIGN: We now describe how to instantiate the membership
proof πcred for such CL signatures with our TPM methods.
(cid:3)) and random-
• The host retrieves the join record (hsk , cred
(cid:3) = (a, ˜g, c, gpk , n) by r ←$ Z
∗
izes the CL credential cred
(cid:3) ← cr, gpk
(cid:3) ← gpk
p
and setting a
• The host and TPM then jointly compute nym ←
(1||bsn)gsk for gsk = tsk + hsk and prove knowledge
HG1
of a CL credential on gsk by creating:
(cid:3) ← ar, ˜g
(cid:3) ← ˜gr, c
r.
(cid:3)
cred
π
← SPK
∗{(gsk ) : gpk
(cid:3) = ˜g
(cid:3)gsk ∧
nym = HG1 (1||bsn)gsk}((“sign”, SRL), m)
This proof and pseudonym nym are computed by
(cid:3)
(nym, π
(cid:3)
cred
) ← Prove(hsk , gpk
, (0||n), r,⊥, 1, (1||bsn),
⊥,∅, (“sign”, SRL), m).
(cid:3)
(cid:3)
, ˜g
, c
(cid:3)
(cid:3)
, ˜g
, c
(cid:3) (cid:4)= 1G1, e(a
(cid:3)
, X), and verify π
, nym).
Finally, the host sets πcred ← (a
(cid:3)
).
cred
(cid:3)
VERIFY: To verify πcred = (a
) w.r.t.
cred
(ipk , σ, m, bsn, (D, I), RL, SRL) and nym, parse ipk =
(cid:3)
, Y ) = e(˜g
(X, Y, πipk ), check that a
, g2), and
(cid:3) · gpk
(cid:3)
, g2) = e(a
e(c
cred with respect to
(cid:3)
(cid:3)
(m, bsn, SRL, ˜g
, gpk
, gpk
(cid:3)
, π
(cid:3)
, gpk
, π
(cid:3)
(cid:3)
(cid:3)
(cid:3)
5.3 Security Properties of our Schemes
In this section we informally discuss the security of our
DAA schemes. For the formal security proof we refer to the
full version of this paper.
Theorem 1 (Informal). Protocol ΠLRSW−DAA is a secure
anonymous attestation scheme under the Generalized LRSW
and Decisional Difﬁe-Hellman assumptions in the random
oracle model.
Theorem 2 (Informal). Protocol ΠqSDH−DAA is a secure
anonymous attestation scheme under the q-SDH and De-
cisional Difﬁe-Hellman assumptions in the random oracle
model.
The proofs of these two theorems are quite similar. In the
following we give a proof sketch that treats both schemes at
the same time, pointing out the differences when they arise.
Proof (Sketch). For each of the properties stated in Sec-
tion 5.1, we argue why our schemes satisfy them. The actual
security proof is structured quite differently as there we
prove that an environment cannot distinguish between the
interactions with the real world parties and with the ideal
speciﬁcation with a simulator. Nevertheless, the arguments
presented here also appear in the full formal proof.
913
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:02 UTC from IEEE Xplore.  Restrictions apply. 
Unforgeability. First, we argue that the adversary cannot use
a credential from a platform with an honest TPM. In both our
schemes, signatures are signature proofs of knowledge of the
platform secret key tsk + hsk, as deﬁned in (1). This means
that from Lemma 2 we can directly conclude that the adversary
cannot use the credential of a platform with an honest TPM.
Second, the adversary cannot use a revoked credential on
the key gsk by a corrupt platform. For private-key based
revocation, the platform proves that nym = HG1 (1||bsn)gsk
is correctly constructed, and the revocation check will reject
signatures with that pseudonym. If signature-based revocation
(1||bsn)gsk ) is included in
is used, a pair (bsn i, nymi = HG1
(cid:3)
SRL,i, the adversary must prove that his gsk
SRL. In proof π
is different than the one used in nymi, which contradicts the
soundness of the zero knowledge proof.
∗
, c
∗
∗
, b
It remains to show that the adversary cannot create signa-
tures using a forged credential. For ΠqSDH−DAA, this clearly
breaks the existential unforgeability of the BBS+ signature
scheme, which is proven under the q-SDH assumption. For
ΠLRSW−DAA, we have to show that credentials are unforgeable
under the generalized LRSW assumption. For this, we simulate
the issuer with a generalized LRSW instance. When the join
protocol starts, the issuer asks Oa,b
X for (a, b). It chooses a
fresh nonce n and programs the random oracle HG1 (0||n) = b.
When it receives proofs πtpk , πgpk it extracts tsk and hsk and