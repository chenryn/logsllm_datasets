authorization code for replacement, as it is single-use (Section. 2.2).
The test cases are prioritized in the same order, where a single
parameter is fuzzed first. Once the current test case is identified to
be redundant, i.e., fuzzing does not affect RP login status, following
associated test cases will be ignored (i.e., Step 10 in Fig. 3).
Under the current implementation, we only consider the simul-
taneous replacement of up to 2 parameters. In principle, MoSSOT
can support more complicated cases like the combination of more
parameters and different operations, e.g., replacing access token
and randomizing uid in Req4. However, the number of test cases
will increase exponentially and thus slow down the testing.
4.3 Building a Robust Testing Architecture
To execute the test cases from System Model, Test Engine drives
the mobile app to the expected state. Then, Test Oracle tracks the
app state and identifies potential vulnerabilities, based the real-
time observations. The two modules construct a robust testing
architecture and thus solve Challenge 3.
4.3.1 Execution of Test Cases Under Test Engine
Test Engine (in Fig. 3) is made up of three components: UI Navi-
gator, Proxy, and Mobile OS Emulator. We first describe their func-
tionality and then discuss their integration for executing test cases.
UI Navigator. As discussed in Section 4.1.2, the module takes
the UI paths from UI Explorer as input to drive the apps in the
Mobile OS Emulator for simulating user behaviors.
Figure 5: Flow Chart of Test Oracle
Proxy. Since our testing relies on tampering SSO-related net-
work traffic, we set up a MitMProxy [33] in Test Engine. As the
MitMProxy is SSL-enabled, Proxy manages to monitor, intercept or
tamper the HTTP(S) traffic from apps to servers.
Mobile OS Emulator. Mobile OS Emulator in Fig. 3 is the execu-
tion environment of the IdP app and RP app. MoSSOT supports two
types of emulator, i.e., Genymotion [16] and Android Emulator [18].
As the snapshot capability of the latter can recover the app from
an error state efficiently, we use it in large-scale testing.
In the actual testing, UI Navigator first sends instructions to the
apps (in the emulator) to perform the SSO login process. Meanwhile,
UI operations lead the app to the expected state and trigger SSO-
related network traffic, which goes through Proxy. Then, Proxy
tampers the traffic according to the current test case. Afterward,
the observations from Proxy and UI Navigator are output to Test
Oracle (Section 4.3.2). Finally, UI Navigator resets the state of the
apps to execute the next test case.
4.3.2 Test Oracle
plete the following tasks.
Fig. 5 presents the workflow of Test Oracle, which aims to com-
Tracking the App State. Test Oracle keeps monitoring the
feedback from UI Navigator to track the app state. Once detecting
an abnormal app state, e.g., unexpected crash, the module will try
to recover the app to a correct one for resuming the test by (1)
resetting and restarting the app or (2) loading a prepared snapshot.
Detecting the Leakage of Credentials. Test Oracle also checks
the protection of user/ app identity credentials (e.g., access token
and app secret), because the attacker can obtain the credentials via
sniffing the SSO sessions of victims/ himself (Section 2.5).
The module takes different strategies to detect the leakage. For
the former, it extracts credential values from the interactions be-
tween the IdP app and its server, e.g., Step 2 to 4 in Fig. 1, and
will generate an alarm once they are sent in plaintext (HTTP). For
the latter, we manually collect the list of network APIs provided
to the RP server (involving app secret) beforehand and their invo-
cations by the RP app indicate the leakage problem. The leakage
locations are then output, i.e., Credential Disclosure and App Secret
Disclosure in Table. 2.
Identifying the Vulnerabilities. The module identifies the po-
tential vulnerabilities by comparing the observations with expected
behavior (from System Model). If the testing does not lead to devi-
ation, the current test case is classified as redundant and System
Model will be rectified accordingly (discussed in Section 4.2.3).
FalseTrueStart Input1:   ObservationsAbnormal AppState?Error RecoveryTrueCredentialLeakage?False Output1:Leakage LocationTestingRequirementAchieved?EndFalseInput2:   ExpectedSystemBehaviorDeviation?RefiningSystem ModelTrueFuzzing w/o the App   Output2:   DetectedVulnerabilitiesTrueFalseExploitable?FalseTrueSession 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand274As shown in Fig. 6, at a certain moment of our testing, MoSSOT
chooses to fuzz access token within Req4, where the test case is to
replace its value with the one of Alice (from another RP app).
(1) Then, MoSSOT asks Test Engine to perform the login process
via SSO and replace the access token within Req4, while
making no changes to other messages, e.g., Req1.
(2) After that, the tampered access token arrives the RP server
and is included in the request to the IdP server, i.e., Req5.
(3) If the verification on the RP server is incomplete, it will trust
the IdP response by mistake, authenticate the tester as Alice,
and returns her user identifier (e.g., 38006) to the RP app.
(4) By comparing the recorded user identifier value (from Sec-
tion. 4.2.2) and the real-time value, Test Oracle identifies that
the tester logs into the RP app illegally as Alice, i.e., entering
S6(b), indicating the vulnerability within the RP server.
4.5 Additional Implementation Challenges
In the preliminary test, we encountered several practical challenges.
We illustrate them here and give the current/ potential solutions.
Certificate Pinning. Both the IdP and RP may apply certificate
pinning to protect their mobile apps. In the situation, the app will
check the certificate and refuse to work as the certificate belongs to
Proxy. Thus, we install a universal unpinning tool on the emulator
to bypass the protection within most RP apps.
However, the tool does not work for the Facebook app. As a
workaround, we uninstall the app and then WebView (Section 2.4)
will be used instead, where certificate pinning is not available. Be-
sides, WebView works almost the same as the Facebook app in SSO
except that it utilizes different network APIs.
To generalize our tool, there are two solutions to tackle the
certificate pinning. First, we have written a tool to hook HTTP-
related functions in Android to tamper our interested data without
using Proxy. Second, we may hook the functions within the IdP
SDKs to intercept the interactions between the IdP and RP apps.
We plan to add the two functionalities into MoSSOT in the future.
API Changes of IdP. During the large-scale testing, we noticed
an abnormal number of failure cases for apps with WeChat SSO.
After some investigation, we found that WeChat is migrating to
a new API with A/B testing. Worse still, in the new API, all the
HTTP(S) messages are encoded. Consequently, Test Learner could
not extract necessary data from the messages, e.g., code, to identify
the interaction between the RP app and its server (Section 4.2.2).
Thus, we develop an XPosed [48] module to hook related func-
tions within the IdP app and force WeChat to use the old API.
Trouble of background animation. During the test of our UI
automation framework, we observed the extremely slow reactions
when the app contains continues UI animation.
We traced back and discovered a bug in the Android UIAutomator.
Later in January 2018, we submitted a patch to Google.
5 EMPIRICAL TESTING
We have implemented MoSSOT in Python with around 12000 lines
of code. Using the tool, we managed to assess the practical SSO
implementations within 550 RP apps that integrate the service from
three major IdPs, namely Sina Weibo, WeChat, and Facebook.
Figure 6: A running example of replacing access token
In contrast, the deviation may not be exploitable. For example,
removing access token in Req4 will cause the error response (Error
in Fig. 2). To verify whether the deviation can indeed be exploited,
Test Oracle will check RP login status by comparing the user iden-
tifier value within the authentication response (Resp4 in Fig. 2) and
the one of Eve from reference network traces (Section 4.2.2). As the
tester always logs into the app as Eve during the test, Test Oracle
will generate an alarm if the two differ, indicating that the system
enters an abnormal state (S6(b) in Fig. 2), i.e., logging into the RP
app illegally as another user (like Alice).
Fuzzing without the App. Sometimes, the server may detect
our fuzzing (e.g., removing access token) and respond with error
messages directly. Based on the context, Test Oracle will send tam-
pered requests according to the following test cases directly. Then,
Test Oracle can get immediate responses from the server. If error
messages disappear, Test Oracle will stop and replay the current test
case to investigate its real impact. The functionality helps speeding
up the test, as the UI operations are time-consuming.
4.3.3 Checkpointing and Error Recovery
Despite the recovery mechanism from Test Oracle, MoSSOT
crashes occasionally due to the internal errors in Emulator or UI
Navigator. As some modules we use, e.g., Android Emulator [18], are
complex systems themselves, we cannot identify the exact causes.
To improve stability, we have implemented a checkpointing
function. Once the testing progress remains unchanged for a long
time, indicating the anomaly, checkpointing will start to work.
Specifically, the recovery consists of two stages: (1) recover to the
interrupted action (in System Model) (2) continue the remaining test
cases. Once exceptions happen, the checkpointing will resume the
interrupted action and reset the app state accordingly2 by loading
a prepared snapshot or launching a new emulator instance3. Then,
MoSSOT continues to execute the unfinished test cases.
4.4 A Running Example of Testing Phase
We give a running example here to illustrate the testing phase, in-
cluding how MoSSOT executes test cases and detects vulnerability.
2The function may also revoke the authorization to change the server state.
3The emulator sometimes is not responsive and we have to start a new one cloned
from the template instance.
                   {url: https://api.weibo.cn/ oauth2/sso,          learnt_parameter:                [...]}                   {url: https://api.weibo.cn/                   2/account/login,                learnt_parameter:                      [,,,]}                   {url: https://api.weibo.cn/                    2/account/login,                                                             learnt_parameter:             [...]}Req3Req2Req1S3S0(init)S1S2S4Req5: S5(a)            Req4                (chosen message to be fuzzed)   {url: https://RP.com/sso,                                                                      learnt_parameter: [,                      (chosen)...]} replace with                            (from another RP)Test Case:S6(b)Resp4’ =38006(Alice)         Eve illegally logs into         RP app as Alice         =>Vulnerability!!!Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand275Output
#Dowloaded
#UI Explorer
#Success
Cases
#Screener
Output
Apps
12872
12872
11064
767 (23.1%)
822 (17.5%)
436 (20.8%)
Table 1: Success rates at different stages (under the fully
blackbox & automated setting)
IdP
Sina
3322 (25.8%)
WeChat
4692 (36.5%)
Facebook
2095 (18.9%)
5.1 Dataset and Test Setup
We developed crawlers to download 12872 and 11064 Android Apps
(in Table. 1) from two third-party Android app store, i.e., Wandou-
jia [45] and Apkpure [3], respectively in June 2018. As Google Play
did not host many Chinese apps with Sina Weibo and WeChat SSO,
we used Wandoujia instead. Considering consistency, we chose
Apkpure as the dataset source for Facebook apps. According to [41]
and [52], they are both highly-ranked third-party app stores.
196 (25.6%)
226 (27.5%)
128 (29.4%)
However, a majority of the apps do not have SSO support. As a
preprocessing step, we implement the Screener to heuristically filter
out the apps that have no indication of the SSO login integration
of the three studied IdPs. The remaining dataset is the initial input
to our MoSSOT framework (i.e., Input1 in Fig. 3).
Ultimately, we use MoSSOT to perform the large-scale testing
on a machine with a 2.4GHz quad-core CPU and 64GB memory
running Ubuntu 16.04. On average, the tool takes 2.85 hours to
complete the test of one RP app. Besides, only 550 RP apps com-
pleted the test under the fully automated and blackbox setting due
to various reasons. We delay the discussion of encountered issues
as well as potential solutions to speed up the testing in Section 6.
5.2 Efficiency and Detection Accuracy
Considering efficiency, the test cases are prioritized before execu-
tion (as mentioned in Section 4.2.3) so that single test cases (associ-
ated with known vulnerabilities) will be executed first. Afterward,
the tool turns to execute the combination cases, where two param-
eters are replaced simultaneously and may lead to the detection of
unknown vulnerabilities.
In terms of detection accuracy, there should be no false positives
as we confirmed that by manually validating the testing result of 30
randomly-chosen apps, where no false alarms were found. However,
there may be false negatives due to following two reasons.
First, there may be a large network delay before receiving the
final authentication response, due to server-to-server interactions,
e.g., Step 7 and 8 in Fig. 1. We heuristically set a timeout to be 5
seconds and MoSSOT will abort the current test once it is triggered,
which can result in false negatives. Second, after fuzzing, the RP
server may recognize us as new users and respond with unexpected
messages upon the first login, e.g., requirements to enrich user
profile, so that Test Oracle may misunderstand the response.
5.3 Security Testing Results
According to the statistics in Table. 2, around 72.4% of the tested
apps are susceptible to at least one vulnerability due to their poor
implementations on either the client (Android app) or server side.
MoSSOT has detected 4 types of known vulnerabilities manually
identified by the previous work, i.e., Access Token Replacement [11,
46], Profile Vulnerability [49], Credential Disclosure [47], and App
Secret Disclosure [11, 47]. Moreover, our tool improves the accuracy
in detecting App Secret Disclosure by a hybrid method.
In addition to the known vulnerabilities, the tool discovered a
new variant of Access Token Replacement and Profile Vulnerability,
Augmented Token Replacement, as well as a previously-unknown
vulnerability on the IdP side. All the vulnerabilities may be exploited
by the attacker to log into the RP as the victim or even impersonate
as the benign RP to IdP for conducting privileged operations.
5.3.1 Discovery of Augmented Token Replacement Attack
Observations: Table. 2 shows that 41.8% and 51.6% of the tested
apps are vulnerable to Access Token Replacement Attack [11, 46]
and Profile Vulnerability [49]. The former one replaces the access
token from the IdP server, e.g., Step 6 in Fig. 1, and the other tampers
the appended user information. Nevertheless, the two vulnerabil-
ities are only feasible when no verifications of the token (access
token/ id token) exist on the RP server side, as the user information
from its client (e.g., Step 6 in Fig. 1) differs from the one from the
IdP server (e.g., Step 8 in Fig. 1). In our test, MoSSOT discovers a
variant of the two vulnerabilities that can bypass the checking and