title:Debugging the data plane with anteater
author:Haohui Mai and
Ahmed Khurshid and
Rachit Agarwal and
Matthew Caesar and
Brighten Godfrey and
Samuel Talmadge King
Debugging the Data Plane with Anteater
Haohui Mai
Matthew Caesar
Ahmed Khurshid
P. Brighten Godfrey
Rachit Agarwal
Samuel T. King
University of Illinois at Urbana-Champaign
{mai4, khurshi1, agarwa16, caesar, pbg, kingst}@illinois.edu
ABSTRACT
Diagnosing problems in networks is a time-consuming and
error-prone process. Existing tools to assist operators pri-
marily focus on analyzing control plane conﬁguration. Con-
ﬁguration analysis is limited in that it cannot ﬁnd bugs in
router software, and is harder to generalize across protocols
since it must model complex conﬁguration languages and
dynamic protocol behavior.
This paper studies an alternate approach: diagnosing prob-
lems through static analysis of the data plane. This ap-
proach can catch bugs that are invisible at the level of con-
ﬁguration ﬁles, and simpliﬁes uniﬁed analysis of a network
across many protocols and implementations. We present
Anteater, a tool for checking invariants in the data plane.
Anteater translates high-level network invariants into in-
stances of boolean satisﬁability problems (SAT), checks them
against network state using a SAT solver, and reports coun-
terexamples if violations have been found. Applied to a large
university network, Anteater revealed 23 bugs, including for-
warding loops and stale ACL rules, with only ﬁve false posi-
tives. Nine of these faults are being ﬁxed by campus network
operators.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network
Operation; D.2.5 [Software Engineering]: Testing and
Debugging
General Terms
Algorithms, Reliability
Keywords
Data Plane Analysis, Network Troubleshooting, Boolean Sat-
isﬁability
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
Copyright 2011 ACM 978-1-4503-0797-0/11/08 ...$10.00.
290
1.
INTRODUCTION
Modern enterprise networks are complex, incorporating
hundreds or thousands of network devices from multiple
vendors performing diverse codependent functions such as
routing, switching, and access control across physical and
virtual networks (VPNs and VLANs). As in any complex
computer system, enterprise networks are prone to a wide
range of errors [10, 11, 12, 14, 25, 32, 38, 41], such as miscon-
ﬁguration, software bugs, or unexpected interactions across
protocols. These errors can lead to oscillations, black holes,
faulty advertisements, or route leaks that ultimately cause
disconnectivity and security vulnerabilities.
However, diagnosing problems in networks remains a black
art. Operators often rely on heuristics — sending probes, re-
viewing logs, even observing mailing lists and making phone
calls — that slow response to failures.1 To address this, au-
tomated tools for network diagnostics [14, 43] analyze con-
ﬁguration ﬁles constructed by operators. While useful, these
tools have two limitations stemming from their analysis of
high-level conﬁguration ﬁles. First, conﬁguration analysis
cannot ﬁnd bugs in router software, which interprets and
acts on those conﬁguration ﬁles. Both commercial and open
source router software regularly exhibit bugs that aﬀect net-
work availability or security [41] and have led to multiple
high-proﬁle outages and vulnerabilities [11, 44]. Second,
conﬁguration analysis must model complex conﬁguration lan-
guages and dynamic protocol behavior in order to determine
the ultimate eﬀect of a conﬁguration. As a result, these tools
generally focus on checking correctness of a single protocol
such as BGP [14, 15] or ﬁrewalls [2, 43]. Such diagnosis will
be unable to reason about interactions that span multiple
protocols, and may have diﬃculty dealing with the diversity
in conﬁguration languages from diﬀerent vendors making up
typical networks.
We take a diﬀerent and complementary approach. Instead
of diagnosing problems in the control plane, our goal is to
diagnose problems as close as possible to the network’s ac-
tual behavior through formal analysis of data plane state.
Data plane analysis has two beneﬁts. First, by checking the
results of routing software rather than its inputs, we can
catch bugs that are invisible at the level of conﬁguration
1As one example, a Cisco design technote advises that “Un-
fortunately, there is no systematic procedure to troubleshoot
an STP issue. ... Administrators generally do not have time
to look for the cause of the loop and prefer to restore con-
nectivity as soon as possible. The easy way out in this case
is to manually disable every port that provides redundancy
in the network.
... Each time you disable a port, check to
see if you have restored connectivity in the network.” [10]
Routers!
VPN!
…!
Firewalls!
e"
n
ata  p la
D
I n f o r m ati o
n !
Global 
Graph!
Boolean!
Functions!
Constraint 
Graph!
Linking & 
Optimization!
SAT!
 Formulas!
SAT 
Solving!
LLVM IR!
Invariant!
Checking!
Diagnosis 
Report!
Figure 1: The work ﬂow of Anteater. Clouds are network devices. Ovals are stages in the work ﬂow. Text on the
edges shows the type of data ﬂowing between stages.
ﬁles. Second, it becomes easier to perform uniﬁed analysis
of a network across many protocols and implementations,
because data plane analysis avoids modeling dynamic rout-
ing protocols and operates on comparatively simple input
formats that are common across many protocols and imple-
mentations.
This paper describes the design, implementation, and eval-
uation of Anteater, a tool that analyzes the data plane state
of network devices. Anteater collects the network topol-
ogy and devices’ forwarding information bases (FIBs), and
represents them as boolean functions. The network opera-
tor speciﬁes an invariant to be checked against the network,
such as reachability, loop-free forwarding, or consistency of
forwarding rules between routers. Anteater combines the
invariant and the data plane state into instances of boolean
satisﬁability problem (SAT), and uses a SAT solver to per-
form analysis.
If the network state violates an invariant,
Anteater provides a speciﬁc counterexample — such as a
packet header, FIB entries, and path — that triggers the
potential bug.
We applied Anteater to a large university campus network,
analyzing the FIBs of 178 routers that support over 70,000
end-user machines and servers, with FIB entries inserted by
a combination of BGP, OSPF, and static ACLs and routes.
Anteater revealed 23 conﬁrmed bugs in the campus network,
including forwarding loops and stale ACL rules. Nine of
these faults are being ﬁxed by campus network operators.
For example, Anteater detected a forwarding loop between
a pair of routers that was unintentionally introduced after
a network upgrade and had been present in the network for
over a month. These results demonstrate the utility of the
approach of data plane analysis.
Our contributions are as follows:
• Anteater is the ﬁrst design and implementation of a
data plane analysis system used to ﬁnd real bugs in
real networks. We used Anteater to ﬁnd 23 bugs in
our campus network.
• We show how to express three key invariants as SAT
problems, and propose a novel algorithm for handling
packet transformations.
• We develop optimizations to our algorithms and im-
plementation to enable Anteater to check invariants
eﬃciently using a SAT solver, and demonstrate exper-
imentally that Anteater is suﬃciently scalable to be a
practical tool.
2. OVERVIEW OF ARCHITECTURE
Anteater’s primary goal is to detect and diagnose a broad,
general class of network problems. The system detects prob-
lems by analyzing the contents of forwarding tables con-
tained in routers, switches, ﬁrewalls, and other networking
equipment (Figure 1). Operators use Anteater to check
whether the network conforms to a set of invariants (i.e.,
correctness conditions regarding the network’s forwarding
behavior). Violations of these invariants usually indicate a
bug in the network. Here are a few examples of invariants:
• Loop-free forwarding. There should not exist any packet
that could be injected into the network that would
cause a forwarding loop.
• Connectivity. All computers in the campus network
are able to access both the intranet and the Internet,
while respecting network policies such as access control
lists.
• Consistency. The policies of two replicated routers
should have the same forwarding behavior. More con-
cretely, the possible set of packets that can reach the
external network through them are the same.
Anteater checks invariants through several steps. First,
Anteater collects the contents of FIBs from networking equip-
ment through vtys (terminals), SNMP, or control sessions
maintained to routers [13, 22]. These FIBs may be simple IP
longest preﬁx match rules, or more complex actions like ac-
cess control lists or modiﬁcations of the packet header [1, 21,
28]. Second, the operator creates new invariants or selects
from a menu of standard invariants to be checked against
the network. This is done via bindings in Ruby or in a
declarative language that we designed to streamline the ex-
pression of invariants. Third, Anteater translates both the
FIBs and invariants into instances of SAT, which are re-
solved by an oﬀ-the-shelf SAT solver. Finally, if the results
from the SAT solver indicate that the supplied invariants
are violated, Anteater will derive a counterexample to help
diagnosis.
The next section describes the design and implementa-
tion in more detail, including writing invariants, translating
the invariants and the network into instances of SAT, and
solving them eﬃciently.
3. ANTEATER DESIGN
A SAT problem evaluates a set of boolean formulas to
determine if there exists at least one variable assignment
such that all formulas evaluate to true. If such an assignment
291
Symbol Description
G
V
E
P
Network graph (V, E,P)
Vertices (e.g., devices) in G
Directed edges in G
Policy function for edges
Figure 2: Notation used in Section 3.
exists, then the set of formulas are satisﬁable; otherwise they
are unsatisﬁable.
SAT is an NP-complete problem. Specialized tools called
SAT solvers, however, use heuristics to solve SAT eﬃciently
in some cases [8]. Engineers use SAT solvers in a number of
diﬀerent problem domains, including model checking, hard-
ware veriﬁcation, and program analysis. Please see §7 for
more details.
Network reachability can, in the general case, also be NP-
complete (see Appendix). We cast network reachability and
other network invariants as SAT problems. In this section we
discuss our model for network policies, and our algorithms
for detecting bugs using sets of boolean formulas and a SAT
solver.
Anteater uses an existing theoretical algorithm for check-
ing reachability [39], and we use this reachability algorithm
to design our own algorithms for detecting forwarding loops,
detecting packet loss (i.e., “black holes”), and checking for-
warding consistency between routers. Also, we present a
novel algorithm for handling arbitrary packet transforma-
tions.
3.1 Modeling network behavior
Figure 2 shows our notation. A network G is a 3-tuple
G = (V, E,P), where V is the set of networking devices and
possible destinations, E is the set of directed edges repre-
senting connections between vertices. P is a function deﬁned
on E to represent general policies.
Since many of the formulas we discuss deal with IP preﬁx
matching, we introduce the notation var =width pref ix to
simplify our discussion. This notation is a convenient way
of writing a boolean formula saying that the ﬁrst width bits
of the variable var are the same as those of pref ix. For
example, dst ip =24 10.1.3.0 is a boolean formula testing
the equality between the ﬁrst 24 bits of dst ip and 10.1.3.0.
The notion var =width pref ix is the negation of var =width
pref ix.
For each edge (u, v), we deﬁne P(u, v) as the policy for
packets traveling from u to v, represented as a boolean for-
mula over a symbolic packet. A symbolic packet is a set of
variables representing the values of ﬁelds in packets, like the
MAC address, IP address, and port number. A packet can
ﬂow over an edge if and only if it satisﬁes the corresponding
boolean formulas. We use this function to represent general
policies including forwarding, packet ﬁltering, and transfor-
mations of the packet. P(u, v) is the conjunction (logical
and) over all policies’ constraints on symbolic packets from
node u to node v.
P(u, v) can be used to represent a ﬁlter. For example, in
Figure 3 the ﬁltering rule on edge (B, C) blocks all pack-
ets destined to 10.1.3.128/25; thus, P(B, C) has dst ip =25
10.1.3.128 as a part of it. Forwarding is represented as a
constraint as well: P(u, v) will be constrained to include
only those symbolic packets that router u would forward to
A!
C!
B!
C:!
10.1.1.0/24 -> B!
10.1.2.0/24 -> B!
10.1.3.0/24 -> DIRECT!
A:!
10.1.1.0/24 -> DIRECT!
10.1.2.0/24 -> B!
10.1.3.0/24 -> B!
B:!
10.1.1.0/24 -> A!
10.1.2.0/24 -> DIRECT!
10.1.3.0/24 -> C!
B->C:!
10.1.3.128/25 -> DROP!
A!
a!
10.1.1.0/24!
B!
b!
10.1.2.0/24!
C!
c!
10.1.3.0/24!
P(A, a) = dst ip =24 10.1.1.0
P(A, B) = dst ip =24 10.1.2.0 ∨ dst ip =24 10.1.3.0
P(B, A) = dst ip =24 10.1.1.0
P(B, b) = dst ip =24 10.1.2.0