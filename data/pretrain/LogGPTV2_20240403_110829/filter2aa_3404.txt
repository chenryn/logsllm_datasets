### VMware Carbon Black Workload 安全分析与漏洞挖掘

#### 1. 环境准备
- **导入 OVA 文件**：将下载的 VMware Carbon Black Workload (CB Workload) OVA 文件直接导入 VMware。
- **SSH 配置**：修改 SSH 配置文件以允许 root 登录。工作目录为 `/opt/vmware`，配置和启动文件也位于该目录。
- **远程调试**：对三个 Spring Boot JAR 包进行远程调试配置。

#### 2. 工作目录及配置
- **打包工作目录**：使用 `tar czvf test.tar.gz *` 命令将工作目录打包。
- **处理 FatJar**：由于 JAR 包是 FatJar，需要对其进行修改并添加到库中。
- **启动脚本**：在 `Run.sh` 启动脚本中添加必要的启动参数。

#### 3. 项目配置
- **IDEA 项目配置**：根据上述步骤配置 IDEA 项目。

#### 4. 漏洞挖掘及复现
- **端口和服务检查**：首先检查虚拟机默认安装后开启的端口和服务。
- **Envoy 代理**：Envoy 是专为大型现代 SOA 架构设计的 L7 代理和通信总线。查看其配置文件以了解详细信息。

#### 5. Java 进程检查
- **Java 进程**：结合查看 Java 进程，进一步了解系统架构。

#### 6. 漏洞通告
- **官方通告**：参考官方通告 [VMSA-2021-0005](https://www.vmware.com/security/advisories/VMSA-2021-0005.html)，该通告描述了一个身份绕过漏洞。

#### 7. 代码分析
- **代码结构**：项目使用 Spring Boot，并结合 Spring Security 和 JWT 进行身份校验。每个项目都有一个 `SecurityConfiguration` 类。
- **版本对比**：官方通告指出 1.0.2 版本修复了该漏洞。下载并安装 1.0.2 版本，将其工作目录导出并与旧版本进行 diff 对比。

#### 8. 漏洞定位
- **Diff 分析**：通过 diff 对比，最终定位到问题所在。
- **请求处理类**：通过关键字搜索或反编译找到请求处理类。也可以在调试时获取所有请求 URL 的处理类。
- **关键类**：最终找到 `com.vmware.cwp.appliance.acs.api.controller.TokenGeneratorApi` 类。

#### 9. 漏洞验证
- **本地测试**：使用 `curl http://localhost:3010/acs/api/v1/service-token/apw` 本机访问成功获取 token。
- **安全配置**：查看 `com.vmware.cwp.appliance.acs.security.config.SecurityConfiguration`，确认配置了白名单放行。

#### 10. SSRF 漏洞
- **SSRF 发现**：发现一个不能 30X 跳转的 SSRF 漏洞。
- **跳转逻辑**：当 URL 存在临时（302）或永久（301）跳转时，继续请求跳转后的 URL。
- **SSRF 利用**：通过 HTTP(S) 链接 302 跳转到任意想要访问的地址。
- **关键方法**：进入 `com.vmware.cwp.appliance.acs.delegate.impl.VCReqValidatorController#validate` 方法进行逻辑验证。

#### 11. Envoy 通信
- **通信抓取**：尝试抓取 Envoy 与本机服务的通信，但未发现明显问题。
- **相关类**：
  - `com.vmware.cwp.appliance.applianceworker.configuration.SecurityConfiguration`
  - `com.vmware.cwp.appliance.applianceworker.api.EnvoyXDSController`

#### 12. 总结
- **架构总结**：对整个系统的架构进行了总结。
- **URL 编码**：最终通过 URL 编码解决了问题。

感谢阅读！

---

希望这个优化后的文本能够更清晰、连贯和专业地传达所需信息。如果有任何进一步的需求或修改，请随时告知。