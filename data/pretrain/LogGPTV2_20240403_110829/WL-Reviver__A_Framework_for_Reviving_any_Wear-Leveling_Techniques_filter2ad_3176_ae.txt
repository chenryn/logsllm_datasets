

Ĩ
Ž
Ğ
Ő
Ă
ƚ
Ŷ
Ğ
Đ
ƌ
Ğ
W
&ZƉͲϬй
&ZƉͲϱй
&ZƉͲϭϬй
&ZƉͲϭϱй
t>ͲZĞǀŝǀĞƌ
ϭϬϬ ϮϬϬ ϯϬϬ ϰϬϬ ϱϬϬ ϲϬϬ ϳϬϬ ϴϬϬ ϵϬϬ
EƵŵďĞƌŽĨtƌŝƚĞƐ;dƌŝůůŝŽŶƐͿ
;ĂͿ
ϭϬϬ ϮϬϬ ϯϬϬ ϰϬϬ ϱϬϬ ϲϬϬ ϳϬϬ ϴϬϬ ϵϬϬ
EƵŵďĞƌŽĨtƌŝƚĞƐ;dƌŝůůŝŽŶƐͿ
;ďͿ
Figure 7. Percentage of user-usable memory blocks after certain numbers
of writes from benchmarks (a) ocean and (b) mg under WL-Reviver and
FREE-p with different percentages of pre-reserved space. In all experiments
ECP6 and Start-Gap are used.
one, are more effective to postpone occurrence of the ﬁrst
failure for writes with a highly uniform distribution (see
benchmark ocean in Figure 7 (a), larger pre-reservations,
such as the 15% one, are more effective for writes with a
biased distribution (see benchmark mg in Figure 7 (b)). Pre-
reservation has two conﬂicting effects. It provides free slots
to hide failed blocks. In the meantime, it reduces the space
for accommodating writes and causes more failed blocks.
For writes of highly biased distribution (such as mg), a larger
number of failures can occur, demanding larger pre-reserved
space. For writes of more uniform distribution, it is more
beneﬁcial to keep un-reserved space larger to reduce failures.
In contrast, WL-Reviver consistently provides signiﬁcantly
more usable blocks. In particular, it makes 100% of the PCM
space usable before the ﬁrst failure.
D. Comparison to LLS on Efﬁciency

ů
Ɛ
Ŭ
Đ
Ž

Ğ
ď
Ă
Ɛ
h
ů


Ĩ
Ž
Ğ
Ő
Ă
ƚ
Ŷ
Ğ
Đ
ƌ
Ğ
W
ϭϬϬй
ϵϱй
ϵϬй
ϴϱй
ϴϬй
ϳϱй
ϳϬй
Ϭ
ϭϬϬ
>>^ͲŵŐ
t>ZĞǀŝǀĞƌͲŵŐ
>>^ͲŽĐĞĂŶ
t>ZĞǀŝǀĞƌͲŽĐĞĂŶ
ϯϬϬ
ϮϬϬ
ϳϬϬ
EƵŵďĞƌŽĨtƌŝƚĞƐ;dƌŝůůŝŽŶƐͿ
ϲϬϬ
ϰϬϬ
ϱϬϬ
ϴϬϬ
ϵϬϬ
Failure
Ratio
10%
20%
30%
WL-Revival
Name
LLS
LLS
LLS
WL-Revival
WL-Revival
Avg. Access Time
mg
1.001
1.001
1.001
1.003
1.001
1.004
ocean
1.005
1.004
1.011
1.009
1.020
1.013
ocean
Software-Usable Space(%)
mg
84
89
73
79
62
68
85
89
73
79
63
69
Table II
AVERAGE PCM ACCESS TIME FOR ONE SOFTWARE-ISSUED REQUEST
AND PERCENTAGE OF PCM CAPACITY AVAILABLE FOR SOFTWARE TO
USE WHEN DIFFERENT PERCENTAGES OF PCM SPACE FAIL. THE
ACCESS TIME IS MEASURED IN NUMBER OF PCM ACCESSES.
As LLS also allows a wear leveling scheme to continue
functioning in the face of block failure, in this section we
compare WL-Reviver with LLS on how failures in PCM
memory would impact the system from the perspective of
software, or users of PCM. Figure 8 shows the rate at
which software-usable PCM space reduces with ongoing
writes. As shown in the ﬁgure, though LLS can prevent the
precipitous loss of usable space, number of writes the PCM
can sustain under LLS is much fewer than that for WL-
Reviver. The more uniform write distribution of ocean barely
helps in this aspect. The major reason is on its modiﬁcation
of address randomization method, which is a component
of the PA-DA mapping function adopted in Start-Gap. To
eliminate spatial correlation, or spread heavily written blocks
uniformly across the PCM space, Start-Gap randomly maps
a PA to an intermediate PA. To adapt Start-Gap into the
LLS’s framework, LLS has to restrict the randomization
mapping between the ﬁrst (or second) half of PA addresses
and the second (or ﬁrst, respectively) half of randomized
PAs. This imposed restriction keeps concentrated writes in
a region from being fully spread, which makes mapped
blocks easier to be worn as data migration causes frequently
updated data to migrate into the blocks. Without the need
of adapting Start-Gap, WL-Reviver fully keeps its random-
ization mapping and achieves signiﬁcantly longer lifetime.
Because there could be one indirection in the access of
data on a failed block, WL-Reviver uses two PCM accesses
for such an access, one to the failed block and another to its
shadow block. However, LLS may need three PCM accesses
for data on a failed block, which are to the failed block, a
bitmap for calculating location of backup block (equivalent
to shadow block in WL-Reviver), and the backup block.
Therefore, WL-Reviver has a smaller average access time
than LLS. In the LLS paper [12] LLS has an option of using
a cache to remove the extra PCM accesses. To be a fair
comparison, we conﬁgure a 32KB cache for both LLS and
WL-reviver, a cache size in a proportion of the PCM capacity
suggested in the LLS paper. As shown in Table II, because of
very high cache hit ratio both LLS and WL-Reviver achieve
the almost optimal average access time, which is one PCM
access for each software-issued PCM access request. Table II
Figure 8. Reduction of software-usable space with ongoing writes. In the
experiments ECP6 and Start-Gap are used.
238238238
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:52 UTC from IEEE Xplore.  Restrictions apply. 
also shows the space available to the software when a certain
percentage of blocks fail. As shown, WL-Reviver makes
almost all of the un-failed blocks usable to the software.
However, LLS consistently has smaller amount of software-
usable space than WL-Reviver because of its less ﬂexible
and less inefﬁcient use of reserved space, as explained in
Section II.
V. CONCLUSION
We propose the design of WL-Reviver, a framework that
revives any PCM wear-leveling scheme currently ceasing to
work once the ﬁrst failed block appears. Considering that
a wear-leveling mechanism is an indispensable component
that has to be continuously functioning in any PCM device,
WL-Reviver hides failed blocks with shadow blocks in
an efﬁcient manner so the mechanism is always available.
Recognizing wear leveling on PCM is a critical issue and
more optimized schemes addressing the issue would be
proposed, we design WL-Reviver as a framework with-
out requiring any adaptations of the schemes. Meanwhile,
relying on modiﬁcations of OS to enable wear leveling
can become a barrier for widespread adoption of the PCM
technique. Accordingly, WL-Reviver is designed to require
no additional OS supports by leveraging a well accepted
practice, which is that the OS does not access a page once it
is notiﬁed of an access failure on the page. By guaranteeing
that any access of failed block can be served with only one
indirection, WL-Reviver makes PCM’s average access time
minimally deteriorated even with substantial failures.
VI. ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their
comments and suggestions. This work is supported by the
National Natural Science Foundation of China (Grant No.
61232003, 61327902, 60925006), the National High Tech-
nology Research and Development Program of China (Grant
No. 2013AA013201), Shanghai Key Laboratory of Scalable
Computing and Systems, Tsinghua-Tencent Joint Laboratory
for Internet Innovation Technology, Huawei Technologies
Co. Ltd., and Tsinghua University Initiative Scientiﬁc Re-
search Program.
REFERENCES
Memory
Phase
In
Package with
of
Devices.
Availability
Mobile
Announces
for
[1] Micron
Change
http://investors.micron.com/releasedetail.cfm?ReleaseID=692563,
July, 2012.
[2] Samsung
Multi-chip
In
http://www.samsung.com/us/aboutsamsung/news/newsIrRead.do?
news ctgry=irnewsrelease&news seq=18828 April, 2010.
[3] Technology Brief: Avoiding Server Downtime from Hardware
Errors in System Memory with HP Memory Quarantine. In
http://h20000.www2.hp.com/bc/docs/support/SupportManual/
c03179047/c03179047.pdf
First
for Handsets.
PRAM Chip
Ships
a
Industry’s
[4] Pin - A Dynamic Binary Instrumentation Tool.
http://software.intel.com/en-us/articles/pin-a-dynamic-
binary-instrumentation-tool
[5] The
PARSEC
Benchmark
http://parsec.cs.princeton.edu/parsec3-doc.htm
[6] NAS
Parallel
Benchmarks
http://www.nas.nasa.gov/publications/npb.html
[7] SPLASH-2
Benchmarks
http://www.capsl.udel.edu/splash/
In
In
In
In
Suite.
(NPB).
Suite.
[8] R. Azevedo, J. D. Davis, K. Strauss, and P. Gopalan, M.
Manasse, and S. Yekhanin. “Zombie Memory: Extending
Memory Lifetime by Reviving Dead Blocks”, In ISCA, June
2013.
[9] J. Condit, E. Nightingale, C. Frost, E. Ipek, D. Burger, B.
Lee, and D. Coetzee. “Better I/O Through Byte-Addressable,
Persistent Memory”, In SOSP,October 2009.
[10] Emerging research devices. In ITRS, 2011.
[11] E. Ipek, J. Condit, E. B. Nightingale, D. Burger, and T. Mosci-
broda. “Dynamically Replicated Memory: Building Reliable
Systems from Nanoscale Resistive Memories”, In ASPLOS,
2010.
[12] L. Jiang, Y. Du, B. Zhao, Y. Zhang, B.R. Childers, and J.
Yang,“ Hardware-Assisted Cooperative Integration of Wear-
Leveling and Salvaging for Phase Change Memory,” In ACM
Transactions on Architecture and Code Optimization, Vol. 10
Issue 2, 2013.
[13] K. Kim. “Technology for sub-50nm DRAM and NAND ﬂash
manufacturing”, In International Electron Devices Meeting,
2005.
[14] B. Lee, E. Ipek, O. Mutlu, and D. Burger. “Architecting
Phase-Change Memory as a Scalable DRAM Alternative”,
In ISCA, June 2009.
[15] R. Melhem, R, R. Maddah, and S. Cho. “RDIS: A Recursively
Deﬁned Invertible Set Scheme to Tolerate Multiple Stuck-At
Faults in Resistive Memory”, In DSN, June 2012.
[16] M. K. Qureshi, J. Karidis, M. Fraceschini, V. Srinivasan, L.
Lastras, and B. Abali. “Enhancing Lifetime and Security of
Phase Change Memories via Start-Gap Wear Leveling”, In
MICRO, 2009.
[17] M. K. Qureshi, V. Srinivasan, and J. A. Rivers. “Scalable
high performance main memory system using phase-change
memory technology”. In ISCA, 2009.
[18] M. K. Qureshi. “Pay-As-You-Go: Low-Overhead Hard-Error
Correction for Phase Change Memories”, In MICRO, Decem-
ber, 2011.
[19] A. Seznec. “A Phase Change Memory as a Secure Main
Memory”, In IEEE Computer Architecture Letters, Vol. 9,
Issue 1, 2010.
[20] S. Schechter, G. Loh, K. Strauss, and D. Burger. “Use ECP,
not ECC, for Hard Failures in Resistive Memories”, In ISCA,
June 2010.
[21] N. H. Seong, D. H. Woo, V. Srinivasan, J. A. Rivers, and H. S.
Lee. “SAFER: Stuck-At-Fault Error Recovery for Memories”,
In MICRO, 2010.
[22] N. H. Seong, D. H. Woo, and H.-H. S. Lee. “Security
Refresh: Prevent Malicious Wear-out and Increase Durability
for Phase-Change Memory with Dynamically Randomized
Address Mapping”, In ISCA, 2010.
[23] D. H. Yoon, N. Muralimanohar, J. Chang, P. Ranganathan,
N. P. Jouppi, and M. Erez, “FREE-p: Protecting Non-volatile
Memory against both Hard and Soft Errors.” In HPCA, 2011.
[24] P. Zhou, B. Zhao, J. Yang, and Y. Zhang. “A Durable and
Energy Efﬁcient Main Memory Using Phase Change Memory
Technology”, In ISCA, 2009.
[25] W. Zhang, and T. Li. “Characterizing and mitigating the
impact of process variations on phase change based memory
systems.” In MICRO, 2009.
239239239
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:52 UTC from IEEE Xplore.  Restrictions apply.