### 优化后的文本

#### 6.99 注意事项
在图3中为Meas指定的保护顺序适用于Meas中的所有节点。然而，如第6.4节所述，如果对不同风险级别的节点使用不同的保护顺序，则所描绘的图表将标记实际内存开销的边界情况。例如，如果低级树节点不使用掩码（即具有第一阶DPA安全性），而所有其他节点使用第一阶掩码（即具有第二阶DPA安全性），则实际内存开销分别由具有第一阶和第二阶保护的图表的下限和上限来确定。

对于1024位数据块和128位安全性的Meas，在不同保护顺序和分支因子下的内存开销如图4所示。通过分析发现，内存开销受到树的分支因子的强烈影响，从而得出两个主要观察结果：首先，较高的分支因子明显降低了内存开销，但对于超过八的分支因子，进一步增加分支因子所带来的减少变得很小；其次，内存开销随着保护顺序线性增长，但这种增长在树的分支因子较低时更为显著。这是因为每个树节点都选择了并存储了用于明文随机化的掩码。因此，更高的分支因子导致更多明文块共享一个树节点中的掩码，从而由于掩码而导致的内存开销降低。

#### 7.5 随机性
Meas消耗了大量的随机性。特别地，每当执行写操作时，必须为从根到叶子的所有节点选择新的随机密钥和掩码。对于保护顺序为d的Meas，每次写操作需要(skey + (d - 1) · smask) · (l + 1)个随机比特，其中l是树的高度。然而，如果不考虑侧信道攻击，Merkle树、PATs和TEC树的实现不需要任何随机值，只要所有nonce都是计数器。然而，保护PATs和TEC树免受侧信道攻击的密码实现也需要大量的随机性。具体来说，保护顺序为d的实现将其状态分成(d + 1)个份额，这要求每次密码调用至少d · sstate个随机比特，这对于读写操作中的所有访问节点都是必要的。

#### 8. 结论
在攻击者能够物理接触的恶劣环境中存储和处理数据时，认证和加密内存是一个必要条件。因此，考虑针对涉及的密码原语的侧信道攻击的威胁是自然而然的下一步。在这项工作中，我们介绍了Meas，这是第一个针对DPA攻击安全的内存加密和认证方案。该方案不需要任何DPA保护的原语，允许其在商用系统中使用。此外，Meas提供了快速的随机访问，并且可以应用于各种用例，包括RAM和磁盘加密。

该方案结合了新鲜重密钥与认证树的概念，通过将涉及的密钥存储在加密的树结构中来防止第一阶DPA。如果需要，可以通过掩码明文值灵活地扩展Meas的保护以应对更高阶的DPA。与其他现有方案相比，Meas仅通过设计提供DPA保护，同时保持大致相同的内存开销和性能。这明显优于现有的内存认证和加密技术，这些技术在进行DPA保护时会面临不切实际的实现和运行时开销。

#### 致谢
这项研究得到了欧洲研究理事会（ERC）在欧盟“地平线2020”研究与创新计划（资助协议编号681402）的支持。此外，本工作还得到了奥地利研究促进局（FFG）的资助（资助编号845579, MEMSEC）。

#### 参考文献
[略]

#### 附录 A. 认证树
在下面的描述中，我们将介绍三种著名的认证树示例，分别是Merkle树 [30]、可并行认证树 [18]（PAT）和防篡改计数器 [11]（TEC）树。请注意，还有混合变体，如Bonsai Merkle树 [39]，它们结合了Merkle树和PAT的特点。描述假设二叉树，运算符||表示连接。

##### A.1 Merkle树 [30]
Merkle树使用哈希函数H对每个m个内存块pi进行哈希：
\[ h_{l,i} = H(p_i) \quad 0 \le i \le m-1 \]
这些哈希值\( h_{l,i} \)在树结构中递归地组合在一起，根哈希\( h_{0,0} \)存放在安全芯片上：
\[ h_{j,i} = H(h_{j+1,2i} || h_{j+1,2i+1}) \quad 0 \le i \le 2^{l-j}-1, \quad 0 \le j \le l-1 \]

##### A.2 可并行认证树 [18]
PAT使用基于nonce的MAC和密钥k对每个m个数据块pi进行认证，生成标签\( t_{l,i} \)：
\[ t_{l,i} = MAC(k; n_{l,i}; p_i) \quad 0 \le i \le m-1 \]
非ces \( n_{l,i} \)在树结构中递归地进行认证，再次使用基于nonce的MAC。虽然密钥k和根nonce \( n_{0,0} \)必须存放在安全芯片上，但所有其他nonce和标签都可以公开存储在片外内存中：
\[ t_{j,i} = MAC(k; n_{j,i}; n_{j+1,2i} || n_{j+1,2i+1}) \quad 0 \le i \le 2^{l-j}-1, \quad 0 \le j \le l-1 \]

##### A.3 防篡改计数器树 [11]
虽然Merkle树和PAT提供了内存真实性，但TEC树还提供了内存保密性。为此，TEC树使用附加冗余显式认证 [13]（AREA）代码。每个明文内存块pi被填充了一个nonce \( n_{l,i} \)，然后使用密钥k通过常见的块密码进行加密：
\[ c_{l,i} = E(k; p_i || n_{l,i}) \quad 0 \le i \le m-1 \]
为了验证，密文\( c_{l,i} \)被解密成\( p'_{l,i} \)和\( n'_{l,i} \)，并与原始nonce \( n_{l,i} \)进行比较。通过这种方式，块密码的扩散确保了真实性，使得对手难以修改加密的nonce \( n_{l,i} \)。Nonce \( n_{l,i} \)由内存块地址和计数器\( ctr_{l,i} \) [11]组成。计数器在树结构中递归地进行认证。密钥k和根计数器\( ctr_{0,0} \)存放在安全芯片上：
\[ c_{j,i} = E(k; ctr_{j+1,2i} || ctr_{j+1,2i+1} || n_{j,i}) \quad 0 \le i \le 2^{l-j}-1, \quad 0 \le j \le l-1 \]