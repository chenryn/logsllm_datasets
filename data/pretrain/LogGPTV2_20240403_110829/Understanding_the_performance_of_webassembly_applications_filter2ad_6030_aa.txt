title:Understanding the performance of webassembly applications
author:Yutian Yan and
Tengfei Tu and
Lijian Zhao and
Yuchen Zhou and
Weihang Wang
Understanding the Performance of WebAssembly Applications
Yutian Yan1, Tengfei Tu2, Lijian Zhao2, Yuchen Zhou2, Weihang Wang1
1University at Buffalo, SUNY
2Beijing University of Posts and Telecommunications
{yutianya, weihangw}@buffalo.edu
{tutengfei.kevin, zhaolj, zhouyuchen7350}@bupt.edu.cn
ABSTRACT
WebAssembly is the newest language to arrive on the web. It
features a compact binary format, making it fast to be loaded and de-
coded. While WebAssembly is generally expected to be faster than
JavaScript, there have been mixed results in proving which code is
faster. Little research has been done to comprehend WebAssembly’s
performance benefit. In this paper, we conduct a systematic study
to understand the performance of WebAssembly applications and
compare it with JavaScript. Our measurements were performed on
three sets of subject programs with diverse settings. Among others,
our findings include: (1) WebAssembly compilers are commonly
built atop LLVM, where their optimizations are not tailored for
WebAssembly. We show that these optimizations often become in-
effective for WebAssembly, leading to counter-intuitive results. (2)
JIT optimization has a significant impact on JavaScript performance.
However, no substantial performance increase was observed for
WebAssembly with JIT. (3) The performance of WebAssembly and
JavaScript varies substantially depending on the execution envi-
ronment. (4) WebAssembly uses significantly more memory than
its JavaScript counterparts. We hope that our findings can help
WebAssembly tooling developers identify optimization opportuni-
ties. We also report the challenges encountered when compiling C
benchmarks to WebAssembly and discuss our solutions.
CCS CONCEPTS
• Networks→ Network measurement; • Information systems
→ Web applications.
KEYWORDS
WebAssembly, web page performance, browser performance, just-
in-time compilation
ACM Reference Format:
Yutian Yan1, Tengfei Tu2, Lijian Zhao2, Yuchen Zhou2, Weihang Wang1.
2021. Understanding the Performance of WebAssembly Applications. In
ACM Internet Measurement Conference (IMC ’21), November 2–4, 2021, Virtual
Event, USA. ACM, New York, NY, USA, 17 pages. https://doi.org/10.1145/
3487552.3487827
1 INTRODUCTION
WebAssembly (abbreviated Wasm) is a low-level, portable, byte-
code format for the web that aims to speed up web applications [30].
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’21, November 2–4, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-9129-0/21/11...$15.00
https://doi.org/10.1145/3487552.3487827
533
Recently, leading companies, such as eBay, Google, and Norton, are
adopting WebAssembly in various projects to improve performance
of their services that are typically written in JavaScript. To name a
few, barcode readers [74], pattern matching [47], and TensorFlow.js
machine learning applications [84] are the examples.
Before WebAssembly, JavaScript was the de facto standard client-
side web scripting language for over 20 years [17]. While being
prevalent and flexible to create powerful user interfaces, the per-
formance of JavaScript is often considered a major limitation in
practice. WebAssembly is designed to provide a better performance,
aiming to unleash the potential of web applications. It differs sig-
nificantly from JavaScript in two aspects. First, WebAssembly pro-
grams are delivered as compiled binaries that can be loaded and
decoded faster than JavaScript programs which have to be parsed
and compiled at runtime. Second, unlike JavaScript programs that
are manually written by developers, WebAssembly programs are
usually created by using compilers that compile existing programs
in high-level programming languages, such as C/C++ and Rust, to
the WebAssembly bytecode.
While WebAssembly is generally expected to be faster than
JavaScript, there have been mixed results in practice [7, 12, 88].
For example, developers at eBay used WebAssembly to implement
a barcode scanner, which boosted the performance of the JavaScript
implementation by 50 times [74]. On the other hand, Samsung en-
gineers observed that WebAssembly is slower than JavaScript on
the Samsung Internet browser (v7.2.10.12) when performing multi-
plications on matrices of certain sizes [9].
The performance of WebAssembly programs is compiler- and
environment-dependent. First, compilers that are used to generate
WebAssembly programs can affect the performance, especially the
compilers’ optimization algorithms. For example, a WebAssembly
program generated by a Rust compiler with the faster speed opti-
mization option can run 20% faster than the same program compiled
with the smaller code size optimization [73]. Second, the runtime
environment, which includes web browsers and desktop/mobile
platforms, also plays an important role. Benchmark results of a
game emulator on different browsers showed that the performance
advantage of WebAssembly over JavaScript is significant on Firefox
(WebAssembly is 11.71x faster than JavaScript) but marginal on
Chrome (1.67x faster) [87].
This paper conducts a systematic study to understand the per-
formance of WebAssembly applications. We investigate the various
factors that impact WebAssembly performance and compare it
with JavaScript. We perform measurements on three sets of sub-
ject programs: (1) 41 WebAssembly binaries and 41 JavaScript pro-
grams compiled from 41 widely-used C benchmarks, (2) 9 compiler-
generated WebAssembly binaries and 9 manually-written JavaScript
programs, and (3) 3 real-world applications having implementa-
tions in both WebAssembly and JavaScript. These programs were
IMC ’21, November 2–4, 2021, Virtual Event, USA
Y. Yan et al.
tested with diverse compiler optimizations and program inputs in
various execution environments. Our findings include:
1. WebAssembly compilers are commonly built on top of existing
compilers (e.g., LLVM) where their optimization techniques
were not designed for WebAssembly. Our study shows that the
optimizations are often ineffective for WebAssembly, leading
to counter-intuitive results.
2. JIT optimization has a significant impact on JavaScript per-
formance. However, we observed that there was no substan-
tial performance increase for WebAssembly with JIT on both
Chrome and Firefox.
3. We observe that the runtime performance of WebAssembly on
Chrome, Firefox, and Edge browsers varies between desktop or
mobile platforms. Specifically, Firefox has better performance
(spends 0.61x time to run) in executing WebAssembly than
Chrome on desktop computers while Edge performs worse
(spends 1.28x time). Firefox takes 1.48x time to run compared to
Chrome on mobile devices, but mobile Edge outperforms (takes
0.83x time) mobile Chrome. JavaScript also has significantly
different performances on different platforms. Compared to
Chrome, Firefox needs 1.06x time to execute on desktop but
only needs 0.67x time to run on mobile. Edge spends 1.40x time
to execute on desktop but needs 0.81x time to run on mobile
compared to Chrome.
4. WebAssembly uses significantly more memory than JavaScript
on Chrome, Firefox, and Edge. This is because JavaScript uses
garbage collection that dynamically monitors memory alloca-
tions to determine when to reclaim memory that is no longer
in use, while WebAssembly employs a linear memory model
which does not reclaim memory automatically.
Our findings provide a deeper understanding of the contributing
factors of the performance difference between WebAssembly and
JavaScript. We hope that our analysis results can help WebAssem-
bly tooling developers, including compiler developers and virtual
machine developers, in identifying opportunities for improving
runtime speed and reducing memory usage.
bly and JavaScript performance in practice.
bAssembly and JavaScript in diverse settings.
In summary, this paper makes the following contributions:
• We conduct a systematic performance comparison of We-
• We analyze the contributing factors that influence WebAssem-
• We report the challenges we encountered during the compi-
• Our experiments show counter-intuitive results. We believe
that our findings can help developers better understand
when WebAssembly outperforms JavaScript and uncover
opportunities in adopting WebAssembly.
• We make our data publicly available [2].
lation and discuss our solution.
2 BACKGROUND
In this section, we present technical backgrounds relevant to our
experiments. In particular, we focus on various factors affecting the
performance of WebAssembly applications.
534
2.1 WebAssembly Compilers
Typically, WebAssembly programs are generated from source
code written in high-level languages (e.g., C/C++ and Rust) using a
WebAssembly compiler, such as Cheerp [86] or Emscripten [15]. As
a result, the WebAssembly compiler and compilation options have
a significant impact on the performance of generated WebAssembly
programs.
2.1.1 C-to-WebAssembly Compilers. A core use case for WebAssem-
bly is to port the existing ecosystem of C programs and allow them
to be used on the web [29, 40]. Thus, in this paper, we focus on
compiling C source programs to WebAssembly.
There are two C-to-WebAssembly compilers, Emscripten and
Cheerp. Both of them can generate WebAssembly programs by us-
ing LLVM’s backend stage [15, 86], and they offer varying levels of
support for C libraries. However, their support for compiling C to
JavaScript is very different: Cheerp supports standard JavaScript as a
target; Emscripten does not produce standard Java-Script, but gener-
ates asm.js [5], an optimizable, low-level subset of JavaScript which
was designed to allow C programs to be run as web applications
with performance considerably better than standard JavaScript. As
a precursor technology to WebAssembly, asm.js is also supposed to
be created using compilers instead of manually written.
One important goal of this paper is to help developers solve
the dilemma of choosing between JavaScript and WebAssembly
for developing or porting a web application. For this purpose, we
use Cheerp to compare the performance between WebAssembly
and JavaScript (by creating WebAssembly and standard JavaScript
from the same set of C benchmark programs). Additionally, to
measure compilers’ impact, we use both Emscripten and Cheerp to
create WebAssembly (from the same C programs) and compare the
performance differences (see Section 4.2.2).
2.1.2 Compiler Optimization Levels. C-to-WebAssembly compilers
allow developers to specify optimization levels from command line
options to determine how aggressive the target programs should
be optimized.
Figure 1: Compiler optimization options.
Fig. 1 illustrates the optimization levels supported by Emscripten
and Cheerp with respect to the runtime performance (x-axis) and
the code size (y-axis) of the compiled code. We describe the details
of each optimization level below.
• -O1: applies basic optimizations. An example of optimiza-
tions applied at this level includes the pass (pass is the basic
unit of LLVM-based compiler’s optimization) -globalopt,
which removes global variables that are never read.
• -O2: is an optimization level that balances the running time,
code size and compilation time of produced code. We use
Runtime Performance Code Size-Ofast-O2-O1SlowFastLargeSmall-O3/-O4-Oz-OsLegend-OxBaseline (Moderate)-OxConservative-OxAggressive-OxNot includedUnderstanding the Performance of WebAssembly Applications
IMC ’21, November 2–4, 2021, Virtual Event, USA
-O2 as the baseline for most experiments (Sec. 4.3, Sec. 4.4,
Sec. 4.5, and Sec. 4.6) in this study. An example pass applied
at this level is -vectorize-loops, which reduces the loop
frequency but increases the code size. This pass may reduce
execution time as the loop structures are run less frequently.
• -O3/-O4: contains all optimizations in -O2, and enables op-
timizations that need more time to compile, or increase code
size to reduce code running time. For Emscripten, -O4 is a
unique level and contains more optimization passes than
-O3. For Cheerp, -O3 and -O4 are identical. An example pass
applied in -O3 is -argpromotion. The compiler will pass
the value of an internal function argument into the function
instead of the address of the value if the compiler can prove
that this argument is only read but not written [10].
• -Ofast: aims for generating the fastest code. Besides opti-
mizations in -O2, more aggressive optimizations such as inac-
curate math calculations are used to further reduce execution
time [85]. An example pass applied is -fno-signed-zeros.
In math calculations, singed zero is required according to
IEEE 754 standard [1]. However, this pass will ignore the
sign bit of zeros to accelerate calculation.
• -Os: is built on top of -O2, with further optimizations for
decreasing code size and the removal of optimizations that
increase code size. An example pass used in -O2 but removed
in -Os is -libcalls-shrinkwrap. To avoid unnecessary
calls, this pass wraps library calls whose results are not used
with additional conditions. Because additional conditions
increase code size, the pass is eliminated in -Os.
• -Oz: to reduce code size even more, -Oz adds more aggres-
sive optimizations and eliminates certain optimizations from
-Os. -vectorize-loops is an example pass that is no longer
used at this level. This pass was discussed in -O2, and it will
increase code size.
2.2 Execution Environment
Inside browsers, both WebAssembly and JavaScript run in the
same engine – the JavaScript engine. However, the two languages
are significantly different regarding their execution models and
memory management mechanisms.
JavaScript. JavaScript source code is parsed, optimized, and
2.2.1
compiled at runtime by JavaScript engines in browsers. Memory
allocation in JavaScript is managed dynamically by the JavaScript
engine’s garbage collector.
JavaScript Engine. JavaScript source code first needs to be parsed
to an abstract syntax tree which then will be used by the JavaScript
engine for generating the bytecode. To speed up JavaScript program
execution, the Just-in-time (JIT) compilation [38] can be applied on
the sequences of frequently executed bytecode, translating them to
machine code for direct execution on the hardware.
JavaScript Garbage Collection. JavaScript engine uses garbage
collection to automatically monitor memory allocation and deter-
mine when a block of allocated memory is no longer in use and
reclaim it. This form of automatic memory management makes
JavaScript memory-efficient. As we observed in the experiments
(see Section 4.3), unlike WebAssembly that allocates a large chunk
of memory in the beginning, the memory occupied by JavaScript
programs stays stable even when they process very large input.
2.2.2 WebAssembly. Unlike JavaScript programs, WebAssembly
bytecode does not need to be parsed. WebAssembly also employs
a linear memory model, which is very different from the garbage
collection in JavaScript.
WebAssembly Virtual Machine. The low-level WebAssembly
bytecode does not need to be parsed as it is ready to be compiled into
machine code. Moreover, WebAssembly has already gone through
the majority of optimizations during compilation (except a few
machine-dependent optimizations). However, the context switch
between JavaScript and WebAssembly causes additional runtime
overhead. WebAssembly requires JavaScript to access Web APIs
(e.g., DOM and WebSockets). At the minimum, it requires JavaScript
to instantiate the WebAssembly module.
WebAssembly Linear Memory Model. WebAssembly employs
a linear memory model where linear memory is represented as
a contiguous buffer of untyped bytes that can be read and mod-
ified by both WebAssembly and JavaScript [67]. A memory in-
stance is a resizable JavaScript ArrayBuffer. When a WebAssem-
bly module is instantiated, a memory instance is created (e.g., using
WebAssembly.Memory() [58]) to allocate a chunk of linear mem-
ory for the module to use and emulate dynamic memory allocations.
If the initial memory is fully occupied, the memory instance will be
expanded to a bigger size. We observed that compared to JavaScript,
WebAssembly consumes significantly more memory when process-
ing large input.
2.2.3 Mobile vs. Desktop. The performance of WebAssembly and
JavaScript may differ between browsers and platforms. For example,
our experiments show that Chrome is the fastest on desktop for
JavaScript, and Firefox is the fastest on desktop for WebAssembly.
On mobile devices, however, Firefox is the fastest in executing
JavaScript, and Edge outperforms others in running WebAssembly.
In Sec. 4.5, we will discuss the performance implications of browsers
and platforms.
2.3 Program Input Size
The value of a program’s input that affects the amount of calcu-
lations is referred to as its input size. For example, the input size of
the multiplication of two matrices is a tuple (M, N, K), where the