            cout >::vector(&v10, argv, envp);
      for ( i = 0; i >::push_back(&v10, &i);
      getchar();
      //求v10的大小，相当于v3 = v10.size();
      v3 = std::vector>::size(&v10);
      //相当于cout>::pop_back(&v10);
      getchar();
      //相当于if(!v10.empty())
      //        v10.pop_back();
      if ( (unsigned __int8)std::vector>::empty(&v10) ^ 1 )
        std::vector>::pop_back(&v10);
      getchar();
      //这个resize有没有发觉很像上一节的构造函数，第一个参数为一个char变量的地址，第二个为容器初始大小，第三个为初始数据的地址
      //相当于v10.resize(5,2);
      v11 = 2;
      std::vector>::resize(&v10, 5LL, &v11);
      getchar();
      //这里就是上一节的那个构造函数了，相当于vectorv9(5,2);
      std::allocator::allocator(&v12);
      v13 = 2;
      std::vector>::vector(&v9, 5LL, &v13, &v12);
      std::allocator::~allocator(&v12);
      //这里判断两个容器是否相等,相当于v9 == v10
      if ( (unsigned __int8)std::operator==>(&v9, &v10) )
      {
        v4 = std::operator>(&std::cout, "Right!");
        std::ostream::operator>);
      }
      getchar();
      //这两句又出现了吧，end跟begin，这几句很常用，能识别就行
      v5 = std::vector>::end(&v10);
      v6 = std::vector>::begin(&v10);
      //将下面句子简化可以看出他就是v9.assign(v6,v5);
      //其实就是v9.assign(v10.begin(), v10.end());
      //具体怎么简化的话，你就看::，不要看模板，那只是类型的问题
      std::vector>::assign>>,void>(
        &v9,
        v6,
        v5);
      getchar();
      //清空容器元素，相当于v10.clear();
      std::vector>::clear(&v10);
      getchar();
      //析构函数
      std::vector>::~vector(&v9);
      std::vector>::~vector(&v10);
      return 0;
    }
**小结：**
  * c++ vector的逆向其实不难，最主要你要耐心去看，如果你看多几次，你会发觉这个不难，也就是基本操作而已
  * 具体的重要步骤详解，我都在上面注释写的很清楚，一一对应，你可以根据getchar一个个对应去看，看多几遍就知道了
  * 要学会简化ida识别的代码，不要盯着模板一直在那看
好了，vector的基本操作完了，接下来拿一道题来实战吧。我相信各位的技术，接下来直接上代码你们也是可以看懂了，看不懂就往上面翻一翻，查下基本操作
## 西湖论剑之EasyCpp
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char v3; // r15
      __int64 v4; // rdx
      __int64 v5; // rdx
      __int64 v6; // rdx
      __int64 v7; // rdx
      __int64 r12_7; // r12
      __int64 v8; // rbx
      __int64 v9; // rax
      __int64 v11; // rdx
      __int64 v12; // rbx
      __int64 v13; // rax
      __int64 v14; // r8
      __int64 v15; // r9
      __int64 v16; // rbx
      char v17; // al
      unsigned int *v18; // rax
      const char **v20; // [rsp+0h] [rbp-190h]
      signed int i; // [rsp+1Ch] [rbp-174h]
      signed int j; // [rsp+20h] [rbp-170h]
      char v23; // [rsp+30h] [rbp-160h]
      char v24; // [rsp+50h] [rbp-140h]
      char v25; // [rsp+70h] [rbp-120h]
      char v26; // [rsp+90h] [rbp-100h]
      char v27; // [rsp+B0h] [rbp-E0h]
      __int64 v28; // [rsp+D0h] [rbp-C0h]
      __int64 v29; // [rsp+F0h] [rbp-A0h]
      int v30[18]; // [rsp+110h] [rbp-80h]
      unsigned __int64 v31; // [rsp+158h] [rbp-38h]
      v20 = argv;
      v31 = __readfsqword(0x28u);
      std::vector>::vector(&v23, argv, envp);// #定义五个容器，相当于vector v23,v24,v25,v26,v27
      std::vector>::vector(&v24, argv, v4);
      std::vector>::vector(&v25, argv, v5);
      std::vector>::vector(&v26, argv, v6);
      std::vector>::vector(&v27, argv, v7);
      for ( i = 0; i >::push_back(&v24, &v30[i]);// 相当于v24.push_back(v30[i]);
      }
      for ( j = 0; j >::push_back(&v23, &v29);// 相当于v23.push_back(fib(j)) ;   j从0-15
      }
      std::vector>::push_back(&v25, v30);// 相当于v25.push_back(v30[0]);  
      r12_7 = std::back_inserter>>(&v25);// back_inserter创建一个容器指针，指向v25
      v8 = std::vector>::end(&v24);// v8 = v24.end()
      v29 = std::vector>::begin(&v24);// v29 = v24.begin();
      v9 = __gnu_cxx::__normal_iterator>>::operator+(&v29, 1LL);// 传v29的地址，在里面在用指针，相当于传了v24.begin(),这个操作过后就是相当于v9 = v24.begin() + 4;这里我所说的这种说法有语法错误，因为v24.begin()是迭代器，不能这么加，我说的是地址
      Add(
        v9,                                         // v24.begin()+4 相当于数组第二个数
        v8,                                         // v24.end() 相当于数组最后一个数
        r12_7,                                      // 只有输入的第一个元素的容器
        v30);                                       // 输入的第一个元素的元素的值
      std::vector>::vector(&v28, v8, v11);// 创建一个新容器 vector v28
      v12 = std::vector>::end(&v25);// v12 = v25.end();
      v13 = std::vector>::begin(&v25);// v13 = v25.begin();
      std::accumulate>>,std::vector>,main::{lambda(std::vector>,int)#2}>(
        &v29,
        v13,
        v12,
        &v28,
        v14,
        v15,
        v3);                                        // //倒置函数
      std::vector>::operator=(&v26, &v29);//将容器v29赋值给v26
      std::vector>::~vector(&v29);
      std::vector>::~vector(&v28);
      if ( std::operator!=>(&v26, &v23) )
      {
        puts("You failed!");
        exit(0);
      }
      std::back_inserter>>(&v27);
      v16 = std::vector>::end(&v24);
      v17 = std::vector>::begin(&v24);