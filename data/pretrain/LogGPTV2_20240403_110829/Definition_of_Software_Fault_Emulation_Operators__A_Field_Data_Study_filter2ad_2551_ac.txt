Wrong 
construct
Missing return statement (MRS) 
Missing parameter in function call (MPFC) 
Missing "OR EXPR" in param. of function call (MLOP) 
Missing "AND EXPR" in param. of function call (MLAP) 
Wrong parenthesis in logical expr. in param. of func. call (WPLP) 
Wrong logical expression in param of func. call (WLEP) 
Wrong arithmetic expression in param. of func. call (WAEP) 
Wrong variable used in parameter of function call (WPFV) 
Wrong value used in parameter of function call (WPFL) 
Miss by one value in parameter of function call (WPFML) 
Wrong parameter order in function call (WPFO) 
Wrong return value (WRV) 
Total faults found 
X
E
D
C
m
V
i
i
v
C
F
f
h
2
d
p
I
M
A
G
e
o
J
S
E
N
S
Z
h
s
a
B
l
e
n
r
e
K
L
l
t
a
o
T
6
6 
1 
1
3 
1 
8 
2 
1 
1 
1 
1
16  4 
0 
9 
1 
1 
1 
1 
11  0 
0 
5 
5 
9
1
0
1
0
0
12
8
3
1
1
7
43
3.3.4.  Algorithm  faults.  The  occurrences  of  Algorithm 
faults  are  shown  in  table  9.  The  following  explanations 
are pertinent:  
•  Missing  "if  (cond)  statement(s)":  this  fault  type 
represents  the  omission  of  a  block  of  code  made  of 
an if construct and its associated statements. 
•  Missing "if (cond)" around statement(s): This fault 
type  consists  of  having  a  number  of  statements 
always executed instead of conditionally executed.  
•  Missing  "if  (cond)  statement(s)  else"  before 
statement(s):  one  or  more  statements  should  exist 
inside the else part of a missing if-else construct. 
•  Missing  "if  (cond)  else  statement(s)"  around 
statement(s): This  fault type represents the  situation 
of  having  one  or  more  statements  that  should  be 
placed inside the if part of a missing if-else construct. 
•  Wrong branch/flow construct: the wrong execution 
flow  was  used  (e.g.,  an  if  construct  instead  of  a 
while).
•  Wrong  conditional  compilation:  faults  of  this  type 
were made at the preprocessor level and cause wrong 
portions of the source (algorithm) to be compiled. 
•  Extraneous  function  call.  Only  functions  calls  that 
were not part of a larger expression were considered 
Table 9 - Detailed analysis of algorithm faults
Fault nature
Fault specific types
Missing function call (MFC) 
Missing "If (cond) { statement(s) }" (MIFS) 
Missing "if (cond) statement(s) else" before statement(s) (MIEB) 
Missing "if (cond) else statement(s) " around statement(s) (MIEA) 
Missing iteration construct around statement(s) (MCA) 
Missing case: statement(s) inside a switch construct (MCS) 
Missing break in case (MBC) 
Missing small and localized part of the algorithm (MLPC) 
Missing sparsely spaced parts of the algorithm (MLPP) 
Missing large part of the algorithm (MLPA) 
Wrong function called with same parameters (WFCS) 
Wrong function called with different parameters (WFCD) 
Wrong branch construct - goto instead break (WBC1) 
Wrong algorithm - small sparse modifications (WALD) 
Wrong algorithm - code was misplaced(WALR)
Wrong conditional compilation definitions (WSUC) 
Missing 
construct
Wrong 
construct
Extraneous 
construct
Total faults found 
Extraneous function call (EFC) 
X
E
D
C
m
V
i
i
v
C
F
f
h
2
d
p
I
M
A
G
e
o
J
S
E
N
S
Z
h
s
a
B
l
e
n
r
e
K
L
l
a
t
o
T
1 
1 
4 
1 
1 
1 
28  7 
27  10 
10  4 
1 
1 
3 
9 
5 
3
9 
1 
4 
5 
1
1 
1 
1 
1 
3 
4 
1
121 30  8 
1 
2 
2 
8 
5 
1 
1 
1 
2 
1 
2 
4 
46
15  53
17
2 
2
1
2
4
1 
17
6
7
3
9
6 
10
2
6
9
1
6
12  1 
0 
31  212
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:06:30 UTC from IEEE Xplore.  Restrictions apply. 
Table 10 - Detailed analysis of Function faults
Fault nature
Fault specific types
Missing construct 
Wrong construct 
Total faults found 
Missing functionality (MFCT) 
Wrong algorithm - large modifications (WALL) 
as  belonging  to  this  type  (extraneous  function  calls 
existing  inside  contexts  where  the  return  value  is 
needed  were  considered  as  falling  into  the  wrong 
expression fault types). 
Fault  types  MFC,  MIFS,  MIEB  and  MLPC  are  the 
ones  that  can  be  considered  representative  of  Algorithm 
faults. 
3.3.5  Function  faults.  Function  faults  were  the  least 
frequent  ones.  Only  the  following  two  types  were 
observed:  Missing  Functionality  (functionality  that  was 
missing  from  implementation)  and  Wrong  algorithm
(algorithms that were not correctly expressed). Typically, 
these  faults are not related to particular statements in the 
code and its correction involves non-trivial code changes. 
Both  fault  types  can  be  considered  as  representative  for 
function  faults,  since  occurrences  of  its  faults  are  not 
restricted  to  only  one  or  two  programs  and  the  total 
number  of  faults  is  not  significantly  below  the  average. 
Table 10 presents the fault occurrence for Function faults. 
X
E
D
C
m
V
i
i
v
C
F
f
h
2
d
p
I
M
A
G
e
o
J
S
E
N
S
Z
h
s
a
B
l
e
n
r
e
K
L
l
a
t
o
T
0 
6 
3 
10  2 
13  8 
0 
3 
3 
12 
12  0 
0 
0 
21
15
36
3.4 Fault representativity analysis 
Based  on  our  observation  of  the  fault  occurrence  and 
on  the  distribution  of  fault  types  by  the  different 
programs, we have identified a set of fault types that can 
be considered representative of the most common types of 
software  faults.  Table  11  presents  this  set  of  fault  types. 
Brief  statistical  information  is  also  provided.  It  is  worth 
noting  that  this  set  of  fault  types  represent  a  total  of 
64.5%  of  all  faults  collected.  Any  effort  towards  fault 
emulation must necessarily begin with the fault types that 
are most representative. In section 4 we present mutation 
operators for the emulation of those fault types. 
4. Emulation of Software Faults 
This  section  briefly  describes  how  faults  of  the  types 
identified as representative in section 3.4 can be emulated 
through  the  use  of  the  Generic  Software  Fault  Injection 
Technique (G-SWFIT) that was proposed in [9]. 
Fault 
nature 
Table 11 - Fault coverage of the representative fault types
Fault specific types 
# Faults
ODC types 
Missing variable initialization (MVI) 
Missing variable assignment using a value (MVAV) 
Missing variable assignment using an expression (MVAE) 
Missing "if (cond)" surrounding statement(s) (MIA) 
Missing  Missing "AND EXPR" in expression used as branch condition (MLAC)
construct  Missing function call (MFC) 
Missing "If (cond) { statement(s) }" (MIFS) 
Missing "if (cond) statement(s) else" before statement(s) (MIEB) 
Missing small and localized part of the algorithm (MLPC) 
Missing functionality (MFCT) 
Wrong value assigned to variable (WVAV) 
Wrong logical expression used as branch condition (WLEC) 
Wrong  Wrong arithmetic expression in param. of func. call (WAEP) 
construct  Wrong variable used in parameter of function call (WPFV) 
Wrong algorithm - large modifications (WALL) 
Wrong data types or conversion used (WSUT) 
Extrans.C  Extraneous variable assignment using another variable (EVAV) 
Total faults for these types in each ODC type 
Fault coverage relative to each ODC type 
ASG 
(cid:57)(cid:57)(cid:57)(cid:57)
(cid:57)(cid:57)(cid:57)(cid:57) 
(cid:57)(cid:57)(cid:57)(cid:57) 
(cid:57)(cid:57)(cid:57)(cid:57)
(cid:57)(cid:57)(cid:57)(cid:57) 
(cid:57)(cid:57)(cid:57)(cid:57)
73 
12
12
16
23
42
46
53
17
17
21
13
16
12
8
15
12
8
343 
CHK 
INT 
ALG 
FUN 
(cid:57)(cid:57)(cid:57)(cid:57) 
(cid:57)(cid:57)(cid:57)(cid:57) 
(cid:57)(cid:57)(cid:57)(cid:57) 
(cid:57)(cid:57)(cid:57)(cid:57) 
(cid:57)(cid:57)(cid:57)(cid:57) 
(cid:57)(cid:57)(cid:57)(cid:57)
(cid:57)(cid:57)(cid:57)(cid:57)
(cid:57)(cid:57)(cid:57)(cid:57)
(cid:57)(cid:57)(cid:57)(cid:57)
(cid:57)(cid:57)(cid:57)(cid:57)
(cid:57)(cid:57)(cid:57)(cid:57)
81 
20 
133 
36 
64.5% 
61.9% 