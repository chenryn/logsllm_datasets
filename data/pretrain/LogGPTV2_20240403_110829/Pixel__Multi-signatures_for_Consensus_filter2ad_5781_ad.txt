We defer the interested reader to Appendix B for proof
details.
6 Pixel in PoS-based Blockchains
In this section, we describe how to integrate Pixel into PoS-
based blockchains that rely on forward-secure signatures to
achieve security against posterior corruptions. We summarize
systems that rely on forward-secure signatures, abstract how
signatures are used in these systems, and explain how to apply
Pixel.
PoS Blockchains Secure under Posterior Corruptions.
Ouroboros Genesis and Praos rely on forward-secure signa-
tures to protect against posterior corruptions [5,29,38]. These
blockchains require users to rotate key and assume secure era-
sures. Thuderella is a blockchain with fast optimistic instant
conﬁrmation [51]. The blockchain is secure against poste-
rior corruptions assuming that a majority of the computing
power is controlled by honest players. Similarly, the protocol
relies on forward-secure signatures. Pixel can be applied in
all these blockchains to protect against posterior attacks and
potentially reduce bandwidth, storage, and computation costs
in instances where many users propagate many signatures on
the same message (e.g., a block of transactions). Ouroboros
Crypsinous uses forward-secure encryption to protect against
the same attack [37]. Snow White shows that under a mild
setup assumption, when nodes join the system they can access
a set of online nodes the majority of whom are honest, the
system can defend against posterior corruption attack [28].
The system does not rely on forward-secure signatures.
Background on PoS Blockchains. A blockchain is an
append-only public ledger to which anyone can write and
read. The fundamental problem in blockchains is to agree on
a block of transactions between users. In Proof-of-Stake pro-
tocols, users map the stake or tokens they own in the system
to “voting power” in the agreement protocol. Various types
of PoS systems exist that use different formulas for determin-
ing the weight of each vote. For instance, in bounded PoS
protocols, users must explicitly lock some amount A of their
tokens to participate in the agreement. The weight of each
vote is A/Q, where Q is the total number of locked tokens
who’s users wish to participate in the agreement. Users that
misbehave are punished by a penalty applied to their locked
tokens.
To tolerate malicious users, all PoS protocols run a Byzan-
tine sub-protocol to agree on a block of transactions. The
system is secure, assuming that that majority (often 2/3) of
the tokens participating in the consensus is honest. Each block
is valid if a majority of committee members, weighted by their
stake, approved it.
Pixel Integration.
In order to vote on a block B, each mem-
ber of the sub-protocol signs B using Pixel with the current
block number. The consensus is reached when we see a col-
lection of N committee member signatures σ1, . . . ,σN on the
USENIX Association
29th USENIX Security Symposium    2101
same block B, where N is some ﬁxed threshold. Finally, we
will aggregate these N signatures into a single multi-signature
Σ, and the pair (B,Σ) constitute a so-called block certiﬁcate
and the block B is appended to the blockchain.
Registering public keys. Each user who wishes to partic-
ipate in consensus needs to register a participation signing
key. A user ﬁrst samples a Pixel key pair and generates a
corresponding PoP. The user then issues a special transaction
(signed under her spending key) registering the new participa-
tion key. The transaction includes PoP. PoS veriﬁers who are
selected to run an agreement at round r, check (a) validity of
the special transaction, and (b) validity of PoP. If both checks
pass, the user’s account is updated with the new participation
key. From this point, if selected, the user signs on blocks using
Pixel.
Vote generation. To generate a vote on a block number t,
users ﬁrst update their keys to correspond to the round number.
Subsequently, they sign the block using the correct secret key
and propagate the signature to the network.
Propagating and aggregating signatures.
Individual
committee signatures will be propagated through the network
until we see N committee member signatures on the same
block B. Note that Pixel supports non-interactive and incre-
mental aggregation: the former means that signatures can
be aggregated by any party after broadcast without commu-
nicating with the original signers, and the latter means that
we can add a new signature to a multi-signature to obtain a
new multi-signature. In practice, this means that propagating
nodes can perform intermediate aggregation on any number
of committee signatures and propagate the result, until the
block certiﬁcate is formed. Alternatively, nodes can aggregate
all signatures just before writing a block to the disk. That is,
upon receiving enough certifying votes for a block, a node
can aggregate N committee members’ signatures into a multi-
signature and then write the block and the certiﬁcate to the
disk. To speed up veriﬁcation of individual committee mem-
ber signatures, a node could pre-compute e(h,y) for the y’s
corresponding to the users with the highest stakes.
Key updates. When using Pixel in block-chains, time cor-
responds to the block number or sub-steps in consensus pro-
tocols. Naively, when associating time with block numbers,
this means that all eligible committee members should update
their Pixel secret keys for each time a new block is formed
and the round number is updated. Assume for simplicity that
each committee member signs at most one block (if not, sim-
ply append a counter to the block number and use that as the
time). If a user is selected to be on the committee at block
number t, it should ﬁrst update its key to skt (Pixel supports
“fast-forward” key updates from skt to skt(cid:48) for any t(cid:48) > t), and
as soon as it signs a block, updates its key to skt+1 and then
propagates the signature. In particular, there is no need for key
updates when a user is not selected to be on the committee.
7 Evaluation on Algorand Blockchain
In order to measure the concrete efﬁciency gains of Pixel, we
evaluate it on the Algorand blockchain [56, 57].
Algorand Overview. Algorand is a Pure PoS (PPOS) sys-
tem, where each token is mapped to a single vote in the con-
sensus without any explicit bonding [56,57]. Some users may
opt-out from participation, in which case their tokens are ex-
cluded from the total number of participating tokens (i.e., the
denominator in the weight). Each user maintains an account
state on-chain that speciﬁes her spending key, balance, consen-
sus participation status, participation key, and other auxiliary
information. A user wishing to perform a transaction must
sign it with her corresponding secret key. Users run a Byzan-
tine consensus algorithm to agree on a block of transactions
following the high-level structure we outlined in the previous
section. We call a block certiﬁcate to denote a collection of
votes above a certain threshold approving a block. All users
in the network validate and store block certiﬁcate (and the
corresponding transactions) on disk. We refer to a node as
a computer system running Algorand client software on the
user’s behalf.
Veriﬁer Vote Structure and Block Certiﬁcates.
In Algo-
rand, each valid vote for a block proposal includes (a) a proof
that the veriﬁer was indeed selected to participate in the con-
sensus at round r, and (b) a signature on the block proposal.
In more detail, each vote includes the following ﬁelds:
• Sender identiﬁer which is represented by a unique public
key registered on-chain (32 bytes).
• Round and sub-step identiﬁers (8 bytes).
• Block header proposal (32 bytes).
• A seed used as an input to a VRF function for crypto-
graphic sortition (32 bytes).
• VRF credential that proves that the sender was indeed
chosen to sign on the block (96 bytes).
• Forward-secure signature authenticating the vote (256
bytes).
Overall, each vote is about 500 bytes (including some addi-
tional auxiliary information), half of which is for the forward-
secure signature.
Algorand has two voting sub-steps for each round. In the
ﬁrst sub-step, a supporting set (of expected size 3000) of
veriﬁers is chosen to vote on a block proposal. In the second
sub-step, a certifying set (of expected size 1500) of veriﬁers
2102    29th USENIX Security Symposium
USENIX Association
sign
aggregate
(N = 1500)
verify agg.
(N = 1500)
6.7 ms
aggregate
(N = 1500)
13.9 ms
verify agg.
(N = 3000)
8.3 ms
|pk|
|σ|
|skt|
keygen
key
update
1.8 ms
1.03 ms
pk ∈ G1
Figure 2: Performance ﬁgures of the Pixel signature scheme algorithms, and the size of public keys, signatures, and secret keys
when using a BLS12-381 curve. N denotes the amount of signatures and keys aggregated, respectively. Maximum number of
time periods is T = 232 − 1.
48 B 144 B 43 kB
2.8 ms
7.2 ms
is chosen to ﬁnalize the block proposal. All veriﬁers’ votes
propagate in the network during the agreement, but only the
certifying votes are stored long-term and sufﬁcient to validate
a block in the future. Larger recovering set (of expected size
10000) is chosen during a network partition for recovery.
Sig. set size BM-Ed25519 BM-BLS
192 Bytes
1
141 KB
1500
3000
281 KB
938 KB
10000
256 B
375 KB
750 KB
2.4 MB
Pixel
144 B
144 B
144 B
144 B
Algorand’s Existing Solution to Posterior Corruptions.
Algorand solves posterior corruptions using forward-secure
signatures instantiated with a d-ary certiﬁcate tree [9], which
we call BM-Ed25519 for convenience. The root public key of
an Ed25519 signature scheme is registered on-chain, and keys
associated with the leaves (and subsequently used to sign at
each round) are stored locally by the potential veriﬁers. For
each block at round r a veriﬁer must (a) produce a valid certiﬁ-
cate chain from the root public key to the leaf associated with
r, and (b) signature of the vote under the leaf key. Algorand
assumes secure erasures and that users delete old keys from
their nodes. BM-Ed25519 is instantiated with 10000-ary tree
and depth 2 (supporting approximately 226.6 time periods).
Ed25519-based signatures have public keys of 32 bytes and
64 bytes signatures. Hence, since a valid certiﬁcate chain
must include the intermediary public keys, the resulting size
of each forward-secure signature is 3× 64 + 2× 32 = 256
bytes.
7.1 Efﬁciency Evaluation
Pixel signatures can serve as a replacement of BM-Ed25519
in Algorand following the same design as outlined Section 6.
Setup. Our experiments are performed on a MacBook Pro,
3.5 GHz Intel Core i7 with 16 GB DDR3. We use Alogrand’s
open-source implentations of Pixel signatures, VRF functions,
Ed25519 signing, and veriﬁcation [1, 2]. For blockchain ap-
plications, since the public key must live on-chain, we choose
to place Pixel public keys in G1, obtaining smaller public
keys and faster key aggregation during veriﬁcation. We set
the maximum time epoch to T = 232 − 1, which is sufﬁcient
to rotate a key every second for 136 years.
Figure 2 shows the runtime of individual Pixel algorithms,
aggregation, and object sizes for the BLS12-381 curve [7].
Next, we measure quantities that affect all nodes participating
in the system: the size of signature sets, bandwidth, and block
Table 1: Total size of signature sets using various forward-
secure signature schemes for 232 time periods. BM-Ed25519
is instantiated using Algorand’s parameters with 10,000-ary
tree of depth 2. BM-BLS is instantiated using the same pa-
rameters with public keys in G1 and signatures in G2.
veriﬁcation time. In Pixel, the signature set corresponds to a
single multi-signature.
Storage Savings.
In Table 1, we compare the sizes of sig-
nature sets that are propagated (for supporting and verifying
votes) and stored (for verifying votes) by all participating
nodes. We instantiate BM-Ed25519 with Algorand param-
eters of 10000-ary and depth 2. For BM-BLS we place the
public key in G1 and signatures in G2. Since BLS supports
aggregation of signatures, we can compress all signatures
in a certiﬁcate chain and the signature of the block into 96
B (note that the public key in the certiﬁcate chain cannot
be compressed and adds an additional 96 B per signature).
Furthermore, we can compress all signatures across votes.
Pixel signatures authenticating a block with 1500 signatures
are 2667x and 1003x times smaller than signature sets using
BM-Ed25519 and BM-BLS, respectively.
In Figure 3, we show long-term blockchain storage im-
provements using Pixel signatures. We evaluate storage as-
suming various number of transactions in each block. Each
transaction in Algorand is about 232 bytes. We also assume
that the entire expected number of certifying veriﬁers (1500)
are selected for each block. Given today’s block conﬁrmation
time of just under 4.3 seconds per block, Algorand blockchain
should produce 106 blocks every ≈ 50 days and 108 blocks
every ≈ 13 years. Pixel signatures improve blockchain size
by about 40% and 20% on blocks packed with 1500 and
5000 transactions, respectively. This improvement translates
to smaller overall storage requirements and faster catch-up
speed for new nodes.
USENIX Association
29th USENIX Security Symposium    2103
1
0.8
0.6
99.9
78
64.9
106 blocks; 1500 txs/block
108 blocks; 1500 txs/block
1.7
1.5
1.4
173.7 151.9 138.8
)
B
T
(
e
z
i
s
n
i
a
h
c
k
c
o
l
B
)
B
T
(
e
z
i
s
n
i
a
h
c
k
c
o
l
B
106 blocks; 5000 txs/block
108 blocks; 5000 txs/block
BM-Ed25519
BM-BLS
Pixel
Figure 3: Size of blockchain measured for different total num-
ber of blocks. The top two plots assume average of 1500
transactions per block and the bottom plots assume 5000
transactions per block. All plots assume average of 1500 cer-
tifying votes per block.
Number of connections BM-Ed25519 Pixel
4
10
100
4.4 MB
11 MB