* = E2
* = I2\O1
* =  O2
* = T2
- 57 -
"
a
 This implies that one can determine a priori if the composition of two components might
result  in  a  system  that  satisfies  P.    Unfortunately,  stability  is  not  a  sufficient  condition.
Generalized Noninference satisfies the stability definition but as demonstrated in Example
5.2 the composition of two Generalized Noninference secure components may not satisfy
Generalized Noninference
The  stability  requirement  allows  the  system  designer  to  determine  under  what
conditions a property may emerge.  Consider, Generalized Noninterference.  In Example
5.1 it was shown that GNI is a cascade composable security property.  Therefore any two
systems  that  satisfy  GNI  when  composed  in  cascade  will  result  in  a  system  that  also
satisfies GNI.  Since GNI is a stable property (see Appendix A) we can also conclude that
the only way a cascade system can satisfy GNI is if the externally visible parts satisfy GNI.
By externally visible we mean the system such that all internal events are removed.
5.5.  Feedback Composition
In this section we examine systems that contain feedback.  Most real systems do
exhibit  some  form  of  feedback.    In  the  previous  sections  we  have  considered  security
properties in general.  In this section we will limit our discussion to a subset of security
properties.  We do this for two reasons.  First, we can provide much stronger results by
limiting the class of security properties we consider.  Second, the class we are considering
encompasses nearly all security properties presented in the literature and appear to contain
the best candidates for a formal basis of security.
The  class  of  properties  that  we  will  be  considering  include  those  that  imply  the
causal variant of GNI.  Recall from section 4.4.2.1 on page 36 that the causal variant of GNI
requires that all corrections to perturbations occur after the perturbation.  In this section
when referring to GNI we mean causal GNI. As can be seen from Figure 5.4 most security
properties that have been proposed as a basis for the foundations of computer security are
included.
- 58 -
n-Forward Correctability
All Systems
Restrictiveness
Generalized
Noninference
GNI
0
PSP
Separability
Figure 5.4: Comparison between GNI other Properties.
Generalized  Noninterference  is  implied  by  most  of  the  security  properties
presented in the literature.
Until 1987 it was thought that security properties could be composed such that the
resulting  system  also  satisfies  the  property.    Then  McCullough  [McCullough87]
[McCullough88]  provided  an  example  of  two  GNI  secure  systems  such  that  their
composition resulted in a system that did not satisfy GNI.  We will present a variation of
the example McCullough used to motivate our results.
Example 5.6: Machine A has one high level input in, and one high-level output out which
is a reply to in after some processing.  There is a low-level cancel input, which cancels any
high-level processing that is underway, and a low-level ack output that acknowledges the
cancel input after some time interval.  If there is high-level processing at the time of the
ack, that is, if the cumulative number of out events is less than the cumulative number of
in events, the high-level processing is terminated, and no out will occur until after the next
uncancelled in.  If  there  is  no  high-level  processing  at  the  time  of  ack,  then  a  low-level
error output may be produced at some time following the ack; however, the error output
is not guaranteed to occur.
Machine B is similar to A, but does not have an ack output.  It cancels high-level
processing,  if  any,  at  the  moment  the  cancel  is  received.    If  there  is  no  high-level
- 59 -
¥
processing at the  time  of  the  cancel,  then  a  low-level  error  output  may  be  produced  at
some time following the cancel; however, the error output is not guaranteed to occur.
We will demonstrate that we can compose two components such that the resulting
system is not non-interference secure.  We will hook up the machines as follows:  A’s ack
output feeds into B’s cancel input, A’s out feeds into B’s in, and B’s out feeds into A’s in.
A’s in is also available as an external input besides  receiving  B’s  out.    Our  model  of  an
event  system  and  composition  does  not  explicitly  allow  A’s  in  event  to  be  both  a
communication  event  and  an  input  event.    This  is  not  a  problem  because  we  can  use  a
multiplexer as describe in section 3.4, page 18.  Figure 5.5 shows this interconnection.
M
in
A
out
ack
cancel
error
in
B
out
cancel
error
High Level Events
Low Level Events
Figure 5.5:  Interconnections for Example 5.6.
A diagram of the interconnections between the Machine A and the Machine
B.  M is a multiplexer required because our model of components does not
allow an event to be both an internal event and an input event.
Each  trace  in  Figure  5.6  consists  of  a  time  line,  running  vertically,  and  events,
drawn as labeled arrows along the time line.  Time flows up the time line; earlier events
are nearer the bottom of the time line.  Dashed arrows signify high-level events, and solid
arrows are low-level events.  An arrow directed at the time line is an input event, while an
arrow directed away denotes an output event.  The composition of Figure 5.5 is not non-
interference  secure  because,  for  the  trace  shown  in  Figure  5.6(a)  and  the  perturbation
shown in Figure 5.6(b), there is no correction.  Any attempt to correct the trace in one of
the components results in the other component requiring a correction also.
G
- 60 -
Error
Error
Error
Error
Cancel
Cancel
In
(a)
(b)
Figure 5.6: Demonstration that the Component of Figure 5.5 does not satisfy GNI.
Trace  (a)  is  a  trace  of  the  composite  machine  that  does  not  have  a
correction for the perturbation shown in part (b).
5.5.1. Low Level Preconditions and System State
We  have  used  an  event  system  model  for  components  because  it  eliminates  the
need for specifying a model of computation.  However, even without specifying a model
of computation we can still examine how a system behaves as it processes events.  As the
system accepts and processes new events the state of the system changes.  Events might
be  dependent  on  the  state  of  the  system.    That  is  the  occurrence  of  an  event  might  be
dependent on some condition being true.  These conditions are called preconditions for an
event. The  event  system  model  presented  in  Chapter  3  does  not  explicitly  contain  these
preconditions.  The preconditions are implicit  and  embedded  in  the  set  of  all  traces.    In
proving  our  results  for  feedback  composition  we  do  not  explicitly  require  these
preconditions for each event.  However, we will refer to them and therefore deal with the
preconditions if they exist.
In this work we are only interested in the preconditions of a low level event that
requires a condition on high level state.  It might seem strange that low level events can be
dependent on high level state but consider the informal definition of precondition given in
the preceding paragraph.  Since the state of the component is dependent on both the low
level users actions in t  and the high level users actions in t , the condition for l
may be dependent on the actions of high level users.
 to occur
Definition 5.4: Low Level Preconditions
A  low  level  event  requiring  condition  f
means either one (or both) of the following are true:
  to  be  true  for  its  occurrence
- 61 -
1.   The condition  must  be  true  of  the  high  level  state  for  the  low  level
event to occur
2.   The condition must be true of the high level state for some future low
level event to occur.
The only exception to the above is that a low level input event may never depend
on high level state for it to occur.
5.5.2. Theorems on Feedback Composition
Example 5.6 demonstrates that a property that is cascade composable might not be
composable in the presence of feedback.  The question that has not been addressed in any
work  on  composability  is  what  structures  of  the  system  cause  this  failure  to  occur.
Example  5.6  demonstrates  the  failure  of  GNI  to  compose  using  two  components  with
feedback.  Is it possible to construct such an example with three (or more) components in
the feedback path?  As we shall prove the answer is no.  The only case where feedback
composition  can  fail  is  in  the  composition  of  two  components.    How  this  can  help  the
system designer is discussed below.
To prove that the only interconnection that causes feedback composition to fail is
in the interconnection of two components, a characterization of why the composition fails
is  required.    The  following  Lemma  proves  that  the  failure  is  due  to  a  low  level  event
whose  preconditions  cannot  be  satisfied.    It  does  not,  however,  give  any  indication  to
which low level event or how the failure will occur.  The determination of which event and
why it fails is presented below.
Lemma 5.1: For a system composed of GNI secure components, if a trace t  exists such
 has no correction then there exists a low level event
that a perturbation s
such that its conditions for occurring can not be satisfied.
Proof:
Given a trace t  and a perturbation s
 such that no correction exists, assume all low
level event conditions can be satisfied.
From s
 remove all high level non inputs.  Apply the following procedure to each
low level event beginning with the first low level event in s
.
- 62 -
 can be written as s =a
 where l
 is the  low  level  event  that  we  are  currently
considering.  By assumption the conditions for l
necessary corrections such that l
accomplished after l
.
 to occur can be satisfied.  Perform the
 can occur in the trace.  All remaining corrections can be
  where b
.  Constructing a
After all low level events have  been  handled  s
  can  be  written  as s =a
contains only high level events and all required corrections can occur in b
valid trace from this point is straightforward.  Without a feedback path the system would
have a correction to s
then taken as the new s
as a new perturbation.  The correction would not affect any events in a
should  then  be  repeated  until  all  feedback  events  are  handled.    This  is  a  contradiction
 (event renaming will be required in general).  If this correction is
 and the feedback connections are made again then this will appear
.  This procedure
because it is given that no correction exists.
Therefore,  there  exists  a  low  level  event  such  that  its  conditions  for  occurring
cannot be met.
G
Theorem 5.1: Given a composed system with k components that satisfy GNI construct the
system graph.  If the graph has no 2-cycles then the system satisfies GNI.
Proof:  Consider any trace t  of the system and a perturbation s
way  a  correction  will  not  exist  is  if  there  exists  a  low  level  event  such  that  its
preconditions can not be satisfied.  Consider any low level event, l,
occur  only  if  all  the  components  to  which  it  is  connected  to  satisfy  their  respective
.  By Lemma 5.1 the only
.  At worst l
 in s
 can
conditions.    Since  there  is  no  feedback  between  any  two  components  that  share
communication  events  (there  are  no  2-cycles)  it  is  always  possible  to  ensure  the
precondition for l
feedback  between  the  components  they  appear  in  cascade.    It  has  been  proven  that
 can be satisfied.  This can be accomplished because since there  is  no
cascade  composition  of  components  satisfies  GNI.    Therefore,  it  is  always  possible  to
construct  a  partial  correction  t ’=a
corrections  can  occur  in b
same technique that was used in Lemma 5.1.
  only  contains  high  level  events  and  all
  can  be  accomplished  by  applying  the
.    The  corrections  to  b
  where  b
G
- 63 -
s
l
b
b
b
Notice that the proof uses a more general definition of composition than the one
presented  in  section  3.4.    The  definition  in  section  3.4  only  allows  an  output  of  one
component to be connected to an input of another component.  The above proof  allows
the  output  to  be  connected  to  n  components.      This  was  done  because  it  is  a  stronger
result.  Clearly, this result applies if the definition of composition is that given in section
3.4.
The above theorem allows the system designer to quickly determine if the system
under consideration might not satisfy  GNI.    If  the  system  graph does  not  contain  any  2-
cycles  then  the  system  satisfies  GNI  and  the  system  designer  is  done.    The  system  is
guaranteed to satisfy  GNI.    If  2-cycles  exist,  then  it  is  possible  that  the  system  does  not
satisfy GNI.  Some possible solutions are: 1)  Reorganize the system to avoid 2-cycles or
2)  insert  a  dummy  component  to  break  all  2-cycles.    We  will  discuss  2-cycles  and  the
dummy component in section 5.5.3.
The  above  alternatives  will  work  but  once  again  they  might  cause  unnecessary
work for the system designer.  It is possible that the feedback connection is perfectly safe.
What is required are necessary and sufficient conditions for the  composition  of  two  GNI
secure components to compose.
Theorem  5.2  will  give  the  necessary  and  sufficient  conditions  for  a  security
property  to  be  composable.    Before  presenting  the  theorem  there  are  some  issues  that
need  clarifying.    The  theorem  requires  that  certain  conditions  be  true  at  certain  times.
Since the event  system  model  has  no  time  component  this  statement  may  seem  strange.
The idea in the proof is to capture the notion that two conditions are required to be true
simultaneously.  The easiest way to capture this notion and to demonstrate that if it isn’t
true the property would be composable, was to introduce this artificial notion of time into
the model.  Our use of temporal words is merely for expediency and does not violate the
event systems model.
Once again consider the composition that was used to demonstrate the failure of
GNI  to  compose  in  the  presence  of  feedback  (Figure  5.6).    McCullough  attributed  this
failure  of  GNI  to  compose  to  the  rapid  exchange  of  high  level  events  between  the
components in the feedback loop [McCullough87].  Lemma 5.1 proved that if GNI fails to
- 64 -
compose  it  is  because  the  preconditions  to  some  low  level  event  could  not  be  satisfied.
This  then  implies  that  the  rapid  exchange  of  events  referred  to  by  McCullough  was  the
attempt by the components to satisfy the preconditions of a low level event.  This can be
seen from Figure 5.6 by considering the low level trace  and
the  perturbation  .      Each  attempt  to  satisfy  the
precondition for ack in S1 caused the precondition in S2’s to become false and vice versa.
The most difficult aspect in presenting the necessary and sufficient conditions is to
capture  the  alternation  of  conditions  that  was  observed  in  Example  5.6.    An  exact
definition of this alternation would require a model  of  computation  for  the  components;
that is a formal model that can recognize (or generate) the set of traces.  One such model
has been developed by Nestor [Nestor93].  Since we want the theorem to be as general as
possible we do not want to provide a specific model of computation.  Also, the alternation
of conditions may cause the components to progress through a variety of states in which
the alternation may finally stop because the required conditions can be satisfied.      For  a
sufficient complex model of computation determining if the alternation of conditions stops
is  undecidable10.    As  will  be  shown  the  usefulness  of  this  theorem  is  not  diminished
without a strict definition of the alternation.
Theorem 5.2: The  composition  of  two  GNI  secure  components  S0  and  S1  will  yield  a
system that is GNI secure if and only if for all low level outputs l 1 of one
component that are connected to low level inputs l 2 of the other, one  or
more of the following is false:
1. For event l 1 to occur requires condition f 1 to be true at the occurrence
of l 1.
2. For event l 2 to occur requires condition f 2 to be true at the occurrence
of l 2.
If f 1 or f 2 become false they cannot both be made true simultaneously.
3.
Proof:
10 
It is equivalent to the halting problem.
- 65 -
We will prove the contrapositive statement.  That is, if all of the conditions are false then a