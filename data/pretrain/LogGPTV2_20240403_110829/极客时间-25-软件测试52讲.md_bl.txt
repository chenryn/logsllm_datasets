## WebPagetest 实际使用中需要解决的问题讨论到这里，你是不是觉得 WebPagetest是一个很强大的免费工具，但是如果想要在实际工程项目中全面推行该工具的话，还需要解决两个问题。**第一个问题是，如果被测网站部署在公司内部的网络中，那么处于外网的WebPagetest就无法访问这个网站，也就无法完成测试**。要解决这个问题，你需要在公司内网中搭建自己的私有WebPagetest 以及相关的测试发起机。具体如何搭建，你可以参考[WebPagetest官网的建议](https://github.com/WPO-Foundation/webpagetest-docs/blob/master/user/Private%20Instances/README.md)，这里我就不再继续展开了。**第二个问题是，用 WebPagetest执行前端测试时，所有的操作都是基于界面操作的，不利于与 CI/CD的流水线集成**。要解决这个问题，就必须引入 WebPagetest API Wrapper。WebPagetest API Wrapper 是一款基于 Node.js，调用了 WebPagetest 提供的API 的命令行工具。也就是说，你可以利用这个命令行工具发起基于 WebPagetest的前端性能测试，这样就可以很方便地与 CI/CD流水线集成了。具体的使用步骤如下：1.  通过"npm install webpagetest -g"安装该命令行工具；2.  访问 https://www.webpagetest.org/getkey.php 获取你的 WebPagetest API    Key；3.  使用"webpagetest test -k API-KEY 被测页面    URL"发起测试，该调用是异步操作，会立即返回，并为你提供一个 testId；4.  使用"webpagetest status testId"查询测试是否完成；5.  测试完成后，就可以通过"webpagetest results    testId"查看测试报告，但是你会发现测试报告是个很大的 JSON    文件，可读性较差；6.  通过"npm install webpagetest-mapper -g"安装 webpagetest-mapper    工具，这是为了解决测试报告可读性差的问题，将 WebPagetest 生成的 JSON    文件格式的测试报告转换成为 HTML 文件格式；7.  使用"Wptmap -key API-KEY \--resultIds testId \--output    ./test.html"将 JSON 文件格式的测试结果转换成 HTML 格式。
## 总结今天，我使用 WebPagetest测试了一个具体网站的前端性能。在解读这个测试报告的同时，我和你分享了几个重要的前端性能指标，以及如何提升这些指标，最终达到优化网站用户体验的目的。虽然，WebPagetest是一款免费的、功能强大的前端性能测试工具，但是用于实际测试项目时，往往还存在两个方面的问题，我给你分析了这两个问题出现的原因，以及如何解决这两个问题，以达到更高效地完成前端性能测试的目的。
## 思考题除了我今天介绍的 WebPagetest 外，前端测试工具还有 YSlow等。你还在工作中接触过哪些前端性能测试工具，它们各自有什么特点呢？感谢收听，欢迎你给我留言。![](Images/a0e54ef1f60458fb3ea5596970806f13.png){savepage-src="https://static001.geekbang.org/resource/image/0f/c2/0ffe4c8cc7f61280f42c57db2ccc90c2.jpg"}
# 32-无实例无真相：基于LoadRunner实现企业级服务器端性能测试的实践（上）你好，我是茹炳晟。今天我和你分享的主题是：无实例无真相之基于 LoadRunner实现企业级服务器端性能测试的实践（上）。从今天开始的两篇文章，我将介绍如何基于 LoadRunner实际开展企业级服务器端的性能测试。分享这个主题时，我会从最开始的性能需求获取开始讲起，带你完整地经历一个实际服务器端性能测试项目。通过这个过程，我希望可以帮助你快速建立服务器端性能测试的全局观，并了解各主要步骤的关键技术细节。听到这里，你可能就有些困惑了。我在分享[《工欲善其事必先利其器：后端性能测试工具原理与行业常用工具简介》](https://time.geekbang.org/column/article/16589)这个主题时，曾经说到：LoadRunner比较适合于传统软件企业开展性能测试，而 JMeter更适用于互联网企业的软件性能测试。那么，为什么我没有选择以 JMeter为例来展开后端性能测试呢？我选择 LoadRunner，是经过深思熟虑的，主要原因包括：1.  **JMeter    的官方文档对其使用方法介绍得很详细，而且其操作基本属于"傻瓜式"的**。JMeter    使用的难点在于：如何支持海量并发，以及实现更好的 load    控制，解决这个问题你可以参考 LoadRunner    的实现方式，然后从你所在企业的实际业务场景出发，进行二次开发。2.  **互联网企业和传统软件企业的软件产品的后端性能测试，在原理以及基本方法上是基本一致的，区别较大的只是全链路压测**。所以，我以传统企业的软件产品为例展开分享，你因此学到的原理以及测试方法将同样适用于互联网软件产品的性能测试。3.  **关于互联网软件产品的全链路压测，由于需要实现海量并发以及流量隔离等操作，所以目前只有一些大型企业在做，比如饿了么、淘宝、ebay、美团等超级大的网站**。但是，如果你也想了解全链路压测的话，我也会准备一篇"加餐"文章，和你分享开展全链路压测的难点，以及应对方案。我会更新完性能测试这个系列以后，为你准备这篇"加餐"文章。``{=html}为了让你在进行服务器端性能测试时更充分地利用好LoadRunner，所以在正式开始讲解这个测试案例前，我会先给你简单介绍一下LoadRunner的基本原理，以及主要的功能模块。这些功能模块不仅在这个案例中会用到，也会在实际工程项目被经常使用，所以如果你有什么不理解的地方，欢迎给我留言。
## LoadRunner 的基本原理你还记得我在[《工欲善其事必先利其器：后端性能测试工具原理与行业常用工具简介》](https://time.geekbang.org/column/article/16589)这个主题中，介绍过的后端性能测试工具的基本原理吗？我们先一起来回忆一下吧：> 后端性能测试工具首先通过**虚拟用户脚本生成器**生成基于协议的虚拟用户脚本，然后根据性能测试场景设计的要求，通过**压力控制器**控制协调各个**压力产生器**以并发的方式执行虚拟用户脚本，并且在测试执行过程中，通过**系统监控器**收集各种性能指标以及系统资源占用率，最后通过**测试结果分析器**展示测试结果数据。LoadRunner 的基本原理，与上面的描述完全一致。在 LoadRunner 中，VirtualUserGenerator 对应的就是虚拟用户脚本生成器，Controller对应的就是压力控制器和系统监控器，Load Generator对应的就是压力产生器，Analysis 对应的就是测试结果分析器。为了帮助你理解 LoadRunner的工作原理和模块，先撇开这些名词不谈，设想一下如果没有专用的后端性能测试工具，我们如何开展后端性能测试。其实，"人肉"开展后端性能测试也不算太难。这个过程大致是这样的：-   首先，我们需要一批测试机器，每台测试机器雇佣一个测试人员；-   然后，我们需要一个协调员拿着话筒发号施令，统一控制这些测试人员的步调，协调员会向所有测试人员喊话，比如"1    号到 100 号测试人员现在开始执行登录操作，100 号到 1000 号测试人员 5    分钟后开始执行搜索操作"，同时协调员还会要求每个测试人员记录操作花费的时间；-   测试完成后，测试协调员会要求性能工程师分析测试过程中记录的数据。这个过程，如图 1 所示。![](Images/8333c9c87f5ea7bdac2378651c561b3e.png){savepage-src="https://static001.geekbang.org/resource/image/d9/43/d96d730ea9b63a9371149465af9d3143.png"}```{=html}```图 1 如果没有专用的后端性能测试工具，如何"人肉"开展后端性能测试```{=html}```理解了这种"人肉"模式的后端性能测试后，我们再回过头来看 LoadRunner的各个模块就豁然开朗了。-   测试协调员以及完成数据记录的部分就是 Controller 模块；-   大量的测试机器以及操作这些测试机器的人就是 Load Generator 模块；-   操作这些测试机器的人的行为就是 Virtual User Generator    产生的虚拟用户脚本；-   对测试数据的分析就是 Analysis 模块。
## LoadRunner 的主要模块通过对"人肉"模式和 LoadRunner 工具的类比，我们可以很清楚的看到，使用LoadRunner 进行性能测试，主要需要 Virtual UserGenerator、Controller（这个模块包含了 Load Generator），以及 Analysis这三大模块组合使用。接下来，我再和你详细聊聊这三大模块的作用，以及需要注意的问题。**第一，Virtual User Generator**Virtual UserGenerator，用于生成模拟用户行为的测试脚本，生成的手段主要是基于协议的录制，也就是由性能测试脚本开发人员在通过GUI执行业务操作的同时，录制客户端和服务器之间的通信协议，并最终转化为代码化的LoadRunner 的虚拟用户脚本。这样转化得到的虚拟脚本往往并不能被直接使用，还需要经历数据参数化（Parameterization）、关联建立（Correlation），以及运行时设置（RunTime Settings）等操作，然后才能用于性能测试场景中。具体什么是数据参数化、什么是关联建立、运行时设置都有哪些可选项，我会在分享实例时再详细展开。**第二，LoadRunner Controller**Controller 相当于性能测试执行的控制管理中心，负责控制 Load Generator产生测试负载，以执行预先设定好的性能测试场景；同时，它还负责收集各类监控数据。在实际执行性能测试时，Controller是和性能工程师打交道最多的模块，性能工程师会在 Controller 的 UI界面上完成性能测试场景的设计、运行时的实时监控、测试负载的开始与结束等操作。**第三，LoadRunner Analysis**Analysis 是 LoadRunner中一个强大的分析插件。它不仅能图形化展示测试过程中收集的数据，还能很方便地对多个指标做关联分析，找出它们之间的因果关系。它最根本的目的就是，分析出系统可能的性能瓶颈点以及潜在的性能问题。现在，你已经了解了 LoadRunner的原理和各个模块了，接下来我们就开始实战吧。通过这个实战，我希望你可以掌握如何基于LoadRunner 进行企业级的性能测试。从宏观角度来讲，基于 LoadRunner 完成企业级性能测试，可以划分为五个阶段：1.  性能需求收集以及负载计划制定；2.  录制并增强虚拟用户脚本；3.  创建并定义性能测试场景；4.  执行性能测试场景；5.  分析测试报告。图 2 清晰地描述了这 5 个阶段的先后顺序，以及需要 LoadRunner各模块发挥作用的部分。接下来，我和你详细聊聊每个阶段的具体工作，以及关键的技术细节。![](Images/faf80fd02fa805ba1ec244b36f7fdffe.png){savepage-src="https://static001.geekbang.org/resource/image/e8/94/e8e58ca14e80346be38291cf84bf2394.png"}```{=html}```图 2 使用 LoadRunner 完成企业级后端性能测试的典型流程与步骤```{=html}```