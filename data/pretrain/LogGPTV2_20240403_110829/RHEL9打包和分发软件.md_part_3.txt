    $ make clean
    rm cello
    $ make
    gcc -g -o cello cello.c
    $ ./cello
    Hello World from my very first patch!
    ```
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#arbitrary-artifacts_preparing-software-for-rpm-packaging}任意工件 {.title}
:::
与 UNIX 类似的系统使用文件系统层次结构标准(FHS)指定适合特定文件的目录。
从 RPM 软件包安装的文件按照 FHS
放置在其中。例如，可执行文件应进入一个位于系统 `$PATH`{.literal}
变量中的目录。
在本文档的上下文中，[*Arbitrary Artifact（任意工件）*]{.emphasis} 代表从
RPM 安装到系统的项。对于 RPM
和系统，它可以是脚本、从软件包的源代码编译的二进制代码、预编译二进制文件或任何其他文件。
以下小节描述了将 [*Arbitrary Artifacts*]{.emphasis}
放置到系统的两个常用方法：
::: itemizedlist
-   [使用 install
    命令](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#placing-arbitrary-artifacts-in-the-system-using-the-install-command_preparing-software-for-rpm-packaging "使用 install 命令在系统中放置任意工件"){.link}
-   [使用 make install
    命令](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#placing-arbitrary-artifacts-in-the-system-using-the-make-install-command_preparing-software-for-rpm-packaging "使用 make install 命令在系统中放置任意工件"){.link}
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#placing-arbitrary-artifacts-in-the-system-using-the-install-command_preparing-software-for-rpm-packaging}使用 install 命令在系统中放置任意工件 {.title}
:::
在构建自动化工具（如 [GNU
make](http://www.gnu.org/software/make/){.link}
）进行构建自动化工具时，打包程序通常使用 `install`{.literal}
命令；例如，打包程序不需要额外的开销。
`install`{.literal} 命令由
[coreutils](http://www.gnu.org/software/coreutils/coreutils.html){.link}
向系统提供，后者将工件放置在文件系统中具有指定权限集的文件系统中。
以下流程使用之前作为此安装方法创建的任意工件的 `bello`{.literal} 文件。
::: orderedlist
**步骤**
1.  运行 `install`{.literal} 命令，将 `bello`{.literal} 文件放入
    `/usr/bin`{.literal} 目录中，权限为可执行脚本：
    ``` literallayout
    $ sudo install -m 0755 bello /usr/bin/bello
    ```
    现在，`stllo`{.literal} 位于 `$PATH`{.literal} 变量中列出的目录中。
2.  从任何目录中执行 `bello`{.literal}，而不指定其完整路径：
    ``` literallayout
    $ cd ~
    $ bello
    Hello World
    ```
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#placing-arbitrary-artifacts-in-the-system-using-the-make-install-command_preparing-software-for-rpm-packaging}使用 make install 命令在系统中放置任意工件 {.title}
:::
使用 `make install`{.literal}
命令是自动安装构建软件到系统的方法。在这种情况下，您需要指定如何在由开发人员编写的
`Makefile`{.literal} 中向系统安装任意工件。
此流程演示了如何将构建工件安装到系统中所选位置。
::: orderedlist
**步骤**
1.  将 `install`{.literal} 部分添加到 `Makefile`{.literal} 中：
    `Makefile`{.literal}
    ``` literallayout
    cello:
    	gcc -g -o cello cello.c
    clean:
    	rm cello
    install:
    	mkdir -p $(DESTDIR)/usr/bin
    	install -m 0755 cello $(DESTDIR)/usr/bin/cello
    ```
    请注意，`cello:`{.literal}, `clean:`{.literal}, and
    `install:`{.literal} 下的行需要以一个 tab 空间开头。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    [\$(DESTDIR)](https://www.gnu.org/software/make/manual/html_node/DESTDIR.html){.link}
    变量是一个 [GNU make](http://www.gnu.org/software/make/){.link}
    内置变量，通常用于将安装指定到与根目录不同的目录中。
    :::
    现在，您只能使用 `Makefile`{.literal}
    来构建软件，也可以将其安装到目标系统。
2.  构建并安装 `cello.c`{.literal} 程序：
    ``` literallayout
    $ make
    gcc -g -o cello cello.c
    $ sudo make install
    install -m 0755 cello /usr/bin/cello
    ```
    因此，`cello`{.literal} 现在位于 `$PATH`{.literal}
    变量中列出的目录中。
3.  从任何目录中执行 `cello`{.literal}，而不指定其完整路径：
    ``` literallayout
    $ cd ~
    $ cello
    Hello World
    ```
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#preparing-source-code-for-packaging_preparing-software-for-rpm-packaging}为打包准备源代码 {.title}
:::
开发人员通常会将软件作为源代码的压缩存档分发，然后用于创建软件包。RPM
软件包程序与可用的源代码存档配合使用。
软件应通过软件许可证发布。
此流程使用
[GPLv3](https://www.gnu.org/licenses/quick-guide-gplv3.html){.link}
许可证文本，作为 `LICENSE`{.literal} 文件示例内容。
::: orderedlist
**步骤**
1.  `创建`{.literal} LICENSE 文件，并确保它包含以下内容：
    ``` literallayout
    $ cat /tmp/LICENSE
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.
    ```
:::
::: itemizedlist
**其他资源**
-   [本节中创建的代码](https://github.com/redhat-developer/rpm-packaging-guide/tree/master/example-code){.link}
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#putting-source-code-into-tarball_preparing-software-for-rpm-packaging}将源代码放入 tarball {.title}
:::
这部分论述了如何将引入的三个 `Hello World`{.literal} 程序都放在 gzip 的
[gzip](https://www.gnu.org/software/gzip/){.link}- 压缩 tarball
中，这也是以后发布软件的常用方法。[???](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "什么是源代码"){.link}
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#bello-into-tarball_preparing-software-for-rpm-packaging}
**例 2.4. 将 bello 项目放入 tarball**
::: example-contents
[*bello*]{.emphasis} 项目在
[bash](https://www.gnu.org/software/bash/){.link} 中实施
`Hello World`{.literal}。该实施仅包含 `bello`{.literal} shell
脚本，因此生成的 `tar.gz`{.literal} 存档除 `LICENSE`{.literal}
文件外仅有一个文件。
此流程演示了如何准备要分发的 [*bello*]{.emphasis} 项目。
::: title
**先决条件**
:::
在这里，这是计划的 `0.1`{.literal} 版。
::: orderedlist
**步骤**
1.  将所有需要的文件放入一个目录中：
    ``` literallayout
    $ mkdir /tmp/bello-0.1
    $ mv ~/bello /tmp/bello-0.1/
    $ cp /tmp/LICENSE /tmp/bello-0.1/
    ```
2.  为分发创建存档并将其移动到 `~/rpmbuild/SOURCES/`{.literal}
    目录，这是 `rpmbuild`{.literal} 命令存储构建软件包的默认目录：
    ``` literallayout
    $ cd /tmp/
    $ tar -cvzf bello-0.1.tar.gz bello-0.1
    bello-0.1/
    bello-0.1/LICENSE
    bello-0.1/bello
    $ mv /tmp/bello-0.1.tar.gz ~/rpmbuild/SOURCES/
    ```
:::
有关 bash 编写的示例源代码的更多信息，请参阅[使用 bash 编写 Hello
World](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-bash_preparing-software-for-rpm-packaging "例 2.1. 使用 bash 编写的 hello World"){.link}。
:::
:::
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#pello-into-tarball_preparing-software-for-rpm-packaging}
**例 2.5. 将 pello 项目放入 tarball**
::: example-contents
[*pello*]{.emphasis} 项目使用 [Python](https://www.python.org/){.link}
实施 `Hello World`{.literal}。该实施仅包含 `pello.py`{.literal}
程序，因此生成的 `tar.gz`{.literal} 存档除 `LICENSE`{.literal}
文件外有一个文件。
此流程演示了如何准备用于分发的 [*pello*]{.emphasis} 项目。
::: title
**先决条件**
:::
在这里，这是计划的 `0.1.1`{.literal} 版本。
::: orderedlist
**步骤**
1.  将所有需要的文件放入一个目录中：
    ``` literallayout
    $ mkdir /tmp/pello-0.1.2
    $ mv ~/pello.py /tmp/pello-0.1.2/
    $ cp /tmp/LICENSE /tmp/pello-0.1.2/
    ```
2.  为分发创建存档并将其移动到 `~/rpmbuild/SOURCES/`{.literal}
    目录，这是 `rpmbuild`{.literal} 命令存储构建软件包的默认目录：
    ``` literallayout
    $ cd /tmp/
    $ tar -cvzf pello-0.1.2.tar.gz pello-0.1.2
    pello-0.1.2/
    pello-0.1.2/LICENSE
    pello-0.1.2/pello.py
    $ mv /tmp/pello-0.1.2.tar.gz ~/rpmbuild/SOURCES/
    ```
:::
有关 Python 编写的示例源代码的更多信息，请参阅 [使用 Python 编写 Hello
World](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-python_preparing-software-for-rpm-packaging "例 2.2. 使用 Python 编写 hello World"){.link}。
:::
:::
::: example
[]{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#cello-into-tarball_preparing-software-for-rpm-packaging}
**例 2.6. 将 cello 项目放入 tarball**
::: example-contents
[*cello*]{.emphasis} 项目使用 C 实施 `Hello World`{.literal}。实施仅包含
`cello.c`{.literal} 和 `Makefile`{.literal} 文件，因此生成的
`tar.gz`{.literal} 存档除了 `LICENSE`{.literal} 文件外有两个文件。
请注意，`patch`{.literal} 文件并没有在程序的归档中发布。构建 RPM
软件包时，RPM 软件包程序应用补丁。补丁和 `.tar.gz`{.literal}
存档一起放置在 `~/rpmbuild/SOURCES/`{.literal} 目录中。
此步骤演示了如何准备用于分发的 [*cello*]{.emphasis} 项目。
::: title
**先决条件**
:::
认为这是程序版本 `1.0`{.literal}。
::: orderedlist
**步骤**
1.  将所有需要的文件放入一个目录中：
    ``` literallayout
    $ mkdir /tmp/cello-1.0
    $ mv ~/cello.c /tmp/cello-1.0/
    $ mv ~/Makefile /tmp/cello-1.0/
    $ cp /tmp/LICENSE /tmp/cello-1.0/
    ```
2.  为分发创建存档并将其移动到 `~/rpmbuild/SOURCES/`{.literal}
    目录，这是 `rpmbuild`{.literal} 命令存储构建软件包的默认目录：
    ``` literallayout
    $ cd /tmp/
    $ tar -cvzf cello-1.0.tar.gz cello-1.0
    cello-1.0/
    cello-1.0/Makefile
    cello-1.0/cello.c
    cello-1.0/LICENSE
    $ mv /tmp/cello-1.0.tar.gz ~/rpmbuild/SOURCES/
    ```
3.  添加补丁：
    ``` literallayout
    $ mv ~/cello-output-first-patch.patch ~/rpmbuild/SOURCES/
    ```
:::
有关 C 编写的示例源代码的更多信息，请参阅[使用 C 编写 Hello
World](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-c_preparing-software-for-rpm-packaging "例 2.3. 使用 C 语言编写的 hello World"){.link}。
:::
:::
:::
:::
[]{#packaging-software_packaging-and-distributing-software.html}
::: chapter
::: titlepage