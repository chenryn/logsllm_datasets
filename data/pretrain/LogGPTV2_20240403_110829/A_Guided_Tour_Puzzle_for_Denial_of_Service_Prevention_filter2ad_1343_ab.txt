Our threat model assumes a stronger attacker than all
previous schemes. First we assume an attacker can have best
commercially available hardware and bandwidth resources.
Meanwhile, attacker can coordinate all of her available
computation resources perfectly so as to take maximum
advantage of the resources. Next, attacker can eavesdrop
on all messages sent between a server and any legitimate
client. We assume that attacker can modify only a limited
number of clients’ messages that are sent to the server. This
assumption is reasonable since if an attacker can modify all
clients’ messages, then she can launch DoS much easily just
by dropping all messages sent by all clients to the server.
Attacker can attack any part of the puzzle scheme,
whether it is puzzle construction, puzzle distribution, or
puzzle veriﬁcation. Attacker can try to launch denial of
service attack on new components that introduced by our
puzzle scheme. Attacker may also attempt to solve puzzles
faster than legitimate clients using various methods, such as
guessing, correlating previous puzzle answers etc.
281
C. Basic Scheme
We consider an Internet-scale distributed system of clients
and servers. Attacker is a malicious entity whose aim is to
prevent legitimate clients from receiving service of a server.
A server operates as a standard server if it is not under attack.
When the server suspects it is under attack or its load is
above certain threshold, it replies to all client requests with a
‘service restricted’ message, indicating that a puzzle needs to
be solved in order to receive service. A client then completes
a tour puzzle by visiting a set of special nodes called tour
guides, in a certain sequential order. Nodes within or outside
of a server’s domain can assume the role of tour guides. A
single tour guide might appear multiple times during a tour,
so a stop is used to represent a single appearance of a tour
guide in a tour.
A client computes the index of the tour guide at the ﬁrst
stop using a hash value inside the server’s ‘service restricted’
message, and it can lookup the address of the tour guide at
the ﬁrst stop, or any other tour guide for that matter, from
a mapping of indices to tour guide address. Then starting
from the ﬁrst stop, the client contacts each stop and receives
a reply message each containing a unique hash value. The
hash value in the reply message from previous stop is used
for computing the index of the next stop tour guide, and also
sent to the next stop as one of the inputs to the calculation
of the next hash value. Reply message from the tour guide at
the last stop contains a hash value, which will be sent to the
server as puzzle answer. The server grants the client service
if the answer is valid. The rest of the section describes
guided tour puzzle in more detail using formal notations.
First, we set up N tour guides in the system, where N
must be at least two. The server establishes a shared secret
kjs with each tour guide Gj using a secure channel, where
0 ≤ j < N. The server also generates a short-lived secret
key Ks for calculating the ﬁrst hash value returned to a
client in a tour. The difﬁculty of a puzzle is controlled by
the tour length L in the guided tour puzzle. Figure 1 shows
an example of a guided tour when N = 2 and L = 5.
Figure 1. Example of a guided tour when N = 2 and L = 5. The order
of the tour is: G1→G0→G1→G1→G0.
Notations we used for describing guided tour puzzle is
summarized in Table I.
1) Operation at the server:
• When the server receives a request from client x
without a puzzle answer attached, it replies with a 2-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:31 UTC from IEEE Xplore.  Restrictions apply. 
NOTATIONS USED IN DESCRIBING GUIDED TOUR PUZZLE SCHEME.
Table I
Ax
Gj
N
kjs
Ks
Sl
L
ts
hash
B
Address of client x
j-th tour guide, where 0 ≤ j < N
Number of tour guides in the system
Shared key between the server and j-th tour guide
Secret key only known to the server
Index of the tour guide at the l-th stop, where 0 ≤ l < L
Length of a guided tour
Timestamp
A cryptographic hash function
Size of a hash digest in bits
tuple (h0, L) as a puzzle. The server computes hash
value h0 by
h0 = hash(Ax||L||ts||Ks)
(1)
where, || means concatenation, Ax is the address (or
any unique value) of the client x, ts is a coarse times-
tamp, and hash is a cryptographic hash function such
as SHA-1 [10]. The granularity of ts can be decided
based on the minimum time it takes to complete the
tour on average.
• When the server receives a request from client x with
a puzzle answer (h0, hL) attached, it ﬁrst checks to see
if h0 sent by the client is equal to the h0 computed
using formula (1). If so, the server further veriﬁes hL
by computing hL using formula (2). Since the server
has shared keys k1s, k2s, . . . , kN s, it can compute the
chain of hashes without contacting any tour guide.
2) Operation at a tour guide: When a tour guide Gj
receives a 3-tuple (hl, l + 1, L) from a client x, it replies
with a hash value hl+1 which is computed by
hl+1 = hash(hl||l + 1||L||Ax||ts||kjs)
(2)
where, l + 1 means the tour guide Gj is at the (l + 1)-th
stop of the client’s tour, and 0 ≤ l < L.
3) Operation at a client:
• When client x receives a 2-tuple (h0, L) from the server
as a reply to its service request, the client understands
it has to ﬁnish a length L guided tour before it can
receive service. So, client starts its tour by computing
S1, the index of the ﬁrst tour guide in the tour, using
formula (3). The client then sends a 3-tuple (h0, 1, L)
to the tour guide GS1.
• When client x receives a hash value hl from a tour
guide during its tour, it computes the index of the next
tour guide Sl+1 by
Sl+1 = (hl mod N)
(3)
The client then sends a 3-tuple (hl, l +1, L) to the tour
guide GSl+1.
• When client x receives hash value hL from the tour
guide at the last stop of the tour, it re-sends its original
282
service request together with the puzzle answer (h0,
hL) to the server. The client receives service after its
puzzle answer veriﬁed by the server.
Each hash value in a tour puzzle is computed using the
previous hash value as one of its inputs. A client is forced to
wait until it receives hl from the l-th stop before it can ask
(l + 1)-th stop to send hl+1. Thus the main time consumed
at the client is the round-trip delay, and the time spend at
the client for calculating the next stop is trivial.
Next, we present a few improvements to the basic scheme
we just introduced.
IV. IMPROVEMENTS TO THE BASIC SCHEME
Although our basic scheme already has many advantages
over existing puzzle schemes, there is still room for much
improvement. In this section, we ﬁrst improve the fault-
tolerance and robustness of tour guides. Then, we modify the
puzzle veriﬁcation at the server to increase its veriﬁcation
efﬁciency.
A. Tour Guides
In the guided tour puzzle scheme, we introduced multiple
tour guides to share the server’s workload of managing
puzzles. An attacker might adopt her strategy and attack one
of the tour guides, and indirectly launch DoS attack on the
server. Moreover, in the basic scheme, the failure of a single
tour guide affects many clients in the system. Speciﬁcally,
the probability of a failed tour guide never appearing in a
single tour is ( N−1
N )L, assuming that a tour guide appearing
at the stop i and stop j are independent events for any
i < L, j < L and i (cid:54)= j. The probability of none of the
M tours include the failed tour guide is ( N−1
N )M×L, which
is a very small number for a large value of M and L.
We propose two improvements to the basic scheme in
order to achieve better fault-tolerance as well as robustness
against DoS on the tour guides.
1) Two operation modes of tour guides: This improve-
ment deﬁnes each tour guide to operate in two different
modes: active and tarpit. When a tour guide is in active
mode, it behaves the same as in the basic scheme with slight
difference. However, when a tour guide is in tarpit mode, it
prevents a malicious client from completing any tour and
directs the malicious client to other tarpit tour guides to
keep it busy. A tour guide considers a client malicious if
the client contacts it during its tarpit mode period, since an
honest client who is following the exact guidance of active
tour guides will never be directed to a tarpit tour guide.
We divide the time into smaller time periods of length t,
where t is on the order of several minutes, and use Ti to
denote the i-th time period. All tour guides share a common
secret kcs with the server. The server or any tour guide can
compute the mode aGj of a tour guide Gj for the time period
Ti, by
aGj = LSB[hash(j||Ti||kcs)]
(4)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:31 UTC from IEEE Xplore.  Restrictions apply. 
where, j is the index of the tour guide Gj, LSB[·] means
the least signiﬁcant bit. This state information can be stored
in an array T GS[ ], where T GS[j] = aGj . As we can see,
aGj takes a value of 0 or 1, where 0 denotes a tarpit mode
and 1 denotes an active mode. Since lower bits of output of
a secure hash function is uniformly distributed [11], we can
be certain that on average 50% of the tour guides will be in
active mode, while the remaining half is in the tarpit mode.
The operation on a client is essentially the same as in
the basic scheme, except now the client does not have to
compute the index of next tour guide since it will be given
in the reply message from the previous tour guide. Only the
operations on the server and tour guides that are different
from the ones in the basic scheme are described in the
following.
Operation on the server: When the server receives a
request from client x without a puzzle answer attached, it
replies with a 3-tuple (h0, L, S1), where S1 is computed
using the function introduced next.
Operation on a tour guide: When a tour guide Gj
receives a 3-tuple (hl, l + 1, L) from a client x, there are
two cases depending on the current mode of Gj.
• T GS[j] = 1 (active). The tour guide replies with a
2-tuple (hl+1, Sl+1), where the index Sl+1 can be
computed using the simple function given below:
d ⇐ hl+1 mod N
while T GS[d] (cid:54)= 1 do
d ⇐ d + 1
end while
Sl+1 ⇐ d
• T GS[j] = 0 (tarpit). The tour guide replies with a 2-
tuple (r, ˆSl+1), where r is a B bit random number, ˆSl+1
is computed in the exact opposite way of computing
Sl+1. That is, instead of ﬁnding the index of next active
tour guide, it ﬁnds the index of next tarpit.
The rationale behind adopting a tarpit mode for tour guide
is as follows. Attacking a tarpit tour guide does not have any
effect on legitimate clients, since legitimate clients will never
visit a tarpit tour guide. A better strategy for the attacker is
to ﬁgure out the tour guides in active mode during each time
period, and only attack these active guides. In order to do
that, an attacker has to follow the exact guidance of the tour
guides to ﬁnish multiple tours during each Ti, since one tour
might not include all active tour guides for that time period.
Therefore, by the time the attacker ﬁgures out all active tour
guides by completing one or multiple tours, an active tour
guide will most likely switch into tarpit mode.
2) Puzzle construction at
the server: We can further
improve the fault-tolerance of tour guides by allowing a
client to contribute some randomness to the computation
of the hash value h0 in formula (1). The client x sends a
randomly generated nounce nx to the server, and the server
283
will compute h0 using the new formula
h0 = hash(nx||Ax||L||ts||Ks)
(5)
By sending different nx, client x can affect the value
h0, consequently affecting the entire tour in an ‘uncertain’
manner. Here, ‘uncertain’ means that client x can experience
different guided tour by sending different nx, but it cannot
decide which tour guides will be in the tour and in what
order. The beneﬁt of adopting such a modiﬁcation is that a