to derive keys with
HKDF.
These keys are used
for the symmetrical
encryption.
4. PASSWORD
SHARING
Send Wi-Fi PSK and
SSID to the requestor.
PWS BLE advertisement
SSID, AppleID, mail address, phone number
Connect over BLE
PWS Start Request (PWS1)
sessionID, PWS version
PWS Start Response (PWS2)
PWS version
Pair–Verify Start Request (M1)
Public key (Pc)
Pair–Verify Start Response (M2)
Public key (Ps), signature (σs), Vs, Cs
Pair–Verify Start Finish Request (M3)
authentication key
Pair–Verify Start Finish Response (M4)
Advertises hashes
of the SSID and its
hashes of its own
contact info.
The requestor provides
a GATT server, which
is used to transmit the
data.
A Curve25519 key
pair is generated. The
public keys are ex-
changed.
Both public keys are
signed using the Apple
ID certiﬁcate
Validation data is used
to prove the identity
of the requestor.
PWS Info (PWS3)
Wi-Fi PSK, SSID
PWS ACK Response (PWS4)
Figure 6: PWS protocol overview.
The PWS protocol consists of four phases that we depict in
Fig. 6: (1) the discovery phase that uses BLE advertisement
to bootstrap the protocol (Section 4.2.3), (2) the initialization
phase transmits protocol metadata (Section 4.2.4), (3) the
authentication phase where the requestor proves its identity to
the grantor and one symmetrical key is derived (Section 4.2.5),
and, ﬁnally, (4) the sharing phase that transfers the pre-shared
key (PSK) for the requested Wi-Fi network (Section 4.2.4).
In the following, we ﬁrst describe the protocol requirements
and discuss the basic BLE data transport. We then discuss the
four main protocol phases in detail.
4.2.1 Requirements
We believe that Apple aimed to solve the problem of Wi-Fi
password sharing with minimal user interaction. Their design
has the following requirements [7]: (1) The grantor needs to
have the contact information (phone number or email address)
of the requestor stored in its address book. (2) The grantor
needs to be unlocked. (3) The requestor needs to be signed in
with an Apple ID. (4) Both devices need to have Bluetooth
enabled.
4.2.2 BLE Data Transport and Frame Format
All messages sent and received are transmitted over BLE
using the value property of a GATT characteristic. The re-
questor acts as a GATT server to which the grantor connects
to. The grantor sends messages to the requestor by writing to
(a) Requestor.
(b) Grantor.
Figure 5: The password view on a requestor and the password
sharing dialog on a grantor.
ward, the client requests and receives the application-speciﬁc
payload (P3 and P4).
The HO developer API offers the ability to transfer ad-
ditional data by setting up a direct socket connection from
the server application to the client application.9 If speciﬁed
by the developer, sharingd opens a TLS connection (Long
Payload Transfer in Fig. 4) and passes the open socket to the
requesting application. The TLS connection authenticates
both sides by using the same Apple ID certiﬁcates and vali-
dation records used for AirDrop [44] and PWS (Section 4.2).
We have found that the same protocol is also used by UC to
transfer clipboard contents that are larger than 10 240 bytes.
In that case, UC uses the P3 and P4 messages to bootstrap the
TLS connection.
4.2 Wi-Fi Password Sharing
Apple also uses BLE to implement a service called PWS,
which enables users to share known Wi-Fi password with
guests and friends. This service aims to solve the usual hassle
of manually entering the password, which can sometimes be
challenging if the password is complex or not at hand.
In the following, we call the device that searches for a
Wi-Fi password requestor and the device that shares the pass-
word grantor.
PWS is initiated automatically when the password view
(in Fig. 5a) is open after selecting an SSID to connect to.
No further user interaction is necessary from the user of the
requestor. Surrounding devices are notiﬁed about the PWS
as long as the password view is open. If a grantor is in range,
the password sharing dialog (in Fig. 5b) pops up, asking the
user to share the password. If the grantor accepts, it sends
the encrypted password to the grantor. Potentiality already
entered characters in the password text ﬁeld are overwritten,
the shared password is inserted, and the device automatically
tries to connect to the Wi-Fi network.
9https://developer.apple.com/documentation/foundation/
nsuseractivity/1409195-supportscontinuationstreams
USENIX Association
30th USENIX Security Symposium    3925
0
1
2
3
TLV type
0x0f
TLV length
0x11
Action ﬂags
0xc0
Action type
0x08
5
6
4
Authentication tag
Grantor
Client
Contact hash 0
Contact hash 2
Contact hash 1
SSID hash
Figure 7: PWS advertisement frame format.
Requestor
Server
Pair–Verify Start Response (M2)
0x13: OPACK encoded payload
pd
TLV8
3
6
5
Public Key (Ps)
State (0x02)
Encrypted content (ChaCha20) - TLV8
this GATT characteristic. The characteristic also supports the
notify ﬂag, which is used by the requestor to respond. Even
though the maximum payload length of the GATT character-
istic is set to 512 bytes, the payload is split into packets of
101 bytes at the most. To be able to reassemble the complete
payload on the other end, the length of the payload is included
in the ﬁrst 2 bytes of the ﬁrst packet.
The GATT characteristic supports multiple services. To
support this, every payload is wrapped is wrapped in a SF-
Session10 frame. This frame consists of service type and a
frame type, followed by the actual payload. The service type
is constant for a speciﬁc service. For example, PWS uses
the service type 0x07. The frame type is used to differentiate
between different frames of the same service.
NSDataCompressed(Cs)
9
10 σs = Signature(Cs, SHA512(PcPs))
20
NSDataCompressed(Vs)
Figure 8: Start Response (M2) in Pair–Verify authentication
showing the multi-level encapsulation.
The ﬁrst message (PWS3) is sent by the grantor and contains
the Wi-Fi PSK, the SSID, and the hashed contact identiﬁers
of the grantor. The requestor responds (PWS4) to inform the
grantor that the sharing was successful.
Note that it is unclear to us why the grantor sends its contact
identiﬁers as the requestor never uses them. We discuss this
issue in Section 5.
4.2.3 Discovery with BLE Advertisements
4.2.5 Authentication via Extended Pair–Verify
The requestor sends out BLE advertisements to inform sur-
rounding devices. The frame format follows the same base
structure as for HO/UC in Section 4.1.2 but uses a separate
type. Figure 7 shows the frame format for the PWS advertise-
ment with TLV8 type 0x0f. The payload includes the ﬁrst 3
bytes of the SHA-256 hash of the owner’s Apple ID, email
address, phone number, and the SSID for which the requestor
requests a password.
Surrounding devices check whether any of their contacts
match one of the hashed contact identiﬁers and whether they
have a password for the provided SSID hash. If both checks
succeed, the grantor prompts its user with the password shar-
ing dialog (Fig. 5b).
4.2.4 Initialization and Wi-Fi Password Sharing
In the initialization phase, two messages are exchanged; both
are OPACK encoded dictionaries. The grantor sends the ﬁrst
packet (PWS1) that contains an unused random 4-byte session
ID and a protocol version. The requestor responds (PWS2)
with its protocol version. After receiving the PWS2 message,
the grantor starts the authentication phase as described in
Section 4.2.5. Once the handshake is complete, both devices
have computed the same shared secret, from which, in the
ﬁnal phase, two keys are derived using HKDF [27], one for
each direction. These keys are then used to encrypt both
messages with ChaCha20-Poly1305 [37]. The encrypted
content is in both messages an OPACK encoded dictionary.
10We found the name during the binary analysis.
To authenticate and encrypt the actual Wi-Fi password, a Pair–
Verify handshake is performed, which derives a shared secret
and proves the identity of the requestor to the grantor. A
similar version of the Pair–Verify protocol is used in Apple’s
HAP [6]. However, we have found that Apple uses a custom
variation that enables authentication via a user’s Apple ID.
The Pair–Verify protocol consists of 4 messages, shown in
Fig. 6. All messages are encoded using OPACK and contain
a dictionary with one key-value pair, the key pd, and a TLV8
structure as the value. This TLV8 contains the values we now
describe for each message.
First, the grantor generates an ephemeral Curve25519 key
pair for the new session and sends a start request (M1) con-
taining the public key Pc. Upon reception, the requestor
generates another key pair. The start response (M2) contains
the requestor’s generated public key Ps, an Apple ID certiﬁ-
cate Cs, an Apple ID validation record Vs, and a signature
σs, as shown in Fig. 8. All ﬁelds except the public key are
encrypted using ChaCha20 [37] with a key derived from the
shared secret and HKDF [27]. The encrypted ﬁelds are packed
in another TLV8. Both, Apple ID certiﬁcate and validation
record, are signed by Apple and are also used in the AirDrop
protocol [44]. The validation record is tied to the Apple ID
certiﬁcate with a universally unique identiﬁer (UUID). In
particular, the UUID is included in the validation record and
the common name of the certiﬁcate. The validation record
also contains Apple-validated contact identiﬁers and is used
by the grantor to validate the identity of the requestor. The
Apple ID certiﬁcate is used to sign both public keys, i. e.,
3926    30th USENIX Security Symposium
USENIX Association
Vulnerability and attack
Sec.
Impact and severity
Mitigation
DoS via IV desynchronization
Tracking via linear IV
Tracking via async. randomization
5.2
5.3
5.4
MitM via Wi-Fi password auto-ﬁll
5.5
DoS via settings app crash
5.6
+ User is unable to use the HO/UC services
++ Attacker can track devices over a long period, even across the
MAC address randomization interval
—
—
++ same as above
+++ Attacker (1) has full control over client network trafﬁc allow-
ing for, e. g., DNS spooﬁng, and (2) can compromise the device
by exploiting vulnerabilities in the Safari web browser
++ User is unable to connect to a new password-protected Wi-Fi
network
iOS 13.4, macOS 10.15.4
(no CVE)
—
iOS 13.5, macOS 10.15.5
(CVE-2020-9827)
Table 3: Overview of discovered vulnerabilities and their real-world impact for iOS and macOS. We rate the severity from low
(+) to high (+++). Under mitigation, ‘—’ means that Apple has not yet conﬁrmed or provided a ﬁx for the vulnerability. We
provide details on the responsible disclosure process at the end of this paper.
σs = sign(Pc + Ps,ks), which proves to the grantor that the
device sending this data, in fact, owns the private key ks cer-
tiﬁed by Cs. This signature is also included in the encrypted
TLV8. In the ﬁnish request (M3), the grantor encrypts an
empty string and sends the cipher, which includes a 16-byte
Poly1305 authentication tag, to the requestor. Finally, the
ﬁnish response (M4) contains a ﬁxed state byte (0x4) and
completes the handshake.
5 Security and Privacy Analysis
Based on our results from reverse-engineering several Con-
tinuity protocols, we conduct a comprehensive security and
privacy analysis of the iOS and macOS platforms. In particu-
lar, we discover a protocol-level DoS attack on HO and UC
(Section 5.2), a device tracking attack that exploits the asyn-
chronous randomization interval of several device identiﬁers
(Section 5.4), a MitM attack on PWS that causes a victim to
connect to an attacker-controlled Wi-Fi network (Section 5.5),
and a DoS attack against PWS that prevents a user from con-
necting to a new Wi-Fi network (Section 5.6). We a provide
a mitigation to a previously [34] discovered device tracking
vulnerability (Section 5.3). We provide an overview of the
vulnerabilities in Table 3. In the following, we ﬁrst describe
the common attacker model and then discuss in detail the
individual vulnerabilities, the attack implementations, and
propose practical mitigations for the identiﬁed issues.
5.1 Attacker Model
For the following attacks, we consider adversaries that:
• have access to a Bluetooth Low Energy radio and, for
the attack presented in Section 5.5, a Wi-Fi radio that