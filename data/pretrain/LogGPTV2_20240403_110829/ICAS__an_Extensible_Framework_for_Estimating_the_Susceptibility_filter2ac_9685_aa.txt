title:ICAS: an Extensible Framework for Estimating the Susceptibility
of IC Layouts to Additive Trojans
author:Timothy Trippel and
Kang G. Shin and
Kevin B. Bush and
Matthew Hicks
ICAS: an Extensible Framework for Estimating the
Susceptibility of IC Layouts to Additive Trojans
Timothy Trippel∗, Kang G. Shin
Computer Science & Engineering
University of Michigan
Ann Arbor, MI
{trippel,kgshin}@umich.edu
Kevin B. Bush
Cyber Physical Systems
MIT Lincoln Laboratory
Lexington, MA
PI:EMAIL
Matthew Hicks∗†
Computer Science
Virginia Tech
Blacksburg, VA
PI:EMAIL
Abstract—The transistors used to construct Integrated Cir-
cuits (ICs) continue to shrink. While this shrinkage improves
performance and density, it also reduces trust: the price to build
leading-edge fabrication facilities has skyrocketed, forcing even
nation states to outsource the fabrication of high-performance
ICs. Outsourcing fabrication presents a security threat because
the black-box nature of a fabricated IC makes comprehensive
inspection infeasible. Since prior work shows the feasibility of
fabrication-time attackers’ evasion of existing post-fabrication
defenses, IC designers must be able to protect their physical
designs before handing them off to an untrusted foundry. To this
end, recent work suggests methods to harden IC layouts against
attack. Unfortunately, no tool exists to assess the effectiveness of
the proposed defenses, thus leaving defensive gaps.
This paper presents an extensible IC layout security analysis
tool called IC Attack Surface (ICAS) that quantiﬁes defensive
coverage. For researchers, ICAS identiﬁes gaps for future de-
fenses to target, and enables the quantitative comparison of
existing and future defenses. For practitioners, ICAS enables
the exploration of the impact of design decisions on an IC’s
resilience to fabrication-time attack. ICAS takes a set of metrics
that encode the challenge of inserting a hardware Trojan into an
IC layout, a set of attacks that the defender cares about, and a
completed IC layout and reports the number of ways an attacker
can add each attack to the design. While the ideal score is zero,
practically, we ﬁnd that lower scores correlate with increased
attacker effort.
To demonstrate ICAS’ ability to reveal defensive gaps, we
analyze over 60 layouts of three real-world hardware designs (a
processor, AES and DSP accelerators), protected with existing
defenses. We evaluate the effectiveness of each circuit–defense
combination against three representative attacks from the litera-
ture. Results show that some defenses are ineffective and others,
while effective at reducing the attack surface, leave 10’s to 1000’s
of unique attack implementations that an attacker can exploit.
Index Terms—Hardware Security; Fabrication-time Attacks
and Defenses; VLSI
I. INTRODUCTION
The relationship between complexity and security seen in
software also holds for Integrated Circuits (ICs). Since the in-
ception of the IC, transistor sizes have continued to shrink. For
example, compare the 10 µm feature size of the original Intel
4004 processor [1] to the 10 nm feature size of Intel’s recently
* Work completed at MIT Lincoln Laboratory.
† Corresponding faculty author
announced Ice Lake processor family [2]. Smaller transistors
enable IC designers to create increasingly complex circuits
with higher performance and lower power-usage. However,
continuing this trend pushes the laws of physics and comes
at a substantial cost: building a 3 nm fabrication facility is
estimated to cost $15–20B [3].
Such costs are prohibitive for not only most semiconductor
companies, but also nation states. Thus, most hardware
design houses are fabless, i.e., while they are able to fully
design and lay out an IC, they must outsource its fabrication.
Outsourcing combined with the black-box nature of testing
a fabricated IC requires fabless semiconductor companies to
trust that their physical designs will not be altered maliciously
by the foundry, also known as a fabrication-time attack.
Previous work demonstrates several ways a fabrication-time
attacker can insert a hardware Trojan into an otherwise trusted
IC [4]–[6]. A2 [6] demonstrates the most stealthy and control-
lable IC fabrication-time attack to date, whereby a hardware
Trojan with a complex, yet stealthy, analog trigger circuit is
inserted into the ﬁnalized layout of a processor. Even though
the inserted Trojan is small, the attacker can trigger it and
escalate to a persistent software-level attack (i.e., a hardware
foothold [7]) using only user-mode code.
Early work focuses on post-fabrication detection of hard-
ware Trojans in ICs [8]. Broadly, there are two classes of
detection: 1) side-channel analysis and 2) Trojan-activation
via functional testing. Side-channel (power, timing, etc.) anal-
ysis [9]–[12] assumes that the Trojan’s trigger is complex (i.e.,
many logic gates), and thus noticeably changes the physical
characteristics of the chip. For example, inserting the large
amount of extra logic required by a complex trigger into a
design alters the power signature of the device. Alternatively,
Trojan-activation via functional testing assumes that the Tro-
jan’s trigger is simple (i.e., few logic gates [4], [5]), and is
thus easily activated by test vectors. Unfortunately, layering
detection classes is not sufﬁcient as it is shown possible to
create an attack that is both small and stealthy [6].
To address the gaps left by post-fabrication Trojan detection
schemes, recent work focuses on pre-fabrication, IC layout-
level, Trojan prevention [13]–[15]. IC layout-level defenses
work by:
1) increasing placement & routing resource utilization
2) increasing congestion around security-critical design
components.
The lack of resources deprives the attacker of the required
transistors needed to implement
their Trojan trigger/attack
circuits, and the increased congestion around security-critical
wires acts as a barrier for the attacker attempting to integrate
their Trojan into the victim design. Ideally, defenders utilize
just enough resources and create enough congestion such that
the attacker cannot implement and insert their attack, while
keeping the design routable. Short of that, the added barriers
require the attacker to expend signiﬁcantly more resources
(e.g., time) to insert their attack into an IC layout.1
Two IC layout-level defensive approaches exist: undirected
and directed. Undirected approaches aim to (probabilistically)
increase resource utilization and congestion across the entire
layout by altering existing place-and-route parameters (e.g.,
core density [15]) that will likely result in increased resource
utilization and congestion. More recently, a line of directed
approaches have emerged [13], [16] that systematically in-
crease utilization of speciﬁc-regions of the device layer, i.e.,
nearby security-critical components. Given that it is infeasible
to occupy the entire device layer in a tamper-evident man-
ner [13], [16], both classes of approaches may leave IC layouts
vulnerable to attack by an untrusted foundry.
To identify gaps in existing defenses and guide future IC
layout-level defenses, we design and implement an extensible
measurement framework that estimates the susceptibility of
an IC layout to foundry-level additive Trojan attacks. Our
framework, IC Attack Surface (ICAS), estimates resilience in
three dimensions that capture the essence and difﬁculty of
inserting a hardware Trojan at an untrusted foundry:
1) Trojan logic placement: ﬁnding unused space to place
load portions of the hardware Trojan
A successful attack requires all three steps.
Using ICAS, we analyze over 60 different IC layouts across
three fully-functional ASIC designs: an AES accelerator, a
DSP accelerator, and an OR1200 processor. For each lay-
out, ICAS reports the coverage against four additive Trojan
attacks [6], [7], [17], [18] that span the digital and analog
domain as well a range of attack outcomes. ICAS’s analysis re-
veals that all existing IC layout-level defenses are incomplete,
leaving 1000’s of opportunities for an attacker at an untrusted
foundry to insert a hardware Trojan. An additional ﬁnding is
that even though most existing countermeasures do increase
the complexity of inserting a hardware Trojan, some coun-
termeasures are ineffective. Lastly, ICAS’s analysis suggests
that focusing on exhausting resources on the device layer (i.e.,
transistors) is an incomplete defense; future defenses should
also aim to increase congestion around security-critical wires.
1Time is the most critical resource for the attacker as IC fabrication is
usually bounded in terms of turnaround time.
additional circuit components
2) Victim/Trojan integration: attaching hardware Trojan
payload to security-critical logic
3) Intra-Trojan routing: connecting the trigger and pay-
Fig. 1. The typical IC design process starts with a textual speciﬁcation of
design requirements and ends with a fabricated and tested chip. Green check-
boxes mark trusted stages and red x-boxes mark the untrusted step (i.e., an
untrusted foundry). The fabrication step takes a GDSII ﬁle (physical IC layout)
as input and produces a wafer of die. While prior work proposes metrics for
untrusted front-end design [17], [21]–[23], no mechanism exists for measuring
an IC layout’s resilience to an untrusted foundry.
This paper makes the following contributions:
• We propose an extensible methodology that estimates the
difﬁculty of inserting additive hardware Trojans into an
existing IC layout by an untrusted foundry.
• We design, implement, and open-source [19], [20] our ex-
tensible framework, ICAS, that computes various layout-
speciﬁc security metrics. The ICAS framework provides
an interface to programmatically query the physical lay-
out of an IC (encoded in the GDSII format) to com-
pute various security metrics with respect to attacks-of-
interest.
• We use ICAS to estimate the effectiveness and expose the
gaps of previously-proposed untrusted foundry defenses
by analyzing over 60 IC layouts of three real-world
hardware cores.
• We identify future directions for defenses that work in a
layered fashion with existing defenses.
II. BACKGROUND
A. IC Design Process
Figure 1 shows the typical IC design process [24], which
consists of three main phases: 1) front-end design, 2) back-
end design, and 3) fabrication. The front-end design phase can
be further split into two design abstraction levels, behavioral
and structural, while a single design abstraction level, physical
(i.e., consists of both analog and digital properties), encom-
passes the back-end. The front-end design process begins by
ﬁrst describing the functionality of the circuit at the behavioral
level, also known as the Register Transfer Level (RTL),
using a hardware description language (HDL), like VHDL or
Verilog. Next, the behavioral level description of the circuit
Fig. 2. Typical IC ﬂoorplan created during the place-and-route design phase.
The ﬂoorplan consists of an I/O pad ring surrounding the chip core. Within the
core is the placement grid. Circuit components are placed and routed within
the placement grid.
is transformed into a structural level description during RTL
synthesis. RTL synthesis is similar to software compilation:
the RTL design is optimized and reduced to a set of logically
connected digital logic gates, called a gate-level netlist (netlists
are commonly described using an HDL language). The gate-
level netlist is then passed to the back-end design phase to
be transformed into something able to be implemented into a
physical chip (i.e., an IC layout) through a process known as
Placement and Routing (PaR).
IC layouts consist of multiple layers. The bottom layers are
device layers, while the top layers are metal layers. Device
layers are used for constructing circuit components (e.g.,
transistors), and the metal layers are used for routing (e.g.,
vias and wiring). The ﬁrst stage of PaR is creating a ﬂoorplan.
Figure 2 illustrates an IC ﬂoorplan. To create a ﬂoorplan,
the dimensions of the overall chip are speciﬁed and the core
area is deﬁned. Typically a ring of I/O pads is then placed
around the chip core, while a placement grid is drawn over the
core. Each tile in the placement grid is known as a placement
site. Circuit components (e.g., standard cells) are then placed
on the placement grid, occupying one or more placement
sites, depending on the size of the component. Lastly, all
components are routed together, using one or more routing
layers. The output from the back-end design is a Graphics
Database System II (GDSII) ﬁle that is a geometric description
of the placed-and-routed circuit layout. The GDSII ﬁle is then
sent to a fabrication facility where it is manufactured. The
ﬁnal step is testing and packaging.
B. Hardware Trojans
1) Trojan Components: A hardware Trojan is a malicious
modiﬁcation to a circuit designed to modify its behavior
during operation [25]. Hardware Trojans have two main com-
ponents: 1) trigger and 2) payload [10], [26], [27]. Prior
work classiﬁes hardware Trojans based on the functionalities
of their trigger and payload mechanisms [10], [26], [27]. In
this paper, we adopt and simplify an existing hardware Trojan
taxonomy [26]; shown in Figure 3.
The trigger mechanism of a hardware Trojan is what initi-
ates the delivery of the Trojan’s payload. Triggers can be built
by adding, removing, or altering existing hardware in an IC.
Fig. 3. An existing taxonomy of hardware Trojans [26]. This taxonomy
classiﬁes hardware Trojans based on their trigger and payload types.
They can be digital [7] or analog [6]. The ideal trigger is small:
requiring few or no additional circuit components, stealthy:
requiring dozens of rare events to activate, and controllable:
readily attacker deployable, but not so by defenders or through
regular use. There have been several triggers demonstrated
before that span the trade-space of large (requiring many addi-
tional gates) and stealthy [28] to the opposite: small (requiring
no additional gates) and easy to trigger [4], [29]. The most
advanced Trojans are small, stealthy, and controllable [6].
The payload mechanism receives a signal from the trigger
and alters the functionality of the IC. Analog [4], [29] and
digital [6] payloads exist, with a variety of effects. These
effects can leak information [28], alter the internal state of
the IC [6], or cause a system to be unusable (denial-of-
service) [29]. Regardless of effect, the payload mechanism
must route a wire to, or in the vicinity of, some target
“security-critical” [30] wire in the IC design.
2) Trojan Implementations: There are three types of hard-
ware Trojans a malicious foundry can craft into an otherwise
trusted IC layout: additive, substitution, and subtractive. Ad-
ditive Trojans involve inserting additional circuit components