correctness =
Number of correct ﬁelds
Number of total inferred ﬁelds
perf ection =
Number of accurate ﬁelds
Number of total true ﬁelds
Table V shows the results of format inference. As textual
protocols could utilize delimiters to generate ﬁelds, all meth-
ods can achieve 100% correctness and perfection on FTP.
For binary protocols, we can see that our clustering results
obviously improve the correctness of format inference, which
means it is more likely to generate valid messages based on
our inferred formats. Due to the nature of network trace based
techniques, the perfection of all techniques tends to be low. For
example, all the ZeroAccess messages in our datasets have the
same value for some bytes in a true ﬁeld. These bytes will
be separated as static ﬁelds, which is correct but not perfect.
So both Discover and our method achieve 0% perfection. The
largest ZeroAccess cluster generated by Netzob contains more
than 500 messages, which is beyond its handling capacity.
Thus Netzob fails to generate formats for ZeroAccess due to
timeout. Note that correct ﬁeld formats can still generate valid
messages even if they are not accurate.
D. Evaluation of State Machine Inference
After clustering, we can further infer the ﬁnite state ma-
chine (FSM). The effectiveness of FSM inference is deter-
mined by the clustering results. Low completeness of clus-
tering leads to excessive states, making state machine too
complex to provide useful information. Table VI shows the
number of inferred FSM states. The ground truth is computed
from the speciﬁcation. Compared with Netzob and Discoverer,
12
TABLE VI: Number of states
Protocol Groud truth Netzob Discoverer NETPLIER
DHCP
DNP3
FTP
ICMP
Modbus
NTP
SMB
SMB2
TFTP
ZeroAccess
8
11
11
10
42
69
16
111
4
6
77
11
20
12
42
152
89
327
4
12
56
11
11
20
90
179
58
126
4
97
8
11
11
10
42
137
16
111
4
6
Fig. 12: Example of format inference by AWRE and NET-
PLIER
NETPLIER always generates fewer states, and for most proto-
cols, it has the same number of states as the ground truth,
including those that are very complex. In contrast, Netzob
and Discoverer could generate 2 to 3 times more states. Note
the Discoverer identiﬁes more keywords than those indicating
message types. As such, on one hand, it generates smaller
clusters that may denote message subtypes. On the other
hand, the overly ﬁne-grained information creates troubles for
downstream applications such as format and state-machine
inference as suggested by our results. This indicates correctly
recognizing message types is critical. NETPLIER is designed
to serve that purpose.
E. Evaluation of Other Layer Protocols
As discussed earlier, existing protocol reverse engineering
works usually focus on application layer protocols. However,
in wireless communication, physical layer protocols could also
be proprietorially designed, where existing works cannot be
applied to as physical layer protocols are binary. AWRE [69] is
designed for ﬁeld inference of physical layer protocols. It uses
prior semantic knowledge as heuristics to identify common
ﬁelds in physical layer, including the Preamble Field, Sync
Field, Length Field, Address Field, Sequence Number Field,
and Checksum Field. We compare our method with AWRE
on the eight physical layer protocols used in the paper. These
protocols vary a lot in their ﬁeld structures and we list their
features in the second column of Table VII. The number of
messages for each protocol is set to 50, which can ensure the
accuracy of AWRE according to the paper. Compared with
above evaluation on well-known benchmarks, fewer messages
are used here as it is usually not easy to collect a large dataset
of IoT devices in reality.
Our method can be applied to these physical layer protocols
directly. The only difference is that the information from the
network layer (i.e., timestamps, IP addresses, and port numbers
as mentioned in Section III-A) is not available for physical
layer protocols. We simply consider consecutive messages with
different directions as a pair for remote coupling constraints.
Other constraints are the same as those on the application layer
protocols.
Table VII shows the clustering and format inference results
of AWRE and NETPLIER. Both methods generate perfect
clustering with 100% homogeneity and completeness on all
eight protocols. For format inference, AWRE achieves 100%
correctness and perfection for all protocols. NETPLIER also
performs well for correctness and only generates a few errors
Fig. 13: Example of reverse engineering unknown protocols of
IoT devices
for Protocol 7. This is because a dynamic ﬁeld has the same
preﬁx for all messages in the small dataset, and hence is
considered a static ﬁeld and merged with the adjacent static
ﬁeld. The merged one is considered incorrect following the
deﬁnition in Section V-C. These errors do not affect
the
generation of valid messages and may be reduced if more
messages are used. Also, NETPLIER achieves lower perfection
than AWRE. For example in Figure 12, the inferred format
of AWRE perfectly matches the true format, because AWRE
assumes that the types of all ﬁelds are already known and
their semantics could be used in the inference. However,
NETPLIER is a general tool for all protocols and do not have
such prior knowledge. For example, the Preamble and Sync
ﬁelds usually have the same values shared by all messages.
Thus NETPLIER considers them together as a single static
ﬁeld. Also, the values of dynamic ﬁelds, e.g., the Payload
ﬁeld, in the test protocols are randomly generated. They are
hence recognized as multiple smaller ﬁelds by our method and
make the perfection low. Similarly, these inferred ﬁelds are
still correct and useful in practice. For example, our formats
can still generate valid Preamble and Sync ﬁelds. We also
validate the generated messages in Section V-F. In addition,
we optimize our format inference using the same assumptions
by AWRE, i.e., we model the semantics of those pre-deﬁned
ﬁeld types as additional constraints. After that, our method
could also achieve 100% correctness and perfection as shown
in the last two columns of Table VII. Note that AWRE is
only designed for physical layer protocols and could not be
applied to general application protocols as those evaluated in
Section V-B and Section V-C.
F. Evaluation of Unknown Protocols
An important application of protocol reverse engineering
is to study the customized/unknown protocols used by IoT
devices. As far as we know, existing works only focus on
well-known protocols as discussed in Section V-B and did
13
AA13370EDEADBEEF00DF929BB8B4136B68 PreambleSyncLengthSRCDSTSEQPayloadAA13370EDEADBEEF00DF929BB8B4136B68SDDDDDDDDDDDDDDAWRENetPlier(1)Trigger events (2) Collect traces(3) Format inference(4) Generate messages(5) AttackNetPlier223A2231227D…223A2230227D…223A2231227D…223A2230227D…S(L=3,V=“223A22”)D(L=1,V=[“30”,“31”])S(L=2,V=“227D”)223A2230227D…223A2231227D…...turnon,turnoff...TABLE VII: Comparison with AWRE
Protocol
AWRE
#
Comment
# Msg. # Msg.
Types
Common protocol
Unusual ﬁeld sizes
Ack, CRC8 CCITT
Ack, CRC16 CCITT
1
2
3
4
5 3 participants with ack frame
6
7
8
varying preamble size & sync
Short address
4 participants
Nibble ﬁelds, LE
50
50
50
50
50
50
50
50
1
1
2
3
2
1
3
2
Clustering Format Inference Clustering
h/c/v
1/1/1
1/1/1
1/1/1
1/1/1
1/1/1
1/1/1
1/1/1
1/1/1
Corr.
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
Perf.
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
h/c/v
1/1/1
1/1/1
1/1/1
1/1/1
1/1/1
1/1/1
1/1/1
1/1/1
NETPLIER
Format Inference
w/o Assumption w/ Assumption
Perf.
Corr.
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
0.980
1.000
1.000
Corr.
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
Perf.
0.286
0.143
0.385
0.167
0.273
0.800
0.190
0.250
TABLE VIII: Evaluation on unknown IoT protocols
Device
Event
Message Format (Request & Response)
# Triggered
Events
Nest Thermostat
Temperature
Up/Down
Fan On/Off
Nest Protect
Emergency
Shutoff On/Off
Aqara Hub
On/Off