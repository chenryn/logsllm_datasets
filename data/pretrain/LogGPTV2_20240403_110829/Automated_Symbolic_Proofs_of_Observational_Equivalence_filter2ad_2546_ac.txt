(Coins with diff). We create a bi-system
S that merges SA and SB. The left-hand side of each diﬀ-
term is the speciﬁcation, while the right-hand side is the im-
plementation:
S = { AB1 : −−[]→OutSys(diﬀ[two(one(null)),
two(one(null))]),
AB2 : −−[]→OutSys(diﬀ[two(one(null)),
one(one(one(null)))]),
AB3 : −−[]→OutSys(diﬀ[two(one(null)),
one(two(null))]) }.
Keeping the environment Env identical to Example 7 results
in the bi-system S not satisfying observational equivalence.
But, if we add the equation two(x) = one(one(x)), then S
satisﬁes observational equivalence.
4.2 Dependency Graph Equivalence
To simplify reasoning, our algorithm works with depen-
dency graphs rather than with the labeled transition sys-
tem. Dependency graphs are a data structure that formalize
the entire structure of a system execution, including which
facts originate from which rules, similar to recipes. We
have several reasons for using dependency graphs. First,
by capturing the entire system state, they are well-suited
for automated analysis using constraint solving. Second,
this representation is already implemented and supported
in the Tamarin prover [24, 22], which we extend. Finally,
dependency graphs naturally give rise to an equivalence re-
lation that implies observational equivalence; however, it is
substantially simpler to verify.
Definition 2
(Dependency Graph). Let E be an
equational theory, R be a set of labeled multiset rewriting
protocol rules, and Env an environment. We say that the
pair dg = (I, D) is a dependency graph modulo E for R if
I ∈E ginsts(R ∪ IF ∪ Env)∗, D ∈ P(N2 × N2), and dg sat-
isfy the three conditions below. To state these conditions, we
deﬁne the following notions. Let I be a sequence of rule in-
stances whose indices, idx(I), represent the nodes of dg. We
call D the edges of dg and write (i, u) (cid:26) (j, v) for the edge
((i, u), (j, v)). A conclusion of dg is a pair (i, u) such that i
is a node of dg and u ∈ idx(concs(Ii)). The corresponding
conclusion fact is (concs(Ii))u. A premise of dg is a pair
(j, v) such that j is a node of dg and v ∈ idx(prems(Ij)).
The corresponding premise fact is (prems(Ij))v. A conclu-
sion or premise is linear if its fact is linear.
DG1 For every edge (i, u) (cid:26) (j, v) ∈ D, it holds that i < j
and the conclusion fact of (i, u) is equal modulo E to
the premise fact of (j, v).
DG2 Every premise of dg has exactly one incoming edge.
DG3 Every linear conclusion of dg has at most one outgoing
edge.
We denote the set of all dependency graphs of R modulo E
by dgraphsE(R). Moreover, by state(dg) we denote the set of
all conclusion facts in dg that are either persistent or (if they
are linear) do not have an outgoing edge. This intuitively
corresponds to the state of the LTS after all transitions in
the dependency graph have been executed.
Figures 2 and 3 contain dependency graphs corresponding
to evaluations based on Examples 6 and 7, respectively.
Using dependency graphs, we can deﬁne a stronger version
of observational equivalence, which is used by our algorithm.
For this, we deﬁne the dependency graphs of a rule, which
intuitively corresponds to the set of all dependency graphs
having the rule as root. Given a rule r ∈ R ∪ IF ∪ Env,
its dependency graphs dgraphsE(r) contain all dependency
graphs where the last node, i.e., the node (i, u) with max-
imal i, is an instance of the rule r. Moreover, by new diﬀ-
variables we mean the new variables of a rule that only ap-
pear in one of its two diﬀ-variants, e.g., y in the case of a
rule Out((x, diﬀ[x, y])), where x and y are new variables.
A:O
OutSys((m, m))
Out: O
OutSys((m, m))
InEnv((m, m))
Ef st:
InEnv((m, m))
M(m)
Esnd:
InEnv((m, m))
M(m)
Ecmp:
M(m) M(m)
OutEnv(true)
Figure 2: Dependency graph for Example 6
Enull:
M(null)
Eone:
M(null)
M(one(null))
A: O
OutSys(two(one(null)))
Etwo:
M(one(null))
M(two(one(null)))
Out: O
OutSys(two(one(null)))
InEnv(two(one(null)))
Echeck:
M(two(one(null)))
InEnv(two(one(null)))
OutEnv(true)
Figure 3: Dependency graph for Example 7
Finally, we deﬁne the mirrors of dependency graphs. In-
tuitively, given a dependency graph, its mirrors contain all
dependency graphs on the other side of the bi-system with
the same structure, notably the same edges and where the
nodes are instances (potentially diﬀerent due to the diﬀ-
terms) of the same rules.
Suppose that for all dependency graphs of all rules, the
set of its mirrors contains all “necessary” instances. We then
know that – independently of the current state of the system
– if a transition is enabled by a rule on one side, the same
rule also enables a transition on the other side, implying
observational equivalence. This is formalized in Deﬁnition 4
below as Dependency Graph Equivalence.
Definition 3
(Mirroring Dependency Graphs).
Let S be a protocol bi-system and Env be an environment.
Consider the multiset rewrite systems L = L(S) ∪ IF ∪ Env
and R = R(S) ∪ IF ∪ Env.
Let dgL = (IL, DL) ∈ dgraphs(L) be a dependency graph.
We denote by mirrors(dgL) the set of all dependency graphs
dgR = (IR, DR) ∈ dgraphs(R), such that DR = DL, |IL| =
|IR|, idx(IL) = idx(IR) and for all i ∈ idx(IL) the ground
rule instances (IL)i and (IR)i are ground instances of the
same rules, i.e., rules with the same identiﬁer, where new
variables of rules keep their instantiation.
The set of mirrors of a dependency graph dgR = (IR, DR) ∈
dgraphs(R), denoted by mirrors(dgR), is deﬁned analogously,
replacing R by L uniformly in the above deﬁnition.
Using these notions, we now deﬁne dependency graph equiv-
alence. Intuitively, this deﬁnition captures that for all de-
pendency graphs on one side of the bi-system, there is a
mirroring dependency graph on the other side that respects
its instantiations of new diﬀ-variables.
Definition 4
(Dependency Graph Equivalence).
Let S be a bi-system. Consider the multiset rewrite systems
L = L(S) ∪ IF ∪ Env and R = R(S) ∪ IF ∪ Env. We
say that L and R are dependency graph equivalent, written
L(S) ∼DG,Env R(S), if for all dependency graphs dg of rules
r ∈ L ∪ R, the set mirrors(dg) is non-empty and contains
dependency graphs for all possible instantiations of new diﬀ-
variables.
Note that this deﬁnition requires that if, for example,
there are new variables in the rules R not appearing in
the rules from L used in dg, then mirrors(dg) must contain
instances for all possible instantiations of these variables.
For instance, in the case of a rule producing a conclusion
Out((x, diﬀ[x, y])), then for all possible instantiations of y,
an instance must be in mirrors(dg).
It turns out that dependency graph equivalence is a suf-
ﬁcient (but not necessary) criterion for observational equiv-
alence.
Intuitively, dependency graph equivalence veriﬁes
that the left-hand side instance of a rule can always be sim-
ulated by its right-hand side, and vice versa.
Theorem 1. Let S be a bi-system.
R(S) then L(S) ≈Env R(S).
If L(S) ∼DG,Env
Proof. Consider the multiset rewrite systems L = L(S)∪
IF ∪ Env and R = R(S) ∪ IF ∪ Env, and the relation R:
R = {(SA,SB) | SA = state(dgL),SB = state(dgR),
∪ {(SA,SB) | SA = state(dgL),SB = state(dgR),
dgR ∈ mirrors(dgL), dgL ∈ dgraphs(L)}
dgL ∈ mirrors(dgR), dgR ∈ dgraphs(R)}.
First note that (∅,∅) ∈ R. We now show that R is an
observational equivalence relation as deﬁned in Deﬁnition 1.
For this, we must show that for all states (SA,SB) ∈ R we
have:
1. If SA
r
l−→
A and r is the recipe of a rule in IF ∪ Env,
S(cid:48)
B ∈ G(cid:93) such
then there exists actions l(cid:48) ∈ F (cid:93) and S(cid:48)
that SB
B, and (S(cid:48)
S(cid:48)
B) ∈ R.
A,S(cid:48)
l(cid:48)−→
r
2. If SA
r
l−→
S(cid:48)
A and r is the recipe of a rule in SA, then
there exist recipes r1, . . . , rn ∈ ρ of rules in SB, actions
l1, . . . , ln ∈ F (cid:93), n ≥ 0, and S(cid:48)
l1−→
B) ∈ R.
B ∈ G(cid:93) such that SB
S(cid:48)
B, and (S(cid:48)
A,S(cid:48)
ln−→
. . .
r1
rn
We distinguish the following cases:
l−→
1. Assume (SA,SB) ∈ R, SA
r
S(cid:48)
A for a rule instance
ri, and r is the recipe of a rule in IF ∪ Env. Then,
by the deﬁnition of R, there is a dependency graph
dgL ∈ dgraphs(L) with SA = state(dgL), and a depen-
dency graph dgR ∈ dgraphs(R) with SB = state(dgR).
A is possible in SA, dgL
Since the transition SA
S(cid:48)
can be extended to dg(cid:48)
L with the rule instance ri cor-
L) = S(cid:48)
responding to this transition, and state(dg(cid:48)
A.
l−→
r
R ∈ mirrors(dg(cid:48)
L), dg(cid:48)
L ∈ dgraphs(L), and by L(S) ∼DG,Env R(S)
Then dg(cid:48)
we have that for all possible instantiations of new diﬀ
R ∈
variables, the corresponding dependency graph dg(cid:48)
dgraphs(R). By the deﬁnition of R, in dgR the in-
stantiations of the new variables (including the new
diﬀ-variables) correspond to the instantiations of some
dg(cid:48)
L). Then, by the construction of
mirrors(dg(cid:48)
R is identical to dgR except for the
last rule instance ri(cid:48). Moreover, by the construction
of mirrors(dg(cid:48)
L), ri(cid:48) is an instance of the rule with the
same identiﬁer. Since the dependency graph dg(cid:48)
R has
L and all rules in IF ∪ Env
the same structure D as dg(cid:48)
have no new diﬀ-variables, there exists a transition
SB
(S(cid:48)
graphs for S(cid:48)
The symmetric case is analogous.
l(cid:48)−→
S(cid:48)
B with the same recipe as ri. Moreover,
A,S(cid:48)
B) ∈ R since there are mirroring dependency
A and S(cid:48)
B.
r
2. Alternatively, assume (SA,SB) ∈ R, SA
r
r
l−→
l−→
L) = S(cid:48)
A. Then dg(cid:48)
S(cid:48)
A is possible, dgL can be extended to dg(cid:48)
S(cid:48)
A, and r
is the recipe of a rule in L(S). Then, by the deﬁnition
of R, there is a dependency graph dgL ∈ dgraphs(L)
with SA = state(dgL). Since in this state the transition
SA
L with
the rule instance ri corresponding to this transition,
L ∈ dgraphs(L), and by
and state(dg(cid:48)
L(S) ∼DG,Env R(S) we have that for all possible in-
stantiations of new diﬀ variables, the corresponding de-
R ∈ dgraphs(R). By the deﬁnition
pendency graph dg(cid:48)
of R, there is a dependency graph dgR ∈ dgraphs(R)
with SB = state(dgR), where the instantiations of the
new variables (including the new diﬀ-variables) corre-
R ∈ mirrors(dg(cid:48)
spond to the instantiations of some dg(cid:48)
L).
Then, by the construction of mirrors(dg(cid:48)
L), this graph
dg(cid:48)
R is identical to dgR except for the last rule instance.
By assumption, ri was an instance of a rule in L(S).
Therefore, by the construction of mirrors(dg(cid:48)
L), the
last rule instance ri(cid:48) in dg(cid:48)
R is an instance of the rule
with the same identiﬁer. Hence there exists a transi-
B) ∈ R since there
tion SB
are mirroring dependency graphs for S(cid:48)
Again, the symmetric case is analogous.
B. Moreover, (S(cid:48)
A and S(cid:48)
B.
l(cid:48)−→
r(cid:48) S(cid:48)
A,S(cid:48)
As shown in [24], we can use constraint solving to ﬁnd
(restricted) normal dependency graphs; for a detailed dis-
cussion about the constraint solving procedure used and the
link to restricted normal dependency graphs, see the ex-
tended version of this paper [1]. This provides the basis
for our algorithm, depicted in Figure 4, which determines
whether L(S) ∼DG R(S) holds. For each rule r in L(S),
R(S), and the environment, the algorithm ﬁnds all corre-
sponding normal dependency graphs with r as a root using
constraint solving. For each of these dependency graphs,