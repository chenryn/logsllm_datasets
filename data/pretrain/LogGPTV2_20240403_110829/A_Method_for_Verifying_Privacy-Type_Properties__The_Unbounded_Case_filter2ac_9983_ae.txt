case, the corresponding process in Pρ can perform an action
satisﬁed for ta0. Moreover, by Proposition 3, we know that
of the same nature. To conclude, we distinguish the three kinds
of actions:
Case 1: α is an output. We only have to check our invariant for
ta0.α[a]. It essentially follows from the fact that association
is not affected by the execution of an output: ρ(a) and ρ(a′)
are associated in (ta0.α[a])ρ iff they are associated in ta0ρ,
and similarly without ρ.
Case 2: α is a conditional. We ﬁrst need to make sure that the
outcome of the test is the same for a and aρ. We distinguish
two cases, whether the conditional is safe or not.
● If the conditional is safe, then its outcome only depends
on the inputs and outputs of a that are statically equivalent
to those of ρ(a). Hence, outcome of that test is the same
for a and aρ.
● If the conditional is unsafe, we make use of Proposition 2
to show that the outcome of the conditional is the same
on both sides. We can do it because our invariant, in this
case, implies that a and a′ are associated in ta0 iff ρ(a)
and ρ(a′) are associated in ta0ρ. This is simply because,
if a and a′ are associated in ta0, then they are having an
honest interaction, thus the outcome of the test will be
positive, and a and a′ are connected in ta.
In both cases (safe or unsafe) we need to make sure that
our invariant is preserved. This is because the association
between a and a′ is preserved iff the outcome of the test is
positive, which is the same before and after the renaming.
573573
Case 3: α is an input. We immediately have that aρ can
perform α, on the same channel and with the same recipe. Let
us now check that our invariant is preserved. We only check
are also associated in ta0, thus a and a′ are connected in ta and
associated in ta0. Now, because α did not break the association
one direction, the other being very similar. Assume that ρ(a)
and ρ(a′) are associated in ta0ρ.α[ρ(a)]. The renamed agents
of ρ(a) and ρ(a′) in ta0ρ, it must be that the input message
in α = in(c, M) corresponds to the last output of ρ(a′) in
in φ(K0ρ), we have M φ(K0ρ) ⇓=E wφ(K0ρ). But, because
φ(K0)∼ φ(K0ρ), we then also have M φ(K0)⇓=E wφ(K0).
The association of a and a′ in ta0 carries over to ta0.α[a]. ◻
Thanks to our lemma, we can change any execution of Mid
into an indistinguishable execution of SΠ, provided that an
ta0ρ. Formally, if that last output corresponds to the handle w
D. Proof of Theorem 1
Π
appropriate renaming of agents exists. This is our last step
before the ﬁnal proof:
Proposition 4: For any protocol and any ground conﬁgu-
ration P of the protocol such that
(P;∅) ta(cid:18)→ K,
there exists an agent renaming ρ satisfying the hypothesis of
Lemma 1 and such that Pρ is single-session.
Proof sketch. The renaming maps all session (resp. iden-
tity) parameters to new distinct, fresh session (resp. identity)
parameters, with the only constraint that connected agents are
sent to dual agents (and thus share identity parameters). The
precise deﬁnition of the renaming as well as the complete
proof of this proposition can be found in Section B.
◻
Proof of Theorem 1. It is easy to see that SΠ ⊑MΠ ⊑Mid
Π ⊑ SΠ. Consider an
so it only remains to establish that Mid
ta(cid:18)→ K. We can assume w.l.o.g. that session
execution Mid
We now have all the ingredients to prove our main result.
Π,
creations are all performed at the beginning of ta, i.e. it is of
the form τ ∗.ta′ with no occurrence of τ in ta′: otherwise we
can modify ta to satisfy this condition, without changing its
observable actions and the resulting frame. Thus we have a
Π
ground conﬁguration P of Π, such that:
(P;∅) ta′(cid:18)→ K.
Let ρ be the renaming obtained in Proposition 4 for ta′. By
Lemma 1, ta′ρ remains executable and is indistinguishable
from ta′. Moreover, since Pρ is single-session, we have that:
(SΠ;∅) τ ∗(cid:18)→(Pρ∪SΠ;∅) ta′ρ(cid:18)(cid:18)→ Kρ.
This execution allows us to conclude:
observables as ta, and yields a statically equivalent frame. ◻
it has the same
VI. MECHANISATION
We now discuss how to delegate the veriﬁcation of frame-
opacity and well-authentication to a fully automatic tool. In
this section, we show that appropriate encodings can be used
to leverage ProVerif [30] to do so. These encodings have been
implemented in our tool UKano [31]. This tool basically takes
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
as inputs a speciﬁcation of a protocol in our class and, by
applying translations described in this section and by calling
ProVerif, it automatically checks our two conditions and thus
unlinkability and anonymity.
A. Frame Opacity
We ﬁrst explain how to check frame opacity using the diff-
equivalence feature of ProVerif [32]. Diff-equivalence is a
property of bi-processes. A bi-process is a process in which
some terms are replaced by bi-terms, denoted choice[u1, u2].
Intuitively, a bi-process represents two processes. The ﬁrst
(resp. second) process is obtained by considering terms occur-
ring on the left-hand side (resp. right-hand side) of the choice
operators. Checking the diff-equivalence of a bi-process boils
down to checking that when the two processes are executed
simultaneously, the resulting frames are in static equivalence.
Our notion of frame opacity requires that for any execution
ta(cid:18)→(P ; φ), one has (1) φ∼ ψ for some ψ ∈[φ]nonce; and
Mid
ing the diff-equivalence between Mid
(2) outputs carrying the same label produce messages with the
same idealization. It is possible to verify both points by check-
Π and a modiﬁed version
of this process where each syntactical output u (identiﬁed by
a label) has been replaced by a static idealization, i.e. the
idealization of some message that this output may produce.
Π
(cid:5)
We assume that all syntactical outputs of the protocol can
be executed. This is obviously not a restriction in practice as
dead code should be removed and can be detected very easily
using, e.g. ProVerif. Under this assumption we shall compute,
: knowing that there is at least one execution where this
uideal
(cid:5)
output is triggered, producing some message m, we simply set
uideal
(cid:5)
is justiﬁed since all possible messages that this output may
produce must have the same idealization anyway.
for each syntactical output (cid:10)∶ out(c, u), its static idealization
= [m]ideal. Choosing an arbitrary execution in this way
Let us now describe the bi-process biproc(Mid
Π) whose
tion, the bi-process is deﬁned from Mid
]) where unonce
(cid:10) ∶ out(c, u(cid:5)) by (cid:10) ∶ out(c, choice[u(cid:5), unonce
diff-equivalence implies frame opacity. As a ﬁrst approxima-
Π by replacing each
(cid:5)
is obtained from uideal
by ﬁlling its holes with fresh names.
A crucial point is to consider fresh names from messages
as new session names of the bi-process so that they
unonce
(cid:5)
will be different for each session. The only remaining issue at
this stage is that diff-equivalence in ProVerif forces the left-
hand and right-hand processes to execute exactly the same
kind of actions at the same time. This might be a problem
for conditionals that have no real meaning for the right-
hand part. We overcome this difﬁculty in the actual deﬁnition
Π) by pushing conditionals into messages and
of biproc(Mid
putting else branches in parallel. We do not formally explain
how to do so as it heavily depends on speciﬁcities of ProVerif,
but just give an example to illustrate the pushing of condi-
tionals: we show in Figure 4 (part of) the bi-process resulting
from the application of our transformation to our running
example. One can see that the computation of merge never
fails (neither on the left, nor on the right) because catchFail
always returns a message. More examples can be found in
(cid:5)
! new k;
! new nI; new nR; new n1; new n2; new n3;
(
(* Initiator role: *)
out(cI,choice[nI, n1]);
in(cI,x);
let merge = choice[
let catchFail =
let yt,ynR = eq(pi1(dec(x,k)),nI),
pi2(dec(x,k)) in
enc((ynR,nI),k)
else n2,
n2] in
out(cI,merge))
|(
(*
Responder role: *)
in(cR,z);
out(cR,choice[enc((nI,nR),k), n3]); ...)
Fig. 4. Example of ProVerif ﬁle checking frame opacity (Feldhofer)
Π
the ProVerif ﬁles produced by UKano for our case studies,
available online [31].
Assuming that diff-equivalence holds for biproc(Mid
Π), we
Mid
Π) tr(cid:18)→
tr(cid:18)→ (P ; φ), there exists some execution biproc(Mid
(Q,[φ, φr]) with φ ∼ φr. By construction of the bi-process
we have that φr ∈ [φ]nonce, which implies item (1) of frame
have that frame opacity holds too. Indeed, for any execution
opacity. Moreover, idealizations only depends on output labels,
which implies item (2).
B. Well-authentication
We ﬁrst explain how to check condition (i) of well-
authentication. It is basically a conjunction of reachability
properties, which can be checked in ProVerif using correspon-
dence properties [33]. For each role A∈{I,R}, we associate
events of the form OutAi(k, n, m) and InAj(k, n, m), whose
to each syntactical output (resp. input) of the role an event
which uniquely identiﬁes the action. More formally, we use
arguments contain:
● identity parameters k and session parameters n;
● the message m that is inputted or outputted.
In the same fashion, we also add events of
TestAk(k, n) at the beginning of each then branch.
the form
For each conditional of the protocol, we ﬁrst check if the
simple syntactical criterion of safe conditionals holds. If it
is the case we do nothing for this conditional. Otherwise,
we need to check condition (i). It can be expressed as a
correspondence property using events as explained next. Given
a role A ∈ {I,R} and a conditional of this role whose event
is TestAi(k, n), the fact that if the conditional is positively
evaluated, then the involved agent must be associated to a
dual agent, can be expressed by the following correspondence
property:
1) when the event TestAi(k, n) is ﬁred,
2) there must be a previous event InAj(k, n, m) (InAj
corresponding to the input just before the conditional),
574574
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
sponding to the output that fed the input InAj in the
honest execution),
, m) (OutBk corre-
3) and a previous event OutBk(k, n
4) and a previous event InBl(k, n
, m′) (InBl correspond-
5) and a previous event OutAm(k, n, m′) (OutAm corre-
ing to the ﬁrst input before OutBk),
′
′
sponding to the output that fed the input InBl in the
honest execution), etc.
Note that by using the same messages m and m′ for inputs
and outputs, we express that the messages that are outputted
and inputted are equal modulo the equational theory E.
Example 16: Those kinds of correspondence properties are
better explained by showing the ProVerif code we produce.
We depict in Figure 5 the query we produce for checking
condition (i) on the ﬁrst conditional of PI from our running
example.
VII. CASE STUDIES
In this section we apply our proof technique to several case
studies. We rely on our tool UKano to check automatically
whether the protocol under study satisﬁes frame opacity and
well-authentication as deﬁned in Section IV. We also discuss
some variations of the protocols to examine how privacy
is affected. As explained in Section VI, UKano relies on
ProVerif;
the source code of our tool, and all produced
ProVerif ﬁles can be found in [31].
A. Feldhofer’s protocol
As already mentioned, this protocol falls into our generic
class of 2-party protocols. We succeeded in establishing au-
tomatically frame opacity and well-authentication. For both
requirements, UKano concludes in less than 1 second.
query k:key, n1:bitstring, n2:bitstring,
B. Hash-Lock protocol
nt:bitstring, nr:bitstring,
mP:bitstring, mR:bitstring;
event(TestI1(k,n1)) ==>
(event(InI1(k,n1,mR)) ==>
(event(OutR1(k,n2,mR)) ==>
(event(InR1(k,n2,mP)) ==>
(event(OutI1(k,n1,mP)))
) ) ).
Fig. 5. Example of ProVerif query for checking condition (i)
Finally, checking that condition (ii) of well-authentication
is satisﬁed is rather trivial once we know that the the other
two conditions hold. Indeed, as shown in the following lemma,
condition (ii) holds as soon as the ﬁrst conditional occurring
in the responder role has been identiﬁed as safe. Remark that