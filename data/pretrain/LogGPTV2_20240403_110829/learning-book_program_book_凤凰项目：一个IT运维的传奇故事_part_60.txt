## Page 201
简介
我谨代表本书的合著者，万分感谢你阅读本书。
本书闸释了开发部和IT运维部之间长期的核心冲突为何会导致整个IT组织及其所服务企业的失败。如果不
加以抑制，冲突会拖延开发部的上线时间，并在功能发布期间导致时间更长、问题更多的部署，增加1级严
重级别服务中断的数量，而IT运维部则要做越来越多的计划外工作，难以清偿技术债务。
我们现在知道，开发部和IT运维部之间的这种冲突是可以化解的。证据是，诸如亚马逊、谷歌、Twitter、
Etsy”和网飞等高绩效公司，正在采用一套我们称之为"开发运维"的技术，他们每天都要部署成百上千个产
品变更，同时保持着世界一流的可靠性、稳定性及安全性。通过构建一套文化规范、流程与做法，这些表
现突出的企业取得了惊人的业绩。
*一家手工艺品交易网站。—译者注
他们能够快速完成更新，将代码部署交付周期1缩短为几分钟或几小时，并能够凭借更高的产品质量和更好
的客户服务，在市场中不断创新突破、脱颖而出。
1代码部署交付周期是指从开发部“将变更提交至版本控"到“在生产中成功运行"所需的时间。
---
## Page 202
为什么需要开发运维
开发运维这种能力能创造巨大的竞争优势，使产品功能更快地进入市场，并提升客户满意度、市场份额、
员工生产力以及工作幸福感，同时让企业在市场上百战百胜。为什么？因为技术已成为首要的价值创造过
程，并已成为绝大多数公司获得客户的越来越重要的（而且常常是基础性的）一种手段。
相比之下，需要几周乃至几个月的时间来部署软件的公司，在市场上处于非常不利的位置。
公司
部署频率部署交付期可靠性客户响应
亚马路
23 000次/天分钟
5500次/天
分钟
叫飞
500次/天
分钟
1次天
小时
3次/周
小时
普通企业9个月1次月或季度低中低中
1用于整体开激网络应用框架的前端。
各领域的俊俊者都有一个特点，那就是他们永远“鹤立鸡群”。也就是说，最出色的人总是能独占整头。
算是平均水准。2012年，亚马逊公司宣布，他们平均每天能开展23000个部署。
采用开发运维原则的商业价值
在玩偶实验室2012年的“开发运维报告说明”2中，为了更好地理解企业在采用开发运维各阶段的情况和习
惯，我们用基准问题测试了4039家IT企业。
间. Mrsllreslbsum013-aate-of-devupg-infongnshir
杰致·享伯尔、基感·金和玩惧实验室。（2013年度开发运维使用情况报告)，玩偶实验室网站，2014年7月14日访
第一点出人意料的是，在敏捷性指标（agiitrymetric）方面，运用开发运维的高绩效公司远胜过表现平平的
同行：
●代码部署频率快30倍
·代码部署交付期快8000倍
还有可靠性指标：
·变更成功率高2倍
●MTTR（Mean Time To Repair，平均修复时间）快12倍
---
## Page 203
换言之，他们更为敏捷。他们部署代码的频率快30倍，从“代码提交"到“成功投产运行"的速度快8000倍。表
现突出企业的交付期以分钟或小时计算，而表现较差企业的交付期则以周、月乃至季度计算。
这些企业不仅做了更多的工作，他们取得的成效也好得多：表现突出的企业成功部署变更和代码（即未导
致生产服务中断或者服务故障）的可能性是其他公司的2倍，并且一旦变更失败引发事故，处理事故的速度
要快12倍。
这一研究结果特别令人兴奋，因为它表明，长期的核心冲突可以化解：表现突出企业正在更快地部署功
能，
同时提供世界上最高的可靠性、稳定性及安全性，从而在市场上胜过竞争对手。一个更为惊人的事实
是：史强的产品可靠性需要史高频率的变史！
我们在2014年的研究3中还发现，这些表现突出的企业不仅有着更好的IT业绩，其公司总体业绩也明显更
佳。他们在盈利能力、市场份额及生产目标方面胜出的可能性要高出2倍，而且有迹象显示，他们在资本市
场上的表现也好得多（就像最后一章里，埃瑞克想要创建对冲基金时所预测的那样）。
15日访间, htpeplabs,m2014-ps-pn
3杰兹-亨怕尔、杂杰尔-柯思登、基恩·金和妮可-福斯格确恩-委拉斯开兹，“开发运雄报告2014年度报告"，玩偶实验室网站，2014年7月
置身于开发运维世界的感觉如何
想象你置身于开发运维的世界，在这里，产品所有者、开发部、QA、IT运维部以及信息安全部共同不懈地
工作，帮助彼此及整个企业取得胜利。他们能够快速地完成工作计划（比如，每天完成几十个、几百个乃
至几千个代码部署），同时保持着世界一流水准的稳定性、可靠性、可用性及安全性。
上游的开发团队不再给下游的工作中心（比如QA、IT运维部以及信息安全部）造成麻烦，开发部将20%的
时间用于帮助确保工作顺利地通过整个价值流，加快自动化测试，改进部署基础架构，并确保所有应用程
序创建有用的产品遥测（production telemetry）
为什么？因为每个人都需要快速反馈回路，以防止问题代码进入生产环节，并且让代码能够迅速部署投
产，从而迅速发现并修复任何产品问题。
价值流中的每个人都共享一种文化，这种文化不仅重视彼此的时间和贡献，而且为了实现整体的学习和改
进，不断向工作系统中注入压力。大家都能把吸取到的教训运用到实践之中，偿还技术上的欠债。每个人
都像重视功能性要求一样重视非功能性要求（比如质量、可扩展性、可管理性、安全性、可操作性等）。
为什么？因为非功能性要求对于实现业务目标同样重要。
我们拥有一种高度信任、合作共事的文化，每个人都对其工作的质量负责。与低信任度、高控制度和以审
批服从流程为特点的管理文化相反，我们依靠同事评议来确保每个人都对其代码质量充满信心。
此外，还有一种假设驱动的文化，要求每个人都成为科研工作者，不会理所当然地作出任何假设，也不会
上不想要的功能，部署没用的代码，或是费力维修那些并没有出问题的地方。所有这些都使我们能够推出
令人兴奋的新功能，既让顾客满意，又让公司获利。
矛盾的是，执行代码部署正变得无聊而平常。开展部署不再是在压力之下、混乱之中于深夜或周末进行，
而是在工作日进行，大部分人甚至都不会察觉。而且由于代码部署发生在下午而非周末，几十年来，IT运
维人员终于和其他人一样，在正常上班时间开展工作。
代码部署究竞是怎么变得平常的？因为开发人员在工作中不断获得迅速的反馈：在他们编写代码时，自动
单元、验收和集成测试一直在类生产环境中运行，让我们不断确认，代码和环境将会按照预先设定的运
行，而且我们总是处于可部署状态。代码部署后，普遍性生产指标显示部署成功，而且客户也获得了价
值。
甚至连风险最高的功能发布（featurerelease）也变得稀松平常了。怎么做到的？因为在产品上线时，交付新
功能的代码就已经投产了。在上线之前几个月，开发部就已经把代码部署为产品，这对客户是不可见的，
但内部员工可以运行并测试功能。
---
## Page 204
在功能启用的最后一刻，不再有新代码投入生产。相反，我们只要改变一个功能开关或者参数设置即可。
新功能开始慢俊地对一小部分客户可见，如果发生故障，就自动回滚。
只有在确定功能已经按照设定运行时，我们才会将它向另一部分客户公开，以一种可控、可预测、可逆而
且压力很小的方式推出。我们不断重复，直到每个人都使用了这一功能。
这样，我们不仅大幅降低了部署风险，而且也提高了达到预期业务成果的可能性。因为可以迅速开展部
署，我们才得以在生产中进行试验，对构建的每一项功能的业务假设进行测试。我们可以反复测试，并且
使用几个月乃至几年来的客户反馈，在生产中改进各项功能。
难怪我们超越了竞争对手，赢得了市场。
通过开发运维，就可以实现上述一切。开发运维是一种新方法，是指开发、测试、IT运维以及IT价值流中
的其他各方共同工作。
开发运维是我们这个时代的生产革命
开发运维工作模式的原理与改变生产制造的原理相同。开发运维并非优化在制造工厂里将原材料转化为成
品的方式，而是展示如何优化IT价值流，以及如何把业务需求转换为向客户提供价值的能力与服务。
20世纪80年代，制造业领域有过一次非常著名的长期核心冲突：
·保护销售承诺
·控制制造成本