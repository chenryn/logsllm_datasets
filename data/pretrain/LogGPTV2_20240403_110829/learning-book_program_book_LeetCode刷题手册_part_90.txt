解题思路
是完全一样的。
·这一题的解题思路不难，按照题意模拟即可。先统计1的个数total，然后除以3就是每段1出现
的个数。有一些特殊情况需要额外判断一下，例如没有1的情况，那么只能首尾分割。1个个数不
是3的倍数，也无法分割成满足题意。然后找到第一个1的下标，然后根据total/3找到mid，第
一个分割点。再往后移动，找到第二个分割点。找到这3个点以后，同步的移动这3个点，移动
中判断这3个下标对应的数值是否相等，如果都相等，并且最后一个点能移动到末尾，就算找到
了满足题意的解了。
代码
package leetcode
func threeEqualparts(A []int) []int {
n,ones，i, count := 1en(A), 0,0, 0
for _, a := range A {
ones += a
---
## Page 895
if ones == 0 {
return []int{0, n - 1}
F
if ones%3!= 0{
return []int{-1, -1}
k:= ones/3
for i yua[o]yde = yuayde >●
 => [de ==[de => 0 ●
·graph[i]] = 1
●1  keys[0]{
minIndex = keys[0]
---
## Page 899
if count= 0 {
//总和有多余的，需要减去t，除去的方法有freq[t]种
res += freq[t]
sum += V
freq[sum]++
fmt.Printf("freq = %v sum = %v res = %v t = %v\n", freq, sum, res, t)
return res
933.NumberofRecentCalls
题目
Write a class Recentcounter to count recent requests.
It has only one method: ping(int t) , where t represents some time in milliseconds.
Return the number of ping s that have been made from 3000 milliseconds ago until now
Any ping with time in [t - 3ooo, t] will count, including the current ping.
It is guaranteed that every call to ping uses a strictly larger value of t than before.
Example 1:
Input: inputs = ["RecentCounter","ping","ping","ping","ping"], inputs = [[] ,
[1] , [100] , [3001] , [3002]]
Output: [nu11,1,2,3,3]
Note:
---
## Page 901
1. Each test case will have at most 10ooo calls to ping
2. Each test case will call ping with strictly increasing values of t
3. Each call to ping will have 1 = t-3000 })
if index A[i+1]
Example 1:
Input: “IDID"
Output: [0,4,1,3,2]
Example 2:
Input: "III"
Output: [0,1,2,3]
Example 3:
Input: "DoI"
Output: [3,2,0,1]
Note:
1. 1 A[i+1]
解题思路
·给出一个字符串，字符串中只有字符"T"和字符“D"。字符"T"代表A[i]A[i+1]，要求找到满足条件的任意组合。
·这一题也是水题，取出字符串长度即是最大数的数值，然后按照题意一次排出最终数组即可。
---
## Page 903
代码
package leetcode
func diStringMatch(S string) []int {
result, maxNum, minNum, index := make([]int, 1en(S)+l), len(S), 0, 0
for _, ch := range S {
if ch =='I'{
result[index] = minNum
mi nNum++
}else{
resu]t[index]  = maxNum
maxNum
++xapu,
result[index]= minNum
return result
946.ValidateStackSequences
题目
Given two sequences pushed and popped with distinct values, return true if and only if this could
have been the result of a sequence of push and pop operations on an initially empty stack.
Example 1:
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: we might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), popO -> 5, pop() -> 3, pop() -> 2, pop() -> 1
Example 2:
---
## Page 904
Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
Note:
1. 0 <= pushed.length == popped.length <= 1000
2. 0 <= pushed[i], popped[] < 1000
3. pushed is a permutation of popped.
4. pushed and popped have distinct values.
题目大意
给2个数组，一个数组里面代表的是push的顺序，另一个数组里面代表的是pop的顺序。问按照这样
的顺序操作以后，最终能否把栈清空？
解题思路
这一题也是靠栈操作的题目，按照push数组的顺序先把压栈，然后再依次在pop里面找栈顶元素，找
到了就pop，直到遍历完pop数组，最终如果遍历完了pop数组，就代表清空了整个栈了。
代码
package leetcode
import "fmt"
func validateStackSequences(pushed []int, popped []int) boo] {
stack,j，N := []int{},0,len(pushed)
for -, x := range pushed {
stack = append(stack, x)
fmt.Printf("stack = %v j = %v\n", stack, j)
for len(stack) != 0 && j < N && stack[1en(stack)-1]== popped[j]{
stack = stack[0 : len(stack)-1]
j++
fmt.Printf("**stack = %v j=%v\n"，stack， j)
return j == N
947.MostStonesRemovedwithSameRowor
Column
---
## Page 905
题目
Aew sujod aseupooo ypeg stuod aeupooo yaaui awos te sauois aed am 'aueid a e uo
have at most one stone.
Now, a move consists of removing a stone that shares a column or row with another stone on the
grid.
What is the largest possible number of moves we can make?
Example 1:
Input: stones = [[0,0], [0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Example 2:
Input: stones = [[0,0], [0,2], [1,1], [2,0], [2,2]]