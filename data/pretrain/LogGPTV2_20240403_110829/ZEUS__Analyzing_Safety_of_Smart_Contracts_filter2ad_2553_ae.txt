Note that ZEUS ensures that the patch is done within the same
basic block so as to ensure that if the cloned function is called,
then the invocation to call is also made. Further, we also
assert false before the call code. If the veriﬁer ﬁnds a path
leading to this assert, it indicates a bug.
Cross-function reentrancy can be handled similarly by patching
different functions. However, it is not scalable due to state
space explosion even with small number of functions. We leave
efﬁcient detection of cross-function reentrancy for the future.
(2) Unchecked send: Detection of unchecked send bug
requires identifying any subsequent accesses to global state
variables in case of a failed send call. ZEUS initializes a global
variable checkSend to true and takes its conjunction with
return value from every send operation. For every subsequent
write of a global variable, an LLVM pass automatically inserts
an assert(checkSend) in the bitcode.
(3) Failed send: Recall
the aim here is to prevent
reverting the transaction by not invoking throw on a failed
send call. The detection of this bug leverages the same check
as the unchecked send scenario, but places the assertion
ahead of the throw. While the throw encountered may be
due to some other condition in the code, the counterexample
indicates a possibility of reverting the transaction due to control
ﬂow reaching a throw on a failed send, not necessarily the
immediate throw associated with the send.
(4) Integer overﬂow/underﬂow: An LLVM pass implements
the overﬂow/underﬂow detection checks for all arithmetic
operations [20], consistent with Solidity’s semantics, i.e., an
overﬂow/underﬂow for integers causes a wrap around.
(5) Block/ Transaction state dependence: Bug detection
for these classes requires context sensitive information. For
example, block state dependence requires determining if block
variables, such as timestamp, ﬂow into send or call. We
implement our own taint analysis pass over LLVM bitcode
and use symbolic model checking to eliminate infeasible paths.
that
Category
DAO
Game
Token
Wallet
Misc.
Total
#Contracts
140
244
290
72
778
1524
#LOC (K)
Source
2.8
23.3
25.2
10.8
47.6
109.7
LLVM
24.3
609.2
385.9
105.9
924.3
2049.6
#Send/Call
252
851
311
186
1102
2702
#Ext. Calls
350
16
271
6
498
1141
Table 3: Characterization of the dataset.
Note that Solidity’s lack of pointer arithmetic, unlike C/C++,
eases our taint tracking implementation.
(6) Transaction order dependence: We detect transaction
order dependence by determining potential read-write hazards
for global variables that can inﬂuence Ether ﬂows. Speciﬁcally,
we taint all global variables that are written to and then
determine if this taint ﬂows into a send or call.
VI. EVALUATION
EXPERIMENTAL SETUP. All experiments were performed
atop an IBM System x3850 X5 machine having 4 Intel
Xeon E7-4860 CPUs at 2.27 GHz with 10 cores each and
2 threads/core, and 512 GB of RAM, running 64-bit Ubuntu
v14.04. We built our Solidity to LLVM bitcode translator
over solc [41], which is compatible with LLVM 3.6. We
used a stable build of Seahorn [37] (snapshot of March 31st)
as our veriﬁer and set a timeout threshold of 1 minute. For
comparisons with Oyente, we use their snapshot as available
on April 15th, and keep a timeout duration of 30 minutes [68].
A. Data Set
We
Etherscan
[18],
scraped
periodically
[19],
Etherchain [12] and EtherCamp [11] explorers over a
period of three months and obtained source code for 22, 493
contracts at distinct addresses. We discounted 45 contracts
that had an assembly block in their source, and obtained
1524 unique contracts (as per their sha256 checksum). In
the remainder of the section, we present results only for these
unique contracts, unless speciﬁed otherwise.
We analyzed all unique contracts and classiﬁed them
under ﬁve categories. “DAO” enlists all contracts
that
involve DAO-style investment. Contracts involving games
and decentralized gambling, are clubbed under “Game”.
“Token” contracts implement the standard tokens for designing
ﬁnancial
instruments. “Wallet” contracts implement a user
wallet. All other contracts are listed under “Misc”. Table 3
summarizes their characteristics. We note that contracts in
the “DAO” and “Token” categories leverage a lot of external
functionality, unlike “Game” and “Wallet” that appear to be
self-contained. “Game” contracts involve signiﬁcantly more
number of send/call invocations than any other category,
indicating a lot of Ether transfer between participants. “Misc.”
contracts account for half of the unique contracts, indicating
the diverse nature of contracts available on Ethereum. Lastly,
the generated LLVM bitcode is an order of magnitude more
than the source LOC, since it is unoptimized.
Fig. 15a shows the frequency of duplicates across our data
set. We observe that less than 5% contracts have more than
10 duplicates. For example, one wallet contract [49] in our
data set was duplicated 10.3K times. Further, the frequency of
11
(a) Frequency of duplicate contracts.
(b) Source LOC across contracts.
(c) LLVM LOC across contracts.
(d) Frequently used LLVM operations.
Fig. 15: Data set characterization.
duplicate token contracts at different addresses was also high.
In other words, contracts providing useful functionality are
more likely to be duplicated. Fig. 15b plots the source LOC
in Solidity for the unique contracts. The total source LOC was
over 111K, while mean and median were 74 and 54 LOC
respectively. The largest contract we analyzed had 1405 LOC.
However, over 90% of the contracts have 200 LOC or less.
ZEUS generates more than 1K LOC of LLVM bitcode for
around 30% of the contracts, with maximum being 91, 338.
(per Fig. 15c) The mean and median bitcode per contract
were 1354 and 439 respectively. In all, ZEUS veriﬁed over
2M lines of bitcode. Note that our LOC measurements did
not include any blank lines or comments. Lastly, we plot
the frequently occurring operations in the bitcode. Fig. 15d
presents the results for top four classes of operations, besides
memory load, store and GetElementPtr. We observe that
“arithmetic” operations are as frequent as “comparison”, “call”
and “alloc” operations.
B. Results with Solidity-based Smart Contracts
CORRECTNESS AND MINER’S INFLUENCE. We evaluate
ZEUS for all 1524 unique contracts for issues described
in § III-A and § III-C, and compare with Oyente for the
common bug classes, i.e., reentrancy, unchecked send, block-
state dependence and transaction-order dependence. We note
output for each scenario as either “Safe” or “Unsafe” (i.e.,
there is a potential issue). In case the veriﬁer throws an error
or quits before the timeout, we categorize the contract as “No
Result”. All other cases are categorized under “Timeout”.
the contract
Note that Solidity contracts are small and have few
local/global variables, which makes it tractable to capture/track
dependencies. Further, since no tools exist to ascertain the
ground truth, we manually validated each result to determine
the set of false positives and negatives. A false positive occurs
when ZEUS returns “Unsafe” but
is actually
“Safe”, while a false negative occurs when ZEUS returns
“Safe” when the contract is actually “Unsafe”. The false alarm
rate is the ratio of false positives over the total results returned,
i.e., both “Safe” and “Unsafe”. Table 4 lists the results for both
ZEUS and Oyente. The entire set of results are also available
at https://goo.gl/kFNHy3.
(1) Reentrancy: ZEUS detects 54 contracts as vulnerable
to reentrancy. More importantly,
it gives 0 false positives
and negatives, primarily due to its callee function patching
mechanism (per § V-C). In contrast, Oyente reports 265
contracts to be susceptible to reentrancy. Since Oyente does not
distinguish between send and call functions at the bytecode
level, it also considers reentrancy on send, which cannot occur
(recall § III-A). Hence, it reports a large number of unsafe
contracts, with a high false alarm rate of over 31%.
(2) Unchecked send: ZEUS reports 324 contracts affected
by the unchecked send bug, with 3 false positives and 0 false
negatives. We analyzed the offending contracts and observed
that ZEUS’s over-approximation in havocing all globals to
traverse control ﬂow not intended by the contract developer
and detect bugs along those paths. In contrast, Oyente marked
112 contracts as unsafe with no result in 203 contracts. Further,
it reports a high false alarm rate of around 7.5%.
(3) Failed send: ZEUS detects 447 contracts vulnerable to
the failed send bug with 0 false positives and negatives.
(4) Integer overﬂow/underﬂow: Smart contracts involve a
lot of arithmetic operations (per Fig. 15d), and contract writers
typically do not check for overﬂow/underﬂow conditions. This
is corroborated by the fact that 1095 of the 1524 contracts (or
around 72%) are vulnerable to this bug.
However, ZEUS also reports 40 false positives (i.e., a false
alarm rate of 2.7%). We manually analyzed all false positives
and observed that
they stem due to ZEUS havocing all
globals. For example, in one contract the percentage payout
was declared a global with a ﬁxed value. However, ZEUS
initializes it to the entire data domain, following which an
operation using the payout variable causes the operation to
overﬂow. A better program analysis (or abstract reﬁnement) of
smart contracts can help weed out such cases, where it is not
required to assign the entire data domain to a global variable.
(5) Transaction state dependence: ZEUS found 1513
contracts out of 1524 to be safe, while only 8 contracts were
deemed unsafe, with 0 false positives and negatives. ZEUS
was successfully able to detect the vulnerability as described
in Fig. 6 in the contract LittleEthereumdoubler [17].
(6) Block state dependence: ZEUS found 250 contracts to
be vulnerable, with 0 false positives/negatives. In contrast,
Oyente marked 15 contracts as unsafe, and failed to provide
results for 711 contracts (either due to timeout or no result).
ZEUS is conservative and considers all block parameters can
be modiﬁed, while Oyente considers only timestamp.
We observed that solWallet [49], which has over 1.4 million
Ether
is also susceptible to the block state
dependence bug. It uses now (an alias for block.timestamp)
that can easily be tampered with by the miner [14]. For
example, a miner can use a value of now, which can lie
anywhere between the current timestamp and 900 seconds in
the future, and allow monetary transactions (close to the end
of the day) even when its daily limit has been exhausted.
in balance,
12
 0.6 0.8 1 1 10 100 1000 10000CDFContract Frequency 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 200 400 600 800 1000 1200 1400CDFSolidity LOC 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 10 100 1000 10000 100000CDFLLVM LOC 0 0.2 0.4 0.6 0.8 1 1 10 100 1000CDF# LLVM InstructionsArithmeticBranchAllocCallZEUS
Oyente
Safe Unsafe No Result Timeout False +ve False -ve % False
Alarms
548
31.24
7.56
1066
51
188
265
112
226
203
485
143
254
89
Bug
Reentrancy
Unchkd. send
Failed send
Int. overﬂow
Tx. State Dep.
Blk. State Dep.
Tx. Order Dep.
Safe Unsafe No Result Timeout False +ve False -ve % False
Alarms
1438
0.00
0.20
1191
0.00
1068
2.72
378
0.00
1513
0.00
1266
894
1.07
7
5
3
18
0
3
13
Table 4: ZEUS’s evaluation and comparison with Oyente [68].
54
324
447
1095
8
250
607
0
3
0
40
0
0
16
25
4
6
33
3
5
10
0
0
0
0
0
0
0
15
129
798
668
226
222
485
485
2
116
84
158
0.25
14.20
(7) Transaction order dependence: ZEUS reported 607
contracts (or 39.8%) as unsafe, with 16 false positives, and
0 false negatives. The false positives stem from havocing
the globals leading to traversal of paths not intended by the
developer. In contrast, Oyente reported 129 contracts as unsafe
along with no decision for 707 contracts. It reported a false
alarm rate of 14.2%; an order of magnitude more than ZEUS.
SUMMARY. The above results enable four key observations:
• 21, 281 out of 22, 493 contracts (or 94.6%) containing more
than $0.5 billion worth of Ether are vulnerable to one or more
bugs. Across the unique contracts, 1194 out of 1524 contracts
were found to be vulnerable to one or more bugs.
• ZEUS’s use of abstract interpretation along with symbolic
model checking for veriﬁcation makes it sound. We observed
zero false negatives for all the seven bug classes. The low
false alarm rate can be further mitigated by improved program
analysis to weed out scenarios not intended by the developer.
• Use of CHCs enable quick veriﬁcation, with only 44 out of
1524 contracts (or 2.89%) timing out in at least one bug class.
ZEUS’s timeout threshold is fairly low at just 1 minute.