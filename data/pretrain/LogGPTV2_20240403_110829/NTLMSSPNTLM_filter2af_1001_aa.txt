# NTLM认证协议与SSP（上）——NTLM中高级进阶
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
内容参考原文链接：
翻译人：rootclay（香山）
Gitbook：
## 说明
本文是一篇NTLM中高级进阶文章，文中大部分参考来自于[Sourceforge](http://davenport.sourceforge.net/ntlm.html)，原文中已经对NTLM讲解非常详细，在学习的过程中思考为何不翻译之，做为学习和后续回顾的文档，并在此基础上添加自己的思考，因此出现了这篇文章，在翻译的过程中会有部分注解与新加入的元素，后续我也会在[Github](https://github.com/rootclay)和[Gitbook](https://rootclay.gitbook.io/ntlm/)对此文进行持续性的更新NTLM以及常见的协议中高级进阶并计划开源部分协议调试工具，望各位issue勘误。
## 摘要
本文旨在以中级到高级的详细级别描述NTLM身份验证协议(authentication protocol)和相关的安全支持提供程序功能(security
support provider
functionality)，作为参考。希望该文档能发展成为对NTLM的全面描述。目前，无论是在作者的知识还是在文档方面，都存在遗漏，而且几乎可以肯定的说本文是不准确的。但是，该文档至少应能够为进一步研究提供坚实的基础。本文提供的信息用作在开放源代码jCIFS库中实现NTLM身份验证的基础，该库可从
[http://jcifs.samba.org获得。本文档基于作者的独立研究，并分析了[Samba](http://www.samba.org/)软件套件。](http://jcifs.samba.org%E8%8E%B7%E5%BE%97%E3%80%82%E6%9C%AC%E6%96%87%E6%A1%A3%E5%9F%BA%E4%BA%8E%E4%BD%9C%E8%80%85%E7%9A%84%E7%8B%AC%E7%AB%8B%E7%A0%94%E7%A9%B6%EF%BC%8C%E5%B9%B6%E5%88%86%E6%9E%90%E4%BA%86%5BSamba%5D\(http://www.samba.org/\)%E8%BD%AF%E4%BB%B6%E5%A5%97%E4%BB%B6%E3%80%82)
## 什么是NTLM？
NTLM是一套身份验证和会话安全协议，用于各种Microsoft网络协议的实现中（注：NTLM为嵌套协议，被嵌套在各种协议，如HTTP、SMB、SMTP等协议中），并由NTLM安全支持提供程序（”NTLMSSP”）支持。NTLM最初用于DCE/RPC的身份验证和协商（Negotiate），在整个Microsoft系统中也用作集成的单点登录机制（SSO）。可以认为NTLM是HTTP身份验证的技术栈的一部分。同时，它也用于SMTP，POP3，IMAP（Exchange的所有部分），CIFS/SMB，Telnet，SIP以及其他可能的Microsoft实现中。
NTLM Security Support Provider在Windows Security Support
Provider（SSPI）框架内提供身份验证（Authentication），完整性（Signing）和机密性（Sealing）服务。SSPI定义了由支持提供程序(supporting
providers)实现的一组核心安全功能集；NTLMSSP就是这样的提供程序(supporting
providers)。SSPI定义并由NTLMSSP实现以下核心操作：
  1. 身份验证（Authentication）-NTLM提供了质询响应(challenge-response)身份验证机制，在这种机制中，客户端无需向服务器发送密码即可证明其身份。(注：我们常说的PTH等等操作都发生在这里。)
  2. 签名（Signing）-NTLMSSP提供了一种对消息应用数字”签名”的方法。这样可以确保已签名的消息未被（偶然或有意地）修改，并且确保签名方知道共享机密。NTLM实现了对称签名方案（消息身份验证码或MAC）；也就是说，有效的签名只能由拥有公共共享Key的各方生成和验证。
  3. Sealing（注：找不到合适的词来翻译，可以理解为加密封装）-NTLMSSP实现了对称Key加密机制，该机制可提供消息机密性。对于NTLM，Sealing还意味着签名（已签名的消息不一定是已Sealing的，但是所有已Sealing的消息都已签名）。
Kerberos已取代NTLM成为基于域的方案的首选身份验证协议。但是，Kerberos是需要有受信任的第三方方案，不能在不存在受信任的第三方的情况下使用。例如，成员服务器（不属于域的服务器），本地帐户以及对不受信任域中资源的身份验证。在这种情况下，NTLM仍然是主要的身份验证机制（可能会持续很长时间）。
## NTLM通用术语
在开始深入研究之前，我们需要定义各种协议中使用的一些术语。  
由于翻译的原因我们大概约定一些术语：  
协商 = Negotiate  
质询 = Challenge  
响应 = Response  
身份验证 = Authentication  
签名 = Signing
NTLM身份验证是一种质询-响应方案，由三个消息组成，通常称为Type 1（协商），Type 2（质询）和Type 3（身份验证）。它基本上是这样的：
  1. 客户端向服务器发送Type 1消息。它主要包含客户端支持和服务器请求的功能列表。
  2. 服务器以Type 2消息响应。这包含服务器支持和同意的功能列表。但是，最重要的是，它包含服务器产生的challenge。
  3. 客户用Type 3消息答复质询。其中包含有关客户端的几条信息，包括客户端用户的域和用户名。它还包含对Type 3 challenge 的一种或多种响应。  
Type 3消息中的响应是最关键的部分，因为它们向服务器证明客户端用户已经知道帐户密码。
认证过程建立了两个参与方之间的共享上下文；这包括一个共享的Session Key，用于后续的签名和Sealing操作。
在本文档中，为避免混淆（无论如何，尽可能避免混淆），将遵循以下约定（除了“NTLM2会话响应”身份验证（NTLMv1身份验证的一种变体，与NTLM2会话安全性结合使用）的特殊情况外。）：
  * 在讨论身份验证时，协议版本将使用”v编号”。例如” NTLM v1身份验证”。
  * 在讨论会话安全性（签名和Sealing）时，”v”将被省略；例如” NTLM 1会话安全性”。
“ short “是一个低位（little-endian，即小端，这在实现协议库时会有小差别，不写代码可以忽略）字节的16位无符号值。例如，表示为short的十进制值”1234”
将以十六进制物理布局为” 0xd204 “。
“ long “是32位无符号小尾数。以十六进制表示的长整数十进制值” 1234 “为” 0xd2040000 “。
Unicode字符串是一个字符串，其中每个字符都表示为一个16位的little-endian值（16位UCS-2转换格式，little-endian字节顺序，没有字节顺序标记，没有空终止符）。Unicode中的字符串” hello”将以十六进制表示为”
0x680065006c006c006f00 “。
OEM字符串是一个字符串，其中每个字符都表示为本地计算机的本机字符集（DOS代码页）中的8位值。没有空终止符。在NTLM消息中，OEM字符串通常以大写形式显示。OEM中的字符串”
HELLO”将用十六进制表示为” 0x48454c4c4f “。
“安全缓冲区”（security buffer）是用于指向二进制数据缓冲区的结构。它包括：
  1. 一个short的内容，包含缓冲区内容的长度（以字节为单位）（可以为零）。
  2. 一个short的信息，包含为缓冲区分配的空间（以字节为单位）（大于或等于长度；通常与长度相同）。
  3. 一个long，包含到缓冲区开头的偏移量（以字节为单位）（从NTLM消息的开头）。
因此，安全缓冲区” 0xd204d204e1100000 “将被读取为：  
Length: 0xd204 (1234 bytes)  
Allocated Space: 0xd204 (1234 bytes)  
Offset: 0xe1100000 (4321 bytes)
比如下图表示的数据就是一个安全缓冲区：
如果您从消息中的第一个字节开始，并且向前跳过了4321个字节，那么您将位于数据缓冲区的开头。您将读取1234个字节（这是缓冲区的长度）。由于为缓冲区分配的空间也是1234字节，因此您将位于缓冲区的末尾。
## NTLM Message Header Layout（NTLM消息头）
现在，我们准备看一下NTLM身份验证消息头的布局。
所有消息均以NTLMSSP签名开头，该签名（适当地）是以null终止的ASCII字符串” NTLMSSP”（十六进制的”
0x4e544c4d53535000 “）。
下一个是包含消息Type （1、2或3）的long。例如，Type 1消息的十六进制Type 为” 0x01000000 “。
这之后是特定于消息的信息，通常由安全缓冲区和消息Flags组成。
###  NTLM Flags
消息Flags包含在头的位域中。这是一个
long，其中每个位代表一个特定的Flags。这些内容中的大多数出现在特定消息中，但是我们将全部在这里介绍它们，可以为其余的讨论建立参考框架。下表中标记为”unidentified”或”unknown”的Flags暂时不在作者的知识范围之内。
注：下表第一次使用中文描述，之后不再使用英文描述。
flag | 名称 | 描述  
---|---|---  
0x00000001 | Negotiate Unicode | 指示在安全缓冲区数据中支持使用Unicode字符串。  
0x00000002 | Negotiate OEM | 表示支持在安全缓冲区数据中使用OEM字符串。  
0x00000004 | Request Target | 请求将服务器的身份验证领域包含在Type 2消息中。  
0x00000008 | unknown | 该Flags的用法尚未确定。  
0x00000010 | Negotiate Sign | 指定客户端和服务器之间的经过身份验证的通信应带有数字签名（消息完整性）。  
0x00000020 | Negotiate Seal | 指定应该对客户机和服务器之间的已验证通信进行加密（消息机密性）。  
0x00000040 | Negotiate Datagram Style | 指示正在使用数据报认证。  
0x00000080 | Negotiate Lan Manager Key | 指示应使用Lan ManagerSession
Key来签名和Sealing经过身份验证的通信。  
0x00000100 | Negotiate Netware | 该Flags的用法尚未确定。  
0x00000200 | Negotiate NTLM Key | 指示正在使用NTLM身份验证。  
0x00000400 | Negotiate Only NT （unknown） | 该Flags的用法尚未确定。  
0x00000800 | Negotiate Anonymous | 客户端在Type 3消息中发送以指示已建立匿名上下文。这也会影响响应字段（如”
匿名响应 “部分中所述）。  
0x00001000 | Negotiate OEM Domain Supplied | 客户端在Type
1消息中发送的消息，指示该消息中包含客户端工作站具有成员资格的域的名称。服务器使用它来确定客户端是否符合本地身份验证的条件。  
0x00002000 | Negotiate OEM Workstation Supplied | 客户端在”Type
1”消息中发送以指示该消息中包含客户端工作站的名称。服务器使用它来确定客户端是否符合本地身份验证的条件。  
0x00004000 | Negotiate Local Call |
由服务器发送以指示服务器和客户端在同一台计算机上。表示客户端可以使用已建立的本地凭据进行身份验证，而不是计算对质询的响应。  
0x00008000 | Negotiate Always Sign | 指示应使用”虚拟”签名对客户端和服务器之间的已验证通信进行签名。  
0x00010000 | Target Type Domain | 服务器在Type 2消息中发送以指示目标身份验证领域是域。  
0x00020000 | Target Type Server | 服务器在Type 2消息中发送的消息，指示目标身份验证领域是服务器。  
0x00040000 | Target Type Share | 服务器在Type
2消息中发送以指示目标身份验证领域是共享。大概是用于共享级别的身份验证。用法尚不清楚。  
0x00080000 | Negotiate NTLM2 Key（Negotiate Extended Security） |
说明应使用NTLM2签名和Sealing方案来保护经过身份验证的通信。请注意，这是指特定的会话安全方案，与NTLMv2身份验证的使用无关。但是，此Flags可能会影响响应计算（如”
NTLM2会话响应 “部分中所述）。  
0x00100000 | Request Init Response（Negotiate Identify） | 该Flags的用法尚未确定。  
0x00200000 | Request Accept Response（Negotiate 0x00200000） | 该Flags的用法尚未确定。  
0x00400000 | Request Non-NT Session Key | 该Flags的用法尚未确定。  
0x00800000 | Negotiate Target Info | 服务器在Type
2消息中发送的消息，表明它在消息中包含目标信息块。目标信息块用于NTLMv2响应的计算。  
0x01000000 | 未知 | 该Flags的用法尚未确定。  
0x02000000 | 未知 | 该Flags的用法尚未确定。  
0x04000000 | 未知 | 该Flags的用法尚未确定。  
0x08000000 | 未知 | 该Flags的用法尚未确定。  
0x10000000 | 未知 | 该Flags的用法尚未确定。  
0x20000000 | Negotiate 128 | 表示支持128位加密。  
0x40000000 | Negotiate Key Exchange | 指示客户端将在Type 3消息的”Session
Key”字段中提供加密的Master Key。  
0x80000000 | Negotiate 56 | 表示支持56位加密。  
下面使用NTLM认证流程的数据包内容做示例参考学习研究：  
NTLM Type1 Flag
NTLM Type2 Flag