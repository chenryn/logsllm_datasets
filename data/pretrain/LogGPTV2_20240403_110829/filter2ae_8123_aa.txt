# 作者简介
练良伟，中通信息安全团队软件开发工程师，负责中通内部安全通讯产品的开发工作，专注于服务端开发相关的技术研究。
# 1.项目背景
中通快递目前拥有几万个快递网点、代理点和承包区，这些网点分布在全球各地。每天网点与网点、网点与集团总部之间都需要传输大量的信息，信息类型包括文本、图片、文件、语音等。在研发内部安全通讯软件之前，主要使用QQ、微信、钉钉等公众即时通讯类软件传输信息，导致公司的私密信息直接暴露在公共网络以及私人设备上，无法进行有效管控，存在严重的信息泄露安全风险。因此我们迫切需要一款有安全保障的即时通讯软件作为公司内部的信息交流通道。
# 2.需要解决的问题
在开始软件产品设计之前，我们要先调研用户的实际需求，并从中总结出产品在设计过程中需要解决的主要问题,下面是中通快递使用即时通讯软件交流信息的几个典型应用场景。
  * 中通内部网点与网点、网点与总部之间每天都会在网络上传输包含银行账户、个人身份等私密资料的信息，万一泄露有可能给用户造成一定的损失。
  * 快递业作为服务行业，客户与网点、网点与网点之间每天都会产生需要总部仲裁、申诉才能解决的争议，这时总部工作人员会要求网点提供文字、图片等相关证明材料，这些消息如果在传输途中丢失，将会导致后续的申诉、仲裁流程无法进行。
  * 中通快递每天都会产生大量的订单、工单，订单、工单都是具有时效性的，网点希望能够通过即时通讯系统定时推送提醒消息以便能及时处理订单和工单。因此有可能会造成较短时间内需要转发大量消息的场景，这就要求即时通讯服务具有高可用性，能够在面对流量突增的情况下保持系统的稳定运行。
综合上面的几个应用场景，我们可以很容易的总结出内部安全即时通讯需要解决的三个主要问题
  * 如何保护消息内容的机密性，即消息内容不被泄漏
  * 如何保障消息的完整性，即接收方与发送方的消息内容是一致的，中途没有丢失或者被非法篡改
  * 如何提高系统的可用性，即保障即时通讯服务随时可用，能够满足24小时不间断稳定运行的要求
# 3.设计方案
针对上面这三个问题，谈谈我们具体的设计方案，图1是我们的系统架构图，结构分层比较简洁，不作赘述。
## 3.1 消息机密性设计
一般在网络中传输的数据，都可以认为是存在潜在的安全风险的。用一句话来概括就是：“任何在网络中传输的明文数据都存在安全性威胁”，目前通常采用对数据加密的手段防止信息内容泄漏。
### 3.1.1 选择合适的算法
加密算法根据密钥的的对称性分为对称加密和非对称加密两大类：
非对称加密的密钥分为公钥和私钥，公钥用于加密，私钥用于解密。常用的有RSA加密算法，非对称加密速度较慢，适合小数据量的加解密或作为固定密钥的加密算法。
对称式加密算法加密和解密使用相同的密钥，常用的有以下几种
  * DES（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合。
  * AES（Advanced Encryption Standard）：高级加密标准，是下一代的加密算法标准，速度快，安全级别高。
  * BLOWFISH：每次加解密8字节数据，加密和解密的过程基本上由ADD和XOR指令运算组成，速度最快。
使用哪种加密算法需要综合考虑使用场景、安全需求等方面的因素。在我们的系统中，每天需要传输的数据包数量众多但单个数据包的长度较短，为了提高即时通讯服务端的消息处理能力，加解密速度是我们选择算法时重要的考量指标，因此在我们的消息加解密中选用了BLOWFISH算法。
BLOWFISH算法由于使用固定密钥加解密，在实际应用中还存在以下两个安全隐患：
  * 如果密钥以硬编码的方式保存在客户端，那么一旦客户端被逆向破解就可能会造成密钥泄漏
  * 如果使用动态密钥，发送方需要将密钥一起发送给接收方，接收方才能正常解密，传输过程中存在被非法拦截和破解的风险
为了解决上面的两个安全问题，我们采用了一人一密+本地生成动态密钥的组合加密方式。一人一密+本地生成动态密钥避免了在客户端硬编码密钥的风险，同时本地生成动态密钥也使密钥不再需要在网络上传输，保护了密钥的安全。
### 3.1.2 一人一密+本地生成动态密钥的加密方案
客户端与服务端的TCP会话成功建立后，通讯双方分别根据预先约定的算法生成初始化密钥。每个密钥只能够使用一次，下一个数据包的加解密必须使用新的密钥。新的密钥生成规则：包的序列号+消息的MD5散列码+上一次密钥。服务端接收到数据包后，首先使用本地密钥进行解密，然后使用与客户端相同的规则生成下一次加解密的密钥。
## 3.2 消息完整性设计
消息完整性包含两方面的内容，一是指信息安全方面的完整性，指消息内容在传输过程没有被非法篡改及伪造；二是消息传输的可靠性，即保证用户发送的消息能够完整到达接收方，在传输过程中不会丢失消息。
下面将详细描述我们是如何实现消息完整性需求的
### 3.2.1. 使用数据签名保护消息完整性
使用一人一密+本地生成动态密钥的加解密方案解决了消息机密性的问题，但是我们还不能防止包在传输过程中被非法篡改及伪造。MD5的一个典型应用场景是对一段Message(字节串)产生fingerprint(指纹），用来防止消息内容被“篡改、伪造”，从而达到保护消息完整性的目的。接下  
来简单介绍下我们的数据签名流程。
首先需要计算出消息内容的MD5散列码，然后使用RSA加密算法生成签名信息。最后将签名信息与消息内容一起发送到服务端，服务端使用解密后的消息内容重新生成签名信息，如果消息在传输途中被篡改，我们就会发现新生成的签名信息与接收到的签名信息不一致，服务端将立即断开与客户端的连接，并将异常行为上报到中通安全监控系统。
### 3.2.2. 使用确认、重传机制保障消息传输可靠性
由于网络环境复杂，七层网络模型里面的任何一层出问题都有可能导致数据包丢失。例如在我们的消息从客户端A传输到客户端B的场景中，下面的几个原因都会导致在传输过程中丢包。
  * 即时通讯服务器崩溃，包未成功转发
  * 网络抖动，包被网络设备丢弃
  * 客户端B崩溃，包未被成功接收
结论是悲观的：客户端B是否有收到消息，客户端A完全不可控，那我们要如何来保障消息的可靠性呢？我们一起来看看关于网络传输协议的描述：UDP是一种不可靠的传输层协议，TCP是一种可靠的传输层协议，TCP是如何做到可靠的？答案是：使用超时、重传、确认三种机制。既然这种方案已经被证明是切实可行的，那我们为什么不借鉴使用呢？
中通内部即时通讯软件传输协议使用的是TCP协议，既然TCP协议是可靠的，那我们只需要在应用层也实现类似传输层的确认、重传、去重机制，就可以保障消息的可靠投递。
应用层的确认机制，即：要想让客户端A能够确认客户端B成功收到了消息，必须让客户端B在收到消息后回复一个确认报文。这里还有一个场景，就是当客户端B不在线的情况下，这时服务端将在成功持久化离线消息后，伪造一份确认报文发送给客户端A（之后的可靠性由离线消息接收机制保障）。
使用确认机制就能保证消息可靠性了吗？事实是还不够，我们还需要考虑因服务端奔溃、网络抖动、客户端奔溃而导致无法收到确认报文等场景。