title:V-Shuttle: Scalable and Semantics-Aware Hypervisor Virtual Device
Fuzzing
author:Gaoning Pan and
Xingwei Lin and
Xuhong Zhang and
Yongkang Jia and
Shouling Ji and
Chunming Wu and
Xinlei Ying and
Jiashui Wang and
Yanjun Wu
V-Shuttle: Scalable and Semantics-Aware Hypervisor Virtual
Device Fuzzing
Gaoning Pan
PI:EMAIL
Zhejiang University & Ant Group
Xingwei Lin
PI:EMAIL
Ant Group
Yongkang Jia
PI:EMAIL
Zhejiang University
Shouling Ji∗
PI:EMAIL
Zhejiang University & Binjiang
Institute of Zhejiang University
Xuhong Zhang
PI:EMAIL
Zhejiang University & Binjiang
Institute of Zhejiang University
Chunming Wu∗
PI:EMAIL
Zhejiang University
Xinlei Ying
PI:EMAIL
Ant Group
Jiashui Wang
PI:EMAIL
Ant Group
Yanjun Wu
PI:EMAIL
Institute of Software, The Chinese
Academy of Sciences
ABSTRACT
With the wide application and deployment of cloud computing
in enterprises, virtualization developers and security researchers
are paying more attention to cloud computing security. The core
component of cloud computing products is the hypervisor, which
is also known as the virtual machine monitor (VMM) that can
isolate multiple virtual machines in one host machine. However,
compromising the hypervisor can lead to virtual machine escape
and the elevation of privilege, allowing attackers to gain the permis-
sion of code execution in the host. Therefore, the security analysis
and vulnerability detection of the hypervisor are critical for cloud
computing enterprises. Importantly, virtual devices expose many
interfaces to a guest user for communication, making virtual de-
vices the most vulnerable part of a hypervisor. However, applying
fuzzing to the virtual devices of a hypervisor is challenging because
the data structures transferred by DMA are constructed in a nested
form according to protocol specifications. Failure to understand the
protocol of the virtual devices will make the fuzzing process stuck
in the initial fuzzing stage, resulting in inefficient fuzzing.
In this paper, we propose a new framework called V-Shuttle to
conduct hypervisor fuzzing, which performs scalable and semantics-
aware hypervisor fuzzing. To address the above challenges, we first
design a DMA redirection mechanism to significantly reduce the
manual efforts to reconstruct virtual devices’ protocol structures
and make the fuzzing environment setup automated and scalable.
Furthermore, we put forward a new fuzzing mutation scheduling
∗Chunming Wu and Shouling Ji are the co-corresponding authors.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484811
mechanism called seedpool to make the virtual device fuzzing pro-
cess semantics-aware and speed up the fuzzing process to achieve
high coverage. Extensive evaluation on QEMU and VirtualBox, two
of the most popular hypervisor platforms among the world, shows
that V-Shuttle can efficiently reproduce existing vulnerabilities
and find new vulnerabilities. We further carried out a long-term
fuzzing campaign in QEMU/KVM and VirtualBox with V-Shuttle.
In total, we discovered 35 new bugs with 17 CVEs assigned.
CCS CONCEPTS
• Security and privacy → Virtualization and security; Software
security engineering;
KEYWORDS
Hypervisor; Virtual Device; Fuzzing; Vulnerability
ACM Reference Format:
Gaoning Pan, Xingwei Lin, Xuhong Zhang, Yongkang Jia, Shouling Ji, Chun-
ming Wu, Xinlei Ying, Jiashui Wang, and Yanjun Wu. 2021. V-Shuttle:
Scalable and Semantics-Aware Hypervisor Virtual Device Fuzzing. In Pro-
ceedings of Proceedings of the 2021 ACM SIGSAC Conference on Computer
and Communications Security, Virtual Event, Republic of Korea, November
15–19, 2021 (CCS ’21), 17 pages.
https://doi.org/10.1145/3460120.3484811
1 INTRODUCTION
Cloud computing becomes quite prevalent nowadays, as organiza-
tions and individual users prefer to deploy their applications on
top of the cloud computing infrastructure for its rapid and scalable
deployment ability. Major cloud service providers, such as Amazon
Web Services (AWS), Microsoft Azure, and Alibaba Cloud, continue
to grow with the increasing demand for cloud computing resources.
However, the popularity of cloud computing also leads to the secu-
rity concerns of the cloud computing software and hardware stack.
Famous PWN contests, such as Pwn2Own and Tianfu Cup [10, 11],
have the virtualization category that targets hypervisors, including
VMWare WorkStation/Esxi, QEMU/KVM, and VirtualBox. Virtual
Session 7B: Fuzzing CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2197hardware devices used by guests are hardware peripherals emu-
lated in modern hypervisors that provide a virtual machine with
additional functionality. From the attacker’s perspective, the vir-
tual devices allow the attackers to write data to the host machine
from the guest system. This feature makes the virtual devices be-
come the most vulnerable attack surface of the hypervisor system
architecture. In the past few years, almost all attacks on the hyper-
visor were launched from virtual devices [28, 46, 54]. Hence, it is
critical to conduct security vetting of the virtual devices’ code to
avoid exposing vulnerabilities to attackers in advance. Toward this,
we need efficient and scalable techniques to identify the potential
vulnerabilities.
In practice, fuzzing has been proved an effective way to discover
bugs and vulnerabilities in modern software [5, 14, 16, 19, 25, 32, 49].
However, our observation is that applying fuzzing to hypervisor is
challenging, as the inherent hypervisor-specific challenges make
fuzzing ineffective. Typically, a hypervisor is designed to expose
interfaces to a guest system, such that guest users can drive the
virtual device to emulate its behavior. Most devices follow the com-
mon operation model, where the device states are first initialized
through MMIO, and then the complex data transfer process is com-
pleted through DMA, as shown in Figure 1. It is natural to write
random data into these interfaces by using fuzzing techniques, but
the data transferred by DMA is highly nested, which severely hin-
ders traditional fuzzing from expanding code coverage. Specifically,
the data structures defined in a device’s specification are often con-
structed as a tree, where each node contains a link pointer to the
next node. Certain DMA operations take a large size of the input
from the guest space, and they use a nested structure in the input
structures — i.e., a field member in one structure points to another
structure. From the perspective of random fuzzing, such a nested
structure is difficult to construct as it has to correctly guess the
semantics of the overall organization (hierarchically nested pattern)
and the internal semantics imposed in each node (i.e., a pointer
field pointing to another).
Considering that the security of hypervisor is critical, various
fuzzing tools have been proposed to detect bugs in a hypervi-
sor [9, 13, 20, 22, 31, 34, 43, 50, 51]. The state-of-the-art methods
include VDF [34], Hyper-Cube [50] and Nyx [51]. VDF is the first
hypervisor fuzzing framwork, which utilizes AFL to implement
a coverage-guided hypervisor fuzzing approach. Hyper-Cube de-
signs a multi-dimensional, platform-independent fuzzing method
based on a custom OS. Although Hyper-Cube does not apply the
coverage-guided fuzzing technology into its fuzzing process, it still
outperforms VDF due to its high-throughput design. However, both
of them share the same idea: they write a bunch of random val-
ues to the basic interface (MMIO, DMA, etc.). Further, they have
no knowledge of the protocol implementation of a virtual device -
how the data structures transferred via DMA are organized. Nyx
understands the protocol of the target device and builds structured
fuzzing based on user-supplied specifications. However, it requires
significant manual effort to create the template for a specification.
For example, the authors of Nyx spent about two days on the most
complex specification in their evaluation. Hence, Nyx does not
scale across different device implementations, as it requires manual
adaptation when customized for each new protocol. This is the
common disadvantage of structured fuzzing [14, 48, 59], as its effec-
tiveness heavily depends on the completeness of the nested form
of structures, which is normally written manually based on the
developers’ understanding of the protocol specification. Typically,
developers need to extract all types of basic data structures from
the device protocol, including the connection relationship between
basic structures, and the pointer offset in each data structure. Such
a labor-intensive process to apply structured fuzzing to hypervi-
sor is time-consuming and error-prone. As a result, existing fuzzing
approaches cannot effectively test virtual devices.
In order to tackle this challenge, we propose V-Shuttle,1 - a
scalable and semantics-aware hypervisor fuzzing framework. Over-
all, we achieve a fully automatic fuzzing approach by decoupling
the nested structures and enabling type awareness. In particular,
we first intercept each access to a DMA object and redirect the
access from a pointer to our controlled fuzzed input, eliminating
the addressing of data structures by the hypervisor to make sure
each DMA request will be supplied with the fuzzed data. Then,
we perform fine-grained semantics-aware fuzzing by organizing
the structures of different DMA object types into different cate-
gories and using seedpool to maintain the seed queues of these
different categories. This method allows each DMA request to be
supplied with semantics-valid fuzzed data, which further improves
the efficiency of fuzzing.
We implemented V-Shuttle based on the well-known fuzzer
AFL. We first evaluate our system by running experiments on 16
QEMU devices and obtain the code coverage. As the evaluation
results show, V-Shuttle is truly scalable and automatic to explore
deep code in a hypervisor, which eliminates the manual efforts
to construct valid test cases according to specifications. Moreover,
V-Shuttle even outperforms traditional structure-aware fuzzing,
mainly because the process of manually understanding a speci-
fication is error-prone. Meanwhile, the semantics-aware fuzzing
mode of V-Shuttle, also brings substantial improvements. Com-
pared to state-of-the-art hypervisor fuzzers, V-Shuttle produces
higher code coverage in most cases than VDF, Hyper-Cube, and
Nyx. Regarding the capability of finding vulnerability, V-Shuttle
identifies 35 previously unknown vulnerabilities in two popular
hypervisors, out of which 17 new CVEs were assigned. We have re-
ported the discovered vulnerabilities to the respective vendors and
are working with them on fixing these vulnerabilities. Additionally,
we have also successfully implemented V-Shuttle to Ant Group, a
worldwide leading Internet company, which further demonstrates
the scalability of our framework. We hope that our tool will aid
developers in hardening the hypervisor, leading to better software
security.
The main contributions of this work are as follows.
• The Study on DMA: We systematically analyze the driver-
device interaction in virtual machine transaction, and study
why we should focus on the DMA-related part of code. Ad-
ditionally, we reveal that the data structures transferred via
DMA have nested features which will reduce the efficiency
of fuzzing.
1V-SHUTTLE stands for V model shuttlecraft that we aim to shuttle/escape from the
guest virtual machine to host machine by fuzzing hypervisors.
Session 7B: Fuzzing CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2198• A Fuzzing Framework: We present the design and imple-
mentation of V-SHUTTLE, a scalable and semantics-aware
hypervisor fuzzing framework, which can automatically de-
couple nested structures and guide fuzzing to explore hard-
to-trigger code. To our knowledge, V-SHUTTLE is the first
hypervisor fuzzing framework that has an automatic and
deep understanding of the protocol implementations in de-
vices.
• Discovered Vulnerabilities: As part of our evaluation, we
discovered 35 previously unknown vulnerabilities with 17
CVEs assigned in QEMU and VirtualBox, two of the most
widely used hypervisors. We responsibly disclosed the rele-
vant details to the corresponding vendors.
• An Open-source Tool: We will open-source V-Shuttle2,
in order to facilitate further research on virtualization secu-
rity.
The rest of the paper is organized as follows. Section 2 presents
the background information with a motivating example. Section 3
describes V-Shuttle’s design, and Section 4 describes the imple-
mentation details. We show the evaluation results of our approach
in Section 5 and the deployment of V-Shuttle in Section 6. The
related research and limitation of V-Shuttle are discussed in Sec-
tion 7 and Section 8, respectively. Finally, we conclude in Section 9.
Figure 1: General workflow of the virtual machine transaction.
2 BACKGROUND AND MOTIVATION
We provide the necessary background information to understand
what are virtual devices of hypervisors, and how the driver-device
communication is handled. After that, we elaborate on the core
challenge of hypervisor fuzzing.
2.1 Virtual Devices of Hypervisors
Virtual devices used by guest users are hardware peripherals em-
ulated in modern hypervisors that provide a VM with additional
functionality. A virtual device acts as real hardware in a guest VM,
which means the drivers in a guest OS can drive a virtual device the
2https://github.com/hustdebug/v-shuttle
same as they do for a physical device. Modern hypervisors virtual-
ize nearly all the hardware such as graphics cards, storage devices,
network cards, USB, etc. Each device’s protocol specification de-
fines a unique register-level hardware interface for communication
between the device and the operating system. Generally, virtualiza-
tion developers design virtual devices based on the specifications.
Because of the virtual device’s nature (virtual device emulation is at
the host level, and the guest can access virtual devices with arbitrary
data), they are typically the largest attack surface of hypervisors.
2.2 Driver-Device Interaction
Overall, a virtual device exposes three important interaction inter-
faces to guest adversaries: memory-mapped I/O (MMIO), Port I/O
(PIO), and direct memory access (DMA). Figure 1 illustrates a general
workflow of the virtual machine transaction. At the beginning of a
device’s execution, the guest driver usually writes data to MMIO or
PIO regions to make the device do some initialization work, such as
device state setup and address register initialization, which targets
the pre-allocated buffer in the guest. After the initialization stage
is done, the device turns to a state where the device is ready to
process data. The device starts doing some device-specific work (i.e.,
transferring USB data and sending network packets). The primary
interaction mechanism in this data processing stage is DMA, which
allows the device to transfer large and complex data with the guest.
Since the data processing part is the device’s main functionality
containing most code paths, this part is more likely to introduce
security risks than other parts.
To demonstrate that virtual devices of a hypervisor widely use
DMA, we did a statistic analysis on the percentage of devices in
QEMU that support DMA communication. We selected the five most
popular QEMU device categories (excluding some misc devices and
back-end devices) used in virtualization scenarios. We manually
analyze whether there is a DMA transmission mechanism in the
device. The results are shown in Table 1, which shows that 72.5%
of the devices support DMA. Except for the display devices, almost
all devices have to use DMA to transfer complex data structures
(especially those involving storage and network). Therefore, DMA is
extensively used in a hypervisor, requiring us to pay more attention
to DMA-related code when applying fuzzing to the hypervisor.
Table 1: Statistics of the number of devices supporting DMA and all devices
in QEMU.
Category
USB
Storage
Network
Display
Audio
Avg
Device (support DMA)
uhci, ehci, ohci, xhci
esp, ahci, lsi53c810, megasas, mptsas, nvme,
pvscsi, sdhci, virtio-blk, virtio-scsi, virtio-9p
e1000, e1000e, eepro100, pcnet, rocker,
rtl8139, tulip, vmxnet3, virtio-net
(null)
ac97, cs4231a, es1370, intel-hda, sb16
Number
Total
4
11