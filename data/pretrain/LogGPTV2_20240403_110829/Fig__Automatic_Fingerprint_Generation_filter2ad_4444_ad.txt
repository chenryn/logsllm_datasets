### Qdcount Field Analysis

The `Qdcount` field, which indicates the number of DNS queries in a packet, typically has a value of one. However, if the query is invalid, some implementations may set this field to one in the response, while others may set it to zero. Notably, current tools such as `fpdns` do not test this field, considering it uninteresting.

### Preliminary Exploration of Query Space

Our initial exploration of the candidate query space has revealed multiple novel fingerprints. This confirms our hypothesis that the space of queries suitable for fingerprinting remains largely unexplored and highlights the effectiveness of our automated approach.

### 5.4. Clustering

For the clustering experiments, we used 70% of the hosts in each class to generate clusters and evaluated approximate matching with the remaining 30%, similar to the fingerprint generation experiments. We employed the X-Means algorithm on two feature spaces: one derived from a selected set of fields containing implementation-specific information (Chosen Fields) and the other from the complete TCP/IP or DNS headers (Full Header). The X-means range was set conservatively from one to twenty, ensuring the upper limit was never reached.

#### Clustering Results

Table 5 presents the clustering results for the OS and DNS experiments. As expected, many classes defined in Tables 1 and 2 spread across multiple clusters, indicating diverse behaviors within the same class. Manual inspection of some DNS clusters revealed that these splits were often due to multiple versions within the same class, such as BIND 9.2.3 and 9.3.2, which, despite being in the same class, exhibit different behaviors. Additionally, some BIND tags, like 9.3.0, represent up to eight different versions (three betas, four release candidates, and the final version).

#### Feature Space Visualization

To analyze the differences between Chosen Fields and Full Header cases and to check if hosts from different classes are well-separated, we visualized the distances between hosts by projecting the feature space into the first two principal components. Hosts belonging to the same class were plotted using the same icon. Although this visualization does not reflect precise distances, the first two principal components are significant enough to show qualitative distances between different clusters.

- **Chosen Fields (Figures 6(a) and 6(b))**:
  - **OS Case**: Classes are well-separated, with only one Windows cluster (six hosts) slightly farther from the rest but still clearly distinct from other classes.
  - **DNS Case**: Classes are more spread out, and the distances between hosts in the same class are larger. For example, some BIND9 hosts are close to BIND8 hosts, while others are close to MyDNS hosts. This could be due to the evolution of versions within the same implementation, which are expected to be close when they share a significant code base and move apart as new versions evolve. No cluster contains hosts from two implementation classes.

- **Full Header (Figure 6(c))**:
  - Using the full header, hosts in the same class are further apart, and hosts from different classes are closer or even overlap. For instance, one cluster contains hosts from both BIND8 and BIND9 classes, labeled as "Mixed" in Table 5. This suggests that an approach without domain knowledge, which considers the complete protocol header, does not yield well-separated clusters. This is because some protocol fields, such as the DNS ID or DNS answers, may carry more weight than implementation-specific differences.

### Quantitative Analysis of Approximate Matching

We quantitatively measured the performance of approximate matching for the OS and DNS cases with Chosen Fields. The experiment involved removing one class, extracting clusters using 70% of the hosts in the remaining classes, and performing approximate matching using the z-gap rule on the remaining 30% of hosts plus all hosts from the removed class. This process was repeated, each time removing a different class, and the average classification error was calculated for different values of z.

- **Results**:
  - The classification error is minimized with z â‰ˆ 2 for both OS and DNS cases.
  - For the DNS case, the error increases rapidly for other z values, whereas the OS case does not show such a strong increase.
  - With z = 2, the classification error is 3% for the OS case and 12% for the DNS case, indicating that class separation for OS with Chosen Fields is more robust and suitable for approximate matching, but less so for DNS.

### 6. Related Work

Fingerprinting has been used for over a decade. In 1994, Comer and Lin proposed probing to find differences between TCP implementations [15]. Early applications focused on standard compliance testing, identifying flaws, optional functionality support, protocol violations, and design decisions [22]. Research has also explored passive identification of TCP implementations from traffic traces [23] and passive classification of host operating systems [13, 19]. Franklin et al. [16] proposed a passive fingerprinting technique for wireless device drivers on IEEE 802.11 compliant devices. Lippmann et al. [19] suggested using a k-nearest-neighbor classifier for approximate matching to avoid unknown classifications. Our approach differs in that we use clustering and focus on evaluating the feasibility of approximate matching.

Hardware fingerprinting has also been proposed for applications like remotely tracking a host in a network [18]. To our knowledge, this is the first work to address the problem of automatically generating fingerprints.

TCP/IP fingerprinting can identify the operating system running on a host [3, 4]. Common active fingerprinting tools include Nmap [9], Xprobe [12], and Snacktime. Passive fingerprinting tools like p0f [10] and siphon [6] do not require sending traffic and can fingerprint hosts behind firewalls.

Efforts to defeat OS fingerprinting include the stack fingerprinting scrubber by Smart et al. [27], which standardizes TCP/IP communication, and recent tools like Morph [7] and IPPersonality [5], which allow changing responses to specific queries by faking the behavior of a chosen OS.

### 7. Conclusion

Fingerprinting is a valuable technique for identifying different implementations of the same functionality. However, the fingerprint generation process is often laborious and manual. In this paper, we propose a novel approach for automatic fingerprint generation, which produces...