###  GuessKey1
显然，只要输入mask为0，new_key就和原来Key一样。因此输入三次0，和key 即可获得flag
###  guesskey2
考虑每次p和q都是随机选的0点，我们不能得到任何信息，只能盲猜，leak不现实，只能把他的key改为预期值，于是想到每次设mask为1，则可以稳定使得p，q两个点从0变1，而且key是随机取的，01分布应该较为均匀，故通过不断的传入1的mask即可让key变为全1，所以不断的传1的mask，猜64个1即可，exp如下
    from winpwn import *
    def one(num):
        io.recvuntil('mask:')
        io.send(str(num) + '\n')
        io.recvuntil('guess:')
        io.send(str(int('1'*64, 2)) + '\n')
    io = remote('52.163.228.53', 8082)
    times = 0
    while True:
        one(1)
        answer = io.recvuntil('\n')
        print('times %d' % times)
        times += 1
        if 'Oops' in answer:
            continue
        else:
            print('Found!')
            break
    one(0)
    one(0)
    io.interactive()
###  little_case
d1很小，先wiener hack出d1，然后解出p的值。  
GCD(special, φ(n))!=1, 尝试把φ(n)的小因子分解出来
special > 4200,又正好有两个4919，先尝试把c开4919次方根  
用到 Adleman-Manders-Miller rth Root Extraction Method  
[代码](https://blog.soreatu.com/posts/intended-solution-to-crypto-problems-in-nctf-2019/#easyrsa909pt-2solvers)
    import random
    import time
    def AMM(o, r, q):
        start = time.time()
        print('\n----------------------------------------------------------------------------------')
        print('Start to run Adleman-Manders-Miller Root Extraction Method')
        print('Try to find one {:#x}th root of {} modulo {}'.format(r, o, q))
        g = GF(q)
        o = g(o)
        p = g(random.randint(1, q))
        while p ^ ((q-1) // r) == 1:
            p = g(random.randint(1, q))
        print('[+] Find p:{}'.format(p))
        t = 0
        s = q - 1
        while s % r == 0:
            t += 1
            s = s // r
        print('[+] Find s:{}, t:{}'.format(s, t))
        k = 1
        while (k * s + 1) % r != 0:
            k += 1
        alp = (k * s + 1) // r
        print('[+] Find alp:{}'.format(alp))
        a = p ^ (r**(t-1) * s)
        b = o ^ (r*alp - 1)
        c = p ^ s
        h = 1
        for i in range(1, t):
            d = b ^ (r^(t-1-i))
            if d == 1:
                j = 0
            else:
                print('[+] Calculating DLP...')
                j = - discrete_log(d, a)
                print('[+] Finish DLP...')
            b = b * (c^r)^j
            h = h * c^j
            c = c^r
        result = o^alp * h
        end = time.time()
        print("Finished in {} seconds.".format(end - start))
        print('Find one solution: {}'.format(result))
        return result
    def findAllPRoot(p, e):
        print("Start to find all the Primitive {:#x}th root of 1 modulo {}.".format(e, p))
        start = time.time()
        proot = set()
        while len(proot) < e:
            proot.add(pow(random.randint(2, p-1), (p-1)//e, p))
        end = time.time()
        print("Finished in {} seconds.".format(end - start))
        return proot
    def findAllSolutions(mp, proot, cp, p):
        print("Start to find all the {:#x}th root of {} modulo {}.".format(e, cp, p))
        start = time.time()
        all_mp = set()
        for root in proot:
            mp2 = mp * root % p
            assert(pow(mp2, e, p) == cp)
            all_mp.add(mp2)
        end = time.time()
        print("Finished in {} seconds.".format(end - start))
        return all_mp
    c = 12732299056226934743176360461051108799706450051853623472248552066649321279227693844417404789169416642586313895494292082308084823101092675162498154181999270703392144766031531668783213589136974486867571090321426005719333327425286160436925591205840653712046866950957876967715226097699016798471712274797888761218915345301238306497841970203137048433491914195023230951832644259526895087301990301002618450573323078919808182376666320244077837033894089805640452791930176084416087344594957596135877833163152566525019063919662459299054294655118065279192807949989681674190983739625056255497842063989284921411358232926435537518406
    p = 199138677823743837339927520157607820029746574557746549094921488292877226509198315016018919385259781238148402833316033634968163276198999279327827901879426429664674358844084491830543271625147280950273934405879341438429171453002453838897458102128836690385604150324972907981960626767679153125735677417397078196059
    q = 112213695905472142415221444515326532320352429478341683352811183503269676555434601229013679319423878238944956830244386653674413411658696751173844443394608246716053086226910581400528167848306119179879115809778793093611381764939789057524575349501163689452810148280625226541609383166347879832134495444706697124741
    e = 4919
    cp = c % p
    cq = c % q
    mp = AMM(cp, e, p)
    mq = AMM(cq, e, q)
    p_proot = findAllPRoot(p, e)
    q_proot = findAllPRoot(q, e)
    mps = findAllSolutions(mp, p_proot, cp, p)
    mqs = findAllSolutions(mq, q_proot, cq, q)
    print (mps, mqs)
    def check(m):
        h = m.hex()
        if len(h) & 1:
            return False
        if h.startswith('2a435446'):
            print(h)
            return True
        else:
            return False
    start = time.time()
    print('Start CRT...')
    for mpp in mps:
        for mqq in mqs:
            solution = CRT_list([int(mpp), int(mqq)], [p, q])
            if check(solution):
                print(solution)
        print(time.time() - start)
    end = time.time()
    print("Finished in {} seconds.".format(end - start))
之后在1000+秒的时候会跑出来
###  MyEnc
    # -*- coding: utf-8 -*-    """
    Created on Sat Jan 16 10:26:47 2021
    @author: 段宇飞
    """
    from hashlib import sha256
    from Crypto.Util.number import long_to_bytes
    charset = "0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"
    def dfs(now, need, have, ans):
        if len(now) == need:
            if sha256((now + have).encode()).hexdigest() == ans:
                return now
            else:
                return None
        else:
            for each in charset:
                ret = dfs(now + each, need, have, ans)
                if ret:
                    return ret
        return None
    have = "OQ8voCHrQuXuv1cg"
    ans = "da3861c3919cee65da80e1f52e1c487a541f4519309d47c08f8666b73a48c872"
    #ret = dfs("", 4, have, ans)
    #if ret:
    #    print(ret)
    n = 19152898901142929440449993714107763306498964289029609481677887187501718334070169943418646886645696471668222757820342641066703122940904406992012515132141551203072653911142153082399807215276813397838302320992429531130196688243296277248924473319568441333150397603714182485608446740486600301327869208188947248652132600920864114883342877960278792942233811796231235577899197687263677908950916389538698434179750604196078349842566449576408439367021997585115318060608971816564921559085057736004717082365079917040305980992636086501522091527553755322064246867277582381886721728142465397769073361057617852124453574921375289384411
    q = 136336330047733325054113952461931936515812064725123861249117110679515142731875568006303102262083234829496443429948284820547006163774050705268578888017074545733551599917748460394164013567425320488015004443249117018189718927313644340204560494817381360316268428655433572042760155237467193996507748198674415388579
    p = n // q
    iv = 4885744396512045995860532259657177521038550405328945198140425693545864649247833341952487772811822207595725008938745267597758207353092222457307264049806418091157385674630493565847543747777292954801545886485590758985273236632354666586312791352537204119506330852778247455025734443910608937334271687938127446954445287910959508808458361940956263584782969236770063820874057150433324783168838614040685045144965658983215052678226213152543241529849364270369983750216405086403302791761147321008343959036682610434396067298869116317292113179343884936031522143092316321712299193818059904314318023731951908731266978511168046098206
    phi = (p - 1) * (q - 1)
    pows = []
    datas = [10808508467762569869427009637656761450111870041079208820382928170331477702849334331032848659579931201930306396012958169176386329983136922548723549970292886844158749699788705830248757477715984256034863333726077037638511437757905452958201399443125505066086907610594681615244333851658684783999833660814017702895949931810728574333061172854163185079970447793154102595286679989633661318166273159607157860492105818514220255761307551847608231520720102229615596538704105342275302268595353459708324522480241627999258165425843754631213364904085401410146741789141785408552219168144392010635229603258392056471526591937936417694345, 
             9236451725535025963239830997900658795400164310766266842836393544687990991533575720273533731399136991571021580881687070662707384735374249647804031403030505572115683962781464323254918440566228113897330548792694736142940790383988445720267613651565972002610494455322541621411409590440425074411956207979850349926667874457332235597908790608548742891766090896149278991883652644008769213437489147931177468243986920083281061468599806263499746911702794054909806206158632952940778190482486605683541306379317751610731136106309174793735406886000421420377427434548180610927473917077003200214483931719220803252843529596614336242890, 
             4198862071041399507005436552179775872267689447831443728712607228879364573686212490443899935098929698986201169231384712214212157744464661867152397496493437813852270448127977418056530286168996011825208697909367396175006139083602715126388962330839296151878698895970372840859351124533091690045368205257381071300009556471760139688623474566025169529908802172020250416514734594509508004263117594652383723369198887253336674865932812040964884659235799942659350376339132532693098260569309595347176124557701073293832592918165799367439622176447172266880410862290450368182112305590047743600019188884111132671063575903596831085849, 
             14904265568851891904070062420660660733107521597942576181744505652736675431330540187905395948996966336520372902594744044899740523114346300876248495026927762718652959459887440138266896877305363513106365991526194675436613623296528713495095044360866613282645567037276179602976425034260366205858868990982660808169316225494433345951641243477070900333139327296522037231011511575994100981292249848071862258800157755579235691746213348513901623466736946506548547941947967420421868864098159136385091325273365592906104849791318205648919646975659623068234898895976963575436938375556351666311268603900755102487229190541773697455070, 
             9873212880609097805954706115885169102020169799582903526114654115968111227898162071559629625456760451309767117934437709628443359568619850616038385732828998090552638137735677952716659558353675634905906810170076222093237039105501947537040716937391204808431430445571255364420613769194498566929692678923684111796149457679073488607336819964758046534560885373215523836736575194311857676933021314831025750936932673463571730791269742981077966039847318583523671568038140027709247843223895496605145424341753249994502083776731848814541259978405298358698211936495655029627047303664529383680431117305070372151054338984507313176264, 
             9484864987217851537857038812194849494721003594765070667676849134384857390923127128238164927809415233582037019252846974827104305541263760990334329087181414048416680298331976052996002898320239792049949883772472188877948091487639999681504467135602364292638339663538093258068746353527094044193193707189437565372032617149787952203798256123022787382301486251338044346074434883406756075765019973319008256023393293404051208626344214018451655521962013373291097802947325713796628084662106843125552570038824592474923743374717763660555020808783811802674846006392445036322458893328853666454983582824701711513112379942472225683078, 
             2062478632350732605284213388242800962981043149481063180746925923603823987836906176888574646766724076914461630530205040213004576830842683601356322460920264310717627413307201219988960052000677259357338044171855456174944083796645170473595428933675313411868836973411593383938445117189246273933060727403850361882805109002623832996439740271734288038352393178552319918187077038835861208506769345611654134881086690973683067151653766595184484608470992090911416434917510173641566540409096192559947660654773350950239307327670842615305046342468870776309237604852060273694725032075894092088554356849946058740977188089201867028908, 
             9618262652675439873218460160645587110654207451008949242780263747231182614093625550111130956286480801924537052573281782286848375317547201753066563436239786484088549609683441503327424265154119732881624805663089882733671670892491428939979539556103545141885926269708459185767029805266363851711043489050604314097293164816405533436466461920073282480746643217204243301451811287096852909790347469405237726145963349428521157985801946536414852604010733075916800515339774239318339040005361888606714879792242073725013699334766241355804248343322983532440463751874968907296591787817545743456304209960164523645180386502898302726771, 
             3817051143900985597026807389434847557013646307588761328768737026336172951126162660606302710211585888632685697539790000590071167162291709761889865463284156901879404801226000237984024461581104392840914441038972249584275258575099731906677036426301723012603267081584455276503730909707152912746280924186627107129384266112686841850065803254500629940928249850965286106946575951421424307910259273178323465467222457908096578348730671768049778966927860921652356067157991246315537411046434312424002551144776751179550029689708732805370780719124610154817374544963662071812994434849505200358198910643167412278726718997312864601970, 
             17295599235476216738527531539837217633760130244866911013044577326749144630984383022909219906499451607977342506657079644242543088279040928005016392359090147828251691022760452785723702404673238167598518649770692954796241046796496776744949755139318255689200933135697755238550915005532346337189825658709271315285376965826237607814695335816046545878509978446001248264623933038882752544191271942538379872079239275893939872265960190404345136953338339865903352936067955567864309387476906147170750333725804491519186519823778769859791234444720239385063820338036039792254781164917488958046860343279826024923189530837777671830430, 
             18364292488087277137361256410059547597785034342607094882416265993958836329106053704255404969099687926940381818056034911250230128469841440700433790945612409017529671896164946113587221690869426729559150095217311464197239024853751711424585510065553736796103996906891547417072918539735802361777816422460771655110437987624510274773087894502502179522364697831806025978551414237894653019449851283400741451756982476969058346595455731788838599516259843214620980619126369407952074768191619155755091741617710350774032557432939153371712566904939514166277967936164694042154085923886043662002979456368610521375729790351632853457740, 
             3562100915967327664290561434195265565647683959014807045434346657599244337321626139157804041041306239247455632178634073248476182911219060898918043166694945295415316273173763788594789168381548490816632436531985910224709890362089213309615859045014063346057762905721659097850146945779018197527631734313547309430527973250018886679195445209815865887114007694954005571661812044206419540767585427752535440676253133873046005543262875323386665531091275414045485014459625457924628607827900704425572006595265574910061645247743125346633769084042295328559626360342975949482538919002521560134072003298261563772852766515703854152477, 
             16227909049396610235640033246122572688498388044256714334450584688683295743256747390700079680767482304868642279354855239249022547556219462434637715910039235514395028861344169915519651456701107977091279441479799524197176969566794166771791976668389754056094134984332767960152012532391956945665508944607240945693233540155373968080904160208211298030808288838338095480223756682221006223693503034360011863268870280689404738881176686343058199465495035362873046677704747048900543048031405752967863277714782628430439271842444196619577991070961212675706794678726303947666698650371890010491514624334445447445643402537237889400799, 
             18364292488087277137361256410059547597785034342607094882416265993958836329106053704255404969099687926940381818056034911250230128469841440700433790945612409017529671896164946113587221690869426729559150095217311464197239024853751711424585510065553736796103996906891547417072918539735802361777816422460771655110437987624510274773087894502502179522364697831806025978551414237894653019449851283400741451756982476969058346595455731788838599516259843214620980619126369407952074768191619155755091741617710350774032557432939153371712566904939514166277967936164694042154085923886043662002979456368610521375729790351632853457740, 
             6413185961373712572663512126486282237342657054918384825442893774745950330122648555209620605354038860889758202473146843277953754213124710791853089814144351791675925701458171977396334744789612418453122706478959433332611637548278949607550251232704081294973000575955887550324120263719062411010745247445573264855027695548996559785890168939326767345335514837931535089196672532411305638775419879502146557980107952073749075942027359706140989990324421875451238890859738040179041939130435477235145007997408492126574376135110901091748340049125407260655142896307924562909899755334837387988720264837214953262553739174648157173590, 
             10808508467762569869427009637656761450111870041079208820382928170331477702849334331032848659579931201930306396012958169176386329983136922548723549970292886844158749699788705830248757477715984256034863333726077037638511437757905452958201399443125505066086907610594681615244333851658684783999833660814017702895949931810728574333061172854163185079970447793154102595286679989633661318166273159607157860492105818514220255761307551847608231520720102229615596538704105342275302268595353459708324522480241627999258165425843754631213364904085401410146741789141785408552219168144392010635229603258392056471526591937936417628809, 
             16227909049396610235640033246122572688498388044256714334450584688683295743256747390700079680767482304868642279354855239249022547556219462434637715910039235514395028861344169915519651456701107977091279441479799524197176969566794166771791976668389754056094134984332767960152012532391956945665508944607240945693233540155373968080904160208211298030808288838338095480223756682221006223693503034360011863268870280689404738881176686343058199465495035362873046677704747048900543048031405752967863277714782628430439271842444196619577991070961212675706794678726303947666698650371890010491514624334445447445643402537237889335265, 
             13968969981698419840597758898889068385015821356446270887476231598373308956379367928432176914873795585899833624516223585351797552699829228943563330789463873965046847897834412260734798957943054891977409467970193859891339224644125208073934361855132313024990089872252753352152704951796179988788728009092327217069515751362778260225916890587665761787729764876583458472461406780672297340058998003295730149244984610528587166776175539647371357985864162860456622971282002105855814438726701173281912227134877214901348768142206299832247542049979520016786369043330833196511766511076489039356470117947433418166756937588344592936987]
    for i in range(1, 8):
        pows.append(pow(i, pow(i, i, phi), phi))
    left = 14
    right = 20
    flag = ""
    for each_ans in datas:
        print("%d-%d: " % (left, right), end = '')
        for this in range(128):
            bit = bin(this)[2:].rjust(7, '0')
            ct = iv
            test = each_ans
            for i in range(7):
                if bit[i] == '1':
                    ct += pow(2, pows[i], n)
                    ct = ct % n
            if ct == test:
                flag = flag + bin(this)[2:].rjust(7, '0')
                print(flag)
                break
        right = (right + 7) % 120
    flag = flag[:-6]
    flag = flag[-14:] + flag[:-14]
    print(long_to_bytes(int(flag, 2)))
    '''