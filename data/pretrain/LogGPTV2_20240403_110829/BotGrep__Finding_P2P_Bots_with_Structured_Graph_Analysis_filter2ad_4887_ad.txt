1.94
3.00
1.60
1.00
Topology
de Bruijn
Kademlia
Chord
LEET-Chord
% Detected
98.00
97.60
97.65
97.80
98.52
97.88
97.00
97.68
98.06
97.00
98.40
99.00
|VB|
1000
10000
100000
1000
10000
100000
1000
10000
100000
1000
10000
(b) CAIDA
% FP
0.00
0.01
0.09
0.00
0.01
0.19
0.00
0.01
0.06
0.00
0.02
% FN
1.80
0.93
0.67
2.10
0.80
0.17
2.20
0.48
0.46
0.40
0.48
% Detected
98.20
99.07
99.33
97.90
99.20
99.83
97.80
99.52
99.54
99.60
99.52
Table 3: Detection and error rates of inference for (a) Abilene and (b) CAIDA communication graphs
Topology
de Bruijn
Kademlia
Chord
|VB|
100000
100000
100000
(a) CAIDA 30M
% FP
0.01
0.01
0.01
% FN
0.8
0.4
0.4
% Detected
99.20
99.60
99.60
Topology
de Bruijn
Kademlia
Chord
(b) Leveraging Honeynets - CAIDA
|VB|
100000
100000
100000
% FN
0.8
0.4
0.4
% FP
0.04
0.05
0.04
% Detected
99.20
99.60
99.60
Table 4: Detection and error rates of inference (a) for CAIDA 30M (b) when leveraging Honeynets for CAIDA.
get a rough sense of performance on much larger back-
ground graphs, we also build a “scaled up” version of
the CAIDA graph containing 30 million hosts while re-
taining the statistical properties of the CAIDA graph. To
scale up the CAIDA graph Gc by a factor of k, we make
k copies of Gc, namely G1 . . .Gk with vertex sets V1 . . .Vk
and edge sets E1 . . .Ek. Note that for each edge (p,q) in
Er, we have a corresponding edge in each copy G1 . . .Gk,
we refer to these as (p1,q1) . . .(pk,qk). We then compute
the graph disjoint union over them as GS(VS,ES) where
VS = (V1 ∪V2···∪Vk and ES = E1 ∪ E2···∪ Ek). Next,
we randomly select a fraction of links from ES to ob-
tain a set of edges Er that we shall rewire. As a heuris-
tic, we set the number of links selected for rewiring to
|Er| = k(cid:112)N log(N) where N is the number of nodes in
the CAIDA graph Gc. For each edge (p,q) in Er we
wish to rewire, we choose two random numbers a and
b (1 ≤ a,b ≤ k) and rewire edges (pa,qa) and (pb,qb) to
(pa,qb) and (pb,qa) such that dpa = dpb and dqa = dqb.
This edge rewiring ensures that (a) the degree of all
four nodes pa,qa,pb and qb remains unchanged, (b) the
joint degree distribution P(d1,d2) – the probability that
an edge connects d1 and d2 degree nodes remains un-
changed, and (c) P(d1,d2, . . .dl) remains unchanged as
well, where l is the number of unique degree values that
nodes in Gc can take.
Overall, we found that BotGrep scales well with net-
work size, with performance remaining stable as network
size increases. For example, in the CAIDA dataset with
a background graph of size 3.8 million hosts, the false
positive rate for the de Bruijn topology of size 100000
is 0.09% (shown in Table 3b), while for the scaled up
30 million node CAIDA topology, this rate is 0.01 (Ta-
10
Figure 4: Number of visible botnet links, as a function of num-
ber of most-affected ASes contributing views.
ble 4(a)). Observe that the false positive rate has de-
creased by a factor of 9, which is approximately equal
to the scale up factor between the two topologies, indi-
cating the the actual number of false positives remains
the same. This indicates that the number of false posi-
tives depend on botnet size and not the background graph
size.
Effect of reduced visibility:
In the experiments we
have performed so far, the embedded structured graph Gp
is present in its entirety. However, just as GD is obtained
by sampling Internet or enterprise trafﬁc, only a subset of
botnet control trafﬁc will actually be available to us. It is
therefore important to evaluate how well our algorithms
work with graphs where only a fraction of the structured
subgraph edges are known. To study this, we evalu-
ate performance of our scheme when deployed at only
a subset of ISPs in the Internet. To do this, we collected
 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1 10 100 1000 10000 100000Fraction of botnet links obsvd.Number of ASesStorm-traceStorm-botlabKraken-botlabTopology
de Bruijn
Kademlia
Chord
LEET-Chord
|VB|
100
1000
10000
100
1000
10000
100
1000
10000
100
1000
10000
(a) Abilene
% FP
0.00
0.02
0.17
0.00
0.01
0.19
0.00
0.02
0.13
0.00
0.06
0.58
% FN
3.00
2.80
3.31
3.75
2.90
2.07
9.00
3.50
2.54
6.00
2.70
1.80
Topology
de Bruijn
Kademlia
Chord
LEET-Chord
% Detected
97.00
97.20
96.69
96.25
97.10
97.93
91.00
96.50
97.46
94.00
97.30
98.20
|VB|
1000
10000
100000
1000
10000
100000
1000
10000
100000
1000
10000
(b) CAIDA
% FP
0.00
0.00
0.12
0.00
0.01
0.09
0.00
0.01
0.06
0.01
0.02
% FN
2.70
4.22
1.74
0.50
0.30
0.53
3.40
0.65
5.36
0.20
1.09
% Detected
97.30
95.78
98.26
99.50
99.70
99.47
96.60
99.35
94.64
99.80
98.91
Table 5: Results if only Tier-1 ISPs contribute views, for (a) Abilene and (b) CAIDA
roughly 4,000 Storm botnet IP addresses from Botlab [1]
(botlab-storm), and measured what fraction of inter-bot
paths were visible from tier-1 ISPs. From an analysis of
the Internet AS-level topology [63], we ﬁnd that 60%
of inter-bot paths traverse tier-1 ISPs. We found that
if the most-affected ASes cooperate—the ASes with the
largest number of bots—this number increased to 89%).
Figure 4 shows this result in more detail. Here, we vary
the number of ASes cooperating to contribute views (as-
suming the most-affected ASes contribute views ﬁrst),
plotting the number of visible inter-bot links. We repeat
the experiment also for the Kraken botnet trace from [1]
(kraken-botlab), as well as a packet-level trace from the
Storm botnet (storm-trace). We ﬁnd that if only the 5
most-affected ASes contribute views, 57% of Storm links
and 65% of Kraken links were visible.
We therefore removed 40% of links from our botnet
graphs (Table 5a and Table 5b). While the false-negative
rate increases, our approach still detects over 90% of bot-
net hosts with high reliability (the false positive rate for
the hard to detect LEET-Chord topology still remains
less than 0.58%). Disabling or removing such a large
fraction of nodes will lead to certain loss of operational
capability.
Leveraging Honeynets: We shall now present an exten-
sion to our inference algorithm that leverages the knowl-
edge of a few known bot nodes. This extension considers
random walks starting only from the honeynet nodes to
obtain a set of candidate P2P nodes in the preﬁltering
stage. Using this extension, we ﬁnd that there is a sig-
niﬁcant gain in terms of reducing the false positives, as
well as speeding up the efﬁciency of the protocol. As
Table 4b shows, the false positive rate for the Kademlia
topology has been reduced by a factor of 4 as compared
to corresponding value in Table 3b. Furthermore, only a
single iteration of the modiﬁed SybilInfer algorithm was
required to obtain the ﬁnal subgraphs, providing a signif-
icant gain in efﬁciency.
Effect of inference algorithm: