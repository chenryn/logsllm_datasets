    })
    ```
* New: [Handling errors doing requests to other endpoints.](vuejs.md#handling-errors)
    To catch errors when doing requests you could use:
    ```javascript
    try {
        let res = await axios.get('/my-api-route');
        // Work with the response...
    } catch (error) {
        if (error.response) {
            // The client was given an error response (5xx, 4xx)
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
        } else if (error.request) {
            // The client never received a response, and the request was never left
            console.log(err.request);
        } else {
            // Anything else
            console.log('Error', err.message);
        }
    }
    ```
    The differences in the `error` object, indicate where the request encountered the issue.
    * `error.response`: If your `error` object has a `response` property, it means
        that your server returned a 4xx/5xx error. This will assist you choose what
        sort of message to return to users.
    * `error.request`: This error is caused by a network error, a hanging backend
        that does not respond instantly to each request, unauthorized or
        cross-domain requests, and lastly if the backend API returns an error.
        This occurs when the browser was able to initiate a request but did not
        receive a valid answer for any reason.
    * Other errors: It's possible that the `error` object does not have either
        a `response` or `request` object attached to it. In this case it is implied that
        there was an issue in setting up the request, which eventually triggered an
        error.
        For example, this could be the case if you omit the URL parameter from the
        `.get()` call, and thus no request was ever made.
* New: [Use Flexbox with Vuetify.](vuetify.md#flex)
    Control the layout of flex containers with alignment, justification and more
    with responsive flexbox utilities.
    !!! note
            "I suggest you use this page only as a reference, if it's the first time
            you see this content, it's better to see it at the
            [source](https://vuetifyjs.com/en/styles/flex) as you can see Flex in
            action at the same time you read, which makes it much more easy to
            understand."
    Explain how to use:
    * [Display breakpoints](vuetify.md#display-breakpoints).
    * [Flex direction](vuetify.md#flex-direction).
    * [Flex justify](vuetify.md#flex-justify).
    * [Flex align](vuetify.md#flex-align).
    * [Margins](vuetify.md#margins).
    * [Position elements with Flex](vuetify.md#position-elements-with-flex).
    * [Keep the structure even if some components are hidden](vuetify.md#Keep-the-structure-even-if-some-components-are-hidden).
* New: [Illustrations.](vuetify.md#illustrations)
    You can get nice illustrations for your web on [Drawkit](https://drawkit.com),
    for example I like to use the [Classic kit](https://drawkit.com/product/drawkit-classic).
* Correction: Correct the way to test for an attribute of an html element.
    ```javascript
    cy
     .get('a')
       .should('have.attr', 'href', 'https://docs.cypress.io')
       .and('have.attr', 'target', '_blank') // Test it's meant to be opened
       // another tab
    ```
* New: [Sending different responses.](cypress.md#sending-different-responses)
    To return different responses from a single `GET /todos` intercept, you can
    place all prepared responses into an array, and then use Array.prototype.shift
    to return and remove the first item.
    ```javascript
    it('returns list with more items on page reload', () => {
      const replies = [{ fixture: 'articles.json' }, { statusCode: 404 }]
      cy.intercept('GET', '/api/inbox', req => req.reply(replies.shift()))
    })
    ```
## [Learning to code](code_learning.md)
* New: Introduce guidelines to learn how to code.
    Learning to code is a never ending, rewarding, frustrating, enlightening task.
    In this article you can see what is the generic roadmap (in my personal opinion)
    of a developer. As each of us is different, probably a generic roadmap won't
    suit your needs perfectly, if you are new to coding, I suggest you find
    a [mentor](mentoring.md) so you can both tweak it to your case.
### [Frontend developer](frontend_learning.md)
* New: Introduce guidelines to learn how to become a frontend developer.
    This section is the particularization of the [Development learning article](code_learning.md) for a frontend developer, in particular a [Vue](vuejs.md) developer.
    A Front-End Developer is someone who creates websites and web applications. It's
    main responsibility is to create what the user sees.
    The basic languages for Front-End Development are [HTML](html.md),
    [CSS](css.md), and [JavaScript](javascript.md). Nowadays writing interfaces with
    only the basic languages makes no sense as there are other languages and
    frameworks that make better and quicker solutions. One of them is
    [Vue](vuejs.md), which is the one I learnt, so the whole document will be
    focused on this path, nevertheless there are others popular ones like:
    [Bootstrap](https://www.w3schools.com/whatis/whatis_bootstrap.asp),
    [React](react.md), [jQuery](https://www.w3schools.com/jquery/default.asp) or
    [Angular](https://www.w3schools.com/jquery/default.asp).
    The difference between Front-End and Back-End is that Front-End refers to how
    a web page looks, while back-end refers to how it works.
## Python
### [Profiling](python_profiling.md)
* New: Added memray profiling tool.
    [memray](https://bloomberg.github.io/memray/) looks very promising.
### [Python Snippets](python_snippets.md)
* New: [Get the attribute of an attribute when sorting.](python_snippets.md#get-the-attribute-of-an-attribute)
    To sort the list in place:
    ```python
    ut.sort(key=lambda x: x.count, reverse=True)
    ```
    To return a new list, use the `sorted()` built-in function:
    ```python
    newlist = sorted(ut, key=lambda x: x.body.id_, reverse=True)
    ```
## [Frontend Development](frontend_development.md)
* New: [Newbie tips.](frontend_development.md#newbie-tips)
    I've recently started learning how to make web frontends, I feel completely lost xD. I don't know even how to search well what I need, it's like going back to programming 101. So I'm seeing things that you don't see when you already are proficient in a language, so here are some tips.
    * [Don't resize your browser window](frontend_development.md#dont-resize-your-browser-window)
    * [Your frontend probably doesn't talk to your backend](frontend_development.md#your-frontend-probably-doesnt-talk-to-your-backend)
    * [Write testable code](frontend_development.md#write-testable-code)
## [Git](git.md)
* New: Introduce git and how to learn it.
    [Git](https://en.wikipedia.org/wiki/Git) is a software for tracking changes in
    any set of files, usually used for coordinating work among programmers
    collaboratively developing source code during software development. Its goals
    include speed, data integrity, and support for distributed, non-linear workflows
    (thousands of parallel branches running on different systems).
## [Park programming](park_programming.md)
* New: Introduce the park programming concept.
    Park programming is as you may guess, programming in parks. It includes
    guidelines on:
    * How to park program
    * Finding the best spots
    * Finding the best times
## [CSS](css.md)
* New: [CSS Flexbox layout.](css.md#flexbox-layout)
    The Flexbox Layout aims at providing a more efficient way to lay out, align and
    distribute space among items in a container, even when their size is unknown
    and/or dynamic.
## Javascript
### [Javascript snippets](javascript_snippets.md)
* New: [Round a number.](javascript_snippets.md#round-a-number)
    ```javascript
    Math.round(2.5)
    ```
* New: [Remove focus from element.](javascript_snippets.md#remove-focus-from-element)
    ```javascript
    document.activeElement.blur();
    ```
* New: [Concatenate two arrays.](javascript_snippets.md#concatenate-two-arrays)
    ```javascript
    const arr1 = ["Cecilie", "Lone"];
    const arr2 = ["Emil", "Tobias", "Linus"];
    const children = arr1.concat(arr2);
    ```
    To join more arrays you can use:
    ```javascript
    const arr1 = ["Cecilie", "Lone"];
    const arr2 = ["Emil", "Tobias", "Linus"];
    const arr3 = ["Robin"];
    const children = arr1.concat(arr2,arr3);
    ```
* New: [Check if a variable is not undefined.](javascript_snippets.md#check-if-a-variable-is-not-undefined)
    ```javascript
    if(typeof lastname !== "undefined")
    {
      alert("Hi. Variable is defined.");
    }
    ```
    feat(vue_snippets#Run function in background): Run function in background
    To achieve that you need to use [the javascript method called
    `setInterval()`](javascript.md#timing-events). It’s a simple function that would
    repeat the same task over and over again. Here’s an example:
    ```javascript
    function myFunction() {
    	setInterval(function(){ alert("Hello world"); }, 3000);
    }
    ```
    If you add a call to this method for any button and click on it, it will print
    Hello world every 3 seconds (3000 milliseconds) until you close the page.
    In Vue you could do something like:
    ```javascript
    export default {
      data: () => ({
        inbox_retry: undefined
      }),
      methods: {
        retryGetInbox() {
          this.inbox_retry = setInterval(() => {
            if (this.showError) {
              console.log('Retrying the fetch of the inbox')
              // Add your code here.
            } else {
              clearInterval(this.inbox_retry)
            }
          }, 30000)
        }
      },
    ```
    You can call `this.retryGetInbox()` whenever you want to start running the
    function periodically. Once `this.showError` is `false`, we stop running the
    function with `clearInterval(this.inbox_retry)`.
# Operating Systems
## Linux
### [Linux Snippets](linux_snippets.md)
* New: [Create Basic Auth header.](linux_snippets.md#create-basic-auth-header)
    ```bash
    $ echo -n user:password | base64
    dXNlcjpwYXNzd29yZA==
    ```
    Without the `-n` it won't work well.
* New: [Check vulnerabilities in Node.js applications.](linux_snippets.md#check-vulnerabilities-in-node.js-applications)
    With `yarn audit` you'll see the vulnerabilities, with `yarn outdated` you can
    see the packages that you need to update.
* New: [Check vulnerabilities in rails dependencies.](linux_snippets.md#check-vulnerabilities-in-rails-dependencies)
    ```bash
    gem install bundler-audit
    cd project_with_gem_lock
    bundler-audit
    ```
* New: [Trim silences of sound files.](linux_snippets.md#trim-silences-of-sound-files)
    To trim all silence longer than 2 seconds down to only 2 seconds long.
    ```bash
    sox in.wav out6.wav silence -l 1 0.1 1% -1 2.0 1%
    ```
    Note that SoX does nothing to bits of silence shorter than 2 seconds.
    If you encounter the `sox FAIL formats: no handler for file extension 'mp3'`
    error  you'll need to install the `libsox-fmt-all` package.
* New: [Adjust the replay gain of many sound files.](linux_snippets.md#adjust-the-replay-gain-of-many-sound-files)
    ```bash
    sudo apt-get install python-rgain
    replaygain -f *.mp3
    ```
### [elasticsearch](elasticsearch.md)
* New: [Delete snapshot repository.](elasticsearch.md#delete-snapshot-repository)
    ```bash
    curl -XDELETE {{ url }}/_snapshot/{{ backup_path }}
    ```
# Other
* Reorganization: Reorder the blue book navigation panel.
* New: Sum up all the VueJS documentation.
* New: Troubleshoot Failed to resolve component: X.
    If you've already imported the component with `import X from './X.vue` you may
    have forgotten to add the component to the `components` property of the module:
    ```javascript
    export default {
      name: 'Inbox',
      components: {
        X
      }
    }
    ```