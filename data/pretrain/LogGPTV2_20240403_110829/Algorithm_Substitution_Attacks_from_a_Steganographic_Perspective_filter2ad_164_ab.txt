else return RAND(cl(κ))
Algorithm 1: Chosen-Plaintext-Attack experiment with se-
curity parameter κ.
A symmetric encryption scheme SES is cpa-secure if for every
attacker A there is a negligible function negl such that
Advcpa
SES(κ) := Pr[CPA-DistA,SES(κ) = true] ≤ negl(κ).
The maximal advantage of any attacker against SES is called the
insecurity of SES and is defined as
SES(κ) = max
A,SES(κ)}.
{Advcpa
InSeccpa
For a SES = (Gen, Enc, Dec) we will assume that it has non-
trivial randomization measured by the min-entropy H∞(SES) of
ciphertexts that is defined via
2−H∞(SES) = max
Pr[SES.Enc(k, m) = c].
A
k,m,c
For two numbers ℓ, ℓ′ ∈ N, denote the set of all function from
{0, 1}ℓ to {0, 1}ℓ′ by Fun(ℓ, ℓ′). Clearly, in order to specify a ran-
dom element of Fun(ℓ, ℓ′), one needs 2ℓ × ℓ′ bits and we can
thus not use completely random functions in an efficient setting.
Therefore we will use efficient functions that are indistinguish-
able from completely random functions. A pseudorandom function
F = (F.Eval, F.Gen) is a pair of PPTMs such that F.Gen upon input
1κ produces a key k ∈ {0, 1}κ. The keyed function F.Eval takes
the key k ← F.Gen(1κ) and a bitstring x of length F.in(κ) and
produces a string F.Evalk(x) of length F.out(κ). An attacker, called
distinguisher Dist, is a PPTM that upon input 1κ gets oracle access
to a function that either equals F.Evalk for a randomly chosen key
k or is a completely random function f . The goal of Dist is to dis-
tinguish between those cases. A pseudorandom function F is secure
if for every distinguisher Dist there is a negligible function negl
such that
Advprf
(cid:12)(cid:12)(cid:12)Pr[DistF.Evalk (1κ) = 1] − Pr[Distf (1κ) = 1](cid:12)(cid:12)(cid:12) ≤ negl(κ),
Dist,F(κ) :=
where k ← F.Gen(1κ) and f ← Fun(F.in(κ), F.out(κ)). If Dist
outputs 1, this means that the distinguisher Dist believes that he
deals with a truly random function.
As usual, the maximal advantage of any distinguisher against F
is called the prf-insecurity InSecprf
F (κ) := max
InSecprf
F (κ) and defined as
Dist,F(κ)}.
{Advprf
Dist
3 ALGORITHM SUBSTITUTION ATTACKS
AGAINST ENCRYPTION SCHEMES
While it is certainly very useful for an attacker to be able to recon-
struct the key, one can also consider situations, where the extractor
should be able to extract different information from the ciphertexts
or signatures. We will thus generalize the algorithm substitution
attacks described in the literature to the setting, where the sub-
stituted algorithm also takes a message am as argument and the
goal of the extractor is to derive this message from the produced
ciphertext. By always setting am := k, this is the setting described
by Bellare et al. in [6]. We thus strengthen the model of [7] and [6]
in this sense.
Below we give in detail our definitions based upon the model
proposed by Bellare et al. in [6]. If the substitution attack is stateful,
we allow the distinguisher that tries to identify the attack to also
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1651choose this state and observe the internal state of the attack. Every
algorithm substitution attack thus needs to be stateless, as in the
model of Bellare et al. in [6]. Note that this is a stronger requirement
than in [7] and [2], as those works also allowed stateful attacks.
In our setting an algorithm substitution attack against a sym-
metric encryption scheme SES = (SES.Gen, SES.Enc, SES.Dec) is a
triple of PPTMs
ASA = (ASA.Gen, ASA.Enc, ASA.Ext)
with parameter ASA.ml(κ) for the message length – the length of
the attacker message – and the following functionality.
• The key generator ASA.Gen produces upon input 1κ an at-
tacker key ak of length κ.
• The encryption algorithm ASA.Enc takes an attacker key ak ∈
supp(ASA.Gen(1κ)), attacker message am ∈ {0, 1}ASA.ml(κ),
an encryption key k ∈ supp(SES.Gen (1κ)), an encryption
message m ∈ {0, 1}SES.ml(κ), and a state σ ∈ {0, 1}∗ and pro-
duces a ciphertext c of length SES.cl(κ) and a new state σ ′.
• The extraction algorithm ASA.Ext takes as input an attacker
key ak ∈ supp(ASA.Gen(1κ)) and ℓ = ASA.ol(κ) a ciphertext
c1, . . . , cℓ with ci ∈ {0, 1}SES.cl(κ) and produces an attacker
message am′.
An algorithm substitution attack needs (a) to be indistinguish-
able from the symmetric encryption scheme and (b) should be able
to reliably extract the message am of length ASA.ml(κ) from the
ciphertexts. Due to information-theoretic reasons, it might be im-
possible to embed the attacker message am into a single ciphertext:
If SES.Enc uses 10 bits of randomness, at most 10 bits from am
can be reliably embedded into a ciphertext. Hence, the algorithm
substitution attack needs to produce more than one ciphertext in
this case. For message m1, . . . , mℓ, the complete output, denoted
as ASA.Encℓ(ak, am, k, m1, . . . , mℓ) is defined as follows:
1: σ = ∅
2: for j = 1 to ℓ do (cj , σ) ← ASA.Enc(ak, am, k, mj , σ)
3: return c1, . . . , cℓ
To formally define the probability that the extractor is able to
reliably extract am from the given ciphertexts c1, . . . , cℓ, we de-
fine its reliability2 as 1 − UnRelASA,SES(κ), where the unreliability
UnRelASA,SES is given as
max{Pr[ASA.Ext(ak, ASA.Encℓ(ak, am, k, m1, . . . , mℓ)) (cid:44) am]},
with the maximum taken over all ak ∈ supp(ASA.Gen(1κ)), am ∈
{0, 1}ASA.ml(κ), and mi ∈ {0, 1}SES.ml(κ). The algorithm is success-
ful, if there is negligible function negl with UnRelASA,SES(κ) ≤
negl(κ).
The indistinguishability of an ASA is defined as follows. Call
a watchdog Watch a PPTM that tries to distinguish the output
of the attacker encryption algorithm ASA.Enc from the original
encryption algorithm Enc. The indistinguishability is defined via
the game named ASA-Dist:
2In [6], this is called the key recovery security.
ASA-DistWatch,ASA,SES(κ)
Parties: watchdog Watch, algorithm substitution attack
ASA = (ASA.Gen, ASA.Enc, ASA.Ext), and encryption
scheme SES = (SES.Gen, SES.Enc, SES.Dec)
1: ak ← ASA.Gen(1κ); b ← {0, 1}
2: b′ ← WatchCH(1κ)
3: return b = b′
oracle CH(am, k, m, σ)
1: if b = 0 then c ← SES.Enc(k, m)
2: return (c, σ)
else (c, σ) ← ASA.Enc(ak, am, k, m, σ)
Algorithm 2: ASA-distinguishing (detection) experiment
with security parameter κ.
An algorithm substitution attack ASA is called indistinguishable
from the symmetric encryption scheme SES, if for every watchdog
Watch, there is a negligible function negl such that
Advenc-watch
Watch,ASA,SES(κ) :=
Pr[ASA-DistWatch,ASA,SES(κ) = true] ≤ negl(κ).
The maximal advantage of any watchdog distinguishing ASA
from SES is called the indistinguishability or insecurity of ASA and
is defined as
InSecenc-watch
ASA,SES (κ) = max
{Advenc-watch
Watch,ASA,SES(κ)}.
Watch
In [7], Bellare et al. proposed a (stateless) construction ASA
against all symmetric encryption schemes SES. They prove in
Theorem 3 that if SES is a randomized, stateless, coin-injective
symmetric encryption scheme with randomness-length r and if
the ASA uses a PRF F then for a watchdog Watch that makes q
queries to its CH oracle we can construct an adversary A such that
A,F(κ), where A makes q oracle
Watch,ASA,SES(κ) ≤ q/22r + Advprf
Advenc-watch
queries and its running time is that of Watch.
Bellare et al. conclude that as long as their scheme uses a non-
trivial amount of randomness, for example r ≥ 7 bits resulting
2r ≥ 128, Theorem 3 implies that the subversion is undetectable.
4 BACKGROUNDS OF STEGANOGRAPHY
The definitions of the basic steganography concepts presented in
this section are essentially those of [16] and [12].
In order to define undetectable hidden communication, we need
to introduce a notion of unsuspicious communication. We do this
via the notion of a channel C. A channel C on the alphabet Σ with
maximal document length C.n is a function that maps a string
of previously send elements h ∈ (Σ≤C.n)∗ – the history – to a
probability distribution upon Σ≤C.n. We denote this probability
distribution by Ch. The elements of Σ≤C.n are called documents.
As usually, we will assume that the sequences of documents are
efficiently prefix-free recognizable.
A stegosystem S on a family of channels C = {Cκ}κ∈N is a
triple of probabilistic polynomial-time (according to the security
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1652parameter κ) algorithms:
S = (S.Gen, S.Enc, S.Dec)
with parameters S.ml(κ) describing the message length of the sub-
liminal (hidden, or attacker) message and S.ol(κ) describing the
length of a generated sequence of stego documents to embed the
whole hidden message. The algorithms have the following func-
tionality:
• The key generator S.Gen takes the unary presentation of an
integer κ – the security parameter – and outputs a key (we
will call it an attacker key) ak ∈ {0, 1}κ of length κ.
• The stegoencoder S.Enc takes as input the key ak, the attacker
(or hidden) message am ∈ {0, 1}S.ml(κ), a history h, and a
state σ and outputs a document d from Cκ such that am
is (partially) embedded in this document and a new state.
In order to produce the document, S.Enc also has sampling
h . We denote this by writing S.EncC(ak, am, h, σ).
access to Cκ
• The (history-ignorant) stegodecoder S.Dec takes as input the
key ak and ℓ = S.ol(κ) documents d1, . . . , dℓ and outputs a
message am′. A history-ignorant stegodecoder thus has no
knowledge of previously sent documents. The stegodecoders
of nearly all known systems are history-ignorant.
To improve readability, if the stegosystem is clear from the con-
text, we will omit the prefix S. If C = {Cκ}κ∈N is a family of
channels, the min-entropy of H∞(C, κ) is defined as H∞(C, κ) =
minh∈Σ∗{H∞(Cκ
h )}. In order to be useful, the stegodecoder should
reliably decode the embedded message from the sequence of docu-
ments. As in the setting of algorithm substitution attack, the com-
plete output of ℓ documents of the stegosystem for the history
h on the subliminal message am of length S.ml(κ) is denoted as
S.Encℓ, C(ak, am, h) and is defined as follows.
1: σ = ∅
2: for j = 1 to ℓ do
3:
4: return d1, . . . , dℓ
The unreliability UnRelS, C(κ) of the stegosystem S on the chan-
(dj , σ) ← S.EncC(ak, am, h, σ);
nel family {Cκ}κ∈N with security parameter κ is defined as
h = h || dj
UnRelS, C(κ) :=
max
ak,am
max
h
{Pr[S.Dec(ak, S.Encℓ, C(ak, am, h)) (cid:44) am]},
where the maximum is taken over all ak ∈ supp(S.Gen(1κ)), am ∈
{0, 1}S.ml(κ), and h ∈ (Σn(κ))∗. If there is a negligible function negl
such that UnRelS, C(κ) ≤ negl(κ), we say that S is reliable on C.
Furthermore, the reboot-reliability of the stegosystem S is defined
as
S, C(κ) :=
max
max
τ
h1, ...,hτ
max
ℓ1, ..., ℓτ
UnRel⋆
{Pr[S.Dec(ak, d1, d2, . . . , dℓ) (cid:44) am]}
max
ak,am
where the maxima are taken over all ak ∈ supp(S.Gen(1κ)), am ∈
{0, 1}S.ml(κ), all positive integers τ ≤ ℓ, all histories h1, . . . , hτ ,
and all positive integers ℓ1, . . . , ℓτ such that ℓ1 + . . . + ℓτ = ℓ. The
documents d1, . . . , dℓ are the concatenated output of the runs
S.Encℓ1, C(ak, am, h1) || . . . || S.Encℓτ , C(ak, am, hτ ).
S, C(κ) is
We say that the stegosystem S is reboot-reliable if UnRel⋆
bounded from above by a negligible function. This corresponds
to a situation where the stegoencoder is restarted τ times, each
time with the history hi, and is allowed to generate ℓi documents.
Note that reboot-reliability is a strictly stronger requirement than
reliability and we can thus conclude
UnRelS, C(κ) ≤ UnRel⋆
S, C(κ).
To define the security of a stegosystem, we first specify the
abilities of an attacker: A warden Ward is a probabilistic polynomial-
time algorithm that will have access to a challenge oracle CH. This
challenge oracle can be called with a message am and a history h and
is either equal to S.EncC(ak, am, h, σ) for a key ak ← S.Gen(1κ)
or equal to random documents of the channel.
The goal of the warden is to distinguish between those oracles.
It also has access to samples of the channel Cκ
h for a freely cho-
sen history h. Formally, the chosen-hiddentext-attack-advantage is
defined via the following game SS-CHA-Dist:
SS-CHA-DistWard,S, C(κ)
Parties: warden Ward, stegosystem S, channel C
1: ak ← S.Gen(1κ)
2: b ← {0, 1}
3: b′ ← WardCH, C(1κ)
4: return b = b′