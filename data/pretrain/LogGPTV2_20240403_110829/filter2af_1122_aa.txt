**作者：phith0n  
原文链接：**
TOAST Tui
Editor是一款富文本Markdown编辑器，用于给HTML表单提供Markdown和富文本编写支持。最近我们在工作中需要使用到它，相比于其他一些Markdown编辑器，它更新迭代较快，功能也比较强大。另外，它不但提供编辑器功能，也提供了渲染功能（Viewer），也就是说编辑和显示都可以使用Tui
Editor搞定。
Tui Editor的Viewer功能使用方法很简单：
    import Viewer from '@toast-ui/editor/dist/toastui-editor-viewer';
    import '@toast-ui/editor/dist/toastui-editor-viewer.css';
    const viewer = new Viewer({
        el: document.querySelector('#viewer'),
        height: '600px',
        initialValue: `# Markdown`
    });
调用后，Markdown会被渲染成HTML并显示在`#viewer`的位置。那么我比较好奇，这里是否会存在XSS。
在Markdown编辑器的预览（Preview）位置也是使用Viewer，但是大部分编辑器的预览功能即使存在XSS也只能打自己（self-xss），但Tui
Editor将预览功能提出来作为一个单独的模块，就不仅限于self了。
## 0x01 理解渲染流程
代码审计第一步，先理解整个程序的结构与工作流程，特别是处理XSS的部分。
常见的Markdown渲染器对于XSS问题有两种处理方式：
  * 在渲染的时候格外注意，在写入标签和属性的时候进行实体编码
  * 渲染时不做任何处理，渲染完成以后再将整个数据作为富文本进行过滤
相比起来，后一种方式更加安全（它的安全主要取决于富文本过滤器的安全性）。前一种方式的优势是，不会因为二次过滤导致丢失一些正常的属性，另外少了一遍处理效率肯定会更高，它的缺点是一不注意就可能出问题，另外也不支持直接在Markdown里插入HTML。
对，Markdown里是可以直接插入HTML标签的，可以将Markdown理解为HTML的一种子集。
Tui Editor使用了第二种方式，我在他代码中发现了一个默认的HTML
sanitizer，在用户没有指定自己的sanitizer时将使用这个内置的sanitizer：https://github.com/nhn/tui.editor/blob/48a01f5/apps/editor/src/sanitizer/htmlSanitizer.ts
我的目标就是绕过这个sanitizer来执行XSS。代码不多，总结一下大概的过滤过程是：
  1. 先正则直接去除注释与onload属性的内容
  2. 将上面处理后的内容，赋值给一个新创建的div的innerHTML属性，建立起一颗DOM树
  3. 用黑名单删除掉一些危险DOM节点，比如iframe、script等
  4. 用白名单对属性进行一遍处理，处理逻辑是
  5.     1. 只保留白名单里名字 **开头** 的属性
  6. 对于满足正则`/href|src|background/i`的属性，进行额外处理
  7. 处理完成后的DOM，获取其HTML代码返回
## 0x02 属性白名单绕过
弄清楚了处理过程，我就开始进行绕过尝试了。
这个过滤器的特点是，标签名黑名单，属性名白名单。on属性不可能在白名单里，所以我首先想到找找那些不需要属性的Payload，或者属性是白名单里的Payload，比如：
    ">
    XSS
    XSS
比较可惜的是，除了a标签外，剩余的标签全在黑名单里。a这个常见的payload也无法利用，原因是isXSSAttribute函数对包含href、src、background三个关键字的属性进行了特殊处理：
    const reXSSAttr = /href|src|background/i;
    const reXSSAttrValue = /((java|vb|live)script|x):/i;
    const reWhitespace = /[ \t\r\n]/g;
    function isXSSAttribute(attrName: string, attrValue: string) {
      return attrName.match(reXSSAttr) && attrValue.replace(reWhitespace, '').match(reXSSAttrValue);
    }
首先将属性值中的空白字符都去掉，再进行匹配，如果发现存在`javascript:`关键字就认为是XSS。
这里处理的比较粗暴，而且也无法使用HTML编码来绕过关键字——原因是，在字符串赋值给innerHTML的时候，HTML属性中的编码已经被解码了，所以在属性检查的时候看到的是解码后的内容。
所以，以下三类Payload会被过滤：
    XSS
    XSS
    XSS
又想到了svg，svg标签不在黑名单中，而且也存在一些可以使用伪协议的地方，比如：
    XSS
因为`reXSSAttr`这个正则并没有首尾定界符，所以只要属性名中存在href关键字，仍然会和a标签一样进行检查，无法绕过。
此时我想到了svg的use标签，use的作用是引用本页面或第三方页面的另一个svg元素，比如：
use的href属性指向那个被它引用的元素。但与a标签的href属性不同的是，use href不能使用JavaScript伪协议，但可以使用data:协议。
比如：
    #x">
data协议中的文件必须是一个完整的svg，而且整个data URL的末尾，需要有一个锚点`#x`来指向内部这个被引用的svg。
对于XSS
sanitizer来说，这个Payload只有svg、use两个标签和href一个属性，但因为use的引用特性，所以data协议内部的svg也会被渲染出来。
但是还是由于前面说到的`isXSSAttribute`函数，href属性中的`javascript:`这个关键字仍然会被拦截。解决方法有两种。
### base64编码绕过
既然是data:协议，那自然能让人想到base64编码。但这里要注意的是，URL锚点`#x`是在编码外的，不能把这部分编码进base64，否则无法引用成功。
最后构造的Payload是：
### ISO-2022-JP编码绕过
在当年浏览器filter还存在的时候，曾可以通过ISO-2022-KR、ISO-2022-JP编码来绕过auditor：https://www.leavesongs.com/HTML/chrome-xss-auditor-bypass-collection.html#charset-bypass
ISO-2022-JP编码在解析的时候会忽略`\x1B\x28\x42`，也就是`%1B%28B`。
在最新的Chrome中，
ISO-2022-JP仍然存在并可以使用，而data:协议也可以指定编码：https://datatracker.ietf.org/doc/html/rfc2397
两者一拍即合，构造出的Payload为：
    #x">
这两种绕过方式，都基于svg和use，缺点就是需要点击触发，在实战中还是稍逊一筹，所以我还需要想到更好的Payload。
## 0x03 基于DOM Clobbering的绕过尝试
前段时间在星球发了一个小挑战，代码如下：
    const data = decodeURIComponent(location.hash.substr(1));;
    const root = document.createElement('div');
    root.innerHTML = data;
    for (let el of root.querySelectorAll('*')) {
        let attrs = [];
        for (let attr of el.attributes) {
            attrs.push(attr.name);
        }
        for (let name of attrs) {
            el.removeAttribute(name);
        }
    }
    document.body.appendChild(root); 
这个小挑战的灵感就来自于Tui Editor的HTML sanitizer中对属性白名单的操作。
这个代码也是一种很典型地可以使用Dom Clobbering来利用的代码。关于Dom Clobbering的介绍，可以参考下面这两篇文章：
  * 
  * 
简单来说，对于一个普通的HTML标签来说，当el是某个元素时，`el.attributes`指的是它的所有属性，比如这里的href和target：
    test
这也是过滤器可以遍历`el.attributes`并删除白名单外的属性的一个理论基础。
但Dom