# JShield: Real-time and Vulnerability-based Detection of Polluted Drive-by Download Attacks

**Authors:**
- Yinzhi Cao†
- Xiang Pan
- Yan Chen
- Jianwei Zhuge††

**Affiliations:**
- Northwestern University
- †Columbia University
- ††Tsinghua University

## Abstract

Drive-by download attacks, which exploit web browser vulnerabilities to control client computers, have become a significant threat. To detect such attacks, researchers have proposed various approaches, including anomaly-based [22, 23] and vulnerability-based [44, 50] methods. However, anomaly-based approaches are susceptible to data pollution, and existing vulnerability-based approaches often fail to accurately describe the conditions for all drive-by download attacks.

In this paper, we introduce JShield, a vulnerability-based approach that uses a novel opcode vulnerability signature, implemented as a deterministic finite automaton (DFA) with a variable pool at the opcode level, to match drive-by download vulnerabilities. We analyzed JavaScript engine vulnerabilities in web browsers from 2009 to 2014 and PDF reader vulnerabilities from 2007 to 2014. JShield can match all these vulnerabilities, and our evaluation shows that it adds only a median overhead of 2.39% to the execution of the top 500 Alexa web sites.

## 1. Introduction

In recent years, drive-by download attacks exploiting browser vulnerabilities have become a major threat, even affecting reputable companies like Facebook and Apple. In such attacks, an attacker compromises a frequently visited website, injects malicious code, and waits for victims to visit, similar to a predator waiting at a water hole.

To combat these attacks, many anomaly-based approaches [21–23, 46] have been developed, which improve detection by learning from both malicious and benign samples. However, these approaches are vulnerable to adversarial environments, particularly data pollution. Inspired by the data pollution on polymorphic worm detection [41], we designed and implemented polluted drive-by download attacks, which significantly reduce the detection rates of anomaly-based detectors.

To counteract data pollution, we propose JShield, a vulnerability-based approach. While precise vulnerability signatures have been used in network intrusion detection systems (NIDS) [32, 54], their application to web drive-by download attacks is limited. BrowserShield [44] and the work by Song et al. [50] use stateless security policies and inter-module communication matching, respectively, but neither can precisely represent the exact vulnerability conditions of drive-by download attacks.

JShield addresses the following challenges:
- **Signatures for Stateful Intra-module Vulnerabilities:** The signature should include both control and data flows.
- **Resilience to Polluted Data:** The system should be robust against polluted training and testing samples.
- **High Performance:** The runtime detection should have minimal overhead.

## 2. Threat Model

We focus on drive-by download attacks, which consist of two stages: pre-exploit and post-exploit, further divided into six steps (Figure 2).

1. **Visiting:** A user visits a malicious website.
2. **Downloading and Expanding:** Malicious content, including obfuscated JavaScript, is downloaded and executed.
3. **Exploitation Preparation:** Malicious JavaScript fills the heap with shellcodes and nop sleds.
4. **Exploitation:** The malicious JavaScript exploits a browser vulnerability.
5. **Malware Download:** The injected shellcode downloads malware.
6. **Execution:** The malware is executed on the victim's machine.

We also distinguish our threat model from other types of attacks, such as those without JavaScript interaction and other web-based attacks like XSS and CSRF, which are out of scope for this paper.

## 3. Polluted Drive-by Download Attacks

Anomaly-based approaches [18, 22, 23, 46] train a detection engine using both attacker-generated exploits and benign samples, then perform detection with the tuned engine (Figure 3). While these approaches can detect unknown attacks, they are vulnerable in adversarial environments.

### 3.1 Polluting Samples at Detection Stage

An attacker can evade anomaly-based detection by injecting benign features (BFs) into malicious samples, reducing the probability of classification as malicious. For example, in a naive Bayes engine like Zozzle [23], the introduction of BFs reduces the significance of malicious features, leading to misclassification.

### 3.2 Real-world Experiments

We conducted experiments using Zozzle and five popular anti-virus programs. Our results show that data pollution significantly reduces the detection rates of both Zozzle and the anti-virus software (Tables 1 and 2).

## 4. Overview

### 4.1 Deployment

JShield is deployed as a real-time detection system, capable of handling all recent JavaScript engine and PDF reader vulnerabilities. Our evaluation shows that JShield introduces minimal performance overhead, with a median overhead of 2.39% for the top 500 Alexa web sites.

---

This optimized version of the text provides a clearer, more professional, and coherent structure, making it easier to understand the key points and contributions of the research.