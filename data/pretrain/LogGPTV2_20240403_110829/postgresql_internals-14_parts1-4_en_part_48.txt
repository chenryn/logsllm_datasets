processesthatperformtheparallelpartoftheplan,andthecostoftransferringthis
datatotheleader.Asinglerowtransferisestimatedatparallel_tuple_costincreased 0.1
by%,tocompensateforpossiblewaitsongettingthenextvalues.
Theexpensesincurredbybinaryheapupdatesmustalsobetakenintoaccountin
totalcostcalculations: eachinputrowrequireslog ncomparisonoperationsand
2
certainadditionalactions(theyareestimatedatcpu_operator_cost).1
Let’stakealookatyetanotherplanthatusestheGatherMergenode.Notethatthe
workersherefirstperformpartialaggregationbyhashing,andthentheSortnode p.
sortsthereceivedresults(itischeapbecausefewrowsareleftafteraggregation)to
bepassedfurthertotheleaderprocess,whichgathersthefullresultintheGather
Mergenode.Asforthefinalaggregation,itisperformedonthesortedlistofvalues:
=> EXPLAIN SELECT amount, count(*)
FROM ticket_flights
GROUP BY amount;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Finalize GroupAggregate (cost=123399.62..123485.00 rows=337 wid...
Group Key: amount
−> Gather Merge (cost=123399.62..123478.26 rows=674 width=14)
Workers Planned: 2
−> Sort (cost=122399.59..122400.44 rows=337 width=14)
Sort Key: amount
−> Partial HashAggregate (cost=122382.07..122385.44 r...
Group Key: amount
−> Parallel Seq Scan on ticket_flights (cost=0.00...
(9 rows)
Here we have three parallel processes (including the leader),and the cost of the
GatherMergenodeiscalculatedasfollows:
1 backend/optimizer/path/costsize.c,cost_gather_mergefunction
457
Chapter23 SortingandMerging
=> WITH costs(startup, run) AS (
SELECT round((
-- launching processes
current_setting('parallel_setup_cost')::real +
-- building the heap
current_setting('cpu_operator_cost')::real * 2 * 3 * log(2, 3)
)::numeric, 2),
round((
-- passing rows
current_setting('parallel_tuple_cost')::real * 1.05 * 674 +
-- updating the heap
current_setting('cpu_operator_cost')::real * 2 * 674 * log(2, 3) +
current_setting('cpu_operator_cost')::real * 674
)::numeric, 2)
)
SELECT 122399.59 + startup AS startup,
122400.44 + startup + run AS total
FROM costs;
startup | total
−−−−−−−−−−−+−−−−−−−−−−−
123399.61 | 123478.26
(1 row)
23.3 Distinct Values and Grouping
As we have just seen, grouping values to perform aggregation (and to eliminate
duplicates)canbeperformednotonlybyhashing,butalsobysorting. Inasorted
list,groupsofduplicatevaluescanbesingledoutinonepass.
Retrievalofdistinctvaluesfromasortedlistisrepresentedintheplanbyavery
simplenodecalledUnique1:
=> EXPLAIN (costs off) SELECT DISTINCT book_ref
FROM bookings
ORDER BY book_ref;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Result
−> Unique
−> Index Only Scan using bookings_pkey on bookings
(3 rows)
1 backend/executor/nodeUnique.c
458
23.3 DistinctValuesandGrouping
AggregationisperformedintheGroupAggregatenode:1
=> EXPLAIN (costs off) SELECT book_ref, count(*)
FROM bookings
GROUP BY book_ref
ORDER BY book_ref;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
GroupAggregate
Group Key: book_ref
−> Index Only Scan using bookings_pkey on bookings
(3 rows)
In parallel plans, this node is called Partial GroupAggregate, while the node that
completesaggregationiscalledFinalizeGroupAggregate.
Both hashing and sorting strategies can be combined in a single node if group- v.
ing is performed by several column sets (specified in the  , ,or
 clauses). Without getting into rather complex details of this algorithm,I
willsimplyprovideanexamplethatperformsgroupingbythreedifferentcolumns
inconditionsofscarcememory:
=> SET work_mem = '64kB';
=> EXPLAIN (costs off) SELECT count(*)
FROM flights
GROUP BY GROUPING SETS (aircraft_code, flight_no, departure_airport);
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
MixedAggregate
Hash Key: departure_airport
Group Key: aircraft_code
Sort Key: flight_no
Group Key: flight_no
−> Sort
Sort Key: aircraft_code
−> Seq Scan on flights
(8 rows)
=> RESET work_mem;
Here is what happens while this query is being executed. The aggregation node,
whichisshownintheplanasMixedAggregate,receivesthedatasetsortedbythe
aircraft_codecolumn.
1 backend/executor/nodeAgg.c,agg_retrieve_directfunction
459
Chapter23 SortingandMerging
First,this set is scanned,and the values are grouped by the aircraft_code column
(GroupKey).Asthescanprogresses,therowsarereorderedbytheflight_nocolumn
(likeitisdonebyaregularSortnode: eitherviathequicksortmethodifthemem-
oryissufficient,orusingexternalsortingondisk);atthesametime,theexecutor
placestheserowsintoahashtablethatusesdeparture_airportasitskey(likeitis
donebyhashaggregation: eitherinmemory,orusingtemporaryfiles).
At the second stage,the executor scans the data set that has just been sorted by
theflight_nocolumnandgroupsthevaluesbythesamecolumn(SortKeyandthe
nestedGroupKeynode).Iftherowshadtobegroupedbyyetanothercolumn,they
wouldberesortedagainasrequired.
Finally, the hash table prepared at the first stage is scanned, and the values are
groupedbythedeparture_airportcolumn(HashKey).
23.4 Comparison of Join Methods
As we have seen,two data sets can be joined using three different methods,and
eachofthemhasitsownprosandcons.
Thenestedloopjoindoesnothaveanyprerequisitesandcanstartreturningthefirst
rowsoftheresultsetrightaway. Itistheonlyjoinmethodthatdoesnothaveto
fullyscantheinnerset(aslongasindexaccessisavailableforit).Theseproperties
makethenestedloopalgorithm(combinedwithindexes)anidealchoiceforshort
queries,whichdealwithrathersmallsetsofrows.
Theweakpointofthenestedloopbecomesapparentasthedatavolumegrows.For
aCartesianproduct,thisalgorithmhasquadraticcomplexity—thecostispropor-
tionatetotheproductofsizesofthedatasetsbeingjoined.However,theCartesian
productisnotsocommoninpractice;foreachrowoftheouterset,theexecutor
typically accesses a certain number of rows of the inner set using an index, and
this average number does not depend on the total size of the data set (for exam-
ple,anaveragenumberofticketsinabookingdoesnotchangeasthenumberof
bookings and bought tickets grows). Thus,the complexity of the nested loop al-
gorithmoftenshowslineargrowthratherthanquadraticone,evenifwithahigh
linearcoefficient.
460
23.4 ComparisonofJoinMethods
Animportantdistinctionofthenestedloopalgorithmisitsuniversalapplicability:
it supports all join conditions, whereas other methods can only deal with equi-
joins. It allows running queries with any types of conditions (except for the full
join,whichcannotbeusedwiththenestedloop),butyoumustkeepinmindthat
a non-equi-join of a large data set is highly likely to be performed slower than
desired.
Ahashjoinworksbestonlargedatasets. Ifissufficient,itrequiresonlyone
passovertwodatasets,soitscomplexityislinear.Combinedwithsequentialtable
scans,thisalgorithmistypicallyusedforqueries,whichcomputetheresult
basedonalargevolumeofdata.
However,ifthe response timeis moreimportant than throughput,ahash join is
notthebestchoice: itwillnotstartreturningtheresultingrowsuntilthewhole
hashtableisbuilt.
Thehashjoinalgorithmisonlyapplicabletoequi-joins.Anotherrestrictionisthat
thedatatypeofthejoinkeymustsupporthashing(butalmostallofthemdo).
Thenestedloopjoincansometimesbeatthehashjoin,takingadvantageofcaching v.
therowsoftheinnersetintheMemoizenode(whichisalsobasedonahashtable).
While the hash join always scans the inner set in full,the nested loop algorithm
doesnothaveto,whichmayresultinsomecostreduction.
Amergejoincanperfectlyhandlebothshortqueriesandlongones. It
has linear complexity (the sets to be joined have to be scanned only once),does
not require much memory, and returns the results without any preprocessing;
however,thedatasetsmustalreadyhavetherequiredsortorder. Themostcost-
effectivewaytodoitistofetchthedataviaanindexscan.Itisanaturalchoiceif
therowcountislow;forlargerdatasets,indexscanscanstillbeefficient,butonly
iftheheapaccessisminimalordoesnothappenatall.
Ifnosuitableindexesareavailable,thesetshavetobesorted,butthisoperation
ismemory-intensive,anditscomplexityishigherthanlinear: O(nlog n). Inthis
2
case,ahashjoinisalmostalwayscheaperthanamergejoin—unlesstheresulthas
tobesorted.
Anaddedbonusofamergejoinistheequivalenceoftheinnerandoutersets.The
efficiencyofbothnestedloopandhashjoinsishighlydependentonwhetherthe
plannercanassigninnerandoutersetscorrectly.
461
Chapter23 SortingandMerging
Merge joins are limited to equi-joins. Besides,the data type must have a -tree
operatorclass.
The following graph illustrates approximate dependencies between the costs of
variousjoinmethodsandthefractionofrowstobejoined.
cost
merge join + sort
este d lo o p
n
hashjoin
mergejoin+index
selectivity
0 1
Iftheselectivityishigh,thenestedloopjoinusesindexaccessforbothtables;then
theplannerswitchestothefullscanoftheoutertable,whichisreflectedbythe
linearpartofthegraph.
Here the hash join is using a full scan for both tables. The “step” on the graph
correspondstothemomentwhenthehashtablefillsthewholememoryandthe
batchesstartgettingspilledtodisk.
Ifanindexscanisused,thecostofamergejoinshowssmalllineargrowth. Ifthe
work_memsizeisbigenough,ahashjoinisusuallymoreefficient,butamergejoin
beatsitwhenitcomestotemporaryfiles.
Theuppergraphofthesort-mergejoinshowsthatthecostsrisewhenindexesare
unavailableandthedatahastobesorted. Justlikeinthecaseofahashjoin,the
462
23.4 ComparisonofJoinMethods
“step”onthegraphiscausedbyinsufficientmemory,asitleadstousingtemporary
filesforsorting.
Itismerelyanexample;ineachparticularcasetheratiobetweenthecostswillbe
different.
463
Index
A 131
Abortingtransactions 82,86,89, autovacuum_analyze_threshold 131
249,269 autovacuum_enabled 119,129
Accessmethod autovacuum_freeze_max_age 147,
index 354,415 152–153
properties 364 autovacuum_freeze_min_age 153
table 333 autovacuum_freeze_table_age 153
Aggregate 338–339 autovacuum_max_workers 128,137,
Aggregation 338,343 142
hashing 437,457 autovacuum_multix-
sorting 457 act_freeze_max_age
Alignment 73 245
Analysis 126,309,387 autovacuum_naptime 128–129
Anomaly autovacuum_vacuum_cost_delay 137,
dirtyread 44,46,50 142,153
lostupdate 46,56,58 autovacuum_vacuum_cost_limit 137,
non-repeatableread 47,52,59 142
phantomread 47,59,268 autovacuum_vacuum_in-
readskew 54,56,60 sert_scale_factor
read-onlytransaction 63,66, 130–131
268 autovacuum_vacuum_insert_thresh-
writeskew 62,65,268 old
Append 438 130–131
“Asterisk,”thereasonsnottouseit autovacuum_vacuum_scale_factor
35,419,453 129–130
Atomicity 45,89 autovacuum_vacuum_threshold
autoprewarmleader 185–187 129–130
autoprewarmworker 187 autovacuum_work_mem 128
autovacuum 127 autovacuum_freeze_max_age 152
autovacuumlauncher 127–129
autovacuumworker 128 B
autovacuum_analyze_scale_factor Backend 37
464
Index
Backgroundworker 125,128,345 checkpoint_timeout 204,207
Backgroundwriting 203 checkpoint_warning 206
setup 206 CLOG 79,153,190,193,196
Batchprocessing 164,255 Cluster 21
bgwriter 203,206–208,222 Cminandcmax 99
bgwriter_delay 206 Collation 359
bgwriter_lru_maxpages 206,208 Combo-identifier 99
bgwriter_lru_multiplier 206 Commit 79,193,249
Binding 303 asynchronous 210
Bison 288 synchronous 210
Bitmap 386 commit_delay 210
NULLvalues 73 commit_siblings 210
BitmapHeapScan 328,386,390,392 Consistency 43,45
BitmapIndexScan 328,386,390, Correlatedpredicates 299,328
392,395 Correlation 323,374,385
BitmapAnd 389 Cost 293,297,300
Bloating 103,117,163,337 cpu_index_tuple_cost 376
Block seepage cpu_operator_cost 338,376,421,443,
Buffercache 36,169,190,196,275, 448,457
336,355,379 cpu_tuple_cost 337,339,377,409,
configuration 182 421,443,448
eviction 177 CTEScan 350–351
local 187,353 CTID 73,110
Bufferpin 171,173,276 Cursor 98,174,298,306,349
Bufferring 179,336 cursor_tuple_fraction 298,306
C D
Cardinality 298,308,379 Database 21
join 404 data_checksums 215
Cartesianproduct 397,399 Deadlocks 230,256,265–266
Checkpoint 196,214 deadlock_timeout 257,265,278
monitoring 206 debug_print_parse 289
setup 203 debug_print_plan 292
checkpoint_completion_target debug_print_rewritten 290
203–204 default_statistics_target 309,
checkpointer 196–197,202,204, 317–318,321,332
206–208,214 default_table_access_method 333
465
Index
default_transaction_isolation 68 manual 153
DemoDatabase 285 from_collapse_limit 294,296
Dirtyread 46,50 fsync 214
Durability 45 Fullpageimage 200
full_page_writes 217,219
E
effective_cache_size 379–380 G
effective_io_concurrency 386 Gather 340,342–344,350,456
enable_bitmapscan 378 GatherMerge 456–457
enable_hashjoin 443,445 geqo 296
enable_memoize 410 geqo_threshold 296
enable_mergejoin 411 Gettingtheresult 306
enable_parallel_hash 429,432 GIN
enable_seqscan 260,378 deferredupdate 265
Equi-join 397,435,442 GroupAggregate 459
Eviction 177,192,203 Grouping 437,458
Execution 300,304