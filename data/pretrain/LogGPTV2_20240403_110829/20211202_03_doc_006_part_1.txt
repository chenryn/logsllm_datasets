Advanced SQL
05 — Recursion
Torsten Grust
Universität Tübingen, Germany
Computational Limits of SQL
SQL has grown to be an expressive data-oriented language.
Intentionally, it has not been designed as a general-purpose
programming language:
1. SQL does not loop forever:
Any SQL query is expected to terminate, regardless of the
size/contents of the input tables.
2. SQL can be evaluated efficiently:
A SQL query over table T of c columns and r rows can be
evaluated in O(rᶜ) space and time.1
1 SQL cannot compute the set of all subsets of rows in T which requires O(2ʳ) space, for example.
A Giant Step for SQL
The addition of recursion to SQL changes everything:
Expressiveness SQL becomes a Turing-complete language and
thus a general-purpose PL (albeit with a
particular flavor).
⚠
Efficiency
No longer are queries guaranteed to
terminate or to be evaluated with
polynomial effort.
Like a pact with the ! — but the payoff is magnificient…
Recursion in SQL: WITH RECURSIVE
Recursive common table expresssion (CTE):
WITH RECURSIVE
‹T₁›(‹c₁₁›,…,‹c₁,ₖ₁›) AS ( ⎫
‹q₁› ), ⎮ Queries ‹qⱼ› may refer &'
⋮ ⎬ *++ ‹Tᵢ›
‹Tₙ›(‹cₙ₁›,…,‹cₙ,ₖₙ›) AS ( ⎮
‹qₙ› ) ⎭
‹q› } ‹q› may refer &' *++ ‹Tᵢ›
In particular, any ‹qⱼ› may refer to itself (⥁)! Mutual
references are OK, too. (Think letrec in FP.)
Typically, final query ‹q› performs post-processing only.
Shape of a Self-Referential Query
WITH RECURSIVE
/(0₁,…,0ₖ) AS ( -- common schema of 1₀ and 1⥁(･)
1₀ -- base case query, evaluated once
UNION [ ALL ] -- either 56786 or 56786 9::
1₀(/) -- recursive query refers to / itself,
) -- evaluated repeatedly
1(/) -- final post-processing query
Semantics in a nutshell:
1(1⥁(⋯1⥁(1⥁(1₀))⋯) ∪ ⋯ ∪ 1⥁(1⥁(1₀)) ∪ 1⥁(1₀) ∪ 1₀)
=────────────────────?───────────────────@
repeated evaluation of 1⥁ (when to stop?)
Semantics of a Self-Referential Query (UNION Variant)
Iterative and recursive semantics—both are equivalent:
iterate(1⥁, 1₀): ╎ recurse(1⥁, r):
r ← 1₀ ╎ CD r ≠ ∅ GHIJ
t ← r ╎ ⎢ LIGMLJ r ⊍ recurse(1⥁, 1⥁(r) \ r)
OHCPI t ≠ ∅ ╎ IPQI
⎢ t ← 1⥁(t) \ r ╎ ⎣ LIGMLJ ∅
⎣ r ← r ⊍ t ╎
LIGMLJ r ╎
Invoke the recursive variant with recurse(1⥁, 1₀).
⊍ denotes disjoint set union, \ denotes set difference.
1⥁(･) evaluated over the new rows found in the last
iteration/recursive call. Exit if there were no new rows.
#
A Home-Made generate_series() ✎
Generate a single-column table of integers i ∈
{‹%&'(›,‹%&'(›+1,…,‹)'›}:
WITH RECURSIVE
series(i) AS (
⯅ VALUES (‹TUVW›) -- 1₀
┊ UNION
┊ SELECT s.i + 1 AS i -- ⎫ ⯅ self-
└┄FROM┄┄⯈series AS s -- ⎬ 1⥁(series) ┊ reference
WHERE s.i < ‹\V› -- ⎭ └┄⯈
)
TABLE series
Q: Given the predicate s.i < ‹\V›, will ‹)'› indeed be in
the final table?
#
A Home-Made generate_series()
Assume ‹%&'(› = 1, ‹)'› = 10:
New rows in table QILCIQ after evaluation of…
ⁱⁿᵖᵘᵗ ᵗᵒ┌┄┄┄┐
┊ ⯆ final
1₀ ┊ 1×1⥁ 2×1⥁ 3×1⥁ ⋯ 9×1⥁ 10×1⥁ ┌──┐
┌──┐⎫ ┊ ┌──┐ ┌──┐ ┌──┐ ┌──┐ ┌──┐⎫ │ i│
│ i│⎮ ┊ │ i│ │ i│ │ i│ │ i│ │ i│⎮ ├──┤
├──┤⎬┄┘ ├──┤ ├──┤ ├──┤ ⋯ ├──┤ ├──┤⎬ = ∅ │ 1│
│ 1│⎮ │ 2│ │ 3│ │ 4│ │10│ └──┘⎭ │ 2│
└──┘⎭ └──┘ └──┘ └──┘ └──┘ │ 3│
│ 4│
│ ⋮│
⊍ ⊍ ⊍ ┄ ⊍ │10│
└──┘
Semantics of a Self-Referential Query (UNION ALL Variant) ✎
With UNION ALL, recursive query 1⥁ sees all rows added in
the last iteration/recursive call:
iterateᵃˡˡ(1⥁, 1₀): ╎ recurseᵃˡˡ(1⥁, r):
r ← 1₀ ╎ CD r ≠ ∅ GHIJ
t ← r ╎ ⎢ LIGMLJ r ⊎ recurseᵃˡˡ(1⥁, 1⥁(r))
OHCPI t ≠ ∅ ╎ IPQI
⎢ t ← 1⥁(t) ╎ ⎣ LIGMLJ ∅
⎣ r ← r ⊎ t ╎
LIGMLJ r ╎
Invoke the recursive variant via recurseᵃˡˡ(1⥁, 1₀).
⊎ denotes bag (multiset) union.
Note: Could immediately emit t — no need to build r. +
#
1 ┆ Traverse the Paths from Nodes 'f' to their Root
t₁ t₂ t₃
¹ ᵃ ⁶ ᵍ ¹ ³ ᵃ ╷ᵈ
² ⁵ ᵇ ᶜ ⁴ ⁷ ᵇ ᶜ ₂ ₄ ₅ ᵇ ᶜ ╵ᵉ
₃₄₆← ᵈᵉ╵ᶠ← ¹ ⁵ ᵈ ᵉ
→₂ ₃ →ᶠ ᵃ
Array-based tree encoding (parent of node è ≡ parents[è]):
tree parents (□ ≡ NULL) labels
t₁ {□, 1, 2, 2, 1, 5} {'a','b','d','e','c','f'}
t₂ {4, 1, 1, 6, 4, □, 6} {'d','f','a','b','e','g','c'}
t₃ {□, 1, □, 1, 3} {'a','b','d','c','e'}
¹ ² ³ ⁴ ⁵ ⁶ ⁷ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⤎ node
Trees
#
Traverse the Paths from Nodes 'f' to their Root
WITH RECURSIVE
paths(tree, node) AS (
SELECT t.tree, array_position(t.labels, 'f') AS node
FROM Trees AS t
UNION
SELECT t.tree, t.parents[p.node] AS node
FROM paths AS p,
Trees AS t
WHERE p.tree = t.tree
)
TABLE paths
(\,è) ∈ paths ⇔ node è lies on path from 'f' to \'s root
#
A Trace of the Path in Tree t₁ ✎
6IO LëOQ produced by…
1₀ 1×1⥁ 2×1⥁ 3×1⥁ 4×1⥁ final
□← □←
¹ ¹ ¹← ¹ ¹
² ⁵ ² ⁵← ² ⁵ ² ⁵ ² ⁵
₃₄₆← ₃₄₆ ₃₄₆ ₃₄₆ ₃₄₆
┌────┬────┐ ┌────┬────┐ ┌────┬────┐ ┌────┬────┐ ┌────┬────┐ ┌────┬────┐
│tree│node| │tree│node| │tree│node| │tree│node| │tree│node| │tree|node|
├────┼────┤ ├────┼────┤ ├────┼────┤ ├────┼────┤ ├────┼────┤ ├────┼────┤
│ t₁ | 6 │ │ t₁ | 5 │ │ t₁ | 1 │ │ t₁ | □ │ └────┴────┘ │ t₁ │ 6 │
└────┴────┘ └────┴────┘ └────┴────┘ └────┴────┘ │ t₁ │ 5 │
│ t₁ │ 1 │
│ t₁ │ □ │
⊍ ⊍ ⊍ └────┴────┘
• 4×1⥁ yields no new rows (recall: t.parents[NULL] ≡ NULL).
#
Ordered Path in Tree t₁ (New Rows Trace) ✎
1₀ 1×1⥁ 2×1⥁ 3×1⥁ 4×1⥁ ･･･ ∞
□← □←
¹ ¹ ¹← ¹ ¹
² ⁵ ² ⁵← ² ⁵ ² ⁵ ² ⁵
₃₄₆← ₃₄₆ ₃₄₆ ₃₄₆ ₃₄₆
┌──┬───┬─┐ ┌──┬───┬─┐ ┌──┬───┬─┐ ┌──┬───┬─┐ ┌──┬───┬─┐
│ t│pos│n| │ t│pos│n| │ t│pos│n| │ t│pos│n| │ t│pos│n|
├──┼───┼─┤ ├──┼───┼─┤ ├──┼───┼─┤ ├──┼───┼─┤ ├──┼───┼─┤ ･･･ ∞
│t₁| 0 |6│ │t₁| 1 |5│ │t₁| 2 |1│ │t₁| 3 |□│ │t₁| 4 |□│
└──┴───┴─┘ └──┴───┴─┘ └──┴───┴─┘ └──┴─ ─┴─┘ └──┴─ ─┴─┘
⚠
≠
The (non-)generation of new rows to ensure termination is
the user's responsibility — a common source of 2.
#
Path as Array in Tree t₁ (New Rows Trace) ✎
1₀ 1×1⥁ 2×1⥁ 3×1⥁ ⎛ èV\ ôöèöUõ\öú ⎞
□← ⎜ □← ⎟
¹ ¹ ¹← ¹ ⎜ ¹ ⎟
² ⁵ ² ⁵← ² ⁵ ² ⁵ ⎜ ² ⁵ ⎟
₃₄₆← ₃₄₆ ₃₄₆ ₃₄₆ ⎜ ₃₄₆ ⎟
┌──┬─┬────┐ ┌──┬─┬────┐ ┌──┬─┬─────┐ ┌──┬─┬───────┐ ⎜┌──┬─┬─────────┐⎟
│ t│n│path| │ t│n│path| │ t│n│ path| │ t│n│ path | ⎜│ t│n│ path |⎟
├──┼─┼────┤ ├──┼─┼────┤ ├──┼─┼─────┤ ├──┼─┼───────┤ ⎜├──┼─┼─────────┤⎟
│t₁|6| {} | │t₁|5| {6}| │t₁|1|{6,5}| │t₁|□|{6,5,1}| ⎜│t₁|□|{6,5,1,□}|⎟
└──┴─┴────┘ └──┴─┴────┘ └──┴─┴─────┘ └──┴3┴───────┘ ⎝└──┴3┴─────────┘⎠
➋ ➊
➊ Ensure termination (enforce ∅): filter on n ≠ □ in q⥁.
➋ Post-process: keep rows of last iteration (n = □) only.
#
2 ┆ Connected Components in a Graph
Given an undirected graph G, find its
┆ ₁ ₂
connected components •ᵢ:
•₂ ┆ A B
┆
₅ ┆ •₁
For any two nodes v₁,v₂ in •ᵢ, there
E ┆ ₄ ₃
exists a path v₁──v₂ (and no
┆ D C
┆╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
connections to outside •ᵢ exist).
┆ F G •₃
┆ ⁶ ⁷
Do we need DBMSs tailored to process
graph data and queries?
Graphs are (edge) relations. Connected components are the
equivalence classes of the reachability relation on G.
#
Representing (Un-)Directed Graphs
nodes edges graph
₁ ₂ ┌────┬─────┐ ┌────┬──┐ ᵈᵉʳⁱᵛᵉ ┌────┬──┐
A B │node│label│ │from│to│ │from│to│
├╌╌╌╌┼─────┤ ├╌╌╌╌┼╌╌┤ ├╌╌╌╌┼╌╌┤
₅ │ 1 │ A │ │ 1 │ 2│ A → B │ 1 │ 2│⎱ A ⇆ B
E ₄ ₃ │ 2 │ B │ │ 2 │ 3│ │ 2 │ 1│⎰ A B
D C │ 3 │ C │ │ 3 │ 4│ │ 2 │ 3│
│ 4 │ D │ │ 2 │ 4│ │ 3 │ 2│
F G │ 5 │ E │ │ 6 │ 7│ │ 2 │ 4│
⁶ ⁷ │ 6 │ F │ └────┴──┘ │ 4 │ 2│
│ 7 │ G │ │ 3 │ 4│
└────┴─────┘ │ 4 │ 3│
│ 6 │ 7│
│ 7 │ 6│
└────┴──┘
Use tables nodes and graph to formulate the algorithm.
#
Computing Connected Components (Query Plan)
1. For each node è, start a walk through the
₁ ₂
graph. Record each node T (“front”) that
A B
we can reach from è.
₅
E ₄ ₃
2. For each è, use the minimum ID i of all
D C
front nodes as è's component 8ᵢ.
F G
⁶ ⁷
⇒ Nodes that can reach each other will
use the same component ID.