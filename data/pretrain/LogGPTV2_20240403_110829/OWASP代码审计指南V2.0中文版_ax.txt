审计，然后将攻击者转发到他们通常无法直接获取的内部资源。 
3.10.1.1 Redirect 
网站上的重定向功能允许用户的浏览器转到网站上的不同页面。这可以用来改善用户界
面或跟踪用户如何浏览网站。 
为了提供重定向功能，站点可能有一个特定的网址来执行重定向: 
http://www.example.com/utility/redirect.cgi 
该页面将获取一个“网址”的参数(从网址或 POST 体内)，并将该地址回复给用户，让
浏览器要转到该页面，例如: 
http://www.example.com/utility/redirect.cgi?URL=http://www.example.com/viewtx
n.html 
但是，这可能会被滥用，因为攻击者可能会试图让有效用户单击一个看起来是针对
www.example.com 的链接，但该链接会调用 example.com 的重定向功能，从而导致用户
222 
的浏览器进入一个恶意站点(一个看起来像 example.com 的站点，欺骗用户输入敏感或身
份验证信息: 
•
http://www.example.com/utiltiy/redirect 
cgi?URL=http://attacker.com/fakelogin.html 
3.10.1.2 Forwards 
转发类似于重定向，但是新页面不会被用户浏览器检索到(就像重定向一样)，而是由服
务器框架获取转发的页面并将其返回给用户浏览器。这是通过 Java 框架中的“转发”命令
来实现的(例如，Struts)或. Net 中的“Server.Transfer”。由于转发是由服务器框架本身形
成的，它限制了攻击者可以利用的当前网站的网址范围(即，攻击者不能“转发”到
attacker.com)，但是这种攻击可以用来绕过访问控制。例如，当站点在响应中发送转发的
页面时: 
⚫ 
如果购买，请转到“‘purchase.do” 
⚫ 
如果取消，请转到“‘cancelled.do”。 
这将作为参数传递给网站: 
http://www.example.com/txn/acceptpayment.html? FWD=购买 
相反，如果攻击者使用转发来尝试访问网站内的不同页面，例如，admin.do，则他们
可能会访问他们无权查看的页面，因为授权是在“接受付款”页面上应用的，而不是在转发
页面上。 
223 
3.10.2 审计什么 
如果网址的任何部分被转发或重定向到基于用户输入，那么该网站可能有风险。确保: 
⚫ 
所有重定向/转发都是基于白名单构建的，或者 
⚫ 
所有转发/转发都使用相关路径，以确保它们位于受信任的站点 
3.10.2.1 Redirects 
以下示例演示了不安全的重定向和转发代码。下面的 Java 代码从“url”参数接收 URL，
并重定向到该 URL。 
示例： 
response.sendRedirect(request.getParameter(“url”)); 
下面的 PHP 代码从查询字符串中获取一个 URL，然后将用户重定向到该 URL。 
示例： 
$redirect_url = $_GET[‘url’]; 
header(“Location: “ . $redirect_url); 
类似 C#.NET 的例子易受攻击代码: 
string url = request.QueryString[“url”]; 
Response.Redirect(url); 
如果没有应用验证或额外的方法控制来验证网址的确定性，上述代码很容易受到攻击。
通过将用户重定向到合法站点，此漏洞可被用作网络钓鱼骗局的一部分。如果用户输入必须
224 
作为要使用的网址的一部分，那么对输入应用严格的验证，确保它不能用于预期以外的目的。 
请注意，易受攻击的代码不需要显式调用“重定向”函数，而是可以直接修改响应，使
客户端浏览器转到重定向的页面。要查找的代码如表所示。 
 表:有重定向风险的函数 
 重定向函数 
描述 
Redirect Response 
(注意返回状态时 301 和
307 的请求) 
HTTP/1.1 302 Found 
Location: http://www.attacker.com/page.html 
Meta Tag 
JavaScript 
Refresh Header 
HTTP/1.1 200 OK 
Refresh=0; url=http://attacker.com/page.html 
当攻击者在论坛上发布重定向网址或发送电子邮件时，网站可以审计 Referer 头，以确
保用户来自网站内的某个页面。不过，如果恶意网址包含在网站本身内，此对策将不适用。 
考虑创建允许重定向到的网址或选项的白名单，或者拒绝用户自定义重定向协议或主机
名。网站还可以对要重定向到的网址值进行编码(或加密)，这样，攻击者就不能轻松创建恶
意的网址参数，当该参数未编码(或未加密)时，将被视为有效。 
225 
3.10.2.2 Forwards 
转发的对策是将可以转发的页面范围列入白名单(类似于重定向)，并对转发到的页面和
转发的页面实施身份验证。这意味着，即使攻击者设法强制转发到他们不应该访问的页面，
转发页面上的身份验证审计也会拒绝他们的访问。 
3.10.2.3 关于 J2EE 的说明 
J2EE 应用程序中的“发送重定向”方法有一个明显的缺陷。例如: 
response.SendRedirect("home.html")； 
该方法用于向用户发送重定向响应，然后用户被重定向到所需的 web 组件，该组件的
网址被传递给该方法的参数。一个这样的误解是，在调用这个方法后，重定向用户的
Servlet/JSP 页面中的执行流停止了。请注意，如果在“如果”条件之后存在代码，它将被
执行。 
即使在发送 sendRedirect()方法之后，servlet 或 JSP 的执行仍然继续，这一事实也适
用于请求调度程序类的转发方法。但是标记是一个例外，观察到使用标记后执行流程停止。 
发出重定向或转发后，使用“return”语句终止代码流。 
3.10.3 参考 
⚫ 
OWASP 关于 https://www.owasp.org/index.php/Open_redirect 开放重定向的
文章 
⚫ 
关于开放重定向 http://cwe.mitre.org/data/definitions/601.html 的 CWE 条目
226 
601 
⚫ 
WASC 关于网址重定向器滥用的文章
http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20
Abuse 
⚫ 
关于开放重定向的危险的谷歌博客文章。
http://googlewebmastercentral.blogspot.com/2009/01/open-redirect-urls
-is-your-site-being.html 
⚫ 
防止开放重定向攻击
(c#)http://www.asp.net/mvc/tutorials/security/preventing-open-redirectio
n-attacks 
4 其它方面 
4.1 HTML5 
HTML5 是为了取代 HTLML4、XHTML 和 HTML DOM Level 2 而创建的。这个新标
准的主要目的是提供动态内容，而不使用额外的专有客户端插件。这使得设计人员和开发人
员能够创建出色的网站，提供出色的用户体验，而无需在浏览器中安装任何附加插件。 
4.1.1 描述 
理想情况下，用户应该安装最新的网络浏览器，但这并不像安全专家建议的那样经常发
生，因此网站应该实现两层控制，第一层独立于浏览器类型，第二层作为附加控制。 
227 
4.1.2 审计什么:网络信息 
网络消息传递(也称为跨域消息传递)提供了一种在不同来源的文档之间传递消息的方
法，这种方法通常比过去使用的多次黑客攻击更安全。通信应用编程接口如下（此处作者有
遗漏）: 
但是，仍有一些建议需要记住: 
⚫ 
发布消息时，请明确说明预期的来源，将其作为“发布消息”的第二个参数，而不
是“*”，以防止在重定向或目标窗口来源发生变化的其他方式后将消息发送到未
知来源。 
⚫ 
接收页面应始终: 
◼ 
审计发送方的“来源”属性，以验证数据来自预期位置。 
◼ 
对事件的“数据”属性执行输入验证，以确保其符合所需的格式。 
⚫ 
不要假设您可以控制“数据”属性。发送页面中的单个跨站点脚本漏洞允许攻击者
发送任何给定格式的消息。 
⚫ 
两个页面都应该只将交换的消息解释为“数据”。切勿将传递的消息视为代码(例
如，通过“eval()”)或将其插入页面 DOM(例如，这将创建一个基于 DOM 的 XSS
漏洞)。 
⚫ 
若要将数据值赋给元素，请使用更安全的选项:“element.TextContent = data”；
而不是使用不安全的方法，如“element.innerHTML = data”。 
⚫ 
正确审计消息来源地，以与您期望的 FQDN 完全匹配。请注意下面的代码: 
228 
‘ if(message.orgin.indexOf(“.owasp.org”)!=-1) { /* ... */ }’非常不安全，
容易被绕过，比如'‘www.owasp.org.attacker.com'。 
⚫ 
如果您需要嵌入外部内容/不受信任的小工具并允许执行用户控制的脚本(这是非
常不鼓励的)，请考虑使用像谷歌的 Caja 这样的 JavaScript 重写框架或使用沙盒
执行代码。 
4.1.3  审计什么:跨域资源共享 
跨 域 资 源 共 享 或 CORS 是 一 种 机 制 ， 使 网 络 浏 览 器 能 够 以 受 控 的 方 式 使 用
XMLHttpRequest L2 应用编程接口执行“跨域”请求。过去，XMLHttpRequest L1 应用
编程接口只允许在同一个源内发送请求，因为它受到同一个源策略的限制。 
跨域请求有一个源头，它标识发起请求的域，并由浏览器自动包含在发送到服务器的请
求中。CORS 定义了 web 浏览器和服务器之间的协议，该协议将决定是否允许跨域请求。
为了实现这一目标，有提供消息上下文信息的 HTTP 头，包括:源、访问控制请求方法、访
问控制请求头、访问控制允许源、访问控制允许凭证、访问控制允许方法、访问控制允许头。 
CORS 规范要求，对于非简单请求，如 GET 或 POST 以外的请求或使用凭据的请求，
必须提前发送 Options 请求，以审计请求类型是否会对数据产生负面影响。Options 请求
审计服务器允许的方法和头，如果凭据被允许，基于 OPTIONS 请求的结果，浏览器决定请
求是否被允许。 
审计与 CORS 相关的代码时需要注意的事项包括: 
⚫ 
确保以“Access-Control-Allow-Origin“响应的网址不包含任何可能有助于攻击
者进一步攻击的敏感内容或信息。仅在需要跨域访问的选定网址上使用
229 
“Access-Control-Allow-Origin”标题。不要对整个域使用标头。 
⚫ 
在“Access-Control-Allow-Origin”标题中只允许选定的受信任域。比起列入黑
名单或允许任何域，更喜欢列入白名单(不要使用“*”通配符，也不要在没有任何
审计的情况下盲目返回“源”头内容)。 
⚫ 
请记住，CORS 不阻止所请求的数据流向未经验证的位置。对于服务器来说，执行
通常的跨站点请求伪造仍然很重要。 
⚫ 
虽然 RFC 推荐使用“Options”动词的预先请求，但当前的实现可能不支持该请
求，因此“普通”(“GET”和“POST”)请求执行任何必要的访问控制非常重要。 
⚫ 
丢弃通过 HTTPS 来源的普通超文本传输协议接收的请求，以防止混合内容错误。 
⚫ 
不要仅依靠 Origin 报头进行访问控制审计。浏览器总是在 CORS 请求中发送此标
头，但可能会在浏览器外被欺骗。应该使用应用程序级协议来保护敏感数据。 
4.1.4 审计什么:网络套接字 
传统上，HTTP 协议只允许每个 TCP 连接有一个请求/响应。异步 Javasscript 和 XML 
(AJAX)允许客户端向服务器异步发送和接收数据(在后台，不刷新页面)，但是 AJAX 要求客
户端发起请求并等待服务器响应(半双工)。HTML5 网络套接字允许客户机/服务器创建“全
双工”(双向)通信通道，允许客户机和服务器真正异步通信。网络套接字通过超文本传输协
议进行最初的“升级”握手，然后所有的通信都通过超文本传输协议通道进行。 
以下是使用网络套接字的应用程序的示例代码: 
示例： 
[Constructor(in DOMString url, optional in DOMString protocol)] 
230 
interface WebSocket {  
readonly attribute DOMString URL; 
// ready state const unsigned short CONNECTING = 0; 
const unsigned short OPEN = 1; 
const unsigned short CLOSED = 2; 