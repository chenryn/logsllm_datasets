花括号能提高代码的可读性，而且还可防止今后在if循环中添加其他语句时
忘记加花括号。
第2个问题，如何知道一个数字是素数？如果num是素数，程序流不会
进入if语句。要解决这个问题，可以在外层循环把一个变量设置为某个值
（如，1），然后在if语句中把该变量重新设置为0。循环完成后，检查该变
量是否是1，如果是，说明没有进入if语句，那么该数就是素数。这样的变
量通常称为标记（flag）。
一直以来，C都习惯用int作为标记的类型，其实新增的_Bool类型更合
适。另外，如果在程序中包含了stdbool.h头文件，便可用bool代替_Bool类
型，用true和false分别代替1和0。
程序清单7.5体现了以上分析的思路。为扩大该程序的应用范围，程序
用long类型而不是int类型（如果系统不支持_Bool类型，可以把isPrime的类
型改为int，并用1和0分别替换程序中的true和false）。
程序清单7.5 divisors.c程序
// divisors.c -- 使用嵌套if语句显示一个数的约数
#include 
#include 
int main(void)
{
431
unsigned long num;     // 待测试的数
unsigned long div;     // 可能的约数
bool isPrime;       // 素数标记
printf("Please enter an integer for analysis; ");
printf("Enter q to quit.\n");
while (scanf("%lu", &num) == 1)
{
for (div = 2, isPrime = true; (div * div)  4)
printf("It is not a horse.\n");
else   /* 如果legs 
#define PERIOD '.'
int main(void)
{
char ch;
int charcount = 0;
while ((ch = getchar()) != PERIOD)
{
if (ch != '"' && ch != '\'')
charcount++;
}
printf("There are %d non-quote characters.\n", charcount);
437
return 0;
}
下面是该程序的一个输出示例：
I didn't read the "I'm a Programming Fool" best seller.
There are 50 non-quote characters.
程序首先读入一个字符，并检查它是否是一个句点，因为句点标志一个
句子的结束。接下来，if语句的测试条件中使用了逻辑与运算符&&。该 
if
语句翻译成文字是“如果待测试的字符不是双引号，并且它也不是单引号，
那么charcount递增1”。
逻辑运算符两侧的条件必须都为真，整个表达式才为真。逻辑运算符的
优先级比关系运算符低，所以不必在子表达式两侧加圆括号。
C有3种逻辑运算符，见表7.3。
表7.3 种逻辑运算符
假设exp1和exp2是两个简单的关系表达式（如car 
> 
rat或debt 
==
1000），那么：
当且仅当exp1和exp2都为真时，exp1 && exp2才为真；
如果exp1或exp2为真，则exp1 || exp2为真；
如果exp1为假，则!exp1为真；如果exp1为真，则!exp1为假。
下面是一些具体的例子：
438
5 > 2 && 4 > 7为假，因为只有一个子表达式为真；
5 > 2 || 4 > 7为真，因为有一个子表达式为真；
!(4 > 7)为真，因为4不大于7。
顺带一提，最后一个表达式与下面的表达式等价：
4 b && b > c ||
b > d相当于((a > b) && (b > c)) || (b > d)。
也就是说，b介于a和c之间，或者b大于d。
尽管对于该例没必要使用圆括号，但是许多程序员更喜欢使用带圆括号
的第 2 种写法。这样做即使不记得逻辑运算符的优先级，表达式的含义也很
清楚。
7.3.3 求值顺序
除了两个运算符共享一个运算对象的情况外，C 通常不保证先对复杂表
达式中哪部分求值。例如，下面的语句，可能先对表达式5 + 3求值，也可
能先对表达式9 + 6求值：
apples = (5 + 3) * (9 + 6);
C 把先计算哪部分的决定权留给编译器的设计者，以便针对特定系统优
化设计。但是，对于逻辑运算符是个例外，C保证逻辑表达式的求值顺序是
从左往右。&&和||运算符都是序列点，所以程序在从一个运算对象执行到下
一个运算对象之前，所有的副作用都会生效。而且，C 保证一旦发现某个元
素让整个表达式无效，便立即停止求值。正是由于有这些规定，才能写出这
样结构的代码：
while ((c = getchar()) != ' ' && c != '\n')
440
如上代码所示，读取字符直至遇到第1 个空格或换行符。第1 个子表达
式把读取的值赋给c，后面的子表达式会用到c的值。如果没有求值循序的保
证，编译器可能在给c赋值之前先对后面的表达式求值。
这里还有一个例子：
if (number != 0 && 12/number == 2)
printf("The number is 5 or 6.\n");
如果number的值是0，那么第1个子表达式为假，且不再对关系表达式求
值。这样避免了把0作为除数。许多语言都没有这种特性，知道number为0
后，仍继续检查后面的条件。
最后，考虑这个例子：
while ( x++  2 && 3 == 3     真
!(6 > 2 && 3 == 3)   假
x != 0 && (20 / x) = 90 && range = 'a' && ch <= 'z')
printf("That's a lowercase character.\n");
该方法仅对于像ASCII这样的字符编码有效，这些编码中相邻字母与相
邻数字一一对应。但是，对于像EBCDIC这样的代码就没用了。相应的可移
植方法是，用ctype.h系列中的islower()函数（参见表7.1）：
if (islower(ch))
printf("That's a lowercase character.\n");
无论使用哪种特定的字符编码，islower()函数都能正常运行（不过，一