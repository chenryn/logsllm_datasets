*   接受、连接和发送等网络活动
或者，从 Kubernetes 对象的角度来看:`pod`、`secret`、`deployment`、`namespace`、`serviceaccount`、`configmap`等等
为了涵盖所有这些活动或在 Kubernetes 集群中发生的行为，我们将需要丰富的信息来源。接下来，我们来谈谈 Falco 用来进行异常检测的事件源，以及 s 源是如何覆盖前面的活动和行为的。
### 异常检测的事件源
Falco 依靠两个事件源进行异常检测。一个是系统调用，另一个是 Kubernetes 审计事件。对于系统调用事件，Falco 使用内核模块来挖掘机器上的系统调用流，然后将这些系统调用传递给用户空间(最近也支持`ebpf`)。在用户空间中，Falco 还用更多的上下文来丰富原始系统调用事件，例如进程名、容器 ID、容器名、映像名等等。对于 Kubernetes 审计事件，用户需要启用 Kubernetes 审计策略，并向 Falco 服务端点注册 Kubernetes 审计 webhook 后端。然后，Falco 引擎检查与引擎中加载的任何 Falco 规则匹配的任何系统调用事件或 Kubernetes 审核事件。
谈论使用系统调用和 Kubernetes 审计事件作为事件源来进行异常检测的基本原理也很重要。系统调用是应用与操作系统交互以访问文件、设备、网络等资源的编程方式。考虑到容器是一堆具有自己专用名称空间的进程，并且它们在节点上共享相同的操作系统，系统调用是一个统一的事件源，可用于监控容器的活动。应用用什么编程语言编写并不重要；最终，所有的功能都将被转换成系统调用来与操作系统交互。请看下图:
![Figure 11.3 – Containers and system calls ](img/B15566_11_003.jpg)
图 11.3–容器和系统调用
在上图中，有四个运行不同应用的容器。这些应用可能用不同的编程语言编写，它们都调用一个函数来打开具有不同函数名的文件(例如，`fopen`、`open`、`os.Open`)。然而，从操作系统的角度来看，所有这些应用都调用同一个系统调用，`open`，但可能使用不同的参数。Falco 能够从系统调用中检索事件，因此它们是什么样的应用或者使用什么样的编程语言并不重要。
另一方面，在 Kubernetes 审计事件的帮助下，Falco 对 Kubernetes 对象的生命周期具有完全的可见性。这对于异常检测也很重要。例如，在生产环境中有一个带有`busybox`映像的 pod 作为权限 pod 启动，这可能是不正常的。
总的来说，两个事件源——系统调用和 Kubernetes 审计事件——足以覆盖 Kubernetes 集群中发生的所有有意义的活动。现在，了解了法尔科事件源，让我们用一个高级架构图来总结一下我们对法尔科的概述。
### 高级架构
法尔科主要由一个几个组件组成，如下:
*   **法尔科规则**:定义为的规则，用于检测事件是否为异常。
*   **法尔科引擎**:用法尔科规则评估一个传入事件，如果一个事件符合任何规则，则抛出一个输出。
*   **内核模块/Sysdig 库**:标记系统调用事件，并在发送到 Falco 引擎进行评估之前进行丰富。
*   **Web 服务器**:收听 Kubernetes 审核事件，并传递给 Falco 引擎进行评估。
下图显示了法尔科的内部架构:
![Figure 11.4 – Falco's internal architecture ](img/B15566_11_004.jpg)
图 11.4–法尔科的内部架构
现在，我们已经结束了对 Falco 的概述。接下来，让我们尝试使用一些法尔科规则并检测任何异常行为。
## 创建法尔科规则来检测异常
在我们深入探讨 Falco 规则之前，请通过运行以下命令确保您已经安装了 Falco:
```
helm install --name falco stable/falco
```
Falco DaemonSet 应该在 Kubernetes 集群中运行，如下面的代码块所示:
```
$ kubectl get pods
NAME          READY   STATUS    RESTARTS   AGE
falco-9h8tg   1/1     Running   10         62m
falco-cnt47   1/1     Running   5          3m45s
falco-mz6jg   1/1     Running   0          6s
falco-t4cpw   1/1     Running   0          10s
```
要启用 Kubernetes 审核并将 Falco 注册为 webhook 后端，请按照 Falco 存储库中的说明操作([https://github . com/falcosecurity/evolution/tree/master/examples/k8s _ audit _ config](https://github.com/falcosecurity/evolution/tree/master/examples/k8s_audit_config))。
法尔科规则有三种类型的元素，如下所示:
*   **规则**:在下将触发警报的一种情况。规则具有以下属性:规则名称、描述、条件、优先级、来源、标签和输出。当事件符合任何规则的条件时，会根据规则的输出定义生成警报。
*   **宏**:可以被其他规则或宏重用的规则条件片段。
*   **列表**:可以被宏和规则使用的项目集合。
为了方便 Falco 用户建立自己的规则，Falco 提供了一些默认列表和宏。
### 创建系统调用规则
Falco 系统调用规则评估系统调用事件——更准确地说，是丰富的系统调用。系统调用事件字段由内核模块提供，与 Sysdig(由 Sysdig 公司构建的开源工具)过滤器字段相同。策略引擎使用 Sysdig 的过滤器从系统调用事件中提取进程名、容器映像和文件路径等信息，并用 Falco 规则对其进行评估。
以下是最常见的 Sysdig 过滤器字段，可用于构建 Falco 规则:
*   **工艺名称**:工艺名称
*   **文件名**:写入或读取的文件名
*   **容器号**:容器号
*   **Container . image . repository**:无标签的容器映像名称
*   **fd.sip 和 fd.sport** :服务器**互联网协议** ( **IP** )地址和服务器端口
*   **fd.cip 和 fd.cport** :客户端 ip 和客户端端口
*   **evt.type** :系统调用事件(`open`、`connect`、`accept`、`execve`等)
让我们试着建立一个简单的法尔科规则。假设您有一个`nginx` pod，仅服务于`/usr/share/nginx/html/`目录中的静态文件。因此，您可以创建一个 Falco 规则来检测任何异常文件读取活动，如下所示:
```
    - rule: Anomalous read in nginx pod
      desc: Detect any anomalous file read activities in Nginx pod.
      condition: (open_read and container and container.image.repository="kaizheh/insecure-nginx" and fd.directory != "/usr/share/nginx/html")
      output: Anomalous file read activity in Nginx pod (user=%user.name process=%proc.name file=%fd.name container_id=%container.id image=%container.image.repository)
      priority: WARNING
```
前面的规则使用了两个默认宏:`open_read`和`container`。`open_read`宏检查系统调用事件是否以只读模式打开，而`container`宏检查系统调用事件是否发生在容器内。然后，该规则仅适用于运行`kaizheh/insecure-nginx`映像的容器，并且`fd.directory`过滤器从系统调用事件中检索文件目录信息。在该规则中，它检查在`/usr/share/nginx/html/`目录之外是否有任何文件被读取。那么，如果`nginx`配置错误导致文件路径遍历(读取任意目录下的文件)怎么办？这方面的一个例子显示在下面的代码块中:
```
# curl insecure-nginx.insecure-nginx.svc.cluster.local/files../etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/bin/false
```
同时，Falco 检测到指定目录之外的文件访问，输出如下:
```
08:22:19.484698397: Warning Anomalous file read activity in Nginx pod (user= process=nginx file=/etc/passwd container_id=439e2e739868 image=kaizheh/insecure-nginx) k8s.ns=insecure-nginx k8s.pod=insecure-nginx-7c99fdf44b-gffp4 container=439e2e739868 k8s.ns=insecure-nginx k8s.pod=insecure-nginx-7c99fdf44b-gffp4 container=439e2e739868
```
接下来我们来看看如何使用 K8s 审核规则。
### 创建 K8s 审核规则
K8s 审核规则评估 Kubernetes 审核事件。在本章的前面，我们已经展示了 Kubernetes 审计事件记录的样子。与 Sysdig 过滤器类似，有两种方法可以从 Kubernetes 审核事件中检索信息。一种是使用 **JavaScript 对象符号** ( **JSON** )指针；另一种是使用 Falco 内置滤镜。以下是一些常用的 Falco 内置过滤器，用于检索 Kubernetes 审计事件的信息:
*   `ka.verb`:Kubernetes 审核事件的动词字段。`jevt.value[/verb]`是其对应的 JSON 指针。
*   `ka.target.resource`:Kubernetes 审核事件的资源字段。`jevt.value[/objectRef/resource]`是其对应的 JSON 指针。
*   `ka.user.name`:Kubernetes 审核事件的用户名字段。`jevt.value[/user/username]`是其对应的 JSON 指针。
*   `ka.uri`:Kubernetes 审核事件的`requestURI`字段。`jet.value[/requestURI]`是它对应的 JSON 指针。
让我们尝试构建一个简单的 K8s 审计规则。假设您不想在`kube-system`名称空间中部署映像，除了少数用于服务的可信映像，如`kube-apiserver`、`etcd-manager`等。因此，您可以创建一个法尔科规则，如下所示:
```
- list: trusted_images
  items: [calico/node, kopeio/etcd-manager, k8s.gcr.io/kube-apiserver, k8s.gcr.io/kube-controller-manager, k8s.gcr.io/kube-proxy, k8s.gcr.io/kube-scheduler]
- rule: Untrusted Image Deployed in kube-system Namespace
  desc: >
    Detect an untrusted image deployed in kube-system namespace
  condition: >
    kevt and pod
    and kcreate
    and ka.target.namespace=kube-system
    and not ka.req.pod.containers.image.repository in (trusted_images)
  output: Untrusted image deployed in kube-system namespace (user=%ka.user.name image=%ka.req.pod.containers.image.repository resource=%ka.target.name)
  priority: WARNING
  source: k8s_audit
  tags: [k8s]
```
首先，我们定义一个允许在`kube-system`命名空间中部署的可信映像列表。在规则中，我们使用两个默认宏:`pod`和`kcreate`。`pod`宏检查目标资源是否是 pod，而`kcreate`检查动词是否是`create`。我们还会检查目标名称空间是否为`kube-system`，部署映像是否不在`trusted_images`列表中。该规则的`source`字段中的`k8s_audit`值表示该规则评估 Kubernetes 审核事件。然后，如果我们尝试在`kube-system`命名空间中部署一个`busybox`映像包，我们将会看到来自 Falco 的以下警报:
```
21:47:15.063915008: Warning Untrusted image deployed in kube-system namespace (user=admin image=busybox resource=pod-1)
```
请注意，为了使该规则起作用，pod 创建的审核级别至少需要在`Request`级别，审核事件包括 pod 的规范信息，如映像。
在本节中，我们介绍了 Falco，并向您展示了如何从两个事件源创建 Falco 规则:系统调用和 Kubernetes 审计事件。这两个规则都用于根据工作负载或集群的已知良性活动来检测异常活动。接下来，我们来谈谈如何在 Kubernetes 集群中进行取证。
# 与 Sysdig Inspect 和 CRIU 进行取证
网络安全中的取证意味着收集、处理和分析信息，以支持漏洞缓解和/或欺诈、反情报或法律实施调查。您可以保留的数据越多，对收集的数据进行分析的速度越快，您就能越快地追踪攻击并更好地响应事件。在这一节中，我们将向您展示如何使用 CRIU 和 Sysdig 开源工具来收集数据，然后介绍 Sy sdig Inspect，一个用于分析 Sysdig 收集的数据的开源工具。
## 利用 CRIU 收集数据
**CRIU** 是**用户空间检查点和恢复**的缩写。它是一个可以冻结正在运行的容器并在磁盘上捕获容器状态的工具。稍后，保存在磁盘上的容器和应用的数据可以恢复到冻结时的状态。它对于容器快照、迁移和远程调试非常有用。从安全角度来看，捕获容器中正在运行的恶意活动(这样您就可以在检查点之后立即终止容器)并在沙盒环境中恢复状态以供进一步分析，这一点尤其有用。
CRIU 作为 Docker 插件工作，目前仍处于实验模式，存在一个已知问题，即 CRIU 在最近几个版本([https://github.com/moby/moby/issues/37344](https://github.com/moby/moby/issues/37344))中工作不正常。出于演示的目的，我使用了一个旧的 Docker 版本(Docker CE 17.03)，并将展示如何使用 CRIU 检查正在运行的容器，并将状态恢复为新容器。
要启用 CRIU，您需要在 Docker 守护程序中启用`experimental`模式，如下所示:
```
echo "{\"experimental\":true}" >> /etc/docker/daemon.json
```
然后，重新启动 Docker 守护程序后，您应该能够成功执行`docker checkpoint`命令，如下所示:
```
# docker checkpoint
Usage:	docker checkpoint COMMAND
Manage checkpoints