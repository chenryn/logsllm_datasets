### References

1. **Garbled Circuits with Constant Overhead**. In TCC.
2. **Arpita Patra, Thomas Schneider, Ajith Suresh, and Hossein Yalame. 2021. ABY2.0: Improved Mixed-Protocol Secure Two-Party Computation**. In USENIX Security.
3. **Arpita Patra, Thomas Schneider, Ajith Suresh, and Hossein Yalame. 2021. SynCirc: Efficient Synthesis of Depth-Optimized Circuits for Secure Computation**. In HOST.
4. **Benny Pinkas, Thomas Schneider, Gil Segev, and Michael Zohner. 2015. Phasing: Private Set Intersection Using Permutation-based Hashing**. In USENIX Security.
5. **Benny Pinkas, Thomas Schneider, Nigel P. Smart, and Stephen C. Williams. 2009. Secure Two-Party Computation Is Practical**. In ASIACRYPT.
6. **Deevashwer Rathee, Mayank Rathee, Nishant Kumar, Nishanth Chandran, Divya Gupta, Aseem Rastogi, and Rahul Sharma. 2020. CrypTFlow2: Practical 2-Party Secure Inference**. In CCS.
7. **Eric Rescorla. 2018. The Transport Layer Security (TLS) Protocol Version 1.3**. RFC 8446. [Link](https://rfc-editor.org/rfc/rfc8446.txt)
8. **M. Sadegh Riazi, Mohammad Samragh, Hao Chen, Kim Laine, Kristin Lauter, and Farinaz Koushanfar. 2019. XONN: XNOR-Based Oblivious Deep Neural Network Inference**. In USENIX Security.
9. **Mike Rosulek and Lawrence Roy. 2021. Three Halves Make a Whole? Beating the Half-Gates Lower Bound for Garbled Circuits**. In CRYPTO.
10. **Palash Sarkar. 2008. A General Mixing Strategy for the ECB-Mix-ECB Mode of Operation**. In Information Processing Letters. [Link](https://www.sciencedirect.com/science/article/pii/S0020019008002652)
11. **Ebrahim M. Songhori, Siam U. Hussain, Ahmad-Reza Sadeghi, Thomas Schneider, and Farinaz Koushanfar. 2015. TinyGarble: Highly Compressed and Scalable Sequential Garbled Circuits**. In IEEE S&P.
12. **Ebrahim M. Songhori, Shaza Zeitouni, Ghada Dessouky, Thomas Schneider, Ahmad-Reza Sadeghi, and Farinaz Koushanfar. 2016. GarbledCPU: A MIPS Processor for Secure Computation in Hardware**. In DAC.
13. **The OpenSSL Project. 2003. OpenSSL: The Open Source Toolkit for SSL/TLS**. [Link](www.openssl.org)
14. **Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. 2016. EMP-toolkit: Efficient MultiParty Computation Toolkit**. [Link](https://github.com/emp-toolkit)
15. **Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Authenticated Garbling and Efficient Maliciously Secure Two-Party Computation**. In CCS.
16. **Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Global-Scale Secure Multiparty Computation**. In CCS.
17. **Kang Yang, Chenkai Weng, Xiao Lan, Jiang Zhang, and Xiao Wang. 2020. Ferret: Fast Extension for Correlated OT with Small Communication**. In CCS.
18. **Andrew C. Yao. 1982. Protocols for Secure Computations**. In FOCS.
19. **Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets**. In FOCS.
20. **Samee Zahur and David Evans. 2015. Obliv-C: A Language for Extensible Data-Oblivious Computation**. Cryptology ePrint Archive. [Link](https://eprint.iacr.org/2015/1153)
21. **Samee Zahur, Mike Rosulek, and David Evans. 2015. Two Halves Make a Whole: Reducing Data Transfer in Garbled Circuits Using Half Gates**. In EUROCRYPT.
22. **Wenting Zheng, Ryan Deng, Weikeng Chen, Raluca Ada Popa, Aurojit Panda, and Ion Stoica. 2021. Cerebro: A Platform for Multi-Party Cryptographic Collaborative Learning**. In USENIX Security.

### Example Code for Our Implementation

We provide example code for the register-oriented batch computation strategy from § 4.2.1 in Listing 1 and for the memory-oriented one from § 4.2.2 in Listing 2.

#### Listing 1: Register-oriented Implementation of HalfGates’s Evaluation [13, 97] Using Fixed-Key VAES and AVX512F

```cpp
void halfgates_eval_vaes(uint8_t* expanded_key, Gate* tables, size_t num_gates, uint64_t gates, uint8_t* tableCounter) {
    constexpr size_t width = 8;
    constexpr size_t num_regs = (width + 3) / 4;
    constexpr size_t used_lanes = std::min(size_t(4), width);
    constexpr size_t offset = used_lanes * 2;

    // Handle leftovers with another call with width == 1
    __m512i ONE = _mm512_set_epi64(0, 1, 0, 1, 0, 1, 0, 1);
    __m512i FULL_OFFSET = _mm512_set_epi64(0, offset, 0, offset, 0, offset, 0, offset);
    __m512i counter = _mm512_set_epi64(0, (tableCounter[2]) * 2, 0, (tableCounter[1]) * 2, 0, (tableCounter[0]) * 2);

    __m512i keys[11];
    // Omitted loading round keys with _mm512_broadcasti32x4_epi32

    for (size_t p = 0; p < num_gates; ++p) {
        Gate* leftParent = tables[p].leftParent;
        uint8_t* leftParentKey = leftParent->evalKey;
        __m128i leftParentKeyLocal = _mm_loadu_si128(reinterpret_cast<__m128i*>(leftParentKey));
        keys[w] = _mm512_inserti32x4(keys[w], leftParentKeyLocal, l);

        currentGate->targetGateKey[used_lanes * w + l] = currentGate->evalKey;
        uint8_t lpbBit = leftParentKey[15] & 0x01;
        uint8_t lpbBit11 = (lpbBit << 1) | (gates[4 * p + 2] & 1);

        cout << gates[4 * p + 2] << " " << getLSB(GTM[exec_times][ands][index]);
        labels[exec_times][cf->gates[4 * p + 2]] = logic_xor(mask_input, getLSB(GTM[exec_times][ands][index]));
    }
}
```

This code snippet demonstrates the register-oriented implementation of the HalfGates evaluation using fixed-key VAES and AVX512F. It includes the necessary setup and loop structure for processing the gates.