Garbled Circuits with Constant Overhead. In TCC.
[78] Arpita Patra, Thomas Schneider, Ajith Suresh, and Hossein Yalame. 2021. ABY2.0:
Improved mixed-protocol secure two-party computation. In USENIX Security.
[79] Arpita Patra, Thomas Schneider, Ajith Suresh, and Hossein Yalame. 2021. SynCirc:
Efficient Synthesis of Depth-OptimizedCircuits for Secure Computation. In HOST.
[80] Benny Pinkas, Thomas Schneider, Gil Segev, and Michael Zohner. 2015. Phasing:
Private Set Intersection Using Permutation-based Hashing. In USENIX Security.
[81] Benny Pinkas, Thomas Schneider, Nigel P. Smart, and Stephen C. Williams. 2009.
Secure Two-Party Computation Is Practical. In ASIACRYPT.
[82] Deevashwer Rathee, Mayank Rathee, Nishant Kumar, Nishanth Chandran, Divya
Gupta, Aseem Rastogi, and Rahul Sharma. 2020. CrypTFlow2: Practical 2-Party
Secure Inference. In CCS.
[83] Eric Rescorla. 2018. The Transport Layer Security (TLS) Protocol Version 1.3.
RFC 8446. https://rfc-editor.org/rfc/rfc8446.txt
[84] M. Sadegh Riazi, Mohammad Samragh, Hao Chen, Kim Laine, Kristin Lauter, and
Farinaz Koushanfar. 2019. XONN: XNOR-Based Oblivious Deep Neural Network
Inference. In USENIX Security.
[85] Mike Rosulek and Lawrence Roy. 2021. Three Halves Make a Whole? Beating
the Half-Gates Lower Bound for Garbled Circuits. In CRYPTO.
[86] Palash Sarkar. 2008. A General Mixing Strategy for the ECB-Mix-ECB Mode of
Operation. In Information Processing Letters. https://www.sciencedirect.com/
science/article/pii/S0020019008002652
[87] Ebrahim M. Songhori, Siam U. Hussain, Ahmad-Reza Sadeghi, Thomas Schneider,
and Farinaz Koushanfar. 2015. TinyGarble: Highly Compressed and Scalable
Sequential Garbled Circuits. In IEEE S&P.
[88] Ebrahim M. Songhori, Shaza Zeitouni, Ghada Dessouky, Thomas Schneider,
Ahmad-Reza Sadeghi, and Farinaz Koushanfar. 2016. GarbledCPU: A MIPS
Processor for Secure Computation in Hardware. In DAC.
[89] The OpenSSL Project. 2003. OpenSSL: The Open Source toolkit for SSL/TLS.
www.openssl.org.
[90] Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. 2016. EMP-toolkit: Efficient
MultiParty Computation Toolkit. https://github.com/emp-toolkit.
[91] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Authenticated Garbling
and Efficient Maliciously Secure Two-Party Computation. In CCS.
[92] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Global-Scale Secure
Multiparty Computation. In CCS.
[93] Kang Yang, Chenkai Weng, Xiao Lan, Jiang Zhang, and Xiao Wang. 2020. Ferret:
Fast Extension for Correlated OT with Small Communication. In CCS.
[94] Andrew C. Yao. 1982. Protocols for secure computations. In FOCS.
[95] Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets. In FOCS.
[96] Samee Zahur and David Evans. 2015. Obliv-C: A Language for Extensible Data-
Oblivious Computation. Cryptology ePrint Archive. https://eprint.iacr.org/2015/
1153.
[97] Samee Zahur, Mike Rosulek, and David Evans. 2015. Two halves make a whole:
Reducing data transfer in garbled circuits using half gates. In EUROCRYPT.
[98] Wenting Zheng, Ryan Deng, Weikeng Chen, Raluca Ada Popa, Aurojit Panda, and
Ion Stoica. 2021. Cerebro: A Platform for Multi-Party Cryptographic Collaborative
Learning. In USENIX Security.
A EXAMPLE CODE FOR OUR
IMPLEMENTATION
We present example code for the register-oriented batch computa-
tion strategy from § 4.2.1 in Listing 1 and for the memory-oriented
one from § 4.2.2 in Listing 2.
Listing 1: Register-oriented implementation of HalfGates’s
evaluation [13, 97] using fixed-key VAES and AVX512F.
1 void h a l f g a t e s _ e v a l _ v a e s ( uint8_t ∗ expanded_key , Gate ∗
t a b l e s , size_t num_gates , uint64_t
gates , uint8_t ∗
{
t a b l e C o u n t e r )
2 constexpr size_t width = 8 ;
3 constexpr size_t num_regs = ( width + 3 )
4 constexpr size_t u s e d _ l a n e s = s t d : : min ( size_t ( 4 ) , width ) ;
5 constexpr size_t o f f s e t = u s e d _ l a n e s
6 // do the leftovers with another call with width ==1
7 __m512i ONE = _mm512_set_epi64 ( 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ) ;
8 __m512i FULL_OFFSET = _mm512_set_epi64 ( 0 , o f f s e t , 0 ,
∗ 2 ;
/ 4 ;
o f f s e t , 0 , o f f s e t , 0 , o f f s e t ) ;
9 __m512i counter = _mm512_set_epi64 ( 0 ,
∗ 2 , 0 ,
1 )
∗ 2 , 0 ,
( t a b l e C o u n t e r + 2 )
( t a b l e C o u n t e r + 0 )
∗ 2 , 0 ,
∗ 2 ) ;
10 __m512i keys [ 1 1 ] ;
11 // omitted loading round keys with
_mm512_broadcasti32x4_epi32
( t a b l e C o u n t e r + 3 )
( t a b l e C o u n t e r +
12 for ( size_t p = 0 ; p  l e f t P a r e n t ;
Gate ∗
uint8_t ∗
l e f t P a r e n t K e y = l e f t P a r e n t −>evalKey ;
__m128i l e f t P a r e n t K e y L o c a l = _mm_loadu_si128 ( (
{
__m128i ∗ ) ( l e f t P a r e n t K e y ) ) ;
l e f t K e y s [w] = _mm512_inserti32x4 ( l e f t K e y s [w] ,
l e f t P a r e n t K e y L o c a l ,
targetGateKey [ u s e d _ l a n e s
evalKey ;
l ) ;
∗ w + l ] = currentGate −>
uint8_t l p b i t = l e f t P a r e n t K e y [ 1 5 ] & 0 x01 ;
uint8_t l p b i t 1 1 = ( l p b i t  g a t e s [4 ∗
cout  g a t e s [4 ∗
[ cf −> g a t e s [4 ∗
ands ] [ index ] ) ) ;
i + 2 ] ] = l o g i c _ x o r ( mask_input
i + 2 ] ] , getLSB (GTM[ exec_times ] [
l a b e l s [ exec_times ] [ cf −> g a t e s [4 ∗