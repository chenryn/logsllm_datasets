Open Source Security Information Management 2004/02/01
OSSIM
Correlation engine explained.
Sample scenario:
NETBIOS DCERPC ISystemActivator
Dominique Karg PI:EMAIL
http://www.ossim.net
Correlation Example http://www.ossim.net
Open Source Security Information Management 2004/02/01
Index1. Foreword ........................................................................................................................................................ 3 2. Directives........................................................................................................................................................ 4 3. NETBIOS DCERPC IsystemActivator...................................................................................................... 8 4. Conclusion.................................................................................................................................................... 13 Appendix A – Plugins ..................................................................................................................................... 14 Appendix B – Complete directive.................................................................................................................. 15Correlation Example http://www.ossim.net
Open Source Security Information Management 2004/02/01
1. Foreword
This short paper explains a sample directive used by ossim’s correlation engine. It tries to show the pseudo-language used for directive composing, shows what each tag means and explains how and why a sample directive is built up.This paper’s main focus is logical directive correlation. OS / Service correlation and Snort / Nessus and it’s implementations will be explained in future papers and will be included in a complete correlation paper that is about to be released.
For better understanding I’ll resume how events are being processed by ossim agents and servers.
All event processing and normalization is done by lightweight agents that are able to read logs from:-
-
-
-
-
-
- Snort 
Spade 
Apache 
IIS 
Iptables 
FW-1 
Etc...
The agent is also able to query ntop on information about certain hosts or established sessions. Opennms could also be considered a monitor since it can tell us if a certain service is running or not.
We differentiate between „monitor“ and „detector“ input. Detector input is continuosly fed from the agents to the server as events or logs arrive.Monitor input must be requested by the server, then the agents must query the monitors and report back to the server if the requested condition is met.
Correlation Example http://www.ossim.net
Open Source Security Information Management 2004/02/01
2. Logical Directives
OSSIM’s directives are defined using xml 1.0. In order to show the possibilities we have as of today I’ll try to explain the basic syntax.The correlation engine reads all the directives on startup in order to match individual rules or events. It’s functionality ressembles a logical tree consisting of „if“ and „or“statements, joined together to provide reliable means of identifying attacks or network misbehaviour.
A logical directive starts containing two tags. A directive id (decimal, unique) and a descriptive name that is shown when the directive is matched and it reaches an „alert“status (more on this later).
Each directive has a starting rule that puts that begins to match the directive and starts the event correlation.
This is our starting rule, i’ll explain the fields step-by-step.•Type
What type of rule is this. There are two possible types as of today:
1.Detector 
Detector rules are those received automatically from the agent as they are recorded. This includes snort, spade, apache, etc...
2.Monitor 
Monitor rules must be queried by the server ntop data and ntop sessions.
•Name
The  rule name shown within the event database when the level is matched.
•Priority•Priority
Correlation Example http://www.ossim.net
Open Source Security Information Management 2004/02/01
The priority used within this directive. The only rule that should have a priority is the first one which, combined with the host asset and policy information will further qualify this attack.
One thing to note.
Snort uses inverse priority, 1 is high, 3 is low. Our approach is different. 0 means ignore, 1 means low and the higher the number the higher the priority.•Reliability
Each rule has it’s own reliability. This is an important variable as our correlation directive will usually be focused on „comprobation“, this means that the first rule of a directive has the objective of locating a possible attack, and the rest of rules’s only porpuse is to check wether this attack is really happening or it’s just a false positive.During a correlation process the reliability, which usually starts as „0“ or jut „1“ will grow as the correlation engine finds evidence that the attack is real. Reliability has a value between „0“ and „10“, and has the idea of real time probabibility measuared as a tenth of the percentage value: value „1“ will mean we think at this stage the event has 10% probability that the event is not a false positive, 3 will mean 30%, and so on.•Time_out
We wait a fixed amount of seconds until a rule expires and the directives lifetime is over. We define the time-frame in which an attack may happen.
•Occurrence
How many times must a rule match until we advance to the next one? Combined with a high timeout this can be used to detect slow scan for example (using spade anomaly detector).
•From
Source IP. There are various possible values for this field:1.ANY 
Just that, any ip address would match.
2.Dotted numerical Ipv4 (x.x.x.x) 
Self explaining.
3.Referenced.
This is used to reference ip addresses from previous levels. This should be easier to understand using examples:
1:SRC_IP means use the source ip referenced within the previous rule 2:DST_IP means use the destination ip referenced two rules below as source address
Correlation Example http://www.ossim.netOpen Source Security Information Management 2004/02/01
•To
Source IP. There are various possible values for this field:
1.ANY 
Just that, any ip address would match.
2.Dotted numerical Ipv4 (x.x.x.x) 
Self explaining.
3.Referenced.
This is used to reference ip addresses from previous levels. This should be easier to understand using examples1:SRC_IP means use the source ip referenced within the previous rule 2:DST_IP means use the destination ip referenced two rules below as source address
The „To“ field is the field used when referencing monitor data that has no source.
Both „From“ and „To“ fields should accept input from the database in the near future. Host and Network objects are on the TODO list.
•Port_from•Port_from
This can be a port number or a sequence of comma separated port numbers. ANY port can also be used. As before, source ports can also be referenced as in „1:SRC_PORT“or „2:DST_PORT“.
•Port_to
This can be a port number or a sequence of comma separated port numbers. ANY port can also be used. As before, source ports can also be referenced as in „1:SRC_PORT“or „2:DST_PORT“.
•Plugin_id•Plugin_id
The nummerical id assigned to the referenced plugin. See appendix A.
•Plugin_sid
The nummerical sub-id assigned to each plugins events, functions or the like. For example, plugin id 1001 (snort) references it’s rules as normal plugin_sids. Plugin id 1501 (apache) uses the response codes as plugin_sid (200 OK, 404 NOT FOUND, ...)
•Condition
Correlation Example http://www.ossim.netOpen Source Security Information Management 2004/02/01
This parameter and the following three are only valid for „monitor“  and certain„detector“ type rules.
The logical condition that has to be met for the rule to match: 1.eq - Equal 
2.ne – Not equal 
3.lt – Lesser than 
4.gt – Greater than 
5.le – Lesser or equal 
6.ge – Greater or equal
•Value
The value that has to be matched using the previous directives.•Interval
This value is similar to time_out but used for „monitor“ type rules.	•Absolute
Determines if the provided value is absolute or relative.
For example, providing 1000 as a value, gt as condition and 60 (seconds) as interval, querying ntop for HttpSentBytes would mean:
-
- Absolute true: Match if the host has more than 1000 http sent bytes within the next 60 seconds. Report back when (and only if) this absolute value is reached. Absolute false: Match if the host shows an increase of 1000 http sent byteswithin the next 60 seconds. Report back as soon as this difference is reached (if it was reached...)
Correlation Example http://www.ossim.net
Open Source Security Information Management 2004/02/01
3. NETBIOS DCERPC IsystemActivator
After having learned the basic directive syntax let’s examine our sample directive. I wrote this directive for testing purposes and some steps or rules could be wrong. Any feedback would be appreciated.First, we have the start tag. This is the first directive so it has id=1 and it’s name is„Successful Dcom exploit“ because that’s what we’ll try to catch.
Next we have our starting rule. This rule expects a snort alert number 2192 coming from any:any to any:135 or any:445. We only need one event to match this rule. When this event arrives we’ll wait 60 seconds until a second level rule matches.
The next is a opening tag that means, after the previous rule match any of the next level rules.
At second level our first rule tries to match a strange connection event from spade (plugin 1104, plugin_sid 1) using source and dest host data from the previous rule. Besides this, we raise the reliability to 3 and wait another 60 seconds for the next level to be reached. Again we only need this event once to match.
Next, another start tag and we advance to level three (if the two previous levels matched).
This rule matches an attack response coming through the previous strange connection. This raises our reliability even more. Note that now we expect the event from the attacked host so we exchange source and dest host information. Ports must also be inverted but we didn’t know them at level one so we use the information gleaned from level two.Correlation Example http://www.ossim.net
Open Source Security Information Management 2004/02/01
Start one last level.
Start one last level.
Ok, what do we’ve got ? A dcom attack signature, a strange connection after that, and finally an attack response. Wow, that looks suspicious but let’s see if we can glean a little bit more information.
What if the second, strange connection, has opened a persistant socket ? Let’s query our monitor and see if thet combination SRC_IP:source_port -> DST_IP:Strange_dest_port opens a connection that lasts more than 10 seconds. If so, the reliability is very very high and after four matched levels our directive expires.For informational purposes, plugin 2005 is ntop and plugin_sid means „session duration“.
If that fails, let’s wait five minutes and see if spade detects some strange connections originating from the attacked hosts, connections to odd or closed ports or worse, towars non-live hosts.
Compromise behaviour would normally be much better detected by the „compromise“risk monitor, but for the shake of simplicity of the example we will make it directly with spade.
After this, our directive would have accomplished it’s purpose and four separate events have shown that our example target host has certainly been compromised.The next level 2, 3 and 4 level rules are similar but less reliable.
After this explanation you should be able to follow the remaining event flow from the directive shown at appendix B.
-	The second second-level rule does the same as the first but expects different 	originating events.
-	The third second-level rule is the same againt, we expect a connect-back 	shellcode.
--
- The fourth watches for attack-responses that don’t trigger the anomaly engine. The fifth and latter rules aren’t that reliable and try to catch odd behaviour.
Ok, this is our final logical tree. Diferent levels use diferent colors.
Green: level 1 
Yellow: level 2 
Orange: level 3 
Red: level 4
	 <rule type="monitor" name="Established session against abnormal	 <rule type="detector" name="Attacked host is misbehaving.  Nonlive	 <rule type="detector" name="Attacked host is misbehaving."
	 <rule type="detector" name="Attacked host is misbehaving."