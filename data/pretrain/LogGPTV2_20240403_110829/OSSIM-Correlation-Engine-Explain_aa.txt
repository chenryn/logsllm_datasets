# Open Source Security Information Management (OSSIM) - Correlation Engine Explained
**Date: 2004/02/01**

## Table of Contents
1. Foreword
2. Logical Directives
3. NETBIOS DCERPC ISystemActivator
4. Conclusion
5. Appendices
   - Appendix A – Plugins
   - Appendix B – Complete Directive

## 1. Foreword
This document provides an explanation of a sample directive used by OSSIM's correlation engine. It aims to illustrate the pseudo-language used for composing directives, explain the meaning of each tag, and detail the construction and purpose of a sample directive. The primary focus is on logical directive correlation. Future documents will cover OS/service correlation and Snort/Nessus implementations.

To better understand the event processing in OSSIM, it is important to know that all event processing and normalization are handled by lightweight agents. These agents can read logs from various sources, including:
- Snort
- Spade
- Apache
- IIS
- Iptables
- FW-1
- ntop (for host and session information)
- OpenNMS (for service monitoring)

We differentiate between "monitor" and "detector" inputs. Detector inputs are continuously fed from the agents to the server as events or logs arrive. Monitor inputs, however, must be requested by the server, and the agents must query the monitors and report back if the requested condition is met.

## 2. Logical Directives
OSSIM's directives are defined using XML 1.0. To illustrate the possibilities, we will explain the basic syntax. The correlation engine reads all directives at startup to match individual rules or events. The functionality resembles a logical tree consisting of "if" and "or" statements, which together provide reliable means of identifying attacks or network misbehavior.

### Structure of a Logical Directive
A logical directive contains two main tags:
- **Directive ID**: A unique decimal identifier.
- **Descriptive Name**: Shown when the directive is matched and reaches an "alert" status.

Each directive starts with a rule that initiates the matching and correlation process. Here is a breakdown of the fields in a starting rule:

- **Type**:
  - **Detector**: Automatically received from the agent (e.g., Snort, Spade, Apache).
  - **Monitor**: Must be queried by the server (e.g., ntop data and sessions).

- **Name**: The name shown in the event database when the level is matched.

- **Priority**: 
  - The first rule should have a priority, which, combined with host asset and policy information, qualifies the attack.
  - Note: Snort uses inverse priority (1 is high, 3 is low). OSSIM uses 0 (ignore), 1 (low), and higher numbers for higher priority.

- **Reliability**:
  - Each rule has its own reliability, which starts at 0 or 1 and increases as the correlation engine finds evidence of a real attack.
  - Reliability ranges from 0 to 10, representing the probability that the event is not a false positive (e.g., 1 means 10% probability, 3 means 30%, etc.).

- **Timeout**:
  - The time in seconds until a rule expires and the directive's lifetime ends.
  - Defines the timeframe in which an attack may occur.

- **Occurrence**:
  - The number of times a rule must match before advancing to the next one.
  - Can be used to detect slow scans (e.g., using Spade anomaly detector).

- **From**:
  - Source IP. Possible values include:
    - ANY: Any IP address.
    - Dotted numerical IPv4 (x.x.x.x).
    - Referenced: Uses IP addresses from previous levels (e.g., 1:SRC_IP, 2:DST_IP).

- **To**:
  - Destination IP. Similar to the "From" field, with possible values including ANY, dotted numerical IPv4, and referenced IP addresses.

- **Port_from**:
  - Source port. Can be a single port number, a sequence of comma-separated port numbers, or ANY. Can also reference previous source ports (e.g., 1:SRC_PORT, 2:DST_PORT).

- **Port_to**:
  - Destination port. Similar to "Port_from".

- **Plugin_id**:
  - Numerical ID assigned to the referenced plugin (see Appendix A).

- **Plugin_sid**:
  - Numerical sub-ID assigned to each plugin's events or functions (e.g., Snort rules, Apache response codes).

- **Condition**:
  - Only valid for "monitor" and certain "detector" type rules. Possible conditions include:
    - eq: Equal
    - ne: Not equal
    - lt: Less than
    - gt: Greater than
    - le: Less than or equal
    - ge: Greater than or equal

- **Value**:
  - The value to be matched using the specified condition.

- **Interval**:
  - Similar to timeout but used for "monitor" type rules.

- **Absolute**:
  - Determines if the provided value is absolute or relative. For example, providing 1000 as a value, gt as condition, and 60 seconds as interval, querying ntop for HttpSentBytes would mean:
    - Absolute true: Match if the host has more than 1000 HTTP sent bytes within the next 60 seconds.
    - Absolute false: Match if the host shows an increase of 1000 HTTP sent bytes within the next 60 seconds.

## 3. NETBIOS DCERPC ISystemActivator
Now, let's examine our sample directive. This directive was created for testing purposes, and feedback is appreciated.

### Directive Structure
- **Start Tag**: The first directive with id=1 and name="Successful Dcom exploit".
- **Starting Rule**: Expects a Snort alert number 2192 coming from any source to any:135 or any:445. We need only one event to match this rule. After this event, we wait 60 seconds for the next level to be reached.

- **Second Level**:
  - First rule: Matches a strange connection event from Spade (plugin 1104, plugin_sid 1) using source and destination host data from the previous rule. Raises reliability to 3 and waits another 60 seconds for the next level.
  - Second rule: Matches an attack response through the previous strange connection. Raises reliability further. Expects the event from the attacked host, so we exchange source and destination host information. Ports are also inverted based on the information from level two.

- **Third Level**:
  - Queries the monitor to see if the combination SRC_IP:source_port -> DST_IP:Strange_dest_port opens a connection lasting more than 10 seconds. If so, the reliability is very high, and after four matched levels, the directive expires.

- **Fourth Level**:
  - Waits five minutes to see if Spade detects strange connections originating from the attacked hosts, connections to odd or closed ports, or connections to non-live hosts.

### Example Flow
- **Level 1 (Green)**: Initial Snort alert.
- **Level 2 (Yellow)**: Strange connection event.
- **Level 3 (Orange)**: Attack response.
- **Level 4 (Red)**: Persistent socket check and final detection.

## 4. Conclusion
This document provides a detailed explanation of the OSSIM correlation engine and a sample directive. Understanding these concepts will help in creating and interpreting directives for effective security management.

## 5. Appendices
### Appendix A – Plugins
- Detailed list of plugins and their IDs.

### Appendix B – Complete Directive
- Full XML representation of the sample directive.

For more information, visit [OSSIM Website](http://www.ossim.net).