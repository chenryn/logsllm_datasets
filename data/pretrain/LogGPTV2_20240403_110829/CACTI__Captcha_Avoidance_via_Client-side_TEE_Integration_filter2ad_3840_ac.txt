signature scheme. The PA plays the role of the EPID issuer,
and – optionally – the revocation manager [30]. During the
provisioning phase (as shown in Figure 2), the PA veriﬁes the
attestation from the client’s TEE and then runs the EPID join
protocol with the client’s TEE in order to provision the TEE
with a group private key skTEE. The PA certiﬁes and publishes
the group public key pkG. The PA may optionally require the
client to prove their identity (e.g., by signing into an account)
– this is a business decision and different PAs may take differ-
ent approaches. After provisioning, the PA is unable to link
signatures to any speciﬁc client thanks to the properties of
the underling BBS+ signature scheme and signature-based
revocation used in EPID [30]. We analyze security implica-
tions of malicious PAs in Section 6.1, and discuss the use of
other group signature schemes in Section 7.2. There can be
multiple PAs and websites can decide which PAs to trust. If a
TEE is provisioned by an unsupported PA, the website would
fall back to using CAPTCHAs.
2566    30th USENIX Security Symposium
USENIX Association
TEE
C
S
t, ts, k, name, pk, sig
SignskTEE (rate-proof)
GET example.com
t, ts, k, name, pks, sig
SignskTEE(rate-proof)
CAPTCHA_PASS, example.com
Verify
Figure 3: CACTI CAPTCHA-avoidance protocol. The client (C) requests a resource from the web server (S). In response, the
server provides a timestamp for the current event (t), a threshold consisting of a starting time (ts) and a count (k), and the name
of the list. Optionally, the server also provides a signature (sig) over the request and the public key (pks) with which the signature
can be veriﬁed. The client passes this information to its T EE in order to produce a rate-proof, signed by a group private key
(skTEE), which can be veriﬁed by the server.
Once the TEE has been provisioned, the client can begin
to use CACTI when visiting supported websites, as shown
in Figure 3. Speciﬁcally, when serving a page, the server
includes the following information: a timestamp t, a threshold
Th (including start time ts and count k), the name of the list (or
CACTI-GLOBAL for the global list), and (optionally) a public
key and signature for rates that enforce a same-origin policy.
The client uses this information to request a rate-proof from
their TEE. If the client’s rate is indeed below the threshold,
the TEE produces the rate-proof, signed with its group private
key. The client then sends this to the server in lieu of solving
a CAPTCHA.
4.3.2 TEE Design
To realize the conceptual design above, the client’s TEE would
ideally store all timestamps indeﬁnitely in integrity-protected
and rollback-protected memory. However, as discussed above,
current TEEs fall short of this idealized representation, since
they have limited integrity-protected memory and a limited
number of hardware counters for rollback protection. To over-
come this challenge, we store all data outside the TEE, e.g., in
a standard database. To prevent dishonest clients from mod-
ifying this data, we use a combination of hash chains and
Merkle Hash Trees (MHTs) to achieve integrity and rollback-
protection.
Hash chains of timestamps. To protect integrity of stored
timestamps, we compute a hash chain over each list of times-
tamps, as shown in Figure 4. Thus the TEE only needs to
provide integrity and rollback-protected storage for the most
recent hash in each hash chain. For efﬁciency, we store inter-
mediate value of the hash chain along with each timestamp
outside the TEE.
MHT of lists. Although it would be possible for the TEE to
seal the most recent hash of each list individually, the lists may
be updated independently, so the TEE would need separate
hardware monotonic counters to provide rollback protection
for each list. In a real-world deployment, the number of lists
is likely to exceed the number of available hardware counters,
e.g., 256 counters per enclave in SGX. To overcome this
challenge, we combine the lists into a Merkle Hash Tree
(MHT). As shown in Figure 5, each leaf of the MHT is a hash
of the list information (list name and public key) and the most
recent hash in the list’s hash chain. With this arrangement, the
TEE only needs to provide integrity and rollback-protected
storage for the MHT root R, which can be achieved using
sealing and a single hardware monotonic counter.
4.3.3 Producing a Rate-Proof
The TEE ﬁrst needs to verify the integrity of its externally-
stored data structures (i.e., hash chains and MHT described
above), and if successful, update these with the new timestamp
and produce the rate-proof, as follows:
1. TEE inputs. The client supplies its TEE with the list
information and all timestamps in the list that are greater than
or equal to the server-deﬁned start time ts. The client also
supplies the largest timestamp that is smaller than ts, which
we denote ts−δ, and the intermediate value of the hash chain
up to, but not including, ts−δ. The client supplies the sealed
USENIX Association
30th USENIX Security Symposium    2567
Figure 4: Hash chain of timestamps ti
cryptographic hash function.
j for list i. H() is a
Figure 5: Merkle Hash Tree over lists a...d. Each leaf is a
hash of the list information Li (list name and public key) and
the most recent hash of the list’s hash chain Hi
n+1. H() is a
cryptographic hash function, R is the root of the MHT, and
the nodes in blue illustrate the inclusion proof path for list b.
MHT root and intermediate hashes required to verify that the
list is in the MHT.
2. Hash chain checks. The TEE ﬁrst checks that ts−δ is
smaller than ts and then recomputes the hash chain over in-
cluded timestamps in order to reach the most recent value.
During this process, it counts the number of included times-
tamps and checks that this is less than the value k speciﬁed
in the threshold. The inclusion of one timestamp outside the
requested range (ts−δ) ensures that the TEE has seen all times-
tamps within the range. This process requires O(n) hashes,
where n is the number of timestamps in the requested range.
3. MHT checks. The TEE then unseals the MHT root
and uses the hardware counter to verify that it is the latest
version. The TEE then checks that the list information and the
calculated most recent hash value is indeed a leaf in the MHT.
This process requires O(log(s)) hashes, where s is the number
of lists. Including the list name in the MHT leaf ensures that
the timestamps have not been substituted from another list.
If the list has an associated public key, the TEE uses this to
verify the signature on the server’s request.
4. Starting a new list. If the rate-proof is requested over a
new list (e.g., when the user ﬁrsts visits a website), the TEE
must also verify that the list name does not appear in any
MHT leaves. In this case, the client supplies the TEE with
all list names and their most recent hash values. The TEE
reconstructs the full MHT and checks that the new list name
does not appear. This requires O(s) string comparisons and
hashes for s lists.
5. Updating a list. If the above veriﬁcation steps are suc-
cessful, the TEE checks that the new timestamp t supplied by
the server exceeds the latest timestamp in the speciﬁed list. If
so, the TEE adds t to the list and updates the MHT to obtain
a new MHT root. The new root is sealed alongside the TEE’s
group private key. The TEE then produces a signed rate-proof,
using its group private key. The rate-proof includes a hash of
the original request provided by the server, thus conﬁrming
that the TEE checked the rate and added the server-supplied
timestamp. The TEE returns the rate-proof to the client, along
with the new sealed MHT root for the client to store. In the
above design, the whole process of producing the rate-proof
can be performed in a single call to the TEE, thus minimizing
the overhead of entering/exiting the TEE.
4.3.4 Reducing Client-Side Storage
The number of timestamps stored by CACTI grows as the
client visits more websites. However, in most use-cases, it is
unlikely that the server will request rate-proofs going back
beyond a certain point in time tP.
To reduce client-side storage requirements, we provide a
mechanism to prune a client’s timestamp list by merging all
timestamps prior to tP. Speciﬁcally, the server can include tP
in any rate-proof request, and upon receiving this, the client’s
TEE counts and records how many timestamps are older than
tP. The old timestamps and associated intermediate hash val-
ues can then be deleted from the database. In other words,
the system merges all timestamps prior to tP into a single
count value cP. The TEE stores tP and the count value in the
database outside the TEE and protects their integrity by in-
cluding both values in the list information that forms the MHT
leaf. Pruning can be done repeatedly: when a new pruning
request is received for tP(cid:48) > tP, CACTI fetches and veriﬁes all
timestamps up to tP(cid:48) and adds these to cP to create cP(cid:48). It then
replaces tP and cP with tP(cid:48) and cP(cid:48) respectively.
This pruning mechanism does not reduce security of CACTI.
If the server does request a rate-proof going back beyond
tP, CACTI will include the full count of timestamps stored
alongside tP. This is always greater than or equal to the actual
number of timestamps; thus, there is no incentive for the
server to abuse the pruning mechanism. Similarly, even if a
malicious client could trigger this pruning (i.e., assuming the
list is not associated to the server’s public key), there is no
incentive to do so because it would never decrease the number
of timestamps included in rate-proofs.
Since the global list CACTI-GLOBAL is used by all web-
sites, the client is always allowed to prune this list to reduce
storage requirements. CACTI blocks servers from pruning
CACTI-GLOBAL since this can be used as an attack vector
to inﬂate the client rate by compressing all rates into one
value – thus preventing use of CACTI on websites that utilize
CACTI-GLOBAL. Thus, we expect pruning of CACTI-GLOBAL
to be done automatically by the CACTI host application or
browser extension.
2568    30th USENIX Security Symposium
USENIX Association
𝐻0𝑖=𝐻(𝑡0𝑖)𝑡1𝑖𝑡𝑛+1𝑖𝐻𝑛+1𝑖=𝐻(𝐻𝑛𝑖,𝑡𝑛+1𝑖)……𝑡0𝑖𝐻1𝑖=𝐻(𝐻0𝑖,𝑡1𝑖)𝑀𝑎=𝐻(𝐿𝑎,𝐻𝑛+1𝑎)𝑀𝑒=𝐻(𝑀𝑎,𝑀𝑏)𝑀𝑏=𝐻(𝐿𝑏,𝐻𝑛+1𝑏)𝑀𝑐=𝐻(𝐿𝑐,𝐻𝑛+1𝑐)𝑀𝑑=⋯𝑀𝑓=𝐻(𝑀𝑐,𝑀𝑑)𝑅=𝐻(𝑀𝑒,𝑀𝑓)site per time period, and (5) Never ask. Advanced users can
also modify our extension or code their own extension to en-
force arbitrary policies for requesting user conﬁrmation. The
notiﬁcation is displayed using Chrome’s Notiﬁcation API [3].
5.2 Host Application
The host application running on the client is responsible for:
(1) creating the CACTI TEE, which we implement as an SGX
enclave, and exposing its ECALL API to the browser exten-
sion; (2) storing (and forwarding) timestamps and additional
integrity information for secure calculation of rate-proofs (to
the enclave); and (3) returning the enclave’s output to the
browser extension.
The host application is implemented in C and uses Chrome
Native Messaging [15] to communicate with the browser
extension. Since Chrome Native Messaging only supports
communication with JSON objects, the host application uses
a JSON parser to extract parameters to the API calls. We used
the JSMN JSON parser [12]. Moreover, the host application
implements the Chrome Native Messaging protocol [2] and
communicates with the browser extension using Standard I/O
(stdio), since this is currently the only means to communi-
cate between browser extensions and native applications.
The host application stores information in an SQLite
database. This database has two tables: LISTS stores the list
names and associated public keys, and TIMESTAMPS stores
all timestamps and intermediate values of the hash chains.
For each rate-proof request, the host application queries the
database and provides the data to the enclave.
Since the timestamps are stored unencrypted, we use ex-
isting features of the SQLite database to retrieve only the
necessary range of timestamps for a given list. Note that
since data integrity is maintained through other mechanisms
(i.e., hash chains and MHT), the mechanism used by the host
application to store this data does not affect the security of
the system. Alternative implementations could use different
database types and/or other data storage approaches. Instead
of hash chains and MHTs, it is possible to use a database
managed by the enclave, e.g., EnclaveDB [54]. However, this
would increase the amount of code running inside the enclave,
thus bloating the trusted code base (TCB).
5.3 SGX Enclave
We implemented the TEE as an SGX enclave using the Ope-
nEnclave SDK [16] v0.7.0. OpenEnclave was selected since
it aims to unify the programming model across different types
of TEEs. The process of requesting a rate-proof is imple-
mented as a single get_rate ECALL. For timestamps, we use
the UNIX time which denotes the number of seconds elapsed
since the UNIX Epoch (midnight 1/1/1970) and is represented
as a 4-byte signed integer. We use cryptographic functions
from the mbed TLS library [13] included in OpenEnclave.
Figure 6: Overview of CACTI client-side components.
5 Implementation
We now describe the implementation of the CACTI design pre-
sented in the previous section. We focus on proof-of-concept
implementations of: client-side browser extension, native host
application, and CACTI TEE, as shown in Figure 6. Finally,
we discuss how CACTI is integrated into websites.
5.1 Browser Extension
The browser extension serves as a bridge between the web
server and our host application. We implemented a proof-of-
concept browser extension for the Chrome browser (build
79.0.3945.130) [6]. Chrome extensions consist of two parts:
a content script and a background script.
• Content script: scans the visited web page for an
HTML div element with the id CACTI-div. If the page
contains this, the content script parses the parameters it
contains and sends them to the background script.
• Background script: we use Chrome Native Messaging
to launch the host application binary when the browser
is started and maintain an open port [20] to the host
application until the browser is closed. The background
script facilitates communication between the content
script and the host application.
User notiﬁcation. The browser extension is also responsi-
ble for notifying the user about requests to access CACTI.
Notiﬁcations can include information, such as server’s do-
main name, timestamp to be inserted, and threshold used to
generate the rate-proof. By default, the background script no-
tiﬁes the user whenever a server requests to use CACTI, and
waits for user conﬁrmation before proceeding. This prevents
malicious websites from abusing CACTI by adding multiple
timestamps without user permission (for possible attacks, see
Section 6.1). However, asking for user conﬁrmation for every
request could cause UI fatigue. Therefore, CACTI could allow
the user to choose from the following options: (1) Always ask
(the default), (2) Ask only upon ﬁrst visit to site, (3) Only ask
for untrusted sites, (4) Only ask for more than x requests per
USENIX Association
30th USENIX Security Symposium    2569
Web BrowserContent ScriptBackground ScriptHost ApplicationIntel SGX EnclaveSQLiteCACTIExtensionresource.htmlSpeciﬁcally, we use SHA-256 for all hashes and ECDSA for
all digital signatures. For EPID signatures, we use Intel EPID
SDK (v7.0.1) [5] with the performance-optimized version of
Intel Integrated Performance Primitives (IPP) Cryptography
library [9]. We use a formally-veriﬁed and platform-optimized
MHT implementation from EverCrypt [55]. As an optimiza-
tion, if the MHT is sufﬁciently small, we can cache fully
inside the enclave. When a request for a rate-proof is received,
the enclave recalculates the timestamp hash chain and then
directly compares the most recent value to the corresponding
leaf in the cached MHT, as described in Section 4.3.3.
OpenEnclave currently does not support SGX hardware
monotonic counters, so we could not include these in the
proof-of-concept implementation. However, a production im-