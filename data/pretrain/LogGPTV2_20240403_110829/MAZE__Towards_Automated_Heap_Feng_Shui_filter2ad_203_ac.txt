5.3.1 Heap Layout Simulation and Monitoring
Note that, heap allocators are too complicated to model
ofﬂine (e.g., via symbolic execution). The sizes of allocations
and deallocations in POC execution trace and heap prim-
itives are usually different. And the splitting and merging
mechanisms make it almost impossible to derive the distance
statically.
Instead, MAZE regards the allocator as a black box and
uses a shadow program to simulate the heap layout. The
simple shadow program has the same heap allocator as the
target application, and only performs heap operations, such
as malloc 0x20 and free [obj_id]. The MAZE analyzer
will instruct the shadow program to simulate a sequence of
heap operations, and then scan the shadow program’s heap
layout to infer the target application’s.
5.3.2 Target Distance Measurement
To evaluate the Target Distance, the analyzer will in-
struct the shadow program to perform standard ﬁll (or dig)
operations. Speciﬁcally, the shadow program will solely al-
locate (i.e., ﬁll) or allocate then deallocate (i.e., dig) objects
of proper sizes (equal to the size of O and P respectively), i.e.,
only ﬁll (or dig) holes with the same size of O (or P).
If d standard dig operations are needed, then the Target
Distance is +d. Otherwise, if d standard ﬁll operations are
needed, the distance is -d. In other words, Target Distance
means how many standard dig or ﬁll operations are needed to
create the expected memory layout.
5.3.3 Delta Distance Measurement
To measure the Delta Distance of a primitive, we will
evaluate the Target Distance before and after invoking this
primitive.
To simplify the evaluation, we will set the Target
Distance to 0 before invoking primitives, i.e., the target ob-
ject falls to the target hole in the shadow program. Then we
perform the same heap operations as the primitive in the
shadow program, and calculate the new Target Distance,
and denote it as the Delta Distance of this primitive. If the
Delta Distance is -d or +d, the primitive is therefore called
dig or ﬁll primitive.
It should be noted that a primitive is usually not a standard
ﬁll (or dig) operation, e.g. it may contain multiple allocations
(i.e. noises) or the size of heap operations are not equal to O
(or P). So Delta Distance means how many standard dig or
ﬁll operations the primitive is equivalent to. For example if the
Delta Distance is -n, it means the primitive can be equiva-
lent to n standard dig operations. But the primitve may either
dig n standard holes, or dig one hole which is big enough to
places n objects.
5.4 Linear Diophantine Equation Setup
Given the Delta Distance of each primitive ∆d1, ∆d2,
∆d3...∆dn, we will ﬁrst calculate the count of each primitive x1,
x2, x3...xn, in order to reduce the Target Distance from d to
zero. Therefore, we could generate a Linear Diophantine
Equation as follows.
(cid:26) ∆d1x1 + ∆d2x2 + ∆d3x3 + ... + ∆dnxn + d = 0
(1)
x1,x2,x3...xn ≥ 0
5.4.1 Existence of Solutions
Note that, if there are no dig or ﬁll primitives, only a small
number of heap layouts (i.e., d) could be satisﬁed. On the
other hand, this case is rare in practice. Therefore, we will
assume there are always at least one dig and one ﬁll primitive.
Following the well-known Bezout’s Lemma, we could then
infer the following theorem. The proof is listed in Appendix A.
Theorem 1. The aforementioned equation has a non-negative
solution (x1, x2, . . . , xn), if and only if (1) the greatest com-
mon divisor gcd(∆d1, ∆d2, ...∆dn) divides d, and (2) there are
at least one positive and one negative integer in (∆d1, ∆d2,
...∆dn), i.e., there are at least one dig and one ﬁll primitive.
USENIX Association
30th USENIX Security Symposium    1653
5.4.2 Linear Additivity of Primitives
Ideally, the Delta Distance of each primitives could be
linearly accumulated. However, it may be not true in practice,
causing the Linear Diophantine Equation nonsense.
Instead of analyzing the allocations and deallocations in
a primitive, MAZE only calculates how many standard dig
or ﬁll operations the primitive is equivalent to. But the sizes
of allocations or deallocations in primitives are not always
standard (i.e., not equal to the size of O and P). And due to the
splitting mechanism of allocators, the Delta Distance may
not be linearly accumulated.
After an in-depth analysis, we found three types of heap op-
eration mainly cause the nonlinear additivity. 1) Bad alloc:
its size is not equal to the target allocation O’s. 2) Bad hole:
its size is not equal to the target hole P’s. 3) Little alloc:
its size is less than half of P’s.
For example, if the primitive has a little alloc, P will
be cut into a smaller hole, and O can not be placed at P again,
which means the hole is ﬁlled. So the Delta Distance is
measured as +1. But if the primitive is added again, the
little alloc will be placed at the rest part of P, i.e. Delta
Distance is 0. Therefore this primitive does not have lin-
ear additivity. The detailed analysis can be found in Ap-
pendix B. We propose several methods, including grouping,
correcting and shifting, to address this problem.
Take the grouping technique as an example, it is used to
derive primitives which are linearly accumulated with them-
selves. In general, it puts multiple primitives in a group, which
becomes linearly accumulative with itself. If a dig (or ﬁll)
primitive is not self linear accumulated, its Delta Distance
will not be constant. Then MAZE keeps inserting this prim-
itive to a clean memory layout (i.e. Target Distance = 0).
Because memory holes or allocations increase periodically,
the Delta Distance of this primitive will also change pe-
riodically. Then MAZE puts all the primitives in one cycle
together and derives a new primitive, which has linear addi-
tivity. Details could be also found in Appendix B.
Then MAZE further ensures different primitives have linear
additivity. After grouping, MAZE will search for ﬁll primi-
tives that do not contain bad alloc or little alloc. These
ﬁll primitives are linearly accumulated with almost arbitrary
dig primitives. Then MAZE can generate a Multi-variable
Diophantine Equation to derive the expected memory lay-
out. MAZE also searches dig primitives which contain no
bad hole, and the following process is the same. If no such
primitives are available, MAZE will select a pair of ﬁll and dig
primitives, and utilize the grouping technique again. Then
MAZE can generate a Half Diophantine Equation with-
out Target Distance. If the Delta Distance of two prim-
itives are coprime, the Linear Diophantine Equation al-
ways has solutions. Then MAZE will keep inserting the ﬁll
(or dig) primitive to shift the layout state until O is placed at P.
More detail could be found in Appendix C.
Figure 5: Examples of two-object position constraint.
5.5 Primitive Timing
Adding a ﬁll primitive:
Given a solution of the Linear Diophantine Equation,
we will add those primitives to the original POC path, to
generate expected heap layout. However, different primitive
placements cause different heap layouts. Therefore, we should
determine where to put these primitives in the POC path.
Assuming the heap layout constraint is placing a target object
O at a target hole P, we will address this problem as follows.
In this case, as shown in Fig-
ure 3(b), we place the ﬁll primitive (the alloc hexagon) be-
fore the allocation of the target object (the alloc oval), to ﬁll
noise holes and drive the target object towards the target hole.
Adding a dig primitive: As shown in Figure 3(a), a dig
primitive usually consists of an allocation sub-primitive (the
alloc hexagon) and a deallocation sub-primitive (the free1
or free2 hexagon). To avoid the allocation sub-primitive tak-
ing the target hole, we will place it before the target hole
creator (the free oval). Furthermore, we will add extra al-
location primitives around this sub-primitive to isolate the
newly created object, to avoid heap chunk merging when this
new object is freed later. Then, we will place the deallocation
sub-primitive right before the target hole creator if the heap
allocator adopts a FIFO policy, or place it after the target hole
creator if a LIFO policy is adopted, to free the newly created
object (i.e., dig a higher priority hole) to accommodate the
noise allocation and leave the target hole to the target object.
5.6 Multi-Object Layout Constraint
A multi-object heap layout constraint could be reduced to
placing a group of objects to a group of holes. Ideally, we
could decouple the constraints and solve the constraint of
each object individually. However, the dig and ﬁll operations
for one object could inﬂuence another object’s placement,
making it infeasible to apply the divide and conquer algorithm.
Existing solutions all fail to address this challenge.
5.6.1 Motivation Example
Figure 5(a) shows an example two-object layout constraint,
where the allocations Malloc 3 and Malloc 4 should take
the positions Hole 1 and Hole 2 respectively. Assume the
heap allocator adopts a FIFO policy here. Figure 5(b)(c)(d)(e)
are four different POC program paths to manipulate. Here,
we will discuss the path in Figure 5(b) ﬁrst.
1654    30th USENIX Security Symposium
USENIX Association
(cid:48)(cid:68)(cid:79)(cid:79)(cid:82)(cid:70)(cid:3)(cid:23)(cid:48)(cid:68)(cid:79)(cid:79)(cid:82)(cid:70)(cid:3)(cid:22)(cid:43)(cid:82)(cid:79)(cid:72)(cid:3)(cid:20)(cid:43)(cid:82)(cid:79)(cid:72)(cid:3)(cid:21)(a) Memory Layout(d) Program Path 3caDigFill(e) Program Path 5cdabMalloc 4Malloc 3free Hole 1free Hole 2free Hole 1…free Hole 2(c) Program Path 2cdab(cid:48)(cid:68)(cid:79)(cid:79)(cid:82)(cid:70)(cid:3)(cid:22)free Hole 1Malloc 4free Hole 2(b) Program Path 1cdabMalloc 4free Hole 1(cid:48)(cid:68)(cid:79)(cid:79)(cid:82)(cid:70)(cid:3)(cid:22)free Hole 2Malloc 4(cid:48)(cid:68)(cid:79)(cid:79)(cid:82)(cid:70)(cid:3)(cid:22)dAccording to the aforementioned primitive timing policy,
dig primitives will be added before the creator of target hole (if
the allocator adopts the FIFO policy). However, dig primitives
instrumented before the creator of Hole 1 will change the
Target Distance of the object created by Malloc 4 to its
target Hole 2, but not the vice versa.
Similarly, ﬁll primitives will be added before the allocation
of target object. However, ﬁll primitives instrumented before
Malloc 3 will change the Target Distance of the object
created by Malloc 4 to its target hole, but not the vice versa.
Then, assume there are only one dig and one ﬁll primitive
in the target application, with Delta Distance ∆ddig and
∆d f ill respectively. Assume the Target Distance of hole 1
and 2 are d1 and d2 respectively. Assume (xa, xb, xc xd) prim-
itives will be instrumented at location (a,b,c,d) respectively.
Then, we could setup a system of Linear Diophantine
Equation as follows.
(cid:26)
∆ddigxa + ∆d f illxc + d1 = 0
∆ddig(xa + xb) + ∆d f ill(xc + xd) + d2 = 0
5.6.2 Equation for Multi-Object Layout Constraint
In general, for multi-object position constraint heap layout,
we will generate a system of Diophantine equations as below:
 ∆d1x1 + . . .∆dmxm + ∆da1xa1 + ...∆danxan + da = 0
∆d1x1 + . . .∆dmxm + ∆db1xb1 + ...∆dbnxbn + db = 0
...
In this system, each equation represents the constraint for one
object, where, dk (k=a, b, ...) are the Target Distance of
each object constraint. xk (k=1, 2, ..., m) are the count of in-
strumented primitives that can change the Target Distance
of multiple objects, thus are shared between multiple Dio-
phantine equations. xak, xbk ... (k=1, 2, ..., n) are the count of
instrumented primitives that only change Target Distance
of one object, thus are not shared between equations.
5.6.3 Equation Decoupling
In some cases, different objects are indeed independent,
and their equations could be decoupled from the system. As
shown in Figure 5(e), after placing the ﬁrst object Malloc 3 at
Hole 1, we could freely manipulate the object Malloc 4 and
place it to the Hole 2. In other words, they are independent
and their equations can be decoupled.
Decoupling the Diophantine equations will greatly sim-
plify the equations and reduce unknown side effects. We
also proposed several techniques to adjust the order of target
allocations and deallocations in program path, to decouple
equations in the system as many as possible. Details could be
found in the Appendix D.
5.7 Success Factors of Heap Manipulation
Heap layouts can not always be manipulated to the desired
state. Few studies have analyzed the factors that affect the suc-
cess rate of heap layout manipulation. Such studies can guide
heap layout manipulation, not only for automated solutions
but also for security experts.
5.7.1 One-Object Layout Manipulation
As shown in Theorem 1, a one-object layout constraint is
solvable if there are at least one dig and one ﬁll primitives, and
all primitives’ Delta Distance’ greatest common divisor
(gcd) divides the Target Distance of the object. Therefore,
if there are no dig or no ﬁll primitives, the success rate of
heap manipulation is low.
Further, the gcd of all primitives’ Delta Distance is also
a key factor, since it should divide the Target Distance.
Ideally, if the gcd is 1, then this equation is always solvable
(assuming both dig and ﬁll primitives exist).
Note that, if we have more primitives, it is more likely that
their gcd will be smaller and even reach to 1. Therefore, we
could infer that, the diversity of primitives is a key factor of the
success rate. To improve the diversity, MAZE tries to discover
as many primitive as possible, and analyze their semantics in
detail to ﬁgure out their heap operation size (since different
sizes yield primitives with different Delta Distance).
Existing techniques, such as SHRIKE, argued that the noise
(i.e., extra heap (de)allocation in primitives) is the factor
affecting the success rate. If the noise is 0, i.e., the Delta
Distance of a primitive is 1, then primitives’ gcd will be 1
and the equation is solvable. This conﬁrms the high success
rate of SHIKE and Gollum when the noise is 0. However, we
pointed out that, noise itself is not the key factor. Primitives
with many noises could still have a high success rate, as long
as their gcd is a proper value (e.g., 1).
5.7.2 Multi-Object Layout Manipulation
As explained in §5.6, a multi-object layout constraint equals
to a system of Diophantine equations. Each equation itself
should be solvable. Therefore, the diversity of primitives is
also an important factor for multi-object layout manipulation.
Moreover, all equations should be solvable together. If a
linear combination of these equations yields an equation with
only dig (or ﬁll) primitives, then this system of equations in
general has no solutions. This case is denoted as equation
entanglement, usually caused by the following two reasons.
Inconsistency between the hole creation order and the ob-
ject allocation order.
In the POC path, if two target objects
are allocated in a speciﬁc order, but their target holes are
created in an inconsistent order, then in general the layout
constraint has no solutions.
As shown in Figure 5(c), the object Malloc 4 is allocate
before Malloc 3, but its target hole hole 2 is created after
hole 1, this layout cannot be satisﬁed assuming the under-
lying heap allocator adopts a FIFO policy. The system of
Diophantine equations is as below:
(cid:26) ∆ddigxa + ∆d f illxc + ∆d f illxd + d1 = 0
∆ddigxa + ∆ddigxb + ∆d f illxc + d2 = 0
Any solution to the ﬁrst equation will ﬁx xa, xc and xd, and
transforms the second equation to the following form
∆ddigxb + d
= 0
(cid:48)
USENIX Association
30th USENIX Security Symposium    1655
Since there is no ﬁll primitive in this equation, so it usually has
no positive integer solutions, unless ∆ddig and d
has different
signedness and the latter is a multiple of the former.
(cid:48)
SHRIKE [8] demonstrated that the order of allocation rela-
tive to the memory corruption direction inﬂuenced the success
rate. It is a heuristic speculation, not the real reason.
Lack of instrumentation points.
In some cases, two target
holes are created in one primitive, as shown in Figure 5(d).
Then, there is only one instrumentation point available for
dig primitives, no matter what objects they are used for. As a
result, the system of Diophantine equations looks like:
(cid:26)
∆ddigxa + ∆d f illxc + d1 = 0
∆ddigxa + ∆d f illxc + ∆d f illxd + d2 = 0
Any solution to the ﬁrst equation will ﬁx xa and xc, and trans-
forms the second equation to the following form
∆d f illxd + d
= 0,
(cid:48)
which does not have positive solutions in many cases.