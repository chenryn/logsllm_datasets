 **TypeScript Version:**
1.8.10
## Problem
Sometimes we want to opt-out strict object literal check for a specific
property. Some types have large amount or even unlimited number of properties,
and we only want to model the most frequently used ones. However when we do
use an unmodeled property in an object literal, the compiler complains. E.g.:
    interface AttrBag {
      id?: string;
      style?: string;
      title?: string;
      'class'?: string;
    }
    function setAttrs(el: Element, attrs: AttrBag) {
      //...
    }
    setAttrs(document.createElement('a'), {
      title: 'foo', 
      href: 'bar', // error
      'data-x': 'y', //error
    });
## Existing solutions
Existing solutions have some limitations:
  * Add a type assertion for the object literal. This turns off object literal check entirely, which is undesirable, e.g.:
    setAttrs(document.createElement('a'), {
      titile: 'foo', // typo, but no error
      href: 'bar',
      'data-x': 'y',
    } as AttrBag);
  * Augument the interface for all used properties. This is heavy weight for infrequently used properties; and more importantly, the effect is usually global and can't be undone in a specific source file.
## Proposed solution: "additional property" modifier
If a property name in a object literal is modified with `+` ("additional
property" modifier), and it doesn't exist in the target type, compiler should
skip strict object literal check for this property, and treat this property as
optional. E.g.:
    setAttrs(document.createElement('a'), {
      title: 'foo', 
      +href: 'bar', // OK
      +'data-x': 'y', // OK
    });
    // The type of attrs is { title: string, href?: string, 'data-x'?: string }
    var attrs = {
      title: 'foo', 
      +href: 'bar',
      +'data-x': 'y',
    };
    attrs = {  // OK
      title: 'bar',
    };