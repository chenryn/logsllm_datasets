periodically to a specially-designated non-volatile entry
called NVClock. The periodicity of the persistence is a
TPM conﬁguration variable and cannot be longer than
222 milliseconds (˜70 minutes).
The combination of these properties ensures that the
TPM clock offers the following two guarantees: 1. the
clock advances while the TPM is powered, 2. the clock
never rolls backwards more than NVClock update peri-
odicity. The only time when the clock can roll backward
is when the TPM loses power right before persisting the
NVClock value. Upon restoring power, the clock will be
restored from NVClock and thus rolled back. The TPM
also provides a ﬂag that indicates the clock may have
been rolled back. This ﬂag is cleared when the TPM can
guarantee the current clock value could not have been
rolled back.
Given these guarantees, the TPM can measure time
only while the platform is powered up. For example, the
TPM can measure one hour of time as long as the plat-
form does not reboot or shutdown. However, the clock
can advance slower than wall clock but only due to a re-
boot. Even in this case time-bound authorizations are se-
cure because they do not survive reboots by construction:
in TPM 2.0, a platform reboot automatically expires all
time-bound authorizations.
8.1.2 Fate Sharing
The main difﬁculty in building a secure clock in the
fTPM is that persisting the clock to storage requires the
cooperation of the (untrusted) OS. The OS could refuse
to perform any writes that would update the clock. This
would make it possible to roll back the clock arbitrarily
just by simply rebooting the platform.
848  25th USENIX Security Symposium 
USENIX Association
8
The fate sharing model suggests that it is acceptable to
lose the clock semantics of the TPM as long as the TPM
itself becomes unusable. Armed with this principle, we
designed the fTPM’s secure clock to be the ﬁrst piece of
functionality the fTPM executes on all commands. The
fTPM refuses to provide any functionality until the clock
is persisted. Figure 2 illustrates how the fTPM updates
its clock when the TEE is scheduled to run.
The fTPM implementation does not guarantee that the
clock cannot be rolled back arbitrarily. For example,
an OS can always refuse to persist the fTPM’s clock
for a long time, and then reboot the platform effectively
rolling back the clock. However, fate sharing guarantees
that the fTPM services commands if and only if the clock
behaves according to the TPM speciﬁcation.
8.2 Dark Periods
The diversity of mobile device manufacturers raised an
additional challenge for implementing the fTPM. A mo-
bile device boot cycle starts by running ﬁrmware devel-
oped by one (of the many) hardware manufacturers, and
then boots a commodity OS. The fTPM must provide
functionality throughout the entire boot cycle. In partic-
ular, both Chrome and Windows devices issue TPM Un-
seal commands after the ﬁrmware ﬁnishes running, but
before the OS starts booting. These commands attempt
to unseal the decryption keys required for decrypting the
OS loader. At this point, the fTPM cannot rely on exter-
nal secure storage because the ﬁrmware has unloaded its
storage drivers while the OS has yet to load its own. We
refer to this point as a “dark period”.
TPM Unseal uses storage to record a failed unseal at-
tempt. After a small number of failed attempts, the TPM
enters lockout and refuses service for a period of time.
This mechanism rate-limits the number of attempts to
guess the unseal authorization (e.g., Windows lets users
enter a PIN number to unseal the OS loader using Bit-
Locker). The TPM maintains a counter of failed at-
tempts and requires persisting it each time the counter
increments. This eliminates the possibility of an attacker
brute-forcing the unseal authorization and rebooting the
platform without persisting the counter. Figures 3, 4,
and 5 illustrate three timelines: a TPM storing its failed
attempts counter to stable storage, a TPM without stable
storage being attacked with by a simple reboot, and the
fTPM solution to dark periods based on the dirty bit.
8.2.1 Modifying the Semantics of Failed Tries
We address the lack of storage during a dark period by
making a slight change in how the TPM 2.0 interprets
the failed tries counter. At platform boot time, before
entering any possible dark periods, the fTPM persists
Guess PIN
1st time
Guess PIN
2nd time
Guess PIN
3rd time
TPM
w/ storage
Failed 
Attempts++
Failed 
Attempts++
Failed 
Attempts++
Lockout
Period
Figure 3: TPM with storage (no dark period). TPM
enters lockout if adversary makes too many guess at-
tempts. This sequence of steps is secure.
Guess PIN
1st time
Guess PIN
2nd time
Guess PIN
3rd time
Reboot
Guess PIN
4th time
TPM
without
storage
Failed 
Attempts++
Failed 
Attempts++
Failed 
Attempts++
Dark period
entered here
Figure 4: TPM during a dark period (no stable stor-
age). Without storing the failed attempts counter, the ad-
versary can simply reboot and avoid TPM lockout. This
sequence of steps is insecure.
Guess PIN
1st time
fTPM
Guess PIN
2nd time
Guess PIN
3rd time
Reboot
Set Dirty
Bit
Failed 
Attempts++
Failed 
Attempts++
Failed 
Attempts++
Lockout
Period
Dark period
entered here
Figure 5: fTPM during a dark period (no stable stor-
age). fTPM sets the dirty bit before entering a dark pe-
riod. If reboot occurs during the dark period, fTPM en-
ters lockout automatically. This sequence of steps is se-
cure.
a dirty bit. If for any reason the fTPM is unable to persist
the dirty bit, it refuses to offer service. If the dark pe-
riod is entered and the unseal succeeds, the OS will start
booting successfully and load its storage drivers. Once
storage becomes available again, the dirty bit is cleared.
However, the dirty bit remains uncleared should the mo-
bile device reboot during a dark period.
In this case,
when the fTPM initializes and sees that the bit is dirty,
the fTPM cannot distinguish between a legitimate device
reboot (during a dark period) and an attack attempting
to rollback the failed tries counter. Conservatively, the
fTPM assumes it is under attack, the counter is imme-
diately incremented to the maximum number of failed
attempts, and the TPM enters lockout.
This change in semantics guarantees that an attack
against the counter remains ineffective. The trade-off is
that a legitimate device reboot during a dark period puts
the TPM in lockout. The TPM cannot unseal until the
lockout duration expires (typically several minutes).
Alerted to this problem, the TPM 2.0 designers have
added a form of the dirty bit to their speciﬁcation, called
USENIX Association  
25th USENIX Security Symposium  849
9
the non-orderly or unorderly bit (both terms appear in the
speciﬁcation). Unfortunately, they did not adopt the idea
of having a small number of tries before the TPM enters
lockout mode. Instead, the speciﬁcation dictates that the
TPM enters lockout as soon as a failed unsealed attempt
cannot be recorded to storage. Such a solution impacts
usability because it locks the TPM as soon as the user
has entered an incorrect PIN or password.
9 Providing Storage to Secure Services
The combination of encryption, the RPMB, and hard-
ware fuses is sufﬁcient to build trusted storage for the
TEE. Upon booting the ﬁrst time, TEE generates a sym-
metric RPMB key and programs it into the RPMB con-
troller. The RPMB key is derived from existing keys
available on the platform. In particular, we construct a
secure storage key (SSK) that is unique to the device and
derived as following:
SSK := KDF(HF,DK,UUID)
(1)
where KDF is a one-way key derivation function, HF
is the value read from the hardware fuses, DK is a de-
vice key available to both secure and normal worlds, and
UUID is the device’s unique identiﬁer.
The SSK is used for authenticated reads and writes of
all TEE’s persistent state (including the fTPM’s state) to
the device’s ﬂash memory. Before being persisted, the
state is encrypted with a key available to TrustZone only.
Encryption ensures that all fTPM’s state remains conﬁ-
dential and integrity protected. The RPMB’s authenti-
cated reads and writes ensure that fTPM’s state is also
resilient against replay attacks.
9.1 Atomic Updates
TEE implements atomic updates to the RPMB partition.
Atomic updates are necessary for fTPM commands that
require multiple separate write operations. If these writes
are not executed atomically, TEE’s persistent state could
become inconsistent upon a failure that leaves the secure
world unable to read its state.
The persisted state of the fTPM consists of a sequence
of blocks. TEE stores two copies of each block: one rep-
resenting the committed version of the state block and
one its shadow (or uncommitted) version. Each block id
X has a corresponding block whose id is X + N, where
N is the size of fTPM’s state. The TEE also stores a bit
vector in its ﬁrst RPMB block. Each bit in this vector in-
dicates which block is committed: if the i bit is 0 then the
ith block committed id is X, otherwise is X + N. In this
way, all pending writes to shadow blocks are committed
using a single atomic write operation of the bit vector.
0 1 0 0 …
Bit Vector
1st copy of blocks
…
2nd copy of blocks
…
Figure 6: RMPB blocks. Bit vector mechanism used for
atomic updates.
Allocating the ﬁrst RPMB entry to the bit vector lim-
its the size of the RPMB partition to 256KB (the cur-
rent eMMC speciﬁcation limits the size of a block to 256
bytes). If that size is insufﬁcient, an extra layer of indi-
rection can extend the bit vector mechanism to support
up to 512MB (256∗ 8∗ 256∗ 8 = 1,048,576 blocks).
Figure 6 illustrates the bit vector mechanism for
atomic updates. On the left, the bit vector shows which
block is committed (bit value 0) and which block is
shadow (bit value 1). The committed blocks are shown
in solid color.
In the future, we plan to improve the fTPM’s perfor-
mance by offering transactions to fTPM commands. All
writes in a transaction are cached in memory and per-
sisted only upon commit. The commit operation ﬁrst up-
dates the shadow version of changed blocks, and then up-
dates the metadata in a single atomic operation to make
shadow version for updated blocks the committed ver-
sion. A command that updates secure state must either
call commit or abort before returning. Abort is called
implicitly if commit fails, where shadow copy is rolled
back to the last committed version, and an error code is
returned. In this scenario, the command must implement
rollback of any in-memory data structure by itself.
10 Performance Evaluation
This paper answers two important questions on perfor-
mance2:
1. What is the overhead of long-running fTPM com-
mands such as create RSA keys? The goal is to shed light
on the fTPM implementation’s performance when seek-
ing prime numbers for RSA keys.
2. What is the performance overhead of typical fTPM
commands, and how does it compare to the performance
of a discrete TPM chip? TPM chips have notoriously
slow microcontrollers [33].
In contrast, fTPM com-
mands execute on full-ﬂedged ARM cores.
10.1 Methodology
To answer these questions, we instrumented four off-the-
shelf commodity mobile devices equipped with fTPMs
and three machines equipped with discrete TPMs. We
keep these devices’ identities conﬁdential, and refer to
2The fTPM technical report presents additional results of the per-
formance evaluation [44].
850  25th USENIX Security Symposium 
USENIX Association
10
fTPM Device
Device # fTPM1
Device # fTPM2
Device # fTPM3
Device # fTPM4
Processor Type
1.2 GHz Cortex-A7
1.3 GHz Cortex-A9
2 GHz Cortex-A57
2.2 GHz Cortex-A57
Table 1: Description of fTPM-equipped devices used
the evaluation.
them as fTPM1 through fTPM4, and dTPM1 through
dTPM3. All mobile devices are commercially available
both in USA and the rest of the world and can be found in
the shops of most cellular carriers. Similarly, the discrete
TPM 2.0 chips are commercially available. Table 1 de-
scribes the characteristics of the mobile ARM SoC pro-
cessors present in the fTPM-equipped devices. The only
modiﬁcations made to these devices’ software is a form
of device unlock that lets us load our own test harness
and gather the measurement results. These modiﬁcations
do not interfere with the performance of the fTPM run-
ning on the tablet.
Details of TPM 2.0 Commands. To answer the ques-
tions raised by our performance evaluation, we created
a benchmark suite in which we perform various TPM
commands and measure their duration. We were able
to use timers with sub-millisecond granularity for all our
measurements, except for device fTPM2. Unfortunately,
device fTPM2 only exposes a timer with a 15-ms gran-
ularity to our benchmark suite, and we were not able to
unlock its ﬁrmware to bypass this limitation.
Each benchmark test was run ten times in a row. Al-
though this section presents a series of graphs that an-
swer our performance evaluation questions, an interested
reader can ﬁnd all the data gathered in our benchmarks
in the fTPM technical report [44].
• Create RSA keys: This TPM command creates an
RSA key pair. When this command is issued, a TPM
searches for prime numbers, creates the private and pub-
lic key portions, encrypts the private portion with a root
key, and returns both portions to the caller. We used
2048-bit RSA keys in all our experiments. We chose
2048-bit keys because they are the smallest key size still
considered secure (1024-bit keys are considered insecure
and their use has been deprecated in most systems).
• Seal and unseal: The TPM Seal command takes in a
byte array, attaches a policy (such as a set of Platform
Conﬁguration Register (PCR) values), encrypts with its
own storage key, and returns it to the caller. The TPM
Unseal command takes in an encrypted blob, checks the
policy, and decrypts the blob if the policy is satisﬁed by
the TPM state (e.g., the PCR values are the same as at
seal time). We used a ten-byte input array to Seal, and
we set an empty policy.
n
o
i
t
a
r
u
D
d
n
a
m
m
o
C
)
s
d
n
o
c
e
s
(
25
20
15
10
5
0
fTPM1 fTPM2 fTPM3 fTPM4 dTPM1 dTPM2 dTPM3
Figure 7: Latency of create RSA-2048 keys on various
fTPM and dTPM platforms.
• Sign and verify: These TPM commands correspond
to RSA sign and verify. We used a 2048-bit RSA key for
RSA operations and SHA-256 for integrity protection.
• Encryption and decryption: These TPM commands
correspond to RSA encryption and decryption. We used
a 2048-bit RSA key for RSA operations, OAEP for
padding, and SHA-256 for integrity protection.
• Load: This TPM command loads a previously-
created RSA key into the TPM. This allows subsequent
command, such as signing and encryption, to use the
preloaded key. We used a 2048-bit RSA key in our TPM
Load experiments.
10.2 Overhead of RSA Keys Creation
Figure 7 shows the latency of a TPM create RSA-2048
keys command across all our seven devices. As expected,
creating RSA keys is a lengthy command taking several
seconds on all platforms. These long latencies justify
our choice of using cooperative checkpointing (see Sec-
tion 7) in the design of the fTPM to avoid leaving the OS
suspended for several seconds at a time.
Second, the performance of creating keys can be quite
fTPM2 takes a much longer
different across devices.
time than all other devices equipped with an fTPM. This
is primarily due to the variations in the ﬁrmware perfor-
mance across these devices – some manufacturers spend
more time optimizing the ﬁrmware running on their plat-
forms than others. Even more surprisingly, the discrete
TPM 2.0 chips also have very different performance