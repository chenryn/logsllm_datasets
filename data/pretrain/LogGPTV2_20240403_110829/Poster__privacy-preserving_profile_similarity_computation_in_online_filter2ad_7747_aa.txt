title:Poster: privacy-preserving profile similarity computation in online
social networks
author:Arjan Jeckmans and
Qiang Tang and
Pieter H. Hartel
POSTER: Privacy-Preser ving Proﬁle Similarity
(cid:38)(cid:82)(cid:80)(cid:83)(cid:88)(cid:87)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)in(cid:3)(cid:50)(cid:81)(cid:79)(cid:76)(cid:81)(cid:72)(cid:3)(cid:54)(cid:82)(cid:70)(cid:76)(cid:68)(cid:79)(cid:3)(cid:49)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)(cid:86)
Arjan Jeckmans and Qiang Tang and Pieter Hartel
{a.j.p.jeckmans,q.tang,pieter.hartel}@utwente.nl
DIES, Faculty of EEMCS
University of Twente, the Netherlands
ABSTRACT
Currently, none of the existing online social networks (OSNs)
enables its users to make new friends without revealing their
private information. This leaves the users in a vulnerable
position when searching for new friends. We propose a solu-
tion which enables a user to compute her proﬁle similarity
with another user in a privacy-preserving way. Our solution
is designed for a realistic OSN environment, where a pair of
users is unlikely to be online at the same time.
Categories and Subject Descriptors
C.2.4 [Computer-Communication Networks]: Distributed
Systems— Distributed applications; E.3 [Data Encryption]:
Public key cryptosystems
General Terms
Algorithms, Human Factors, Security
Keywords
Online social network, matching, privacy
1.
INTRODUCTION
Online social networks (OSNs) provide an important plat-
form for users to make new friends and share their infor-
mation. In reality, OSN users do not fully trust the OSN
and users other than their friends, and do not like to dis-
close their private information to these parties. On the other
hand, some OSNs may not want the legal responsibility for
storing, processing, and distributing the users’ private data.
Consider a Facebook user, Alice, who likes the fan page of
artist X. On that page, she ﬁnds that Bob also likes artist X.
Alice thinks Bob might make a nice friend. To learn more
about Bob, she visits his proﬁle. However, Bob’s proﬁle is
private and Alice learns nothing more about Bob. At this
point, Alice has three options:
1. Give up learning more about Bob;
2. Invite Bob to become friends and hope that Bob will
make a good friend;
3. Send Bob a private message and wait.
Copyright is held by the author/owner(s).
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
ACM 978-1-4503-0948-6/11/10.
If Alice follows the ﬁrst option, she may miss a chance to
make a new friend. If Alice follows the second option, her
private information may be leaked if she ﬁnds out that Bob
is not a suitable friend. Another problem with this option is
that it is diﬃcult or even impossible to revoke friendship in
OSNs. If Alice follows the third option, she may encounter
a deadlock when Bob is also cautious about his privacy. In
this case, both Alice and Bob do not want to disclose their
information to a stranger.
In this paper, we outline a solution, which allows two users
to test their proﬁle similarity in OSNs. The solution lever-
ages the chain of friends that exists between two users to
preserve their privacy. Our solution captures the following
realistic characteristics of existing OSNs:
• A friendship between two users is more likely when
their proﬁle similarity is above a certain threshold,
where the proﬁle similarity is deﬁned to be the number
of common attributes.
• Due to the web-based nature, a (randomly chosen) pair
of users is unlikely to be online at the same time [1].
• Users tend to make friends with other users that are
connected to them through a chain of friends.
The rest of the poster is organized as follows. In Section
2, we describe our solution and the achieved properties. In
Section 3, we describe the related work, and conclude the
poster in Section 4.
2. DESCRIPTION OF THE SOLUTION
Ideally, in order to protect users’ privacy, we would expect
a fully trusted third party (TTP) which can access users’ at-
tributes and compute the proﬁle similarity for them. How-
ever, such a TTP does not exist in reality and it is always
preferable to avoid employing such an entity if possible. For
an OSN, the current situation is that it has full access to
its users’ proﬁle attributes, but we believe that this is un-
desirable for the users although they do not have a good
choice today (they can provide fake attributes though). To
solve this problem, our idea is to realize the functionality of
a TTP into using two sets of semi-trusted parties: one is the
OSN (or an application in OSN), and the other is a chain of
friends. As a result, the OSN cannot access users’ attributes
anymore.
Our solution consists of two phases: a set up phase where
every user generates its own parameters, and a proﬁle simi-
larity computation phase where an online user can compute
793her similarity with another online/oﬄine user. The solution
works when there is a chain of friendship links between these
two users, and we generally assume the friendship is unilit-
eral. If X regards Y as a friend, then it means X allows Y
to see the plaintexts encrypted under his public key. Note
that, if desired, it can be trivially extended to a bilateral
setting.
Due to the space limit, we describe the solution for a sim-
ple setting, where there are four users. Suppose that Alice
wants to compute her proﬁle similarity with Bob who can
be oﬄine. We assume that Bob regards Charlie as a friend,
Charlie regards Dave as a friend, and Dave regards Alice as
a friend. The solution is brieﬂy summarized in Figure 1
and detailed below.
3.[Qb(x)]P Kd
2.[Qb(x)]P Kc
Dave
Charlie
Bob
4.[Qb(x)]P Ka
1.Rb(x), [Qb(x)]P Kb
5.[Rb(x)]EKs
Alice
6.[[Fb(ha,i)]EKs ]R, [−y(cid:2)
OSN
i]EKa (1≤i≤na)
7.Permuted Ri (1≤i≤na)
Figure 1: Solution Overview
An extension of this solution to more complex setting is
straightforward, we skip the details in this poster.
2.1 Set Up Phase
In this phase, the users and the OSN agree on a group G
of prime order p and a generator g for ElGamal scheme [2].
Let H0 : {0, 1}∗ → Zp be a cryptographic hash function.
Alice, Bob, Charlie, Dave generate their ElGamal pub-
lic/private key pairs (P Ka = gxa , SKa = xa), (P Kb =
gxb , SKb = xb), (P Kc = gxc, SKc = xc), and (P Kd =
gxd, SKd = xd) respectively, where xa, xb, xc, xd are ran-
domly chosen from Zp. Bob, Charlie and Dave compute
their proxy re-encryption keys RKb→c, RKc→d, and RKd→a
respectively, where
RKb→c = (H0(ub) − xb, g
RKc→d = (H0(uc) − xc, g
RKd→a = (H0(ud) − xd, g
vb , g
vc, g
vd , g
vb·xc · ub),
vc·xd · uc),
vd·xa · ud),
and ub, uc, ud are randomly chosen from G and vb, vc, vd are
randomly chosen from Zp.
Note the fact that, instead of directly comparing their
attributes, users can ﬁrstly pre-process their attributes by
hashing them using a cryptographic hash function. Let the
hash values fall into a ﬁnite ﬁeld F. Let H1 : {0, 1}∗ → F
be a cryptographic hash function. Suppose that Alice has
na attributes and the hashed values are ha,i (1 ≤ i ≤ na),
and Bob has nb attributes and the hashed values are hb,i
(1 ≤ i ≤ nb). Bob generates polynomials Fb(x), Qb(x), and
Rb(x) as follows:
nb(cid:2)
(x − hb,i), Fb(x) = Qb(x) + Rb(x),
Fb(x) =
i=1
where the coeﬃcients of Rb(x) are randomly chosen from
F. Let the coeﬃcients of Qb(x) be qj (0 ≤ j ≤ nb), then
we denote the encryption of Qb(x) as [Qb(x)]P Kb , which is
deﬁned to be
rj , g
(g
rj·xb · tj, H1(tj) + qj )
for 0 ≤ j ≤ nb where rj, tj are randomly chosen from Zq.
The users store the following values at the OSN: P Ka,
P Kb, P Kc, P Kd, RKb→c and RKc→d, RKd→a, Rb(x), and
[Qb(x)]P Kb . They keep their private keys outside of the
OSN.
2.2 Proﬁle Similarity Computation Phase
If Alice wants to compute her proﬁle similarity with Bob,
the protocol proceeds in two stages.
Stage 1) Distribution of Qb(x) from Bob to Alice
For every 0 ≤ j ≤ nb, the OSN computes [Qb(x)]P Ka by
following the following three steps (steps 2-4 in Figure 1):
1. Re-encrypt [Qb(x)]P Kb using RKb→c to get [Qb(x)]P Kc,
which is
rj , g
(g
rj·H0(ub) · tj, H1(tj) + qj ; g
vb·xc · ub).
2. Re-encrypt [Qb(x)]P Kc to get [Qb(x)]P Kd , which is
vb·H0(uc) · ub;
vb , g
vb , g
rj , g
(g
rj·H0(ub) · tj, H1(tj ) + qj ; g
vc·xd · uc).