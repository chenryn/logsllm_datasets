Weaponize GhostWriting Injection 
Code injection series part 5 
Prerequisites: This paper requires some knowledge about Windows system programming. Also, it is 
mandatory to be familiar with concepts presented in Code injection series part 1. 
License : Copyright Emeric Nasi , some rights reserved 
This work is licensed under a Creative Commons Attribution 4.0 International License. 
1. Introduction 
Ghost writing is a technique which consists into injecting and running code in a remote process by 
manipulating the register states of one of its thread. This technique allows us to use code injection 
without opening the process or calling any remote memory allocation or writing functions. 
I haven’t found an implementation satisfying for 64bit code and generally the few existing 
implementation only describe limited shellcode injection so I decided to implement my own version 
and write something about it. 
Some tools I use to work on code injection: 
• 
Microsoft Visual Studio  
• 
Sysinternal Process Explorer 
• 
Sysinternal DebugView 
• 
X64dbg 
Contact information: 
• 
emeric.nasi[at]sevagas.com  
• 
https://twitter.com/EmericNasi 
• 
https://blog.sevagas.com/?-Code-injection-series-  
• 
https://github.com/sevagas 
Note: I am not a developer, so do not hesitate to send me source code improvement suggestion. I am 
also not a native English speaker. 
1 
2. Table of content 
1. 
Introduction ..................................................................................................................................... 0 
2. 
Table of content .............................................................................................................................. 1 
3. 
Ghost Writing .................................................................................................................................. 2 
3.1. 
About ghost writing ................................................................................................................. 2 
3.2. 
Context Manipulation.............................................................................................................. 2 
4. 
Implementation ............................................................................................................................... 3 
4.1. 
Gadgets we need ..................................................................................................................... 3 
4.1.1. 
Infinite loop gadget ......................................................................................................... 3 
4.1.2. 
Write anywhere gadget ................................................................................................... 3 
4.2. 
Help structure .......................................................................................................................... 4 
4.3. 
Higher level Functions ............................................................................................................. 4 
4.3.1. 
Init thread context manipulation .................................................................................... 4 
4.3.2. 
End thread context manipulation.................................................................................... 5 
4.3.3. 
Remote write anywhere .................................................................................................. 5 
4.3.4. 
Remote execution of Windows API ................................................................................. 5 
4.3.5. 
Integrate into Code injection........................................................................................... 7 
5. 
Example ........................................................................................................................................... 9 
5.1. 
Use ghost writing on Firefox ................................................................................................... 9 
6. 
Going further ................................................................................................................................. 10 
6.1. 
Build and improve ................................................................................................................. 10 
6.2. 
Further readings about code injection .................................................................................. 10 
2 
3. Ghost Writing 
3.1. About ghost writing 
The idea behind ghost writing is to manipulate a remote thread state and context 
in a target process to write and execute arbitrary code.  
The first public mention of Ghost Writing was in 2007 on txipi blog “A paradox: 
Writing to another process without openning it nor actually writing to it”. 
 In his paper he explains how to perform remote byte injection and code execution 
without using process manipulation API (such as OpenProcess, WriteProcessMemory…) or common 
remote code injection API (such as VirtualAllocEx, CreateRemoteThreadEx, …).  
He also proposes an PoC implementation for 32bit process and shellcode injection.  
I wanted to go further and implement code working for 64bit process, also I wanted to make it 
compatible with full PE injection as described in Code injection series part 1. 
Note: Ghost Writing relies on low level operations, writing directly into the stack and manipulating 
registers. Explaining all these concepts are outside the scope of this document, however here are 
some useful resource: 
• 
Windows x64 Architecture 
• 
Windows x64 calling convention 
• 
Return oriented programming (ROP) 
3.2. Context Manipulation 
Ghost writing is all about context manipulation. The meaning of “Context” here is the state of all 
registers in a thread (which means that of course Ghost writing is really processor architecture 
dependent). 
Ghost writing relies on context manipulation on the remote thread. For that we rely mainly on: 
• 
GetThreadContext 
• 
SetThreadContext 
• 
SuspendThread 
• 
ResumeThread 
Here are the basic high-level steps to follow if we want to execute code inside a remote thread by 
manipulating its context: 
• 
Get a handle to a remote thread 
• 
Suspend the remote thread 
• 
Modify registers and stack to point to code we want to execute in the remote process memory 
and pass parameters 
• 
Resume the thread 
Note: The code we want to execute has to be already present in the process memory. It can be a full 
dll function, a simple ROP gadget, or some code that was previously injected in the process memory. 
3 
The big issue is that we want the injection to be stable. We do not want the target process to crash. 
This means we have to prevent the remote thread to execute junk code after our useful code, and we 
want to restore the original state of the thread or exit the thread in a clean way to avoid crashing the 
target process. 
To restore the thread state its easy, we can just save the initial thread state with GetThreadContext. 
To control the execution is more difficult. In addition to registers we have to put values on the stack 
(even on 64bit process where 4 first param are passed on registers).  
To avoid crashes we need to have the thread wait in a safe place between each context manipulation. 
For that we need to put an infinite loop gadget address in the stack so the target thread can fall back 
to it when we return from code execution. 
So what happens after we resume thread: 
• 
Remote code is executed until RET instruction is reached 
• 
When RET is called, RIP is loaded with infinite loop address 
• 
Code is in infinite loop, waiting for thread to be suspended again 
Note: Ghost writing “code” has some similarities with writing ROP payloads when exploiting a 
vulnerability, except we avoid to stack all the calls on the stack by using an infinite loop gadget. 
4. Implementation 
Here is an overall description about how I implemented an easy to use Ghost Writing “framework”. 
The full code for the thread related functions described below is available at: 
https://github.com/sevagas/MagicLib (Look at MagicThread.h and MagicThread.cpp and remember I 
am not a developper…). 
4.1. Gadgets we need 
4.1.1. Infinite loop gadget 
We need to find a place where the code returns and not crash after each function or gadget which are 
called. For that we use a JMP 0 instruction that can be found in ntdll.dll. 
Here is the declaration of the corresponding Opcode 
BYTE* JMP_0_OPCODE = (BYTE*)"\xeb\xfe"; 
4.1.2. Write anywhere gadget 
We need a way to write a byte at a chosen memory address in the remote process., for that we will be 
looking for a write anywhere gadget in ntdll.dll 
The simplest write anywhere gadgets have the form: mov [registerA], registerB ; ret 
I used ROPgadget to find such an instruction in ntdll.dll 
python ROPgadget.py --binary C:\Windows\System32\ntdll.dll 
0x000000018005de0a : mov qword ptr [rdx], rax ; ret 
4 
The gadget allows us to write the content of rax to the address pointed by rdx and then return. Here 
is the corresponding opcode: 
BYTE* MOV_PTRRDX_RAX_RET = (BYTE*)"\x48\x89\x02\xC3"; 
4.2. Help structure 
To help with the manipulation of the various gadget, registers, and handle I defined the structure 
below. 
/* Structure useful to manipulate thread context */ 
typedef struct _REMOTE_THREAD_CONTEXT_MANIPULATION { 
HANDLE hProcess; 
HANDLE hThread; 
CONTEXT savedThreadContext; 
BOOL isThreadSuspended; 
ADDRESS_VALUE writeGadgetAddr; 
ADDRESS_VALUE jmp0GadgetAddr; 
ADDRESS_VALUE jmp0StackAddr; 
BOOL createNewThread; 
}REMOTE_THREAD_CONTEXT_MANIPULATION, * PREMOTE_THREAD_CONTEXT_MANIPULATION; 
Explanations: 
• 
hProcess is used to store the target process handle.  
• 
hThread is used to store the target thread handle  
• 
savedThreadContext is used to store the context of the remote thread (see definition of 
64bit context structure here). 
• 
isThreadSuspended is to follow if the remote thread is suspended or not 
• 
writeGadgetAddr is the memory address in target process where Write anywhere gadget is 
• 
jmp0GadgetAddr is the memory address of Jump 0 gadget 
• 
jmp0StackAddr is the stack address where we store jmp0GadgetAddr  
4.3. Higher level Functions 
On top of the two gadgets we can build higher level function and even call real functions in remote 
process modules. As long as we ensure the function always returns to our infinite loop gadget. 
4.3.1. Init thread context manipulation 
This first method does some initialization stuff such as looking for gadgets, prepare 
REMOTE_THREAD_CONTEXT_MANIPULATION structure, create new thread or hijack an existing one, etc. 
Here is the method signature: 
/* 
Initialization fonction required before calling WriteToRemoteThread and CallRemoteProc 
If createNewThread is true, this will call createRemoteThread in suspended state to 
generate the thread we use to manipulate context 
return TRUE if function succeeds 
*/ 
BOOL MagicThread::InitThreadContextManipulation(HANDLE hProcess, 
PREMOTE_THREAD_CONTEXT_MANIPULATION rtManipulation, BOOL createNewThread) 
5 
One noticeable thing is that this function prepares the stack and use the write anywhere gadget to 
store jmp0GadgetAddr on the stack: 
rtManipulation->jmp0StackAddr = rtManipulation->savedThreadContext.Rsp-0x8000; // leave 
some space for thread stack 
MagicThread::WriteToRemoteThread(rtManipulation, rtManipulation->jmp0StackAddr, 