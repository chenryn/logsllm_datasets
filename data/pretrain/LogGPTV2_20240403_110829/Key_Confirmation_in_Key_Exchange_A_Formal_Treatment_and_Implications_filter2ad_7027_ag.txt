property.
has non-negligible probabil-
ity for Pred equal to the full (S,C)-key conﬁrmation pred-
icate, i.e., the predicate evaluates to false in the ﬁnal state.
(cid:3)
Π,A(n) = 1
Assume Pr
ExpPred
(cid:2)
466466
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
Then there exists a server session (cid:2) that has accepted and
(cid:2).pid /∈ Corr ∪ {∗}, but there is no (partnered) client session
that has accepted with the same key as (cid:2). Since we can always
abort the adversary against key conﬁrmation if some server
session without partner accepts, we can assume that there
is no further oracle query after (cid:2) accepts, and that the key
of (cid:2) is therefore not revealed and that both (cid:2).pid and (cid:2).id
are not corrupted (note, if (cid:2).id would have been a corrupt
server session before, it would have not accepted anymore).
Furthermore, (cid:2) has no partnered session since such a session
would have the same key because of Match security (except
with negligible probability).
(cid:3), key
c
MAC, key
To proceed, we guess the server session (cid:2) for which full key
conﬁrmation is violated by picking its index randomly among
the at most ns many sessions. In the ﬁrst game hop, we use key
secrecy of the original protocol Π to replace the key key for
(cid:2) by a random key. Since there is no partnered session, key is
not required by any other session. The simulation is analogous
to the proof of key secrecy for ΠMAC. In the second game
s
hop, we apply KDF security to make (key
MAC)
random for (cid:2). Finally, we construct a MAC forger B as follows.
The forger B black-box simulates A, guesses (cid:2), and returns the
MAC τ c received in session (cid:2) together with the “message” sid
as a forgery. The winning probability is non-negligible since
the MAC must be valid for (cid:2) in order to accept, and the random
c
MAC is used for the ﬁrst time to verify the validity of
key key
the MAC.
Next, we show that ΠMAC provides almost-full (C,S)-key
conﬁrmation. For this we ﬁrst note that key-conﬁrmation iden-
tiﬁer binding holds trivially, since the extended protocol sets
(cid:3) = sid such that partnered sessions with the same
kcid
(cid:3)
session identiﬁer sid
also have identical key-conﬁrmation
identiﬁers. Furthermore, Match security of the underlying
(cid:3) = sid also
protocol implies that sessions with the same kcid
hold the same key if they eventually accept. Hence, predicate
KCIDbind is satisﬁed, except with negligible probability.
(cid:3) = sid
ExpPred
Assume next that Pr
has non-negligible
probability for Pred equal to the almost-full (C,S)-key con-
ﬁrmation predicate, i.e., the predicate evaluates to false in the
ﬁnal state. Then there exists a client session (cid:2) that has accepted
and (cid:2).pid /∈ Corr ∪ {∗}, but there
with session identiﬁer sid
is no server session that has set its key-conﬁrmation identiﬁer
(cid:3)
to sid
, or if it has, then it has accepted a different key.
(cid:3)
(cid:3)
To proceed, we guess the client session (cid:2) for which almost-
full key conﬁrmation as above is violated. In the ﬁrst game
hop, we use key secrecy of the original protocol Π to replace
the key key for (cid:2) by a random key. Since there is no partnered
(cid:3) = sid and
(completed) session in ΠMAC with the same kcid
, key is not required by any other session.
the same key key
The simulation is now analogous to the proof of key secrecy
for ΠMAC. In the second game hop, we once more apply KDF
s
MAC) random for (cid:2). Finally,
security to make (key
we construct a MAC forger B as follows. The forger B black-
box simulates A, guesses (cid:2), and returns the MAC τ s and sid
as a forgery. The winning probability is non-negligible since
c
MAC, key
(cid:3), key
(cid:2)
(cid:3)
Π,A(n) = 1
the MAC must be valid for (cid:2) to accept, and the random key
s
MAC is used for the ﬁrst time to check the validity of the
key
the MAC.
We note that
there are several variations to the above
instantiation which, if done properly, can all be shown to be
secure:
• One variation, followed, e.g., by NIST [2], is to generate
only a single MAC key and let the client and server
prepend a distinct key word in front of the “message” sid
for the computation, e.g., “client”||sid and “server”||sid.
Here the MAC would require to be one-time unforgeable,
though.
• Another variant—which can be combined with the pre-
vious approach—is to use strongly unforgeable MACs
(where it is also infeasible to create a new MAC for
the same message), e.g., deterministic MACs where ver-
(cid:3) =
iﬁcation is done via re-computation, and deﬁne sid
(sid, τ s, τ c).
• A third variant is to include the session identiﬁer sid
in the key derivation, KDF(key, sid). For public session
identiﬁers and strong key derivation functions this cannot
harm the security. On the other hand, the basic security
properties of the underlying protocol Π already tie session
identiﬁers to session keys strongly, such that further
linking through KDF seems unnecessary.
• If the session identiﬁer is already strongly tied to the
session keys, it is also possible to remove sid from the
input of the MACs. This variant together with a single
MAC key and “client”/“server” labels is used in HMQV-
C [23], the 3-message variant of the HMQV protocol.
VI. CONCLUSION
Key conﬁrmation is a widely targeted functional property
in cryptographic key exchange protocols, but has received
only very limited formal treatment so far. Our work provides
the ﬁrst extensive formalization of key conﬁrmation through
according security deﬁnitions in the game-based modeling
tradition. A particular strength of our notions for key con-
ﬁrmation is their deﬁnitional modularity: they can easily be
plugged together with more traditional notions like key secrecy
to obtain combined security guarantees.
On the practical side, our analysis of the current TLS 1.3
draft-10 full handshake validates that it achieves the design
goal of providing key conﬁrmation. As a potentially surprising
technical result, key conﬁrmation in the full handshake how-
ever does not require the exchange Finished dedicated to this
purpose in the speciﬁcation, but can readily be established
from the exchanged CertificateVerify messages. While
this result cannot serve as an argument for dropping the
Finished messages due to their use in further handshake
variants, it casts light on the cryptographic strengths of various
handshake messages in general and the session hash and online
signatures concepts integrated into TLS 1.3 in particular.
Our generic transform on the theoretical side validates the
wide-spread concept of achieving key conﬁrmation through
exchanged MACs over the protocol
transcript, which not
467467
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
only formalizes a folklore approach but more importantly can
serve as a veriﬁed blueprint for future key exchange protocol
designs.
In future work we plan to investigate the extension of our
approach to the (extended) Canetti–Krawczyk model for key
exchange and the interplay between key conﬁrmation and for-
ward secrecy. For example, it might be possible to generalize
the results obtained for the security strengthening compilers
introduced in [16] and [11] to other methods providing key
conﬁrmation.
ACKNOWLEDGMENTS
We thank the anonymous reviewers for valuable comments.
Marc Fischlin is supported by the Heisenberg grant Fi 940/3-2
of the German Research Foundation (DFG). This work was
done in part while Marc Fischlin was visiting the Simons
Institute for the Theory of Computing, supported by the Si-
mons Foundation and by the DIMACS/Simons Collaboration
in Cryptography through NSF grant #CNS-1523467. Benedikt
Schmidt is supported by ONR grant N00014-15-1-2750 and
the European Commission’s Seventh Framework Programme
Marie Curie Cofund Action AMAROUT II (grant no. 291803).
This work has also been co-funded by the DFG as part of
project S4 within the CRC 1119 CROSSING, the European
Union Seventh Framework Programme (FP7/2007-2013) grant
agreement 609611 (PRACTICE), and ERC Advanced Grant
ERC-2010AdG-267188-CRIPTO.
REFERENCES
[1] E. Barker, L. Chen, A. Regenscheid, and M. Smid. SP 800-56B. Rec-
ommendation for Pair-Wise Key Establishment Schemes Using Integer
Factorization Cryptography. NIST Special Publication, National Institute
of Standards & Technology, Aug. 2009.
[2] E. Barker, L. Chen, A. Roginsky, and M. Smid. SP 800-56A r2. Rec-
ommendation for Pair-Wise Key Establishment Schemes Using Discrete
Logarithm Cryptography. NIST Special Publication, National Institute
of Standards & Technology, May 2013.
[3] M. Bellare, D. Pointcheval, and P. Rogaway. Authenticated key exchange
secure against dictionary attacks.
In B. Preneel, editor, Advances in
Cryptology – EUROCRYPT 2000, volume 1807 of Lecture Notes in
Computer Science, pages 139–155. Springer, Heidelberg, May 2000.
[4] M. Bellare and P. Rogaway. Entity authentication and key distribution.
In D. R. Stinson, editor, Advances in Cryptology – CRYPTO’93, volume
773 of Lecture Notes in Computer Science, pages 232–249. Springer,
Heidelberg, Aug. 1994.
[5] F. Bergsma, B. Dowling, F. Kohlar, J. Schwenk, and D. Stebila. Multi-
ciphersuite security of the secure shell (SSH) protocol. In G.-J. Ahn,
M. Yung, and N. Li, editors, ACM CCS 14: 21st Conference on
Computer and Communications Security, pages 369–381. ACM Press,
Nov. 2014.
[6] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Pironti, and P.-
Y. Strub. Triple handshakes and cookie cutters: Breaking and ﬁxing
authentication over TLS.
In 2014 IEEE Symposium on Security and
Privacy, pages 98–113. IEEE Computer Society Press, May 2014.
[7] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P.-Y. Strub.
Implementing TLS with veriﬁed cryptographic security. In 2013 IEEE
Symposium on Security and Privacy, pages 445–459. IEEE Computer
Society Press, May 2013.
[8] S. Blake-Wilson, D. Johnson, and A. Menezes. Key agreement protocols
and their security analysis.
In M. Darnell, editor, Crytography and
Coding, volume 1355 of Lecture Notes in Computer Science, pages 30–
45. Springer Berlin Heidelberg, 1997.
[9] S. Blake-Wilson and A. Menezes. Authenticated Difﬁe-Hellman key
agreement protocols (invited talk).
In S. E. Tavares and H. Meijer,
editors, SAC 1998: 5th Annual International Workshop on Selected Areas
in Cryptography, volume 1556 of Lecture Notes in Computer Science,
pages 339–361. Springer, Heidelberg, Aug. 1999.
[10] S. Blake-Wilson and A. Menezes. Unknown key-share attacks on the
station-to-station (STS) protocol.
In H. Imai and Y. Zheng, editors,
PKC’99: 2nd International Workshop on Theory and Practice in Public
Key Cryptography, volume 1560 of Lecture Notes in Computer Science,
pages 154–170. Springer, Heidelberg, Mar. 1999.
[11] C. Boyd and J. Nieto. On forward secrecy in one-round key exchange.
In L. Chen, editor, Cryptography and Coding, volume 7089 of Lecture
Notes in Computer Science, pages 451–468. Springer Berlin Heidelberg,
2011.
[12] C. Brzuska.
On the Foundations of Key Exchange.
PhD the-
sis, Technische Universität Darmstadt, Darmstadt, Germany, 2013.
http://tuprints.ulb.tu-darmstadt.de/3414/.
[13] C. Brzuska, M. Fischlin, B. Warinschi, and S. C. Williams. Composabil-
ity of Bellare-Rogaway key exchange protocols. In Y. Chen, G. Danezis,
and V. Shmatikov, editors, ACM CCS 11: 18th Conference on Computer
and Communications Security, pages 51–62. ACM Press, Oct. 2011.
[14] R. Canetti and H. Krawczyk. Analysis of key-exchange protocols and
their use for building secure channels. In B. Pﬁtzmann, editor, Advances
in Cryptology – EUROCRYPT 2001, volume 2045 of Lecture Notes in
Computer Science, pages 453–474. Springer, Heidelberg, May 2001.
[15] L. Chen and C. Kudla.
Identity based authenticated key agreement
protocols from pairings. In 16th IEEE Computer Security Foundations
Workshop (CSFW-16 2003), pages 219–233. IEEE Computer Society,
June 2003.
[16] C. J. F. Cremers and M. Feltz. Beyond eCK: Perfect forward secrecy
In S. Foresti,
under actor compromise and ephemeral-key reveal.
M. Yung, and F. Martinelli, editors, ESORICS 2012: 17th European
Symposium on Research in Computer Security, volume 7459 of Lecture
Notes in Computer Science, pages 734–751. Springer, Heidelberg, Sept.
2012.
[17] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol
Version 1.2. RFC 5246 (Proposed Standard), Aug. 2008. Updated by
RFCs 5746, 5878, 6176.
[18] B. Dowling, M. Fischlin, F. Günther, and D. Stebila. A cryptographic
analysis of the TLS 1.3 handshake protocol candidates.
In I. Ray,
N. Li, and C. Kruegel:, editors, ACM CCS 15: 22nd Conference on
Computer and Communications Security, pages 1197–1210. ACM Press,
Oct. 2015.
[19] B. Dowling, M. Fischlin, F. Günther, and D. Stebila. A crypto-
graphic analysis of the TLS 1.3 draft-10 full and pre-shared key
handshake protocol. Cryptology ePrint Archive, Report 2016/081, 2016.
http://eprint.iacr.org/2016/081.
[20] EMVCo LLC.
EMV ECC key
establishment
protocols.
http://www.emvco.com/speciﬁcations.aspx?id=243, 2012.
[21] K. Hoeper and L. Chen.
SP 800-120. Recommendation for EAP
Methods Used in Wireless Network Access Authentication. NIST
Special Publication, National Institute of Standards & Technology, Sept.
2009.
[22] T. Jager, F. Kohlar, S. Schäge, and J. Schwenk. On the security of TLS-
DHE in the standard model. In R. Safavi-Naini and R. Canetti, editors,
Advances in Cryptology – CRYPTO 2012, volume 7417 of Lecture Notes
in Computer Science, pages 273–293. Springer, Heidelberg, Aug. 2012.
[23] H. Krawczyk. HMQV: A high-performance secure Difﬁe-Hellman
protocol. In V. Shoup, editor, Advances in Cryptology – CRYPTO 2005,
volume 3621 of Lecture Notes in Computer Science, pages 546–566.
Springer, Heidelberg, Aug. 2005.
[24] H. Krawczyk, K. G. Paterson, and H. Wee. On the security of the TLS
protocol: A systematic analysis. In R. Canetti and J. A. Garay, editors,
Advances in Cryptology – CRYPTO 2013, Part I, volume 8042 of Lecture
Notes in Computer Science, pages 429–448. Springer, Heidelberg, Aug.
2013.
[25] B. A. LaMacchia, K. E. Lauter, and A. Mityagin. Stronger security of
authenticated key exchange.
In Provable Security, First International
Conference, ProvSec 2007, volume 4784 of Lecture Notes in Computer
Science, pages 1–16. Springer, Nov. 2007.
[26] A. Langley. Comment at the Real World Crypto (RWC) Workshop, New
York, Jan. 2014.
[27] A. J. Menezes, S. A. Vanstone, and P. C. V. Oorschot. Handbook of
Applied Cryptography. CRC Press, 1996.
468468
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
[28] P. Morrissey, N. P. Smart, and B. Warinschi. The TLS handshake
protocol: A modular analysis. Journal of Cryptology, 23(2):187–223,
Apr. 2010.
[29] E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.3
– draft-ietf-tls-tls13-10. https://tools.ietf.org/html/draft-ietf-tls-tls13-10,
Oct. 2015.
[30] E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.3
– draft-ietf-tls-tls13-11. https://tools.ietf.org/html/draft-ietf-tls-tls13-11,
Dec. 2015.
[31] TLS Mailing List. Subject: Kill Finished (and other tricks for hard-
ware). https://www.ietf.org/mail-archive/web/tls/current/msg12162.html,
Apr. 2014.
[32] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Protocol Architec-
ture. RFC 4251 (Proposed Standard), Jan. 2006.
469469
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply.