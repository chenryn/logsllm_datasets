# Mantis: Reactive Programmable Switches
**Authors:** Liangcheng Yu, John Sonchack, Vincent Liu

## Abstract
Mantis is a system that enables fine-grained, fast, and flexible in-network reactions on today’s programmable switches. By pushing the reaction logic as close to the switch ASIC as possible and co-designing the data plane for malleability, Mantis achieves sub-RTT reaction times with minimal overhead.

## Introduction
### Today’s Networks React
A common task in modern networks is reacting to current network conditions:
- **Failure Detection and Rerouting:** Detecting failures and rerouting traffic.
- **Malicious Flow Identification and Filtering:** Identifying and filtering malicious flows.
- **Load Imbalance Recognition and Adjustment:** Recognizing load imbalances and adjusting accordingly.
In data centers, these reactions need to be extremely fast.

### Today’s Primitives for Reaction
Current approaches to network reactions include:
- **SDNs or Conventional Control Loops:**
  - **Pros:** Flexible.
  - **Cons:** Slow.
- **Built-in Data Plane Primitives:**
  - **Pros:** Fast.
  - **Cons:** Restrictive.
- **Programmable Switches:**
  - Constraints on operations in actions, number of stages, SRAM accesses, egress/ingress communication, and in-band match-action updates.

### Approach
Can we enable fine-grained reactions with minimum latency and maximum flexibility?
1. Push the reactions as close to the switch ASIC as possible.
2. Co-design the data plane program for fine-grained malleability and ease of use.

## Mantis Overview
- **Usable, Fast, and Expressive In-Network Reactions:** Mantis provides usable, fast, and expressive in-network reactions on today’s RMT switches.
- **Simple Extension to P4:** Mantis extends P4 with simple, yet powerful features.
- **Arbitrary C Code:** Users can write arbitrary C code for reaction logic.
- **Low Latency:** Achieves reaction times in the tens of microseconds.
- **Dynamic Reconfigurability:** Generates code for dynamic reconfigurability and serializability.

## Abstraction
### Malleable Entities
- **Runtime Reconfiguration:** Malleable entities are amenable to fine-grained reconfiguration at runtime.
- **Reactions:** Reaction logic is packaged into C-like functions.

## Anatomy of Mantis
1. **Language (M1)**
2. **Translation (M2)**
3. **Isolation (M3)**
4. **Execution (M4)**

### M1: Start with P4 Code
```p4
table my_table {  
  reads { ipv4.dst : ternary; }  
  actions { my_action; drop; }  
} 
action my_action() {  
  modify_field(priority, 1);  
}
```
### M1: P4R Example
```p4r
malleable value prio_var {  
  width : 16; init : 1;  
}  
table my_table {  
  reads { ipv4.dst : ternary; }  
  actions { my_action; drop; }  
} 
action my_action() {  
  modify_field(priority, ${prio_var});  
} 
reaction my_reaction(reg re_qdepths[1:10]){  
  uint16_t cur_max = 0; 
  for (int i = 1; i < 10; i++) { 
    if (re_qdepths[i] > cur_max) { 
      cur_max = re_qdepths[i];  
    } 
  } 
  if (cur_max > THRESHOLD) { 
    ${prio_var} = 5; 
  }  
}
```

### M2: P4R Transformation
Generalize user-specified knobs for “hitless” reconfiguration:
```p4r
malleable value prio_var {  
  width : 16; init : 1;  
}  
table my_table {  
  reads { ipv4.dst : ternary; }  
  actions { my_action; drop; }  
} 
action my_action() {  
  modify_field(priority, p4r_meta_.prio_var);  
} 
header_type p4r_meta_t_ { 
  field {prio_var : 16;} 
} 
metadata p4r_meta_t_ p4r_meta_;
table p4r_init_ { 
  actions {p4r_init_action_;} 
  size : 1; 
} 
action p4r_init_action_(prio_var) { 
  modify_field(p4r_meta_.prio_var, prio_var); 
}
```

### M3: Isolation (ACID)
- **Isolation Matters:** Consider the following reaction:
  ```c
  reaction my_reaction(reg src, reg dst){}
  ```
  - **Expectation:** `src ← p1, dst ← p1`
  - **Without Isolation:** `src ← p1, dst ← p2`
- **Mantis Enforces:** Per-pipeline, per-reaction serializable isolation.

### M4: Mantis Control Plane
Traditionally, data/control plane interactions are treated as one-off, isolated events, assumed to be on the "slow path." Mantis control plane is instead reaction-centric:
```c
helper_state = precompute_metadata(); 
memo = setup_cache(helper_state); 
run_user_initialization(helper_state, memo); 
while(!stopped) { 
  updateTable(memo, "p4r_init_", {measure_ver : mv ^ 1}); 
  read_measurements(memo, mv); mv ^= 1; 
  run_user_reaction(memo, helper_state, vv ^ 1); 
  updateTable(memo, "p4r_init_", {config_ver : vv ^ 1}); 
  fill_shadow_tables(memo, vv); vv ^= 1; 
}
```

## Implementation and Evaluation
- **Prototype Implementation:** On a Wedge100BF-32X Tofino switch.
  - **P4R Frontend:** Flex/Bison based, ~5000 lines of C++ and grammar.
  - **Mantis Agent:** Dynamic (re)loading of user reaction (.so object).
- **Evaluation:**
  - **Reaction Time:** How fast is Mantis’s reaction time?
  - **Overhead:** What is the overhead?
  - **Applications:** What are the applications of Mantis?
  - **Comparison:** How does Mantis compare to existing alternatives?

### Mantis Achieves Fast Reaction Times
- **End-to-End Reaction Time:** 10s of microseconds.
- **Formula for End-to-End Reaction Time:**
  \[
  Fb(1 \text{ tblMod}) + \sum_{a \in \text{args}}(Fa(a)) + C + \sum_{t \in \text{tblMods}}(2Fb(t)) + 2Fb(N_{\text{init}} - 1) + Fb(1 \text{ tblMod})
  \]

### Mantis CPU Overhead
- **Latency Penalty:**
  - Median: ~4.64%
  - P99: ~6.45%
- **Co-Existence:** Mantis can co-exist with other functionalities.

## Use Cases
### DoS Mitigation
- **Measurement:** Flow signature, packet count.
- **Control Logic:** Block the sender if the estimated flow size exceeds a threshold.
- **Action:** Drop the malicious traffic for the blocked senders.

### Route Recomputation
- **Measurement:** Heartbeat counts, timestamp.
- **Control Logic:** Mark the failed link if received heartbeat number is smaller than expected after consecutive K confirmations.
- **Action:** Reroute traffic towards the affected link.

### Hash Polarization Mitigation
- **Measurement:** Queue depths of ECMP ports.
- **Control Logic:** Change ECMP hashing input to another permutation if found a persistent imbalance of port utilization.
- **Action:** Reconfigure the malleable fields for another 5-tuple permutation.

### Reinforcement Learning
- **Measurement:** Packet counts and queue depths.
- **Control Logic:** Use a Q-learning algorithm to calculate the optimal ECN threshold based on rewards.
- **Action:** Change ECN malleable value.

## Summary
- **Fine-Grained Reaction:** Network statistics as first-class citizens.
- **P4R Interface:** Simplifies the encoding of serializable reactions.
- **Sub-RTT Reactive Behaviors:** Generic support.
- **Use Cases:**
  - Encoding flexible control logic.
  - Workarounds for current limitations.
  - Reducing memory overhead via offloading.
  - Data/control plane co-design.

For more details, visit [Mantis GitHub Repository](https://github.com/eniac/Mantis).

Thank you for your attention!

## Live Q&A