10
0
10
1
10
2
10
Retention Time (sec)
Fig. 2. Retention Time Distribution for DRAM cells (60nm Technology).
Y axis shows the bit failure probability for a given retention time. (Figure
derived from [10])
.
The bit failure probability at 64ms is in the regime of
357357
10−9, which means 1 out a billion bits is expected to fail.
Such weak bits are decommissioned with device testing and
replaced by spare rows and columns, and the shipped DRAM
chip is expected to have all bits working at 64ms refresh
period. Unfortunately, spare rows are expensive means of
decommissioning bad bits, as they require an overhead of 1KB
or more for sparing each failed bit; therefore, it is not practical
to use when the bit error rate is high (in the regime where we
have few tens or more failed bits) [11, 12].
As the refresh period is increased, the bit error rate in-
creases signiﬁcantly. At 1 second retention time, the bit error
rate is in the range of 10−4 to 10−5 regime. We will use a raw
bit error rate of 10−4.5 as a default in our studies for a refresh
period of 1 second. This means if we simply increase the
refresh period to 1 second, we can expect approximately 32K
bits to fail in a 1Gb array, and 256K bits in a 1GB memory. If
we are to employ a 1 second refresh rate to reduce the memory
refresh power, the system must be provisioned with means to
tolerate high bit error rates.
C. Error Correction for Reducing Refresh
Error Correcting Code (ECC) is often used to tolerate soft-
errors due to alpha particle strikes. A similar approach to
tolerating refresh errors can be provided in memory systems
by appending them with stronger levels of error correction.
So, in general, each line can be provided with the capability to
correct say K errors. A key question is what should be the error
correction strength that is required to ensure a refresh period
of say 1 second. For this analysis, we make two assumptions,
both of which are consistent with the recent literature on
memory reliability studies. First, the errors are uncorrelated,
that is each bit has a uniform and independent probability of
error[13, 5, 14]. Second, we deem the mechanism to be useful
if the likelihood of a system with an erroneous line is less
than 1 system out of 1 million systems (this is much stronger
guarantee than what is employed in cache studies, so chance
of data corruption is negligible).
TABLE I.
LINE FAILURE AND SYSTEM (1GB MEMORY) FAILURE
PROBABILITY FOR BIT ERROR RATE OF 10−4.5 (64B CACHE LINE SIZE)
ECC strength
No ECC
ECC-1
ECC-2
ECC-3
ECC-4
ECC-5
ECC-6
Line Failure
1.8 · 10−2
1.6 · 10−4
9.8 · 10−7
4.5 · 10−9
1.6 · 10−11
4.9 · 10−14
1.2 · 10−16
System (1GB) failure
1.0
1.0
1.0
7.2 · 10−2
2.7 · 10−4
8.1 · 10−7
1.8 · 10−9
Table I show the probability of failure of a line and for a
1GB memory system when the raw bit error rate of each cell
is 10−4.5. The error correction level per line is varied from
zero to six. We denote the error correction code that corrects
up to K bit per line as ECC-K. Supposed the memory has
16 million lines, the probability of line failure must be well
below 1 in several tens of million to get a low probability of
system failure. To achieve our target system failure probability
of 1 in a million, we will need to provision the system with
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:13:39 UTC from IEEE Xplore.  Restrictions apply. 
ECC-5. However, to prevent the system from soft-errors and
from the infrequent episode of few bits changing retention time
intermittently, we also deem it necessary to provision the line
with an extra ECC code for soft-error protection. Therefore,
to reliably operate the system with a refresh rate of 1 second,
the system needs to provision with ECC-6 code per line.
D. Drawbacks of Strong Multi-bit ECC codes
While strong multi-bit error correction codes, such as ECC-
they suffer from two major
6, can reduce refresh power,
overheads: storage and latency. The storage overhead required
for error correction is linearly proportional to the number of
errors that we want to correct. Therefore, ECC-6 will require
six times as much storage overhead as ECC-1 for the same
granularity of data-bits that we want to protect with the code.
To make our solution practical, we would like to reduce the
storage overhead required to implement ECC-6.
The second overhead of strong multi-bit ECC is the latency
associated with encoding and decoding the line. While single
bit error correction is typically implemented with Hamming
codes, strong multi-bit ECCs are implemented with BCH
codes, involving complex steps of syndrome decoding. The
latency associated with decoding of strong multi-bit errors
typically ranges in few tens of cycles [5]. The decode latency
is in the critical path of memory access; therefore it increases
the effective memory latency and degrades performance.
SECDEC
ECC-6
C
P
I
d
e
z
i
l
a
m
r
o
N
 1
 0.95
 0.9
 0.85
 0.8
Low
MPKI
Med
MPKI
High
MPKI
ALL
Fig. 3.
Performance Impact of Decoding Latency of Error Correction
compared to a system that has no error correction. SECDED incurs negligible
performance impact, but ECC-6 degrades performance signiﬁcantly (method-
ology in Section IV).
Figure 3 shows
the system performance of ECC-1
(SECDED) and ECC-6 compared to a system that does not
perform any error correction. On average, ECC-1 codes have
negligible impact on performance (less than 1% on average)
as the decoding latency is only a couple of cycles. In our
system, we assume that ECC-6 decoding takes 30 cycles,
which degrades performance signiﬁcantly up to 22%, and on
average 10%.
III. MORPHABLE ECC
We want to save refresh power by employing strong ECC,
while avoiding the performance impact of decode latency for
strong ECC. To get these conﬂicting beneﬁts, we exploit the
observation that the refresh power contributes to a smaller
fraction of memory power (and system power) when the
system is actively used. However, during long idle periods, the
358358
refresh power contributes signiﬁcantly to the memory power
(and system power). We can get both high performance and
low refresh power if we optimize the ECC separately for
active mode and idle mode. During active mode, it is preferred
that memory be decoded with weak-ECC to avoid the latency
impact. Whereas, during idle mode, memory is not accessed
so it is desirable to use strong ECC and save refresh power.
Based on this insight, we propose Morphable ECC (MECC).
A. MECC: Concept and Overview
MECC consists of two levels of ECC codes: Strong ECC
and Weak ECC. Strong ECC is chosen to optimize for refresh
power. There is no requirement for weak ECC, except that
it has low latency overheads. One can substitute no ECC for
weak ECC. However, to ensure robustness against soft errors,
we use SECDED. For strong ECC, we use ECC-6. Figure 4
captures the overview of working of MECC.
Sleep
Active 
(Weak−ECC
Normal Refresh)
ECC−Upgrade
ECC−Downgrade
Wakeup
Active 
Idle Period
(Strong−ECC, Slow Refresh)
Time
Fig. 4. Overview and Working of Morphable ECC.
During the active mode, the system uses normal refresh rate
and accesses memory with the latency of weak ECC. When the
system becomes idle, memory is converted from weak ECC
to strong ECC. We call this conversion from weak ECC to
strong ECC as ECC-Upgrade. Once the memory is upgraded,
the memory is transitioned into self refresh mode, but with a
period of 1 second (instead of 64ms). Thus, in the idle period,
the refresh operations get reduced by 16x. When the system
is activated, the memory refresh rate is increased to 64ms.
The ﬁrst access to a line gets the line in strong-ECC state;
however this line is then converted to weak-ECC state and
written back to memory. The conversion from strong ECC to
weak ECC is referred to as ECC-Downgrade. This conversion
ensures that subsequent memory request to the same data block
would not pay the latency overheads of strong ECC; therefore
in the active mode the common-case latency overhead becomes
that of weak ECC. Note that lines undergo ECC-Downgrade
on a demand basis, which avoids wasteful transitions of ECC
status for unused lines.
B. MECC: Design
Figure 5 shows an overview of the system that supports
MECC. MECC requires that the processor chip contains en-
coders and decoders for both weak ECC and strong ECC. The
DRAM module must support the storage overhead required
for both weak ECC and strong ECC as well. When a line is
accessed in the active mode, the memory controller needs to
know which decoder should be employed to decode the line.
To provide this information, the line is appended with status bit
called ECC-mode. When ECC-mode is 0, the line is decoded
with weak ECC and when it is 1, the line is decoded with
strong ECC.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:13:39 UTC from IEEE Xplore.  Restrictions apply. 
DRAM
LINE ADDRESS
DATA+ECC
DATA+ECC
the extra 8 ECC bits required for the 64 bit of data. For the
remainder of the paper we will assume that our baseline mobile
memory system supports SECDED at a word granularity. We
show how MECC can be implemented on such a memory
system without requiring any additional storage.
ECC
Encoder
ECC−Mode bits
64B Data Block
8B of ECC
Read Queue
Write Queue
SECDED
Decoder
ECC−6
Decoder
1 ECC Byte protecting 8 Bytes of Data
MEMORY CONTROLLER
ECC
for [0:7]
ECC
ECC
ECC
ECC
ECC
ECC
ECC
for [8:15]
for [16:23]
for [24:31]
for [32:39]
for [40:47]
for [48:55]
for [56:63]
(i) Conventional SECDED
Fig. 5.
correction are shaded.) Figure not to scale
System Support for Morphable ECC (Newly added parts for error
0000
Bits 4:14 used for SECDED for 64 Byte line
Unused
(ii) MECC for SECDED
DATA to Last−Level Cache
ECC−Mode
When the memory controller encounters a line that has
ECC-mode bits set to strong ECC, it generates the contents of
weak-ECC and writes the line back to memory with the ECC
corresponding to weak ECC and marking the ECC-mode bit
as such. Note this ECC-Downgrade is not in the critical path
of memory access.
When the system becomes idle, the OS can turn off the
processor chip (after ﬂushing the caches), and send an self
refresh signal to memory and subsequently grounding the clock
to the memory. When this happens, the memory lines are read,
and converted to ECC-6, and the ECC-mode bit associated
with the line is marked as such. When the ECC-Upgrade
process ﬁnishes, the memory is put into self refresh mode,
and uses long refresh intervals.
MECC also relies on support from the memory device to
change the refresh frequency in idle mode, by simply having
an internal counter, which would be incremented on each
refresh pulse, and the outgoing refresh pulse is sent to the
DRAM array only on counter overﬂow. The size of the counter
will then modulate the refresh frequency. We assume that
such support will be available from future DRAM module to
optimize refresh power. A 4-bit counter is required to increase
the refresh rate from 64ms to 1 second.
C. ECC Support for Mobile Memories
MECC relies on having the ECC code (for both SECDED
and ECC-6) stored in the DRAM arrays. Current mobile
memories (and even the commonly used Desktop memories)
are typically not equipped with ECC support. However, as
a recent paper [15] from Intel and Samsung shows, that to
tolerate the failure modes at smaller technology nodes, even
the commodity memories will need to be provisioned with the
ECC support. Therefore, we assume that our baseline mobile
memory system is supported with SECDED using the (72,64)
code. While the (72,64) code requires that the number of x8
chips in Desktop DIMMs be increased from 8 to 9, having
an extra chip in mobile memories is harder as such memories
typically have only two x32 chips (so adding an extra chip
would incur 50% storage). We observe that the (72,64) code
be supported easily even for mobile memories by having x36
chips, or by having a burst length of 9 (instead of 8) to obtain
ECC−Mode
1111
Bits 4:63 used for ECC−6 for 64 Byte line
(iii) MECC for ECC−6
Fig. 6. Morphable ECC Design on ECC memory (i) Conventional SECDED
operating at 8 byte granularity (ii) MECC storing the line with Weak ECC,
operating at 64 bytes (iii) MECC storing the line with ECC-6, operating at
64 bytes
D. Reducing Storage Overhead for MECC
Instead of strong SECDED on 8-byte granularity (which is
done for traditional reasons, owing its origins to when cache
lines were small), we propose to have both SECDED and ECC-
6 on a line size granularity (64 bytes). For SECDED, we would
need 11 bits, and for ECC-6 we would need 60 bits (61 bits if
we want to implement 6-bit Error Correction and 7-bit Error
Detection). Note that, we would not need storage for both
SECDED and ECC-6 at the same time, as the line can either
be using SECDED or ECC-6. Thus, we need 60 bits for ECC.
The traditionally used (72,64) code provides 8 ECC bits for
64 bits of data, which amounts to 64 bits of ECC for a 64 byte
cache line. We propose to use all the 64 bits in conjunction to
repair the entire line. The ﬁrst four bits in this 64 bit ECC
space would indicate ECC-mode, implemented with 4-way
redundancy for fault tolerance. The remaining 60 bits are used
for either SECDED or ECC-6, as shown in Figure 6. Thus,
MECC can be implemented easily with a memory system that
supports the traditional (72,64) code, without the need of any
modiﬁcation to existing storage array.
During idle mode, ECC-mode bits might ﬂip at the raw
bit error rate 10−4.5, and later in active mode, the memory
controller would fail to identify the ECC-mode, causing an
unreliable system. To solve this, ECC-mode bit is duplicated
four times to tolerate errors. All the data bits and ECC-mode
bits are covered by the ECC-6. When there is a mismatch in the
replicated copies of ECC-mode bits, we try both SECDED and
ECC-6 decoder. The one which gives correct result indicates
the ECC-mode of the current data block. Therefore, the ECC-
mode bits are well-protected to ensure the correct identiﬁcation
of ECC modes.