K-9 Mail, every 15 minutes) and syn-
chronized the data with Google. GPS was enabled all the time and everything else was
left at it’s default setting.
Duration
1x write SMS 1 minute (160 characters)
Use Browser 2 minutes (1 site access)
3 minutes (display off)
1x E-Mail 1 minute (120 characters)
Minute
5
20
30
40
Music
Job
5.1
Initial Tests
In order to detect malicious activities, we again ﬁrst need to know how much energy
is consumed in both scenarios without them. Table 9 shows the four CV values which
again represent our threshold values. Any action which consumes less energy than these
values is indistinguishable from noise in the corresponding scenario.
The battery charge value is eye-catching. Although in scenario B the total energy
consumption differs by approximate 50%, the charge level is even higher for a more
depleted battery. This is a strong indicator that the user cannot trust the battery charge
value by any means and that it should only be considered as a very vague value.
12
Johannes Hoffmann, Stephan Neumann, Thorsten Holz
A (heavy)
Table 9. Long time initial tests (3 hour period).
CV
Scenario Function Charge Total Cons.
63% 299.67mW 2.08%
3G 48% 419.09mW 2.67%
77% 97.28mW 2.79%
3G 78% 145.14mW 3.16%
As this test includes normal user be-
havior such as Web browsing, the power
consumptions depends a lot on the actual
user input. For example, when and how
long the Web browser is used is deﬁned
and always the same in all tests, but the
actual power consumptions is inﬂuenced
a lot by the actual accessed Web sites. The
OLED display might consume more or less energy on one website as it would display-
ing another one. The same is true for the browser process. How many and what scripts
are executed, is the browser’s geolocation API accessed? During the test the same web-
sites were visited, but the content changed over time which at least might inﬂuenced the
OLED display to a certain extent.
WiFi
WiFi
B (light)
As one could already see in the short
tests, the 3G Internet connection uses
more power than the WiFi connection.
The CV for the tests with 3G connec-
tions is much lower as in the short tests
because there are a lot more actions per-
formed than just keeping this connection
up, which reduces the noise introduced
by this consumer. The same is true in the
opposing way for the WiFi connection,
as the CV goes up for these scenarios.
Table 10. Exemplary power consumption of dif-
ferent apps (scenario A). Values in mW (missing
energy was consumed by unlisted components).
OLED CPU WiFi Total
Application
3.45
0.25
PowerTutor
3.70
0.00
0.60
0.48 14.95
K9-Mail
13.87
1.04
0.00 22.48
MMS Application 21.44
0.00 26.28
0.34
0.00
Music
0.00 29.51
28.05
Launcher
1.46
26.98 12.47
Facebook
8.40 47.85
1.51 68.10
53.89
Angry Birds
9.71
Browser
39.79 14.28
1.01 78.01
Table 10 provides an overview of the
power consumption of several apps as
we did in the last section. As one would expect, the game Angry Birds and the Web
browser consume a lot of energy. The values for the OLED display, the CPU, and the
WiFi module also look sane and correlate to the provided applications functionality ex-
cept for the Facebook app. The CPU consumption seems a bit high. The reason for this
is unclear, but the app felt unresponsive on the old phone which might be caused by not
well written code. The missing values for the apps total energy consumption are used
by the GPS module, the speaker and other devices.
5.2 Energy Greedy Functions
In this test, we again stress the CPU to its maximum in both scenarios. Since we want
to know how big the impact of such energy-greedy software is in contrast to all other
apps, we disabled the sleep mode, meaning that the CPU and all apps keep running even
when the display blanks. Table 11 shows the results. As one would expect, our malware
consumes a lot of energy in both scenarios but most in scenario B, as it gets more
CPU cycles in total because there is less concurrent interaction opposed to scenario A.
This is also caused by the fact that Android prioritizes foreground apps. The energy
consumption compared to Table 4 is a bit lower, as other software runs next to our
malware. The values are not higher as one might wrongly expect because W is deﬁned
as one joule per second.
Mobile Malware Detection Based on Energy Fingerprints — A Dead End?
13
Under these circumstances, the smart-
phone’s battery will last for approximately
8 hours in scenario A and 6.7 hours in sce-
nario B. If the user does not know how to
check which apps consume what amount of
energy, this will vastly degrade the user’s
smartphone experience. Additionally, if the
CPU is not the fastest, the user might feel some unresponsivenesses in some apps. Nev-
ertheless, this behavior can be detected by AV software in both scenarios.
Table 11. Average power consumption with
disabled sleepmode (WiFi only).
Scenario MW Cons. Total Cons.
Rise
A (heavy) 419.26mW 764.53mW 139.91%
B (light) 505.55mW 645.82mW 519.69%
5.3 Location API
In this section we test how much
energy a “tracker app“ consumes
under what circumstances. If an
app retrieves the last known loca-
tion from the API, almost no en-
ergy is consumed. We therefore
limit our tests to the case where
our malware retrieves the GPS lo-
cation. We chose four different in-
tervals for each scenario and the
location is always encapsulated in
an XML structure and sent out
through the WiFi interface.
Table 12. Average power consumption for stealing GPS
position (WiFi only).
Scenario
Function MW Cons. Total Cons. Rise
5.32mW 315.61mW 1.78%
5 minutes
2.88mW 328.49mW 0.96%
15 minutes
30 minutes
2.56mW 304.88mW 0.85%
0.87mW 292.97mW 0.29%
60 minutes
6.11mW 105.42mW 6.28%
5 minutes
2.24mW 100.84mW 2.30%
15 minutes
1.73mW 104.12mW 1.78%
30 minutes
0.94mW 101.08mW 0.97%
60 minutes
A (heavy)
B (light)
Table 12 shows the consumed energy for each test case. The results show that re-
trieving the location during the long time tests is less obtrusive compared to the short
time tests. In scenario A, the added power consumption is indistinguishable from noise
and in scenario B carefully set parameters are also indistinguishable (interval ≥ 15).
Our location listener was updated at the set interval, but an additional parameter which
sets the minimum distance from the last location which must be reached in order to get
notiﬁed was set to 0. This means that our malware woke up at all interval times, even
if the location did not change. One could be much more energy friendly if a minimum
distance is set and/or if a passive location listener is used which only gets notiﬁed if
some other app is performing a regular location request.
5.4 Data Heist
The short time tests revealed that even small quantities of data sent through either the
WiFi or the 3G interface are detectable. This section examines if this is also true for
real world scenarios. In both scenarios, 369kB are read and sent through each interface.
Two different intervals were tested during which the data was sent. Table 13 shows the
results for each test. It is clearly visible, that data heist from a spyware is not that easily
detectable in a real world scenario. A well written malicious software that steals data
could send approximately 35MB of data in small chunks in 3 hours without being de-
tectable by its energy consumption. This amount decreases vastly for the 3G interface.
14
Johannes Hoffmann, Stephan Neumann, Thorsten Holz
Data theft can—to
some extent—be detect-
able by means of ad-
ditionally used energy.
This means that it gets
detectable if, e. g., many
pictures or music ﬁles
are copied. In contrast
to that,
theft of SMS
databases or serial num-
bers such as the IMEI
are unrecognizable.
Table 13. Average power consumption for data transmission.
Scenario
A (heavy)
B (light)
Function
MW Cons. Total Cons.
Rise
5 min. (13MB)
2.01mW 295.71mW 0.67%
1 min. (65MB) 11.42mW 322.82mW 3.81%
8.02mW 450.65mW 1.91%
5 min. (13MB)
1 min. (65MB) 51.72mW 538.74mW 12.34%
2.14mW 100.84mW 2.20%
5 min. (13MB)
6.11mW 105.42mW 6.28%
1 min. (65MB)
7.50mW 148.82mW 5.17%
5 min. (13MB)
1 min. (65MB) 39.78mW 197.78mW 27.41%
WiFi
3G
WiFi
3G
5.5 Galaxy Nexus
Next to our test with PowerTutor on a HTC Nexus One, we also performed some tests
with a Samsung Galaxy Nexus. Since PowerTutor is not ﬁne tuned to this phone, we
only use the provided battery charge level and the reported battery voltage by the tool
(similar to the approaches presented in the literature [12,13]). This way we can deter-
mine what is possible without a sophisticated tool.
We performed three tests on the Galaxy Nexus. The ﬁrst two are identical to the last
two from the previous test: data is sent over the WiFi interface in two different intervals
for our two scenarios. In the third test, our malware sends a short message every 5
minutes resulting in 36 messages over 3 hours. Unfortunately, PowerTutor is unable
to measure the power consumption of the GSM modem. Therefore, this test was not
performed on the Nexus One and cannot be compared to any previous measurements.
A (heavy)
Table 14. Battery charge level for the Galaxy Nexus after
sending data and short messages (WiFi only).
Scenario
Charge Voltage
Function
74% 3,812mV
Initial test
79% 3,887mV
5 minutes/13MB
1 minute/65MB
76% 3,900mV
36x SMS (every 5 minutes) 76% 3,845mV
Initial test
90% 4,060mV
91% 4,072mV
5 minutes/13MB
1 minute/65MB
91% 4,023mV
36x SMS (every 5 minutes) 90% 4,022mV
In order to obtain any in-
formation about
the phone’s
power consumption, we began
our evaluation with a measure-
ment of the phone’s energy de-
mands for the two scenarios
without any additional actions.
We again call them initial tests
and they are performed in the
same way as mentioned before
(3 hours in total). The results
can be found in Table 14 and
clearly tell one story: Without
any sophisticated measurement of the actual consumed power, no predictions of any
additional running malware can be made (at least for our chosen scenarios and tests).
Each test ended up with a battery charge rate which was higher than that for the initial
test. This should of course not be the case, as additional actions were performed. The
reported voltage also does not correlate to our expectation that more energy is used and
it should therefore be lower (the battery voltage decreases if depleted). Therefore, a user
cannot trust the values displayed on the phone and so cannot any monitoring software.
B (light)
Mobile Malware Detection Based on Energy Fingerprints — A Dead End?
15
6 Validation with Real-World Malware
This section covers the energy demands of two malicious software samples named
Gone in 60 seconds (GI60S) and Superclean/DroidCleaner (SC) that were found in the
Google Play Store in September 2011 and January 2013. We have tested whether they
are detectable in our test scenarios from the last section and validate our measurements
for the Nexus One.
SC
SC
B (light)
A (heavy)
Table 15. Veriﬁcation with malware in controlled
scenarios (WiFi only).
Scenario MW MW Cons. Total Cons. Rise
GI60S 1.45mW 311.51mW 0.48%
4.06mW 296.87mW 1.35%
GI60S 1.54mW 103.35mW 1.58%
5.60mW 113.65mW 5.45%