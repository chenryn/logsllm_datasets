aging to improve RingRAM’s performance for both PUFs and
TRNGs. We observe that we can direct device aging to gradually
influence the relative speeds of the cross-coupled chains: making
stable cells more stable and unstable cells more unstable. To harness
device aging to improve RingRAM’s performance, we intentionally
have cells hold a value while idle. For stable cells, we have them
hold a value that makes them more stable over time. For unstable
7By dynamically classifying bits as random, RingRAM with active learning adds a new
spatial dimension on top of per-cell randomness. This reordering increases entropy
for free.
8Positive-Bias Temperature Instability is also a source of device aging, but has been
shown to be less significant than NBTI. While both forms of BTI affect RingRAM, we
focus on NBTI because it dominates and for simplicity.
9NBTI affects ROs as well: it causes them to slow over time. This results in reduced
entropy rate for RO-TRNGs. Also, given asymmetries in susceptability to aging between
transistors, this adds noise to RO-PUFs.
016324864Cell016324864Response016324864Bit016324864Response016324864Bit016324864Response665RingRAM: A Unified Hardware Security
Primitive for IoT Devices that Gets Better with Age
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
7 IMPLEMENTATION
RingRAM relies on the idea of a self-reinforcing, bi-stable feedback
loop that can be programmatically forced to an unstable point and
will eventually stabilize itself to a value that depends on both man-
ufacturing and operational chaos. While there are a myriad of ways
to implement such functionality, we provide an area-optimal imple-
mentation comprised of 2 NAND gates (§3). This construction creates
a hardware-level race condition when enabled (Table 1). Using such
simple components, RingRAM is implementable using discrete cir-
cuit components, Field Programmable Gate Arrays (FPGAs), and as
part of an Application-Specific Integrated Circuit (ASIC).10
There are two sources of variation that a designer must
avoid when implementing RingRAM: systematic and struc-
tural. As discussed in §2, systematic variation occurs both at man-
ufacturing and run-time. Systematic variation occurs due to pre-
dictable changes in transistor properties at chip- and wafer-scale
and due to long-running changes in a device’s operational environ-
ment. Alternatively, structural variation is a universal difference in
the placement and routing of RingRAM components. For example,
an enable register being closer to one NAND gate than the other
means the electrical signal will reach the closer gate first, making it
more likely to win the hardware race. Both types of variation distort
the PUF/TRNG-cell ratio of RingRAM towards a PUF, while making
the resulting PUF responses more predictable across devices. We
provide two guidelines to avoid these sources of variation:
(1) Symmetric: As both components and wires have the poten-
tial to add structural variation, use symmetrical placement
and routing to avoid structural variation.
(2) Tightly-packed: By keeping the chains of a cell physically
adjacent and its routing short, there is little room for sys-
tematic variation to influence chains asymmetrically.
7.1 Discrete Implementation
Implementing RingRAM using discrete components affords hard-
ware designers full control over RingRAM’s composition and the
resulting PUF response by hand-tuning the layout and parasitics.
Obviously, for threat models where the attacker has physical ac-
cess to the device, additional physical anti-tamper measures are
necessary to protect the primitive’s integrity [41]. We implement
RingRAM using four discrete Bipolar Junction Transistors (BJTs)
as Figure 9 shows. We follow our implementation guidelines and
layout the BJTs symmetrically and pack them tightly. This imple-
mentation creates the same race-condition between two NAND gates,
where the NAND gates are created using two NPN BJTs, connected in
series. When the base (i.e., center pin) of the NPN transistor is 1, it
acts as a short-circuit between the other two pins. Therefore, only
when both NPN BJTs that are connected in series have their base
set to 1 is the output of the pair 0. This construction preserves the
required hardware-level race-condition as O1 and O2 contend with
each other until the cell stabilizes. In this setup, whether the cell
is useful for a PUF or TRNG depends on the relative properties of
the transistors and the resistors. Thus, tuning the bias of the cell is
possible using variable resistors.
10An important aspect of the of the discrete and FPGA implementations is that they
are auditable and able to be integrated with existing systems. Auditability is important
given recent distrust in black-box TRNGs [17].
Figure 8: The directed aging circuit gradually reduces PUF noise, while in-
creasing TRNG entropy, by aging cells according to values in the active learn-
ing circuit’s shift register. Stable cells are set to values inverted from what is
in the register, further slowing the already slow gate. Unstable cells are set to
values matching those in the register, slowing the faster gate.
MODE EN ENC
-
-
0
1
0
0
1
1
0
1
-
-
EN1
0
1
OR
OR
EN2 O1 O2
0
0
0
O2 O1
1
OR
OR OR
OR OR
OR
Table 2: Directed aging circuit’s logical behavior. MODE is 1 when directed
aging is enabled, ENC encodes whether the cell is a stable/PUF cell (1) or a
unstable/TRNG cell (0), and OR is the output from the cell’s shift register. O1
and O2 are the individual chain output values, regardless of chain length.
cells, we have them hold a value that makes them more unstable
over time. To determine the value, we observe that the faster chain
dictates the cell’s value. Hence, to make a cell more stable, we
invert the value, loading a value that causes the loser to turn-on
and commence aging. By extension, for unstable cells, we let the
winner keep aging, making the race closer next time.
To implement this functionality, we leverage the active learning
circuit. To this we add an aging mode that loads values to each
RingRAM chain dependent on cell type and response history. Fig-
ure 8 shows the directed aging circuit and Table 2 provides a logical
description. When RingRAM is idle, the directed aging circuit forces
the cell to hold values based in its recent value history.
Evaluating the exact impact of the directed aging circuit on
RingRAM’s performance is infeasible as it requires running the
FPGA prototype for many years. Short of that, we approximate the
effects of aging by leveraging the similarity in the core structure
of SRAM and RingRAM. We gather 5 years worth of aging data
using four Texas Instruments MSP430G2553 launchpad develop-
ment boards as testbeds. We first enroll the boards by taking 51
measurements of their power-on state. Since NBTI aging is data-
dependent, we write all 1’s to half the boards and all 0’s to the other
half. After 5 years of accelerated aging [27], we take another 51
power-on state measurements and compare to the enrollment data.
The results of down-selecting bits that match what directed aging
would have done are (1) PUF response noise reduces to ±2-bits
(-40%) and (2) min-entropy increases by 122%. This makes sense
as directed aging aggressively moves unstable cells to 50% prob-
ability (±7%), which is what min-entropy is sensitive to. There is
a synergy between directed aging and controlled composition:
controlled composition creates partially-unstable cells and
directed aging gradually makes them less stable.
EN1Active Learning CircuitRingRAM CellShift Reg(N-bit)ThresholdCheckO1O2EN2RESPONSEMODEENENCORMUXMUXMUX666ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Michael Moukarzel and Matthew Hicks
Figure 9: RingRAM NPN BJT schematic.
Figure 10: RingRAM FPGA LUT schematic.
Figure 11: RingRAM CMOS ASIC schematic.
∗ )
clk ,
en_in ,
( ∗ ALLOW_COMBINATORIAL_LOOPS = " t r u e " ,
input
input
output reg out ) ;
1 module evalRingRAM (
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19 endmodule
Listing 1: RingRAM hardware description used for FPGA and ASIC.
KEEP = " t r u e " ,
DONT_TOUCH= " t r u e "
wire nand_1 , nand_2 ;
reg en ;
assign nand_1 = ! ( en & nand_2 ) ;
assign nand_2 = ! ( en & nand_1 ) ;
always @( posedge c l k ) begin
en <= en_in ;
out <= nand_2 ;
end
7.2 HDL Implementation
Implementing RingRAM in a Hardware Descriptive Language
(HDL) presents challenges due to it’s required combinational feed-
back loop, see Listing 1. By default, HDL synthesis and implemen-
tation tools prevent the use of such feedback loops as they run
contrary to synchronous design practices. Also, RingRAM’s self-
reinforcing loops appear to be redundant at the digital abstraction
level, so we must prevent the tools from optimizing them away. To
solve this challenge we leverage three flags:
• ALLOW_COMBINATORIAL_LOOPS: prevents feedback
• KEEP: prevents the component/wire from being removed
• DONT_TOUCH: prevents the component/wire from being
loops from being flagged as errors
optimized away.
FPGA. FPGAs contain arrays of programmable logic blocks
7.2.1
and configurable interconnects, laid out in a regular pattern, which
allow designers to implement circuits rapidly and at low cost. Logic
gates, e.g., NAND gates, are implemented using Look-Up Tables
(LUTs). LUTs encode an input to output function that emulates the
behavior of the circuit they are implementing. FPGA logic blocks
are categorized into slices, where each slice contains (in our FPGA):
4 logic-function generators (i.e., LUTs) with 6 inputs to 2 outputs, 8
RingRAM(1)
RingRAM(3)
RingRAM(5)
RingRAM(7)
RingRAM(5)+Active Learning
RingRAM(5)+Active Learning+Active Aging
Table 3: Artix 7 overhead and performance
Utilization
Timing
LUT LUTRAM FF WNS Max Freq
1
593MHz
418MHz
6
288MHz
10
208MHz
14
233MHz
18
19
220MHz
8.315ns
7.609ns
6.527ns
5.197ns
5.713ns
5.449ns
0
0
0
0
1
1
2
2
2
2
8
9
storage elements, wide-function multiplexers, and carry logic [43].
As a single RingRAM cell requires two NAND gates, we implement
up to four RingRAM cells per slice.
The major challenge with implementing RingRAM on an FPGA
is maintaining symmetry given the fixed and closed-source nature
of FPGA physical layouts. We bypass the auto-router by forcing
the placement of each RingRAM cell and the ports used on the LUT
to connect the components together. To meet our tightly-packed
requirement, we use vertically stacked LUTs for the NAND gates
of a RingRAM cell, because vertically-stacked slices are directly
connected via fixed wires. To minimize skewing the delay on our
enable wires (i.e., meet our symmetry requirement), we place an
enable buffer either in proximity to two symmetrical LUTs or in
an adjacent slice. Figure 10 shows the results of our automated
RingRAM placement and routing tool on a Xilinx Artix-7 FPGA.
Table 3 show the hardware area and timing cost of the various
RingRAM design-space options.
7.2.2 ASIC. An ASIC implementation of RingRAM engenders a
more symmetrical and compact design than is possible in FPGA and
discrete implementations. This is possible because ASIC implemen-
tations are not restricted by the fixed placement and routing options
provided by FPGAs. Area overhead is also reduced compared to
FPGA implementations, because there are no wasted transistors:
our FPGA implementation wastes the majority of a LUT’s capabil-
ity. As Figure 11 illustrates, our ASIC RingRAM implementation
requires eight transistors (four per NAND gate). This provides near-
SRAM-levels of density, as traditional SRAM cells consist of six
transistors (two per inverter and two access transistors). Taken
together, ASIC RingRAM implementations, on average, outperform
FPGA implementations for both PUF and TRNG, due to the reduced
systematic variation and structural bias.
RingRAMNAND 1NAND 2O1O2VccVccENOutputArtix-7 tileINTSwitchboxCLBLLSwitchboxSliceA6LUT A6LUT A5O1O2A6A5O6O5A4A3A2A1A5A4A3A2A1LUT B6LUT B5MUXBUF               ENOutputLUT C6LUT C5LUT D6LUT D5RingRAMNAND 1NAND 2VddVddENOutputO1O2667RingRAM: A Unified Hardware Security
Primitive for IoT Devices that Gets Better with Age
Metric
RO [28, 36]
y
t
i
r
u
c
e
S
F
U
P
G
N
R
T
Single-use
Aging Resilient
Thermal Resilient
Voltage Resilient
Reliability
Uniformity
Uniqueness
Unbounded
Throughput