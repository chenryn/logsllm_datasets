### Advanced Server Package Compatibility with Oracle

Advanced Server offers a collection of packages designed to provide compatibility with Oracle packages. A package is a named, organized group of functions, procedures, variables, cursors, user-defined record types, and records, all referenced using a common qualifier, the package identifier. Packages have several key characteristics:

- **Organization and Privileges**: Packages offer a convenient way to organize related functions and procedures. Access to these functions and procedures is controlled by a single privilege granted for the entire package. All components within a package must be referenced using a common name.
- **Public and Private Entities**:
  - **Public Entities**: Functions, procedures, variables, and types can be declared as public, making them visible and accessible to other programs that have EXECUTE privileges on the package. For public functions and procedures, only their signatures (names, parameters, and return types) are visible. The actual SPL code remains inaccessible, ensuring that applications depend only on the signature and not the underlying logic.
  - **Private Entities**: These entities are only accessible and usable within the package itself. They cannot be referenced by external applications, providing encapsulation and internal use.
- **Overloading**: Functions and procedures within a package can be overloaded, allowing multiple definitions with the same name but different signatures. This feature enables the creation of identically named programs that handle different types of input.

For detailed information on package support in Advanced Server, refer to the [Database Compatibility for Oracle Developers Built-in Package Guide](https://www.enterprisedb.com/resources/product-documentation). For a list of built-in packages, see Chapter 3, "Built-In Packages," in the guide.

---

### Object-Oriented Programming in SPL

This chapter discusses how object-oriented programming (OOP) techniques can be implemented in SPL. OOP, as seen in languages like Java and C++, revolves around the concept of objects, which represent real-world entities such as people, places, or things. The generic description or definition of a particular object, such as a person, is called an object type. Specific instances, like "Joe" or "Sally," are objects of the person object type.

#### Important Notes
- **Terminology**: The terms "database objects" and "objects" used earlier in this document should not be confused with object types and objects in this context. Database objects refer to entities like tables, views, indexes, and users, while object types and objects here refer to specific data structures in SPL.
- **Oracle Compatibility**: In Oracle, object types are referred to as abstract data types (ADTs) in PL/SQL. The SPL implementation of object types is designed to be compatible with Oracle ADTs.
- **Feature Implementation**: Advanced Server has not yet implemented all features of OOP languages. This chapter covers only the implemented features.

### Basic Object Concepts

An object type is a definition of an entity, characterized by two main components:

- **Attributes**: Fields that describe the characteristics of an object instance. For example, a person object might have attributes like name, address, gender, date of birth, height, weight, eye color, and occupation.
- **Methods**: Programs that perform operations on or related to an object. For a person object, methods might include calculating age, displaying attributes, or changing attribute values.

#### Attributes
- **Data Types**: Attributes can have various data types, including base types (e.g., NUMBER, VARCHAR2), other object types, or globally defined collection types (e.g., nested tables, varray).
- **Initialization**: Each attribute gets an initial value (which may be null) when an object instance is created. Each instance has its own set of attribute values.

#### Methods
- **Member Methods**: Procedures or functions that operate within the context of an object instance, having access to and the ability to modify the instance's attributes.
- **Static Methods**: Procedures or functions that operate independently of any specific instance and do not have access to or the ability to change instance attributes.
- **Constructor Methods**: Functions used to create an instance of an object type. A default constructor is always provided when an object type is defined.

#### Overloading Methods
- **Overloaded Methods**: Multiple methods with the same name but different signatures (number and types of parameters) can be defined within an object type. This allows for methods that perform similar tasks on different types of input.

### Object Type Components

Object types are created and stored in the database using two constructs in SPL:

- **Object Type Specification**: Defines the public interface, including attributes and method signatures.
- **Object Type Body**: Contains the implementation of the methods specified in the object type specification.

#### Syntax

**Object Type Specification:**
```sql
CREATE [ OR REPLACE ] TYPE name
[ AUTHID { DEFINER | CURRENT_USER } ]
{ IS | AS } OBJECT
( { attribute { datatype | objtype | collecttype } }
[, ...]
[ method_spec ] [, ...]
[ constructor ] [, ...]
) [ [ NOT ] { FINAL | INSTANTIABLE } ] ...;
```

**Method Specification:**
```sql
[ [ NOT ] { FINAL | INSTANTIABLE } ] ...
[ OVERRIDING ]
subprogram_spec
```

**Subprogram Specification:**
```sql
{ MEMBER | STATIC }
{ PROCEDURE proc_name
[ ( [ SELF [ IN | IN OUT ] name ]
[, parm1 [ IN | IN OUT | OUT ] datatype1
[ DEFAULT value1 ] ]
[, parm2 [ IN | IN OUT | OUT ] datatype2
[ DEFAULT value2 ]
] ...)
]
|
FUNCTION func_name
[ ( [ SELF [ IN | IN OUT ] name ]
[, parm1 [ IN | IN OUT | OUT ] datatype1
[ DEFAULT value1 ] ]
[, parm2 [ IN | IN OUT | OUT ] datatype2
[ DEFAULT value2 ]
] ...)
]
RETURN return_type
}
```

**Constructor:**
```sql
CONSTRUCTOR func_name
[ ( [ SELF [ IN | IN OUT ] name ]
[, parm1 [ IN | IN OUT | OUT ] datatype1
[ DEFAULT value1 ] ]
[, parm2 [ IN | IN OUT | OUT ] datatype2
[ DEFAULT value2 ]
] ...)
]
RETURN self AS RESULT
```

**Notes:**
- The `OR REPLACE` option can be used to add, delete, or modify methods but not attributes. Use `DROP TYPE` to delete an existing object type before re-creating it.
- The `ALTER TYPE ALTER ATTRIBUTE` command can change the data type of an attribute but cannot add or delete attributes.

#### Object Type Body

**Syntax:**
```sql
CREATE [ OR REPLACE ] TYPE BODY name
{ IS | AS }
method_spec [...]
[constructor] [...]
END;
```

**Subprogram Specification:**
```sql
{ MEMBER | STATIC }
{ PROCEDURE proc_name
[ ( [ SELF [ IN | IN OUT ] name ]
[, parm1 [ IN | IN OUT | OUT ] datatype1
[ DEFAULT value1 ] ]
[, parm2 [ IN | IN OUT | OUT ] datatype2
[ DEFAULT value2 ]
] ...)
]
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
statement; ...
[ EXCEPTION
WHEN ... THEN
statement; ...]
END;
|
FUNCTION func_name
[ ( [ SELF [ IN | IN OUT ] name ]
[, parm1 [ IN | IN OUT | OUT ] datatype1
[ DEFAULT value1 ] ]
[, parm2 [ IN | IN OUT | OUT ] datatype2
[ DEFAULT value2 ]
] ...)
]
RETURN return_type
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
statement; ...
[ EXCEPTION
WHEN ... THEN
statement; ...]
END;
```

**Constructor:**
```sql
CONSTRUCTOR func_name
[ ( [ SELF [ IN | IN OUT ] name ]
[, parm1 [ IN | IN OUT | OUT ] datatype1
[ DEFAULT value1 ] ]
[, parm2 [ IN | IN OUT | OUT ] datatype2
[ DEFAULT value2 ]
] ...)
]
RETURN self AS RESULT
{ IS | AS }
[ declarations ]
BEGIN
statement; ...
[ EXCEPTION
WHEN ... THEN
statement; ...]
END;
```

**Notes:**
- The `PRAGMA AUTONOMOUS_TRANSACTION` directive sets the procedure or function as an autonomous transaction.
- Declarations include variables, cursors, types, and subprograms. Subprogram declarations must follow other declarations.
- Statements are SPL program statements.

### Creating Object Types

To create an object type, use the `CREATE TYPE` command for the specification and the `CREATE TYPE BODY` command for the body. This section provides detailed examples and explanations for creating and managing object types in Advanced Server.

---

Copyright Â© 2007 - 2018 EnterpriseDB Corporation. All rights reserved.