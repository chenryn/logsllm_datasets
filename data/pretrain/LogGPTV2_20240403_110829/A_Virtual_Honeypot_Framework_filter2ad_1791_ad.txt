is possible to actively counter worm propagation by
immunizing infected hosts that contact our virtual
honeypots. Analogous to Moore et al. [17], we can
model the eﬀect of immunization on worm propaga-
tion by using the classic SIR epidemic model [13].
The model states that the number of newly infected
hosts increases linearly with the product of infected
hosts, fraction of susceptible hosts and contact rate.
The immunization is represented by a decrease in
new infections that is linear in the number of in-
fected hosts:
= −β i(t)s(t)
= β i(t)s(t) − γ i(t)
= γ i(t),
ds
dt
di
dt
dr
dt
where at time t, i(t) is the fraction of infected hosts,
s(t) the fraction of susceptible hosts and r(t) the
fraction of immunized hosts. The propagation speed
of the worm is characterized by the contact rate β
and the immunization rate is represented by γ.
We simulate worm propagation based on the pa-
rameters for a Code-Red like worm [15, 17]. We
use 360,000 susceptible machines in a 232 address
space and set the initial worm seed to 150 infected
machines. Each worm launches 50 probes per sec-
ond and we assume that the immunization of an an
infected machine takes one second after it has con-
tacted a honeypot. The simulation measures the
eﬀectiveness of using active immunization by vir-
tual honeypots. The honeypots start working after
a time delay. The time delay represents the time
that is required to detect the worm and install the
immunization code. We expect that immunization
code can be prepared before a vulnerability is ac-
tively exploited. Figure 11 shows the worm prop-
agation resulting from a varying number of instru-
mented honeypots. The graph on the left shows the
results if the honeypots are brought online an hour
after the worm started spreading. The graph on the
right shows the results if the honeypots can be ac-
tivated within twenty minutes.
If we wait for an
hour, all vulnerable machines on the Internet will
be infected. Our chances are better if we start the
honeypots after twenty minutes. In that case, a de-
ployment of about 262,000 honeypots is capable of
stopping the worm from spreading to all susceptible
00:00:0000:36:0001:12:0001:48:0002:24:0000.250.50.751PopulationInfected hostsSusceptible hostsImmunized hosts00.250.50.751Population00.250.50.751Population00:00:0000:36:0001:12:0001:48:0002:24:00Time00.250.50.751Population00:00:0000:36:0001:12:0001:48:0002:24:0000.250.50.751PopulationInfected hostsSusceptible hostsImmunized hosts00.250.50.751Population00.250.50.751Population00:00:0000:36:0001:12:0001:48:0002:24:00Time00.250.50.751Populationhosts. Ideally, we detect new worms automatically
and immunize infected machines when a new worm
has been detected.
Alternatively, it would be possible to scan the In-
ternet for vulnerable systems and remotely patch
them. For ethical reasons, this is probably unfea-
sible. However, if we can reliably detect an infected
machine with our virtual honeypot framework, then
active immunization might be an appropriate re-
sponse. For the Blaster worm, this idea has been
realized by Oudot et al. [18].
5.3 Spam Prevention
The Honeyd framework can be used to under-
stand how spammers operate and to automate the
identiﬁcation of new spam which can then be sub-
mitted to collaborative spam ﬁlters.
In general, spammers abuse two Internet services:
proxy servers [10] and open mail relays. Open prox-
ies are often used to connect to other proxies or to
submit spam email to open mail relays. Spammers
can use open proxies to anonymize their identity to
prevent tracking the spam back to its origin. An
open mail relay accepts email from any sender ad-
dress to any recipient address. By sending spam
email to open mail relays, a spammer causes the
mail relay to deliver the spam in his stead.
To understand how spammers operate we use
the Honeyd framework to instrument networks with
open proxy servers and open mail relays. We make
use of Honeyd’s GRE tunneling capabilities and tun-
nel several C-class networks to a central Honeyd
host.
We populate our network space with randomly
chosen IP addresses and a random selection of ser-
vices. Some virtual hosts may run an open proxy
and others may just run an open mail relay or a
combination of both.
When a spammer attempts to send spam email
via an open proxy or an open mail relay, the email is
automatically redirected to a spam trap. The spam
trap then submits the collected spam to a collabo-
rative spam ﬁlter.
At this writing, Honeyd has received and pro-
cessed more than six million spam emails from over
1, 500 diﬀerent IP addresses. A detailed evaluation
is the subject of future work.
Figure 12: Using the Honeyd framework, it is possible
to instrument networks to automatically capture spam
and submit it to collaborative ﬁltering systems.
6 Related Work
Cohen’s Deception Toolkit provides a framework
to write services that seem to contain remotely ex-
ploitable vulnerabilities [6]. Honeyd operates one
level above that by providing a framework to create
virtual honeypots that can run any number of ser-
vices. The Deception Toolkit could be one of the
services running on a virtual honeypot.
There are several areas of research in TCP/IP
stack ﬁngerprinting, among them: eﬀective methods
to classify the remote operating system either by ac-
tive probing or by passive analysis of network traﬃc,
and defeating TCP/IP stack ﬁngerprinting by nor-
malizing network traﬃc.
Fyodor’s Nmap uses TCP and UDP probes to
determine the operating system of a host [9]. Nmap
collects the responses of a network stack to diﬀerent
queries and matches them to a signature database to
determine the operating systems of the queried host.
Nmap’s ﬁngerprint database is extensive and we use
it as the reference for operating system personalities
in Honeyd.
Instead of actively probing a remote host to deter-
mine its operating systems, it is possible to identify
the remote operating system by passively analyzing
its network packets. P0f [29] is one such tool. The
TCP/IP ﬂags inspected by P0f are similar to the
data collected in Nmap’s ﬁngerprint database.
On the other hand, Smart et al. show how to de-
feat ﬁngerprinting tools by scrubbing network pack-
ets so that artifacts identifying the remote operat-
ing system are removed [22]. This approach is sim-
ilar to Honeyd’s personality engine as both systems
change network packets to inﬂuence ﬁngerprinting
tools. In contrast to the ﬁngerprint scrubber that re-
moves identiﬁable information, Honeyd changes net-
work packets to contain artifacts of the conﬁgured
operating system.
High-interaction virtual honeypots can be con-
structed using User Mode Linux (UML) or
Vmware [27]. One example is ReVirt which can re-
construct the state of the virtual machine for any
point in time [7]. This is helpful for forensic analy-
sis after the virtual machine has been compromised.
Although high-interaction virtual honeypots can be
fully compromised, it is not easy to instrument thou-
sands of high-interaction virtual machines due to
their overhead. However, the Honeyd framework
allows us to instrument unallocated network space
with thousands of virtual honeypots. Furthermore,
we may use a combination of Honeyd and virtual
machines to get the beneﬁt of both approaches. In
this case, Honeyd provides network facades and se-
lectively proxies connections to services to backends
provided by high-interaction virtual machines.
7 Conclusion
Honeyd is a framework for creating virtual hon-
eypots. Honeyd mimics the network stack behavior
of operating systems to deceive ﬁngerprinting tools
like Nmap and Xprobe.
We gave an overview of Honeyd’s design and ar-
chitecture and showed how Honeyd’s personality en-
gine can modify packets to match the ﬁngerprints of
other operating systems and how it is possible to
create arbitrary virtual routing topologies.
Our performance measurements showed that a
single 1.1 GHz Pentium III can simulate thousands
of virtual honeypots with an aggregate bandwidths
of over 30 MBit/s and that it can sustain over two
thousand TCP transactions per second. Our experi-
mental evaluation showed that Honeyd is eﬀective in
creating virtual routing topologies and successfully
fools ﬁngerprinting tools.
We showed how the Honeyd framework can be
deployed to help in diﬀerent areas of system secu-
rity, e.g., worm detection, worm countermeasures,
or spam prevention.
Honeyd is freely available as source code and can
be downloaded from http://www.citi.umich.edu/
u/provos/honeyd/.
8 Acknowledgments
I thank Marius Eriksen, Peter Honeyman, Patrick
McDaniel and Bennet Yee for careful reviews and
suggestions. Jamie Van Randwyk, Dug Song and
Eric Thomas also provided helpful suggestions and
contributions.
References
[1] Oﬁr Arkin and Fyodor Yarochkin. Xprobe v2.0:
A “Fuzzy” Approach to Remote Active Operating
System Fingerprinting. www.xprobe2.org, August
2002.
[2] Steven M. Bellovin.
Security problems in the
TCP/IP protocol suite. Computer Communications
Review, 19:2:32–48, 1989.
[3] Smoot Carl-Mitchell and John S. Quarterman. Us-
ing ARP to Implement Transparent Subnet Gate-
ways. RFC 1027, October 1987.
[4] CERT. Cert advisory ca-2001-26 nimda worm. www.
cert.org/advisories/CA-2001-26.html, Septem-
ber 2001.
[5] CERT. Cert advisory ca-2003-20 w32/blaster worm.
www.cert.org/advisories/CA-2003-20.html, Au-
gust 2003.
[6] Fred Cohen. The Deception Toolkit. http://all.
net/dtk.html, March 1998. Viewed on May 12th,
2004.
[7] George W. Dunlap, Samuel T. King, Sukru Cinar,
Murtaza Basrai, and Peter M. Chen. ReVirt: En-
abling Intrusion Analysis through Virtual-Machine
Logging and Replay.
In Proceedings of the 2002
Symposium on Operating Systems Design and Im-
plementation, December 2002.
[8] Kevin Fall. Network Emulation in the VINT/NS
Simulator. In Proceedings of the fourth IEEE Sym-
posium on Computers and Communications, July
1999.
[9] Fyodor.
Remote OS Detection via TCP/IP
www.nmap.org/nmap/
October
Stack Fingerprinting.
nmap-fingerprinting-article.html,
1998.
[10] S. Glassman. A Caching Relay for the World Wide
Web.
In Proceedings of the First International
World Wide Web Conference, pages 69–76, May
1994.
[11] S. Hanks, T. Li, D. Farinacci, and P. Traina.
Generic Routing Encapsulation (GRE). RFC 1701,
October 1994.
[12] S. Hanks, T. Li, D. Farinacci, and P. Traina.
Generic Routing Encapsulation over IPv4 networks.
RFC 1702, October 1994.
[13] Herbert W. Hethcote. The Mathematics of Infec-
tious Diseases. SIAM Review, 42(4):599–653, 2000.
Intrusion Detection. Secure Networks Whitepaper,
August 1998.
[14] C. Kreibich and J. Crowcroft. Automated NIDS Sig-
nature Generation using Honeypots. Poster paper,
ACM SIGCOMM 2003, August 2003.
[15] D. Moore, C. Shannon, and J. Brown. Code-Red:
A Case Study on The Spread and Victims of an In-
ternet Worm. In Proceedings of the 2nd ACM Inter-
net Measurement Workshop, pages 273–284. ACM
Press, November 2002.
[16] David Moore, Vern Paxson, Stefan Savage, Colleen
Shannon, Stuart Staniford, and Nicholas Weaver.
Inside the Slammer Worm. IEEE Security and Pri-
vacy, 1(4):33–39, July 2003.
[17] David Moore, Colleen Shannon, Geoﬀrey Voelker,
and Stefan Savage. Internet Quarantine: Require-
ments for Containing Self-Propagating Code.
In
Proceedings of the 2003 IEEE Infocom Conference,
April 2003.
[18] Laurent Oudot. Fighting worms with honeypots:
honeyd vs msblast.exe.
lists.insecure.org/
lists/honeypots/2003/Jul-Sep/0071.html, Au-
gust 2003. Honeypots mailinglist.
[19] Vern Paxson. Bro: A System for Detecting Network
Intruders in Real-Time. In Proceedings of the 7th
USENIX Security Symposium, January 1998.
[20] Jon Postel. Transmission Control Protocol. RFC
793, September 1981.
[21] Thomas Ptacek and Timothy Newsham. Insertion,
Evasion, and Denial of Service: Eluding Network
[22] Matthew Smart, G. Robert Malan, and Farnam Ja-
hanian. Defeating TCP/IP Stack Fingerprinting.
In Proceedings of the 9th USENIX Security Sympo-
sium, August 2000.
[23] Dug Song, Robert Malan, and Robert Stone. A
Snapshot of Global Worm Activity. Technical re-
port, Arbor Networks, November 2001.
[24] Lance Spitzner. Honeypots: Tracking Hackers. Ad-
dison Wesley Professional, September 2002.
[25] Stuart Staniford, Vern Paxson, and Nicholas
Weaver. How to 0wn the Internet in your Spare
Time. In Proceedings of the 11th USENIX Secuirty
Symposium, August 2002.
[26] W. R. Stevens. TCP/IP Illustrated, volume 1.
Addison-Wesley, 1994.
[27] Jeremy Sugerman, Ganesh Venkitachalam,
, and
Beng-Hong Lim.
Virtualizing I/O Devices on
VMware Workstation’s Hosted Virtual Machine
Monitor.
In Proceedings of the Annual USENIX
Technical Conference, pages 25–30, June 2001.
[28] David Wagner and Paolo Soto. Mimicry Attacks on
Host-Based Intrusion Detection Systems.
In Pro-
ceedings of the 9th ACM Conference on Computer
and Communications Security, November 2002.
[29] Michal Zalewski and William Stearns. Passive
www.stearns.org/p0f/
OS Fingerprinting Tool.
README. Viewed on January 12th, 2003.