work 
关注 conf 和 webapps 目录即可。conf 目录与非常重要的 tomcat 配置文件比如登录帐号
所在的 tomcat-users.xml；域名绑定目录、端口、数据源(部分情况)、SSL 所在的 server.xml；
数据源配置所在的 context.xml 文件，以及容器初始化调用的 web.xml。 
源码下载： 
Tomcat6：http://svn.apache.org/repos/asf/tomcat/tc6.0.x/tags/TOMCAT_6_0_18/ 
Tomcat7：http://svn.apache.org/repos/asf/tomcat/tc7.0.x/trunk/ 
2.2 
Tomcat 默认配置 
1、tomcat-users.xml 
Tomcat5 默认配置了两个角色：tomcat、role1。其中帐号为 both、tomcat、role1 的默认
密码都是 tomcat。不过都不具备直接部署应用的权限，默认需要有 manager 权限才能够直
接部署 war 包，Tomcat5 默认需要安装 Administration Web Application。Tomcat6 默认没有配
置任何用户以及角色，没办法用默认帐号登录。  
配置详解：http://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html#Introduction 
第 167 页 
2、context.xml 
Tomcat 的上下文，一般情况下如果用 Tomcat 的自身的数据源多在这里配置。找到数据
源即可用对应的帐号密码去连接数据库。 
    WEB-INF/web.xml 
3、 server.xml 
Server 这个配置文件价值非常高，通常的访问端口、域名绑定和数据源可以在这里找到，
如果想知道找到域名对应的目录可以读取这个配置文件。如果有用 Https，其配置也在这里
面能够找到。 
4、 web.xml 
web.xml 之前讲 MVC 的时候有提到过，项目初始化的时候会去调用这个配置文件这个
文件一般很少有人动但是不要忽略其重要性，修改 web.xml 可以做某些 YD+BT 的事情。 
2.3 
Tomcat 获取 WebShell 
Tomcat 后台部署 war 获取 WebShell 
登录 tomcat 后台：http://xxx.com/manager/html，一般用 WAR file to deploy 就行了，
Deploy directory or WAR file located on server 这种很少用。 
1> Deploy directory or WAR file located on server 
Web 应用的 URL 入口、XML 配置文件对应路径、WAR 文件或者该 Web 应用相对于
/webapps 目录的文件路径，然后单击 按钮，即可发布该 Web 应用，发布后在 Application
列表中即可看到该 Web 应用的信息。这种方式只能发布位于/webapps 目录下的 Web 应用。 
2>WAR file to deploy 
选择需要发布的 WAR 文件，然后单击 Deploy，即可发布该 Web 应用，发布后在
Application 列表中即可看到该 Web 应用的信息。这种方式可以发布位于任意目录下的 Web
应用。 
第 168 页 
其中，第二种方式实际上是把需要发布的 WAR 文件自动复制到/webapps 目录下，所
以上述两种方式发布的 Web 应用都可以通过在浏览器地址栏中输入
http://localhost:8080/Web 进行访问。 
Tips: 
当访问 xxxx.com 找不到默认管理地址怎么办? 
1: http://xxxx.com/manager/html 查看是否存在 
2:ping xxxx.com 获取其 IP 地址，在访问：http://111.111.111.111/manager/html 
3:遍历 server.xml 配置读取配置 
2.4 
Tomcat 口令爆破 
Tomcat 登录比较容易爆破，但是之前说过默认不对其做任何配置的时候爆破是无效的。 
Tomcat的认证比较弱，Base64(用户名:密码)编码，请求：” /manager/html/”如果响应码不是
401（未经授权：访问由于凭据无效被拒绝。）即登录成功。 
conn.setRequestProperty("Authorization", "Basic " + new 
BASE64Encoder().encode((user + ":" + pass).getBytes())); 
2.5 
Tomcat 漏洞 
Tomcat5-6-7 安全性并不完美，总是被挖出各种稀奇古怪的安全漏洞。在 CVE 和 Tomcat
官网也有相应的漏洞信息详情。 
怎样找到 Tomcat 的历史版本: 
http://archive.apache.org/dist/tomcat/  
第 169 页 
Tomcat 历史版本漏洞? 
Tomcat 官网安全漏洞公布： 
Apache Tomcat - Apache Tomcat 5 漏洞： 
http://tomcat.apache.org/security-5.html  
Apache Tomcat - Apache Tomcat 6 漏洞： 
http://tomcat.apache.org/security-6.html 
Apache Tomcat - Apache Tomcat7 漏洞： 
http://tomcat.apache.org/security-7.html 
CVE  通用漏洞与披露: 
http://cve.scap.org.cn/cve_list.php?keyword=tomcat&action=search&p=1  
Cvedetails ： 
http://www.cvedetails.com/product/887/Apache-Tomcat.html?vendor_id=45  
http://www.cvedetails.com/vulnerability-list/vendor_id-45/product_id-887/Apache-Tomca
t.html  
Sebug: 
http://sebug.net/appdir/Apache+Tomcat  
怎样发现 Tomcat 有那些漏洞? 
1、通过默认的报错页面（404、500 等）可以获取到 Tomcat 的具体版本，对照 Tomcat
漏洞。 
2、利用 WVS 之类的扫描工具可以自动探测出对应的版本及漏洞。 
怎样快速确定是不是 Tomcat? 
请求响应为:Server:Apache-Coyote/1.1 就是 tomcat 了。 
Tomcat 稀奇古怪的漏洞： 
Tomcat 的安全问题被爆过非常多，漏洞统计图： 
有一些有意思的漏洞，比如：Insecure default password CVE-2009-3548(影响版本: 
6.0.0-6.0.20) 
The Windows installer defaults to a blank password for the administrative user. If this is not 
第 170 页 
changed during the install process, then by default a user is created with the name admin, roles 
admin and manager and a blank password.在 windows 安装版 admin 默认空密码漏洞，其实是
用户安装可能偷懒，没有设置密码…. 
这样的问题在 tar.gz 和 zip 包里面根本就不会存在。有些漏洞看似来势汹汹其实鸡肋得不行
如：Unexpected file deletion in work directory CVE-2009-2902 都已经有 deploy 权限了，闹
个啥。 
Tomcat 非常严重的漏洞（打开 Tomcat security-5、6、7.html 找）： 
Important: Session fixation CVE-2013-2067 (6.0.21-6.0.36) 
Important: Denial of service CVE-2012-3544 (6.0.0-6.0.36) 
Important: Denial of service CVE-2012-2733 (6.0.0-6.0.35) 
Important: Bypass of security constraints CVE-2012-3546 (6.0.0-6.0.35) 
Important: Bypass of CSRF prevention filter CVE-2012-4431 (6.0.30-6.0.35) 
Important: Denial of service CVE-2012-4534 (6.0.0-6.0.35) 
Important: Information disclosure CVE-2011-3375 (6.0.30-6.0.33) 
Important: Authentication bypass and information disclosure CVE-2011-3190 (6.0.0-6.0.33) 
(………………………………………………….) 
Important: Directory traversal CVE-2008-2938 (6.0.18) 
Important: Directory traversal CVE-2007-0450 (6.0.0-6.0.9) 
如果英文亚历山大的同学，对应的漏洞信息一般都能够在中文的 sebug 找到。 
Sebug： 
第 171 页 
CVE  通用漏洞与披露： 
第 172 页 
3、Resin 
Resin 是 CAUCHO 公司的产品，是一个非常流行的 application server，对 servlet 和 JSP
提供了良好的支持，性能也比较优良，resin 自身采用 JAVA 语言开发。 
Resin 比较有趣的是默认支持 PHP! Resin 默认通过 Quercus 动态的去解析 PHP 文件请
求。（Resin3 也支持，详情：http://zone.wooyun.org/content/2467） 
3.1 
Resin 版本 
Resin 主流的版本是 Resin3 和 Resin4，在文件结构上并没有多大的变化。Resin 的速度和
效率非常高，但是不知怎么 Resin 似乎对 Quercus 更新特别多。 
4.0.x 版本更新详情：http://www.caucho.com/resin-4.0/changes/changes.xtp 
3.1.x 版本更新详情：http://www.caucho.com/resin-3.1/changes/changes.xtp 
3.2 
Resin 默认配置 
1、resin.conf 和 resin.xml 
Tomcat 和Rsin 的核心配置文件都在conf 目录下，Resin3.1.x 默认是resin.conf 而4.0.x
默认是resin.xml。resin.conf/resin.xml是Resin 最主要配置文件，类似Tomcat 的server.xml。 
1>数据源: 
第一节的时候有谈到 resin 数据源就是位于这个文件，搜索 database（位于 server 标
签内）即可定位到具体的配置信息。 
2>域名绑定 
搜索 host 即可定位到具体的域名配置，其中的 root-directory 是域名绑定的对应路径。
很容易就能够找到域名绑定的目录了。 
      ^([^/]*).javaweb.org 
3.3 
Resin 默认安全策略 
1>管理后台访问权限 
Resin 比较 BT 的是默认仅允许本机访问管理后台，这是因为在 resin.conf 当中默认配置
禁止了外部 IP 请求后台。修改为 true 外
部才能够访问。 
第 173 页 
2>Resin 后台管理密码 
Resin 的管理员密码需要手动配置，在 resin.conf/resin.xml 当中搜索 management。即可
找到不过需要注意的是 Resin 的密码默认是加密的，密文是在登录页自行生成。比如 admin
加密后的密文大概会是：yCGkvrQHY7K8qtlHsgJ6zg== 看起来仅是 base64 编码不过不只是
admin 默认的 Base64 编码是：YWRtaW4= Resin,翻了半天 Resin 终于在文档里面找到了：
http://www.caucho.com/resin-3.1/doc/resin-security.xtp  
虽说是MD5+Base64加密但是怎么看都有点不对，下载Resin源码找到加密算法： 
package com.caucho.server.security.PasswordDigest 
第 174 页 
第 175 页 
这加密已经没法反解了，所以就算找到 Resin 的密码配置文件应该也没法破解登录密码。
事实上 Resin3 的管理后台并没有其他 Server（相对 JBOSS 和 Weblogic）那么丰富。而 Resin4
的管理后台看上去更加有趣。 
Resin4 的加密方式和 Resin3 还不一样改成了 SSHA： 
admin_user : admin 
admin_password : {SSHA}XwNZqf8vxNt5BJKIGyKT6WMBGxV5OeIi 
详情：http://www.caucho.com/resin-4.0/admin/security.xtp  
Resin3： 
Resin4： 
第 176 页 
3.4 
Resin 获取 WebShell 
As of Resin 4.0.0, it is now possible to deploy web applications remotely to a shared 
repository that is distributed across the cluster. This feature allows you to deploy once to any 
triad server and have the application be updated automatically across the entire cluster. When a 
new dynamic server joins the cluster, the triad will populate it with these applications as well. 
Web Deploy war 文件大概是从 4.0.0 开始支持的，不过想要在 Web deploy 一个应用也不
是一件简单的事情，首先得先进入后台。然后还得以 Https 方式访问。不过命令行下部署就
没那没法麻烦。Resin3 得手动配置 web-app-deploy。 最简单的但又不爽办法就是想办法把
war 文件上传到 resin-pro-3.1.13\webapps 目录下，会自动部署（就算 Resin 已启动也会自动
部署，不影响已部署的应用）。 
Resin3 部署详情：http://www.caucho.com/resin-3.1/doc/webapp-deploy.xtp  
Resin4 部署 War 文件详情：http://www.caucho.com/resin-4.0/admin/deploy.xtp 
Resin4 进入后台后选择 Deploy,不过还得用 SSL 方式请求。Resin 要走一个”非加密通道”。 
To deploy an application remotely:  
1. log into the resin-admin console on any triad server. Make sure you are 
connecting over SSL, as this feature is not available over a non-encrypted 
channel.  
第 177 页 
2. Browse to the "webapp" tab of the resin-admin server and at the bottom of 
the page, enter the virtual host, URL, and local .war file specifying the web 
application, then press "Deploy".  
3. The application should now be deployed on the server. In a few moments, all 
the servers in the cluster will have the webapp.  
Resin4 敢 不 敢 再 没 节 操 点 ？ 默 认 HTTPS 是 没 有 开 的 。 需 要 手 动 去 打 开 : 
\conf\resin.properties 
# https         : 8443 默认 8443 端口是关闭的，取消这一行的注释才能够使用 HTTPS
方式访问后台才能够 Web Deploy war。 
第 178 页 
部署成功访问: http://localhost:8080/GetShell/Customize.jsp 即可获取 WebShell。 
3.5 
Resin 漏洞 
Resin 相对 Tomcat 的安全问题来说少了很多，Cvedetails 上的 Resin 的漏洞统计图： 