### 4.70
### 4.88
### 3.94
### 3.92
### 12,741
### 108,770
### 20,311
### 19,714
### 120,065
### 56,320
### 4.09
### 3.77
### 5.00
### 5.19
### 4.47
### 4.23
### 9,813
### 115,449
### 19,535
### 20,197
### 109,831
### 54,965
### 3.15
### 4.01
### 4.81
### 5.32
### 4.09
### 4.12
### 13,502
### 115,974
### 20,599
### 21,203
### 128,396
### 59,935
### 4.33
### 4.02
### 5.07
### 5.58
### 4.78
### 4.76

In the first line, we replace the Java environment with the instrumented JRE. Lines 2 and 3 are JVM flags for the ZooKeeper server and client, respectively. We add two files: the source and sink files, which contain user specifications for taint source and sink points. These are specified in the form of Java method descriptors. When a method is specified as a taint source point, its return value is tainted. When a method is specified as a taint sink point, we check if its parameters are tainted before executing the method body.

On average, we modify 10 lines of code (LOC) in launch scripts for systems in Table III, without needing to modify or inspect the source code of these distributed systems. Compared to DisTA, other tools like FlowDist [24] require significantly more effort. FlowDist instruments different APIs for different systems and requires users to perform instrumentation four times and conduct three different kinds of analysis. For example, users must run FlowDist four times to instrument the source/sink points setting logic, method, branch, and instruction-level taint propagation code, respectively. This makes the taint tracking process quite complicated.

Based on these results, we draw the following conclusion for RQ2: DisTA can be easily applied to different distributed systems.

### F. Overhead

To evaluate the overhead of DisTA, we run each case three times and record its execution time. The first run is without any taint tracking, i.e., the original execution. The second run is on Phosphor, which only performs intra-node taint tracking. The third run is on DisTA, which performs both intra-node and inter-node taint tracking.

We do not consider evaluating the network and memory overhead. As introduced in Section III-D, DisTA transfers a fixed-length byte array (4 bytes by default) storing the Global ID for every data byte, introducing about 5X network overhead. For memory, DisTA directly utilizes Phosphor’s taint store design, thus introducing similar memory overhead as Phosphor. Since Phosphor has evaluated its memory overhead (1X - 8X, 2.7X average), we do not re-evaluate it.

**Micro Benchmark:**
The evaluation results for micro benchmarks are shown in Table V. JRE Socket consists of 22 cases, so we list the best (JRE Socket-Best), worst (JRE Socket-Worst), and average (JRE Socket-Avg) values. Compared to the original execution time (Column Phosphor/Time), DisTA causes 2.14X overhead at best and 6.21X at worst (Column DisTA/Overhead). Although this seems like a significant overhead, comparing DisTA's 3.95X overhead (Column DisTA/Overhead) with Phosphor's 2.62X overhead (Column Phosphor/Overhead), we find that the pure inter-node taint tracking does not introduce much additional overhead.

**Real-World Distributed Systems:**
The results for real-world distributed systems are shown in Table VI. Taint tracking in real-world systems causes higher overhead in both Phosphor (3.92X and 4.12X) and DisTA (4.23X and 4.76X). This is reasonable given the complexity of real-world systems. Compared to intra-node taint tracking, DisTA introduces a relatively small extra overhead for inter-node taint tracking. For SDT scenarios, it causes 0.31X (4.23X - 3.92X) extra overhead. For SIM scenarios, it causes 0.64X (4.76X - 4.12X) extra overhead.

**SDT vs. SIM:**
By comparing the evaluation results for taint tracking in SDT (Specific Data Trace) and SIM (System Input/Output Monitor) scenarios, we can determine the performance degradation caused by the Taint Map. In SDT scenarios, the overhead is 4.23X on average, while in SIM scenarios, it is 4.76X. The number of global taints recorded in the Taint Map ranges from one to six in SDT scenarios and from 54 to 327 in SIM scenarios. We notice that the overhead does not increase significantly with the number of global taints.

Based on the above results and analysis, we conclude for RQ3: DisTA introduces slight overhead compared to intra-node taint tracking and is scalable for multiple taints.

### VI. Discussion

**Support for Specific JNI Methods:**
In Section III-B, we mainly consider standard network communication JNI methods in the JRE. However, distributed system developers can design their own native communication libraries and corresponding JNI methods, where taint cannot be directly tracked by DisTA. To support these methods, users can follow the three instrumentation ways and extend our instrumentation interfaces to instrument them.

**Handling Implicit Flows:**
Handling implicit flows (control flows) is an important problem for taint tools. For DisTA, we only guarantee the correctness of taint tracking in inter-node taint tracking, i.e., from the message sending JNI method to the receiving JNI method. The correctness of taint propagation within a single node from the source/sink points to the instrumented JNI methods is guaranteed by the intra-node taint tracking tool Phosphor [22]. Since Phosphor is not perfect in handling implicit flows, DisTA inherits this limitation.

**Comparison with Other Tools:**
We did not perform any comparison experiments. We introduced three different taint tracking tools in Section II-D. Taint-Exchange [23] is for x86 binaries and cannot be applied to Java programs. Kakute [14] is specific for Spark and aims to track RDDs. The best comparison subject is FlowDist [24], but its static analysis implementation is too complex to run, and we failed to reproduce its experiments.

**Threats to Validity:**
The main threats to our experiments relate to the representativeness of our selected test cases. We designed several network communication scenarios as our micro benchmark, including standard JRE APIs and third-party communication libraries. All the communication protocols and APIs in them are widely used in the Java ecosystem. For systems in Table III, all are widely used and cover diverse architectures, such as leader-follower and peer-to-peer, and network protocols like Netty, YarnRPC, and HTTP. Thus, we believe our selected cases in both the micro benchmark and real-world distributed systems are representative.

### VII. Related Works

**Static Taint Tracking Tools:**
Static taint tracking is a powerful approach for security tasks like privacy leak detection because it can theoretically cover all possible paths in code and has no impact on runtime performance. Researchers have presented several static tools for small-scale programs. STILL [36] can detect exploit code in web requests. FlowDroid [37] can precisely detect data leaks within Android applications. IccTA [38] extends FlowDroid to detect privacy leaks between multiple components. However, network communication in distributed systems is much more complex and non-deterministic, making static analysis imprecise and unsound.

**Dynamic Taint Tracking Tools in Different Platforms:**
Dytan [16], libdft [29], TaintEraser [21], TaintPipe [39], and NeuTaint [40] can track taints for C-based programs but do not consider taint propagation in network communication, making them unsuitable for distributed systems. Titian [41] is a prior work to Kakute [14] and is specifically designed for data tracking in Spark. It is not portable to other systems. TaintDroid [2] customizes Android’s specific Binder framework to track IPC messages between applications, making it unsuitable for Java-based distributed systems.

### VIII. Conclusion

Existing DTA tools cannot support inter-node taint tracking for distributed systems or are designed for specific distributed systems and require specific modifications. We developed DisTA, a generic dynamic taint tracking tool for Java-based distributed systems. DisTA aims to be sound and precise in taint tracking and easy to use. It instruments common network communication modules in the JRE at the JNI level and tracks taints at the single-byte granularity. Experimental results on both micro benchmarks and real-world distributed systems show that DisTA achieves all its goals.

### IX. Acknowledgments

We thank the anonymous reviewers and our shepherd, Jun Xu, for their constructive suggestions. This work was partially supported by the National Natural Science Foundation of China (62072444, 61732019), the Frontier Science Project of the Chinese Academy of Sciences (QYZDJSSW-JSC036), and the Youth Innovation Promotion Association at the Chinese Academy of Sciences (2018142).

---

This version of the text is more structured, coherent, and professional. It includes clear headings and subheadings, and the content is organized in a logical and readable manner.