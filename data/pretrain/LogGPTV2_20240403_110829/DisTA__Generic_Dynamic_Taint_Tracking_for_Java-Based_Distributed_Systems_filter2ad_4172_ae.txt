4.70
4.88
3.94
3.92
12,741
108,770
20,311
19,714
120,065
56,320
4.09
3.77
5.00
5.19
4.47
4.23
9,813
115,449
19,535
20,197
109,831
54,965
3.15
4.01
4.81
5.32
4.09
4.12
13,502
115,974
20,599
21,203
128,396
59,935
4.33
4.02
5.07
5.58
4.78
4.76
At Line 1, we replace the Java environment by the instru-
mented JRE. Line 2 and 3 are JVM ﬂags for ZooKeeper server
and client respectively. Note that we add two ﬁles here, i.e.,
the source and sink ﬁles, which contains the user speciﬁcation
for taint source and sink points. They are speciﬁed in the form
of Java method descriptors. When a method is speciﬁed as a
taint source point, its return value is tainted. When a method
is speciﬁed as a taint sink point, we check if its parameters
are tainted before its method body execution.
On average, we modify 10 LOC in launch scripts for sys-
tems in Table III, and do not need to modify or inspect source
code in these distributed systems. Compared with DisTA, other
tools such as FlowDist [24] require much more efforts to work.
FlowDist
instruments different APIs for different systems.
Furthermore, it requires users to perform instrumentation for
4 times and 3 different kinds of analysis. For example, users
must run FlowDist for 4 times to instrument the source / sink
points setting logic, method, branch and instruction level taint
propagation code respectively. This makes the taint tracking
process quite complicated.
Based on these results, we draw the following conclusion
for RQ2: DisTA can be easily applied on different distributed
systems.
F. Overhead
To evaluate the overhead of DisTA, we run each case three
times and record its execution time. At the ﬁrst time, we run
the case without tracking any taints, i.e, the original execution.
Then, we run the case on Phosphor, i.e., only intra-node taint
tracking. Last, we run the case on DisTA, i.e., both intra-node
and inter-node taint tracking.
Note that we do not consider evaluating the network and
memory overhead. As introduced in Section III-D, DisTA
transfers a ﬁxed length byte array (4 bytes in default) storing
Global ID for every data byte. Thus, DisTA should introduce
about 5X network overhead. For the memory aspect, DisTA
directly utilizes Phosphor’s taint store design. Thus, it should
introduce the similar memory overhead as Phosphor. Since
Phosphor has evaluated its memory overhead (1X - 8X, 2.7X
average), we do not evaluate it again.
Micro benchmark. The evaluation results for micro bench-
marks are shown in Table V. Note that JRE Socket consists
of 22 cases, so we list the best (JRE Socket-Best) and worst
(JRE Socket-Worst) scenarios as well as the average (JRE
Socket-Avg) values. Compared with the original execution
time (Column Phosphor/Time), DisTA causes 2.14X overhead
at best, and 6.21X at worst (Column DisTA/Overhead). It
seems a huge overhead. However, comparing with the 3.95X
overhead caused by DisTA (Column DisTA/Overhead) and
Phosphor’s 2.62X overhead (Column Phosphor/Overhead), we
ﬁnd out the pure inter-node taint tracking does not bring in
much overhead.
Real-world distributed systems. The results are shown in
Table VI. Compared with results in the micro benchmark,
taint tracking in real-world distributed systems causes higher
overhead in both Phosphor (3.92X and 4.12X) and DisTA
(4.23X and 4.76X). We think the results are reasonable, since
real-world systems are much more complex. Compared with
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:27 UTC from IEEE Xplore.  Restrictions apply. 
556
the intra-node taint tracking, DisTA causes a relatively small
extra overhead in inter-node taint tracking. For SDT scenarios,
it causes 0.31X (4.23X - 3.92X). For SIM scenarios, it causes
0.64X (4.76X - 4.12X).
SDT vs SIM. By comparing the evaluation results in taint
tracking in SDT (Speciﬁc data trace) scenarios and SIM
(System input / output monitor) scenarios, we can ﬁgure out
the performance degradation caused by Taint Map. In SDT
scenarios, the overhead is 4.23X in average, while it is 4.76X
in SIM scenarios. Then, we compare the number of global
taints recorded in Taint Map in both kinds of scenarios. In SDT
scenarios, the minimum number of global taints is one, and
the maximum is six. In comparison, the minimum number of
global taints is 54, and the maximum is 327 in SMT scenarios.
We notice that the overhead does not increase signiﬁcantly
with the number of global taints increases.
Based on the above results and analysis, we draw the con-
clusion for RQ3: DisTA introduces slight overhead comparing
to the intra-node taint tracking, and is scalable for multiple
taints.
VI. DISCUSSION
Support for speciﬁc JNI methods. In Section III-B, we
mainly consider standard network communication JNI meth-
ods in JRE. However, distributed system developers can design
their own native communication libraries and corresponding
JNI methods, in which the taint cannot be directly tracked
by DisTA. To support these methods, users can follow the
three instrumentation ways and extend our instrumentation
interfaces to instrument them.
Implicit ﬂows handling. How to handle implicit ﬂows
tracking
(control ﬂows) is an important problem for taint
tools. For DisTA, we only guarantee the correctness of taint
tracking in inter-node taint tracking, i.e., from the message
sending JNI method to the receiving JNI method. As to the
correctness of the taint propagation within the single node
from the source / sink points to the instrumented JNI methods,
it is guaranteed by the intra-node taint tracking tool Phosphor
[22]. Considering that Phosphor is still not perfect on implicit
ﬂows handling, we declare that DisTA inherits the limitation
on Phosphor.
Comparison with other tools. We do not perform any
comparison experiment. We introduce three different
taint
tracking tools in Section II-D. Taint-Exchange [23] is for x86
binaries, it cannot be applied to Java programs. Kakute [14] is
speciﬁc for Spark, and aims to the RDD tracking scenario. The
best comparison subject is FlowDist [24]. However, its static
analysis implementation is too complex to run. We failed to
reproduce its experiments.
Threats to validity. The main threats to our experiments
are related to the representativeness of our selected test cases.
We design a number of network communication scenarios
as our micro benchmark. These cases include the standard
JRE APIs and third-party communication libraries. All the
communication protocols and APIs in them are widely used
in Java ecosystem. For systems in Table III, all of them are
widely used and cover a diverse set of architectures, i.e.,
leader-follower and peer-to-peer, and network protocols, e.g.,
Netty, YarnRPC, and HTTP. Thus, we believe our selected
cases in both the micro benchmark and real-world distributed
systems are representative.
VII. RELATED WORKS
In this section, we discuss related works that are not
discussed in previous sections.
Static taint
tracking tools. Static taint
tracking is a
powerful approach for security tasks such as privacy leak
detection, because it can cover all possible paths in code
theoretically. Moreover, it has no impact on runtime perfor-
mance. Researchers have presented several static tools for
small scale programs. STILL [36] can detect exploit code in
web request. FlowDroid [37] can precisely detect data leaks
within Android applications. IccTA [38] extends FlowDroid to
detect privacy leaks between multiple components. However,
network communication in distributed systems is much more
complex and non-deterministic. The dynamic message data
and uncertain sending / receiving timing can make static
analysis imprecise and unsound.
Dynamic taint tracking tools in different platforms.
Dytan [16],
libdft [29], TaintEraser [21], TaintPipe [39],
and NeuTaint [40] can track taints for C-based programs.
These tools do not consider taint propagation in network
communication. Thus, they cannot be applied for distributed
systems. Titian [41] is a prior work than Kakute [14] which
is also speciﬁcally designed for data tracking in Spark. It
is not portable for other systems. TaintDroid [2] customizes
Android’s speciﬁc Binder framework to track IPC messages
between applications. It is designed for Android platform, so
it cannot be applied to Java-based distributed systems, either.
VIII. CONCLUSION
Existing DTA tools cannot support inter-node taint tracking
for distributed systems, or are designed for speciﬁc distributed
systems and require speciﬁc modiﬁcations. We develop DisTA,
a generic dynamic taint tracking tool for Java-based distributed
systems. DisTA aims to be sound and precise in taint tracking,
and easy to use. It instruments common network communica-
tion modules in JRE at the JNI level, and tracks taints in the
single byte granularity. The experimental results on both the
micro benchmark and real-world distributed systems show that
DisTA achieves all its goals.
IX. ACKNOWLEDGE
We thank the anonymous reviewers and our shepherd,
Jun Xu, for their constructive suggestions. This work was
partially supported by National Natural Science Foundation
of China (62072444, 61732019), Frontier Science Project of
Chinese Academy of Sciences (QYZDJSSW-JSC036), and
Youth Innovation Promotion Association at Chinese Academy
of Sciences (2018142).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:27 UTC from IEEE Xplore.  Restrictions apply. 
557
REFERENCES
[1] J. Newsome and D. X. Song, “Dynamic taint analysis: Automatic
detection, analysis, and signature generation of exploit attacks on
commodity software,” in Proceedings of the Network and Distributed
System Security Symposium (NDSS), 2005.
[2] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox,
J. Jung, P. McDaniel, and A. N. Sheth, “TaintDroid: An information-
ﬂow tracking system for realtime privacy monitoring on smartphones,”
ACM Transactions on Computer Systems (TOCS), vol. 32, no. 2, pp.
1–29, 2014.
[3] A. Yip, X. Wang, N. Zeldovich, and M. F. Kaashoek, “Improving
application security with data ﬂow assertions,” in Proceedings of ACM
SIGOPS Symposium on Operating Systems Principles (SOSP), 2009, pp.
291–304.
[4] P. Dhoolia, S. Mani, V. S. Sinha, and S. Sinha, “Debugging model-
transformation failures using dynamic tainting,” in Proceedings of Eu-
ropean Conference on Object-Oriented Programming (ECOOP), 2010,
pp. 26–51.
[5] M. Ganai, D. Lee, and A. Gupta, “DTAM: Dynamic taint analysis
of multi-threaded programs for relevancy,” in Proceedings of ACM
SIGSOFT International Symposium on the Foundations of Software
Engineering (FSE), 2012, pp. 1–11.
[6] T. R. Leek, G. Z. Baker, R. E. Brown, M. A. Zhivich, and R. Lipp-
mann, “Coverage maximization using dynamic taint tracing,” MAS-
SACHUSETTS INST OF TECH LEXINGTON LINCOLN LAB, Tech.
Rep., 2007.
[7] E. J. Schwartz, T. Avgerinos, and D. Brumley, “All you ever wanted to
know about dynamic taint analysis and forward symbolic execution (but
might have been afraid to ask),” in Proceedings of IEEE Symposium on
Security and Privacy (SP), 2010, pp. 317–331.
mapreduce.
Avail-
able: https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/
hadoop-mapreduce-client-core/MapReduceTutorial.html
[8] (2008)
[Online].
Apache
hadoop
[9] (2015) Apache spark. [Online]. Available: https://spark.apache.org/
[10] (2007) Apache hbase. [Online]. Available: https://hbase.apache.org/
[11] (2016) Apache cassandra. [Online]. Available: https://cassandra.apache.
[12] (2010) Apache zookeeper. [Online]. Available: https://zookeeper.apache.
org/
org/
[13] D. Ongaro and J. Ousterhout, “In search of an understandable consen-
sus algorithm,” in Proceedings USENIX Annual Technical Conference
(ATC), 2014, pp. 305–319.
[14] J. Jiang, S. Zhao, D. Alsayed, Y. Wang, H. Cui, F. Liang, and Z. Gu,
“Kakute: A precise, uniﬁed information ﬂow analysis system for big-
data security,” in Proceedings of Annual Computer Security Applications
Conference (ACSAC), 2017, pp. 79–90.
[15] J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and M. Rosenblum,
“Understanding data lifetime via whole system simulation,” in USENIX
Security Symposium, 2004, pp. 321–336.
[16] J. Clause, W. Li, and A. Orso, “Dytan: A generic dynamic taint analysis
framework,” in Proceedings of the International Symposium on Software
Testing and Analysis (ISSTA), 2007, pp. 196–206.
[17] J. Jung, A. Sheth, B. Greenstein, D. Wetherall, G. Maganis, and
T. Kohno, “Privacy oracle: A system for ﬁnding application leaks with
black box differential testing,” in Proceedings of the ACM Conference
on Computer and Communications Security (CCS), 2008, pp. 279–288.
[18] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas, “Secure program
execution via dynamic information ﬂow tracking,” ACM SIGPLAN
Notices, vol. 39, no. 11, pp. 85–96, 2004.
[19] N. Vachharajani, M. J. Bridges, J. Chang, R. Rangan, G. Ottoni, J. A.
Blome, G. A. Reis, M. Vachharajani, and D. I. August, “RIFLE: An
architectural framework for user-centric information-ﬂow security,” in
Proceedings of International Symposium on Microarchitecture (MICRO),
2004, pp. 243–254.
org/
[20] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda, “Panorama:
Capturing system-wide information ﬂow for malware detection and
analysis,” in Proceedings of the ACM Conference on Computer and
Communications Security (CCS), 2007, pp. 116–127.
[21] D. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall, “TaintEraser:
Protecting sensitive data leaks using application-level taint tracking,”
ACM SIGOPS Operating Systems Review, vol. 45, no. 1, pp. 142–154,
2011.
[22] J. Bell and G. Kaiser, “Phosphor: Illuminating dynamic data ﬂow in
commodity jvms,” in Proceedings of ACM International Conference on
Object Oriented Programming Systems Languages Applications (OOP-
SLA), 2014, pp. 83–101.
[23] A. Zavou, G. Portokalidis, and A. D. Keromytis, “Taint-exchange:
A generic system for cross-process and cross-host taint tracking,” in
Proceedings of International Workshop on Security, 2011, pp. 113–128.
[24] X. Fu and H. Cai, “FlowDist: Multi-staged reﬁnement-based dynamic
information ﬂow analysis for distributed software systems,” in Proceed-
ings of the 30th USENIX Security Symposium (USENIX Security), 2021,
pp. 2093–2110.
[25] (2008) Apache hadoop yarn. [Online]. Available: https://hadoop.apache.
org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html/
[26] (2019) Apache activemq. [Online]. Available: https://activemq.apache.
[27] (2012) RocketMQ. [Online]. Available: https://rocketmq.apache.org/
[28] (2002) ASM. [Online]. Available: https://asm.ow2.io/
[29] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D. Keromytis, “libdft:
Practical dynamic data ﬂow tracking for commodity systems,” in Pro-
ceedings of ACM SIGPLAN/SIGOPS Conference on Virtual Execution
Environments (VEE), 2012, pp. 121–132.
[30] X. Fu and H. Cai, “A dynamic taint analyzer for distributed systems,” in
Proceedings of ACM Joint Meeting on European Software Engineering
Conference and Symposium on the Foundations of Software Engineering
(ESEC/FSE), 2019, pp. 1115–1119.
[31] (2020)
Package
Avail-
https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/
java.lang.instrument.
[Online].
able:
package-summary.html
[32] (2013) etcd. [Online]. Available: https://etcd.io/
[33] (2003) Netty project. [Online]. Available: https://netty.io/
[34] (2012) STOMP: The Simple Text Oriented Messaging Protocol.
[Online]. Available: https://stomp.github.io/
[35] (2008) Protocol buffers. [Online]. Available: https://developers.google.
com/protocol-buffers
[36] X. Wang, Y.-C. Jhi, S. Zhu, and P. Liu, “STILL: Exploit code detection
via static taint and initialization analyses,” in Proceedings of Annual
Computer Security Applications Conference (ACSAC), 2008, pp. 289–
298.
[37] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel, “FlowDroid: Precise context,
ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for android
apps,” in Proceedings of ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), 2014, pp. 259–269.
[38] L. Li, A. Bartel, T. F. Bissyand´e, J. Klein, Y. Le Traon, S. Arzt,
S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel, “Iccta: Detecting
inter-component privacy leaks in android apps,” in Proceedings of
IEEE/ACM International Conference on Software Engineering (ICSE),
2015, pp. 280–291.
[39] J. Ming, D. Wu, G. Xiao, J. Wang, and P. Liu, “Taintpipe: Pipelined
symbolic taint analysis,” in Proceedings of USENIX Security Symposium,
2015, pp. 65–80.
[40] D. She, Y. Chen, A. Shah, B. Ray, and S. Jana, “Neutaint: Efﬁcient
dynamic taint analysis with neural networks,” in Proceedings of IEEE
Symposium on Security and Privacy (SP), 2020, pp. 1527–1543.
[41] M. Interlandi, K. Shah, S. D. Tetali, M. A. Gulzar, S. Yoo, M. Kim,
T. Millstein, and T. Condie, “Titian: Data provenance support in spark,”
vol. 9, no. 3, p. 216, 2015.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:27:27 UTC from IEEE Xplore.  Restrictions apply. 
558