  * 服务器已指示将使用Unicode编码字符串（已设置Negotiate UnicodeFlags）。
  * 服务器支持NTLM身份验证（Negotiate NTLM）。
  * 服务器提供的Target Name将被填充并代表一个域（”Target Type Domain”Flags已设置并且该域名存在于”Target Name Security Buffer”中）。
  * 服务器正在提供目标信息结构（已设置Negotiate目标信息）。此结构存在于目标信息（Target Info）安全缓冲区（域名” DOMAIN “，服务器名称” SERVER “，DNS域名” domain.com “和DNS服务器名称” server.domain.com “）中。
  * 服务器生成的challenge是” 0x0123456789abcdef “。
  * 空上下文。
请注意，Target Name采用Unicode格式（由”NegotiateUnicode”Flags指定）。
服务器创建Type 2消息后，它将发送给客户端。客户端的Type 3消息中提供了对服务器质询的响应。
## Type 3消息
| Description | Content  
---|---|---  
0 | NTLMSSP Signature | Null-terminated ASCII “NTLMSSP” (0x4e544c4d53535000)  
8 | NTLM Message Type | long (0x03000000)  
12 | LM/LMv2 Response | security buffer  
20 | NTLM/NTLMv2 Response | security buffer  
28 | Target Name | security buffer  
36 | User Name | security buffer  
44 | Workstation Name | security buffer  
(52) | Session Key (optional) | security buffer  
(60) | Flags (optional) | long  
(64) | OS Version Structure (Optional) | 8 bytes  
52 (64) (72) | start of data block  
Type 3消息是身份验证的最后一步。此消息包含客户对Type 2质询的响应，这证明客户端无需直接发送密码进行认证而使用NTLM HASH认证。Type
3消息还指示身份验证目标（域或服务器名称）和身份验证帐户的用户名，以及客户端工作站名称。
请注意，Type 3消息中的Flags是可选的；较旧的客户端在消息中既不包含Session Key也不包含Flags。通过实验确定，Type 3
Flags（如果包含）在面向连接的身份验证中不带有任何其他语义。它们似乎对身份验证或会话安全性都没有任何明显的影响。发送Flags的客户端通常会非常紧密地镜像已建立的Type
2设置。可能会将Flags作为已建立选项的”提醒”发送，以允许服务器避免缓存Negotiate的设置。但是，Type 3
Flags在数据报样式身份验证期间是有意义的的 。
LM/LMv2和NTLM/NTLMv2响应是安全缓冲区，其中包含根据用户的密码响应Type 2质询而创建的答复。下一节概述了生成这些响应的过程。
target
name是一个安全缓冲区，其中包含身份验证领域，其中身份验证帐户具有成员身份（域帐户的域名，或本地计算机帐户的服务器名）。根据Negotiate的编码，它可以是Unicode或OEM。
user name是包含身份验证帐户名的安全缓冲区。根据Negotiate的编码，它可以是Unicode或OEM。
workstation name是包含客户端工作站名称的安全缓冲区。根据Negotiate的编码，它可以是Unicode或OEM。
session key值在Key交换期间由会话安全性机制使用；”会话安全性”部分将对此进行详细讨论 。
当在Type 2消息中建立了”Negotiate Local Call”时，Type 3消息中的安全缓冲区通常都为空（零长度）。客户端”采用”在Type
2消息中发送的SSPI上下文，从而有效地避免了计算适当响应的需求。
OS版本结构与前面描述的格式相同。
同样，Type 3消息有一些变体：
版本1-Session
Key，Flags和OS版本结构被省略。在这种情况下，数据块在”工作站名称”安全缓冲区标头之后的偏移量52处开始。此格式在基于Win9x的较旧系统中可见。
版本2-包含Session
Key和Flags，但不包含OS版本结构。在这种情况下，数据块在Flags字段之后的偏移量64处开始。这种形式在大多数现成的Windows版本中都可以看到，并且在Open
Group的ActiveX参考文档（第11.2.4节）中有大致记录。。
版本3-Session Key，Flags和OS版本结构均存在。数据块从OS版本结构开始，偏移量为72。此格式是在相对较新的Service
Pack中引入的，并且可以在Windows 2000，Windows XP和Windows 2003的当前修补版本中看到。
###  名称可变性（Name Variations）
除了消息的布局变化之外，user和Target Name还可以在Type 3消息中以几种不同的格式显示。通常情况下，”User
Name”字段将使用Windows帐户名称填充，而”Target Name”将使用NT域名填充。但是，用户名和/或域也可以采用Kerberos样式的”
[PI:EMAIL](mailto:PI:EMAIL)”格式进行多种组合。已经支持多种变体，并具有一些可能的含义如下表：
Format | Type 3 Field Content | Notes  
---|---|---  
DOMAINuser | User Name = “user”Target Name = “DOMAIN” | Target Name=“
DOMAIN”这是“常规”格式； 用户名字段包含Windows用户名，目标名包含NT样式的NetBIOS域或服务器名。  
domain.comuser | User Name = “user”Target Name = “domain.com” | Target
Name=“ domain.com”在此，Type 3消息中的“Target
Name”字段填充有DNS域名/领域名称（对于本地计算机帐户，则为标准DNS主机名）。  
user[@DOMAIN](https://github.com/DOMAIN "@DOMAIN") | User Name =
“user[@DOMAIN](https://github.com/DOMAIN "@DOMAIN")”Target Name is empty |
Target Name为空在这种情况下，“Target Name”字段为空（零长度），而“用户名”字段使用Kerberos样式的“ user @
realm”格式。 但是，使用NetBIOS域名代替DNS域。 已经观察到，本地计算机帐户不支持此格式。 此外，NTLMv2 /
LMv2身份验证似乎不支持此格式。  
[PI:EMAIL](mailto:PI:EMAIL) | User Name =
“[PI:EMAIL](mailto:PI:EMAIL)”Target Name is empty |
类型3消息中的Target Name字段为空； “用户名”字段包含Kerberos样式的“ user @
realm”格式以及DNS域。本地计算机帐户似乎不支持此方式。  
###  应答challenge（Responding to the Challenge）
客户端创建一个或多个对Type 2质询的响应，并将响应以Type 3消息发送给服务器。有六种Type 的响应：
  * LM（LAN管理器）响应-由大多数较旧的客户端发送，这是”原始”响应Type 。
  * NTLM响应-这是由基于NT的客户端（包括Windows 2000和XP）发送的。
  * NTLMv2响应-一种较新的返回类型，Windows NT Service Pack 4中引入更新的响应Type。它替换了启用了NTLMv2的系统上的NTLM响应。
  * LMv2响应-替换NTLMv2系统上的LM响应。
  * NTLM2会话响应-在未经NTLMv2身份验证的情况下Negotiate NTLM2会话安全性时使用，此方案会更改LM和NTLM响应的语义。
  * 匿名响应(Anonymous Response)-建立匿名上下文时使用；不会显示实际凭据，也不会进行真正的身份验证。”Stub”字段显示在Type 3消息中。
有关这些方案的更多信息，强烈建议您阅读Christopher
Hertel的[《实现CIFS》](http://ubiqx.org/cifs)，尤其是有关[身份验证的部分](http://ubiqx.org/cifs/SMB.html#SMB.8)。
响应(responses)用作客户端拥有密码口令的间接证明。客户端使用密码导出LM和/或NTLM哈希（在下一节中讨论）；这些值依次用于计算对challenge的适当响应。域控制器（或本地计算机帐户的服务器）存储LM和NTLM哈希作为密码；当从客户端收到响应时，这些存储的值将用于计算适当的响应值，并将其与客户端发送的响应值进行比较。匹配会成功验证用户。
请注意，与Unix密码哈希不同，LM和NTLM哈希在响应计算的上下文中是与密码等效的。它们必须受到保护，因为即使不知道实际密码本身，也可以使用它们来通过网络对用户进行身份验证。（注：也就是说知道密码和指导哈希是同样的都可以用于认证）
**LM响应（The LM Response）**
LM响应是由大多数客户端发送的。此方案比NTLM响应要旧，并且安全性较低。虽然较新的客户端支持NTLM响应，但它们通常会同时发送这两个响应以与旧服务器兼容。因此，在支持NTLM响应的许多客户端中，仍然存在LM响应中存在的安全漏洞。
LM响应的计算方式如下（有关 Java中的示例实现，请参阅附录D）：
  1. 首先将用户密码（作为OEM字符串）转换为大写。
  2. 将其填充为14个字节，不足则用0填充。
  3. 将此固定长度的密码分为两个7字节。
  4. 这些值做为两个DESKey（每个7字节为一个）。
  5. 这些Key中的每一个都用于对特定的ASCII字符串”KGS!@#$%” 进行DES加密（产生两个8字节密文值）。
  6. 将这两个密文值连接起来以形成一个16字节的值-LM哈希。
  7. 16字节的LM哈希被空填充为21个字节。
  8. 该值分为三个7字节。
  9. 这些值用于创建三个DESKey。
  10. 这些Key中的每一个都用于对来自Type 2消息的质询进行DES加密（产生三个8字节密文值）。
  11. 将这三个密文值连接起来形成一个24字节的值。这就是LM的回应。  
如果用户的密码长度超过15个字符，则主机或域控制器将不会为该用户存储LM哈希。在这种情况下，LM响应不能用于认证用户。仍会生成一个响应并将其放置在LM响应字段中，并使用16字节的空值（0x00000000000000000000000000000000000000）作为计算中的LM哈希。该值将被目标忽略。（注：平时在利用工具时LM字段可以放置空值即可）
最好用一个详细的例子说明响应计算过程。考虑一个密码为” SecREt01 “ 的用户，它响应Type 2质询” 0x0123456789abcdef “。
  1. 密码（作为OEM字符串）将转换为大写，并以十六进制的形式给出” SECRET01 “（或” 0x5345435245543031 “）。
  2. 将其填充为14个字节，为” 0x534543524554303031000000000000 “。
  3. 此值分为两个7字节，即” 0x53454352455430 “和” 0x31000000000000 “。
  4. 这两个值用于创建两个DESKey。DESKey的长度为8个字节；每个字节包含7位Key材料和1个奇偶校验位（根据基础DES的实现，可以检查或不检查奇偶校验位）。我们的第一个7字节值” 0x53454352455430 “将以二进制形式表示为：  
01010011 01000101 01000011 01010010 01000101 01010100
00110000此值的未经奇偶校验调整的DESKey为：0101001 0 1010001 0 0101000 0 0110101 0 0010010 0
0010101 0 0101000 0 0110000 0（奇偶校验位在上方以最后一位显示）。十六进制为” 0x52a2506a242a5060
“。应用奇数奇偶校验以确保每个八位位组中的总置位位数为奇数可得出：0101001 0 1010001 0 0101000 1 0110101 1
0010010 1 0010101 0 0101000 1 0110000 1
这是第一个DESKey（十六进制为” 0x52a2516b252a5161 “）。然后，我们对第二个7字节值” 0x31000000000000 “
应用相同的过程，以二进制表示：
00110001 00000000 00000000 00000000 00000000 00000000 00000000
创建一个非奇偶校验的DESKey可以得到：
0011000 0 1000000 0 0000000 0 0000000 0 0000000 0 0000000 0 0000000 0 0000000
0
（十六进制为” 0x3080000000000000 “）。调整奇偶校验位可得出：
0011000 1 1000000 0 0000000 1 0000000 1 0000000 1 0000000 1 0000000 1 0000000
1
这是我们的第二个DESKey，十六进制为” 0x3180010101010101
“。请注意，如果我们的特定DES实现不强制执行奇偶校验（很多都不强制），则可以跳过奇偶校验调整步骤；然后，将非奇偶校验调整后的值用作DESKey。在任何情况下，奇偶校验位都不会影响加密过程。
  5. 我们的每个Key都用于DES加密常量ASCII字符串”KGS!@#$% “（十六进制为” 0x4b47532140232425 “）。这使我们获得” 0xff3750bcc2b22412 “（使用第一个Key）和” 0xc2265b23734e0dac “（使用第二个Key）。
  6. 这些密文值被连接起来以形成我们的16字节LM哈希-“ 0xff3750bcc2b22412c2265b23734e0dac “。