title:From prey to hunter: transforming legacy embedded devices into exploitation
sensor grids
author:Ang Cui and
Jatin Kataria and
Salvatore J. Stolfo
From Prey To Hunter∗
Transforming Legacy Embedded Devices Into Exploitation Sensor Grids
Department of Computer
Ang Cui
Science
Columbia University
New York NY, 10027, USA
PI:EMAIL
Jatin Kataria
Department of Computer
Science
Columbia University
New York NY, 10027, USA
PI:EMAIL
Salvatore J. Stofo
Department of Computer
Science
New York NY, 10027, USA
Columbia University
PI:EMAIL
ABSTRACT
Our global communication infrastructures are powered by
large numbers of legacy embedded devices. Recent advances
in oﬀensive technologies targeting embedded systems have
shown that the stealthy exploitation of high-value embedded
devices such as router and ﬁrewalls is indeed feasible. How-
ever, little to no host-based defensive technology is available
to monitor and protect these devices, leaving large numbers
of critical devices defenseless against exploitation. We de-
vised a method of augmenting legacy embedded devices, like
Cisco routers, with host-based defenses in order to create a
stealthy, embedded sensor-grid capable of monitoring and
capturing real-world attacks against the devices which con-
stitute the bulk of the Internet substrate. Using a software
mechanism which we call the Symbiote, a white-list based
code modiﬁcation detector is automatically injected in situ
into Cisco IOS, producing a fully functional router ﬁrmware
capable of detecting and capturing successful attacks against
itself for analysis. Using the Symbiote-protected router as
the main component, we designed a sensor system which re-
quires no modiﬁcation to existing hardware, fully preserves
the functionality of the original ﬁrmware, and detects unau-
thorized modiﬁcation of memory within 450 ms. We believe
that it is feasible to use the techniques described in this
paper to inject monitoring and defensive capability into ex-
isting routers to create an early attack warning system to
protect the Internet substrate.
1.
INTRODUCTION
The Internet is a dynamically changing network of many
diﬀerent kinds of devices, predominantly general purpose
hosts and servers connected by a large collection of special-
ized embedded devices. Embedded devices such as routers,
∗Please note that Figures 1 and 2, along with portions of
Section 5 is taken from a companion paper [9], and are
present here so that our exposition has the appropriate back-
ground and completeness.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
switches and ﬁrewalls constitutes the Internet’s communi-
cation substrate. Devices such as VoIP, IPTV, power man-
agement and physical access control units provide a myriad
of other specialized services. Most host-based security tech-
nologies deployed today are designed primarily to protect
general purpose servers and hosts, leaving vast numbers of
embedded devices, the Internet substrate itself, undefended
against exploitation.
We present a new embedded device defense system de-
signed make the internet substrate a safer environment. We
believe it is technically feasible to inject security functional-
ity in situ into legacy embedded systems to:
1. Provide security features to protect these devices against
exploitation and rootkitting.
2. Create a large scale sensor grid providing new detec-
tion capability to identify attacks against embedded
devices that are currently unmonitored.
Recent studies suggest that large populations of vulnera-
ble embedded devices on the Internet are ripe for exploita-
tion [8]. However, examples of successful exploits against
such devices are rarely observed in the wild, despite the
availability of proof-of-concept malware, known vulnerabili-
ties and high monetization potential. We posit that our in-
ability to monitor embedded devices for malware installation
is a factor in this phenomenon. When deployed through-
out the Internet substrate, the sensor system discussed in
this paper will provide visibility into black-box embedded
devices, allowing us to capture and analyze exploitation of
embedded devices in real-time.
As a ﬁrst step to show feasibility, we demonstrate a general
method of transforming existing legacy embedded devices
into exploitation detection sensors. We use Cisco ﬁrmware
and hardware as the main demonstrative platform in this
paper. However, the techniques described are not speciﬁc
to any particular operating system or vendor, and can be
directly applied to many other types of embedded devices.
In order to detect and capture successful attacks against
Cisco routers for analysis, we engineered a system which au-
tomatically injects generic whitelist-based anti-rootkit func-
tionality into standard IOS ﬁrmwares. Once injected, the
augmented router ﬁrmware can be loaded onto physical Cisco
routers, essentially transforming such devices into highly in-
teractive router honeypots. As Section 8 shows, the result-
ing devices are fully functional, and can be deployed into
production environments.
The main challenge of creating an embedded device hon-
eypot rests with the diﬃculties of injecting arbitrary detec-
tion code into proprietary, close-source, embedded devices
with complex and undocumented operating systems. In or-
der to overcome this challenge, we’ve created a software con-
structed called the Symbiote [9]. As Section 5 illustrates, the
Symbiote, along with its payload, is injected in situ into an
arbitrary host binary, in this case, Cisco IOS. The injection
is achieved through a generic process which is agnostic to
the operating environment of the host program. Figure 1
shows how a Symbiote is typically injected into a host pro-
gram. In general, Symbiotes can inject arbitrary host-based
defenses into black-box embedded device ﬁrmwares. For a
full discussion of Symbiotes, please see [9]
The unique capabilities of the Symbiote construct allows
us to overcome the complexities of injecting generic exploita-
tion detection code into what is essentially an unknown
black-box device. The original functionality of resulting
Symbiote-injected embedded device ﬁrmware remains un-
changed. A portion of the router’s computational resources
is diverted to a proof of concept Symbiote payload, which
continuously monitors for unauthorized modiﬁcations to any
static areas within the router’s memory address space, a key
side-eﬀect of rootkit installation. As we demonstrate in Sec-
tion 9, the portion of the CPU diverted to the Symbiote’s
payload is a conﬁgurable parameter, and directly eﬀects the
performance of the Symbiote payload; in this case, the de-
tection latency of any unauthorized modiﬁcation.
A monitoring system is constructed around the main com-
ponent of our system, the Symbiote-injected IOS image. The
Symbiote within the IOS ﬁrmware simultaneously performs
checksums on all protected regions of the router’s memory
while periodically communicating with an external monitor
via a covert channel. In the event of an unauthorized mem-
ory modiﬁcation within the router, the Symbiote will raise
an alarm to the external monitor, which then triggers the
capture and analysis component of our system.
As Section 8 discusses, our monitoring system can be de-
ployed in one of three ways; native deployment, emulated
deployment, and shadow deployment. Due to the unique
limitations of each deployment scenario, the capture and
analysis mechanisms diﬀer slightly. For example, when the
Symbiote-injected ﬁrmware image is loaded into a physi-
cal Cisco router (native deployment), IOS’s own core dump
mechanism is used to capture the router’s runtime state for
analysis. This is less than ideal because, due to the hard-
ware constraint of the Cisco device, we can not guarantee
that the memory capture is performed atomically. Further-
more, since the core dump is generated by IOS’s own (poten-
tially compromised) code, the integrity of the output can not
be fully trusted.
In contrast, when the Symbiote-injected
ﬁrmware is executed within Dynamips, a Cisco router em-
ulator, on a general purpose computer (emulated deploy-
ment), the external monitor triggers a response which halts
emulation of the compromised IOS image before initiating
a full memory dump using the general purpose host com-
puter. Thus, emulated deployment of our sensor can guar-
antee that the capture and analysis process can be done
atomically without relying on potentially compromised code.
Section 8 discusses the tradeoﬀs and advantages of all three
deployments in detail.
Figure 1: Logical overview of SEM injected into em-
bedded device ﬁrmware. SEM maintains control of
CPU by using large-scale randomized control-ﬂow
interception. SEM payload executes alongside orig-
inal OS.
2. MOTIVATION
Several recent studies demonstrate that there are vast
numbers of unsecured, vulnerable embedded devices on the
internet [8], such devices are vulnerable to the same types
of attacks as general purpose computers [3, 12], and can
be systematically exploited in much the same way [1, 3, 5].
For example, various exploitable vulnerabilities [15, 13] and
rootkits [16] have been found and disclosed for Cisco’s router
operating system, IOS. Cisco devices running IOS consti-
tutes a signiﬁcant portion of our global communication in-
frastructure, and are deployed within critical areas of our
residential, commercial, ﬁnancial, government, military and
backbone networks.
Typical of the embedded security landscape, IOS is an
aging system which does not employ standard protection
schemes found within modern operating systems [16], and
does not have any host-based anti-virus to speak of. In fact,
not only is the installation of third-party anti-virus (which
does not yet exist for IOS) not possible via any published OS
interface, any attempt to do so will also violate the vendor’s
EULA and thus void existing support contracts.
Consider the availability of proof-of-concept exploits and
rootkits, the wide gamut of high-value targets which can be
compromised by the exploitation of devices like routers and
ﬁrewalls, and the lack of host-based defenses within close-
source embedded device ﬁrmwares. Such conditions should
make the vast numbers of vulnerable embedded devices on
the Internet highly attractive targets. Indeed, we have ob-
served successful attempts to create botnets using Linux-
based home routers [4]. As Section 4 shows, the necessary
techniques of exploiting Cisco IOS and installing root-kits on
running Cisco routers are well understood. The works pre-
sented within academic and blackhat circles, combined with
anecdotal evidence of the systematic exploitation of embed-
ded network devices within the last decade suggests that
real-world exploitation of Cisco routers is not only possible,
but likely an undetected reality.
Documented cases of embedded device exploitation are
still relatively rare. High-value embedded targets like en-
terprise networking equipment have seemingly eluded ex-
Symbiote ManagerHost ProgramSymbiote Payload= intercept pointploitation.
It is possible that the exploitation of devices
like Cisco routers is still beyond the technical capabilities of
the blackhat community. However, it is far more plausible
that stealthy, targeted attacks against high-value embedded
devices have eluded detection due to our inability to gain
visibility into the internals of such devices. It is quite pos-
sible routers have been successfully attacked and are com-
promised without anyone’s knowledge except the UE sellers
who oﬀer them for sale.
Whether or not stealthy exploitation of embedded de-
vices is a reality today, we can conﬁdently anticipate that
attacks against such defenseless, high-value targets is in-
evitable. Therefore, analysis and mitigation of embedded
device exploitation is crucial to the integrity of the Internet
substrate. We believe that accurate, real-time detection of
such attacks is an important ﬁrst step towards understand-
ing the realities of the embedded security threat. Further-
more, we believe the ability to inject host-based security into
existing legacy devices will be instrumental in mounting a
realistic defense of existing embedded devices.
The Symbiote structure presented in this paper is designed
speciﬁcally to abstract away the technical challenges of in-
jecting third-party security into a diverse range of embedded
devices. This device agnostic foundation allows us to look
beyond speciﬁc hardware and ﬁrmware in order to create a
general body of embedded defense methodologies which can
be feasibly applied to all existing devices.
3. THREAT MODEL
We are interested in detecting, capturing and analyzing
successful injection of rootkits into IOS at runtime. We as-
sume that the attacker is technically sophisticated and has
access to both zero-day vulnerabilities as well as a reliable
rootkit which persistently alters the behavior of the victim
device’s OS, yielding covert root access to the attacker. We
assume that the injected rootkit will patch speciﬁc portions
of the router’s code in order to create a hidden backdoor for
the attacker. In other words, we assume that the rootkit will
alter regions of memory within the router that is meant to be
static during normal execution. Static sections within IOS
ﬁrmware image typically include the .txt, .rodata, .ﬁrmware,
.sdata and large portions of the .data sections. Furthermore,
the boot-loader (rommon) section of the router, as well as all
associated conﬁguration ﬁles (startup conﬁguration, running
conﬁguration, etc) can also be monitored for unauthorized
modiﬁcation.
While our current threat model encompasses all published
IOS rootkitting techniques to date, it is probable that a
covert backdoor can be created within an IOS router with-
out modifying static regions of the router’s memory. The
proposed detection payload will not detect exploits which
leave no persistent change within the victim device. How-
ever, the Symbiote-based injection scheme described in this
paper can be extended to monitor for anomalies within dy-
namic sections of the target device, extending our whitelist-
based detector into a full-blown host-based anomaly detector
(See Section 10).
Furthermore, it is possible for sophisticated attacks to at-
tempt to disable the Symbiote prior to the actual exploita-
tion of the victim device. Since the Symbiote structure de-
scribed in this paper is a software-based defense, absolute
integrity of the Symbiote cannot be guaranteed. In the gen-
eral case, Symbiotes can be fortiﬁed with the introduction of
specialized hardware. However, such a solution is not feasi-
ble when considering the realm of legacy embedded devices.
Instead, Section 6 illustrates a general method of increasing
the computational complexity of a successful bypass of the
Symbiote defense without relying on additional hardware.
4. RELATED WORK
Relatively little work has been done to detect and capture
sophisticated attacks against embedded devices. However,
such problems have been well studied for general purpose
computers and operating systems. Numerous rootkit and
malware detection and mitigation mechanisms have been
proposed in the past but largely target general purpose com-
puters. Commercial products from vendors like Symantec,
Mcafee/Intel, Kapersky and Microsoft [2] all advertise some
form of protection against kernel level rootkits. Kernel in-
tegrity validation and security posture assessment capability
has been integrated into several Network Admission Control
(NAC) systems. These commercial products largely depend
on signature-based detection methods and can be subverted
by well known methods [18, 19, 20]. Sophisticated detec-
tion and prevention strategies have been proposed by the
research community. Virtualization-based strategies using
hypervisors, VMM’s and memory shadowing [17] have been
applied to kernel-level rootkit detection. Others have pro-
posed detection strategies using binary analysis [11], func-
tion hook monitoring [23] and hardware-assisted solutions
to kernel integrity validation [22].
The above strategies may perform well within general pur-
pose computers and well known operating systems but have
not been adapted to operate within the unique characteris-
tics and constraints of embedded device ﬁrmware. Eﬀective
prevention of binary exploitation of embedded devices re-
quires a rethinking of detection strategies and deployment
vehicles.
Our methodology transforms standard legacy embedded
devices into exploitation detectors. This is similar to exist-
ing honeypot-based IDS strategies, which generally involves
the use of intentionally vulnerable systems to log, capture
and analyze attacks levied against it. Many honeypot-based
systems have been proposed. Few focus on the use or protec-
tion of embedded devices. For example, Ghourabi et al. re-