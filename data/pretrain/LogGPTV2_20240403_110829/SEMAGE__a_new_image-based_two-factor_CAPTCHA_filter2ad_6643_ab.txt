HIP (Human Interactional Proofs) and require the users involve-
ment. This also makes usability a key issue in CAPTCHA design.
Tygar et. al. [17] propose the following requirements for a good
CAPTCHA system:
• The task should be easy for humans.
• The task should be difﬁcult for computer algorithms.
• The database should be easy to implement and evaluate.
The general basis of image-based CAPTCHA is that images con-
tain more information than texts. It is intuitive for human to catch
visual cues but hard for AI algorithms to do visual recognition.
ESP-PIX [3] presents a set of images and asks the user to choose a
word from a list of words that describes all images. This approach
suffers from two drawbacks, i.e., it still depends on text to convey
meaning and since all words are written in English, and the user’s
success depends on his/her proﬁciency in English (or any other par-
ticular language it migrates to). It is not only language dependent
but also hard to operate; a user needs to scan through the whole list
of words to ﬁnd the most proper answer. SQ-PIX [7] also presents
user with an image set, but asks the user to select an image of a
given object name, and also trace the object in the image. This is
also language dependent and the act of tracing around an object
with a pointer operated from a hand-held device like a mouse can-
not be assumed to be easy for all users.
Google’s image CAPTCHA “what’s up” [23] asks the user to
adjust the orientation of an image. This system is language inde-
pendent, but the adjustment requires a lot of attention and subtle
mouse (or other hardware) movement. Some images also have am-
biguity as it can be correctly oriented in multiple ways.
Microsoft’s Asirra [20] utilizes an existing database on petﬁnder.com
and presents the user with images of cats and dogs and asks the
user to identify all images of cats out of 12 pets. This platform is
language independent, and requires user to scan through 12 images
and click 6 times on average to be correct. Figure 3 shows a sample
Assira challenge.
Figure 3: An Assira challenge: A user is always required to select
all cats from images of cats and dogs.
Asirra partners with petﬁnder.com and gets access to their huge
database of cats and dogs. But the inherent difﬁculty for the bot
boils down to only classifying each image in either of the two
classes: cats and dogs. This makes Assira more vulnerable to ma-
chine learning attacks [22]. SEMAGE on the other hand has a two-
factor design where in order to pass a challenge the user is required
to recognize each image and then understand and identify the se-
mantic relationship between a subset of them. Assira only requires
the user to solve the ﬁrst level (i.e., image recognition). Utilizing
the semantic correlation between images to create more secure and
user-friendly challenges makes SEMAGE more robust.
3. SEMAGE DESIGN
We propose SEMAGE, “SEmantically MAtching ImaGEs”, a
novel image-based two-factor CAPTCHA system which is built
upon the idea of semantic relationship between images. The use
of semantic meaning of a query has already been applied in other
ﬁelds like web search [24]. We formulate deﬁnitions for semantic
similarity of images and design a system that uses these concepts
to develop a user-friendly and robust CAPTCHA system.
3.1 Intuitive Idea
All image-based CAPTCHA systems have two main components:
a database of images and a “concept” which uses the database to
create challenges. The inherent concept may be as simple as PIX
[8] which displays different images of the same object from the
database and asks the users to assign an appropriate label or a com-
plex one like Cortcha [32] which uses the database to create in-
painted and candidate images and asks the users to place the correct
candidate image in the inpainted image.
The idea behind SEMAGE is to use semantic relationships among
images as the concept and keep the task of the user to simply iden-
tify the semantically similar/related images. The semantic relation-
ship is a concrete description which would bind the similar images.
The freedom of choosing the semantic relationship for one’s appli-
cation and database gives it the much required customization ﬂex-
ibility. For example, for an electronic e-commerce site, SEMAGE
challenge could be formed from the images of the products (an
ipod, a zune, tv, heater, refrigerator etc) where the concept would
be to ask the users to choose products which do the same thing
(ipod and zune in this case, both portable music devices).
SEMAGE presents a set of candidate images with a subset of
them sharing an implicit connection or relationship with each other.
The challenge for the users is to correctly identify all images in the
semantically related subset.
3.2 Deﬁning the Semantic Relationship
We now present the conditions for choosing the “semantically
similar" relationship which forms the ‘concept’ for challenge cre-
ation. A “semantic label” could be a term or a relationship which
identiﬁes/labels the object. Semantic labels can be directly used
to label the database for challenge creation. Let SL(x) denote the
function that returns the semantic label of an object x. We consider
two images to be “Semantically Matching” if they satisfy any of
the following conditions:
• Condition I: if both images can be identiﬁed with the same
semantic label. Given two images A and B, they are said to
be semantically related if SL(A) = SL(B). For example,
an image of a computer and a television set can be deﬁned
with a semantic label(SL) ‘electronics’.
• Condition II: both images can be classiﬁed under the same
semantic label. Given two images A and B, they are seman-
tically related if ∃T s.t. SL(A) ⊂ T & SL(B) ⊂ T , where
T denotes some semantic label. For example an image of
a lion and a deer can be classiﬁed under the semantic label
‘four legged animals’. Similarly, an image of a television
set and a computer can be classiﬁed under the semantic label
‘electronics’.
• Condition III: when both images put together they express
a uniquely identiﬁable concept. Given two images A and
B and some semantic label C that denotes a set of require-
ments, A and B are said to be semantically matching if {A ∪
B} |= C where “|=” denotes that the left hand side satisﬁes
the requirements of right hand side. For example, an image
of a printer and paper can be deﬁned with a identiﬁable con-
cept ‘printing’ which becomes the semantic label.
The requirements for a “semantic relationship” gets more generic
and the semantic correlation increases as we move from Condition
I to III. In order to form a SEMAGE challenge, the images have
to be chosen such that only one subset meets any one of the above
conditions with preference given to the least generic label. That
is, if a set of images contain images that satisfy more than one of
the above conditions, the least generic matching is the solution re-
quired to pass the challenge. Thus, given a set of images where a
small subset of images is of ﬁshes and the rest of the images are of
other unique animals, the solution to the challenge would be select-
ing all images of ﬁshes.
The mechanism may seem complicated but as we show below,
a system designed to create challenges where all solutions satisfy
only one chosen condition is relatively easy to implement. Also
the user study in Section 5 supports our claim that such a system is
intuitive and easy for the normal user to solve. The important thing
after one has decided upon the “semantic relationship" is to label
the images accordingly. We discuss database generation in Section
3.4.
3.3 Challenge Creation
We develop a simple algorithm to create SEMAGE challenges.
First we present the deﬁnitions and requirements of the involved
parameters as follows.
Let n be the number of images in the challenge and m be the
number of similar/related images. Let U be the superset of all im-
age sets in the database. Each challenge set is denoted as S where
|S| = n. There exists a ‘semantically similar’ subset of images
R such that every image in R has the same semantic label, i.e.,
∀ ri, rj ∈ R, SL(ri) = SL(rj) & |R| = m. A set of images D
with |D| = n − m, and each image in D has a different semantic
label than R. Also ∀ di, dj ∈ D, SL(di) 6= SL(dj ) 6= SL(R).
This ensures that all the images in the subset D have a different
semantic label so that the images in subset R remain the unam-
biguous semantically related set. Now each challenge set becomes
S = R ∪ D.
We now present a simple algorithm to implement the challenge
set as shown in Algorithm 1 . The database consists of a collection
of semantically labeled images. The algorithm starts with empty
sets R and D. We then pick a semantic label at random from the
database and populate R with images having the picked semantic
label. Then we populate D with images such that each image has
a different semantic label than any of the images chosen previously
in D and R. The number of images in the R and D depends on the
values of n and m and is customizable. The images in set R and D
are then presented in a random tabular order to the user.
Algorithm 1 : An algorithm to generate SEMAGE challenges from
a labeled database
R ← φ
D ← φ
A ← Pick an Semantic label at random
while |R| 6= m do
X ← (pick a unique image with label A)
R = R ∪ X
end while
Y ← φ
while |D| 6= (n − m) do
Z ← Pick a label at random which is not A ∪ Y
Y ← Y ∪ Z
D = D∪ (pick a unique image with label Z)
end while
S ← R ∪ D
Randomize(S)
3.4 Database
Populating the database is a major issues with all image-based
systems. Unlike text CAPTCHAs which can use any random com-
bination of characters in the challenge creation, images in SEMAGE
owing to the requirement of semantic similarity have to be care-
fully selected. One may always use freely available image search
services like google image search to ﬁnd relevant images. For our
implementation, we developed a semi-automated mechanism that
populates the database by crawling the Internet. One can also con-
sider taking frames from movies and short videos. Both of the
above approaches can be considered as semi-automatic and require
some manual work to weed out irrelevant images. The drawback of
such methods is that an attacker can venture to spend enough time
and manual work to reproduce the whole database.
SEMAGE, however, due to its inherent design offers an way of
database creation for web sites, such as e-commerce sites, which
already have a image database. Web vendors in e-commerce usu-
ally have multiple images of the same product (such as pictures
from different angles), multiple styles of the same product (same
product of different color, size, packages), and multiple products
of the same category. Images are tagged with the product informa-
tion, and product info is categorized into different classes. Multi-
ple relations can be established among these images and used as
the ‘semantic context’. With the abundance of existing tagging in-
formation, we can implement the ‘challenge creation’ algorithm by
adding simple logical changes. Furthermore, some databases actu-
ally have implemented more sophisticated relations such as ‘similar
products’ as a recommendation for users when they browse certain
products, thus more sophisticated ‘semantic relationships’ can be
formed based on such information. Using these images not only
adds to the security of the database, but also serves as a good form
of advertisement.
4. SEMAGE ANALYSIS
4.1 Design Analysis
4.1.1 Usability
Usability with security is the primary focus of SEMAGE. The
images contain content that cognitively make sense to the users,
and are easy to discern. By drawing on human’s vast storage of
common-sense knowledge, our design helps user spend minimum
effort solving the challenge. Moreover, it ﬁts the way a human
thinks - it is natural for humans at ﬁrst sight to see what an im-
age is about, much better than dealing with any details (orientation,
certain feature image, etc.). Establishing relationships among ob-
jects is another ability humans are natural at, and humans almost
automatically dissolve any ambiguity they need to resolve. For ex-
ample, if a red car is presented with other colored cars, human im-
mediately notice the color difference. However, if the same red
car is presented with red buckets, red clothes etc. humans notice
the difference in object category. For a computer, both of the steps
pose a difﬁcult AI problem.
It ﬁrst needs to do image recogni-
tion to determine what the image contains, and tag the image in
a pre-determined category. To solve the ‘relationship’ answer, the
computer would not only need vast correctly labeled database, but
also complex AI intuition. This creates a great gap in the difﬁculty
level for humans and bots.
In addition, SEMAGE provides an easy-to-operate interface for
users to indicate correct answers. Only a few mouse clicks is re-
quired to pick up the correct images, this makes SEMAGE to be a
good choice of touch-based systems and smart-phones where typ-
ing is more difﬁcult. This is much easier than tracing an outline of
objects (as in SQ-PIX [7]) and typing in letters from a keyboard,
especially on mobile devices.
4.1.2 Language Independence
Our design utilizes the fact that a picture transcends the bound-
aries of languages. Some CAPTCHA systems also use semantic
clues, such as ESP-PIX [3]. However it asks the user to ﬁnd the
right word among a list of English words that describes the content
of the image. This limits the audience to people with decent pro-
ﬁciency in the language. Our design is language independent and
can be used by people across the world. This is especially bene-
ﬁcial for people who are not comfortable using English as a daily
language.
4.1.3 Customization Flexibility
Our design offers several ways to customize the challenge on
content, security level and usability level. The image database can
be customized to suit the needs and style of the hosting website.
For example, for special interest groups, the database can be ob-
jects of the theme of the group, such as movie screenshots for a
movie rental site or speciﬁc products for an e-commerce site. This
provides possibility of advertisement of content or fun in the tradi-
tionally boring test of CAPTCHA.
It is also easy for web administrators to customize on the security
level. The administrator can decide on the size of the candidate im-
age pool, and the size of the correct answer set. For a scheme that
present n candidate images and ask the user to pick up k matching
images, the success rate of random guessing is 1/C(n, k). The in-
crease of the size of answer set does not necessarily decrease the