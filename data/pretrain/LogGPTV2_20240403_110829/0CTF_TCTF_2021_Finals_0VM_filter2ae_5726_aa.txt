# 0CTF/TCTF 2021 Finals 0VM
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这道题目，是一个虚拟机的题目，比较难，使用了一种算法。
## 1.逆向部分
可以看到，题目突然来了一个这个，有点懵逼。
可以看到，这是一个`switch case`的操作，我们直接使用IDA自带的工具即可。
后面有一个FFT【傅里叶变换】，本着学习的态度，我们来学习一个傅里叶变换以及其逆变换
###  1.1 快速傅里叶变换
FFT是一种计算方法， 能够将O(n^2)的时间复杂度，变为了`O(nlogn)`，将一个多项式乘积转变为矩阵点乘。
知道了大概意思之后，我们开始寻找如何逆回去。网上搜索逆`FFT`也就是`IFFT`,但是由于对类型的处理不当。
我们可以看到这篇博客[(33条消息) 快速傅里叶变换_sky123博客-CSDN博客](https://sky123.blog.csdn.net/article/details/120213359)，使用其中的C++代码，如下：
    #include
    using namespace std;
    const int N = 3e6 + 10;
    const double PI = acos(-1);
    struct Complex {
        double x, y;
        Complex operator+(const Complex &t) const {
            return {x + t.x, y + t.y};
        }
        Complex operator-(const Complex &t) const {
            return {x - t.x, y - t.y};
        }
        Complex operator*(const Complex &t) const {
            return {x * t.x - y * t.y, x * t.y + y * t.x};
        }
    };
    int rev[N], bit, tot;
    inline void init(int n) {
        bit = __lg(n) + ((n & (-n)) != n), tot = 1 > 1] >> 1) | ((i & 1)  0x%x \033[0m' % (s, eval(s)))
    shell= lambda :p.interactive()
    p=None
    if local==True:
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p=process(pc)
        #gdb.attach(("127.0.0.1", 1234), "set sysroot ./root", exe="./channel")