57.32%
56.36%
FPR
14.8%
6.8%
4.2%
k-FP
TPR
62.56%
62.58%
62.56%
FPR
12%
10.86%
9.88%
Our
TPR
66.04%
66.68%
65.64%
FPR
0.2%
0.1%
0.1%
We observe that, if we use data with a split time that is shorter than
the real split time to train classiers, the TPR of page classication
decreases since we lose useful data for training. Figure 11 shows the
TPR with dierent splits times on the Tor_two dataset. We observe
that, when the true delay time is three seconds and we only use the
rst 2 seconds to train the classier, the TPR decreases by around
5% since we lose useful information of the 3rd second. Similarly, if
the split time is larger than the true delay time, we nd that our
TPR decreases since inappropriate split time incurs the features we
extracted including the second page information. Fortunately, the
accuracy is relatively stable when more noises are included in the
training data. Our WF attack dynamically identies the split time
so that it does not waste the useful information or mix the noise
into the features. Therefore, we can eectively construct the attack
in practice.
6.5 Evaluation with More Than Two Tabs
We used Selenium to collect datasets with more than two tabs.
We rstly load a random page and then request the subsequent
pages with random delays. We obtain datasets with three tabs
and four tabs. All datasets have 5000 samples. We use half of the
datasets to train our page split classier, and use another half to
test. We observe that the split accuracy with more than two pages is
relatively lower than that with two-tab pages. However, we can still
obtain around 70% split accuracy. In particular, the split accuracy
with various numbers of pages is similar. The possible reason is
that, with the increase in the numbers of pages, the probability of
overlapping the rst page decreases. Note that, the existing attacks
that almost fail to classify multi-web pages. Therefore, our attack
can be still eective with more than two tabs pages.
7 CONCLUSION AND FUTURE WORK
In this paper, we described two new algorithms to relax the Single
Page Assumption, an unrealistic assumption that all WF attacks
relied on. For a client who visits two pages, where the amount of
time between the two pages is demarcated by the split point, we
consider an attacker who attempts to identify the rst web page
the client is visiting. Our strategy is rst to develop a classier
that works with minimal amounts of data, and then to use such a
classier on an initial chunk of packets before the split point.
First, we showed that our new WF classier could achieve a
higher TPR compared to the previous best WF classiers on an
initial chunk of data. In the closed-world Tor scenario, we achieved
a TPR of 77.08% on Tor when split time is six seconds and 93.88% on
SSH only using the rst two seconds of the initial chunk, beating
CUMUL by Panchenko et al. and k-FP by Hayes et al. We found that
our classier became slightly less accurate when using more than
two seconds of data on SSH, maybe due to the limited number of
instances; however, we can achieve the highest TPR only using the
rst two seconds of initial chunk, this suggests that split nding is
not necessary on SSH, and we should simply take two seconds of
data to classify. It was still necessary to nd the correct split point
for the Tor scenario.
Second, we described a new split nding algorithm to identify
the correct split point for the Tor scenario. Our algorithm uses
BalanceCascade to resolve the class size imbalance between the
false split class and the true split class. We use an ensemble of
forests of regression trees to classify the data, where each forest of
regression tree uses a novel gradient tree boosting technique by
Chen and Guestrin called XGBoost. We found that our algorithm
was able to outperform the previous state of the art, timekNN by
Wang et al.
In a nutshell, when combining the split nding algorithm with
our random forest classier, we achieved an overall TPR of 64.94%
on Tor; we achieve an overall TPR of 92.58%. Our work is, therefore,
the rst to show that it is still possible to perform WF against a
client who visits multiple pages simultaneously.
ACKNOWLEDGMENTS
We would like to thank our shepherd Alexandros Kapravelos, and
the anonymous reviewers for their insightful comments. This work
was supported in part by the National Key R&D Program of China
under Grant 2016YFB0800102, the National Natural Science Foun-
dation of China under Grant 61572278, U1736209, 61602122, and
71731004, the Natural Science Foundation of Shanghai under Grant
16ZR1402200, and the Shanghai Pujiang Program under Grant
16PJ1400700. Qi Li is the corresponding author of this paper.
REFERENCES
[1] Pablo Bermejo, José A Gámez, and José M Puerta. 2014. Speeding up Incremental
Wrapper Feature Subset Selection with Naive Bayes Classier. Knowledge-Based
Systems 55 (2014), 140–147.
[2] George Dean Bissias, Marc Liberatore, David Jensen, and Brian Neil Levine. 2005.
Privacy vulnerabilities in encrypted HTTP streams. In International Workshop on
Privacy Enhancing Technologies. Springer, 1–11.
337
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Y. Xu, T. Wang, Q. Li, Q. Gong, Y. Chen, and Y. Jiang
[3] Leo Breiman. 2001. Random Forests. Machine Learning 45, 1 (01 Oct 2001), 5–32.
https://doi.org/10.1023/A:1010933404324
[4] Leo Breiman, Jerome Friedman, Charles J Stone, and Richard A Olshen. 1984.
Classication and regression trees. CRC press.
[5] Xiang Cai, Rishab Nithyanand, Tao Wang, Rob Johnson, and Ian Goldberg. 2014.
A Systematic Approach to Developing and Evaluating Website Fingerprinting
Defenses. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 227–238.
[6] Xiang Cai, Xin Cheng Zhang, Brijesh Joshi, and Rob Johnson. 2012. Touching
from a Distance: Website Fingerprinting Attacks and Defenses. In Proceedings
of the 2012 ACM conference on Computer and communications security. ACM,
605–616.
[7] Tianqi Chen and Carlos Guestrin. 2016. XGBoost: A Scalable Tree Boosting Sys-
tem. In Proceedings of the 22nd acm sigkdd international conference on knowledge
discovery and data mining. ACM, 785–794.
[8] Thomas Cover and Peter Hart. 1967. Nearest neighbor pattern classication.
IEEE transactions on information theory 13, 1 (1967), 21–27.
[9] Kevin P Dyer, Scott E Coull, Thomas Ristenpart, and Thomas Shrimpton. 2012.
Peek-a-Boo, I Still See You: Why Ecient Trac Analysis Countermeasures Fail.
In Security and Privacy (SP), 2012 IEEE Symposium on. IEEE, 332–346.
[10] Xiaodan Gu, Ming Yang, and Junzhou Luo. 2015. A novel Website Fingerprinting
attack against multi-tab browsing behavior. In Computer Supported Cooperative
Work in Design (CSCWD), 2015 IEEE 19th International Conference on. IEEE, 234–
239.
[11] Jamie Hayes and George Danezis. 2016. k-ngerprinting: A Robust Scalable
Website Fingerprinting Technique.. In USENIX Security Symposium. 1187–1203.
[12] Dominik Herrmann, Rolf Wendolsky, and Hannes Federrath. 2009. Website
Fingerprinting: Attacking Popular Privacy Enhancing Technologies with the
Multinomial Naïve-bayes Classier. In Proceedings of the 2009 ACM workshop on
Cloud computing security. ACM, 31–42.
[13] Andrew Hintz. 2002. Fingerprinting Websites Using Trac Analysis. In Interna-
tional Workshop on Privacy Enhancing Technologies. Springer, 171–178.
[14] Marc Juarez, Sadia Afroz, Gunes Acar, Claudia Diaz, and Rachel Greenstadt. 2014.
A Critical Evaluation of Website Fingerprinting Attacks. In Proceedings of the
2014 ACM Conference on Computer and Communications Security. ACM, 263–274.
[15] Andy Liaw and Matthew Wiener. 2002. Classication and Regression by ran-
(2006).
domForest. R news 2, 3 (2002), 18–22.
[16] Marc Liberatore and Brian Neil Levine. 2006. Inferring the Source of Encrypted
HTTP Connections. In Proceedings of the 13th ACM conference on Computer and
communications security. ACM, 255–263.
[17] Xu-Ying Liu, Jianxin Wu, and Zhi-Hua Zhou. 2009. Exploratory Undersampling
for Class-imbalance Learning. IEEE Transactions on Systems, Man, and Cybernetics,
Part B (Cybernetics) 39, 2 (2009), 539–550.
[18] Liming Lu, Ee-Chien Chang, and Mun Chan. 2010. Website Fingerprinting and
Identication Using Ordered Feature Sequences. Computer Security–ESORICS
2010 (2010), 199–214.
[19] Xiapu Luo, Peng Zhou, Edmond WW Chan, Wenke Lee, Rocky KC Chang, and
Roberto Perdisci. 2011. HTTPOS: Sealing Information Leaks with Browser-side
Obfuscation of Encrypted Flows.. In NDSS.
[20] Kevin P Murphy. 2006. Naive Bayes Classiers. University of British Columbia 18
[21] Andriy Panchenko, Fabian Lanze, Jan Pennekamp, Thomas Engel, Andreas Zin-
nen, Martin Henze, and Klaus Wehrle. 2016. Website Fingerprinting at Internet
Scale.. In NDSS.
[22] Andriy Panchenko, Lukas Niessen, Andreas Zinnen, and Thomas Engel. 2011.
Website Fingerprinting in Onion Routing based Anonymization Networks. In
Proceedings of the 10th annual ACM workshop on Privacy in the electronic society.
ACM, 103–114.
[23] F Donelson Smith, Félix Hernández Campos, Kevin Jeay, and David Ott. 2001.
What TCP/IP protocol headers can tell us about the web. In ACM SIGMETRICS
Performance Evaluation Review, Vol. 29. ACM, 245–256.
[24] Qixiang Sun, Daniel R Simon, Yi-Min Wang, Wilf Russell, Venkata N Padman-
abhan, and Lili Qiu. 2002. Statistical Identication of Encrypted Web Browsing
Trac. In Security and Privacy, 2002. Proceedings. 2002 IEEE Symposium on. IEEE,
19–30.
[25] Tao Wang, Xiang Cai, Rishab Nithyanand, Rob Johnson, and Ian Goldberg. 2014.
Eective Attacks and Provable Defenses for Website Fingerprinting.. In USENIX
Security Symposium. 143–157.
[26] Tao Wang and Ian Goldberg. 2013. Improved Website Fingerprinting on Tor. In
Proceedings of the 12th annual ACM workshop on Privacy in the electronic society.
ACM, 201–212.
[27] Tao Wang and Ian Goldberg. 2016. On Realistically Attacking Tor with Website
Fingerprinting. Proceedings on Privacy Enhancing Technologies 2016, 4 (2016),
21–36.
[28] Charles V Wright, Scott E Coull, and Fabian Monrose. 2009. Trac Morphing:
An Ecient Defense Against Statistical Trac Analysis.. In NDSS.
A THE REST FEATURES IN FEATURE SET
This section shows the other features used in our attack as well.
Together with the features shown in Section 5, our attack can
achieve better performance than CUMUL and k-FP.
• The cumulative size of packets without MTU size (CSOPWMS).
The feature is similar with CRFONF, deleting the packet bigger
than 1448 from the network ow, and the number of samples is
ve.
• The quantity of incoming in the rst 20 packets of network ow.
• URL_length. URL_length is the size of the rst outgoing packet
which is a request to the server’s HTML document.
• Statistics of the quantity of packets. The quantity of total pack-
ets and incoming packets. The quantity of incoming packets as
fraction of total packets.
• Statistics of size of packets. The total size of outgoing packets,
the total incoming size of packets as fraction of total packets.
• the quantity of incoming & outgoing packets and the size of
outgoing packets rounded to the nearest multiple of 100.
• Document length. If the second outgoing packet is sent at time t,
we take all the incoming packets before t + RTT as the document
length. The HTML document contains text and objects links
which will be loaded by browser, whose size is a more constant
value compared to changeable object such as img. This may not be
applied in Tor, because Tor may send multiple outgoing packets
in a row at the start.
• the quantity and the transmission speed of incoming and outgo-
ing packets. For instance, to compute the speed of total number,
for each recorded packet, we extract a list using 1 to divide the
inter-arrival time, and sampling the list to 20 samples.
• Vector inner product using packet length. Similar with FLLD, we
compare the distance of two instances with inner vector product
using the bag of packets length.
B FEATURE SELECTION
The following tables illustrate the features selected from various
datasets. As shown in Table 12, most FLLD features are included
in the feature subset of SSH_normal. However, the features related
to the transmission speed of packets are much less included. In
addition, the time features have more importance, which almost
takes 10% of the total features. The Tor_normal dataset only uses
one CSOP feature and has the second smallest subset among all
the datasets when the split time is two seconds. While the features
related to outgoing packets play a key role in Tor_normal when
the split time is three seconds. There are around 20% out of the
total features. The HTTPOS split and Trac morphing datasets
use similar features to that used in SSH_normal. The Decoy pages
dataset has the largest subset among all the datasets. The BuFLO
and Decoy pages datasets use many features related to time and
FLLD.
338
A Multi-tab Website Fingerprinting Aack
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Table 12: The most useful features selected from the
SSH_normal dataset.
Table 13: The most useful features selected from the
Tor_normal dataset when the split time is two seconds.
12
13 maximun_inter_arrival_time_of_inco-
ming_packets
14 maximun_inter_arrival_time_of_total_packets
15 minimum_inter_arrival_time_of_inco-
No.
1
2
3
4
5
6
7
8
9
10
11
16
17
18
19
20
21
22
23
24
25
26
27
Description of Features
RTT
average_packet_number_before_every_incom-
ng_packet
the 2-4th burst_number_packet
the 1-5th burst_size_packet
the 2-6th, 8-11th, 29th, 98-99th cumula-
tive_packet
the 5th cumulative_without_mtu_packet
rst_quartile_of_outgoing_transmission_time
rst_quratile_of_incoming_transmission_time
rst_quratile_of_transmission_time
the 1st in_size_speed_packet
incoming_packet_number_ratio_in_the_-
rst_20_packets
incoming_size
ming_packets
the 1st number_speed_packet
the 3-5th out_number_speed_packet
the 4th out_size_speed_packet
outgoing_packet_number
outgoing_packet_number_in_the_r-
st_20_packets
outgoing_packet_number_ratio_in_the_r-
st_20_packets
outgoing_packet_size_ratio
rounded_document_length
rounded_incoming_size
second_quartile_of_transmission_time
total_size
the 1-4th, 6th,8th, 12th, 16-17th, 19-23th, 26th,
28-31st, 33-35th, 39-40th, 42th, 44th, 46-50th web-
site_similarity_by_fast_edit_distance 16th, 18th,
31st, 35th website_similarity_by_jaccard
No.
1
2
3
4
5
6
7
8
9
10
11
12
13
Description of Features
average_packet_number_before_every_in-
coming_packet
standard_deviation_of_packet_number_be-
fore_every_incoming_packet
minimum_inter_arrival_time_of_outgoing_pa-
ckets
second_quartile_of_transmission_time
rounded_incoming_size
the 2th out_number_speed_packet
the 3th, 6th, 10th in_size_speed_packet
the 2-3th out_size_speed_packet
the 2th cumulative_packet
the 1st, 3th burst_size_packet
the 1-3th burst_number_packet
the 21st, 37th, 40th website_similarity_by_vector
22th,
the
24th,
31st,
46th web-
site_similarity_by_fast_edit_distance
7th,
33-34th,
14th,
38th,
44th,
10th,
Table 14: The most useful features selected from the
Tor_normal dataset when the split time is three seconds
Description of Features
_of_packet_number_be-
outgoing_size