```
file(COPY assets DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/Hello-${Hello_VERSION}")
```
### 定义安装位置
你已经定义你要编译的文件，因此现在你要告诉 CMake 你的程序要安装在哪个位置。比如你的主程序，这个要程使用 `install` 命令：
```
install(DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/Hello-${Hello_VERSION}" TYPE DATA)
```
这里有一些新的参数。`DIRECTORY` 参数指定了数据文件是一个目录，而不是一个文件（`FILE`）或者脚本（`SCRIPT`）。你使用的参数和复制一些额外文件到编译目录时是一样。另外，在 `install` 命令中 `TYPE` 或者 `DESTINATION` 必须要指定其一。`TYPE` 参数指定了通用的文件类型，这些文件通常将会被放到合适的位置。在 Linux 系统上，`TYPE DATA` 一般是 `/usr/local/share` 或者 `/usr/share`，除非用户定义了其他的位置。
这是诸如 CMake 之类的良好构建系统的强大功能之一。你不必担心文件的确切位置，因为你知道用户可以更改 CMake 的首选默认设置，并且 CMake 将构建代码以使其正常工作。
### 运行 CMake
CMake 有多种方式来让你执行命令，你可以在终端或者在一个可交互的程序上执行命令，或者你也可以使用它的图形界面（GUI）。我比较偏向于使用终端命令，但是我也喜欢使用一些其他的方式（相比与在 `Makefile` 中查找那些晦涩的变量然后去修改它们更胜一筹）。
对于编译过开源 C++ 项目的任何人，都熟悉的第一步是创建一个 `build` 目录，进入到该目录，然后运行 `cmake ..` 命令。 我是一个懒惰的打字员，所以我将构建目录命名为 `b`，但是你可以使用最合适的方式：
```
$ mkdir b
$ cd b
$ cmake ..
-- The C compiler identification is GNU 11.1.1
-- The CXX compiler identification is GNU 11.1.1
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /var/home/seth/demo-hello/b
$
```
这或多或少相当于经典的 `./configure; make; make install` 中的 `./configure`。看一下你的构建目录，CMake 已经帮你生成了几个新的文件，来让你的项目更完整。这里生成了 CMake 的数据文件、一个常规的 `Makefile` 文件（这是一个免费提供的 247 行的文件，但对于越复杂的项目，行数要多得多），还有一个包含这个示例程序的任意非编译数据的 `Hello-1.0` 目录。
```
$ ls
CMakeCache.txt
CMakeFiles
Makefile
Hello-1.0
cmake_install.cmake
```
接下来，你可以进行构建。你可以使用 CMake 的 `--build` 选项来做这件事，使用当前的构建目录作为源目录。
```
$ cmake --build .
Scanning dependencies of target Hello
[ 50%] Building C object CMakeFiles/Hello.dir/hello.c.o
[100%] Linking C executable Hello
[100%] Built target Hello
```
或者你可以运行 `make` 命令。这将读取由 CMake 生成的 `Makefile` 文件。在这个例子中，`make` 默认的行为就是由源程序 `hello.c` 生成目标文件。
```
$ make
Scanning dependencies of target Hello
[ 50%] Building C object CMakeFiles/Hello.dir/hello.c.o
[100%] Linking C executable Hello
[100%] Built target Hello
$
```
如你所料，`Hello` 二进制可执行文件现在存在于当前的构建目录中。因为它是一个简单的自包含应用程序，所以你可以运行它进行测试：
```
$ ./Hello
Hello open source
$
```
最后，你可以用 `--install` 选项进行安装。因为我不希望我的简单的 “hello world” 应用程序真的被安装到我的系统上，我设置了 `--prefix` 选项，将 CMake 的目标从根目录（`/`）重定向到 `/tmp` 的一个子目录。
```
$ cmake --install . --prefix /tmp/hello/
-- Install configuration: ""
-- Installing: /tmp/dist-hello/usr/local/bin/Hello
-- Installing: /tmp/dist-hello/usr/local/share/Hello-1.0
-- Installing: /tmp/dist-hello/usr/local/share/Hello-1.0/assets/file0
-- Installing: /tmp/dist-hello/usr/local/share/Hello-1.0/assets/file1
```
另外，你也可以运行 `make install` 来调用 `Makefile` 的安装动作。同样，为了避免在我的系统上安装一个演示程序，我在这个例子中设置了 `DESTDIR` 变量，将安装目标重定向到 `/tmp` 的一个子目录：
```
$ mkdir /tmp/dist-hello
$ make install DESTDIR=/tmp/dist-hello
[100%] Built target Hello
Install the project...
-- Install configuration: ""
-- Installing: /tmp/dist-hello/usr/local/bin/Hello
-- Installing: /tmp/dist-hello/usr/local/share/Hello-1.0
-- Installing: /tmp/dist-hello/usr/local/share/Hello-1.0/assets/file0
-- Installing: /tmp/dist-hello/usr/local/share/Hello-1.0/assets/file1
```
看一下输出的内容，来确定它具体的安装位置，这个程序已经安装好了。
### 快速自定义
CMake 的安装前缀（由 `CMAKE_INSTALL_PREFIX` 变量指定）默认是在 `/usr/local` 这个位置，但是所有的 CMake 变量都可以在你运行 `cmake` 命令的时候，加一个 `-D` 选项来改变它。
```
$ cmake -DCMAKE_INSTALL_PREFIX=/usr ..
$ make install DESTDIR=/tmp/dist-hello
$ make install DESTDIR=/tmp/dist-hello
[100%] Built target Hello
Install the project...
-- Install configuration: ""
-- Installing: /tmp/dist-hello/usr/bin/Hello
-- Installing: /tmp/dist-hello/usr/share/Hello-1.0
-- Installing: /tmp/dist-hello/usr/share/Hello-1.0/assets/file0
-- Installing: /tmp/dist-hello/usr/share/Hello-1.0/assets/file1
```
所有由 CMake 使用的变量都可以通过这种方式来修改。
### 交互式的 CMake
CMake 的交互模式是一种用于配置安装环境的友好而有用的方法。要让用户知道该项目使用的所有可能的 CMake 变量是一件工作量很大的事，因此 CMake 交互式界面是他们无需查看 `Makefile` 和 `CMakeLists` 即可发现自定义选项的简便方法。
为了调用这个交互式的 CMake，使用 `ccmake` 命令，在这个简单的项目里没有太多的东西。但是对于像 [Rosegarden](https://opensource.com/article/18/3/make-sweet-music-digital-audio-workstation-rosegarden) 这样的大型项目，这将非常有用。
![Rosegarden](/data/attachment/album/202105/24/183540nflz4ftd1gflfu77.jpg "Rosegarden")
### CMake 的更多知识
还有很多很多的 CMake 知识需要去了解。作为一个开发者，我非常喜欢它简洁的语法、详尽的文档、可扩展性以及便捷性。作为一个用户我非常喜欢 CMake 友好且实用的错误提示信息还有它的用户界面，如果你的项目还未开始使用构建系统，请了解一下 CMake 吧。你以及以后尝试打包你应用程序的任何人都不会后悔。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[amwps290](https://github.com/amwps290) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出