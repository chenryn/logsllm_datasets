solves for T . This solution for the SI problem, however,
relies on the strong LTI assumption from Eq. (1).
3.2 Queueing Theory and (min,+) vs. (max,+)
Algebras
Here we present another solution for the SI problem by
inspecting basic queueing properties in a simpliﬁed scenario.
First, let us readopt one of the networking interpretations
of the sequences a and d.
Consider a single work-conserving server (node) with ca-
pacity C and unlimited queueing (buﬀering) space; all ar-
rivals have the same size of one bit. The construction of the
operator T , that completely determines d = T (a) ∀a ∈ F,
follows directly from basic queueing dynamics, and is almost
analogous to the one from Eq. (3). Under SQ, the output
sequence d is determined by
d1 + d2 + ··· + dn = min
0≤i≤n{a1 + ··· + ai + C(n − i)} ,
for all n ≥ 1. It is convenient to represent the partial sums
by considering the input and output (cumulative) sequences
A = (A(0), A(1), . . . ) and D = (D(0), D(1), . . . ), where
A(n) = a1 + ··· + an, D(n) = d1 + ··· + dn ∀n ≥ 1, and
A(0) = D(0) = 0. With these notations, the operator T
satisﬁes D = T (A), where
D(n) = min {nC, A(1) + (n − 1)C, . . . , A(n)}
0≤k≤n {A(k) + (n − k)C} ∀n ∈ N .
= min
(4)
In turn, under TQ, d is determined by
dn = max(cid:26)a1 +
1≤i≤n(cid:26)ai +
= max
C
, . . . , an +
, a2 +
n
C
n − i + 1
n − 1
C
(cid:27) ∀n ∈ N .
1
C(cid:27)
(5)
313These equations are fundamental elementary identities in
queueing theory.
The operations from Eqs. (4) and (5) on input sequences
resemble much with the convolution operation from Eq. (3),
except for the underlying algebra. Concretely, while Eq. (3)
is formed according to the traditional convolution involving
the addition of products, Eqs. (4) and (5) are formed by
minimizing and maximizing, respectively, sums. For this
reason, it is said that the operator T operates in a (min, +)
algebra in Eq. (4), and in a (max,+) algebra in Eq. (5).
We have thus presented another complete characterization
of T . What makes this second solution partial as well is that
the considered queueing system is noiseless, i.e., it assumes
a constant-rate server, no scheduling, etc.
3.3 Emergence of the Service Process Concept
We now combine the ideas from the previous two subsec-
tions in order to present a much more general solution for the
SI problem, and concomitantly to highlight the emergence
of one of the key modelling concepts in network calculus:
the service process.
We tailor the SI problem, for some general queueing sys-
tem, in terms of an unknown operator
T : F → F , T (A) = D ,
(6)
where A and D have the interpretations from the previous
subsection, i.e., cumulative sequences counting bits. Recall
that T has to be constructed in such a way that it completely
determines the output D for any input A.
Inspired from the previous two subsections, it is intuitive
to reproduce the steps for the construction of an impulse-
response from Section 3.1, but in the modiﬁed (min, +) al-
gebra which was shown to be appropriate, in Section 3.2,
to represent input-output relationships in queueing systems.
This approach could be viewed as a merge between linear
system theory and queueing theory.
As in Section 3.1, we ﬁrst enforce an LTI assumption on
T by reproducing Eq. (1) in the (min, +) algebra:
T (min {c1 + A1, c2 + A2})
T (cid:0)A(−k)(cid:1) = T (A)(−k)
= min {c1 + T (A1) , c2 + T (A2)}
,
(7)
for all sequences A, A1, A2, scalars c1, c2, and shifts k ∈ Z
(whether such an apparently strong assumption holds for
typical queueing systems will be clariﬁed in two follow-up
examples). The second step is to deﬁne the analogue of
the Kronecker impulse signal and its shifted version in the
(min, +) algebra, i.e.,
δ(n) = (cid:26) 0
, n = 0
∞ , n 6= 0
, δ−k(n) = δ(n − k), ∀ n, k ∈ Z .
(8)
Similarly to the Kronecker impulse signal, the newly deﬁned
impulse sequence δ is motivated by the fact that any input
sequence A can be expressed as the (min, +) convolution of
itself with the impulse function, i.e.,
A = A ∗ δ, or, equivalently,
A(n) = min
0≤k≤n{A(k) + δ(n − k)} ∀n ∈ N .
When the input to the system is the impulse δ, deﬁne the
corresponding output as the impulse-response
S = T (δ) .
(9)
Under the assumption that T is (min, +) LTI (in the sense
of Eq. (7)), it follows from the (min, +) linear system theory
(see [5], p. 136, or [2], p. 276) that for any input sequence
A the corresponding output sequence D satisﬁes
D(n) = min
0≤k≤n {A(k) + S(n − k)} ,
(10)
where S = T (δ) is the impulse-response. Therefore, the un-
known operator T is now fully characterized: for any input
sequence A, the corresponding output is T (A) = A ∗ S.
Note that despite the cyclic dependence between T and
S, i.e., T (A) = A ∗ S and S = T (δ), T is well-deﬁned. The
reason is that the impulse-response S, which induces the
cyclic dependence, has a well deﬁned physical meaning as
the system’s output for the input δ.
The key observation to make, however, is that T is yet
another partial solution for the SI problem, due to the un-
derlying LTI assumption from Eq. (7). In the following we
present two queueing examples which show that, in spite
of the fact that many queueing systems are generally not
(min, +) linear, the unknown operator T , and thus a solu-
tion for the SI problem, can be constructed in great gener-
ality. Since there is no free lunch, this promising increase in
generality is only possible at an inevitable price: sacriﬁcing
exactness, or, more concretely, replacing the equality from
Eq. (6) by an inequality, i.e., D ≥ T (A).
3.3.1 Example 1
Consider the (noiseless) queueing system from Figure 1.(a)
(see next page) and recall the relationship from Eq. (4) be-
tween departures and arrivals. Fitting this relationship with
Eq. (10) yields S(n) = nC ∀n ∈ N. As mentioned, S has also
the physical interpretation of the cumulative output from
the queue when the input is the impulse δ from Eq. (8).
This example, although repetitive, is meant to illustrate
the (almost perfect) analogy in the arguments used in Sec-
tions 3.1 and 3.2. Concretely, it is apparent that there is a
match between the construction of S from 1) the (min, +)
linear system theory (as in Eqs. (9) and (10)), and 2) ele-
mentary queueing properties (as in Eq. (4)). The missing
element for a perfect analogy is that the queueing system
is (min, +) LTI under an artiﬁcial interpretation of the re-
quired ‘plus’ property T (c + A) = c + T (A) from Eq. (7):
the addition of scalars c occurs, both in the input and out-
put, before the queueing system actually starts. This is
clearly an inconvenient physical system interpretation, but
it enables the view of a constant-rate queueing server as a
(min, +) LTI system. As a side remark, the physically more
meaningful interpretation of the ‘plus’ property as a burst
of c bits at time zero has the negative consequence that any
system of practical interest, in particular the constant-rate
work-conserving server, would be (min, +) non-linear. This
can be seen by a result in ([5], Proposition 8.3.1) on a system
with non-empty initial buﬀer clearly exhibiting a (min, +)
non-linear behavior.
3.3.2 Example 2
Making an analogy between (min, +) LTI systems and el-
ementary queueing properties is even more compounded for
the FIFO queueing system from Figure 1.(b), which includes
noise in the form of cross-traﬃc. The reason is that this
queueing system is not anymore (min, +) linear, even under
the artiﬁcial interpretation of the ‘plus’ operation. First,
the ‘min’ property T (min{A1, A2}) = min {T (A1), T (A2)}
314A
D
A
C
C
D
Ac
Dc
(a) No multiplexing
(b) Multiplexing
Figure 1: Two queueing systems from the perspec-
tive of ﬂow A: in (a) the ﬂow is isolated, in (b) the
ﬂow shares the queue with another (cross) ﬂow Ac
fails; a quick example is C = 3, Ac(t) = (0, 1, 3, 4), A1(t) =
(0, 3, 4, 6), and A2(t) = (0, 1, 7, 10). Second, the time in-
variance property fails as well; a quick example is C = 1,
A = (0, 1, . . . ), Ac = (0, 1, 3, . . . ), and the right shift k = 2.
Because the queueing system is not (min, +) LTI, one can-
not follow the construction of the impulse-response sequence
S in order to exactly characterize the queueing system as in
Eq. (10).
At this apparent impasse, the network calculus slightly
diverges from LTI systems and queueing theory. The key
idea is to transform the non-linear queueing system into a
‘somewhat looking’ linear system. The actual transforma-
tion occurs by directly constructing a ‘somewhat analogous’
impulse-response S (a.k.a. service process) [1] satisfying
D ≥ A ∗ S ∀A .
(11)
Therefore, instead of exactly characterizing the system as in
Eq. (6), the network calculus makes the crucial concession
of inexactly characterizing the system by resorting to an in-
equality, as in Eq. (11). For the FIFO multiplexing example,
one choice of a service process S is the bivariate random
process Si(k, n) = [C(n − k) − Ac(k, n − i)]+ 1{n−k>i}, for
some i ≥ 0 [18], which satisﬁes
D(n) ≥ min
0≤k≤n {A(k) + Si(k, n)} ∀A, n ∈ N .
(12)
Except for the inequality, this characterization resembles
much with both Eq. (10) (from (min, +) LTI systems the-
ory) and Eq. (4) (from queueing theory). Note, however,
the non-trivial expression of Si(k, n) stemming from non-
trivial characteristics of FIFO multiplexing. In particular,
the bivariate form is due to the lack of time invariance.
The FIFO multiplexing example reﬂects a fundamental
tradeoﬀ in network calculus. On one hand, as queueing sys-
tems are generally neither linear nor time invariant, network
calculus resorts to inequalities for their characterization, as
in Eqs. (11) or (12). On the other hand, the service pro-
cesses S ought to be reasonably concise and also provide
tight bounds in Eq. (11); otherwise, they may render a cum-
bersome analysis (see, e.g., [33] for the above choice of S)
or simply arbitrarily loose bounds. Constructing such ‘nice’
service processes for existing scheduling algorithms is a key
challenge in network calculus; see [36] for some state-of-the-
art examples of service processes concerning ∆-scheduling,
which generalizes FIFO, static priority, and earliest deadline
ﬁrst (EDF).
Nevertheless, the underlying methodology of constructing
service processes to abstract away the details of schedul-
ing algorithms, in queueing scenarios with many ﬂows, ren-
ders two central features of network calculus: scheduling ab-
straction and convolution-form networks. With the former,
many classes of scheduling policies and arrival processes are
amenable to a uniform analysis. In other words, once ser-
vice processes are suitably constructed, the network calculus
analysis does not conceptually diﬀerentiate between, e.g.,
FIFO and EDF policies, or Poisson and Markov arrival pro-
cesses, for the purpose of computing per-ﬂow (or per-class)
performance metrics. With the latter feature, the multi-
node queueing analysis is drastically simpliﬁed. Concretely,
once service processes Si are constructed at each node along
a network path, the entire network analysis can be reduced
to the analysis of a single-node, which is characterized by
the following service process
S = S1 ∗ S2 ∗ . . . ∗ Sn ,
(13)
i.e., the convolution of the service processes along the net-
work path. What makes this reduction particularly appeal-
ing is that the multi-node performance bounds obtained in
this manner are asymptotically tight in the number of nodes
(see, e.g., [14, 22]).
In conclusion, network calculus provides a methodology to
solve the SI problem by transforming a non-linear system
(subject to various arrivals, scheduling, or multi-node) into
a ‘somewhat looking’ linear system which is amenable to
a quite straightforward analysis. The key challenge is the
transformation itself, i.e., the construction of ‘nice’ service
processes.
Most of the interpretations on network calculus illustrated
in this section appear in the literature in isolation: for the
analogy with linear systems see [19, 12, 5], for the anal-
ogy with queueing theory see [27], for a discussion on the
non-linearity of FIFO systems see [35]. For a comprehensive
survey of service processes we refer to [23]. Our contribu-
tion herein was to present a comprehensive perspective on
the emergence and central role of service processes in net-
work calculus, by weaving together linear systems, queueing
theory, and network calculus.
4. ENVELOPE PROCESSES
We now shift the discussion to the other fundamental con-
cept in network calculus: envelope processes. While their
role is to model a very broad class of arrival processes,
achieving this generality comes at the price of sacriﬁcing
exactness in the arrivals’ representation. The goal of this
section is to highlight the key aspects of envelope processes;
it is not meant to provide a review of the types of envelopes,
for which we refer to [37].
A (cumulative) arrival process A(n) is typically described
by either a complementary cumulative distribution function
(CCDF) or a moment generation function (MGF), i.e.,
FA(n)(σ) := P(cid:16)A(n) > σ(cid:17) , MA(n)(θ) := EheθA(n)i ,
respectively, for all n ∈ N, σ ∈ R, and θ ∈ Θ, where Θ is
some space over R. The two descriptions silently assume
that A(n) is a stationary random process, which means that
the CCDF is invariant under time shift.
pectations and tails, i.e., E[X] = R ∞
The existence of the MGF is equivalent to an exponen-
tially bounded CCDF, in which case the CCDF uniquely
determines the MGF according to the identity relating ex-
P(X > x)dx for posi-
tive random variable (r.v.) X. Conversely, in the case when
Θ is an open interval including zero, the MGF uniquely
determines the CCDF according to analytic function the-
ory ([21], p. 274). Throughout we consider arrival processes
which have an MGF.
0
315Let us consider the following example of a compound
Bernoulli arrival process
A(n) =
n
Xk=1
Xk ∀n ∈ N ,
(14)
where Xk’s are i.i.d. Bernoulli(p) r.v.’s taking the values
1 and 0 with probabilities p and 1 − p, respectively. The