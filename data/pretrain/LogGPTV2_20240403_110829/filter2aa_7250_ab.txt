.Vb 2
\&    $a = "Cow";
\&    $a->speak; # invokes Cow->speak
.Ve
.PP
哇! 现在包名与子程序名可以分开了, 我们可以用变量来表示包名. 这样,在使用 \f(CW\*(C`use strict refs\*(C'\fR 预编译指令时也可以正常工作了.
.Sh "Invoking a barnyard 创建一个牲口棚"
.IX Subsection "Invoking a barnyard"
现在让我们把箭头用到牲口棚的例子中，范例:
.PP
.Vb 9
\&    sub Cow::speak {
\&      print "a Cow goes moooo!\en";
\&    }
\&    sub Horse::speak {
\&      print "a Horse goes neigh!\en";
\&    }
\&    sub Sheep::speak {
\&      print "a Sheep goes baaaah!\en"
\&    }
.Ve
.PP
.Vb 4
\&    @pasture = qw(Cow Cow Horse Sheep Sheep);
\&    foreach $animal (@pasture) {
\&      $animal->speak;
\&    }
.Ve
.PP
现在我们所有的动物都能说话了, 而且不用使用代码引用.
.PP
不过注意到那些相同的代码. 每个 \f(CW\*(C`speak\*(C'\fR 子程序的结构是相同的: 一个 \f(CW\*(C`print\*(C'\fR 操作符和一个基本相同的字符串，只有两个词不同. 如果我们可以析出相同的部分就更好了，如果将来要把 \f(CW\*(C`goes\*(C'\fR 替换为 \f(CW\*(C`says\*(C'\fR 时就简单得多了
.PP
实际上这并不困难, 不过在这之前我们应该对箭头符号了解的更多一些.
.Sh "The extra parameter of method invocation 方法调用时的额外参数"
.IX Subsection "The extra parameter of method invocation"
语句:
.PP
.Vb 1
\&    Class->method(@args)
.Ve
.PP
这样调用函数 \f(CW\*(C`Class::method\*(C'\fR：
.PP
.Vb 1
\&    Class::method("Class", @args);
.Ve
.PP
(如果子程序找不到,\*(L"继承，inheritance\*(R" 开始起作用,这在后面会讲到). 这意味着我们得到的第一个参数是类名(如果没有给出其他参数，它就是调用时的唯一参数).所以我们可以象这样重写 \f(CW\*(C`Sheep\*(C'\fR speaking 子程序:
.PP
.Vb 4
\&    sub Sheep::speak {
\&      my $class = shift;
\&      print "a $class goes baaaah!\en";
\&    }
.Ve
.PP
另外的动物与此类似:
.PP
.Vb 8
\&    sub Cow::speak {
\&      my $class = shift;
\&      print "a $class goes moooo!\en";
\&    }
\&    sub Horse::speak {
\&      my $class = shift;
\&      print "a $class goes neigh!\en";
\&    }
.Ve
.PP
每次 \f(CW$class\fR  都会得到与子程序相关的正确的值. 但是,还是有很多相似的结构. 可以再简单些吗? 是的. 可以通过在一个类中调用其它的方法来实现.
.Sh "Calling a second method to simplify things 调用另一个方法以简化操作"
.IX Subsection "Calling a second method to simplify things"
我们在 \f(CW\*(C`speak\*(C'\fR 中调用 \f(CW\*(C`sound\*(C'\fR. 这个方法提供声音的内容.
.PP
.Vb 7
\&    { package Cow;
\&      sub sound { "moooo" }
\&      sub speak {
\&        my $class = shift;
\&        print "a $class goes ", $class->sound, "!\en"
\&      }
\&    }
.Ve
.PP
现在, 当我们调用 \f(CW\*(C`Cow\->speak\*(C'\fR 时, 我们在 \f(CW\*(C`speak\*(C'\fR 中得到 \f(CW\*(C`Cow\*(C'\fR 的类 \f(CW$class\fR. 他会选择 \f(CW\*(C`Cow\->sound\*(C'\fR 方法, 然后返回 \f(CW\*(C`moooo\*(C'\fR. 那如果是 \f(CW\*(C`Horse\*(C'\fR 呢?
.PP
.Vb 7
\&    { package Horse;
\&      sub sound { "neigh" }
\&      sub speak {
\&        my $class = shift;
\&        print "a $class goes ", $class->sound, "!\en"
\&      }
\&    }
.Ve
.PP
仅仅包名和声音有变化. 因此我们可以在Cow和Horse中共用 \f(CW\*(C`speak\*(C'\fR 吗? 是的,通过继承实现!
.Sh "Inheriting the windpipes 继承气管"
.IX Subsection "Inheriting the windpipes"
我们创建一个公共函数包,命名为 \f(CW\*(C`Animal\*(C'\fR,在其中定义 \f(CW\*(C`speak\*(C'\fR:
.PP
.Vb 6
\&    { package Animal;
\&      sub speak {
\&        my $class = shift;
\&        print "a $class goes ", $class->sound, "!\en"
\&      }
\&    }
.Ve
.PP
然后,在每个动物那里 \*(L"继承，inherits\*(R" \f(CW\*(C`Animal\*(C'\fR 类, 同时赋予每个动物各自的声音:
.PP
.Vb 4
\&    { package Cow;
\&      @ISA = qw(Animal);
\&      sub sound { "moooo" }
\&    }
.Ve
.PP
注意增加的数组 \f(CW@ISA\fR  . 我们马上讲到它.
.PP
现在当我们调用 \f(CW\*(C`Cow\->speak\*(C'\fR 时会发生什么?
.PP
首先, Perl构造参数列表. 在这种情况下, 只有 \f(CW\*(C`Cow\*(C'\fR. 然后Perl 查找 \f(CW\*(C`Cow::speak\*(C'\fR. 但是找不到, 所以Perl检查继承数组 \f(CW@Cow::ISA\fR. 找到了, 那里只有一个 \f(CW\*(C`Animal\*(C'\fR
.PP
Perl 然后在 \f(CW\*(C`Animal\*(C'\fR 中查找 \f(CW\*(C`speak\*(C'\fR, \f(CW\*(C`Animal::speak\*(C'\fR. 找到了, 然后调用该子程序, 参数在一开始就被固定了.
.PP
在子程序 \f(CW\*(C`Animal::speak\*(C'\fR 中, \f(CW$class\fR 是 \f(CW\*(C`Cow\*(C'\fR (第一个参数). 在我们调用 \f(CW\*(C`$class\->sound\*(C'\fR 时, 首先寻找 \f(CW\*(C`Cow\->sound\*(C'\fR , 找到了, 因此不用查看 \f(CW@ISA\fR. 成功!
.ie n .Sh "关于@ISA应该注意的几点问题"
.el .Sh "关于\f(CW@ISA\fP应该注意的几点问题"
.IX Subsection "A few notes about @ISA"
神奇的 \f(CW@ISA\fR 变量 (读作 \*(L"is a\*(R" 而不是 \*(L"ice\-uh\*(R"), 声明了 \f(CW\*(C`Cow\*(C'\fR 是一个(\*(L"is a\*(R") \f(CW\*(C`Animal\*(C'\fR。 注意它是一个数组,而不是一个单值, 因为在个别情况下, 需要在几个父类中寻找方法.
.PP
如果 \f(CW\*(C`Animal\*(C'\fR 也有一个 \f(CW@ISA\fR, 我们也要查看它. 寻找是递归的,深度优先,在每个 \f(CW@ISA\fR 中从左到右寻找. 一般地,每个 \f(CW@ISA\fR 只有一个元素(多元素意味着多继承和多重的头痛), 这样我们可以得到一个漂亮的继承树.
.PP
如果使用 \f(CW\*(C`use strict\*(C'\fR, @ISA会引起抱怨, 因为它不是含有显式包名的变量, 也不是字典变量 (\*(L"my\*(R"). 我们不能把它用做\*(L"my\*(R"变量(它必须属于所继承的包),但是也还是有几种解决的办法.
.PP
最简单的办法是加上包名:
.PP
.Vb 1
\&    @Cow::ISA = qw(Animal);
.Ve
.PP
或者使用包声明:
.PP
.Vb 3
\&    package Cow;
\&    use vars qw(@ISA);
\&    @ISA = qw(Animal);
.Ve
.PP
如果你希望把包放到程序内, 可以把:
.PP
.Vb 4
\&    package Cow;
\&    use Animal;
\&    use vars qw(@ISA);
\&    @ISA = qw(Animal);
.Ve
.PP
简写为:
.PP
.Vb 2
\&    package Cow;
\&    use base qw(Animal);
.Ve
.PP
这就精简多了.
.Sh "Overriding the methods 方法重载"
.IX Subsection "Overriding the methods"
让我们添上一只老鼠, 它的声音差不多听不到:
.PP
.Vb 10
\&    # Animal package from before
\&    { package Mouse;
\&      @ISA = qw(Animal);
\&      sub sound { "squeak" }
\&      sub speak {
\&        my $class = shift;
\&        print "a $class goes ", $class->sound, "!\en";
\&        print "[but you can barely hear it!]\en";
\&      }
\&    }
.Ve
.PP
.Vb 1
\&    Mouse->speak;
.Ve
.PP
输出为:
.PP
.Vb 2
\&    a Mouse goes squeak!
\&    [but you can barely hear it!]
.Ve
.PP
在这里, \f(CW\*(C`Mouse\*(C'\fR 有它自己的speak 函数, 所以 \f(CW\*(C`Mouse\->speak\*(C'\fR 不会调用\f(CW\*(C`Animal\->speak\*(C'\fR. 这叫做重载 \*(L"overriding\*(R". 实际上, 我们甚至不用说\f(CW\*(C`Mouse\*(C'\fR 是 \f(CW\*(C`Animal\*(C'\fR, 因为 \f(CW\*(C`speak\*(C'\fR 所用到的所有方法在 \f(CW\*(C`Mouse\*(C'\fR 中都有定义.
.PP
但是有些代码与 \f(CW\*(C`Animal\->speak\*(C'\fR 的相同 , 这在程序维护时是个问题. 我们能不能让 \f(CW\*(C`Mouse\*(C'\fR 与其它 \f(CW\*(C`Animal\*(C'\fR 作相同的事,但是给它加上特殊的部分呢? 可以!
.PP
首先,我们可以直接调用 \f(CW\*(C`Animal::speak\*(C'\fR 方法:
.PP
.Vb 10
\&    # Animal package from before
\&    { package Mouse;
\&      @ISA = qw(Animal);
\&      sub sound { "squeak" }
\&      sub speak {
\&        my $class = shift;
\&        Animal::speak($class);
\&        print "[but you can barely hear it!]\en";
\&      }