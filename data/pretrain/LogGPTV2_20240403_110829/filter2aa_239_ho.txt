Upgrade: websocket Connection: Upgrade，再加上WebSocket版本和安全信息。如果服务器
支持WebSocket协议，则它会用一个升级来回应，并从HTTP切换到WebSocket协议。
在WCF中，.NET 
4.5提供的两个新绑定支持WebSocket协议：netHttpBinding和
netHttpsBinding。
现在创建一个使用WebSocket协议的示例。开始是一个空白的Web应用程序，用于保
存服务。
HTTP协议的默认绑定是前面介绍的basicHttpBinding。定义protocolMapping来指定
netHttpBinding，就可以修改它，如下所示。这样就不需要配置服务元素，来匹配端点的
协定、绑定和地址了。有了配置，就启用serviceMetadata，允许客户端使用Add 
Service
Reference对话框来引用服务（配置文件
WebSocketsSample/WebSocketsSample/Web.config）。
服务协定由接口IDemoServices和IDemoCallback定义。IDemoServices是定义了方法
StartSendingMessages的服务接口。客户端调用方法StartSendingMessages启动过程，使服
务可以给客户端返回消息。所以客户端需要实现IDemoCallback接口。这个接口由服务器
调用，由客户端实现。
接口的方法定义为返回任务，于是服务很容易使用异步功能，但这不会遵从协定。以
异步方式定义方法独立于所生成的WSDL（代码文件
WebSocketsSample/WebSocketsSample/IDemoServices.cs）：
    using System.ServiceModel;
    using System.Threading.Tasks;
    namespace WebSocketsSample
    {
      [ServiceContract]
      public interface IDemoCallback
      {
        [OperationContract(IsOneWay = true)]
        Task SendMessage(string message);
      }
      [ServiceContract(CallbackContract = typeof(IDemoCallback))]
      public interface IDemoService
      {
        [OperationContract]
        void StartSendingMessages();
      }
    }
服务的实现在DemoService类中完成。在方法StartSendingMessages中，要返回给客户
端的回调接口通过OperationContext.Current.GetCallbackChannel来检索。客户端调用该方
法时，它在第一次调用SendMessage方法后立即返回。线程在完成SendMessage方法之前不
会阻塞。在完成SendMessage方法后，使用await把一个线程返回给StartSendingMessages。
接着延迟1秒，之后客户端接收另一个消息。如果关闭通信通道，则while循环退出（代码
文件WebSocketsSample/WebSocketsSample/DemoService.svc.cs）。
    using System.ServiceModel;
    using System.ServiceModel.Channels;
    using System.Threading.Tasks;
    namespace WebSocketsSample
    {
      public class DemoService : IDemoService
      {
        public async Task StartSendingMessages()
        {
        IDemoCallback callback =
          OperationContext.Current.GetCallbackChannel();
        int loop = 0;
        while ((callback as IChannel).State == CommunicationState.Opened)
        {
          await callback.SendMessage($"Hello from the server {loop++}");
          await Task.Delay(1000);
        }
        }
      }
    }
客户应用程序被创建为一个控制台应用程序。因为元数据可以通过服务获得，所以添
加服务引用会创建一个代理类，它可以用于调用服务，实现回调接口。添加服务引用不仅
会创建代理类，还会把netHttpBinding添加到配置文件中（配置文件
WebSocketsSample/ClientApp/App.config）：
回调接口的实现代码只把一条消息写入控制台，并带有从服务接收的信息。要启动所
有的处理过程，应创建一个DemoServiceClient实例，它接收一个InstanceContext对象。
InstanceContext对象包含CallbackHandler的一个实例，这个引用由服务接收，并返回给客
户端（代码文件WebSocketsSample/ClientApp/Program.cs）。
      using System;
      using System.ServiceModel;
      using ClientApp.DemoService;
      using static System.Console;
      namespace ClientApp
      {
        class Program
        {
          private class CallbackHandler : IDemoServiceCallback
          {
          public void SendMessage(string message)
          {
            WriteLine($"message from the server {message}");
          }
          }
          static void Main()
          {
          WriteLine("client… wait for the server");
          ReadLine();
          StartSendRequest();
          WriteLine("next return to exit");
          ReadLine();
          }
          static async void StartSendRequest()
          {
          var callbackInstance = new InstanceContext(new CallbackHandler());
          var client = new DemoServiceClient(callbackInstance);
          await client.StartSendingMessagesAsync();
          }
        }
      }
运行应用程序，客户端向服务请求消息，服务作出与客户端无关的回应：
    client… wait for the server
    next return to exit
    message from the server Hello from the server 0
    message from the server Hello from the server 1
    message from the server Hello from the server 2
    message from the server Hello from the server 3
    message from the server Hello from the server 4
    Press any key to continue . . .
44.6 宿主
在选择运行服务的宿主时，WCF非常灵活。宿主可以是Windows服务、WAS或IIS、
Windows应用程序或简单的控制台应用程序。在用Windows窗体或WPF创建自定义宿主
时，很容易创建对等的解决方案。
44.6.1 自定义宿主
先从自定义宿主开始。下面的示例代码列出了控制台应用程序中的服务宿主。但在其
他自定义宿主类型中，如Windows服务或Windows应用程序，可以用相同的方式编写服
务。
在Main方法中，创建了一个ServiceHost实例。之后，读取应用程序配置文件来定义绑
定。也可以通过编程方式定义绑定，如前面所示。接着，调用ServiceHost类的Open方
法，使服务接受客户端调用。在控制台应用程序中，必须注意在关闭服务之前不能关闭主
线程。这里实际上在调用Close方法时，会要求用户“按回车键”，以结束（退出）服务。
    using System;
    using System.ServiceModel;
    using static System.Console;
    class Program
    {
      static void Main()
      {
        using (var serviceHost = new ServiceHost())
        {
        serviceHost.Open();
        WriteLine("The service started. Press return to exit");
        ReadLine();
        serviceHost.Close();
        }
      }
    }
要终止服务宿主，可以调用ServiceHost类的Abort方法。要获得服务的当前状态，
State属性会返回CommunicationState枚举定义的一个值，该枚举的值有Created、Opening、
Opened、Closing、Closed和Faulted。
  注意： 如果从Windows窗体或WPF应用程序中启动服务，并且该服务的代码
调用Windows控件的方法，就必须确保只有控件的创建者线程可以访问该控件的方法和
属性。在WCF中，通过设置[ServiceBehavior]特性的UseSynchronizationContext属性可以
实现该行为。
44.6.2 WAS宿主
在WAS宿主中，可以使用WAS工作者进程中的功能，如自动激活服务、健康监控和
进程回收。
要使用WAS宿主，只需要创建一个Web站点和一个.svc文件，其中的ServiceHost声明
包含服务类的语言和名称。下面的代码使用Service1类。另外，还必须指定包含服务类的
文件。这个类的实现方式与前面定义WCF服务库的方式相同。
如果使用WAS宿主中可用的WCF服务库，就可以创建一个.svc文件，它只包含类的引
用：
 注意： 
使用IIS和WAS并没有限制为采用HTTP协议。通过WAS，可以使
用.NET TCP和Message Queue绑定。在内联网中，这是一个有用的场景。
44.6.3 预配置的宿主类
为了减少配置的必要性，WCF还提供了一些带预配置绑定的宿主类。一个例子是
System.ServiceModel.Web名称空间中System.ServiceModel.Web程序集中的WebServiceHost
类。如果没有用WebHttpBinding配置默认端点，这个类就为HTTP和HTTPS基址创建一个
默认端点。另外，如果没有定义另一个行为，这个类就会添加WebHttpBehavior。利用这
个行为，可以执行简单的HTTP GET、POST、PUT、DELETE（使用WebInvoke特性）操
作，而无需额外的设置（代码文件
RoomReservation/RoomReservationWebHost/Program.cs）。
    using System;
    using System.ServiceModel;
    using System.ServiceModel.Web;
    using Wrox.ProCSharp.WCF.Service;
    using static System.Console;
    namespace RoomReservationWebHost
    {
      class Program
      {
        static void Main()
        {
          var baseAddress = new Uri("http://localhost:8000/RoomReservation");
          var host = new WebServiceHost(typeof(RoomReservationService),
          baseAddress);
          host.Open();
          WriteLine("service running");
          WriteLine("Press return to exit…");
          ReadLine();
          if (host.State == CommunicationState.Opened)
          {
          host.Close();
          }
        }
      }
    }
要使用简单的HTTP 
GET请求接收预订信息，GetRoomReservation方法需要一个
WebGet特性，把方法参数映射到来自GET请求的输入上。在下面的代码中，定义了一个
UriTemplate，这需要待添加到基址中的Reservations后跟From和To参数。From和To参数依
次映射到fromTime和toTime变量上（代码文件
RoomReservationService/RoomReservationService.cs）。
    [WebGet(UriTemplate="Reservations? From={fromTime}&To={toTime}")]
    public RoomReservation[] GetRoomReservations(DateTime fromTime,
      DateTime toTime)
    {
      var data = new RoomReservationData();
      return data.GetReservations(fromTime, toTime);
    }
现在可以使用简单的请求来调用服务了，如下所示。返回给定时间段的所有预订信
息。
    http://localhost:8000/RoomReservation/Reservations? From=2012/1/1&To=2012/8/1
  注意： System.Data.Services.DataServiceHost是另一个带预配置功能的类。这
个类派生自WebServiceHost。
44.7 客户端
客户应用程序需要一个代理来访问服务。给客户端创建代理有3种方式：
● Visual Studio Add Service Reference ——这个实用程序根据服务的元数据创建代理
类。
● Service Model Metadata Utility工具（Svcutil.exe） ——使用Svcutil实用程序可以创
建代理类。该实用程序从服务中读取元数据，以创建代理类。
● ChannelFactory类 ——这个类由Svcutil实用程序生成的代理使用，然而它也可以用
于以编程方式创建代理。
44.7.1 使用元数据
从Visual Studio中添加服务引用需要访问WSDL文档。WSDL文档由MEX端点创建，
MEX端点需要用服务配置。在下面的配置中，带相对地址mex的端点使用
mexHttpBinding，并实现ImetadataExchange协定。为了通过HTTP GET请求访问元数据，
应把behaviorConfiguration配置为MexServiceBehavior。