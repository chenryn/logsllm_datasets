title:New Primitives for Actively-Secure MPC over Rings with Applications
to Private Machine Learning
author:Ivan Damgård and
Daniel Escudero and
Tore Kasper Frederiksen and
Marcel Keller and
Peter Scholl and
Nikolaj Volgushev
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
New Primitives for Actively-Secure MPC over Rings with Applications
to Private Machine Learning
Ivan Damg˚ard∗, Daniel Escudero∗, Tore Frederiksen†, Marcel Keller‡, Peter Scholl∗, Nikolaj Volgushev†
Aarhus University , {ivan, escudero, peter.scholl}@cs.au.dk
Alexandra Institute , {tore.frederiksen, nikolaj.volgushev}@alexandra.dk
∗
†
‡
Data61, CSIRO , PI:EMAIL
Abstract—At CRYPTO 2018 Cramer et al. presented
SPDZ2k, a new secret-sharing based protocol for actively secure
multi-party computation against a dishonest majority, that
works over rings instead of ﬁelds. Their protocol uses slightly
more communication than competitive schemes working over
ﬁelds. However, their approach allows for arithmetic to be
carried out using native 32 or 64-bit CPU operations rather
than modulo a large prime. The authors thus conjectured that
the increased communication would be more than made up for
by the increased efﬁciency of implementations.
In this work we answer their conjecture in the afﬁrmative.
We do so by implementing their scheme, and designing and
implementing new efﬁcient protocols for equality test, compar-
ison, and truncation over rings. We further show that these
operations ﬁnd application in the machine learning domain,
and indeed signiﬁcantly outperform their ﬁeld-based competi-
tors. In particular, we implement and benchmark oblivious
algorithms for decision tree and support vector machine (SVM)
evaluation.
Keywords-MPC; SVM; Decision trees;
I. INTRODUCTION
In the setting of secure multi-party computation, or MPC,
a set of parties P1, . . . , Pn jointly compute a function
z = f (x1, . . . , xn), where Pi holds some input xi, in a
secure manner. On a high level this means that all parts of
the computation must remain secret towards all parties, in
particular each party’s input must remain private, and no
party is able to modify the function being computed. In
recent years, many new applications have been discovered
for MPC, including wide-ranging areas such as distributed
key management, secure auctions, private genome analysis
and data mining.
The security of an MPC protocol is formulated by the
requirement that an execution of the protocol can be simu-
lated and shown to be equivalent to execution by a trusted
third party [1]. Security can then be speciﬁed according to
the powers an adversary is assumed to have. One of the
most important security metrics is whether we assume the
adversary is passively or actively corrupted. In the passive
corruption case we assume that the adversary follows the
prescribed protocol (but tries to break privacy by analyzing
the transcript of execution), whereas in the active corruption
case the adversary may deviate arbitrarily (to possibly break
both privacy and correctness). Of these, active security is the
most desired, but also the hardest to achieve. In particular
actively secure protocols tend to be orders of magnitude
slower than semi-honestly secure protocols, although recent
developments have made the gap much smaller [2], [3], [4].
Another important security metric is the number of parties an
adversary is allowed to corrupt. Of particular interest is the
setting where the adversary is allowed to corrupt more than
half of the participating parties, known as dishonest majority.
This include the interesting case of two-party computation,
but is much harder to achieve than the case of an honest
majority, for example with three parties and one corruption.
A. Computational Models in MPC
Different MPC protocols may require different representa-
tions of the function f, which can greatly affect the overhead
of the protocol, compared with computing f in the clear.
The most common approach is to consider f as a circuit
where input, output, and internal values are from some
algebraic structure and gates represent operations over this
structure. A typical choice of algebraic structure is the ﬁnite
[5], [6], [7], [2] , which means that f computes
ﬁeld F2
over bits, addition is equivalent to XOR, and multiplication
is equivalent to AND. Another popular choice is the ring
Zq [8], [9], [10], [4], [3] where addition and multiplication
are carried out over the integers modulo some large q. Some
protocols also use a binary extension ﬁeld F2k (for a large
k), where addition is equivalent to XOR but multiplication is
binary polynomial multiplication, which is particularly well-
suited to computing certain cryptographic functions such as
AES [11], [12], [13].
Each of these have their strengths and weaknesses, for
example F2 is best for bitwise computations such as com-
parison of two integers, symmetric encryptions and hash
functions, while arithmetic modulo q is suitable for arith-
metic operations such as computing statistics or linear
programming [14]. However, in an application it will of-
ten be useful to convert between different representations,
depending on the requirements at various stages of the
program. For example, this has been done successfully in
the ABY framework [15] and subsequent works [16], which
convert between arithmetic and binary sharings for applica-
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:42)(cid:87)(cid:66)(cid:79)(cid:1)(cid:37)(cid:66)(cid:78)(cid:72)(cid:66)(cid:83)(cid:69)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:24)(cid:25)
(cid:18)(cid:18)(cid:17)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:49:58 UTC from IEEE Xplore.  Restrictions apply. 
tions such as private biometric matching and classiﬁcation
using support vector machines, linear/logistic regression and
neural networks. The downside of these approaches is that
they only offer security against a passive adversary, or, in
the case of [16], can only achieve active security in the
restricted setting of three parties with an honest majority
(that is, no collusions). MPC protocols with active security
against a dishonest majority tend to be much more complex,
and also typically only support arithmetic modulo q, where
q is a large prime. This restriction makes it much more
difﬁcult to convert between Zq sharings and binary sharings,
making the protocols less suitable for applications where
these conversions are needed.
B. The SPDZ2k Protocol
A recent work by Cramer et al. [17] took a ﬁrst step
in overcoming the above hurdle, with a protocol named
SPDZ2k (after the SPDZ family of protocols [9], [18])
allowing actively secure, dishonest majority MPC over Zq
even when q is not a prime, for example q = 2k. This
gives hope that we may be able to exploit arithmetic in Z2k
to improve the efﬁciency of applications and obtain similar
beneﬁts to that seen recently in the honest majority setting
with the aforementioned protocols.
One of the main advantages of working modulo 2k is
that it corresponds naturally to 32/64-bit computations done
in standard CPUs, allowing for very simple and efﬁcient
implementations without ﬁnite ﬁeld arithmetic. Furthermore,
the fact that 32 and 64-bit computation has been the norm for
many years means that there are many algorithms optimized
for this domain. These cannot trivially be leveraged in MPC
applications working over Fp.
Despite these advantages, we note that Cramer et al. [17]
only described how to do additions and multiplications
securely over Z2k, which on its own is not enough to
realize complex applications. This is because a large number
of applications require efﬁcient sub-routines for operations
such as equality testing, comparison, and truncation, which
do not give rise to efﬁcient arithmetic circuits. Subprotocols
for these tasks are well-studied when the computation is over
Fp [19], [20], [21], but it is not immediately clear whether
these techniques apply directly to the ring setting over Z2k.
In particular, many of the techniques rely on properties of
ﬁelds, like the simple fact that division by 2 is possible (as
long as the characteristic of the ﬁeld is not 2). However, this
does not work modulo 2k since 2 is not invertible, so some
workarounds are needed.
C. Contributions
In this work we present new primitives and applications
for actively secure computation with a dishonest majority
using arithmetic modulo 2k. We ﬁrst describe efﬁcient pro-
tocols for conversion between binary and arithmetic sharings
in Z2k, and then leverage these to design efﬁcient protocols
for equality testing, comparison and truncation that work
over the ring of integers modulo 2k. Finally, we show how
these protocols can be applied to solve problems in machine
learning, namely, private classiﬁcation using decision trees
and support vector machines (SVMs).
We introduce several optimizations and implement our
protocols in the FRESCO framework [22], along with the
underlying SPDZ2k protocol of Cramer et al. [17]. We
benchmark and compare our implementation with SPDZ,
the state-of-the-art MPC protocol in the dishonest majority
setting, also implemented in the FRESCO framework. Our
implementation shows a speedup of 4–6x for SPDZ2k over
SPDZ for computing multiplication, equality and compar-
ison. We also implemented the preprocessing of SPDZ2k,
which is independent of the function to be computed, on
top of Bristol-SPDZ [23]. We show this implementation to
be highly competitive with the OT-based MASCOT [10]
protocol in both WAN and LAN settings. Compared with the
more recent Overdrive protocol [24] based on homomorphic
encryption, our preprocessing comes close to meeting Over-
drive’s performance in a LAN setting, but is several times
slower in a WAN due to the high communication costs.
To demonstrate our new building blocks, we consider
the application of oblivious evaluation of decision trees and
SVMs, and show that using our subprotocols for comparison,
coupled with the SPDZ2k protocol, is around 2–5.3x faster
in the online execution phase.
D. Overview of our Techniques
Both SPDZ, SPDZ2k, and in fact many contemporary
MPC protocols are cast
in the online/ofﬂine setting. In
this setting a “slow”, function independent, preprocessing
phase is ﬁrst carried out to construct some raw material.
When the parties know the speciﬁc function to compute,
along with their respective inputs, then this raw material
is used in the online phase to complete the actual com-
putation. The raw material consists of random elements,
and random triples for multiplications. During the online
phase the random elements can be used to obliviously give
input and similarly the multiplication triples can be used to
realize multiplication gates. We embrace this model in our
protocols, which are typically based on random preprocessed
triples, bits or random values, and we also show how to
generate this preprocessing data over the appropriate ring
for our binary and arithmetic protocols where this was not
previously studied.
For our arithmetic-to-binary conversions, we start with
the observation that an arithmetic SPDZ2k sharing of x ∈
Z2k, denoted [x], can be locally converted into a sharing
of x mod 2, but under a different secret-sharing scheme,
namely a SPDZ2k instance with k = 1. We therefore
deﬁne this instance with k = 1 to be our secret-shared
representation of binary values. This also immediately gives
us a complete arithmetic-to-binary conversion, assuming we
(cid:18)(cid:18)(cid:17)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:49:58 UTC from IEEE Xplore.  Restrictions apply. 
can ﬁrst bit-decompose x into SPDZ2k shares of its bits xi,
which we turn to later. To convert the other way, from binary
to arithmetic sharings, we can take a random SPDZ2k-shared
bit [r], convert r to a binary share, then open x ⊕ r and
use this to adjust [r] into an arithmetic sharing of x, which
can be done as a local computation. We can also perform
computations on binary-shared values similarly to operations
on SPDZ2k sharings, using multiplication triples designed
for our k = 1 instance of SPDZ2k to implement AND gates.
To complete the picture, we need to be able to generate the
necessary preprocessed random bits over Z2k and random
multiplication triples over Z2 (the case of triples over Z2k
was shown in [17]). Generating random bits modulo 2k is
not as simple as applying standard techniques from the ﬁeld
setting [18] since this relies on taking square roots modulo p,
but square roots modulo a power of 2 have a more complex
structure, so this cannot be directly applied. However, we
show how to exploit the nature of the secret-sharing scheme
in SPDZ2k such that it is still possible to generate random
bits using one multiplication triple, as in SPDZ.
We also show that binary SPDZ2k triples, with k = 1,
can be generated very efﬁciently by exploiting TinyOT-style
protocols [7], [25] based on XOR-sharings. To do this, we
give a conversion protocol which takes a batch of TinyOT-
like XOR sharings and converts them to binary SPDZ2k
sharings with almost no overhead. Since our conversion
protocol guarantees that the new sharings will be of the same
value, this means creating the new type of triples costs just
the same as in TinyOT. This gives us a huge advantage over
using native SPDZ2k triples, since TinyOT triples can be
generated at over 250 000 triples per second, more than
10x the throughput of our SPDZ2k implementation.
For our other key building blocks like secure comparison,
equality and bit decomposition, we adapt existing solutions
over ﬁnite ﬁelds [21] to the ring setting. Since many of these
protocols have key sub-components consisting only of bit-
wise operations, we can apply our conversion protocols to
optimize them. We thus obtain very fast online phases for se-
cure comparison and equality, with an online communication
complexity of just O(k) bits for k-bit integers. This gives up
to a 85-fold reduction compared with the online complexity
of protocols used in SPDZ, which typically require sending
O(k) ﬁeld elements per comparison or equality.
E. Related Work
Many of our subprotocols’ optimizations rely on moving
between computation over bits and over Z2k. Several previ-
ous works have studied conversions between different types
of secret-sharing representations for MPC, most notably the
ABY framework [15], which has passively secure two-party
protocols for converting between arithmetic, binary and Yao-
based secret data types. Chameleon [26] extended this to a
setting with an external, non-colluding third party to assist
in the computation, and ABY 3 [16] extended this to a more
general three-party honest majority setting, also with some
support for active security. On the theoretical side, share
conversion between different secret-sharing schemes was
ﬁrst studied by Cramer, Damg˚ard and Ishai [27].
In the last few years there has been a lot of research
in private machine learning applications using secure com-
putation. For our applications to decision tree and SVM
evaluation, the most relevant are the works by de Cock et
al. [28], Demmler et al. [26] and Makri et al. [29]. For
a more thorough survey including other machine learning
applications, we refer the reader to [30], [16].
On the side of MPC primitives like comparison, there has
been some other work in the setting of general, dishonest
majority MPC over the ring Z2k [31]. Although their pro-
tocols are quite efﬁcient asymptotically, they unfortunately
have quite large hidden constants and local computation,
compared to the state-of-the-art protocols working over
ﬁelds [21], and in turn our protocols as well.
Even though SPDZ2k is the only MPC protocol we are
aware of that works over the ring Z2k and is actively secure
against a dishonest majority, other authors have worked on
MPC protocols over Z2k, but with less stringent security
requirements. Of particular interest is Sharemind [32], as
this scheme also allows mixing boolean and arithmetic
operations. However, security is only in the passive, 3-party
setting for an honest majority. Sharemind has also been
extended to the active case [33]. Another relevant work in
this area is the compiler by Damg˚ard et al. [34], which can
transform a passively secure protocol for t corruptions into
t corruptions (meaning
an actively secure protocols for
an honest majority). Recently Araki et al. [35] presented a
highly efﬁcient stand-alone protocol for passive security in
the honest majority setting.
√
F. Outline
We organize the paper as follows: In Sec. II we give
background on the SPDZ2k protocol. Sec. III discusses the
connection between this and the TinyOT [7] protocol, which
only works over bits. We then show how to convert between
representations of SPDZ2k and TinyOT elements, develop
protocols for preprocessing bits for SPDZ2k in Sec. IV,
and show how this can be used to efﬁciently compute
equality testing, comparison, and truncation in SPDZ2k.
Sec. V shows machine learning applications that rely heavily
on comparison, in particular, oblivious decision tree and
SVM evaluation. We discuss our implementation of both
SPDZ2k, subprotocols and applications in Sec. VI, evaluate
its performance in Sec. VII, and conclude with Sec. VIII.
II. PRELIMINARIES
A. Notation
Given a natural number M, we denote by ZM the set of
integers x such that 0 ≤ x ≤ M − 1. We abbreviate the
congruence x ≡ y mod 2k as x ≡k y. We let x mod M
(cid:18)(cid:18)(cid:17)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:49:58 UTC from IEEE Xplore.  Restrictions apply. 
denote the remainder of x when divided by M, and we take
this representative as an element of the set ZM . When we
?
< b, we mean that c is 1 if a < b, and 0
write c = a
otherwise.
B. Background on SPDZ2k Shares and Core Protocols