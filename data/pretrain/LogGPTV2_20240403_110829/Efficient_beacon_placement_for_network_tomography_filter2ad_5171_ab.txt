these limitations by using a two-pronged approach:
1. Deterministic MES Computation:
In order to be in-
sensitive to routing dynamics, for each candidate beacon, we
determine the set of edges—referred to as its Deterministic
MES (DMES)—that can be monitored by it under all possi-
ble routing conﬁgurations.
2. Beacon Set Minimization: In order to minimize cost, we
address the problem of ﬁnding the smallest beacon set.
In the following two sections we present our abstractions and
methodologies for achieving these two steps for both simple and
locally-ﬂexible beacons.
3. DETERMINISTICALLY MONITORABLE
EDGE SETS
The ﬁrst key problem we need to solve is to ﬁnd the set of edges
that can be monitored by a beacon, independent of the routing con-
ﬁguration. This is formally captured in the following deﬁnition.
Deﬁnition 1. An edge is said to be deterministically moni-
torable by a beacon if the beacon can monitor it under all possible
route conﬁgurations. The Deterministically Monitorable Edge Set
(DMES) of a beacon is the set of all deterministically monitorable
edges associated with that beacon.
In what follows, we consider both simple and locally-ﬂexible
beacons and present algorithms for computing their DMES. Below,
we consider both simple and locally-ﬂexible beacons and present
methodologies for computing their DMES. We assume throughout
that a beacon of either type is able to monitor all edges directly
connected to it, irrespective of the routing conﬁguration. Thus, all
edges incident on a node u belong to its DMES. Lemma 1, proved
in [9], further establishes a crucial property of a deterministically
monitorable edge (DME).
Lemma 1. If a beacon u has the ability to reach, under all
possible route conﬁgurations, one of the end-points of an edge e
through that edge, then u can deterministically monitor e.
3.1 DMES for Simple Beacons
Theorem 1. Let u be a simple beacon and let S(v) be the set
of all distinct physical paths from u to another node v. The link
l(v) is deterministically monitorable by u if for all paths p in S(v),
l(v) is the last edge on p. The DMES of u is the set of all such
edges l(v) for all nodes v ∈ V .
Proof: Since all paths from the beacon u to v have l(v) as the last
edge, the current IP route from u to v (which takes one of these
paths) ends in the edge l(v). From Lemma 1, therefore, beacon u
is able to monitor the link l(v).
tiple link failures that occur simultaneously has been considered
in [12]. In general, it is not possible to detect all cases of simulta-
neous link failures in a given network. In [12], the authors restrict
their attention to those simultaneous link failures that can be de-
tected in the absence of any limitations on the number of beacons
and probes. They then provide efﬁcient algorithms for minimizing
the number of beacons and probes needed for detecting these fail-
ures. Like [4], this work assumes “simple” beacons and uses the IP
routing tree in the beacon set computation and, hence, is applicable
only to networks with non-dynamic routes. As part of future work,
we hope to use our formulations from this paper to extend the work
in [12] to other beacon types and to networks with dynamic routing.
Figure 2: The DMES may not a connected graph.
Note that a DMES yielded by Theorem 1 has no more structure
than an arbitrary edge set. In particular, the DMES need not form a
connected sub-graph; Figure 2 illustrates that the DMES of node 1
includes the edges 1-2 and 5-6. We now present an efﬁcient algo-
rithm for computing the DMES for simple beacons.
Algorithm 1. Computing DMES of a simple beacon u.
Initialize S to be an empty set;
For all edges l neighboring u
include l in S;
For all nodes v in V
do a depth first search from v;
(we get a set of forests each
connected to v by one or more
edges)
if u lies in the forest connected
to v by only a single edge e
include the edge e in S;
S is the DMES for u;
Proof: (Proof of correctness) Consider a depth ﬁrst tree (along
with its back edges) constructed from the node v. If we consider
all forests rooted at the immediate neighbors of v, then these might
connect to v via one or more edges. Separating forests this way
helps us to isolate all possible paths from the beacon u to the node
v. Any probe packet from u to v is entirely conﬁned to paths in
the forest containing u. Now, if the beacon u lies in a forest which
connects to v via only one edge, all paths from u to v have to cross
this edge at the end of the path. However, if u lies in a forest which
is connected to v via two or more edges, then there exist at least
two distinct paths from the beacon u to the node v which end in
different edges to the node v. This means that the edges are not
deterministically monitorable from u (Theorem 1).
Time Complexity: The cost of computing the DMES of a simple
beacon is essentially that of running a depth ﬁrst search (DFS) al-
gorithm at every node in the network. Since the time complexity of
running a depth ﬁrst search on G(V, E) is θ(|E| + |V |), the time
complexity of Algorithm 1 is θ(|V |(|E| + |V |)).
Note that the DMES for multiple beacons can be computed in
parallel. After running DFS on a node v, we can add an incident
edges of v to the DMES of all beacons that belong to the forest
rooted at the edge, if there are no more edges connecting that forest
to v. Since the number of potential beacons is bounded by |V |,
and the time complexity of depth ﬁrst search is θ(|E| + |V |), the
time complexity for the parallel DMES computation algorithm is
the same as above. Hence, we can calculate the DMES of all nodes
in G(V, E) in θ(|V |(|E| + |V |)) time.
1234563.2 DMES for Locally-ﬂexible Beacons
4. BEACON SET MINIMIZATION
Theorem 2. Let u be a locally-ﬂexible beacon and Eu be the
set of edges directly connected to u. For each edge i ∈ Eu, let
Si(v) be the set of all paths from u to any other node v, that start
with the edge i. A link li(v) is deterministically monitorable from
u if for all paths in Si(v), li(v) is the last edge. The DMES of u
is the set of all deterministically-monitorable edges li(v), for all
v ∈ V and all i ∈ Eu.
Proof: Since locally-ﬂexible beacons can select the outgoing link
on which to transmit a probe, we need to consider only those paths
to v which start from a speciﬁc edge in Eu, to see if there is a
common ending edge. Thus, even if u has paths to v which end
with different edges, if all paths to v that start from u with edge i
end with a common edge li(v), u has the control over the ability to
reach v through li(v). From Deﬁnition 1 and Lemma 1, therefore,
the common edge is deterministically monitorable.
Below, we present an algorithm for computing the DMES for locally-
ﬂexible beacons.
Algorithm 2. Computing DMES of a locally-ﬂexible beacon
u.
Initialize S to be an empty set;
For all edges i neighboring u
include i in S;
remove i from E;
For all nodes v in V
do a depth first search from v;
(we get a set of forests each
connected to v by one or more
edges)
if one of u’s neighbors lies in
the forest connected
to v by a single edge e
include the edge e in S;
S is the DMES for u;
Proof: (Correctness) The proof is similar to that for Algorithm 1.
Let ui be the neighbor connected to u through i. The forest con-
taining ui also contains all paths from u to v that start in i. This is
because, if there was another path from u to v through i, v and ui
would have been connected via a path which would be captured in
the depth ﬁrst search. Conversely, consider any simple path from
ui to v. Since Algorithm 2 removes i from E, adding i at the start
of the path still retains the “simple” property of the path. Such a
path is a valid path from u to v starting with edge i. Since we re-
moved u’s neighboring edges from E, one could argue that some
paths might be missing. However, this cannot be true because no
simple paths from v to u would transit u in the middle of the path.
Hence the forests obtained by removing the edges neighboring u
are representative of all paths from u’s neighbors to v.
Time Complexity: The cost of this algorithm is that of running a
depth ﬁrst search on each node and for each depth ﬁrst search run
checking if any of the neighbors of u are in a singly connected
forest. Thus, if the degree of u is k, the time complexity of the
algorithm is θ(|V |(|E| + |V | + k)). Since k is bounded by |V |,
the time complexity is θ(|V |(|E| + |V |)). Note that, unlike simple
beacons, DMES can not be computed in parallel for multiple nodes
because for each beacon we customize the graph G(V, E) (removal
of neighboring edges) speciﬁc to the beacon before doing all the
depth ﬁrst searches. The complexity of computing DMES for all
nodes in G(V, E) is, therefore, θ(|V |2(|E| + |V |)).
The second key problem—of minimizing the beacon set for a
network—is formally stated below:
Beacon Minimization Problem (BMP).
Let Du be the
DMES associated with a node u ∈ V . Then the beacon-minimization
problem is to ﬁnd the smallest set of beacons, B ⊆ V , such that
b∈B Db = E.
S
Theorem 3. The Beacon Minimization Problem is NP-complete.
at least its neighboring edges,S
Proof: Let the graph under consideration be G(V, E). Let S be the
set {Dv : v ∈ V }. Since every node can deterministically monitor
S
v∈V Dv = E. Also, Dv ⊆ E.
To ﬁnd the smallest beacon set we need to ﬁnd B ⊆ S such that
Dv∈B Dv = E and |B| is minimized. This is the the same as
the classic Minimum Set Cover problem (MSCP) [13]. Thus, there
is a one-to-one correspondence between BMP and MSCP, by using
the concept of deterministically monitorable edge sets. The Min-
imum Set Cover Problem is known to be NP-Complete [13, 14];
this implies that BMP is NP-complete as well.
Fortunately, MSCP has a pruning-based approximate solution—
below, we adapt the pruning algorithm and use heuristics from the
literature to establish optimality bounds for it.
Algorithm 3. Find the beacon set for completely monitoring a
graph G(V, E).
Initialize B to be an empty set;
Initialize E’ = E;
while E’ is not empty
Select* a node u from V not in B;
E’ = E’ - the DMES of u;
Include u in B;
B is the beacon set;
There exists a known heuristic for the MSCP pruning-based so-
lution that ensures that the size of the solution is within a bound
of the optimal [15]. The heuristic maps to the following node-
selection rule (* in above algorithm) for BMP. Select that node for
a beacon whose DMES has the maximum overlap with the current
pruned graph. Speciﬁcally, if E0 is the current set of edges of the
pruned graph then we choose the node v such that |Dv∩E0| is max-
imum. This heuristic results in provable [15] bounds of optimality
of the beacon set as:
|B(optimal)| = 1 + ln|E|.
|B(heuristic)|
4.1 Further Optimizations
We next establish additional monitoring-related properties of net-
works that let us further optimize the computation of the mini-