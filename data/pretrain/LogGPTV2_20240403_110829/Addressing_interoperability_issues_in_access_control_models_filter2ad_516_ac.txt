PERMS
Validity
:= KB CID244
:=
:=
PRMS (ROLE.Manager) - PRMS.Update
not-before “2006-09-01 00:00:00”
not-after “2007-08-31 23:59:59”
Figure 4: Typical usage of name commitment-hash-message to
deﬁne local names with authorizations
MBb :=
Name
PERMS
Validity
:= KB CID244
:=
:= TRUE (TASK.T)
PRMS (ROLE.Manager) - PRMS.Update
Figure 5: Containing validity of authorizations through TASK
variable
overlay.
KB CID244 −→ KA CID411Users
{XAa}SKB
(13)
(14)
Principal KA need not issue any such authorization commitments
for KB, since its resources are not taking part into collaboration. In
this fashion, KB formed a bridge with the help of KA to facilitate
users from domain A to access resources in domain B. In next sec-
tion, we will see a comprehensive scenario where both the collabo-
rators are actively participating with possible concurrent collabora-
tions with third parties. We shall also see the privacy implications
in such multi-layer collaborations.
3. A TYPICAL COLLABORATION SCE-
NARIO
In this section we shall see full potential of our mechanism in terms
of the ease it brings in forging concurrent collaborations, interlink-
ing collaborators, and privacy.
We explain these with the help of a scenario, graphically depicted
in Figure 6. Figure 6(a), shows two autonomous administrative do-
mains (collaborators) A and B negotiating for a collaboration. Let
us assume, A is a software ﬁrm that provides IT related services.
B is a big industrial organization that is willing to engage A to
cater its IT related needs. A and B are the actual sub-domains of
these respective organizations that are actively collaborating. Let
KA and KB be the public keys of administrators responsible to man-
age these sub-domains. For this probable collaboration to go for-
ward, B needs to open up its resources so that experts from domain
A can perform their jobs for B. And auditors from B need to ac-
cess an auditing tool licenced to A. In order to accommodate these
mutual requirements, A and B propose their overlays to each other
as shown in Figure 7(a). Note that the speciﬁcs of their exact col-
laboration related tasks are abstracted under variable “T1”. How-
ever, name deﬁnitions have explicit time interval speciﬁed. In other
words, name deﬁnitions and corresponding bindings are valid for
the speciﬁed time interval but the authorization deﬁnitions and cor-
responding bindings are valid only during the life time of “TASK”.
Figure 6(b) and 7(b) show the steps involved in enforcing the col-
laboration among A and B, where A empowers the users from B by
issuing an authorization commitment and similarly B does it for A’s
users. A and B sign the chameleon hash values of each others’ name
deﬁnitions as an agreement for collaboration. We denote collabo-
ration by • operator and place a subscript to it that holds context
of the collaboration. Collaboration among A and B is thus denoted
as: A •T1 B. Concurrently, A starts negotiating another collabora-
tion with C. The motivation is, B comes forward with some IT job
(say, compiling a huge data set of its customers and their spending
habits) which A should do but has no expertise in data-mining tech-
nology. Therefore, A wants to take help from data-mining experts
from C. A and C negotiate their respective overlays for this collabo-
ration. For this collaboration, C is participating only with its users,
where A is offering its resources (which are actually B’s resources
– the data set). This is possible because of the “Pre-enforcement”
setting done in A. The pre-enforcement settings and enforcement
steps by A for C are listed in Figure 7(c). But, there is a caveat.
The context for A •T2 C is T2. The data-mining experts from C can
work on the data set of B iff T2 ⊆ T1. This provides a mean to ad-
dress the typical requirement of decomposing a task into sub-tasks
and satisfying sub-tasks from different concurrent collaborations.
Privacy – In collaboration enforcement phases, collaborators are
signing chameleon hash’s computed by peers as an agreement for
collaboration. These are chameleon signatures – that provide with
an undeniable commitment of the signer to the contents of a signed
document (as regular signatures do) but, at the same time, do not
allow the recipient of the signature to disclose the contents of the
signed information to any third party without the signer’s consent
[25]. Thus, collaborations formed using our mechanism enjoy pri-
vacy.
The strong arrowed lines in Figure 6(b) and 6(c) indicate the
bridges for users, from autonomous administrative domains, to ac-
cess resources.
4. EXPERIMENTAL ANALYSIS
We have implemented three different ﬂavors of chameleon hash
functions based on i) simple factorization, ii) discrete logarithm
(both from [25]), iii) advanced factorization (from [38]); and the
results are tabulated in Table 1. Implementation of these schemes
can be categorized into two phases: Hash Computation/Generation
and Finding Collision. These schemes produce hash of length 160-
bits. The values are taken over the average of 100 runs.
The implementation is carried out on a GNU/Linux (i486) platform
with gcc-3.3.5, OpenSSL 0.9.7e library for cryptographic primi-
tives (without any external cryptographic acceleration) and numer-
ical analysis. To get a fair computational estimation, we did not use
any code optimization of gcc while building our executables.
4.1 Approach to Compute Execution Time
Various approaches are possible to audit the process execution time.
We employed the method of tracking CPU cycles consumed during
execution of a function of our interest. The experiments are carried
out on an AMD 750MHz machine, that complies to the IA32 archi-
tecture (which provides cycle counter; a 64-bit, unsigned number).
The IA32 counter is accessed with the rdtsc (read time stamp
counter) instruction. This instruction takes no arguments. It sets
register %edx to the high-order 32 bits of the counter and register
%eax to the low-order 32 bits. Based on this methodology, a pair
of functions are integrated with our code that allows us to measure
the total number of cycles that elapse between any two time points:
#include "clock.h"
void start_counter(); /* Starts the counter */
double get_counter(); /* Returns: Number of cycles
since last call to
start_counter */
To verify the precision of this approach we marked the counter be-
fore and after sleep(sleeptime); function call (where sleeptime
equals to one). We obtained 756,154,624.0 as return value (i.e.,
756.2 MHz). We run each function of our interest for 101 times
and discarded the ﬁrst value of execution time in favor of cache
warming process. Furthermore, results are gathered in run-level 1;
to minimize interference from other processes.
4.2 Comparative Analysis
Chameleon scheme based on simple factorization gives the least
time required for hash computation while the scheme based on ad-
vanced factorization gives the least time required for computing
a hash collision. Generally, in a collaboration setup, there will
A
A
B
CID
411
overlay
CID
244
overlay
B
9(a) A and B proposing their collaboration speciﬁc overlays
B
B
A
A
A •T1 B
B
CID
499
overlay
CID
110
overlay
C
C
9(b) A and B form collaboration for task T1, concurrently A negotiates another collaboration with C
A
A
A
B
A •T2 C
C
C
9(c) A and C form collaboration for task T2, building a uni-directional bridge for C’s users to reach A’s resources
Figure 6: Inter-domain collaboration scenario
CHK(., .) Schemes
Simple Factorization
Finding
Advanced Factorization
Finding
Computation Collision Computation Collision Computation Collision
Discrete Logarithm
Hash
Hash
Finding
Hash
Time (in ms)
14.375
46.503
140.881
0.887
56.139
0.720
Table 1: Flavors of chameleon hash functions and their computational costs
Overlay from A:
Overlay from B:
, where
, where
MAa :=
Name := KA CID411Users
Validity :=
not-before “2006-09-01 00:00:00”
not-after “2007-08-31 23:59:59”
MBp :=
Name := KB CID244Users
Validity :=
not-before “2006-09-01 00:00:00”
not-after “2007-08-31 23:59:59”
and,
, where
and,
, where
MAb :=
Name := KA CID411
PERMS :=
Validity := TRUE (TASK.T1)
PRMS (ROLE.Auditor)
MBq :=
Name := KB CID244
PERMS :=
Validity := TRUE (TASK.T1)
PRMS (ROLE.Manager) - PRMS.Update
Enforcement by A for B:
Enforcement by B for A:
9(a) Internals of overlays from A and B
KA CID411 −→ KB CID244Users
and,
{XBp}SKA
Overlay from A:
KB CID244 −→ KA CID411Users
and,
{XAa}SKB
Overlay from C:
, where
MCc := No name deﬁnitions,
Users are not participating.
MCa :=
, where
Name := KC CID110Users
Validity :=
not-before “2006-09-01 00:00:00”
not-after “2007-08-31 23:59:59”
MAc :=
Name := KA CID499
PERMS :=
Validity := TRUE (TASK.T2)
PRMS (ROLE.DBA) - PRMS.Update
MCc := No authorization deﬁnitions,
Resources are not participating.
9(b) Steps involved in enforcing collaboration between A and B, Overlays from A and C
Pre-enforcement setting by A:
tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt tttttttt
KU3 TeamDBA −→ KA CID499
Enforcement by A for C:
KA CID499 −→ KC CID110Users
and,
{XCa}SKA
9(c) Pre-enforcement setting done by A and steps involved in enforcing collaboration between A and C
Figure 7: Inter-domain collaboration scenario
be relatively small number of name and authorization deﬁnitions
(hash computations) than the number of corresponding commit-
ments (hash collisions) for these deﬁnitions. But the proof veri-
ﬁcation process involves hash computations, in order to verify the
authenticity of commitments used in proofs, and takes the overall
number of hash computations performed during the span of collab-
oration above the number of hash collisions performed by collabo-
rators together. An exception to this generalization happens while
the inter-domain interaction among collaborators is little and their
intra-domain user assignments are frequent. Therefore, loosely
speaking, collaborations can be categorized in three types – the
two mentioned above and the third in which only one peer is ac-
tively participating. Again under this third category, there can be
sub-categories similar to the two former types mentioned above.
This categorization of collaborations makes sense while choosing
the chameleon hash scheme. Collaborations in which the collec-
tive hash computations by collaborators are much higher than their
relative commitments, the scheme based on simple factorization is
suitable. On the other hand where the collective number of commit-
ments is very high than the collective number of chameleon hashes,
the scheme based on advanced factorization is suitable. It is inter-
esting to know that the choice of chameleon scheme for collabora-
tion itself is a negotiation aspect among collaborators as it decides
the overall computational cost in their individual domains. This
is very useful if one of the administrative domain is computation-
ally constrained, for example an environment consisting sensors (or
imagine futuristic personal area networks of electronic gadgets),
where computationally powerful collaborator agrees for a scheme
in which its overall computational costs are higher than its peer
domain.
We hope that the importance, and capability of chameleon schemes
will bring forward more efﬁcient implementations to existence.
Our implementations are available at [5].
4.3 Advantages of our mechanism
1. Our mechanism to deﬁne names, authorizations and binding
entities to them allows collaborating partners to arrange their
respective collaboration speciﬁc entities in a manageable and
understandable form. This abstraction of collaborating enti-
ties from rest of the underlying access control setup keeps
the modiﬁcations in pre-collaboration setup to the least pos-
sible – only new rules for visiting users from collaborating
domain are need to be integrated in host domain’s resource
ACLs. Upon completion of collaboration, the rules in ACLs
shall lapse and pre-collaboration functionality will be auto-
matically restored.
2. The fact that the commitment-hash-message and commitment-
message are text strings, allows us a free hand at their in-
ternal composition as per requirements. One can also utilize
this fact to incorporate the XACML/SAML structure to com-
pose these messages. The resulting deﬁnitions/assertions us-
ing such enriched pre-image messages are very useful in re-
alizing complex policies.
3. Apart from standard signatures, sanitizable signatures [3]
and undeniable signatures with full convertibility are also
readily available, courtesy chameleon hash functions. The
use of chameleon signatures, which is an efﬁcient type of
non-interactive undeniable signatures, as an agreement for
collaboration gives a unique privacy property to collabora-
tions formed using our mechanism.
4. Having the requirement of just an asymmetric key pair, our
mechanism addresses heterogeneity of collaborators in terms
of their underlying access control models, type of PKIs they
use, and also their computational capabilities.