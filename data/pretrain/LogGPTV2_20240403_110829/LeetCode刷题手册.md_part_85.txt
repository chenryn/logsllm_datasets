4) occurs 2 times;
=[1,1,2,2,2,2]，target = 
(A[i]，A[j]， A[k]]:
要求找到3个数相加的和等于 target的解组合的个数，并
5
---
## Page 888
题目
924. Minimize Malware Spread
func threesumMulti(A []int, target int) int {
package leetcode 
import 
return res % mod
for key := range counter {
uniqNums := []int{}
mod := 1000000007
"sort"
for i := O;i= 3 { 
if c>uniqNums[j] && counter[c]>O{
C := target - uniqNums[i] - uniqNums[j]
if (uniqNums[j]*2+uniqNums[i] == target) && counter[uniqNums[j]] > 1 { 
nj := counter[uniqNums[j]] 
res += ni * (ni - 1) * (ni - 2) / 6 
res += ni * nj * counter[c] 
res += nj * (nj - 1) / 2 * ni
res += ni * (ni - 1) / 2 * nj
---
## Page 889
删除一个节点。如果移除这一节点将最小化 M(initial)，则返回该节点。如果有多个节点满足条件，就
初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点
在节点网络中，只有当 graphilj]=1时，每个节点i能够直接连接到另一个节点j。一些节点 initial 最
题目大意
Note:
Example 3:
Example 2: 
Example 1: 
later as a result of the malware spread.
Note that if a node was removed from the initial list of infected nodes, it may still be infected
We will remove one node from the initial list. Return the node that if removed, would minimize
after the spread of malware stops.
Suppose M(initial) is the final number of nodes infected with malware in the entire network,
connected and at least one of those two nodes is infected by malware, both nodes will be 
 Some nodes initial are initially infected by malware. Whenever two nodes are directly 
都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。假设
with the smallest index.
M(initial). If multiple nodes could be removed to minimize M(initial), return such a node 
this manner.
infected by malware. This spread of malware will continue until no more nodes can be infected in 
graph[i][j] = 1.
In a network of nodes, each node i is directly connected to another node j if and only if 
M(initial)是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。我们可以从初始列表中
S
2
Output:1
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initia] = [1,2]
Output:0
4
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initia] = [0,2]
Output：0
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initia] = [0,1]
. 1  ‘.xale. = aweu :anduI
return minIndex
for -, V := range initial {
tmp := countMap[uf.Find(v)]
countMap[uf.Find(i)]++
if count  0 & j keys[O] {
if graph[i][j] == 1 & malwareMap[i] == 0 && malwareMap[j] == 0 {
if i == j{
keys = append(keys, k)
for k := range v {
keys := []int{}
 minIndex = keys[0] 
p := uf.Find(j) 
uf.union(i，j)
break
infectMap[p][i] =i