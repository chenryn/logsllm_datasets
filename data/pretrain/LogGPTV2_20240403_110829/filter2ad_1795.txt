# Chronos: Timing Interference as a New Attack Vector on Autonomous Cyber-Physical Systems

**Authors:**
- Ao Li, Washington University in St. Louis
- Jinwen Wang, Washington University in St. Louis
- Ning Zhang, Washington University in St. Louis

## Abstract
Timing properties are crucial in Cyber-Physical Systems (CPS) due to their interaction with the physical world. The smooth operation of these systems often depends on accurate and timely perception and actuation. In this work, we introduce Chronos, a new class of attack that exploits timing interference to destabilize CPS. By compromising a non-privileged, non-critical task, we launch timing interference attacks on both drone and autonomous vehicle platforms. Through open-loop and closed-loop testing, we demonstrate that such attacks can lead to complete loss of control, even in the absence of software vulnerabilities.

To better understand this novel attack vector, we conduct preliminary investigations into the localization components of these platforms, which rely on timing-sensitive simultaneous localization and mapping (SLAM) algorithms. Based on our case study, we formulate the timing attack surface and highlight future research directions.

## CCS Concepts
- Security and privacy → Software security engineering

## Keywords
- Timing attack
- Timing sensitivity analysis
- Simultaneous Localization and Mapping (SLAM)
- Robotics security

## ACM Reference Format
Ao Li, Jinwen Wang, and Ning Zhang. 2021. Chronos: Timing Interference as a New Attack Vector on Autonomous Cyber-physical Systems. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21). ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.3485350

A demo video is available at [https://youtu.be/7oyXs1yW2xw](https://youtu.be/7oyXs1yW2xw). This work was supported in part by the US National Science Foundation under grants CNS-1837519 and CNS-2038995.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485350

## 1. Introduction
Cyber-Physical Systems (CPS) play an increasingly important role in our society, driving innovations in self-driving cars, medical robots, smart factories, and other domains. A key difference between CPS and conventional IT systems is their interaction with the physical world. While many computational tasks in IT systems can be suspended, calculations in CPS often have strict timing requirements. Computationally correct but untimely results can destabilize the system.

Existing works in cyber-physical timing security generally assume either the presence of software vulnerabilities or the ability to compromise non-privileged, non-critical tasks. In this paper, we assume that a non-privileged, non-critical task can be compromised, but the control system software is bug-free. We investigate whether it is feasible to exploit timing interference as an attack vector to cause control errors in CPS. To the best of our knowledge, we are the first to demonstrate and dissect timing interference as an effective attack vector on real-world CPS.

As shown in Figure 1, an attacker controlling a non-privileged task can interfere with the system's timing by executing performance-degrading tasks, such as random memory access to pollute the cache. This can degrade system control performance or even completely disable the autonomous system, as demonstrated in our demo video.

To gain a deeper understanding of this new attack surface, we conduct a case study on the perception subsystem of CPS. Both the drone and the Jackal UGV platform use SLAM for localization. SLAM is a representative robotic algorithm involving filter-based estimation and multiple sensor fusion. Since SLAM is a critical component in the control pipeline, its precision directly impacts system performance. We found two factors enabling the attack:

1. **Desynchronization in Sensor Fusion:** Errors arise from the desynchronization of different sensor inputs. Even with hardware synchronization, a timing attack can interfere with the timing of sensor polling, undermining the implicit assumption of consistent software execution timing.

2. **Delay in Control:** Delays in computation tasks for control can impact the accuracy of perception, leading to inaccurate key frame recognition and continuous deviation from the ground truth. These errors accumulate over time due to the continuous nature of state estimators.

## 2. Timing Vulnerabilities in SLAM
To understand the source of errors due to timing interference, we study the architecture and implementation details of SLAM systems. We identify four categories of errors observed in our attack:

- **Pose Estimation Error:** Modern SLAM models the matching between adjacent frames via Maximum a Posteriori (MAP) estimation. The accuracy of the solver depends on the quality of the initial guess given by inertial information.

- **Pose Extrapolation Error:** Inertial data is forward propagated to achieve a higher localization rate. An increase in execution time in the visual processing subsystem causes inaccuracy in the fused visual-inertial state estimation, as IMU bias cannot be corrected in time.

- **Initialization Error:** Most SLAM systems require an initialization step to calibrate IMU bias. Incorrect initialization can negatively affect the entire trajectory or cause re-initialization.

- **Graph Optimization Error:** Modern SLAM uses factor graphs to reason about the interdependence among key submaps. This is also formulated as a MAP problem, making it vulnerable to the same issues as pose estimation.

## 3. Attack Evaluation
### 3.1 Experimental Setup
Our evaluation is conducted in two setups: an open-loop evaluation using the EuRoC MAV dataset to analyze timing sensitivity, and a closed-loop evaluation with simulated Jackal UGV and office scenarios in Gazebo. We targeted four SLAM systems: VINS-Mono, ORB-SLAM, Cartographer, and Adaptive Monte-Carlo Localization. The entire software stack was run on a laptop with an Intel i7-7700HQ CPU and 8GB RAM, while the simulation ran on a host PC with an Nvidia GTX 1060 GPU.

### 3.2 Attack Prototype
To interfere with the execution time of victim tasks, we implemented a proof-of-concept adversary task that writes an array with cache line size jumps in each iteration in an infinite loop. This evicts the cache used by victim tasks due to contention. We launched the adversary tasks with default scheduling priority, varying the number of attack tasks from 0 to 6 to indicate the intensity of the attack.

### 3.3 Timing Sensitivity Analysis
We configured several system overheads with different contention intensities to demonstrate that SLAM systems are prone to timing anomalies due to resource contention. The results in Table 1 show that the execution time of SLAM could double under resource exhaustion. The absolute trajectory error accumulated during travel, causing the localization to deviate more than 0.3 meters from the ground truth.

### 3.4 Attack Effectiveness
To evaluate the effectiveness of the attack, we conducted both open-loop and closed-loop evaluations. Open-loop testing highlights differences in control output over small time periods. Our experiment on VINS-Mono showed that the attack caused significant deviation from the ground truth, with a maximum absolute trajectory error greater than 1 meter, leading to potential drone crashes.

In the closed-loop evaluation, we tested a Jackal UGV running Cartographer for localization. The tracked trajectory under attack lost localization and crashed into a wall, while the vehicle without the attack closely followed the reference path.

## 4. Conclusion and Future Work
In this paper, we presented our preliminary investigation into leveraging timing interference as a new attack vector. Despite the simplicity of our proof-of-concept attack, it was highly effective on both autonomous vehicles and drones. Using SLAM as a target subsystem, we analyzed and categorized four types of errors.

Given the growing importance of autonomous CPS, it is crucial to further study, characterize, model, and mitigate this new attack vector. In the future, we aim to develop a more comprehensive characterization of the attack by considering advanced attack models on additional platforms and to develop techniques to mitigate such risks in CPS.

## References
[1] Asctec Firefly MAV. http://www.asctec.de.
[2] Baidu Apollo Open-Source Self-Driving Project.
[3] Cartographer. https://google-cartographer.readthedocs.io.
[4] Jackal UGV. https://clearpathrobotics.com.
[5] Novatel GNSS Inertial Navigation Systems.
[6] Nvidia Xavier AGX. https://www.nvidia.com.
[7] Velodyne HDL-32E. https://velodynelidar.com/products/hdl-32e/. Accessed: 08-15.
[8] Michael Burri et al. The Euroc Micro Aerial Vehicle Datasets. The International Journal of Robotics Research.
[9] Dieter Fox. KLD-sampling: Adaptive Particle Filters and Mobile Robot Localization. In NIPS, 2001.
[10] Wolfgang Hess et al. Real-time Loop Closure in 2D LIDAR SLAM. In ICRA. IEEE, 2016.
[11] Dan Iorga et al. Slow and Steady: Measuring and Tuning Multicore Interference. In RTAS. IEEE, 2020.
[12] Nathan Koenig and Andrew Howard. Design and Use Paradigms for Gazebo, an Open-Source Multi-Robot Simulator. In IROS. IEEE, 2004.
[13] Mulong Luo et al. Stealthy Tracking of Autonomous Vehicles with Cache Side Channels. In USENIX Security, 2020.
[14] Rouhollah Mahfouzi et al. Butterfly Attack: Adversarial Manipulation of Temporal Properties of Cyber-Physical Systems. In RTSS, 2019.
[15] Raul Mur-Artal et al. ORB-SLAM2: An Open-Source SLAM System for Monocular, Stereo, and RGB-D Cameras. IEEE Transactions on Robotics.
[16] Tong Qin et al. VINS-Mono: A Robust and Versatile Monocular Visual-Inertial State Estimator. IEEE Transactions on Robotics.
[17] Yipu Zhao et al. Closed-Loop Benchmarking of Stereo Visual-Inertial SLAM Systems: Understanding the Impact of Drift and Latency on Tracking Accuracy. In ICRA. IEEE, 2020.