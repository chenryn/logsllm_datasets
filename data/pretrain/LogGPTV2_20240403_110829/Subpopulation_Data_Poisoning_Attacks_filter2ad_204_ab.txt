transferability of poisoning availability attacks.
Backdoor Attacks. While red-herring attacks [48] can be consid-
ered as precursors to backdoor attacks, Gu et al. [23] is generally
regarded as the first backdoor attack against modern neural net-
works. It identified a security issue with ML-as-a-service models,
and involved generating poisoned data with a backdoor pattern to
influence the model to classify incorrectly new backdoored test-
ing points. Successive work introduce clean-label backdoor attacks
which assume that the adversary does not control the labeling func-
tion [71]. Other applications of machine learning, such as Federated
Learning models, have been shown to be vulnerable to backdoor
attacks [1]. To defend against backdoor attacks, [70] use SVD de-
composition on the latent space learned by the network to develop
an outlier score. [42] combines pruning and fine-tuning the network.
[74] identify poisoning by measuring the minimum perturbation
necessary to transform inputs into a target class.
Targeted Attacks. Shafahi et al. [60] introduce a clean-label, opti-
mization-based targeted poisoning attack. Suciu et al. [67] study
the transferability of targeted attacks. Schuster et al. [59] show
targeted poisoning attacks on word embedding models used for
NLP tasks. Koh et al. [30] introduce an influence-based targeted
attack and show an example on targeted attacks affecting multiple
points at once. Koh et al. [32] evaluate the effectiveness of influence
functions for predicting how models change when multiple points
are removed from a dataset. Our work uses larger datasets and mod-
els, and constructs attacks, which add poisoned points to influence
predictions on the target subpopulation. Witches’ Brew [21] uses a
gradient matching loss, along with various optimization techniques,
to perform targeted attacks which require little information of the
learner’s setup. We show in Section 6 that our identification of
subpopulations can be used to make targeted attacks more efficient,
comparing to both [30] and [21].
Related Attacks - Table 1. We outline in Table 1 a comparison
with other attacks in prior work that are closer to the attacks we
present. We include targeted attacks, such as [1, 21], which are
capable of attacking multiple points. These types of attacks do not
generalize to new points, however— they are only capable of harm-
ing the specific points the attack was generated for. The reflection
backdoor [43] adds natural image modifications induced by light
reflection. The composite backdoor [41] adds natural modifications,
such as certain faces, into a sample to induce misclassifications.
These types of backdoors, while still using natural images, require
test-time modifications to induce misclassification. Our attacks are
Session 11D: Data Poisoning and Backdoor Attacks in ML CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3106the only ones which do not require test-time misclassifications,
generalize to unseen points, function in a variety of data modali-
ties, and do not require knowledge of the exact training set. Other
related attacks exist for specific settings. Kulynych et al. [36] pro-
pose “protective optimization technologies”, where users may craft
data to improve models’ performance on specific groups; our work
focuses on malicious data, where there are additional concerns,
such as minimizing collateral damage, understanding defenses, and
designing the target subpopulation. In concurrent work, Nolans
et al. [64] and Chang et al. [10] demonstrate attacks on models
specifically designed to satisfy algorithmic fairness restrictions, a
consequence of our attacks we discuss in Section 5.5.
3 SUBPOPULATION ATTACKS
In this section, we introduce the threat model, main definitions,
and the principal features that characterize our newly proposed
subpopulation poisoning attack.
3.1 Threat Model
Similar to most forms of poisoning attack, the goal of the adver-
sary is to introduce a small quantity of contaminants in the data
used to train a machine learning classification model in order to
introduce a desired characteristic in the learned model parameters.
We consider a realistic adversary who does not have access to the
internal parameters of the victim model, and, similarly to availabil-
ity poisoning attacks, cannot modify any data point submitted to
the victim model at testing time. Moreover, the adversary is unable
to gain knowledge of the exact data points employed for training,
and can modify the training set only by adding new points. This
reflects the scenario in which the attacker can only disseminate the
poisoned points, which will then be gathered, together with a large
quantity of benign points, by the developers of the victim model to
create the training set. However, we allow the adversary to have
the computational power required to train a model comparable to
the victim one, and to have access to a separate auxiliary dataset
𝐷𝑎𝑢𝑥, distinct from the training data 𝐷, sampled from the same dis-
tribution. We also allow the adversary knowledge of the learner’s
loss function (we consider only the widely used cross entropy loss)
and architecture (an assumption we remove in Section B in the
Appendix). The adversary has no knowledge of the victim model
parameters, or the actual training data.
Many poisoning attacks in the literature employ a white-box
attack model, with full knowledge of the training set, model archi-
tecture and parameters [4, 29, 30, 76], and many transfer the attack
from another model [14, 21]. Here, we make the assumption that
the adversary is able to access an auxiliary dataset 𝐷𝑎𝑢𝑥, which
we believe is reasonable given the availability of public datasets,
and has been a common assumption for black-box attacks in prior
work [29, 50]. While this assumption could potentially be removed
with a good generative model, we leave the exploration of this
hypothesis to future work. Finally, we consider stealthiness and
practicality to be highly important for the attacker, and therefore,
we assume the adversary will be able to poison only a small number
of points in the training set.
3.2 Definition
We propose a new type of subpopulation attack, that is an interpo-
lation in the space of poisoning attacks between a targeted attack
(misclassifying a small fixed set of points) and an availability attack
(misclassifying as many points as possible). To define our attack,
we first provide a general, intuitive definition of a subpopulation:
Definition 3.1. A subpopulation of a data distribution is a restric-
tion of its input domain to a set of points which are close to each
other based on some distance function.
This definition can capture multiple types of subpopulations.
Individual fairness definitions from the algorithmic fairness liter-
ature correspond to subpopulations defined with ℓ2 distance, but
may be unnatural for image data. As we will see, subpopulations
defined by ℓ2 distance in a trained model’s representation space bet-
ter capture image similarity. In algorithmic fairness, group fairness
uses subpopulations defined by a distance function which is 0 for
members of the same subpopulation and 1 for members of different
subpopulations.
For a targeted subpopulation, the adversary’s goal is twofold—
impact the predictions on inputs coming from the subpopulation in
the data, but do not impact the performance of the model on points
outside this subpopulation. Crucially, this subpopulation consists of
natural data, and does not require modifying points to observe the
attack, as is the case for backdoor attacks. We allow the adversary to
pick a subpopulation by selecting a filter function, which partitions
the population into the subpopulation to impact and the remainder
of the data, whose performance should not change. Formally:
Definition 3.2. Subpopulation Poisoning Attacks. Fix some learn-
ing algorithm 𝐴 and training dataset 𝐷 (not necessarily known
to the adversary). A subpopulation attack consists of a dataset of
contaminants 𝐷𝑝 and a filter function F : X → {0, 1} for defining
subpopulations. 𝐷𝑝 is the poisoning set constructed to minimize
the collateral damage and maximize the target damage on the sub-
population of interest when appended to the training set:
Collat(F , 𝐷𝑝) = E(𝑥,𝑦)∼D[1(cid:0)𝐴(𝐷 ∪ 𝐷𝑝)(𝑥) ≠ 𝑦(cid:1) −
Target(F , 𝐷𝑝) = E(𝑥,𝑦)∼D[1(cid:0)𝐴(𝐷 ∪ 𝐷𝑝)(𝑥) ≠ 𝑦(cid:1) −
(1)
(2)
1 (𝐴(𝐷)(𝑥) ≠ 𝑦) | F (𝑥) = 0]
1 (𝐴(𝐷)(𝑥) ≠ 𝑦) | F (𝑥) = 1]
We will evaluate subpopulation attacks by reporting the collat-
eral damage (1) and the target damage (2) on the unseen test set
𝐷𝑡𝑒𝑠𝑡. Crucially, we use 𝐷𝑡𝑒𝑠𝑡 to ensure that the attack general-
izes to new points in the subpopulation, contrasting with prior
attacks which only target a pre-specified set of points. A successful
attack will have small collateral damage and large target damage,
using few poisoning points. Note that, under our definition, target
damage simply seeks to maximize the classification error on the
subpopulation, making it a class-untargeted attack [8]; the defini-
tion can be easily modified to capture a class-targeted attack, where
samples from the subpopulation satisfying the filter function should
be classified into a specific target class.
Subpopulation attacks are an interpolation between targeted
poisoning attacks and availability poisoning attacks. The extreme
case in which the filter selects a single point (or small set of points)
Session 11D: Data Poisoning and Backdoor Attacks in ML CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3107corresponds to targeted poisoning attacks [60]. When the filter
function is defined to select the entire data domain, the attack
is an availability attack [29]. However, the most interesting sub-
population attacks, as we will demonstrate, use a relatively small
number of poisoning points to attack a subpopulation of interest,
while minimizing the collateral on other data. These subpopula-
tion attacks are stealthy and hard to detect, in comparison with
availability attacks, and have a potentially larger impact than a
targeted attack. The choice of filter function is as important to the
adversary as the selection of contaminants. There may be some
choices of filter function which result in subpopulations harder to
attack. For instance, a subpopulation closer to the decision bound-
ary, on which the model has low confidence, may be attacked easier
than a high-confidence subpopulation. In the next section, we will
discuss our framework for generating these subpopulation attacks -
decomposed into subpopulation selection and attack generation.
4 METHODOLOGY
There are two main components that contribute to a full-fledged
subpopulation attack, as shown in Figure 1: choosing a suitable
filter function to select subpopulations, and selecting an algorithm
to generate the poisoning data. In this section we introduce our
methodology to obtain a complete subpopulation attack and de-
scribe the components in our framework.
4.1 Subpopulation Selection
The adversary first needs to identify their target subpopulation.
This is the component that is typically avoided by existing attacks,
which instead focus on optimizing the attack data in order to best
achieve an arbitrarily chosen objective. However, the selection strat-
egy is important: in order to keep collateral small, one must select a
subpopulation which can be separated from the rest of the distribu-
tion. Otherwise, regions of the distribution which are misclassified
will include samples not satisfying the filter function. We propose
two subpopulation selection approaches, called FeatureMatch
and ClusterMatch.
FeatureMatch. This filter function aims at matching some
4.1.1
set of specific features of the data, that the adversary may be inter-
ested in targeting a priori. To use this filter, in addition to having
access to realistic data points 𝑥𝑖 and labels 𝑦𝑖, the adversary must
have access to a set of annotations 𝑎𝑖 on these points. These annota-
tions represent structure that is finer grained or separate from the
labels, such as race or age values for gender classification or color of
automobiles in CIFAR-10. The annotations can be created manually
by the adversary, or by selecting a subset of features in a tabular
dataset (as we will see with the UCI Adult dataset). FeatureMatch
(Algorithm 1) simply matches on the exact value of these annota-
tions to identify the subpopulations. This is related to the standard
definition for notions of group fairness in the algorithmic fairness
literature [6, 19, 25].
Some attacks from the literature have run attacks like
FeatureMatch. For example, Bagdasaryan et al. [1] attack CIFAR-
10 models to target manually selected green cars. However, the
attack considered in that work was not designed to generalize -
they target a specific set of images, but don’t evaluate on a hold-
out set of green cars to see how generalizable the attack was. By
Algorithm 1 FeatureMatch Algorithm - leverage data annota-
tions
Input: 𝑋 - features, 𝐴𝑛𝑛 - manual subpopulation annotations,
𝐴𝑛𝑛𝑡𝑎𝑟𝑔 - target subpopulation annotation
return F = 𝜆 𝑥, 𝑦, 𝑎𝑛𝑛 : 1(𝑎𝑛𝑛 = 𝐴𝑛𝑛𝑡𝑎𝑟𝑔)
Algorithm 2 ClusterMatch Algorithm - automatically identify
subpopulations
Input: 𝑋 ∈ 𝐷𝑎𝑢𝑥 - feature values; 𝑘cluster - number of clusters;
PreProcess - preprocessing function
centers = Cluster(PreProcess(𝑋), 𝑘cluster)
target = PickCluster(centers)
return F = 𝜆 𝑥 : 1(ClosestCenter(PreProcess(𝑥),
centers) == target)
contrast, we measure FeatureMatch on how well it manages to
attack test points from the subpopulation, ensuring that the attack
is targeting the subpopulation as a whole and not those specific
examples. Another example is the work of Schuster et al. [59], who
propose attacks which can, as an application, attack machine trans-
lation, compromising all translations containing a specific word.
This is a FeatureMatch attack, and they design a poisoning attack
strategy specifically for this task. We will demonstrate that the
generic attacks we develop here function on text classifiers trained
using BERT as well.
4.1.2 ClusterMatch. Our next filter function, ClusterMatch
(Algorithm 2), replaces the need for annotation with clustering to
identify subpopulations of interest. By identifying natural clusters
in the data, one can compromise the model for one cluster but
not elsewhere. In ClusterMatch the attacker uses the auxiliary
dataset 𝐷𝑎𝑢𝑥 for clustering and identifying the most vulnerable
subpopulations.
There are various design decisions that need to be taken care
of before we can use ClusterMatch. We must specify a prepro-
cessing function PreProcess applied to the auxiliary data, and a
clustering algorithm. For preprocessing phase, we first use the rep-
resentation layer of a neural network trained on 𝐷𝑎𝑢𝑥 (we test
which layer is most effective in Section 5), and then apply a PCA
projection. For clustering, we use KMeans, but any procedure for
generating meaningful clusters on a given dataset should work.
Interestingly, ClusterMatch can also be used in cases in which
the adversary has a targeted subpopulation in mind. For example,
consider an adversary who wishes to disrupt street sign detection in
a self-driving car through a subpopulation attack—ClusterMatch
would help identify vulnerable street signs which will be easiest
to target, increasing the impact and stealth of their attack. In gen-
eral, an adversary can generate a clustering and identify a cluster
that is both aligned with their goals and will be easy to attack.
We show in the Appendix C that subpopulations generated with
ClusterMatch can be semantically meaningful.
4.2 Poisoning Attack Generation
4.2.1 Label Flipping. For our poisoning attack generation, we be-
gin by adapting a common baseline algorithm, label flipping, to
Session 11D: Data Poisoning and Backdoor Attacks in ML CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3108Figure 1: Overview of our subpopulation attack framework. The attacker has access to an auxiliary dataset, from which it can
determine vulnerable subpopulation by using either FeatureMatch or ClusterMatch. Poisoning attack generation can be
done by label flipping (where a point drawn from a subpopulation with majority class 𝑐 is added with label 𝑡 ≠ 𝑐), or with
attack optimization (starting from label flipping, use either influence or gradient optimization for the final attack point).
our setting. Label flipping has been used in poisoning availability
attacks [76] to create poisoning points that have similar feature
values with legitimate data, but use a different label.
If the subpopulation size is 𝑚, and the adversary uses a poison-
ing rate 𝛼 relative to the subpopulation, they add 𝛼𝑚 poisoned
points, which should be small relative to the entire dataset size. In
label flipping attacks, these points are generated by sampling 𝛼𝑚
points satisfying the filter function from 𝐷𝑎𝑢𝑥 and adding these
to the training set with a label 𝑡 different from the original one
𝑐. We choose a single label for the whole subpopulation, which
maximizes the loss on the poison point. Label flipping ensures high
target damage, while the filter function itself is what guarantees
low collateral—if it is a good enough separation, then the learn-
ing algorithm will be able to independently learn the poisoned
subpopulation, without impacting the rest of the distribution.
While simple, this attack is very general and applicable to various
data modalities, including images, text, and tabular data, as our
experiments will show. To demonstrate the modularity of our attack
framework, we show that leveraging optimization techniques such
as influence functions, following the results of [30], and gradient
optimization, can improve the effectiveness of our attacks.
4.2.2 Attack Optimization. In order to optimize points generated
by label flipping, we follow Koh and Liang [30]. They propose
influence functions to understand the impact of training samples on
trained models, and demonstrates as an application an optimization
procedure for generating poisoning data. To increase the loss on
a test point 𝑥𝑡𝑒𝑠𝑡 , 𝑦𝑡𝑒𝑠𝑡, by modifying a training point 𝑥, 𝑦 by a 𝛿
perturbation 𝑥 + 𝛿, 𝑦, [30] use gradient descent on the influence I,
with the following update, to optimize poisoning data:
∇𝑥I(𝑥𝑡𝑒𝑠𝑡 , 𝑦𝑡𝑒𝑠𝑡) = −∇𝜃 𝐿(𝑥𝑡𝑒𝑠𝑡 , 𝑦𝑡𝑒𝑠𝑡 , 𝜃)𝑇 𝐻−1
𝜃 ∇𝑥∇𝜃 𝐿(𝑥, 𝑦, 𝜃)
(3)
This is derived by approximating the model’s loss function with a
quadratic function around the unpoisoned parameters 𝜃. The curva-
ture of the quadratic function is described by the Hessian around 𝜃,
𝐻𝜃 . In order to use the Hessian for even small models and datasets,
[30] use various optimizations and approximations; using Hessians
is computationally expensive, and dominates the attack’s running
time. Indistinguishable attacks are a goal of [30]; subpopulation
attacks do not have this limitation: we only require that inputs
remain valid (for images, pixels remain in [0, 255] bounds).