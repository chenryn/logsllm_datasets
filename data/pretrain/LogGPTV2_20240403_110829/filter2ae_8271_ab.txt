      sizlPat_cy = *((_DWORD *)pSurfPat + 9);
      [...]
      sizlPat_cx = cxPatRealized;
_函数 EngRealizeBrush 伊始代码片段_
函数随后根据目标位图 GDI 对象的像素格式，将变量 `ulSizePat` 赋值为格式枚举值所代表的对应像素位数，例如 `1BPP` 格式的情况就赋值为
`1`，`32BPP` 格式的情况就赋值为 `32`，以此类推。
与此同时，函数根据目标位图 GDI 对象的像素格式对变量 `cxPatRealized` 进行继续赋值。根据 IDA 代码对赋值逻辑进行整理：
  1. 当目标位图 GDI 对象的像素格式为 `1BPP` 时： 如果 `sizlPat_cx` 值为 `32` / `16`/ `8` 其中之一时，变量 `cxPatRealized` 被赋值为 `32` 数值；否则变量 `cxPatRealized` 的值以 `32` 作为初始基数，加上变量 `sizlPat_cx` 的值并以 `32` 对齐。
  2. 当目标位图 GDI 对象的像素格式为 `4BPP` 时： 如果 `sizlPat_cx` 值为 `8` 时，变量 `cxPatRealized` 被赋值为 `8` 数值；否则变量 `cxPatRealized` 的值以 `8` 作为初始基数，加上变量 `sizlPat_cx` 的值并以 `8` 对齐。
  3. 当目标位图 GDI 对象的像素格式为 `8BPP` / `16BPP` / `24BPP` 其中之一时： 变量 `cxPatRealized` 的值以 `4` 作为初始基数，加上变量 `sizlPat_cx` 的值并以 `4` 对齐。
  4. 当目标位图 GDI 对象的像素格式为 `32BPP` 时： 变量 `cxPatRealized` 被直接赋值为变量 `sizlPat_cx` 的值。
接下来，函数将变量 `cxPatRealized` 的值与变量 `ulSizePat` 存储的目标位图对象的像素位数相乘并右移 3
比特位，得到图案位图新的扫描线的长度，并将数值存储在 `cjScanPat` 变量中。
> 在 Windows
> 内核中处理位图像素数据时，通常是以一行作为单位进行的，像素的一行被称为扫描线，而扫描线的长度就表示的是在位图数据中向下移动一行所需的字节数。位图数据扫描线的长度是由位图像素位类型和位图宽度决定的，位图扫描线长度和位图高度的乘积作为该位图像素数据缓冲区的大小。
函数随后计算 `cjScanPat` 和 `sizlPat_cy` 的乘积，得到新的图案位图像素数据大小，与 `0x44` 相加并将结果存储在
`ulSizeTotal` 变量中。此处的 `0x44` 是 `ENGBRUSH` 类对象的大小，将要分配的内存缓冲区头部将存储用来管理该笔刷实现实体的
`ENGBRUSH` 对象。
这里的新的图案位图像素数据大小，是通过与逻辑笔刷关联的图案位图对象的高度和宽度数值，和与设备关联的目标表面对象的像素位颜色格式数值计算出来的，在函数后续为引擎模拟实现画刷分配新的位图表面对象时，该数值将作为新位图表面对象的像素数据区域的大小。
接下来函数还判断可选的参数 `psoMask` 是否为空；如果不为空的话，就取出 `psoMask` 对象的 `sizlBitmap`
成员的高度和宽度数值，并依据前面的像素格式为 `1BPP` 的情况，计算掩码位图扫描线的长度和掩码位图数据大小，并将数据大小增加进
`ulSizeTotal` 变量中。
在调用函数 `PALLOCMEM` 时，传入的分配内存大小参数是 `ulSizeTotal + 0x40`，其中的 `0x40` 是 `ENGBRUSH`
结构大小减去其最后一个成员 `BYTE aj[4]` 的大小，位于 `ENGBRUSH` 对象后面的内存区域将作为 `aj` 数组成员的后继元素。函数对
`ulSizeTotal` 变量增加了两次 `ENGBRUSH` 对象的大小，多出来的 `0x44`
字节在后面用作其他用途，但我并不打算去深究，因为这不重要。
在函数 `PALLOCMEM` 中最终将通过调用函数 `ExAllocatePoolWithTag` 分配类型为 `0x21` 的分页会话池（Paged
session pool）内存缓冲区。
内存缓冲区分配成功后，分配到的缓冲区被作为 `ENGBRUSH` 对象实例，并将缓冲区指针放置在 `pbo` 对象 `+0x14` 字节偏移的成员域中：
      pengbrush = (LONG)PALLOCMEM(ulSizeTotal + 0x40, 'rbeG');
      if ( !pengbrush )
      {
    LABEL_43:
        HTSEMOBJ::vRelease((HTSEMOBJ *)&v70);
        return 0;
      }
    LABEL_44:
      bsoMaskNull = psoMask == 0;
      *((_DWORD *)pbo + 5) = pengbrush;
_分配的缓冲区地址存储在 pbo 对象的成员域_
依据以上的分析可知，在函数中能够影响 `ulSizeTotal` 变量值的最上层可变因素是：
  * 参数 `psoPattern` 指向的图案位图 `SURFOBJ` 对象的成员域 `sizlBitmap` 的值
  * 参数 `psoMask` 指向的掩码位图 `SURFOBJ` 对象的成员域 `sizlBitmap` 的值
  * 参数 `psoTarget` 指向的目标位图 `SURFOBJ` 对象的成员域 `iBitmapFormat` 的值
在获得 `ulSizeTotal`
变量最终数值的过程中，数据进行了多次的乘法和加法运算，但是没有进行任何的数值有效性校验。如果对涉及到的这几个参数成员域的值进行特殊构造，将可能使变量
`ulSizeTotal` 的数值发生整数溢出，该变量的值将变成远小于应该成为的值，那么在调用函数 `PALLOCMEM`
分配内存时，将会分配到非常小的内存缓冲区。分配到的缓冲区被作为 `ENGBRUSH` 对象实例，在后续对该 `ENGBRUSH`
对象的各个成员变量进行初始化时，将存在发生缓冲区溢出、造成后续的内存块数据被覆盖的可能性，严重时将导致操作系统 BSOD 的发生。
#### 0x2 追踪
上一章节分析了漏洞的原理和成因，接下来将寻找一条从用户态进程到漏洞所在位置的触发路径。通过在 IDA 中查看函数 `EngRealizeBrush`
的引用列表，发现在 `win32k` 中仅对该函数进行了少量的引用。
_函数 EngRealizeBrush 的引用列表_
关键在于列表的最后一条：在函数 `pvGetEngRbrush` 中将函数 `EngRealizeBrush` 的首地址作为参数传递给
`bGetRealizedBrush` 函数调用。
    void *__stdcall pvGetEngRbrush(struct _BRUSHOBJ *a1)
    {
      [...]
      result = (void *)*((_DWORD *)a1 + 5);
      if ( !result )
      {
        if ( bGetRealizedBrush(*((struct BRUSH **)a1 + 0x12), a1, EngRealizeBrush) )
        {
          vTryToCacheRealization(a1, *((struct RBRUSH **)a1 + 5), *((struct BRUSH **)a1 + 0x12), 1);
          result = (void *)*((_DWORD *)a1 + 5);
        }
        else
        {
          v2 = (void *)*((_DWORD *)a1 + 5);
          if ( v2 )
          {
            ExFreePoolWithTag(v2, 0);
            *((_DWORD *)a1 + 5) = 0;
          }
          result = 0;
        }
      }
      [...]
    }
_函数 pvGetEngRbrush 的代码片段_
函数首先判断参数 `a1` 指向 `BRUSHOBJ` 对象的 `+0x14` 字节偏移的成员域是否为空；为空的话则调用
`bGetRealizedBrush` 函数，并将参数 `a1` 指向 `BRUSHOBJ` 对象中存储的 `BRUSH` 对象指针作为第 1 个参数、参数
`a1` 的值作为第 2 个参数、将函数 `EngRealizeBrush` 的首地址作为第 3 个参数传入。
如果函数 `bGetRealizedBrush` 返回失败，函数将通过调用 `ExFreePoolWithTag` 函数释放参数 `a1` 指向的
`BRUSHOBJ` 对象 `+0x14` 字节偏移的成员域指向的内存块。该成员域在执行函数 `EngRealizeBrush` 期间会被赋值为分配并实现的
`ENGBRUSH` 对象的首地址。
在函数 `bGetRealizedBrush` 中存在对第 3 个参数指向的函数进行调用的语句：
    LABEL_81:
      if ( v68 )
      {
        v41 = (struct _SURFOBJ *)(v68 + 0x10);
    LABEL_127:
        v51 = (struct _SURFOBJ *)*((_DWORD *)a2 + 0xD);
        if ( v51 )
          v51 = (struct _SURFOBJ *)((char *)v51 + 0x10);
        v19 = a3(a2, v51, v41, v72, v13, v70);
        [...]
      }
_函数 bGetRealizedBrush 调用参数 a3 指向的函数_
为了精确地捕获到来自用户进程的调用路径，通过 WinDBG 在漏洞发生位置下断点，很快断点命中，观测到调用栈如下：
    00 8bb23930 94170c34 win32k!EngRealizeBrush+0x19c
    01 8bb239c8 941734af win32k!bGetRealizedBrush+0x70c
    02 8bb239e0 941e99ac win32k!pvGetEngRbrush+0x1f
    03 8bb23a44 9420e723 win32k!EngBitBlt+0x185
    04 8bb23aa8 9420e8ab win32k!GrePatBltLockedDC+0x22b
    05 8bb23b54 9420ed96 win32k!GrePolyPatBltInternal+0x176
    06 8bb23c18 83e4b1ea win32k!NtGdiPolyPatBlt+0x1bc
    07 8bb23c18 772b70b4 nt!KiFastCallEntry+0x12a
    08 0023edec 768e6217 ntdll!KiFastSystemCallRet
    09 0023edf0 768e61f9 gdi32!NtGdiPolyPatBlt+0xc
    0a 0023ee1c 76fc3023 gdi32!PolyPatBlt+0x1e7
    [...]
_命中断点的栈回溯序列_
观察栈回溯中的函数调用，发现由用户态进入内核态的调用者是 `PolyPatBlt` 函数，那么接下来就尝试通过函数 `PolyPatBlt`
作为切入点进行分析。
该函数是 `gdi32.dll` 模块的导出函数，但并未被微软文档化，仅作为系统内部调用使用。通过查询相关文档得到函数原型如下：
    BOOL PolyPatBlt(
        HDC hdc,
        DWORD rop,
        PVOID pPoly,
        DWORD Count,
        DWORD Mode
    );
_函数 PolyPatBlt 的函数原型_
函数通过使用当前选择在指定设备上下文 `DC` 对象中的笔刷工具来绘制指定数量的矩形。第 1 个参数 `hdc` 是传入的指定设备上下文 `DC`
对象的句柄，矩形的绘制位置和尺寸被定义在参数 `pPoly` 指向的数组中，参数 `Count`
指示矩形的数量。笔刷颜色和表面颜色通过指定的栅格化操作来关联，参数 `rop` 表示栅格化操作代码。参数 `Mode` 可暂时忽略。
参数 `pPoly` 指针的类型没有明确的公开定义，模块代码中的逻辑显示其指向的是 `0x14` 字节大小的数据结构数组，前 4
个成员域定义矩形的坐标和宽度高度，第 5 个成员域指定可选的笔刷句柄，因此可以定义为：
    typedef struct _PATRECT {
        INT nXLeft;
        INT nYLeft;
        INT nWidth;
        INT nHeight;
        HBRUSH hBrush;
    } PATRECT, *PPATRECT;
_结构体 PATRECT 的定义_
参数 `pPoly` 指向的数组的元素个数需要与参数 `Count` 参数表示的矩形个数对应。留意结构体中第 5 个成员变量
`hBrush`，这个成员变量很有意思。通过逆向分析相关内核函数得知，如果数组元素的该成员置为空值，那么在内核中处理该元素时将使用先前被选择在当前设备上下文
`DC` 对象中的笔刷对象作为实现 `ENGBRUSH` 对象的逻辑笔刷；而如果某个元素的 `hBrush` 成员指定了具体的笔刷对象句柄，那么在
`GrePolyPatBltInternal` 函数中将会对该元素使用指定的笔刷对象作为实现 `ENGBRUSH` 对象的逻辑笔刷。
      v17 = (HBRUSH)*((_DWORD *)a3 + 4);
      v30 = v17;
      ms_exc.registration.TryLevel = -2;
      if ( v17 )
      {
        v29 = GreDCSelectBrush(*(struct DC **)a1, v17);
        v16 = v31;
      }
      [...]
_函数 GrePolyPatBltInternal 为 DC 对象选择笔刷对象_
因此我们并不需要为目标 `DC` 对象选择笔刷对象，只需将笔刷对象的句柄放置在数组元素的成员域 `hBrush`
即可。接下来编写验证代码试图抵达漏洞所在位置，由于函数 `PolyPatBlt` 并未文档化，需要通过 `GetProcAddress`
动态获取地址的方式引用。
    hdc = GetDC(NULL);
    hbmp = CreateBitmap(0x10, 0x100, 1, 1, NULL);
    hbru = CreatePatternBrush(hbmp);
    pfnPolyPatBlt = (pfPolyPatBlt)GetProcAddress(GetModuleHandleA("gdi32"), "PolyPatBlt");
    PATRECT ppb[1] = { 0 };
    ppb[0].nXLeft  = 0x100;
    ppb[0].nYLeft  = 0x100;