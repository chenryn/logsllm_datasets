K5 K6 K7 K4 K5 K6 K7 K8 K9 K10 K11 K12
K6 K7 K4 K5 K6 K7 K8 K9 K10 K11 K12 K13
K7 K4 K5 K6 K7 K8 K9 K10 K11 K12 K13 K14
K8 K9 K10 K11 K8 K9 K10 K11 K12 K13 K14 K15
K9 K10 K11 K8 K9 K10 K11 K12 K13 K14 K15 K’ 4
K10 K11 K8 K9 K10 K11 K12 K13 K14 K15 K’ 4 K’ 5
K11 K8 K9 K10 K11 K12 K13 K14 K15 K’ 4 K’ 5 K’ 6
K12 K13 K14 K15 K12 K13 K14 K15 K’ 0 K’ 1 K’ 2 K’ 3
K13 K14 K15 K12 K13 K14 K15 K’ 0 K’ 1 K’ 2 K’ 3 K’ 4
K14 K15 K12 K13 K14 K15 K’ 0 K’ 1 K’ 2 K’ 3 K’ 4 K’ 5
K15 K12 K13 K14 K15 K’ 0 K’ 1 K’ 2 K’ 3 K’ 4 K’ 5 K’ 6
K8 K9 K10 K11 K12 K13 K14 K15 K’ 0
K9 K10 K11 K12 K13 K14 K15 K’ 0 K’ 1
K10 K11 K12 K13 K14 K15 K’ 0 K’ 1 K’ 2
K11 K12 K13 K14 K15 K’ 0 K’ 1 K’ 2 K’ 3
K12 K13 K14 K15 K’ 4 K’ 5 K’ 6 K’ 7 K’ 4
K13 K14 K15 K’ 4 K’ 5 K’ 6 K’ 7 K’ 4 K’ 5
K14 K15 K’ 4 K’ 5 K’ 6 K’ 7 K’ 4 K’ 5 K’ 6
K15 K’ 4 K’ 5 K’ 6 K’ 7 K’ 4 K’ 5 K’ 6 K’ 7
K’ 4 K’ 5 K’ 6 K’ 7 K’ 8 K’ 9 K’10 K’11 K’ 8
K’ 5 K’ 6 K’ 7 K’ 8 K’ 9 K’10 K’11 K’ 8 K’ 9
K’ 6 K’ 7 K’ 8 K’ 9 K’10 K’11 K’ 8 K’ 9 K’10
K’ 7 K’ 8 K’ 9 K’10 K’11 K’ 8 K’ 9 K’10 K’11
K’ 4 K’ 5 K’ 6 K’ 7 K’ 8 K’ 9 K’10 K’11 K’12
K’ 5 K’ 6 K’ 7 K’ 8 K’ 9 K’10 K’11 K’12 K’13
K’ 6 K’ 7 K’ 8 K’ 9 K’10 K’11 K’12 K’13 K’14
K’ 7 K’ 8 K’ 9 K’10 K’11 K’12 K’13 K’14 K’15
mechanisms, we collected all snapshots in 24 hours without
any manual interaction. Using the correlation-based extraction
technique (see Section VI-C), we extracted the values stored
in all registers during the 12 clock cycles.
Using SAT solver. To extract
the key, we made use of
CryptoMiniSat 5 [67] and followed the technique explained
in Section IV-B2. We developed a program in C++ which
receives i) the architecture of the underlying design as in
Table I, ii) the masking order d, iii) the number of covered
clock cycles n, and iv) the value of registers extracted by
snapshots at n clock cycles. The program generates a Boolean
satisﬁability problem (SAT) to be solved by the SAT solver.
For the above case (i.e., d = 1 and n = 720 register bits in
12 clock cycles), the SAT led to 3 650 048 clauses on 717 728
variables. The SAT solver required 1 hour and 47 minutes to
solve the problem and successfully report the revealed key.
Note that the SAT solver does not ﬁnd a unique solution, but
all of them lead to the same revealed key. This is due to the
underlying masking scheme, i.e., when representing a variable
x by 2 shares, the SAT solver makes a distinction between
(x1, x2) and (x2, x1), while both of them lead to the unique
unmasked value x. This holds for all masked variables in the
SAT. If there are λ of such mask variables, the SAT solver
can ﬁnd ((d + 1)!)λ correct solutions.
Extension. To examine the efﬁciency of this approach for
different numbers of shares d + 1 and different numbers of
covered clock cycles η, we have conducted several investi-
gations. We simulated the AES-DOM for d ∈ {0, . . . , 6}
and extracted all register values at the ﬁrst 36 clock cycles
(see Table I). Note that we supplied the implementation with
random masks (refreshed at every clock cycle), and did not
Fig. 9. Extracted values of the ﬁrst byte of key register shares fo the 3-share
implementation. XOR’ing the results 0xA6⊕ 0x28⊕ 0x39 = 0xB7 reveals
the ﬁrst byte of the unshared key beginning with 0xB7FCBFF83...
For example, the ﬁrst row shows that the register that stored
K0 at clock cycle 16, will hold K1, K2, K3, S0, M1, M2, ...
in the next clock cycles. We would like to highlight that it
is a symbolic representation and independent of the masking
order, e.g., K0 represents all d + 1 shares of the ﬁrst byte of
the key.
It can be seen that in clock cycle 16, all registers are ﬁlled;
a part of the state registers with SubBytes’ output and the
ﬁrst quarter with 4 bytes of the key. The key register is
also fully ﬁlled by the given key, which precisely justiﬁes
why we targeted this clock cycle for the attack in the ﬁrst
scenario, see Section VI-C. Here, we also started at clock
cycle 16 and collected LLSI measurements of the entire 45
LABs in 12 consecutive clock cycles. Each full snapshot in
a clock cycle took around 2 hours. Using the fully automated
setup developed for this purpose, which applies drift correction
© 2020 IEEE
10
Share1101001100xA6=Share2001010000x28=Share3001110010x39=THE REQUIRED TIME FOR THE SAT SOLVER TO REPORT A SOLUTION, SUCCESSFULLY RECOVERING THE KEY, FOR DIFFERENT MASKING ORDER d AND
VARIOUS NUMBER OF COVERED CLOCK CYCLES BY SNAPSHOTS.
TABLE II
Masking
order d
0
1
2
3
4
5
6
9
1.5 h
-
-
-
-
-
-
10
11
7 m 2 m
-
-
-
-
-
-
-
-
-
-
-
-
12
54 s
1.78 h
-
-
-
-
-
Number of covered clock cycles starting from 16
18
14
13
17 s
46 s
21 s
6 m
14 m 10 m
30 m
1.76 h
2.15 h
6.16 h
16.08 h
1.75 d
15
19 s
8 m
56 m 47 m
5.4 h
4.5 h
9.5 h
1.1 d
-
-
-
-
16
24 s
7 m
38 m
2.5 h
8.91 h
20.61 h
1.8 d
17
19 s
8 m
39 m
2.83 h
7.71 h
17.96 h
1.9 d
-
-
-
-
19
19 s
6 m
28 m
1.93 h
5.65 h
18.5 h
1.8 d
20
15 s
5 m
26 m
1.8 h
4.75 h
21.55 h
1.49 d
21
9 s
6 m
21 m
1.2 h
4.71 h
19.11 h
1.35 d
consider the name/order of registers when extracting their
values. Starting from clock cycles 16, we ran the SAT solver
on SATs covering η ∈ {9, . . . , 21} clock cycles, i.e., from
clock cycle 16 to clock cycle 24 up to 36. We repeated this
experiment with 10 sets of different plaintext/key (and random
masks). We found out that the SAT solver usually needs less
time to ﬁnd the solution when more clock cycles are covered
by the SAT (expected, as it contains more information). We
further recognized that there is a minimum number of required
covered clock cycles depending on the number of shares. The
averaged results obtained using a machine with a 2.6 GHz
CPU and 256 GB RAM are shown in Table II. Note that
multithreading is not beneﬁcial here, as CryptoMiniSat 5 looks
for different solutions by each thread. Besides, starting before
the clock cycle 16 is not helpful since some registers do not
contain meaningful data (see Table I).
We have also investigated other design architectures. In
short, if the circuit does not allow the collection of enough
snapshots per encryption/decryption (e.g., at most 10 in a
round-based AES-128 encryption), snapshots for more inputs
(plaintexts) can be collected. Although it becomes out of the
single-trace feature of our attack, it still allows recovering
the secrets by a few snapshots (corresponding to different
inputs). As a general overview, a design which requires a
higher number of clock cycles for each encryption/decryption
would also exhibit more information in the snapshots. We
should stress that due to their high area overhead, usually just
one instance of some basic blocks (like Sbox) is instantiated
in masked implementations,
leading to a high number of
clock cycles per encryption/decryption. This would potentially
decrease the number of required snapshots in our attack.
VII. DISCUSSION
A. Attack Feasibility
1) Clock control: For taking a snapshot of registers in a
region of interest, the registers’ contents should not be updated
by the clock signal. Therefore, the adversary either needs to
halt the clock signal for every snapshot or ﬁnd a time window,
where the registers’ contents remain constant for several clock
cycles, sufﬁcient for taking a snapshot. Depending on the
hardware designer, the state of the (masked) registers might not
be cleared after the termination of the encryption/decryption.
The same observation has been reported in [72]. In such cases,
© 2020 IEEE
11
there is no need to have any control over the clock. If the
locations of the registers are known to the adversary, a snap-
shot from all key registers after the encryption/decryption can
be taken to recover the key. However, as multiple snapshots
from successive clock cycles are required for the scenario with
unknown register locations, this method cannot be applied.
Thus, controlling the clock signal is inevitable. To stop the
clock, we have identiﬁed the two following possible scenarios.
External clock. In the most uncomplicated scenario, the clock
is supplied to the chip externally. Hence, the adversary can
easily tamper with the clock signal before it enters the chip
and keep it low/high at her desired periods to take a snapshot.
Naturally, she can repulse the clock again to move one or
several clock cycles further with encryption/decryption.
Internal clock. The attack becomes more challenging if the
clock is generated internally on the chip. Depending on the
target platform (i.e., FPGA or ASIC),
the attacker needs
to apply more sophisticated techniques to tamper with the
clock. If the target is an SRAM-based FPGA, the attacker
can use laser fault injection to manipulate the clock source
conﬁguration (e.g., based on ring-oscillators) or its routing
conﬁguration to stop the clock signalling [73], [74]. To take a
snapshot of registers, the adversary ﬁrst needs to inject a fault
into the clock circuitry at her desired cycle and then take a
snapshot. However, the challenge would be to reactivate the
clock for the next snapshots. Although rebooting the FPGA
leads to the correct reconﬁguration and reactivation of the
clock circuitry, it will not be helpful for the next snapshots
due to newly generated random masks. Although successive
immediate fault injections are feasible in principle, it might
be impractical due to laser setup limitations. Moreover, laser
fault injection is not effective in case of an ASIC or a ﬂash-
based FPGA since only transient faults can be injected, which
is usually not sufﬁcient to halt the internal clock permanently.
A more realistic solution, applicable to all platforms, is
circuit editing using Focused Ion Beam (FIB). Using FIB, the
attacker can physically cut the metal lines responsible for clock
signal delivery or damage the transistors of clock buffers to
stop the clock. After disconnecting the internal clock from the
cipher, the attacker can provide her own controllable external
clock signal by injecting pulses into clock lines using active
nano-probe needles [6]. Even though FIB circuit editing is an
invasive technique, it is a practically feasible approach [75].
Thus, we believe that an internal clock cannot stop the attacker
from mounting snapshot attacks, although it
increases the
difﬁculties.
2) Clock Gating: In synchronous circuits, clock gating can
be deployed to reduce dynamic power consumption by cutting
the clock signal from ﬂip-ﬂops when they are not in use. In this
case, since the clock signal is not continuously delivered to a
speciﬁc group of registers, a question rises about the feasibility
of conducting EOFM on an unknown layout to localize the
registers. To ensure that all clock gated registers are receiving
the clock signal during an EOFM measurement, the dwell
time of the laser at each pixel has to be larger than full
encryption/decryption time. As a result, we can be conﬁdent
that the gated registers have been activated temporarily and
received the clock signal. Note that while the clock signals for
these gated registers might not be periodic anymore during the
dwell time of the laser, they still contain the clock frequency
component, however with a lower amplitude. Therefore, an
EOFM measurement with the clock frequency reveals clock
buffers of gated registers with different modulation intensities,
i.e., stronger modulation for always active registers and weaker
modulation for gated registers. For instance, assume that the
cryptographic core is running with a 100 MHz clock, and the
dwell time of the laser is 1 ms px−1. In this example, AES
DOM requires about 200 clock cycles or 2 µs to complete an
encryption. Hence, by keeping the cryptographic operation in
a loop during an EOFM measurement, the AES circuit ﬁnishes
the encryption 500 times while the laser beam is still at the
same position. Upon the laser’s movement to the next pixel,
the same number of operations in the loop occurs until the
entire die is scanned with the laser. Thus, by setting the correct
relation between the clock frequency and the dwell time for
the laser, all registers still can be localized while clock gating
is in use. Note that gates involved in the combinatorial logic
will not be falsely identiﬁed as clock buffers, because they are
updated only on either the rising or falling edge of the clock
signal while the clock buffers toggle on both edges. Therefore,
the combinatorial gates – except those belonging to the clock
tree – do not appear on the EOFM image.
3) Time expenditure and Attack Cost: One might argue that
the time-consuming task of taking the snapshots discourages
an adversary from mounting the attack, especially if all reg-
isters have to be covered in several clock cycles. For the 2-