be able to talk with different types of IM clients.
Figure 2. Framework of HoneyIM
3.3. System Components
Figure 2 shows the general framework of HoneyIM,
which comprises four modules each performing a speciﬁc
functionality. Note that these modules could be deployed
either on the same machine or on different hosts (or net-
work devices). As displayed, the communication module is
responsible for handling IM trafﬁc. It parses the IM trafﬁc
to decoy users and delivers it to the detection module. The
detection module extracts attack vectors and related infor-
mation from IM messages, and then feeds them into the sup-
pression and notiﬁcation modules. The suppression module
sifts through network trafﬁc and ﬁlters out malicious trafﬁc
containing attack vectors. Meanwhile, the notiﬁcation mod-
ule informs network administrators of the detected malware
spreading.
6767
Figure 1. Working mechanism of HoneyIM
context of either public IM services or private (enterprise)
IM services being used in the protected network. The core
of HoneyIM is the same for either server-enhanced (with
private servers) or serverless (with public servers) realiza-
tion. The difference lies in the implementation and deploy-
ment, which will be discussed in Section 3.4. The frame-
work of HoneyIM consists of several modules and these
modules can be deployed in a single machine or at differ-
ent places.
3.2. Design Issues
The success of HoneyIM largely depends on the use of
decoy users. In the following, we discuss three issues of
HoneyIM that are much related to decoy user, including ini-
tialization, sensitivity, and compatibility.
The initialization of HoneyIM mainly refers to the cre-
ation and addition of decoy user accounts. Strictly speak-
ing, it is a deployment issue. If public IM services are used
in the protected network, the network administrators need to
create decoy accounts and solicit some volunteer IM users
to add those decoy users into their contact lists. In contrast,
if an enterprise IM service is employed, the creation and ad-
dition of decoy users can be done automatically by the IM
server. However, the system must notify volunteer users the
purpose and usage of decoy accounts, and provide a disable
(or opt-out) option. This HoneyIM initialization is fulﬁlled
at one time, and the update of decoy accounts could be per-
formed if necessary. In addition to the volunteer policy for
IM user cooperation, the network administrators might re-
quire the IM users who have high connectivity degrees (i.e.,
the super-nodes in IM networks) to include decoy accounts
in their contact lists.
The sensitivity of HoneyIM is measured by the ratio be-
tween the number of infected users and that of all IM users
in the protected network when the spreading of IM malware
is ﬁrst detected. The key factor affecting the sensitivity of
3.3.1 Communication Module
The communication module is the base of HoneyIM. De-
coy accounts use it to join IM networks and communicate
with normal IM clients. This module realizes all neces-
sary functions of a normal IM client, such as signing on/off,
setting presence status, receiving messages and ﬁles, etc.
These functions are automatically executed by default and
can also be manually operated by a network administrator.
The module only accepts the messages from the users on
the contact list for blocking “spim”, the spam on IM net-
works. The communication module should support all IM
protocols that are used by the protected IM services, and
allow multiple accounts to log into different IM networks
simultaneously if necessary.
3.3.2 Detection Module
The detection module serves three purposes: (1) detect-
ing compromised IM clients, (2) identifying attack vectors,
and (3) validating attack vectors. It accomplishes the ﬁrst
two tasks by consulting the communication and suppres-
sion modules and scrutinizing IM messages delivered by
the communication module, and attains the last task by con-
ducting deep-inspection.
The detection module classiﬁes a sending IM client as
compromised, when a decoy account receives a ﬁle transfer
request or a text message with URL from the IM client. The
reason is that it is very rare for a normal user to issue such
a request or message to the decoy account3. The detection
is not affected by client-to-client or client-to-server trafﬁc
encryption because the IM messages received by a decoy
(as a client) must be in plain-text. If IM malware spreads
through ﬁle transfer, the attack source, i.e., the IP address
of the compromised machine, is immediately known as a
ﬁle transfer is usually done between two IM clients directly.
However, if IM malware spreads through URL message, we
cannot identify the sender directly because the message is
usually relayed through server. Under this circumstance,
the attack source is inferred with the help of the suppres-
sion module, which will be described shortly. The detec-
tion module can easily generate the attack vector informa-
tion such as malicious ﬁle names and malicious URLs from
the received IM messages.
Furthermore,
the detection module performs deep-
inspection to verify the virulence of the received ﬁle or
URL. There are many techniques available to achieve this
purpose. For example, we can use dynamic taint analysis
based techniques such as TaintCheck [17] and Argos [19]
to examine if a received binary can compromise system and
to generate the corresponding signature if a compromise oc-
curs. We also can adopt the technique used by HoneyMon-
3Even if a normal user accidentally sends a message to the decoy ac-
count, the message is usually a pure text message.
key [32] to check received URLs. HoneyMonkey detects
Web exploits by browsing URLs inside a virtual machine
and monitoring the change of system states. In general, any
effective and efﬁcient host-based anomaly detection tech-
niques can be used for deep-inspection. HoneyIM does not
contain any speciﬁc technique for analyzing IM malware,
but rather provides a platform to apply existing techniques
for malware dissection and leave the choice of what tech-
nique to use to network administrators. The adopted tech-
niques are implemented as plug-ins of the detection mod-
ule, and the deep-inspection is conducted in a contained en-
vironment such as a virtual machine to prevent HoneyIM
itself from being compromised.
The incorporation of deep-inspection is justiﬁed by the
following considerations. First, deep-inspection can further
reduce false positives. It is possible that innocent URLs or
ﬁles could be sent with malicious content by IM malware
to disguise their malice. Second, deep-inspection helps dis-
cover additional or real attack vectors used by IM malware.
For example, ﬁle deep-inspection can generate the signa-
ture of malware binary, based on which the ﬁltering is much
more robust against evasion than based on ﬁle name. IM
malware can also use different URLs in its spreading, which
in fact are doorway webpages redirecting trafﬁc to the same
website that hosts real exploits. With URL deep-inspection,
the protection can be further enhanced because not only
doorway URLs but also real exploit URLs can be discov-
ered. Last but not least, deep-inspection uncovers the IM
malware activities, such as the infection mechanism and the
infected ﬁles, for network administrators.
After attack vector extraction and validation, the de-
tection module supplies the validated attack vectors and
sources to the suppression module for immediate network
trafﬁc ﬁltration.
In the meantime, the detection module
feeds all collected attack information into the the notiﬁca-
tion module, which informs network administrators of the
occurrence of an attack in real-time for prompt system quar-
antine and recovery.
3.3.3 Suppression Module
The suppression module in essence is a network ﬁlter. It
takes the attack source and vector information from the de-
tection module as input. Then, it blocks any trafﬁc from
attack sources and ﬁlters out network trafﬁc that contains
attack vectors. Different from other modules that have no
requirement for deployment location, the suppression mod-
ule should be installed at a network vantage point, where
it can monitor all trafﬁc passing through the protected net-
work. The location of the suppression module will be fur-
ther discussed in Section 3.4.
The suppression module consists of two components:
non-IM trafﬁc ﬁlter and IM trafﬁc ﬁlter. These two compo-
6868
nents are logically independent for ﬂexible implementation
and deployment. The non-IM trafﬁc ﬁlter fulﬁlls two tasks:
blocking attack sources and ﬁltering non-IM network traf-
ﬁc. For the former, the ﬁlter simply drops any packet from
the attack sources to terminate malware propagation. For
the latter, the ﬁlter examines contents of inbound and out-
bound packets to identify if an internal user is attempting to
access a malicious webpage or transfer a virulent ﬁle. Any
packet containing a matched attack vector will be discarded.
The IM trafﬁc ﬁlter also provides two functionalities.
The ﬁrst is trafﬁc ﬁltration, which weeds out the IM mes-
sages that either come from (or go to) the compromised
clients or contain identiﬁed malicious ﬁle names or URLs.
Although a ﬁle is usually transferred between two clients,
the IM messages for establishing transfer connections are
relayed through servers in plain-text for mainstream IM
products. Therefore, blocking malicious ﬁle transfer by
dropping connection establishment messages is not affected
by client-to-client encryption. The second functionality of
the IM trafﬁc ﬁlter is to help identify malicious URL send-
ing hosts within the protected network. Because messages
are relayed through server, the detection module cannot
identify the sources of malicious URL messages. To track
the IP address of the compromised host, the IM trafﬁc ﬁl-
ter records the URLs and the corresponding IP addresses of
their senders. With this information, the detection module
can easily pinpoint the malicious URL senders.
3.3.4 Notiﬁcation Module
The notiﬁcation module plays the role of messenger.
Its
job is to inform network administrators of the occurrence of
IM malware spread upon the detection of an attack. Given
the fast spread of IM malware, the notiﬁcation to network
administrators should be made in real-time or near real-time
by means of SMS (Short Messaging Service) or IM. The
notiﬁcation module can also notify the victim about the fact
that his machine has been infected with IM malware via IM
or email.
3.4. Deployment
As mentioned in the overview section, HoneyIM can
be deployed with a private IM server inside the protected
network (server-enhanced deployment) or with public IM
services outside the network (serverless deployment). The
major differences between the two deployments lie in the
function location and system initialization of HoneyIM. In
serverless deployment, the non-IM and IM trafﬁc ﬁlters of
the suppression module have to be placed on the network
edge device. However, in server-enhanced deployment,
while the non-IM trafﬁc ﬁlter still needs to be on the net-
work edge device, the best place for the IM trafﬁc ﬁlter is
the private IM server, where the ﬁlter can see all IM trafﬁc.
Moreover, in practice many IM servers already include the
message ﬁltering functionality, making IM trafﬁc ﬁltering
much easier there.
The deployment of HoneyIM also involves system ini-
tialization, i.e., the creation and addition of decoy accounts.
In serverless deployment, network administrators need to
register accounts for decoy users on public IM services be-
fore running HoneyIM. Due to the maximum size of con-
tact list (e.g., 600 for MSN) and the protection considera-
tion, the administrators can create multiple decoy accounts
and use them for different groups of IM users. Then, the
decoy accounts are added into the volunteer IM users’ con-
tact lists with their cooperation. By contrast, the server-
enhanced deployment saves the efforts of network admin-
istrators and IM users by automating the creation and ad-
dition of decoy accounts, just like the use of AIM Bots
for shopping and movie guide. This can be achieved by
adding a decoy account management module to the private
IM server. The module can also be used to (1) provide IM
users with the information of decoy accounts and the op-
tion to enable/disable them, and (2) update decoy accounts
periodically against potential evasion.
4. Prototype
To demonstrate the efﬁcacy of HoneyIM, we have built
a prototype of the serverless HoneyIM, which can be eas-
ily transformed to the server-enhanced HoneyIM prototype
with minor changes in function location and system initial-
ization. We implement the HoneyIM modules using dif-
ferent techniques. We use a full-ﬂedged open-source IM
client Pidgin (formerly known as Gaim) [1] to build the
communication module. The detection module employs
Capture [29], a high interaction client honeypot on Win-
dows systems, for URL deep-inspection. The detection
module extracts URLs from the communication module and
feeds them into Capture, which decides whether a URL
is malicious by comparing the system states such as reg-
istry and running processes before and after the URL is ac-
cessed. For any ﬁle transfer request HoneyIM does not per-
form deep-inspection but immediately ﬁres an alert instead,
given that the ﬁle transfer method is relatively unpopular in
IM malware spreading and most IM users and programs are
vigilant to this type of threat. HoneyIM receives the deliv-
ered ﬁle and sends it to network administrators via email.
In the construction of the suppression module, we use Perl
IPQueue module for iptables [16] to perform URL logging
and pattern-matching. We implement the notiﬁcation mod-
ule with two communication means: email and SMS. The
suppression module communicates with the detection mod-
ule via network socket, and thus can be deployed on a sep-
arate machine.
6969
Because Pidgin supports multi-protocol and multi-
account, HoneyIM can log into multiple accounts on mul-
tiple IM networks simultaneously. Therefore, it can pro-
vide protection for multiple public IM networks. Note that
the choice of Pidgin and Capture is mainly due to the
availability of their source code. Upon the accessibility of
source code, any IM clients or anomaly detection systems
can be used to construct HoneyIM.
5. Evaluation
In this section, we ﬁrst evaluate the detection sensitiv-
ity of HoneyIM under different coverages via simulation.
Then, we validate the applicability of HoneyIM through real
experiments.
5.1. Simulation
When adding decoy accounts is voluntary for IM users
on the protected network, it is very possible that HoneyIM
does not cover all IM users. Under this circumstance, how
effective would HoneyIM be? Because we cannot carry out
a large-scale experiment in practice, we turn to simulation
for answering this question. We adopt the simulation model
from [35] due to the similarity in propagation between IM
malware and Email worms [35]. The major metric we use is
the percentage of IM users being infected by the time the IM
malware is ﬁrstly detected by HoneyIM (the percentage of
infected IM users for short), and we investigate its variation
under different HoneyIM coverages.
5.1.1 Simulation Model
The simulation model of IM malware propagation is de-
scribed as follows. First, when an IM user receives an IM
message, she may or may not read the message immedi-
ately. The reading delay for user i, denoted by Ti, is a
stochastic variable. When the user receives a message with
a malicious URL 4, she clicks the URL with a clicking prob-
ability denoted as Ci. We assume that Ci is a constant for
user i. If the malicious URL is clicked, the malicious code
is downloaded and executed immediately. It infects the cur-
rent IM client and sends malicious URLs to all the victim’s
contacts with no delay. The malware will not spread again
unless the user receives the same URL and clicks it again.
Before we start the simulation, we need to determine the
IM network topology and the values of each Ci and Ti. Here
the IM network refers to the virtual network composed by
the contact lists of the IM users on the protected network.
According to [24] that studies an IM network containing
50,158 users, over 80% of the user contacts are bidirec-
tional, indicating that most of users are also in the contact
4The situation for malicious ﬁle transfer is similar.
lists of their buddies. Thus, we model the IM network topol-
ogy by an undirected graph G =. For ∀v ∈ V , v
denotes a node (IM user), and for ∀e = (u, v) ∈ E, u, v ∈
V , e represents an edge that connects two users, u and v,
who are in each other’s contact list. |V | is the total number
of nodes, and D(i) is the degree of node i, i.e., the number
of edges connected to node i. The size distribution of con-
tact lists has been identiﬁed as scale-free by [15, 24, 33],
except that [34] claims that Weibull distribution has a better
ﬁt. However, [34] does not give the parameters of Weibull
distribution and the number of their monitored IM users is
small compared to [15, 24, 33]. Therefore, we model the IM
network topology as power law and set the power law expo-
nent α to 1.7, based on the measurement results from [15]
and [24]. The network is generated by using GLP power law
generator [2] with the given α, the number of nodes |V |, and
the average node degree E[D]. We generate three IM net-
works with the number of nodes |V | = 1000/6000/6000
and the average node degree E[D] = 8/8/16, respectively.