### 代码覆盖率评估

#### 时间和内存限制
在评估核心工具测试集时，我们为每种搜索策略设置了1小时的时间限制，参考了[16, 48]。对于实际程序，时间限制为8小时。所有程序的内存限制为4GB，这高于KLEE的默认预算（2GB）以及先前工作[15, 21]中使用的限制。我们没有向KLEE输入任何初始种子测试。如有必要，我们会重复实验20次，并报告平均值和标准偏差。

#### Learch的训练与测试
我们通过在51个核心工具训练程序上运行算法4来训练Learch。初始策略集包括rps、nurs:cpicnt、nurs:depth和sgs（子路径长度分别为1、2和4），因为这些策略在训练程序上的表现最佳。我们运行算法4进行了4次迭代，以训练4种策略（前馈网络，3层线性层，隐藏维度为64，ReLU激活函数）。我们没有包含更多的训练策略，因为更多的策略并未显著提高Learch的性能。每次迭代大约花费4小时（symExec 2小时，dataFromTests 1小时，trainStrategy 1小时）。在测试集上运行Learch时，我们让每个策略运行总时间限制的四分之一，并将生成的测试用例合并。

#### 版本和平台
我们在KLEE 2.1和LLVM 6.0上实现了Learch。我们使用pytorch 1.4.0进行学习。所有符号执行实验都在一台配备4个Intel Xeon E5-2690 v4 CPU（2.60 GHz）和512 GB RAM的机器上进行。每个KLEE实例被限制在一个核心上运行。机器学习模型在配备RTX 2080 Ti GPU的机器上进行训练。

### 代码覆盖率
在本节中，我们展示了代码覆盖率的评估结果，即使用gcov [2]测量的行覆盖率。首先，我们报告包中所有文件的绝对行覆盖率。然后，我们展示并讨论覆盖行的百分比。

#### 核心工具程序的行覆盖率
图5(a)展示了52个核心工具测试程序中每种策略的覆盖率。总体而言，Learch（绿色条）覆盖了包中所有文件的618行。最好的单个启发式算法是rps（紫色条），覆盖了546行。也就是说，Learch比任何单个启发式算法至少多覆盖了13%的代码。portfolio（紫色条）是最好的组合启发式算法，但仍然比Learch少覆盖44行。

图5(b)显示了每种策略在所有策略中达到最佳覆盖率的程序数量。对于平局情况，每种策略计数一次。对于29个程序，Learch是最优策略，比portfolio多出3个，并且明显优于其他启发式算法。对于另外23个程序，至少有一种启发式算法比Learch表现更好，但通常只稍微好一点。此外，我们发现Learch在较大的核心工具程序上带来了更大的好处。例如，在最大的5个程序中，Learch比portfolio多覆盖了约30%，而对所有52个程序的整体覆盖率提高了约8%。对于较小的程序，手动启发式算法已经覆盖了大部分代码，因此Learch几乎没有改进。

#### 实际程序的行覆盖率
图6展示了10个实际程序中每种策略的覆盖率。为了生成策略组合的覆盖率曲线，我们将每个策略的独立运行视为顺序执行。总体而言，Learch平均覆盖了2,433行，而最好的手动启发式算法portfolio覆盖了2,023行。总的来说，Learch的表现比所有手动启发式算法高出20%以上。

从平均值来看，Learch在10个实际程序中的8个程序上表现最佳，除了cjson和find。对于cjson，Learch是第二好的策略，比portfolio少覆盖10行。对于find，Learch比portfolio和rps分别少覆盖242行和191行。Learch在代码覆盖率上的优越表现是一致的，而所有手动启发式算法的表现不稳定。例如，portfolio在cjson和find上表现良好，但在objcopy和sqlite上表现不佳。同样，sgs在gawk上表现良好，但在diff上表现较差。

对于sqlite，所有策略的标准差都很高。

### 图表
图6：通过KLEE使用不同策略运行8小时后，10个实际程序的行覆盖率。图表显示了20次运行的平均值和标准差。
- (a) diff的行覆盖率
- (b) find的行覆盖率
- (c) grep的行覆盖率
- (d) gawk的行覆盖率
- (e) patch的行覆盖率
- (f) objcopy的行覆盖率
- (g) readelf的行覆盖率
- (h) make的行覆盖率
- (i) cjson的行覆盖率
- (j) sqlite的行覆盖率

### 表格
**表3：覆盖的主要代码行百分比**
| 程序 | rss | rps | nurs:cpicnt | nurs:depth | sgs | portfolio | Learch |
|------|-----|-----|-------------|------------|-----|-----------|--------|
| coreutils | 66.4 | 73.1 | 71.6 | 71.4 | 72.0 | 75.4 | 76.9 |
| diff | 30.3 | 53.7 | 31.1 | 30.6 | 32.3 | 50.5 | 59.1 |
| find | 52.1 | 57.7 | 58.3 | 56.0 | 60.2 | 61.2 | 61.0 |
| grep | 21.8 | 29.7 | 17.1 | 28.1 | 29.8 | 29.7 | 36.5 |
| gawk | 39.2 | 39.2 | 39.2 | 43.0 | 39.2 | 43.0 | 39.2 |
| patch | 13.8 | 19.1 | 24.4 | 15.1 | 33.5 | 31.9 | 35.8 |
| objcopy | 9.9 | 9.5 | 6.0 | 9.3 | 8.3 | 9.8 | 13.3 |
| readelf | 4.8 | 3.9 | 5.2 | 6.5 | 7.7 | 9.1 | 9.0 |
| make | 33.3 | 33.3 | 33.0 | 45.2 | 33.3 | 45.2 | 45.2 |
| cjson | 79.8 | 80.2 | 76.5 | 79.6 | 79.7 | 80.3 | 80.3 |
| sqlite | 8.1 | 6.3 | 12.8 | 11.4 | 9.2 | 8.7 | 14.2 |

**表4：覆盖的有效代码行百分比**
| 程序 | rss | rps | nurs:cpicnt | nurs:depth | sgs | portfolio | Learch |
|------|-----|-----|-------------|------------|-----|-----------|--------|
| coreutils | 13.6 | 15.2 | 14.7 | 14.9 | 14.9 | 15.7 | 16.1 |
| diff | 1.9 | 3.3 | 2.0 | 2.0 | 2.0 | 3.1 | 3.6 |
| find | 1.0 | 1.1 | 1.2 | 1.1 | 1.2 | 1.2 | 1.2 |
| grep | 2.3 | 2.5 | 1.8 | 2.9 | 3.1 | 3.1 | 3.9 |
| gawk | 0.9 | 0.9 | 0.9 | 1.0 | 0.9 | 1.0 | 0.9 |
| patch | 1.7 | 2.4 | 3.1 | 1.9 | 4.2 | 4.0 | 4.5 |
| objcopy | 0.5 | 0.4 | 0.3 | 0.4 | 0.4 | 0.5 | 0.6 |
| readelf | 1.5 | 1.2 | 1.6 | 2.0 | 2.5 | 2.9 | 2.9 |
| make | 3.2 | 3.2 | 3.2 | 3.2 | 3.2 | 4.4 | 4.4 |
| cjson | 7.3 | 7.4 | 7.0 | 7.3 | 7.3 | 7.4 | 7.4 |
| sqlite | 5.5 | 4.2 | 8.8 | 7.8 | 6.3 | 5.9 | 9.7 |