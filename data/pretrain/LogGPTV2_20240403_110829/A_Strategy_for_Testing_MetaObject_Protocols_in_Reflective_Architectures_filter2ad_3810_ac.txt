### Introduction

Through introspection and structural intercession mechanisms, the MetuControl interface allows for the controllable update of a base-level object's state according to the current needs of non-functional requirements implemented at the meta-level. The attribute values are forced to match the input parameter values used in the activation request sent to the MetuControl interface. The primary objective of the test is to verify that the object state is updated according to these input parameter values.

### Testing Introspection Mechanisms

#### Overview
The testing process involves a driver object, a server object, and an oracle object. The driver object sends requests to the Service interface to initialize the attributes of the server object with specific values. These requests are transmitted via reification and behavioral mechanisms, which have already been tested (Step 1). The server object then notifies the driver object of the completion of the initialization process (Step 2).

Next, the driver object sends a request to the MefuControl interface to activate the introspection mechanisms (Step 3). The metaobject triggers the mechanisms (Step 4) and returns the observed attribute values to the driver object (Step 5). Finally, the driver object sends these values to the oracle object along with the initial values it supplied (Step 6). The oracle procedure compares both sets of values to ensure they match (Step 7).

#### Detailed Steps
1. **Initialization**: The driver object sends requests to the Service interface to initialize the server object's attributes.
2. **Notification**: The server object notifies the driver object of the completion of the initialization.
3. **Activation Request**: The driver object sends a request to the MefuControl interface to activate the introspection mechanisms.
4. **Mechanism Triggering**: The metaobject triggers the introspection mechanisms.
5. **Value Return**: The metaobject returns the observed attribute values to the driver object.
6. **Comparison Preparation**: The driver object sends the observed values and the initial values to the oracle object.
7. **Comparison**: The oracle object compares the two sets of values to verify the correctness of the state update.

### Testing Structural Intercession Mechanisms

#### Overview
The test environment uses all the MOP mechanisms previously tested. The metaobject and the oracle object are the same as those in the previous test. The server object must provide methods to modify its attribute values. The steps include initializing the server object, modifying its attributes, and verifying the changes through the MetuControl interface.

#### Detailed Steps
1. **Initialization**: The driver object sends requests to the Service interface to initialize the server object's attributes.
2. **Notification**: The server object notifies the driver object of the completion of the initialization.
3. **Modification**: The driver object sends requests to execute methods on the server object that change the attribute values.
4. **Notification**: The server object notifies the driver object of the completion of the modification process.
5. **Activation Request**: The driver object sends a request to the MetuControl interface to activate the structural intercession mechanisms.
6. **Mechanism Triggering**: The metaobject triggers the mechanisms under test.
7. **Introspection Activation**: The driver object activates the introspection mechanisms to get the object state after intercession.
8. **Value Return**: The metaobject returns the new attribute values to the driver object.
9. **Comparison Preparation**: The driver object sends the new values and the initial values to the oracle object.
10. **Comparison**: The oracle object compares the two sets of values to verify the correctness of the state update.

### Implementation Details

#### MOP Implementation
The MOP is implemented using CORBA entities mapped to independent system processes for fault containment. The interfaces of the MOP and the Service interfaces exported by server objects are defined using the IDL language. The MOP code is automatically generated using OpenC++, which allows for the customization of C++ class compilation.

#### Example: Counting Invocations
Consider a class whose service counts the number of requests received through its Service interface. The IDL definition and C++ implementation are provided. OpenC++ generates a reflective class that encapsulates the original class's capabilities and adds the reflective mechanisms of the MOP.

### Testing Strategy

#### Reification Mechanisms
Different IDL data types are used to define the object Service interface. For example, the interface for checking the MOP's capacity to handle long data types is shown. The testing process involves multiple steps to ensure the correct handling of different data types.

### Conclusion

The testing strategy ensures the correct functioning of introspection and structural intercession mechanisms in the MOP. By following the detailed steps and using the appropriate tools and interfaces, the tests verify that the object state is updated correctly according to the input parameter values.