      state: restarted
```
配置在一台服务器`web1`上执行。它安装`redis-server`包，复制 Redis 配置，启动 Redis。请注意，每次我们更改`redis.conf`文件的内容并重新运行`ansible-playbook`命令时，服务器上的配置都会更新，并且 Redis 服务会重新启动。
我们还需要创建具有以下内容的`redis.conf`文件:
```
daemonize yes
pidfile /var/run/redis/redis-server.pid
port 6379
bind 0.0.0.0
```
此配置将 Redis 作为守护程序运行，并将其暴露给端口号为 6379 的所有网络接口。现在让我们定义第二个游戏，它设置了计算器服务。
# 部署 web 服务
我们分三步准备计算器 web 服务:
1.  将项目配置为可执行。
2.  更改重定向主机地址。
3.  向行动手册中添加计算器部署。
# 将项目配置为可执行
首先，我们需要使构建 JAR 可执行，这样它就可以作为 Unix 服务在服务器上轻松运行。为了做到这一点，在`build.gradle`文件中添加以下代码就足够了:
```
bootRepackage {
    executable = true
}
```
# 更改 Redis 主机地址
以前，我们已经将 Redis 主机地址硬编码为`redis`，所以现在我们应该将`src/main/java/com/leszko/calculator/CacheConfig.java`文件中的地址更改为`192.168.0.241`。
In real-life projects, the application properties are usually kept in the properties file. For example, for the Spring Boot framework, it's a file called `application.properties` or `application.yml`.
# 向行动手册中添加计算器部署
最后，我们可以在`playbook.yml`文件中添加部署配置作为新玩法。
```
- hosts: web2
  become: yes
  become_method: sudo
  tasks:
  - name: ensure Java Runtime Environment is installed
    apt:
      name: default-jre
      state: present
  - name: create directory for Calculator
    file:
      path: /var/calculator
      state: directory
  - name: configure Calculator as a service
    file:
      path: /etc/init.d/calculator
      state: link
      force: yes
      src: /var/calculator/calculator.jar
  - name: copy Calculator
    copy:
      src: build/libs/calculator-0.0.1-SNAPSHOT.jar
      dest: /var/calculator/calculator.jar
      mode: a+x
    notify:
    - restart Calculator
  handlers:
  - name: restart Calculator
    service:
      name: calculator
      enabled: yes
      state: restarted
```
让我们走完我们定义的步骤:
*   **准备环境**:该任务确保安装了 Java 运行时环境。基本上，它准备了服务器环境，因此计算器应用将具有所有必要的依赖关系。对于更复杂的应用，相关工具和库的列表可能会更长。
*   **将应用配置为服务**:我们希望计算器应用作为 Unix 服务运行，这样它就可以以标准方式进行管理。在这种情况下，在`/etc/init.d/`目录中创建一个到我们应用的链接就足够了。
*   **复制新版本**:新版本的应用复制到服务器。请注意，如果源文件没有更改，则文件不会被复制，因此服务不会重新启动。
*   **重启服务**:作为一个处理程序，每次复制新版本的应用，都会重启服务。
# 正在运行部署
像往常一样，我们可以使用`ansible-playbook`命令来执行剧本。在此之前，我们需要用 Gradle 构建计算器项目。
```
$ ./gradlew build
$ ansible-playbook playbook.yml
```
成功部署后，服务应该可用，我们可以在`http://192.168.0.242:8080/sum?a=1&b=2`检查它是否工作。不出所料，应该会返回`3`作为输出。
注意，我们已经通过执行一个命令配置了整个环境。此外，如果我们需要扩展服务，那么向清单中添加一台新服务器并重新运行`ansible-playbook`命令就足够了。
我们已经展示了如何使用 Ansible 进行环境配置和应用部署。下一步是将 Ansible 与 Docker 一起使用。
# 可与 Docker 一起翻译
您可能已经注意到，Ansible 和 Docker 解决了类似的软件部署问题:
*   **环境配置**:Ansible 和 Docker 都提供了配置环境的方式；然而，他们使用不同的手段。而 Ansible 使用脚本(封装在 Ansible 模块中)，Docker 将整个环境封装在一个容器中。
*   **依赖关系** : Ansible 提供了一种方法，可以在相同或不同的主机上部署不同的服务，并让它们一起部署。Docker Compose 具有类似的功能，允许同时运行多个容器。
*   **可扩展性** : Ansible 有助于扩展提供库存和主机组的服务。Docker Compose 具有类似的功能，可以自动增加或减少运行容器的数量。
*   **配置文件自动化**:Docker 和 Ansible 都将整个环境配置和服务依赖关系存储在文件中(存储在源代码管理存储库中)。对于 Ansible，这个文件叫做`playbook.yml`。在 Docker 的例子中，我们有 Dockerfile 用于环境，docker-compose.yml 用于依赖和缩放。
*   **简单性**:这两个工具使用起来都非常简单，并且提供了一种通过一个配置文件和一个命令执行来设置整个运行环境的方法。
如果我们比较这些工具，Docker 会做得更多一点，因为它提供了隔离、可移植性和某种安全性。我们甚至可以想象在没有任何其他配置管理工具的情况下使用 Docker。那么，我们为什么需要 Ansible 呢？
# Ansible 的优势
Ansible 可能看起来是多余的；然而，它给交付过程带来了额外的好处:
*   **Docker 环境**:必须配置和管理 Docker 主机本身。每个容器最终都运行在 Linux 机器上，这需要内核补丁、Docker 引擎更新、网络配置等等。更重要的是，可能有不同的服务器机器和不同的 Linux 发行版，Ansible 的责任是确保 Docker 引擎启动并运行。
*   **非文档化应用**:并不是所有的东西都在一个容器中运行。如果基础架构的一部分是容器化的，一部分是以标准方式或在云中部署的，那么 Ansible 可以使用行动手册配置文件来管理这一切。不将应用作为容器运行可能有不同的原因，例如性能、安全性、特定的硬件要求、基于 Windows 的软件或使用传统软件。
*   **库存** : Ansible 提供了一种非常友好的方式来使用库存管理物理基础架构，库存存储所有服务器的信息。它还可以将物理基础架构划分为不同的环境:生产、测试、开发。
*   **GUI** : Ansible 提供了一个名为 Ansible Tower 的(商业)GUI 管理器，旨在为企业改善基础设施管理。
*   **改进测试流程** : Ansible 可以帮助集成和验收测试，并且可以像 Docker Compose 一样封装测试脚本。
我们可以将 Ansible 看作是负责基础设施的工具，而 Docker 则是负责环境配置的工具。下图显示了概述:
![](img/a8d7f1ee-0867-4b62-a53b-0ae730381cd1.png)
Ansible 管理基础设施:Docker 服务器、Docker 注册表、没有 Docker 的服务器和云提供商。它还负责服务器的物理位置。使用清单主机组，它可以将 web 服务链接到靠近其地理位置的数据库。
# 焦虑 Docker 播放手册
Ansible 与 Docker 顺利集成，因为它提供了一组 Docker 专用的模块。如果我们为基于 Docker 的部署创建一个可移植的剧本，那么第一个任务需要确保 Docker 引擎安装在每台机器上。然后，它应该使用 Docker 运行一个容器，或者使用 Docker Compose 运行一组交互容器。
There are a few very useful Docker-related modules provided by Ansible: `docker_image` (build/manage images), `docker_container` (run containers), `docker_image_facts` (inspect images), `docker_login` (log into Docker registry), `docker_network` (manage Docker networks), and `docker_service` (manage Docker Compose).
# 安装 Docker
我们可以使用 Ansible 行动手册中的以下任务来安装 Docker 引擎。
```
tasks:
- name: add docker apt keys
  apt_key:
    keyserver: hkp://p80.pool.sks-keyservers.net:80
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
- name: update apt
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial main stable
    state: present
- name: install Docker
  apt:
    name: docker-ce
    update_cache: yes
    state: present
- name: add admin to docker group
  user:
    name: admin
    groups: docker
    append: yes
- name: install python-pip
  apt:
    name: python-pip
    state: present
- name: install docker-py
  pip:
    name: docker-py
- name: install Docker Compose
  pip:
    name: docker-compose
    version: 1.9.0
```
The playbook looks slightly different for each operating system. The one presented here is for Ubuntu 16.04.
该配置安装了 Docker 引擎，使`admin`用户能够使用 Docker，并使用相关工具安装 Docker Compose。
Alternatively, you may also use the `docker_ubuntu` role as described here: [https://www.ansible.com/2014/02/12/installing-and-building-docker-with-ansible](https://www.ansible.com/2014/02/12/installing-and-building-docker-with-ansible).
安装 Docker 后，我们可以添加一个任务，该任务将运行 Docker 容器。
# 运行 Docker 容器
运行 Docker 容器是使用`docker_container`模块完成的，它看起来非常类似于我们为 Docker Compose 配置呈现的内容。让我们将其添加到`playbook.yml`文件中。
```
- name: run Redis container
  docker_container:
    name: redis
    image: redis
    state: started
    exposed_ports:
    - 6379
```
You can read more about all of the options of the `docker_container` module on the official Ansible page at: [https://docs.ansible.com/ansible/docker_container_module.html](https://docs.ansible.com/ansible/docker_container_module.html).
我们现在可以执行剧本来观察 Docker 已经安装，并且 Redis 容器已经启动。请注意，这是一种非常方便的使用 Docker 的方式，因为我们不需要在每台机器上手动安装 Docker 引擎。
# 使用 Docker 合成
可移植剧本与 Docker 编写配置非常相似。它们甚至共享相同的 YAML 文件格式。更有甚者，可以直接从 Ansible 使用`docker-compose.yml`。我们将展示如何做到这一点，但首先，让我们定义`docker-compose.yml`文件。
```
version: "2"
services:
  calculator:
    image: leszko/calculator:latest
    ports:
    - 8080
  redis:
    image: redis:latest
```
它几乎和我们在上一章中定义的一样。这次我们直接从 Docker Hub 注册表中获取计算器镜像，不要在`docker-compose.yml`中构建，因为我们想要构建镜像一次，将其推送到注册表中，然后在每个部署步骤中(在每个环境上)重用它，以确保在每个 Docker 主机上部署相同的镜像。当我们有了`docker-compose.yml`，我们就准备给`playbook.yml`增加新的任务。
```
- name: copy docker-compose.yml
  copy:
    src: ./docker-compose.yml
    dest: ./docker-compose.yml
- name: run docker-compose
  docker_service:
    project_src: .
    state: present
```
我们首先将 docker-compose.yml 文件复制到服务器中，然后执行`docker-compose`。因此，Ansible 创建了两个容器:计算器和 redis。
我们已经看到了 Ansible 最重要的特性。在接下来的部分中，我们将写一点关于基础设施和应用版本控制的内容。在本章的最后，我们将介绍如何使用 Ansible 来完成持续交付管道。
# 练习
在这一章中，我们已经介绍了 Ansible 的基础知识以及与 Docker 一起使用它的方法。作为练习，我们建议执行以下任务:
1.  创建服务器基础架构，并使用 Ansible 来管理它。
    *   连接物理机器或运行 VirtualBox 机器来模拟远程服务器
    *   配置对远程机器的 SSH 访问(SSH 密钥)
    *   在远程机器上安装 Python
    *   使用远程计算机创建一个可转换的清单
    *   运行 Ansible 临时命令(带有`ping`模块)以检查基础设施配置是否正确
2.  创建一个基于 Python 的“hello world”web 服务，并使用 Ansible playbook 将其部署在远程机器上。
    *   该服务看起来与本章练习中描述的完全相同
    *   创建行动手册，将服务部署到远程计算机中
    *   运行`ansible-playbook`命令，检查服务是否已部署
# 摘要
我们已经介绍了配置管理过程及其与 Docker 的关系。本章的要点如下:
*   配置管理是创建和应用基础架构和应用配置的过程
*   Ansible 是最好的趋势配置管理工具之一。它是无代理的，因此不需要特殊的服务器配置
*   Ansible 可以与特定命令一起使用，但真正的威力在于 Ansible 行动手册
*   Ansible 行动手册定义了应该如何配置环境
*   Ansible 角色的目的是重用行动手册的一部分。
*   Ansible Galaxy 是一个共享 Ansible 角色的在线服务
*   与单独使用 Docker 和 Docker Compose 相比，Ansible 可以很好地与 Docker 集成，并带来额外的好处
在下一章中，我们将总结持续交付流程，并完成最终的 Jenkins 管道。