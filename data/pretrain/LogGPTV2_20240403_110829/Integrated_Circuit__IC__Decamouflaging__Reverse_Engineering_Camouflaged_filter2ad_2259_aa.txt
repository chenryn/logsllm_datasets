title:Integrated Circuit (IC) Decamouflaging: Reverse Engineering Camouflaged
ICs within Minutes
author:Mohamed El Massad and
Siddharth Garg and
Mahesh V. Tripunitara
following. In any IC, each logic gate is one of a set of gate-
types, for example, XOR, NAND or NOR. A camouﬂaged
gate is one whose gate-type cannot be determined by reverse
engineering. That is, from the standpoint of an attacker that
carries out reverse engineering, the gate may be any one of
the possible gate-types. When inputs are applied, however, a
camouﬂaged gate still performs the function as intended by
the designer, for example, XOR, to produce the correct output.
Rajendran et al. [20] provide an excellent description as to how
a gate can be camouﬂaged in practice.
IC camouﬂaging technology has been adopted commer-
cially, for example by Inﬁneon [1], a major semiconductor
vendor of embedded computing devices for mobility and secu-
rity applications. The technology seems particularly attractive
in the context of small ICs, e.g., those with only a few 100’s or
1000’s of gates, which are common in modern embedded and
mobile devices. It appears that even for such small ICs, with
only a small fraction of the gates camouﬂaged, the security
attained is very high — we discuss this more below and in
Section II.
Figure 1 shows an example from prior work [20] of a net-
list with three logic gates, two of which are camouﬂaged. An
attacker who wishes to decamouﬂage a circuit, i.e., determine
the Boolean functionality (or identity) of the camouﬂaged
gates, does so by applying input patterns and generating the
corresponding output pattern. An input pattern is a bit-string
that assigns a boolean value to each input pin of a circuit. The
attacker then analyzes these pairs of input-output patterns to
determine the identities of camouﬂaged gates. We call a set
of input patterns that is sufﬁcient to decamouﬂage a circuit a
discriminating set of inputs for that camouﬂaged circuit. (See
Section III-A for a more precise deﬁnition.)
The application of each new input pattern comes at a cost
to the attacker. This is because applying an input pattern and
observing its output pattern takes some time. The attacker’s
objective, therefore, is to exercise the camouﬂaged circuit with
as few distinct input patterns as possible. That is, he seeks a
discriminating set of minimum size. On the other hand, the
defender seeks to ensure that the size of every discriminating
set is large.
To do so, a defender camouﬂages as many gates as she can.
However, camouﬂaged gates use more area, consume more
power and are slower than gates that are not camouﬂaged. That
is, camouﬂaging comes at a cost to the defender. This sets up
a cost-security trade-off from the perspective of the defender,
i.e., the defender can obtain greater security at the expense
of increased circuit area, delay and power. However, ICs in
the embedded computing domain are particularly sensitive
to cost, particularly the chip footprint (or area) and power
consumption.
One of the main contributions of prior work [20] is that
this cost-security trade-off can be made to heavily favor the
defender by choosing the gates to be camouﬂaged judiciously.
For instance, given an attacker that can exercise a billion
inputs a second and a benchmark circuit of more than 2400
gates,
there exists a set of only 63 gates (only 2.6% of
the gates in the circuit) that if camouﬂaged, would take the
attacker “several thousands of years” to identify [20]. The work
proposes techniques to discover such small sets of gates so the
cost of camouﬂaging is low, but the difﬁculty for the attacker
is exponential
in the number of camouﬂaged gates. Their
results suggest that if applied carefully, IC camouﬂaging can
be an effective defense mechanism against reverse engineering
attacks.
Our work We re-examine the assertions of prior work [20],
[25] for realistic benchmark circuits. For those circuits, such
work suggests that by camouﬂaging only a small, appropriately
selected, set of gates, “. . . the attacker is forced to do brute
force,” which, as we mention above, for an attacker that is able
to exercise the circuit with a billion input patterns a second,
translates to “several thousands of years” [20].
Counter to such results, we have discovered that with
the same number of gates chosen in the same manner as
that work proposes for camouﬂaging, an attacker can ﬁnd a
correct completion (i.e., decamouﬂage the circuit) in only a
few minutes, and not thousands of years. We have devised
and implemented a new attack procedure for this, which is the
focus of our paper.
Underlying our work is a fresh, complexity-theoretic mind-
set to the problem of IC decamouﬂaging. This mindset, in
turn, suggests the attack procedure that we have designed
and implemented. We examine problems that underlie two
basic questions: (1) Is a given set of input patterns, I, a
discriminating set for a camouﬂaged circuit C? (2) If so, what
is a correct assignment of boolean functionalities (or identities)
for each camouﬂaged gate in C? By iteratively calling a solver
for the problem that corresponds to (1), we are able to obtain a
discriminating input set. We then call a solver for the problem
that corresponds to (2) to decamouﬂage C. As we discuss in
Section III, each call to a solver for problem (1) either returns a
new input pattern, or determines that the current set is sufﬁcient
to decamouﬂage the circuit.
Our solvers for the two problems above are based on the
observation that the decision version of problem (1) is in co-
NP, and that of problem (2) is in NP. NP is the class of
decision problems that can be solved efﬁciently using a non-
deterministic Turing machine; a decision problem is in co-NP
if its complement is in NP [2]. (We in fact show, in addition,
that the two problems are complete for their respective classes
— see Section III.) Thus, there exist efﬁcient reductions from
the complement of problem (1) and from problem (2) to CNF-
SAT, the problem of determining whether a boolean formula
in conjunctive normal form is satisﬁable. Via the reductions,
therefore, we can leverage off-the-shelf SAT solvers such as
Minisat [11].
Contributions We make a number of novel contributions
that shed new light on the (in)effectiveness of the IC camou-
ﬂaging techniques from prior work.
• We express the underlying problems an attacker solves
to decamouﬂage a camouﬂaged circuit precisely and
characterize their computational complexity. We es-
tablish that the problems are in co-NP and in NP,
respectively. In this context, we introduce the notion
of a discriminating set of input patterns that serves as
a sound measure of what an attacker must determine
to be successful. We also identify that these problems
2
Based on this counter-example, we conclude that the as-
sertion in prior work that an attacker has to resort to a brute
force attack if all the camouﬂaged gates are picked using the
largest-clique technique is too conservative.
In the next section we propose a new IC decamouﬂaging
attack based on a complexity-theoretic characterization of
the IC decamouﬂaging problem. We show that by using our
attack procedure, the attacker can decamouﬂage circuits within
minutes that would otherwise take an impractically long time
using brute force.
III.
IC DECAMOUFLAGING: OUR ATTACK
We now describe our attack. We ﬁrst adopt some termi-
nology for ease of exposition. We refer to the original circuit
before camouﬂaging as C. We emphasize that C is available
to the attacker as a black-box only. That is, the only thing an
attacker can do with C is to apply input patterns, and observe
the corresponding output patterns. We refer to the camouﬂaged
version of C as C. The circuit C has n input bits, m output
bits and k camouﬂaged gates. For instance, in Figure 1, the
circuit has n = 4 input bits, m = 1 output bits and k = 2
camouﬂaged gates.
Let L be the set of all possible gate types. For example,
for the circuit in Figure 1, L = {XOR, NAND, NOR}. Let X
be a function X: [1, k] −→ L. That is, if we arbitrarily assign
the indices 1, . . . , k to the k camouﬂaged gates, the function
X maps each camouﬂaged gate to one of the allowed gate
types. We call X a completion of C, and denote the completed
circuit as CX. Note that CX does not necessarily have the same
functionality as C. In Deﬁnition 1 below, we deﬁne a correct
completion. But before that, we need to introduce some more
terminology.
An input pattern i is an n bit boolean vector that assigns
a boolean value to each input pin. The set of all possible
input patterns is denoted as I = {0, 1}n. Any subset I ⊆ I
is referred to as a set of input patterns. C(i) represents the
m bit output of the black-box circuit for input pattern i.
Correspondingly, CX (i) represents the m bit output of the
camouﬂaged circuit C completed with X.
A correct completion of the camouﬂaged circuit C is now
deﬁned as follows.
Deﬁnition 1. [Correct Completion1] A completion X is re-
ferred to as a correct completion if and only if:
∀i ∈ I, CX (i) = C(i)
That is, a correct completion is an assignment of gates to all
the camouﬂaged gates such that the resultant circuit produces
the same output for every input, as the black-box camouﬂaged
circuit. The goal of the attacker is to ﬁnd a correct completion.
Note that our deﬁnition above accounts for the possibility that
there can be more than one correct completion. If an attacker
is able to arrive at any one correct completion, then he has
successfully accomplished his goal which is to reverse engineer
the (Boolean functionality of the) camouﬂaged circuit.
1We refer to a completion that is not correct as an incorrect completion.
A. Discriminating Set of Input Patterns
We now characterize the notion of a discriminating set of
input patterns, and the computational complexity of deciding
whether a given set of input patterns is discriminating. Before
we do so in Deﬁnition 3 below, we deﬁne what we call the
Set of Candidate Completions for a set of inputs I.
Deﬁnition 2. [Set of Candidate Completions] The set of
candidate completions, P(I), for a set of input patterns I
comprises those completions that have the same output as the
black-box circuit for all inputs in I. That is,
P(I) = {X | ∀i ∈ I, CX (i) = C(i)}.
Given I, a member of the set of candidate completions for
it, X ∈ P(I), necessarily agrees with the black-box circuit
only on the inputs in I. As a correct completion must agree
with the black-box camouﬂaged circuit on all inputs, P(I)
certainly contains all correct completions, and perhaps some
incorrect completions. And this is the case for every I ⊆ I.
We express this via the following lemma, which is in turn used
to prove Theorem 1 below.
Lemma 1. Given a camouﬂaged circuit C, any I ⊆ I, and
the set of candidate completions, P(I) for it. P(I) contains
all correct completions of C.
Proof: A correct completion agrees with the camouﬂaged
circuit on all inputs. Therefore, it agrees with the camouﬂaged
circuit on every subset I of all inputs.
for
In Figure 3,
instance, when I consists of only
one input pattern ‘0000,’ the set P(I) consists of 4 can-
didate completions. These include the correct completion
(G1=NAND, G2=NOR) but also three other incorrect com-
pletions (G1=NAND, G2=NAND; G1=NOR, G2=NAND; and
G1=NOR, G2=NOR). However, when I consists of all 4 input
patterns indicated in Figure 3, P(I) consists of only one
completion, which is the correct completion. Such a set of
input patterns that distinguishes the correct completion(s) from
all incorrect completions is referred to as a discriminating set
of inputs patterns, or simply a discriminating set. We deﬁne it
as follows.
Deﬁnition 3. [Discriminating Set] A set of input patterns I ⊆
I is discriminating for a camouﬂaged circuit C if
∀X1, X2 ∈ P(I) and ∀i ∈ I,
CX1 (i) = CX2(i)
(1)
Intuition
The intuition behind our characterization of a
discriminating set I is the following. Suppose we have two
completions X1, X2 that are both in the set of candidate
completions P(I). Then, we deem I to be a discriminating
set if the fact that CX1 agrees with CX2 on all inputs in I
implies that CX1 and CX2 agree on all possible inputs.
We can now establish that given P(I) for I that is discrim-
inating, every member of P(I) must be a correct completion.
This is exactly the value of the notion of a discriminating set
— it distinguishes a correct completion from an incorrect one.
Theorem 1. Given I ⊆ I that is a discriminating set, suppose
P(I) = {X1, . . . , Xn}. Then, all of X1, . . . , Xn are correct
completions of C.
5
Proof: Assume otherwise, for the purpose of contra-