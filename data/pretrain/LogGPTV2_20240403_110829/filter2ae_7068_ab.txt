所以我猜测它应该是一个`pool`, 而不是堆栈. 于是我运行了如下命令.
其中需要留意的信息有:
    [+] Gebr为其tag. 
    [+] 0x17ab5000与其复制的length是十分不一致的. 当然也有可能是由于其有特殊的运算规则.
    [+] 漏洞相关的pool存在paged session pool
所以在这里我就已经可以开始推测其为整数溢出了. 理由如下
    [+] 正常逻辑下size与其实际大小应该是一一对应的.
    [+] 此处记录的size远大于其实际大小
    [+] 推测:
        ==> size被记录
        ==> 某种特殊的规则导致分配实际大小溢出变小
#### 第二步
于是借助于`tag`(tag真的很有用)与前面的逻辑分析. 我定位到了分配此内存的点. 在`EngRealizeBrush`函数当中.
代码的修复你依旧可以参照可爱的`windows nt`的源码来完成. 与`ulSizeTotal`相关的赋值语句在这里.
可能你会比较疑惑的是各个变量的意义是什么, 与前面的思路一样, 我采用了动态调试验证.(定位到函数流, 跟着走一遍, 观察相应变量的值).
给出结论之前先看我们POC代码中的`CreateDiscardableBitmap`函数.
动态调试得到的结论是:
    [+] cjsCanpat = (cx * 0x20 >> 3);
    [+] v49 = cjScanpat * cy
    [+] ulSizeTotal = cjsPanat * cyInput * 0x44
[+] 整理扩展一下pool整体分配的公式:
    poolsize = ((cx * 0x20) >> 3) * cy + 0x44 + 0x40 + 0x8(x86下的pool header)
我们原来POC传入的大小是:
    hBitMap = CreateDiscardableBitmap(hdcCall, 0xDEAD000, 0x1);
借助于windbg, 让我们来算一下我们的结论是否正确:
我们可以看到和我们前面的`size`(0x17ab5000)完全扯不上关系, 这是由于windbg实现的是无溢出的结果.
需要留意的是我们的`1bd5a出现了`
而另外一个方面我编写了如下的c程序来看看程序的输出.
bingo, 所以错误出现了, 我们看到了溢出的曙光.
这里的溢出一共有三个位置:
    [+] cx * 0x20
    [+] ((cx * 0x20) >> 3) * cy + 44
    [+] poolsize = ((cx * 0x20) >> 3) * cy + 0x44 + 0x40
#### 利用思路
在后面的故事当中, 我查阅了的这篇文章. 获取了利用思路.
查阅了小刀师傅给的一个关键数据.
我们选取的大小为0x10(后面我会解释0x10的分配为什么合适), 漏洞分配的pool整体大小是`0x10+8(header)
验证:
之后的利用思路如下:
    [+] 风水布局布置成0xf80(bitmap)+0x18(空闲)地址
    [+] 触发漏洞使其填充0x18
    [+] 利用后面的代码覆盖相连的bitmapA的一个关键变量扩充其读写能力
    [+] 利用bitmapA扩充之后的读写能力去覆盖相连的bitmapB的pvScan0
    [+] bitmapB成为manager bitmap
        任意选取一个worker bitmap
    [+] 由worker bitmap来实现任意读写
听着有点乱? 让我们一步一步的来.
#### pool fengshui
我们最后的布局效果如下
    0xfe8(bitmap alloc) + 0x18(free)
首先来解释为什么需要是这个布局(细节可以在这里找到):
    [+] fe8大小的内存块会放在页的开头. 释放相连堆块的时候不会进行`pool header`有无被破坏的检测
    [+] 0x18会被内核漏洞点分配的pool填充
    [+] 漏洞的结构体是paged session pool --> 这个信息对pool fengshui十分有用.
##### 实现.
fengshui布局这里我不会讲的太细, 因为在后面的一篇爬坑指南当中我会去详细的解释fengshui布局的相关爬坑.
首先我们要选取合适的数据. 也就是刚刚可以分配`0xfe8`大小的pool, 以及此分配的pool应该为non page pool.
于是我想到了我在github上面维护的那个项目. 使用CreateBitmap是一个很好的选择.
在调试之后(具体的调试技术在我的另外一篇爬坑文章). 再保持其余参数不变的情况下. 随着width的关系如下:
    // size = ((width-100) * 0x2) + 0x360
    for (int i = 0; i 
  * 小刀师傅博客: 
  * 整数溢出利用思路: 
  * 本文exp: 
  * k0shi师傅的exp: 
  * 我的个人博客: 
  * 我的github地址: 
  * 第一篇: 
  * 第二篇: 
* * *