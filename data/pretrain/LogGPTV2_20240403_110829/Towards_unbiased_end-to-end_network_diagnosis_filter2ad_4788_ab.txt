column vector
is one if link
drops
of a path rep-
is part of the path, and zero otherwise. Suppose link
, where the th entry
packets with probability
is given by
resented by
. Then, the loss rate
(1)
In the equation above, we assume that packet loss is indepen-
dent among links. We believe that such an assumption is sup-
ported by the ﬁndings of Caceres et al. [16]. They ﬁnd that the
diversity of trafﬁc and links makes large and long-lasting spatial
link loss dependence unlikely in a real network such as the In-
ternet [16]. Our Internet experiments also show that the link loss
dependence has little effect on the accuracy of (1). Formula (1)
has also proven useful in other work on link/path loss inference
[4], [5], [17], [18].
Suppose we take logarithms on both sides of (1). Then,
with elements
by deﬁning a column vector
3The standard algebraic terms in Table I can be found in [15].
ZHAO et al.: TOWARDS UNBIASED END-TO-END NETWORK DIAGNOSIS
1727
vector
, we can rewrite (1) as follows:
, and writing
as the transpose of the
There are
paths in the overlay network, thus
(2)
represents a path in the network:
linear equations of the form (2). Putting them together, we form
that represents these paths.
a rectangular matrix
Each row of
when
path
be the
be a column
end-to-end loss rate of the th path, and let
vector with elements
in
form (2) as
contains link , and
. Then, we write the
otherwise. Let
Fig. 3. Sample topologies and MILSs.
(3)
Normally, the number of paths
number of links . However, in general,
is much larger than the
is rank deﬁcient: i.e.,
[8]. In this case, we will be unable to
infer the loss rate of some links from (3). These links are also
called unidentiﬁable in the network tomography literature [7].
Fig. 2 shows an example in which no link is identiﬁable.
and
B. System Architecture
Suppose
end-hosts belong to a single overlay network or to
a confederation of overlay networks. They cooperate to share an
overlay monitoring and diagnosis service and are instrumented
by a central authority [e.g., an overlay network center (ONC)]
to measure the routing topology and path loss rates as needed.
First, the end-hosts measure the topology and report to the ONC,
which selects a small number of paths to measure and instru-
ments the end-hosts to execute such measurements. The end-
hosts periodically report the measured loss rates to the ONC.
Then, the ONC infers the loss rates of nonmeasured paths and
locates the congestion/failure points. Applications can query the
ONC for the loss rate or diagnosis of any path, or they can set
up triggers to receive alerts when the loss rates of paths/links of
interest exceed a certain threshold.
The core part of the LEND system consists of two stages. In
the ﬁrst stage, we select a small amount of paths to measure and
then infer the loss rates of all end-to-end paths. The ﬁrst stage
is done in our previous work [8]. The basic idea of [8] is to ﬁnd
a minimal set of paths so that all the path properties can be in-
ferred based on the measurement of the set of paths. Speciﬁcally,
modeling with the algebraic model introduced in Section III-A,
a path set that corresponds to a basis of the row(path) space of
path matrix
satisﬁes our purpose. It is much more
challenging to infer the properties on the link level in the second
stage, which is our focus in this paper. Nevertheless, for overlay
diagnosis, we naturally inherit the scalability and load balancing
from [8] with this architecture. That is, to diagnose an overlay
network of
paths
instead of all the
paths. This load is evenly distributed
across the end-hosts.
nodes, we only need to measure
IV. IDENTIFYING MILSS
their properties. For simplicity, we ﬁrst study link property in-
ference for undirected graphs. We then turn to the more realistic
problem of inferring link properties in directed graphs.
A. Minimal Identiﬁable Link Sequence
As mentioned before, we know that not all the links (or the
corresponding variables in the algebraic model) are uniquely
identiﬁable. Thus, our purpose is to ﬁnd the smallest path seg-
ments with loss rates that can be uniquely identiﬁed through
end-to-end path measurements. We introduce MILS to deﬁne
such path sequences. These path sequences can be as short as
a single physical link or as long as an end-to-end path. Our
methods are unbiased and work with any network topology.
This provides the ﬁrst lower bound on the granularity at which
properties of path segments can be uniquely determined. With
this information, we can accurately locate what link (or set of
links) causes any congestion or failures.
Fig. 3 illustrates some examples for undirected graphs. In the
top ﬁgure, we cannot determine the loss rates of the two phys-
ical links separately from one path measurement. Therefore, we
combine the two links together to form one MILS. In the middle
ﬁgure, three independent paths traverse three links. Thus, each
link is identiﬁable, and thus each link is a MILS. In the bottom
ﬁgure, there are ﬁve links and four paths. Each path is a MILS
since no path can be written as a sum of shorter MILSs. How-
ever, link 3 can be written as
, which means
link 3 is identiﬁable, and there are ﬁve MILSs. These examples
show three features of the MILS set:
(cid:129) The MILSs may be linearly dependent, as in the bottom
example. We can shrink our MILS set to a basis for the
path space by removing such linear dependence, e.g., by
removing the MILS
in the bottom example in Fig. 3.
However, it is helpful to keep such links for diagnosis.
(cid:129) Some MILSs may contain other MILSs. For instance,
in the bottom
is contained in MILSs
and
MILS
example.
(cid:129) The MILS is a consecutive sequence of links because, for
diagnosis purposes, we often want to limit the range within
the network where congestion/failure happens.
In this section, we deﬁne a minimal identiﬁable link sequence
(MILS) and introduce algorithms to identify MILSs and to infer
The problem of decomposing a network topology into MILSs
is similar to the sparse basis problem in numerical linear algebra.
1728
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 17, NO. 6, DECEMBER 2009
The sparse basis problem is to ﬁnd a basis for the range of a ma-
trix with as few nonzeros as possible. However, ﬁnding MILSs
differs from the usual problem of ﬁnding a sparse basis for the
following reasons:
(cid:129) The sparse basis problem is an NP-hard problem, and
nearly all the heuristic algorithms for this problem are
based on a nondegeneracy assumption. In particular, these
heuristics require that every submatrix of with the order
of
is nonsingular [19], an assumption does not
hold for typical network path matrices.
(cid:129) For Internet diagnosis, we want to locate the possible lossy
links in a networking region that is as small as possible.
Thus, we want to have vectors that correspond to consec-
utive link sequences. If we did not make this assumption,
there could exist an exponentially large number of MILSs.
A MILS is a path segment and, like a path, it can be rep-
whose nonzero entries denote
resented by a vector in
the physical links used. Our requirement that the properties of
MILSs must be determined by the end-to-end measurements is
equivalent to the requirement that the vector of the MILS is in
the path space
made of end-to-end paths, which was addressed in [8], identi-
fying MILSs is a more challenging task.
. Compared to ﬁnding a basis of
B. MILSs in Undirected Graphs
As we have deﬁned them, MILSs satisfy two properties:
1) they are minimal—i.e., they cannot be decomposed into
shorter MILSs; and 2) they are identiﬁable—i.e., they can
be expressed as linear combinations of end-to-end paths.
Algorithm 1 ﬁnds all possible MILSs by exhaustively enumer-
ating the link sequences and checking each for minimality and
identiﬁability. An identiﬁable link sequence on a path will be
minimal if and only if it does not share an endpoint with a MILS
on the same path. Thus, as we enumerate the link sequences on
a given path in increasing order of size, we can track whether
each link is the starting link in some already-discovered MILS,
which allows us to check for minimality in constant time. To
test whether a link sequence is identiﬁable, we need only to
make sure that the corresponding path vector
lies in the path
space. Since
will lie in the path space if and only if
is an orthonormal basis for the path space,
.
Now, we analyze the computational complexity of identifying
MILSs. If a link sequence contains
links, then will con-
tain only
time to com-
nonzeros, and it will cost
pute
. This cost dominates the cost of checking for min-
imality, and so the overall cost to check whether one link sub-
sequence is a MILS will be at worst
. On a path of
length , there are
link subsequences, each of which costs
at most
time to check, so the total time to ﬁnd all the
MILSs on one end-to-end path is at most
. However, we
can further reduce the complexity from
to
using dynamic programming (detail omitted). If we check every
end-to-end path in the network, the overall complexity of Algo-
. However, our simulations and
rithm 1 will then be
Internet experiments show that only a few more MILSs are ob-
tained from scanning all
end-to-end paths than from scanning
only the
end-to-end paths that are directly monitored. Fur-
thermore, each physical link used by the network will be used
by one of the monitored paths, so the MILSs obtained from
this smaller set of paths do cover every physical link. Therefore,
Algorithm 1. Seeking All MILSs in an Undirected Graph.
Fig. 4. MILSs in undirected graph.
in practice, we scan only the monitored paths, which costs
time, and we accept a slight loss of diagnosis gran-
ularity.
shows some identiﬁable vectors in
Once we have identiﬁed all the MILSs, we need to compute
their loss rates. We do this by ﬁnding a solution to the underde-
termined linear system
system (see [8]). For example,
in Fig. 4,
. Ob-
viously,
, but they
, the loss
may not be MILSs. Then, for each MILS with vector
rate is
need not be the real link loss
. The elements of
are guaranteed to be unique
rates: Only the inner products
and to correspond to real losses. We also note that because loss
rates in the Internet remain stable over time scales on the order
of an hour [20], the path measurements in
need not be taken
simultaneously.
It is worth mentioning that the same problem for undirected
graph was solved in [14] with the same order of computational
complexity. However, our focus of this paper is on the case of di-
rected graphs, which is ignored in [14]. Furthermore, compared
to [14], our approach inherits the key feature of measurement
efﬁciency of [8] (i.e., requiring only
measurements
of end-to-end paths instead of measurements) and reuses the
computational output of [8] such as
and
.
C. MILSs in Directed Graphs
1) Special Properties for Directed Graphs: Surprisingly, our
MILS algorithm cannot be extended to directed graphs directly.
ZHAO et al.: TOWARDS UNBIASED END-TO-END NETWORK DIAGNOSIS
1729
Fig. 5. Undirected graph versus directed graph.
Fig. 6. The operational ﬂowchart of the LEND system architecture.
We found that no path can be decomposed into more than one
MILS, i.e., each path itself is a MILS. Fig. 5 shows a simple star
topology as both an undirected graph and a directed graph. In
the undirected graph on the left, the loss rate of each link is iden-
tiﬁable from the loss rate of the three paths. In contrast, in the
, and none of the six
directed graph on the right,
links are identiﬁable from measurements of the six end-to-end
paths. Only the end-to-end paths are identiﬁable in this case.
This is typical of directed networks. In the case illustrated in
Fig. 5, we can explain the lack of identiﬁable links as follows.
We can split
into two submatrices, one containing only in-
coming links and the other only containing outgoing links of the
router
in
because any path
has one incoming link and one outgoing link. Vectors like
, as they do not satisfy
that condition. This example illustrates the intuition of Theorem
1 below, which shows that, in a directed graph, each path itself
is a MILS—i.e., it is the minimal identiﬁable consecutive path
segment.
. Thus, any vector
satisﬁes
do not belong to
in
Theorem 1: In a directed graph, no end-to-end path contains
an identiﬁable subpath except loops.
Proof: For any interior node
such that
tors
link for node , and
node . For any path with vector
begins or ends at
of
. Because