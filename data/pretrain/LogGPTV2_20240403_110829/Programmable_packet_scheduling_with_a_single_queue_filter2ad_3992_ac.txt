else
2:
3:
4:
5:
6:
7:
C −c
C then
8:
// Drop packet
Drop pkt
9: function Egress
10:
if Queue is not empty then
pkt ← Queue.deque()
Send pkt
11:
12:
on the arrival rate distribution of different ranks. It ensures the
admitted packets have similar ranks as those admitted by PIFO.
We note that the basic idea of dynamic, proportional adaption is
widely used, and in particular for networking, it has been instanti-
ated in various forms in congestion control [4, 22, 30]. For exam-
ples, delay-based congestion control algorithms like TIMELY and
Swift [22, 30] adapt the TCP window size dynamically based on the
end-to-end delay, and ECN-based algorithms like DCTCP [4] adapt
the window size in proportional to the number of packets with the
ECN flag. These instantiations all put the control in the end hosts.
In comparison, AIFO places the dynamic, proportional adaption in
the network, and it serves a different purpose, i.e., programmable
packet scheduling. This context brings stringent requirements to
the algorithm design: the algorithm should not only achieve op-
timality, but also be carefully designed to be implemented at line
rate.
For readers familiar with the packet scheduling literature, AIFO
can be considered as an AQM solution. Traditional AQM solutions
consider a specific objective, and drop packets using threshold
comparisons against average queue length [12, 34, 35] or delay
estimations [32]. In comparison, AIFO is designed to be a general
solution that can be programmed to support different objectives,
and it drops packets with a combination of threshold comparisons
(i.e., the temporal component) and relative packet rank estimations
(i.e., the spatial component).
4.2 Algorithm
We design AIFO based on these key ideas. Algorithm 1 shows the
pseudocode. At the ingress (line 1-8), AIFO uses admission control
(line 2-5) to decide whether to enqueue (line 6) or drop a packet (line
8). The threshold is dynamically determined by queue length (c) and
queue size (C), and we use quantile estimation (W .quantile(pkt ))
to estimate the relative rank of current packet. The queue is a FIFO
queue which enqueues the packet to the end of the queue. At the
egress (line 9-12), when the queue is not empty, AIFO dequeues a
packet from the head of the queue, and sends the packet out.
Next, we explain the admission control part in detail. For the
temporal component, it uses the difference between the current
183
SIGCOMM ’21, August 23–28, 2021, Virtual Event, Netherlands
(cid:19)(cid:13)(cid:17)(cid:12)(cid:18)(cid:13)(cid:16)(cid:15)(cid:11)(cid:21)(cid:1) (cid:9)(cid:20)(cid:10)
(cid:22)(cid:3)(cid:20)(cid:14)(cid:23)(cid:9)(cid:21)(cid:6)(cid:20)(cid:4)(cid:5) (cid:21)(cid:7)(cid:2)(cid:8)
(cid:17)(cid:20)(cid:27)(cid:24)(cid:33)
(cid:30)(cid:25)(cid:33)(cid:6)(cid:31)(cid:34)(cid:17)(cid:28)(cid:33)(cid:24)(cid:26)(cid:21) (cid:13)(cid:1)(cid:11)(cid:8)(cid:2)
(cid:3)(cid:17)(cid:4)(cid:1)(cid:14)(cid:20)(cid:27)(cid:24)(cid:33)(cid:1)(cid:30)(cid:17)(cid:19)(cid:25)(cid:21)(cid:33)(cid:1)(cid:35)(cid:23)(cid:21)(cid:28)(cid:1)(cid:19)(cid:34)(cid:32)(cid:32)(cid:21)(cid:28)(cid:33)(cid:1)(cid:31)(cid:34)(cid:21)(cid:34)(cid:21)(cid:1)(cid:26)(cid:21)(cid:28)(cid:22)(cid:33)(cid:23)(cid:1)(cid:19)(cid:1)(cid:13)(cid:1)(cid:10)(cid:6)
(cid:25)(cid:13)(cid:9)(cid:7)(cid:12)(cid:5)(cid:1)(cid:15)(cid:13)(cid:12)(cid:5)(cid:1)(cid:19)(cid:13)(cid:10)
(cid:19)(cid:13)(cid:17)(cid:12)(cid:18)(cid:13)(cid:16)(cid:15)(cid:11)(cid:21)(cid:1) (cid:9)(cid:20)(cid:10)
(cid:22)(cid:3)(cid:20)(cid:14)(cid:23)(cid:9)(cid:21)(cid:6)(cid:20)(cid:5)(cid:5) (cid:21)(cid:4)(cid:2)(cid:8)
(cid:20)(cid:32)(cid:29)(cid:30)
(cid:30)(cid:25)(cid:33)(cid:6)(cid:31)(cid:34)(cid:17)(cid:28)(cid:33)(cid:24)(cid:26)(cid:21) (cid:13)(cid:1)(cid:11)(cid:8)(cid:2)
(cid:25)(cid:13)(cid:9)(cid:7)(cid:12)(cid:5)(cid:1)(cid:15)(cid:13)(cid:12)(cid:5)(cid:1)(cid:19)(cid:13)(cid:11)
(cid:3)(cid:18)(cid:4)(cid:1)(cid:16)(cid:32)(cid:29)(cid:30)(cid:1)(cid:30)(cid:17)(cid:19)(cid:25)(cid:21)(cid:33)(cid:1)(cid:35)(cid:23)(cid:21)(cid:28)(cid:1)(cid:19)(cid:34)(cid:32)(cid:32)(cid:21)(cid:28)(cid:33)(cid:1)(cid:31)(cid:34)(cid:21)(cid:34)(cid:21)(cid:1)(cid:26)(cid:21)(cid:28)(cid:22)(cid:33)(cid:23)(cid:1)(cid:19)(cid:1)(cid:13)(cid:1)(cid:11)(cid:6)
Figure 4: Examples of admission control in AIFO.
queue length (denoted by c) and the target queue size (denoted by C)
to capture the discrepancy between arrival rate and departure rate.
The threshold of admission control is more aggressive when the
current queue length approaches the target queue size, i.e., when
C −c
C is small. We allocate a headroom to tolerate small bursts with
a parameter k. When the queue length is within the headroom
(i.e., c ≤ k · C), all packets are admitted. Accordingly, the differ-
ence between the queue length and the queue size is also scaled
1−k to account for the headroom. We separate c ≤ k · C and
by 1
C −c
W .quantile(pkt ) ≤ 1
C into two conditions at line 5 for clarity.
1−k
Mathematically, the first condition c ≤ k ·C is redundant. This is be-
C −c
cause when c ≤ k · C, then 1
C ≥ 1 ≥ W .quantile(pkt ) where
1−k
W .quantile(pkt ) estimates the quantile of pkt , and the packet is
always admitted.
It is important to note that C is not necessarily the physical size
of the FIFO queue. The physical size of a queue in a commodity
switch varies in a large range from tens of packets to hundreds or
even thousands of packets, depending on the switch ASIC. Despite
this capability, production networks tend to use shallow buffers
and limit the queue size in deployment for low latency. As such,
C can be configured to a smaller number than the physical queue
size, and thus we term it as the target (not physical) queue size in
the algorithm description.
For the spatial component, AIFO maintains a sliding window of
recently received packets and uses the quantile of the rank of the
arrival packet (W .quantile(pkt )) as the criteria. When the quantile
C −c
is no bigger than 1
C , the packet is admitted; otherwise, the
1−k
packet is dropped. The intuition is that after accounting for the
C −c
headroom with 1
C captures the amount of remaining
queue space, in terms of the percentage of the target queue length.
Only a subset of the following packets that can fit the remaining
queue space can be admitted. We find a rank r ∗
of which the quantile
is equal to the percentage representation of the remaining queue
space. We only admit the packets with ranks no bigger than r ∗
to
ensure that the admitted subset of packets are the low-rank packets
1−k ,
1
1−k
SIGCOMM ’21, August 23–28, 2021, Virtual Event, Netherlands
Zhuolong Yu, et al.
that should be admitted and can just fit the remaining queue space.
We maintain a sliding window to estimate the quantile of an arrival
packet based on the past packets.
The benefit of the two-dimensional approach is that the inaccu-
racy of one component can be compensated by the other component.
If the quantile estimation of the sliding window (the spatial com-
ponent) is a bit off, i.e., admitting extra packets, then the queue
C −c
length c would increase, making the quantile threshold 1
1−k
(the temporal component) more strict. And this corrects the spatial
component to use a smaller rank threshold.
C
We provide two examples to illustrate different cases in the
admission control. The examples are shown in Figure 4. The target
queue length C is 6 and the headroom parameter k is 1/6 (i.e., a
headroom of 6×1/6 = 1 packet). Suppose the quantile of the arriving
packet’s rank is 50%.
• Case 1: admit packet below quantile threshold. When the
C −c
current queue length c is 2, the quantile threshold is
C =
80%. This means a packet can be admitted if the quantile of the
packet’s rank is no bigger than 80%. Since the quantile of the
arriving packet’s rank is 50%, which is smaller than 80%, the
packet is admitted.
1
1−k
• Case 2: drop packet above quantile threshold. When the
C −c
current queue length c is 5, the quantile threshold is
C =
20%. This means a packet can be admitted if the quantile of the
packet’s rank is no bigger than 20%. Since the quantile of the
arriving packet’s rank is 50%, which is bigger than 20%, the packet
is dropped.
1
1−k
4.3 Theoretical Guarantee
We provide the theoretical guarantees for AIFO as follows. The
proofs of the theorems are in Appendix.
Packet departure rate and queue length. We consider n packet
ranks, denoted by r1  0 be the queue draining rate. We can prove properties for
the departure rate of each rank and the queue length.
Theorem 1. Assume
:= mini {λ1 + · · · +
λi ≥ γ }. When the algorithm reaches the stationary state, it has the
following properties on the packets departure rates:
λi > γ . Let n∗
i =1
(1) AIFO and PIFO has the same departure rate for each rank:
n
• for rank i  n∗
, its departure rate is λi ;
, its averaged departure rate is γ −
, its departure rate is zero.
(2) FIFO does not perform as the same as PIFO:
• for rank i ∈ {1, . . . , n}, its departure rate is
λin
i =1
λi ;

i  γ ;
n (1 − k)
1 − n∗+1
1 − n∗

• or bounded between
if
j ≤n∗ λj = γ .
(cid:3)
(cid:4)
C,
1 − n∗
n (1 − k)
C and
This theorem means that at the stationary state, the departure
rate of each packet rank with AIFO is the same as that with PIFO.
184
(cid:23)(cid:11)(cid:9)(cid:15)(cid:23)(cid:9)(cid:26)(cid:17)(cid:8)(cid:25)(cid:15)(cid:20)(cid:19)
(cid:7)(cid:23)(cid:8)(cid:12)(cid:12)(cid:15)(cid:9)
(cid:5)(cid:8)(cid:19)(cid:8)(cid:13)(cid:11)(cid:23)
(cid:23)(cid:11)(cid:8)(cid:10)(cid:1)(cid:22)(cid:26)(cid:11)(cid:26)(cid:11) (cid:17)(cid:11)(cid:19)(cid:13)(cid:25)(cid:14)
(cid:3)(cid:13)(cid:23)(cid:11)(cid:24)(cid:24) (cid:6)(cid:15)(cid:21)(cid:11)
(cid:27)(cid:23)(cid:15)(cid:25)(cid:11)(cid:1)(cid:22)(cid:26)(cid:11)(cid:26)(cid:11) (cid:17)(cid:11)(cid:19)(cid:13)(cid:25)(cid:14)
(cid:27)(cid:23)(cid:15)(cid:25)(cid:11)(cid:1)(cid:22)(cid:26)(cid:11)(cid:26)(cid:11) (cid:17)(cid:11)(cid:19)(cid:13)(cid:25)(cid:14)
(cid:21)(cid:16)(cid:25)
(cid:4)(cid:19)(cid:13)(cid:23)(cid:11)(cid:24)(cid:24) (cid:6)(cid:15)(cid:21)(cid:11)
(cid:23)(cid:11)(cid:8)(cid:10)(cid:1)(cid:22)(cid:26)(cid:11)(cid:26)(cid:11) (cid:17)(cid:11)(cid:19)(cid:13)(cid:25)(cid:14)(cid:2)
(cid:8)(cid:10)(cid:18)(cid:15)(cid:24)(cid:24)(cid:15)(cid:20)(cid:19)(cid:1)(cid:9)(cid:20)(cid:19)(cid:25)(cid:23)(cid:20)(cid:17)
Figure 5: Worker packets carry queue length information
from egress pipe to ingress pipe via recirculation. Normal
packets read queue lengths and make admission control de-
cisions at ingress pipe. Normal packets also write queue
lengths at egress pipe.
The behavior of FIFO is very different from those of AIFO and PIFO.
As FIFO does not do any scheduling, the departure rate of a rank
is proportional to the arrival rate of the rank. The theorem also
shows that with admission control, the queue length with AIFO is
slightly smaller than that of PIFO.
Admitted packet set. Consider a time interval from 0 to T and n
packet ranks. Let ai (t ) be the departure rate of rank i with AIFO,
and pi (t ) be the departure rate of rank i with PIFO. We can prove
properties for the difference between the departure packets with
AIFO and those with PIFO.
Theorem 2. Adopt the assumption in Theorem 1. Suppose the
systems are initialized at time 0, and after time t0 both PIFO and
AIFO reach and stay at their stationary states. Then for the gap