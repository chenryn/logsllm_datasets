### Ransom Note and Encryption Process

**Ransom Note Storage and Decryption:**
- The ransom note is stored in an encrypted form as a stack string. It is decrypted using a custom algorithm.

**Registry Key Creation:**
- The process creates a registry key named `HKCU\SOFTWARE\2ED873D4E5389C` with the following permissions:
  - `0x80000001 = HKEY_CURRENT_USER`
  - `0xF003F = KEY_ALL_ACCESS`

**Registry Value Search:**
- LockBit searches for two registry values, "Private" and "Public," under the created registry key. These values do not exist at this time.

**Session Key Generation:**
- The malware sends the "[+] Generate session keys" message to the hidden window.
- It generates a public ECC (Curve25519) key and a private ECC (Curve25519) key.
- The file generates 32 random bytes using the `BcryptGenRandom` function.
- The `sub_4300C0` function implements a Curve25519 wrapper to generate a session ECC public key.
- The random byte generation process is repeated.
- The same Curve25519 wrapper is used to transform the buffer.

**Master ECC Public Key:**
- The executable embeds an ECC public key, referred to as the Master ECC public key.
- This key is used to generate a shared secret (32-byte value) based on the Curve25519 algorithm.
- The Master ECC public key is utilized to encrypt the session ECC private key.

**Confirmation with capa Tool:**
- The `capa` tool confirms that the function is used to encrypt data using Curve25519.

**Registry Value Storage:**
- The encrypted session ECC private key is stored in the `HKCU\Software\2ED873D4E5389C\Private` registry value.
- The session ECC public key is stored in the `HKCU\Software\2ED873D4E5389C\Public` registry value.

**I/O Completion Ports for Encryption:**
- The malware uses I/O completion ports to enhance encryption speed.
- It creates an I/O completion object by calling the `NtCreateIoCompletion` API with `0x1F0003 = IO_COMPLETION_ALL_ACCESS`.
- The binary creates 2 threads (based on the number of processors/cores) to handle file encryption.
- The thread affinity mask is set to 1 using the `ZwSetInformationThread` function with `0x4 = ThreadAffinityMask`.

**Drive and File Enumeration:**
- The `GetLogicalDrives` function is used to retrieve available disk drives.
- The `GetDriveTypeW` routine determines the drive type.
- The process targets drives of types 2 (DRIVE_REMOVABLE), 3 (DRIVE_FIXED), and 6 (DRIVE_RAMDISK).
- For each targeted drive, a new thread is created to traverse and locate files for encryption.

**File Handling:**
- The `CreateFileW` function creates a file named `2ED873D4.lock` with specific flags.
- The `SHEmptyRecycleBinW` function empties the Recycle Bin on the drive.
- The `GetDiskFreeSpaceW` and `GetDiskFreeSpaceExW` APIs retrieve information about the total and free space on the drive.
- The user interface language for the current thread is set to "English - United States."
- The numeric values are converted into a string representing the size in bytes, kilobytes, megabytes, or gigabytes.
- The drive name and size information are sent to the hidden window via `SendMessageW`.
- The `FindFirstFileExW` API enumerates the drive, skipping specific directories and files.
- The `PathFindExtensionW` routine extracts file extensions.
- The `ZwCreateFile` function opens the targeted file with specific attributes.
- The targeted file is bound to the I/O completion port using the `NtSetInformationFile` function.
- The `NtQueryInformationFile` routine queries file information.
- The `NtSetInformationFile` function sets end-of-file information for the file.

**File Encryption:**
- LockBit only encrypts the first 4KB of the file using the `ZwReadFile` API.
- The `GetFileAttributesW` function retrieves file system attributes for the ransom note `Restore-My-Files.txt`.
- The ransomware creates the ransom note using the `ZwCreateFile` function and binds it to the I/O completion port.
- The note is populated using the `ZwWriteFile` routine.
- The `.lock` file is deleted after the drive enumeration is complete.

**Service and Process Management:**
- The malware retrieves the LUID for the `SeDebugPrivilege` privilege using the `LookupPrivilegeValueA` routine.
- The privileges of the access token are adjusted to include the `SeDebugPrivilege` privilege using the `ZwAdjustPrivilegesToken` function.
- The `OpenSCManagerA` function establishes a connection to the service control manager.
- A targeted service is opened using the `OpenServiceA` API.
- The `QueryServiceStatusEx` function extracts the current status of the service.
- The `EnumDependentServicesA` routine retrieves the name and status of dependent services.
- The `ControlService` function stops each chosen service.
- A confirmation message is sent to the hidden window.
- The ransomware takes a snapshot of all processes in the system.
- Information about the first process from the snapshot is retrieved using the `Process32First` function.
- The malware removes the extension of the process name before comparison with the targeted list.
- The process enumeration continues using the `Process32Next` routine.
- The `OpenProcess` function opens a targeted process.
- The `NtTerminateProcess` API kills the process.

**COM Library Initialization and Volume Shadow Copies:**
- The COM library is initialized for apartment threading using the `CoInitializeEx` function.
- The ransomware deletes all volume shadow copies on the system using the `ShellExecuteEx` function.
- Multiple processes are created to delete shadow copies and Windows logs.
- The following commands are executed:
  - `cmd.exe /c vssadmin Delete Shadows /All /Quiet` – delete all shadow copies
  - `cmd.exe /c bcdedit /set {default} recoveryenabled No` – disable automatic repair
  - `cmd.exe c bcdedit set {default} bootstatuspolicy ignoreallfailures` – ignore errors in case of a failed boot/shutdown/checkpoint
  - `cmd.exe /c wmic SHADOWCOPY /nointeractive` – invalid syntax
  - `cmd.exe /c wevtutil cl security` – clear security log
  - `cmd.exe /c wevtutil cl system` – clear system log
  - `cmd.exe /c wevtutil cl application` – clear application log
- A message is sent to the hidden window indicating the completion of volume shadow copy and event log cleanup.

**File Encryption Details:**
- The `NtRemoveIoCompletion` function waits for at least one file to be available for encryption.
- Specific file extensions and directories are skipped during the encryption process.
- The malware uses multiple `aeskeygenassist` operations to assist in AES round key generation.
- The file content is encrypted using the AES128 algorithm, with `aesenc` instructions performing one round of AES encryption.

---

This optimized version provides a clearer and more professional structure, making the technical details more accessible and coherent.