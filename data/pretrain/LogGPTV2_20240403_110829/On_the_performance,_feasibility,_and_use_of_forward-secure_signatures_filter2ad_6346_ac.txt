cability of forward-secure signatures for desired applications. We
note that it may also be interesting to evaluate performance of com-
bined speciﬁc and generic schemes, e.g., applying the sum con-
struction on top of the Itkis-Reyzin construction from [21] for a
smaller size.
2.7 Other Related Cryptographic Primitives
Forward-security was ﬁrst considered for key-exchange proto-
cols [19, 14]. Forward-security for private-key primitives (pseudo-
random generators, authentication, and encryption) was proposed
in [5], and for public-key encryption in [9].
Several extended models for forward-secure signatures have been
proposed. These include forward-secure group signature schemes [35],
key insulated signatures [15, 16], and intrusion resilient signature
schemes [22], combining the beneﬁts of forward-secure and key-
insulated signatures. In particular, intrusion resilient schemes have
the advantage that if the key is exposed for some number of time
periods, signatures in all other time periods (not just the past ones)
are still valid. This is achieved by distributing the signer to two
modules, one for signing, and one is a base which is needed every
time an update is performed. Security for all compromised time
periods is maintained as long as the base and signer modules are
not both compromised in the same time period (if they are, then
only forward-security is guaranteed). Studying the feasibility of
this distributed model is an interesting problem for future work.
3. PERFORMANCE EVALUATION
Balancing the tradeoffs of digital signature performance in order
to select an optimal set of parameters is not always a straightfor-
ward task. In this section, we present several metrics for formal-
izing these tradeoffs between different aspects of signature perfor-
mance for both traditional and forward-secure signature schemes.
To our knowledge, no previous work has utilized such a technique
capable of evaluating signature schemes’ performance over the en-
tire spectrum of uses. We then evaluate the performance of sig-
nature schemes with regard to these metrics using benchmarks of
several of the FSS schemes introduced in the previous section, con-
sider where speciﬁc uses of digital signatures lie in the space de-
ﬁned by our metrics, and explore which FSS conﬁgurations are op-
timal for these situations.
3.1 Performance Metrics
Key generation (or update) time, signature time, and veriﬁcation
time are all indicators of a signature scheme’s performance. How-
ever, no one aspect alone is enough to judge whether one signature
scheme is better than another for all situations. Many earlier per-
formance comparisons take an informal approach at resolving this
problem by ﬁrst looking at a speciﬁc situation and then picking
which operation seems to be most important for it [38]. This works
well for simple situations but does not help when it is unclear which
operation is most important or in seeing the entire picture with re-
gards to performance tradeoffs.
Instead of taking a similar approach for our analysis, we look
at what characteristics make a given environment using signatures
unique, and how to express this as a set of parameters. We de-
ﬁne several metrics using these parameters which compute a sin-
gle amortized cost for the performance, allowing us to make direct
comparisons between schemes for any given situation. Using this
evaluation framework, we are able to not only look at speciﬁc cases
as previous performance studies have done, but also at how the per-
formance changes over the entire range of parameters, and how
different signature schemes perform in this broader picture.
3.1.1 Traditional Signature Schemes
When examining common uses of digital signatures, we see that
what makes each situation unique is the frequency at which each
of the three basic operations must be performed. A Certiﬁcate Au-
thority (CA), for example, will generate a single key. It will then
use that key to produce hundreds or thousands of signatures on cer-
tiﬁcates, and each of those signatures may be veriﬁed thousands of
times as the certiﬁcates are used. An electronic checkbook system,
in contrast, will require a key generation for every checkbook is-
sued. Each checkbook (key) can then produce hundreds of checks
(signatures), each of which will likely only be veriﬁed once, when
“cashed” at the issuing bank. Below, we express these relationships
between key generation, signature, and veriﬁcation rates (G, S, and
V respectively) through two ratios, R1 and R2. These ratios allow
us to combine the individual costs (Cg, Cs, and Cv respectively)
proportionally to arrive at a single cost for a given scheme given a
particular mix of key generations, signatures and veriﬁcations.
We begin by examining the tradeoff in the cost incurred by the
signer versus the cost incurred by the veriﬁer(s). One way to ex-
press both the signer’s and veriﬁer’s costs in a single value is to
“tax” each veriﬁcation for its share of the work performed by the
signer in producing the signature. Looking at the scenario of a
CA as described in the previous paragraph, we see that including a
share of the signing cost adds very little to the cost of any one ver-
iﬁcation since there are so many veriﬁcations. On the other hand,
another common use for signatures is during the session negotia-
tion of protocols such as SSL [12]. Here, a signature is produced,
veriﬁed once, and then forgotten. The entire cost of the signature’s
generation is now associated with that single veriﬁcation as op-
posed to thousands of veriﬁcations as before, and its cost is far
more important to the overall performance. In the middle of these
two extremes lie usages such as digitally signing contracts. Here,
the cost of signing may be spread out over a few veriﬁcations, re-
ducing its impact but not making it possible to ignore it altogether.
R1 and the metric M1 express this relationship formally. R1 is
the ratio between signatures and veriﬁcations for the workload in
question. M1 produces a weighted veriﬁcation cost that incorpo-
rates an equal share of the cost of signing into each veriﬁcation.
V
S
R1 =
M1 = Cv +
R2 =
M2 = Cs +
M3 = Cv +
S
G
· Cs
1
R1
· Cg
· Cs +
1
R2
1
R1
1
R1R2
· Cg
(1)
(2)
(3)
(4)
(5)
On the signer’s side, a similar tradeoff exists between the “of-
ﬂine” cost of key generation, and the “online” cost of generating
signatures. Here, it is useful to look at amortizing the shared key
generation costs over each signature produced. A busy SSL server
may receive millions of connections over the lifetime of its private
key. If each of these secure connections requires a signature to be
produced, then the share of key generation that should be attributed
to each signature approaches zero. On the opposite end of the spec-
trum, if the use of one-time signatures [13, 7] is required, then by
deﬁnition each key may only be used to produce a single signature
and then must be destroyed. The second ratio and metric R2 and
M2 express this relationship.
Neither of these metrics alone is sufﬁcient, however. The cost of
a signature used in M1 must take into account the amortized key
generation costs from M2 in order to accurately reﬂect the total
cost. We deﬁne one ﬁnal metric, M3, which combines the previ-
ous two metrics to give a weighted cost of veriﬁcation incorporat-
ing both the balance between veriﬁer and signer and the balance
between the signer’s “online” (signing) and “ofﬂine” (key genera-
tion) costs. This metric is parameterized by both R1 and R2, and
gives us a single value with which to compare signature schemes.
3.1.2 Forward-Secure Signature Schemes
Turning now to forward-secure signature schemes, a fourth op-
eration, key update, is added to the three operations present in tra-
ditional schemes. Like key generation, update is an “ofﬂine” cost,
necessary before a signature can be performed but not actually part
Short-Term Security
keygen (Cg)
sign (Cs)
verify (Cv)
RSA
1024
352
10.5
0.540
DSA
1024
5,500
4.36
5.35
Long-Term Security
RSA
1536
862
27.6
1.03
DSA
1536
58,500
8.78
11.1
keygen (Cg)
sign (Cs)
verify (Cv)
ECDSA
t163k1
3.68
3.75
7.61
ECDSA
t223k1
6.72
6.81
13.6
Table 1: Base signature scheme performance, in milliseconds.
of the signing process. Key generation can be viewed as a special
case of update, going from a null private key to the initial private
key for period 0. Therefore, we can combine key generation and
update into a single parameter U (with cost Cu), and use this in
place of G and Cg in our metrics. M1, which was not inﬂuenced
by G, remains the same. The modiﬁed R2, M2, R3, and M3 we
denote with a star:
R∗
M∗
2 = Cs +
2 =
S
U
(6)
(7)
· Cu
· Cs +
1
R∗
2
1
R1
1
· Cu
M∗
2
R1R∗
3 = Cv +
(8)
The number of signatures per key generation (R2) still has im-
portance with forward-secure schemes, but at a higher level than
what these metrics are designed to measure. For FSS (as well as
traditional) signature schemes, R2 also expresses the administra-
tive overhead of the key for certifying and distributing the public
key. As this cost is highly situation dependent we do not attempt to
quantify it, but simply note that for both traditional and forward-
secure schemes, a higher value of R2 indicates that the cost of
making the public key known and trusted can be amortized.
3.2 Experimental Setup
Having constructed a framework for comparing the performance
of the signature schemes implemented in this paper, the next step
in our evaluation is to ﬁll in the needed values for Cg, Cu, Cs,
and Cv. We use a simple micro-benchmark built with libfss
called fssbench to measure these costs. For each conﬁgura-
tion, fssbench times the initial generation of a combined pub-
lic/private key followed by the three periodic operations during
each period of the private key’s lifetime.3 This is repeated with
a different initial random seed used in key generation a total of ten
times for each conﬁguration. The results over all ten runs are aver-
aged, and the results for multi-period operations are averaged again
over the range of periods examined in order to provide a single av-
erage cost for each operation. For example, when comparing the
performance for a situation requiring a maximum period of 512,
only the ﬁrst 512 updates of a 65535 period key would be included
in the averages. Because of this, for keys with very large maximum
periods we are able to stop benchmarking once this maximum pe-
riod is reached.
We benchmark four of the generic FSS constructions described
in Section 2: Bellare-Miner Tree (BMTree), Iterated Sum (ISum),
3fssbench measures a great deal more; for conciseness, we limit
our discussion to those features of fssbench used in this study.
(a) M1.
(a) M3.
(b) M2.
(b) Lowest-cost scheme for M3.
Figure 1: Performance of long-term traditional signature
schemes.
Figure 2: Performance of long-term traditional signature
schemes (cont.).
Product (Prod), and MMM. In addition, we consider three base al-
gorithms: RSA, DSA [29], and Elliptic Curve DSA (ECDSA).
The benchmarks were performed on a 1.5GHz Pentium 4 with
1GB of memory running FreeBSD 4.8. A development snapshot
of OpenSSL 0.9.8 from April, 2003 was used for the cryptographic
support library.4 Both libfss and OpenSSL were built with com-
piler optimizations enabled.
3.3 Microbenchmark Results
3.3.1 Base Algorithm Performance
We begin with an examination of the traditional signature schemes