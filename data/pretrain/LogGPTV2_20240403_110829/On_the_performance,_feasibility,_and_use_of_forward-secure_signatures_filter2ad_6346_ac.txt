### 2.7 Other Related Cryptographic Primitives

Forward security was first introduced for key-exchange protocols [19, 14]. Later, it was extended to private-key primitives such as pseudorandom generators, authentication, and encryption [5], and subsequently to public-key encryption [9].

Several extended models for forward-secure signatures have been proposed, including forward-secure group signature schemes [35], key-insulated signatures [15, 16], and intrusion-resilient signature schemes [22]. Intrusion-resilient schemes combine the benefits of forward-secure and key-insulated signatures. Specifically, if a key is exposed for a certain number of time periods, signatures in all other time periods (not just past ones) remain valid. This is achieved by distributing the signer into two modules: one for signing and another for the base, which is required for each update. Security is maintained for all compromised time periods as long as both modules are not compromised in the same period. If both are compromised, only forward security is guaranteed. Investigating the feasibility of this distributed model is an interesting area for future research.

### 3. Performance Evaluation

Balancing the trade-offs in digital signature performance to select optimal parameters is not always straightforward. In this section, we present several metrics to formalize these trade-offs for both traditional and forward-secure signature schemes. To our knowledge, no previous work has utilized such a comprehensive technique to evaluate signature schemes' performance across their entire spectrum of uses. We then use these metrics to evaluate the performance of several forward-secure signature (FSS) schemes introduced in the previous section, determine where specific uses of digital signatures lie within the space defined by our metrics, and explore which FSS configurations are optimal for these situations.

#### 3.1 Performance Metrics

Key generation (or update) time, signature time, and verification time are all indicators of a signature scheme's performance. However, no single aspect is sufficient to judge the overall performance of a signature scheme in all situations. Many earlier performance comparisons take an informal approach by focusing on a specific situation and then prioritizing the most important operation [38]. While this works well for simple scenarios, it does not provide a complete picture of performance trade-offs.

Instead, we analyze the unique characteristics of different environments using signatures and express these as a set of parameters. We define several metrics that compute a single amortized cost for performance, allowing direct comparisons between schemes for any given situation. Using this evaluation framework, we can examine specific cases as well as how performance changes over the entire range of parameters, providing a broader perspective on the performance of different signature schemes.

##### 3.1.1 Traditional Signature Schemes

When examining common uses of digital signatures, the frequency at which key generation, signature, and verification operations must be performed makes each situation unique. For example, a Certificate Authority (CA) will generate a single key and use it to produce hundreds or thousands of signatures on certificates, each of which may be verified thousands of times. In contrast, an electronic checkbook system requires a new key for each checkbook issued, with each checkbook (key) producing hundreds of checks (signatures), each verified once when "cashed" at the issuing bank.

We express these relationships between key generation, signature, and verification rates (G, S, and V respectively) through two ratios, R1 and R2. These ratios allow us to combine the individual costs (Cg, Cs, and Cv respectively) proportionally to arrive at a single cost for a given scheme given a particular mix of key generations, signatures, and verifications.

First, we examine the trade-off between the cost incurred by the signer and the cost incurred by the verifier(s). One way to express both costs in a single value is to "tax" each verification for its share of the work performed by the signer in producing the signature. For a CA, the inclusion of a share of the signing cost adds very little to the cost of any one verification due to the high number of verifications. Conversely, in session negotiation protocols like SSL [12], a signature is produced, verified once, and then forgotten. The entire cost of the signature's generation is now associated with that single verification, making its cost far more significant. For digitally signed contracts, the cost of signing may be spread over a few verifications, reducing its impact but not making it negligible.

R1 and the metric M1 express this relationship formally. R1 is the ratio between signatures and verifications for the workload in question. M1 produces a weighted verification cost that incorporates an equal share of the cost of signing into each verification.

\[
R1 = \frac{S}{V}
\]
\[
M1 = Cv + \frac{Cs}{R1}
\]

On the signer's side, a similar trade-off exists between the "offline" cost of key generation and the "online" cost of generating signatures. It is useful to amortize the shared key generation costs over each signature produced. For a busy SSL server, the share of key generation attributed to each signature approaches zero. Conversely, for one-time signatures [13, 7], each key is used for a single signature and then destroyed. The second ratio and metric R2 and M2 express this relationship.

\[
R2 = \frac{S}{G}
\]
\[
M2 = Cs + \frac{Cg}{R2}
\]

Neither of these metrics alone is sufficient. The cost of a signature used in M1 must account for the amortized key generation costs from M2 to accurately reflect the total cost. We define a final metric, M3, which combines the previous two metrics to give a weighted cost of verification incorporating both the balance between verifier and signer and the balance between the signer’s "online" (signing) and "offline" (key generation) costs.

\[
M3 = Cv + \frac{Cs}{R1} + \frac{Cg}{R1R2}
\]

##### 3.1.2 Forward-Secure Signature Schemes

For forward-secure signature schemes, a fourth operation, key update, is added to the three operations present in traditional schemes. Like key generation, update is an "offline" cost, necessary before a signature can be performed but not part of the signing process. Key generation can be viewed as a special case of update, going from a null private key to the initial private key for period 0. Therefore, we can combine key generation and update into a single parameter U (with cost Cu), and use this in place of G and Cg in our metrics. M1 remains the same, while the modified R2, M2, R3, and M3 are denoted with a star:

\[
R2^* = \frac{S}{U}
\]
\[
M2^* = Cs + \frac{Cu}{R2^*}
\]
\[
M3^* = Cv + \frac{Cs}{R1} + \frac{Cu}{R1R2^*}
\]

The number of signatures per key generation (R2) still has importance in forward-secure schemes, but at a higher level than what these metrics are designed to measure. For both traditional and forward-secure schemes, a higher value of R2 indicates that the cost of making the public key known and trusted can be amortized.

### 3.2 Experimental Setup

To compare the performance of the signature schemes implemented in this paper, we use a simple micro-benchmark built with libfss called fssbench to measure the costs of key generation, key update, signature, and verification. For each configuration, fssbench times the initial generation of a combined public/private key followed by the three periodic operations during each period of the private key’s lifetime. This is repeated with a different initial random seed used in key generation a total of ten times for each configuration. The results over all ten runs are averaged, and the results for multi-period operations are averaged again over the range of periods examined to provide a single average cost for each operation.

We benchmark four generic FSS constructions: Bellare-Miner Tree (BMTree), Iterated Sum (ISum), Product (Prod), and MMM. Additionally, we consider three base algorithms: RSA, DSA [29], and Elliptic Curve DSA (ECDSA).

The benchmarks were performed on a 1.5GHz Pentium 4 with 1GB of memory running FreeBSD 4.8. A development snapshot of OpenSSL 0.9.8 from April 2003 was used for the cryptographic support library. Both libfss and OpenSSL were built with compiler optimizations enabled.

### 3.3 Microbenchmark Results

#### 3.3.1 Base Algorithm Performance

We begin with an examination of the traditional signature schemes.