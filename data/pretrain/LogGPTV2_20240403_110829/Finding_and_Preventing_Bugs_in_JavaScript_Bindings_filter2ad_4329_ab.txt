spect it and, if it is empty, throw an exception back to JavaScript,
or (2) use the V8 function that converts wrapped to unwrapped
but hard crashes when the wrapper is empty. The second choice
is easier, so real bindings often follow this (unsafe) pattern.
Violating JavaScript’s type-safety. An attacker could use the
following JavaScript code to trigger a type-safety violation in
the Blob bindings:
1 var evilarr = [3, 13, 37];
2 var blob = new Blob(evilarr);
On line two, the attacker calls the Blob constructor with
an array of numbers. This kicks off a call to the binding
layer blobConstr constructor, which checks that it has re-
ceived a single argument of type Array. Then, blobConstr
extracts the ﬁrst element of the evilarr array and casts
it
to a String using the As method (line 23):
blobImpl->AddV8StringPart(part.As()). Since
evilarr’s ﬁrst element is a Number and not a String, the pro-
gram segfaults when blobConstr tries to use the incorrectly
cast value. Crashes are not the only possible ramiﬁcations of
type-safety errors, however. §3 describes an exploit for Node.js
that leverages a function that does not type check to perform an
out-of-bounds write. Type confusion bugs can also enable other
kinds of attacks (e.g., remote code execution) [16–19, 38].
These attacks are a direct result of violations of (a certain
notion of) JavaScript’s type-safety. JavaScript does not have
a static type system and does not satisfy the standard notion
of type-safety [79]. Still, it satisﬁes a weaker notion of dy-
namic type-safety: JavaScript code cannot misuse a value by
reinterpreting its underlying type representation—e.g., numbers
cannot be reinterpreted and used as functions. If code tries to
misuse a number as a function, for example, the JavaScript
engine will raise a TypeError. This weak type-safety protects
JavaScript from, say, accidently reading data beyond an array’s
bounds or calling into unexpected or unsafe parts of the runtime.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
Bugs that violate type-safety appear in real binding code; they
are common because neither JavaScript nor C++ nor V8 help
programmers use correct types. JavaScript, by design, does not
employ any static type checking. C++ is statically typed, but this
applies only to C++ code—the type checking does not extend
to the JavaScript code invoking the binding functions. Finally,
V8 gives all values coming from JavaScript the same Value
type, and the C++ binding-layer developer must determine, at
run time, whether objects are Objects or Arrays or Uint32s.
If the developer forgets to check a Value’s type before using or
casting it, they can introduce type confusion vulnerabilities.
Violating JavaScript’s memory-safety. There are more con-
cerns with our Blob implementation. The Blob slice func-
tion, for example, could introduce a memory bug. In order to
return a subset Blob, slice must access the receiver Blob’s
underlying binary data—a byte array. In accessing the array,
the slice function must be wary to read only the data that is
within bounds. The starting index and length are supplied by
user JavaScript, however; if the slice function checks bounds
before calling JavaScript methods that might invalidate invari-
ants, it could introduce a memory bug (e.g., an arbitrary write
vulnerability). Memory-safety bugs can be used to exﬁltrate
sensitive information such as web server TLS keys [28].
These vulnerabilities are not present in JavaScript without
bindings: JavaScript is a garbage collected, memory-safe lan-
guage, so it can only access memory that has already been ini-
tialized by the underlying engine. Furthermore, JavaScript code
may only access memory in a way that preserves abstraction—
for example, it should not be able to inspect local variables
as encapsulated by closures [43, 64]. C++, in contrast, is not
memory safe—and bugs in binding code make it possible for
JavaScript code to violate JavaScript’s memory-safety as well.
Most binding layer memory errors arise because JavaScript
values adversely affect the data- or control-ﬂow of binding func-
tions that perform memory operations like memcpy or delete.
These bugs are not typically caused by developers forgetting
to validate incoming JavaScript values; in fact, most binding
functions check arguments in some capacity. Rather, memory
bugs often arise because developers misuse V8 functions that
implicitly upcall back into JavaScript. Attackers may change in-
variants during these upcalls; if developers unwittingly assume
that invariants are still true, they may introduce vulnerabili-
ties. For example, a JavaScript array indexing operation in the
binding layer sometimes triggers an upcall into user JavaScript;
attackers can use this upcall to shorten the length of the array.
If a binding code developer does not re-check the length in-
variant and instead iterates blithely forward, they introduce an
out-of-bounds memory read vulnerability.
The challenge of writing memory-safe binding code is anal-
ogous to the problem of writing memory-safe concurrent C++
code. C++ binding code upcalling into JavaScript, which can,
in turn, call into C++ binding code (and so on), is a form of
cooperative concurrent programming. It is no surprise that con-
current (JavaScript) code can change shared memory and cause
concurrent C++ code to thereafter violate memory-safety. Un-
fortunately, the V8 API is “deceptive”: it does not make this
concurrency explicit; it does not make it clear that certain API
calls may trigger upcalls into JavaScript. We list the categories
of “deceptive” upcalling functions in Table 2.
Detailed overview of V8-based bindings. For completeness—
and because the V8 documentation is somewhat limited—we
explain the implementation of blobConstr in full; the uninter-
ested reader can skip this paragraph, but may ﬁnd it useful as a
reference in later sections. As with all binding-layer functions,
V8 calls blobConstr with a callback-info object that contains
the JavaScript receiver (args.This()) and the list of JavaScript
function arguments (args[i]). The receiver is an instance of
v8::Object, the class that V8 uses to represent JavaScript ob-
jects, while the arguments are v8::Values; the v8::Value su-
per class is used to represent arbitrary JavaScript values, which
may be v8::Objects, v8::Numbers, etc. Lines 8–10 ensure
that our binding-layer function is called with a JavaScript ar-
ray argument. If any of these checks fail, the function raises
a JavaScript exception and returns early; V8 will throw this
exception upon returning control ﬂow to JavaScript. Otherwise,
the binding function creates a new C++ Blob instance that will
be used to store the binary data (line 14). This object, blobImpl,
serves as a backing object for the newly created JavaScript ob-
ject referenced by args.This(). Speciﬁcally, the C++ Blob
constructor uses the V8 API to store a pointer to blobImpl
in one of the internal ﬁelds of the receiver object; this ﬁeld
is not accessible to JavaScript. The internal ﬁeld ensures that
whenever JavaScript calls a binding-layer Blob function, the
bindings can retrieve the underlying C++ object (blobImpl)
from the JavaScript object (args.This()). It also allows bind-
ings to register a garbage collection (GC) callback with the V8
engine. When the V8 garbage collector collects the JavaScript
Blob object, it will call the registered callback to free the cor-
responding C++ object. After allocating the C++ Blob object,
blobConstr iterates over its array argument and adds the in-
dividual string elements to the blob (lines 17–23). Lastly, it
returns the corresponding JavaScript object (line 27) that V8, in
turn, hands off to the JavaScript code that called the constructor.
Summary. The bugs that our checkers target (§3) and our API
aims to prevent (§5) are patterns caused by violations of three
fundamental JavaScript properties: crash-, type-, and memory-
safety. These violations come up repeatedly in the JavaScript
systems that we analyze; in fact, our checkers automatically
identiﬁed 81 real bugs. In the next section, we walk through a
number of bugs, the automatic checkers that detect them, and
the proof-of-concept attacks that trigger them. Afterwards, in
§4, we contextualize these bugs and their security implications
by describing the attacker models of the various systems that
we analyze.
3 Static Checkers for Finding and Exploiting
Vulnerabilities
In this section, we present static checkers for binding code
and proof-of-concept exploits for the bugs that they ﬁnd. The
checkers, which are tailored for the systems on which they run
(e.g., Node.js or PDFium), analyze a parse tree of the program
source and point out potential errors. Then, as an attacker might,
562
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
Feature
Getters, setters
Prototypes
Description
Untrusted JavaScript code can deﬁne a custom function to be called when an object
property is set/get.
Example
object->Get(context, i)
JavaScript code can poison global prototypes such as Array.prototype and
Object.prototype which are then called on property access. This is especially useful
when getters/setters cannot be deﬁned.
array->Set(context, i)
toPrimitive, toString
Proxy traps
JavaScript code can deﬁne a function that is called when the JavaScript engine tries to
implicitly cast an object to a primitive value or String.
JavaScript code can pass in JavaScript proxies instead of objects. This allows it to trap
operations such as set, get, delete, hasOwnProperty, etc.
val->Uint32Value()
obj->HasOwnProperty(context, prop)
Table 2—Tricky JavaScript edge cases that can form the basis of exploits. All of these cases can result in upcalls to user-deﬁned JavaScript.
we create JavaScript that triggers the binding bugs. This process
demonstrates that:
1. Binding code is an exploitable weakness in JavaScript
runtime systems. We write ﬁve checkers that identify 81
exploitable bugs (with 30 false positives) in binding code,
including 3 use-after-free errors in PDFium. Chrome takes
these errors seriously: we were awareded $6,000 in boun-
ties for two UAF error reports [24, 25].
2. Binding code is easy to exploit. The static checkers in this
section are at most a hundred lines long, and we typically
create them in a day or two. In fact, after examining the
V8 documentation for a couple days, we believe that at-
tackers or developers could easily conceptualize and create
a checker. Once our checkers identify vulnerabilities, it
often takes fewer than a hundred lines to exploit them.
Checker implementation. We implement the checkers in
μchex [6], a language-agnostic static checking system, because
it allows us to build small and extensible checkers. Our checkers
are tiny since they ignore most of the language that they check.
Instead, they only parse and analyze portions of the language
relevant to the checker properties themselves. The simplicity
of the framework allows us to prototype quickly and to adapt
checkers from one runtime system to another with little work;
for example, the Node.js and Chrome invocations of one of our
checkers differ by one line of code. Finally, like many static
systems, our checkers are unsound: they do not guarantee the
absence of bugs in any system that they check.
Checker results. Our checkers ﬂag binding layer functions that
unsafely use JavaScript engine APIs—V8 and shims around
V8. We run the checkers on a Node.js master version from
early September 2016 [74] and Chrome version 56.0.2915.0
(Developer build) [13]. We do not check test- and debugging-
related ﬁles. Additionally we omit any ﬁles that have been
removed (e.g., due to refactoring) from more recent versions
of the runtimes—Node.js 7.7.4 and Chrome 56.0.2924.87—
to simplify the bug reporting process. For each of the checker
results, we manually inspected the ﬂagged code and categorized
the results. Some ﬂags were clear false positives (e.g., due to
our simple intra-procedural analysis). Others we conﬁrmed
by writing exploits; though most of the exploited bugs were
in binding functions directly callable by JavaScript, in some
cases we exploited helper functions that are only called by other
binding code (see below) to demonstrate feasibility. Finally, we
marked some results suspicious: we believe many of these to
be exploitable, but since we do not have exploits conﬁrming
them, we count them separately. The extended version of this
paper [5] will contain the updated classiﬁcation of these results
as we explore them in more detail.
We outline the results in Table 4 and the checkers that ﬁnd
them in Table 3. The checkers look for three different classes
of errors. First, violations of crash-safety: one checker identi-
ﬁes hard-crashing asserts that depend on user JavaScript, and
the other ﬂags hard-crashing conversions from V8 types. Next,
type-safety: a checker ﬂags variables that are cast without being
type-checked. Finally, memory-safety: one checker ﬂags mem-
ory operations that are affected by upcalls back into JavaScript,
while the other ﬂags instances where JavaScript can force col-
lection of a variable still used by C++. Our reports and exploits
are not intended as worst case scenarios for how attackers may
exploit bugs. For example, while we crash unchecked type bugs,
attackers may instead leverage them to carry out remote code
execution attacks. We provide links to all conﬁrmed bugs in the
extended version of this paper [5].
3.1 Crash-Safety Violations
We write two basic checkers that ﬂag violations of JavaScript’s
crash-safety in the binding layer: one checker identiﬁes hard-
crashing Node.js asserts that depend on user JavaScript, and the
other ﬂags hard-crashing conversions from V8 types. We adapt
the latter hard-crashing conversion checker slightly for each of
the systems that we check (Node.js and Chrome’s extension
system, PDFium, and Blink), a process that we describe further
in the extended version of this paper. We run the checkers on
the systems’ source code and craft JavaScript to trigger the bugs
that the checkers detect.
Hard-crashing checks on user-supplied input. This checker
identiﬁes instances in Node.js where hard-crashing checks (e.g.,
CHECK) depend on user-supplied JavaScript input. For example,
the checker ﬂags the following binding code bug [93]:
/* src/node_buffer.cc */
245 size_t Length(Local val) {
246
CHECK(val->IsUint8Array());
Local ui = val.As();
return ui->ByteLength();
247
248
249 }
563
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
Checker Type
Crash
Problem
Attacker can trigger hard crashing asserts
Attacker can trigger hard crashing conversions
Attacker can trigger bad cast
Crash
Types
Memory
Memory
Example
CHECK(js)
js->Get(..).ToLocalChecked()
notString.As()
Attacker can alter memory operations that depend on implicitly casting functions
memcpy(js->ToUint32()...)
Attacker can free object still being used by C++
ptr*; js->ToUint32(); use(ptr)
Table 3—The binding code bugs that our checkers identify.
Checker
Hard crash
Type
Memory
Total
System
Node.js
PDFium
PDFium (lib)
Extensions
Blink
All
Node.js
PDFium
Extensions
Blink
All
Node.js
PDFium
All
Flagged
68
13
39
2
6
128
8
0
2
3
13
5
9
14
155
Exploited
37
3
29
0
1
70
4
0
0
0
4
4
3
7
81
Suspicious
19