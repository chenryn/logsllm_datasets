To collect data from the Alexa top-100K websites, we ﬁrst
start with the 20K website crawl described in Section IV-A2,
and follow the same collection procedure for the remaining
80K websites not included in that measurement. Out of this
additional 80K, we successfully visit 71,112 websites. The
results provide an updated view of ﬁngerprinting deploy-
ment following the large-scale 2016 study by Englehardt and
Narayanan [54]. On a high-level we ﬁnd: (1) the deployment
of ﬁngerprinting is still growing—reaching over a quarter of
the Alexa top-10K sites, (2) ﬁngerprinting is almost twice as
prevalent on news sites than in any other category of site,
(3) ﬁngerprinting is used for both anti-ad fraud and potential
cross-site tracking.
A. Over a quarter of the top sites now ﬁngerprint users
We ﬁrst examine the deployment of ﬁngerprinting across
the top sites; our results are summarized in Table IV. In
alignment with prior work [54], we ﬁnd that ﬁngerprinting
is more prevalent on highly ranked sites. We also detect more
ﬁngerprinting than prior work [54], with over a quarter of
the top sites now deploying ﬁngerprinting. This increase in
use holds true across all site ranks—we observe a notable
increase even within less popular sites (i.e., 10K - 100K).
Overall, we ﬁnd that more than 10.18% of top-100K websites
deploy ﬁngerprinting.
We also ﬁnd signiﬁcantly more domains serving ﬁngerprint-
ing than past work—2,349 domains on the top 100K sites
(Table V) compared to 519 domains6 on the top 1 million sites
[54]. This suggests two things: our method is detecting a more
comprehensive set of techniques than measured by Englehardt
and Narayanan [54], and/or that the use of ﬁngerprinting—
both in prevalence and in the number of parties involved—has
signiﬁcantly increased between 2016 and 2019.
Rank Interval Websites (count) Websites (%)
30.60%
1 to 1K
24.45%
1K to 10K
11.10%
10K to 20K
8.92%
20K to 50K
50K to 100K
7.70%
10.18%
1 to 100K
266
2,010
981
2,378
3,405
9,040
TABLE IV: Distribution of Alexa top-100K websites that deploy
ﬁngerprinting. Results are sliced by site rank.
B. Fingerprinting is most common on news sites
Fingerprinting is deployed unevenly across different cate-
gories of sites.7 The difference is staggering—ranging from
nearly 14% of news websites to just 1% of credit/debit related
websites. Figure 4 summarizes our ﬁndings.
The distribution of ﬁngerprinting scripts in Figure 4 roughly
matches the distribution of trackers (i.e., not only ﬁnger-
printing, but any type of tracking) measured in past work
[54]. One possible explanation of these results is that—like
traditional tracking methods—ﬁngerprinting is more common
on websites that rely on advertising for monetization. Our
results in Section V-C reinforce this interpretation, as the
most prevalent vendors classiﬁed as ﬁngerprinting provide
anti-ad fraud and tracking services. The particularly high
use of ﬁngerprinting on news websites could also point to
ﬁngerprinting being used as part of paywall enforcement, since
cookie-based paywalls are relatively easy to circumvent [80].
C. Fingerprinting is used to ﬁght ad fraud but also for
potential cross-site tracking
Fingerprinting scripts detected by FP-INSPECTOR are of-
ten served by third-party vendors. Three of the top ﬁve
vendors in Table V (doubleverify.com, adsafeprotected.com,
and adsco.re) specialize in verifying the authenticity of ad
impressions. Their privacy policies mention that
they use
leverages “browser
“device identiﬁcation technology” that
6Englehardt and Narayanan [54] do not give an exact count of the number
of domains serving ﬁngerprinting across all measured techniques, and instead
give a count for each individual ﬁngerprinting technique. To get an upper
bound on the total count, we assume there is no overlap between the reported
results of each technique and take the sum.
7We use Webshrinker [36] for website categorization API.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1153
[53]. If the ﬁngerprinting vendor had previously cookie synced
with other trackers, it can use its ﬁngerprint to link cookies
for other trackers. We use the list by Fouad et al. [57] to
identify ﬁngerprinting domains that also participate in cookie
syncing. We ﬁnd that 17.28% of the ﬁngerprinting vendors
participate in cookie syncing. More importantly, we ﬁnd that
ﬁngerprinting vendors often sync cookies with well-known ad-
tech vendors. For example, adsafeprotected.com engages in
cookie syncing with rubiconproject.com and adnxs.com. We
also ﬁnd that many ﬁngerprinting vendors engage in cookie
syncing with numerous third-parties. For example, openx.net
engages in cookie syncing with 332 other domains, out of
which 14 are classiﬁed as tracking by Disconnect. We leave
an in-depth large-scale investigation of the interplay between
ﬁngerprinting and cookie syncing as future work.
VI. ANALYZING APIS USED BY FINGERPRINTERS
In this section, we are interested in systematically inves-
tigating whether any newly proposed or existing JavaScript
APIs are being exploited for browser ﬁngerprinting. There are
serious concerns that newly proposed or existing JavaScript
APIs can be exploited in unexpected ways for browser ﬁnger-
printing [33].
We start off by analyzing the distribution of Javascript APIs
in ﬁngerprinting scripts. Speciﬁcally, we extract Javascript API
keywords (i.e., API names, properties, and methods) from the
source code of scripts and sort them based on the ratio of their
fraction of occurrence in ﬁngerprinting scripts to the fraction
of occurrence in non-ﬁngerprinting scripts. This ratio captures
the relative prevalence of API keywords in ﬁngerprinting
scripts as compared to non-ﬁngerprinting scripts. A higher
value of the ratio for a keyword means that it is more prevalent
in ﬁngerprinting scripts than non-ﬁngerprinting scripts. Note
that 1 means that the keyword is only present in ﬁngerprinting
scripts. Table VI lists some of the interesting API keywords
that are disproportionately prevalent in ﬁngerprinting scripts.
We note that some APIs are primarily used by ﬁngerprinting
scripts, including APIs which have been reported by prior
ﬁngerprinting studies (e.g., accelerometer) and those
which have not (e.g., getDevices). We present a more
comprehensive list of the API keywords disproportionately
prevalent in ﬁngerprinting scripts in Appendix IX-F.
Keywords
MediaDeviceInfo
magnetometer
PresentationRequest
onuserproximity
accelerometer
chargingchange
getDevices
maxChannelCount
baseLatency
vibrate
Ratio
1
1
1
543.77
326.71
302.10
187.62
184.44
181.26
57.68
Scripts (count) Websites (count)
1363
241
16
18
247
20
80
40
8
1793
1
215
16
18
219
20
59
29
3
232
TABLE VI: A sample of frequently used JavaScript API keywords
in ﬁngerprinting scripts and their presence on 20K websites crawl.
Scripts (count) represents the number of distinct ﬁngerprinting scripts
in which the keyword is used and Websites (count) represents the
number of websites on which those scripts are embedded.
Fig. 4: The deployment of ﬁngerprinting scripts across different
categories of websites.
type, version, and capabilities” [1], [13], [22]. Our results also
corroborate that bot detection services rely on ﬁngerprinting
[41], and indicate that prevalent ﬁngerprinting vendors provide
anti-ad fraud services. The two remaining vendors of the top
ﬁve, i.e., alicdn.com and yimg.com, appear to be CDNs for
Alibaba and Oath/Yahoo!, respectively.
Vendor Domain
doubleverify.com
adsafeprotected.com
alicdn.com
adsco.re
yimg.com
2,344 others
Total
Tracker
Y
Y
N
N
Y
Y(86)
Websites (count)
2,130
1,363
523
395
246
5,702
10,359 (9,040 distinct)
TABLE V: The presence of the top vendors classiﬁed as ﬁngerprint-
ing on Alexa top-100K websites. Tracker column shows whether
the vendor is a cross-site tracker according to Disconnect’s tracking
protection list. Y represents yes and N represents no.
Several ﬁngerprinting vendors disclose using cookies “to
collect information about advertising impression opportuni-
ties” [22] that
is shared with “customers and partners to
perform and deliver the advertising and trafﬁc measurement
services” [13]. To better understand whether these vendors
participate in cross-site tracking, we ﬁrst analyze the over-
lap of the ﬁngerprinting vendors with Disconnect’s tracking
protection list [12].8 Disconnect employs a careful manual
review process [11] to classify a service as tracking. For
example, Disconnect classiﬁes c3tag as tracking [4], [10] and
adsco.re as not tracking [1], [9] because, based on their privacy
policies, the former shares Personally Identiﬁable Information
(PII) with its customers while the latter does not. We ﬁnd that
3.78% of the ﬁngerprinting vendors are classiﬁed as tracking
by Disconnect.
We also analyze whether ﬁngerprinting vendors engage
in cookie syncing [79], which is a common practice by
online advertisers and trackers to improve their coverage. For
example, a tracker may associate browsing data from a single
device to multiple distinct identiﬁer cookies when cookies are
cleared or partitioned. However, a ﬁngerprinting vendor can
use a device ﬁngerprint to link those cookie identiﬁers together
8We exclude the cryptomining and ﬁngerprinting categories of the Discon-
nect list. The list was retrieved in June 2019.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1154
Since the number of API keywords is quite large, it is
practically infeasible to manually analyze all of them. Thus,
we ﬁrst group the extracted API keywords into a few clusters
and then manually analyze the cluster which has the largest
concentration of API keywords that are disproportionately
used in the ﬁngerprinting scripts detected by FP-INSPECTOR.
Our key insight is that browser ﬁngerprinting scripts typically
do not use a technique (e.g., canvas ﬁngerprinting) in isolation
but rather combine several
techniques together. Thus, we
expect ﬁngerprinting-related API keywords to separate out as
a distinct cluster.
To group API keywords into clusters, we ﬁrst construct the
co-occurrence graph of API keywords. Speciﬁcally, we model
API keywords as nodes and include an edge between them
that is weighted based on the frequency of co-occurrence in
a script. Thus, co-occurring API keywords appear together in
our graph representation. We then partition the API keyword
co-occurrence graph into clusters by identifying strongly con-
nected communities of co-occurring API keywords. Speciﬁ-
cally, we extract communities of co-occurring keywords by
computing the partition of the nodes that maximize the mod-
ularity using the Louvain method [42]. In total, we extract
25 clusters with noticeable dense cliques of co-occurring API
keywords. To identify the clusters of interest, we assign the
API keyword’s fraction of occurrence in ﬁngerprinting scripts
to the fraction of occurrence in non-ﬁngerprinting scripts as
weights to the nodes. We further classify nodes based on
whether they appear in ﬁngerprintjs2 [16], which is a popular
open-source browser ﬁngerprinting library.
We investigate the cluster with the highest concentration of
nodes that tend to appear in the detected ﬁngerprinting scripts
and those that appear in ﬁngerprintjs2. While we discover a
number of previously unknown uses of JavaScript APIs by ﬁn-
gerprinting scripts, for the sake of concise discussion, instead
of individually listing all of the previously unknown JavaScript
API keywords, we thematically group them. We discuss how
each new API we discover to be used by ﬁngerprinting scripts
may be abused to extract identifying information about the
user or their device. While our method highlights potential
abuses, a deep manual analysis of each script is required to
conﬁrm abuse.
Functionality ﬁngerprinting. This category covers browser
ﬁngerprinting techniques that probe for different function-
alities supported by the browser. Modern websites rely on
many APIs to support their rich functionality. However, not
all browsers support every API or may have the requisite user
permission. Thus, websites may need to probe for APIs and
permissions to adapt their functionality. However, such feature
probing can potentially leak entropy.
1) Permission ﬁngerprinting: Permissions API provides a
way to determine whether a permission is granted or denied to
access a feature or an API. We discover several cases in which
the Permissions API was used in ﬁngerprinting scripts.
Speciﬁcally, we found cases where the status and permissions
for APIs such as Notification, Geolocation, and
Camera were probed. The differences in permissions across
browsers and user settings can be used as part of a ﬁngerprint.
2) Peripheral ﬁngerprinting: Modern browsers provide inter-
faces to communicate with external peripherals connected with
the device. We ﬁnd several cases in which peripherals such
as gamepads and virtual reality devices were probed. In one
of the examples of peripherals probing, we ﬁnd a case in
which keyboard layout was probed using getLayoutMap
function. The layout of the keyboard (e.g., size, presence of
speciﬁc keys, string associated with speciﬁc keys) varies across
different vendors and models. The presence and the various
functionalities supported by these peripherals can potentially
leak entropy.
3) API ﬁngerprinting: All browsers expose differing sets of
features and APIs to the web. Furthermore, some browser
extensions override native JavaScript methods. Such im-
plementation inconsistencies in browsers and modiﬁcations
by user-installed extensions can potentially leak entropy
[84]. We ﬁnd several cases in which certain functions such
as AudioWorklet were probed by ﬁngerprinting scripts.
AudioWorklet is only implemented in Chromium-based
browsers (e.g., Chrome or Opera) starting version 66 and
its presence can be probed to check the browser and its
version. We also ﬁnd several cases where ﬁngerprinting scripts
check whether certain functions such as setTimeout and
mozRTCSessionDescription were overridden. Function
overriding can also leak presence of certain browser exten-
sions. For example, Privacy Badger [27] overrides several
prototypes of functions that are known to be used for ﬁn-
gerprinting.
Algorithmic ﬁngerprinting. This category covers browser
ﬁngerprinting techniques that do not just simply probe for
different functionalities. These browser ﬁngerprinting tech-
niques algorithmically process certain inputs using different
JavaScript APIs and exploit the fact that different implemen-
tations process these inputs differently to leak entropy. We
discuss both newly discovered uses of JavaScript APIs that
were previously not observed in ﬁngerprinting scripts and
known ﬁngerprinting techniques that seem to have evolved
since their initial discovery.
1) Timing ﬁngerprinting: The Performance API provides
high-resolution timestamps of various points during the life
cycle of loaded resources and it can be used in various
ways to conduct timing related ﬁngerprinting attacks [29],
[82]. We ﬁnd several instances of ﬁngerprinting scripts using
the Performance API to record timing of all its events
such as domainLookupStart, domainLookupEnd,
domInteractive, and msFirstPaint. Such measure-
ments can be used to compute the DNS lookup time of a
domain, the time to interactive DOM, and the time of ﬁrst
paint. A small DNS lookup time may reveal that the URL
has previously been visited and thus can leak the navigation
history [29], whereas time to interactive DOM and time to
ﬁrst paint for a website may vary across different browsers and
different underlying hardware conﬁgurations. Such differences
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1155
to
compute
scripts
the
found
ﬁngerprinting:
Similar
ﬁngerprinting