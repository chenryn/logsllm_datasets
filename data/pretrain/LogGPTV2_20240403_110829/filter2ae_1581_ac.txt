loaders.add("params");
engine.setProperty("params.resource.loader.instance", new
SolrParamResourceLoader(request));
根据网上查到的资料我们可以看到params.resource.loader.instance这个属性的含义
也就是说当开启这个属性的时候，我们就可以通过Solr来上传我们自定义的模板了。
最后返回VelocityEngine对象
返回到responseWriter.write方法，继续执行到
Template template = getTemplate(engine, request);
这里我们生成了一个template
跟进去后我们看到
从我们Get传入的参数中获取V.template作为模板的名字
同时将我们传入的Poc也就时Velocity模板语句解析成AST抽象语法树
这里就要对velocity的AST抽象语法树做一下简单的介绍了
在计算机科学中，抽象语法树（abstract syntax tree 或者缩写为 AST），或者语法树（syntax
tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。树上的每个节点都表示源代码中的一种结构。
之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。
Velocity是通过JavaCC和JJTree生成抽象语法树的,
javaCC
是一个能生成语法和词法分析器的生成程序。语法和词法分析器是字符串处理软件的重要组件，[javacc](http://www.google.com/url?sa=t&ct=res&cd=1&url=https%3A%2F%2Fjavacc.dev.java.net%2F&ei=9DVYRYiNNqOEpgKyrbivCQ&usg=__mFYMOj71sh29a1K1V8lPTOwCBok=&sig2=hEpGu_jpqYUmHxmOExyoMg)是类似lex/yacc的parser生成器，可以把一段文本转换为抽象语法树（AST）。
JJTree是javaCC的预处理器，用于在JavaCC生成的源代码中的各个地方插入表示语义动作的分析树
用网上的一张图来介绍一下AST的一些节点
Velocity的语法相对简单，所以它的语法节点并不是很多，总共有50几个，它们可以划分为如下几种类型。
  1. 块节点类型：主要用来表示一个代码块，它们本身并不表示某个具体的语法节点，也不会有什么渲染规则。这种类型的节点主要由ASTReference、ASTBlock和ASTExpression等组成。
  2. 扩展节点类型：这些节点可以被扩展，可以自己去实现，如我们上面提到的#foreach，它就是一个扩展类型的ASTDirective节点，我们同样可以自己再扩展一个ASTDirective类型的节点。
  3. 中间节点类型：位于树的中间，它的下面有子节点，它的渲染依赖于子节点才能完成，如ASTIfStatement和ASTSetDirective等。
  4. 叶子节点：它位于树的叶子上，没有子节点，这种类型的节点要么直接输出值，要么写到writer中，如ASTText和ASTTrue等。
我们再来看一下poc中的Velocity语句，和children中的节点信息
#set($x='')
#set(x.class.forName('java.lang.Runtime'))
#set(rt.getRuntime().exec('open /Applications/Calculator.app/'))
#set最终被解析为Velocity AST语法树中的ASTSetDirective类，根据上面的Velocity
AST语法树的图我们看到ASTSetDirective节点有两个字节点
分别是ASTReference,和ASTExpression,
我们看到下标为0的ASTSetDirective类中有两个属性。right和left
分别代表了$x=''中“=”号的两边，左边的ASTReference有两种可能，
一就是用来进行赋值操作的变量名
例：#set( $iAmVariable = 'good!')将字面量“good”赋值给名字为iAmVariable的变量
第二种也是赋值操作，但是赋值操作的目标是一个对象的某个属性
例：#set($Persion.name = 'kkk')
这种赋值方式的本质其实是调用Persion的setName方法。
区分这两种赋值方式我们可以动过观察此时的ASTReference这个节点是否有子节点来判断
譬如第一种#set( $iAmVariable = 'good!') 我们观察一下
可以看到最后的children属性为空
再观察第二种#set($Persion.name = 'kkk')
可以看到children属性中，是有子节点的。
Velocity通过ASTReference类来表示一个变量和变量的方法调用，ASTReference类如果有子节点，就表示这个变量有方法调用，方法调用同样是通过“.”来区分的，每一个点后面会对应一个方法调用。ASTReference有两种类型的子节点，分别是ASTIdentifier和ASTMethod。它们分别代表两种类型的方法调用，其中ASTIdentifier主要表示隐式的“get”和“set”类型的方法调用。而ASTMethod表示所有其他类型的方法调用，如所有带括号的方法调用都会被解析成ASTMethod类型的节点。
所谓隐式方法调用在Velocity中通常有如下几种。
1.Set类型，如#set($person.name=”junshan”)，如下： \- person.setName(“junshan”)
  * person.setname(“junshan”)
  * person.put(“name”,”junshan”)
2.Get类型，如#set(person.name)中的$person.name，如下：
  * person.getName()
  * person.getname()
  * person.get(“name”)
  * person.isname()
  * person.isName()
接下来我们来看ASTText节点，我们从节点图中看到ASTText没有任何子节点了，它是一个叶子结点，所以这种类型的节点要么直接输出值，要么写到writer中。
到这里我们简单介绍了下Velocity AST语法树的一些基础知识。接下来我们回归我们程序的执行逻辑。
接下来的velocity模板引擎的执行逻辑现在这里简单说明一下，其实也很简单，其实就是会不停的遍历和执行各个子节点中的render方法
首先根据Velocity AST语法树的那张图，我们看到总的根节点是ASTprocess
所以会首先调用ASTprocess的render方法，具体在哪里调用呢，我们来看代码
继续跟入
当执行到((SimpleNode)data).render(ica,writer);
这行代码是，我们可以看到此时的data就是ASTprocess节点，所以Template.merge方法中调用了AST的根节点(ASTprocess)的render方法((SimpleNode)data).render(ica,writer);。此调用将迭代处理各个子节点render方法。如果是ASTReference类型的节点则在render方法中会调用execute方法执行反射替换相关处理。
当进入到ASTprocess节点的render方法后会根据深度优先遍历算法开始遍历整棵树，遍历算法如下
即依次执行当前节点中的所有子节点的render方法，而每个节点的具体渲染规则都在其对应节点的render方法中实现。
这里我们可以打印一下我们poc所生成的语法树的详细结构
有了这个语法树结构后，程序的执行顺序就相当清晰了。
我们首先调用了ASTSetDirective类的render方法，看到该方法中首先调用了ASTExpression类value方法。
而ASTExpression类value方法中又调用了它的子节点ASTStringLiteral
节点的value方法
最后ASTStringLiteral类的value方法返回一个字面量
接着返回到ASTSetDirective类执行它的第二个子节点也就是等号左边的$x
这里对应的是ASTReference类，这里是调用了ASTReference类的setValue方法
跟入方法后可以看到，由于该ASTReference节点没有子节点了，所以
直接执行
context.put(rootString, value);这里的value就是我们刚刚获得的“=”号右边的字面量!
我们跟进去看一眼，能看得出后续就是赋值操作了，就不继续深入了
Poc第一行#set($x='')执行完毕
然后开始遍历第二个节点
第二个节点是ASTText节点，这个没什么好说的，就只是直接输出或着写到write中
然后开始遍历第三个节点
第三个节点仍然是ASTSetDirective类，它的render方法中仍然是先执行“=”号右边的子节点ASTExpression类的value方法
当执行到该方法时我们可以看到，此时的ASTExpression节点还有一个子节点，但是不是ASTStringLiteral节点了，而是ASTReference节点
所以此次执行的将会是ASTReference类的value方法
执行execute方法
我们重点看execute中的这行代码
Object result = getVariableValue(context, rootString);
这里返回的是我们给$x所赋的值“”然后程序会判断该值是否为空
如果一开始我们没有执行#set(x赋一个值的话，此时会执行下面的
EventHandlerUtil.invalidGetMethod()方法，该方法会因为$x的值为空而不会向下继续执行。
所以我们poc的第一步就需要先为一个变量赋值，赋任何值都可以。
接下来执行到下面这些代码时，就开始遍历当前ASTReference的两个子节点
执行完ASTIdentifier类的execute返回一个Class对象
接下来就是遍历第二个节点也就是ASTMethod节点，
执行ASTMethod节点的execute方法。
Execute方法中执行了method的invoke方法跟入
最调用doInvoke方法
我们看一下doInvoke方法的内容
这一路下来的反射调用到最终获取Runtime类的class对象我用更直观的方式重写了一下方便理解
这一系列的操作等同于Class.forName("java.lang.Runtime")
后面的poc的第三行
#set(rt.getRuntime().exec('open /Applications/Calculator.app/'))
执行逻辑和上面的如出一辙，就不再深入分析了，感兴趣的朋友可以自己跟踪代码分析一下。
最后放一下最终的一个调用链
* * *