self.uid = uid
self.name = name
def __hash__(self): # 针对 uid 去重，忽略略其他字段。
return hash(self.uid)
def __eq__(self, other):
return self.uid == other.uid
>>> u1 = User(1, "user1")
>>> u2 = User(1, "user2")
>>> s = set()
>>> s.add(u1)
>>> s.add(u2)
>>> s
{}
>>> u1 in s
True
>>> u2 in s # 仅检查 uid 字段。
True
!89
学习笔记 . 第三版
三. 表达式
1. 词法
交互式环境通常⽤来学习、测试，甚⾄可替代系统命令⾏做些管理⼯作，但着实不适合做
正式开发。因为程序复杂度和篇幅，很难保证⼀次性完成编码。事实上，任何优秀代码，
都是在频繁修改和长期调整后才会出现。⼀个便捷，带有辅助插件，能提升开发效率的编
辑器对于开发⼈员是很重要的事情。
个⼈倾向于⽤ iPython 作为学习和测试⼯具，因其⾮连贯性操作⽅式，允许我们实时从不同⾓度
观察⽬标各个细节。⽽⽤编辑器时，更多是编写完整逻辑。或者说交互式操作⽅式属于调试器范
畴，与 pdb ⼯作⽅式类似。
当然，对于系统性学习⽽⾔，Jupyter Notebook 要更⽅便些，既有交互式操作，还能编辑说明⽂
字，最终以内嵌可执⾏代码的笔记形式留存下来。
正式可分发的程序，由⼀到多个源码⽂件组成，各⾃对应⼀个运⾏期模块。模块内有很多
条语句，⽤于定义类型，创建实例，执⾏逻辑指令。其中包含表达式，完成数据计算和函
数调⽤。
表达式（expression）由标识符、字⾯量和操作符组成。完成运算、属性访问，以及函数调⽤等。
它像数学公式，总是返回⼀个结果。
语句（statement）则由⼀到多⾏代码组成，着重于逻辑过程，完成变量赋值、类型定义，以及控
制流⽅向等。说起来，表达式算是语句的⼀种，但语句不⼀定是表达式。
简单归纳：表达式完成计算，语句执⾏逻辑。
1.1 源文件
如果以 Python 2 为起点，那么下⾯这个错误可能就是第⼀只拦路虎。事故源头要追溯到远
古时代，解释器以 ASCII 为默认编码，如果源码⾥出现 Unicode 字符，就会导致其⽆法正
确解析。
!90
学习笔记 . 第三版
print "您好"
输出：
$ python2 test.py
SyntaxError: Non-ASCII character ..., but no encoding declared; ...
解决办法是在⽂件头部添加专门的编码声明，指⽰解释器按此格式读取。
# -*- coding: utf-8 -*-
print "您好"
好在 Python 3 将默认编码改成 UTF-8，免去我们为每个源码⽂件添加此类信息的⿇烦。当
然，如果您打算使⽤其他编码格式，依然需要额外声明。
执行
启动程序，只需将⼊⼜⽂件名作为命令⾏参数即可。
$ python3 main.py
或者，在⼊⼜⽂件头部添加 Shebang 信息，指⽰系统程序载⼊器⽤指定解释器执⾏。别忘
了赋予该⽂件可执⾏权限。
main.py
#!/usr/bin/env python
print("您好")
输出：
$ chmod a+x main.py
$ ./main.py
!91
学习笔记 . 第三版
考虑到不同系统安装⽅式上的差异，不建议使⽤类似 “/usr/bin/python ” 这样的绝对路径，
⽽是以 env 从当前环境设置⾥查找与之匹配的解释器。当然，还可指定解释器版本，以及
相关执⾏参数。
系统命令 env 通过环境变量 PATH 查找⽬标，这对于使⽤ VirtualEnv 之类的虚拟环境有益。
#!/usr/bin/env python3 -O
命令行
命令⾏参数分解释器和程序两种，分别以 sys.flags、sys.argv 读取。
import sys
print(sys.flags.optimize)
print(sys.argv)
输出：
$ python -OO main.py 1 2 "hello, world"
2
['main.py', '1', '2', 'hello, world']
对于简单测试代码，⽆需创建⽂件或启⽤交互环境，直接在命令⾏以 -c 参数执⾏即可。
$ python -c "import sys; print(sys.platform)"
darwin
$ python -c "import sys; print(sys.version_info)"
major=3, minor=6, micro=1, releaselevel='final', serial=0
退出
终⽌进程的正式做法是调⽤ sys.exit 函数，它确保退出前完成相关清理操作。
!92
学习笔记 . 第三版
常见清理操作包括 finally 和 atexit。前者是结构化异常⼦句，⽆论异常是否发⽣，它总被执⾏。
⽽ atexit ⽤于注册在退出前才执⾏的清理函数。
终⽌进程应返回退出状态码（exit status），以便命令⾏管理⼯具据此做出判断。依惯例返
回零表⽰正常结束，其他值为错误。标准库 os 模块⾥有部分平台的常见定义，但也可⾃
⾏设定，以表达不同结果。
辅助函数 exit、quit 由 site 模块创建，适⽤于交互式环境。但不建议在源⽂件中使⽤，可能会导
致该⽂件在 iPython 等环境下执⾏出错。⾄于 os._exit，会⽴即终⽌进程，不执⾏任何清理操作。
import atexit
import sys
atexit.register(print, "atexit")
try:
sys.exit()
finally:
print("finally")
输出：
finally
atexit
$ python -c "import os; exit(os.EX_DATAERR)"; echo $? # 使⽤用 os 定义。
65
$ python -c "exit('error')"; echo $? # ⾮非整数退出码。
error
1
1.2 代码
在软件整个⽣命周期中，我们⾯对代码的时间远超过最终部署的可执⾏系统。若要评述，
代码与运营各取其半，乃是极重要的资产。
!93
学习笔记 . 第三版
对开发⼈员⽽⾔，编写代码不仅仅是为了实现逻辑需求，完成⽇常任务。作为⼀种另类记
述⽂档，代码同样有所追求。如同写⽂章，不应使⽤恢宏架构和过度设计来体现优雅，⽽
是追求最⾃然的逻辑抽象，最简单的直述⽂字。
综其所⾔，可阅读度性和可测试性是代码的基本要求。前者保证代码⾃⾝的可持续性发展，
后者维护其最终价值。
缩进
对于强制缩进规则，批评和欣赏两⽅各持⼰见。可不管怎么说，强约束规则总好过流于形
式的规范⼿册，这对新⼿培养严谨的编码风格尤其重要。
PEP8 推荐使⽤ 4 个半⾓空格表达缩进，但也有⼈习惯使⽤制表符。空格可保证在⼤多数
环境下风格⼀致，⽽制表符则可依个⼈喜好设定显⽰宽度，算是各有所长。好在，有很多
⼯具能⾃动转换，算不上什么⼤问题。
PEP : Python Enhancement Proposals
PEP8 : Style Guide for Python Code
代码格式检查可使⽤ pycodestyle，或 autopep8、isort、yapf 等增强改进⼯具。
Python 2 允许在同⼀⽂件⾥混⽤两种风格，但 Python 3 只能选其⼀。建议选⽤能⾃动识别
并转换格式的编辑器，避免出现这种⽆厘头的⾮语法性错误。
def add(a, b):
z = a + b # tab 缩进
return z # space 缩进，与 tab 保持等宽。
add(1, 2)
输出：
$ python2 -t test.py # 参数 -t 检查缩进⻛风格是否⼀一致。
inconsistent use of tabs and spaces in indentation
$ python3 test.py
TabError: inconsistent use of tabs and spaces in indentation
!94
学习笔记 . 第三版
缩进的另⼀个⿇烦在于格式丢失导致逻辑性错误。
def sum(x):
n = 0
for i in x:
n += i
return n # 缩进错误，导致逻辑错误。
print(sum(range(10)))
输出：
0
鉴于 Python 没有代码块结束标志，我们可添加注释作为排版和检查标记。当出现问题时，
该标记能让我们⼿⼯重排格式，这对因⽹页粘贴⽽导致混乱的⼤段代码尤其有⽤。
def sum(x):
n = 0
for i in x:
n += i
# end_for # 注释表示块结束。虽对⼯工具⽆无效，但可⾁肉眼发现问题所在。
return n
如嫌注释不够优雅，还可创建⼀个伪关键字作为结束符号。
import builtins
builtins.end = None # 在内置模块，为 None 添加⼀一个别名。确保后续任意模块都能使⽤用。
def sum(x):
n = 0
for i in x:
n += i
end # 块结束符号。
return n
Python 编译器不够聪明，不会将这个⽆意义的 end / None 忽略掉。不过，与好处相⽐，它对性
能的影响微乎其微。当然，如您有严格的编码习惯，可⽤空⾏区分不同代码块。
!95
学习笔记 . 第三版
语句
⽆论是为了更好的阅读体验，还是便于在不同环境下编辑，代码⾏都不宜过长。通常，每
条语句独占⼀⾏。仅在必要时，以分号分隔多条语句。
但时常也有单语句超过限宽的情况。此时相⽐编辑器⾃动换⾏，⼿⼯硬换⾏的可读性要更
好，因为可调整缩进对齐。即便没有超限，将多条件分成多⾏，也易于修改，⽐如调整优
先级次序，或临时注释掉某些条件。
⼤多数编码规范都将⾏宽限制在 80 字符。
考虑到该规则源⾃早期低分辨率显⽰环境，现在可适当放宽到 100 字符。
反斜线续⾏符后⾯不能有空格和注释。
if (0 >> import test
>>> test.__doc__
模块帮助信息
>>> test.test.__doc__
函数帮助信息
>>> help(test)
NAME
test - 模块帮助信息
FUNCTIONS
test()
函数帮助信息
当解释器以 “OO” 优化⽅式运⾏时，帮助信息被移除。
$ python -c "import test; print(test.__doc__)"
模块帮助信息
$ python -OO -c "import test; print(test.__doc__)"
None
!98
学习笔记 . 第三版
2. 赋值
前⽂提及，赋值操作为名字和⽬标对象建⽴关联。但这只是其结果，或者说基本⽤途。作
为历史悠久的动态语⾔，Python 如同西⽅巨龙⼀般，收集了许多看着眼花缭乱，实际操作
便捷的语法风格。样式多变的赋值操作，不过是其中繁花⼀朵。
对应⽤开发来说，丰富⽽便捷的语⾔功能可提升开发效率。但凡事有度，应限制花式代码和魔法
实现。任何时候，代码可读性都须优先保障。