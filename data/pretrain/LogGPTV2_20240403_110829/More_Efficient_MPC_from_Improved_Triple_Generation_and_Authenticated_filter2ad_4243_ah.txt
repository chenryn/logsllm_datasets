Jesper Buus Nielsen. Extending oblivious transfers efﬁciently - how to get robustness almost
for free. Cryptology ePrint Archive, Report 2007/215, 2007. http://eprint.iacr.
org/2007/215.
[NNOB12] Jesper Buus Nielsen, Peter Sebastian Nordholt, Claudio Orlandi, and Sai Sheshank Burra. A
new approach to practical active-secure two-party computation. In Advances in Cryptology—
Crypto 2012, volume 7417 of LNCS, pages 681–700. Springer, 2012.
[NST17]
[PVW08]
[Rin]
[RW19]
Jesper Buus Nielsen, Thomas Schneider, and Roberto Triﬁletti. Constant round maliciously
secure 2PC with function-independent preprocessing using LEGO. In Network and Distributed
System Security Symposium (NDSS), 2017.
Chris Peikert, Vinod Vaikuntanathan, and Brent Waters. A framework for efﬁcient and com-
posable oblivious transfer. In Advances in Cryptology—Crypto 2008, volume 5157 of LNCS,
pages 554–571. Springer, 2008.
Peter Rindal.
https://github.com/osu-crypto/libOTe.
libOTe: an efﬁcient, portable, and easy to use Oblivious Transfer Library.
Dragos Rotaru and Tim Wood. MArBled circuits: Mixing arithmetic and Boolean circuits with
active security. In Progress in Cryptology – Indocrypt 2019, LNCS, pages 227–249. Springer,
2019.
[WMK16] Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. EMP-toolkit: Efﬁcient MultiParty com-
putation toolkit. https://github.com/emp-toolkit, 2016.
[WRK17a] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. Authenticated garbling and efﬁcient ma-
In ACM Conf. on Computer and Communications
liciously secure two-party computation.
Security (CCS) 2017, pages 21–37. ACM Press, 2017.
[WRK17b] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. Global-scale secure multiparty compu-
tation. In ACM Conf. on Computer and Communications Security (CCS) 2017, pages 39–56.
ACM Press, 2017.
27
[Yao86]
Andrew Chi-Chih Yao. How to generate and exchange secrets (extended abstract). In 27th
Annual Symposium on Foundations of Computer Science (FOCS), pages 162–167. IEEE, 1986.
[YWZ19] Kang Yang, Xiao Wang, and Jiang Zhang. More efﬁcient MPC from improved triple generation
and authenticated garbling. Cryptology ePrint Archive, Report 2019/1104, 2019. https:
//eprint.iacr.org/2019/1104.
[ZCSH18] Ruiyu Zhu, Darion Cassel, Amr Sabry, and Yan Huang. NANOPI: Extreme-scale actively-
secure multi-party computation. In ACM Conf. on Computer and Communications Security
(CCS) 2018, pages 862–879. ACM Press, 2018.
[ZMM+20] Fan Zhang, Sai Krishna Deepak Maram, Harjasleen Malvai, Steven Goldfeder, and Ari Juels.
Deco: Liberating web data using decentralized oracles for tls. In ACM Conf. on Computer and
Communications Security (CCS) 2020. ACM Press, 2020.
[ZRE15]
Samee Zahur, Mike Rosulek, and David Evans. Two halves make a whole - reducing data
In Advances in Cryptology—Eurocrypt 2015,
transfer in garbled circuits using half gates.
Part II, volume 9057 of LNCS, pages 220–250. Springer, 2015.
A More Background
A.1 Commitment and Coin-tossing
Our protocols need two standard functionalities for commitment and coin-tossing respectively.
Functionality FCom
This functionality runs with parties P1, . . . , Pn as follows:
Commit: On input (Commit, i, x, τx) from Pi, store (i, x, τx) and output (i, τx) to all parties.
Open: On input (Open, i, τx) from Pi, if a tuple (i, x, τx) was previously stored, output (i, x, τx) to all parties.
If instead (NoOpen, i, τx) is given by the adversary and Pi is corrupted, output (i,⊥, τx) to all parties.
Figure 10: Functionality for commitments.
Commitment. We will use a commitment functionality shown in Figure 10. This functionality can easily
be implemented in the random oracle model [HSS17] via deﬁning Commit(i, x) = H(i, x, r) where H :
{0, 1}∗ → {0, 1}2κ is a random oracle and r ∈ {0, 1}κ is a randomness, where note that Commit(i, x)
needs to be broadcast in the multi-party setting.
Functionality FRand
This functionality runs with n parties P1, . . . , Pn as follows:
– Upon receiving (Rand,R) from all parties where R is any efﬁciently sampleable set, sample r ←$R and send
r to all parties.
Figure 11: Coin-tossing functionality.
Coin tossing. We will use a standard coin-tossing functionality FRand shown in Figure 11, which samples
an entry from any efﬁciently sampleable set R. This can be securely realized in the random oracle model by
28
and use(cid:76)
having every party commit to a random seedi ∈ {0, 1}κ via calling FCom, and then open all commitments
i∈[n] seedi as a seed to sample an element from set R.
A.2 Almost Universal Linear Hash Functions
We will use a family of almost universal linear hash functions [CDD+16] over F2s for some parameter
s ∈ N, which is deﬁned as follows:
Deﬁnition 1 (Almost Universal Linear Hashing). We say that a family H of linear hash functions Fm
is -almost universal, if it holds for every non-zero vector x ∈ Fm
H←H [H(x) = 0] ≤ ,
2s → F2s
2s such that
Pr
where H is chosen uniformly at random from the family H.
Efﬁcient constructions for a family of almost universal linear hash functions have been proposed such
as [DPSZ12, CDD+16, NST17]. In this paper, we adopt the following practical construction, which is a
polynomial hash based on GMAC and also used in [NST17, HSS17]:
– Sample a random seed χ ← F2s.
– Use χ to deﬁne the following linear hash function H:
H : Fm
2s → F2s,
H(x1, x2, . . . , xm) = x1 · χ + x2 · χ2 + ··· + xm · χm
The seed χ ∈ F2s is short, but the computational complexity is O(m · s). When s = 128 is adopted, the
ﬁnite ﬁeld multiplication over F2s can be performed very efﬁciently in hardware on modern CPUs by using
the Intel SSE instruction [NST17]. This construction described as above provides an almost universal family
with  = m· 2−s, as χ is uniformly random in F2s and independent of the input x = (x1, x2, . . . , xm). This
can be improved to 2−s, at the cost of a larger seed, by using m different random coefﬁcients.
A.3 Amortized Opening Procedures
In this section, we present how to open authenticated bits/shares in an amortized way (i.e., it is possible to
open (cid:96) authenticated bits with less than (cid:96) times the communication) using the standard techniques [NNOB12,
DPSZ12]. In a naive approach, a party Pi can open [x]j
i to Pj via just sending x and Mj[x] to Pj. Party
Pj is able to verify the validity of x by checking that Mj[x] = Kj[x] ⊕ x∆j. As observed in previous
work [NNOB12], authenticated bits/shares can be opened in the following amortized process.
– aBits: For each i ∈ [n], j (cid:54)= i, Pi can open (cid:96) two-party authenticated bits [x1]j
i to Pj as follows:
i , . . . , [x(cid:96)]j
1. Pi sends x1, . . . , x(cid:96) and τj := H(Mj[x1], . . . , Mj[x(cid:96)]) to Pj.
2. Pj checks that τj = H(Kj[x1] ⊕ x1∆j, . . . , Kj[x(cid:96)] ⊕ x(cid:96)∆j). If the check fails, Pj aborts.
i ) for each k ∈ [(cid:96)] to denote the above amortized opening process for two-party au-
We use Open([xk]j
thenticated bits. Pi can also open (cid:96) multi-party authenticated bits [x1]i, . . . , [x(cid:96)]i to all parties via opening
[x1]j
i to Pj for each j (cid:54)= i.
i , . . . , [x(cid:96)]j
– aShares: All parties can open (cid:96) authenticated shares (cid:104)x1(cid:105), . . . ,(cid:104)x(cid:96)(cid:105) by every party Pi opening its portion
in the following way.
1. For each j (cid:54)= i, Pi sends xi
2. For j (cid:54)= i, Pj checks that τi,j = H(Kj[xi
1, . . . , xi
(cid:96) along with τi,j := H(Mj[xi
1] ⊕ xi
1∆j, . . . , Kj[xi
1], . . . , Mj[xi
(cid:96)] ⊕ xi
(cid:96)]) to Pj.
(cid:96)∆j), and aborts if the check fails.
29
Let Open((cid:104)xk(cid:105)) for each k ∈ [(cid:96)] denote the above amortized opening process for authenticated shares.
Below, we prove that the above opening process in a batch is secure in the random oracle model, even if
the adversary can leak a few bits of global keys such that each bit leaked of global keys will be caught with
probability 1/2. We focus on the case of two-party authenticated bits, where the security proof is easy to be
generalized to multi-party authenticated bits and authenticated shares.
Lemma 1. If H : {0, 1}∗ → {0, 1}κ is a random oracle, in the amortized opening process for two-party
authenticated bits, either an honest party Pj aborts, or Pj receives the correct bits from a malicious party
Pi except with probability (q + 1)/2κ, where q is an upper bound of the number of queries to H. Let A be a
probabilistic polynomial time (PPT) adversary, which corrupts the party Pi. Assume that A leaks c bits of
global key ∆j for some c ∈ [κ] ∪ {0}, and honest party Pj will abort with probability 1/2c.
Proof. Let x1, . . . , x(cid:96) be the correct bits that will be sent by semi-honest Pi. In the opening process, ad-
versary A on behalf of Pi sends the bits x(cid:48)
j to honest party Pj. If Pj does not abort,
1∆j, . . . , K[x(cid:96)] ⊕ x(cid:48)
then τ(cid:48)
j but
(cid:96)∆j), then A ﬁnds a target collision for random oracle H, which happens
z (cid:54)= (K[x1]⊕ x(cid:48)
with probability q/2κ.
Below, we assume that A does not ﬁnd a target collision, and then analyze the probability that there
k (cid:54)= xk. The probability that A forges an information-theoretic MAC
exists some k ∈ [(cid:96)] such that x(cid:48)
k] = Kj[xk] ⊕ x(cid:48)
k∆j is bounded by 1/2κ−c. Note that Pj will abort except with probability 1/2c, due
Mj[x(cid:48)
to the c leaked bits of ∆j. Together, the probability that Pj does not abort and A forges an MAC Mj[x(cid:48)
k] is
1/2c · 1/2κ−c = 1/2κ.
1, . . . , x(cid:48)
(cid:96)∆j). If A makes a query z to H such that H(z) = τ(cid:48)
1∆j, . . . , K[x(cid:96)]⊕ x(cid:48)
j = H(K[x1] ⊕ x(cid:48)
(cid:96) along with τ(cid:48)
Overall, except with probability (q + 1)/2κ, Pj will receive the correct bits, if it does not abort.
B Proof of Security for Our Authenticated Bit Protocol
B.1 Analysis of Checking in the aBit Protocol
Analysis of correlation check: For the security analysis of correlation check, we recall an important lemma
by Keller et al. [KOS15]. Here we consider that Pi is corrupted by the adversary. Without loss of gener-
ality, we ﬁx an honest party Pj to analyze the correlation check. When calling the (extend) command of
functionality FCOTe, a corrupt party Pi may send a vector xk,j for k ∈ [(cid:96)(cid:48)] to FCOTe, and receives an MAC
j[xk,j] := Kj[xk,j] + xk,j ∗ ∆j for k ∈ [(cid:96)(cid:48)]. We take Pi’s inputs x1,j, . . . , x(cid:96)(cid:48),j ∈ Fκ
M(cid:48)
2 to be the rows of
an (cid:96)(cid:48) × κ matrix. Let ˆxj,1, . . . , ˆxj,κ ∈ F(cid:96)(cid:48)
2 be the columns of the same matrix. If Pi is semi-honest, then
xk,j for k ∈ [(cid:96)(cid:48)] is monochrome, and ˆxj,1, . . . , ˆxj,κ are all equal. Given a sender Pj and a receiver Pi, our
correlation check for two parties without broadcast is the same as that by Keller et al. [KOS15]. Thus, we
can use the following lemma by Keller et al. [KOS15] to prove the security of the correlation check in our
protocol ΠaBit.
Lemma 2 ([KOS15]). Let S∆j ⊆ Fκ
view of receiver Pi. Except with probability 2−κ, there exists dj ∈ N such that
1. |S∆j| = 2dj .
2. For each s ∈ {ˆxj,l}l∈[κ], let Hs = {l ∈ [κ] | s = ˆxj,l}. Then one of the following holds:
2 be the set of all ∆j for which the correlation check passes, given the
j
30
– For all l ∈ Hs and any ∆(1)
– |Hs| ≥ dj and(cid:12)(cid:12){∆j[Hs]}∆j∈S∆j
, ∆(2)
j
j ∈ S∆j , ∆(1)
(cid:12)(cid:12) = 2dj , where ∆j[Hs] denotes the vector consisting of the bits
[l] = ∆(2)
[l].
j
{∆j[l]}l∈Hs. In other words, S∆j restricted to the bits corresponding to Hs has entropy at least dj.
Furthermore, there exists ˆs such that |Hˆs| ≥ dj.
According to the analysis by Keller et al. [KOS15], we give some intuition about the above lemma. The
probability of passing the correlation check is |S∆j|/2κ, as ∆j is sampled uniformly at random by Pj. For
a semi-honest Pi, Hs is always the set {1, . . . κ}. So the size of Hs reﬂects the number of deviation in the
protocol for a given s. Furthermore, the precise indices in Hs correspond to a subset of the bits of ∆j. The
second part of Lemma 2 implies that for any s, either the bits of ∆j corresponding to the indices in Hs
are known, or the size of Hs is at least dj. In the ﬁrst case, the bits of ∆j are revealed by the adversary
corrupting Pi by guessing the bits and observing whether the correlation check passes. In the second case,
we have a bound on the amount of information that the adversary can learn. In particular, the total amount
of the bits of ∆j learned by the adversary is bounded by cj = κ − dj, since |S∆j| = 2dj and S∆j restricted
to the bits corresponding to Hˆs has entropy at least dj.
Let x1,j, . . . , x(cid:96)(cid:48),j be the bits in vector ˆs. Then, for k ∈ [(cid:96)(cid:48)], we can write the MAC with an error received
j[xk,j] = Kj[xk,j]+xk,j·∆j +ek,j∗∆j, where ek,j = (xk,j, . . . , xk,j)+xk,j ∈
by the malicious party Pi as M(cid:48)
2 is an adversarially chosen error vector. For each k ∈ [(cid:96)(cid:48)], by the deﬁnition of Hs and ek,j, we have that
Fκ
ek,j[l] = ek,j[l(cid:48)] for all l, l(cid:48) ∈ Hs, for any s ∈ {ˆxj,1, . . . , ˆxj,κ}. Note that ek,j[l] = 0 for all l ∈ Hˆs, as
xk,j[l] = xk,j for all l ∈ Hˆs. This implies that ek,j[l] · ∆j[l] = 0 for all l ∈ Hˆs. Lemma 2 implies that
there exists only one s = ˆs such that the second case happens, except with probability 2−κ. 2 That is, for
s (cid:54)= ˆs, the ﬁrst case occurs in Lemma 2 except with probability 2−κ. In this case, for all k ∈ [(cid:96)(cid:48)] and l ∈ Hs,
ek,j[l] · ∆j[l] is known by the adversary by the fact that ∆j ∈ S∆j . Therefore, for k ∈ [(cid:96)(cid:48)], the adversary
knows ek,j ∗ ∆j and thus the correct MAC Mj[xk,j] = Kj[xk,j] + xk,j · ∆j. In addition, we will use the
following lemma.
Lemma 3 ([KOS15]). Let A be a random (t + m) × t matrix over F2 where m > 0. Then A has rank t
except with probability less than 2−m.
Analysis of consistency check: Now, we assume that the outputs have the correct correlation, i.e., Mj[xk,j] =
Kj[xk,j] + xk,j · ∆j for all k ∈ [(cid:96)(cid:48)], j (cid:54)= i. When calling the (extend) command of FCOTe, the malicious
party Pi may use inconsistent inputs xk for k ∈ [(cid:96)(cid:48)] with two different honest parties. In particular, we
deﬁne {xk,j}k∈[(cid:96)(cid:48)] to be the actual bits used by Pi when calling FCOTe with an honest party Pj. Without
loss of generality, we choose an honest party Pj0 and ﬁx xk = xk,j0 for each k ∈ [(cid:96)(cid:48)]. For each j ∈ H and
k ∈ [(cid:96)(cid:48)], xk,j can be denoted as xk,j = xk + δk,j ∈ F2, where δk,j0 = 0. Based on Lemma 2 and the above
analysis, we prove that the malicious party Pi cannot use inconsistent values xk,j to different honest parties
in the following lemma.
Lemma 4. For a corrupt party Pi and every honest party Pj /∈ A, Pi and Pj holds a secret sharing of
xk · ∆j for each k ∈ [(cid:96)(cid:48)]. In other words, for each k ∈ [(cid:96)(cid:48)] and j /∈ A, δk,j = 0.
Proof. For each j /∈ A, we deﬁne the MAC of corrupt party Pi on value(cid:80)(cid:96)(cid:48)
(cid:80)(cid:96)(cid:48)
k=1 χk · Mj[xk,j], and the local key of honest party Pj on the same value as Kj[yi] =(cid:80)(cid:96)(cid:48)
yi =(cid:80)(cid:96)(cid:48)
k=1 χk · xk,j as Mj[yi] =
k=1 χk · Kj[xk,j].
For each j /∈ A, k ∈ [(cid:96)(cid:48)], we have that Mj[xk,j] = Kj[xk,j] + xk,j · ∆j known by the adversary corrupting
k=1 χk · xk, and send an incorrect MAC (cid:98)Mj[yi] = Mj[yi] + Ei,j to every honest party Pj. If Pj /∈ A
Pi. In Step 6 of protocol ΠaBit, Pi may broadcast an incorrect value ˜yi = yi + ei to other parties where
2One can easily prove if there are two different s, s(cid:48) satisfying the second case of Lemma 2, then the correlation check will not
pass except with probability 2−κ.
31
does not abort, then (cid:98)Mj[yi] = Kj[yi] + ˜yi · ∆j. Thus, we have:
Mj[yi] + Ei,j = Kj[yi] + yi · ∆j + ei · ∆j
⇔ Ei,j + yi∆j + ei∆j = Mj[yi] + Kj[yi] =
(cid:17) · ∆j
χk · xk,j
(cid:16) (cid:96)(cid:48)(cid:88)
(cid:1)(cid:17) · ∆j