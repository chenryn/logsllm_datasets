maps each C-based unsafe pointer into specific secure type in Rust.
Bytes constructs the concrete memory in the format of arrays for se-
curing memory accesses. The rest two notations ContiдuousMemory
and Sanitizable[T] are provided for handling the conversion be-
tween other unsafe C-based types T and the proposed Bytes. More-
over, Rust-SGX provides solid formalization to prove the four nota-
tions’ security with the system defined in CCured [38].
Since RusTEE shares a similar binding solution as Rust-SGX, we
adopt all four principles proposed in Rust-SGX. For example, we
provide a specific handler for each critical data type. We further
realize the other three security principles to bind the service APIs
Figure 2: RusTEE Architecture
Though the first option offers better independence and memory-
safety, it faces two non-trivial challenges when implemented on
the ARM TrustZone-assisted platforms. The first challenge is that
some TEE’s system services involve the TrustZone-specific opera-
tions (e.g., reading a secure timer), while these operations can only
be implemented with the explicit essential ARM instructions that
are unavailable in the Rust’s standard supports. Another challenge
is that for some TEE’s system services (e.g., cryptography), the
C-based libraries have better performance than the Rust ones. In
consideration of these challenges, we propose to provide the SDK
as the binding solution. After systematized studying all critical data
structure and function definitions of these additionally involved
libraries, RusTEE converts all the interfaces into Rust-safe style to
resolve the Challenge-2.
Meanwhile, TAs used to face the challenge of handling the com-
mands and parameters that are passed-in via the cross-world com-
munication channel, since these data are generated by the untrusted
REE. By carefully reviewing the calling convention of existing cross-
world communications, we redesign the connection interface be-
tween the TEE’s system communication component (TEE Agent)
and TAs. The redesigned communication interfaces promise that all
parameters are used under secure standards and therefore handle
Challenge-3.
Finally, RusTEE provides the REE-side SDK, which follows a sim-
ilar scheme of the TEE-side SDK, as a complementary component
to regulate the behaviors of CAs. Note that the security of TA does
not depend on whether the REE utilizes the REE-side SDK or not,
and the REE-side SDK is provided only in the case that benign CA
developers want to improve a CA’s memory-safety. In the following
section, we focus on presenting our methodology for mitigating the
architectural issues for the Rust-based TAs, particularly, securing
the widely exposed system-service APIs (hereinafter referred to as
"service APIs") and cross-world communication channel.
4.3 Secure System-service APIs
In the design of RusTEE, the Trusted OS implements TEE’s system
services as the C-based libraries for the best practicality, and the
SecureMonitorREEKernelTEEUserTEEServiceLibrariesRust-safeTA 1Rust-safeCA 1Rust-safeCA 2REEAgentTEEKernelREEUser Rust-safeTA 2Rich OSTrusted OSTEEAgentRust-safe REESDKStandardLibraryRust-safe TEESDKCross-worldCommunication446ACSAC ’20, December 07–11, 2020, Online
Shengye Wan, Mingshen Sun, Kun Sun, Ning Zhang, and Xu He
securely. Similar to the solution of Rust-SGX, the realizations of
these principles require manual effort to review all libraries’ critical
data structures and understand the associated memory utilization.
To the best of our knowledge, there is no automatic mechanism that
can promise a perfect conversion from C-based APIs to Rust-based
ones. Hence, we claim such a manual process is acceptable and has
the most reliable security-promise for the bonded APIs.
Secure GPD-defined APIs. After thoroughly reviewing all APIs
defined in the GPD specification, we identified two additional is-
sues besides the four principles proposed by Rust-SGX. The first
issue is that some TEE Internal APIs have complicated dependency-
checks. For example, an API-a may only be allowed to be invoked
when the API-b returns a specific value-c as the running result.
To avoid the case that the developer misses any dependency-check,
we enforce every depending API (e.g., API-a) to conduct such check
automatically, and therefore promise the function of API-a is only
executed when the required condition is met. For any case that the
dependency-check fails, GPD specification defines the invocation
on API should be interrupted, and we relay the unexpected status
to the Rust error-handling process.
The second issue is that some GPD-defined services require mul-
tiple APIs to work in a specific sequence, especially for memory
allocation and release. However, TAs can be programmed to in-
voke these APIs in the wrong order, or even missing some critical
steps. To avoid the TA misuses any memory object, we enforce the
Resource-Acquisition-Is-Initialization (RAII) [42] standard on such
APIs. According to the RAII standard, any data structure, named
as struct in Rust, should be promised with a correct initialization.
Moreover, when the developer finished the task on the struct,
the data structure should provide the correct function to free the
resource as well. By enforcing the RAII standard on critical data
structures, the memory-related APIs are promised to get execution
in the correct sequence.
We present an example for applying our GPD-specific princi-
ples in List 1, which is a redesigned Rust-based data structure
OperationHandle used in TEE’s encryption-related operations.
As shown in line #9 and line #10, when the structure is allocated,
the TA can only move forward if the allocation’s return value
is raw::TEE_SUCCESS, while all the other return values are for-
warded to Err handler. In this case, as long as developers utilize
the redesigned API OperationHandle::allocate to acquire the
data, the API is promised to check any “potential dangerous return
value” and avoid the first issue. Furthermore, when the TA finishes
using the allocated data structure, the data is freed automatically
because the Rust compiler would execute the function Drop (from
line #17 to line #23) by default. Therefore, the redesigned struct
OperationHandle is protected from the second issue.
4.4 Secure Cross-world Communication
As an architectural feature of TrustZone-assisted TEE systems, the
cross-world communication channel supports the TEE-side TAs to
work coordinately with the REE-side CAs. According to the GPD
specification, four key data structures are defined and used across
the entire CA/TA cooperation process, namely Context, Session,
Command and Parameter. Starting from the beginning, the CA is
required to register its Context in the TEE, without requesting any
specific TA to collaborate. Next, the same CA needs to set up a
connected Session between it and a specific TA, and this Session is
only valid under a registered Context. Once the Session has been
correctly set up, the CA can make the following requests to the
TA via passing different Commands. If any Command requires the
usage of cross-world shared memory (e.g., sharing the plaintex-
t/ciphertext across REE and TEE worlds), the Command can be
passed with at most four pairs of Parameters. Each Parameter can
represent either a numeric value or a memory chunk. For the entire
process of a cross-world communication, we identify three security
issues of these four data structures and propose the corresponding
security enhancements.
Secure Context’s and Session’s Lifetime. One premise of suc-
cessful communication is that the two fundamental data structures,
namely the Context and the Session, are correctly initialized. How-
ever, this prerequisite can get challenged in several ways with the
GPD specification. According to the GPD specification, these two
structures are referred to as unsafe raw pointers, and the caller
function has no way to tell whether the callee structure is correctly
initialized or not. Moreover, a wrongly used structure may lead to a
compromised communication scenario. For example, a C-based CA
can get manipulated to connect its Session with another malicious
CA’s Context without getting any error. In such a case, any further
operation may get exposed or even manipulated by the malicious
CA. To protect the usages on these two structures, we redesign
the Context and Session structure as Rust type-safe structures,
which can promise the structures are always adequately initialized
before use. Furthermore, We take advantage of Rust’s Drop func-
tion to promise these two structures’ resources are released as the
ACSAC’20,December07–11,2020,OnlineShengyeWan,MingshenSun,KunSun,NingZhang,andXuHeSinceRusTEEsharesasimilarbindingsolutionasRust-SGX,weadoptallfourprinciplesproposedinRust-SGX.Forexample,weprovideaspecifichandlerforeachcriticaldatatype.WefurtherrealizetheotherthreesecurityprinciplestobindtheserviceAPIssecurely.SimilartothesolutionofRust-SGX,therealizationsoftheseprinciplesrequiremanualefforttoreviewalllibraries’criticaldatastructuresandunderstandtheassociatedmemoryutilization.Tothebestofourknowledge,thereisnoautomaticmechanismthatcanpromiseaperfectconversionfromC-basedAPIstoRust-basedones.Hence,weclaimsuchamanualprocessisacceptableandhasthemostreliablesecurity-promiseforthebondedAPIs.SecureGPD-definedAPIs.AfterthoroughlyreviewingallAPIsdefinedintheGPDspecification,weidentifiedtwoadditionalis-suesbesidesthefourprinciplesproposedbyRust-SGX.ThefirstissueisthatsomeTEEInternalAPIshavecomplicateddependency-checks.Forexample,anAPI-amayonlybeallowedtobeinvokedwhentheAPI-breturnsaspecificvalue-castherunningresult.Toavoidthecasethatthedevelopermissesanydependency-check,weenforceeverydependingAPI(e.g.,API-a)toconductsuchcheckautomatically,andthereforepromisethefunctionofAPI-aisonlyexecutedwhentherequiredconditionismet.Foranycasethatthedependency-checkfails,GPDspecificationdefinestheinvocationonAPIshouldbeinterrupted,andwerelaytheunexpectedstatustotheRusterror-handlingprocess.ThesecondissueisthatsomeGPD-definedservicesrequiremul-tipleAPIstoworkinaspecificsequence,especiallyformemoryallocationandrelease.However,TAscanbeprogrammedtoin-voketheseAPIsinthewrongorder,orevenmissingsomecriticalsteps.ToavoidtheTAmisusesanymemoryobject,weenforcetheResource-Acquisition-Is-Initialization(RAII)[42]standardonsuchAPIs.AccordingtotheRAIIstandard,anydatastructure,namedasstructinRust,shouldbepromisedwithacorrectinitialization.Moreover,whenthedeveloperfinishedthetaskonthestruct,thedatastructureshouldprovidethecorrectfunctiontofreetheresourceaswell.ByenforcingtheRAIIstandardoncriticaldatastructures,thememory-relatedAPIsarepromisedtogetexecutioninthecorrectsequence.WepresentanexampleforapplyingourGPD-specificprinciplesinList1,whichisaredesignedRust-baseddatastructureOpera-tionHandleusedinTEE’sencryption-relatedoperations.Asshowninline#9andline#10,whenthestructureisallocated,theTAcanonlymoveforwardiftheallocation’sreturnvalueisraw::TEE_-SUCCESS,whilealltheotherreturnvaluesareforwardedtoErrhandler.Inthiscase,aslongasdevelopersutilizetheredesignedAPIOperationHandle::allocatetoacquirethedata,theAPIispromisedtocheckany“potentialdangerousreturnvalue”andavoidthefirstissue.Furthermore,whentheTAfinishesusingtheallo-cateddatastructure,thedataisfreedautomaticallybecausetheRustcompilerwouldexecutethefunctionDrop(fromline#17toline#23)bydefault.Therefore,theredesignedstructOperationHandleisprotectedfromthesecondissue.4.4SecureCross-worldCommunicationAsanarchitecturalfeatureofTrustZone-assistedTEEsystems,thecross-worldcommunicationchannelsupportstheTEE-sideTAstoworkcoordinatelywiththeREE-sideCAs.AccordingtotheGPD1/*Implementthedetailsofthestructuretoenforcesecurityprinciples*/↩→23implOperationHandle{4fnallocate(algo:AlgorithmId,5mode:OperationMode,6max_key_size:usize)->Result{7matchunsafe{raw::TEE_AllocateOperation(...)}8{9/*Checktheallocationresultautomatically*/10raw::TEE_SUCCESS=>Ok(Self::from_raw(raw_handle)),11code=>Err(Error::from_raw_error(code)),12}13}14...15}1617/*Enforcetheresourcereleasewiththeassistanceofthelanguage'stypesecurity*/↩→18implDropforOperationHandle{19fndrop(&mutself){20...21unsafe{raw::TEE_FreeOperation(self.handle());}22...23}24}Listing1:ARedesignedEncryption-relatedDataStructurespecification,fourkeydatastructuresaredefinedandusedacrosstheentireCA/TAcooperationprocess,namelyContext,Session,CommandandParameter.Startingfromthebeginning,theCAisrequiredtoregisteritsContextintheTEE,withoutrequestinganyspecificTAtocollaborate.Next,thesameCAneedstosetupaconnectedSessionbetweenitandaspecificTA,andthisSessionisonlyvalidunderaregisteredContext.OncetheSessionhasbeencorrectlysetup,theCAcanmakethefollowingrequeststotheTAviapassingdifferentCommands.IfanyCommandrequirestheusageofcross-worldsharedmemory(e.g.,sharingtheplaintex-t/ciphertextacrossREEandTEEworlds),theCommandcanbepassedwithatmostfourpairsofParameters.EachParametercanrepresenteitheranumericvalueoramemorychunk.Fortheentireprocessofacross-worldcommunication,weidentifythreesecurityissuesofthesefourdatastructuresandproposethecorrespondingsecurityenhancements.SecureContext’sandSession’sLifetime.Onepremiseofsuc-cessfulcommunicationisthatthetwofundamentaldatastructures,namelytheContextandtheSession,arecorrectlyinitialized.How-ever,thisprerequisitecangetchallengedinseveralwayswiththeGPDspecification.AccordingtotheGPDspecification,thesetwostructuresarereferredtoasunsaferawpointers,andthecallerfunctionhasnowaytotellwhetherthecalleestructureiscorrectlyinitializedornot.Moreover,awronglyusedstructuremayleadtoacompromisedcommunicationscenario.Forexample,aC-basedCAcangetmanipulatedtoconnectitsSessionwithanothermaliciousCA’sContextwithoutgettinganyerror.Insuchacase,anyfurtheroperationmaygetexposedorevenmanipulatedbythemalicious6447RusTEE: Developing Memory-Safe ARM TrustZone Applications
ACSAC ’20, December 07–11, 2020, Online
in the Rust-safe style. Moreover, RusTEE is configurable to build
applications for two most popular ARM architectures: AArch32
and AArch64.
5.1 Porting Rust into OP-TEE
Though Rust officially provides the compilation-support on multi-
ple platforms, none of the OP-TEE-supported platforms is recog-
nized by Rust yet. Moreover, in order to balance the functionalities
and Trusted Computing Base (TCB) size of TEE, OP-TEE redesigns
its basic library libutil, which makes it unmatched to the Rust
official crate std::libc. To resolve these challenges, we first mod-
ify the Rust fundamental components compiler-builtins and
rust/libstd to add OP-TEE as the supported targets, which can
be further configured based on the architectural features of arm
(AArch32) or aarch64 (AArch64). Furthermore, we manually in-
spect the OP-TEE’s basic library libutil and match it with the
libc crate. As the libutil does not fully implement all featured
functions presented in libc, the matching process is realized as a
best-effort solution by acceptably sacrificing some functionalities.
For example, due to the implementation limitation, a TA runs in
OP-TEE OS is implemented as a single-thread task, and the kernel
does not provide any multi-threading management. In this case,
whenever a Rust program invokes the thread-related operations, we
raise panic messages for these operations to remind the developers.
GPD-defined serialization and, hence, promise the corresponding
data is erased after use.
Secure Parameter’s Type-safety. We discovered two security
issues of the communication data Parameter. First, the Parameter is
defined as type-unsafe in the GPD specification, because TAs access
Parameters without a clearly defined type. In this case, a TA can use
a numerical Parameter as a memory pointer, or vice versa. To pro-
vide Parameter as type-safe, we convert all existing Parameter use
cases into two specific Rust-safe data types, namely int and slice,
to pass the numerical value and memory chunks, respectively. With
the enforced type definition, any misusing will get detected during
the compilation stage. The use of slice can also regulate CA’s
behavior to share the memory chunks. Previously, REE allocates
all memory buffers for a Parameter. Then REE shares the memory
region with the TEE by providing the corresponding memory’s raw
pointer and size. This memory-sharing process is unsafe since the
attacker can manipulate the pointer and size to mislead the TA to
access the memory out-of-scope. By converting the Parameter as
Rust slice, the memory pointer and associated size are guaranteed
to get a securely typecasting, which can prevent TAs from further
being manipulated to access the wrong memory region.
Secure Parameter’s Mutability. Another security concern of
Parameter is that a TA may access the TA with incorrect read/write
permissions. The GPD specification defines three permissions of
Parameters as input, output, and inout, and the Parameters are
supposed to get accessed as read-only, write-only, and read/write,
respectively. However, a GPD-defined communication channel pro-
vides these permissions as independent flags from the correspond-
ing variables, which makes these permissions easily violated. For
example, even a memory chunk is designed as a read-only input
Parameter, a TA can still write on this Parameter as long as the
developer does not manually check the Parameter’s permission.
In Rust, all the read and write permissions are managed via the
mutability feature by default. By taking advantage of the mutability,
RusTEE enforces the permission-check for every Parameter and
therefore prevents future violations.
5 SYSTEM IMPLEMENTATION
We develop the prototype of RusTEE based on the project OP-
TEE [34], which is one of the most well-known open-sourced TEE
projects for ARM platforms. OP-TEE implements its Trusted OS
and associated software interfaces in compliance with the GPD
specification. Currently, the OP-TEE project is available for many
ARM TrustZone-assisted devices [33], including the simulation
environment QEMU [39], and experimental development boards
such as HiKey family [1], Raspberry Pi 3 [40], and Juno [3]. In
the following section, we present our modifications to the OP-
TEE project for two aspects, namely porting Rust into OP-TEE
and binding OP-TEE’s Internal APIs (including service APIs and
cross-world communication APIs). Meanwhile, we implement the
REE-side SDK and rewrite all OP-TEE official C-based examples in
Rust. Our rewritten examples demonstrate RusTEE’s practicality.
Note that we already release RusTEE as an open-source project on
GitHub1, and the latest version supports building both TA and CA
1The project has been evaluated as an ACM Reusable Artifact by ACSAC 2020.
Access RusTEE project: https://github.com/sccommunity/rust-optee-trustzone-sdk
Figure 3: Porting Rust into OP-TEE
Besides the three discussed components of Rust’s foundation
layer, we also provide one extra component optee-utee-sys to
bind OP-TEE’s specific library libutee for providing functional-
ities of all Internal APIs. We further wrap the raw component
optee-utee-sys as a safe Rust crate optee-utee. The details of
this binding can be found in Section 5.2. By integrating all the foun-
dation components along with optee-utee, RusTEE provides the
comprehensive functions for the TA developers to program a TA in
Rust-safe style. Finally, RusTEE also supports developers to import
trusted third-party Rust crates into the TA development. The entire
implementation structure is presented in Figure 3.
5.2 Binding OP-TEE’S TEE Internal APIs
GlobalPlatform TEE Internal Core API Specification [19] defines
six types of the necessary APIs for TA development. The first type
TrustedApplicationoptee-uteecompiler-builtinslibcrust/libstdoptee-utee-syslibutillibuteeC libraryRust foundation layerRust cratesthird-partycrates448ACSAC ’20, December 07–11, 2020, Online
Shengye Wan, Mingshen Sun, Kun Sun, Ning Zhang, and Xu He
Table 1: RusTEE Component’s LOC
Component