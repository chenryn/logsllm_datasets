with empirical results in the following experiments. In each
of the experiments we report in Fig. 6, we instrumented the
OS kernel to trigger interrupts to preempt the reference-
clock thread, inducing roughly 5000 AEXs on that thread.
The reference-clock thread was implemented with a ﬁxed
unit execution time, v ≈ 30 CPU cycles, but we varied the
value of N in each of the experiments. The gray bars in
Fig. 6 represent our theoretical estimates of the probabil-
ity that an AEX will not induce a TSX abort on the clock
thread (calculated for the choice of v and N in the exper-
iment), and the white bars represent the empirical proba-
bilities that an AEX did not induce a TSX abort in the
experiments. The empirical probability was calculated by
comparing the time stamps of transaction aborts (read in
an OCall from the transaction abort handler) and AEX
time stamps read in the Asynchronous Exit handler Pointer
(AEP), which is a piece of code that is called when an AEX
resumes, right before re-entering the enclave. If the transac-
tion abort took place shortly (less than 5000 cycles) after the
AEX, then it is considered to be caused by the AEX. The
reported empirical probability is the ratio of the number of
AEXs that did not cause an abort (i.e., were not followed
by a TSX abort in the next 5000 cycles) to the total number
of AEXs.
By comparing these values, we can see that our theoreti-
cal estimation is close to the empirical probability when N
is small (e.g., 4 or 8), but when N increases, the theoretical
value of the vulnerable window in which the reference-clock
thread can incur an AEX without causing a TSX abort drops
faster than the empirical results suggest. We conjecture that
the result has to do with our inability to accurately mea-
sure the execution time of one single statement outside the
transaction due to the CPU’s speculative execution, which
is critical in our calculation of the theoretical probability.
Nevertheless, the experiments suggest the theoretical values
1.00
0.95
0.90
0.85
0.80
0.75
0.70
u m e ri c
n
o rt
s
s
o rt
s tri n
g
n
e l d
e m u l a ti o
f o
u ri e r
s i g
s
a
b it ﬁ
f p
n t
n m e
e
i d
n
s iti o
o
a
h
u ff m a
n
e t
o m p
u r a l n
c
e
d
n
e
l u
Precision
Recall
Figure 7: Precision and recall of clock-AEX alarms during
ten nbench applications.
are close to empirical ones, especially when N = 8, which is
the value we used in the rest of our experiments.
A TSX abort does not itself raise a clock-AEX alarm;
rather, the application thread raises a clock-AEX alarm upon
noticing that at least one TSX abort occurred on the clock
thread since the application thread last consulted the clock.
Moreover, a TSX abort can occur for other reasons than an
AEX occurring on the clock thread. As such, a clock-AEX
alarm can reﬂect zero, one, or multiple AEXs on the clock
thread. To measure the accuracy of clock-AEX alarms, then,
we adapt deﬁnitions of precision and recall to our case as
follows. First, we estimate a clock-AEX alarm to be accu-
rate if at least one AEX of the clock thread preceded it by
at most δ clock cycles, where δ is empirically determined as
the longest execution time of any execution pathlet in the
CFG of the program (and so is the maximum duration be-
tween clock accesses by the application thread for measuring
the time to execute a pathlet). The precision of clock-AEX
alarms is then the ratio of the number of accurate clock-
AEX alarms to the total number of clock-AEX alarms. The
recall of clock-AEX alarms is the ratio of the number of
clock-thread AEXs that were followed within δ cycles by a
clock-AEX alarm (i.e., that were accurately detected) to the
total number of clock-thread AEXs.
The precision and recall of clock-AEX alarms are shown
in Fig. 7, when the shielded program (running on the appli-
cation thread) was one of ten nbench applications [4]. Each
bar represents an average calculated over ten runs. In each
run, about 5000 AEXs were triggered on the clock thread.
As can be seen there, the recall of clock-AEX alarms was
often close to 1.0 and is above 0.95 in all cases. Precision
was at least 0.83 in all cases but one (where it was 0.78).
The somewhat lower precision of clock-AEX alarms reﬂects
the fact that the clock thread’s TSX transactions can abort
for reasons other than AEXs, mainly due to eﬀects of other
applications running alongside it. It remains future work to
mitigate these eﬀects.
7.2.2 Detecting AEXs on the Application Thread
To show the shielded program cannot be preempted with-
out being detected, we conducted the following experiments.
The OS started the shielded application in the enclave and
then periodically injected an interrupt to induce AEXs on
the application thread. After each interrupt, the OS waited
for long enough time to make sure the shielded program
consulted its reference clock at least once (so that it had an
opportunity to detect the AEX) before triggering the next
interrupt.
Similarly to clock-AEX alarms, we measure the accuracy
of app-AEX alarms using precision and recall. We estimate
151.00
0.95
0.90
u m e ri c
n
o rt
s
s
o rt
s tri n
g
n
e l d
e m u l a ti o
f o
u ri e r
s i g
s
a
b it ﬁ
f p
n t
n m e
e
i d
n
s iti o
o
a
h
u ff m a
n
e t
o m p
u r a l n
c
e
d
n
e
l u
Precision
Recall
1.00
0.95
0.90
0.85
0.80
u m e ri c
n
o rt
s
s
o rt
s tri n
g
n
e l d
e m u l a ti o
f o
u ri e r
s i g
s
a
b it ﬁ
f p
n t
n m e
e
i d
n
s iti o
o
a
h
u ff m a
n
e t
o m p
u r a l n
c
e
d
n
e
l u
Precision
Recall
Figure 8: Precision and recall of app-AEX alarms during
ten nbench applications.
an app-AEX alarm to be accurate if it was raised within δ
cycles following an AEX of the application thread. Then,
the app-AEX alarm precision was computed as the ratio of
the accurate app-AEX alarms to the total number of app-
AEX alarms. To deﬁne app-AEX alarm recall, we estimate
an application-thread AEX to have been undetectable if it
was followed within δ cycles by a clock-AEX alarm (and no
intervening app-AEX alarm), as the clock-AEX alarm sug-
gests that the clock thread was interrupted while the path-
let interrupted by the AEX was executing. The app-AEX
alarm recall was computed as the ratio of the accurately
detected application AEXs (i.e., followed by an app-AEX
alarm within δ cycles) to the total number of detectable ap-
plication AEXs.
In Fig. 8, we show the precision and recall of app-AEX
alarms for ten programs in the nbench benchmark suite.
The reported results are averages of ten runs. In each run,
about 5000 to 6000 AEXs were triggered on the application
thread. We can see from the ﬁgure that both precision and
recall were at least 0.95 for all applications.
7.2.3 Manipulated CPU Speeds
A more advanced adversary may slow down the reference-
clock CPU core to its minimum frequency fmin and speed up
the application core to its maximum frequency fmax, which
on our platform are fmin = 0.8GHz and fmax = 2.6GHz,
respectively.
In this way, the attacker will minimize the
likelihood that its application-thread AEXs result in app-
AEX alarms. We made these adjustments by editing a ﬁle
in procfs5 and then re-ran the experiments in Sec. 7.2.2
again under this new setup. The results are shown in Fig. 9,
which suggest modest changes in app-AEX alarm precision
and recall. Even despite this manipulation, precision and
recall remained above 0.96 and 0.91, respectively. As such,
we conclude that the adversary manipulating core speeds is
not a signiﬁcant threat to D´ej`a Vu.
7.3 Performance Evaluation
We evaluated the performance overhead of D´ej`a Vu by
measuring the normalized execution time of each of the ten
nbench applications. Speciﬁcally, we compiled the nbench
suite with LLVM and Clang. The baseline execution time
was measured with the benchmark compiled without any in-
strumentation, and another version was compiled with D´ej`a
Vu’s instrumentation code for AEX detection. As both ver-
sions were compiled with LLVM, the increase in the runtime
of the instrumented version over that of the baseline version,
divided by the runtime of the baseline version, is the (rel-
ative) overhead of the instrumentation itself. The average
5
/sys/devices/system/cpu/cpu0/cpufreq/scaling setspeed
Figure 9: Precision and recall of app-AEX alarms during ten
nbench applications when the application core and reference-
clock core were set to run at their maximum and minimum
frequencies, respectively.
d
a
e
h
r
e
v
O
0.05
0.04
0.03
0.02
0.01
0.00
u m e ri c
n
o rt
s
s
o rt
s tri n
g
e l d
b it ﬁ
f p
n
e m u l a ti o
f o
u ri e r
s i g
s
a
n t
n m e
a
e
i d
u ff m a
h
n
n
e
n
s iti o
o
e t
o m p
c
u r a l n
e
d
l u
Figure 10: Performance overhead of D´ej`a Vu on nbench
applications.
performance overheads are shown in Fig. 10. We can see