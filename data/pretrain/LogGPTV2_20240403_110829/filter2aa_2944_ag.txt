Secure API development
    var path = Paths.get(                                 
        Main.class.getResource("/schema.sql").toURI());   
    database.update(Files.readString(path));              
  }
}
2.2
Developing the REST API
Now that you’ve got the database in place, you can start to write the actual REST APIs
that use it. You’ll flesh out the implementation details as we progress through the
chapter, learning secure development principles as you go.
 Rather than implement all your application logic directly within the Main class,
you’ll extract the core operations into several controller objects. The Main class will
then define mappings between HTTP requests and methods on these controller
objects. In chapter 3, you will add several security mechanisms to protect your API,
and these will be implemented as filters within the Main class without altering the con-
troller objects. This is a common pattern when developing REST APIs and makes the
code a bit easier to read as the HTTP-specific details are separated from the core logic
of the API. Although you can write secure code without implementing this separation,
it is much easier to review security mechanisms if they are clearly separated rather
than mixed into the core logic.
DEFINITION
A controller is a piece of code in your API that responds to requests
from users. The term comes from the popular model-view-controller (MVC)
pattern for constructing user interfaces. The model is a structured view of
data relevant to a request, while the view is the user interface that displays that
data to the user. The controller then processes requests made by the user and
updates the model appropriately. In a typical REST API, there is no view com-
ponent beyond simple JSON formatting, but it is still useful to structure your
code in terms of controller objects. 
2.2.1
Creating a new space
The first operation you’ll implement is to allow a user to create a new social space,
which they can then claim as owner. You’ll create a new SpaceController class that
will handle all operations related to creating and interacting with social spaces. The
controller will be initialized with the Dalesbred Database object that you created in
listing 2.3. The createSpace method will be called when a user creates a new social
space, and Spark will pass in a Request and a Response object that you can use to
implement the operation and produce a response. 
 The code follows the general pattern of many API operations. 
1
First, we parse the input and extract variables of interest. 
2
Then we start a database transaction and perform any actions or queries requested.
3
Finally, we prepare a response, as shown in figure 2.3. 
Load table 
definitions from 
schema.sql.
35
Developing the REST API
In this case, you’ll use the json.org library to parse the request body as JSON and
extract the name and owner of the new space. You’ll then use Dalesbred to start a
transaction against the database and create the new space by inserting a new row into
the spaces database table. Finally, if all was successful, you’ll create a 201 Created
response with some JSON describing the newly created space. As is required for a
HTTP 201 response, you will set the URI of the newly created space in the Location
header of the response.
 Navigate to the Natter API project you created and find the src/main/java/com/
manning/apisecurityinaction folder. Create a new sub-folder named “controller”
under this location. Then open your text editor and create a new file called Space-
Controller.java in this new folder. The resulting file structure should look as follows,
with the new items highlighted in bold:
natter-api
├── pom.xml
└── src
    ├── main
    │   └── java
    │       └── com
    │           └── manning
    │               └── apisecurityinaction
    │                   ├── Main.java   
    │                   └── controller
    │                       └── SpaceController.java
    └── test
        └── …
Open the SpaceController.java file in your editor again and type in the contents of list-
ing 2.4 and click Save. 
WARNING
The code as written contains a serious security vulnerability, known
as an SQL injection vulnerability. You’ll fix that in section 2.4. I’ve marked the
broken line of code with a comment to make sure you don’t accidentally copy
this into a real application.
Parse
input
Perform
operation
Prepare
output
Figure 2.3
An API operation can generally be separated into three phases: 
first we parse the input and extract variables of interest, then we perform 
the actual operation, and finally we prepare some output that indicates the 
status of the operation.
36
CHAPTER 2
Secure API development
package com.manning.apisecurityinaction.controller;
import org.dalesbred.Database;
import org.json.*;
import spark.*;
public class SpaceController {
  private final Database database;
  public SpaceController(Database database) {
    this.database = database;
  }
  public JSONObject createSpace(Request request, Response response)
      throws SQLException {
    var json = new JSONObject(request.body());     
    var spaceName = json.getString("name");
    var owner = json.getString("owner");
    return database.withTransaction(tx -> {    
      var spaceId = database.findUniqueLong(         
          "SELECT NEXT VALUE FOR space_id_seq;");    
      // WARNING: this next line of code contains a
      // security vulnerability!
      database.updateUnique(
          "INSERT INTO spaces(space_id, name, owner) " +
              "VALUES(" + spaceId + ", '" + spaceName + 
              "', '" + owner + "');");
      response.status(201);                                
      response.header("Location", "/spaces/" + spaceId);   
      return new JSONObject()
          .put("name", spaceName)
          .put("uri", "/spaces/" + spaceId);
    });  
  }
}
2.3
Wiring up the REST endpoints
Now that you’ve created the controller, you need to wire it up so that it will be called
when a user makes a HTTP request to create a space. To do this, you’ll need to create
a new Spark route that describes how to match incoming HTTP requests to methods in
our controller objects. 
DEFINITION
A route defines how to convert a HTTP request into a method call
for one of your controller objects. For example, a HTTP POST method to the
/spaces URI may result in a createSpace method being called on the Space-
Controller object.
Listing 2.4
Creating a new social space
Parse the request payload and 
extract details from the JSON.
Start a database 
transaction.
Generate a fresh ID 
for the social space.
Return a 201 
Created status 
code with the URI 
of the space in the 
Location header.
37
Wiring up the REST endpoints
In listing 2.5, you’ll use static imports to access the Spark API. This is not strictly neces-
sary, but it’s recommended by the Spark developers because it can make the code
more readable. Then you need to create an instance of your SpaceController object
that you created in the last section, passing in the Dalesbred Database object so that it
can access the database. You can then configure Spark routes to call methods on the
controller object in response to HTTP requests. For example, the following line of
code arranges for the createSpace method to be called when a HTTP POST request is
received for the /spaces URI:
post("/spaces", spaceController::createSpace);
Finally, because all your API responses will be JSON, we add a Spark after filter to set
the Content-Type header on the response to application/json in all cases, which is
the correct content type for JSON. As we shall see later, it is important to set correct
type headers on all responses to ensure that data is processed as intended by the cli-
ent. We also add some error handlers to produce correct JSON responses for internal
server errors and not found errors (when a user requests a URI that does not have a
defined route).
TIP
Spark has three types of filters (figure 2.4). Before-filters run before the
request is handled and are useful for validation and setting defaults. After-
filters run after the request has been handled, but before any exception
handlers (if processing the request threw an exception). There are also
afterAfter-filters, which run after all other processing, including exception
handlers, and so are useful for setting headers that you want to have present
on all responses.
Request
handler
Before-
ﬁlters
Request
After-ﬁlters
afterAfter-
ﬁlters
Exception
response
Exception
handler
Normal
response
Figure 2.4
Spark before-filters run before the request is processed by your 
request handler. If the handler completes normally, then Spark will run any 
after-filters. If the handler throws an exception, then Spark runs the matching 
exception handler instead of the after-filters. Finally, afterAfter-filters are 
always run after every request has been processed.
38
CHAPTER 2
Secure API development
Locate the Main.java file in the project and open it in your text editor. Type in the
code from listing 2.5 and save the new file.
package com.manning.apisecurityinaction;
import com.manning.apisecurityinaction.controller.*;
import org.dalesbred.Database;
import org.h2.jdbcx.JdbcConnectionPool;
import org.json.*;
import java.nio.file.*;
import static spark.Spark.*;     
public class Main {
  public static void main(String... args) throws Exception {
    var datasource = JdbcConnectionPool.create(
        "jdbc:h2:mem:natter", "natter", "password");
    var database = Database.forDataSource(datasource);
    createTables(database);
    var spaceController = 
        new SpaceController(database);     
    post("/spaces",                       
        spaceController::createSpace);    
    after((request, response) -> {         
      response.type("application/json");   
    });
    internalServerError(new JSONObject()
      .put("error", "internal server error").toString());
    notFound(new JSONObject()
      .put("error", "not found").toString());  
  }
  private static void createTables(Database database) {
    // As before
  }
}
2.3.1
Trying it out
Now that we have one API operation written, we can start up the server and try it out.
The simplest way to get up and running is by opening a terminal in the project folder
and using Maven:
mvn clean compile exec:java
Listing 2.5
The Natter REST API endpoints
Use static imports to 
use the Spark API.
Construct the SpaceController 
and pass it the Database 
object.
This handles POST requests 
to the /spaces endpoint by 
calling the createSpace 
method on your controller 
object.
We add some
basic filters
to ensure all
output is
always
treated as
JSON.
39
Injection attacks
You should see log output to indicate that Spark has started an embedded Jetty server on
port 4567. You can then use curl to call your API operation, as in the following example:
$ curl -i -d '{"name": "test space", "owner": "demo"}' 
➥ http://localhost:4567/spaces
HTTP/1.1 201 Created
Date: Wed, 30 Jan 2019 15:13:19 GMT
Location: /spaces/4
Content-Type: application/json
Transfer-Encoding: chunked
Server: Jetty(9.4.8.v20171121)
{"name":"test space","uri":"/spaces/1"}
TRY IT
Try creating some different spaces with different names and owners,
or with the same name. What happens when you send unusual inputs, such as
an owner username longer than 30 characters? What about names that con-
tain special characters such as single quotes?
2.4
Injection attacks
Unfortunately, the code you’ve just written has a serious security vulnerability, known
as a SQL injection attack. Injection attacks are one of the most widespread and most
serious vulnerabilities in any software application. Injection is currently the number
one entry in the OWASP Top 10 (see sidebar).
The OWASP Top 10
The OWASP Top 10 is a listing of the top 10 vulnerabilities found in many web applica-
tions and is considered the authoritative baseline for a secure web application. Pro-
duced by the Open Web Application Security Project (OWASP) every few years, the latest
edition was published in 2017 and is available from https://owasp.org/www-project-
top-ten/. The Top 10 is collated from feedback from security professionals and a sur-
vey of reported vulnerabilities. While this book was being written they also published
a specific API security top 10 (https://owasp.org/www-project-api-security/). The cur-
rent versions list the following vulnerabilities, most of which are covered in this book:
Web application top 10
API security top 10
A1:2017 - Injection
API1:2019 - Broken Object Level Authorization
A2:2017 - Broken Authentication
API2:2019 - Broken User Authentication
A3:2017 - Sensitive Data Exposure
API3:2019 - Excessive Data Exposure
A4:2017 - XML External Entities (XXE)
API4:2019 - Lack of Resources & Rate Limiting
A5:2017 - Broken Access Control
API5:2019 - Broken Function Level Authorization
A6:2017 - Security Misconfiguration
API6:2019 - Mass Assignment
A7:2017 - Cross-Site Scripting (XSS)
API7:2019 - Security Misconfiguration
40
CHAPTER 2
Secure API development
An injection attack can occur anywhere that you execute dynamic code in response
to user input, such as SQL and LDAP queries, and when running operating system
commands. 
DEFINITION
An injection attack occurs when unvalidated user input is included
directly in a dynamic command or query that is executed by the application,
allowing an attacker to control the code that is executed. 
If you implement your API in a dynamic language, your language may have a built-in
eval() function to evaluate a string as code, and passing unvalidated user input into
such a function would be a very dangerous thing to do, because it may allow the user
to execute arbitrary code with the full permissions of your application. But there are
many cases in which you are evaluating code that may not be as obvious as calling an
explicit eval function, such as:
 Building an SQL command or query to send to a database
 Running an operating system command
 Performing a lookup in an LDAP directory
 Sending an HTTP request to another API
 Generating an HTML page to send to a web browser
If user input is included in any of these cases in an uncontrolled way, the user may be
able to influence the command or query to have unintended effects. This type of vul-
nerability is known as an injection attack and is often qualified with the type of code
being injected: SQL injection (or SQLi), LDAP injection, and so on.
 The Natter createSpace operation is vulnerable to a SQL injection attack because
it constructs the command to create the new social space by concatenating user input
directly into a string. The result is then sent to the database where it will be interpreted
(continued)
It’s important to note that although every vulnerability in the Top 10 is worth learning
about, avoiding the Top 10 will not by itself make your application secure. There is
no simple checklist of vulnerabilities to avoid. Instead, this book will teach you the
general principles to avoid entire classes of vulnerabilities.
Web application top 10
API security top 10
A8:2017 - Insecure Deserialization
API8:2019 - Injection
A9:2017 - Using Components with Known 
Vulnerabilities
API9:2019 - Improper Assets Management
A10:2017 - Insufficient Logging & Monitoring
API10:2019 - Insufficient Logging & Monitoring
41
Injection attacks
as a SQL command. Because the syntax of the SQL command is a string and the user
input is a string, the database has no way to tell the difference. 
 This confusion is what allows an attacker to gain control. The offending line from
the code is the following, which concatenates the user-supplied space name and owner
into the SQL INSERT statement:
        database.updateUnique(
            "INSERT INTO spaces(space_id, name, owner) " +
                "VALUES(" + spaceId + ", '" + spaceName +
                "', '" + owner + "');");
The spaceId is a numeric value that is created by your application from a sequence, so
that is relatively safe, but the other two variables come directly from the user. In this
case, the input comes from the JSON payload, but it could equally come from query
parameters in the URL itself. All types of requests are potentially vulnerable to injec-
tion attacks, not just POST methods that include a payload.
 In SQL, string values are surrounded by single quotes and you can see that the
code takes care to add these around the user input. But what happens if that user
input itself contains a single quote? Let’s try it and see:
$ curl -i -d "{\"name\": \"test'space\", \"owner\": \"demo\"}" 
➥ http://localhost:4567/spaces 
HTTP/1.1 500 Server Error
Date: Wed, 30 Jan 2019 16:39:04 GMT
Content-Type: text/html;charset=utf-8
Transfer-Encoding: chunked
Server: Jetty(9.4.8.v20171121)
{"error":"internal server error"}
You get one of those terrible 500 internal server error responses. If you look at the
server logs, you can see why:
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "INSERT INTO 
spaces(space_id, name, owner) VALUES(4, 'test'space', 'demo[*]');";
Header and log injection
There are examples of injection vulnerabilities that do not involve code being exe-
cuted at all. For example, HTTP headers are lines of text separated by carriage return
and new line characters ("\r\n" in Java). If you include unvalidated user input in a
HTTP header then an attacker may be able to add a "\r\n" character sequence and
then inject their own HTTP headers into the response. The same can happen when
you include user-controlled data in debug or audit log messages (see chapter 3),
allowing an attacker to inject fake log messages into the log file to confuse somebody
later attempting to investigate an attack.
42