title:On the Security of Two-Round Multi-Signatures
author:Manu Drijvers and
Kasra Edalatnejad and
Bryan Ford and
Eike Kiltz and
Julian Loss and
Gregory Neven and
Igors Stepanovs
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
On the Security of Two-Round Multi-Signatures
, Julian Loss
§
∗
, Gregory Neven
Ruhr-Universit¨at Bochum,
UCSD.
¶
, Igors Stepanovs
¶
Manu Drijvers
, Kasra Edalatnejad
∗†
∗
DFINITY,
‡
‡
, Bryan Ford
‡
EPFL,
ETH Zurich,
†
§
, Eike Kiltz
§
Abstract—A multi-signature scheme allows a group of signers
to collaboratively sign a message, creating a single signature that
convinces a veriﬁer that every individual signer approved the
message. The increased interest in technologies to decentralize
trust has triggered the proposal of highly efﬁcient two-round
Schnorr-based multi-signature schemes designed to scale up to
thousands of signers, namely BCJ by Bagherzandi et al. (CCS
2008), MWLD by Ma et al. (DCC 2010), CoSi by Syta et al. (S&P
2016), and MuSig by Maxwell et al. (ePrint 2018). In this work,
we point out serious security issues in all currently known
two-round multi-signature schemes (without pairings). First, we
prove that none of the schemes can be proved secure without
radically departing from currently known techniques. Namely,
we show that if the one-more discrete-logarithm problem is
hard, then no algebraic reduction exists that proves any of
these schemes secure under the discrete-logarithm or one-more
discrete-logarithm problem. We point out subtle ﬂaws in the
published security proofs of the above schemes (except CoSi,
which was not proved secure) to clarify the contradiction between
our result and the existing proofs. Next, we describe practical sub-
exponential attacks on all schemes, providing further evidence
to their insecurity. Being left without two-round multi-signature
schemes, we present mBCJ, a variant of the BCJ scheme that
we prove secure under the discrete-logarithm assumption in the
random-oracle model. Our experiments show that mBCJ barely
affects scalability compared to CoSi, allowing 16384 signers to
collaboratively sign a message in about 2 seconds, making it a
highly practical and provably secure alternative for large-scale
deployments.
1. INTRODUCTION
n
1, . . . , pk
A multi-signature scheme allows a group of signers, each
i, sk i), to collaboratively sign a
having their own key pair (pk
single message m. The result is a single signature σ that can be
}, assuring
veriﬁed using the set of public keys {pk
a veriﬁer that every signer approved message m. While multi-
signature schemes have been studied for decades [IN83],
[OO93], [MOR01], [Bol03], [LOS+06], [BN06], [BCJ08],
[MWLD10],
they have recently received renewed interest
because of the rise of distributed applications that aim to
decentralize trust such as Bitcoin [Nak08] and more generally
blockchain. Such applications typically involve many users or
nodes that need to approve particular actions, which naturally
matches the multi-signature setting where many signers must
collaborate in order to create a joint multi-signature.
Motivated by such applications, Syta et al. [STV+16] pre-
sented the CoSi multi-signature scheme, a highly scalable
multi-signature scheme that allows a tree of 8192 signers
to sign in less than two seconds. Since its recent
intro-
duction, CoSi has already led to a large body of follow-
up work, including a distributed protocol to create secure
randomness [SJKK+17],
improving the scalability of Bit-
coin [SJKK+17], and introducing a decentralized software
update framework [NKJ+17].
More recently, the Bitcoin community is actively looking
into integrating Schnorr signatures as these could support
multi-signatures and aggregate signatures, allowing many
signatures that go into the same block to be merged
into one, signiﬁcantly reducing the overall size of
the
blockchain [bit17]. To this end, Maxwell et al. published
the MuSig scheme [MPSW18a] that is tailored speciﬁcally
to the needs of Bitcoin. The MuSig scheme was presented
with a security proof under the one-more discrete-logarithm
assumption, while the security of CoSi was never formally
analyzed.
One of the main problems when designing provably secure
Schnorr-based multi-signature schemes is that
in order to
simulate the honest signer, the reduction cannot simply use
the zero-knowledge property and program the random oracle,
because the random-oracle entry that must be programmed
depends on the output of the adversarial signers. Bellare
and Neven [BN06] got around this issue by introducing
a preliminary round in the signing protocol where signers
exchange commitments to their ﬁrst rounds. Bagherzandi et
al.’s BCJ scheme [BCJ08] eliminated the need for this extra
round by using homomorphic trapdoor commitments, while
Ma et al.’s MWLD scheme [MWLD10] simulates signatures
by exploiting the witness-indistinguishability of Okamoto sig-
natures [Oka93].
Impossibility result. Our ﬁrst result essentially shows that
none of the existing two-round schemes can be proved secure
under standard assumptions. More precisely, we prove that
if the one-more discrete logarithm problem (OMDL) is hard,
then there cannot exist an algebraic black-box reduction that
proves the CoSi, MuSig, BCJ, or MWLD schemes secure
under the discrete logarithm (DL) or OMDL assumption.
This is surprising, because all of these schemes, barring
CoSi, were published with a security proof under the DL
(BCJ, MWLD) or OMDL (MuSig) assumption. We explain
the obvious contradiction by pointing out subtle ﬂaws in their
proofs. The problem is that simulating signing queries in com-
bination with a rewinding argument (so-called forking [PS00])
is especially delicate, because the forger may be forked at
a point where it has an “open” signing query. If that is the
case, the reduction has to come up with a second response
for the same ﬁrst round of the signing protocol, which leaks
the signing key that it was hoping to extract from the forger.
The actual impossibility proof is a bit more involved, but it
exploits exactly this difﬁculty in simulating signing queries.
The class of reductions covered by our result essentially
encompasses all currently known proof techniques, including
those that rewind the adversary an arbitrary number of times.
Also, given that all of the covered schemes are derived from
Schnorr signatures [Sch91], it would be very surprising if
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:46)(cid:66)(cid:79)(cid:86)(cid:1)(cid:37)(cid:83)(cid:74)(cid:75)(cid:87)(cid:70)(cid:83)(cid:84)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:22)(cid:17)
(cid:18)(cid:17)(cid:25)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:54 UTC from IEEE Xplore.  Restrictions apply. 
their security could be proved under an assumption that is
not implied by DL or OMDL. So while in theory our result
does not completely rule out the existence of a security proof,
in practice it does mean that a security proof under standard
assumptions is extremely unlikely as it would have to use
currently unknown techniques—unless OMDL turns out to be
easy while DL is still hard, in which case our result becomes
moot.
Sub-exponential attacks. If the above impossibility result
still leaves a glimmer of hope that the existing schemes might
be safe for practical use, our second result clearly indicates
that this is not the case. Namely, we provide attacks that
apply to all schemes based on Wagner’s algorithm for the
generalized birthday problem [Wag02]. Because the attacks
run in sub-exponential time, but not in polynomial time, they
don’t supersede our impossibility result, but for reasonable
parameter choices they are efﬁcient enough to form a realistic
threat. We show that an attacker performing (cid:3) − 1 concurrent
signing queries can create a forgery in O((cid:3)· 2lg q/(1+lg (cid:2))) time
and space, where q is the order of the group. For practical
values such as lg q = 256, this means that even for 15 con-
current signing queries, a forgery can be computed in 262
steps, which is feasible on modern clusters. For 127 concurrent
queries, one can compute a forgery in less than 245 steps.
We describe our attacks for CoSi, but they also extend to
MuSig, BCJ, and MWLD, as well as to important applications
of CoSi such as the RandHound scheme from [SJKK+17].
While asymptotically speaking these attacks can be thwarted
by increasing the group order, doing so will render the schemes
impractical, and even then provable security remains an elusive
goal due to our impossibility result.
A secure
two-round multi-signature
scheme. Our
negative results apply to all known two-round multi-
signature schemes without pairings. There are pairing-
based non-interactive multi-signature schemes from BLS
signatures [BLS01], [Bol03], [RY07], [BDN18] and from
Waters signatures [Wat05], [LOS+06], but one may wonder
whether secure two-round multi-signatures without pairings
exist at all. We answer this question in the positive by
presenting mBCJ, a variant of the BCJ scheme that uses
the same homomorphic commitment scheme to let signers
commit to their ﬁrst rounds as the BCJ scheme, but lets
the commitment parameters be determined by the output of
a random oracle applied to the message being signed. We
provide a rigorous security proof of the mBCJ scheme under
the DL assumption in the random-oracle model.
Table I summarizes the efﬁciency and security of multi-
signature schemes. Our mBCJ scheme is the only secure two-
round multi-signature scheme. Even though it is less efﬁcient
in terms of signature size and veriﬁcation time than some
of its (insecure) precedents, it does have the advantage of
supporting key aggregation. For applications that involve large
numbers of signers, it is crucial that veriﬁcation time can be
kept constant (i.e., independent of the number of signers) by
verifying against a constant-size aggregate public key. The
veriﬁer computes the aggregate public key once from the set
of individual public keys to have (amortized) constant-time
veriﬁcation afterwards.
One may wonder what the cost is of provable security
by comparing the mBCJ scheme against the highly efﬁcient
CoSi scheme. To investigate the real-world effects of this
difference, we performed large-scale experiments on prototype
implementations of both schemes. For a network round-trip
delay of 200 milliseconds, we found that a group as large
as 16,384 signers can collaboratively sign a message using
mBCJ in about 2 seconds, showing no signiﬁcant difference
with CoSi. The mBCJ scheme on average needs 73% more
CPU time than CoSi for small amounts of signers. For large
amounts of signers the difference becomes smaller, and the
average CPU time per signer remains under 0.25 milliseconds
when signing with 16,384 signers. Our results show that mBCJ
is only marginally less efﬁcient than CoSi, so that any protocol
based on the insecure CoSi scheme should instead be built on
the provably secure mBCJ scheme.
Restricted security of CoSi. Our impossibility proof and
attacks on CoSi crucially rely on the adversary being able to
engage in concurrent queries with the signing oracle. A natural
question to ask is whether CoSi could still be secure when the
adversary is limited to sequential signing queries. We show
that this is indeed the case, but only in the weaker knowledge
of secret key (KOSK) model. More speciﬁcally, we prove
CoSi secure against sequential attacks (or even logarithmically
many concurrent attacks) under the OMDL assumption in the
KOSK setting in the random-oracle model. Hence, one could
still consider using CoSi in very speciﬁc scenarios where the
KOSK setting can be considered reasonable and where one
can naturally limit the number of parallel signing sessions to
a small constant.
2. PRELIMINARIES
2.1 Discrete Logarithm Problems
Deﬁnition 1 (Discrete Log Problem). For a group G = (cid:2)g(cid:3)
of prime order q, we deﬁne Advdl
G of an adversary A as
(cid:3)
(cid:2)
y = gx : y ←$ G, x ←$ A(y)
,
Pr
where the probability is taken over the random choices of A
and the random selection of y. A (τ, )-breaks the discrete
G ≥ .
log problem if it runs in time at most τ and has Advdl
Discrete log is (τ, )-hard if no such adversary exists.
Deﬁnition 2 (n-One-More Discrete Log Problem [BNPS03],
[BP02]). For a group G = (cid:2)g(cid:3) of prime order q, let Odlog(·)
be a discrete logarithm oracle that can be called at most n
times. We deﬁne Advn-omdl
of an adversary A as
G
(cid:2) n(cid:4)
Pr
i=0
yi = gxi : (y0, . . . , yn) ←$ Gn+1,
(x0, . . . , xn) ←$ AOdlog(·)(y0, . . . , yn)
(cid:3)
,
where the probability is taken over the random choices of A
and the random selection of y0, . . . , yn. A (τ, )-breaks the
n-one-more discrete log problem if it runs in time at most τ
≥ . n-one-more discrete log is (τ, )-hard
and has Advn-omdl
if no such adversary exists.
G
(cid:18)(cid:17)(cid:25)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:54 UTC from IEEE Xplore.  Restrictions apply. 
Scheme
KVf
KAg
Sign
Vf
Rounds
BCJ1 [BCJ08]
BCJ2 [BCJ08]
MWLD [MWLD10]
CoSi [STV+16]
MuSig [MPSW18a]
mBCJ (this work)
BN [BN06]
BDN-MSDL [BDN18], [MPSW18b]
B-Pop [Bol03], [RY07]
WM-Pop [LOS+06], [RY07]
BDN-MSP [BDN18]
1G2
1G2
1G2
2P
2P
1Gn
1Gn
1Gn
2
1G2 + 1G3
1G + 2G2
1G2
1G
1G
1G2 + 1G3
1G
1G
1G1
1G1 + 1G2
1G1
3G2
1Gn+1 + 2G2
1Gn+2
1G2
1G2
3G2
1Gn+1
1G2
2P
2P
2P
2
2
2
2
2
2
3
3
1
1
1
pk domain
G × Z2
q
G
G
q
G × Z2
G × Z2
G
q
G
G
G1 × G2
G1 × G2 × GT
q
q
Signature
domain
G2 × Z3
G3 × Z3
Z3
q
Z2
G × Zq
q
G2 × Z3
G × Zq
G × Zq
G1 × G2
G1
q
G2
G1
PK
domain
G
G
Gn
G
G
G
Gn
G
G2
GT
G2
Security
Insecure
Insecure
Insecure
Insecure
Insecure
DL, ROM
DL, ROM
DL, ROM
co-CDH, ROM