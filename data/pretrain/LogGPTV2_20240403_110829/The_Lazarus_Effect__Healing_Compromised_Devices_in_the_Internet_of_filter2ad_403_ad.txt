### 6. Evaluation

In this section, we analyze our prototype in terms of code size, boot and runtime performance, and networking overhead. For the experiments involving device-hub communication, we used a Lenovo ThinkPad T490s (equipped with an Intel Core i7-8665U processor, 8 GB of DDR4 RAM, and an Intel AC9560 wireless adapter) running Ubuntu 18.04 LTS and Python 3.6. The hub and the device communicated via Wi-Fi through a lightly loaded AVM Fritz!Box 7362 SL wireless router.

#### 6.1 Code Size

Table 2 presents the size of the Lazarus binaries. "Untrusted" refers to the part of Lazarus that runs as part of the untrusted business logic, primarily responsible for fetching boot and deferral tickets. We calculated the "Untrusted" size by comparing the sizes of the business logic binaries compiled with and without Lazarus. In total, Lazarus occupies approximately 93 kB, which is about 14% of the flash memory on the NXP LPC55S69. This leaves sufficient resources for the business logic. Our prototype has not undergone extensive code and binary optimization. Additionally, Lazarus reserves 8 kB of RAM, or 2.5%, mapped to the secure world, which is inaccessible to the non-secure world.

#### 6.2 Boot Time

We measured the boot time overhead as the time from the execution of the first instruction of the Lazarus bootloader to the execution of the first instruction of the business logic. We used an external device for timestamping, specifically a second NXP LPC55S69 MCU. Instructions were added at the start and end of the bootloader execution to toggle a dedicated GPIO pin, signaling the measurement device to take a timestamp. We conducted 100 separate runs, presenting only average values, as the standard deviation was below 1%.

The results are shown in Table 3. When Lazarus Core boots the business logic directly, the total overhead is less than 1.5 seconds. Most of this time is spent on cryptographic operations, such as boot ticket verification, using the RIoT crypto library [27], which does not utilize the MCU's cryptographic accelerators. This measurement represents a worst-case scenario, indicating that Lazarus performs well even on MCUs without cryptographic accelerators. Significant speed-ups can be achieved with accelerators. For example, according to the NXP LPC55S69 documentation, computing ECDSA-secp256r1 Sign + Verify takes only 116 ms [35].

If a valid boot ticket is absent, Lazarus Core runs the update downloader. In our scenario, the downloader contacts the hub with its AliasID, retrieves and stages a boot ticket, and resets the device, taking around 3.4 seconds in total.

The third part of Table 3 shows the total boot time if the hub requires a firmware update. We omitted the individual stages, as they largely repeat the process without a boot ticket. After booting through DICE++ and Lazarus Core, the update downloader contacts the hub, downloads a 58 KB update containing FreeRTOS and several applications, and installs it after two reset cycles. The entire process takes less than 16 seconds.

#### 6.3 Runtime Overhead

We measured the runtime overhead of Lazarus against a workload consisting of FreeRTOS running two applications: a traffic light controller and an ADC sensor app. For baseline measurements, we ran this workload unmodified and without the Lazarus TrustZone component interposing between the workload and the hardware. For example, flash writes performed by the workload go directly to flash memory.

In the Lazarus variant, the TrustZone component disables direct access by FreeRTOS and the applications to the flash storage controller, power controller, and watchdog timer. Instead, Lazarus exposes TrustZone handler functions described in Section 5. The FreeRTOS workload is recompiled with libraries that redirect accesses to these devices to the TrustZone handlers. Additionally, we run a TEETrigger service application on FreeRTOS that obtains a deferral ticket from the hub over the network and passes it to TEETrigger running in TrustZone.

We used the FreeRTOS benchmarking feature to measure CPU utilization and compared the CPU idle time of the bare FreeRTOS app without Lazarus to our Lazarus implementation to determine the total overhead.

Table 4 summarizes our measurements. We observed a total overhead of 0.8% when acquiring a deferral ticket every minute. A deferral ticket fetching interval of one or a few minutes is unreasonably short and was chosen to demonstrate that the overhead remains low even in extreme cases. Fetching deferral tickets in intervals of multiple hours or days is more realistic for most IoT use cases and leads to negligible overhead.

Additionally, we measured the overhead of writing one flash page (512 kB) with and without Lazarus, i.e., writing to flash via the handler versus writing directly. This overhead is about 0.19% and thus negligible.

#### 6.4 Networking

Table 6 shows the TCP payload sizes for various messages exchanged with the hub. Ticket requests and responses include a Lazarus authenticated header containing a type field, nonce, digest, and signature, as well as a payload. For a boot ticket, the payload is a fixed 4-byte value, and for a deferral ticket, it is the requested deferral time in milliseconds, also as a 4-byte value. The header is 140 bytes, totaling response and reply with payload to 288 bytes. Sending the AliasID certificate to the hub takes less than one kilobyte, depending on the actual size of the certificate.

The total TCP payload size for a boot in the update downloader path with subsequent ticket fetching in the business logic is less than 2,800 bytes. This includes sending the AliasID and retrieving the boot ticket in the downloader, and subsequent sending of the AliasID and retrieval of both a deferral and boot ticket in the business logic. After a normal boot with a valid boot ticket, data of less than 1,600 bytes are exchanged, i.e., sending the AliasID in the business logic and retrieving a boot and deferral ticket. Subsequent fetches of deferral tickets require only 288 bytes.

### Summary

Our evaluation demonstrates that the overhead in terms of communication, flash, and RAM requirements is modest even for resource-constrained devices. The same holds for the runtime overhead for communication with the hub. However, the increase in boot times until executing business logic is not negligible. We expect that resetting a device is an infrequent event, e.g., when a device needs servicing or when the hub suspects misbehavior. The result is a good tradeoff between performance and security gain. We aim to improve the required boot time with a more optimized implementation in future versions, e.g., using hardware cryptographic accelerators.

### 7. Security Discussion

Our goal is to ensure the recoverability of IoT devices even if the untrusted software is completely compromised. We achieve this if the hub can enforce the software stack the device executes within a time bound. This means that soon after the hub decides to deploy new software, the recovery TCB must be executed to retrieve and apply a new version. We assume the attacker may try to permanently render devices useless by deploying malware, overwriting Lazarus, or tampering with peripherals.

**Attack Vectors:**

- **A-1:** Manipulate or block the communication channel between the device and hub.
- **A-2:** Attempt to tamper with Lazarus by interfering with its execution, overwriting it, or forging updates.
- **A-3:** Tamper with peripherals to permanently render devices irrecoverable.
- **A-4:** Prevent or defer device reset by manipulating or turning off TEETrigger or forging deferral tickets.
- **A-5:** Inject malware into untrusted software and try to persist it across resets.
- **A-6:** Deceive the hub about the application of updates to Lazarus.

**Mitigation Strategies:**

- **A-1:** Attacks on the communication channel can be detected and removed by the ISP. DoS attacks typically last less than 48 hours [43].
- **A-2 and A-3:** We isolated trusted components and critical peripherals from untrusted software using a TEE. TrustZone-M and the secure AHB controller enforce this, preventing misuse of critical peripherals.
- **A-4:** TEETrigger is placed inside the TEE, ensuring correct execution. Deferral tickets are freshness-protected and signed with the hub’s private key.
- **A-5:** The attacker’s code can run on the device until the next reset, which can be forced by the hub. If the attack persists, it will change storage, leading to failed attestation and a forced reset and update.
- **A-6:** Non-forgeability and freshness of cryptographic messages between the device and hub prevent deception.

By implementing these strategies, Lazarus ensures robust security and recoverability for IoT devices.