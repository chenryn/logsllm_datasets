### System info
  * Playwright Version: [v1.33]
  * Operating System: [Windows 10, Ubuntu 18, Gentoo]
  * Browser: [Electron]
  * Other info:
### Source code
**Config file**
    // playwright.config.ts
    import type {PlaywrightTestConfig} from "@playwright/test";
    import {devices} from "@playwright/test";
    const config: PlaywrightTestConfig = {
        testDir: "./tests",
        timeout: 2147483647,
        expect: {
            timeout: 1000 * 60,
        },
        fullyParallel: false,
        forbidOnly: !!process.env.CI,
        retries: process.env.CI ? 2 : 0,
        workers: 1,
        reporter: "dot",
        use: {
            headless: false,
            actionTimeout: 5000,
            viewport: {width: 1920, height: 1080},
            trace: "off",
            video: {
                mode: "on",
                size: {width: 1920, height: 1080},
            },
        },
        projects: [
            {
                name: "Electron",
                use: {
                    ...devices["Electron"],
                },
            },
        ],
    };
**Test file (self-contained)**
    test.describe(() => {
        test.beforeAll(async () => {
            fs.mkdirSync(testSettings.pathLog, {recursive: true});
            fs.mkdirSync(testSettings.pathLog + `/error${getDate()}`, {recursive: true});
            await BaseTest.startLog()
            electronApp = await electron.launch({
                args: testSettings.electronApp,
            });
            const window = await electronApp.firstWindow();
            userIndex = 0;
            const pids = await BaseTest.getPidScada(electronApp)
            setInterval(async function () {
                await BaseTest.writeLog(pids);
            }, testSettings.intervalLog);
        })
        for (let step = 0; step  {
                const window = await electronApp.windows()[0];
                if (step === 0 || testSettings.changeUser) {
                    await AuthenticationPageObject.AuthenticationInList(
                        window,
                        data.main.login[userIndex],
                        data.main.password
                    );
                }
                try {
                    await window.waitForSelector(data.frameXPath.left);
                } catch (error) {
                    fs.appendFileSync(
                        `${testSettings.pathLog}error${getDate()}.log`,
                        `${getFullDate()} \n
              ${error}\n`
                    );
                }
                await TestFunction.TestAD(window, 239, 93);
                await TestFunction.TestEvent(window);
                await TestFunction.TestTREND(window);
                await TestFunction.TestArchive(
                    electronApp,
                    OutputOption.outputHorizontalTable,
                    window
                );
                await TestFunction.TestDD(window, 230, 115);
                await TestFunction.TestEvent(window);
                await TestFunction.TestTREND(window);
                await TestFunction.TestArchive(
                    electronApp,
                    OutputOption.outputVerticalTable,
                    window
                );
                await TestFunction.TestZDV(window, 230, 110);
                await TestFunction.TestEvent(window);
                await TestFunction.TestTREND(window);
                await TestFunction.TestArchive(
                    electronApp,
                    OutputOption.outputTrends,
                    window
                );
                await TestFunction.TestREGI(window, 233, 111);
                await TestFunction.TestEvent(window);
                await TestFunction.TestTREND(window);
                await TestFunction.TestALARM(window, 239, 93);
                await TestFunction.TestEvent(window);
                await TestFunction.TestTREND(window);
                if (testSettings.changeUser) {
                    userIndex == 19 ? (userIndex = 0) : userIndex++;
                    await window.mouse.click(1557, 40);
                }
            });
        }
    });
    });
**Description of the problem**
I'm testing an Electron application by simulating user interactions and
observing how the tested application behaves. These tests can run continuously
for weeks or even a month. However, I've encountered an issue where the
process.js from the Playwright library starts consuming more and more memory.
If it initially consumes 100MB at the start of testing, after a day or two, it
can reach 2GB. Could this be a memory leak on your side, or am I doing
something incorrectly?
**A file with logs of RAM consumption**
system.log
**Memory consumption graph of one of the test runs**
![systemTestMemoryInfo](https://user-
images.githubusercontent.com/55750159/239737848-904e7777-1329-4296-a7d3-ba98c0e56b20.png)