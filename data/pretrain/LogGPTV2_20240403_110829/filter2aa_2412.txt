检测ldap协议以及获取相关字段的⼀种⽅式
JNDI注⼊常⽤rmi和ldap协议去打，本⽂主要讲述通过go语⾔检测ldap协议以及获取相关字段的⼀种⽅式
通过跟4ra1n师傅的⽂章的学习和与他本⼈的交流，他的检测思路是⽤go语⾔模拟回包，然后分析数据包，获取其中需要的路径字段。因为要确定⽬标是哪个payload⽣效，所以获取ldap/rmi请求的路
径是必要的。
我在实现他⽂章⾥的思路的时候发现⼀些不理解的地⽅
模拟扫描器打payload：
fake server 端：
我打印出请求路径的hex
wireshark抓包：
可以看到这个#look的hex跟上⾯fake server端不⼀样，但是fake server端的hex转成string后依然是#look
个⼈的实现思路
所以我选择⾃⼰再⽤真正的ldapserver实现⼀次这个检测思路
抓包ldap⼀次连接的数据包
client -> server
data : 300c020101600702010304008000
server -> client
data: 300c02010161070a010004000400
client -> server
data:
30818e0201026481880405236c6f6f6b307f3016040d6a617661436c6173734e616d6531050403666f6f3028040c6a617661436f64654261736531180416687474703a2f2f3132372e302e302e313a363636362f30240
wireshark对数据包进⾏梳理：
画⼀个示意图：
1
分析到这⾥已经拿到想要的东⻄了，这个searchRequest⾥⾯就包含了路径参数，所以接下来起⼀个ldap去抓这个searchRequest
ldapserver这个库可以直接帮助起⼀个ldap server并且⾃⼰可以构建返回包
所以调⽤ldap.Message.GetSearchRequest()去获取
发包：
拿到路径参数
后续作为结果返回的话，是要拿到这个结果，所以⽤⼀个channel把这个结果装起来，⽤于传递
import (
import (
 "fmt"
 "fmt"
 ldap "github.com/vjeantet/ldapserver"
 ldap "github.com/vjeantet/ldapserver"
 "io/ioutil"
 "io/ioutil"
 "log"
 "log"
 "os"
 "os"
 "os/signal"
 "os/signal"
 "syscall"
 "syscall"
))
func main()  {
func main()  {
 //关闭log
 //关闭log
 ldap.Logger = log.New(ioutil.Discard,"",0)
 ldap.Logger = log.New(ioutil.Discard,"",0)
 server := ldap.NewServer()
 server := ldap.NewServer()
 routes := ldap.NewRouteMux()
 routes := ldap.NewRouteMux()
 routes.Bind(handleBind)
 routes.Bind(handleBind)
 routes.Search(handleSearch)
 routes.Search(handleSearch)
 server.Handle(routes)
 server.Handle(routes)
 go server.ListenAndServe("127.0.0.1:9999")
 go server.ListenAndServe("127.0.0.1:9999")
 ch := make(chan os.Signal)
 ch := make(chan os.Signal)
 signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)
 signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)
 <-ch
 <-ch
 close(ch)
 close(ch)
 server.Stop()
 server.Stop()
}}
func handleBind(w ldap.ResponseWriter, m *ldap.Message)  {
func handleBind(w ldap.ResponseWriter, m *ldap.Message)  {
 res := ldap.NewBindResponse(ldap.LDAPResultSuccess)
 res := ldap.NewBindResponse(ldap.LDAPResultSuccess)
 w.Write(res)
 w.Write(res)
}}
func handleSearch(w ldap.ResponseWriter, m *ldap.Message) {
func handleSearch(w ldap.ResponseWriter, m *ldap.Message) {
 r := m.GetSearchRequest()
 r := m.GetSearchRequest()
 fmt.Println("protocol：ldap      path:" + r.BaseObject())
 fmt.Println("protocol：ldap      path:" + r.BaseObject())
}}
11
22
33
44
55
66
77
88
99
10
10
11
11
12
12
13
13
14
14
15
15
16
16
17
17
18
18
19
19
20
20
21
21
22
22
23
23
24
24
25
25
26
26
27
27
28
28
29
29
30
30
31
31
32
32
33
33
34
34
35
35
36
36
37
37
38
38
39
39
40
40
41
41
42
42
43
43
package main
package main
11
22
2
var resultChan = make(chan string,100)
var resultChan = make(chan string,100)
func main()  {
func main()  {
...
...
 go func() {
 go func() {
  for {
  for {
   select {
   select {
   case result := <- resultChan:
   case result := <- resultChan:
    fmt.Println(result)
    fmt.Println(result)
   }
   }
  }
  }
 }()
 }()
...
...
}}
func handleSearch(w ldap.ResponseWriter, m *ldap.Message) {
func handleSearch(w ldap.ResponseWriter, m *ldap.Message) {
 r := m.GetSearchRequest()
 r := m.GetSearchRequest()
 resultChan <- string(r.BaseObject())
 resultChan <- string(r.BaseObject())
}}
33
44
55
66
77
88
99
10
10
11
11
12
12
13
13
14
14
15
15
16
16
17
17
18
18
19
19
20
20
21
21
22
22
23
23
24
24
3