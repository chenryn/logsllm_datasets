0.0025s
0.012s
0.0043s
0.020s
0.0054s
Proof
Size
86KB
49.1KB
118.2KB
90.2KB
169.7KB
180.0KB
199.2KB
229.4KB
Virgo
Ours
Virgo
Ours
Virgo
Ours
Virgo
Ours
Table 1: Performance of the polynomial commitment
scheme.
(GKR protocol) with a polynomial commitment scheme to obtain
a zero knowledge argument. Because of the fast prover time and
the sublinear verification time for structured circuit of the GKR
protocol, we anticipate that as a whole system, Virgo’s prover time
and verification time are faster on the benchmark, and its proof
size is similar.
However, we can actually use our protocols to construct a poly-
nomial commitment scheme, and combine it with the GKR protocol
in the same way as Virgo. This yields a new zero knowledge argu-
ment scheme similar to Virgo on layered arithmetic circuits. Table 1
shows the performance of our polynomial commitment comparing
to the one used in Virgo. As shown in the table, the prover time
is improved by 1.7-2.1×, while the verification time is slower by
2-3.6×. The proof size of our polynomial commitment is smaller
than Virgo when the size of the polynomial is small, and slightly
larger than Virgo when the size of the polynomial is large. This is
because we optimize the parameters to achieve the best proof size
in our scheme. When the size of the polynomial is small, the length
of the rows of the matrix in our protocols is set to be relatively
large. Thus the inner product arguments are executed on small
columns and the proof size of Ligero++ is only around 1/2 of Virgo.
When the size of the polynomial is large, the lengths of the rows
stops growing, and the proof of the inner product arguments on
columns becomes dominating. Therefore, the proof size becomes
slightly larger than Virgo. Overall, we believe this provides a better
comparison to schemes based on the GKR protocol, and our new
zero knowledge argument scheme for layered arithmetic circuits
will have faster prover time with similar proof size and verification
time.
4.2 Post-Quantum Signature Schemes
An important application of our new ZKP scheme is building post-
quantum signatures. Recent advances in quantum computers in-
troduce potential threats to traditional digital signature schemes
and NIST has initiated a process to solicit post-quantum signatures.
One of the approaches to construct a post-quantum scheme is to
utilize zero knowledge proofs that are plausibly post-quantum se-
cure. Such a scheme, named Picnic, has advanced to the second
round and becomes one of the nine candidates for standardization.
As described in [27, 42] the idea of the signature scheme is as
follows. The private key is randomly select from sk ∈ {0, 1}𝜆, and
the public key is pk = PRFsk(0𝜆), where PRF is a pseudo-random
function instantiated by a block cipher. The signature of a message
𝑚 is PRFsk(𝑚), together with the zero knowledge proof that the
Session 6E: Zero Knowledge CCS '20, November 9–13, 2020, Virtual Event, USA2035Sign
25ms
28ms
Verify
17ms
28ms
Signature size
118.5KB
45.9KB
202KB (est.)
Picnic1 [27]
Picnic2 [42]
Ours (LowMC)
Ours (MiMC)
Picnic1-AES
Picnic2-AES
42ms
0.10s
0.11s
0.256s
8ms
0.07s
0.11s
0.056s
210KB
469KB
182KB
Ours
Table 2: Post-Quantum Signature
224 KB (est.)
signer knows the private key sk that generates both PRFsk(𝑚) and
pk. The verification of the signature is simply the verification of
the zero knowledge proof. The zero knowledge proof schemes used
in [27, 42] are based on the technique of MPC-in-the-head. The
prover time, proof size and the verification time are all linear to the
size of the statement.
Methodology. In this section, we instantiate the post-quantum
signature scheme described above for a slight variant of the Ligero
zero-knowledge system. The main difference in our estimated in
this section over [5] is in computing the optimum parameters. We
consider an additional dimension of optimization where the entire
proof is repeated for reducing soundness. This is inspired from
the works of [27, 32, 42]. As the scheme works on R1CS, we use
the MiMC block cipher [3] as the pseudo-random function. We
implement the signature scheme on a 256-bit prime field, providing
the same security level2 as the Picnic schemes in [27, 42]. The
performance of the Picnic schemes is obtained from [42, Table 3].
Note that their ZKP schemes work on Boolean circuits and they
use the LowMC block cipher [4] as the PRF.
Table 2 displays the performance of our signature schemes and
compares it to the Picnic schemes. As shown in the table, the signing
time of our scheme is 42ms, which is 1.7× slower than Picnic1 [27]
and 1.5× slower than Picnic2 [42]. The verifying time is much 2−3×
faster. Finally, the size of our signature is 210KB.
To further demonstrate the AES signature scheme, we increase
the size of the statement for the ZKP scheme by using a standard
block cipher, AES. AES requires roughly 1400 multiplication gates
over 𝐺𝐹(28). We can embed this in the Ligero proof system by con-
sidering an instantiation over 𝐺𝐹(232). This yields a proof length
of 224KB.
Overall, the experiments demonstrate that the performance of
the post-quantum signature scheme built using our new ZKP scheme
is competitive to existing candidates. The advantage of our scheme
on the signature size is more significant when signing multiple
messages or using block ciphers with larger circuits.
4.3 Applications for SIMD Computations
Our scheme has a linear verification time to the number of R1CS
constraints. However, for data parallel computations, or Single-
Instruction-Multiple-Data (SIMD) computations, our scheme can
actually achieve sublinear verification time. We demonstrate this
feature in this section with three additional applications: linear
2We instantiate the “interactive” version of our scheme with statistical security of
512-bits. Applying Fiat-Shamir reduces the security to 256-bit computational security.
Prover Verfication
Time(s)
Time(s)
𝑛
20
200
2,000
20,000
12
113
1,064
12,388∗
0.7
0.84
0.97
1.1∗
Proof
Size(KB)
120
163
210
257∗
Table 3: Performance of Ligero++ for linear regressions. 𝑑 =
100. ∗ denotes estimation due to the memory limitation.
𝑛 min𝑤𝑛
regression, DNA profile matching and batch verification of ECDSA
signatures.
Verifying linear regression models. Linear regression is a popu-
lar machine learning algorithm that captures the linear relationship
between the data and the predictions. The 𝑛 training data samples
with 𝑑 features each are represented as a 𝑛 × 𝑑 matrix 𝑋, with the
corresponding 𝑛×1 label 𝑌. Linear regression is trying to find a 𝑑×1
model 𝑤 such that 𝑋𝑤 ≈ 𝑌. “≈” is formally defined as minimizing
𝑖=1(𝑋𝑖 · 𝑤 − 𝑌𝑖)2, where 𝑋𝑖 and 𝑌𝑖
the distance function 1
are the 𝑖-th row of 𝑋 and 𝑌 and · denotes vector inner products.
The closed-form solution to the optimization problem is 𝑤 =
(𝑋𝑇 𝑋)−1𝑋𝑇 𝑌. Therefore, to verify whether a linear regression
model is correctly computed, we can validate the following equa-
tion: (𝑋𝑇 𝑋)𝑤 = 𝑋𝑇 𝑌.
Table 3 shows the performance of our system on proving the
correctness of linear regression models. We fix the number of fea-
tures 𝑑 as 100, and vary the number of data samples 𝑛. The number
of constraints for verifying linear regression is 2𝑛𝑑2. As shown in
the table, the prover time for 𝑛 = 2, 000 data samples with 𝑑 = 100
features is 12,388s. For the same size of the input, the DIZK paper
[53] generates proof in 30, 000s with 64 machines.
Most importantly, the verification time grows sublinearly with
the size of the computation. It only takes 1.1s to verify the proof
for 𝑛 = 20, 000, a computation with 228 constraints. This is because
when the computation is SIMD, in our scheme described in Proto-
col 5, the same matrix 𝑃𝑥, 𝑃𝑦, 𝑃𝑧 generated from a single copy of the
computation is used multiple times in the SIMD computation. Thus
the verifier’s work in the interleaved test, linear test and quadratic
test only depends on the size of one copy of the computation, and
the overall complexity of the verifier is 𝑂(𝐶′ log 𝐶′ + 𝐵), where 𝑛′
is the size of one copy and 𝐵 is the number of copies. Similarly, the
proof size can also be improved to 𝑂(log2 𝐶′+𝐵), and is only 257KB
for 𝑛 = 20, 000. These features are inherited from the protocol of
Ligero from [5].
In addition, we also estimate the performance of Ligero++ for the
applications of DNA profile matching described in [14] and batched
verification of ECDSA signatures. We show the performance in
Tables 4 and 5 in Appendix A.
ACKNOWLEDGMENTS
This material is based upon work supported by DARPA under Con-
tract No. HR001120C0087 and No. N66001-15-C-4066. Any opinions,
findings and conclusions or recommendations expressed in this ma-
terial are those of the author(s) and do not necessarily reflect the
views of DARPA. This project was conducted when the third and
fourth authors were at Ligero Inc.
Session 6E: Zero Knowledge CCS '20, November 9–13, 2020, Virtual Event, USA2036[30] Amos Fiat and Adi Shamir. 1986. How to Prove Yourself: Practical Solutions to
Identification and Signature Problems. In CRYPTO. 186–194.
[31] Rosario Gennaro, Craig Gentry, Bryan Parno, and Mariana Raykova. 2013. Qua-
dratic Span Programs and Succinct NIZKs without PCPs. In EUROCRYPT. 626–
645.