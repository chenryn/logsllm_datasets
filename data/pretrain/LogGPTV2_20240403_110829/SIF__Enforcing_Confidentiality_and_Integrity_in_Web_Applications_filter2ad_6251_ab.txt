language is helpful. Readers familiar with Jif may skip
this subsection. Details of some of the new features of
USENIX Association
16th USENIX Security Symposium
3
Jif 3.0 are given in Section 3.
Jif is a security-typed language [36]: a type has a se-
curity label L that describes restrictions on information
at that type, which the compiler enforces. Security-type
systems like that in Jif can enforce noninterference, en-
suring that information labeled L can depend only on in-
formation labeled L or with a less restrictive label [28].
In other words, information cannot leak from higher to
lower levels, nor can untrusted information affect trusted
information. Proofs for noninterference exist for numer-
ous security-typed languages, but not for any language as
expressive as Jif. Jif labels are based on policies from the
decentralized label model (DLM) [22], in which princi-
pals express ownership of information-ﬂow policies.
A principal is an entity with security concerns, and
the power to observe and change certain aspects of the
system. In a web application, principals may be users
of the application, user groups, or even the web appli-
cation itself; SIF applications may choose which entities
to model as principals. Web application principals may
have different security concerns, and do not necessarily
trust each other. By allowing principals to have different
security policies, the DLM can express security concerns
of mutually distrusting principals.
A principal p may delegate to another principal q, in
which case q is said to act for p. The acts-for relation
is reﬂexive and transitive, and is similar to the speaks-
for relation [16]. The acts-for relation is needed to ex-
press trust relationships between principals, and can en-
code groups and roles. Jif supports a top principal > able
to act for all principals, and a bottom principal ⊥ that al-
lows all principals to act for it. A principal may also grant
its authority to code, meaning the code is trusted to per-
form actions such as declassiﬁcation that could violate
the principal’s information security.
Jif labels are constructed from reader policies and
writer policies [5]. A reader policy o→ r1, . . . , rn means
that principal o owns the policy, and o permits any princi-
pal that can act for any ri (or o itself) to read the data. For
example, the reader policy >→ p says that the top prin-
cipal permits p to observe information. A writer policy
o← w1, . . . , wn is owned by principal o, and o has per-
mitted any principal that can act for any of w1, . . . , wn,
or o to have inﬂuenced (“written”) the data.
Reader policies restrict to which principals informa-
tion may ﬂow, whereas writer policies describe from
which principals information may have ﬂowed. Reader
policies thus describe conﬁdentiality, and writer policies
describe integrity (provenance) of information.
A Jif label is a pair of a conﬁdentiality policy and an in-
tegrity policy, written {c ; d} for conﬁdentiality policy c
and integrity policy d. The set of conﬁdentiality policies
is formed by closing reader policies under conjunction
and disjunction, denoted t and u respectively. The con-
junction of two conﬁdentiality policies, c1 t c2, enforces
the restrictions of both c1 and c2. Thus, the readers per-
mitted by c1 t c2 is the intersection of readers permitted
by c1 and c2. Similarly, the readers permitted by the dis-
junction c1 u c2 is the union of readers permitted by c1
and c2. Integrity policies are formed by closing writer
policies under conjunction and disjunction. Dually to
conﬁdentiality, conjunction and disjunction are respec-
tively denoted u and t.
For example, in the label {Alice → Bob t Chuck →
Bob, Dave ; Alice ← >},
the conﬁdentiality policy
is the join of two reader policies, Alice → Bob and
Chuck → Bob, Dave. Thus, information with this la-
bel can be read only by principals that can act for at
least one of Alice or Bob, and at least one of Chuck,
Bob, or Dave; clearly, Bob is one such principal. The
integrity policy of the label consists of a single writer
policy, owned by Alice, stating that Alice believes the
data has been inﬂuenced only by principals able to act
for Alice or the top principal >. SIF uses conﬁdentiality
policies to restrict what information is sent to the client,
and integrity policies to restrict how information received
from the client is used.
Secure information ﬂow requires that the label on a
piece of information can only become more restrictive
as the information ﬂows through the system. Given la-
bels L and L0, we write L v L0 if the label L0 restricts
the use of information at least as much as L does. To
handle computations that combine information from dif-
ferent sources, the label L1 t L2 imposes the restrictions
of both L1 and L2.
The types of variables and expressions in Jif programs
include labels. For example, a value with type int{o→
r;⊥←⊥} is an integer with label {o→ r ; ⊥←⊥}: it
can be read only by principals that can act for r or o, and
has the lowest possible integrity. A Jif programmer may
annotate the type declarations of ﬁelds, variables, and
methods with labels; use of ﬁelds, variables, and meth-
ods must comply with the label annotations. For types
left unannotated, the Jif compiler either chooses default
labels, or automatically infers labels, thus reducing the
annotation burden on the programmer.
Although a Jif programmer may annotate a program
with arbitrary labels, he does not have complete control
over security. Labels must be internally consistent for the
program to type-check, and moreover, the labels must be
consistent with security policies from the external envi-
ronment.
In SIF, a web application interacts with the
external environment through the SIF interfaces, as well
as interfaces for back-end services (e.g., databases).
Jif’s type system prevents labeled information from
being unintentionally downgraded, or assigned a less-
restrictive label. Downgrading conﬁdentiality increases
the set of principals permitted to read the information,
4
16th USENIX Security Symposium
USENIX Association
Servlet Container
SIF Framework
HTTP Request
1
Servlet
doGet()
2
HTML
5
HTMLWriter
write(Node)
4
Page[Out, In]
= web application objects
(implemented in Jif)
= SIF framework objects
(implemented in Java)
Servlet
doGet()
Figure 1: Handling a request in SIF.
R
e
q
u
e
s
t
Action
invoke(Request)
Action
invoke(Request)
Action
invoke(Request)
3
Action
invoke(Request)
Action
invoke(Request)
whereas downgrading integrity reduces the set of prin-
cipals considered to have inﬂuenced the information.
The type system prevents unintentional downgrading by
tracking the data dependencies (information ﬂow) in the
program, including implicit ﬂows [8]: covert storage
channels that arise from program control structure. Jif
does permit information to be intentionally downgraded,
but any code that does so requires the authority of all
principals whose reader or writer policies are weakened
or removed as a result of the downgrading.
Timing and synchronization channels. Jif’s type sys-
tem does not track information ﬂow via timing or ter-
mination channels. These covert channels are not a se-
rious concern if web applications are not implemented
by adversaries; we assume that application programmers
are not malicious. Other work (e.g., [1, 31]) has investi-
gated checking and transforming security-typed code to
remove timing channels. Termination channels (which
can be regarded as an extreme timing channel) are low-
bandwidth, leaking at most one bit per interaction with
the web application, that is, one bit per request.
Jif was developed assuming a single-threaded execu-
tion model. However, SIF web applications are multi-
threaded Jif programs, and thread synchronization can
create covert timing channels that transmit information.
This risk can be mitigated by conﬁguring the web server
to handle at most one concurrent request per servlet,
or by isolating concurrent requests or sessions in the
protection domains offered by some Java run-time sys-
tems [12, 3].
2.3 Design of SIF
Like the Java Servlet framework, SIF allows application
code to deﬁne how client requests are handled. However,
there are some structural differences that facilitate the ac-
curate tracking of information ﬂow. Figure 1 presents an
overview of how SIF handles a request from a web client:
1. An HTTP request is made from a web client to a
servlet;
2. The HTTP request is wrapped in a Request object;
3. An appropriate Action object of the servlet is
found to handle the request, and its invoke method
called with the Request object;
4. The action’s invoke method generates a Page ob-
ject to return for the request;
5. The Page object is converted into HTML, which is
returned to the client.
Step 1: HTTP request from web client to servlet. Web
applications must extend the class Servlet, which is
similar to the HttpServlet class of the Java Servlet
framework. Figure 2 shows a simpliﬁed Jif signature for
the Servlet class, as well as other key classes of SIF.
The important aspects of these signatures are explained
as they arise, but because of space limitations, the syntax
of Jif methods and ﬁelds are not fully explained.
Web clients establish sessions with the servlet; ses-
sions are tracked by the servlet container, as in the Java
Servlet speciﬁcation. The SIF framework creates a ses-
sion principal for each session, which can be thought of
as corresponding to the session key shared between the
client and server [16], if such a key exists. The applica-
tion would typically deﬁne its own user principals, which
can delegate to the session principal.
Step 2: HTTP request wrapped in a Request object.
The class Request is a SIF wrapper class for an HTTP
request, providing restricted access to information in the
request, via the getParam method. The restricted in-
terface ensures that web applications are unable to cir-
cumvent the security policies on data contained in the
request, as described below.
USENIX Association
16th USENIX Security Symposium
5
abstract class Servlet {
final class Request {
// allows servlets to specify
// a default action
protected Action{req} defaultAction(Request req);
// principal representing the session
// between client and server
public final principal session;
// allows servlets to create a
// servlet-specific SessionState object
protected SessionState createSessionState();
public void setReturnPage{*:req.session}(
Request{*:req.session} req,
label out, label in,
Node[out,in]{*in} page)
where {*out;*in} ←session)}
getParam(Input inp);
// obtain a reference to
// the SessionState object
public SessionState getSessionState();
}
final class Input {
private final Nonce n;
public final label L;
}
abstract class InputNode[label Out, label In]
extends Node[Out,In] {
// framework statically enforces Out t In v inp.L
private final Input{L} inp;
Figure 2: Jif signatures for SIF classes
}
Step 3: An Action is found and invoked. Web applica-
tions implement their functionality in actions, which are
application-deﬁned subclasses of the SIF class Action.
A SIF servlet may have many action objects associated
with it; each action object belongs to a single servlet.
Actions can be used as the targets of forms and hyper-
links. For example, the target of a form is an action ob-
ject responsible for receiving and processing the data the
user submits via the form. This mechanism differs from
the standard Java servlet interface, which requires the ap-
plication implementor to write explicit request dispatch-
ing code (the doGet method). However, explicit dispatch
code in the application makes precise tracking of infor-
mation ﬂow difﬁcult, as the dispatch code is executed for
all requests, even though different requests may reveal
different information. By avoiding dispatch code, the
action mechanism permits more precise reasoning about
the information revealed by client requests to the server,
as discussed further in Section 2.4.
Action objects may be session-speciﬁc actions, which
can only ever be used by a single session, or they may
be external actions not speciﬁc to any given session. All
action objects within a given servlet have a unique iden-
tiﬁer. For session-speciﬁc actions, the identiﬁer is a se-
cure nonce, automatically generated by the framework
on construction of the action. For external actions, the
identiﬁer is a (human-readable) string speciﬁed by the
web application. Since external actions have ﬁxed iden-
tiﬁers, they may be the target of external hyperlinks, such
as a hyperlink in static HTML on a different web site.
When an HTTP request is received by a servlet, the
framework ﬁnds a suitable action to handle it. Typically,
the HTTP request contains a parameter value specifying
the unique identiﬁer of the appropriate action; for exam-
ple, forms generated by the servlet identify the action to
which the form is to be submitted. If the HTTP request
does not contain an action’s unique identiﬁer, then a de-
fault action speciﬁed by the Servlet.defaultAction
method is used to handle the request. This default is use-
ful for handling the ﬁrst request of a new session. If the
HTTP request contains an invalid action identiﬁer (e.g.,
the identiﬁer of a session-speciﬁc action of an expired