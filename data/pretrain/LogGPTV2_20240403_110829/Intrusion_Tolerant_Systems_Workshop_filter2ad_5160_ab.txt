an ongoing network attack.
Finally, formulating intrusion tolerance in terms of
symptoms is not unprecedented. The kind of intrusions
addressed by recent work on wrappers at NAI[1] and
the work on protecting the win32 dlls at RST [4] can
be viewed to be categorized in terms of symptoms, for
instance, all attacks that attempt to write to the start-up
folder.
2.2. Survivability Strategies Using Adaptive and
Unpredictable Responses
Once we identify the symptoms to monitor for sur-
viving, we devise the strategic responses to the symp-
toms. From one perspective, a strategy could be pro-
active or reactive. A pro-active strategy dictates a course
of action (COA) in anticipation or in preparation for
a future attack. For instance, anticipating simultane-
ous attacks on multiple replicas, one may deploy a non-
replicated stand-by which can be put in service at short
notice. As an example of a pro-active strategy that has
the “in preparation” ﬂavor, consider interfacing with a
ﬁrewall mechanism so that we can block IP trafﬁc from
an infected host when we know its identity. Reactive
strategies involve measures taken in reaction to some
observed event. For instance, when a host is under at-
tack one might consider migrating objects and services
from that host.
From another perspective, a strategy can be defensive
or tolerant. A defensive strategy attempts to prevent the
symptom from resurfacing, whereas a tolerant strategy
attempts to ﬁnd ways to avoid the symptom. An exam-
ple of defensive strategy is to block all IP trafﬁc from
a suspected host. Migrating replicas from the suspected
host would be an example of a tolerant strategy. These
different views of strategies are not mutually exclusive,
and a comprehensive strategy needed by an application
will probably involve all perspectives. Devising the right
strategy for a particular application is non-trivial. In the
initial stage of our application, we use an ad-hoc case
analysis to formulate a strategy.
Adaptation is a key capability for supporting any sur-
vivability strategy. Symptoms dictate the nature and
form of the adaptation. For instance, repeated replica
crash on a single host, a symptom observed at the ap-
plication level, could be responded to by migrating the
replica from the host in question to a different one. In
the case of a pre-planned and coordinated attack, adap-
tive response by itself is not enough if the response can
be predicted. If the attacker can accurately predict which
host the replica will be migrated to, he can plan ahead to
re-target the migrated replica in its new location. There-
fore, adaptive responses should be unpredictable to the
attacker. This way, pre-planning will be harder, and co-
ordinating an ongoing attack to counter the adaptive re-
sponses will take longer and be less reliable. This in
turn, will improve the application’s survivability.
Incorporating unpredictability is also non-trivial.
First, there has to be multiple options to choose from.
Then, response selection mechanism should have the ca-
pability to select different response(s) to the same symp-
tom at different times. Finally, not all of the responses
may be equally effective. In particular, there may be one
or more of the available options that must be engaged.
The response selection mechanism must be aware of
such constraints as well.
2.3. Bridging the Gap Between Application and
Infrastructure
Attempting to build an application with a survivabil-
ity strategy within the current distributed systems infras-
tructure , we ﬁnd that there is a disconnect between what
the application needs and what the infrastructure pro-
vides. To be speciﬁc, the following are key issues that
need to be addressed by developing new capabilities in
the middleware-space between the application and the
infrastructure:
 Awareness and control of infrastructure: Attacks
affect availability and quality of system resources.
Since a survivable application needs to cope with
these effects, awareness of the resource situation is
very important. In order to respond to attack symp-
toms effectively, the application may need to ex-
ert some control over parts of the infrastructure as
well. In general, the core issue here is to make the
quality and availability of resources translucent, in-
stead of opaque as is done in older middleware.
 Resource redundancy and its management: Pre-
planned and coordinated attacks may cause re-
sources to fail in an arbitrary manner, perhaps si-
multaneously or in stages. As in fault-tolerance,
resource redundancy is critical for tolerating such
failures, and resource managers must be capable of
addressing Byzantine failures. All resources that
3
are critical for an application will have to be re-
dundant and managed through an uniform inter-
face so that the application can easily integrate with
them to achieve the desired degree of awareness
and control. Protection of resources and resource
management systems is also very important. Con-
tinuing with the example adaptive response of mi-
grating replicas, if the attacker can exploit the re-
dundancy mechanism, he can force the replica to
migrate to a host of his choice which may be eas-
ier to attack or has already been compromised. A
new self-protected redundancy mechanism manag-
ing multiple resources and implementing Byzan-
tine fault-tolerance algorithms is required. Byzan-
tine fault-tolerant techniques are typically expen-
sive, and the requirement for tolerating Byzantine
failures in multiple system resources make it even
more difﬁcult. We are investigating engineering
solutions that combine fault-tolerance and secu-
rity techniques appropriately, and where graceful
degradation is acceptable and the cost and quality
of the solution is dynamically adjustable.
 Coordination and management of adaptation:
Adaptive responses may involve changes in the ap-
plication as well as changes in the way resources
are managed. For a systematic implementation of a
survivability strategy, this adaptive behavior needs
to be separated from the application’s functional
behavior. We argue that the space between the
application and the infrastructure is the appropri-
ate place for it. Adaptative responses will usually
involve coordination among multiple mechanisms
that are also in the middle; these mechanisms will
have various responsibilities ranging from resource
management to system security. It may be the case
that one adaptive response will preclude another.
Some of these adaptive responses may be more ex-
pensive than others. One of the underlying issues
involved here is the trade-off between adaptation
and the application’s performance.
3. Our Background and Recent Work
In our earlier work with QoS in distributed systems,
we have developed individual resource management
systems (AQuA, DIRM) [3, 2] that offer a certain de-
sired quality to the QoS-aware application via an adap-
tive middleware called QuO [6]. This middleware al-
lows the application to adjust itself when resource con-
straints do not meet the desired level. These applica-
tions display a minimal degree of inherent survivabil-
ity. With the capability of introducing environment-
awareness and adaptive behavior in distributed systems,
4
we then started to look at survivability requirements of
distributed applications. We presented our initial work
towards this in an earlier paper[5] describing how in-
tegration with IDSs can lead to system agility and dis-
cussed various beneﬁts of such integration. We have two
ongoing projects in this area. One focuses on defensive
strategies and how to build applications that incorporate
defensive strategies. In the other, we are exploring in-
trusion tolerance by means of middleware coordinated
adaptation that is unpredictable to the attacker.
4. Conclusion
Our ongoing work in adaptive middleware has led to
the discovery that applications that are aware of changes
in their environment can participate in their own de-
fense, recognizing the symptoms of attacks and improv-
ing the detection and responses of security and defense
mechanisms operating on their behalf. Traditional fault-
tolerance techniques, if extended to support coordinated,
malicious faults, appear promising to enhance the sur-
vival of applications. We are currently performing re-
search to make fault-tolerance techniques suitable for
the tolerance of intrusions in large-scale distributed sys-
tems. We are focusing on tolerating the symptoms of
attacks; tolerating Byzantine failures that can be parts of
malicious, coordinated attacks; and concentrating on un-
predictable responses, both pro-active and reactive, that
will prove difﬁcult for intruders to exploit. In this paper
have outlined our approach, and presented several key
problems that we are currently investigating.
References
[1] L. Badger.
Generic software wrappers.
Inter-
net URL http://www.pgp.com/research/nailabs/secure-
execution/wrappers-overview.asp, 2000.
DIRM technical overview.
[2] BBN Distributed Systems Research Group, DIRM project
team.
Internet URL
http://www.dist-systems.bbn.com/projects/DIRM, 1998.
[3] M. Cukier, J. Ren, C. Sabnis, D. Henke, J. Pistole,
W. Sanders, D. Bakken, M. Berman, D. Karr, and R. E.
Schantz. AQuA: An adaptive architecture that provides
dependable distributed objects. In Proceedings of the 17th
IEEE Symposium on Reliable Distributed Systems, pages
245–253, October 1998.
http://www.rstcorp.com/research/sandboxing/, 2000.
[5] J. P. Loyall, P. P. Pal, R. E. Schantz, and F. Webber. Build-
ing adaptive and agile applications using intrusion detec-
tion and response. In Proceedings of the ISOC Network
and Distributed Systems Security Conference, Februrary
2000.
[6] J. A. Zinky, D. E. Bakken, and R. E. Schantz. Architec-
tural support for Quality of Service for CORBA objects.
Theory and Practice of Object Systems, 1(3):55–73, April
1997.
[4] A. Ghosh.
Sandboxing mobile code.
Internet URL