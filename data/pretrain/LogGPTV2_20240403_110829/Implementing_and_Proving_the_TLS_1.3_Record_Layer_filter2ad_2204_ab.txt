The code also deﬁnes two inﬁx operators +@ and ∗@ for
addition and multiplication in the ﬁeld, relying on primitive,
unbounded integer arithmetic. Their result is annotated with
types Tot elem, to indicate that these operations are pure
total functions that return ﬁeld elements. Hence, the F(cid:2)
typechecker automatically checks that their result is in the
ﬁeld; it would report an error if e.g. we omitted the reduc-
tion modulo p. These operations are convenient to specify
polynomial computations (see §III-B) but highly inefﬁcient.
Instead, typical 32-bit implementations of Poly1305 rep-
resent ﬁeld elements as mutable arrays of 5 unsigned 32-bit
integers, each holding 26 bits. This low-level representation
evenly spreads out
the bits across the integers, so that
carry-overs during arithmetic operations can be delayed. It
also enables an efﬁcient modulo operation for p. We show
below an excerpt of the interface of our lower level veriﬁed
implementation, relying on the deﬁnitions above to specify
its correctness.
465
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
abstract type repr = buffer UInt32.t 5 (∗ 5-limb representation ∗)
val select: memory → r:repr → Tot elem (∗ current value held in r ∗)
val multiply: e0:repr → e1:repr → ST unit
(requires live e0 ∧ live e1 ∧ disjoint e0 e1)
(modiﬁes e0)
(ensures select e0(cid:2) = select e0 ∗@ select e1)
The type repr deﬁnes the representation of ﬁeld elements
as F(cid:2) buffers (i.e., mutable arrays) of 5 32-bit integers. It
is marked as abstract, to hide this representation from the
rest of the code. Functions are declared with a series of
argument types (separated by → ) ending with a return type
and an effect (e.g. Tot or ST). Functions may have logical pre-
and post-conditions that refer to their arguments, their result,
and their effects on the memory. If they access buffers, they
typically have a pre-condition requiring their caller to prove
that the buffers are ‘live’ in the current memory (that is, they
have been allocated and haven’t been de-allocated yet) and
they also explicitly state which buffers they modify.
The total function select is used only in speciﬁcations; it
reads the value of an element from the program memory. We
use it, for example, in the stateful speciﬁcation of multiply.
In the types above, we keep the memory argument implicit,
writing select e0 and select e0(cid:2) for the values of e0 in initial
and ﬁnal memories, respectively. (In real F(cid:2) code, pre- and
post-conditions take these memories as explicit arguments.)
The multiply function is marked as ST, to indicate a stateful
computation that may use temporary stack-based allocations.
It requires that its arguments e0 and e1 be live and disjoint;
it computes the product of its two arguments and overwrites
e0 with the result. Its post-condition speciﬁes the result in
terms of the abstract ﬁeld multiplication of the arguments.
Implementing and proving that multiply meets its mathe-
matical speciﬁcation involves hundreds of lines of source
code, relying on a custom Bignum library with lemmas on
integer representations and ﬁeld arithmetic (see §IX). Such
code is easy to get wrong, but once F(cid:2) typechecks it, we
are guaranteed that our low-level code is safe (e.g. it never
accesses buffers out of bound, or de-allocated buffers) and
functionally correct (since their results are fully speciﬁed).
All F(cid:2) types and speciﬁcations are then erased, so that the
compiled code only performs efﬁcient low-level operations.
Authenticated Encryption: Real Interface Let us consider
a simpliﬁed version of the authenticated encryption (AE)
functionality at the core of the TLS record layer. In F(cid:2), we
may write an AE module with the following interface:
val (cid:2)p: nat
val (cid:2)c: nat
type lbytes ((cid:2):nat) = b:bytes{length b = (cid:2)}
type bbytes ((cid:2):nat) = b:bytes{length b ≤ (cid:2)}
type plain = lbytes (cid:2)p
type cipher = lbytes (cid:2)c
abstract type key
val keygen: unit → ST key
val decrypt: key → cipher → Tot (option plain)
val encrypt: k:key → p:plain → ST (c:cipher{decrypt k c = Some p})
Plaintexts and ciphertexts are represented here as im-
mutable bytestrings of ﬁxed lengths (cid:2)p and (cid:2)c. We frequently
rely on type abbreviations to statically enforce length checks
for ﬁxed-length bytestrings using lbytes (cid:2), and for bounded-
length bytestrings using bbytes (cid:2). (Our presentation uses
immutable bytestrings for simplicity, whereas our record-
layer implementation also uses mutable buffers of bytes.)
Next, our interface deﬁnes an abstract type key; values
of this type can only be generated via keygen and accessed
via encrypt and decrypt. The internal representation of keys is
hidden from all other modules to protect their integrity and
secrecy. The function keygen needs to generate randomness
by calling an effectful external function; so we give this
function the ST effect to indicate that the computation is
impure and stateful (even though it does not explicitly
modify the memory). In particular, two calls to keygen may
yield different results. The function encrypt would typically
generate a nonce for use in the underlying AE construction,
and hence is also marked as stateful. In contrast, decrypt is
deterministic, so is marked with the Tot effect. Its result is
an optional plain value: either Some p if decryption succeeds,
or None otherwise. In pseudo-code we write ⊥ for brevity.
Our interface does not express any security guarantees
yet, but it does require a functional correctness guarantee,
namely that decryption undoes encryption.
Authenticated Encryption: Security Given an AE scheme,
one usually measures its concrete security as the advantage
of an adversary A that attempts to guess the value of b in
the following game:
Game Ae(A, AE)
b $← {0, 1}; L ← ∅; k $← AE.keygen()
b(cid:2) ← AEncrypt,Decrypt(); return (b ?= b(cid:2))
Oracle Encrypt(p)
Oracle Decrypt(c)
if b then p ← L[c]
if b then c $← byte(cid:3)c ; L[c] ← p
else c ← AE.encrypt k p
else p ← AE.decrypt k c
return p
return c
The adversary A is a program that can call the two oracle
functions to encrypt and decrypt using a secret key k. In the
real case (b = 0) they just call the real AE implementation.
In the ideal case (b = 1), Encrypt returns a randomly
sampled ciphertext and stores the associated plaintext in a
log L, while Decrypt performs decryption by looking up the
plaintext in the log, returning ⊥ when there is no plaintext
associated with the ciphertext. Ideal AE is perfectly secure,
inasmuch as the ciphertext does not depend on the plaintext.
Thus, we deﬁne AE security by saying that the attacker
cannot easily distinguish between the real and ideal cases.
For this game, we deﬁne A’s advantage probabilistically
as |2 Pr[Ae(A, AE)] − 1|, e.g. an adversary ﬂipping a coin to
guess b will succeed with probability 1
2 and has 0 advantage.
In this paper, we adopt a more ﬂexible notation for
466
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
indistinguishability games: we keep the sampling of b and
the call to the adversary implicit, and instead indicate the
oracles available to this adversary. Hence, we write the game
above (with the same oracles) equivalently as
Game Aeb(AE)
L ← ∅ ; k $← AE.keygen(); return {Encrypt, Decrypt}
This notation facilitates the re-use of oracles for build-
ing other games, much like F(cid:2) modules. In general, we
write Gb to refer to an indistinguishability game G where
the adversary A tries to guess the value of
the ran-
dom bit b by calling the oracles returned by G. For
all such games, we equivalently deﬁne the advantage as
(cid:2)(cid:2)(cid:2).
(cid:2)(cid:2)(cid:2)Pr[AG
1 = 1] − Pr[AG
0 = 1]
Embedding games in F(cid:2) modules Although we wrote
the game Aeb above in pseudo-code, each game in this
paper reﬂects a veriﬁed F(cid:2) module, written e.g. AEb, that
uses a boolean ﬂag b to select between real and ideal
implementations of the underlying cryptographic module
AE. For example, AEb may deﬁne the key type and encrypt
function as
abstract type key = {key: AE.key; log: encryption_log}
let encrypt (k:key) (p:plain) =
if b then
let c = random_bytes (cid:2)c in
k.log ← k.log ++ (c,p);
c
else AE.encrypt k.key p
where the (private) key representation now includes both the
real key and the ideal encryption log. The encrypt function
uses k.log to access the current log, and ++ to append a new
entry, much as the Encrypt oracle.
Idealization Interfaces The idealized module AEb can
be shown to implement the following typed interface that
reﬂects the security guarantee of the Aeb game:
abstract type key
val log: memory → key → Spec (seq (cipher × plain))
val keygen: unit → ST k:key
(ensures b ⇒ log k(cid:2) = ∅)
val encrypt: k:key → p:plain → ST (c:cipher)
(ensures b ⇒ log k(cid:2) = log k ++ (c,p))
val decrypt: k:key → c:cipher → ST (o:option plain)
(ensures b ⇒ o = lookup c (log k) ∧ log k’ = log k)
The interface declares keys as abstract, hiding both the
real key value and the ideal log, and relies on the log to
specify the effects of encryption and decryption. To this end,
it provides a log function that reads the current content of the
log—a sequence of ciphertexts and plaintexts. This function
is marked as Spec, indicating that it may be used only in
speciﬁcation and will be discarded by the compiler after
typechecking.
Each of the 3 ensures clauses above uses this proof-only
function to specify the state of the log before (log k) and after
the call (log k(cid:2)). Hence, the interface states that, in the ideal
case, the function keygen creates a key with an empty log;
encrypt k p returns a ciphertext c and extends the log for k
with an entry mapping c to p; and decrypt k c returns exactly
the result of looking up for c in the current log. This post-
condition formally guarantees that decrypt succeeds if and
only if it is passed a ciphertext that was generated by encrypt;
in other words it guarantees both functional correctness and
authentication (a notion similar to INT-CTXT).
idealized functionality is independent
AEb is also parametrized by a module Plainb that deﬁnes
abstract plaintexts, with an interface that allows access to
their concrete byte representation only when b = 0 (for real
encryption). By typing AEb, we verify that, when b = 1,
our
(information-
theoretically) from the values of the plaintexts it processes.
From the viewpoint of the application, the plaintext ab-
straction guarantees that AE1 preserves the conﬁdentiality
and integrity of encrypted data (as in classic information
ﬂow type systems). An application can rely on this fact to
prove application-level guarantees. For instance, an applica-
tion may prove, as an invariant, that only well-formed mes-
sages are encrypted under a given key, and thus that parsing
and processing a decrypted message always succeeds.
randomness
Probabilistic Semantics We model
(e.g.
random_bytes) using primitive sampling functions. Two
Boolean terminating F(cid:2) programs A0 and A1 are equivalent,
written A0 ≈ A1, when they return true with the same
probability. They are -equivalent, noted A0 ≈ A1, when
| Pr[A1⇓ true]− Pr[A0⇓ true]| ≤  where Pr[A⇓ v] denotes
the probability that program A evaluates to value v according
to the probabilistic semantics of F(cid:2). These deﬁnitions extend
to program evaluation contexts, written Ab[_],
in which
case  depends on the program plugged into the context,
which intuitively stands for the adversary. Equipped with
these deﬁnitions, we can develop code-based game-playing
proofs following the well-established approach of Bellare
and Rogaway [5] directly applied to F(cid:2) programs rather than
pseudo-code. For example, we can reformulate AE security
0[A], where A now ranges over well-
as AE
typed Boolean programs parameterized by the two functions
encrypt and decrypt deﬁned by AEb. Our deﬁnition of -
equivalence between real and ideal implementations of AEb
matches the deﬁnition of A’s advantage in the Aeb game.
1[A] ≈ AE
Concrete security deﬁnitions and reductions As illus-
trated for AE below, our security deﬁnitions will consist
of a game and a notation for the adversary advantage,
parameterized by a measure of oracle use (e.g. how many
times an adversary calls an oracle is called). We intend to
provide concrete bounds on those advantages, as a function
of their parameters. To this end, our reduction theorems
will relate the advantage for a given construction to the
advantages of its building blocks.
467
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 1 (AE-security): Given AE, let Ae(A[qe, qd])
be the advantage of an adversary A that makes qe queries
to Encrypt and qd queries to Decrypt in the Aeb(AE) game.
Equipped with this deﬁnition and our idealized interface
for AE, we can prove the security of programs using ideal
AE (b = 1), say with advantage , and then bound the
advantage of the same programs using real AE (b = 0) to
 + Ae(A[qe, qd]).
We can either assume that this deﬁnition holds for our real
AE module with an Ae that is small for realistic adversaries
(possibly relying on functional correctness and some prior
proof of security), or we can prove that our AES-GCM
module (say) achieves some bound on Ae by reduction to
a simpler assumptions on the AES cipher module. In later
sections, we will show how we can precisely compute the
adversary A’s advantage in the game above from a related
adversary B’s advantage in winning the PRF game on the
underlying cipher (e.g. AES). The proof relies on standard
cryptographic game transformations that are applied, on
paper, at the level of F(cid:2) code, combined with functional
correctness proofs about the real and ideal code, veriﬁed
automatically by F(cid:2).
Games vs Idealized Modules We conclude this presenta-
tion of our approach by discussing differences between the
games on paper and the modules of our implementation.
Standard-compliant modules include many details elided
in informal games; they also use lower level representations
to yield more efﬁcient code, and require additional type
annotations to keep track of memory management.
These modules are part of a general-purpose veriﬁed
cryptographic libraries, providing real functionality (when
idealizations ﬂags are off) so they always support multiple
instances of their functionality. Here for instance, AEb has a
function to generate keys, passed as parameters to the encrypt
function, whereas the game oracle uses a single, implicit
key. (This difference can usually be handled by a standard
hybrid-argument reduction.)
Modules rely on the F(cid:2) type system to enforce the rules
of the games. Hence, dynamic checks in games (say, to test
whether a nonce has already been used) are often replaced
with static pre-conditions on typed adversaries. Similarly,
types enforce many important but trivial conditions, such as
the length of oracle arguments, and are often kept implicit
in the paper.
III. ONE-TIME MACS
Anticipating on §V, the AEAD construction uses fresh
key materials for each message, so we consider authentica-
tion when keys are used to compute at most one MAC.
We treat two main constructions, GHASH and Poly1305,
using the same deﬁnitions, code, and proofs, inasmuch as
possible. We initially suppose that the whole key is freshly
generated for each MAC (as in ChaCha20-Poly1305) before
presenting the general case where a part of the key is shared
between multiple MACs (as in AES-GCM).
A. One-time MAC functionality and security
≤ (cid:2)k} (∗ total key length ∗)
We outline below our interface for message authentication
code (MAC), omitting its functional speciﬁcation (see §IX).
val (cid:2)k0 : nat
val (cid:2)k: n:nat {(cid:2)k0
val (cid:2)t: nat
val (cid:2)m: nat
type key0 = lbytes (cid:2)k0
type key = lbytes (cid:2)k
type tag = lbytes (cid:2)t
type message = b:bbytes (cid:2)b {wellformed b}
val keygen0: unit → ST key0
val keygen: key0 → ST key
val verify: key → message → tag → Tot bool
val mac: k:key → m:message → Tot (t:tag{verify k m t})
(∗ static key length, may be 0 ∗)
(∗ tag length ∗)
(∗ maximal message length ∗)
(∗ static key shared between MACs ∗)