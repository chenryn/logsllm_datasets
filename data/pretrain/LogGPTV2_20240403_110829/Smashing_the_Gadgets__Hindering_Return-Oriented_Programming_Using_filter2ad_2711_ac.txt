834,892 (66.7)
324,211 (70.6)
261,613 (66.0)
5,682,306 (68.4)
11,333,762 (66.8)
473.1
27,362,674
21,041,648 (76.9)
2,604,864 ( 9.5)
18,436,784 (67.4)
t
h
g
n
e
l
n
e
v
g
i
f
o
s
t
e
g
d
a
g
n
e
k
o
r
b
l
l
a
f
o
%
100
80
60
40
20
0
(darkest color) leftmost instr.
(lightest color) rightmost instr.
5
   4
        3
   2
Gadget length (instructions)
Figure 8.
Impact of code randomization on the broken gadgets’ instructions
according to their location in the gadget. The order of the bars corresponds
to the order of the instructions in the gadget. Indicatively, the ﬁrst (leftmost)
instruction of two-instruction gadgets is altered in more than 80% of all broken
two-instruction gadgets.
of the unmodiﬁed gadgets are located in parts of code that have
not been extracted by IDA Pro, and which consequently will
never be affected by our transformations. When considering
only the gadgets that are contained within the disassembled
code regions on which code randomization can be applied,
the percentage of affected gadgets slightly increases (dashed
line). Given that we do not take into account code blocks that
have been identiﬁed by IDA Pro using speculative methods,
this shows that the use of a more sophisticated code extraction
mechanism will increase the number of gadgets that can be
modiﬁed. Figure 7 shows the total percentage of gadgets
modiﬁed by each code transformation technique for the same
data set. Note that a gadget can be modiﬁed by more than one
technique. Overall, the total percentage of modiﬁable gadgets
across all PE ﬁles is about 76.9%, as shown in Table I.
2) Impact: We identify two qualitatively different ways in
which a code transformation can impact a gadget. As discussed
in Sec. IV-A, a gadget can be eliminated, if any of the applied
transformations removes completely its ﬁnal control transfer
instruction. If the ﬁnal control transfer instruction remains
intact, a gadget can then be broken, if at least one of its internal
instructions is altered, and the CPU and memory state after
its execution is different than the original, i.e., the outcome
of its computation is not the same. As shown in Table I, in
the average case, about 9.5% of all gadgets contained in a PE
ﬁle can be rendered completely unusable. For a vulnerable
application, this already removes about one in ten of the
available gadgets for the construction of ROP code. Although
the rest of the modiﬁable gadgets (67.4%) is not eliminated,
609
they can be “broken” by probabilistically modifying one or
more of their instructions.
In case some of the instructions in a broken gadget can
never be altered, it is quite possible that part of its functionality
will remain unaffected, and thus an attacker could still use it
by relying only on its unmodiﬁable instructions. Especially
for larger gadget sizes,
if the possible modiﬁcations are
clustered only around a certain part of the gadget, e.g., its
ﬁrst instructions, then an attacker could predictably rely on
the rest of the gadget. We explore this issue by measuring the
number of broken gadgets in which an instruction at a given
position can be altered.
Figure 8 shows the impact of code randomization on a
broken gadget’s instructions, according to their location within
the gadget. Each group of bars corresponds to a different
gadget length, and in each group, the leftmost bar corresponds
to the leftmost instruction of the gadget. For all sizes, the
probability that an instruction at a given position will be
affected is quite evenly distributed and remains beyond 60%,
with the exception of the ﬁnal (control transfer) instruction.
This is expected, since most of the transformations cannot
affect the ﬁnal instruction of intended gadgets (e.g., ret).
As we observe, the locations of the modiﬁed instructions in
broken gadgets are almost equally unpredictable.
3) Entropy: Some of the code transformations can perturb
a given instruction within a gadget only in a limited num-
ber of ways, while others can generate a larger number of
permutations. For example, for instructions with only two
equivalent forms, atomic instruction substitution can modify
a particular location in a gadget only in one way, allowing
for two possible states. On the other hand, intra basic block
instruction reordering usually results to a large number of
possible permutations, especially for larger basic blocks that
contain many instructions with no interdependencies.
Usually though, a broken gadget can be modiﬁed at multiple
locations, and the same location can be altered in multiple
ways by more than one code transformations. Consequently,
the number of possible randomized states in which a broken
gadget can exist, or its randomization entropy, corresponds
to the product of the number of permutations that each of
the different transformations can generate for that gadget. In
the worst case, a broken gadget can exist in two possible
states: its original form, or its alternative after modiﬁcation.
For example, there are only two possible orderings for the pop
instructions in an intended gadget of the form pop reg; pop
reg; ret; given that no other transformation can alter it.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
s
t
e
g
d
a
g
f
o
n
o
i
t
c
a
r
f
e
v
i
t
l
a
u
m
u
C
1
0.8
0.6
0.4
0.2
0
0
1 2 3
10
   2
10  
   3
10  
   4
10  
   5
10  
Number of possible randomized versions
Figure 9. Randomization entropy for broken gadgets.
Figure 9 shows the number of possible randomized versions
of each gadget (including its original), as a cumulative fraction
of all broken gadgets. As seen in the lower left corner, a small
amount of about 12% of the gadgets can be modiﬁed only in
one way, and thus can exist in two possible states. However,
the randomization entropy increases exponentially, and the
upper 80% of the gadgets have four or more randomized states.
As more of the different transformations are applied on the
same gadget, the randomization entropy increases to thousands
of possible modiﬁed states.
Although for a small amount of gadgets an attacker can have
a 50% chance of guessing the actual behavior of a gadget, ROP
code relies on a chain of many different gadgets to achieve
its purpose (11–18 unique gadgets in the exploits we tested).
Even if one of the gadgets behaves in a non-expected way,
then the ROP code will fail. Given that code randomization
typically breaks (or even eliminates) several of the gadgets
used in a ROP exploit, the number of possible randomized
states that can prevent the correct execution of the ROP code
is usually very high, as demonstrated in Sec. V-C.
B. Correctness and Performance
One of the basic principles of our approach is that the
different in-place code randomization techniques should be
applied cautiously, without breaking the semantics of the
program. A straightforward way to verify the correctness of
our code transformations is to apply them on existing code and
compare the outcome before and after modiﬁcation. Simply
running a randomized version of a third-party application and
verifying that it behaves in the expected way can provide a
ﬁrst indication. However, using this approach, it is hard to
exercise a signiﬁcant part of the code, and potentially incorrect
modiﬁcations may go unnoticed.
For this purpose, we used the test suite of Wine [61], a
compatibility layer that allows Windows applications to run
on Unix-like operating systems. Wine provides alternative
implementations of the DLLs that comprise the Windows API,
and comes with an extensive test suite that covers the imple-
mentations of most functions exported by the core Windows
DLLs. Each function is executed multiple times using various
inputs that test different conditions, and the outcome of each
execution is compared against a known, expected result. We
ported the test code for about one third of the 109 DLLs
included in the test suite of Wine v1.2.2, and used it directly on
the actual DLLs from a Windows 7 installation. Using multiple
randomized versions of each tested DLL, we veriﬁed that in
all runs, all tests completed successfully.
We took advantage of the extensive and diverse code exe-
cution coverage of this experiment to also evaluate the impact
of in-place code randomization to the runtime performance of
the modiﬁed code. Among the different code transformations,
instruction reordering is the only one that could potentially
introduce some non-negligible overhead, given that sometimes
the chosen ordering may be sub-optimal. We measured the
overall CPU user time for the completion of all tests by
taking the average time across multiple runs, using both the
original and the randomized versions of the DLLs. In all cases,
there was no observable difference in the two times, within
measurement error.
C. Effectiveness
1) ROP Exploits: We evaluated the effectiveness of in-place
code randomization using publicly available ROP exploits
against vulnerable Windows applications [53], [62], [63], as
well as generic ROP payloads based on commonly used
DLLs [64], [65]. These seven different ROP code imple-
mentations,
listed in Table II, bypass Windows DEP and
execute a second-stage shellcode, as described in Sec. II, and
work even in the latest version of Windows, with DEP and
ASLR enabled. The ROP code used in the three exploits
is implemented with gadgets from one or a few DLLs that
do not support ASLR, as shown in the second column of
Table II. The number of unique gadgets used in each case
varies between 10–18, and typically a large part of the gadgets
is repeatedly executed at many points throughout the ROP
code. When replacing the original non-ASLR DLLs of each
application with randomized versions, in all cases the exploits
were rendered unsuccessful. Similarly, we used a custom
application to test the generic ROP payloads and veriﬁed that
the ROP code did not succeed when the corresponding DLL
was randomized.
The ROP code of the exploit against Acrobat Reader uses
just 11 unique gadgets, all coming from a single non-ASLR
DLL (icucnv36.dll). From these gadgets, in-place code ran-
domization can alter six of them: one gadget is completely
eliminated, while the other ﬁve broken gadgets have 2, 2, 3,
4, and 6 possible states, respectively, resulting to a total of
287 randomized states (in addition to the always eliminated
gadget, which also alone breaks the ROP code). Even if we
assume that no elimination were possible, the exploit would
still succeed only in one out of the 288 (0.35%) possible
instances (including the original) of the given gadget set.
Considering that this is a client-side exploit, in which the
attacker will probably have only one or a few opportunities for
tricking the user to open the malicious PDF ﬁle, the achieved
randomization entropy is quite high—always assuming that
none of the gadgets could have been eliminated. As shown
610
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 
ROP EXPLOITS [53], [62], [63] AND GENERIC ROP PAYLOADS [64], [65] TESTED ON WINDOWS 7 SP1.
Table II
ROP exploit/payload
non-ASLR DLLs:
used for ROP
Gadgets in
non-ASLR DLLs
Modifiable (total %:
Broken % Eliminated %)
Unique Gadgets Used:
Modifiable (Br.,El.)
Combinations
Adobe Reader v9.3.4 [53]
Integard Pro v2.2.0 [62]
Mplayer Lite r33064 [63]
msvcr71.dll [64]
msvcr71.dll [65]
mscorie.dll [64]
mfc71u.dll [65]
3: 1
1: 1
5: 2
1: 1
1: 1
1: 1
1: 1
36,760
5,137
117,822
10,301
10,301
1,616
86,803
28,637 (77.9: 70.1
4,027 (78.4: 70.5
7.8)
7.9)
104,671 (88.8: 70.0 18.8)
9.6)
9.6)
7.1)
5.1)
7,129 (69.2: 59.6
7,129 (69.2: 59.6
1,304 (80.6: 73.5
64,053 (73.8: 68.7
11:
6 (5, 1)
16: 10 (9, 1)
7 (6, 1)
18:
9 (8, 1)
14:
8 (8, 0)
16:
4 (4, 0)
10:
11:
6 (6, 0)
287
322,559
1,128,959
3,317,760
1,728,000
25,200
170,496
in Table II, the number of possible randomized states in the
rest of the cases is several orders of magnitude higher. This
is mostly due to the larger number of broken gadgets, as well
as due to a few broken gadgets with tens of possible modiﬁed
states, which both increase the number of states exponentially.
Next, we explored whether the affected gadgets could be
directly replaced with unmodiﬁable gadgets in order to reliably
circumvent our technique. Out of the six affected gadgets in
the Adobe Reader exploit, only four can be directly replaced,
meaning that the exploit cannot be trivially modiﬁed to bypass
randomization. Furthermore, two of the gadgets have only
one replacement each, and both replacements are found in
code regions that are not discovered by IDA Pro—both could
be randomized using a more precise code extraction method.
For the rest of the ROP payloads, there are at least three
irreplaceable gadgets in each case.
We should note that the relatively small number of gadgets
used in most of these ROP payloads is a worst-case scenario
for our technique, which however not only is able to prevent
these exploits, but also does not allow the attacker to directly
replace all the affected gadgets. Indeed, besides the more
complex ROP payloads used in the Integard and Mplayer
exploits,
the rest of the payloads use API functions that
are already imported by a non-ASLR DLL, and simply call
them directly using hard-coded addresses. This type of API
invocation is much simpler and requires fewer gadgets [26]
compared to ROP code like the one used in the Integard and
Mplayer exploits (16 and 18 unique gadgets, respectively),
which ﬁrst dynamically locates a pointer to kernel32.dll (al-
ways ASLR-enabled in Windows 7) and then gets a handle to
VirtualProtect.
2) Automated ROP Payload Generation: The fact
that
some of the randomized gadgets are not directly replaceable
does not necessarily mean that the same outcome cannot be
achieved using solely unmodiﬁable gadgets. To assess whether
an attacker could construct a ROP payload resistant to in-
place code randomization based on gadgets that cannot be
randomized, we used Q [26] and Mona [27], two automated
ROP code construction tools.
Q is a general-purpose ROP compiler that uses semantic
program veriﬁcation techniques to identify the functionality
of gadgets, and provides a custom language, named QooL,
for writing input programs. Its current implementation only
supports simple QooL programs that call a single function or
system call, while passing a single custom argument. In case
the function to be called belongs to an ASLR-enabled DLL,
Q can compute a handle to it through the import table of a
non-ASLR DLL [12], when applicable. We should note that
although Q currently compiles only basic QooL programs that
call a single API function, this does not limit our evaluation,
but on the contrary, stresses even more our technique. The
simpler the programs, the fewer the gadgets used, which makes
it easier for Q to generate ROP code even when our technique
limits the number of available gadgets.
Mona is a plug-in for
Immunity Debugger
[66]
for available gadgets, categorizes
that
automates the process of building Windows ROP payloads
for bypassing DEP. Given a set of non-ASLR DLLs,
Mona searches
them
according to their
to
automatically generate four alternative ROP payloads for
giving execute permission to the
embedded shellcode
and then invoking it, based on the VirtualProtect,
VirtualAlloc,
and
SetProcessDEPPolicy API functions (the latter two are
not supported in Windows 7).
functionality, and then attempts
NtSetInformationProcess,
Considering the functionality of the ROP payloads gener-
ated by the two tools, Mona generates slightly more complex
payloads, but its gadget composition engine is less sophisti-
cated compared to Q’s. Q generates payloads that compute
a function address, construct its single argument, and call it.
Payloads generated by Mona also call a single memory alloca-
tion API function (which though requires the construction of
several arguments), copy the shellcode to the newly allocated
area, and transfer control to it. Note that the complexity of
the ROP code used in the tested exploits is even higher, since
they rely on up to four different API functions [53], or “walk
up” the stack to discover pointers to non-imported functions
from ASLR-enabled DLLs [62], [63].
Table III shows the results of running Q and Mona on
the same set of applications and DLLs used in the previous
section (for applications, all non-ASLR DLLs are analyzed
collectively), for two different cases: when all gadgets are
available to the ROP compiler, and when only the non-
randomized gadgets are available. The second case aims to
build a payload that will be functional even when code
randomization is applied. Although both Q and Mona were
able to create payloads when applied on the original DLLs in
almost all cases, they failed to construct any payload using
only non-randomized gadgets in all cases.
Although our technique was able to prevent two different
611
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:51 UTC from IEEE Xplore.  Restrictions apply. 