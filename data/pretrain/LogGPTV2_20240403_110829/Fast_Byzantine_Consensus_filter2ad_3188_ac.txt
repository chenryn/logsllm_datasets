f o r
w a i t
w h i l e ( n o t
l e a r n e d )
s e n d ( PULL )
t o a l l
l e a r n e r s
l e a r n e r . o n P u l l ( ) :
from l e a r n e r
l n
I f
I
l e a r n e d some p a i r
( v a l u e , number )
t h e n
s e n d ( LEARNED, v a l u e , number )
t o l n
l e a r n e r . o n L e a r n e d ( v a l u e , number ) :
from l e a r n e r
l n
L ea r n [ l n ]
i f
s u c h t h a t
t h e r e
: = ( v a l u e , number )
a r e
f + 1 x
l e a r n [ x ] = = ( v a l u e , number )
t h e n
l e a r n e d : = ( v a l u e , number )
/ /
l e a r n i n g
Figure 1. FaB pseudocode (excluding recovery)
transmission policy therefore ensures that in periods of syn-
chrony, the leader will retransmit until it is guaranteed that
no leader election will be triggered. Note that the proposers
do not wait until they hear from all learners before becom-
ing satisﬁed (since some learners may have crashed). It is
possible therefore that the leader stops retransmitting be-
fore all learners have learned the value. The pull protocol in
lines 29-41 ensures that the remaining correct learners will
eventually learn from their peers.
Correctness The proofs of CS1, CS2, and CS3 for the
common case apply, unchanged, in this weaker network
model. The liveness proof is different, because it must han-
dle fair, rather than reliable, links—it can found in [15].
5.3 Recovery protocol
When proposers suspect the current leader of being
faulty, they elect a new leader who then invokes the recov-
ery protocol. There are two scenarios that require special
care.
First, some value v may have already been chosen: the
new leader must then propose the same v to maintain CS2.
Second, a previous malicious leader may have performed
a poisonous write [16], i.e. a write that prevents learners
from reading any value—for example, a malicious leader
could propose a different value to each acceptor.
If the
new leader is correct, consensus in a synchronous execution
should nonetheless terminate.
In our discussion so far, we have required acceptors to
only accept the ﬁrst value they receive. If we maintained
this requirement, the new leader would be unable to recover
from a poisonous write. We therefore allow acceptors to
change their mind and accept multiple values. Naturally,
we must take precautions to ensure that CS2 still holds.
protocols can be used here without modiﬁcation, e.g. the leader election
protocol in [2].
5.3.1 Progress certiﬁcates and the recovery protocol
If some value v was chosen, then in order to maintain CS2
a new correct leader must not propose any value other than
v. In order to determine whether some value was chosen,
the new leader must therefore query the acceptors for their
state. It can gather at most a − f replies. We call the set
of these replies a progress certiﬁcate (pc). The pc serves
two purposes. First, it allows the new leader to determine
whether some value v may have been chosen, in which case
the leader proposes v. We say that the correct leader will
only propose a value that the progress certiﬁcate vouches
for—we will discuss in Section 5.3.2 how a progress certiﬁ-
cate vouches for a value. Second, the pc allows acceptors
to determine the legitimacy of the value proposed by the
leader, so that a faulty leader may not corrupt the state after
some value was chosen. In order to serve the second pur-
pose, we require the answers in the process certiﬁcate to be
signed.
A progress certiﬁcate pc must have the property that if
some value v was chosen, then pc only vouches for v (since
v is the only proposal that maintains CS2). It must also have
the property that it always vouches for at least one value, to
ensure progress despite poisonous writes. Before examin-
ing progress certiﬁcates in more detail, let us examine how
we would like to use them in the recovery protocol.
In the recovery protocol, the newly elected leader (cid:95) ﬁrst
gathers a progress certiﬁcate by querying acceptors and re-
ceiving a − f signed responses. Then, (cid:95) decides which
value to propose:
If the progress certiﬁcate vouches for
some value v, then (cid:95) proposes v. Otherwise, (cid:95) is free
to propose any value. Next, the leader follows the nor-
mal leader protocol to propose its value, and piggybacks
the progress certiﬁcate alongside its proposal to justify its
choice of value. The acceptors check that the new proposed
value is vouched for by the progress certiﬁcate, thus ensur-
ing that the new value does not endanger safety.
As in Paxos, acceptors who hear of the new leader (when
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply. 
the new leader gathers the progress certiﬁcate) promise to
ignore messages with a lower proposal number (i.e. mes-
sages from former leaders). In order to prevent faulty pro-
posers from displacing a correct leader, the leader elec-
tion protocol provides a proof-of-leadership token to the
new leader (typically a collection of signed “election” mes-
sages).
5.3.2 Constructing progress certiﬁcates
A straightforward implementation of progress certiﬁcates
would consist of the currently accepted value, signed, from
a− f acceptors. If these values are all different, then clearly
no value was chosen: in this case the progress certiﬁcate
should vouch for any value since it is safe for the new leader
to propose any value.
Unfortunately, this implementation falls short: a faulty
new leader could use such a progress certiﬁcate twice to
cause two different values to be chosen. Further, this can
happen even if individual proposers only accept a given
progress certiﬁcate once. Consider the following situation.
We split the acceptors into four groups; the ﬁrst group has
size 2 f + 1, the second has size f and contains malicious
acceptors, and the third and fourth have size f . Suppose
the values they have initially accepted are “A”,“B”,“B”, and
“C”, respectively. A malicious new leader (cid:104) can gather a
progress certiﬁcate establishing that no value has been cho-
sen. With this voucher, (cid:104) can ﬁrst sway f acceptors from
the third group to “A” (by deﬁnition, “A” is now chosen) ,
and then, using the same progress certiﬁcate, persuade the
acceptors in the ﬁrst and fourth group to change their value
to “B”—“B” is now chosen. Clearly, this execution violates
CS2.
To prevent progress certiﬁcates from being used twice
as in the scenario described above, we make three changes.
First, we only allow a proposer to propose a new value only
once while it serves as a leader. Speciﬁcally, we tie progress
certiﬁcates to a proposal number, whose value equals the
number of times a new leader has been elected.
Second, we associate a proposal number to proposed val-
ues to form a (value, number) pair. Acceptors now accept
pairs rather than just values. Learners learn a pair o if they
see that (cid:4)(a + 3 f + 1)/2(cid:5) acceptors accepted it. We sim-
ilarly alter the deﬁnition of chosen to apply to pairs, so
(v, pn) is chosen if (cid:4)(a + f + 1)/2(cid:5) correct acceptors have
accepted it.
Third, we change the conditions under which acceptors
accept a value (Figure 2). In addition to ignoring propos-
als with a proposal number lower than any they have seen
(line 16), acceptors only accept one proposal for every pro-
posal number (line 18) and they only change their accepted
value if the progress certiﬁcate vouches for the new (value,
number) pair (lines 20-21).
We are now ready to deﬁne progress certiﬁcates con-
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
l e a d e r . o n E l e c t e d ( newnumber ) :
: = max ( number , newnumber )
f o r
l e a d e r
number
i f
( n o t
s e n d ( QUERY, number , p r o o f )
u n t i l g e t
PC : = t h e u n i o n o f
i f PC v o u c h e s
o n S t a r t ( )
( REP ,
t h e s e
t h i s number )
t o a l l
t h e n r e t u r n
a c c e p t o r s
s i g n e d ( v a l u e , number )
)
from a−f
a c c e p t o r s
r e p l i e s
f o r
( v ’ , number )
t h e n v a l u e : = v ’
a c c e p t o r s . onQuery ( pn , p r o o f ) :
from l e a d e r
i f
( i n v a l i d p r o o f o r pn<l a r g e s t p n )
r e t u r n / /
i g n o r e bad r e q u e s t s
t h e n
l a r g e s t p n : = pn
s e n d ( REP ,
s i g n e d ( v a l u e , pn ) )
t o t h e
l e a d e r
a c c e p t o r . o n P r o p o s e ( v a l u e , number , p r o g c e r t ) :
from l e a d e r
i f number != l a r g e s t p n t h e n
r e t u r n / / o n l y l i s t e n t o c u r r e n t
l e a d e r
i f
a c c e p t e d ( v , pn ) and pn=number
t h e n
r e t u r n / / o n l y once p e r p r o p . number
a c c e p t e d ( v , pn ) and v != v a l u e and
i f
p r o g c e r t d o e s n o t vouch f o r
( v a l u e , number )
t h e n
r e t u r n / / o n l y change w i t h change v o u c h e r
a c c e p t e d : = ( v a l u e , number )
s e n d ( ACCEPTED, a c c e p t e d )
/ /
a c c e p t i n g
t o a l l
l e a r n e r s
Figure 2. FaB recovery pseudocode
cretely. A progress certiﬁcate contains signed replies
(vi, pn) from a− f acceptors (Figure 2, line 14). These
replies contain that acceptor’s currently accepted value
and the proposal number of the leader who requested the
progress certiﬁcate.
say
that
Deﬁnition We
certiﬁcate
a
(v, pn)
((v0, pn), . . . ,(va− f , pn)) vouches
if there is no value vi (cid:7)= v that appears (cid:4)(a− f + 1)/2(cid:5) times
in the progress certiﬁcate.
progress
for
the pair
A consequence of this deﬁnition is that if some speciﬁc pair
appears at least (cid:4)(a− f +1)/2(cid:5) times in the progress certiﬁ-
cate, then the progress certiﬁcate vouches for that pair only.
If there is no such pair, then the progress certiﬁcate vouches
for any pair with the right pn. As we prove in the next sec-
tion, progress certiﬁcates guarantee that if some pair (v, pn)
is chosen, then all progress certiﬁcates with a proposal num-
ber following pn will vouch for v and no other value.
Let us revisit the troublesome scenario of before in light
of these changes. Suppose, without loss of generality, that
the malicious leader (cid:104) gathers a progress certiﬁcate for
proposal number 0. Because of the poisonous write, the
progress certiﬁcate allows the leader to propose any new
value. To have “A” chosen, (cid:104) performs two steps: ﬁrst, (cid:104)
sends a new proposal (“A”, 1) to the acceptors in the ﬁrst
group; then l sends (“A”, 1) together with the progress cer-
tiﬁcate for proposal 0 to the acceptors in the third group.
Note that the ﬁrst step is critical to have “A” chosen, as it
ensures that the 3 f +1 correct acceptors in the ﬁrst and third
group accept the same pair.
Fortunately, this ﬁrst step is also what prevents (cid:104) from
using the progress certiﬁcate to sway the acceptors in the
ﬁrst group to accept “B”. Because they have last accepted
the pair (“A”, 1), when (cid:104) presents the acceptors in the ﬁrst
group the progress certiﬁcate for proposal number 0, they
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:46 UTC from IEEE Xplore.  Restrictions apply. 
will refuse it as too low (line 16 of the protocol).
5.4 Correctness
We now proceed to prove that, for execution that are
eventually synchronous, FaB Paxos solves consensus. Re-
call that a (value,number) pair is chosen iff (cid:4)(a + f + 1)/2(cid:5)
correct acceptors accept it.
CS1. Only a value that has been proposed may be chosen.
Proof. Correct acceptors only accept values that are pro-
posed. If a value is chosen, then it is accepted by correct
acceptors so it follows that it was proposed.
CS2. Only a single value may be chosen.
Proof. We prove this theorem by way of two lemmas.
Lemma 3. For every proposal number pn, at most one
value is chosen.
Proof. Correct acceptors only accept one value per proposal
number. Since to be chosen a (value, pn) pair must be ac-