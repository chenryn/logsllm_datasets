### FaB Pseudocode (Excluding Recovery)

```python
while not learned:
    send(PULL) to all learners

learner.onPull():
    if learner has learned some pair (value, number):
        send(LEARNED, value, number) to ln

learner.onLearned(value, number) from ln:
    learn[ln] := (value, number)
    if there are f + 1 x such that learn[x] == (value, number):
        learned := (value, number)
```

**Transmission Policy:**
The transmission policy ensures that during periods of synchrony, the leader will retransmit until it is guaranteed that no leader election will be triggered. Note that proposers do not wait for responses from all learners before becoming satisfied (since some learners may have crashed). Therefore, the leader might stop retransmitting before all learners have learned the value. The pull protocol (lines 29-41) ensures that the remaining correct learners will eventually learn from their peers.

**Correctness:**
The proofs of CS1, CS2, and CS3 for the common case apply unchanged in this weaker network model. The liveness proof is different, as it must handle fair rather than reliable links; it can be found in [15].

### 5.3 Recovery Protocol

When proposers suspect the current leader of being faulty, they elect a new leader who then invokes the recovery protocol. Two scenarios require special care:

1. **Value Already Chosen:**
   - If a value \( v \) has already been chosen, the new leader must propose the same \( v \) to maintain CS2.
   
2. **Poisonous Write:**
   - A previous malicious leader may have performed a poisonous write, preventing learners from reading any value. For example, a malicious leader could propose a different value to each acceptor.
   - If the new leader is correct, consensus in a synchronous execution should still terminate.

**Acceptor Behavior:**
So far, we have required acceptors to only accept the first value they receive. To recover from a poisonous write, we allow acceptors to change their mind and accept multiple values, with precautions to ensure CS2 still holds.

### 5.3.1 Progress Certificates and the Recovery Protocol

If some value \( v \) was chosen, a new correct leader must not propose any value other than \( v \) to maintain CS2. The new leader queries the acceptors for their state, gathering at most \( a - f \) replies, forming a progress certificate (pc).

**Purpose of Progress Certificate:**
1. **Determine Chosen Value:**
   - The pc allows the new leader to determine whether some value \( v \) may have been chosen, in which case the leader proposes \( v \).
   - The correct leader will only propose a value that the progress certificate vouches for.
   
2. **Validate Proposed Value:**
   - The pc allows acceptors to determine the legitimacy of the value proposed by the leader, preventing a faulty leader from corrupting the state after a value has been chosen.
   - Answers in the progress certificate must be signed.

**Properties of Progress Certificate:**
- If some value \( v \) was chosen, the pc only vouches for \( v \).
- The pc always vouches for at least one value to ensure progress despite poisonous writes.

**Recovery Protocol:**
1. **Gather Progress Certificate:**
   - The newly elected leader \( \ell \) gathers a progress certificate by querying acceptors and receiving \( a - f \) signed responses.
   
2. **Decide Proposal:**
   - If the progress certificate vouches for some value \( v \), \( \ell \) proposes \( v \). Otherwise, \( \ell \) is free to propose any value.
   
3. **Follow Normal Leader Protocol:**
   - The leader follows the normal leader protocol to propose its value, piggybacking the progress certificate alongside its proposal to justify its choice of value.
   - Acceptors check that the new proposed value is vouched for by the progress certificate, ensuring the new value does not endanger safety.

**Leader Election:**
- As in Paxos, acceptors who hear of the new leader (when the new leader gathers the progress certificate) promise to ignore messages with a lower proposal number (i.e., messages from former leaders).
- To prevent faulty proposers from displacing a correct leader, the leader election protocol provides a proof-of-leadership token to the new leader (typically a collection of signed "election" messages).

### 5.3.2 Constructing Progress Certificates

A straightforward implementation of progress certificates would consist of the currently accepted value, signed, from \( a - f \) acceptors. If these values are all different, no value was chosen, and the progress certificate should vouch for any value.

**Challenges:**
- A faulty new leader could use such a progress certificate twice to cause two different values to be chosen, even if individual proposers only accept a given progress certificate once.

**Solution:**
1. **Proposal Number Tied to Leadership:**
   - Only allow a proposer to propose a new value once while serving as a leader. Tie progress certificates to a proposal number, whose value equals the number of times a new leader has been elected.
   
2. **Accept Pairs:**
   - Associate a proposal number to proposed values to form a (value, number) pair. Acceptors now accept pairs rather than just values. Learners learn a pair \( o \) if they see that \( \lceil (a + 3f + 1)/2 \rceil \) acceptors accepted it.
   - Alter the definition of chosen to apply to pairs, so \( (v, pn) \) is chosen if \( \lceil (a + f + 1)/2 \rceil \) correct acceptors have accepted it.
   
3. **Conditions for Acceptance:**
   - In addition to ignoring proposals with a proposal number lower than any they have seen, acceptors only accept one proposal for every proposal number and only change their accepted value if the progress certificate vouches for the new (value, number) pair.

**Definition:**
- A progress certificate contains signed replies \( (v_i, pn) \) from \( a - f \) acceptors. These replies contain the acceptor's currently accepted value and the proposal number of the leader who requested the progress certificate.
- A progress certificate vouches for a pair \( (v, pn) \) if there is no value \( v_i \neq v \) that appears \( \lceil (a - f + 1)/2 \rceil \) times in the progress certificate.

**Example Scenario:**
- Suppose the malicious leader \( \ell' \) gathers a progress certificate for proposal number 0. Due to the poisonous write, the progress certificate allows the leader to propose any new value.
- To have "A" chosen, \( \ell' \) sends a new proposal ("A", 1) to the acceptors in the first group and then sends ("A", 1) together with the progress certificate for proposal 0 to the acceptors in the third group.
- The first step is critical to have "A" chosen, ensuring that the \( 3f + 1 \) correct acceptors in the first and third groups accept the same pair.
- This first step also prevents \( \ell' \) from using the progress certificate to sway the acceptors in the first group to accept "B" because they have last accepted the pair ("A", 1) and will refuse the progress certificate for proposal number 0 as too low.

### 5.4 Correctness

We now prove that, for executions that are eventually synchronous, FaB Paxos solves consensus. Recall that a (value, number) pair is chosen if \( \lceil (a + f + 1)/2 \rceil \) correct acceptors accept it.

**CS1:**
- **Only a value that has been proposed may be chosen.**
  - Proof: Correct acceptors only accept values that are proposed. If a value is chosen, it is accepted by correct acceptors, so it follows that it was proposed.

**CS2:**
- **Only a single value may be chosen.**
  - Proof: We prove this theorem by way of two lemmas.
  - **Lemma 3:**
    - **For every proposal number \( pn \), at most one value is chosen.**
      - Proof: Correct acceptors only accept one value per proposal number. Since to be chosen, a (value, \( pn \)) pair must be accepted by correct acceptors, at most one value can be chosen for each proposal number.