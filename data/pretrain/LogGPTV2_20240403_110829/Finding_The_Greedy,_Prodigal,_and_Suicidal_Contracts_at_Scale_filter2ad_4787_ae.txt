### Figure 10: False Positive, Flagged as a Prodigal Contract

In some cases, real executions may only return a single value (e.g., `true`) when the call succeeds. This can lead to false positives. Additionally, Maian may assign values to symbolic variables related to block state (e.g., `blocknumber`), which are used to decide the control flow. These values may differ at the concrete validation stage, leading to false positives. For example, in Figure 10, the `_guess` value depends on block parameters, which cannot be forced to take on the concrete values found by our analyzer.

### Greedy Contracts: Causes of False Positives

The high number of false positives for greedy contracts can be attributed to the following reasons:

1. **Depth of Function Invocations**:
   - Detecting a trace that leads to the release of Ether may require three or more function invocations. For instance, in Figure 9, the `confirmTransaction` function must be executed by the majority of owners for the contract to execute the transaction. Our default invocation depth is the reason for missing a possible reachable state.

2. **Type Recovery**:
   - The tool is unable to recover the subtype for the generic `bytes` type in the EVM semantics.

3. **Random Number Generation**:
   - Some contracts release funds only if a random number (usually generated using transaction and block parameters) matches a predetermined value. In the contract shown in Figure 10, the variable `_guess` is also a symbolic variable, allowing the solver to find a solution for the condition on line 7. If there is a concrete value in place of `_guess`, the solver times out because the constraint involves a hash function, which is difficult to invert using an SMT solver.

### Summary and Observations

Maian's symbolic execution engine flagged 34,200 contracts. After concrete validation or manual inspection, we confirmed that approximately 97% of prodigal, 97% of suicidal, and 69% of greedy contracts are true positives. The importance of analyzing the bytecode of the contracts, rather than the Solidity source code, is evident, as only 1% of all contracts have available source code. Among the flagged contracts, only 181 have verified source codes according to Etherscan, representing 1.06%, 0.47%, and 0.49% in the categories of prodigal, suicidal, and greedy, respectively. For detailed results, see Table 1.

Furthermore, the maximum amount of Ether that could have been withdrawn from prodigal and suicidal contracts before the block height BH is nearly 4,905 Ether, or approximately 3.4 million US dollars, based on the exchange rate at the time of writing. Additionally, 6,239 Ether (about 4.3 million US dollars) is locked inside posthumous contracts currently on the blockchain, with 313 Ether (216,000 US dollars) sent to dead contracts after they were terminated.

Table 2 shows the number of flagged contracts for different invocation depths ranging from 1 to 4. We tested 25,000 contracts for greedy and 100,000 for the remaining categories, inferring that increasing the depth marginally improves results, with an invocation depth of 3 being the optimal tradeoff point. The analysis clearly indicates that reasoning about contract traces, rather than a single contract invocation, reveals more vulnerabilities of the prodigal and suicidal types. Compared to a single invocation, analysis based on two invocations detects an additional 10% to 20% of contracts with potential bugs. Moreover, there is a qualitative increase in the complexity of the flagged contracts, making it more challenging to manually identify the vulnerabilities.

We have contacted the Ethereum Foundation for an ethical disclosure procedure and provided them with the full list of vulnerable contracts.

### Related Work

Security and safety properties of smart contracts have received significant attention due to several costly bugs and exploits. The majority of these bugs in Ethereum-style smart contracts are due to the de-facto high-level implementation language, Solidity, whose runtime behavior diverges from the "intuitive understanding" of the language by developers.

Early work by Delmolino et al. [11] identified the following classes of problems: (a) contracts that do not refund their users, (b) missing encryptions of sensitive user data, and (c) lack of incentives for users to take certain actions. The property (a) is closest to our notion of greedy. While this work outlines the problem and demonstrates it through simple examples, it does not provide a systematic approach for detecting such issues. Later works on contract security have identified potential bugs related to concurrent transactions [40], mishandled exceptions [26], excessive gas consumption [7], and fraudulent financial schemes [5].

In contrast to these works, which focus on bad implementation practices or misused language semantics, our characterization of several classes of contract bugs, such as greedy, prodigal, etc., is novel, as they are stated in terms of properties of execution traces rather than specific instructions or states.

### Reasoning About Smart Contracts

Several tools have been proposed for the automatic detection of vulnerabilities in smart contracts and for formal contract verification. Oyente [26, 33] was the first tool to target specific issues, including mishandled exceptions, transaction-order dependence, timestamp dependence, and reentrancy, addressing corner cases in Solidity/EVM semantics and programming anti-patterns.

Other recent tools for symbolic analysis of EVM and/or Solidity include Manticore [27], Mythril [30, 31], Securify [39], teEther [25], and KEVM [21, 38]. These tools focus on detecting low-level safety violations and vulnerabilities such as integer overflows, reentrancy, and unhandled exceptions, without requiring reasoning about contract execution traces.

While it is possible to extend these frameworks to handle trace-based properties, this has not been done yet, and thus a formal comparison is not feasible. A recent work by Grossman et al. [19], similar in spirit to ours, provides dynamic analysis of execution traces but focuses exclusively on detecting non-callback-free contracts (i.e., prone to reentrancy attacks).

Concurrently with our work, Kalra et al. developed Zeus [24], a framework for automated verification of smart contracts using abstract interpretation and symbolic model checking. Unlike Maian, Zeus conducts policy checking at the level of an LLVM-like intermediate representation of a contract, obtained from Solidity code, and leverages standard tools such as off-the-shelf constraint and SMT solvers. Although Zeus flags some contracts as "suicidal" (due to incorrect uses of `selfdestruct`), it does not provide a framework for checking other trace properties or under-approximating liveness properties, i.e., for detecting prodigal or greedy contracts.

Various versions of EVM semantics [43] have been implemented in Coq [23], Isabelle/HOL [3, 22], F* [6, 18], Idris [35], and Why3 [14, 37], followed by subsequent mechanized contract verification efforts. However, none of these efforts considered trace properties in the manner we defined in Section 3.

### Conclusion

We characterize vulnerabilities in smart contracts that are checkable as properties of an entire execution trace (possibly an infinite sequence of their invocations). We present three examples of such trace vulnerabilities, leading to greedy, prodigal, and suicidal contracts, and built a symbolic analysis tool, Maian, to detect these. Analyzing 970,898 contracts, Maian flagged thousands of contracts as vulnerable at a high true positive rate. At a scale of nearly one million contracts, Maian successfully generated exploits for 69–99% of the subset we sampled for validation.

### Acknowledgments

We thank Shruti Tople, Loi Luu, Shweta Shinde, Muoi Tran, Andreea Costea, Teodora Baluta, and the anonymous reviewers of the paper for their feedback. Ivica Nikolić is supported by the Ministry of Education, Singapore under Grant No. R-252-000-560-112. Aquinas Hobor was partially supported by Yale-NUS College grant R-607-265-322-121. This work is supported in part by the Crystal center at the National University of Singapore.

### References

[References listed as in the original text]

---

This version of the text is more structured and coherent, with improved clarity and professional tone.