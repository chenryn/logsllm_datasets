捕获.ETL跟踪后，我们可以使用自己喜欢的工具进行分析。实际上，PowerShell中的Get-WinEvent就是一个很棒的内置.ETL解析器。此外，我还编写了一个简短的脚本来演示如何解析AMSI事件。请注意，由于WSH无法提供“contentname”属性，所以，我们需要手动解析事件数据。另外，该脚本还能够捕获PowerShell内容。
    # Script author: Matt Graeber (@mattifestation)
    # logman start AMSITrace -p Microsoft-Antimalware-Scan-Interface Event1 -o AMSITrace.etl -ets
    # Do your malicious things here that would be logged by AMSI
    # logman stop AMSITrace -ets
    $OSArchProperty = Get-CimInstance -ClassName Win32_OperatingSystem -Property OSArchitecture
    $OSArch = $OSArchProperty.OSArchitecture
    $OSPointerSize = 32
    if ($OSArch -eq '64-bit') { $OSPointerSize = 64 }
    $AMSIScanEvents = Get-WinEvent -Path .\AMSITrace.etl -Oldest -FilterXPath '*[System[EventID=1101]]' | ForEach-Object {
        if (-not $_.Properties) {
            # The AMSI provider is not supplying the contentname property when WSH content is logged resulting
            # in Get-WinEvent or Event Viewer being unable to parse the data based on the schema.
            # If this bug were not present, retrieving WSH content would be trivial.
            $PayloadString = ([Xml] $_.ToXml()).Event.ProcessingErrorData.EventPayload
            [Byte[]] $PayloadBytes = ($PayloadString -split '([0-9A-F]{2})' | Where-Object {$_} | ForEach-Object {[Byte] "0x$_"})
            $MemoryStream = New-Object -TypeName IO.MemoryStream -ArgumentList @(,$PayloadBytes)
            $BinaryReader = New-Object -TypeName IO.BinaryReader -ArgumentList $MemoryStream, ([Text.Encoding]::Unicode)
            switch ($OSPointerSize) {
                32 { $Session = $BinaryReader.ReadUInt32() }
                64 { $Session = $BinaryReader.ReadUInt64() }
            }
            $ScanStatus = $BinaryReader.ReadByte()
            $ScanResult = $BinaryReader.ReadInt32()
            $StringBuilder = New-Object -TypeName Text.StringBuilder
            do { $CharVal = $BinaryReader.ReadInt16(); $null = $StringBuilder.Append([Char] $CharVal) } while ($CharVal -ne 0)
            $AppName = $StringBuilder.ToString()
            $null = $StringBuilder.Clear()
            $ContentSize = $BinaryReader.ReadInt32()
            $OriginalSize = $BinaryReader.ReadInt32()
            $ContentRaw = $BinaryReader.ReadBytes($ContentSize)
            $Content = [Text.Encoding]::Unicode.GetString($ContentRaw)
            $Hash = [BitConverter]::ToString($BinaryReader.ReadBytes(0x20)).Replace('-', '')
            [Bool] $ContentFiltered = $BinaryReader.ReadInt32()
            $BinaryReader.Close()
            [PSCustomObject] @{
                Session = $Session
                ScanStatus = $ScanStatus
                ScanResult = $ScanResult
                AppName = $AppName
                ContentName = $null
                Content = $Content
                Hash = $Hash
                ContentFiltered = $ContentFiltered
            }
        } else {
            $Session = $_.Properties[0].Value
            $ScanStatus = $_.Properties[1].Value
            $ScanResult = $_.Properties[2].Value
            $AppName = $_.Properties[3].Value
            $ContentName = $_.Properties[4].Value
            $Content = [Text.Encoding]::Unicode.GetString($_.Properties[7].Value)
            $Hash = [BitConverter]::ToString($_.Properties[8].Value).Replace('-', '')
            $ContentFiltered = $_.Properties[9].Value
            [PSCustomObject] @{
                Session = $Session
                ScanStatus = $ScanStatus
                ScanResult = $ScanResult
                AppName = $AppName
                ContentName = $ContentName
                Content = $Content
                Hash = $Hash
                ContentFiltered = $ContentFiltered
            }
        }
    }
    $AMSIScanEvents
捕获跟踪记录后，我们还能看到执行的有效载荷的内容。
该示例表明AMSI ETW提供程序从前面引用的PoC XSL有效载荷捕获攻击上下文
基于ETW的分析诊断和检测方法，已经超出了这篇文章的范围，所以不做深入介绍；但希望这个例子可以激发读者进一步研究它们的兴趣。
**漏洞披露时间表**
* * *
我们不仅致力于提高新型攻击技术的透明度，同时，我们也深知，这些技术一旦公开，就会被攻击者迅速采用。因此，在公布新的攻击性技术之前，我们会定期向相关的供应商通报问题，并提供充足的时间来缓解问题；同时，还会通知特定的可信赖供应商，以确保能够尽快向客户交付检测结果。
由于该技术会影响Windows
Defender应用程序控制（通过MSRC提供可维护的安全功能），因此，我们也向Microsoft报告了此问题。该漏洞的披露时间表如下：
  * 2018年4月24日 - 向MSRC发送报告
  * 2018年4月24日 - 报告得到确认，并分配了一个案例编号
  * 2018年4月30日 - 收到电子邮件，指出该问题能够复现
  * 2018年5月24日 - 向MSRC发送电子邮件，请求进行更新
  * 2018年5月28日 - 回复表明评估仍在进行中
  * 2018年6月10日 - 向MSRC发送电子邮件，请求进行更新
  * 2018年6月11日 - MSRC的回应称，产品团队计划在8月份完成漏洞修复
  * 2018年7月12日 - MSRC的回应称，无法通过安全更新解决该问题，但是可能在v.Next中得到解决