œÄ(i) = œÄ(i ‚àí 1) and 0 otherwise.
from Pp
command
the
i :=Ai1 ‚äïBi1 ‚äï W œÜi
i :=Bi‚àí11 ‚äïBi1 ‚äï W œÜi
i
i
M 0
andB10, œÜ to Pp. Ps sendsB1, W 0, W 1 to Pr.
M 1
i
i ‚äï W œÅi
[m] ‚Üí [n] s.t.
: i ‚àà [2, n]}. For
1. Pp samples an injection œÄ1
i ‚àà [2, n], Pp deÔ¨Ånes
i ‚äï biBi‚àí10
3. Pp sends œÅ := œÜ ‚äï b, R ‚Üê Œ£n to Pr who responds with {W œÅi
for i ‚àà image(œÄ) and k =
|preimage(œÄ, i)|, ‚àÉj where œÄ1(j) = i and {œÄ1(j + 1), ..., œÄ1(j + k)} ‚à© image(œÄ) = ‚àÖ.
Bi0 := M bi
Pp outputsA(cid:48)0 :=B0 ‚äï R ‚äï œÄ(A0) and Pr outputsA(cid:48)1 :=B1 ‚äï R.
[Switch] Upon the command (Switch, œÄ,A0) from Pp and (Switch,A1) from Ps
where œÄ : [m] ‚Üí [n] andA0,A1 ‚àà Œ£n.
Pp sends (Permute, œÄ1,A0) to FPermute and Ps sends (Permute,A1). Pp
receivesB0 ‚àà Œ£m in response and Pr receivesB1 ‚àà Œ£m.
send (Duplicate, œÄ2,B0) and (Duplicate,B1) to FDuplicate. As a result Pp
obtainsC0 ‚àà Œ£m from FDuplicate and Ps obtainsC1 ‚àà Œ£m.
sends (Permute, œÄ3,C0) to FPermute and Ps sends (Permute,C1). Pp receives
S ‚àà Œ£m in response. Pp and Pr respectively receives and outputsA(cid:48)0,A(cid:48)1 ‚àà Œ£m.
3. Pp computes the permutation œÄ3 : [m] ‚Üí [m] such that for i ‚àà image(œÄ) and
k = |preimage(œÄ, i)|, {œÄ3((cid:96)) : (cid:96) ‚àà preimage(œÄ, i)} = {j, ..., j+k} where i = œÄ1(j). Pp
for i ‚àà image(œÄ) and k := |preimage(œÄ, i)| and
j where œÄ1(j) = i, then œÄ2(j) = ... = œÄ2(j + k) = j. Pp and Pr respectively
2. Pp deÔ¨Ånes œÄ2 : [m] ‚Üí [m] s.t.
:
Figure 5: The Oblivious Switching Network protocols Œ†Permute, Œ†Duplicate,
Œ†Switch.
13
computesA(cid:48)
sending w0, w1, œÜ can be optimized away using a seed.
œÅ = œÜ ‚äï bi to Pr. The Ô¨Ånal shares2 are constructed by having Pr send wœÅ to Pp who
The protocol just described considers the setting where the parties select between
Ai, Ai‚àí1. However, we require that at each iteration the messages being selected is
either Ai or A(cid:48)
this can be achieved at no overhead by leveraging that fact that Pp knows bi and
i0 := mbi ‚äï wœÅ. In our computationally secure setting observe that
i‚àí1 whereA(cid:48)
i‚àí1 was computed in the previous iteration. Fortunately
A(cid:48)
i‚àí10 ahead of time. At index i, Ps usesA(cid:48)
i‚àí11 instead of Ai‚àí1 while the Pp
computes A(cid:48)
i0 := mbi ‚äï wœÅ ‚äï biA(cid:48)
i‚àí10. As such, Pp is manually adding other
other share ofA(cid:48)
i‚àí1 when it is need. The full proof of security is in Section B.2.
To brieÔ¨Çy show correctness, let us assume by induction thatA(cid:48)
i‚àí1 is correct, then:
i‚àí10) ‚äï (A(cid:48)
‚äï wœÅ ‚äï biA(cid:48)
i1)
i1 ‚äï wbi‚äïœÜ ‚äï wœÅ ‚äï biA(cid:48)
i‚àí10) ‚äï (A(cid:48)
i1)
A(cid:48)
i = (mbi
= (biAi ‚äï biA(cid:48)
i‚àí11 ‚äïA(cid:48)
= biAi ‚äï biA(cid:48)
i‚àí1
Universal Switching Network. Our Switch protocol of Figure 5 is a universal switch-
ing network for an arbitrary œÄ : [m] ‚Üí [n] and is constructed in three phases[MS13]:
A œÄ1‚Üí B œÄ2‚Üí C œÄ3‚Üí A(cid:48) = œÄ(A).
Let us Ô¨Årst work through an example œÄ[6] ‚Üí [8] where (œÄ(1), ..., œÄ(6)) =
(4, 3, 4, 7, 4, 7). Observe that 4 appears three times, 7 appears twice and {1, 2, 5, 6, 8}
are ‚Äúunused‚Äù. First we apply the permutation B = œÄ1(A) which ensures A4 is fol-
lowed by two unused elements and A7 is followed by one, e.g. B = (A3, A4, A1, A2, A7, A8).
In general, an element that should appear k > 1 times will be followed by k ‚àí 1 un-
used elements. Note that |B| = |A(cid:48)| and need not be the size of A. This is achieved
by dropping some unused elements, e.g. A5, A6. The duplication network C = œÄ2(B)
will duplicate A4 twice and A7 once, e.g. C = (A3, A4, A4, A4, A7, A7). Note that
only elements in A(cid:48) are left now and they have the correct multiplicity. Finally,
A(cid:48) = œÄ3(C) permutes C to be in the desired order, e.g. A(cid:48) = (A4, A3, A4, A7, A4, A7).
More speciÔ¨Åcally, the transformations are deÔ¨Åned as:
1. B := œÄ1(A): Sample an injective œÄ1 : [m] ‚Üí [n] s.t. if œÄ maps an input position
i to k outputs positions (i.e. k = |preimage(œÄ, i)| = |{j : œÄ(j) = i}|), then
there exists a j such that œÄ1(j) = i and {œÄ1(j+1), ..., œÄ1(j+k‚àí1)}‚à©image(œÄ) =
‚àÖ.
2. C := œÄ2(B): Let œÄ2 : [m] ‚Üí [m] s.t.
if Ai is mapped to k > 0 positions in
A(cid:48) = œÄ(A), then for œÄ1(j) = i it holds that Cj = ... = Cj+k‚àí1 = Ai = Bj.
That is, œÄ2(j) = ... = œÄ2(j + k ‚àí 1) = j.
3. A(cid:48) := œÄ3(C): Sample permutation œÄ3 : [m] ‚Üí [m] s.t. C is permuted to
the same ordering as œÄ(A). That is, for i ‚àà image(œÄ) and œÄ1(j) = i, sample
2Due to technique reasons about simulating output the full protocol additionally randomizes the
output shares.
14
permutation œÄ3 s.t. {œÄ3((cid:96)) | (cid:96) ‚àà preimage(œÄ, i)} = {j, ..., j +|preimage(œÄ, i)|‚àí
1}.
Observe that steps œÄ1, œÄ3 can both be implemented using the oblivious permu-
tation protocol while œÄ2 can be implemented with a duplication network. Figure 5
provides a formal description of the full switching network protocol. The simulation
of this protocol is presented in Section B.3 and follows from the simulation of the
permutation and duplication subprotocols.
Comparison. We compare with alternative constructions to illustrate the perfor-
mance improvement that our switching protocol provides. The Ô¨Årst and most tra-
ditional is for Ps to use additive homomorphic encryption, e.g. Paillier, to encrypt
the shares A1 and send these to Pp. Pp can apply the mapping function œÄ to
to obtain their share ofA(cid:48)1. This approach has a very high computational over-
these encryptions, rerandomize them and send the result back to Ps who decrypts it
head compared to ours due to additive homomorphic encryption being an intensive
process.
An alternative approach is that taken by [MS13] which can be viewed as the
two party version of our protocol. In their setting the permutation network is the
most expensive operation and is implemented using O(n log n) OTs[IKNP03]. Our
protocol is both asymptotically more eÔ¨Écient by a O(log n) factor and has smaller
constants since our protocol does not require the relatively more expensive OT
primitive.
3.4 Join Protocols
Our join protocol can be divided into four phases:
1. Compute randomized encodings of the join-columns/keys.
2. Party P1 constructs a cuckoo table T for table Y and arranges the secret shares
using a permutation protocol.
3. For each row x in X, P0 uses an oblivious switching network to map the
corresponding location i1, i2 of the cuckoo hash table to a secret shared tuple
(x, T [i1], T [i2]).
4. The join-key(s) of x is compared to that of T [i1], T [i2]. If one of them match
then the corresponding Y (cid:48) row is populated; otherwise the Y (cid:48) row is set to
NULL.
5. The various types of joins can then be constructed by comparing row i of X
and Y (cid:48).
Steps 1 through 4 are performed by the Map routine of Figure 6 while step 5 is
performed in the Join routine. Figure 7 contains the ideal functionality of the join
protocol.
15
Randomized Encodings. We begin by generating randomized encodings of the columns
being used for the join-keys. For example, selecting all columns of X and Y
where X1 = Y1 and X2 = Y3. In this case there are two join-keys, X1, X2 from
X and Y1, Y3 from Y . The protocol has P0 learn the randomized encoding for
each row of X and P1 learn them for Y .
Importantly, is that after a previous
join operation, some (or all) of the rows being joined can be NULL. We require
that the randomized encodings of these rows not reveal that they are NULL. For
table X, a special column XNULL encodes if for each row is logically NULL. The
Fencode functionality will then return a random encoding for all NULL rows. SpeciÔ¨Å-
cally, the parties will send (Encode,{((cid:74)XNULL(cid:75),(cid:74)Xj1||...||Xjl(cid:75), P0), ((cid:74)YNULL(cid:75),(cid:74)Yk1||...||
Ykl(cid:75), P1)}) to Fencode where j1, ..., jl and k1, ..., kl index the join-keys of X and Y .
Let Ex, Ey ‚àà ({0, 1}(cid:96))n be the encodings that P0 and P1 respectively receive from
Fencode.
For correctness, we require the encoding bit-length (cid:96) to be suÔ¨Éciently large
such that the probability of a collision between encodings is statistically negligible.
Given that there are a total of D = 2n encodings, the probability of this is at most
2‚àí(cid:96)+2 log2 D‚àí1 which we require to be less than 2‚àíŒª, therefore (cid:96) ‚â• Œª + 2 log2 D ‚àí 1.
Our implementation uses Œª = 40 and (cid:96) ‚àà {80, 100} depending on D.
Constructing the Cuckoo Table. The next phase of the protocol is for P1 to con-
struct a secret shared cuckoo table for Y where each row is inserted based on its
encoding in Ey. P1 locally inserts the encodings Ey into a plain cuckoo hash table
t with m ‚âà 1.5n slots using the algorithm speciÔ¨Åed in Section 2 and [DRRT18]. In
the presentation we assume two hash functions are used. P1 samples an injective
function œÄ : [m] ‚Üí [m] such that t[j] = Ey[i], then œÄ(j) = i.
Parties P0 and P1 convert (cid:74)Y(cid:75) to Y such that P0 holds Y0. P1 sends
(Switch, œÄ,Y1) to Fswitch and P0 sends (Switch,Y0). In response Fswitch
sendsT1 to P1 andT0 to P2. It is now the case that T is a valid secret shared
cuckoo hash table of Y .
Selecting from the Cuckoo Table.. The next phase of the protocol is for each row of
X, select the appropriate rows of T so the keys can be compared. P0 knows that if
the join-keys of the X[i] row will match with a row from Y , then this row will be
at T [j] for some j ‚àà {h1(e), h2(e)} where e = Ex[i].
To obliviously compare these rows, P0 will construct two switching networks
with programming œÄ1, œÄ2 : [n] ‚Üí [m] such that if hl(Ex[i]) = j then œÄl(i) = j. Each
of these will be used to construct the tables (cid:98)Y 1,(cid:98)Y 2 which are the result of
applying the switching networks œÄ1, œÄ2 toT. For i ‚àà [n], the parties select either
(cid:98)Y 1[i] or(cid:98)Y 2[i] and assign it to(cid:74)Y (cid:48)(cid:75)[i] based on which has matching joins keys
with(cid:74)X(cid:75)[i]. If there is no match then(cid:74)Y (cid:48)(cid:75)[i] = NULL.
Inner Join. Given the secret shared tables(cid:74)X(cid:75),(cid:74)Y (cid:48)(cid:75) as described above, the parties
do a linear pass over the n rows to construct the join between X and Y . Recall that
the inner join consists of all the selected columns from the rows X[i], Y [j] where the
join-keys of the rows X[i] and Y [j] are equal.
16
If row X[i] has a matching row in Y then this row will have been mapped
to Y (cid:48)[i]. Next, the where clause further Ô¨Ålters the output table as a function of
Y (cid:48)[i] and X[i]. The MPC protocol sets the NULL-bit of the Ô¨Ånal output table Z
as ZNULL[i] := XNULL[i] ‚à® Y (cid:48)
NULL[i] ‚à® ¬¨P (Y (cid:48)[i], X[i]) where P is the predicate function
speciÔ¨Åed by the where clause. Finally, the computation speciÔ¨Åed by the select
query is performed, e.g. copying the columns of X, Y or computing a function of
them.
Left/Right Join. A left join query is similar to an inner join except that all of the
rows from the left table X are included. All rows that are in the inner join are
computed as before. For rows only in X, the bit Y (cid:48)
NULL[i] will equal one and is used
to initialize the missing columns from Y to a default, typically NULL. A right join
can be implemented symmetrically.
Union and Set Minus.. Our framework is also capable of computing the union of
two tables with respect to the join-keys. SpeciÔ¨Åcally, we deÔ¨Åne the union operator
as taking all of the rows from the left table and all of the rows from the right
table that would not be present in the inner join. First we compute Y \X by only
including X[i] if Y (cid:48)[i] is NULL, i.e. X[i] has no matching row in Y . The union of X
and Y is then constructed as (Y \X)||X where the || operator denotes the row-wise
concatenation of X to the end of Y \X.
Full Join.. We construct a full join as (X left join Y ) union Y . The left join merge
the rows in the intersection and the union includes the missing rows of Y . The
overhead of this protocol is eÔ¨Äectually twice that of the other protocols.
We note that under some restrictions on the tables being joined, a more eÔ¨Écient
protocol for full joins can be achieved. We defer an explanation of this technique to
Section 5.2.
Security. The simulation of these protocols directly follow from the composibility
of the subroutines Fencode, Fswitch and Fmpc. First, the output of Fencode simply
outputs random strings and it is therefore straightforward to simulate. Fswitch and
Fmpc both output secret shared values. Finally, correctness is straight forward to
analysis and holds so long as there is no encoding collisions and cuckoo hashing
succeeds. Parameters are chosen appropriately so these failure events happen with
probability at most 2‚àíŒª. See B.4 for a full proof of security.
3.5 Non-unique Join on Column
When values in the join-column are not unique within a single table, the security
guarantees begin to erode. Recall that the randomized encodings for X, Y are re-
vealed to P0, P1 respectively. Repeated values in the join-columns will lead to
duplicate randomized encodings and therefore reveal their location. Learning the
distribution of these duplicates reveals that the underlying table has the same dis-
tribution.
In the event that only one of the tables contains duplicates, the core
protocol can naturally be extended to compute the various join operations subject
17
parties
1. The
Parameters: Table size n. For all command, X, Y are tables and {Xj | j ‚àà J}
and {Yk | k ‚àà K} are the join-keys of X and Y respectively. S, P are resp. the
select and where function.
[Map] Upon receiving (Map,(cid:74)X(cid:75), J,(cid:74)Y(cid:75), K) from all parties.
(Encode,{((cid:74)XNULL(cid:75),(cid:74)XJ1||...||XJl(cid:75),
P0), ((cid:74)YNULL(cid:75),(cid:74)YK1||...||YKl(cid:75), P1)}) to Fencode where l = |J| = |K|. P0
3. P0 and P1 convert(cid:74)Y(cid:75) toY. P1 sends (Permute, œÄ0,Y1) to FPermute
and P0 sends (Permute,Y0). P1 receivesT1 and P2 receivesT0 from
2. P1 constructs a cuckoo hash table t for the set Ey. DeÔ¨Åne œÄ0 such that
receives Ex and P1 receives Ey from Fencode.
œÄ0(j) = i where Ey[i] = t[j].
send
FPermute.
K1
ties.
œÄl(i) = j where hl(Ex[i]) = j.
4. Let h1, ..., hw be the cuckoo hash functions. P1 deÔ¨Ånes œÄ1, ..., œÄw such that
NULL[i] = 0 ‚à®(cid:74)XJ1||...||XJl(cid:75)[i] =(cid:74)(cid:98)Y j
5. For l ‚àà [w], P1 sends (Switch, œÄl,T1) to FSwitch and P2 sends
(Switch,T0). P0 receives(cid:98)Y l0 and P1 receives(cid:98)Y l1 from FSwitch.
6. For i ‚àà n, if ‚àÉj ‚àà [w] s.t. (cid:98)Y j
||...||(cid:98)Y j
Kl(cid:75)[i]
then(cid:74)(cid:98)Y ‚àó(cid:75)[i] :=(cid:98)Y j[i]. Otherwise(cid:74)(cid:98)Y ‚àó(cid:75)[i] := (NULL, 0, ...). Output(cid:74)(cid:98)Y ‚àó(cid:75).
[Join] Upon receiving command (Join, type,(cid:74)X(cid:75), J,(cid:74)Y(cid:75), K, S, P ) from all par-
1. The parties send (Map,(cid:74)X(cid:75), J,(cid:74)Y(cid:75), K) to Œ†map and receive(cid:74)Y (cid:48)(cid:75).
2. Output the table(cid:74)Z(cid:75) deÔ¨Åned by the case type:
:= (cid:74)XNULL(cid:75)[i] ‚à® (cid:74)Y (cid:48)
Inner: For i ‚àà [n], Fmpc evaluate (cid:74)ZNULL(cid:75)[i]
NULL(cid:75)[i] ‚à®
¬¨P ((cid:74)X(cid:75)[i],(cid:74)Y (cid:48)(cid:75)[i]) and(cid:74)Z(cid:75)[i] := S((cid:74)X(cid:75)[i],(cid:74)Y (cid:48)(cid:75)[i]).
Left: For i ‚àà [n], Fmpc evaluate(cid:74)ZNULL(cid:75)[i] :=(cid:74)XNULL(cid:75)[i] ‚à® ¬¨P ((cid:74)X(cid:75)[i],(cid:74)Y (cid:48)(cid:75)[i])
and(cid:74)Z(cid:75)[i] := S((cid:74)X(cid:75)[i],(cid:74)Y (cid:48)(cid:75)[i]).
Union: For i ‚àà [n], Fmpc evaluate (cid:74)ZNULL(cid:75)[i] :=(cid:74)XNULL(cid:75)[i] ‚à® ¬¨P ((cid:74)X(cid:75)[i], NULL)
and(cid:74)Z(cid:75)[i] := S((cid:74)X(cid:75)[i], NULL).
For i ‚àà [n], Fmpc evaluate (cid:74)ZNULL(cid:75)[n + i] :=(cid:74)YNULL(cid:75)[i] ‚à® ¬¨(cid:74)XNULL(cid:75)[i] ‚à®
¬¨P (NULL,(cid:74)Y (cid:48)(cid:75)[i]) and(cid:74)Z(cid:75)[n + i] := S(NULL,(cid:74)Y (cid:48)(cid:75)[i]).
(cid:74)X(cid:48)(cid:75)
(Join, Union,(cid:74)X(cid:48)(cid:75), J,(cid:74)Y(cid:75), K, S(cid:48)(cid:48), P (cid:48)) to Œ†join and output the re-