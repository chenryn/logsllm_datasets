∗
subgroup of Z
gx ≡ h (mod p). B works as follows:
On input (p, q, g, h), ﬁrst generate accumulator param-
eters N, u as in the Setup routine and set params ←
(N, u, p, q, g, h). For i = 1 to K, compute (ci, skci) ←
Mint(params), where
and run
A(params, c1, . . . , cK). Answer each of A’s queries to
Ospend using the appropriate trapdoor information. Let
(S1, R1), . . . , (Sl, Rl) be the set of values recorded by the
oracle.
At the conclusion of the game, A outputs a set of M
(cid:3)
M ) and a corresponding set of M + 1 valid
(cid:3)
i, C(cid:3)
i). For j = 1 to M +1, apply the ZKSoK
(cid:3)
j to extract the
(cid:3)
coins (c
1, . . . , c
(cid:3)
(cid:3)
tuples (π
i, R
i, S
extractor to the jth zero-knowledge proof π
∗
∗
values (c
j ) and perform the following steps:
j , r
j /∈ C(cid:3)
∗
∈ {c1, . . . , cK}:
∗
j
a) If for some i, (S
1) If the extractor fails, abort and signal EVENTEXT.
2) If c
3) If c
j, abort and signal EVENTACC.
∗
j ) = (Si, ri) and R
(cid:12)= Ri,
(cid:3)
j, r
(cid:3)
j
abort and signal EVENTFORGE.
∗
(cid:3)
j ) = (Si, ri), abort
j, r
b) Otherwise if for some i, (S
and signal EVENTCOL.
c) Otherwise set (a, b) = (Si, ri).
∗
j = c
∗
i , set (a, b) = (S
(cid:3)
i, r
∗
i ).
∗
(cid:2)
j hr
−1 mod q.
simulation did not
the
abort, we now have
∗
(cid:3)
j, a, b) where (by the soundness of π) we know
j , S
≡ gS
j ≡ gahb (mod p). To solve for logg h,
∗
− a) · (b − r
(cid:3)
(cid:3)
j
j)
j
4) If for some i, c
If
∗
j , r
(c
that c
output (S
Analysis. Let us brieﬂy explain the conditions behind this
proof. When the simulation does not abort, we are able to
∗
M +1) where the win conditions enforce that
extract (c
} and
∀j ∈ [1, M + 1], c
(cid:3)
j is distinct (and does not match any serial number
each S
output by Ospend). Since A has produced M coins and yet
spent M + 1, there are only two possibilities:
1) A has spent one of the challenger’s coins but has
provided a new serial number for it. For some (i, j),
∈ {c1, . . . , cK, c
∗
1, . . . , c
(cid:3)
1, . . . , c
∈ C(cid:3)
(cid:3)
M
∗
j
j
25Our proofs assume the existence of an efﬁcient simulator and extractor
for the ZKSoK. See Appendix B.
410
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
j = ci ∈ {c1, . . . , cK}. Observe that in cases where
∗
c
the simulation does not abort, the logic of the simu-
lation always results in a pair (a, b) = (Si, ri) where
j (mod p) and (a, b) (cid:12)= (S
gahb ≡ gS
j ≡ c
∗
∗
j ).
2) A has spent the same coin twice. For some (i, j),
(cid:12)= S
∗
∗
(cid:3)
(cid:3)
i). Thus again we identify
i and yet (S
c
j = c
i ) that satisﬁes gahb ≡ c
∗
∗
(cid:3)
j
a pair (a, b) = (S
i, r
(mod p) where (a, b) (cid:12)= (S
(cid:3)
j
j, r
(cid:3)
j, r
(cid:2)
j hr
∗
j ).
∗
(cid:3)
j, r
Finally, we observe that given any such pair (a, b) we can
solve for x = logg h using the equation above.
Abort probability. It remains only to consider the probability
that the simulation aborts. Let ν1(λ) be the (negligible)
probability that the extractor fails on input π. By sum-
mation, Pr [ EVENTEXT ] ≤ (M + 1)ν1(λ). Next consider
the probability of EVENTCOL. This implies that for some
i, A has produced a pair (S
∗
(cid:3)
j ) = (Si, ri) where S
has not been produced by Ospend. Observe that there are
j
∗
l distinct pairs (S, r) that satisfy c
j = gShr mod p and
A’s view is independent of the speciﬁc pair chosen. Thus
Pr [ EVENTCOL ] ≤ 1/l.
Next, we argue that under the Strong RSA and Dis-
crete Log assumptions, Pr [ EVENTACC ] ≤ ν2(λ) and
Pr [ EVENTFORGE ] ≤ ν3(λ). We show this in Lemmas A.1
and A.2 below. If A succeeds with advantage , then by
summing the above probabilities we show that B succeeds
with probability ≥ − ((M + 1)ν1(λ) + ν2(λ) + ν3(λ) + 1/l).
We conclude with the remaining Lemmas.
Lemma A.1: Under
the
Pr [ EVENTACC ] ≤ ν2(λ).
Proof sketch. The basic idea of this proof is that an A(cid:3) who
induces EVENTACC with non-negligible probability can be
used to ﬁnd a witness ω to the presence of a non-member in a
given accumulator. Given this value, we apply the technique
of [12, §3] to solve the Strong RSA problem. For the complete
details we refer the reader to [12, §3] and simply outline the
remaining details of the simulation.
Let A(cid:3) be an adversary that induces EVENTACC with non-
(cid:3) in the simulation above. We use
negligible probability 
A(cid:3) to construct a Strong RSA solver B(cid:3) that succeeds with
non-negligible probability. On input a Strong RSA instance
(N, u), B(cid:3) selects (p, q, g, h) as in Setup and sets params =
(N, u, p, q, g, h). It generates (c1, . . . , cK) as in the previous
simulation and runs A(cid:3). To induce EVENTACC, A(cid:3) produces
/∈ C(cid:3).
, C(cid:3)
valid output (π
B(cid:3) now extracts ω
(cid:3) using the technique described
in [12, §3] and uses the resulting value to compute a solution
to the Strong RSA instance.
) and (by extraction from π
∗ from π
Strong RSA assumption,
(cid:3)) a c
2
∗
(cid:3)
e.g., [25]. Let A(cid:3) be an adversary that induces EVENTFORGE
(cid:3) in the simulation above.
with non-negligible probability 
On input a discrete logarithm instance, we run A(cid:3) as in
the main simulation except that we do not use the trapdoor
information to answer A(cid:3)’s oracle queries. Instead we select
random serial numbers and simulate the ZKSoK responses
to A(cid:3) by programming the random oracle. When A(cid:3) outputs
a forgery on a repeated serial number but a different string
(cid:3) than used in any previous proof, we rewind A(cid:3) to extract
R
∗
j ) and solve for the discrete logarithm as in
the pair (S
the main simulation.
2
(cid:3)
j, r
APPENDIX B.
ZERO-KNOWLEDGE PROOF CONSTRUCTION
The signature of knowledge
π = ZKSoK[R]{(c, w, r) :
AccVerify((N, u), A, c, w) = 1 ∧ c = gShr}
is composed of two proofs that (1) a committed value c
is accumulated and (2) that c is a commitment to S. The
former proof is detailed in [41, §3.3 and Appendix A]. The
latter is a double discrete log signature of knowledge that,
although related to previous work [21, §5.3.3], is new (at
least to us). A proof of its security can be found in the full
version of this paper. It is constructed as follows:
x
z
b
hw.
Given y1 = ga
Let l ≤ k be two security parameters and H :
{0, 1}∗ → {0, 1}k be a cryptographic hash func-
tion. Generate 2l random numbers r1, . . . , rl and
v1, . . . , vl. Compute, for 1 ≤ i ≤ l, ti = ga
hvi.
The signature of knowledge on the message m is
(c, s1, s2, . . . , sl, s
(cid:3)
2, . . . , s
(cid:3)
l), where:
(cid:3)
1, s
ri
b
x
c = H(m(cid:17)y1(cid:17)a(cid:17)b(cid:17)g(cid:17)h(cid:17)x(cid:17)t1(cid:17) . . .(cid:17)tl)
if c[i] = 0 then si = ri, s
else si = ri − z, s
i = vi − wbri−z;
(cid:3)
To verify the signature it is sufﬁcient to compute:
(cid:3)
i = vi;
(cid:3)
= H(m(cid:17)y1(cid:17)a(cid:17)b(cid:17)g(cid:17)h(cid:17)x(cid:17) ¯t1(cid:17) . . .(cid:17)¯tl)
and
c
with
if c[i] = 0 then ¯ti = ga
else ¯ti = yb
si
1 hs
(cid:2)
i ;
x
si
b
(cid:2)
i ;
hs
and check whether c = c
(cid:3).
Lemma A.2: Under the Discrete Logarithm assumption,
Pr [ EVENTFORGE ] ≤ ν3(λ).
Proof sketch. We leave a proof for the full version of this
paper, but it is similar to those used by earlier schemes,
Simulating and extracting. Our proofs in Appendix A assume
the existence of an efﬁcient simulator and extractor for the
signature of knowledge. These may be constructed using well-
understood results in the random oracle model, e.g., [25, 42].
We provide further details in the full version of this work.
411
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply.