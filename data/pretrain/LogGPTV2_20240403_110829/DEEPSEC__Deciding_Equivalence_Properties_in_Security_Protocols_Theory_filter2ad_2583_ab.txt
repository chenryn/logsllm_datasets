P | Q
parallel
if u = v then P else Q conditional
u(cid:5)v(cid:6).P
output
u(x).P
input
531
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
where u, v are terms and x ∈ X . Sending message v on
channel u is performed by u(cid:5)v(cid:6), and receiving on channel
u—and binding the input to variable x—is performed by
u(x). The main difference with the calculus of [4] is the ab-
sence of replication. This restriction does not make protocol
analysis trivially decidable. Indeed, although processes are
ﬁnite, we study them in presence of an active, unbounded
attacker. This will become clear in section 2.3 with the
semantics of the calculus.
Example 3. Consider the protocol for private authentica-
tion [5], described informally using Alice-and-Bob notation:
X → B : aenc((cid:5)NX , pk(sk X )(cid:6), pk(sk B))
B → X : aenc((cid:5)NX ,(cid:5)NB, pk(sk B)(cid:6)(cid:6), pk(sk A))
if X=A
otherwise
B accepts authentication requests from A but not from other
parties. However, the protocol should hide to any outsider
that B is willing to engage with A—which explains the
decoy message sent when B is contacted by a different party.
The role of B can be speciﬁed in the applied pi calculus,
writing t = adec(x, sk B), t1 = proj1(t) and t2 = proj2(t):
aenc(NB, pk(sk B))
B = c(x).
c(cid:5)aenc((cid:5)t1,(cid:5)NB, pk(sk B)(cid:6)(cid:6), pk(sk A))(cid:6)
if t2 = pk(sk A) then
else c(cid:5)aenc(NB, pk(sk B))(cid:6)
where sk A, sk B, NA, NB ∈ Nprv, c ∈ Npub. Anonymity can
(cid:2)},
be stated as equivalence of B and B
assuming that the attacker has access to all public keys in-
volved. Indeed, this means that an attacker sees no difference
(cid:2).
between B willing to engage with A or A
(cid:2) = B{sk A (cid:9)→ sk A
Inputs bind variables and deﬁne their scope: a process
is said to be closed if it does not have free variables, i.e. all
variables are bound. We require that all variables are bound
at most once. A plain process P is positive when each of its
conditionals is of the form if u = v then Q else 0 (written
if u = v then Q for short). We denote by |P|dag the size
of the process—syntax tree plus the dag size of the terms.
2.3. Concrete semantics
Attacker knowledge. Semantics of processes deﬁnes their
behaviours in presence of an active attacker, capable of
• eavesdropping messages, i.e., the attacker can learn
outputs sent on public channels;
• performing deductions,
i.e., computations on mes-
sages. For example, after observing an encryption
aenc(m, pk(k)) and, later on, the decryption key k, he
can deduce m;
• controlling public channels: the attacker can remove
messages, as well as insert messages deducible from
previous observations.
Attacker’s observations are seen as sequences of terms
that can be used by reference. For that, we reﬁne variables
as X = X 1 (cid:7) AX , variables of AX = {ax1, ax2, . . .}
(axioms) acting as pointers. A term ξ ∈ T (F,Npub∪AX ) is
called a recipe: typically, an attacker observing sequentially
aenc(m, pk(k)) and k can use recipe ξ = adec(ax1, ax2) to
construct m. Variables of X 1 (ﬁrst-order variables) stick to
the initial role of variables, namely being used as binders
for protocol inputs. A term t ∈ T (F,N ∪ X 1) is therefore
called a protocol term.
All of this ﬁnally leads to the notion of extended pro-
cesses, representing a set of plain processes executed in
parallel,
together with the knowledge aggregated by an
attacker interacting with the protocol:
Deﬁnition 1. An extended process is a pair A = (P, Φ) s.t.
• P is a multiset of closed plain processes (we use a
double-bracket notation {{·}} for multisets).
• Φ = {ax1 (cid:9)→ u1, . . . , axn (cid:9)→ un}, called the frame and
written Φ(A), is a substitution from axioms to ground
constructor terms.
Φ embodies the attacker’s knowledge: typically ξΦ↓ is
the result obtained from the recipe ξ w.r.t. the attacker’s
observations recorded in Φ.
Operational semantics. We operate under the assumption
that protocols only exchange meaningful data. For example,
the decryption of a term that is not a ciphertext is supposed
to fail and shall not be input nor output. While this assump-
tion is realistic for authenticated encryption, it may not hold
for schemes with weaker security guarantees. We model this
using the following notion of message:
Deﬁnition 2. A protocol term t is a message when its
destructors operate smoothly, i.e. when u↓ is a constructor
term for all subterms u of t. We deﬁne the predicate Msg(·)
such that Msg(t) iff the term t is a message.
The semantics will ensure that the network only circu-
lates messages. In practice, the semantics takes the form of
a transition relation between extended processes labelled by
so-called actions:
1. input actions ξ(ζ), where ξ and ζ are recipes, model
an input from the attacker of a message (crafted from
recipe ζ) on some channel (known through recipe ξ);
2. output actions ξ(cid:5)axn(cid:6), where ξ is a recipe, model an
output on a channel known by the attacker (using recipe
ξ), recorded into the frame (at pointer axn ∈ AX ).
We call A the alphabet of actions, transitions A a−→
c B
being labelled by a the empty word ε or a letter of A.
More generally, given a word w ∈ A∗, we write A w=⇒c B
c B with w = a1 . . . an. The transition
when A
relation is deﬁned by the rules given in ﬁg. 2.
Observe that the ﬁnite, pure π-calculus [39] is retrieved
by imposing F = ∅ and R = ∅. This restriction makes
the transition relation ﬁnitely branching up to renaming—
which is not the case in general because the attacker can
input inﬁnitely-many terms to protocols using rule (IN).
Example 4. We introduce a toy example which will serve
as a pedagogical running example. It was designed for its
an−−→
a1−→
c . . .
532
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
c
c
c
(P, Φ)
(P ∪ {{P}}, Φ)
(P ∪ {{Q}}, Φ)
ε−→
ε−→
(P ∪ {{P, Q{x (cid:9)→ t}}}, Φ)
(P ∪ {{0}}, Φ) ε−→
(P ∪ {{if u = v then P else Q}}, Φ)
(P ∪ {{if u = v then P else Q}}, Φ)
(P ∪ {{u(cid:5)t(cid:6).P, v(x).Q}}, Φ)
(P ∪ {{P | Q}}, Φ)
(P ∪ {{u(x).P}}, Φ) ξ(ζ)−−→
if ξ, ζ ∈ T (F,Npub ∪ dom(Φ)), Msg(u), Msg(ξΦ), Msg(ζΦ) and ξΦ↓ = u↓
(P ∪ {{u(cid:5)t(cid:6).P}}, Φ) ξ(cid:4)axn(cid:5)−−−−→
if ξ ∈ T (F,Npub ∪ dom(Φ)), Msg(u), Msg(ξΦ), Msg(t), ξΦ↓ = u↓, and n = |Φ| + 1
if Msg(u), Msg(v) and u↓ = v↓
if either ¬Msg(u), ¬Msg(v) or u↓ (cid:15)= v↓
if Msg(u), Msg(v), Msg(t) and u↓ = v↓
(P ∪ {{P, Q}}, Φ)
(P ∪ {{P{x (cid:9)→ ζΦ↓}}}, Φ)
(P ∪ {{P}}, Φ ∪ {axn (cid:9)→ t↓})
ε−→
ε−→
Figure 2: Semantics of the calculus (w.r.t. an implicit rewrite system R)
c
c
c
c
(NULL)
(THEN)
(ELSE)
(COMM)
(PAR)
(IN)
(OUT)
simplicity and capacity to illustrate the different notions
deﬁned in this paper. If b ∈ {0, 1} ⊆ Npub and c ∈ Npub:
P b (cid:2) c(x). if proj2(x) = b then c(cid:5)0(cid:6) else c(cid:5)proj2(x)(cid:6)
Q (cid:2) c(x). c(cid:5)proj2(x)(cid:6)
Process Q forwards the second component of a term re-
ceived through a public channel c. P 0 and P 1 have a similar
behaviour as Q except that on input values (cid:5)t, 1(cid:6), P 1 outputs
0 rather than 1. We illustrate the semantics on P 1, e.g. by
forwarding a hash h(n), n ∈ Npub, sent by the attacker:
({{P
1}},∅)
(cid:5)
(cid:4)(cid:4)
c((cid:4)0,h(n)(cid:5))
−−−−−−−→
c(cid:4)ax1(cid:5)
===⇒c (∅,{ax1 (cid:9)→ h(n)})
if proj2((cid:5)0, h(n)(cid:6)) = 1 then c(cid:5)0(cid:6)
else c(cid:5)proj2((cid:5)0, h(n)(cid:6))(cid:6)
(cid:2)(cid:3)(cid:3)
,∅
c
2.4. Equivalences
Process equivalences express indistinguishability be-
tween two situations and can be used to formalise many
interesting security properties, as explained previously.
2.4.1. Static equivalence. Static equivalence expresses that
the knowledge obtained in two different situations does not
permit the attacker to distinguish them. This notion has been
extensively studied in the literature (see e.g. [3]).
Deﬁnition 3. Frames Φ and Φ(cid:2) are statically equivalent,
written Φ ∼ Φ(cid:2), when dom(Φ) = dom(Φ(cid:2)) and for all
ground recipes ξ, ζ such that axioms(ξ, ζ) ⊆ dom(Φ):
1) Msg(ξΦ) if and only if Msg(ξΦ(cid:2))
2) if Msg(ξΦ) and Msg(ζΦ), then ξΦ↓R = ζΦ↓R if and
only if ξΦ(cid:2)↓R = ζΦ(cid:2)↓R.
This deﬁnition is easily lifted to extended processes by
writing A ∼ B instead of Φ(A) ∼ Φ(B).
Intuitively, this deﬁnition states that the observations
recorded in Φ and Φ(cid:2) cannot be distinguished by observing
destructor failures or equality tests.
Example 5. The aim of encryption schemes is to make
messages unintelligible to any agent not possessing the
decryption key. This is modelled by static equivalence of
(cid:2)}
Φ = {ax1 (cid:9)→ senc(m, k)}
(cid:2) ∈ Nprv. This means that the
where m ∈ Npub and k, k
attacker cannot distinguish between an encrypted message
(with unknown key) and an arbitrary, private nonce. Natu-
rally this does not hold anymore once the decryption key is
revealed, and indeed
and Φ(cid:2) = {ax1 (cid:9)→ k
Φ0 ∪ {ax2 (cid:9)→ k} (cid:15)∼ Φ1 ∪ {ax2 (cid:9)→ k}
(witnessed by recipes ξ = sdec(ax1, ax2) and ζ = m).
(cid:2)
(cid:2)
2.4.2. Dynamic equivalences. Dynamic extensions of static
equivalence consider distinguishability for an attacker inter-
acting with protocols actively. Two classical equivalences
are trace equivalence and labelled bisimilarity:
Deﬁnition 4. If A and B are extended processes, we write
A (cid:16)t B when for all A tr=⇒c (P, Φ), there exists (P
, Φ(cid:2))
, Φ(cid:2)) and Φ ∼ Φ(cid:2). A and B are trace
such that B tr=⇒c (P
equivalent, denoted A ≈t B, when A (cid:16)t B and B (cid:16)t A.
Deﬁnition 5. Labelled bisimilarity ≈(cid:2) is the largest symmet-
ric relation containing ∼ such that A ≈(cid:2) B and A α−→
(cid:2)
c A
(cid:2) ≈(cid:2) B
(cid:2).
entails existence of B
These two equivalences are well established as means
(cid:2) such that B α=⇒c B
(cid:2) and A
to express security properties [6], [4].
Example 6. The statement that P 0 and Q have same be-
havior is expressed by (P 0,∅) ≈(cid:2) (Q,∅). On the contrary
(P 1,∅) (cid:15)≈t (Q,∅) since the trace
,∅) c((cid:4)1,1(cid:5)). c(cid:4)ax1(cid:5)
cannot be matched in (Q,∅).
2.5. Decision problems for equivalences
=========⇒c (0,{ax1 (cid:9)→ 0})
(P
1
We can now deﬁne the decision problems associated to
these equivalences.
533
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 6 (parameterised equivalence problem). We de-
R,F , with ≈ ∈ {∼,≈t,≈(cid:2)}:
≈
ﬁne the decision problem Equiv
CONSTANTS: A signature F, a rewrite system R
INPUTS: two extended processes A, B
QUESTION: A ≈ B
In [3], Equiv
∼
R,F is proven undecidable in general, but
PTIME if R is subterm convergent. However, it does not
take the size of |R| into account: all procedures proposed so
far [3], [27], [29] are actually exponential in |R| or |F|. We
argue that the size of R should be considered for complexity
analyses as it can be speciﬁed by the user in many automated
tools. We therefore focus on:
Deﬁnition 7 (general equivalence problem). We deﬁne the
ψ , with ≈ ∈ {∼,≈t,≈(cid:2)} and a
≈
decision problem Equiv
predicate ψ(F,R, A, B):
INPUTS: a signature F, a rewrite system R, extended
processes A, B such that ψ(F,R, A, B) holds.
QUESTION: A ≈ B
The predicate ψ is necessary to avoid trivial undecidabil-
ity and will be used for instance to restrict R to subterm
convergent theories. For the sake of convenience, the pred-
icate ψ will be speciﬁed in prose in theorem statements.
Remark 2.1. Input representation may inﬂuence complexity.
We adress the strongest conﬁgurations: lower bounds in the
tree representation of terms, upper bounds in DAG.
3. Complexity lower bounds
3.1. Static equivalence
(cid:6)
We prove that, in our setting where the rewrite system
is part of the input, static equivalence is coNP hard. By
reduction from SAT, let ϕ =
i=1 Ci a boolean formula in
CNF with n variables x1, . . . , xn and p clauses C1, . . . , Cp.
Then we consider the constructors Fc = {0, 1, f/2, g/2}
and destructor Fd = {eval/n} which are equipped with the
rewrite system R deﬁned by the following p + 1 rules:
p
1, y), . . . , g(ti
eval(f(x1, y), . . . , f(xn, y)) → 0
n, y)) → 0
eval(g(ti
⎧⎨
where 1 (cid:3) i (cid:3) p and
⎩ xj
if xj does not appear in Ci
if xj appears positively in Ci
if xj appears negatively in Ci
0
1
ti
j
=
This assumes that no clause of ϕ contains both a litteral
and its negation, but such clauses can be removed by a
LOGSPACE preprocessing. Intuitively, if t1, . . . , tn ∈ {0, 1},
eval(g(t1, y), . . . , g(tn, y)) is a message and reduces to 0
the valuation {x1 (cid:9)→ t1, . . . , xn (cid:9)→ tn} falsiﬁes ϕ.
iff
Then it sufﬁcies to observe that, for some k ∈ Nprv,
{f(0, k), f(1, k)} ∼ {g(0, k), g(1, k)} iff ϕ is unsatisﬁable.
Theorem 1. Equiv
is coNP hard for subterm destructor
rewrite systems.
∼
3.2. Tools for reductions