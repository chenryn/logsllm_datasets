arranged in an 8-byte alignment by the compiler in a 64-bit
system.2 Note here that the current prototype of CRCount only
supports a 64-bit system. Based on this assumption, each bit
of the pointer bitmap corresponds one-to-one to all the 8-byte-
aligned addresses in the virtual memory space; thus, we can
identify the exact pointer locations through the pointer bitmap.
Owing to the structural simplicity and compactness of our
bitmap, the runtime library can efﬁciently manipulate it with
a combination of simple bit operations such as shifting and
masking. The bitmap occupies 1/64-th of the virtual memory
space and is reserved at
the start of the process through
the mmap system call. This might seem like a large amount
of memory, but fortunately, because of the demand paging
mechanism of OSs that delays the allocation of a physical
memory block (i.e., frame) until there is an actual access, the
bitmap does not occupy much physical memory at runtime.
Furthermore, as the access to the pointer bitmap follows the
original
the
physical memory overhead for the bitmap is negligible.
locality of the memory accesses,
in practice,
The pointer bitmap is managed by the runtime library.
Table I shows a list of the runtime library functions, along with
the program points where they are invoked and their tasks at
these points. The function crc_alloc does not update the
pointer bitmap, but when a new heap object is allocated, it
2We have encountered a few cases where this assumption does not hold
true. We will explain these cases in §IX.
6
Runtime library
function
Invoked at
Description
crc_alloc
crc_store
crc_memset
Heap allocation
Candidate store
Instruction
Memset
crc_memcpy
Memcpy
crc_free
Heap deallocation
crc_return
Function return
Add a mapping for the new heap object
to the pointer-to-object metadata map
Handle a pointer generation and/or kill
due to memory store
Handle pointer kills due to memset’ing
a region with identical bytes
Handle pointer generations and/or kills
due to copying of a memory region
Handle pointer kills by heap object
deallocation
Handle pointer kills by stack frame
deallocation
TABLE I: The list of runtime library functions of CRCount
Fig. 2: Layout of per-object metadata. rsv. ﬁeld is reserved for C++
support (§VI) and garbage collection (§VII).
adds a new mapping for the object to the pointer-to-object
metadata map to be used in the reference count management
(refer to §V-C1 for details). Moreover, as we are only interested
in the pointers to the heap objects, the runtime library functions
look up the pointer-to-object metadata map before setting the
bits in the pointer bitmap. The function crc_store sets or
clears, respectively, the corresponding bit in the bitmap when
a new heap pointer is stored (generated) or the previously
stored pointer is overwritten (killed) by a store instruction.
The functions crc_memset and crc_memcpy set and clear
the bits in the pointer bitmap corresponding to the pointers
that are killed and/or duplicated by memset or memcpy. The
functions crc_free and crc_return clear the bits in the
pointer bitmap corresponding to the pointers invalidated by
the heap object deallocation and the stack frame deallocation,
respectively.
At the time of compilation, the calls that invoke the runtime
library functions are instrumented into the program so that
the runtime library can reﬂect the generations and the kills
of the pointers into the pointer bitmap. The instrumenta-
tion is done by the CRCount’s LLVM plugin that provides
an additional pass over the intermediate representation (IR)
during the compilation phase. All the runtime library calls
except crc_store are instrumented in a straightforward
manner at every corresponding program point. In the case
of crc_store, instrumenting all the store instructions will
cause the excessive performance overhead. It will be overkill
if we consider that only a part of these instructions are actually
related to pointer generations and kills. However, as the store
of a non-pointer-type value can kill a pointer, as discussed
in §IV-B, a simple examination of the type of stored value
in LLVM IR is not sufﬁcient to identify all the instructions
that need to be instrumented. To solve this, our LLVM plugin
performs a static analysis of the program code to identify the
minimum set of instrumentation points required to enable an
efﬁcient yet precise tracking of pointers.
Listing 3 shows the pseudo-code of CRCount’s LLVM plu-
gin for instrumenting memory store instructions. In the LLVM
IR, store instructions assign a source value val to a destination
Freeableflag(1bit)Base addressReference counterrsv.dest = storeInst.dest
val = storeInst.val
1 for storeInst in program:
2
3
4
5
6
7
8
9
10
11
12
13
continue
if isLoadStoreSame(dest, val):
continue
if !isPointerType(val) && !isCastFromPtr(val):
if !shouldInstrument(storeInst.dest):
callInst = createCallInst(crc_store, dest, val)
storeInst.insertBefore(callInst)
Listing 3: Pseudo code for instrumenting the store instructions.
address dest. We should deﬁnitely insert a crc_store call
when a pointer value is written; therefore, the plugin ﬁrst
examines val to check whether it is a pointer. It is obviously
a pointer if it has a pointer type (isPointerType), but
sometimes, it can be a pointer even if it does not have a pointer
type. For example, the programmer could have cast a pointer
into an integer type. In this case, in the IR code, there will be
a bitcast instruction that casts the type of val somewhere
before the store instruction. In this context, our LLVM plugin
conducts a backward data ﬂow analysis to check whether val
has been cast from a pointer type prior to the store instruction
(isCastFromPtr). If it has, then the store instruction is
instrumented.
Even if val is not a pointer type value, store instructions
might implicitly invalidate an existing pointer by overwrit-
ing it with a non-pointer value. Thus,
the LLVM plugin
performs a backward data ﬂow analysis on dest to check
whether the store instruction can potentially kill a pointer
and thus should be instrumented with a call to crc_store
(shouldInstrument). There are two main cases where the
instrumentation is necessary. First, the plugin instruments the
store instruction if dest has been cast from a double pointer
type, because in this case, the memory pointed to by dest
can hold a pointer value. Another case that the plugin mainly
looks for in the data ﬂow analysis is a case wherein dest is
a ﬁeld of the union type that can hold both a pointer value
and a non-pointer value (as shown in Listing 2). However, the
determination of whether or not a speciﬁc ﬁeld of the union
can be a pointer type in LLVM IR is non-trivial because the
IR code generation phase collapses the type information for
the union type, and thus, union types in LLVM only has the
type information for a single member ﬁeld whose in-memory
representation is the largest in size among all the ﬁelds in
the union. For example, if a union type has a pointer type
member and a struct type member with the size bigger than
that of a pointer, only the struct type is shown as the member
of the union type in IR. Nevertheless, with the backward data
ﬂow analysis, we can at least determine whether the ﬁeld
pointed to by dest is a part of a union type. Consequently, we
conservatively instrument the store instruction if the underlying
type of the memory object is a union type even if it does not
have a pointer type member ﬁeld at the speciﬁc offset.
The LLVM plugin also performs a similar optimization
done in DangSan that skips the instrumentation if it can be
statically determined that val points to the same object that
the pointer stored in dest points to (isLoadStoreSame).
In this case, crc_store will increment and decrement the
7
same reference counter, so there is no need for the runtime
library call to be instrumented. This mainly deals with the
case where a pointer is simply incremented or decremented
and thus the reference counter of the target object does not
change.
C. Delayed Object Free
To achieve its objective, CRCount enforces the delayed
object free policy that delays the freeing action as briefed
in §V-A. CRCount manages the reference counters of objects
by using the pointer footprinting technique. When a program-
mer invokes the function free/delete to free an object,
CRCount checks the object’s reference count and stops the
function from freeing the object if this count is non-zero.
To implement this, we modiﬁed the free function so that
the function cannot automatically free objects. In CRCount,
the decision on when to free an object is exclusively made
by our runtime library. Therefore, any manual attempt of a
programmer to delete an object is intercepted by the library
which will eventually permit the memory allocator to free the
object for reuse when the object’s count becomes zero.
1) Per-object Metadata: To realize the delayed object free
policy, we must maintain a reference counter for each heap ob-
ject. To do this, CRCount uses METAlloc [11] to augment the
heap objects with the per-object metadata. METAlloc internally
maintains a trie-based pointer-to-object metadata map [25].
Given a pointer value, METAlloc retrieves the map and returns
a pointer to the object metadata allocated separately when the
heap object is allocated. The per-object metadata (Figure 2)
include not only the reference counter but also two additional
pieces of information: the base address and a 1-bit freeable
ﬂag. The base address is required for the memory allocator to
free the object when the reference count becomes zero. Note
that the free function needs the base address of the target
object as its unique argument. However, when the last pointer
that points to the object is killed, and the reference count is set
to zero, there is no guarantee that this pointer will hold the base
address of the object. Therefore, CRCount separately keeps
the base address of each object to invoke the free function
correctly. The freeable ﬂag is required for CRCount to mark
some objects as freeable. When the free function is called
for an object and its reference count is non-zero, CRCount
just halts the function and sets the freeable ﬂag of the object.
Thereafter, when the reference counts of objects become zero,
CRCount allows only the freeable objects for which the free
function has been called, to be actually freed by the memory
allocator. This is important for CRCount because there are
some exceptional cases (discussed in detail in §IX) that may
hinder the correct maintenance of the reference counter. These
exceptional cases would decrease even the reference counters
of non-freeable objects to zero, and if CRCount mistakenly
decides to free these non-freeable objects, the program may
crash. Even though such cases are known to be unusual in the
normal programming practices of C/C++ [30], we adopt this
freeable ﬂag-based approach for maximum compatibility with
the legacy C/C++ applications.
2) Reference Counter Management: The runtime library
includes the code for reference counter management
that
can update the reference counter according to the pointer
generations and kills. When a heap object is allocated, the
associated per-object metadata are also allocated. Here, the
reference count is initialized to zero, and the base pointer is
set to the base address of the allocated memory region. Every
time a pointer is stored by a store instruction, CRCount reads
the corresponding per-object metadata by using the pointer-
to-object metadata map and increases the reference count. For
memcpy, CRCount ﬁrst examines the pointer bitmap mapped
to the source memory region to ﬁnd the pointers that are to be
duplicated and increases the reference counts corresponding
to the objects referred to by these pointers. Every time a
pointer is invalidated, either by a store instruction or by any
of the memset/memcpy/free/return function/instruction,
CRCount checks the pointer bitmap to identify the pointers
from the destination memory region and decreases the refer-
ence counts of the objects referred to by these pointers. For
free and return, CRCount also nulliﬁes all the pointers
inside an object or a stack frame to completely block wrongful
uses of them. Finally, when CRCount ﬁnds that the reference
count for an object has become zero and the object’s freeable
ﬂag is set, it gives the object to the memory allocator that will
free the object.
It is noteworthy that CRCount handles memset/memcpy
as well. Not only are they very commonly used in C/C++
programs, but
they are also often introduced by compiler
optimizations when a contiguous range of memory is set or
copied. The previous work on pointer invalidation, such as
FreeSentry or DangSan, does not handle these functions for
performance reasons,
leaving the system exposed to UAF
errors. Note that CRCount is immune to the so-called reference
cycle problem [37]. Automatic memory management systems
(i.e., garbage collector) relying on reference counting suffer
from the problem wherein the reference counters of a group of
objects are never decreased to zero when the objects are cross-
referenced. Since the purpose of automatic memory manage-
ment systems is to deallocate memory objects automatically
without relying on explicit free requests, the reference counts
of objects pointing each other will never decrease to zero. To
avoid this problem, many systems introduce the notion of weak
references, which the programmers must wisely use to prevent
reference cycles [18], [29]. CRCount does not suffer from
reference cycles as it operates based on the free functions
that already exist in the legacy code. When the free function
is called for one of the objects involved in the reference
cycle, CRCount forcibly kills the pointers enclosed in the freed
object and decrements the reference counter of the other object,
thereby breaking any reference cycles.
VI.
IMPLEMENTATION
We have implemented the CRCount LLVM plugin as an
LTO (Link Time Optimization) module based on LLVM 3.8.
The runtime library is written in C and is statically linked into
the program binary. The LLVM plugin and the runtime library
each consists of approximately 1k lines of code.
Allocation of the per-object metadata. METAlloc provides
an efﬁcient mapping between a given pointer and the asso-
ciated per-object metadata, but it does not provide any way
to allocate the metadata itself. We sought for a way to avoid
the additional overhead that comes from metadata allocations,
since whenever heap object is allocated, the corresponding per-
object metadata also needs to be allocated. If we use malloc
for this purpose, an overhead incurred by malloc would
be doubled, which could be non-negligible as more memory
objects are allocated [10]. Fortunately, each of our per-object
metadata mapped to the objects has a ﬁxed size. Thus we
can mitigate the metadata allocation overhead by using the
concept of an object pool. We ﬁrst reserve an object pool
using mmap and provided a custom allocator for the per-object
metadata, eliminating the costs involved with malloc. The
current implementation of CRCount performs a linear search
over this memory pool to ﬁnd an empty slot for the allocation
of the metadata.
Handling realloc. realloc can migrate an object from
its original memory region to another memory region. Such
behavior of realloc necessitates an exceptional handling by
CRCount. First, when the contents of the target object are