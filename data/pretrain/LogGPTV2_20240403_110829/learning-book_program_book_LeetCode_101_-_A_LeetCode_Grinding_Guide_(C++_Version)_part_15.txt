F
return -1;
//辅函数-计算next数组
void calNext(const string &needle, vector &next) {
for (int j = 1, p = -1; j  -1 &e needle[p+1]!- needle[j]){
Pmext[p]；//如采下一位不同，往前回溯
if (needle[p+1] == needle[j]) {
+p；//如果下一位相同，更新相同的最大前缓和最大后缀长
next[] - p;
12.5练习
基础难度
409. Longest Palindrome (Easy)
计算一组字符可以构成的回文字符中的最大长度，可以利用其它数据结构进行辅助统计。
3. Longest Substring Without Repeating Characters (Medium)
计算最长无重复子字符中，同样的，可以利用其它数据结构进行辅助统计。
进阶难度
772. Basic Calculator III (Hard)
题目227的follow-up，十分推荐练习。
5. Longest Palindromic Substring (Medium)
类似于我们讲过的子序列问题，子数组或子字符中问题常常也可以用动态规划来解决。先使
用动态规划写出一个O(r²)时间复杂度的算法，再搜索一下Manacher'sAlgorithm，它可以在O(n)
时间解决这一问题。
---
## Page 115
第13章指针三剑客之一：链表
内容提要
数据结构介绍
其它链表技巧
链表的基本操作
13.1数据结构介绍
（单）链表是由节点和指针构成的数据结构，每个节点存有一个值，和一个指向下一个节点
的指针，因此很多链表问题可以用递归来处理。不同于数组，链表并不能直接获取任意节点的值，
必须要通过指针找到该节点后才能获取其值。同理，在未逾历到链表结尾时，我们也无法知道链
表的长度，除非依赖其他数据结构储存长度。LeetCode默认的链表表示方法如下。
struct ListNode {
int val;
ListNode *next;
ListNode(int x): val(x),next (nullptr){)
};
由于在进行链表操作时，尤其是删除节点时，经常会因为对当前节点进行操作面导致内存或
指针出现问题。有两个小技巧可以解决这个问题：一是尽量处理当前节点的下一个节点面非当前
节点本身，二是建立一个虚拟节点（dummynode)，使其指向当前链表的头节点，这样即使原链表
所有节点全被删除，也会有一个dummy存在，返回dummy->next 即可。
直接进行指针操作而无需回收内存。实际做献件工程时，对于无用的内存，笔者建议尽量显式回
收，或利用智能指针。
13.2链表的基本操作
206. Reverse Linked List (Easy)
题目描述
翻转一个链表。
输人输出样例
输入一个链表，输出该链表翻转后的结果。
Input: 1->2->3->4->5->nu11ptr
Output: 5->4->3->2->1->nu11ptr
---
## Page 116
13.2链表的基本操作
111/143
题解
链表翻转是非常基础也一定要掌握的技能，我们提供了两种写法—递归和非递归，且我们
建议你同时掌握这两种写法。
递归的写法为：
ListNode* reverseList(ListNode* head, ListNode* prev=nullptr) {
if (!head){
return prev;
ListNode+ next = head->next;
head->next = prev;
return reverseList (next, head) ;
非递归的写法为：
ListNode* reverseList(ListNode* head) {
ListNode *prev = nullptr, *next;
while (head) {
next = head->next;
head->next = prev;
prev = head;
head = next;
return prev;
21. Merge Two Sorted Lists (Easy)
题目描述
给定两个增序的链表，试将其合并成一个增序的链表。
输入输出样例
输入两个链表，输出一个链表，表示两个链表合并的结果。
Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4
题解
我们提供了递归和非递归，共两种写法。递归的写法为：
ListNode* mergeTwoLists(ListMode* 11, ListNode* 12) {
if (!12) {
return 11;
if (!11) {
return 12;
if (11->val > 12->val) {
---
## Page 117
13.2链表的基本操作
112/143 -
12>next = mergeTvoLists(11, 12->next);
return 12;
11->next = mergeTvoLists(11->next, 12);
return 11;
非递归的写法为：
ListNode* mergeTvoLists(ListNode *11, ListNode +12) {
ListNode *dummy = nev ListNode(0), *node - dummy;
vhile (11 &a 12){
if (11->val val) {
node->next = 11;
11 = 11->next;
}else {
node->next - 12;
12 = 12->next;
node = node->next;
node->next = 11? 11: 12;
return dummy->next;
24. Swap Nodes in Pairs (Medium)
题目描述
给定一个矩阵，交换每个相邻的一对节点。
输人输出样例
输人一个链表，输出该链表交换后的结果。
Input: 1->2->3->4
next){
xounext && p->next->next){
xau a2
V
c1
-> c2 -> c3
B: b1 -> b2 -> b3
Output: c1
题解
假设链表A的头节点到相交点的距离是a，链表B的头节点到相交点的距离是b，相交点
到链表终点的距离为c。我们使用两个指针，分别指向两个链表的头节点，并以相同的速度前进，
若到达链表结尾，则移动到另一条链表的头节点继续前进。按照这种前进方法，两个指针会在
a+b+c次前进后同时到达相交节点。
ListNode *getIntersectionNode(ListNode +headA, ListNode *headB) {
ListNode *11 = headA, *12 - headB;
while (11 != 12) {
11 = 11? 11->next: headB;
12 = 12? 12->next: headA;
return 11;
234. Palindrome Linked List (Easy)
题目描述
以0（1)的空间复杂度，判断链表是否回文。
---
## Page 119
13.4练习
114/143 -
输人输出样例
输入是一个链表，输出是一个布尔值，表示链表是否回文。
next) {
return true;
ListNode *slow = head, *fast = head;
F
while (fast->next && fast->next->next) {
slov = slov->next;
fast - fast->next->next;
slov->next = reverseList(slou->next);
slov = slou->next;
while (slou){
if (head->val != slov->val) {
return false;
head - head->next;
slov = slov->next;
return true;
//辅函数
ListNode* reverseList(ListNode* head){
ListNode *prev = nullptr, *next;
while (head) {
next = head->next;
head->next - prev;
prev = head;
xau -peag
return prev;
13.4练习
基础难度
---
## Page 120
13.4练习
115/143 -
83.Remove Duplicatesfrom Sorted List (Easy)
虽然LeetCode没有强制要求，但是我们仍然建议你回收内存，尤其当题目要求你删除的时
候。
328.Odd Even Linked List (Medium)
这道题其实很简单，千万不要把题目复杂化，
19. Remove Nth Node From End of List (Medium)
既然我们可以使用快慢指针找到中点，也可以利用类似的方法找到倒数第n个节点，无需遍
历第二遍。
进阶难度
148. Sort List (Medium)
利用快慢指针找到链表中点后，可以对链表进行归并排序。
---
## Page 121
第14章指针三剑客之二：树
内容提要
数据结构介绍
前中后序遍历
树的递归
二叉查找树
层次遍历
字典树
14.1数据结构介绍
作为（单）链表的升级版，我们通常接触的树都是二叉树（binary tree），即每个节点最多有
两个子节点：且除非题目说明，默认树中不存在循环结构。LeetCode默认的树表示方法如下。
struct TreeNode {
int val;
TreeNode *left;
TreeNode *right;
TreeNode(int x): val(x), left (NULL),right (NULL) {)
};
可以看出，其与链表的主要差别就是多了一个子节点的指针。
14.2树的递归
对于一些简单的递归题，某些LeetCode达人喜欢写one-line code，即用一行代码解决问题，
把if-else判断语句压缩成问号冒号的形式。我们也会展示一些这样的代码，但是对于新手，笔者
仍然建议您使用if-else判断语句。
在很多时候，树递归的写法与深度优先搜索的递归写法相同，因此本书不会区分二者。
104.Maximum Depth of Binary Tree (Easy)
题目描述
求一个二叉树的最大深度。
输人输出样例
输入是一个二叉树，输出是一个整数，表示该树的最大深度。
Input :
/\
6
20
15
7
---
## Page 122
14.2树的递归
117/143 -
Output: 3
题解
利用递归，我们可以很方便地求得最大深度。
int maxDepth(TreeNode* root){
return root? 1 + max(maxDepth(root->left), maxDepth(root->right)) : 0;
110. Balanced Binary Tree (Easy)
题目描述
判断一个二叉树是否平衡。树平衡的定义是，对于树上的任意节点，其两侧节点的最大深度
的差值不得大于1
输人输出样例
输入是一个二叉树，输出一个布尔值，表示树是否平衡。
Input :
/
2
2
3
Output:false
4
4
题解
解法类似于求树的最大深度，但有两个不同的地方：一是我们需要先处理子树的深度再进行
比较，二是如果我们在处理子树时发现其已经不平衡了，则可以返回一个-1，使得所有其长辈节
点可以避免多余的判断（本题的判断比较简单，做差后取绝对值即可：但如果此处是一个开销较
大的比较过程，则避免重复判断可以节省大量的计算时间）。
//主函数
bool isBalanced(TreeNode* root) {
return helper(root) != -1;
//辅函数
int helper(TreeNode*root)(
if (!root){
return 0;
int left = helper(root->left), right - helper(root->right);
---
## Page 123