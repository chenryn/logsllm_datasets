[22] M. Piatek, A. Krishnamurthy, A. Venkataramani, R. Yang, and
D. Zhang. Contracts: Practical Contribution Incentives for P2P Live
Streaming. In NSDI, 2010.
[23] M. Reiter, V. Sekar, C. Spensky, and Z. Zhang. Making peer-assisted
content distribution robust to collusion using bandwidth puzzles. In
ICISS, 2009.
[24] S. Saroiu, P. Gummadi, and S. Gribble. Measuring and Analyzing the
Characteristics of Napster and Gnutella Hosts. Multimedia Systems
Journal, 9(2), 2003.
[25] N. Tran, J. Li, and L. Subramanian. Collusion-resilient Credit-based
Reputations for Peer-to-peer Content Distribution. In NetEcon, 2010.
[26] V. Vishnumurthy, S. Chandrakumar, and E. G. Sirer. Karma: A
secure economic framework for peer-to-peer resource sharing. In
P2P Econ, 2003.
[27] B. Yang and H. Garcia-Molina. PPay: Micropayments for
peer-to-peer systems. In CCS, 2003.
[28] H. Yu. Sybil defenses via social networks: A tutorial and survey.
ACM SIGACT News, 42(3), 2011.
[29] H. Yu, P. B. Gibbons, and C. Shi. Brief Announcement: Sustaining
578Collaboration in Multicast despite Rational Collusion. In PODC,
2011.
[30] Z. Zhang, S. Chen, and M. Yoon. MARCH: A Distributed Incentive
Scheme for Peer-to-Peer Networks. In INFOCOM, 2007.
APPENDIX
This appendix proves Theorem 2 from Section 6. First, we want to
prove that a pareto-optimal collusion strategy must be non-damaging,
as deﬁned in the following:
DEFINITION 3. A collusion strategy is called non-damaging if
for every non-deviator (all steps below refer to steps in Algorithm 1
in Section 5):
1. If the non-deviator issues a new doin, then for that doin it
successfully executes Step 19.
2. If it executes Step 19 for a doin (which may or may not cor-
respond to a doin that it has issued), then for that doin it suc-
cessfully executes Step 20-23.
3. If it issues a new doin, then for that doin it successfully exe-
cutes Step 25-26.
4. It never executes Step 27.
5. If it holds a doin that has expired, then for that doin it success-
fully executes Step 12-16 exactly once, and the corresponding
incoming debt-link will be freed.
6. If it relays a doin, then for that doin it successfully executes
Step 29-32, and the corresponding incoming debt-link will be
freed.
7. It never executes Step 33-37.
8. It never receives non-protocol messages (i.e., messages not
speciﬁed by the DCast protocol).
THEOREM 4. Under the setting and the assumptions for Theo-
rem 2, a pareto-optimal collusion strategy must be non-damaging.
Proof: We need to introduce some formal notions. An N-sequence
is a sequence of non-deviators that a doin traverses. An N-sequence
is maximal if it is not part of another N-sequence. A segment is an
N-sequence prepended by the deviator (if any) that sends the doin
to the ﬁrst peer in the N-sequence, and appended by the deviator
(if any) that receives the doin from the last peer in the N-sequence.
The ﬁrst peer (which can be either a deviator or a non-deviator) of
a segment is called the head of the segment, and the last peer is
called the tail. By deﬁnition of a segment, all non-deviators on a
segment see the same doin id, and that doin id is called the doin id
of the given segment. Now consider any given pareto-optimal col-
lusion strategy α, and we will show that it satisﬁes all the properties
needed to be non-damaging.
Property 8. Non-protocol messages will always be ignored by a
non-deviator, and thus their only effect is to reduce the utility of
both the sender and the receiver of the messages. We claim that in
α no deviators will send non-protocol messages to non-deviators,
because otherwise α will be dominated by some other collusion
strategy (which avoids sending these messages).
Property 1. Consider any non-deviator A that issues a doin, and
the corresponding segment starting from A with that doin id. (Since
a deviator might issue doins on other peers’ behalf, we have not yet
proved that there is exactly one segment with that doin id. However,
even if there were multiple segments with the given doin id, exactly
one of those will start from A.)
If the tail of the segment is a non-deviator, then obviously it will
initiate a payment and cause A to execute Step 19. If the tail is a
deviator D, let D’s predecessor on the segment be B (B can be A
itself), which must be a non-deviator by the deﬁnition of a segment.
Assume by contradiction that A never executes Step 19. Then A
will never mark the doin as “paid”. In turn, the debt-link from B
to D will never be freed. The reason is that to free the debt-link, B
must receive a Release message, and then must not receive a De-
nial message within the timeout. But because the Release message
will reach A, and A will generate a Denial message immediately,
Lemma 1 tells us that B will receive the Denial message before tim-
ing out and thus will not free the debt-link from B to D. Since
the debt-link will not be freed, D will need to establish another
new debt-link. On the other hand, if we consider a second collu-
sion strategy β where D simply makes the payment properly to A,
D’s utility will be better under β than under α, since Dpay<Dlink.
This contradicts with the fact the α is pareto-optimal.
Property 2. If a non-deviator A executes Step 19 for some doin,
then we claim that the sender B (regardless of whether it is a non-
deviator or deviator) of the “pay-request” message must enable A
to complete Step 20-23. The reason is that the only effect of Step 19
is to trigger A to send the message at Step 21, which is of no use
to B unless Step 23 is completed. If B does not enable A to com-
plete Step 22 (implying that B is a deviator), then not sending the
“pay-request” message would improve B’s utility, rendering α non-
pareto-optimal.
Property 3. Similar to the proof for Property 1.
Property 4. If a non-deviator A executes Step 27, then the cor-
responding segment must end with some deviator D. This Denial
message must have been triggered by some previous Release mes-
sage from D, since all other peers on the segment are non-deviators.
Notice that the only effect of a Release message is to free debt-
links. But because A executes Step 27, by Lemma 1 none of the
debt-links will be freed. We thus claim that D would never send
the original Release message in the ﬁrst place, since otherwise not
sending the Release message would improve D’s utility and would
make α non-pareto-optimal.
Property 5. Consider any non-deviator A that holds an expired
doin. Notice that the doin issuer (as shown in the doin’s id) may be
different from the head of the corresponding segment. If the doin is-
suer is a non-deviator, then A can always complete the payment and
then propagate a Release message to its predecessor, causing the
debt-link to be freed. In particular, even if the head of the segment
is a deviator D, D would not send a Denial message. The reason
is that the only effect of sending a Denial message is to cause some
debt-links to be permanently occupied, as well as incurring some
overhead to every peer on the segment (including D itself). Since
A will never make a second payment, the only effect of causing
the debt-links to be occupied is to force the non-deviators to estab-
lish new debt-links and incur some extra debt-link establishment
overhead. This means that D’s sending the Denial message will
simply decrease the utility of some peers, including itself. Since α
is pareto-optimal, D will not do so.
If the doin issuer is a deviator D, we claim under α, D will
always accept the payment because it always improves D’s utility
if it does so. For the same reason as above, no Denial message
will be sent and A’s incoming debt-link will be freed. Finally, it
is possible for the doin issuer to be non-existent, when the head of
the segment is a deviator D. A doin has a non-existent issuer if
either the IP address in the doin’s id does not correspond to any
peer, or the peer at that IP address does not have the corresponding
private key for the public key in the doin’s id. Obviously, a doin
with a non-existent issuer cannot be paid. We claim that because
the collusion strategy α is pareto-optimal, the doin issuer will never
579be non-existent. The reason is that if it were non-existent, then D
should just replace the doin issuer with itself, and accept payment
later. This must improve D’s utility, making α non-pareto-optimal.
Properties 6 and 7. Consider any non-deviator A that relays a doin,
and consider the corresponding segment. If the tail of the segment
is a non-deviator, then the tail will attempt to pay. By Property
5, the tail will successfully make the payment and propagate a Re-
lease message backward. We have also shown above (in the proof
for Property 5) that there will not be a Denial message. Next if the
head of the segment is a non-deviator, then we have shown earlier
(for Properties 1, 2, 3, and 4) that a Release message will be propa-
gated to the head (through A), and there will be no Denial message.
The only remaining case is when the head and the tail are two
deviators D1 and D2, respectively. We ﬁrst prove that there will
not be a Denial message from D1, by enumerating two possibilities:
• If D2 did not previously propagate a Release message, then
obviously D1 would never send a Denial message. The reason
is that such message will simply be ignored, and its only effect
is to bring down the utility of D1 and D1’s successor on the
segment. Since α is pareto-optimal, D1 will not do so.
• If D2 did previously propagate a Release message on the seg-
ment, assume by contradiction that D1 sends a Denial mes-
sage to its successor B before B’s timer expires. Because all
peers on the segment, except D1 and D2, are non-deviators,
Lemma 1 tells us that all these peers will receive the Denial
message before their timers expire. Thus none of the debt-
links will be freed, and the only effect of this Denial message
is to cancel out the earlier Release message. We can now
construct a second collusion strategy β by modifying α so
that D2 does not send the initial Release message. Doing
so clearly reduces the cost bits sent/received by D1 and D2,
which would imply that α is not pareto-optimal.
Next we prove that there is a Release message from D2 to its
predecessor C on the segment, via a contradiction. If there is no
Release message, it means that D2’s incoming debt-link cannot
be freed, and D2 needs to establish a new debt-link. Consider a
second collusion strategy β where D2 makes a payment to D1 and
then propagates a Release. Compared to α, β improves the utility
of both D1 and D2, which would make α non-pareto-optimal. 2
Now we are ready to prove Theorem 2.
Proof for Theorem 2: By the deﬁnition of safety-net guarantee, we
only need to consider pareto-optimal collusion strategies. Consider
any given pareto-optimal collusion strategy α. We need to show
that a non-deviator will achieve at least as good utility under α in
the DCast execution as it would in the reference execution. We
set the reference execution such that in each round, the root sends
multicast blocks to exactly the same set of peers as in the DCast
execution. We can do this because the reference execution allows
this set of peers to be arbitrarily chosen.
We will ﬁrst prove that at the end of any round, each peer (either
non-deviator or deviator) in the DCast execution gets at least those
multicast blocks that it gets in the reference execution. We prove
via an induction on the number of deviators in the DCast execution.
The induction base for zero deviator obviously holds. Now assume
that the statement holds when the number of deviators is k. We con-
sider the scenario with k + 1 deviators, and prove the statement by
contradiction. Let r be the ﬁrst round at the end of which some peer
does not get all those blocks that it gets in the reference execution.
This peer is either a deviator or a non-deviator:
• If it is a deviator D, by the last assumption in Theorem 2, D
must get at least those multicast blocks that D would get if
D did not deviate. Thus let us consider a second DCast exe-
cution where D does not deviate and is a non-deviator. This
second execution has only k deviators. By inductive hypothe-
sis, every peer (including D) in this second DCast execution
gets at least those multicast blocks that it gets in the reference
execution. Thus in the original DCast execution with k + 1
deviators where D is a deviator, D must also get at least those
multicast blocks.
• If it is a non-deviator A, we will prove that A must have pulled
from a deviator in round r, via a simple contradiction: If A
pulled from another non-deviator B in round r, by the deﬁ-
nition of r, at the end of round r − 1, B has all those blocks
that B has in the reference execution. Thus during round r, B
must be able to propagate to A all those blocks that B propa-
gates to A in the reference execution. This would contradict
with the fact that at the end of round r, A does not get all the
blocks that A gets in the reference execution.
Thus A must have pulled from a deviator D in round r. Again
by the deﬁnition of r, at the end of round r−1, D has all those
blocks that D has in the reference execution. A always estab-
lishes enough debt-links to pull from D. Next we show that
D will always choose to propagate as many multicast blocks
as possible, via those debt-links. Consider a debt-link from D
to A, and let x denote the total number of times that this debt-
link will be used during the multicast session, if D issues or
relays doins using the debt-link whenever possible. The total
cost to D, related to this debt-link, will be the same as sending
x + Dlink multicast blocks. The corresponding total reward
will be receiving x1Dpay multicast blocks and eliminating
x2Dpay blocks of debts, where x1 and x2 are non-negative
integers and x1 + x2 = x. Next because D’s utility function
is such that it beneﬁts from sending one multicast block and
then receiving σ multicast blocks, the reward exceeds the cost
as long as (x+Dlink)·max(1, σ) < xDpay. For sufﬁciently
large x, this inequality is guaranteed by max(1, σ) < Dpay
as in Equation 1 in the theorem. Thus propagating multicast
blocks (and issuing doins) using the debt-link will increase
D’s utility. Since the collusion strategy α is pareto-optimal,
D must issue doins on the debt-link — otherwise α will be
dominated by some “better” collusion strategy.
We have now proved that at the end of any round, each peer
in the DCast execution gets at least those multicast blocks as it
would get in the reference execution. We next would like to reason
about the cost bits that a non-deviator sends/receives in the DCast
execution. First consider those multicast bits received by this non-
deviator, either directly from the root or pulled by this non-deviator
from other peers (in which case the non-deviator will pay for or
relay the corresponding doin later). Because α is pareto-optimal,
Theorem 4 tells us that it must be non-damaging. By deﬁnition
of non-damaging collusion strategies, we know that the number of
cost bits that a non-deviator sends/receives in the DCast execution
is at most Droot for each such multicast bit received (since 1 <
Dpay < Droot). Next, a non-deviator may incur further cost bits
when it issues new doins. Under a non-damaging collusion strat-
egy, every doin is paid. Thus if a non-deviator manages to issue
new doins, it will receive Dpay multicast bits for each cost bit in-
curred, or equivalently, incur 1/Dpay cost bit for each multicast
bit received. Since 1/Dpay < 1 < Dpay < Droot, this can only
increase the utility of the peer above the safety-net utility. 2
580