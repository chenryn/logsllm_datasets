    // returns d
    malloc(0x20);
    // returns c
    malloc(0x20);
    // returns b
    malloc(0x20); 
    // returns a
    malloc(0x20);
## tcache_get
正如我们之前所说的，当系统接收到了新的分配请求之后，__libc_malloc首先会检查tcache->entries[idx]中是否有符合条件的可用区块。如果有的话，tcache_get  
将会从列表头部获取区块地址。
    cmp    rbx,0x3f
    ja     0x7ffff7a840c3
    // Remove chunk at the head of the list
    mov    rsi,QWORD PTR [rdx]
    // Place its fd at the head of the list
    mov    QWORD PTR [rcx+0x40],rsi
    // --(tcache->counts[tc_idx]);
    sub    BYTE PTR [rax+rbx*1],0x1
    static void *
    tcache_get (size_t tc_idx)
    {
      tcache_entry *e = tcache->entries[tc_idx];
      assert (tc_idx entries[tc_idx] > 0);
      tcache->entries[tc_idx] = e->next;
      --(tcache->counts[tc_idx]);
      return (void *) e;
    }
gdb调试信息如下所示：
    Before:
                      gdb-peda$ x/80gx 0x602000
                          0x602000:	0x0000000000000000	0x0000000000000251
    tcache-->counts[] --> 0x602010:	0x0000000000000700	0x0000000000000000
                          0x602020:	0x0000000000000000	0x0000000000000000
                          0x602030:	0x0000000000000000	0x0000000000000000
                          0x602040:	0x0000000000000000	0x0000000000000000
                          0x602050:	0x0000000000000000	0x0000000000602380 entries[]
                          0x602060:	0x0000000000000000	0x0000000000000000
                                            ...                ...
    // returns g
    malloc(0x20);
    tcache->counts[]
       0       1       2            63
    +------++------++------+     +------+ 
    |   0  ||  6   ||  0   | ... |  0   |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
    tcache->entries[]
       0       1       2            63
    +------++------++------+     +------+ 
    | NULL ||  f   || NULL | ... | NULL |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
                |
                |
            +------+
            |  e   |
            |      |
            +------+
                |
                |
            +------+
            |  d   |
            |      |
            +------+
                |
                |
            +------+
            |  c   |
            |      |
            +------+
                |
                |
            +------+
            |  b   |
            |      |
            +------+
                |
                |
            +------+
            |  a   |
            |      |
            +------+
                |
                |
               NULL
    After:
                      gdb-peda$ x/80gx 0x602000
                          0x602000:	0x0000000000000000	0x0000000000000251
    tcache-->counts[] --> 0x602010:	0x0000000000000600	0x0000000000000000
                          0x602020:	0x0000000000000000	0x0000000000000000
                          0x602030:	0x0000000000000000	0x0000000000000000
                          0x602040:	0x0000000000000000	0x0000000000000000
                          0x602050:	0x0000000000000000	0x0000000000602350 entries[]
                          0x602060:	0x0000000000000000	0x0000000000000000
                                            ...                ...
大家可以看到，0x602380已经从列表中移除了，计数器也更新成功：
    // returns f
    malloc(0x20); 
    tcache->counts[]
       0       1       2            63
    +------++------++------+     +------+ 
    |   0  ||  5   ||  0   | ... |  0   |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
    tcache->entries[]
       0       1       2            63
    +------++------++------+     +------+ 
    | NULL ||  e   || NULL | ... | NULL |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
                |
                |
            +------+
            |  d   |
            |      |
            +------+
                |
                |
            +------+
            |  c   |
            |      |
            +------+
                |
                |
            +------+
            |  b   |
            |      |
            +------+
                |
                |
            +------+
            |  a   |
            |      |
            +------+
                |
                |
               NULL
                      gdb-peda$ x/80gx 0x602000
                          0x602000:	0x0000000000000000	0x0000000000000251
    tcache-->counts[] --> 0x602010:	0x0000000000000500	0x0000000000000000
                          0x602020:	0x0000000000000000	0x0000000000000000
                          0x602030:	0x0000000000000000	0x0000000000000000
                          0x602040:	0x0000000000000000	0x0000000000000000
                          0x602050:	0x0000000000000000	0x0000000000602320 entries[]
                          0x602060:	0x0000000000000000	0x0000000000000000
                                            ...                ...
0x602350已经从列表中被删除了，在第七次空间分配之后，tcache将会被清空，而__libc_malloc将调用_int_malloc，它将会检测fastbin数组中的可用区块。
    gdb-peda$ x/80gx 0x602000
    0x602000: 0x0000000000000000 0x0000000000000251
    tcache—>counts[] —> 0x602010: 0x0000000000000000 0x0000000000000000
    0x602020: 0x0000000000000000 0x0000000000000000
    0x602030: 0x0000000000000000 0x0000000000000000
    0x602040: 0x0000000000000000 0x0000000000000000
    0x602050: 0x0000000000000000 0x0000000000000000 entries[]
    0x602060: 0x0000000000000000 0x0000000000000000
    … …
    0x602240: 0x0000000000000000 0x0000000000000000
    0x602250: 0x0000000000000000 0x0000000000000031  0x602400 --> 0x6023d0 --> 0x6023a0 --> 0x0
    (0x40) fastbin[2]: 0x0
    (0x50) fastbin[3]: 0x0
    (0x60) fastbin[4]: 0x0
    (0x70) fastbin[5]: 0x0
    (0x80) fastbin[6]: 0x0
## _int_malloc
_int_malloc还有一个新添加的功能，如果fastbin列表中相应索引存有可用区块的话，_int_malloc将会返回fastbin列表中的第一个区块，并将fastbin列表中剩余区块存放到tcache-entries[idx]中相应的条目，前提是数组中有足够的空间（小于7）。
    static void *
    _int_malloc (mstate av, size_t bytes)
    {
    ...
    #define REMOVE_FB(fb, victim, pp)			\
      do							\
        {							\
          victim = pp;					\
          if (victim == NULL)				\
    	break;						\
        }							\
      while ((pp = catomic_compare_and_exchange_val_acq (fb, victim->fd, victim)) \
    	 != victim);					\
      if ((unsigned long) (nb) fd;
    	  else
    	    REMOVE_FB (fb, pp, victim);
              ...
    #if USE_TCACHE
    	      /* While we're here, if we see other chunks of the same size,
    		 stash them in the tcache.  */
    	      size_t tc_idx = csize2tidx (nb);
    	      if (tcache && tc_idx counts[tc_idx] fd;
    		      else
    			{
    			  REMOVE_FB (fb, pp, tc_victim);
    			  if (__glibc_unlikely (tc_victim == NULL))
    			    break;
    			}
    		      tcache_put (tc_victim, tc_idx);
    		    }
    		}
    #endif
    ...
接下来就是见证奇迹的时候了，我们希望0x602430
是由_int_malloc返回的，而剩下的数据区块仍需要在tcache->entries[idx]之中。
    /*
    	 Retrieve chunk from fastbin.
    	 The rest of the chunks (h, i, j, k) will be allocated
    	 out of their fastbin list and will be placed back into tcache->entries[idx].
    */
    malloc(0x20);
    gdb-peda$ printfastbin 
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
                      gdb-peda$ x/80gx 0x602000
                          0x602000:	0x0000000000000000	0x0000000000000251
    tcache-->counts[] --> 0x602010:	0x0000000000000300	0x0000000000000000
                          0x602020:	0x0000000000000000	0x0000000000000000
                          0x602030:	0x0000000000000000	0x0000000000000000
                          0x602040:	0x0000000000000000	0x0000000000000000
                          0x602050:	0x0000000000000000	0x00000000006023b0 entries[]
                          0x602060:	0x0000000000000000	0x0000000000000000
                                            ...                ...
    gdb-peda$ x/gx 0x00000000006023b0 next
    0x6023e0:	0x0000000000602410
    gdb-peda$ x/gx 0x0000000000602410 next
    0x602410:	0x0000000000000000
我们所有的假设现在都已经被证明是正确的了。fastbin列表已经被清空了，而相应的tcache索引也已经被剩下的fastbin区块填充满了。由于fastbin列表头部的数据会被删除，你将会发现列表尾部的区块会变成tcache->entries[idx]的头部。
## 总结
在本文中，我们对近期刚刚更新的glibc
malloc进行了简单介绍，如果你对16.x或17.04版本的实现比较熟悉的话，理解线程本地缓存这方面的内容其实也并不困难。除此之外，我们希望大家能够自己动手亲自去逆向一下堆结构的实现。最后，感谢大家的耐心阅读。