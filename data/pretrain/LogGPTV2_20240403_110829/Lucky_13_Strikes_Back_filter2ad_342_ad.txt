number of hits required. L refers to the number of
28 traces needed, so the total number of messages
would be 28 ∗ L.
7. COUNTERMEASURES
In this section we present various countermeasures that
would prevent an attacker from implementing our modiﬁed
Lucky 13 attack in a cloud environment. We ﬁrst discuss
software countermeasures, i.e, changes that can be made in
the vulnerable cryptographic libraries to avoid the Lucky 13
attack. Then, we discuss more generic countermeasures to
avoid the usage of Flush+Reload as a side channel technique
to recover information. Note that library patches are less
costly to implement than hardware based countermeasures.
On the downside, the software patches result in sub-optimal
utilization of the memory hierarchy, thus, aﬀecting the exe-
cution time performance.
Countermeasures in the cryptographic library: As
our earlier survey of the library patches has revealed, there
are two primary principles one needs to employ to securely
patch cryptographic libraries against the cross-VM Lucky 13
attack:
• Same function for valid/invalid padded cases:
The ﬁrst pitfall that should be avoided takes place
when a separate function call, e.g. a dummy function,
is made to achieve a constant time implementation.
This was part of the leakage exploited in this work
where we monitor the dummy function calls made by
another victim. In order to prevent it, a single func-
tion should be used during the entirety of the MAC
operation of the message, as well as the additionally
needed compression stages.
• Same execution ﬂow for valid/invalid padded
cases: This means that cryptographic library design-
ers should avoid using message or key dependent branches
that can leak information to an adversary monitor-
ing the execution ﬂow. Instead, logical operations like
AND or XOR operations should be used to make the
execution independent of vulnerable inputs. For in-
stance, this solution has been adopted by OpenSSL,
which calculates and always executes the maximum
number of possible compression function calls.
An example algorithm that embodies these principles is
presented in Algorithm 1. In the algorithm we are assum-
ing that the maximum length of the processed message is 64
bytes, and that hash operations take 16 bytes of plaintext
and that l is the length of the message once the padding is
removed (for both correctly and incorrectly padded cases).
The md_process function is used to perform the hash opera-
tions over all message blocks. This function puts the output
in the hash variable. However, we use l to decide whether the
output of the hash operation should be appended to the di-
gest or not, depending on whether we are processing dummy
data or the message. Note that the algorithm only uses a
single function for both the valid message and the dummy
data, thereby preventing execution ﬂow distinguishing at-
tacks. The code uniﬁes the two separate execution ﬂows.
Preventing Flush+Reload : Since our version of the Lucky 13
attack uses the Flush+Reload technique to extract timing in-
formation, any Flush+Reload countermeasure will also dis-
able our attack. Here we note a few common Flush+Reload
countermeasures.
• Disabling deduplication features: Our detection
method is based on shared memory features that are
oﬀered by VMMs. Although these features have the
advantage of signiﬁcantly saving memory, they can also
be used as a side channel to snoop sensitive information
from a co-located user. Therefore, disabling dedupli-
cation closes the covert channel necessary to perform
the attack presented in this work.
• Cache Partitioning: This countermeasure should be
performed at the hardware level, and consists in split-
ting the cache into pieces so that each user uses only
Algorithm 1: Data independent execution ﬂow for
md process
//M=Message,l=length Message without padding
Input : M,l
//Digest of M
Output: digest(M)
//Assume hash operates on a 16 byte message,
and we have a maximum length of 64
for i = 0 to 4 do
valid=(16*i/l);
md process(M[16*i]*valid + dummy data*valid,
hash);
Append(digest[i],hash*valid);
end
return digest;
a private portion of the cache. In this scenario even
when memory deduplication is enabled, an attacker
could not interfere with the victim’s data in the cache,
and would no longer be able to distinguish whether the
monitored function was used or not.
• Masking the cache loads: This is a hardware-based
countermeasure as well, where each user has a private
masking value that is used when the data is loaded
into cache and when the data being read from the
cache. Since diﬀerent users have diﬀerent masking val-
ues, even when memory deduplication is enabled, at-
tacker and victim would access the same data in mem-
ory through diﬀerent cache addresses, preventing the
attack in this work.
8. CONCLUSION
In this work we demonstrated that the Lucky 13 attack is
still a threat in the cross-VM setting for a number of promi-
nent cryptographic libraries already patched for the Lucky 13
attack. We discussed the diﬀerent approaches taken by the
major TLS libraries and showed that one class of timing
side channel countermeasure, i.e, using dummy functions
to achieve constant time execution, is vulnerable to cross-
VM Flush+Reload attacks. With practical experiments we
demonstrated that the side channel enabling Lucky 13 is still
existent in PolarSSL, GnuTLS and CyaSSL if run in a dedu-
plication enabled virtual machine.
In fact, the new cache
side channel is actually stronger, since it no longer suﬀers
from network noise, making the attack succeed with signiﬁ-
cantly fewer observations than the original Lucky 13 attack
in [16]. We also discussed how various crypto libraries ﬁxed
the Lucky 13 vulnerability in detail to better explain what
makes a crypto library vulnerable to Flush+Reload based
attacks.
In our test setting, we used the VMware ESXi with TPS
enabled. This deduplication feature enabled us to detect
dummy function calls that are implemented by the vulner-
able libraries to equalize HMAC execution time in the case
of incorrectly CBC-padded packets in TLS. Unlike in the
case of vulnerable libraries, OpenSSL, Mozilla NSS, and
MatrixSSL applied patches with a constant and padding-
independent program ﬂow to ﬁx the Lucky 13 vulnerability.
Libraries ﬁxed this way are secure against the described at-
tack.
With this study we showed that crypto library designers
and authors should be careful about not implementing any
data dependent execution paths and ensure true constant
execution time. We conclude that, any function or process
in a crypto library whose execution depends on the input
data is exploitable by cache side-channel attacks and that
libraries should be implemented accordingly.
9. ACKNOWLEDGMENTS
This work is supported by the National Science Foun-
dation, under grant CNS-1318919 and CNS-1314770. We
would like to thank the anonymous reviewers of AsiaCCS
2015 for their helpful comments. We would also like to thank
Craig Shue for his help on understanding memory dedupli-
cation features.
10. REFERENCES
[1] CyaSSL: Embedded SSL library WolfSSL.
http://www.wolfssl.com/yaSSL/Home.html, May
2014.
[2] Kernel samepage merging.
http://kernelnewbies.org/Linux_2_6_32\
#head-d3f32e41df508090810388a57efce73f52660ccb/,
April 2014.
[3] MatrixSSL: Open source embedded SSL. May 2014.
[4] Acı˙I¸cmez, O. Yet another microarchitectural attack:
Exploiting i-cache. In Proceedings of the 2007 ACM
Workshop on Computer Security Architecture (New
York, NY, USA, 2007), CSAW ’07, ACM, pp. 11–18.
[5] AlFardan, N. J., Bernstein, D. J., Patterson,
K. G., Poettering, B., and Schuldt, J. C. N. On
the Security of RC4 in TLS. In 22nd USENIX
Security Symposium (2013).
[6] Arcangeli, A., Eidus, I., and Wright, C.
Increasing memory density by using KSM. In
Proceedings of the Linux symposium (2009), pp. 19–28.
[7] Bard, G. A challenging but feasible
blockwise-adaptive chosen-plaintext attack on SSL. In
SECRYPT (2006), pp. 99–109.
[8] Bard, G. V. The vulnerability of SSL to chosen
plaintext attack. IACR Cryptology ePrint Archive
2004:111, 2004.
[9] Bardou, R., Focardi, R., Kawamoto, Y.,
Simionato, L., Steel, G., and Tsay, J.-K. Eﬃcient
padding oracle attacks on cryptographic hardware. In
CRYPTO (2012), R. Safavi-Naini and R. Canetti,
Eds., vol. 7417 of Lecture Notes in Computer Science,
Springer, pp. 608–625.
[10] Benger, N., van de Pol, J., Smart, N. P., and
Yarom, Y. ”ooh aah... just a little bit”: A small
amount of side channel can go a long way. In CHES
(2014), pp. 75–92.
[11] Bernstein, D. J. Cache-timing attacks on AES, 2004.
URL: http://cr.yp.to/papers.html#cachetiming.
[12] Bonneau, J. Robust Final-Round Cache-Trace
Attacks against AES.
[13] Bonneau, J., and Mironov, I. Cache-Collision
Timing Attacks against AES. In Cryptographic
Hardware and Embedded Systems—CHES 2006
(2006), vol. 4249 of Springer LNCS, Springer,
pp. 201–215.
[14] Chen Cai-Sen, Wang Tao, C. X.-C., and Ping, Z.
An improved trace driven instruction cache timing
attack on RSA. Cryptology ePrint Archive, Report
2011/557, 2011. http://eprint.iacr.org/.
[15] Duong, T., and Rizzo, J. Here come the XOR
ninjas.
[16] Fardan, N. J. A., and Paterson, K. G. Lucky
Thirteen: Breaking the TLS and DTLS Record
Protocols. In Security and Privacy (SP), 2013 IEEE
Symposium on (May 2013), pp. 526–540.
[17] Goodin, D. Hackers break SSL encryption used by
millions of sites. http://www.theregister.co.uk/
2011/09/19/beast_exploits_paypal_ssl/, 2011.
[18] Gullasch, D., Bangerter, E., and Krenn, S.
Cache Games – Bringing Access-Based Cache Attacks
on AES to Practice. IEEE Symposium on Security and
Privacy 0 (2011), 490–505.
[19] Gullasch, D., Bangerter, E., and Krenn, S.
Cache Games – Bringing Access-Based Cache Attacks
on AES to Practice. In Proceedings of the 2011 IEEE
Symposium on Security and Privacy (Washington,
DC, USA, 2011), SP ’11, IEEE Computer Society,
pp. 490–505.
[20] Hu, W.-M. Lattice scheduling and covert channels. In
Proceedings of the 1992 IEEE Symposium on Security
and Privacy (Washington, DC, USA, 1992), SP ’92,
IEEE Computer Society, pp. 52–.
[21] Irazoqui, G., ˙Inc˙I, M. S., Eisenbarth, T., and
Sunar, B. Fine grain Cross-VM Attacks on Xen and
VMware are possible. preprint available at
http://ecewp.ece.wpi.edu/wordpress/vernam/
files/2014/04/main.pdf.
[22] Jones, M. T. Anatomy of Linux kernel shared
memory. http://www.ibm.com/developerworks/
linux/library/l-kernel-shared-memory/
l-kernel-shared-memory-pdf.pdf/, April 2010.
[23] Kelsey, J., Schneier, B., Wagner, D., and Hall,
C. Side channel cryptanalysis of product ciphers. In
Computer Security˚UESORICS 98. Springer, 1998,
pp. 97–110.
[24] Mavrogiannopoulos, N., and Josefsson, S.
GnuTLS: The GnuTLS Transport Layer Security
Library. May 2014.
[25] Moeller, B. Security of CBC ciphersuites in
SSL/TLS: Problems and countermeasures.
http://www.openssl.org/?bodo/tls-cbc.txt, April
2004.
[26] Mozilla. Mozilla NSS: Network security services.
May 2014.
[27] Osvik, D. A., Shamir, A., and Tromer, E. Cache
Attacks and Countermeasures: The Case of AES. In
Proceedings of the 2006 The Cryptographers’ Track at
the RSA Conference on Topics in Cryptology (Berlin,
Heidelberg, 2006), CT-RSA’06, Springer-Verlag,
pp. 1–20.
[28] Page, D. Theoretical Use of Cache Memory as a
Cryptanalytic Side-Channel, 2002.
[29] Paterson, K. G., Ristenpart, T., and Shrimpton,
T. Tag size does matter: Attacks and proofs for the
TLS record protocol. In Advances in
Cryptology–ASIACRYPT 2011. Springer Berlin
Heidelberg, 2011, pp. 372–389.
[30] PolarSSL. PolarSSL: Straightforward,secure
[38] Vaudenay, S. Security Flaws Induced by CBC
communication. www.polarssl.org.
[31] Ristenpart, T., Tromer, E., Shacham, H., and
Savage, S. Hey, you, get oﬀ of my cloud: Exploring
information leakage in third-party compute clouds. In
Proceedings of the 16th ACM Conference on Computer
and Communications Security (New York, NY, USA,
2009), CCS ’09, ACM, pp. 199–212.
[32] Rogaway, P. Problems with proposed IP
cryptography.
http://www.cs.ucdavis.edu/?rogaway/papers/
draft-rogaway-ipsec-comments-00.txt, 1995.
[33] Suzaki, K., Iijima, K., Yagi, T., and Artho, C.
Memory deduplication as a threat to the guest OS. In
Proceedings of the Fourth European Workshop on
System Security (2011), ACM, p. 1.
[34] Suzaki, K., Iijima, K., Yagi, T., and Artho, C.
Software side channel attack on memory
deduplication. SOSP POSTER (2011).
[35] The OpenSSL Project. OpenSSL: The open source
toolkit for SSL/TLS. www.openssl.org, April 2003.
[36] Tromer, E., Osvik, D., and Shamir, A. Eﬃcient
Cache Attacks on AES, and Countermeasures. Journal
of Cryptology 23, 1 (2010), 37–71.
[37] Tsunoo, Y., Saito, T., Suzaki, T., and Shigeri,
M. Cryptanalysis of DES implemented on computers
with cache. In Proc. of CHES 2003, Springer LNCS
(2003), Springer-Verlag, pp. 62–76.
Padding - Applications to SSL, IPSEC, WTLS. In
Proceedings of In Advances in Cryptology -
EUROCRYPT’02 (2002), Springer-Verlag,
pp. 534–546.
[39] VMWare. Understanding Memory Resource
Management in VMware vSphere 5.0.
http://www.vmware.com/files/pdf/mem_mgmt_perf_
vsphere5.pdf.
[40] Waldspurger, C. A. Memory resource management
in VMware ESX server. ACM SIGOPS Operating
Systems Review 36, SI (2002), 181–194.
[41] Yarom, Y., and Falkner, K. Flush+reload: A high
resolution, low noise, L3 cache side-channel attack. In
23rd USENIX Security Symposium (USENIX Security
14) (San Diego, CA, Aug. 2014), USENIX
Association, pp. 719–732.
[42] Zhang, Y., Juels, A., Reiter, M. K., and
Ristenpart, T. Cross-VM side channels and their use
to extract private keys. In Proceedings of the 2012
ACM Conference on Computer and Communications
Security (New York, NY, USA, 2012), CCS ’12, ACM,
pp. 305–316.