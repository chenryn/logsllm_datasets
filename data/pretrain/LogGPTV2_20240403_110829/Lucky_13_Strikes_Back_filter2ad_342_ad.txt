### Number of Hits Required
- \( L \) refers to the number of traces needed.
- The total number of messages would be \( 28 \times L \).

### 7. Countermeasures
In this section, we present various countermeasures that can prevent an attacker from implementing our modified Lucky 13 attack in a cloud environment. We first discuss software countermeasures, which involve changes that can be made in vulnerable cryptographic libraries to avoid the Lucky 13 attack. Then, we discuss more generic countermeasures to prevent the usage of Flush+Reload as a side-channel technique for information recovery. It is important to note that library patches are generally less costly to implement than hardware-based countermeasures. However, software patches can result in sub-optimal utilization of the memory hierarchy, thereby affecting execution time performance.

#### Countermeasures in the Cryptographic Library
As our earlier survey of library patches has revealed, there are two primary principles that need to be employed to securely patch cryptographic libraries against the cross-VM Lucky 13 attack:

1. **Same Function for Valid/Invalid Padded Cases:**
   - The first pitfall to avoid is using separate function calls (e.g., a dummy function) to achieve constant-time implementation. This was part of the leakage exploited in our work, where we monitored the dummy function calls made by another victim. To prevent this, a single function should be used throughout the MAC operation of the message and any additional compression stages.

2. **Same Execution Flow for Valid/Invalid Padded Cases:**
   - This means that cryptographic library designers should avoid using message or key-dependent branches that can leak information to an adversary monitoring the execution flow. Instead, logical operations like AND or XOR should be used to make the execution independent of vulnerable inputs. For example, OpenSSL calculates and always executes the maximum number of possible compression function calls, ensuring a consistent execution flow.

An example algorithm that embodies these principles is presented in Algorithm 1. In this algorithm, we assume that the maximum length of the processed message is 64 bytes, and hash operations take 16 bytes of plaintext. \( l \) is the length of the message once the padding is removed (for both correctly and incorrectly padded cases). The `md_process` function is used to perform the hash operations over all message blocks, and the output is placed in the `hash` variable. We use \( l \) to decide whether the output of the hash operation should be appended to the digest, depending on whether we are processing dummy data or the actual message. Note that the algorithm uses a single function for both valid and dummy data, thereby preventing execution flow distinguishing attacks.

**Algorithm 1: Data-Independent Execution Flow for md_process**
```plaintext
Input: M (Message), l (Length of Message without Padding)
Output: digest(M)

// Assume hash operates on a 16-byte message, and we have a maximum length of 64
for i = 0 to 4 do
    valid = (16 * i <= l);
    md_process(M[16*i] * valid + dummy_data * (1 - valid), hash);
    Append(digest[i], hash * valid);
end
return digest;
```

#### Preventing Flush+Reload
Since our version of the Lucky 13 attack uses the Flush+Reload technique to extract timing information, any Flush+Reload countermeasure will also disable our attack. Here are a few common Flush+Reload countermeasures:

1. **Disabling Deduplication Features:**
   - Our detection method is based on shared memory features offered by VMMs. Although these features significantly save memory, they can also be used as a side channel to snoop sensitive information from a co-located user. Disabling deduplication closes the covert channel necessary to perform the attack.

2. **Cache Partitioning:**
   - This countermeasure should be performed at the hardware level and involves splitting the cache into pieces so that each user uses only a private portion of the cache. Even when memory deduplication is enabled, an attacker could not interfere with the victim’s data in the cache and would no longer be able to distinguish whether the monitored function was used or not.

3. **Masking the Cache Loads:**
   - This is another hardware-based countermeasure where each user has a private masking value that is used when data is loaded into the cache and when data is read from the cache. Since different users have different masking values, even when memory deduplication is enabled, the attacker and victim would access the same data in memory through different cache addresses, preventing the attack.

### 8. Conclusion
In this work, we demonstrated that the Lucky 13 attack remains a threat in the cross-VM setting for several prominent cryptographic libraries that were already patched for the Lucky 13 attack. We discussed the different approaches taken by major TLS libraries and showed that one class of timing side-channel countermeasure—using dummy functions to achieve constant-time execution—is vulnerable to cross-VM Flush+Reload attacks. With practical experiments, we demonstrated that the side channel enabling Lucky 13 still exists in PolarSSL, GnuTLS, and CyaSSL if run in a deduplication-enabled virtual machine.

In fact, the new cache side channel is stronger because it no longer suffers from network noise, making the attack succeed with significantly fewer observations than the original Lucky 13 attack. We also discussed how various crypto libraries fixed the Lucky 13 vulnerability in detail to better explain what makes a crypto library vulnerable to Flush+Reload-based attacks.

In our test setting, we used VMware ESXi with TPS enabled. This deduplication feature allowed us to detect dummy function calls implemented by vulnerable libraries to equalize HMAC execution time in the case of incorrectly CBC-padded packets in TLS. Unlike in the case of vulnerable libraries, OpenSSL, Mozilla NSS, and MatrixSSL applied patches with a constant and padding-independent program flow to fix the Lucky 13 vulnerability. Libraries fixed this way are secure against the described attack.

With this study, we showed that crypto library designers and authors should be careful about not implementing any data-dependent execution paths and ensure true constant execution time. We conclude that any function or process in a crypto library whose execution depends on input data is exploitable by cache side-channel attacks, and libraries should be implemented accordingly.

### 9. Acknowledgments
This work is supported by the National Science Foundation under grants CNS-1318919 and CNS-1314770. We would like to thank the anonymous reviewers of AsiaCCS 2015 for their helpful comments. We would also like to thank Craig Shue for his help in understanding memory deduplication features.

### 10. References
[References remain unchanged and are formatted as provided.]

This optimized text is now more clear, coherent, and professional.