### Optimized Text

#### Graph Construction and Policy Compliance
The constructed system policy \( P \) includes copies of sets \( S \), \( H \), and \( L \), with directed edges from each vertex in \( H \) to each vertex in \( S \), and from each vertex in \( S \) to each vertex in \( L \). The system policy \( P \) corresponds to the deployment of the program policy \( P \) on the system \( S \).

**Theorem 4.1.** Assume that for all vertices \( v \in V(P) \), \( \text{Conf}(\text{Type}(v)) = \text{Conf}(\bot) \). Given a test policy \( P \) and a target policy \( S \), if for all \( u \in H \) and \( v \in L \), there is no edge \( (v, u) \in P \), then the test policy \( P \) is compliant with the constructed system policy \( P \).

Given this construction, the only illegal flow that can exist in \( P \) is from a vertex \( v \in L \) (with a low integrity label) to a vertex \( u \in H \) (with a high integrity label). By definition, the graph \( S \) is compliant with \( P \), and the added edges between subgraphs (from \( H \) to \( S \) and from \( S \) to \( L \)) do not upgrade integrity.

We argue that the PIDSI (Policy-Driven Integrity and Security Integration) approach aligns with the classical security models' view of information flows in trusted programs. For example, MLS (Multi-Level Security) guards are trusted to downgrade data secrecy securely without lowering the integrity of the downgraded data. Therefore, the integrity of an MLS guard must exceed the integrity of the system data it processes.

In the Clark-Wilson integrity model, only trusted transformation procedures (TPs) are allowed to modify high-integrity data. These TPs must be certified to perform such modifications securely, making them analogous to our notion of trusted programs. Similarly, other trusted programs, such as assured pipelines, also have a similar relationship with the data they process.

#### PIDSI in Practice
This section describes how we use the PIDSI approach to construct the two policy compliance problems defined in Section 3 for SELinux trusted programs. Our proposed mechanism for checking compliance during system deployment is illustrated in Figure 1. Here, we provide the specifics of how this procedure works during the installation of logrotate.

**Figure 4: Logrotate Instantiation for Policy Compliance Problems**
1. **Program Policy and Information-Flow Goals**: The program policy is derived using the PIDSI approach, and the SELinux MLS policy forms the system's information flow goals.
2. **System Policy and Tamperproof Goals**: The system policy is combined with the logrotate SELinux policy module, and the tamperproof goals are derived from the logrotate Linux package.

For testing compliance against system security goals, we use the PIDSI approach to construct the logrotate program policy and the SELinux/MLS policy for the system security goals. For tamperproof goal compliance, we use the SELinux/MLS policy that includes the logrotate policy module for the system policy and construct the tamperproof goal policy from the logrotate package.

**System Security Goal Compliance**
To ensure compliance with system security goals, we must show that the program policy only permits information flows allowed by the system security goal policy. We use the PIDSI approach to construct the program policy. For the Jif version of logrotate, this involves collecting types (labels) from its SELinux policy module and composing a Jif policy lattice where these labels have higher integrity and lower secrecy than the system labels. Instead of adding each system label to the program policy, we use a single label as a template to represent all SELinux/MLS labels. The SELinux/MLS policy serves as the security goal policy, clearly representing the system requirements. To verify compliance, we must show that there are no information flows from system labels to program labels, a problem addressed in previous work [13].

**Tamperproof Goal Compliance**
For tamperproof goal compliance, we must show that the system policy only permits information flows authorized by the tamperproof goal policy. The system policy includes the logrotate policy module, defining the system information flows impacting the trusted program. The tamperproof policy is generated from the logrotate package and its SELinux policy module. The logrotate package identifies the labels of files used in the program. In addition to these labels, any new labels defined by the logrotate policy module (excluding process labels, which are protected differently) are added to the tamperproof policy. The idea is that these labels should not be modifiable by untrusted programs. Unlike security goal compliance, the practicality of tamperproof compliance is clear. It may be that system policies permit many subjects to modify program objects, making compliance impossible. Additionally, automatically deriving tamperproof goal policies can be challenging. In Section 5, we detail how we construct tamperproof policies and test compliance, examining whether tamperproof compliance is likely to be satisfied in practice.

#### Verifying Compliance in SELinux
This section evaluates the PIDSI approach against actual trusted programs in the SELinux/MLS system. We aim to determine whether it is possible to automatically generate tamperproof goal policies and whether systems are likely to comply with such policies.

**5.1 Tamperproof Compliance**
To demonstrate how tamperproof compliance can be checked, we develop a method for the logrotate program on a Linux 2.6 system with a SELinux/MLS strict reference policy. We construct representations of the system (SELinux/MLS) policy and the program's tamperproof goal policy. Recall from Section 3 that all information flows in the system policy must be authorized by the tamperproof goal policy for compliance.

**5.1.1 Build the Tamperproof Goal Policy**
To build the tamperproof goal policy, we create an information-flow graph relating program labels to system labels according to the PIDSI approach. This involves the following steps:

1. **Find High-Integrity Program Labels**: Collect all labels associated with the program's files, as these will be high-integrity per the PIDSI approach. These labels are a union of the package file labels determined by the file contexts (.fc file in the SELinux policy module and the system file context) and the newly-defined labels in the policy module itself. For example, the logrotate package includes the files listed in Table 1, which shows the labels assigned to each file, whether the label is a program or system label, and the result of the tamperproof compliance check.

2. **Identify Trusted Subjects**: Trusted subjects are SELinux subjects with write permissions to trusted programs. Based on our experience, we identify seven trusted subjects: dpkg script t, dpkg t, portage t, rpm script t, rpm t, sysadm t, prelink t. These subjects represent package managers and system administrators, who must be authorized to modify trusted programs. These subjects are also trusted by other programs.

3. **Add Information Flow Edges**: Add edges between vertices (labels) in the tamperproof goal information-flow graph based on the PIDSI approach. Program labels can read and write each other, but only trusted subjects can write to program labels. Other SELinux labels are restricted to reading program labels only. Figure 5 illustrates a tamperproof goal policy's information-flow graph, showing that only trusted labels (dotted circles) can write to program labels (solid line circles).

**5.1.2 Build the System Policy**
The system policy is represented as an information-flow graph. Building this graph involves the following steps:

1. **Create an Information-Flow Graph**: Convert the current SELinux/MLS policy into an information-flow graph, where each label is a vertex. Information-flow edges are created by identifying read-like and write-like permissions for subject labels to object labels.

2. **Add Logrotate Program's Information Flow Vertices and Edges**: Based on the logrotate SELinux policy module, add the program's information flow vertices and edges.

3. **Remove Unnecessary Edges**: Remove edges where neither vertex is in the tamperproof goal policy.

**Example of Information-Flow Graph Construction**
The following example illustrates the process of creating a small part of the graph. Rules 1-3 and 6 are system rules, while rules 4-5 are module rules (defined in the logrotate policy module).

1. ...
2. ...

By following these steps, we can effectively evaluate and ensure compliance with both system security and tamperproof goals for trusted programs in the SELinux/MLS system.