contains copies of S, H, L, with edges from each vertex
in H to each vertex in S, and edges from each vertex in
S to L. The constructed system policy P  corresponds to
the deployment of the program policy P on the system
S.
for all
V (P ),
Theorem 4.1. Assume
Conf(Type(v)) = Conf(⊥). Given test policy P
and target policy S, if for all u ∈ H, v ∈ L, there is no
edge (v, u) ∈ P , then the test policy P is compliant with
the constructed system policy P .
v
∈
Given the construction, the only illegal ﬂow that can
exist in P  is from a vertex v ∈ L, which has a low in-
tegrity label, to one of the vertices u ∈ H, which has a
high integrity label. The graph S is compliant with P 
by deﬁnition, and the edges that we add between sub-
graphs are from H to S and S to L: these do not upgrade
integrity.
We argue that the PIDSI approach is consistent with
the view of information ﬂows in the trusted programs of
classical security models. For example, MLS guards are
trusted to downgrade the secrecy of data securely. Since
an MLS guard must not lower the integrity of any down-
graded data, it is reasonable to assume that the integrity
of an MLS guard must exceed the system data that it pro-
cesses.
In the Clark-Wilson integrity model [7], only
trusted transformation procedures (TPs) are permitted
to modify high integrity data. In this model, TPs must
be certiﬁed to perform such high integrity modiﬁcations
securely. Thus, they also correspond to our notion of
trusted programs. We ﬁnd that other trusted programs,
such as assured pipelines [5], also have a similar rela-
tionship to the data that they process.
4.2 PIDSI in Practice
In this section, we describe how we use the PIDSI ap-
proach to construct the two policy compliance prob-
lems deﬁned in Section 3 for SELinux trusted pro-
grams. Our proposed mechanism for checking compli-
ance of a trusted program during system deployment
was presented in Figure 1: we now give the speciﬁcs
how this procedure would work during an installation of
PIDSI combination of the 
logrotate Policy 
with the SELinux Policy
SELinux MLS Policy
Program
Policy
Information-
Flow Goals
Complies with?
System
Policy
Tamperproof
Goals
Complies with?
SELinux Policy
with the logrotate
Policy Module
From logrotate
Package and SELinux Policy Module
(see Section 5)
Figure 4: logrotate instantiation for the two policy
compliance problems: (1) the program policy is derived
using the PIDSI approach and the SELinux MLS pol-
icy forms the system’s information ﬂow goals and (2)
the system policy is combined with the logrotate
SELinux policy module and the tamperprooﬁng goals
are derived from the logrotate Linux package.
logrotate. Figure 4 shows how we construct both
problems for logrotate on an SELinux/MLS system.
For testing compliance against the system security goals,
we use the PIDSI approach to construct the logrotate
program policy and use the SELinux/MLS policy for the
system security goals. For testing compliance against
the tamperproof goals, we use the SELinux/MLS pol-
icy that includes the logrotate policy module for the
system policy and we construct the tamperproof goal pol-
icy from the logrotate package. We argue why these
constructions are satisfactory for deploying trusted pro-
grams, using logrotate on SELinux/MLS as an ex-
ample.
For system security goal compliance, we must show
that the program policy only permits information ﬂows
in the system security goal policy. We use the PIDSI
approach to construct the program policy as described
above. For the Jif version of logrotate, this en-
tails collecting the types (labels) from its SELinux policy
module, and composing a Jif policy lattice where these
Jif version of these labels are higher integrity (and lower
secrecy) than the system labels. Rather than adding each
system label to the program policy, we use a single la-
bel as a template to represent all of the SELinux/MLS
labels [13]. We use the SELinux/MLS policy for the
security goal policy. This policy clearly represents the
requirements of the system, and logrotate adds no
additional system requirements. While some trusted pro-
grams may embody additional requirements that the sys-
tem must uphold (e.g., for individual users), this is not
the case for logrotate. As a result, to verify compli-
ance we must show that there are no information ﬂows in
USENIX Association  
17th USENIX Security Symposium 
327
the program policy from system labels to program labels,
a problem addressed by previous work [13].
For tamperproof goal compliance, we must show that
the system policy only permits information ﬂows that
are authorized in the tamperproof goal policy. The sys-
tem policy includes the logrotate policy module, as
the combination deﬁnes the system information ﬂows
that impact the trusted program. The tamperproof pol-
icy is generated from the logrotate package and its
SELinux policy module. The logrotate package
identiﬁes the labels of ﬁles used in the logrotate program.
In addition to these labels, any new labels deﬁned by
the logrotate policy module, excepting process la-
bels which are protected differently as described in Sec-
tion 2.2, are also added to the tamperproof policy. The
idea is that these labels may not be modiﬁed by untrusted
programs. That is, untrusted process labels may not have
any kind of write permission to the logrotate labels.
Unlike security goal compliance, the practicality of tam-
perproof compliance is clear. It may be that system poli-
cies permit many subjects to modify program objects,
thus making it impossible to achieve such compliance.
Also, it may be difﬁcult to correctly derive tamperproof
goal policies automatically. In Section 5, we show pre-
cisely how we construct tamperproof policies and test
compliance, and examine whether tamperproof compli-
ance, as we have deﬁned it here, is likely to be satisﬁed
in practice.
5 Verifying Compliance in SELinux
In this section, we evaluate the PIDSI approach against
actual trusted programs in the SELinux/MLS system.
As we discussed in Section 4.2, we want to determine
whether it is possible to automatically determine tam-
perproof goal policies and whether systems are likely
to comply with such policies.
First, we deﬁne a
method for generating tamperproof goal policies auto-
matically and show how compliance is evaluated for the
logrotate program. Then, we examine whether eight
other SELinux trusted programs meet satisfy tamper-
proof compliance as well. This group of programs was
selected because: (1) they are considered MLS-trusted
in SELinux and (2) these programs have Linux packages
and SELinux policy modules. Our evaluation ﬁnds that
there are only 3 classes of exceptions that result from our
compliance checking for all of these evaluated packages.
We identify straightforward resolutions for each of these
exceptions. As a result, we ﬁnd that the PIDSI approach
appears promising for trusted programs in practice.
5.1 Tamperproof Compliance
To show how tamperproof compliance can be checked,
we develop a method in detail for the logrotate pro-
gram on a Linux 2.6 system with a SELinux/MLS strict
reference policy. To implement compliance checking
with the tamperproof goals, we construct representations
of the system (SELinux/MLS) policy and the program’s
tamperproof goal policy. Recall from Section 3 that all
the information ﬂows in the system policy must be au-
thorized by the tamperproof goal policy for the policy to
comply.
5.1.1 Build the Tamperproof Goal Policy
To build the tamperproof goal policy, we build an
information-ﬂow graph that relates the program labels to
system labels according to the PIDSI approach. Building
this graph consists of the following steps:
1. Find the high integrity program labels.
2. Identify the trusted system subjects.
3. Add information ﬂow edges between the program
labels, trusted subject labels, and remaining (un-
trusted) SELinux/MLS labels authorized by the
PIDSI approach.
Find the high integrity program labels. This step en-
tails collecting all the labels associated with the pro-
gram’s ﬁles, as these will all be high integrity per the
PIDSI approach. These labels are a union of the pack-
age ﬁle labels determined by the ﬁle contexts (.fc ﬁle
in the SELinux policy module and the system ﬁle con-
text) and the newly-deﬁned labels in the policy module
itself. First, the logrotate package includes the ﬁles
indicated in Table 1. This table presents lists a set of
ﬁles, the label assigned to each, whether such label is
a program label (i.e., deﬁned by the program’s policy
module) or a system label, and the result of the tamper-
proof compliance check, described below. Second, some
program ﬁles may be generated after the package is in-
stalled. These will be assigned new labels deﬁned in the
program policy module. An example of a logrotate
label that will be assigned to a ﬁle that is not included
in the package is logrotate lock t. In Section 6,
we discuss other system ﬁles that a trusted program may
depend upon.
Identify trusted subjects. Trusted subjects
are
SELinux subjects that are entrusted with write permis-
sions to trusted programs. Based on our experience
in analyzing SELinux/MLS, we identify the following
seven trusted subjects: dpkg script t, dpkg t,
portage t, rpm script t, rpm t, sysadm t,
prelink t. These labels represent package managers
and system administrators; package managers and
system administrators must be authorized to modify
trusted programs. These subjects are also trusted by
programs other than logrotate. We would want to
control what code is permitted to run as these labels, but
that is outside the scope of our current controls.
328 
17th USENIX Security Symposium 
USENIX Association
File
/etc/logrotate.conf
/etc/logrotate.d
/usr/sbin/logrotate
/usr/share/doc/logrotate/CHANGES
/usr/share/man/logrotate.gz
/var/lib/logrotate.status
etc t
etc t
SELinux Type
Policy Writers
system
system
module
system
system
logrotate var lib t module
logrotate exec t
18
18
8
7
8
8
usr t
man t
Exceptions
integrity
integrity
no
no
no
no
Table 1: logrotate Compliance Test Case and Results: there are two exceptions, but they originate from the same
system label etc t.
dpkg_
script_t
rpm_
script_t
dpkg_t
usr_t
etc_t
man_t
portage_
t
rpm_t
prelink_t
sysadm_
t
logrotate
_var_lib
_t
logrotate
_exec_t
Part of
Figure 5:
the tamperproof goal policy’s
information-ﬂow graph for logrotate. Only trusted
labels (dotted line circles) and the program labels them-
selves are allowed to write to ﬁles with the program
labels (solid line circles), which represent the high-
integrity ﬁles according to the PIDSI approach. Not
shown: edges from the trusted subjects to each of the
program labels to the the right.
Add information ﬂow edges. This step involves
adding edges between vertices (labels) in the tamper-
proof goal information-ﬂow graph based on the PIDSI
approach. The PIDSI approach allows program labels
to read and write each other, but the only SELinux/MLS
labels that may write program labels are the trusted sub-
jects (and read as well). Other SELinux labels are re-
stricted to reading the program labels only. Figure 5
presents an example of a tamperproof goal policy’s
information-ﬂow graph. Notice that only the system
trusted labels (dotted circles) are allowed to write to pro-
gram labels (solid line circles). The application has high
integrity requirements for etc t; the graph therefore in-
cludes edges that represent these requirements. The same
set of edges are also added for the other program labels
(presented to the right in the ﬁgure).
5.1.2 Build the System Policy
The system policy is represented as an information-ﬂow
graph (see Section 3). Building this graph consists of the
following steps:
1. Create an information-ﬂow graph that represents the
current SELinux/MLS policy.
2. Add logrotate program’s information ﬂow ver-
tices and edges based on its SELinux policy mod-
ule.
3. Remove edges where neither vertex is in the tam-
perproof goal policy.
Create an information ﬂow graph. We convert the
current SELinux/MLS policy into an information-ﬂow
graph. Each of the labels in the SELinux/MLS policies
is converted to a vertex.
Information-ﬂow edges are
created by identifying read-like and write-like permis-
sions [10, 29] for subject labels to objects labels. The
following example illustrates the process we follow to
create a small part of the graph. Rules 1-3 and 6 are
system rules, rules 4-5 are module rules (deﬁned in the
logrotate policy module).
1.
2.