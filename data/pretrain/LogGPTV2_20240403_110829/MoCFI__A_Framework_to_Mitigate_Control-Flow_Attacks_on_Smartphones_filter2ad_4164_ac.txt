generic message handling function objc_msgSend. The
name of the actual method (called selector) is given as a
parameter. Consequently, we must track these parameters
in the CFG generation phase and include them in the CFG.
Otherwise, an adversary might mount an attack by modi-
fying the method parameters of objc_msgSend, thus di-
verting the control-ﬂow to an invalid method. We built upon
Most UNIX-based operating systems support the in-
jection of libraries by providing the environment variable
LD_PRELOAD that is checked by the OS loader upon ini-
tialization of each new process. The loader ensures that the
library is loaded before any other dependency of the ac-
tual program binary.
iOS provides an analogous method
through the DYLD_INSERT_ LIBRARIES environment
variable [6]. Setting this variable to point to MoCFI enables
us to transparently instrument arbitrary applications. To
force loading MoCFI into every application started though
the touchscreen, we only need to set this environment vari-
able for the SpringBoard process.
We stress that MoCFI is initialized before any other de-
pendency of the program and after the signature of the ap-
plication was veriﬁed (i.e., the program binary itself is unal-
tered). Subsequently, MoCFI implements the CFI enforce-
ment by rewriting the code of the application in memory.
We call this part of MoCFI the load-time module in con-
trast to the runtime module, which holds the actual valida-
tion checks. The load-time module makes sure that all rele-
vant control-ﬂow instructions are diverted to a correspond-
ing validation routines in MoCFI. If validation succeeds,
execution continues at the desired branch location.
5.2.1. Load-Time Module: Binary Rewriting
Upon initialization of MoCFI, the load-time module ﬁrst
locates the correct patchﬁle. Afterwards, it rewrites the
binary according to the information stored in the patch-
ﬁle. Since Apple iOS enforces W ⊕ X, code cannot be
writable in memory. Therefore, the code pages must be
set to writable (but not executable) ﬁrst. This is usually
accomplished using the POSIX-compliant mprotect sys-
tem call. Our experiments revealed that iOS does not al-
low the code pages to be changed at all (mprotect re-
turns a permission denied error). However, this problem
can be overcome by re-mapping the corresponding memory
areas with mmap [7] ﬁrst. When all relevant instructions
of a page are patched, the page permissions are set back
to executable but not writable. Note that the presence of
mmap does not give an adversary the opportunity to subvert
MoCFI by overwriting code. In order to do so, he would
have to mount an attack beforehand that would inherently
violate CFI at some point, which in turn would be detected
by MoCFI.
Trampolines. Our binary rewriting engine overwrites the
relevant control-ﬂow instructions with the so-called dis-
Figure 3. Trampoline approach
patcher instructions. The dispatcher redirects the program
ﬂow to a short piece of assembler code, namely to the tram-
poline, which in turn transfers the execution to our MoCFI
library (see Figure 3). Hence, the trampolines are used as
bridges between the application we aim to protect and our
MoCFI library.
Speciﬁcally, we allocate dedicated trampolines for each
indirect branch (i.e., indirect jumps / calls and returns), one
generic trampoline for direct internal function calls (i.e.,
calls within the same code segment), and one generic tram-
poline for external function calls. Two example trampo-
lines are shown in Figure 3: the ﬁrst one (Trampoline 1) is
used for a return instruction, while the second one (Internal
Call Trampoline) handles a (direct) internal function call. In
general, each trampoline saves the current execution state,
invokes the appropriate MoCFI validation routine, resets the
execution state, and issues the original branch. Due to the
last step, we ensure that all registers are loaded correctly,
even if the branch loads several registers as a side-effect,
e.g., the replaced return POP {R4-R7,PC} is copied by
our load-time module at the end of Trampoline 1. Hence,
we ensure that r4 to r7 are correctly loaded with values
from the stack before the return address is loaded to pc.
Note that, depending on the replaced branch instruction,
we allocate a THUMB or ARM trampoline to ensure the
correct interworking between the two instruction sets. In the
following, we present the different kinds of dispatcher in-
structions our solution utilizes. The speciﬁc implementation
of the different ARM/THUMB trampolines is described in
Appendix A.
ARM (32 bit) dispatcher instruction. Since each ARM
instruction is 32 bit long, we can use the default branch (B)
instruction as a generic dispatcher instruction, which yields
a possible target range from −224 to 224 − 1 bytes (32MB).
As a consequence, the dispatcher target cannot lie within ar-
bitrary memory address ranges. We address this problem by
jumping to the mentioned trampolines rather than directly
to the validation routine. The trampolines are small in size
and are allocated near the code section of the application us-
ing mmap. Note that, theoretically, an application’s memory
image could be too large to ﬁnd a free memory page for the
trampolines. However, the application image would have
to be larger than 16MB in order to break this approach. In
practice, this is very unlikely. Even if this would be the case,
one could search for memory regions within the code sec-
tion that are unused (e.g., due to alignment) and use them
as trampolines.
Note that for direct function calls, we use the BLX in-
struction instead, which provides the same target range as
the B instruction. Using BLX ensures that the return address
of the call is moved into the lr (link) register1. Further,
MoCFI can easily lookup the original call target (stored in
our patchﬁle) by inspecting the link register.
THUMB (16 bit and 32 bit) dispatcher instructions.
For THUMB instructions, the situation is more compli-
cated. While immediate branches are typically 32 bits in
size (i.e., one can use the same approach as discussed previ-
ously), many control-ﬂow instructions exist that are only 16
bits long. As a consequence, the reduced range for a branch
target (only −211 to 211 − 1, i.e., 1KB) demands for a dif-
ferent solution. MoCFI addresses this issue by replacing a
16 Bit indirect branch with a 32 Bit dispatcher instruction.
However, this has the effect that we overwrite 2 Thumb in-
1Note that for indirect calls MoCFI uses B as dispatcher instruction
and correctly sets lr within the validation routine, because the value of
lr for indirect calls is dependent on whether the call is an external or
internal call. For external calls we let lr point to a specialized code piece
of MoCFI to recognize when external (indirect) library calls returned (see
also Appendix A).
Header Code Program Code Trampolines Data MoCFI Runtime Module INS, INS, … MOV R1,R2 POP {R4-R7,PC} INS, INS, … Internal Call Trampoline  Original iOS Binary (Custom) Trampoline 1 1. Save registers 2. Call Runtime Module 3. Reset registers 4. Jump to Function_A 1. Previous INS: MOV R1,R2 2. Save registers 3. Call Runtime Module 4. Reset registers 5. Original INS: POP {R4-R7, PC} LDR R2, [PC,#16] POP {R4-R7,PC} INS, INS, … BLX Function_A INS, INS, … Header Code Program Code Data INS, INS, … B Trampoline 1 INS, INS, … Rewritten iOS Binary LDR R2, [PC,#16] #ILLEGAL INS INS, INS, … BLX Call Trampoline INS, INS, … Exception Handler structions: the original branch (POP {R4-R7,PC}) and
the instruction preceding the branch (MOV R1,R2). To
preserve the program’s semantics, we execute the latter one
at the beginning of our trampolines (step 1 in Trampoline 1).
Dispatching through exception handling. However, re-
placing 2 THUMB instructions is not possible if the instruc-
tion preceding the branch references the program counter
or is itself a branch. For instance, LDR R2,[PC,#16]
in Figure 3 uses the current value of pc to load a pointer.
Note that such instructions are not allowed on Intel x86. In
such scenarios, we use an entirely different approach: upon
initialization, we register an iOS exception handler for ille-
gal instructions. The dispatcher instruction is then simply
an arbitrary illegal instruction that will trigger our excep-
tion handler. Since this technique induces additional per-
formance overhead, we only use it for exceptional cases. To
further reduce the use of the exception handler, one could
calculate the address from which pc is loaded in the static
analysis phase and replace the relevant load instruction with
a new memory load instruction which could be placed at the
beginning of the trampoline.
Note that our exception handler forwards all exceptions
not caused by MoCFI. Furthermore, by monitoring the ex-
ception handling API, we can ensure the position of our
handler in the exception chain.
5.2.2. Runtime Module: CFI Enforcement
An abstract view of the runtime module is shown in Fig-
ure 4:
it mainly consists of dedicated validation routines
for each branch type, where each type is represented by a
rectangle on the left side of Figure 4. The validation rou-
tines have to validate the target of every branch to prevent
the application from targeting a BBL beyond the scope of
the CFG and the current execution path. Obviously, each
branch target requires a different type of validation, as we
will describe in the following.
Figure 4. Overview of the runtime module
Function Calls and Returns. To prevent return-oriented
attacks, we monitor all function calls and returns, and apply
the shadow stack paradigm [12]: whenever the program in-
vokes a subroutine (through a direct, indirect, or dispatcher
call), we copy the return address on a dedicated shadow
stack. Upon function return, we compare the return ad-
dress the program wants to use to the address stored on our
shadow stack. Since function calls (through BL or BLX) au-
tomatically store the return address in lr, we simply need
to push lr onto the shadow stack. Further, we maintain a
separate shadow stack for each execution thread to support
multi-threaded programs. Upon function return, we deter-
mine the return address the program aims to use and retrieve
the required stack pointer offset from the patchﬁle.
As mentioned in Section 3.3, return instructions can be
implemented in many different ways on ARM, and often
involve the loading of several general-purpose registers. We
ensure that all side-effects are correctly handled by issuing
the original return at the end of the trampoline (as described
in Section 5.2.1).
Indirect Jumps and Calls. The possible jump targets for
indirect jumps and calls have either been calculated during
static analysis (see Section 5.1) or remain completely un-
known. In the ﬁrst case, the pre-calculated values have to
be compared to the outcome of the instruction that MoCFI
intercepted.
In the most complex and versatile form, the
instruction is of the form LDR pc,[rX,rY,LSL#z]
which loads pc according to the given register values:
pc ← rx + ry · 2z. Consequently, MoCFI checks the cur-
rent value of the registers according to the above equation
to match one of the saved, valid jump targets. The informa-
tion which registers are used by the indirect jump is saved in
our patchﬁle. However, for simpler indirect jumps such as
MOV pc,rX and indirect calls (BLX rX) we simply have
to check the content of rX. In case the required information
cannot be calculated in advance during the static analysis
phase, we use heuristics (see Section 5.1) to ensure that the
jump targets reside inside the scope of the current function,
or for indirect calls, target a valid function prologue.
Objective C MsgSend Calls. Dispatcher calls via the
objc_msgSend function work like indirect calls. How-
ever, instead of a register, they use the function’s name (se-
lector) and class instance to refer to a function’s implemen-
tation address (see Section 5.1). We trust the implementa-
tion of objc_msgSend and do not check whether it re-
solved the correct address. We rather check the supplied
parameters selector and class instance. Both is necessary
as the emitted code by GCC usually de-references a regis-
ter and passes its de-referenced value to objc_msgSend.
However, the referenced memory is writable and could be
overwritten by an adversary. The selector is a simple zero-
terminated C-string. Checking whether the selector is still
correct can be veriﬁed by comparing the original string ex-
tracted during static analysis to the current string selector
points to.
Function Returns Indirect Jumps Shadow Stack Branch valid? Issue original branch Raise alarm and stop program yes no Direct Calls Indirect Calls Objective C MsgSend Calls Control-Flow Graph scope of this paper, instead our focus is a framework that
provides the foundation for system-wide and efﬁcient CFI
enforcement on smartphone platforms with an underlying
ARM processor.
Since MoCFI performs binary rewriting after the iOS
loader has veriﬁed the application signature, our scheme
is compatible to application signing. On the other hand,
our load-time module is not directly compatible to the iOS
CSE (code signing enforcement) runtime model (see Sec-
tion 2.2). CSE prohibits any code generation at runtime on
non-jailbroken devices, except if an application has been
granted the dynamic-signing entitlement. To tackle this is-
sue, one could assign the dynamic-signing entitlement to
applications that should be executed under the protection
of MoCFI. On the one hand, this is a reasonable approach,
since the general security goal of CFI is to protect be-
nign applications rather than malicious ones. Further, the
dynamic-signing entitlement will not give an adversary the
opportunity to circumvent MoCFI by overwriting existing
control-ﬂow checks in benign applications. In order to do
so, he would have to mount a control-ﬂow attack before-
hand that would be detected by MoCFI. On the other hand,
when dynamic-signing is in place, benign applications may
unintentionally download new (potentially) malicious code,
or malicious applications may be accidentally granted the
dynamic-signing entitlement (since they should run under
protection of MoCFI) and afterwards perform malicious ac-
tions. To address these problems, one could constrain bi-
nary rewriting to the load-time phase of an application, so
that the dynamic-signing entitlement is not needed while the
application is executing. Further, new sandbox policies can
be speciﬁed that only allow the MoCFI library to issue the
mmap call to replace existing code, e.g., the internal page
ﬂags of the affected memory page are not changed, or their
values are correctly reset after MoCFI completed the binary
rewriting process.
Finally, special care must be taken that an adversary can-
not tamper with the MoCFI library and thus bypass MoCFI.
Since our library is small in size, the probability for ex-
ploitable vulnerabilities is very low. Given the small code
base, we could also apply code veriﬁcation tools.
Limitations. Similar to CFI for Intel x86, our current im-
plementation does not detect attacks exploiting exception
handlers: an adversary can overwrite pointers to an excep-
tion handler and then deliberately cause an exception (e.g.,
by corrupting a pointer before it is de-referenced). This is
possible because GCC pushes these pointers on the stack
on demand. We stress that this is rather a shortcoming of
the iOS operating system — similar problems have already
been solved on other platforms, such as on Windows [31].
Therefore, we encourage Apple to port these techniques
to iOS.
Figure 5. Objective C string comparison opti-
mization using a Cache
We enhanced the performance by introducing a string
cache (see Figure 5). This is possible as the strings them-
selves are write-protected. This enables us to cache the re-
sult of the comparison based on a pointer to that string.
For the class instance checking, the name of the class has
been extracted by the static analysis. This name is of the
form _OBJC_CLASS_$_NSObject, where NSObject
is the class name. The Runtime Module obtains the load
address of every symbol by using dlsym(). The class in-
stance parameter supplied to objc_msgSend must then
either directly point to that symbol address (static class) or
is an instance of that class. For class instances, the ﬁrst
word (32 bit pointer) points to the symbol address of the
corresponding class.
6. Discussion and Security Considerations
Our solution adheres to the goal of detecting devia-
tions from the control-ﬂow at runtime from the known-good
control-ﬂow. Since iOS enforces W ⊕ X, a memory page